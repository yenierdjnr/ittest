{
  "description": "In this series, we will take a look at creating functions as a way to collect logic into a reusable chunk. If you want to explore how to create and utilize functions to make your code more readable and maintainable, then join us there!",
  "descriptionMD": "In this series, we will take a look at creating functions as a way to collect logic into a reusable chunk. If you want to explore how to create and utilize functions to make your code more readable and maintainable, then join us there!",
  "length": "11265",
  "name": "Abstracting with Functions",
  "practiceExam": false,
  "subtitle": "Reusing code one piece at a time",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this series, we will take a look at creating functions as a way to collect logic into a reusable chunk. If you want to explore how to create and utilize functions to make your code more readable and maintainable, then join us there!",
          "length": "123",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-0-0-0-overview-060618-PGM.00_00_00_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-0-0-0-overview-060618-PGM.00_00_00_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-0-0-0-overview-060618-PGM.00_00_00_00.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.083 --> 00:00:05.829\n[MUSIC]\n\n2\n00:00:05.829 --> 00:00:07.790\nHello and thank you for watching DevProTV.\n\n3\n00:00:07.790 --> 00:00:11.810\nWe are with Justin Dennison talking\nabout abstracting with functions.\n\n4\n00:00:11.810 --> 00:00:14.910\nJustin, tell us about this course.\n&gt;&gt; So this course is meant to give a you\n\n5\n00:00:14.910 --> 00:00:18.370\na little bit of a mental picture\nof what a function is, right?\n\n6\n00:00:18.370 --> 00:00:19.320\nThat's to start out.\n\n7\n00:00:19.320 --> 00:00:24.740\nBut our real main goal is to talk about\nall the nuances that crop up in Python\n\n8\n00:00:24.740 --> 00:00:25.720\nwhen you're creating a function.\n\n9\n00:00:25.720 --> 00:00:28.990\nSo we're gonna be looking at keywords,\nat some of the syntax and\n\n10\n00:00:28.990 --> 00:00:33.450\nthen looking at the difference between\npositional and keyword argument.\n\n11\n00:00:33.450 --> 00:00:36.960\nHow those all come into play when we're\ncreating functions that we're going\n\n12\n00:00:36.960 --> 00:00:39.580\nto reuse later.\n&gt;&gt; Now who is this show targeted\n\n13\n00:00:39.580 --> 00:00:40.210\ntoward?\n&gt;&gt; So\n\n14\n00:00:40.210 --> 00:00:43.770\nthis is someone who is getting started\nin Python and well programming.\n\n15\n00:00:43.770 --> 00:00:46.672\nThe same concepts kind of apply\nthroughout the programming.\n\n16\n00:00:46.672 --> 00:00:48.920\nAnd we're gonna focus on\nPython in particular.\n\n17\n00:00:48.920 --> 00:00:52.619\nIf you've ever created a function or\nyou have some things where your like,\n\n18\n00:00:52.619 --> 00:00:55.745\nI don't really know what this is,\nthen this course is for you.\n\n19\n00:00:55.745 --> 00:00:59.197\nBecause well, this is meant to\nbe a getting started kind of\n\n20\n00:00:59.197 --> 00:01:01.885\nendeavor.\n&gt;&gt; Is there a certification involved in\n\n21\n00:01:01.885 --> 00:01:02.665\nthe course?\n&gt;&gt; No,\n\n22\n00:01:02.665 --> 00:01:05.125\nthis is more about powering up our skills.\n\n23\n00:01:05.125 --> 00:01:08.375\nLearning a little more so\nwe're better programmers incrementally.\n\n24\n00:01:08.375 --> 00:01:09.645\nWe keep moving forward and\n\n25\n00:01:09.645 --> 00:01:11.325\ngetting better every day.\n&gt;&gt; And\n\n26\n00:01:11.325 --> 00:01:14.065\nI know you've already touched on it,\nbut what topics are covered\n\n27\n00:01:14.065 --> 00:01:15.885\nin abstracting with functions?\n&gt;&gt; So,\n\n28\n00:01:15.885 --> 00:01:19.930\nhow to create a function,\nthe keywords associated with a function.\n\n29\n00:01:19.930 --> 00:01:23.890\nPositional parameters,\nhow to use multiple positional parameters.\n\n30\n00:01:23.890 --> 00:01:25.140\nWhat are keyword arguments?\n\n31\n00:01:25.140 --> 00:01:27.120\nHow to use multiple keyword arguments.\n\n32\n00:01:27.120 --> 00:01:29.060\nAnd then how to take all of those things,\n\n33\n00:01:29.060 --> 00:01:32.450\nput them together to get\nreally complex functions.\n\n34\n00:01:32.450 --> 00:01:35.840\nSpoiler alert,\nI actually recommend against those.\n\n35\n00:01:35.840 --> 00:01:39.440\nBut so you'll know when you're reading\nother people's code, your own code.\n\n36\n00:01:39.440 --> 00:01:43.770\nCode from six months ago or you're\nreading code in the future you'll go,\n\n37\n00:01:43.770 --> 00:01:44.600\nI know what that means.\n\n38\n00:01:44.600 --> 00:01:47.740\nSo that's our main goal.\n&gt;&gt; Thanks Justin, you do a great job.\n\n39\n00:01:47.740 --> 00:01:50.820\nAnd if abstracting with functions sounds\nlike something you'd be interested in, and\n\n40\n00:01:50.820 --> 00:01:54.030\nyou should be; make sure to watch every\nsingle episode in the course library,\n\n41\n00:01:54.030 --> 00:01:54.860\nyou'll be gald you did.\n\n42\n00:01:54.860 --> 00:01:57.945\nAnd thanks for watching DevProTV.\n\n43\n00:01:57.945 --> 00:02:03.134\n[MUSIC]\n\n",
          "vimeoId": "273919615"
        },
        {
          "description": "In this episode, Aubri and Ronnie discuss the purpose and place fo the MAC Address.  They show where to find it and why it's important to networking. The emphasize the importance of getting to know about the binary conversion for any professional networking based certification exam.",
          "length": "1116",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-1-1-what_is_a_function-060618-PGM.00_18_29_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-1-1-what_is_a_function-060618-PGM.00_18_29_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-1-1-what_is_a_function-060618-PGM.00_18_29_22.Still001-sm.jpg",
          "title": "What is a Function",
          "transcript": "",
          "vimeoId": "273918823"
        },
        {
          "description": "In this episode, Justin and Zach explore creating out first function in Python. Justin discusses the syntax as well as some edge cases to consider when creating a function. Moreover, Justin demonstrates the use of a function to collect programs into a more predictable format.",
          "length": "1423",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-2-1-creating_a_function-060418-PGM.00_27_29_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-2-1-creating_a_function-060418-PGM.00_27_29_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-2-1-creating_a_function-060418-PGM.00_27_29_02.Still001-sm.jpg",
          "title": "Creating a Function",
          "transcript": "",
          "vimeoId": "273703304"
        },
        {
          "description": "In this episode, Justin and Zach continue expanding on simple functions that can be used to create more complex programs.",
          "length": "1924",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-3-1-functions_without_arguments-060418-PGM.00_35_13_01.Still002.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-3-1-functions_without_arguments-060418-PGM.00_35_13_01.Still002-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-3-1-functions_without_arguments-060418-PGM.00_35_13_01.Still002-sm.jpg",
          "title": "Functions without Arguments",
          "transcript": "",
          "vimeoId": "273702324"
        },
        {
          "description": "In this episode, Justin and Zach expand the creation of functions by adding a single argument or parameter to the function. Additionally, Justin discusses that parameters can be positional in nature where the order dictates how the function runs.",
          "length": "922",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-4-1-functions_with_a_single_positional_argument-060418-PGM.00_15_40_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-4-1-functions_with_a_single_positional_argument-060418-PGM.00_15_40_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-4-1-functions_with_a_single_positional_argument-060418-PGM.00_15_40_17.Still001-sm.jpg",
          "title": "Functions with a Single Positional Argument",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.335 --> 00:00:15.053\nHello and thank you for\nwatching DEVPRO.TV,\n\n3\n00:00:15.053 --> 00:00:16.469\nhelping you learn everywhere you go.\n\n4\n00:00:16.469 --> 00:00:20.670\nI'm your host, Zach Memos, with this\nepisode of Abstracting with Functions.\n\n5\n00:00:20.670 --> 00:00:25.100\nAnd this episode is functions with\na single positional argument.\n\n6\n00:00:25.100 --> 00:00:28.540\nI don't know exactly what that's about,\nso let's find out and\n\n7\n00:00:28.540 --> 00:00:30.010\nask Justin Dennison right over here.\n\n8\n00:00:30.010 --> 00:00:31.670\nJustin, good to see you.\n&gt;&gt; Good to see you Zach,\n\n9\n00:00:31.670 --> 00:00:32.970\nhow are you today?\n&gt;&gt; I'm great, and\n\n10\n00:00:32.970 --> 00:00:37.710\nI wanna find out more about this.\n&gt;&gt; I will try my best, and you know what?\n\n11\n00:00:37.710 --> 00:00:39.120\nI'm gonna give you a round of applause,\n\n12\n00:00:39.120 --> 00:00:41.885\nthat's a lot of words in that little.\n&gt;&gt; [LAUGH]\n\n13\n00:00:41.885 --> 00:00:43.381\n&gt;&gt; Cuz I wrote the title, and\n\n14\n00:00:43.381 --> 00:00:46.849\nI was like man, I would mess up\nif this was not my title [LAUGH].\n\n15\n00:00:46.849 --> 00:00:51.483\nSo great job on that, and, well,\nsingle positional arguments,\n\n16\n00:00:51.483 --> 00:00:53.979\nor single positional parameters.\n\n17\n00:00:53.979 --> 00:00:59.523\nI kind of wanna take the step-wise,\nthis one may be a little shorter.\n\n18\n00:00:59.523 --> 00:01:01.299\nI'm notorious for saying that, and\n\n19\n00:01:01.299 --> 00:01:04.520\nit takes me 35 minutes to cover\nall the key points I want to.\n\n20\n00:01:04.520 --> 00:01:08.560\nSo, we'll see how that goes, but what I\nmean is we've actually seen functions that\n\n21\n00:01:08.560 --> 00:01:12.110\ntake zero arguments, nothing,\nthere's nothing in the parenthesis.\n\n22\n00:01:12.110 --> 00:01:13.290\nWell, that's not always good.\n\n23\n00:01:13.290 --> 00:01:16.440\nWe talked about in the previous episode\nthat maybe it's better to hand the\n\n24\n00:01:16.440 --> 00:01:20.020\nfunction the information that it needs.\n&gt;&gt; That's right.\n\n25\n00:01:20.020 --> 00:01:21.540\n&gt;&gt; And then the function's like, all\n\n26\n00:01:21.540 --> 00:01:26.660\nright, gotcha, that way you have control\nover what the function's doing, right?\n\n27\n00:01:26.660 --> 00:01:30.850\nIf I go, well, here's the string cheese,\nthat's how the function behaves,\n\n28\n00:01:30.850 --> 00:01:33.270\nassuming that you wrote your\nfunction in an appropriate way.\n\n29\n00:01:33.270 --> 00:01:37.600\nNow, a single positional parameter,\nlet's break that down.\n\n30\n00:01:37.600 --> 00:01:39.870\nSingle, you're gonna get one.\n&gt;&gt; Right.\n\n31\n00:01:39.870 --> 00:01:43.390\n&gt;&gt; Positional, what order are they in?\n\n32\n00:01:43.390 --> 00:01:47.610\nPositional, function arguments\ncome in two flavors.\n\n33\n00:01:48.670 --> 00:01:50.960\nPositional, so\nthis is the first parameter,\n\n34\n00:01:50.960 --> 00:01:54.320\nsecond parameter, third parameter or\narguments in this case.\n\n35\n00:01:54.320 --> 00:01:58.060\nThen what are known as keyword,\nwe'll talk about those later.\n\n36\n00:01:59.310 --> 00:02:02.890\nThose are named parameters, so\nthose have a label, so to speak.\n\n37\n00:02:03.940 --> 00:02:06.193\nThese are two different things,\nbecause sometimes I just go,\n\n38\n00:02:06.193 --> 00:02:09.320\nwell the first one is this, the second\none is this, the third one is this.\n\n39\n00:02:09.320 --> 00:02:14.184\nThe other times, I need some label,\nbecause it doesn't make sense.\n\n40\n00:02:14.184 --> 00:02:20.345\nMy typical recommendation is keyword\nparameters or keyword arguments, are gonna\n\n41\n00:02:20.345 --> 00:02:23.328\nmake things a little easier for you.\n&gt;&gt; Yeah.\n\n42\n00:02:23.328 --> 00:02:24.653\n&gt;&gt; But you should be aware of\n\n43\n00:02:24.653 --> 00:02:27.052\npositional parameters and how they behave,\n\n44\n00:02:27.052 --> 00:02:29.317\nbecause we are gonna do that anyway.\n&gt;&gt; [LAUGH]\n\n45\n00:02:29.317 --> 00:02:31.044\n&gt;&gt; So, let's go ahead and take a look\n\n46\n00:02:31.044 --> 00:02:34.990\nat the screen and, well, this is kind of\na left off from the previous episode.\n\n47\n00:02:34.990 --> 00:02:37.150\nLet's close that out,\nget our file set up, and\n\n48\n00:02:37.150 --> 00:02:39.429\nthen take a look at these\npositional parameters.\n\n49\n00:02:39.429 --> 00:02:43.902\nWe've talked about a lot of the edge\ncases in the previous few episodes, so\n\n50\n00:02:43.902 --> 00:02:48.805\nthat's why we may be able to get going\na little faster, we're rolling down hill.\n\n51\n00:02:48.805 --> 00:02:49.965\n&gt;&gt; We should just pause right now and\n\n52\n00:02:49.965 --> 00:02:53.204\nlet them go ahead and watch those things.\n&gt;&gt; You should definitely do that.\n\n53\n00:02:53.204 --> 00:02:53.882\n&gt;&gt; And, welcome back.\n\n54\n00:02:53.882 --> 00:02:55.496\n&gt;&gt; And there we go, all right so,\n\n55\n00:02:55.496 --> 00:02:57.733\nby the way your computer's not messed up,\n\n56\n00:02:57.733 --> 00:03:01.112\nyour streaming device is not messed up,\nthat was intentional.\n\n57\n00:03:01.112 --> 00:03:05.713\nSo let's go and close this out and\nlet's go over here, clear this out.\n\n58\n00:03:05.713 --> 00:03:09.747\nAnd create a new file called single pos,\n\n59\n00:03:09.747 --> 00:03:14.335\nnotice I changed the name here, argument.\n\n60\n00:03:14.335 --> 00:03:19.575\nI'm gonna call this an argument, could be\na param, it's kind of interchangeable.\n\n61\n00:03:19.575 --> 00:03:23.300\nA lot of times what will happen is\nyou'll hear positional parameters and\n\n62\n00:03:23.300 --> 00:03:29.680\nkey word arguments, but ultimately, it's\nperfectly okay, I've heard it both ways.\n\n63\n00:03:29.680 --> 00:03:33.248\nAnd as far as I know the Python community\ndoesn't have a recommendation of one or\n\n64\n00:03:33.248 --> 00:03:33.947\nthe other way.\n\n65\n00:03:33.947 --> 00:03:38.325\nI could be wrong about that, buried away\nin a documentation or something like that.\n\n66\n00:03:38.325 --> 00:03:42.362\nSo single pos argument, cool, we're gonna\ndo exactly what we've done in the last\n\n67\n00:03:42.362 --> 00:03:44.726\ncouple of episodes, and\nthat's kind of set up,\n\n68\n00:03:44.726 --> 00:03:48.007\nwell number one get rid of that pop up.\n&gt;&gt; Get rid of the pop up, yeah.\n\n69\n00:03:48.007 --> 00:03:48.895\n&gt;&gt; Yeah, he's always there,\n\n70\n00:03:48.895 --> 00:03:50.330\ntrying to be helpful,\nbut kind of annoying.\n\n71\n00:03:50.330 --> 00:03:54.408\nBut we're gonna create\na function with no parameter.\n\n72\n00:03:54.408 --> 00:03:55.794\nAnd we're just gonna say it works.\n\n73\n00:03:57.760 --> 00:04:04.212\nAnd then we're gonna say if_name_ = _main_\nand we're gonna say main, just like that.\n\n74\n00:04:04.212 --> 00:04:11.299\nWe're gonna make sure it works and\nthen we're gonna get started, all right.\n\n75\n00:04:11.299 --> 00:04:18.630\nSo, here we go, Python 3 and\nwait for it, it works, okay.\n\n76\n00:04:18.630 --> 00:04:25.750\nNow, if we think back, we had that 7 and\n10 and that just returned a number.\n\n77\n00:04:25.750 --> 00:04:29.861\nBut really,\nwe've kind of already used a function\n\n78\n00:04:29.861 --> 00:04:34.080\nthat takes a single positional parameter,\nright?\n\n79\n00:04:34.080 --> 00:04:39.275\nAnd it's a little more complicated than\nthat but, let's see what happens here.\n\n80\n00:04:39.275 --> 00:04:44.753\nSo we're gonna create a function\ncalled length, okay, not len.\n\n81\n00:04:44.753 --> 00:04:48.507\nAnd it's going to take some string and\n\n82\n00:04:48.507 --> 00:04:53.210\nit is going to return\nthe length of that string.\n\n83\n00:04:54.250 --> 00:04:57.432\nSo I did a lot of typing there, let's\nback up, make sure that everybody's good.\n\n84\n00:04:57.432 --> 00:05:01.550\ndef, right, we know what that is.\n\n85\n00:05:01.550 --> 00:05:06.356\nlength, I'm not going to reuse len\nbecause that's already reserved,\n\n86\n00:05:06.356 --> 00:05:08.120\nnotice it right here.\n\n87\n00:05:08.120 --> 00:05:14.211\nAnd then parentheses, and then right here\nstrings, it's gonna take one parameter,\n\n88\n00:05:14.211 --> 00:05:18.809\none argument, and I'm just going\nto give that a temporary name.\n\n89\n00:05:18.809 --> 00:05:25.390\nThis name exists in the context,\nin the scope of this function, okay?\n\n90\n00:05:25.390 --> 00:05:26.773\nSo I can use this name anywhere.\n\n91\n00:05:28.358 --> 00:05:32.562\nIt's just like if I came here and\n\n92\n00:05:32.562 --> 00:05:37.450\nsaid, string = cheese, okay?\n\n93\n00:05:37.450 --> 00:05:43.524\nNow inside of main, string will be that\nthing, okay, so that's what's happened.\n\n94\n00:05:43.524 --> 00:05:46.426\nSo, this length function, what does it do?\n\n95\n00:05:46.426 --> 00:05:53.510\nWell, let's find the length_of_cheese,\n\n96\n00:05:53.510 --> 00:05:59.330\nand that's length (\"cheese\").\n\n97\n00:05:59.330 --> 00:06:02.243\nAnd this is where Python\ngets a little iffy,\n\n98\n00:06:02.243 --> 00:06:06.810\nit's not going to tell me that\nI have to give it a string.\n\n99\n00:06:06.810 --> 00:06:12.210\nI've written the function with\nthe hope that when people use it\n\n100\n00:06:12.210 --> 00:06:14.110\nthey're going to use it on a string.\n\n101\n00:06:14.110 --> 00:06:18.090\nI could technically get away with a list,\nor a dictionary, or\n\n102\n00:06:18.090 --> 00:06:20.330\na one of those other collection types.\n\n103\n00:06:20.330 --> 00:06:23.542\nBut I've written it in a way\nto where it's a string,\n\n104\n00:06:23.542 --> 00:06:25.380\nlength of string, and it's returning.\n\n105\n00:06:25.380 --> 00:06:30.835\nSo (\"The length of cheese is\",\n\n106\n00:06:30.835 --> 00:06:34.981\nlength-of-cheese).\n\n107\n00:06:34.981 --> 00:06:37.990\nBoom, right there, let's go check it out.\n\n108\n00:06:37.990 --> 00:06:40.294\nI think I bobbed my head the wrong way.\n&gt;&gt; [LAUGH]\n\n109\n00:06:40.294 --> 00:06:42.640\n&gt;&gt; So who knows, who knows?\n\n110\n00:06:42.640 --> 00:06:46.748\nAll right, so single,\nthe length of cheese is 6, okay?\n\n111\n00:06:46.748 --> 00:06:50.607\nWell, let's go make sure, one, two,\nthree, four, five, six, it is.\n\n112\n00:06:50.607 --> 00:06:55.430\nI pass this through to get the result,\n\n113\n00:06:55.430 --> 00:06:59.400\nso I said, hey, cheese.\n\n114\n00:06:59.400 --> 00:07:04.225\nWhat this means is if I do\nsomething like this, Zach,\n\n115\n00:07:04.225 --> 00:07:09.587\nwhat's your favorite dessert?\n&gt;&gt; Cheesecake\n\n116\n00:07:09.587 --> 00:07:14.439\n[LAUGH].\n&gt;&gt; Cheesecake is, well, I'm just gonna\n\n117\n00:07:14.439 --> 00:07:19.694\ncall this in line,\nI'm gonna say length(\"cheesecake\").\n\n118\n00:07:19.694 --> 00:07:23.060\nNotice, this one I'm passing cheese\nthrough, I'm saying, hey function,\n\n119\n00:07:23.060 --> 00:07:24.800\nhere's the string I'm talking about.\n\n120\n00:07:25.970 --> 00:07:29.546\nAnd this, I'm passing cheesecake,\nlet's go check it out.\n\n121\n00:07:32.732 --> 00:07:38.590\nMaybe, the length of cheese if 6,\nthe length of cheesecake is 10.\n\n122\n00:07:38.590 --> 00:07:43.910\nSo, this function is now a little more\nfluid, a little more useful because\n\n123\n00:07:43.910 --> 00:07:48.920\nI'm handing it information in order to\ndo something based on that information.\n\n124\n00:07:48.920 --> 00:07:52.220\nI'm handing in a single\npositional parameter.\n\n125\n00:07:52.220 --> 00:07:59.426\nSo okay, we've got strings there,\nwhat happens if I do something like this.\n\n126\n00:07:59.426 --> 00:08:05.906\nI'm like, well, I'm gonna put the number\n1 there, what's the length of 1?\n\n127\n00:08:05.906 --> 00:08:08.700\nMaybe 1, I don't,\nis it broke, I don't know.\n\n128\n00:08:08.700 --> 00:08:12.862\nSo notice I wrote string here,\nmy intention was string, but\n\n129\n00:08:12.862 --> 00:08:16.280\nif I come back and I run this, it's broke.\n\n130\n00:08:16.280 --> 00:08:20.440\nObject of type int has no length,\nwhy did that happen?\n\n131\n00:08:20.440 --> 00:08:24.470\nWell because numbers don't have a length,\nthat doesn't make sense\n\n132\n00:08:24.470 --> 00:08:28.060\nin the context of numbers.\n&gt;&gt; So if you used the word one, O-N-E,\n\n133\n00:08:28.060 --> 00:08:31.192\nthen you'd say three,\n&gt;&gt; Right, right, there you go so\n\n134\n00:08:31.192 --> 00:08:34.579\nif we did this and\nour variable names don't make sense now,\n\n135\n00:08:34.579 --> 00:08:37.929\ncuz we've put a length of cheese and\nlength(\"one\").\n\n136\n00:08:37.929 --> 00:08:40.970\nThis will work because this is a string,\nand\n\n137\n00:08:40.970 --> 00:08:45.090\nsingle positional parameter it is 3,\njust like you said.\n\n138\n00:08:46.480 --> 00:08:52.845\nHere is kind of the hiccup\nthough numbers do not work.\n\n139\n00:08:52.845 --> 00:08:54.930\nHowever, what if I put\nsomething like this.\n\n140\n00:08:56.440 --> 00:09:01.959\na, b, c, or you know what,\n\n141\n00:09:01.959 --> 00:09:06.780\nI should just take the whole\nequation out (1, 2,\n\n142\n00:09:06.780 --> 00:09:10.189\n3), the list of (1, 2, 3).\n\n143\n00:09:12.539 --> 00:09:16.125\nThat's still 3, why did that work?\n\n144\n00:09:16.125 --> 00:09:18.030\nWell because a list also has a length.\n\n145\n00:09:19.200 --> 00:09:23.740\nSo, this is one of those things where\nthinking about what kind of information or\n\n146\n00:09:23.740 --> 00:09:28.440\nwhat kind of data goes into a function,\ncan dictate how a function behaves.\n\n147\n00:09:28.440 --> 00:09:33.460\nThere are surprising circumstances,\nif I had this length function that expects\n\n148\n00:09:33.460 --> 00:09:39.658\na string, well a list will work\nbecause a list also has a length.\n\n149\n00:09:39.658 --> 00:09:43.072\nDictionary, okay,\nyou have to be careful there,\n\n150\n00:09:43.072 --> 00:09:45.576\nit's just one of the nuances of Python.\n\n151\n00:09:45.576 --> 00:09:49.164\nSo, think about data that you are passing\nthrough, just wanted to illustrate that.\n\n152\n00:09:49.164 --> 00:09:53.488\nBut I'm not actually gonna say a word,\nwhat's the length of the word,\n\n153\n00:09:53.488 --> 00:09:55.590\nand I'm gonna say word = cheese.\n\n154\n00:09:55.590 --> 00:09:58.160\nAnd I'm gonna change\nthis to length_of_word.\n\n155\n00:09:59.740 --> 00:10:04.652\nI'm gonna comment this out, and\nI'm going to put this as word.\n\n156\n00:10:07.046 --> 00:10:12.006\nAnd length_of_word, okay, so\nI made that a little more general.\n\n157\n00:10:12.006 --> 00:10:15.980\nNotice this is a variable\n\n158\n00:10:15.980 --> 00:10:20.190\nthat is assigned the value of cheese,\nand I'm using that variable here.\n\n159\n00:10:20.190 --> 00:10:25.590\nWhen this program runs effectively what it\ndoes is it does a find and replace, and\n\n160\n00:10:25.590 --> 00:10:30.680\nchanges out that word with the word\ncheese, the string cheese, okay?\n\n161\n00:10:30.680 --> 00:10:35.500\nNot string cheese like you peel and eat\nbut the actually string containing cheese.\n\n162\n00:10:35.500 --> 00:10:41.250\nAll right, so here we go,\nthe length_of_word is 6.\n\n163\n00:10:41.250 --> 00:10:44.930\nIs that true, it is, one,\ntwo, three, four, five, six.\n\n164\n00:10:44.930 --> 00:10:47.210\nSo now I can pass in a variable but\n\n165\n00:10:47.210 --> 00:10:50.950\nnotice this variable name does\nnot match this variable name.\n\n166\n00:10:50.950 --> 00:10:53.910\nIf I were to instead put the word here,\nright?\n\n167\n00:10:53.910 --> 00:10:56.250\nYou're like I passed word in so\nwhat is the length of word and\n\n168\n00:10:56.250 --> 00:10:57.500\nnotice I changed this.\n\n169\n00:10:57.500 --> 00:10:59.490\nThis is something that people do, and\n\n170\n00:10:59.490 --> 00:11:03.450\nI completely understand why,\nthe name word is now defined.\n\n171\n00:11:03.450 --> 00:11:08.390\nWord does not exist inside the fence or\nthe scope of this function.\n\n172\n00:11:09.390 --> 00:11:14.670\nInstead what I've done is I've renamed\nit to string inside this function\n\n173\n00:11:14.670 --> 00:11:17.762\nbased on its position in the parenthesis.\n\n174\n00:11:17.762 --> 00:11:21.340\nIt came in as first,\nwell this is the only thing in there,\n\n175\n00:11:21.340 --> 00:11:26.203\nso now word has been renamed to string,\nwhich actually has a value behind it.\n\n176\n00:11:26.203 --> 00:11:30.077\nThink of a cup with something in it,\npull it out of the cup there it is,\n\n177\n00:11:30.077 --> 00:11:32.093\nyou just changed the name on the cup.\n\n178\n00:11:32.093 --> 00:11:35.479\nSo we've done strings here,\nthis is not the only thing we can do,\n\n179\n00:11:35.479 --> 00:11:37.098\nwe can use these for anything.\n\n180\n00:11:37.098 --> 00:11:45.147\nSomething that, I used to be a physics\nkind of person, increment, okay?\n\n181\n00:11:45.147 --> 00:11:51.466\nAnd that takes a number and\nit's gonna return the number plus one, and\n\n182\n00:11:51.466 --> 00:11:56.514\nwe can also have decrement and\nthat also takes a number.\n\n183\n00:11:58.424 --> 00:12:00.040\nAnd that returns number minus 1.\n\n184\n00:12:00.040 --> 00:12:05.381\nSo now we have these functions and\nall we've done is we've\n\n185\n00:12:05.381 --> 00:12:11.926\nrenamed this increment to be plus 1,\ndecrement to be minus 1, okay?\n\n186\n00:12:11.926 --> 00:12:19.278\nI'm gonna comment this out, and\nI'm going to say starting number,\n\n187\n00:12:19.278 --> 00:12:23.139\nwhat's your favorite number?\n&gt;&gt; Seven.\n\n188\n00:12:23.139 --> 00:12:23.653\n&gt;&gt; Seven, all right.\n\n189\n00:12:23.653 --> 00:12:24.153\n&gt;&gt; [LAUGH]\n\n190\n00:12:24.153 --> 00:12:26.814\n&gt;&gt; And then what's the next one up,\n\n191\n00:12:26.814 --> 00:12:31.867\nwell that's going to be the increment\nof the starting number.\n\n192\n00:12:31.867 --> 00:12:35.908\nAnd the next one down is the decrement of\n\n193\n00:12:35.908 --> 00:12:40.822\nthe starting number, okay?\nAnd then,\n\n194\n00:12:40.822 --> 00:12:43.810\nwell, let's just print those out so\n\n195\n00:12:43.810 --> 00:12:49.580\nstarting next one up and\nnext one down, just like that.\n\n196\n00:12:49.580 --> 00:12:51.440\nSo we should see these three numbers.\n\n197\n00:12:51.440 --> 00:12:56.760\nLet's check it out, and\nthere we go, 7, 8, 6.\n\n198\n00:12:57.820 --> 00:13:02.027\nSo those are returning, I'm not modifying\nthe original, I'm not changing that,\n\n199\n00:13:02.027 --> 00:13:04.884\nI'm just passing information and\nI'm getting it back.\n\n200\n00:13:04.884 --> 00:13:08.378\nSo single positional parameters,\nfairly easy.\n\n201\n00:13:08.378 --> 00:13:12.109\nBut I do wanna show you one final thing\nbefore we head out for this episode.\n\n202\n00:13:12.109 --> 00:13:16.973\nAnd that's well what if accidentally\ndo something like this,\n\n203\n00:13:16.973 --> 00:13:19.093\ncomma starting_number.\n\n204\n00:13:19.093 --> 00:13:24.331\nYou would have to see the subsequent\nepisodes to know that you can do this but\n\n205\n00:13:24.331 --> 00:13:29.540\nyou've read any other person's\ncode they will put a comma there.\n\n206\n00:13:29.540 --> 00:13:32.630\nOkay, and\nthat will give you additional parameters.\n\n207\n00:13:32.630 --> 00:13:35.610\nWe're gonna talk about those\nin follow up episodes.\n\n208\n00:13:35.610 --> 00:13:38.380\nBut let's just see the issue\nthat can crop up here.\n\n209\n00:13:40.790 --> 00:13:44.760\nIncrement takes one positional argument,\nbut two are given.\n\n210\n00:13:44.760 --> 00:13:48.390\nIt tells you right there, it says,\nhey, and there's a point to it.\n\n211\n00:13:48.390 --> 00:13:51.410\nBut it says you should only\nbe passing one thing in.\n\n212\n00:13:52.640 --> 00:13:55.880\nYou're giving us two, and\nwe don't know what to do.\n\n213\n00:13:55.880 --> 00:14:00.480\nSo if you see that, that means that you're\ntrying to do something with that function\n\n214\n00:14:00.480 --> 00:14:03.340\nthat it doesn't actually\nhave the capacity to do.\n\n215\n00:14:03.340 --> 00:14:05.988\nIt's like I don't know what to do\nwith two, I'm only built for one.\n\n216\n00:14:05.988 --> 00:14:09.942\nSo single positional\nparameter's pretty easy, but,\n\n217\n00:14:09.942 --> 00:14:14.483\nthere is a lot of times where I need\nto send in more information and\n\n218\n00:14:14.483 --> 00:14:18.131\nwell, we're gonna see that coming up soon.\n&gt;&gt; Awesome,\n\n219\n00:14:18.131 --> 00:14:21.305\nfunctions with a single positional\nargument, another wonderful episode and\n\n220\n00:14:21.305 --> 00:14:22.980\nyou were right Justin, it was quick.\n\n221\n00:14:22.980 --> 00:14:25.060\nBut before we move on anything\nelse you would like to say?\n\n222\n00:14:25.060 --> 00:14:27.830\n&gt;&gt; I will just say we set the foundation,\n\n223\n00:14:27.830 --> 00:14:30.080\nwe're gonna see, kind of this build speed.\n\n224\n00:14:30.080 --> 00:14:33.381\nThere are a few times\nwhere we're gonna go,\n\n225\n00:14:33.381 --> 00:14:37.174\nthere is a lot more to that\nthan I possibly anticipated.\n\n226\n00:14:37.174 --> 00:14:40.583\nBut just keep in mind,\nsingle positional parameters,\n\n227\n00:14:40.583 --> 00:14:44.750\neasy, as you start adding more to\nmix things can get a little hairy.\n\n228\n00:14:44.750 --> 00:14:46.832\nSo I would definitely come on back and\n\n229\n00:14:46.832 --> 00:14:50.105\nsee what's coming up.\n&gt;&gt; And please, come on back, abstracting\n\n230\n00:14:50.105 --> 00:14:54.137\nwith functions, in fact, watch every\nsingle episode, you'll be so glad you did.\n\n231\n00:14:54.137 --> 00:14:57.641\nAnd you'll be in the course library, too,\nwhere there's thousands of hours of other\n\n232\n00:14:57.641 --> 00:15:00.046\ncontent, and in fact,\ncontent Justin's created, too.\n\n233\n00:15:00.046 --> 00:15:03.800\nAnd take a look at all that because\nit's there to help you succeed.\n\n234\n00:15:03.800 --> 00:15:05.410\nAnd tell everybody you\nknow about DEVPRO.TV,\n\n235\n00:15:05.410 --> 00:15:07.340\nyou know a good Dev Pro\nis always learning.\n\n236\n00:15:07.340 --> 00:15:09.322\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n237\n00:15:09.322 --> 00:15:14.454\n&gt;&gt; And we will see\n\n238\n00:15:14.454 --> 00:15:20.446\nyou again soon.\n\n239\n00:15:20.446 --> 00:15:20.946\n[MUSIC]\n\n",
          "vimeoId": "273703726"
        },
        {
          "description": "In this episode, Justin and Zach take a look at functions with a single keyword argument which is like a named or labeled argument. Justin also explores the difference in readability and use of keyword arguments versus positional arguments.",
          "length": "1426",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-5-1-functions-with-a-single-keyword-argument-060518.00_23_39_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-5-1-functions-with-a-single-keyword-argument-060518.00_23_39_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-5-1-functions-with-a-single-keyword-argument-060518.00_23_39_25.Still001-sm.jpg",
          "title": "Functions with a Single Keyword Argument",
          "transcript": "",
          "vimeoId": "273701056"
        },
        {
          "description": "In this episode, Justin and Zach explore how a function usage can change when there are multiple positional argument including the importance of order.",
          "length": "1555",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-6-1-functions-w-multiple-positional-arguments-06051.00_25_48_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-6-1-functions-w-multiple-positional-arguments-06051.00_25_48_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-6-1-functions-w-multiple-positional-arguments-06051.00_25_48_21.Still001-sm.jpg",
          "title": "Functions w/ Multiple Positional Arguments",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.056 --> 00:00:15.130\nHello and thank you for\nwatching DEVPRO.TV,\n\n3\n00:00:15.130 --> 00:00:17.370\nhelping you learn everywhere you go.\n\n4\n00:00:17.370 --> 00:00:21.310\nI'm Zach Memos, your host for this\nepisode of Abstracting with Functions.\n\n5\n00:00:21.310 --> 00:00:25.502\nAnd on this episode functions with\nmultiple positional arguments,\n\n6\n00:00:25.502 --> 00:00:27.533\nlet's find out what that means.\n\n7\n00:00:27.533 --> 00:00:29.273\nJustin Dennison is right here and\nhe's gonna tell me.\n\n8\n00:00:29.273 --> 00:00:32.140\n&gt;&gt; I will, I think it might\ntake a little bit longer than\n\n9\n00:00:32.140 --> 00:00:33.670\nlike that the [INAUDIBLE]\n&gt;&gt; [LAUGH]\n\n10\n00:00:33.670 --> 00:00:35.250\n&gt;&gt; And not to mention,\n\n11\n00:00:35.250 --> 00:00:37.420\nI think that would be horrible for\nthe mics.\n\n12\n00:00:37.420 --> 00:00:39.640\n&gt;&gt; It would be.\n&gt;&gt; We'll try to keep it together.\n\n13\n00:00:39.640 --> 00:00:41.130\n&gt;&gt; Good.\n&gt;&gt; And we're actually kinda alluded to\n\n14\n00:00:41.130 --> 00:00:47.100\nthis in a couple of previous episodes,\nand this actually maybe fairly short.\n\n15\n00:00:47.100 --> 00:00:50.942\nBut I just wanna make sure that\nwe have our, all processes done.\n\n16\n00:00:50.942 --> 00:00:53.600\nYou've seen me do this a couple of times.\n\n17\n00:00:53.600 --> 00:00:57.570\nBut I wanna show you a couple of\ndifferent ways because there's actually\n\n18\n00:00:57.570 --> 00:01:00.890\ntwo types of multiple\npositional parameter functions.\n\n19\n00:01:00.890 --> 00:01:04.860\nThere are those functions that\nwe know how many arguments\n\n20\n00:01:04.860 --> 00:01:06.990\nwe're going to have to give it, right?\n\n21\n00:01:08.060 --> 00:01:12.990\nAnd then there's functions where we go,\nit can take a bunch of arguments.\n\n22\n00:01:12.990 --> 00:01:14.840\nI mean, like the operation itself,\n\n23\n00:01:14.840 --> 00:01:18.270\nthe function itself could\nbe a whole bunch of things.\n\n24\n00:01:19.310 --> 00:01:21.380\nNow, let's say the same for\nwhat that may be.\n\n25\n00:01:21.380 --> 00:01:25.249\nLet's say we have an add function,\nall right?\n\n26\n00:01:25.249 --> 00:01:28.741\nThat add function may be it\ntakes two positional parameters,\n\n27\n00:01:28.741 --> 00:01:32.784\nthe first and the second, and\nthen it just returns the additional one.\n\n28\n00:01:32.784 --> 00:01:36.080\nThese are going to be a little\ncontrived of examples.\n\n29\n00:01:36.080 --> 00:01:39.790\nBut this is meant to be focused on\nsyntax and kind of the thought process.\n\n30\n00:01:40.840 --> 00:01:45.560\nBut if we add things,\nif you're adding on a calculator,\n\n31\n00:01:45.560 --> 00:01:49.350\nso 3 plus 2 plus 1 plus 5 plus 9.\n\n32\n00:01:49.350 --> 00:01:54.920\nSo there could be who knows how\nmany arguments to an add function.\n\n33\n00:01:54.920 --> 00:01:59.590\nAnd that ultimately depends on the context\nthat you need it for, if you only need it\n\n34\n00:01:59.590 --> 00:02:05.070\nto add two numbers, cool,\nthen do just do numbers, just do two.\n\n35\n00:02:05.070 --> 00:02:09.907\nBut if you're like I'm gonna\nlet people put as many in there\n\n36\n00:02:09.907 --> 00:02:11.856\nas they possibly want.\n\n37\n00:02:11.856 --> 00:02:13.231\nThen guess what?\n\n38\n00:02:13.231 --> 00:02:17.449\nThat is completely okay,.you just\nchange it around a little bit.\n\n39\n00:02:17.449 --> 00:02:21.044\nAnd we've actually seen both\nof this in previous episodes.\n\n40\n00:02:21.044 --> 00:02:26.032\n.Now what we're gonna do is we're\ngonna start by focusing on the syntax\n\n41\n00:02:26.032 --> 00:02:30.529\nof just the two and we're actually\ngonna use that add function and\n\n42\n00:02:30.529 --> 00:02:33.421\nsee how that can change some other times.\n\n43\n00:02:33.421 --> 00:02:37.850\nBecause maybe we'll add a little bit\nmore complexity in one or two of these.\n\n44\n00:02:37.850 --> 00:02:41.390\nBut then we are also going to look at,\n\n45\n00:02:41.390 --> 00:02:45.440\nessentially infinite,\nwhat are known as bariatric number.\n\n46\n00:02:45.440 --> 00:02:47.250\nIt could be two, it could be nine,\nit could be four.\n\n47\n00:02:47.250 --> 00:02:51.730\nWe're going to see how that plays out and\nwhen it's passed into the function.\n\n48\n00:02:51.730 --> 00:02:53.860\nSo there's kind of going\nto be a detour there.\n\n49\n00:02:53.860 --> 00:02:57.800\nBut with that said I've done enough\ntalking I think it's now for\n\n50\n00:02:57.800 --> 00:02:58.650\na little bit of showing.\n\n51\n00:02:58.650 --> 00:02:59.231\n&gt;&gt; Let's do it!\n&gt;&gt; So\n\n52\n00:02:59.231 --> 00:03:02.513\nlet's take a look at the screen here,\nI have Visual Studio Code open.\n\n53\n00:03:02.513 --> 00:03:04.608\nIt already has that abstract and\n\n54\n00:03:04.608 --> 00:03:10.100\nwith functions folder open that we\nhave created in previous episodes.\n\n55\n00:03:10.100 --> 00:03:12.540\nWell, I also have the terminal open.\n\n56\n00:03:12.540 --> 00:03:16.150\nHaven't even cleared the screen\nfrom the last one, right?\n\n57\n00:03:16.150 --> 00:03:17.370\nSo, what do we need?\n\n58\n00:03:17.370 --> 00:03:21.880\nWe need multi paas args.\n\n59\n00:03:21.880 --> 00:03:25.275\nI'm getting more and\nmore lazy naming those files.\n\n60\n00:03:25.275 --> 00:03:31.980\nMulti-positional arguments, or\nmultiple positional parameters, right?\n\n61\n00:03:31.980 --> 00:03:35.610\nSo there's some nuances there but\n\n62\n00:03:35.610 --> 00:03:37.510\nwe're just gonna use those\nwords interchangeably.\n\n63\n00:03:37.510 --> 00:03:40.140\n&gt;&gt; So Justin, arguments and\nparameters are the same?\n\n64\n00:03:40.140 --> 00:03:42.530\n&gt;&gt; Yeah in our context, they are the same.\n\n65\n00:03:42.530 --> 00:03:44.470\nWe're gonna use them as synonyms.\n\n66\n00:03:44.470 --> 00:03:47.180\nFull disclosure, if you start diving in,\n\n67\n00:03:47.180 --> 00:03:50.880\nyou may find that they're not\nthe strictest of synonyms.\n\n68\n00:03:50.880 --> 00:03:53.296\nBut for us, an argument, a parameter,\n\n69\n00:03:53.296 --> 00:03:57.780\nwe're handing information to a function\nin order for it to do its job.\n\n70\n00:03:57.780 --> 00:03:59.602\n&gt;&gt; Perfect.\n&gt;&gt; Okay, so we have this file created,\n\n71\n00:03:59.602 --> 00:04:01.208\nwe're gonna hop back over here.\n\n72\n00:04:01.208 --> 00:04:06.658\nWe're gonna open that file and well, just\nlike any other time we're gonna, sounds\n\n73\n00:04:06.658 --> 00:04:12.510\nour little pop up down there eventually\nmaybe we'll make that go away permanently.\n\n74\n00:04:12.510 --> 00:04:17.090\nBut we're going to make sure we have\na main function just like we always do.\n\n75\n00:04:17.090 --> 00:04:23.718\nAnd you know, I'm doing that, some of you\nmay be saying we know to do this by now.\n\n76\n00:04:23.718 --> 00:04:30.810\nHowever, I want you to keep in mind,\nsome people like the repetition.\n\n77\n00:04:30.810 --> 00:04:33.683\nI know sometimes when I'm\nlearning something new,\n\n78\n00:04:33.683 --> 00:04:38.255\nespecially when it comes to programming,\nI may rebuild the exact same thing five,\n\n79\n00:04:38.255 --> 00:04:40.561\nsix, seven, eight, nine, ten times.\n\n80\n00:04:40.561 --> 00:04:47.135\nCuz the repetition allows me to stop\nwith some of the very kind of cognitive,\n\n81\n00:04:47.135 --> 00:04:52.640\nlike it clouds my cognitive judgement,\nmy cognition.\n\n82\n00:04:52.640 --> 00:04:56.040\nSo like typing things that I\nstart to understand more and\n\n83\n00:04:56.040 --> 00:04:57.030\nmore as I rebuild this.\n\n84\n00:04:57.030 --> 00:05:02.040\nSo I'm always gonna be very repetitive\nin nature because I wanna model what\n\n85\n00:05:02.040 --> 00:05:03.660\nI think is a good practice.\n\n86\n00:05:03.660 --> 00:05:05.070\n&gt;&gt; Well repetition is a good thing.\n\n87\n00:05:05.070 --> 00:05:07.020\n&gt;&gt; Yeah it builds most of memory.\n\n88\n00:05:07.020 --> 00:05:08.350\n&gt;&gt; It does.\nIt does and\n\n89\n00:05:08.350 --> 00:05:12.800\nI'm not saying you are going to\nbecome jacked by being a programmer.\n\n90\n00:05:12.800 --> 00:05:14.210\n&gt;&gt; But mentally jack.\n\n91\n00:05:14.210 --> 00:05:15.890\n&gt;&gt; There we go, right.\n\n92\n00:05:15.890 --> 00:05:19.798\nBoom, but anyway, with that said\nlet's make sure that it works and\n\n93\n00:05:19.798 --> 00:05:22.211\nthen we are off to the races, so to speak.\n\n94\n00:05:22.211 --> 00:05:26.230\nSo python3 and boom, it works, awesome.\n\n95\n00:05:26.230 --> 00:05:27.570\nAll right, so here's what we're gonna do.\n\n96\n00:05:27.570 --> 00:05:30.590\nWe're gonna create this add function.\n\n97\n00:05:30.590 --> 00:05:34.557\nSo add, and that's going to take\na first and a second, okay?\n\n98\n00:05:34.557 --> 00:05:38.920\nAll right first and the second,\nand what is that gonna do?\n\n99\n00:05:38.920 --> 00:05:41.170\nIt's going to return first plus second.\n\n100\n00:05:41.170 --> 00:05:44.780\nNow a lot of time you'll see\npeople put x and y, or n,\n\n101\n00:05:44.780 --> 00:05:46.460\nit's just going to take two numbers and\nadd them together.\n\n102\n00:05:46.460 --> 00:05:50.540\nWe're essentially writing a function\nthat wraps the plus sign, right?\n\n103\n00:05:50.540 --> 00:05:53.340\nWe're doing some indirection.\n\n104\n00:05:53.340 --> 00:05:54.941\nNow how am I going to do this?\n\n105\n00:05:54.941 --> 00:05:58.320\nSp let's call, whoa,\nhit my caps locks there.\n\n106\n00:05:58.320 --> 00:06:01.640\nThe result is the add of 1 and 2.\n\n107\n00:06:01.640 --> 00:06:04.190\nSo what is 1 and 2 added together?\n\n108\n00:06:05.830 --> 00:06:12.260\nWell it's 3, and\nthat was a dramatic pause, wasn't it?\n\n109\n00:06:12.260 --> 00:06:15.570\n&gt;&gt; I was thinking that that was\na kind of a bit of a trick question.\n\n110\n00:06:15.570 --> 00:06:17.880\n&gt;&gt; Zach's over here going [LAUGH]\n&gt;&gt; What?\n\n111\n00:06:17.880 --> 00:06:19.310\n&gt;&gt; I think it's three.\n\n112\n00:06:19.310 --> 00:06:23.240\nBut I wanted to show you this,\n\n113\n00:06:23.240 --> 00:06:26.960\nI admit,\nI move very quickly in this little bit.\n\n114\n00:06:26.960 --> 00:06:29.550\nWe're gonna come back and\nanalyze this syntax.\n\n115\n00:06:29.550 --> 00:06:31.990\nBut I wanna show you that it\ndoes in fact work because, and\n\n116\n00:06:31.990 --> 00:06:34.170\nwe've already seen this\nin a previous episode.\n\n117\n00:06:34.170 --> 00:06:38.171\nSo I'm gonna say, python3,\nmultipositional arguments.\n\n118\n00:06:38.171 --> 00:06:42.820\nAnd it does return 3, so we just\nprinted that out to the screen, okay.\n\n119\n00:06:42.820 --> 00:06:48.880\nNow, let me actually zoom this in\njust a wee touch, and rerun that,\n\n120\n00:06:48.880 --> 00:06:53.740\nand there we go, come on, get, here we go,\nwe're going to try one more time.\n\n121\n00:06:53.740 --> 00:06:57.540\nAll right, so there's our 3,\nand we're good, okay?\n\n122\n00:06:59.040 --> 00:07:02.670\nNow let's come back and\nlook at this syntax.\n\n123\n00:07:02.670 --> 00:07:08.920\nIf we look, def is exactly the same,\nthe function name,\n\n124\n00:07:08.920 --> 00:07:15.100\na parenthesis, the left one, we can't\njust randomly put parentheses there.\n\n125\n00:07:15.100 --> 00:07:18.770\nAnd then the positional parameter\nwe called it first, okay?\n\n126\n00:07:18.770 --> 00:07:23.030\nWell there's first and then I put a comma.\n\n127\n00:07:23.030 --> 00:07:25.340\nThe comma is the separator.\n\n128\n00:07:25.340 --> 00:07:28.360\nComma and then the next one, okay?\n\n129\n00:07:28.360 --> 00:07:32.290\nNow that means I have my\nsecond positional perimeter.\n\n130\n00:07:34.060 --> 00:07:37.790\nThis now enforces more of an order than\n\n131\n00:07:39.710 --> 00:07:42.230\nwe've seen previously with just a one,\nokay?\n\n132\n00:07:42.230 --> 00:07:47.246\nAnd just to show that,\nI'm gonna write another called sub(first,\n\n133\n00:07:47.246 --> 00:07:49.390\nsecond) this is for subtraction.\n\n134\n00:07:49.390 --> 00:07:53.323\nAnd I'm gonna say first- second.\n\n135\n00:07:53.323 --> 00:07:57.397\nNow the reason I'm doing that is because\n3 plus 2 is the same as 2 plus 3.\n\n136\n00:07:57.397 --> 00:08:01.783\nHowever, 3 minus 2 is not\nthe same as 2 minus 3.\n\n137\n00:08:01.783 --> 00:08:07.384\nSo if we look at this result and\nwe say sub_result = sub(1,\n\n138\n00:08:07.384 --> 00:08:12.448\n2) and then sub_result2,\nlet's just call it two,\n\n139\n00:08:12.448 --> 00:08:18.940\nhorrible names, but\nthey'll serve our purpose, = sub(2, 1).\n\n140\n00:08:18.940 --> 00:08:23.155\nLet's see what the printout is here,\nand I'm gonna zoom out a bit on that.\n\n141\n00:08:23.155 --> 00:08:28.433\nSo sub_result, and\nprint sub_result2, so add,\n\n142\n00:08:28.433 --> 00:08:34.430\nit doesn't matter, the order,\nso we can just put those in.\n\n143\n00:08:34.430 --> 00:08:40.800\nBut now that we have two arguments, some\nfunctions, actually, the order matters.\n\n144\n00:08:40.800 --> 00:08:45.020\nNow we're using numbers here, but imagine\nif first was meant to be a string and\n\n145\n00:08:45.020 --> 00:08:46.829\nsecond was meant to be a list.\n\n146\n00:08:47.830 --> 00:08:52.130\nSo now that even further\ndictates the order.\n\n147\n00:08:52.130 --> 00:08:54.395\nSo if we come back here and\nwe zoom out a little more,\n\n148\n00:08:54.395 --> 00:08:57.098\nI think I got a little carried\naway with the zooming in there.\n\n149\n00:08:57.098 --> 00:08:58.726\n&gt;&gt; Well, zooming's fun.\n\n150\n00:08:58.726 --> 00:09:05.480\n&gt;&gt; And then multipos arguments is 3,\n-1, 1, why is that?\n\n151\n00:09:05.480 --> 00:09:09.940\nWell, because this is not,\nI can't switch the order.\n\n152\n00:09:09.940 --> 00:09:14.419\nBy changing the order here, my function\nis no different, it's first minus second.\n\n153\n00:09:14.419 --> 00:09:21.298\n1 minus 2 is negative 1, 2 minus 1 is 1,\nso this order is now dictated.\n\n154\n00:09:21.298 --> 00:09:25.800\nOur order is established by where\nthey appear, comma separated.\n\n155\n00:09:25.800 --> 00:09:32.380\nRight, now, if you wanted to, you could\ncome here and say, third, and put 3 here.\n\n156\n00:09:34.590 --> 00:09:39.164\nAnd that will still work,\npython3 multipos_args.py, 3, and\n\n157\n00:09:39.164 --> 00:09:40.776\nwhy did that return 3?\n\n158\n00:09:40.776 --> 00:09:43.887\nWell, because I forgot to\nchange the function body.\n\n159\n00:09:43.887 --> 00:09:47.147\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] So python3 multipos_args, and\n\n160\n00:09:47.147 --> 00:09:50.304\nnow it shows six,\nbecause it's 1 plus 2 plus 3.\n\n161\n00:09:50.304 --> 00:09:54.198\nAnd here's now where we\nstart having this issue,\n\n162\n00:09:54.198 --> 00:09:59.040\nsome people are like, my add,\njust like the calculator.\n\n163\n00:09:59.040 --> 00:10:01.996\nIt may be three numbers,\nit may be nine numbers.\n\n164\n00:10:01.996 --> 00:10:08.409\nIt may be 27 numbers, and I've seen people\ndo exactly what I'm getting ready to do.\n\n165\n00:10:08.409 --> 00:10:11.020\nAnd when you're first starting out,\nthat makes sense.\n\n166\n00:10:11.020 --> 00:10:16.190\nYou're like, in this case,\nI need four numbers, so\n\n167\n00:10:16.190 --> 00:10:21.801\nthey come back here, and\nthey go, four, five, six, seven.\n\n168\n00:10:21.801 --> 00:10:24.713\nAnd then they go, okay,\n\n169\n00:10:24.713 --> 00:10:29.993\nI need to change that,\nso four + five + six.\n\n170\n00:10:29.993 --> 00:10:32.550\nI'm putting commas where\nthere shouldn't be commas.\n\n171\n00:10:32.550 --> 00:10:38.990\nsix, and seven, and\nthey just keep doing it.\n\n172\n00:10:40.400 --> 00:10:44.983\nNow, will it get the job done,\nvery possible, but\n\n173\n00:10:44.983 --> 00:10:47.762\nit's also maybe not the best.\n\n174\n00:10:47.762 --> 00:10:52.946\nIt's not the best way, okay,\nso let's see if it works,\n\n175\n00:10:52.946 --> 00:10:58.239\nnumber one, that means i have\nto add a bunch more numbers.\n\n176\n00:10:58.239 --> 00:11:05.145\n5, 6, 7, all right, so\nthat should work, and multipos_args.\n\n177\n00:11:05.145 --> 00:11:07.663\nAnd it's 28, so it works, that's good,\n\n178\n00:11:07.663 --> 00:11:10.725\nbut now what happens is,\nI have to supply all of those.\n\n179\n00:11:10.725 --> 00:11:16.240\nIf I take out that one 7 and I rerun that,\nand now, I'm missing the seventh argument.\n\n180\n00:11:18.080 --> 00:11:20.550\nNow this is, you're like, well,\nokay, they're just all numbers,\n\n181\n00:11:20.550 --> 00:11:21.090\nit doesn't matter.\n\n182\n00:11:21.090 --> 00:11:25.540\nBut you know what,\nwhat if these first three were numbers,\n\n183\n00:11:25.540 --> 00:11:30.092\nthese next three were strings,\nand this last one was a list?\n\n184\n00:11:30.092 --> 00:11:33.155\nWell, what if you accidentally\nput the list at the beginning and\n\n185\n00:11:33.155 --> 00:11:35.410\nswitched everything around?\n\n186\n00:11:35.410 --> 00:11:40.760\nYour entire function is gonna blow up and\nit's gonna be hard to reason about.\n\n187\n00:11:40.760 --> 00:11:49.160\nOne alternative to that is to now kind of\nstart naming these, but we'll get to that.\n\n188\n00:11:49.160 --> 00:11:53.110\nBut really,\nthis just takes an arbitrary, some\n\n189\n00:11:55.290 --> 00:11:58.640\namount of arguments,\nwe actually saw this in the last episode.\n\n190\n00:11:58.640 --> 00:12:03.276\nI'm gonna delete all of these and I'm\ngonna put star and the convention is args.\n\n191\n00:12:03.276 --> 00:12:05.727\nAnd what that's telling people is,\n\n192\n00:12:05.727 --> 00:12:09.530\nthis is gonna take some number\nof positional arguments.\n\n193\n00:12:11.200 --> 00:12:12.150\nNow behind the scenes,\n\n194\n00:12:12.150 --> 00:12:15.380\nthis function can do a whole bunch\nof things with these arguments.\n\n195\n00:12:15.380 --> 00:12:19.300\nMaybe the first two arguments\nare meant to be strings.\n\n196\n00:12:19.300 --> 00:12:21.420\nAnd the next two argument\nare meant to be numbers.\n\n197\n00:12:21.420 --> 00:12:23.550\nAnd you just put them in there, right?\n\n198\n00:12:25.220 --> 00:12:29.759\nSo this kind of hides away\nthe intention of the function.\n\n199\n00:12:30.940 --> 00:12:33.589\nBut for add, I think this makes sense,\neverything is a number.\n\n200\n00:12:33.589 --> 00:12:39.971\nRight, and what are we gonna do, we're\njust gonna add all those numbers together.\n\n201\n00:12:39.971 --> 00:12:43.832\nAnd I want to compare this with,\nI'm just gonna print right here, and\n\n202\n00:12:43.832 --> 00:12:47.660\nI'm actually gonna comment\nthese out just a moment.\n\n203\n00:12:47.660 --> 00:12:52.000\nSo I'm gonna print the result, which I\njust brought that up from the bottom.\n\n204\n00:12:52.000 --> 00:12:56.685\nAnd then I'm also going to print,\nand I'm gonna do something here.\n\n205\n00:12:56.685 --> 00:13:00.129\nnumbers = {1, 2, 3, 4, 5, 6},\n\n206\n00:13:00.129 --> 00:13:04.518\nall right, same set of numbers,\nbut now I'm in a list.\n\n207\n00:13:04.518 --> 00:13:11.660\nI'm gonna say, print the sum of numbers,\nsum actually has to take a list.\n\n208\n00:13:11.660 --> 00:13:15.541\nI can't put comma, comma,\ncomma, comma, comma, comma.\n\n209\n00:13:15.541 --> 00:13:20.444\nSo let's see if that in fact\ndoes what I say it does,\n\n210\n00:13:20.444 --> 00:13:24.910\nand the name first,\nwell, why is that broke?\n\n211\n00:13:24.910 --> 00:13:27.507\nLet's just comment this out just for\n\n212\n00:13:27.507 --> 00:13:32.299\na moment cuz I wanna show you that\nthis takes a list, and it's 21.\n\n213\n00:13:32.299 --> 00:13:36.020\nOkay, all right, well,\nthat makes sense, we removed seven.\n\n214\n00:13:36.020 --> 00:13:40.660\nBut now because we changed this,\nthese variables are no longer defined.\n\n215\n00:13:42.810 --> 00:13:48.757\nAnd you may be going, well,\nwhat are these, what is in *args?\n\n216\n00:13:48.757 --> 00:13:52.585\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't know,\n\n217\n00:13:52.585 --> 00:13:57.341\nI don't know, I do know,\nbut I'm pretending.\n\n218\n00:13:57.341 --> 00:13:58.052\n&gt;&gt; You're being coy.\n\n219\n00:13:58.052 --> 00:14:01.488\n&gt;&gt; How do you spell that, C-O-A-Y?\n\n220\n00:14:01.488 --> 00:14:02.238\n&gt;&gt; Beats me.\n\n221\n00:14:02.238 --> 00:14:06.977\n&gt;&gt; Okay, [LAUGH] we joke around here,\nwhat can I say.\n\n222\n00:14:06.977 --> 00:14:09.865\nSo all I'm gonna do is,\nI'm gonna print to expect this.\n\n223\n00:14:09.865 --> 00:14:15.945\nAll right, so I'm gonna remove this and\nI'm gonna bring this back into play.\n\n224\n00:14:15.945 --> 00:14:19.380\nAll right, and\nI'm gonna clear the screen now, and boom,\n\n225\n00:14:19.380 --> 00:14:25.237\nyou'll notice there's a left parenthesis,\n1, 2, 3, 4, 5, 6, and a right parenthesis.\n\n226\n00:14:25.237 --> 00:14:27.341\nWell, what happens if I go comma 7?\n\n227\n00:14:30.172 --> 00:14:35.878\nSee here, 1, 2, 3, 4, 5, 6, 7,\nnow notice, it's not square brackets.\n\n228\n00:14:35.878 --> 00:14:38.869\nWhat are we actually getting is that,\n\n229\n00:14:38.869 --> 00:14:43.150\nlet's inspect the type of this thing,\nokay.\n\n230\n00:14:43.150 --> 00:14:46.290\nWhen we run this, it is in fact a tuple.\n\n231\n00:14:46.290 --> 00:14:50.510\nWhen you do this ,what happens is,\nwhen I say *args and\n\n232\n00:14:50.510 --> 00:14:52.470\nthen I call this function 1, 2, 3.\n\n233\n00:14:52.470 --> 00:14:59.360\nPython goes, well, let me bundle all\nthat stuff up and put it in a tuple.\n\n234\n00:14:59.360 --> 00:15:02.257\nBecause order matters,\nit's immutable and I can't change it.\n\n235\n00:15:02.257 --> 00:15:07.960\nIt's all good, they are zero-indexed,\nso I can go 0, 1, 2, 3.\n\n236\n00:15:07.960 --> 00:15:13.710\nAnd I get a tuple of all of those\narguments in the order that they came in.\n\n237\n00:15:13.710 --> 00:15:20.861\nSo if I instead change this to 2,\n1, I flip the order there.\n\n238\n00:15:20.861 --> 00:15:26.942\nAnd I also take out this type argument or\nthis type function call.\n\n239\n00:15:26.942 --> 00:15:30.811\nAnd now I have 2, 1, so\nthe order is preserved.\n\n240\n00:15:30.811 --> 00:15:34.395\nThat's handy to know,\nbecause now I'm interacting with the 2,\n\n241\n00:15:34.395 --> 00:15:37.730\nthat's why in the previous episode,\nI can do the bracket 0.\n\n242\n00:15:37.730 --> 00:15:44.658\nBut effectively what this add is,\nis a different version of sum.\n\n243\n00:15:44.658 --> 00:15:49.412\nOkay, so if I print result and\nprint some numbers,\n\n244\n00:15:49.412 --> 00:15:52.961\nright now, I'm gonna take this out.\n\n245\n00:15:52.961 --> 00:15:56.195\nRight now, result is gonna be 1\nbecause I'm always returning 1.\n\n246\n00:15:56.195 --> 00:16:01.219\nIt's returning the same thing every time,\nbut instead,\n\n247\n00:16:01.219 --> 00:16:05.943\nif I do the sum Of args,\nnotice there's no star there.\n\n248\n00:16:05.943 --> 00:16:10.060\nArgs, and I didn't put a star\nin the print, args is the tuple.\n\n249\n00:16:10.060 --> 00:16:13.040\nEverything is collected in into\na collection, two-port tuple.\n\n250\n00:16:13.040 --> 00:16:18.075\nAll right, notice I'm just\ncalling sum behind the scenes.\n\n251\n00:16:19.195 --> 00:16:21.665\nBut why would I wanna do that?\n\n252\n00:16:21.665 --> 00:16:25.745\nSo python3 multipos,\nI actually have a 7 here.\n\n253\n00:16:25.745 --> 00:16:29.655\nSo let's make sure that they match.\n\n254\n00:16:29.655 --> 00:16:31.619\nAnd they do, 21, 21.\n\n255\n00:16:31.619 --> 00:16:36.331\nAll right, what I have effectively\ndone is taking the sum\n\n256\n00:16:36.331 --> 00:16:40.945\nfunction that takes a collection,\nit could be a tuple or\n\n257\n00:16:40.945 --> 00:16:45.100\na tuple, or in this case,\nI'm using a list.\n\n258\n00:16:45.100 --> 00:16:48.440\nAnd sum goes, well, let me just\nadd all those together, all right?\n\n259\n00:16:48.440 --> 00:16:49.810\nSo it takes a single argument.\n\n260\n00:16:49.810 --> 00:16:53.620\nIt says, well, you what, I want a function\nthat take a bunch of arguments,\n\n261\n00:16:53.620 --> 00:16:56.830\nI don't wanna put them in a list or\na tuple.\n\n262\n00:16:56.830 --> 00:17:00.343\nSo we say *args, and what happens is\nthat puts them in a list or tuple for\n\n263\n00:17:00.343 --> 00:17:03.506\nyou because you don't know if\nyou have 3 numbers, 2 numbers,\n\n264\n00:17:03.506 --> 00:17:07.156\n12 numbers, 107 numbers,\nsomeone's gonna pass things in there.\n\n265\n00:17:07.156 --> 00:17:12.428\nAnd then behind the scenes,\nnow that's already been collected for\n\n266\n00:17:12.428 --> 00:17:14.938\nyou, you call sum args, okay?\n\n267\n00:17:14.938 --> 00:17:18.037\nAll right, well, that makes sense, okay,\n\n268\n00:17:18.037 --> 00:17:23.094\nI have a varying number of arguments,\nand I could do that with *args, and\n\n269\n00:17:23.094 --> 00:17:28.660\nultimately the order doesn't matter for\nadd, order does matter for subtract.\n\n270\n00:17:28.660 --> 00:17:32.950\nWhat if I wanted to further\nexpand the subtract\n\n271\n00:17:32.950 --> 00:17:37.354\nfunction out to take\nsome number of arguments?\n\n272\n00:17:37.354 --> 00:17:43.502\nAnd let's say that well, subtract,\nI take the first number of the tuple,\n\n273\n00:17:43.502 --> 00:17:47.610\nokay, and\nthen I subtract all the other numbers.\n\n274\n00:17:47.610 --> 00:17:48.872\nSo I start at the first number and\nI subtract.\n\n275\n00:17:48.872 --> 00:17:52.630\nWell, sum doesn't let me do that, okay?\n\n276\n00:17:54.430 --> 00:17:55.790\nI have to write in that logic on my own.\n\n277\n00:17:55.790 --> 00:17:57.680\nBut let's see how we would do that.\n\n278\n00:17:57.680 --> 00:18:01.697\nSo I'm gonna come here,\nI'm gonna *args, okay, and\n\n279\n00:18:01.697 --> 00:18:06.225\nI'm gonna get that tuple of\nwhatever arguments there are, and\n\n280\n00:18:06.225 --> 00:18:12.008\nlet's get rid of this Get rid of this,\n\n281\n00:18:12.008 --> 00:18:18.153\nand say sub_result = sub(10, 5, 2).\n\n282\n00:18:18.153 --> 00:18:25.970\nSo what this is gonna do is this\nis taking 10 minus 5 minus 2.\n\n283\n00:18:25.970 --> 00:18:30.970\nSo I'm gonna start at 10,\nsubtract 5, subtract 2.\n\n284\n00:18:30.970 --> 00:18:33.560\nI'm gonna show you a kind of an edge case\nwhen you go about doing things like this.\n\n285\n00:18:34.960 --> 00:18:38.740\nSo what do I need,\nI need the first one, which is args[0],\n\n286\n00:18:38.740 --> 00:18:40.402\nand I can do that because it's a tuple.\n\n287\n00:18:40.402 --> 00:18:45.070\nAnd then I want the rest of them,\nwhich is args[1:]\n\n288\n00:18:45.070 --> 00:18:49.330\nto the end, so this is gonna\ngive me the rest of them, okay?\n\n289\n00:18:49.330 --> 00:18:54.197\nAnd so how do I do it, for num in rest,\n\n290\n00:18:54.197 --> 00:18:59.070\nI'm gonna say first = first- num.\n\n291\n00:18:59.070 --> 00:19:04.870\nAnd then return first, okay?\n\n292\n00:19:04.870 --> 00:19:07.610\nSo that's reassigning that variable.\n\n293\n00:19:07.610 --> 00:19:11.790\nStart with the first one, subtract the num\nand all the rest of them, and reassign it,\n\n294\n00:19:11.790 --> 00:19:13.810\nand then finally return it.\n\n295\n00:19:13.810 --> 00:19:16.600\nIf I look at this, that should be 10\nminus 5, which is 5, minus 2, which is 3.\n\n296\n00:19:16.600 --> 00:19:20.797\nSo this should give me a 3.\nSo let's print that sub_result,\n\n297\n00:19:24.636 --> 00:19:29.062\nClear, maybe, and we do have a 3 there.\n\n298\n00:19:29.062 --> 00:19:33.360\nOkay, now, Here's the hiccup,\n\n299\n00:19:33.360 --> 00:19:37.094\nlet's look at this add, lets come back,\n\n300\n00:19:37.094 --> 00:19:42.335\nlet's call add with no arguments,\ndoes that make sense?\n\n301\n00:19:46.210 --> 00:19:49.415\nNo, not really right, right?\n\n302\n00:19:49.415 --> 00:19:52.260\nYou go, What does that mean?\n\n303\n00:19:52.260 --> 00:19:53.460\nLet's see if it works.\n\n304\n00:19:54.480 --> 00:19:59.370\nAnd I'm intentionally showing you that\nbecause this may not be what you expect.\n\n305\n00:19:59.370 --> 00:20:00.540\n&gt;&gt; Right.\n\n306\n00:20:00.540 --> 00:20:01.390\n&gt;&gt; Why did it do that?\n\n307\n00:20:01.390 --> 00:20:03.810\nIt's because of my implementation.\n\n308\n00:20:03.810 --> 00:20:05.760\nWhat sum has is a hidden 0 here.\n\n309\n00:20:06.910 --> 00:20:13.890\nWell, this args, guess what, when I give\nit no arguments, it says empty tuple.\n\n310\n00:20:13.890 --> 00:20:17.640\nSo sum of the empty thing will\nalways give me zero back.\n\n311\n00:20:17.640 --> 00:20:18.580\nOkay, that doesn't break.\n\n312\n00:20:20.320 --> 00:20:24.120\nBut maybe that's not what you want.\n\n313\n00:20:24.120 --> 00:20:25.760\nWhat about sub, does that work for sub?\n\n314\n00:20:25.760 --> 00:20:29.220\nWhat if we take these,\nI wonder if we take these all out.\n\n315\n00:20:29.220 --> 00:20:30.540\nThat works because of our\nimplementation details.\n\n316\n00:20:30.540 --> 00:20:32.310\nSo let's go and try it with sub.\n\n317\n00:20:33.500 --> 00:20:35.020\nAnd it broke.\n\n318\n00:20:35.020 --> 00:20:35.670\n&gt;&gt; It broke, it broke.\n\n319\n00:20:35.670 --> 00:20:36.820\n&gt;&gt; Why did it break?\n\n320\n00:20:36.820 --> 00:20:40.100\nTuple index out of range, why?\n\n321\n00:20:40.100 --> 00:20:46.700\nWell, we kinda actually need at least two.\n\n322\n00:20:46.700 --> 00:20:48.500\nWhy do we need at least two?\n\n323\n00:20:48.500 --> 00:20:52.152\nWell, because I need the first\none to start out with, and\n\n324\n00:20:52.152 --> 00:20:55.360\nthen I need to subtract at least one more.\n\n325\n00:20:55.360 --> 00:20:58.130\nNow, that's based on my reasoning here.\n\n326\n00:20:58.130 --> 00:21:02.132\nTechnically, we could do the same thing\nwith add and we could say, you know what,\n\n327\n00:21:02.132 --> 00:21:03.760\nwe need at least those first two.\n\n328\n00:21:05.950 --> 00:21:08.910\nAnd then we're gonna sum\nall the rest of them, okay?\n\n329\n00:21:08.910 --> 00:21:11.720\nBut let's look at sub,\nbecause I think that makes more sense.\n\n330\n00:21:11.720 --> 00:21:14.079\nWith these multiple positional parameters,\n\n331\n00:21:14.079 --> 00:21:18.080\nyou can take the first thing I showed you\nand this one, and kinda combine them.\n\n332\n00:21:18.080 --> 00:21:22.486\nI can say, first, second, comma *args.\n\n333\n00:21:22.486 --> 00:21:26.490\nAnd that says, give me the first one,\ngive me the second one,\n\n334\n00:21:26.490 --> 00:21:29.110\nand then give me the rest of them, okay?\n\n335\n00:21:29.110 --> 00:21:34.854\nNow, what's interesting is first,\nsecond, args, well,\n\n336\n00:21:34.854 --> 00:21:41.930\nthis actually needs to change because\nfirst is already done for us, right?\n\n337\n00:21:41.930 --> 00:21:45.730\nSo we don't need this anymore,\nbut we do need result.\n\n338\n00:21:46.730 --> 00:21:51.330\nResult is first- second,\nbecause I'm doing at least those things.\n\n339\n00:21:52.420 --> 00:21:55.770\nI don’t need the rest because\nthe rest is actually the *args.\n\n340\n00:21:55.770 --> 00:21:57.470\nSo we’re gonna go args.\n\n341\n00:21:59.530 --> 00:22:02.484\nAnd guess what?\nWe need to change this to result,\n\n342\n00:22:02.484 --> 00:22:05.710\nthis to result, and this to result.\n\n343\n00:22:07.640 --> 00:22:09.640\nSo I just kinda moved those things around.\n\n344\n00:22:10.690 --> 00:22:11.940\nSo I need at least two.\n\n345\n00:22:11.940 --> 00:22:14.490\nThe result starts out as\nthe first minus the second, so\n\n346\n00:22:14.490 --> 00:22:16.390\nthose two are gonna be\nenforced by Python for us.\n\n347\n00:22:16.390 --> 00:22:19.730\nAnd then for each number in args, maybe\nthere's none, so this would never run.\n\n348\n00:22:19.730 --> 00:22:23.803\nThe result is now whatever the result was,\nwhich starts out here,\n\n349\n00:22:23.803 --> 00:22:25.485\nminus that number, okay?\n\n350\n00:22:25.485 --> 00:22:30.759\nLet's see,\nwe saw this blows up index error.\n\n351\n00:22:33.250 --> 00:22:35.505\nWe still get an error.\n\n352\n00:22:35.505 --> 00:22:37.860\n&gt;&gt; [INAUDIBLE]\n&gt;&gt; However, It's a more descriptive error.\n\n353\n00:22:37.860 --> 00:22:39.940\nIt goes, hey,\nyou need positional parameters first.\n\n354\n00:22:39.940 --> 00:22:42.450\nSo okay,\nthis needs at least two arguments.\n\n355\n00:22:42.450 --> 00:22:47.242\nIf I go 10, 5, And\n\n356\n00:22:47.242 --> 00:22:50.450\nmultipos, it works.\n\n357\n00:22:50.450 --> 00:22:55.101\nAnd then also this allows me to do 3,\n4, 5, which should be,\n\n358\n00:22:55.101 --> 00:23:00.380\nthat's 7, 12, that should be negative 7,\n\n359\n00:23:00.380 --> 00:23:03.360\nif I'm doing my math right,\nwhich is possible I didn't.\n\n360\n00:23:03.360 --> 00:23:06.980\nSo negative 7,\nnow I can add as many as I want onto that.\n\n361\n00:23:06.980 --> 00:23:08.250\nSo you can't combine those two.\n\n362\n00:23:08.250 --> 00:23:11.070\nSo there's some interesting things there.\n\n363\n00:23:11.070 --> 00:23:14.120\nAnd effectively what happens is\nyour choice of what you need to do\n\n364\n00:23:14.120 --> 00:23:15.740\nis dependent on your situation.\n\n365\n00:23:15.740 --> 00:23:18.370\nAnd I think that's one of\nthe most difficult things when\n\n366\n00:23:18.370 --> 00:23:19.240\nyou're learning to program.\n\n367\n00:23:19.240 --> 00:23:21.860\nDo I do this, do I do this, do I do this?\n\n368\n00:23:21.860 --> 00:23:24.850\nWell, sadly, the answer is\nmost of the time, it depends.\n\n369\n00:23:24.850 --> 00:23:27.910\nIt depends on what you're\ntrying to accomplish.\n\n370\n00:23:27.910 --> 00:23:30.880\nWe could have add with just two arguments,\nthat makes sense.\n\n371\n00:23:30.880 --> 00:23:34.370\nOr we could have add with a bunch\nof arguments, same thing for sub or\n\n372\n00:23:34.370 --> 00:23:35.160\nanything else.\n\n373\n00:23:35.160 --> 00:23:36.430\nPositional parameters, though,\n\n374\n00:23:36.430 --> 00:23:40.100\ndo still have the downfall of, what if\nthe first one needs to be a number,\n\n375\n00:23:40.100 --> 00:23:43.550\nwhat if the next one needs to be a string,\nwhat if I need at least two?\n\n376\n00:23:43.550 --> 00:23:48.530\nWhat do these do, what if I get the order\nbackwards and I actually need the order?\n\n377\n00:23:48.530 --> 00:23:50.000\nSo you have to be careful there.\n\n378\n00:23:50.000 --> 00:23:53.803\nBut Zach, I think that's a pretty good\noverview of kind of multiple positional\n\n379\n00:23:53.803 --> 00:23:56.200\nparameters and\nmultiple positional arguments.\n\n380\n00:23:56.200 --> 00:23:59.160\nAnd there's some other\nthings that'll crop up, but\n\n381\n00:23:59.160 --> 00:24:03.640\nI think those are best left to more of\na discovery sense after this soaks in.\n\n382\n00:24:03.640 --> 00:24:07.450\n&gt;&gt; Well done, Justin, functions\nwith multiple positional arguments.\n\n383\n00:24:07.450 --> 00:24:09.290\nLove the segments, love the episode.\n\n384\n00:24:09.290 --> 00:24:11.000\nTell us a little bit more before we leave.\n\n385\n00:24:11.000 --> 00:24:13.665\n&gt;&gt; Well, I'm actually gonna say something\nthat has nothing to do with this.\n\n386\n00:24:13.665 --> 00:24:16.500\n[LAUGHING] I just want to\nreemphasize something that's\n\n387\n00:24:16.500 --> 00:24:18.210\nmore about a general mindset.\n\n388\n00:24:19.220 --> 00:24:22.170\nIt is completely okay if you get\nfrustrated, it's completely okay\n\n389\n00:24:22.170 --> 00:24:26.220\nif you need to take a break, get up,\nwalk around, take a mental break.\n\n390\n00:24:26.220 --> 00:24:27.932\nSome of my best ideas or\n\n391\n00:24:27.932 --> 00:24:32.640\nkind of clarity happens when I\nremove myself from the situation.\n\n392\n00:24:32.640 --> 00:24:35.720\nActually, Zach and\nI were talking between episodes, and\n\n393\n00:24:35.720 --> 00:24:38.050\nhe was like,\nI feel like I would get frustrated.\n\n394\n00:24:38.050 --> 00:24:39.150\nYou're going to.\n\n395\n00:24:39.150 --> 00:24:41.870\nThat's okay,\nit's part of the growing process.\n\n396\n00:24:41.870 --> 00:24:45.814\nIf you're not challenging yourself to\nthe point, like right at the precipice of\n\n397\n00:24:45.814 --> 00:24:49.470\nfrustration, then well, you probably\nalready know what you're doing.\n\n398\n00:24:49.470 --> 00:24:53.440\nIf your learning something new, there is\na possibility of you getting frustrated.\n\n399\n00:24:53.440 --> 00:24:58.466\nDo not let that be a hindrance,\ntake a moment, collect yourself,\n\n400\n00:24:58.466 --> 00:25:04.910\ngo outside, mow the yard, hang out, go for\na drive, go get a snack, come back.\n\n401\n00:25:06.000 --> 00:25:09.350\nAnd sometimes you just get that,\nthat's what that does.\n\n402\n00:25:09.350 --> 00:25:14.191\nSo it's small forward process, you're\nnot gonna learn everything overnight,\n\n403\n00:25:14.191 --> 00:25:14.970\nit's okay.\n\n404\n00:25:14.970 --> 00:25:19.100\nSo just something to keep in\nmind as you further progress.\n\n405\n00:25:19.100 --> 00:25:20.950\n&gt;&gt; Great advice, and\nhere's some more great advice.\n\n406\n00:25:20.950 --> 00:25:24.450\nMake sure you watch every episode\nof Abstracting with Functions.\n\n407\n00:25:24.450 --> 00:25:28.390\nJustin has done a wonderful job,\nleaving no stone unturned, and\n\n408\n00:25:28.390 --> 00:25:29.820\nall the episodes to help you.\n\n409\n00:25:29.820 --> 00:25:33.200\nHelp you now, in the future,\non exams, things like that.\n\n410\n00:25:33.200 --> 00:25:37.320\nAnd by the way, you'll be in the course\nlibrary, where there's thousands of hours\n\n411\n00:25:37.320 --> 00:25:41.480\nof other content, it's there to help\nyou succeed, so check that out too.\n\n412\n00:25:41.480 --> 00:25:42.980\nAnd tell everybody you\nknow about DevProTV,\n\n413\n00:25:42.980 --> 00:25:45.210\nyou know a good dev pro\nis always learning.\n\n414\n00:25:45.210 --> 00:25:47.400\nThanks for watching, I'm Zach Memos\n&gt;&gt; And I'm Justin Dennison.\n\n415\n00:25:47.400 --> 00:25:48.620\n&gt;&gt; We will see you again soon.\n[SOUND]\n\n",
          "vimeoId": "273704119"
        },
        {
          "description": "In this episode, Justin and Zach discuss and explore the use of multiple keyword arguments in a Python function. Justin further demonstrates how keyword arguments alleviate the ordering and readability concerns that occur in functions.",
          "length": "1364",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-7-1-functions-w-multiple-keyword-arguments-06051.00_22_38_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-7-1-functions-w-multiple-keyword-arguments-06051.00_22_38_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-7-1-functions-w-multiple-keyword-arguments-06051.00_22_38_04.Still001-sm.jpg",
          "title": "Functions w/ Multiple Keyword Arguments",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.814 --> 00:00:14.895\nHello, and thank you for\nwatching DevProTV,\n\n3\n00:00:14.895 --> 00:00:16.810\nhelping you learn everywhere you go.\n\n4\n00:00:16.810 --> 00:00:20.720\nI'm your host Zach Memos, for\nthis episode Abstracting with Functions.\n\n5\n00:00:20.720 --> 00:00:25.887\nAnd on this episode,\nfunctions with multiple keyword arguments.\n\n6\n00:00:25.887 --> 00:00:28.123\nAnd the person bringing this\ninformation we need is the one and\n\n7\n00:00:28.123 --> 00:00:29.630\nonly Justin Dennison, right over here.\n\n8\n00:00:29.630 --> 00:00:32.880\nHow are you doing, Justin?\n&gt;&gt; I am doing fantastic, Zach.\n\n9\n00:00:32.880 --> 00:00:34.628\nI was kinda f mixed up by\n\n10\n00:00:34.628 --> 00:00:36.872\nthe arrrhh-guments!\n&gt;&gt; )Arrrhh-guments!\n\n11\n00:00:36.872 --> 00:00:38.170\n&gt;&gt; Arrrhh it's a pirate!\n\n12\n00:00:38.170 --> 00:00:39.355\n&gt;&gt; Or you can say arguments too.\n\n13\n00:00:39.355 --> 00:00:40.150\n&gt;&gt; Yeah, arguments.\n\n14\n00:00:40.150 --> 00:00:42.900\nBut yeah, we're gonna be talking\nabout multiple keyword arguments.\n\n15\n00:00:44.010 --> 00:00:48.090\nWe've seen a lot but there's actually\na little bit of syntax that we haven't\n\n16\n00:00:48.090 --> 00:00:50.290\ncovered when it comes\nto kind of collecting.\n\n17\n00:00:50.290 --> 00:00:53.582\nWe saw in the previous episode how we can\ncollect a bunch of positional arguments,\n\n18\n00:00:53.582 --> 00:00:56.480\npositional parameters,\nusing a little bit of syntax.\n\n19\n00:00:57.590 --> 00:01:01.960\nNow what we're gonna do, again these\nare going to be very contrived examples.\n\n20\n00:01:01.960 --> 00:01:09.012\nWhat we're gonna do is, well,\nwe're going to use this function.\n\n21\n00:01:09.012 --> 00:01:13.450\nLet's say it's a function that takes\nin a bunch of words, all right?\n\n22\n00:01:13.450 --> 00:01:17.120\nAnd then we're just gonna get them\nas a dictionary, where the word and\n\n23\n00:01:17.120 --> 00:01:18.000\nits respective length.\n\n24\n00:01:18.000 --> 00:01:22.414\nBut I'm gonna show you\nhow you can just use\n\n25\n00:01:22.414 --> 00:01:27.345\nthe words as the keywords themselves,\nokay?\n\n26\n00:01:27.345 --> 00:01:29.431\nAnd it's gonna be,\n\n27\n00:01:29.431 --> 00:01:32.380\nthese are bad functions.\n&gt;&gt; [LAUGH]\n\n28\n00:01:32.380 --> 00:01:33.170\n&gt;&gt; But we're gonna utilize\n\n29\n00:01:33.170 --> 00:01:35.449\nsomethings that we've seen from\nthe previous episode and that's.\n\n30\n00:01:36.860 --> 00:01:38.500\nWell, how do I do this?\n\n31\n00:01:38.500 --> 00:01:40.340\nHow does this change if,\n\n32\n00:01:40.340 --> 00:01:43.240\npositional parameters can be\nused as keyword arguments.\n\n33\n00:01:43.240 --> 00:01:46.580\nBut if I do that,\nhow does that play into this?\n\n34\n00:01:46.580 --> 00:01:50.800\nBut also, what if I want only\nkeyword arguments, right?\n\n35\n00:01:51.910 --> 00:01:55.760\nSo we'll get to that as well,\nand we'll try a few things.\n\n36\n00:01:55.760 --> 00:01:58.280\nWe may break some stuff along the way,\nbut that's all right.\n\n37\n00:01:58.280 --> 00:02:01.885\nSo let's think about\nthe function we're gonna build.\n\n38\n00:02:01.885 --> 00:02:06.758\nWe're gonna build that function\nthat takes in some words and\n\n39\n00:02:06.758 --> 00:02:12.884\nthen we get respective words with their\nlength or something of that nature.\n\n40\n00:02:12.884 --> 00:02:17.960\nOr just see where our\nminds takes takes us.\n\n41\n00:02:17.960 --> 00:02:21.588\nAll right so let's go ahead and\ntake a look at the screen and\n\n42\n00:02:21.588 --> 00:02:25.430\nget things set up and\nokay we're in our folder here.\n\n43\n00:02:25.430 --> 00:02:29.186\nAnd let's go to make our file and\n\n44\n00:02:29.186 --> 00:02:34.343\nthis is multiple KW arguments, all right?\n\n45\n00:02:34.343 --> 00:02:38.958\nI am going to introduce some new\nterminology here in this episode because I\n\n46\n00:02:38.958 --> 00:02:42.440\nthink it's fun to say\nit's not actually a word.\n\n47\n00:02:42.440 --> 00:02:46.130\nAnd then we're gonna come into\nVisual Studio Code, have that folder open.\n\n48\n00:02:46.130 --> 00:02:50.720\nAnd I'm going to open multiple KWRs,\nall right?\n\n49\n00:02:50.720 --> 00:02:53.950\nAs always, we're gonna do exactly\nthe same thing that we've done every\n\n50\n00:02:53.950 --> 00:02:56.430\nepisode since we've learned about this.\n\n51\n00:02:56.430 --> 00:02:59.080\nAnd that's make sure that\nwe have everything set up.\n\n52\n00:03:01.180 --> 00:03:05.550\nAll right, so here we go.\n\n53\n00:03:05.550 --> 00:03:11.769\nif_name_\"\" '_main_': then\nrun the main function, okay?\n\n54\n00:03:11.769 --> 00:03:13.412\nAnd, then somehow hit Save As-\n&gt;&gt; [CROSSTALK]\n\n55\n00:03:13.412 --> 00:03:14.340\n&gt;&gt; Gets you every time.\n\n56\n00:03:14.340 --> 00:03:16.250\nIt's a running theme in this series,\n\n57\n00:03:16.250 --> 00:03:16.990\nisn't it?\n&gt;&gt; [LAUGH]\n\n58\n00:03:16.990 --> 00:03:21.190\n&gt;&gt; And then multiple keyword arc.\n\n59\n00:03:21.190 --> 00:03:27.765\nIt works good now, we are just gonna\nplay around the sum function to see\n\n60\n00:03:27.765 --> 00:03:33.013\nhow having multiple ones and\nhow this plays out, okay?\n\n61\n00:03:33.013 --> 00:03:37.454\nNow let's see here,\n\n62\n00:03:37.454 --> 00:03:42.895\nfood to calories, okay?\n\n63\n00:03:42.895 --> 00:03:50.968\nNow there is some implied meaning here.\n&gt;&gt; Food has calories.\n\n64\n00:03:50.968 --> 00:03:52.444\n&gt;&gt; Yeah food has calories,\n\n65\n00:03:52.444 --> 00:03:54.420\nI actually changed on the pivot.\n\n66\n00:03:54.420 --> 00:03:57.790\nI said something earlier in the episode,\nif food has calories.\n\n67\n00:03:57.790 --> 00:03:58.290\nThis guy.\n&gt;&gt; [LAUGH]\n\n68\n00:03:58.290 --> 00:03:59.380\n&gt;&gt; I think it actually might be\n\n69\n00:03:59.380 --> 00:04:03.343\na little bit easier to talk about instead\nof just getting words with their lengths.\n\n70\n00:04:03.343 --> 00:04:05.850\nLet's map food to their\nrespective calories.\n\n71\n00:04:05.850 --> 00:04:07.010\n&gt;&gt; Very good.\n\n72\n00:04:07.010 --> 00:04:08.420\n&gt;&gt; Just to maybe\n\n73\n00:04:08.420 --> 00:04:10.150\nclear this up a little bit,\nbut that's all right.\n\n74\n00:04:10.150 --> 00:04:11.220\nSo food to calories.\n\n75\n00:04:11.220 --> 00:04:13.310\nWe could do positional arguments.\n\n76\n00:04:13.310 --> 00:04:17.190\nBut you know what, positional arguments\ndon't make any sense in this case, right?\n\n77\n00:04:17.190 --> 00:04:19.030\nWell what do you do?\n\n78\n00:04:19.030 --> 00:04:22.850\nWell maybe you have different types of\ncheeses, different types of pepperoni,\n\n79\n00:04:22.850 --> 00:04:26.130\nand maybe they have a little\nbit different calorie content.\n\n80\n00:04:26.130 --> 00:04:30.750\nSo what we're gonna do in the meantime\nis just do something like this.\n\n81\n00:04:30.750 --> 00:04:34.480\nWe're going to enforce\nall keyword arguments.\n\n82\n00:04:34.480 --> 00:04:35.640\nWe're gonna put that asterisk there,\n\n83\n00:04:35.640 --> 00:04:38.750\nwe've seen that in the previous episode,\nbecause I want to focus just on that.\n\n84\n00:04:38.750 --> 00:04:41.481\nSo we're gonna put that comma.\n\n85\n00:04:41.481 --> 00:04:44.190\nAnd, that comma is going to\nseparate all keyword arguments.\n\n86\n00:04:44.190 --> 00:04:48.500\nAnd this food to calories is going\nto take \"cheese\", \"pepperoni\".\n\n87\n00:04:48.500 --> 00:04:54.870\nWhat do you like on your pizza Zach?\n&gt;&gt; Cheese, pepperoni, green pepper.\n\n88\n00:04:54.870 --> 00:04:56.430\nI love banana peppers.\n\n89\n00:04:56.430 --> 00:05:00.830\nSo let's just say peppers,\nthat'll cover it.\n\n90\n00:05:00.830 --> 00:05:02.010\nAnd then you know what?\n\n91\n00:05:02.010 --> 00:05:02.960\nMushrooms, you gotta go with\n\n92\n00:05:02.960 --> 00:05:03.840\nmushrooms sometimes.\n\n93\n00:05:03.840 --> 00:05:05.030\n&gt;&gt; Sure.\n&gt;&gt; Right?\n\n94\n00:05:05.030 --> 00:05:07.950\nAnd so now, what we're gonna do\nis we're gonna take all those and\n\n95\n00:05:07.950 --> 00:05:09.870\nwe're gonna just put them in\na dictionary and return them.\n\n96\n00:05:09.870 --> 00:05:14.657\nSo, Results is a dictionary and\n\n97\n00:05:14.657 --> 00:05:19.977\nI'm gonna say result cheese equals\n\n98\n00:05:19.977 --> 00:05:24.775\ncheese and results pepperoni.\n\n99\n00:05:24.775 --> 00:05:29.870\nPepperoni, maybe I should have\npicked shorter words, pepperoni.\n\n100\n00:05:29.870 --> 00:05:31.130\nAnd then results.\n\n101\n00:05:32.740 --> 00:05:36.420\nThere is an easier way to do this,\njust playing around here.\n\n102\n00:05:36.420 --> 00:05:37.690\nAnd peppers.\n\n103\n00:05:39.970 --> 00:05:44.051\nAnd results, mushrooms,\n\n104\n00:05:44.051 --> 00:05:50.930\nequals mushrooms, gonna return results.\n\n105\n00:05:50.930 --> 00:05:51.710\nAll right, so\n\n106\n00:05:51.710 --> 00:05:55.720\nnow that we have these written,\nlet's make sure we, what do we get?\n\n107\n00:05:55.720 --> 00:05:57.800\nWhat do we, well,\nwe actually get now this.\n\n108\n00:05:57.800 --> 00:05:58.860\nLet's check this out.\n\n109\n00:05:58.860 --> 00:06:04.790\nSo, output equals food to calories, and\nI have say cheese, how much cheese?\n\n110\n00:06:04.790 --> 00:06:08.600\nThat's kind of dependent but let's just\npick something.I'm gonna say 100 calories,\n\n111\n00:06:08.600 --> 00:06:15.590\nthat is probably wishful thinking,\npepperoni Is, I dunno, 80 calories.\n\n112\n00:06:15.590 --> 00:06:18.030\nAnd peppers, depending on the pepper,\n\n113\n00:06:18.030 --> 00:06:20.910\nactually peppers don't have\na great deal of calories.\n\n114\n00:06:20.910 --> 00:06:25.220\nAnd then mushrooms, the fungi,\nlet's just say 30 calories.\n\n115\n00:06:25.220 --> 00:06:27.990\nNow, this line's gotten a little long.\n\n116\n00:06:27.990 --> 00:06:30.990\nSomething you'll see me\ndo is break this up.\n\n117\n00:06:30.990 --> 00:06:34.570\nAnd this tab like this,\nthis is perfectly okay to do.\n\n118\n00:06:34.570 --> 00:06:38.148\nAnd now what I have is a list,\nright [CROSSTALK]?\n\n119\n00:06:38.148 --> 00:06:43.080\nIt's a not list in the Python context, but\na this is cheese, this is pepperoni, and\n\n120\n00:06:43.080 --> 00:06:44.570\nit's easier to read.\n\n121\n00:06:44.570 --> 00:06:49.450\nAlso, this number 100 actually\nmeans something to me now, right?\n\n122\n00:06:50.790 --> 00:06:55.890\nSo, I did a bunch of typing there\nwithout a lot of explanation.\n\n123\n00:06:55.890 --> 00:06:57.510\nLet's go back.\n\n124\n00:06:57.510 --> 00:07:00.920\nThis asterisk enforces keyword arguments,\nright?\n\n125\n00:07:00.920 --> 00:07:05.230\nComma, the next keyword argument, cheese.\n\n126\n00:07:05.230 --> 00:07:09.390\nSo it's expecting cheese equals something,\nokay?\n\n127\n00:07:09.390 --> 00:07:13.690\nComma, these are comma separated\neffectively like positional arguments.\n\n128\n00:07:13.690 --> 00:07:16.230\nSo this should be all right.\n\n129\n00:07:16.230 --> 00:07:20.110\nAnd then down here,\nwe just have to repeat those labels, okay?\n\n130\n00:07:21.240 --> 00:07:23.130\nWe need to repeat those labels,\ncheese = 100.\n\n131\n00:07:23.130 --> 00:07:25.980\nAnd then what do we got here?\n\n132\n00:07:25.980 --> 00:07:28.980\nWe're gonna print output, like so.\n\n133\n00:07:28.980 --> 00:07:30.870\nLet's just see what we have.\n\n134\n00:07:30.870 --> 00:07:34.780\nSo clear this out, python3,\nmultiple keyword arguments.\n\n135\n00:07:34.780 --> 00:07:37.820\nCheese, pepperoni, peppers, and mushrooms.\n\n136\n00:07:37.820 --> 00:07:42.742\nWe've got a dictionary with key value\npairs, where we have a label and\n\n137\n00:07:42.742 --> 00:07:47.674\nwe have their respective, wait for\nit, wait for it, calorie count.\n\n138\n00:07:47.674 --> 00:07:49.873\nNow, something I want to emphasize.\n\n139\n00:07:49.873 --> 00:07:55.129\nThis keyword, argument, I had to put\na string here, because this is a label,\n\n140\n00:07:55.129 --> 00:08:00.944\nthis is the key of the dictionary, cheese\nis actually going to have The number 100,\n\n141\n00:08:00.944 --> 00:08:06.000\nso it's going to store the number 100,\nnot the string cheese.\n\n142\n00:08:06.000 --> 00:08:08.860\nNot string cheese, but string cheese.\n\n143\n00:08:10.230 --> 00:08:12.960\nNow, I wanna compare this,\nwe actually, let's break it.\n\n144\n00:08:14.430 --> 00:08:17.670\nNot that, that is broke, but\nthat's not how I meant to break it,\n\n145\n00:08:17.670 --> 00:08:22.030\nlet's just do this, as a comparison.\n\n146\n00:08:23.510 --> 00:08:26.970\nIf I come along six months from now, and I\nlook at this function and it's like this,\n\n147\n00:08:26.970 --> 00:08:29.010\n180, 60, 30, what does that mean?\n\n148\n00:08:29.010 --> 00:08:34.000\nGotta go look at the function,\nand as a matter of fact if I\n\n149\n00:08:34.000 --> 00:08:38.170\ntake this out, this will work,\nthis will allow me to do this.\n\n150\n00:08:38.170 --> 00:08:40.950\nAnd we come back, we rerun it,\nNow we get the same output,\n\n151\n00:08:40.950 --> 00:08:43.540\nbut when I'm looking at the code and\nwhen I'm reading it.\n\n152\n00:08:43.540 --> 00:08:46.820\nAnd I see just that food to calorie,\nthe 100, 80, 60,\n\n153\n00:08:46.820 --> 00:08:49.440\n30, I don't know what that is.\n\n154\n00:08:49.440 --> 00:08:54.430\nNow I have to go find the function and go,\nokay wait a minute, cheese is the first\n\n155\n00:08:54.430 --> 00:08:58.070\nnumber, pepperoni is the second number,\npeppers is the third number.\n\n156\n00:08:58.070 --> 00:09:01.550\nMushrooms is the first number,\nI'm gonna undo that and I'll but\n\n157\n00:09:01.550 --> 00:09:02.340\nthat asterisk there.\n\n158\n00:09:02.340 --> 00:09:04.810\nI've now intentionally broken it,\n\n159\n00:09:04.810 --> 00:09:06.930\nit will not let me do that anymore.\n&gt;&gt; Boy.\n\n160\n00:09:06.930 --> 00:09:07.550\n&gt;&gt; All right, so\n\n161\n00:09:08.870 --> 00:09:11.500\nfood takes zero positional arguments but\nfour were given.\n\n162\n00:09:11.500 --> 00:09:12.140\nWhy?\n\n163\n00:09:12.140 --> 00:09:15.610\nBecause I don't have The label,\nthe name, the keyword.\n\n164\n00:09:15.610 --> 00:09:17.540\nSo I'm going to go back and\nput those there, and\n\n165\n00:09:17.540 --> 00:09:22.940\nwe've already seen this in fact does work,\nso that is just an emphasis.\n\n166\n00:09:22.940 --> 00:09:26.140\nEven though we're talking about multiple\nones, this is an emphasis of now.\n\n167\n00:09:26.140 --> 00:09:29.950\nI'm like well the cheese is 100 calories,\nthe pepperoni is 80 calories.\n\n168\n00:09:29.950 --> 00:09:35.210\nPeppers have 60 calories, and\nmushrooms are 30 calories Okay.\n\n169\n00:09:35.210 --> 00:09:38.310\nI think this is easier to read,\nthis makes sense.\n\n170\n00:09:38.310 --> 00:09:40.520\nWe could put default arguments here,\n\n171\n00:09:40.520 --> 00:09:44.810\nthat if they're not available,\nactually, let's do this.\n\n172\n00:09:44.810 --> 00:09:47.740\nI'm gonna remove this cheese part,\nI'm just gonna comment it out.\n\n173\n00:09:47.740 --> 00:09:50.500\nI'm gonna come over here and\nrerun this, and\n\n174\n00:09:50.500 --> 00:09:55.580\nnotice, because I didn't put cheese\nin there, well, that's interesting.\n\n175\n00:09:55.580 --> 00:09:59.640\nI didn't put cheese, cheese is first, I\njust put pepperoni, peppers and mushrooms.\n\n176\n00:10:01.340 --> 00:10:04.300\nWhat is also interesting,\nnotice these are in the same order,\n\n177\n00:10:04.300 --> 00:10:06.230\nright from left to right top to bottom?\n\n178\n00:10:06.230 --> 00:10:10.250\nBut I'm gonna grab this and I'm just\ngonna come here and put a comma there so\n\n179\n00:10:10.250 --> 00:10:11.900\nit's mushrooms, pepperoni, peppers.\n\n180\n00:10:11.900 --> 00:10:14.420\nI've changed the order,\n;et's go check it out,\n\n181\n00:10:14.420 --> 00:10:18.570\nit still gives me the right thing, right?\n\n182\n00:10:18.570 --> 00:10:19.350\nAnd the reason being,\n\n183\n00:10:19.350 --> 00:10:24.230\nis because the order does not matter\nwhen it comes to keyword arguments.\n\n184\n00:10:24.230 --> 00:10:27.601\nThis trailing comma here,\nI think if I'm not mistake,\n\n185\n00:10:27.601 --> 00:10:30.698\nthat's after peppers in\nthat function argument.\n\n186\n00:10:30.698 --> 00:10:34.800\nI think that's a relatively new thing, so\nif you're here in previous versions of\n\n187\n00:10:34.800 --> 00:10:37.964\npython, that may actually break so\nsomething to keep in mind.\n\n188\n00:10:37.964 --> 00:10:40.248\nI'm going to remove that,\njust as a reminder and\n\n189\n00:10:40.248 --> 00:10:43.440\nI'm going to tab these over just so\nI can have those there.\n\n190\n00:10:43.440 --> 00:10:47.510\nAlright, so that's good but this still\n\n191\n00:10:48.700 --> 00:10:53.990\nsuffers from the same thing the positional\nparameters had, I have this list.\n\n192\n00:10:53.990 --> 00:10:55.400\nAnd I get, you know what?\n\n193\n00:10:55.400 --> 00:10:58.690\nZach told me he really loves olives.\n\n194\n00:10:58.690 --> 00:11:02.460\nI'm not sure that he does, but\nI'm using it as part of this narrative.\n\n195\n00:11:02.460 --> 00:11:03.340\n&gt;&gt; Especially Galamata.\n\n196\n00:11:04.930 --> 00:11:07.600\n&gt;&gt; That, so he does like olives, I do not,\n\n197\n00:11:07.600 --> 00:11:08.810\nbut that's all right.\n\n198\n00:11:08.810 --> 00:11:14.035\nSo olives are now there, and if we come\nback and try to run this, it's broke.\n\n199\n00:11:14.035 --> 00:11:16.685\nfood_to_calories is missing\n1 keyword-only argument.\n\n200\n00:11:16.685 --> 00:11:21.650\n\\now I need to provide that,\nand I can say,\n\n201\n00:11:21.650 --> 00:11:26.080\nolives =, olives actually don't\nhave a lot of calories in them,\n\n202\n00:11:26.080 --> 00:11:27.650\nI don't think, so olives=20.\n\n203\n00:11:27.650 --> 00:11:33.330\nAnd now if we clear this out and\nrerun this, we're good to go.\n\n204\n00:11:33.330 --> 00:11:38.187\nBut I have to change my\nimplementation details,\n\n205\n00:11:38.187 --> 00:11:42.690\nlike so, results olives equals olives.\n\n206\n00:11:42.690 --> 00:11:46.750\nAnd you'll notice this is\nkind of a lot work, right.\n\n207\n00:11:46.750 --> 00:11:47.620\n&gt;&gt; It's a lot of work.\n\n208\n00:11:47.620 --> 00:11:49.290\n&gt;&gt; Kind of a lot of work and\n\n209\n00:11:49.290 --> 00:11:50.870\nnow I have olives as 20.\n\n210\n00:11:50.870 --> 00:11:51.710\nIt's\n&gt;&gt; Is there?\n\n211\n00:11:51.710 --> 00:11:56.030\n&gt;&gt; But I can't do this kind of you know,\n\n212\n00:11:56.030 --> 00:11:57.450\njust ad nauseam, right?\n\n213\n00:11:58.540 --> 00:12:02.900\nIt would be better if I said, there's\ngonna be some keyword arguments here, and\n\n214\n00:12:02.900 --> 00:12:06.910\nI know that all of those\nare going to be a food label.\n\n215\n00:12:06.910 --> 00:12:11.320\nNotice the cheese is\nactually the label here, and\n\n216\n00:12:11.320 --> 00:12:14.130\nI already have the calories,\nthat's gonna be the value.\n\n217\n00:12:14.130 --> 00:12:18.449\nHow can I get those without\ndoing all of this work?\n\n218\n00:12:18.449 --> 00:12:23.128\nWell, what's interesting is\nPython provides a mechanism for\n\n219\n00:12:23.128 --> 00:12:25.695\nthis, very similar to star ARGS.\n\n220\n00:12:25.695 --> 00:12:33.190\nWe're gonna take this star out just\nmomentarily, just to clear things up.\n\n221\n00:12:34.560 --> 00:12:35.370\nAnd you know what?\n\n222\n00:12:35.370 --> 00:12:41.460\nWe are actually going to remove,\nno, not that result just this.\n\n223\n00:12:41.460 --> 00:12:45.050\nSo this is gonna be an empty dictionary\nfor now, it's not gonna work.\n\n224\n00:12:45.050 --> 00:12:49.140\nBut, I wanna remove cheese and\npepperoni and\n\n225\n00:12:49.140 --> 00:12:52.850\npeppers cuz I'm like,\nthey could be just a whole list of foods.\n\n226\n00:12:53.950 --> 00:12:58.000\nIt could be, I don't know, anchovies,\n\n227\n00:12:58.000 --> 00:13:02.330\nit could be ham or pineapple, that's\na whole other debate in and of itself.\n\n228\n00:13:03.500 --> 00:13:06.940\nBut how would I get those\nas keyword arguments?\n\n229\n00:13:08.330 --> 00:13:12.010\nWell instead of star, we have star star.\n\n230\n00:13:12.010 --> 00:13:17.248\nStar star, and\nthe convention is star, star, quartz.\n\n231\n00:13:17.248 --> 00:13:20.550\nOr KW-arks.\n&gt;&gt; [LAUGH].\n\n232\n00:13:20.550 --> 00:13:22.200\n&gt;&gt; So you will see a star star\n\n233\n00:13:22.200 --> 00:13:23.710\nkwarks a great deal.\n\n234\n00:13:25.310 --> 00:13:29.130\nAnd now well I'm collecting these up,\nwhat does that look like?\n\n235\n00:13:29.130 --> 00:13:31.900\nLet's look at this, Kwargs,\nwe're still calling it,\n\n236\n00:13:31.900 --> 00:13:34.520\nI've just returned with an empty\ndictionary, everything should work.\n\n237\n00:13:34.520 --> 00:13:37.680\nShould is the key word there, and\n\n238\n00:13:37.680 --> 00:13:41.620\nboom, disregard this one because that's\nactually the printout from below.\n\n239\n00:13:41.620 --> 00:13:46.400\nBut notice, this kind of already\nlooks like, this is the kwargs.\n\n240\n00:13:46.400 --> 00:13:50.074\nCheese 100, mushrooms 30,\npepperoni 80, peppers 60, olives 20.\n\n241\n00:13:52.377 --> 00:13:58.050\nWell that's actually,\nlet's see what type that is.\n\n242\n00:13:58.050 --> 00:14:00.190\nIs it a dictionary, is it a tuple,\nis it a special thing?\n\n243\n00:14:00.190 --> 00:14:03.230\nWhat is it?\n\n244\n00:14:03.230 --> 00:14:06.700\nAnd it is in fact a dictionary,\nPython will already do this.\n\n245\n00:14:06.700 --> 00:14:10.300\nAnd what this star star quarks means is.\n\n246\n00:14:10.300 --> 00:14:14.590\nHey you're, you're just getting\nsome number of keyword arguments.\n\n247\n00:14:15.720 --> 00:14:19.000\nYou're allowing someone to put\nas many in there as possible.\n\n248\n00:14:19.000 --> 00:14:20.680\nThis food to calories that\nactually makes sense,\n\n249\n00:14:20.680 --> 00:14:23.510\nI can just add more foods and\nthey're their respective calorie amounts.\n\n250\n00:14:24.670 --> 00:14:29.150\nThe one thing, though, is you've got\na lot of logic that's built behind this.\n\n251\n00:14:29.150 --> 00:14:33.590\nIf you instead expect cheese, mushrooms,\npepperoni, peppers, and olives.\n\n252\n00:14:33.590 --> 00:14:38.622\nIf you need those, then it's\n\n253\n00:14:38.622 --> 00:14:43.655\nprobably better to instead do\n\n254\n00:14:43.655 --> 00:14:50.096\nstar cheese mushrooms, pepperoni,\n\n255\n00:14:50.096 --> 00:14:54.765\nand peppers, and olives.\n\n256\n00:14:54.765 --> 00:15:00.100\nAnd then come back and put these there,\n\n257\n00:15:00.100 --> 00:15:03.710\njust like we had, and then there's\none final thing we need to do.\n\n258\n00:15:03.710 --> 00:15:08.907\nWe need to do for key in kwargs.\n\n259\n00:15:08.907 --> 00:15:13.900\nWe need to say results key = kwargs.\n\n260\n00:15:13.900 --> 00:15:15.820\nThere's other ways to do this.\n\n261\n00:15:15.820 --> 00:15:17.800\nEssentially what I'm doing is I'm\ntaking everything from kwargs and\n\n262\n00:15:17.800 --> 00:15:20.330\nputting it in results.\n&gt;&gt; Mm-hm.\n\n263\n00:15:20.330 --> 00:15:21.160\n&gt;&gt; And there we go.\n\n264\n00:15:21.160 --> 00:15:25.250\nNow we're gonna see what kwargs is,\nin this context.\n\n265\n00:15:25.250 --> 00:15:29.230\nBecause right now I just have the keyword\narguments that I have required.\n\n266\n00:15:29.230 --> 00:15:33.440\nNotice I'm enforcing\nkeyword arguments only.\n\n267\n00:15:33.440 --> 00:15:37.622\nI say, you need these, and\nthen you may give me some other ones.\n\n268\n00:15:37.622 --> 00:15:42.681\nAnd effectively we could call\nthis maybe pizza [LAUGH] instead,\n\n269\n00:15:42.681 --> 00:15:49.280\nso multi the QR words it's still a class\nof dictionary, let's see what's in it.\n\n270\n00:15:56.413 --> 00:16:01.285\nAnd notice [INAUDIBLE] actually\ncomes in as empty, why is that?\n\n271\n00:16:01.285 --> 00:16:04.510\nCuz I have nothing additional other\nthan the ones that I have required.\n\n272\n00:16:05.720 --> 00:16:09.372\nBut if I come down here and\nI say, ooh, anchovies.\n\n273\n00:16:09.372 --> 00:16:13.194\nI don't think there's,\nI think they're a little fatty,\n\n274\n00:16:13.194 --> 00:16:15.955\nI'm totally making these up, by the way.\n\n275\n00:16:15.955 --> 00:16:20.055\n[LAUGH] And if I do that, notice the star\nstar column actually has anchovies.\n\n276\n00:16:20.055 --> 00:16:24.777\nThe rest of them are not in there\nbecause they are keyword arguments.\n\n277\n00:16:24.777 --> 00:16:27.040\nSo it kind of depends on\nthe context that you need.\n\n278\n00:16:28.840 --> 00:16:32.541\nKeyword arguments are helpful because now\nif I come and look at food_to_calories.\n\n279\n00:16:32.541 --> 00:16:33.446\nThese are the foods and\n\n280\n00:16:33.446 --> 00:16:36.165\ntheir respective calorie amounts,\nI can kinda reason about that.\n\n281\n00:16:36.165 --> 00:16:41.061\nYou have to be careful,\nthough, because if you do this,\n\n282\n00:16:41.061 --> 00:16:45.380\nthen people can just put\nanything you want in it.\n\n283\n00:16:45.380 --> 00:16:48.299\nAnd maybe you're anticipating\nthem to have cheese in there.\n\n284\n00:16:48.299 --> 00:16:51.932\nAnd you're like, well, cheese, it'll\nbe in there, but then they don’t, and\n\n285\n00:16:51.932 --> 00:16:52.839\nthen things break.\n\n286\n00:16:52.839 --> 00:16:56.770\nSo you have to be careful there,\nand I’m gonna do something here.\n\n287\n00:16:56.770 --> 00:17:00.612\nI'm gonna do this,\n\n288\n00:17:00.612 --> 00:17:04.910\ncomma, **kwargs.\n\n289\n00:17:04.910 --> 00:17:07.579\nAnd notice,\nnamed arguments must follow bare.\n\n290\n00:17:11.441 --> 00:17:17.570\nYou don't actually need that first\nstar if you're doing **kwargs.\n\n291\n00:17:17.570 --> 00:17:23.237\nSo that's kind of implied, and\nwhat that means is, if I do this,\n\n292\n00:17:23.237 --> 00:17:28.299\nright, just that bare 100,\nlet's see what happens.\n\n293\n00:17:28.299 --> 00:17:31.531\nWell, number one, if you type random\ncharacters that don't need to be there,\n\n294\n00:17:31.531 --> 00:17:34.990\nfood_to_calories takes zero positional but\none was given.\n\n295\n00:17:34.990 --> 00:17:39.078\nForcing keyword arguments only is\nkind of implied by the **kwargs, so\n\n296\n00:17:39.078 --> 00:17:41.700\nyou can't do positional arguments anymore.\n\n297\n00:17:41.700 --> 00:17:45.729\nSo those are a few edge cases\nthat you have to realize.\n\n298\n00:17:45.729 --> 00:17:50.001\nNow, that final thing that I\n\n299\n00:17:50.001 --> 00:17:54.814\nkinda wanna make sure you know.\n\n300\n00:17:54.814 --> 00:17:57.876\nIf you, actually,\nlet's go back here, add these back.\n\n301\n00:17:57.876 --> 00:18:02.103\nYou're like, mushroom, everybody's\ngonna put cheese on their pizza, so\n\n302\n00:18:02.103 --> 00:18:03.478\nyou just leave that out.\n\n303\n00:18:03.478 --> 00:18:07.459\nBut then you go, you know what,\n\n304\n00:18:07.459 --> 00:18:14.200\nI know KwArgs is gonna have cheese in it,\nlike this.\n\n305\n00:18:14.200 --> 00:18:16.710\nSo what I'm saying is,\nKwArgs is gonna have a cheese argument,\n\n306\n00:18:16.710 --> 00:18:19.170\nI'm just gonna collect all these together,\nright?\n\n307\n00:18:20.440 --> 00:18:24.780\nAnd then if you didn't do something\nlike this, that's fine, right?\n\n308\n00:18:24.780 --> 00:18:26.950\nSo you're like, okay,\nI know cheese is gonna be in there.\n\n309\n00:18:26.950 --> 00:18:33.694\nAnd effectively what I'm doing is, I am\nignoring everything else in the kwargs.\n\n310\n00:18:33.694 --> 00:18:39.180\nAll right, so\nanchovies being one of those things.\n\n311\n00:18:39.180 --> 00:18:43.800\nAnd then if I type multiple keyword args,\nI have cheese and anchovies, and\n\n312\n00:18:43.800 --> 00:18:50.420\nnotice cheese is there, right,\ncheese did make it, why?\n\n313\n00:18:50.420 --> 00:18:53.007\nBecause I put it right there, but\nnow what happens if I comment that out,\n\n314\n00:18:53.007 --> 00:18:54.458\nsomeone didn't pass that argument in?\n\n315\n00:18:56.841 --> 00:18:59.038\nIt's broke, key error, why?\n\n316\n00:18:59.038 --> 00:19:03.880\nBecause I commented this out,\nI did not make my intention explicit.\n\n317\n00:19:03.880 --> 00:19:09.780\nKwArgs did not have cheese in it, when I\ntried to access it, I got a key error.\n\n318\n00:19:09.780 --> 00:19:13.551\nSo there are some nuance,\noopsie-daisies there.\n\n319\n00:19:13.551 --> 00:19:16.746\nNow, keyword args, you'll see **kwargs.\n\n320\n00:19:16.746 --> 00:19:19.643\nYou'll see people do things like this, or\n\n321\n00:19:19.643 --> 00:19:23.352\nthey will even put some\nif-else statements in there.\n\n322\n00:19:23.352 --> 00:19:26.670\nSay, hey,\ndo have cheese in kwargs, if not,\n\n323\n00:19:26.670 --> 00:19:31.622\nthen you need to fail or print out\na message, or something like that.\n\n324\n00:19:31.622 --> 00:19:35.741\nBut if you really need\nsomething like cheese,\n\n325\n00:19:35.741 --> 00:19:41.450\nnotice this is a key error, cheese,\nI put cheese back in there.\n\n326\n00:19:41.450 --> 00:19:45.409\nStill commented out down below, and boom,\n\n327\n00:19:45.409 --> 00:19:49.582\nrequired one missing\nkeyword only argument.\n\n328\n00:19:49.582 --> 00:19:53.849\nIt finds it further, kind near\nthe beginning of the program, it goes hey,\n\n329\n00:19:53.849 --> 00:19:56.558\nyou're not holding up\nyour end of the deal, and\n\n330\n00:19:56.558 --> 00:19:58.955\nthat's a little easier to reason about.\n\n331\n00:20:00.480 --> 00:20:03.750\nSo multiple keyword arguments,\nyou can just put a star and\n\n332\n00:20:03.750 --> 00:20:08.305\nthen just a couple of comments, that's\nfine, it enforces keyword arguments.\n\n333\n00:20:08.305 --> 00:20:12.692\nOr you could put **kwargs and you get\nas many keyword arguments as you want,\n\n334\n00:20:12.692 --> 00:20:15.650\nthey come in and it's a dictionary.\n\n335\n00:20:15.650 --> 00:20:19.570\nOr you can combine the two and say,\nI need these as keyword arguments.\n\n336\n00:20:19.570 --> 00:20:23.893\nThese other things, they might be there,\nmaybe it's an optional thing,\n\n337\n00:20:23.893 --> 00:20:26.381\nthat's okay, and that's very helpful.\n\n338\n00:20:26.381 --> 00:20:30.353\nAnd just to re-emphasize,\nfood_to_calories, if I look at this list,\n\n339\n00:20:30.353 --> 00:20:34.210\nI go, these are all te foods that\nare being passed in, it's great.\n\n340\n00:20:34.210 --> 00:20:38.908\nOne final thought,\nthis star and this **kwargs,\n\n341\n00:20:38.908 --> 00:20:42.751\nthat ends up being used for another thing,\n\n342\n00:20:42.751 --> 00:20:48.020\nanother syntax, and actually,\nwe'll look at that.\n\n343\n00:20:48.020 --> 00:20:54.590\nIt's not technically a function signature,\nbut it does play into similar things here.\n\n344\n00:20:54.590 --> 00:20:58.170\nSo do keep that in mind that\nyou may see **kwargs or\n\n345\n00:20:58.170 --> 00:21:03.439\n** in particular in another context,\nand we'll see that in the future.\n\n346\n00:21:03.439 --> 00:21:06.359\nBut Zach, there you have it,\nmultiple keyword arguments.\n\n347\n00:21:06.359 --> 00:21:09.319\nThere's a few hiccups that\nyou may encounter, but by and\n\n348\n00:21:09.319 --> 00:21:12.166\nlarge, I find it more readable,\neasier to maintain.\n\n349\n00:21:12.166 --> 00:21:14.873\nAnd as long as you take\nappropriate precautions,\n\n350\n00:21:14.873 --> 00:21:18.401\nthen you should be good to go.\n&gt;&gt; You've made me so hungry this episode,\n\n351\n00:21:18.401 --> 00:21:19.191\nI can't believe it.\n\n352\n00:21:19.191 --> 00:21:21.410\nWonderfully done, though, I must say.\n\n353\n00:21:21.410 --> 00:21:24.540\nSo functions with multiple keyword\narguments, another great episode.\n\n354\n00:21:24.540 --> 00:21:26.744\nWould you like to say\nsomething else before we go?\n\n355\n00:21:26.744 --> 00:21:28.456\n&gt;&gt; Just to re-emphasize,\n\n356\n00:21:28.456 --> 00:21:32.950\nthere's a lot coming at you,\nit'll take a little while to stew.\n\n357\n00:21:32.950 --> 00:21:37.154\nYou may have to rewatch some episodes,\nthings are not going to make absolute\n\n358\n00:21:37.154 --> 00:21:39.659\nsense until you've had\na reason to use them.\n\n359\n00:21:39.659 --> 00:21:43.297\nWe're going to do some of that together,\nso don't worry, but\n\n360\n00:21:43.297 --> 00:21:45.780\nif you're like, these exams, I don't.\n\n361\n00:21:45.780 --> 00:21:50.563\nI'm more worried about syntax and some\nof the language rules than necessarily\n\n362\n00:21:50.563 --> 00:21:52.817\nbeing able to apply them every time.\n\n363\n00:21:52.817 --> 00:21:57.986\nSo definitely stay tuned, we'll see how to\nuse some of these things as they crop up.\n\n364\n00:21:57.986 --> 00:22:01.765\nSome of them you may not see very much at\nall, because they're edge cases that you\n\n365\n00:22:01.765 --> 00:22:04.666\njust need to be aware of when\nyou look at other people's code.\n\n366\n00:22:04.666 --> 00:22:09.306\nMaybe not a lot of the code that you or I\nwrite, whether it be separate or together.\n\n367\n00:22:09.306 --> 00:22:10.696\n&gt;&gt; Well said, Justin,\n\n368\n00:22:10.696 --> 00:22:15.080\nwell done, abstracting with functions,\nfantastic series.\n\n369\n00:22:15.080 --> 00:22:17.940\nMake sure you watch every single episode,\nyou'll be so glad you did.\n\n370\n00:22:17.940 --> 00:22:19.680\nIt's gonna help you now and in the future.\n\n371\n00:22:19.680 --> 00:22:21.940\nAnd don't forget **kwargs,\nI'm not going to.\n\n372\n00:22:21.940 --> 00:22:24.220\nAnd by the way,\nyou're gonna be in the course library.\n\n373\n00:22:24.220 --> 00:22:28.580\nThere's thousands of other hours of\ncontent in there designed to do one thing,\n\n374\n00:22:28.580 --> 00:22:29.350\nhelp you succeed.\n\n375\n00:22:29.350 --> 00:22:29.960\nCheck that out too,\n\n376\n00:22:29.960 --> 00:22:34.130\nand tell everyone you know about\nDevPro TV, DevPro TV is bingeworthy.\n\n377\n00:22:34.130 --> 00:22:35.820\nThanks for watching, I'm Zach Memis.\n&gt;&gt; And I'm Justin Dennison.\n\n378\n00:22:35.820 --> 00:22:37.061\n&gt;&gt; We will see you again soon.\n\n379\n00:22:37.061 --> 00:22:43.824\n[MUSIC]\n\n",
          "vimeoId": "273703880"
        },
        {
          "description": "In this episode, Justin and Zach put all of the function types together to explore the use of positional and keyword arguments in more complex contexts.",
          "length": "1412",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-8-1-functions-w-mixed-arguments-060618-PGM.00_25_47_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-8-1-functions-w-mixed-arguments-060618-PGM.00_25_47_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-abstractingwithfunctions/techskills-abstracting-with-functions-1-8-1-functions-w-mixed-arguments-060618-PGM.00_25_47_23.Still001-sm.jpg",
          "title": "Fuctions w/ Mixed Arguments",
          "transcript": "",
          "vimeoId": "273919135"
        }
      ],
      "title": "Abstracting with Functions"
    }
  ],
  "url": "abstractingfunctions",
  "vLab": false
}
