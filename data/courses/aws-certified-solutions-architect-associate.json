{
  "description": "AWS Certified Solutions Architect Associate exam is intended for individuals with experience designing distributed applications and systems on the AWS platform. Exam concepts you should understand for this exam include designing and deploying scalable systems on AWS, lift and shift of an existing on-premises application to AWS, ingress and egress of data to and from AWS\nSelecting the appropriate AWS service based on data, compute, database, or security requirements, identifying appropriate use of AWS architectural best practices and estimating AWS costs and identifying cost control mechanisms.",
  "descriptionMD": "AWS Certified Solutions Architect Associate exam is intended for individuals with experience designing distributed applications and systems on the AWS platform. Exam concepts you should understand for this exam include designing and deploying scalable systems on AWS, lift and shift of an existing on-premises application to AWS, ingress and egress of data to and from AWS\nSelecting the appropriate AWS service based on data, compute, database, or security requirements, identifying appropriate use of AWS architectural best practices and estimating AWS costs and identifying cost control mechanisms.",
  "length": "58982",
  "name": "AWS Certified Solutions Architect - Associate",
  "practiceExam": false,
  "subtitle": "Designing distributed applications on AWS platform",
  "tagUrl": "aws",
  "topics": [
    {
      "episodes": [
        {
          "description": "AWS Certified Solutions Architect Associate exam is intended for individuals with experience designing distributed applications and systems on the AWS platform. Exam concepts you should understand for this exam include designing and deploying scalable systems on AWS, lift and shift of an existing on-premises application to AWS, ingress and egress of data to and from AWS Selecting the appropriate AWS service based on data, compute, database, or security requirements, identifying appropriate use of AWS architectural best practices and estimating AWS costs and identifying cost control mechanisms.",
          "length": "388",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-0-0-overview-032817.00_00_03_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-0-0-overview-032817.00_00_03_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-0-0-overview-032817.00_00_03_10.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.050 --> 00:00:03.629\n[SOUND] In this video\nwe're gonna take a look at\n\n2\n00:00:03.629 --> 00:00:07.774\nthe AWS Certified Solutions\nArchitect: Associate\n\n3\n00:00:07.774 --> 00:00:11.275\ncertification content here on ITPro.TV.\n\n4\n00:00:11.275 --> 00:00:15.435\nNow for those of you that are looking to\nget certified in AWS or just learn about\n\n5\n00:00:15.435 --> 00:00:19.870\nAmazon Web Services in general,\nthe ACSA is the starting point for you.\n\n6\n00:00:19.870 --> 00:00:23.130\nIn this certification we run\nthough basically an overview of\n\n7\n00:00:23.130 --> 00:00:26.650\nall of the different\nsolutions that make up AWS.\n\n8\n00:00:26.650 --> 00:00:29.250\nAmazon Web Services is actually\na really massive product,\n\n9\n00:00:29.250 --> 00:00:31.860\na collection of a number of\ndifferent utilities and services\n\n10\n00:00:31.860 --> 00:00:35.670\nthat when you put them all together create\nan amazing solutions infrastructure.\n\n11\n00:00:35.670 --> 00:00:37.420\nNow, who is this targeted towards?\n\n12\n00:00:37.420 --> 00:00:40.970\nWell, really anybody who wants\nto learn more about AWS and\n\n13\n00:00:40.970 --> 00:00:44.740\ncloud infrastructure, this is a great\nstarting point to jump in and get working.\n\n14\n00:00:44.740 --> 00:00:49.130\nBut it's really targeted toward SysOps and\nDevOps, people who are responsible for\n\n15\n00:00:49.130 --> 00:00:52.560\nmaintaining systems, and are looking\nto deploy them in the cloud, and\n\n16\n00:00:52.560 --> 00:00:54.730\nare entertaining using\nAWS as that solution.\n\n17\n00:00:54.730 --> 00:00:58.560\nSo, if you fit that mold,\nthis is the certification for you.\n\n18\n00:00:58.560 --> 00:01:02.250\nBut why is it that it targets\nthat kind of audience so well?\n\n19\n00:01:02.250 --> 00:01:04.670\nAnd the reason is, this certification's\na little bit different than some of\n\n20\n00:01:04.670 --> 00:01:05.490\nthe other ones that we do.\n\n21\n00:01:05.490 --> 00:01:09.190\nA lot of times we focus\nreally on the how to side.\n\n22\n00:01:09.190 --> 00:01:10.800\nHow to perform a certain activity.\n\n23\n00:01:10.800 --> 00:01:13.440\nHow to perform some certain job, or\n\n24\n00:01:13.440 --> 00:01:15.910\naction that needs to be\ndone to provide a service.\n\n25\n00:01:15.910 --> 00:01:20.680\nBut in this certification,\nit's more of a higher level overview of\n\n26\n00:01:20.680 --> 00:01:22.890\nhere's what this product is and\nwhat it does.\n\n27\n00:01:22.890 --> 00:01:24.990\nHere's what this other product is,\nand what it does.\n\n28\n00:01:24.990 --> 00:01:28.660\nAnd it gives you kind of the run of the\nwhole show, and that's really important.\n\n29\n00:01:28.660 --> 00:01:32.820\nBecause when you design a solution,\nwhen you architect a solution that's gonna\n\n30\n00:01:32.820 --> 00:01:36.750\nbe running up in AWS, you need to\nunderstand what all your options are, and\n\n31\n00:01:36.750 --> 00:01:39.670\nhow to make sure that you\npick the best option.\n\n32\n00:01:39.670 --> 00:01:43.660\nHow do you know that your design is\nrunning as efficiently as it could?\n\n33\n00:01:43.660 --> 00:01:46.700\nMeanwhile there might be other services\navailable inside of the AWS suite that you\n\n34\n00:01:46.700 --> 00:01:50.510\ncan be leveraging to make your web server\nor database or whatever your solution is,\n\n35\n00:01:50.510 --> 00:01:53.390\nyour web application,\ncould be running that much faster.\n\n36\n00:01:53.390 --> 00:01:56.306\nThat's where the certified\nsolutions architect comes in.\n\n37\n00:01:56.306 --> 00:01:58.310\nLet me show you some of\nthe things that are on the exam.\n\n38\n00:01:59.320 --> 00:02:02.560\nI've got the web page pulled up here so\nwe can take a look at it.\n\n39\n00:02:02.560 --> 00:02:04.823\nAnd if you haven't been to this website,\nit's actually very valuable.\n\n40\n00:02:04.823 --> 00:02:06.520\nIt's right on Amazon's web page.\n\n41\n00:02:06.520 --> 00:02:08.390\nThey've got everything dialed down for\nyou.\n\n42\n00:02:08.390 --> 00:02:11.600\nBut they've got a little link over on\nthe side to download the exam guide.\n\n43\n00:02:11.600 --> 00:02:15.650\nAnd in the exam guide, they give\nyou a rundown of what prerequisite\n\n44\n00:02:15.650 --> 00:02:20.510\nknowledge is expected for you to have,\nas well as what is covered on the exam.\n\n45\n00:02:20.510 --> 00:02:22.330\nAnd that's really what I\nwanna highlight right here,\n\n46\n00:02:22.330 --> 00:02:24.500\nis what to expect on the exam itself.\n\n47\n00:02:24.500 --> 00:02:28.310\nAnd what you'll see is that the exam\nis divided up into four domains.\n\n48\n00:02:28.310 --> 00:02:32.730\nWe've got designing a highly available,\ncost-efficient, fault-tolerant,\n\n49\n00:02:32.730 --> 00:02:34.270\nscalable system.\n\n50\n00:02:34.270 --> 00:02:37.450\nNow that is a lot, right?\n\n51\n00:02:37.450 --> 00:02:41.510\nWe're not just saying hey, I wanna run\nWordPress in the cloud, that's not it.\n\n52\n00:02:41.510 --> 00:02:46.230\nI wanna run WordPress, but I want it\nto be fast, I want it to scale large,\n\n53\n00:02:46.230 --> 00:02:48.210\nI want it to be redundant and\nfault-tolerant.\n\n54\n00:02:48.210 --> 00:02:49.930\nI want all these other pieces.\n\n55\n00:02:49.930 --> 00:02:53.900\nAnd so, we take a look at all the\ndifferent resources in AWS that can make\n\n56\n00:02:53.900 --> 00:02:54.840\nthat happen.\n\n57\n00:02:54.840 --> 00:02:58.610\nAnd you'll notice that\nthat 60% of the exam,\n\n58\n00:02:58.610 --> 00:03:02.420\nover half the exam is right\nthere in that one domain.\n\n59\n00:03:02.420 --> 00:03:07.200\nThat's the main part, the main focus\nof this exam is not how to do it but\n\n60\n00:03:07.200 --> 00:03:08.550\nwhy to do it, right?\n\n61\n00:03:08.550 --> 00:03:09.490\nWhat do I choose?\n\n62\n00:03:09.490 --> 00:03:11.860\nHow do I create that design?\n\n63\n00:03:11.860 --> 00:03:15.675\nAnd then in the follow up certifications\nin these sys ops administrator, or\n\n64\n00:03:15.675 --> 00:03:17.810\nthe dev ops administrator exams.\n\n65\n00:03:17.810 --> 00:03:19.700\nThose focus on the actually how to do it,\nright?\n\n66\n00:03:19.700 --> 00:03:23.580\nHere's how we go in and\nwe set up multi AZ replication.\n\n67\n00:03:23.580 --> 00:03:26.880\nHere, we learn that we should\nset up multi AZ replication,\n\n68\n00:03:26.880 --> 00:03:28.310\nwhat benefit that provides us, right?\n\n69\n00:03:28.310 --> 00:03:31.477\nSo this is kind of the why\nthat leads to the how.\n\n70\n00:03:31.477 --> 00:03:35.155\nThe other three domains are important also\nthough, so we shouldn't neglect those.\n\n71\n00:03:35.155 --> 00:03:38.925\nThe second one is implementing deployment\nright, or implementing and applying.\n\n72\n00:03:38.925 --> 00:03:41.965\nSo actually putting our\npractices into action.\n\n73\n00:03:41.965 --> 00:03:45.020\nAnd you'll see that's\nonly 10% of the exam.\n\n74\n00:03:45.020 --> 00:03:46.480\nData security is next.\n\n75\n00:03:46.480 --> 00:03:47.880\nSecurity is very important.\n\n76\n00:03:47.880 --> 00:03:49.810\nWe need to make sure that our\nsolutions are protected, and\n\n77\n00:03:49.810 --> 00:03:54.280\nthat we don't have an unexpected release\nof customer information to the public.\n\n78\n00:03:54.280 --> 00:03:56.020\nThat's not something we wanna have happen.\n\n79\n00:03:56.020 --> 00:03:57.729\nAnd that makes up 20% of the exam.\n\n80\n00:03:57.729 --> 00:03:59.765\nAnd then lastly, we have troubleshooting.\n\n81\n00:03:59.765 --> 00:04:02.815\nSometimes things don't go quite\nthe way we hoped they should go.\n\n82\n00:04:02.815 --> 00:04:05.265\nAnd we need to be able to identify and\nresolve that.\n\n83\n00:04:05.265 --> 00:04:07.575\nAnd that makes up another 10% of the exam.\n\n84\n00:04:07.575 --> 00:04:10.425\nSo, you'll notice that those last\nthree domains really account for\n\n85\n00:04:10.425 --> 00:04:13.565\nless than half of what we're\ngonna be learning about.\n\n86\n00:04:13.565 --> 00:04:17.775\nAnd it shows how big of a stress this exam\nis putting on actually creating a design.\n\n87\n00:04:17.775 --> 00:04:20.930\nUnderstanding why you would use\ncertain solutions versus others\n\n88\n00:04:20.930 --> 00:04:23.940\nto meet the needs of a customer or\nmeet the needs of your company.\n\n89\n00:04:23.940 --> 00:04:26.703\nSo that's all kind of critical\ninformation to be thinking about.\n\n90\n00:04:26.703 --> 00:04:29.898\nIf you have a chance to look at this guide\nthough, it does break down even further\n\n91\n00:04:29.898 --> 00:04:33.049\ninto the domains and talk about the\nindividual components you're expected to\n\n92\n00:04:33.049 --> 00:04:36.520\nknow, and what you really should\nhave kind of going into the exam.\n\n93\n00:04:36.520 --> 00:04:38.170\nNow let's talk about\nthat exam a little bit.\n\n94\n00:04:38.170 --> 00:04:41.240\nThe exam itself,\nthey post the information right here.\n\n95\n00:04:41.240 --> 00:04:43.510\nIt's 80 minutes so\nit's not a terribly long exam,\n\n96\n00:04:43.510 --> 00:04:45.020\njust under an a hour and a half.\n\n97\n00:04:45.020 --> 00:04:47.890\nAnd basically you can jump in and\ntake it, it is computer based.\n\n98\n00:04:47.890 --> 00:04:49.770\nThere's a few places you\ncan take it in person but\n\n99\n00:04:49.770 --> 00:04:52.840\nmost of us are gonna take it online\nthrough the Web Assessor system.\n\n100\n00:04:52.840 --> 00:04:59.460\nIt’s $150 and once you sign up, you use\nthe, there’s a link over here that says,\n\n101\n00:04:59.460 --> 00:05:02.560\nschedule an exam and\nthat will take you to Web Assessor.\n\n102\n00:05:02.560 --> 00:05:05.810\nAnd from here, you can create a free\naccount and then you sign up for\n\n103\n00:05:05.810 --> 00:05:07.300\nthe exam which is a $150.\n\n104\n00:05:07.300 --> 00:05:10.980\nThe free account allows you to track all\nof your certifications that you do through\n\n105\n00:05:10.980 --> 00:05:11.760\nWeb Assessor.\n\n106\n00:05:11.760 --> 00:05:14.530\nSo as you continue on through\nAmazon’s other certifications,\n\n107\n00:05:14.530 --> 00:05:17.810\nyou’ll be able to track their completion,\n\n108\n00:05:17.810 --> 00:05:21.220\nemployer certificate, and other\ninformation all right from one place.\n\n109\n00:05:21.220 --> 00:05:22.010\nYou sign up from here,\n\n110\n00:05:22.010 --> 00:05:25.210\nand then you're able to take the exam\nfrom the comfort of your own home.\n\n111\n00:05:25.210 --> 00:05:27.000\nYou can take it from the office,\nor wherever.\n\n112\n00:05:27.000 --> 00:05:29.660\nAnd you'll be able to get certified, and\n\n113\n00:05:29.660 --> 00:05:32.660\nthen jump out there and\nput everything you learned into practice.\n\n114\n00:05:32.660 --> 00:05:36.700\nAnd hopefully continue on with the other\nAWS certifications that are available.\n\n115\n00:05:37.800 --> 00:05:40.190\nAll right well that's a pretty good\nrun down of what's on the exam.\n\n116\n00:05:40.190 --> 00:05:42.120\nI hope it all sounded interesting to you.\n\n117\n00:05:42.120 --> 00:05:46.040\nIf it's what you're excited to learn about\nthen stay tuned because we've got episodes\n\n118\n00:05:46.040 --> 00:05:50.370\nof AWS Certified Solutions\nArchitect Associate coming up next.\n\n119\n00:05:50.370 --> 00:05:53.030\nNow if that didn't sound\nquite exciting for you or\n\n120\n00:05:53.030 --> 00:05:56.470\nyou're worried about not knowing enough\nabout cloud infrastructure before diving\n\n121\n00:05:56.470 --> 00:05:59.600\nin, be sure to check out a lot of the\nother certifications we have on IT Pro TV.\n\n122\n00:05:59.600 --> 00:06:04.370\nThere's some certifications like Network+\nthat are really beneficial to have already\n\n123\n00:06:04.370 --> 00:06:06.640\ngotten under your belt before\njumping into cloud technology.\n\n124\n00:06:06.640 --> 00:06:08.520\nCuz networking is so important.\n\n125\n00:06:08.520 --> 00:06:10.830\nThat's base knowledge that\nyou're really expected to have.\n\n126\n00:06:10.830 --> 00:06:14.460\nSo if you find yourself struggling\nwith the ACSA just jump over and\n\n127\n00:06:14.460 --> 00:06:17.250\ncheck out Network+ for a little while,\nand then come back when you're ready.\n\n128\n00:06:17.250 --> 00:06:20.054\nAll of that's available as part\nof your ITPro.TV subscription.\n\n129\n00:06:20.054 --> 00:06:23.505\nAll right, I hope you guys enjoyed it and\nI'll see you in the episodes.\n\n130\n00:06:23.505 --> 00:06:27.934\n[SOUND]\n\n",
          "vimeoId": "212967935"
        },
        {
          "description": "In this episode, Justin and Don explore the motivation for using a cloud infrastructure over an on-premises solution. They begin by exploring what cloud computing is, dive into the how and why Amazon Web Services are used, and end with models of deployment for AWS.",
          "length": "1833",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-1-introduction_to_aws-022817.00_30_15_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-1-introduction_to_aws-022817.00_30_15_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-1-introduction_to_aws-022817.00_30_15_17.Still001-sm.jpg",
          "title": "Introduction to AWS",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.343\nWelcome to ITProTV.\n\n2\n00:00:01.343 --> 00:00:04.746\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:04.746 --> 00:00:08.262\n[MUSIC]\n\n4\n00:00:08.262 --> 00:00:12.025\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.025 --> 00:00:16.290\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:16.290 --> 00:00:19.910\nI'm your host Justin Dennison, and in\ntoday's episode we're actually gonna start\n\n7\n00:00:19.910 --> 00:00:25.480\nworking toward The Amazon Certified\nSolutions Architect Associate Level Exam,\n\n8\n00:00:25.480 --> 00:00:27.060\nthat is always a mouthful.\n\n9\n00:00:27.060 --> 00:00:31.090\nBut hopefully, to help us along in\nthat endeavor, is Mr. Don Pezet.\n\n10\n00:00:31.090 --> 00:00:32.470\nHow are you doing today, Don?\n\n11\n00:00:32.470 --> 00:00:33.280\n&gt;&gt; I'm doing great, Justin.\n\n12\n00:00:33.280 --> 00:00:36.180\nReady to dive right in\nto the ACSA Associate.\n\n13\n00:00:36.180 --> 00:00:38.200\nAnd let me tell you guys,\nit is a mouthful.\n\n14\n00:00:38.200 --> 00:00:40.050\nIt is a long certification title.\n\n15\n00:00:40.050 --> 00:00:42.130\nBut, it's a very valuable one to have,\nright?\n\n16\n00:00:42.130 --> 00:00:46.599\nAnd it really helps to make sure that we\nunderstand all the things that are what\n\n17\n00:00:46.599 --> 00:00:47.441\nmakes up AWS.\n\n18\n00:00:47.441 --> 00:00:49.160\nAnd so,\nthat's what we're gonna do right here.\n\n19\n00:00:49.160 --> 00:00:51.948\nWe're kicking off with starting\ntaking to take a look at AWS.net.\n\n20\n00:00:51.948 --> 00:00:55.580\nI wanna start kind of at\nthe 100 foot level, right?\n\n21\n00:00:55.580 --> 00:00:57.340\nWhere we look at the service as a whole.\n\n22\n00:00:57.340 --> 00:01:01.507\nSo that we understand what exactly\nAWS is before we start diving in to\n\n23\n00:01:01.507 --> 00:01:04.221\nall the different\nservices that make it up.\n\n24\n00:01:04.221 --> 00:01:07.500\nSo let's kind of start there,\nAWS is Amazon Website Services, right?\n\n25\n00:01:07.500 --> 00:01:08.943\nIt's from Amazon and\n\n26\n00:01:08.943 --> 00:01:13.040\nit's all the resultant product\nof the way they do business.\n\n27\n00:01:13.040 --> 00:01:17.216\nAmazon is a online retailer and\nthey handle just more financial\n\n28\n00:01:17.216 --> 00:01:21.725\ntransactions that most of us can\ndream of in a single hour, really.\n\n29\n00:01:21.725 --> 00:01:24.140\nIt's an insane amount of\nbusiness they do online.\n\n30\n00:01:24.140 --> 00:01:26.570\nAnd as a result of being entirely online,\n\n31\n00:01:26.570 --> 00:01:29.990\nthey had to have data centers\nthat were able to support that.\n\n32\n00:01:29.990 --> 00:01:33.200\nThat had redundancy and\navailability and durability and\n\n33\n00:01:33.200 --> 00:01:37.280\nall the different components that we dream\nabout having in our own data centers but,\n\n34\n00:01:37.280 --> 00:01:38.560\ntypically can't afford.\n\n35\n00:01:38.560 --> 00:01:40.670\nWell, they had to have it and\nthey could afford it.\n\n36\n00:01:40.670 --> 00:01:42.400\nAnd it got to the point\nwhere they did it so\n\n37\n00:01:42.400 --> 00:01:46.040\nwell that they started making that\navailable out to the rest of the us.\n\n38\n00:01:46.040 --> 00:01:49.430\nAnd so now we can share,\nwe can benefit from their investment.\n\n39\n00:01:49.430 --> 00:01:52.670\nAnd we can rent portions\nof their network to use and\n\n40\n00:01:52.670 --> 00:01:54.950\nreally move our data centers\ninto the next century.\n\n41\n00:01:54.950 --> 00:01:58.930\nReally kind of getting the advantage of\nall this heavy infrastructure that we\n\n42\n00:01:58.930 --> 00:02:00.370\nmight not be able to afford ourselves.\n\n43\n00:02:00.370 --> 00:02:03.530\nSo it's pretty cool and it's definitely\nsomething that we wanna learn about.\n\n44\n00:02:03.530 --> 00:02:06.731\n&gt;&gt; Well, that seems wonderful Don.\n\n45\n00:02:06.731 --> 00:02:10.350\nBut you know, I know that AWS\nis a type of cloud computing.\n\n46\n00:02:10.350 --> 00:02:12.320\nMaybe it's better if we start there.\n\n47\n00:02:12.320 --> 00:02:13.692\nWhat is cloud computing?\n\n48\n00:02:13.692 --> 00:02:14.450\n&gt;&gt; All right, so\n\n49\n00:02:14.450 --> 00:02:18.240\nthe idea of cloud computing is\na departure from what we had before.\n\n50\n00:02:18.240 --> 00:02:22.560\nWhat we had before was physical\non-premises equipment, right?\n\n51\n00:02:22.560 --> 00:02:24.980\nSo if I needed a web server,\nwhat would I do?\n\n52\n00:02:24.980 --> 00:02:28.140\nI bought a physical server,\nI stuck it in my server room.\n\n53\n00:02:28.140 --> 00:02:29.920\nIt was right here in\nthe building with me or\n\n54\n00:02:29.920 --> 00:02:32.910\nmaybe in an another data\ncenter that my company owned.\n\n55\n00:02:32.910 --> 00:02:36.570\nWe had complete,\nexclusive control of that equipment.\n\n56\n00:02:36.570 --> 00:02:38.600\nNow, there's advantages to that model.\n\n57\n00:02:38.600 --> 00:02:41.520\nFor example, you know exactly\nwhat you're gonna pay for.\n\n58\n00:02:41.520 --> 00:02:45.630\nYou paid for that server, it's done,\nit's on the books, it's on your budget and\n\n59\n00:02:45.630 --> 00:02:46.540\nthat's that.\n\n60\n00:02:46.540 --> 00:02:51.610\nAnd now you have access to 100% of\nits resources, 100% of the time.\n\n61\n00:02:51.610 --> 00:02:56.050\nBut there's a negative side to that,\nthe negative side is, you paid for\n\n62\n00:02:56.050 --> 00:02:58.970\nall of it, even if you're not using it.\n\n63\n00:02:58.970 --> 00:03:02.850\nAnd that's where we really start to\nsee some of the differences between\n\n64\n00:03:02.850 --> 00:03:06.420\nthe traditional model and\nthe new cloud model for deploying.\n\n65\n00:03:06.420 --> 00:03:08.280\nWhen we use a cloud service,\n\n66\n00:03:08.280 --> 00:03:13.120\nthe first thing that we're\ngetting is on demand resources.\n\n67\n00:03:13.120 --> 00:03:16.840\nSo if I need a server,\nI don't have to go out and buy one.\n\n68\n00:03:16.840 --> 00:03:18.880\nI can just click a button and\nI've already got one.\n\n69\n00:03:18.880 --> 00:03:21.860\nIt's just waiting for\nme to pop up right then.\n\n70\n00:03:21.860 --> 00:03:25.780\nAnd to understand how important that is, I\nmean, let's look at that old model again.\n\n71\n00:03:25.780 --> 00:03:29.120\nIf I had a web server farm,\nso let's envision,\n\n72\n00:03:29.120 --> 00:03:33.650\nif you will, a web server farm with\nten servers, ten web front-ends.\n\n73\n00:03:33.650 --> 00:03:35.418\nAnd they handle my workload pretty okay.\n\n74\n00:03:35.418 --> 00:03:38.708\n[LAUGH] And so one day,\nI'm looking at my logs and\n\n75\n00:03:38.708 --> 00:03:44.080\nI see where the servers are averaging\nabout 80% utilization all day long.\n\n76\n00:03:44.080 --> 00:03:45.570\nWell, that's pretty high up there, right?\n\n77\n00:03:45.570 --> 00:03:47.807\nIt's time to upgrade, I need to add more,\n\n78\n00:03:47.807 --> 00:03:50.240\nI need to add an 11th\nhost into that cluster.\n\n79\n00:03:50.240 --> 00:03:52.630\nWell, what do I do?\n\n80\n00:03:52.630 --> 00:03:56.430\nI go to the vendor that I'm purchasing\nfrom, Dell, HP, Lenovo, whoever that is.\n\n81\n00:03:56.430 --> 00:03:57.110\nright?\n\n82\n00:03:57.110 --> 00:03:59.810\nAnd I get a quote, hey,\ngive me a quote for the server.\n\n83\n00:03:59.810 --> 00:04:01.778\nOnce I get a quote to\nthe specifications that I want,\n\n84\n00:04:01.778 --> 00:04:04.304\nI take that to the accounting department,\nI get them to issue a PO.\n\n85\n00:04:04.304 --> 00:04:06.030\nWell, it probably took\na day to get a quote,\n\n86\n00:04:06.030 --> 00:04:08.100\nit'll take definitely a day to get a PO.\n\n87\n00:04:08.100 --> 00:04:11.123\nOnce I've got that, I submit it back\nto the vendor, I place my order.\n\n88\n00:04:11.123 --> 00:04:14.066\nAll right, well, they take a day or\ntwo to build out the servers, so\n\n89\n00:04:14.066 --> 00:04:15.720\nlet's just say two more days.\n\n90\n00:04:15.720 --> 00:04:18.520\nAnd they ship it to me,\nwhich will be another two to three days.\n\n91\n00:04:18.520 --> 00:04:21.190\nSo now we're at about seven\ndays on this process and\n\n92\n00:04:21.190 --> 00:04:22.218\nI haven't even gotten the server yet.\n\n93\n00:04:22.218 --> 00:04:26.530\nAnd then when I get it, well,\nhere in Florida we have this problem.\n\n94\n00:04:26.530 --> 00:04:30.570\nWhere the humidity level is so high\noutside that when something is shipped\n\n95\n00:04:30.570 --> 00:04:34.590\nto us, it's matching the temperature and\nhumidity level of outside.\n\n96\n00:04:34.590 --> 00:04:37.950\nWhen you bring it into an ice cold\nserver room, it starts to perspire and\n\n97\n00:04:37.950 --> 00:04:38.950\nit gets all wet.\n\n98\n00:04:38.950 --> 00:04:42.664\nSo we have to set it inside the building\nbut not unpackage while it acclimates, so\n\n99\n00:04:42.664 --> 00:04:44.650\nthat's gonna take 24 hours.\n\n100\n00:04:44.650 --> 00:04:46.503\nThen we take the server out,\nwe throw it in the rack,\n\n101\n00:04:46.503 --> 00:04:48.120\nwe've gotta install our operating system.\n\n102\n00:04:48.120 --> 00:04:50.882\nWe've gotta install our other software,\nwe've gotta configure and\n\n103\n00:04:50.882 --> 00:04:52.296\nget it set up the way that we want it.\n\n104\n00:04:52.296 --> 00:04:57.190\nAnd that's gonna take another day and\nthen we join it into our cluster.\n\n105\n00:04:57.190 --> 00:05:00.460\nFollowing all of our proper procedures,\nassuming everything goes right,\n\n106\n00:05:00.460 --> 00:05:04.730\nyou're looking at about a week and\na half, assuming everything goes right.\n\n107\n00:05:04.730 --> 00:05:06.250\nThat's a long time.\n\n108\n00:05:06.250 --> 00:05:10.750\nWhat if I already hit 100% utilization\nbefore we that week and a half is up?\n\n109\n00:05:10.750 --> 00:05:11.440\nI'm just out of luck.\n\n110\n00:05:11.440 --> 00:05:13.870\nThe servers are gonna run slow for\na little while, right?\n\n111\n00:05:13.870 --> 00:05:16.840\nOr I could guess my capacity planning.\n\n112\n00:05:16.840 --> 00:05:19.146\nI could say, you know what,\nlet me just buy five servers this time,\n\n113\n00:05:19.146 --> 00:05:20.910\njust give me some extra room.\n\n114\n00:05:20.910 --> 00:05:22.730\nWell, I only needed one more.\n\n115\n00:05:22.730 --> 00:05:24.455\nNow I'm paying for\nfour that I'm not even using.\n\n116\n00:05:24.455 --> 00:05:27.570\nThey're just sitting there for\nthe time when I do need them.\n\n117\n00:05:27.570 --> 00:05:31.290\nAnd that's a big challenge with\nphysical on-premises equipment.\n\n118\n00:05:31.290 --> 00:05:34.910\nWhen we go to the cloud,\nit's on demand resources.\n\n119\n00:05:34.910 --> 00:05:36.860\nI say, wow, I'm at 80% utilization.\n\n120\n00:05:36.860 --> 00:05:39.550\nI probably need to add a server,\nbut you know what, I'm gonna wait.\n\n121\n00:05:39.550 --> 00:05:40.472\nOoop, I'm at 90%.\n\n122\n00:05:40.472 --> 00:05:41.553\nI'm gonna wait.\n\n123\n00:05:41.553 --> 00:05:45.100\n95%, all right, now I'll hit the button.\n\n124\n00:05:45.100 --> 00:05:48.695\nYou hit the button and within minutes,\nyou've got another web server.\n\n125\n00:05:48.695 --> 00:05:50.750\nYou\"ve got more resources that are up.\n\n126\n00:05:50.750 --> 00:05:52.250\nAnd, you could wait to the last minute.\n\n127\n00:05:52.250 --> 00:05:55.210\nAnd, so you didn't have to pay for\nit till the very last moment.\n\n128\n00:05:55.210 --> 00:05:58.230\nAnd even then,\nlet's say this is a temporary thing.\n\n129\n00:05:59.280 --> 00:06:01.020\nMaybe you work for a university.\n\n130\n00:06:01.020 --> 00:06:04.560\nAnd at the university,\nat the beginning of every term,\n\n131\n00:06:04.560 --> 00:06:07.910\nat the beginning of the fall semester,\nor the spring semester, or\n\n132\n00:06:07.910 --> 00:06:11.250\nwhatever, there's this huge influx\nof visitors to the website.\n\n133\n00:06:11.250 --> 00:06:13.690\nAll the students are trying to\npick their courses and register.\n\n134\n00:06:13.690 --> 00:06:15.410\nIt's a huge amount of workload.\n\n135\n00:06:15.410 --> 00:06:17.400\nSo you know you're gonna\nneed more servers.\n\n136\n00:06:17.400 --> 00:06:21.152\nBut once registration is over,\nthings settle back down, right?\n\n137\n00:06:21.152 --> 00:06:25.940\nAfter drop/add, now people are just\nin the regular courses and that's it.\n\n138\n00:06:25.940 --> 00:06:27.870\nYou don't need that\nheavy workload anymore.\n\n139\n00:06:27.870 --> 00:06:32.690\nWell, with on demand resources, we can\npull in new servers while we need them and\n\n140\n00:06:32.690 --> 00:06:35.310\nwhen we're done, we just give them back.\n\n141\n00:06:35.310 --> 00:06:37.480\nWe say, all right, we're done with these,\nwe give them back.\n\n142\n00:06:37.480 --> 00:06:39.370\nYou can't do that with physical stuff.\n\n143\n00:06:39.370 --> 00:06:41.840\nBut with on demand resources\nlike this you can.\n\n144\n00:06:41.840 --> 00:06:45.420\nAnd in a cloud model we do\nwhat's called pay-as-you-go.\n\n145\n00:06:45.420 --> 00:06:47.810\nYou pay for what you use and\n\n146\n00:06:47.810 --> 00:06:50.260\nif you're not using anymore\nyou don't pay for it anymore.\n\n147\n00:06:50.260 --> 00:06:53.414\nAnd that's a big advantage with the cloud,\nit can save you a ton of money and\n\n148\n00:06:53.414 --> 00:06:54.427\na lot of environments.\n\n149\n00:06:54.427 --> 00:06:56.988\nAnd it allows you to do\nthings a lot quicker.\n\n150\n00:06:56.988 --> 00:07:00.950\nOne example I like to give is, maybe you\ngot a heavy mathematical operation, right?\n\n151\n00:07:02.550 --> 00:07:06.500\nYou work for a lab and\nyou're sequencing the human genome, right?\n\n152\n00:07:06.500 --> 00:07:08.120\nMost of you have read about that project.\n\n153\n00:07:08.120 --> 00:07:12.050\nHappened years ago now, where they decided\nto sequence the entire human genome.\n\n154\n00:07:12.050 --> 00:07:14.970\nAnd it was an insane mathematical\noperation that had to run.\n\n155\n00:07:14.970 --> 00:07:18.610\nAnd it took thousands of computers and\nit took months and months.\n\n156\n00:07:18.610 --> 00:07:21.190\nI think it was actually years\nto get it all complete.\n\n157\n00:07:21.190 --> 00:07:24.610\nWell, let's say that you knew that\nyou could get your cache done in\n\n158\n00:07:24.610 --> 00:07:27.340\ntwo months if you had\na thousand computers.\n\n159\n00:07:27.340 --> 00:07:29.410\nWell, you could go out and\nbuy a thousand computers.\n\n160\n00:07:29.410 --> 00:07:31.420\nAnd you could run them for\ntwo months and then you're done.\n\n161\n00:07:31.420 --> 00:07:33.420\nWhat happens at the end of two months?\n\n162\n00:07:33.420 --> 00:07:35.870\nYou've got a thousand computers,\nwhat are you gonna do with them?\n\n163\n00:07:35.870 --> 00:07:40.160\nMaybe you could sell them on Ebay and\nget some of your money back, maybe, right?\n\n164\n00:07:40.160 --> 00:07:44.900\nMaybe not, maybe you're saddled with it\nand it's ends up being a waste, right?\n\n165\n00:07:44.900 --> 00:07:47.560\nYou end up losing a lot of money on\nthe hardware you purchased, okay?\n\n166\n00:07:48.600 --> 00:07:50.707\nIn the cloud you don't\nhave that happening.\n\n167\n00:07:50.707 --> 00:07:52.310\nYou've can get a thousand servers, and\n\n168\n00:07:52.310 --> 00:07:53.790\nwhen you're done,\nyou just give back and that's it.\n\n169\n00:07:53.790 --> 00:07:55.130\nYou pay for them while you have them.\n\n170\n00:07:55.130 --> 00:07:58.280\nThe other thing is,\nlook at it from productivity standpoint.\n\n171\n00:07:58.280 --> 00:08:01.902\nIf I can get the job done in two\nmonths with a thousand servers,\n\n172\n00:08:01.902 --> 00:08:03.932\nWhat if I had 2,000 servers?\n\n173\n00:08:03.932 --> 00:08:06.620\nCould I get it done in one month?\n\n174\n00:08:06.620 --> 00:08:08.010\nWhat if I had 4,000 servers?\n\n175\n00:08:08.010 --> 00:08:09.510\nCould I get it done in two weeks?\n\n176\n00:08:09.510 --> 00:08:10.870\nWhat if I had 8,000 servers.\n\n177\n00:08:10.870 --> 00:08:11.910\nCould I get it done in one week?\n\n178\n00:08:11.910 --> 00:08:15.611\nI could get this whole thing done in\none week, if I had 8,000 servers.\n\n179\n00:08:15.611 --> 00:08:19.730\nCould I do that, Justin, could I ask you,\nright here in this building.\n\n180\n00:08:19.730 --> 00:08:21.400\nCould we get 8,000 servers in here?\n\n181\n00:08:21.400 --> 00:08:22.810\n&gt;&gt; There is no possible.\n\n182\n00:08:22.810 --> 00:08:26.940\nI mean, I guess when we stacked it and\nthings, but I'd be sweating for sure.\n\n183\n00:08:26.940 --> 00:08:30.850\nLike, I'm just hot thinking about\nstacking all of that equipment in here.\n\n184\n00:08:30.850 --> 00:08:34.030\n&gt;&gt; This is a big building,\nI think we've got 28,000 squared feet or\n\n185\n00:08:34.030 --> 00:08:35.105\nsomething like that.\n\n186\n00:08:35.105 --> 00:08:38.500\n8,000 services would be tough,\nbecause you've got the physical servers,\n\n187\n00:08:38.500 --> 00:08:44.180\nyou've got the racks that you've got to\nget the air conditioning just simply that.\n\n188\n00:08:44.180 --> 00:08:49.220\nBut power, UPSs, generators, the electric\nbill, all of those other things\n\n189\n00:08:49.220 --> 00:08:53.260\nthat I don't even count in the cost of a\nserver normally, those all come into play.\n\n190\n00:08:53.260 --> 00:08:55.490\nAnd that would be really, really, hard.\n\n191\n00:08:55.490 --> 00:08:57.470\nWe'd have to do some\nconstruction on this building.\n\n192\n00:08:57.470 --> 00:08:58.350\nAbsolutely.\n\n193\n00:08:58.350 --> 00:08:59.050\nIt would be tough.\n\n194\n00:09:00.210 --> 00:09:04.390\nBut I could go into AWS and\nI could spin up 8,000 servers today.\n\n195\n00:09:04.390 --> 00:09:07.400\nYou have to do a sport ticket because\nthere's some thresholds you cross there\n\n196\n00:09:07.400 --> 00:09:10.970\nbut you can do it and with a couple\nof days you can definitely have 8,000\n\n197\n00:09:10.970 --> 00:09:13.450\nservers up and then you can do\nyour job potentially in one week.\n\n198\n00:09:13.450 --> 00:09:17.350\nAnd then at the end of the week you just\ngive the 8,000 servers back and that's it.\n\n199\n00:09:17.350 --> 00:09:19.940\nAnd it's the same cost as if\nyou had run 1,000 servers for\n\n200\n00:09:19.940 --> 00:09:22.910\ntwo months to run 8,000 servers for\none week.\n\n201\n00:09:22.910 --> 00:09:25.080\nAnd you get your results faster.\n\n202\n00:09:25.080 --> 00:09:27.000\nThose are the advantages\nthat we get with the cloud.\n\n203\n00:09:27.000 --> 00:09:31.427\nAnd so when we talk about the cloud, it\nreally boils down to on-demand resources\n\n204\n00:09:31.427 --> 00:09:35.460\nand pay-as-you-go model,\nyou pay for what you use.\n\n205\n00:09:35.460 --> 00:09:41.280\n&gt;&gt; So Don, we've hit on some pricing and\nnice cost analysis.\n\n206\n00:09:41.280 --> 00:09:46.863\nBut, are there other things that, because\nI'm giving up being able to touch and\n\n207\n00:09:46.863 --> 00:09:50.983\nfiddle with, but\nalso I feel like I'm adding complexity.\n\n208\n00:09:50.983 --> 00:09:54.760\nAre there other reasons that I\nwould want to use cloud computing?\n\n209\n00:09:54.760 --> 00:09:57.020\nObviously scaling out to 8,000 servers,\n\n210\n00:09:57.020 --> 00:10:01.200\nwhich is physically Incapable of us and\nwe would have deconstruction.\n\n211\n00:10:01.200 --> 00:10:03.509\nBut are there other reasons that\nwe may wanna use cloud computing?\n\n212\n00:10:03.509 --> 00:10:05.810\n&gt;&gt; So there's pros and cons, right.\n\n213\n00:10:05.810 --> 00:10:09.820\nAnd I'm not trying to say to everybody\nthat the cloud is the greatest way and\n\n214\n00:10:09.820 --> 00:10:12.280\neverybody should be in the cloud and\nif you're not in the cloud you're crazy.\n\n215\n00:10:12.280 --> 00:10:15.210\nMostly because the word cloud\nhas kind of turned into this\n\n216\n00:10:15.210 --> 00:10:17.390\nbuzz word that means too many things,\nright?\n\n217\n00:10:17.390 --> 00:10:19.890\nBut also because it's not right for\neverybody.\n\n218\n00:10:19.890 --> 00:10:21.990\nSome people need to keep\nthings on-premises.\n\n219\n00:10:21.990 --> 00:10:25.720\nThere's definitely a call for\nthat for certain environments.\n\n220\n00:10:25.720 --> 00:10:27.560\nBut there are a lot of benefits.\n\n221\n00:10:27.560 --> 00:10:30.040\nAnd there's benefits not\njust to us as IT people,\n\n222\n00:10:30.040 --> 00:10:32.460\nbut benefits to other\npeople in our business.\n\n223\n00:10:32.460 --> 00:10:34.350\nSo for example, accounting departments.\n\n224\n00:10:34.350 --> 00:10:37.120\nAccounting departments\nlove cloud services.\n\n225\n00:10:37.120 --> 00:10:39.380\nThe main reason is when\nyou buy a physical server,\n\n226\n00:10:39.380 --> 00:10:42.120\nyou're buying what's called\na capital asset for your company,\n\n227\n00:10:42.120 --> 00:10:46.900\nthat is now a physical item your company\nowns, you paid a certain amount for it.\n\n228\n00:10:46.900 --> 00:10:50.350\nAfter a year, it depreciates in value,\nit goes down in value right,\n\n229\n00:10:50.350 --> 00:10:52.640\nif I were to resell it,\nit's not worth the same amount.\n\n230\n00:10:52.640 --> 00:10:54.130\nAnd the second year, and the third year,\n\n231\n00:10:54.130 --> 00:10:56.860\nthe value keeps going\ndown productive hardware.\n\n232\n00:10:56.860 --> 00:10:58.820\nSo on their taxes, on their P&amp;L,\n\n233\n00:10:58.820 --> 00:11:02.530\non all the different reports that your\naccounting department has to fill out,\n\n234\n00:11:02.530 --> 00:11:06.160\nthey're having to handle that value\ndepreciation of that hardware.\n\n235\n00:11:06.160 --> 00:11:08.180\nAnd if you acquire more,\nit becomes very difficult to track.\n\n236\n00:11:08.180 --> 00:11:09.690\nIt's kind of a pain.\n\n237\n00:11:09.690 --> 00:11:14.810\nBut when you deal with a cloud service\nlike AWS, it's not a capital asset.\n\n238\n00:11:14.810 --> 00:11:16.800\nYou don't own AWS.\n\n239\n00:11:16.800 --> 00:11:17.820\nYou're just renting it.\n\n240\n00:11:17.820 --> 00:11:18.540\nIt's a service.\n\n241\n00:11:18.540 --> 00:11:20.190\nIt's what's called a variable cost.\n\n242\n00:11:20.190 --> 00:11:22.630\nIt's like paying the power bill and\n\n243\n00:11:22.630 --> 00:11:26.170\ngranted you don't necessary know what\nthat cost is going to be each month.\n\n244\n00:11:26.170 --> 00:11:29.330\nI mean you can estimate pretty easily but\nyou don't know to the penny\n\n245\n00:11:29.330 --> 00:11:31.670\nwhat it's going to be cuz it's\nall based on utilization.\n\n246\n00:11:31.670 --> 00:11:33.820\nIt's based on how many\nviewers hit your website or\n\n247\n00:11:33.820 --> 00:11:38.030\nhow many users are accessing your line\nof business application or whatever.\n\n248\n00:11:38.030 --> 00:11:39.740\nSo it can vary.\n\n249\n00:11:39.740 --> 00:11:44.710\nBut, it's much more precise in terms\nof paying for what you actually used.\n\n250\n00:11:44.710 --> 00:11:46.500\nAnd when you're done with it,\nyou just turn it off.\n\n251\n00:11:46.500 --> 00:11:49.230\nSo there's no capital asset,\nthere's nothing depreciate on that.\n\n252\n00:11:49.230 --> 00:11:51.600\nSo accountants, they really like it.\n\n253\n00:11:51.600 --> 00:11:55.720\nFor me as an IT guy,\nthere's parts that I really like about it.\n\n254\n00:11:55.720 --> 00:11:59.240\nAnd one of my favorite things is what\nI just have mentioned is auto scaling.\n\n255\n00:11:59.240 --> 00:12:03.090\nThe ability to be able to ramp\nup servers as we need them,\n\n256\n00:12:03.090 --> 00:12:06.510\nlike I mentioned a moment ago, but\nalso to bring them back down again, right?\n\n257\n00:12:06.510 --> 00:12:08.180\nLet me give you an example of that.\n\n258\n00:12:08.180 --> 00:12:11.670\nI've got a little kinda\nsimple diagram here fired up\n\n259\n00:12:11.670 --> 00:12:14.560\nthat shows kinda the course of a day,\nright?\n\n260\n00:12:14.560 --> 00:12:18.950\nSo we've got midnight to 6 AM,\nfrom noon to 6 PM to midnight again.\n\n261\n00:12:18.950 --> 00:12:22.690\nAnd over the course of a day,\nif you're running a web server farm\n\n262\n00:12:22.690 --> 00:12:25.480\nyou don't see flat line\nutilization across the day.\n\n263\n00:12:25.480 --> 00:12:29.130\nYou don't have the exact same\namount of people in your website\n\n264\n00:12:29.130 --> 00:12:30.280\nevery moment of the day.\n\n265\n00:12:30.280 --> 00:12:31.680\nYou have peaks and valleys.\n\n266\n00:12:31.680 --> 00:12:34.210\nThere's times where your\nwebsite gets really busy and\n\n267\n00:12:34.210 --> 00:12:35.690\nthen times where it gets really slow.\n\n268\n00:12:35.690 --> 00:12:37.270\nAnd then it gets busy again and\nslow again.\n\n269\n00:12:37.270 --> 00:12:41.000\nSo it might be really busy early in the\nmorning when people are getting to work.\n\n270\n00:12:41.000 --> 00:12:44.510\nOr really busy in the afternoons\nwhen people are at lunch and\n\n271\n00:12:44.510 --> 00:12:46.310\nwinding up work or whatever.\n\n272\n00:12:46.310 --> 00:12:48.990\nAnd then other times it\nmight be really slow.\n\n273\n00:12:48.990 --> 00:12:52.800\nYou're not seeing a lot of activity and\nso there's just not a need for\n\n274\n00:12:52.800 --> 00:12:53.880\na ton of servers.\n\n275\n00:12:53.880 --> 00:12:59.420\nWell if I need ten servers at\npeak time and only two servers\n\n276\n00:12:59.420 --> 00:13:03.840\nat my idle or my low time, how many\nservers will I have to buy to set that up?\n\n277\n00:13:03.840 --> 00:13:05.651\nI'd have to buy ten, right.\n\n278\n00:13:05.651 --> 00:13:07.815\nIf we're dealing with physical servers,\n\n279\n00:13:07.815 --> 00:13:10.960\nyou have to have enough servers\nto handle your peak load.\n\n280\n00:13:10.960 --> 00:13:13.100\nAnd you have to know\nwhat your peak load is.\n\n281\n00:13:13.100 --> 00:13:14.450\nYou might not know what your peak load is.\n\n282\n00:13:14.450 --> 00:13:17.620\nBut you need to know what that peak load\nis to be able to figure out how many\n\n283\n00:13:17.620 --> 00:13:18.580\nservers you need to buy.\n\n284\n00:13:18.580 --> 00:13:22.510\nAnd then it doesn't matter that\nI only needed two right here.\n\n285\n00:13:22.510 --> 00:13:25.910\nI had to buy ten to cover the peak,\nthat's the problem with physical servers.\n\n286\n00:13:25.910 --> 00:13:30.590\nBut when we get to the cloud\nwe can auto scale.\n\n287\n00:13:30.590 --> 00:13:36.190\nWe can bring in ten virtual servers,\nten instances at peak time.\n\n288\n00:13:36.190 --> 00:13:40.110\nAnd then as we get into a valley\nwe can drop down to two so\n\n289\n00:13:40.110 --> 00:13:42.560\nwe are only paying for\ntwo servers right here.\n\n290\n00:13:42.560 --> 00:13:47.310\nAnd then we ramp up to seven to ten or\nwhatever and we're getting the exact\n\n291\n00:13:47.310 --> 00:13:50.540\namount that we need at a given time, or\nare we're giving back what we don't need.\n\n292\n00:13:50.540 --> 00:13:54.790\nThis is really important because if you\nlook at a service like Twitter, right.\n\n293\n00:13:54.790 --> 00:13:56.980\nWhen Twitter first started\nit was a couple of guys and\n\n294\n00:13:56.980 --> 00:13:59.830\nthey had two or\nthree computers that were right\n\n295\n00:13:59.830 --> 00:14:02.240\nthere next to them under their\ndesk that was running Twitter.\n\n296\n00:14:02.240 --> 00:14:04.020\nThat's how it started.\n\n297\n00:14:04.020 --> 00:14:08.270\nAnd then, overnight they became super\npopular, and they were getting hundreds of\n\n298\n00:14:08.270 --> 00:14:13.606\nthousands of registrations per month,\nand their user base just grew insanely,\n\n299\n00:14:13.606 --> 00:14:18.190\nand they needed servers and they needed\nthem fast, where do they get them?\n\n300\n00:14:18.190 --> 00:14:22.250\nServices like AWS, they're able to just\nreach out and say I need a 1,000 servers.\n\n301\n00:14:22.250 --> 00:14:23.350\nAnd well, that was yesterday.\n\n302\n00:14:23.350 --> 00:14:26.020\nNow I need 5,000 servers and\njust ramp it up.\n\n303\n00:14:26.020 --> 00:14:28.800\nServices like Netflix\nare able to use this and\n\n304\n00:14:28.800 --> 00:14:32.330\nmany other operations out there\nhave gotten their start on AWS.\n\n305\n00:14:32.330 --> 00:14:35.030\nWhat you'll normally see is\nwhere in the start up phase,\n\n306\n00:14:35.030 --> 00:14:37.460\nthey use AWS because it\nmakes things possible.\n\n307\n00:14:37.460 --> 00:14:41.730\nAnd then when they become insanely wealthy\nand rich, then they start moving off and\n\n308\n00:14:41.730 --> 00:14:44.121\nusing their own server farms or\ndata centers.\n\n309\n00:14:44.121 --> 00:14:46.020\nAnd they can do that because\nthey're insanely rich.\n\n310\n00:14:46.020 --> 00:14:46.830\nBut if you're not,\n\n311\n00:14:46.830 --> 00:14:52.330\nif you're a normal company, you don't\nhave that kind of expendable income.\n\n312\n00:14:52.330 --> 00:14:55.330\nAnd so services like AWS are what\nmakes your dream possible.\n\n313\n00:14:55.330 --> 00:14:57.690\nIt makes you able to achieve those things.\n\n314\n00:14:57.690 --> 00:15:01.060\n&gt;&gt; So, Don, I noticed just\nfrom what you've talked, and\n\n315\n00:15:01.060 --> 00:15:01.690\nthere's a couple of things.\n\n316\n00:15:01.690 --> 00:15:02.600\nThat auto scaling group,\n\n317\n00:15:02.600 --> 00:15:06.620\nwould that provide me with business\nintelligence about peak load?\n\n318\n00:15:06.620 --> 00:15:11.730\nWould I get that for free without\nhaving to set up additional logs and\n\n319\n00:15:11.730 --> 00:15:17.136\nthings like that in order to do,\nmy peak times are 3 AM and 5 PM.\n\n320\n00:15:17.136 --> 00:15:21.460\nBut also I feel like I've just\ngained a super power a little bit,\n\n321\n00:15:21.460 --> 00:15:22.670\nme as a single person.\n\n322\n00:15:22.670 --> 00:15:25.570\nI can spin up 1,000 servers and\ndo the work of a university.\n\n323\n00:15:25.570 --> 00:15:28.380\n&gt;&gt; Absolutely, I mean,\nwell, capacity planning.\n\n324\n00:15:28.380 --> 00:15:32.440\nCapacity planning is a challenge if\nyou're designing solutions you know that\n\n325\n00:15:32.440 --> 00:15:36.600\nif it's a new solution how do you\nknow what your capacity is right?\n\n326\n00:15:36.600 --> 00:15:40.400\nITProTV way back in our early days when\nwe first got started we needed a video\n\n327\n00:15:40.400 --> 00:15:44.000\nstreaming provider and so we reached out\nto a couple of CDNs and the first question\n\n328\n00:15:44.000 --> 00:15:47.370\nthey would always ask is well how\nmuch data are you pushing each month?\n\n329\n00:15:47.370 --> 00:15:49.700\nHow many viewers do you\nhave watching your content?\n\n330\n00:15:49.700 --> 00:15:52.710\nAnd we'd say, we're just getting started,\nwe don't know.\n\n331\n00:15:52.710 --> 00:15:55.833\nWe don't know what it's going to be like\na week from now or a month from now.\n\n332\n00:15:55.833 --> 00:15:59.283\nWe've been doing it for years now, and\nso we can actually pull a report and\n\n333\n00:15:59.283 --> 00:16:01.677\nI can tell you exactly how\nmuch data we move every and\n\n334\n00:16:01.677 --> 00:16:04.144\nexactly how many viewers\nwe have watching the show.\n\n335\n00:16:04.144 --> 00:16:05.820\nBut in the beginning, you don't know that.\n\n336\n00:16:05.820 --> 00:16:08.560\nAnd if you're doing rapid growth, it\ndoesn't even matter if you do know it cuz\n\n337\n00:16:08.560 --> 00:16:11.080\nit's gonna be different the next month and\nthe month after that.\n\n338\n00:16:11.080 --> 00:16:12.950\nCapacity planning is a nightmare.\n\n339\n00:16:12.950 --> 00:16:16.949\nWell, with AWS,\nbecause everything's dynamic, and\n\n340\n00:16:16.949 --> 00:16:20.955\nso we can do on demand resource\nallocation we can guess.\n\n341\n00:16:20.955 --> 00:16:25.580\n[LAUGH] We don't have to know our capacity\nyou can just throw a dart and guess.\n\n342\n00:16:25.580 --> 00:16:28.270\nAnd say, I think we'll have 1,000 viewers,\n\n343\n00:16:28.270 --> 00:16:30.530\nI think we'll push a terabyte\nof data month all right.\n\n344\n00:16:30.530 --> 00:16:33.215\nWhat if I'm wrong?\n\n345\n00:16:33.215 --> 00:16:35.160\nYou click a button and now you're right.\n\n346\n00:16:35.160 --> 00:16:38.660\nSo, I thought I was gonna move a terabyte\nof data but I moved two terabytes.\n\n347\n00:16:38.660 --> 00:16:42.510\nOkay, ADBS just does that,\nand I pay the bill, right?\n\n348\n00:16:42.510 --> 00:16:45.610\nBut the fact that I move that much more\ndata means I made that much more money and\n\n349\n00:16:45.610 --> 00:16:46.940\nthat's a good thing, right?\n\n350\n00:16:46.940 --> 00:16:51.164\nWhat if I thought I was gonna have\n1,000 users but I only had 500, right?\n\n351\n00:16:51.164 --> 00:16:53.410\nWe didn't get the uptake that\nwe thought we were gonna get?\n\n352\n00:16:53.410 --> 00:16:56.320\nWell, all right,\nI might have spun up 20 servers.\n\n353\n00:16:56.320 --> 00:16:59.339\nI'm gonna go in and drop that down to\n12 and we could spin it up to 20 and\n\n354\n00:16:59.339 --> 00:17:02.577\nwhen we get the numbers that we were\nexpecting but, we've got that cushion.\n\n355\n00:17:02.577 --> 00:17:05.683\nAnd if you make a mistake\nwith your capacity planning,\n\n356\n00:17:05.683 --> 00:17:09.340\nit's super easy to correct\nversus with On-Premises servers.\n\n357\n00:17:09.340 --> 00:17:14.150\nAll right so I ordered 100 servers,\nI actually probably only needed 20.\n\n358\n00:17:14.150 --> 00:17:16.940\nI wonder if I can return\nthose other 80 Voi.\n\n359\n00:17:16.940 --> 00:17:18.970\nDell or HP,\nthey're gonna love you on that one.\n\n360\n00:17:18.970 --> 00:17:20.720\nThey're gonna charge\nyou a restocking fee or\n\n361\n00:17:20.720 --> 00:17:23.420\nsomething if they even let\nyou do that kind of a return.\n\n362\n00:17:23.420 --> 00:17:26.020\nSo that's the challenge you have\nwith on premises that you don't even\n\n363\n00:17:26.020 --> 00:17:26.760\nhave in the cloud.\n\n364\n00:17:26.760 --> 00:17:28.210\nSo it's a safety net.\n\n365\n00:17:28.210 --> 00:17:33.385\nIt makes people like me really appreciate\nit cuz it's supper easy to do.\n\n366\n00:17:33.385 --> 00:17:39.710\nAnd you mentioned superpowers just an,\nthe economies of scale that Amazon has.\n\n367\n00:17:39.710 --> 00:17:44.058\nAmazon has such a massive global\ninfrastructure for the data center,\n\n368\n00:17:44.058 --> 00:17:46.130\ndata centers all over the world.\n\n369\n00:17:47.260 --> 00:17:48.770\nWe could afford that right?\n\n370\n00:17:48.770 --> 00:17:50.175\nMost companies couldn't.\n\n371\n00:17:50.175 --> 00:17:53.130\nAnd even if they could afford\nit it's a huge expense.\n\n372\n00:17:53.130 --> 00:17:56.970\nHaving generators,\nhaving multiple power grid connections,\n\n373\n00:17:56.970 --> 00:18:02.390\nhaving multiple ISP's and having this\ndistributed all across the planet.\n\n374\n00:18:02.390 --> 00:18:07.815\nThat's expensive but Amazon has\nhundreds of thousands of customers.\n\n375\n00:18:07.815 --> 00:18:11.881\nAnd all of these people are investing\nin the same infrastructure, and so\n\n376\n00:18:11.881 --> 00:18:15.883\nwhat normally be insanely expensive\nbecomes very, very affordable,\n\n377\n00:18:15.883 --> 00:18:20.217\nbecomes very inexpensive, it's actually\ncheaper to run a Cloud instance in\n\n378\n00:18:20.217 --> 00:18:23.975\nEC2 than it is the buy a physical\nserver and run it yourself right.\n\n379\n00:18:23.975 --> 00:18:28.249\nAnd if we kinda work out the math at first\nglance that physical server might look\n\n380\n00:18:28.249 --> 00:18:31.616\ncheaper, but when you start\nfactoring in the electric bill,\n\n381\n00:18:31.616 --> 00:18:35.719\nthe facilities cost of running\nthe air conditioning, UPS, generators.\n\n382\n00:18:35.719 --> 00:18:38.976\nWhen you factor in the warranty and\nmaintenance fees, you pay each year for\n\n383\n00:18:38.976 --> 00:18:40.018\nthat physical server.\n\n384\n00:18:40.018 --> 00:18:43.820\nIt becomes significantly more expensive\nthan just going up into the cloud.\n\n385\n00:18:43.820 --> 00:18:47.860\nAnd Amazon is buying servers\nat a much higher volume than\n\n386\n00:18:47.860 --> 00:18:49.780\nanyone else on the planet.\n\n387\n00:18:49.780 --> 00:18:53.722\nThat it brings that cost down\nsignificantly in you benefit from that.\n\n388\n00:18:53.722 --> 00:18:56.610\nSo, those are all things to\nlike about a Cloud service.\n\n389\n00:18:56.610 --> 00:19:00.629\nI mean the reason why we'd want to\nmove our systems up in the Cloud.\n\n390\n00:19:00.629 --> 00:19:03.808\n&gt;&gt; Don, wouldn't I also get\nthe most up to date equipment?\n\n391\n00:19:03.808 --> 00:19:07.838\nI mean I'm continuously getting up to date\nequipment instead of depreciating a real\n\n392\n00:19:07.838 --> 00:19:09.440\nestate three years.\n\n393\n00:19:09.440 --> 00:19:12.029\nAnd I have three year old\nequipment at the end of that and\n\n394\n00:19:12.029 --> 00:19:14.293\nmay it's starting to show\nits age a little bit.\n\n395\n00:19:14.293 --> 00:19:19.456\n&gt;&gt; Yeah, the dynamic allocation of stuff\nreally kind of solves that problem.\n\n396\n00:19:19.456 --> 00:19:23.660\nLet's say I have a physical server and\nin the beginning times I look at it and\n\n397\n00:19:23.660 --> 00:19:27.929\nI say I'm gonna do a website and honestly\nif I just have one CPU of four cores\n\n398\n00:19:27.929 --> 00:19:30.867\nthat can handle the workload\nthat I'm gonna have and\n\n399\n00:19:30.867 --> 00:19:34.400\nmaybe I do 16 gigs of RAM and\nthere is my web server.\n\n400\n00:19:34.400 --> 00:19:36.350\nWell then things start getting busier and\nbusier and\n\n401\n00:19:36.350 --> 00:19:38.150\nI'm like, boy I need a little more memory.\n\n402\n00:19:38.150 --> 00:19:40.457\nLet me go to 32 gigs of memory.\n\n403\n00:19:40.457 --> 00:19:44.190\nWell, I've got to go out and buy 32 gigs\nof matched memory to what I've already got\n\n404\n00:19:44.190 --> 00:19:47.450\nin the server, and it needs to be from\nthat vendor that it still support and\n\n405\n00:19:47.450 --> 00:19:50.417\nwarranty, and I have that challenge\nof finding the right memory.\n\n406\n00:19:50.417 --> 00:19:51.940\nProcessors even harder.\n\n407\n00:19:51.940 --> 00:19:53.910\nCan I add more cores to a processor?\n\n408\n00:19:53.910 --> 00:19:54.530\nNo.\n\n409\n00:19:54.530 --> 00:19:55.690\nYou gotta replace it.\n\n410\n00:19:55.690 --> 00:19:59.120\nYou take the old processor out chuck it in\nthe trash, or sell on eBay or whatever,\n\n411\n00:19:59.120 --> 00:20:01.880\nand buy a new processor and hope it works\nwith the motherboard that's in there.\n\n412\n00:20:01.880 --> 00:20:05.349\nThat's very expensive to do so it's not\nnormally an operation we can do and\n\n413\n00:20:05.349 --> 00:20:09.036\nif your server has two sockets in it maybe\nyou can add a second processor there but\n\n414\n00:20:09.036 --> 00:20:10.373\nthat becomes challenging.\n\n415\n00:20:10.373 --> 00:20:13.622\nAnd you're having to buy an older\nprocessor to match the one that's already\n\n416\n00:20:13.622 --> 00:20:16.140\nin there when newer ones are already out.\n\n417\n00:20:16.140 --> 00:20:17.560\nWith AWS we don't have that.\n\n418\n00:20:17.560 --> 00:20:21.050\nYou just say all right I did this\none VCPU and now I want two so\n\n419\n00:20:21.050 --> 00:20:25.450\nlet me just reprovision the server with\ntwo and it will be the latest processors.\n\n420\n00:20:25.450 --> 00:20:27.110\nI don't have to go back and\nbuy an old one.\n\n421\n00:20:27.110 --> 00:20:28.600\nIt will be the new stuff that's out there.\n\n422\n00:20:28.600 --> 00:20:33.190\nI remember when AWS rolled out\nSSD Solid State Digital storage SSD is so\n\n423\n00:20:33.190 --> 00:20:35.060\nmuch faster than spinning disk.\n\n424\n00:20:35.060 --> 00:20:38.800\nAnd Amazon has so much of it that they\nfinally reached the point where they said\n\n425\n00:20:38.800 --> 00:20:40.260\nthis is default storage now.\n\n426\n00:20:40.260 --> 00:20:43.565\nThe spinning disk is still there but\nSSD is now the default.\n\n427\n00:20:43.565 --> 00:20:46.629\nAnd if you had servers that were\ndeployed on the old spinning disks,\n\n428\n00:20:46.629 --> 00:20:49.060\nall you had to do was\nredeploy them with SSD.\n\n429\n00:20:49.060 --> 00:20:52.330\nAnd the cost eventually equalized,\nand now it costs the same.\n\n430\n00:20:52.330 --> 00:20:53.280\nIt doesn't even cost you anything.\n\n431\n00:20:53.280 --> 00:20:54.800\nYou just flip your server over and\nyou got SSD.\n\n432\n00:20:54.800 --> 00:20:58.070\nSo that's a really neat feature that\nwe have that would be harder for\n\n433\n00:20:58.070 --> 00:20:59.590\nus to do in a physical environment.\n\n434\n00:20:59.590 --> 00:21:02.813\nWe'd have to take our old hard drives out,\nthrow in these new SSDs, and\n\n435\n00:21:02.813 --> 00:21:04.813\nthen figure out what to\ndo with the old ones.\n\n436\n00:21:04.813 --> 00:21:09.005\nIt's not as easy as just clicking\na button like it is in the cloud.\n\n437\n00:21:09.005 --> 00:21:12.471\n&gt;&gt; That is some incredible power there,\nDon.\n\n438\n00:21:12.471 --> 00:21:15.166\nBut I'm kinda hesitant still.\n\n439\n00:21:15.166 --> 00:21:18.865\n&gt;&gt; [LAUGH]\n&gt;&gt; Maybe I have an existing company and\n\n440\n00:21:18.865 --> 00:21:20.145\nI wanna stay using it.\n\n441\n00:21:20.145 --> 00:21:22.260\nOr maybe I'm just getting started,\n\n442\n00:21:22.260 --> 00:21:26.845\ndoes AWS had different ways of getting\nstarted or is that I'm just like?\n\n443\n00:21:26.845 --> 00:21:29.981\n&gt;&gt; [LAUGH] So at the beginning of\nthe episode I made a comment and\n\n444\n00:21:29.981 --> 00:21:34.013\nsaid I really like cloud services but\nI'm not saying you should go crazy and\n\n445\n00:21:34.013 --> 00:21:36.070\njust move everything into the cloud.\n\n446\n00:21:36.070 --> 00:21:39.263\nIf you are a brand new company\nif you are just getting\n\n447\n00:21:39.263 --> 00:21:42.533\nstarted you're designing\na new infrastructure and\n\n448\n00:21:42.533 --> 00:21:46.410\nyou have the opportunity to go\nall cloud honestly it is great.\n\n449\n00:21:46.410 --> 00:21:48.820\nIt really does work out well and\nfor small and\n\n450\n00:21:48.820 --> 00:21:51.040\nmedium businesses that are just starting,\nI recommend it.\n\n451\n00:21:51.040 --> 00:21:55.080\nGet everything you can up in the cloud\ncuz it makes life so much easier.\n\n452\n00:21:55.080 --> 00:22:00.280\nBut if you're not a new company, if you're\na company that already exists even if\n\n453\n00:22:00.280 --> 00:22:05.230\nyou're a small company that already exists\nwell, it's a bit of a challenge right?\n\n454\n00:22:05.230 --> 00:22:08.100\nYou can't just shut off all of\nyour servers and move into,\n\n455\n00:22:08.100 --> 00:22:11.970\nwell you can, it's pretty challenging\nto do and to do it correctly and\n\n456\n00:22:11.970 --> 00:22:13.460\nthere's a bit of a learning curve and\n\n457\n00:22:13.460 --> 00:22:16.560\nthere's mistakes that can be made that\ncould really cause some problems.\n\n458\n00:22:16.560 --> 00:22:21.336\nThere's also times where maybe you\ncan't move something up into the cloud.\n\n459\n00:22:21.336 --> 00:22:24.517\nMaybe you work for a hospital and\nyou've got patient medical records, and\n\n460\n00:22:24.517 --> 00:22:28.104\nthere's some kind of legal compliance rule\nthat you have to follow that says you're\n\n461\n00:22:28.104 --> 00:22:30.093\nnot allowed to stick that\ndata up in the cloud.\n\n462\n00:22:30.093 --> 00:22:31.448\nMaybe it's government or\n\n463\n00:22:31.448 --> 00:22:34.590\nmilitary information that\nrequires top secret clearance.\n\n464\n00:22:34.590 --> 00:22:38.390\nWell, when we put something in the cloud,\nWe're trusting someone else to support our\n\n465\n00:22:38.390 --> 00:22:40.440\nservers, do they have\ntop secret clearance?\n\n466\n00:22:42.160 --> 00:22:43.610\nProbably not, not in most cases.\n\n467\n00:22:43.610 --> 00:22:46.920\nNow there are special cloud solutions\nfrom Amazon like their GovCloud\n\n468\n00:22:46.920 --> 00:22:49.030\nthat is designed for\nthe United States government.\n\n469\n00:22:49.030 --> 00:22:52.900\nBut what if you work for another country's\ngovernment, right, maybe I work for\n\n470\n00:22:52.900 --> 00:22:54.300\nthe French government.\n\n471\n00:22:54.300 --> 00:23:01.679\nAnd am I gonna trust\nAmazon's Gulf Cloud when I'm in France.\n\n472\n00:23:01.679 --> 00:23:05.423\nIt is not necessarily that level of trust\nthat's why I might need to maintain my\n\n473\n00:23:05.423 --> 00:23:06.900\ndata locally, right?\n\n474\n00:23:06.900 --> 00:23:09.290\nSo, does that mean I\njust can't use the Cloud?\n\n475\n00:23:09.290 --> 00:23:09.890\nWell, no.\n\n476\n00:23:09.890 --> 00:23:12.277\nThere's really three different\nmodels of Cloud to deployment.\n\n477\n00:23:12.277 --> 00:23:14.196\nThe first one is to not deploy, right?\n\n478\n00:23:14.196 --> 00:23:17.420\n[LAUGH] It's stay On-premises\nyou don't have to go to a Cloud.\n\n479\n00:23:17.420 --> 00:23:19.310\nYou can certainly stay On-premises.\n\n480\n00:23:19.310 --> 00:23:21.500\nThe second model has to go all in,\nand say you know,\n\n481\n00:23:21.500 --> 00:23:22.940\nwe're just going to put\neverything in the Cloud.\n\n482\n00:23:22.940 --> 00:23:25.690\nAnd that's what we do\nwith ITProTV when we were\n\n483\n00:23:25.690 --> 00:23:28.060\nfortunate enough to have\nstarted a few years back.\n\n484\n00:23:28.060 --> 00:23:30.748\nAnd at that point,\nCloud infrastructure was very mature,\n\n485\n00:23:30.748 --> 00:23:34.730\nand so it was easy for us to say we don't\nwant any servers here in the building.\n\n486\n00:23:34.730 --> 00:23:36.500\nAll of our infrastructure is going\nto be out there in the Cloud.\n\n487\n00:23:36.500 --> 00:23:38.216\nWe'll have our recording\nstudios here in the building.\n\n488\n00:23:38.216 --> 00:23:42.523\nWe'll film, we'll send it out via Internet\nlink, but all of our streaming servers,\n\n489\n00:23:42.523 --> 00:23:45.473\nour website, our email,\nall that stuff is up in the cloud.\n\n490\n00:23:45.473 --> 00:23:49.110\nSo this whole building could get\ndestroyed and the website keeps running.\n\n491\n00:23:49.110 --> 00:23:51.130\nYou guys are able to access our content.\n\n492\n00:23:51.130 --> 00:23:53.209\nWe can't create new content\ncuz our building's destroyed.\n\n493\n00:23:53.209 --> 00:23:56.474\nBut we can always build new studios\nsomewhere else assuming we survive.\n\n494\n00:23:56.474 --> 00:23:59.933\nSo, [LAUGH] There's always that-\n&gt;&gt; That's a very important distinction.\n\n495\n00:23:59.933 --> 00:24:01.845\nThat is a very important distinction.\n\n496\n00:24:01.845 --> 00:24:03.665\nWebsite's up but they're all gone.\n\n497\n00:24:03.665 --> 00:24:04.990\n&gt;&gt; Yeah, all the employees are gone.\n\n498\n00:24:04.990 --> 00:24:09.780\nYeah, the cloud does not protect you\nphysically but the service it does.\n\n499\n00:24:09.780 --> 00:24:13.890\nSo, there's that solution which is\ngreat if you're a new company but\n\n500\n00:24:13.890 --> 00:24:16.050\nif you're already an existing company,\nyou've got data centers,\n\n501\n00:24:16.050 --> 00:24:18.620\nmaybe more than one data center,\ncuz you have disaster recovery.\n\n502\n00:24:18.620 --> 00:24:20.330\nMaybe you've got that sensitive data.\n\n503\n00:24:20.330 --> 00:24:21.870\nYou don't want to just try and\nflip a switch and\n\n504\n00:24:21.870 --> 00:24:23.710\njump into the cloud, it's too much.\n\n505\n00:24:23.710 --> 00:24:26.650\nSo instead you're going to do\na hybrid deployment model, and\n\n506\n00:24:26.650 --> 00:24:29.780\na hybrid deployment model is where you\nhave some resources on-premises, and\n\n507\n00:24:29.780 --> 00:24:32.900\nsome resources up in the cloud.\n\n508\n00:24:32.900 --> 00:24:35.160\nSo I might say you know what,\nI'm gonna take my web front ends and\n\n509\n00:24:35.160 --> 00:24:37.550\nI'm going to move them up into the cloud,\nbut\n\n510\n00:24:37.550 --> 00:24:40.450\nI'm gonna keep the database with\nthe data right here on-premises.\n\n511\n00:24:40.450 --> 00:24:43.860\nSo your users are hitting these\nweb front ends in the cloud and\n\n512\n00:24:43.860 --> 00:24:47.170\nthen the web front end's reaching down to\nyou on-premises and accessing your data.\n\n513\n00:24:47.170 --> 00:24:49.320\nNow how that happens is\na few different ways.\n\n514\n00:24:49.320 --> 00:24:54.930\nYou can do a VPN tunnel between you and\nan Amazon VPC to connect up to the cloud.\n\n515\n00:24:54.930 --> 00:24:58.790\nYou can actually get a dedicated\nconnection in between your data center and\n\n516\n00:24:58.790 --> 00:25:00.160\none of the Amazon data centers.\n\n517\n00:25:00.160 --> 00:25:01.730\nThey've offered that service now.\n\n518\n00:25:01.730 --> 00:25:03.480\nSo there's that option.\n\n519\n00:25:03.480 --> 00:25:05.930\nWe can extend our on-premises equipment\n\n520\n00:25:05.930 --> 00:25:08.320\ninto the cloud by connecting\nthe two together.\n\n521\n00:25:08.320 --> 00:25:09.610\nAnd you can do it the other way around,\ntoo.\n\n522\n00:25:09.610 --> 00:25:14.400\nYou can can connect cloud infrastructure\ninto your on-premises site.\n\n523\n00:25:14.400 --> 00:25:17.960\nSo for example, we can use\nAmazon's Cloud Directory Service.\n\n524\n00:25:17.960 --> 00:25:21.000\nThey also have things like the Storage\nGateway, the Storage Gateway is really\n\n525\n00:25:21.000 --> 00:25:24.860\nawesome, you have this virtual appliance\nthat runs locally in your on-premises\n\n526\n00:25:24.860 --> 00:25:27.930\ndata center that just looks\nlike network attached storage.\n\n527\n00:25:27.930 --> 00:25:30.810\nBut when you write to it, its actually\ntaking it, storing it locally, but\n\n528\n00:25:30.810 --> 00:25:32.500\nalso shipping it up into S3 or\n\n529\n00:25:32.500 --> 00:25:35.540\nanother service where you can\nstore it up there in the cloud.\n\n530\n00:25:35.540 --> 00:25:38.120\nSo you can have your data\nstored in more than one place.\n\n531\n00:25:38.120 --> 00:25:40.440\nIt's great for backups and\nthings of that nature.\n\n532\n00:25:40.440 --> 00:25:43.640\nSo now we're connecting\nour on-premises and\n\n533\n00:25:43.640 --> 00:25:48.820\nour cloud solution in being both at\nthe same time, that's a hybrid model.\n\n534\n00:25:48.820 --> 00:25:52.230\nAnd hybrid models can be permanent or\nthey can be temporary, right?\n\n535\n00:25:52.230 --> 00:25:55.620\nMaybe is my migration and\nslowly going to move into the cloud.\n\n536\n00:25:55.620 --> 00:25:59.800\nso maybe I say all right,\neffective today, no new severs,\n\n537\n00:25:59.800 --> 00:26:02.640\nnow I sound like a politician,\nno read my lips,\n\n538\n00:26:02.640 --> 00:26:07.190\nno new servers in my infrastructure\non-premises at least.\n\n539\n00:26:07.190 --> 00:26:09.700\nAnd so the next time\na server's warranty runs out,\n\n540\n00:26:09.700 --> 00:26:11.710\nif they're on three year warranties or\nfive year warranties.\n\n541\n00:26:11.710 --> 00:26:14.140\nThe next time one runs up we\nsay all right you know what?\n\n542\n00:26:14.140 --> 00:26:18.060\nInstead of replacing that on premises\nlet's replace that with a cloud server.\n\n543\n00:26:18.060 --> 00:26:18.720\nAnd then we do that and\n\n544\n00:26:18.720 --> 00:26:23.050\nover the next three years as each\nserver runs out of its warranty.\n\n545\n00:26:23.050 --> 00:26:27.350\nWe replace it with a cloud server\ninstead of replacing it with\n\n546\n00:26:27.350 --> 00:26:28.860\na new physical server.\n\n547\n00:26:28.860 --> 00:26:31.250\nAnd maybe it's not a cloud,\nI keep saying cloud server, right,\n\n548\n00:26:31.250 --> 00:26:32.940\nwhich would be like an EC2 instance.\n\n549\n00:26:32.940 --> 00:26:35.290\nMaybe I'm replacing it\nwith a cloud service.\n\n550\n00:26:35.290 --> 00:26:40.231\nSo I might have a DNS server on-premises,\nbut when it reaches the end of its life\n\n551\n00:26:40.231 --> 00:26:43.890\ncycle, I'll replace it with\nAmazon Route 53, a cloud service.\n\n552\n00:26:43.890 --> 00:26:47.000\nSo now I don't even pay\nattention to a server at all.\n\n553\n00:26:47.000 --> 00:26:48.820\nThere's no operating\nsystem I pay attention to.\n\n554\n00:26:48.820 --> 00:26:49.920\nNo hardware I pay attention to.\n\n555\n00:26:49.920 --> 00:26:52.540\nThere's just the Route 53 DNS Service.\n\n556\n00:26:52.540 --> 00:26:56.060\nAnd I create my zone records and\nI track everything there.\n\n557\n00:26:56.060 --> 00:26:59.268\nNow my management and my maintenance\nbecomes so much easier and so\n\n558\n00:26:59.268 --> 00:27:02.549\nmuch less expensive than even\nmaintaining that physical server.\n\n559\n00:27:02.549 --> 00:27:03.872\nYou'll see the same thing with databases.\n\n560\n00:27:03.872 --> 00:27:06.688\nYou'll see it with other\nfunctionality like that,\n\n561\n00:27:06.688 --> 00:27:09.890\nwhere we don't even have to\nmaintain the server any more.\n\n562\n00:27:09.890 --> 00:27:14.080\nWe can start focusing on our business,\nwhat makes our business unique.\n\n563\n00:27:14.080 --> 00:27:16.800\nIf you're a company that\ncreates video like us,\n\n564\n00:27:16.800 --> 00:27:20.540\nyou can focus on creating video instead\nof having to manage your servers.\n\n565\n00:27:20.540 --> 00:27:21.660\nIf your company makes cars,\n\n566\n00:27:21.660 --> 00:27:25.800\nyou can focus on cars instead of focusing\non how to manage your data center.\n\n567\n00:27:25.800 --> 00:27:27.380\nAnd you let that shift up into the cloud.\n\n568\n00:27:27.380 --> 00:27:30.970\nSo that would be using the hybrid model\ntemporarily, slowly moving things into\n\n569\n00:27:30.970 --> 00:27:33.930\nthe cloud until all of a sudden\nthere's nothing left locally.\n\n570\n00:27:33.930 --> 00:27:35.240\nAnd now you're all in.\n\n571\n00:27:36.260 --> 00:27:38.120\nOr the hybrid model could be permanent.\n\n572\n00:27:38.120 --> 00:27:41.630\nI might have some data that just has\nto stay on-premises and so now I'm in\n\n573\n00:27:41.630 --> 00:27:46.470\na permanent hybrid model, and there's\nmany, many organizations that do that.\n\n574\n00:27:46.470 --> 00:27:48.940\n&gt;&gt; Between those two models,\nthe hybrid or the all in,\n\n575\n00:27:48.940 --> 00:27:53.820\nif we're talking, is there typically, when\npeople go hybrid, do they stay hybrid, or\n\n576\n00:27:53.820 --> 00:27:55.260\nis there a slow transition?\n\n577\n00:27:55.260 --> 00:27:57.820\nOr is it kind of just equal amounts?\n\n578\n00:27:57.820 --> 00:28:02.220\n&gt;&gt; At this stage, I think a lot of\npeople that are in the hybrid model\n\n579\n00:28:02.220 --> 00:28:04.120\nare kind of planning on staying there.\n\n580\n00:28:04.120 --> 00:28:06.030\nAnd there's different reasons for that.\n\n581\n00:28:06.030 --> 00:28:09.970\nA lot of companies are just really\nhesitant to give up their control right?\n\n582\n00:28:09.970 --> 00:28:13.200\nAnd not just the companies but\nthe IT personnel right?\n\n583\n00:28:13.200 --> 00:28:14.280\nIt's a lot of fear for this.\n\n584\n00:28:14.280 --> 00:28:17.450\nYou'll hear where people say I'm going\nto move everything up in the cloud.\n\n585\n00:28:17.450 --> 00:28:18.250\nI'm gonna be out of a job.\n\n586\n00:28:18.250 --> 00:28:19.630\nWhy would I do that?\n\n587\n00:28:19.630 --> 00:28:20.780\nWell you're not going to be out of a job.\n\n588\n00:28:20.780 --> 00:28:25.110\nYou just need to switch from managing\nservers to managing cloud services right?\n\n589\n00:28:25.110 --> 00:28:27.420\nYou need to update your skills.\n\n590\n00:28:27.420 --> 00:28:30.930\nTraining like you guys are watching right\nnow [LAUGH] and update your skills.\n\n591\n00:28:30.930 --> 00:28:35.270\nAnd there's still a very important role\nthat we all serve as system admins.\n\n592\n00:28:35.270 --> 00:28:36.940\nIt's just changing what we're managing.\n\n593\n00:28:36.940 --> 00:28:40.540\nThis happens every ten to 15 years and\nyou make that choice.\n\n594\n00:28:40.540 --> 00:28:44.290\nYou can either adapt to the new skills and\ncontinue on or\n\n595\n00:28:44.290 --> 00:28:48.150\nyou can not adapt, and yeah, you'll\nbe out of a job, that's how it works.\n\n596\n00:28:48.150 --> 00:28:52.220\nThere's many companies that\nare hesitant to go all in.\n\n597\n00:28:52.220 --> 00:28:55.790\nThere's many IT workers that\nare hesitant to go all in and\n\n598\n00:28:55.790 --> 00:28:57.390\na lot of people are just waiting for\n\n599\n00:28:57.390 --> 00:29:00.480\ncloud solutions to reach a maturity\nlevel that they feel comfortable with.\n\n600\n00:29:00.480 --> 00:29:04.220\nWell, the reality is we're well\nbeyond that maturity level.\n\n601\n00:29:04.220 --> 00:29:07.340\nWhen you look at services like\nNetflix where they stream,\n\n602\n00:29:07.340 --> 00:29:10.810\nI saw a paper a few months ago where\nthey were saying it's like over 20%\n\n603\n00:29:10.810 --> 00:29:12.920\nof the Internet's traffic was Netflix.\n\n604\n00:29:12.920 --> 00:29:14.800\nWhich is amazing.\n\n605\n00:29:14.800 --> 00:29:17.090\nAnd they're entirely cloud based.\n\n606\n00:29:17.090 --> 00:29:20.710\nSo if a company is able to pull that off\nI think pretty much everything else is\n\n607\n00:29:20.710 --> 00:29:21.970\npossible at this point.\n\n608\n00:29:21.970 --> 00:29:24.780\nSo we're gonna see more companies\nmoving into that cloud model.\n\n609\n00:29:24.780 --> 00:29:26.450\nThere is risk, right.\n\n610\n00:29:26.450 --> 00:29:30.450\nYou're putting all your chips in\none basket if you send them with\n\n611\n00:29:30.450 --> 00:29:32.630\nall my service into Amazon Web Services.\n\n612\n00:29:32.630 --> 00:29:33.740\nEverything's in AWS.\n\n613\n00:29:33.740 --> 00:29:38.183\nSo many people are starting to do multi\ncloud appointments where they have some\n\n614\n00:29:38.183 --> 00:29:42.330\nsystems in AWS and some systems\nsomething like Microsoft Azure.\n\n615\n00:29:42.330 --> 00:29:46.630\nAnd by doing that now we even get\nvendor redundancy or reliability.\n\n616\n00:29:46.630 --> 00:29:49.530\nThe reality is Amazon's\nnot going anywhere,\n\n617\n00:29:49.530 --> 00:29:53.110\nthey are a multi billion\ndollar international company.\n\n618\n00:29:53.110 --> 00:29:55.700\nI mean it's a pretty stable environment.\n\n619\n00:29:55.700 --> 00:29:57.342\nWe don't normally have\nto worry about that but\n\n620\n00:29:57.342 --> 00:30:00.690\nthere's options that are available if\nthat is something to worried about.\n\n621\n00:30:00.690 --> 00:30:03.920\n&gt;&gt; Well Don we have definitely covered\nkind of the impetus for why we do or\n\n622\n00:30:03.920 --> 00:30:06.250\ndon't want to use cloud services.\n\n623\n00:30:06.250 --> 00:30:09.800\nI know we still have some other things to\ncover but unfortunately we're out of time.\n\n624\n00:30:09.800 --> 00:30:13.720\nIt looks like we're gonna come up\nto our wonderful part twos here.\n\n625\n00:30:13.720 --> 00:30:16.690\nSigning off for ITProTV,\nI'm your host Justin Dennison.\n\n626\n00:30:16.690 --> 00:30:17.640\n&gt;&gt; And I'm Don Pezet.\n\n627\n00:30:17.640 --> 00:30:18.271\n&gt;&gt; See you next time.\n\n628\n00:30:18.271 --> 00:30:24.747\n[MUSIC]\n\n629\n00:30:24.747 --> 00:30:27.572\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "206254572"
        },
        {
          "description": "In this episode, Justin and Don take a look at the global infrastructure that is provide by Amazon and discuss the ramifications of that infrastructure such as security and compliance concerns. They wrap up with a quick overview of the services that are available with a tour through the Amazon console.",
          "length": "1871",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-2-introduction_to_aws_pt2-022817.00_30_55_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-2-introduction_to_aws_pt2-022817.00_30_55_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-1-1-2-introduction_to_aws_pt2-022817.00_30_55_16.Still001-sm.jpg",
          "title": "Introduction to AWS Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.190\nWelcome to ITProTV.\n\n2\n00:00:01.190 --> 00:00:02.840\nI'm your host Don Pezet.\n\n3\n00:00:05.715 --> 00:00:10.604\n[CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:10.604 --> 00:00:16.190\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n5\n00:00:16.190 --> 00:00:17.630\nI'm your host Justin Dennison.\n\n6\n00:00:17.630 --> 00:00:18.580\nAnd in today's episode,\n\n7\n00:00:18.580 --> 00:00:22.860\nwe're gonna continue looking at\nour introduction to AWS in hopes\n\n8\n00:00:22.860 --> 00:00:27.260\nof working toward that certified solutions\narchitect associate level certification.\n\n9\n00:00:27.260 --> 00:00:29.700\nAnd here to help us along in that\njourney is Mister Don Pozet.\n\n10\n00:00:29.700 --> 00:00:31.680\n&gt;&gt; Justin thanks for\nhaving me back on the show,\n\n11\n00:00:31.680 --> 00:00:35.710\nand I am excited to dive right\nback into the world of AWS and\n\n12\n00:00:35.710 --> 00:00:38.040\nthe huge mouthful of\na certification this happens to be.\n\n13\n00:00:38.040 --> 00:00:41.440\nIn the last episode, we had a chance to\ntalk a little bit about cloud computing,\n\n14\n00:00:41.440 --> 00:00:44.210\nand I had a few more things I wanted\nto discuss but ran out of time.\n\n15\n00:00:44.210 --> 00:00:46.650\nSo I'm glad we're back for part two.\n\n16\n00:00:46.650 --> 00:00:48.920\n&gt;&gt; Yeah, there's a lot to cloud computing.\n\n17\n00:00:48.920 --> 00:00:52.670\nAnd we talked a little bit in the first\nepisode about cloud computing, what it is,\n\n18\n00:00:52.670 --> 00:00:53.754\nwhat it provides us.\n\n19\n00:00:53.754 --> 00:00:58.526\nBut can you tell us more about this\nglobal aspect of cloud computing,\n\n20\n00:00:58.526 --> 00:00:59.937\nthat seems very intriguing to me.\n\n21\n00:00:59.937 --> 00:01:03.820\n&gt;&gt; All right, so one of the things I have\nmention in part one was economies of scale\n\n22\n00:01:03.820 --> 00:01:07.450\nthat Amazon, they do a lot of\nbusiness all over the world,\n\n23\n00:01:07.450 --> 00:01:11.040\nthey need a lot of infrastructure and\nthey buy a lot of infrastructure.\n\n24\n00:01:11.040 --> 00:01:13.840\n&gt;&gt; But they also have hundreds\nof thousands of other\n\n25\n00:01:13.840 --> 00:01:16.690\nAWS clients who are also\ninvesting in that infrastructure.\n\n26\n00:01:16.690 --> 00:01:19.880\nAnd all of that money goes to creating\nan infrastructure that's way beyond\n\n27\n00:01:19.880 --> 00:01:21.420\nwhat we could afford ourselves.\n\n28\n00:01:21.420 --> 00:01:24.930\nWell, let's take a look at what that\ninfrastructure actually looks like.\n\n29\n00:01:24.930 --> 00:01:28.040\nI've got the AWS Global Infrastructure\npage pulled up here.\n\n30\n00:01:28.040 --> 00:01:31.350\nAmazon publishes this information to give\nyou guys kind of a glimpse into what their\n\n31\n00:01:31.350 --> 00:01:33.600\nphysical environment looks like.\n\n32\n00:01:33.600 --> 00:01:38.740\nAnd with AWS they don't just\nhave one data center, they have\n\n33\n00:01:38.740 --> 00:01:43.710\nmany data centers spread across the globe\nand so a lot of us have a tendency\n\n34\n00:01:43.710 --> 00:01:47.790\nto think of Amazon as a US company, so\nthey're gonna have a US data center right?\n\n35\n00:01:47.790 --> 00:01:52.080\nWell they do, they actually have\nfive different ones here in the US,\n\n36\n00:01:52.080 --> 00:01:53.190\none in Canada.\n\n37\n00:01:53.190 --> 00:01:55.140\nSo they kind of spread out here.\n\n38\n00:01:55.140 --> 00:01:59.650\nBut they have ones that are all over\nthe world also, we've got Europe,\n\n39\n00:01:59.650 --> 00:02:04.280\nwe've got Eastern Asia, Southern Asia,\nwe've got Australia, even South America.\n\n40\n00:02:04.280 --> 00:02:07.090\nSo many of them that are deployed and\nthese green circles here,\n\n41\n00:02:07.090 --> 00:02:08.460\nthese are ones that are coming soon.\n\n42\n00:02:08.460 --> 00:02:10.240\nThere's one in France and\n\n43\n00:02:10.240 --> 00:02:13.840\nI forget exactly which Asian\nnation the other one is a part of.\n\n44\n00:02:13.840 --> 00:02:17.930\nBut these are all data centers that\nare either out there already or\n\n45\n00:02:17.930 --> 00:02:20.090\ncoming soon,\nin the case of the green ones.\n\n46\n00:02:20.090 --> 00:02:24.480\nNow, when we look at these,\nwhat does that number mean on each one?\n\n47\n00:02:24.480 --> 00:02:28.090\nWell what it's actually saying\nhere is that in some places,\n\n48\n00:02:28.090 --> 00:02:29.935\nlike in US West Oregon.\n\n49\n00:02:29.935 --> 00:02:34.894\nOr in US East Virginia there's 5\navailability zones inside of that\n\n50\n00:02:34.894 --> 00:02:38.770\ndata center, so\nwhat am I talking about here?\n\n51\n00:02:38.770 --> 00:02:41.910\nWell a data center is typically\na physical location, right?\n\n52\n00:02:41.910 --> 00:02:45.550\nSo this one is in northern Virginia\nhere in the United States and\n\n53\n00:02:45.550 --> 00:02:49.170\nthen we've got like Ireland and a few of\nthe other ones that are pretty popular.\n\n54\n00:02:49.170 --> 00:02:51.090\nActually I don't have to guess.\n\n55\n00:02:51.090 --> 00:02:52.065\nThey're all named right here.\n\n56\n00:02:52.065 --> 00:02:54.220\n[LAUGH] That makes life a little easier.\n\n57\n00:02:54.220 --> 00:02:59.790\nBut if you look, US West Oregon that I\nmentioned, or US East, Northern Virginia.\n\n58\n00:02:59.790 --> 00:03:02.420\nWhat I'm looking at there\nis a physical location.\n\n59\n00:03:02.420 --> 00:03:06.940\nAnd at that physical location there are\nthen what are called availability zones,\n\n60\n00:03:06.940 --> 00:03:08.220\nor AZs.\n\n61\n00:03:08.220 --> 00:03:13.980\nAnd what an AZ is, It's actually\nan independent data center, so\n\n62\n00:03:13.980 --> 00:03:19.680\nwhat this really means it's that in\nOregon there are three data centers and\n\n63\n00:03:19.680 --> 00:03:23.260\nin Northern Virginia there's\n5 data centers, right?\n\n64\n00:03:23.260 --> 00:03:27.970\nBut no really, it's one physical location,\nbut inside that physical location they\n\n65\n00:03:27.970 --> 00:03:33.230\nare divided up in the complete\nautonomous independent units.\n\n66\n00:03:33.230 --> 00:03:36.480\nAnd there just happen to be 5 of\nthose independent units in Virginia.\n\n67\n00:03:36.480 --> 00:03:40.080\nThat means they can have\nan entire data center fail,\n\n68\n00:03:40.080 --> 00:03:43.810\nand then there's still be four\nothers right there, right.\n\n69\n00:03:43.810 --> 00:03:46.740\nOr we got two or three of them fail,\nthere's still one or two left.\n\n70\n00:03:46.740 --> 00:03:49.930\nBecause there's times where you\ndeal with issues like routing.\n\n71\n00:03:49.930 --> 00:03:54.120\nThey can take out huge parts of your\nenvironment that's happened before.\n\n72\n00:03:54.120 --> 00:03:56.820\nWhen we talk about a data center,\nwell what does a data center need?\n\n73\n00:03:56.820 --> 00:04:00.280\nWell, you've got routers,\nand switches, firewalls,\n\n74\n00:04:00.280 --> 00:04:02.130\nyou've got network gear like that.\n\n75\n00:04:02.130 --> 00:04:06.254\nYou've got power, redundant power,\nUPSs, generators,\n\n76\n00:04:06.254 --> 00:04:11.120\nyour connections to the power grid,\nyour connections to ISPs.\n\n77\n00:04:11.120 --> 00:04:12.780\nA lot of the data centers have five or\n\n78\n00:04:12.780 --> 00:04:15.960\nmore different ISPs that\nare providing connectivity in them.\n\n79\n00:04:15.960 --> 00:04:19.070\nYou've got employees,\nyour network operations centers.\n\n80\n00:04:19.070 --> 00:04:23.540\nThe people are monitoring those servers\nand the infrastructure is inside of them.\n\n81\n00:04:23.540 --> 00:04:26.040\nYou've got the employees that\nare monitoring the facilities, right?\n\n82\n00:04:26.040 --> 00:04:27.400\nAll that staff.\n\n83\n00:04:27.400 --> 00:04:31.070\nWell, each availability zone\nis managed independently.\n\n84\n00:04:31.070 --> 00:04:34.020\nSo, it's a completely\nautonomous data center.\n\n85\n00:04:34.020 --> 00:04:35.920\nIf an employee were to make a mistake and\n\n86\n00:04:35.920 --> 00:04:41.030\nbring down one AZ, the others would\nstill be up, and it would be fine.\n\n87\n00:04:41.030 --> 00:04:44.190\nAnd so when we design our services,\nand when we design our solutions,\n\n88\n00:04:44.190 --> 00:04:48.730\nat a minimum we should be doing multi-AZ\nsolutions, where our solutions are spread\n\n89\n00:04:48.730 --> 00:04:52.550\nacross more than one autonomous,\nI mean, availability zone.\n\n90\n00:04:52.550 --> 00:04:54.150\nBut even better,\n\n91\n00:04:54.150 --> 00:04:58.130\nwould be to spread our data across\nmore than one data center, right?\n\n92\n00:04:58.130 --> 00:05:02.200\nIf I had a web server farm and\nI was gonna do ten servers.\n\n93\n00:05:02.200 --> 00:05:07.590\nI could put five servers in one AZ and\nfive servers in another AZ, right?\n\n94\n00:05:07.590 --> 00:05:11.800\nSo now I got ten up and going between two\ndifferent AZs right there in the same\n\n95\n00:05:11.800 --> 00:05:15.470\nphysical location,\nmaybe in Northern Virginia, right?\n\n96\n00:05:15.470 --> 00:05:18.420\nWell if one of those AZs were to fail,\n\n97\n00:05:18.420 --> 00:05:20.320\nI'd still have five servers\nthat are up and going right?\n\n98\n00:05:20.320 --> 00:05:22.478\nAnd they're gonna be up and\nrunning, I could always go and\n\n99\n00:05:22.478 --> 00:05:24.250\nspin more servers up to\nget that one up to snuff.\n\n100\n00:05:24.250 --> 00:05:27.160\nBut I'm up and I'm going and\nI'm happy and healthy, right?\n\n101\n00:05:27.160 --> 00:05:30.060\nAnd replicating data between\nthose AZs could be done in a very\n\n102\n00:05:30.060 --> 00:05:32.499\nhigh speed because they're\nphysically close to each other.\n\n103\n00:05:33.660 --> 00:05:37.440\nBut what if I have a lot of users\nthat are on the West Coast?\n\n104\n00:05:37.440 --> 00:05:40.440\nI have a lot of users in California,\nOregon, Washington,\n\n105\n00:05:40.440 --> 00:05:44.670\nand they're having to come\nall the way over to Virginia.\n\n106\n00:05:44.670 --> 00:05:46.890\nWhat if they're in China or Malaysia?\n\n107\n00:05:46.890 --> 00:05:49.670\nAnd they're having to come all\nthe way over to Northern Virginia.\n\n108\n00:05:49.670 --> 00:05:52.810\nThat's a long jump to get over there,\nright.\n\n109\n00:05:52.810 --> 00:05:55.860\nI think the exact opposite side of\nthe world from Northern Virginia would be\n\n110\n00:05:55.860 --> 00:05:56.370\nAustralia.\n\n111\n00:05:56.370 --> 00:05:59.510\nSo if you're in Australia, you don't wanna\ngo all the way back to Northern Virginia.\n\n112\n00:05:59.510 --> 00:06:02.730\nSo instead,\nI could take those ten web servers.\n\n113\n00:06:02.730 --> 00:06:06.430\nAnd maybe I'd put a couple in\nNorthern Virginia, a couple in Oregon,\n\n114\n00:06:06.430 --> 00:06:10.900\na couple in Ireland, a couple in China,\na couple in Australia.\n\n115\n00:06:10.900 --> 00:06:12.940\nAnd spread them out like that.\n\n116\n00:06:12.940 --> 00:06:15.890\nAnd I can get it where users\nare actually going to the servers that\n\n117\n00:06:15.890 --> 00:06:17.970\nare close to them.\n\n118\n00:06:17.970 --> 00:06:21.740\nAnd I keep saying servers, but\nI should really be saying services\n\n119\n00:06:21.740 --> 00:06:25.450\nbecause we can do this throughout\nmost of Amazon services.\n\n120\n00:06:25.450 --> 00:06:27.900\nThat, yeah with EC2 instances it's easy.\n\n121\n00:06:27.900 --> 00:06:30.140\nWe can deploy the servers right\nthere at those locations.\n\n122\n00:06:30.140 --> 00:06:36.620\nBut with Route 53, we can do GeoIPs, where\nwe route people based on their geography.\n\n123\n00:06:36.620 --> 00:06:38.360\nWe can use CloudFront.\n\n124\n00:06:38.360 --> 00:06:40.670\nSo for our video and\nfile distribution, to get it, again,\n\n125\n00:06:40.670 --> 00:06:42.710\nto servers that\nare physically close to them.\n\n126\n00:06:42.710 --> 00:06:44.120\nYou can do it with S3.\n\n127\n00:06:44.120 --> 00:06:46.420\nAll of the Amazon services,\nI shouldn't say all.\n\n128\n00:06:46.420 --> 00:06:51.270\nMost of the Amazon services fully support\nhaving that global reach to get to\n\n129\n00:06:51.270 --> 00:06:56.460\nthose users, and all that is coming from\nthis global infrastructure right here.\n\n130\n00:06:56.460 --> 00:07:00.080\nThis wide spread network\nthat spans the planet, and\n\n131\n00:07:00.080 --> 00:07:05.850\nif anyone of us were to try to build this\non our own, it's just such a challenge,\n\n132\n00:07:05.850 --> 00:07:09.730\nan infrastructure cost, and logistics\nnightmare to build something like this.\n\n133\n00:07:09.730 --> 00:07:15.370\nIt's nice to see that's already there,\nif you can see this the new regions.\n\n134\n00:07:15.370 --> 00:07:18.300\nParis and I’m glad I didn’t try to\nguess the other one because I’m\n\n135\n00:07:18.300 --> 00:07:21.140\nnot sure how to say that Nesa,\nI don’t know, something.\n\n136\n00:07:21.140 --> 00:07:26.500\nBut there constantly expanding this and\ngrowing this so\n\n137\n00:07:26.500 --> 00:07:30.740\nyou can have viewer, data closer to your\ncustomers, or data closer to you, right.\n\n138\n00:07:30.740 --> 00:07:33.290\nIf you’re a business that’s in Colombia,\n\n139\n00:07:33.290 --> 00:07:35.900\nyou don't want to have to come\nall the way up to North America.\n\n140\n00:07:35.900 --> 00:07:37.690\nYou could just jump right down and\n\n141\n00:07:37.690 --> 00:07:40.460\naccess the data center down in\nSouth America where you are, right?\n\n142\n00:07:40.460 --> 00:07:42.280\nAnd you're gonna get a better connection.\n\n143\n00:07:42.280 --> 00:07:44.200\n&gt;&gt; So, Don, real quick question?\n\n144\n00:07:44.200 --> 00:07:47.977\nI know we talked about being close to\ncustomers, increasing the speed at which\n\n145\n00:07:47.977 --> 00:07:51.138\nyour content is delivered, or\nthe services are made available.\n\n146\n00:07:51.138 --> 00:07:54.055\nBut does spreading these\nservices throughout the globe,\n\n147\n00:07:54.055 --> 00:07:57.568\ndoes that offer resiliency,\nlike if something horrible goes wrong,\n\n148\n00:07:57.568 --> 00:08:00.019\nlike the employee, oops,\nI hit the red button.\n\n149\n00:08:00.019 --> 00:08:03.245\nThat's a bad day for that employee,\nbut does that offer resiliency for\n\n150\n00:08:03.245 --> 00:08:04.283\nour infrastructure?\n\n151\n00:08:04.283 --> 00:08:05.980\n&gt;&gt; It does.\n\n152\n00:08:05.980 --> 00:08:10.410\nProblems happen, and sometimes those\nproblems are your problems, sometimes it's\n\n153\n00:08:10.410 --> 00:08:14.760\nAmazon's problem, sometimes it's\nsomebody else, completely independent.\n\n154\n00:08:14.760 --> 00:08:18.630\nSo, for example, I've got the Internet\nhealth report pulled up here from\n\n155\n00:08:18.630 --> 00:08:19.980\nDynatrace, and what they do is,\n\n156\n00:08:19.980 --> 00:08:23.810\nthey show the connections in between\nsome of the Internet backbone providers.\n\n157\n00:08:23.810 --> 00:08:26.710\nNow, here I'm talking about\nthe Internet backbone.\n\n158\n00:08:26.710 --> 00:08:31.500\nAmazon, in their data centers, in each of\ntheir regions, and the availability zones\n\n159\n00:08:31.500 --> 00:08:35.188\ninside of those regions,\nthey are connected to more than one ISP.\n\n160\n00:08:35.188 --> 00:08:39.813\nSo, they'll usually be connected to\nmore than one of these ISPs, but you and\n\n161\n00:08:39.813 --> 00:08:44.920\nyour costumers, definitely,\nare going to be connected to just one.\n\n162\n00:08:44.920 --> 00:08:49.770\nIf I'm at home, I have a cable modem and\nI get a connection through Cox Cable and\n\n163\n00:08:49.770 --> 00:08:53.490\nCox Cable gets their connection through,\nI believe, Cogent, so\n\n164\n00:08:53.490 --> 00:08:58.810\nif I'm on a Cogent line, then I'm reaching\nout to Amazon to access services.\n\n165\n00:08:58.810 --> 00:09:00.504\nAnd Amazon might be on\nmore than one provider.\n\n166\n00:09:00.504 --> 00:09:04.198\nBut If I'm accessing Amazon on through,\nlet's say, level three,\n\n167\n00:09:04.198 --> 00:09:06.938\nthen what's gonna happen is,\nI'm gonna cross and\n\n168\n00:09:06.938 --> 00:09:10.013\nyou can see I've got some\nissues going on that right now.\n\n169\n00:09:10.013 --> 00:09:14.490\nAnd showing 18.7% packet loss,\nwhich ridiculously high.\n\n170\n00:09:14.490 --> 00:09:18.010\nEven worse between CenturyLink and\nlevel three at 25% packet loss.\n\n171\n00:09:18.010 --> 00:09:21.130\nI can't imagine that number is true,\nthis might be a little overstated here.\n\n172\n00:09:21.130 --> 00:09:24.360\nBut we're having some\nissues on backbone links.\n\n173\n00:09:24.360 --> 00:09:26.650\nWell, that is going to be an issue.\n\n174\n00:09:26.650 --> 00:09:30.310\nIf I've only got one path to get to\nthat service, then now I'm out of luck.\n\n175\n00:09:31.320 --> 00:09:36.832\nUnless, I've managed to deploy my\nsolution into more than one region and\n\n176\n00:09:36.832 --> 00:09:40.510\nmade it where we can get to it\nthrough more than one connection.\n\n177\n00:09:40.510 --> 00:09:43.995\nSo if I now fail to connect at one data\ncenter I might have a load balancer\n\n178\n00:09:43.995 --> 00:09:45.090\nthat just moves me to another one.\n\n179\n00:09:45.090 --> 00:09:48.176\nAnd we're able to kind of flip back and\nforth between these different areas.\n\n180\n00:09:48.176 --> 00:09:52.562\nWe can start to build that\nredundancy into our solution, and\n\n181\n00:09:52.562 --> 00:09:57.070\nnow we lose that part where we\nget kind of tied to one area.\n\n182\n00:09:57.070 --> 00:10:01.740\nNow, each Amazon region, each availability\nzone, is connected to more than 1 ISP.\n\n183\n00:10:01.740 --> 00:10:04.482\nSo we've got some redundancy there\nthat's gonna take care of them.\n\n184\n00:10:04.482 --> 00:10:06.796\nOn the customer side, though,\nis where we have that problem,\n\n185\n00:10:06.796 --> 00:10:09.943\nthe customer isn't necessarily able to\njust flip which backbone they're passing,\n\n186\n00:10:09.943 --> 00:10:12.260\nthey're typically gonna\nbe passing through one.\n\n187\n00:10:12.260 --> 00:10:14.530\nSo by having us connected\nto more than one,\n\n188\n00:10:14.530 --> 00:10:16.689\nhopefully we're connected to\nthe same one the customer is.\n\n189\n00:10:17.850 --> 00:10:21.170\nThese that I'm showing you guys here,\nare just in the United States.\n\n190\n00:10:21.170 --> 00:10:23.460\nBy having us spread into other countries,\n\n191\n00:10:23.460 --> 00:10:26.480\nwe can make sure that\nwe're on their backbones.\n\n192\n00:10:26.480 --> 00:10:28.090\nThe ones that they're able to see too.\n\n193\n00:10:28.090 --> 00:10:29.360\nThat's really important,\n\n194\n00:10:29.360 --> 00:10:32.180\ncuz otherwise they need to come all the\nway back here to the United States, and\n\n195\n00:10:32.180 --> 00:10:36.620\nit increases the complexity, it increases\nthe latency and delay of the connection.\n\n196\n00:10:36.620 --> 00:10:39.062\nAnd it just, overall,\nworsens the experience.\n\n197\n00:10:39.062 --> 00:10:42.235\n&gt;&gt; So Don, we've seen that we\ncan increase our resiliency,\n\n198\n00:10:42.235 --> 00:10:46.314\nwe can increase the speed at which we\ndeliver content or whatever it may be,\n\n199\n00:10:46.314 --> 00:10:48.410\naccess to services to our customers.\n\n200\n00:10:48.410 --> 00:10:52.729\nBut in that previous episode, we were\ntalking a little bit about a security and\n\n201\n00:10:52.729 --> 00:10:57.320\nhaving access to data, we gotta make\nsure we maintain security practices.\n\n202\n00:10:57.320 --> 00:11:01.800\nDoes this globalization issue\nhave an impact on security?\n\n203\n00:11:01.800 --> 00:11:05.180\n&gt;&gt; It does, and\nlet's talk about security and compliance,\n\n204\n00:11:05.180 --> 00:11:07.650\nthe two really go hand in hand, so\nI'm gonna group them together here.\n\n205\n00:11:07.650 --> 00:11:08.490\nWe'll start with security.\n\n206\n00:11:09.560 --> 00:11:13.470\nWhen you deploy a network, if you\ndecide to build your own data center,\n\n207\n00:11:13.470 --> 00:11:15.510\nforget the cloud, I'm gonna do it myself.\n\n208\n00:11:15.510 --> 00:11:17.230\nHow do you secure your network?\n\n209\n00:11:17.230 --> 00:11:19.560\nWell, at a minimum you're\ngonna need firewall.\n\n210\n00:11:19.560 --> 00:11:23.330\nYou're gonna need routers and switches\nthat are properly configured and hardened.\n\n211\n00:11:23.330 --> 00:11:25.800\nYou're gonna need servers\nthat are properly hardened.\n\n212\n00:11:25.800 --> 00:11:29.760\nYou're gonna need intrusion detection or\nintrusion prevention devices.\n\n213\n00:11:29.760 --> 00:11:33.130\nYou're gonna need active network scanners,\nmaybe passive network scanners.\n\n214\n00:11:33.130 --> 00:11:36.110\nYou're gonna need to be doing penetration\ntests, there's all these different things\n\n215\n00:11:36.110 --> 00:11:40.320\nthat you need to do to make sure that your\nnetwork is secure and that your data safe.\n\n216\n00:11:40.320 --> 00:11:46.560\nNow, in the AWS cloud solution we\nhave a number of security features.\n\n217\n00:11:46.560 --> 00:11:48.680\nI've got their cloud security\npage pulled up here,\n\n218\n00:11:48.680 --> 00:11:51.420\nwhere it shows some of the different\nthings they make available.\n\n219\n00:11:51.420 --> 00:11:56.960\nSo you have things like\nthe security groups,\n\n220\n00:11:56.960 --> 00:11:59.390\nwhich can effectively\nbe used like firewalls.\n\n221\n00:11:59.390 --> 00:12:01.770\nBut they don't do deep packet inspections.\n\n222\n00:12:01.770 --> 00:12:04.150\nThey don't really get very involved.\n\n223\n00:12:04.150 --> 00:12:07.070\nThey don't do like what next\ngeneration firewalls do,\n\n224\n00:12:07.070 --> 00:12:11.060\nthe whole application layer gateway,\nand all the advanced\n\n225\n00:12:11.060 --> 00:12:15.230\npacket scanning that we can do on\nsome of the newer, fancier firewalls.\n\n226\n00:12:15.230 --> 00:12:18.430\nSo if you're somebody\nwho's using Juniper SSGs,\n\n227\n00:12:18.430 --> 00:12:23.330\nor Cisco ASAs, or even pfSense for\nthat matter, any of\n\n228\n00:12:23.330 --> 00:12:26.390\nthe different firewall solutions that are\nout there, they have some really advanced\n\n229\n00:12:26.390 --> 00:12:31.360\nfunctionality that is not necessarily\navailable in some of the Amazon services.\n\n230\n00:12:31.360 --> 00:12:34.480\nNow, Amazon is constantly\nadding new functionality, so\n\n231\n00:12:34.480 --> 00:12:38.500\nthey're adding new ways to track for\nvulnerability reporting.\n\n232\n00:12:38.500 --> 00:12:41.320\nThey've added new scanners,\nwhere you can scan your systems, look for\n\n233\n00:12:41.320 --> 00:12:42.760\nvulnerabilities right in the cloud,\n\n234\n00:12:42.760 --> 00:12:44.650\nwithout you having to\ndeploy that yourself.\n\n235\n00:12:44.650 --> 00:12:46.170\nBut it still has to be done.\n\n236\n00:12:46.170 --> 00:12:50.380\nSo a lot of the security practices\nthat we do on premises are the same\n\n237\n00:12:50.380 --> 00:12:51.600\nup in the cloud.\n\n238\n00:12:51.600 --> 00:12:55.820\nAnd you're actually seeing where people\nlike Juniper and Cisco, that make physical\n\n239\n00:12:55.820 --> 00:13:00.440\nfirewalls, are making virtual appliances\nnow, Amazon AMIs that you can deploy.\n\n240\n00:13:00.440 --> 00:13:04.930\nSo you can actually deploy a virtual\nCisco ASA and have it up there and\n\n241\n00:13:04.930 --> 00:13:06.080\nfiltering traffic on.\n\n242\n00:13:06.080 --> 00:13:09.210\nSo you can take advantage of all\nthe advanced features that you're used to,\n\n243\n00:13:09.210 --> 00:13:11.350\nyou're just doing it in the cloud now.\n\n244\n00:13:11.350 --> 00:13:14.250\nAnd at first glance you might say well,\n\n245\n00:13:14.250 --> 00:13:16.910\nwhat's the difference if I have to do\nit virtually there versus physically?\n\n246\n00:13:16.910 --> 00:13:18.580\nWell, physical hardware fails.\n\n247\n00:13:18.580 --> 00:13:20.310\nYour virtual hardware doesn't.\n\n248\n00:13:20.310 --> 00:13:23.780\nSo now you don't have hardware to maintain\nand you can run that firewall for\n\n249\n00:13:23.780 --> 00:13:26.430\nyears on end and not have to worry\nabout replacing the hardware.\n\n250\n00:13:26.430 --> 00:13:28.340\nBandwidth scales up very, very easily.\n\n251\n00:13:29.410 --> 00:13:31.330\nSo you get some real\npower by doing that and\n\n252\n00:13:31.330 --> 00:13:34.430\nit does alleviate a lot of what we\nhave to do with physical equipment.\n\n253\n00:13:34.430 --> 00:13:36.270\nNow, that's on the security side, so\n\n254\n00:13:36.270 --> 00:13:39.750\nthings are not that much different\nwhen it comes to security.\n\n255\n00:13:39.750 --> 00:13:42.250\nA lot of what you deal with\nhere is just gonna be the same.\n\n256\n00:13:42.250 --> 00:13:45.300\nWhere things get a little stranger\nthough is on the compliance side.\n\n257\n00:13:46.820 --> 00:13:51.250\nLet's say that you're a company that\nprocesses credit card transactions.\n\n258\n00:13:51.250 --> 00:13:55.850\nWell then you've heard of PCI, the payment\ncard industry, and your data center,\n\n259\n00:13:55.850 --> 00:13:59.130\nall of your servers, everything that's\nhandling that credit card data,\n\n260\n00:13:59.130 --> 00:14:00.870\nneeds to be PCI compliant.\n\n261\n00:14:00.870 --> 00:14:04.860\nWell, we know that we can\nundergo a PCI audit and\n\n262\n00:14:04.860 --> 00:14:09.150\ndo the whole process of running\nthrough that, or SS8016, here in\n\n263\n00:14:09.150 --> 00:14:13.510\nthe United States, you have the sock one\nand sock two audits that you have to do.\n\n264\n00:14:13.510 --> 00:14:16.810\nAnd you have to make sure that all\nof your systems are operating and\n\n265\n00:14:16.810 --> 00:14:20.230\nthat your processes and\nprocedures are operating securely and\n\n266\n00:14:20.230 --> 00:14:22.340\nup to that standard in\norder to be approved.\n\n267\n00:14:22.340 --> 00:14:23.330\nAnd if you aren't,\n\n268\n00:14:23.330 --> 00:14:26.500\nyou can have your ability to have\ncredit card transactions revoked.\n\n269\n00:14:26.500 --> 00:14:27.750\nThat would be bad, right?\n\n270\n00:14:27.750 --> 00:14:30.100\nYou kind of need that to make money.\n\n271\n00:14:30.100 --> 00:14:33.290\nWell Amazon has gone\nthrough a lot of that.\n\n272\n00:14:33.290 --> 00:14:35.630\nThey are ISO 27,001.\n\n273\n00:14:35.630 --> 00:14:38.310\nThey are PCI compliant.\n\n274\n00:14:38.310 --> 00:14:42.010\nThey've gone through\nthe sock audits already and\n\n275\n00:14:42.010 --> 00:14:45.290\nthey've already jumped through all of\nthose hoops for their data center.\n\n276\n00:14:46.650 --> 00:14:48.966\nBut be careful because at first\nglance you look at this and\n\n277\n00:14:48.966 --> 00:14:51.714\nyou're like [SOUND] all right,\nwell, instead of doing a PCI audit,\n\n278\n00:14:51.714 --> 00:14:54.877\nI'm just gonna stick all my stuff up in\nAWS and I don't have to worry about it.\n\n279\n00:14:54.877 --> 00:14:55.740\nBut that's not true.\n\n280\n00:14:57.210 --> 00:14:59.280\nAmazon doesn't have to worry about it.\n\n281\n00:14:59.280 --> 00:15:00.380\nYou do.\n\n282\n00:15:00.380 --> 00:15:05.040\nAmazon is guaranteeing that\neverything they do is compliant.\n\n283\n00:15:05.040 --> 00:15:08.510\nThe way they handle their servers,\nthe way they provide their infrastructure,\n\n284\n00:15:08.510 --> 00:15:12.150\nthe way they physically secure\ntheir building control access,\n\n285\n00:15:12.150 --> 00:15:16.920\nthey are fully compliant to each to\neach of the ones listed here, and\n\n286\n00:15:16.920 --> 00:15:18.690\nits more than just these\nfour little icons.\n\n287\n00:15:18.690 --> 00:15:20.200\nLet me see if I can find it, here we go.\n\n288\n00:15:20.200 --> 00:15:24.340\nHere is the whole giant list of\nassurance programs they have.\n\n289\n00:15:24.340 --> 00:15:29.005\nIt is impressive, and you can see\nsome big hitters in here like HIPAA,\n\n290\n00:15:29.005 --> 00:15:34.160\nwhoops, there we go, HIPAA,\nthey're HIPAA compliant.\n\n291\n00:15:34.160 --> 00:15:36.000\nWell, if you work in\nthe medical industry and\n\n292\n00:15:36.000 --> 00:15:38.430\nyou're dealing with patient medical\nrecords, you have to be HIPAA compliant.\n\n293\n00:15:38.430 --> 00:15:41.490\nAnd if you've ever looked at those rules,\nmy goodness,\n\n294\n00:15:41.490 --> 00:15:43.790\nit is a giant collection of rules.\n\n295\n00:15:43.790 --> 00:15:48.810\nAnd it's insanely difficult to make sure\nthat everything you do is HIPAA compliant.\n\n296\n00:15:48.810 --> 00:15:51.723\nAll right, we'll forget that,\nI'm just gonna move it all up into AWS.\n\n297\n00:15:51.723 --> 00:15:57.085\nThe challenge is,\nwhile they're compliant, you may not be.\n\n298\n00:15:57.085 --> 00:16:01.843\nWhen you deploy an instance in EC2,\nI might deploy a Lennox server.\n\n299\n00:16:01.843 --> 00:16:06.730\nAnd could I set the route password\nto be blank on auto log-in?\n\n300\n00:16:06.730 --> 00:16:08.440\nYes, yes I could.\n\n301\n00:16:08.440 --> 00:16:10.370\nCould I turn off the firewall and\n\n302\n00:16:10.370 --> 00:16:12.670\nallow the entire world to\nhave access to the server?\n\n303\n00:16:12.670 --> 00:16:14.060\nYes I could.\n\n304\n00:16:14.060 --> 00:16:20.090\nCould I go to a S3 bucket and grant\nthe world read access to the whole thing?\n\n305\n00:16:20.090 --> 00:16:21.750\nYes I could, all right?\n\n306\n00:16:21.750 --> 00:16:27.210\nSo while AWS is fully compliant,\nyou can undo that.\n\n307\n00:16:27.210 --> 00:16:30.720\nYou have the power to break all of\nthat compliance in your systems.\n\n308\n00:16:30.720 --> 00:16:34.300\nSo if you are somebody who's regulated\nby one of these, and I mean,\n\n309\n00:16:34.300 --> 00:16:37.000\nit is a massive list of items here, right?\n\n310\n00:16:37.000 --> 00:16:38.630\nIf any of these apply to you,\n\n311\n00:16:39.660 --> 00:16:44.130\nyou know that you can be PCI compliant\nwhen deployed in Amazon's Cloud.\n\n312\n00:16:44.130 --> 00:16:45.770\nYou can be HIPAA compliant.\n\n313\n00:16:45.770 --> 00:16:49.510\nYou can pass a SOC 1 audit if\nyou're deployed in the Cloud.\n\n314\n00:16:49.510 --> 00:16:53.690\nAs long as you yourself have followed\nall of the compliance guidelines.\n\n315\n00:16:53.690 --> 00:16:55.650\nSo as far as compliance is concerned,\n\n316\n00:16:55.650 --> 00:16:58.540\nit's really not much\ndifferent than on premises.\n\n317\n00:16:58.540 --> 00:17:01.350\nThe big challenge in the past\nwas if I deployed in the Cloud,\n\n318\n00:17:01.350 --> 00:17:05.630\nI might not be following all the rules,\nbut is the Cloud provider?\n\n319\n00:17:05.630 --> 00:17:08.680\nI don't know.\nIf it's Bob's hosting service,\n\n320\n00:17:08.680 --> 00:17:11.340\ndid Bob go through an SSAE 16 process?\n\n321\n00:17:11.340 --> 00:17:12.560\nIs he ISO 2701?\n\n322\n00:17:12.560 --> 00:17:13.390\nI don't know.\n\n323\n00:17:13.390 --> 00:17:17.280\nAnd if he isn't,\nit doesn't matter what I do.\n\n324\n00:17:17.280 --> 00:17:19.650\nI can't be compliant\nif he's not compliant.\n\n325\n00:17:19.650 --> 00:17:23.131\nNo, I'm talking about Bob here, this\nfictional person that I just invented.\n\n326\n00:17:23.131 --> 00:17:23.827\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n327\n00:17:23.827 --> 00:17:26.168\nI'm going to open up\nBob's hosting service.\n\n328\n00:17:26.168 --> 00:17:27.244\n&gt;&gt; There already is one!\n\n329\n00:17:27.244 --> 00:17:29.120\n&gt;&gt; [LAUGH]\n&gt;&gt; We're sorry, we're in a-\n\n330\n00:17:29.120 --> 00:17:29.640\n&gt;&gt; Yeah, yeah,\n\n331\n00:17:29.640 --> 00:17:31.030\nespecially if you're compliant.\n\n332\n00:17:31.030 --> 00:17:33.330\nBut with Amazon, they are compliant.\n\n333\n00:17:33.330 --> 00:17:38.140\nSo I know they've done their work, now\nI can play on top of it and do my work.\n\n334\n00:17:38.140 --> 00:17:42.830\nAnd as long as we're both operating\ninside of the boundaries of being\n\n335\n00:17:42.830 --> 00:17:44.380\ncompliant, then we'll be fine.\n\n336\n00:17:44.380 --> 00:17:49.940\nAll right, so know that, yes,\nyou can be compliant on AWS.\n\n337\n00:17:49.940 --> 00:17:51.400\nBut you can also break it.\n\n338\n00:17:51.400 --> 00:17:53.190\nIt's entirely up to you.\n\n339\n00:17:53.190 --> 00:17:54.680\nAmazon will always be compliant.\n\n340\n00:17:54.680 --> 00:17:55.740\nThey're doing their part.\n\n341\n00:17:55.740 --> 00:17:57.300\nThey're making sure they follow that.\n\n342\n00:17:57.300 --> 00:17:58.570\nThe rest is up to you.\n\n343\n00:17:58.570 --> 00:18:02.859\nSo Don, we've been looking at some of\nthe power that we've gained from AWS.\n\n344\n00:18:02.859 --> 00:18:06.428\nWe're half way through a second\nepisode on our introduction.\n\n345\n00:18:06.428 --> 00:18:07.320\nWhat is it AWS?\n\n346\n00:18:07.320 --> 00:18:08.520\nHow can we use it?\n\n347\n00:18:08.520 --> 00:18:13.370\nSecurity, compliance, and its global\npower, but how do we getting started?\n\n348\n00:18:13.370 --> 00:18:16.795\nWe haven't actually taken a look at how\nstart we start poking around on AWS?\n\n349\n00:18:16.795 --> 00:18:18.680\n&gt;&gt; [LAUGH]\n&gt;&gt; How do we do that?\n\n350\n00:18:18.680 --> 00:18:22.114\n&gt;&gt; All right, I've intentionally kind\nof stay away from the AWS console so\n\n351\n00:18:22.114 --> 00:18:24.660\nfar because it is a little\nbit overwhelming, right.\n\n352\n00:18:24.660 --> 00:18:27.090\nWhen you logged in to the console you get,\n\n353\n00:18:27.090 --> 00:18:28.850\nwell you get a screen I\ngot here on my laptop.\n\n354\n00:18:28.850 --> 00:18:30.743\nSo, when you logged in to the console for\nthe first time,\n\n355\n00:18:30.743 --> 00:18:31.892\nyou'll see something like this.\n\n356\n00:18:31.892 --> 00:18:36.216\nNow if you've never even logged in\nto it you should gonna browse to\n\n357\n00:18:36.216 --> 00:18:42.780\nconsole.aws.amazon.com, that's the address\nright there, console.aws.amazon.com.\n\n358\n00:18:42.780 --> 00:18:44.600\nAnd you're going to log\nin with your account.\n\n359\n00:18:44.600 --> 00:18:48.600\nNow, if you've never used it before,\nyou can sign up for a free account.\n\n360\n00:18:48.600 --> 00:18:51.200\nYou can even use your personal one that\nyou've been buying toilet paper on for\n\n361\n00:18:51.200 --> 00:18:51.980\n20 years.\n\n362\n00:18:51.980 --> 00:18:55.210\nWell, not 20 years,\nthat might be a little overstatement.\n\n363\n00:18:55.210 --> 00:18:58.670\nBut you can log in with that and\nyou can get in there and work with it.\n\n364\n00:18:58.670 --> 00:19:02.730\nAmazon has a free usage tier where you can\nstart to create services and things and\n\n365\n00:19:02.730 --> 00:19:04.170\nit won't cost you a dime, right?\n\n366\n00:19:04.170 --> 00:19:07.400\nBut there's plenty of stuff in\nthere that does cost money.\n\n367\n00:19:07.400 --> 00:19:10.120\nAnd so you could actually end up in\na situation where you accidentally run up\n\n368\n00:19:10.120 --> 00:19:11.350\na pretty big bill.\n\n369\n00:19:11.350 --> 00:19:14.970\nSo typically you'll want to set\nup a dedicated AWS account.\n\n370\n00:19:14.970 --> 00:19:17.920\nEspecially if you're designing\na solution for a customer or a client\n\n371\n00:19:17.920 --> 00:19:21.490\nwhere you're gonna need to be providing\naccess or sharing access to resources.\n\n372\n00:19:21.490 --> 00:19:23.680\nYou don't want to use your\npersonal Amazon account for that.\n\n373\n00:19:23.680 --> 00:19:25.630\nYou should set up a dedicated account for\nmanaging it.\n\n374\n00:19:25.630 --> 00:19:30.160\nAnd we're gonna talk more about identity\nand authentication management later on.\n\n375\n00:19:30.160 --> 00:19:33.810\nSo definitely something that\nwe need to do properly.\n\n376\n00:19:33.810 --> 00:19:38.640\nBut once you log in What you're\nseeing here is a list of\n\n377\n00:19:38.640 --> 00:19:43.830\nall of the services available as a part\nof AWS and it's a bit overwhelming.\n\n378\n00:19:43.830 --> 00:19:47.590\nLook at all the different\nthings that make up AWS.\n\n379\n00:19:47.590 --> 00:19:52.510\nA lot of us think of AWS as a place where\nwe go and host virtual servers, okay?\n\n380\n00:19:52.510 --> 00:19:56.360\nWell, hosting virtual servers is\npart of their Elastic Compute Cloud,\n\n381\n00:19:56.360 --> 00:19:57.800\nor EC2 service.\n\n382\n00:19:57.800 --> 00:20:00.300\nAnd EC2 is right here.\n\n383\n00:20:00.300 --> 00:20:00.980\nIt's one link.\n\n384\n00:20:02.370 --> 00:20:04.610\nWhat's all this other stuff?\n\n385\n00:20:04.610 --> 00:20:07.765\nIt's all the other things\nthat Amazon can do.\n\n386\n00:20:07.765 --> 00:20:11.205\nAnd even when it comes to hosting virtual\nservers, right, Elastic Compute Cloud\n\n387\n00:20:11.205 --> 00:20:16.005\nis just one of many different ways\nthat it can host servers for you.\n\n388\n00:20:16.005 --> 00:20:20.205\nAnd so you'll see six different services\nthere that all achieve that same goal of\n\n389\n00:20:20.205 --> 00:20:22.625\nproviding a server, right.\n\n390\n00:20:22.625 --> 00:20:25.515\nSome require a lot of\ninvolvement from you.\n\n391\n00:20:25.515 --> 00:20:27.015\nSome don't require any\ninvolvement from you.\n\n392\n00:20:27.015 --> 00:20:29.300\nIt's various levels of automation.\n\n393\n00:20:29.300 --> 00:20:31.990\nAnd it’s up to you to pick the one\nthat’s right for your solution and\n\n394\n00:20:31.990 --> 00:20:33.810\nthat’s the challenging part of this exam.\n\n395\n00:20:33.810 --> 00:20:39.110\nIs this exam is 60% based on you\ndesigning solutions, choosing the right\n\n396\n00:20:39.110 --> 00:20:43.670\none for your need, for a customers\nneed as you develop a solution in AWS.\n\n397\n00:20:43.670 --> 00:20:46.860\nSo as we move through here,\nthroughout the series,\n\n398\n00:20:46.860 --> 00:20:50.330\nwe're going to be talking\nabout all of the major items.\n\n399\n00:20:50.330 --> 00:20:53.720\nWe actually, I say all the major ones,\nit's probably about a third of what's in\n\n400\n00:20:53.720 --> 00:20:55.900\nthis list is what we're\ngoing to go through.\n\n401\n00:20:55.900 --> 00:20:59.870\nThere's many things in here that\nare very bleeding edge new,\n\n402\n00:20:59.870 --> 00:21:02.240\nlike on the Internet of Things, AWS IOT,\n\n403\n00:21:02.240 --> 00:21:06.170\nthat's a fairly new service and so\nthat one's not covered on the exam yet.\n\n404\n00:21:06.170 --> 00:21:08.840\nThere's other ones that\nare very niche products,\n\n405\n00:21:08.840 --> 00:21:11.340\nthat aren't something that everyone\nin the world would use, but\n\n406\n00:21:11.340 --> 00:21:14.490\nis specifically designed for\na particular solution.\n\n407\n00:21:14.490 --> 00:21:18.510\nAnd so you'll see some of those,\nlike down here in Artificial Intelligence.\n\n408\n00:21:18.510 --> 00:21:22.580\nLex, Polly, Rekognition, Machine Learning,\nthose, not everybody's using that.\n\n409\n00:21:22.580 --> 00:21:24.650\nBut we are seeing more and\nmore people go to it.\n\n410\n00:21:24.650 --> 00:21:27.330\nIt's very difficult to deploy,\nso why do it ourselves?\n\n411\n00:21:27.330 --> 00:21:28.390\nWe can just reuse Amazon's.\n\n412\n00:21:28.390 --> 00:21:32.810\nThey've got Alexa and\ntheir whole AI system in place.\n\n413\n00:21:32.810 --> 00:21:33.860\nWe just reuse it.\n\n414\n00:21:33.860 --> 00:21:37.080\nSo there's some things that are like that\nthat everybody can take advantage of.\n\n415\n00:21:37.080 --> 00:21:39.100\nSome things that\nare a little more specific.\n\n416\n00:21:39.100 --> 00:21:40.910\nAnd that's part of what's overwhelming.\n\n417\n00:21:40.910 --> 00:21:43.490\nThe nice thing is as you start to use it,\n\n418\n00:21:43.490 --> 00:21:47.530\nthe most frequently accessed services\nwill start to appear up at the top.\n\n419\n00:21:47.530 --> 00:21:53.080\nSo if I use EC2, and I use S3, and\nI use route 53, and that's it,\n\n420\n00:21:53.080 --> 00:21:59.050\nwell as I start using each one, so if I\nclick on EC2 That's why I get into EC2.\n\n421\n00:21:59.050 --> 00:22:02.930\nI can use my little Amazon box up\nhere to bring my menu back up.\n\n422\n00:22:02.930 --> 00:22:08.430\nAnd I can jump over to s3 and\nthen I can jump over to route 53.\n\n423\n00:22:08.430 --> 00:22:13.490\nYou know, as I move through each\none I'm using these services.\n\n424\n00:22:13.490 --> 00:22:16.910\nAnd it recognizes these\nare the ones I'm using.\n\n425\n00:22:16.910 --> 00:22:19.800\nAnd so it says alright since\nyou've used these before,\n\n426\n00:22:19.800 --> 00:22:21.860\nI'm gonna put them up in\nyour recent services.\n\n427\n00:22:21.860 --> 00:22:25.910\nSo that now when you pull up your menu,\nrecently visited services.\n\n428\n00:22:25.910 --> 00:22:27.580\nI see Route 53, S3, and EC2.\n\n429\n00:22:27.580 --> 00:22:33.000\nThat starts to take away that shock value\nof my gosh there is so much stuff here.\n\n430\n00:22:33.000 --> 00:22:35.080\nAll right.\nHere's is the ones I work with and\n\n431\n00:22:35.080 --> 00:22:37.810\nmaybe later I'll come and\nmess with this services, but for\n\n432\n00:22:37.810 --> 00:22:40.750\nnow, let me just minimize that and\nhere's the three that I use.\n\n433\n00:22:40.750 --> 00:22:43.910\nOr whatever is the new user because\neverybody uses a little bit differently.\n\n434\n00:22:43.910 --> 00:22:46.900\nSo it's nice to have that way\nit becomes a little more simple.\n\n435\n00:22:46.900 --> 00:22:50.520\nRight but let's talk about\nthe services in general okay.\n\n436\n00:22:50.520 --> 00:22:52.867\nLet's just kinda run through\neach category and what they do.\n\n437\n00:22:52.867 --> 00:22:53.851\nI'll try and do it quickly.\n\n438\n00:22:53.851 --> 00:22:55.510\nI know I'm running out of time.\n\n439\n00:22:55.510 --> 00:22:59.220\nCompute, that focuses on providing,\nwell CPUs, compute services, right?\n\n440\n00:22:59.220 --> 00:23:01.350\nAnd the most common example\nis an EC2 instance,\n\n441\n00:23:01.350 --> 00:23:04.790\nwhere your'e basically running\na virtual server in Amazon's cloud.\n\n442\n00:23:04.790 --> 00:23:07.830\nSome of them though,\nwill obfuscate the server or\n\n443\n00:23:07.830 --> 00:23:11.240\njust take the server away from you and\nhave it as a fully managed one,\n\n444\n00:23:11.240 --> 00:23:15.250\nwhere instead of a platform or\ninfrastructure as a service,\n\n445\n00:23:15.250 --> 00:23:17.380\nit becomes a platform as a service,\nbut they manage the OS.\n\n446\n00:23:17.380 --> 00:23:20.750\nThat would be like the container service\nif you have docker containers or\n\n447\n00:23:20.750 --> 00:23:23.100\nkubernetes or whatever and\nyou want to roll that out.\n\n448\n00:23:23.100 --> 00:23:25.490\nYou can use the EC2 container service.\n\n449\n00:23:25.490 --> 00:23:28.730\nWe've got light sale,\nelastic beam stock, lambda, and patch.\n\n450\n00:23:28.730 --> 00:23:30.190\nThose guys all try and\n\n451\n00:23:30.190 --> 00:23:32.820\nget us to the point where we don't\neven think about the server at all.\n\n452\n00:23:32.820 --> 00:23:36.670\nMaybe not even the application that\nif I've written a web app in PHP,\n\n453\n00:23:36.670 --> 00:23:40.860\nI might not know anything about Apache,\nI should, but\n\n454\n00:23:40.860 --> 00:23:44.570\nmaybe I don't, or Engine X or the other\nservers that I run this on top of.\n\n455\n00:23:44.570 --> 00:23:48.560\nI could write a PHP application and\nadd it into Elastic Beanstalk and\n\n456\n00:23:48.560 --> 00:23:50.910\nit can be up and running and\nprovided to my customers.\n\n457\n00:23:50.910 --> 00:23:54.210\nI never even installed the web server or\nthe PHP module themselves.\n\n458\n00:23:54.210 --> 00:23:55.748\nThat's taken care for me.\n\n459\n00:23:55.748 --> 00:23:59.821\nIt is these all different ways to\nquickly get applications in front of our\n\n460\n00:23:59.821 --> 00:24:00.566\ncustomers.\n\n461\n00:24:00.566 --> 00:24:04.119\nWithout having to worry about a lot\nof infrastructure behind the scenes.\n\n462\n00:24:04.119 --> 00:24:04.881\nStorage?\n\n463\n00:24:04.881 --> 00:24:07.120\nWell, like the name implies,\nfocus is on storage.\n\n464\n00:24:07.120 --> 00:24:09.080\nPutting data into the Cloud.\n\n465\n00:24:09.080 --> 00:24:11.660\nAnd that might be data that we\nneed access to all the time, or\n\n466\n00:24:11.660 --> 00:24:13.420\nit might be very infrequent data.\n\n467\n00:24:13.420 --> 00:24:18.055\nThe most common service is\nthe simple service storage, or S3.\n\n468\n00:24:18.055 --> 00:24:19.546\nS3, we can throw files up there,\n\n469\n00:24:19.546 --> 00:24:22.910\nwe can make them available all\nover the world very, very quickly.\n\n470\n00:24:22.910 --> 00:24:24.290\nNear limitless storage.\n\n471\n00:24:24.290 --> 00:24:25.370\nI mean, it's really powerful stuff.\n\n472\n00:24:25.370 --> 00:24:28.130\nThat's what we're going to start\nwith in the next episode, is S3.\n\n473\n00:24:28.130 --> 00:24:31.450\nHow it gets configured, how we use it and\nhow we design solutions.\n\n474\n00:24:31.450 --> 00:24:34.410\nBut you also have EFS,\nGlacier and the Storage Gateway.\n\n475\n00:24:34.410 --> 00:24:37.020\nEach of these are just different\nways of providing storage.\n\n476\n00:24:37.020 --> 00:24:42.090\nFor example, Glacier i s really\ninfrequently accessed storage, it's\n\n477\n00:24:42.090 --> 00:24:47.370\ndesigned for backups and archives that I\ncan store data in there very, very cheap.\n\n478\n00:24:47.370 --> 00:24:50.810\nBut if I wanna retrieve it, it can\ntake up to five hours to retrieve it.\n\n479\n00:24:50.810 --> 00:24:53.020\nImagine going to a website and\ngetting a message saying,\n\n480\n00:24:53.020 --> 00:24:54.980\nthe page will load in five hours.\n\n481\n00:24:54.980 --> 00:24:56.710\nYou're not going to do that, right?\n\n482\n00:24:56.710 --> 00:24:59.960\nBut if I deleted a file by accident,\nI can say, restore that file, and\n\n483\n00:24:59.960 --> 00:25:02.180\nit will say all right,\nyour file will be back in five hours.\n\n484\n00:25:02.180 --> 00:25:03.860\nOkay, I'll wait five hours.\n\n485\n00:25:03.860 --> 00:25:05.650\nThat's what Glacier is designed for.\n\n486\n00:25:05.650 --> 00:25:07.510\nThat's where we have these choices.\n\n487\n00:25:07.510 --> 00:25:10.820\nThat I could back up to anyone of these.\n\n488\n00:25:10.820 --> 00:25:12.710\nThe Storage Gateway is where\nwe back up on premises, and\n\n489\n00:25:12.710 --> 00:25:13.880\nthen it sends it up into the cloud.\n\n490\n00:25:13.880 --> 00:25:17.760\nI can back up to any one of these, but\nthere's different ones that are right for\n\n491\n00:25:17.760 --> 00:25:18.740\ndifferent solutions.\n\n492\n00:25:18.740 --> 00:25:21.690\nIf I don't have on premises equipment,\nI don't need the Storage Gateway.\n\n493\n00:25:21.690 --> 00:25:24.320\nIf I need rapid access,\nI don't want glacier.\n\n494\n00:25:24.320 --> 00:25:28.750\nIf I'm not worried about encryption or\nwhatever, then you kind of fall into\n\n495\n00:25:28.750 --> 00:25:33.440\nparticular ones and you end up saying all\nright, S3's the right solution for me.\n\n496\n00:25:33.440 --> 00:25:35.740\nOn the database side, same thing here.\n\n497\n00:25:35.740 --> 00:25:37.020\nAmazon can host your database.\n\n498\n00:25:37.020 --> 00:25:43.490\nAnd let me tell you, databases\nare part science, part magical art.\n\n499\n00:25:43.490 --> 00:25:46.990\nAs databases grow in size,\nkeeping them running smooth and\n\n500\n00:25:46.990 --> 00:25:50.160\nefficient is, it's tough.\n\n501\n00:25:50.160 --> 00:25:51.332\nIt's like herding cats.\n\n502\n00:25:51.332 --> 00:25:53.560\nIt's [LAUGH] really, really challenging.\n\n503\n00:25:53.560 --> 00:25:57.490\nAnd there are some people out\nthere that are supremely talented\n\n504\n00:25:57.490 --> 00:25:58.673\nin managing databases.\n\n505\n00:25:58.673 --> 00:26:02.480\nNow, your company may be able to\nafford one of those people or may not,\n\n506\n00:26:02.480 --> 00:26:06.780\nbut Amazon is, and Amazon has some of\nthe largest databases in the world.\n\n507\n00:26:06.780 --> 00:26:10.420\nSo they have some of the most talented\ndata base professionals in the entire\n\n508\n00:26:10.420 --> 00:26:12.280\nworld working for them.\n\n509\n00:26:12.280 --> 00:26:15.090\nAnd they can manage your day basis for\nyou.\n\n510\n00:26:15.090 --> 00:26:17.270\nWhy wouldn't you take them\nup on that kind of an offer?\n\n511\n00:26:17.270 --> 00:26:21.480\nSo, we can do relational databases,\nlike MariaDB or Amazon Aurora.\n\n512\n00:26:21.480 --> 00:26:23.082\nYou can do DynamoDB and\n\n513\n00:26:23.082 --> 00:26:28.000\nNoSQL type solutions, really,\nreally large blocks of big data.\n\n514\n00:26:28.000 --> 00:26:29.635\nThat's a buzzword I hate to use.\n\n515\n00:26:29.635 --> 00:26:30.670\nBut big data, you can do it.\n\n516\n00:26:30.670 --> 00:26:32.130\nIt's awesome.\n\n517\n00:26:32.130 --> 00:26:34.240\nElastiCache for\nspeeding up those look ups.\n\n518\n00:26:34.240 --> 00:26:36.760\nThere's all sorts of different\nthings that we can provide\n\n519\n00:26:36.760 --> 00:26:37.979\nas a completely managed service.\n\n520\n00:26:39.500 --> 00:26:41.060\nNetworking in content delivery.\n\n521\n00:26:41.060 --> 00:26:42.840\nThis one is a little bit different,\n\n522\n00:26:42.840 --> 00:26:44.790\ncuz all the other services\nget tied into it somewhat.\n\n523\n00:26:44.790 --> 00:26:48.680\nLike Virtual Private Cloud, VPC,\nis how we isolate some of our resources.\n\n524\n00:26:48.680 --> 00:26:51.800\nLike we can isolate our EC2 instances and\nblock them off.\n\n525\n00:26:51.800 --> 00:26:53.500\nRoute 53 does DNS lookup.\n\n526\n00:26:53.500 --> 00:26:54.950\nSo they provide infrastructure there,\n\n527\n00:26:54.950 --> 00:26:57.590\nthat replaces what we\ntypically do on our network.\n\n528\n00:26:57.590 --> 00:26:58.605\nYou got Migration.\n\n529\n00:26:58.605 --> 00:27:00.476\nThese services are what's handling,\n\n530\n00:27:00.476 --> 00:27:04.385\nallowing us to move data between two\ndifferent solutions, maybe cloud to cloud,\n\n531\n00:27:04.385 --> 00:27:07.218\ncloud to on prem, or\njust between two different services,\n\n532\n00:27:07.218 --> 00:27:10.807\nyou can certainly do that, too,\nthrough migration services available.\n\n533\n00:27:10.807 --> 00:27:12.511\nWe've got developer tools.\n\n534\n00:27:12.511 --> 00:27:16.698\nThese are all things designed to help\nyou dev team interact with AWS a little\n\n535\n00:27:16.698 --> 00:27:20.238\nbetter as far as code migration,\nand versioning and all that.\n\n536\n00:27:20.238 --> 00:27:23.030\nA lot of excellent\nutilities built into it.\n\n537\n00:27:23.030 --> 00:27:27.280\nThe Internet of Things, which is\nvery new for managing all these IoT\n\n538\n00:27:27.280 --> 00:27:30.632\nappliances that we develop and sell and\nneed to be able to centrally manage.\n\n539\n00:27:30.632 --> 00:27:32.000\nWe've got game development.\n\n540\n00:27:32.000 --> 00:27:35.670\nGameLift, here, you can develop mobile\ngames and have centralized communications.\n\n541\n00:27:35.670 --> 00:27:38.890\nA lot of people don't think about that,\nwhen we deploy an IoT device or\n\n542\n00:27:38.890 --> 00:27:40.550\na game on a cell phone.\n\n543\n00:27:40.550 --> 00:27:43.960\nIf you want multi player, or if you want\nthose IoT devices to talk to each other,\n\n544\n00:27:43.960 --> 00:27:45.990\nthey need some kind of\ncentralized infrastructure.\n\n545\n00:27:45.990 --> 00:27:47.055\nHere we can quickly deploy that.\n\n546\n00:27:47.055 --> 00:27:49.510\nOr Management Tools.\n\n547\n00:27:49.510 --> 00:27:52.780\nIf you're a sys admin, or if you're\nthe on in charge of dealing with AWS,\n\n548\n00:27:52.780 --> 00:27:54.840\nyou need to be able to keep an eye on it.\n\n549\n00:27:54.840 --> 00:27:57.830\nAnd we've got a ton of utilities here that\nare all designed to be able to do that.\n\n550\n00:27:57.830 --> 00:27:59.300\nCloudWatch is the most common.\n\n551\n00:27:59.300 --> 00:28:02.960\nAnd you can see everything that's going\non inside of your AWS deployment.\n\n552\n00:28:02.960 --> 00:28:04.050\nYou got Mobile Services.\n\n553\n00:28:04.050 --> 00:28:07.570\nAgain, for doing mobile development and\npushing out to mobile devices becoming\n\n554\n00:28:07.570 --> 00:28:09.710\nmore and more common and,\nso we got that built in.\n\n555\n00:28:09.710 --> 00:28:14.330\nApplication services, these are things\nlike the, well, the Elastic Transcoder.\n\n556\n00:28:14.330 --> 00:28:14.960\nI know I've used that,\n\n557\n00:28:14.960 --> 00:28:18.360\nwhere you have videos that you need\nto transcode into another format.\n\n558\n00:28:18.360 --> 00:28:20.080\nIt takes a lot of CPU power to do that.\n\n559\n00:28:20.080 --> 00:28:21.480\nI don't necessarily want\nto stand up a server,\n\n560\n00:28:21.480 --> 00:28:24.220\nI can just send it up to Amazon and\nhave them do it.\n\n561\n00:28:24.220 --> 00:28:25.990\nSecurity, identity and compliance.\n\n562\n00:28:25.990 --> 00:28:30.570\nRight here is where we start getting into\nIAM which is identity and authentication.\n\n563\n00:28:30.570 --> 00:28:32.020\nYou got certificate management.\n\n564\n00:28:32.020 --> 00:28:35.940\nYou could set up an entire PKI inside of\nAWS and never have to touch a server.\n\n565\n00:28:35.940 --> 00:28:40.730\nThat's really awesome to be able to do\nthat because it's tough to secure a PKI.\n\n566\n00:28:40.730 --> 00:28:42.730\nAmazon can manage that for us.\n\n567\n00:28:42.730 --> 00:28:44.000\nWe've got messaging.\n\n568\n00:28:44.000 --> 00:28:44.950\nQueuing services.\n\n569\n00:28:44.950 --> 00:28:48.890\nQueuing services are like service brokers,\nbeing able to exchange data between two\n\n570\n00:28:48.890 --> 00:28:51.760\napplications, reliably,\nknowing you don't lose data.\n\n571\n00:28:51.760 --> 00:28:52.960\nThat's a critical operation.\n\n572\n00:28:52.960 --> 00:28:54.430\nIf you're doing financial transactions,\n\n573\n00:28:54.430 --> 00:28:58.340\nyou have to know,\ndid the transaction post, or not.\n\n574\n00:28:58.340 --> 00:29:00.850\nAnd so we can use the queuing\nservices that Amazon provides.\n\n575\n00:29:00.850 --> 00:29:04.060\nThey've got three different ones that\nall work a little bit differently.\n\n576\n00:29:04.060 --> 00:29:05.440\nWe have other analytics for\n\n577\n00:29:05.440 --> 00:29:09.600\njust being able to track, not necessarily\nAWS performance, but our big data.\n\n578\n00:29:09.600 --> 00:29:13.120\nHow can we prove analytics in all the data\nthat we've gathered on our customers, or\n\n579\n00:29:13.120 --> 00:29:17.260\nour viewers, whatever, and be able to\nturn that into actual information?\n\n580\n00:29:17.260 --> 00:29:21.280\nOn the business productivity side,\nyou can run your company from AWS.\n\n581\n00:29:21.280 --> 00:29:23.770\nWe have things like WorkDocs,\nand WorkMail.\n\n582\n00:29:23.770 --> 00:29:25.650\nYou can host your mail\nserver right on there.\n\n583\n00:29:25.650 --> 00:29:29.620\nYou can have WorkSpaces,\nit's actually down here under, Desktop and\n\n584\n00:29:29.620 --> 00:29:34.300\nAppstreaming, where your employees can\nactually have their desktop in AWS,\n\n585\n00:29:34.300 --> 00:29:37.440\nwhere they can go to any computer in the\nworld and login to their business desktop\n\n586\n00:29:37.440 --> 00:29:41.290\nor their business applications,\nand work entirely from inside AWS.\n\n587\n00:29:41.290 --> 00:29:43.600\nAnd last,\nwe have our Artificial Intelligence,\n\n588\n00:29:43.600 --> 00:29:44.750\nI kind of already mentioned it.\n\n589\n00:29:44.750 --> 00:29:46.710\nReally hard to develop\nthis stuff on your own.\n\n590\n00:29:46.710 --> 00:29:48.700\nWe can just leverage Amazon's.\n\n591\n00:29:48.700 --> 00:29:52.320\nSo that's a quick, I try to be quick,\nI know I went over on time here, but\n\n592\n00:29:52.320 --> 00:29:54.890\na quick kind of overview of all\nthe different categories and\n\n593\n00:29:54.890 --> 00:29:56.650\nthings that are available as part of AWS.\n\n594\n00:29:56.650 --> 00:30:01.150\nNow, if we were to cover every one\nof these, we'd be together for\n\n595\n00:30:01.150 --> 00:30:04.057\na couple of years, which it might be fun,\nprobably not for you.\n\n596\n00:30:04.057 --> 00:30:04.840\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n597\n00:30:04.840 --> 00:30:07.110\n&gt;&gt; But we can do that.\n\n598\n00:30:07.110 --> 00:30:10.570\nInstead, over the next 20 to 30 episodes,\n\n599\n00:30:10.570 --> 00:30:13.850\nwe're gonna cover each\nof the primary service.\n\n600\n00:30:13.850 --> 00:30:15.530\nThe ones that shows up on the exam and\n\n601\n00:30:15.530 --> 00:30:18.070\nones that are most common for\nuse out there in the real world.\n\n602\n00:30:18.070 --> 00:30:21.250\nBut always be aware that\nthere's other services,\n\n603\n00:30:21.250 --> 00:30:22.600\nthere's new services\nthat are appearing and\n\n604\n00:30:22.600 --> 00:30:27.580\nyour customer may have a special need, and\nwhen you design a solution, you maybe able\n\n605\n00:30:27.580 --> 00:30:30.230\nto solve that need with one of the other\nAmazon products that we don't talk about.\n\n606\n00:30:30.230 --> 00:30:34.128\nSo just be aware that there are always\nother options available inside of AWS and\n\n607\n00:30:34.128 --> 00:30:35.733\nnew stuff be added all the time.\n\n608\n00:30:35.733 --> 00:30:40.460\n&gt;&gt; Well, Don, we definitely taken\na look at the globalization of AWS.\n\n609\n00:30:40.460 --> 00:30:44.850\nHow we can use it to build in resiliency,\nbut also manage our security concerns.\n\n610\n00:30:44.850 --> 00:30:48.612\nBut that look at the console, right at\nthere at the end, I'm kind of excited,\n\n611\n00:30:48.612 --> 00:30:50.103\nand hopefully you are as well.\n\n612\n00:30:50.103 --> 00:30:53.440\nUnfortunately, that’s the end of our\nepisode, so signing out for ItPRO.TV,\n\n613\n00:30:53.440 --> 00:30:55.165\nI've been your host, Justin Dennison.\n\n614\n00:30:55.165 --> 00:30:56.138\n&gt;&gt; And I'm Don Pezet.\n\n615\n00:30:56.138 --> 00:30:57.986\n&gt;&gt; We'll see you next time.\n\n616\n00:30:57.986 --> 00:31:03.926\n[MUSIC]\n\n617\n00:31:03.926 --> 00:31:07.278\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "206256484"
        }
      ],
      "title": "Introduction to AWS"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Don focus on the Simple Storage Solution service, also known as S3. They take a look at the difference between standard file storage and the object storage of S3 including creating buckets and objects. As the show comes to a close, Don and Justin explore the redundancy and availability policies for S3 object storage.",
          "length": "1925",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-amazon_s3_basics-022817.00_31_48_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-amazon_s3_basics-022817.00_31_48_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-amazon_s3_basics-022817.00_31_48_28.Still001-sm.jpg",
          "title": "Amazon S3 Basics",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.190\nWelcome to IT Pro TV.\n\n2\n00:00:01.190 --> 00:00:05.057\nI'm your host Don Pezet [CROSSTALK]\n\n3\n00:00:05.057 --> 00:00:08.345\n[MUSIC]\n\n4\n00:00:08.345 --> 00:00:11.973\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:11.973 --> 00:00:15.560\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of IT Pro TV.\n\n6\n00:00:15.560 --> 00:00:19.940\nI'm your host Justin Dennison, and in\ntoday's episode we're actually gonna start\n\n7\n00:00:19.940 --> 00:00:24.930\non looking at these Amazon services,\nparticularly on storage solutions, S3.\n\n8\n00:00:24.930 --> 00:00:29.690\nS3 is very interesting, and\nto help us along is Mr Don Pezet.\n\n9\n00:00:29.690 --> 00:00:30.920\nHow are you doing today, Don?\n\n10\n00:00:30.920 --> 00:00:35.000\n&gt;&gt; I am doing great, Justin, ready to\ndive right into S3 which, coincidentally,\n\n11\n00:00:35.000 --> 00:00:37.580\nis the Simple Storage Solution\nfrom Amazon.\n\n12\n00:00:37.580 --> 00:00:40.860\nAnd so, like the name implies,\nit's simple, pretty easy to use.\n\n13\n00:00:40.860 --> 00:00:43.020\nStorage, we can store stuff in it.\n\n14\n00:00:43.020 --> 00:00:45.050\nAnd it's a solution.\n\n15\n00:00:45.050 --> 00:00:46.470\nI guess that doesn't work out so well.\n\n16\n00:00:46.470 --> 00:00:47.650\nBut anyhow, so Amazon S3.\n\n17\n00:00:47.650 --> 00:00:51.240\nIt's just a great place for\nus to be able to chuck our data and\n\n18\n00:00:51.240 --> 00:00:53.340\nbe able to retrieve it whenever we want,\n\n19\n00:00:53.340 --> 00:00:57.520\nwhich sounds like is not that big\nof a deal, and it normally isn't.\n\n20\n00:00:57.520 --> 00:00:59.140\nIf I've got files right\nhere on my computer,\n\n21\n00:00:59.140 --> 00:01:01.140\nit's not a big deal to store them and\nretrieve them.\n\n22\n00:01:01.140 --> 00:01:05.640\nWhere it becomes challenging is if we want\nthem to be available globally, quickly,\n\n23\n00:01:05.640 --> 00:01:09.600\nand reliably to all of our customers,\nthat becomes more of a challenge.\n\n24\n00:01:09.600 --> 00:01:11.630\nBut with S3,\nwe'll see it's actually really simple.\n\n25\n00:01:11.630 --> 00:01:14.520\nSo that's what we're gonna be\ntackling right here in this episode.\n\n26\n00:01:14.520 --> 00:01:20.170\n&gt;&gt; Well, Don, I noticed that there's\nS3 touts itself as an object store.\n\n27\n00:01:20.170 --> 00:01:22.440\nHow is that different\nthan like file storage,\n\n28\n00:01:22.440 --> 00:01:25.820\nor how getting things on our computer,\non and off on our computer?\n\n29\n00:01:25.820 --> 00:01:28.113\n&gt;&gt; All right, so let's use our\ncomputer as an example, right?\n\n30\n00:01:28.113 --> 00:01:30.690\nComputers do what's called block and\nfile storage.\n\n31\n00:01:30.690 --> 00:01:33.840\nBlock storage is raw data\nwritten to your hard drive.\n\n32\n00:01:33.840 --> 00:01:35.950\nYour hard drive is divided\nup into these blocks, right?\n\n33\n00:01:35.950 --> 00:01:37.650\nThey're fixed sized blocks.\n\n34\n00:01:37.650 --> 00:01:41.220\nAnd if you really get to\nthe nitty-gritty of a spinning disk,\n\n35\n00:01:41.220 --> 00:01:44.010\nyou have cylinders, and heads,\nand all that other mess.\n\n36\n00:01:44.010 --> 00:01:46.420\nEven on an SSD, though, it's memory.\n\n37\n00:01:46.420 --> 00:01:49.610\nAnd you've got blocks where\nthe memory can be stored.\n\n38\n00:01:49.610 --> 00:01:51.220\nSo when you write data down to the disks,\n\n39\n00:01:51.220 --> 00:01:54.730\nthere's a certain amount of space it kinda\nhas to consume, and you just write it and\n\n40\n00:01:54.730 --> 00:01:57.180\nyou retrieve it based on\nthat same information.\n\n41\n00:01:57.180 --> 00:01:59.480\nWell, the operating system doesn't\nmake you have to know that.\n\n42\n00:01:59.480 --> 00:02:01.230\nIf I want to access some document I saved,\n\n43\n00:02:01.230 --> 00:02:04.530\nI don't have to know,\nit's blocks 12 through 407.\n\n44\n00:02:04.530 --> 00:02:06.540\nThat would be hard to remember, right?\n\n45\n00:02:06.540 --> 00:02:10.017\nSo your file system in your operating\nsystem will hide that from you, and\n\n46\n00:02:10.017 --> 00:02:12.930\nit hides it from you by using\nwhat's called file storage.\n\n47\n00:02:12.930 --> 00:02:15.450\nYou see names, you see a hierarchy, right?\n\n48\n00:02:16.590 --> 00:02:18.550\nDrive letters or mount points.\n\n49\n00:02:18.550 --> 00:02:21.210\nYou see folders, usually nested folders.\n\n50\n00:02:21.210 --> 00:02:23.420\nAnd then you see files\ninside of those folders.\n\n51\n00:02:23.420 --> 00:02:25.610\nWell, none of that stuff actually exists.\n\n52\n00:02:25.610 --> 00:02:27.870\nThe files and folders, they don’t exist.\n\n53\n00:02:27.870 --> 00:02:31.560\nWhat exists is the raw block\nstorage on the disc, and you go and\n\n54\n00:02:31.560 --> 00:02:35.570\nretrieve it from the disc using these\naliases that is the file storage.\n\n55\n00:02:35.570 --> 00:02:39.378\nWell, with S3,\nit's kind of like the Matrix.\n\n56\n00:02:39.378 --> 00:02:41.450\nYou remember in the Matrix,\nthere is no spoon?\n\n57\n00:02:41.450 --> 00:02:44.090\nWell, in S3, there are no hard drives.\n\n58\n00:02:44.090 --> 00:02:45.750\nThere are no servers.\n\n59\n00:02:45.750 --> 00:02:51.110\nYou don't see any of that,\nits all completely invisible.\n\n60\n00:02:51.110 --> 00:02:56.280\nSo when you write data into S3,\nyou place that data up there,\n\n61\n00:02:56.280 --> 00:02:59.940\nit's not a file, it's just data,\nit's a collection of ones and zeros.\n\n62\n00:02:59.940 --> 00:03:04.650\nThere's no filenames, there's no folders,\nthere's no disks, there's no blocks.\n\n63\n00:03:04.650 --> 00:03:05.930\nNone of that exists.\n\n64\n00:03:05.930 --> 00:03:11.140\nIt's just raw blob data stored,\nand you can then retrieve it.\n\n65\n00:03:11.140 --> 00:03:14.270\nAnd so,\nthat's why they call it object storage.\n\n66\n00:03:14.270 --> 00:03:17.190\nIs you're writing blob of data,\nthat's your object.\n\n67\n00:03:17.190 --> 00:03:21.130\nAnd you can go and retrieve that\nobject and use it however you want.\n\n68\n00:03:21.130 --> 00:03:22.110\nAnd that object,\n\n69\n00:03:22.110 --> 00:03:26.660\nit might be a file, it might be what\nwe would traditionally consider a file.\n\n70\n00:03:26.660 --> 00:03:29.650\nOr it might be some other kind\nof identity information, or\n\n71\n00:03:29.650 --> 00:03:32.190\nwhatever, not actually a file at all.\n\n72\n00:03:32.190 --> 00:03:33.260\nIt doesn't matter.\n\n73\n00:03:33.260 --> 00:03:36.410\nS3 doesn't care what you store in\nit as long as it's a one or a zero.\n\n74\n00:03:36.410 --> 00:03:39.180\nIt'll store that, and\nyou can go and retrieve it.\n\n75\n00:03:39.180 --> 00:03:42.490\nBut as human beings,\nwe can't wrap our minds around that.\n\n76\n00:03:42.490 --> 00:03:45.290\nWe can't think as nebulously as that.\n\n77\n00:03:45.290 --> 00:03:49.370\nSo, it gets kind of presented\nto us as if there were folders,\n\n78\n00:03:49.370 --> 00:03:51.220\nas if there were filenames.\n\n79\n00:03:51.220 --> 00:03:54.940\nBut in reality, those are just aliases\nthat we've stuck on top of this raw data\n\n80\n00:03:54.940 --> 00:03:56.660\nthat we can reach in and access.\n\n81\n00:03:56.660 --> 00:04:00.860\nNow, because there is no physical\naspect that we have to worry about,\n\n82\n00:04:00.860 --> 00:04:02.550\nthere's no server that we deal with.\n\n83\n00:04:02.550 --> 00:04:05.190\nWe don't have to worry about\nRAID arrays and discs.\n\n84\n00:04:05.190 --> 00:04:07.230\nAll of that is handled by Amazon.\n\n85\n00:04:07.230 --> 00:04:10.170\nWe just stick our files in S3,\nand it magically works, and\n\n86\n00:04:10.170 --> 00:04:12.410\nwhen we go to retrieve it,\nit's always there for us.\n\n87\n00:04:12.410 --> 00:04:14.278\nWe get it back and off we go.\n\n88\n00:04:14.278 --> 00:04:19.330\nIt let's us focus on working with our data\nas opposed to working with hard drives.\n\n89\n00:04:19.330 --> 00:04:24.090\n&gt;&gt; So, Don, you talk about\nthese blobs of zeroes and ones,\n\n90\n00:04:24.090 --> 00:04:28.260\nand Amazon providing us with an interface\nof how to think about that, right?\n\n91\n00:04:28.260 --> 00:04:31.330\nWhat we're used to with the OS level.\n\n92\n00:04:31.330 --> 00:04:33.062\nHow does S3 achieve that?\n\n93\n00:04:33.062 --> 00:04:36.000\n&gt;&gt; All right, so the first thing we do\nis create the, whats called a bucket.\n\n94\n00:04:36.000 --> 00:04:38.690\nAnd an S3 bucket is like a container.\n\n95\n00:04:38.690 --> 00:04:41.190\nIt's, think of it like a hard drive,\nright?\n\n96\n00:04:41.190 --> 00:04:42.660\nExcept it has no limit.\n\n97\n00:04:42.660 --> 00:04:45.940\nA bucket can have as\nmuch in it as you want.\n\n98\n00:04:45.940 --> 00:04:48.570\nWhen I buy a hard drive,\nI may get a 1 Terabyte drive, or\n\n99\n00:04:48.570 --> 00:04:50.700\na two, or four terabyte hard drive.\n\n100\n00:04:50.700 --> 00:04:53.280\nSo I can put four terabytes\nof data on there, right?\n\n101\n00:04:53.280 --> 00:04:57.320\nIf I wanna go more than four terabytes,\nmaybe I buy five 4 Terabyte drives and\n\n102\n00:04:57.320 --> 00:04:58.250\nI build an array out of them.\n\n103\n00:04:58.250 --> 00:05:00.480\nI can store data on there and\nit grows and grows and grows, right?\n\n104\n00:05:00.480 --> 00:05:02.380\nWell, with an S3 bucket there's no limit.\n\n105\n00:05:02.380 --> 00:05:04.480\nYou can store as much\nas you want in there.\n\n106\n00:05:04.480 --> 00:05:07.160\nIn theory, an infinite amount of data.\n\n107\n00:05:07.160 --> 00:05:08.480\nYou gotta pay for it, right?\n\n108\n00:05:08.480 --> 00:05:09.800\nCuz you pay for the storage you use.\n\n109\n00:05:09.800 --> 00:05:12.830\nSo it's really only limited\nby your cash [LAUGH].\n\n110\n00:05:12.830 --> 00:05:15.430\nAnd so, as long as you can pay for it,\nyou can put whatever you want in there.\n\n111\n00:05:15.430 --> 00:05:18.120\nBut you create these buckets so\nyou can separate out your data.\n\n112\n00:05:18.120 --> 00:05:21.010\nWe need to separate our data because\nyou might have different security\n\n113\n00:05:21.010 --> 00:05:22.350\npolicies for you data.\n\n114\n00:05:22.350 --> 00:05:24.310\nSome data might be public.\n\n115\n00:05:24.310 --> 00:05:25.340\nWebsite images.\n\n116\n00:05:25.340 --> 00:05:27.680\nSo you want everybody to be able\nto access your website images.\n\n117\n00:05:27.680 --> 00:05:31.150\nBut then you have other things,\nlike your backups for\n\n118\n00:05:31.150 --> 00:05:33.720\nyour file servers, that you don't\nwant the world to have access to.\n\n119\n00:05:33.720 --> 00:05:34.430\nThose need to be private.\n\n120\n00:05:34.430 --> 00:05:37.670\nSo you create separate\nbuckets based on your needs.\n\n121\n00:05:37.670 --> 00:05:40.030\nAnd a bucket, here, let me get\nlogged into S3 and I'll show you.\n\n122\n00:05:40.030 --> 00:05:41.778\nI'm in the AWS console, here.\n\n123\n00:05:41.778 --> 00:05:43.353\nI'll just jump into S3.\n\n124\n00:05:43.353 --> 00:05:46.790\nAnd inside of S3,\nif you don't have any buckets,\n\n125\n00:05:46.790 --> 00:05:48.750\nyou'll see a screen\nasking you to create one.\n\n126\n00:05:48.750 --> 00:05:50.570\nBut if you have them,\nyou'll see the screen that I'm on, and\n\n127\n00:05:50.570 --> 00:05:52.160\nI'll see some of\nthe buckets that I've got.\n\n128\n00:05:52.160 --> 00:05:54.338\nAnd I can create a new bucket right here.\n\n129\n00:05:54.338 --> 00:05:57.790\nAnd when we create a bucket,\nyou're really just giving it a name and\n\n130\n00:05:57.790 --> 00:05:59.120\npicking a region.\n\n131\n00:05:59.120 --> 00:06:00.200\nNow, here's the interesting part.\n\n132\n00:06:00.200 --> 00:06:03.870\nWhen you create a bucket,\na bucket is not tied to a server.\n\n133\n00:06:03.870 --> 00:06:07.010\nA bucket can be accessed from\nevery region in the world.\n\n134\n00:06:07.010 --> 00:06:10.080\nSo, all of the AWS regions\nhave access to this bucket.\n\n135\n00:06:10.080 --> 00:06:15.255\nAnd if I make it public, every person\nin the world has access to this bucket.\n\n136\n00:06:15.255 --> 00:06:20.320\nBut the definition of the bucket, where\nwe define it, has to reside somewhere.\n\n137\n00:06:20.320 --> 00:06:22.690\nAnd so, we pick a region for\nthat to reside, and\n\n138\n00:06:22.690 --> 00:06:24.535\nthat's where it's gonna be tied to.\n\n139\n00:06:24.535 --> 00:06:27.700\nSo, you usually want to pick\na region that's close to you or\n\n140\n00:06:27.700 --> 00:06:31.050\nclose to your customers depending\non who you care more about.\n\n141\n00:06:31.050 --> 00:06:32.570\nAnd so, you'll pick one based on that.\n\n142\n00:06:32.570 --> 00:06:36.441\nSo, if I wanna create\nan itprotv-test-bucket,\n\n143\n00:06:36.441 --> 00:06:41.396\nI can make one, and\nI can pick a region we're in Florida.\n\n144\n00:06:41.396 --> 00:06:44.165\nSo, I might choose US Standard,\nwhich is in Northern Virginia.\n\n145\n00:06:44.165 --> 00:06:47.175\nThat's probably the closest\none that I can pick.\n\n146\n00:06:47.175 --> 00:06:51.570\nThere's another region over in,\nis there one in Texas these days?\n\n147\n00:06:51.570 --> 00:06:52.880\nI think there's one in\nTexas that I can pick.\n\n148\n00:06:52.880 --> 00:06:56.400\nBut either way, northern Virginia,\nI think, is the closest for us.\n\n149\n00:06:56.400 --> 00:06:59.230\nNow, when I pick a name,\ninteresting thing here.\n\n150\n00:06:59.230 --> 00:07:02.470\nI mentioned how this is tied\nto a particular region, right?\n\n151\n00:07:02.470 --> 00:07:08.390\nWell, the name has to be\nunique across all of AWS.\n\n152\n00:07:08.390 --> 00:07:09.340\nEverywhere.\n\n153\n00:07:09.340 --> 00:07:11.400\nThe entire AWS service.\n\n154\n00:07:11.400 --> 00:07:13.120\nEvery region across the globe.\n\n155\n00:07:13.120 --> 00:07:15.950\nAmazon has over 100,000 AWS customers, or\n\n156\n00:07:15.950 --> 00:07:17.680\nthey have hundreds of\nthousands of customers.\n\n157\n00:07:18.760 --> 00:07:20.820\nThey've taken a lot of names.\n\n158\n00:07:20.820 --> 00:07:24.820\nSo, if I try to pick\na name like test-bucket,\n\n159\n00:07:24.820 --> 00:07:29.440\nI can guarantee you somebody out\nthere has used test-bucket before.\n\n160\n00:07:29.440 --> 00:07:31.450\nSure enough, name's already taken, right?\n\n161\n00:07:31.450 --> 00:07:33.750\nNow, I don't know who,\nthey could be in any region out there.\n\n162\n00:07:33.750 --> 00:07:35.798\nThis has to be a globally unique name.\n\n163\n00:07:35.798 --> 00:07:38.390\nAnd so,\na best practice that we use on this,\n\n164\n00:07:38.390 --> 00:07:41.615\nis when you name a Bucket,\nadd your domain to it.\n\n165\n00:07:41.615 --> 00:07:45.035\nSo, for example,\nI might add .itpro.tv to it.\n\n166\n00:07:45.035 --> 00:07:47.935\nThe name actually follows DNS rules, so\n\n167\n00:07:47.935 --> 00:07:50.345\nany character you can use\nin DNS you can use here.\n\n168\n00:07:50.345 --> 00:07:52.312\nAnd so, we can name our\nbuckets in a way like this.\n\n169\n00:07:52.312 --> 00:07:57.774\nIf I stick my domain on it, I doubt\nanybody's made test-bucket.itpro.tv.\n\n170\n00:07:57.774 --> 00:07:59.792\nI might even choose to get rid\nof that hyphen or keep it.\n\n171\n00:07:59.792 --> 00:08:04.333\nBut by doing that, it helps me to make\nsure that I'm gonna be unique, okay?\n\n172\n00:08:04.333 --> 00:08:07.040\nAnd now I can hit create, and there we go.\n\n173\n00:08:07.040 --> 00:08:08.620\nI just got a bucket created.\n\n174\n00:08:08.620 --> 00:08:10.820\nThere's my test bucket, all right?\n\n175\n00:08:10.820 --> 00:08:13.350\nOnce I've got a bucket,\nI can start to throw files in it.\n\n176\n00:08:13.350 --> 00:08:16.695\nThe bucket is really a container,\na partition that I've made.\n\n177\n00:08:16.695 --> 00:08:20.820\nNt like a disk partition, but a partition\nbetween my data here up in the cloud.\n\n178\n00:08:20.820 --> 00:08:24.430\nAnd from there I can start\nto throw files inside of it.\n\n179\n00:08:24.430 --> 00:08:25.690\nMine's empty, right?\n\n180\n00:08:25.690 --> 00:08:28.720\nSo I can start putting data in\nthere which might be a file or\n\n181\n00:08:28.720 --> 00:08:31.820\nit might be some other kind of data\nthat I'm choosing to put here.\n\n182\n00:08:31.820 --> 00:08:34.790\nIt could be the image cache for\n\n183\n00:08:34.790 --> 00:08:37.380\nsome kind of relational database\nlike blob storage for a database.\n\n184\n00:08:37.380 --> 00:08:38.710\nI could be using that here.\n\n185\n00:08:38.710 --> 00:08:40.100\nSo they're not actually files.\n\n186\n00:08:40.100 --> 00:08:43.850\nIt's just raw data the database is\nexpecting to be able to retrieve so\n\n187\n00:08:43.850 --> 00:08:44.930\nI could be putting that here.\n\n188\n00:08:44.930 --> 00:08:48.630\nBut I start to load the data in and\nit's all being thrown inside of this\n\n189\n00:08:48.630 --> 00:08:51.270\nlogical bucket that we've created,\nall right.\n\n190\n00:08:51.270 --> 00:08:57.260\nSo that's how buckets function and inside\nof them, we start to create our files and\n\n191\n00:08:57.260 --> 00:09:01.120\nthe files, they're what I should\nreally be calling objects.\n\n192\n00:09:01.120 --> 00:09:04.780\nYou'll see them called objects or entities\ncuz they're not necessarily a file.\n\n193\n00:09:04.780 --> 00:09:06.500\nI think I've said that a few times now.\n\n194\n00:09:06.500 --> 00:09:09.260\nSo really we load our objects into here.\n\n195\n00:09:09.260 --> 00:09:12.490\nAnd the objects we may choose to make\nthem look like files cuz it's easier for\n\n196\n00:09:12.490 --> 00:09:14.090\nus to wrap our minds around.\n\n197\n00:09:14.090 --> 00:09:16.639\nBut at the end of the day it's just raw\ndata stored right there in that bucket.\n\n198\n00:09:17.930 --> 00:09:20.510\nAll right,\nnow when I throw an object in here,\n\n199\n00:09:20.510 --> 00:09:23.610\nI mention that we don't have limits,\nright?\n\n200\n00:09:23.610 --> 00:09:24.550\nWhich is true and false.\n\n201\n00:09:24.550 --> 00:09:28.690\nSo it's true in that I can have as\nmany objects in this bucket as I want.\n\n202\n00:09:28.690 --> 00:09:34.190\nA lot file systems have limits for\nexample, back in the FAT32 days,\n\n203\n00:09:34.190 --> 00:09:38.060\nin your root folder you couldn't\nhave more than 2,000 or 2,048 files.\n\n204\n00:09:38.060 --> 00:09:42.100\nIf you had more than 2,000 files in\nyour root folder it would freak out and\n\n205\n00:09:42.100 --> 00:09:43.320\nit couldn't store anything else.\n\n206\n00:09:43.320 --> 00:09:47.198\nYou had to put things in sub folders,\nright?\n\n207\n00:09:47.198 --> 00:09:51.970\nOr on ext3 where you had a limit of\nhow many directories you could nest\n\n208\n00:09:51.970 --> 00:09:54.340\ntogether before you finally broke it,\nright?\n\n209\n00:09:54.340 --> 00:09:57.300\nWell, in ext3 you don't have those limits.\n\n210\n00:09:57.300 --> 00:10:00.690\nI can put as many objects\nin this bucket as I want\n\n211\n00:10:00.690 --> 00:10:04.410\nbecause it's not tied to a file system or\nto a disk, right?\n\n212\n00:10:04.410 --> 00:10:08.750\nThe only limitation that I\nhave is that a single object\n\n213\n00:10:08.750 --> 00:10:11.210\ncannot be more than five\nterabytes in size, right?\n\n214\n00:10:11.210 --> 00:10:14.860\nNow 5 terabytes, that's pretty big, right?\n\n215\n00:10:14.860 --> 00:10:17.510\nA 5 terabyte entity is a pretty large one.\n\n216\n00:10:17.510 --> 00:10:19.160\nBut it might happen.\n\n217\n00:10:19.160 --> 00:10:20.890\nWhat if I have a back up of a database?\n\n218\n00:10:20.890 --> 00:10:23.460\nAnd the backup is 10 terabytes in size.\n\n219\n00:10:23.460 --> 00:10:24.460\nAm I out of luck?\n\n220\n00:10:24.460 --> 00:10:25.690\nNo, I'm not out of luck.\n\n221\n00:10:25.690 --> 00:10:27.120\nRemember that you don't have our files.\n\n222\n00:10:27.120 --> 00:10:28.670\nThese are just like data streams, right?\n\n223\n00:10:28.670 --> 00:10:30.870\nBlobs, I can just break it in half.\n\n224\n00:10:30.870 --> 00:10:32.830\nBreak it in half.\nNow, I got two 5 terabyte objects.\n\n225\n00:10:32.830 --> 00:10:34.400\nI chunk them in ext3 and it's fine, right?\n\n226\n00:10:34.400 --> 00:10:35.450\nYou can do that, right?\n\n227\n00:10:35.450 --> 00:10:39.030\nSo that's definitely something\nthat you have to kind of plan for.\n\n228\n00:10:39.030 --> 00:10:40.730\nThat's really the only limit we have and\n\n229\n00:10:40.730 --> 00:10:43.550\nit's not a true limit in that\nwe can't get around it, right?\n\n230\n00:10:43.550 --> 00:10:44.340\nThere's an easy work around,\n\n231\n00:10:44.340 --> 00:10:46.500\nwe just have to break our data\nup to be able to access it.\n\n232\n00:10:46.500 --> 00:10:47.960\nSo that's the only true\nlimit we have though and\n\n233\n00:10:47.960 --> 00:10:50.780\nthe rest of it we can throw as\nmuch data in there as we want, and\n\n234\n00:10:50.780 --> 00:10:54.370\nwhen we name our files, when we start\nto give them some structure and so\n\n235\n00:10:54.370 --> 00:10:58.340\non, that's where things start\nto get interesting, right?\n\n236\n00:10:58.340 --> 00:11:01.960\nBecause technically, there aren't folders.\n\n237\n00:11:01.960 --> 00:11:04.580\nTechnically there aren't file extensions.\n\n238\n00:11:04.580 --> 00:11:07.050\nThat these are just data objects.\n\n239\n00:11:07.050 --> 00:11:09.370\nBut you'll see like here in\nthe web UI that I'm using,\n\n240\n00:11:09.370 --> 00:11:12.270\nthat I've got this\nCreate Folder link up here.\n\n241\n00:11:12.270 --> 00:11:15.090\nI just said there aren't folders,\nbut here's this giant Create Folder,\n\n242\n00:11:15.090 --> 00:11:17.550\nobviously I'm crazy, right?\n\n243\n00:11:17.550 --> 00:11:19.060\nWell, not really.\n\n244\n00:11:19.060 --> 00:11:21.580\nThe folders that you create\naren't really folders.\n\n245\n00:11:21.580 --> 00:11:23.860\nThey're what are called prefixes.\n\n246\n00:11:23.860 --> 00:11:28.160\nWhen we create a data object,\nyou can give it prefixes and\n\n247\n00:11:28.160 --> 00:11:32.950\nsuffixes that mimic what a folder or\nfile extension would be.\n\n248\n00:11:32.950 --> 00:11:36.360\nThey don't actually serve\nany purpose at all in AWS.\n\n249\n00:11:36.360 --> 00:11:40.390\nBut they serve a purpose for us as humans,\nto categorize and isolate and\n\n250\n00:11:40.390 --> 00:11:43.560\nlocate our files, to better find things\nbecause we're use to seeing them.\n\n251\n00:11:43.560 --> 00:11:45.940\nWe're use to folders to\ngroup files together, and\n\n252\n00:11:45.940 --> 00:11:48.830\nextensions to show us\nwhat a data object is.\n\n253\n00:11:48.830 --> 00:11:49.420\nAWS doesn't care.\n\n254\n00:11:49.420 --> 00:11:51.310\nThey're just like, hey, I got this data.\n\n255\n00:11:51.310 --> 00:11:54.670\nAnd in the background it has a unique\nID generated for that data and\n\n256\n00:11:54.670 --> 00:11:57.140\nthat's what it uses to identify it, right?\n\n257\n00:11:57.140 --> 00:12:00.700\nEverything that we throw into\nS3 has an identifier on it.\n\n258\n00:12:00.700 --> 00:12:03.820\nIt's a big long string of letters and\nnumbers that identifies that object.\n\n259\n00:12:03.820 --> 00:12:05.920\nThat's what AWS uses,\nit doesn't care about this stuff.\n\n260\n00:12:05.920 --> 00:12:07.600\nThis stuff is just for us to see.\n\n261\n00:12:07.600 --> 00:12:11.510\nSo if I create a folder called images,\nfor example, right?\n\n262\n00:12:11.510 --> 00:12:13.260\nIt looks like a folder.\n\n263\n00:12:13.260 --> 00:12:14.250\nBut in reality,\n\n264\n00:12:14.250 --> 00:12:18.460\nits just a prefix that's gonna be stuck\nonto any file I put inside of that.\n\n265\n00:12:18.460 --> 00:12:21.830\nSo now, if I upload an image into here,\n\n266\n00:12:21.830 --> 00:12:26.880\nit would show as like a file path\nslash images, slash whatever.\n\n267\n00:12:26.880 --> 00:12:29.970\nBut in reality that's just being stuck\non to the name of that data object and\n\n268\n00:12:29.970 --> 00:12:31.910\nit's just a name stored in a value, right?\n\n269\n00:12:31.910 --> 00:12:36.380\nAnd those values, those are part of the\nkey system that we have inside of here.\n\n270\n00:12:36.380 --> 00:12:39.220\nWhen you create any object\nin here it has a key.\n\n271\n00:12:39.220 --> 00:12:41.260\nThe key is its identifier.\n\n272\n00:12:41.260 --> 00:12:43.790\nAnd we'll see other values\nit can be stored onto.\n\n273\n00:12:43.790 --> 00:12:48.450\nIt can create custom keys and\nhave these name value kind of\n\n274\n00:12:48.450 --> 00:12:51.620\ncorrelated objects that tie on to\neverything as part of their metadata.\n\n275\n00:12:51.620 --> 00:12:53.340\nSo there's a lot that goes on.\n\n276\n00:12:53.340 --> 00:12:56.120\nI mean let me just upload\na file in here real quick.\n\n277\n00:12:56.120 --> 00:13:00.450\nMaybe I'll create\na folder called webpages.\n\n278\n00:13:00.450 --> 00:13:03.400\nAll right, and\nI wanna upload something in here.\n\n279\n00:13:03.400 --> 00:13:06.410\nNow, I'm interacting with\nthis all through the web UI.\n\n280\n00:13:06.410 --> 00:13:10.190\nBut I can be using the AWSLI, I can be\nusing any number of other utilities\n\n281\n00:13:10.190 --> 00:13:12.920\nbecause really what\nAmazon S3 is is an API.\n\n282\n00:13:14.040 --> 00:13:16.460\nIt's an API and\nI'm interacting with that API.\n\n283\n00:13:16.460 --> 00:13:18.490\nNow I'm choosing to use\nthe web front end for that.\n\n284\n00:13:18.490 --> 00:13:21.940\nBut I could be using\nthe command line utilities,\n\n285\n00:13:21.940 --> 00:13:23.750\nI could be using third party utilities.\n\n286\n00:13:23.750 --> 00:13:26.355\nI could be directly Interacting with it,\nright?\n\n287\n00:13:26.355 --> 00:13:31.065\nIt's a REST API, so it's what we expect\nwith most web applications these days.\n\n288\n00:13:31.065 --> 00:13:36.275\nAnd everything I'm sending to it is really\nbeing built around HTTP GET requests,\n\n289\n00:13:36.275 --> 00:13:38.385\nand PUT requests, and\n\n290\n00:13:38.385 --> 00:13:43.620\nif I upload a file I'm really doing\na HTTP PUT to put that file up there.\n\n291\n00:13:43.620 --> 00:13:48.660\nAnd it does get secured using SSL, so\nwe get encryption there as we upload our\n\n292\n00:13:48.660 --> 00:13:53.330\ndata or as we pull it back out, you can\nchoose to use SSL or not, it's up to you.\n\n293\n00:13:53.330 --> 00:13:56.910\nBut at the end of the day,\nits just interacting with an API.\n\n294\n00:13:56.910 --> 00:14:01.480\nNow we usually won't directly talk to the\nREST API, unless you're developing your\n\n295\n00:14:01.480 --> 00:14:04.820\nown application and you don't wanna\nuse any of the SDK type stuff.\n\n296\n00:14:04.820 --> 00:14:08.050\nBut otherwise, we're gonna use things like\nthe SDK and the CLI to interact with it.\n\n297\n00:14:08.050 --> 00:14:09.250\nAnd that's what I'm doing here.\n\n298\n00:14:09.250 --> 00:14:10.500\n&gt;&gt; Don, real quick.\n\n299\n00:14:10.500 --> 00:14:14.690\nI noticed that we need\nuniqueness in our bucket names.\n\n300\n00:14:14.690 --> 00:14:18.380\nDo we have to have unique\nsubfolder names or these prefixes?\n\n301\n00:14:18.380 --> 00:14:20.720\nDo those have to be unique\nwithin the bucket also?\n\n302\n00:14:20.720 --> 00:14:22.510\n&gt;&gt; Within the bucket they do, right?\n\n303\n00:14:22.510 --> 00:14:24.180\nSo if I'm in a bucket, right?\n\n304\n00:14:24.180 --> 00:14:27.140\nI'm in my test bucket here and\nI created a folder called Images and\n\n305\n00:14:27.140 --> 00:14:28.226\na folder called Webpages, right?\n\n306\n00:14:29.400 --> 00:14:33.323\nWell, if I try and create another folder\ncalled images, it's not gonna be too happy\n\n307\n00:14:33.323 --> 00:14:37.580\nwith that, and see how I still end up with\njust the one because I already had one.\n\n308\n00:14:37.580 --> 00:14:38.770\nAnd notice how it didn't complain.\n\n309\n00:14:38.770 --> 00:14:43.110\nIt didn't say, duplicate name,\nbecause this isn't actually a file, is it?\n\n310\n00:14:43.110 --> 00:14:45.100\nIt's just it's a prefix.\n\n311\n00:14:45.100 --> 00:14:46.860\nIt's going to become part of a file name.\n\n312\n00:14:46.860 --> 00:14:49.450\nThere's no files in it, so\ntechnically it doesn't exist.\n\n313\n00:14:49.450 --> 00:14:51.720\nI know it's on my screen, but\ntechnically it doesn't exist.\n\n314\n00:14:51.720 --> 00:14:53.150\nSo it didn't complain.\n\n315\n00:14:53.150 --> 00:14:55.120\nIt just didn't do it, right?\n\n316\n00:14:55.120 --> 00:14:58.890\nI could go to another bucket though,\nI could go to my sample bucket.\n\n317\n00:14:58.890 --> 00:15:02.290\nAnd in the sample bucket,\nI could create a folder in here, and\n\n318\n00:15:02.290 --> 00:15:06.310\nI could call it images and\nit's gonna get created right there.\n\n319\n00:15:06.310 --> 00:15:09.890\nOr I can create another one\ncalled webpages and there it is.\n\n320\n00:15:09.890 --> 00:15:11.240\nIt's created, right?\n\n321\n00:15:11.240 --> 00:15:16.037\nAnd I've already got some other files in\nhere like index.html or heartbeat.php,\n\n322\n00:15:16.037 --> 00:15:16.970\nthese files.\n\n323\n00:15:16.970 --> 00:15:19.570\nAnd these are actual\nfiles that I uploaded.\n\n324\n00:15:19.570 --> 00:15:21.570\nWell not really.\n\n325\n00:15:21.570 --> 00:15:24.000\nIt's the data from the file, right?\n\n326\n00:15:24.000 --> 00:15:27.020\nThe fact that this is called index.html\ndoesn't actually mean anything.\n\n327\n00:15:27.020 --> 00:15:29.235\nThe true name of the object\nwould be index, and\n\n328\n00:15:29.235 --> 00:15:32.540\n.html is a suffix that I stuck\non there to help me identify it.\n\n329\n00:15:32.540 --> 00:15:36.650\nAnd then its in my sample123 bucket,\nright?\n\n330\n00:15:36.650 --> 00:15:38.580\nBut I could move it into\none of these folders, and\n\n331\n00:15:38.580 --> 00:15:42.120\nthe folder would become\na prefix of that option.\n\n332\n00:15:42.120 --> 00:15:48.800\nBut notice when I look at my options here,\nI don't have a move option, right?\n\n333\n00:15:48.800 --> 00:15:50.943\nAnd the reason is if you think\nabout HTTP what do we have?\n\n334\n00:15:50.943 --> 00:15:53.789\nWe have HTTP GET to get something,\n\n335\n00:15:53.789 --> 00:15:58.217\nHTTP PUT to put something,\nor HTTP move or HTTP copy.\n\n336\n00:15:58.217 --> 00:16:03.800\nSo I have to get it, delete it,\nput it in the new destination, right?\n\n337\n00:16:03.800 --> 00:16:08.800\nSo it's three steps, and so that's why\nwe see cut and copy, and whatever.\n\n338\n00:16:08.800 --> 00:16:11.270\nIt's gonna go through those\nsteps in the background for me.\n\n339\n00:16:11.270 --> 00:16:16.440\nSo I can cut these files, I can go into\nweb pages, and then in here I can paste\n\n340\n00:16:16.440 --> 00:16:21.944\nthose files and it's gonna go through\nthe operation doing the HTTP interaction\n\n341\n00:16:21.944 --> 00:16:26.730\nwith the rest API that move that data\nis all API driven on the back end.\n\n342\n00:16:28.650 --> 00:16:33.287\nAll right, so now when I look\nat something like heartbeat.php,\n\n343\n00:16:33.287 --> 00:16:37.080\nthis file it actually got\na prefix of slash web pages,\n\n344\n00:16:37.080 --> 00:16:41.740\nit's got an object name of heartbeat and\na suffix of php, right?\n\n345\n00:16:42.760 --> 00:16:47.190\nAnd the folders,\nwhen we reference them as a URL, right?\n\n346\n00:16:47.190 --> 00:16:50.750\nIf I look at heartbeat.php and\nI look over here at the properties for\n\n347\n00:16:50.750 --> 00:16:53.040\nit, I'll see the URL for it.\n\n348\n00:16:53.040 --> 00:16:55.080\nAnd this is the URL for\nme accessing the object.\n\n349\n00:16:55.080 --> 00:17:00.960\nAnd you'll notice s3.amazonaws.com,\nthat's the root URL for it.\n\n350\n00:17:00.960 --> 00:17:02.940\nAnd then after that is the bucket name.\n\n351\n00:17:02.940 --> 00:17:06.891\nAnd here's where we see why we have\nto have that uniqueness, right?\n\n352\n00:17:06.891 --> 00:17:08.390\nI see sample123.itpro.tv.\n\n353\n00:17:08.390 --> 00:17:10.870\nI could've created a bucket with any name.\n\n354\n00:17:10.870 --> 00:17:15.200\nIt didn't even know if I owned itpro.tv,\nright.\n\n355\n00:17:15.200 --> 00:17:17.900\nBut the beginning is s3.amazonaws.com.\n\n356\n00:17:17.900 --> 00:17:19.470\nThat doesn't specify a region.\n\n357\n00:17:19.470 --> 00:17:23.420\nIt doesn't say North Virginia,\nit doesn't say Oregon or wherever.\n\n358\n00:17:24.630 --> 00:17:26.390\nIt just says that general name and so\n\n359\n00:17:26.390 --> 00:17:28.950\nthat's why we have to have\nuniqueness across the entire world.\n\n360\n00:17:28.950 --> 00:17:34.420\nThere's the bucket name and\nthen I see, /webpages/heartbeat.php.\n\n361\n00:17:34.420 --> 00:17:37.460\nAnd what I'm really\nlooking at here is prefix,\n\n362\n00:17:37.460 --> 00:17:40.320\nname, suffix, with a couple of delimiters.\n\n363\n00:17:40.320 --> 00:17:42.450\nAnd the delimiters are the slash or\n\n364\n00:17:42.450 --> 00:17:47.050\nthe period that's separating those out,\nto create what looks like a file.\n\n365\n00:17:47.050 --> 00:17:48.430\nSo we get file-like function but\n\n366\n00:17:48.430 --> 00:17:52.250\nin reality it is just a data\nobject stuck in the background.\n\n367\n00:17:53.650 --> 00:17:57.580\nAnd assuming that I've made this public,\nthen I can browse to it and get to it.\n\n368\n00:17:57.580 --> 00:18:00.580\nBut by default when you\ncreate an s3 bucket,\n\n369\n00:18:00.580 --> 00:18:02.720\neverything inside of it is private.\n\n370\n00:18:02.720 --> 00:18:06.650\nIt's all hidden away and\nthe world is not allowed to get at it.\n\n371\n00:18:06.650 --> 00:18:08.530\nSo you have permissions for everything.\n\n372\n00:18:08.530 --> 00:18:10.850\nYou have permissions for the bucket,\nyou have permissions for\n\n373\n00:18:10.850 --> 00:18:12.220\nthe objects inside of it.\n\n374\n00:18:12.220 --> 00:18:14.190\nAnd you can control who has access to it.\n\n375\n00:18:14.190 --> 00:18:15.820\nI'm gonna talk about\nthose a little bit later.\n\n376\n00:18:15.820 --> 00:18:17.290\nI'm getting a bit ahead of myself.\n\n377\n00:18:17.290 --> 00:18:22.240\nBut basically when we start to look at\nan object there's a lot tied to what that\n\n378\n00:18:22.240 --> 00:18:27.220\nobject is and the URL is simply\nhow we access that object.\n\n379\n00:18:27.220 --> 00:18:29.710\nIt doesn't actually define\nanything about the object itself.\n\n380\n00:18:29.710 --> 00:18:33.880\nAnd then after that you start to see where\nwe do define things about the object.\n\n381\n00:18:33.880 --> 00:18:37.580\nWhen I pull up the details we can see\ninformation about how it's being stored\n\n382\n00:18:37.580 --> 00:18:38.760\nand other information.\n\n383\n00:18:38.760 --> 00:18:40.060\nAnd this same thing goes for the bucket.\n\n384\n00:18:40.060 --> 00:18:44.700\nIf I were to switch back to the buckets\nproperties you'll see a lot more options.\n\n385\n00:18:44.700 --> 00:18:47.910\nI'm gonna talk about these over the next\ncouple of episodes as we evaluate what\n\n386\n00:18:47.910 --> 00:18:48.930\nS3 can do for us.\n\n387\n00:18:50.490 --> 00:18:51.570\nAll right.\n\n388\n00:18:51.570 --> 00:18:53.690\nSo files and folders.\n\n389\n00:18:53.690 --> 00:18:56.400\nThey have to be unique within a bucket.\n\n390\n00:18:56.400 --> 00:18:57.740\nBut I can have files and\n\n391\n00:18:57.740 --> 00:19:00.190\nfolders that have the same exact name\njust stored in different buckets.\n\n392\n00:19:00.190 --> 00:19:01.910\nSo, you may have more than one copy and\n\n393\n00:19:01.910 --> 00:19:05.000\nspread them out across buckets and\nthat's fine.\n\n394\n00:19:05.000 --> 00:19:08.040\nAnd the folder name becomes\npart of the file name so\n\n395\n00:19:08.040 --> 00:19:11.310\nI could reuse the same file name in more\nthan one place in the same bucket as long\n\n396\n00:19:11.310 --> 00:19:15.270\nas they're in different folders cuz that\nis considered part of the file name.\n\n397\n00:19:15.270 --> 00:19:17.220\nAnd we enforce uniqueness that way, too.\n\n398\n00:19:17.220 --> 00:19:20.670\nSo pretty much like working\nwith a file system on that.\n\n399\n00:19:22.050 --> 00:19:23.170\nAll right, what else do we have.\n\n400\n00:19:23.170 --> 00:19:25.890\nI've talked a little about the API,\nand how we interact with that.\n\n401\n00:19:27.080 --> 00:19:29.490\nAs far as the API is concerned,\n\n402\n00:19:29.490 --> 00:19:33.300\nthere's really only a handful of\ncommands that we can issue against it.\n\n403\n00:19:33.300 --> 00:19:36.080\nThe API for\nAmazon S3 is designed to be simple,\n\n404\n00:19:36.080 --> 00:19:38.290\nthat's why they call it\nthe Simple Storage Solution.\n\n405\n00:19:38.290 --> 00:19:41.030\nThey wanted it to be, or\nsimple storage service, sorry.\n\n406\n00:19:41.030 --> 00:19:44.920\nThey wanted it to be easy for developers\nto quickly have storage on the web and\n\n407\n00:19:44.920 --> 00:19:48.390\nnot have to go through a giant set of\nhoops to get to work with this thing.\n\n408\n00:19:48.390 --> 00:19:51.860\nThat if you just decided, you know what,\nforget it, I'm not gonna use Amazon's SDK,\n\n409\n00:19:51.860 --> 00:19:52.805\nI wanna write it myself.\n\n410\n00:19:52.805 --> 00:19:54.845\nI'm gonna interact with this API directly,\nright?\n\n411\n00:19:54.845 --> 00:19:56.525\nThis is what Justin does.\n\n412\n00:19:56.525 --> 00:19:59.325\nAnd then all of a sudden\nwe have to say all right,\n\n413\n00:19:59.325 --> 00:20:01.415\nwhat are all the commands\nI can send to the API?\n\n414\n00:20:01.415 --> 00:20:05.625\nI gotta rewrite all of those from my\nsystem to be able to interact with it.\n\n415\n00:20:05.625 --> 00:20:07.325\nIt's gonna be a nightmare isn't it?\n\n416\n00:20:07.325 --> 00:20:08.995\nNot really, it's only like seven commands.\n\n417\n00:20:08.995 --> 00:20:11.105\nSo it really wouldn't take\nby maybe half an hour for\n\n418\n00:20:11.105 --> 00:20:14.350\nyou to write complete interaction\nwith S3 into your application.\n\n419\n00:20:14.350 --> 00:20:18.570\nEven if you didn't use Amazon's SDK at\nall, you'd be crazy not to use it, but\n\n420\n00:20:18.570 --> 00:20:20.400\nif you just wanted to go on your own.\n\n421\n00:20:20.400 --> 00:20:22.490\nSo, for example, did I say seven,\n\n422\n00:20:22.490 --> 00:20:25.070\nlooks like it's actually,\nit's seven if we count delete.\n\n423\n00:20:25.070 --> 00:20:28.990\nSo you've got create or delete a bucket,\nyou can do that through the API.\n\n424\n00:20:28.990 --> 00:20:33.810\nYou've got write an object,\nread an object, delete an object.\n\n425\n00:20:33.810 --> 00:20:35.650\nAnd you got list keys in a bucket.\n\n426\n00:20:35.650 --> 00:20:37.457\nAnd that's it.\n\n427\n00:20:37.457 --> 00:20:39.170\nThat's it.\n\n428\n00:20:39.170 --> 00:20:41.800\nThat's all we can do with S3.\n\n429\n00:20:41.800 --> 00:20:45.630\nAnything else is just really\nsetting objects on a bucket or\n\n430\n00:20:45.630 --> 00:20:49.080\nconfiguring a bucket or\nwhatever, and that's it.\n\n431\n00:20:49.080 --> 00:20:52.190\nSo as far as interacting\nwith the buckets themselves,\n\n432\n00:20:52.190 --> 00:20:54.180\njust seven different\ncommands with the APIs.\n\n433\n00:20:54.180 --> 00:20:55.250\nSo that's why it's super simple.\n\n434\n00:20:55.250 --> 00:20:58.870\nThat's where the simple in S3\ncomes from is there's only so\n\n435\n00:20:58.870 --> 00:21:00.190\nmany commands that we issue.\n\n436\n00:21:00.190 --> 00:21:02.530\n&gt;&gt; So Don, even though there's\na limited set of commands.\n\n437\n00:21:02.530 --> 00:21:06.650\nI can take those kind of base commands and\ncompose them together.\n\n438\n00:21:06.650 --> 00:21:07.570\nBeing a developer,\n\n439\n00:21:07.570 --> 00:21:13.480\nI think of them I can compose this delete\nwith this copy or with the get, right?\n\n440\n00:21:13.480 --> 00:21:17.910\nI can get, I can delete and then I can\ncreate and that would simulate a move.\n\n441\n00:21:17.910 --> 00:21:21.010\n&gt;&gt; Absolutely, yeah, so\nyou can make it as complex as you want but\n\n442\n00:21:21.010 --> 00:21:23.740\nit's up to you at that point and\nas far as the commands we send to Amazon,\n\n443\n00:21:23.740 --> 00:21:27.780\nit's just that handful right there so\nit becomes really easy to do and\n\n444\n00:21:27.780 --> 00:21:30.732\nthat's a key thing cuz if you're gonna\nroll us out of some kind of party or\n\n445\n00:21:30.732 --> 00:21:35.050\nproductions servers, you don't want some\ncomplex infrastructure behind the scenes,\n\n446\n00:21:35.050 --> 00:21:37.540\nthis makes it's super simple.\n\n447\n00:21:37.540 --> 00:21:40.340\nAll right, couple of the thing to\nthink about here to take this one,\n\n448\n00:21:40.340 --> 00:21:45.880\nwhen we deploy S3 bucket,\nwe have to make some choices, okay?\n\n449\n00:21:45.880 --> 00:21:49.260\nAnd those choices center\naround a few things,\n\n450\n00:21:49.260 --> 00:21:51.890\nthere is the region,\nthat we have to choose.\n\n451\n00:21:51.890 --> 00:21:56.320\nThere was another choice that we didn't\nreally see when I was creating my bucket.\n\n452\n00:21:56.320 --> 00:21:59.680\nLet me go back up here to my bucket\nscreen, I will create a new bucket.\n\n453\n00:21:59.680 --> 00:22:03.180\nIt asked me to pick a bucket name and\na region, right?\n\n454\n00:22:03.180 --> 00:22:09.180\nAnd so I gave it a name,\nI'll do test bucket2.itpro.tv and\n\n455\n00:22:09.180 --> 00:22:13.430\nmaybe this one I'll stick somewhere else,\nwe'll go Oregon, right.\n\n456\n00:22:13.430 --> 00:22:16.290\nAnd so I'm gonna go ahead and\nmove forward with that, and\n\n457\n00:22:16.290 --> 00:22:18.100\nI've got setup logging, okay.\n\n458\n00:22:18.100 --> 00:22:19.980\nSo we can turn on logging on a bucket, and\n\n459\n00:22:19.980 --> 00:22:22.690\nI'm gonna talk a little bit more\nabout that in another episode.\n\n460\n00:22:22.690 --> 00:22:25.920\nBut we can actually log a lot of the\nactions that are occurring on the system,\n\n461\n00:22:25.920 --> 00:22:27.480\nand you can do some really\ncool stuff with that,\n\n462\n00:22:27.480 --> 00:22:29.300\nthat's why I wanna talk\nabout it a little bit later.\n\n463\n00:22:29.300 --> 00:22:32.200\nBut after that we create it and\nthat's it, right?\n\n464\n00:22:32.200 --> 00:22:35.370\nSo really if I don't turn on\nlogging I just give it a name and\n\n465\n00:22:35.370 --> 00:22:36.620\na region and that's it.\n\n466\n00:22:36.620 --> 00:22:38.720\nIt doesn't seem like\nthere's a lot of options.\n\n467\n00:22:38.720 --> 00:22:41.290\nBut when we go back to that bucket and\n\n468\n00:22:41.290 --> 00:22:45.850\nwe look at the bucket properties,\nthey're actually are a lot of options.\n\n469\n00:22:45.850 --> 00:22:46.350\nRight?\n\n470\n00:22:46.350 --> 00:22:47.930\nThe first are permissions.\n\n471\n00:22:47.930 --> 00:22:51.270\nAnd on the permissions sides we have\na legacy way of doing permissions and\n\n472\n00:22:51.270 --> 00:22:52.630\na modern way of doing permissions.\n\n473\n00:22:52.630 --> 00:22:55.220\nEverything should be done through\nthe new way which is through the IAM.\n\n474\n00:22:55.220 --> 00:22:58.980\nSo I'm gonna talk about IAM\npolicies in the next episode.\n\n475\n00:22:58.980 --> 00:23:01.930\nBut the old way of doing it\nwas done from right here.\n\n476\n00:23:01.930 --> 00:23:05.440\nWe would assign permissions\ndirectly on the bucket and\n\n477\n00:23:05.440 --> 00:23:07.900\nyou'll see the default\npermissions are from my account.\n\n478\n00:23:07.900 --> 00:23:11.920\nMy account is called awsdemo\nthat I get full access to it.\n\n479\n00:23:11.920 --> 00:23:13.450\nAnd everybody else gets nothing.\n\n480\n00:23:13.450 --> 00:23:15.230\nNo one else gets access to this bucket so\n\n481\n00:23:15.230 --> 00:23:19.130\nit's a private bucket that\njust I have access to.\n\n482\n00:23:19.130 --> 00:23:20.570\nAnd then as you look down,\n\n483\n00:23:20.570 --> 00:23:24.950\nyou'll see all of these other things\nthat we can tweak and change.\n\n484\n00:23:24.950 --> 00:23:26.950\nI'm gonna run through each of\nthese in the next episode so\n\n485\n00:23:26.950 --> 00:23:31.180\nwe can kind of see what all of them do and\nhow they relate to what we're storing.\n\n486\n00:23:31.180 --> 00:23:34.960\nBut one of the biggest decisions that\nwe're going to have to make when we store\n\n487\n00:23:34.960 --> 00:23:38.630\nthis is the type of storage\nthat we're going to use.\n\n488\n00:23:38.630 --> 00:23:42.210\nYou might have noticed when I was in my\nother bucket, the one that actually had\n\n489\n00:23:42.210 --> 00:23:46.020\nfiles in it, let me go back here and pull\nup one of these that actually had files.\n\n490\n00:23:46.020 --> 00:23:48.359\nWhen I look at a file when\nI go to the properties.\n\n491\n00:23:49.480 --> 00:23:51.110\nWe can pull up the details, and\n\n492\n00:23:51.110 --> 00:23:54.895\nyou'll see the different types of\nstorage that we can use, all right?\n\n493\n00:23:54.895 --> 00:23:56.474\nLet's talk about those real quick.\n\n494\n00:23:56.474 --> 00:24:00.805\nWe've got four different types, or three\ndifferent types of storage available.\n\n495\n00:24:00.805 --> 00:24:02.627\nAnd there's actually a fourth one.\n\n496\n00:24:02.627 --> 00:24:03.649\nIt's just not here on this screen.\n\n497\n00:24:03.649 --> 00:24:05.630\nSo I'll go ahead and stick with my four.\n\n498\n00:24:05.630 --> 00:24:08.200\nSo there's four different types\nof storage that we can use, and\n\n499\n00:24:08.200 --> 00:24:10.900\nthere's encryption options\nthat we can set, all right?\n\n500\n00:24:10.900 --> 00:24:15.420\nWhen we upload our data\ninto S3 the default is for\n\n501\n00:24:15.420 --> 00:24:20.520\nit to go into what's called standard\nredundancy and to not be encrypted.\n\n502\n00:24:20.520 --> 00:24:21.986\nOkay, that's the default.\n\n503\n00:24:21.986 --> 00:24:24.057\nAnd that's usually what most people want,\nbut\n\n504\n00:24:24.057 --> 00:24:27.080\nyou may have needs that differ\nfrom that so you can change it.\n\n505\n00:24:27.080 --> 00:24:31.080\nNow, on the storage side,\nwhat we have are four storage classes.\n\n506\n00:24:31.080 --> 00:24:33.459\nAnd the storage classes\ndictate a couple of things.\n\n507\n00:24:33.459 --> 00:24:36.220\nThe most important of which is how\nmuch we're gonna have to pay, right?\n\n508\n00:24:36.220 --> 00:24:38.550\nEach one costs a little bit different.\n\n509\n00:24:38.550 --> 00:24:42.390\nThe standard redundancy is actually the\nmost expensive of the four options, and\n\n510\n00:24:42.390 --> 00:24:44.060\nthen they get cheaper from there.\n\n511\n00:24:44.060 --> 00:24:48.100\nStandard redundancy is\ngiving us a guarantee for\n\n512\n00:24:48.100 --> 00:24:50.680\ndurability and availability, all right?\n\n513\n00:24:50.680 --> 00:24:53.080\nSo let me talk about those\ntwo concepts real quick.\n\n514\n00:24:53.080 --> 00:24:54.130\nDurability.\n\n515\n00:24:54.130 --> 00:25:00.530\nDurability means, is my data still\ngoing to be available in the future?\n\n516\n00:25:00.530 --> 00:25:04.010\nSo a year from now, two years from now,\nten years from now,\n\n517\n00:25:04.010 --> 00:25:06.350\nis my data still going to be there?\n\n518\n00:25:06.350 --> 00:25:07.170\nThat's durability.\n\n519\n00:25:08.280 --> 00:25:12.790\nAvailability is,\ncan I get to my data right now, right?\n\n520\n00:25:12.790 --> 00:25:14.890\nIs it available at this very moment?\n\n521\n00:25:14.890 --> 00:25:18.510\nSo they're very similar concepts,\ndurability and availability, except\n\n522\n00:25:18.510 --> 00:25:23.150\ndurability is thinking about the future,\navailability is thinking about right now.\n\n523\n00:25:23.150 --> 00:25:25.561\nAnd with standard redundancy,\n\n524\n00:25:25.561 --> 00:25:30.032\nyou're actually getting a very\nhigh level of durability.\n\n525\n00:25:30.032 --> 00:25:36.032\nIt's 99.99999999.\nIt's like 11 nines or something.\n\n526\n00:25:36.032 --> 00:25:36.598\n&gt;&gt; Yeah.\n\n527\n00:25:36.598 --> 00:25:39.180\nI think that's one of their\nmarketing ploys I've heard.\n\n528\n00:25:39.180 --> 00:25:42.844\nIt's like nine nines or 11 nines of\ndurability or something of that nature.\n\n529\n00:25:42.844 --> 00:25:45.923\n&gt;&gt; Yeah.\nAnd if you work that out mathematically,\n\n530\n00:25:45.923 --> 00:25:48.820\nit basically equals\na 0% chance of failure.\n\n531\n00:25:48.820 --> 00:25:55.390\nBut I did see the example that if you\nwere to store 1,000 objects in S3,\n\n532\n00:25:55.390 --> 00:26:00.760\nthen you would lose, you would possibly\nlose I guess, it's not a guarantee,\n\n533\n00:26:00.760 --> 00:26:07.000\nbut you'd possibly lose 1 of those 1,000\nobjects once every 10 million years.\n\n534\n00:26:07.000 --> 00:26:08.633\nThat's pretty good durability.\n\n535\n00:26:08.633 --> 00:26:11.460\nYou can pretty much guarantee\nyour data is gonna be available.\n\n536\n00:26:11.460 --> 00:26:12.419\nNow, how do they do that?\n\n537\n00:26:12.419 --> 00:26:14.444\nHow do they make sure that\ndurability is maintained?\n\n538\n00:26:14.444 --> 00:26:19.860\nWell, they do it by replicating your data.\n\n539\n00:26:19.860 --> 00:26:24.130\nAnd that data is replicated\nwithin your availability zone.\n\n540\n00:26:24.130 --> 00:26:25.397\nAnd so it's available right there.\n\n541\n00:26:25.397 --> 00:26:28.355\nAnd if they had a storage failure\non their end, you wouldn't see it,\n\n542\n00:26:28.355 --> 00:26:31.823\nbecause it would just immediately flip\nover to the replicated data right there in\n\n543\n00:26:31.823 --> 00:26:32.900\nthe availability zone.\n\n544\n00:26:32.900 --> 00:26:35.610\nThat's so\nthey're able to guarantee that durability.\n\n545\n00:26:35.610 --> 00:26:38.353\nBut durability is not availability.\n\n546\n00:26:38.353 --> 00:26:43.580\nThey're guaranteeing that your data's\ngonna be there ten years from now, right?\n\n547\n00:26:43.580 --> 00:26:46.507\nBut they're not guaranteeing the data's\ngonna be there right at this very moment.\n\n548\n00:26:46.507 --> 00:26:48.391\nRight at this very moment,\nthat's availability.\n\n549\n00:26:48.391 --> 00:26:52.280\nAnd availability is only four 9s,\n99.99% of the time.\n\n550\n00:26:52.280 --> 00:26:57.257\nAnd if you work that out, that works\nout to about 52 minutes of downtime\n\n551\n00:26:57.257 --> 00:27:02.415\nper year or 54 minutes, somewhere\naround there, of downtime per year.\n\n552\n00:27:02.415 --> 00:27:03.964\nSo just a little less\nthan an hour per year.\n\n553\n00:27:03.964 --> 00:27:06.711\nNow, that sounds like a lot.\n\n554\n00:27:06.711 --> 00:27:09.522\nAt first, you're like,\nan hour, a year, my goodness.\n\n555\n00:27:09.522 --> 00:27:13.354\nBut if you have a storage appliance fail,\nit's gonna flip you over to another one,\n\n556\n00:27:13.354 --> 00:27:15.349\nthat's gonna take a few seconds at least.\n\n557\n00:27:15.349 --> 00:27:17.728\nIf they're doing regular maintenance,\nthey've gotta move you over,\n\n558\n00:27:17.728 --> 00:27:18.669\nthat can take a few seconds.\n\n559\n00:27:18.669 --> 00:27:21.451\nAnd those few seconds every here,\nthere they add up.\n\n560\n00:27:21.451 --> 00:27:23.004\nAnd so\nit's not like it's an hour all at once.\n\n561\n00:27:23.004 --> 00:27:26.279\nIt's usually spread out, and\nit usually doesn't even happen, right.\n\n562\n00:27:26.279 --> 00:27:28.529\nIf you don't have a failure,\nthen you have complete uptime.\n\n563\n00:27:28.529 --> 00:27:34.816\nThey're guaranteeing no more than,\nis it 54%?\n\n564\n00:27:34.816 --> 00:27:37.018\n&gt;&gt; I think it's 52 minutes roughly.\n\n565\n00:27:37.018 --> 00:27:37.606\n&gt;&gt; That's right.\n\n566\n00:27:37.606 --> 00:27:40.466\n&gt;&gt; But as someone who's worked\non web applications and\n\n567\n00:27:40.466 --> 00:27:44.764\nthings, when things go horribly awry,\nan hour of downtime sounds like a lot.\n\n568\n00:27:44.764 --> 00:27:48.630\nBut I've had things where I've been like,\nit's been down for eight hours now.\n\n569\n00:27:48.630 --> 00:27:50.499\nI don't really know what's wrong.\n\n570\n00:27:50.499 --> 00:27:52.163\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n571\n00:27:52.163 --> 00:27:54.620\nthat's really good over\nthe course of a year.\n\n572\n00:27:54.620 --> 00:27:55.266\n&gt;&gt; Right.\n\n573\n00:27:55.266 --> 00:27:57.719\n&gt;&gt; And as you said, it's kind of\nspread out throughout the year.\n\n574\n00:27:57.719 --> 00:27:58.392\n&gt;&gt; Yep.\n\n575\n00:27:58.392 --> 00:28:01.014\nAnd there's things we can\ndo to help avoid that too.\n\n576\n00:28:01.014 --> 00:28:03.123\nYou can maintain more than\nthe one copy of your data.\n\n577\n00:28:03.123 --> 00:28:06.716\nAnd now your application can be\nwritten to look more than one place.\n\n578\n00:28:06.716 --> 00:28:10.766\nAnd now you're able to maintain\nthe higher number of 9's if you need it.\n\n579\n00:28:10.766 --> 00:28:11.728\nBut most people don't.\n\n580\n00:28:11.728 --> 00:28:16.290\nMost people are fully fine functioning\ninside of this level of availability.\n\n581\n00:28:16.290 --> 00:28:22.680\nNow, we can save money if we go into one\nof the other availability models, okay?\n\n582\n00:28:22.680 --> 00:28:25.788\nThere's standard S3 storage,\nstandard redundancy.\n\n583\n00:28:25.788 --> 00:28:28.655\nBut then there's also\nStandard Infrequent Access.\n\n584\n00:28:28.655 --> 00:28:30.031\nYou’ll normally see it\nwritten as Standard IA.\n\n585\n00:28:30.031 --> 00:28:32.640\nLike on the exam,\nthey’ll usually write Standard IA.\n\n586\n00:28:32.640 --> 00:28:34.300\nAnd this is infrequent access.\n\n587\n00:28:34.300 --> 00:28:37.186\nWith infrequent access, this means\nit's data that's important to you, but\n\n588\n00:28:37.186 --> 00:28:39.220\nthat you don’t use it all that often.\n\n589\n00:28:39.220 --> 00:28:43.795\nAnd so maintaining this insanely high\nlevel of uptime is not really all that\n\n590\n00:28:43.795 --> 00:28:44.893\ncritical to you.\n\n591\n00:28:44.893 --> 00:28:49.033\nSo Amazon can shift it over to storage\nthat's not replicated as rapidly.\n\n592\n00:28:49.033 --> 00:28:52.852\nAnd it would be okay for you to lose data,\nand so as a result, you save some money.\n\n593\n00:28:52.852 --> 00:28:58.511\nSo that kind of brings that availability\ndown a bit when you chose this option,\n\n594\n00:28:58.511 --> 00:28:59.376\nall right.\n\n595\n00:28:59.376 --> 00:29:03.967\nNow, if we really aren't worried about our\ndata, if it's data that doesn't change\n\n596\n00:29:03.967 --> 00:29:08.493\nvery often, that doesn't get used very\noften, and it's easy for us to reproduce,\n\n597\n00:29:08.493 --> 00:29:12.530\nthen we may choose to go all\nthe way down to reduced redundancy.\n\n598\n00:29:12.530 --> 00:29:17.190\nReduced redundancy is where Amazon really\ndoesn't worry too much about storing\n\n599\n00:29:17.190 --> 00:29:18.740\nan extra copy of your data.\n\n600\n00:29:18.740 --> 00:29:22.460\nAnd if you lose it,\nthen it's just gone, right?\n\n601\n00:29:22.460 --> 00:29:24.680\nWhat kinda data could I afford to lose?\n\n602\n00:29:24.680 --> 00:29:26.520\nWell, archived backups.\n\n603\n00:29:26.520 --> 00:29:29.040\nIf I have old backups,\nI still have the production data.\n\n604\n00:29:29.040 --> 00:29:32.050\nSo if I lose an old backup, I can just\nbackup my production environment again and\n\n605\n00:29:32.050 --> 00:29:33.150\nnow I've got it, right?\n\n606\n00:29:33.150 --> 00:29:34.880\nSo I might not worry about that data.\n\n607\n00:29:34.880 --> 00:29:38.030\nOr data that's exceeded its lifecycle but\nI haven't deleted it yet.\n\n608\n00:29:38.030 --> 00:29:40.600\nI might shift that into\nreduced redundancy storage.\n\n609\n00:29:40.600 --> 00:29:44.820\nOr data that I know I'm\nstoring somewhere else.\n\n610\n00:29:44.820 --> 00:29:49.280\nIf I have four S3 buckets in\nfour different regions, right,\n\n611\n00:29:49.280 --> 00:29:51.060\nso they're spread out into\ndifferent regions, but\n\n612\n00:29:51.060 --> 00:29:53.860\nit's the same data,\nI'm replicating the data across the four.\n\n613\n00:29:53.860 --> 00:29:57.830\nIf I'm doing that, I might use reduced\nredundancy on all four of them.\n\n614\n00:29:57.830 --> 00:29:59.870\nBecause I know if one of them fails,\n\n615\n00:29:59.870 --> 00:30:03.370\nI can just get the data from one of\nthe other three that are still up, right?\n\n616\n00:30:03.370 --> 00:30:08.250\nI can save a lot of money by going\ndown to reduced redundancy, okay.\n\n617\n00:30:08.250 --> 00:30:11.040\nThe other one that doesn't\nshow up here is Glacier.\n\n618\n00:30:11.040 --> 00:30:13.230\nGlacier storage is\ntechnically its own product.\n\n619\n00:30:13.230 --> 00:30:16.010\nAnd we're gonna do an episode\njust on Glacier later on.\n\n620\n00:30:16.010 --> 00:30:20.310\nBut Glacier is also a storage\nclass available in S3 via the API.\n\n621\n00:30:20.310 --> 00:30:22.586\nI don't see it here in the web UI,\nbut it is available via the API.\n\n622\n00:30:22.586 --> 00:30:25.937\nAnd with Glacier,\nyou store data in it, and\n\n623\n00:30:25.937 --> 00:30:31.473\nit's got very high durability, but\nit's got a huge amount of latency.\n\n624\n00:30:31.473 --> 00:30:35.654\nWhen you go to request a file from it, it\ntakes up to five hours to get that file.\n\n625\n00:30:35.654 --> 00:30:37.776\nUsually it's between three and\nfive hours to get the file.\n\n626\n00:30:37.776 --> 00:30:41.152\nSo don't think like, maybe it's a slow\nday at Amazon, I'll get it right away.\n\n627\n00:30:41.152 --> 00:30:44.140\nThe fastest I've ever gotten anything\nout of there was three hours.\n\n628\n00:30:44.140 --> 00:30:47.094\nSo it's usually three to five hours for\nyou to retrieve your data,\n\n629\n00:30:47.094 --> 00:30:50.330\nbecause Amazon can store it offline\nwhere it's not costing them power.\n\n630\n00:30:50.330 --> 00:30:54.410\nWhere it's not costing them a lot of the\nproblems they have with their online data.\n\n631\n00:30:54.410 --> 00:30:57.260\nSo it takes a while to retrieve\nthat information from there.\n\n632\n00:30:57.260 --> 00:31:01.830\nBut those are choices that I have to\nmake when I start throwing data into S3.\n\n633\n00:31:01.830 --> 00:31:03.770\nAnd encryption is another one, but\nI'm gonna talk about it later,\n\n634\n00:31:03.770 --> 00:31:05.210\ncuz I know I'm running out of time here.\n\n635\n00:31:05.210 --> 00:31:06.778\nWe have a lot of other little bells and\n\n636\n00:31:06.778 --> 00:31:08.760\nwhistles inside of S3\nthat we need to tackle.\n\n637\n00:31:08.760 --> 00:31:12.636\nBut I think I've given us kind of\na quick overview of the main functions.\n\n638\n00:31:12.636 --> 00:31:16.662\nAnd we have a few other kind of basic\nthings I need to get to to just make sure\n\n639\n00:31:16.662 --> 00:31:18.590\nI'm kinda complete on this.\n\n640\n00:31:18.590 --> 00:31:21.645\nWe haven't talked about access\ncontrol monitor, static web hosting.\n\n641\n00:31:21.645 --> 00:31:24.315\nThose are some other things I need to\nget to before we move into the really\n\n642\n00:31:24.315 --> 00:31:25.235\nadvanced stuff.\n\n643\n00:31:25.235 --> 00:31:29.225\n&gt;&gt; Well, Don, S3 definitely looks like\na very robust solution to our storage\n\n644\n00:31:29.225 --> 00:31:30.435\ndifficulties that we may have.\n\n645\n00:31:30.435 --> 00:31:34.179\nAnd I'm kind of excited as someone who\ndoes some development work and some data\n\n646\n00:31:34.179 --> 00:31:38.053\nscience, I would like to know a little bit\nmore about how I can manipulate those.\n\n647\n00:31:38.053 --> 00:31:43.100\nBut we do have to come back for\na part two to get to all of those pieces.\n\n648\n00:31:43.100 --> 00:31:44.278\nUnfortunately, we are out of time.\n\n649\n00:31:44.278 --> 00:31:48.406\nSo signing off for ITProTV,\nI've been your host, Justin Dennison.\n\n650\n00:31:48.406 --> 00:31:49.216\n&gt;&gt; And I'm Don Pezet.\n\n651\n00:31:49.216 --> 00:31:50.374\n&gt;&gt; See you next time.\n\n652\n00:31:50.374 --> 00:31:57.494\n[MUSIC]\n\n653\n00:31:57.494 --> 00:32:00.022\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "206257642"
        },
        {
          "description": "In this episode, Justin and Don continue the exploration of the S3 service provided by Amazon. They explore the differences among the data consistency models that are guaranteed by S3. Moreover, they explore how to modify access to S3 buckets and files contained within using access control list, bucket policies, and IAM policies. The show wraps up with a quick dive into static web hosting using the S3 service.",
          "length": "1578",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-2-amazon_s3_basics_pt2-030117.00_26_02_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-2-amazon_s3_basics_pt2-030117.00_26_02_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-1-2-amazon_s3_basics_pt2-030117.00_26_02_23.Still001-sm.jpg",
          "title": "Amazon S3 Basics Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.298\nWelcome to ITProTV.\n\n2\n00:00:01.298 --> 00:00:03.625\nI'm your host, Don Pezet.\n\n3\n00:00:03.625 --> 00:00:08.299\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.299 --> 00:00:12.155\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.155 --> 00:00:16.330\n&gt;&gt; Greetings, everyone, and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:16.330 --> 00:00:17.980\nI'm your host Justin Dennison and\n\n7\n00:00:17.980 --> 00:00:21.860\nin today's episode we're gonna\ncontinue looking at S3 basics.\n\n8\n00:00:21.860 --> 00:00:25.490\nWhat is S3, those little extra points and\n\n9\n00:00:25.490 --> 00:00:29.420\nto help us along our journey is\nMr Don Pezet, how you doing today Don?\n\n10\n00:00:29.420 --> 00:00:32.280\n&gt;&gt; I'm doing great Justin, ready to\ndive right back into the world of Amazon\n\n11\n00:00:32.280 --> 00:00:34.650\nweb services and\ntack on a little bit more on S3.\n\n12\n00:00:34.650 --> 00:00:38.110\nI know I ran through a quite\na bit of information in part one.\n\n13\n00:00:38.110 --> 00:00:39.914\nBut we still had some more\ndata we had to get to, so\n\n14\n00:00:39.914 --> 00:00:42.730\nwe're right back at you here with you with\npart two to be able to tack on some of\n\n15\n00:00:42.730 --> 00:00:45.210\nthose last little bits that we need\nto be aware of on the basic side.\n\n16\n00:00:45.210 --> 00:00:50.450\n&gt;&gt; So, Don yesterday, not yesterday,\nin previous episodes, gotta be careful.\n\n17\n00:00:50.450 --> 00:00:52.360\nTimeline gets all weird.\n\n18\n00:00:52.360 --> 00:00:54.320\nWe talked about availability and\ndurability.\n\n19\n00:00:54.320 --> 00:00:55.448\nThat's kind of where we left off.\n\n20\n00:00:55.448 --> 00:00:59.490\nBut I know there's some issues\nwith when I put things in S3.\n\n21\n00:01:00.890 --> 00:01:05.570\nHow is that available to me,\nthat data consistency idea?\n\n22\n00:01:05.570 --> 00:01:08.390\n&gt;&gt; All right, so data consistency\nis one of those kind of odd topics.\n\n23\n00:01:08.390 --> 00:01:12.240\nWe ended the last episode talking\nabout durability and availability.\n\n24\n00:01:12.240 --> 00:01:15.890\nSo durability was, is my data\ngoing to be there in the future?\n\n25\n00:01:15.890 --> 00:01:18.760\nAnd availability,\nis my data available right now, right?\n\n26\n00:01:18.760 --> 00:01:19.970\nCan I get it right now?\n\n27\n00:01:19.970 --> 00:01:22.050\nWell, what is consistency?\n\n28\n00:01:22.050 --> 00:01:27.340\nConsistency says, if I write data into S3,\n\n29\n00:01:27.340 --> 00:01:33.260\nand somebody reads data from S3, are they\ngonna get the same information, right?\n\n30\n00:01:33.260 --> 00:01:37.140\nNow that sounds really weird, why would\nwe even have to worry about that?\n\n31\n00:01:37.140 --> 00:01:37.880\nIf I put something there,\n\n32\n00:01:37.880 --> 00:01:40.820\nobviously somebody else is gonna\nget the same data, aren't they?\n\n33\n00:01:40.820 --> 00:01:42.580\nNot always.\n\n34\n00:01:42.580 --> 00:01:45.390\nThe thing we have to remember\nis that S3 is built on top of\n\n35\n00:01:45.390 --> 00:01:46.905\na redundant infrastructure.\n\n36\n00:01:46.905 --> 00:01:50.575\nSo, when you write data, it's actually\nbeing stored more than once up at Amazon.\n\n37\n00:01:50.575 --> 00:01:55.115\nAnd because of that, sometimes you can end\nup in situations where different people\n\n38\n00:01:55.115 --> 00:01:57.475\nget different data out\nof the same S3 bucket.\n\n39\n00:01:57.475 --> 00:01:59.475\nSo, let me give you those scenarios.\n\n40\n00:01:59.475 --> 00:02:02.395\nIn a perfect world,\nit doesn't happen, all right?\n\n41\n00:02:02.395 --> 00:02:05.925\nIn a perfect world,\nwhen we put a new file, remember,\n\n42\n00:02:05.925 --> 00:02:07.485\nthis is all done through an API.\n\n43\n00:02:07.485 --> 00:02:12.190\nAnd when we put a file,\nyou're doing an HTTP PUT, that method, and\n\n44\n00:02:12.190 --> 00:02:15.910\nwhen you write that file into S3,\nit's a brand new file.\n\n45\n00:02:15.910 --> 00:02:18.970\nSo if somebody tries to read\nthe file while you're writing it,\n\n46\n00:02:18.970 --> 00:02:21.740\nit doesn't exist yet, so they get nothing.\n\n47\n00:02:21.740 --> 00:02:25.820\nAnd then as soon as you're done writing\nthe file, once you've 100% written\n\n48\n00:02:25.820 --> 00:02:30.630\nthe file into S3, now people can read it,\nand they'll get what you wrote.\n\n49\n00:02:30.630 --> 00:02:34.630\nOkay, it's called a read\nafter write consistency.\n\n50\n00:02:34.630 --> 00:02:36.700\nYou can't read until\nthe write is complete.\n\n51\n00:02:36.700 --> 00:02:38.680\nSo it's read after write.\n\n52\n00:02:38.680 --> 00:02:40.970\nAnd that is perfect,\nwhen you put in new files.\n\n53\n00:02:40.970 --> 00:02:42.220\nThat's exactly what happens, and so\n\n54\n00:02:42.220 --> 00:02:45.100\nyou are guaranteed to be giving out the\ninformation you think you're giving out.\n\n55\n00:02:46.170 --> 00:02:51.043\nWhere it starts to get a little\niffy though, is if you change or\n\n56\n00:02:51.043 --> 00:02:53.867\ndelete a file or an object, right?\n\n57\n00:02:53.867 --> 00:02:56.136\nI've got to remember to say object\nbecause it's not necessarily a file,\n\n58\n00:02:56.136 --> 00:02:57.590\nit's just a collection of data.\n\n59\n00:02:57.590 --> 00:03:02.990\nSo, when I go to modify an object,\nwell, when I modify it\n\n60\n00:03:02.990 --> 00:03:07.040\nwe have to remember that S3 doesn't\ngive us the ability to go in and\n\n61\n00:03:07.040 --> 00:03:09.060\nmodify just a little portion of our data.\n\n62\n00:03:09.060 --> 00:03:10.360\nYou have to modify the whole thing.\n\n63\n00:03:10.360 --> 00:03:15.405\nSo when we replace a file or piece of\ndata you're replacing that whole object.\n\n64\n00:03:15.405 --> 00:03:16.985\nAnd when we replace it,\n\n65\n00:03:16.985 --> 00:03:20.915\nit's then got to be replaced on all\nthe replica copies also, right?\n\n66\n00:03:20.915 --> 00:03:24.274\nThe replica copies that you may not even\nknow exist that are happening behind\n\n67\n00:03:24.274 --> 00:03:26.020\nthe scenes that AWS is managing for us.\n\n68\n00:03:26.020 --> 00:03:28.005\nThis is why we pay them money.\n\n69\n00:03:28.005 --> 00:03:34.375\nWell you won't necessarily replicate until\nyou've completely updated that object.\n\n70\n00:03:34.375 --> 00:03:38.880\nWhich means one replica might be\ninvolved in a write operation.\n\n71\n00:03:38.880 --> 00:03:41.660\nAnd the other replicas\nare still serving old data.\n\n72\n00:03:41.660 --> 00:03:45.090\nAnd then when the main\ncopy finishes writing,\n\n73\n00:03:45.090 --> 00:03:47.210\nit's now replicating to the replicas.\n\n74\n00:03:47.210 --> 00:03:48.940\nAnd so\nthey're involved in write operations, and\n\n75\n00:03:48.940 --> 00:03:50.750\nthe main one is serving up the new file.\n\n76\n00:03:50.750 --> 00:03:55.570\nSo, depending on where people hit,\nthey might be getting the new object or\n\n77\n00:03:55.570 --> 00:03:58.750\nthey might be getting the old object,\nright?\n\n78\n00:03:58.750 --> 00:04:03.420\nBecause it's doing a what's\ncalled eventual consistency.\n\n79\n00:04:03.420 --> 00:04:05.890\nEventually all the replicas\nwill have the same data and\n\n80\n00:04:05.890 --> 00:04:09.790\nit will be consistent, but\nnot necessarily at the same time.\n\n81\n00:04:09.790 --> 00:04:13.598\nSo, when we do updates inside of S3,\nyou've got to be aware of that.\n\n82\n00:04:13.598 --> 00:04:16.361\nThat you could potentially be serving\nup two different sets of data.\n\n83\n00:04:16.361 --> 00:04:22.414\nNow it is nice in that people are going\nto get either all of the old data or\n\n84\n00:04:22.414 --> 00:04:24.166\nall of the new data.\n\n85\n00:04:24.166 --> 00:04:25.780\nThey're never gonna get a mixture.\n\n86\n00:04:25.780 --> 00:04:29.310\nLike, if it's a 1 megabyte object,\n\n87\n00:04:29.310 --> 00:04:33.160\nI'm not gonna get 500K of old data and\n500K of new data.\n\n88\n00:04:33.160 --> 00:04:37.120\nI'm either gonna get one megabyte of\nnew data or one megabyte of old data.\n\n89\n00:04:37.120 --> 00:04:39.570\nBut I don't necessarily know\nwhich because I have to wait for\n\n90\n00:04:39.570 --> 00:04:41.350\nthat replica to finish, right?\n\n91\n00:04:41.350 --> 00:04:44.930\nSo if we're dealing with something\nthat's really sensitive to that,\n\n92\n00:04:44.930 --> 00:04:49.020\nwhere you have to guarantee that\npeople only get the new data,\n\n93\n00:04:49.020 --> 00:04:51.410\nthen it's recommended that\nyou change object names.\n\n94\n00:04:51.410 --> 00:04:52.730\nBy changing object names,\n\n95\n00:04:52.730 --> 00:04:55.460\nnow when you upload the data\nit shows up as a new object.\n\n96\n00:04:55.460 --> 00:04:59.250\nAnd you're guaranteed to do that read\nafter write people will only get\n\n97\n00:04:59.250 --> 00:05:00.490\nthe new data.\n\n98\n00:05:00.490 --> 00:05:03.566\nBut for most of us it's not something\nthat's too terribly sensitive.\n\n99\n00:05:03.566 --> 00:05:07.950\nSo if it's like an image on a website,\nall right, well for a few seconds\n\n100\n00:05:07.950 --> 00:05:11.100\nsome people are going to be getting the\nold images as opposed to the new image.\n\n101\n00:05:11.100 --> 00:05:12.830\nIs that a big deal?\n\n102\n00:05:12.830 --> 00:05:13.970\nFor most of us it isn't.\n\n103\n00:05:13.970 --> 00:05:16.590\nAnd so\neventual consistency works out perfect.\n\n104\n00:05:16.590 --> 00:05:18.510\nWe get all our replicas,\neverything runs great.\n\n105\n00:05:18.510 --> 00:05:20.870\nBut it is something you need\nto be aware of in your design.\n\n106\n00:05:20.870 --> 00:05:24.830\nThat if you have a customer requirement\nthat says, we've got to be able\n\n107\n00:05:24.830 --> 00:05:28.630\nto update our data and guarantee that\npeople are getting the latest right away.\n\n108\n00:05:28.630 --> 00:05:32.380\nWell you don't necessarily have that\nwith the default functionality in S3,\n\n109\n00:05:32.380 --> 00:05:34.970\nunless you're putting a new object in.\n\n110\n00:05:34.970 --> 00:05:40.210\nSo definitely be aware that it does need\nto just be one of those that you remember.\n\n111\n00:05:40.210 --> 00:05:44.220\n&gt;&gt; So, Don you're talking about\nother people getting the data.\n\n112\n00:05:44.220 --> 00:05:47.940\nI remember in the previous episode\nwhen you first created a S3 Bucket.\n\n113\n00:05:47.940 --> 00:05:51.270\nBy default, everything's hidden,\nkind of closed off.\n\n114\n00:05:51.270 --> 00:05:54.730\nIs there ways to manage that,\nto change that default behavior?\n\n115\n00:05:54.730 --> 00:05:56.560\n&gt;&gt; Yeah, it's something I\nhaven't really talked about.\n\n116\n00:05:56.560 --> 00:05:58.280\nI guess we talked very,\nvery briefly about.\n\n117\n00:05:58.280 --> 00:06:00.760\nWhich is, when we create a bucket,\nit is private.\n\n118\n00:06:00.760 --> 00:06:03.160\nIt's a private bucket, and\nonly you have access to it.\n\n119\n00:06:03.160 --> 00:06:06.410\nSo I made a bucket in the last\nepisode called test bucket.\n\n120\n00:06:06.410 --> 00:06:08.250\nBecause I am very creative with my naming.\n\n121\n00:06:08.250 --> 00:06:12.278\nAnd when I made that test bucket I\njust accepted the default values.\n\n122\n00:06:12.278 --> 00:06:15.145\nAnd in the default values if I pull\nthe properties of that bucket,\n\n123\n00:06:15.145 --> 00:06:17.870\nI can go to permissions, and\nI'll see, here's my account.\n\n124\n00:06:17.870 --> 00:06:22.700\nMy account is called awsdemo and\nI've got List, Upload and Delete, and\n\n125\n00:06:22.700 --> 00:06:24.710\nView Permissions, all right?\n\n126\n00:06:24.710 --> 00:06:26.760\nAnd that's it,\nthose are the permissions that I've got.\n\n127\n00:06:26.760 --> 00:06:28.880\nNobody else has any other permissions.\n\n128\n00:06:28.880 --> 00:06:29.780\nAnd that's that, right?\n\n129\n00:06:29.780 --> 00:06:30.830\nWell what do these permissions mean?\n\n130\n00:06:30.830 --> 00:06:34.420\nWell List, I can list what's in this\nbucket, kinda nice to see what's in there.\n\n131\n00:06:35.420 --> 00:06:39.970\nI can upload or delete,\nnotice there's no modify, right?\n\n132\n00:06:39.970 --> 00:06:43.260\nYou either replace a file, create a new\nfile or delete a file, that's it,\n\n133\n00:06:43.260 --> 00:06:45.400\nthat's how S3 works, very simple.\n\n134\n00:06:45.400 --> 00:06:49.400\nSo I can upload and delete data or\nobjects inside of this container.\n\n135\n00:06:49.400 --> 00:06:50.560\nAnd then View Permissions.\n\n136\n00:06:50.560 --> 00:06:52.070\nI can see the permissions\nthat are assigned.\n\n137\n00:06:52.070 --> 00:06:55.358\nNow, I'm the owner so I can also\nchange those permissions too, right?\n\n138\n00:06:55.358 --> 00:06:58.690\nBut view is what shows here and\nthen Edit Permissions is down here.\n\n139\n00:06:58.690 --> 00:07:03.098\nIt's kinda getting screen wrapped on me if\nI were to extend this out, there we go.\n\n140\n00:07:03.098 --> 00:07:06.440\nYou'll see where Edit Permissions is\nright along the lines of those, okay?\n\n141\n00:07:06.440 --> 00:07:09.560\nSo being able to view the permissions\nas well as edit them.\n\n142\n00:07:09.560 --> 00:07:11.730\nNow, if I want somebody else to\nhave access, I can come in and\n\n143\n00:07:11.730 --> 00:07:12.970\nI can add them to this list.\n\n144\n00:07:12.970 --> 00:07:14.690\nI can add more permissions.\n\n145\n00:07:14.690 --> 00:07:19.020\nAnd when I do that, I can grant\npermissions to some other people.\n\n146\n00:07:19.020 --> 00:07:22.300\nAnd what you are going to see are other\n\n147\n00:07:22.300 --> 00:07:26.690\nAWS accounts that you interact\nwith as well as everyone.\n\n148\n00:07:26.690 --> 00:07:29.210\nAnybody who's authenticated through AWS.\n\n149\n00:07:29.210 --> 00:07:34.653\nLog delivery, yourself, and\nthen awsdemo is who I'm logged in as.\n\n150\n00:07:34.653 --> 00:07:38.917\nSo we've got these different things\nthat I can issue permissions to, but\n\n151\n00:07:38.917 --> 00:07:41.830\nnot a whole heck of a lot\nof flexibility here.\n\n152\n00:07:41.830 --> 00:07:42.846\nWith these people,\n\n153\n00:07:42.846 --> 00:07:46.499\nI would still just have these same\nfour permissions that I can issue out.\n\n154\n00:07:46.499 --> 00:07:48.450\nAnd these are the permissions\non the bucket,\n\n155\n00:07:48.450 --> 00:07:50.822\nwe do have permissions on\nindividual objects as well.\n\n156\n00:07:50.822 --> 00:07:53.123\nBut typically we're gonna be\nsetting them on the bucket and\n\n157\n00:07:53.123 --> 00:07:55.527\nour objects inside are gonna\nget the permissions from there.\n\n158\n00:07:55.527 --> 00:08:01.526\nSo if I jump in and take a look at like\nat, let's see where do we upload them?\n\n159\n00:08:01.526 --> 00:08:04.106\nWe uploaded a web page into sample123.\n\n160\n00:08:04.106 --> 00:08:05.088\nThere we go.\n\n161\n00:08:05.088 --> 00:08:08.307\nSo if I take a look at one of these\nguys and I look at their permissionS,\n\n162\n00:08:08.307 --> 00:08:11.640\nwhen I dive in here,\nI'll see something very similar, right?\n\n163\n00:08:11.640 --> 00:08:13.340\nHere's permissions that are signed.\n\n164\n00:08:13.340 --> 00:08:17.220\nAnd Open/Download instead of List, right?\n\n165\n00:08:17.220 --> 00:08:19.420\nWe list a bucket to see\nwhat's inside of it.\n\n166\n00:08:19.420 --> 00:08:22.800\nWe open or download an object\nto see what's inside of it.\n\n167\n00:08:22.800 --> 00:08:23.730\nView Permissions.\n\n168\n00:08:23.730 --> 00:08:24.830\nEdit Permissions.\n\n169\n00:08:24.830 --> 00:08:28.830\nRight, we do not have the whole create\nobject cuz you're in a object, right?\n\n170\n00:08:28.830 --> 00:08:31.630\nThat's provisions gone but\nthe other ones are pretty much the same.\n\n171\n00:08:31.630 --> 00:08:36.570\nThese are the equivalent of having read,\nwrite and full control, right?\n\n172\n00:08:36.570 --> 00:08:39.080\nThis is like read Open and download.\n\n173\n00:08:39.080 --> 00:08:42.060\nView permissions, well that's,\nagain, just looking at permissions.\n\n174\n00:08:42.060 --> 00:08:43.990\nEdit permissions would actually\nbe full control, right,\n\n175\n00:08:43.990 --> 00:08:46.690\nbeing able to change that file itself.\n\n176\n00:08:46.690 --> 00:08:51.050\nAnd then I don't actually see\nthe ability here to write.\n\n177\n00:08:51.050 --> 00:08:54.090\nWell that's because you can't write\nto an object that already exists.\n\n178\n00:08:54.090 --> 00:08:56.680\nYou can just replace it and\nthat's where the upload and\n\n179\n00:08:56.680 --> 00:09:00.530\ndelete permission comes in on the bucket\nitself that we saw a moment ago.\n\n180\n00:09:00.530 --> 00:09:02.080\nSo those are the permissions\nthat we can assign.\n\n181\n00:09:02.080 --> 00:09:07.000\nAnd you'll see where I've given this\nparticular file everyone has open and\n\n182\n00:09:07.000 --> 00:09:10.670\ndownload because I want the entire\nworld to be able to get at this file.\n\n183\n00:09:10.670 --> 00:09:13.600\nBut by default when you create\na new bucket it's not like that.\n\n184\n00:09:13.600 --> 00:09:15.930\nOnly you have access, and it's just you.\n\n185\n00:09:15.930 --> 00:09:20.390\n&gt;&gt; So, Donald, that seems a little\nbit limiting in nature, right?\n\n186\n00:09:20.390 --> 00:09:24.840\nI have read, write and\nthen kinda full control, right?\n\n187\n00:09:24.840 --> 00:09:28.420\nBut, what if I wanna little\nmore fine-grain control?\n\n188\n00:09:28.420 --> 00:09:29.680\n&gt;&gt; Yeah.\n&gt;&gt; Is there a way to do that?\n\n189\n00:09:29.680 --> 00:09:30.560\n&gt;&gt; Absolutely.\n\n190\n00:09:30.560 --> 00:09:35.880\nSo, this is the original permission's\nmethod, authorization method,\n\n191\n00:09:35.880 --> 00:09:38.280\nfrom S3 from way back in the beginning\nwhen it was first created.\n\n192\n00:09:38.280 --> 00:09:40.110\nAnd it was very limited.\n\n193\n00:09:40.110 --> 00:09:42.090\nWell, it still is this way.\n\n194\n00:09:42.090 --> 00:09:45.551\nBut we have a new technology that we can\nuse that actually makes me usually just\n\n195\n00:09:45.551 --> 00:09:47.370\ncompletely ignore these permissions.\n\n196\n00:09:47.370 --> 00:09:49.420\nI usually don't mess\naround with these at all.\n\n197\n00:09:49.420 --> 00:09:52.930\nBecause we can go in and\nwe can create policies.\n\n198\n00:09:52.930 --> 00:09:56.390\nPolicies that define all\nsorts of really crazy\n\n199\n00:09:56.390 --> 00:10:00.430\nthings that let us get super specific and\nsuper granular with our permissions.\n\n200\n00:10:00.430 --> 00:10:07.350\nFor example, I might wanna say Justin is\nallowed to read this one file if he's\n\n201\n00:10:07.350 --> 00:10:12.180\ncoming from a particular IP address and\nit's between this particular time range.\n\n202\n00:10:12.180 --> 00:10:13.990\nI can get really specific like that.\n\n203\n00:10:13.990 --> 00:10:18.330\nI could say yes, he's allowed\nto access this particular bucket\n\n204\n00:10:18.330 --> 00:10:22.870\nif he's got a signed token that\nmatches this particular requirement,\n\n205\n00:10:22.870 --> 00:10:25.640\nyou can really get super\nspecific on these things.\n\n206\n00:10:25.640 --> 00:10:29.020\nNow that's far more complex,\nwe start getting away from the whole\n\n207\n00:10:29.020 --> 00:10:32.790\nsimple storage service and\nwe get complex on the permission side.\n\n208\n00:10:32.790 --> 00:10:34.830\nBut to get that granularity you have to.\n\n209\n00:10:34.830 --> 00:10:36.705\nSo let me just give you a quick\nkind of preview on those,\n\n210\n00:10:36.705 --> 00:10:39.430\nthere's actually two\ndifferent types of policies.\n\n211\n00:10:39.430 --> 00:10:42.760\nThe first policy is probably\nthe easier type of the ones\n\n212\n00:10:42.760 --> 00:10:44.530\nwhich is just a bucket policy.\n\n213\n00:10:44.530 --> 00:10:46.740\nSo I can create a policy\non the bucket itself.\n\n214\n00:10:46.740 --> 00:10:48.190\nI can take my sample one, two, three.\n\n215\n00:10:48.190 --> 00:10:53.240\nAnd when I go and look at the permissions,\nright, we see add permissions,\n\n216\n00:10:53.240 --> 00:10:57.090\nbut I also see add bucket policy,\nall right?\n\n217\n00:10:57.090 --> 00:10:59.040\nThat means I don't have\na bucket policy right now.\n\n218\n00:10:59.040 --> 00:11:00.540\nWhen you create a new bucket,\nit doesn't have one.\n\n219\n00:11:00.540 --> 00:11:04.900\nYou can add one in and\nyou can write a policy.\n\n220\n00:11:04.900 --> 00:11:09.576\nWell the policy files are written in,\nit's very similar to XML.\n\n221\n00:11:09.576 --> 00:11:12.833\nWhere you go to, you need to find the\nactions people are allowed to perform and\n\n222\n00:11:12.833 --> 00:11:13.446\nwhat they do.\n\n223\n00:11:13.446 --> 00:11:17.797\nAnd if you've never worked with the format\nbefore, they do have some sample bucket\n\n224\n00:11:17.797 --> 00:11:20.856\npolicies you can pull up and\nthere's a policy generator.\n\n225\n00:11:20.856 --> 00:11:24.579\nAnd the policy generator is really nice\nbecause you can launch that generator and\n\n226\n00:11:24.579 --> 00:11:27.875\nyou can come in and you could generate\npolicies for all sorts of things.\n\n227\n00:11:27.875 --> 00:11:29.419\nNow we're talking about an S3 bucket.\n\n228\n00:11:29.419 --> 00:11:32.560\nSo I'm gonna choose my\nS3 Bucket Policy here and\n\n229\n00:11:32.560 --> 00:11:35.460\nI'm going to allow someone access.\n\n230\n00:11:35.460 --> 00:11:39.455\nOkay, now I need to provide a principal,\nwhich is who I'm\n\n231\n00:11:39.455 --> 00:11:44.270\ngonna be giving this access to,\nright, and it might be everyone.\n\n232\n00:11:44.270 --> 00:11:45.610\nIt might be Justin.\n\n233\n00:11:45.610 --> 00:11:46.740\nIt might be a particular IP.\n\n234\n00:11:46.740 --> 00:11:48.217\nI can specify that here, and\n\n235\n00:11:48.217 --> 00:11:52.229\nyou got descriptions where you can kind\nof view all of the different formats.\n\n236\n00:11:52.229 --> 00:11:56.105\nWhat I'm going to give them access to,\nI'm going to give them access to S3, and\n\n237\n00:11:56.105 --> 00:11:57.085\nthen what actions.\n\n238\n00:11:57.085 --> 00:12:03.310\nAnd here's where we see a lot more\nthan read, write and full control.\n\n239\n00:12:03.310 --> 00:12:07.910\nHere's where we see things like create\na bucket versus delete a bucket.\n\n240\n00:12:07.910 --> 00:12:10.560\nWhereas normally those permissions\nare joined together, now,\n\n241\n00:12:10.560 --> 00:12:12.846\nhere they're separate,\nI can do it gradually.\n\n242\n00:12:12.846 --> 00:12:16.160\nI can give it permission to create or\ndelete a bucket policy,\n\n243\n00:12:16.160 --> 00:12:19.980\nget bucket information,\nget the object Acl and so on.\n\n244\n00:12:19.980 --> 00:12:24.690\nAll of this stuff is right here\nas part of the bucket itself.\n\n245\n00:12:27.810 --> 00:12:30.850\nOnce we get through that, we specify\nwhich bucket it is we're talking about.\n\n246\n00:12:30.850 --> 00:12:32.459\nThe ARN, the resource name for the bucket.\n\n247\n00:12:32.459 --> 00:12:37.985\nThey showed kind of how that's\nwritten which is ARN:aws:s3::: and\n\n248\n00:12:37.985 --> 00:12:42.097\nthen whatever the bucket name is,\n/&lt;key_name&gt;.\n\n249\n00:12:42.097 --> 00:12:45.511\nThe key_name would be an object if\nyou're being very specific to a file or\n\n250\n00:12:45.511 --> 00:12:49.630\nyou would stop at the bucket_name if\nyou're applying it on the bucket, right?\n\n251\n00:12:49.630 --> 00:12:53.650\nSo that's kinda how we can jump in there\nand we can specify those permissions and\n\n252\n00:12:53.650 --> 00:12:54.810\ngrant the access.\n\n253\n00:12:54.810 --> 00:12:59.390\nNow as you do it you can grant access to\nmore than one person and so the policy\n\n254\n00:12:59.390 --> 00:13:03.470\ngets longer and longer and longer with all\nthe different NVs that you give access to.\n\n255\n00:13:03.470 --> 00:13:06.590\nSo if we take a look at some\nof these sample policies here,\n\n256\n00:13:06.590 --> 00:13:12.030\nthese are really useful for\nseeing kind of what you can do.\n\n257\n00:13:12.030 --> 00:13:16.630\nSo for example here they've got one\nthat is just checking some particular\n\n258\n00:13:17.660 --> 00:13:18.790\nrequirements here.\n\n259\n00:13:18.790 --> 00:13:23.800\nWe're giving the put object and\nput object ACL out for a particular user.\n\n260\n00:13:23.800 --> 00:13:28.050\nHere they're doing a root\nuser from IAM apparently and\n\n261\n00:13:28.050 --> 00:13:30.820\ngranting that access to\na particular bucket.\n\n262\n00:13:30.820 --> 00:13:32.940\nBut you'll see other things\nlike anonymous users or\n\n263\n00:13:32.940 --> 00:13:35.320\nhere they're restricting\nit by an IP address, right?\n\n264\n00:13:35.320 --> 00:13:37.890\nAre they coming from\na particular IP address?\n\n265\n00:13:37.890 --> 00:13:41.990\nOr is it anybody except for\nthis IP address or whatever?\n\n266\n00:13:41.990 --> 00:13:44.847\nYou can really get very\nspecific with these policies.\n\n267\n00:13:44.847 --> 00:13:46.617\nNow, the policies are great.\n\n268\n00:13:46.617 --> 00:13:48.296\nI use them all the time, but\n\n269\n00:13:48.296 --> 00:13:51.809\nbucket policies are not always\nthe best solution for us.\n\n270\n00:13:51.809 --> 00:13:53.300\nAnd let me give you an example.\n\n271\n00:13:53.300 --> 00:13:57.450\nIf I just have one bucket and\nI wanna give ten people permission to it,\n\n272\n00:13:57.450 --> 00:14:00.890\nI can just create one bucket policy and\nI can put the ten\n\n273\n00:14:00.890 --> 00:14:03.460\npeople's information in there to\nbe able to give them access to it.\n\n274\n00:14:03.460 --> 00:14:05.510\nWorks out great, right?\n\n275\n00:14:05.510 --> 00:14:11.340\nBut what if I have ten buckets and\nI wanna give one person access?\n\n276\n00:14:11.340 --> 00:14:14.940\nI've got to go to the policies\nof ten different buckets, right?\n\n277\n00:14:14.940 --> 00:14:17.520\nAnd that gets to be\na little bit challenging.\n\n278\n00:14:17.520 --> 00:14:22.349\nSo, instead of doing a bucket policy if\nyou have a large quantity of buckets that\n\n279\n00:14:22.349 --> 00:14:26.975\nyou're trying to get access to, you\nmight need to do an IAM policy instead.\n\n280\n00:14:26.975 --> 00:14:32.177\nWe're gonna talk more about IAM in\nanother episode but just to kind of cover\n\n281\n00:14:32.177 --> 00:14:37.063\nit really quickly here, if I jump up\ninto my services and I go into IAM.\n\n282\n00:14:37.063 --> 00:14:40.881\nWhen you create a user identity,\nan IAM, or preferably a role,\n\n283\n00:14:40.881 --> 00:14:45.310\nyou can create a role, so\nyou can group multiple people together.\n\n284\n00:14:45.310 --> 00:14:50.060\nBut when you have a user or a role,\nyou can assign permissions to it.\n\n285\n00:14:50.060 --> 00:14:53.392\nAnd the way you assign permissions\nto it is through running a policy,\n\n286\n00:14:53.392 --> 00:14:56.080\na policy attached right to that role.\n\n287\n00:14:56.080 --> 00:15:00.570\nAnd in that policy,\nyou can grant access to one or multiple or\n\n288\n00:15:00.570 --> 00:15:04.890\nall S3 buckets as well as other\nservices through out your AWS account.\n\n289\n00:15:04.890 --> 00:15:08.350\nAnd so it's a great way to manage\npermissions on a particular\n\n290\n00:15:08.350 --> 00:15:11.950\nrole like this and you put users in the\nrole and they get the access they need.\n\n291\n00:15:11.950 --> 00:15:15.860\nThat is typically the better\nway to assign permissions.\n\n292\n00:15:15.860 --> 00:15:18.790\nIf it's just quick and dirty, I've got\none bucket I'm trying to give a couple\n\n293\n00:15:18.790 --> 00:15:21.470\nof people access to it a bucket\npolicy will work out great.\n\n294\n00:15:21.470 --> 00:15:24.830\nBut an IAM policy is gonna scale\nbetter for your environment.\n\n295\n00:15:24.830 --> 00:15:26.410\nIt's usually the way we're gonna wanna go.\n\n296\n00:15:26.410 --> 00:15:27.370\nBut you can do both.\n\n297\n00:15:27.370 --> 00:15:28.980\nYou can actually have a mixture.\n\n298\n00:15:28.980 --> 00:15:32.380\nI know we do that with some of our\nproduction buckets where we have a bucket\n\n299\n00:15:32.380 --> 00:15:35.960\npolicy that grants everyone\nin the world read access, but\n\n300\n00:15:35.960 --> 00:15:40.100\nthen we have IAM policies that grant\nindividual employees the more specific\n\n301\n00:15:40.100 --> 00:15:41.880\naccess they need to manage those buckets.\n\n302\n00:15:41.880 --> 00:15:44.890\nIt's up to you to kind of figure\nout what works in your environment.\n\n303\n00:15:44.890 --> 00:15:46.607\nBut if you're just getting started,\n\n304\n00:15:46.607 --> 00:15:48.973\nIAM policies are usually\nthe better place to start.\n\n305\n00:15:48.973 --> 00:15:53.791\n&gt;&gt; So, Don, you know when I have\nthese conflicting policies,\n\n306\n00:15:53.791 --> 00:15:57.569\nright, the bucket policy\nversus the IAM policy\n\n307\n00:15:57.569 --> 00:16:02.022\nWhich one takes precedence\nif they have some conflict?\n\n308\n00:16:02.022 --> 00:16:03.270\n&gt;&gt; They both do.\n&gt;&gt; They both do.\n\n309\n00:16:03.270 --> 00:16:04.570\n[LAUGH]\n&gt;&gt; So\n\n310\n00:16:04.570 --> 00:16:07.336\nit depends on the type of conflict, right.\n\n311\n00:16:07.336 --> 00:16:12.200\nIf there's an IAM Policy\nthat gives me access\n\n312\n00:16:12.200 --> 00:16:16.150\nto one bucket and there's a bucket policy\nthat gives me access to a second bucket.\n\n313\n00:16:16.150 --> 00:16:17.100\nThen I get both.\n\n314\n00:16:17.100 --> 00:16:19.430\nI get both sets of access.\n\n315\n00:16:19.430 --> 00:16:23.840\nIt's only when something's being denied\nthat we really run into a conflict.\n\n316\n00:16:23.840 --> 00:16:27.350\nAnd if I am granted a permission\nby an IAM policy and\n\n317\n00:16:27.350 --> 00:16:31.010\nI'm denied that permission in\nthe bucket policy, then I get denied.\n\n318\n00:16:31.010 --> 00:16:32.570\nAnd the reverse is true also.\n\n319\n00:16:32.570 --> 00:16:34.230\nIf I'm denied in the IAM policy, but\n\n320\n00:16:34.230 --> 00:16:35.930\ngranted in the bucket,\nI'll get denied, right?\n\n321\n00:16:35.930 --> 00:16:40.750\nSo if I am specifically denied somewhere,\nthat will always win out, right?\n\n322\n00:16:40.750 --> 00:16:44.010\nBut otherwise, if I am being granted\npermissions in two different locations.\n\n323\n00:16:44.010 --> 00:16:45.680\nThat just gets combined and I get both.\n\n324\n00:16:45.680 --> 00:16:49.400\nI get the benefits of both of those\ndifferent permission applications.\n\n325\n00:16:49.400 --> 00:16:53.160\nSo you do have to be aware of that,\nespecially when you're trouble shooting.\n\n326\n00:16:53.160 --> 00:16:54.070\nWhen you're trouble shooting, and\n\n327\n00:16:54.070 --> 00:16:56.540\nyou're like, I don't understand why\ndoes Justin have access to this?\n\n328\n00:16:56.540 --> 00:17:00.150\nI'm trying to block him, and it turns out\nthat I'm looking at a bucket policy and\n\n329\n00:17:00.150 --> 00:17:01.700\nhe's got permissions from an IAM policy.\n\n330\n00:17:01.700 --> 00:17:05.950\nAnd they may not even be assigned to\nhis account, he might be in a role and\n\n331\n00:17:05.950 --> 00:17:07.220\nthe policies assigned to the role.\n\n332\n00:17:07.220 --> 00:17:08.240\nSo I've got to remember to look there,\ntoo.\n\n333\n00:17:08.240 --> 00:17:11.600\nThere's a couple of different places that\nwe might have to track that down, so\n\n334\n00:17:11.600 --> 00:17:12.990\nalways remember that.\n\n335\n00:17:12.990 --> 00:17:14.670\n&gt;&gt; Those are good things to know.\n\n336\n00:17:14.670 --> 00:17:16.520\nTroubleshooting is always fun.\n\n337\n00:17:16.520 --> 00:17:20.250\nSo, Don, I saw in one of our\nbuckets we had some PHP files,\n\n338\n00:17:20.250 --> 00:17:22.850\nand HTML files I think that was in there.\n\n339\n00:17:22.850 --> 00:17:23.860\nAnd as as developer,\n\n340\n00:17:23.860 --> 00:17:27.620\nI know that I've played around with S3 for\nhosting static content.\n\n341\n00:17:27.620 --> 00:17:29.698\nIs that a capability of that S3?\n\n342\n00:17:29.698 --> 00:17:33.780\n&gt;&gt; It is, we put objects into S3 for\n\n343\n00:17:33.780 --> 00:17:36.290\nthe expressed purpose of allowing\npeople to get at those objects.\n\n344\n00:17:36.290 --> 00:17:39.550\nIt may just be a few people or\nit maybe the entire world, right?\n\n345\n00:17:39.550 --> 00:17:44.490\nSo maybe I have a PDF that I\nwant everybody to get access to.\n\n346\n00:17:44.490 --> 00:17:49.490\nAlright, so I know I can go throw it\nin S3 and I can distribute the URL for\n\n347\n00:17:49.490 --> 00:17:52.050\nthat PDF to everybody in the world and\nthen get at it, right.\n\n348\n00:17:52.050 --> 00:17:57.584\nSo, that works out great but\nif I can do that, could I go even further?\n\n349\n00:17:57.584 --> 00:18:00.252\nCouldn't I throw something\nin there like a web page and\n\n350\n00:18:00.252 --> 00:18:02.640\neffectively use S3 as a web server?\n\n351\n00:18:02.640 --> 00:18:05.582\nWell you wouldn't think so\nand by default you can't.\n\n352\n00:18:05.582 --> 00:18:11.675\nIf you have a webpage loaded up into S3\nand you try and point somebody to it,\n\n353\n00:18:11.675 --> 00:18:16.437\nit's gonna try and\nget them to download the file, right?\n\n354\n00:18:16.437 --> 00:18:19.772\nIt's gonna treat it like an object and\nyou're try to download so\n\n355\n00:18:19.772 --> 00:18:23.440\nthere might be an HTML file and\nyou click on it and it doesn't load up.\n\n356\n00:18:23.440 --> 00:18:27.870\nSo for example, when I go into sample 123\nhere, this little bucket that I made.\n\n357\n00:18:27.870 --> 00:18:33.400\nAnd I go into webpages, I've got a PHP\nfile and an HTML file right there.\n\n358\n00:18:33.400 --> 00:18:37.010\nWell, if I look at the bucket properties,\nright, when we go into the properties of\n\n359\n00:18:37.010 --> 00:18:43.140\nthe bucket itself, there's actually\nan option in here for static web hosting.\n\n360\n00:18:43.140 --> 00:18:47.250\nAnd when you take a look at that static\nweb hosting, it's turned off by default.\n\n361\n00:18:47.250 --> 00:18:49.810\nNow, I've turned it on, so\nlet me turn it off real quick.\n\n362\n00:18:49.810 --> 00:18:51.373\nSo, it's turned off by default.\n\n363\n00:18:51.373 --> 00:18:53.330\nAnd when it's turned off by default,\n\n364\n00:18:53.330 --> 00:18:56.670\nevery object in there is just\ntreated as raw data, right.\n\n365\n00:18:56.670 --> 00:19:02.581\nSo that HTML file or that PHP file or\nwhatever, it's not treated as a webpage.\n\n366\n00:19:02.581 --> 00:19:07.398\nAnd here's the URL that he gives me,\nhey you can go to this link and\n\n367\n00:19:07.398 --> 00:19:09.860\nyou're gonna gain access to it.\n\n368\n00:19:09.860 --> 00:19:14.188\nWell look at the URL that it's\nproviding me: s3.amazonaws.com.\n\n369\n00:19:14.188 --> 00:19:17.288\nSo, right off the bat,\nthat's a URL that I can't change,\n\n370\n00:19:17.288 --> 00:19:19.410\na domain that I can't change.\n\n371\n00:19:19.410 --> 00:19:23.391\nSo if I wanna host a website from here,\nam I gonna tell my users, hey you guys,\n\n372\n00:19:23.391 --> 00:19:24.575\nyeah go to my website.\n\n373\n00:19:24.575 --> 00:19:29.029\nIt's at\ns3e.amazonaws.com/sample.123.itpro.tv/ind-\n\n374\n00:19:29.029 --> 00:19:29.820\nex.html.\n\n375\n00:19:29.820 --> 00:19:31.201\nI'm not gonna do that, right.\n\n376\n00:19:31.201 --> 00:19:37.441\nIt's just it's too long, it's not\nsomething people are gonna remember and\n\n377\n00:19:37.441 --> 00:19:43.980\nI can't even do like a DNS CNAME to point\nto this because it's Amazon's domain.\n\n378\n00:19:43.980 --> 00:19:45.890\nThere's nothing there to\nspecifically identify me.\n\n379\n00:19:45.890 --> 00:19:48.070\nA C name can't point to a subdirectory.\n\n380\n00:19:48.070 --> 00:19:50.590\nSo, if i give this URL out to somebody.\n\n381\n00:19:50.590 --> 00:19:52.320\nLet me just copy that link.\n\n382\n00:19:53.330 --> 00:19:57.450\nAnd they go and they fire up their\nbrowser and they go to browse to it.\n\n383\n00:19:57.450 --> 00:19:59.240\nWell, shoot, it's cached on me.\n\n384\n00:19:59.240 --> 00:20:03.636\nThey're not gonna be able to pull up the\npage or it's gonna download it locally and\n\n385\n00:20:03.636 --> 00:20:04.410\nthen view it.\n\n386\n00:20:04.410 --> 00:20:08.228\nNow mine came up because I just disabled\nstatic web hosting on this one, and\n\n387\n00:20:08.228 --> 00:20:11.821\nAmazon does cache all this stuff and\nso I'm getting a cache page here.\n\n388\n00:20:11.821 --> 00:20:13.420\nBut basically, it won't work.\n\n389\n00:20:13.420 --> 00:20:15.760\nAnd it's not a big deal because\nit's easy enough to fix that.\n\n390\n00:20:15.760 --> 00:20:18.820\nIf you want to host a static\nwebpage inside of AWS, you can.\n\n391\n00:20:18.820 --> 00:20:20.970\nYou just have to turn that option on,\nright?\n\n392\n00:20:20.970 --> 00:20:25.490\nWhen you go to your bucket, you'll see the\noption to turn on static website hosting.\n\n393\n00:20:25.490 --> 00:20:29.000\nAnd it's as simple as clicking\nenable website hosting, right, and\n\n394\n00:20:29.000 --> 00:20:29.980\nturning that on.\n\n395\n00:20:29.980 --> 00:20:32.580\nAnd when you do that,\nit's going to do two things.\n\n396\n00:20:32.580 --> 00:20:36.540\nFirst off, it's gonna let you host\nstatic web pages, thus the name.\n\n397\n00:20:36.540 --> 00:20:39.102\nBut secondly it's gonna change the URL.\n\n398\n00:20:39.102 --> 00:20:43.880\nIt's gonna change the URL for\nyour object so that you can use a C name.\n\n399\n00:20:43.880 --> 00:20:46.640\nSo you can hide it behind your\nown domain and use it that way.\n\n400\n00:20:46.640 --> 00:20:50.326\nThe only thing we have to tell them\nis what our index document is so\n\n401\n00:20:50.326 --> 00:20:53.002\nthat it knows what webpage\nto load by default.\n\n402\n00:20:53.002 --> 00:20:57.728\nSo if I'm using like index study.html or\nindex.php or\n\n403\n00:20:57.728 --> 00:21:00.649\nwhatever then I can specify that.\n\n404\n00:21:00.649 --> 00:21:02.990\nPHP, let's talk about that one real quick.\n\n405\n00:21:02.990 --> 00:21:06.830\nThe whole name of this thing\nis static website hosting.\n\n406\n00:21:06.830 --> 00:21:08.210\nOkay, what is that mean?\n\n407\n00:21:08.210 --> 00:21:12.940\nWell, it means I can host webpages there\nas long as there ones that don't change.\n\n408\n00:21:12.940 --> 00:21:18.120\nI don't mean by edit, I mean that doesn't\nrequire the server to do anything.\n\n409\n00:21:18.120 --> 00:21:22.200\nWith HTML, you give a copy of the HTML\npage to somebody's Web browser, and\n\n410\n00:21:22.200 --> 00:21:24.780\ntheir Web browser figures\nout what to show.\n\n411\n00:21:24.780 --> 00:21:28.920\nBut with PHP, or ASP, or CGI, or\n\n412\n00:21:28.920 --> 00:21:33.760\nany of the dynamic languages that\nare out there I'm not at all.\n\n413\n00:21:33.760 --> 00:21:35.230\nPersonally, I only know a couple.\n\n414\n00:21:35.230 --> 00:21:39.980\nWith any of those guys, they expect\nthe server to render the page and\n\n415\n00:21:39.980 --> 00:21:42.750\nthen send the rendered html to the client.\n\n416\n00:21:42.750 --> 00:21:43.840\nWell S3 can't do that.\n\n417\n00:21:44.900 --> 00:21:49.416\nSo when I set this up, and\nI go over here and I look at my webpages.\n\n418\n00:21:49.416 --> 00:21:53.457\nYeah, I've got index at html and\nyes I've got this heartbeat.php.\n\n419\n00:21:53.457 --> 00:21:56.300\nI've got those files there.\n\n420\n00:21:56.300 --> 00:21:59.930\nBut heartbeat.php is not gonna work\n\n421\n00:21:59.930 --> 00:22:03.290\ncuz it's expecting the server\nto do something, right?\n\n422\n00:22:03.290 --> 00:22:05.320\nAnd if I go back to my bucket, and\n\n423\n00:22:05.320 --> 00:22:09.075\nI take a look at my static web hosting,\nnotice my endpoint right here,\n\n424\n00:22:09.075 --> 00:22:16.090\nsample123.itpro.tv.s3-webiste-us-east-1.a-\nmazonaws.com.\n\n425\n00:22:16.090 --> 00:22:20.460\nNow, instead of a subdirectory,\nthis is a URL.\n\n426\n00:22:20.460 --> 00:22:25.730\nA URL, a domain name, that I can take\na C name, I can take lab.ItProTv or\n\n427\n00:22:25.730 --> 00:22:29.670\nwhatever, and\npoint it to this as an end point.\n\n428\n00:22:29.670 --> 00:22:33.450\nAnd by doing that,\nI'll be able to browse to my site.\n\n429\n00:22:33.450 --> 00:22:38.106\nNow, if I browse to Index.html,\noops, it's.\n\n430\n00:22:42.328 --> 00:22:44.588\nActually, hang on, I gotta pay attention\nto what folder is in webpages.\n\n431\n00:22:44.588 --> 00:22:46.597\nI put it in a folder,\ninstead of leaving it in the root,\n\n432\n00:22:46.597 --> 00:22:48.710\nwhich is why it didn't load by default.\n\n433\n00:22:48.710 --> 00:22:51.301\nSo webpages, there we go.\n\n434\n00:22:51.301 --> 00:22:56.091\nSo I'm punching in that URL followed\nby webpages slash index page and\n\n435\n00:22:56.091 --> 00:22:58.001\nI get This is a sample page.\n\n436\n00:22:58.001 --> 00:23:02.829\nThat's the page that I wrote and it's\nthrown right up in there and there it is,\n\n437\n00:23:02.829 --> 00:23:06.130\nbut it's done with just straight up HTML.\n\n438\n00:23:06.130 --> 00:23:14.047\nIf I tried and\ngo to hearbeat.php, all right.\n\n439\n00:23:14.047 --> 00:23:17.900\nIt's gonna download the file, right.\n\n440\n00:23:17.900 --> 00:23:19.879\nIt's saying, hey look,\nit's php, it's a binary file.\n\n441\n00:23:19.879 --> 00:23:20.502\nWhy don't you download it?\n\n442\n00:23:20.502 --> 00:23:21.904\nIt's not a binary file.\n\n443\n00:23:21.904 --> 00:23:26.530\nIts texts are expecting the web server\nto render it and send it to these html.\n\n444\n00:23:26.530 --> 00:23:27.720\nBut it's not a web server.\n\n445\n00:23:27.720 --> 00:23:30.550\nIt's not patchy or\nEngine X or anything else.\n\n446\n00:23:30.550 --> 00:23:32.390\nIt's just a file server, right?\n\n447\n00:23:32.390 --> 00:23:34.510\nAnd it's expecting to give\nme a data object and so\n\n448\n00:23:34.510 --> 00:23:36.100\nnow it's offering for me to download it.\n\n449\n00:23:36.100 --> 00:23:40.522\nSo I can't use dynamic languages and\nJustin, you probably know better than me,\n\n450\n00:23:40.522 --> 00:23:43.005\nphp and\nasp are the ones that pop into my mind.\n\n451\n00:23:43.005 --> 00:23:43.724\nWhat are some of the other ones?\n\n452\n00:23:43.724 --> 00:23:47.430\n&gt;&gt; So I know that Ruby can\ndo the exact same thing.\n\n453\n00:23:47.430 --> 00:23:51.660\nThey have Ruby on route, but again all of\nthese dynamic languages like Python, Ruby.\n\n454\n00:23:52.730 --> 00:23:54.940\nEven go and some other things.\n\n455\n00:23:54.940 --> 00:23:58.750\nThose require a server to actually\nexecute code that more or\n\n456\n00:23:58.750 --> 00:24:01.830\nless generates HTML for\nan expected output.\n\n457\n00:24:01.830 --> 00:24:07.474\nSo, this is off the table for a lot of\nthose server side rendering things.\n\n458\n00:24:07.474 --> 00:24:10.485\n&gt;&gt; Yeah, and we're gonna talk later\nabout some of the other services like\n\n459\n00:24:10.485 --> 00:24:14.100\nElastic Beanstalk and to stuff where\nif you're just trying to quickly deploy\n\n460\n00:24:14.100 --> 00:24:16.407\na website and\nyou don't wanna worry about the server,\n\n461\n00:24:16.407 --> 00:24:18.690\nthere's many other ways\nto do that right now.\n\n462\n00:24:18.690 --> 00:24:20.300\nThis is the old school stuff.\n\n463\n00:24:20.300 --> 00:24:23.330\nS3 was one of the very first\nproducts to come out of AWS and so\n\n464\n00:24:23.330 --> 00:24:25.156\nthis is very basic functionality.\n\n465\n00:24:25.156 --> 00:24:27.360\nMaybe it works for you and\nif it does, great.\n\n466\n00:24:27.360 --> 00:24:29.990\nBut if it doesn't,\njust go to the other products, they do it.\n\n467\n00:24:29.990 --> 00:24:31.640\nSo don't feel like this\nis the end of the world.\n\n468\n00:24:31.640 --> 00:24:33.156\nBut the opportunity is there.\n\n469\n00:24:33.156 --> 00:24:34.012\nIt is built in to S3.\n\n470\n00:24:34.012 --> 00:24:36.800\n&gt;&gt; So, Don,\nI do have a quick follow up question.\n\n471\n00:24:36.800 --> 00:24:40.700\nI noticed that we had to navigate after we\nturned on static hosting, had to navigate\n\n472\n00:24:40.700 --> 00:24:47.180\nto webpages/index.html, cuz the endpoint,\nit wasn't in the root of that bucket.\n\n473\n00:24:47.180 --> 00:24:50.210\nCan I use the index page\nthat it asked me for?\n\n474\n00:24:50.210 --> 00:24:55.660\nCan I give it a subdirectory within\nthe bucket to point to that page or\n\n475\n00:24:55.660 --> 00:24:58.470\ndo I need to keep my index\nin the root of the bucket?\n\n476\n00:24:58.470 --> 00:25:03.110\n&gt;&gt; So you actually can because in S3,\nyou don't actually have folders.\n\n477\n00:25:03.110 --> 00:25:04.430\nThe folders are fake, right?\n\n478\n00:25:04.430 --> 00:25:05.552\nIt's all part of the file name.\n\n479\n00:25:05.552 --> 00:25:06.765\nBut you you're not supposed to.\n\n480\n00:25:06.765 --> 00:25:07.905\nIt's not like a standard thing.\n\n481\n00:25:07.905 --> 00:25:11.445\nA standard thing expects it to be\nin the root not in a sub folder.\n\n482\n00:25:11.445 --> 00:25:12.985\nSo when you're looking for\nthat index document,\n\n483\n00:25:12.985 --> 00:25:16.085\nsomebody just types your domain and\nthey don't provide any sub directory or\n\n484\n00:25:16.085 --> 00:25:17.745\nwhatever, we expect it to be right there.\n\n485\n00:25:17.745 --> 00:25:19.185\nSo you normally would\nplace it in the root.\n\n486\n00:25:19.185 --> 00:25:20.905\nI don't remember why I put it in a folder.\n\n487\n00:25:20.905 --> 00:25:22.738\nI think just because it's what I did.\n\n488\n00:25:22.738 --> 00:25:26.932\n&gt;&gt; I think we were talking about like\nmoving thing talking about those HTTP PUT\n\n489\n00:25:26.932 --> 00:25:27.607\nmethods.\n\n490\n00:25:27.607 --> 00:25:29.910\n&gt;&gt; That's right, I was saying how you\ncouldn't do moves, you had to do, yeah.\n\n491\n00:25:29.910 --> 00:25:33.740\n&gt;&gt; It's a delete and a create and\nthen so, other things.\n\n492\n00:25:33.740 --> 00:25:37.645\nSo Don, is there anything else that\nwe need to know about S3 as far as\n\n493\n00:25:37.645 --> 00:25:39.231\nthe basics are concerned?\n\n494\n00:25:39.231 --> 00:25:42.052\nAs far as basics,\nwe've seen how S3's intended to be used,\n\n495\n00:25:42.052 --> 00:25:43.960\nwas a kind of baked in the product.\n\n496\n00:25:43.960 --> 00:25:47.993\nThere is a lot more to S3 out there,\nif you wanna really get advanced.\n\n497\n00:25:47.993 --> 00:25:51.096\nAnd so we are gonna do another episode\nwhere we'll jump into some of the advanced\n\n498\n00:25:51.096 --> 00:25:53.571\nfunctions and features before\nmoving on to the next products.\n\n499\n00:25:53.571 --> 00:25:56.090\n&gt;&gt; Well, Don, I'm excited to get there.\n\n500\n00:25:56.090 --> 00:25:59.270\nBut we are unfortunately out of time for\nthis episode, so signing off for\n\n501\n00:25:59.270 --> 00:26:01.980\nITProTV, I'm your host, Justin Dennison.\n\n502\n00:26:01.980 --> 00:26:02.630\n&gt;&gt; And I'm Don Pizet.\n\n503\n00:26:02.630 --> 00:26:03.670\n&gt;&gt; We'll see you next time.\n\n504\n00:26:03.670 --> 00:26:10.500\n[MUSIC]\n\n505\n00:26:10.500 --> 00:26:13.326\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207132110"
        },
        {
          "description": "In this episode, Justin and Don start with a quick review of naming and storage classes  in S3. Don discusses the usage of the storage classes with object lifecycle management as well as provides a glimpse into methods that can be employed to ensure data security including encryption, versioning, multi-factor authentication policies, and pre-signed urls.",
          "length": "1550",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-1-amazon_s3_advanced-030117.00_25_33_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-1-amazon_s3_advanced-030117.00_25_33_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-1-amazon_s3_advanced-030117.00_25_33_29.Still001-sm.jpg",
          "title": "Amazon S3 Advanced Features",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:06.442\nWelcome to ITPRO.TV,\nI'm your host [CROSSTALK]\n\n2\n00:00:06.442 --> 00:00:08.186\n[MUSIC]\n\n3\n00:00:08.186 --> 00:00:12.028\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.028 --> 00:00:15.937\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITPRO.TV.\n\n5\n00:00:15.937 --> 00:00:20.120\nI'm your host Justin Dennison and\nwe've talking about S3 basics, but today,\n\n6\n00:00:20.120 --> 00:00:23.333\nwe're gonna dive into some more\nof those advanced features.\n\n7\n00:00:23.333 --> 00:00:25.204\nAnd here to help us along\nin that journey is Mr.\n\n8\n00:00:25.204 --> 00:00:27.110\nDon Pezet, how are you doing today Don?\n\n9\n00:00:27.110 --> 00:00:30.760\n&gt;&gt; I am doing great Justin, we're gonna\ndive in to this little adventure today and\n\n10\n00:00:30.760 --> 00:00:34.130\nlet me tell you, we want to make\nsure that we're exam complete,\n\n11\n00:00:34.130 --> 00:00:36.010\nthat we cover all the different\nconcepts that are out there.\n\n12\n00:00:36.010 --> 00:00:38.380\nBut when we talk about\nadvanced features in S3,\n\n13\n00:00:38.380 --> 00:00:40.120\nit's like drinking from a fire hose.\n\n14\n00:00:40.120 --> 00:00:43.820\nWe just have a ton of little bullet points\nthat we've got to get through on these to\n\n15\n00:00:43.820 --> 00:00:46.460\nsee all the the fancy bells and\nwhistles are out there but\n\n16\n00:00:46.460 --> 00:00:48.300\nit is important that you're aware of them.\n\n17\n00:00:48.300 --> 00:00:50.345\nBecause for the exam, remember,\n\n18\n00:00:50.345 --> 00:00:53.741\nwe're focused mostly on\ndesigning solutions with AWS.\n\n19\n00:00:53.741 --> 00:00:56.364\nSo you gotta know the options\nthat are available,\n\n20\n00:00:56.364 --> 00:00:59.611\nso that you can use them to solve\nthe issues that your clients or\n\n21\n00:00:59.611 --> 00:01:03.126\nyour employers have, to create\nthe right solution inside of AWS.\n\n22\n00:01:03.126 --> 00:01:05.774\nThat's what we're going\nto be looking at right\n\n23\n00:01:05.774 --> 00:01:09.760\nhere is we run through just\na virtual cornucopia of S3 options.\n\n24\n00:01:09.760 --> 00:01:13.690\n&gt;&gt; So Don, what are some of the first\nthings we need to know just to\n\n25\n00:01:13.690 --> 00:01:17.280\nset ourselves up for\nthose virtual cornucopia.\n\n26\n00:01:17.280 --> 00:01:18.010\nThis ahh,\n\n27\n00:01:18.010 --> 00:01:23.140\nthis is just fire hose in my face,\nwhat do I need to know to be prepared?\n\n28\n00:01:23.140 --> 00:01:23.760\n&gt;&gt; All right, so\n\n29\n00:01:23.760 --> 00:01:27.670\nsome of the things that we touched\non lightly in the basics episodes.\n\n30\n00:01:27.670 --> 00:01:32.020\nI mentioned how, when we upload objects\ninto S3, those objects have prefixes and\n\n31\n00:01:32.020 --> 00:01:32.790\ndelimiters, right?\n\n32\n00:01:32.790 --> 00:01:37.750\nThat we have what looks like a folder\nhierarchy, or looks like file extensions.\n\n33\n00:01:37.750 --> 00:01:41.660\nBut those are really just prefixes, the\nlimit is a part of the file name that we\n\n34\n00:01:41.660 --> 00:01:44.280\ncreate and S3 groups them together so\nwe see it.\n\n35\n00:01:44.280 --> 00:01:47.800\nSo when I log into a bucket I\nmight see folders like this and\n\n36\n00:01:47.800 --> 00:01:50.460\ninside of a folder I might see files,\nright?\n\n37\n00:01:50.460 --> 00:01:56.180\nBut in reality what I'm seeing is one\nbucket and in the bucket there's a file\n\n38\n00:01:56.180 --> 00:02:01.406\ncalled webpages/index.html,\nthat's the object name.\n\n39\n00:02:01.406 --> 00:02:07.230\nNot index.html but webpages/index.html,\nthat's all part of the same,\n\n40\n00:02:07.230 --> 00:02:10.180\nso that's part of how those\nobjects are being stored.\n\n41\n00:02:10.180 --> 00:02:13.987\nAnd when I create files like this,\nor objects, and I put them into S3,\n\n42\n00:02:13.987 --> 00:02:18.367\nthey're being stored in the bucket and\nthe bucket has several different ways that\n\n43\n00:02:18.367 --> 00:02:21.879\nthat data can be scored, and\nagain, we touched on that lightly.\n\n44\n00:02:21.879 --> 00:02:26.996\nWe talked about the four different access\nclasses that are available inside of S3.\n\n45\n00:02:26.996 --> 00:02:32.342\nThere’s the standard access class, when\nwe load our data into S3 we can go and\n\n46\n00:02:32.342 --> 00:02:37.945\nretrieve it and it’s stored in the highly\navailable, highly durable solution.\n\n47\n00:02:37.945 --> 00:02:42.333\nRight, it was 99.99% availability and\n\n48\n00:02:42.333 --> 00:02:47.065\n99 followed by like eleven 9s,\nor something.\n\n49\n00:02:47.065 --> 00:02:49.812\n&gt;&gt; I think it's eleven 9s in total,\n\n50\n00:02:49.812 --> 00:02:55.043\nthere's maybe nine 9s after\nthe decimal point, so it's a lot.\n\n51\n00:02:55.043 --> 00:02:58.847\n&gt;&gt; It's a ton and so basically\nthe guarantee that our data is going to be\n\n52\n00:02:58.847 --> 00:03:03.420\navailable now and our data is going\nto be available in the future, right.\n\n53\n00:03:03.420 --> 00:03:06.050\nBut we do have other levels, right.\n\n54\n00:03:06.050 --> 00:03:10.820\nThe standard infrequent access, or\nstandard IA, which has a slightly\n\n55\n00:03:10.820 --> 00:03:15.390\nlower availability to it, so\nthat if we reach out to it,\n\n56\n00:03:15.390 --> 00:03:17.830\nmaybe it's not available now but\nit will be soon enough, right?\n\n57\n00:03:17.830 --> 00:03:20.670\nThe durability is there but\nthe availability starts to come down.\n\n58\n00:03:20.670 --> 00:03:23.170\nAnd then we get to Reduced Redundancy,\n\n59\n00:03:23.170 --> 00:03:27.000\nwhere now the data might even be\nfull on offline for a little while.\n\n60\n00:03:27.000 --> 00:03:30.440\nBut I know that it'll come back and\nit will be able to get at it.\n\n61\n00:03:30.440 --> 00:03:33.750\nAnd then lastly, we have glacier,\nwhich doesn't show up in the UI here.\n\n62\n00:03:33.750 --> 00:03:37.810\nBut the Glacier class, where the data\nis stored offline always, so\n\n63\n00:03:37.810 --> 00:03:39.800\nthe availability is always zero.\n\n64\n00:03:39.800 --> 00:03:43.830\nBut then when we go to request it,\nwell within three to five\n\n65\n00:03:43.830 --> 00:03:46.720\nhours the data is presented to us and\nwe get it, and so now we've got it.\n\n66\n00:03:46.720 --> 00:03:50.010\nSo it's got a very, very high durability,\nbut a very low availability,\n\n67\n00:03:50.010 --> 00:03:51.390\nbecause it's stored offline.\n\n68\n00:03:51.390 --> 00:03:55.380\nNow, the main difference that most of\nus are concerned with on this is price.\n\n69\n00:03:55.380 --> 00:03:56.670\nThey get cheaper, right.\n\n70\n00:03:56.670 --> 00:03:59.840\nThe standard access level\nthat's the most expensive one.\n\n71\n00:03:59.840 --> 00:04:02.972\nI say expensive, it's like $0.10\ncents per gigabyte per month and\n\n72\n00:04:02.972 --> 00:04:05.400\nthen you're billed on\nbandwidth after that.\n\n73\n00:04:05.400 --> 00:04:07.630\nWhen you start getting the standard and\nfrequent access or\n\n74\n00:04:07.630 --> 00:04:10.600\nreduce redundancy it gets even cheaper,\nit get down to $0.07.\n\n75\n00:04:10.600 --> 00:04:14.130\nAnd when you get down to Glacier it's down\nto $0.04, so it's just getting cheaper and\n\n76\n00:04:14.130 --> 00:04:15.860\ncheaper with each one.\n\n77\n00:04:15.860 --> 00:04:18.700\nSo understand that there is\na different performance profile and\n\n78\n00:04:18.700 --> 00:04:21.970\na different cost profile for\neach one of these.\n\n79\n00:04:21.970 --> 00:04:25.780\n&gt;&gt; So Don, we've been talking about\nthese different storage classes, and\n\n80\n00:04:25.780 --> 00:04:29.730\nthat's all fine and good, but how would\nwe actually use this in a real context?\n\n81\n00:04:29.730 --> 00:04:34.550\nI like to see how would I\nmake this useful to me?\n\n82\n00:04:34.550 --> 00:04:39.640\n&gt;&gt; All right, so let's say, for\nexample, that maybe you work for\n\n83\n00:04:39.640 --> 00:04:43.630\na school, right and\nyour school issues report cards.\n\n84\n00:04:43.630 --> 00:04:46.210\nSo I need these report cards\nto be visible to my students.\n\n85\n00:04:46.210 --> 00:04:49.130\nMaybe they're PDFs, right, so we generate\nall these PDFs for report cards.\n\n86\n00:04:49.130 --> 00:04:51.120\nWell, when do people care\nabout their report cards?\n\n87\n00:04:51.120 --> 00:04:53.460\nWhen they first get them, right, or\n\n88\n00:04:53.460 --> 00:04:59.600\nmaybe over the next week people care about\nthat report card, they wanna see it.\n\n89\n00:04:59.600 --> 00:05:00.420\nBut usually,\n\n90\n00:05:00.420 --> 00:05:02.850\nthe next year they're not looking back\nat the previous years report card.\n\n91\n00:05:02.850 --> 00:05:05.130\nIt's not until they go to college that\nthey really start to care about that.\n\n92\n00:05:05.130 --> 00:05:08.030\nI gotta get all my grades so\nI can submit it with my application.\n\n93\n00:05:08.030 --> 00:05:09.830\nBut after that,\nnobody cares anymore, right?\n\n94\n00:05:09.830 --> 00:05:15.200\nSo sometimes we have data where\nthe level of desirability or\n\n95\n00:05:15.200 --> 00:05:18.290\nthe level we care about,\nit starts to diminish over time.\n\n96\n00:05:18.290 --> 00:05:22.380\nSo we can leverage S3 to make it\nwhere this data is available but\n\n97\n00:05:22.380 --> 00:05:23.830\ncosting us less and less each time.\n\n98\n00:05:23.830 --> 00:05:26.810\nSo for example, those report cards,\nright,oOr transcripts or\n\n99\n00:05:26.810 --> 00:05:27.950\nhowever you wanna look at it.\n\n100\n00:05:27.950 --> 00:05:32.410\nMaybe when I first create them I put\nthem in a standard S3 bucket, right,\n\n101\n00:05:32.410 --> 00:05:34.450\nand the bucket's always the same right?\n\n102\n00:05:34.450 --> 00:05:37.040\nNotice when I went in here,\nI guess I didn't really highlight that,\n\n103\n00:05:37.040 --> 00:05:39.830\nis that I'm pulling this up on the file,\nitself, right?\n\n104\n00:05:39.830 --> 00:05:44.480\nThe bucket, if I go to the bucket,\nI don't have where I set\n\n105\n00:05:44.480 --> 00:05:47.890\nwhether it's standard IA or whatever,\nthis is actually on the object, itself.\n\n106\n00:05:47.890 --> 00:05:50.920\nSo I can have a mixture\nwhen I go into this bucket.\n\n107\n00:05:50.920 --> 00:05:53.590\nBut when I come in here and\nI pull out this file,\n\n108\n00:05:53.590 --> 00:05:58.060\nthe individual file has its storage class.\n\n109\n00:05:58.060 --> 00:06:01.690\nSo, I might say when I first\ngenerate a report card,\n\n110\n00:06:01.690 --> 00:06:02.880\nit's in the standard storage class.\n\n111\n00:06:02.880 --> 00:06:06.930\nSo, I'm paying the full price for it and\nit's available and everything is great.\n\n112\n00:06:06.930 --> 00:06:12.230\nBut then after 30 days, I go in and\nI change it to standard infrequent access.\n\n113\n00:06:12.230 --> 00:06:15.630\nIt's pretty infrequent that somebody's\ngonna wanna see their report card a month\n\n114\n00:06:15.630 --> 00:06:18.550\nafter it was already issued, so\nI'll move it down to standard infrequent.\n\n115\n00:06:18.550 --> 00:06:19.950\nIt's still available,\n\n116\n00:06:19.950 --> 00:06:24.000\nit's still got the high durability,\nbut it's possible it could go offline.\n\n117\n00:06:24.000 --> 00:06:26.210\nAnd if it goes offline, is it a big deal?\n\n118\n00:06:26.210 --> 00:06:29.850\nNot really, not that many people\nare going to look at that data right?\n\n119\n00:06:29.850 --> 00:06:31.610\nSame thing with receipts for purchase,\n\n120\n00:06:31.610 --> 00:06:36.330\nif you have a refund period that's 30\ndays and it's been more than 30 days,\n\n121\n00:06:36.330 --> 00:06:38.460\nI don't need to keep that receipt\nhighly available anymore.\n\n122\n00:06:38.460 --> 00:06:40.710\nI can go ahead and\nmove it into standard infrequent.\n\n123\n00:06:40.710 --> 00:06:45.440\nAnd then, maybe after 90 days,\nI shift it down to reduced redundancy.\n\n124\n00:06:45.440 --> 00:06:49.330\nI replicate a copy somewhere else, maybe\nI've got an offline copy somewhere else,\n\n125\n00:06:49.330 --> 00:06:52.840\nand I move it to reduce redundancy here,\nso it'll be online.\n\n126\n00:06:52.840 --> 00:06:55.360\nBut if it fails, I might just end\nup bringing it from my backup and\n\n127\n00:06:55.360 --> 00:06:55.930\nwe go from there.\n\n128\n00:06:55.930 --> 00:06:58.390\nBut if it is still available,\nit's there and it's online, but\n\n129\n00:06:58.390 --> 00:07:00.360\nnow it's costing me far less.\n\n130\n00:07:00.360 --> 00:07:05.090\nAnd then, maybe after a year,\nonce the school year ends, now it's even\n\n131\n00:07:05.090 --> 00:07:08.060\nmore unlikely people are gonna wanna\ngo back and see that report card.\n\n132\n00:07:08.060 --> 00:07:10.400\nSo then I move it over to Glacier,\nand now it's offline.\n\n133\n00:07:10.400 --> 00:07:12.160\nIf it's offline people can't get at it.\n\n134\n00:07:12.160 --> 00:07:14.280\nBut if they need it,\nI can always go and request it, and\n\n135\n00:07:14.280 --> 00:07:15.560\nin three to five hours I'll get it.\n\n136\n00:07:15.560 --> 00:07:19.240\nAnd if somebody needs their report card,\ncan they wait three to five hours?\n\n137\n00:07:19.240 --> 00:07:23.030\nSure, this is data that's already a year\nold by the time I moved it into Glacier.\n\n138\n00:07:23.030 --> 00:07:27.600\nSo what we're doing here, what I just\ndescribed Is setting up a data life cycle,\n\n139\n00:07:27.600 --> 00:07:29.860\na life cycle for\nhow our information is handled.\n\n140\n00:07:29.860 --> 00:07:33.190\nAnd eventually you'll reach the final\nstage of that life cycle which says\n\n141\n00:07:33.190 --> 00:07:36.120\nI'm not gonna retain that data anymore and\nwe delete it.\n\n142\n00:07:36.120 --> 00:07:38.060\nNow with a report card\nmaybe you wouldn't do that.\n\n143\n00:07:38.060 --> 00:07:42.670\nBut, with receipts, for example,\nafter five or seven years you don't need\n\n144\n00:07:42.670 --> 00:07:45.990\nthose receipts anymore and so\nyou just delete them and they go away.\n\n145\n00:07:45.990 --> 00:07:47.960\nAnd now they don't cost you\nany money cuz they're gone.\n\n146\n00:07:47.960 --> 00:07:49.526\nSo that's how we can manage that,\n\n147\n00:07:49.526 --> 00:07:53.314\nthat's the type of solution that we can\nbuild with the different storage classes.\n\n148\n00:07:53.314 --> 00:07:56.111\n&gt;&gt; So\nthat kinda makes me think of accountants,\n\n149\n00:07:56.111 --> 00:08:00.615\nhere's the data directly in front of me,\nI need it, it needs to be here.\n\n150\n00:08:00.615 --> 00:08:03.802\nAnd then I slowly put it\naside as I've used it and\n\n151\n00:08:03.802 --> 00:08:07.626\nthen I store it in the back and\nput it in maybe an archive and\n\n152\n00:08:07.626 --> 00:08:12.030\nthen finally after it's no longer\nworth anything to me, right.\n\n153\n00:08:12.030 --> 00:08:14.705\nIt's past that seven or\nten years, however long it is.\n\n154\n00:08:14.705 --> 00:08:17.345\nI just chuck it in the trash and I'm done.\n\n155\n00:08:17.345 --> 00:08:19.415\n&gt;&gt; Yeah, it used to be easier,\nbecause you had the big boxes,\n\n156\n00:08:19.415 --> 00:08:20.945\nthe banker's boxes of all the papers.\n\n157\n00:08:20.945 --> 00:08:22.475\nYou just waited until\nthey started to mildew.\n\n158\n00:08:22.475 --> 00:08:24.475\nAnd that was when you knew it was\ntime to throw them out, right?\n\n159\n00:08:24.475 --> 00:08:26.216\n&gt;&gt; Right, these are worthless anyway.\n\n160\n00:08:26.216 --> 00:08:27.977\n&gt;&gt; [LAUGH]\n&gt;&gt; So throw them aside.\n\n161\n00:08:27.977 --> 00:08:33.520\nSo we've been talking about that moving\nthis data through the object lifecycle.\n\n162\n00:08:33.520 --> 00:08:37.930\nBut we just talked about some data\nthat's kind of iffy on availability,\n\n163\n00:08:37.930 --> 00:08:39.910\nright, of who can see it.\n\n164\n00:08:39.910 --> 00:08:42.020\nAre there ways to protect against that?\n\n165\n00:08:42.020 --> 00:08:45.190\n&gt;&gt; Yeah, a lot of times when we throw our\ndata up like this it's because we've got\n\n166\n00:08:45.190 --> 00:08:47.160\nsome kind of compliance\nwe're trying to meet.\n\n167\n00:08:47.160 --> 00:08:49.270\nAnd if you're in a regulated industry,\n\n168\n00:08:49.270 --> 00:08:51.190\nit probably means you're\nhandling sensitive data.\n\n169\n00:08:51.190 --> 00:08:53.630\nIf you're an insurance company or\na hospital, right?\n\n170\n00:08:53.630 --> 00:08:55.590\nYou're dealing with medical records or\nfinancial records.\n\n171\n00:08:55.590 --> 00:08:59.170\nThat's usually the stuff we have to\nretain and that's usually sensitive data.\n\n172\n00:08:59.170 --> 00:09:02.000\nSo you're normally going to\nwant to apply encryption to it.\n\n173\n00:09:02.000 --> 00:09:05.060\nNow, S3 doesn't care what you store in it.\n\n174\n00:09:05.060 --> 00:09:07.640\nYou can store anything\nyou want inside of S3.\n\n175\n00:09:07.640 --> 00:09:11.090\nSo what that means is you can encrypt\nyour data however the heck you want.\n\n176\n00:09:11.090 --> 00:09:13.060\nAnd then you can throw it into S3, right?\n\n177\n00:09:13.060 --> 00:09:15.273\nThat's called client-side encryption.\n\n178\n00:09:15.273 --> 00:09:19.790\nNow client-side encryption is up to you\nhow you want to implement that, right?\n\n179\n00:09:19.790 --> 00:09:21.570\nYou might have third\nparty software you use.\n\n180\n00:09:21.570 --> 00:09:24.560\nYou might have some cheesy\nsimple cipher you made yourself.\n\n181\n00:09:24.560 --> 00:09:27.090\nYou might just rename files to be sillier.\n\n182\n00:09:27.090 --> 00:09:30.490\nWhatever is it that you do,\nAmazon doesn't get involve in that, right?\n\n183\n00:09:30.490 --> 00:09:34.220\nYou just upload your data in S3 and\nthey'll store whatever you upload.\n\n184\n00:09:34.220 --> 00:09:37.470\nNow, if you're doing\nclient site encryption,\n\n185\n00:09:37.470 --> 00:09:39.630\nAmazon doesn't know about that.\n\n186\n00:09:39.630 --> 00:09:41.370\nSo that means they can't do decryption.\n\n187\n00:09:41.370 --> 00:09:42.420\nSo the data is stored there.\n\n188\n00:09:42.420 --> 00:09:45.550\nIf anybody accesses that data,\nthey'll have to be able to decrypt it.\n\n189\n00:09:45.550 --> 00:09:47.810\nSo if you're writing\nthird-party applications,\n\n190\n00:09:47.810 --> 00:09:51.230\nthe applications would be handling\nthe encryption and the decryption.\n\n191\n00:09:51.230 --> 00:09:53.910\nNow, one of the big challenges\nwith an encryption and\n\n192\n00:09:53.910 --> 00:09:57.770\ndecryption model is that\nyou need a private key for\n\n193\n00:09:57.770 --> 00:10:01.300\ndoing decryption, and you need\na public key for doing encryption,\n\n194\n00:10:01.300 --> 00:10:04.350\nbecause you get two different people that\nare kind of involved with this stuff and\n\n195\n00:10:04.350 --> 00:10:07.610\nthe private key is the one that is really\nsensitive because it can decrypt data.\n\n196\n00:10:07.610 --> 00:10:12.160\nWell if I have other people connecting to\nmy system needing to view data that means\n\n197\n00:10:12.160 --> 00:10:15.080\nthey need to be able to decrypt\nthe data to view it, right?\n\n198\n00:10:15.080 --> 00:10:20.790\nSo they need a private key that I have a\npublic key for, we need a key exchange and\n\n199\n00:10:20.790 --> 00:10:24.990\nkey exchanges can be complex, so\nyou may or may not want to deal with that.\n\n200\n00:10:24.990 --> 00:10:28.540\nWith client side encryption,\nit's entirely, 100% up to you.\n\n201\n00:10:28.540 --> 00:10:32.650\nBut remember it's kind of nice when we\ncan push the stuff off into Amazon.\n\n202\n00:10:32.650 --> 00:10:37.680\nAnd so in S3, we actually have two server\nside models that are supported, all right?\n\n203\n00:10:37.680 --> 00:10:40.320\nOne, I'm going to call it server side,\nbut it's actually client side.\n\n204\n00:10:40.320 --> 00:10:42.800\nIt's where you do client side encryption,\nbut\n\n205\n00:10:42.800 --> 00:10:46.415\nyou allow Amazon to do\nthe key management for you.\n\n206\n00:10:46.415 --> 00:10:50.775\nNot inside of S3, but inside of AWS, there\nis a key management service you can use.\n\n207\n00:10:50.775 --> 00:10:53.635\nWhere Amazon will take care of\nissuing the private and public keys.\n\n208\n00:10:53.635 --> 00:10:55.195\nSo now you don't have to\nworry about setting up a PKI,\n\n209\n00:10:55.195 --> 00:10:57.085\na public key infrastructure.\n\n210\n00:10:57.085 --> 00:11:01.832\nIf you do that, it's technically\nnot server side encryption, but\n\n211\n00:11:01.832 --> 00:11:04.792\nthey still call it that so\nthey call it SSE-KMS,\n\n212\n00:11:04.792 --> 00:11:08.912\nwhere SSE is server sign encryption and\nthen KMS is key management service.\n\n213\n00:11:08.912 --> 00:11:11.271\nSo they're managing the keys for you.\n\n214\n00:11:11.271 --> 00:11:13.481\nWhile we're doing the encryption, right?\n\n215\n00:11:13.481 --> 00:11:16.421\nBut, some people either\ndon't trust that or\n\n216\n00:11:16.421 --> 00:11:19.751\naren't allowed to trust that, that they\nhave to manage every aspect of it.\n\n217\n00:11:19.751 --> 00:11:21.791\nAnd that's where you're\ndoing entirely client side.\n\n218\n00:11:21.791 --> 00:11:23.951\nYou manage the keys,\nyou manage the system,\n\n219\n00:11:23.951 --> 00:11:27.801\nit's encrypted and the data is already\nencrypted before it goes in S3.\n\n220\n00:11:27.801 --> 00:11:32.400\nBut, If you just want to make sure\nthe data is encrypted in AWS and\n\n221\n00:11:32.400 --> 00:11:35.080\nyou don't want to manage the keys or\nmanage the encryption,\n\n222\n00:11:35.080 --> 00:11:40.380\nthere is a server side method which is\nSSE-S3, and that's this option right here.\n\n223\n00:11:40.380 --> 00:11:42.600\nServer Side Encryption AES-256.\n\n224\n00:11:42.600 --> 00:11:45.950\nThat's the only model\nsupported in the GUI,\n\n225\n00:11:45.950 --> 00:11:51.380\nin the API and command line is actually\na few different standard you can use.\n\n226\n00:11:51.380 --> 00:11:53.510\nBut AES-256 is really strong.\n\n227\n00:11:53.510 --> 00:11:56.550\nAnd it's one of the best methods\nthat you can choose around.\n\n228\n00:11:56.550 --> 00:11:59.010\nIt's why it's the one here in GY.\n\n229\n00:11:59.010 --> 00:12:00.840\nSo, we can choose this method and\n\n230\n00:12:00.840 --> 00:12:06.890\nthat's going to encrypt the file as\nit stored or the object as it stored.\n\n231\n00:12:06.890 --> 00:12:08.950\nAnd Amazon's going to handle all that.\n\n232\n00:12:08.950 --> 00:12:10.900\nIt's going to handle encrypting it.\n\n233\n00:12:10.900 --> 00:12:13.740\nBecause I uploaded it there, so now it's\ngoing to encrypt it while it's there.\n\n234\n00:12:13.740 --> 00:12:17.010\nAnd it's going to decrypt it as we\nreceive it back and get that information.\n\n235\n00:12:17.010 --> 00:12:19.820\nNow this is what's called data at rest.\n\n236\n00:12:19.820 --> 00:12:25.990\nData is stored on hard drives at\nan AWS region's data center, right?\n\n237\n00:12:25.990 --> 00:12:27.340\nThat's data at rest.\n\n238\n00:12:27.340 --> 00:12:32.410\nBut data in motion is when I'm uploading\nthe data or downloading the data.\n\n239\n00:12:32.410 --> 00:12:34.810\nAnd when I do server site encryption,\n\n240\n00:12:34.810 --> 00:12:38.000\nit's only encrypted while\nit's at rest on the server.\n\n241\n00:12:38.000 --> 00:12:39.550\nIt's not encrypted while I'm uploading it,\n\n242\n00:12:39.550 --> 00:12:41.660\nit's not encrypted when\nI'm downloading it.\n\n243\n00:12:41.660 --> 00:12:44.210\nSo the way we provide\ntransiting encryption,\n\n244\n00:12:44.210 --> 00:12:48.310\nanything while it's in motion\nis done through our end points.\n\n245\n00:12:48.310 --> 00:12:51.660\nWhen you look at a file, you see how it's\ngot a link up here for the end point?\n\n246\n00:12:51.660 --> 00:12:54.010\nAnd see how it says, HTTPS.\n\n247\n00:12:54.010 --> 00:12:55.450\nIt's doing secure socket layer.\n\n248\n00:12:55.450 --> 00:12:57.800\nWhich is actually TLS,\ntransport layer security.\n\n249\n00:12:57.800 --> 00:13:02.460\nSo it's doing TLS encryption of\nthe data while it is in motion.\n\n250\n00:13:02.460 --> 00:13:03.910\nSo we're protected there.\n\n251\n00:13:03.910 --> 00:13:07.580\nSo with this type of encryption,\nthe server side encryption like this.\n\n252\n00:13:07.580 --> 00:13:08.360\nWe're really saying,\n\n253\n00:13:08.360 --> 00:13:11.320\nwe need to be encrypted on the hard\ndrives wherever this is stored.\n\n254\n00:13:11.320 --> 00:13:12.900\nNow, why would I care about that?\n\n255\n00:13:12.900 --> 00:13:15.170\nIf it's encrypted in motion,\nisn't that enough?\n\n256\n00:13:15.170 --> 00:13:16.890\nFor some people it is, right?\n\n257\n00:13:16.890 --> 00:13:19.760\nBut there's always that risk\n\n258\n00:13:19.760 --> 00:13:24.610\nthat you delete some objects out of S3\nthat frees up some hard drive space.\n\n259\n00:13:24.610 --> 00:13:28.440\nAnd then Amazon issues that\nspace to somebody else.\n\n260\n00:13:28.440 --> 00:13:31.030\nAnd potentially that somebody else\ncould try and read the drives to\n\n261\n00:13:31.030 --> 00:13:33.930\nfind that information and potentially\ngain access to some of your data.\n\n262\n00:13:33.930 --> 00:13:39.140\nNow it doesn't happen,\nbecause Amazon has very strict, secure\n\n263\n00:13:39.140 --> 00:13:43.090\nwipe procedures they do on any storage\nbefore it's reissued to other people.\n\n264\n00:13:43.090 --> 00:13:45.010\nBut sometimes you can't rely on that.\n\n265\n00:13:45.010 --> 00:13:49.160\nIf you have a regulatory compliance issue\nthat you have to meet, you can't just say,\n\n266\n00:13:49.160 --> 00:13:51.220\nwell I assume Amazon's doing it.\n\n267\n00:13:51.220 --> 00:13:53.160\nSo that's where the service\nside encryption comes in.\n\n268\n00:13:53.160 --> 00:13:57.520\nIt's that you know hey, even if another\ncustomer managed to get access to the area\n\n269\n00:13:57.520 --> 00:14:01.350\nwhere that data was stored, they wouldn't\nbe able to use it, because it's encrypted.\n\n270\n00:14:01.350 --> 00:14:03.100\nBut just be aware that data at rest and\n\n271\n00:14:03.100 --> 00:14:05.960\ndata in motion are encrypted\nat two different methods.\n\n272\n00:14:05.960 --> 00:14:09.260\n&gt;&gt; So, Don, real quick question,\nsomething that came to mind.\n\n273\n00:14:09.260 --> 00:14:13.470\nIf I increase, or, excuse me,\nencrypt using the AWS,\n\n274\n00:14:13.470 --> 00:14:18.510\njust AES 256, does that increase\nlatency for a read operation?\n\n275\n00:14:18.510 --> 00:14:23.120\nIs there any performance issues if I just\nwant to do a quick read of that object?\n\n276\n00:14:23.120 --> 00:14:25.310\n&gt;&gt; So, the short answer is yes, but\n\n277\n00:14:25.310 --> 00:14:28.630\nthe long answer is,\nnot that you would notice, right?\n\n278\n00:14:28.630 --> 00:14:32.580\nIt's negligible, because remember when\nI said way back in episode one is that,\n\n279\n00:14:32.580 --> 00:14:34.490\nwith database you get economy as a scale.\n\n280\n00:14:34.490 --> 00:14:40.370\nWhich means Amazon has the most\nsophisticated storage technologies that\n\n281\n00:14:40.370 --> 00:14:44.500\nhave been configured by the most talented\nstorage professional in the world,\n\n282\n00:14:44.500 --> 00:14:47.220\nthey've got infrastructures\nwhich will just blow your mind.\n\n283\n00:14:47.220 --> 00:14:52.760\nAnd so they are able to handle this\noperations at an insanely rapid speed.\n\n284\n00:14:52.760 --> 00:14:55.945\nAnd so it's not something you'll notice,\nI mean it's something that's measured in\n\n285\n00:14:55.945 --> 00:15:00.770\nnanoseconds, so as an end user we don't\nnotice, the computer will recognize it,\n\n286\n00:15:00.770 --> 00:15:05.530\nbut not really be affected, so its a very\nsmall impact on storing your data.\n\n287\n00:15:05.530 --> 00:15:08.070\nNow if it's client side,\nthat's a different story, right?\n\n288\n00:15:08.070 --> 00:15:11.400\nClient side it could vary greatly\ndepending on what type of\n\n289\n00:15:11.400 --> 00:15:14.900\nprocessor your client machines have and\nwhich libraries you use, but\n\n290\n00:15:14.900 --> 00:15:18.240\non the server side,\nyou really won’t notice.\n\n291\n00:15:18.240 --> 00:15:19.680\n&gt;&gt; Awesome, awesome.\n\n292\n00:15:19.680 --> 00:15:22.620\nSo Don, I think about saving files and\n\n293\n00:15:22.620 --> 00:15:27.880\nthere’s time where I accidentally either\ndeleted or saved files and as a developer,\n\n294\n00:15:27.880 --> 00:15:33.110\nwe use version control systems to\nlike keep like snapshots in time.\n\n295\n00:15:33.110 --> 00:15:35.040\nIs something available like that on S3?\n\n296\n00:15:35.040 --> 00:15:36.480\n&gt;&gt; I know what you're saying Justin.\n\n297\n00:15:36.480 --> 00:15:40.080\nThe advantage of using GitHub or\na co-depository like that is that\n\n298\n00:15:40.080 --> 00:15:43.500\nif somebody modifies something\nyou can see what it was before.\n\n299\n00:15:43.500 --> 00:15:45.470\nSo if something breaks,\nyou can see what it looked like.\n\n300\n00:15:45.470 --> 00:15:49.260\nOr if somebody actually deletes something,\nor somebody maliciously gets in there and\n\n301\n00:15:49.260 --> 00:15:50.520\ndeletes something.\n\n302\n00:15:50.520 --> 00:15:53.529\nYou can spot that, and\nyou can just retrieve your data, right?\n\n303\n00:15:53.529 --> 00:15:56.094\nThat's a very nice thing to have\nwhen you're doing versioning.\n\n304\n00:15:56.094 --> 00:15:59.859\nIf you think about how S3 works,\nif when you upload data into S3,\n\n305\n00:15:59.859 --> 00:16:01.552\nThere's no modify command.\n\n306\n00:16:01.552 --> 00:16:06.211\nSo you have an object and you upload\nan identical object that replaces it,\n\n307\n00:16:06.211 --> 00:16:08.310\nright, or you overwrite.\n\n308\n00:16:08.310 --> 00:16:11.690\nWell, when you turn on\nversioning on an S3 bucket,\n\n309\n00:16:11.690 --> 00:16:14.740\nit will hold on to the original copy,\nit'll hide it, and\n\n310\n00:16:14.740 --> 00:16:17.690\nthen you write effectively a new\ncopy that's now available.\n\n311\n00:16:17.690 --> 00:16:21.020\nAnd it assigns an ID to every one\nof these copies so that we can\n\n312\n00:16:21.020 --> 00:16:25.000\nreach in through the SDK or command line\nor however we're talking to the API.\n\n313\n00:16:25.000 --> 00:16:28.421\nAnd retrieve the DI that we are looking\nfor to pull up these historical versions,\n\n314\n00:16:28.421 --> 00:16:30.700\nwhich is really,\nreally handy to be able to see that.\n\n315\n00:16:30.700 --> 00:16:33.762\nI mean imagine if you had an employee\nwho was using third party\n\n316\n00:16:33.762 --> 00:16:37.318\nsoftware to mount an S3 bucket and\nmount it like a hard drive, right.\n\n317\n00:16:37.318 --> 00:16:40.319\nAnd now they get ransom ware and\nit encrypts your S3 bucket.\n\n318\n00:16:40.319 --> 00:16:43.769\nWouldn't it be nice if you had\na version you could just roll back to?\n\n319\n00:16:43.769 --> 00:16:47.470\nAnd fortunately it's pretty easy to do\nthat, right, it is turned off by default.\n\n320\n00:16:47.470 --> 00:16:50.870\nIf I come in here and take a bucket,\nI'll take my test bucket, for example.\n\n321\n00:16:50.870 --> 00:16:54.260\nAnd if I go into the properties of my\ntest bucket, I can mind versioning,\n\n322\n00:16:54.260 --> 00:16:57.730\nwhich I happen to already have open,\nand enable versioning right there.\n\n323\n00:16:57.730 --> 00:17:00.560\nI can turn it on.\nNow, it's turned off by default for\n\n324\n00:17:00.560 --> 00:17:01.170\ntwo reasons.\n\n325\n00:17:01.170 --> 00:17:02.960\nThe main reason is because\nyou have to pay for it.\n\n326\n00:17:02.960 --> 00:17:04.320\nIt costs a little more.\n\n327\n00:17:04.320 --> 00:17:07.320\nEvery version that's stored counts\nagainst your storage limit.\n\n328\n00:17:07.320 --> 00:17:11.340\nSo your bandwidth, not bandwidth, but\nyour disk storage, your disk size,\n\n329\n00:17:11.340 --> 00:17:13.070\nis gonna go up and you gotta pay for it.\n\n330\n00:17:13.070 --> 00:17:16.780\nNow, for most of us, that's a drop\nin the bucket, right, ten cents for\n\n331\n00:17:16.780 --> 00:17:18.730\ngigabyte or whatever the current rate is.\n\n332\n00:17:18.730 --> 00:17:21.678\nIt's just not a lot of money so\nit's a no-brainer to turn it on.\n\n333\n00:17:21.678 --> 00:17:25.360\nThe other reason it's not turned on\nthough is this sentence right here.\n\n334\n00:17:25.360 --> 00:17:30.260\nOnce enabled versioning cannot\nbe disabled, only suspended.\n\n335\n00:17:30.260 --> 00:17:34.300\nI can tell it to stop\nrecording new changes but\n\n336\n00:17:34.300 --> 00:17:38.000\nit's always going to have\nthe old ones stored, right.\n\n337\n00:17:38.000 --> 00:17:39.280\nUnless I go in and\n\n338\n00:17:39.280 --> 00:17:42.270\nmanually interact with those ID's to\nremove them, they're going to be there.\n\n339\n00:17:42.270 --> 00:17:44.040\nSo that's why it's turned off by default.\n\n340\n00:17:44.040 --> 00:17:45.670\nWe can opt to turn it on.\n\n341\n00:17:45.670 --> 00:17:48.980\nIf you wanna turn it off, the best thing\nto do is just create a new bucket and\n\n342\n00:17:48.980 --> 00:17:50.670\ncopy all your data over to the new bucket.\n\n343\n00:17:50.670 --> 00:17:51.700\nNow it's turned off, right.\n\n344\n00:17:51.700 --> 00:17:53.420\nBut otherwise, there's not really\na way to turn it off here.\n\n345\n00:17:53.420 --> 00:17:56.680\nSo if I go in and enable it,\nI get a little confirmation box,\n\n346\n00:17:56.680 --> 00:17:58.050\nand then it's going to enable.\n\n347\n00:17:58.050 --> 00:17:59.240\nAnd now I'm doing versioning.\n\n348\n00:17:59.240 --> 00:18:04.544\nSo every time I upload or change data,\nif I delete something, it's maintaining\n\n349\n00:18:04.544 --> 00:18:09.302\ncopies of all that previous data and\nI can jump in and I can retrieve that.\n\n350\n00:18:09.302 --> 00:18:12.847\n&gt;&gt; So, Don, you talked about with\nversioning I can go retrieve those\n\n351\n00:18:12.847 --> 00:18:16.830\naccidentally deleted files or\nthose accidentally changed files.\n\n352\n00:18:16.830 --> 00:18:19.670\nBut what if I just wanted to\nkeep that from happening anyway?\n\n353\n00:18:19.670 --> 00:18:23.300\nI have this really sensitive data\nthat's important to my business or\n\n354\n00:18:23.300 --> 00:18:26.760\nsomething personal that's very important\nto me, and I want to make sure that\n\n355\n00:18:26.760 --> 00:18:30.840\nthe only way it gets deleted or modified\nis I have to go through some steps.\n\n356\n00:18:30.840 --> 00:18:33.510\nIs there something like that in Amazon?\n\n357\n00:18:33.510 --> 00:18:38.830\n&gt;&gt; There are safety messages that pop up\nas we work with the system and do things.\n\n358\n00:18:38.830 --> 00:18:42.270\nIf you really wanna get hardcore,\nI can't get at it through the UI here,\n\n359\n00:18:42.270 --> 00:18:46.440\nbut if you dig into the back end of S3,\nyou can turn on what's called MFA delete\n\n360\n00:18:46.440 --> 00:18:48.890\nwhich is multi-factor\nauthentication delete.\n\n361\n00:18:48.890 --> 00:18:51.740\nWhich says anytime you delete and\n\n362\n00:18:51.740 --> 00:18:56.490\nobject out of S3 you have to provide\ntwo forms of authentication.\n\n363\n00:18:56.490 --> 00:18:59.360\nAnd normally that's the authentication\nof you, your username and password,\n\n364\n00:18:59.360 --> 00:19:00.760\nthat counts as one.\n\n365\n00:19:00.760 --> 00:19:04.200\nAnd then a code generated by the MFA app.\n\n366\n00:19:04.200 --> 00:19:08.300\nIf you haven't seen the MFA app,\nit's a simple type process.\n\n367\n00:19:08.300 --> 00:19:10.560\nI've actually got mine in my pocket.\n\n368\n00:19:10.560 --> 00:19:13.400\nThat basically you go to log in and\n\n369\n00:19:13.400 --> 00:19:15.250\nit says, all right,\nyou need to give me a code.\n\n370\n00:19:15.250 --> 00:19:20.150\nYou need to provide a code to be able\nto perform whatever your action is.\n\n371\n00:19:20.150 --> 00:19:23.310\nSo you have to have your username and\npassword as one piece and\n\n372\n00:19:23.310 --> 00:19:25.290\nthen the code is the second piece.\n\n373\n00:19:25.290 --> 00:19:29.260\nAnd the code is just generated,\nsorry I'm just trying to pull one up\n\n374\n00:19:29.260 --> 00:19:32.390\nhere real quick in the background so\nthat we can pull it up.\n\n375\n00:19:32.390 --> 00:19:34.240\nAnd it looks something like this.\n\n376\n00:19:34.240 --> 00:19:36.190\nSee that six digit code?\n\n377\n00:19:36.190 --> 00:19:38.020\nAnd see how it just changed, right?\n\n378\n00:19:38.020 --> 00:19:40.910\nEvery 30 seconds my code is,\nor is it 60 seconds?\n\n379\n00:19:40.910 --> 00:19:41.580\nI think I'm lying, nope!\n\n380\n00:19:41.580 --> 00:19:42.540\n30 seconds, I was right.\n\n381\n00:19:42.540 --> 00:19:44.480\nSo every 30 seconds, my code is changing.\n\n382\n00:19:44.480 --> 00:19:48.460\nAnd so when I go to perform an operation\nthat has FMA enabled on it,\n\n383\n00:19:48.460 --> 00:19:49.470\nI've gotta have both of those.\n\n384\n00:19:49.470 --> 00:19:53.500\nAnd so that's just guaranteeing that\nit's intended that we delete that data.\n\n385\n00:19:53.500 --> 00:19:54.750\nYou may not want that.\n\n386\n00:19:54.750 --> 00:19:57.480\nIf you gotta area where you're\ndoing automated deletes and\n\n387\n00:19:57.480 --> 00:19:59.850\nthey're happening frequently,\nFMA is gonna get in the way.\n\n388\n00:19:59.850 --> 00:20:02.380\nBut if you're just worried about\nsomebody malicious getting in there and\n\n389\n00:20:02.380 --> 00:20:03.490\ndeleted stuff, you can turn that on.\n\n390\n00:20:03.490 --> 00:20:05.490\nAnd that will help to\nensure that somebody,\n\n391\n00:20:05.490 --> 00:20:08.410\neven if they had a key logger and\nthey captured somebody else's password,\n\n392\n00:20:08.410 --> 00:20:10.400\nit wouldn't be enough to get\ninto there and delete things.\n\n393\n00:20:10.400 --> 00:20:14.040\n&gt;&gt; I think of that as your\ncore business intelligence or\n\n394\n00:20:14.040 --> 00:20:17.080\nsomething data that is core to\nwhatever you're doing, right.\n\n395\n00:20:17.080 --> 00:20:18.470\nThings you cannot afford to lose.\n\n396\n00:20:18.470 --> 00:20:22.381\nAnd that insider threat is\ndefinitely an issue that can be\n\n397\n00:20:22.381 --> 00:20:24.426\ncircumvented by MFA delete.\n\n398\n00:20:24.426 --> 00:20:30.440\nSo, there's some other things\nwe need to cover, Don.\n\n399\n00:20:30.440 --> 00:20:31.890\n&gt;&gt; So you mention threats, right?\n\n400\n00:20:31.890 --> 00:20:33.570\nSo there's other threats\nthat are available, and\n\n401\n00:20:33.570 --> 00:20:34.768\nI'll give you a great example.\n\n402\n00:20:34.768 --> 00:20:38.010\nI said it earlier in this episode\nthat with S3, you pay for\n\n403\n00:20:38.010 --> 00:20:39.270\nthe bandwidth you use, right.\n\n404\n00:20:39.270 --> 00:20:42.808\nSo, you put your data in S3,\nright, so you're paying for that.\n\n405\n00:20:42.808 --> 00:20:46.160\nBut then as people download or access that\nresource, you're paying for that too.\n\n406\n00:20:46.160 --> 00:20:48.995\nSo let's say for example that this show,\n\n407\n00:20:48.995 --> 00:20:52.975\nright, this Amazon training\nthat we're creating here.\n\n408\n00:20:52.975 --> 00:20:57.990\nWe take this video and we put it in S3 and\nthen we charge people to access it.\n\n409\n00:20:57.990 --> 00:21:01.420\nSo if you pay for a subscription then you\ncan come and you can watch the video.\n\n410\n00:21:01.420 --> 00:21:05.370\nWell when you watch the video,\nit might be streaming out of S3, so\n\n411\n00:21:05.370 --> 00:21:07.200\nwe're paying for the bandwidth.\n\n412\n00:21:07.200 --> 00:21:09.420\nBut that's okay because you paid us,\nright.\n\n413\n00:21:09.420 --> 00:21:12.940\nSo you pay us, we pay for the bandwidth,\neverybody's happy, right.\n\n414\n00:21:12.940 --> 00:21:16.740\nBut, let's say that you start watching\nthat video and you look at it and you say,\n\n415\n00:21:16.740 --> 00:21:19.770\nhm, I can see the URL right here.\n\n416\n00:21:19.770 --> 00:21:23.040\nIt's coming right out of this S3,\nlet me just copy that URL.\n\n417\n00:21:23.040 --> 00:21:26.390\nAnd let me go and\npost that in a forum somewhere so that\n\n418\n00:21:26.390 --> 00:21:31.180\nthousands of other people can now go and\nconnect up and watch that video, right.\n\n419\n00:21:31.180 --> 00:21:35.573\nIf I made the video available and\nit's got that URL, people could hit it and\n\n420\n00:21:35.573 --> 00:21:36.636\nview that video.\n\n421\n00:21:36.636 --> 00:21:41.327\nAnd now thousands of people who aren't\npaying me are able to watch this video and\n\n422\n00:21:41.327 --> 00:21:44.090\nI'm having to pay for their bandwidth.\n\n423\n00:21:44.090 --> 00:21:46.880\nIt's one thing for somebody to steal\nour video, it's another thing for\n\n424\n00:21:46.880 --> 00:21:50.220\nsomebody to steal a video and\nthen have us pay for the bandwidth, right.\n\n425\n00:21:50.220 --> 00:21:51.130\nThat's even worse.\n\n426\n00:21:51.130 --> 00:21:52.710\nSo we don't want that, right.\n\n427\n00:21:52.710 --> 00:21:54.060\nHow do we prevent that?\n\n428\n00:21:54.060 --> 00:21:59.470\nWell in S3 you can turn on what are called\npre-signed URLs where you don't\n\n429\n00:21:59.470 --> 00:22:04.190\ngive somebody just a regular old single\nURL that can easily be distributed out.\n\n430\n00:22:04.190 --> 00:22:06.900\nBut when they go to download\nit a token is generated.\n\n431\n00:22:06.900 --> 00:22:09.290\nAnd the token is appended onto the URL.\n\n432\n00:22:09.290 --> 00:22:13.360\nAnd if somebody tries to use just\nthe URL by itself, it doesn't work.\n\n433\n00:22:13.360 --> 00:22:15.840\nBut if you stick the token on it does.\n\n434\n00:22:15.840 --> 00:22:19.130\nNow there's two benefits to doing\na tokenized system like that,\n\n435\n00:22:19.130 --> 00:22:22.040\nbenefit number one you know\nwho the token belongs to.\n\n436\n00:22:22.040 --> 00:22:24.870\nSo if somebody tries to share a link\nyou know exactly who it was that\n\n437\n00:22:24.870 --> 00:22:26.090\nshared the link.\n\n438\n00:22:26.090 --> 00:22:28.764\nThe second benefit, and\nthis is probably the most important,\n\n439\n00:22:28.764 --> 00:22:30.840\nis you can put a time limit on it.\n\n440\n00:22:30.840 --> 00:22:34.490\nI can say, hey I'm gonna generate this\nURL and it's only good for five minutes.\n\n441\n00:22:34.490 --> 00:22:36.150\nIf somebody goes to my web page and\n\n442\n00:22:36.150 --> 00:22:39.960\nclicks download, aren't they gonna\ndownload it within five minutes?\n\n443\n00:22:39.960 --> 00:22:42.550\nIt might not finish in five minutes,\nbut they're gonna start.\n\n444\n00:22:42.550 --> 00:22:45.300\nWell there might be somebody who pulls\nup the page and forgets about it and\n\n445\n00:22:45.300 --> 00:22:46.190\ncomes back later.\n\n446\n00:22:46.190 --> 00:22:49.050\nWell they might have to refresh\nthe page to get a new token.\n\n447\n00:22:49.050 --> 00:22:52.400\nBut otherwise they've got a URL\nthat's only good for a few minutes.\n\n448\n00:22:52.400 --> 00:22:55.480\nAnd then if they take it and\npost it in a forum somewhere,\n\n449\n00:22:55.480 --> 00:22:58.130\nwho cares,\ncuz it's not good anymore, right.\n\n450\n00:22:58.130 --> 00:23:01.510\nSo, having pre-signed URLs\nlike that is really handy.\n\n451\n00:23:01.510 --> 00:23:05.090\nAnd if you pull up the AWSSDK,\nit's got all the instructions there for\n\n452\n00:23:05.090 --> 00:23:08.150\nhow you can generate time\nlimited pre-signed URLs.\n\n453\n00:23:08.150 --> 00:23:09.210\nIt's pretty simple.\n\n454\n00:23:09.210 --> 00:23:11.210\nYou can do it right inside of PHP and\nother things.\n\n455\n00:23:11.210 --> 00:23:15.240\nSo right inside of your web application it\ncan generate those URLs so that you can\n\n456\n00:23:15.240 --> 00:23:20.100\ngive secure and restricted access to files\nlike that and prevent you having to pay\n\n457\n00:23:20.100 --> 00:23:23.820\nbandwidth for people that haven't gone\nthrough whatever your requirements are.\n\n458\n00:23:23.820 --> 00:23:26.080\n&gt;&gt; So Don, this kinda makes me think.\n\n459\n00:23:26.080 --> 00:23:29.250\nThere are times where web\nscraping is appropriate, right.\n\n460\n00:23:29.250 --> 00:23:32.610\nSomeone is saying, get this data,\nthere's point and click methods.\n\n461\n00:23:32.610 --> 00:23:35.470\nBut if you need a lot of it,\nthey'll let you webscrape.\n\n462\n00:23:35.470 --> 00:23:40.108\nBut there is often times where I don't\nwant programmatic access to my contents.\n\n463\n00:23:40.108 --> 00:23:44.660\nDo these pre-signed URLs help me from,\nkeep me from writing a Python script\n\n464\n00:23:44.660 --> 00:23:49.590\nthat will just grab all those really\nquickly before that token kind of expires?\n\n465\n00:23:49.590 --> 00:23:53.550\n&gt;&gt; Well, there's the challenge you have,\nright, is that if somebody were so\n\n466\n00:23:53.550 --> 00:23:57.740\ninclined and they were able to figure\nout how to generate the tokens,\n\n467\n00:23:57.740 --> 00:24:01.410\nthen in theory they could scrape and\naccess all of your content.\n\n468\n00:24:01.410 --> 00:24:07.290\nBut if you're generating unique tokens for\neach URL, it would take a lot of effort.\n\n469\n00:24:07.290 --> 00:24:11.927\nIt would take far more effort than just\npaying for the subscription [LAUGH] and\n\n470\n00:24:11.927 --> 00:24:13.601\naccessing it or whatever.\n\n471\n00:24:13.601 --> 00:24:18.410\nBut you do have to weigh that, you have to\nweigh the effort versus the return on it.\n\n472\n00:24:18.410 --> 00:24:21.350\nIt can be tough, trying to defeat\nsome of the different techniques\n\n473\n00:24:21.350 --> 00:24:22.030\nthat are out there.\n\n474\n00:24:22.030 --> 00:24:25.990\n&gt;&gt; So, that’s something that you\ndefinitely have to think of.\n\n475\n00:24:25.990 --> 00:24:27.221\nAre people going to break\ninto my bank account?\n\n476\n00:24:27.221 --> 00:24:32.117\nWell if you only have $12,\nthe effort required to break in for\n\n477\n00:24:32.117 --> 00:24:36.480\nthat $12, it could be a little\niffy in that endeavor.\n\n478\n00:24:36.480 --> 00:24:41.580\nSo, Don, is there some other\nthings that need to go on, right,\n\n479\n00:24:41.580 --> 00:24:45.771\nbut I don't know if we're\ngoing to get to that?\n\n480\n00:24:45.771 --> 00:24:48.390\n&gt;&gt; [LAUGH] I said it was like a fire\nhose and I'm looking at my notes here.\n\n481\n00:24:48.390 --> 00:24:51.210\nWe got a bunch of other little things\nlike multipart uploads, logging,\n\n482\n00:24:51.210 --> 00:24:53.800\nevent notification,\nbest practices to talk about.\n\n483\n00:24:53.800 --> 00:24:55.310\nAnd we've got two minutes on the clock.\n\n484\n00:24:55.310 --> 00:24:58.116\nSo this is probably a good spot for\nus to wrap this one up and\n\n485\n00:24:58.116 --> 00:25:02.000\njust take a two-parter on this one and\nget back and tackle the other ones.\n\n486\n00:25:02.000 --> 00:25:04.130\nYou're kinda seeing some of the things\nthat we've talked about though.\n\n487\n00:25:04.130 --> 00:25:07.230\nThese are more advanced topics,\nthings that not everybody needs.\n\n488\n00:25:07.230 --> 00:25:10.130\nBut we need to understand the options\nthat are available so that on the exam,\n\n489\n00:25:10.130 --> 00:25:13.120\nwhen it gives you a customer's\nrequirements, you're able to determine\n\n490\n00:25:13.120 --> 00:25:17.070\ncan S3 meet their needs or do I need to\nuse a different solution inside of AWS?\n\n491\n00:25:17.070 --> 00:25:18.820\nAnd that can be the case.\n\n492\n00:25:19.850 --> 00:25:23.480\n&gt;&gt; Well Don, we've definitely hit\non some wonderful aspects of S3,\n\n493\n00:25:23.480 --> 00:25:26.700\nbut as you've said,\nwe have some other things to talk about.\n\n494\n00:25:26.700 --> 00:25:29.170\nSo definitely join us for part two.\n\n495\n00:25:29.170 --> 00:25:30.620\nUnfortunately, we are out of time, so\n\n496\n00:25:30.620 --> 00:25:33.750\nsigning off for ITPRO.TV,\nI've been your host, Justin Dennison.\n\n497\n00:25:33.750 --> 00:25:34.430\n&gt;&gt; And I'm Don Pezet.\n\n498\n00:25:34.430 --> 00:25:36.296\n&gt;&gt; See you next time.\n\n499\n00:25:36.296 --> 00:25:42.304\n[MUSIC]\n\n500\n00:25:42.304 --> 00:25:45.721\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "207133026"
        },
        {
          "description": "In this episode, Justin and Don finish up with the more advanced features that are available in S3 such as multi-part uploads, range gets, and cross region replication strategies while highlighting details to consider when employing these features. They continued discussing how to monitor and log activity as well as respond to that activity. Finally, Don highlights best practices, patterns of design, and performance consideration when employing S3.",
          "length": "1344",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-2-amazon_s3_advanced_pt2-030117.00_22_20_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-2-amazon_s3_advanced_pt2-030117.00_22_20_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-2-2-amazon_s3_advanced_pt2-030117.00_22_20_16.Still001-sm.jpg",
          "title": "Amazon S3 Advanced Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:03.168\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:03.168 --> 00:00:06.638\n[CROSSTALK]\n\n3\n00:00:06.638 --> 00:00:08.309\n[MUSIC]\n\n4\n00:00:08.309 --> 00:00:11.929\nYou're watching ITProTV.\n\n5\n00:00:11.929 --> 00:00:15.736\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:15.736 --> 00:00:18.262\nI'm your host Justin Dennison, and\n\n7\n00:00:18.262 --> 00:00:23.407\nwe're back today to talk a little more\nabout those Advanced S3 features.\n\n8\n00:00:23.407 --> 00:00:26.366\nWe had a part one, we're back for\npart two to finish up those.\n\n9\n00:00:26.366 --> 00:00:28.180\nAnd here to help us is Mr. Don Pezet.\n\n10\n00:00:28.180 --> 00:00:29.279\nHow are you doing today, Don?\n\n11\n00:00:29.279 --> 00:00:32.464\n&gt;&gt; I'm doing swell, Justin,\nready to jump in and wrap up S3.\n\n12\n00:00:32.464 --> 00:00:35.648\nWe got couple of just last little bullet\npoints to hit here to make sure we've\n\n13\n00:00:35.648 --> 00:00:37.910\ncovered everything that's out there and\nexciting.\n\n14\n00:00:37.910 --> 00:00:41.939\nI wanna kick things off talking\nabout multipart uploads.\n\n15\n00:00:41.939 --> 00:00:46.718\nAt the very beginning of our S3 content,\nI mention how S3 buckets can be really,\n\n16\n00:00:46.718 --> 00:00:47.490\nreally big.\n\n17\n00:00:47.490 --> 00:00:50.371\nAnd how, technically,\nthey're unlimited in size.\n\n18\n00:00:50.371 --> 00:00:52.993\nYou can have as much data\nas you want in there,\n\n19\n00:00:52.993 --> 00:00:57.905\nas many objects as you want in there,\nunlimited power, unbridled energy, right.\n\n20\n00:00:57.905 --> 00:01:02.087\nBut there was one limit I mentioned which\nis you couldn't have a single object over\n\n21\n00:01:02.087 --> 00:01:03.248\n5 terabytes in size.\n\n22\n00:01:03.248 --> 00:01:05.450\nAnd if it was over 5 terabytes,\nyou had to break it up.\n\n23\n00:01:05.450 --> 00:01:09.310\nBut even when a smaller objects,\nthere are times we need to break them up,\n\n24\n00:01:09.310 --> 00:01:11.690\nat least while they're in transit.\n\n25\n00:01:11.690 --> 00:01:16.550\nWhen you're uploading data into S3,\nif your data is over\n\n26\n00:01:16.550 --> 00:01:21.690\n100 megabytes, you can benefit by breaking\nit up into chunks during the upload.\n\n27\n00:01:21.690 --> 00:01:23.350\nYou don't have to store it in chunks.\n\n28\n00:01:23.350 --> 00:01:25.980\nIf it's over 5 terabytes, yeah,\nyou gotta store it in chunks.\n\n29\n00:01:25.980 --> 00:01:29.000\nBut as long as it's under 5 terabytes,\nyou can store it as one object.\n\n30\n00:01:29.000 --> 00:01:35.690\nBut during the upload,\nif I'm uploading a gigabyte ISO image,\n\n31\n00:01:35.690 --> 00:01:40.680\nwell if I send it as one stream of data up\ninto S3, it's gonna take a little while.\n\n32\n00:01:40.680 --> 00:01:41.720\nBut if I divide it in half and\n\n33\n00:01:41.720 --> 00:01:45.290\nsend it as two streams,\nI can usually upload twice as fast.\n\n34\n00:01:45.290 --> 00:01:48.840\nOr three or four streams, I can get better\nthroughput and bandwidth by doing that,\n\n35\n00:01:48.840 --> 00:01:50.720\nby reaching out to S3 that way.\n\n36\n00:01:50.720 --> 00:01:52.730\nSo a lot of times when we\nwanna do multipart uploads,\n\n37\n00:01:52.730 --> 00:01:55.178\nwe break our content up into chunks.\n\n38\n00:01:55.178 --> 00:02:00.200\nNow, Amazon recommends that anything\nover 100 megabytes should be broken up,\n\n39\n00:02:00.200 --> 00:02:01.370\nyou'll benefit from it.\n\n40\n00:02:01.370 --> 00:02:06.880\nBut they require it over 5 gigabytes,\nnot 5 terabytes, 5 gigabytes.\n\n41\n00:02:06.880 --> 00:02:11.677\nAnything over 5 gigabytes has to\nuse a multipart upload, all right.\n\n42\n00:02:11.677 --> 00:02:15.221\nNow, if this is the first time you've\nheard about this, I’m not surprise.\n\n43\n00:02:15.221 --> 00:02:17.875\nBecause when you upload\nthings via the SDK or\n\n44\n00:02:17.875 --> 00:02:22.250\nthe command line environment,\nif you upload things via the Web UI even,\n\n45\n00:02:22.250 --> 00:02:25.350\nthey all automatically do\nthe multipart uploads.\n\n46\n00:02:25.350 --> 00:02:26.900\nThey break things up for us and send it,\n\n47\n00:02:26.900 --> 00:02:28.320\nmost of your third-party software does,\ntoo.\n\n48\n00:02:28.320 --> 00:02:32.280\nSo the only time we have to worry about it\nis if we're writing our own applications.\n\n49\n00:02:32.280 --> 00:02:36.030\nIf you're creating your own in-house\napplication that's uploading data in S3,\n\n50\n00:02:36.030 --> 00:02:42.070\nif it's over 100 megabytes of data, you\nshould look at breaking it into multipart.\n\n51\n00:02:42.070 --> 00:02:45.328\nAnd if it's over 5 gigabytes and\nyou're wondering why it keeps failing,\n\n52\n00:02:45.328 --> 00:02:47.615\nit's because multipart is\nrequired at that point.\n\n53\n00:02:47.615 --> 00:02:48.968\nSo multipart uploads,\n\n54\n00:02:48.968 --> 00:02:52.494\nthey really just help with\ngetting that data into S3 faster.\n\n55\n00:02:52.494 --> 00:02:56.148\nOnce it's in S3, it can be stored as a\nsingle object, it can be 200 gigabytes and\n\n56\n00:02:56.148 --> 00:02:57.444\nit's not a big deal, right?\n\n57\n00:02:57.444 --> 00:02:59.978\nIt's only 5 terabytes where\nyou hit that problem.\n\n58\n00:02:59.978 --> 00:03:04.228\n&gt;&gt; So Don, the multipart upload,\nthat seems very advantageous for\n\n59\n00:03:04.228 --> 00:03:05.910\nthose large files.\n\n60\n00:03:05.910 --> 00:03:09.172\nThey recommended it over 100 megabytes,\nit's required over 5 gigabytes.\n\n61\n00:03:09.172 --> 00:03:11.412\nBut what if I need to retrieve objects?\n\n62\n00:03:11.412 --> 00:03:15.621\nIs there an associated operation\nwhere I can kinda chunk it up?\n\n63\n00:03:15.621 --> 00:03:18.480\n&gt;&gt; Yeah,\nretrieves a little bit different, right,\n\n64\n00:03:18.480 --> 00:03:21.679\nbecause remember we're using\nbasically HTTP methods.\n\n65\n00:03:21.679 --> 00:03:25.295\nAnd with HTTP methods, you have a GET\nrequest where you can get a file.\n\n66\n00:03:25.295 --> 00:03:27.650\nAnd you normally expect to\nget the whole thing, right?\n\n67\n00:03:27.650 --> 00:03:30.580\nBut S3 does support what\nare called Range GETs,\n\n68\n00:03:30.580 --> 00:03:35.710\nand with a Range GET, you say I\nwanna get this portion of a file.\n\n69\n00:03:35.710 --> 00:03:38.029\nNow, how does that benefit me?\n\n70\n00:03:38.029 --> 00:03:41.683\nWell, in theory, I could grab four\ndifferent pieces of a file so\n\n71\n00:03:41.683 --> 00:03:44.133\nI got four different streams coming down.\n\n72\n00:03:44.133 --> 00:03:47.870\nMaybe I get better throughput\nlike with a multipart upload.\n\n73\n00:03:47.870 --> 00:03:51.620\nOr maybe I had some kind of interruption\nwhile I was downloading and\n\n74\n00:03:51.620 --> 00:03:52.220\nI wanna resume.\n\n75\n00:03:52.220 --> 00:03:54.620\nNow, the challenge there is\nthat it's not a true resume.\n\n76\n00:03:54.620 --> 00:03:56.898\nThere's no resume\nfunctionality built into S3.\n\n77\n00:03:56.898 --> 00:04:00.313\nSo my application would have to\ncalculate out where things interrupted.\n\n78\n00:04:00.313 --> 00:04:05.002\nI might have to break my objects\nup into chunks just to make that\n\n79\n00:04:05.002 --> 00:04:09.120\ndownload more granular as\nfar as what pieces I get.\n\n80\n00:04:09.120 --> 00:04:10.701\nIt becomes really complex really fast.\n\n81\n00:04:10.701 --> 00:04:14.807\nS3's not really geared for that, but\nyou do have Range GETs that you can use.\n\n82\n00:04:14.807 --> 00:04:18.647\nAnd you can say I just need the beginning\nportion of this file or the end.\n\n83\n00:04:18.647 --> 00:04:21.540\nOr the middle or these 4 kilobytes\nof data that are at this area,\n\n84\n00:04:21.540 --> 00:04:23.912\nif you know specifically\nwhat you're looking for.\n\n85\n00:04:23.912 --> 00:04:27.690\nNow, as a human being,\nwe're not normally going do that.\n\n86\n00:04:27.690 --> 00:04:31.404\nBut one of the use case scenarios for S3\nis where we use it as a blob storage for\n\n87\n00:04:31.404 --> 00:04:34.088\na database, and\ndatabases do that stuff all the time.\n\n88\n00:04:34.088 --> 00:04:36.030\nThey say I've got this one big blob.\n\n89\n00:04:36.030 --> 00:04:39.490\nThe data I want is right here in these\nbytes, and so I can reach out and\n\n90\n00:04:39.490 --> 00:04:41.600\ngrab just from those\nbytes using a Range GET.\n\n91\n00:04:41.600 --> 00:04:47.000\nThat's where it's really beneficial, so\nin a way it's like the multipart upload.\n\n92\n00:04:47.000 --> 00:04:49.560\nBut it's not really used the same way.\n\n93\n00:04:49.560 --> 00:04:51.692\nIt's not really used for\nthroughput, it's just used for\n\n94\n00:04:51.692 --> 00:04:53.179\ngetting exactly the data that you want.\n\n95\n00:04:53.179 --> 00:04:54.948\n&gt;&gt; So like a slice of your data.\n\n96\n00:04:54.948 --> 00:04:58.840\n&gt;&gt; Right, yeah, this is the piece I want,\nI don't need to grab the whole thing.\n\n97\n00:04:58.840 --> 00:05:00.580\nWe can be far more efficient that way.\n\n98\n00:05:00.580 --> 00:05:02.950\n&gt;&gt; So we have that data,\nwe're able to upload it.\n\n99\n00:05:02.950 --> 00:05:06.709\nWe're able to grab even just a tiny\nminutia of something larger.\n\n100\n00:05:06.709 --> 00:05:10.595\nAnd we've been talking that our\ndata's typically very available,\n\n101\n00:05:10.595 --> 00:05:12.006\nit has high durability.\n\n102\n00:05:12.006 --> 00:05:16.529\nBut it's not unheard of for\nentire zones of AWS to go down.\n\n103\n00:05:16.529 --> 00:05:19.120\nIs there a way to mitigate risk for\nthose issues?\n\n104\n00:05:19.120 --> 00:05:22.019\n&gt;&gt; Yeah, absolutely, so\nwith a multipart upload,\n\n105\n00:05:22.019 --> 00:05:26.580\nI mentioned how we can break into\nmultiparts to improve performance.\n\n106\n00:05:26.580 --> 00:05:30.740\nWell, when we create an S3 bucket,\nit asks us to pick a region, doesn't it?\n\n107\n00:05:30.740 --> 00:05:33.100\nIt's gotta go into a particular region.\n\n108\n00:05:33.100 --> 00:05:36.280\nSo now people all over the world,\nwhen they go to access that data,\n\n109\n00:05:36.280 --> 00:05:37.370\nwhere are they getting it from?\n\n110\n00:05:37.370 --> 00:05:38.390\nThat one region.\n\n111\n00:05:38.390 --> 00:05:41.140\nIf that region goes down,\nit's now unavailable, right?\n\n112\n00:05:41.140 --> 00:05:44.020\nOr if that region just happens to be\nreally far away from wherever they live,\n\n113\n00:05:44.020 --> 00:05:45.560\nthey're gonna get poor performance.\n\n114\n00:05:45.560 --> 00:05:47.690\nSo we can improve performance and\n\n115\n00:05:47.690 --> 00:05:51.650\nimprove redundancy by having our\ndata in more than one region.\n\n116\n00:05:51.650 --> 00:05:55.510\nNow, you can do it yourself if\nyou create multiple buckets and\n\n117\n00:05:55.510 --> 00:05:56.830\ndo your own replication.\n\n118\n00:05:56.830 --> 00:05:58.330\nBut it's built in if you wanna do it.\n\n119\n00:05:58.330 --> 00:06:01.280\nYou can take a bucket, here I'll\ntake one of mine, let me go back up.\n\n120\n00:06:01.280 --> 00:06:02.720\nI'll take my sample bucket.\n\n121\n00:06:02.720 --> 00:06:04.770\nSo here's my sample bucket.\n\n122\n00:06:04.770 --> 00:06:09.620\nAnd if I go into the Properties of my\nsample bucket, I'll see an option in here\n\n123\n00:06:09.620 --> 00:06:13.541\nwhere I can turn on\nCross-Region Replication.\n\n124\n00:06:13.541 --> 00:06:18.040\nAll right, now, Cross-Region Replication\nrequires Versioning to be turned on.\n\n125\n00:06:18.040 --> 00:06:20.160\nI've got it turned on\nfrom the last episode.\n\n126\n00:06:20.160 --> 00:06:22.650\nIf you don't have Versioning turned\non when you come to this screen,\n\n127\n00:06:22.650 --> 00:06:24.600\nit's gonna give you a warning and\noffer to turn it on.\n\n128\n00:06:24.600 --> 00:06:26.520\nNow, why does it need it?\n\n129\n00:06:26.520 --> 00:06:32.990\nWhat's gonna happen is anytime you upload\na new file or override an existing file,\n\n130\n00:06:32.990 --> 00:06:37.310\nit's going to see that and\nit's going to mark it as a new write.\n\n131\n00:06:37.310 --> 00:06:40.340\nAnd when it does that new write,\ncuz it's preserving the old data, right?\n\n132\n00:06:40.340 --> 00:06:43.580\nWhen it marks it as a new write,\nit can take that write and\n\n133\n00:06:43.580 --> 00:06:46.160\nreplicate it to the other region.\n\n134\n00:06:46.160 --> 00:06:49.880\nSo it's ready to do that but it's using\nthe Versioning system to do that.\n\n135\n00:06:49.880 --> 00:06:51.860\nNow, here's where this\ngets really important.\n\n136\n00:06:53.030 --> 00:06:55.690\nIf I just turn Versioning on, or\n\n137\n00:06:55.690 --> 00:06:59.670\nif this bucket already had existing\ndata in it, that's really the scenario.\n\n138\n00:06:59.670 --> 00:07:05.470\nIf I've already got data in my bucket,\nand I turn on Cross-Region Replication,\n\n139\n00:07:05.470 --> 00:07:09.730\nwhen I do that, it's actually\nnot gonna replicate anything.\n\n140\n00:07:09.730 --> 00:07:12.400\nIt's only gonna replicate\nthings when the writes occur,\n\n141\n00:07:12.400 --> 00:07:13.920\nwhen you're writing to the data.\n\n142\n00:07:13.920 --> 00:07:17.240\nSo when I upload something new,\nthat causes a write.\n\n143\n00:07:17.240 --> 00:07:20.290\nWhen I overwrite an existing file,\nthat causes a write.\n\n144\n00:07:20.290 --> 00:07:22.620\nOr if I delete and re-upload,\nthat causes a write.\n\n145\n00:07:22.620 --> 00:07:27.370\nAnd anytime a write operation happens,\nit will write it to this region.\n\n146\n00:07:27.370 --> 00:07:30.825\nAnd replicate it to another region\nthat I specify when I turn on\n\n147\n00:07:30.825 --> 00:07:32.870\nCross-Region Replication.\n\n148\n00:07:32.870 --> 00:07:35.160\nAnd so it's gonna warn me about that.\n\n149\n00:07:35.160 --> 00:07:38.285\nExisting objects will not be replicated.\n\n150\n00:07:38.285 --> 00:07:40.780\nCross-Region Replication replicates every\n\n151\n00:07:40.780 --> 00:07:43.770\nfuture upload of every\nobject to another bucket.\n\n152\n00:07:43.770 --> 00:07:47.380\nSo it's best to turn this\non in the very beginning,\n\n153\n00:07:47.380 --> 00:07:50.670\nwhen you just created your bucket and\nit's empty.\n\n154\n00:07:50.670 --> 00:07:54.915\nYou turn on the replication and now you\nupload all your stuff into the bucket.\n\n155\n00:07:54.915 --> 00:07:57.086\nIf you're turning on for\nan existing bucket,\n\n156\n00:07:57.086 --> 00:07:59.601\nYou'll basically need to\nreupload all of your data.\n\n157\n00:07:59.601 --> 00:08:02.189\nI usually recommend just either\ndeleting it and reuploading it or\n\n158\n00:08:02.189 --> 00:08:05.011\njust creating an all new bucket with\nreplication on and moving your data\n\n159\n00:08:05.011 --> 00:08:07.660\nto the new bucket it's not normally\nthe end of the world to do that.\n\n160\n00:08:07.660 --> 00:08:12.690\nSo once we do that we can come in and\nwe can turn on cross region replication.\n\n161\n00:08:12.690 --> 00:08:15.910\nNotice that I can do it for\nthe entire bucket.\n\n162\n00:08:15.910 --> 00:08:19.330\nOr just for a particular prefix, right?\n\n163\n00:08:19.330 --> 00:08:23.279\nIf we do that, we might have a certain\nfolder, certain, well, folders, right?\n\n164\n00:08:23.279 --> 00:08:26.282\nThe prefix is inside of our bucket\nthat we want to replicate, but\n\n165\n00:08:26.282 --> 00:08:27.289\nnot the whole thing.\n\n166\n00:08:27.289 --> 00:08:29.665\nSo it's up to us to be able to\ndictate how we want to do that.\n\n167\n00:08:29.665 --> 00:08:31.680\nAnd then we can pick\nwhere we want it to go.\n\n168\n00:08:31.680 --> 00:08:33.780\nSo, I've got mine in US East.\n\n169\n00:08:33.780 --> 00:08:35.880\nSo, maybe I want to go with Oregon, also.\n\n170\n00:08:35.880 --> 00:08:38.180\nI'm gonna replicate this\ndata to the other side.\n\n171\n00:08:38.180 --> 00:08:40.660\nAnd I can pick a bucket on the other side.\n\n172\n00:08:40.660 --> 00:08:43.650\nMaybe I have one, maybe I don't,\nI might need to create one and\n\n173\n00:08:43.650 --> 00:08:46.220\nthen we can specify the storage class.\n\n174\n00:08:46.220 --> 00:08:50.802\nNow, if you are just doing this for\nredundancy sake you can actually choose\n\n175\n00:08:50.802 --> 00:08:54.819\nreduced redundancy storage,\nbecause what do I care if it fails.\n\n176\n00:08:54.819 --> 00:08:55.770\nThis is my copy.\n\n177\n00:08:55.770 --> 00:08:58.650\nIf a copy fails,\nbig deal I am using the main one right?\n\n178\n00:08:58.650 --> 00:09:02.526\nSo you can really do this\ninexpensively if you choose that.\n\n179\n00:09:02.526 --> 00:09:07.389\nOr, maybe, I want people on the West Coast\nto access data in the Oregon region,\n\n180\n00:09:07.389 --> 00:09:11.525\nright, and I want people on\nthe East Coast to stay over here on U.S.\n\n181\n00:09:11.525 --> 00:09:14.160\nEast and go to the Virginia region.\n\n182\n00:09:14.160 --> 00:09:16.108\nIf I'm actually sending my users there,\n\n183\n00:09:16.108 --> 00:09:18.509\nI probably wanna keep it\nsame as the source object.\n\n184\n00:09:18.509 --> 00:09:21.441\nSo I get the same performance\ncharacteristics of both sides.\n\n185\n00:09:21.441 --> 00:09:26.490\nSo, depending on my use case here, that's\ngonna dictate which storage class I pick.\n\n186\n00:09:26.490 --> 00:09:28.960\nI need to make sure that I\nalways take that into account.\n\n187\n00:09:28.960 --> 00:09:30.060\nIf nobody is gonna access it,\n\n188\n00:09:30.060 --> 00:09:33.550\nif it's just for backup purposes,\nI’ll choose reduce redundancy.\n\n189\n00:09:33.550 --> 00:09:36.350\nBut if I actually want people in there,\nI'll choose the higher level.\n\n190\n00:09:36.350 --> 00:09:39.213\nI want it to, be in this case,\nthe same as the source.\n\n191\n00:09:39.213 --> 00:09:42.854\nAll right, then once that's done\nyou can specify permissions,\n\n192\n00:09:42.854 --> 00:09:47.570\nwe haven't talked about IAM roles yet,\nwe'll talk about those a little bit later.\n\n193\n00:09:47.570 --> 00:09:50.628\nBut once we get those assigned I guess\nI kinda have to assign one here so\n\n194\n00:09:50.628 --> 00:09:52.757\nit has permission to\naccess that other bucket.\n\n195\n00:09:52.757 --> 00:09:54.886\nBut once we get one of those assigned,\nthere,\n\n196\n00:09:54.886 --> 00:09:57.210\nI'm just gonna go with the defaults.\n\n197\n00:09:57.210 --> 00:09:58.520\nWe can save it.\n\n198\n00:09:58.520 --> 00:09:59.775\nAnd it's gonna start replicating,\n\n199\n00:09:59.775 --> 00:10:04.350\nand shoot my destination bucket\nneeds to have versioning enabled.\n\n200\n00:10:04.350 --> 00:10:07.619\nAnd in my case my destination bucket\ntest bucket two, doesn't have versioning\n\n201\n00:10:07.619 --> 00:10:11.350\nenabled so I'll need to go enable\nthat first before I can turn that on.\n\n202\n00:10:11.350 --> 00:10:15.590\nOnce that's done though any change\nI make in to my U S east bucket\n\n203\n00:10:15.590 --> 00:10:19.660\nis gonna get replicated to\nthe one over there in US west.\n\n204\n00:10:19.660 --> 00:10:21.962\nNow I can send West Coast\npeople over there.\n\n205\n00:10:21.962 --> 00:10:23.240\nThey'll get better performance.\n\n206\n00:10:23.240 --> 00:10:26.834\nAnd if something happens to US East,\nUS West is still up.\n\n207\n00:10:26.834 --> 00:10:29.760\nI can just repoint my systems over\nthere and I'm back in business.\n\n208\n00:10:29.760 --> 00:10:31.716\nNow, I've got regional redundancy,\n\n209\n00:10:31.716 --> 00:10:34.927\nwhich is really the highest level\nof redundancy we can hope for.\n\n210\n00:10:34.927 --> 00:10:37.540\n&gt;&gt; So Don, that seems very powerful.\n\n211\n00:10:37.540 --> 00:10:42.910\nAnd as someone who's tried to\nmaintain some redundancy manually,\n\n212\n00:10:42.910 --> 00:10:46.320\nI do, I find it very intriguing, just to\nbe able to set that up, kind of set it and\n\n213\n00:10:46.320 --> 00:10:47.600\nforget, if you will.\n\n214\n00:10:47.600 --> 00:10:51.870\nSo we have our data available, we can\nget it there, we can put it up into S3,\n\n215\n00:10:51.870 --> 00:10:55.990\nwe can get it back from S3,\nwe can make sure it's always available.\n\n216\n00:10:55.990 --> 00:11:00.410\nBut sometimes I like to keep\ntrack of what's happening to it,\n\n217\n00:11:00.410 --> 00:11:02.796\nlike a line by line, like notes.\n\n218\n00:11:02.796 --> 00:11:05.717\nIs there a way to enable that in S3 to\nwhere I can see what has happened to all\n\n219\n00:11:05.717 --> 00:11:07.617\nof my data through the course\nof its life cycle?\n\n220\n00:11:07.617 --> 00:11:09.376\n&gt;&gt; Yeah.\n\n221\n00:11:09.376 --> 00:11:14.142\nWith S3, Amazon assumes that you're\nmanaging all this yourself right.\n\n222\n00:11:14.142 --> 00:11:18.090\nSo if you're writing application interact\nto that S3 you're doing all the loging and\n\n223\n00:11:18.090 --> 00:11:20.390\ntracking stuff in your own application.\n\n224\n00:11:20.390 --> 00:11:23.080\nBut it's not always the case or\nit might be that you have five or\n\n225\n00:11:23.080 --> 00:11:26.560\nsix difference applications you have\nno one centralized place to go and\n\n226\n00:11:26.560 --> 00:11:28.550\ntrack what all happens in your system.\n\n227\n00:11:28.550 --> 00:11:32.054\nSo we can turn on loging on\nthe S3 bucket itself, right?\n\n228\n00:11:32.054 --> 00:11:35.120\nSo it's off by default, but\nif you pull up a bucket.\n\n229\n00:11:35.120 --> 00:11:37.100\nLike I've got my sample 123 bucket here.\n\n230\n00:11:37.100 --> 00:11:39.490\nI can go down to logging,\nand I can turn it on.\n\n231\n00:11:39.490 --> 00:11:41.730\nNow notice, it is turned off.\n\n232\n00:11:41.730 --> 00:11:44.500\nI can turn it on cuz the assumption is\n\n233\n00:11:44.500 --> 00:11:46.892\nthat I'm already doing it in\nmy own applications, right?\n\n234\n00:11:46.892 --> 00:11:49.570\nBut if I turn it on,\nit's gonna start tracking and\n\n235\n00:11:49.570 --> 00:11:52.720\nwriting to files what has\nall happened on the bucket.\n\n236\n00:11:52.720 --> 00:11:54.370\nThe activity, what's going on?\n\n237\n00:11:54.370 --> 00:11:58.410\nAnd I can use that for just reporting,\nfor generating performance profiles and\n\n238\n00:11:58.410 --> 00:12:02.440\ncharacteristics on my data or even for\nsecurity purposes if I'm trying to track\n\n239\n00:12:02.440 --> 00:12:05.580\nwhether unauthorized changes\nhave occurred to files.\n\n240\n00:12:05.580 --> 00:12:08.080\nSo I can see that inside of those logs.\n\n241\n00:12:08.080 --> 00:12:09.810\nNow there's not a whole\nlot of options here.\n\n242\n00:12:09.810 --> 00:12:13.351\nWhen I turn it on, it's just asking\nme where I want to store it, and\n\n243\n00:12:13.351 --> 00:12:16.750\nthen a prefix or a folder name for\nit to be stored inside.\n\n244\n00:12:16.750 --> 00:12:22.110\nNow you can store the logs right in\nthis bucket, in fact that's the default.\n\n245\n00:12:22.110 --> 00:12:25.620\nIf I were to just hit save it's gonna\nsort right here in the same bucket.\n\n246\n00:12:25.620 --> 00:12:29.621\nIf we're just doing this for performance\nand tracking reasons then that's usually\n\n247\n00:12:29.621 --> 00:12:32.110\nfine, but if we're doing it for\nsecurity reasons.\n\n248\n00:12:32.110 --> 00:12:35.636\nAnd you think there is some chance\nthis bucket may become compromised\n\n249\n00:12:35.636 --> 00:12:38.385\nthen is better to store\nthe logs in a separate bucket.\n\n250\n00:12:38.385 --> 00:12:40.641\nNow I usually store it in\na separate bucket anyway and\n\n251\n00:12:40.641 --> 00:12:42.906\nthe main reason I do it is I\nhave more than one bucket.\n\n252\n00:12:42.906 --> 00:12:46.391\nI don't wanna have to go to five different\nbuckets for the logs it's nice to be able\n\n253\n00:12:46.391 --> 00:12:49.090\nto go to one bucket, and\nhave all my logs be right there.\n\n254\n00:12:49.090 --> 00:12:52.820\nSo you might have different target\nprefixes, for each of your buckets, but\n\n255\n00:12:52.820 --> 00:12:55.326\nat the end of the day the target\nbucket is the same for\n\n256\n00:12:55.326 --> 00:12:58.321\nall of them just storing them\nall in test bucket for example.\n\n257\n00:12:58.321 --> 00:13:04.900\n/log, and so this might be my\nsample123-logs will be stored in here.\n\n258\n00:13:04.900 --> 00:13:07.570\nAnd then other folders for\nmy other buckets to get stored.\n\n259\n00:13:07.570 --> 00:13:12.703\nOnce that's turned on, now I'm generating\nthose logs as activity gets performed\n\n260\n00:13:12.703 --> 00:13:17.342\non my S3 bucket, it's all getting\nrecorded and I'll have a record of it.\n\n261\n00:13:17.342 --> 00:13:19.850\n&gt;&gt; So Don, that seems very intriguing.\n\n262\n00:13:19.850 --> 00:13:23.230\nI started thinking this as someone\nwho dabbles in data science,\n\n263\n00:13:23.230 --> 00:13:24.060\nlike data analytics.\n\n264\n00:13:25.060 --> 00:13:27.670\nI would almost like to be able\nto build like a reactive system,\n\n265\n00:13:27.670 --> 00:13:29.370\nif something's put into the bucket or\n\n266\n00:13:29.370 --> 00:13:34.060\na log is logged and I see a particular log\nline, I wanna be able to react to that.\n\n267\n00:13:34.060 --> 00:13:36.690\nDoes Amazon provide that capability?\n\n268\n00:13:36.690 --> 00:13:39.574\n&gt;&gt; They do, and\nit gets complex really fast.\n\n269\n00:13:39.574 --> 00:13:43.050\nSo when you hear about AWS one of the big\nselling points of a solution like this is\n\n270\n00:13:43.050 --> 00:13:44.300\nthe automation.\n\n271\n00:13:44.300 --> 00:13:48.430\nAnd when you look at some of the AWS\nservices like Lambda, you can do so\n\n272\n00:13:48.430 --> 00:13:51.120\nmany amazing things with Lambda.\n\n273\n00:13:51.120 --> 00:13:53.050\nIf you tell it to do it.\n\n274\n00:13:53.050 --> 00:13:56.100\nSo how do we notify Lambda\nto take an action or\n\n275\n00:13:56.100 --> 00:13:57.970\nwhatever other service\nit is that we're using?\n\n276\n00:13:57.970 --> 00:14:01.670\nWell inside of S3 we can\nset up event notifications.\n\n277\n00:14:01.670 --> 00:14:06.880\nEvent notification say watch for this\nevent and if you see it take this action.\n\n278\n00:14:06.880 --> 00:14:11.085\nNow this action is usually pretty\nlimited like write something to a log.\n\n279\n00:14:11.085 --> 00:14:14.785\nOr send the notice over to lambda.\n\n280\n00:14:14.785 --> 00:14:17.435\nAnd then lambda can take that notice,\nthat simple notice, and\n\n281\n00:14:17.435 --> 00:14:18.745\nthen it can do amazing things.\n\n282\n00:14:18.745 --> 00:14:20.155\nYou can do all sorts of crazy things.\n\n283\n00:14:20.155 --> 00:14:22.155\nSo if we think that a system\nhas been compromised,\n\n284\n00:14:22.155 --> 00:14:25.415\nwe can actually adjust the security\ngroup associated with it,\n\n285\n00:14:25.415 --> 00:14:28.035\nto block it off to isolate it\nfrom the rest of our network.\n\n286\n00:14:28.035 --> 00:14:32.830\nOr if we see load increasing\nfrom a particular\n\n287\n00:14:32.830 --> 00:14:36.310\nregion it can spin up new copies somewhere\nelse, it can do all sorts of crazy things\n\n288\n00:14:36.310 --> 00:14:40.310\nreally there's almost no limit\nwith a product like Lambda.\n\n289\n00:14:40.310 --> 00:14:43.994\nThere's other solutions inside of\nAWS that are very similar, too,\n\n290\n00:14:43.994 --> 00:14:48.522\nthat we can take advantage of, but it all\nstarts with an event notification system.\n\n291\n00:14:48.522 --> 00:14:51.031\nSo you'll notice that right\nbeneath my logging screen here,\n\n292\n00:14:51.031 --> 00:14:54.100\nso after I turn on logging,\nright after that I've got events.\n\n293\n00:14:54.100 --> 00:14:56.650\nAnd under events I can define one or\n\n294\n00:14:56.650 --> 00:15:00.660\nmore events right here that we\ncan generate notifications for.\n\n295\n00:15:00.660 --> 00:15:04.160\nAnd it can be for the entire bucket or\njust for certain prefixes or\n\n296\n00:15:04.160 --> 00:15:05.900\njust for certain suffixes.\n\n297\n00:15:05.900 --> 00:15:08.420\nAnd then we can tell it\nto do something with it.\n\n298\n00:15:08.420 --> 00:15:10.880\nAll right now what is\nthe something we can do?\n\n299\n00:15:10.880 --> 00:15:14.290\nWell we start with our event\nwith what we watch for,\n\n300\n00:15:14.290 --> 00:15:18.020\nI can watch for puts, or\npost, copies, deletes, right.\n\n301\n00:15:18.020 --> 00:15:21.420\nSo, I can say for\nexample if somebody deletes a file,\n\n302\n00:15:21.420 --> 00:15:24.410\nI just wanna generate a little\nlogin entry, so I know it happened.\n\n303\n00:15:24.410 --> 00:15:28.460\nBut if somebody puts a new file,\nmaybe this is, let's say I'm doing video\n\n304\n00:15:28.460 --> 00:15:34.430\ntranscoding, so somebody puts a upload\na video file and it's in one format.\n\n305\n00:15:34.430 --> 00:15:37.521\nI now need to run it through an elastic\ntranscoder to convert it into\n\n306\n00:15:37.521 --> 00:15:38.358\nanother format.\n\n307\n00:15:38.358 --> 00:15:43.258\nSo I might come in here and\nsay, all right,\n\n308\n00:15:43.258 --> 00:15:50.066\nif somebody does a put inside\nof the video uploads prefix and\n\n309\n00:15:50.066 --> 00:15:54.715\nit ends in AVI I wanna convert it to MP4.\n\n310\n00:15:54.715 --> 00:16:00.290\nRight, or some other format so\nI can then generate Something.\n\n311\n00:16:00.290 --> 00:16:04.710\nI can use the simple notifications\nservice or the simple queuing service, or\n\n312\n00:16:04.710 --> 00:16:06.410\nI can call a Lambda function.\n\n313\n00:16:06.410 --> 00:16:08.030\nThat's probably the most powerful one.\n\n314\n00:16:08.030 --> 00:16:11.320\nThe notification service lets you pretty\nmuch notify anything else also, but\n\n315\n00:16:11.320 --> 00:16:14.430\nwith the Lambda one we can\nspecifically call Lambda function.\n\n316\n00:16:14.430 --> 00:16:16.870\nI might have it where it reaches\nout to that and it says,\n\n317\n00:16:16.870 --> 00:16:19.550\nhey, we just got this new file.\n\n318\n00:16:19.550 --> 00:16:26.730\nSo, it can spin-up a elastic transcoder,\nfeed that MP4 into it, or the AVI into it.\n\n319\n00:16:26.730 --> 00:16:30.080\nGenerate the MP4, put the MP4 in whatever\ndestination it's supposed to be.\n\n320\n00:16:30.080 --> 00:16:33.090\nMaybe in the cloud front, so I can\nstart serving it across the globe, and\n\n321\n00:16:33.090 --> 00:16:36.880\nthen goes and removes the initial\nAVI cuz it's done and it's gone.\n\n322\n00:16:36.880 --> 00:16:42.150\nAll of that can happen automatically,\njust by uploading that file,\n\n323\n00:16:42.150 --> 00:16:46.110\nand this event notices it, catches it,\nand takes an action, right?\n\n324\n00:16:46.110 --> 00:16:47.960\nI don't have any Lambda\nfunctions to find right now, so\n\n325\n00:16:47.960 --> 00:16:52.970\nI can't do that, but, if we had a\nparticular SNS topic to find, or whatever.\n\n326\n00:16:52.970 --> 00:16:55.070\nActually, it looks like got NotifyMe.\n\n327\n00:16:55.070 --> 00:16:57.910\nNotifyMe is where e-mails, the\nadministrator, somebody uploads a file,\n\n328\n00:16:57.910 --> 00:16:59.050\nshoot me an e-mail.\n\n329\n00:16:59.050 --> 00:17:00.680\nNot exciting, but it works.\n\n330\n00:17:00.680 --> 00:17:04.830\nSo, we can get stuff like that put in,\nand now I've got it up and it's going.\n\n331\n00:17:04.830 --> 00:17:07.400\nThat kind of functionality\nhelps us to automate things and\n\n332\n00:17:07.400 --> 00:17:11.795\nthat is really one of the big benefits\nof going with a cloud provider like AWS.\n\n333\n00:17:11.795 --> 00:17:14.585\nSo, Don,\nit just started stirring in my brain.\n\n334\n00:17:14.585 --> 00:17:18.790\nI feel like I might be able to really\nget close to having super powers.\n\n335\n00:17:18.790 --> 00:17:21.295\n&gt;&gt; [LAUGH]\n&gt;&gt; With some of these event notifications.\n\n336\n00:17:21.295 --> 00:17:24.175\nI'm like, okay,\nI can make this to react this way.\n\n337\n00:17:24.175 --> 00:17:25.845\nSo, my brain is churning.\n\n338\n00:17:25.845 --> 00:17:31.240\nBut, we've covered several topics for\nS3 over the last few episodes.\n\n339\n00:17:31.240 --> 00:17:36.120\nBut are there any final thoughts,\nkind of details that we need to part with?\n\n340\n00:17:36.120 --> 00:17:38.350\n&gt;&gt; All right, let's just cover\na couple of best practices here.\n\n341\n00:17:38.350 --> 00:17:41.590\nSo with S3, it is simple storage.\n\n342\n00:17:41.590 --> 00:17:43.320\nIt's not the only storage\nthat's available,\n\n343\n00:17:43.320 --> 00:17:46.940\nthere's plenty of other ways\nto store data inside of AWS.\n\n344\n00:17:46.940 --> 00:17:50.020\nS3 is the most simple,\nit's very robust, it's very fast.\n\n345\n00:17:50.020 --> 00:17:53.470\nSo there's a few use case scenarios\nwhere it really lines up well with\n\n346\n00:17:53.470 --> 00:17:57.850\nOne great use case scenario is if\nwe have content, files, whatever,\n\n347\n00:17:57.850 --> 00:18:02.310\nthat we need to distribute to tons\nof people around the planet, right.\n\n348\n00:18:02.310 --> 00:18:06.760\nBut the problem is S3 actually has a bit\nof a performance profile to it that's not\n\n349\n00:18:06.760 --> 00:18:08.550\nas attractive as we might think.\n\n350\n00:18:08.550 --> 00:18:13.820\nFor example, S3 can handle up to 100\nrequests per second without a problem.\n\n351\n00:18:13.820 --> 00:18:17.800\nNow for most of us 100 requests\nper second is pretty crazy.\n\n352\n00:18:17.800 --> 00:18:20.730\nThat's a lot of requests\nthat are coming through.\n\n353\n00:18:20.730 --> 00:18:24.160\nBut it's not crazy for everybody.\n\n354\n00:18:24.160 --> 00:18:29.910\nIf you're the NFL and it's the Super Bowl\nyou might have millions of people\n\n355\n00:18:29.910 --> 00:18:35.190\nall trying to access some kind of image\non your website all at the same time.\n\n356\n00:18:35.190 --> 00:18:41.660\nAn S3 isn't necessarily geared to be\nable to handle that type of a of data.\n\n357\n00:18:41.660 --> 00:18:45.470\nSo, understand that S3 is very flexible,\nvery powerful, but\n\n358\n00:18:45.470 --> 00:18:50.140\nit doesn't necessarily\nscale very well by itself.\n\n359\n00:18:50.140 --> 00:18:53.250\nAnd so, if you are in a high\nbandwidth solution like that,\n\n360\n00:18:53.250 --> 00:18:55.830\nif you got a huge amount of\nrequest coming in per second,\n\n361\n00:18:55.830 --> 00:19:01.110\nyou may need to combine S3 with something\nelse S3 oftentimes functions great\n\n362\n00:19:01.110 --> 00:19:06.100\nas an origination source, but\nnot as what your end users actually touch.\n\n363\n00:19:06.100 --> 00:19:09.890\nAnd what I mean by that is we\nmight combine it with Cloud Front.\n\n364\n00:19:09.890 --> 00:19:13.010\nSo, Cloud Front is\nloading data from S3 and\n\n365\n00:19:13.010 --> 00:19:15.800\nreplicating across servers\nall over the globe.\n\n366\n00:19:15.800 --> 00:19:18.308\nSo, instead of everybody\nhitting one S3 bucket,\n\n367\n00:19:18.308 --> 00:19:22.130\nEverybody's hitting 1,000\nto cloud front end points.\n\n368\n00:19:22.130 --> 00:19:24.730\nAnd so, now it's distributed\nacross all those systems and\n\n369\n00:19:24.730 --> 00:19:27.520\nwe can handle millions\nof requests per second.\n\n370\n00:19:27.520 --> 00:19:30.980\nOr maybe I've got 50 web\nservers to spin up and\n\n371\n00:19:30.980 --> 00:19:35.330\nwhen the web servers spin up they grab\na copy of the web page from my S3 bucket.\n\n372\n00:19:35.330 --> 00:19:38.370\nAnd they load it into\ntheir HTML directory and\n\n373\n00:19:38.370 --> 00:19:42.440\noff they go, so I have 50 clients\nthat would touch the bucket.\n\n374\n00:19:42.440 --> 00:19:47.190\nBut then I have hundreds of thousands\nof visitor that come by and\n\n375\n00:19:47.190 --> 00:19:49.910\nthey're hitting the web servers,\nnot the S3 bucket.\n\n376\n00:19:49.910 --> 00:19:52.220\nS3 is great as an origination,\n\n377\n00:19:52.220 --> 00:19:56.480\nnot necessarily great as the actual\nfront-end that people hit.\n\n378\n00:19:56.480 --> 00:20:00.480\nSo be aware of that with S3 when you're\ndesigning your solutions that it's usually\n\n379\n00:20:00.480 --> 00:20:03.680\ngonna be on the back-end and your end\nusers aren't gonna touch it directly.\n\n380\n00:20:03.680 --> 00:20:05.830\nRight, and\nthe other thing is S3 can be used for\n\n381\n00:20:05.830 --> 00:20:07.810\nstorage for other things than people.\n\n382\n00:20:07.810 --> 00:20:10.690\nAnd I mentioned one briefly earlier in\nthis episode which is you might have\n\n383\n00:20:10.690 --> 00:20:13.350\na database that needs blob storage, right.\n\n384\n00:20:13.350 --> 00:20:16.250\nSomewhere we can store binary data\noutside of its database files.\n\n385\n00:20:16.250 --> 00:20:21.640\nSo you might have AuroraDB or\nMySQL, MariaDB, whatever.\n\n386\n00:20:21.640 --> 00:20:26.460\nOr even some of the NoSQL type solutions\nthat are up And like Dynamodb and\n\n387\n00:20:26.460 --> 00:20:28.540\nit may need blob storage some where.\n\n388\n00:20:28.540 --> 00:20:30.510\nYou can use us three for\nyour blob storage.\n\n389\n00:20:30.510 --> 00:20:33.270\nPeople are hitting the data base and\nthey are doing the request.\n\n390\n00:20:33.270 --> 00:20:36.340\nAnd then the data base\nsoftware can reach out and\n\n391\n00:20:36.340 --> 00:20:39.040\ngrab just portions of that file blob.\n\n392\n00:20:39.040 --> 00:20:43.410\nTo bring back to who ever\nis doing the quarrying.\n\n393\n00:20:43.410 --> 00:20:46.060\nThat's another officiate\nway we can use as three.\n\n394\n00:20:46.060 --> 00:20:49.790\nNot customer facing, But\nsupporting our data bases, right?\n\n395\n00:20:49.790 --> 00:20:52.940\nAlways be aware of these kind of alternate\nuse case scenarios that are out there for\n\n396\n00:20:52.940 --> 00:20:56.690\nhow S3 can be leveraged as a solution.\n\n397\n00:20:56.690 --> 00:20:59.520\nThe other thing is S3 because it's so\n\n398\n00:20:59.520 --> 00:21:03.430\nsimple is usually the first service that\nmost companies deploy when they start\n\n399\n00:21:03.430 --> 00:21:05.710\ndipping their toes in the cloud waters,\nright?\n\n400\n00:21:05.710 --> 00:21:09.230\nSo What I normally see, and\nthis is a pretty common scenario,\n\n401\n00:21:09.230 --> 00:21:13.820\nis we have a completely\non-premises solution and\n\n402\n00:21:13.820 --> 00:21:17.840\nwe start leveraging S3 as\na replacement for our offsite backups.\n\n403\n00:21:17.840 --> 00:21:19.150\nWe need to backup.\n\n404\n00:21:19.150 --> 00:21:21.880\nOur data from on premises servers,\nlet's store it in S3.\n\n405\n00:21:21.880 --> 00:21:24.600\nAnd let's do life cycle\nmanagement up in S3 so\n\n406\n00:21:24.600 --> 00:21:28.500\nthat we can have it cycle down through\nthe storage tiers and we can maintain data\n\n407\n00:21:28.500 --> 00:21:32.390\nmuch longer than we could on physical\ntape for much less money, right?\n\n408\n00:21:32.390 --> 00:21:35.460\nThat's a great way to get started\nwith that backup type solution.\n\n409\n00:21:35.460 --> 00:21:38.240\nAnd that's where like the storage\ngateway service comes in.\n\n410\n00:21:38.240 --> 00:21:41.340\nWhere you have this on site you back\nup to it and then replicates up to S3.\n\n411\n00:21:41.340 --> 00:21:44.090\nThose technologies work really well and\n\n412\n00:21:44.090 --> 00:21:49.620\nthey're a great low-risk method for\npeople to get involved with the cloud.\n\n413\n00:21:49.620 --> 00:21:52.680\n&gt;&gt; So, Don, we have definitely touched\non some of the powerful features.\n\n414\n00:21:52.680 --> 00:21:57.080\nEven though it's the simple storage\nsolutions, that does not limit it's power,\n\n415\n00:21:57.080 --> 00:22:00.060\nand hopefully you've\nlearned as much as I have.\n\n416\n00:22:00.060 --> 00:22:02.140\nBut unfortunately we are out of time for\n\n417\n00:22:02.140 --> 00:22:04.840\nthis episode and\nwe will be back with more AWS.\n\n418\n00:22:04.840 --> 00:22:08.620\nSo signing out for ITProTV,\nI've been your host Justin Dennison.\n\n419\n00:22:08.620 --> 00:22:09.610\n&gt;&gt; And I'm Don Pezet.\n\n420\n00:22:09.610 --> 00:22:11.137\n&gt;&gt; See you next time.\n\n421\n00:22:11.137 --> 00:22:17.147\n[MUSIC]\n\n422\n00:22:17.147 --> 00:22:20.125\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207291608"
        },
        {
          "description": "In this episode, Justin and Don explore the AWS service Glacier as a backup solution of on and off premises data. They cover the difference between Glacier and other AWS storage solutions as well as the points that you must consideration when designing a system that uses Glacier for archival system.",
          "length": "1499",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-3-amazon_glacier-030217.00_24_47_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-3-amazon_glacier-030217.00_24_47_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-2-3-amazon_glacier-030217.00_24_47_25.Still001-sm.jpg",
          "title": "Amazon Glacier",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:05.011\nWelcome to ITpro.TV I am\nyour host [INAUDIBLE].\n\n2\n00:00:05.011 --> 00:00:08.284\n[MUSIC]\n\n3\n00:00:08.284 --> 00:00:11.961\n&gt;&gt; You're watching IT Pro TV.\n\n4\n00:00:11.961 --> 00:00:16.028\n&gt;&gt; Greetings everyone and welcome to\nanother episode of ITPro.TV, I'm your host\n\n5\n00:00:16.028 --> 00:00:19.916\nJustin Dennison and in today's episode,\nwe're actually going to continue\n\n6\n00:00:19.916 --> 00:00:24.750\nour journey into those AWS services\n&gt;&gt; Particularly Glacier, and\n\n7\n00:00:24.750 --> 00:00:26.350\nto help us with that is Mr. Don Pezet.\n\n8\n00:00:26.350 --> 00:00:27.470\nHow are you doing today, Don?\n\n9\n00:00:27.470 --> 00:00:30.310\n&gt;&gt; I'm doing great, Justin, ready to\ndive right back into the world of AWS.\n\n10\n00:00:30.310 --> 00:00:32.810\nAnd well, like Justin said,\nwe're gonna take a look at Glacier.\n\n11\n00:00:32.810 --> 00:00:37.850\nI know we mentioned it a few times\nthroughout the S3 content and It is a kind\n\n12\n00:00:37.850 --> 00:00:42.830\nof a variation on what S3 started such\na very different technology under the hood\n\n13\n00:00:42.830 --> 00:00:47.640\nit is service are very particular purpose\nso we gonna look at what glacier is?\n\n14\n00:00:47.640 --> 00:00:48.500\nWhat it does?\n\n15\n00:00:48.500 --> 00:00:53.700\nAnd take a look at how we can level\nthat in our solutions designs.\n\n16\n00:00:53.700 --> 00:00:58.070\n&gt;&gt; So Don as you've said we've heard this\nterm glacier mentioned a couple of times\n\n17\n00:00:58.070 --> 00:01:03.790\nin our S3 videos, but what is glacier\nexactly, it's a little different,\n\n18\n00:01:03.790 --> 00:01:06.970\nit's kind of the same,\ncan you give us a little more information?\n\n19\n00:01:06.970 --> 00:01:11.380\n&gt;&gt; So when we talk about S3 we talk about\nstorage classes, there was standard,\n\n20\n00:01:11.380 --> 00:01:14.910\nstandard infrequent access,\nthere was reduced redundancy storage, and\n\n21\n00:01:14.910 --> 00:01:19.550\nwith each one of them I said how there\nwas A certain level of availability, and\n\n22\n00:01:19.550 --> 00:01:21.780\na certain level of durability.\n\n23\n00:01:21.780 --> 00:01:24.230\nAnd the more of it the better right?\n\n24\n00:01:24.230 --> 00:01:27.510\nWell, when it comes to Glacier,\nit is very,\n\n25\n00:01:27.510 --> 00:01:31.450\nvery high durability, and\nit's also very, very high latency.\n\n26\n00:01:31.450 --> 00:01:34.800\nNow, before we get wrapped up\nin thinking that's a good thing,\n\n27\n00:01:34.800 --> 00:01:37.440\nnormally when we talk about latency,\nwe want low latency.\n\n28\n00:01:37.440 --> 00:01:38.930\nHigh latency is bad.\n\n29\n00:01:38.930 --> 00:01:41.730\nLatency means it takes a long\ntime to get at your data.\n\n30\n00:01:41.730 --> 00:01:43.510\nAnd normally we don't want that.\n\n31\n00:01:43.510 --> 00:01:47.150\nBut there are times where it\ndoesn't matter where time is not\n\n32\n00:01:47.150 --> 00:01:51.370\nof the essence were we're not\nurgently needing to get at our data.\n\n33\n00:01:51.370 --> 00:01:55.020\nIf you had images on your website you need\nto be able to urgently get at that when\n\n34\n00:01:55.020 --> 00:01:59.100\nsomeone pulls up the webpage you need to\nrender it as fast as you can but there\n\n35\n00:01:59.100 --> 00:02:04.200\nare some types of data like back ups were\nwe don't need immediate access to them.\n\n36\n00:02:04.200 --> 00:02:06.900\nIn fact hopefully we never\nneed access to them at all.\n\n37\n00:02:06.900 --> 00:02:09.860\nWe back up, and then if we have a failure\nwe never have to go to back ups.\n\n38\n00:02:09.860 --> 00:02:11.120\nThat's the perfect world.\n\n39\n00:02:11.120 --> 00:02:12.310\nThat's what we hope for.\n\n40\n00:02:12.310 --> 00:02:15.720\nSo in those scenarios,\nwe can use glacier storage.\n\n41\n00:02:15.720 --> 00:02:17.470\nA fourth storage class\navailable that S3 or\n\n42\n00:02:17.470 --> 00:02:19.780\nit's actually a stand\nalone product as well.\n\n43\n00:02:19.780 --> 00:02:22.760\nAnd we can use that to\nstore our backup media or\n\n44\n00:02:22.760 --> 00:02:25.840\nother types of high latency capable data.\n\n45\n00:02:25.840 --> 00:02:28.610\nAnd we can save a ton of money.\n\n46\n00:02:28.610 --> 00:02:32.400\nIt's a lot less expensive because the\ninfrastructure is a lot less complex and\n\n47\n00:02:32.400 --> 00:02:33.600\neasier to maintain,\n\n48\n00:02:33.600 --> 00:02:36.580\nthan a highly available solution\nlike what we see with S3.\n\n49\n00:02:36.580 --> 00:02:38.830\nSo that's where we really start\nto see the big difference here,\n\n50\n00:02:38.830 --> 00:02:42.940\nis that Glacier is designed\nto be Slow cold storage.\n\n51\n00:02:42.940 --> 00:02:48.270\nYou know, think about like an iceberg,\nan actual glacier where it's slow moving,\n\n52\n00:02:48.270 --> 00:02:54.110\nit's cold storage, it's not the blazing\nfast, ultra hot data that we normally get.\n\n53\n00:02:54.110 --> 00:02:56.790\nBut there's a purpose for it and\nthe main purpose is to save money.\n\n54\n00:02:56.790 --> 00:02:59.010\nCause otherwise we would choose S3 for\neverything if we wanted it.\n\n55\n00:02:59.010 --> 00:03:01.130\nIf money was no object, you can use S3 for\n\n56\n00:03:01.130 --> 00:03:05.380\neverything, and\nsuper fast ultra active, right?\n\n57\n00:03:05.380 --> 00:03:08.560\nBut there's a few other things that S3\ndoesn't do that Glacier does that's kind\n\n58\n00:03:08.560 --> 00:03:09.590\nof important to us.\n\n59\n00:03:09.590 --> 00:03:10.625\nAnd so\nwe'll talk about those here in a minute.\n\n60\n00:03:10.625 --> 00:03:16.028\n&gt;&gt; So Don, we know those minor details\nlike there's a 5 terabyte limit,\n\n61\n00:03:16.028 --> 00:03:18.830\nI think, for a single object in S3.\n\n62\n00:03:20.360 --> 00:03:22.950\nVarious ways you can get data in and\nout of there.\n\n63\n00:03:22.950 --> 00:03:24.650\nWhat is the big difference\nbetween Glacier,\n\n64\n00:03:24.650 --> 00:03:27.020\nas far as those more minor details?\n\n65\n00:03:27.020 --> 00:03:28.578\nWell they're not minor,\nthey're actually important.\n\n66\n00:03:28.578 --> 00:03:29.630\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n67\n00:03:29.630 --> 00:03:32.200\nthey're not things that are always\nat the forefront of your mind.\n\n68\n00:03:32.200 --> 00:03:34.631\nWhat are the differences between S3 and\nGlacier?\n\n69\n00:03:34.631 --> 00:03:38.580\n&gt;&gt; All right, so in the Glacier world\nyou do have limitations, just like S3,\n\n70\n00:03:38.580 --> 00:03:41.680\nalthough you also have no limitations,\njust like S3 too.\n\n71\n00:03:41.680 --> 00:03:44.250\nRemember how in S3 we could sort\nas much data as you wanted.\n\n72\n00:03:44.250 --> 00:03:46.110\nYou have unlimited data storage.\n\n73\n00:03:46.110 --> 00:03:48.090\nSame thing in Glacier,\nyou have unlimited data storage.\n\n74\n00:03:48.090 --> 00:03:50.460\nThe only thing you're limited\nby is your pocket book or\n\n75\n00:03:50.460 --> 00:03:51.980\nwhat you can afford to pay for.\n\n76\n00:03:51.980 --> 00:03:54.880\nSo we can store as much\ndata as we want in there.\n\n77\n00:03:54.880 --> 00:04:00.080\nBut, Glacier was designed as\na replacement for tape backups, right?\n\n78\n00:04:00.080 --> 00:04:03.790\nPeople backup to tape and\na tape can only be so large normally.\n\n79\n00:04:03.790 --> 00:04:05.480\nWell here we're not\ndealing with actual tapes,\n\n80\n00:04:05.480 --> 00:04:09.020\nwe're dealing with these logical\nunits that are called archives.\n\n81\n00:04:09.020 --> 00:04:11.660\nAnd Amazon has a limit\non the size of those.\n\n82\n00:04:11.660 --> 00:04:13.290\nThe limit is currently 40 terabytes.\n\n83\n00:04:13.290 --> 00:04:14.870\nSo when you back up or\n\n84\n00:04:14.870 --> 00:04:19.290\nsend data into Glacier, if it's under\n40 terabytes, no big deal, right?\n\n85\n00:04:19.290 --> 00:04:21.410\nYou just truck it up there and\nyou're done, right.\n\n86\n00:04:21.410 --> 00:04:22.630\nBut if it's over 40 terabytes,\n\n87\n00:04:22.630 --> 00:04:25.400\nit just means you need to break\nit up into multiple archives.\n\n88\n00:04:25.400 --> 00:04:27.140\nAnd how many archives can you have?\n\n89\n00:04:27.140 --> 00:04:30.180\nAn unlimited amount,\nyou can have as many archives as you want.\n\n90\n00:04:30.180 --> 00:04:32.910\nJust get them created,\nstart throwing your data up in there.\n\n91\n00:04:32.910 --> 00:04:35.330\nAnd then you can retrieve\nyour data the same way.\n\n92\n00:04:35.330 --> 00:04:37.970\nI find it's easiest if I\nthink of them as tapes,\n\n93\n00:04:37.970 --> 00:04:39.870\nthat we've got these 40 terabyte tapes.\n\n94\n00:04:39.870 --> 00:04:42.150\nAnd when you fill up a 40 terabyte tape,\nyou just move onto the next one and\n\n95\n00:04:42.150 --> 00:04:43.560\nstart filling up the next one.\n\n96\n00:04:43.560 --> 00:04:47.650\nExcept I don't have to worry about,\nhey, tapes go bad every so\n\n97\n00:04:47.650 --> 00:04:51.500\noften I get around the cleaning\ncartridge through my my tape drives.\n\n98\n00:04:51.500 --> 00:04:53.220\nI've gonna cycles and rotate them.\n\n99\n00:04:53.220 --> 00:04:56.230\nOnce a year we gotta replace the tapes\nto keep on you know with the new or\n\n100\n00:04:56.230 --> 00:04:59.340\nfresh ones because they can lose\ntension on their their spindle.\n\n101\n00:04:59.340 --> 00:05:01.770\nWe're learning all kinds of\nthings you care about that.\n\n102\n00:05:01.770 --> 00:05:05.820\nBut does that stop we don't really glacier\nright because it's just a digital system\n\n103\n00:05:05.820 --> 00:05:09.110\nwe do our date up in there and\noften goes those archives.\n\n104\n00:05:09.110 --> 00:05:13.270\nThat's kind of the key storage unit\nthat we have inside of glacier,\n\n105\n00:05:13.270 --> 00:05:15.600\nwe throw our data in there and\nthen we retrieve it.\n\n106\n00:05:15.600 --> 00:05:19.050\nNow, there's some interesting, I don't\nwant to say limitations, interesting\n\n107\n00:05:19.050 --> 00:05:23.540\ncharacteristics of how those archives\nwork, and one of the most important ones,\n\n108\n00:05:23.540 --> 00:05:26.950\nthe one I want to stress the most here,\nthe one that will stand out on the exam\n\n109\n00:05:26.950 --> 00:05:32.260\nIs that archives are immutable, and\nthat means they can't be changed.\n\n110\n00:05:32.260 --> 00:05:35.790\nOnce we write data into\nthe archive that's it.\n\n111\n00:05:35.790 --> 00:05:37.820\nThe only thing we can\ndo to it is delete it.\n\n112\n00:05:37.820 --> 00:05:40.620\nIf you don't need the archive anymore\nyou can delete it and get rid of it, but\n\n113\n00:05:40.620 --> 00:05:42.660\nyou can't change an archive.\n\n114\n00:05:42.660 --> 00:05:43.590\nIt's immutable.\n\n115\n00:05:43.590 --> 00:05:48.470\nNow that's a good thing because\nif you think about a backup,\n\n116\n00:05:48.470 --> 00:05:51.130\ndo you ever wanna go and\nchange one of your backups?\n\n117\n00:05:51.130 --> 00:05:51.840\nNo.\n\n118\n00:05:51.840 --> 00:05:54.440\nIf your systems have changed,\nyou just take another backup.\n\n119\n00:05:54.440 --> 00:05:55.700\nThat's what you want.\n\n120\n00:05:55.700 --> 00:05:58.190\nAnd you also wouldn't want\nsomebody getting in and\n\n121\n00:05:58.190 --> 00:06:00.010\ntampering with a backup, would you?\n\n122\n00:06:00.010 --> 00:06:03.170\nWe hear about this with ransomware\na lot where ransomeware\n\n123\n00:06:03.170 --> 00:06:06.120\ngets installed on somebody's system,\nand starts encrypting their files.\n\n124\n00:06:06.120 --> 00:06:08.160\nAnd they've got online backups.\n\n125\n00:06:08.160 --> 00:06:11.960\nAnd the ransomware is able to find the\nonline backups and encrypt them, as well.\n\n126\n00:06:11.960 --> 00:06:13.880\nWell, that's not going\nto happen with Glacier.\n\n127\n00:06:13.880 --> 00:06:16.660\nBecause you can't change the backups\nthat have already been made.\n\n128\n00:06:16.660 --> 00:06:19.120\nYou can only delete them.\n\n129\n00:06:19.120 --> 00:06:21.050\nSo that's a key thing\nto remember about them.\n\n130\n00:06:21.050 --> 00:06:23.450\nAnd also, since I mention encryption.\n\n131\n00:06:23.450 --> 00:06:25.690\nThe archives are encrypted by default.\n\n132\n00:06:25.690 --> 00:06:30.530\nThat when you send data up in the glacier,\nAmazon is encrypting it.\n\n133\n00:06:30.530 --> 00:06:32.780\nAnd there's a few reasons for\nhow they do that.\n\n134\n00:06:32.780 --> 00:06:36.300\nThe main reason being that once\nthe data is sent up in the Amazon,\n\n135\n00:06:36.300 --> 00:06:38.190\nthey don't keep it online.\n\n136\n00:06:38.190 --> 00:06:41.860\nThey shift it to offline systems,\nor sometimes they keep it online.\n\n137\n00:06:41.860 --> 00:06:45.430\nBut they shift to offline systems,\nwhich is part of why it takes so\n\n138\n00:06:45.430 --> 00:06:47.260\nlong to retrieve our data.\n\n139\n00:06:47.260 --> 00:06:51.880\nWhen we go to get data back out of an\narchive, it's not like an S3 bucket where\n\n140\n00:06:51.880 --> 00:06:55.410\nthe data is waiting right there,\nlive and ready for us to get at it.\n\n141\n00:06:55.410 --> 00:06:59.560\nWe have to send a request in, and\nsay I would like to access this file.\n\n142\n00:07:00.610 --> 00:07:06.910\nAnd then in three to five hours we get the\nmessage back from the API saying that file\n\n143\n00:07:06.910 --> 00:07:11.090\ndata is ready for us, that object, it is\nstill an object right, it's just raw data,\n\n144\n00:07:11.090 --> 00:07:14.640\nnot necessarily a file, I mean usually\nit is a file, but it doesn't have to be.\n\n145\n00:07:14.640 --> 00:07:15.830\nWe can retrieve that data.\n\n146\n00:07:15.830 --> 00:07:19.780\nBut that three to five hour delay,\nthat's the big differentiator for\n\n147\n00:07:19.780 --> 00:07:23.580\nhow an archive works versus\nhow objects stored in S3 work.\n\n148\n00:07:23.580 --> 00:07:27.608\nIs we've got high, high,\nhigh latency, three to five hours.\n\n149\n00:07:27.608 --> 00:07:31.030\n&gt;&gt; So Don,\nwe've made this comparison between S3.\n\n150\n00:07:31.030 --> 00:07:35.130\nAnd I remember in S3 we had buckets,\nand then we had files and folders.\n\n151\n00:07:35.130 --> 00:07:37.430\nBut even though those\nwere really file names.\n\n152\n00:07:37.430 --> 00:07:38.850\nAll kind of concatenated together.\n\n153\n00:07:38.850 --> 00:07:41.670\nAnd that was for\nkind of logical organization.\n\n154\n00:07:41.670 --> 00:07:44.650\nDoes Glacier offer\nsomething similar to that?\n\n155\n00:07:44.650 --> 00:07:46.500\nOr what's the difference there?\n\n156\n00:07:46.500 --> 00:07:48.840\n&gt;&gt; Yeah, we get kind of close.\n\n157\n00:07:48.840 --> 00:07:50.230\nBecause these are designed for back ups.\n\n158\n00:07:50.230 --> 00:07:52.790\nThey're not really designed for us to\nbe interacting with on a regular basis.\n\n159\n00:07:52.790 --> 00:07:56.469\nSo you'll find where things are not so\nuser friendly, right?\n\n160\n00:07:56.469 --> 00:07:59.660\nIn S3, all of your objects\nhad nice friendly names.\n\n161\n00:07:59.660 --> 00:08:02.093\nYou know,\nI might have a file called index.html and\n\n162\n00:08:02.093 --> 00:08:03.984\nthat's what it's named inside of S3.\n\n163\n00:08:03.984 --> 00:08:07.326\nBut when you write into glacier things\nare being stored in an archive and\n\n164\n00:08:07.326 --> 00:08:09.350\nan archive just has an ID and that's it.\n\n165\n00:08:09.350 --> 00:08:12.720\nIt's got an ID number and\nno friendly name that you can set, and\n\n166\n00:08:12.720 --> 00:08:15.810\nas far as folders you don't have\nthose you just have your archives.\n\n167\n00:08:15.810 --> 00:08:19.160\nAnd instead of a Pocket,\nyou have what's called a vault.\n\n168\n00:08:19.160 --> 00:08:21.640\nAnd the vault is where\nyour archives get stored.\n\n169\n00:08:21.640 --> 00:08:25.020\nNow, a vault has unlimited storage, so\n\n170\n00:08:25.020 --> 00:08:28.220\nyou can put as many archives as\nyou want inside of that vault.\n\n171\n00:08:28.220 --> 00:08:32.615\nSo for\nmost customers one vault is plenty right?\n\n172\n00:08:32.615 --> 00:08:35.645\nBut if your supporting backup for\ndifferent systems, if your trying to\n\n173\n00:08:35.645 --> 00:08:39.955\ncreate some kinda isolation, if you want\nto use IAM to assign permissions to give\n\n174\n00:08:39.955 --> 00:08:43.515\nsome people access to some backup and\nother people access to other back ups.\n\n175\n00:08:43.515 --> 00:08:45.265\nThen you made need more than one vault.\n\n176\n00:08:45.265 --> 00:08:51.360\nRight now there is a limit where an amazon\naccount can only have 1, 000 vaults.\n\n177\n00:08:51.360 --> 00:08:56.333\nNow that's a lot of vaults, a 1, 000\nvaults is more than I can't even the most\n\n178\n00:08:56.333 --> 00:08:58.800\nvaults I've had in an account is three.\n\n179\n00:08:58.800 --> 00:09:02.024\nSo to have 1, 000 really way more\nthen most people are gonna need but\n\n180\n00:09:02.024 --> 00:09:04.765\nif you're in a scenario where\nyou need more than a thousand,\n\n181\n00:09:04.765 --> 00:09:07.488\nyou're simply gonna have to\ncreate more than one account.\n\n182\n00:09:07.488 --> 00:09:10.900\nAnd if you have more than one account,\nnow you can bump those numbers up.\n\n183\n00:09:10.900 --> 00:09:14.713\nBut each vault has unlimited storage and\nyour archives go in there.\n\n184\n00:09:14.713 --> 00:09:16.684\nAll the archives have ID numbers anyway so\n\n185\n00:09:16.684 --> 00:09:20.133\nyou're able to keep track of that\nthrough the API and all those systems.\n\n186\n00:09:20.133 --> 00:09:23.491\nThere's not really a whole lot of\nbenefits in having more than one vault,\n\n187\n00:09:23.491 --> 00:09:25.900\naside from permissions types capabilities.\n\n188\n00:09:25.900 --> 00:09:29.830\nAnd you can even assign permissions based\non the archives themselves if you need to.\n\n189\n00:09:29.830 --> 00:09:32.374\nSo there's a few different\nways we can handle that.\n\n190\n00:09:32.374 --> 00:09:35.792\nAll right, one thing about a vault,\nwhen we create one,\n\n191\n00:09:35.792 --> 00:09:39.870\nit can actually have what are called\nvault policies assigned to it.\n\n192\n00:09:39.870 --> 00:09:41.480\nLet me just show you real quick.\n\n193\n00:09:41.480 --> 00:09:44.200\nI'm logged into AWS here.\n\n194\n00:09:44.200 --> 00:09:48.910\nAnd in AWS when you enter into Amazon\nGlacier, if you haven't created any vaults\n\n195\n00:09:48.910 --> 00:09:51.240\nyet you'll see this screen where it's\noffering for you to get started.\n\n196\n00:09:51.240 --> 00:09:54.595\nAnd you'll see what they're asking\nus about setting, creating vaults,\n\n197\n00:09:54.595 --> 00:09:57.803\nsetting data retrieval policies,\nand setting event notifications.\n\n198\n00:09:57.803 --> 00:10:00.120\nWe talked about event\nnotifications under S3, right.\n\n199\n00:10:00.120 --> 00:10:04.189\nIf an event occurs inside of S3 it can\nnotify another system to take actions.\n\n200\n00:10:04.189 --> 00:10:07.040\nWe want the same thing inside of Glacier.\n\n201\n00:10:07.040 --> 00:10:09.798\nAnd it's actually more\nimportant in Glacier.\n\n202\n00:10:09.798 --> 00:10:14.092\nBecause when I request a file,\nit takes three to five hours for that,\n\n203\n00:10:14.092 --> 00:10:15.880\nor, I shouldn't say file.\n\n204\n00:10:15.880 --> 00:10:18.470\nWhen I go to request an archive\nit takes three to five hours for\n\n205\n00:10:18.470 --> 00:10:19.870\nthat archive to become available.\n\n206\n00:10:19.870 --> 00:10:23.470\nWell I'm not gonna just sit there and\nwatch my screen and wait for\n\n207\n00:10:23.470 --> 00:10:25.470\na message to come up so\nthat I can press a button.\n\n208\n00:10:25.470 --> 00:10:28.715\nI need it to send me a notification,\nyes that object is now available.\n\n209\n00:10:28.715 --> 00:10:30.601\nAnd now that ICAP is available and\nI get my data and\n\n210\n00:10:30.601 --> 00:10:32.030\nmy systems can trigger off for that.\n\n211\n00:10:32.030 --> 00:10:34.660\nSo, having a system like\nthat is really important.\n\n212\n00:10:34.660 --> 00:10:38.660\nBut when we can vault, there's also\nvault policies that we can create.\n\n213\n00:10:38.660 --> 00:10:41.910\nAnd the vault policies can\ndefine all sorts of things, and\n\n214\n00:10:41.910 --> 00:10:43.460\nwe can set data retrieval.\n\n215\n00:10:43.460 --> 00:10:45.610\nWe can set permissions.\n\n216\n00:10:45.610 --> 00:10:51.100\nFor example, I remember how I\nmentioned that archives are immutable.\n\n217\n00:10:51.100 --> 00:10:53.150\nOnce you create an archive,\nyou can't change it.\n\n218\n00:10:53.150 --> 00:10:54.177\nYou can just delete it.\n\n219\n00:10:54.177 --> 00:10:57.112\nWell, you can actually\nmake a vault immutable,\n\n220\n00:10:57.112 --> 00:10:59.696\nwhere you can't even delete the archive.\n\n221\n00:10:59.696 --> 00:11:04.122\nIf you've got compliance requirements\nthat say you need to save backups for\n\n222\n00:11:04.122 --> 00:11:05.620\nseven years.\n\n223\n00:11:05.620 --> 00:11:08.130\nWell that's a lot of tapes\nto keep laying around.\n\n224\n00:11:08.130 --> 00:11:13.875\nBut I can shoot them up into Glacier and\nif I flag the vault as immutable,\n\n225\n00:11:13.875 --> 00:11:18.105\nand I set it to have a vault policy\nthat retains things for seven years and\n\n226\n00:11:18.105 --> 00:11:21.665\nthen deletes the for me,\nthen what I've effectively done is create\n\n227\n00:11:21.665 --> 00:11:25.705\na write-once read-many solution,\nright, the worm solution.\n\n228\n00:11:25.705 --> 00:11:29.375\nI always think of my first CD burner that\nI bought which was called a worm drive,\n\n229\n00:11:29.375 --> 00:11:33.460\nwhich is a terrible name for a technology,\nbut you'd write to the CD once and\n\n230\n00:11:33.460 --> 00:11:35.790\nthen you can read that CD over and\nover and over again.\n\n231\n00:11:35.790 --> 00:11:37.200\nBut you couldn't write to it again.\n\n232\n00:11:37.200 --> 00:11:38.130\nIt was done.\n\n233\n00:11:38.130 --> 00:11:40.260\nWell, that's how we can treat Glacier.\n\n234\n00:11:40.260 --> 00:11:42.920\nNow, when you make a Vault,\nit doesn't ask you all of that stuff.\n\n235\n00:11:42.920 --> 00:11:44.150\nI just go in here and create a Vault.\n\n236\n00:11:44.150 --> 00:11:47.650\nSo I might call this test backups.\n\n237\n00:11:47.650 --> 00:11:51.590\nAnd, when I move forward it's gonna ask\nabout enabling the notifications and\n\n238\n00:11:51.590 --> 00:11:53.930\nsee how I can do it through\nthe simple notification service.\n\n239\n00:11:53.930 --> 00:11:59.390\nAnd we typically want to do that if we\nwanna be able to automate the process\n\n240\n00:11:59.390 --> 00:12:03.130\nof retrieving data out of Glacier, in my\ncase I'll just leave it off for right now.\n\n241\n00:12:03.130 --> 00:12:05.512\nAnd then we finish up and\nall it asked me for\n\n242\n00:12:05.512 --> 00:12:08.586\nwas the name for the vault,\nnothing too crazy there.\n\n243\n00:12:08.586 --> 00:12:12.879\nBut once the vault is created you can pull\nup quite a bit of information on it and\n\n244\n00:12:12.879 --> 00:12:15.787\nyou can set permissions and\ntweak the notifications\n\n245\n00:12:15.787 --> 00:12:19.090\nyou can see the amount of archives\nthat are assigned in it and\n\n246\n00:12:19.090 --> 00:12:22.350\nthen right here we can\ncreate a vault lock policy.\n\n247\n00:12:22.350 --> 00:12:25.140\nAnd that vault lock policy is great.\n\n248\n00:12:25.140 --> 00:12:28.870\nIf you have compliance and regulatory\nissues that you need to maintain.\n\n249\n00:12:28.870 --> 00:12:31.750\nIf you got certain SLAs that\nyou've got to live up to,\n\n250\n00:12:31.750 --> 00:12:35.930\nyou can create a vault lock policy that\ndefines who's allowed to access what,\n\n251\n00:12:35.930 --> 00:12:40.250\nhow long data is retained, and\nwhether it can be deleted or not.\n\n252\n00:12:40.250 --> 00:12:43.690\nAnd that's a really important thing when\nwe're dealing with data retention for\n\n253\n00:12:43.690 --> 00:12:44.550\npolicy reasons.\n\n254\n00:12:44.550 --> 00:12:48.750\nSo that's another thing we\ncan do inside of Glacier.\n\n255\n00:12:48.750 --> 00:12:53.660\n&gt;&gt; So Don, are vault lock policies,\ncould you say those are similar to like\n\n256\n00:12:53.660 --> 00:12:58.700\nthe S3 bucket policies as far as\nmanaging that collection of things?\n\n257\n00:12:58.700 --> 00:13:01.005\nOr would you say that's more archive or?\n\n258\n00:13:01.005 --> 00:13:03.975\n&gt;&gt; I would say it's actually\na combination of the bucket policies,\n\n259\n00:13:03.975 --> 00:13:06.280\nit's really focused on permissions.\n\n260\n00:13:06.280 --> 00:13:10.077\nAnd the life cycle policies that focus on\ndata retention that you can combine those\n\n261\n00:13:10.077 --> 00:13:13.983\ntwo and that's really what we kinda see\nwith a vault-like policy inside a Glacier,\n\n262\n00:13:13.983 --> 00:13:16.148\nso it's really just\nmerging those together.\n\n263\n00:13:16.148 --> 00:13:19.752\nHere, it's almost a guarantee we're\ngonna set up whereas in S3 it's kind of\n\n264\n00:13:19.752 --> 00:13:20.910\nan optional component.\n\n265\n00:13:20.910 --> 00:13:21.744\nYou might choose to use it.\n\n266\n00:13:21.744 --> 00:13:24.065\nHere, you're pretty much going to have it.\n\n267\n00:13:24.065 --> 00:13:28.095\nSo definitely something\nto look into on that one.\n\n268\n00:13:28.095 --> 00:13:31.035\nThe other policy that we saw\nmentioned briefly when I was on\n\n269\n00:13:31.035 --> 00:13:33.865\nthat main screen was creating\na data retrieval policy.\n\n270\n00:13:33.865 --> 00:13:36.746\nAnd this is an important\nconcept to understand that\n\n271\n00:13:36.746 --> 00:13:41.441\nkinda differentiates Glacier from some of\nthe other solutions that are out there.\n\n272\n00:13:41.441 --> 00:13:45.641\nBecause Justin and I were talking\nabout it a little bit before the show,\n\n273\n00:13:45.641 --> 00:13:47.050\nis the cost of Glacier.\n\n274\n00:13:47.050 --> 00:13:51.786\nIt's such an inexpensive service\ncompared to some of the other backup\n\n275\n00:13:51.786 --> 00:13:53.883\nsolutions that are out there.\n\n276\n00:13:53.883 --> 00:13:57.920\nAnd the reason is we have to think about\nhow our costs are calculated in Glacier\n\n277\n00:13:57.920 --> 00:14:01.200\ndifferently than in normal\nbackup solutions, right?\n\n278\n00:14:01.200 --> 00:14:06.090\nFor example, if I were to deploy Symantec\nBackup Exec, or whoever owns it these\n\n279\n00:14:06.090 --> 00:14:10.630\ndays, Veritas Backup Exec, whatever,\ncombined with a physical tape solution.\n\n280\n00:14:10.630 --> 00:14:13.829\nI've gotta buy physical tape drives,\nI've gotta buy physical tapes,\n\n281\n00:14:13.829 --> 00:14:16.510\nI've gotta buy the software,\nI've gotta get it all set up.\n\n282\n00:14:16.510 --> 00:14:22.220\nAll that expense is up front,\nand then we run the solution.\n\n283\n00:14:22.220 --> 00:14:27.170\nAnd if a disaster ever occurs I go and\nI get my data and\n\n284\n00:14:27.170 --> 00:14:28.570\nit doesn't cost me anything.\n\n285\n00:14:28.570 --> 00:14:33.360\nThe cost was in setting up the backups,\nnot in retrieving the data.\n\n286\n00:14:33.360 --> 00:14:36.030\nBut AWS is a true cloud platform, so\n\n287\n00:14:36.030 --> 00:14:40.200\nit's a pay for what you use type model,\npay as you go.\n\n288\n00:14:40.200 --> 00:14:43.340\nAnd when you go to set this up,\nit's just setting up a bucket.\n\n289\n00:14:43.340 --> 00:14:44.350\nThat's not a big deal.\n\n290\n00:14:44.350 --> 00:14:47.410\nAnd we start throwing data in there and\nit charges you based on your storage.\n\n291\n00:14:47.410 --> 00:14:48.750\nHow much storage are you using?\n\n292\n00:14:48.750 --> 00:14:50.374\nYou're gonna get billed on that.\n\n293\n00:14:50.374 --> 00:14:55.480\nBut if you ever go to retrieve your\ndata there's bandwidth involved, right?\n\n294\n00:14:55.480 --> 00:14:59.337\nWe've gotta download that from AWS and\nhopefully we're restoring right into AWS,\n\n295\n00:14:59.337 --> 00:15:00.434\nthen it's no big deal.\n\n296\n00:15:00.434 --> 00:15:04.016\nBut if you're restoring down to\non-premises now you're talking about real\n\n297\n00:15:04.016 --> 00:15:06.507\nbandwidth and\nthere's a cost associated with that.\n\n298\n00:15:06.507 --> 00:15:09.290\nThat doesn't happen with physical\ntapes in your own location.\n\n299\n00:15:09.290 --> 00:15:11.440\nNow granted,\nyou gotta deal with the physical tapes and\n\n300\n00:15:11.440 --> 00:15:13.770\nthere's the hourly cost of\nemployees that go with that.\n\n301\n00:15:13.770 --> 00:15:17.230\nBut, in Glacier, there's just that\nbandwidth, so, when we go to retrieve\n\n302\n00:15:17.230 --> 00:15:20.130\ndata, we have to understand that\nthere is going to be a charge.\n\n303\n00:15:20.130 --> 00:15:24.060\nNow, they do have a free usage tier,\nand it's 5% of your data per month.\n\n304\n00:15:24.060 --> 00:15:31.190\nSo, I can retrieve 5% of my total backup\ndata, and they don't charge me a dime.\n\n305\n00:15:31.190 --> 00:15:35.947\nNow, if I've got historical backups,\nI might have 100 terabytes of data up\n\n306\n00:15:35.947 --> 00:15:39.997\nin there and I could pull down five\nterabytes of data for usage tier.\n\n307\n00:15:39.997 --> 00:15:40.954\nThat's pretty awesome.\n\n308\n00:15:40.954 --> 00:15:43.650\nHopefully, I never have to use it, right?\n\n309\n00:15:43.650 --> 00:15:46.350\nBut eventually, failure occurs.\n\n310\n00:15:46.350 --> 00:15:47.860\nAnd that's what the backup\nsolution is there for.\n\n311\n00:15:47.860 --> 00:15:50.730\nIf failures never occurred, we wouldn't\nhave to worry about backups, right?\n\n312\n00:15:50.730 --> 00:15:52.941\nBut when we go to retrieve that data.\n\n313\n00:15:52.941 --> 00:15:55.497\nOnce we cross that 5% marker.\n\n314\n00:15:55.497 --> 00:15:57.409\nNow you have to pay bandwidth, right?\n\n315\n00:15:57.409 --> 00:16:01.706\nAnd so we need to understand that during\ndata retrieval, there might be a cost.\n\n316\n00:16:01.706 --> 00:16:04.660\nA cost is delayed until\nyou need to retrieve data.\n\n317\n00:16:04.660 --> 00:16:05.565\nHopefully you never have to.\n\n318\n00:16:05.565 --> 00:16:08.490\nHopefully you never have a failure and\nthat cost never occurs.\n\n319\n00:16:08.490 --> 00:16:12.022\nSo, you're not paying for it ahead of time\nlike you are with an on-premises solution.\n\n320\n00:16:12.022 --> 00:16:14.584\nYou're paying for all of that ahead\nof time, so when a disaster occurs,\n\n321\n00:16:14.584 --> 00:16:17.320\nthere's no charge, but\nhere it would be down the road.\n\n322\n00:16:17.320 --> 00:16:19.330\nAlways be aware of that\nin your calculations, and\n\n323\n00:16:19.330 --> 00:16:24.040\nas you set your budget and say, if there's\na disaster and we have to retrieve data,\n\n324\n00:16:24.040 --> 00:16:27.440\nbe prepared for a slightly higher\nmonthly bill on our AWS account for\n\n325\n00:16:27.440 --> 00:16:29.380\nthat month as we go and\ngive you that data.\n\n326\n00:16:29.380 --> 00:16:32.110\nNow you can set a data\nretrieval policy and\n\n327\n00:16:32.110 --> 00:16:34.840\nthe data retrieval policy can\ndo a few different things.\n\n328\n00:16:34.840 --> 00:16:39.110\nYou can set it so\nthat it only uses the free usage tier, so\n\n329\n00:16:39.110 --> 00:16:40.470\nwhen you go to restore data,\n\n330\n00:16:40.470 --> 00:16:45.470\nif you need to restore more than the 5%,\nit'll just hold off until the next month.\n\n331\n00:16:45.470 --> 00:16:49.400\nRemember this is high latency, if you're\nnot in a hurry to get to the data you can\n\n332\n00:16:49.400 --> 00:16:52.430\nwait until next month and\nit'll be free again, or the month after.\n\n333\n00:16:52.430 --> 00:16:54.470\nSo, you can grab a little bit each time.\n\n334\n00:16:54.470 --> 00:17:00.030\nIf I wanna pull 100% of my data out, I\ncould tell it to take 20 months and do it.\n\n335\n00:17:00.030 --> 00:17:01.320\nI can pull 100% of my data out and\n\n336\n00:17:01.320 --> 00:17:04.320\nit wouldn't cost me anything\ncuz it's 5% each month, right?\n\n337\n00:17:04.320 --> 00:17:06.270\nIt takes a long time, though.\n\n338\n00:17:06.270 --> 00:17:09.224\nIf I really wanna get the data out,\nthough, when I go to retrieve data,\n\n339\n00:17:09.224 --> 00:17:11.554\nthere's actually different\ntiers that we can pay for.\n\n340\n00:17:11.554 --> 00:17:13.913\nThere's a standard tier where\nyou're paying bandwidth But,\n\n341\n00:17:13.913 --> 00:17:16.450\nthere is actually accelerated tiers\nwhere you get data faster, and\n\n342\n00:17:16.450 --> 00:17:18.424\nthere is even lower tiers\nwhere you get data slower.\n\n343\n00:17:18.424 --> 00:17:21.728\nThey charge different amounts for\nthat for that data retrieval and\n\n344\n00:17:21.728 --> 00:17:24.560\nyou can define all of that in\nyour data retrieval policy.\n\n345\n00:17:24.560 --> 00:17:27.930\nSo there is some other things that we\nneed to be aware of inside of glacier\n\n346\n00:17:27.930 --> 00:17:33.410\nis that we can manipulate those cost based\non how ultimately how patient we are.\n\n347\n00:17:33.410 --> 00:17:36.220\nSo Don, we've been talking about\nthe cost for data retrieval,\n\n348\n00:17:36.220 --> 00:17:40.070\nbut is there any cost associated\nwith actually putting information.\n\n349\n00:17:40.070 --> 00:17:41.740\nI mean, other than the storage costs.\n\n350\n00:17:41.740 --> 00:17:45.740\nBut is there an upload bandwidth cost or\nanything of that nature?\n\n351\n00:17:45.740 --> 00:17:48.250\n&gt;&gt; It's one of the neat things that\nAmazon does is they don't charge you for\n\n352\n00:17:48.250 --> 00:17:49.430\nputting data into AWS.\n\n353\n00:17:49.430 --> 00:17:52.140\nThey charge you for\ntaking data out of AWS, right?\n\n354\n00:17:52.140 --> 00:17:54.750\nThey want you to put your data in there.\n\n355\n00:17:54.750 --> 00:17:58.100\nAnd once it's there, you're more\nlikely to leave it there, right?\n\n356\n00:17:58.100 --> 00:17:59.530\nIt can take a long time.\n\n357\n00:17:59.530 --> 00:18:01.070\nI was telling Justin before this show,\n\n358\n00:18:01.070 --> 00:18:06.280\nwe had about 32 terabytes of data\nthat I needed to backup into Glacier.\n\n359\n00:18:06.280 --> 00:18:11.210\nAnd it It took like a solid month for\nme to get all of that data thrown up\n\n360\n00:18:11.210 --> 00:18:16.160\nin there I could have made it go faster\nif I did multiple streams and optimized\n\n361\n00:18:16.160 --> 00:18:19.460\nthings better but I just I wasn't in\na hurry, it wasnt a big deal for me.\n\n362\n00:18:19.460 --> 00:18:23.360\nI was replacing a backup system\nthat worked perfectly fine and\n\n363\n00:18:23.360 --> 00:18:27.380\nso we just kept using the backup\nsystem that worked perfectly fine and\n\n364\n00:18:27.380 --> 00:18:32.680\ntwo terabytes slowly upload over the\ncourse of a month And when it was done,\n\n365\n00:18:32.680 --> 00:18:35.440\nthe data was in glacier and\nI was just paying for the data at rest,\n\n366\n00:18:35.440 --> 00:18:39.340\nthe storage that we were consuming by that\ndata at rest and not having to pay for\n\n367\n00:18:39.340 --> 00:18:43.610\nthat, all the network bandwidth that I\nconsumed over the course of that month.\n\n368\n00:18:43.610 --> 00:18:44.410\nSo just be aware.\n\n369\n00:18:44.410 --> 00:18:47.720\nAnd that really is true with\nmost of Amazon's services.\n\n370\n00:18:47.720 --> 00:18:52.640\nSo like S3 itself and EC2,\nwhen you're sending data into the service\n\n371\n00:18:52.640 --> 00:18:56.760\nThey don't charge you, its when the data\ncome back out that's when they charge you.\n\n372\n00:18:56.760 --> 00:19:00.670\n&gt;&gt; So, as a follow up that you made\nmention a little bit earlier in the show\n\n373\n00:19:00.670 --> 00:19:04.900\nthat if you are storing to\nan internal Amazon servers,\n\n374\n00:19:04.900 --> 00:19:07.680\nis there charge if I'm retrieving\ndata from [INAUDIBLE] to maybe put\n\n375\n00:19:07.680 --> 00:19:11.580\nin an S3 bucket or somewhere else,\nis there a charge associated with that?\n\n376\n00:19:11.580 --> 00:19:14.810\n&gt;&gt; There is and you have to do\nyour research on this because\n\n377\n00:19:14.810 --> 00:19:18.890\nthere are different solutions if\n&gt;&gt; If you have data that's backed up in\n\n378\n00:19:18.890 --> 00:19:24.190\na particular region and you're restoring\nto a system that's in that same region,\n\n379\n00:19:24.190 --> 00:19:27.470\nthere's a lower cost than what we see\nwhen we're going between regions.\n\n380\n00:19:27.470 --> 00:19:30.590\nAnd if you have two things in\nthe same availability zone,\n\n381\n00:19:30.590 --> 00:19:31.700\noften times there isn't a cost.\n\n382\n00:19:31.700 --> 00:19:34.450\nThat you're able to more that data and\nthere's no cost associated with it But\n\n383\n00:19:34.450 --> 00:19:37.270\nin the case of Glacier\nbecause the data is offline,\n\n384\n00:19:37.270 --> 00:19:39.650\nit's never in the same availabilities.\n\n385\n00:19:39.650 --> 00:19:43.560\nWhen I created the vault,\nit didn't ask me what AZ I wanted,\n\n386\n00:19:43.560 --> 00:19:45.410\nit just asked me to pick a region.\n\n387\n00:19:45.410 --> 00:19:49.540\nYou don't get AZs when you're\nworking with Glacier, and So\n\n388\n00:19:49.540 --> 00:19:52.660\nin this case there is gonna be a cost,\nbut there's times with S3 and\n\n389\n00:19:52.660 --> 00:19:56.730\nother solutions where you can manipulate\nwhere you data's stored to reduce or\n\n390\n00:19:56.730 --> 00:19:58.900\neven eliminate that cost of the transfer.\n\n391\n00:19:58.900 --> 00:20:03.760\nAnd the other thing to keep in mind is\nthat some of the regions like US East and\n\n392\n00:20:03.760 --> 00:20:07.360\nUS West have a high speed data\nlink that runs between them and\n\n393\n00:20:07.360 --> 00:20:09.570\nyou can move data faster between them.\n\n394\n00:20:09.570 --> 00:20:12.410\nThere's still a cost,\ncost is normal but data moves faster.\n\n395\n00:20:12.410 --> 00:20:15.840\nSo Don, it seems like S3 and\nGlacier have a little bit of overlap.\n\n396\n00:20:15.840 --> 00:20:19.240\nWhen we're designing a system,\ndo we use Glacier, S3,\n\n397\n00:20:19.240 --> 00:20:22.850\na little bit of both or\nhow do we plan for that?\n\n398\n00:20:22.850 --> 00:20:24.130\n&gt;&gt; Well every solution is different.\n\n399\n00:20:24.130 --> 00:20:26.770\nYou need to understand\nthe requirements of your customer or\n\n400\n00:20:26.770 --> 00:20:28.360\nyour company to design the right thing,\n\n401\n00:20:28.360 --> 00:20:31.780\nbut The most common solution is\nthat we use them together, right?\n\n402\n00:20:31.780 --> 00:20:35.270\nThat it's part of a lifecycle, and I\ntalked about this a bit in the S3 content\n\n403\n00:20:35.270 --> 00:20:41.510\nwhere we have our current urgent data\ngoes right into S3 standard storage.\n\n404\n00:20:41.510 --> 00:20:45.250\nAnd then after a certain period of time\nwe shift it down to infrequent access.\n\n405\n00:20:45.250 --> 00:20:48.490\nAnd then after a longer period of time\nwe shift it down to reduced redundancy.\n\n406\n00:20:48.490 --> 00:20:51.540\nAnd at that point,\nwhen you're in reduced redundancy,\n\n407\n00:20:51.540 --> 00:20:53.150\nyou can potentially lose data, right?\n\n408\n00:20:53.150 --> 00:20:56.540\nAnd that's the stage where you start\nsending stuff into Glacier also.\n\n409\n00:20:56.540 --> 00:21:00.850\nAnd then after a while, now we don't\neven need it in reduced redundancy.\n\n410\n00:21:00.850 --> 00:21:03.910\nWe can take it offline completely and\njust have it in Glacier.\n\n411\n00:21:03.910 --> 00:21:08.570\nGlacier becomes that fourth storage\nclass inside of our life cycle.\n\n412\n00:21:08.570 --> 00:21:09.240\nBut.\n\n413\n00:21:09.240 --> 00:21:11.690\nBy the time you get to reduced redundancy,\n\n414\n00:21:11.690 --> 00:21:14.730\nanything that's in reduced redundancy\nyou should have in Glacier as well.\n\n415\n00:21:14.730 --> 00:21:18.030\nBecause with reduced redundancy\nyou can lose the data.\n\n416\n00:21:18.030 --> 00:21:22.080\nIf there's a failure on Amazon Zen\nthey don't have a backup for that.\n\n417\n00:21:22.080 --> 00:21:25.230\nSo they expect you to have\na backup somewhere, on premises,\n\n418\n00:21:25.230 --> 00:21:26.320\nin Glacier, whatever.\n\n419\n00:21:26.320 --> 00:21:29.770\nSo typically we do S3 standard.\n\n420\n00:21:29.770 --> 00:21:33.070\nAnd then we shift down to\nS3 in frequent access.\n\n421\n00:21:33.070 --> 00:21:37.370\nAnd then we shift down to both\nreduced redundancy and glacier.\n\n422\n00:21:37.370 --> 00:21:40.250\nBefore finally,\nin the last stage of life cycle, shifting.\n\n423\n00:21:40.250 --> 00:21:41.710\nI shouldn't say last,\nbut the next to last.\n\n424\n00:21:41.710 --> 00:21:44.450\nStage of the life cycle where\nyou shift down to just glacier.\n\n425\n00:21:44.450 --> 00:21:47.370\nBecause there is one last stage\nwhere we just delete the stuff and\n\n426\n00:21:47.370 --> 00:21:48.180\nit's gone, right?\n\n427\n00:21:48.180 --> 00:21:50.810\nThere does come a time where.\n\n428\n00:21:50.810 --> 00:21:53.080\nAnd we don't need that data any more,\nand it goes away, and\n\n429\n00:21:53.080 --> 00:21:54.420\nit's not in anything, right?\n\n430\n00:21:54.420 --> 00:21:58.850\nYou need to talk to the legal department\nof your organization or your customer and\n\n431\n00:21:58.850 --> 00:22:01.360\nfind out what their needs are,\nthere's regulatory reasons.\n\n432\n00:22:01.360 --> 00:22:05.080\nBut you don't want to save\ndata longer than you have to.\n\n433\n00:22:05.080 --> 00:22:10.070\nTools like Glacier make it really\npossible for you to save data forever.\n\n434\n00:22:10.070 --> 00:22:12.410\nRight, I could say, boy,\nthere's no limit here.\n\n435\n00:22:12.410 --> 00:22:14.890\nI'm gonna save backups forever,\nthis is awesome.\n\n436\n00:22:14.890 --> 00:22:20.160\nWell, after the time goes by where\nyou're required to retain data,\n\n437\n00:22:20.160 --> 00:22:22.380\nthat data becomes a liability, right?\n\n438\n00:22:22.380 --> 00:22:25.730\nThere could be mistakes\nthat were made in the past.\n\n439\n00:22:25.730 --> 00:22:29.150\nThat are well beyond\nthe window of data retention.\n\n440\n00:22:29.150 --> 00:22:31.110\nBut the evidence of those\nmistakes are still stored there.\n\n441\n00:22:31.110 --> 00:22:36.110\nAnd when you undergo an audit or any kind\nof legal review or anything like that,\n\n442\n00:22:36.110 --> 00:22:40.700\nthat data that you didn't technically\nhave to have is still there.\n\n443\n00:22:40.700 --> 00:22:44.170\nAnd where this is really coming true,\nwhere we're seeing this a lot is not\n\n444\n00:22:44.170 --> 00:22:48.980\nhiding a mistake or doing something\nillegal But if you work for\n\n445\n00:22:48.980 --> 00:22:53.870\na hospital, or somewhere where you\nhave financial or medical records, and\n\n446\n00:22:53.870 --> 00:22:56.810\nyou're retaining data\nlonger than you should.\n\n447\n00:22:56.810 --> 00:23:01.490\nAnd a hacker gets into your system, they\nnow just got access to medical records for\n\n448\n00:23:01.490 --> 00:23:03.680\ncustomers that you shouldn't\nhave even been retaining.\n\n449\n00:23:03.680 --> 00:23:05.760\nYour exposure is far, far worse.\n\n450\n00:23:05.760 --> 00:23:10.710\nMaybe you were responsible for retaining\nrecords for 1.2 million people, But you\n\n451\n00:23:10.710 --> 00:23:15.250\nhad records for 7.3 million people cuz you\nwere saving it from the beginning of time.\n\n452\n00:23:15.250 --> 00:23:16.710\nSo now when your data gets compromised,\n\n453\n00:23:16.710 --> 00:23:18.130\nyou have access to way more\ndata than they should have.\n\n454\n00:23:18.130 --> 00:23:19.330\nThat's why they should have.\n\n455\n00:23:19.330 --> 00:23:21.850\nThat's why it's so\nimportant that we do data disposal.\n\n456\n00:23:21.850 --> 00:23:24.590\nAnd when you reach the end of the lifetime\nof that data, when you're no longer\n\n457\n00:23:24.590 --> 00:23:28.810\nrequired to retain it Even though\nit would be easy and cheap and\n\n458\n00:23:28.810 --> 00:23:32.330\nno maintenance to keep, you should\nstill destroy it, get rid of that data.\n\n459\n00:23:32.330 --> 00:23:35.880\nThat's why data lifecycle policies are so\nimportant.\n\n460\n00:23:35.880 --> 00:23:40.260\n&gt;&gt; Well Don, we've definitely taken\na fairly nice overview of Glacier.\n\n461\n00:23:40.260 --> 00:23:44.300\nAre there any final things we\nneed to consider for Glacier and\n\n462\n00:23:44.300 --> 00:23:46.850\nhow that works into our design?\n\n463\n00:23:46.850 --> 00:23:49.880\nThe main thing I would throw right here\nright at the end is just understand that\n\n464\n00:23:49.880 --> 00:23:54.310\nthe web UI for\nglacier is it's nice it exists, but\n\n465\n00:23:54.310 --> 00:23:55.350\nyou're really not gonna use it.\n\n466\n00:23:55.350 --> 00:23:57.820\nInteracting with glacier\nbecause of the time delays and\n\n467\n00:23:57.820 --> 00:24:01.080\nthings, you really need to be interacting\nwith it through the sdk, or through your\n\n468\n00:24:01.080 --> 00:24:04.710\nthird party applications, that reach\nour to the API and deal with it.\n\n469\n00:24:04.710 --> 00:24:08.020\nThey're gonna be able to handle that\nbetter, it's very well documented you'll\n\n470\n00:24:08.020 --> 00:24:11.270\nneed to understand that there is\nthat big three to five hour delay,\n\n471\n00:24:11.270 --> 00:24:15.330\nThat makes the website just not a great\nway to interact with it as a human being.\n\n472\n00:24:15.330 --> 00:24:19.680\nAnd the archives themselves are not\nexactly designed in a way for\n\n473\n00:24:19.680 --> 00:24:21.120\nus to work with as human beings.\n\n474\n00:24:21.120 --> 00:24:23.510\nSo you're normally going to\ninteract with this with software,\n\n475\n00:24:23.510 --> 00:24:26.750\nand there's a number of backup solutions\nout there that already natively support\n\n476\n00:24:26.750 --> 00:24:28.750\nGlacier so\nyou can leverage that right away.\n\n477\n00:24:28.750 --> 00:24:32.030\nbut it's easy enough for us to get our\nown software to interact with it too.\n\n478\n00:24:32.030 --> 00:24:36.120\n&gt;&gt; Well thanks Don, for letting us\nknow a little more about Glacier,\n\n479\n00:24:36.120 --> 00:24:38.270\nI do hope that you join us back for\nmore AWS.\n\n480\n00:24:38.270 --> 00:24:40.750\nUnfortunately, it is that time\nsigning off for IT Pro TV.\n\n481\n00:24:40.750 --> 00:24:42.630\nI'm your hosts Justin Dennison.\n\n482\n00:24:42.630 --> 00:24:44.330\n&gt;&gt; and I'm Don\n&gt;&gt; See you next time.\n\n483\n00:24:51.410 --> 00:24:54.522\nThank you for watching ITProTV.\n\n",
          "vimeoId": "207292536"
        }
      ],
      "title": "Amazon S3 and Glacier Storage"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Don start by exploring what EC2 is and what value this provides from AWS. They differentiate among the different type of instances that are available  from Amazon with additional consideration to the operating systems that can be configure with the EC2 instance.",
          "length": "1831",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-1-amazon_ec2_basics-030217.00_30_19_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-1-amazon_ec2_basics-030217.00_30_19_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-1-amazon_ec2_basics-030217.00_30_19_21.Still001-sm.jpg",
          "title": "Amazon EC2 Basics",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:05.869\nWelcome to ITProTV I'm your host,\nDon Pezet [CROSSTALK]\n\n2\n00:00:05.869 --> 00:00:08.282\n[MUSIC]\n\n3\n00:00:08.282 --> 00:00:12.039\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.039 --> 00:00:16.060\n&gt;&gt; Greetings, everyone, and welcome to\nanother exciting episode of ITProTV.\n\n5\n00:00:16.060 --> 00:00:18.740\nI'm your host, Justin Dennison,\nand in today's episode,\n\n6\n00:00:18.740 --> 00:00:23.950\nwe're actually gonna start looking at that\nECE2 thing that's provided by Amazon.\n\n7\n00:00:23.950 --> 00:00:26.298\nAnd here to help us is Mr. Don Pezet.\n\n8\n00:00:26.298 --> 00:00:27.770\nHow are you doing today, Don?\n\n9\n00:00:27.770 --> 00:00:28.630\n&gt;&gt; I'm doing great, Justin.\n\n10\n00:00:28.630 --> 00:00:32.902\nGlad to be back on the show and ready to\ntalk about EC2 which is probably the most\n\n11\n00:00:32.902 --> 00:00:35.961\nhigh-visibility product that\nmakes up the AWS suite.\n\n12\n00:00:35.961 --> 00:00:38.950\nAmazon Web Service is made up\nof a ton of different products.\n\n13\n00:00:38.950 --> 00:00:42.690\nBut when a lot of people describe it, what\nthey are really describing is the ec2,\n\n14\n00:00:42.690 --> 00:00:45.340\nthe elastic compute cloud.\n\n15\n00:00:45.340 --> 00:00:48.170\nAnd that is because ec2 let's\nus take servers, what would be\n\n16\n00:00:48.170 --> 00:00:52.660\nnormally physical servers on premises,\nand turn them into virtual instances,\n\n17\n00:00:52.660 --> 00:00:56.230\nor virtual machines, that are running up\ninside of Amazon's cloud infrastructure.\n\n18\n00:00:56.230 --> 00:00:59.180\nAnd that infrastructure is really\nwhat we want to take advantage of.\n\n19\n00:00:59.180 --> 00:01:03.450\nNow with a lot of Amazon\nservices they control and\n\n20\n00:01:03.450 --> 00:01:07.680\nmaintain a bulk of the behind\nthe scenes stuff so we don't have to.\n\n21\n00:01:07.680 --> 00:01:10.060\nBut with EC2 we get a little more control.\n\n22\n00:01:10.060 --> 00:01:13.320\nWe actually get to deploy these machines,\nthese instances.\n\n23\n00:01:13.320 --> 00:01:15.600\nAnd then we can login to\nthe operating system and\n\n24\n00:01:15.600 --> 00:01:17.370\nwe can do whatever the heck\nwe want with them.\n\n25\n00:01:17.370 --> 00:01:21.270\nSo, you retain the same amount of control\nyou have with on premises systems,\n\n26\n00:01:21.270 --> 00:01:24.190\nyou just don't have to worry about\nhardware anymore, you don't have to worry\n\n27\n00:01:24.190 --> 00:01:27.990\nabout network infrastructure anymore,\nthat's all taken care of by Amazon.\n\n28\n00:01:27.990 --> 00:01:30.630\nThe infrastructure is taken care of but\n\n29\n00:01:30.630 --> 00:01:34.070\nthe platform, well,\nthat's what we're now a part of, right?\n\n30\n00:01:34.070 --> 00:01:35.650\nWe get to deal with the operating system.\n\n31\n00:01:35.650 --> 00:01:40.510\nAnd if I decide I want to do an update or\ncrank up security or weaken security,\n\n32\n00:01:40.510 --> 00:01:41.150\nthat's up to me.\n\n33\n00:01:41.150 --> 00:01:42.859\nI can do it.\nI've got that flexibility.\n\n34\n00:01:42.859 --> 00:01:47.323\nSo with EC2 it's typically the first\nproduct that a lot of people will look to\n\n35\n00:01:47.323 --> 00:01:50.770\ndeploy when they're moving\ntheir systems into the cloud.\n\n36\n00:01:50.770 --> 00:01:54.790\nI know I said that S3 was the first\nproduct that most people will use.\n\n37\n00:01:54.790 --> 00:01:57.610\nBut when it comes to moving\ntheir systems up into the cloud,\n\n38\n00:01:57.610 --> 00:02:01.760\nthey usually start with EC2 before finding\nother products that can take over.\n\n39\n00:02:01.760 --> 00:02:05.610\nSo for example, I might have\na database server sitting right here.\n\n40\n00:02:05.610 --> 00:02:10.520\nSo I can spin up an instance inside of\nEC2, and I can install all my database\n\n41\n00:02:10.520 --> 00:02:14.110\nsoftware on there, and manage it\nthe same way as my on premises system.\n\n42\n00:02:14.110 --> 00:02:18.853\nAnd over time, I might start looking at\nthe relational database service in AWS,\n\n43\n00:02:18.853 --> 00:02:20.593\nand saying hm, if I go to RDS,\n\n44\n00:02:20.593 --> 00:02:24.384\nI don't even have to worry about\nthe operating system any more.\n\n45\n00:02:24.384 --> 00:02:26.179\nI don't even have to worry about\nthe database operating anymore.\n\n46\n00:02:26.179 --> 00:02:28.524\nI just have to worry about\nthe database itself.\n\n47\n00:02:28.524 --> 00:02:29.656\nAWS can manage the rest of it.\n\n48\n00:02:29.656 --> 00:02:30.359\nThat's great.\n\n49\n00:02:30.359 --> 00:02:31.320\nLet me move over to that.\n\n50\n00:02:31.320 --> 00:02:33.430\nBut most people aren't ready\nto make that jump, right?\n\n51\n00:02:33.430 --> 00:02:36.432\nTo say I'm gonna go from\ncomplete control of a system\n\n52\n00:02:36.432 --> 00:02:38.624\nto only seeing the database, right?\n\n53\n00:02:38.624 --> 00:02:40.352\nThat's a big jump.\n\n54\n00:02:40.352 --> 00:02:46.630\nSo, EC3 is that step where you get in, you\ncreate your instances however you want.\n\n55\n00:02:46.630 --> 00:02:48.604\nAnd you maintain that same\ncontrol as on-premises.\n\n56\n00:02:49.700 --> 00:02:51.910\nAll right, now,\nlet's say we're ready to make that jump.\n\n57\n00:02:51.910 --> 00:02:56.010\nSo, I'm sitting here looking at a data\ncenter, I'm not actually to data center,\n\n58\n00:02:56.010 --> 00:02:57.170\nbut if I were and\n\n59\n00:02:57.170 --> 00:03:00.780\nit got a bunch of physical service,\nand I wanna move up in to EC2.\n\n60\n00:03:00.780 --> 00:03:04.256\nWell, in EC2, we don't have what\nare called virtual machines,\n\n61\n00:03:04.256 --> 00:03:07.423\nyou have instances and\nthe reason they call them instances,\n\n62\n00:03:07.423 --> 00:03:12.185\nis because you might deploy more then one\ninstance of the same virtual machine.\n\n63\n00:03:12.185 --> 00:03:16.704\nI might have a web server farm where\nI have a standard web server template\n\n64\n00:03:16.704 --> 00:03:20.938\nthat I then clone out 50 times\nto create 50 instances, right?\n\n65\n00:03:20.938 --> 00:03:24.329\nSo that's why they have that terminology,\nthat little difference,\n\n66\n00:03:24.329 --> 00:03:27.431\ncuz we always call them virtual\nmachines in VM ware and hyper v and\n\n67\n00:03:27.431 --> 00:03:29.620\nstuff but in AWS different terminology.\n\n68\n00:03:29.620 --> 00:03:32.250\nWe'll see later on in this series there's\nsome ways we can use that to some\n\n69\n00:03:32.250 --> 00:03:33.620\nreally big advantages.\n\n70\n00:03:33.620 --> 00:03:35.390\nWell, when you start\nto deploy an instance,\n\n71\n00:03:35.390 --> 00:03:37.450\nif you're trying to match\nup with physical systems,\n\n72\n00:03:37.450 --> 00:03:41.440\nit can be a little challenging sometimes\nto pick the right configuration.\n\n73\n00:03:41.440 --> 00:03:42.730\nAnd let me show you what I mean by that.\n\n74\n00:03:42.730 --> 00:03:46.920\nWhen we pick an instance, we have to pick\nbetween a couple of different resources.\n\n75\n00:03:46.920 --> 00:03:51.230\nAnd memory and\nCPU are kinda the two big ones, right?\n\n76\n00:03:51.230 --> 00:03:55.010\nYou have your virtual CPU,\nyour Central Processing Unit.\n\n77\n00:03:55.010 --> 00:03:57.350\nAnd you've got your RAM or your memory.\n\n78\n00:03:57.350 --> 00:03:59.210\nWell there's other things too,\nlike storage and\n\n79\n00:03:59.210 --> 00:04:00.360\nnetworking that we're concerned about.\n\n80\n00:04:00.360 --> 00:04:01.470\nBut usually CPU and\n\n81\n00:04:01.470 --> 00:04:04.490\nmemory are the main ones cuz they're\nthe harder ones to change, right?\n\n82\n00:04:04.490 --> 00:04:07.390\nWe can change any of them though,\nyou can always add more CPUs or\n\n83\n00:04:07.390 --> 00:04:10.130\nadd more memory to an instance\nonce it's created.\n\n84\n00:04:10.130 --> 00:04:14.145\nBut for starters we're going to\nhave to pick an instance size.\n\n85\n00:04:14.145 --> 00:04:19.222\nAnd as we go browsing through\nAWS you'll see where there's\n\n86\n00:04:19.222 --> 00:04:24.309\nthings like m4 large,\nm4 extra large, m4 2xl or 4xl.\n\n87\n00:04:24.309 --> 00:04:26.909\nAnd much like a t-shirt,\nthey're getting bigger and bigger and\n\n88\n00:04:26.909 --> 00:04:28.050\nbigger with each size.\n\n89\n00:04:28.050 --> 00:04:31.290\nWe're adding more memory, and\nwe're adding more CPU power.\n\n90\n00:04:31.290 --> 00:04:36.723\nSo way down here with an M4 large, you'll\nhave two CPUs, and eight gigs of memory.\n\n91\n00:04:36.723 --> 00:04:41.596\nAnd then you'll start getting up to an M4\nlarge, where you have more CPUs, and\n\n92\n00:04:41.596 --> 00:04:45.900\nyou have more memory, and\nyou get all the way up to a 4X, right?\n\n93\n00:04:45.900 --> 00:04:49.290\nWhere you've got 16 virtual CPUs.\n\n94\n00:04:49.290 --> 00:04:56.190\nAnd something like 62 gigs a memory\nI believe something like that.\n\n95\n00:04:56.190 --> 00:04:58.450\nSo, you've got a huge chunk\nof memory available for\n\n96\n00:04:58.450 --> 00:05:00.380\nwhatever operation is you're planning.\n\n97\n00:05:00.380 --> 00:05:03.800\nNow, remember it's not always that we\njust need to pick the biggest one.\n\n98\n00:05:03.800 --> 00:05:08.730\nWe might say instead of having one\nm4 extra large I might choose to\n\n99\n00:05:08.730 --> 00:05:13.460\nhave four M4 larges, or\nextra large, or whatever.\n\n100\n00:05:13.460 --> 00:05:17.920\nYou kinda pick based on how you\nwant to distribute the workload, or\n\n101\n00:05:17.920 --> 00:05:21.910\nif it needs to stay on a single system,\nwhether you're scaling up or scaling out.\n\n102\n00:05:21.910 --> 00:05:24.700\nAnd as far as scaling up, there's\na limit to what we can scale up, right?\n\n103\n00:05:24.700 --> 00:05:28.842\nThe instances only come so\nlarge before you're forced to scale out.\n\n104\n00:05:28.842 --> 00:05:32.160\nAnd scaling out is really where\nour solution is gonna be right.\n\n105\n00:05:32.160 --> 00:05:36.066\nNow when it comes to looking at these\nnames, large, extra large, two XL,\n\n106\n00:05:36.066 --> 00:05:39.166\nfour XL, micro,\nsome of the other names that you'll see,\n\n107\n00:05:39.166 --> 00:05:41.598\nthat's pretty obvious\nwhat they mean right?\n\n108\n00:05:41.598 --> 00:05:43.266\nThey're getting bigger each time.\n\n109\n00:05:43.266 --> 00:05:46.890\nBut M4, what's that all about?\n\n110\n00:05:46.890 --> 00:05:50.562\nWell, there's a couple of different\nclasses that you're gonna see when you\n\n111\n00:05:50.562 --> 00:05:51.304\nstart to shop.\n\n112\n00:05:51.304 --> 00:05:52.670\nI like to call it shopping.\n\n113\n00:05:52.670 --> 00:05:56.240\nSo if I go into my AWS console here,\n\n114\n00:05:56.240 --> 00:06:00.270\nI'm gonna jump into EC2, and\nI'm gonna spin up an instance.\n\n115\n00:06:00.270 --> 00:06:04.930\nAnd when I go to launch an instance,\nit's gonna ask me to pick.\n\n116\n00:06:04.930 --> 00:06:07.260\nWell, first off,\nI have to pick an AMI, right?\n\n117\n00:06:07.260 --> 00:06:09.820\nAMI is an Amazon Machine Image.\n\n118\n00:06:09.820 --> 00:06:12.680\nSo I'm about to create\nan instance from a template, and\n\n119\n00:06:12.680 --> 00:06:14.640\nthat template is a machine image.\n\n120\n00:06:14.640 --> 00:06:18.970\nAmazon has their own which is what they're\nshowing me here, the quick start ones.\n\n121\n00:06:18.970 --> 00:06:20.320\nSo we can view those.\n\n122\n00:06:20.320 --> 00:06:22.960\nBut they also have where\nyou can load your own.\n\n123\n00:06:22.960 --> 00:06:25.700\nSo I have my AMIs,\nthose are ones that I've made.\n\n124\n00:06:25.700 --> 00:06:27.210\nThen we've got the Marketplace.\n\n125\n00:06:27.210 --> 00:06:30.370\nWhere third parties can load some in and\nsell them, right.\n\n126\n00:06:30.370 --> 00:06:31.760\nThey do that through Amazon.\n\n127\n00:06:31.760 --> 00:06:36.980\nSo for example if I want a Cisco firewall,\nthere's actually an AMI for\n\n128\n00:06:36.980 --> 00:06:40.680\na Cisco ASA, I can deploy a Cisco firewall\nas a virtual machine right inside of\n\n129\n00:06:40.680 --> 00:06:42.180\nAmazon as an instance.\n\n130\n00:06:42.180 --> 00:06:45.710\nSo pretty cool to have that,\na lot of those cost money.\n\n131\n00:06:45.710 --> 00:06:48.340\nWe've got community ones\nmost of which are free.\n\n132\n00:06:48.340 --> 00:06:51.600\nWhere somebody out there\nbuilt an image and\n\n133\n00:06:51.600 --> 00:06:53.150\nmaybe they did a great job,\nmaybe they didn't.\n\n134\n00:06:53.150 --> 00:06:56.601\nYou don't know you need to make sure you\ntrust the people who's images you use but\n\n135\n00:06:56.601 --> 00:06:58.338\nyou can bring those out too, all right?\n\n136\n00:06:58.338 --> 00:07:03.080\nNow, we pick an AMI on this screen there's\nonly so much we need to worry about.\n\n137\n00:07:03.080 --> 00:07:08.540\nI'm gonna talk about the volume\ntypes a little later in this series\n\n138\n00:07:08.540 --> 00:07:11.050\nbecause your storage is kind of important.\n\n139\n00:07:11.050 --> 00:07:13.890\nBut after that, we're basically\npicking an operating system.\n\n140\n00:07:13.890 --> 00:07:16.980\nAnd you'll see where Amazon\nhas their own flavor of Linux.\n\n141\n00:07:16.980 --> 00:07:18.860\nSo Amazon Linux AMI.\n\n142\n00:07:18.860 --> 00:07:24.085\nAmazon's Linux is actually built around\nCentas, which is built around Red Hat.\n\n143\n00:07:24.085 --> 00:07:26.146\nSo if you're from that\nRed Hat environment,\n\n144\n00:07:26.146 --> 00:07:29.845\nthen you'll snap right into Amazon's\nLinux, it's just one that they manage.\n\n145\n00:07:29.845 --> 00:07:32.149\nVery streamlined, very efficient,\n\n146\n00:07:32.149 --> 00:07:36.285\nI use it in the majority of\nthe instances that I roll out.\n\n147\n00:07:36.285 --> 00:07:39.415\nBut if you want the official Red Hat,\nyou can do that.\n\n148\n00:07:39.415 --> 00:07:42.415\nNow some of these have an extra\ncost associated with them,\n\n149\n00:07:42.415 --> 00:07:44.390\nbased on the operating\nsystem that you pick.\n\n150\n00:07:44.390 --> 00:07:47.820\nRed Hat Enterprise Linux is not free,\nyou gotta buy it.\n\n151\n00:07:47.820 --> 00:07:52.390\nOr, if you do a Windows deployment,\nif I scroll down, here's Windows.\n\n152\n00:07:52.390 --> 00:07:54.118\nWindows is not free, right?\n\n153\n00:07:54.118 --> 00:07:57.998\nSo, when we deploy Windows,\nthis is Windows 2016 Datacenter Edition,\n\n154\n00:07:57.998 --> 00:08:01.595\nwe may see an extra licensing cost\nassociated with that when we pick it.\n\n155\n00:08:01.595 --> 00:08:04.780\nSo, it is important to understand the\npricing difference on a lot of this stuff.\n\n156\n00:08:04.780 --> 00:08:09.180\nThat if we pull up the EC2 pricing,\nwe can jump in and\n\n157\n00:08:09.180 --> 00:08:12.710\nget a quick glance at how that works.\n\n158\n00:08:12.710 --> 00:08:17.510\nIf we look at like On Demand instances,\nI'll talk about On Demand in a little bit.\n\n159\n00:08:17.510 --> 00:08:19.959\nBut when I come in here and\npick my pricing,\n\n160\n00:08:19.959 --> 00:08:23.512\nI'm gonna see one pricing sheet for\nwhen I'm running Linux.\n\n161\n00:08:23.512 --> 00:08:26.621\nA different pricing sheet when I'm\nrunning Red Hat enterprise Linux.\n\n162\n00:08:26.621 --> 00:08:29.804\nAnd yet another pricing sheet\nwhen I'm running Windows.\n\n163\n00:08:29.804 --> 00:08:31.900\nAnd each one varies a little bit.\n\n164\n00:08:31.900 --> 00:08:36.897\nSo like a nano instance well,\nwe'll do a T2 medium.\n\n165\n00:08:36.897 --> 00:08:42.418\nHere I can see a T2 medium\nif I'm running regular\n\n166\n00:08:42.418 --> 00:08:47.274\nLinux has a cost of $0.047 per hour.\n\n167\n00:08:47.274 --> 00:08:50.923\nBut if I switch over to\nRed Hat Enterprise Linux,\n\n168\n00:08:50.923 --> 00:08:54.840\nthat T2 medium is 0.107,\nso it's ten cents.\n\n169\n00:08:54.840 --> 00:08:58.710\nIt went from four and a half cents\nper hour to ten cents per hour.\n\n170\n00:08:58.710 --> 00:09:00.171\nIt doubled in cost.\n\n171\n00:09:00.171 --> 00:09:06.231\nAnd if I take Windows, Windows for\na T2 medium, is 0.065.\n\n172\n00:09:06.231 --> 00:09:07.356\nIt's actually cheaper.\n\n173\n00:09:07.356 --> 00:09:08.903\nI didn't expect to see that.\n\n174\n00:09:08.903 --> 00:09:11.499\nWindows is cheaper than Red Hat\non this one, so that's odd.\n\n175\n00:09:11.499 --> 00:09:13.882\nBut anyhow,\nsomething we need to be aware of, right?\n\n176\n00:09:13.882 --> 00:09:16.950\nWhen you pick your operating system,\nthat is going to impact your cost.\n\n177\n00:09:16.950 --> 00:09:20.430\nBut see how I've got all these\nchoices over here for sizes.\n\n178\n00:09:20.430 --> 00:09:23.714\nI can go with a t2.nano,\nthey're really small.\n\n179\n00:09:23.714 --> 00:09:29.125\nOr we can go up to medium, large,\nextra large, 10x large, 16x large.\n\n180\n00:09:29.125 --> 00:09:30.680\nI didn't even have that on my chart.\n\n181\n00:09:30.680 --> 00:09:36.690\nWell, each of them is giving you more CPU,\nmore memory.\n\n182\n00:09:36.690 --> 00:09:37.724\nAnd more instance storage but\n\n183\n00:09:37.724 --> 00:09:40.503\nwe don't worry about storage because we\ncan always manipulate that on our own.\n\n184\n00:09:40.503 --> 00:09:44.413\nBut looking at the memory, you just see\nwhere it goes up, and up and up, right?\n\n185\n00:09:44.413 --> 00:09:47.851\nWell, sort of, it went to 32 here and\nthen dropped back down to 8.\n\n186\n00:09:47.851 --> 00:09:48.681\nWhat happened?\n\n187\n00:09:48.681 --> 00:09:52.877\nWe shifted from the T2s to the M4s, right?\n\n188\n00:09:52.877 --> 00:09:55.354\nWe went from T to M.\n\n189\n00:09:55.354 --> 00:09:56.877\nThat number on the M, M4,\n\n190\n00:09:56.877 --> 00:10:00.531\nthat means this is the fourth\ngeneration of the M series, right?\n\n191\n00:10:00.531 --> 00:10:06.227\nSo, back in the day, we used to do Ms,\nwhich were unofficially M1s.\n\n192\n00:10:06.227 --> 00:10:08.848\nAnd then you had M2s and\nM3s, now we have M4s.\n\n193\n00:10:08.848 --> 00:10:11.610\nWell, the Ts haven't been around as long,\nso they're only up to T2.\n\n194\n00:10:11.610 --> 00:10:18.540\nBut you'll see other ones like Cs,\nC4, or Xs, Rs and so on, right?\n\n195\n00:10:18.540 --> 00:10:22.810\nEach of these letters denotes what\nthe virtual machine is optimized for,\n\n196\n00:10:22.810 --> 00:10:23.380\nall right?\n\n197\n00:10:23.380 --> 00:10:25.560\nEach of these are optimized for\ndifferent things.\n\n198\n00:10:25.560 --> 00:10:32.190\nThe T for example is optimized for\nbeing cheap [LAUGH] and dynamic.\n\n199\n00:10:32.190 --> 00:10:36.190\nSo if you really wanna do things on a\nshoestring budget or you're just testing,\n\n200\n00:10:36.190 --> 00:10:40.400\nyou're doing research and development,\nyou're experimenting, the Ts work great.\n\n201\n00:10:40.400 --> 00:10:43.390\nSo in my own labs, when I'm building these\nout, I'm the only one who's in them,\n\n202\n00:10:43.390 --> 00:10:45.610\nI always use the Ts because they're cheap.\n\n203\n00:10:45.610 --> 00:10:46.360\nAll lot of them are free.\n\n204\n00:10:46.360 --> 00:10:47.969\nThere's that free usage tier.\n\n205\n00:10:47.969 --> 00:10:49.923\nYou usually don't even have to pay for\nthem.\n\n206\n00:10:49.923 --> 00:10:53.645\nBut the M series is the most common,\nright?\n\n207\n00:10:53.645 --> 00:10:57.515\nThe M series,\nthese are the ones that are designed for\n\n208\n00:10:57.515 --> 00:11:02.337\nbalance performance across CPU,\nmemory, network and storage.\n\n209\n00:11:02.337 --> 00:11:06.476\nSo they've got an even kind of a well\nbalanced general purpose machine.\n\n210\n00:11:06.476 --> 00:11:09.285\nAnd that's how Amazon refers to it,\nthese are general purpose ones.\n\n211\n00:11:09.285 --> 00:11:12.862\nSo if you're not sure which one to pick,\nstart with an M and\n\n212\n00:11:12.862 --> 00:11:16.150\nyou can always change it\nlater on based on your needs.\n\n213\n00:11:16.150 --> 00:11:19.513\nRemember when you create an instance,\nyou're not married to that instance type.\n\n214\n00:11:19.513 --> 00:11:22.935\nYou can always switch out to a different\ninstance type later on as part of\n\n215\n00:11:22.935 --> 00:11:24.713\nthe dynamic upgrades that we can do.\n\n216\n00:11:24.713 --> 00:11:27.944\nYou can add to a system,\ntake away from a system and so on.\n\n217\n00:11:27.944 --> 00:11:30.430\nSo we have that flexibility, right?\n\n218\n00:11:30.430 --> 00:11:34.200\nSome of the other really common ones\nthat are out there are things like the C\n\n219\n00:11:34.200 --> 00:11:37.240\nseries, which are compute-optimized.\n\n220\n00:11:37.240 --> 00:11:41.180\nThat means these are focused on\nhaving more CPU power, right?\n\n221\n00:11:41.180 --> 00:11:43.830\nIf I take a look at an M4 Extra Large,\n\n222\n00:11:43.830 --> 00:11:47.550\nM4 Extra Large has four CPUs and\n16 GB of memory.\n\n223\n00:11:47.550 --> 00:11:52.490\nBut if I look at a C4 Extra Large,\nit's got four CPUs and\n\n224\n00:11:52.490 --> 00:11:54.260\nseven and a half gigs of memory.\n\n225\n00:11:54.260 --> 00:11:55.530\nIt's got less memory.\n\n226\n00:11:55.530 --> 00:12:01.600\nNow, the C4 extra large and\nthe M4 extra large both had four CPUs.\n\n227\n00:12:01.600 --> 00:12:07.660\nSo how is the C4 compute optimizer\ngot the same CPU's as the M4, right?\n\n228\n00:12:07.660 --> 00:12:14.310\nWell, when you look at a CPU, notice\nhow we have VCPUs and ECUs, all right?\n\n229\n00:12:14.310 --> 00:12:16.650\nYou've got elastic compute units.\n\n230\n00:12:16.650 --> 00:12:20.400\nThese are units that dedicate, well,\nwhen you have a CPU in a virtualize\n\n231\n00:12:20.400 --> 00:12:23.330\nenvironment, you're sharing that\nCPU with other virtual machines.\n\n232\n00:12:23.330 --> 00:12:27.130\nYou don't have exclusive\naccess to the physical CPU.\n\n233\n00:12:27.130 --> 00:12:29.270\nSo you have virtual CPUs.\n\n234\n00:12:29.270 --> 00:12:33.650\nThat means that this m4 extra\nlarge has four virtual CPUs.\n\n235\n00:12:33.650 --> 00:12:37.700\nIn theory, it could be doing\nfour different things at once.\n\n236\n00:12:37.700 --> 00:12:40.974\nUnless the physical CPU\nunderneath it is busy.\n\n237\n00:12:40.974 --> 00:12:44.730\nIf it's busy, I might only be able\nto use three right now, or two.\n\n238\n00:12:44.730 --> 00:12:46.500\nYour operating system\nalways sees it as four.\n\n239\n00:12:46.500 --> 00:12:48.580\nBut it gets the performance\nlevel of three or two.\n\n240\n00:12:48.580 --> 00:12:50.690\nIt runs slower, right?\n\n241\n00:12:50.690 --> 00:12:56.293\nWhen you get down to a C4 extra large,\nsee how it's got 16 ECUs,\n\n242\n00:12:56.293 --> 00:13:00.511\nversus an M4 extra large\nthat only has 13 ECUs.\n\n243\n00:13:00.511 --> 00:13:04.023\nSo we get more credits\non this C4 extra large.\n\n244\n00:13:04.023 --> 00:13:10.162\nWe get more access, or prioritized access,\nto the physical CPUs on the systems.\n\n245\n00:13:10.162 --> 00:13:11.745\nThat's where that optimization is.\n\n246\n00:13:11.745 --> 00:13:18.361\nSo if I'm doing heavy mathematical\noperations I know I'm gonna need CPU,\n\n247\n00:13:18.361 --> 00:13:23.716\nI might wanna use c instance\ntypes instead of m instance types\n\n248\n00:13:23.716 --> 00:13:28.979\nto guarantee the CPU's gonna be there for\nme when I need it.\n\n249\n00:13:28.979 --> 00:13:32.380\n&gt;&gt; So Donald,\nreal quick before we move on.\n\n250\n00:13:32.380 --> 00:13:36.624\nIf we start with Ms,\nis it really easy to move to Cs?\n\n251\n00:13:36.624 --> 00:13:39.940\nIs it just like a flip of a button or\nis it a little more involved than that?\n\n252\n00:13:39.940 --> 00:13:42.830\nDo I have to take everything down,\nredeploy, restart things?\n\n253\n00:13:42.830 --> 00:13:44.470\nOr can I just do a migration?\n\n254\n00:13:44.470 --> 00:13:46.480\n&gt;&gt; It depends on how your data is.\n\n255\n00:13:46.480 --> 00:13:50.290\nIf it's just a single machine and that's\nit, a lot of times you can just shut it\n\n256\n00:13:50.290 --> 00:13:53.560\ndown, change the instance type,\npower it back up, and that's that.\n\n257\n00:13:53.560 --> 00:13:56.060\nIf you're staying in the same series,\nit's really easy to do that.\n\n258\n00:13:56.060 --> 00:14:02.050\nIf you're going from an M4 large\nto an M42XL or 4XL, usually\n\n259\n00:14:02.050 --> 00:14:06.950\nyou just shut the machine down, change\nits instance, boot it back up, right?\n\n260\n00:14:06.950 --> 00:14:08.360\nBut when you're going in between series,\n\n261\n00:14:08.360 --> 00:14:12.900\nlike going from and M to a C,\nsometimes it can be as simple as that.\n\n262\n00:14:12.900 --> 00:14:15.610\nSometimes, you need to create an AMI.\n\n263\n00:14:15.610 --> 00:14:17.670\nYou create an image of your instance.\n\n264\n00:14:17.670 --> 00:14:20.910\nAnd then you redeploy the instance\nunder the new instance type like that.\n\n265\n00:14:20.910 --> 00:14:21.720\nSo it's a little more involved.\n\n266\n00:14:21.720 --> 00:14:23.820\nYou can automate that process super easy.\n\n267\n00:14:23.820 --> 00:14:25.980\nAnd then it really is\njust flipping a switch.\n\n268\n00:14:25.980 --> 00:14:27.840\nBut by default,\nyou may have to get involved on it.\n\n269\n00:14:27.840 --> 00:14:30.603\nIt depends on how much of a level\nof automation you're using.\n\n270\n00:14:30.603 --> 00:14:33.604\nIf you're leveraging things like Chef and\nPuppet,\n\n271\n00:14:33.604 --> 00:14:38.104\nif you're leveraging some of the other\ntechnologies that are part of the AWS,\n\n272\n00:14:38.104 --> 00:14:40.644\nit can be super easy to\nflip in between them.\n\n273\n00:14:40.644 --> 00:14:43.947\nAll right, in addition to C, we've got\na couple of other ones that I just\n\n274\n00:14:43.947 --> 00:14:46.400\nwant to highlight that just\nkinda turn up on the exam.\n\n275\n00:14:46.400 --> 00:14:48.063\nFor example, the R series.\n\n276\n00:14:48.063 --> 00:14:50.444\nR series is optimized for memory, right?\n\n277\n00:14:50.444 --> 00:14:53.050\nSo these guys are typically gonna\nhave more memory than what we see in\n\n278\n00:14:53.050 --> 00:14:53.696\nthe other ones.\n\n279\n00:14:53.696 --> 00:14:58.740\nA M4 extra large has 16 gigs of memory.\n\n280\n00:14:58.740 --> 00:15:04.980\nIf I get down to an R4 extra large you'll\nsee where I've got 30.5 gigs of memory.\n\n281\n00:15:04.980 --> 00:15:07.490\nAll right, now 30.5,\nthat's a weird number, isn't it?\n\n282\n00:15:07.490 --> 00:15:10.370\nWouldn't it normally be\nlike 32 gigs of memory?\n\n283\n00:15:10.370 --> 00:15:14.045\nWell, what's going on here is Amazon's\ntrying to do truth in advertising, right?\n\n284\n00:15:14.045 --> 00:15:16.486\nThey wanna say like, yeah,\nthere's 32 gigs but honestly,\n\n285\n00:15:16.486 --> 00:15:18.808\nyour operating system's gonna\neat up some of that memory.\n\n286\n00:15:18.808 --> 00:15:23.352\nAnd we've gotta have memory allocated\nto the management that AWS does and\n\n287\n00:15:23.352 --> 00:15:25.340\nstuff, so you can't use that.\n\n288\n00:15:25.340 --> 00:15:29.530\nSo we don't wanna tell you you're getting\n32 gigs when you can't actually use\n\n289\n00:15:29.530 --> 00:15:30.640\nall 32 gigs.\n\n290\n00:15:30.640 --> 00:15:32.120\nPart of it's tied up in the instance.\n\n291\n00:15:32.120 --> 00:15:35.220\nSo that's where you end up with\nsome of these slightly off numbers.\n\n292\n00:15:35.220 --> 00:15:37.210\nIt's truth in advertising.\n\n293\n00:15:37.210 --> 00:15:39.920\nWhich is nice to see\nfrom somebody at least.\n\n294\n00:15:39.920 --> 00:15:40.690\nBut you'll see,\n\n295\n00:15:40.690 --> 00:15:44.670\nthere's far more memory in the R series\nbecause it's optimized for that.\n\n296\n00:15:44.670 --> 00:15:49.361\nBut you'll see where like CPU may not be\nas optimized as what we saw on some of\n\n297\n00:15:49.361 --> 00:15:50.412\nthe other ones.\n\n298\n00:15:50.412 --> 00:15:51.390\nLet's see, iSeries.\n\n299\n00:15:51.390 --> 00:15:53.933\nThe iSeries down here\nis storage optimized.\n\n300\n00:15:53.933 --> 00:15:58.459\nThese are ones that we're not gonna notice\na big difference on CPU or memory here.\n\n301\n00:15:58.459 --> 00:16:01.850\nIt's because we're talking about\nthe disks that are optimized.\n\n302\n00:16:01.850 --> 00:16:05.672\nUp here, see how a lot of these\nwe're saying, SSD or EBS,\n\n303\n00:16:05.672 --> 00:16:07.863\nelastic block storage, right?\n\n304\n00:16:07.863 --> 00:16:11.691\nThat's the standard storage\nthat we have inside of EC2.\n\n305\n00:16:11.691 --> 00:16:16.371\nBut when you get down to the I series,\nthese are NVMe SSDs.\n\n306\n00:16:16.371 --> 00:16:19.219\nThat's some of the fastest storage\nthat you can get, all right?\n\n307\n00:16:19.219 --> 00:16:20.547\nThat's the really expensive stuff.\n\n308\n00:16:20.547 --> 00:16:22.322\nIt's the stuff that I wish\nI had on my computer.\n\n309\n00:16:22.322 --> 00:16:28.496\nSo you can get one 950 gig\nNVMe SSD attached to this one,\n\n310\n00:16:28.496 --> 00:16:32.780\nor eight 1.9 TB NVMe SSDs right here.\n\n311\n00:16:32.780 --> 00:16:37.670\nSo you can get these things attached and\nhave huge amounts of storage.\n\n312\n00:16:37.670 --> 00:16:40.830\nOr actually, I'm sorry, that's not\nthe size, that's my IOPS, darn it.\n\n313\n00:16:40.830 --> 00:16:43.260\nWe're gonna talk a little more\nabout IOPS a little bit later.\n\n314\n00:16:43.260 --> 00:16:45.890\nBut my input output operations per second,\n\n315\n00:16:45.890 --> 00:16:48.310\nhow many transactions I can\nthrow against that storage.\n\n316\n00:16:48.310 --> 00:16:49.950\nAnd that adds up pretty quick.\n\n317\n00:16:49.950 --> 00:16:54.220\nSo that's kinda what we're looking at\non these is their storage optimized.\n\n318\n00:16:54.220 --> 00:16:55.543\nThat is fast, fast storage.\n\n319\n00:16:55.543 --> 00:16:59.445\nAnd if that's what you need then these\nare the instances you'll wanna roll out.\n\n320\n00:16:59.445 --> 00:17:04.392\nLast one is GPU optimized, which I'm not\nsure if that shows up on this page or not,\n\n321\n00:17:04.392 --> 00:17:05.979\nthey're kinda special.\n\n322\n00:17:05.979 --> 00:17:06.772\nYeah, I don't see them.\n\n323\n00:17:06.772 --> 00:17:09.747\nThey turn up with a few of\nthe different instance types,\n\n324\n00:17:09.747 --> 00:17:11.405\nnot what I'm looking at here.\n\n325\n00:17:11.405 --> 00:17:14.975\nBut they start with a G, and\nso, it'll be G2 dot whatever,\n\n326\n00:17:14.975 --> 00:17:17.290\nI think they're on the twos right now.\n\n327\n00:17:17.290 --> 00:17:19.457\nSo, G2.extralarge and so on.\n\n328\n00:17:19.457 --> 00:17:23.947\nThese are the ones that have video cards,\nthe 3D video cards attached to them.\n\n329\n00:17:23.947 --> 00:17:26.432\nAmazon has partnered with Nvidia and\n\n330\n00:17:26.432 --> 00:17:31.643\nthe Nvidia Grid Technologies to attach\nsome of their, I forget which model,\n\n331\n00:17:31.643 --> 00:17:37.359\nit's like GTX1080 or something like that\nthat gets attached to this machines.\n\n332\n00:17:37.359 --> 00:17:40.039\nAnd you have access to\nthose physical GPUs.\n\n333\n00:17:40.039 --> 00:17:44.394\nAnd for mathematical operations, where\nyou really need to take advantage of core\n\n334\n00:17:44.394 --> 00:17:49.189\ncount, in a graphics card like that, you\ncan have thousands of that are available\n\n335\n00:17:49.189 --> 00:17:53.257\nfor you to be able to do transactions and\ncalculations very, very rapidly.\n\n336\n00:17:53.257 --> 00:17:56.026\nVery quickly on thousands of cores.\n\n337\n00:17:56.026 --> 00:17:57.935\nA lot of simultaneous calculations.\n\n338\n00:17:57.935 --> 00:17:59.936\nSo really big benefit there.\n\n339\n00:17:59.936 --> 00:18:03.057\nWe're starting to see a lot of growth\nthere in the cluster space where people\n\n340\n00:18:03.057 --> 00:18:04.731\nare doing scientific operation stuff.\n\n341\n00:18:04.731 --> 00:18:06.616\nThat's where that really\nbecomes beneficial.\n\n342\n00:18:06.616 --> 00:18:09.730\nSo those are all differences\nin my instance type.\n\n343\n00:18:09.730 --> 00:18:11.446\nAnd you can see if I pick the wrong one,\n\n344\n00:18:11.446 --> 00:18:15.120\nI might be getting a different performance\nprofile than what I really need.\n\n345\n00:18:15.120 --> 00:18:19.383\nSo choosing the right instance type is\na big deal when it comes to deploying out\n\n346\n00:18:19.383 --> 00:18:20.178\nan instance.\n\n347\n00:18:20.178 --> 00:18:22.585\nSo when I'm going through\nthe creation wizard,\n\n348\n00:18:22.585 --> 00:18:25.412\nI stopped here on the first page and\nstarted rambling on.\n\n349\n00:18:25.412 --> 00:18:28.963\nWe start by picking our operating system\nbut it's gonna be right after this.\n\n350\n00:18:28.963 --> 00:18:33.200\nSo I'll just do\nan Amazon Linux AMI deployment.\n\n351\n00:18:33.200 --> 00:18:37.599\nHere, where it starts asking me for\nwhich instance type I want,\n\n352\n00:18:37.599 --> 00:18:40.293\nright, which size I'm gonna go with.\n\n353\n00:18:40.293 --> 00:18:42.782\nNow this list can change.\n\n354\n00:18:42.782 --> 00:18:45.215\nYou may not see what I'm seeing.\n\n355\n00:18:45.215 --> 00:18:47.255\nAnd that's because it\nvaries based on two things.\n\n356\n00:18:47.255 --> 00:18:49.427\nIt varies, one,\nbased on the operating system.\n\n357\n00:18:49.427 --> 00:18:52.290\nNot every operating system\nsupports every instance type.\n\n358\n00:18:52.290 --> 00:18:55.400\nSo you may not see them all based on\nwhether you picked Windows, or Red Hat, or\n\n359\n00:18:55.400 --> 00:18:57.770\nUbuntu, or Amazon Linux, like I did.\n\n360\n00:18:57.770 --> 00:18:59.530\nYou may see different ones, all right?\n\n361\n00:18:59.530 --> 00:19:02.310\nThe other thing that's\ngonna vary is your region.\n\n362\n00:19:02.310 --> 00:19:04.190\nI'm on the North Virginia region.\n\n363\n00:19:04.190 --> 00:19:06.320\nAnd when Amazon rolls out something new,\n\n364\n00:19:06.320 --> 00:19:09.420\nlike I remember when the graphic\nsystems first came out.\n\n365\n00:19:09.420 --> 00:19:12.240\nThey were released just in North Virginia.\n\n366\n00:19:12.240 --> 00:19:16.070\nAnd so if you were connected to\nthe Oregon region, you didn't see them.\n\n367\n00:19:16.070 --> 00:19:17.420\nWell, they added them eventually.\n\n368\n00:19:17.420 --> 00:19:19.290\nAnd so\nthey roll technologies out like that,\n\n369\n00:19:19.290 --> 00:19:22.200\nnot every data center gets\neverything on day one.\n\n370\n00:19:22.200 --> 00:19:24.390\nAnd so, some of these instance\ntypes may be missing for\n\n371\n00:19:24.390 --> 00:19:27.930\nyou or you might see some that I don't,\nbecause I'm connected to Virginia.\n\n372\n00:19:27.930 --> 00:19:30.930\nYou might be connected to a data\ncenter that was a pilot program for\n\n373\n00:19:30.930 --> 00:19:33.320\nan instance type that\nhasn't made it to mine yet.\n\n374\n00:19:33.320 --> 00:19:35.800\nAnd you can always switch\ndata centers if you need to.\n\n375\n00:19:35.800 --> 00:19:40.460\nJust remember you're trying to keep your\ndata close to where it's being consumed.\n\n376\n00:19:40.460 --> 00:19:45.234\nEither close to the end user or close to\nyour systems to where it needs to be for\n\n377\n00:19:45.234 --> 00:19:46.738\noptimal performance.\n\n378\n00:19:46.738 --> 00:19:50.434\nBut just looking at the list here,\nI've got my T2s, my M4s.\n\n379\n00:19:50.434 --> 00:19:52.940\nIf I keep scrolling down, there's the Cs.\n\n380\n00:19:52.940 --> 00:19:58.010\nWe've got our Rs popping up after that and\nIs, Ns, still no Gs.\n\n381\n00:19:58.010 --> 00:20:01.309\n&gt;&gt; Actually, I think, Don,\nif you scroll back up a little bit,\n\n382\n00:20:01.309 --> 00:20:03.983\nI think it's embedded in\nthat C group somewhere.\n\n383\n00:20:03.983 --> 00:20:05.122\nThere we go.\n&gt;&gt; Did I blow past it?\n\n384\n00:20:05.122 --> 00:20:05.930\nYeah, there they are.\n\n385\n00:20:05.930 --> 00:20:07.126\n&gt;&gt; There's two of them.\n\n386\n00:20:07.126 --> 00:20:08.180\n&gt;&gt; I told you guys they existed.\n\n387\n00:20:08.180 --> 00:20:08.955\nIt's like Sasquatch.\n\n388\n00:20:08.955 --> 00:20:10.339\n&gt;&gt; [LAUGH]\n&gt;&gt; I know I saw it-\n\n389\n00:20:10.339 --> 00:20:11.979\n&gt;&gt; It's there, I see it.\n\n390\n00:20:11.979 --> 00:20:15.415\n&gt;&gt; [LAUGH] All right, so\nwe've got those g2s right there.\n\n391\n00:20:15.415 --> 00:20:19.320\nAnd you'll see g2 2xl, or 8xl.\n\n392\n00:20:19.320 --> 00:20:21.230\nWhere's just g2 large?\n\n393\n00:20:21.230 --> 00:20:21.758\nWell, they don't do it.\n\n394\n00:20:21.758 --> 00:20:23.535\nIt costs a lot of money to\nhave this kind of technology.\n\n395\n00:20:23.535 --> 00:20:26.469\nSo I need to make sure I get one\nthat's able to handle it and\n\n396\n00:20:26.469 --> 00:20:27.824\noffset the cost, right.\n\n397\n00:20:27.824 --> 00:20:31.927\nSo that's where we see just going straight\nto that g2 2xl right there, and so\n\n398\n00:20:31.927 --> 00:20:34.430\nwe could jump in and\ndeploy that if we wanted to.\n\n399\n00:20:34.430 --> 00:20:37.572\nAnd it's telling me how they're\noptimized right over here.\n\n400\n00:20:37.572 --> 00:20:41.971\nAll right, now, fortunately, if you\nchoose the wrong one with the default\n\n401\n00:20:41.971 --> 00:20:46.460\nconfiguration, it's not super easy to\nswitch over to one of the other ones.\n\n402\n00:20:46.460 --> 00:20:47.980\nBut you can switch over\nto one of the other ones.\n\n403\n00:20:47.980 --> 00:20:51.120\nSo it's not like a permanent mistake\nyou're gonna regret the rest of your life.\n\n404\n00:20:51.120 --> 00:20:53.340\nA lot of this stuff is very\neasy to change and manipulate.\n\n405\n00:20:53.340 --> 00:20:56.590\nBut if choose correctly in the beginning,\nyou'll be better off.\n\n406\n00:20:56.590 --> 00:21:00.880\nNow I'll tell you even if you're right in\nthe beginning, you never stay right for\n\n407\n00:21:00.880 --> 00:21:02.420\nvery long in IT.\n\n408\n00:21:02.420 --> 00:21:05.660\nSo you might deploy a technology\nthat's working great today,\n\n409\n00:21:05.660 --> 00:21:09.930\nbut you start adding more customers, you\nadd more employees, you add more products.\n\n410\n00:21:09.930 --> 00:21:11.640\nAnd things start getting bogged down.\n\n411\n00:21:11.640 --> 00:21:13.500\nAnd now you need to move\nup to the next tier.\n\n412\n00:21:13.500 --> 00:21:18.140\nHey maybe 2XL was fine today, but\nnow you need to go up to 4XL or 8XL, or\n\n413\n00:21:18.140 --> 00:21:22.750\nmaybe I need to add more instances and\ndistribute the workload.\n\n414\n00:21:22.750 --> 00:21:24.690\nThat's usually the solution that I choose.\n\n415\n00:21:24.690 --> 00:21:27.740\nIt's rare that I deploy the very,\nvery high end instances,\n\n416\n00:21:27.740 --> 00:21:30.620\nbecause you're usually better\noff with distributed payload.\n\n417\n00:21:30.620 --> 00:21:35.270\nBut there are times, especially when\nit comes to database servers where you\n\n418\n00:21:35.270 --> 00:21:38.360\njust aren't able to distribute\nthe workload that way.\n\n419\n00:21:38.360 --> 00:21:43.060\nLike write operations on a database, you\nreally need to be writing to one place for\n\n420\n00:21:43.060 --> 00:21:44.060\nconsistency.\n\n421\n00:21:44.060 --> 00:21:47.288\nAnd so scaling up, picking those higher\ntiers, becomes your main option.\n\n422\n00:21:47.288 --> 00:21:50.214\n&gt;&gt; So Don, I dabble a little\nin this this distributing,\n\n423\n00:21:50.214 --> 00:21:52.499\ncomputing space running calculations.\n\n424\n00:21:52.499 --> 00:21:56.000\nI need some CPU optimized images.\n\n425\n00:21:56.000 --> 00:22:00.122\nBut am I gonna see different performance\nusing like the Amazon AMI or\n\n426\n00:22:00.122 --> 00:22:04.920\nRed Hat or Ubuntu or\nis there other concerns with those?\n\n427\n00:22:04.920 --> 00:22:06.523\n&gt;&gt; You know, there really is.\n\n428\n00:22:06.523 --> 00:22:13.641\nAnd it's hard to quantify this one but\nwhen you deploy an instance type,\n\n429\n00:22:13.641 --> 00:22:17.850\nif I deploy a C4 extra large with Windows.\n\n430\n00:22:17.850 --> 00:22:23.579\nOr I deploy a C4 extra large with Red Hat\nor a C4 extra large with Ubuntu, right?\n\n431\n00:22:23.579 --> 00:22:27.608\nOn Amazon's side, on the EC2 side,\nthe instances are identical.\n\n432\n00:22:27.608 --> 00:22:32.199\nThe virtualized hardware, the hardware\nunderneath them, that's identical.\n\n433\n00:22:32.199 --> 00:22:36.580\nSo from that perspective, you should get\nthe same performance off of all of them.\n\n434\n00:22:36.580 --> 00:22:39.870\nBut as we all know, different operating\nsystems behave different ways.\n\n435\n00:22:39.870 --> 00:22:41.950\nAnd so sometimes,\ndepending on our software,\n\n436\n00:22:41.950 --> 00:22:45.160\nyou may actually see better performance\nunder one operating system versus another.\n\n437\n00:22:45.160 --> 00:22:48.880\nThat's one of the reasons why Linux is so\npopular right now for server operating\n\n438\n00:22:48.880 --> 00:22:54.730\nsystems is that you can choose a Ubuntu or\nRed Hat or Linux or whatever.\n\n439\n00:22:54.730 --> 00:22:59.050\nAnd deep down underneath,\nthey've all got the same kernel.\n\n440\n00:22:59.050 --> 00:23:01.500\nAnd so they all have a very\nsimilar performance profile.\n\n441\n00:23:01.500 --> 00:23:04.740\nVersus if you switch over to Windows and\nit's an entirely different beast.\n\n442\n00:23:04.740 --> 00:23:07.197\nAnd you might get better performance,\nyou might get worse performance,\n\n443\n00:23:07.197 --> 00:23:07.797\nit just depends.\n\n444\n00:23:07.797 --> 00:23:09.483\nSo that is something we\nhave to decide about.\n\n445\n00:23:09.483 --> 00:23:11.720\nAnd actually, it'll give me\na chance to double back to AMIs.\n\n446\n00:23:11.720 --> 00:23:14.700\nI'm gonna move backwards\nin the wizard here.\n\n447\n00:23:14.700 --> 00:23:16.640\nWhen you pick these AMIs,\n\n448\n00:23:16.640 --> 00:23:20.310\nlet me just throw a few little\nmore kinda things to be aware of.\n\n449\n00:23:20.310 --> 00:23:23.080\nThe ones that I'm viewing right here,\nthis is on the Quick Start.\n\n450\n00:23:23.080 --> 00:23:26.419\nAnd these are the ones that Amazon\nhas found to be the most popular.\n\n451\n00:23:26.419 --> 00:23:28.840\nThese are the ones that a lot\nof people are deploying.\n\n452\n00:23:28.840 --> 00:23:32.230\nAmazon Linux is very popular\nbecause they manage it.\n\n453\n00:23:32.230 --> 00:23:33.979\nAnd what do I mean by they manage it?\n\n454\n00:23:33.979 --> 00:23:38.951\nWell, what I mean is that every couple\nof months Amazon releases a new\n\n455\n00:23:38.951 --> 00:23:41.361\nversion of this AMI, all right?\n\n456\n00:23:41.361 --> 00:23:47.460\nAnd so if I look at this one, see how\nthe name here, Amazon Linux AMI 2016.09.1.\n\n457\n00:23:47.460 --> 00:23:50.146\nThat means this was released\nSeptember 1st, 2016.\n\n458\n00:23:50.146 --> 00:23:54.853\nWell, it's February of 2017 right now,\nso we're getting pretty close.\n\n459\n00:23:54.853 --> 00:23:57.387\nIt's usually about every six months that\nthey release an update for this one.\n\n460\n00:23:57.387 --> 00:23:59.327\nSo we're getting pretty close\nto the releasing a new one.\n\n461\n00:23:59.327 --> 00:24:03.845\nBut they'll release a new one that comes\nout and it'll have updates, and patches,\n\n462\n00:24:03.845 --> 00:24:08.043\nand other things in it, as well as all\nthe AWS management software to allow us to\n\n463\n00:24:08.043 --> 00:24:11.830\ninteract with it, and use the SDK,\nand all those other things.\n\n464\n00:24:11.830 --> 00:24:15.430\nThat's built into that image, and\nthat's why they're so convenient to use.\n\n465\n00:24:15.430 --> 00:24:19.867\nThey're managing some of the aspects for\nus so that we don't have to, right?\n\n466\n00:24:19.867 --> 00:24:24.332\nBut, once we deploy it,\nit's up to us to do the updates,\n\n467\n00:24:24.332 --> 00:24:26.853\nit's up to us to do the patches.\n\n468\n00:24:26.853 --> 00:24:30.070\nAnd they have repositories set up where\nyou can pull the updates from them, but\n\n469\n00:24:30.070 --> 00:24:32.480\nyou can point to your own if you\nwant you take control of it.\n\n470\n00:24:32.480 --> 00:24:37.230\nSo, Amazon does the best they can to make\nsure this image is completely stable and\n\n471\n00:24:37.230 --> 00:24:42.020\nsafe when they give it to you, but\nonce you've got it, things are up to you.\n\n472\n00:24:42.020 --> 00:24:46.610\nAnd if you don't want that risk, what you\ncan do is if you're storing your data\n\n473\n00:24:46.610 --> 00:24:50.240\nin persistent storage, you can\nalways blow away your instances and\n\n474\n00:24:50.240 --> 00:24:52.650\ndeploy new ones off of the new\nimage as soon as they're ready.\n\n475\n00:24:52.650 --> 00:24:54.720\nAnd your data's preserved and\nyou're up and going, but\n\n476\n00:24:54.720 --> 00:24:57.410\nyou've got to make sure your\nsoftware is ready to handle that.\n\n477\n00:24:57.410 --> 00:24:59.230\nThe same thing goes for\nthese other vendors.\n\n478\n00:24:59.230 --> 00:25:02.200\nSo for example Red Hat,\nthey have their own repositories,\n\n479\n00:25:02.200 --> 00:25:03.870\nthey push their own updates.\n\n480\n00:25:03.870 --> 00:25:07.430\nWhen we deploy it,\nAmazon give us the 7.3 version here, but\n\n481\n00:25:07.430 --> 00:25:10.520\nthere have been updates that have\ncome out since 7.3 came out.\n\n482\n00:25:10.520 --> 00:25:13.390\nSo we need to make sure we do our\nupdates when we get that up and going.\n\n483\n00:25:13.390 --> 00:25:19.960\nYou'll see SUSE Linux, Ubuntu, Windows,\nand this is Windows Server 2016, right.\n\n484\n00:25:19.960 --> 00:25:22.340\nWhat if I want Windows Server 2012?\n\n485\n00:25:22.340 --> 00:25:24.210\nWell, that's not here on the list, is it?\n\n486\n00:25:24.210 --> 00:25:25.700\nIt might be if I keep scrolling down.\n\n487\n00:25:25.700 --> 00:25:27.640\nThere it is, Windows Server 2012.\n\n488\n00:25:27.640 --> 00:25:31.070\nSo, we can find other ones, even some\nthat have software packaged in them.\n\n489\n00:25:31.070 --> 00:25:34.000\nLike these have SQL Server\ninstalled with them.\n\n490\n00:25:34.000 --> 00:25:36.200\nSo, if I wanna do that kind of deployment,\nit's right there.\n\n491\n00:25:36.200 --> 00:25:38.600\nThere's a licensing cost, but it's there.\n\n492\n00:25:38.600 --> 00:25:42.360\nNow, this is not the limit of\nwhat I've got, though, right?\n\n493\n00:25:42.360 --> 00:25:47.925\nRemember that I mentioned there are a few\nother instance types that we can roll out,\n\n494\n00:25:47.925 --> 00:25:51.550\nor AMIs that we can roll out, that\nare stored in the community markets and\n\n495\n00:25:51.550 --> 00:25:52.990\nstuff, so let me talk about that briefly.\n\n496\n00:25:54.290 --> 00:25:58.320\nAs I scroll down this list, you probably\nnoticed how some of them say HVM on them,\n\n497\n00:25:59.510 --> 00:26:03.930\nand other ones say PV on them, okay.\n\n498\n00:26:03.930 --> 00:26:07.660\nBack in the day, when we rolled\nout Linux Virtual Machines or\n\n499\n00:26:07.660 --> 00:26:12.000\ninstances on top of EC2, they were\nwhat were called paravirtualized.\n\n500\n00:26:12.000 --> 00:26:15.130\nThat means there were drivers inside\nof the guest that allowed them to see\n\n501\n00:26:15.130 --> 00:26:17.270\nthe host underneath and\nknow that they were virtualized and\n\n502\n00:26:17.270 --> 00:26:21.130\nto share a common kernel with\nthe host underneath, all right.\n\n503\n00:26:21.130 --> 00:26:22.590\nThey don't do that anymore.\n\n504\n00:26:22.590 --> 00:26:27.140\nAll the new AMI's are HVM, so\nthey use the newer virtualization model.\n\n505\n00:26:27.140 --> 00:26:30.740\nAnd that lets them have their own kernel\nthat can be different from the underlying\n\n506\n00:26:30.740 --> 00:26:31.880\nsystem underneath.\n\n507\n00:26:31.880 --> 00:26:34.460\nNow it never worked with Windows so\nit didn't matter on the Windows side.\n\n508\n00:26:34.460 --> 00:26:36.060\nBut on the Linux side it did.\n\n509\n00:26:36.060 --> 00:26:38.170\nAll the newer ones are HVM.\n\n510\n00:26:38.170 --> 00:26:42.440\nAs long as we stay inside of\nAmazon's Quick Select here,\n\n511\n00:26:42.440 --> 00:26:45.145\nyou're gonna have AMIs that are stable and\nsafe that have all been updated to HVMs.\n\n512\n00:26:45.145 --> 00:26:47.520\nSo that's why they kinda have that\nlittle note there, right, and\n\n513\n00:26:47.520 --> 00:26:50.390\nthey've all been updated to SSD and so on.\n\n514\n00:26:50.390 --> 00:26:54.890\nWhen you start deviating from this main\nlist, when you start taking a look at\n\n515\n00:26:54.890 --> 00:27:00.240\nthings like the community market or\n\n516\n00:27:00.240 --> 00:27:04.430\nthose areas, you may find some\nthat are not properly optimized.\n\n517\n00:27:04.430 --> 00:27:08.708\nOnes that don't necessarily have\nall the things, they might still be\n\n518\n00:27:08.708 --> 00:27:13.652\nparavirtualized, but they might still\nbe using magnetic disks instead of SSD.\n\n519\n00:27:13.652 --> 00:27:15.120\nThat can happen, right.\n\n520\n00:27:15.120 --> 00:27:17.320\nSo when I go into the AWS marketplace,\n\n521\n00:27:17.320 --> 00:27:21.150\nit’s important that I do my\nresearch on what I’m finding here.\n\n522\n00:27:21.150 --> 00:27:24.841\nNow in the marketplace these\nare the ones that are paid instances.\n\n523\n00:27:24.841 --> 00:27:29.077\nThese are ones where people have done\nsome extra work to make sure that these\n\n524\n00:27:29.077 --> 00:27:32.780\nare ready to go and so\nthey're usually pretty reliable.\n\n525\n00:27:32.780 --> 00:27:37.760\nBut when we get into the community AMIs,\nthese are ones that people just build.\n\n526\n00:27:37.760 --> 00:27:41.400\nAnd it might be people like you and\nme that maybe we know what we're doing,\n\n527\n00:27:41.400 --> 00:27:43.800\nit might be people that don't know\nwhat you're doing, you don't know.\n\n528\n00:27:43.800 --> 00:27:45.950\nAnd so you've gotta make sure\nthat you're careful with these.\n\n529\n00:27:45.950 --> 00:27:50.550\nThat I could deploy\nRed Hat Enterprise Linux and if I use\n\n530\n00:27:50.550 --> 00:27:54.160\nAmazon's build of Red Hat Enterprise\nLinux I might get great performance.\n\n531\n00:27:54.160 --> 00:27:57.250\nBut then I deploy Justin's build\nof Red Hat Enterprise Linux, and\n\n532\n00:27:57.250 --> 00:27:58.870\nit runs terrible.\n\n533\n00:27:58.870 --> 00:28:00.180\nAnd it's configuration.\n\n534\n00:28:00.180 --> 00:28:04.850\n&gt;&gt; Well I can tell you Don, if I was the\none that built the Red Hat Linux instance,\n\n535\n00:28:04.850 --> 00:28:08.710\nor the image for the instance,\nit would probably run terribly.\n\n536\n00:28:08.710 --> 00:28:10.273\n&gt;&gt; Not a fan?\n\n537\n00:28:10.273 --> 00:28:12.660\n[LAUGH]\n&gt;&gt; I have tried it, I have tried it.\n\n538\n00:28:12.660 --> 00:28:15.110\nAnd usually it just ends\nin failure with me.\n\n539\n00:28:15.110 --> 00:28:15.828\n&gt;&gt; That's my favorite.\n\n540\n00:28:15.828 --> 00:28:17.015\nAnyhow, so.\n\n541\n00:28:17.015 --> 00:28:21.720\n[LAUGH] So things to be aware\nof when we deploy is that\n\n542\n00:28:21.720 --> 00:28:25.250\ncan affect performance too\nis how that AMI is built.\n\n543\n00:28:25.250 --> 00:28:29.370\nAnd if you're ultra paranoid you can\nbuild your own AMIs, it's not hard to do.\n\n544\n00:28:29.370 --> 00:28:33.350\nYou can build your own and deploy, that's\nwhy we have the My AMI section over here.\n\n545\n00:28:33.350 --> 00:28:38.340\nA lot of times what I'll do is I'll\ntake one of the Amazon AMIs and\n\n546\n00:28:38.340 --> 00:28:43.340\nI'll modify it to suit my needs and\nbuild a custom AMI out of that.\n\n547\n00:28:43.340 --> 00:28:44.908\nAnd now I can roll out and deploy it.\n\n548\n00:28:44.908 --> 00:28:45.972\nThat's really handy, and\n\n549\n00:28:45.972 --> 00:28:49.320\nyou'll find you need that when you're\ndoing things like auto scaling.\n\n550\n00:28:49.320 --> 00:28:54.190\nIf I have a web farm and I want it\nto always have ten web servers, but\n\n551\n00:28:54.190 --> 00:28:56.955\nI want it to be able to scale up to\n10,000 web servers if I need it.\n\n552\n00:28:56.955 --> 00:29:02.790\nThen I need an AMI that can be deployed\nthat already has the web server installed,\n\n553\n00:29:02.790 --> 00:29:05.840\nthat's already configured,\nso that when it boots up and\n\n554\n00:29:05.840 --> 00:29:08.690\ngrabs a copy of the web page\nfrom my centralized storage, and\n\n555\n00:29:08.690 --> 00:29:12.170\nthat it comes up and\nit joins that load balancer and it goes.\n\n556\n00:29:12.170 --> 00:29:13.930\nI can build a custom AMI to do that.\n\n557\n00:29:13.930 --> 00:29:16.830\nThese built in AMIs they don't do that,\nright?\n\n558\n00:29:16.830 --> 00:29:19.690\nThey've got a default configuration\nthat we'll need to manipulate.\n\n559\n00:29:19.690 --> 00:29:22.990\nAnd there's products like Chef and\nPuppet that you can use but\n\n560\n00:29:22.990 --> 00:29:25.220\neven then you still have to\nbuild those agents in there.\n\n561\n00:29:25.220 --> 00:29:28.460\nThere's other technologies inside of\nAWS we're gonna see later on that\n\n562\n00:29:28.460 --> 00:29:31.980\nwe can leverage to make these things\nautomated and deployed out, too.\n\n563\n00:29:31.980 --> 00:29:36.470\nThese are all things that we need to think\nabout as we're selecting the AMI to use\n\n564\n00:29:36.470 --> 00:29:37.680\nfor an instance.\n\n565\n00:29:37.680 --> 00:29:40.655\nThe instance type is easy to change.\n\n566\n00:29:40.655 --> 00:29:44.114\nThe AMI is much more difficult, because\nyou're basically talking about redeploying\n\n567\n00:29:44.114 --> 00:29:46.280\nthe operating system, if you change AMIs.\n\n568\n00:29:46.280 --> 00:29:49.510\nAnd your data is likely not ready for\nthat to happen.\n\n569\n00:29:49.510 --> 00:29:52.740\nSo that's an extra challenge you wanna\nmake sure you're building on a good\n\n570\n00:29:52.740 --> 00:29:56.690\nfoundation and not something you're\ngonna have to change down the road.\n\n571\n00:29:56.690 --> 00:29:58.500\n&gt;&gt; Well Don, that's a wonderful look.\n\n572\n00:29:58.500 --> 00:30:01.412\nI know we just hit the tip\nof the iceberg for EC2,\n\n573\n00:30:01.412 --> 00:30:03.556\nthere's a lot more to do with EC2.\n\n574\n00:30:03.556 --> 00:30:07.207\nSo it looks like we're gonna go to a part\ntwo here, hopefully, you'll come back with\n\n575\n00:30:07.207 --> 00:30:10.471\nus, but unfortunately we are out of\ntime for this episode for this episode.\n\n576\n00:30:10.471 --> 00:30:13.365\nSigning off for ITProTV,\nI've been your host, Justin Demeson.\n\n577\n00:30:13.365 --> 00:30:14.803\n&gt;&gt; And I'm Don Pizet.\n\n578\n00:30:14.803 --> 00:30:16.144\n&gt;&gt; See you next time.\n\n579\n00:30:16.144 --> 00:30:22.878\n[MUSIC]\n\n580\n00:30:22.878 --> 00:30:25.994\n&gt;&gt; Thank you for watching ITProTV\n\n",
          "vimeoId": "207293060"
        },
        {
          "description": "In this episode, Justin and Don take a look at what is next after deploying an EC2. They configure IP addresses and use services such as SSH/RDP to explore a deployed machine. With security in mind, Don demonstrates the management of a security for accessing the instance. Lastly, they review the tools available for managing the lifecycle of the instance as well as monitoring for issues.",
          "length": "1987",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-2-amazon_ec2_basics_pt2-030217.00_34_10_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-2-amazon_ec2_basics_pt2-030217.00_34_10_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-2-amazon_ec2_basics_pt2-030217.00_34_10_15.Still001-sm.jpg",
          "title": "Amazon EC2 Basics Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.496\nWelcome to ITProTV.\n\n2\n00:00:01.496 --> 00:00:06.411\nI'm your host Don- [NOISE]\n\n3\n00:00:06.411 --> 00:00:08.438\n[MUSIC]\n\n4\n00:00:08.438 --> 00:00:11.070\nYou're watching ITProTV.\n\n5\n00:00:11.070 --> 00:00:15.927\n[SOUND] Greetings everyone and welcome\nto another exciting episode of ITProTV.\n\n6\n00:00:15.927 --> 00:00:19.739\nI'm your host Justin Dennison and\nwe are back for a part two on EC2 and\n\n7\n00:00:19.739 --> 00:00:23.680\nto help us with that is Mr.\nDon Pezet, how are you doing today Don?\n\n8\n00:00:23.680 --> 00:00:24.860\n&gt;&gt; Doing just swell Justin,\n\n9\n00:00:24.860 --> 00:00:27.400\nready to dive right in and\nfinish the work we've started, right?\n\n10\n00:00:27.400 --> 00:00:29.740\nIn the last episode we had a chance\nto talk a little bit about,\n\n11\n00:00:29.740 --> 00:00:33.360\nhow we decide on picking an AMI and\nan instance type and all of that.\n\n12\n00:00:33.360 --> 00:00:36.980\nAnd so in this episode,\nwe're gonna continue on with getting our\n\n13\n00:00:36.980 --> 00:00:41.410\ninstances up and actually doing something\nuseful since that's what we're paying for.\n\n14\n00:00:41.410 --> 00:00:45.250\n&gt;&gt; So Don, I know when I've messed with\nsome physical servers, they're limited.\n\n15\n00:00:45.250 --> 00:00:47.930\nI typically have checklist of like,\nokay, I have it setup.\n\n16\n00:00:47.930 --> 00:00:51.140\nIt's kind of plugged up,\nnow there's these things to do, but\n\n17\n00:00:51.140 --> 00:00:55.230\nI don't feel like I have that ability cuz\nI'm just kind of pointing and clicking.\n\n18\n00:00:55.230 --> 00:00:58.880\nIs there other things that we need to\nconsider once we deploy these instances of\n\n19\n00:00:58.880 --> 00:01:00.650\nadditional things that we need to do?\n\n20\n00:01:00.650 --> 00:01:01.920\n&gt;&gt; Absolutely, yeah.\n\n21\n00:01:01.920 --> 00:01:04.430\nIn an on-premise solution,\nwhen you roll out a Windows or\n\n22\n00:01:04.430 --> 00:01:06.930\na Linux machine,\nyou usually have a deployment checklist.\n\n23\n00:01:06.930 --> 00:01:09.452\nHere is the activities that need to be\ncompleted before this machine rolls\n\n24\n00:01:09.452 --> 00:01:10.750\ninto production.\n\n25\n00:01:10.750 --> 00:01:11.970\nIt's no different in EC2, right?\n\n26\n00:01:11.970 --> 00:01:15.200\nYou're effectively rolling\nout a new server, and\n\n27\n00:01:15.200 --> 00:01:17.020\nit needs to be properly configured.\n\n28\n00:01:17.020 --> 00:01:21.760\nThe only difference is there's a lot of\nthings that we can configure right inside\n\n29\n00:01:21.760 --> 00:01:26.560\nof the AWS console, instead of in\nthe guest operating system itself, right?\n\n30\n00:01:26.560 --> 00:01:29.674\nFor example,\nif I wanted to do IP addressing.\n\n31\n00:01:29.674 --> 00:01:33.970\nOn a on-premise systems I would log\nin to Linux or log in to Windows and\n\n32\n00:01:33.970 --> 00:01:36.070\nI would go to modify the network\nadapters configuration,\n\n33\n00:01:36.070 --> 00:01:37.470\nI would assign an IP address.\n\n34\n00:01:37.470 --> 00:01:40.240\nWell, in EC2 I don't have to do that.\n\n35\n00:01:40.240 --> 00:01:44.280\nI can go right into the AWS console or\nuse the API and\n\n36\n00:01:44.280 --> 00:01:49.140\nuse the SDK to reach in and\nchange the IP address of an interface or\n\n37\n00:01:49.140 --> 00:01:51.210\neven add another interface\nto the machine if I need to.\n\n38\n00:01:51.210 --> 00:01:55.420\nI can do all of that right through\nAmazon's management software and the nice\n\n39\n00:01:55.420 --> 00:02:00.620\npart about that is, it's done the same way\nregardless of the guest operating system.\n\n40\n00:02:00.620 --> 00:02:03.925\nThat the guest OS might be Linux, or\nthe guest OS might be Windows, but\n\n41\n00:02:03.925 --> 00:02:07.678\nwhen I go into the console and change the\nIP, it's all done the same versus those\n\n42\n00:02:07.678 --> 00:02:10.817\non-premises checklists where I\nhave to have one for Windows, and\n\n43\n00:02:10.817 --> 00:02:12.470\na separate one for Linux, right?\n\n44\n00:02:12.470 --> 00:02:14.180\nThese are the steps you gotta follow.\n\n45\n00:02:14.180 --> 00:02:17.070\nThat makes life a lot easier,\nwe manage our instances the same\n\n46\n00:02:17.070 --> 00:02:20.160\nway regardless of their size, and\nregardless of their operating system.\n\n47\n00:02:20.160 --> 00:02:22.000\nIt makes life easier.\n\n48\n00:02:22.000 --> 00:02:24.010\nSo let me show you what I mean.\n\n49\n00:02:24.010 --> 00:02:29.370\nWhen you deploy an instance, so let me\njust back up here to my EC2 console and\n\n50\n00:02:29.370 --> 00:02:31.590\nI'm gonna roll out an instance real quick.\n\n51\n00:02:31.590 --> 00:02:33.710\nWe can launch an instance really fast.\n\n52\n00:02:33.710 --> 00:02:38.690\nIf you go in here, and you pick an AMI's,\nor I'll pick the Amazon Linux AMI.\n\n53\n00:02:38.690 --> 00:02:43.200\nAnd I'll just go with, let me not do it\na T2 micro's or a little on the slow side.\n\n54\n00:02:43.200 --> 00:02:46.227\nSo, I'm gonna jump up to an M4 large.\n\n55\n00:02:46.227 --> 00:02:48.160\nAll right, so I'm gonna do an M4 large.\n\n56\n00:02:48.160 --> 00:02:52.420\nAnd notice I've got this nice little\nreview and launch button down here.\n\n57\n00:02:52.420 --> 00:02:54.570\nI don't even have to go through all\nthe other configuration options.\n\n58\n00:02:54.570 --> 00:02:57.199\nI can just hit this button and\nit's gonna launch me an instance, right?\n\n59\n00:02:57.199 --> 00:03:00.780\nSo I'm gonna hit that and\nI'm getting some warnings here, right?\n\n60\n00:03:00.780 --> 00:03:03.920\nWarnings about, hey,\nyour system is open to the world.\n\n61\n00:03:03.920 --> 00:03:06.240\nThat doesn't sound so good.\n\n62\n00:03:06.240 --> 00:03:09.000\nAnd it's not eligible for\nthe free usage tier.\n\n63\n00:03:09.000 --> 00:03:11.940\nIt's gonna cost me some money\ncuz I picked a higher end unit.\n\n64\n00:03:11.940 --> 00:03:15.317\nSo couple of warnings here but\nI can ignore those warnings in typical Don\n\n65\n00:03:15.317 --> 00:03:19.100\nfashion and way down here the bottom right\nI can hit my little launch button and.\n\n66\n00:03:20.260 --> 00:03:21.160\nIt's gonna fire it up.\n\n67\n00:03:21.160 --> 00:03:23.660\nNow it is gonna ask me one thing.\n\n68\n00:03:23.660 --> 00:03:28.050\nWhich is I've got to have a security\nkey to be able to get into the system.\n\n69\n00:03:28.050 --> 00:03:31.170\nWe need some kind of\nrestricted access onto it.\n\n70\n00:03:31.170 --> 00:03:34.420\nSo it's asking me to pick a key pair and\nthat's one thing that I do have\n\n71\n00:03:34.420 --> 00:03:36.910\nto configure in order to get\nthe system up and going.\n\n72\n00:03:36.910 --> 00:03:40.620\nAnd so I can choose to create a new key\npair if I don't have one already or\n\n73\n00:03:40.620 --> 00:03:42.535\nI can reuse one that I've already used.\n\n74\n00:03:42.535 --> 00:03:45.595\nI might wanna have a different key for\nevery single instance or\n\n75\n00:03:45.595 --> 00:03:48.805\nI might have one super key that I\nuse on all of my instances it's\n\n76\n00:03:48.805 --> 00:03:50.385\nup to me how I wanna set that up.\n\n77\n00:03:50.385 --> 00:03:51.525\nSo I'm just gonna create one and\n\n78\n00:03:51.525 --> 00:03:56.915\nI'll just call it dpSet-test or whatever I\nwanna call it, and I'm gonna download it.\n\n79\n00:03:56.915 --> 00:03:59.185\nIt is important that you download it and\n\n80\n00:03:59.185 --> 00:04:03.110\nthe main reason is this is\nyour chance to get the key.\n\n81\n00:04:03.110 --> 00:04:06.450\nOnce it's done they don't\ngive you this key again.\n\n82\n00:04:06.450 --> 00:04:10.910\nAnd if you lose the key for a system,\nyou have to delete the system and\n\n83\n00:04:10.910 --> 00:04:14.330\ndeploy another one because there's\nno way to recover the key.\n\n84\n00:04:14.330 --> 00:04:15.840\nSo it is important you download it.\n\n85\n00:04:15.840 --> 00:04:19.170\nIf you don't,\nyou're kind of in trouble, right?\n\n86\n00:04:19.170 --> 00:04:21.020\nSo I wanna go and\nlaunch that instance and off it goes.\n\n87\n00:04:21.020 --> 00:04:23.540\nSo I really didn't have to\nspecify much of anything.\n\n88\n00:04:23.540 --> 00:04:25.110\nTo get that one up and running.\n\n89\n00:04:25.110 --> 00:04:29.930\nBut, the reality is, there's a lot of\nstuff that I probably needed to tweak, and\n\n90\n00:04:29.930 --> 00:04:33.550\nI could have done it in that wizard,\nwhile it was launching,\n\n91\n00:04:33.550 --> 00:04:38.230\nI just chose to take the shortcut, and go\nahead and get it launched quickly, right?\n\n92\n00:04:38.230 --> 00:04:41.380\nSo, there it is, it's going and\nit's launching, all right?\n\n93\n00:04:41.380 --> 00:04:43.850\nNow, the things that we want to customize.\n\n94\n00:04:43.850 --> 00:04:46.010\nThey're gonna be pretty typical things,\nthings that you're used to.\n\n95\n00:04:46.010 --> 00:04:47.520\nThings like IP addressing, right?\n\n96\n00:04:47.520 --> 00:04:50.130\nI might want to jump in here and\nchange the IP address.\n\n97\n00:04:50.130 --> 00:04:53.868\nWhen you launch an instance,\nit's gonna get a dynamic address.\n\n98\n00:04:53.868 --> 00:04:58.620\nAll the AMI's that Amazon builds,\nand most of the community ones,\n\n99\n00:04:58.620 --> 00:05:01.220\nuse DHCP,\nDynamic Host Configuration Protocol.\n\n100\n00:05:01.220 --> 00:05:03.300\nSo, this machine is gonna boot up.\n\n101\n00:05:03.300 --> 00:05:04.920\nAnd it's gonna grab an IP address.\n\n102\n00:05:04.920 --> 00:05:07.975\nWell your instances are actually gonna\nhave two different IP addresses.\n\n103\n00:05:07.975 --> 00:05:12.890\nThey're gonna have one that's a private\nIP, an RFC 1918 address that's\n\n104\n00:05:12.890 --> 00:05:17.720\nprivate on the VPC or\nthe Virtual Private Network that it's on,\n\n105\n00:05:18.800 --> 00:05:22.930\nso that it is kind of separated out and\nable to communicate internally.\n\n106\n00:05:22.930 --> 00:05:27.301\nAnd then there will be a public IP That's\nbeing translated using NAT to communicate\n\n107\n00:05:27.301 --> 00:05:29.180\nfor that private IP in the insides.\n\n108\n00:05:29.180 --> 00:05:31.770\nYou have a public IP and a private IP.\n\n109\n00:05:31.770 --> 00:05:36.660\nWell, to make life a little easier on us\nthey assign a DNS name to the systems.\n\n110\n00:05:36.660 --> 00:05:40.610\nWe actually have a domain\nname attached to it that\n\n111\n00:05:40.610 --> 00:05:45.160\non the inside of your VPC will resolve to\nthe private address and on the outside,\n\n112\n00:05:45.160 --> 00:05:47.060\nlike on the internet,\nit will resolve to the public address.\n\n113\n00:05:47.060 --> 00:05:50.390\nThat name works out a lot better and\nthat's what we're normally going to use.\n\n114\n00:05:50.390 --> 00:05:52.420\nNow, my instance is\nspinning up right now but\n\n115\n00:05:52.420 --> 00:05:54.180\nI can actually see some\nof this information.\n\n116\n00:05:54.180 --> 00:05:56.730\nWell, on my head is kind\nof on top of some of it.\n\n117\n00:05:56.730 --> 00:06:01.600\nBut if you look down here\nI can see my public IP,\n\n118\n00:06:01.600 --> 00:06:06.332\nmy private IP, my private DNS and\nmy public DNS.\n\n119\n00:06:06.332 --> 00:06:09.580\nHere is the public DNS name\nattached to this computer\n\n120\n00:06:09.580 --> 00:06:12.050\nto this instance that I just spun up.\n\n121\n00:06:12.050 --> 00:06:17.780\nAnd if you look at that\nname ec2-54-175-64-27.\n\n122\n00:06:17.780 --> 00:06:23.259\nIt matches the public IP, 54.175.64.27.\n\n123\n00:06:23.259 --> 00:06:25.840\nSo that's where that name is\nbeing calculated from, and\n\n124\n00:06:25.840 --> 00:06:28.440\nthis instance is now up and\nrunning using that public IP.\n\n125\n00:06:28.440 --> 00:06:32.090\nNow when it comes to public IP's I\nreally don't care what IP it has,\n\n126\n00:06:32.090 --> 00:06:34.880\nit just, it needs a public one and\nthere we go.\n\n127\n00:06:34.880 --> 00:06:37.420\nBut the private one,\nI may care about that.\n\n128\n00:06:37.420 --> 00:06:38.980\nI may want to change that and\nmanipulate it.\n\n129\n00:06:38.980 --> 00:06:39.710\nWe can adjust that.\n\n130\n00:06:39.710 --> 00:06:43.340\nWe're gonna talk more about VPC's and\nnetworking in another episode.\n\n131\n00:06:43.340 --> 00:06:46.040\nBut those are things that\nwe might want to change.\n\n132\n00:06:46.040 --> 00:06:47.650\nIf you want to modify these things,\nyou can.\n\n133\n00:06:47.650 --> 00:06:48.460\nYou can change them.\n\n134\n00:06:48.460 --> 00:06:50.840\nA lot of them you can change\nright here from this screen.\n\n135\n00:06:50.840 --> 00:06:56.290\nThe other thing is this\npublic IP is not a static IP.\n\n136\n00:06:56.290 --> 00:07:02.620\nIn other words I've got this IP right now\nbut if I shut this machine down, right?\n\n137\n00:07:02.620 --> 00:07:07.342\nLater on I might power it back up and\nit might get a different address.\n\n138\n00:07:07.342 --> 00:07:10.790\nI've got a lease on this address but\nif I'm not using it for\n\n139\n00:07:10.790 --> 00:07:12.670\na little while somebody\nelse could take it and\n\n140\n00:07:12.670 --> 00:07:15.960\nif I'm providing a web service,\nif this is behind a load balancer,\n\n141\n00:07:15.960 --> 00:07:17.990\nI don't care about that, right,\ncuz everybody goes to the load balancer.\n\n142\n00:07:17.990 --> 00:07:19.120\nThey don't come to here.\n\n143\n00:07:19.120 --> 00:07:20.510\nBut if there's no load balancer,\n\n144\n00:07:20.510 --> 00:07:24.700\nif this machine is directly exposed to\nthe internet, it's gonna need a static IP.\n\n145\n00:07:24.700 --> 00:07:25.910\nSo I'll want to assign that.\n\n146\n00:07:25.910 --> 00:07:29.060\nNow on a private IP, you can just\nassign away, it's no big deal.\n\n147\n00:07:29.060 --> 00:07:33.930\nBut on a public IP,\nwe've gotta get one from Amazon.\n\n148\n00:07:33.930 --> 00:07:36.590\nAnd so over here on the left\nside as we look down the list,\n\n149\n00:07:36.590 --> 00:07:39.590\nyou'll find elastic IP's.\n\n150\n00:07:39.590 --> 00:07:43.650\nElastic IP's are static public IP's.\n\n151\n00:07:43.650 --> 00:07:47.290\nThey're public IP's that will\nbe tied to your account.\n\n152\n00:07:47.290 --> 00:07:50.800\nWhether the machine is on or\nthe machine is off, you'll have this IP.\n\n153\n00:07:50.800 --> 00:07:53.136\nThey charge a very small amount.\n\n154\n00:07:53.136 --> 00:07:57.300\nIn fact they know that every virtual\nmachine is going to have a public IP\n\n155\n00:07:57.300 --> 00:07:57.875\nanyway.\n\n156\n00:07:57.875 --> 00:08:01.489\nSo as long as your virtual machine is\nrunning, These static IPs don't cost you\n\n157\n00:08:01.489 --> 00:08:05.550\na dime, the only time they cost you\nmoney is if you shut your machine down.\n\n158\n00:08:05.550 --> 00:08:09.860\nNormally if you shut your machine down,\nthey could give your IP to someone else.\n\n159\n00:08:09.860 --> 00:08:12.000\nBut if you have a static,\nthey can't give it to someone else,\n\n160\n00:08:12.000 --> 00:08:14.425\nyou're holding onto not under that IP and\nso they charge you.\n\n161\n00:08:14.425 --> 00:08:17.345\nAnd when I say they charge you,\nit's like a quarter a month.\n\n162\n00:08:17.345 --> 00:08:21.063\nSo it's a very, very small amount of\nmoney, so it's really negligible.\n\n163\n00:08:21.063 --> 00:08:24.744\nSo I typically issue these elastic IPs\nto most of the stuff that I work with,\n\n164\n00:08:24.744 --> 00:08:28.661\nunless it's behind a load balancer,\nbecause them I don't care what the IP is,\n\n165\n00:08:28.661 --> 00:08:30.665\nthere's no point in worrying about it.\n\n166\n00:08:30.665 --> 00:08:32.205\nI want to be able to\nquickly deploy machines,\n\n167\n00:08:32.205 --> 00:08:35.300\nso your used case scenario is going\nto determine whether you need this.\n\n168\n00:08:35.300 --> 00:08:39.400\nBut if I wanna do an elastic IP I\ncan allocate a new address and\n\n169\n00:08:39.400 --> 00:08:43.090\nit's going to reach out and\ngrab an address from Amazon's pool.\n\n170\n00:08:43.090 --> 00:08:45.950\nI didn't get to pick,\nit just gave me one, and so\n\n171\n00:08:45.950 --> 00:08:49.850\nit gave me this one,\n34.206.114.109, I now have it.\n\n172\n00:08:49.850 --> 00:08:52.070\nIt's tied to my account,\nit's tied to my IP,\n\n173\n00:08:52.070 --> 00:08:55.410\nno one else can have it as long\nas it's tied to my account.\n\n174\n00:08:55.410 --> 00:08:57.350\nNow I'm not actually using it.\n\n175\n00:08:57.350 --> 00:09:01.450\nI need to take it and attach it to that\ninstance that I just brought up so\n\n176\n00:09:01.450 --> 00:09:02.870\nI can actually use it, right?\n\n177\n00:09:02.870 --> 00:09:06.610\nAnd so I can come in here and\nchoose to associate the address and\n\n178\n00:09:06.610 --> 00:09:08.840\nI can tie it to an instance.\n\n179\n00:09:08.840 --> 00:09:10.880\nYour instance may have more\nthan one network interface, so\n\n180\n00:09:10.880 --> 00:09:12.760\nI might have to choose by that,\nbut mine only has one interface.\n\n181\n00:09:12.760 --> 00:09:16.770\nSo I can come in here and I can pick\nthat instance that I just spun up and\n\n182\n00:09:16.770 --> 00:09:18.300\nwe can attach it, all right?\n\n183\n00:09:18.300 --> 00:09:19.670\nYou can also map to a private IP.\n\n184\n00:09:19.670 --> 00:09:23.070\nIf you have more than one IP tied to the\nsame interface you can do things there,\n\n185\n00:09:23.070 --> 00:09:25.650\ntoo, but\nin my case I'm attached to that instance.\n\n186\n00:09:26.880 --> 00:09:32.160\nAnd there we go, now that's going to\nreplace the dynamic address that I got\n\n187\n00:09:32.160 --> 00:09:33.810\nwith this new one, the static.\n\n188\n00:09:33.810 --> 00:09:35.570\nNotice, this one starts with a 34.\n\n189\n00:09:35.570 --> 00:09:37.467\nI think the other one started with 54,\ndidn't it?\n\n190\n00:09:37.467 --> 00:09:41.178\n&gt;&gt; Yeah, I think it did.\n&gt;&gt; So, if I jump back over to my instances\n\n191\n00:09:41.178 --> 00:09:44.521\nright here, I can find my instance and\n\n192\n00:09:44.521 --> 00:09:49.550\nwhen I look down here,\nthat IP changed, it's now 34.\n\n193\n00:09:49.550 --> 00:09:51.830\nNotice how that DNS name changed too.\n\n194\n00:09:51.830 --> 00:09:53.340\nThat's why I wanna point this out.\n\n195\n00:09:53.340 --> 00:09:56.310\nThis is something we wanna\nconfigure in the beginning.\n\n196\n00:09:56.310 --> 00:09:59.290\nBecause if I had a DNS C name\nrecord that are pointing to this,\n\n197\n00:09:59.290 --> 00:10:01.780\nthe name just changed,\nit's gonna break things.\n\n198\n00:10:01.780 --> 00:10:04.740\nSo you want to do this as\npart of initial deployment,\n\n199\n00:10:04.740 --> 00:10:08.100\nbut I didn't have to log in\nthe operating system to do this right?\n\n200\n00:10:08.100 --> 00:10:11.310\nI didn't have to log in to the Windows or\nLinux, I didn't right from here.\n\n201\n00:10:11.310 --> 00:10:14.130\nThat's the nice part of the initial\nconfiguration is we can do it\n\n202\n00:10:14.130 --> 00:10:17.250\neasily from here without having\nto worry about the guest.\n\n203\n00:10:19.580 --> 00:10:22.773\nAll right, the other thing is,\nonce we get the IPs kinda situated,\n\n204\n00:10:22.773 --> 00:10:25.930\nwe need to be able to manage\nthe operating systems inside, right?\n\n205\n00:10:25.930 --> 00:10:28.910\nI do need to login to the operating\nsystems to install my software and\n\n206\n00:10:28.910 --> 00:10:30.390\nget things configured.\n\n207\n00:10:30.390 --> 00:10:32.310\nAnd things get a little weird here,\n\n208\n00:10:32.310 --> 00:10:36.350\nthere is a different way of managing\nWindows from managing Linux, right?\n\n209\n00:10:36.350 --> 00:10:39.040\nNow this instance that I deployed\nhere is a Linux instance, right?\n\n210\n00:10:39.040 --> 00:10:40.453\nI chose, what did I choose?\n\n211\n00:10:40.453 --> 00:10:42.965\nI choose Amazon AMI yup,\nand if you are like me and\n\n212\n00:10:42.965 --> 00:10:47.130\nyou're forgetful it tells you right\nhere at the bottom which AMI you used.\n\n213\n00:10:47.130 --> 00:10:48.740\nSo I can see I used the Amazon Linux AMI,\nright?\n\n214\n00:10:48.740 --> 00:10:51.940\nI'm wanna throw up another\ninstance real quick.\n\n215\n00:10:51.940 --> 00:10:53.220\nAnd I'm wanna pick Windows this time.\n\n216\n00:10:53.220 --> 00:10:58.860\nAnd so I'll do that and\nwe'll do another M for a large.\n\n217\n00:10:58.860 --> 00:11:02.770\nAnd I'm just gonna jump straight to\ndeploying it and we'll launch that.\n\n218\n00:11:02.770 --> 00:11:04.920\nI'm gonna use an existing\nkey pair this time.\n\n219\n00:11:04.920 --> 00:11:08.200\nI'll pick that same dpezet-test key.\n\n220\n00:11:08.200 --> 00:11:11.035\nNow I have to acknowledge that\nI actually have that key.\n\n221\n00:11:11.035 --> 00:11:14.450\nCuz if I've lost it, they're about\nto resend it to this machine, and\n\n222\n00:11:14.450 --> 00:11:15.910\nif I don't have it,\nI've got no way to get it.\n\n223\n00:11:15.910 --> 00:11:18.360\nSo I could effectively be deploying\na machine that I'm locked out of.\n\n224\n00:11:18.360 --> 00:11:20.350\nBut we'll go ahead and\nthrow that one out there.\n\n225\n00:11:21.440 --> 00:11:23.450\nAnd now I'll have that second instance.\n\n226\n00:11:23.450 --> 00:11:27.400\nNow when you deploy a Linux instance,\nyou SSH into it,\n\n227\n00:11:27.400 --> 00:11:29.370\nyou create a secure shell connection.\n\n228\n00:11:29.370 --> 00:11:31.180\nWhen you create a Windows instance though,\n\n229\n00:11:31.180 --> 00:11:34.440\nyou use Remote Desktop Protocol\nto connect it, RDP.\n\n230\n00:11:34.440 --> 00:11:37.820\nNow, SSH supports key authentication.\n\n231\n00:11:37.820 --> 00:11:43.660\nI can use that key that I just created\nto actually log into the Linux instance.\n\n232\n00:11:43.660 --> 00:11:48.220\nBut Windows doesn't, Windows does\nnot support key authentication.\n\n233\n00:11:48.220 --> 00:11:51.050\nThey do key verification to\ncreate a secure tunnel, but\n\n234\n00:11:51.050 --> 00:11:52.840\nyou still have to have a username and\na password to connect.\n\n235\n00:11:52.840 --> 00:11:54.600\nSo it's a different\ntype of authentication.\n\n236\n00:11:54.600 --> 00:11:57.620\nSo Amazon in the background right now\nis setting a default username and\n\n237\n00:11:57.620 --> 00:12:00.050\npassword to access that system.\n\n238\n00:12:00.050 --> 00:12:02.110\nI need to get that username and password.\n\n239\n00:12:02.110 --> 00:12:06.160\nWell, I'll use my key to get\nthe username and password.\n\n240\n00:12:06.160 --> 00:12:07.860\nSo it's a little bit different for\nWindows versus Linux.\n\n241\n00:12:07.860 --> 00:12:10.580\nSo always be aware that it is part\nof your initial configuration,\n\n242\n00:12:10.580 --> 00:12:12.780\nwhat we can do a lot of\nthis stuff via the console,\n\n243\n00:12:12.780 --> 00:12:16.670\nit is gonna be different based on the\nneeds of the OS at some point or another.\n\n244\n00:12:16.670 --> 00:12:20.180\nThere is a divergence that\nhappens sooner or later.\n\n245\n00:12:20.180 --> 00:12:23.940\nThe Linux side is easier though on this\none if I wanna log in to that Linux box.\n\n246\n00:12:23.940 --> 00:12:29.150\nI can go up here and just hit connect and\nI can use my own SSH client if\n\n247\n00:12:29.150 --> 00:12:33.840\nI've got one, or I can use the Java based\nSSH client if you've got Java installed.\n\n248\n00:12:33.840 --> 00:12:37.380\nI don't have Java installed on my machine,\nso I'll have to use my own SSH client.\n\n249\n00:12:37.380 --> 00:12:42.551\nAnd it's telling me here that I can use\nthe key to connect to that address.\n\n250\n00:12:42.551 --> 00:12:44.454\nAnd I can reach in and\nstart to work to work with it.\n\n251\n00:12:44.454 --> 00:12:49.019\nNow my key ended up getting thrown\ninto my downloads folder, so\n\n252\n00:12:49.019 --> 00:12:54.460\nlet me get into my downloads folder\nreal quick and I'm gonna find that key.\n\n253\n00:12:54.460 --> 00:12:56.000\nSo there's dpezet-test.\n\n254\n00:12:56.000 --> 00:12:58.810\nNow they do require a certain\nlevel of security on that key.\n\n255\n00:12:58.810 --> 00:13:00.980\nSo that's what it's warning\nme about back here,\n\n256\n00:13:00.980 --> 00:13:04.870\ntelling me I need to change\nthe permissions on that key.\n\n257\n00:13:04.870 --> 00:13:08.450\nAnd what we're basically doing is making\nit where only I have access to that\n\n258\n00:13:08.450 --> 00:13:10.610\nkey and that it can't be modified.\n\n259\n00:13:10.610 --> 00:13:11.640\nSo it's kind of read only.\n\n260\n00:13:11.640 --> 00:13:15.880\nNow I can just change the permissions\nback again, it's no big deal, right?\n\n261\n00:13:15.880 --> 00:13:19.960\nBut they just wanna make sure that you're\nat least using some level of precaution\n\n262\n00:13:19.960 --> 00:13:20.690\nas you connect up.\n\n263\n00:13:20.690 --> 00:13:23.750\nAnd then they give you the syntax\nright here for SSHing in and\n\n264\n00:13:23.750 --> 00:13:25.810\nproviding the key to connect to it.\n\n265\n00:13:25.810 --> 00:13:28.940\nNow I'm gonna use the key to authenticate,\nbut there is a user account.\n\n266\n00:13:28.940 --> 00:13:33.710\nOn most Linux instances they do\nec2-user as the main account and\n\n267\n00:13:33.710 --> 00:13:35.550\nyou can then create all\nthe other accounts you want.\n\n268\n00:13:35.550 --> 00:13:39.760\nOne of various is Ubuntu, if you deploy\ninstances they create user account called\n\n269\n00:13:39.760 --> 00:13:42.060\nUbuntu and\nagain you can create more accounts.\n\n270\n00:13:42.060 --> 00:13:45.860\nYou can even disable this one if\nyou want usually just ignore it.\n\n271\n00:13:45.860 --> 00:13:47.150\nSo I'm gonna go ahead and\n\n272\n00:13:47.150 --> 00:13:52.610\npunch that in and I've to verify that key\ncuz is the first time I've connected.\n\n273\n00:13:52.610 --> 00:13:56.120\nAnd once it reaches out,\nI'll get logged in and\n\n274\n00:13:56.120 --> 00:13:58.450\nit can take a little bit\nof time the first time.\n\n275\n00:13:59.540 --> 00:14:02.080\nI didn't check to make sure my\ninstance is done but there we go, yup.\n\n276\n00:14:02.080 --> 00:14:05.260\nI'm in and\nnow I'm connected on that machine.\n\n277\n00:14:05.260 --> 00:14:09.070\nAnd so, I'm logged in, I'm able to\nmanage it, do all the stuff that I want.\n\n278\n00:14:09.070 --> 00:14:11.660\nStep one, do your updates, right?\n\n279\n00:14:11.660 --> 00:14:14.120\nJust because I deployed this doesn't\nmean it's completely updated.\n\n280\n00:14:14.120 --> 00:14:16.990\nAnd remember the AMI had a date\non it of September 2016.\n\n281\n00:14:16.990 --> 00:14:20.840\nThat's five months ago,\na lot's happened in five months.\n\n282\n00:14:20.840 --> 00:14:25.300\nI bet if I do a young update there's\nprobably a few updates available.\n\n283\n00:14:25.300 --> 00:14:27.900\nAnd there are, right, so there's\na couple of updates that are waiting.\n\n284\n00:14:27.900 --> 00:14:29.220\nNot a ton,\n\n285\n00:14:29.220 --> 00:14:32.480\nwhich is how I know that they've\nbeen doing updates since September.\n\n286\n00:14:32.480 --> 00:14:36.110\nEven though the image said September,\nit's been updated since then.\n\n287\n00:14:36.110 --> 00:14:39.060\nBut there's a handful of updates,\neven on this freshly deployed system.\n\n288\n00:14:39.060 --> 00:14:41.390\nSo just like a physical system\nwhere you'd run updates,\n\n289\n00:14:41.390 --> 00:14:43.140\nI need to do it here with my instances.\n\n290\n00:14:44.500 --> 00:14:47.770\nAll right, well that's running,\nlet me go back to my main screen here and\n\n291\n00:14:47.770 --> 00:14:49.770\nI'm gonna take that Windows instance.\n\n292\n00:14:49.770 --> 00:14:53.690\nNow on the Window side,\nif I hit connect, it doesn't use SSH,\n\n293\n00:14:53.690 --> 00:14:58.270\nit uses RDP and so it's offering\nme an RDP file letting me connect.\n\n294\n00:14:58.270 --> 00:15:01.320\nBut the main thing I care about here,\nis the password.\n\n295\n00:15:01.320 --> 00:15:04.300\nI need the administrator password\nto be able to login to Windows.\n\n296\n00:15:04.300 --> 00:15:08.210\nAnd so if I hit get password,\npassword's not available yet.\n\n297\n00:15:08.210 --> 00:15:09.950\nThe Windows machine is still booting up.\n\n298\n00:15:09.950 --> 00:15:14.190\nOnly once the machine is booted up will it\nactually be able to create that password.\n\n299\n00:15:14.190 --> 00:15:17.360\nAnd as soon as it's done,\nI'll be able to provide my key and\n\n300\n00:15:17.360 --> 00:15:20.080\nit'll show me what the pass word is,\nit's randomly generated.\n\n301\n00:15:20.080 --> 00:15:22.810\nSo those are all some of the things\nthat we can do when we initially\n\n302\n00:15:22.810 --> 00:15:24.440\ndeploy a machine.\n\n303\n00:15:24.440 --> 00:15:27.110\nAnd start to get it put out and\nready to go on our system.\n\n304\n00:15:27.110 --> 00:15:29.450\nThese are all just kind of\npart of that initial process.\n\n305\n00:15:29.450 --> 00:15:32.800\n&gt;&gt; So Don there was a couple of those\npasswords just kind of quickly skipped\n\n306\n00:15:32.800 --> 00:15:37.460\nover we get some warnings about security,\nyou just SSHed into your Linux box.\n\n307\n00:15:37.460 --> 00:15:41.940\nIt feels like I should be hardening that\nor tightening that down a little bit.\n\n308\n00:15:41.940 --> 00:15:45.550\nWhat are some of those,\nwhat are some options available to us?\n\n309\n00:15:45.550 --> 00:15:48.730\n&gt;&gt; All right, well we can always\nharden the operating systems.\n\n310\n00:15:48.730 --> 00:15:51.695\nSo like, Linux box I can do IP tables or\n\n311\n00:15:51.695 --> 00:15:56.541\nfail to ban, I can do firewall d and\nstart to restrict things.\n\n312\n00:15:56.541 --> 00:16:00.684\nIn Windows I can use the Windows Firewall\nBut isn't it nice to manage things\n\n313\n00:16:00.684 --> 00:16:04.402\njust right in EC2 and have it where\nyou manage things the same way?\n\n314\n00:16:04.402 --> 00:16:05.280\nWell, and you can.\n\n315\n00:16:05.280 --> 00:16:08.145\nSo we can use the virtual\nfirewall that's built into EC2.\n\n316\n00:16:08.145 --> 00:16:10.139\nWe have what are called security groups.\n\n317\n00:16:10.139 --> 00:16:13.602\nIf you paid attention to every single\npage in the Deployment Wizard,\n\n318\n00:16:13.602 --> 00:16:15.980\none of the pages asked\nabout a security group.\n\n319\n00:16:15.980 --> 00:16:18.520\nWell I just hit review and\nlaunched, so I didn't see it.\n\n320\n00:16:18.520 --> 00:16:21.180\nWell, the security group defines\nwhat connections are allowed.\n\n321\n00:16:21.180 --> 00:16:25.540\nIf I go back into my console and\nI take my Linux instance,\n\n322\n00:16:25.540 --> 00:16:27.770\nthis guy here at the bottom.\n\n323\n00:16:27.770 --> 00:16:28.730\nThen I can go down here.\n\n324\n00:16:28.730 --> 00:16:31.320\nAnd it'll actually tell me which\nsecurity group I'm a part of.\n\n325\n00:16:31.320 --> 00:16:34.770\nThis one is part of launch-wizard-1,\nall right?\n\n326\n00:16:34.770 --> 00:16:38.640\nIf I take a look at launch-wizard-1,\nhere's that security group.\n\n327\n00:16:38.640 --> 00:16:42.987\nAnd down here, at the bottom of the\nscreen, I can see what is allowed in and\n\n328\n00:16:42.987 --> 00:16:44.265\nwhat is allowed out.\n\n329\n00:16:44.265 --> 00:16:47.200\nNow, there's actually two different\ntypes of security groups.\n\n330\n00:16:47.200 --> 00:16:50.490\nIf this is your first time working with\nAWS, you're only gonna see one type,\n\n331\n00:16:50.490 --> 00:16:52.700\nthe new security groups, which work great.\n\n332\n00:16:52.700 --> 00:16:58.010\nWe have Amazon VPCs, these private\ncontainers that are created inside of,\n\n333\n00:17:00.878 --> 00:17:03.254\nWell, the network in EC2.\n\n334\n00:17:03.254 --> 00:17:06.282\nThey're not really containers,\nthey're more like networks, right?\n\n335\n00:17:06.282 --> 00:17:10.364\nThey're switches say where I might have\n50 virtual machines in one VPC and\n\n336\n00:17:10.364 --> 00:17:13.060\nanother 50 virtual machines\nin a separate VPC.\n\n337\n00:17:13.060 --> 00:17:16.580\nAnd they can't talk to each other unless\nI allow the traffic to pass through.\n\n338\n00:17:16.580 --> 00:17:20.430\nWell these security groups\nare the rules that allow traffic to\n\n339\n00:17:20.430 --> 00:17:23.860\npass between VPCs and each other or\nVPCs and the internet.\n\n340\n00:17:23.860 --> 00:17:26.230\nSo everything is done\nwith a VPC these days.\n\n341\n00:17:26.230 --> 00:17:29.357\nBut in the olden days, right,\nback when I was young,\n\n342\n00:17:29.357 --> 00:17:33.830\nwhat we did is we deployed what\nwere called EC2 Classic instances.\n\n343\n00:17:33.830 --> 00:17:36.340\nAnd they got directly\nexposed to the internet.\n\n344\n00:17:36.340 --> 00:17:38.500\nAnd so you would actually come in and\n\n345\n00:17:38.500 --> 00:17:43.560\nhave to create these security groups,\nthat directly affected those instances.\n\n346\n00:17:43.560 --> 00:17:45.993\nAnd so they were far more\nlimited than what we have today.\n\n347\n00:17:45.993 --> 00:17:49.860\nFor example, they only did inbound rules,\nthey didn't do inbound and outbound.\n\n348\n00:17:49.860 --> 00:17:52.250\nBut now I can do inbound and\noutbound under the new stuff,\n\n349\n00:17:52.250 --> 00:17:54.750\nso that's why I see both of those tabs.\n\n350\n00:17:54.750 --> 00:17:58.390\nBut notice on inbound, it's already got\none rule by default that's showing here,\n\n351\n00:17:58.390 --> 00:18:02.000\nSSH, TCP, port 22, from a source.\n\n352\n00:18:02.000 --> 00:18:05.520\nAnd that source, 0.0.0.0/0,\nthat means everywhere.\n\n353\n00:18:05.520 --> 00:18:09.813\nAnyone in the entire world If\nyou're watching this show live,\n\n354\n00:18:09.813 --> 00:18:11.841\nyou can fire up an SSH client.\n\n355\n00:18:11.841 --> 00:18:13.999\nYou can point it at this IP or\nDNS name, and\n\n356\n00:18:13.999 --> 00:18:17.070\nyou'll have the opportunity\nto authenticate.\n\n357\n00:18:17.070 --> 00:18:19.710\nNow you don't have my key, or\nat least I hope you don't.\n\n358\n00:18:19.710 --> 00:18:21.570\nOtherwise you'd be able to get in and\nyou'd have access.\n\n359\n00:18:21.570 --> 00:18:26.630\nSo that's what Justin was getting at,\nis that we need to secure that.\n\n360\n00:18:26.630 --> 00:18:27.759\nAnd, I can do it right from here.\n\n361\n00:18:27.759 --> 00:18:31.462\nWe can just edit that security group,\nand come in and define like, hey,\n\n362\n00:18:31.462 --> 00:18:33.980\nI don't want SSH to work from everywhere.\n\n363\n00:18:33.980 --> 00:18:37.160\nI want SSH to work from my IP.\n\n364\n00:18:37.160 --> 00:18:39.890\nAnd it even figures out what my IP is and\nassigns it.\n\n365\n00:18:39.890 --> 00:18:45.310\nOr if I have my entire building, I might\nwanna come in and add SSH, TCP, port 22.\n\n366\n00:18:45.310 --> 00:18:49.619\nAnd I might wanna specify a network,\n\n367\n00:18:49.619 --> 00:18:54.901\nlike whatever my whole\noffice happens to be.\n\n368\n00:18:54.901 --> 00:18:57.762\nWhich I can't quite remember\nexactly what our network is.\n\n369\n00:18:57.762 --> 00:19:00.390\nI'm gonna say it's something like that.\n\n370\n00:19:00.390 --> 00:19:01.990\nSo I can define our whole building.\n\n371\n00:19:01.990 --> 00:19:05.600\nSo anybody here in the building will\nbe able to SSH into this system.\n\n372\n00:19:05.600 --> 00:19:07.320\nOr I can put other ranges.\n\n373\n00:19:07.320 --> 00:19:09.530\nIf this is gonna be a web server,\nI can say, well,\n\n374\n00:19:09.530 --> 00:19:14.840\nI want the whole world to be able to\nuse HTTP to get to my system, right?\n\n375\n00:19:14.840 --> 00:19:17.850\nFrom anywhere,\nI want them to be able to connect.\n\n376\n00:19:17.850 --> 00:19:21.260\nSo we start to build these rules like\nwe would any other firewall, right,\n\n377\n00:19:21.260 --> 00:19:23.870\ndefining it, and securing that access,\nand getting it put in place.\n\n378\n00:19:23.870 --> 00:19:26.810\nAnd the nice part here is,\nonce I get a security group created,\n\n379\n00:19:26.810 --> 00:19:29.230\nI can have more than one machine\nuse the same security group.\n\n380\n00:19:29.230 --> 00:19:31.775\nI can move that Windows\nmachine into this one.\n\n381\n00:19:31.775 --> 00:19:33.593\nThat'll cause a problem cuz of RDP.\n\n382\n00:19:33.593 --> 00:19:36.650\nIt needs TCP port 3389 open.\n\n383\n00:19:36.650 --> 00:19:39.048\nBut you can build these security groups,\nand\n\n384\n00:19:39.048 --> 00:19:41.835\nhave them kind of customized\nbased on what you need.\n\n385\n00:19:41.835 --> 00:19:44.570\n&gt;&gt; So, Don, we have a couple\nof instances up and running.\n\n386\n00:19:44.570 --> 00:19:49.030\nWe've been managing these point-and-click\nthrough the GUI interface on the web.\n\n387\n00:19:49.030 --> 00:19:53.240\nBut I know on premises, sometimes when we\nhad to set up a lot of machines and manage\n\n388\n00:19:53.240 --> 00:19:58.730\nupdates and all of that part of managing\nthose machines, we would use tools.\n\n389\n00:19:58.730 --> 00:20:02.440\nAre there tools to help manage\nother than the point-and-click?\n\n390\n00:20:02.440 --> 00:20:04.220\nOr is that what we have?\n\n391\n00:20:04.220 --> 00:20:07.120\n&gt;&gt; Absolutely, no, yeah, there's\na couple of things that you can do.\n\n392\n00:20:07.120 --> 00:20:08.110\nThere's bootstrapping.\n\n393\n00:20:08.110 --> 00:20:11.750\nBootstrapping is where you spin up\nan AMI and you trigger a script.\n\n394\n00:20:11.750 --> 00:20:14.720\nAnd so in the Launch Wizard you\ncan actually define a script that\n\n395\n00:20:14.720 --> 00:20:15.720\ngets launched.\n\n396\n00:20:15.720 --> 00:20:18.330\nOn Windows it would be a PowerShell or\na batched script.\n\n397\n00:20:18.330 --> 00:20:21.310\nOn Linux it's a bash\nscript that can be called.\n\n398\n00:20:21.310 --> 00:20:24.090\nAnd basically you can have it where\nthe virtual machine fires up,\n\n399\n00:20:24.090 --> 00:20:25.690\nthe instance launches.\n\n400\n00:20:25.690 --> 00:20:27.840\nAnd then it starts doing\nwhat the script says.\n\n401\n00:20:27.840 --> 00:20:33.710\nAnd the script might be just as simple\nas saying, install the Puppet client or\n\n402\n00:20:33.710 --> 00:20:37.160\ninstall the Chef client so that we can\nthen reach out to essentially manage\n\n403\n00:20:37.160 --> 00:20:41.780\nConfiguration Manager Or like System\nCenter Configuration Manager client.\n\n404\n00:20:41.780 --> 00:20:43.134\nOr the script might be really complex.\n\n405\n00:20:43.134 --> 00:20:46.940\nAnd the script itself might assign\na host name, an IP address.\n\n406\n00:20:46.940 --> 00:20:48.773\nAnd say, hey,\nyou're gonna be a web server,\n\n407\n00:20:48.773 --> 00:20:51.031\nso I'm gonna grab a copy of\nthis web page and copy it over.\n\n408\n00:20:51.031 --> 00:20:54.650\nAnd we're gonna install Apache,\nthe latest version with all the updates.\n\n409\n00:20:54.650 --> 00:20:57.440\nAnd then bring you up, and\nnow you're a great web server, right?\n\n410\n00:20:57.440 --> 00:21:00.340\nSolutions like that make it where\nwe can do one-click deployments.\n\n411\n00:21:00.340 --> 00:21:04.050\nYou can just quickly deploy an instance,\nand it automatically configures itself and\n\n412\n00:21:04.050 --> 00:21:04.820\ngets up and running.\n\n413\n00:21:04.820 --> 00:21:07.600\nThat's really important when you're\ndoing things like auto scaling or\n\n414\n00:21:07.600 --> 00:21:10.130\nspinning up hundreds, or\neven thousands of servers.\n\n415\n00:21:10.130 --> 00:21:12.623\nYou can't do what I'm doing here and\njust go through and\n\n416\n00:21:12.623 --> 00:21:14.225\nedit this stuff 1,000 times.\n\n417\n00:21:14.225 --> 00:21:16.180\nIt would take you forever, right?\n\n418\n00:21:16.180 --> 00:21:17.040\nSo we need to be able to automate that.\n\n419\n00:21:17.040 --> 00:21:19.030\nBootstrapping is one way to do it.\n\n420\n00:21:19.030 --> 00:21:20.650\nYou can build custom AMIs.\n\n421\n00:21:20.650 --> 00:21:23.406\nYou can build your own AMI that's already\ngot all the stuff built into it and\n\n422\n00:21:23.406 --> 00:21:24.120\nit's ready to go.\n\n423\n00:21:24.120 --> 00:21:27.670\nSo now you just spin up the AMI and\nit's ready to work, right?\n\n424\n00:21:27.670 --> 00:21:30.260\nSo that's another solution\nthat's out there.\n\n425\n00:21:30.260 --> 00:21:33.090\nYou can do virtual machine import and\nexport.\n\n426\n00:21:33.090 --> 00:21:36.920\nI might already have virtual machines\nbuilt up in VMware of HyperVM,\n\n427\n00:21:36.920 --> 00:21:39.220\nmy own on premises solution.\n\n428\n00:21:39.220 --> 00:21:43.280\nI can take that virtual machine and\nimport it into AWS, into EC2,\n\n429\n00:21:43.280 --> 00:21:45.130\nand get it up and running.\n\n430\n00:21:45.130 --> 00:21:48.000\nSo that, again,\nminimizes that configuration time.\n\n431\n00:21:48.000 --> 00:21:50.700\nSo there's a number of techniques\nlike that that we can follow\n\n432\n00:21:50.700 --> 00:21:54.950\nthat help to really shrink\ndown that deployment window.\n\n433\n00:21:54.950 --> 00:21:57.414\nAll right, now once we get\na virtual machine deployed,\n\n434\n00:21:57.414 --> 00:21:59.050\nwe kind of start shifting what we do.\n\n435\n00:21:59.050 --> 00:22:02.540\nThere's one more thing I haven't talked\nabout on the configuration side.\n\n436\n00:22:02.540 --> 00:22:04.416\nThere's something that we don't\nnormally see on on premises stuff.\n\n437\n00:22:04.416 --> 00:22:08.790\nAnd that's instance metadata and tagging.\n\n438\n00:22:08.790 --> 00:22:13.130\nSo every time I roll out an instance,\nlet me get back up to my instances here.\n\n439\n00:22:13.130 --> 00:22:15.650\nEvery instance has\nmetadata attached to it.\n\n440\n00:22:15.650 --> 00:22:18.500\nAll this stuff down here at the bottom\nof the screen that I was talking about\n\n441\n00:22:18.500 --> 00:22:20.400\nearlier, this is metadata, right?\n\n442\n00:22:20.400 --> 00:22:22.770\nI didn't put this here, Amazon did.\n\n443\n00:22:22.770 --> 00:22:25.866\nBut it's got what type of instance\nI've got, the instance state,\n\n444\n00:22:25.866 --> 00:22:27.778\nthe availability zone, the IP address.\n\n445\n00:22:27.778 --> 00:22:30.630\nThat's all metadata about the system.\n\n446\n00:22:30.630 --> 00:22:33.050\nBut you also have tags.\n\n447\n00:22:33.050 --> 00:22:37.860\nAnd technically, tags are metadata also,\nbut it's metadata that you can change.\n\n448\n00:22:37.860 --> 00:22:41.580\nI can come in and create my own\ntags that are key value pairs\n\n449\n00:22:41.580 --> 00:22:44.020\nthat help me to identify my instances.\n\n450\n00:22:44.020 --> 00:22:49.360\nAnd when I add in a new tag, I can use it\nfor all sorts of different things, right?\n\n451\n00:22:49.360 --> 00:22:52.558\nSo an example might be BillingCode.\n\n452\n00:22:52.558 --> 00:22:57.310\nIf I am working for a consultancy, and\nwe have a hundred different clients\n\n453\n00:22:57.310 --> 00:23:01.010\nevery instance I spin up,\nI need to know who to bill for it.\n\n454\n00:23:01.010 --> 00:23:04.468\nAnd so I might come in and\nsay this is BillingCode 1234.\n\n455\n00:23:04.468 --> 00:23:08.140\nAnd so I know account 1234 is\ngonna get billed for this one.\n\n456\n00:23:08.140 --> 00:23:14.440\nAnd then I might have other ones\nthat are simply like DeploymentRole.\n\n457\n00:23:14.440 --> 00:23:17.150\nAnd this might be WebServer, right?\n\n458\n00:23:17.150 --> 00:23:18.263\nSo I give it a name.\n\n459\n00:23:18.263 --> 00:23:22.660\nI'm making these up, right,\nthese are not hardcoded.\n\n460\n00:23:22.660 --> 00:23:26.310\nWe basically think about how we\nwould want to pull reporting.\n\n461\n00:23:26.310 --> 00:23:28.190\nThis is really all designed\nto support reporting.\n\n462\n00:23:28.190 --> 00:23:31.840\nSo at the end of the month I wanna find\nout how much to to bill client 1234.\n\n463\n00:23:31.840 --> 00:23:38.558\nSo I pull a report on all the expenses for\nresources tagged with BillingCode 1234.\n\n464\n00:23:38.558 --> 00:23:41.760\nOr I wanna find out how many web\nservers I'm running right now.\n\n465\n00:23:41.760 --> 00:23:45.710\nSo I pull up a report on all the instances\ntagged with the DeploymentRole of\n\n466\n00:23:45.710 --> 00:23:46.280\nWebServer.\n\n467\n00:23:46.280 --> 00:23:48.460\nOr I might have projects, right?\n\n468\n00:23:48.460 --> 00:23:51.132\nThis might be Project 4321.\n\n469\n00:23:51.132 --> 00:23:54.921\nAnd so I come in and I say, show me all\nthe resources attached to Project 4321.\n\n470\n00:23:54.921 --> 00:23:58.196\nAnd we can use that for billing,\nor management, or whatever.\n\n471\n00:23:58.196 --> 00:24:00.857\nThese tags are really powerful.\n\n472\n00:24:00.857 --> 00:24:04.551\nBut, you're limited to\nten tags per instance.\n\n473\n00:24:04.551 --> 00:24:09.880\nSo, you've gotta think of ten tags that\nare truly valuable to your report.\n\n474\n00:24:09.880 --> 00:24:12.930\nIf you need 11, you're out of luck, so\nsome of these we could probably combine,\n\n475\n00:24:12.930 --> 00:24:15.210\nlike BillingCode and Project,\nmaybe we could combine those.\n\n476\n00:24:15.210 --> 00:24:17.590\nOr DeploymentRole maybe I'll\nfind I'm not really using it.\n\n477\n00:24:17.590 --> 00:24:20.120\nSo, you've gotta be\nintelligent about that.\n\n478\n00:24:20.120 --> 00:24:24.570\nBut, when we start rolling out resources,\nand not just EC2 instances, but\n\n479\n00:24:24.570 --> 00:24:27.100\na lot of the other stuff\nthat we deploy in AWS also.\n\n480\n00:24:27.100 --> 00:24:30.966\nRemember that you've got tags, which is\njust customizable metadata you can use for\n\n481\n00:24:30.966 --> 00:24:32.170\nreporting and tracking.\n\n482\n00:24:32.170 --> 00:24:35.390\n&gt;&gt; So Don,\nwe've kind of got our instances set up.\n\n483\n00:24:35.390 --> 00:24:38.560\nWe figured out how to run\nthose deployment scripts.\n\n484\n00:24:38.560 --> 00:24:39.950\nEverything's good to go.\n\n485\n00:24:39.950 --> 00:24:41.393\nWe're scaling out, but\n\n486\n00:24:41.393 --> 00:24:45.595\non-premises typically when I messed\naround with servers a little bit.\n\n487\n00:24:45.595 --> 00:24:47.505\n&gt;&gt; [LAUGH]\n&gt;&gt; Something would go bad I would\n\n488\n00:24:47.505 --> 00:24:49.500\nhear like, an actual ringing, right?\n\n489\n00:24:49.500 --> 00:24:50.910\nThat was my monitor system.\n\n490\n00:24:50.910 --> 00:24:51.450\nBeep!\n\n491\n00:24:51.450 --> 00:24:54.204\nSo, how does that work in AWS?\n\n492\n00:24:54.204 --> 00:24:58.600\n&gt;&gt; All right, so remember, we're talking\nabout the lifecycle of an instance.\n\n493\n00:24:58.600 --> 00:25:00.730\nAnd it's easy to get wrapped\nup the deployment and\n\n494\n00:25:00.730 --> 00:25:02.580\nforget about the whole\nrest of the lifecycle.\n\n495\n00:25:02.580 --> 00:25:05.430\nSo, deploying it is one part but\nonce it's up and\n\n496\n00:25:05.430 --> 00:25:09.180\nrunning, we got to keep it running and\nsometimes that's challenging.\n\n497\n00:25:09.180 --> 00:25:12.800\nJust like Justing said, we don't\nget to go on Amazon's Data Center,\n\n498\n00:25:12.800 --> 00:25:14.120\nthey don't let you do that.\n\n499\n00:25:14.120 --> 00:25:17.284\nSo, how do we know\nthe health of this things?\n\n500\n00:25:17.284 --> 00:25:20.320\nWell fortunately, there is monitoring\nthat is enabled by default and\n\n501\n00:25:20.320 --> 00:25:21.199\nthe main reason is.\n\n502\n00:25:21.199 --> 00:25:23.522\nRemember, Amazon charges you money for\nthis stuff, right?\n\n503\n00:25:23.522 --> 00:25:25.914\nYou're being charged for\nthe CPU and the memory used.\n\n504\n00:25:25.914 --> 00:25:29.232\nSo, they've got to monitor that, and if\nthey're having to monitor it for billing,\n\n505\n00:25:29.232 --> 00:25:30.860\nwhy not share that information with you?\n\n506\n00:25:30.860 --> 00:25:32.640\nSo they do,\nthey share that information with you,\n\n507\n00:25:32.640 --> 00:25:34.700\nit's enabled by default\nthat's already running.\n\n508\n00:25:34.700 --> 00:25:37.300\nWhile I launch my instances,\nyou probably notice the instance state,\n\n509\n00:25:37.300 --> 00:25:40.280\nsee how mine have this little green\ncircles and they say running.\n\n510\n00:25:40.280 --> 00:25:43.120\nSo, I know if they're on or\noff and my status checks.\n\n511\n00:25:43.120 --> 00:25:44.980\nWhat about status checks?\n\n512\n00:25:44.980 --> 00:25:47.770\nNot only is it running but\nit's accepting connections.\n\n513\n00:25:47.770 --> 00:25:50.100\nBecause, maybe the operating\nsystem's still booting up and\n\n514\n00:25:50.100 --> 00:25:51.830\nit's not actually accepting connections.\n\n515\n00:25:51.830 --> 00:25:53.270\nSo, it's tracking that.\n\n516\n00:25:53.270 --> 00:25:55.610\nIt's also tracking things like CPU and\nmemory.\n\n517\n00:25:55.610 --> 00:25:58.520\nSo, when I pull up\nthe monitoring tab down here,\n\n518\n00:25:58.520 --> 00:26:01.500\nI can see how its CPU utilization is.\n\n519\n00:26:01.500 --> 00:26:05.100\nIt's disk reads and read operations,\ndisk writes and write operations.\n\n520\n00:26:05.100 --> 00:26:08.470\nThe network bandwidth, and\nall of that right here.\n\n521\n00:26:08.470 --> 00:26:10.280\nThis is all enabled by default.\n\n522\n00:26:11.310 --> 00:26:15.510\nBut, it's limited to what\nAmazon Bill's based on, right?\n\n523\n00:26:15.510 --> 00:26:17.320\nCuz, that's what they need it for.\n\n524\n00:26:17.320 --> 00:26:20.640\nIf you want something more advanced\nthat's where you need to leverage\n\n525\n00:26:20.640 --> 00:26:21.250\nanother service.\n\n526\n00:26:21.250 --> 00:26:24.080\nAnd we'll talk about\nCloudWatch in another episode.\n\n527\n00:26:24.080 --> 00:26:28.076\nThe Amazon CloudWatch service, what we're\nseeing here is actually like CloudWatch\n\n528\n00:26:28.076 --> 00:26:29.693\nlight, just a real basic subset.\n\n529\n00:26:29.693 --> 00:26:33.930\nBut, if you enable the full Cloudwatch\nservice, it doesn't cost much.\n\n530\n00:26:33.930 --> 00:26:36.240\nIt does cost money, but\nit's a couple of dollars a month.\n\n531\n00:26:36.240 --> 00:26:38.400\nIt's really an insignificant amount, but\n\n532\n00:26:38.400 --> 00:26:41.470\nit allows you to monitor all\nsorts of crazy information.\n\n533\n00:26:41.470 --> 00:26:43.110\nAnd you can pull a ton of data out it,\n\n534\n00:26:43.110 --> 00:26:46.000\nreally keep a good handle on how\nyour systems are functioning.\n\n535\n00:26:46.000 --> 00:26:48.009\nSo, that will be another\nthing to look into is.\n\n536\n00:26:48.009 --> 00:26:51.474\nHave I put some kinda monitoring\nsystem in place to be able to track\n\n537\n00:26:51.474 --> 00:26:53.290\nhow everything is doing?\n\n538\n00:26:53.290 --> 00:26:56.790\nAnd that's only a part of\nour ongoing operations,\n\n539\n00:26:56.790 --> 00:27:00.100\ncuz there's gonna be times\nwhere we need to change things.\n\n540\n00:27:00.100 --> 00:27:04.809\nSo, based on my monitoring results, I\nmight find that man I spun up an m4.large.\n\n541\n00:27:05.840 --> 00:27:07.271\nBoy, that system is getting hammered.\n\n542\n00:27:07.271 --> 00:27:12.010\nIt's at like 85% CPU all the time and\nit's running low on memory.\n\n543\n00:27:12.010 --> 00:27:14.980\nI think it's time to go to\nan M4 extra large, right?\n\n544\n00:27:14.980 --> 00:27:16.450\nSo, we need to adjust that.\n\n545\n00:27:16.450 --> 00:27:20.270\nAnd when you take a look at an instance\nlike this guy here, the M4 large.\n\n546\n00:27:20.270 --> 00:27:22.170\nI can go up to Actions.\n\n547\n00:27:22.170 --> 00:27:24.310\nAnd, my instant settings, and\n\n548\n00:27:24.310 --> 00:27:27.850\nyou'll see where we can change\ninformation about it right here.\n\n549\n00:27:27.850 --> 00:27:32.710\nYou'll see where we can shut\nthe system down, we can edit our tags,\n\n550\n00:27:32.710 --> 00:27:35.109\nwe can change our scaling group.\n\n551\n00:27:35.109 --> 00:27:38.440\nThere's all sorts of different things\nthat we can modify on that system.\n\n552\n00:27:38.440 --> 00:27:40.720\nTo change how it's behaving.\n\n553\n00:27:40.720 --> 00:27:44.940\nAnd one of those things is\nchanging the instance type.\n\n554\n00:27:44.940 --> 00:27:46.940\nNow.\nSee how my instance type is grayed out,\n\n555\n00:27:46.940 --> 00:27:48.260\nI can't click on it.\n\n556\n00:27:48.260 --> 00:27:50.780\nWell, that's because\nthe instance is up and running.\n\n557\n00:27:50.780 --> 00:27:54.110\nIf you had a physical server and\nit had two CPUs in it and\n\n558\n00:27:54.110 --> 00:27:56.870\nyou wanted to add two more, could you\njust do that while it was turned on?\n\n559\n00:27:57.870 --> 00:27:59.670\nNo, if you had it in memory, and\n\n560\n00:27:59.670 --> 00:28:02.280\nyou wanna add more memory, well,\nthere are some servers that'll do that.\n\n561\n00:28:02.280 --> 00:28:05.110\nNow, most of them, no, you gotta shut\nit down to add the memory, right?\n\n562\n00:28:05.110 --> 00:28:08.070\nMost of this is not a hardware limitation,\nbut a software limitation.\n\n563\n00:28:08.070 --> 00:28:10.840\nOperating systems aren't\nexpecting that hardware to change.\n\n564\n00:28:10.840 --> 00:28:13.230\nSo, the same thing holds\ntrue with an instance.\n\n565\n00:28:13.230 --> 00:28:15.230\nI need to shut that instance down.\n\n566\n00:28:15.230 --> 00:28:19.500\nAnd once I shut it down, I can change\nthe instance type and add more memory and\n\n567\n00:28:19.500 --> 00:28:21.330\nwhatever, and then I can power it back on.\n\n568\n00:28:21.330 --> 00:28:24.250\nIn a highly available environment,\nI would have a cluster, and\n\n569\n00:28:24.250 --> 00:28:26.150\nI can do one node at a time.\n\n570\n00:28:26.150 --> 00:28:28.500\nAnd that way my engines\nnever seen an outage.\n\n571\n00:28:28.500 --> 00:28:29.670\nOn a stand alone system like this,\n\n572\n00:28:29.670 --> 00:28:32.740\nthough it will create an outage\nwhile we change that instance type.\n\n573\n00:28:32.740 --> 00:28:37.230\nNow, quick word of warning here, when you\ngo to shut an instance down, if I go up to\n\n574\n00:28:37.230 --> 00:28:43.070\nAction and Instance State, I've got Stop,\nReboot, and Terminate, okay?\n\n575\n00:28:43.070 --> 00:28:45.410\nStop, that says I wanna shut it down.\n\n576\n00:28:45.410 --> 00:28:46.790\nThat's what I wanna do right now.\n\n577\n00:28:46.790 --> 00:28:48.610\nOkay, so I'm gonna go ahead and hit that.\n\n578\n00:28:48.610 --> 00:28:50.370\nSo, I'm gonna go ahead and stop it.\n\n579\n00:28:50.370 --> 00:28:55.250\nNow, the other option though was Reboot,\nwhich does what the name implies.\n\n580\n00:28:55.250 --> 00:28:56.460\nIt's just going to Reboot, come back up.\n\n581\n00:28:56.460 --> 00:28:59.850\nI won't get a chance to change\nthe instance date or the instance type.\n\n582\n00:28:59.850 --> 00:29:01.190\nAnd then lastly is terminate.\n\n583\n00:29:01.190 --> 00:29:03.020\nNow, terminate and stop is very similar.\n\n584\n00:29:03.020 --> 00:29:04.650\nThey both shut the machine down.\n\n585\n00:29:04.650 --> 00:29:08.830\nThe difference is terminate shuts\nthe machine down and then deletes it.\n\n586\n00:29:08.830 --> 00:29:09.880\nWhich is awesome, right?\n\n587\n00:29:09.880 --> 00:29:13.020\nSo, if I expect to still\nhave the machine around.\n\n588\n00:29:13.020 --> 00:29:16.070\nI don't want to terminate it,\nit's gonna delete it, right.\n\n589\n00:29:16.070 --> 00:29:18.550\nSo, when you have a virtual machine up and\ngoing,\n\n590\n00:29:18.550 --> 00:29:21.590\nif it's a critical that you\ndon't want to get deleted.\n\n591\n00:29:21.590 --> 00:29:25.250\nThen we need to make sure we have what's\ncalled termination protection turned out.\n\n592\n00:29:25.250 --> 00:29:28.610\nThat will give us a little safety\nnet when we terminate things.\n\n593\n00:29:28.610 --> 00:29:30.050\nI know what some of you\nare thinking out there,\n\n594\n00:29:31.320 --> 00:29:34.770\nwhen would I be okay with\ndeleting my instance?\n\n595\n00:29:34.770 --> 00:29:39.790\nIf you're auto scaling, if I've got ten\nweb servers, but I can scale up to 50,\n\n596\n00:29:39.790 --> 00:29:43.360\nwhen I shut those other 30 or\n40 down to get back to ten.\n\n597\n00:29:43.360 --> 00:29:44.510\nI can do math, [LAUGH].\n\n598\n00:29:44.510 --> 00:29:47.760\nWhen I shut those other 40 down,\nI needed to delete them, so\n\n599\n00:29:47.760 --> 00:29:48.910\nI'm not paying for their storage.\n\n600\n00:29:48.910 --> 00:29:51.580\nI don't wanna pay for\nit when they're powered off, right?\n\n601\n00:29:51.580 --> 00:29:53.350\nSo, I want to delete them.\n\n602\n00:29:53.350 --> 00:29:55.240\nI want to terminate them and\nget rid of them.\n\n603\n00:29:55.240 --> 00:29:56.290\nVersus stop.\n\n604\n00:29:56.290 --> 00:30:00.210\nWhen you stop, you're not paying for\nRAM and CPU anymore.\n\n605\n00:30:00.210 --> 00:30:02.020\nBut, you're still paying for storage.\n\n606\n00:30:02.020 --> 00:30:07.400\nYou're eating up storage in the EBS or\nwherever it is you're storing stuff.\n\n607\n00:30:07.400 --> 00:30:08.350\nSo, you've got to pay for that.\n\n608\n00:30:08.350 --> 00:30:10.110\nWhen you terminate it, they get deleted.\n\n609\n00:30:10.110 --> 00:30:12.320\nBut you can't un-terminate.\n\n610\n00:30:12.320 --> 00:30:15.030\nIf you wanna un-terminate,\nyou gotta restore from backup, right?\n\n611\n00:30:15.030 --> 00:30:16.550\nSo, that's where you have to be careful.\n\n612\n00:30:16.550 --> 00:30:17.710\nAnd under my Instance Settings,\n\n613\n00:30:17.710 --> 00:30:20.860\nyou probably noticed this one,\nChange Termination Protection.\n\n614\n00:30:20.860 --> 00:30:26.630\nAnd we can come in here and we can modify\nthat to say, yes, enable or disable.\n\n615\n00:30:26.630 --> 00:30:30.900\nIf I change it to yes, enable,\nI can no longer terminate this instance.\n\n616\n00:30:30.900 --> 00:30:35.537\nIf I were to go to instance state and\nterminate it would tell me that I can't,\n\n617\n00:30:35.537 --> 00:30:37.788\nsee how the buttons grayed out here?\n\n618\n00:30:37.788 --> 00:30:40.993\nIt's grayed out because termination\nprotection is turned on,\n\n619\n00:30:40.993 --> 00:30:43.677\nI'd have to go and\nturn off termination protection.\n\n620\n00:30:43.677 --> 00:30:45.575\nAnd then, I could come and\nterminate this instance.\n\n621\n00:30:45.575 --> 00:30:50.030\nIf you've got junior admins working in\nthe system people that don't know that.\n\n622\n00:30:50.030 --> 00:30:51.050\nYou can turn on that protection.\n\n623\n00:30:51.050 --> 00:30:53.150\nIt'll stop it from accidentally\ndeleting instances.\n\n624\n00:30:54.550 --> 00:30:57.060\nBut, mine is just stopped right now,\nwhich is what I wanted.\n\n625\n00:30:57.060 --> 00:30:59.400\nBecause once it's stopped,\nI can go in here.\n\n626\n00:30:59.400 --> 00:31:03.290\nAnd I can go into Instance Settings and\nChange Instance Type.\n\n627\n00:31:03.290 --> 00:31:06.780\nAnd now, I can come through and\nI can change the instance type.\n\n628\n00:31:06.780 --> 00:31:11.990\nAnd notice that I'm not just limited\nto my m series that I started with.\n\n629\n00:31:11.990 --> 00:31:15.820\nI can actually go to a c series,\nan i an r,\n\n630\n00:31:15.820 --> 00:31:18.010\nI can switch to one of those other types.\n\n631\n00:31:18.010 --> 00:31:22.390\nSo, I can move to an entirely different\nfamily, empower the system right back up.\n\n632\n00:31:23.420 --> 00:31:28.720\nMay be I need to be cpu optimized just for\na day or two.\n\n633\n00:31:28.720 --> 00:31:31.620\nAnd then,\nI can go back to a regular m, right?\n\n634\n00:31:31.620 --> 00:31:34.890\nMaybe at the end of every month,\nI know that I'm gonna be doing\n\n635\n00:31:34.890 --> 00:31:37.720\nend of month calculation and\nI need more CPU or I need more RAM.\n\n636\n00:31:37.720 --> 00:31:39.760\nI can do that, just for a couple more\ndays, and then I can go back again.\n\n637\n00:31:39.760 --> 00:31:40.380\nAnd so,\n\n638\n00:31:40.380 --> 00:31:44.250\nwe can really control our costs there by\nmaking sure we only use what we need.\n\n639\n00:31:44.250 --> 00:31:48.260\nI'm gonna bump up to an m4 extra large and\nI'll apply that.\n\n640\n00:31:48.260 --> 00:31:50.230\nAnd now when I boot it up.\n\n641\n00:31:50.230 --> 00:31:54.818\nMy system is gonna have more CPUs and more\nmemory then it did when I shut it down.\n\n642\n00:31:54.818 --> 00:31:58.085\nAnd it's gonna be okay with that because\nall the AMIs are built to be dynamic and\n\n643\n00:31:58.085 --> 00:32:00.640\nreact to that and\nstart to take advantage of that.\n\n644\n00:32:00.640 --> 00:32:02.650\nVery easy to move between\nthe instance types.\n\n645\n00:32:02.650 --> 00:32:05.630\nAnd you could automate this through\nscripting and have it scheduled.\n\n646\n00:32:05.630 --> 00:32:11.700\nJust hey, on the 28th of every month,\nbump up to an M4 Double Extra Large.\n\n647\n00:32:11.700 --> 00:32:15.062\nAnd then, on the 2nd of every month,\nbump back down to and m4.large.\n\n648\n00:32:15.062 --> 00:32:16.463\nAnd you can just do that dynamically, and\n\n649\n00:32:16.463 --> 00:32:18.820\nnow you've got all those\nresources available.\n\n650\n00:32:18.820 --> 00:32:22.515\n&gt;&gt; Don, that seems like a very powerful\nfeature, I don't have to be afraid of\n\n651\n00:32:22.515 --> 00:32:25.635\novercommitting to equipment\nthat I don't necessarily need.\n\n652\n00:32:25.635 --> 00:32:31.362\nOr I actually need graphics cards for\nthese CPU intensive calculations,\n\n653\n00:32:31.362 --> 00:32:35.150\nversus just a standard\nserver installation.\n\n654\n00:32:35.150 --> 00:32:36.900\nSo, that's incredibly powerful.\n\n655\n00:32:36.900 --> 00:32:39.192\nBut, we've covered about the basic set up.\n\n656\n00:32:39.192 --> 00:32:41.900\n&gt;&gt; [LAUGH]\n&gt;&gt; In managing the lifecycle,\n\n657\n00:32:41.900 --> 00:32:43.320\nas well as monitoring.\n\n658\n00:32:43.320 --> 00:32:48.310\nI know we have a lot more to talk about\nwith EC 2's, However, we are out of time.\n\n659\n00:32:48.310 --> 00:32:52.500\nSo for now, signing off for IT Pro TV,\nI'm your host Justin Dennison.\n\n660\n00:32:52.500 --> 00:32:53.380\n&gt;&gt; And I'm Don Pezet.\n\n661\n00:32:53.380 --> 00:32:55.070\n&gt;&gt; See you next time\n\n662\n00:32:55.070 --> 00:33:00.971\n[MUSIC]\n\n663\n00:33:00.971 --> 00:33:03.045\n&gt;&gt; Thank you for watching ITPRO.TV\n\n",
          "vimeoId": "207293605"
        },
        {
          "description": "In this episode, Justin and Don discuss pricing of EC2 instances. Additionally, they discuss the tenancy types of EC2 such as shared or dedicated as well as the use of placement groups for deployment groups.",
          "length": "1882",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-3-amazon_ec2_basics_pt3-030317.00_32_22_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-3-amazon_ec2_basics_pt3-030317.00_32_22_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-3-amazon_ec2_basics_pt3-030317.00_32_22_23.Still001-sm.jpg",
          "title": "Amazon EC2 Basics Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:06.179\nWelcome to ITPro.TV,\nI'm your host Don Pezet [CROSSTALK]\n\n2\n00:00:06.179 --> 00:00:08.202\n[MUSIC]\n\n3\n00:00:08.202 --> 00:00:11.898\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:11.898 --> 00:00:15.403\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITPro.TV,\n\n5\n00:00:15.403 --> 00:00:17.310\nI'm your host, Justin Dennison.\n\n6\n00:00:17.310 --> 00:00:20.970\nAnd, in today's episode, we're going to\ncontinue our look into the Ec2 Service,\n\n7\n00:00:20.970 --> 00:00:22.440\nprovided by AWS.\n\n8\n00:00:22.440 --> 00:00:24.420\nIn particular, about pricing and\n\n9\n00:00:24.420 --> 00:00:28.030\nthis concept of tenancy which I'm\nkind of interested to learn about.\n\n10\n00:00:28.030 --> 00:00:31.050\nAnd to help us along in that journey is\nMr. Don Pezet, how you doing today Don?\n\n11\n00:00:31.050 --> 00:00:34.169\n&gt;&gt; I am doing great Justin,\nready to dive right back into AWS.\n\n12\n00:00:34.169 --> 00:00:37.313\nAnd I've actually been looking forward\nto this episode because these topics\n\n13\n00:00:37.313 --> 00:00:38.727\nare things that can be confusing.\n\n14\n00:00:38.727 --> 00:00:42.277\nAnd when you're dealing with a customer or\nyour own company,\n\n15\n00:00:42.277 --> 00:00:44.530\nsomebody's gotta be able to step in and\n\n16\n00:00:44.530 --> 00:00:49.320\nidentify what is the right way to be\npaying for the solutions that you deploy.\n\n17\n00:00:49.320 --> 00:00:50.580\nAnd Amazon gives you so\n\n18\n00:00:50.580 --> 00:00:52.840\nmany different options that it\ndoes create some confusion.\n\n19\n00:00:52.840 --> 00:00:55.929\nSo I'm gonna try and\nroll back the fog in this episode and\n\n20\n00:00:55.929 --> 00:01:00.138\nhighlight exactly what we need to know\nto pick the right deployment model for\n\n21\n00:01:00.138 --> 00:01:03.515\nour EC2 instances and\nmake sure we're not paying too much.\n\n22\n00:01:03.515 --> 00:01:06.839\n&gt;&gt; Well that's a very important to know,\nI know that's one of the liminating\n\n23\n00:01:06.839 --> 00:01:09.423\nfactors when I wanted to play\naround with AWS a little bit,\n\n24\n00:01:09.423 --> 00:01:12.400\nI was like what if I have\na $25,000 bill on accident.\n\n25\n00:01:12.400 --> 00:01:16.231\nSo hopefully I wanna make sure that I\ndon't have those we've looked a little bit\n\n26\n00:01:16.231 --> 00:01:17.502\nat S3's pricing model.\n\n27\n00:01:17.502 --> 00:01:19.375\nI found that fairly intuitive.\n\n28\n00:01:19.375 --> 00:01:21.950\nBut how does the pricing for EC2 work?\n\n29\n00:01:21.950 --> 00:01:23.150\nCan you tell us about that?\n\n30\n00:01:23.150 --> 00:01:26.330\n&gt;&gt; Yeah it does get a little\nmore complex in EC2, right?\n\n31\n00:01:26.330 --> 00:01:28.370\nWith S3 you're just talking about storage,\nright.\n\n32\n00:01:28.370 --> 00:01:32.600\nAnd so they charge you per gigabyte and\nyou pay a monthly fee for\n\n33\n00:01:32.600 --> 00:01:35.410\nthe data at rest,\nthat's sitting there in S3.\n\n34\n00:01:35.410 --> 00:01:38.140\nAnd you pay for the bandwidth\nthat people are transferring out.\n\n35\n00:01:38.140 --> 00:01:42.930\nWell, in EC2, you have bandwidth and\nstorage as well, right?\n\n36\n00:01:42.930 --> 00:01:45.380\nSo you've got those same kind of things.\n\n37\n00:01:45.380 --> 00:01:48.560\nBut you've also got the RAM and CPU\nthat you're pulling from your instances.\n\n38\n00:01:48.560 --> 00:01:51.608\nAnd I know in the last episode, I pulled\nup a little bit of the pricing sheet,\n\n39\n00:01:51.608 --> 00:01:54.700\njust to show you the different\ninstance types that were available.\n\n40\n00:01:54.700 --> 00:01:56.921\nWell each one does have\na different price tag attached and\n\n41\n00:01:56.921 --> 00:01:58.595\nthere is a number of\nthings that impact it.\n\n42\n00:01:58.595 --> 00:02:02.741\nIf I remember correctly what was showing\nin the other episode was that depending on\n\n43\n00:02:02.741 --> 00:02:05.460\nthe operating system you chose,\nthe price changed.\n\n44\n00:02:05.460 --> 00:02:10.622\nIf I went with Linux, I had the lowest\nprice, well if I went with Amazon Linux,\n\n45\n00:02:10.622 --> 00:02:14.240\nor ubuntu, or\none of the free distributions.\n\n46\n00:02:14.240 --> 00:02:17.960\nIf I went with Red Hat Enterprise Linux\nthough, there was a licensing fee,\n\n47\n00:02:17.960 --> 00:02:18.960\nthat became more expensive.\n\n48\n00:02:18.960 --> 00:02:21.170\nAnd if I went with Microsoft Windows,\nthere was a licensing fee,\n\n49\n00:02:21.170 --> 00:02:22.030\nit was more expensive.\n\n50\n00:02:22.030 --> 00:02:24.770\nSo, depending on the operating system,\nthat could change things.\n\n51\n00:02:24.770 --> 00:02:28.490\nWell, usually the operating system for\nus is not something that's negotiable.\n\n52\n00:02:28.490 --> 00:02:30.070\nWhen I'm rolling out a service,\n\n53\n00:02:30.070 --> 00:02:33.080\nif I have some software I have to\nsupport that requires Windows,\n\n54\n00:02:33.080 --> 00:02:36.450\nIt doesn't matter if Linux is cheaper,\nI need Windows to support my software.\n\n55\n00:02:36.450 --> 00:02:40.750\nOr if I've got something that's\nwritten and supported by Red Hat,\n\n56\n00:02:40.750 --> 00:02:44.250\nit doesn't matter that Ubuntu is\nLinux also and I can do it for free.\n\n57\n00:02:44.250 --> 00:02:45.670\nMy software's supported under Red Hat.\n\n58\n00:02:45.670 --> 00:02:46.410\nI need to follow that.\n\n59\n00:02:46.410 --> 00:02:49.940\nSo operating system's usually\nan easy decision for us, right?\n\n60\n00:02:49.940 --> 00:02:51.600\nSometimes you just have to pay more.\n\n61\n00:02:51.600 --> 00:02:55.590\nBut then, after you've made that decision,\nwe get to the next tricky part,\n\n62\n00:02:55.590 --> 00:02:57.800\nwhich is choosing our instance type.\n\n63\n00:02:57.800 --> 00:03:02.622\nThere's a few different instance types to\nselect from, and I don't mean the instance\n\n64\n00:03:02.622 --> 00:03:06.069\nclass, right, where we had the M4 large or\nM4 extra large.\n\n65\n00:03:06.069 --> 00:03:10.430\nThat's important, too, but that's, again,\nusually easier to make that decision.\n\n66\n00:03:10.430 --> 00:03:13.822\nI need a certain amount of CPU power,\nI need a certain amount of RAM.\n\n67\n00:03:13.822 --> 00:03:17.127\nI'm gonna pick the right class that\nprovides that, that's pretty cut and dry.\n\n68\n00:03:17.127 --> 00:03:19.120\nAnd if you make a mistake,\nyou can always change it.\n\n69\n00:03:19.120 --> 00:03:20.315\nThat's not a big deal either, right?\n\n70\n00:03:20.315 --> 00:03:21.900\nThey're easy enough to modify.\n\n71\n00:03:21.900 --> 00:03:24.019\nWell, where it gets challenging, though,\n\n72\n00:03:24.019 --> 00:03:26.653\nis on the different pricing\nmodels that are available.\n\n73\n00:03:26.653 --> 00:03:30.350\nLet me bring up the EC2 pricing page here\nreal quick to show what I'm talking about.\n\n74\n00:03:30.350 --> 00:03:32.637\nWhat I've been working\nwith in the shows so\n\n75\n00:03:32.637 --> 00:03:35.185\nfar are what are called\nOn-Demand instances.\n\n76\n00:03:35.185 --> 00:03:38.590\nOn-Demand instances are the most\npopular with Amazon.\n\n77\n00:03:38.590 --> 00:03:42.560\nThat's where On-Demand,\nI can just go and create an instance and\n\n78\n00:03:42.560 --> 00:03:43.980\nI start paying for it.\n\n79\n00:03:43.980 --> 00:03:49.390\nAnd then I use it and when I'm done with\nit I terminate it, which is deleting it.\n\n80\n00:03:49.390 --> 00:03:50.810\nAnd I stop paying for it.\n\n81\n00:03:50.810 --> 00:03:52.850\nSo I pay for it while I've got it and\nit's on demand.\n\n82\n00:03:52.850 --> 00:03:57.070\nIf I just need a machine for one hour I\ncan do that, I can fire it up use it for\n\n83\n00:03:57.070 --> 00:04:00.110\none hour get rid of it and\nI just paid an hour and\n\n84\n00:04:00.110 --> 00:04:05.770\nit might have cost me 11 whole cents but\nI had a very powerful machine for an hour.\n\n85\n00:04:05.770 --> 00:04:08.804\nThat's the advantage of\non demand pricing but\n\n86\n00:04:08.804 --> 00:04:13.910\non demand pricing is actually the most\nexpensive pricing from Amazon.\n\n87\n00:04:13.910 --> 00:04:17.550\nBecause they don't know how much they\nare gonna use at any given time.\n\n88\n00:04:17.550 --> 00:04:20.930\nSo they got a ton of hardware and\ninfrastructure behind the scenes.\n\n89\n00:04:20.930 --> 00:04:25.088\nAnd some of it is sitting there idle and\nthey are hoping that somebody will come in\n\n90\n00:04:25.088 --> 00:04:29.270\nand do some on demand usage but If they\ndon't then that machine sits there idle.\n\n91\n00:04:29.270 --> 00:04:31.990\nSo they have to charge a little more for\nthe on demand.\n\n92\n00:04:31.990 --> 00:04:36.227\nAnd so that is the most expensive model\nwhat I've been doing in the show so\n\n93\n00:04:36.227 --> 00:04:39.087\nfar because obviously\nmoney is no object right.\n\n94\n00:04:39.087 --> 00:04:39.862\nIt's not true.\n\n95\n00:04:39.862 --> 00:04:41.540\nWe always have to worry about it.\n\n96\n00:04:41.540 --> 00:04:45.720\nAnd I use on demand here in the show cuz\ni just need the machines for 30 minute.\n\n97\n00:04:45.720 --> 00:04:48.180\nRight and on demand is perfect for that.\n\n98\n00:04:48.180 --> 00:04:51.960\nBut in a business, you don't normally\nneed a machine for just 30 minutes.\n\n99\n00:04:51.960 --> 00:04:53.530\nYou need a machine for longer.\n\n100\n00:04:53.530 --> 00:04:57.280\nSo there's a few other solutions that are\navailable to me that can help with that.\n\n101\n00:04:57.280 --> 00:05:00.320\nAnother example is what's\ncalled a Spot Instance.\n\n102\n00:05:00.320 --> 00:05:04.115\nA Spot Instance is really strange,\nbecause it is very cheap.\n\n103\n00:05:04.115 --> 00:05:08.706\nIt's actually one of the cheaper\nways to use machines inside of AWSN.\n\n104\n00:05:08.706 --> 00:05:12.050\n[LAUGH] If you're a salesperson\nwatching this, I apologize.\n\n105\n00:05:12.050 --> 00:05:13.700\nSalespeople are not supposed to say cheap.\n\n106\n00:05:13.700 --> 00:05:15.384\nThey're supposed to say less expensive.\n\n107\n00:05:15.384 --> 00:05:16.700\nThat sounds better, right?\n\n108\n00:05:16.700 --> 00:05:18.340\nCheap sounds, well, cheap.\n\n109\n00:05:18.340 --> 00:05:22.730\nSo it's less expensive, because what\nit does, it works on a bidding system.\n\n110\n00:05:22.730 --> 00:05:27.150\nWhat you're saying is I'm gonna count\non Amazon having idle hardware.\n\n111\n00:05:27.150 --> 00:05:30.380\nI'm gonna count on them having hardware\nthat's not being used right now.\n\n112\n00:05:30.380 --> 00:05:32.610\nAnd I'm gonna put in a bid that says, hey,\n\n113\n00:05:32.610 --> 00:05:36.960\nI'm willing to pay x amount of\ncents to use that instance.\n\n114\n00:05:36.960 --> 00:05:41.450\nAnd that might be a lower number than\nwhat your normal pricing is, right?\n\n115\n00:05:41.450 --> 00:05:43.290\nWhat's wrong with that\nwhole m4 large thing?\n\n116\n00:05:43.290 --> 00:05:47.742\nIf I go into On-Demand pricing and I'll\ntake an m4.large, which is one of the more\n\n117\n00:05:47.742 --> 00:05:51.959\npopular deployments, right let me throw\na few qualifiers in here on this show.\n\n118\n00:05:51.959 --> 00:05:55.741\nAll the pricing I'm about to show you\nis absolutely subject to change and\n\n119\n00:05:55.741 --> 00:05:59.399\nit may be different even if you're\nwatching this episode live because\n\n120\n00:05:59.399 --> 00:06:04.130\nin different countries, pricing is handled\ndifferently and in different regions.\n\n121\n00:06:04.130 --> 00:06:07.810\nSo, I am connected to the North Virginia,\n\n122\n00:06:07.810 --> 00:06:10.960\nthe US East region and so\nthat's the pricing that I'm looking at.\n\n123\n00:06:10.960 --> 00:06:15.690\nI'm also just using regular Linux pricing,\nnot Red Hat Enterprise, or Windows, so\n\n124\n00:06:15.690 --> 00:06:16.470\nI don't have that on there.\n\n125\n00:06:16.470 --> 00:06:20.093\nSo if you're trying to follow along on\nyour own system and match the stuff,\n\n126\n00:06:20.093 --> 00:06:24.062\nyour numbers might be slightly different,\nalways pay attention to the numbers,\n\n127\n00:06:24.062 --> 00:06:26.611\ndon't just assume you know\nwhat they're gonna be.\n\n128\n00:06:26.611 --> 00:06:28.970\nAll right, so you know when I\nsaid I was in North Virginia.\n\n129\n00:06:28.970 --> 00:06:31.540\nI'm actually in Ohio.\nBut let me switch to North Virginia.\n\n130\n00:06:31.540 --> 00:06:32.848\nThat's the most popular one.\n\n131\n00:06:32.848 --> 00:06:35.150\nAll right,\nI'm gonna go down to an M4 large.\n\n132\n00:06:35.150 --> 00:06:36.790\nHere's an M4 large, right.\n\n133\n00:06:36.790 --> 00:06:40.500\nTwo VCPU, 6.5 ECUs,\nit got eight gigs of RAM.\n\n134\n00:06:40.500 --> 00:06:45.460\nUses EBS storage and\nit is a hair over ten cents an hour.\n\n135\n00:06:45.460 --> 00:06:49.890\nSo let's just round that up to 11\ncents an hour, so 10.8 cents per hour.\n\n136\n00:06:49.890 --> 00:06:52.340\nPretty cheap, right?\n\n137\n00:06:52.340 --> 00:06:55.030\nLess expensive,\nI gotta remember my marketing jargon.\n\n138\n00:06:55.030 --> 00:06:57.896\nSo there we go.\nSo that's an M4 large for on demand,\n\n139\n00:06:57.896 --> 00:07:02.710\nI can fire this up, I can use it for\nan hour, I can use it for a week, a month,\n\n140\n00:07:02.710 --> 00:07:07.710\na year, ten years and I'm gonna pay,\nwell 10.8 cents per hour, right?\n\n141\n00:07:08.950 --> 00:07:15.680\nBut if I go back and switch over to spot\ninstances I can go to a spot instance and\n\n142\n00:07:15.680 --> 00:07:20.420\nI can find an m4 large and\nhere's a m4 large and\n\n143\n00:07:20.420 --> 00:07:25.140\nit is 13.90 cents per hour.\n\n144\n00:07:25.140 --> 00:07:28.070\nIt's more expensive than an on-demand.\n\n145\n00:07:28.070 --> 00:07:29.740\nWhat the heck is going on here?\n\n146\n00:07:29.740 --> 00:07:34.770\nWell, spot instances\nare banking on the idea\n\n147\n00:07:34.770 --> 00:07:36.730\nthat there's idle hardware\nsitting in Amazon.\n\n148\n00:07:38.700 --> 00:07:40.450\nAnd sometimes there isn't,\nand sometimes there isn't.\n\n149\n00:07:40.450 --> 00:07:44.379\nIf there's idle hardware,\nif there's a lot of idle hardware,\n\n150\n00:07:44.379 --> 00:07:49.326\nthis price will drop down, and it can get\nlower than the on-demand pricing, and\n\n151\n00:07:49.326 --> 00:07:51.322\nit becomes cheap, very cheap.\n\n152\n00:07:51.322 --> 00:07:55.845\nBut, if there's a lot of instances that\nare being used right now, there's not idle\n\n153\n00:07:55.845 --> 00:07:59.750\nhardware and this can actually become\nmore expensive than on-demand.\n\n154\n00:07:59.750 --> 00:08:01.769\nThis price fluctuates.\n\n155\n00:08:01.769 --> 00:08:03.450\nPrior to bringing this page up right now,\n\n156\n00:08:03.450 --> 00:08:05.283\nI had no idea what that\nnumber was going to be.\n\n157\n00:08:05.283 --> 00:08:10.330\nBecause it fluctuates, it changes, it goes\nup and down based on what's going on.\n\n158\n00:08:10.330 --> 00:08:12.673\nAnd shoot, actually I was\nlooking at the Windows usage.\n\n159\n00:08:12.673 --> 00:08:18.507\nIf I look at the Linux usage like I\nshould have, it's actually $0.0267.\n\n160\n00:08:18.507 --> 00:08:21.360\nSo $0.026 per hour.\n\n161\n00:08:21.360 --> 00:08:22.430\nIt's actually cheaper.\n\n162\n00:08:22.430 --> 00:08:23.440\nSignificantly cheaper.\n\n163\n00:08:23.440 --> 00:08:26.340\nThat's four times cheaper\nthan the other one.\n\n164\n00:08:26.340 --> 00:08:28.300\nSo if I look at the right\npricing that helps.\n\n165\n00:08:28.300 --> 00:08:31.960\nSo a spot instance is four\ntimes cheaper right now.\n\n166\n00:08:31.960 --> 00:08:34.927\nWell, why wouldn't I do this?\n\n167\n00:08:34.927 --> 00:08:38.170\nThe thing about a spot instance is\nyou can't count on it being there.\n\n168\n00:08:38.170 --> 00:08:40.120\nIt's not always available.\n\n169\n00:08:40.120 --> 00:08:42.790\nI might go to request a spot instance,\nand it says nope, sorry,\n\n170\n00:08:42.790 --> 00:08:46.140\nthere's no available hardware,\nand that's that, right?\n\n171\n00:08:46.140 --> 00:08:49.580\nOr it might say, yes, here it is,\nyou can have it, you can have it for\n\n172\n00:08:49.580 --> 00:08:51.250\ntwo cents an hour.\n\n173\n00:08:51.250 --> 00:08:55.860\nBut halfway through your hour,\nother people are spinning up instances,\n\n174\n00:08:55.860 --> 00:08:59.730\nthe system gets busy, and\nyou get the two minute warning.\n\n175\n00:08:59.730 --> 00:09:01.120\nThat's how spot instances work.\n\n176\n00:09:01.120 --> 00:09:03.919\nYou'll get a two minute warning saying,\nyou need to save your data,\n\n177\n00:09:03.919 --> 00:09:05.136\nthis machine's going down.\n\n178\n00:09:05.136 --> 00:09:08.140\nAnd then it takes it down, it gives it to\nthe customer willing to pay full price.\n\n179\n00:09:08.140 --> 00:09:13.210\nSo if you're willing to pay full price\non demand, you always get an instance.\n\n180\n00:09:13.210 --> 00:09:17.560\nBut when you do a spot instance,\nyou're banking on there being idle time.\n\n181\n00:09:17.560 --> 00:09:19.736\nNow that doesn't work out for most people.\n\n182\n00:09:19.736 --> 00:09:23.060\nI can't say, like, I wanna bring up a web\nserver, I'm gonna use a spot instance.\n\n183\n00:09:23.060 --> 00:09:26.666\nBecause sometimes my web server\nwill be up and sometimes it won't.\n\n184\n00:09:26.666 --> 00:09:29.620\n[LAUGH] And that's not a good web server.\n\n185\n00:09:29.620 --> 00:09:33.320\nBut, let's go to an example\nI used in an earlier show,\n\n186\n00:09:33.320 --> 00:09:36.540\nwhere I said you're\nsequencing the human genome.\n\n187\n00:09:36.540 --> 00:09:40.349\nAnd if I need a thousand computers to\ndo that, a thousand instances, and\n\n188\n00:09:40.349 --> 00:09:42.043\nit's going to take two months.\n\n189\n00:09:42.043 --> 00:09:46.757\nWouldn't it be nice if I could\nrequest up to a thousand more\n\n190\n00:09:46.757 --> 00:09:50.680\nspot instances and\nif they're there, great.\n\n191\n00:09:50.680 --> 00:09:53.040\nI'll get their computational power and\nif they're not, no big deal,\n\n192\n00:09:53.040 --> 00:09:54.290\nI still have my other thousand.\n\n193\n00:09:54.290 --> 00:09:56.500\nThat we can reach in that way and\n\n194\n00:09:56.500 --> 00:10:00.350\nget extra capacity when it's available and\nlose it when it's not.\n\n195\n00:10:00.350 --> 00:10:03.510\nNow your solution has to\nbe able to handle that.\n\n196\n00:10:03.510 --> 00:10:04.950\nNot all software can.\n\n197\n00:10:04.950 --> 00:10:07.790\nIf you're running a website,\nif you're providing file access for\n\n198\n00:10:07.790 --> 00:10:10.730\ncustomers, spotting systems are not for\nyou.\n\n199\n00:10:10.730 --> 00:10:14.860\nBut if you've got something\nthat can handle scaling in and\n\n200\n00:10:14.860 --> 00:10:19.310\nscaling out, based on new instances coming\nand going, spot instances can save you\n\n201\n00:10:19.310 --> 00:10:20.699\na lot of money,\nif you really take advantage of that.\n\n202\n00:10:22.400 --> 00:10:27.330\nAll right, now spot instances are\noftentimes the most inexpensive solution\n\n203\n00:10:27.330 --> 00:10:29.360\nbut it's not reliable.\n\n204\n00:10:29.360 --> 00:10:31.500\nSo there's gotta be something better for\nus, right?\n\n205\n00:10:31.500 --> 00:10:37.060\nAnd the best way to get your\nprice down but know that you're\n\n206\n00:10:37.060 --> 00:10:40.938\ngoing to have those resources available\nis what's called a reserved instance.\n\n207\n00:10:40.938 --> 00:10:44.334\nAn on demand instance comes and\ngoes, right?\n\n208\n00:10:44.334 --> 00:10:45.761\nI can start it up whenever I want it and\n\n209\n00:10:45.761 --> 00:10:48.080\nthen I can get rid of it\nwhen I'm done with it.\n\n210\n00:10:48.080 --> 00:10:51.950\nSo Amazon doesn't know whether I'm\ngonna be using that a lot or a little.\n\n211\n00:10:51.950 --> 00:10:52.490\nThey have no idea.\n\n212\n00:10:52.490 --> 00:10:54.250\nThey don't know my workload.\n\n213\n00:10:54.250 --> 00:10:59.420\nWith the reserved instance,\nwe basically make a commitment to Amazon.\n\n214\n00:10:59.420 --> 00:11:02.770\nI tell Amazon, hey I'm gonna fire up\nthis instance, and I'm gonna use it for\n\n215\n00:11:02.770 --> 00:11:03.500\nan entire year.\n\n216\n00:11:04.690 --> 00:11:07.870\nAnd by telling them that,\nI can pay upfront for\n\n217\n00:11:07.870 --> 00:11:12.610\nthat year, and\nit drives the price down significantly.\n\n218\n00:11:12.610 --> 00:11:15.390\nAnd, you can save quite a bit of money.\n\n219\n00:11:15.390 --> 00:11:17.970\nWhen we went into the on demand instance.\n\n220\n00:11:17.970 --> 00:11:23.667\nI saw where I could get an M4 large for\n$0.108 per hour.\n\n221\n00:11:23.667 --> 00:11:28.156\nAnd on as a spot instance, I can get\nan M4 large for $0.026 per hour, right,\n\n222\n00:11:28.156 --> 00:11:30.390\nsignificantly less expensive.\n\n223\n00:11:30.390 --> 00:11:34.484\nWell, if I do a reserved instance,\nI can do a one year or\n\n224\n00:11:34.484 --> 00:11:38.850\na three year contract and\ndrive that price down also.\n\n225\n00:11:38.850 --> 00:11:40.284\nAnd so if we look in here and\n\n226\n00:11:40.284 --> 00:11:44.659\ngo for an M4 large I'm gonna pay a little\nmore attention to my table this time and\n\n227\n00:11:44.659 --> 00:11:48.471\nmake sure I'm in North Virginia and\nI am looking at a Linux instance.\n\n228\n00:11:48.471 --> 00:11:50.800\nGotta make sure we're comparing\napples to apples here.\n\n229\n00:11:50.800 --> 00:11:53.721\nAnd let me get down to the M4 large.\n\n230\n00:11:53.721 --> 00:11:54.900\nHere we go.\n\n231\n00:11:54.900 --> 00:11:59.230\nAnd on an M4 large,\nif I do a one year term,\n\n232\n00:11:59.230 --> 00:12:05.360\nwhat we'll just do a one year on this one,\nand I pay upfront, I can pay $541 and\n\n233\n00:12:05.360 --> 00:12:11.380\nthat will get me an M4 large for\nan entire year.\n\n234\n00:12:11.380 --> 00:12:16.590\nAnd the effective hourly\nrate is $0.06 per hour.\n\n235\n00:12:16.590 --> 00:12:20.922\nIt is not as good as the $0.026 per\nhour that we have spot instance.\n\n236\n00:12:20.922 --> 00:12:25.338\nBut it's significantly better than\nthe $0.108 per hour that I would on an on\n\n237\n00:12:25.338 --> 00:12:26.301\ndemand, right?\n\n238\n00:12:26.301 --> 00:12:31.330\nI'm saving 43% by paying upfront for\nthe year.\n\n239\n00:12:31.330 --> 00:12:35.360\nSo if I'm know I'm gonna use that machine\nfor a year, it makes sense to go ahead and\n\n240\n00:12:35.360 --> 00:12:36.760\nreserve the instance.\n\n241\n00:12:36.760 --> 00:12:39.330\nNow you are making that commitment\nto Amazon you're saying,\n\n242\n00:12:39.330 --> 00:12:41.510\nhey I'm gonna used it for a whole year.\n\n243\n00:12:41.510 --> 00:12:45.177\nWhat happens if six months down the road\nyou say, hey I'm not gonna use it anymore?\n\n244\n00:12:45.177 --> 00:12:47.000\nWell too bad, you paid upfront.\n\n245\n00:12:47.000 --> 00:12:49.050\nYou've already pay it for the whole year.\n\n246\n00:12:49.050 --> 00:12:51.220\nNow you can reuse that\ninstance however you want.\n\n247\n00:12:51.220 --> 00:12:53.600\nYou can delete it and re-provision it as,\n\n248\n00:12:53.600 --> 00:12:55.910\nmaybe it was a web server now you\ncan provision it as a file server.\n\n249\n00:12:55.910 --> 00:12:58.560\nYou can you can mess around with it\nlike that, that's not a big deal.\n\n250\n00:12:58.560 --> 00:13:01.490\nBut you are going to have it for the year\nbecause you've already paid for it.\n\n251\n00:13:04.310 --> 00:13:06.950\nI've had this before with customers\nthat I've dealt with, and\n\n252\n00:13:06.950 --> 00:13:08.280\npeople get confused over this.\n\n253\n00:13:08.280 --> 00:13:11.492\nWhere there are times where\npeople will come to me and\n\n254\n00:13:11.492 --> 00:13:14.787\nthey'll say something like,\nhey, I need a server.\n\n255\n00:13:14.787 --> 00:13:19.250\nI need a service fired up in EC2 and\nI need it for 18 months.\n\n256\n00:13:19.250 --> 00:13:21.050\nI need it for a year and a half.\n\n257\n00:13:21.050 --> 00:13:24.176\nAnd I'll tell them okay,\nlet's do three year reserved instances.\n\n258\n00:13:24.176 --> 00:13:25.609\nAnd they'll say, no, no, Don.\n\n259\n00:13:25.609 --> 00:13:27.570\nI only need it for a year and a half.\n\n260\n00:13:27.570 --> 00:13:29.950\nI don't need it for three years,\njust a year and a half.\n\n261\n00:13:29.950 --> 00:13:32.010\nAnd I say, yeah, yeah, I know, I know.\n\n262\n00:13:32.010 --> 00:13:35.250\nDo a three year reservation,\nit will save you money.\n\n263\n00:13:35.250 --> 00:13:37.510\nAnd they say, but\nI don't need it three years.\n\n264\n00:13:37.510 --> 00:13:40.926\nAnd I'll say, well there are times\nwhere you can do a three year reserved\n\n265\n00:13:40.926 --> 00:13:44.286\ninstance and at the end of a year and\na half you can turn the machine off and\n\n266\n00:13:44.286 --> 00:13:45.249\nnever use it again.\n\n267\n00:13:45.249 --> 00:13:51.760\nAnd it's still cheaper than had you paid\nfor it month by month for that 18 months.\n\n268\n00:13:51.760 --> 00:13:52.350\nIt's confusing.\n\n269\n00:13:52.350 --> 00:13:53.690\nIt's economics, right?\n\n270\n00:13:53.690 --> 00:13:55.890\nAnd I'm not a mathematician.\n\n271\n00:13:55.890 --> 00:13:57.732\nI'm not an accountant and so\n\n272\n00:13:57.732 --> 00:14:01.740\nI found myself bumping into\ncustomers on this more than once.\n\n273\n00:14:01.740 --> 00:14:04.270\nOver kinda getting them in on\nthe right pricing structure.\n\n274\n00:14:04.270 --> 00:14:08.160\nSo I made a little spreadsheet and\nI'm gonna bring this up now.\n\n275\n00:14:08.160 --> 00:14:09.960\nI'm not a Microsoft Excel wizard.\n\n276\n00:14:09.960 --> 00:14:13.510\nThis is the most amazing thing\nI've ever produced in Excel ever.\n\n277\n00:14:13.510 --> 00:14:15.440\nSo this is the total limit of my talents.\n\n278\n00:14:15.440 --> 00:14:18.430\nBut what I did was I created\na little spreadsheet\n\n279\n00:14:18.430 --> 00:14:22.340\nwhere we could pick the instance\ntypes that we were looking at.\n\n280\n00:14:22.340 --> 00:14:25.850\nAnd it would lay out\nthe cost structure for\n\n281\n00:14:25.850 --> 00:14:30.510\nif we were doing on demand versus\none year versus three year.\n\n282\n00:14:30.510 --> 00:14:35.060\nNow, before I get in to the actual numbers\nI do want to highlight real quick that\n\n283\n00:14:35.060 --> 00:14:40.390\nwhen you do a reservation like this, I\nusually look at it as an all upfront cost.\n\n284\n00:14:40.390 --> 00:14:44.950\nThere is another option which is\na partial upfront or a no upfront.\n\n285\n00:14:44.950 --> 00:14:49.630\nWhen you do a no upfront that means,\nI can commit to a one year or\n\n286\n00:14:49.630 --> 00:14:52.210\nthree reservation and not pay a dime.\n\n287\n00:14:52.210 --> 00:14:54.042\nAnd then I have a monthly fee that I pay.\n\n288\n00:14:54.042 --> 00:14:57.797\nSo if I do no upfront, on that M4 large,\n\n289\n00:14:57.797 --> 00:15:03.208\nI can pay $53.81 per month,\nand my effective hourly\n\n290\n00:15:03.208 --> 00:15:08.412\nrate is $0.074 per hour or\n7.4 cents per hour.\n\n291\n00:15:08.412 --> 00:15:08.956\nRight?\n\n292\n00:15:08.956 --> 00:15:11.624\nThat's still cheaper than an on demand.\n\n293\n00:15:11.624 --> 00:15:14.629\nBut by paying some upfront or\nby paying all upfront,\n\n294\n00:15:14.629 --> 00:15:17.500\nI can drive that price even down further.\n\n295\n00:15:17.500 --> 00:15:22.260\nWell, it's been my experience that most\npeople, Justin, you made the comment,\n\n296\n00:15:22.260 --> 00:15:26.630\nthat when I deploy in Amazon, I don't\nknow what that bill's gonna be, right?\n\n297\n00:15:26.630 --> 00:15:29.870\nThat's a fear that a lot of companies\nhave with deploying in the Cloud,\n\n298\n00:15:29.870 --> 00:15:33.190\nis, when I buy a physical server,\nit's sitting right here.\n\n299\n00:15:33.190 --> 00:15:35.850\nI've already paid for it,\nI can use it however I want, and\n\n300\n00:15:35.850 --> 00:15:37.330\nI know it's already paid for.\n\n301\n00:15:37.330 --> 00:15:41.180\nWell, by doing an all upfront,\nyou get that same experience.\n\n302\n00:15:41.180 --> 00:15:44.090\nYou can say, all right, I've already paid\nfor it, I can use it however I want.\n\n303\n00:15:44.090 --> 00:15:46.946\nI can leave it running 24 hours a day,\nseven days a week,\n\n304\n00:15:46.946 --> 00:15:50.582\nI can throw all the workload at it that\nI want, and it's already paid for.\n\n305\n00:15:50.582 --> 00:15:55.582\nSo I find that most companies are much\nmore amenable to doing the all up front.\n\n306\n00:15:55.582 --> 00:15:59.364\nBut you can do partial or\nno up front which is great for start ups.\n\n307\n00:15:59.364 --> 00:16:02.866\nCompanies that don't necessarily\nwant to have all the expense\n\n308\n00:16:02.866 --> 00:16:06.233\nright at the front of their\nproject They want to tail load it,\n\n309\n00:16:06.233 --> 00:16:10.350\nthat way as the customer base starts\nto grow, the revenue starts to grow.\n\n310\n00:16:10.350 --> 00:16:14.240\nSo you have different options but\nin my spreadsheet I do\n\n311\n00:16:14.240 --> 00:16:17.220\nthe all up front pricing because\nthat's what most companies do.\n\n312\n00:16:17.220 --> 00:16:20.551\nAnd what I wanna show you\nis I'm gonna use and again,\n\n313\n00:16:20.551 --> 00:16:23.210\nI updated this pricing sheet last night.\n\n314\n00:16:23.210 --> 00:16:28.437\nSo it's current as of this very moment,\nwe're in March of 2017.\n\n315\n00:16:28.437 --> 00:16:31.258\nDepending on when you watch this episode,\nthese numbers might not be accurate,\n\n316\n00:16:31.258 --> 00:16:32.960\nso always verify on the website.\n\n317\n00:16:32.960 --> 00:16:36.660\nBut if I were to fire up\na general purpose large, right,\n\n318\n00:16:36.660 --> 00:16:38.800\nan m4 large, or really any of them.\n\n319\n00:16:38.800 --> 00:16:40.360\nI had to make my spreadsheets for\n\n320\n00:16:40.360 --> 00:16:42.950\nmore than one instance cuz we were\ntalking about different kinds.\n\n321\n00:16:42.950 --> 00:16:47.880\nSo I did Memory Optimized and\nCPU Optimized but I'll do m4 extra large.\n\n322\n00:16:47.880 --> 00:16:49.330\nAll right, so let's bump up to that.\n\n323\n00:16:49.330 --> 00:16:55.600\nI get 16 GB of RAM, 4 vCPU's,\n13 ECU's and that's my m4.xlarge.\n\n324\n00:16:55.600 --> 00:17:01.730\nWell, the way it works out is,\non the up front side,\n\n325\n00:17:01.730 --> 00:17:04.620\nif I do an on-demand instance,\nthere's no money up front, right?\n\n326\n00:17:04.620 --> 00:17:07.370\nBecause it's on-demand, you pay as you go.\n\n327\n00:17:07.370 --> 00:17:12.446\nIf I do a one year term, it's $1,082,\nif I do a three year term, it's 2,124.\n\n328\n00:17:12.446 --> 00:17:14.979\nNow right there, you should\nstart to see the savings, right.\n\n329\n00:17:14.979 --> 00:17:20.629\nIf I go from a one year to a three year,\nthat three year is not double, right?\n\n330\n00:17:20.629 --> 00:17:25.428\nIf I double a one year term,\nit would be $2,164 but a three-year,\n\n331\n00:17:25.428 --> 00:17:29.350\nit's like getting a years\naccess to that server for free.\n\n332\n00:17:29.350 --> 00:17:31.760\nSo I mean you start to see\nsavings there already, but\n\n333\n00:17:31.760 --> 00:17:34.800\nthe on-demand's got a zero next to it,\nthat's pretty attractive.\n\n334\n00:17:34.800 --> 00:17:36.740\nBut when we get down to the monthly cost,\n\n335\n00:17:36.740 --> 00:17:39.540\nthat on-demand would have\na monthly cost of $156.95,\n\n336\n00:17:39.540 --> 00:17:44.940\nthe other ones are already paid for, so\nthey don't have a monthly cost, right?\n\n337\n00:17:44.940 --> 00:17:49.401\nAnd when you get to a three-year\ntotal cost, if I were to run them for\n\n338\n00:17:49.401 --> 00:17:54.023\nthree years, the on-demand would\nactually add up to $5,650,\n\n339\n00:17:54.023 --> 00:17:58.900\nversus a one-year at $3,246,\nor a three-year at $2,124.\n\n340\n00:17:58.900 --> 00:18:04.283\nThe three-year saves me over $3000\nover doing On-Demand for three years,\n\n341\n00:18:04.283 --> 00:18:08.740\nthat's huge savings and\nthat's where we need make sure we pick it.\n\n342\n00:18:08.740 --> 00:18:11.760\nBut there's uncertainty, what if I\ndon't know the project's gonna go for\n\n343\n00:18:11.760 --> 00:18:12.880\nthree years?\n\n344\n00:18:12.880 --> 00:18:14.640\nThere's still a chance\nwhere you can save and\n\n345\n00:18:14.640 --> 00:18:17.010\nthat's where all this crazy stuff at\nthe bottom of my spreadsheet comes in.\n\n346\n00:18:17.010 --> 00:18:18.740\nLet me bring all this up.\n\n347\n00:18:18.740 --> 00:18:22.970\nSo what I did, is I tried to lay it out\nas a month-by-month expense, right.\n\n348\n00:18:22.970 --> 00:18:26.990\nSo as you pay, right, so we got month 1,\nall the way through month 36,\n\n349\n00:18:26.990 --> 00:18:29.720\na 3-year commitment.\n\n350\n00:18:29.720 --> 00:18:33.710\nAnd with an on-demand, you've got\na monthly fee that you're paying,\n\n351\n00:18:33.710 --> 00:18:35.010\nmonth after month, after month.\n\n352\n00:18:35.010 --> 00:18:38.510\nSo you'll see where that number\nstarts to grow, and grow and grow but\n\n353\n00:18:38.510 --> 00:18:40.520\nwith the reserved\ninstances we paid upfront.\n\n354\n00:18:40.520 --> 00:18:45.720\nSo, all of your cost is right here in\nmonth one, right here in month one.\n\n355\n00:18:45.720 --> 00:18:48.730\nWell for a three year, over three years,\n\n356\n00:18:48.730 --> 00:18:51.650\nit's only gonna cost a month one and\nthat's it.\n\n357\n00:18:51.650 --> 00:18:57.221\nFor a 1 year, you gotta cost in month 1,\nand in month 13,\n\n358\n00:18:57.221 --> 00:19:03.040\nand in month 19, that's not right,\nmonth 25 there we go.\n\n359\n00:19:03.040 --> 00:19:06.770\nThat's where our expenses are and\nso it's kinda spread out a bit and\n\n360\n00:19:06.770 --> 00:19:08.940\non demand it's spread out completely.\n\n361\n00:19:08.940 --> 00:19:12.040\nWell see these little green and\nred columns?\n\n362\n00:19:12.040 --> 00:19:14.500\nWhat I did is I totaled up the cost and\n\n363\n00:19:14.500 --> 00:19:19.460\nI showed where you would save\nmoney with one over the other.\n\n364\n00:19:19.460 --> 00:19:23.520\nAnd notice that an on demand,\nbecause it has no upfront cost, for\n\n365\n00:19:23.520 --> 00:19:28.370\nthe first six months it's actually\ncheaper to run on demand.\n\n366\n00:19:28.370 --> 00:19:30.380\nSo if I just need an instance for\n\n367\n00:19:30.380 --> 00:19:33.970\nonly six months, I'm going to\nsave money by doing on demand.\n\n368\n00:19:33.970 --> 00:19:36.970\nSo think about that in your projects,\nif you need it for six months or\n\n369\n00:19:36.970 --> 00:19:40.240\nless, on demand is going\nto save you the most.\n\n370\n00:19:40.240 --> 00:19:45.796\nBut if I need it for even seven months,\nlet's say I just need it for seven months,\n\n371\n00:19:45.796 --> 00:19:50.699\nI can do a one year commitment,\nI can pay a $1,082 right up front,\n\n372\n00:19:50.699 --> 00:19:55.605\nand when I get to that seventh\nmonth I've paid $1,082 versus an on\n\n373\n00:19:55.605 --> 00:19:58.840\ndemand where I would have paid $1,098.\n\n374\n00:19:58.840 --> 00:20:05.220\nNow it's not a huge savings, right,\nI saved $16 but I did save, right?\n\n375\n00:20:05.220 --> 00:20:10.421\nI saved some money and that amount\nis gonna grow more, and more and\n\n376\n00:20:10.421 --> 00:20:16.116\nmore each month, by the time you\nget to December I've saved $800.\n\n377\n00:20:16.116 --> 00:20:21.530\nAbout, almost exactly $881.40,\nnow it's a big number, right.\n\n378\n00:20:21.530 --> 00:20:26.140\nBut notice at the very next year, see\nhow that on demand instance becomes more\n\n379\n00:20:26.140 --> 00:20:30.320\naffordable again because of\nthe upfront cost of that yearly.\n\n380\n00:20:30.320 --> 00:20:32.990\nSo now this one's also jumps to 2,164 but\n\n381\n00:20:32.990 --> 00:20:37.010\nthe very next month it's right\nback to being the better choice.\n\n382\n00:20:37.010 --> 00:20:39.620\nWell, unless we throw in the three year.\n\n383\n00:20:39.620 --> 00:20:46.021\nNotice how a three year becomes\ncheaper as of month 14.\n\n384\n00:20:46.021 --> 00:20:50.826\nWhich means if I've got a 15 or 16 month\nproject, even an 18 month project,\n\n385\n00:20:50.826 --> 00:20:55.213\nit's cheaper to do a 3 year commitment,\neven though at the end of a year and\n\n386\n00:20:55.213 --> 00:20:57.880\na half I'm just going\nto turn this stuff off.\n\n387\n00:20:57.880 --> 00:21:01.210\nIt will still end up being cheaper\nbecause it's all been paid up front.\n\n388\n00:21:01.210 --> 00:21:03.940\nAnd everything else is just\ngonna get more, and more and\n\n389\n00:21:03.940 --> 00:21:05.730\nmore expensive beyond that.\n\n390\n00:21:05.730 --> 00:21:09.890\nAnd in that second year it's not a huge\nsavings, we're talking about $40.\n\n391\n00:21:09.890 --> 00:21:14.560\nBut by the time you get to the third\nyear now it's over a $1,000 that\n\n392\n00:21:14.560 --> 00:21:17.590\nyou're saving from going from\none year to three year, right.\n\n393\n00:21:17.590 --> 00:21:21.700\nSo each one has a different tipping\nmonth where they become more efficient.\n\n394\n00:21:21.700 --> 00:21:26.598\nA 1 year reservation becomes\nthe best model at month 7 and\n\n395\n00:21:26.598 --> 00:21:29.500\nthe 3 year becomes the best at month 14.\n\n396\n00:21:29.500 --> 00:21:33.570\nNow be careful because different instances\nare built in different ways and so\n\n397\n00:21:33.570 --> 00:21:39.075\nsometimes like if I change to a, I'm gonna\ndo CPU optimize, I think it's one, there.\n\n398\n00:21:39.075 --> 00:21:43.375\nWhere with the CPU optimized,\nit's not month six for\n\n399\n00:21:43.375 --> 00:21:44.885\nthe on-demand,\nit's actually month seven for\n\n400\n00:21:44.885 --> 00:21:48.695\nthe on-demand, and month eight is where\nthe one year becomes that tipping point.\n\n401\n00:21:48.695 --> 00:21:52.295\nSo sometimes there's a little variation\nlike that, but just be careful with it,\n\n402\n00:21:52.295 --> 00:21:54.725\nmake sure that you use the right one for\nyour environment.\n\n403\n00:21:54.725 --> 00:21:57.820\nSo choosing the right\npricing can be challenging.\n\n404\n00:21:57.820 --> 00:22:01.420\nRight, I mean going between on demand and\nspot instances and\n\n405\n00:22:01.420 --> 00:22:06.430\ndoing reservations, people worry about\nthe reservations when you work it out and\n\n406\n00:22:06.430 --> 00:22:08.530\nlook at the actual payments\nthose reservations.\n\n407\n00:22:08.530 --> 00:22:10.840\nThey save you a lot of money and\n\n408\n00:22:10.840 --> 00:22:14.200\nif you pay up front you set\nthe expectation of your expenses\n\n409\n00:22:14.200 --> 00:22:17.720\nall the beginning of a project which\nyour accountants will appreciate.\n\n410\n00:22:17.720 --> 00:22:22.080\n&gt;&gt; So, Don, we've seen these different\npricing models, and that's good to know,\n\n411\n00:22:22.080 --> 00:22:27.220\nactually, that kinda quells some of my\nfears about having this huge bill that\n\n412\n00:22:27.220 --> 00:22:28.540\nI was unprepared for.\n\n413\n00:22:28.540 --> 00:22:31.860\nBut, what if part of my business\nneeds one type of instance,\n\n414\n00:22:31.860 --> 00:22:35.120\nit just needs things that can spin up,\ngo down or\n\n415\n00:22:35.120 --> 00:22:38.760\nthere's another part that needs\nthat kinda reserve always on.\n\n416\n00:22:38.760 --> 00:22:44.130\nCan I mix and match these, and end up with\na pricing model that works for me there?\n\n417\n00:22:44.130 --> 00:22:47.050\n&gt;&gt; Absolutely and\nusually it's the best solution, right.\n\n418\n00:22:47.050 --> 00:22:49.960\nIn the beginning of this series I talked\nabout how you might have peaks and\n\n419\n00:22:49.960 --> 00:22:51.160\nvalleys in your network, right.\n\n420\n00:22:51.160 --> 00:22:55.000\nAnd there's times when you need up\nto ten instances, or 100 instances.\n\n421\n00:22:55.000 --> 00:22:59.540\nBut when your systems are idle,\nyou only need five, right?\n\n422\n00:22:59.540 --> 00:23:01.360\nI think the diagram that I\nshowed in the other episode,\n\n423\n00:23:01.360 --> 00:23:04.430\nit was ten instances at peak time,\nand only two at idle.\n\n424\n00:23:04.430 --> 00:23:06.970\nSo what I could do is I could look\nat that, and I could say, well,\n\n425\n00:23:06.970 --> 00:23:09.810\nI always need two instances,\nI always have to have those.\n\n426\n00:23:09.810 --> 00:23:13.310\nSo let me go and do three year\nreserved on those two instances.\n\n427\n00:23:13.310 --> 00:23:16.870\nBut then the other eight that I\nhave to spike up to at peak time,\n\n428\n00:23:16.870 --> 00:23:18.430\nI don't always need those.\n\n429\n00:23:18.430 --> 00:23:22.620\nWell, with a reserved instance, if you\nshut one down, you still paid for it.\n\n430\n00:23:22.620 --> 00:23:24.490\nSo you might as well leave it\nrunning all the time, right?\n\n431\n00:23:24.490 --> 00:23:26.370\nSo you don't save any money.\n\n432\n00:23:26.370 --> 00:23:31.070\nBut I could do on-demand or\neven spot instances to cover my peaks.\n\n433\n00:23:31.070 --> 00:23:33.600\nAnd by mixing like that,\nwe can get the most effective ones.\n\n434\n00:23:33.600 --> 00:23:36.240\nI've got a little kind of\ndiagram that shows that.\n\n435\n00:23:36.240 --> 00:23:41.020\nHere is a network that normally is\nhandling about 5,000 requests per hour,\n\n436\n00:23:41.020 --> 00:23:44.230\nand so we do the reserved instances\nto handle the normal load.\n\n437\n00:23:44.230 --> 00:23:48.370\nBut then there's a peak time, and that\npeak time might be some special event at\n\n438\n00:23:48.370 --> 00:23:50.230\nthe company that's not\ngonna be around that long.\n\n439\n00:23:50.230 --> 00:23:52.673\nMaybe it's just for\na couple of days that we need that.\n\n440\n00:23:52.673 --> 00:23:56.149\nI use the example of a university, so\nstudents are registering for courses and\n\n441\n00:23:56.149 --> 00:23:58.688\nthings are really busy, but\nthen it goes back to normal.\n\n442\n00:23:58.688 --> 00:24:02.149\nAnd so I use reserved instances\nto cover the normal work load.\n\n443\n00:24:02.149 --> 00:24:05.944\nAnd I use on-demand instances to handle\nthe peak time because I know I can get\n\n444\n00:24:05.944 --> 00:24:06.606\nrid of them.\n\n445\n00:24:06.606 --> 00:24:08.495\nAnd you can absolutely mix and match.\n\n446\n00:24:08.495 --> 00:24:12.761\nTo create the perfect solution,\nto take care of your network and\n\n447\n00:24:12.761 --> 00:24:14.450\nsave you the most money.\n\n448\n00:24:14.450 --> 00:24:17.160\n&gt;&gt; So, Don,\nI noticed that just a little while ago, we\n\n449\n00:24:17.160 --> 00:24:20.740\nwere talking about these spot instances,\nthe reserved, and then the on-demand.\n\n450\n00:24:20.740 --> 00:24:24.180\nThere seemed to be a fourth option\nabout dedicated instances or something,\n\n451\n00:24:24.180 --> 00:24:25.890\nI may have missed that.\n\n452\n00:24:25.890 --> 00:24:27.640\nBut can you tell us\na little more about that?\n\n453\n00:24:27.640 --> 00:24:28.894\n&gt;&gt; It's the forbidden instance.\n\n454\n00:24:28.894 --> 00:24:29.781\n&gt;&gt; Yeah, no.\n\n455\n00:24:29.781 --> 00:24:33.823\n&gt;&gt; [LAUGH] No, so\nwhen we talk about on-demand and spot and\n\n456\n00:24:33.823 --> 00:24:39.230\nreserved instances, those are all\nin what's called a shared tenancy.\n\n457\n00:24:39.230 --> 00:24:41.100\nSo let me talk about tenancy a little bit.\n\n458\n00:24:41.100 --> 00:24:45.730\nThe reason these prices are so low is\nbecause you're running a virtual machine,\n\n459\n00:24:45.730 --> 00:24:51.880\nan instance, on top of hardware right\nalongside Amazon's other customers.\n\n460\n00:24:51.880 --> 00:24:53.717\nSo I'm spinning up the instances here,\n\n461\n00:24:53.717 --> 00:24:56.750\nyou might be spinning up instances\nright now on the same hardware.\n\n462\n00:24:56.750 --> 00:24:58.760\nYou and I might be on the same stuff,\nI don't know.\n\n463\n00:24:58.760 --> 00:25:01.820\nAnd we're completely isolated, so\nwe have no way of knowing, can't tell.\n\n464\n00:25:01.820 --> 00:25:05.455\nSomebody really, really bad could be\nrunning an instance right next door to\n\n465\n00:25:05.455 --> 00:25:06.420\nyou, and you don't know it.\n\n466\n00:25:06.420 --> 00:25:08.683\nIt could be your direct competitor,\nit could be your best friend, who knows?\n\n467\n00:25:08.683 --> 00:25:10.090\nAnd somebody else could be there.\n\n468\n00:25:10.090 --> 00:25:15.170\nWell, when that happens,\nyou're sharing access to resources.\n\n469\n00:25:15.170 --> 00:25:17.670\nAnd that means you don't\nalways have access.\n\n470\n00:25:17.670 --> 00:25:20.590\nThere's things like memory, you'll always\nhave access to the memory you need.\n\n471\n00:25:20.590 --> 00:25:22.970\nBut CPU is not like that, right?\n\n472\n00:25:22.970 --> 00:25:28.720\nI might have four VCPUs, but then I have\nECUs, my elastic compute units, and those\n\n473\n00:25:28.720 --> 00:25:33.440\nECUs are saying, here's how much I can\nkind of guarantee I'll get out of the CPU.\n\n474\n00:25:33.440 --> 00:25:37.010\nBut it's not always gonna be there,\nespecially if I exceed my ECUs.\n\n475\n00:25:37.010 --> 00:25:38.770\nWell, we might not want that.\n\n476\n00:25:38.770 --> 00:25:41.510\nI might want dedicated hardware,\n\n477\n00:25:41.510 --> 00:25:45.310\nhardware where only my instances\nrun on it and nobody else's.\n\n478\n00:25:45.310 --> 00:25:47.540\nI might be doing it for\nsecurity and compliance reasons,\n\n479\n00:25:47.540 --> 00:25:49.210\nI might be doing it for\nperformance reasons.\n\n480\n00:25:49.210 --> 00:25:50.870\nThese are all different reasons.\n\n481\n00:25:50.870 --> 00:25:53.960\nBut I might want to have\ndedicated hardware just for me.\n\n482\n00:25:53.960 --> 00:25:56.030\nNow that's more expensive.\n\n483\n00:25:56.030 --> 00:25:59.210\nBecause now, Amazon's not able to share\nthat hardware with other customers,\n\n484\n00:25:59.210 --> 00:26:00.960\nit's just with you.\n\n485\n00:26:00.960 --> 00:26:04.760\nAnd if you're not using it to its\nfullest extent, nobody else can use it.\n\n486\n00:26:04.760 --> 00:26:07.350\nSo they have to charge you for\nthe fullest extent.\n\n487\n00:26:07.350 --> 00:26:09.220\nThis is the most expensive one.\n\n488\n00:26:09.220 --> 00:26:12.654\nBut if that's what you need,\nif you need it for security and\n\n489\n00:26:12.654 --> 00:26:17.061\ncompliance or for performance,\nthen you're just gonna have to pay extra.\n\n490\n00:26:17.061 --> 00:26:20.263\nHow you get performance is by\nthrowing money at the problem, right?\n\n491\n00:26:20.263 --> 00:26:25.950\n[LAUGH] And so in this scenario,\nthat's what a dedicated host would be.\n\n492\n00:26:25.950 --> 00:26:29.610\nSo when we look at the pricing here,\nyou've got dedicated host right here.\n\n493\n00:26:29.610 --> 00:26:32.973\nAnd you'll see where dedicated\nhosts can be on-demand, right?\n\n494\n00:26:34.050 --> 00:26:37.836\nOr they can be reserved, and\nit says that you can reserve for\n\n495\n00:26:37.836 --> 00:26:41.730\nup to 70% off the on-demand price,\nso at a savings.\n\n496\n00:26:41.730 --> 00:26:44.390\nBut if we look at the dedicated\npricing on here, and\n\n497\n00:26:44.390 --> 00:26:48.540\nwe start to kind of pull this up and\nI find like an M4.\n\n498\n00:26:51.120 --> 00:26:55.980\nAnd notice how it's not an M4 large or\nan M4 extra large or whatever,\n\n499\n00:26:55.980 --> 00:27:01.410\nbecause we don't have ECUs here anymore,\nnow it's sockets and physical cores.\n\n500\n00:27:01.410 --> 00:27:05.036\nI mean, you do still have the notes\nof the individual instance types cuz\n\n501\n00:27:05.036 --> 00:27:07.210\nyou're allocating that yourself.\n\n502\n00:27:07.210 --> 00:27:09.290\nBut it's dedicated hardware at this\npoint that you have access to.\n\n503\n00:27:09.290 --> 00:27:11.270\nSo you've got your sockets and\nphysical cores.\n\n504\n00:27:11.270 --> 00:27:16.605\nSo I can do an M4, and this server would\nhave two sockets and 24 physical cores.\n\n505\n00:27:16.605 --> 00:27:19.153\nAnd so if I start to deploy my\nvirtual machines on MI instances,\n\n506\n00:27:19.153 --> 00:27:20.509\nthey can take advantage of that.\n\n507\n00:27:20.509 --> 00:27:25.991\nBut I can have up to 22 M4 larges or\nup to 11 M4 extra large or\n\n508\n00:27:25.991 --> 00:27:30.346\n5 M2 extra large, or\nI can mix and match inside.\n\n509\n00:27:30.346 --> 00:27:34.043\nThey're just kinda showing the maximum\namount of instances I could have on here\n\n510\n00:27:34.043 --> 00:27:35.820\nper host that I reserve.\n\n511\n00:27:35.820 --> 00:27:41.599\nAnd when you get down to the pricing, that\nM4 host is gonna cost you $2,608 per hour,\n\n512\n00:27:41.599 --> 00:27:44.774\nregardless of what instances\nyou stick on there.\n\n513\n00:27:44.774 --> 00:27:49.323\nIf I stick 22 M4 larges on there or\nif I stick 11 M4 extra larges or\n\n514\n00:27:49.323 --> 00:27:53.262\nwhatever, I'm going to be\npaying $2,608 per hour.\n\n515\n00:27:53.262 --> 00:27:57.980\nAnd if I bump that up into a reservation,\nthe pricing starts to go down.\n\n516\n00:27:57.980 --> 00:28:02.926\nSo if I do a three year\nterm with all upfront,\n\n517\n00:28:02.926 --> 00:28:06.287\nI would pay $25,557.\n\n518\n00:28:06.287 --> 00:28:07.711\nNow, I know what you're thinking.\n\n519\n00:28:07.711 --> 00:28:09.940\nWell, no, I don't, but\nI know what I'm thinking.\n\n520\n00:28:09.940 --> 00:28:15.423\nWhich is, when I look up here,\nfor two sockets and 24 cores,\n\n521\n00:28:15.423 --> 00:28:21.216\nI could probably buy a server with\ntwo 12 core processors in it and\n\n522\n00:28:21.216 --> 00:28:27.964\nchuck some memory in it, and\nI could probably do that for 8 to $9,000.\n\n523\n00:28:27.964 --> 00:28:32.460\nSo what gets us up to $25,000, that\nseems a little outrageous, doesn't it?\n\n524\n00:28:32.460 --> 00:28:36.820\nWell remember, you pay for a lot more,\nyou pay for power, network bandwidth.\n\n525\n00:28:36.820 --> 00:28:40.800\nYou pay for physical maintenance of the\nserver, they have to have technicians that\n\n526\n00:28:40.800 --> 00:28:43.280\nare keeping the warranty up to date,\nyou have to pay for all those things.\n\n527\n00:28:43.280 --> 00:28:46.060\nThose all get factored in too,\nso it's not apples to apples to\n\n528\n00:28:46.060 --> 00:28:48.995\ncompare just the cost of a physical\nserver to what we get here.\n\n529\n00:28:48.995 --> 00:28:52.790\nBut that price goes up, and so that's why\nI call it the forbidden instance type.\n\n530\n00:28:52.790 --> 00:28:54.270\nIt's not that it's forbidden.\n\n531\n00:28:54.270 --> 00:28:58.140\nIt's that you gotta make darn sure that's\nexactly what you need before you go down\n\n532\n00:28:58.140 --> 00:28:59.970\nthat route of getting a dedicated host.\n\n533\n00:28:59.970 --> 00:29:04.180\nSo this is the alternative\nto shared tendency,\n\n534\n00:29:04.180 --> 00:29:06.850\nshared tendency's where\nyou really save money.\n\n535\n00:29:06.850 --> 00:29:10.180\nDedicated hosts is where you're basically\nco-locating servers at this point,\n\n536\n00:29:10.180 --> 00:29:12.140\nyou just don't own the server.\n\n537\n00:29:12.140 --> 00:29:15.229\n&gt;&gt; So Don, the sharing of hardware,\nthat seems nice, but\n\n538\n00:29:15.229 --> 00:29:19.440\nI've actually worked on a couple of\napplications where having things close\n\n539\n00:29:19.440 --> 00:29:21.434\ntogether were advantageous to me.\n\n540\n00:29:21.434 --> 00:29:25.136\nIs there anything like that, where I can\nsqueeze out a little more performance,\n\n541\n00:29:25.136 --> 00:29:28.141\na little more power out of that\nhardware that's being utilized?\n\n542\n00:29:28.141 --> 00:29:30.480\n&gt;&gt; Yeah, there's always alternatives,\nthings other than dedicated host.\n\n543\n00:29:30.480 --> 00:29:34.100\nSo, I usually only use dedicated host\nwhen it's security compliance, right?\n\n544\n00:29:34.100 --> 00:29:35.770\nWhen we're dealing with medical records or\n\n545\n00:29:35.770 --> 00:29:38.200\nwhatever, we're not allowed\nto use shared tendencies.\n\n546\n00:29:38.200 --> 00:29:40.110\nThat's really when I use dedicated host.\n\n547\n00:29:40.110 --> 00:29:42.028\nIf it's just performances,\nthere's other things we can do.\n\n548\n00:29:42.028 --> 00:29:44.720\nYou can scale out, add more systems.\n\n549\n00:29:44.720 --> 00:29:47.995\nFor network bandwidth, you can actually\nuse what are called placement groups.\n\n550\n00:29:47.995 --> 00:29:52.280\nPlacement groups are where I intentionally\nput services close to each other.\n\n551\n00:29:52.280 --> 00:29:54.161\nNow, when I have dedicated hosts,\n\n552\n00:29:54.161 --> 00:29:56.930\nI can put two instances right\nthere on the same host.\n\n553\n00:29:56.930 --> 00:29:59.940\nThat's as close as you can get,\nI know they're gonna talk really fast.\n\n554\n00:29:59.940 --> 00:30:02.300\nBut with placement groups,\nwe can kinda do the same thing.\n\n555\n00:30:02.300 --> 00:30:06.770\nThe reality is as long as you keep\nyour instances in the same AZ,\n\n556\n00:30:06.770 --> 00:30:09.500\nthey're gonna have a 10 gigabyte\nconnection between them, right,\n\n557\n00:30:09.500 --> 00:30:11.150\na non-blocking network connection.\n\n558\n00:30:11.150 --> 00:30:15.830\nSo if I have web frontends and\na relational database backend, if I have\n\n559\n00:30:15.830 --> 00:30:20.290\nthem in the same availability zone, then\ngood, 10 gigabyte connection between them.\n\n560\n00:30:20.290 --> 00:30:22.620\nThat's gonna be pretty darn good, right?\n\n561\n00:30:22.620 --> 00:30:26.090\nYou can get some great performance there\nwithout having to go to a dedicated host.\n\n562\n00:30:26.090 --> 00:30:28.510\nNow, the dedicated host is always there,\nit's an option.\n\n563\n00:30:28.510 --> 00:30:30.430\nIt's available for you, you can choose it.\n\n564\n00:30:30.430 --> 00:30:34.813\nBut for most of us, performance is not\ngonna be the driving reason for that.\n\n565\n00:30:34.813 --> 00:30:36.225\n&gt;&gt; So, Don, thanks for\n\n566\n00:30:36.225 --> 00:30:41.566\nhelping us reveal that that's actually\na very complicating pricing schedule.\n\n567\n00:30:41.566 --> 00:30:44.710\nI wish I had Excel mastery like you do-\n&gt;&gt; [LAUGH]\n\n568\n00:30:44.710 --> 00:30:45.884\n&gt;&gt; Cuz I was like wow,\n\n569\n00:30:45.884 --> 00:30:51.510\nI wish I had something like that when I\nwas kind of dipping my toes into AWS land.\n\n570\n00:30:51.510 --> 00:30:54.289\nHowever, it does look like\nwe're a little out of time, but\n\n571\n00:30:54.289 --> 00:30:56.580\nI know we have some more\nto talk about about EC2.\n\n572\n00:30:56.580 --> 00:31:00.975\nSo please tune in for additional episodes\nabout EC2, we have some storage and\n\n573\n00:31:00.975 --> 00:31:02.830\nstuff that's coming up.\n\n574\n00:31:02.830 --> 00:31:06.630\nBut for now, signing out for ITProTV,\nI've been your host, Justin Dennison.\n\n575\n00:31:06.630 --> 00:31:07.577\n&gt;&gt; And I'm Don Pezet.\n\n576\n00:31:07.577 --> 00:31:09.001\n&gt;&gt; See you next time.\n\n577\n00:31:09.001 --> 00:31:14.903\n[MUSIC]\n\n578\n00:31:14.903 --> 00:31:18.471\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207294187"
        },
        {
          "description": "In this episode, Justin and Don discuss storage options, ephemeral versus Elastic Block Storage(EBS), for EC2 and the impact these options make when planning the system. They also discuss managing the types of EBS, EBS can be backed or recovered, as well as encryption options for those EBS solutions.",
          "length": "1483",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-4-amazon_ec2_basics_pt4-030317.00_28_16_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-4-amazon_ec2_basics_pt4-030317.00_28_16_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-3-1-4-amazon_ec2_basics_pt4-030317.00_28_16_01.Still001-sm.jpg",
          "title": "Amazon EC2 Basics Part 4",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:06.465\nWelcome to ITPRO.TV,\nI'm your host Don Pezet [CROSSTALK]\n\n2\n00:00:06.465 --> 00:00:08.523\n[MUSIC]\n\n3\n00:00:08.523 --> 00:00:11.844\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:11.844 --> 00:00:16.110\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITPRO.TV.\n\n5\n00:00:16.110 --> 00:00:17.413\nI'm your host Justin Dennison.\n\n6\n00:00:17.413 --> 00:00:20.840\nAnd in today's episode, we're gonna\ncontinue with a part four on EC2.\n\n7\n00:00:20.840 --> 00:00:25.011\nIn particular, we're gonna be talking\nabout stored solutions available to\n\n8\n00:00:25.011 --> 00:00:26.754\nus when using the EC2 service.\n\n9\n00:00:26.754 --> 00:00:29.840\nAnd to help us on that endeavor,\nis Mr. Don Pezet.\n\n10\n00:00:29.840 --> 00:00:30.796\nHow are you doing today Don?\n\n11\n00:00:30.796 --> 00:00:31.663\n&gt;&gt; I am doing great, Justin.\n\n12\n00:00:31.663 --> 00:00:35.060\nReady to start storing some\nstuff in our cloud storage.\n\n13\n00:00:35.060 --> 00:00:39.449\nAnd it is kind of important though when\nwe start moving our data up into EC2,\n\n14\n00:00:39.449 --> 00:00:42.003\nthat data behaves the way\nwe expect it to be.\n\n15\n00:00:42.003 --> 00:00:45.630\nAnd is there when we want it to be, so\nthere are a few decisions we have to make.\n\n16\n00:00:45.630 --> 00:00:48.850\nAnd some of them are pretty darn important\nif you want to get the performance profile\n\n17\n00:00:48.850 --> 00:00:49.916\nthat you're looking for.\n\n18\n00:00:49.916 --> 00:00:53.100\nSo that's what we're gonna take a look\nat as we move right through EC2 storage.\n\n19\n00:00:53.100 --> 00:00:57.840\n&gt;&gt; So Don, I've built a couple of\ndata-sciency type applications and\n\n20\n00:00:57.840 --> 00:01:00.280\nused containers and tried to use EC2.\n\n21\n00:01:00.280 --> 00:01:04.290\nAnd something that always made me afraid\nwas this idea of ephemeral storage,\n\n22\n00:01:04.290 --> 00:01:06.540\nthat my data might just disappear.\n\n23\n00:01:06.540 --> 00:01:07.775\nCan you tell us a little bit about that?\n\n24\n00:01:07.775 --> 00:01:09.910\nHow that plays in.\n\n25\n00:01:09.910 --> 00:01:14.079\n&gt;&gt; All right, so\nstorage in AWS EC2 is different.\n\n26\n00:01:14.079 --> 00:01:16.490\nIt's different than what we're\nused to in a lot of scenarios.\n\n27\n00:01:16.490 --> 00:01:20.860\nAnd that means that when somebody's\ncoming from an on-premise solution, and\n\n28\n00:01:20.860 --> 00:01:23.740\nmoving into the cloud,\nthey can misunderstand the way\n\n29\n00:01:23.740 --> 00:01:28.200\nthe storage works and it can lead to\nconfusion, frustration and even data loss.\n\n30\n00:01:28.200 --> 00:01:31.230\nAnd it's one of the fears that a lot of\npeople have with moving to the cloud that\n\n31\n00:01:31.230 --> 00:01:34.650\nthe two greatest fear\nI hear about is price,\n\n32\n00:01:34.650 --> 00:01:39.280\nunderstanding how much it's gonna cost and\nthen ephemeral storage and how that works.\n\n33\n00:01:39.280 --> 00:01:44.923\nWhen you deploy an Instance in EC2,\nthe instance has storage attached to it.\n\n34\n00:01:44.923 --> 00:01:46.295\nSometimes it's got a lot of storage,\n\n35\n00:01:46.295 --> 00:01:47.845\nsometimes it just has\na little bit of storage, but\n\n36\n00:01:47.845 --> 00:01:49.995\nit has storage attached to it.\n\n37\n00:01:49.995 --> 00:01:52.305\nAnd that storage can come\nin two different forms.\n\n38\n00:01:52.305 --> 00:01:57.935\nThere's ephemeral storage and there's\nEBS or Elastic Block Store storage.\n\n39\n00:01:57.935 --> 00:02:00.165\nIt's a little redundant but\nthat's what it is, EBS storage.\n\n40\n00:02:00.165 --> 00:02:05.270\nAnd with ephemeral storage like the name\nimplies, it's temporary, right.\n\n41\n00:02:05.270 --> 00:02:06.930\nIt's kind of like RAM in a computer,\n\n42\n00:02:06.930 --> 00:02:11.770\nwhen you have RAM on your PC and\nyou shut the PC down, what happens to RAM?\n\n43\n00:02:11.770 --> 00:02:13.280\nIt gets erased, it goes away.\n\n44\n00:02:13.280 --> 00:02:17.630\nWell ephemeral storage is like that too,\nif you stop an instance, or\n\n45\n00:02:17.630 --> 00:02:21.370\nif you terminate an instance,\nwhatever's in ephemeral storage is gone.\n\n46\n00:02:22.470 --> 00:02:24.800\nIf you reboot, it stays,\nit'll survive a reboot,\n\n47\n00:02:24.800 --> 00:02:26.630\ncuz you have to update a system whenever.\n\n48\n00:02:26.630 --> 00:02:29.540\nBut if you shut the instance down,\nif you stop it, or\n\n49\n00:02:29.540 --> 00:02:32.690\nif you terminate it,\nephemeral storage disappears.\n\n50\n00:02:32.690 --> 00:02:36.550\nElastic block store, on the other hand,\nthe EBS storage, that stays around.\n\n51\n00:02:36.550 --> 00:02:39.670\nThat stays more permanently,\nso if I shut a system out.\n\n52\n00:02:39.670 --> 00:02:41.910\nIf I terminate a system,\n\n53\n00:02:41.910 --> 00:02:45.410\nthe EBS volume that's storing that\ndata wills till be there for me.\n\n54\n00:02:45.410 --> 00:02:48.438\nSo why are there two?\n\n55\n00:02:48.438 --> 00:02:50.030\nWhy do we even have this?\n\n56\n00:02:50.030 --> 00:02:53.480\nWell the main reason is,\nyou have to remember that in EC2,\n\n57\n00:02:53.480 --> 00:02:58.700\nwhere we really get the greatest use\nout of it, is through auto scaling.\n\n58\n00:02:58.700 --> 00:03:02.570\nWhen we can rapidly spin up more\nweb servers when we need them and\n\n59\n00:03:02.570 --> 00:03:05.120\nthen get rid of the web servers\nwhen we don't need them anymore.\n\n60\n00:03:05.120 --> 00:03:08.710\nSo we need to be rapidly adding and\nremoving instances.\n\n61\n00:03:08.710 --> 00:03:12.020\nAnd when those instances come up,\nbecause they're temporary,\n\n62\n00:03:12.020 --> 00:03:14.800\nis there any permanent\ndata on that instance?\n\n63\n00:03:14.800 --> 00:03:15.970\nThere shouldn't be.\n\n64\n00:03:15.970 --> 00:03:18.860\nIt should come up,\nreach out on the network and\n\n65\n00:03:18.860 --> 00:03:22.730\ngrab the latest copy of your webpage,\nand start serving it up.\n\n66\n00:03:22.730 --> 00:03:24.250\nAnd when it's done, it can shut down,\n\n67\n00:03:24.250 --> 00:03:28.010\nand because it just had a copy of\nthe webpage It can get deleted, who cares?\n\n68\n00:03:28.010 --> 00:03:30.140\nIt was just a copy anyway, right?\n\n69\n00:03:30.140 --> 00:03:32.010\nWe don't care about that data.\n\n70\n00:03:32.010 --> 00:03:35.568\nAnd so ephemeral storage\nworks out great for that.\n\n71\n00:03:35.568 --> 00:03:39.900\nBut in on-premises, when we have a web\nserver, you've always got the web server.\n\n72\n00:03:39.900 --> 00:03:41.340\nWhen you power up,\nit's got the webpage on there.\n\n73\n00:03:41.340 --> 00:03:43.370\nAnd if I shut it down,\nthe webpage is still on there.\n\n74\n00:03:43.370 --> 00:03:44.700\nAnd I power up later,\nand it's still there.\n\n75\n00:03:44.700 --> 00:03:45.430\nThat's what we're used to.\n\n76\n00:03:45.430 --> 00:03:47.100\nWe're used to that data lasting.\n\n77\n00:03:47.100 --> 00:03:48.890\nBut with ephemeral storage, it doesn't.\n\n78\n00:03:48.890 --> 00:03:52.534\nAnd if you've designed your cloud\nsolution properly, that's fine.\n\n79\n00:03:52.534 --> 00:03:55.462\nYou don't care that the data is temporary,\nespecially on a server that's only going\n\n80\n00:03:55.462 --> 00:03:59.110\nto be around for a little while anyway\nwhile you're handling some peak load.\n\n81\n00:03:59.110 --> 00:04:03.210\nBut, for data that is permanent,\nmaybe I've got a database.\n\n82\n00:04:03.210 --> 00:04:06.610\nAnd that database is storing\nmy customer purchases, right.\n\n83\n00:04:06.610 --> 00:04:09.037\nSo we've got all of our\nreceipts in this database.\n\n84\n00:04:09.037 --> 00:04:11.980\nI don't wanna lose that the next\ntime I shut the server down.\n\n85\n00:04:11.980 --> 00:04:14.320\nThat's data that I need to keep forever.\n\n86\n00:04:14.320 --> 00:04:16.940\nAnd so in those scenarios,\nwe wanna use EBS.\n\n87\n00:04:16.940 --> 00:04:21.660\nWell every instance that we deploy\nhas elastic block storage available.\n\n88\n00:04:21.660 --> 00:04:23.380\nI believe every instance does.\n\n89\n00:04:23.380 --> 00:04:26.170\nSome of them have both, ephemeral and EBS.\n\n90\n00:04:26.170 --> 00:04:29.319\nI don't believe any instance just\nhas ephemeral storage anymore.\n\n91\n00:04:29.319 --> 00:04:31.180\nI think there was one a long time ago,\nbut not anymore.\n\n92\n00:04:32.210 --> 00:04:35.560\nSo, what you'll typically see is\nwhere systems are using EBS for\n\n93\n00:04:35.560 --> 00:04:38.870\nthe entire computer, the entire instance.\n\n94\n00:04:38.870 --> 00:04:42.810\nSo when you store data on there, it's\nElastic Block Store, it will stick around.\n\n95\n00:04:42.810 --> 00:04:44.360\nThe data's going to be there.\n\n96\n00:04:44.360 --> 00:04:47.939\nBut if you deploy an instance\nthat has both, ephemeral and EBS,\n\n97\n00:04:47.939 --> 00:04:52.259\nyou need to make sure any data you intend\non retaining stays in the EBS volume.\n\n98\n00:04:52.259 --> 00:04:55.240\nAnd everything else can\ngo in the ephemeral.\n\n99\n00:04:55.240 --> 00:04:57.780\nWhen I say everything else,\nI mean like the operating system.\n\n100\n00:04:57.780 --> 00:04:59.103\nBecause I don't need the operating system.\n\n101\n00:04:59.103 --> 00:05:00.324\nIf I'm going to spin up a new instance,\n\n102\n00:05:00.324 --> 00:05:02.190\nit'll have its own\noperating system anyway.\n\n103\n00:05:02.190 --> 00:05:06.660\nI don't need temporary files and swap or\npage files, I don't need stuff like that.\n\n104\n00:05:06.660 --> 00:05:07.790\nI need my data.\n\n105\n00:05:07.790 --> 00:05:10.811\nMy data needs to be on the E B S volume.\n\n106\n00:05:10.811 --> 00:05:14.560\n&gt;&gt; So, Don, this E B S thing,\nthat seems like a good solution to that\n\n107\n00:05:14.560 --> 00:05:19.061\npersistent data, but just like some\nother Amazon services that we've seen,\n\n108\n00:05:19.061 --> 00:05:21.870\nI have a feeling that it's\njust not that simple.\n\n109\n00:05:21.870 --> 00:05:24.047\nMaybe there's a little more\nconsideration that we need to make.\n\n110\n00:05:24.047 --> 00:05:26.260\nAre there different types of EBS?\n\n111\n00:05:26.260 --> 00:05:28.229\n&gt;&gt; There are and\nit does make a difference, right?\n\n112\n00:05:28.229 --> 00:05:31.988\nBecause if you look, here I've got two\ninstances deployed in my environment,\n\n113\n00:05:31.988 --> 00:05:34.390\nthey're stopped right now but that's fine.\n\n114\n00:05:34.390 --> 00:05:36.499\nNow, if they're stopped and\nthey had ephemeral storage,\n\n115\n00:05:36.499 --> 00:05:37.773\nthe ephemeral storage is now gone.\n\n116\n00:05:37.773 --> 00:05:41.833\nBut they both have EBS storage on them and\nif I take a look at these two guys and\n\n117\n00:05:41.833 --> 00:05:42.747\ntheir volumes.\n\n118\n00:05:42.747 --> 00:05:47.320\nWell, one of them is an m4.large and\nthe other's an m4.xlarge.\n\n119\n00:05:47.320 --> 00:05:50.260\nSo they're both m4s but\none's a higher level.\n\n120\n00:05:50.260 --> 00:05:53.012\nAnd so when I deployed them,\nthey both had volumes attached to them.\n\n121\n00:05:53.012 --> 00:05:57.210\nSo I'm gonna go down here to my elastic\nblock store, and here's the two volumes.\n\n122\n00:05:57.210 --> 00:06:01.860\nAnd if you look one,\nhas 30 gigabytes of ebs, and\n\n123\n00:06:01.860 --> 00:06:04.070\nthe other one has 8 gigabytes of ebs.\n\n124\n00:06:04.070 --> 00:06:08.425\nThe M4 large only gets 8 gigs but\nthe m4 extra large get's 30 gigs so\n\n125\n00:06:08.425 --> 00:06:11.848\nit get's more storage because\nit's that higher tier.\n\n126\n00:06:11.848 --> 00:06:16.760\nAs you move through each tier,\neach class of instance.\n\n127\n00:06:16.760 --> 00:06:19.530\nThey'll have more and\nmore resources available.\n\n128\n00:06:19.530 --> 00:06:22.580\nBut, notice over here the volume type,\nit says G P two.\n\n129\n00:06:22.580 --> 00:06:25.990\nThere's actually three different\nvolume types you can pick from.\n\n130\n00:06:25.990 --> 00:06:28.880\nMagnetic, G P two and I ops.\n\n131\n00:06:28.880 --> 00:06:31.580\nAnd, each one is kind of designed for\na different solution.\n\n132\n00:06:31.580 --> 00:06:33.752\nIf I were to spin up a new system,\nlet me create a.\n\n133\n00:06:33.752 --> 00:06:35.810\nI'll do a whole new instance.\n\n134\n00:06:35.810 --> 00:06:38.520\nWhen I launch a new instance and I go, and\n\n135\n00:06:38.520 --> 00:06:42.950\nI'll stick with the Amazon Linux AMI,\nand I pick my instance type.\n\n136\n00:06:42.950 --> 00:06:47.870\nWhen you look at the instance type,\nnotice how we've got Instance Storage and\n\n137\n00:06:47.870 --> 00:06:52.730\nwhether EBS Optimized is available, and\nas you look most of these are EBS only.\n\n138\n00:06:52.730 --> 00:06:54.995\nThey have just Elastic Block Store.\n\n139\n00:06:54.995 --> 00:07:00.732\nRight, but then some of them have\noptimized ElasticBox store and\n\n140\n00:07:00.732 --> 00:07:04.810\nothers have SSDs, even better performance.\n\n141\n00:07:04.810 --> 00:07:07.470\nWe have these variations in performance\nthat we can get right there,\n\n142\n00:07:07.470 --> 00:07:09.690\njust based on the instance you choose.\n\n143\n00:07:09.690 --> 00:07:12.638\nNow once you choose one though,\nlike I'll take M4 whoops [LAUGH].\n\n144\n00:07:12.638 --> 00:07:17.861\nI will try and take an M4 large and\nwhen I take an m4 large, and\n\n145\n00:07:17.861 --> 00:07:23.360\nI move forward,\nit's gonna ask me a little bit more, okay?\n\n146\n00:07:23.360 --> 00:07:26.210\nWhen I move up to,\nI'll just jump ahead to storage here.\n\n147\n00:07:26.210 --> 00:07:29.590\nI can see that it's going to\nget eight gigs of storage.\n\n148\n00:07:29.590 --> 00:07:30.530\nWe saw that before.\n\n149\n00:07:30.530 --> 00:07:32.580\nNow I can increase that size if I want.\n\n150\n00:07:32.580 --> 00:07:34.060\nI can bump it up right here.\n\n151\n00:07:34.060 --> 00:07:35.150\nAnd see what it's telling me right here?\n\n152\n00:07:35.150 --> 00:07:37.870\nI've got a free usage tier\nup to 30 gigabytes of data.\n\n153\n00:07:37.870 --> 00:07:41.205\nSo I could bump it up to 30, and\nI don't even have to pay for that.\n\n154\n00:07:41.205 --> 00:07:43.210\nWell, this is an M4 large instance,\n\n155\n00:07:43.210 --> 00:07:46.700\nthe instance is gonna have a cost\nassociated with it no matter what I do.\n\n156\n00:07:46.700 --> 00:07:49.790\nBut I can bump that size up, and\nI can go really large if I want.\n\n157\n00:07:49.790 --> 00:07:53.900\nWell, what I'm looking at here\nis a general purpose disk, GP2.\n\n158\n00:07:53.900 --> 00:07:56.737\nAnd all the general purpose\nstorage is SSD now.\n\n159\n00:07:56.737 --> 00:07:59.762\nIt used to be that you\nhad magnetic as well, and\n\n160\n00:07:59.762 --> 00:08:03.884\nall the storage was magnetic and\nyou had to pay extra to get SSD.\n\n161\n00:08:03.884 --> 00:08:08.924\nWell Amazon has that economy of scale so\nthings are a lot cheaper now and\n\n162\n00:08:08.924 --> 00:08:12.440\nthey just do SSD as part\nof the normal cost.\n\n163\n00:08:12.440 --> 00:08:14.620\nNow when we deploy this,\n\n164\n00:08:14.620 --> 00:08:17.565\npay attention to what's going on\nin this IOPS Column over here.\n\n165\n00:08:17.565 --> 00:08:23.475\nSee how I've got General Purpose SSD and\nit's showing 100 out of 3000 IOPS, okay.\n\n166\n00:08:23.475 --> 00:08:25.718\nIOPS are input output\noperations per seconds.\n\n167\n00:08:25.718 --> 00:08:29.015\nHow busy do I think this\ndisk is going to be?\n\n168\n00:08:29.015 --> 00:08:33.031\nInput output operations,\nthat's reads and writes, so right now,\n\n169\n00:08:33.031 --> 00:08:36.158\nI'm guaranteed 100 reads and\nwrites per second.\n\n170\n00:08:36.158 --> 00:08:41.340\nWhat if I have 101 or 110 or\n300 reads per write per second?\n\n171\n00:08:41.340 --> 00:08:43.220\nWell that's gonna exceed my guarantee.\n\n172\n00:08:43.220 --> 00:08:45.939\nI might be able to do it.\nIf the underlying subsystems are idle I\n\n173\n00:08:45.939 --> 00:08:47.560\nmight be able to do 300.\n\n174\n00:08:47.560 --> 00:08:51.993\nBut I'm only guaranteed 100 and\nafter that the system might get slower.\n\n175\n00:08:51.993 --> 00:08:56.830\nAnd so I might need to bump that\nup to be able to handle that.\n\n176\n00:08:56.830 --> 00:09:00.830\nNow with general purpose storage\naway we bump that up is by throwing,\n\n177\n00:09:00.830 --> 00:09:02.270\nwell throwing money at the problem.\n\n178\n00:09:02.270 --> 00:09:04.250\nThe way we throw money here\nis we increase the size.\n\n179\n00:09:04.250 --> 00:09:06.570\nThis is an eight gig disk.\n\n180\n00:09:06.570 --> 00:09:10.080\nAnd on an eight gig disk I'm\nonly guaranteed 100 IOPS.\n\n181\n00:09:10.080 --> 00:09:11.785\nBut if I bump that up, and\n\n182\n00:09:11.785 --> 00:09:16.027\nI make it an 80 gig disk see how\nmy IOPS just went up to 240?\n\n183\n00:09:16.027 --> 00:09:20.830\nOr if I go even bigger,\nI'll do a 800 gig disk.\n\n184\n00:09:20.830 --> 00:09:22.210\nNow I'm at 2400 IOPS, okay?\n\n185\n00:09:23.450 --> 00:09:28.739\nSo now I can do 2400 input output\noperations per second, and I'll get it.\n\n186\n00:09:28.739 --> 00:09:31.680\nI might not need 800 gigs of storage.\n\n187\n00:09:31.680 --> 00:09:33.025\nI might only need 8 gigs of storage.\n\n188\n00:09:33.025 --> 00:09:37.709\nBut by provisioning 800, I'm guaranteeing\nthat performance profile for me.\n\n189\n00:09:37.709 --> 00:09:42.060\nIf I flip that back to Magnetic,\nlook at the guarantee I get.\n\n190\n00:09:42.060 --> 00:09:45.410\nI don't they don't guarantee\nanything with Magnetic.\n\n191\n00:09:45.410 --> 00:09:49.470\nIf you go with Magnetic, maybe you get\ngreat performance, maybe you don't.\n\n192\n00:09:49.470 --> 00:09:51.710\nAnd that's because you're not\nsupposed to use it anymore.\n\n193\n00:09:51.710 --> 00:09:52.790\nThis is the older storage.\n\n194\n00:09:52.790 --> 00:09:55.400\nYou should be moving away from that.\n\n195\n00:09:55.400 --> 00:09:57.044\nIn most scenarios it\ndoesn't save you any money.\n\n196\n00:09:57.044 --> 00:10:00.217\nThere are some AMI templates,\nthere's some images that you can pull from\n\n197\n00:10:00.217 --> 00:10:03.403\nthe marketplace that still use magnetic\ncuz they haven't been updated.\n\n198\n00:10:03.403 --> 00:10:06.380\nThat's a good sign you shouldn't\nbe using that image anymore.\n\n199\n00:10:06.380 --> 00:10:08.501\nSo you really shouldn't be\nleveraging magnetic that way.\n\n200\n00:10:08.501 --> 00:10:13.076\nAll right now, the problem with\nGeneral Purpose is I have to\n\n201\n00:10:13.076 --> 00:10:17.759\nportion out a big amount of\nstorage just to get those IOPS up.\n\n202\n00:10:17.759 --> 00:10:22.190\nThere is another way to do it, let's\nsay I only need 8 Gigs of storage but\n\n203\n00:10:22.190 --> 00:10:26.926\nI need those guaranteed IOPS that's\nwhere I can switch to provisioned IOPS.\n\n204\n00:10:26.926 --> 00:10:30.602\nIt's SSD, just like we saw before,\nexcept here,\n\n205\n00:10:30.602 --> 00:10:34.546\nI can specify the amount of\nIOPS that I want to reserve.\n\n206\n00:10:34.546 --> 00:10:36.980\nOkay so, what I want to get on here and\n\n207\n00:10:36.980 --> 00:10:41.910\nnotice let me see if I can get all this\nall on my screen yeah that was it.\n\n208\n00:10:41.910 --> 00:10:47.800\nHow it's got maximum of 10,\n000 IO operations per second, right.\n\n209\n00:10:47.800 --> 00:10:52.020\nIf I switch back to general purpose and\nI start bumping this size up, right.\n\n210\n00:10:52.020 --> 00:10:54.730\nSo let's go to a full terabyte.\n\n211\n00:10:54.730 --> 00:10:59.560\nWell, when I picked something lower,\nsee I'll had 2400 out of 3000.\n\n212\n00:10:59.560 --> 00:11:03.115\nWhen I go to a terabyte\nI get a full 3,000 IOPS.\n\n213\n00:11:03.115 --> 00:11:04.330\nWhat if I go above that?\n\n214\n00:11:04.330 --> 00:11:05.225\nWhat if I do two terabytes?\n\n215\n00:11:05.225 --> 00:11:07.404\nIt goes to 6,000 right?\n\n216\n00:11:07.404 --> 00:11:10.510\nBut I'm getting really big amounts\nof storage here at this point.\n\n217\n00:11:10.510 --> 00:11:13.610\nAnd I've gotta pay for storage,\nstorage costs me money.\n\n218\n00:11:13.610 --> 00:11:17.610\nSo, I don't necessarily want to crank\nthat up, cuz my cost is gonna go up.\n\n219\n00:11:17.610 --> 00:11:22.772\nIf I flip over to provisioned IOPS, I can\nsay, look I only need 8 GB of storage,\n\n220\n00:11:22.772 --> 00:11:27.549\nbut I need 2,000 IOPS on it, and\nnow I can reserve that and get it, and\n\n221\n00:11:27.549 --> 00:11:32.362\nI can have where I take advantage of\nthat guaranteed access to my storage.\n\n222\n00:11:32.362 --> 00:11:35.224\nSo, if you're running\na database server and\n\n223\n00:11:35.224 --> 00:11:40.344\nyou've got transaction logs that are gonna\nbe stored on here you want high IOPS so\n\n224\n00:11:40.344 --> 00:11:43.430\nthat you know you'll be\nable to write to it.\n\n225\n00:11:43.430 --> 00:11:46.240\nYou might have lower IOPS where\nthe actual database is, right?\n\n226\n00:11:46.240 --> 00:11:48.940\nSo this might be for my transaction logs,\nI might choose to come in and\n\n227\n00:11:48.940 --> 00:11:54.270\nadd another volume, and\nwe can specify additional characters here.\n\n228\n00:11:54.270 --> 00:11:55.620\nThis one was the root volume.\n\n229\n00:11:55.620 --> 00:11:59.410\nThe root volume is where your operating\nsystem is, and normally we treat the root\n\n230\n00:11:59.410 --> 00:12:03.050\nvolume as a femoral, even if it's EBS,\neven if it's going to be safe for us.\n\n231\n00:12:03.050 --> 00:12:08.294\nWe treat it as a femoral and we just leave\nit kind of alone because I might deploy\n\n232\n00:12:08.294 --> 00:12:13.137\nother instances based on this later on,\nand we add our other volumes and\n\n233\n00:12:13.137 --> 00:12:17.090\nsee how these are EBS all me\nthat's the only choice I get and\n\n234\n00:12:17.090 --> 00:12:21.689\nI can come in and I can say all right\nthis is gonna be my transaction log\n\n235\n00:12:21.689 --> 00:12:25.230\nsystem until I wanna do provision in IOPS.\n\n236\n00:12:25.230 --> 00:12:28.481\nAnd I'm gonna bump it up to 2,000 IOPS,\noops I can write 2,000.\n\n237\n00:12:28.481 --> 00:12:31.173\nI can do it, if I put my mind to it,\nthere we go.\n\n238\n00:12:31.173 --> 00:12:35.100\n[LAUGH] And then,\nmy next one might be the database itself.\n\n239\n00:12:35.100 --> 00:12:38.430\nAnd the database,\nI might need 200 gigs of storage, but\n\n240\n00:12:38.430 --> 00:12:42.810\nit's okay if the IOPS start to sag there\nbecause it's most read operations.\n\n241\n00:12:42.810 --> 00:12:45.320\nThey're gonna be cached\ninto RAM anyway right?\n\n242\n00:12:45.320 --> 00:12:48.940\nAnd then as far as rights, it's the\ntransaction logs writing to the database.\n\n243\n00:12:48.940 --> 00:12:50.970\nAnd if they get a bit behind,\nI'm okay with that.\n\n244\n00:12:50.970 --> 00:12:53.740\nI can handle it and\nI can always change my mind later on.\n\n245\n00:12:53.740 --> 00:12:57.530\nYou can take a snapshot of a volume,\ndelete the volume,\n\n246\n00:12:57.530 --> 00:13:00.687\nreprovision it as IOPS reserved or\nwhatever.\n\n247\n00:13:00.687 --> 00:13:01.973\nAnd then apply that snapshot or\n\n248\n00:13:01.973 --> 00:13:05.192\napply the snapshot during the provisioning\nto get that dataport right back.\n\n249\n00:13:05.192 --> 00:13:08.795\nSo it's not that hard to foot between does\ncreate some downtime actually you have to\n\n250\n00:13:08.795 --> 00:13:10.590\nbe aware about that.\n\n251\n00:13:10.590 --> 00:13:13.940\nBut those are some of the variations\nwe have at the last block store\n\n252\n00:13:13.940 --> 00:13:17.500\nthat when you deploy EBS you can\nchoose magnetic which it shouldn't.\n\n253\n00:13:17.500 --> 00:13:20.887\nYou can choose general\npurpose where I/O is tied or\n\n254\n00:13:20.887 --> 00:13:24.823\nIOPS are tied to the size the disk or\nit can provision I/O you\n\n255\n00:13:24.823 --> 00:13:29.335\nspecify exactly how much you need\nas far as input output per second.\n\n256\n00:13:29.335 --> 00:13:32.066\n&gt;&gt; So Don,\nyou raise some interesting thought there.\n\n257\n00:13:32.066 --> 00:13:36.315\nWe have databases where the transactions\nthat are important, right, and\n\n258\n00:13:36.315 --> 00:13:40.574\nyou said something about snapshot I feel\nlike I need the way to back this up-\n\n259\n00:13:40.574 --> 00:13:41.145\n&gt;&gt; [LAUGH]\n\n260\n00:13:41.145 --> 00:13:42.485\n&gt;&gt; And make sure it is all\n\n261\n00:13:42.485 --> 00:13:47.404\nthere kinda protect my data, just in\ncase bad things happen on accident like,\n\n262\n00:13:47.404 --> 00:13:48.810\noops I deleted it.\n\n263\n00:13:48.810 --> 00:13:51.040\nIs there a way to handle that in AWS?\n\n264\n00:13:51.040 --> 00:13:56.650\n&gt;&gt; Absolutely, the nice thing about EBS is\nthat the Elastic Block Store is actually\n\n265\n00:13:56.650 --> 00:14:00.480\nstoring replicas of your data inside of\nthe availability zone that you're in.\n\n266\n00:14:00.480 --> 00:14:02.020\nSo, when you have a system,\n\n267\n00:14:02.020 --> 00:14:05.960\nif there's a physical disk failure\nbehind the scenes you never see it.\n\n268\n00:14:05.960 --> 00:14:08.570\nI could have a failed disk on\na server I'm on right now.\n\n269\n00:14:08.570 --> 00:14:11.360\nI wouldn't even know it, because\nAmazon's already routed me around it,\n\n270\n00:14:11.360 --> 00:14:13.440\nsent me to another copy, and there we go.\n\n271\n00:14:13.440 --> 00:14:18.490\nSo as far as keeping your data available,\nwe don't have to think about it.\n\n272\n00:14:18.490 --> 00:14:20.200\nBut if I go into that instance and\n\n273\n00:14:20.200 --> 00:14:23.780\nI start deleting files by accident,\nAmazon doesn't protect me from that.\n\n274\n00:14:23.780 --> 00:14:26.110\nThey'll let me screw up my\nown systems all I want.\n\n275\n00:14:26.110 --> 00:14:28.110\nSo I might need to have snapshots.\n\n276\n00:14:28.110 --> 00:14:30.910\nSo now snapshots can serve\nmore than one purpose.\n\n277\n00:14:30.910 --> 00:14:32.820\nAt a minimum, they can act as a backup.\n\n278\n00:14:32.820 --> 00:14:37.350\nSo I accidentally deleted some junk so let\nme restore that volume from a snapshot and\n\n279\n00:14:37.350 --> 00:14:39.810\nnow my data's back again and\nthat's one thing we can do.\n\n280\n00:14:39.810 --> 00:14:42.160\nBut the other thing we can do with\nsnapshots is we can use them to create\n\n281\n00:14:42.160 --> 00:14:44.080\nmore instances.\n\n282\n00:14:44.080 --> 00:14:46.820\nI might have a web server\nconfigured that is perfect.\n\n283\n00:14:46.820 --> 00:14:49.730\nEverything is set up exactly the way\nI want and now I want ten more.\n\n284\n00:14:49.730 --> 00:14:52.547\nSo I can take a snapshot of the volumes,\nand\n\n285\n00:14:52.547 --> 00:14:57.794\nthen I can provision a new instance using\nthose snapshots to build the volumes,\n\n286\n00:14:57.794 --> 00:15:02.060\nand I can have clones of a system up very,\nvery quickly.\n\n287\n00:15:02.060 --> 00:15:07.620\nAnd I can also use the snapshots to move a\nsystem over to another availability zone,\n\n288\n00:15:07.620 --> 00:15:10.210\nor even to another region, if I want.\n\n289\n00:15:10.210 --> 00:15:12.061\nAnd I can send that\nsnapshot somewhere else and\n\n290\n00:15:12.061 --> 00:15:14.160\nstart creating those\ninstances in another region.\n\n291\n00:15:14.160 --> 00:15:15.747\nSo definitely very useful.\n\n292\n00:15:15.747 --> 00:15:19.510\nNow snapshots can be created for\nus automatically or manually.\n\n293\n00:15:19.510 --> 00:15:23.560\nManually, it's easy all we do\nis we go into our dashboard And\n\n294\n00:15:23.560 --> 00:15:27.940\nunder Elastic Blog store, if you go\ninto Volumes, you can find a volume, and\n\n295\n00:15:27.940 --> 00:15:29.080\nyou can grab a snapshot out of it.\n\n296\n00:15:29.080 --> 00:15:33.160\nWhen you check off a volume under,\nlet's see, where is it here?\n\n297\n00:15:33.160 --> 00:15:35.240\nUnder Actions, you'll see Create\na Snapshot right there, and\n\n298\n00:15:35.240 --> 00:15:36.018\nwe can take a snapshot.\n\n299\n00:15:36.018 --> 00:15:41.104\nNow do be aware, if the instance is up and\nrunning when you take the snapshot,\n\n300\n00:15:41.104 --> 00:15:44.660\nit is possible to capture\nit with dirty writes.\n\n301\n00:15:44.660 --> 00:15:47.985\nA dirty write is where you're halfway\nthrough writing data to the disk when\n\n302\n00:15:47.985 --> 00:15:49.161\nthe snapshot is grabbed.\n\n303\n00:15:49.161 --> 00:15:52.930\nWell that snapshot now\ncontains half written data.\n\n304\n00:15:52.930 --> 00:15:57.280\nAnd when we deploy it it's not gonna wake\nup and say let me finish this write.\n\n305\n00:15:57.280 --> 00:16:00.403\nCuz whatever was doing the write is\nnow gone and so it can't finish that.\n\n306\n00:16:00.403 --> 00:16:03.523\nSo typically if you grab a snapshot,\nlike a volume like this,\n\n307\n00:16:03.523 --> 00:16:07.253\nyou'll wanna shut the guest OS down so\nthat it's not writing to the disk.\n\n308\n00:16:07.253 --> 00:16:10.738\nNow many guest OSs like Windows and\nAnd Linux have ways\n\n309\n00:16:10.738 --> 00:16:15.400\nwhere you can flush the right buffers or\nuse a volume snapshot service.\n\n310\n00:16:15.400 --> 00:16:18.040\nOr something to be able\nto pause those rights for\n\n311\n00:16:18.040 --> 00:16:19.760\na moment while you grab the snapshot.\n\n312\n00:16:19.760 --> 00:16:26.420\nBut the safest way is to make sure the\ninstance is stopped while you grab that.\n\n313\n00:16:26.420 --> 00:16:28.520\nSo do be aware of that\nas far as the snapshots.\n\n314\n00:16:28.520 --> 00:16:31.760\nSo I can create one right here manually,\non an individual volume.\n\n315\n00:16:31.760 --> 00:16:33.420\nI can create it from the instance, too.\n\n316\n00:16:33.420 --> 00:16:36.240\nIf you take an instance,\nyou can grab the snapshot right there.\n\n317\n00:16:36.240 --> 00:16:38.895\nIf you do that, you can grab snapshots\nof more than one volume at a time,\n\n318\n00:16:38.895 --> 00:16:40.377\nif you got multiple volumes assigned.\n\n319\n00:16:40.377 --> 00:16:43.268\nSo for example, if I were to\nterminate one of my instances, right,\n\n320\n00:16:43.268 --> 00:16:44.290\nI'm gonna delete it.\n\n321\n00:16:44.290 --> 00:16:47.120\nWhen you terminate it,\nthe storage goes away.\n\n322\n00:16:47.120 --> 00:16:49.620\nWell, I'm going to lose\nthe data that was on there.\n\n323\n00:16:49.620 --> 00:16:51.410\nBut, if I grab a snapshot first and\n\n324\n00:16:51.410 --> 00:16:54.650\nI terminate the instance,\nthen I'll have my snapshot.\n\n325\n00:16:54.650 --> 00:16:56.820\nI'll have it hanging around and\nI can always redeploy based on that.\n\n326\n00:16:56.820 --> 00:16:59.340\nSo I just terminated one\nof my instances here.\n\n327\n00:16:59.340 --> 00:17:01.230\nI had two, the M4 large and\nthe M4 extra large.\n\n328\n00:17:01.230 --> 00:17:03.730\nI just terminated the M4 extra large.\n\n329\n00:17:03.730 --> 00:17:05.670\nAnd if I go down here to my volumes and\n\n330\n00:17:05.670 --> 00:17:09.620\nI take a look I've only\ngot one volume now, right?\n\n331\n00:17:09.620 --> 00:17:11.270\nThe volume from the other system.\n\n332\n00:17:11.270 --> 00:17:13.470\nAnd if I go back to my instances.\n\n333\n00:17:13.470 --> 00:17:17.080\nWell, I can't undo this termination.\n\n334\n00:17:17.080 --> 00:17:19.040\nThe data is gone, that's it.\n\n335\n00:17:19.040 --> 00:17:20.300\nI lost it, right?\n\n336\n00:17:20.300 --> 00:17:24.320\nBut what I could have done was,\ngone to my volumes.\n\n337\n00:17:24.320 --> 00:17:26.682\nFound the volume and\ngrab the snap shot real quick.\n\n338\n00:17:26.682 --> 00:17:27.994\nI'm gonna create a snap shot of this one.\n\n339\n00:17:27.994 --> 00:17:33.242\nAnd I'll give it a name maybe this is\nlike web server final backup or whatever\n\n340\n00:17:33.242 --> 00:17:38.585\nit is that helps me identify what the heck\nit is and I can give it a description.\n\n341\n00:17:38.585 --> 00:17:42.070\nI'll just use the same thing.\n\n342\n00:17:42.070 --> 00:17:43.700\nAnd I'll go ahead and create it.\n\n343\n00:17:43.700 --> 00:17:45.260\nSo once I get that created,\n\n344\n00:17:45.260 --> 00:17:49.310\nthere it is, notice how it says\nsnapshot creation started.\n\n345\n00:17:49.310 --> 00:17:51.980\nThe snapshot is not\nan instantaneous thing.\n\n346\n00:17:51.980 --> 00:17:56.250\nIn a lot of systems like Hyper-V and\nVMware a snapshot is instantaneous.\n\n347\n00:17:56.250 --> 00:18:00.050\nBecause what the snapshot is doing,\nis just saying I'm gonna freeze the drive.\n\n348\n00:18:00.050 --> 00:18:02.580\nAnd any changes to the drive will\njust have it's separate file,\n\n349\n00:18:02.580 --> 00:18:05.150\nthat's not how this snap shot works.\n\n350\n00:18:05.150 --> 00:18:08.090\nThis snap shot is taking\na full clone of the disk and\n\n351\n00:18:08.090 --> 00:18:10.710\nstoring it somewhere else physically,\nright?\n\n352\n00:18:10.710 --> 00:18:12.590\nSo in a different physical area, so\n\n353\n00:18:12.590 --> 00:18:14.660\nit takes a moment to grab\none of these snapshots.\n\n354\n00:18:14.660 --> 00:18:17.770\nSo I'm going to move down here to one\nof these snapshots and just watch and\n\n355\n00:18:17.770 --> 00:18:18.990\nI'll see it's pending.\n\n356\n00:18:18.990 --> 00:18:21.730\nAnd I'm going to wait\nuntil it says it's done.\n\n357\n00:18:21.730 --> 00:18:26.850\nAnd when it's done I can go and\nterminate that web server instance.\n\n358\n00:18:26.850 --> 00:18:28.930\nI can terminate the instance and\nlet it delete.\n\n359\n00:18:28.930 --> 00:18:32.570\nThe volume will delete and\nwhat will be left behind?\n\n360\n00:18:32.570 --> 00:18:33.090\nThe snapshot.\n\n361\n00:18:33.090 --> 00:18:35.330\nI'll have the snapshot hanging out and\n\n362\n00:18:35.330 --> 00:18:37.290\nI can redeploy that web\nserver any time I need.\n\n363\n00:18:37.290 --> 00:18:38.800\nOr maybe I don't terminate the web server,\n\n364\n00:18:38.800 --> 00:18:41.426\nI leave it and\nI use the snapshot as my backup.\n\n365\n00:18:41.426 --> 00:18:45.560\nUnlike Hyper-V and VMware where\na snapshot is not a replacement for\n\n366\n00:18:45.560 --> 00:18:47.860\na backup, this snap shot is.\n\n367\n00:18:47.860 --> 00:18:51.300\nI can use this as my backup\nbecause it is stored on separate,\n\n368\n00:18:51.300 --> 00:18:54.840\nphysical hardware from the hardware\nthat instance resides on.\n\n369\n00:18:54.840 --> 00:18:58.910\nAnd so I could have failed hardware that's\nhosting that particular instance which\n\n370\n00:18:58.910 --> 00:19:02.150\nAmazon will probably recover for\nme anyway and I don't have to worry about.\n\n371\n00:19:02.150 --> 00:19:04.310\nAnd then if I delete\nsomething by accident,\n\n372\n00:19:04.310 --> 00:19:06.110\nthen I can come to this snapshot.\n\n373\n00:19:06.110 --> 00:19:09.650\nI can take it,\ndeploy a volume based on the snapshot,\n\n374\n00:19:09.650 --> 00:19:13.800\nand attach it to an instance and gain\naccess to that data and put it back again.\n\n375\n00:19:13.800 --> 00:19:16.450\nSo this is a solution to replace backups.\n\n376\n00:19:16.450 --> 00:19:18.550\nAnd I can automate it, I can script it,\n\n377\n00:19:18.550 --> 00:19:20.520\nI can have it take snapshots\nat particular times.\n\n378\n00:19:20.520 --> 00:19:23.950\nYou'll want to prune off old snapshots,\ncuz you are paying for the storage.\n\n379\n00:19:23.950 --> 00:19:27.060\nBut it's sitting right there and\nout there.\n\n380\n00:19:27.060 --> 00:19:29.310\nMine just finally completed, so it's done.\n\n381\n00:19:29.310 --> 00:19:32.410\nAnd now if I go up here to my instances\nand I terminate this other one,\n\n382\n00:19:32.410 --> 00:19:34.420\nit stopped right now so\nit should terminate pretty quick.\n\n383\n00:19:34.420 --> 00:19:38.310\nSo I will terminate that and\nthere it goes.\n\n384\n00:19:38.310 --> 00:19:41.950\nThat's gonna delete the instance,\nI'll see it's volume disappear so\n\n385\n00:19:41.950 --> 00:19:43.060\nit's shutting down.\n\n386\n00:19:43.060 --> 00:19:47.260\nAnd the volumes will go away, the\ninstances gone, I can't unterminate it.\n\n387\n00:19:47.260 --> 00:19:49.260\nBut the snapshot will still reside.\n\n388\n00:19:49.260 --> 00:19:52.250\nThat's how we can use those to\nprovide a backup solution for us.\n\n389\n00:19:53.370 --> 00:19:57.740\n&gt;&gt; So Don, these snapshots, are they,\nwhere are they being stored?\n\n390\n00:19:57.740 --> 00:20:01.480\nIs Amazon just kinda holding those\naway in some of their secret storage?\n\n391\n00:20:01.480 --> 00:20:04.750\nOr is this going into an S3\nbucket that they're managing,\n\n392\n00:20:04.750 --> 00:20:08.620\nor is there any other place that you\nwould see this snapshot come up?\n\n393\n00:20:08.620 --> 00:20:11.442\nSo it's actually both,\nit's secret storage that's S3,\n\n394\n00:20:11.442 --> 00:20:14.662\nthey are storing it in an S3 bucket\nthat is attached to your account.\n\n395\n00:20:14.662 --> 00:20:16.824\nBut you can't see it, right?\n\n396\n00:20:16.824 --> 00:20:19.645\nIt's hidden It's on\ndouble secret probation.\n\n397\n00:20:19.645 --> 00:20:22.965\nIf I go into my Services and\nI jump over to S3,\n\n398\n00:20:22.965 --> 00:20:28.445\nI'm not gonna see a bucket for\nmy snapshots for EC2, it's all invisible.\n\n399\n00:20:28.445 --> 00:20:31.075\nEven if I drop down to the API level and\nI start looking for it,\n\n400\n00:20:31.075 --> 00:20:32.965\nyou're not gonna see it here, right?\n\n401\n00:20:32.965 --> 00:20:37.875\nSo it's only accessible through EC2's API,\nand it's driven through this.\n\n402\n00:20:37.875 --> 00:20:40.015\nSo it is a hidden S3 bucket.\n\n403\n00:20:40.015 --> 00:20:42.370\nAnd that's because you gotta pay for it.\n\n404\n00:20:42.370 --> 00:20:45.690\nAnd it's stored the same way S3 is, which\nmeans you know it's being replicated.\n\n405\n00:20:45.690 --> 00:20:48.860\nThey've got more than one copy,\nit's highly available, highly durable.\n\n406\n00:20:48.860 --> 00:20:50.850\nAnd we know we can count on those.\n\n407\n00:20:50.850 --> 00:20:53.280\nSo that's how it's being\nstored on the back end.\n\n408\n00:20:53.280 --> 00:20:54.870\nWe don't really have any\ncontrol of it beyond that.\n\n409\n00:20:56.530 --> 00:20:58.000\nAll right, so let's see.\n\n410\n00:20:58.000 --> 00:21:01.750\nI think that's about, did I miss\nanything on backup and recovery?\n\n411\n00:21:03.450 --> 00:21:04.410\nThat's pretty much it.\n\n412\n00:21:04.410 --> 00:21:08.840\nI already mentioned that we can take\na snapshot like this and we can\n\n413\n00:21:08.840 --> 00:21:11.850\nsend it over to another region if we want\nto spread out replication like that.\n\n414\n00:21:11.850 --> 00:21:15.612\nYou've got a few little technologies\nthat make it a great replacement for\n\n415\n00:21:15.612 --> 00:21:17.260\ntraditional backup software.\n\n416\n00:21:17.260 --> 00:21:21.308\n&gt;&gt; So Don when you were clicking through\nthere making a snapshot I noticed there\n\n417\n00:21:21.308 --> 00:21:24.421\nwas a little tag called encrypted\nit said encrypted know.\n\n418\n00:21:24.421 --> 00:21:26.305\nAnd that intrigued me because\n&gt;&gt; LAUGH]\n\n419\n00:21:26.305 --> 00:21:28.190\n&gt;&gt; Sometimes even when we're messing\n\n420\n00:21:28.190 --> 00:21:32.603\naround on EC2 instances we need some way\nto make sure that our data is safe, right?\n\n421\n00:21:32.603 --> 00:21:35.575\nIt's safe from intrusion or\nthings of that nature.\n\n422\n00:21:35.575 --> 00:21:37.415\n&gt;&gt; Right.\n&gt;&gt; How do I actually with with encryption\n\n423\n00:21:37.415 --> 00:21:38.315\nwithin EC2?\n\n424\n00:21:38.315 --> 00:21:41.265\n&gt;&gt; And you know I terminated that instance\nso I can't bring that screen back up, but\n\n425\n00:21:41.265 --> 00:21:42.605\nI was taking a snapshot.\n\n426\n00:21:42.605 --> 00:21:44.130\nIf you rewind you'll see it.\n\n427\n00:21:44.130 --> 00:21:47.330\nAnd it had the option to encrypt and\nI couldn't check it,\n\n428\n00:21:47.330 --> 00:21:49.200\nit didn't give me the option to check it.\n\n429\n00:21:49.200 --> 00:21:55.180\nAnd the reason is snapshots will by\ndefault mirror what the volume was.\n\n430\n00:21:55.180 --> 00:21:57.350\nCuz it really is just taking\none of the volume copies and\n\n431\n00:21:57.350 --> 00:21:58.930\nusing that as the snapshot.\n\n432\n00:21:58.930 --> 00:22:03.270\nSo if the volume is encrypted,\nthe snapshot can be encrypted as well.\n\n433\n00:22:03.270 --> 00:22:06.480\nBut, I might want the volume encrypted,\nbut the snapshot not encrypted.\n\n434\n00:22:06.480 --> 00:22:08.353\nIf I am going to be sending it\nto another region or something,\n\n435\n00:22:08.353 --> 00:22:09.402\nI might have to worry about that.\n\n436\n00:22:09.402 --> 00:22:12.160\nBut typically,\nyou do want it to be encrypted.\n\n437\n00:22:12.160 --> 00:22:16.055\nSo, if you have chosen to encrypt\nthe volume on your instance,\n\n438\n00:22:16.055 --> 00:22:18.785\nthen the snapshot can\nbe encrypted as well.\n\n439\n00:22:18.785 --> 00:22:21.112\nSo for example if I come in here and\nlaunch an instance,\n\n440\n00:22:21.112 --> 00:22:23.910\nI might not have enough time,\nwe will see if I can get those going.\n\n441\n00:22:23.910 --> 00:22:25.590\nI'm gonna launch a Linux AMI instance.\n\n442\n00:22:25.590 --> 00:22:27.535\nI am going to jump right\nover to my storage.\n\n443\n00:22:27.535 --> 00:22:28.640\nHere's my storage.\n\n444\n00:22:28.640 --> 00:22:31.030\nAnd see how my regular\nvolume is not encrypted?\n\n445\n00:22:31.030 --> 00:22:34.490\nRight, the one where the operating system\nis, because Amazon's gonna write to it and\n\n446\n00:22:34.490 --> 00:22:36.100\ndo all that stuff, so it's not encrypted.\n\n447\n00:22:36.100 --> 00:22:41.010\nBut I can add an EBS volume, and\nI can tell it what I'm gonna do.\n\n448\n00:22:41.010 --> 00:22:43.880\nIf it's gonna be provisioned or whatever.\n\n449\n00:22:43.880 --> 00:22:49.050\nAnd we can jump in and\ntell it that we want to encrypt that data.\n\n450\n00:22:49.050 --> 00:22:51.770\nSo I wanna encrypt this volume.\n\n451\n00:22:51.770 --> 00:22:56.315\nAnd when I do that,\nif you take a snapshot of an encrypted\n\n452\n00:22:56.315 --> 00:23:01.155\nvolume then, you'll be able to\nhave an encrypted snapshot.\n\n453\n00:23:01.155 --> 00:23:04.535\nSo that's why I didn't have that\noption cuz mine wasn't encrypted.\n\n454\n00:23:04.535 --> 00:23:07.243\nAnd if this instance spins up fast\nenough I'll be able to show you that.\n\n455\n00:23:07.243 --> 00:23:12.491\nBut if it's stuck here I should be able\ntake a snapshot of this other one.\n\n456\n00:23:12.491 --> 00:23:14.637\nLet's see what we can do here.\n\n457\n00:23:14.637 --> 00:23:19.830\nSo, I'm gonna take one of these guys that\nare, they're both still kinda running.\n\n458\n00:23:19.830 --> 00:23:23.980\nWell anyhow, let's see if it'll let\nme create a snapshot on this one.\n\n459\n00:23:23.980 --> 00:23:25.657\nThere we go.\nYou see how this one says encrypted no,\n\n460\n00:23:25.657 --> 00:23:26.469\nand if I float over here,\n\n461\n00:23:26.469 --> 00:23:28.610\nit just indicates whether\nthe snapshot is encrypted.\n\n462\n00:23:28.610 --> 00:23:31.660\nThis snapshot is not\ngoing to be encrypted,\n\n463\n00:23:31.660 --> 00:23:34.130\nbecause the base volume is not encrypted.\n\n464\n00:23:34.130 --> 00:23:37.390\nSo If I want to do that, I need to\nmake sure the base line is encrypted.\n\n465\n00:23:37.390 --> 00:23:40.810\nAnd remember that we can use the AWS KMS,\ntheir Key Management Service,\n\n466\n00:23:40.810 --> 00:23:41.790\nit's all automatic to us.\n\n467\n00:23:41.790 --> 00:23:43.310\nWe don't even have to\nworry about the keys.\n\n468\n00:23:43.310 --> 00:23:45.330\nAnd it makes sure that\nthat physical storage,\n\n469\n00:23:45.330 --> 00:23:47.540\nwhere it's residing, is encrypted.\n\n470\n00:23:47.540 --> 00:23:50.180\nWhich helps us to not have\nto worry about if they\n\n471\n00:23:50.180 --> 00:23:52.450\nreprovisioned the storage\nto another customer.\n\n472\n00:23:52.450 --> 00:23:55.440\nThat customer is not gonna have access to\nany of our data even if they they were\n\n473\n00:23:55.440 --> 00:24:01.510\nable to get beyond Amazon's\nsecurity protocols for wiping data.\n\n474\n00:24:01.510 --> 00:24:04.550\nAll they'd be able to do is salvage\nencrypted information which is useless\n\n475\n00:24:04.550 --> 00:24:05.060\nwithout the keys.\n\n476\n00:24:06.170 --> 00:24:07.570\n&gt;&gt; So Don thinks for\n\n477\n00:24:07.570 --> 00:24:11.940\ndefinitely iluminating how we can use\ndifferent storage solutions the key new\n\n478\n00:24:11.940 --> 00:24:16.210\nones points we need to remember when\nusing storage solutions with EC2.\n\n479\n00:24:16.210 --> 00:24:20.070\n&gt;&gt; And do know that we have some more\namazing Amazon episodes coming up so\n\n480\n00:24:20.070 --> 00:24:21.430\ndefinitely tune in for that.\n\n481\n00:24:21.430 --> 00:24:25.960\nBut for now, signing out for ITPRO TV I've\nbeen your host Justin Dennison.\n\n482\n00:24:25.960 --> 00:24:26.610\n&gt;&gt; And I'm Don Pezet.\n\n483\n00:24:26.610 --> 00:24:27.268\n&gt;&gt; We'll see you next time\n\n484\n00:24:27.268 --> 00:24:34.704\n[MUSIC]\n\n485\n00:24:34.704 --> 00:24:37.403\n&gt;&gt; Thank you for watching\n&gt;&gt; ITPRO.TV.\n\n",
          "vimeoId": "208135722"
        }
      ],
      "title": "Amazon EC2 and EBS"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don take a look at Virtual Private Clouds(VPCs) in Amazon Web Services. They start with VPC basics, (what is it and where is it used), and then move into more specific topics like Subnets, Route Tables, Elastic IPs, Endpoints and Peering.",
          "length": "1472",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001-sm.jpg",
          "title": "Virtual Private Cloud",
          "transcript": "WEBVTT\n\n1\n00:00:00.055 --> 00:00:02.807\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:02.807 --> 00:00:06.465\n[CROSSTALK]\n\n3\n00:00:06.465 --> 00:00:08.385\n[MUSIC]\n\n4\n00:00:08.385 --> 00:00:12.183\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:12.183 --> 00:00:14.118\n&gt;&gt; All right, greetings everyone and\n\n6\n00:00:14.118 --> 00:00:16.641\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.641 --> 00:00:18.844\nI'm your host, Daniel Lowrie, and\n\n8\n00:00:18.844 --> 00:00:22.977\nin today's episode we're coming\nback with more on our CSAA series.\n\n9\n00:00:22.977 --> 00:00:26.277\nAnd of course, joining us in the studio,\nour mentor in that endeavor,\n\n10\n00:00:26.277 --> 00:00:27.890\nour good friend, Mr. Don Pezet.\n\n11\n00:00:27.890 --> 00:00:28.839\nDon, welcome back sir.\n\n12\n00:00:28.839 --> 00:00:30.420\nSo glad to have you, how's it going today?\n\n13\n00:00:30.420 --> 00:00:31.370\n&gt;&gt; I'm doing just well, Daniel.\n\n14\n00:00:31.370 --> 00:00:34.490\nReady to dive right back into\nthe world of AWS, and like you said,\n\n15\n00:00:34.490 --> 00:00:38.290\njumping right back into that Certified\nSolutions Architect Associate exam.\n\n16\n00:00:38.290 --> 00:00:42.388\nAnd we're gonna kick this one off\ntalking about networking because well,\n\n17\n00:00:42.388 --> 00:00:45.001\nwhen you got a cloud service,\nhow you get to it?\n\n18\n00:00:45.001 --> 00:00:46.267\nYou got to use a network, so\n\n19\n00:00:46.267 --> 00:00:49.861\nit's kind of a one component you have to\nhave when you deploy a cloud service.\n\n20\n00:00:49.861 --> 00:00:53.349\nAnd fortunately we've got a lot of\nfunctionality there from Amazon.\n\n21\n00:00:53.349 --> 00:00:57.338\nBut as I've said before, with great\nfunctionality comes great documentation or\n\n22\n00:00:57.338 --> 00:00:58.739\nsomething, I don't know.\n\n23\n00:00:58.739 --> 00:01:00.018\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a lot of work,\n\n24\n00:01:00.018 --> 00:01:01.129\nit's a lot of step to figure out.\n\n25\n00:01:01.129 --> 00:01:04.068\nA lot of different moving parts,\nthey go together to form that network.\n\n26\n00:01:04.068 --> 00:01:06.025\nSo we're going to take a look at\nthat right here in this episode.\n\n27\n00:01:06.025 --> 00:01:10.640\nAnd kind of figure out what we need to\nknow to get a virtual private cloud or\n\n28\n00:01:10.640 --> 00:01:12.300\na VPC, configured.\n\n29\n00:01:12.300 --> 00:01:14.275\n&gt;&gt; Well Don,\nwhere do we start when it comes to VPCs?\n\n30\n00:01:14.275 --> 00:01:15.299\nWhat are some of the basics?\n\n31\n00:01:15.299 --> 00:01:17.656\n&gt;&gt; All right, lets start off with\nwhat the heck a VPC is, right?\n\n32\n00:01:17.656 --> 00:01:19.480\nSo a virtual private cloud.\n\n33\n00:01:19.480 --> 00:01:23.768\nWhen we go with Amazon Web Services,\nthey're a cloud provider, right?\n\n34\n00:01:23.768 --> 00:01:27.710\nWe're buying platforms that are deployed\ninside of a cloud environment.\n\n35\n00:01:27.710 --> 00:01:30.583\nAnd I've said before a cloud is\nreally just a marketing term,\n\n36\n00:01:30.583 --> 00:01:33.577\nit means that it's computers,\nthere you go, that's a cloud.\n\n37\n00:01:33.577 --> 00:01:36.692\nSo what makes it\na virtually private cloud?\n\n38\n00:01:36.692 --> 00:01:41.685\nWell by default, when you deploy\nan EC2 instance or an S3 bucket or\n\n39\n00:01:41.685 --> 00:01:47.045\nsomething like that, then you throw\nit in to the AWS environment.\n\n40\n00:01:47.045 --> 00:01:50.187\nIt's expecting you to be sharing\nresources with the Internet.\n\n41\n00:01:50.187 --> 00:01:52.585\nSo you can open up ports\nin the security group.\n\n42\n00:01:52.585 --> 00:01:55.455\nYou can create an S3 bucket and\nset everyone permissions on it.\n\n43\n00:01:55.455 --> 00:01:59.435\nAnd now the whole world has access,\nmaybe that's what you want.\n\n44\n00:01:59.435 --> 00:02:02.117\nYou're setting up a web server,\nyou want the world to get to your website,\n\n45\n00:02:02.117 --> 00:02:02.806\nthat makes sense.\n\n46\n00:02:02.806 --> 00:02:04.800\nAnd for a lot of people,\nthat's the way to go.\n\n47\n00:02:04.800 --> 00:02:08.630\nBut what if I have resources I\nwanna stick up in the cloud but\n\n48\n00:02:08.630 --> 00:02:11.010\nI don't want the world to get to them?\n\n49\n00:02:11.010 --> 00:02:15.313\nMaybe I have a database server that I want\nmy web front ends to be able to access.\n\n50\n00:02:15.313 --> 00:02:18.337\nI don't want the world to be able to\naccess, just the web front ends or\n\n51\n00:02:18.337 --> 00:02:20.021\nmaybe it's not even about the world.\n\n52\n00:02:20.021 --> 00:02:23.894\nMaybe I just have my own database servers\nor file servers and I wanna put them in\n\n53\n00:02:23.894 --> 00:02:27.189\nthe cloud for me to use, for\nmy company or me, personally to use.\n\n54\n00:02:27.189 --> 00:02:28.890\nAnd I don't want the world to get at them.\n\n55\n00:02:28.890 --> 00:02:34.360\nWell the public nature of a cloud service\ndoes not kinda play well with that.\n\n56\n00:02:34.360 --> 00:02:37.875\nAnd so where's a virtual,\nprivate cloud or a VPC comes in.\n\n57\n00:02:37.875 --> 00:02:41.558\nIs that your able to kind of\ndivide up this public cloud and\n\n58\n00:02:41.558 --> 00:02:44.105\ncreate little private portions of it.\n\n59\n00:02:44.105 --> 00:02:47.078\nPrivate portions that only\nyou have access to and or,\n\n60\n00:02:47.078 --> 00:02:51.190\nI should phrase that differently,\nthat you control, who has access to.\n\n61\n00:02:51.190 --> 00:02:52.400\nBy default, it will only be you, but\n\n62\n00:02:52.400 --> 00:02:54.850\nyou can always open that up to\ngive other people access too.\n\n63\n00:02:54.850 --> 00:02:58.190\n&gt;&gt; Don, this sounds a lot like VLANs\ninstead of a traditional network.\n\n64\n00:02:58.190 --> 00:03:01.420\n&gt;&gt; Yeah, it's similar to VLANs,\nexcept when we configure a VLAN,\n\n65\n00:03:01.420 --> 00:03:02.170\nwhat do we have to do?\n\n66\n00:03:02.170 --> 00:03:06.330\nWe have to log into a switch we have\nto assign ports to different vlans and\n\n67\n00:03:06.330 --> 00:03:07.670\nkind of isolate things out.\n\n68\n00:03:07.670 --> 00:03:12.625\nWell with a VPC, when you're in Amazon,\ndo you see switches?\n\n69\n00:03:12.625 --> 00:03:14.730\nDo you even know what\nvendor the switches are?\n\n70\n00:03:14.730 --> 00:03:19.165\nNo, we don't see them, we don't touch\nthem, we're completely isolated from them.\n\n71\n00:03:19.165 --> 00:03:24.540\nSo what we have instead of a vlan\nis a virtual private cloud, a VPC.\n\n72\n00:03:24.540 --> 00:03:25.816\nAnd we can get in there and configure it.\n\n73\n00:03:25.816 --> 00:03:28.289\nAnd it's made up of a number\nof different components, but\n\n74\n00:03:28.289 --> 00:03:30.673\nits all built very similar to\nwhat we'd see with a VLAN.\n\n75\n00:03:30.673 --> 00:03:34.976\nAnd I've got a little diagram here that\nkinda demonstrates that when you build\n\n76\n00:03:34.976 --> 00:03:35.505\nup a VPC.\n\n77\n00:03:35.505 --> 00:03:40.100\nIt's made up of several different pieces\nand we're gonna talk about each of these\n\n78\n00:03:40.100 --> 00:03:43.400\npieces as we go, but\nthe most important piece is a subnet.\n\n79\n00:03:43.400 --> 00:03:48.205\nWhen you create a virtual private cloud\nyou will pick a primary network for it.\n\n80\n00:03:48.205 --> 00:03:52.621\nSo in this diagram for\nexample it's 10.0.0.0/16, all right?\n\n81\n00:03:52.621 --> 00:03:58.146\nThat's a class b network\nthat has 65,534 usable IPs.\n\n82\n00:03:58.146 --> 00:04:00.420\nYes, I memorized that\nnumber before the show.\n\n83\n00:04:00.420 --> 00:04:04.132\nSo it gives us a ton of IP addresses,\na ton of hosts or EC2 instances or\n\n84\n00:04:04.132 --> 00:04:08.486\nload balancer, or whatever it is that we\nwant to have available on that network.\n\n85\n00:04:08.486 --> 00:04:11.500\n65,000, that's a lot, right?\n\n86\n00:04:11.500 --> 00:04:15.340\nBut we don't want to put all of\nour eggs in one basket do we?\n\n87\n00:04:15.340 --> 00:04:18.720\nSo what we do is we take that subnet and\nthen we divide it up, and\n\n88\n00:04:18.720 --> 00:04:21.388\nwe spread that out across\navailabilities zone.\n\n89\n00:04:21.388 --> 00:04:24.078\nSo see, I've got availability zone a,\navailability zone B, and\n\n90\n00:04:24.078 --> 00:04:26.430\nwe've got these smaller\nnetworks inside of it.\n\n91\n00:04:26.430 --> 00:04:28.778\nThat's us breaking the network apart.\n\n92\n00:04:28.778 --> 00:04:35.317\nNotice that I've got 10.0.0.0 again here,\nbut it's a /24, instead of a /16.\n\n93\n00:04:35.317 --> 00:04:41.855\n/16 is 65,000 IPs, /24,\n254 usable IPs, much, much smaller.\n\n94\n00:04:41.855 --> 00:04:47.519\nAnd then 10.0.1.0/24,\nanother 254 usable IPs.\n\n95\n00:04:47.519 --> 00:04:52.298\nSo right there is basically 500\nout of the 65,000 IPs I have.\n\n96\n00:04:52.298 --> 00:04:56.345\nBut I'm spreading them across availability\nzones, that way I get redundancy,\n\n97\n00:04:56.345 --> 00:04:58.677\nthat way I get load balancing,\nreliability.\n\n98\n00:04:58.677 --> 00:05:03.750\nI get all those big benefits,\nmeanwhile it's still a private cloud.\n\n99\n00:05:03.750 --> 00:05:07.487\nI can put my instances in there and\nthey can communicate and\n\n100\n00:05:07.487 --> 00:05:12.650\ntalk and I can control exactly who has\naccess to them, based on the system.\n\n101\n00:05:12.650 --> 00:05:14.281\nSo when I go to set up a VPC,\n\n102\n00:05:14.281 --> 00:05:19.054\none of the first decisions I've to make\nis the subnet that I'm going to use.\n\n103\n00:05:19.054 --> 00:05:22.137\nAnd it can be as big as a /16 like this,\nright?\n\n104\n00:05:22.137 --> 00:05:24.479\nYou can't go bigger you\ncan't go to a /15 or 14.\n\n105\n00:05:24.479 --> 00:05:29.017\nRemember networks get bigger\nthe smaller their subnet identifiers.\n\n106\n00:05:29.017 --> 00:05:34.638\nSo this is the biggest I can go,\nthe smallest I can go is a /28.\n\n107\n00:05:34.638 --> 00:05:37.787\nIf you do a /28,\nyou get 14 usable IP addresses, so\n\n108\n00:05:37.787 --> 00:05:40.230\nthat's the smallest you can go.\n\n109\n00:05:40.230 --> 00:05:43.323\nBut you'll notice,\nthese are all private IPs anyway, right?\n\n110\n00:05:43.323 --> 00:05:49.170\nSo 10.0.0, that's an RFC 1918 private\nIP address, it's not Internet routable.\n\n111\n00:05:49.170 --> 00:05:53.259\nSo if it's not internet routable anyway,\nyou might as well use bigger spaces to\n\n112\n00:05:53.259 --> 00:05:57.056\ngive you the growing room to be able\nto stretch out and fill all your space.\n\n113\n00:05:57.056 --> 00:05:58.868\nSo that's what they're doing\nhere in the example and\n\n114\n00:05:58.868 --> 00:06:02.010\nthat's kind of what we'll normally see\nwhen we're designing in the real world.\n\n115\n00:06:02.010 --> 00:06:05.637\nBetter to go big on these than to go\nsmall and run out of IPs later on.\n\n116\n00:06:05.637 --> 00:06:10.480\nIt's actually very difficult to change\nthe IPs cuz it's not really very doable.\n\n117\n00:06:10.480 --> 00:06:13.012\nYou end up having to reissue a lot\nof things, reconfigure machines,\n\n118\n00:06:13.012 --> 00:06:14.430\nit becomes a nightmare.\n\n119\n00:06:14.430 --> 00:06:16.130\nBetter to leave growing\nroom in the beginning.\n\n120\n00:06:16.130 --> 00:06:20.450\n&gt;&gt; Well Don, that being said, if we were\ndisconnecting them ultimately we do want\n\n121\n00:06:20.450 --> 00:06:25.250\nthese smaller networks to be able to talk\nto each other how do we make that happen?\n\n122\n00:06:25.250 --> 00:06:25.840\n&gt;&gt; In my diagram,\n\n123\n00:06:25.840 --> 00:06:29.230\nyou'll notice this thing sitting over\nhere to the side, the main routing table.\n\n124\n00:06:29.230 --> 00:06:33.227\nWhen you configure a VPC, there's a couple\nof different things that happen, right?\n\n125\n00:06:33.227 --> 00:06:36.770\nAnd I guess let me clarify this for those\nof you who are doing it in the real world.\n\n126\n00:06:36.770 --> 00:06:41.593\nWhen you set up an AWS account,\nyou will have one VPC.\n\n127\n00:06:41.593 --> 00:06:42.770\nWell shoot, there's an exception.\n\n128\n00:06:42.770 --> 00:06:44.601\nThere is a time where you might not.\n\n129\n00:06:44.601 --> 00:06:46.050\nLet's go for the history here, okay?\n\n130\n00:06:47.860 --> 00:06:49.600\nVPCs weren't always around.\n\n131\n00:06:49.600 --> 00:06:54.020\nWhen I got started with EC2 and just\nAWS in general, VPCs didn't exist yet.\n\n132\n00:06:54.020 --> 00:06:58.250\nYou just had the public cloud\nthat was a part of AWS.\n\n133\n00:06:58.250 --> 00:07:01.619\nAnd so when we spun up our machines,\nthey were all on this public cloud and\n\n134\n00:07:01.619 --> 00:07:03.065\nthat was all that you could do.\n\n135\n00:07:03.065 --> 00:07:10.230\nWell VPCs were introduced in 2012,\n2013 when they finally went mainstream.\n\n136\n00:07:10.230 --> 00:07:13.148\nAnd ever since then\neverybody now has VPCs.\n\n137\n00:07:13.148 --> 00:07:15.711\nIn fact,\nif you set up a new account today,\n\n138\n00:07:15.711 --> 00:07:19.571\nreally if you've set up an account\nsince December of 2013.\n\n139\n00:07:19.571 --> 00:07:23.315\nSo 2014, and more recent,\nyou only have support of VPC,\n\n140\n00:07:23.315 --> 00:07:25.880\nyou can't even do it the old way.\n\n141\n00:07:25.880 --> 00:07:29.796\nBut it's older accounts like mine where\nI still have the EC2 plastic model,\n\n142\n00:07:29.796 --> 00:07:32.099\nwhere I can deploy\nan instance not into a VPC.\n\n143\n00:07:32.099 --> 00:07:37.030\nBut just into the regular EC2-Classic\nCloud, and you really don't wanna do that.\n\n144\n00:07:37.030 --> 00:07:39.995\nThat's just there because some people\nstill have systems that are tied to it.\n\n145\n00:07:39.995 --> 00:07:42.801\nBut it's been years at this point,\nit's 2017.\n\n146\n00:07:42.801 --> 00:07:46.018\nSo for four years now,\nevery new account only has access to VPCs,\n\n147\n00:07:46.018 --> 00:07:47.725\nthat's what we want, all right?\n\n148\n00:07:47.725 --> 00:07:48.966\nSo there's one variation.\n\n149\n00:07:48.966 --> 00:07:53.329\nMost accounts will only have support for\nVPCs and not ES2-Classic.\n\n150\n00:07:53.329 --> 00:07:57.838\nThe second variation is, when you deploy\na new account, one VPC is created for\n\n151\n00:07:57.838 --> 00:07:59.730\nyou automatically.\n\n152\n00:07:59.730 --> 00:08:01.884\nAnd that's your default VPC.\n\n153\n00:08:01.884 --> 00:08:05.138\nAnd every machine you stick in\nthere is gonna have some certain\n\n154\n00:08:05.138 --> 00:08:06.850\ncharacteristics to it.\n\n155\n00:08:06.850 --> 00:08:10.100\nThe default VPC actually behaves\nvery much like EC2 classic,\n\n156\n00:08:10.100 --> 00:08:11.840\nthat's why we don't need it anymore.\n\n157\n00:08:11.840 --> 00:08:16.160\nThat it has a routing table by default,\nand it has an Internet gateway,\n\n158\n00:08:16.160 --> 00:08:17.500\nso you can get out and\nbrowse the Internet.\n\n159\n00:08:17.500 --> 00:08:20.510\nYou can do all that stuff\nin the default VPC.\n\n160\n00:08:20.510 --> 00:08:23.260\nBut when you create your own VPC,\nif you add a new one,\n\n161\n00:08:24.400 --> 00:08:28.690\nyou have to provide a subnet, but\nyou don't have to provide a router or\n\n162\n00:08:28.690 --> 00:08:30.260\na way to get out the Internet,\nor anything like that.\n\n163\n00:08:30.260 --> 00:08:34.110\nSo it's missing a lot of pieces,\nand you add in what you want.\n\n164\n00:08:34.110 --> 00:08:35.830\nIt sounds bad, but it's a good thing.\n\n165\n00:08:35.830 --> 00:08:37.160\nIt gives you the control.\n\n166\n00:08:37.160 --> 00:08:39.910\nYou can say,\nI need this VPC to be truly isolated,\n\n167\n00:08:39.910 --> 00:08:41.760\nI don't want it to get to the Internet.\n\n168\n00:08:41.760 --> 00:08:45.090\nOr, yeah, I want this one to get to\nthe Internet so let me add the router in.\n\n169\n00:08:45.090 --> 00:08:47.910\nSo this main routing table,\nwhen you create a VPC,\n\n170\n00:08:47.910 --> 00:08:50.590\nif it's your default one\nit's already got one.\n\n171\n00:08:50.590 --> 00:08:54.250\nIf you create a custom VPC you'll have\nto make it and the main routing table is\n\n172\n00:08:54.250 --> 00:08:58.370\nthe one that's gonna be used by all of\nthe subnets that are inside of your VPC.\n\n173\n00:08:58.370 --> 00:09:01.080\nAnd that'll let them\nroute between each other.\n\n174\n00:09:01.080 --> 00:09:04.530\nIf I want one of my subnets to\ntalk to one of my other subnets,\n\n175\n00:09:04.530 --> 00:09:06.190\nthen gotta go through a router to do it.\n\n176\n00:09:06.190 --> 00:09:07.780\nAnd so, it's a virtual router.\n\n177\n00:09:07.780 --> 00:09:11.120\nThat virtual router is highly\navailable and horizontally scalable,\n\n178\n00:09:11.120 --> 00:09:13.580\nwhich means Amazon manages it.\n\n179\n00:09:13.580 --> 00:09:15.800\nI don't have to touch it,\nI don't have to know about it.\n\n180\n00:09:15.800 --> 00:09:20.234\nI just go into the web UI or use the\ncommand line utilities and add the routes.\n\n181\n00:09:20.234 --> 00:09:24.855\nSo here they're got a single routing\nhere saying 10.0.0.0/16 is local, and\n\n182\n00:09:24.855 --> 00:09:29.220\nthat's going to allow each of these\nsubnets over here to talk to each other.\n\n183\n00:09:29.220 --> 00:09:32.790\nJust by passing right through the router\ncuz those are local network networks and\n\n184\n00:09:32.790 --> 00:09:33.820\nthey can communicate.\n\n185\n00:09:33.820 --> 00:09:38.154\nHaving that router is important if you\nneed communication between the subnets.\n\n186\n00:09:38.154 --> 00:09:41.731\nNow, we don't always need that\ncommunication so you might choose to leave\n\n187\n00:09:41.731 --> 00:09:44.708\nit off but it's easy enough to\nget that set up and put in there.\n\n188\n00:09:44.708 --> 00:09:48.641\nNow once we have the routing table in\nplace, any time we add new subnets into\n\n189\n00:09:48.641 --> 00:09:52.590\nthe VPC they'll take advantage of that or\nyou can add more routing tables.\n\n190\n00:09:52.590 --> 00:09:56.937\nYou can have additional routing tables,\nso might have specific needs for\n\n191\n00:09:56.937 --> 00:09:58.277\nspecific instances.\n\n192\n00:09:58.277 --> 00:10:02.168\nNow, one thing the router doesn't do\nby default is it doesn't connect you\n\n193\n00:10:02.168 --> 00:10:03.750\nto the Internet.\n\n194\n00:10:03.750 --> 00:10:07.090\nIf you look at this one the main routing\ntable is saying 10.0.0.0/16 is local,\n\n195\n00:10:07.090 --> 00:10:09.290\nthere's no connection to the Internet.\n\n196\n00:10:10.360 --> 00:10:14.440\nIf you want to connect to the internet\nalso, you need to set up an IGW,\n\n197\n00:10:14.440 --> 00:10:16.310\nan Internet gateway.\n\n198\n00:10:16.310 --> 00:10:19.975\nAn Internet gateway is really just\nan extension of that router that then\n\n199\n00:10:19.975 --> 00:10:21.441\nconnects to the internet and\n\n200\n00:10:21.441 --> 00:10:24.390\nallows you to pass right on\nthrough that to the internet.\n\n201\n00:10:24.390 --> 00:10:27.124\nThe Internet gateway can function\nin a few different ways but\n\n202\n00:10:27.124 --> 00:10:30.662\nnormally it's just an extension of the\nrouter and you can add a default route to\n\n203\n00:10:30.662 --> 00:10:33.462\nyour main routing table that\npoints to the internet gateway.\n\n204\n00:10:33.462 --> 00:10:36.020\nIf you don't want your VPC connected to\nthe Internet, you just don't add an IGW.\n\n205\n00:10:37.180 --> 00:10:38.870\nSo it's kind of up to you\nhow you wanna do that.\n\n206\n00:10:38.870 --> 00:10:42.710\nAnd when you create a VPC,\nyou'll see a lot of this in the wizard.\n\n207\n00:10:42.710 --> 00:10:50.010\nSo if I go into EC2, and pull up my\nVPC's in here, actually, hang on.\n\n208\n00:10:50.010 --> 00:10:53.890\nI get kinda stuck in the old ways\nsometimes The VPCs because it all used to\n\n209\n00:10:53.890 --> 00:10:56.860\nbe part of EC2 classic.I kind\nof have a habit of going there.\n\n210\n00:10:56.860 --> 00:11:00.100\nBut VPCs are now their own separate entity\nso if I come down here to network and\n\n211\n00:11:00.100 --> 00:11:02.030\ndelivery I find my VPCs.\n\n212\n00:11:02.030 --> 00:11:06.358\nAnd if i go to create a new VPC you will\nfind where it asks me a lot of this stuff.\n\n213\n00:11:06.358 --> 00:11:10.837\nSo if I start a VPC wizard and\nwalk through it, it's gonna ask me,\n\n214\n00:11:10.837 --> 00:11:13.390\ndo I want a single public subnet?\n\n215\n00:11:13.390 --> 00:11:16.396\nDo I want a public and private subnet?\n\n216\n00:11:16.396 --> 00:11:19.260\nDo I want with them with\nhardware VPN access?\n\n217\n00:11:19.260 --> 00:11:22.560\nI'm picking and\nchoosing the types of network that I want.\n\n218\n00:11:22.560 --> 00:11:26.710\nAnd as we walk through the wizard, it's\ngoing to ask me about whether I want to\n\n219\n00:11:26.710 --> 00:11:30.220\nhave an internet gateway, and\nwhether I want those services?\n\n220\n00:11:30.220 --> 00:11:33.690\nSo, it's nice to have that control where\nyou completely pick exactly what it is\n\n221\n00:11:33.690 --> 00:11:35.570\nthat you want them to have access to.\n\n222\n00:11:35.570 --> 00:11:38.000\n&gt;&gt; Now Don, you were just\nmentioning different services.\n\n223\n00:11:38.000 --> 00:11:40.870\nWe're talking networking here and,\ntypically, yeah,\n\n224\n00:11:40.870 --> 00:11:44.940\nwe like to segment our networks\ndown to little private networks,\n\n225\n00:11:44.940 --> 00:11:47.970\nand then having the ability to\nroute between them is also nice.\n\n226\n00:11:47.970 --> 00:11:49.210\nInternet gateway, that's nice.\n\n227\n00:11:49.210 --> 00:11:53.055\nAre there other services that\nare available through the VPC?\n\n228\n00:11:53.055 --> 00:11:55.029\n&gt;&gt; Yeah, absolutely.\n\n229\n00:11:55.029 --> 00:11:58.439\nThe routing instance,\nthe Internet gateway, it provides NAT,\n\n230\n00:11:58.439 --> 00:12:00.115\nNetwork Access Translation.\n\n231\n00:12:00.115 --> 00:12:00.905\nAnd NAT's kinda important,\n\n232\n00:12:00.905 --> 00:12:03.125\nwe're gonna talk a little bit\nmore about it later in this show.\n\n233\n00:12:03.125 --> 00:12:06.055\nBut you've gotta be able to translate\nfrom private to public IPs.\n\n234\n00:12:06.055 --> 00:12:09.655\nAll of your instances have privates\nIPs that are not Internet-routable.\n\n235\n00:12:09.655 --> 00:12:11.855\nSo when they pass through a NAT router,\n\n236\n00:12:11.855 --> 00:12:15.950\nit changes them to a public IP that is\nInternet-routable, assuming we want that.\n\n237\n00:12:15.950 --> 00:12:17.560\nYou might not want that.\n\n238\n00:12:17.560 --> 00:12:20.990\nThere's other services like DHCP,\nDynamic Host Configuration Protocol.\n\n239\n00:12:20.990 --> 00:12:23.310\nHow do we get these private\nIPs in the first place?\n\n240\n00:12:23.310 --> 00:12:27.060\nWell, when you spin up a new instance,\nwhen I launch a new Linux AMI or\n\n241\n00:12:27.060 --> 00:12:30.990\nwhatever, when it comes up it gets an IP.\n\n242\n00:12:30.990 --> 00:12:34.950\nFrom AWS, from a DHCP service\nthat's running in the Cloud and\n\n243\n00:12:34.950 --> 00:12:35.740\nwe can configure that.\n\n244\n00:12:35.740 --> 00:12:38.630\nIt's much like a local DHCP server.\n\n245\n00:12:38.630 --> 00:12:42.330\nThe IP rangers were picked as part of\nthe VPC so that's already set up for us.\n\n246\n00:12:42.330 --> 00:12:45.712\nWe can just specify some other things\nlike what DNS servers they get or\n\n247\n00:12:45.712 --> 00:12:47.419\nwhat gateway they're gonna use.\n\n248\n00:12:47.419 --> 00:12:51.130\nIf you have Wins or NetBios,\nyou need to set node types.\n\n249\n00:12:51.130 --> 00:12:52.290\nYou can still do those.\n\n250\n00:12:52.290 --> 00:12:55.150\nIt's limited its not like a full\nblown DHCP server where you have\n\n251\n00:12:55.150 --> 00:12:56.265\ntons of options.\n\n252\n00:12:56.265 --> 00:13:00.520\nIt's really just designed to be enough\nto get your instances able to talk to\n\n253\n00:13:00.520 --> 00:13:03.130\neach other in the event that\nyou have more than one subnet.\n\n254\n00:13:03.130 --> 00:13:07.570\n&gt;&gt; Now we love our DHCP right it makes our\nlives very very easy and very very nice.\n\n255\n00:13:07.570 --> 00:13:10.480\nBut, there are times when we\nneed to do static IP's as well.\n\n256\n00:13:10.480 --> 00:13:13.700\nI'm assuming if we can do the http\nwe can also set static IPs.\n\n257\n00:13:13.700 --> 00:13:17.040\n&gt;&gt; Absolutely, and there's actually two\ndifferent ways to assigns static IPs and\n\n258\n00:13:17.040 --> 00:13:18.230\nit gets a little confusing.\n\n259\n00:13:18.230 --> 00:13:23.820\nI cover one of those ways back in the,\nback in the EC2 episodes right.\n\n260\n00:13:23.820 --> 00:13:27.700\nBut, let me get back to him by panel and\nI'm gonna jump over to EC2 for\n\n261\n00:13:27.700 --> 00:13:32.930\na second and in EC2 when I have an\ninstance That instance is gonna spin up,\n\n262\n00:13:32.930 --> 00:13:34.350\nI'll just launch one real quick.\n\n263\n00:13:34.350 --> 00:13:37.571\nIt's gonna spin up and\nit's gonna grab an IP from somewhere.\n\n264\n00:13:37.571 --> 00:13:40.090\nWell, where is it gonna grab it from?\n\n265\n00:13:40.090 --> 00:13:42.173\nIt's gonna grab it from\nthe vpc that it's a part of.\n\n266\n00:13:42.173 --> 00:13:47.094\nEvery time you launch an instance,\nthe instance has to ba a part of VPC and\n\n267\n00:13:47.094 --> 00:13:49.595\nit's going to become a part of one and\n\n268\n00:13:49.595 --> 00:13:55.870\nyou'll see here this instance has chosen\nvpc-df3dbaba, rolls right off the tongue.\n\n269\n00:13:55.870 --> 00:13:58.450\nThat's my default VPC,\nthat's why it's got a name like that.\n\n270\n00:13:58.450 --> 00:14:01.890\nWhen you create your own,\nyou can assign a name of your choosing.\n\n271\n00:14:01.890 --> 00:14:04.490\nNow, when I got to launch that,\nit's gonna fire up and\n\n272\n00:14:04.490 --> 00:14:06.110\nit's gonna get a dynamic IP address.\n\n273\n00:14:06.110 --> 00:14:08.280\nIf I want it to have a static IP address,\n\n274\n00:14:08.280 --> 00:14:12.680\none where it's always got it,\nthen I need to do an elastic IP.\n\n275\n00:14:12.680 --> 00:14:16.690\nAnd elastic IPs are available\nright over here in the EC2 panel.\n\n276\n00:14:16.690 --> 00:14:22.700\nAnd I can allocate an elastic IP,\nwhich would be a static IP that I keep.\n\n277\n00:14:22.700 --> 00:14:25.290\nAnd I can then go and\nassign it to the system.\n\n278\n00:14:25.290 --> 00:14:31.060\nNow, notice the elastic IP here is\na public IP address, not a private one.\n\n279\n00:14:31.060 --> 00:14:34.760\nIf it's a private address like a 10.0 or\nwhatever,\n\n280\n00:14:34.760 --> 00:14:39.050\nwell elastic IPs don't do that, elastic\nIPs are designed to be the public ones,\n\n281\n00:14:39.050 --> 00:14:41.310\nthe one the world sees when the access it.\n\n282\n00:14:41.310 --> 00:14:43.702\nSo there is another type that we can do.\n\n283\n00:14:43.702 --> 00:14:46.243\nLet me go back out to, or\nactually do we get it in here,\n\n284\n00:14:46.243 --> 00:14:49.240\nI can't remember if we see it in here or\nnot, I don't think so.\n\n285\n00:14:49.240 --> 00:14:54.430\nBut instead of doing an elastic IP, we\ndo an elastic network interface, an ENI.\n\n286\n00:14:54.430 --> 00:14:58.960\nAn elastic network interface has\nprivate IPs and we can attach\n\n287\n00:14:58.960 --> 00:15:02.960\nthat network interface to an instance,\nand it'll have a particular private IP.\n\n288\n00:15:02.960 --> 00:15:08.640\nNow, our public IP, this elastic IP that I\njust issued, we can take that elastic IP,\n\n289\n00:15:08.640 --> 00:15:14.400\nand we can associate it with an instance,\nwhich is what I did back in the EC2 show.\n\n290\n00:15:14.400 --> 00:15:18.030\nOr I can associated it\nwith a network interface,\n\n291\n00:15:18.030 --> 00:15:20.530\nan elastic network interface, an ENI.\n\n292\n00:15:20.530 --> 00:15:25.810\nAn ENI can have a public and\nprivate IP associated with it.\n\n293\n00:15:25.810 --> 00:15:30.200\nThe public IP comes from the elastic IP\nand the private IP comes from the ENI.\n\n294\n00:15:30.200 --> 00:15:33.800\nSo if I just want a static private IP,\n\n295\n00:15:33.800 --> 00:15:36.150\nI used an elastic network interface,\nand that's it.\n\n296\n00:15:36.150 --> 00:15:40.760\nIf I just want a static public IP,\nI use a elastic IP, and that's it.\n\n297\n00:15:40.760 --> 00:15:44.820\nBut if I want both, I create\nan elastic IP, I create an ENI, and\n\n298\n00:15:44.820 --> 00:15:47.530\nI associate the two together, all right?\n\n299\n00:15:47.530 --> 00:15:48.755\nI'm gonna associate this with an ENI.\n\n300\n00:15:48.755 --> 00:15:52.607\nWell, I don't have an ENI, actually I\nguess I have a couple laying around here.\n\n301\n00:15:52.607 --> 00:15:55.364\nThese are ones that were created as\npart of my machines that came up, so\n\n302\n00:15:55.364 --> 00:15:56.875\nI can go ahead and just associate one.\n\n303\n00:15:56.875 --> 00:15:58.973\nAnd then we can assign a private IP to it.\n\n304\n00:15:58.973 --> 00:16:04.529\nSo I'm using the 172.16 range, instead\nof the 10.range like in that slide So\n\n305\n00:16:04.529 --> 00:16:07.801\nwhen I do that it's going\nto attach the public IP and\n\n306\n00:16:07.801 --> 00:16:10.410\nthis private IP both to this interface.\n\n307\n00:16:10.410 --> 00:16:15.270\nNow, I'm attaching to a interface,\nnot to an instance.\n\n308\n00:16:15.270 --> 00:16:17.010\nWhy would I want to do that?\n\n309\n00:16:17.010 --> 00:16:21.110\nWell, if I ever have an instance\nthat I'm having a problem with\n\n310\n00:16:21.110 --> 00:16:24.030\nI can move the EMI to a new instance.\n\n311\n00:16:24.030 --> 00:16:26.040\nIts a great way to do upgrades, right?\n\n312\n00:16:26.040 --> 00:16:31.686\nI might have a instances up this running\nRed Hat Enterprise Linux 6.5 and\n\n313\n00:16:31.686 --> 00:16:35.642\nI wanna upgrade to\nRed Hat Enterprise Linux 7.3.\n\n314\n00:16:35.642 --> 00:16:38.490\nAll right, well that's a big upgrade,\nits not what I'm gonna do in place.\n\n315\n00:16:38.490 --> 00:16:41.900\nSo I can bring up a second instance,\ncompletely configured,\n\n316\n00:16:41.900 --> 00:16:43.710\nget it working exactly\nthe way that I want it.\n\n317\n00:16:43.710 --> 00:16:49.300\nOnce its done I just moved the ENI over to\nthe new instance, and now the public IP\n\n318\n00:16:49.300 --> 00:16:53.430\nand the private IP both come over to the\nnew instance, and I'm done, I'm upgraded.\n\n319\n00:16:53.430 --> 00:16:54.700\nUnless things go wrong.\n\n320\n00:16:54.700 --> 00:16:58.130\nIf things really go bad, I just move the\nENI right back again, and I move it back\n\n321\n00:16:58.130 --> 00:17:01.090\nover to the old instance, now we're all\nback on the old instance, and off we go.\n\n322\n00:17:01.090 --> 00:17:04.830\nRight, so that's the kind of advantage\nof being able to things like this,\n\n323\n00:17:04.830 --> 00:17:07.335\nis that we can attach it, and\nnow we get that mobility.\n\n324\n00:17:07.335 --> 00:17:09.320\n[LAUGH]\n&gt;&gt; Unless you get an error.\n\n325\n00:17:09.320 --> 00:17:11.430\n&gt;&gt; Now the permission just\nchanged to that resource.\n\n326\n00:17:11.430 --> 00:17:15.470\nI picked a ENI just blindly at random,\nit's probably one that's attached\n\n327\n00:17:15.470 --> 00:17:18.610\nto an Internet gateway,\nwhich you're not allowed to mess with.\n\n328\n00:17:18.610 --> 00:17:20.780\nThat's also why it's kind of\nimportant to name your instances so\n\n329\n00:17:20.780 --> 00:17:22.910\nthat you can easily spot them.\n\n330\n00:17:22.910 --> 00:17:27.530\nBut, I was doing this from the EC2 panel\nIf I jump back out to the VPC panel,\n\n331\n00:17:27.530 --> 00:17:32.420\nyou'll see a lot of those same options\nin there when I go into my VPC's and\n\n332\n00:17:32.420 --> 00:17:35.270\nI take a look at what's available\nover here on the left side you'll see\n\n333\n00:17:35.270 --> 00:17:38.140\nwhere I've got my elastic IP's right here.\n\n334\n00:17:38.140 --> 00:17:41.340\nWe also see our NAT options and\nout internet gateways,\n\n335\n00:17:41.340 --> 00:17:44.870\nour routing tables, it's all\nmanaged right here from one place.\n\n336\n00:17:44.870 --> 00:17:48.940\nAnd we go and create an elastic IP it\nwill show up right here there it is and\n\n337\n00:17:48.940 --> 00:17:52.450\nI can see if it's tied to an instance or\ninterface and work from there.\n\n338\n00:17:52.450 --> 00:17:53.460\n&gt;&gt; Dan is there a way for\n\n339\n00:17:53.460 --> 00:17:58.160\nus to right you were talking about adding\nyou know the IPs to an interface and\n\n340\n00:17:58.160 --> 00:18:02.720\nI'm thinking what if we had multiple VPCs\nis there a way to connect them together?\n\n341\n00:18:02.720 --> 00:18:03.920\nYeah, absolutely.\n\n342\n00:18:03.920 --> 00:18:08.730\nAnd a part of it is just making sure you\ngot your IP structure correct, right?\n\n343\n00:18:08.730 --> 00:18:12.590\nBut then beyond that,\nif they're your VPCs, if you control them,\n\n344\n00:18:12.590 --> 00:18:16.950\nyou can just set up the main routing\ntable and now they talk, right?\n\n345\n00:18:16.950 --> 00:18:19.680\nOoh, nice little caveat here,\nprobably not what you're asking about.\n\n346\n00:18:19.680 --> 00:18:21.080\nBut something I want to throw out.\n\n347\n00:18:21.080 --> 00:18:22.750\nThe default VPC.\n\n348\n00:18:22.750 --> 00:18:26.740\nIf you have a default VPC in place and\nyou deploy five instances,\n\n349\n00:18:26.740 --> 00:18:29.180\nthe five instances can\nall talk to each other.\n\n350\n00:18:29.180 --> 00:18:33.450\nBut if you create a custom VPC,\nwhen you create that and\n\n351\n00:18:33.450 --> 00:18:36.370\nyou throw five instances in there,\nthey cannot talk to each other.\n\n352\n00:18:36.370 --> 00:18:38.670\nThe default security group blocks them.\n\n353\n00:18:38.670 --> 00:18:40.680\nSo we're gonna talk more about\nsecurity groups in a minute.\n\n354\n00:18:40.680 --> 00:18:41.690\nBut I just wanna throw that out there,\n\n355\n00:18:41.690 --> 00:18:44.900\nthat your instances may not be\nable to talk in your custom VPCs.\n\n356\n00:18:44.900 --> 00:18:48.340\nThe other thing though is, what if I want\nmy VPC to talk to another service or\n\n357\n00:18:48.340 --> 00:18:50.740\nto another VPC all together, right?\n\n358\n00:18:50.740 --> 00:18:53.660\nWhen we create these they're virtual\nprivate clouds, they're isolated,\n\n359\n00:18:53.660 --> 00:18:54.690\nthey're separated, right.\n\n360\n00:18:54.690 --> 00:18:58.500\nWe don't want them talking to other\npeople, but if I have a need for\n\n361\n00:18:58.500 --> 00:18:59.940\nthat I can do it, all right.\n\n362\n00:18:59.940 --> 00:19:04.180\nAnd there's two main ways to do it,\nthere's peering and there's VPNs.\n\n363\n00:19:04.180 --> 00:19:07.700\nAnd with peering, well actually hang on.\n\n364\n00:19:07.700 --> 00:19:09.370\nThere's a couple of\ndifferent ways to do this.\n\n365\n00:19:09.370 --> 00:19:10.950\nLet's talk about end points and peering.\n\n366\n00:19:10.950 --> 00:19:11.770\nI'm gonna save VPNs for a minute.\n\n367\n00:19:11.770 --> 00:19:12.640\nThat's a big topic.\n\n368\n00:19:12.640 --> 00:19:15.590\nSo we'll talk about end points and\npeering.\n\n369\n00:19:15.590 --> 00:19:22.460\nWith end points, an end point is a way to\nconnect your VPC to another AWS service.\n\n370\n00:19:22.460 --> 00:19:26.460\nThere may be a service that I have\non AWS that I want my instances or\n\n371\n00:19:26.460 --> 00:19:29.880\nVPC to contact but\nnot be able to contact the internet.\n\n372\n00:19:29.880 --> 00:19:33.000\nNormally if I have something\nlike EC2 instance and\n\n373\n00:19:33.000 --> 00:19:37.290\nit wants to access Amazon S3, technically\nits crossing the internet to do it.\n\n374\n00:19:37.290 --> 00:19:40.890\nGranted that entire internet exists\nall within Amazon's infrastructure but\n\n375\n00:19:40.890 --> 00:19:41.860\ni am still crossing the internet.\n\n376\n00:19:41.860 --> 00:19:46.430\nAnd if I don't have internet\naccess I can't reach S3.\n\n377\n00:19:46.430 --> 00:19:51.390\nWell, you can define an end point and\nan end point says, here's my VPC,\n\n378\n00:19:51.390 --> 00:19:54.440\nit's private, it's not allowed to\nget to the internet, or maybe it is.\n\n379\n00:19:54.440 --> 00:19:56.250\nI'm going to create an end point so\n\n380\n00:19:56.250 --> 00:19:59.760\nthat other Amazon servers\nnow have access to that.\n\n381\n00:19:59.760 --> 00:20:01.960\nCurrently the only end\npoint supported is S3.\n\n382\n00:20:01.960 --> 00:20:03.730\nThat's why I use S3 as an example.\n\n383\n00:20:03.730 --> 00:20:06.630\nAmazon is going to add more in the future,\nbut for now you just have S3.\n\n384\n00:20:06.630 --> 00:20:09.990\nSo if there's an S3 bucket that\nI want a VPC to access but\n\n385\n00:20:09.990 --> 00:20:13.840\nthe VPC doesn't have internet access,\nI can create an endpoint for that.\n\n386\n00:20:13.840 --> 00:20:14.640\nAll right?\n\n387\n00:20:14.640 --> 00:20:17.570\nIf the VPC does have internet access,\nthere's not really a benefit for creating\n\n388\n00:20:17.570 --> 00:20:20.640\nan endpoint because they can just access\nit through the regular public IPs and\n\n389\n00:20:20.640 --> 00:20:21.220\nthat's that, right?\n\n390\n00:20:21.220 --> 00:20:24.110\nSo it's really only useful\nif you have a truly private\n\n391\n00:20:24.110 --> 00:20:25.699\nVPC that doesn't have internet access.\n\n392\n00:20:27.380 --> 00:20:29.790\nPeering is another similar type scenario.\n\n393\n00:20:30.970 --> 00:20:35.320\nWhat if I have a VPC and I've configured\nall of these servers and instances and\n\n394\n00:20:35.320 --> 00:20:39.590\nall these crazy things in there and\nyour company has a VPC.\n\n395\n00:20:39.590 --> 00:20:42.220\nYou've got a number of resources and\nthings in there and\n\n396\n00:20:42.220 --> 00:20:44.740\nI want my company to be able\nto talk to your company.\n\n397\n00:20:44.740 --> 00:20:47.300\nBut I don't want to go through\nthe Internet for this.\n\n398\n00:20:47.300 --> 00:20:49.280\nI don't want my VPC to have\nInternet connectivity, but\n\n399\n00:20:49.280 --> 00:20:50.640\nI do want to talk to your VPC, all right.\n\n400\n00:20:51.880 --> 00:20:55.340\nWell, here's where we can use VP Install,\nI'll talk about later.\n\n401\n00:20:55.340 --> 00:20:56.950\nOr peering.\n\n402\n00:20:56.950 --> 00:21:01.730\nPeering is where you connect\nyour VPC to someone else's VPC.\n\n403\n00:21:01.730 --> 00:21:04.300\nAnd that allows them to\ncommunicate together,\n\n404\n00:21:04.300 --> 00:21:05.760\nand they can exchange information.\n\n405\n00:21:05.760 --> 00:21:09.900\nNow this is not intended to be used to\nconnect your VPC to some of your other.\n\n406\n00:21:09.900 --> 00:21:13.380\nSo if I have five VPCs that's great,\nyou can do that.\n\n407\n00:21:13.380 --> 00:21:17.290\nBut if I have my VPCs where\nthey talk to each other\n\n408\n00:21:17.290 --> 00:21:19.500\nthen I really didn't need a VPC there,\ndid I?\n\n409\n00:21:19.500 --> 00:21:24.900\nI probably could have achieved\nthe same goal by using network ACLs or\n\n410\n00:21:24.900 --> 00:21:30.080\nsecurity groups and had it all on one VPC\ninstead of having multiple ones, but.\n\n411\n00:21:30.080 --> 00:21:35.620\nIf I want my VPC to talk to somebody\nelse's separate amazon account, will\n\n412\n00:21:35.620 --> 00:21:39.430\nthat's not really possible without going\nthrough the internet until we had peering.\n\n413\n00:21:39.430 --> 00:21:42.120\nWith peering you both\nset it up on each side,\n\n414\n00:21:42.120 --> 00:21:43.780\nit takes both sides to get it set up.\n\n415\n00:21:43.780 --> 00:21:46.890\nYour VPC will be able to\ntalk to VPC that's out there\n\n416\n00:21:46.890 --> 00:21:48.300\neven if it doesn't have internet access.\n\n417\n00:21:48.300 --> 00:21:50.190\nThat's another solution\nthat's available to us.\n\n418\n00:21:50.190 --> 00:21:53.280\n&gt;&gt; Are there any limitations\nto using the peering option?\n\n419\n00:21:53.280 --> 00:21:55.550\nThere’s limitations with everything.\n\n420\n00:21:55.550 --> 00:21:56.690\n&gt;&gt; [LAUGH]\n&gt;&gt; The main challenge with\n\n421\n00:21:56.690 --> 00:22:00.160\nthe peering option is just that\nyou gotta get both sides involved.\n\n422\n00:22:00.160 --> 00:22:02.880\nBoth sides have to team up and\nget that set together.\n\n423\n00:22:02.880 --> 00:22:08.230\nIt does have some limitations that\nare done purposely to make it more secure.\n\n424\n00:22:08.230 --> 00:22:10.870\nSo, for example they're non-transitive.\n\n425\n00:22:10.870 --> 00:22:12.480\nLet me show you what I mean.\n\n426\n00:22:12.480 --> 00:22:13.560\nLet’s say that.\n\n427\n00:22:13.560 --> 00:22:14.880\nI have a VPC, right?\n\n428\n00:22:14.880 --> 00:22:21.180\nThat's gonna be VPC A, and Daniel has\nVPC B, and you as the viewer have VPC C.\n\n429\n00:22:21.180 --> 00:22:25.870\nWell, you guys want to talk to my VPC so\nI let Daniel talk to my VPC,\n\n430\n00:22:25.870 --> 00:22:30.290\nbetween B and A, and\nI let you talk to my VPC, between C and A.\n\n431\n00:22:30.290 --> 00:22:33.080\nWell, does that mean that\nDaniel can now talk to you?\n\n432\n00:22:34.120 --> 00:22:36.110\nNo.\nSo, they're nontransitive.\n\n433\n00:22:36.110 --> 00:22:38.620\nIt doesn't allow one person to pass\nthrough the other and that's for\n\n434\n00:22:38.620 --> 00:22:39.770\nsecurity purposes.\n\n435\n00:22:39.770 --> 00:22:43.140\nIf you wanna talk to Daniel's VPC,\nyou two will have to get together and\n\n436\n00:22:43.140 --> 00:22:44.110\nwork that out.\n\n437\n00:22:44.110 --> 00:22:47.060\nSo, on a positive side, it's more secure.\n\n438\n00:22:47.060 --> 00:22:51.170\nOn a negative side, the VPCs involved the\nmore complex it gets cuz you're having to\n\n439\n00:22:51.170 --> 00:22:55.010\nset it up more and more times for\neach kinda trusted VPC,\n\n440\n00:22:55.010 --> 00:23:00.090\nas a result VPC peering like this is\nalmost always hard spoke, whether there\n\n441\n00:23:00.090 --> 00:23:04.590\nis one center VPC that other people want\naccess to, is not like a fool master, it\n\n442\n00:23:04.590 --> 00:23:08.605\njust becomes too much to manage, and it's\nusually indicate our bad network design.\n\n443\n00:23:08.605 --> 00:23:11.270\n[LAUGH]\n&gt;&gt; So, it's usually some other way we\n\n444\n00:23:11.270 --> 00:23:15.410\ncould configure things that would have,\nhave better met the needs of them all.\n\n445\n00:23:15.410 --> 00:23:17.190\n&gt;&gt; All right, well now lets talk security.\n\n446\n00:23:17.190 --> 00:23:20.400\nWe've been kinda like hitting\naround that bush so let's go there.\n\n447\n00:23:20.400 --> 00:23:23.860\nHow do we add security to our VPCs?\n\n448\n00:23:23.860 --> 00:23:26.890\n&gt;&gt; You know on the security side\nthere is actually quite a bit.\n\n449\n00:23:26.890 --> 00:23:28.840\nWe've got security groups\nthat act like firewalls,\n\n450\n00:23:28.840 --> 00:23:30.730\nnetwork access controls\nthat act like firewalls.\n\n451\n00:23:30.730 --> 00:23:32.820\nWe've got VPNs that act like firewalls.\n\n452\n00:23:32.820 --> 00:23:34.870\nSo again a number of different\nthings to get to and\n\n453\n00:23:34.870 --> 00:23:38.530\nI know I'm kinda short on time on this\none so why don't we do this, why don't\n\n454\n00:23:38.530 --> 00:23:42.220\nwe break this one up into a part two, and\nwe'll tackle security at a separate time.\n\n455\n00:23:42.220 --> 00:23:44.100\nBecause I wanna make sure,\nI don't wanna rush through it,\n\n456\n00:23:44.100 --> 00:23:46.381\ncuz it's probably the most important part.\n\n457\n00:23:46.381 --> 00:23:47.949\n&gt;&gt; [LAUGH]\n&gt;&gt; When you have a VPC,\n\n458\n00:23:47.949 --> 00:23:50.710\nit's all about isolating that traffic,\nright?\n\n459\n00:23:50.710 --> 00:23:53.370\nAnd if we configure security wrong,\nall the sudden it's not isolated.\n\n460\n00:23:53.370 --> 00:23:55.780\nAnd you might as well\nnot have a VPC at all.\n\n461\n00:23:55.780 --> 00:23:57.700\nSo, we need to sound the other\noptions that are available.\n\n462\n00:23:57.700 --> 00:24:00.840\nThere's a couple of neat ones that are\nthere and we'll tackle that in part two.\n\n463\n00:24:00.840 --> 00:24:01.560\n&gt;&gt; That's sounds good.\n\n464\n00:24:01.560 --> 00:24:05.667\nWe'll spare you the doing the micromachine\nman impression for this episode.\n\n465\n00:24:05.667 --> 00:24:06.210\n&gt;&gt; [LAUGH].\n\n466\n00:24:06.210 --> 00:24:07.350\nLet you do that part too.\n\n467\n00:24:07.350 --> 00:24:09.210\nDon, thanks so much for\ngetting us thus far.\n\n468\n00:24:09.210 --> 00:24:12.330\nWe hope that you will continue\nwith us in our part two.\n\n469\n00:24:12.330 --> 00:24:14.330\nAs for this episode,\nwe're gonna go ahead and sign off.\n\n470\n00:24:14.330 --> 00:24:17.070\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n471\n00:24:17.070 --> 00:24:17.790\n&gt;&gt; And I'm Don Pezet.\n\n472\n00:24:17.790 --> 00:24:19.748\n&gt;&gt; And we'll see you next time.\n\n473\n00:24:19.748 --> 00:24:25.736\n[MUSIC]\n\n474\n00:24:25.736 --> 00:24:28.949\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "208149819"
        },
        {
          "description": "In this episode, Daniel and Don continue diving into Virtual Private Clouds, here looking more into VPC security through things like Security Groups(SG), Network Access Control Lists(ACLs), Network Address Translation(NAT), and Virtual Private Networks(VPNs).",
          "length": "1695",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-2-virtual_private_cloud_pt2-030617-PGM.00_28_00_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-2-virtual_private_cloud_pt2-030617-PGM.00_28_00_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-2-virtual_private_cloud_pt2-030617-PGM.00_28_00_29.Still001-sm.jpg",
          "title": "Virtual Private Cloud Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:06.608\nWelcome to ITPro.TV, I'm your host\nDon Pezet [CROSSTALK] [CROSSTALK]\n\n2\n00:00:06.608 --> 00:00:08.345\n[MUSIC]\n\n3\n00:00:08.345 --> 00:00:12.298\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:12.298 --> 00:00:14.162\n&gt;&gt; All right greetings everyone, and\n\n5\n00:00:14.162 --> 00:00:16.903\nwelcome to another exciting\nepisode of ITPro.TV.\n\n6\n00:00:16.903 --> 00:00:18.143\nI'm your host Daniel Lowrie.\n\n7\n00:00:18.143 --> 00:00:22.148\nAnd in today's episode,\nwe are back with more on our ACSAA series.\n\n8\n00:00:22.148 --> 00:00:25.984\nAnd of course joining us in the studio,\nour good friend and mentor, Mr. Don Pezet.\n\n9\n00:00:25.984 --> 00:00:26.826\nDon, welcome back sir.\n\n10\n00:00:26.826 --> 00:00:27.707\nHow goes it today?\n\n11\n00:00:27.707 --> 00:00:29.160\n&gt;&gt; I'm doing just swell, Daniel.\n\n12\n00:00:29.160 --> 00:00:32.058\nReady to wrap up what we were talking\nabout in the last episode, which was,\n\n13\n00:00:32.058 --> 00:00:33.635\nwell, virtual private cloud, right.\n\n14\n00:00:33.635 --> 00:00:35.716\nWe were talking about a lot of\nthe neat little features and bells and\n\n15\n00:00:35.716 --> 00:00:36.470\nwhistles inside of it.\n\n16\n00:00:36.470 --> 00:00:40.138\nBut we didn't quite get to security, so\nwe're gonna pick back up with that and\n\n17\n00:00:40.138 --> 00:00:41.427\ndive right back into VPCs.\n\n18\n00:00:41.427 --> 00:00:43.840\n&gt;&gt; That's right,\nwe did leave off with security.\n\n19\n00:00:43.840 --> 00:00:48.431\nHad a great question for Don, which is,\nhow do we add security to our VPCs?\n\n20\n00:00:48.431 --> 00:00:49.362\nObviously it's a network.\n\n21\n00:00:49.362 --> 00:00:52.454\nWe might have even opened it\nup to Internet access, and\n\n22\n00:00:52.454 --> 00:00:55.088\nwe've got to add a layer\nof security in there.\n\n23\n00:00:55.088 --> 00:00:56.595\nHow is it that we do that, good sir?\n\n24\n00:00:56.595 --> 00:00:58.625\n&gt;&gt; All right, well,\nwe actually have two different approaches.\n\n25\n00:00:58.625 --> 00:01:00.664\nSo let me start with\nthe most common one first,\n\n26\n00:01:00.664 --> 00:01:02.767\nthen we'll get to the more\nspecific one later.\n\n27\n00:01:02.767 --> 00:01:05.541\nBut the first way is\nthrough security groups.\n\n28\n00:01:05.541 --> 00:01:08.762\nNow if you've used EC2 and\nyou've spun up instances before,\n\n29\n00:01:08.762 --> 00:01:10.800\nyou've seen security groups.\n\n30\n00:01:10.800 --> 00:01:14.200\nEvery instance has at least one\nsecurity group attached to it, and\n\n31\n00:01:14.200 --> 00:01:15.710\nyou can add more if you feel like it.\n\n32\n00:01:15.710 --> 00:01:17.300\nBut you're gonna have at least one.\n\n33\n00:01:17.300 --> 00:01:21.250\nAnd what that security group does,\nis it acts like a stateful firewall.\n\n34\n00:01:21.250 --> 00:01:26.046\nThe stateful firewall is usually designed\nto control traffic passing through\n\n35\n00:01:26.046 --> 00:01:26.997\nthe firewall.\n\n36\n00:01:26.997 --> 00:01:29.540\nAnd if you think about a firewall,\nwhat does it do?\n\n37\n00:01:29.540 --> 00:01:33.130\nIt allows some traffic,\nand it stops some traffic.\n\n38\n00:01:33.130 --> 00:01:35.440\nAnd in the firewall world,\nthere's two different types.\n\n39\n00:01:35.440 --> 00:01:37.280\nThere's stateful and stateless.\n\n40\n00:01:37.280 --> 00:01:43.310\nA stateful firewall is one that keeps\ntrack of who's communicating through.\n\n41\n00:01:43.310 --> 00:01:46.300\nAnd it makes the assumption that\nif we allow traffic to go one way,\n\n42\n00:01:46.300 --> 00:01:50.090\nwe obviously would want the reply\nto come back again, right?\n\n43\n00:01:50.090 --> 00:01:54.630\nSo it's having to track that to\nallow replies to come back through.\n\n44\n00:01:54.630 --> 00:01:59.850\nA firewall that's not stateful, is,\nwell, it's a unidirectional firewall.\n\n45\n00:01:59.850 --> 00:02:01.200\nIt's allowing traffic one way,\n\n46\n00:02:01.200 --> 00:02:04.670\nand then I have to make sure I\nallow the return traffic also.\n\n47\n00:02:04.670 --> 00:02:07.010\nThink about, for example,\nif I browse to the Internet on my laptop.\n\n48\n00:02:07.010 --> 00:02:08.610\nI browse to a website.\n\n49\n00:02:08.610 --> 00:02:12.208\nI need to allow my laptop to get to\nthe server that's hosting the website.\n\n50\n00:02:12.208 --> 00:02:16.020\nBut then I need that server to be\nable to reply back to my laptop.\n\n51\n00:02:16.020 --> 00:02:17.900\nIt's a two-way communication.\n\n52\n00:02:17.900 --> 00:02:21.210\nWell, when you spin up a VPC and\n\n53\n00:02:21.210 --> 00:02:24.410\nyou create security groups and\nattach your instances to them,\n\n54\n00:02:24.410 --> 00:02:29.850\nyou're creating stateful firewalls, where\nyou only have to create the rules one way.\n\n55\n00:02:29.850 --> 00:02:31.754\nAnd by doing that, it says, all right,\n\n56\n00:02:31.754 --> 00:02:34.667\nwe're gonna assume that if you\nallow this traffic to come in,\n\n57\n00:02:34.667 --> 00:02:37.712\nthat you obviously want to be able\nto reply back, or vice versa.\n\n58\n00:02:37.712 --> 00:02:39.895\nSo it sets it up to work that way.\n\n59\n00:02:39.895 --> 00:02:45.400\nNow, when you spin up a new Amazon\naccount, your default VPC, any security\n\n60\n00:02:45.400 --> 00:02:51.163\ngroup that you create in that VPC will\nhave a simple characteristic, which is,\n\n61\n00:02:51.163 --> 00:02:56.840\nit will deny all incoming traffic and\nit will allow all outbound traffic.\n\n62\n00:02:56.840 --> 00:03:00.530\nSo all of your instances, they'll be able\nto go out and communicate to the Internet.\n\n63\n00:03:00.530 --> 00:03:04.930\nBut the Internet will not be able to talk\nto your instances by default, right?\n\n64\n00:03:04.930 --> 00:03:08.210\nUnless you configure it or\nyou tell your machine to do it.\n\n65\n00:03:08.210 --> 00:03:12.100\nIf my VPC reaches out to Microsoft for\nupdates, Microsoft will be allowed to\n\n66\n00:03:12.100 --> 00:03:15.580\nreply back because it's stateful,\nthat's how a stateful firewall works.\n\n67\n00:03:15.580 --> 00:03:19.710\nSo that's the basics of how\nthat security group works.\n\n68\n00:03:19.710 --> 00:03:23.610\nBut when we create a custom VPC,\nit's a little bit different.\n\n69\n00:03:23.610 --> 00:03:26.326\nThe default VPC allows outbound traffic.\n\n70\n00:03:26.326 --> 00:03:31.440\nThe security groups we create in own VPCs,\nthey're different.\n\n71\n00:03:31.440 --> 00:03:33.150\nThey don't allow any traffic by default.\n\n72\n00:03:33.150 --> 00:03:34.853\nThey're stateful, but\neverything is blocked.\n\n73\n00:03:34.853 --> 00:03:36.925\nThey don't allow anything in and\nanything out.\n\n74\n00:03:36.925 --> 00:03:37.947\nIt's a shut door.\n\n75\n00:03:37.947 --> 00:03:38.709\n&gt;&gt; Very secure.\n\n76\n00:03:38.709 --> 00:03:41.720\n&gt;&gt; Yeah, well, I mean,\nhow can you be sure, right?\n\n77\n00:03:41.720 --> 00:03:46.420\nSo by starting with nothing,\nyou then have to approve the access.\n\n78\n00:03:46.420 --> 00:03:47.290\nAnd that's good.\n\n79\n00:03:47.290 --> 00:03:50.240\nThat's a good thing,\nbecause it allows you to be certain,\n\n80\n00:03:50.240 --> 00:03:54.250\nto be sure, that only the access\nthat's necessary has been granted.\n\n81\n00:03:54.250 --> 00:03:57.720\nAnd so you can define exactly what you\nwant right there in the security group.\n\n82\n00:03:57.720 --> 00:04:00.510\nSo for example,\nI'm in one of my VPCs here.\n\n83\n00:04:00.510 --> 00:04:02.630\nAnd if I go down to Security Groups.\n\n84\n00:04:02.630 --> 00:04:04.447\nLook at all these security\ngroups that I've got.\n\n85\n00:04:04.447 --> 00:04:07.020\nWell, you can have many of them, right.\n\n86\n00:04:07.020 --> 00:04:08.720\nAnd you may need to have many of them,\n\n87\n00:04:08.720 --> 00:04:12.520\nbecause a security group has\na couple of limits attached to it.\n\n88\n00:04:12.520 --> 00:04:17.632\nWith a security group, we have, basically\nthese inbound and outbound rules.\n\n89\n00:04:17.632 --> 00:04:21.300\nAnd you're limited to 50 of each.\n\n90\n00:04:21.300 --> 00:04:24.680\nI can have 50 inbound and\n50 outbound rules.\n\n91\n00:04:24.680 --> 00:04:26.460\nNow, 50's a lot.\n\n92\n00:04:26.460 --> 00:04:30.531\nAnd typically, you're not gonna\nneed 50 of them, but maybe.\n\n93\n00:04:30.531 --> 00:04:33.350\nI mean,\nI've got a decent chunk here in this rule.\n\n94\n00:04:33.350 --> 00:04:37.400\nSo maybe you do end up having to\nhave a big chunk for some reason.\n\n95\n00:04:37.400 --> 00:04:39.680\nAnd if you need to exceed 50,\n\n96\n00:04:39.680 --> 00:04:43.650\nwell, fortunately you can attach more\nthan one security group to an instance.\n\n97\n00:04:43.650 --> 00:04:47.535\nSo I could have an instance that's tied to\nthree or four different security groups,\n\n98\n00:04:47.535 --> 00:04:49.408\nso up to five, sorry, there is a limit.\n\n99\n00:04:49.408 --> 00:04:53.977\nSo up to five, well if I could have 50\ninbound rules per security group and\n\n100\n00:04:53.977 --> 00:04:57.880\nan instant can be attached to\nfive of those security groups.\n\n101\n00:04:57.880 --> 00:05:00.490\nThat means I could have 250 inbound rules.\n\n102\n00:05:00.490 --> 00:05:04.869\nAnd I could have 250 outbound rules,\nby using multiple security groups.\n\n103\n00:05:04.869 --> 00:05:06.270\nIt starts getting complex, though.\n\n104\n00:05:06.270 --> 00:05:07.380\nIt starts getting difficult to manage.\n\n105\n00:05:07.380 --> 00:05:10.135\nSo that's something you want to avoid.\n\n106\n00:05:10.135 --> 00:05:12.256\nIt's usually an indicator of\na bad network design, but\n\n107\n00:05:12.256 --> 00:05:14.480\nyou might have a specific\npurpose that's led you to that.\n\n108\n00:05:14.480 --> 00:05:16.150\nAnd that's just\nthe requirement that you have.\n\n109\n00:05:16.150 --> 00:05:18.260\nAnd so you end up in that scenario.\n\n110\n00:05:18.260 --> 00:05:21.050\nThere is another solution I'll talk\nabout in a minute that works also.\n\n111\n00:05:21.050 --> 00:05:24.710\nBut as far as the security groups go,\nthey're usually the most flexible and\n\n112\n00:05:24.710 --> 00:05:26.318\nthe easiest to work with.\n\n113\n00:05:26.318 --> 00:05:30.937\nWhen you create a security group,\nif I just whip one up real quick,\n\n114\n00:05:30.937 --> 00:05:33.506\nmaybe it'll be Don's web servers.\n\n115\n00:05:33.506 --> 00:05:37.979\nAnd we'll give it a description of\nDon's web servers cuz I'm not terribly\n\n116\n00:05:37.979 --> 00:05:39.615\ncreative with this stuff.\n\n117\n00:05:39.615 --> 00:05:40.980\nAnd so I'll create that.\n\n118\n00:05:40.980 --> 00:05:43.880\nWhen you create a security group,\nyou attach it to a VPC,\n\n119\n00:05:43.880 --> 00:05:47.500\nwhich might be your default VPC or\na custom VPC that you've made.\n\n120\n00:05:47.500 --> 00:05:50.630\nWhen you attach it though,\nit's gonna get created.\n\n121\n00:05:50.630 --> 00:05:54.922\nAnd whoops,\nnot allowed to have that hyphen, am I?\n\n122\n00:05:54.922 --> 00:05:56.473\nAnd, I don't know about\nthat apostrophe either,\n\n123\n00:05:56.473 --> 00:05:59.430\nlet's just get rid of the special\ncharacters to be on the safe side.\n\n124\n00:05:59.430 --> 00:06:01.220\nThere we go and\nwe'll whip that up real quick.\n\n125\n00:06:01.220 --> 00:06:04.160\nAnd once it's created,\nit's gonna have a default set of rules.\n\n126\n00:06:04.160 --> 00:06:07.047\nWell, here's my inbound rules,\nyou don't have any.\n\n127\n00:06:07.047 --> 00:06:08.990\nAnd here's my outbound rules.\n\n128\n00:06:08.990 --> 00:06:15.470\nAll traffic is allowed to everywhere\nbecause I put it in my default VPC.\n\n129\n00:06:15.470 --> 00:06:18.180\nIf I put it in a custom VPC this\nrule wouldn't be here either,\n\n130\n00:06:18.180 --> 00:06:20.570\nI'd have nothing, no in, no out.\n\n131\n00:06:20.570 --> 00:06:22.420\nNo traffic would be\nallowed to pass through.\n\n132\n00:06:22.420 --> 00:06:25.049\nI would then need to come in here and\ncreate those rules and specify.\n\n133\n00:06:25.049 --> 00:06:29.341\nSo, on the outbound maybe I don't want\nall my machines to be able to get out to\n\n134\n00:06:29.341 --> 00:06:30.226\nthe Internet.\n\n135\n00:06:30.226 --> 00:06:32.816\nRight, so I might change this and\ncome in and\n\n136\n00:06:32.816 --> 00:06:36.667\nsay hey instead of letting all\ntraffic I want to be very specific.\n\n137\n00:06:36.667 --> 00:06:41.562\nAnd I just want to allow all TCP\ntraffic to a server that's hosting\n\n138\n00:06:41.562 --> 00:06:46.639\na Red Hat file repository so\nI can do updates or something like that.\n\n139\n00:06:46.639 --> 00:06:50.630\nI can come through and be very specific\nabout what's being allowed to go out.\n\n140\n00:06:50.630 --> 00:06:55.325\nNow it is possible that if you're\nfollowing along with me in the video here\n\n141\n00:06:55.325 --> 00:07:00.569\nyou went to this screen and you only see\ninbound rules and you don't see outbound.\n\n142\n00:07:00.569 --> 00:07:03.286\nAll right when security groups\nwere originally released,\n\n143\n00:07:03.286 --> 00:07:05.160\nthey only supported one direction.\n\n144\n00:07:05.160 --> 00:07:06.400\nThey didn't support both.\n\n145\n00:07:06.400 --> 00:07:07.340\nAnd then that was added.\n\n146\n00:07:07.340 --> 00:07:10.349\nSo, newer security groups,\nonce that have been created in the last,\n\n147\n00:07:10.349 --> 00:07:12.240\nit's been a while, like five or six years.\n\n148\n00:07:12.240 --> 00:07:14.471\nThe ones that are created\nnow have both in and out,\n\n149\n00:07:14.471 --> 00:07:16.980\nbut if you get some really old\nones you might only see in.\n\n150\n00:07:16.980 --> 00:07:19.850\nSo then you just create a new one and\nyou'll have that new functionality.\n\n151\n00:07:19.850 --> 00:07:22.270\nBut, basically you can\nspecify those rules and\n\n152\n00:07:22.270 --> 00:07:24.880\nget everything defined here\nexactly the way that you want it.\n\n153\n00:07:24.880 --> 00:07:28.025\nEasy to manage via the web UI,\nvia the command line, via the API.\n\n154\n00:07:28.025 --> 00:07:29.850\nIt's all easy to work with.\n\n155\n00:07:29.850 --> 00:07:33.690\nYou can even add rules temporarily and\nremove rules based on your needs.\n\n156\n00:07:33.690 --> 00:07:36.493\nA key thing to remember\nhere is that security\n\n157\n00:07:36.493 --> 00:07:38.860\nbecome really important with custom VPCs.\n\n158\n00:07:38.860 --> 00:07:44.157\nWhen I create a custom VPC I'm gonna\nneed to specify security groups and\n\n159\n00:07:44.157 --> 00:07:48.494\neven for just letting my\ninternal host talk to each other.\n\n160\n00:07:48.494 --> 00:07:52.106\nI might have two EC2 instances\nin the same VPC, and\n\n161\n00:07:52.106 --> 00:07:56.478\nthey're not allowed to talk by\ndefault if it's a custom VPC.\n\n162\n00:07:56.478 --> 00:07:59.670\nI'll need to take the security group and\nconfigure that to allow it and\n\n163\n00:07:59.670 --> 00:08:03.353\neverything passes through the security\ngroup Regardless of whether it's being\n\n164\n00:08:03.353 --> 00:08:04.070\nrouted or not.\n\n165\n00:08:04.070 --> 00:08:06.582\nThe security group is applied\nto everything going in and\n\n166\n00:08:06.582 --> 00:08:07.710\nout of those instances.\n\n167\n00:08:09.335 --> 00:08:13.060\nNow, security groups are usually\ngonna be your go to tool.\n\n168\n00:08:13.060 --> 00:08:15.020\nThese are the ones you want to do.\n\n169\n00:08:15.020 --> 00:08:19.360\nThe problem is, it's possible for\npeople to make a mistake.\n\n170\n00:08:19.360 --> 00:08:21.930\nPeople can weaken security too much,\nthey can go in there and\n\n171\n00:08:21.930 --> 00:08:25.330\nthey can approve too much\naccess to a security group.\n\n172\n00:08:25.330 --> 00:08:29.480\nAnd now you've got a weak system, and\nsomebody could compromise that system and\n\n173\n00:08:29.480 --> 00:08:34.210\nthen leapfrog to compromise the other\nsystems in your VPC, you don't want that.\n\n174\n00:08:34.210 --> 00:08:38.970\nSo there's an extra layer of security\nthat we can deploy inside of a VPC.\n\n175\n00:08:38.970 --> 00:08:43.110\nAnd that's called\na Network Access Control List or an NACL.\n\n176\n00:08:43.110 --> 00:08:47.100\nWhen you look at my navigation on\nthe left-side when I go to security,\n\n177\n00:08:47.100 --> 00:08:50.960\nI've got security groups and\nI've got Network ACLs.\n\n178\n00:08:50.960 --> 00:08:52.589\nAnd they are very, very similar.\n\n179\n00:08:53.680 --> 00:08:56.870\nWhen I take a look at a Network ACL like\nthis one that I've got created here,\n\n180\n00:08:56.870 --> 00:08:59.390\nit's got inbound and outbound rules.\n\n181\n00:08:59.390 --> 00:09:04.820\nAnd it's allowing traffic or\nletting it through.\n\n182\n00:09:04.820 --> 00:09:06.160\nAllowing or blocking it.\n\n183\n00:09:06.160 --> 00:09:09.210\nSo if it looks like a security,\n\n184\n00:09:09.210 --> 00:09:12.860\nwhy do I have this if it does\nexactly what a security group does?\n\n185\n00:09:12.860 --> 00:09:15.760\nAnd the answer is it's different.\n\n186\n00:09:15.760 --> 00:09:18.390\nIt's different not just the same but\nin function.\n\n187\n00:09:18.390 --> 00:09:19.750\nIt works differently.\n\n188\n00:09:19.750 --> 00:09:25.330\nFirst off network ACLs are not stateful so\nwhen I create rules,\n\n189\n00:09:25.330 --> 00:09:29.190\nif I allow traffic out I've got to\nallow the replies to come back in.\n\n190\n00:09:30.220 --> 00:09:33.230\nNow I could just go to my outbound rules\nand say all traffic is allowed to go,\n\n191\n00:09:33.230 --> 00:09:34.580\nwhich is what you see here.\n\n192\n00:09:34.580 --> 00:09:37.400\nSee rule 100, all traffic is allowed out.\n\n193\n00:09:38.860 --> 00:09:41.390\nAnd then after that all traffic is denied,\nbut\n\n194\n00:09:41.390 --> 00:09:44.500\nthat doesn't matter because everything\nis gonna match that first rule.\n\n195\n00:09:44.500 --> 00:09:46.440\nThat's another difference that we have.\n\n196\n00:09:46.440 --> 00:09:49.526\nNetwork ACLs are applied in\nthe order they're listed.\n\n197\n00:09:49.526 --> 00:09:51.687\nThey're applied from the top down.\n\n198\n00:09:51.687 --> 00:09:53.470\nSo it starts with this first line.\n\n199\n00:09:53.470 --> 00:09:55.350\nThis says all traffic is allowed.\n\n200\n00:09:55.350 --> 00:09:59.270\nSo everything is allowed,\nnothing ever gets down to that deny.\n\n201\n00:09:59.270 --> 00:10:00.370\nThat's it.\nThat's this list.\n\n202\n00:10:01.640 --> 00:10:03.380\nSecurity groups are not like that.\n\n203\n00:10:03.380 --> 00:10:07.070\nWhen I go back to my security group,\nand I look at the inbound rules, or\n\n204\n00:10:07.070 --> 00:10:08.870\noutbound rules on of\nthese security groups.\n\n205\n00:10:08.870 --> 00:10:11.920\nLet me see if I have one that\nmaybe has some better stuff in it.\n\n206\n00:10:11.920 --> 00:10:13.140\nYeah, these are all pretty sparse.\n\n207\n00:10:13.140 --> 00:10:14.190\nThis one.\n\n208\n00:10:14.190 --> 00:10:17.290\nIf I look at all the rules that are in\nhere, even if I edit those rules, and\n\n209\n00:10:17.290 --> 00:10:23.040\nI pull this up, I see the protocols\nthat are being allowed,\n\n210\n00:10:23.040 --> 00:10:25.810\nI see that information right here.\n\n211\n00:10:25.810 --> 00:10:27.000\nI don't see a line number.\n\n212\n00:10:27.000 --> 00:10:30.025\nRemember a minute ago\nI saw rule number 100.\n\n213\n00:10:30.025 --> 00:10:31.760\nThese don't have a rule number.\n\n214\n00:10:31.760 --> 00:10:35.890\nAnd they don't have a allow or\ndeny either.\n\n215\n00:10:35.890 --> 00:10:39.470\nSecurity groups deny\neverything by default, and\n\n216\n00:10:39.470 --> 00:10:41.290\nthen you just tell it\nwhat you want to allow.\n\n217\n00:10:41.290 --> 00:10:44.000\nThere is no deny in a security group.\n\n218\n00:10:44.000 --> 00:10:45.300\nAnd there is no line number,\n\n219\n00:10:45.300 --> 00:10:50.990\nbecause since every one is an allow,\nthey can all be applied simultaneously.\n\n220\n00:10:50.990 --> 00:10:55.140\nSo, security groups don't follow an order,\nthe whole thing is applied,\n\n221\n00:10:55.140 --> 00:10:56.450\nall the allows.\n\n222\n00:10:56.450 --> 00:11:00.790\nAnd if you don't match any of the allows,\nthen you're denied by default.\n\n223\n00:11:00.790 --> 00:11:02.550\nNetwork ACLs are different.\n\n224\n00:11:02.550 --> 00:11:05.730\nWith a network ACL,\nthey are applied in order.\n\n225\n00:11:05.730 --> 00:11:09.600\nAnd because they're in order, I can do\nthings like setup denies like this.\n\n226\n00:11:09.600 --> 00:11:11.607\nLet me create a custom ACL.\n\n227\n00:11:11.607 --> 00:11:15.393\nI'll create one called Don's test,\nand I'll attach it to one of my VPCs.\n\n228\n00:11:15.393 --> 00:11:16.890\nLet me just whip that up real quick.\n\n229\n00:11:16.890 --> 00:11:18.870\nAnd let's say we have a scenario.\n\n230\n00:11:18.870 --> 00:11:22.830\nI've got a couple of web servers and\na database server.\n\n231\n00:11:22.830 --> 00:11:24.160\nAnd they're stuck inside of this VPC.\n\n232\n00:11:24.160 --> 00:11:27.160\nThe web server talk to the database\nserver and that's that.\n\n233\n00:11:27.160 --> 00:11:31.640\nWell, I want the web servers to be able\nto communicate out to the Internet,\n\n234\n00:11:31.640 --> 00:11:34.220\nand basically send webpages to people.\n\n235\n00:11:34.220 --> 00:11:35.940\nBut I don't want the database\nserver to do that.\n\n236\n00:11:35.940 --> 00:11:39.840\nI want the database servers to be able to\ntalk to the web servers and that's it.\n\n237\n00:11:39.840 --> 00:11:41.410\nWell, I can come through it and\n\n238\n00:11:41.410 --> 00:11:44.420\nI can create a network ACL\nthat enforces that behavior.\n\n239\n00:11:44.420 --> 00:11:48.930\nThe reason I would do an ACL here is,\nas I add new instances in the further,\n\n240\n00:11:48.930 --> 00:11:50.920\nremember that I add more web servers.\n\n241\n00:11:50.920 --> 00:11:56.000\nI might remember to put them\ninto a security group but I\n\n242\n00:11:56.000 --> 00:11:59.290\nmight put them in their own security, they\nmight have different permissions and now I\n\n243\n00:11:59.290 --> 00:12:02.730\nmight be leaking information and providing\naccess that I don't want to provide.\n\n244\n00:12:02.730 --> 00:12:05.590\nWhen I create a network ACL,\nit's attached to the subnet.\n\n245\n00:12:05.590 --> 00:12:10.410\nSo any system that put in that subnet\nwill have this network ACL applied to it,\n\n246\n00:12:10.410 --> 00:12:11.900\nregardless of what\nsecurity group they're in.\n\n247\n00:12:11.900 --> 00:12:14.280\nSo you can totally screw\nup the security group and\n\n248\n00:12:14.280 --> 00:12:16.800\nthe network ACL is there to get your back.\n\n249\n00:12:16.800 --> 00:12:19.395\nNow you might ask yourself, well why even\nbother with the security group then,\n\n250\n00:12:19.395 --> 00:12:20.491\nwhy not just use the network ACL?\n\n251\n00:12:20.491 --> 00:12:22.295\nAnd the problem is that it's not stateful,\n\n252\n00:12:22.295 --> 00:12:24.960\nwhich means that they're\nharder to maintain.\n\n253\n00:12:24.960 --> 00:12:27.790\nSo, security groups\nare easier to maintain, but\n\n254\n00:12:27.790 --> 00:12:29.600\nthat means they're easier to screw up.\n\n255\n00:12:29.600 --> 00:12:33.560\nNetwork ACLs are easier to enforce,\nbut far more difficult to configure.\n\n256\n00:12:33.560 --> 00:12:36.790\nSo either way, let me jump in here and\nwe'll start to get this set up.\n\n257\n00:12:36.790 --> 00:12:39.210\nSo if I come in here and\ntake my outbound rules,\n\n258\n00:12:39.210 --> 00:12:42.120\nI want to allow my web servers to\nbe able to get out to the Internet.\n\n259\n00:12:42.120 --> 00:12:43.530\nBut I'm auto scaling.\n\n260\n00:12:43.530 --> 00:12:46.500\nI'm spinning them up and shutting them\ndown, I don't know what their IPs are.\n\n261\n00:12:46.500 --> 00:12:51.260\nSo, when I come through and define this,\nI might need to specify that\n\n262\n00:12:51.260 --> 00:12:54.100\nthey're all allowed to communicate\nout on a certain range, or\n\n263\n00:12:54.100 --> 00:12:57.680\nthe replies back in\nare allowed to come in.\n\n264\n00:12:57.680 --> 00:13:02.330\nNow on the outbound rules, notice when\nI set an outbound rule, I can specify\n\n265\n00:13:02.330 --> 00:13:06.610\nthe type of Traffic, the Protocol,\nthe Port Range, and the Destination.\n\n266\n00:13:06.610 --> 00:13:11.530\nI can't specify the source, I can't say\nI wanna let the web servers go out, but\n\n267\n00:13:11.530 --> 00:13:13.420\nnot the database server to go out.\n\n268\n00:13:13.420 --> 00:13:15.830\nI can't do that,\nit's only based on a destination.\n\n269\n00:13:15.830 --> 00:13:19.700\nSo if this were connecting\nto people on the Internet,\n\n270\n00:13:19.700 --> 00:13:24.220\nI would have to allow everything\nto come through, or to go out.\n\n271\n00:13:24.220 --> 00:13:27.230\nOr if I was just trying to give people\naccess to Microsoft's update server,\n\n272\n00:13:27.230 --> 00:13:29.000\nI would need to specify\nMicrosoft's update port.\n\n273\n00:13:29.000 --> 00:13:32.055\nSo I could come in here and I could do\nthat, I could add a rule and I could set\n\n274\n00:13:32.055 --> 00:13:36.715\nthat custom rule for TCP or whatever\nprotocol they use, I don't actually know.\n\n275\n00:13:36.715 --> 00:13:41.275\nWhatever the port range happens to be in\nthe destination IP, which is not all Qs.\n\n276\n00:13:41.275 --> 00:13:44.705\nWe'll say as 1.1.1.1 and I can add that.\n\n277\n00:13:44.705 --> 00:13:45.985\nNow, that's an allow rule.\n\n278\n00:13:45.985 --> 00:13:48.225\nThat's going to allow\neverybody in this VPC,\n\n279\n00:13:48.225 --> 00:13:52.315\nunless their security group will actually,\njust gonna allow everybody to be able\n\n280\n00:13:52.315 --> 00:13:57.470\nto communicate out to\n1.1.1.1 to that destination.\n\n281\n00:13:57.470 --> 00:14:00.410\nAnd then I can continue to\nadd more rules and so on.\n\n282\n00:14:00.410 --> 00:14:03.490\nAnd it's expecting me to\nprovide cyter notation,\n\n283\n00:14:03.490 --> 00:14:07.630\nso it actually needs to be a/32,\nthere we go.\n\n284\n00:14:07.630 --> 00:14:10.179\nA single host would be a /32 so\nI just have to correct that.\n\n285\n00:14:10.179 --> 00:14:11.620\nSo then we could specify more.\n\n286\n00:14:11.620 --> 00:14:13.650\nAnd the order of these is going to matter,\n\n287\n00:14:13.650 --> 00:14:17.860\nbecause if I need to block access to\nsomething, maybe inside of that network,\n\n288\n00:14:17.860 --> 00:14:20.720\nso I did well let's go\na little bigger here.\n\n289\n00:14:20.720 --> 00:14:22.058\nMy head's kind of\ncovering some of this up.\n\n290\n00:14:22.058 --> 00:14:26.205\nSo maybe I'm providing\naccess to another VPC, and\n\n291\n00:14:26.205 --> 00:14:29.974\nthat VPC is 192.168.0.0/24.\n\n292\n00:14:29.974 --> 00:14:32.280\nSo I wanna allow access\nto resources over there.\n\n293\n00:14:32.280 --> 00:14:36.586\nBut I don't want the whole VPC,\nI just want some parts of it.\n\n294\n00:14:36.586 --> 00:14:39.191\nSo I might need to add a few\nmore rules in here, and\n\n295\n00:14:39.191 --> 00:14:42.063\nchange the order to really\nget the impact that I want.\n\n296\n00:14:42.063 --> 00:14:48.954\nFor example, I might want to\ngive access to 192.168.0.100 and\n\n297\n00:14:48.954 --> 00:14:53.943\n192.168.0.101, but not the rest of it.\n\n298\n00:14:53.943 --> 00:14:59.362\nSo I might deny the /24 and\nthen allow the /32s,\n\n299\n00:14:59.362 --> 00:15:04.390\nbut this is all applied\nin order from top down.\n\n300\n00:15:04.390 --> 00:15:07.550\nSo they're gonna hit the deny rule\nfirst and everything gets blocked, and\n\n301\n00:15:07.550 --> 00:15:09.260\nthey never get into the bottom two.\n\n302\n00:15:09.260 --> 00:15:10.710\nSo, we can come in here and\n\n303\n00:15:10.710 --> 00:15:16.360\nset rule numbers, to make sure that this\nis applied in the order that we want.\n\n304\n00:15:16.360 --> 00:15:21.580\nAnd by doing that, we will make sure\nthat it applies in the correct order.\n\n305\n00:15:21.580 --> 00:15:25.420\nI am making sure that deny occurs\ntowards the end of my list.\n\n306\n00:15:25.420 --> 00:15:27.471\nNow I'm skipping by ten each time.\n\n307\n00:15:27.471 --> 00:15:30.199\nAnd the reason I'm doing that is in\nthe future I might want to add some more\n\n308\n00:15:30.199 --> 00:15:32.770\nrules, and I might need it to go in\nbetween some the existing rules.\n\n309\n00:15:32.770 --> 00:15:35.430\nLeaving these little gaps\ngives you that extra room.\n\n310\n00:15:35.430 --> 00:15:36.800\nSo that you can do that.\n\n311\n00:15:36.800 --> 00:15:39.850\nAnd when I save that its gonna\nput it in the right order, and\n\n312\n00:15:39.850 --> 00:15:43.430\nnow when I look at it I've got my allows\nup here at the top and this is deny now.\n\n313\n00:15:43.430 --> 00:15:45.220\nI do have have two denies in a row so\n\n314\n00:15:45.220 --> 00:15:47.970\nthat, this deny is really\nnot all that useful.\n\n315\n00:15:49.190 --> 00:15:54.840\nUnless I had some other things\nafter it that might open that up,\n\n316\n00:15:54.840 --> 00:15:57.410\nbusiness is denied right after,\nit's not all that terribly useful.\n\n317\n00:15:57.410 --> 00:15:59.558\nBut I can do the same thing on my\ninbound rules, and I can go through and\n\n318\n00:15:59.558 --> 00:16:00.196\nI can define those.\n\n319\n00:16:00.196 --> 00:16:03.627\nJust remember the allow of the die,\nit's all applied from top down,\n\n320\n00:16:03.627 --> 00:16:06.066\nso we've got to make sure\nthat order is correct.\n\n321\n00:16:06.066 --> 00:16:09.562\nTypically we don't mess around with\nnetwork ACLs all that much, right.\n\n322\n00:16:09.562 --> 00:16:12.890\nWe come in and\nwe set them as like a safeguard to say for\n\n323\n00:16:12.890 --> 00:16:15.050\nexample management access.\n\n324\n00:16:15.050 --> 00:16:20.035\nIf I have SSH or RDP configured I might\ncreate an NACL that restricts that RDP or\n\n325\n00:16:20.035 --> 00:16:20.878\nSSH access so\n\n326\n00:16:20.878 --> 00:16:26.189\nthat I don't have to worry about somebody\naccidentally opening up that too wide.\n\n327\n00:16:26.189 --> 00:16:28.990\nRight, cuz when I spin up an instance,\nwhat's the default?\n\n328\n00:16:28.990 --> 00:16:33.680\nSSH granted access to the Internet or RDP\naccess to the Internet, the whole world.\n\n329\n00:16:33.680 --> 00:16:37.410\nI might use an NACL to restrict that, but\nI still wanna use a security group to\n\n330\n00:16:37.410 --> 00:16:40.910\nrestrict it too, and this would be\nlike a backup in that scenario.\n\n331\n00:16:40.910 --> 00:16:43.141\nBut for most people,\nmost people never use the NACLs.\n\n332\n00:16:43.141 --> 00:16:45.630\nThey just properly configure the security\ngroups and don't screw them up.\n\n333\n00:16:45.630 --> 00:16:48.010\nIf you don't screw it up then you're fine.\n\n334\n00:16:48.010 --> 00:16:50.010\n&gt;&gt; Now, the security groups and the NACLs.\n\n335\n00:16:50.010 --> 00:16:51.250\nThey seem to be very robust.\n\n336\n00:16:51.250 --> 00:16:56.430\nThey seem to give you a good solution for\nadding security to our VPCs.\n\n337\n00:16:56.430 --> 00:16:59.320\nBut typically, I see a lot of people,\nand they just use NATs, right?\n\n338\n00:16:59.320 --> 00:17:00.104\nBecause they say.\n\n339\n00:17:00.104 --> 00:17:02.048\n&gt;&gt; [LAUGH]\n&gt;&gt; NAT hides the inside host.\n\n340\n00:17:02.048 --> 00:17:04.149\nSo what's the purpose of\nadding all these ACLs?\n\n341\n00:17:04.149 --> 00:17:06.610\n&gt;&gt; Well, if you have a true VPC.\n\n342\n00:17:06.610 --> 00:17:08.860\nIf it's private, and\nyou've got all private IPs.\n\n343\n00:17:08.860 --> 00:17:10.680\nAnd you're using an Internet gateway,\nright?\n\n344\n00:17:10.680 --> 00:17:12.550\nThe Internet gateway can perform NAT.\n\n345\n00:17:12.550 --> 00:17:16.240\nAnd you can translate all of your private\nIPs into one public IP on the web,\n\n346\n00:17:16.240 --> 00:17:17.900\nthey'll share that IP.\n\n347\n00:17:17.900 --> 00:17:20.160\nSo, any traffic coming in,\nif it was an attacker,\n\n348\n00:17:20.160 --> 00:17:24.010\nthey would hit that one public IP and they\nwouldn't know where to go behind it, and\n\n349\n00:17:24.010 --> 00:17:27.460\nso it hides the internal hosts, right?\n\n350\n00:17:27.460 --> 00:17:31.490\nWell, NAT provides convenience,\nnot security.\n\n351\n00:17:31.490 --> 00:17:33.060\nThere are ways to spoof and\n\n352\n00:17:33.060 --> 00:17:36.790\nmanipulate a NAT table to get\naccess to an internal host.\n\n353\n00:17:36.790 --> 00:17:39.890\nNAT will not stop a port\nfrom passing through,\n\n354\n00:17:39.890 --> 00:17:41.585\nit just needs to know where to send it.\n\n355\n00:17:41.585 --> 00:17:44.220\nThey may not know where to send it,\nbut there's ways to manipulate that.\n\n356\n00:17:44.220 --> 00:17:47.200\nSo NAT is not enough from\na security standpoint.\n\n357\n00:17:47.200 --> 00:17:49.990\nIf you're just trying for convenience,\nif you're just trying to get your host\n\n358\n00:17:49.990 --> 00:17:52.550\nup and let them talk on the Internet, and\nyou know you're gonna be managing software\n\n359\n00:17:52.550 --> 00:17:55.470\nfirewalls on all of them maybe\nthat's a good route for you.\n\n360\n00:17:55.470 --> 00:17:58.480\nBut typically, it's not gonna be enough\nand so you're gonna want to deploy\n\n361\n00:17:58.480 --> 00:18:03.140\nsecurity groups and NACLs or at least\nsecurity groups to protect your systems.\n\n362\n00:18:03.140 --> 00:18:05.770\nAnd those software firewalls,\nyou can still use them, too.\n\n363\n00:18:05.770 --> 00:18:08.920\nNow when you spin up a Windows instance or\na Linux instance,\n\n364\n00:18:08.920 --> 00:18:11.990\nmost of the AMIs have those\nsoftware firewalls disabled.\n\n365\n00:18:11.990 --> 00:18:13.807\nBecause you can use\nthe security group instead, but\n\n366\n00:18:13.807 --> 00:18:15.342\nthere's no reason you couldn't use both.\n\n367\n00:18:15.342 --> 00:18:19.921\nYou do have to be careful because you\ncould lock yourself out a machine if you\n\n368\n00:18:19.921 --> 00:18:23.400\nyou don't take the right precautions\n&gt;&gt; That that would be bad,\n\n369\n00:18:23.400 --> 00:18:26.910\nyeah we don't do that\n&gt;&gt; With the security group if you block\n\n370\n00:18:26.910 --> 00:18:30.762\nyourself you just log into the website or\nthe the command line and\n\n371\n00:18:30.762 --> 00:18:35.111\nyou adjust the rules and fix it, but\nif you lock yourself out of a software\n\n372\n00:18:35.111 --> 00:18:38.418\nfirewall in a guest OS,\nyou can't get to the console.\n\n373\n00:18:38.418 --> 00:18:40.890\nThere's no way to get around it,\nand now you're locked out.\n\n374\n00:18:40.890 --> 00:18:42.730\nAnd you're just out of luck, right?\n\n375\n00:18:42.730 --> 00:18:46.610\nIf I disable RDP on that Windows instance\nand I haven't enabled anything else to\n\n376\n00:18:46.610 --> 00:18:50.100\nconnect, if I just disable SSH,\nI've got no way to connect.\n\n377\n00:18:50.100 --> 00:18:52.490\nI've gotta roll back to\na snapshot if I have one.\n\n378\n00:18:52.490 --> 00:18:54.174\nOr deploy a new AMI, right?\n\n379\n00:18:54.174 --> 00:18:55.830\nI mean, deploy a new instance.\n\n380\n00:18:55.830 --> 00:18:58.110\nIt's, it's tough,\nyou could lock yourself out.\n\n381\n00:18:58.110 --> 00:19:00.600\nThat's where it's nice to\nuse security groups and\n\n382\n00:19:00.600 --> 00:19:03.100\nNACLs instead,\nyou can't really lock yourself out.\n\n383\n00:19:05.100 --> 00:19:06.828\nAll right,\nthe last thing that I wanna talk about.\n\n384\n00:19:06.828 --> 00:19:11.124\nI guess I do need to mention\none other thing with NAT.\n\n385\n00:19:11.124 --> 00:19:16.699\nBack in the olden days, in the early\ndays of AWS, EC2 didn't support NAT.\n\n386\n00:19:16.699 --> 00:19:19.390\nYou just didn't have it,\nwe didn't have EPCs back then either.\n\n387\n00:19:19.390 --> 00:19:24.204\nAnd so if you wanna do NAT, you actually\nhave the spin up an instance and\n\n388\n00:19:24.204 --> 00:19:26.760\nthat instance could then two E&amp;Is.\n\n389\n00:19:26.760 --> 00:19:29.600\nYou could, when you have an elastic\nnetwork interface, you can give\n\n390\n00:19:29.600 --> 00:19:32.580\nmore than one network interface to a host,\nand you do that to multi-home them.\n\n391\n00:19:32.580 --> 00:19:37.180\nSo, I can have a NAT instance, an instance\nin EC2 that had two network adapters,\n\n392\n00:19:37.180 --> 00:19:40.290\none on the VPC, and one that had\naccess the the Internet, right?\n\n393\n00:19:40.290 --> 00:19:42.980\nOr, back then, you really just needed one\nadapter because you were kind of bouncing\n\n394\n00:19:42.980 --> 00:19:45.700\nthrough the same one, but it could do NAT.\n\n395\n00:19:45.700 --> 00:19:46.510\nBut it was an instance.\n\n396\n00:19:46.510 --> 00:19:49.360\nYou paid for it, you had to manage it,\nyou had to make it highly available and\n\n397\n00:19:49.360 --> 00:19:49.870\nredundant.\n\n398\n00:19:49.870 --> 00:19:53.320\nIt was kind of a pain,\nit was actually really a pain.\n\n399\n00:19:53.320 --> 00:19:58.590\nBut with VPCs, we now have the ability\nto NAT as a service on the VPC.\n\n400\n00:19:58.590 --> 00:20:01.090\nAnd it is still an instance on\nthe backend, but we don't see it.\n\n401\n00:20:01.090 --> 00:20:04.730\nIt's completely managed by AWS,\nit's highly available.\n\n402\n00:20:04.730 --> 00:20:08.350\nIt scales out horizontally, automatically,\nso it reacts to workload, and\n\n403\n00:20:08.350 --> 00:20:10.440\nwe don't have to worry about\nit like a normal instance.\n\n404\n00:20:10.440 --> 00:20:15.010\nSo that's the newer model for doing NAT,\nand it's called a NAT Gateway.\n\n405\n00:20:15.010 --> 00:20:16.170\nSo when you go to set up your VPC,\n\n406\n00:20:16.170 --> 00:20:20.300\nyou'll see that option over here on\nthe left where I can create NAT Gateways.\n\n407\n00:20:20.300 --> 00:20:23.470\nNow, if I'm assigning public\nIPs to all of my hosts,\n\n408\n00:20:23.470 --> 00:20:25.830\nall my then I don't need a NAT Gateway.\n\n409\n00:20:25.830 --> 00:20:28.380\nCuz they're all being\nNATed to that public IP.\n\n410\n00:20:28.380 --> 00:20:33.080\nBut if all of my hosts have a private\nIP and I just want them to get Internet\n\n411\n00:20:33.080 --> 00:20:36.310\naccess for updates and things like that,\nthen I'll need a NAT gateway.\n\n412\n00:20:36.310 --> 00:20:38.420\nAnd that really is gonna\nspin up that instance,\n\n413\n00:20:38.420 --> 00:20:41.270\nthat is, it's still single\nhoned if I remember right.\n\n414\n00:20:41.270 --> 00:20:44.600\nBut it's able to basically translate\nfrom the private IP to the public IP and\n\n415\n00:20:44.600 --> 00:20:47.800\nsend it out of VPC for access,\nyou can still do that.\n\n416\n00:20:47.800 --> 00:20:51.831\nIt's not security though, it's really just\nconvenient right you still need to use\n\n417\n00:20:51.831 --> 00:20:54.295\nsecurity groups to protect your instances.\n\n418\n00:20:54.295 --> 00:20:59.470\n&gt;&gt; Now Don, if I do want to have\na truly private VPC is there a way,\n\n419\n00:20:59.470 --> 00:21:02.780\nI know this is kind of seems like it's\ncounter intuitive, but is there a way for\n\n420\n00:21:02.780 --> 00:21:07.540\nme to connect from an insecure\nplace to a secure VPC?\n\n421\n00:21:07.540 --> 00:21:11.910\n&gt;&gt; All right,\nthe truest form of a Virtual Private Cloud\n\n422\n00:21:11.910 --> 00:21:14.210\nis a VPC that doesn't\nhave Internet access.\n\n423\n00:21:14.210 --> 00:21:15.350\nSo, we've already seen that.\n\n424\n00:21:15.350 --> 00:21:17.800\nYou deploy a VPC,\nit's got no Internet access.\n\n425\n00:21:17.800 --> 00:21:20.634\nBut, if it's in the cloud,\nif it's at Amazon's data center, and\n\n426\n00:21:20.634 --> 00:21:22.546\nit has no Internet access,\nhow do I get to it?\n\n427\n00:21:22.546 --> 00:21:24.960\nIt's useless, right?\n\n428\n00:21:24.960 --> 00:21:30.710\nWell, in a hybrid cloud model where you\nhave an on-premises data center and you're\n\n429\n00:21:30.710 --> 00:21:34.390\nstarting to deploy servers in the cloud,\nthose servers might need to be private.\n\n430\n00:21:34.390 --> 00:21:36.300\nThey're just available for\nyou to access and\n\n431\n00:21:36.300 --> 00:21:40.250\nyou want your data center to basically\ntreat the VPC as a remote data center.\n\n432\n00:21:40.250 --> 00:21:46.158\nWell, you can do that by establishing\na VPN tunnel between your new private VPC,\n\n433\n00:21:46.158 --> 00:21:49.010\nand your on-premises systems.\n\n434\n00:21:49.010 --> 00:21:51.740\nYou do that by adding two things, okay.\n\n435\n00:21:51.740 --> 00:21:53.293\nThe first thing is a VPN gateway, and\n\n436\n00:21:53.293 --> 00:21:56.390\nI've got a little diagram\nthat kind of shows it here.\n\n437\n00:21:56.390 --> 00:21:59.730\nWhen you create a VPC, right,\nyou get your VPC subnets,\n\n438\n00:21:59.730 --> 00:22:03.420\nthey're all tied to availability\nzones that are inside of a VPC.\n\n439\n00:22:03.420 --> 00:22:05.666\nThe VPC has a router so\nit can communicate.\n\n440\n00:22:05.666 --> 00:22:09.930\nAnd then you can attach a virtual private\ngateway, it was another option just like\n\n441\n00:22:09.930 --> 00:22:11.920\nthe NAT gateway,\nwe can add a virtual private gateway.\n\n442\n00:22:11.920 --> 00:22:13.900\nSo the VPG sits in the cloud,\n\n443\n00:22:14.910 --> 00:22:21.290\nthen on-premises you deploy a CGW,\na customer gateway.\n\n444\n00:22:21.290 --> 00:22:25.120\nAnd the customer gateway, it can be\nsoftware but normally it's hardware.\n\n445\n00:22:25.120 --> 00:22:28.670\nNormally it's a firewall or\nsome other kind of appliance like that,\n\n446\n00:22:28.670 --> 00:22:32.880\nthat acts as the terminating end of a VPN\ntunnel so that you can build a VPN tunnel\n\n447\n00:22:32.880 --> 00:22:37.610\nbetween the virtual private gateway,\nand your on-premises gateway.\n\n448\n00:22:37.610 --> 00:22:41.080\nAnd that's gonna connect\nyour on-premises data center\n\n449\n00:22:41.080 --> 00:22:42.820\nwith the virtual private cloud.\n\n450\n00:22:42.820 --> 00:22:46.160\nAnd now your on-premises equipment can\ntalk to the cloud as if it was just\n\n451\n00:22:46.160 --> 00:22:47.790\nanother data center right there.\n\n452\n00:22:47.790 --> 00:22:49.050\nAnd we communicate, and\n\n453\n00:22:49.050 --> 00:22:52.690\nwe establish that information without\nproviding access to the Internet.\n\n454\n00:22:52.690 --> 00:22:56.530\nWithout that exposure to all\nthe attackers, and things like that,\n\n455\n00:22:56.530 --> 00:22:57.940\nthat are out there in the host.\n\n456\n00:22:57.940 --> 00:23:02.050\nThis is a great way, if you're wanting\nto leverage instances in EC2, but\n\n457\n00:23:02.050 --> 00:23:05.230\nyou're not ready to make the jump\nin exposing it to the public.\n\n458\n00:23:05.230 --> 00:23:07.850\nSo you keep it private and\nyou build that up.\n\n459\n00:23:07.850 --> 00:23:11.740\nNow, this VPN tunnel, is not the easiest\nthing in the world to build.\n\n460\n00:23:11.740 --> 00:23:14.155\nIf you're doing software,\nit's actually not that bad, but\n\n461\n00:23:14.155 --> 00:23:17.313\nif you're doing a hardware appliance,\nthere's a little wizard you can run that\n\n462\n00:23:17.313 --> 00:23:20.436\ngives you default configurations for\nthings like CISCO ASAs and Juniper SSGs.\n\n463\n00:23:20.436 --> 00:23:23.980\nIt can split out configurations for those,\nyou can throw it in when you're done.\n\n464\n00:23:23.980 --> 00:23:28.263\nBut the trick is, whether it's dynamic or\nstatic, if it's a dynamic,\n\n465\n00:23:28.263 --> 00:23:29.818\naddressable VPN tunnel.\n\n466\n00:23:29.818 --> 00:23:32.686\nIn other words, whenever I add\na new subnet of my local network,\n\n467\n00:23:32.686 --> 00:23:34.980\nthe remote network\nautomatically knows about it.\n\n468\n00:23:34.980 --> 00:23:39.000\nOr if I add a new subnet in the VPC,\nmy local network knows about it.\n\n469\n00:23:39.000 --> 00:23:40.980\nHaving dynamic routing\nlike that's really handy.\n\n470\n00:23:40.980 --> 00:23:43.570\nWell, the way Amazon\ndoes that is with BGP.\n\n471\n00:23:43.570 --> 00:23:48.530\nBGP is the border gateway protocol and\nBGP is not a user friendly protocol,\n\n472\n00:23:48.530 --> 00:23:49.630\nit is hard.\n\n473\n00:23:49.630 --> 00:23:52.936\nAnd that's why they have a wizard\nthat kind of generates the config,\n\n474\n00:23:52.936 --> 00:23:54.476\nif you have a supported device.\n\n475\n00:23:54.476 --> 00:23:58.770\nSo the recommendation is if you're gonna\ngo with this model where you set up a VPN\n\n476\n00:23:58.770 --> 00:24:01.590\ntunnel between your on\npremises location and a VPC,\n\n477\n00:24:01.590 --> 00:24:05.647\nthat you use a supported appliance that\nyou can just generate that config.\n\n478\n00:24:05.647 --> 00:24:06.638\nBut, you can do it on your own.\n\n479\n00:24:06.638 --> 00:24:10.998\nBTP is an open, standard, darn near\nevery router that costs more than,\n\n480\n00:24:10.998 --> 00:24:14.227\nI don't know, $1,000, is gonna support it.\n\n481\n00:24:14.227 --> 00:24:16.658\nThose little home jobies,\nthey don't do BTP.\n\n482\n00:24:16.658 --> 00:24:18.400\nBut you can support it.\n\n483\n00:24:18.400 --> 00:24:19.112\nYou can get connected up.\n\n484\n00:24:19.112 --> 00:24:20.110\nBuild a tunnel.\n\n485\n00:24:20.110 --> 00:24:24.640\nDo dynamic routing across it, and you'll\nbe up and going, communicating in no time.\n\n486\n00:24:24.640 --> 00:24:25.965\nAnd it becomes transparent\non your network.\n\n487\n00:24:25.965 --> 00:24:29.505\nYou don't even see it, you just hey,\nlook, I can talk to this VPC, there we go.\n\n488\n00:24:29.505 --> 00:24:33.050\nYou still have security groups,\nyou still have network ACLs, right?\n\n489\n00:24:33.050 --> 00:24:36.887\nBut you can now communicate, and you have\nthe ability to open that communication up,\n\n490\n00:24:36.887 --> 00:24:37.428\nall right?\n\n491\n00:24:37.428 --> 00:24:40.540\nA few other things to remember when\nyou set up communications like these.\n\n492\n00:24:41.770 --> 00:24:45.830\nWhen we build these,\na many to one model is actually supported.\n\n493\n00:24:45.830 --> 00:24:49.650\nSo, think about, for example,\nlet's say I work for a bank, and\n\n494\n00:24:49.650 --> 00:24:53.050\nI've got 100 branch offices,\nand one headquarters.\n\n495\n00:24:53.050 --> 00:24:54.850\nAnd the headquarters is\nconnected to that VPC.\n\n496\n00:24:55.930 --> 00:24:58.710\nDo I want the 100 branches to all\ncome to me at the headquarters?\n\n497\n00:24:58.710 --> 00:25:00.312\nAnd then I send them up to Amazon?\n\n498\n00:25:00.312 --> 00:25:02.402\nWouldn't it be nice if they had\njust went straight up to Amazon?\n\n499\n00:25:02.402 --> 00:25:03.760\nThey got an Internet connection.\n\n500\n00:25:03.760 --> 00:25:06.830\nAmazon's peered all over the place for\nactivity, so\n\n501\n00:25:06.830 --> 00:25:09.230\nit would be better if\nthey went straight there.\n\n502\n00:25:09.230 --> 00:25:10.342\nAnd you can do that so\n\n503\n00:25:10.342 --> 00:25:14.613\nat every location I can have a firewall\nthat automatically built up a tunnel.\n\n504\n00:25:14.613 --> 00:25:18.496\nAnd maybe use BGP also to do the dynamic\nrouting right to the VPC and\n\n505\n00:25:18.496 --> 00:25:22.830\nthey connect even if headquarters\nwere to completely go away.\n\n506\n00:25:22.830 --> 00:25:27.294\nThat's a great way to leverage a VPC as\na disaster recovery center we can have\n\n507\n00:25:27.294 --> 00:25:30.800\nthe VPC set up as DR and\nfail over to it at a moment's notice.\n\n508\n00:25:30.800 --> 00:25:33.350\nIf all those tunnels are up and\ngoing, and none of it's physical,\n\n509\n00:25:33.350 --> 00:25:37.010\nit's all a virtual connections via\nfirewalls that we likely already have.\n\n510\n00:25:37.010 --> 00:25:41.647\nThat's a great solution and a great way to\nget started in the cloud without having to\n\n511\n00:25:41.647 --> 00:25:43.844\nmove our production systems up there.\n\n512\n00:25:43.844 --> 00:25:46.509\nAll right, a couple of other\nthings when you set up this model,\n\n513\n00:25:46.509 --> 00:25:47.928\nit actually sets up two tunnels.\n\n514\n00:25:47.928 --> 00:25:50.882\nIt aways does two tunnels for redundancy\nbecause you don't want to have just one\n\n515\n00:25:50.882 --> 00:25:53.749\nendpoint at Amazon, it always gives you\ntwo endpoints that way if one fails,\n\n516\n00:25:53.749 --> 00:25:55.105\nyou jump over to another one.\n\n517\n00:25:55.105 --> 00:25:57.650\nYou've got multiple availability\nzones that are involved.\n\n518\n00:25:57.650 --> 00:26:01.804\nAnytime we use a service that's managed\nby Amazon like the NAT Gateway and so on,\n\n519\n00:26:01.804 --> 00:26:03.406\nthey take care of managing it.\n\n520\n00:26:03.406 --> 00:26:05.402\nSo they provide that\nreally high availability.\n\n521\n00:26:05.402 --> 00:26:07.270\nIf we do it ourselves,\nwe've got to provide all that.\n\n522\n00:26:07.270 --> 00:26:08.310\nIt's tough.\n\n523\n00:26:08.310 --> 00:26:11.465\nWell, a lot of times you just forget\nto do it until there's a failure and\n\n524\n00:26:11.465 --> 00:26:12.424\nthen it's too late.\n\n525\n00:26:12.424 --> 00:26:17.120\nSo that's another aspect of the VPN\nstore memorize, hard to remember.\n\n526\n00:26:17.120 --> 00:26:18.910\nThe other thing is I\ntalked a lot about BGP,\n\n527\n00:26:18.910 --> 00:26:20.580\ncuz that's the way I normally deploy it.\n\n528\n00:26:20.580 --> 00:26:21.667\nBut you can do it statically, too.\n\n529\n00:26:21.667 --> 00:26:24.172\nYou can do static routing is\nfar easier cuz you just say,\n\n530\n00:26:24.172 --> 00:26:26.140\nhere's the routes of my headquarters.\n\n531\n00:26:26.140 --> 00:26:29.502\nHere's the routes up in the VPC and\nthat's it, right?\n\n532\n00:26:29.502 --> 00:26:31.221\nAnd then you bring up the tunnel and\nit's done.\n\n533\n00:26:31.221 --> 00:26:32.640\nIt's a lot easier.\n\n534\n00:26:32.640 --> 00:26:36.459\nBut then every time you add new networks\non either side, you've got to go and\n\n535\n00:26:36.459 --> 00:26:37.361\nedit the tunnel.\n\n536\n00:26:37.361 --> 00:26:39.658\nAnd when you edit the tunnel,\nthe tunnel's got to restart.\n\n537\n00:26:39.658 --> 00:26:41.500\nAnd so you create a micro outage.\n\n538\n00:26:41.500 --> 00:26:44.370\nMaybe that's not a big deal for you,\nand then fine, that's the way to go.\n\n539\n00:26:44.370 --> 00:26:46.443\nBut if you're trying to\ndo this with no outages,\n\n540\n00:26:46.443 --> 00:26:48.781\nhaving dynamic routing is\nkind of an important thing.\n\n541\n00:26:48.781 --> 00:26:52.114\nVPN tunnels don't like it when\nthe networks change unless they're\n\n542\n00:26:52.114 --> 00:26:53.010\nexpecting it.\n\n543\n00:26:53.010 --> 00:26:54.741\nAnd that's what VGP takes care of.\n\n544\n00:26:54.741 --> 00:26:58.738\n&gt;&gt; All right, Don we have definitely\nwalked from soups to nuts through using\n\n545\n00:26:58.738 --> 00:27:01.962\nVPCs, covered security in this episode and\nthe prior one,\n\n546\n00:27:01.962 --> 00:27:05.785\nwhen we get started with all\nthe networking that's involved with it.\n\n547\n00:27:05.785 --> 00:27:09.280\nIs there anything else that we need to\ncover before we close out today's show?\n\n548\n00:27:09.280 --> 00:27:12.470\n&gt;&gt; Mostly just remembering there's\na heck of a lot of options in there and\n\n549\n00:27:12.470 --> 00:27:15.020\non the exam what they're\nexpecting you to know is\n\n550\n00:27:15.020 --> 00:27:18.230\nthe scenarios where you'd use one\ntechnology over another, right?\n\n551\n00:27:18.230 --> 00:27:21.999\nSo when would I use a network\nACL versus a security group?\n\n552\n00:27:21.999 --> 00:27:26.802\nWhen would I use a BGP connected\nVPN gateway versus a statically\n\n553\n00:27:26.802 --> 00:27:28.260\nrouted one right?\n\n554\n00:27:28.260 --> 00:27:29.920\nSo we need to just remember\nthe differences so\n\n555\n00:27:29.920 --> 00:27:32.570\nthat we can choose the right one for\nthe right scenario.\n\n556\n00:27:32.570 --> 00:27:35.539\nCuz if they're asking a question\nlike what's the best way to connect\n\n557\n00:27:35.539 --> 00:27:38.777\nnon-premises data center to a VPC,\nyou got more than one answer, right?\n\n558\n00:27:38.777 --> 00:27:42.195\nBut, there's gonna be one that's more\nright than the other based on the scenario\n\n559\n00:27:42.195 --> 00:27:43.346\nlaid out in that question.\n\n560\n00:27:43.346 --> 00:27:47.002\nSo just be aware of that comparison to\nmake sure you're choosing the best one for\n\n561\n00:27:47.002 --> 00:27:47.776\nyour customer.\n\n562\n00:27:47.776 --> 00:27:50.126\n&gt;&gt; All right, wise words from Don Pezet.\n\n563\n00:27:50.126 --> 00:27:52.370\nDon we do thank you for\nyour expertise on this topic and\n\n564\n00:27:52.370 --> 00:27:55.740\nhelping us build our\nknowledge based on VPCs.\n\n565\n00:27:55.740 --> 00:27:58.837\nThat being said, it looks like it's\ntime for us to sign off for ITPro.TV,\n\n566\n00:27:58.837 --> 00:28:00.377\nI have been your host Daniel Lowrie.\n\n567\n00:28:00.377 --> 00:28:01.311\n&gt;&gt; And I'm Don Pozet.\n\n568\n00:28:01.311 --> 00:28:03.138\n&gt;&gt; And we'll see you next time.\n\n569\n00:28:03.138 --> 00:28:09.228\n[MUSIC]\n\n570\n00:28:09.228 --> 00:28:12.410\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "208325121"
        }
      ],
      "title": "Amazon Virtual Private Cloud"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don discuss Elastic Load Balancing(ELB) and Auto Scaling. They begin by looking at ELB as a way to distribute traffic across multiple instances, going over ELB types, configuration, listeners, and more advanced configuration like connection draining, proxy protocol, sticky sessions, and health check. Finally they dive into Auto Scaling plans, limits, and groups.",
          "length": "1713",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-5-1-elb_and_auto_scaling-030617.00_35_55_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-5-1-elb_and_auto_scaling-030617.00_35_55_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-5-1-elb_and_auto_scaling-030617.00_35_55_11.Still001-sm.jpg",
          "title": "ELB and Auto Scaling",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:04.098\nWelcome to ITPRO.TV.\n\n2\n00:00:04.098 --> 00:00:08.542\n[CROSSTALK]\n\n3\n00:00:08.542 --> 00:00:12.510\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.510 --> 00:00:13.980\n&gt;&gt; All right, greetings everyone and\n\n5\n00:00:13.980 --> 00:00:16.120\nwelcome to another great\nepisode of ITPRO.TV.\n\n6\n00:00:16.120 --> 00:00:18.100\nI'm your host Daniel Lowrie.\n\n7\n00:00:18.100 --> 00:00:20.450\nIn today's episode we\nare back with more of our\n\n8\n00:00:20.450 --> 00:00:24.240\nAmazon Certified Solution Architect,\nAssociate series.\n\n9\n00:00:24.240 --> 00:00:25.630\nAnd, of course,\njoining us in the studio yet\n\n10\n00:00:25.630 --> 00:00:29.780\nagain to lend his expertise on that very\ntopic, our good friend, Mr. Don Pezet.\n\n11\n00:00:29.780 --> 00:00:30.690\nDon, welcome back, sir.\n\n12\n00:00:30.690 --> 00:00:31.520\nHow goes it today?\n\n13\n00:00:31.520 --> 00:00:34.990\n&gt;&gt; It goes great, Dan cuz we're about\nto cover one of my favorite topics.\n\n14\n00:00:34.990 --> 00:00:37.920\nWhen you go to the cloud there's a number\nof technologies you get exposed to.\n\n15\n00:00:37.920 --> 00:00:40.460\nAnd some of them I get excited about.\n\n16\n00:00:40.460 --> 00:00:41.151\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n17\n00:00:41.151 --> 00:00:42.571\n&gt;&gt; And auto-scaling is one of my favorites\n\n18\n00:00:42.571 --> 00:00:45.921\nbut in this episode we're gonna talk\nabout ELB, the elastic load balancers.\n\n19\n00:00:45.921 --> 00:00:46.961\nWe're gonna talk a little bit about\n\n20\n00:00:46.961 --> 00:00:50.201\ncloud watch and we're gonna talk about\nauto scaling which in my opinion\n\n21\n00:00:50.201 --> 00:00:53.281\nis the whole point in going to the cloud.\nThere's many other points but\n\n22\n00:00:53.281 --> 00:00:54.867\nit's my favorite so\nI'm excited, let's get to it.\n\n23\n00:00:54.867 --> 00:00:56.160\n&gt;&gt; Let's get to it.\n\n24\n00:00:56.160 --> 00:00:57.590\nSo we're talking ELB's and\n\n25\n00:00:57.590 --> 00:01:01.690\nwhat not, we've mentioned before\nabout the availability zones, right?\n\n26\n00:01:01.690 --> 00:01:04.590\nYou might have created\nmultiple availability zones.\n\n27\n00:01:04.590 --> 00:01:07.650\nThis is where we get into\nhow do we get our users to\n\n28\n00:01:07.650 --> 00:01:10.980\nget to the availability zone that\nwe want them to get to, correct?\n\n29\n00:01:10.980 --> 00:01:12.775\n&gt;&gt; Well, as you spin up instances-.\n\n30\n00:01:12.775 --> 00:01:14.170\n&gt;&gt; Yeah.\n&gt;&gt; Well,\n\n31\n00:01:14.170 --> 00:01:15.630\nlet's think if we just had one AZ, right?\n\n32\n00:01:15.630 --> 00:01:19.480\nSo if we have five instances,\nall in one availability zone,\n\n33\n00:01:20.580 --> 00:01:23.630\nI need my end users to be distributed\nacross those five instances.\n\n34\n00:01:23.630 --> 00:01:27.750\nIf it's five web front ends, I need to\nbalance people across that one challenge.\n\n35\n00:01:27.750 --> 00:01:28.310\n&gt;&gt; Yeah.\n\n36\n00:01:28.310 --> 00:01:31.130\n&gt;&gt; If I have multiple availability\nzones though maybe I have\n\n37\n00:01:31.130 --> 00:01:34.590\nfive web servers in one AZ,\nfive in another AZ and\n\n38\n00:01:34.590 --> 00:01:37.780\nnow I need my load balancer to\nspread people across all of them.\n\n39\n00:01:37.780 --> 00:01:38.980\nWell, how do I do that?\n\n40\n00:01:38.980 --> 00:01:41.270\nWe do exactly what I said and\nin a physical environment,\n\n41\n00:01:41.270 --> 00:01:43.170\nyou get a load balancer right?\n\n42\n00:01:43.170 --> 00:01:47.180\nI go and buy a F5, big IP or something\nlike that and we distribute traffic across\n\n43\n00:01:47.180 --> 00:01:51.510\nthose hosts but\nin the cloud I can I can scroll up Amazon.\n\n44\n00:01:51.510 --> 00:01:55.360\nAnd I'm gonna stick this plan up there and\nI can't have their plans on premises cuz\n\n45\n00:01:55.360 --> 00:01:58.740\nthat fit of purpose that people come\nto this one single point of failure and\n\n46\n00:01:58.740 --> 00:02:00.500\nthen I send then back\nout to the cloud again.\n\n47\n00:02:00.500 --> 00:02:04.430\nSo what I needed the solution\ninside of AWS does that for me and\n\n48\n00:02:04.430 --> 00:02:08.170\nthat solution is\nan Elastic Load Balancing ELB.\n\n49\n00:02:08.170 --> 00:02:11.750\nAnd the elastic load balancer is built\nright in to the EC2 service in AWS.\n\n50\n00:02:11.750 --> 00:02:15.420\nIt's super easy to get it up and\nconfigured and going and once it's up and\n\n51\n00:02:15.420 --> 00:02:18.710\ngoing our customers,\nour viewers, whatever,\n\n52\n00:02:18.710 --> 00:02:22.980\npeople who are coming to our website they\nare going to be balanced, distributed\n\n53\n00:02:22.980 --> 00:02:28.630\nacross the EC2 instances on backend\nWhether they're in one AZ or multiple AZs.\n\n54\n00:02:28.630 --> 00:02:32.680\nNow it is tied to a region, so\nmy load balancer resides in a region.\n\n55\n00:02:32.680 --> 00:02:36.270\nBut the load balancer\nitself is highly available,\n\n56\n00:02:36.270 --> 00:02:40.650\nit scales out and in automatically,\nit's all managed by AWS.\n\n57\n00:02:40.650 --> 00:02:44.280\nSo I just need to turn it on and\nset a couple of configuration options and\n\n58\n00:02:44.280 --> 00:02:45.470\nit's up and going, right?\n\n59\n00:02:45.470 --> 00:02:47.500\nGot a little diagram that\nkinda shows how it works.\n\n60\n00:02:47.500 --> 00:02:51.690\nWhen you spin up an ELB,\nan ELB is technically an instance,\n\n61\n00:02:51.690 --> 00:02:52.580\nit's an EC2 instance.\n\n62\n00:02:52.580 --> 00:02:55.880\nBut it's not one that you touch,\nit's one that Amazon manages for you.\n\n63\n00:02:55.880 --> 00:02:58.180\nSo you don't know what\noperating system it's running,\n\n64\n00:02:58.180 --> 00:03:01.160\nalthough it's a safe bet\nthat it's Amazon Linux.\n\n65\n00:03:01.160 --> 00:03:04.230\nBut you don't have to see that,\nyou don't have to deal with that.\n\n66\n00:03:04.230 --> 00:03:07.220\nYou just configure it to listen for\ncustomer connections.\n\n67\n00:03:07.220 --> 00:03:11.880\nSo your customers come into the little\nbalancer and then it sends them out to\n\n68\n00:03:11.880 --> 00:03:16.660\ninstances in the same subnet or instances\nspread across more than one subnet.\n\n69\n00:03:16.660 --> 00:03:20.740\nSee how we have got us-east-1a and\nus-east-1c, right.\n\n70\n00:03:20.740 --> 00:03:26.460\nI might be us-east-1d or e whichever ones\nwe have our instances in it can spread\n\n71\n00:03:26.460 --> 00:03:31.780\nacross those and If an instance fails,\nwe can take it out of the load balancer.\n\n72\n00:03:31.780 --> 00:03:35.770\nIf an entire AZ fails, you can take it out\nof the load balancer and everybody just\n\n73\n00:03:35.770 --> 00:03:39.070\ngets sent to the other systems and\nyou stay up and you stay running.\n\n74\n00:03:39.070 --> 00:03:44.660\nSo you get high availability,\nand you get better performance.\n\n75\n00:03:44.660 --> 00:03:48.440\nWe can scale out, adding more and\nmore and more and more web servers, and\n\n76\n00:03:48.440 --> 00:03:49.960\nwe never have to tell our end users.\n\n77\n00:03:49.960 --> 00:03:53.460\nBecause the end users,\nthey only see the load balancer.\n\n78\n00:03:53.460 --> 00:03:54.770\nThey connect to the load balancer,\n\n79\n00:03:54.770 --> 00:03:57.860\nthey get to their resources, they have\nno idea what's going on on the back end.\n\n80\n00:03:57.860 --> 00:04:00.450\nAnd that's kind of an important\npiece of what this does.\n\n81\n00:04:01.690 --> 00:04:04.460\nAll right now,\nwhen we spin up a load balancer,\n\n82\n00:04:04.460 --> 00:04:06.480\nthere's actually couple\nof different types.\n\n83\n00:04:06.480 --> 00:04:09.700\nSo if we were to go to the console here.\n\n84\n00:04:09.700 --> 00:04:13.500\nAll right, so I'm in EC2,\nI'm looking at my running instances,\n\n85\n00:04:13.500 --> 00:04:15.650\nof which I have a massive\none sittin right here.\n\n86\n00:04:15.650 --> 00:04:18.320\nBut if I scroll down a little\nbit over here on the left side,\n\n87\n00:04:18.320 --> 00:04:20.090\nwe'll find load balancing.\n\n88\n00:04:20.090 --> 00:04:22.430\nAnd here is where we can create\nour elastic load balancers.\n\n89\n00:04:22.430 --> 00:04:23.930\nAnd when you create a load balancer,\n\n90\n00:04:23.930 --> 00:04:27.500\nthere's actually a few different types\nof load balancer that you can make.\n\n91\n00:04:27.500 --> 00:04:30.920\nIt's gonna ask us if we want\nan application load balancer or\n\n92\n00:04:30.920 --> 00:04:32.500\na classic load balancer.\n\n93\n00:04:32.500 --> 00:04:35.200\nAnd there's a few other\nquestions we will get as we go\n\n94\n00:04:35.200 --> 00:04:38.330\nthrough the wizard because in addition\nto doing application in classic,\n\n95\n00:04:38.330 --> 00:04:41.770\nthere's whether want it to be\ninternet facing or private.\n\n96\n00:04:41.770 --> 00:04:43.170\nThese are all decisions we have to make.\n\n97\n00:04:44.220 --> 00:04:45.670\nAn application load balancer.\n\n98\n00:04:45.670 --> 00:04:48.020\nSee how it says preferred for\nhttp and https?\n\n99\n00:04:48.020 --> 00:04:51.890\nThis is one where it gets involved\nwith the application itself.\n\n100\n00:04:51.890 --> 00:04:55.940\nIt looks at the traffic,\nlooks at the http header in this case,\n\n101\n00:04:55.940 --> 00:04:58.720\nto determine where it is somebody is\ngoing, where they're coming from.\n\n102\n00:04:58.720 --> 00:05:02.840\nIt can use cookies to identify who it is\nconnecting to make sure they get routed to\n\n103\n00:05:02.840 --> 00:05:03.930\nthe right spot.\n\n104\n00:05:03.930 --> 00:05:04.690\nI shouldn't say routing.\n\n105\n00:05:04.690 --> 00:05:08.770\nIt's not really routing, it's just kind of\ndirecting net traffic to where it's going.\n\n106\n00:05:08.770 --> 00:05:12.130\nAnd that's gonna be suitable for most\nof us that are using web applications.\n\n107\n00:05:12.130 --> 00:05:14.130\nThat's what most people do these days.\n\n108\n00:05:14.130 --> 00:05:18.400\nBut you might have a line of business\napplication that isn't using HTTP or\n\n109\n00:05:18.400 --> 00:05:21.410\nHTTPS, it's using some\nproprietary protocol, and\n\n110\n00:05:21.410 --> 00:05:24.200\nyou can certainly load balance that also.\n\n111\n00:05:24.200 --> 00:05:25.640\nWhen you spin up these load balancers,\n\n112\n00:05:25.640 --> 00:05:27.890\nthere's several different\nmethods we can use to do it.\n\n113\n00:05:27.890 --> 00:05:31.110\nAnd when we go to a classic load balancer,\nyou'll have all those other options\n\n114\n00:05:31.110 --> 00:05:35.130\navailable to be able to use beyond\njust HTTP and HTTPS, right?\n\n115\n00:05:36.620 --> 00:05:39.460\nSo that'll be one of your first\ndecisions that you have to make.\n\n116\n00:05:39.460 --> 00:05:41.580\nThe other decision you'll\nhave to make is whether or\n\n117\n00:05:41.580 --> 00:05:43.880\nnot it's going to be Internet facing.\n\n118\n00:05:43.880 --> 00:05:46.250\nAnd we have security groups\nthat you can configure.\n\n119\n00:05:46.250 --> 00:05:47.240\nIt's easy enough to do.\n\n120\n00:05:47.240 --> 00:05:48.840\nBut let me go back to the why.\n\n121\n00:05:48.840 --> 00:05:54.690\nWhy would I wanna load balancer that\nwasn't attached to the Internet, right?\n\n122\n00:05:54.690 --> 00:05:57.560\nIsn't this all about getting my customers\nconnected to different instances?\n\n123\n00:05:57.560 --> 00:06:00.940\nWell, normally it is if we're\ntalking about web front ends, yes.\n\n124\n00:06:00.940 --> 00:06:04.040\nBut what if I have a database\nserver on the back end?\n\n125\n00:06:04.040 --> 00:06:07.310\nRight, I've got a database server that\nI don't want the public to connect to,\n\n126\n00:06:07.310 --> 00:06:09.370\nI want my web service to connect to.\n\n127\n00:06:09.370 --> 00:06:12.430\nAnd my database server is getting\noverwhelmed, so I decide to scale it out.\n\n128\n00:06:12.430 --> 00:06:16.710\nI start creating some read-only\nreplicas and I want my frontends to\n\n129\n00:06:16.710 --> 00:06:19.890\nbalance their traffic across\nthe read-only replicas on the backend.\n\n130\n00:06:19.890 --> 00:06:22.380\nI might wanna create a load\nbalancer that's private,\n\n131\n00:06:22.380 --> 00:06:26.420\nthat is just inside my\nVPC To load balance for\n\n132\n00:06:26.420 --> 00:06:29.260\nthe web servers reaching out to\nthat database server, right?\n\n133\n00:06:29.260 --> 00:06:32.850\nA private load balancer\nis not an uncommon thing.\n\n134\n00:06:32.850 --> 00:06:35.300\nSo by creating one that's\nnot Internet facing,\n\n135\n00:06:35.300 --> 00:06:39.890\nyou can use it for balancing traffic\nlike this here, on an internal VPC.\n\n136\n00:06:39.890 --> 00:06:43.680\nOr just in a VPC that has no\nInternet connectivity at all\n\n137\n00:06:43.680 --> 00:06:45.530\nwith the older style where\nthey were internet facing,\n\n138\n00:06:45.530 --> 00:06:48.900\nif you didn't have internet connectivity,\nthen you couldn't use a load balancer.\n\n139\n00:06:48.900 --> 00:06:52.050\nSo now we can, now we can create one\nthat's not connected to the internet.\n\n140\n00:06:52.050 --> 00:06:54.950\nSo those are some of the decisions we\nhave to make when we go to deploy a load\n\n141\n00:06:54.950 --> 00:06:57.700\nbalancer, is determining\nwhether we want to do that.\n\n142\n00:06:57.700 --> 00:07:01.700\nThe other thing is, you might have\nnoticed on that configuration screen,\n\n143\n00:07:01.700 --> 00:07:03.110\nlet me get back to it.\n\n144\n00:07:03.110 --> 00:07:07.990\nThat I could create a load balancer and\nit could do HTTP and HTTPS.\n\n145\n00:07:07.990 --> 00:07:11.500\nAnd one of the things I said was\nthat it could look at the headers\n\n146\n00:07:11.500 --> 00:07:14.760\nin that communication to figure\nout the connection information.\n\n147\n00:07:14.760 --> 00:07:20.280\nWell if we're doing HTTPS, that's\nhypertext transport protocol with SSL,\n\n148\n00:07:20.280 --> 00:07:22.360\nor Secure Socket Layer.\n\n149\n00:07:22.360 --> 00:07:25.370\nWell, it's actually TLS these days,\nbut either way we still call it SSL.\n\n150\n00:07:26.370 --> 00:07:28.130\nThen we just encrypt it.\n\n151\n00:07:28.130 --> 00:07:30.720\nHow the heck does a load balancer, so look\nat it when encrypting traffic to figure\n\n152\n00:07:30.720 --> 00:07:33.720\nout what's in it,\ndoesn't that defeat the whole purpose?\n\n153\n00:07:33.720 --> 00:07:35.870\nWell, it would, there's no password.\n\n154\n00:07:35.870 --> 00:07:38.570\nThe load balancer can see\nthe traffic inside it,\n\n155\n00:07:38.570 --> 00:07:43.280\nunless we give it a copy\nof our private key.\n\n156\n00:07:43.280 --> 00:07:47.630\nIf I have 50 web servers,\nthey all have to have the SSL certificate\n\n157\n00:07:47.630 --> 00:07:50.870\non those web servers so\nthat they can decrypt the data, right?\n\n158\n00:07:50.870 --> 00:07:54.949\nWe can take that same certificate and\ninstall it on the load balancer.\n\n159\n00:07:54.949 --> 00:07:57.151\nAnd when you install\nit on a load balancer,\n\n160\n00:07:57.151 --> 00:08:01.373\nthe clients can actually terminate their\nSSL connection with the load balancer,\n\n161\n00:08:01.373 --> 00:08:03.408\nnot with the web server on the backend.\n\n162\n00:08:03.408 --> 00:08:07.373\nAnd when they do that, the load balancer\nwill have full visibility to see what\n\n163\n00:08:07.373 --> 00:08:11.340\nthe traffic is, and get people\nrouted to the right destination.\n\n164\n00:08:11.340 --> 00:08:13.270\nNow, why do we care about that?\n\n165\n00:08:13.270 --> 00:08:17.690\nIf somebody starts,\nthey come through the load balancer, and\n\n166\n00:08:17.690 --> 00:08:22.040\nthey get connected to one instance,\nif I then switch them to another instance\n\n167\n00:08:22.040 --> 00:08:24.440\nhalfway through their communication,\nwhat's gonna happen?\n\n168\n00:08:24.440 --> 00:08:25.700\nAll sorts of stuff can happen.\n\n169\n00:08:25.700 --> 00:08:27.040\nThey can get logged out.\n\n170\n00:08:27.040 --> 00:08:29.330\nTheir shopping cart could go empty, right,\n\n171\n00:08:29.330 --> 00:08:32.140\nbecause that information might have\nbeen cached on a different server.\n\n172\n00:08:32.140 --> 00:08:35.340\nWell we can use cookies and store\nthe information locally on their system so\n\n173\n00:08:35.340 --> 00:08:37.280\nit doesn't matter anymore, that's good.\n\n174\n00:08:37.280 --> 00:08:40.720\nBut if they're blocking cookies,\nthen our website doesn't work anymore.\n\n175\n00:08:40.720 --> 00:08:45.090\nSo server-side caching using things\nlike a shared cache across these servers\n\n176\n00:08:45.090 --> 00:08:46.578\ncan help to resolve that issue also.\n\n177\n00:08:46.578 --> 00:08:49.980\n.But if I don't have that stuff its\nreally important to have that visibility\n\n178\n00:08:49.980 --> 00:08:53.346\non the load balancer in installing\nthe certificate there makes sense.\n\n179\n00:08:53.346 --> 00:08:57.890\n.Now, if I do that, I have another choice\nto make which is if the certificate is on\n\n180\n00:08:57.890 --> 00:09:02.940\nthe load balancer,\nI could just do regular HTTP\n\n181\n00:09:02.940 --> 00:09:06.090\nbetween the load balancer and\nthe servers on the backend.\n\n182\n00:09:06.090 --> 00:09:07.210\nNot encrypt that at all.\n\n183\n00:09:07.210 --> 00:09:08.730\nThat's private at that point anyway,\nright?\n\n184\n00:09:08.730 --> 00:09:12.370\nI'm on my VPC at that point,\nso it is private.\n\n185\n00:09:12.370 --> 00:09:16.260\nThe load balancer's talking on\nthe Internet, but that's using SSL.\n\n186\n00:09:16.260 --> 00:09:19.060\nI might want to do that for\nperformance reasons, right?\n\n187\n00:09:19.060 --> 00:09:21.810\nThat means all these web servers on the\nbackend aren't having to do encryption and\n\n188\n00:09:21.810 --> 00:09:23.070\ndecryption anymore.\n\n189\n00:09:23.070 --> 00:09:24.890\nIt's all just HTTP at that point, right?\n\n190\n00:09:24.890 --> 00:09:27.010\nIt takes a little burden\noff of those units.\n\n191\n00:09:27.010 --> 00:09:28.200\nBut at the same time,\n\n192\n00:09:28.200 --> 00:09:32.780\nif any one of these got compromised,\nnow that traffic's unencrypted, so\n\n193\n00:09:32.780 --> 00:09:36.420\nit could be intercepted, read, modified,\ntampered with, all sorts of bad things.\n\n194\n00:09:36.420 --> 00:09:38.830\nAnd it's happening behind the encryption,\nso\n\n195\n00:09:38.830 --> 00:09:41.240\nwe'd have no way of knowing that happened,\nright?\n\n196\n00:09:41.240 --> 00:09:44.160\nSo it's recommended that\nwhile you could turn it off,\n\n197\n00:09:44.160 --> 00:09:47.620\nthat you still do SSL even on the backend.\n\n198\n00:09:47.620 --> 00:09:49.990\nSo the end users,\nthe viewers or customers or\n\n199\n00:09:49.990 --> 00:09:52.840\nwhoever, they'll be terminating\nSSL against the load balancer.\n\n200\n00:09:52.840 --> 00:09:54.400\nAnd then the load balancer, in turn,\n\n201\n00:09:54.400 --> 00:09:58.450\nwill also be doing SSL back\nto the units on the backend.\n\n202\n00:09:58.450 --> 00:10:02.470\nSo, it's actually decrypting and\nre-encrypting data as it moves it along,\n\n203\n00:10:02.470 --> 00:10:04.510\nand gets things routed\nto where it needs to be.\n\n204\n00:10:04.510 --> 00:10:07.260\nSo, just be aware, those are some of\nthe decisions that we have to make.\n\n205\n00:10:07.260 --> 00:10:11.730\nOne little footnote I wanna mention is\nthat some web service support was called\n\n206\n00:10:11.730 --> 00:10:16.990\nSNI, and SNI, let's us have more than one\nwebsite attached on the single server and\n\n207\n00:10:16.990 --> 00:10:23.000\nyou use names, server names to identify\nwhat that server supposed to be.\n\n208\n00:10:23.000 --> 00:10:27.740\nWell, the HTTPS connections on\na load balancer don't support SNI.\n\n209\n00:10:27.740 --> 00:10:29.060\nAnd so as a result,\n\n210\n00:10:29.060 --> 00:10:30.950\nthey're not necessarily gonna\nknow where to send that traffic.\n\n211\n00:10:30.950 --> 00:10:36.140\nSo typically you're gonna have one website\nper IP address when you configure this up,\n\n212\n00:10:36.140 --> 00:10:38.200\nso you don't have to worry about it.\n\n213\n00:10:38.200 --> 00:10:42.930\nOr you can have a certificate that's\nusing SAN's, Service Alternative Names.\n\n214\n00:10:42.930 --> 00:10:44.500\nAnd you can put all the names for\n\n215\n00:10:44.500 --> 00:10:47.550\nyour domains right there on that same\ncertificate so it's one certificate and\n\n216\n00:10:47.550 --> 00:10:50.860\nnow we don't care which one it goes to,\nthe web backends can sort that out for us.\n\n217\n00:10:50.860 --> 00:10:54.220\nSo just be aware of that that if you're\nhosting multiple websites on the same\n\n218\n00:10:54.220 --> 00:10:57.070\ninstance, it can cause some\nproblems with the load balancer.\n\n219\n00:10:57.070 --> 00:11:00.820\n&gt;&gt; ELB's seem to be a pretty cool device,\nimplementation that we have available on\n\n220\n00:11:00.820 --> 00:11:03.710\nour AWS But I'm pretty sure\nthey're not using voodoo or\n\n221\n00:11:03.710 --> 00:11:04.980\nmagic of any kind-\n&gt;&gt; [LAUGH]\n\n222\n00:11:04.980 --> 00:11:06.300\n&gt;&gt; To make this happen,\n\n223\n00:11:06.300 --> 00:11:11.900\nhow is it that an ELB does\nactually balance the traffic?\n\n224\n00:11:11.900 --> 00:11:13.860\n&gt;&gt; All right, so the main way\nthey do it is with a listener.\n\n225\n00:11:13.860 --> 00:11:18.110\nWe configure a listener to say what you're\nlistening for, the incoming traffic, and\n\n226\n00:11:18.110 --> 00:11:19.060\nthen it balances based on that.\n\n227\n00:11:19.060 --> 00:11:20.090\nAnd I've got the screen pulled up here.\n\n228\n00:11:20.090 --> 00:11:21.360\nWhen you create a load balancer, so\n\n229\n00:11:21.360 --> 00:11:25.050\nif I create one called Don's test,\nI can specify if it's Internet facing or\n\n230\n00:11:25.050 --> 00:11:30.160\ninternal, I'll go Internet facing and\nthen down here I can specify the listener.\n\n231\n00:11:30.160 --> 00:11:31.900\nMine's defaulting to HTTP.\n\n232\n00:11:31.900 --> 00:11:36.250\nBut I can create multiple listeners and\nthe listeners might be HTTP,\n\n233\n00:11:36.250 --> 00:11:41.010\nHTTPS and\nI can specify more than one of these\n\n234\n00:11:41.010 --> 00:11:43.530\nbecause I might have it\nrunning on different ports.\n\n235\n00:11:43.530 --> 00:11:45.840\nSo I might have HTTM port 80, and 80 80.\n\n236\n00:11:45.840 --> 00:11:52.900\nAnd I might have security HTTP on 443 and\n993 and something like that.\n\n237\n00:11:52.900 --> 00:11:55.300\nSo, I'm going to specify that.\n\n238\n00:11:55.300 --> 00:11:57.975\nI can only pick between HTTP and\n\n239\n00:11:57.975 --> 00:12:02.590\nHTTPS here because of the type of load\nbalance I chose when I launched it.\n\n240\n00:12:02.590 --> 00:12:04.520\nI chose an application load balancer.\n\n241\n00:12:04.520 --> 00:12:09.010\nIf you choose a Classic Load Balancer,\nthere's even more listeners available.\n\n242\n00:12:09.010 --> 00:12:12.640\nWhen you go to create the classic,\nyou can add them in and\n\n243\n00:12:12.640 --> 00:12:17.490\nyou'll see we've got HTTP and\nHTTPS just like I had a moment ago, but\n\n244\n00:12:17.490 --> 00:12:25.380\nyou've also got a few others in here\nlike TCP and SSL security CP, okay?\n\n245\n00:12:25.380 --> 00:12:28.850\nNow, I've got HTTPS and I've got SSL.\n\n246\n00:12:28.850 --> 00:12:29.670\nWhat's that all about?\n\n247\n00:12:29.670 --> 00:12:33.990\nWell, when I come through and specify\nHTTPS, we're assuming it's web traffic,\n\n248\n00:12:33.990 --> 00:12:38.960\nbut there's many things that can be\nencrypted using SSL, like secure SMTP,\n\n249\n00:12:38.960 --> 00:12:42.440\nnot exactly, SMTPS, there is secure FTP.\n\n250\n00:12:43.440 --> 00:12:45.360\nWhich I think is also FTPS.\n\n251\n00:12:45.360 --> 00:12:45.910\nI don't-\n&gt;&gt; [LAUGH]\n\n252\n00:12:45.910 --> 00:12:47.040\n&gt;&gt; If the s is before,\n\n253\n00:12:47.040 --> 00:12:48.180\nit usually is use is SSH.\n\n254\n00:12:48.180 --> 00:12:49.770\nIf the s is after, it uses SSL.\n\n255\n00:12:49.770 --> 00:12:51.710\nSo it's FTPS.\n\n256\n00:12:51.710 --> 00:12:57.390\nSo for those, we can actually balance them\nby using a load balancer like this and\n\n257\n00:12:57.390 --> 00:12:58.810\nit will understand.\n\n258\n00:12:58.810 --> 00:13:02.240\nAnd TCP, I can really balance\nanything I want it, right?\n\n259\n00:13:02.240 --> 00:13:05.210\nMaybe I have SSH that really\nthat I'm load balancing and\n\n260\n00:13:05.210 --> 00:13:06.312\nit's probably not a good example.\n\n261\n00:13:06.312 --> 00:13:07.850\n&gt;&gt; [LAUGH]\n&gt;&gt; Maybe POP3, right?\n\n262\n00:13:07.850 --> 00:13:11.750\nSo I've got a bunch of emails front ends,\nand I wanna load balance POP3.\n\n263\n00:13:11.750 --> 00:13:14.240\nSo I can come through and say,\nTCP port 110, that's POP3,\n\n264\n00:13:14.240 --> 00:13:17.390\nif I remember right, and\nwe can balance on that.\n\n265\n00:13:17.390 --> 00:13:21.490\nAnd then you can tell it on the instance,\non the backend what we connect to.\n\n266\n00:13:21.490 --> 00:13:23.560\nMaybe it's not port 110 on the instance,\n\n267\n00:13:23.560 --> 00:13:25.330\nmaybe it's a different port\nnumber on the backend.\n\n268\n00:13:25.330 --> 00:13:30.103\nSo I can come through and specify whatever\nport number it is on the backend,\n\n269\n00:13:30.103 --> 00:13:32.410\nor maybe it's the same and we leave it be.\n\n270\n00:13:32.410 --> 00:13:35.670\nSo you can specify all that information\nright here and create that load balancer.\n\n271\n00:13:35.670 --> 00:13:40.090\nSo the classic load balancer is still\nreally useful for non-web traffic.\n\n272\n00:13:40.090 --> 00:13:42.910\nThe new load balancer, the application\nload balancer, that one's designed just\n\n273\n00:13:42.910 --> 00:13:45.620\nfor web traffic, which is what\nmost people design for these days.\n\n274\n00:13:45.620 --> 00:13:49.250\nSo these listeners, that's what's\nreally working, it's listening for\n\n275\n00:13:49.250 --> 00:13:52.250\nthe traffic and then distributing\nit based on what it found, and\n\n276\n00:13:52.250 --> 00:13:55.660\nit's trying to use a cookie for\nmost of this to be able to track how\n\n277\n00:13:55.660 --> 00:13:58.550\npeople connect to make sure they get\nreconnected to the same instance.\n\n278\n00:13:58.550 --> 00:14:02.570\nDoesn't always work, so our applications\nneed to be aware of what 's going on and\n\n279\n00:14:02.570 --> 00:14:05.100\nunderstand that people might\nreconnect on different instances.\n\n280\n00:14:05.100 --> 00:14:08.740\nWe need to be able to handle that,\na shared cache is one way that we achieve\n\n281\n00:14:08.740 --> 00:14:13.770\nthat, and you'll see where a lot\nof people leverage memcashd or\n\n282\n00:14:13.770 --> 00:14:17.920\nAPM, they leverage redis databases,\nwhatever it is to track a session state\n\n283\n00:14:17.920 --> 00:14:20.480\nacross multiple instances like\nthat to give you that scalability.\n\n284\n00:14:22.440 --> 00:14:26.350\nAll right, when we configure\na load balancer like this,\n\n285\n00:14:26.350 --> 00:14:29.400\nusually that's about all\nwe truly need to provide.\n\n286\n00:14:29.400 --> 00:14:32.180\nThere are a few advanced options that\nyou'll see if you go through and\n\n287\n00:14:32.180 --> 00:14:33.370\nconfigure them.\n\n288\n00:14:33.370 --> 00:14:36.030\nHere, I'm just kinda\nsetting up my listeners,\n\n289\n00:14:36.030 --> 00:14:40.220\nI can assign my, and give it a name.\n\n290\n00:14:40.220 --> 00:14:44.790\nWe can assign a security group to control\nthe traffic that's coming in and out.\n\n291\n00:14:44.790 --> 00:14:47.410\nAnd let me get rid of some of these.\n\n292\n00:14:47.410 --> 00:14:49.930\nI put some custom stuff in there and\nit's not happy with me.\n\n293\n00:14:49.930 --> 00:14:51.460\nSo I can specify a security group.\n\n294\n00:14:51.460 --> 00:14:54.230\nBut if you look across the top there's a\nlot of other things that we can configure,\n\n295\n00:14:54.230 --> 00:14:55.950\nlike our security settings.\n\n296\n00:14:55.950 --> 00:14:59.990\nI chose to do SSL, so\nI need to upload a new SSL certificate of\n\n297\n00:14:59.990 --> 00:15:03.280\nproviding an existing one right here,\nit's not gonna be very happy with me.\n\n298\n00:15:03.280 --> 00:15:07.290\nI can specify how I want my load balancing\npolicies to work in which SSL protocols I\n\n299\n00:15:07.290 --> 00:15:08.400\nwanna support.\n\n300\n00:15:08.400 --> 00:15:12.370\nNot all of them are secure as they used\nto be so we've gonna be careful there.\n\n301\n00:15:12.370 --> 00:15:15.750\nLet me jump back to the beginning cuz I\ndon't have a certificate upload right now.\n\n302\n00:15:15.750 --> 00:15:18.680\nSo I'm gonna get rid of\nHTTPS just temporarily.\n\n303\n00:15:19.870 --> 00:15:24.080\nAnd as we move forward, it's just telling\nme here I don't have a secure listener\n\n304\n00:15:24.080 --> 00:15:25.530\nnow, but I'm okay with that.\n\n305\n00:15:25.530 --> 00:15:27.740\nWe can configure a health check.\n\n306\n00:15:27.740 --> 00:15:30.530\nAnd the health check is kind of an\nimportant piece because when we get this\n\n307\n00:15:30.530 --> 00:15:35.200\nsetup, we need to make sure that\nwe're only sending connections\n\n308\n00:15:35.200 --> 00:15:39.070\nto nodes that are actually functioning,\nactually doing their job.\n\n309\n00:15:39.070 --> 00:15:42.420\nIf I have an instance behind the scene\nthis fails from some reason, maybe a patch\n\n310\n00:15:42.420 --> 00:15:47.910\ncrushed or can't connect to the shared mem\ncache delete something like that, right?\n\n311\n00:15:47.910 --> 00:15:50.240\nWell, I don't need the syntraffic anymore.\n\n312\n00:15:50.240 --> 00:15:54.598\nSo when I get this set up, I need to have\nsome way to check those machines to make\n\n313\n00:15:54.598 --> 00:15:56.289\nsure they are up and running.\n\n314\n00:15:56.289 --> 00:16:00.297\nAnd there's some other advantages which go\nalong with this like the ability to drain\n\n315\n00:16:00.297 --> 00:16:02.442\nnodes to say if one node\nis no longer working,\n\n316\n00:16:02.442 --> 00:16:06.113\ndo I just give up on it immediately and\nstart sending traffic somewhere else or\n\n317\n00:16:06.113 --> 00:16:08.475\ndo I give it a time and\nI wait for it to come back up?\n\n318\n00:16:08.475 --> 00:16:11.600\nCuz sometimes the machine will recover\nitself in a matter of seconds and I can\n\n319\n00:16:11.600 --> 00:16:15.790\nkeep people right on that same instance\nand their session is uninterrupted.\n\n320\n00:16:15.790 --> 00:16:18.430\nVersus if I move them to a new instance\nthe session might get interrupted.\n\n321\n00:16:18.430 --> 00:16:20.670\nThat’s another feature\nwe might need to tweak.\n\n322\n00:16:20.670 --> 00:16:24.700\nThere’s things like a proxy protocol and\nsticky sessions,\n\n323\n00:16:24.700 --> 00:16:31.070\nwhich allow us to tweak how long we keep\npeople kinda tied to that same instance.\n\n324\n00:16:31.070 --> 00:16:34.090\nAnd the default values are usually\ngood enough for most people.\n\n325\n00:16:34.090 --> 00:16:37.810\nBut you might need to come back in\nhere after the fact and tweak it.\n\n326\n00:16:37.810 --> 00:16:41.380\nBut the one that I spend the most\ntime on is this health check.\n\n327\n00:16:41.380 --> 00:16:45.760\nBecause I need to make sure that people\nare only being sent to good instances.\n\n328\n00:16:45.760 --> 00:16:47.250\nAnd how do we know that?\n\n329\n00:16:47.250 --> 00:16:51.320\nWell, you can test it by doing a web page,\nright?\n\n330\n00:16:51.320 --> 00:16:53.820\nCan I access this web\npage on the instance?\n\n331\n00:16:53.820 --> 00:16:57.380\nIf it's a web app, that's a pretty good\nindicator that it's working or not, right?\n\n332\n00:16:57.380 --> 00:16:59.247\nOr you can just do a TCP connection.\n\n333\n00:16:59.247 --> 00:17:02.645\nMaybe I've got a database server on\nthe backend, so can I connect to it?\n\n334\n00:17:02.645 --> 00:17:06.510\nCan I open up a connection at port 1443?\n\n335\n00:17:06.510 --> 00:17:08.800\nWhich is I think what Microsoft SQL uses.\n\n336\n00:17:08.800 --> 00:17:10.050\nSo can I connect to that?\n\n337\n00:17:10.050 --> 00:17:14.350\nIf I can't then the database\nmight not be working.\n\n338\n00:17:14.350 --> 00:17:15.700\nNow, just because I can't connect,\n\n339\n00:17:15.700 --> 00:17:17.710\nit doesn't mean the database\nisn't working either, all right?\n\n340\n00:17:17.710 --> 00:17:19.380\nIt just means I can make that connection,\n\n341\n00:17:19.380 --> 00:17:21.660\nit could be that the database\nhard drive is full.\n\n342\n00:17:21.660 --> 00:17:24.340\nSo I can still connect on that port and\nrun read queries, but\n\n343\n00:17:24.340 --> 00:17:25.780\nI can't write any data.\n\n344\n00:17:25.780 --> 00:17:27.475\nSo it's not a magician, right?\n\n345\n00:17:27.475 --> 00:17:28.870\nIt's very limited, but\n\n346\n00:17:28.870 --> 00:17:33.790\nit gives us a view of what's kind\nof going on behind the scenes, and\n\n347\n00:17:33.790 --> 00:17:37.680\nif an instance is no longer behaving right\nit just takes it out of the pool and\n\n348\n00:17:37.680 --> 00:17:41.750\nsends our traffic to the other instances\nthat are inside of that load balancer.\n\n349\n00:17:41.750 --> 00:17:44.592\nUnless it was the last one,\nin which case, it goes offline.\n\n350\n00:17:44.592 --> 00:17:47.249\n&gt;&gt; [LAUGH]\n&gt;&gt; You've gotta make sure you have enough\n\n351\n00:17:47.249 --> 00:17:48.140\ninstances.\n\n352\n00:17:48.140 --> 00:17:50.420\n&gt;&gt; Now Don, this sounds a lot\nlike Amazon's CloudWatch.\n\n353\n00:17:50.420 --> 00:17:52.500\nIs this just basically front-ending that?\n\n354\n00:17:52.500 --> 00:17:55.160\n&gt;&gt; Yes, that's exactly what it's doing.\n\n355\n00:17:55.160 --> 00:17:56.760\nAnd it's super basic, right?\n\n356\n00:17:56.760 --> 00:17:58.922\nI mean, you can see this,\nit's pretty limited.\n\n357\n00:17:58.922 --> 00:18:00.670\nWith CloudWatch,\nwe can go all sorts of crazy.\n\n358\n00:18:00.670 --> 00:18:04.170\nWe can say, are you able to look at this\nweb paging, get this particular shrink and\n\n359\n00:18:04.170 --> 00:18:04.900\ntext back?\n\n360\n00:18:04.900 --> 00:18:08.370\nOr can you connect to that SQL server and\nrun this querying, get results back?\n\n361\n00:18:08.370 --> 00:18:09.640\nYou can get really advance.\n\n362\n00:18:09.640 --> 00:18:10.860\nThis is super basic.\n\n363\n00:18:10.860 --> 00:18:12.140\nCan I just see the system?\n\n364\n00:18:12.140 --> 00:18:14.767\nBut if using CloudWatch and\nit's part of the load balancer so\n\n365\n00:18:14.767 --> 00:18:18.482\nyou don't actually get charge for it,\nwould be on the load balance surprise.\n\n366\n00:18:18.482 --> 00:18:20.100\nAnd so you're able to reach and\n\n367\n00:18:20.100 --> 00:18:23.490\ntest that machine Now,\nwhy do we care about it being CloudWatch?\n\n368\n00:18:23.490 --> 00:18:28.360\nWell CloudWatch has this amazing feature\nwhich is not only can exceed performance\n\n369\n00:18:28.360 --> 00:18:31.340\nsituations but\nit can take action based on them, right?\n\n370\n00:18:31.340 --> 00:18:36.120\nIt can use the simple notification service\nthe Amazon S&amp;S or it can use lambda or any\n\n371\n00:18:36.120 --> 00:18:41.420\nnumber of other services to say, if this\nscenario occurs take this other action.\n\n372\n00:18:41.420 --> 00:18:46.980\nRight, and so if we configure this type of\na monitor in place we can really do some\n\n373\n00:18:46.980 --> 00:18:52.570\ninteresting things,\nwhich is gonna segue us into autoscaling.\n\n374\n00:18:52.570 --> 00:18:55.570\nAutoscaling can use the CloudWatch data.\n\n375\n00:18:55.570 --> 00:18:57.610\nAnd my head's covering up part of this.\n\n376\n00:18:57.610 --> 00:19:02.690\nBut what we can do is in CloudWatch we can\nset up things like CPULoadScaleOut and\n\n377\n00:19:02.690 --> 00:19:05.540\nCPULoadScaleIn, which are really policies.\n\n378\n00:19:05.540 --> 00:19:11.000\nAnd what we can define in here is\nmonitor the CPU load on our instances.\n\n379\n00:19:11.000 --> 00:19:14.766\nAnd if our CPUs are constantly\ncruising at 80% or\n\n380\n00:19:14.766 --> 00:19:18.360\nhigher let's add some more\ninstances to the load balancer.\n\n381\n00:19:18.360 --> 00:19:22.960\nOr if we're constantly cruising at 40% or\nlower, let's take away some instances and\n\n382\n00:19:22.960 --> 00:19:24.280\nshrink that back down again.\n\n383\n00:19:24.280 --> 00:19:27.410\nWell in order to do that,\nI've gotta be able to monitor the CPU\n\n384\n00:19:27.410 --> 00:19:31.780\nutilization of all of these\ninstances which CloudWatch can do.\n\n385\n00:19:31.780 --> 00:19:33.970\nIn fact,\nCloudWatch is doing already, right?\n\n386\n00:19:33.970 --> 00:19:37.420\nBecause Amazon monitors that as\npart of your default instance cost.\n\n387\n00:19:37.420 --> 00:19:41.420\nSo things like disk activity and\nCPU and RAM utilization,\n\n388\n00:19:41.420 --> 00:19:42.880\nthose are all being monitored.\n\n389\n00:19:42.880 --> 00:19:44.480\nYou can create your own custom CloudWatch\n\n390\n00:19:44.480 --> 00:19:45.830\nmonitors that do all\nsorts of crazy things.\n\n391\n00:19:45.830 --> 00:19:47.310\nMaybe you wanna monitor based on sessions.\n\n392\n00:19:47.310 --> 00:19:51.150\nHow many sessions does Apache\non this instance have right now?\n\n393\n00:19:51.150 --> 00:19:53.118\nWe can track that with CloudWatch.\n\n394\n00:19:53.118 --> 00:19:58.190\nAnd with CloudWatch you can configure\npolicies that do things and\n\n395\n00:19:58.190 --> 00:20:03.470\none of the best things we can\ndo is connect to auto scaling to\n\n396\n00:20:03.470 --> 00:20:06.930\nautomatically scale in and\nout the load balancer.\n\n397\n00:20:06.930 --> 00:20:09.082\nNow if you want to do that you've\ngot to set up auto scaling,\n\n398\n00:20:09.082 --> 00:20:10.084\nit's a separate service.\n\n399\n00:20:10.084 --> 00:20:14.770\nAnd we set up all the scaling, it needs\na couple of different components, right?\n\n400\n00:20:14.770 --> 00:20:19.170\nThe main component is what's\ncalled a launch configuration.\n\n401\n00:20:19.170 --> 00:20:23.300\nWhen I add a new instance,\nwhere does that instance come from?\n\n402\n00:20:23.300 --> 00:20:26.230\nIf I have three web servers,\nhere's my three web servers right here.\n\n403\n00:20:26.230 --> 00:20:30.620\nThey've got Apache on them, they've got\na copy of my latest greatest website.\n\n404\n00:20:30.620 --> 00:20:33.390\nThey're up, they're running, they're\nconnected to my backend database and\n\n405\n00:20:33.390 --> 00:20:35.020\nthey're doing their job.\n\n406\n00:20:35.020 --> 00:20:38.311\nIf I decide the system is getting so,\nand I wanna add another instance,\n\n407\n00:20:38.311 --> 00:20:42.070\nI've gotta deploy the instance,\nI've gotta install Apache,\n\n408\n00:20:42.070 --> 00:20:44.590\nI've gotta add the latest and\ngreatest website,\n\n409\n00:20:44.590 --> 00:20:47.529\nI've gotta connect it to my database,\nI've gotta do all this extra staff.\n\n410\n00:20:48.620 --> 00:20:49.595\nAmazon can't do that.\n\n411\n00:20:49.595 --> 00:20:51.620\nThey don't know your configuration, right?\n\n412\n00:20:51.620 --> 00:20:57.210\nSo ahead of time, we have to set up\nan AMI, an Amazon machine image.\n\n413\n00:20:57.210 --> 00:21:00.970\nWe have to set up an image that has\neverything that we need in it, or\n\n414\n00:21:00.970 --> 00:21:05.410\nthat calls a script that will allow it to\nget everything it needs when it boots up,\n\n415\n00:21:05.410 --> 00:21:08.560\nand then a launch configuration\nthat dictates how we launch it.\n\n416\n00:21:08.560 --> 00:21:12.360\nA launch configuration is\ngonna contain things like\n\n417\n00:21:12.360 --> 00:21:15.010\nwhat availability zone\nare we deploying into?\n\n418\n00:21:15.010 --> 00:21:17.460\nWhat's the name of\nthe instance going to be?\n\n419\n00:21:17.460 --> 00:21:19.880\nWhat subnet is it going to be part of?\n\n420\n00:21:19.880 --> 00:21:22.050\nWhat load balancer is it going a part of?\n\n421\n00:21:22.050 --> 00:21:24.340\nRight, that's part of all\npart of launch configuration.\n\n422\n00:21:24.340 --> 00:21:29.650\nThe AMI contains things like\nthe operating system Apache,\n\n423\n00:21:29.650 --> 00:21:32.530\nthe latest and\ngreatest website, or a script.\n\n424\n00:21:32.530 --> 00:21:34.300\nI might have an S3 bucket\nthat has my website.\n\n425\n00:21:34.300 --> 00:21:37.090\nAnd every time I update the website,\nI just update the S3 bucket.\n\n426\n00:21:37.090 --> 00:21:42.210\nAnd I have all of my instances set to\nquery that S3 bucket once an hour,\n\n427\n00:21:42.210 --> 00:21:43.530\nand download all the updates.\n\n428\n00:21:43.530 --> 00:21:44.700\nAnd so I can push updates out that way.\n\n429\n00:21:44.700 --> 00:21:47.080\nOr maybe I manually push\nthe webpage into these things.\n\n430\n00:21:47.080 --> 00:21:49.630\nYou don't wanna go manual\nif you don't have to.\n\n431\n00:21:49.630 --> 00:21:53.300\nBut by doing this,\nI can tie these things together and\n\n432\n00:21:53.300 --> 00:21:57.030\nnow, I can have CloudWatch\nwatching the system.\n\n433\n00:21:57.030 --> 00:22:02.190\nAnd if it sees that CPU threshold cranking\nup above a certain level, that triggers\n\n434\n00:22:02.190 --> 00:22:07.180\nthe policy, and the policy may say\nto add capacity or reduce capacity.\n\n435\n00:22:07.180 --> 00:22:10.200\nAnd if it's gonna add capacity,\nit goes to the launch configuration.\n\n436\n00:22:10.200 --> 00:22:12.990\nIt spins up an instance\naccording to the configuration,\n\n437\n00:22:12.990 --> 00:22:14.550\nthrows it in the appropriate area.\n\n438\n00:22:14.550 --> 00:22:17.460\nAnd now instead of three\nweb servers I've got four.\n\n439\n00:22:17.460 --> 00:22:22.030\nAnd then five and then six and then 100\nand however many it is that I need.\n\n440\n00:22:22.030 --> 00:22:22.570\nAll right.\n\n441\n00:22:22.570 --> 00:22:25.160\nWell, before I get ahead of myself,\nthere are a few limits here.\n\n442\n00:22:25.160 --> 00:22:28.180\nLet me just rattle these\noff here real quick.\n\n443\n00:22:28.180 --> 00:22:30.050\nThat you can bump into.\n\n444\n00:22:30.050 --> 00:22:34.910\nFirst off, you can only have 100\nlaunch configurations per region.\n\n445\n00:22:34.910 --> 00:22:37.110\nThat's a lot of launch configurations so\n\n446\n00:22:37.110 --> 00:22:38.700\nmost of us it's not gonna be a problem,\nright?\n\n447\n00:22:38.700 --> 00:22:40.747\nSo per region, 100 launch configurations.\n\n448\n00:22:40.747 --> 00:22:44.560\nBut the limit that will\nmatter is the next one.\n\n449\n00:22:44.560 --> 00:22:50.070\nBy default your account will be limited\nto 20 EC2 instances per region.\n\n450\n00:22:50.070 --> 00:22:52.640\nSo I can only spin up 20 instances.\n\n451\n00:22:52.640 --> 00:22:56.050\nIf I have an auto-scaling\ncluster set up and\n\n452\n00:22:56.050 --> 00:23:00.840\nI'm at 20 instances and it's time\nto spin up a 21st, not gonna do it.\n\n453\n00:23:01.860 --> 00:23:06.700\nThat's part of the security\nprotection at Amazon.\n\n454\n00:23:06.700 --> 00:23:10.410\nWhat they don't want is they don't want\nsomebody breaking into your account and\n\n455\n00:23:10.410 --> 00:23:13.920\nthen spinning up a 1000\nBitCoin mining stations.\n\n456\n00:23:13.920 --> 00:23:16.200\nRight, and before you know it you get\na bill at the end of the month for\n\n457\n00:23:16.200 --> 00:23:17.615\na million dollars.\n\n458\n00:23:17.615 --> 00:23:19.320\n[LAUGH] And you're like, what happened?\n\n459\n00:23:19.320 --> 00:23:22.580\nAnd somebody got into your account and\nspun up a thousand instances, right?\n\n460\n00:23:22.580 --> 00:23:23.850\nSo it'll hold you to 20.\n\n461\n00:23:23.850 --> 00:23:26.460\nWhat you have to do,\nis if you wanna go beyond that 20,\n\n462\n00:23:26.460 --> 00:23:27.870\nyou've got to do a support ticket.\n\n463\n00:23:27.870 --> 00:23:29.380\nYou open up a support ticket with AWS and\n\n464\n00:23:29.380 --> 00:23:31.910\nsay, look,\nI'm setting up a load balancing cluster.\n\n465\n00:23:31.910 --> 00:23:34.120\nI want my maximum threshold\nto be 100 instances.\n\n466\n00:23:34.120 --> 00:23:34.950\nCan you raise my limit?\n\n467\n00:23:34.950 --> 00:23:36.380\nAnd they'll raise your limit.\n\n468\n00:23:36.380 --> 00:23:38.010\nBut now they've got it on paper.\n\n469\n00:23:38.010 --> 00:23:41.710\nThat you said you wanted that limit to be\na 100, and so if somebody breaks into your\n\n470\n00:23:41.710 --> 00:23:45.270\naccount and spins up a hundred instances,\nyou asked for it.\n\n471\n00:23:45.270 --> 00:23:47.230\nRight?\nSo that's why the limit is there.\n\n472\n00:23:47.230 --> 00:23:49.805\nIt's not a hard,\nwell technically it's a hard limit, but\n\n473\n00:23:49.805 --> 00:23:53.680\nit's just a support ticket away from being\nremoved, and then you're back in business.\n\n474\n00:23:53.680 --> 00:23:57.947\nSo if you're configuring a load balancer,\nbe aware that 20 instances per region.\n\n475\n00:23:57.947 --> 00:24:02.523\nAnd a load balancer, how many regions\ncan a load balancer spread across?\n\n476\n00:24:02.523 --> 00:24:06.032\nOne, only one,\nload balancers are not multi-region.\n\n477\n00:24:06.032 --> 00:24:07.401\nThey're multi AZ.\n\n478\n00:24:07.401 --> 00:24:13.080\nIn my diagram, I show my load balancer\nhere hitting us-east-1a and us-east-1c.\n\n479\n00:24:13.080 --> 00:24:14.308\nWhat if I have us-west-1a?\n\n480\n00:24:14.308 --> 00:24:16.620\nWell, too bad.\n\n481\n00:24:16.620 --> 00:24:18.358\nMy load balancer can't encompass that.\n\n482\n00:24:18.358 --> 00:24:22.561\nI'll need to set up another load balancer\nin another autoscaling group just for\n\n483\n00:24:22.561 --> 00:24:23.220\nus-west.\n\n484\n00:24:23.220 --> 00:24:24.405\nSo now, I've got two load balancers.\n\n485\n00:24:24.405 --> 00:24:28.280\nWell, how do I distribute my traffic\nacross the two load balancers?\n\n486\n00:24:28.280 --> 00:24:30.618\nWell, there you've got\na couple of choices.\n\n487\n00:24:30.618 --> 00:24:33.103\nYou could just use DNS Round Robining and\n\n488\n00:24:33.103 --> 00:24:37.720\nput the DNS name of both your load\nbalancers on the record for your website.\n\n489\n00:24:37.720 --> 00:24:38.740\nThat's one way.\n\n490\n00:24:38.740 --> 00:24:41.940\nMy favorite is if you go into Route 53.\n\n491\n00:24:41.940 --> 00:24:45.673\nIn Route 53, you can setup\ngeolocation on your DNS record.\n\n492\n00:24:45.673 --> 00:24:49.685\nAnd so you can say, when somebody\nlooks up www.donssite.com and\n\n493\n00:24:49.685 --> 00:24:55.290\nthey're coming from Europe, I'll give them\nthis load balancer, that's in Europe.\n\n494\n00:24:55.290 --> 00:24:56.576\nAnd if they're coming from Oregon,\n\n495\n00:24:56.576 --> 00:24:58.910\nI'll give them this load balancer\nthat's over on the West Coast.\n\n496\n00:24:58.910 --> 00:25:01.327\nAnd that way,\nyou can get people to a load balancer and\n\n497\n00:25:01.327 --> 00:25:04.822\na region that's closer to them, but\nyou'll need more than one load balancer\n\n498\n00:25:04.822 --> 00:25:07.781\nto achieve that which means more\nthan one launch configuration,\n\n499\n00:25:07.781 --> 00:25:10.150\nmore than one AMI and so\non to get all setup that way.\n\n500\n00:25:10.150 --> 00:25:11.960\nIt takes a lot of work to be global.\n\n501\n00:25:11.960 --> 00:25:13.899\nBut if you are just operating\ninside of one region,\n\n502\n00:25:13.899 --> 00:25:16.150\nyou have got one load balancer,\nit doesn't matter.\n\n503\n00:25:16.150 --> 00:25:17.480\nNow, the load balancer\nis highly available.\n\n504\n00:25:17.480 --> 00:25:20.440\nSo, it is stored in more than one axis.\n\n505\n00:25:20.440 --> 00:25:20.944\nThat's good.\n\n506\n00:25:20.944 --> 00:25:23.691\nYour AMI is able to be\ncopied between regions and\n\n507\n00:25:23.691 --> 00:25:27.630\nit already exists correctly in AZ,\nso you are good there.\n\n508\n00:25:27.630 --> 00:25:28.430\nSame with your launch configurations.\n\n509\n00:25:28.430 --> 00:25:31.313\nSo it is all very highly\navailable within the region and\n\n510\n00:25:31.313 --> 00:25:34.949\nyou are pretty much protected there,\nbut it does take a bit of setup,\n\n511\n00:25:34.949 --> 00:25:37.830\ndoes take a little bit of\nwork to get put in place.\n\n512\n00:25:37.830 --> 00:25:40.850\nBut when it's done, this is the magic\nthat makes the cloud worthwhile.\n\n513\n00:25:40.850 --> 00:25:44.255\nThis is where I can say,\nsometimes I need 100 servers, but\n\n514\n00:25:44.255 --> 00:25:46.112\nmost of the time I only need 20.\n\n515\n00:25:46.112 --> 00:25:49.098\nAnd if I autoscale,\nI can make sure that I'm only paying for\n\n516\n00:25:49.098 --> 00:25:52.146\n20 servers when I need 20 servers and\nI'm only paying for\n\n517\n00:25:52.146 --> 00:25:54.991\n100 servers when I\nabsolutely need 100 servers.\n\n518\n00:25:54.991 --> 00:25:56.798\nWe get that proper distribution there and\n\n519\n00:25:56.798 --> 00:25:59.210\nthat's where we really\nbenefit from the cloud.\n\n520\n00:25:59.210 --> 00:26:02.592\n&gt;&gt; Yeah Don, I've heard you just\npraise and praise the cloud,\n\n521\n00:26:02.592 --> 00:26:07.099\nbecause of this very fact, specifically\nAWS is that you can just either spin up or\n\n522\n00:26:07.099 --> 00:26:09.976\nspin out, grow up or out,\nwhatever you need to do.\n\n523\n00:26:09.976 --> 00:26:12.979\nSet it to automatically do that and\nit just saves you a lot of headache\n\n524\n00:26:12.979 --> 00:26:15.720\non the back-end,\nhaving to do these things manually.\n\n525\n00:26:15.720 --> 00:26:17.420\nJust set it and forget it,\nwalk away from the oven.\n\n526\n00:26:17.420 --> 00:26:21.861\nCome back and here's the perfectly roasted\nturkey that you need right now, and\n\n527\n00:26:21.861 --> 00:26:25.650\nthat's a really nice feature\nof using these cloud services.\n\n528\n00:26:25.650 --> 00:26:26.993\n&gt;&gt; There's another neat\nfeature that it's got.\n\n529\n00:26:26.993 --> 00:26:30.900\nI always talk about it terms\nof scaling in and out.\n\n530\n00:26:30.900 --> 00:26:35.350\nSo you set a maximum number and a minimum\nnumber of, or I'm sorry, a maximum and\n\n531\n00:26:35.350 --> 00:26:36.889\na desired number of hosts.\n\n532\n00:26:36.889 --> 00:26:40.498\nLike I desire to only have 10,\nbut we can go up to 100.\n\n533\n00:26:40.498 --> 00:26:44.138\nSo that's good, but you can also set\na minimum and the minimum is neat,\n\n534\n00:26:44.138 --> 00:26:45.899\nbecause this shouldn't happen,\n\n535\n00:26:45.899 --> 00:26:49.542\nbut let's say that I'm going through and\ndoing some spring cleaning or\n\n536\n00:26:49.542 --> 00:26:53.710\nwhatever and I accidentally delete\nthe last incidence in my load balancer.\n\n537\n00:26:53.710 --> 00:26:58.120\nSo I only had one instance in the load\nbalancer and I deleted it or terminated.\n\n538\n00:26:58.120 --> 00:27:00.732\nWell, if I have a minimum\nof one instance to find,\n\n539\n00:27:00.732 --> 00:27:04.170\nwhen I terminate that one instance,\nit will spin up another one.\n\n540\n00:27:04.170 --> 00:27:07.830\nSo, we're guaranteed that I've always\na certain amount up and running.\n\n541\n00:27:07.830 --> 00:27:11.424\nI might always wanna make sure that\nI have one instance in each AZ And\n\n542\n00:27:11.424 --> 00:27:15.079\nif I set a minimum of one, it'll make\nsure that even if I screw it up,\n\n543\n00:27:15.079 --> 00:27:16.250\nit'll fix it for me.\n\n544\n00:27:16.250 --> 00:27:19.275\nSo, it's that kinda stuff that you\ncan do with a load balancer and\n\n545\n00:27:19.275 --> 00:27:21.650\nautoscaling that really\nmakes the cloud awesome.\n\n546\n00:27:21.650 --> 00:27:25.384\n&gt;&gt; It sounds like Amazon has gone to a lot\nof pains to figure out where we might mess\n\n547\n00:27:25.384 --> 00:27:27.869\nourselves up and\nkeep us from being able to do that.\n\n548\n00:27:27.869 --> 00:27:28.504\n&gt;&gt; [LAUGH]\n&gt;&gt; Or\n\n549\n00:27:28.504 --> 00:27:31.416\nat least set in some sort of\nroadblock that we have to overcome.\n\n550\n00:27:31.416 --> 00:27:33.324\nSo that if we wanted\nto screw ourselves up,\n\n551\n00:27:33.324 --> 00:27:35.290\nwe meant to screw\nourselves up pretty hard.\n\n552\n00:27:35.290 --> 00:27:38.306\n&gt;&gt; Yeah, absolutely.\n&gt;&gt; [LAUGH] Don, well, we've gone through\n\n553\n00:27:38.306 --> 00:27:43.191\nELB's and autoscaling, very interesting\nstuff, very pertinent stuff to\n\n554\n00:27:43.191 --> 00:27:48.020\nus as trying to get a certification and\nthen of course as an administrator.\n\n555\n00:27:48.020 --> 00:27:50.600\nIs there anything else we need\nto cover before we end our show?\n\n556\n00:27:50.600 --> 00:27:51.255\n&gt;&gt; That's it on this.\n\n557\n00:27:51.255 --> 00:27:53.680\nWe still have a ton more\nabout AWS coming up.\n\n558\n00:27:53.680 --> 00:27:57.028\nBut as far as ELB and autoscaling,\nI can go on about it for hours on end, but\n\n559\n00:27:57.028 --> 00:27:58.432\nthat's what we need to know for\n\n560\n00:27:58.432 --> 00:28:01.729\nthe exam is the kind of solution that,\nthat creates to balance traffic.\n\n561\n00:28:01.729 --> 00:28:06.048\nCreate availability and\ncreate that return on investment,\n\n562\n00:28:06.048 --> 00:28:08.790\nthe cost effectiveness of the cloud.\n\n563\n00:28:08.790 --> 00:28:11.539\n&gt;&gt; Well, thanks so much for joining us,\nDon and we do thank you guys for\n\n564\n00:28:11.539 --> 00:28:14.692\nwatching, but it looks like it's that\ntime for us to sign off for ITPro.TV.\n\n565\n00:28:14.692 --> 00:28:15.690\nI've been your host Daniel Lowrie.\n\n566\n00:28:15.690 --> 00:28:16.709\n&gt;&gt; And I'm Don Pezet.\n\n567\n00:28:16.709 --> 00:28:17.703\n&gt;&gt; And we'll see you next time.\n\n568\n00:28:17.703 --> 00:28:25.284\n[MUSIC]\n\n569\n00:28:25.284 --> 00:28:27.609\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207813172"
        }
      ],
      "title": "ELB, CloudWatch and Auto Scaling"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don explore Amazon's Identity and Access Management(IAM) feature. They start by explaining what IAM is and how it's used. Next they discuss the different types of users and groups, demonstrating how to create and modify them. Lastly, they begin looking at authenticating into AWS with the created users.",
          "length": "1705",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-identity_and_access_management-030717.00_30_09_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-identity_and_access_management-030717.00_30_09_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-identity_and_access_management-030717.00_30_09_08.Still001-sm.jpg",
          "title": "Identity and Access Management",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.326\nWelcome to ITProTV.\n\n2\n00:00:01.326 --> 00:00:03.036\nI'm your host Don [CROSSTALK]\n\n3\n00:00:03.036 --> 00:00:08.503\n[MUSIC]\n\n4\n00:00:08.503 --> 00:00:11.687\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.687 --> 00:00:13.626\n&gt;&gt; All right, greetings everyone and\n\n6\n00:00:13.626 --> 00:00:16.346\nwelcome to another exciting\nepisode of ITProTV.\n\n7\n00:00:16.346 --> 00:00:19.654\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.654 --> 00:00:22.320\nwe are back with more of our ACSAA series.\n\n9\n00:00:22.320 --> 00:00:26.300\nAnd of course joining us in the studio yet\nagain, our good friend and mentor, is Mr.\n\n10\n00:00:26.300 --> 00:00:26.860\nDon Pezet.\n\n11\n00:00:26.860 --> 00:00:27.890\nDon, welcome back, sir.\n\n12\n00:00:27.890 --> 00:00:28.730\nGlad to have you.\n\n13\n00:00:28.730 --> 00:00:29.825\n&gt;&gt; Thanks for having me, Daniel.\n\n14\n00:00:29.825 --> 00:00:31.620\nWe're ready to dive right back\ninto the world of AWS and\n\n15\n00:00:31.620 --> 00:00:35.958\nin this episode we're gonna be talking\nabout identity and access management or\n\n16\n00:00:35.958 --> 00:00:42.020\nIAM, which is a increasingly important\npiece of any AWS solution out there.\n\n17\n00:00:42.020 --> 00:00:46.280\nAnd let's backtrack a little bit\ninto the world of AWS history and\n\n18\n00:00:46.280 --> 00:00:49.730\nthen we'll move into where\nIAM fits into this puzzle.\n\n19\n00:00:49.730 --> 00:00:55.020\nIn the early days of AWS,\nyou signed in with a user account, right?\n\n20\n00:00:55.020 --> 00:00:56.778\nOften times your Amazon shopping cart.\n\n21\n00:00:56.778 --> 00:00:59.690\n[LAUGH] And\nyou'd sign into AWS with this account and\n\n22\n00:00:59.690 --> 00:01:04.850\nyou then had access to spin up EC2\ninstances and eventually RDS databases and\n\n23\n00:01:04.850 --> 00:01:07.600\nall the other various things\nthat you spin up inside AWS.\n\n24\n00:01:07.600 --> 00:01:12.040\nWell, the challenge with that model was\nwhat if you wanted to give somebody else\n\n25\n00:01:12.040 --> 00:01:13.800\naccess to your resources?\n\n26\n00:01:13.800 --> 00:01:17.730\nOr maybe not even all your resources,\njust a portion of your resources.\n\n27\n00:01:17.730 --> 00:01:22.070\nIt wasn't easy to do and then people\noften ended up sharing accounts.\n\n28\n00:01:22.070 --> 00:01:25.070\nSo I might create a user account for my\ncompany and then I share it with Daniel,\n\n29\n00:01:25.070 --> 00:01:29.590\nI share it with other people, and that\ndoesn't really make for easy management.\n\n30\n00:01:29.590 --> 00:01:33.030\nIf I let an employee go, I've got to\ngo and change this master password and\n\n31\n00:01:33.030 --> 00:01:35.190\nthen everybody's gotta relearn\nthe new master password.\n\n32\n00:01:35.190 --> 00:01:36.150\nAnd if somebody goes in and\n\n33\n00:01:36.150 --> 00:01:40.480\ndoes something bad like accidentally\nterminates an instance, I can't figure\n\n34\n00:01:40.480 --> 00:01:43.150\nout who did it because everybody's\nlogged in with that same account, right?\n\n35\n00:01:43.150 --> 00:01:46.030\nSo sharing that user name and\npassword, that's not a good idea.\n\n36\n00:01:46.030 --> 00:01:49.330\nI don't really have to tell you guys that,\nI'm sure.\n\n37\n00:01:49.330 --> 00:01:52.190\nThe same thing goes for\njust having a user name and password.\n\n38\n00:01:52.190 --> 00:01:54.330\nThere's flaws in that model.\n\n39\n00:01:54.330 --> 00:01:55.630\nIt's a very old model.\n\n40\n00:01:55.630 --> 00:01:57.470\nWell, Amazon recognizes that.\n\n41\n00:01:57.470 --> 00:02:01.870\nAnd years ago, they introduced IAM,\nIdentity and Access Management.\n\n42\n00:02:01.870 --> 00:02:06.690\nAnd what it allows us to do is create,\nwell, you start with one account, right?\n\n43\n00:02:06.690 --> 00:02:11.070\nBut then inside of that account,\nwe can create additional users and\n\n44\n00:02:11.070 --> 00:02:14.900\nadditional security credentials to\nassign to people and applications.\n\n45\n00:02:14.900 --> 00:02:19.830\nAnd create a well rounded,\ngranular, easy to manage secure\n\n46\n00:02:19.830 --> 00:02:24.690\nenvironment which really is essential in\nany application that we develop today.\n\n47\n00:02:24.690 --> 00:02:28.120\nSo if you're architecting a solution,\nIAM is really important.\n\n48\n00:02:28.120 --> 00:02:32.550\n&gt;&gt; So Don, does IAM basically introduce\nthe type of concept where we're\n\n49\n00:02:32.550 --> 00:02:34.410\nusing kind of role-based access?\n\n50\n00:02:34.410 --> 00:02:35.530\nIs that what we're looking at?\n\n51\n00:02:35.530 --> 00:02:38.850\n&gt;&gt; It is and it gets a little\nconfusing because the terminology,\n\n52\n00:02:38.850 --> 00:02:41.950\nyou have to remember that AWS\nis operating on a global scale.\n\n53\n00:02:41.950 --> 00:02:47.650\nSo what a lot of us think of as a role is\nnot necessarily what is normally a role.\n\n54\n00:02:47.650 --> 00:02:50.710\nSo in AWS, in IAM specifically,\n\n55\n00:02:50.710 --> 00:02:54.760\nwe have users, roles and groups and\nthere's a couple of other things, too.\n\n56\n00:02:54.760 --> 00:02:57.430\nBut users, roles and\ngroups are pretty important pieces that.\n\n57\n00:02:57.430 --> 00:02:59.980\nLet me bring it up here on the console\nbecause sometimes it's easier\n\n58\n00:02:59.980 --> 00:03:01.700\nto see than just describe.\n\n59\n00:03:01.700 --> 00:03:06.040\nSo I'm in my AWS console and I'm gonna\ngo down here to Security, Identity and\n\n60\n00:03:06.040 --> 00:03:07.360\nCompliance and go into IAM.\n\n61\n00:03:07.360 --> 00:03:09.600\nAnd when you go in IAM,\n\n62\n00:03:09.600 --> 00:03:12.880\non the left side you're gonna see a list\nof various things that you can work with.\n\n63\n00:03:12.880 --> 00:03:15.740\nAnd I'll see Users, Groups, and Roles.\n\n64\n00:03:15.740 --> 00:03:17.680\nNot necessarily in the order that I said.\n\n65\n00:03:17.680 --> 00:03:18.810\nAnd so I can see them right here.\n\n66\n00:03:18.810 --> 00:03:22.470\nAnd if you look at my account,\nI've got some warnings here, right?\n\n67\n00:03:22.470 --> 00:03:23.900\nI need to delete.\n\n68\n00:03:23.900 --> 00:03:24.420\nNo, sorry.\n\n69\n00:03:24.420 --> 00:03:27.230\nI already deleted my root access key,\nso that's good.\n\n70\n00:03:27.230 --> 00:03:28.800\nBut I need to activate MFA.\n\n71\n00:03:28.800 --> 00:03:30.670\nI need to create individual IM users.\n\n72\n00:03:30.670 --> 00:03:32.920\nThere's things I need to do to\nmake this account more secure.\n\n73\n00:03:32.920 --> 00:03:35.910\nWell, this is my demo account, so\nit hasn't been around all that long.\n\n74\n00:03:35.910 --> 00:03:37.860\nSo it's not terribly secure right now.\n\n75\n00:03:37.860 --> 00:03:41.470\nBut when we implement in production,\nwe design a solution, we need it to be.\n\n76\n00:03:41.470 --> 00:03:44.450\nAnd one of the first things that you're\ngoing to want to do are to create\n\n77\n00:03:44.450 --> 00:03:44.960\nuser accounts.\n\n78\n00:03:44.960 --> 00:03:49.852\nSo you're not sharing accounts between\nthe developers or administrators, sys ops,\n\n79\n00:03:49.852 --> 00:03:53.403\ndev ops, whatever crazy term it\nis you use for your employees,\n\n80\n00:03:53.403 --> 00:03:55.091\nto be able to manage a system.\n\n81\n00:03:56.340 --> 00:03:58.380\nAnd when we go into users,\n\n82\n00:03:58.380 --> 00:04:01.630\nyou can see each of the user accounts that\nyou've created and how they'll be managed.\n\n83\n00:04:01.630 --> 00:04:06.110\nNow you always have one user account,\nat least one.\n\n84\n00:04:06.110 --> 00:04:08.080\nI know I'm saying that as you\nguys are looking at my screen and\n\n85\n00:04:08.080 --> 00:04:09.246\nit says no results.\n\n86\n00:04:09.246 --> 00:04:12.190\nWell, that one account is\nthe account I logged in with, right,\n\n87\n00:04:12.190 --> 00:04:13.650\nit's called the root account.\n\n88\n00:04:13.650 --> 00:04:17.350\nAnd the root account is always there,\nyou can't delete it and so\n\n89\n00:04:17.350 --> 00:04:19.910\nit doesn't show up here in the IAM users.\n\n90\n00:04:19.910 --> 00:04:24.280\nBecause technically it's not\na part of IAM, it's a part of AWS.\n\n91\n00:04:24.280 --> 00:04:26.800\nBut I am logged in with it,\nyou see my name up here, Don Pezet,\n\n92\n00:04:26.800 --> 00:04:28.570\nand I've got my account.\n\n93\n00:04:28.570 --> 00:04:31.680\nSo if I wanna manage my account,\nI go there to manage it.\n\n94\n00:04:31.680 --> 00:04:35.120\nIf I delete the root user, it basically\ndeletes the entire account, like canceling\n\n95\n00:04:35.120 --> 00:04:38.440\nyour account, so you can't do that,\nthat's why it doesn't show up here.\n\n96\n00:04:38.440 --> 00:04:43.050\nBut I can now create any number of\nother users, put them in here and\n\n97\n00:04:43.050 --> 00:04:45.894\nI could delete them or\ndisable them, reset their password.\n\n98\n00:04:45.894 --> 00:04:48.622\nI can do whatever I want and it doesn't\nmess with my whole account, right?\n\n99\n00:04:48.622 --> 00:04:49.850\nSo this is the ideal solution.\n\n100\n00:04:49.850 --> 00:04:52.830\nIf I want Daniel to help\nme manage this account,\n\n101\n00:04:52.830 --> 00:04:56.920\nI can add a user and\nI can come in and give them names.\n\n102\n00:04:56.920 --> 00:04:58.940\nMaybe I'll make them dlowrie.\n\n103\n00:04:58.940 --> 00:05:01.480\nAnd give him access.\n\n104\n00:05:01.480 --> 00:05:06.690\nNow when we give him access, usually we're\ngranting programmatic access, right?\n\n105\n00:05:06.690 --> 00:05:10.470\nThis is gonna be access for somebody\naccess our system indirectly through\n\n106\n00:05:10.470 --> 00:05:15.250\nthe command line or through an application\nof some sort through the SDK.\n\n107\n00:05:15.250 --> 00:05:17.070\nRight, that's how we are granting access.\n\n108\n00:05:17.070 --> 00:05:22.280\nBut if I need somebody to really help me\nas a full sys admin in this environment,\n\n109\n00:05:22.280 --> 00:05:25.390\nI might want to give them AWS\nmanagement console access also.\n\n110\n00:05:25.390 --> 00:05:28.394\nSo they can go to the web UI and\nmanage it.\n\n111\n00:05:28.394 --> 00:05:31.415\nNow, there's nothing you can do\nin the web UI that you can't do\n\n112\n00:05:31.415 --> 00:05:32.562\nfrom the command line.\n\n113\n00:05:32.562 --> 00:05:37.502\nAnd if you look, the programmatic\naccess does give you access to the API,\n\n114\n00:05:37.502 --> 00:05:40.670\nthe Command Line Interface, and the SDK.\n\n115\n00:05:40.670 --> 00:05:43.110\nSo you can do everything you need to do,\n\n116\n00:05:43.110 --> 00:05:46.620\nit's just the web interface that's\nbeing kind of restricted back, right?\n\n117\n00:05:46.620 --> 00:05:49.470\nSo I can choose to give then one or\nthe other or both.\n\n118\n00:05:49.470 --> 00:05:50.540\nI want Daniel to be able to have\n\n119\n00:05:50.540 --> 00:05:53.160\nfull access to the system\nto be able to work in it.\n\n120\n00:05:53.160 --> 00:05:56.960\nAnd when it generates his account,\nit's going to assign a password, right?\n\n121\n00:05:56.960 --> 00:05:59.830\nSo I'm gonna give him a password,\nand I can make one up or\n\n122\n00:05:59.830 --> 00:06:01.140\nI can have it autogenerate.\n\n123\n00:06:01.140 --> 00:06:03.370\nIf I do a custom one,\nI can type it in here.\n\n124\n00:06:03.370 --> 00:06:06.459\nAnd maybe I'll type one just so\nI know what it is.\n\n125\n00:06:07.750 --> 00:06:08.260\nAnd we've got it.\n\n126\n00:06:08.260 --> 00:06:10.450\nYou can hit show password to see it,\nwhatever so.\n\n127\n00:06:10.450 --> 00:06:11.460\nWe can create that account.\n\n128\n00:06:11.460 --> 00:06:14.130\nNow, I like this option here,\nrequire password to be reset.\n\n129\n00:06:14.130 --> 00:06:15.600\nI can tell Daniel the current password.\n\n130\n00:06:15.600 --> 00:06:16.820\nWhen he logs in, he can change it.\n\n131\n00:06:16.820 --> 00:06:18.040\nSo only he knows it.\n\n132\n00:06:18.040 --> 00:06:21.900\nEven I don't know it at that point, and\nthat gives us a little bit of security.\n\n133\n00:06:21.900 --> 00:06:25.400\nWhen we create a user, the user will\n\n134\n00:06:25.400 --> 00:06:28.360\nhave access to our environment through\nwhatever we've given them access to here,\n\n135\n00:06:28.360 --> 00:06:32.130\nwhatever options we chose, but they\nwon't actually be able to do anything.\n\n136\n00:06:32.130 --> 00:06:36.530\nAnd I'm gonna talk a little bit about\nauthentication and authorization\n\n137\n00:06:36.530 --> 00:06:40.410\nlater in this episode but what I'm really\nsetting up here is authentication.\n\n138\n00:06:40.410 --> 00:06:43.530\nAuthentication is proving\nyou are who you say you are.\n\n139\n00:06:43.530 --> 00:06:47.918\nIf Daniel has a user name and he has\na password, he's proved that he is Daniel.\n\n140\n00:06:47.918 --> 00:06:51.490\nGranted it's not the most locked\ntight method in the world but\n\n141\n00:06:51.490 --> 00:06:55.680\nit works because what if\nwe share passwords, right?\n\n142\n00:06:55.680 --> 00:06:57.270\nIf I give Daniel my password and\n\n143\n00:06:57.270 --> 00:07:01.680\nDaniel you log in as dpazet and\nmy password, what does the computer think?\n\n144\n00:07:01.680 --> 00:07:04.440\n&gt;&gt; The computer thinks that\nI'm Don Pezet at that point in time and\n\n145\n00:07:04.440 --> 00:07:06.880\nanything I do will be done as Don Pezet.\n\n146\n00:07:06.880 --> 00:07:10.520\nIf something I do is wrong,\nwell guess who's gonna get the blame?\n\n147\n00:07:10.520 --> 00:07:13.300\n&gt;&gt; That's right, and so that's one\nof the big flaws with user name and\n\n148\n00:07:13.300 --> 00:07:14.000\npassword combos.\n\n149\n00:07:14.000 --> 00:07:17.890\nSo we'll see alternatives\nto that here in a moment.\n\n150\n00:07:17.890 --> 00:07:21.710\nBut when you create a user, that's really\njust the first step on your journey and\n\n151\n00:07:21.710 --> 00:07:24.870\nthe very next screen is where it\ngets into setting permissions.\n\n152\n00:07:24.870 --> 00:07:28.760\nWhat do I wanna permit them to do and\nthat's what's called authorization.\n\n153\n00:07:28.760 --> 00:07:32.160\nI know it's Daniel,\nwhat is he authorized to do?\n\n154\n00:07:32.160 --> 00:07:34.030\nWhat is he allowed to do in the system?\n\n155\n00:07:34.030 --> 00:07:35.332\nBy default, not much, right?\n\n156\n00:07:35.332 --> 00:07:37.780\nHe's allowed to log in,\nthat's basically it.\n\n157\n00:07:37.780 --> 00:07:39.380\nBut now I need to grant\nhim access to things.\n\n158\n00:07:39.380 --> 00:07:41.627\nAnd here's where things get complex,\n\n159\n00:07:41.627 --> 00:07:44.631\nbecause if you remember\nback from our S3 episodes.\n\n160\n00:07:44.631 --> 00:07:49.091\nIn S3 you can create bucket\npolicies that grant permissions or\n\n161\n00:07:49.091 --> 00:07:52.383\nyou can create attached\npolicies to the user.\n\n162\n00:07:52.383 --> 00:07:55.657\nI could create a policy and stick it right\non Daniel's account and give him access.\n\n163\n00:07:55.657 --> 00:07:59.034\nBut those methods create some\nlittle challenges for us.\n\n164\n00:07:59.034 --> 00:08:01.824\nFor example,\nif I hire another sys admin to help me and\n\n165\n00:08:01.824 --> 00:08:05.550\nI want them to have the same permissions\nas Daniel, what do I have to do?\n\n166\n00:08:05.550 --> 00:08:10.070\nI've gotta go and edit Daniel's user, I've\ngotta copy his policy, edit the new user,\n\n167\n00:08:10.070 --> 00:08:13.070\nand paste the policy in,\nevery time I add somebody new.\n\n168\n00:08:13.070 --> 00:08:15.100\nAnd every time I wanna modify that policy,\nI've gotta go and\n\n169\n00:08:15.100 --> 00:08:17.370\nmodify every single user.\n\n170\n00:08:17.370 --> 00:08:19.790\nWell, that's pretty frustrating, right?\n\n171\n00:08:19.790 --> 00:08:22.810\nSo we can do centralized policies where\nI have one copy of the policy and\n\n172\n00:08:22.810 --> 00:08:24.560\nI just attach it to different people.\n\n173\n00:08:24.560 --> 00:08:28.650\nBut even better I can leverage groups and\nroles.\n\n174\n00:08:28.650 --> 00:08:32.040\nI can create a group called\nSys Administrators and\n\n175\n00:08:32.040 --> 00:08:33.580\nI can put Daniel in the group.\n\n176\n00:08:33.580 --> 00:08:36.549\nAnd I can give the group the permissions\nthat I want him to have.\n\n177\n00:08:37.650 --> 00:08:40.360\nAnd then any time I hire somebody new,\nI just stick them in the group, and\n\n178\n00:08:40.360 --> 00:08:42.300\nif I fire somebody,\nI can just take them out of the group.\n\n179\n00:08:42.300 --> 00:08:43.140\nI can do that.\n\n180\n00:08:43.140 --> 00:08:46.240\nWe can copy permissions\nright here from a user but\n\n181\n00:08:46.240 --> 00:08:51.000\nthat's not gonna help me with editing\ndown the road, using a group will.\n\n182\n00:08:51.000 --> 00:08:54.970\nNow this has been a super long answer to\nDaniel's short question about roles, and I\n\n183\n00:08:54.970 --> 00:08:58.410\nstill haven't talked about roles, so where\ndo roles factor in to all of this right?\n\n184\n00:08:58.410 --> 00:09:03.480\nWell, the groups are great for sticking\nusers in and giving them permissions and\n\n185\n00:09:03.480 --> 00:09:07.650\nthat's for users that are right\nhere in the system, right?\n\n186\n00:09:07.650 --> 00:09:10.950\nBut what about users that\naren't in my account?\n\n187\n00:09:10.950 --> 00:09:15.130\nHere let me just finish his user,\nso we'll get that created.\n\n188\n00:09:15.130 --> 00:09:17.190\nAnd now I've got him, right?\n\n189\n00:09:17.190 --> 00:09:22.450\nWhen I go back to my console and I go\nto groups and I create a group, right?\n\n190\n00:09:22.450 --> 00:09:24.770\nSo maybe I'll create a group\ncalled sys admins, or\n\n191\n00:09:24.770 --> 00:09:26.640\nwhatever it is that I wanna call it,\nright?\n\n192\n00:09:26.640 --> 00:09:29.290\nSo I'll create that group,\nI can attach permissions to it.\n\n193\n00:09:29.290 --> 00:09:31.990\nRight now I'm not gonna attach\nany permissions just yet, and\n\n194\n00:09:31.990 --> 00:09:32.680\nI'll create that group.\n\n195\n00:09:32.680 --> 00:09:34.360\nSo now I've got this\ngroup called sys admins.\n\n196\n00:09:35.390 --> 00:09:38.050\nAnd I can go in here and\nI can add users to the group.\n\n197\n00:09:38.050 --> 00:09:41.640\nAnd when I go to add users,\nthere's Daniel, right?\n\n198\n00:09:41.640 --> 00:09:44.560\nSo I can add him into the group and\nnow we get the permissions, right?\n\n199\n00:09:44.560 --> 00:09:46.860\nSo that's a great way to manage that for\nusers.\n\n200\n00:09:46.860 --> 00:09:48.940\nBut where do roles fall into that?\n\n201\n00:09:48.940 --> 00:09:51.290\nWell, if I go to roles,\n\n202\n00:09:51.290 --> 00:09:55.700\nI see a screen that looks pretty similar\nto groups and I can create a new role.\n\n203\n00:09:55.700 --> 00:09:58.140\nMaybe I create a role called sys admins.\n\n204\n00:09:58.140 --> 00:10:00.240\nAll right, so\nthere we go I'm creating one.\n\n205\n00:10:00.240 --> 00:10:02.630\nAnd then it ask for the role type,\nwhat kind of role is this?\n\n206\n00:10:02.630 --> 00:10:05.970\nThat is weird, I was expecting it\nto ask me to put users in there.\n\n207\n00:10:05.970 --> 00:10:09.350\nWell, roles are not normally used for\nusers.\n\n208\n00:10:09.350 --> 00:10:12.120\nRoles are typically used to applications.\n\n209\n00:10:12.120 --> 00:10:15.570\nIf I have an application that\nneeds to be able to connect up and\n\n210\n00:10:15.570 --> 00:10:18.840\nperform some kind of action,\nit needs to authenticate, right?\n\n211\n00:10:18.840 --> 00:10:22.770\nWell, you don't wanna give an application\na username and a password.\n\n212\n00:10:22.770 --> 00:10:25.900\nBecause that means you gotta store the\nusername and password in the application\n\n213\n00:10:25.900 --> 00:10:28.020\nand somebody gets a copy of\nthat application could try and\n\n214\n00:10:28.020 --> 00:10:30.540\nbreak into it and\nlift those credentials right out.\n\n215\n00:10:30.540 --> 00:10:33.310\nAnd once they got the credentials then\nthey could attend to log in as that\n\n216\n00:10:33.310 --> 00:10:35.070\napplication and do all sort of things.\n\n217\n00:10:35.070 --> 00:10:38.705\nSo instead we can create\na role around the application.\n\n218\n00:10:38.705 --> 00:10:41.530\nThat says when the program runs and\n\n219\n00:10:41.530 --> 00:10:45.500\nit connects here's it's role in\nwhat that program is allowed to do.\n\n220\n00:10:45.500 --> 00:10:49.920\nBut if somebody were to take those\ncredentials outside of the application,\n\n221\n00:10:49.920 --> 00:10:50.520\nthey don't work.\n\n222\n00:10:50.520 --> 00:10:52.510\nIt only works when it's\ninside of the application,\n\n223\n00:10:52.510 --> 00:10:53.760\nthat's the role assigned to it.\n\n224\n00:10:53.760 --> 00:10:55.560\nSo roles are great for that and\n\n225\n00:10:55.560 --> 00:10:58.885\nthat's why it's starting to ask what\nkind of service this is going to be?\n\n226\n00:10:58.885 --> 00:11:02.660\nAnd am I providing it\naccess to a service or\n\n227\n00:11:02.660 --> 00:11:05.810\nto an identity provider or\nto cross account access.\n\n228\n00:11:05.810 --> 00:11:10.920\nNow service roles are great for\napplications and other AWS services.\n\n229\n00:11:10.920 --> 00:11:15.400\nCross account access, that's when I wanna\ngive access to somebody who is not in my\n\n230\n00:11:15.400 --> 00:11:17.550\nAWS account but\nin another AWS account, right?\n\n231\n00:11:17.550 --> 00:11:20.510\nThis is important because if you are,\n\n232\n00:11:20.510 --> 00:11:25.660\nlet's say you're a contractor and I hire\nyou to come and develop a solution for me.\n\n233\n00:11:25.660 --> 00:11:29.670\nI need you to come and develop\nan auto scaling web front end for me.\n\n234\n00:11:29.670 --> 00:11:30.600\nAll right, great.\n\n235\n00:11:30.600 --> 00:11:34.910\nWell you already have an Amazon account,\nI've got an AWS account.\n\n236\n00:11:34.910 --> 00:11:39.570\nI need the servers to be on my AWS account\nso I could create a user account for\n\n237\n00:11:39.570 --> 00:11:41.220\nyou and you could log in my system.\n\n238\n00:11:41.220 --> 00:11:44.040\nBut now you've got two accounts,\nyou've got your own account and\n\n239\n00:11:44.040 --> 00:11:45.470\nnow you've got account of mine.\n\n240\n00:11:45.470 --> 00:11:50.290\nWould it be nice if I could just\ncreated the account you already have\n\n241\n00:11:50.290 --> 00:11:51.970\naccessed to my system.\n\n242\n00:11:51.970 --> 00:11:55.020\nAn so I could do, cross account access and\n\n243\n00:11:55.020 --> 00:12:00.630\nI could specify access between me and\nother AWS accounts that I own,\n\n244\n00:12:00.630 --> 00:12:03.070\nwhich means I'll be able to\nconfigure both sides at once.\n\n245\n00:12:03.070 --> 00:12:07.010\nOr me and\na third party AWS account like yours.\n\n246\n00:12:07.010 --> 00:12:10.090\nNow I can only do my side,\nyou'll have to do your side, and\n\n247\n00:12:10.090 --> 00:12:12.070\nthen I'm able to provide\nthose permissions.\n\n248\n00:12:12.070 --> 00:12:16.200\nNow you can use the account you\nalready have to log into my system and\n\n249\n00:12:16.200 --> 00:12:18.550\nadd the front end,\nconfigure all to scaling,\n\n250\n00:12:18.550 --> 00:12:20.550\nwhatever it is that you're going to do,\nright?\n\n251\n00:12:20.550 --> 00:12:24.340\nYou're not a user of my system, so you're\nnot in a group, you're in a role, and\n\n252\n00:12:24.340 --> 00:12:26.900\nthe role will control\nwhat access you have.\n\n253\n00:12:26.900 --> 00:12:28.230\nThe identity provider,\n\n254\n00:12:28.230 --> 00:12:30.980\nhere's where we connect to some\nother kind of authentication.\n\n255\n00:12:30.980 --> 00:12:35.770\nAnd I can usually leave it at that,\nat some other, because it supports SAML.\n\n256\n00:12:35.770 --> 00:12:39.900\nAnd SAML is a open standard for\ndoing single sign on.\n\n257\n00:12:39.900 --> 00:12:42.160\nAnd darn near everyone supports it.\n\n258\n00:12:42.160 --> 00:12:45.980\nAnd the people who don't support it are\nsupported by products like Shibboleth that\n\n259\n00:12:45.980 --> 00:12:50.780\nlet us do identity synchronization and\nso you can make them SAML compliant.\n\n260\n00:12:50.780 --> 00:12:53.740\nSo with that you could be\nauthenticating people against anything.\n\n261\n00:12:53.740 --> 00:12:58.310\nNot just another AWS account, but\nmaybe you have an on-premises directory.\n\n262\n00:12:58.310 --> 00:13:01.630\nAnd your people to use your\nMicrosoft directory accounts\n\n263\n00:13:01.630 --> 00:13:04.430\nto login to the AWS\ncloud access resources.\n\n264\n00:13:04.430 --> 00:13:07.130\nYou can do that all right, and\nthat would be identity provided.\n\n265\n00:13:07.130 --> 00:13:09.540\nThis is like setting up\na federation when you do this.\n\n266\n00:13:09.540 --> 00:13:12.790\nIt's a little more complex to get\nset up but once it's in place\n\n267\n00:13:12.790 --> 00:13:16.050\nit's one less user account for\npeople to use when accessing the system.\n\n268\n00:13:16.050 --> 00:13:19.120\n&gt;&gt; All right, Don, so we've covered\nthe different types of users that we have,\n\n269\n00:13:19.120 --> 00:13:22.450\ngroups, roles, all good stuff we\nneed to know how to work with that.\n\n270\n00:13:22.450 --> 00:13:25.700\nBut now let's talk about\nauthentication process practically.\n\n271\n00:13:25.700 --> 00:13:26.830\nHow does that work itself out?\n\n272\n00:13:26.830 --> 00:13:28.460\nHow do we authenticate to the system?\n\n273\n00:13:28.460 --> 00:13:31.820\n&gt;&gt; All right, so when we authenticate,\nI've kind of already shown the most basic\n\n274\n00:13:31.820 --> 00:13:33.750\nway, right,\nwhich is username and password.\n\n275\n00:13:33.750 --> 00:13:36.310\nWhen you connect up, you provide\na username and password and that's that.\n\n276\n00:13:36.310 --> 00:13:39.120\nAnd I'm using the web UI here, but\nwe can do it with an application or\n\n277\n00:13:39.120 --> 00:13:40.740\nthe SDK or whatever.\n\n278\n00:13:40.740 --> 00:13:45.310\nBut user name and password is not\nthe most secure method of connecting.\n\n279\n00:13:45.310 --> 00:13:48.270\nThere's other ways to do it that\nare a little better for us.\n\n280\n00:13:48.270 --> 00:13:51.350\nAnd there's things like\nusing account keys, right?\n\n281\n00:13:51.350 --> 00:13:55.700\nYou probably noticed, let me cancel out of\nthis and get back to my main IM screen.\n\n282\n00:13:56.740 --> 00:13:58.170\nWhen I was on my dashboard,\n\n283\n00:13:58.170 --> 00:14:02.660\nit said that I needed to delete\nmy root access keys, okay?\n\n284\n00:14:02.660 --> 00:14:03.730\nAnd I've already done that.\n\n285\n00:14:03.730 --> 00:14:05.690\nWell, what are root access keys?\n\n286\n00:14:05.690 --> 00:14:07.810\nWell when you log in the first\ntime you have a username and\n\n287\n00:14:07.810 --> 00:14:11.290\na password, and you get a root access key.\n\n288\n00:14:11.290 --> 00:14:14.500\nIt's two little keys that\ncan be used via an API and\n\n289\n00:14:14.500 --> 00:14:19.660\nthey have access to the entire account,\nwhich makes them dangerous keys.\n\n290\n00:14:19.660 --> 00:14:23.490\nWell what they found was that a lot\nof people were creating accounts and\n\n291\n00:14:23.490 --> 00:14:24.700\nthey were developing applications,\n\n292\n00:14:24.700 --> 00:14:26.490\nthey were putting the root\naccess key in the application,\n\n293\n00:14:26.490 --> 00:14:29.170\nit had access to everything,\nthat's not good, right?\n\n294\n00:14:29.170 --> 00:14:31.200\nBecause if that application\ngets compromised and\n\n295\n00:14:31.200 --> 00:14:33.850\nthe keys get lifted out of it,\nyour whole account gets compromised.\n\n296\n00:14:33.850 --> 00:14:35.740\nThere was a big to do about it,\n\n297\n00:14:35.740 --> 00:14:39.250\nbecause some people were putting\nthese keys in their applications, and\n\n298\n00:14:39.250 --> 00:14:42.420\nthey were storing the source code\nof their applications in GitHub.\n\n299\n00:14:42.420 --> 00:14:45.200\nAnd if you do a private repository\nthat's not a big deal, but\n\n300\n00:14:45.200 --> 00:14:46.980\na lot of them had public repositories.\n\n301\n00:14:46.980 --> 00:14:49.810\nAnd they were being Google indexed,\nand you could do a Google search and\n\n302\n00:14:49.810 --> 00:14:53.331\nyou would find people's root\naccess keys for AWS accounts.\n\n303\n00:14:53.331 --> 00:14:56.341\nYou could login and start spinning up\nBitCoin miners or whatever, right?\n\n304\n00:14:56.341 --> 00:14:59.183\nAnd that was a big problem, so\nAmazon cracked down on that a good bit,\n\n305\n00:14:59.183 --> 00:15:02.515\nthat's why we get warnings like this and\nI mean, you should be using common sense\n\n306\n00:15:02.515 --> 00:15:06.420\nwith this stuff, and not store your keys\nsomewhere public, but it can happen.\n\n307\n00:15:06.420 --> 00:15:10.000\nSo when we go through and\nwe start working with our accounts,\n\n308\n00:15:10.000 --> 00:15:12.060\nour individual accounts,\nor our group accounts, or\n\n309\n00:15:12.060 --> 00:15:14.440\nwhatever, we can generate\nthose access keys.\n\n310\n00:15:14.440 --> 00:15:19.350\nAnd when you generate an access key,\nthe key can be use by an application but\n\n311\n00:15:19.350 --> 00:15:22.980\nit's important to limit what\nthat key is able to do.\n\n312\n00:15:22.980 --> 00:15:25.810\nSo that's one of things that we\nneed to keep in mind when we setup\n\n313\n00:15:25.810 --> 00:15:28.280\nan authentication mechanism.\n\n314\n00:15:28.280 --> 00:15:32.700\nUsername and password is one thing but\nusing access keys,\n\n315\n00:15:32.700 --> 00:15:36.130\nthey're nice, long, strong characters\nthat are kind of difficult for\n\n316\n00:15:36.130 --> 00:15:39.110\npeople to memorize,\nwhich makes them a little more secure.\n\n317\n00:15:39.110 --> 00:15:41.740\nSo we do still have that functionality\nthat you can generate access\n\n318\n00:15:41.740 --> 00:15:42.640\nkeys like that.\n\n319\n00:15:42.640 --> 00:15:45.600\nWhen I take a look at Daniel's account,\nfor example.\n\n320\n00:15:45.600 --> 00:15:47.630\nThis is the account that I just made for\nhim.\n\n321\n00:15:47.630 --> 00:15:49.063\nAnd I specify to use a name and\na password.\n\n322\n00:15:49.063 --> 00:15:52.305\nWell, if I go under security\ncredentials right here,\n\n323\n00:15:52.305 --> 00:15:57.025\nI can see his sign in credentials, which\nis really referring to his username and\n\n324\n00:15:57.025 --> 00:15:59.645\npassword But\nI can also see his access keys.\n\n325\n00:15:59.645 --> 00:16:04.435\nOkay, now it says that he's got\nan access key ID right here, and\n\n326\n00:16:04.435 --> 00:16:07.540\nit's active and it's running.\n\n327\n00:16:07.540 --> 00:16:08.319\nHere's the problem.\n\n328\n00:16:08.319 --> 00:16:11.471\nThe access key by itself\nisn't actually useful.\n\n329\n00:16:11.471 --> 00:16:12.756\nThis is identifies the key.\n\n330\n00:16:12.756 --> 00:16:13.959\nThis is access key ID.\n\n331\n00:16:13.959 --> 00:16:16.663\nThe key itself is not displayed.\n\n332\n00:16:16.663 --> 00:16:19.040\nHe's gonna see that\nthe first time he logs in.\n\n333\n00:16:19.040 --> 00:16:22.990\nIt's gonna give him one\nopportunity to see that key.\n\n334\n00:16:22.990 --> 00:16:26.220\nAnd he needs to copy it down somewhere\nsafe, and store it in a vault, and\n\n335\n00:16:26.220 --> 00:16:29.360\nnever let anybody get it,\nand it's now tied to him.\n\n336\n00:16:29.360 --> 00:16:32.670\nBut what if he's working on\nmore than one application?\n\n337\n00:16:32.670 --> 00:16:34.610\nI wanna make sure that when\nhe creates applications,\n\n338\n00:16:34.610 --> 00:16:37.510\nhe can create keys that he can\nidentify what they're tied to.\n\n339\n00:16:37.510 --> 00:16:40.020\nAnd that way, if an application gets\ncompromised, he can turn the key off.\n\n340\n00:16:40.020 --> 00:16:43.410\nNotice how this key says it's active,\nand I can make it inactive.\n\n341\n00:16:43.410 --> 00:16:45.840\nHe can come in and\ncreate another access key.\n\n342\n00:16:45.840 --> 00:16:46.970\nAnd it's gonna create a new one.\n\n343\n00:16:46.970 --> 00:16:48.855\nHere, it's successfully created one.\n\n344\n00:16:48.855 --> 00:16:53.730\nAnd here is the access key ID, and my one\nchance to see that secret access key.\n\n345\n00:16:53.730 --> 00:16:55.929\nAnd if I show that, that's a nice long,\n\n346\n00:16:55.929 --> 00:17:00.399\njumbled character there that's as close\nto random as we're gonna get one of these\n\n347\n00:17:00.399 --> 00:17:04.770\npasswords that's designed to be very\nvery difficult to grute force and guess.\n\n348\n00:17:04.770 --> 00:17:07.140\nOkay, he can copy that down.\n\n349\n00:17:07.140 --> 00:17:08.130\nAnd he can use it for\nwhatever purpose he's got.\n\n350\n00:17:08.130 --> 00:17:11.770\nNow, it's gonna have the same\npermissions as his account.\n\n351\n00:17:11.770 --> 00:17:14.040\nIf it's actually creating an application,\n\n352\n00:17:14.040 --> 00:17:17.410\nhe needs to create access keys\nseparately as a separate account for\n\n353\n00:17:17.410 --> 00:17:20.260\nthat application so he can change\nthe permissions on it, right?\n\n354\n00:17:20.260 --> 00:17:22.545\nBut this will have the same\npermissions as his user account.\n\n355\n00:17:22.545 --> 00:17:25.470\nHe can use it in\nthe application if it needs to,\n\n356\n00:17:25.470 --> 00:17:26.970\nlike in the command line interface.\n\n357\n00:17:26.970 --> 00:17:30.310\nAnd the CLI can now authenticate\nas him using that key.\n\n358\n00:17:30.310 --> 00:17:32.938\nAnd if he ever worries about\ngetting compromised, for example,\n\n359\n00:17:32.938 --> 00:17:36.810\nmaybe he had it on his laptop and he was\nusing that key and the laptop got stolen.\n\n360\n00:17:36.810 --> 00:17:38.560\nShoot my account got comprised, right?\n\n361\n00:17:38.560 --> 00:17:39.440\nWell, no.\n\n362\n00:17:39.440 --> 00:17:41.360\nThat one key got compromised.\n\n363\n00:17:41.360 --> 00:17:45.490\nSo you come in here, you find the key and\nyou make it inactive.\n\n364\n00:17:45.490 --> 00:17:47.660\nAnd there you go.\nNow your account is fine.\n\n365\n00:17:47.660 --> 00:17:48.810\nYou still have your account.\n\n366\n00:17:48.810 --> 00:17:49.630\nYou still have access.\n\n367\n00:17:49.630 --> 00:17:51.300\nYour other keys are fine.\n\n368\n00:17:51.300 --> 00:17:52.240\nYou can generate.\n\n369\n00:17:53.330 --> 00:17:57.390\nMaybe Daniel has a laptop and a desktop\nat the office, and a desktop at home, and\n\n370\n00:17:57.390 --> 00:17:58.820\nhe develops on all three.\n\n371\n00:17:58.820 --> 00:18:02.030\nWell, he can generate three keys,\nuse a separate keys on each one.\n\n372\n00:18:02.030 --> 00:18:04.390\nAnd then wipe them out as he goes.\n\n373\n00:18:04.390 --> 00:18:07.550\nThe other thing is, you can do what's\ncalled, is a best practice here,\n\n374\n00:18:07.550 --> 00:18:09.450\nis key rotation.\n\n375\n00:18:09.450 --> 00:18:13.400\nKey rotation is, if you decide the key\nis starting to be a little old, right?\n\n376\n00:18:13.400 --> 00:18:17.510\nThe older a key is, the more time\nan attacker has had to try and\n\n377\n00:18:17.510 --> 00:18:18.390\nbrute force it.\n\n378\n00:18:18.390 --> 00:18:19.840\nSo we wanna change them.\n\n379\n00:18:19.840 --> 00:18:21.520\nBut changing a key is annoying,\n\n380\n00:18:21.520 --> 00:18:24.020\nbecause anything that was using\nthat key is now broken, right.\n\n381\n00:18:24.020 --> 00:18:25.240\nI've got to go and update it everywhere.\n\n382\n00:18:25.240 --> 00:18:29.490\nSo what you can do is you can say you know\nwhat, I want a new key every three months.\n\n383\n00:18:29.490 --> 00:18:31.990\nSo I create a key and I start using it.\n\n384\n00:18:31.990 --> 00:18:35.080\nAnd at two months, I create a new key.\n\n385\n00:18:35.080 --> 00:18:37.550\nTechnically, I've got\ntwo keys at that point.\n\n386\n00:18:37.550 --> 00:18:41.200\nAnd for one month,\nI go running two keys simultaneously and\n\n387\n00:18:41.200 --> 00:18:43.230\nI slowly move everything over, right?\n\n388\n00:18:43.230 --> 00:18:46.163\nSo now at the end of three months\nI can turn off my old key, and\n\n389\n00:18:46.163 --> 00:18:47.589\nI'm on the new key, right?\n\n390\n00:18:47.589 --> 00:18:49.240\nI just rotated keys.\n\n391\n00:18:49.240 --> 00:18:51.960\nAnd both overlap for\na little while, enough for\n\n392\n00:18:51.960 --> 00:18:55.390\nme to make the transition smoothly,\nand then we move on from there.\n\n393\n00:18:55.390 --> 00:18:58.250\nDoing key rotation like thiat\nis possible because you can have\n\n394\n00:18:58.250 --> 00:18:59.160\nmore than one key like this.\n\n395\n00:18:59.160 --> 00:19:02.130\nAnd it all authenticates to your\naccount when it's created this way.\n\n396\n00:19:02.130 --> 00:19:05.570\n&gt;&gt; Don are we also able to do something\nlike multifactor authentication?\n\n397\n00:19:05.570 --> 00:19:08.100\n&gt;&gt; Yeah, absolutely, and\nis that on this screen?\n\n398\n00:19:08.100 --> 00:19:09.820\nWhere is that?\nHere it is.\n\n399\n00:19:09.820 --> 00:19:13.755\nIf we look at the account a little higher\nhere, I'll see assigned MFA device,\n\n400\n00:19:13.755 --> 00:19:14.480\nno, okay?\n\n401\n00:19:15.600 --> 00:19:16.340\nWhat is MFA?\n\n402\n00:19:16.340 --> 00:19:18.680\nMFA is multi-factor authentication.\n\n403\n00:19:18.680 --> 00:19:22.520\nSometimes you'll hear it called 2FA or\ndual-factor authentication.\n\n404\n00:19:22.520 --> 00:19:25.580\nMost people moved away from that\nbecause you might have more than two\n\n405\n00:19:25.580 --> 00:19:26.440\nforms of authentication.\n\n406\n00:19:26.440 --> 00:19:27.805\nCuz you might have a backup, right?\n\n407\n00:19:27.805 --> 00:19:30.905\nLike where it sends a text to your\nphone or something as a backup.\n\n408\n00:19:30.905 --> 00:19:33.388\nSo now you technically have\na third form of authentication.\n\n409\n00:19:33.388 --> 00:19:37.945\nBut MFA is where we configure a code that\nis used in addition to your username and\n\n410\n00:19:37.945 --> 00:19:42.175\npassword or in addition to your access\nkey to authenticate you, right?\n\n411\n00:19:42.175 --> 00:19:43.255\nSo you have more than one form.\n\n412\n00:19:43.255 --> 00:19:44.773\nI use it on my own account.\n\n413\n00:19:44.773 --> 00:19:46.245\nI think I showed this\nin an earlier episode,\n\n414\n00:19:46.245 --> 00:19:50.850\nbut let me let me bring up my\nlittle MFA that I have on my phone.\n\n415\n00:19:50.850 --> 00:19:55.540\nSo that when I log in,\nI punch in a user name and a password, and\n\n416\n00:19:55.540 --> 00:19:58.180\nthen it prompts me for my MFA code.\n\n417\n00:19:58.180 --> 00:20:02.160\nAnd the code is just whatever is\nbeing displayed on my phone, or\n\n418\n00:20:02.160 --> 00:20:07.490\nwhatever device I'm using at that time,\nand the code actually changes.\n\n419\n00:20:07.490 --> 00:20:08.520\nSorry.\nI know it looks like I'm\n\n420\n00:20:08.520 --> 00:20:10.581\ntexting during the show, but-\n&gt;&gt; [LAUGH]\n\n421\n00:20:10.581 --> 00:20:12.450\n&gt;&gt; Let me see if I can get this\n\n422\n00:20:12.450 --> 00:20:13.517\npulled up here.\n\n423\n00:20:13.517 --> 00:20:17.370\nAnd normally I'm able to focus on\na little bit more, but there we go.\n\n424\n00:20:17.370 --> 00:20:19.420\nSo I can pull this up and I've got a code.\n\n425\n00:20:19.420 --> 00:20:22.830\nAnd right now, it's showing 041 446,\nand then it just changed to 935 394.\n\n426\n00:20:22.830 --> 00:20:26.640\nIt's changing every 30 seconds.\n\n427\n00:20:26.640 --> 00:20:28.450\nAnd when I log in,\nI've gotta use that code.\n\n428\n00:20:28.450 --> 00:20:30.610\nWell, two neat things about that code.\n\n429\n00:20:30.610 --> 00:20:32.310\nOne, it's only good for 30 seconds.\n\n430\n00:20:32.310 --> 00:20:33.880\nSo if somebody runs a key logger and\n\n431\n00:20:33.880 --> 00:20:37.700\ncatches my keystrokes,\nit would only be 30 seconds of access.\n\n432\n00:20:37.700 --> 00:20:42.210\nBut the flip side of that is,\nit can only be used once.\n\n433\n00:20:42.210 --> 00:20:45.540\nSo if somebody's running a key logger,\nthy captured me typing it in.\n\n434\n00:20:45.540 --> 00:20:46.500\nI just used it.\n\n435\n00:20:46.500 --> 00:20:47.660\nI don't care.\nThey can have it.\n\n436\n00:20:47.660 --> 00:20:49.950\nI don't mind holding my phone\nup on camera like this, so\n\n437\n00:20:49.950 --> 00:20:53.040\nyou guys can see what that code was\nbecause even if you were watching it live,\n\n438\n00:20:53.040 --> 00:20:55.410\nif i just used that code,\nit's been burned.\n\n439\n00:20:55.410 --> 00:20:57.895\nIt's like a burner phone\nin all the crime movies.\n\n440\n00:20:57.895 --> 00:20:59.825\nSo you use it once,\nthen you throw it away.\n\n441\n00:20:59.825 --> 00:21:00.815\nThat codes been used.\n\n442\n00:21:00.815 --> 00:21:02.420\n&gt;&gt; It's great for AWS and selling meth.\n\n443\n00:21:02.420 --> 00:21:03.645\n[LAUGH]\n&gt;&gt; Yeah, absolutely.\n\n444\n00:21:03.645 --> 00:21:05.472\nI mean,\nyou gotta make money where you can.\n\n445\n00:21:05.472 --> 00:21:06.545\n&gt;&gt; That's right.\n\n446\n00:21:06.545 --> 00:21:08.945\n&gt;&gt; So what we've got is a great\nway to lock things down and\n\n447\n00:21:08.945 --> 00:21:11.645\nmake it where key loggers are no\nlonger effective on your account.\n\n448\n00:21:11.645 --> 00:21:13.445\nSo MFA is a very valuable thing.\n\n449\n00:21:13.445 --> 00:21:15.789\nWe can turn it on our accounts as\na extra form of authentication.\n\n450\n00:21:16.870 --> 00:21:20.980\nAll right, so once we've authenticated,\nwe've gotten into our system.\n\n451\n00:21:20.980 --> 00:21:22.570\nNow we get into authorization.\n\n452\n00:21:22.570 --> 00:21:24.470\nAnd on the authorization side,\n\n453\n00:21:24.470 --> 00:21:29.280\nthis is where we have to find out\nwhat people are allowed to do, right?\n\n454\n00:21:29.280 --> 00:21:30.700\nI created an account for Daniel.\n\n455\n00:21:30.700 --> 00:21:32.180\nI created some access keys for Daniel.\n\n456\n00:21:32.180 --> 00:21:34.230\nThey're here, they're in the system,\nthey're live.\n\n457\n00:21:34.230 --> 00:21:35.540\nBut what can he do?\n\n458\n00:21:36.840 --> 00:21:37.800\nNothing, right?\n\n459\n00:21:37.800 --> 00:21:38.960\nHe can log in, and that's it.\n\n460\n00:21:38.960 --> 00:21:40.960\nThat's all I've given him access to do.\n\n461\n00:21:40.960 --> 00:21:46.130\nSo he'll have some read access anywhere\nwhere I've assigned everyone read.\n\n462\n00:21:46.130 --> 00:21:48.050\nOn S3 buckets, he'll have that.\n\n463\n00:21:48.050 --> 00:21:51.460\nBut, beyond that,\nI'm going to need to give him access.\n\n464\n00:21:51.460 --> 00:21:53.680\nI need to authorize him\nto perform activities.\n\n465\n00:21:53.680 --> 00:21:56.690\nAnd the way we do that\nis through policies.\n\n466\n00:21:56.690 --> 00:22:00.820\nNow you'll find policies spread all\nthroughout AWS.There's bucket policies on\n\n467\n00:22:00.820 --> 00:22:04.950\nS3 buckets, there's policies assigned\nto groups, policies assigned to rows,\n\n468\n00:22:04.950 --> 00:22:06.839\npolicies attached directly to user.\n\n469\n00:22:06.839 --> 00:22:09.686\nThere's pre-built policies\nthat come from Amazon.\n\n470\n00:22:09.686 --> 00:22:11.775\nThere's custom ones that\nwe build ourselves.\n\n471\n00:22:11.775 --> 00:22:13.840\nIt's policy craziness, right?\n\n472\n00:22:13.840 --> 00:22:18.600\nAnd this allows you to get the granularity\nyou need to manage your environment.\n\n473\n00:22:18.600 --> 00:22:22.350\nAnd it's up to you to create the policies\nthat match what your needs are.\n\n474\n00:22:22.350 --> 00:22:25.310\nBut the key thing to remember\nis to only give people\n\n475\n00:22:25.310 --> 00:22:27.980\nthe bare minimum level of access.\n\n476\n00:22:27.980 --> 00:22:30.510\nGive people as little\naccess as possible for\n\n477\n00:22:30.510 --> 00:22:32.570\nthem to do whatever it is\nthey're supposed to do.\n\n478\n00:22:32.570 --> 00:22:34.680\nIf you give them more access\nthan they're supposed to have,\n\n479\n00:22:34.680 --> 00:22:38.820\nlike if you share your root credentials,\nthey could go in and make mistakes.\n\n480\n00:22:38.820 --> 00:22:40.530\nMaybe not malicious, maybe malicious.\n\n481\n00:22:40.530 --> 00:22:42.040\nBut maybe not.\nMaybe it's just accidental.\n\n482\n00:22:42.040 --> 00:22:43.410\nLike hey, I saw this this instance.\n\n483\n00:22:43.410 --> 00:22:45.170\nI didn't think you were using it anymore,\nso I terminated it.\n\n484\n00:22:46.180 --> 00:22:47.408\nYou can't just turn that back on?\n\n485\n00:22:47.408 --> 00:22:49.730\nMy bad.\n\n486\n00:22:49.730 --> 00:22:52.420\nYou wanted those snapshots retained for\nthree years?\n\n487\n00:22:52.420 --> 00:22:53.840\nI didn't know.\n&gt;&gt; They were taking up a lot of\n\n488\n00:22:53.840 --> 00:22:54.540\nspace, Don.\n\n489\n00:22:54.540 --> 00:22:55.160\n&gt;&gt; Yeah.\n&gt;&gt; [LAUGH]\n\n490\n00:22:55.160 --> 00:22:56.930\n&gt;&gt; I saw your glacier stuff.\n\n491\n00:22:56.930 --> 00:22:58.800\nI didn't think you really needed that.\n\n492\n00:22:58.800 --> 00:23:00.300\nI was gonna push it into S3.\n\n493\n00:23:00.300 --> 00:23:02.040\nThat kind of stuff happens, right?\n\n494\n00:23:02.040 --> 00:23:04.980\nAnd it shouldn't happen\nif you've only given\n\n495\n00:23:04.980 --> 00:23:06.610\npeople the access they're\nsupposed to have.\n\n496\n00:23:06.610 --> 00:23:10.379\nSo we need to make sure that we do that,\nthat we create policies.\n\n497\n00:23:10.379 --> 00:23:14.600\nAnd looking at my IAM screen, you'll\nnotice over here where I've got policies.\n\n498\n00:23:14.600 --> 00:23:17.600\nAnd if I take a look at the policies,\nwe can create these policies and\n\n499\n00:23:17.600 --> 00:23:19.000\nget them put in place.\n\n500\n00:23:19.000 --> 00:23:25.860\nAnd when I hit get started, I can see\nI've got a ton of policies already.\n\n501\n00:23:25.860 --> 00:23:27.269\nThese are default policies?\n\n502\n00:23:27.269 --> 00:23:28.246\n&gt;&gt; Exactly.\nI did not create,\n\n503\n00:23:28.246 --> 00:23:30.649\nactually I don't think I\ncreated any of these, did I?\n\n504\n00:23:30.649 --> 00:23:31.657\n&gt;&gt; Don's been busy.\n\n505\n00:23:31.657 --> 00:23:34.740\n[LAUGH]\n&gt;&gt; Sometimes you'd think that,\n\n506\n00:23:34.740 --> 00:23:39.250\nbut if you notice most of these under\nattached entities has zero, right?\n\n507\n00:23:39.250 --> 00:23:40.140\nThere's nobody attached.\n\n508\n00:23:40.140 --> 00:23:43.930\nThese are all ones that have been\ncreated by Amazon for me, and\n\n509\n00:23:43.930 --> 00:23:45.550\nI'm more than welcome to use them.\n\n510\n00:23:45.550 --> 00:23:46.930\nBut I didn't make them.\n\n511\n00:23:46.930 --> 00:23:52.496\nAnd if you look, there's things like API\ngateway access or Athena full access.\n\n512\n00:23:52.496 --> 00:23:53.535\nI don't even use Athena.\n\n513\n00:23:53.535 --> 00:23:56.608\nEC2, we'll see the container registry and\nother things.\n\n514\n00:23:56.608 --> 00:23:58.444\nEC2 full access.\n\n515\n00:23:58.444 --> 00:24:01.926\nI wanna give somebody full\naccess to my EC2 environment.\n\n516\n00:24:01.926 --> 00:24:03.710\nSo I can come in and I can do that.\n\n517\n00:24:03.710 --> 00:24:06.050\nWell, you certainly can.\n\n518\n00:24:06.050 --> 00:24:08.860\nIf the default policy matches\nwhat you wanna achieve,\n\n519\n00:24:08.860 --> 00:24:10.330\njust use the default policy.\n\n520\n00:24:10.330 --> 00:24:13.440\nIf I want Daniel to have\nfull access to EC2,\n\n521\n00:24:13.440 --> 00:24:18.130\nI just need to attach this policy\nto him and he'll have it, right?\n\n522\n00:24:18.130 --> 00:24:20.514\nOr I can attach this policy to a group,\nand\n\n523\n00:24:20.514 --> 00:24:24.136\nthen anybody I put in that group\nwould have full access to EC2.\n\n524\n00:24:24.136 --> 00:24:27.050\nAnd that's pretty heavy handed.\n\n525\n00:24:27.050 --> 00:24:28.350\nThat's full access.\n\n526\n00:24:28.350 --> 00:24:31.730\nI usually wanna be a little\nmore specific than that, right?\n\n527\n00:24:31.730 --> 00:24:36.290\nBut if the default policies,\nthese ones that are created by Amazon,\n\n528\n00:24:36.290 --> 00:24:38.720\nthey match what I want, then life is good.\n\n529\n00:24:38.720 --> 00:24:40.220\nBut notice how it's read-only.\n\n530\n00:24:40.220 --> 00:24:41.140\nI can't edit this.\n\n531\n00:24:41.140 --> 00:24:42.460\nI can't change it.\n\n532\n00:24:42.460 --> 00:24:45.498\nSo if I wanna create something custom,\nthen I need to do that.\n\n533\n00:24:45.498 --> 00:24:48.035\nI need to get in and\ncreate my own custom policy.\n\n534\n00:24:48.035 --> 00:24:50.874\nAnd we can certainly do that to\nmatch whatever our needs are.\n\n535\n00:24:50.874 --> 00:24:55.438\nNow before you get started with creating\ncustom policy, we need to understand all\n\n536\n00:24:55.438 --> 00:24:59.885\nthe elements that make up a policy and\nhow they work and what's inside of there.\n\n537\n00:24:59.885 --> 00:25:02.109\nI know I'm short on time on this episode,\nand I wanna make sure I do it right.\n\n538\n00:25:02.109 --> 00:25:04.955\nSo I think we'll probably have\nto push that off to a part two.\n\n539\n00:25:04.955 --> 00:25:08.670\nBut before I do that,\nonce you create a policy,\n\n540\n00:25:08.670 --> 00:25:12.480\nthe policy doesn't actually do\nanything until we attach it somewhere.\n\n541\n00:25:12.480 --> 00:25:15.680\nSo when I look at this attached entities,\nI see there's really only about eight\n\n542\n00:25:15.680 --> 00:25:17.517\npolicies here that\nare actually being used.\n\n543\n00:25:17.517 --> 00:25:21.130\nOne of them is IAMUserChangePassword.\n\n544\n00:25:21.130 --> 00:25:23.460\nYou've probably noticed that\none was attached to Daniel.\n\n545\n00:25:23.460 --> 00:25:27.010\nWhen I created his account,\nit had that option to say,\n\n546\n00:25:27.010 --> 00:25:29.240\nrequire user to change\npassword when they logged in.\n\n547\n00:25:29.240 --> 00:25:31.430\nThat means he had to have permission\nto change his own password, so\n\n548\n00:25:31.430 --> 00:25:34.410\nit's using this policy\nto be able to do that.\n\n549\n00:25:34.410 --> 00:25:38.070\nI've got some other ones here that\nare Elastic Beanstalk policies.\n\n550\n00:25:38.070 --> 00:25:41.290\nThose are custom policies,\nand I said I didn't make any.\n\n551\n00:25:41.290 --> 00:25:44.730\nWell, I'm telling the truth and\nI'm lying at the same time.\n\n552\n00:25:44.730 --> 00:25:49.380\nI'm telling the truth in that I didn't\ncreate any policies, but indirectly I did,\n\n553\n00:25:49.380 --> 00:25:52.760\nbecause I threw an application into\nElastic Beanstalk in another episode.\n\n554\n00:25:52.760 --> 00:25:56.750\nAnd when I did that,\nit created these policies for me.\n\n555\n00:25:56.750 --> 00:26:01.630\nSo it dynamically created those to\nsupport my Elastic Beanstalk application.\n\n556\n00:26:01.630 --> 00:26:04.730\nElastic Beanstalk is tricky cuz you\nupload an application, it needs access to\n\n557\n00:26:04.730 --> 00:26:08.300\na number of different things, and\nit uses these policies to do that.\n\n558\n00:26:08.300 --> 00:26:13.050\nYou'll see where RDS enhanced monitoring,\nI spun up an RDS database and it, in turn,\n\n559\n00:26:13.050 --> 00:26:14.030\ncreated a role.\n\n560\n00:26:14.030 --> 00:26:16.930\nSo you'll see roles like these\npop up from time to time.\n\n561\n00:26:16.930 --> 00:26:18.930\nThey get created by your application.\n\n562\n00:26:18.930 --> 00:26:22.510\nAnd they may be read-only also,\nlike the RDS one.\n\n563\n00:26:22.510 --> 00:26:24.210\nThe system created this.\n\n564\n00:26:24.210 --> 00:26:25.577\nI can make custom ones all I want.\n\n565\n00:26:25.577 --> 00:26:29.567\nAnd the neat part is, I can assign\nmore than one policy to a group, or\n\n566\n00:26:29.567 --> 00:26:31.990\nmore than one policy to a person.\n\n567\n00:26:31.990 --> 00:26:35.120\nAnd when you do that,\nthe policies stack together.\n\n568\n00:26:35.120 --> 00:26:39.520\nThey combine, and when they combine\nyou get a super set of permissions.\n\n569\n00:26:39.520 --> 00:26:43.062\nNow for the most part,\neach policy is adding to your permissions.\n\n570\n00:26:43.062 --> 00:26:46.960\nYou start of with nothing, you have zero\naccess to the system besides logging in,\n\n571\n00:26:46.960 --> 00:26:48.100\nlike Daniel right now.\n\n572\n00:26:48.100 --> 00:26:49.500\nAnd then I start adding things to them,\n\n573\n00:26:49.500 --> 00:26:53.430\nlike here is your ability to reset your\npassword, or here's full access to EC2.\n\n574\n00:26:53.430 --> 00:26:55.555\nHere is the ability to\nmonitor through CloudWatch.\n\n575\n00:26:55.555 --> 00:26:57.340\nYou start granting that access.\n\n576\n00:26:57.340 --> 00:27:00.710\nIt might be five different policies but\nthey all come together.\n\n577\n00:27:00.710 --> 00:27:02.455\nBut we'll see when we write the policies,\n\n578\n00:27:02.455 --> 00:27:06.410\nthat you have the ability\nto deny access also.\n\n579\n00:27:06.410 --> 00:27:10.090\nAnd if we deny access to something,\nthat will override every other policy.\n\n580\n00:27:10.090 --> 00:27:13.610\nI could have five policies\nattached to Daniel, and\n\n581\n00:27:13.610 --> 00:27:17.370\nfour of them could give\nhim full control of EC2.\n\n582\n00:27:17.370 --> 00:27:21.880\nAnd if even one of them denies him\naccess to EC2, he gets denied.\n\n583\n00:27:21.880 --> 00:27:23.020\nThe deny overrides.\n\n584\n00:27:23.020 --> 00:27:26.540\nSo we need to think about those things\nbefore we even start writing a policy,\n\n585\n00:27:26.540 --> 00:27:28.020\nwe need to think about\nwhat we're trying to do.\n\n586\n00:27:28.020 --> 00:27:29.600\nWhat am I trying to achieve?\n\n587\n00:27:29.600 --> 00:27:32.350\nAnd what do I need Daniel\nto have access to?\n\n588\n00:27:32.350 --> 00:27:33.720\nOr what do I not want\nhim to have access to?\n\n589\n00:27:33.720 --> 00:27:37.640\nAnd formulate in your mind, not even\nthinking about syntax and code and\n\n590\n00:27:37.640 --> 00:27:41.090\nall that stuff, formulate in your mind\nwhat permissions you want to grant them,\n\n591\n00:27:41.090 --> 00:27:42.960\nwhat they have to have.\n\n592\n00:27:42.960 --> 00:27:44.280\nThat's your starting point.\n\n593\n00:27:44.280 --> 00:27:46.580\nAnd from there we can create policies and\n\n594\n00:27:46.580 --> 00:27:49.310\nstart putting them into place, which\nwhich is what we're gonna do in part two.\n\n595\n00:27:49.310 --> 00:27:50.560\n&gt;&gt; All right, well,\nthat sounds like a lot of fun.\n\n596\n00:27:50.560 --> 00:27:54.150\nIt's a good place for us to go ahead and\nmake that transition.\n\n597\n00:27:54.150 --> 00:27:56.680\nWe'll cut this episode, and\nget ready for the next one.\n\n598\n00:27:56.680 --> 00:27:57.390\nThat'll be a lot of fun.\n\n599\n00:27:57.390 --> 00:27:59.420\nLeave you guys with a little\nbit of a cliffhanger, so\n\n600\n00:27:59.420 --> 00:28:01.690\nyou can actually see how\nto create these policies.\n\n601\n00:28:01.690 --> 00:28:02.640\nDon, looking forward to that.\n\n602\n00:28:02.640 --> 00:28:04.070\nThanks for joining us this morning.\n\n603\n00:28:04.070 --> 00:28:05.920\nThank you, good folks, for watching.\n\n604\n00:28:05.920 --> 00:28:09.370\nBut signing off for ITProTV,\nI've been your host, Daniel Lowrie.\n\n605\n00:28:09.370 --> 00:28:10.040\n&gt;&gt; And I'm Don Pezet.\n\n606\n00:28:10.040 --> 00:28:10.814\n&gt;&gt; And we'll see you next time.\n\n607\n00:28:10.814 --> 00:28:18.775\n[MUSIC]\n\n608\n00:28:18.775 --> 00:28:25.179\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207814811"
        },
        {
          "description": "In this episode, Daniel and Don continue their discussion and demonstration of IAM, specifically they pick back up with Authorization through the creation and use of Policies. They walk you through creating Policies through both manual configuration as well as using the AWS provided wizard.",
          "length": "1348",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-2-identity_and_access_management_pt2-030717.00_22_24_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-2-identity_and_access_management_pt2-030717.00_22_24_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-6-1-2-identity_and_access_management_pt2-030717.00_22_24_16.Still001-sm.jpg",
          "title": "Identity and Access Management Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.987\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:05.987 --> 00:00:07.151\n[CROSSTALK]\n\n3\n00:00:07.151 --> 00:00:08.465\n[MUSIC]\n\n4\n00:00:08.465 --> 00:00:11.824\n&gt;&gt; Your watching ITPro.TV.\n\n5\n00:00:11.824 --> 00:00:13.843\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:13.843 --> 00:00:16.441\nwelcome to another great\nepisode of ITPro.TV.\n\n7\n00:00:16.441 --> 00:00:20.221\nI'm your host Daniel Lowrie and\nin todays episode, we are back with our\n\n8\n00:00:20.221 --> 00:00:23.831\nAmazon Certified Solutions Architect\n– Associate level series.\n\n9\n00:00:23.831 --> 00:00:28.020\nAnd of course, joining me in the studio\nyet again our good friend Mr. Don Pezet.\n\n10\n00:00:28.020 --> 00:00:28.700\nDon, welcome back.\n\n11\n00:00:28.700 --> 00:00:29.612\nHow's it going, man?\n\n12\n00:00:29.612 --> 00:00:32.268\n&gt;&gt; It is going great, Dan,\nready to wrap up IAM.\n\n13\n00:00:32.268 --> 00:00:34.300\nWe kinda left off on a high\nnote in the last episode.\n\n14\n00:00:34.300 --> 00:00:40.170\nWe started talking about authentication\nand authorization inside of AWS using IAM.\n\n15\n00:00:40.170 --> 00:00:43.090\nAnd we left off with really the most\nimportant part, which were policies.\n\n16\n00:00:43.090 --> 00:00:45.474\nPolicies are how we\nactually assign out access,\n\n17\n00:00:45.474 --> 00:00:47.812\nhow we authorize people\nto be able to do things.\n\n18\n00:00:47.812 --> 00:00:50.740\nSo it's kind of important that we know\nhow they work and what makes them up.\n\n19\n00:00:50.740 --> 00:00:54.043\nSo in this episode,\nI wanna highlight what makes up a policy,\n\n20\n00:00:54.043 --> 00:00:55.828\nkinda how that structure works.\n\n21\n00:00:55.828 --> 00:00:57.900\nAnd then how they can be applied and\nactually put into practice.\n\n22\n00:00:57.900 --> 00:01:01.790\n&gt;&gt; All right, well that is\nexactly where we did leave off.\n\n23\n00:01:01.790 --> 00:01:05.988\nDon, can you do us the immense favor and\nplease explain what we need to take into\n\n24\n00:01:05.988 --> 00:01:10.012\naccount when creating our policy and\nthen actually create a policy for us.\n\n25\n00:01:10.012 --> 00:01:13.697\n&gt;&gt; The homework I assigned in the last\nepisode was you have to think about your\n\n26\n00:01:13.697 --> 00:01:16.320\nusers and what type of access\nyou have to grant them.\n\n27\n00:01:16.320 --> 00:01:20.416\nYou got to figure out the minimum level\nof access that they need to be able to to\n\n28\n00:01:20.416 --> 00:01:21.510\ntheir job, right?\n\n29\n00:01:21.510 --> 00:01:23.300\nThen we've got to craft a policy.\n\n30\n00:01:23.300 --> 00:01:26.150\nNow the policy that we craft can vary a\nlittle bit depending where it is applied.\n\n31\n00:01:26.150 --> 00:01:29.247\nI got a little diagram to show you some\nof the different places where things can\n\n32\n00:01:29.247 --> 00:01:30.370\nbe applied.\n\n33\n00:01:30.370 --> 00:01:34.060\nFor example,\nit all kinda starts with IAM users, right?\n\n34\n00:01:34.060 --> 00:01:36.210\nSo you can have an IAM user, and\n\n35\n00:01:36.210 --> 00:01:40.090\nif you really want, you can just\nstick a policy right on the user.\n\n36\n00:01:40.090 --> 00:01:44.120\nSo I can write a policy that is very,\nvery tailored just to Daniel.\n\n37\n00:01:44.120 --> 00:01:45.910\nThat says here's exactly what I\nwant Daniel to be able to do.\n\n38\n00:01:45.910 --> 00:01:49.345\nHe's got this access to EC2,\nhe's got this other access to S3.\n\n39\n00:01:49.345 --> 00:01:53.660\nHe's got these components and\nhe can log in from this IP address.\n\n40\n00:01:53.660 --> 00:01:57.664\nHe can log in during these times, I can\nbe very, very specific, just for Daniel.\n\n41\n00:01:57.664 --> 00:02:02.710\nThe problem is that's very difficult\nto manage, very difficult to maintain.\n\n42\n00:02:02.710 --> 00:02:06.230\nAs I add more users, I can't really\nclone that, I have to customize it,\n\n43\n00:02:06.230 --> 00:02:08.210\nit's just a little too static, right?\n\n44\n00:02:08.210 --> 00:02:10.090\n&gt;&gt; Are there times when\nyou would want to do that,\n\n45\n00:02:10.090 --> 00:02:12.370\neven though it's difficult to manage?\n\n46\n00:02:12.370 --> 00:02:14.629\n&gt;&gt; Sadly, the best example I can\nthink of is when I'm in a hurry.\n\n47\n00:02:14.629 --> 00:02:16.569\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n48\n00:02:16.569 --> 00:02:17.881\n&gt;&gt; I'm in a hurry, I got to get inside.\n\n49\n00:02:17.881 --> 00:02:19.385\nI'll set it up the right way later on.\n\n50\n00:02:19.385 --> 00:02:20.393\n&gt;&gt; Okay.\n\n51\n00:02:20.393 --> 00:02:20.893\n&gt;&gt; Like that would be the scenario.\n\n52\n00:02:22.600 --> 00:02:27.150\nOnly if it was a single time\naccess that I was granting.\n\n53\n00:02:27.150 --> 00:02:30.440\nIf I knew I had one application\nthat had very specific needs, and\n\n54\n00:02:30.440 --> 00:02:34.760\nI was never going to do anything like that\nagain in the future, I might go that way.\n\n55\n00:02:34.760 --> 00:02:38.082\nIt's not hard to do it the right way,\nthey're all right.\n\n56\n00:02:38.082 --> 00:02:39.364\nAll these ways work, right?\n\n57\n00:02:39.364 --> 00:02:43.360\nSo the right way is the one that leaves\nyou open to expand in the future.\n\n58\n00:02:43.360 --> 00:02:45.270\nThat I could have more applications or\n\n59\n00:02:45.270 --> 00:02:49.340\nmore employees that match\nthe same type of behavior.\n\n60\n00:02:49.340 --> 00:02:54.960\nAnd the easiest way to deal with that is\nto take the user, and put them in a group.\n\n61\n00:02:54.960 --> 00:02:59.742\nAnd you give the group the policy and that\nmakes it where I can throw other things in\n\n62\n00:02:59.742 --> 00:03:01.790\nthe group and they get the access.\n\n63\n00:03:01.790 --> 00:03:04.870\nAnd I can take things out of the group and\nthey don't have the same access, right?\n\n64\n00:03:04.870 --> 00:03:07.920\nSo if I have multiple users and\nI put them in that same group and\n\n65\n00:03:07.920 --> 00:03:10.210\nhte group has a policy,\nthey get that access.\n\n66\n00:03:10.210 --> 00:03:12.982\nAnd the group can have more\nthan one policy linked to it.\n\n67\n00:03:12.982 --> 00:03:16.979\nAnd a policy can be linked to\nmore than one group also, so\n\n68\n00:03:16.979 --> 00:03:21.160\nwe kind of reuse things which\nmakes managing a lot easier.\n\n69\n00:03:21.160 --> 00:03:25.742\nWe've got 50 users and\nI want them all to have some permission.\n\n70\n00:03:25.742 --> 00:03:27.641\nI need to get them some\nnew feature comes out and\n\n71\n00:03:27.641 --> 00:03:29.158\nI want to give them read access to it.\n\n72\n00:03:29.158 --> 00:03:32.607\nWell if they all have a common policy\napplied, I can just modify that common\n\n73\n00:03:32.607 --> 00:03:36.150\npolicy one time, and\nit takes effect across all those users.\n\n74\n00:03:36.150 --> 00:03:38.296\nReally, really handy when you're\ndealing with like federations,\n\n75\n00:03:38.296 --> 00:03:40.220\nwhere you might have 10,000 or\n100,000 users.\n\n76\n00:03:40.220 --> 00:03:44.526\nAnd you're trying to give them all read\naccess to some kind of dashboard that\n\n77\n00:03:44.526 --> 00:03:45.720\nyou've built.\n\n78\n00:03:45.720 --> 00:03:48.082\nWell, then we can do that through here.\n\n79\n00:03:48.082 --> 00:03:51.790\nNow I do want to add a quick caveat here,\nI said dashboard.\n\n80\n00:03:51.790 --> 00:03:52.500\nWhen I say dashboard,\n\n81\n00:03:52.500 --> 00:03:57.310\nI mean like something actually\nbeing rendered from within AWS.\n\n82\n00:03:57.310 --> 00:03:59.870\nBe careful with this cuz\nall of these policies and\n\n83\n00:03:59.870 --> 00:04:05.370\npermissions that I'm talking about, all of\nthis authorization is for access to AWS,\n\n84\n00:04:05.370 --> 00:04:08.740\nnot to access your\napplications inside of it.\n\n85\n00:04:08.740 --> 00:04:13.450\nSo for example, if I have a database\nserver spun up, that database server if I\n\n86\n00:04:13.450 --> 00:04:17.300\nuse RDS and I spin MySQL or\nMicrosoft SQL or Oracle or whatever.\n\n87\n00:04:17.300 --> 00:04:21.000\nInside of that database, it's gonna\nhave it's own credentials, right?\n\n88\n00:04:21.000 --> 00:04:24.010\nAnd those aren't IAM credentials,\nthose are managed separate.\n\n89\n00:04:24.010 --> 00:04:28.000\nSo most of your users don't need access to\nAWS, they need access to the software that\n\n90\n00:04:28.000 --> 00:04:30.310\nyou're running inside of it,\nthe web applications and so on.\n\n91\n00:04:30.310 --> 00:04:32.930\nSo that's completely separate,\nIAM credentials are not for that.\n\n92\n00:04:32.930 --> 00:04:35.980\nIM is not a single sign on solution for\nyour applications,\n\n93\n00:04:35.980 --> 00:04:38.700\nyou've got to figure\nthat out somewhere else.\n\n94\n00:04:38.700 --> 00:04:41.972\nSo all of this is just for\naccess to the resources themselves, for\n\n95\n00:04:41.972 --> 00:04:43.830\nmanagement purposes inside of AWS.\n\n96\n00:04:43.830 --> 00:04:46.531\nAll right, so when I write a policy,\n\n97\n00:04:46.531 --> 00:04:51.250\nI'm granting access to those\nresources that I just mentioned.\n\n98\n00:04:51.250 --> 00:04:53.380\nAnd I've got a sample policy\nbrought up here on the screen.\n\n99\n00:04:53.380 --> 00:05:00.180\nThis is a very basic policy, that's giving\nsomeone access to an S3 bucket, right?\n\n100\n00:05:00.180 --> 00:05:01.490\nAnd let's look at what this is made up of.\n\n101\n00:05:01.490 --> 00:05:05.302\nWhen you write up a policy, there's\na couple of components that you have to\n\n102\n00:05:05.302 --> 00:05:07.980\nhave, that you really have\nto have to grant access.\n\n103\n00:05:07.980 --> 00:05:09.600\nIt really boils down to four things.\n\n104\n00:05:09.600 --> 00:05:15.020\nThe effect, the action,\nthe condition, and the resource.\n\n105\n00:05:16.150 --> 00:05:19.630\nThose four things define\nthe access that I'm granting.\n\n106\n00:05:19.630 --> 00:05:20.710\nWell I guess this a fifth thing,\n\n107\n00:05:20.710 --> 00:05:24.790\nI should probably add in which is\nwho it's going to be attach to.\n\n108\n00:05:24.790 --> 00:05:28.590\nBut the policy does and actually show\nit's who it's going to be attach to.\n\n109\n00:05:28.590 --> 00:05:31.420\nBecause it the policy might be attach\nto more than one thing, right?.\n\n110\n00:05:31.420 --> 00:05:34.440\nSo that's not inside the policy,\nwe don't see that here on the screen.\n\n111\n00:05:34.440 --> 00:05:37.650\nBut inside of the policy,\nit's granting access and so\n\n112\n00:05:37.650 --> 00:05:41.700\nwe have the effect, the action,\nthe condition, and the resource.\n\n113\n00:05:41.700 --> 00:05:46.500\nAnd you can be granting access to more\nthan one resource in the same policy.\n\n114\n00:05:46.500 --> 00:05:49.070\nThis one just happens to be doing\none to keep the example simple.\n\n115\n00:05:49.070 --> 00:05:51.590\nSo if I look down here at the bottom,\nI'll start with that resource.\n\n116\n00:05:51.590 --> 00:05:56.460\nThe resource in this case is an S3\nbucket called my_public_bucket, right?\n\n117\n00:05:56.460 --> 00:06:00.380\nAnd I am granting access to my\npublic bucket/* which means\n\n118\n00:06:00.380 --> 00:06:02.815\nall of the contents inside of that bucket.\n\n119\n00:06:02.815 --> 00:06:06.030\nI'm granting some kind of\naccess to that bucket.\n\n120\n00:06:06.030 --> 00:06:07.860\nWhat kind of access am I granting?\n\n121\n00:06:07.860 --> 00:06:11.480\nWell if I look up top I know\nthat I am granting access,\n\n122\n00:06:11.480 --> 00:06:13.570\nbecause it says affect allow.\n\n123\n00:06:13.570 --> 00:06:17.380\nIf it has fact deny,\nI'd be taking away that access, right?\n\n124\n00:06:17.380 --> 00:06:21.730\nSo you can grant or take away access\nright here inside the policy.\n\n125\n00:06:21.730 --> 00:06:26.350\nAfter that I've got the actions and\nthis is what I'm actually allowing, okay?\n\n126\n00:06:26.350 --> 00:06:30.270\nI'm allowing list bucket, they need to\nbe able to see what it's in the bucket.\n\n127\n00:06:30.270 --> 00:06:35.620\nAnd then get object, I'm allowing them\nto get the items out of the bucket.\n\n128\n00:06:35.620 --> 00:06:39.490\nSo I might have an Internet user or an\napplication or whatever that needs to be\n\n129\n00:06:39.490 --> 00:06:42.944\nable to hit this bucket find a file and\nget it, download it, right?\n\n130\n00:06:42.944 --> 00:06:46.449\nNow if I leave it at that everyone\nin the world will be able to do,\n\n131\n00:06:46.449 --> 00:06:49.240\nor everyone who I attach this policy to.\n\n132\n00:06:49.240 --> 00:06:52.360\nBut then we can stick conditions\non it to restrict it even further.\n\n133\n00:06:52.360 --> 00:06:56.299\nAnd to those conditions can\nbe things like IP address or\n\n134\n00:06:56.299 --> 00:06:59.562\ntimestamp, all sorts of different things.\n\n135\n00:06:59.562 --> 00:07:02.516\nI might be granting them access\nonly between certain times or for\n\n136\n00:07:02.516 --> 00:07:04.850\na certain period of\ntime before it expires.\n\n137\n00:07:04.850 --> 00:07:08.454\nYou can grant access based on all\nsorts of different conditions.\n\n138\n00:07:08.454 --> 00:07:11.995\n&gt;&gt; Don, is there an exhaustive list for\nthese types of, like if I wanted to set\n\n139\n00:07:11.995 --> 00:07:15.840\na condition, how would I know what those\nconditions are that I can actually set?\n\n140\n00:07:15.840 --> 00:07:20.270\n&gt;&gt; Absolutely, and this example here\nis a very, very simple example.\n\n141\n00:07:20.270 --> 00:07:21.768\nWhen you go into AWS,\n\n142\n00:07:21.768 --> 00:07:26.530\nthere's help documentation that\nreally shows a ton of all of this.\n\n143\n00:07:26.530 --> 00:07:30.204\nBut if you just go into your policies and\ngo to create a policy,\n\n144\n00:07:30.204 --> 00:07:32.688\nthere's a policy generator you can use.\n\n145\n00:07:32.688 --> 00:07:36.136\nIf you just choose to create your own\npolicy, it gives you a window and\n\n146\n00:07:36.136 --> 00:07:37.390\nyou get to start typing.\n\n147\n00:07:38.480 --> 00:07:40.770\nPretty fun, if you know your stuff.\n\n148\n00:07:40.770 --> 00:07:41.417\n&gt;&gt; Know what you're doing.\n\n149\n00:07:41.417 --> 00:07:42.621\n[LAUGH]\n&gt;&gt; Now it is validating to make sure that\n\n150\n00:07:42.621 --> 00:07:45.050\nyou don't screw it up,\ncuz it's pretty easy to screw them up.\n\n151\n00:07:45.050 --> 00:07:47.080\nBut you're left to your own\ndevices here to write it.\n\n152\n00:07:47.080 --> 00:07:49.335\nAnd most of the time they're expecting\nyou to have already written it,\n\n153\n00:07:49.335 --> 00:07:50.810\nyou just paste it in and\nthat's that, right?\n\n154\n00:07:50.810 --> 00:07:53.039\nBut if you go to the Policy Generator,\nwhoops,\n\n155\n00:07:53.039 --> 00:07:56.514\nwhich I just moved away from by accident,\nso let me create a Policy again.\n\n156\n00:07:56.514 --> 00:07:58.196\nAnd I will do the Policy Generator.\n\n157\n00:07:58.196 --> 00:08:02.418\nWhen we go in here,\nthis is nice because we can start to.\n\n158\n00:08:02.418 --> 00:08:03.917\nUse the wizard to do this stuff, right?\n\n159\n00:08:03.917 --> 00:08:06.126\nWe can see the service that\nwe're providing access to.\n\n160\n00:08:06.126 --> 00:08:11.610\nHere's the effect, the service, the\naction, the resource, and the condition.\n\n161\n00:08:11.610 --> 00:08:16.310\nNow notice how service I left out of\nmy policy that I was showing you,\n\n162\n00:08:16.310 --> 00:08:20.680\nmy sample policy, and that's because\nit's kind of an optional statement.\n\n163\n00:08:20.680 --> 00:08:23.780\nWhen I look at this,\nI'm granting access to an S3 bucket.\n\n164\n00:08:23.780 --> 00:08:25.560\nSo it knows that's the service, right?\n\n165\n00:08:25.560 --> 00:08:27.740\nSo I don't have to tie it\nto a particular service.\n\n166\n00:08:27.740 --> 00:08:30.710\nBut in the wizard like that,\nit's important to have the service so\n\n167\n00:08:30.710 --> 00:08:32.970\nit knows which actions to show you.\n\n168\n00:08:32.970 --> 00:08:34.365\nCuz the actions come from the service.\n\n169\n00:08:34.365 --> 00:08:39.340\nSee how the actions are s3:GetObject,\ns3:ListBucket.\n\n170\n00:08:39.340 --> 00:08:44.430\nListBucket doesn't make sense in\nthe terms of an EC2 instance, right, or\n\n171\n00:08:44.430 --> 00:08:48.290\nan RDS database, or\nan Elastic Beanstalk application.\n\n172\n00:08:48.290 --> 00:08:50.380\nListBucket really only applies to s3.\n\n173\n00:08:50.380 --> 00:08:54.890\nSo there's commands like that that\nare only in certain applications.\n\n174\n00:08:54.890 --> 00:08:58.450\nSo when we look at the little wizard here,\nit's asking me, am I allowing or\n\n175\n00:08:58.450 --> 00:09:00.950\ndenying, which service.\n\n176\n00:09:00.950 --> 00:09:03.855\nAnd I'll see a list,\nwhether I use them or not,\n\n177\n00:09:03.855 --> 00:09:06.481\nI will see a list of all\nof the AWS services.\n\n178\n00:09:06.481 --> 00:09:09.706\nThis list what really helps you\nto understand how big AWS is.\n\n179\n00:09:09.706 --> 00:09:11.660\nThere's so many different things in here.\n\n180\n00:09:11.660 --> 00:09:15.136\nSo I might be granting EC2 access, right?\n\n181\n00:09:15.136 --> 00:09:16.504\nSo something in EC2.\n\n182\n00:09:16.504 --> 00:09:20.080\nAnd the moment I choose EC2,\nthis action list changes.\n\n183\n00:09:20.080 --> 00:09:22.250\nAnd now I can come in here and\nI can grant all access,\n\n184\n00:09:22.250 --> 00:09:25.600\nright, I wanna give Daniel all\naccess to work with EC2, great.\n\n185\n00:09:26.950 --> 00:09:31.740\nOr I scroll down, and I pick exactly\nwhat I want him to have, right.\n\n186\n00:09:31.740 --> 00:09:38.430\nMaybe I want him to be able to stop\ninstances but not terminate them, right.\n\n187\n00:09:38.430 --> 00:09:41.400\nSo I could come in here, and\nI'm doing an allow this time.\n\n188\n00:09:41.400 --> 00:09:46.530\nAnd I can do an allow for\nstopping an instance right here, right.\n\n189\n00:09:46.530 --> 00:09:48.690\nSo I'm gonna allow him to start and\nstop instances.\n\n190\n00:09:49.960 --> 00:09:51.920\nAnd then I can come and\ndo another one, and\n\n191\n00:09:51.920 --> 00:09:54.500\ndeny him the ability to\nterminate instances.\n\n192\n00:09:55.930 --> 00:09:56.832\nOr I mean, really,\n\n193\n00:09:56.832 --> 00:10:00.520\nmaybe I want him to be able to do\neverything except terminating an instance.\n\n194\n00:10:00.520 --> 00:10:03.480\nSo in my first policy, I can come\nthrough and just say, you know what,\n\n195\n00:10:03.480 --> 00:10:08.160\nI'm gonna allow everything,\nallow all actions.\n\n196\n00:10:08.160 --> 00:10:10.530\nAnd then I can come and create\nanother one, and say I want to deny.\n\n197\n00:10:11.600 --> 00:10:17.260\nAnd then here for deny I'm just gonna\ndeny terminate like that, right?\n\n198\n00:10:17.260 --> 00:10:18.220\nSo we can do both.\n\n199\n00:10:18.220 --> 00:10:19.389\nActually, let's do that.\n\n200\n00:10:19.389 --> 00:10:22.770\nSo I've got deny so\nwe'll start with that one, okay?\n\n201\n00:10:22.770 --> 00:10:24.150\nI've told it I'm denying.\n\n202\n00:10:24.150 --> 00:10:24.900\nIt's EC2.\n\n203\n00:10:24.900 --> 00:10:27.190\nI've told it I'm denying\nterminate service.\n\n204\n00:10:27.190 --> 00:10:30.350\nAnd then I need to specify an ARN, right?\n\n205\n00:10:30.350 --> 00:10:34.460\nAn ARN is an Amazon Resource Name,\nor an AWS Resource name.\n\n206\n00:10:34.460 --> 00:10:37.500\nIt's how we find resources in AWS.\n\n207\n00:10:37.500 --> 00:10:41.190\nAnd the resource names are actually made\nup of a couple of different components\n\n208\n00:10:41.190 --> 00:10:45.570\nthat then help us to figure\nout where that device is.\n\n209\n00:10:45.570 --> 00:10:51.350\nAnd when I look at my sample policy here,\nI've got an ARN, this guy right here.\n\n210\n00:10:51.350 --> 00:10:53.620\nAnd when you look at it, it's pretty easy.\n\n211\n00:10:53.620 --> 00:10:56.366\nYou kind of figure out what it means,\narn:,\n\n212\n00:10:56.366 --> 00:10:58.765\nlets me know that it is a resource name.\n\n213\n00:10:58.765 --> 00:11:00.630\nAnd then we've got aws.\n\n214\n00:11:00.630 --> 00:11:02.933\nI'm working with aws, that make sense.\n\n215\n00:11:02.933 --> 00:11:05.120\ns3, I'm working with s3, right?\n\n216\n00:11:05.120 --> 00:11:06.422\nThat's the service.\n\n217\n00:11:06.422 --> 00:11:08.270\nThen we got a couple of colons.\n\n218\n00:11:08.270 --> 00:11:09.200\nThat's a little weird.\n\n219\n00:11:09.200 --> 00:11:12.231\n&gt;&gt; Obviously, this is colon delineated.\n\n220\n00:11:12.231 --> 00:11:12.808\n&gt;&gt; Delineated.\n\n221\n00:11:12.808 --> 00:11:15.569\n&gt;&gt; Thank you.\n&gt;&gt; The colons are in separate fields,\n\n222\n00:11:15.569 --> 00:11:16.112\nright?\n\n223\n00:11:16.112 --> 00:11:17.249\nAnd some of the fields are optional.\n\n224\n00:11:17.249 --> 00:11:18.608\nAnd if they're optional\nyou can leave them empty.\n\n225\n00:11:18.608 --> 00:11:20.052\nAnd so we've got colon,\ncolon, colon, right?\n\n226\n00:11:20.052 --> 00:11:22.650\nThere's two fields there\nthat are left empty.\n\n227\n00:11:22.650 --> 00:11:25.760\nAnd then we get the bucket\nthat I'm providing access to.\n\n228\n00:11:25.760 --> 00:11:28.670\nWell, ARNs look different\ndepending on what service it\n\n229\n00:11:28.670 --> 00:11:29.790\nis that you're working with.\n\n230\n00:11:29.790 --> 00:11:32.740\nSo I've got a few examples\nhere to show you.\n\n231\n00:11:32.740 --> 00:11:36.740\nThe first one is just kind of\nshowing what each field means.\n\n232\n00:11:36.740 --> 00:11:39.850\nSo we've got ARN,\nletting us know that it's a resource name.\n\n233\n00:11:39.850 --> 00:11:41.540\nAWS is that we're working with AWS, right?\n\n234\n00:11:41.540 --> 00:11:44.800\nSo you're always gonna see\narn:aws at the beginning.\n\n235\n00:11:44.800 --> 00:11:48.760\nNotice all my examples have\narn:aws at the beginning.\n\n236\n00:11:48.760 --> 00:11:50.280\nThen you're gonna have the service.\n\n237\n00:11:50.280 --> 00:11:55.850\nSo I've got s3 or iam or dynamodb or\nwhatever my service happens to be.\n\n238\n00:11:55.850 --> 00:11:57.980\nNext is the region.\n\n239\n00:11:57.980 --> 00:12:01.890\nThat's one of the fields I left off\nwhen I was doing that permission.\n\n240\n00:12:01.890 --> 00:12:07.660\nAnd the reason there is, with s3,\ns3 buckets are tied to a single region.\n\n241\n00:12:07.660 --> 00:12:10.240\nSo I don't have to specify a region.\n\n242\n00:12:10.240 --> 00:12:12.910\nWhen it finds the bucket,\nit knows it's only in that one region.\n\n243\n00:12:12.910 --> 00:12:16.420\nVersus other services where you might\nspread across more than one region,\n\n244\n00:12:16.420 --> 00:12:17.500\nlike in CloudFront.\n\n245\n00:12:17.500 --> 00:12:19.810\nAnd in those scenarios you may need\nto specify exactly which region\n\n246\n00:12:19.810 --> 00:12:20.360\nyou're working on.\n\n247\n00:12:20.360 --> 00:12:23.504\nOr EC2, where you have EC2\ninstances in different regions,\n\n248\n00:12:23.504 --> 00:12:25.713\nyou may need to specify the region, right?\n\n249\n00:12:25.713 --> 00:12:27.167\nIn s3, you can specify it,\n\n250\n00:12:27.167 --> 00:12:31.370\nit's just optional because it knows\nthat it's only gonna be in one.\n\n251\n00:12:31.370 --> 00:12:32.970\nNext is the account-id.\n\n252\n00:12:32.970 --> 00:12:36.810\nBy default it's gonna be whatever account\nID you're currently logged in with, right?\n\n253\n00:12:36.810 --> 00:12:39.560\nSo I can leave it off if I'm only\ndealing with one account ID.\n\n254\n00:12:39.560 --> 00:12:43.160\nBut if I have more than one account ID,\nthen I need to specify what it is, and\n\n255\n00:12:43.160 --> 00:12:45.320\nthat's another one that was\nleft off in my example.\n\n256\n00:12:45.320 --> 00:12:46.760\nSo that's where we had the colon,\n\n257\n00:12:46.760 --> 00:12:49.670\ncolon, colon, those two fields were\nleft off to shrink it down, right?\n\n258\n00:12:50.710 --> 00:12:53.752\nAnd then lastly we have the resource\nwe're giving access to.\n\n259\n00:12:53.752 --> 00:12:57.531\nNow s3 buckets are a little bit special\nbecause you have the bucket and\n\n260\n00:12:57.531 --> 00:12:59.270\nthen the contents inside of it.\n\n261\n00:12:59.270 --> 00:13:01.100\nYou don't always have that.\n\n262\n00:13:01.100 --> 00:13:02.790\nWell, I guess iam.\n\n263\n00:13:02.790 --> 00:13:05.580\nHere, you designate whether it's a user,\na group, or role.\n\n264\n00:13:05.580 --> 00:13:07.100\nAnd then the user referral inside of it.\n\n265\n00:13:07.100 --> 00:13:08.601\nSo you may have a delineated one.\n\n266\n00:13:08.601 --> 00:13:10.984\nAnd now that I look at it,\nevery one of my examples is like that.\n\n267\n00:13:10.984 --> 00:13:12.742\n&gt;&gt; [LAUGH]\n&gt;&gt; With EC2, though,\n\n268\n00:13:12.742 --> 00:13:13.760\nit might not be like that.\n\n269\n00:13:13.760 --> 00:13:15.110\nYou just specify a particular instance.\n\n270\n00:13:15.110 --> 00:13:17.530\nSo you got an instance ID,\nor a gateway, or\n\n271\n00:13:17.530 --> 00:13:19.160\nsomething like that that\nyou're pointing at.\n\n272\n00:13:19.160 --> 00:13:21.949\nWith a database, I might be\npointing to a table or table name.\n\n273\n00:13:23.140 --> 00:13:25.890\nSo I'm referencing that\nthe object is a table and\n\n274\n00:13:25.890 --> 00:13:27.820\nthen whatever the table\nname is afterwards.\n\n275\n00:13:27.820 --> 00:13:32.390\nSo these are just different\nexamples of how an ARN is built up.\n\n276\n00:13:32.390 --> 00:13:34.930\nYeah, now if you don't know what the ARN\nfor an object is, a lot of time,\n\n277\n00:13:34.930 --> 00:13:36.990\nif is you using these wizards,\nyou can browse and find it.\n\n278\n00:13:36.990 --> 00:13:40.219\nBut if you're working in an application,\nwhatever, you just need to know the ARN.\n\n279\n00:13:40.219 --> 00:13:45.060\nAnd the easiest way is to pull up Amazon's\nARN database's general documentation.\n\n280\n00:13:45.060 --> 00:13:47.080\nAnd you can see the ARN format for\nall the services.\n\n281\n00:13:47.080 --> 00:13:48.740\nI've got that pulled up right here.\n\n282\n00:13:48.740 --> 00:13:51.750\nWhen you look at it, it's got some\nexamples of things, those are exciting.\n\n283\n00:13:51.750 --> 00:13:55.020\nBut if you scroll down, you'll find\nan individual topic for every single one\n\n284\n00:13:55.020 --> 00:13:59.100\nof the services that shows how the ARN\nis built up for those services.\n\n285\n00:13:59.100 --> 00:14:02.740\nAnd so that will help you to\ndetermine exactly how you would\n\n286\n00:14:02.740 --> 00:14:05.370\nbasically phrase that to use it as an ARN.\n\n287\n00:14:05.370 --> 00:14:07.980\nGotta make sure you get it right, or it's\nnot gonna be pointing to the right object.\n\n288\n00:14:09.500 --> 00:14:11.340\nSo those are easy enough to construct and\nbuild up.\n\n289\n00:14:11.340 --> 00:14:14.240\nAnd they show,\nlike here how table is in black.\n\n290\n00:14:14.240 --> 00:14:16.890\nThat means that that's actually a keyword\nthat has to be part of the ARN.\n\n291\n00:14:16.890 --> 00:14:20.220\nAnd then tablename is in red,\nthat's what you customize.\n\n292\n00:14:20.220 --> 00:14:23.330\nYou customize region,\naccount-id and tablename.\n\n293\n00:14:23.330 --> 00:14:26.410\nOtherwise the rest of the ARN that's\nin black is gonna be the same for\n\n294\n00:14:26.410 --> 00:14:28.030\neverybody using DynamoDB.\n\n295\n00:14:28.030 --> 00:14:30.470\nSo you kind of build it up based on that.\n\n296\n00:14:30.470 --> 00:14:32.830\nBut a lot of the wizards that\nyou use as you go through it and\n\n297\n00:14:32.830 --> 00:14:35.650\nstart creating processes or services or\n\n298\n00:14:35.650 --> 00:14:38.370\npolicies will just have where\nyou can browse to find objects.\n\n299\n00:14:38.370 --> 00:14:41.650\nSo you don't even have to know\nwhat the ARN is to go from there.\n\n300\n00:14:41.650 --> 00:14:45.915\nSo, Don, now that you've walked us through\nhow to create the actual syntax for\n\n301\n00:14:45.915 --> 00:14:49.225\ncreating a manual, using the ARNs and\nthings of that nature,\n\n302\n00:14:49.225 --> 00:14:51.080\nthat can be a little difficult.\n\n303\n00:14:51.080 --> 00:14:53.250\nThanks for pointing us in\nthe right direction for that.\n\n304\n00:14:53.250 --> 00:14:57.190\nOnce we get our policy crafted, we gotta\nfigure out exactly how we want it.\n\n305\n00:14:57.190 --> 00:14:58.740\nDoes that automatically apply or\n\n306\n00:14:58.740 --> 00:15:01.460\nI guess we haven't actually\nfinished our policy yet.\n\n307\n00:15:01.460 --> 00:15:03.404\nOnce we're done, though,\ndoes that just automatically apply or\n\n308\n00:15:03.404 --> 00:15:04.001\nwhat do we got to do?\n\n309\n00:15:04.001 --> 00:15:05.281\n&gt;&gt; So we do have to finish it.\n\n310\n00:15:05.281 --> 00:15:06.476\nI've kinda been showing the elements.\n\n311\n00:15:06.476 --> 00:15:07.510\nI haven't actually finished it.\n\n312\n00:15:07.510 --> 00:15:09.770\nBut once it's done, we then have to\nturn around and attach it, right?\n\n313\n00:15:09.770 --> 00:15:10.650\nSo we'll see a little bit of that.\n\n314\n00:15:10.650 --> 00:15:12.950\nSo let's just finish this one real quick.\n\n315\n00:15:12.950 --> 00:15:16.320\nWe said that we were going to deny\nthe ability to terminate an instance.\n\n316\n00:15:16.320 --> 00:15:18.800\nAnd I need to specify an ARN so\nthat the ARN for\n\n317\n00:15:18.800 --> 00:15:23.010\nthis one is going to be\nbasically like this.\n\n318\n00:15:23.010 --> 00:15:29.430\nLet's see, this'll be us-east-1,\nand I'll punch in my account.\n\n319\n00:15:29.430 --> 00:15:32.300\nAnd then I'll just say instance/*,\n\n320\n00:15:32.300 --> 00:15:36.130\nso basically I'm doing this for\nall the instances.\n\n321\n00:15:36.130 --> 00:15:37.010\nAnd then I can start to add conditions.\n\n322\n00:15:37.010 --> 00:15:39.414\nAnd conditions actually goes\nback to your last question,\n\n323\n00:15:39.414 --> 00:15:41.482\nwhich was is there a way\nto see all the conditions?\n\n324\n00:15:41.482 --> 00:15:45.640\nAnd I talked about seeing all the ARNs,\nor all the actions.\n\n325\n00:15:45.640 --> 00:15:49.600\nBut when we go to add conditions,\nI mentioned IP address and\n\n326\n00:15:49.600 --> 00:15:51.120\ntime restrictions, right?\n\n327\n00:15:51.120 --> 00:15:53.896\nBut you'll see that we can\nset conditions for the ARN.\n\n328\n00:15:53.896 --> 00:15:57.542\nWe can set restrictions for\nall sorts of things, just general numbers.\n\n329\n00:15:57.542 --> 00:16:01.791\nBecause we can create variables that are\ntailored by the system to dictate Maybe I\n\n330\n00:16:01.791 --> 00:16:04.739\nwant Daniel to be able to\naccess this system five times.\n\n331\n00:16:04.739 --> 00:16:08.128\nAnd so I can have an external system that\nis deducting from that number every time\n\n332\n00:16:08.128 --> 00:16:11.980\nhe accesses it, and when it finally hits\nzero he's not able to access it anymore.\n\n333\n00:16:11.980 --> 00:16:15.490\nSo you'll see a lot of different things\nin here that let us set conditions,\n\n334\n00:16:15.490 --> 00:16:20.010\nas well as, other keys onto\nit like the current time or\n\n335\n00:16:20.010 --> 00:16:25.990\nthe IP address is in here somewhere,\nthe username and so on.\n\n336\n00:16:25.990 --> 00:16:28.830\nAll of these are different\nthings that we can use\n\n337\n00:16:28.830 --> 00:16:31.460\nto set conditions on the when\nthey're allowed to access or not.\n\n338\n00:16:31.460 --> 00:16:36.370\nNow in my scenario I just don't\nwant him to be able to mess\n\n339\n00:16:36.370 --> 00:16:40.690\nwith terminating an instance ever, and so\nI don't really want to add any conditions,\n\n340\n00:16:40.690 --> 00:16:42.630\nso I'm just going to leave that out,\nright?\n\n341\n00:16:42.630 --> 00:16:46.190\nSo I'm denying the ability for\nhim to terminate instances and\n\n342\n00:16:46.190 --> 00:16:47.910\nI'll add that statement, right?\n\n343\n00:16:47.910 --> 00:16:49.330\nAnd now I can add more statements.\n\n344\n00:16:49.330 --> 00:16:52.670\nNow I'm at one to allow\nhim full access to EC2.\n\n345\n00:16:52.670 --> 00:16:55.100\nI want him to be able to do\neverything else inside EC2.\n\n346\n00:16:55.100 --> 00:16:57.050\nSo I'm going to go here into EC2.\n\n347\n00:16:57.050 --> 00:17:01.290\nFor select actions,\nI'm just gonna choose all actions, right?\n\n348\n00:17:01.290 --> 00:17:05.080\nAnd let's see,\nit won't let me leave the ARN name out, so\n\n349\n00:17:05.080 --> 00:17:06.610\nI'm gonna specify the ARN.\n\n350\n00:17:06.610 --> 00:17:09.499\n&gt;&gt; And this goes back to your\nprevious statement about,\n\n351\n00:17:09.499 --> 00:17:14.121\nyou've made an implicit deny statement on\nme being able to terminate instances, but\n\n352\n00:17:14.121 --> 00:17:17.543\nyou hit all options,\nwhen you did your allow statement there.\n\n353\n00:17:17.543 --> 00:17:18.999\nSo it's gonna hit the deny first,\n\n354\n00:17:18.999 --> 00:17:22.050\neven though the allow statement does\nallow me to terminate instances.\n\n355\n00:17:22.050 --> 00:17:25.925\n&gt;&gt; Right and it's not so much about\nbeing first, cuz it applies the policy.\n\n356\n00:17:25.925 --> 00:17:26.850\n&gt;&gt; [INAUDIBLE]\n&gt;&gt; As a whole.\n\n357\n00:17:26.850 --> 00:17:27.480\nRight.\n\n358\n00:17:27.480 --> 00:17:31.960\nAnd so that deny will override,\nno matter what.\n\n359\n00:17:31.960 --> 00:17:34.140\nSo now when I look at these two\nstatements that I've written,\n\n360\n00:17:34.140 --> 00:17:35.440\nI've got that Deny and the Allow.\n\n361\n00:17:35.440 --> 00:17:38.700\nAnd you'll notice there's no order\nbuttons, I can't move up or move down,\n\n362\n00:17:38.700 --> 00:17:39.930\nbecause the order doesn't matter.\n\n363\n00:17:39.930 --> 00:17:43.010\nIt's all going to apply at once,\nwhen it gets created.\n\n364\n00:17:43.010 --> 00:17:45.550\nSo now I can move forward and\nI can give it a policy name.\n\n365\n00:17:45.550 --> 00:17:48.490\nIt's gonna generate that policy for\nme right here and so\n\n366\n00:17:48.490 --> 00:17:49.570\nI can see it written out.\n\n367\n00:17:49.570 --> 00:17:51.410\nAnd see it's got more than one statement.\n\n368\n00:17:51.410 --> 00:17:56.428\nThat the first statement is denying\nterminate instances on that resource.\n\n369\n00:17:56.428 --> 00:17:56.946\nI got a typo.\n\n370\n00:17:56.946 --> 00:18:02.030\nAnd then I've got my second statement,\nwhich is granting all access.\n\n371\n00:18:02.030 --> 00:18:05.588\nNow I spotted a typo in this, and\nactually might not be a problem.\n\n372\n00:18:05.588 --> 00:18:09.282\nIf you know it is in my ARN, I've got\nextra space right there after my account\n\n373\n00:18:09.282 --> 00:18:12.250\nname, cuz I copied and\npasted the account number.\n\n374\n00:18:12.250 --> 00:18:14.500\nSo I've got a little\nbit of a problem there.\n\n375\n00:18:14.500 --> 00:18:18.045\nThere's a validate policy button\ndown at the bottom you can hit, and\n\n376\n00:18:18.045 --> 00:18:20.600\nsometimes a typo like that\nmight not cause a problem.\n\n377\n00:18:20.600 --> 00:18:24.450\nAnd I'll see that mine, it says I've got\nan invalid ARN, and it red flagged me.\n\n378\n00:18:24.450 --> 00:18:28.900\nSo I need to come in here and fix that,\nwhich we can just fix it in line, and\n\n379\n00:18:28.900 --> 00:18:30.810\nthen validate that policy again.\n\n380\n00:18:30.810 --> 00:18:33.430\nAll right now I can see my\npolicy is valid and it's good.\n\n381\n00:18:33.430 --> 00:18:34.450\nThe policy name?\n\n382\n00:18:34.450 --> 00:18:36.630\nNot exactly user friendly, right?\n\n383\n00:18:36.630 --> 00:18:41.885\nSo I'm gonna call it, I don't know,\nEC2 Kid-Gloves, right?\n\n384\n00:18:41.885 --> 00:18:47.917\nI want him to be able to work in EC2, but\nI don't want it to terminate instances,\n\n385\n00:18:47.917 --> 00:18:51.220\nso we'll call it that and\nI can create that.\n\n386\n00:18:51.220 --> 00:18:53.810\nSo now I've got a custom policy, okay.\n\n387\n00:18:53.810 --> 00:18:55.310\nWhen you got a custom policy,\n\n388\n00:18:55.310 --> 00:18:58.390\nit can kind of get lost in the mix\nof all your other policies.\n\n389\n00:18:58.390 --> 00:19:01.400\nSo one of the things I like to do is\ncome in here and under all types,\n\n390\n00:19:01.400 --> 00:19:05.460\nyou can change it to show AWS managed,\njob function or customer managed.\n\n391\n00:19:05.460 --> 00:19:08.170\nAnd if I go to customer managed,\nI'll just see the ones I've created.\n\n392\n00:19:08.170 --> 00:19:09.580\nAnd so there's that Kid-Gloves policy.\n\n393\n00:19:09.580 --> 00:19:13.804\nNow Daniel's most recent question, cuz I\njust answered your one, two questions ago.\n\n394\n00:19:13.804 --> 00:19:14.528\n&gt;&gt; [LAUGH].\n\n395\n00:19:14.528 --> 00:19:15.370\n&gt;&gt; Was, is it doing anything?\n\n396\n00:19:15.370 --> 00:19:18.030\nAnd no, it's not doing anything,\ncuz attach entities is zero.\n\n397\n00:19:18.030 --> 00:19:21.130\nSo I need to attach this somewhere\nto actually make it work.\n\n398\n00:19:21.130 --> 00:19:25.990\nAnd so when you take that policy, under\npolicy actions, you can attach it and\n\n399\n00:19:25.990 --> 00:19:30.310\nnow I can go through and I can attach\nit to people or groups or roles.\n\n400\n00:19:30.310 --> 00:19:33.750\nI see them all right here in the list and\nI can attach more than one.\n\n401\n00:19:33.750 --> 00:19:35.650\nHeck I can attach all of them if I want.\n\n402\n00:19:35.650 --> 00:19:37.240\nProbably a little crazy to go that route.\n\n403\n00:19:37.240 --> 00:19:40.845\nBut, I can do it strictly to Daniel,\nif that's all I wanted.\n\n404\n00:19:40.845 --> 00:19:42.420\nIt's a one time thing.\n\n405\n00:19:42.420 --> 00:19:44.630\nOr more likely I'm going\nto attach it to SysAdmins.\n\n406\n00:19:44.630 --> 00:19:46.908\nAnd then I'll put Daniel\nin the SysAdmins group.\n\n407\n00:19:46.908 --> 00:19:51.170\nAnd now he can do whatever he wants in\nEC2, except for terminated instances.\n\n408\n00:19:51.170 --> 00:19:54.209\nWell in US east one,\nI did limit it to that one region, so\n\n409\n00:19:54.209 --> 00:19:58.820\nin US east one, he can do whatever it\nwants, except for terminate instances.\n\n410\n00:19:58.820 --> 00:20:02.600\nIn other regions,\nhe can do nothing, right?\n\n411\n00:20:02.600 --> 00:20:04.280\nAnd in fact I might want\nto rename this policy and\n\n412\n00:20:04.280 --> 00:20:06.630\ncall it US east one EC2 Kid-Gloves.\n\n413\n00:20:06.630 --> 00:20:11.200\nCuz I may have a US west one or\nUS east something, I don't know,\n\n414\n00:20:11.200 --> 00:20:13.820\ndepending on what I wanna achieve there.\n\n415\n00:20:13.820 --> 00:20:16.180\nBut as it stands,\nnow I got that policy and\n\n416\n00:20:16.180 --> 00:20:18.830\nas soon as I attach it, we're on business.\n\n417\n00:20:18.830 --> 00:20:22.930\nAnd here I did it by modifying the policy,\nin the policy I choose to attach it,\n\n418\n00:20:22.930 --> 00:20:24.220\nyou can do the other way around.\n\n419\n00:20:24.220 --> 00:20:29.740\nI can go to a group and take SysAdmins and\ninside of here if I can go to permissions,\n\n420\n00:20:29.740 --> 00:20:33.210\nI can attach the policy from inside of\nthe group and same thing on the user.\n\n421\n00:20:33.210 --> 00:20:38.360\nI can go to a user and I can pull\nup dilowrie, I can come up here and\n\n422\n00:20:38.360 --> 00:20:43.800\nI can add permissions, which is really\ngoing to be attaching an existing policy,\n\n423\n00:20:43.800 --> 00:20:45.938\nright there, directly to the account and\nnow he's got it.\n\n424\n00:20:45.938 --> 00:20:50.020\nSo you can go either way, usually\neasier to attach from a policy side.\n\n425\n00:20:50.020 --> 00:20:51.978\n&gt;&gt; Well Don,\nthis doesn't seem too difficult.\n\n426\n00:20:51.978 --> 00:20:56.300\nObviously you got to get a little handy,\nwhen it comes to crafting the policies,\n\n427\n00:20:56.300 --> 00:20:58.720\nespecially if you are going\nto to them manually.\n\n428\n00:20:58.720 --> 00:21:00.940\nThe wizard will probably\nbe our friends for\n\n429\n00:21:00.940 --> 00:21:06.250\na little while, until we get a little more\nbetter at using them, but that's great.\n\n430\n00:21:06.250 --> 00:21:08.750\nIt's a viable option, it's really\na viable option to be honest with you.\n\n431\n00:21:08.750 --> 00:21:10.355\nProbably lot of people do it that way.\n\n432\n00:21:10.355 --> 00:21:13.690\nDon, is there anything else that we need\nto know about policy authorization or\n\n433\n00:21:13.690 --> 00:21:14.780\nanything of that ilk?\n\n434\n00:21:14.780 --> 00:21:17.760\n&gt;&gt; The main thing is that policies are the\nright way to do things, so on the exam,\n\n435\n00:21:17.760 --> 00:21:18.790\nwhen you're assigning permissions,\n\n436\n00:21:18.790 --> 00:21:21.770\nyou want to make sure you're\nchoosing answers that use policies.\n\n437\n00:21:21.770 --> 00:21:26.542\nAnd then remember, policies can be reused,\nso you want to keep them fairly generic,\n\n438\n00:21:26.542 --> 00:21:30.520\nso that they can be applied out and\nactually take effect over and over and\n\n439\n00:21:30.520 --> 00:21:33.066\nover again,\nto make the most use out of them.\n\n440\n00:21:33.066 --> 00:21:36.680\nAnd the policies don't cost you money, you\ncan create as many policies as you want.\n\n441\n00:21:36.680 --> 00:21:41.400\nSo create them, make them flexible, make\nthem dynamic and make them, ultimately,\n\n442\n00:21:41.400 --> 00:21:43.860\nmake your job easier if you can,\nif you design them correctly.\n\n443\n00:21:43.860 --> 00:21:45.020\nIf you don't design them correctly,\n\n444\n00:21:45.020 --> 00:21:46.830\nthey can really become as\nburden to manage, right?\n\n445\n00:21:46.830 --> 00:21:49.620\nIf you have a ton of little policies,\nit does become a headache.\n\n446\n00:21:49.620 --> 00:21:52.490\nSo try and keep them as generalized\nas possible so you can reuse them.\n\n447\n00:21:52.490 --> 00:21:56.525\n&gt;&gt; All right, well Don thanks so much for\nexplaining IAM, how we can work with it.\n\n448\n00:21:56.525 --> 00:21:59.430\nOn using the policies,\ncrafting them, applying them,\n\n449\n00:21:59.430 --> 00:22:03.935\nthat can be very helpful for\nus in our every day life in AWS.\n\n450\n00:22:03.935 --> 00:22:06.314\nThat being said it looks like we\nare out of time for this episode,\n\n451\n00:22:06.314 --> 00:22:08.711\nwe do thank you for joining as and\nwe thank you guys for watching.\n\n452\n00:22:08.711 --> 00:22:11.286\nSigning off for\nITProTV I am your host Daniel Lowrie.\n\n453\n00:22:11.286 --> 00:22:12.269\n&gt;&gt; And I am Don Pezet.\n\n454\n00:22:12.269 --> 00:22:13.121\n&gt;&gt; And we'll see you next time\n\n455\n00:22:13.121 --> 00:22:20.507\n[MUSIC]\n\n456\n00:22:20.507 --> 00:22:23.328\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207815511"
        }
      ],
      "title": "AWS Identity and Access Management"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don dive into Amazon's Relational Database Service. Here they explain what Relational Databases are and a bit of how they differ from NoSQL type databases. They then compare and contrast each of the supported relational databases like PostgreSQL, MySQL, and Oracle; finishing the show with RDS licensing models.",
          "length": "1674",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-amazon_relational_database_service-030717.00_27_44_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-amazon_relational_database_service-030717.00_27_44_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-amazon_relational_database_service-030717.00_27_44_17.Still001-sm.jpg",
          "title": "Amazon Relational Database Service",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:02.648\n&gt;&gt; Welcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:02.648 --> 00:00:06.369\n[CROSSTALK]\n\n3\n00:00:06.369 --> 00:00:08.460\n[MUSIC]\n\n4\n00:00:08.460 --> 00:00:12.301\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:12.301 --> 00:00:14.289\n&gt;&gt; Now all right, greetings everyone and\n\n6\n00:00:14.289 --> 00:00:16.766\nwelcome to another great\nepisode of ITPro.TV.\n\n7\n00:00:16.766 --> 00:00:21.416\nI'm your host Daniel Lowrie and in today's\nepisode, we are back with more for\n\n8\n00:00:21.416 --> 00:00:25.021\nour AWS Certified Solutions\nArchitect Associates series.\n\n9\n00:00:25.021 --> 00:00:29.063\nAnd of course, joining us yet again in the\nstudio, our good friend, Mr. Don Pezet.\n\n10\n00:00:29.063 --> 00:00:29.970\nDon, welcome back, sir.\n\n11\n00:00:29.970 --> 00:00:30.985\nWe're so glad to have you today.\n\n12\n00:00:30.985 --> 00:00:32.522\nHow's it going?\n&gt;&gt; Thanks for having me back and\n\n13\n00:00:32.522 --> 00:00:34.261\nI hope you're ready to\ntake a look a new topic.\n\n14\n00:00:34.261 --> 00:00:37.959\nIn this episode, we're gonna be\nkicking off our discussion of, well,\n\n15\n00:00:37.959 --> 00:00:39.605\njust database services in AWS.\n\n16\n00:00:39.605 --> 00:00:40.587\nIn particular,\n\n17\n00:00:40.587 --> 00:00:45.226\nwe're gonna kick off with the Amazon\nRelational Database Service or AWS RDS.\n\n18\n00:00:45.226 --> 00:00:47.466\nWe'll see how many acronyms I\ncan fill in one sentence here.\n\n19\n00:00:47.466 --> 00:00:51.062\nBut basically, the relational\ndatabase service is a part of AWS and\n\n20\n00:00:51.062 --> 00:00:54.848\nit's such an amazing service that\nreally changed the way a lot of people\n\n21\n00:00:54.848 --> 00:00:57.141\ndo business because databases are tough.\n\n22\n00:00:57.141 --> 00:00:58.421\nThey're difficult to get right.\n\n23\n00:00:58.421 --> 00:01:01.960\nThey're really, really, really,\nreally, really important and\n\n24\n00:01:01.960 --> 00:01:03.189\nreally easy to mess up.\n\n25\n00:01:03.189 --> 00:01:06.489\nAnd if you mess them up,\nthe sad part is that it's not they work or\n\n26\n00:01:06.489 --> 00:01:07.477\nthey don't work.\n\n27\n00:01:07.477 --> 00:01:10.139\nYou can actually have a database\nthat appears to be working, but\n\n28\n00:01:10.139 --> 00:01:12.150\nis working way slower than it should be.\n\n29\n00:01:12.150 --> 00:01:15.998\nPerformance optimization and things\nlike that, keeping them maintained and\n\n30\n00:01:15.998 --> 00:01:19.669\nup to date, that's challenging with\ndatabases and it's critical data so\n\n31\n00:01:19.669 --> 00:01:22.426\ntaking it offline to do\nmaintenance pretty difficult.\n\n32\n00:01:22.426 --> 00:01:26.730\nWhen we switch into RDS, we let Amazon\ntake care of all that stuff for us, and\n\n33\n00:01:26.730 --> 00:01:28.563\nwe just chuck our data in there.\n\n34\n00:01:28.563 --> 00:01:33.020\nIt's really a great solution to have and\nwe need to understand what's available,\n\n35\n00:01:33.020 --> 00:01:34.942\nwhat options are available for us.\n\n36\n00:01:34.942 --> 00:01:37.598\nSo, we make sure to choose the right\ndeployment model for our customers.\n\n37\n00:01:37.598 --> 00:01:38.953\nSo, that's what we're gonna\ntake a look at right here.\n\n38\n00:01:38.953 --> 00:01:40.979\nYeah, Don, you said, databases were tough.\n\n39\n00:01:40.979 --> 00:01:45.353\nAnd as soon as database exited your mouth,\nI started flop sweating and going like-\n\n40\n00:01:45.353 --> 00:01:46.278\n&gt;&gt; [LAUGH]\n\n41\n00:01:46.278 --> 00:01:48.394\n&gt;&gt; Man, it's database, cuz they are.\n\n42\n00:01:48.394 --> 00:01:51.183\nThey're very difficult, but\nthey are a part of business.\n\n43\n00:01:51.183 --> 00:01:54.568\nI mean, if you're running any\nkind of Enterprise level at all,\n\n44\n00:01:54.568 --> 00:01:59.146\neven midsize companies, you've probably\ngot a database running around somewhere,\n\n45\n00:01:59.146 --> 00:02:01.609\nkeeping records, something to that effect.\n\n46\n00:02:01.609 --> 00:02:05.498\nSo, we'd have to be able to understand and\n\n47\n00:02:05.498 --> 00:02:11.774\nthen Amazon providing us a database\nas a service is a very nice thing.\n\n48\n00:02:11.774 --> 00:02:13.118\nThat being said, where do we begin?\n\n49\n00:02:13.118 --> 00:02:16.894\nHow do we kick off using\nAmazon's database services?\n\n50\n00:02:16.894 --> 00:02:20.512\n&gt;&gt; Well, the most common type of database\nout there today is what's called\n\n51\n00:02:20.512 --> 00:02:21.769\na relational database.\n\n52\n00:02:21.769 --> 00:02:25.225\nNow, there's really two main\ntypes of databases that we see.\n\n53\n00:02:25.225 --> 00:02:26.633\nThere's actually a ton of different types.\n\n54\n00:02:26.633 --> 00:02:29.353\nBut out in the production world,\nthere's really two types that we see.\n\n55\n00:02:29.353 --> 00:02:33.097\nThere's relational databases and\nthere's NoSQL databases.\n\n56\n00:02:33.097 --> 00:02:35.337\nSo, let's kind of talk\nabout what those are and\n\n57\n00:02:35.337 --> 00:02:37.641\nthen how we know when to\nuse one versus the other.\n\n58\n00:02:37.641 --> 00:02:41.385\nRelational databases are the most popular,\nbecause they're the most powerful.\n\n59\n00:02:41.385 --> 00:02:44.741\nThey have the most functionality\nas far as getting your data in and\n\n60\n00:02:44.741 --> 00:02:46.398\npulling out interesting data.\n\n61\n00:02:46.398 --> 00:02:49.334\nThey just don't perform as\nwell as a NoSQL database,\n\n62\n00:02:49.334 --> 00:02:51.891\nwhich is really geared\ntowards performance.\n\n63\n00:02:51.891 --> 00:02:55.763\nSo one is geared towards function,\none is geared towards performance.\n\n64\n00:02:55.763 --> 00:02:58.449\nNow on the function side,\nwe have relational databases and\n\n65\n00:02:58.449 --> 00:03:01.843\nthey work on a very simple idea which\nis you have data structured in a table.\n\n66\n00:03:01.843 --> 00:03:03.802\nSo, I've got an example of\na table pulled up here.\n\n67\n00:03:03.802 --> 00:03:09.170\nSo, this just kind of a really simple\nexample of a table and I've got students.\n\n68\n00:03:09.170 --> 00:03:11.363\nFirst name, last name, gender and age.\n\n69\n00:03:11.363 --> 00:03:13.763\nAll the information that I don't\nthink we're really allowed to ask for\n\n70\n00:03:13.763 --> 00:03:14.447\nstudents anymore.\n\n71\n00:03:14.447 --> 00:03:15.143\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n72\n00:03:15.143 --> 00:03:19.064\nthat's what we've got a nd then there's\na student idea associated with each one.\n\n73\n00:03:19.064 --> 00:03:22.264\nNow if you've ever been to college,\nyou know that you're not a name,\n\n74\n00:03:22.264 --> 00:03:25.040\nyou're number and\nthat number is really important.\n\n75\n00:03:25.040 --> 00:03:28.262\nBut in the relational database, that\nnumber is important for another reason.\n\n76\n00:03:28.262 --> 00:03:32.824\nIn a relational database,\nyou'll have one column, like StudentID,\n\n77\n00:03:32.824 --> 00:03:35.280\nthat's enforcing uniqueness.\n\n78\n00:03:35.280 --> 00:03:39.429\nIn other words, no two students\nshould have the same StudentID.\n\n79\n00:03:39.429 --> 00:03:42.661\nI might have many students\nwith the first name of John.\n\n80\n00:03:42.661 --> 00:03:45.435\nI might have many students\nwith the last name of Smith.\n\n81\n00:03:45.435 --> 00:03:49.733\nI might even have several students that\nare both John Smith and that's okay.\n\n82\n00:03:49.733 --> 00:03:52.467\nIt's okay for\ntwo people to have the same name, but\n\n83\n00:03:52.467 --> 00:03:56.549\nI've gotta have some way to tell them\napart and that StudentID is how I do it.\n\n84\n00:03:56.549 --> 00:04:00.555\nSo, we're gonna have one column that's\nreferred to as a primary key and\n\n85\n00:04:00.555 --> 00:04:02.604\nthat's what enforces uniqueness.\n\n86\n00:04:02.604 --> 00:04:06.224\nThat's what identifies each row or\neach record set.\n\n87\n00:04:06.224 --> 00:04:10.058\nYou'll hear that terminology that\nin a table you have columns,\n\n88\n00:04:10.058 --> 00:04:13.182\nwhich are the kind of vertical\ncollection of data and\n\n89\n00:04:13.182 --> 00:04:16.603\nthen you have rows which would\nbe a single entity in here.\n\n90\n00:04:16.603 --> 00:04:18.149\nWell, that row is called a record set.\n\n91\n00:04:18.149 --> 00:04:22.853\nSo this record, Joe Dusty is a record or\nAndrea Romanov is a record.\n\n92\n00:04:22.853 --> 00:04:24.784\nThose are individual people in this case.\n\n93\n00:04:24.784 --> 00:04:27.067\nIt could be shoes or inventory.\n\n94\n00:04:27.067 --> 00:04:28.251\nIt could be any number of things.\n\n95\n00:04:28.251 --> 00:04:29.957\nHere it just happens to be people.\n\n96\n00:04:29.957 --> 00:04:33.072\nAs a single table,\nthis is not a relational database.\n\n97\n00:04:33.072 --> 00:04:34.704\nThis is a spreadsheet.\n\n98\n00:04:34.704 --> 00:04:37.531\nI could do this in Excel,\nit's not a big deal.\n\n99\n00:04:37.531 --> 00:04:41.829\nWhere the relational part comes in is I\nmay have a table somewhere else that's\n\n100\n00:04:41.829 --> 00:04:43.824\nsomething completely different.\n\n101\n00:04:43.824 --> 00:04:48.208\nThat's something like students\nregistered for a particular course.\n\n102\n00:04:48.208 --> 00:04:50.704\nStudents registered for Economics 101.\n\n103\n00:04:50.704 --> 00:04:55.190\nAnd in the student list,\ninstead of having to put Joe Dusty and\n\n104\n00:04:55.190 --> 00:05:01.680\nall his information in there, I can just\nput that student 101 or 1001 is in there.\n\n105\n00:05:01.680 --> 00:05:05.415\nSo when I look at that course,\nI look at Economics 101,\n\n106\n00:05:05.415 --> 00:05:09.851\nI see student 1001 and\nstudent 1004, but that's all I see.\n\n107\n00:05:09.851 --> 00:05:11.237\nI don't see a name.\n\n108\n00:05:11.237 --> 00:05:13.765\nI don't see an age,\nI don't see other information like this.\n\n109\n00:05:13.765 --> 00:05:15.483\nWhere do I get that other data?\n\n110\n00:05:15.483 --> 00:05:19.120\nWell, it's a relational data base,\nI can take both tables.\n\n111\n00:05:19.120 --> 00:05:23.728\nI can take the table for Economics 101 and\nI can take the table from my students.\n\n112\n00:05:23.728 --> 00:05:28.350\nAnd when I look at Economics 101 and\nI find StudentID 1001, I can look at this\n\n113\n00:05:28.350 --> 00:05:32.720\ntable and say, that's Joe Dusty and\nI get the information put together.\n\n114\n00:05:32.720 --> 00:05:36.485\nThe two tables are related\nby this primary key.\n\n115\n00:05:36.485 --> 00:05:38.533\nThat's what makes a relational database.\n\n116\n00:05:38.533 --> 00:05:40.944\nNow on a positive side,\nthat makes them really powerful.\n\n117\n00:05:40.944 --> 00:05:42.085\nI can store my data.\n\n118\n00:05:42.085 --> 00:05:43.589\nI don't have to store tons\nof different copies of it.\n\n119\n00:05:43.589 --> 00:05:45.765\nI can have it kind of\nlinked in right here.\n\n120\n00:05:45.765 --> 00:05:49.745\nAnd then when I run my queries,\nI can pull from more than one table.\n\n121\n00:05:49.745 --> 00:05:52.827\nThere is my power, but\nwhere is the performance?\n\n122\n00:05:52.827 --> 00:05:55.365\nOn the performance, I'm having to\nread from more than one table.\n\n123\n00:05:55.365 --> 00:05:58.765\nI'm able to jump all over a disk or\nall over indexes in RAM and\n\n124\n00:05:58.765 --> 00:06:02.500\nit takes a lot of work to reach in,\nand get this data.\n\n125\n00:06:02.500 --> 00:06:04.300\nSo, that's kind of\na challenge that we have.\n\n126\n00:06:04.300 --> 00:06:08.008\nBut as far as putting data in and\nmaking good use out of it,\n\n127\n00:06:08.008 --> 00:06:10.422\nthat functionality's right here.\n\n128\n00:06:10.422 --> 00:06:15.329\nNow when we look at a database, databases\nkinda fall onto two different models.\n\n129\n00:06:15.329 --> 00:06:19.169\nThere's OLAP and OLTP.\n\n130\n00:06:19.169 --> 00:06:25.473\nOLAP is Online Analysis Processing and\nOLTP is Online Transaction Processing.\n\n131\n00:06:25.473 --> 00:06:27.883\nSo, transactions versus analysis.\n\n132\n00:06:27.883 --> 00:06:30.710\nAnalysis is when I'm\nreading from the database.\n\n133\n00:06:30.710 --> 00:06:33.409\nI'm analyzing the data\nthat I've already got.\n\n134\n00:06:33.409 --> 00:06:36.801\nTransaction OLTP is when\nI'm changing my data.\n\n135\n00:06:36.801 --> 00:06:39.745\nI'm performing a transaction,\nI'm adding data to the database.\n\n136\n00:06:39.745 --> 00:06:43.307\nWell, relational databases do\nreally well with transactions.\n\n137\n00:06:43.307 --> 00:06:44.471\nI can write my data here.\n\n138\n00:06:44.471 --> 00:06:47.486\nI can reference primary keys which\nminimizes the data I have to write, so\n\n139\n00:06:47.486 --> 00:06:48.830\nit keeps things nice and small.\n\n140\n00:06:49.830 --> 00:06:52.120\nBut on the analysis side,\n\n141\n00:06:52.120 --> 00:06:54.660\nI am having to read from more than one\ntable and that causes a bit of a problem.\n\n142\n00:06:55.810 --> 00:06:59.440\nOn a NoSQL database, it is different.\n\n143\n00:06:59.440 --> 00:07:02.869\nOn an NoSQL database, we don't\nhave those relationships in place.\n\n144\n00:07:02.869 --> 00:07:05.683\nAnd so when we go to read data,\nwe can read it very fast,\n\n145\n00:07:05.683 --> 00:07:08.028\nbecause all of the data\nis together already.\n\n146\n00:07:08.028 --> 00:07:09.813\nI don't have to go to a bunch\nof different places to get it.\n\n147\n00:07:09.813 --> 00:07:11.283\nBut when we write data,\n\n148\n00:07:11.283 --> 00:07:15.115\nI've gotta write full sets of\nthe data in more than one place.\n\n149\n00:07:15.115 --> 00:07:17.483\nSo, it's very inefficient when\nit comes to writing the data.\n\n150\n00:07:17.483 --> 00:07:19.819\nThe databases are much larger\nthan they normally would be.\n\n151\n00:07:19.819 --> 00:07:22.187\nSo they're not great for transactions,\nthose are great for analysis.\n\n152\n00:07:22.187 --> 00:07:26.185\nSo, that's normally what's gonna dictate\nwhether we're choosing a relational\n\n153\n00:07:26.185 --> 00:07:27.904\ndatabase versus a NoSQL database.\n\n154\n00:07:27.904 --> 00:07:30.187\nNow, what does NoSQL mean?\n\n155\n00:07:30.187 --> 00:07:34.825\nWell, in the relational database world,\nrelational databases have been around\n\n156\n00:07:34.825 --> 00:07:38.925\na long time and most of them share\na standard communications language and\n\n157\n00:07:38.925 --> 00:07:42.553\nthat language is called SQL or\nthe Structured Query Language and\n\n158\n00:07:42.553 --> 00:07:45.739\nit's not on the exam, but\njust for your own reference.\n\n159\n00:07:45.739 --> 00:07:48.843\nYou'll hear some people say,\nSQL and some people say, SQL.\n\n160\n00:07:48.843 --> 00:07:52.369\nTechnically, SQL is\nthe structured query language.\n\n161\n00:07:52.369 --> 00:07:54.706\nSQL is a product from Microsoft.\n\n162\n00:07:54.706 --> 00:07:58.515\nSo we're talking about the Microsoft's\nSQL Server, yeah, it's SQL there and\n\n163\n00:07:58.515 --> 00:08:00.207\nit's their product and whatever.\n\n164\n00:08:00.207 --> 00:08:02.636\nBut when we talk about SQL,\nwe're talking about the query language,\n\n165\n00:08:02.636 --> 00:08:03.346\nthe standard ones.\n\n166\n00:08:03.346 --> 00:08:06.690\nSo in open source products,\nwe're always talking about SQL.\n\n167\n00:08:06.690 --> 00:08:09.280\nIn Microsoft land,\nyou might be talking about SQL or SQL.\n\n168\n00:08:09.280 --> 00:08:13.520\nSo you hear that kind of terminology get\nthrown around a bit and it gets confusing.\n\n169\n00:08:13.520 --> 00:08:18.503\n&gt;&gt; Don, which types of database\ndo the Amazon relational database\n\n170\n00:08:18.503 --> 00:08:20.079\nservices support?\n\n171\n00:08:20.079 --> 00:08:24.099\n&gt;&gt; All right, so that's kind of the neat\npart with Amazon's RDS is when you deploy\n\n172\n00:08:24.099 --> 00:08:27.560\na relational database,\nthey support six different engines.\n\n173\n00:08:27.560 --> 00:08:30.050\nWe'll see when you actually go\nto deploy a little bit later,\n\n174\n00:08:30.050 --> 00:08:32.590\nyou'll see where we create\nan Oracle database.\n\n175\n00:08:32.590 --> 00:08:36.945\nWe can do MySQL,\nwe can do MariaDB, PostgreSQL,\n\n176\n00:08:36.945 --> 00:08:42.564\nMicrosoft SQL, and\nthe most important one, Amazon AuroraDB.\n\n177\n00:08:42.564 --> 00:08:47.196\nThere's all these different choices,\nthey let you pick.\n\n178\n00:08:47.196 --> 00:08:50.551\nYou can pick an engine and deploy, and\nthen you throw your data on top of it.\n\n179\n00:08:50.551 --> 00:08:52.552\nNow the data we throw on top of\nit is really gonna be the same,\n\n180\n00:08:52.552 --> 00:08:53.284\nthe tables, right?\n\n181\n00:08:53.284 --> 00:08:56.322\nThe primary keys and foreign keys,\nand all gets tied together.\n\n182\n00:08:56.322 --> 00:08:58.847\nSo if I pick AuroraDB or MySQL or MariaDB,\n\n183\n00:08:58.847 --> 00:09:02.897\nwell all three of those were\ndirectly compatible with each other.\n\n184\n00:09:02.897 --> 00:09:04.826\nSo I can actually have the same\ndata to throw any of those three.\n\n185\n00:09:04.826 --> 00:09:06.992\nMicrosoft SQL is a little bit different,\nbut\n\n186\n00:09:06.992 --> 00:09:09.445\nyou still have tables,\nprimary keys and all that.\n\n187\n00:09:09.445 --> 00:09:11.568\nSo you can throw your data in there and\nyou're in business.\n\n188\n00:09:11.568 --> 00:09:16.221\nOracle, same way, then we can chunk that\nin there and now our system's up, and\n\n189\n00:09:16.221 --> 00:09:17.762\ngoing and happy, right?\n\n190\n00:09:17.762 --> 00:09:20.099\nSo if we decide we're gonna\ndeploy a relational database,\n\n191\n00:09:20.099 --> 00:09:22.203\nwe need to figure out which\nengine we're gonna use and\n\n192\n00:09:22.203 --> 00:09:25.310\nthere's some things that'll\nimpact that decision, right?\n\n193\n00:09:25.310 --> 00:09:28.790\nBut the other thing is,\nbefore you even get that far,\n\n194\n00:09:28.790 --> 00:09:32.450\nis do we want a relational data base,\nor do we want NoSQL?\n\n195\n00:09:32.450 --> 00:09:35.970\nSo if I'm gonna be doing transactions,\nI want a relational data base.\n\n196\n00:09:35.970 --> 00:09:38.235\nIf I'm gonna be doing analysis,\nI want NoSQL.\n\n197\n00:09:38.235 --> 00:09:40.310\nBut what if I'm doing both?\n\n198\n00:09:40.310 --> 00:09:41.260\nA lot of us are, right?\n\n199\n00:09:41.260 --> 00:09:45.647\nIf you're doing both, well usually\nif you're doing both OLTP and OLAP,\n\n200\n00:09:45.647 --> 00:09:47.780\nyou just do a relational database.\n\n201\n00:09:47.780 --> 00:09:48.866\nThat's the way, and that's why relational\ndatabases are the most common in\n\n202\n00:09:48.866 --> 00:09:49.648\nthe world,\nbecause they do both well enough, right?\n\n203\n00:09:49.648 --> 00:09:54.360\nBut as you grow and\nyou get to be bigger, and bigger, and\n\n204\n00:09:54.360 --> 00:10:00.100\nbigger, eventually the analysis\nside is gonna start to hurt.\n\n205\n00:10:00.100 --> 00:10:03.373\nAnd so in that scenario\nthe solution is to do both.\n\n206\n00:10:03.373 --> 00:10:08.147\nThat you have a relational database for\nyour transactions and\n\n207\n00:10:08.147 --> 00:10:11.003\na NoSQL database for your analysis.\n\n208\n00:10:11.003 --> 00:10:12.669\nFor example, Amazon's website.\n\n209\n00:10:12.669 --> 00:10:15.336\nIf you go to Amazon,\nthe shopping website, not AWS.\n\n210\n00:10:15.336 --> 00:10:19.209\nIf you go the shopping website, and\nDaniel and I were talking about Star Trek,\n\n211\n00:10:19.209 --> 00:10:20.395\nDeep Space 9, right?\n\n212\n00:10:20.395 --> 00:10:22.218\nSo I wanna go and buy the DVD set.\n\n213\n00:10:22.218 --> 00:10:24.338\nSo I go and do a search for the DVDs.\n\n214\n00:10:24.338 --> 00:10:27.282\nWell Amazon sells a few\nproducts don't they?\n\n215\n00:10:27.282 --> 00:10:31.479\nProbably a few million products, so I\nwanna do a search across all their product\n\n216\n00:10:31.479 --> 00:10:33.685\ndatabases to find the Deep Space 9 DVDs.\n\n217\n00:10:33.685 --> 00:10:36.622\nAnd there might be individual seasons,\nbox sets, and all sorts of stuff.\n\n218\n00:10:36.622 --> 00:10:37.840\nIt's got to find all that,\nreturn it to me.\n\n219\n00:10:37.840 --> 00:10:39.980\nIt's a big database, that's an analysis.\n\n220\n00:10:39.980 --> 00:10:42.455\nI'm doing a scan across that\ndata to pull it back, right?\n\n221\n00:10:42.455 --> 00:10:43.490\nThat's a simple example.\n\n222\n00:10:43.490 --> 00:10:46.700\nI might be talking about data cubes or\npivotal data or whatever,\n\n223\n00:10:46.700 --> 00:10:48.270\nwhere it's really complex.\n\n224\n00:10:48.270 --> 00:10:52.170\nBut even a simple query like that over\na massive database, takes a lot of effort.\n\n225\n00:10:52.170 --> 00:10:54.890\nWell, they have a NoSQL\ndatabase that powers that.\n\n226\n00:10:54.890 --> 00:10:56.490\nAnd so I'm gonna be able to\nfind that information very,\n\n227\n00:10:56.490 --> 00:10:58.490\nvery quickly and get it back.\n\n228\n00:10:58.490 --> 00:11:01.575\nBut then the moment I go to buy something,\nnow I'm creating an order,\n\n229\n00:11:01.575 --> 00:11:04.369\nan order that's gotta be entered\nin on a database on their end.\n\n230\n00:11:04.369 --> 00:11:08.147\nAnd so there will be a relational database\nthat ties the order to my user account and\n\n231\n00:11:08.147 --> 00:11:09.977\nso on, it gets kind of placed in there.\n\n232\n00:11:09.977 --> 00:11:12.442\nYou maintain both databases.\n\n233\n00:11:12.442 --> 00:11:13.354\nAnd when you do that,\n\n234\n00:11:13.354 --> 00:11:16.315\nyou will have transactions going\non in the transactional database.\n\n235\n00:11:16.315 --> 00:11:19.648\nAnd then periodically you will do\nbatch operations to write what is in\n\n236\n00:11:19.648 --> 00:11:24.140\nthe relational data base into the NoSQL\ndatabase, so it can be there for analysis.\n\n237\n00:11:24.140 --> 00:11:27.110\nA lot of times,\nour analysis doesn't need to be real time.\n\n238\n00:11:27.110 --> 00:11:29.320\nSo it doesn't have to be run\nagainst the relational database.\n\n239\n00:11:29.320 --> 00:11:31.247\nWe can just sync it over once a day or\nonce an hour or\n\n240\n00:11:31.247 --> 00:11:34.043\nhowever often we want to do that,\nand get great performance out of it.\n\n241\n00:11:34.043 --> 00:11:39.030\nSo your solution might not be one database\nor the other, it might be both, and\n\n242\n00:11:39.030 --> 00:11:41.620\nimplementing them in a great way.\n\n243\n00:11:41.620 --> 00:11:45.368\nNow where that becomes challenging is\nthe management side of things, right?\n\n244\n00:11:45.368 --> 00:11:48.457\nIf I wanna deploy a database server,\n\n245\n00:11:48.457 --> 00:11:53.352\nI wanna bring it up in AWS,\nwell I can do it myself, right?\n\n246\n00:11:53.352 --> 00:11:55.987\nI don't have to use Amazon's RDS.\n\n247\n00:11:55.987 --> 00:11:57.975\nI can just spin up an EC2 instance,\ncouldn't I?\n\n248\n00:11:57.975 --> 00:11:59.317\nIf I spin up an EC2 instance,\n\n249\n00:11:59.317 --> 00:12:01.911\nI can install whatever database\nI want in there, right?\n\n250\n00:12:01.911 --> 00:12:04.518\nSo I want to fire up PostgreSQL.\n\n251\n00:12:04.518 --> 00:12:05.377\nI don't know if I\nmentioned that one earlier.\n\n252\n00:12:05.377 --> 00:12:06.016\n&gt;&gt; You did.\n\n253\n00:12:06.016 --> 00:12:06.723\n&gt;&gt; I did.\nGood, okay, so\n\n254\n00:12:06.723 --> 00:12:07.976\nthat's another one that's supported.\n\n255\n00:12:07.976 --> 00:12:09.036\nI want to fire up PostgreSQL.\n\n256\n00:12:09.036 --> 00:12:12.591\nWell it's open source, it's free,\nso is MariaDB, so is MySQL.\n\n257\n00:12:12.591 --> 00:12:16.102\nMySQL, there's a weird\nlicense because of Oracle.\n\n258\n00:12:16.102 --> 00:12:18.384\nBut MariaDB is completely open and\nI wanna deploy one of those.\n\n259\n00:12:18.384 --> 00:12:20.437\nThey don't cost money, so\n\n260\n00:12:20.437 --> 00:12:26.166\nwhy pay extra to Amazon when I can just\nspin up an easy tuit from the data base.\n\n261\n00:12:26.166 --> 00:12:28.735\nDone, you can,\nyou can certainly do that, right?\n\n262\n00:12:28.735 --> 00:12:32.120\nYou've got a few different options, I got\na little table here that kind of shows it.\n\n263\n00:12:32.120 --> 00:12:36.490\nWe can do an on-premises data base,\nwhere we don't pay Amazon anything.\n\n264\n00:12:36.490 --> 00:12:38.250\nI'm gonna stand up my own\nserver with my own database,\n\n265\n00:12:38.250 --> 00:12:39.920\nall gonna be right here, okay?\n\n266\n00:12:39.920 --> 00:12:42.970\nBut what this table is showing,\nis what you're responsible for.\n\n267\n00:12:42.970 --> 00:12:46.834\nAnd if you do an on-premises server,\nyou're responsible for everything, right?\n\n268\n00:12:46.834 --> 00:12:49.864\nYou gotta do it, you gotta do power and\ncooling, rack and stack,\n\n269\n00:12:49.864 --> 00:12:51.850\nserver maintenance, all of that.\n\n270\n00:12:51.850 --> 00:12:55.880\nAll the way up to app optimization,\nthe whole thing, you're responsible for.\n\n271\n00:12:55.880 --> 00:12:58.550\nSo if anything goes wrong, it's your\nproblem, you get to deal with it.\n\n272\n00:12:58.550 --> 00:13:02.734\nAnd if you got a cracked\nteam of database experts,\n\n273\n00:13:02.734 --> 00:13:06.130\nthen by all means run your own database.\n\n274\n00:13:06.130 --> 00:13:07.757\nIt's gonna be great,\nyou have your own farm,\n\n275\n00:13:07.757 --> 00:13:09.236\neverything would be wonderful, right?\n\n276\n00:13:09.236 --> 00:13:12.164\nBut most of us don't have an amazing\nteam of database experts, or\n\n277\n00:13:12.164 --> 00:13:13.881\nwe might have some database experts.\n\n278\n00:13:13.881 --> 00:13:16.293\nBut they can only do so\nmuch in a given day, so\n\n279\n00:13:16.293 --> 00:13:19.108\nwe don't necessarily have\nthe resources we need.\n\n280\n00:13:19.108 --> 00:13:20.807\nAnd that's where AWS comes in.\n\n281\n00:13:20.807 --> 00:13:24.894\nNow I could deploy my own database\non top of an EC2 instance,\n\n282\n00:13:24.894 --> 00:13:26.827\nit will be cheaper, right?\n\n283\n00:13:26.827 --> 00:13:30.224\nIt will be cheaper, but that's\nbecause you're getting less services.\n\n284\n00:13:30.224 --> 00:13:32.680\nIf you look, when you do that deployment,\n\n285\n00:13:32.680 --> 00:13:35.967\nin EC2 instance Amazon provides\nthe power and cooling.\n\n286\n00:13:35.967 --> 00:13:38.414\nThey provide the rack and stack,\neven the server maintenance.\n\n287\n00:13:38.414 --> 00:13:40.750\nYou've discs fail, they resolve all that.\n\n288\n00:13:40.750 --> 00:13:43.010\nThey take care of the OS installation, but\n\n289\n00:13:43.010 --> 00:13:45.470\nthen after that it's\nall turned over to you.\n\n290\n00:13:45.470 --> 00:13:47.810\nAnd everything else,\noperating system patches,\n\n291\n00:13:47.810 --> 00:13:50.920\nsoftware installation,\nengine patches, backups.\n\n292\n00:13:50.920 --> 00:13:55.477\nAll of that is up to you, and\nsome of it's pretty hard to set up.\n\n293\n00:13:55.477 --> 00:13:58.395\nWe'll see you later, we're gonna\ntalk about multi AZ deployments,\n\n294\n00:13:58.395 --> 00:14:01.427\nwhen we spread our database across\navailability zones for redundancy.\n\n295\n00:14:01.427 --> 00:14:03.314\nThat can be difficult to set up.\n\n296\n00:14:03.314 --> 00:14:04.508\n&gt;&gt; I think I just had a mild heart attack.\n\n297\n00:14:04.508 --> 00:14:05.985\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n298\n00:14:05.985 --> 00:14:07.356\n&gt;&gt; I know, well if you think about all\n\n299\n00:14:07.356 --> 00:14:08.546\nthe stuff involved, right?\n\n300\n00:14:08.546 --> 00:14:10.910\nSo I've got two servers now,\ntwo database servers.\n\n301\n00:14:10.910 --> 00:14:12.531\nI've gotta have them\ntalking to each other.\n\n302\n00:14:12.531 --> 00:14:14.490\nI've gotta have security\ngroups that allow it.\n\n303\n00:14:14.490 --> 00:14:16.440\nI might have multiple\nVPCs that have to talk or\n\n304\n00:14:16.440 --> 00:14:18.620\njust multiple subnets in the same VPC.\n\n305\n00:14:18.620 --> 00:14:21.447\nSo I've got networking,\nI've got security, I've got performance,\n\n306\n00:14:21.447 --> 00:14:24.098\nall this different-\n&gt;&gt; I am in full cardiac arrest at this\n\n307\n00:14:24.098 --> 00:14:24.875\npoint, Don.\n\n308\n00:14:24.875 --> 00:14:27.237\n&gt;&gt; Its a big burden even if\nyou know what you are doing.\n\n309\n00:14:27.237 --> 00:14:29.638\n&gt;&gt; Yeah.\n&gt;&gt; It's a lot of stuff to get done.\n\n310\n00:14:29.638 --> 00:14:33.310\nBut if we deploy with RDS,\nlook at this column.\n\n311\n00:14:33.310 --> 00:14:36.390\nLook at all the stuff that\nAmazon takes care of for us.\n\n312\n00:14:36.390 --> 00:14:40.710\nThey take care of everything, even\nthe high availability and the scaling.\n\n313\n00:14:40.710 --> 00:14:41.610\nYou don't even have to confirm,\n\n314\n00:14:41.610 --> 00:14:45.120\nit's literally a check box,\nyou hit when you spin up the database.\n\n315\n00:14:45.120 --> 00:14:47.240\nThe only thing you have\nto do is up optimization,\n\n316\n00:14:47.240 --> 00:14:49.530\nbecause Amazon has no idea\nwhat your app is, right?\n\n317\n00:14:49.530 --> 00:14:52.600\nSo if you've written a web\napplication that ties into this,\n\n318\n00:14:52.600 --> 00:14:54.800\nwell it's up to your web\napplication to do things right.\n\n319\n00:14:54.800 --> 00:14:56.221\nBut on the back end,\n\n320\n00:14:56.221 --> 00:15:01.080\nyou can take advantage of the amazing\ndatabase team that Amazon has.\n\n321\n00:15:01.080 --> 00:15:05.112\nAnd really you'd be hard pressed to find\na company in this planet that has a better\n\n322\n00:15:05.112 --> 00:15:09.171\ndatabase team than AWS, because of the\nmassive amount of data that they handle.\n\n323\n00:15:09.171 --> 00:15:11.811\n&gt;&gt; And not only that, but\nthey are a 24/7 shop, right?\n\n324\n00:15:11.811 --> 00:15:15.573\nWhereas if you have it on-prem,\nyou got a team, maybe they're really good.\n\n325\n00:15:15.573 --> 00:15:16.480\nBut they go to sleep, and\n\n326\n00:15:16.480 --> 00:15:17.784\nthey're probably all in the same-\n\n327\n00:15:17.784 --> 00:15:18.638\n&gt;&gt; [LAUGH]\n&gt;&gt; Time zone.\n\n328\n00:15:18.638 --> 00:15:21.466\nWhereas AWS people, some people go to\nsleep, and another person comes to work.\n\n329\n00:15:21.466 --> 00:15:22.015\n&gt;&gt; Yep.\n\n330\n00:15:22.015 --> 00:15:23.012\n&gt;&gt; It's 24/7.\n\n331\n00:15:23.012 --> 00:15:24.116\nThey're always looking at it.\n\n332\n00:15:24.116 --> 00:15:26.702\n&gt;&gt; Yeah, this is the whole\neconomies of scale argument,\n\n333\n00:15:26.702 --> 00:15:29.525\nthat they're on a scale that's\nfar above most companies.\n\n334\n00:15:29.525 --> 00:15:32.475\nAnd so as a result,\nwe can benefit from teaming up with them.\n\n335\n00:15:32.475 --> 00:15:36.182\nHere at ITPro.TV, we've got some\nnew databases that power or site.\n\n336\n00:15:36.182 --> 00:15:39.382\nWe can't watch them 24 hours a day,\nwe don't have the staff for that.\n\n337\n00:15:39.382 --> 00:15:42.288\nAnd if we were to start to see failures or\nwhatever,\n\n338\n00:15:42.288 --> 00:15:46.220\nwe might not be performing the right\nmaintenance on a routine level.\n\n339\n00:15:46.220 --> 00:15:48.650\nWe definitely don't have\npeople running 24/7.\n\n340\n00:15:48.650 --> 00:15:50.861\nBut Amazon does, so\nwe put our databases up there and\n\n341\n00:15:50.861 --> 00:15:52.328\nnow we benefit from that, right?\n\n342\n00:15:52.328 --> 00:15:54.028\nWe get that kind of protection and\n\n343\n00:15:54.028 --> 00:15:56.767\nall we have to do is just make\nsure our data is in there.\n\n344\n00:15:56.767 --> 00:15:57.869\nAnd then we get to run,\n\n345\n00:15:57.869 --> 00:16:00.711\nwe focus on our data which is\nthe whole point of a database.\n\n346\n00:16:00.711 --> 00:16:05.199\nWe dont focus on the actual Instances,\nthe operating systems and the patches and\n\n347\n00:16:05.199 --> 00:16:09.550\nthe backups, high availability,\nall that stuff, Amazon deals with it.\n\n348\n00:16:09.550 --> 00:16:11.640\nSo that's really the way that we wanna go.\n\n349\n00:16:11.640 --> 00:16:15.880\nAnd that's true with relational databases,\nas well as NoSQL, and\n\n350\n00:16:15.880 --> 00:16:18.950\nas well as any other type of database\nthat you might choose to deploy.\n\n351\n00:16:18.950 --> 00:16:21.910\nIf we do a managed service with Amazon,\nit's a little more expensive.\n\n352\n00:16:21.910 --> 00:16:24.510\nBut it's absolutely worth it, and\n\n353\n00:16:24.510 --> 00:16:26.261\nnow we don't have to worry\nabout all these other elements.\n\n354\n00:16:26.261 --> 00:16:30.450\n&gt;&gt; All right, Don now that we have\nan idea of our responsibilities,\n\n355\n00:16:30.450 --> 00:16:33.730\nwhat the service affords\nus that we can do, and\n\n356\n00:16:33.730 --> 00:16:37.980\na little bit about databases that are\nsupported by them, where do we go to next?\n\n357\n00:16:37.980 --> 00:16:38.990\nWhat's the next step?\n\n358\n00:16:38.990 --> 00:16:39.680\n&gt;&gt; All right, well,\n\n359\n00:16:39.680 --> 00:16:42.570\nthe next step would actually be\ncreating one of these databases.\n\n360\n00:16:42.570 --> 00:16:45.360\nNow, I don't have enough time in this\nepisode to go through it all and\n\n361\n00:16:45.360 --> 00:16:48.300\nget it in detail, so we'll do a part two.\n\n362\n00:16:48.300 --> 00:16:52.330\nBut before we create it, one of\nthe first things it's gonna ask us, and\n\n363\n00:16:52.330 --> 00:16:53.160\nI'll show you here.\n\n364\n00:16:53.160 --> 00:16:55.310\nI'm in the RDS dashboard, right?\n\n365\n00:16:55.310 --> 00:16:58.120\nSo when I go into the Amazon Relational\nDatabase Service, if you don't\n\n366\n00:16:58.120 --> 00:17:01.420\nhave a database yet, it's gonna launch\nthe wizard so you can create one.\n\n367\n00:17:01.420 --> 00:17:02.470\nAnd when you go to create one,\n\n368\n00:17:02.470 --> 00:17:06.020\nthe first question is,\nwhich database that you want to run.\n\n369\n00:17:06.020 --> 00:17:07.920\nSo we've got six to choose from.\n\n370\n00:17:07.920 --> 00:17:11.490\nSo let's focus on this decision here then\nwe'll put the rest off in the next part.\n\n371\n00:17:11.490 --> 00:17:14.000\n&gt;&gt; Coolest logo obviously wins.\n\n372\n00:17:14.000 --> 00:17:15.310\n&gt;&gt; Which one do you think is coolest?\n\n373\n00:17:15.310 --> 00:17:17.140\n&gt;&gt; That would be the elephant.\n\n374\n00:17:17.140 --> 00:17:19.400\n[LAUGH]\n&gt;&gt; Yeah, yeah, I hate the seal and\n\n375\n00:17:19.400 --> 00:17:24.100\nOracle it might as well have\ndollar signs in each end [LAUGH].\n\n376\n00:17:24.100 --> 00:17:29.530\nAll right, I joke about but let's\ntalk about those dollar signs, right?\n\n377\n00:17:29.530 --> 00:17:32.130\nNot every database software is free.\n\n378\n00:17:32.130 --> 00:17:35.930\nWhen you look at Amazon Aurora,\nMySQL and MariaDB.\n\n379\n00:17:35.930 --> 00:17:39.600\nThose three are all related,\ncuz they come from the same code base.\n\n380\n00:17:39.600 --> 00:17:44.870\nMySQL was an open source project that\nwas created as a community database that\n\n381\n00:17:44.870 --> 00:17:49.350\nwas adopted and used by tens of thousands\nof organizations across the planet.\n\n382\n00:17:49.350 --> 00:17:51.790\nVery well accepted, very well respected.\n\n383\n00:17:51.790 --> 00:17:57.050\nThe challenge there was that\nOracle eventually took over MySQL.\n\n384\n00:17:57.050 --> 00:18:00.777\nSo Oracle has their own\ncommercial private code\n\n385\n00:18:00.777 --> 00:18:05.200\nbased database effectively controls MySQL.\n\n386\n00:18:05.200 --> 00:18:09.615\nAnd when that happens it\nstopped being as fully open,\n\n387\n00:18:09.615 --> 00:18:11.220\nlike the licensing changed on it.\n\n388\n00:18:11.220 --> 00:18:15.380\nAnd a lot of people have licensing deals\nthey have to deal with on this stuff.\n\n389\n00:18:15.380 --> 00:18:17.265\nSo it's important to them,\nsome of us don't care.\n\n390\n00:18:17.265 --> 00:18:20.475\nI'm like well, whatever,\nOracle we'll stick with MySQL.\n\n391\n00:18:20.475 --> 00:18:23.590\nBut many people were unhappy\nwith that licensing.\n\n392\n00:18:23.590 --> 00:18:26.630\nAnd so what happened was there\nwas a fork of that project.\n\n393\n00:18:26.630 --> 00:18:31.250\nAnd the community people that were working\non MySQL just took the code base and said,\n\n394\n00:18:31.250 --> 00:18:34.380\nall right, we're gonna develop it\nseparately with our own licensing\n\n395\n00:18:34.380 --> 00:18:38.240\nstructure that makes it freely available\nto use without any obligation to Oracle.\n\n396\n00:18:38.240 --> 00:18:40.590\nAnd that's what led to MariaDB.\n\n397\n00:18:40.590 --> 00:18:44.700\nMySQL and\nMariaDB are effectively the same thing.\n\n398\n00:18:44.700 --> 00:18:47.250\nMariaDB is a fork of MySQL.\n\n399\n00:18:47.250 --> 00:18:51.920\nAnd ever since that fork, now there's\nchanges being introduced to MariaDB that\n\n400\n00:18:51.920 --> 00:18:53.800\naren't in MySQL, and vice versa.\n\n401\n00:18:53.800 --> 00:18:56.540\nThere's changes to MySQL that\naren't present in MariaDB.\n\n402\n00:18:56.540 --> 00:19:00.960\nBut as far as standard functionality,\nthey behave identically.\n\n403\n00:19:00.960 --> 00:19:04.880\nThe tables, the indexes, when you\nimport or export data, the commands,\n\n404\n00:19:04.880 --> 00:19:06.360\nthey're all the same.\n\n405\n00:19:06.360 --> 00:19:09.270\nWell, the commands are now slightly\ndifferent because MariaDB has a slightly\n\n406\n00:19:09.270 --> 00:19:12.150\ndifferent executable, but\nall the command line arguments and stuff,\n\n407\n00:19:12.150 --> 00:19:14.810\nthat's the same, and\nhow you interact with them.\n\n408\n00:19:14.810 --> 00:19:16.490\nSo choosing between MySQL and\n\n409\n00:19:16.490 --> 00:19:22.130\nMariaDB is really a decision of licensing,\nwhether you're really worried about that.\n\n410\n00:19:22.130 --> 00:19:24.220\nBut they are both free, okay?\n\n411\n00:19:24.220 --> 00:19:29.980\nAmazon's Aurora is Amazon's\nown fork of MySQL.\n\n412\n00:19:29.980 --> 00:19:32.110\nAnd so it split off of the same base.\n\n413\n00:19:32.110 --> 00:19:37.370\nSee how it says, a high performance, MySQL\ncompatible enterprise-class database.\n\n414\n00:19:37.370 --> 00:19:39.090\nWhat Amazon did is, they took MySQL and\n\n415\n00:19:39.090 --> 00:19:44.200\nthey said all right, we're gonna tweak it\nand make it run better in our cloud space.\n\n416\n00:19:44.200 --> 00:19:48.590\nSo it's fully compatible, all of the stuff\nyou do with MySQL and MariaDB for\n\n417\n00:19:48.590 --> 00:19:52.010\nthat matter, works the same way\non Amazon Aurora, all right?\n\n418\n00:19:52.010 --> 00:19:55.010\nAnd it's gonna do it more efficiently.\n\n419\n00:19:55.010 --> 00:19:57.580\nSo if I have to choose,\nif somebody ever comes to me and\n\n420\n00:19:57.580 --> 00:20:00.680\nI have to choose between these three,\nI always chose Amazon Aurora, right?\n\n421\n00:20:00.680 --> 00:20:04.580\nYou get better performance, that's one\npart, but the real reason I choose it is,\n\n422\n00:20:04.580 --> 00:20:07.320\nlet's see if we can find it here,\nthis guy right here.\n\n423\n00:20:07.320 --> 00:20:13.350\nUp to 15 promotable Read Replicas with\nless than ten milliseconds of lag.\n\n424\n00:20:13.350 --> 00:20:18.740\nWhen Amazon created AuroraDB, they\nfocused on improving certain functions,\n\n425\n00:20:18.740 --> 00:20:21.430\nand one of those was\nthe high availability of it.\n\n426\n00:20:21.430 --> 00:20:24.980\nThat I can have a primary database, right?\n\n427\n00:20:24.980 --> 00:20:28.700\nIn a relational database server, it's\nreally difficult to balance out where your\n\n428\n00:20:28.700 --> 00:20:32.160\nrights are going,\nbecause you have to synchronize it.\n\n429\n00:20:32.160 --> 00:20:34.490\nAnd so, in a relational database server,\nyou have one primary.\n\n430\n00:20:34.490 --> 00:20:36.970\nAnd all of your writes\noccur on the primary.\n\n431\n00:20:36.970 --> 00:20:39.410\nAnd then you can have\na number of read replicas.\n\n432\n00:20:39.410 --> 00:20:42.570\nAnd your reads can be spread all\nacross those if you want, right?\n\n433\n00:20:42.570 --> 00:20:45.370\nBut by default,\nall your writes happen on one.\n\n434\n00:20:45.370 --> 00:20:49.110\nThat's why transactions can be\na little bit challenging on\n\n435\n00:20:49.110 --> 00:20:52.000\na no SQL database where the performance\nstarts to take that hit.\n\n436\n00:20:52.000 --> 00:20:55.090\nBut we can have up to 15\npromotable Read Replicas.\n\n437\n00:20:55.090 --> 00:20:59.620\nIf you look at MySQL or if you look at\nMariaDB, actually they don't say it here\n\n438\n00:20:59.620 --> 00:21:03.060\nbut you can't have 15, I think\nthe limit is, it's either four or six.\n\n439\n00:21:03.060 --> 00:21:06.670\nSo you far less replicas that\ncan be supported by them.\n\n440\n00:21:06.670 --> 00:21:09.791\nSo it's not as robust as\nfar as availability and\n\n441\n00:21:09.791 --> 00:21:12.139\nbeing able to spread out like that.\n\n442\n00:21:12.139 --> 00:21:16.138\nAnd we see we can do up to 244 gigs of\nmemory or 32 CPUs, up to 6 terabyte\n\n443\n00:21:16.138 --> 00:21:20.080\ndatabase and as I look at the other ones,\nwe'll see pretty much the same.\n\n444\n00:21:20.080 --> 00:21:23.686\nWell ,let me get up to 64\nterabytes of auto scaling storage.\n\n445\n00:21:23.686 --> 00:21:29.432\nBut you will see kind of similar numbers\nas you move between them.Here the database\n\n446\n00:21:29.432 --> 00:21:34.542\nsize is up to 6 terabytes but when we\nget to Aurora we can go up even higher.\n\n447\n00:21:34.542 --> 00:21:38.180\nSo Aurora has some benefits and its\ngenerally the one you are going to want if\n\n448\n00:21:38.180 --> 00:21:40.566\nyou are looking for\na free relational database.\n\n449\n00:21:40.566 --> 00:21:45.251\nNow I am doing it disservice to\nPostgreSQL It is also open source.\n\n450\n00:21:45.251 --> 00:21:49.496\nIt's really like the original open source\ndatabase that is freely available.\n\n451\n00:21:49.496 --> 00:21:50.261\nIt's been around a long time.\n\n452\n00:21:50.261 --> 00:21:52.110\nVery robust, very mature.\n\n453\n00:21:52.110 --> 00:21:55.240\nIt saw a decline in popularity for\na few years but\n\n454\n00:21:55.240 --> 00:21:56.560\nthat's changed in the last two years.\n\n455\n00:21:56.560 --> 00:22:01.260\nWe're actually seeing PostgreSQL pop up a\nlot more and so you're starting to see it.\n\n456\n00:22:01.260 --> 00:22:05.700\nNotice it's the most Oracle compatible\nopen-source database, right?\n\n457\n00:22:05.700 --> 00:22:09.630\nThis one doesn't care about MySQL\nlike MariaDB and AuroraDB does.\n\n458\n00:22:09.630 --> 00:22:12.460\nThis one is trying to get\nus close to the actual\n\n459\n00:22:12.460 --> 00:22:16.640\nOracle commercial products possible,\nwhich makes it great for larger datasets.\n\n460\n00:22:16.640 --> 00:22:20.930\nMySQL, Aurora and MariaDB perform\nthat with medium and small datasets.\n\n461\n00:22:20.930 --> 00:22:23.040\nPostgreSQL does it better with large ones.\n\n462\n00:22:23.040 --> 00:22:26.847\nSo heavy reliability and stability,\nbut still open source and free, right?\n\n463\n00:22:28.160 --> 00:22:31.690\nThen we get into Oracle and\nMicrosoft SQL Server.\n\n464\n00:22:31.690 --> 00:22:35.530\nThese are the two big players on\nthe commercial data base market.\n\n465\n00:22:35.530 --> 00:22:41.900\nOracle is like the data base company,\nthat's what they do, that's their primary\n\n466\n00:22:41.900 --> 00:22:45.440\nbread and butter they focus on, they live\nand breathe, this is what they make.\n\n467\n00:22:45.440 --> 00:22:48.350\nAnd it's documented many,\n\n468\n00:22:48.350 --> 00:22:51.950\nmany times how Oracle databases perform\nbetter than any other database out there.\n\n469\n00:22:51.950 --> 00:22:57.250\nSo this is the best,\nthis the Mercedes Benz of databases.\n\n470\n00:22:57.250 --> 00:23:00.045\nBut much like a Mercedes,\nit's not An inexpensive item,\n\n471\n00:23:00.045 --> 00:23:01.255\nit's definitely not free.\n\n472\n00:23:01.255 --> 00:23:04.645\nSo when we go with an Oracle database,\nyou got to pay, right?\n\n473\n00:23:04.645 --> 00:23:08.805\nAnd there's these like enterprise edition\nthat says free tier eligible with a very,\n\n474\n00:23:08.805 --> 00:23:10.075\nvery small data set.\n\n475\n00:23:10.075 --> 00:23:12.095\nBut once you start throwing your\nlarge amounts of data in there and\n\n476\n00:23:12.095 --> 00:23:13.405\nyour replicas, you've got to pay.\n\n477\n00:23:13.405 --> 00:23:16.385\nAnd there is a licensing fee and\nit's not inexpensive, right?\n\n478\n00:23:16.385 --> 00:23:17.635\nWe do have to pay for that.\n\n479\n00:23:17.635 --> 00:23:19.690\nSame thing with Microsoft SQL Server.\n\n480\n00:23:19.690 --> 00:23:22.320\nMicrosoft SQL Server been around\na long time, very mature.\n\n481\n00:23:22.320 --> 00:23:24.230\nOne of Microsoft's first products.\n\n482\n00:23:24.230 --> 00:23:26.580\nIt's been around that long.\n\n483\n00:23:26.580 --> 00:23:29.670\nBut Microsoft isn't a database company,\nright?\n\n484\n00:23:29.670 --> 00:23:34.010\nThey're an operating system and video game\nand ten thousand other things, right?\n\n485\n00:23:34.010 --> 00:23:35.890\nThey do a lot of different things.\n\n486\n00:23:35.890 --> 00:23:39.540\nSo their SQL server is very well\nrespected, very widely deployed, but\n\n487\n00:23:39.540 --> 00:23:44.250\nnot as tuned and optimized as Oracle is.\n\n488\n00:23:44.250 --> 00:23:48.030\nOracle is really an amazing\nset of software.\n\n489\n00:23:48.030 --> 00:23:51.890\nBut again, Microsoft SQL has licensing\nfees that you've got to pay.\n\n490\n00:23:51.890 --> 00:23:54.750\nNow, how you pay those is up to you.\n\n491\n00:23:54.750 --> 00:23:56.144\nYou can pay them through Amazon.\n\n492\n00:23:56.144 --> 00:24:01.134\nThat when you spin up an instance, if I\npick an oracle instance for example, and\n\n493\n00:24:01.134 --> 00:24:05.900\nI go to launch, yeah it's free tier\neligible, but when I go to deploy it I'm\n\n494\n00:24:05.900 --> 00:24:09.960\ngonna see that if I do a redundant one,\nit's gonna cost money.\n\n495\n00:24:09.960 --> 00:24:13.300\nIf I do a non-redundant one,\nit's free usage tier.\n\n496\n00:24:13.300 --> 00:24:14.470\nI'm gonna want redundancy.\n\n497\n00:24:14.470 --> 00:24:16.730\nSo just immediately,\nI'm gonna have to pay for that.\n\n498\n00:24:16.730 --> 00:24:21.851\nAnd so now I've got to kind of pay for\nthe license that I'm using.\n\n499\n00:24:21.851 --> 00:24:25.450\nNow there's two different types\nof methods for licensing this.\n\n500\n00:24:25.450 --> 00:24:30.000\nThere's the licensing through your hourly\nrate that you pay for the database.\n\n501\n00:24:30.000 --> 00:24:34.080\nSo when we spin up a database instance,\nif I take a look at like Oracle, for\n\n502\n00:24:34.080 --> 00:24:37.890\nexample, it's kind of hard to do\napples to apples on some of these,\n\n503\n00:24:37.890 --> 00:24:39.660\nbecause of the way the pricing is.\n\n504\n00:24:39.660 --> 00:24:44.860\nBut you'll see a,\nlet's do a memory optimized R3 large,\n\n505\n00:24:44.860 --> 00:24:49.840\nfor Aurora DB,\nis at $0.29 per hour, right?\n\n506\n00:24:49.840 --> 00:24:55.240\nBut if I switch over to Oracle,\nand I look for a memory optimized\n\n507\n00:24:55.240 --> 00:24:59.840\nR3 large, it's $0.45 an hour, right?\n\n508\n00:24:59.840 --> 00:25:03.630\nSo $0.15 or $0.16 more per hour,\nthat's the license, right?\n\n509\n00:25:03.630 --> 00:25:05.480\nYou're paying extra for\nthat Oracle license.\n\n510\n00:25:05.480 --> 00:25:08.008\nOn the backend the support from\nAmazon's really the same, but\n\n511\n00:25:08.008 --> 00:25:09.495\nthe license is what we pay extra for.\n\n512\n00:25:09.495 --> 00:25:11.458\n&gt;&gt; Don, what if I already have a license,\n\n513\n00:25:11.458 --> 00:25:14.860\nwhat if I've already bought an Oracle\ndatabase or a Microsoft SQL?\n\n514\n00:25:15.940 --> 00:25:16.928\n&gt;&gt; For a small company or\n\n515\n00:25:16.928 --> 00:25:18.720\na medium company,\nthat's probably not the case, right?\n\n516\n00:25:18.720 --> 00:25:20.560\nSo you probably don't\nhave your own license and\n\n517\n00:25:20.560 --> 00:25:25.040\nit's hard to beat the pricing that Amazon\ngets because their economies of scale, so\n\n518\n00:25:25.040 --> 00:25:27.168\nthey're getting licenses\ncheaper than we do.\n\n519\n00:25:27.168 --> 00:25:31.370\nBut if you're an educational institution,\nodds are you got educational pricing and\n\n520\n00:25:31.370 --> 00:25:33.210\nAmazon sure didn't, right.\n\n521\n00:25:33.210 --> 00:25:37.000\nOr maybe you're bigger than Amazon,\nplenty companies are.\n\n522\n00:25:37.000 --> 00:25:39.081\nAnd so\nyou may get better pricing than they do.\n\n523\n00:25:39.081 --> 00:25:40.600\nYou might already have your license.\n\n524\n00:25:40.600 --> 00:25:43.850\nAnd so\nyou can do a bring your own license model.\n\n525\n00:25:43.850 --> 00:25:48.510\nAnd when you do that, it lowers\nthe price back down to a standard rate.\n\n526\n00:25:48.510 --> 00:25:52.640\nAnd you're responsible for providing\nthe license to run that instance.\n\n527\n00:25:52.640 --> 00:25:54.340\nIf you were to spin up\nyour own EC2 instance and\n\n528\n00:25:54.340 --> 00:25:56.110\ndo this, you'd have to provide\nyour own license there.\n\n529\n00:25:56.110 --> 00:25:58.141\nBut you can do it here through RDS also.\n\n530\n00:25:58.141 --> 00:25:59.560\nAnd so that brings that price back down.\n\n531\n00:25:59.560 --> 00:26:02.720\nSo you can reuse your own\nlicense with Microsoft SQL and\n\n532\n00:26:02.720 --> 00:26:04.950\nwith Oracle, you can do that.\n\n533\n00:26:04.950 --> 00:26:08.250\nYou can load it in and that'll bring\nthe cost down because you've already paid.\n\n534\n00:26:08.250 --> 00:26:11.770\nBut where it gets challenging is\nfiguring out how the licensing works.\n\n535\n00:26:11.770 --> 00:26:13.380\nBecause products like Oracle,\n\n536\n00:26:13.380 --> 00:26:17.270\nthey used to license based on\nhow many physical CPUs you had.\n\n537\n00:26:17.270 --> 00:26:22.713\nSo if I had two CPUs, well I had to have\ntwo licenses, right, one for each CPU.\n\n538\n00:26:22.713 --> 00:26:27.360\nBut if I had one CPU with four\ncores they treated that as one CPU.\n\n539\n00:26:27.360 --> 00:26:32.680\nBut when you're on a virtual server,\nhow does it know how many physical CPUs or\n\n540\n00:26:32.680 --> 00:26:34.060\nhow many virtual CPUs you have?\n\n541\n00:26:34.060 --> 00:26:36.170\nHow many cores versus physical sockets?\n\n542\n00:26:36.170 --> 00:26:37.391\nIt doesn't.\n\n543\n00:26:37.391 --> 00:26:42.038\nAnd so Oracle just a few weeks ago changed\ntheir licensing to say we're not worried\n\n544\n00:26:42.038 --> 00:26:47.280\nabout physical sockets any more,\nnow we're gonna license it based on cores.\n\n545\n00:26:47.280 --> 00:26:49.810\nAnd basically overnight\ntheir pricing doubled.\n\n546\n00:26:49.810 --> 00:26:51.800\nAnd so it becomes very, very expensive.\n\n547\n00:26:51.800 --> 00:26:54.260\nSo that's where bringing your own\nlicense can really come in handy,\n\n548\n00:26:54.260 --> 00:26:57.850\ncuz you can actually dictate what that\nlicense needs to be versus with Amazon.\n\n549\n00:26:57.850 --> 00:26:59.420\nWell, Amazon has a little\nextra visibility.\n\n550\n00:26:59.420 --> 00:27:00.840\nThey kinda know the sockets\non the backend.\n\n551\n00:27:00.840 --> 00:27:03.026\nSo it's up to you which way you wanna go.\n\n552\n00:27:03.026 --> 00:27:05.050\nAnd you can kinda price it out,\nbased on your environment,\n\n553\n00:27:05.050 --> 00:27:06.920\nwhich one's going to be more effective for\nyou.\n\n554\n00:27:06.920 --> 00:27:09.430\nBut licensing is definitely\nsomething that's gonna impact which\n\n555\n00:27:09.430 --> 00:27:10.350\ndatabase you choose.\n\n556\n00:27:10.350 --> 00:27:11.630\n&gt;&gt; Now Don, I hate to cut you off.\n\n557\n00:27:11.630 --> 00:27:13.990\nWe're really getting into\nthe nitty gritty here,\n\n558\n00:27:13.990 --> 00:27:17.490\nthe good stuff, the biting into\nthe meat on the bone, as it were.\n\n559\n00:27:17.490 --> 00:27:19.790\nBut we are well out of time for\nthis episode.\n\n560\n00:27:19.790 --> 00:27:22.030\nWe did already talk to you guys\nabout there gonna be a part two.\n\n561\n00:27:22.030 --> 00:27:23.460\nThere's gonna be a part two.\n&gt;&gt; [LAUGH]\n\n562\n00:27:23.460 --> 00:27:24.990\n&gt;&gt; Lot of good information to come though.\n\n563\n00:27:24.990 --> 00:27:26.900\nWe do look forward to that.\n\n564\n00:27:26.900 --> 00:27:30.090\nDon, thank you so much for\ngetting us thus far.\n\n565\n00:27:30.090 --> 00:27:31.760\nLook forward to seeing\nyou there on part two.\n\n566\n00:27:31.760 --> 00:27:33.650\nWe look forward to\nseeing you guys as well.\n\n567\n00:27:33.650 --> 00:27:36.780\nBut it is that time for\nus to sign off for this episode.\n\n568\n00:27:36.780 --> 00:27:38.420\nI've been your host, Daniel Lowrie.\n\n569\n00:27:38.420 --> 00:27:39.240\n&gt;&gt; And I'm Don Pezet.\n\n570\n00:27:39.240 --> 00:27:41.129\n&gt;&gt; And we'll see you next time.\n\n571\n00:27:41.129 --> 00:27:47.199\n[MUSIC]\n\n572\n00:27:47.199 --> 00:27:50.612\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "207816212"
        },
        {
          "description": "In this episode, Daniel and Don jump back into their discussion about Amazon Relational Database Services. They pick up by exploring the RDS storage options and backup and recovery features. Next they describe deploying RDS in a Multi-AZ environment. Finally they cover scaling, both up and out, and security options.",
          "length": "1472",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-2-amazon_relational_database_service_pt2-030817.00_27_58_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-2-amazon_relational_database_service_pt2-030817.00_27_58_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-1-2-amazon_relational_database_service_pt2-030817.00_27_58_16.Still001-sm.jpg",
          "title": "Amazon Relational Database Service Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:06.552\nWelcome to ITPRO.TV,\nI'm your host Don Pezet [CROSSTALK]\n\n2\n00:00:06.552 --> 00:00:08.293\n[MUSIC]\n\n3\n00:00:08.293 --> 00:00:12.187\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.187 --> 00:00:14.196\n&gt;&gt; All right, greetings everyone, and\n\n5\n00:00:14.196 --> 00:00:16.790\nwelcome to another great\nepisode of ITPro.TV.\n\n6\n00:00:16.790 --> 00:00:20.504\nI'm your host, Daniel Lowrie, and in\ntoday's episode we're moving forward with\n\n7\n00:00:20.504 --> 00:00:22.965\nmore on our\nAmazon Certified Solutions Architect, and\n\n8\n00:00:22.965 --> 00:00:24.296\nthat is the associate level.\n\n9\n00:00:24.296 --> 00:00:27.895\nOf course, joining us in the studio yet\nagain our good friend, Mr. Don Pezet.\n\n10\n00:00:27.895 --> 00:00:28.620\nDon, welcome back, sir.\n\n11\n00:00:28.620 --> 00:00:29.695\nHow goes it today?\n\n12\n00:00:29.695 --> 00:00:30.366\n&gt;&gt; It goes great, Daniel.\n\n13\n00:00:30.366 --> 00:00:31.078\nThanks for having me back.\n\n14\n00:00:31.078 --> 00:00:34.545\nI'm ready to continue our relational\ndatabase service adventure.\n\n15\n00:00:34.545 --> 00:00:38.265\nIn the last episode we talked a lot\nabout the RDS just in general and\n\n16\n00:00:38.265 --> 00:00:40.725\nsome of the different database\nengines that are supported in it.\n\n17\n00:00:40.725 --> 00:00:43.911\nIn this episode I wanna focus a little\nmore some of the details that when we\n\n18\n00:00:43.911 --> 00:00:45.964\nactually go to deploy\none of these databases.\n\n19\n00:00:45.964 --> 00:00:48.258\nWhat are all the different options\nthat we have available to us.\n\n20\n00:00:48.258 --> 00:00:51.692\nAnd the things that we can tweak and\ncharacteristics we can change\n\n21\n00:00:51.692 --> 00:00:55.758\nto make the database operate the way that\nwe want it so today it's detail day.\n\n22\n00:00:55.758 --> 00:01:01.366\n&gt;&gt; All right well and\nwhen you're speaking of databases.\n\n23\n00:01:01.366 --> 00:01:04.769\n[LAUGH] That's right we are always\nthinking storage where are we gonna put\n\n24\n00:01:04.769 --> 00:01:08.618\nthis database and that's a crucial factor\nwhen it comes to databases because a lot\n\n25\n00:01:08.618 --> 00:01:11.328\nof times we need speed and\nthen we also need reliability.\n\n26\n00:01:11.328 --> 00:01:15.026\nDon, what options do we have\nwhen it comes to storage in AWS.\n\n27\n00:01:15.026 --> 00:01:19.718\n&gt;&gt; All right, the key thing to remember\nhere is that with the relational database\n\n28\n00:01:19.718 --> 00:01:23.643\nservice it is a database engine\nrunning on top of EC2 instances.\n\n29\n00:01:23.643 --> 00:01:26.120\nNow, the EC2 instances are hidden from us.\n\n30\n00:01:26.120 --> 00:01:29.047\nThey are,\nwell not completely hidden from us,\n\n31\n00:01:29.047 --> 00:01:32.866\nbut we don't necessarily see\nthem in our EC2 panel, right.\n\n32\n00:01:32.866 --> 00:01:34.820\nAnd we're not supposed\nto interact with them.\n\n33\n00:01:34.820 --> 00:01:37.920\nBut that means the underlying technology's\nsomething we're already familiar with.\n\n34\n00:01:37.920 --> 00:01:42.610\nWe actually have the same storage options\nthat we do when we set up an EC2 instance.\n\n35\n00:01:42.610 --> 00:01:44.510\nBut we're not so\nworried about the operating system, and\n\n36\n00:01:44.510 --> 00:01:46.704\nwe're not worried about ephemeral\nstorage and things like that.\n\n37\n00:01:46.704 --> 00:01:48.781\nWe're dealing with elastic block store,\nand\n\n38\n00:01:48.781 --> 00:01:52.150\nwe're dealing with data that's going\nto be persistent for the database.\n\n39\n00:01:52.150 --> 00:01:54.768\nAnd we're just worried about\nthe database's storage,\n\n40\n00:01:54.768 --> 00:01:56.031\nnot the operating system.\n\n41\n00:01:56.031 --> 00:01:59.131\nSo, while it is the same\ntechnology under the hood,\n\n42\n00:01:59.131 --> 00:02:01.530\nwe don't have to worry about most of it.\n\n43\n00:02:01.530 --> 00:02:03.110\nAnd we can just focus on our database.\n\n44\n00:02:03.110 --> 00:02:07.800\nSo, we do have the same choices as far\nas doing like magnetic storage or SSD or\n\n45\n00:02:07.800 --> 00:02:09.070\nprovisioned iOps.\n\n46\n00:02:09.070 --> 00:02:10.560\nAnd that's gonna be important.\n\n47\n00:02:10.560 --> 00:02:12.590\nBecause with a database, a lot of times,\n\n48\n00:02:12.590 --> 00:02:13.980\nyou're gonna want provision to iOPs,\nright?\n\n49\n00:02:13.980 --> 00:02:17.010\nThat's going to be your big concern.\n\n50\n00:02:17.010 --> 00:02:20.875\nWith the database disk activity,\nis a huge bottleneck, for most of us.\n\n51\n00:02:20.875 --> 00:02:22.519\nEspecially if you're doing OLTP.\n\n52\n00:02:22.519 --> 00:02:25.370\nSo I'll just jump into the console\nhere and start to whip up a database.\n\n53\n00:02:25.370 --> 00:02:28.218\nNow, when I fire up the database,\nI'm gonna see different options,\n\n54\n00:02:28.218 --> 00:02:29.728\ndepending on which engine I choose.\n\n55\n00:02:29.728 --> 00:02:32.410\nAnd that is gonna impact\nmy decisions that I make.\n\n56\n00:02:32.410 --> 00:02:37.051\nI'm gonna start with, I'll do MariaDB,\nor I'll go straight up my SQL, right?\n\n57\n00:02:37.051 --> 00:02:39.230\nWell, we'll do Maria, why not?\n\n58\n00:02:39.230 --> 00:02:41.960\nWhen I choose this, and I go to fire it\nup, I'm gonna get a little message here.\n\n59\n00:02:41.960 --> 00:02:45.260\nAnd see how, what they're saying is\nIf we're deploying in a production\n\n60\n00:02:45.260 --> 00:02:48.830\nenvironment, we can use MariaDB, but\n\n61\n00:02:48.830 --> 00:02:52.320\nthey're recommending I use Aurora,\nall right?\n\n62\n00:02:52.320 --> 00:02:55.220\nAurora is completely compatible\nwith MySQL and MariaDB, so\n\n63\n00:02:55.220 --> 00:02:57.440\nthere's really no reason not to use it.\n\n64\n00:02:57.440 --> 00:02:58.630\nMore importantly,\n\n65\n00:02:58.630 --> 00:03:02.694\nAmazon is more tightly integrated\ninto Aurora because they made it.\n\n66\n00:03:02.694 --> 00:03:05.430\n[LAUGH] And so\nwe get better performance characteristics.\n\n67\n00:03:05.430 --> 00:03:06.990\nBut if you look at MariaDB,\n\n68\n00:03:06.990 --> 00:03:11.140\nhere we can chose whether we\nusing Provisioned iOPS or not.\n\n69\n00:03:11.140 --> 00:03:14.010\nWith Aurora,\nthey automatically managed that for us.\n\n70\n00:03:14.010 --> 00:03:17.370\nSo if I chose the Aurora side, we won't\nget the choice to pick from storage.\n\n71\n00:03:17.370 --> 00:03:22.077\nSo I'm gonna intentionally chose MariaDB\nhere to make sure I get my storage choices\n\n72\n00:03:22.077 --> 00:03:26.193\nand as I move forward it's gonna ask\nme to pick my instance type, right?\n\n73\n00:03:26.193 --> 00:03:30.160\nAnd when I look at the instance type I'll\nsee a ton of different choices here.\n\n74\n00:03:30.160 --> 00:03:35.020\nI've got my t series for testing,\nmy m series for general purpose use, so\n\n75\n00:03:35.020 --> 00:03:38.350\nthat's balance, RAM, CPU and network.\n\n76\n00:03:38.350 --> 00:03:40.940\nAnd then if I look down here,\nI've got my Rs,\n\n77\n00:03:40.940 --> 00:03:44.110\nwhich are the memory-optimized instances.\n\n78\n00:03:44.110 --> 00:03:46.753\nWith a database, we normally want\na memory-optimized instance, right?\n\n79\n00:03:46.753 --> 00:03:49.630\nWe need to be able to cache\nour indexes into RAM.\n\n80\n00:03:49.630 --> 00:03:52.590\nWe need to be able to cache\nfrequently run queries into RAM.\n\n81\n00:03:52.590 --> 00:03:54.500\nAnd so typically,\nwhen we're deploying databases,\n\n82\n00:03:54.500 --> 00:03:58.160\nwe are gonna choose the R\nseries of database instance.\n\n83\n00:03:58.160 --> 00:04:00.362\nAnd see how all of them start with db.?\n\n84\n00:04:00.362 --> 00:04:03.350\nThat's so that we know these\naren't regular EC2 instances.\n\n85\n00:04:03.350 --> 00:04:06.710\nThey're not ones that we're going\nto be able to fully manage.\n\n86\n00:04:06.710 --> 00:04:09.230\nThey're ones that are completely\ncontrolled by RDS and\n\n87\n00:04:09.230 --> 00:04:11.830\nour engine is going to sit on top of them.\n\n88\n00:04:11.830 --> 00:04:16.324\nNow, in addition to choosing that instance\ntype, right after that I'll see my storage\n\n89\n00:04:16.324 --> 00:04:20.393\ntype and when I look at the list I can\npick between magnetic, general purpose and\n\n90\n00:04:20.393 --> 00:04:22.055\nprovision IOPS just like EC2.\n\n91\n00:04:22.055 --> 00:04:25.453\nThe difference here being that\nprovision IOPS is chosen by default,\n\n92\n00:04:25.453 --> 00:04:28.370\nbecause on a database that's\nnormally what we want.\n\n93\n00:04:28.370 --> 00:04:30.012\nWe have a certain level of input and\n\n94\n00:04:30.012 --> 00:04:33.024\noutput operations that we expect\nto be performing per second.\n\n95\n00:04:33.024 --> 00:04:36.460\nAnd so we can define that here and\nhave it reserved.\n\n96\n00:04:36.460 --> 00:04:40.050\nAnd we don't have to worry about the\nunderlying disk structure at all, right?\n\n97\n00:04:40.050 --> 00:04:42.460\nI think about database designs\nthat I've done in the past.\n\n98\n00:04:42.460 --> 00:04:44.280\nIf it's an on-premises server,\n\n99\n00:04:44.280 --> 00:04:47.900\nI've gotta pay a lot of attention\nto what type of disks I'm using.\n\n100\n00:04:47.900 --> 00:04:52.880\nSo in a typical database solution, I might\ndo a RAID 1 mirror for the operating\n\n101\n00:04:52.880 --> 00:04:57.960\nsystem drives and another RAID 1\nmirror for the transaction log drives.\n\n102\n00:04:57.960 --> 00:05:03.970\nAnd then a RAID 10 or a RAID 50\nstripe to hold my actual database.\n\n103\n00:05:03.970 --> 00:05:07.450\nAnd if it's heavy disk IO,\nI might have more than one RAID 10 or\n\n104\n00:05:07.450 --> 00:05:10.162\nRAID 50 stripe to handle\na partition database.\n\n105\n00:05:10.162 --> 00:05:14.006\nOr to split tables out in a different\ndatabase files so that they can be stored,\n\n106\n00:05:14.006 --> 00:05:17.060\nwell, one database file\npartitioned on to multiple drives.\n\n107\n00:05:17.060 --> 00:05:20.630\nSo that I can spread that disk IO\nacross those different arrays.\n\n108\n00:05:20.630 --> 00:05:22.900\nThat can impact performance significantly.\n\n109\n00:05:22.900 --> 00:05:23.845\nIt can make a huge difference.\n\n110\n00:05:23.845 --> 00:05:25.140\nAnd we have to worry about it.\n\n111\n00:05:25.140 --> 00:05:26.930\nHere, we don't have to worry about it.\n\n112\n00:05:26.930 --> 00:05:29.590\nAmazon is taking care of all\nthat under the hood, and\n\n113\n00:05:29.590 --> 00:05:30.980\nthat really makes life easier for us.\n\n114\n00:05:30.980 --> 00:05:35.570\nSo, we can just choose provisioned IOPS\nand then specify the amount of storage and\n\n115\n00:05:35.570 --> 00:05:36.380\nthe IOPS that we need.\n\n116\n00:05:36.380 --> 00:05:39.157\nRemember that if you choose\nthe general purpose SSD,\n\n117\n00:05:39.157 --> 00:05:42.441\nthe size of the storage determines\nwhat your IOPS are gonna be.\n\n118\n00:05:42.441 --> 00:05:45.502\nVersus when we do provision IOPS you\ncan put whatever size you want, and\n\n119\n00:05:45.502 --> 00:05:46.735\nthen dedicate a fixed IOPS.\n\n120\n00:05:46.735 --> 00:05:49.740\nAnd that's typically what you're\ngonna do for databases, right.\n\n121\n00:05:49.740 --> 00:05:52.670\nSo that's a key thing to remember\nwhen we're setting up storage.\n\n122\n00:05:52.670 --> 00:05:56.878\nThe other thing to think about when\nwe talk about storage is the back ups\n\n123\n00:05:56.878 --> 00:05:57.744\nthat we take.\n\n124\n00:05:57.744 --> 00:05:59.380\nWhat if I lose this storage?\n\n125\n00:05:59.380 --> 00:06:02.651\nWell, you probably noticed,\nlet me just back up a screen here.\n\n126\n00:06:02.651 --> 00:06:07.250\nThat when I went to create this,\nI chose MariaDB.\n\n127\n00:06:07.250 --> 00:06:08.340\nAnd I move forward.\n\n128\n00:06:08.340 --> 00:06:11.640\nAnd it was offering to do\na multi AZ deployment, right.\n\n129\n00:06:11.640 --> 00:06:15.640\nSo putting my database in more\nthan one availability zone.\n\n130\n00:06:15.640 --> 00:06:17.690\nAnd that's great, that's what I want.\n\n131\n00:06:17.690 --> 00:06:19.720\nAurora, it does it automatically.\n\n132\n00:06:19.720 --> 00:06:22.717\nMariaDB, it does it automatically\nif I choose this option,\n\n133\n00:06:22.717 --> 00:06:24.906\nif I choose the Dev/Test it doesn't do it.\n\n134\n00:06:24.906 --> 00:06:27.920\nI don't need replicas if it's just dev and\ntest, right?\n\n135\n00:06:27.920 --> 00:06:30.559\nSo I can use a multi-AZ Deployment and\n\n136\n00:06:30.559 --> 00:06:35.025\nit will give me a master database\nthat is up and running in one AZ.\n\n137\n00:06:35.025 --> 00:06:38.659\nAnd it will have a slave\nreplica in another AZ.\n\n138\n00:06:38.659 --> 00:06:41.770\nNow, a lot of us are going\nto create read replicas.\n\n139\n00:06:41.770 --> 00:06:42.690\nRead only replicas,\n\n140\n00:06:42.690 --> 00:06:45.870\nto be able to spread out our read\nactivity to increase performance.\n\n141\n00:06:45.870 --> 00:06:47.555\nThese are not designed for that, right.\n\n142\n00:06:47.555 --> 00:06:52.045\nThese replicas are designed for\nfailover for high availability.\n\n143\n00:06:52.045 --> 00:06:55.914\nSo if you want re-replicas for performance\nyou'll have to spin those off afterwards\n\n144\n00:06:55.914 --> 00:06:57.804\nand it can do that all automatically too.\n\n145\n00:06:57.804 --> 00:07:00.381\nBut when talking about\na multi-AZ deployment\n\n146\n00:07:00.381 --> 00:07:04.885\nthe replica it's making is just for\nredundancy, not for performance, right.\n\n147\n00:07:04.885 --> 00:07:09.197\nBut we can add that support, Amazon Aurora\ndoes that also, as part of the default,\n\n148\n00:07:09.197 --> 00:07:12.294\nand gee,\nyou can throw that one out there and they.\n\n149\n00:07:12.294 --> 00:07:12.858\n&gt;&gt; 1/10th.\n\n150\n00:07:12.858 --> 00:07:15.373\n&gt;&gt; 1/10th the cost, why wouldn't you?\n\n151\n00:07:15.373 --> 00:07:18.520\nI mentioned it to Daniel before this show\nthat the answer is that there is no reason\n\n152\n00:07:18.520 --> 00:07:19.650\nthat you wouldn't like it.\n\n153\n00:07:19.650 --> 00:07:20.780\n&gt;&gt; [LAUGH] That is the answer.\n\n154\n00:07:20.780 --> 00:07:23.890\n&gt;&gt; Yeah, Aurora is completely\ncompatible with MySQL and MariaDB,\n\n155\n00:07:23.890 --> 00:07:27.223\nso if you haven't already,\nyou should really looked into moving that\n\n156\n00:07:27.223 --> 00:07:29.840\npayload over to Aurora because\nit is a great product.\n\n157\n00:07:29.840 --> 00:07:35.296\nBut, you may have an application\nthat specifically requires MySQL.\n\n158\n00:07:35.296 --> 00:07:37.551\nAnd if you deploy it on\nMaria DB it might work fine but\n\n159\n00:07:37.551 --> 00:07:39.657\nyou're not supported by\nthat vendor anymore.\n\n160\n00:07:39.657 --> 00:07:42.323\nWell if you have to choose\nbetween performance and\n\n161\n00:07:42.323 --> 00:07:45.567\nvender support we'll normally\npick vender support right?\n\n162\n00:07:45.567 --> 00:07:48.730\nI know that stinks for the customer\nwho has to experience a slow database\n\n163\n00:07:48.730 --> 00:07:52.225\nquery but the reality is if something\ngoes wrong you need that vender support.\n\n164\n00:07:52.225 --> 00:07:54.982\nSo you gotta do what\nyou're allowed to do But\n\n165\n00:07:54.982 --> 00:07:58.870\nif you can get over to Aurora,\nyou'll usually be better off.\n\n166\n00:07:58.870 --> 00:08:02.962\n&gt;&gt; Alright Don, so lets say that you're\nat work, you're drunk as normal,\n\n167\n00:08:02.962 --> 00:08:05.900\nyou're deleting massive\ntables on your database.\n\n168\n00:08:05.900 --> 00:08:09.360\nHow would you typically go about\nrecovering that kind of thing?\n\n169\n00:08:09.360 --> 00:08:12.760\n&gt;&gt; All right, so a Multi-AZ deployment\ndoes not protect you from yourself.\n\n170\n00:08:12.760 --> 00:08:16.457\nIf I start droppings of table,\nits like the XK CD comic strip, right?\n\n171\n00:08:16.457 --> 00:08:19.220\nThe little bobby tables-\n&gt;&gt; Yeah, the little bobby tables.\n\n172\n00:08:19.220 --> 00:08:22.715\n&gt;&gt; Where his name has a SQL injection\nattacking on a key drop a table.\n\n173\n00:08:22.715 --> 00:08:27.115\nSo, if you drop a table\nthen the table's gone and\n\n174\n00:08:27.115 --> 00:08:32.215\nthat replicates to the other replicas,\nthe ones in the multi-easy deployment.\n\n175\n00:08:32.215 --> 00:08:34.565\nIt's going to replicate across them and\nit's dropped everywhere.\n\n176\n00:08:35.735 --> 00:08:38.475\nIt's not designed to solve that problem.\n\n177\n00:08:38.475 --> 00:08:41.835\nIf you delete something or\nmodify something, it happens.\n\n178\n00:08:41.835 --> 00:08:43.250\nWe still need back ups.\n\n179\n00:08:43.250 --> 00:08:47.520\nAnd one of the nice parts about\nRDS is it does the backups for us.\n\n180\n00:08:47.520 --> 00:08:49.540\nWhen I move forward with\ncreating this database, so\n\n181\n00:08:49.540 --> 00:08:53.630\nif I choose Maria DB and I come in and\nI pick my database size,\n\n182\n00:08:53.630 --> 00:08:58.080\nI pick my storage, I go ahead and do\na Multi-AZ deployment because I want that\n\n183\n00:08:58.080 --> 00:09:02.900\nhigh availability of one AZ goes down,\nmy database is up on another AZ.\n\n184\n00:09:02.900 --> 00:09:05.720\nAnd I'm in business, and\nthen I create my database, so\n\n185\n00:09:05.720 --> 00:09:09.793\nI can specify that,\nI'll just create a dontestdb, and\n\n186\n00:09:09.793 --> 00:09:15.020\nI'll create a user account\nwith my super secret\n\n187\n00:09:15.020 --> 00:09:19.910\nsecure password, and on the next screen\nI'm going to see a ton more options,\n\n188\n00:09:19.910 --> 00:09:23.160\nthings about networking, and\nthe database itself, and so on.\n\n189\n00:09:23.160 --> 00:09:25.410\nBut the one I wanna highlight\nhere is the backup.\n\n190\n00:09:25.410 --> 00:09:28.270\nI can setup a backup enable for this and\n\n191\n00:09:28.270 --> 00:09:31.000\nthe backup enable vary depending\non which engine you choose.\n\n192\n00:09:31.000 --> 00:09:33.770\nSome of them are 24 hours\nsome of then are longer.\n\n193\n00:09:33.770 --> 00:09:36.670\nThis one is defaulting to 7 days and\nthat be fine for me.\n\n194\n00:09:36.670 --> 00:09:42.100\nSo, everyday it's gonna take one backup\nand the whole those backup for 7 days.\n\n195\n00:09:42.100 --> 00:09:45.530\nSo available rollback any\npoint in the last 7 days.\n\n196\n00:09:45.530 --> 00:09:50.140\nAll right.\nWell, great that maybe perfect for me.\n\n197\n00:09:50.140 --> 00:09:52.731\nOr I might want backups that\ngo even further back so\n\n198\n00:09:52.731 --> 00:09:55.211\nthat I can reach back\nfurther in time if need be.\n\n199\n00:09:55.211 --> 00:09:57.260\nAnd so you can come in and\nyou can choose a longer interval.\n\n200\n00:09:57.260 --> 00:09:59.570\nNow there is a maximum I\nbelieve it's 30 days or so.\n\n201\n00:09:59.570 --> 00:10:01.870\nLet's find out here live on the show,\n\n202\n00:10:01.870 --> 00:10:06.180\nthis would be like when Geraldo\nopened up that safe and it was empty.\n\n203\n00:10:06.180 --> 00:10:09.454\n35 days, it was actually\na little more than a month.\n\n204\n00:10:09.454 --> 00:10:12.412\nSo 35 days is the longest\nI can hold a backup for,\n\n205\n00:10:12.412 --> 00:10:15.210\nthat's not terribly long, is it?\n\n206\n00:10:15.210 --> 00:10:19.110\nWell remember these are automated\nbackups that happen and stay on line and\n\n207\n00:10:19.110 --> 00:10:23.970\nare there for rapid access that we can\nget at, at any moment that we need to.\n\n208\n00:10:23.970 --> 00:10:26.820\nTypically you want the newest backup.\n\n209\n00:10:26.820 --> 00:10:29.270\nIf you have some kind of failure you\nneed to restore, you need the latest and\n\n210\n00:10:29.270 --> 00:10:30.860\ngreatest backup to pull it in.\n\n211\n00:10:30.860 --> 00:10:36.940\nBut, if I need older backups,\nthat's usually for litigation, right?\n\n212\n00:10:36.940 --> 00:10:40.800\nSo there's a discovery process where\nyou got to produce these values.\n\n213\n00:10:40.800 --> 00:10:44.250\nSo, for that, what you need to do is\nyou need to take your own backup and\n\n214\n00:10:44.250 --> 00:10:48.480\nthen store it in Glacier or store it\noffline, store it on premises, whatever.\n\n215\n00:10:48.480 --> 00:10:50.490\nAnd not rely on this one for that.\n\n216\n00:10:50.490 --> 00:10:54.330\nThis one's great for actually doing\nrecovery, but if you need historical data,\n\n217\n00:10:54.330 --> 00:10:55.970\nit needs to be stored somewhere else.\n\n218\n00:10:55.970 --> 00:10:57.970\nAlso, it's only gonna do\nthat backup once a day.\n\n219\n00:10:57.970 --> 00:11:00.192\nYou define a backup window right here.\n\n220\n00:11:00.192 --> 00:11:02.981\nAnd when you say No Preference\nthat just means that some point\n\n221\n00:11:02.981 --> 00:11:06.260\nduring the day Amazon's gonna\ntake a backup of your system.\n\n222\n00:11:06.260 --> 00:11:07.710\nNow maybe that's fine with you.\n\n223\n00:11:07.710 --> 00:11:09.070\nYou don't care when it is.\n\n224\n00:11:09.070 --> 00:11:13.370\nBut when a backup occurs there is a bit\nof a performance hit that occurs.\n\n225\n00:11:13.370 --> 00:11:15.540\nIt's not much,\nit's not really all that significant.\n\n226\n00:11:15.540 --> 00:11:16.810\nWe usually don't worry about it.\n\n227\n00:11:16.810 --> 00:11:19.660\nBut if you're mission critical,\nif you're trying to shave tenths of\n\n228\n00:11:19.660 --> 00:11:24.100\na second of a query, then you need\nto know when that's gonna happen.\n\n229\n00:11:24.100 --> 00:11:26.160\nAnd so you can define a backup window.\n\n230\n00:11:26.160 --> 00:11:30.262\nWhen you specify that you can set\nthe window as small as half an hour and\n\n231\n00:11:30.262 --> 00:11:34.433\nwhat it will do is it will say I'm\ngonna do a back up within that window,\n\n232\n00:11:34.433 --> 00:11:36.446\nwithin that 30 minute period.\n\n233\n00:11:36.446 --> 00:11:38.033\nYou can't go to small than that,\n\n234\n00:11:38.033 --> 00:11:41.889\nyou can't tell exactly when to back up\nbecause remember Amazon is balancing tens\n\n235\n00:11:41.889 --> 00:11:44.570\nof thousands of other customers\nbind the same service.\n\n236\n00:11:44.570 --> 00:11:47.710\nSo they can't guarantee\na specific back up time but\n\n237\n00:11:47.710 --> 00:11:51.320\nyou can get it to within half an hour,\nor maybe I really don't care and\n\n238\n00:11:51.320 --> 00:11:54.900\nif I don't really care when that backup\noccurs but I, maybe I care just a little\n\n239\n00:11:54.900 --> 00:11:58.320\nbit, I want it to happen at night,\nbetween midnight and six AM.\n\n240\n00:11:58.320 --> 00:12:02.898\nWell I can come in here and set a three\nhour window and set it for midnight or\n\n241\n00:12:02.898 --> 00:12:05.750\n3 AM or whatever,\nI'll set mine to 2 AM, so\n\n242\n00:12:05.750 --> 00:12:10.134\nnow the backup is going to happen at\nsome point between 2 AM and 5 AM.\n\n243\n00:12:10.134 --> 00:12:13.840\nSo I have an idea when it's going to\noccur I pick a time that's not peak.\n\n244\n00:12:13.840 --> 00:12:20.640\nIf you just let it stay at no preference,\nAWS over time will learn your deployment.\n\n245\n00:12:20.640 --> 00:12:24.880\nIt will learn kind of when is a good\nwindow of time to do your backup.\n\n246\n00:12:24.880 --> 00:12:26.540\nBut it can't detect hot wires.\n\n247\n00:12:26.540 --> 00:12:28.095\nThey don't know your business.\n\n248\n00:12:28.095 --> 00:12:30.380\nThey can't see the future until\nit may impact performance.\n\n249\n00:12:30.380 --> 00:12:32.010\nSo it's up to you if you\nwant to choose that.\n\n250\n00:12:32.010 --> 00:12:35.300\nBut once you've got those backups set,\nit's gonna be backing them up,\n\n251\n00:12:35.300 --> 00:12:37.260\nautomatically store right\nthere in the Cloud.\n\n252\n00:12:37.260 --> 00:12:42.010\nNow, if you want backups every hour,\nor every 15 minutes, or\n\n253\n00:12:42.010 --> 00:12:44.650\nwhatever, you're welcome to do that but\nyou'll have to do it yourself.\n\n254\n00:12:44.650 --> 00:12:49.210\nThe automated system is designed to be run\nless frequently, so, you may need to set\n\n255\n00:12:49.210 --> 00:12:53.690\nup an alternate backup system if you need\nto get something a little more aggressive.\n\n256\n00:12:53.690 --> 00:12:57.820\n&gt;&gt; All right so that sounds fun, who\ndoesn't love taking a good backup right?\n\n257\n00:12:57.820 --> 00:13:01.420\nNow Donny you talked about multiple\nAZ deployments that seems like a very\n\n258\n00:13:01.420 --> 00:13:03.980\ninteresting and probably a good idea.\n\n259\n00:13:03.980 --> 00:13:07.870\nWhat steps do we need to take\nto Dive in to that process?\n\n260\n00:13:07.870 --> 00:13:12.360\n&gt;&gt; All right, so Multi-AZ deployments,\nif you ever do one manually, right?\n\n261\n00:13:12.360 --> 00:13:14.360\nLike I've set these up with MySQL,\nMicrosoft SQL and\n\n262\n00:13:14.360 --> 00:13:16.610\nsome of the other products\nthat are out there.\n\n263\n00:13:16.610 --> 00:13:17.880\nIt can be really challenging,right?\n\n264\n00:13:17.880 --> 00:13:19.420\nBecause of all the different\ncomponents that you've got.\n\n265\n00:13:19.420 --> 00:13:22.080\nSo I've got a little diagram\nhere that kinda shows it.\n\n266\n00:13:22.080 --> 00:13:23.590\nSo here we've got a database, right.\n\n267\n00:13:23.590 --> 00:13:27.272\nSo my_app_db.rds.amazonaws.com.\n\n268\n00:13:27.272 --> 00:13:33.030\nAnd I've got a master database that\nresides inside of one availability zone.\n\n269\n00:13:33.030 --> 00:13:35.290\nAnd I set my clients all to connect to it.\n\n270\n00:13:35.290 --> 00:13:40.078\nNow when the clients connect It's\nimportant that I have the clients\n\n271\n00:13:40.078 --> 00:13:44.705\nconfigured to connect based on a DNS name,\nand not an IP address.\n\n272\n00:13:44.705 --> 00:13:46.458\nIf they're connected via an IP address,\n\n273\n00:13:46.458 --> 00:13:48.650\nthe IP might be tied to\nthis master database.\n\n274\n00:13:48.650 --> 00:13:51.410\nAnd if a failure happens I need\nto be able to be able to flip\n\n275\n00:13:51.410 --> 00:13:54.550\nover to the slave database and\nmove that action over.\n\n276\n00:13:54.550 --> 00:13:58.260\nWell in order to set that up\nI either need to have clients\n\n277\n00:13:58.260 --> 00:14:02.720\nthat are multi databases ware like\nMicrosoft SQL support that SQL client can\n\n278\n00:14:02.720 --> 00:14:06.960\ndetect that the main database is down and\nautomatically connect to a backup or\n\n279\n00:14:06.960 --> 00:14:11.320\nalternative is called SQL always\non it's the name of that feature.\n\n280\n00:14:11.320 --> 00:14:13.920\nBut in other technologies\nwe gonna have that.\n\n281\n00:14:13.920 --> 00:14:17.690\nWell AWS can detect when\na database is not functioning and\n\n282\n00:14:17.690 --> 00:14:21.550\nit can automatically move the whole\nidentity over to the slave connection for\n\n283\n00:14:21.550 --> 00:14:23.380\nus, without us having to get involved.\n\n284\n00:14:23.380 --> 00:14:24.738\nThat's really the nice part about this.\n\n285\n00:14:24.738 --> 00:14:28.360\nSo, it's super easy if we're deploying\na new database, you just chose the option,\n\n286\n00:14:28.360 --> 00:14:31.805\nI want the Multi-AZ deployment, but you\ncan actually add it after the fact too.\n\n287\n00:14:31.805 --> 00:14:35.645\nAnd AWS on the back end, they'll take\ncare of setting up the slave replica,\n\n288\n00:14:35.645 --> 00:14:37.850\ncloning the data and putting that up.\n\n289\n00:14:37.850 --> 00:14:40.670\nBut the most important part is that\nthey take care of building that DSN\n\n290\n00:14:40.670 --> 00:14:43.200\nend point for us and\nthey take care of setting up so it can\n\n291\n00:14:43.200 --> 00:14:46.640\nfail over to the other one at a moment's\nnotice, either automatically or manually.\n\n292\n00:14:46.640 --> 00:14:48.780\nYou can manually flip\nit over if you need to.\n\n293\n00:14:48.780 --> 00:14:54.220\nSo all the challenge of getting the\nMulti-AZ deployment set up becomes easy.\n\n294\n00:14:54.220 --> 00:14:55.700\nIt's just done.\n\n295\n00:14:55.700 --> 00:14:57.100\nYou click a few buttons.\n\n296\n00:14:57.100 --> 00:14:58.560\nThe same thing goes for read replicas.\n\n297\n00:14:58.560 --> 00:15:00.100\nIf you want to do that,\nyou just click a few buttons and\n\n298\n00:15:00.100 --> 00:15:01.440\nnow you've got read replicas.\n\n299\n00:15:01.440 --> 00:15:05.166\nRead replicas are a little more\npowerful than Multi-AZ deployments.\n\n300\n00:15:05.166 --> 00:15:06.530\nA Multi-AZ deployment,\n\n301\n00:15:06.530 --> 00:15:10.630\nthat's multiple availability\nzones in the same region right?\n\n302\n00:15:10.630 --> 00:15:15.250\nSo, if I have a database server in US\nEast, well I had the Multi-AZ deployment,\n\n303\n00:15:15.250 --> 00:15:18.220\nthey're all in other AZ's in US East.\n\n304\n00:15:18.220 --> 00:15:23.225\nSo, I'm gonna have US East 1A and\nthen US East 1C.\n\n305\n00:15:23.225 --> 00:15:24.920\nAnd that's where it is.\n\n306\n00:15:24.920 --> 00:15:27.830\nBut what is I had a lot\nof users in Australia?\n\n307\n00:15:27.830 --> 00:15:29.870\nOr a lot of users in China?\n\n308\n00:15:29.870 --> 00:15:32.730\nThey've gotta come all the way over\nto North Virginia to get to US East.\n\n309\n00:15:32.730 --> 00:15:36.627\nWell I might wanna put a read\nreplica over in China.\n\n310\n00:15:36.627 --> 00:15:40.051\nAnd then that way,\neveryone over there can access that.\n\n311\n00:15:40.051 --> 00:15:41.206\nAs far as the reads, right?\n\n312\n00:15:41.206 --> 00:15:42.771\nWhen they do a transaction,\nthings are different.\n\n313\n00:15:42.771 --> 00:15:44.320\nBut they can do the reads from over there.\n\n314\n00:15:44.320 --> 00:15:49.030\nSo when you set up a read replica, you can\nput the read replica in other regions.\n\n315\n00:15:49.030 --> 00:15:54.281\nBut read replicas aren't the greatest for\nuse as like high liability.\n\n316\n00:15:54.281 --> 00:15:58.267\nI mean, you can but A read replica\njust by its nature is read-only, so\n\n317\n00:15:58.267 --> 00:16:01.442\nif you wanna fail over to a read replica,\nyou gotta go and\n\n318\n00:16:01.442 --> 00:16:04.550\npromote that read replica\nto become the master.\n\n319\n00:16:04.550 --> 00:16:08.660\nAnd that's a challenge operation, so\nread replicas really aren't designed for\n\n320\n00:16:08.660 --> 00:16:11.970\navailability, they're designed for\nperformance.\n\n321\n00:16:11.970 --> 00:16:15.650\nMulti are designed for availability,\nnot for performance, so\n\n322\n00:16:15.650 --> 00:16:18.110\ntwo different characteristics for\nthose solutions.\n\n323\n00:16:18.110 --> 00:16:21.000\nThey each serve a purpose,\nneither one serves both purposes well.\n\n324\n00:16:22.800 --> 00:16:25.680\nAll right, so that's one of the things\nthat we need to think about when we get\n\n325\n00:16:25.680 --> 00:16:27.810\nthese databases set up and\nget them put in place.\n\n326\n00:16:27.810 --> 00:16:30.960\nFew other things that we\nneed to think about is that\n\n327\n00:16:30.960 --> 00:16:34.050\nmost of the failover that were gonna\nhappen with these backups is automatic.\n\n328\n00:16:34.050 --> 00:16:37.340\nIt just automatically happens,\nwe might not even know it occurred.\n\n329\n00:16:37.340 --> 00:16:42.390\nI've actually seen that before where\nthe master database was in an AZ, and\n\n330\n00:16:42.390 --> 00:16:44.250\nhad some kind of storage failure.\n\n331\n00:16:44.250 --> 00:16:47.290\nAnd we were running on our other copy,\n\n332\n00:16:47.290 --> 00:16:50.890\nour multi AZ replica, and\nI didn't even know it.\n\n333\n00:16:50.890 --> 00:16:53.580\nAnd it wasn't until I dug\nthrough my emails and\n\n334\n00:16:53.580 --> 00:16:56.920\nI found it in my spam folder where I had\nbeen notified that it had flipped over.\n\n335\n00:16:56.920 --> 00:16:59.470\nI didn't notice and the end users didn't\nnotice, and that's the whole purpose,\n\n336\n00:16:59.470 --> 00:17:02.060\nright, it's all automated and\nmanaged by AWS.\n\n337\n00:17:02.060 --> 00:17:04.825\n&gt;&gt; I like how your AWS that email's\ngoing straight to your spam.\n\n338\n00:17:04.825 --> 00:17:06.220\nDonald's like,\nwhat do they want to sell me now?\n\n339\n00:17:06.220 --> 00:17:10.135\n[LAUGH] I don't need books [LAUGH]\n&gt;&gt; But\n\n340\n00:17:10.135 --> 00:17:14.035\nit is all part of the process, monitoring,\nwe'll talk about monitoring later on,\n\n341\n00:17:14.035 --> 00:17:17.475\nis important and in that scenario,\nI wasn't monitoring, so [LAUGH].\n\n342\n00:17:17.475 --> 00:17:20.685\nAll right, let's talk about scaling up and\nscaling out,\n\n343\n00:17:20.685 --> 00:17:24.335\nwhich I guess I kind of got ahead\nof myself and kind of talked about.\n\n344\n00:17:24.335 --> 00:17:26.880\nScaling up If I have a database instance,\nright?\n\n345\n00:17:26.880 --> 00:17:30.770\nWhen I deploy this database instance, it's\nasking me, well, it was asking me back\n\n346\n00:17:30.770 --> 00:17:34.440\na few pages, what I wanted to pick and\nI think I've chose like an m3.large.\n\n347\n00:17:34.440 --> 00:17:38.960\nLet me just launch this,\nI'm pretty sure I've chosen m3.large.\n\n348\n00:17:38.960 --> 00:17:41.720\nNow, when I chose that m3.large,\nit has certain amount of CPU and\n\n349\n00:17:41.720 --> 00:17:42.950\na certain amount of RAM.\n\n350\n00:17:42.950 --> 00:17:46.490\nWell, over time, my database might get\nbusier, and busier, and busier and\n\n351\n00:17:46.490 --> 00:17:48.940\nnow, I need to bump that up.\n\n352\n00:17:48.940 --> 00:17:52.610\nWell, you can scale up very,\nvery easily, and\n\n353\n00:17:52.610 --> 00:17:55.840\nit doesn't require us having to\ndo a whole heck of a lot to it.\n\n354\n00:17:55.840 --> 00:17:58.360\nWe can come in and take a database,\nI'll have to wait for\n\n355\n00:17:58.360 --> 00:18:00.120\nit to actually finish provisioning.\n\n356\n00:18:00.120 --> 00:18:03.300\nAnd then, once it's done,\nyou go and you can change.\n\n357\n00:18:03.300 --> 00:18:07.500\nYou can bump it up to the next instance\ntype And so you can take care of that.\n\n358\n00:18:07.500 --> 00:18:10.860\nThere's a lot of stuff that's all\nreally easy right here via the GUI.\n\n359\n00:18:10.860 --> 00:18:14.670\nSo for example like if this were a replica\nunder instant access you see i gotta\n\n360\n00:18:14.670 --> 00:18:17.160\npromote read replica or\ncreate read replica.\n\n361\n00:18:17.160 --> 00:18:21.250\nSo we do that very easily through\nthe GUI or API and deploy those out.\n\n362\n00:18:21.250 --> 00:18:24.520\nYou can do a manual snap\nshot I didn't mention that,\n\n363\n00:18:24.520 --> 00:18:27.240\na manual snap shot is another\nway that we can do backups.\n\n364\n00:18:27.240 --> 00:18:30.280\nInstead of the one that occurs\nthroughout the day that we don't\n\n365\n00:18:30.280 --> 00:18:32.030\nnecessarily know exactly\nwhen it's gonna happen.\n\n366\n00:18:32.030 --> 00:18:35.230\nIf I'm about to make a critical change\nI could take a snap shot myself and\n\n367\n00:18:35.230 --> 00:18:36.330\ndo it manually.\n\n368\n00:18:36.330 --> 00:18:39.380\nBut I can modify the instance,\nand it's grayed out for\n\n369\n00:18:39.380 --> 00:18:41.480\nme here cuz it's still provisioning.\n\n370\n00:18:41.480 --> 00:18:45.010\nBut when I modify it,\nI can change the instance class and\n\n371\n00:18:45.010 --> 00:18:50.790\nI can bump it up to an m3 extra large,\nor I can say the m4 extra large.\n\n372\n00:18:50.790 --> 00:18:56.200\nNow, or an r3 8x large or something at\nthat nature, and now I've scaled it up.\n\n373\n00:18:56.200 --> 00:19:01.340\nI've added more CPU, and more RAM, and\nmoved it along, so having that kind of\n\n374\n00:19:01.340 --> 00:19:04.370\nfunctionality, the ability to dynamically\nchange like that's really important.\n\n375\n00:19:04.370 --> 00:19:06.980\nBut when it comes to scaling up,\nthere's a limit, right?\n\n376\n00:19:06.980 --> 00:19:11.280\nLet me launch another database, I'll go\nahead and spin up an Aurora one this time.\n\n377\n00:19:11.280 --> 00:19:16.230\nWhen I go into Aurora, if you look,\nthe biggest I can go is an r3.8xl 32 CPUs,\n\n378\n00:19:16.230 --> 00:19:18.240\n244 gigs of ram.\n\n379\n00:19:18.240 --> 00:19:21.230\nNow it sounds like a lot, but\n\n380\n00:19:21.230 --> 00:19:24.690\nit Isn't necessarily depending\non the size of your data.\n\n381\n00:19:24.690 --> 00:19:26.430\nIf you're dealing with a huge data center,\n\n382\n00:19:26.430 --> 00:19:29.520\nyou have hundreds of\nthousands of customers.\n\n383\n00:19:29.520 --> 00:19:31.670\nThis may not be enough and you need more.\n\n384\n00:19:31.670 --> 00:19:33.990\nWell, too bad [LAUGH] you can't have more,\nright?\n\n385\n00:19:33.990 --> 00:19:37.700\nYou can't have more in this\nparticular instance but\n\n386\n00:19:37.700 --> 00:19:39.420\nyou can start creating read replicas.\n\n387\n00:19:39.420 --> 00:19:44.210\nYou can scale out and when you scale\nout now we can distribute that whole\n\n388\n00:19:44.210 --> 00:19:48.560\nworkload off on the other servers and have\njust our right operations coming here.\n\n389\n00:19:48.560 --> 00:19:52.098\nWe can make more use of it, eventually\nyou may even grow too large for that.\n\n390\n00:19:52.098 --> 00:19:54.031\nYou might have to go to\nmultiple databases so\n\n391\n00:19:54.031 --> 00:19:56.540\nthat you can spread them across instances,\nthat works or\n\n392\n00:19:56.540 --> 00:19:59.589\nthere's petitioning schemes that\nyou can use database shardding.\n\n393\n00:19:59.589 --> 00:20:03.144\nAnd things like that that will\nallow you to spread that out but\n\n394\n00:20:03.144 --> 00:20:07.340\nas far as scaling up, there's a limit,\nas far as scaling out?\n\n395\n00:20:07.340 --> 00:20:08.440\nWell, there's a limit there too.\n\n396\n00:20:08.440 --> 00:20:10.410\nYou can only have so\nmany read replicas, and\n\n397\n00:20:10.410 --> 00:20:13.050\ndepending on the engine you\nchoose is gonna have that limit.\n\n398\n00:20:13.050 --> 00:20:17.600\nSo be aware that the engine\nyou choose may have limits or\n\n399\n00:20:17.600 --> 00:20:23.180\na DB can support many many read replicas,\nI think it's 16 read replicas.\n\n400\n00:20:23.180 --> 00:20:27.810\nVersus Maria DB where\nI believe it's five or\n\n401\n00:20:27.810 --> 00:20:30.030\nsix read replicas,\nif I remember correctly.\n\n402\n00:20:30.030 --> 00:20:33.770\nSo that's all gonna weigh in your choice\non which database technology you use.\n\n403\n00:20:33.770 --> 00:20:36.820\nAnd then Oracle and Microsoft SQL,\nthey have their own restrictions, too.\n\n404\n00:20:36.820 --> 00:20:40.710\nSo be sure to research your engine to make\nsure you know what options are available.\n\n405\n00:20:40.710 --> 00:20:41.580\n&gt;&gt; All right, well, Don,\n\n406\n00:20:41.580 --> 00:20:46.590\nany topic would not be complete unless we\nmentioned, the security aspect, right?\n\n407\n00:20:46.590 --> 00:20:49.140\nWe have to have some modicum of security\n\n408\n00:20:49.140 --> 00:20:52.480\notherwise we're just giving away the ghost\nto everybody that asks for it, right?\n\n409\n00:20:52.480 --> 00:20:56.730\nSo what can we do, what security\noptions are available for us in RDS?\n\n410\n00:20:56.730 --> 00:21:00.200\n&gt;&gt; All right, well let me get onto\nthe very next screen here and we'll see.\n\n411\n00:21:00.200 --> 00:21:03.000\n&gt;&gt; You can't do that [LAUGH]\nremember what I said earlier is that\n\n412\n00:21:03.000 --> 00:21:04.620\nRDS is really built on top of EC2, right?\n\n413\n00:21:04.620 --> 00:21:07.970\nThese are EC2 instances behind the scenes\nthat are just managed for us so\n\n414\n00:21:07.970 --> 00:21:09.110\nwe don't have to deal with them.\n\n415\n00:21:09.110 --> 00:21:10.130\nSo when you go to configure,\n\n416\n00:21:10.130 --> 00:21:14.740\nyou're gonna see a lot of the same\nthings we use to secure EC2 instances.\n\n417\n00:21:14.740 --> 00:21:19.120\nSo we can create a virtual private cloud,\na VPC, so it's on its own network,\n\n418\n00:21:19.120 --> 00:21:20.390\nit's own subnet group.\n\n419\n00:21:20.390 --> 00:21:21.920\nWe can make it publically accessible or\n\n420\n00:21:21.920 --> 00:21:25.160\nnot, you can define a security group,\nright?\n\n421\n00:21:25.160 --> 00:21:28.230\nThat's that software firewall,\nso we can control who's allowed\n\n422\n00:21:28.230 --> 00:21:31.040\nto even connect to the database\nin the first place.\n\n423\n00:21:31.040 --> 00:21:34.310\nI might want my web front-ends to\nconnect to the database and that's it.\n\n424\n00:21:34.310 --> 00:21:37.010\nNot the world, so,\nI can come through and choose and\n\n425\n00:21:37.010 --> 00:21:39.530\nset that up based on that security group.\n\n426\n00:21:39.530 --> 00:21:44.944\nI can allow certain people\naccess to use a native SQL or\n\n427\n00:21:44.944 --> 00:21:50.733\nODBC there we go,\nan ODBC connection into the database.\n\n428\n00:21:50.733 --> 00:21:54.549\nOr I might allow other people to use JDBC\nor whatever it is that I wanna allow and\n\n429\n00:21:54.549 --> 00:21:56.619\nI can control that by port, by source IP.\n\n430\n00:21:56.619 --> 00:21:59.178\nAnd so on through the security groups, but\n\n431\n00:21:59.178 --> 00:22:03.130\nyou also have options in,\nI chose Aurora didn't I?\n\n432\n00:22:03.130 --> 00:22:04.370\nI chose Aurora so I'm not gonna see it but\n\n433\n00:22:04.370 --> 00:22:08.250\nhad I chosen MariaDB where you\nkind of see the storage options.\n\n434\n00:22:08.250 --> 00:22:11.040\nYou have the option to encrypt\nthe storage also with AuroraDB,\n\n435\n00:22:11.040 --> 00:22:13.800\nit's automatically done so\nthat's why I don't see the option here.\n\n436\n00:22:13.800 --> 00:22:15.200\nWell, actually, I do see the option.\n\n437\n00:22:15.200 --> 00:22:18.230\n&gt;&gt; There it is enable encryption right\nthere, if I'd read my own screen.\n\n438\n00:22:18.230 --> 00:22:23.540\nSo I can turn on encryption to encrypt\nthe database while it's stored at rest.\n\n439\n00:22:23.540 --> 00:22:27.600\nNow, that's important at rest,\nin motion, it's still up to me.\n\n440\n00:22:27.600 --> 00:22:31.960\nSo, as the data moves into the database,\ncomes out of the database, I can use SSL,\n\n441\n00:22:31.960 --> 00:22:34.370\nI can use technologies like\nthat to encrypt it in motion.\n\n442\n00:22:34.370 --> 00:22:37.770\nBut the database at rest, we can\nchoose to encrypt it, and it'll let me\n\n443\n00:22:37.770 --> 00:22:42.100\npick a master key or generate a new one,\nand then that'll be stored and encrypted.\n\n444\n00:22:42.100 --> 00:22:47.140\nSo that's another option on the security\nside, then we also have IAM,\n\n445\n00:22:47.140 --> 00:22:49.160\nthe identity management and\naccess management.\n\n446\n00:22:49.160 --> 00:22:54.530\nWhere we can control what credentials\nare allowed to access the RDS service.\n\n447\n00:22:54.530 --> 00:22:59.160\nThose credentials don't carry over to\nthe individual records inside though.\n\n448\n00:22:59.160 --> 00:23:03.270\nSo, inside of Aurora DB I'm gonna\nhave user account in credentials.\n\n449\n00:23:03.270 --> 00:23:07.220\nInside of Microsoft SQL Server you'll have\ncredentials inside of meridi bean and so\n\n450\n00:23:07.220 --> 00:23:09.100\non they all have their own\ncredentials beyond that.\n\n451\n00:23:09.100 --> 00:23:13.150\nBut we can still use IAM just to control\nwho can even see the database in\n\n452\n00:23:13.150 --> 00:23:16.340\nthe first place better yet\nconnect to it and start to work with it.\n\n453\n00:23:16.340 --> 00:23:20.940\nSo between all of these technologies we've\ngot a great way to completely control\n\n454\n00:23:20.940 --> 00:23:23.390\nevery method of access to that database.\n\n455\n00:23:23.390 --> 00:23:28.020\nAll right, well, that's basically RDS for\nus in a ball, right?\n\n456\n00:23:28.020 --> 00:23:29.545\nRoll wrapped up with\na pretty little pink bow.\n\n457\n00:23:29.545 --> 00:23:31.250\n&gt;&gt; [LAUGH]\n&gt;&gt; Thank you so much Don for\n\n458\n00:23:31.250 --> 00:23:33.120\nmaking that package for us.\n\n459\n00:23:33.120 --> 00:23:37.650\nIt's not so scary to jump into Amazon to\nbe honest with you I'm not a database guy,\n\n460\n00:23:37.650 --> 00:23:39.250\nI know Don is a database guy.\n\n461\n00:23:39.250 --> 00:23:43.340\nBut it doesn't seem like it takes a whole\nlot of heavy lifting to get into databases\n\n462\n00:23:43.340 --> 00:23:46.340\nand work with them inside of AWS, they've\ndone a really good job of making it easy.\n\n463\n00:23:46.340 --> 00:23:47.810\n&gt;&gt; Yeah, and\nthat's really their goal right,\n\n464\n00:23:47.810 --> 00:23:50.230\ncuz the hard part should be\nworking with your data right?\n\n465\n00:23:50.230 --> 00:23:51.090\n&gt;&gt; Right.\n&gt;&gt; And now my data's\n\n466\n00:23:51.090 --> 00:23:54.170\nthere how do I work with this, so\nthat's what you should be worried about.\n\n467\n00:23:54.170 --> 00:23:55.160\nWorrying about your data,\n\n468\n00:23:55.160 --> 00:23:57.760\nnot worrying about all the hosting\ninfrastructure beneath.\n\n469\n00:23:57.760 --> 00:24:00.480\nAnd as far as the hosting infrastructure,\nyou're really just clicking Next a couple\n\n470\n00:24:00.480 --> 00:24:03.330\nof times, tweaking a few options,\nand you're in business.\n\n471\n00:24:03.330 --> 00:24:05.565\n&gt;&gt; Well, that's the way uh-huh,\nuh-huh, I like it.\n\n472\n00:24:05.565 --> 00:24:07.390\n&gt;&gt; [LAUGH]\n&gt;&gt; That being said, Don, thanks for\n\n473\n00:24:07.390 --> 00:24:08.110\ndropping by today.\n\n474\n00:24:08.110 --> 00:24:12.390\nWe appreciate that, we do thank you out\nthere as the viewer for joining us.\n\n475\n00:24:12.390 --> 00:24:13.300\nBut it is that time for\n\n476\n00:24:13.300 --> 00:24:16.920\nus to sign off for ITProTV,\nI've been your host Daniel Lowrie.\n\n477\n00:24:16.920 --> 00:24:17.715\n&gt;&gt; And I'm Don Pezet.\n\n478\n00:24:17.715 --> 00:24:19.660\n&gt;&gt; And we'll see you next time.\n\n479\n00:24:19.660 --> 00:24:25.600\n[MUSIC]\n\n480\n00:24:25.600 --> 00:24:28.708\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "208325943"
        },
        {
          "description": "In this episode, Daniel and Don explore and demonstrate Amazon Redshift. They start by defining Redshift's role and contrasting it with other relational databases. Then they discuss Redshift Cluster's components including Nodes and Keys. Finally they look at recovery using Snapshots and security like IAM.",
          "length": "1540",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-2-amazon_redshift-030817.00_26_37_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-2-amazon_redshift-030817.00_26_37_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-2-amazon_redshift-030817.00_26_37_25.Still001-sm.jpg",
          "title": "Amazon Redshift",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:04.565\nWelcome to ITProTV,\nI'm your host Don [CROSSTALK]\n\n2\n00:00:04.565 --> 00:00:08.381\n[MUSIC]\n\n3\n00:00:08.381 --> 00:00:12.076\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.076 --> 00:00:13.791\n&gt;&gt; All right, greetings everyone and\n\n5\n00:00:13.791 --> 00:00:16.225\nwelcome to another exciting\nepisode of ITProTV.\n\n6\n00:00:16.225 --> 00:00:18.295\nI'm your host Daniel Lowrie and\n\n7\n00:00:18.295 --> 00:00:22.595\nin today's episode we're back\nwith more on our ACSAA series.\n\n8\n00:00:22.595 --> 00:00:24.355\nAnd of course joining us in the studio yet\n\n9\n00:00:24.355 --> 00:00:28.475\nagain to lend his expertise on that topic\nour good friend and mentor Mr. Don Pezet.\n\n10\n00:00:28.475 --> 00:00:29.935\nDon welcome back sir how goes it?\n\n11\n00:00:29.935 --> 00:00:33.465\n&gt;&gt; It goes great I'm excited about this\nepisode because in the last few episode\n\n12\n00:00:33.465 --> 00:00:37.020\nwe've been talking about episodes, the\nrelational database service from Amazon.\n\n13\n00:00:37.020 --> 00:00:40.630\nAnd we've talked about MariaDB and\nMySQL and Aurora and\n\n14\n00:00:40.630 --> 00:00:42.300\nall these other ones that are very,\nvery popular.\n\n15\n00:00:42.300 --> 00:00:45.300\nTons of people use them,\nvery, very exciting, right?\n\n16\n00:00:45.300 --> 00:00:48.580\nNow we're gonna shift over to some of the\nless common solutions that are available\n\n17\n00:00:48.580 --> 00:00:52.560\nas part of RDS, and specifically,\nwe're gonna talk about Amazon Redshift.\n\n18\n00:00:52.560 --> 00:00:57.380\nAnd Amazon Redshift is great product that\nprovides a super high performance profile\n\n19\n00:00:57.380 --> 00:00:59.820\nthat goes well beyond what we get\nwith some of the other products.\n\n20\n00:00:59.820 --> 00:01:03.980\nBut is far or less popular just because\nmost people haven't hear of it, or\n\n21\n00:01:03.980 --> 00:01:05.300\ndon't understand how it works.\n\n22\n00:01:05.300 --> 00:01:09.490\nSo we're gonna take a look at what\nAmazon Redshift is, how it works,\n\n23\n00:01:09.490 --> 00:01:12.395\nhow it differentiates itself from\nthe other relation data bases rather\n\n24\n00:01:12.395 --> 00:01:14.505\nout there, and\nin what scenarios we might make use of it.\n\n25\n00:01:14.505 --> 00:01:17.705\n&gt;&gt; All right, well Don, before\nthe astronomers out there that are maybe\n\n26\n00:01:17.705 --> 00:01:19.168\nwatching this-\n&gt;&gt; [LAUGH]\n\n27\n00:01:19.168 --> 00:01:20.014\n&gt;&gt; Get all a-lather,\n\n28\n00:01:20.014 --> 00:01:21.954\nmaybe we should give them\nsome of the basics and\n\n29\n00:01:21.954 --> 00:01:25.640\ndefine what Redshift is specifically,\nand how it differs from other things.\n\n30\n00:01:25.640 --> 00:01:31.090\nAll right, so Redshift ultimately\nis a relational database, right?\n\n31\n00:01:31.090 --> 00:01:34.250\nWhich makes sense why it's in\nthe relational database services group.\n\n32\n00:01:34.250 --> 00:01:37.560\nBut that means it is very similar to\nthe other products that we have seen.\n\n33\n00:01:37.560 --> 00:01:40.230\nWe've seen MariaDB and MySQL and so on.\n\n34\n00:01:40.230 --> 00:01:43.680\nWell Redshift is not based of\nMySQL like the other products are,\n\n35\n00:01:43.680 --> 00:01:46.120\nRedshift is actually based of a Post SQL.\n\n36\n00:01:46.120 --> 00:01:50.840\nSo Post SQL is open source database\nthat has been around a long long time,\n\n37\n00:01:50.840 --> 00:01:54.170\none of the original relational\ndatabases that are out there, so\n\n38\n00:01:54.170 --> 00:01:57.640\nvery well supportive, mature database.\n\n39\n00:01:57.640 --> 00:02:00.660\nAnd what Amazon did is they took Post SQL.\n\n40\n00:02:00.660 --> 00:02:03.940\nAnd they tweaked it and optimized it and\nmessed around with it and\n\n41\n00:02:03.940 --> 00:02:06.070\njumbled things around-\n&gt;&gt; Sounds like a crime.\n\n42\n00:02:06.070 --> 00:02:06.963\n&gt;&gt; To get it.\n&gt;&gt; [LAUGH]\n\n43\n00:02:06.963 --> 00:02:09.400\n&gt;&gt; To get it where it provided the highest\n\n44\n00:02:09.400 --> 00:02:12.330\nlevel of OLAP processing possible.\n\n45\n00:02:12.330 --> 00:02:15.200\nOLAP, Online Analysis Processing.\n\n46\n00:02:15.200 --> 00:02:18.930\nRemember in databases,\nwe have online transaction processing and\n\n47\n00:02:18.930 --> 00:02:21.010\nonline analysis processing.\n\n48\n00:02:21.010 --> 00:02:23.860\nTransactions, that's where we're\nwriting data into the database.\n\n49\n00:02:23.860 --> 00:02:27.730\nAnalysis is just doing reads,\nwe're reading data out of the database.\n\n50\n00:02:27.730 --> 00:02:29.600\nAnd with MariaDB and\n\n51\n00:02:29.600 --> 00:02:34.045\nthe other ones that are based on MySQL,\nwe can set up read replicas and\n\n52\n00:02:34.045 --> 00:02:38.405\nIn our client we can direct people to go\nto different read replicas to find data.\n\n53\n00:02:38.405 --> 00:02:43.555\nBut a read replica is still just one\nserver and when you send it a query,\n\n54\n00:02:43.555 --> 00:02:47.305\nthat read replica is handling that\nquery and it can only do so much.\n\n55\n00:02:47.305 --> 00:02:49.835\nSo there's a performance\nlimit that we hit.\n\n56\n00:02:49.835 --> 00:02:53.115\nMost relational databases will hit\na performance limit sooner or later.\n\n57\n00:02:53.115 --> 00:02:56.720\nAnd there's not really a way for\nyou to fix it within that product.\n\n58\n00:02:56.720 --> 00:02:58.730\nAnd that's where Redshift comes in.\n\n59\n00:02:58.730 --> 00:03:03.690\nIf you have a massive amount of data,\nand we're to a petabyte scale here.\n\n60\n00:03:03.690 --> 00:03:10.030\nSo if you've got a massive amount of data\nand you want the highest OLAP performance\n\n61\n00:03:10.030 --> 00:03:15.070\npossible, you're not gonna get that with\nMariaDB or MySQL, or even Aurora DB.\n\n62\n00:03:15.070 --> 00:03:15.940\nAnd I love Aurora.\n\n63\n00:03:15.940 --> 00:03:20.675\nSo for me to say that, but\nyou will get it with Redshift.\n\n64\n00:03:20.675 --> 00:03:24.880\nRedshift is Amazon's solution\nto a high performance OLAP, and\n\n65\n00:03:24.880 --> 00:03:27.280\nit does it to a really neat system.\n\n66\n00:03:27.280 --> 00:03:29.050\nBecause unlike read replicas,\n\n67\n00:03:29.050 --> 00:03:32.474\nwrapped up entire replicas of the database\nspread out all over the place,\n\n68\n00:03:32.474 --> 00:03:37.830\nReshift works by spreading parts\nof our data across multiple nodes.\n\n69\n00:03:37.830 --> 00:03:41.460\nSo when you deploy Redshift, you're not\njust deploying just a Red Shift database.\n\n70\n00:03:41.460 --> 00:03:43.070\nYou're deploying a Redshift cluster.\n\n71\n00:03:43.070 --> 00:03:45.870\nAnd then you place\ndatabases on the cluster.\n\n72\n00:03:45.870 --> 00:03:48.830\nYou can have more than\none database if need be.\n\n73\n00:03:48.830 --> 00:03:51.740\nOr you probably just have one,\nyou can throw that one database on there.\n\n74\n00:03:51.740 --> 00:03:54.860\nAnd then it can spread it\nacross the cluster nodes and\n\n75\n00:03:54.860 --> 00:03:58.910\nit does it in a way that makes\nit invisible for the clients.\n\n76\n00:03:58.910 --> 00:04:02.450\nWhen the clients connect, they think\nthey're connecting to one database server.\n\n77\n00:04:02.450 --> 00:04:06.000\nWhen in reality there data is\nactually being rendered from\n\n78\n00:04:06.000 --> 00:04:09.670\nnumerous cluster nodes that\nare providing them the results they get.\n\n79\n00:04:09.670 --> 00:04:12.720\nAnd that means we can get\nfar greater performance.\n\n80\n00:04:12.720 --> 00:04:17.520\nBut it is entirely tuned for\nOLAP, for analysis, for reads.\n\n81\n00:04:17.520 --> 00:04:19.610\nIt's not tuned for writes.\n\n82\n00:04:19.610 --> 00:04:21.226\nSo when we deploy Redshift,\n\n83\n00:04:21.226 --> 00:04:26.380\nRedshift is usually a part of our\nsolution, not the complete solution.\n\n84\n00:04:26.380 --> 00:04:29.870\nIf you're just doing straight up analyses,\nand you've already got all the data, yeah,\n\n85\n00:04:29.870 --> 00:04:31.170\nyou can use Redshift now.\n\n86\n00:04:31.170 --> 00:04:31.690\nDone.\n\n87\n00:04:31.690 --> 00:04:32.380\nRight?\n\n88\n00:04:32.380 --> 00:04:34.620\nBut, if you're constantly\nupdating your data,\n\n89\n00:04:34.620 --> 00:04:37.470\nthen you've got to get that\ndata moved in to Redshift.\n\n90\n00:04:37.470 --> 00:04:40.810\nAnd that's a bit of a process,\nso what you'll typically have\n\n91\n00:04:40.810 --> 00:04:45.130\nis a traditional relational\ndatabase like Aurora DB.\n\n92\n00:04:45.130 --> 00:04:47.600\nAnd then you'll leverage\nRedshift on top of that and\n\n93\n00:04:47.600 --> 00:04:50.190\nyour high analysis will\nrun against Redshift and\n\n94\n00:04:50.190 --> 00:04:54.190\nyou data entry will all occur over on\naurora or however you wanted to play that.\n\n95\n00:04:54.190 --> 00:04:58.260\nSo it becomes a part of our total\nsolution, not the total solution itself.\n\n96\n00:04:58.260 --> 00:05:02.090\n&gt;&gt; Well Don does Red Shift work like our\nother relational databases as far as like\n\n97\n00:05:02.090 --> 00:05:04.840\nme running maybe transact\nequals statements?\n\n98\n00:05:04.840 --> 00:05:08.520\nYeah and that's one of the nice parts\nbecause it's based on post SQL a lot of\n\n99\n00:05:08.520 --> 00:05:12.400\nthe structured query language,\nthe SQL is the same.\n\n100\n00:05:12.400 --> 00:05:17.910\nSo insert statements, update, select,\nthose things, all the flower statements,\n\n101\n00:05:17.910 --> 00:05:21.860\nthose things,\nall work the way that we're used to.\n\n102\n00:05:21.860 --> 00:05:24.540\nThat stuff works just like normal we\ndon't even really have to mess with our\n\n103\n00:05:24.540 --> 00:05:25.610\nqueries very much.\n\n104\n00:05:25.610 --> 00:05:29.500\nAnd it's all being kind of altered at\nthe back to spread across the different\n\n105\n00:05:29.500 --> 00:05:31.520\nresources to get the values that we want.\n\n106\n00:05:31.520 --> 00:05:34.520\nThere is some additional command\nthat's we wanna add though\n\n107\n00:05:34.520 --> 00:05:36.300\nthat a little more Redshift specific,\n\n108\n00:05:36.300 --> 00:05:39.160\nwhere they behave a little\ndifferently they do another systems.\n\n109\n00:05:39.160 --> 00:05:41.610\nSo, for example we have like vacuum,\n\n110\n00:05:41.610 --> 00:05:46.470\nvacuum helps to reorganize data\nacross the backyard nodes.\n\n111\n00:05:46.470 --> 00:05:48.675\nThe backend nodes are invisible\nto our clients so\n\n112\n00:05:48.675 --> 00:05:51.741\nthey don't know how that data is\nstructured but occasionally we got\n\n113\n00:05:51.741 --> 00:05:54.672\nto optimize that data structure and\nwe can use vacuum to do that.\n\n114\n00:05:54.672 --> 00:05:59.540\nOr we've got unload,\nhow we can get data out of Redshift.\n\n115\n00:05:59.540 --> 00:06:02.150\nYou might put data temporarily\nin Redshift to work with it and\n\n116\n00:06:02.150 --> 00:06:03.720\nthen take it back out when you're done.\n\n117\n00:06:03.720 --> 00:06:05.610\nYou don't have to have\nit there all the time.\n\n118\n00:06:05.610 --> 00:06:10.110\nFor example, maybe you have a huge\nquery that you run once a year.\n\n119\n00:06:10.110 --> 00:06:11.900\nA big end of the year report.\n\n120\n00:06:11.900 --> 00:06:15.760\nAnd that end of the year\nreport could take days to run.\n\n121\n00:06:15.760 --> 00:06:20.190\nWell, Daniel and I, we used to work at\nan insurance company together years ago.\n\n122\n00:06:20.190 --> 00:06:25.460\nAnd, they had this weather statistical\nanalysis program that would run.\n\n123\n00:06:25.460 --> 00:06:27.400\nAnd it had these queries\nthat would run for\n\n124\n00:06:27.400 --> 00:06:29.870\ndays before it finally\nspit out a final report.\n\n125\n00:06:29.870 --> 00:06:33.240\nBut they didn't run it very often,\nit was run two or three times a year.\n\n126\n00:06:33.240 --> 00:06:36.670\nSo we could take that data, we couldn't\ndo it back then, but now with Redshift.\n\n127\n00:06:36.670 --> 00:06:39.220\nYou could take that data,\nthrow it into Redshift,\n\n128\n00:06:39.220 --> 00:06:41.880\nrun your analyses way faster\nthan you could on-premises.\n\n129\n00:06:41.880 --> 00:06:43.860\nAnd then when you're done,\nyou unload the data and get it back out.\n\n130\n00:06:43.860 --> 00:06:46.730\nSo, we have additional commands for doing\nthings like that, for moving data in and\n\n131\n00:06:46.730 --> 00:06:48.100\nout of Redshift.\n\n132\n00:06:48.100 --> 00:06:51.090\nBut once the data is there, we work\nwith it just like anything else, and\n\n133\n00:06:51.090 --> 00:06:52.670\nyou even connect the same way.\n\n134\n00:06:52.670 --> 00:06:57.390\nSo, if you've got an SQL client that\nyou use, that you love, keep it.\n\n135\n00:06:57.390 --> 00:06:58.320\nYou keep using it.\n\n136\n00:06:58.320 --> 00:06:59.660\nYou can connect right up.\n\n137\n00:06:59.660 --> 00:07:02.950\nIt supports ODBC and JDBC connections.\n\n138\n00:07:02.950 --> 00:07:06.740\nAnd so once you're connected you treat\nit just like any other database.\n\n139\n00:07:06.740 --> 00:07:10.500\nThey have an ODBC driver that you can\nload and you connect it and off you go.\n\n140\n00:07:10.500 --> 00:07:12.380\nSo that makes it really easy to work with.\n\n141\n00:07:12.380 --> 00:07:13.850\nNow I've kind of been\ntalking about the components.\n\n142\n00:07:13.850 --> 00:07:17.080\nLet me bring up a diagram here real quick.\n\n143\n00:07:17.080 --> 00:07:18.470\nActually, I've got it already.\n\n144\n00:07:18.470 --> 00:07:21.990\nSo, this diagram shows\nwhat Redshift looks like.\n\n145\n00:07:21.990 --> 00:07:22.942\nWell, except for the client's side.\n\n146\n00:07:22.942 --> 00:07:24.110\n[LAUGH] The client side of that's you.\n\n147\n00:07:24.110 --> 00:07:25.550\nThat's your own problem, right?\n\n148\n00:07:25.550 --> 00:07:30.680\nBut you connect to Redshift, and\nwhen you create a new Redshift database,\n\n149\n00:07:30.680 --> 00:07:33.210\nit's gonna start by creating\nwhat's called a leader node.\n\n150\n00:07:33.210 --> 00:07:35.050\nThe cluster has a leader, and\n\n151\n00:07:35.050 --> 00:07:40.570\nthat leader node is a highly available\nnode that's created inside of RDS.\n\n152\n00:07:40.570 --> 00:07:45.960\nAnd that node will then front end for\nwhat are called computer nodes.\n\n153\n00:07:45.960 --> 00:07:48.630\nThe leader node is responsible for\nclient communications.\n\n154\n00:07:48.630 --> 00:07:50.980\nClients only talk to the leader node so\n\n155\n00:07:50.980 --> 00:07:55.270\nthat's its job it's interacting with\nthe clients and getting their queries.\n\n156\n00:07:55.270 --> 00:07:58.256\nAnd one it gets their\nquery it then takes it and\n\n157\n00:07:58.256 --> 00:08:01.805\nspreads it across the computer\nnodes on the back end.\n\n158\n00:08:01.805 --> 00:08:06.605\nAnd so that's gonna get spread out all\nacross those guys to get our query\n\n159\n00:08:06.605 --> 00:08:08.970\nrun as quickly as possible.\n\n160\n00:08:08.970 --> 00:08:11.050\nNow when we run that,\nthat means that when we deploy,\n\n161\n00:08:11.050 --> 00:08:12.440\nwe have to have at least two nodes.\n\n162\n00:08:12.440 --> 00:08:16.150\nWe have to have a leader node, and\nwe have to have at least one compute node.\n\n163\n00:08:16.150 --> 00:08:19.660\nAnd if you want it to be highly available,\ntechnically you need two compute nodes.\n\n164\n00:08:19.660 --> 00:08:23.390\nSo yeah, you may end up with\na three node cluster at that point.\n\n165\n00:08:23.390 --> 00:08:26.060\nBut we can add more compute nodes.\n\n166\n00:08:26.060 --> 00:08:29.900\nYou can add more and more and more to\nstart increasing the performance level.\n\n167\n00:08:29.900 --> 00:08:33.400\nThe more compute nodes you have,\nthe more CPUs and\n\n168\n00:08:33.400 --> 00:08:35.660\nthe more RAM you have behind the solution.\n\n169\n00:08:35.660 --> 00:08:38.530\nYou're scaling out,\nyou're adding more database nodes.\n\n170\n00:08:38.530 --> 00:08:41.520\nBut remember the problem with that\nwith other database solutions.\n\n171\n00:08:41.520 --> 00:08:45.680\nWhen you spread them out, the clients\nare only connecting to one of them, right?\n\n172\n00:08:45.680 --> 00:08:48.922\nYou're directing people to\na read replica that's near them.\n\n173\n00:08:48.922 --> 00:08:51.760\nHere, everybody's connecting\nto the leader node, and\n\n174\n00:08:51.760 --> 00:08:53.670\nthe query is being spread\nout across all these.\n\n175\n00:08:53.670 --> 00:08:55.290\nSo I might be sending one query,\n\n176\n00:08:55.290 --> 00:08:59.630\nand that query benefits from\nall the nodes on the backend.\n\n177\n00:08:59.630 --> 00:09:02.910\nNow, as we deploy that out,\nIt's transparent to the end users.\n\n178\n00:09:02.910 --> 00:09:03.640\nThey don't see that.\n\n179\n00:09:03.640 --> 00:09:05.050\nThey don't see all\nthe nodes on the backend.\n\n180\n00:09:05.050 --> 00:09:09.250\nThey just think they're talking\nto one regular old database that\n\n181\n00:09:09.250 --> 00:09:10.790\nfunctions like PostgreSQL.\n\n182\n00:09:10.790 --> 00:09:14.140\nSo it's pretty neat\nthe way that system works.\n\n183\n00:09:14.140 --> 00:09:17.000\nAnd setting this up by hand\nwould be pretty complex, but\n\n184\n00:09:17.000 --> 00:09:19.920\nI'll show you guys here in a minute,\nit's really just clicking next a couple of\n\n185\n00:09:19.920 --> 00:09:23.120\ntimes in the web UI and\nyou got a Redshift database up and going.\n\n186\n00:09:23.120 --> 00:09:25.720\nSo it's pretty easy to spin\nsomething like this up, and\n\n187\n00:09:25.720 --> 00:09:28.170\nnow you've got an all app solution\nthat is highly optimized.\n\n188\n00:09:29.210 --> 00:09:35.970\nAll right now, when I fire up a Redshift\ndatabase, let me jump back over here.\n\n189\n00:09:35.970 --> 00:09:38.590\nAnd I'm gonna go down here to\nmy relational databases and\n\n190\n00:09:38.590 --> 00:09:40.230\nI'm gonna go to the database service.\n\n191\n00:09:40.230 --> 00:09:42.740\nNow, it used to actually say\nrelational database here and\n\n192\n00:09:42.740 --> 00:09:44.020\nthey've kinda changed that.\n\n193\n00:09:44.020 --> 00:09:47.863\nBecause while Redshift is a relational\ndatabase, you'll see DynamoDB,\n\n194\n00:09:47.863 --> 00:09:50.615\nwhich is technically no SQL so\nit's not relational.\n\n195\n00:09:50.615 --> 00:09:52.430\nSo that's why they changed that naming.\n\n196\n00:09:52.430 --> 00:09:56.120\nSo these are just database technologies,\nand I'm gonna go down to Redshift.\n\n197\n00:09:56.120 --> 00:09:57.060\nAnd when you go to Redshift,\n\n198\n00:09:57.060 --> 00:10:00.800\nyou can spin up a new Redshift\ndatabase by creating a cluster.\n\n199\n00:10:00.800 --> 00:10:02.833\nAnd the cluster can have more\nthan one database in it.\n\n200\n00:10:02.833 --> 00:10:05.274\nSo if I need five databases,\nI don't have to set up five clusters.\n\n201\n00:10:05.274 --> 00:10:07.460\nI can use the same cluster.\n\n202\n00:10:07.460 --> 00:10:11.410\nNow for performance reasons, if I'm\nrunning simultaneous massive queries,\n\n203\n00:10:11.410 --> 00:10:14.900\nI may want to have separate clusters for\neach of my databases.\n\n204\n00:10:14.900 --> 00:10:17.230\nBut you can put them all\ntogether if you want.\n\n205\n00:10:17.230 --> 00:10:19.170\nI don't have a cluster right now,\nso I need to spin one up.\n\n206\n00:10:19.170 --> 00:10:21.070\nSo I'm gonna go ahead and\nlaunch a cluster.\n\n207\n00:10:21.070 --> 00:10:24.690\nNow when I launch it,\nit's gonna ask me a few a questions.\n\n208\n00:10:24.690 --> 00:10:26.140\nI've gotta give it a cluster identifier.\n\n209\n00:10:26.140 --> 00:10:27.870\nI'll just call it DonTest.\n\n210\n00:10:27.870 --> 00:10:30.420\nI need to create a database,\nright, at least one.\n\n211\n00:10:30.420 --> 00:10:34.270\nI can add more later on, so\nthis'll be the DonTest database.\n\n212\n00:10:34.270 --> 00:10:37.190\nI can see my database port,\nI specify a master username.\n\n213\n00:10:37.190 --> 00:10:42.220\nThese are things that you're probably\nused to with any other database software.\n\n214\n00:10:42.220 --> 00:10:44.496\nSo I've gotta have something\nthat I can use to connect to it.\n\n215\n00:10:44.496 --> 00:10:45.776\nAnd then as I move forward,\n\n216\n00:10:45.776 --> 00:10:48.514\nit's gonna start asking me\nquestions about the cluster.\n\n217\n00:10:48.514 --> 00:10:53.480\nWhen I launch my cluster,\nI need to pick the instance class.\n\n218\n00:10:53.480 --> 00:10:56.820\nAnd I can always change this\nlater on to bump up performance.\n\n219\n00:10:56.820 --> 00:10:59.130\nWhen you start adding more and\nmore and more nodes,\n\n220\n00:10:59.130 --> 00:11:01.880\nyou usually get better performance\nby having as many nodes as possible.\n\n221\n00:11:01.880 --> 00:11:03.060\nBut that gets expensive, doesn't it?\n\n222\n00:11:03.060 --> 00:11:07.072\nSo I might want a lot of nodes,\nthat are of a lower class.\n\n223\n00:11:07.072 --> 00:11:10.550\nAnd then as I need more performance,\nI can then start increasing the class and\n\n224\n00:11:10.550 --> 00:11:11.150\nscaling up.\n\n225\n00:11:11.150 --> 00:11:13.160\nI usually wanna scale out first.\n\n226\n00:11:13.160 --> 00:11:15.360\nThere are scenarios\nwhere that doesn't work.\n\n227\n00:11:15.360 --> 00:11:18.620\nWhen you scale out,\nwe need some way to partition our data.\n\n228\n00:11:18.620 --> 00:11:22.200\nAnd that means that you need a way to\ndivide your data up across all those nodes\n\n229\n00:11:22.200 --> 00:11:23.230\non the back end.\n\n230\n00:11:23.230 --> 00:11:25.650\nAnd if you don't have a good\nway to do that, if your data\n\n231\n00:11:25.650 --> 00:11:29.350\ndoesn't have some good way to distribute\nit out that makes sense with your queries.\n\n232\n00:11:29.350 --> 00:11:32.460\nThen you're actually better off\nhaving less nodes in that point so\n\n233\n00:11:32.460 --> 00:11:34.980\nthat all your data's kind of in one place.\n\n234\n00:11:34.980 --> 00:11:38.090\nBut under the node type, I can pick\nbetween the different selections here.\n\n235\n00:11:38.090 --> 00:11:40.490\nThere's only six selections.\n\n236\n00:11:40.490 --> 00:11:43.530\nAnd they're actually grouped,\nit doesn't show it here, but\n\n237\n00:11:43.530 --> 00:11:46.180\nthey're kinda grouped into two pieces.\n\n238\n00:11:46.180 --> 00:11:50.530\nNotice how I've got two that are dc and\nthe rest are all ds, right.\n\n239\n00:11:50.530 --> 00:11:52.810\nSo the dc ones,\nthose are compute optimized.\n\n240\n00:11:52.810 --> 00:11:57.500\nThey're the ones that have CPU\noptimizations for doing complex queries.\n\n241\n00:11:57.500 --> 00:12:02.180\nBut the other four are all storage\noptimized, right, optimized for heavy IO.\n\n242\n00:12:02.180 --> 00:12:06.940\nWhen you're doing heavy analysis,\nit's usually something that isn't\n\n243\n00:12:06.940 --> 00:12:10.520\neasily cached into RAM, and that means\nDisk IO is gonna be our bottleneck.\n\n244\n00:12:10.520 --> 00:12:12.766\nAnd that's why there's four\ndifferent selections there.\n\n245\n00:12:12.766 --> 00:12:14.797\nBut if it's something\nthat's easily cached,\n\n246\n00:12:14.797 --> 00:12:17.700\nthen the query CPU utilization is\nusually gonna be the bottleneck.\n\n247\n00:12:17.700 --> 00:12:20.320\nAnd that's why we've got\nthose two options there.\n\n248\n00:12:20.320 --> 00:12:25.264\nNot as many choices on the CPU side,\nbut that's how it's kind of laid out.\n\n249\n00:12:25.264 --> 00:12:29.951\nWe'll do a dc1.large just so I don't\nhave to pay too much during the show.\n\n250\n00:12:29.951 --> 00:12:30.702\n&gt;&gt; [LAUGH].\n&gt;&gt; [LAUGH].\n\n251\n00:12:30.702 --> 00:12:32.958\nBut you know you would basically\ngauge this on your own data.\n\n252\n00:12:32.958 --> 00:12:35.790\nNow when I choose that,\nnotice I get my CPU units here.\n\n253\n00:12:35.790 --> 00:12:40.760\nI have 15 gigs of memory per node,\n160 gigs of SSD storage per node.\n\n254\n00:12:40.760 --> 00:12:43.040\nAnd my IO performance is set to moderate.\n\n255\n00:12:43.040 --> 00:12:47.320\nIf I flip that up to a ds2,\nwe'll see the numbers change, right?\n\n256\n00:12:47.320 --> 00:12:50.170\nAnd now I'm in a ds2 extra large,\nI've got 31 gigs.\n\n257\n00:12:50.170 --> 00:12:55.240\nIf I go all the way up top, I can see I've\ngot very high IO performance on that,\n\n258\n00:12:55.240 --> 00:13:00.060\nand I've got 16 terabytes of hard\ndisk drive storage per node and\n\n259\n00:13:00.060 --> 00:13:02.300\n120 gigs of RAM per node.\n\n260\n00:13:02.300 --> 00:13:03.070\nSo pretty big.\n\n261\n00:13:03.070 --> 00:13:06.000\n&gt;&gt; Nice, Don,\nyou're usually the tip and trick man.\n\n262\n00:13:06.000 --> 00:13:08.780\nI know you always have a card up your\nsleeve a lot of times when it comes to\n\n263\n00:13:08.780 --> 00:13:09.660\nthings like this.\n\n264\n00:13:09.660 --> 00:13:12.550\nIs there a way to use the smaller storage,\nor\n\n265\n00:13:12.550 --> 00:13:18.002\nthe less optimized version, and still\nfind some optimization in other places?\n\n266\n00:13:18.002 --> 00:13:20.500\n&gt;&gt; Yeah, there's plenty of ways\nto tweak a lot of this stuff, and\n\n267\n00:13:20.500 --> 00:13:23.640\nyou'll find that your query is\none way that you can tweak it.\n\n268\n00:13:23.640 --> 00:13:27.334\nWhen you divide your data up amongst\nthese nodes, if you know, hey,\n\n269\n00:13:27.334 --> 00:13:32.050\nI'm gonna run a query and my query is all\ngoing to be based on date ranges, right.\n\n270\n00:13:32.050 --> 00:13:34.877\nSo when I divide my data up\nacross the nodes on the backend,\n\n271\n00:13:34.877 --> 00:13:38.686\nI should divide it up by date so that\nsimilar dates are stored on similar nodes,\n\n272\n00:13:38.686 --> 00:13:42.550\nand we can reach right out and grab\nthat information and pull it that way.\n\n273\n00:13:42.550 --> 00:13:46.610\nOr if I know that I'm gonna be pulling\nemployees by last name that start with\n\n274\n00:13:46.610 --> 00:13:49.050\na certain letter, then I'm gonna\ndivide things up that way, so.\n\n275\n00:13:49.050 --> 00:13:52.950\nThe way we divide our data is gonna impact\nperformance more, in a lot of cases,\n\n276\n00:13:52.950 --> 00:13:56.930\nthan what we choose here for CPU,\nand even storage optimization.\n\n277\n00:13:56.930 --> 00:14:01.680\nBut if you're not doing queries\nthat are fully normalized,\n\n278\n00:14:01.680 --> 00:14:04.960\nif you're just randomly grabbing data,\nthere's not a good way to organize that.\n\n279\n00:14:04.960 --> 00:14:07.115\nAnd the solution is to\nthrow money at the problem.\n\n280\n00:14:07.115 --> 00:14:10.090\n&gt;&gt; [LAUGH]\n&gt;&gt; And scale up or scale out.\n\n281\n00:14:10.090 --> 00:14:12.020\nSo we can get those specified.\n\n282\n00:14:12.020 --> 00:14:17.750\nAnd I do wanna point out, the number of\ncompute nodes on the backend does vary.\n\n283\n00:14:17.750 --> 00:14:19.958\nI didn't mention the number\nof compute nodes earlier and\n\n284\n00:14:19.958 --> 00:14:21.854\nthat's because there's\nmore than one answer.\n\n285\n00:14:21.854 --> 00:14:26.442\nWhen I chose dc1.large, notice down here,\nI can have one compute node with\n\n286\n00:14:26.442 --> 00:14:31.790\na maximum of one compute node because my\ncluster type defaults to single node.\n\n287\n00:14:31.790 --> 00:14:33.408\nIf i flip to multi mode,\nmy maximum becomes 32.\n\n288\n00:14:33.408 --> 00:14:35.018\nMy minimum is two.\n\n289\n00:14:35.018 --> 00:14:39.058\nI have to have a minimum\nof two nodes because well,\n\n290\n00:14:39.058 --> 00:14:44.458\nif I need availability or\nI need to divide data to get performance.\n\n291\n00:14:44.458 --> 00:14:45.970\nOtherwise, I might as well\njust have a regular RDS.\n\n292\n00:14:45.970 --> 00:14:50.932\nIf I just have one node, how is this\ngonna be any different my MySQL or\n\n293\n00:14:50.932 --> 00:14:52.162\nMariaDB right?\n\n294\n00:14:52.162 --> 00:14:55.708\nSo I need to have that minimum of two and\nthen we bump up from there, but\n\n295\n00:14:55.708 --> 00:14:56.696\na maximum of 32.\n\n296\n00:14:56.696 --> 00:15:00.932\nIf I jump up to a DC18XL,\nit goes up to 100 nodes.\n\n297\n00:15:00.932 --> 00:15:05.378\nAnd when I switch over to storage with\nthe extra large, it goes back down.\n\n298\n00:15:05.378 --> 00:15:08.142\nWe can do single node, which would be\ngreat for test and development I guess.\n\n299\n00:15:08.142 --> 00:15:10.956\nBut otherwise,\nyou can bump up to 32 nodes, and\n\n300\n00:15:10.956 --> 00:15:14.920\nthen when we start moving into extra\nlarge, it goes back up to 100.\n\n301\n00:15:14.920 --> 00:15:17.300\nSo you'll see that maximum\nnode number varies.\n\n302\n00:15:17.300 --> 00:15:20.400\nBut 100 nodes, imagine that.\n\n303\n00:15:20.400 --> 00:15:24.620\nImagine having a petabyte of\ndata spread across 100 nodes, so\n\n304\n00:15:24.620 --> 00:15:28.040\neach node's responsible for\na very small portion of that data.\n\n305\n00:15:28.040 --> 00:15:30.470\nAnd when I run a query, distributing\nthat query across all of them,\n\n306\n00:15:30.470 --> 00:15:33.870\nthey all return the results\nback to the client.\n\n307\n00:15:33.870 --> 00:15:36.540\nThe client gets it all\nthrough the leader node.\n\n308\n00:15:36.540 --> 00:15:40.200\nThey just think it's one database doing\nthe work, but it's actually 100 servers.\n\n309\n00:15:40.200 --> 00:15:44.350\n&gt;&gt; Now Don, if I choose to go with a multi\nnode here or I go with a single node and\n\n310\n00:15:44.350 --> 00:15:47.620\nlater, I realize you know what,\nI should have gone with that multi node.\n\n311\n00:15:47.620 --> 00:15:48.420\nCan I change it or\n\n312\n00:15:48.420 --> 00:15:51.580\ndo I have to create a new one and\nimport the database or do whatever?\n\n313\n00:15:51.580 --> 00:15:53.190\n&gt;&gt; So you can change it.\n\n314\n00:15:53.190 --> 00:15:55.220\nIt is usually easier to create a new one.\n\n315\n00:15:55.220 --> 00:15:56.261\nBut you can change it.\n\n316\n00:15:56.261 --> 00:15:58.469\nPersonally, if you're\ndealing with Red Shift,\n\n317\n00:15:58.469 --> 00:16:00.500\nyou really shouldn't be using single node.\n\n318\n00:16:00.500 --> 00:16:04.392\nThere's, I can't, I can't think of a good\nusage model where you want single note to\n\n319\n00:16:04.392 --> 00:16:05.917\nbe on good test and development.\n\n320\n00:16:05.917 --> 00:16:09.183\nAnd if you're doing test and development,\nyou're probably going to want to do some\n\n321\n00:16:09.183 --> 00:16:11.398\nwork load testing to make\nsure you're scaling it right.\n\n322\n00:16:11.398 --> 00:16:16.499\nAnd you're going to want multi-node for\nthat.\n\n323\n00:16:16.499 --> 00:16:19.589\nThere's not really a great use case for\nsingle node except for experimenting and\n\n324\n00:16:19.589 --> 00:16:20.868\nmessing around with it, right.\n\n325\n00:16:20.868 --> 00:16:24.718\nIf you wanna learn some of the newer query\ncommands that you're not familiar with,\n\n326\n00:16:24.718 --> 00:16:28.403\nyou might spend one on single node and\ngo that route or something of that nature.\n\n327\n00:16:28.403 --> 00:16:30.147\nBut otherwise you can change it.\n\n328\n00:16:30.147 --> 00:16:33.000\nYou can always add more nodes,\nyou kind of go that route.\n\n329\n00:16:33.000 --> 00:16:34.100\nEasy enough to change after the fact.\n\n330\n00:16:35.130 --> 00:16:39.100\nAnd that's something we're gonna typically\ndo because you probably don't need\n\n331\n00:16:39.100 --> 00:16:40.920\n8XL all the time.\n\n332\n00:16:40.920 --> 00:16:42.740\nYou probably just need\nit at certain times.\n\n333\n00:16:42.740 --> 00:16:45.340\nWhen you're running the big queries, you\ncan always bump up and do that, Nick, and\n\n334\n00:16:45.340 --> 00:16:47.020\nit'll all be automated via the API.\n\n335\n00:16:47.020 --> 00:16:53.090\nSo I might spin up, I'll do five nodes and\nwe'll go expensive with it too.\n\n336\n00:16:53.090 --> 00:16:55.350\nI know, this is where the show's\nbudget starts going up.\n\n337\n00:16:55.350 --> 00:17:00.600\nI'm only gonna do five, I could do a 100\nthough, we could have some real fun.\n\n338\n00:17:00.600 --> 00:17:01.157\nLet me do 2.\n\n339\n00:17:01.157 --> 00:17:01.666\n[LAUGH].\n&gt;&gt; [LAUGH].\n\n340\n00:17:01.666 --> 00:17:04.020\n&gt;&gt; All right now as we move forward,\n\n341\n00:17:04.020 --> 00:17:06.613\nit's gonna give me other\noptions that I can tweak.\n\n342\n00:17:06.613 --> 00:17:09.550\nAnd it is important to be aware there's\na lot of stuff that we can mess with here\n\n343\n00:17:09.550 --> 00:17:13.260\nto optimize what we're going to be\ndoing here inside of this database.\n\n344\n00:17:13.260 --> 00:17:16.370\nYou'll see I've got the option\nto encrypt it, right?\n\n345\n00:17:16.370 --> 00:17:18.210\nI'll jump ahead in my order here.\n\n346\n00:17:18.210 --> 00:17:19.840\nWe've got security options.\n\n347\n00:17:19.840 --> 00:17:24.740\nIf we have data that is sensitive,\nwe can use SSL or TLS to encrypt\n\n348\n00:17:24.740 --> 00:17:28.510\nour communications as we send data in and\nget data out of the database.\n\n349\n00:17:28.510 --> 00:17:32.720\nBut the database itself,\nis stored unencrypted by default.\n\n350\n00:17:32.720 --> 00:17:35.940\nBut we can use Amazon's KMS or HSM, and\n\n351\n00:17:35.940 --> 00:17:39.920\nthen we can have it encrypted with private\nkeys that are managed through that system.\n\n352\n00:17:39.920 --> 00:17:41.940\nAnd, now we're in business, right?\n\n353\n00:17:41.940 --> 00:17:44.610\nSo that helps us to protect\nthat data if we need to.\n\n354\n00:17:44.610 --> 00:17:48.774\nWe can use a virtual private cloud, or\na VPC to restrict access into this.\n\n355\n00:17:48.774 --> 00:17:52.810\nWe can limit it with security groups,\nwhich you'll see in here somewhere.\n\n356\n00:17:52.810 --> 00:17:55.670\nYou can choose to give\nit a public IP address.\n\n357\n00:17:55.670 --> 00:17:57.390\nMaybe you don't want it to\nhave a public IP, right?\n\n358\n00:17:57.390 --> 00:18:00.990\nMaybe it's just nodes that are in your\nVPC that need to be accessing it.\n\n359\n00:18:00.990 --> 00:18:03.460\nSo, it can just have\na private one if you need to.\n\n360\n00:18:03.460 --> 00:18:05.100\nYou can certainly do that too.\n\n361\n00:18:05.100 --> 00:18:07.950\nYou can also specify an availability zone.\n\n362\n00:18:07.950 --> 00:18:10.850\nThat's another option that's really handy\n\n363\n00:18:10.850 --> 00:18:13.210\nif you know the clients\nthat are connecting to it.\n\n364\n00:18:13.210 --> 00:18:15.260\nMaybe they're web front ends\nthat are connecting to it.\n\n365\n00:18:15.260 --> 00:18:17.340\nIf they're in one particular AZ,\n\n366\n00:18:17.340 --> 00:18:22.140\nyou can place the red shift leader node in\nthe same AZ, so it's direct communication.\n\n367\n00:18:22.140 --> 00:18:23.690\nIt'll get better performance that way.\n\n368\n00:18:23.690 --> 00:18:26.450\nThey'll get good performance\nin different AZs also, but\n\n369\n00:18:26.450 --> 00:18:28.130\nit's better if they're in the same.\n\n370\n00:18:28.130 --> 00:18:32.370\nWe do need to plan for redundancy and\navailability, and all of that.\n\n371\n00:18:32.370 --> 00:18:34.359\nBut it is one way to try and\noptimize things.\n\n372\n00:18:35.720 --> 00:18:39.530\nAfter that we see CloudWatch were we\ncan set up our alerts and alarms and so\n\n373\n00:18:39.530 --> 00:18:41.190\non, that we got there.\n\n374\n00:18:41.190 --> 00:18:42.650\nIt's built to get those in place.\n\n375\n00:18:43.680 --> 00:18:47.120\nOnce that's done though we can spin this\nthing up and notice when it says here,\n\n376\n00:18:47.120 --> 00:18:51.169\nyou'll start accruing chargers as\nsoon as your cluster is active.\n\n377\n00:18:52.190 --> 00:18:54.460\nRegardless of whether you put data in it,\nright?\n\n378\n00:18:54.460 --> 00:18:55.800\nDoesn't matter if there's data in it or\nnot.\n\n379\n00:18:55.800 --> 00:18:57.410\nBecause they've gotta\nspin up all these nodes.\n\n380\n00:18:57.410 --> 00:19:00.420\nThey've gotta get it up and\nready for your data to come in.\n\n381\n00:19:00.420 --> 00:19:03.810\nSo, we need to be aware\nthat it is always charging.\n\n382\n00:19:03.810 --> 00:19:06.557\nAnd the neat thing about RedShift, is\nit's so easy to spin these databases up,\n\n383\n00:19:06.557 --> 00:19:08.859\nthat when I'm done, I can just\ndelete the database, get it done.\n\n384\n00:19:08.859 --> 00:19:11.067\nAnd even delete the cluster,\nget rid of the whole thing, and\n\n385\n00:19:11.067 --> 00:19:12.723\nthen spin it back up\nagain whenever I need it.\n\n386\n00:19:12.723 --> 00:19:16.017\nIf I'm running queries against\nthis thing constantly, then yeah,\n\n387\n00:19:16.017 --> 00:19:17.678\nI need to keep it up and that's it.\n\n388\n00:19:17.678 --> 00:19:23.983\nI've picked a pretty small configuration\nso I'm only at basically $14 per hour.\n\n389\n00:19:23.983 --> 00:19:26.795\nBut they tell me it's $6 and\n80 cents per node.\n\n390\n00:19:26.795 --> 00:19:29.357\nThey give me that pricing because\nI might want to add more nodes and\n\n391\n00:19:29.357 --> 00:19:32.100\nthat's gonna be the cost and\nthat's really not that significant.\n\n392\n00:19:32.100 --> 00:19:35.090\nAll right, so we'll go and\nlaunch that cluster and\n\n393\n00:19:35.090 --> 00:19:36.560\nwhether it start spinning\nup the background.\n\n394\n00:19:36.560 --> 00:19:38.127\nNow, once the cluster is up,\n\n395\n00:19:38.127 --> 00:19:41.279\nit's not terribly useful until\nI get data into it, right?\n\n396\n00:19:41.279 --> 00:19:42.935\nAnd I chose to create a default database,\n\n397\n00:19:42.935 --> 00:19:45.691\nso the next thing I'm gonna need to\ndo is get a client connect it to it.\n\n398\n00:19:45.691 --> 00:19:50.610\nAnd if you look on the left side here,\nyou'll see were I got Connect Client.\n\n399\n00:19:50.610 --> 00:19:54.270\nAnd here's where it'll give me the option\nto download the JDBC driver or\n\n400\n00:19:54.270 --> 00:19:57.190\nODBC driver that's gonna let\nme connect up to this and\n\n401\n00:19:57.190 --> 00:20:00.750\nview it just like any other\nrelational SQL database.\n\n402\n00:20:00.750 --> 00:20:01.640\nSo, if I come in here and\n\n403\n00:20:01.640 --> 00:20:05.590\npick the one for Windows, or Linux,\nor Mac OS, I can get connected.\n\n404\n00:20:05.590 --> 00:20:09.290\nJDBC is just different versions based on\nwhich version of Java that you're using.\n\n405\n00:20:09.290 --> 00:20:11.073\nSo, we can pick which one we want.\n\n406\n00:20:11.073 --> 00:20:14.892\nAnd then, we get connected cuz this is our\ncluster URL show up here after I pick up\n\n407\n00:20:14.892 --> 00:20:15.576\nmy cluster and\n\n408\n00:20:15.576 --> 00:20:19.060\nmy end points are available here cuz\nI still they're still spinning up.\n\n409\n00:20:19.060 --> 00:20:23.950\nBut as soon as they're see that URL\npopulate, I can get connected and load in\n\n410\n00:20:23.950 --> 00:20:27.700\nmy data, load my data, start one of my\nqueries, run to my host content, right.\n\n411\n00:20:27.700 --> 00:20:29.512\nNow when you're loading your data,\n\n412\n00:20:29.512 --> 00:20:33.850\nyou will have the option to choose how\nthe data is distributed on the back end.\n\n413\n00:20:33.850 --> 00:20:37.670\nAnd by default, it's gonna do\nwhat's called an Even Distribution.\n\n414\n00:20:37.670 --> 00:20:43.230\nWhich means, if I load up\na hundred terabytes of data and\n\n415\n00:20:43.230 --> 00:20:46.650\nI've got ten nodes, each node is\ngonna get ten terabytes of data,\n\n416\n00:20:46.650 --> 00:20:48.460\njust evenly distributes, and that's that.\n\n417\n00:20:48.460 --> 00:20:49.549\nAnd that might work for\n\n418\n00:20:49.549 --> 00:20:53.285\nyou if it's just kind of random data\nwith no particular order, or whatever.\n\n419\n00:20:53.285 --> 00:20:56.840\nBut you can jump in and start to\nmanipulate that if you want, all right?\n\n420\n00:20:56.840 --> 00:20:59.470\nAn even distribution might not\nbe the right thing for you.\n\n421\n00:20:59.470 --> 00:21:02.210\nYou can come in and\nyou can tell it to do a key distribution.\n\n422\n00:21:02.210 --> 00:21:05.610\nAnd a key is where you identify one\ncolumn as being the key column.\n\n423\n00:21:06.610 --> 00:21:10.460\nKey is kinda a misleading term because you\nmight think primary key or foreign key.\n\n424\n00:21:10.460 --> 00:21:11.701\nDoesn't have to be right?\n\n425\n00:21:11.701 --> 00:21:14.401\nThis could be a column that\nis date range or something.\n\n426\n00:21:14.401 --> 00:21:17.230\nIt is what you want to be running\nyour query based off are the most\n\n427\n00:21:17.230 --> 00:21:19.020\nimportant column for you.\n\n428\n00:21:19.020 --> 00:21:22.230\nAnd then it can organize data\non the back end based on that.\n\n429\n00:21:22.230 --> 00:21:26.590\nAnd then on top of that, third option is\navailable which is probably the list use\n\n430\n00:21:26.590 --> 00:21:30.580\noption which is OR, so EVEN, KEY and OR.\n\n431\n00:21:30.580 --> 00:21:34.660\nOR says I want my entire\ndata set on every node.\n\n432\n00:21:34.660 --> 00:21:39.890\nNow that would be used if you had,\njust queries that were so\n\n433\n00:21:39.890 --> 00:21:43.500\ndifferent, that there was no one way\nof sorting data that would optimize,\n\n434\n00:21:43.500 --> 00:21:45.910\neven just one of them better yet\nall of them.\n\n435\n00:21:45.910 --> 00:21:46.970\nAnd so you say, you know what?\n\n436\n00:21:46.970 --> 00:21:48.010\nScrew it.\nMy data set's small.\n\n437\n00:21:48.010 --> 00:21:51.460\nI'm gonna have 100 nodes and they're\nall gonna have a full copy of the data.\n\n438\n00:21:51.460 --> 00:21:53.400\nAnd so, I can distribute my\nqueries across any of them.\n\n439\n00:21:53.400 --> 00:21:54.620\nThey've all got the full set of data.\n\n440\n00:21:54.620 --> 00:21:55.998\nAnd now we can get great\nperformance out of that.\n\n441\n00:21:55.998 --> 00:22:00.570\nYour disk I/O's usually higher, it's\na little more challenging on the back end,\n\n442\n00:22:00.570 --> 00:22:03.190\nwhich you don't have to worry about,\nAmazon does.\n\n443\n00:22:03.190 --> 00:22:04.869\nBut it is another option that's out there.\n\n444\n00:22:04.869 --> 00:22:09.003\nIdeally, you'll have a key distribution\nyou can use that'll really optimize\n\n445\n00:22:09.003 --> 00:22:09.715\nyour query.\n\n446\n00:22:09.715 --> 00:22:12.165\nEven as the default it works out well,\n\n447\n00:22:12.165 --> 00:22:15.465\nalt would be the one that is used less\nfrequently of the distribution models.\n\n448\n00:22:15.465 --> 00:22:18.385\nSo, you'll see that when you go\nupload your data in that option\n\n449\n00:22:18.385 --> 00:22:21.655\nto choose how that distribution\nis spread across on the database.\n\n450\n00:22:22.807 --> 00:22:26.240\nAll right,\ntrying to think if I missed anything else.\n\n451\n00:22:26.240 --> 00:22:30.440\nSort keys, is another thing you'll\nsee when you upload your data.\n\n452\n00:22:30.440 --> 00:22:34.366\nUsually data in a database is not\nsorted in any particular order.\n\n453\n00:22:34.366 --> 00:22:37.583\nSo when we run a query,\nwe normally ask you to return the data and\n\n454\n00:22:37.583 --> 00:22:40.516\nsort it by a certain value, so\nyou can specify a sort key.\n\n455\n00:22:40.516 --> 00:22:44.255\nAnd that will allow Red Shift to\npre optimize the data to be sorted\n\n456\n00:22:44.255 --> 00:22:46.135\nthe way that you expect it to be.\n\n457\n00:22:46.135 --> 00:22:49.550\nAnd so that's another one that we can\nspecify if our data isn't already sorted.\n\n458\n00:22:49.550 --> 00:22:53.340\nIf it is already sorted we don't need\nthat and you can run that way but\n\n459\n00:22:53.340 --> 00:22:55.360\na lot of us don't have that luxury so.\n\n460\n00:22:55.360 --> 00:22:58.715\n&gt;&gt; Now Don, what about doing backups and\nrecovery, that kind of thing?\n\n461\n00:22:58.715 --> 00:23:01.750\nWe talked about that as in our\nother relational databases.\n\n462\n00:23:01.750 --> 00:23:02.687\nThe standard fare and\n\n463\n00:23:02.687 --> 00:23:06.243\nnow we're in Red Shift, do we have to sink\nout of options or what's up with that?\n\n464\n00:23:06.243 --> 00:23:08.390\n&gt;&gt; Absolutely, it's the same.\n\n465\n00:23:08.390 --> 00:23:12.830\nIf I go into my clusters here and I just\ntake it untested, it's still creating but\n\n466\n00:23:12.830 --> 00:23:14.280\nat least it let me see it.\n\n467\n00:23:14.280 --> 00:23:17.610\nWhen I come in here,\nI can see that it's firing up right now.\n\n468\n00:23:17.610 --> 00:23:19.530\nAnd I've got the backup option.\n\n469\n00:23:19.530 --> 00:23:22.722\nJust like the other ones,\nit actually does do automated backups, so\n\n470\n00:23:22.722 --> 00:23:26.170\nit's gonna back that up for us and\nI don't have to worry about it.\n\n471\n00:23:26.170 --> 00:23:28.630\nBut I can also take a snapshot\nwhenever I want, and\n\n472\n00:23:28.630 --> 00:23:32.560\nmore importantly,\nI can configure cross region snapshots.\n\n473\n00:23:32.560 --> 00:23:37.400\nSo if I'm worried about redundancy\nI can take this Red Shift database,\n\n474\n00:23:37.400 --> 00:23:40.160\ntake a snapshot and\nstore the snapshot in another region.\n\n475\n00:23:40.160 --> 00:23:43.313\nAnd so if this one were to fail I could\neasily restore it form a snapshot in that\n\n476\n00:23:43.313 --> 00:23:45.290\nother region and bring it back up.\n\n477\n00:23:45.290 --> 00:23:46.600\nOr maybe I just wanna move it.\n\n478\n00:23:46.600 --> 00:23:48.830\nAnd say like, all right,\nthis year I was running it in US East and\n\n479\n00:23:48.830 --> 00:23:49.980\nthis year I want to run it in US West.\n\n480\n00:23:49.980 --> 00:23:53.420\nSo let me take a snapshot and throw it in\nUS West and then bring it up over there.\n\n481\n00:23:53.420 --> 00:23:56.250\nSo you've got that functionality\njust like any other database.\n\n482\n00:23:56.250 --> 00:23:57.400\nThey really did try and\n\n483\n00:23:57.400 --> 00:24:02.000\nmake it as much like the other\ndatabases as possible to make it easy.\n\n484\n00:24:02.000 --> 00:24:03.790\nBecause it's terribly complex.\n\n485\n00:24:03.790 --> 00:24:05.810\nIf you were to set this up by\nhand it's a nightmare, but\n\n486\n00:24:05.810 --> 00:24:08.270\nhere they try to make it easy and\nI think they succeeded.\n\n487\n00:24:08.270 --> 00:24:10.046\nIt's pretty simple to work with.\n\n488\n00:24:10.046 --> 00:24:11.390\n&gt;&gt; All right, well, Don,\n\n489\n00:24:11.390 --> 00:24:14.270\nwe've gone through a lot when\nit comes to Red Shift and\n\n490\n00:24:14.270 --> 00:24:18.366\nthe good news is not a lot of difference\nper se when it comes to Red Shift versus\n\n491\n00:24:18.366 --> 00:24:22.080\nthe other traditional types of\nrelational databases inside of AWS.\n\n492\n00:24:22.080 --> 00:24:23.840\nIs there anything else?\n\n493\n00:24:23.840 --> 00:24:27.130\nSome tidbits, tricks, tips,\nanything else we would like to know?\n\n494\n00:24:27.130 --> 00:24:30.160\n&gt;&gt; I guess the only other thing was,\nyou mentioned resizing the cluster,\n\n495\n00:24:30.160 --> 00:24:32.350\nor scaling it up or scaling it out.\n\n496\n00:24:32.350 --> 00:24:34.750\nI can't do it here cuz this\none's still spinning up but\n\n497\n00:24:34.750 --> 00:24:36.860\nyou see the option right\nhere under Cluster?\n\n498\n00:24:36.860 --> 00:24:39.100\nAnd we can modify or resize.\n\n499\n00:24:39.100 --> 00:24:41.970\nIf I resize it, that's where I\ncan bump up my instance class.\n\n500\n00:24:41.970 --> 00:24:43.620\nI can add more nodes.\n\n501\n00:24:43.620 --> 00:24:45.480\nYou can those resources there.\n\n502\n00:24:45.480 --> 00:24:48.496\nSo, easy enough to do it,\nit's great out you are still speeding up,\n\n503\n00:24:48.496 --> 00:24:50.579\nI want to speed up,\nyou will see those options.\n\n504\n00:24:50.579 --> 00:24:54.660\nMost of this stuff is pretty straight\nforward as far as getting it put in place.\n\n505\n00:24:54.660 --> 00:24:58.741\nAnd you've got your performance monitoring\nso you can gauge whether not it's behaving\n\n506\n00:24:58.741 --> 00:25:01.236\nthe way you expect to behave and\nbombing up is needed.\n\n507\n00:25:01.236 --> 00:25:05.251\nBut if you've got a huge amount of\ndata that you are doing analysis of,\n\n508\n00:25:05.251 --> 00:25:08.190\nyou'll find that Redshift\nis really impressive.\n\n509\n00:25:08.190 --> 00:25:09.160\n&gt;&gt; All right, well very cool stuff.\n\n510\n00:25:09.160 --> 00:25:10.620\nWe do enjoy the Redshift.\n\n511\n00:25:10.620 --> 00:25:14.530\nIt's a very interesting product and\nlike Don said, you've got all that data,\n\n512\n00:25:14.530 --> 00:25:16.230\nyou definitely want to go that route.\n\n513\n00:25:16.230 --> 00:25:18.500\nWith that being said, I'm looking at\nour clock, we are out of time for\n\n514\n00:25:18.500 --> 00:25:19.120\nthis episode.\n\n515\n00:25:19.120 --> 00:25:20.980\nWe do thank you guys for joining us.\n\n516\n00:25:20.980 --> 00:25:24.040\nSigning off for ITProTV,\nI've been your host Daniel Lowry.\n\n517\n00:25:24.040 --> 00:25:24.580\n&gt;&gt; And I'm Don Pazet.\n\n518\n00:25:24.580 --> 00:25:26.877\n&gt;&gt; And we'll see you next time.\n\n519\n00:25:26.877 --> 00:25:32.652\n[MUSIC]\n\n520\n00:25:32.652 --> 00:25:34.510\nThank you for watching IT Pro TV.\n\n",
          "vimeoId": "207817132"
        },
        {
          "description": "In this episode, Daniel and Don take a look at DynamoDB, Amazon's high performance NoSQL database. They begin by explaining the basics of DynamoDB and NoSQL. Then they jump tackle the focus of DynamoDB. Also covered includes Scaling and Partitioning, Security, and Streams.",
          "length": "1688",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-3-amazon_dynamodb-030817.00_31_46_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-3-amazon_dynamodb-030817.00_31_46_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-7-3-amazon_dynamodb-030817.00_31_46_13.Still001-sm.jpg",
          "title": "Amazon Dynamodb",
          "transcript": "WEBVTT\n\n1\n00:00:00.045 --> 00:00:05.680\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:05.680 --> 00:00:06.935\n[CROSSTALK]\n\n3\n00:00:06.935 --> 00:00:08.429\n[MUSIC]\n\n4\n00:00:08.429 --> 00:00:12.539\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:12.539 --> 00:00:13.788\n&gt;&gt; All right, greetings everyone.\n\n6\n00:00:13.788 --> 00:00:16.475\nWelcome to another great\nepisode of ITPro.TV.\n\n7\n00:00:16.475 --> 00:00:19.163\nI'm your host Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.163 --> 00:00:22.523\nwe are back with more of our\nAmazon Certified Solutions Architect, and\n\n9\n00:00:22.523 --> 00:00:24.830\nof course that's\nthe associated level series.\n\n10\n00:00:24.830 --> 00:00:28.670\nAnd of course joining us back yet\nagain like a day without sunshine,\n\n11\n00:00:28.670 --> 00:00:30.760\nour good friend and mentor, Mr. Don Pezet.\n\n12\n00:00:30.760 --> 00:00:31.346\nDan, welcome back sir.\n\n13\n00:00:31.346 --> 00:00:32.119\nHow's it going today?\n\n14\n00:00:32.119 --> 00:00:33.372\n&gt;&gt; It is going great, Daniel.\n\n15\n00:00:33.372 --> 00:00:37.306\nReady to dive right back into our\ndatabase services inside of AWS.\n\n16\n00:00:37.306 --> 00:00:38.422\nAnd in this epsiode,\n\n17\n00:00:38.422 --> 00:00:42.452\nwe're gonna be talking about Amazon\nDynamoDB which is well they're leading\n\n18\n00:00:42.452 --> 00:00:46.482\nNoSQL database solution that's a part\nof the database services inside AWS.\n\n19\n00:00:46.482 --> 00:00:49.657\nSo another great way, we can quickly and\neasily deploy a solution out there and\n\n20\n00:00:49.657 --> 00:00:50.590\nmake use of it.\n\n21\n00:00:50.590 --> 00:00:52.937\nI know a lot of you haven't worked\nwith NoSQL databases before,\n\n22\n00:00:52.937 --> 00:00:54.110\nso this will be a great chance for\n\n23\n00:00:54.110 --> 00:00:56.779\nus to see something new which is\nexciting and I'm looking forward to it.\n\n24\n00:00:56.779 --> 00:00:59.583\n&gt;&gt; All right,\nwell speaking of it being something new.\n\n25\n00:00:59.583 --> 00:01:02.560\nIf you're like me,\nthis is definitely new ground for me.\n\n26\n00:01:02.560 --> 00:01:05.260\nSo Don, could you please start\nus off with just the basics.\n\n27\n00:01:05.260 --> 00:01:06.449\nWhat is DynamoDB?\n\n28\n00:01:06.449 --> 00:01:07.730\nHelp us understand that.\n\n29\n00:01:07.730 --> 00:01:11.861\n&gt;&gt; All right, so DynamoDB is a highly\nscalable database service that is\n\n30\n00:01:11.861 --> 00:01:16.720\ndeveloped and hosted by Amazon, so\nit's an original product of theirs.\n\n31\n00:01:16.720 --> 00:01:18.560\nAnd it's designed to be\n\n32\n00:01:19.670 --> 00:01:24.750\nreally kind of I won't say evenly\nscalable but very very highly scalable.\n\n33\n00:01:24.750 --> 00:01:28.728\nSo it can handle huge workloads or\nsmall workloads or whatever you want.\n\n34\n00:01:28.728 --> 00:01:33.125\nSo it's NoSQL database, so we can throw\npretty much any type of data added and\n\n35\n00:01:33.125 --> 00:01:34.690\ndo it very, very quickly.\n\n36\n00:01:34.690 --> 00:01:36.960\nIt's really focused on performance, so\n\n37\n00:01:36.960 --> 00:01:40.910\nwhen we deploy it,\nwhat's really interesting about DynamoDB\n\n38\n00:01:40.910 --> 00:01:44.130\nis we don't have to see\nthe instances behind the scenes.\n\n39\n00:01:44.130 --> 00:01:48.490\nWe don't have to know about the servers or\nAMIs, or\n\n40\n00:01:48.490 --> 00:01:50.260\nany of that stuff that's being used.\n\n41\n00:01:50.260 --> 00:01:53.420\nAll we have to do is specify a capacity.\n\n42\n00:01:53.420 --> 00:01:56.670\nThis is different than any of the other\ndatabases that we've talked about.\n\n43\n00:01:56.670 --> 00:01:59.560\nThe other databases you have to pick\nyour instance type, how much CPU,\n\n44\n00:01:59.560 --> 00:02:00.500\nand RAM, and so on.\n\n45\n00:02:00.500 --> 00:02:03.820\nHere, I just have to say,\nhere's how many write operations and\n\n46\n00:02:03.820 --> 00:02:06.300\nhere's how many read operations\nI plan on performing.\n\n47\n00:02:06.300 --> 00:02:09.998\nAnd it's based on what are called units,\nso you've got these-\n\n48\n00:02:09.998 --> 00:02:10.511\n&gt;&gt; Hold on,\n\n49\n00:02:10.511 --> 00:02:14.830\nthe term unit obviously implies a lot\nof definitional parameters there.\n\n50\n00:02:14.830 --> 00:02:16.864\nCould you please break that down-\n&gt;&gt; [LAUGH]\n\n51\n00:02:16.864 --> 00:02:18.367\n&gt;&gt; For us into more digestible chunks?\n\n52\n00:02:18.367 --> 00:02:19.210\n[LAUGH]\n&gt;&gt; It is a really\n\n53\n00:02:19.210 --> 00:02:20.273\ngeneric term-\n&gt;&gt; [LAUGH]\n\n54\n00:02:20.273 --> 00:02:21.500\n&gt;&gt; Capacity unit.\n\n55\n00:02:21.500 --> 00:02:22.694\nIf I say I have 5 capacity units or\n\n56\n00:02:22.694 --> 00:02:24.844\n5,000 capacity units,\nwhat the heck does that mean?\n\n57\n00:02:24.844 --> 00:02:26.191\nIt doesn't really mean anything.\n\n58\n00:02:26.191 --> 00:02:28.520\nWell it's actually broken up by reads and\nwrites.\n\n59\n00:02:28.520 --> 00:02:32.040\nSo one capacity unit equals four\n\n60\n00:02:32.040 --> 00:02:37.210\nkilobytes of read activity or\none kilobyte of write activity.\n\n61\n00:02:37.210 --> 00:02:41.440\nSo I'm writing one kilobyte or less of\ndata, that counts as one capacity unit.\n\n62\n00:02:41.440 --> 00:02:46.060\nOr if I'm reading four kilobytes or less\nof data, that counts as one capacity unit.\n\n63\n00:02:46.060 --> 00:02:51.074\n&gt;&gt; So when I prevision a Redshift table,\nnot a Redshift table, a DynamoDB table.\n\n64\n00:02:51.074 --> 00:02:55.670\nI have to specify on that table exactly\nwhat capacity I'm looking for, right?\n\n65\n00:02:55.670 --> 00:02:59.669\nAnd if I exceed that capacity, I'm gonna\nget queued up, it's gonna slow me down.\n\n66\n00:02:59.669 --> 00:03:01.940\nI gotta wait for\nthat capacity to become available again.\n\n67\n00:03:01.940 --> 00:03:04.870\nSo we're picking capacity,\nwe don't pick infrastructure.\n\n68\n00:03:04.870 --> 00:03:07.490\nYou don't tell it how many\ncluster nodes you need or\n\n69\n00:03:07.490 --> 00:03:08.800\nwhether there even is a cluster.\n\n70\n00:03:08.800 --> 00:03:12.739\nYou don't pick what class of instance,\nit automatically provisions\n\n71\n00:03:12.739 --> 00:03:17.224\nall the infrastructure behind the scenes\nto match whatever capacity you pick.\n\n72\n00:03:17.224 --> 00:03:21.651\nAnd you can pick a small capacity like\nI just want five capacity units or\n\n73\n00:03:21.651 --> 00:03:23.013\nignore really high.\n\n74\n00:03:23.013 --> 00:03:27.199\nAnd you get thousands of capacity units\nbased on work load you expect you can only\n\n75\n00:03:27.199 --> 00:03:29.837\nchange it over time to\naccommodate what you need.\n\n76\n00:03:29.837 --> 00:03:33.030\nAnd I guess I should double back on\na statement, I mentioned tables.\n\n77\n00:03:33.030 --> 00:03:36.950\nThis is all done on a per table basis,\nwe're dealing with a NoSQL database.\n\n78\n00:03:36.950 --> 00:03:41.950\nSo you really just have one database,\nand then you create tables inside of it.\n\n79\n00:03:41.950 --> 00:03:44.780\nSo the tables are what we work with\nwhen we're dealing with DynamoDB.\n\n80\n00:03:44.780 --> 00:03:46.050\nWe don't even care about the database.\n\n81\n00:03:46.050 --> 00:03:48.740\nBecause again, all that\ninfrastructure's being handled for us.\n\n82\n00:03:48.740 --> 00:03:52.390\nWe don't care about transaction logs,\nwe don't care about disk storage.\n\n83\n00:03:52.390 --> 00:03:54.380\nAll that's invisible,\nwe just have a table.\n\n84\n00:03:54.380 --> 00:03:57.090\nWe put our data in the table,\nand then we work with it.\n\n85\n00:03:57.090 --> 00:03:59.270\nWe add data, we remove data,\nwe do whatever.\n\n86\n00:03:59.270 --> 00:04:01.250\nAnd we make sure we have\nthe capacity just to handle it.\n\n87\n00:04:01.250 --> 00:04:05.120\nThat's really the coolest part\nin my opinion about DynamoDB,\n\n88\n00:04:05.120 --> 00:04:09.080\nis it's really the first of the database\nservices we talk about that\n\n89\n00:04:09.080 --> 00:04:11.520\ntruly makes all\nthe infrastructure invisible.\n\n90\n00:04:11.520 --> 00:04:14.100\nYou just have a table, and\nif you're a database administrator,\n\n91\n00:04:14.100 --> 00:04:15.780\nyou know how to work with tables.\n\n92\n00:04:15.780 --> 00:04:18.380\nYou might not know how to work\nwith ratorace, you don't see that.\n\n93\n00:04:18.380 --> 00:04:21.865\nYou might not know about how many CPUs or\nhow much RAM you need.\n\n94\n00:04:21.865 --> 00:04:24.748\nYou don't need to know that, you just have\nto know how much data is coming in and\n\n95\n00:04:24.748 --> 00:04:25.580\nout of your system.\n\n96\n00:04:25.580 --> 00:04:27.740\nThat's the advantage of DynamoDB.\n\n97\n00:04:27.740 --> 00:04:33.118\n&gt;&gt; All right, well Don, I've never\nseen you keep using this term, NoSQL.\n\n98\n00:04:33.118 --> 00:04:35.070\nI don't have a big database background.\n\n99\n00:04:35.070 --> 00:04:38.128\nI'm sure there's a few people out there\nthat probably aren't aware of what\n\n100\n00:04:38.128 --> 00:04:40.726\nNoSequel, or NoSQL should I say,\nthat's the more correctly.\n\n101\n00:04:40.726 --> 00:04:41.802\n&gt;&gt; [LAUGH]\n&gt;&gt; As you can tell,\n\n102\n00:04:41.802 --> 00:04:43.034\nnot a database guy, right?\n\n103\n00:04:43.034 --> 00:04:45.463\nI like to say things easily,\nand SQL is easy.\n\n104\n00:04:45.463 --> 00:04:49.468\n[LAUGH] But can you just give\nme some back story on that?\n\n105\n00:04:49.468 --> 00:04:51.123\nWhat is NoSQL?\n\n106\n00:04:51.123 --> 00:04:55.207\n&gt;&gt; The first time I heard of NoSQL,\nI was at a talk.\n\n107\n00:04:55.207 --> 00:04:56.466\nI wasn't giving it, somebody else was.\n\n108\n00:04:56.466 --> 00:04:59.100\nAnd they were talking about\nthe advantages of NoSQL.\n\n109\n00:04:59.100 --> 00:05:03.169\nAnd when I heard that I was like,\nwait SQL is the structured query language.\n\n110\n00:05:03.169 --> 00:05:05.250\nWhat do I care about a language?\n\n111\n00:05:05.250 --> 00:05:07.190\nYou can optimize stuff\nlike crazy on the backend.\n\n112\n00:05:07.190 --> 00:05:09.520\nIf you're gonna give me no\nstructured query language,\n\n113\n00:05:09.520 --> 00:05:12.510\ndoes that mean I'm gonna have some\nreally weird form query language?\n\n114\n00:05:12.510 --> 00:05:13.431\nThat's not gonna help me.\n\n115\n00:05:13.431 --> 00:05:17.733\nWell the no doesn't mean no,\nno is actually part of an acronym also,\n\n116\n00:05:17.733 --> 00:05:21.620\nit's not only SQL,\nnot only structured query language.\n\n117\n00:05:21.620 --> 00:05:24.770\nThat means you can do more\nthan just regular old SQL,\n\n118\n00:05:25.840 --> 00:05:30.530\nNoSQL databases break\na lot of database rules.\n\n119\n00:05:30.530 --> 00:05:35.570\nIn a normal relational database, you\nhave tables and each table has a column.\n\n120\n00:05:35.570 --> 00:05:38.100\nAnd each column has a data\ntype assigned to it, and\n\n121\n00:05:38.100 --> 00:05:39.770\nthat data type is enforced by a schema.\n\n122\n00:05:39.770 --> 00:05:43.620\nSo you have a well defined\nschema in a relational database.\n\n123\n00:05:43.620 --> 00:05:47.653\nAnd when you add rows or add record sets\nto a table in a relational database,\n\n124\n00:05:47.653 --> 00:05:49.968\nyou have got to populate all those values.\n\n125\n00:05:49.968 --> 00:05:51.665\nAnd if there is a column\nthat you don't a value for,\n\n126\n00:05:51.665 --> 00:05:53.260\nyou have to stick a null value in there,\nright?\n\n127\n00:05:53.260 --> 00:05:57.090\nSo it has got to have something\nto identify that value exists.\n\n128\n00:05:57.090 --> 00:06:01.362\nIn NoSQL,\nyou don't have a strictly imposed schema.\n\n129\n00:06:01.362 --> 00:06:04.070\nIn fact, most people refer to\nit not having a schema at all.\n\n130\n00:06:04.070 --> 00:06:06.400\nThe data types are not\nstrictly enforced either,\n\n131\n00:06:06.400 --> 00:06:08.160\nyou can put whatever\nthe heck you want in there.\n\n132\n00:06:08.160 --> 00:06:14.162\nThe idea behind NoSQL is that your\napplication will enforce data consistency.\n\n133\n00:06:14.162 --> 00:06:18.404\nAnd that you just are able to rocket\nthat data into the database as fast as\n\n134\n00:06:18.404 --> 00:06:19.210\npossible.\n\n135\n00:06:19.210 --> 00:06:24.050\nBecause the database is not responsible\nfor doing all that extra sanitization or\n\n136\n00:06:24.050 --> 00:06:25.190\nvalidation or whatever.\n\n137\n00:06:25.190 --> 00:06:27.496\nYour application does it and\nit works out great or\n\n138\n00:06:27.496 --> 00:06:30.489\nmodern web applications you can\nscale really, really large.\n\n139\n00:06:30.489 --> 00:06:33.030\nI got a little diagram that kind\nof shows what I'm talking about.\n\n140\n00:06:33.030 --> 00:06:37.249\nHere, I've got a table and instead of\nrepresenting the table as a series\n\n141\n00:06:37.249 --> 00:06:40.517\nof columns like you normally see,\na grid with columns.\n\n142\n00:06:40.517 --> 00:06:44.738\nIt's just records, here's record one,\nrecord two, record three and some of\n\n143\n00:06:44.738 --> 00:06:49.070\nthe records might have two attributes,\nsome might only have one attribute.\n\n144\n00:06:49.070 --> 00:06:50.547\nWell what about the other one?\n\n145\n00:06:50.547 --> 00:06:52.890\nI didn't put it there, right?\n\n146\n00:06:52.890 --> 00:06:53.740\nI didn't put it there, and\n\n147\n00:06:53.740 --> 00:06:57.550\nthe database is fine with that, as long as\nmy application is fine with that, right?\n\n148\n00:06:57.550 --> 00:07:00.899\nNow it's up to me to write my\napplication to be okay with that.\n\n149\n00:07:00.899 --> 00:07:03.642\nBut the database doesn't care, it's just\nletting me put whatever I want there.\n\n150\n00:07:03.642 --> 00:07:08.358\nAnd I've got a primary key value, and\nthat's what I can use to find record sets.\n\n151\n00:07:08.358 --> 00:07:10.270\nAnd then I can pull the data back, and\n\n152\n00:07:10.270 --> 00:07:14.227\nbecause the data is all stored together\nnot spread across multiple tables.\n\n153\n00:07:14.227 --> 00:07:18.027\nIt's all stored in one place,\nI can get that data very, very quickly and\n\n154\n00:07:18.027 --> 00:07:22.300\nreturn it back to me and return it back\nto my application where I can use it.\n\n155\n00:07:22.300 --> 00:07:27.433\nSo NoSQL databases are great in\nhandling huge amounts of data and\n\n156\n00:07:27.433 --> 00:07:30.199\nhandling it very, very quickly.\n\n157\n00:07:30.199 --> 00:07:33.251\nSo in this day and age of big data,\nI'm gonna use the buzzword,\n\n158\n00:07:33.251 --> 00:07:34.351\nbreaking it out here.\n\n159\n00:07:34.351 --> 00:07:40.170\nIn this day and age of buzz words like\nbig data, data cubes, data warehouses.\n\n160\n00:07:40.170 --> 00:07:42.008\nNoSQL really is the king.\n\n161\n00:07:42.008 --> 00:07:45.840\nI mean it is able to handle huge\namounts of data very, very quickly.\n\n162\n00:07:45.840 --> 00:07:48.810\nBut it requires more work\non the application side\n\n163\n00:07:48.810 --> 00:07:51.250\nto make sure the data is consistent and\nsafe.\n\n164\n00:07:51.250 --> 00:07:53.870\nBecause otherwise we could store data\nin the database that would freak our\n\n165\n00:07:53.870 --> 00:07:55.362\napplication out and now you have a crash.\n\n166\n00:07:55.362 --> 00:07:56.603\nAnd you don't want that on a web app,\n\n167\n00:07:56.603 --> 00:07:58.857\nyou definitely don't want it on\na line of business applications.\n\n168\n00:07:58.857 --> 00:08:01.869\nSo those are all things that we have to\nthink about, but that's what NoSQL is.\n\n169\n00:08:01.869 --> 00:08:05.933\nAnd there's a number of different SQL\ndatabases that are out there that you can\n\n170\n00:08:05.933 --> 00:08:08.270\ndeploy even on-premises if you want.\n\n171\n00:08:08.270 --> 00:08:10.630\nBut they're all pretty complex, right.\n\n172\n00:08:10.630 --> 00:08:12.020\nThey're hard.\n\n173\n00:08:12.020 --> 00:08:14.850\nAmazon, they have a lot of\nexperience with this because of\n\n174\n00:08:14.850 --> 00:08:17.860\ntheir own shopping site where they\nmake use of SQL databases for\n\n175\n00:08:17.860 --> 00:08:19.870\ntheir products and\nthe information that you get returned.\n\n176\n00:08:19.870 --> 00:08:21.870\nWhen you run a search\non Amazon's webpage for\n\n177\n00:08:21.870 --> 00:08:25.980\na DVD,\nIt returns results really really fast.\n\n178\n00:08:25.980 --> 00:08:29.400\nAnd when you click you're\ngetting product number, price,\n\n179\n00:08:29.400 --> 00:08:33.380\ncountry where it ships from, what people\nit's available from, you get all the great\n\n180\n00:08:33.380 --> 00:08:38.810\ninformation almost instantaneously,\nthat's a massive data base that hundreds\n\n181\n00:08:38.810 --> 00:08:42.940\nof thousands of people probably hitting at\nthe same time as you and it runs great.\n\n182\n00:08:42.940 --> 00:08:45.220\nAnd it's built on technologies like this.\n\n183\n00:08:45.220 --> 00:08:48.450\nAnd so with Dynamo DB,\nwe get that kind of technology.\n\n184\n00:08:48.450 --> 00:08:53.280\nWe get a NoSQL database where we don't\nhave to know anything about the back end,\n\n185\n00:08:53.280 --> 00:08:55.100\nany of the redundancy or any of that.\n\n186\n00:08:55.100 --> 00:08:57.840\nWe just tell it how much data\nwe're sending in and taking out.\n\n187\n00:08:57.840 --> 00:08:58.770\nEverything else, automatic.\n\n188\n00:08:58.770 --> 00:08:59.850\nAnd now we throw our data in.\n\n189\n00:09:01.020 --> 00:09:04.620\nAll right, so that's kind of\nthe basics of what NoSQL is.\n\n190\n00:09:04.620 --> 00:09:07.120\nA couple of key components\nI wanna add to that.\n\n191\n00:09:07.120 --> 00:09:10.910\nYou've got a primary key that you define,\nand the primary key is defined by you.\n\n192\n00:09:10.910 --> 00:09:11.490\nYou have to have that.\n\n193\n00:09:11.490 --> 00:09:13.280\nThat's the one thing you've got to have.\n\n194\n00:09:13.280 --> 00:09:16.110\nAnd it's gonna identify your record set.\n\n195\n00:09:16.110 --> 00:09:19.160\nNow, that primary key can\nbe any number of things.\n\n196\n00:09:19.160 --> 00:09:21.260\nIt's normally gonna be\na string of some sort.\n\n197\n00:09:21.260 --> 00:09:25.470\nAnd it might be a description, it might be\na product number or a date or whatever but\n\n198\n00:09:25.470 --> 00:09:27.660\nit's typically gonna be\nstored as a string and\n\n199\n00:09:27.660 --> 00:09:31.960\nthis is what we're normally gonna\ndo our lookups based on and\n\n200\n00:09:31.960 --> 00:09:36.470\nif you just have that primary key, well\nyou can pull information based on that.\n\n201\n00:09:36.470 --> 00:09:41.910\nNow in addition to the primary key, we\nalso need what's called a partition key.\n\n202\n00:09:41.910 --> 00:09:44.380\nWhen this data gets\nstored on the back-end,\n\n203\n00:09:44.380 --> 00:09:46.460\nit's going to get spread\nacross partitions.\n\n204\n00:09:46.460 --> 00:09:48.970\nAs your data grows it becomes more\nthan what one server can handle.\n\n205\n00:09:48.970 --> 00:09:51.680\nSo it gets partitioned out,\nit gets broken up.\n\n206\n00:09:51.680 --> 00:09:53.510\nSo I've got like a diagram\nhere that kind of shows it.\n\n207\n00:09:53.510 --> 00:09:58.010\nI've got one table and the data's\nbroken up across two partitions.\n\n208\n00:09:58.010 --> 00:10:02.350\nNow, the partition key is going\nto identify how we break that up.\n\n209\n00:10:02.350 --> 00:10:03.920\nAnd the partition key\nmight be the primary key.\n\n210\n00:10:03.920 --> 00:10:05.070\nA lot of times it is.\n\n211\n00:10:05.070 --> 00:10:08.540\nOr it can be some other attribute\nthat I've decided to attach, but\n\n212\n00:10:08.540 --> 00:10:11.460\nthen I've gotta be careful to make sure\nI've got that attribute populated.\n\n213\n00:10:11.460 --> 00:10:14.260\nAgain, I've gotta maintain my\nown consistency of that data.\n\n214\n00:10:14.260 --> 00:10:15.630\nAnd we can spread that data out.\n\n215\n00:10:16.650 --> 00:10:20.370\nIf you set up a NoSQL\ntable inside of DynamoDB,\n\n216\n00:10:20.370 --> 00:10:22.440\nyou'll be asked about your partition key.\n\n217\n00:10:22.440 --> 00:10:24.890\nAnd so, you'll pick what that's\ngoing to be and get that set up.\n\n218\n00:10:24.890 --> 00:10:28.300\nIt just needs to be one\nattribute that contains the key.\n\n219\n00:10:28.300 --> 00:10:30.070\nAnd that's what you're gonna sort on.\n\n220\n00:10:30.070 --> 00:10:32.040\nSome people call this a hash key.\n\n221\n00:10:32.040 --> 00:10:34.840\nBecause it runs a hashing\nalgorithm on it to then, kind of,\n\n222\n00:10:34.840 --> 00:10:37.160\nbasically break this stuff up and\nbe able to do it very quickly and\n\n223\n00:10:37.160 --> 00:10:38.790\nlocate the information and pull it back.\n\n224\n00:10:38.790 --> 00:10:41.290\nSo, that's kind of a key thing to have.\n\n225\n00:10:41.290 --> 00:10:45.370\nIn addition to a partition key,\nyou might also have a sort key.\n\n226\n00:10:45.370 --> 00:10:46.780\nA sort key says, all right,\n\n227\n00:10:46.780 --> 00:10:50.320\nI've broken up my data across these\npartitions based on one key but\n\n228\n00:10:50.320 --> 00:10:53.600\nwhenever I query it, I'm gonna be turning\naround and sorting at a certain order.\n\n229\n00:10:53.600 --> 00:10:55.800\nSo we can do some of the pre\nwork ahead of time and\n\n230\n00:10:55.800 --> 00:10:58.630\nstore this in a way that makes\nit support my sort order.\n\n231\n00:10:58.630 --> 00:10:59.890\nThat would be really helpful.\n\n232\n00:10:59.890 --> 00:11:01.920\nSo defining a sort key will do that.\n\n233\n00:11:01.920 --> 00:11:03.010\nIt's optional.\n\n234\n00:11:03.010 --> 00:11:07.320\nSo you can have just a partition key,\nor you can have a partition key and\n\n235\n00:11:07.320 --> 00:11:07.920\na sort key.\n\n236\n00:11:07.920 --> 00:11:11.280\nAnd that sort key's job is really\njust to support your queries.\n\n237\n00:11:11.280 --> 00:11:14.560\nTo make your queries run faster\nbecause they data's already,\n\n238\n00:11:14.560 --> 00:11:18.460\nthe pre-work is already done to sort\nthat data and provide it back to you.\n\n239\n00:11:18.460 --> 00:11:23.680\n&gt;&gt; So Don, what if I do have\nmultiple frequently run queries.\n\n240\n00:11:23.680 --> 00:11:26.220\nI'm always running these two queries.\n\n241\n00:11:26.220 --> 00:11:28.550\nI need optimization on that.\n\n242\n00:11:28.550 --> 00:11:32.730\nIs that something I can do with DynamoDB?\n\n243\n00:11:32.730 --> 00:11:34.080\n&gt;&gt; Well no, you're out of luck.\n\n244\n00:11:34.080 --> 00:11:35.750\n[LAUGH]\n&gt;&gt; Thanks for watching everyone.\n\n245\n00:11:35.750 --> 00:11:39.755\n[LAUGH]\n&gt;&gt; Well actually, technically I look.\n\n246\n00:11:39.755 --> 00:11:45.075\nBut inside of DynamoDB we can actually\ndefine a secondary set of keys.\n\n247\n00:11:45.075 --> 00:11:46.005\nRight?\nSo we can come in and\n\n248\n00:11:46.005 --> 00:11:48.230\ndefine which is called a secondary index.\n\n249\n00:11:48.230 --> 00:11:54.520\n&gt;&gt; And with a secondary index you have\nanother set of keys that you can define.\n\n250\n00:11:54.520 --> 00:11:57.580\nAnd that secondary index allows you\nto store at a different sort order or\n\n251\n00:11:57.580 --> 00:11:59.290\nwhatever, that's a pretty\nhandy thing to have.\n\n252\n00:11:59.290 --> 00:12:01.760\nSo when you create this, let me jump\ninto the UI here and show you guys.\n\n253\n00:12:01.760 --> 00:12:05.350\nI'm going to go under databases and\nDynamoDB and\n\n254\n00:12:05.350 --> 00:12:08.200\nI'm going to whip up a database so\nyou guys can see how easy this is.\n\n255\n00:12:08.200 --> 00:12:10.530\nNotice, it's not asking\nme to create a cluster.\n\n256\n00:12:10.530 --> 00:12:13.700\nIt's not asking me to create a database\nlike all the other products did.\n\n257\n00:12:13.700 --> 00:12:15.020\nIt's asking me to create a table.\n\n258\n00:12:15.020 --> 00:12:16.500\nBut the database already exists.\n\n259\n00:12:16.500 --> 00:12:18.590\nWell it does, and\nis completely managed by Amazon.\n\n260\n00:12:18.590 --> 00:12:19.970\nI don't see it, right.\n\n261\n00:12:19.970 --> 00:12:21.490\nSo I'm just creating a table.\n\n262\n00:12:21.490 --> 00:12:22.580\nI'm ready to go.\n\n263\n00:12:22.580 --> 00:12:24.150\nAnd if I need 50 tables\nI'll just create them.\n\n264\n00:12:24.150 --> 00:12:25.970\nI don't even know what database\nthey're stored in on the back in.\n\n265\n00:12:25.970 --> 00:12:27.260\nI don't see transaction logs.\n\n266\n00:12:27.260 --> 00:12:29.310\nI don't see multi az replication.\n\n267\n00:12:29.310 --> 00:12:30.460\nI don't see all that.\n\n268\n00:12:30.460 --> 00:12:32.300\nThat's how easy this is.\n\n269\n00:12:32.300 --> 00:12:33.040\nI give it a table name.\n\n270\n00:12:33.040 --> 00:12:35.210\nI'm going to call this the Don's test.\n\n271\n00:12:35.210 --> 00:12:35.880\nRight.\n\n272\n00:12:35.880 --> 00:12:37.550\nAnd then, I define my partition key.\n\n273\n00:12:37.550 --> 00:12:41.540\nPartition key, I\"m going to need that to\nbe able to define how I'm going to spread\n\n274\n00:12:41.540 --> 00:12:42.070\nmy data out.\n\n275\n00:12:42.070 --> 00:12:46.150\nMaybe I have some kind of item code or\n\n276\n00:12:46.150 --> 00:12:49.170\nsomething that I'm going\nto use as my partition key.\n\n277\n00:12:49.170 --> 00:12:52.630\nI can choose to add\na sort key if I want And\n\n278\n00:12:52.630 --> 00:12:55.260\nthen I can specify that\nsort key right here, right?\n\n279\n00:12:55.260 --> 00:12:58.640\nI may not need that,\nif my queries are just random in nature,\n\n280\n00:12:58.640 --> 00:13:00.290\na sort key's not gonna benefit me.\n\n281\n00:13:00.290 --> 00:13:03.400\nAnd if my application's gonna do the\nsorting anyway, like if I'm rendering this\n\n282\n00:13:03.400 --> 00:13:06.630\nin a way where the user can change the\nsort based on the output on the screen,\n\n283\n00:13:06.630 --> 00:13:08.690\ndoesn't really matter how the data's\nsorted in the first place, so\n\n284\n00:13:08.690 --> 00:13:10.120\nI might not worry about it, right?\n\n285\n00:13:10.120 --> 00:13:11.610\nBut if I do wanna have that,\nI can come in, and\n\n286\n00:13:11.610 --> 00:13:13.020\nI can punch in,\nyou can see the different values.\n\n287\n00:13:13.020 --> 00:13:17.740\nWe can do a binary or a number\n&gt;&gt; But a string is typically what we do.\n\n288\n00:13:17.740 --> 00:13:20.220\nOn the primary key,\nwe'll want a string there,\n\n289\n00:13:20.220 --> 00:13:21.900\nif we want to create secondary indexes.\n\n290\n00:13:21.900 --> 00:13:24.030\nIt needs that to be a string.\n\n291\n00:13:24.030 --> 00:13:28.180\nSo then I can specify, and\nI'm not going to do a sort key on mine.\n\n292\n00:13:28.180 --> 00:13:30.240\nAnd then down here,\nI've got my table settings.\n\n293\n00:13:30.240 --> 00:13:33.600\nAnd notice the default\nis No secondary indexes.\n\n294\n00:13:34.630 --> 00:13:37.150\nBut I can choose to add them.\n\n295\n00:13:37.150 --> 00:13:40.830\nAlso provision capacity is\nset to 5 reads and 5 writes,\n\n296\n00:13:40.830 --> 00:13:42.980\nthat's my default capacity\nunits which is fine for\n\n297\n00:13:42.980 --> 00:13:47.270\ntesting but not fine for production use,\nso we'll need to adjust that.\n\n298\n00:13:47.270 --> 00:13:51.810\nAnd then it's gonna automatically set up\nalarms for me inside of CloudWatch where\n\n299\n00:13:51.810 --> 00:13:55.910\nit's gonna look for a upper threshold,\nand if it starts hitting that threshold,\n\n300\n00:13:55.910 --> 00:13:59.900\nit'll call the simple notification service\nwith the DynamoDB topic, so that I know\n\n301\n00:13:59.900 --> 00:14:03.520\nit's time to bump up my capacity, or find\nout why I'm using more than I anticipated.\n\n302\n00:14:03.520 --> 00:14:06.780\n&gt;&gt; So Don, if I'm unsure whether or not\nI wanna go with these default settings,\n\n303\n00:14:06.780 --> 00:14:10.070\nmaybe I want to come in here and\ndo some secondary indexes.\n\n304\n00:14:10.070 --> 00:14:12.690\nBut I'm going to make a choice one way or\nanother.\n\n305\n00:14:12.690 --> 00:14:14.250\nTypically, that choice\nis going to be wrong and\n\n306\n00:14:14.250 --> 00:14:16.230\nI\"m going to want to change it later.\n\n307\n00:14:16.230 --> 00:14:17.060\nCan I do that?\n\n308\n00:14:17.060 --> 00:14:18.680\nIs that going to be a problem?\n\n309\n00:14:18.680 --> 00:14:19.820\n&gt;&gt; You can change it later.\n\n310\n00:14:19.820 --> 00:14:23.900\nBecause of the size of the data and\nthe amount of the data,\n\n311\n00:14:23.900 --> 00:14:28.360\nsometimes it can be challenging\nwhen you change it later.\n\n312\n00:14:28.360 --> 00:14:30.590\nWe'll talk a little bit\nabout consistency later and\n\n313\n00:14:30.590 --> 00:14:32.240\nkeeping the data safe when we read it.\n\n314\n00:14:32.240 --> 00:14:37.060\nBut when we start making modifications of\na significant nature like creating another\n\n315\n00:14:37.060 --> 00:14:39.160\nindex, that can cause problems.\n\n316\n00:14:39.160 --> 00:14:42.030\nAnd so oftentimes,\nit's easier to just create a new table.\n\n317\n00:14:42.030 --> 00:14:45.460\nCreate a new table, reload the data\nwith the secondary index so\n\n318\n00:14:45.460 --> 00:14:46.860\nit's all created then.\n\n319\n00:14:46.860 --> 00:14:49.080\nAnd then just point your application\nto the new table, right?\n\n320\n00:14:49.080 --> 00:14:51.590\nSo it's easy enough to do that,\nmove it that way.\n\n321\n00:14:51.590 --> 00:14:53.030\nThat's typically the better\nway to go about that.\n\n322\n00:14:54.180 --> 00:14:56.930\nAll right now when I go and add this I\nwent ahead and turned off the default\n\n323\n00:14:56.930 --> 00:15:00.590\nsetting for a minute and here I've got\nthe option to add a secondary index.\n\n324\n00:15:00.590 --> 00:15:04.670\nAnd you'll see it's got a partition key\nand a sort key just like we saw before.\n\n325\n00:15:04.670 --> 00:15:08.049\nSo we can specify that information\nright here and get that created.\n\n326\n00:15:09.090 --> 00:15:14.540\nWhen we create it, there's this option\nto create it as a local secondary index.\n\n327\n00:15:14.540 --> 00:15:19.610\nIf the primary key is a string and\nwe're actually using the same primary\n\n328\n00:15:19.610 --> 00:15:24.420\nkey as what was used in the primary index,\nthen we can actually store this alongside\n\n329\n00:15:24.420 --> 00:15:26.120\nit and\nwe just have that primary index one time.\n\n330\n00:15:26.120 --> 00:15:27.770\nSo it optimizes it for performance.\n\n331\n00:15:27.770 --> 00:15:31.210\nIf your primary key is different then\nyou're not gonna be able to benefit that\n\n332\n00:15:31.210 --> 00:15:35.520\nand then you'll be able to just have to\nstore as a second index which is kind\n\n333\n00:15:35.520 --> 00:15:39.230\nof what you're doing anyway and\ndefine what that sort order and\n\n334\n00:15:39.230 --> 00:15:40.030\nindex name are gonna be.\n\n335\n00:15:40.030 --> 00:15:43.250\nSo easy enough to end those in,\nthe capacity units are right here.\n\n336\n00:15:43.250 --> 00:15:45.280\nNotice that my current capacity.\n\n337\n00:15:45.280 --> 00:15:49.200\nI've got five read capacity and five\nwrite, and I'm at a whopping $3 a month.\n\n338\n00:15:49.200 --> 00:15:51.330\nI can afford that, right?\n\n339\n00:15:51.330 --> 00:15:52.890\nBut it's only five.\n\n340\n00:15:52.890 --> 00:15:56.690\nThat means, remember that a read capacity\nunit is about four kilobytes of data, so\n\n341\n00:15:56.690 --> 00:15:58.826\nwe're talking about 20 kilobytes of data.\n\n342\n00:15:58.826 --> 00:16:04.385\nAnd on the right side, we're talking\nabout one kilobyte per capacity unit,\n\n343\n00:16:04.385 --> 00:16:06.706\nso- Pretty limited there too.\n\n344\n00:16:06.706 --> 00:16:08.643\nSo, I'm probably don't wanna bump that up.\n\n345\n00:16:08.643 --> 00:16:12.666\nYou got a capacity calculator you can fire\nup and it's got the average item size,\n\n346\n00:16:12.666 --> 00:16:15.030\nthe reads per second and\nthe writes per second,\n\n347\n00:16:15.030 --> 00:16:17.185\nso you can kind of figure\nout what you need.\n\n348\n00:16:17.185 --> 00:16:22.462\nRight now, we're at five reads and\nfive writes, which is how they're getting\n\n349\n00:16:22.462 --> 00:16:27.450\nto that number that we're seeing\ndown there, that 271 or $3 a month.\n\n350\n00:16:27.450 --> 00:16:29.098\nAnd I keep mentioning the capacity units,\n\n351\n00:16:29.098 --> 00:16:31.170\nI haven't mentioned that it's per second,\nright.\n\n352\n00:16:31.170 --> 00:16:34.130\n4 kilobytes if it was per month\n[LAUGH] that's gonna be a problem.\n\n353\n00:16:34.130 --> 00:16:34.898\n&gt;&gt; You'd be very limited.\n\n354\n00:16:34.898 --> 00:16:36.900\n&gt;&gt; Unless it's 1974.\n\n355\n00:16:36.900 --> 00:16:39.240\nBut even per hour, it's not enough.\n\n356\n00:16:39.240 --> 00:16:40.770\nBut it's per second.\n\n357\n00:16:40.770 --> 00:16:42.232\nI can bump that up significantly, though.\n\n358\n00:16:42.232 --> 00:16:47.220\nIf I know that I'm gonna be\nreading 400 kilobytes per second,\n\n359\n00:16:47.220 --> 00:16:53.750\nthen I know I'm gonna need 40 read\ncapacity units to be able to handle that.\n\n360\n00:16:53.750 --> 00:16:54.522\nNo, that's bad math, isn't it?\n\n361\n00:16:54.522 --> 00:16:56.007\nI'm gonna need 100.\n\n362\n00:16:56.007 --> 00:16:58.811\nAnd I can get that set up and\nwe can bump higher from there,\n\n363\n00:16:58.811 --> 00:17:00.860\nbased on whatever it is that we need.\n\n364\n00:17:00.860 --> 00:17:04.180\nJust know that as you do that,\nthe price is going up and up and\n\n365\n00:17:04.180 --> 00:17:05.520\nup based on that capacity.\n\n366\n00:17:05.520 --> 00:17:09.130\nI don't see the types of EC2\ninstances behind the scenes.\n\n367\n00:17:09.130 --> 00:17:12.630\nThey're there, but I don't see them,\nI don't see the replicas and all that.\n\n368\n00:17:12.630 --> 00:17:14.429\nI just see this capacity right here.\n\n369\n00:17:16.042 --> 00:17:18.020\n&gt;&gt; All right Don,\nwhen we talk about Redshift,\n\n370\n00:17:18.020 --> 00:17:20.090\nthis is something that\nI wanted to bring up.\n\n371\n00:17:20.090 --> 00:17:23.520\nRedshift was focused on analysis.\n\n372\n00:17:23.520 --> 00:17:26.202\nObviously Dynamo DB is\na different product in Redshift.\n\n373\n00:17:26.202 --> 00:17:29.380\nAnd the way it works, we've been talking\nabout that, but what is it's focus?\n\n374\n00:17:29.380 --> 00:17:31.650\nWhat is its primary area of expertise?\n\n375\n00:17:31.650 --> 00:17:34.680\n&gt;&gt; So, with Dynamo DB,\nit's actually everything.\n\n376\n00:17:34.680 --> 00:17:38.822\nIt does really good with OLTP and OLAP.\n\n377\n00:17:38.822 --> 00:17:41.120\nAnd the main reason is because you pay for\nit, right?\n\n378\n00:17:41.120 --> 00:17:43.750\nYou specify what capacity you need.\n\n379\n00:17:43.750 --> 00:17:47.495\nYou define it right there and you can\nscale as large or as small as you want.\n\n380\n00:17:47.495 --> 00:17:49.336\nYou just put in the appropriate number so,\n\n381\n00:17:49.336 --> 00:17:51.392\nyou'd got that functionality\nright in there.\n\n382\n00:17:51.392 --> 00:17:55.323\nNow, you do have to be careful\nabout a few things, it is optimize,\n\n383\n00:17:55.323 --> 00:17:57.620\nit reads as fast as possible?\n\n384\n00:17:57.620 --> 00:18:01.735\nAnd one challenge you have with reads is\nthat when you write data into a table,\n\n385\n00:18:01.735 --> 00:18:05.598\nit's partitioning it and it's storing\nit on different nodes and so on,\n\n386\n00:18:05.598 --> 00:18:07.140\nit takes a moment to do that.\n\n387\n00:18:07.140 --> 00:18:10.340\nAnd with multi AZ replication,\nit's got to replicate it.\n\n388\n00:18:10.340 --> 00:18:15.191\nThose replicas are not\ninstantaneously consistent.\n\n389\n00:18:15.191 --> 00:18:17.045\nWe don't have synchronous rights.\n\n390\n00:18:17.045 --> 00:18:18.520\nWe have asynchronous rights.\n\n391\n00:18:18.520 --> 00:18:22.730\nData gets written to the main\npartition of that table first, and\n\n392\n00:18:22.730 --> 00:18:26.440\nthen it gets copied to the replicas,\nthe ones that are providing the capacity.\n\n393\n00:18:26.440 --> 00:18:30.690\nSo if I have a high capacity number\nspecified, I've got a lot of replicas.\n\n394\n00:18:30.690 --> 00:18:33.730\nAnd I need to make sure that\nI have my data that's them.\n\n395\n00:18:33.730 --> 00:18:37.510\nWhen I brought up this pricing calculator,\nthe capacity calculator,\n\n396\n00:18:37.510 --> 00:18:42.051\nnotice when I pick my reads per second,\nit shows eventually consistent, all right.\n\n397\n00:18:42.051 --> 00:18:44.278\nBy default when people do reads,\n\n398\n00:18:44.278 --> 00:18:49.057\nthey'll do a read from whatever\nreplica they happen to be attached to.\n\n399\n00:18:49.057 --> 00:18:51.844\nAnd a write may have already\noccurred on some replicas,\n\n400\n00:18:51.844 --> 00:18:54.300\nit just not made it over to this one yet.\n\n401\n00:18:54.300 --> 00:18:59.200\nAnd so, what I'm getting is data\nthat will eventually be consistent.\n\n402\n00:18:59.200 --> 00:19:01.582\nIt may have already been updated and\nI just don't see it yet.\n\n403\n00:19:01.582 --> 00:19:03.845\nAnd for a lot of us, it's not a big deal.\n\n404\n00:19:03.845 --> 00:19:06.870\nIf I'm talking about football scores,\nright?\n\n405\n00:19:06.870 --> 00:19:10.560\nSo, I'm pulling up the results\nof the latest game and\n\n406\n00:19:10.560 --> 00:19:16.210\nthe score is 2 to 1 at ten minutes\ninto the second half, right?\n\n407\n00:19:16.210 --> 00:19:19.600\nWell, what if time is just a little off?\n\n408\n00:19:19.600 --> 00:19:22.670\nOr is two to one and they just scored but\nit takes an extra second for\n\n409\n00:19:22.670 --> 00:19:24.080\nme to see that score happen?\n\n410\n00:19:24.080 --> 00:19:25.180\nThat's not a big deal, right?\n\n411\n00:19:25.180 --> 00:19:26.410\nI'm not worry about that.\n\n412\n00:19:26.410 --> 00:19:28.290\nBut what if it's a bank account?\n\n413\n00:19:28.290 --> 00:19:33.030\nAnd I just withdrew $10,000 and\nthen I go and do the withdrawal again.\n\n414\n00:19:33.030 --> 00:19:35.990\nIf the second replica doesn't show\nthat withdrawal already happen\n\n415\n00:19:35.990 --> 00:19:36.590\nthat's a problem.\n\n416\n00:19:37.780 --> 00:19:40.760\nI may need to do consistent reads.\n\n417\n00:19:40.760 --> 00:19:45.150\nIf I drop this eventually down, I can\nchoose strongly consistent and that says\n\n418\n00:19:45.150 --> 00:19:50.740\nI'm only gonna do the read if I know\nI'm getting actually, consistent data.\n\n419\n00:19:50.740 --> 00:19:56.250\nThese are slower, I'm giving up some of\nmy performance to ensure consistency.\n\n420\n00:19:56.250 --> 00:19:58.457\nNow, normally in a regular\nrelational database,\n\n421\n00:19:58.457 --> 00:20:00.369\nI would have to define\nthat in the database.\n\n422\n00:20:00.369 --> 00:20:04.247\nSo, either all of my reads were fully\nconsistent, strongly consistent,\n\n423\n00:20:04.247 --> 00:20:07.410\nor all of my reads were\neventually consistent.\n\n424\n00:20:07.410 --> 00:20:10.930\nBut with no SQL,\nwe can specify it at query time.\n\n425\n00:20:10.930 --> 00:20:15.980\nWhen I do the query, I can say, I want\nthis query to be strongly consistent.\n\n426\n00:20:15.980 --> 00:20:17.600\nAnd I can send another query,\nand I say this one's fine,\n\n427\n00:20:17.600 --> 00:20:19.150\nthis one can be eventually consistent.\n\n428\n00:20:19.150 --> 00:20:23.590\nSo, if people are just querying what\ntheir payoff amount is on a loan, fine.\n\n429\n00:20:23.590 --> 00:20:25.970\nThat can be eventually consistent,\nit's okay.\n\n430\n00:20:25.970 --> 00:20:30.470\nBut if they're actually making a payment,\nand they need to verify the payment post,\n\n431\n00:20:30.470 --> 00:20:32.230\nthen you have to be strongly consistent,\nright?\n\n432\n00:20:32.230 --> 00:20:33.630\nSo, I can pick and choose.\n\n433\n00:20:33.630 --> 00:20:35.590\nNow, watch the pricing on this,\n\n434\n00:20:35.590 --> 00:20:39.601\nif I'm doing all of my reads as eventually\nconsistent, I'm at $96 a month.\n\n435\n00:20:39.601 --> 00:20:43.010\nIf I bump that to strongly,\nI'm at $145, right?\n\n436\n00:20:43.010 --> 00:20:46.960\nThat read capacity is changing, right?\n\n437\n00:20:46.960 --> 00:20:49.740\nWhen I put my reads per second at 1,000,\n\n438\n00:20:49.740 --> 00:20:53.200\nit specified my read capacity\nas 500 capacity units.\n\n439\n00:20:53.200 --> 00:20:56.870\nBut when I go to strongly consistent,\nit doubles.\n\n440\n00:20:56.870 --> 00:20:58.260\nWhy is it double?\n\n441\n00:20:58.260 --> 00:20:59.030\nIt has to read for\n\n442\n00:20:59.030 --> 00:21:02.410\nmore than one replica to make sure\nthat it's strongly consistent.\n\n443\n00:21:02.410 --> 00:21:05.670\nIf it looks at more than one replica and\nfinds different data,\n\n444\n00:21:05.670 --> 00:21:08.520\nit's gotta wait until they're the same,\nand then it returns it.\n\n445\n00:21:08.520 --> 00:21:10.760\nSo, it doubles the cost of your reads.\n\n446\n00:21:10.760 --> 00:21:13.550\nNotice how the writes aren't\naffected at all because writes,\n\n447\n00:21:13.550 --> 00:21:16.060\nby nature, consists that you do the write,\nand then it's gotta replicate out.\n\n448\n00:21:16.060 --> 00:21:17.730\nIt's the reads that\nare the problem on that.\n\n449\n00:21:17.730 --> 00:21:19.140\nSo, be aware of that.\n\n450\n00:21:19.140 --> 00:21:23.420\nOne of the nicest features is being\nable to specify this at query time\n\n451\n00:21:23.420 --> 00:21:26.600\ncuz we can bring our costs down by\nhaving only the queries that need to be\n\n452\n00:21:26.600 --> 00:21:29.060\nconsistent actually strongly consistent.\n\n453\n00:21:29.060 --> 00:21:31.410\nBut, on the negative side,\nit's something we have to remember.\n\n454\n00:21:31.410 --> 00:21:34.970\nAnd we have to take action for it because\nthe NoSQL database on the backend\n\n455\n00:21:34.970 --> 00:21:36.650\nis not going to enforce consistency.\n\n456\n00:21:36.650 --> 00:21:40.650\nIt's gonna leave it up to us just like\nit's leaving our data types up to us and\n\n457\n00:21:40.650 --> 00:21:42.390\nour attributes up to us, the schema.\n\n458\n00:21:42.390 --> 00:21:44.190\nIt's leaving all of that\nup to the application.\n\n459\n00:21:44.190 --> 00:21:48.840\nThat database is fast, because your\napplication is doing a lot of the work\n\n460\n00:21:48.840 --> 00:21:52.447\nthat a database would normally\ndo that speeds things up.\n\n461\n00:21:52.447 --> 00:21:54.709\nAll right, another thing to\nthink about is the scaling and\n\n462\n00:21:54.709 --> 00:21:56.350\npartitioning on the back end.\n\n463\n00:21:56.350 --> 00:21:57.920\nThe scaling, we don't have to worry about.\n\n464\n00:21:57.920 --> 00:22:00.980\nCuz as we add capacity units,\nit's gonna scale out and grow bigger and\n\n465\n00:22:00.980 --> 00:22:03.320\nit's all invisible to us.\n\n466\n00:22:03.320 --> 00:22:05.420\nBut on the partitioning side,\n\n467\n00:22:05.420 --> 00:22:08.750\nwe kind of defined how that was gonna\nwork when we created this table.\n\n468\n00:22:08.750 --> 00:22:11.260\nWell, actually I haven't\ncreated my table yet, have I?\n\n469\n00:22:11.260 --> 00:22:14.140\nLet me bump these numbers up just\na little bit to make sure I don't hit any\n\n470\n00:22:14.140 --> 00:22:14.720\nthresholds.\n\n471\n00:22:15.950 --> 00:22:18.540\nAnd I'll go ahead and create this.\n\n472\n00:22:18.540 --> 00:22:20.550\nAnd so,\nit's gonna whip up that table for me.\n\n473\n00:22:20.550 --> 00:22:22.480\nNotice I can just go in and\nstart creating more tables.\n\n474\n00:22:22.480 --> 00:22:24.650\nI just keep adding, and\nadding, and adding tables.\n\n475\n00:22:24.650 --> 00:22:27.900\nI don't have a way to add more\ndatabases because I don't see that.\n\n476\n00:22:27.900 --> 00:22:29.850\nIt's hidden so I just add more tables.\n\n477\n00:22:29.850 --> 00:22:33.320\nBut once the table is created,\nI can view the table data.\n\n478\n00:22:33.320 --> 00:22:34.356\nI can look at its information.\n\n479\n00:22:34.356 --> 00:22:35.625\nI can view its capacity.\n\n480\n00:22:35.625 --> 00:22:38.581\nI can find out the last increase or\ndecrease times,\n\n481\n00:22:38.581 --> 00:22:41.970\nwhen it's had to scale up or\nscale down in the background.\n\n482\n00:22:41.970 --> 00:22:44.853\nAgain, I don't have to do it,\nbut I can see that it happened,\n\n483\n00:22:44.853 --> 00:22:45.911\nwhich is kind of nice.\n\n484\n00:22:45.911 --> 00:22:50.114\nWell, the other thing that we can do is we\ncan start to tweak how its partitioning\n\n485\n00:22:50.114 --> 00:22:53.430\nworks, and mine won't work until\nI have actual data loaded.\n\n486\n00:22:53.430 --> 00:22:57.250\nBut when you go into items and\nindexes, you can tweak how\n\n487\n00:22:57.250 --> 00:23:01.980\nthe partitioning works to make sure that\nit's partitioned properly on the back end.\n\n488\n00:23:01.980 --> 00:23:04.160\nAnd that's an important thing\nthat we have to remember,\n\n489\n00:23:04.160 --> 00:23:08.620\nis that different data needs to be\npartitioned different ways, right.\n\n490\n00:23:08.620 --> 00:23:11.942\nSo, when we start dividing that\nbetween these different partitions,\n\n491\n00:23:11.942 --> 00:23:15.160\nI wanna make sure I'm supporting\nmy queries in a proper way.\n\n492\n00:23:15.160 --> 00:23:18.640\nAnd I can just leave it up to the system,\nlet the system do it, it'll do it.\n\n493\n00:23:18.640 --> 00:23:23.140\nBut if I create my primary keys and my\nindexes properly, then it will be able to\n\n494\n00:23:23.140 --> 00:23:25.460\npartition out like this and\nI won't have to fuss with that too much.\n\n495\n00:23:27.200 --> 00:23:29.180\nAll right, another thing to mention,\n\n496\n00:23:29.180 --> 00:23:32.730\nas your data grows,\nthe system will continue to partition.\n\n497\n00:23:32.730 --> 00:23:35.470\nAnd so, when I start,\nI might only have two partitions.\n\n498\n00:23:35.470 --> 00:23:38.590\nBut, as I add more and more data,\nit might go to four, or five, or six, or\n\n499\n00:23:38.590 --> 00:23:41.250\n100 partitions, right?\n\n500\n00:23:41.250 --> 00:23:43.240\nPartitions can grow.\n\n501\n00:23:43.240 --> 00:23:44.990\nWe can add more partitions.\n\n502\n00:23:44.990 --> 00:23:47.170\nBut you can't merge them back again.\n\n503\n00:23:47.170 --> 00:23:50.660\nIf I have two partitions and I go to\nthree, I now always gonna have three.\n\n504\n00:23:50.660 --> 00:23:52.120\nI can't go back to two.\n\n505\n00:23:52.120 --> 00:23:53.380\nIt merge them back.\n\n506\n00:23:53.380 --> 00:23:55.126\nSo, it will grow and then stay there.\n\n507\n00:23:55.126 --> 00:23:58.015\nIf you ever think that your table\nis just gotten out of control,\n\n508\n00:23:58.015 --> 00:24:01.229\nthat it's got way to many positions,\nyou just deleted a ton of data and\n\n509\n00:24:01.229 --> 00:24:04.798\nyou feel that you can come back smaller\nThen you need to create another table.\n\n510\n00:24:04.798 --> 00:24:07.371\nCreate another table, put your data in\nthere, and then blow away the old one.\n\n511\n00:24:07.371 --> 00:24:09.400\nThat's the way to kind\nof get that started.\n\n512\n00:24:09.400 --> 00:24:12.830\nOtherwise, it's not gonna merge those\npartitions back together again.\n\n513\n00:24:13.860 --> 00:24:16.984\n&gt;&gt; Don, any limits when it comes to our\npartitions that we need to be aware of?\n\n514\n00:24:16.984 --> 00:24:19.680\n&gt;&gt; I'm not aware of any limits.\n\n515\n00:24:19.680 --> 00:24:23.210\nIt's all designed to scale very,\nvery large.\n\n516\n00:24:23.210 --> 00:24:24.290\nSo it just keeps.\n\n517\n00:24:24.290 --> 00:24:26.043\nI'm sure there is\nthe actual one somewhere.\n\n518\n00:24:26.043 --> 00:24:26.766\n&gt;&gt; Yeah [LAUGH]\n&gt;&gt; But\n\n519\n00:24:26.766 --> 00:24:28.550\nI don't know that they even\npost that on the site.\n\n520\n00:24:28.550 --> 00:24:30.940\nCuz, again, it's all invisible to us.\n\n521\n00:24:30.940 --> 00:24:33.831\nSo we just keep throwing data in there and\nit just grows.\n\n522\n00:24:33.831 --> 00:24:37.073\nWe really don't even see the partitions\naside from the basic interaction that we\n\n523\n00:24:37.073 --> 00:24:37.990\nhave with them.\n\n524\n00:24:37.990 --> 00:24:40.414\n&gt;&gt; So basically, best product ever\ncreated is what we're talking about here.\n\n525\n00:24:40.414 --> 00:24:41.137\nBest product ever created.\n\n526\n00:24:41.137 --> 00:24:42.033\n&gt;&gt; Really, really, really is.\n\n527\n00:24:42.033 --> 00:24:43.298\n&gt;&gt; [LAUGH]\n&gt;&gt; It is more work\n\n528\n00:24:43.298 --> 00:24:47.610\non the application side, but\notherwise it's so painless to deploy.\n\n529\n00:24:47.610 --> 00:24:50.400\nThat's really why NoSQL is\nsuch a buzzword right now,\n\n530\n00:24:50.400 --> 00:24:52.810\nbecause it can do so much for us.\n\n531\n00:24:52.810 --> 00:24:55.480\nAnd coupled with somebody like\nAWS where it gets automated,\n\n532\n00:24:55.480 --> 00:24:57.360\nreally does become a great solution.\n\n533\n00:24:57.360 --> 00:25:00.150\n&gt;&gt; All right, so well Don, I'm looking\nat our clock, we got short on time.\n\n534\n00:25:00.150 --> 00:25:02.910\nAny other things that we need\nto know about when it comes to\n\n535\n00:25:02.910 --> 00:25:05.600\nDynamoDB that you might wanna\nthrow on top of this cake?\n\n536\n00:25:05.600 --> 00:25:06.543\n&gt;&gt; Let me throw in just a few things.\n\n537\n00:25:06.543 --> 00:25:11.254\nIn a normal database engine, we would have\nto create user accounts inside of it and\n\n538\n00:25:11.254 --> 00:25:14.125\nmanage the database itself\nthrough whatever that\n\n539\n00:25:14.125 --> 00:25:16.410\ndatabase engine software was.\n\n540\n00:25:16.410 --> 00:25:18.040\nHere, I just have tables, so\n\n541\n00:25:18.040 --> 00:25:20.730\nI don't even have database\nsoftware to interact with, right?\n\n542\n00:25:20.730 --> 00:25:24.820\nSo in this scenario,\nwhere would I create user accounts?\n\n543\n00:25:24.820 --> 00:25:29.400\nWell, the nice part here is it's fully\nintegrated with AWSSIAM with identify and\n\n544\n00:25:29.400 --> 00:25:30.360\naccess management.\n\n545\n00:25:30.360 --> 00:25:32.370\nSo I can create IAM users.\n\n546\n00:25:32.370 --> 00:25:34.420\nAnd give them access to these tables.\n\n547\n00:25:34.420 --> 00:25:38.710\nAnd so\nI managed that completely inside of AWS.\n\n548\n00:25:38.710 --> 00:25:40.332\nThat's pretty cool, I don't have\nto add external user accounts.\n\n549\n00:25:40.332 --> 00:25:44.619\nI can use external user accounts,\nif we have a federation tied into IAM,\n\n550\n00:25:44.619 --> 00:25:48.400\nnow that ties into this table,\nthis collection of data.\n\n551\n00:25:48.400 --> 00:25:52.670\nSo I don't have separate database software\nto manage, that's a key principle.\n\n552\n00:25:52.670 --> 00:25:56.760\nAnd then the other thing I wanna\nmention are DynamoDB Streams,\n\n553\n00:25:56.760 --> 00:25:58.200\nyou have a huge amount of data, right?\n\n554\n00:25:58.200 --> 00:26:01.490\nProbably if you're using DynamoDB, you're\nprobably have a huge amount of data.\n\n555\n00:26:01.490 --> 00:26:05.250\nAnd if somebody's running queries and\nanalysis against it, and\n\n556\n00:26:05.250 --> 00:26:11.140\nthe data changes each day, they probably\nneed some way to find new data.\n\n557\n00:26:11.140 --> 00:26:13.620\nWell, depending on how things\nare being partitioned,\n\n558\n00:26:13.620 --> 00:26:15.860\nthat might make them have\nto scan a lot of the data,\n\n559\n00:26:15.860 --> 00:26:20.730\nwhich takes up a lot of capacity units as\nyou read through or write, or whatever.\n\n560\n00:26:20.730 --> 00:26:23.010\nSo DynamoDB supports\nwhat are called streams.\n\n561\n00:26:23.010 --> 00:26:26.830\nYou might have noticed when I was back\non the main screen here, here we go,\n\n562\n00:26:26.830 --> 00:26:29.960\nwhen I'm on my table,\nright here on the overview,\n\n563\n00:26:29.960 --> 00:26:31.940\nI've got stream details\nright here at the top.\n\n564\n00:26:31.940 --> 00:26:39.070\nOkay, the stream is a 24\nhour feed of what's changed.\n\n565\n00:26:39.070 --> 00:26:41.250\nAt any time a client can query the stream,\n\n566\n00:26:41.250 --> 00:26:45.180\nand the stream will show them every\nchange made in the last 24 hours.\n\n567\n00:26:45.180 --> 00:26:48.353\nSo I don't have to pull the whole\nday to set to find out what's new.\n\n568\n00:26:48.353 --> 00:26:50.444\nI don't even have to run a query,\n\n569\n00:26:50.444 --> 00:26:53.369\nI can just use the API\ngrab a copy of the stream.\n\n570\n00:26:53.369 --> 00:26:57.770\nAnd the stream will show me everything\nthat's changed since the last 24 hours.\n\n571\n00:26:57.770 --> 00:27:01.650\nSo if I've already cached this data for\nuse some else, I could just update my\n\n572\n00:27:01.650 --> 00:27:05.770\ncache with a new data and not have to\nmess with all the underlying information.\n\n573\n00:27:05.770 --> 00:27:09.480\nIt's another optimization that we have\nthat makes us an incredibly useful product\n\n574\n00:27:09.480 --> 00:27:11.814\nespecially for\ndata that's changing frequently.\n\n575\n00:27:11.814 --> 00:27:15.549\nMaybe I've got company receipts\nthat are being stored in here, and\n\n576\n00:27:15.549 --> 00:27:18.380\nI'm running reports just\non the last day of sales.\n\n577\n00:27:18.380 --> 00:27:21.040\nWell, I can pull that right out\nof the stream, and get at it, and\n\n578\n00:27:21.040 --> 00:27:23.230\nnot even have to query across\nthe partitions based on data.\n\n579\n00:27:23.230 --> 00:27:25.000\nIt's all right in the stream.\n\n580\n00:27:25.000 --> 00:27:28.250\n&gt;&gt; All right, well, DynamoDB,\nyou guys saw it here first.\n\n581\n00:27:28.250 --> 00:27:29.292\nThe best product ever created by man.\n\n582\n00:27:29.292 --> 00:27:31.685\n&gt;&gt; [LAUGH]\n&gt;&gt; That's amazing, apparently.\n\n583\n00:27:31.685 --> 00:27:35.960\nDon, you've given us a litany of\nreasons why we would want to learn and\n\n584\n00:27:35.960 --> 00:27:39.230\nuse DynamoDB, it's a very,\nvery cool thing.\n\n585\n00:27:39.230 --> 00:27:43.050\nThank you so much for hanging out with us\ntoday, and explaining those things for us.\n\n586\n00:27:43.050 --> 00:27:45.775\nBut, as I look at the clock,\nnow the time has fully expired.\n\n587\n00:27:45.775 --> 00:27:46.800\n&gt;&gt; [LAUGH]\n&gt;&gt; We're done for the day.\n\n588\n00:27:46.800 --> 00:27:48.800\nWe do appreciate you guys watching though.\n\n589\n00:27:48.800 --> 00:27:51.640\nSigning off for ITProTV,\nI've been your host, Daniel Lowry.\n\n590\n00:27:51.640 --> 00:27:53.102\n&gt;&gt; And I'm Don Pezet.\n&gt;&gt; And we'll see you next time\n\n591\n00:27:53.102 --> 00:28:00.476\n[MUSIC]\n\n592\n00:28:00.476 --> 00:28:03.209\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "207817752"
        }
      ],
      "title": "Databases and AWS"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don explore the Amazon Simple Queue Service in AWS. They begin by defining SQS, what it is and where it's used. Then they dive into the specifics like the Message Lifecycle, Visibility Timeouts, Delay Queues, Identities, Messages, and Advanced Features.",
          "length": "1614",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-1-amazon_simple_queue_service-030917.00_26_39_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-1-amazon_simple_queue_service-030917.00_26_39_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-1-amazon_simple_queue_service-030917.00_26_39_16.Still001-sm.jpg",
          "title": "Amazon Simple Queue Service",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.215\nWelcome to ITProTV.\n\n2\n00:00:01.215 --> 00:00:02.663\nI'm your host, Don Pezet.\n\n3\n00:00:02.663 --> 00:00:07.702\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:07.702 --> 00:00:10.711\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.711 --> 00:00:13.127\n&gt;&gt; All right, greetings, everyone, and\n\n6\n00:00:13.127 --> 00:00:15.905\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:15.905 --> 00:00:19.741\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.741 --> 00:00:23.590\nwe're back with more on our ACSAA series,\nthat's right.\n\n9\n00:00:23.590 --> 00:00:26.465\n&gt;&gt; [LAUGH]\n&gt;&gt; Amazon Certified Solutions Architect,\n\n10\n00:00:26.465 --> 00:00:28.310\nand that is the associate level.\n\n11\n00:00:28.310 --> 00:00:31.160\nAnd joining us back in the studio yet\nagain, our good friend, Don Pezet.\n\n12\n00:00:31.160 --> 00:00:33.060\nDon, welcome back, sir,\nand how goes it today?\n\n13\n00:00:33.060 --> 00:00:33.890\n&gt;&gt; It's going great, Daniel.\n\n14\n00:00:33.890 --> 00:00:35.700\nWe're gonna dive back right it to AWS.\n\n15\n00:00:35.700 --> 00:00:36.764\nAnd in this episode,\n\n16\n00:00:36.764 --> 00:00:40.135\nwe're gonna be taking a look at\nthe Amazon Simple Queuing Service or\n\n17\n00:00:40.135 --> 00:00:43.228\nSimple Queue Service, SQS, and\nkind of what it can do for us.\n\n18\n00:00:43.228 --> 00:00:46.500\nThe Queue Service is one of the more\nimportant ones that allows our\n\n19\n00:00:46.500 --> 00:00:48.167\napplications to communicate and\n\n20\n00:00:48.167 --> 00:00:50.680\nis something that a lot\nof organizations rely on.\n\n21\n00:00:50.680 --> 00:00:51.930\nIt's a critical service, so\n\n22\n00:00:51.930 --> 00:00:55.530\nit's another one that's really nice to be\nable to implement in a cloud environment,\n\n23\n00:00:55.530 --> 00:00:59.420\nlet Amazon manage, and then we know it's\ngonna be reliable, available, durable.\n\n24\n00:00:59.420 --> 00:01:01.940\nAnd that our applications are gonna be\nable to communicate the way they want.\n\n25\n00:01:01.940 --> 00:01:04.930\nSo it's a neat service, one that a lot of\npeople aren't quite that familiar with.\n\n26\n00:01:04.930 --> 00:01:06.660\nSo I'm kind of excited to get in and\ntalk about it.\n\n27\n00:01:06.660 --> 00:01:09.316\n&gt;&gt; Yeah, Don, speaking of a lot of people\nnot being quite familiar with that,\n\n28\n00:01:09.316 --> 00:01:11.214\nI'm in that camp.\n\n29\n00:01:11.214 --> 00:01:13.210\n[LAUGH]\n&gt;&gt; Like I've said on\n\n30\n00:01:13.210 --> 00:01:16.170\na couple of occasions, I'm not\nthe biggest database guy in the world.\n\n31\n00:01:16.170 --> 00:01:19.570\nIs this something that is specifically for\ndatabases?\n\n32\n00:01:19.570 --> 00:01:21.159\nWhy haven't I heard of this?\n\n33\n00:01:21.159 --> 00:01:24.743\n&gt;&gt; All right, so the queueing service,\nSQS, it can be used for\n\n34\n00:01:24.743 --> 00:01:26.019\ndarn near anything.\n\n35\n00:01:26.019 --> 00:01:29.472\nSo we typically do use it for\ndatabases, but you can use it for\n\n36\n00:01:29.472 --> 00:01:31.410\nany kind of application.\n\n37\n00:01:31.410 --> 00:01:34.190\nAnd I'm not surprised that you haven't\nheard of it because this is one of those,\n\n38\n00:01:34.190 --> 00:01:37.460\nI'm gonna call it an invisible service,\nsomething that runs in the background.\n\n39\n00:01:37.460 --> 00:01:38.710\nUsers don't see it.\n\n40\n00:01:38.710 --> 00:01:42.450\nWhat the SQS does is it allows two\napplications to talk to each other.\n\n41\n00:01:42.450 --> 00:01:44.460\nNow applications can\nalready talk to each other.\n\n42\n00:01:44.460 --> 00:01:45.650\nWhat do I need a service in between?\n\n43\n00:01:45.650 --> 00:01:47.250\nAnd I'll explain that in a moment.\n\n44\n00:01:47.250 --> 00:01:50.749\nBut the fact that it's letting these\napplications talk to each other means\n\n45\n00:01:50.749 --> 00:01:54.148\nthe end users see the applications,\nthey don't see the queue service.\n\n46\n00:01:54.148 --> 00:01:57.850\nIt's in the background, it's hidden,\nit's invisible and transparent to them.\n\n47\n00:01:57.850 --> 00:01:59.302\nThey don't even know it's there.\n\n48\n00:01:59.302 --> 00:02:07.150\nSo it doesn't have the PR team behind\nit like EC2 does or RDS, right?\n\n49\n00:02:07.150 --> 00:02:09.480\nEC2, I can pull an instance,\nthat's a server.\n\n50\n00:02:09.480 --> 00:02:10.140\nI know what a server is.\n\n51\n00:02:10.140 --> 00:02:12.620\nRight, I'm gonna deploy a database in RDS.\n\n52\n00:02:12.620 --> 00:02:14.470\nI know what a database is.\n\n53\n00:02:14.470 --> 00:02:14.970\nA queue?\n\n54\n00:02:16.070 --> 00:02:17.280\nI don't even touch a queue.\n\n55\n00:02:17.280 --> 00:02:19.390\nI touch an application and\nin turn it touches a queue.\n\n56\n00:02:19.390 --> 00:02:22.200\n&gt;&gt; I hate waiting in line, so\nI don't want to know about that.\n\n57\n00:02:22.200 --> 00:02:24.010\n&gt;&gt; Isn't a queue a bad thing, right?\n\n58\n00:02:24.010 --> 00:02:26.150\nBut in this case it's\nactually a good thing, right?\n\n59\n00:02:26.150 --> 00:02:28.430\nAnd let me just give you a scenario.\n\n60\n00:02:28.430 --> 00:02:31.371\nIf I have two applications, or\nan application and a database, and\n\n61\n00:02:31.371 --> 00:02:33.156\nI need them to talk to each other, well,\n\n62\n00:02:33.156 --> 00:02:35.378\nthe application formulates\nsome kind of a query.\n\n63\n00:02:35.378 --> 00:02:38.500\nIt reaches out to the database and\nit performs that activity.\n\n64\n00:02:38.500 --> 00:02:42.010\nOr one application forms\na communication packet,\n\n65\n00:02:42.010 --> 00:02:43.370\nsends it over to the other application.\n\n66\n00:02:43.370 --> 00:02:45.620\nThe other application takes an action,\nright?\n\n67\n00:02:45.620 --> 00:02:46.447\nWhat happens if for\n\n68\n00:02:46.447 --> 00:02:50.074\nsome reason that communication packet\ndoesn't make it to the other side, right?\n\n69\n00:02:50.074 --> 00:02:52.050\nMaybe there's a network issue.\n\n70\n00:02:52.050 --> 00:02:54.640\nMaybe a server is rebooting somewhere.\n\n71\n00:02:54.640 --> 00:02:56.680\nMaybe there's a misconfiguration.\n\n72\n00:02:56.680 --> 00:02:58.230\nWell, that communication\npacket doesn't make it.\n\n73\n00:02:59.310 --> 00:03:02.080\nOkay, maybe our application's designed\nto handle that and it says well, okay,\n\n74\n00:03:02.080 --> 00:03:02.600\nit didn't make it.\n\n75\n00:03:02.600 --> 00:03:03.850\nWell, we'll do a retry.\n\n76\n00:03:03.850 --> 00:03:06.470\nOkay, well, that works out great for\nsome people.\n\n77\n00:03:06.470 --> 00:03:08.090\nNot for everybody, right.\n\n78\n00:03:08.090 --> 00:03:14.990\nImagine for a moment that you are an IT\nperson for the New York Stock Exchange.\n\n79\n00:03:14.990 --> 00:03:21.380\nAnd you just got a sell order for 10,000\nshares of Microsoft or something, right?\n\n80\n00:03:21.380 --> 00:03:24.390\nAnd that sell order is posted now.\n\n81\n00:03:24.390 --> 00:03:26.340\nWell, if you post the sale order and\n\n82\n00:03:26.340 --> 00:03:29.100\nyou're selling those stocks or\nbonds, or whatever.\n\n83\n00:03:29.100 --> 00:03:29.933\nI'm not a big stock guy.\n\n84\n00:03:29.933 --> 00:03:31.599\n&gt;&gt; [LAUGH]\n&gt;&gt; So anyway, you do whatever it is they\n\n85\n00:03:31.599 --> 00:03:33.970\ndo in the stock market where they\nyell at each other on the floor.\n\n86\n00:03:33.970 --> 00:03:36.370\nAnd the sell order doesn't get through.\n\n87\n00:03:36.370 --> 00:03:37.400\nAnd you say, all right,\nwell, you know what?\n\n88\n00:03:37.400 --> 00:03:38.690\nForget it, we'll retry.\n\n89\n00:03:38.690 --> 00:03:40.840\nAnd you retry a few seconds later.\n\n90\n00:03:40.840 --> 00:03:43.740\nWell, in a few seconds,\nthe value of that stock can change.\n\n91\n00:03:43.740 --> 00:03:45.290\nMaybe for the better, maybe for the worse.\n\n92\n00:03:45.290 --> 00:03:48.120\nBut it can change, and that's a problem.\n\n93\n00:03:48.120 --> 00:03:53.380\nThere are times where we have\ncommunications that have to be reliably\n\n94\n00:03:53.380 --> 00:03:54.040\ntransmitted.\n\n95\n00:03:54.040 --> 00:03:56.110\nIn other words,\nthat they're guaranteed delivery.\n\n96\n00:03:56.110 --> 00:04:00.270\nI know for a fact that if I put\nthat sale order in at 12 o'clock\n\n97\n00:04:00.270 --> 00:04:03.650\nthat it applied at 12 o'clock,\nnot at 12:05, all right.\n\n98\n00:04:03.650 --> 00:04:05.412\nThat it posted at the time\nI said it was gonna post.\n\n99\n00:04:05.412 --> 00:04:09.008\nIf you need that kind of reliable\ncommunication, you can't just let your\n\n100\n00:04:09.008 --> 00:04:12.836\napplications talk to each other because\nthings will happen in between them and\n\n101\n00:04:12.836 --> 00:04:14.480\nit causes problems.\n\n102\n00:04:14.480 --> 00:04:16.940\nAnd that's where the queuing\nservice comes in.\n\n103\n00:04:16.940 --> 00:04:20.370\nThe queuing service can sit\nin between your application.\n\n104\n00:04:20.370 --> 00:04:23.416\nAnd it serves as a layer of abstraction\nin between your application and\n\n105\n00:04:23.416 --> 00:04:26.570\nthe database or\nin between two applications or whatever.\n\n106\n00:04:26.570 --> 00:04:29.920\nAnd instead of the device or\nthe applications talking directly to each\n\n107\n00:04:29.920 --> 00:04:34.970\nother, they formulate a communications\nmessage and they drop it in the queue.\n\n108\n00:04:34.970 --> 00:04:37.370\nAnd then at the other side,\nthey're watching the queue and\n\n109\n00:04:37.370 --> 00:04:40.110\nthey just pick that message back up and\nthey handle it, right?\n\n110\n00:04:40.110 --> 00:04:42.820\nBut if one side is messed up and\n\n111\n00:04:42.820 --> 00:04:48.290\nnot working, well, we take the message,\nwe drop it in the queue and it sits there.\n\n112\n00:04:48.290 --> 00:04:52.320\nAnd as soon as we fix the other side,\nit's able to pull the message in and\n\n113\n00:04:52.320 --> 00:04:53.200\nprocess it.\n\n114\n00:04:53.200 --> 00:04:54.110\nIt never lost it.\n\n115\n00:04:54.110 --> 00:04:55.160\nThe original message is there.\n\n116\n00:04:55.160 --> 00:04:56.260\nIt's able to handle it.\n\n117\n00:04:56.260 --> 00:04:58.750\nAnd we get guaranteed delivery.\n\n118\n00:04:58.750 --> 00:05:02.430\nIf you have unreliable networks, or\nif you have a reliable network, and\n\n119\n00:05:02.430 --> 00:05:04.100\nyou just wanna be sure, right?\n\n120\n00:05:04.100 --> 00:05:05.750\nIt's mission critical.\n\n121\n00:05:05.750 --> 00:05:08.000\nMaybe lives are at stake here.\n\n122\n00:05:08.000 --> 00:05:12.884\nYou're a hospital, and you're doing\nsurgical orders, or something like that.\n\n123\n00:05:12.884 --> 00:05:14.970\nYou don't mess around with that.\n\n124\n00:05:14.970 --> 00:05:17.300\nAnd you might have a perfectly reliable,\nstate of the art network,\n\n125\n00:05:17.300 --> 00:05:20.650\nbut you need to guarantee delivery and\nthat's what the Simple Queue service does.\n\n126\n00:05:20.650 --> 00:05:23.450\nAnd the best part is that first S,\nit does it simply.\n\n127\n00:05:23.450 --> 00:05:25.600\nIt's really not hard to use.\n\n128\n00:05:25.600 --> 00:05:27.550\nBut your application is what's\ngonna interact with it,\n\n129\n00:05:27.550 --> 00:05:30.310\nnot with the images, that's why we\ndon't hear a ton about the SQS.\n\n130\n00:05:31.360 --> 00:05:34.760\nAll right, so if I wanna put\nsomething like this in place,\n\n131\n00:05:34.760 --> 00:05:37.660\nI've gotta take an application,\nI've gotta design it to use it.\n\n132\n00:05:37.660 --> 00:05:40.580\nI've gotta tell the application, hey,\ndon't talk right to the database server.\n\n133\n00:05:40.580 --> 00:05:42.410\nDon't talk right to this or to that.\n\n134\n00:05:42.410 --> 00:05:45.120\nInstead, drop your changes in the queue.\n\n135\n00:05:45.120 --> 00:05:47.310\nAnd so it's gotta build a message,\ndrop it in the queue.\n\n136\n00:05:47.310 --> 00:05:50.560\nAnd then whatever's on the other side\nhas to be designed to check that queue,\n\n137\n00:05:50.560 --> 00:05:53.260\nto be able to reach in there and\ngrab that data, and start to process it.\n\n138\n00:05:53.260 --> 00:05:55.876\nSo that's a part of what I've\ngotta work with to get to get this\n\n139\n00:05:55.876 --> 00:05:57.070\ndeployed and in place.\n\n140\n00:05:57.070 --> 00:05:59.820\nAnd then once it's going,\nI can monitor that queue.\n\n141\n00:05:59.820 --> 00:06:02.250\nAnd I can see how communications\nare running through my system.\n\n142\n00:06:02.250 --> 00:06:04.000\nI can even keep historical records.\n\n143\n00:06:04.000 --> 00:06:06.830\nCuz that's another kind of\na side benefit of deploying SQS.\n\n144\n00:06:06.830 --> 00:06:09.830\nSo in a nutshell, that's what SQS is.\n\n145\n00:06:09.830 --> 00:06:12.310\n&gt;&gt; So Don,\nwe're going on to this queue here.\n\n146\n00:06:12.310 --> 00:06:14.470\nYou talked about messaging,\nand making the queue.\n\n147\n00:06:14.470 --> 00:06:16.273\nCan you give us maybe\na visual representation,\n\n148\n00:06:16.273 --> 00:06:16.870\n&gt;&gt; [LAUGH]\n\n149\n00:06:16.870 --> 00:06:17.660\n&gt;&gt; Of what this looks like.\n\n150\n00:06:17.660 --> 00:06:20.438\nNot that, I'm following you along,\nbut I'm a visual learner.\n\n151\n00:06:20.438 --> 00:06:22.160\nThat would be very helpful.\n\n152\n00:06:22.160 --> 00:06:25.183\n&gt;&gt; All right, so when you deal with a\nqueue, there's really two main components,\n\n153\n00:06:25.183 --> 00:06:26.740\nthe queue and the message, right?\n\n154\n00:06:26.740 --> 00:06:28.701\nSo something makes a message,\ntakes on the queue,\n\n155\n00:06:28.701 --> 00:06:30.537\nthen something else gets the message,\nright?\n\n156\n00:06:30.537 --> 00:06:33.940\nSo the message and the queue are kind\nof the two important components.\n\n157\n00:06:33.940 --> 00:06:36.450\nAnd you go through what's\ncalled a message life cycle.\n\n158\n00:06:36.450 --> 00:06:38.285\nSo I do have a little diagram.\n\n159\n00:06:38.285 --> 00:06:40.995\nAnd this is from the AWS documentation.\n\n160\n00:06:40.995 --> 00:06:43.614\nAnd they show basically the three\nstages that a message goes through.\n\n161\n00:06:43.614 --> 00:06:45.628\nAnd the first stage is really simple.\n\n162\n00:06:45.628 --> 00:06:46.375\nWe have Component 1.\n\n163\n00:06:46.375 --> 00:06:48.425\nAnd see that nice generic term?\n\n164\n00:06:48.425 --> 00:06:49.476\nIt's Component 1.\n\n165\n00:06:49.476 --> 00:06:50.266\nWhat is it?\n\n166\n00:06:50.266 --> 00:06:51.887\nIt could be anything.\n\n167\n00:06:51.887 --> 00:06:54.247\nIt could be an application,\nit could be another database,\n\n168\n00:06:54.247 --> 00:06:56.955\nit could be an end user generating\nsomething from the command line.\n\n169\n00:06:56.955 --> 00:06:57.915\nIt could be any number of things.\n\n170\n00:06:57.915 --> 00:07:01.540\nSo some component makes a message, and\n\n171\n00:07:01.540 --> 00:07:05.240\nit takes that message and\nit dumps it into a queue.\n\n172\n00:07:05.240 --> 00:07:07.510\nNow that message is Message A.\n\n173\n00:07:07.510 --> 00:07:10.542\nAnd see how it can be stored\nmore than one time, right?\n\n174\n00:07:10.542 --> 00:07:14.345\nQueues, in order to guarantee delivery,\nand\n\n175\n00:07:14.345 --> 00:07:17.825\nto make sure that message is safe,\nwe might transmit it more than once.\n\n176\n00:07:17.825 --> 00:07:21.732\nSo we might have more than one\ncopy of that same message, right?\n\n177\n00:07:21.732 --> 00:07:25.325\nSo the message gets deposited,\nthat's step 1.\n\n178\n00:07:25.325 --> 00:07:28.444\nThen we get into step 2,\nwhich is Component 2 comes along,\n\n179\n00:07:28.444 --> 00:07:31.245\nour database,\nour application, or whatever.\n\n180\n00:07:31.245 --> 00:07:35.180\nAnd it's watching the queues and\nit sees, hey, Message A just appeared.\n\n181\n00:07:35.180 --> 00:07:37.555\nI'm gonna grab a copy of Message A.\n\n182\n00:07:37.555 --> 00:07:39.990\nNow it only needs one copy of Message A.\n\n183\n00:07:39.990 --> 00:07:43.350\nIt doesn't need, if there's four copies,\nit doesn't need four copies of it, right?\n\n184\n00:07:43.350 --> 00:07:47.270\nSo our application or whatever we're\ndesigning, it needs to be intelligent\n\n185\n00:07:47.270 --> 00:07:50.790\nenough to recognize that there may well be\nmore than one copy of the same message.\n\n186\n00:07:50.790 --> 00:07:52.368\nTo think about like\na financial organization,\n\n187\n00:07:52.368 --> 00:07:53.993\nevery transaction would\nhave a transaction ID.\n\n188\n00:07:53.993 --> 00:07:57.717\nAnd so I might see four transactions,\nbut they're all the same transaction ID.\n\n189\n00:07:57.717 --> 00:07:58.739\nI know it's the same one.\n\n190\n00:07:58.739 --> 00:08:01.642\nI know I'm not gonna\nprocess four cell orders,\n\n191\n00:08:01.642 --> 00:08:05.720\nwhen it's actually one cell order\ncopied four times, all right.\n\n192\n00:08:05.720 --> 00:08:07.970\nSo, our application has to be\nsmart enough to deal with that.\n\n193\n00:08:07.970 --> 00:08:11.660\nBut that's the tradeoff for being\nable to get that guaranteed delivery.\n\n194\n00:08:11.660 --> 00:08:14.020\nBut it's gonna receive that message,\n\n195\n00:08:14.020 --> 00:08:16.850\nand it's gonna do whatever it\nis that that component does.\n\n196\n00:08:16.850 --> 00:08:18.640\nAnd it could literally be anything.\n\n197\n00:08:18.640 --> 00:08:21.810\nYou can use these queues for\ndarn near anything.\n\n198\n00:08:21.810 --> 00:08:25.920\nAnd then as soon as Component\n2 is done with that process,\n\n199\n00:08:25.920 --> 00:08:29.760\nit then removes the message\nfrom the queue.\n\n200\n00:08:29.760 --> 00:08:35.260\nNotice how the message stays in\nthe queue until Component 2 is done.\n\n201\n00:08:35.260 --> 00:08:38.940\nWhen Component 2 has\nthe copy of that message,\n\n202\n00:08:38.940 --> 00:08:41.730\nthen it purges the queue and\npulls that out of there, right.\n\n203\n00:08:41.730 --> 00:08:44.700\nAnd so that's how we know that it was\nactually delivered and completed.\n\n204\n00:08:44.700 --> 00:08:48.630\nIf something goes wrong, the message just\nstays in the queue and I can bring up\n\n205\n00:08:48.630 --> 00:08:53.390\na redundant Version of whatever Component\n2 is, and it can grab the messages that\n\n206\n00:08:53.390 --> 00:08:56.702\nare still sitting there and processing\nthem so that's kind of a key thing.\n\n207\n00:08:56.702 --> 00:08:59.880\n&gt;&gt; All right Don, I'm looking at your cool\ndiagram, thank you for that by the way.\n\n208\n00:08:59.880 --> 00:09:01.140\nThat's very, very helpful.\n\n209\n00:09:01.140 --> 00:09:04.540\nWe are visual, we'll format [LAUGH] so\nthat is good for\n\n210\n00:09:04.540 --> 00:09:05.658\neverybody out there watching, right.\n\n211\n00:09:05.658 --> 00:09:09.480\nI\"m looking at this little object you've\ngot on there that says the visibility\n\n212\n00:09:09.480 --> 00:09:10.220\ntime out clock.\n\n213\n00:09:10.220 --> 00:09:11.540\nCan you clarify what that is?\n\n214\n00:09:11.540 --> 00:09:13.970\n&gt;&gt; Okay, so\nthe visibility time out clock is there..\n\n215\n00:09:13.970 --> 00:09:16.500\nIt's one of those things we don't\nnormally have to mess with.\n\n216\n00:09:16.500 --> 00:09:17.960\nYou can tweak it if you need to.\n\n217\n00:09:18.960 --> 00:09:22.010\nWhat it does,\nis it helps to ensure that if I have\n\n218\n00:09:22.010 --> 00:09:25.210\nredundant copies of\nComponent 2 I mentioned.\n\n219\n00:09:25.210 --> 00:09:28.400\nWe don't want necessarily two\ndifferent systems processing the same\n\n220\n00:09:28.400 --> 00:09:30.090\nmessage at the same time.\n\n221\n00:09:30.090 --> 00:09:35.780\nSo when we deposit a message into the Q,\nthere's a time out clock.\n\n222\n00:09:35.780 --> 00:09:37.460\nA visibility time out clock and\n\n223\n00:09:37.460 --> 00:09:40.980\nit doesn't actually start when\nthe message is put in the Q.\n\n224\n00:09:40.980 --> 00:09:44.550\nThe time out clock starts the moment\nsomebody retrieves the message.\n\n225\n00:09:44.550 --> 00:09:49.110\nSo here in Step 2, when Component 2\ngoes to grab a copy of that message\n\n226\n00:09:49.110 --> 00:09:51.740\nthat's when the time out clock starts,\nright.\n\n227\n00:09:51.740 --> 00:09:54.240\nComponent 2 just got the first\ncopy of that message and\n\n228\n00:09:54.240 --> 00:09:55.040\nthe time out clock starts.\n\n229\n00:09:55.040 --> 00:09:58.470\nAnd during that visibility time\nout the message is hidden.\n\n230\n00:09:58.470 --> 00:10:00.970\nSo, the fact that there's\nfour more copies, or\n\n231\n00:10:00.970 --> 00:10:03.480\nthree more copies of that message,\nthere all hidden.\n\n232\n00:10:03.480 --> 00:10:04.920\nNobody else can see them.\n\n233\n00:10:04.920 --> 00:10:09.440\nBecause if this, let's just assume that\nthis is a web application of some sort\n\n234\n00:10:09.440 --> 00:10:13.780\nI might be running 30 copies of it,\ncuz I've scaled out for scalability.\n\n235\n00:10:13.780 --> 00:10:18.090\nSo, I don't want 30 instances\ngrabbing all the same message and\n\n236\n00:10:18.090 --> 00:10:19.630\nprocessing it 30 times.\n\n237\n00:10:19.630 --> 00:10:22.290\nSo, the moment the first one gets it,\nit's hidden.\n\n238\n00:10:22.290 --> 00:10:26.150\nAnd the other 29 applications,\nthey wouldn't even see that and\n\n239\n00:10:26.150 --> 00:10:27.650\nit would just be hidden.\n\n240\n00:10:27.650 --> 00:10:33.030\nBut, if that one instance that\ndid get the message failed\n\n241\n00:10:33.030 --> 00:10:37.600\nafter this time out window expires then it\nbecomes visible again in one of the other\n\n242\n00:10:37.600 --> 00:10:41.590\ninstances has a chance to grab the message\nin process and there's our guarantee.\n\n243\n00:10:41.590 --> 00:10:47.000\nNow couple of things to remember about\nthat, first off the visibility time out\n\n244\n00:10:47.000 --> 00:10:50.210\ndoesn't start the moment\nthe message is deposited.\n\n245\n00:10:50.210 --> 00:10:53.480\nIt starts the moment\nthe message is retrieved,\n\n246\n00:10:53.480 --> 00:10:55.860\nthe moment we pull it out to the queue.\n\n247\n00:10:55.860 --> 00:10:57.990\nThat's when the visibility\ntime out starts.\n\n248\n00:10:57.990 --> 00:10:58.980\nAnd you can tweak that,\n\n249\n00:10:58.980 --> 00:11:02.560\nyou can change that visibility time out\nif you want it to be longer or shorter.\n\n250\n00:11:02.560 --> 00:11:05.410\nBut if anybody does\na messenger receive request,\n\n251\n00:11:05.410 --> 00:11:08.570\nor a receive message request,\nthey're not going to see the message.\n\n252\n00:11:08.570 --> 00:11:11.050\nNo message returned during that time out.\n\n253\n00:11:11.050 --> 00:11:15.550\nAnd hopefully, during the time out period,\nwhatever component grab\n\n254\n00:11:15.550 --> 00:11:18.730\nthe message finishes with it and purges\nthe queues to get them out of there.\n\n255\n00:11:18.730 --> 00:11:22.500\nBut if it doesn't by the time that time\nexpires, it becomes visible again and\n\n256\n00:11:22.500 --> 00:11:25.830\nthe next person to do a receive message\nrequest will actually get that message\n\n257\n00:11:25.830 --> 00:11:28.000\nreturned to them and they will be\nable to process it, all right.\n\n258\n00:11:28.000 --> 00:11:30.180\nNow that's the first thing\nI want you to remember.\n\n259\n00:11:30.180 --> 00:11:34.140\nThe second thing I want you to remember\nis because of this visibility timeout\n\n260\n00:11:34.140 --> 00:11:37.070\nyou could end up in a situation\nwhere your messages are not\n\n261\n00:11:37.070 --> 00:11:40.150\nbeing processed in the order\nthat they're sent.\n\n262\n00:11:40.150 --> 00:11:43.060\nI might have five messages that go\ninto the queue, in order, right, one,\n\n263\n00:11:43.060 --> 00:11:44.420\ntwo, three, four, five.\n\n264\n00:11:44.420 --> 00:11:47.790\nAnd something goes wrong with\nthe processing of message two.\n\n265\n00:11:47.790 --> 00:11:51.710\nAnd so, message 2 has its visibility time\nout ticking away, it finally expires and\n\n266\n00:11:51.710 --> 00:11:52.970\nbecomes visible again.\n\n267\n00:11:52.970 --> 00:11:57.357\nMeanwhile, message one, three, four,\nand five and have been processed and\n\n268\n00:11:57.357 --> 00:11:59.892\nnow two gets grabbed and\nbrought in, right?\n\n269\n00:11:59.892 --> 00:12:03.275\nSo, the messages can get\nprocessed out of the order.\n\n270\n00:12:03.275 --> 00:12:06.270\nThe queue guarantees\ndelivery of the message.\n\n271\n00:12:06.270 --> 00:12:09.720\nIt doesn't guarantee that\nit's delivered in order.\n\n272\n00:12:09.720 --> 00:12:13.610\nSo, our applications that interact with\nthe queue, they've gotta be smart enough\n\n273\n00:12:13.610 --> 00:12:17.370\nto know that, well they've gotta be\nsmart enough to know the queue exists,\n\n274\n00:12:17.370 --> 00:12:18.910\nthat's kind of important, right?\n\n275\n00:12:18.910 --> 00:12:21.650\nThey've gotta be smart enough to\nknow that there's gonna be more than\n\n276\n00:12:21.650 --> 00:12:24.180\none copy of every message Right?\n\n277\n00:12:24.180 --> 00:12:27.330\nAnd they've got to be smart enough to know\nthat the messages might be out of order.\n\n278\n00:12:27.330 --> 00:12:29.730\nSo when we receive them,\nthey've got to be kind of rearranged and\n\n279\n00:12:29.730 --> 00:12:31.330\napplied in the proper order.\n\n280\n00:12:31.330 --> 00:12:34.720\nSo, there is some work that has to\nbe done on our application side but\n\n281\n00:12:34.720 --> 00:12:37.930\nthe tradeoff is we get guaranteed\ndelivery of the messages and\n\n282\n00:12:37.930 --> 00:12:39.360\nwe know we're not going to lose data.\n\n283\n00:12:39.360 --> 00:12:44.330\nAnd that's really important when you're\ndealing with mission critical or even life\n\n284\n00:12:44.330 --> 00:12:49.610\nthreatening type records and information\na queueing service is super important.\n\n285\n00:12:49.610 --> 00:12:52.360\nAnd, some people call it a broker,\na message broker service.\n\n286\n00:12:52.360 --> 00:12:54.950\nBut the queuing service is\nprobably the more common name.\n\n287\n00:12:54.950 --> 00:12:57.570\nAnd Amazon's is simply\nthe simple queue service, and\n\n288\n00:12:57.570 --> 00:13:00.890\nit does a great job of what it does.\n\n289\n00:13:00.890 --> 00:13:04.680\nAll right, so when we set this up,\nwe had these visibility timeouts\n\n290\n00:13:04.680 --> 00:13:09.290\nI do want to mention another type\nof queue that you might see pop-up\n\n291\n00:13:09.290 --> 00:13:13.030\nthat people confuse with this a lot\ncalled the delay queue, all right?\n\n292\n00:13:13.030 --> 00:13:16.250\nA delay queue is different from\na visibility timeout although they\n\n293\n00:13:16.250 --> 00:13:18.680\nkind of do the same thing\nthey both hide a message.\n\n294\n00:13:18.680 --> 00:13:20.750\nBut the visibility timeout,\n\n295\n00:13:20.750 --> 00:13:24.590\nthat's hiding the message as soon as it's\nretrieved to prevent duplicate efforts.\n\n296\n00:13:24.590 --> 00:13:27.990\nA delay queue hides a message also.\n\n297\n00:13:27.990 --> 00:13:31.110\nBut it's doing it to introduce a delay for\nsome reason,\n\n298\n00:13:31.110 --> 00:13:33.210\nsome business logic reason that you have.\n\n299\n00:13:33.210 --> 00:13:37.670\nAnd delay queues take effect right\naway the moment a message gets\n\n300\n00:13:37.670 --> 00:13:40.270\ndropped into a delay queue It's hidden for\n\n301\n00:13:40.270 --> 00:13:44.340\nwhatever time that delay is set for\nright and nobody sees it.\n\n302\n00:13:44.340 --> 00:13:46.450\nIt drops in the queue and\nit sits there and waits.\n\n303\n00:13:46.450 --> 00:13:50.820\nNobody sees it until that delay interval\nis up and then it becomes visible again.\n\n304\n00:13:50.820 --> 00:13:54.080\nSo, you might use both,\nwell you kinda have to use both.\n\n305\n00:13:54.080 --> 00:13:56.950\nIf you have a delay queue,\nit has a visibility time out also for\n\n306\n00:13:56.950 --> 00:13:58.630\nwhen the first person retrieves it.\n\n307\n00:13:58.630 --> 00:14:00.220\nSo it is a little different.\n\n308\n00:14:00.220 --> 00:14:01.570\nThe thing to remember here, and\n\n309\n00:14:01.570 --> 00:14:05.020\nit's really just something that you have\nto memorize, is that visibility timeouts\n\n310\n00:14:05.020 --> 00:14:09.880\ndon't start until the first component\nretrieves it, right, the first person\n\n311\n00:14:09.880 --> 00:14:14.640\nretrieves it from the queue versus a delay\nqueue, its time out starts right away.\n\n312\n00:14:14.640 --> 00:14:16.700\nThe moment a message goes in there,\nthe delay kicks in.\n\n313\n00:14:16.700 --> 00:14:19.860\nSo, two different things\nthat both hide the message.\n\n314\n00:14:19.860 --> 00:14:20.740\n&gt;&gt; All right, Don,\n\n315\n00:14:20.740 --> 00:14:24.730\nlet's talk about how the heck do we\nget these things actually working?\n\n316\n00:14:24.730 --> 00:14:25.255\nRight?\n&gt;&gt; [LAUGH]\n\n317\n00:14:25.255 --> 00:14:26.875\n&gt;&gt; We talked about what we can do with\n\n318\n00:14:26.875 --> 00:14:28.540\nthem and how they work.\n\n319\n00:14:28.540 --> 00:14:31.420\nBut, now okay, you've sold me on it.\n\n320\n00:14:31.420 --> 00:14:32.330\nLet's implement that.\n\n321\n00:14:32.330 --> 00:14:32.980\nHow's that done?\n\n322\n00:14:32.980 --> 00:14:36.310\n&gt;&gt; Okay, so, first thing we need to do\nis we need to create a queue, right?\n\n323\n00:14:36.310 --> 00:14:37.980\nAnd you can create as many\nqueues as you want but\n\n324\n00:14:37.980 --> 00:14:42.360\nthe reality is a single queue can handle\nmessages for any number of apps, right?\n\n325\n00:14:42.360 --> 00:14:45.520\nYou can have applications set to look\nall at the same queue but look for\n\n326\n00:14:45.520 --> 00:14:49.660\ndifferent identities to say this is\nthe type of message that I'm looking for,\n\n327\n00:14:49.660 --> 00:14:51.060\nI will ignore this other messages.\n\n328\n00:14:51.060 --> 00:14:56.070\nSo, you may find that one queue is enough\nto power all of your applications or\n\n329\n00:14:56.070 --> 00:14:58.640\nfor monitoring and reporting in trouble\nshooting say key you might have used\n\n330\n00:14:58.640 --> 00:14:59.720\nseparated queue for separated things.\n\n331\n00:14:59.720 --> 00:15:01.180\nBut the first step is creating a queue.\n\n332\n00:15:01.180 --> 00:15:05.190\nSo, I'm log in to my AWS council and\nI went to Simple Queue Service.\n\n333\n00:15:05.190 --> 00:15:07.960\nI can just hit get started now,\nso it'll be my first queue.\n\n334\n00:15:07.960 --> 00:15:12.480\nWhen you create a queue, the main thing\nthat you have to provide is really just\n\n335\n00:15:12.480 --> 00:15:14.200\none thing, and that's the queue name.\n\n336\n00:15:14.200 --> 00:15:15.950\nThe queue name is\nthe identity of the queue,\n\n337\n00:15:15.950 --> 00:15:18.160\nand it needs to be unique\nwithin your account.\n\n338\n00:15:18.160 --> 00:15:21.630\nYou can use a name that somebody else\nis using in a different account.\n\n339\n00:15:21.630 --> 00:15:28.910\nI might call this my stock,\nI can spell, stock Trade queue, right?\n\n340\n00:15:28.910 --> 00:15:32.140\nSo, any stock trade I'm gonna run\nthrough this queue right here.\n\n341\n00:15:32.140 --> 00:15:35.530\nAnd it's tied to\nthe US East North Virgina region\n\n342\n00:15:35.530 --> 00:15:37.560\nbecause that's what I'm set\nto in my panel up here.\n\n343\n00:15:37.560 --> 00:15:40.050\nSo, if I changed that it'd\nbe in a different region.\n\n344\n00:15:40.050 --> 00:15:42.290\nAnd then down here we start to see all\nthe different things that we can tweak.\n\n345\n00:15:42.290 --> 00:15:44.730\nBut the reality is you don't\nhave to change any of them.\n\n346\n00:15:44.730 --> 00:15:47.690\nYou can just go right down and\nhit create queue.\n\n347\n00:15:47.690 --> 00:15:50.170\nAnd when you create that queue,\nnow I've got a queue?\n\n348\n00:15:51.220 --> 00:15:52.130\nIt's done, right?\n\n349\n00:15:52.130 --> 00:15:53.120\nSo now I've got the queue.\n\n350\n00:15:53.120 --> 00:15:55.147\n&gt;&gt; It seemed a whole lot complex\nthan that as you were explaining it.\n\n351\n00:15:55.147 --> 00:15:57.524\n[LAUGH]\n&gt;&gt; It is the simple queue [INAUDIBLE].\n\n352\n00:15:57.524 --> 00:15:58.158\n&gt;&gt; Yeah, that's true.\n\n353\n00:15:58.158 --> 00:16:01.217\n&gt;&gt; The reality is that creating a queue is\nthe easy part Now, comes the hard part.\n\n354\n00:16:01.217 --> 00:16:04.396\nThe hard part is how to get my\napplication to use the queue.\n\n355\n00:16:04.396 --> 00:16:07.006\nAnd so,\nthat means I got to do a lot of dev work.\n\n356\n00:16:07.006 --> 00:16:10.816\nI'm gonna go and\nget the simple queue servers SDK.\n\n357\n00:16:10.816 --> 00:16:14.701\nIt is part of the AWS SDK, so that I can\ndo the software development to get my\n\n358\n00:16:14.701 --> 00:16:18.358\napplication to use it and\nnot just one application, but both sides.\n\n359\n00:16:18.358 --> 00:16:21.245\nIf it's an application and\na database or if it's two applications,\n\n360\n00:16:21.245 --> 00:16:23.153\nthey both have to start\nlooking to the queue.\n\n361\n00:16:23.153 --> 00:16:26.268\nOne has to be depositing\nmessages in the queue.\n\n362\n00:16:26.268 --> 00:16:28.870\nThe other has to be retrieving\nmessages from the queue.\n\n363\n00:16:28.870 --> 00:16:31.810\nSo I've got to create that and that's\nreally where a lot of the work is going to\n\n364\n00:16:31.810 --> 00:16:33.270\ncome in and when you look you'll see.\n\n365\n00:16:33.270 --> 00:16:36.319\nYou've got a URL right here for\nthe queue and\n\n366\n00:16:36.319 --> 00:16:42.341\nyou can use permissions to determine who's\nallowed to deposit messages in the queue,\n\n367\n00:16:42.341 --> 00:16:46.876\nand then you can define your other\npolicies as far as who's able to\n\n368\n00:16:46.876 --> 00:16:51.934\nretrieve the messages from the queue,\nand your monitoring, and so on.\n\n369\n00:16:51.934 --> 00:16:55.599\nSo you can start to designate a lot\nof that information right here and\n\n370\n00:16:55.599 --> 00:16:57.347\nit's pretty easy on this side.\n\n371\n00:16:57.347 --> 00:16:59.764\nThe queue itself is easy.\n\n372\n00:16:59.764 --> 00:17:03.761\nOn your application, what you're gonna\nhave to do is determine how your message\n\n373\n00:17:03.761 --> 00:17:06.539\nis built up and\nthe message is made up of two components.\n\n374\n00:17:06.539 --> 00:17:09.219\nWe have the messages identity itself.\n\n375\n00:17:09.219 --> 00:17:14.780\nSo, every message has\nthe message metadata.\n\n376\n00:17:14.780 --> 00:17:18.174\nThe official terms are the message\nbody and the message attributes.\n\n377\n00:17:18.174 --> 00:17:20.124\nSo the message body, that's the payload.\n\n378\n00:17:20.124 --> 00:17:25.841\nIf this is a stock trade, it's a message\nsaying this account put in a sell order.\n\n379\n00:17:25.841 --> 00:17:28.368\nAt this time,\nthis amount of stock and so on.\n\n380\n00:17:28.368 --> 00:17:30.542\nOr if it's a withdrawal\nfrom a bank account,\n\n381\n00:17:30.542 --> 00:17:33.468\nthis account number withdrew\nthis amount of money and so on.\n\n382\n00:17:33.468 --> 00:17:37.539\nThat's the message body and the message\nbody can be anything you want it to be,\n\n383\n00:17:37.539 --> 00:17:39.337\nit's whatever you're pushing.\n\n384\n00:17:39.337 --> 00:17:42.101\nMaybe you're writing software for\npowering an x-ray machine.\n\n385\n00:17:42.101 --> 00:17:44.023\nAnd so it just did a digital x-ray and\n\n386\n00:17:44.023 --> 00:17:47.750\nwe're submitting the x-ray image\ninto our document imaging system.\n\n387\n00:17:47.750 --> 00:17:50.097\nSo, the message body is the image.\n\n388\n00:17:50.097 --> 00:17:54.509\nWell, in addition to that, we have to have\nthe message attributes that identify what\n\n389\n00:17:54.509 --> 00:17:57.412\nthat message is and\nyou can define up to ten attributes.\n\n390\n00:17:57.412 --> 00:17:59.827\nWe're usually gonna have at\nleast one that's kind of a name.\n\n391\n00:17:59.827 --> 00:18:01.849\nWhat is the name of this message?\n\n392\n00:18:01.849 --> 00:18:05.149\nBut then after that, you can have\nattributes that identify all sorts of\n\n393\n00:18:05.149 --> 00:18:07.625\nthings and it can be what\napplication it's tied to and\n\n394\n00:18:07.625 --> 00:18:11.270\nwe can use that application to share one\nqueue with more than one application.\n\n395\n00:18:11.270 --> 00:18:13.425\nIt can be the identity of who created it.\n\n396\n00:18:13.425 --> 00:18:14.408\nIt can be all sorts of different things.\n\n397\n00:18:14.408 --> 00:18:16.982\nIt's up to you to determine what\nyou want those attributes to be.\n\n398\n00:18:16.982 --> 00:18:19.635\nThat's all deposited in that message and\n\n399\n00:18:19.635 --> 00:18:22.600\nthen the message is\ndropped here in the queue.\n\n400\n00:18:22.600 --> 00:18:23.810\nAnd then somewhere else,\n\n401\n00:18:23.810 --> 00:18:27.551\nwe have an application that's monitoring\nthis queue and retrieving that data.\n\n402\n00:18:27.551 --> 00:18:31.218\nAnd using the metadata, using the message\nattributes to figure out what to do with\n\n403\n00:18:31.218 --> 00:18:34.528\nit and then taking that payload and\ndepositing it wherever it needs to be.\n\n404\n00:18:34.528 --> 00:18:36.284\nMaybe it's goes right into a database or\n\n405\n00:18:36.284 --> 00:18:39.397\nmaybe gets processed through some\nworkflow, or something like that.\n\n406\n00:18:39.397 --> 00:18:42.964\n&gt;&gt; So Don, it's sounding like if we want\nto use the queuing service, we definitely\n\n407\n00:18:42.964 --> 00:18:46.487\nare probably developing an app that is\ngoing to implement the queuing service.\n\n408\n00:18:46.487 --> 00:18:50.696\nI'm not going to go grab Outlook or\nsomething off the shelf [LAUGH] item and\n\n409\n00:18:50.696 --> 00:18:55.320\nemploy that using the queuing service,\nwe have to develop that to work with it.\n\n410\n00:18:55.320 --> 00:18:56.819\n&gt;&gt; Pretty much.\n\n411\n00:18:56.819 --> 00:19:00.041\nThere are a couple solutions inside\nof AWS that have native support for\n\n412\n00:19:00.041 --> 00:19:02.016\nthe queue service and you can activate it.\n\n413\n00:19:02.016 --> 00:19:04.352\nYou'll see it in some elastic\nbean stalk project and\n\n414\n00:19:04.352 --> 00:19:07.925\nfew other things like that you can deploy\nwhere they'll leverage it directly.\n\n415\n00:19:07.925 --> 00:19:10.634\nBut normally,\nit's gonna require some interaction and\n\n416\n00:19:10.634 --> 00:19:14.020\nthe reality is if you have an application,\nyou need a queuing service,\n\n417\n00:19:14.020 --> 00:19:16.463\nthen you create the application\nyourself anyway.\n\n418\n00:19:16.463 --> 00:19:19.767\nSomebody else wrote the application\nthey likely already have there own\n\n419\n00:19:19.767 --> 00:19:23.250\nqueuing service they're leveraging or\nthey're Leveraging databases.\n\n420\n00:19:23.250 --> 00:19:24.401\nIt really is a great solution.\n\n421\n00:19:24.401 --> 00:19:25.003\n&gt;&gt; Awesome.\n\n422\n00:19:25.003 --> 00:19:27.637\nDon, is there any other features,\nmiscellaneous events,\n\n423\n00:19:27.637 --> 00:19:30.542\ncool stuff that you just want to\ntell us about when it comes to this?\n\n424\n00:19:30.542 --> 00:19:34.329\n&gt;&gt; Yeah, when I went to create that queue,\nI kind of just went to the easy route with\n\n425\n00:19:34.329 --> 00:19:37.460\nthe defaults, but there was a lot\nmore information you'll see.\n\n426\n00:19:37.460 --> 00:19:39.615\nAnd most of it,\nI talked about, for example,\n\n427\n00:19:39.615 --> 00:19:41.564\nif you look like the visibility time out.\n\n428\n00:19:41.564 --> 00:19:44.694\nWe can see it right there,\nso I can define that.\n\n429\n00:19:44.694 --> 00:19:48.207\nIt's 30 seconds by default, you can\nchange it to whatever you want it to be.\n\n430\n00:19:48.207 --> 00:19:52.166\nMaybe if you know that your application\nshould be able to process in five seconds\n\n431\n00:19:52.166 --> 00:19:56.243\nor less, then you don't necessarily want\na visibility time out of 30 seconds if\n\n432\n00:19:56.243 --> 00:19:59.161\nyou know within five seconds\nwhether it's failed or not.\n\n433\n00:19:59.161 --> 00:20:03.604\nSo you might wanna set a shorter interval\nto minimize the delay in processing that\n\n434\n00:20:03.604 --> 00:20:04.201\nmessage.\n\n435\n00:20:04.201 --> 00:20:05.751\nYou might wanna go longer.\n\n436\n00:20:05.751 --> 00:20:09.953\nMaybe I know that it takes a longer\noperation to find out whether something\n\n437\n00:20:09.953 --> 00:20:11.053\nactually failed.\n\n438\n00:20:11.053 --> 00:20:12.735\nAnd so, I put in a delay there.\n\n439\n00:20:12.735 --> 00:20:14.364\nI mentioned delay queues.\n\n440\n00:20:14.364 --> 00:20:16.174\nAny queue can be a delay queue.\n\n441\n00:20:16.174 --> 00:20:18.137\nYou just come down here and\nyou set a delivery delay.\n\n442\n00:20:18.137 --> 00:20:21.523\nRemember that these take effect\nright away and notice the maximum?\n\n443\n00:20:21.523 --> 00:20:23.340\nThe maximum delay is 15 minutes.\n\n444\n00:20:23.340 --> 00:20:25.608\nYou can't delay a message\nmore than 15 minutes.\n\n445\n00:20:25.608 --> 00:20:26.844\nSo, that's important.\n\n446\n00:20:26.844 --> 00:20:29.747\nIf you need to delay more than 15 minutes,\n\n447\n00:20:29.747 --> 00:20:33.362\nthat's a tough one to think\nof a use case scenario for.\n\n448\n00:20:33.362 --> 00:20:34.258\n&gt;&gt; That's a heck of a delay.\n\n449\n00:20:34.258 --> 00:20:36.106\n[LAUGH]\n&gt;&gt; You'd need to enforce that delay\n\n450\n00:20:36.106 --> 00:20:37.651\nthrough your application.\n\n451\n00:20:37.651 --> 00:20:39.532\nYeah, some of the other things you can do,\n\n452\n00:20:39.532 --> 00:20:43.054\nthings like receive message wait time\nwhen somebody goes to receive a message.\n\n453\n00:20:43.054 --> 00:20:43.708\nHow long of a wait.\n\n454\n00:20:43.708 --> 00:20:48.237\nNow that they call it right here\nreceive message wait time, but\n\n455\n00:20:48.237 --> 00:20:53.463\nit's also known as what's called a long\npoll when you go to poll a queue.\n\n456\n00:20:53.463 --> 00:20:55.309\nSo if I'm the receiver on this thing,\n\n457\n00:20:55.309 --> 00:20:57.849\nif I'm gonna be receiving\nmessages from the queue,\n\n458\n00:20:57.849 --> 00:21:01.910\nI need to look to the queue every so often\nto say, hey, give me any messages you got.\n\n459\n00:21:01.910 --> 00:21:03.885\nWhat's new, you're gonna share it with me.\n\n460\n00:21:03.885 --> 00:21:05.950\nWell, how often do we poll?\n\n461\n00:21:05.950 --> 00:21:07.885\nYou could poll every five seconds.\n\n462\n00:21:07.885 --> 00:21:10.991\nYou could poll and if I had 30\nfront-ends all pulling every 5 seconds,\n\n463\n00:21:10.991 --> 00:21:13.007\nthat's a lot of CPU,\nit's a lot of resources.\n\n464\n00:21:13.007 --> 00:21:14.265\nSo, it's not terribly efficient.\n\n465\n00:21:14.265 --> 00:21:18.248\nSo what you can do is you can set up a\nlong pull, where they do still poll, they\n\n466\n00:21:18.248 --> 00:21:22.577\nreach out to the queue and say, hey, show\nme what's new, but then they hang out.\n\n467\n00:21:22.577 --> 00:21:24.206\nHang around.\nYou ever have an awkward conversation\n\n468\n00:21:24.206 --> 00:21:24.721\nwith somebody?\n\n469\n00:21:24.721 --> 00:21:27.451\nYou think the conversation is over and\nthey just keep standing there?\n\n470\n00:21:27.451 --> 00:21:28.177\n&gt;&gt; With you every day.\n\n471\n00:21:28.177 --> 00:21:30.622\n[LAUGH]\n&gt;&gt; It's what we do.\n\n472\n00:21:30.622 --> 00:21:32.718\nSo, that's what the long poll is.\n\n473\n00:21:32.718 --> 00:21:35.746\nIt's that awkward moment your application\nis like, I'm just gonna hang around just\n\n474\n00:21:35.746 --> 00:21:38.748\nin case something interesting happens and\nit can hang around for up to 20 seconds.\n\n475\n00:21:38.748 --> 00:21:42.842\nAnd that way, instead of just a one\ntime hey, give me what's new, it's hey,\n\n476\n00:21:42.842 --> 00:21:43.598\nlet's talk.\n\n477\n00:21:43.598 --> 00:21:44.799\nHow are things?\n\n478\n00:21:44.799 --> 00:21:47.205\nHey, how's the wife and kids?\n\n479\n00:21:47.205 --> 00:21:48.623\nYou watch the football game last night?\n\n480\n00:21:48.623 --> 00:21:53.259\nAnd 20 seconds go by, then any message\nthat came in in that 20 second period,\n\n481\n00:21:53.259 --> 00:21:56.001\nwe now receive as part\nof 1 polling operation.\n\n482\n00:21:56.001 --> 00:21:59.195\nAnd then we just turn right around and\nwe pull again, and we hang out for\n\n483\n00:21:59.195 --> 00:22:00.234\ntwenty more seconds.\n\n484\n00:22:00.234 --> 00:22:01.921\nHey, I have some more free time.\n\n485\n00:22:01.921 --> 00:22:03.408\nWhat are you doing?\n\n486\n00:22:03.408 --> 00:22:03.959\nNo, you hang up.\n\n487\n00:22:03.959 --> 00:22:05.787\n&gt;&gt; How about that sports team?\n\n488\n00:22:05.787 --> 00:22:07.409\n&gt;&gt; Go local sports team.\n\n489\n00:22:07.409 --> 00:22:09.339\nSo, that's what a long poll is and\n\n490\n00:22:09.339 --> 00:22:12.415\nit really does make things\nmore efficient CPU-wise.\n\n491\n00:22:12.415 --> 00:22:13.963\nNow if you don't care\nabout CPU then who cares,\n\n492\n00:22:13.963 --> 00:22:15.132\nthen leave it at zero and off you go.\n\n493\n00:22:15.132 --> 00:22:19.184\nThat is the default, but you can conserve\nresources by doing a long pull and\n\n494\n00:22:19.184 --> 00:22:21.305\ngather more than one message at a time or\n\n495\n00:22:21.305 --> 00:22:24.097\ngrab a bigger batch of\nmessages to process at once.\n\n496\n00:22:24.097 --> 00:22:26.022\nSo, that's another option.\n\n497\n00:22:26.022 --> 00:22:29.946\nThe maximum message size is 256 kilobytes.\n\n498\n00:22:29.946 --> 00:22:31.115\nAnd if you look, well,\n\n499\n00:22:31.115 --> 00:22:34.518\nthat's actually the maximum message\nsize supported by the system.\n\n500\n00:22:34.518 --> 00:22:38.074\nSo it's already setup to guarantee\nthe largest message size possible, so\n\n501\n00:22:38.074 --> 00:22:39.944\nwe don't normally have to tweak that.\n\n502\n00:22:39.944 --> 00:22:42.749\nBut if you know that you're gonna\nbe handling smaller messages,\n\n503\n00:22:42.749 --> 00:22:45.460\nyou can actually shrink that down,\nit'll enforce the limit.\n\n504\n00:22:45.460 --> 00:22:46.815\nMost people never mess with this.\n\n505\n00:22:46.815 --> 00:22:50.446\nBecause if you're sending 32k messages,\nthat's fine.\n\n506\n00:22:50.446 --> 00:22:52.941\nIt's okay and\nyou just leave it with the 256 maximum.\n\n507\n00:22:52.941 --> 00:22:55.988\nBut if you need to enforce it for some\nreason, you can do it from right here.\n\n508\n00:22:55.988 --> 00:22:59.927\nThe message retention period is another\nthing where the messages are going to be\n\n509\n00:22:59.927 --> 00:23:01.414\nretained for up to four days.\n\n510\n00:23:01.414 --> 00:23:05.401\nIf I have a failure and I don't fix it\nin four days, what's going to happen?\n\n511\n00:23:05.401 --> 00:23:06.770\nI'm gonna lose those records.\n\n512\n00:23:06.770 --> 00:23:09.721\nSo I can bump it all the way\nup to 14 days, if need be.\n\n513\n00:23:09.721 --> 00:23:13.468\nBut after that,\nI've got some significant failure and\n\n514\n00:23:13.468 --> 00:23:16.504\nthat's something that we can't live past.\n\n515\n00:23:16.504 --> 00:23:20.360\nNow remember, if you're thinking it's only\n14 days, what kind of garbage is that?\n\n516\n00:23:20.360 --> 00:23:23.972\nRemember that the queue is\nguaranteed delivery intended for\n\n517\n00:23:23.972 --> 00:23:26.032\nmission critical applications.\n\n518\n00:23:26.032 --> 00:23:29.807\nIf you have a mission critical application\nand it's been down for 14 days,\n\n519\n00:23:29.807 --> 00:23:31.099\nyou're out of business.\n\n520\n00:23:31.099 --> 00:23:35.292\nThat's the definition of mission critical\nor people are dead and the lawsuits\n\n521\n00:23:35.292 --> 00:23:39.629\nare gonna be far more important to you\nthan whatever your queue recovery plan is.\n\n522\n00:23:39.629 --> 00:23:43.364\nSo, 14 days is kind of ridiculous\non something like this.\n\n523\n00:23:43.364 --> 00:23:46.302\nThat if you have a failure these\nemission critical systems,\n\n524\n00:23:46.302 --> 00:23:49.424\nyour failure should be limited to\nreally a matter of hours tops.\n\n525\n00:23:49.424 --> 00:23:51.429\nDepending on what your critically is.\n\n526\n00:23:51.429 --> 00:23:54.854\nSo it can be as little as one minute\nthough, we can shrink that retention\n\n527\n00:23:54.854 --> 00:23:58.518\nperiod down now and that's gonna make\nmessages exit our queue a lot faster.\n\n528\n00:23:58.518 --> 00:24:03.189\nAll right, so those are all different\nthings that we can kinda tweak.\n\n529\n00:24:03.189 --> 00:24:07.580\n[COUGH] And there's one more thing,\nwhich is down here, I should mention.\n\n530\n00:24:07.580 --> 00:24:08.510\nDead letter queues.\n\n531\n00:24:09.940 --> 00:24:11.315\nWhat if a message fails to process?\n\n532\n00:24:11.315 --> 00:24:12.520\nRight?\n\n533\n00:24:12.520 --> 00:24:16.940\nI get a message, and maybe it's missing\nsome attributes, or the message body is\n\n534\n00:24:16.940 --> 00:24:20.325\njust corrupt, or something, and something\nhappens and I can't deal with the message.\n\n535\n00:24:20.325 --> 00:24:23.660\nWhen an error gets returned to the\napplication that submitted the message.\n\n536\n00:24:23.660 --> 00:24:27.000\nSo, if the application designed\nto handle it, then we're good.\n\n537\n00:24:27.000 --> 00:24:29.570\nBut what if the application\nisn't designed to handle it?\n\n538\n00:24:29.570 --> 00:24:32.600\nWell, then the application\njust ignores it usually and\n\n539\n00:24:32.600 --> 00:24:34.350\nwe might not even know what happened.\n\n540\n00:24:34.350 --> 00:24:38.980\nSo now, I've got a message that had\nsupposedly guaranteed delivery.\n\n541\n00:24:38.980 --> 00:24:42.480\nBut didn't deliver and\nmy application didn't tell me, right?\n\n542\n00:24:42.480 --> 00:24:43.510\nIt's not the queue's fault.\n\n543\n00:24:43.510 --> 00:24:45.180\nThere was a problem with the message.\n\n544\n00:24:45.180 --> 00:24:47.900\nIt's our application's fault for\nnot being able to handle the error, right?\n\n545\n00:24:47.900 --> 00:24:50.870\nSo, what you can do is you can\nconfigure a dead letter queue.\n\n546\n00:24:50.870 --> 00:24:53.270\nA dead letter queue says,\nif a message fails to process for\n\n547\n00:24:53.270 --> 00:24:56.960\nany reason, store a copy of it over\nhere in this dead letter queue.\n\n548\n00:24:56.960 --> 00:25:00.440\nAnd that way, you can go in and\nyou can look in that dead letter queue and\n\n549\n00:25:00.440 --> 00:25:03.210\nsee any failed message and figure out why.\n\n550\n00:25:03.210 --> 00:25:04.750\nWhy did it fail?\n\n551\n00:25:04.750 --> 00:25:06.850\nYou thought it was delivered,\nthe application didn't recognize it.\n\n552\n00:25:06.850 --> 00:25:10.520\nLet me find out why, okay, let me go\nupdate my application to account for\n\n553\n00:25:10.520 --> 00:25:11.140\nthis new scenario.\n\n554\n00:25:11.140 --> 00:25:13.200\nWhen you are doing testing and\ndevelopment,\n\n555\n00:25:13.200 --> 00:25:15.844\na dead letter queue is darn near required.\n\n556\n00:25:15.844 --> 00:25:20.370\nI mean, it is so many errors you\ngot to anticipate and plan for.\n\n557\n00:25:20.370 --> 00:25:22.400\nOnce you go into production of\nthis might be something you just\n\n558\n00:25:22.400 --> 00:25:23.670\nturn on during troubleshooting.\n\n559\n00:25:23.670 --> 00:25:25.510\nOr it might be something\nyou leave on all the time.\n\n560\n00:25:25.510 --> 00:25:28.450\nBut getting one of these configured\nis really just a matter of having\n\n561\n00:25:28.450 --> 00:25:32.930\na second queue, and the message is dumped\nover in there, and there'll be stored, and\n\n562\n00:25:32.930 --> 00:25:34.290\nyou can retrieve them and troubleshoot.\n\n563\n00:25:34.290 --> 00:25:36.730\nSo, it's another\ntechnology just available.\n\n564\n00:25:36.730 --> 00:25:38.650\nThe only other, like a dance feature,\n\n565\n00:25:38.650 --> 00:25:41.870\nI have to mention,\nis that SQS fully supports IAM.\n\n566\n00:25:41.870 --> 00:25:43.820\nThe Identity and Access Management.\n\n567\n00:25:43.820 --> 00:25:47.450\nSo, you can create IAM policies that\ndictate who's allowed to put things in\n\n568\n00:25:47.450 --> 00:25:48.810\nthe queue, and\ntake things out of the queue.\n\n569\n00:25:48.810 --> 00:25:52.320\nYou could restrict by IP address,\nyou can do all sorts of authentication\n\n570\n00:25:52.320 --> 00:25:56.170\nby using IAM, that we're\ntypically already integrated with.\n\n571\n00:25:56.170 --> 00:25:59.576\nSo, if you're using the AWSSDK,\nit's super easy to tap into that and\n\n572\n00:25:59.576 --> 00:26:02.581\nlet your applications authenticate,\nas well as the sysops,\n\n573\n00:26:02.581 --> 00:26:06.080\nthe people who are managing the system,\nthey can control there, too.\n\n574\n00:26:06.080 --> 00:26:08.230\nSo, it's fully integrated with IAM.\n\n575\n00:26:08.230 --> 00:26:08.825\n&gt;&gt; All right.\n\n576\n00:26:08.825 --> 00:26:15.030\nIt seems like the simple queueing system\nor service is the unsung hero of AWS.\n\n577\n00:26:15.030 --> 00:26:18.498\nAnd now, that we know it's there maybe you\nwant to employ and start working with it.\n\n578\n00:26:18.498 --> 00:26:21.050\nAt least you need to know it for\nthe exam, that's for sure.\n\n579\n00:26:21.050 --> 00:26:23.010\nSo, learn everything you can,\ndon't know about it, and\n\n580\n00:26:23.010 --> 00:26:26.370\nthen if you do need to use it, well, you\nat least have some familiarity with that\n\n581\n00:26:26.370 --> 00:26:28.140\nto get your feet wet and\nstart working with it.\n\n582\n00:26:28.140 --> 00:26:31.580\nDon, thanks so much for dropping by today\nand explaining that service for us.\n\n583\n00:26:31.580 --> 00:26:34.150\nI'm looking at the clock though,\nit's about that time for us to sign off.\n\n584\n00:26:34.150 --> 00:26:36.200\nWe do appreciate our viewers for\njoining us.\n\n585\n00:26:36.200 --> 00:26:39.030\nSigning off for ITProTV,\nI've been your host, Daniel Lowrie.\n\n586\n00:26:39.030 --> 00:26:39.650\n&gt;&gt; And I'm Don Pezet.\n\n587\n00:26:39.650 --> 00:26:41.557\n&gt;&gt; And we'll see you next time\n\n588\n00:26:41.557 --> 00:26:47.456\n[MUSIC].\n\n589\n00:26:47.456 --> 00:26:53.929\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "207818492"
        },
        {
          "description": "In this episode, Daniel and Don explore the Amazon Simple Workflow Service in AWS. They start by defining SWS, what it is and where it's used. Next, they walk you through the specifics such as Workflows, Actors, and Tasks. Finally, they look at advanced functions like Task Lists, Long Polling, and Closure.",
          "length": "1340",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-2-amazon_simple_workflow_service-030917.00_24_40_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-2-amazon_simple_workflow_service-030917.00_24_40_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-2-amazon_simple_workflow_service-030917.00_24_40_17.Still001-sm.jpg",
          "title": "Amazon Simple Workflow Service",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:02.745\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.745 --> 00:00:08.409\n[CROSSTALK]\n\n3\n00:00:08.409 --> 00:00:12.200\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.200 --> 00:00:13.714\n&gt;&gt; All right, greetings everyone.\n\n5\n00:00:13.714 --> 00:00:16.861\nAnd welcome to another\ngreat episode of ITProTV.\n\n6\n00:00:16.861 --> 00:00:20.147\nI'm your host, Daniel Lowrie,\nand we are back with more of our\n\n7\n00:00:20.147 --> 00:00:23.860\nAWS Certified Solutions Architect,\nAssociate level series.\n\n8\n00:00:23.860 --> 00:00:27.157\nAnd joining us in the studio yet again,\nour good friend and mentor, Mr. Don Pezet.\n\n9\n00:00:27.157 --> 00:00:28.704\nDon, welcome back sir,\nhow's it going today?\n\n10\n00:00:28.704 --> 00:00:31.900\n&gt;&gt; Thanks for having me back Daniel, ready\nto dive right back into the world of AWS.\n\n11\n00:00:31.900 --> 00:00:32.700\nAnd in this episode,\n\n12\n00:00:32.700 --> 00:00:36.560\nwe're gonna be taking a look at well,\nthe Simple Workflow Service.\n\n13\n00:00:36.560 --> 00:00:40.602\nAmazon Simple Workflow, which is a very,\nvery powerful service that sits in\n\n14\n00:00:40.602 --> 00:00:43.472\nthe background that can do,\njust really can do magic.\n\n15\n00:00:43.472 --> 00:00:46.536\n[LAUGH] It's really amazing that they, the\namount of different things that we can do\n\n16\n00:00:46.536 --> 00:00:49.880\nwith it, if we sit down, implement it, and\nget it put in place in our environment.\n\n17\n00:00:49.880 --> 00:00:53.010\nA lot of people have business and\nworkplace logic they've got to implement.\n\n18\n00:00:53.010 --> 00:00:55.970\nAnd the Simple Workflow Service is\nthe one that's gonna do that for us.\n\n19\n00:00:55.970 --> 00:00:58.700\nSo Amazon SWF is what\nwe're gonna be focused on.\n\n20\n00:00:58.700 --> 00:01:00.178\n&gt;&gt; Well, Don I'm super excited,\n\n21\n00:01:00.178 --> 00:01:03.204\nI can't wait to see how\nthe Workflow Service saws people in half.\n\n22\n00:01:03.204 --> 00:01:06.508\nMakes rabbits appear, cuz you said\nit was magic so, and I love magic so\n\n23\n00:01:06.508 --> 00:01:07.748\nI'm ready for the magic.\n\n24\n00:01:07.748 --> 00:01:08.889\nNo [LAUGH].\n\n25\n00:01:08.889 --> 00:01:11.375\n&gt;&gt; I know you're joking but\nI think you can actually do those things.\n\n26\n00:01:11.375 --> 00:01:12.185\n&gt;&gt; This would be awesome.\n\n27\n00:01:12.185 --> 00:01:14.914\n[LAUGH]\n&gt;&gt; [LAUGH] One day we gotta make that\n\n28\n00:01:14.914 --> 00:01:18.456\nshow, all right ladies and gentlemen\nwe gotta see that, that'll be fun.\n\n29\n00:01:18.456 --> 00:01:22.040\nBut no, all seriousness what\nis the Workflow Service,\n\n30\n00:01:22.040 --> 00:01:26.170\nwhat are the basics of it,\nhelp us the uninitiated get our feet wet.\n\n31\n00:01:26.170 --> 00:01:29.410\n&gt;&gt; All right, let's talk about\nlike a generic web application.\n\n32\n00:01:29.410 --> 00:01:34.428\nI might go to a website and\nI type in some values in a form.\n\n33\n00:01:34.428 --> 00:01:36.810\nAnd I hit a button and\nit outputs some data, right.\n\n34\n00:01:36.810 --> 00:01:41.049\nSo maybe I'm calculating a golf score,\nso I'm putting in all of my horrible,\n\n35\n00:01:41.049 --> 00:01:44.085\nhorrible score on each hole\ncuz I'm a terrible golfer.\n\n36\n00:01:44.085 --> 00:01:45.126\n&gt;&gt; Plus seven.\n\n37\n00:01:45.126 --> 00:01:50.045\n&gt;&gt; [LAUGH] And I hit the calculate button\nand it tells you my score is 212 over par.\n\n38\n00:01:50.045 --> 00:01:51.019\n[LAUGH]\n&gt;&gt; Doing better.\n\n39\n00:01:51.019 --> 00:01:52.430\n&gt;&gt; [LAUGH] I know.\n\n40\n00:01:52.430 --> 00:01:56.570\nSo I do my golf score in terms\nof how many balls I've lost.\n\n41\n00:01:56.570 --> 00:01:57.709\n&gt;&gt; Yeah.\n\n42\n00:01:57.709 --> 00:02:00.080\n&gt;&gt; So that's a simple application.\n\n43\n00:02:00.080 --> 00:02:03.860\nWe don't really need any crazy logic\nthere, simple math and that's that.\n\n44\n00:02:03.860 --> 00:02:07.300\nBut some web applications\nare far more complex than that.\n\n45\n00:02:07.300 --> 00:02:11.329\nAnd by complex I mean multiple stages\nthat last over the course of days.\n\n46\n00:02:11.329 --> 00:02:13.680\nOr even weeks,\nmaybe even years in some scenarios.\n\n47\n00:02:13.680 --> 00:02:16.700\nAnd those are far more challenging to\nimplement than just clicking a button and\n\n48\n00:02:16.700 --> 00:02:18.330\nmaking one thing happen.\n\n49\n00:02:18.330 --> 00:02:21.657\nA great example would be\nlike E-commerce website.\n\n50\n00:02:21.657 --> 00:02:28.492\nAnd in E-commerce website I add an item\nand I hit check out but that's one action.\n\n51\n00:02:28.492 --> 00:02:30.540\nBut there's way more that\ngoes behind the scenes.\n\n52\n00:02:30.540 --> 00:02:34.860\nThings like charging the credit card,\nand shipping the item, and\n\n53\n00:02:34.860 --> 00:02:37.960\nmarking it is completed or\nhandling our refund.\n\n54\n00:02:37.960 --> 00:02:42.847\nThose are all additional business\nlogic that happens after the customers\n\n55\n00:02:42.847 --> 00:02:44.352\nwalked away, right.\n\n56\n00:02:44.352 --> 00:02:46.470\nI hit that submit order button and\nI walked away.\n\n57\n00:02:46.470 --> 00:02:50.760\nMeanwhile all these other things, a chain\nof events is occurring in the background.\n\n58\n00:02:50.760 --> 00:02:53.460\nWell that's what\nthe Simple Workflow Service does,\n\n59\n00:02:53.460 --> 00:02:56.310\nis it allows us to handle\nthat chain of events.\n\n60\n00:02:56.310 --> 00:02:59.040\nAll the different things that are\noccurring in the background that need to\n\n61\n00:02:59.040 --> 00:03:00.870\nbe a part of that order process.\n\n62\n00:03:00.870 --> 00:03:05.758\nAnd E-commerce is the easiest example\nto give, but there's many other types.\n\n63\n00:03:05.758 --> 00:03:08.286\nDaniel and I used to work for\nan insurance company together.\n\n64\n00:03:08.286 --> 00:03:12.752\nAnd I gave him an example before the show\nhow at an insurance company you handle\n\n65\n00:03:12.752 --> 00:03:14.206\nhandle claims, right.\n\n66\n00:03:14.206 --> 00:03:17.475\nSo one of your insured gets in a car\naccident, they submit a claim.\n\n67\n00:03:17.475 --> 00:03:20.503\nWell for them they fill out a little\nform or they call it in on the phone and\n\n68\n00:03:20.503 --> 00:03:23.250\nthey say hey, I was in a car accident,\nit was this date and time.\n\n69\n00:03:23.250 --> 00:03:27.645\nHere's my policy number and\nfix my stuff and they submit it.\n\n70\n00:03:27.645 --> 00:03:31.490\nWell on the backend we've gotta\nverify that they have a policy.\n\n71\n00:03:31.490 --> 00:03:34.340\nThat it's up to date, that they\nactually have automotive coverage.\n\n72\n00:03:34.340 --> 00:03:39.138\nWe've gotta verify that they're current,\nthey've been paying the bill.\n\n73\n00:03:39.138 --> 00:03:43.263\nThen we've gotta send an adjuster out to\nlook at the car and evaluate the damage.\n\n74\n00:03:43.263 --> 00:03:46.280\nAnd figure out how much it's\ngonna cost to get it repaired.\n\n75\n00:03:46.280 --> 00:03:49.270\nThen we need to get that\napproved by management.\n\n76\n00:03:49.270 --> 00:03:51.630\nOnce it's approved then we\nneed to send them a check,\n\n77\n00:03:51.630 --> 00:03:53.510\nsend them money to cover the damages.\n\n78\n00:03:53.510 --> 00:03:56.750\nAnd then after that when you do a follow\nup to make sure the repair was done.\n\n79\n00:03:56.750 --> 00:03:57.900\nOtherwise if the repair wasn't done,\n\n80\n00:03:57.900 --> 00:03:59.480\nwe don't wanna continue\nto insure that vehicle.\n\n81\n00:03:59.480 --> 00:04:01.540\nYou don't wanna insure a broken vehicle.\n\n82\n00:04:01.540 --> 00:04:04.990\nSo that's a whole process,\na whole logical process,\n\n83\n00:04:04.990 --> 00:04:09.000\nthat occurs after the initial claim was\nsubmitted and that user walked away.\n\n84\n00:04:09.000 --> 00:04:13.100\nSo we can leverage something like\nSWF to manage that whole process for\n\n85\n00:04:13.100 --> 00:04:14.230\nus in the background.\n\n86\n00:04:14.230 --> 00:04:16.742\nAnd it's running,\ninteracting with our applications.\n\n87\n00:04:16.742 --> 00:04:19.760\nAnd you have many different\napplications this has to interact with.\n\n88\n00:04:19.760 --> 00:04:23.684\nAnd it ties them altogether\ninto one cohesive unit, and\n\n89\n00:04:23.684 --> 00:04:25.948\nexecutes your business logic.\n\n90\n00:04:25.948 --> 00:04:31.210\nSo that's kind of what a work\nflow is in a nutshell.\n\n91\n00:04:31.210 --> 00:04:35.000\nThe nice part about a work flow is that\nyou can have interruptions in-between, and\n\n92\n00:04:35.000 --> 00:04:37.250\nyou can kind of resume where you left off.\n\n93\n00:04:37.250 --> 00:04:39.970\nIf something goes wrong, you can kind\nof pick back up and continue on.\n\n94\n00:04:39.970 --> 00:04:42.525\nSo not only does the Workflow\nhandle the complex logic.\n\n95\n00:04:42.525 --> 00:04:46.909\nBut it gives us a kind of pathway to\nresume transactions instead of just\n\n96\n00:04:46.909 --> 00:04:49.360\naborting once you have a failure.\n\n97\n00:04:49.360 --> 00:04:52.640\nLike if you do one big\ncomplex SQL query and\n\n98\n00:04:52.640 --> 00:04:55.720\nsomething fails that transaction\ngets rolled back in its entirety.\n\n99\n00:04:55.720 --> 00:04:58.390\nWith a Workflow, we can just hold it and\nthen continue forward,\n\n100\n00:04:58.390 --> 00:05:00.220\nalmost like a queuing service, right.\n\n101\n00:05:00.220 --> 00:05:01.917\nWe have the simple queuing\nservice that we can use.\n\n102\n00:05:01.917 --> 00:05:05.109\nBut this is a little bit more advanced\nbecause now we've got logics stuck\n\n103\n00:05:05.109 --> 00:05:07.110\non top of these queues and\nwe move it forward.\n\n104\n00:05:07.110 --> 00:05:09.860\nSo SWF is a good replacement for SQS or\n\n105\n00:05:09.860 --> 00:05:11.720\nthey can be used together and\nin conjunction.\n\n106\n00:05:13.540 --> 00:05:17.600\nLet me show you a little diagram of\nwhat this kind of looks like and\n\n107\n00:05:17.600 --> 00:05:19.490\nwe'll run with the E-commerce example.\n\n108\n00:05:19.490 --> 00:05:23.975\nWell, this diagram is from\nthe AWS SWF team, and basically,\n\n109\n00:05:23.975 --> 00:05:29.670\nit kind of illustrates what we would\nsee with an E-commerce scenario.\n\n110\n00:05:29.670 --> 00:05:33.790\nNow when I think of E-commerce,\nI think of the four major steps, right.\n\n111\n00:05:33.790 --> 00:05:35.110\nWe verify the order.\n\n112\n00:05:35.110 --> 00:05:37.710\nSo we just got an order from a customer,\nwe make sure it's valid.\n\n113\n00:05:37.710 --> 00:05:39.620\nWhat is verifying the order mean?\n\n114\n00:05:39.620 --> 00:05:41.313\nDo we have the items in stock?\n\n115\n00:05:41.313 --> 00:05:43.880\nIf we don't have it in stock,\nwe can't sell it to the person.\n\n116\n00:05:43.880 --> 00:05:46.660\nAre we allowed to sell\nthe item in that area, right?\n\n117\n00:05:46.660 --> 00:05:50.880\nWe may have, like we see in IT where I\nmight have a firewall that does encryption\n\n118\n00:05:50.880 --> 00:05:52.670\nwhere we're not allowed\nto export from the US.\n\n119\n00:05:52.670 --> 00:05:54.140\nSo am I allowed to sell it?\n\n120\n00:05:54.140 --> 00:05:56.610\nDo I need to charge tax on that order,\nright?\n\n121\n00:05:56.610 --> 00:06:01.240\nWe have a lot of logic that occurs\njust as part of verifying the order.\n\n122\n00:06:01.240 --> 00:06:03.830\nThen we charge the credit card.\n\n123\n00:06:03.830 --> 00:06:05.978\nWe gotta get the money for the order.\n\n124\n00:06:05.978 --> 00:06:09.140\nSo we've gotta get money before we ship\nanything, so we charge the credit card.\n\n125\n00:06:09.140 --> 00:06:11.690\nAfter that, we ship the order.\n\n126\n00:06:11.690 --> 00:06:16.790\nWe've got it in inventory, we got paid,\nwe stick the item in a box and we ship it.\n\n127\n00:06:16.790 --> 00:06:21.040\nAnd then once it shipped,\nmaybe we immediately flag it as complete.\n\n128\n00:06:21.040 --> 00:06:24.070\nOr maybe we wait through\nwhatever the return period is.\n\n129\n00:06:24.070 --> 00:06:27.010\nIf we have a 30 day return window,\nthat item could come back to\n\n130\n00:06:27.010 --> 00:06:29.480\nus at any point in the 30 days and\nwe have to refund the money.\n\n131\n00:06:29.480 --> 00:06:33.698\nSo maybe we wait 30 days before we\nhit that final record completion and\n\n132\n00:06:33.698 --> 00:06:35.895\nwe've flagged the order as closed.\n\n133\n00:06:35.895 --> 00:06:38.220\nAnd we release the funds\ninto our general accounting.\n\n134\n00:06:38.220 --> 00:06:41.440\nSo it depends on your business,\nwhat model you follow on that.\n\n135\n00:06:41.440 --> 00:06:45.500\nBut those are the four main stages\nof most E-commerce operations.\n\n136\n00:06:45.500 --> 00:06:48.250\nBut there's a little bit more to\nit because things can go wrong\n\n137\n00:06:48.250 --> 00:06:50.420\nat any step along the way.\n\n138\n00:06:50.420 --> 00:06:51.860\nAnd when something goes wrong,\nwhat do you do?\n\n139\n00:06:51.860 --> 00:06:56.280\nDo you abort or is there additional\nlogic that we can put in place?\n\n140\n00:06:56.280 --> 00:06:58.230\nAnd that's really what\nthe Workflow is doing.\n\n141\n00:06:58.230 --> 00:07:01.800\nThe Workflow is not performing these\nfour steps, something else is.\n\n142\n00:07:01.800 --> 00:07:03.390\nYou've got an application, a database,\n\n143\n00:07:03.390 --> 00:07:05.320\nwhatever that's performing\nthose four steps.\n\n144\n00:07:05.320 --> 00:07:07.810\nWhat the Workflow is doing\nis everything in between.\n\n145\n00:07:07.810 --> 00:07:12.070\nAll these other little circles up here\nIs where it's getting in between and\n\n146\n00:07:12.070 --> 00:07:15.390\nit's making decisions on what to do.\n\n147\n00:07:15.390 --> 00:07:17.200\nI'm gonna verify the order.\n\n148\n00:07:17.200 --> 00:07:21.360\nIf I have the items in stock, great we\ncan move on, I'll make that decision.\n\n149\n00:07:21.360 --> 00:07:24.620\nIf we don't have the items in stock,\nwhat do I do?\n\n150\n00:07:24.620 --> 00:07:27.720\nI can tell the people there's\ngonna be a delay on the order.\n\n151\n00:07:27.720 --> 00:07:29.539\nHey, gotta wait til we\nget this in inventory.\n\n152\n00:07:29.539 --> 00:07:32.281\nOr I can suggest other items to them.\n\n153\n00:07:32.281 --> 00:07:34.851\nOr I can cancel the order,\nI'm gonna make that decision.\n\n154\n00:07:34.851 --> 00:07:37.260\nSo we have a logic that does that.\n\n155\n00:07:37.260 --> 00:07:39.233\nThen we passes the credit card\ndoes the credit card fails?\n\n156\n00:07:39.233 --> 00:07:42.049\nIf the credit card fails,\ndo we just turn away the order?\n\n157\n00:07:42.049 --> 00:07:44.189\nOr do we reach out to the customers?\n\n158\n00:07:44.189 --> 00:07:48.048\nAnd say hey the transaction failed can you\nupdate your credit card which we can still\n\n159\n00:07:48.048 --> 00:07:51.480\ntry and keep that order a live\nif we apply magic to it.\n\n160\n00:07:51.480 --> 00:07:52.870\nThen we move beyond that.\n\n161\n00:07:52.870 --> 00:07:53.990\nWe ship the order.\n\n162\n00:07:53.990 --> 00:07:55.872\nDoes that fail?\nWell it shouldn't.\n\n163\n00:07:55.872 --> 00:07:57.446\nYou stick a label on it,\nyou stick in the mailbox, right?\n\n164\n00:07:57.446 --> 00:07:58.953\nBut maybe it comes back.\n\n165\n00:07:58.953 --> 00:07:59.896\nMaybe something goes wrong there.\n\n166\n00:07:59.896 --> 00:08:01.552\nMaybe the address we have is invalid,\n\n167\n00:08:01.552 --> 00:08:04.875\nwhich we probably should have found out\nway back when we verified the order.\n\n168\n00:08:04.875 --> 00:08:07.040\nBut maybe there's some\nother problem like that.\n\n169\n00:08:07.040 --> 00:08:09.150\nIf we have logic in place we\ncan keep the order alive, and\n\n170\n00:08:09.150 --> 00:08:10.500\nkeep it moving forward, right.\n\n171\n00:08:10.500 --> 00:08:13.780\nOr we can have other alternative futures,\nyou know, for\n\n172\n00:08:13.780 --> 00:08:16.280\nthis particular order that moves\nit into a different place.\n\n173\n00:08:16.280 --> 00:08:20.260\nSo there's all sorts of different things\nwe can do on each leg of this journey.\n\n174\n00:08:20.260 --> 00:08:22.610\nAnd that's what the workflow is handling.\n\n175\n00:08:22.610 --> 00:08:25.950\nAll of those different decision points\nthat happen in between each action.\n\n176\n00:08:25.950 --> 00:08:27.290\n&gt;&gt; Well that's starting to make sense,\nright?\n\n177\n00:08:27.290 --> 00:08:28.110\nWe got the workflow.\n\n178\n00:08:28.110 --> 00:08:31.905\nBasically what it's doing is like you said\nmaking the decision on what to do and\n\n179\n00:08:31.905 --> 00:08:33.237\ntaking it to the next step.\n\n180\n00:08:33.237 --> 00:08:36.984\nWith that being said Don what\nif I've got multiple work flows.\n\n181\n00:08:36.984 --> 00:08:39.550\nDoes that work or can I only have one?\n\n182\n00:08:39.550 --> 00:08:41.106\n&gt;&gt; Yeah you can do a lot\nof amazing things.\n\n183\n00:08:41.106 --> 00:08:44.680\nLike the picture I showed you is\none thing happening at a time.\n\n184\n00:08:44.680 --> 00:08:49.070\nAll, what is it, synchronously, async.\n\n185\n00:08:49.070 --> 00:08:51.115\nWhatever, it is a serially operation,\nright?\n\n186\n00:08:51.115 --> 00:08:51.915\nSo one after the other.\n\n187\n00:08:51.915 --> 00:08:54.700\nBut, you might have more than one thing\nhappening at the same time, right?\n\n188\n00:08:54.700 --> 00:08:58.330\nYou can do that, you can have more than\none activity happening at the same time.\n\n189\n00:08:58.330 --> 00:09:00.070\nI just filed this order.\n\n190\n00:09:00.070 --> 00:09:02.822\nAnd so, I'm moving forward with charging\nthe credit card, at the same time I'm\n\n191\n00:09:02.822 --> 00:09:05.380\nreaching over and removing inventory\nout of the database, or something.\n\n192\n00:09:05.380 --> 00:09:08.860\nYou can do that, you can have more than\none thing going on at the same time.\n\n193\n00:09:08.860 --> 00:09:10.580\nAnd you can have more than one workflow.\n\n194\n00:09:10.580 --> 00:09:14.670\nNow when you create a workflow it's gonna\nask you to create a workflow domain.\n\n195\n00:09:14.670 --> 00:09:17.278\nAnd when you create a workflow domain\nthat's like a partition between\n\n196\n00:09:17.278 --> 00:09:17.948\nyour workflows.\n\n197\n00:09:17.948 --> 00:09:21.583\nAnd if I have two workflows in separate\ndomains they can't see each other,\n\n198\n00:09:21.583 --> 00:09:25.300\nthey can't talk to each other\nthey're completely independent.\n\n199\n00:09:25.300 --> 00:09:27.920\nSo if I wanna have more than\none workflow that interact\n\n200\n00:09:27.920 --> 00:09:29.720\nthey need to be in the same domain.\n\n201\n00:09:29.720 --> 00:09:31.740\nSo that is something we need to be\naware of when we create this stuff.\n\n202\n00:09:31.740 --> 00:09:32.700\nAnd you'll see that.\n\n203\n00:09:32.700 --> 00:09:34.510\nLet me get over to my console.\n\n204\n00:09:34.510 --> 00:09:37.814\nIf I go into the console and\nI go in to the simple workflow service,\n\n205\n00:09:37.814 --> 00:09:41.675\nwhen I go in to create this it doesn't\nsay, hey, let's create a workflow.\n\n206\n00:09:41.675 --> 00:09:42.494\nWell, I guess it sort of does.\n\n207\n00:09:42.494 --> 00:09:46.630\nIt has a sample walk through, but if I\nwant to actually get to work the first\n\n208\n00:09:46.630 --> 00:09:49.820\nthing it wants me to do is\nto create a domain, right.\n\n209\n00:09:49.820 --> 00:09:52.460\nI need to create a domain, that partition,\nthat boundary that I have for\n\n210\n00:09:52.460 --> 00:09:53.520\nmy workflows.\n\n211\n00:09:53.520 --> 00:09:57.350\nAnd then inside of that domain,\nI'll be able to create more things.\n\n212\n00:09:57.350 --> 00:10:00.570\nI'll be able to create my individual\nworkflows that may work together,\n\n213\n00:10:00.570 --> 00:10:03.580\nthey may be independent,\nit's up to me how I want to go about that.\n\n214\n00:10:03.580 --> 00:10:05.740\nThe domain is what's gonna\nkeep things separate.\n\n215\n00:10:05.740 --> 00:10:07.820\nAnd then I have my workflow.\n\n216\n00:10:07.820 --> 00:10:09.977\nSo this is my be like Don's workflow one.\n\n217\n00:10:09.977 --> 00:10:13.099\nI can set a workflow\nexecution retention period.\n\n218\n00:10:13.099 --> 00:10:16.142\nWhen something drops into workflow,\nhow long am I going to retain it and\n\n219\n00:10:16.142 --> 00:10:16.862\nkeep it around?\n\n220\n00:10:16.862 --> 00:10:20.496\nIt's up to me to kind of designate\nhow long I want that to be.\n\n221\n00:10:20.496 --> 00:10:24.455\nI might go five days, or\none day, or whatever it is.\n\n222\n00:10:24.455 --> 00:10:25.778\nI'll go one day on mine.\n\n223\n00:10:25.778 --> 00:10:30.160\nAnd then a description for\nwhatever my workflow happens to be.\n\n224\n00:10:30.160 --> 00:10:34.410\nOnce we create that domain,\nnow inside of the domain,\n\n225\n00:10:34.410 --> 00:10:38.500\nI can go in and start to take actions like\ncreating my workflows and so on right?\n\n226\n00:10:38.500 --> 00:10:39.960\nSo you might have more than one.\n\n227\n00:10:39.960 --> 00:10:41.510\nI can register more domains.\n\n228\n00:10:41.510 --> 00:10:43.000\nI can deprecate domains\nthat I don't need anymore.\n\n229\n00:10:43.000 --> 00:10:48.580\nAnd now I can actually get\nto work with my environment.\n\n230\n00:10:48.580 --> 00:10:52.440\nAnd if I do the launch, a sample walk\nthrough, it's gonna go through the process\n\n231\n00:10:52.440 --> 00:10:55.360\nof creating an initial workflow and you'll\nsee it's kind of showing the process.\n\n232\n00:10:55.360 --> 00:10:57.830\nLike here, start workflow execution.\n\n233\n00:10:57.830 --> 00:11:00.620\nInput data from an S3 bucket.\n\n234\n00:11:00.620 --> 00:11:02.980\nAnd then we download\nthe image that just came in.\n\n235\n00:11:02.980 --> 00:11:06.144\nWe generate sepia and a grayscale,\nso two activities at once and\n\n236\n00:11:06.144 --> 00:11:07.322\nthen uploading to S3.\n\n237\n00:11:07.322 --> 00:11:09.300\nSo it's processing that image.\n\n238\n00:11:09.300 --> 00:11:12.040\nWe might be calling Elastic Transcoder\n\n239\n00:11:12.040 --> 00:11:14.430\nto transcode a video file\ninto a different format.\n\n240\n00:11:14.430 --> 00:11:18.780\nWe might be calling the simple\nnotification service to shoot off an email\n\n241\n00:11:18.780 --> 00:11:20.690\nto us to let us know that\nsomething got uploaded.\n\n242\n00:11:20.690 --> 00:11:24.945\nThere's any number of things that we can\nbe triggering as activities inside of this\n\n243\n00:11:24.945 --> 00:11:26.171\nparticular workflow.\n\n244\n00:11:26.171 --> 00:11:28.190\nThose activities are called tasks.\n\n245\n00:11:28.190 --> 00:11:32.866\nRight so we're performing tasks each step\nalong the journey the tasks maybe really\n\n246\n00:11:32.866 --> 00:11:34.614\ncomplex like decision tasks.\n\n247\n00:11:34.614 --> 00:11:38.189\nThey might be really menial things like\ndownload the image right get the image\n\n248\n00:11:38.189 --> 00:11:41.159\nout of the history bucket move it\nover here so we can process it and\n\n249\n00:11:41.159 --> 00:11:42.378\ntake some kind of action.\n\n250\n00:11:42.378 --> 00:11:45.222\nSo that's all a part of kind of\nwhat's going on inside of these.\n\n251\n00:11:45.222 --> 00:11:49.140\nIn addition to workflow domains,\nwe have that workflow history.\n\n252\n00:11:49.140 --> 00:11:50.650\nWith a workflow history,\n\n253\n00:11:50.650 --> 00:11:55.730\nit's gonna keep track of all the stuff\nthat its kind of performed historically.\n\n254\n00:11:55.730 --> 00:11:58.160\nAnd we don't wanna keep that too long\nbecause it can get really big, right.\n\n255\n00:11:58.160 --> 00:12:02.740\nWe have that execution retention but, by\nsetting it up to be a day, or five days,\n\n256\n00:12:02.740 --> 00:12:05.990\nor whatever, we can make sure that\nwe can do troubleshooting and\n\n257\n00:12:05.990 --> 00:12:08.400\nevaluations to the information\nthat's been processed.\n\n258\n00:12:08.400 --> 00:12:09.900\nAnd, if something fails, we can get in and\n\n259\n00:12:09.900 --> 00:12:12.180\nresolve it within\nan acceptable period of time.\n\n260\n00:12:12.180 --> 00:12:15.370\nSo, those are a couple of things we need\nto be aware of when we go to set these\n\n261\n00:12:15.370 --> 00:12:16.450\nworkflows up.\n\n262\n00:12:16.450 --> 00:12:18.820\nThey can be very simple,\nyou might have a single workflow and\n\n263\n00:12:18.820 --> 00:12:21.470\nyou just deploy based on the example and\nmodify it as needed.\n\n264\n00:12:21.470 --> 00:12:23.120\nOr it could be really complex.\n\n265\n00:12:23.120 --> 00:12:26.894\nWhere you have multiple domains,\nmultiple workflows, all sorts of different\n\n266\n00:12:26.894 --> 00:12:30.626\ninteractions and you can create some\nreally amazing business logic in these.\n\n267\n00:12:30.626 --> 00:12:34.414\n&gt;&gt; Yeah, it seems like it's a really\nincredible product to being able to do all\n\n268\n00:12:34.414 --> 00:12:37.843\nthese logic and make things a whole\nlot easier for us on the front end or\n\n269\n00:12:37.843 --> 00:12:39.760\nthe back end or whatever you might be.\n\n270\n00:12:39.760 --> 00:12:43.790\nDon, that being said we kind of talked\nabout putting, implementing a workflow,\n\n271\n00:12:43.790 --> 00:12:44.940\nyou kind of created one.\n\n272\n00:12:44.940 --> 00:12:48.311\nBut what are some of the necessary\ncomponents that go into a workflow that\n\n273\n00:12:48.311 --> 00:12:49.645\nwe would need to know about?\n\n274\n00:12:49.645 --> 00:12:52.810\n&gt;&gt; All right, so inside of a workflow,\nwe have what are called actors.\n\n275\n00:12:52.810 --> 00:12:55.650\nActors are the pieces\nthat are doing the work.\n\n276\n00:12:55.650 --> 00:12:58.570\nAnd in my diagram that\nI brought up earlier,\n\n277\n00:12:58.570 --> 00:13:02.430\nyou kind of see the idea\nbehind the actors.\n\n278\n00:13:02.430 --> 00:13:04.610\nThe first actor is\na total workflow starter.\n\n279\n00:13:04.610 --> 00:13:06.480\nThat's whatever kicks off the workflow.\n\n280\n00:13:06.480 --> 00:13:09.030\nSomething has to trigger\nthis workflow to happen.\n\n281\n00:13:09.030 --> 00:13:11.380\nSo I upload a file into S3.\n\n282\n00:13:11.380 --> 00:13:13.490\nGreat, that happens all the time.\n\n283\n00:13:13.490 --> 00:13:17.810\nWell, we need the workflow starter to\nbe monitoring that S3 bucket to say,\n\n284\n00:13:17.810 --> 00:13:18.410\nlook, a new file.\n\n285\n00:13:18.410 --> 00:13:19.410\nI'm gonna do something.\n\n286\n00:13:19.410 --> 00:13:21.310\nCuz otherwise you put it in S3 and\nit just sits there.\n\n287\n00:13:21.310 --> 00:13:25.802\nRight, and you can actually setup S3 to\ncall the simple notification service or\n\n288\n00:13:25.802 --> 00:13:30.980\nSQ S or whatever to initiate that process\nto kick off the work flow, right.\n\n289\n00:13:30.980 --> 00:13:32.780\nBut we need some kind\nof work flow starter.\n\n290\n00:13:32.780 --> 00:13:36.480\nSo that's the first actor that we\nhave when we setup a workflow.\n\n291\n00:13:36.480 --> 00:13:40.160\nThe second thing that we need\nare the work flow deciders\n\n292\n00:13:40.160 --> 00:13:42.160\nat each step in this journey.\n\n293\n00:13:42.160 --> 00:13:46.050\nNotice, if we kinda look\nwe hit the starter and\n\n294\n00:13:46.050 --> 00:13:48.810\nthat starts the work flow,\nnow the work flow is running.\n\n295\n00:13:48.810 --> 00:13:50.140\nWe make a decision.\n\n296\n00:13:50.140 --> 00:13:51.530\nHey, we just got some stuff.\n\n297\n00:13:51.530 --> 00:13:53.050\nWhat do we do, right?\n\n298\n00:13:53.050 --> 00:13:57.060\nWell, we make a decision to perform\nan action and we go back to the work flow.\n\n299\n00:13:57.060 --> 00:14:02.650\nAnd once we go back to the work flow right\nhere then we move to our first action,\n\n300\n00:14:02.650 --> 00:14:04.250\nright our first task.\n\n301\n00:14:04.250 --> 00:14:05.730\nAnd that's our third actor.\n\n302\n00:14:05.730 --> 00:14:10.540\nThe workflow starter was the first actor,\nthe decider was the second actor.\n\n303\n00:14:10.540 --> 00:14:13.760\nAnd the activity worker\nis the third actor.\n\n304\n00:14:13.760 --> 00:14:16.990\nRight, so the activity worker does a job.\n\n305\n00:14:16.990 --> 00:14:20.090\nAnd when it's done it goes\nback to the work flow.\n\n306\n00:14:20.090 --> 00:14:22.930\nThen, another decider kicks in.\n\n307\n00:14:22.930 --> 00:14:25.771\nAnd it looks at the work that\nthat activity worker did.\n\n308\n00:14:25.771 --> 00:14:28.440\nAnd it says, is it complete?\n\n309\n00:14:28.440 --> 00:14:29.590\nDoes it meet my requirements?\n\n310\n00:14:29.590 --> 00:14:32.750\nIf it does, we go back to the workflow and\nmove to the next activity worker.\n\n311\n00:14:32.750 --> 00:14:36.281\nIf it doesn't, maybe we move to some\nother alternative activity worker or\n\n312\n00:14:36.281 --> 00:14:38.983\nwe just give up and\nroll the whole thing back or whatever.\n\n313\n00:14:38.983 --> 00:14:41.150\nWe make these decisions over and over.\n\n314\n00:14:41.150 --> 00:14:45.490\nBut at each step,\nwe always return back to the workflow.\n\n315\n00:14:45.490 --> 00:14:48.316\nSo the deciders only talk to the workflow,\nand\n\n316\n00:14:48.316 --> 00:14:51.580\nthe activity workers only\ntalk to the workflow.\n\n317\n00:14:51.580 --> 00:14:54.450\nThe activity worker never\nactually talks to the decider.\n\n318\n00:14:54.450 --> 00:14:55.539\nThey never talk directly to each other.\n\n319\n00:14:55.539 --> 00:14:59.270\nIt all goes through the workflow, and\nthat's because we might be directing to\n\n320\n00:14:59.270 --> 00:15:02.800\nany number of different places so\nthe workflow has to handle that.\n\n321\n00:15:02.800 --> 00:15:07.623\nSo those three components, the work\nflow starter, the word flow decider and\n\n322\n00:15:07.623 --> 00:15:09.042\nthe activity worker.\n\n323\n00:15:09.042 --> 00:15:13.160\nThose three components are what we have to\nconfigure when we get these things set up.\n\n324\n00:15:13.160 --> 00:15:16.510\nThe hardest part is usually the decider,\nright?\n\n325\n00:15:16.510 --> 00:15:17.560\nBecause I've got to account for\n\n326\n00:15:17.560 --> 00:15:21.300\nall the possible outcomes of that activity\nworker and then take actions based on it.\n\n327\n00:15:21.300 --> 00:15:22.985\nSo that's usually the hard part,\nand we're gonna develop that.\n\n328\n00:15:22.985 --> 00:15:27.655\nBut the activity worker's is also a bit\nof a challenge cuz these are whatever our\n\n329\n00:15:27.655 --> 00:15:30.443\nbusiness logic is,\nwhatever we can envision or\n\n330\n00:15:30.443 --> 00:15:32.830\ndream of that we need to get configured.\n\n331\n00:15:32.830 --> 00:15:34.790\nThat's what's gonna be\nimplementing right there, and\n\n332\n00:15:34.790 --> 00:15:36.300\nwe've got to be able to create that too.\n\n333\n00:15:36.300 --> 00:15:39.180\nSo, typically the starter\nis the easy part.\n\n334\n00:15:39.180 --> 00:15:42.173\nYou get things created and it kicks off\nthe workflow, but all of your real work is\n\n335\n00:15:42.173 --> 00:15:44.511\ngonna come down the line with\ninteracting with the workflow.\n\n336\n00:15:44.511 --> 00:15:47.309\n&gt;&gt; So, Don,\nwhat exactly can the decider do?\n\n337\n00:15:47.309 --> 00:15:49.284\nWhat are its options?\n\n338\n00:15:49.284 --> 00:15:51.486\n&gt;&gt; All right, so there's three main\ntask types that you're gonna perform.\n\n339\n00:15:51.486 --> 00:15:55.845\nWhat I've been referring to this whole\nepisode has really been what's called\n\n340\n00:15:55.845 --> 00:15:56.910\nan activity task.\n\n341\n00:15:56.910 --> 00:15:59.449\nAn activity task is where I\njust Programmatically defined,\n\n342\n00:15:59.449 --> 00:16:02.650\nhere's what the activity worker's\ngonna do, right, and do these tasks.\n\n343\n00:16:02.650 --> 00:16:06.750\nBut we may not want the worker\nitself to do the tasks.\n\n344\n00:16:06.750 --> 00:16:09.800\nCuz there might be really\ncomplex business logic.\n\n345\n00:16:09.800 --> 00:16:13.113\nThere might be systems that aren't even a\npart of AWS that I need to interact with.\n\n346\n00:16:13.113 --> 00:16:15.530\nSomething that's on premises, for example.\n\n347\n00:16:15.530 --> 00:16:22.410\nSo instead of doing the regular activity\ntask I might call a Lambda task.\n\n348\n00:16:22.410 --> 00:16:26.100\nIt can actually initiate\na task with AWS Lambda and\n\n349\n00:16:26.100 --> 00:16:29.050\nif you've worked with Lambda at all,\nyou know it can do anything.\n\n350\n00:16:29.050 --> 00:16:32.554\nSo the joke at the very beginning of the\nepisode about like sawing a person in half\n\n351\n00:16:32.554 --> 00:16:33.354\nlike a magician.\n\n352\n00:16:33.354 --> 00:16:36.558\nWe could have Lambda execute a Lambda\nfunction that in turn triggered some\n\n353\n00:16:36.558 --> 00:16:37.494\nsystem and did that.\n\n354\n00:16:37.494 --> 00:16:39.751\nAnd it would be like I don't know,\nthat movie Saw.\n\n355\n00:16:39.751 --> 00:16:43.262\n&gt;&gt; [LAUGH]\n&gt;&gt; Magic vs maybe not a good example.\n\n356\n00:16:43.262 --> 00:16:46.212\nBut you could do darn near\nanything once you call lambda,\n\n357\n00:16:46.212 --> 00:16:47.720\nonce you get it in the mix.\n\n358\n00:16:47.720 --> 00:16:51.240\nThe last task that it can do is\nwhat's called a decision task, right.\n\n359\n00:16:51.240 --> 00:16:52.740\nThat's what the deciders are doing.\n\n360\n00:16:52.740 --> 00:16:56.604\nDeciders really are like activity\nworkers except they just make decisions.\n\n361\n00:16:56.604 --> 00:16:59.243\nThey take input data, evaluate it and\n\n362\n00:16:59.243 --> 00:17:03.377\nmake a decision based on it to\nthen trigger the next action.\n\n363\n00:17:03.377 --> 00:17:06.163\nSo the deciders are a very important part,\nbut\n\n364\n00:17:06.163 --> 00:17:09.956\nthose are the three basic task\ntypes that we have inside of SWF.\n\n365\n00:17:09.956 --> 00:17:10.860\n&gt;&gt; All right, Don.\n\n366\n00:17:10.860 --> 00:17:15.182\nWell is there anything else that we need\nto know about this cool little workflow\n\n367\n00:17:15.182 --> 00:17:17.279\nservice that we have available to us?\n\n368\n00:17:17.279 --> 00:17:20.444\n&gt;&gt; There's not a whole heck\nof a lot extra beyond that.\n\n369\n00:17:20.444 --> 00:17:22.778\nA couple of things that\nyou might wanna configure.\n\n370\n00:17:22.778 --> 00:17:26.462\nThere are task lists that you can\nconfigure and pull up because when you\n\n371\n00:17:26.462 --> 00:17:30.660\nexecute a task, you may have more than\none possible task that you can leverage.\n\n372\n00:17:30.660 --> 00:17:32.020\nThe decider has to pick between them.\n\n373\n00:17:32.020 --> 00:17:36.548\nSo you can create task lists that define\nall the different possible outcomes.\n\n374\n00:17:36.548 --> 00:17:38.892\nYou can influence what's\ngonna be happening and\n\n375\n00:17:38.892 --> 00:17:40.960\nthe order of things you're gonna happen.\n\n376\n00:17:40.960 --> 00:17:43.630\nYou can do that all via task lists.\n\n377\n00:17:43.630 --> 00:17:46.360\nWe also have long polling.\n\n378\n00:17:46.360 --> 00:17:51.590\nI mention long polling if you watched\nour Simple Queuing Service episode,\n\n379\n00:17:51.590 --> 00:17:55.740\nSQS, where with a workflow,\nwe're always returning back\n\n380\n00:17:55.740 --> 00:17:59.130\nto the workflow in between\nthe activity worker and the decider.\n\n381\n00:17:59.130 --> 00:18:03.200\nSo the decider is having to watch\nto see if something new appears.\n\n382\n00:18:03.200 --> 00:18:05.731\nAnd the activity workers are having\nto watch to see if a new,\n\n383\n00:18:05.731 --> 00:18:07.310\nif they're being called to action.\n\n384\n00:18:07.310 --> 00:18:08.190\nSo they're all having to watch.\n\n385\n00:18:08.190 --> 00:18:10.080\nThey're polling the workflow.\n\n386\n00:18:10.080 --> 00:18:13.440\nAnd the more polling that occurs\nthe more CPU load that takes.\n\n387\n00:18:13.440 --> 00:18:17.350\nSo we can do a long pole,\nwhere people hang out for a little bit.\n\n388\n00:18:17.350 --> 00:18:21.520\nThey reach out to the workflow and\nsay, hey, is there any new work?\n\n389\n00:18:21.520 --> 00:18:24.860\nAnd then they just kind of stick\naround for up to 20 seconds, and\n\n390\n00:18:24.860 --> 00:18:27.460\nthey can just watch and see if anything\nnew shows up while they're connected.\n\n391\n00:18:27.460 --> 00:18:30.040\nThat helps to reduce the CPU\nload of all the polling.\n\n392\n00:18:30.040 --> 00:18:34.504\nIf you got a ton of workers that are in\nplace, if you got a lot of systems that\n\n393\n00:18:34.504 --> 00:18:38.465\nare polling the work flow,\nyou can benefit by doing long points.\n\n394\n00:18:38.465 --> 00:18:43.261\nIt's turned off by default you just do the\nexcessive polling because it is fine for\n\n395\n00:18:43.261 --> 00:18:45.080\nmost people to leave it alone.\n\n396\n00:18:45.080 --> 00:18:47.814\nI feel like I'm leaving something out.\n\n397\n00:18:47.814 --> 00:18:52.040\nWorkflow execution closure, right?\n\n398\n00:18:52.040 --> 00:18:55.640\nWhen a workflow finishes, what happens?\n\n399\n00:18:55.640 --> 00:18:57.920\nWell, that sounds like an easy answer.\n\n400\n00:18:57.920 --> 00:19:00.660\nIt finishes, it's done, right,\nit just turns off and that's that.\n\n401\n00:19:00.660 --> 00:19:04.520\nBut we can actually do a ton of different\nthings when we reach the end of\n\n402\n00:19:04.520 --> 00:19:05.570\na workflow.\n\n403\n00:19:05.570 --> 00:19:07.750\nWhen you hit the end of a workflow,\nyou'll hit a decider.\n\n404\n00:19:07.750 --> 00:19:11.148\nAnd the decider is who decides\nif the workflow is done.\n\n405\n00:19:11.148 --> 00:19:13.670\nI've met all the requirements\nI needed to meet.\n\n406\n00:19:13.670 --> 00:19:14.457\nThis data has been handled.\n\n407\n00:19:14.457 --> 00:19:17.370\nThis order has been shipped and\nprocessed and done.\n\n408\n00:19:17.370 --> 00:19:20.080\nI've deposited the money\ninto the general accounts.\n\n409\n00:19:20.080 --> 00:19:22.830\nAnd now, the workflow is over and\nwe need to close.\n\n410\n00:19:22.830 --> 00:19:23.660\nWell, you can do that.\n\n411\n00:19:23.660 --> 00:19:27.860\nYou can just go and\ncomplete and that's it, right?\n\n412\n00:19:27.860 --> 00:19:29.210\nOr you can cancel.\n\n413\n00:19:29.210 --> 00:19:31.330\nIf something went wrong,\nyou can cancel and roll back, right?\n\n414\n00:19:31.330 --> 00:19:33.500\nSo that's another complete and canceled.\n\n415\n00:19:33.500 --> 00:19:34.760\nWe've got failed.\n\n416\n00:19:34.760 --> 00:19:37.547\nIf an error occurred,\nwe can flag it as failed.\n\n417\n00:19:37.547 --> 00:19:39.311\nAnd that's good cuz we will\nsee it in our logs and,\n\n418\n00:19:39.311 --> 00:19:41.330\nwe'll be able to troubleshoot and\nevaluate from there.\n\n419\n00:19:42.340 --> 00:19:43.410\nTimed out.\n\n420\n00:19:43.410 --> 00:19:46.330\nTimed out can happen, right, we've\ninitiated the workflow something is going\n\n421\n00:19:46.330 --> 00:19:48.830\non and it didn't fail,\nit's just nothing happened.\n\n422\n00:19:48.830 --> 00:19:50.520\nIt froze or we got stuck for\n\n423\n00:19:50.520 --> 00:19:54.430\nsome reasons so we can have a time out as\nanother possible outcome of our workflow.\n\n424\n00:19:55.980 --> 00:19:59.916\nNew execution,\nI've reached the end of the workflow.\n\n425\n00:19:59.916 --> 00:20:04.817\nNow, I might even launch the same work\nflow again or along some other workflow.\n\n426\n00:20:04.817 --> 00:20:10.248\nA good example, of that would be,\nAmazon has a subscription service, right?\n\n427\n00:20:10.248 --> 00:20:12.050\nThe subscribe and save plan.\n\n428\n00:20:12.050 --> 00:20:16.835\nSo if you know you're gonna buy\na gallon of ketchup every month,\n\n429\n00:20:16.835 --> 00:20:19.060\nthat's a terrible example.\n\n430\n00:20:19.060 --> 00:20:20.128\n&gt;&gt; As you're looking at me, aren't you?\n\n431\n00:20:20.128 --> 00:20:21.599\n&gt;&gt; I know.\n&gt;&gt; [LAUGH]\n\n432\n00:20:21.599 --> 00:20:23.100\n&gt;&gt; You do love your ketchup.\n\n433\n00:20:23.100 --> 00:20:25.429\nSo you're gonna buy a gallon of\nketchup every single month, right.\n\n434\n00:20:25.429 --> 00:20:26.097\n&gt;&gt; Don't judge me, man.\n\n435\n00:20:26.097 --> 00:20:29.489\n&gt;&gt; I'd place an order for ketchup and\nI say, let's renew that and\n\n436\n00:20:29.489 --> 00:20:30.820\nget it every month.\n\n437\n00:20:30.820 --> 00:20:34.200\nWell, it goes through the workflow\nto process my order to send me that\n\n438\n00:20:34.200 --> 00:20:34.972\nfirst gallon.\n\n439\n00:20:34.972 --> 00:20:37.640\nAnd at the end of the workflow, it doesn't\nsay we're done, it just says, okay, well,\n\n440\n00:20:37.640 --> 00:20:39.600\nnow we need to kick off the timer for\nnext month.\n\n441\n00:20:39.600 --> 00:20:43.302\nAnd then we'll start it again next month\nand ship that next gallon of ketchup and\n\n442\n00:20:43.302 --> 00:20:46.411\ncontinue until you have tons and\ntons of ketchup would be awesome.\n\n443\n00:20:46.411 --> 00:20:48.385\nI gotta come up with a better\nexample than that, don't I?\n\n444\n00:20:48.385 --> 00:20:51.424\n[LAUGH]\n&gt;&gt; [LAUGH] I like it.\n\n445\n00:20:51.424 --> 00:20:55.000\n&gt;&gt; But, one workflow may lead to another,\nis the point there.\n\n446\n00:20:55.000 --> 00:20:58.621\nSo we may call a new execution,\nlaunch another workflow.\n\n447\n00:20:58.621 --> 00:21:01.502\nBut then the final outcome is just\nstraight-up terminated which is\n\n448\n00:21:01.502 --> 00:21:04.989\nthe workflow is done, we don't return\na completion value or anything like that,\n\n449\n00:21:04.989 --> 00:21:06.270\nit just ends and disappears.\n\n450\n00:21:06.270 --> 00:21:09.170\nAnd we may want that in some scenarios,\nyou may want it.\n\n451\n00:21:09.170 --> 00:21:11.240\nSo those are all possible\noutcomes of a workflow,\n\n452\n00:21:11.240 --> 00:21:12.780\nand it's up to you pick\nwhich one you want.\n\n453\n00:21:12.780 --> 00:21:16.640\nAs you define your final decider you'll\nchoose from those options to figure out\n\n454\n00:21:16.640 --> 00:21:17.530\nhow you want to terminate it.\n\n455\n00:21:17.530 --> 00:21:19.980\nSo that's pretty much what\nwe have with the workflow.\n\n456\n00:21:19.980 --> 00:21:23.130\nIt sounds pretty easy, there's not\nthat many moving parts inside of it.\n\n457\n00:21:23.130 --> 00:21:26.020\nAnd that's because the real\nchallenge is in the business logic,\n\n458\n00:21:26.020 --> 00:21:30.100\nin the application, the activity\nworkers that we have to define.\n\n459\n00:21:30.100 --> 00:21:31.990\nThat's where all your real work is.\n\n460\n00:21:31.990 --> 00:21:34.706\nAfter that, the workflow service is really\njust moving through making the decisions.\n\n461\n00:21:34.706 --> 00:21:36.110\nIt's pretty cut and dry.\n\n462\n00:21:36.110 --> 00:21:38.720\n&gt;&gt; I know some people that I would never\nlet touch the service just cuz they\n\n463\n00:21:38.720 --> 00:21:40.470\ncouldn't make a decision\nto save their life.\n\n464\n00:21:40.470 --> 00:21:42.200\nThat being said, Don, thank you for\n\n465\n00:21:42.200 --> 00:21:44.410\nhelping us out with this\nsimple workflow service.\n\n466\n00:21:44.410 --> 00:21:48.980\nVery cool actually, for us to be able to\nintegrate our apps into this thing and\n\n467\n00:21:48.980 --> 00:21:53.720\nmake some decisional processing, that's a\nvery nice feature for us to be able to do.\n\n468\n00:21:53.720 --> 00:21:56.300\nThat being said, looks like we're\nout of time for this episode.\n\n469\n00:21:56.300 --> 00:21:59.420\nThank you so much Don for\nexplaining the simple workflow service.\n\n470\n00:21:59.420 --> 00:22:00.230\nWe do thank you for\n\n471\n00:22:00.230 --> 00:22:03.880\nwatching but singing off for ITPro.TV,\nI've been your host Daniel Lowrie.\n\n472\n00:22:03.880 --> 00:22:04.567\n&gt;&gt; And I'm Don Pezet.\n\n473\n00:22:04.567 --> 00:22:06.465\n&gt;&gt; And we'll see you next time.\n\n474\n00:22:06.465 --> 00:22:12.398\n[MUSIC]\n\n475\n00:22:12.398 --> 00:22:15.639\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "208135343"
        },
        {
          "description": "In this episode, Daniel and Don explore the Amazon Simple Notification Service in AWS. They start by defining SNS, what it is and where it's used. Then they go over the specifics like Clients, Topics, and possible scenarios where SNS may be deployed. Finally, they cover the advanced features like Fanout, ASW System Alerts, Push services.",
          "length": "966",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-3-amazon_simple_notification_service-030917.00_15_49_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-3-amazon_simple_notification_service-030917.00_15_49_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-8-3-amazon_simple_notification_service-030917.00_15_49_13.Still001-sm.jpg",
          "title": "Amazon Simple Notification Service",
          "transcript": "WEBVTT\n\n1\n00:00:00.200 --> 00:00:06.774\nWelcome to ITPro.TV,\nI'm your host Don Pezet [CROSSTALK]\n\n2\n00:00:06.774 --> 00:00:12.317\n[MUSIC]\n&gt;&gt; You're watching ITPro.TV.\n\n3\n00:00:12.317 --> 00:00:14.326\n&gt;&gt; All right, greetings everyone, and\n\n4\n00:00:14.326 --> 00:00:17.125\nwelcome to another exciting\nepisode of ITPRO.TV.\n\n5\n00:00:17.125 --> 00:00:18.265\nI'm your host Daniel Lowrie.\n\n6\n00:00:18.265 --> 00:00:21.145\nAnd in today's episode,\nwe are back with more of our,\n\n7\n00:00:21.145 --> 00:00:23.380\nlet's see if I can get the acronym\ncorrect, cuz it's a little wierd.\n\n8\n00:00:23.380 --> 00:00:25.735\n[LAUGH] ACSAA Series.\n\n9\n00:00:25.735 --> 00:00:29.042\nThat's right, the Amazon serve by\nsolutions architect associate level.\n\n10\n00:00:29.042 --> 00:00:32.532\nAnd joining us back in the studio again,\nour master blaster, my good friend, Mr.\n\n11\n00:00:32.532 --> 00:00:33.152\nDon Pezet.\n\n12\n00:00:33.152 --> 00:00:34.652\nDon, welcome back man,\nhow is it going today?\n\n13\n00:00:34.652 --> 00:00:38.554\n&gt;&gt; It is going just well, and we're diving\nright back in the world AWS, in particular\n\n14\n00:00:38.554 --> 00:00:42.480\nwe're taking a look, at the Amazon Simple\nNotification Service in this episode.\n\n15\n00:00:42.480 --> 00:00:46.795\nAnd the Simple Notification Service, like\nit's name implies, is pretty simple, so\n\n16\n00:00:46.795 --> 00:00:48.060\nit makes it nice.\n\n17\n00:00:48.060 --> 00:00:49.900\nAnd it notifies stuff, which is good too.\n\n18\n00:00:49.900 --> 00:00:51.704\nSo we're going to talk about\nwhat that means exactly.\n\n19\n00:00:51.704 --> 00:00:53.633\nWhy we do notifications,\nhow we handle it, and\n\n20\n00:00:53.633 --> 00:00:56.290\nthe different types of\ncommunications that we can have.\n\n21\n00:00:56.290 --> 00:01:00.140\nBut the important part here\nis the SNS allows us to get\n\n22\n00:01:00.140 --> 00:01:04.210\nthe AWS infrastructure to talk to\nus in a way that we can understand,\n\n23\n00:01:04.210 --> 00:01:06.600\nthat we can make decisions and\nhandle our information.\n\n24\n00:01:06.600 --> 00:01:10.100\nAnd that means this is a pretty important\nservice inside of the AWS suite.\n\n25\n00:01:10.100 --> 00:01:12.200\n&gt;&gt; Well Don as always we like to\nstart at the beginning, right?\n\n26\n00:01:12.200 --> 00:01:16.250\nAs Vince Lombardi used to say,\ngentlemen, this is a football.\n\n27\n00:01:16.250 --> 00:01:18.250\nSo gentlemen, this is SNS.\n\n28\n00:01:18.250 --> 00:01:18.860\nWhere do we begin?\n\n29\n00:01:18.860 --> 00:01:19.928\nWhat's the first thing we\nshould know about this?\n\n30\n00:01:19.928 --> 00:01:23.008\n&gt;&gt; All right so the first thing we need\nto know is that it is really a method for\n\n31\n00:01:23.008 --> 00:01:24.560\nthese systems to talk to us.\n\n32\n00:01:24.560 --> 00:01:27.221\nAnd as a result it supports more\nthan one means of doing that.\n\n33\n00:01:27.221 --> 00:01:30.980\nIt can be sending us a text\nmessage like an SMS.\n\n34\n00:01:30.980 --> 00:01:32.490\nIt can send us an email.\n\n35\n00:01:32.490 --> 00:01:35.480\nIt can trigger a queue in\nthe simple queuing service.\n\n36\n00:01:35.480 --> 00:01:36.960\nIt can trigger a lambda function.\n\n37\n00:01:36.960 --> 00:01:41.750\nIt can do all sorts of crazy\nthings based on data going in.\n\n38\n00:01:41.750 --> 00:01:46.220\nAnd it's using a publisher subscriber\nparadigm to basically say,\n\n39\n00:01:46.220 --> 00:01:49.870\nsomething is putting data in, and\nthen other people listen and take action.\n\n40\n00:01:49.870 --> 00:01:51.641\nAnd that subscriber model\nmight be an email, right?\n\n41\n00:01:51.641 --> 00:01:54.110\nSo my email address is\nentered in the system.\n\n42\n00:01:54.110 --> 00:01:56.300\nAn activity happens in AWS.\n\n43\n00:01:56.300 --> 00:01:59.626\nThe notification service is triggered,\nand it fires an email to me.\n\n44\n00:01:59.626 --> 00:02:01.824\nI get an email in my inbox, and\nI receive it and I can act upon it, right.\n\n45\n00:02:01.824 --> 00:02:05.840\nYou know, that's kind of the goal of\nwhat the Simple Notification Service is.\n\n46\n00:02:05.840 --> 00:02:08.560\nThat it can be tricky\nsometimes to set up our\n\n47\n00:02:08.560 --> 00:02:10.730\nown applications to send notifications.\n\n48\n00:02:10.730 --> 00:02:14.820\nFor example if you have a PHP app,\nyou might use the PHP Web Mail library.\n\n49\n00:02:14.820 --> 00:02:18.340\nWell there have been some pretty well\nknown security vulnerabilities in that,\n\n50\n00:02:18.340 --> 00:02:19.950\njust in the last year alone.\n\n51\n00:02:19.950 --> 00:02:21.510\nSo you might not want to do that.\n\n52\n00:02:21.510 --> 00:02:22.360\nYou don't have to.\n\n53\n00:02:22.360 --> 00:02:26.460\nInstead you can use SNS and let it send\nthe notification, now we don't have\n\n54\n00:02:26.460 --> 00:02:31.125\nto worry about some PHP library\nwe've gotta keep updated ourselves.\n\n55\n00:02:31.125 --> 00:02:34.165\nWe can just do it right\nthrough the AWS SDK.\n\n56\n00:02:34.165 --> 00:02:36.795\nSo that kind of functionality\nis what we get with SNS,\n\n57\n00:02:36.795 --> 00:02:40.147\nit makes it really valuable and\nsomething that we definitely want to use.\n\n58\n00:02:40.147 --> 00:02:45.624\nIt works with push notifications\nas well as pull or pulls, right.\n\n59\n00:02:45.624 --> 00:02:47.077\nIt's really the same thing.\n\n60\n00:02:47.077 --> 00:02:48.265\nSo I can have it like an email.\n\n61\n00:02:48.265 --> 00:02:49.317\nThat would be a push, right.\n\n62\n00:02:49.317 --> 00:02:53.057\nSo a notification happens and\nit automatically shoots me an email.\n\n63\n00:02:53.057 --> 00:02:54.987\nBut if it goes into the queueing service,\n\n64\n00:02:54.987 --> 00:02:58.760\nwell, it puts the notification into\nthe queue and it just sits there.\n\n65\n00:02:58.760 --> 00:03:01.910\nAnd I have to know to go and look for\nit, so my application or database, or\n\n66\n00:03:01.910 --> 00:03:04.410\nwhatever, would need to go and\npull the que every so\n\n67\n00:03:04.410 --> 00:03:08.600\noften, and pull back any messages that\ncame in, to be able to process them.\n\n68\n00:03:08.600 --> 00:03:11.080\nSo, it supports all of\nthose different models.\n\n69\n00:03:11.080 --> 00:03:12.260\nAnd allows us to quickly and\n\n70\n00:03:12.260 --> 00:03:14.960\neasily communicate between services\nas well as between people.\n\n71\n00:03:14.960 --> 00:03:17.260\n&gt;&gt; All right,\nwell Don that begs the question of,\n\n72\n00:03:17.260 --> 00:03:20.080\nhow do I actually get\ndata into the service?\n\n73\n00:03:20.080 --> 00:03:23.550\nAnd then once it's in there,\nhow do I get it back out to my?\n\n74\n00:03:23.550 --> 00:03:25.440\nSo when I order my gallon\nof ketchup every month,\n\n75\n00:03:25.440 --> 00:03:27.525\nI know that that has happened and\nit's on its way.\n\n76\n00:03:27.525 --> 00:03:31.411\n&gt;&gt; [LAUGH] All right well, I mentioned\nthat publisher-subscriber paradigm, right?\n\n77\n00:03:31.411 --> 00:03:32.651\nParadigm, it's a buzzword.\n\n78\n00:03:32.651 --> 00:03:36.200\nBut it is a great way to\ndescribe what's going on here.\n\n79\n00:03:36.200 --> 00:03:36.888\nYou have a publisher.\n\n80\n00:03:36.888 --> 00:03:40.020\nAnd let me show you a little\ndiagram here that I've got.\n\n81\n00:03:40.020 --> 00:03:42.630\nThe publisher is whoever's\ncreating the notification.\n\n82\n00:03:42.630 --> 00:03:48.060\nAnd you'll find where most of your AWS\nservices have the publisher ability for\n\n83\n00:03:48.060 --> 00:03:49.660\nSNS already built into them.\n\n84\n00:03:49.660 --> 00:03:52.317\nSo for example, if you go back and\nwatch our DynamoDB episodes.\n\n85\n00:03:52.317 --> 00:03:56.705\nDynamoDB Automatically has support for\nSNS, and when you turn it on it actually\n\n86\n00:03:56.705 --> 00:04:00.810\nconfigures an SNS topics words to\nget put in place and up and running.\n\n87\n00:04:00.810 --> 00:04:04.170\nSo, you may even all ready be using\nSNS and not even know it, right?\n\n88\n00:04:04.170 --> 00:04:05.710\nSo you have your publisher.\n\n89\n00:04:05.710 --> 00:04:07.780\nIf it's your own application,\n\n90\n00:04:07.780 --> 00:04:11.980\nyou use AWS SDK to interact\nwith the notification service.\n\n91\n00:04:11.980 --> 00:04:16.290\nSo you define your publisher and tell it\nhow it's gonna be communicating with SNS.\n\n92\n00:04:16.290 --> 00:04:17.774\nNow when you communicate with SNS,\n\n93\n00:04:17.774 --> 00:04:20.006\nwhat you're doing is you're\ncreating an SNS topic.\n\n94\n00:04:20.006 --> 00:04:21.080\nAnd that's our message.\n\n95\n00:04:21.080 --> 00:04:23.660\nAnd you're dropping that off into the SNS.\n\n96\n00:04:23.660 --> 00:04:26.870\nAnd from there,\nit goes to the subscriber, right?\n\n97\n00:04:26.870 --> 00:04:28.840\nIt's sending it out to the subscriber.\n\n98\n00:04:28.840 --> 00:04:31.520\nAnd it might be an SNS, an email.\n\n99\n00:04:31.520 --> 00:04:34.170\nIt can be an http or https post.\n\n100\n00:04:34.170 --> 00:04:35.900\nRight were it's actually\ncalling a site id.\n\n101\n00:04:35.900 --> 00:04:39.494\nI see a lot of people where they'll\ntrigger cron jobs manually, or\n\n102\n00:04:39.494 --> 00:04:41.750\nwhatever, by using http post messages.\n\n103\n00:04:41.750 --> 00:04:45.320\nWe can call it the SQS and\nwe can enter into the queuing service.\n\n104\n00:04:45.320 --> 00:04:47.170\nOr we can call a lambda function and\n\n105\n00:04:47.170 --> 00:04:49.800\nhave it perform whatever\nelse it is that we need.\n\n106\n00:04:49.800 --> 00:04:52.360\nThere might be some automated\ntroubleshooting steps that we do.\n\n107\n00:04:52.360 --> 00:04:57.700\nSo an error gets generated in one\napplication It triggers an SNS message.\n\n108\n00:04:57.700 --> 00:04:59.690\nIt gets dumped over into Lambda.\n\n109\n00:04:59.690 --> 00:05:03.040\nLambda then fires up and gathers up logs,\nand puts all the information together.\n\n110\n00:05:03.040 --> 00:05:03.750\nSo when I come in and\n\n111\n00:05:03.750 --> 00:05:06.530\ntroubleshoot it, now everything I\nneed is right there in one place.\n\n112\n00:05:06.530 --> 00:05:08.580\nAll right,\nthat's one example of how I might use it.\n\n113\n00:05:08.580 --> 00:05:10.290\nThat's kinda the power of SNS.\n\n114\n00:05:10.290 --> 00:05:13.010\nBy itself, it's just relaying messages.\n\n115\n00:05:13.010 --> 00:05:15.670\nBut if we put it in combination\nwith the queuing service or Lambda,\n\n116\n00:05:15.670 --> 00:05:20.080\nit can do any number of things that\ngo well beyond just relaying data.\n\n117\n00:05:21.250 --> 00:05:25.160\nAll right so, once we've got that up and\ngoing, then we have to worry about our\n\n118\n00:05:25.160 --> 00:05:29.130\ntopics, and the topic, that's the actual\ndata that we're going to be relaying.\n\n119\n00:05:29.130 --> 00:05:32.720\nAnd the topic is gonna vary based\non whatever our application is.\n\n120\n00:05:32.720 --> 00:05:37.012\nIf it's DynamoDB the topics will have\nall sorts of information in there about\n\n121\n00:05:37.012 --> 00:05:40.326\ndata being uploaded,\ndata being removed, the analysis.\n\n122\n00:05:40.326 --> 00:05:45.532\nI usually zip for the notifications on the\nscaling events as Dynamo starts to split\n\n123\n00:05:45.532 --> 00:05:51.260\nout my database into partitions or shards\nor whatever you get notifications on that.\n\n124\n00:05:51.260 --> 00:05:56.990\nScaling events inside of EC2, all of that\nstuff can get entered in here as a topic.\n\n125\n00:05:56.990 --> 00:06:00.290\nAnd the topic itself,\nwe have to define that ahead of time.\n\n126\n00:06:00.290 --> 00:06:02.825\nSNS needs to expect to receive it.\n\n127\n00:06:02.825 --> 00:06:04.813\nAnd I mentioned Dynamo few times.\n\n128\n00:06:04.813 --> 00:06:07.050\nWe already filmed our Dynamo episodes.\n\n129\n00:06:07.050 --> 00:06:09.874\nSo I've already got some topics\nhere that I didn't create.\n\n130\n00:06:09.874 --> 00:06:12.510\nThese were created for me and I'll see\nright here I've got one that was created\n\n131\n00:06:12.510 --> 00:06:16.690\nfor my dynamo DB deployment and\nso it registered that topic.\n\n132\n00:06:16.690 --> 00:06:18.970\nSo if you look up here you'll see\nwhere I can create a new topic and\n\n133\n00:06:18.970 --> 00:06:20.630\nI can publish to the topic.\n\n134\n00:06:20.630 --> 00:06:22.850\nYou create the topic to\ndefine it ahead of time,\n\n135\n00:06:22.850 --> 00:06:25.050\nwhat youre gonna do with it and so on.\n\n136\n00:06:25.050 --> 00:06:30.100\nAnd then your applications they publish to\nthe topic, they send a message to it and\n\n137\n00:06:30.100 --> 00:06:32.230\nthat way SNS knows what to do.\n\n138\n00:06:32.230 --> 00:06:33.964\nYou don't need multiple\ninstances of the SNS.\n\n139\n00:06:33.964 --> 00:06:38.519\nYou can have one SNS that services\nevery notification that you need\n\n140\n00:06:38.519 --> 00:06:42.310\nbecause you'd create new topics for\neach one.\n\n141\n00:06:42.310 --> 00:06:45.570\nYou give it a topic name which needs\nto be unique and then a display name,\n\n142\n00:06:45.570 --> 00:06:47.250\ncuz the topic name needs to be unique.\n\n143\n00:06:47.250 --> 00:06:49.216\nSo your display name will usually\nbe the one that's a little\n\n144\n00:06:49.216 --> 00:06:50.500\nmore descriptive for us.\n\n145\n00:06:50.500 --> 00:06:52.994\nI'll just make dontest12.\n\n146\n00:06:52.994 --> 00:06:55.950\nAnd we'll create that topic.\n\n147\n00:06:55.950 --> 00:06:58.220\nNow all it asked for was a name.\n\n148\n00:06:58.220 --> 00:07:00.230\nThat's not very exciting.\n\n149\n00:07:00.230 --> 00:07:04.565\nBut if I go in and I edit that, here's\nwhere I can start to see subscriptions.\n\n150\n00:07:04.565 --> 00:07:07.485\nSo these are the people I am going\nto notify any time something gets\n\n151\n00:07:07.485 --> 00:07:08.785\npublished to this.\n\n152\n00:07:08.785 --> 00:07:11.902\nAnd I can see other actions that I can\nperform up here as far as editing what it\n\n153\n00:07:11.902 --> 00:07:14.478\ndoes, checking the delivery status,\ndeleting the topic and\n\n154\n00:07:14.478 --> 00:07:15.436\ngetting out of there.\n\n155\n00:07:15.436 --> 00:07:19.417\nAs well as setting a delivery policy,\ndetermining when and\n\n156\n00:07:19.417 --> 00:07:22.175\nto who I am able to communicate.\n\n157\n00:07:22.175 --> 00:07:24.585\nBut down here where I\ncreate my subscriptions,\n\n158\n00:07:24.585 --> 00:07:28.280\nhere's where I'm defining the type of\ncommunication that I'm going to be doing.\n\n159\n00:07:28.280 --> 00:07:29.220\nAnd so you can come through and\n\n160\n00:07:29.220 --> 00:07:31.360\nspecify exactly what it is that\nyou want to get that setup.\n\n161\n00:07:31.360 --> 00:07:33.920\nIt's really not that hard to\nget these things configured.\n\n162\n00:07:33.920 --> 00:07:37.330\nAnd then whenever somebody publishes to\nthe topic, it'll then take this action.\n\n163\n00:07:37.330 --> 00:07:39.685\nMaybe I want to send\nan email to don@itpro.tv.\n\n164\n00:07:39.685 --> 00:07:42.790\nAnd so now I can create that.\n\n165\n00:07:42.790 --> 00:07:45.790\nAnd anything that calls\ndontest12 will then\n\n166\n00:07:45.790 --> 00:07:48.360\nbasically be firing that off to me, okay.\n\n167\n00:07:48.360 --> 00:07:50.510\nNow if I look down here, I'll see\nit's created a subscription ID and\n\n168\n00:07:50.510 --> 00:07:54.240\nit says pending confirmation when\nyou're doing email notifications,\n\n169\n00:07:54.240 --> 00:07:55.560\ngotta confirm that's okay.\n\n170\n00:07:55.560 --> 00:07:58.310\nCuz otherwise I could be\nspamming an email address to SNS.\n\n171\n00:07:58.310 --> 00:08:01.296\nSo my mailbox just went off and\nI'm looking here and\n\n172\n00:08:01.296 --> 00:08:05.463\nI've gotten an email confirmation and\nonce I confirm that which here,\n\n173\n00:08:05.463 --> 00:08:08.884\nI'll break all the rules and\nuse my cellphone on the show.\n\n174\n00:08:08.884 --> 00:08:13.278\nThat's right, I'm kidding, I'm gonna show,\nI'm gonna read my emails I got\n\n175\n00:08:13.278 --> 00:08:17.890\na confirmation email, so I need to confirm\nthat I am okay with subscribing to that.\n\n176\n00:08:17.890 --> 00:08:20.230\nSo I'll go ahead and hit okay on that.\n\n177\n00:08:20.230 --> 00:08:24.323\nAnd once that's done, it's gonna be\nupdated in here, so I have subscribed.\n\n178\n00:08:24.323 --> 00:08:28.090\nAnd let me come in here and refresh this.\n\n179\n00:08:28.090 --> 00:08:30.120\nLet me just check my Facebook and\nthe football scores.\n\n180\n00:08:30.120 --> 00:08:31.000\nThere we go.\n\n181\n00:08:31.000 --> 00:08:31.720\nAnd now it's updated.\n\n182\n00:08:31.720 --> 00:08:34.180\nI see I've got a subscription for\nthat email and\n\n183\n00:08:34.180 --> 00:08:39.350\nI'm subscriber number 71155715784,\nrolls right of the tongue.\n\n184\n00:08:39.350 --> 00:08:42.311\nBut now any application\nthroughout my entire environment,\n\n185\n00:08:42.311 --> 00:08:46.548\nif I trigger this dontest12 notification\nI'll get an email with that information,\n\n186\n00:08:46.548 --> 00:08:48.127\nand I'll be able to act upon it.\n\n187\n00:08:48.127 --> 00:08:50.979\nAnd I can continue to add\nother subscriptions on here,\n\n188\n00:08:50.979 --> 00:08:53.650\neither other emails, or\nSMS, or whatever I want.\n\n189\n00:08:53.650 --> 00:08:55.683\nYou can combine them all.\nYou've got to kind of develop that around\n\n190\n00:08:55.683 --> 00:08:56.390\nyour solution.\n\n191\n00:08:56.390 --> 00:08:58.930\nThat's all a part of defining this.\n\n192\n00:08:58.930 --> 00:09:02.790\nSo the topic is the first thing that\nwe need to create to get SMS working.\n\n193\n00:09:02.790 --> 00:09:06.010\n&gt;&gt; All right, well Don,\nthat takes us to Scenarios, right.\n\n194\n00:09:06.010 --> 00:09:08.220\nWhen would we want to employ SNS?\n\n195\n00:09:08.220 --> 00:09:12.191\nWhat are some of the activities that\nwe would want to inject that into it?\n\n196\n00:09:12.191 --> 00:09:14.880\n&gt;&gt; Most of the scenarios that\nyou're gonna see that are automatic\n\n197\n00:09:14.880 --> 00:09:16.920\nare part of monitoring and\nreporting, right.\n\n198\n00:09:16.920 --> 00:09:21.550\nSo, like dynamo DB, if status is changed,\nI get a notification or\n\n199\n00:09:21.550 --> 00:09:24.620\nEC2, if an instance gets terminated,\nyou get a notification, right.\n\n200\n00:09:24.620 --> 00:09:26.060\nSo that's one example.\n\n201\n00:09:26.060 --> 00:09:28.830\nBut you can get really\ncomplex with these things.\n\n202\n00:09:28.830 --> 00:09:31.760\nYou can have where a notification then\nwent and triggered a lambda function and\n\n203\n00:09:31.760 --> 00:09:33.110\ndid whatever the heck you wanted.\n\n204\n00:09:33.110 --> 00:09:36.940\nSo in those scenarios we could\nreally get kind of crazy.\n\n205\n00:09:36.940 --> 00:09:39.600\nIf we had updates that\nwere time sensitive,\n\n206\n00:09:39.600 --> 00:09:42.510\nI wanna send an alert out\nto a group of people.\n\n207\n00:09:42.510 --> 00:09:45.915\nI can use SNS to do that, to make sure\nthat they go out in a very timely manner.\n\n208\n00:09:45.915 --> 00:09:49.969\nThat they're sent to email,\nand SMS, and XYZ.\n\n209\n00:09:49.969 --> 00:09:52.690\nI can send out through\nany number of services.\n\n210\n00:09:52.690 --> 00:09:54.740\nWe can move events between workflows.\n\n211\n00:09:54.740 --> 00:09:56.200\nNow this is an interesting one.\n\n212\n00:09:56.200 --> 00:09:57.300\nWhen you create a workflow,\n\n213\n00:09:57.300 --> 00:10:00.920\nif they're in the same workflow domain\nthe workflows can talk to each other.\n\n214\n00:10:00.920 --> 00:10:04.010\nBut what if I have workflows\nin two different domains or\n\n215\n00:10:04.010 --> 00:10:08.110\nI have a workflow in my AWS account and\nDaniel has a workflow in his AWS account,\n\n216\n00:10:08.110 --> 00:10:09.695\ntwo separate AWS accounts.\n\n217\n00:10:09.695 --> 00:10:14.335\nWell, I can relay through\nthe SNS to move notifications\n\n218\n00:10:14.335 --> 00:10:16.745\nin between those two workflows and\nkick things off that way.\n\n219\n00:10:16.745 --> 00:10:21.395\nSo, you can connect disparate systems even\nif they're not in the same AWS account by\n\n220\n00:10:21.395 --> 00:10:23.835\nleveraging SNS.\n\n221\n00:10:23.835 --> 00:10:26.055\nWe can move data between stores.\n\n222\n00:10:26.055 --> 00:10:27.835\nI might have two different databases, and\n\n223\n00:10:27.835 --> 00:10:30.770\nI can move data between\none to another using SNS.\n\n224\n00:10:30.770 --> 00:10:34.000\nA lot of database software has\nfunctionality for that but\n\n225\n00:10:34.000 --> 00:10:38.060\nif they're two completely different\ndatabases, I have a function for that.\n\n226\n00:10:38.060 --> 00:10:41.630\nAnd you might have noticed in\nmy subscription types that\n\n227\n00:10:41.630 --> 00:10:44.610\nthere was one option that was for\ndoing email with JSON in it.\n\n228\n00:10:44.610 --> 00:10:46.868\nSo I could be exporting JSON data, and\n\n229\n00:10:46.868 --> 00:10:51.738\nthat can then in turn be imported into a\ndatabase or treated, converted to XML, or\n\n230\n00:10:51.738 --> 00:10:56.281\nhowever it is that I want to handle that\nand we can take actions based on that.\n\n231\n00:10:56.281 --> 00:10:59.500\nWe can also update records\nin a business system.\n\n232\n00:10:59.500 --> 00:11:02.880\nI might have a line of business\napplication that isn't supported by\n\n233\n00:11:02.880 --> 00:11:04.520\nany of the other stuff I run.\n\n234\n00:11:04.520 --> 00:11:06.960\nAnd so I can use SNS to generate a message\n\n235\n00:11:06.960 --> 00:11:10.430\nthat's picked up through some means\nby that line of business application,\n\n236\n00:11:10.430 --> 00:11:12.593\nwe usually probably leverage\na Lambda function for that.\n\n237\n00:11:12.593 --> 00:11:16.110\nBut what we kind of push across\nwith that to get to the other side,\n\n238\n00:11:16.110 --> 00:11:18.940\nthose are all different\nscenarios where you can use SNS.\n\n239\n00:11:18.940 --> 00:11:22.157\nIt really just allows two different\ncomponents to communicate that might not\n\n240\n00:11:22.157 --> 00:11:23.056\nnormally be able to.\n\n241\n00:11:23.056 --> 00:11:23.705\n&gt;&gt; Well Don,\n\n242\n00:11:23.705 --> 00:11:28.340\nit really seems like SNS is kinda\nthe Mighty Mouse of the AWS services.\n\n243\n00:11:28.340 --> 00:11:32.650\nIt's a little thing, but it does quite\na bit and it has a lot of functionality.\n\n244\n00:11:32.650 --> 00:11:35.410\nThat being said, is there any other types\nof things that we need to know about?\n\n245\n00:11:35.410 --> 00:11:36.838\nAdvanced features, or\njust anything else you'd like us to know?\n\n246\n00:11:36.838 --> 00:11:42.310\n&gt;&gt; So there's a few things,\nyou can configure what's called fan out.\n\n247\n00:11:42.310 --> 00:11:47.080\nFan out is where we receive\none publish to a topic,\n\n248\n00:11:47.080 --> 00:11:51.060\nand then we send it to more\nthan one subscriber right.\n\n249\n00:11:51.060 --> 00:11:53.920\nAn example, here we've got a publisher.\n\n250\n00:11:53.920 --> 00:11:56.430\nSo this is our entry end point.\n\n251\n00:11:56.430 --> 00:12:00.937\nAnd it comes in as an SnS topic and then\ninstead of just sending it to one endpoint\n\n252\n00:12:00.937 --> 00:12:04.250\non the way out,\nwe can send it to more than one, right.\n\n253\n00:12:04.250 --> 00:12:07.520\nThis one is sending to\ntwo different SQS queues.\n\n254\n00:12:07.520 --> 00:12:12.620\nSo I might have a production and\ndisaster recovery environment and\n\n255\n00:12:12.620 --> 00:12:16.800\nif I want to do things like well,\ndatabases have transaction log shippings.\n\n256\n00:12:16.800 --> 00:12:20.100\nAny transaction that occurs in\nproduction then gets shipped over\n\n257\n00:12:20.100 --> 00:12:24.830\nto DR to be done over there,\nmaybe synchronously, maybe asynchronously.\n\n258\n00:12:24.830 --> 00:12:27.850\nWell, if I receive that\ncommunication through an SNS topic,\n\n259\n00:12:27.850 --> 00:12:29.770\nI can just automatically\nsend it to two places.\n\n260\n00:12:29.770 --> 00:12:31.800\nAnd they can both process it and\nmove forward independently.\n\n261\n00:12:31.800 --> 00:12:35.200\nSo that's kinda what they're showing here,\nis dumping it into two queues.\n\n262\n00:12:35.200 --> 00:12:40.490\nAnd those queues in turn could move\nover to two different instances,\n\n263\n00:12:40.490 --> 00:12:42.710\ntwo EC2 instances or\nwhatever it is that's processing it.\n\n264\n00:12:42.710 --> 00:12:45.500\nSo here I might have two completely\nseparate instances that are grabbing\n\n265\n00:12:45.500 --> 00:12:49.730\nmessages out of these queues and then\nprocessing them and doing it in tandem.\n\n266\n00:12:49.730 --> 00:12:52.610\nNow maybe I need that for\nsome real reason.\n\n267\n00:12:52.610 --> 00:12:54.747\nBut usually this would be for\nredundancy or disaster recovery.\n\n268\n00:12:54.747 --> 00:12:55.769\nBut there's any any number\n\n269\n00:12:55.769 --> 00:12:57.820\nof other scenarios where you\nmight leverage that way.\n\n270\n00:12:57.820 --> 00:13:03.360\nSo that's fan out and it's just assigning\nmore than one subscriber to a topic,\n\n271\n00:13:03.360 --> 00:13:06.680\nto a notification, and sending that out.\n\n272\n00:13:06.680 --> 00:13:08.410\nYou can mix and match notifications.\n\n273\n00:13:08.410 --> 00:13:12.134\nSo we can do push email,\nas well as pull queuing and so on.\n\n274\n00:13:12.134 --> 00:13:12.976\nSo, you can mix and\n\n275\n00:13:12.976 --> 00:13:16.250\nmatch to your heart's content to\ncreate the notification that you want.\n\n276\n00:13:16.250 --> 00:13:18.820\nThat's another feature inside of SNS.\n\n277\n00:13:19.950 --> 00:13:24.630\nThe other thing is we can\ndo mobile notifications.\n\n278\n00:13:24.630 --> 00:13:30.030\nNotifications to iOS,\nAndroid, Windows phone and\n\n279\n00:13:30.030 --> 00:13:33.350\nso on, which can be pretty handy.\n\n280\n00:13:33.350 --> 00:13:37.191\nThere's a lot of mobile app developers\nthat started leveraging SNS early on for\n\n281\n00:13:37.191 --> 00:13:39.724\nsending notifications\nbetween devices like that.\n\n282\n00:13:39.724 --> 00:13:45.620\nI don't know if you've ever played\none of those timer based games.\n\n283\n00:13:45.620 --> 00:13:50.450\nWhere you're farming pigs or\nattacking villages or\n\n284\n00:13:50.450 --> 00:13:52.770\nsomething, and\nit's like you've got to wait two hours.\n\n285\n00:13:52.770 --> 00:13:55.998\nAnd then two hours later on your\nphone a little message pops up, and\n\n286\n00:13:55.998 --> 00:13:59.630\nit says time to attack that village or\nhey, you killed eight pigs, great,\n\n287\n00:13:59.630 --> 00:14:02.185\nget to work, or\nwhatever it is that crazy game does.\n\n288\n00:14:02.185 --> 00:14:07.610\nThat type of notification, a lot of\npeople, they think it comes from the app.\n\n289\n00:14:07.610 --> 00:14:09.230\nWell it indirectly comes from the app.\n\n290\n00:14:09.230 --> 00:14:11.570\nIt's usually coming from\nsomething like SNS.\n\n291\n00:14:11.570 --> 00:14:13.990\nNow SNS can do that.\n\n292\n00:14:13.990 --> 00:14:16.910\nA lot of application\ndevelopers used it that way.\n\n293\n00:14:16.910 --> 00:14:20.900\nBut understand that Amazon is launching\nnew services all the time and\n\n294\n00:14:20.900 --> 00:14:24.150\nso they actually have another\nmobile application suite now\n\n295\n00:14:24.150 --> 00:14:25.990\nthat's kind of taken that role over.\n\n296\n00:14:25.990 --> 00:14:30.293\nSo if you're deploying things new, you're\nprobably not gonna use SNS for that.\n\n297\n00:14:30.293 --> 00:14:33.956\nMobile apps you're not going to use SNS\nfor that you'll use the mobile suite but\n\n298\n00:14:33.956 --> 00:14:36.427\nthere's still plenty of\npeople who already used it.\n\n299\n00:14:36.427 --> 00:14:39.585\nAnd that functionality is still there\nyou can continue to use it, but\n\n300\n00:14:39.585 --> 00:14:41.610\nI think is there a message\non the dash board?\n\n301\n00:14:42.650 --> 00:14:46.000\nWhen you log in the first time you'll see\na little kind of pop up on your dashboard\n\n302\n00:14:46.000 --> 00:14:46.790\nand it will tell you about that,\n\n303\n00:14:46.790 --> 00:14:49.500\nhey there's a new mobile app suite\nyou should use that instead.\n\n304\n00:14:49.500 --> 00:14:51.050\nFor mobile apps, right?\n\n305\n00:14:51.050 --> 00:14:52.110\nIf you're not doing mobile apps.\n\n306\n00:14:52.110 --> 00:14:54.470\nIf you're doing communications between\nSQS, you don't care about that.\n\n307\n00:14:54.470 --> 00:14:56.865\nSNS is still the best option for\nsending that data across.\n\n308\n00:14:56.865 --> 00:15:00.767\nSo understand that this is a very\nflexible technology that can be used in\n\n309\n00:15:00.767 --> 00:15:02.950\na countless number of scenarios.\n\n310\n00:15:02.950 --> 00:15:06.240\nSo you just need to figure out\nhow it fits into your solution.\n\n311\n00:15:06.240 --> 00:15:08.960\nAnd deployed,\nit's pretty easy to get running.\n\n312\n00:15:08.960 --> 00:15:11.283\n&gt;&gt; All right, well Don,\nI've learned two things in this episode.\n\n313\n00:15:11.283 --> 00:15:13.100\nA, SNS is awesome.\n\n314\n00:15:13.100 --> 00:15:15.900\nAnd, B, I'm very concerned about what\n\n315\n00:15:15.900 --> 00:15:17.211\ngames you're spending\nyour time on [LAUGH].\n\n316\n00:15:17.211 --> 00:15:20.212\n&gt;&gt; [LAUGH]\n&gt;&gt; A little strange thing going on there.\n\n317\n00:15:20.212 --> 00:15:22.288\nWe're gonna have a talk after this show,\nI'll meet you out there.\n\n318\n00:15:22.288 --> 00:15:24.488\nThat being said, I know this is\na bit of a short episode, but\n\n319\n00:15:24.488 --> 00:15:26.215\nit was filled with a lot\nof great information.\n\n320\n00:15:26.215 --> 00:15:28.407\nSNS services is a very cool thing so,\n\n321\n00:15:28.407 --> 00:15:32.670\nbe able to play with it didn't seem\ntoo difficult to get up and running.\n\n322\n00:15:32.670 --> 00:15:36.324\nSo something I love in notifications I\nlike to know when things happen Amazon\n\n323\n00:15:36.324 --> 00:15:37.303\naffords that to us.\n\n324\n00:15:37.303 --> 00:15:42.105\nDon thanks for joining us today\nwe appreciate your input on this\n\n325\n00:15:42.105 --> 00:15:46.101\ntopic we do appreciate our viewers for\nwatching us.\n\n326\n00:15:46.101 --> 00:15:47.670\nBut guess what, that's right,\nit's time to sign off for ITPro.Tv,\n\n327\n00:15:47.670 --> 00:15:48.492\nI've been your host Daniel Lowrie.\n\n328\n00:15:48.492 --> 00:15:49.784\n&gt;&gt; And I'm Don Pezet.\n\n329\n00:15:49.784 --> 00:15:53.730\n&gt;&gt; And we'll see you next time.\n\n330\n00:15:53.730 --> 00:15:57.807\n[MUSIC]\n\n331\n00:15:57.807 --> 00:16:00.097\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "208136234"
        }
      ],
      "title": "SQS, SWF, and SNS"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don explore the basics of the Domain Name System and it’s implementation inside of AWS’s Route 53. They talk about basic DNS components, the name resolution process and record types. They will demonstrate the Route 53 interface.",
          "length": "1991",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-9-1-dns_and_route_53-031517-PGM.00_37_57_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-9-1-dns_and_route_53-031517-PGM.00_37_57_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-9-1-dns_and_route_53-031517-PGM.00_37_57_25.Still001-sm.jpg",
          "title": "DNS and Route 53",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:03.010\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:03.010 --> 00:00:06.358\n[CROSSTALK]\n\n3\n00:00:06.358 --> 00:00:08.289\n[MUSIC]\n\n4\n00:00:08.289 --> 00:00:12.180\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.180 --> 00:00:14.725\n&gt;&gt; Hello everyone, and\nwelcome to the ITProTV studios.\n\n6\n00:00:14.725 --> 00:00:17.775\nI'm your host Wes Bryan, and\ntoday we've got a great episode for you.\n\n7\n00:00:17.775 --> 00:00:20.518\nToday we are looking at our ACSAA.\n\n8\n00:00:20.518 --> 00:00:23.315\nAnd joining us in the studios today\nis none other than Mr. Don Pezet.\n\n9\n00:00:23.315 --> 00:00:24.425\nDon how you doing sir?\n\n10\n00:00:24.425 --> 00:00:25.465\n&gt;&gt; I'm doing just well Wes,\n\n11\n00:00:25.465 --> 00:00:28.300\nready to dive right back into\nthe world of Amazon Web Services.\n\n12\n00:00:28.300 --> 00:00:32.580\nAnd today we're gonna be looking\nat Route 53 and DNS inside of AWS.\n\n13\n00:00:32.580 --> 00:00:36.860\nSo, that's a lot of acronyms, but that's\nhow we do it here, that's how we roll.\n\n14\n00:00:36.860 --> 00:00:38.220\nSo we're gonna take a look at it.\n\n15\n00:00:38.220 --> 00:00:42.430\nYou'll find that Route 53,\nwhile it's not the most complex service,\n\n16\n00:00:42.430 --> 00:00:46.520\nit's not the most glorious service, it's\nprobably one of the more important ones.\n\n17\n00:00:46.520 --> 00:00:50.710\nBecause it is so pivotal to enabling our\ncustomers or our visitors, our viewers,\n\n18\n00:00:50.710 --> 00:00:53.230\nwhatever, to be able to reach out and\naccess our applications.\n\n19\n00:00:53.230 --> 00:00:57.699\nThat it's something that we definitely\nneed to plan for, we need to design for,\n\n20\n00:00:57.699 --> 00:01:01.663\nand make sure that our name resolution\nis supporting our application.\n\n21\n00:01:01.663 --> 00:01:05.080\nSo that's what we're gonna be taking\na look at right here in this episode.\n\n22\n00:01:05.080 --> 00:01:08.630\nAll right, so let's kick things off\nwith a little bit of DNS history, right?\n\n23\n00:01:08.630 --> 00:01:11.150\nWe need to make sure we\nunderstand exactly what DNS is.\n\n24\n00:01:11.150 --> 00:01:13.090\nAnd I guess we could start with\nthe acronym itself, right,\n\n25\n00:01:13.090 --> 00:01:14.570\nthe domain naming service.\n\n26\n00:01:14.570 --> 00:01:15.357\nAnd with DNS,\n\n27\n00:01:15.357 --> 00:01:19.298\nwhat it does is provides us a way to\nresolve a name to an IP address right?\n\n28\n00:01:19.298 --> 00:01:23.585\nWhen you browse the Internet, you don't\ntype in IP addresses, you type in a name,\n\n29\n00:01:23.585 --> 00:01:27.190\nyou type in www.donssite.com or\nwhatever it is, right?\n\n30\n00:01:27.190 --> 00:01:30.380\nAnd those are easy to remember,\neasy to use, they look good on paper, so\n\n31\n00:01:30.380 --> 00:01:31.990\nthat's what we wanna use.\n\n32\n00:01:31.990 --> 00:01:35.640\nBut on the back end, every computer\nis resolving them to an IP address.\n\n33\n00:01:35.640 --> 00:01:41.960\nAnd when you spin up instances in EC2,\nfor example, or databases in RDS,\n\n34\n00:01:41.960 --> 00:01:46.940\nor whatever it is that you do, everything\ninside of AWS is assigned, usually an IP,\n\n35\n00:01:46.940 --> 00:01:49.470\nif there's an actual\ninstance behind the scenes.\n\n36\n00:01:49.470 --> 00:01:51.980\nOr at a minimum, a URL end point.\n\n37\n00:01:51.980 --> 00:01:55.880\nAnd that URL endpoint is normally a nice\nlong name that's really not suitable for\n\n38\n00:01:55.880 --> 00:01:57.050\ngiving to your customers, right?\n\n39\n00:01:57.050 --> 00:02:00.752\nFor example here,\nlet me just jump into my EC2.\n\n40\n00:02:00.752 --> 00:02:04.552\nAnd if I pull up some containers, or\nnot containers, but just some instances,\n\n41\n00:02:04.552 --> 00:02:06.100\nI can look at one that I've got.\n\n42\n00:02:06.100 --> 00:02:08.850\nI've got a web server sitting right here,\nand\n\n43\n00:02:08.850 --> 00:02:12.590\nwhen I spun it up,\nit was assigned a name and an IP address.\n\n44\n00:02:12.590 --> 00:02:13.890\nYou can see them both right here.\n\n45\n00:02:13.890 --> 00:02:18.309\nThe IP address that it was\ngiven was 54.90.115.249.\n\n46\n00:02:18.309 --> 00:02:19.350\nI can't remember that,\n\n47\n00:02:19.350 --> 00:02:21.990\nI didn't remember that until I\nsaw it right here on the screen.\n\n48\n00:02:21.990 --> 00:02:24.360\nAnd I'm certainly not gonna\nhand that out to my customers.\n\n49\n00:02:24.360 --> 00:02:32.086\nAnd then the name was\nec2-54-90-115-249.compute-1.amazonaws.com.\n\n50\n00:02:32.086 --> 00:02:35.040\nAgain, not a name I'm gonna want\nto give out to my customers.\n\n51\n00:02:35.040 --> 00:02:38.140\nNot to mention the fact that the IP\naddress is a part of that name.\n\n52\n00:02:38.140 --> 00:02:41.300\nAnd so if this in not an elastic IP,\nit's gonna change.\n\n53\n00:02:41.300 --> 00:02:45.020\nAnd if it changes, the name changes, and\nso my customers can't use that, right?\n\n54\n00:02:45.020 --> 00:02:48.850\nSo I need some way to better handle that,\nand that's what DNS is all about.\n\n55\n00:02:48.850 --> 00:02:52.830\nDNS gives us the tools to\ncreate names that point to\n\n56\n00:02:52.830 --> 00:02:54.350\nall sorts of different things.\n\n57\n00:02:54.350 --> 00:02:57.590\nAnd we'll find that while normally that\nname points to and IP, when you do\n\n58\n00:02:57.590 --> 00:03:01.930\nthis inside a Route 53, the name can\npoint to a lot of other things too.\n\n59\n00:03:01.930 --> 00:03:04.790\nIt's a very powerful system,\nif you take the time to learn it and\n\n60\n00:03:04.790 --> 00:03:06.540\nget it configured, right?\n\n61\n00:03:06.540 --> 00:03:10.990\nNow, talking about domain names, let\nme bring up a little illustration here.\n\n62\n00:03:10.990 --> 00:03:16.500\nWhen you have a domain name like this one;\napi.aws.amazon.com, that name is actually\n\n63\n00:03:16.500 --> 00:03:20.190\nmade up of a number of different pieces,\nand each pieces is important, right?\n\n64\n00:03:20.190 --> 00:03:22.950\nNotice this trailing dot here at the end?\n\n65\n00:03:22.950 --> 00:03:26.040\nI wanna highlight that,\nbecause in a lot of textbooks, and\n\n66\n00:03:26.040 --> 00:03:28.582\na lot of other systems,\nyou don't see that dot.\n\n67\n00:03:28.582 --> 00:03:31.330\nBut Amazon's actually working really\nhard to make sure their system is fully\n\n68\n00:03:31.330 --> 00:03:35.500\nstandards compliant, and so they don't\nhide things, they show that trailing dot.\n\n69\n00:03:35.500 --> 00:03:39.430\nEvery domain name actually has a dot\non the end, because the dot is what's\n\n70\n00:03:39.430 --> 00:03:43.220\npointing to what are called the root hint\nservers, or the root DNS servers Servers.\n\n71\n00:03:43.220 --> 00:03:45.990\nThere's root DNS servers in, Wes, do you\nremember how many there, is it like 13?\n\n72\n00:03:45.990 --> 00:03:46.740\n&gt;&gt; 13 of them, yep.\n\n73\n00:03:46.740 --> 00:03:48.229\n&gt;&gt; 13 root hint servers, and\n\n74\n00:03:48.229 --> 00:03:50.216\nthey're labeled A through-\n&gt;&gt; M.\n\n75\n00:03:50.216 --> 00:03:53.810\n&gt;&gt; M, M's the 13th letter of the alphabet,\nthank you, Wes.\n\n76\n00:03:53.810 --> 00:03:57.343\n[LAUGH] So they're labeled A through M,\nand these are the root hint servers.\n\n77\n00:03:57.343 --> 00:04:00.051\nWhen you do a DNS look up,\nthat's part of the process, and\n\n78\n00:04:00.051 --> 00:04:02.000\nyou go up to the root DNS servers, right?\n\n79\n00:04:02.000 --> 00:04:04.910\nWell, those are managed by various\norganizations on the Internet,\n\n80\n00:04:04.910 --> 00:04:06.910\nthat's not ones that we\nhave to worry about.\n\n81\n00:04:06.910 --> 00:04:10.080\nBut beneath that,\nwe get to our domain names.\n\n82\n00:04:10.080 --> 00:04:13.780\nAnd a domain name, at a minimum,\nis gonna consist of two parts.\n\n83\n00:04:13.780 --> 00:04:18.546\nA top level domain and a secondary level\ndomain, right, so they're the TLD and\n\n84\n00:04:18.546 --> 00:04:19.800\nthe SLD.\n\n85\n00:04:19.800 --> 00:04:23.520\nThe TLD is that little suffix that\nappears on the end of a domain, and\n\n86\n00:04:23.520 --> 00:04:27.192\n.com is the most popular one but\nthere's tons of others, right?\n\n87\n00:04:27.192 --> 00:04:31.652\n.edu, .net, .org,\nall the country codes, .us, .uk,\n\n88\n00:04:31.652 --> 00:04:35.990\n.fr, all the different ones,\nthose are top levels.\n\n89\n00:04:35.990 --> 00:04:40.680\nWhen you go to a root hint server,\nyou don't find actual domains,\n\n90\n00:04:40.680 --> 00:04:42.760\nyou find top level domains.\n\n91\n00:04:42.760 --> 00:04:46.284\nHey, I'm trying to find itpro.tv, so\n\n92\n00:04:46.284 --> 00:04:52.099\nI go to the root hint servers to\nfind who's the TLD server for .tv.\n\n93\n00:04:52.099 --> 00:04:56.945\nAnd then we go to those servers, and\nwe say okay, I'm looking for itpro.tv, and\n\n94\n00:04:56.945 --> 00:05:00.808\nthose top level domain servers\nwill point us to this sub-level,\n\n95\n00:05:00.808 --> 00:05:02.580\nthis secondary level.\n\n96\n00:05:02.580 --> 00:05:05.640\nAnd we'll go to those, and we'll actually\nfind the records that we're looking for.\n\n97\n00:05:05.640 --> 00:05:08.400\nIt's just part of that look-up process\nthat we go through any time we reach out.\n\n98\n00:05:09.530 --> 00:05:15.220\nNow when you register a domain, in Route\n53, what we're setting up is a DNS server.\n\n99\n00:05:15.220 --> 00:05:17.870\nA server that answers questions,\nthat says, here's a name,\n\n100\n00:05:17.870 --> 00:05:19.522\nhere's the IP that goes along with it.\n\n101\n00:05:19.522 --> 00:05:22.220\nIn other words,\nanswering the query that comes in.\n\n102\n00:05:22.220 --> 00:05:26.180\n&gt;&gt; We need to purchase domains to use on\nthe Internet, you need to register them.\n\n103\n00:05:26.180 --> 00:05:28.730\nAnd you register them and\nyou register them with a DNS registrar.\n\n104\n00:05:28.730 --> 00:05:32.690\nIn the early days, Amazon was just\na DNS server, not a registrar.\n\n105\n00:05:32.690 --> 00:05:36.915\nSo you had to go and buy your domain\nsomewhere else, and then come and\n\n106\n00:05:36.915 --> 00:05:39.229\nadd it in to AWS, which you could do.\n\n107\n00:05:39.229 --> 00:05:41.180\nI did it for years and it worked fine.\n\n108\n00:05:41.180 --> 00:05:43.300\nWell now they're a registrar also.\n\n109\n00:05:43.300 --> 00:05:46.690\nSo you can actually do the whole\nlife cycle right inside of AWS.\n\n110\n00:05:46.690 --> 00:05:52.640\nYou can buy the domain and host the zone\ndomain right there inside of Route 53,\n\n111\n00:05:52.640 --> 00:05:55.350\nmakes life super convenient\nto have it all in one place.\n\n112\n00:05:55.350 --> 00:05:56.590\nYou don't have to,\nyou can still do it the old way.\n\n113\n00:05:56.590 --> 00:05:59.780\nYou can have them registered in\none place and hosted in AWS.\n\n114\n00:05:59.780 --> 00:06:01.316\nIt's just up to you how you handle that.\n\n115\n00:06:02.400 --> 00:06:06.500\nOnce you've got your domain in though,\neverything underneath it,\n\n116\n00:06:06.500 --> 00:06:09.750\nall the subdomains and\nhost records, those are up to you.\n\n117\n00:06:09.750 --> 00:06:12.620\nYou can create them, you can create as\nmany as you want throw them all in there\n\n118\n00:06:12.620 --> 00:06:13.990\nand off you go, you control that.\n\n119\n00:06:13.990 --> 00:06:18.700\nSo we're just registering the secondary\nlevel, the SLD and TLD, that's what we're\n\n120\n00:06:18.700 --> 00:06:22.030\nregistering when we purchase a domain\nname out there on the Internet right?\n\n121\n00:06:22.030 --> 00:06:24.600\nSo those are some of the components\nthat we need to be aware of as we\n\n122\n00:06:24.600 --> 00:06:25.260\npurchase these.\n\n123\n00:06:25.260 --> 00:06:27.210\nAnd a lot of people don't use subdomains.\n\n124\n00:06:27.210 --> 00:06:30.890\nYou'll see Amazon is, right, so\nthey've got aws.amazon.com, and\n\n125\n00:06:30.890 --> 00:06:32.920\nall the AWS services underneath that.\n\n126\n00:06:32.920 --> 00:06:36.010\nThey do that because what is amazon.com?\n\n127\n00:06:36.010 --> 00:06:39.660\nWell, it is the largest\nonline retailer in the world.\n\n128\n00:06:39.660 --> 00:06:42.430\nAnd so that's what they do,\nthat is their primary business.\n\n129\n00:06:42.430 --> 00:06:44.863\nAWS is a secondary business for them.\n\n130\n00:06:44.863 --> 00:06:47.740\nAnd so they created they created\na subdomain, to create some separation.\n\n131\n00:06:47.740 --> 00:06:50.588\nThey didn't have to, they could\nhave done it all under amazon.com.\n\n132\n00:06:50.588 --> 00:06:52.860\nBut it's really two\nseparate business units.\n\n133\n00:06:52.860 --> 00:06:57.150\nThe retail outlet, and\nthen the hosting and\n\n134\n00:06:57.150 --> 00:07:00.200\nservice provider outlet, so\ntwo different kind of portions.\n\n135\n00:07:00.200 --> 00:07:02.710\nAnd you can certainly do that with\nsubdomains, to create whatever you want.\n\n136\n00:07:02.710 --> 00:07:05.230\nThere's a lot of organizations that\nwill have put their dev environment\n\n137\n00:07:05.230 --> 00:07:07.290\nin a subdomain so they can isolate it.\n\n138\n00:07:07.290 --> 00:07:11.110\nOr their directories, like a Microsoft\nActive Directory needs a DNS zone.\n\n139\n00:07:11.110 --> 00:07:14.370\nAnd so you might do that as a separate\nsub that's hosted only locally,\n\n140\n00:07:14.370 --> 00:07:15.190\nnot even on the Internet.\n\n141\n00:07:15.190 --> 00:07:17.180\nYou can divide up based\non that as you need it.\n\n142\n00:07:17.180 --> 00:07:19.450\nSo kind of up to you,\nhow you wanna handle that.\n\n143\n00:07:19.450 --> 00:07:22.480\nBut when you look at\na full name like this,\n\n144\n00:07:22.480 --> 00:07:26.680\nthis is what called a fully\nqualified domain name, an FQDN.\n\n145\n00:07:26.680 --> 00:07:30.111\nAnd an FQDN has the name of\nthe host we're trying to reach,\n\n146\n00:07:30.111 --> 00:07:34.780\na subdomain if one exists,\na secondary level domain,\n\n147\n00:07:34.780 --> 00:07:38.270\na top level domain and\nthe final dot that indicates the root.\n\n148\n00:07:38.270 --> 00:07:41.820\nThat's what all adds up together\nto create that domain name,\n\n149\n00:07:41.820 --> 00:07:43.330\nthat fully qualified domain name.\n\n150\n00:07:44.570 --> 00:07:48.710\nAll right now, I mentioned zone files\na minute ago, let me double back on that.\n\n151\n00:07:48.710 --> 00:07:52.320\nWhen you buy a domain,\nyou own the domain itself.\n\n152\n00:07:52.320 --> 00:07:56.156\nYou would own for example,\namazon.com, right, or itpro.tv, or\n\n153\n00:07:56.156 --> 00:07:59.080\nwhatever it is you purchased,\nyou own that domain.\n\n154\n00:07:59.080 --> 00:08:02.653\nBut the domain doesn't work\nunless you have stuff in it.\n\n155\n00:08:02.653 --> 00:08:05.740\nYou have to have names to IPs,\nyou have to have mappings in place.\n\n156\n00:08:05.740 --> 00:08:08.550\nAnd those mappings,\nyou can store it in what's called a zone.\n\n157\n00:08:08.550 --> 00:08:11.500\nSo there's actually two different\npieces to setting this up, and\n\n158\n00:08:11.500 --> 00:08:17.320\nlet me get to the Route 53 panel to\nshow you guys what I'm talking about.\n\n159\n00:08:17.320 --> 00:08:19.944\nSo I'm gonna jump down under\nNetworking here and go in Route 53.\n\n160\n00:08:20.960 --> 00:08:24.430\nAnd when I go into Route 53, you'll\nsee these four things across the top.\n\n161\n00:08:24.430 --> 00:08:27.000\nDNS management, traffic management,\navailability monitoring, and\n\n162\n00:08:27.000 --> 00:08:28.390\ndomain registration.\n\n163\n00:08:28.390 --> 00:08:30.460\nOn the left side is DNS management, and\n\n164\n00:08:30.460 --> 00:08:34.950\nif I go in there,\nI'm managing my hosted zones.\n\n165\n00:08:34.950 --> 00:08:39.560\nSo these are domains that I purchased\nthat I need to have zone records for,\n\n166\n00:08:39.560 --> 00:08:42.180\na zone file that defines names to IPs.\n\n167\n00:08:42.180 --> 00:08:45.560\nBut if I look over here on the right,\nI'm got domain registration.\n\n168\n00:08:45.560 --> 00:08:49.050\nOkay, now I happen to have two\ndomains that I purchased and\n\n169\n00:08:49.050 --> 00:08:50.900\npurchased them through Amazon.\n\n170\n00:08:50.900 --> 00:08:54.420\nWell, one I purchased through Amazon,\nthe other one I moved in after the fact.\n\n171\n00:08:54.420 --> 00:08:58.330\nSo I've got two that I purchased and\nI've got those two zones hosted here.\n\n172\n00:08:59.570 --> 00:09:01.250\nBut it doesn't have to be that way,\n\n173\n00:09:01.250 --> 00:09:07.170\nI could have it registered somewhere else\nand just choose to host the zone here.\n\n174\n00:09:07.170 --> 00:09:08.560\nSo you can certainly do that, so\n\n175\n00:09:08.560 --> 00:09:13.060\nyou might have a bunch of hosted zones and\nno domain registrations.\n\n176\n00:09:13.060 --> 00:09:17.970\nSo remember that the registrar is\nseparate from the zone files, so it's\n\n177\n00:09:17.970 --> 00:09:22.530\nseparate from the server that's providing\nDNS service, two separate services there.\n\n178\n00:09:22.530 --> 00:09:25.030\nRoute 53 can be both,\nbut it doesn't have to.\n\n179\n00:09:26.670 --> 00:09:31.260\nAll right, so if I wanna get this setup,\nI wanna get support for\n\n180\n00:09:31.260 --> 00:09:34.920\ndoing DNS lookups, that zone file's\ngonna be really important to me.\n\n181\n00:09:34.920 --> 00:09:37.810\nThat's where the bulk of\nmy work is going to happen.\n\n182\n00:09:37.810 --> 00:09:39.180\nAnd when you go into Hosted Zones,\n\n183\n00:09:39.180 --> 00:09:43.350\nyou can create an all new Hosted Zone\nif you want and you can punch that in.\n\n184\n00:09:43.350 --> 00:09:47.080\nNow, I'm gonna talk about the records\ninside of a zone in a few minutes.\n\n185\n00:09:47.080 --> 00:09:49.400\nThere's one particular record\nthat's important, though,\n\n186\n00:09:49.400 --> 00:09:51.400\nthat lets us know to use the zone file.\n\n187\n00:09:51.400 --> 00:09:53.590\n&gt;&gt; So Don if I'm sitting\non my Mac right here and\n\n188\n00:09:53.590 --> 00:09:56.340\nI decide that I wanna go up to Amazon and\nI wanna purchase something.\n\n189\n00:09:56.340 --> 00:10:01.210\nAnd I'm gonna type in the web browser, I'm\ngonna type in let's say www.amazon.com,\n\n190\n00:10:01.210 --> 00:10:02.270\nwhat is my computer gonna do?\n\n191\n00:10:02.270 --> 00:10:06.520\nWhat is the process of finding that\nwebsite if I don't know the IP address?\n\n192\n00:10:06.520 --> 00:10:10.710\n&gt;&gt; Okay so the way it works and this ties\nin really well with how we create these\n\n193\n00:10:10.710 --> 00:10:16.470\nzone files, your machine, whether it's\nWindows or OS X or Linux or whatever.\n\n194\n00:10:16.470 --> 00:10:20.360\nThey have a process they follow, and\nthe process, unless it's been messed with,\n\n195\n00:10:20.360 --> 00:10:22.000\ncuz you can mess with these things.\n\n196\n00:10:22.000 --> 00:10:25.900\nBut the default is, they're gonna look for\na local host file first.\n\n197\n00:10:25.900 --> 00:10:28.565\nEvery system has this file\ncalled hosts and in it,\n\n198\n00:10:28.565 --> 00:10:32.760\nit can have name to IP mappings that\noverride anything else out there, right?\n\n199\n00:10:32.760 --> 00:10:37.400\nSo really useful for developers but\nnot really useful for end users.\n\n200\n00:10:37.400 --> 00:10:39.260\nSo it'll look at host file first.\n\n201\n00:10:39.260 --> 00:10:42.400\nIf it finds it there, great,\nit doesn't use a DNS server at all.\n\n202\n00:10:42.400 --> 00:10:45.836\nIf it doesn't find an answer there, then\nit'll use the cache, most servers cache,\n\n203\n00:10:45.836 --> 00:10:46.610\ndid I say servers?\n\n204\n00:10:46.610 --> 00:10:50.340\nWorkstations, laptops, whatever,\nthey cache their DNS results.\n\n205\n00:10:50.340 --> 00:10:54.770\nIf I just did a look up for amazon.com and\nI'm about to do a lookup again,\n\n206\n00:10:54.770 --> 00:10:55.798\nwhy do it again?\n\n207\n00:10:55.798 --> 00:10:57.912\nI already know the IP,\nI just had it a minute ago.\n\n208\n00:10:57.912 --> 00:11:01.030\nSo it'll usually cache records for\nfive minutes, ten minutes,\n\n209\n00:11:01.030 --> 00:11:03.549\nwhatever that operating system has chosen,\nthere's not a fixed value.\n\n210\n00:11:05.030 --> 00:11:09.970\nAfter that though, if those fail,\nthey go to the DNS servers, they reach\n\n211\n00:11:09.970 --> 00:11:13.410\nup to the DNS servers to get an answer,\nand they go to find an answer from there.\n\n212\n00:11:13.410 --> 00:11:15.873\nNow it's rare that you talk\nto just one DNS server,\n\n213\n00:11:15.873 --> 00:11:18.411\nyou normally do what's\ncalled a recursive lookup.\n\n214\n00:11:18.411 --> 00:11:21.765\nAnd the recursive lookup ties back to this\ndiagram that I was talking about where\n\n215\n00:11:21.765 --> 00:11:23.680\nyou have to go up to the root hint.\n\n216\n00:11:23.680 --> 00:11:26.420\nThat sends you down to the comm servers,\nyou go to the comm servers, you say,\n\n217\n00:11:26.420 --> 00:11:27.120\nI'm looking for Amazon.\n\n218\n00:11:27.120 --> 00:11:28.890\nThey send you to the Amazon servers and\n\n219\n00:11:28.890 --> 00:11:31.870\nthen the Amazon servers\ngive you the answer.\n\n220\n00:11:31.870 --> 00:11:36.010\nThat's where these zone files\nare actually stored is right there.\n\n221\n00:11:36.010 --> 00:11:40.630\nSo that process is happening every\ntime we do a look up, and I mentioned\n\n222\n00:11:40.630 --> 00:11:44.150\ncaching on the workstation side,\nthere's caching on the server side too.\n\n223\n00:11:44.150 --> 00:11:46.775\nFor example, in Route 53,\nwhen you do lookups and\n\n224\n00:11:46.775 --> 00:11:50.962\nyou're using Amazon as your primary web\nservers, or as your primary DNS servers.\n\n225\n00:11:50.962 --> 00:11:54.115\nIf they're having to do lookups on your\nbehalf, they're doing recursive lookups,\n\n226\n00:11:54.115 --> 00:11:56.310\nthey'll cache results to try and\nsave time.\n\n227\n00:11:56.310 --> 00:11:59.552\nSo when we create records, we're gonna\nsee in a moment that when we create those\n\n228\n00:11:59.552 --> 00:12:02.630\nrecords, that we might want a put a limit\non how long we allow our records to be\n\n229\n00:12:02.630 --> 00:12:04.650\ncached, cuz that can cause a problem.\n\n230\n00:12:04.650 --> 00:12:09.510\nImagine if I have a DNS record and\nit's pointing to an EC2 instance, right?\n\n231\n00:12:09.510 --> 00:12:13.360\nAnd my EC2 instance has\na particular IP address and so\n\n232\n00:12:13.360 --> 00:12:17.210\nthat's what my DNS server is pointing to,\nright?\n\n233\n00:12:17.210 --> 00:12:22.050\nAnd that record, let's just say\nit's being cached for six hours.\n\n234\n00:12:22.050 --> 00:12:26.520\nWell, something happens one day,\nmaybe I'm doing some maintenance and\n\n235\n00:12:26.520 --> 00:12:30.200\ninstead of choosing reboot,\nI accidentally choose shut down.\n\n236\n00:12:30.200 --> 00:12:33.260\nThat's not a big deal, it shuts down,\nI start it back up, no big deal right?\n\n237\n00:12:33.260 --> 00:12:35.840\nWell, unless I have an elastic IP,\nwhen you shut it down,\n\n238\n00:12:35.840 --> 00:12:37.740\nI might get a new IP when it boots up.\n\n239\n00:12:37.740 --> 00:12:43.410\nSo it boots up with a new IP address and\nnow I've gotta go update my DNS record.\n\n240\n00:12:43.410 --> 00:12:48.310\nBut the problem is that DNS record\ncould have been cached for six hours.\n\n241\n00:12:48.310 --> 00:12:52.974\nSo when I change it, it could be wrong for\nmy customers for up to six hours.\n\n242\n00:12:52.974 --> 00:12:57.241\nThat's a big outage, and it's not even\na real outage because the server's up,\n\n243\n00:12:57.241 --> 00:12:59.830\nit just got a new IP, that's a problem.\n\n244\n00:12:59.830 --> 00:13:04.080\nSo in our records you might wanna\nshorten what that cache time is, and\n\n245\n00:13:04.080 --> 00:13:06.710\nwe can do that,\nwe can set a TTL a time to live that says,\n\n246\n00:13:06.710 --> 00:13:09.580\nhey don't hold this record for\nmore than X amount of time.\n\n247\n00:13:09.580 --> 00:13:11.976\nAnd that way we can minimize\nthe impact of this, and\n\n248\n00:13:11.976 --> 00:13:14.561\nwe're gonna see that we almost\nalways want to do that.\n\n249\n00:13:14.561 --> 00:13:19.718\nRoute 53 is incredibly powerful,\nwe're using Amazon servers,\n\n250\n00:13:19.718 --> 00:13:23.160\nAmazon sees a little bit of traffic,\nright?\n\n251\n00:13:23.160 --> 00:13:26.960\nThey've got hundreds of thousands\nof customers that are operating\n\n252\n00:13:26.960 --> 00:13:29.700\ninside of AWS at the same time as you.\n\n253\n00:13:29.700 --> 00:13:33.760\nAnd they all need name lookup services and\nRoute 53 provides it, so\n\n254\n00:13:33.760 --> 00:13:35.080\nit's very powerful.\n\n255\n00:13:35.080 --> 00:13:37.620\nSo when we set short time to live,\n\n256\n00:13:37.620 --> 00:13:41.340\nshort cache times, well,\non a normal server we'd worry about that,\n\n257\n00:13:41.340 --> 00:13:43.960\nbecause it would increase network traffic,\nit would increase CPU utilization.\n\n258\n00:13:43.960 --> 00:13:47.580\nWe're having to do lookups more often\ncuz we're minimizing the cache, but with\n\n259\n00:13:47.580 --> 00:13:51.055\nAmazon, boy they got the infrastructure\nfor it, so why not take advantage of that?\n\n260\n00:13:51.055 --> 00:13:55.258\nSet a nice short time, maybe one minute,\nand now if there's ever a screw up and\n\n261\n00:13:55.258 --> 00:13:58.265\nthere shouldn't be a screw\nup in the first place right?\n\n262\n00:13:58.265 --> 00:14:01.765\nBut if there ever is a screw up, that we\nknow that within one minute I can have\n\n263\n00:14:01.765 --> 00:14:05.508\na new record pushed out and everybody\ngets updated and we're back in business.\n\n264\n00:14:05.508 --> 00:14:08.680\nSo that's the kind of thing we could take\nadvantage of with this infrastructure.\n\n265\n00:14:08.680 --> 00:14:12.490\n&gt;&gt; Don, if I'm sitting right in front\nof the AWS console like we are here and\n\n266\n00:14:12.490 --> 00:14:18.840\nI decide that maybe I want to host a zone\nin Route 53, where do I get started?\n\n267\n00:14:18.840 --> 00:14:20.070\nCan you show us that process?\n\n268\n00:14:20.070 --> 00:14:21.585\n&gt;&gt; All right, so what we need to do is,\n\n269\n00:14:21.585 --> 00:14:23.971\nwell I guess first off I need\nto get back into Route 53.\n\n270\n00:14:23.971 --> 00:14:26.400\n[LAUGH] That's a start.\n\n271\n00:14:26.400 --> 00:14:29.607\nAnd then from here I need to\nmake a decision, all right?\n\n272\n00:14:29.607 --> 00:14:33.926\nIf I need to buy a zone then I'm gonna go,\nI mean buy a domain, I'm gonna go up here\n\n273\n00:14:33.926 --> 00:14:37.760\nto my domain registration and\nI'll purchase that right through here.\n\n274\n00:14:37.760 --> 00:14:40.460\nNow, if you're supporting\nsomebody else's account and\n\n275\n00:14:40.460 --> 00:14:41.310\nyou don't know what they purchased,\n\n276\n00:14:41.310 --> 00:14:44.130\nyou can always go to registered domains\nand see the ones they've registered.\n\n277\n00:14:44.130 --> 00:14:47.310\nAnd you can see,\nI've actually registered these two, well,\n\n278\n00:14:47.310 --> 00:14:50.170\nit shows here as having been\nregistered through Amazon.\n\n279\n00:14:50.170 --> 00:14:55.240\nThe ITProTVdemo.com, I actually\ndid buy that right through Amazon.\n\n280\n00:14:55.240 --> 00:14:58.320\nThe other one, ITProTVdemo.net,\nI purchased through another registrar,\n\n281\n00:14:58.320 --> 00:15:02.400\nI believe I did hover.com,\nand I transferred it in.\n\n282\n00:15:02.400 --> 00:15:06.550\nSo now it is completely in the AWS\necosystem, and you can do that,\n\n283\n00:15:06.550 --> 00:15:09.670\nit's all in one place,\nnice and easy, right?\n\n284\n00:15:09.670 --> 00:15:16.060\nOr I could have left it in hover.com and\nthen put the zone files here.\n\n285\n00:15:16.060 --> 00:15:20.070\nThe way we do that is you would go to your\nregistrar where you already purchased\n\n286\n00:15:20.070 --> 00:15:21.380\nthe domain.\n\n287\n00:15:21.380 --> 00:15:24.330\nAnd inside of the record,\nat the registrar,\n\n288\n00:15:24.330 --> 00:15:28.540\nit has who the authoritative\nname servers are.\n\n289\n00:15:28.540 --> 00:15:32.050\nEvery DNS zone,\nevery domain name like this,\n\n290\n00:15:32.050 --> 00:15:36.670\nhas to have two authoritative\ndomain name servers.\n\n291\n00:15:36.670 --> 00:15:40.270\nSome systems will let you put in one, but\ntechnically that violates the standards.\n\n292\n00:15:40.270 --> 00:15:44.040\nSo you're always supposed to have\ntwo authoritative name servers and\n\n293\n00:15:44.040 --> 00:15:45.340\nit'll usually be your registrar.\n\n294\n00:15:45.340 --> 00:15:48.484\nYour registrar will provide\nthe name servers for that but\n\n295\n00:15:48.484 --> 00:15:53.083\nyou can go into GoDaddy or register.com or\none of the other ones that are out there.\n\n296\n00:15:53.083 --> 00:15:58.363\nAnd you can override their DNS servers and\nyou can point it into AWS, right.\n\n297\n00:15:58.363 --> 00:16:01.905\nIn AWS, if you registered the domain,\nit's already done for you.\n\n298\n00:16:01.905 --> 00:16:02.702\nYou don't have to worry about it, right?\n\n299\n00:16:02.702 --> 00:16:06.230\nSo if I take itprotvdemo.com,\nand I pull it up,\n\n300\n00:16:06.230 --> 00:16:10.610\nI can see right here\nthe authoritative name servers.\n\n301\n00:16:10.610 --> 00:16:15.120\nAuthoritative means, this name\nserver actually has the answer for\n\n302\n00:16:15.120 --> 00:16:17.240\nthat domain,\nit doesn't have to send to somebody else.\n\n303\n00:16:17.240 --> 00:16:18.490\nIt's got the answer, right?\n\n304\n00:16:20.130 --> 00:16:21.850\nIf I had a different register,\nI could go to them and\n\n305\n00:16:21.850 --> 00:16:23.190\nI could override those name servers.\n\n306\n00:16:23.190 --> 00:16:25.740\nAnd I could put in these values, right?\n\n307\n00:16:25.740 --> 00:16:28.520\nNow I went into the registered domains.\n\n308\n00:16:28.520 --> 00:16:29.890\nIf the domain's registered somewhere else,\n\n309\n00:16:29.890 --> 00:16:31.240\nI'm not gonna see anything\nwhen I come here.\n\n310\n00:16:31.240 --> 00:16:33.010\nI'm gonna click on this and\nit'll be empty.\n\n311\n00:16:33.010 --> 00:16:34.560\nSo how do I get those values?\n\n312\n00:16:34.560 --> 00:16:37.929\nWell, you go to hosted zones and\nyou just create a hosted zone.\n\n313\n00:16:37.929 --> 00:16:41.760\nAnd when you create that zone,\nyou specify what the domain name is.\n\n314\n00:16:41.760 --> 00:16:44.500\nAnd so\nlet's say that I'm buying donpezet.com.\n\n315\n00:16:44.500 --> 00:16:47.170\nWhoops, which I can type, there we go.\n\n316\n00:16:47.170 --> 00:16:50.070\nAnd I'll give it a comment,\nthis is my domain.\n\n317\n00:16:50.070 --> 00:16:52.890\nAnd I'll make it a public hosted zone.\n\n318\n00:16:52.890 --> 00:16:54.259\nIt doesn't have to be public, right.\n\n319\n00:16:54.259 --> 00:16:55.365\nThat's something we're pointing out at,\n\n320\n00:16:55.365 --> 00:16:57.320\nI'd mentioned Active Directory\ndomains earlier.\n\n321\n00:16:57.320 --> 00:17:01.297\nMicrosoft Active Directory\nneeds a DNSA server, right?\n\n322\n00:17:01.297 --> 00:17:03.917\nBut the DNS server is for\na bunch of internal machines for\n\n323\n00:17:03.917 --> 00:17:07.611\na zone that you don't necessarily want\nto be available to the public, right?\n\n324\n00:17:07.611 --> 00:17:10.909\nSo if that's the case and I got servers or\n\n325\n00:17:10.909 --> 00:17:16.838\nworkstations that are running in EC2\nthat need to be part of the domain.\n\n326\n00:17:16.838 --> 00:17:19.170\nI don't wanna expose my DNS to the public.\n\n327\n00:17:19.170 --> 00:17:23.370\nSo if I hit that dropdown box, what\nyou'll see is I can switch to a private\n\n328\n00:17:23.370 --> 00:17:26.560\nhosted zone for an Amazon VPC,\nfor a virtual private cloud.\n\n329\n00:17:26.560 --> 00:17:28.800\nSo if I choose that,\nnow it's gonna be private and\n\n330\n00:17:28.800 --> 00:17:31.410\nI can pick which VPC it's\ngonna be a part of, right?\n\n331\n00:17:31.410 --> 00:17:35.189\nSo if I was creating a subdomain for\nexample,\n\n332\n00:17:35.189 --> 00:17:39.375\nif I was doing like a ad.donpezet.com,\nright?\n\n333\n00:17:39.375 --> 00:17:40.295\nThis is just gonna be for\n\n334\n00:17:40.295 --> 00:17:42.770\nmy Active Directory,\nI don't want the world to see it.\n\n335\n00:17:42.770 --> 00:17:45.050\nI can attach that to a VPC.\n\n336\n00:17:45.050 --> 00:17:48.390\nNow it's private and I can host\nmy internal records and off I go.\n\n337\n00:17:48.390 --> 00:17:49.940\nSo you've got that functionality there.\n\n338\n00:17:49.940 --> 00:17:53.090\nBut if I'm trying to host my website,\nI probably wanna go public, so\n\n339\n00:17:53.090 --> 00:17:55.880\nthat people would be able\nto do lookups against this.\n\n340\n00:17:55.880 --> 00:17:58.970\nSo I'll stick with public on this one and\nI'll click Create.\n\n341\n00:17:58.970 --> 00:18:04.677\nNow, it didn't actually check to\nsee if I owned donpezet.com, right?\n\n342\n00:18:04.677 --> 00:18:05.970\nJust for the record, I do.\n\n343\n00:18:05.970 --> 00:18:07.920\nBut [LAUGH] it didn't checked.\n\n344\n00:18:07.920 --> 00:18:11.530\nSo I could have picked anything,\nI could have put microsoft.com in here,\n\n345\n00:18:11.530 --> 00:18:13.500\nit'll let you, right?\n\n346\n00:18:13.500 --> 00:18:17.310\nAnd it can do that because nobody\nin a world is gonna look here.\n\n347\n00:18:17.310 --> 00:18:19.840\nNo one in the entire\nplanet knows to look here,\n\n348\n00:18:20.900 --> 00:18:24.140\nunless the record is\nupdated at the registrar.\n\n349\n00:18:24.140 --> 00:18:25.270\nRemember the lookup right?\n\n350\n00:18:25.270 --> 00:18:27.477\nYou root hint, then you go to\nthe top level domain servers,\n\n351\n00:18:27.477 --> 00:18:29.690\nthen you go to the secondary\nlevel domain servers.\n\n352\n00:18:29.690 --> 00:18:34.016\nWell, the top-level domain servers\nare pointing to wherever microsoft.com or\n\n353\n00:18:34.016 --> 00:18:36.960\nwherever donpezet.com is hosted right now.\n\n354\n00:18:36.960 --> 00:18:38.660\nThey're not pointing to Amazon.\n\n355\n00:18:38.660 --> 00:18:42.370\nBut now that I've added it,\nI can look right here and\n\n356\n00:18:42.370 --> 00:18:45.670\nthen when I look at the records,\nI can see where it created two things.\n\n357\n00:18:45.670 --> 00:18:51.790\nA start of authority, which lets me know,\nthis is the authoritative name server and\n\n358\n00:18:51.790 --> 00:18:55.250\nthe four name servers\nthat Amazon provides us.\n\n359\n00:18:55.250 --> 00:18:56.280\nThat's the information I need.\n\n360\n00:18:56.280 --> 00:19:01.720\nI can take these four and\nI can go to my registrar,\n\n361\n00:19:01.720 --> 00:19:03.980\nwhoever that happens to be and\nI can put these records in.\n\n362\n00:19:05.220 --> 00:19:08.570\nHad I purchased this through Amazon\nthough, it would already be done for me.\n\n363\n00:19:08.570 --> 00:19:12.190\nBut donpezet.com is hosted somewhere else,\nI think it was actually on [INAUDIBLE].\n\n364\n00:19:12.190 --> 00:19:16.050\nSo I can go to Hubbard and\nI can put in two of these or all four.\n\n365\n00:19:16.050 --> 00:19:19.795\nLook what they've done,\n.com, .co.uk, .net, .org.\n\n366\n00:19:19.795 --> 00:19:22.890\nThey made sure to give us four\nservers in four different domains.\n\n367\n00:19:22.890 --> 00:19:25.650\n&gt;&gt; Don, these records that you're\ntalking about, do they happen to be\n\n368\n00:19:25.650 --> 00:19:29.910\nsome of the stored in that zone file\nthat you were mentioning to us earlier?\n\n369\n00:19:29.910 --> 00:19:32.040\nIs that what we see that's\nstored in the zone file?\n\n370\n00:19:32.040 --> 00:19:33.540\n&gt;&gt; This is actually the zone file.\n\n371\n00:19:33.540 --> 00:19:35.910\nWe're seeing it rendered in a GUI, right?\n\n372\n00:19:35.910 --> 00:19:37.720\nBut this is the zone file.\n\n373\n00:19:37.720 --> 00:19:41.980\nIt's stored as text basically on the\nbackend servers that we don't ever see.\n\n374\n00:19:41.980 --> 00:19:43.830\nSo it's nice that we don't\nhave to deal with that.\n\n375\n00:19:43.830 --> 00:19:45.580\nIf you already have DNS servers set up for\n\n376\n00:19:45.580 --> 00:19:48.100\nyour zone,\nyou might have exported that text file.\n\n377\n00:19:48.100 --> 00:19:49.010\nAnd you can import it right in,\n\n378\n00:19:49.010 --> 00:19:52.400\nit's a quick way to get those\nrecords in place and off you go.\n\n379\n00:19:52.400 --> 00:19:54.620\nSpeaking of which,\nlet's talk about those records, right.\n\n380\n00:19:54.620 --> 00:19:57.290\nIf I go in here and\nI'm gonna hit Create Record Set.\n\n381\n00:19:57.290 --> 00:20:00.490\nWhen I go to Create a Record Set,\nyou'll see the records that we can make.\n\n382\n00:20:00.490 --> 00:20:02.360\nAnd by default, it's an A record, right?\n\n383\n00:20:02.360 --> 00:20:06.348\nSo if I wanna make www.donpezet.com and\nthere's that trailing dot,\n\n384\n00:20:06.348 --> 00:20:10.630\nsee Amazon does a really good job\nabout following the standards.\n\n385\n00:20:10.630 --> 00:20:12.920\nNow I can come in and\nI can point that to an IP address.\n\n386\n00:20:12.920 --> 00:20:16.670\nAnd so that might be pointing to\nwhatever my IP happens to be, right?\n\n387\n00:20:16.670 --> 00:20:18.180\nI'll just put in a fake one.\n\n388\n00:20:18.180 --> 00:20:21.740\nNow when I put that in,\nI can also adjust the time to live and\n\n389\n00:20:21.740 --> 00:20:23.950\nthe default is five minutes for\nmy website.\n\n390\n00:20:23.950 --> 00:20:27.890\nFive minutes in downtime is no big deal,\nbut if you're Amazon and\n\n391\n00:20:27.890 --> 00:20:30.050\nyou're doing a million\ndollars in sales per hour or\n\n392\n00:20:30.050 --> 00:20:32.800\nsomething ridiculous like that,\nthat's a big deal.\n\n393\n00:20:32.800 --> 00:20:35.440\nSo you might wanna choose\nsomething smaller, one minute or\n\n394\n00:20:35.440 --> 00:20:36.660\neven smaller than that.\n\n395\n00:20:36.660 --> 00:20:38.670\nI might just want 30 seconds, right?\n\n396\n00:20:38.670 --> 00:20:42.180\nAnd you can come in and put in whatever\nvalue it is that you need to minimize it.\n\n397\n00:20:42.180 --> 00:20:45.250\nYou can't disable the cache but\nyou can set it to really low levels.\n\n398\n00:20:45.250 --> 00:20:48.830\n&gt;&gt; Don, can I assume that that\nDNS also works with IPv6 as well?\n\n399\n00:20:48.830 --> 00:20:49.750\n&gt;&gt; Absolutely, yeah.\n\n400\n00:20:49.750 --> 00:20:51.230\nWhat I'm looking at\nhere is an A record and\n\n401\n00:20:51.230 --> 00:20:53.490\nA records are designed for IPv4, right?\n\n402\n00:20:53.490 --> 00:20:58.310\nBut if you drop that down you'll see\nfour A records, which are right here.\n\n403\n00:20:58.310 --> 00:20:59.650\nAnd four A records are designed for IPv6.\n\n404\n00:21:00.880 --> 00:21:06.100\nThat name 4A,\nyou've got an IPv4 address is 32 bits but\n\n405\n00:21:06.100 --> 00:21:08.840\nan IPv6 address is 128 bits.\n\n406\n00:21:08.840 --> 00:21:12.810\nAnd so it's got four times the bits\nwhich is why they do 4A on that one.\n\n407\n00:21:12.810 --> 00:21:15.580\nSo those are the two main record types.\n\n408\n00:21:15.580 --> 00:21:18.550\nA and 4A records are doing\na name to an IP, right?\n\n409\n00:21:18.550 --> 00:21:20.850\nSome of the other records\nyou'll see in the list, CNAMEs,\n\n410\n00:21:20.850 --> 00:21:22.998\nyou're gonna use the heck out of CNAMEs.\n\n411\n00:21:22.998 --> 00:21:29.840\nCuz a CNAME is a canonical name or alias\nwhere one name points to another name.\n\n412\n00:21:29.840 --> 00:21:33.500\nI might want www.donpezet.com to\n\n413\n00:21:33.500 --> 00:21:36.710\npoint to that EC2 instance that\nI had in the back there, right.\n\n414\n00:21:36.710 --> 00:21:40.380\nWell, the EC2 instance had a long name\nthat had its IP and all that other stuff,\n\n415\n00:21:40.380 --> 00:21:42.160\nI don't wanna give that to my customers.\n\n416\n00:21:42.160 --> 00:21:44.667\nBut here l can come in say\nI'm gonna do a CNAME and\n\n417\n00:21:44.667 --> 00:21:48.204\nl want the CNAME the point to\nwhatever that happened to be, right?\n\n418\n00:21:48.204 --> 00:21:55.060\nLongname.aws.amazon.com or whatever\nhappens to be and l can punch that in.\n\n419\n00:21:55.060 --> 00:21:58.810\nAnd now this name will resolve to\nthe IP of this name down here,\n\n420\n00:21:58.810 --> 00:22:01.300\nthe customer never has to\nsee that alternate name.\n\n421\n00:22:01.300 --> 00:22:03.700\nThat's really handy because\nto be honest with you,\n\n422\n00:22:03.700 --> 00:22:07.290\nif the website is important to you,\nyou're not gonna point to an instance.\n\n423\n00:22:07.290 --> 00:22:09.020\nYou're gonna point to a load balancer.\n\n424\n00:22:09.020 --> 00:22:10.470\nYou're gonna point to\nan elastic load balancer.\n\n425\n00:22:10.470 --> 00:22:14.540\nAnd ELBs always have really long crazy\nnames that you don't wanna give to people.\n\n426\n00:22:14.540 --> 00:22:18.870\nHere, we can point right to them and\nit's no big deal because it's an alias,\n\n427\n00:22:18.870 --> 00:22:20.110\nit's a CNAME.\n\n428\n00:22:20.110 --> 00:22:23.170\nPeople just type in www, they don't know\nthere's a load balancer behind the scenes.\n\n429\n00:22:24.260 --> 00:22:25.040\nSome of the other records,\n\n430\n00:22:25.040 --> 00:22:27.910\nlet me go through these kind of quick\ncuz I know I'm somewhat short on time.\n\n431\n00:22:27.910 --> 00:22:30.740\nWe've got MX records for Mail exchange,\nright, if you have email servers,\n\n432\n00:22:30.740 --> 00:22:32.700\npeople need to know\nwhere to send the email.\n\n433\n00:22:32.700 --> 00:22:35.656\nYou've got TXT records which can be\nused for [INAUDIBLE] or anything.\n\n434\n00:22:35.656 --> 00:22:38.178\nThey were originally created\nto put notes in DNS, but\n\n435\n00:22:38.178 --> 00:22:40.148\nnow they're used by all sorts of things.\n\n436\n00:22:40.148 --> 00:22:44.360\nOne of the most important things they're\nused for is the Sender Policy Framework.\n\n437\n00:22:44.360 --> 00:22:47.400\nSPF is an anti-spam technology.\n\n438\n00:22:47.400 --> 00:22:50.765\nAnd in the early days, they actually\ncreated a dedicated record for\n\n439\n00:22:50.765 --> 00:22:51.539\nit called SPF.\n\n440\n00:22:51.539 --> 00:22:56.450\nBut they had problems getting a number of\nthe DNS vendors out there to support it.\n\n441\n00:22:56.450 --> 00:23:00.820\nThe DNS server software just\nwasn't rapidly adopting it.\n\n442\n00:23:00.820 --> 00:23:01.860\nAnd so they finally said, you know what?\n\n443\n00:23:01.860 --> 00:23:02.380\nForget that.\n\n444\n00:23:02.380 --> 00:23:05.450\nInstead of using dedicated records,\nlet's just use TXT.\n\n445\n00:23:05.450 --> 00:23:10.170\nAnd so now with the official version of\nSPF that's supported all over the world,\n\n446\n00:23:10.170 --> 00:23:11.686\nit's used as regular TXT record.\n\n447\n00:23:11.686 --> 00:23:14.003\nSo this record is not even\nsupported anymore, but\n\n448\n00:23:14.003 --> 00:23:17.052\nAmazon puts it there because again,\nthey follow the standards.\n\n449\n00:23:17.052 --> 00:23:20.700\nWe got PTRs, PTRs are the opposite\nof what we normally do.\n\n450\n00:23:20.700 --> 00:23:24.520\nWe normally do a name to an IP,\na PTR does an IP to a name,\n\n451\n00:23:24.520 --> 00:23:26.460\nenabling reverse lookups of a server.\n\n452\n00:23:27.510 --> 00:23:30.820\nSRVs are service locators,\nthese help us to find not a server,\n\n453\n00:23:30.820 --> 00:23:33.400\nnot an instance, but a service.\n\n454\n00:23:33.400 --> 00:23:36.409\nI might be looking to find\nan Active Directory domain controller,\n\n455\n00:23:36.409 --> 00:23:39.162\nI don't know the servers name,\nI can't look it up that way.\n\n456\n00:23:39.162 --> 00:23:41.016\nI don't know the servers IP,\nI can't look it up that way either,\n\n457\n00:23:41.016 --> 00:23:42.880\nI just know I'm looking for\nActive Directory.\n\n458\n00:23:42.880 --> 00:23:47.160\nAnd so I can jump in and look for an SRV\nrecord and it will point me to a server.\n\n459\n00:23:47.160 --> 00:23:50.942\nNeat part of that is it can point to\nan IP, as well as a port number, so we can\n\n460\n00:23:50.942 --> 00:23:54.744\nactually get a little more detailed,\na little more granular on that one.\n\n461\n00:23:54.744 --> 00:23:57.498\nWe got Name Authority Pointers,\nwhich are for\n\n462\n00:23:57.498 --> 00:24:00.190\nus to point to other\nauthoritative servers.\n\n463\n00:24:00.190 --> 00:24:02.360\nIf you actually have a different\nauthoritative server, and\n\n464\n00:24:02.360 --> 00:24:05.450\nthis one's like a replica,\nwe can point to another one.\n\n465\n00:24:05.450 --> 00:24:07.520\nAnd then the Name servers themselves,\nright.\n\n466\n00:24:07.520 --> 00:24:10.170\nYou'll notice I've already got\nsome name servers over here\n\n467\n00:24:10.170 --> 00:24:13.070\nthat were created because I'm saying\nthat it's gonna be hosted by Amazon.\n\n468\n00:24:13.070 --> 00:24:15.200\nBut in theory I might wanna\nhave it hosted somewhere else,\n\n469\n00:24:15.200 --> 00:24:17.390\nI could put those in there.\n\n470\n00:24:17.390 --> 00:24:19.550\nAnd then lastly, SOA,\nyou can only have one SOA record,\n\n471\n00:24:19.550 --> 00:24:20.700\nand so that's why it's grayed out.\n\n472\n00:24:20.700 --> 00:24:22.090\nI can't create another one, but\n\n473\n00:24:22.090 --> 00:24:24.350\nyou can take a look at\nthe one that's already there.\n\n474\n00:24:24.350 --> 00:24:28.750\nAnd here's the entry for that start of\nauthority, right, so it's punched in, and\n\n475\n00:24:28.750 --> 00:24:33.150\nthat's the authoritative name server, or\nthe authoritative server for this zone.\n\n476\n00:24:33.150 --> 00:24:37.430\nAll right so those are a little\nsome of the different records here,\n\n477\n00:24:37.430 --> 00:24:38.690\nit's pretty easy to work with.\n\n478\n00:24:38.690 --> 00:24:39.780\nHe's got a nice little GUI,\n\n479\n00:24:39.780 --> 00:24:42.850\nthis all is fully supported on\nthe API on the backend also, so\n\n480\n00:24:42.850 --> 00:24:45.850\nif you use the command line or automation\ntools they're all supported too.\n\n481\n00:24:45.850 --> 00:24:49.590\n&gt;&gt; Don, one of the fields that I seen\nthere, where you were creating that zone,\n\n482\n00:24:49.590 --> 00:24:51.230\nwas something called a routing policy.\n\n483\n00:24:51.230 --> 00:24:52.970\nCan you tell us a little\nbit about routing policies?\n\n484\n00:24:52.970 --> 00:24:55.210\nWhat do they mean and\nhow do they affect our DNS?\n\n485\n00:24:55.210 --> 00:24:57.782\n&gt;&gt; All right, resolving a name to an IP,\nthat's not a big deal,\n\n486\n00:24:57.782 --> 00:25:00.630\nthere's a 100 DNS servers\nout there that can do that.\n\n487\n00:25:00.630 --> 00:25:03.640\nIn a given moment you can spin one\nup yourself, it's no big deal.\n\n488\n00:25:03.640 --> 00:25:07.120\nThe bells and whistles that Amazon adds,\nthat's the value of Route 53 and\n\n489\n00:25:07.120 --> 00:25:10.660\nthe routing policies are probably the\nbiggest bell and whistle that there is.\n\n490\n00:25:10.660 --> 00:25:14.670\nSo when we create a record, right, let me\ngo back to creating a record set here.\n\n491\n00:25:14.670 --> 00:25:17.640\nAnd I'll create www.donpezet and\n\n492\n00:25:17.640 --> 00:25:21.690\nI'm gonna switch this one over to well\nI'll stick with an A record, why not.\n\n493\n00:25:21.690 --> 00:25:23.820\nOkay, so when I start to define this and\n\n494\n00:25:23.820 --> 00:25:25.320\nI come down here you'll\nsee the Routing Policy.\n\n495\n00:25:25.320 --> 00:25:28.790\nThe default routing policy is simple,\nname to IP.\n\n496\n00:25:28.790 --> 00:25:33.030\nBut I can switch that and\nI can go Weighted, Latency, Failover, or\n\n497\n00:25:33.030 --> 00:25:34.560\nGeolocation.\n\n498\n00:25:34.560 --> 00:25:38.445\nI might have more than one server that\ncan respond over this domain name.\n\n499\n00:25:38.445 --> 00:25:42.886\nAnd I can dictate how people\nget to those servers,\n\n500\n00:25:42.886 --> 00:25:48.397\nI might have one EC2 instance\nthat is a m48x large, right?\n\n501\n00:25:48.397 --> 00:25:52.590\nAnd I might have another\none that's just a m4 large.\n\n502\n00:25:52.590 --> 00:25:56.030\nSo I might want the bulk of my\ntraffic to go to one server and\n\n503\n00:25:56.030 --> 00:25:57.080\na smaller amount to go to the other.\n\n504\n00:25:57.080 --> 00:25:59.760\nSo I can set up a weighted\npolicy to indicate\n\n505\n00:25:59.760 --> 00:26:01.410\nwhich destination I want these to hit.\n\n506\n00:26:01.410 --> 00:26:06.270\nI get more than one record with different\nweights, I can do a latency record.\n\n507\n00:26:06.270 --> 00:26:08.810\nThese are really cool cuz I might\nhave more than one server spread\n\n508\n00:26:08.810 --> 00:26:10.200\nacross regions.\n\n509\n00:26:10.200 --> 00:26:14.710\nAnd I can send people to the right\nregion based on the lowest latency.\n\n510\n00:26:14.710 --> 00:26:17.290\nSo they'd go to the fastest\nserver they can get to,\n\n511\n00:26:17.290 --> 00:26:21.010\nthat's a great way to create a good\nexperience for your end users.\n\n512\n00:26:21.010 --> 00:26:26.290\nWe've also got Failover where I\nalways send to a primary server.\n\n513\n00:26:26.290 --> 00:26:27.170\nBut, if for some reason,\n\n514\n00:26:27.170 --> 00:26:30.640\nthe primary server becomes unavailable,\nwe can go to a secondary.\n\n515\n00:26:30.640 --> 00:26:33.800\nAnd we can flip over to the secondary\nserver, now to set that up you also need\n\n516\n00:26:33.800 --> 00:26:38.210\na health check, and a health check is how\nwe know that the primary is broken, right.\n\n517\n00:26:38.210 --> 00:26:41.000\nIf I've got a web server I can create\na health check that says can you pull\n\n518\n00:26:41.000 --> 00:26:41.510\nup the web page?\n\n519\n00:26:41.510 --> 00:26:45.290\nAnd if you can't pull up the web page\nthen send people to the secondary, right.\n\n520\n00:26:45.290 --> 00:26:48.270\nSo we can have that failover and\nit'll only go to the secondary during\n\n521\n00:26:48.270 --> 00:26:51.180\na failover, and\nthen the last one is Geoiocation.\n\n522\n00:26:51.180 --> 00:26:56.100\nThat's one of my favorites, which is where\nwe send people to different web servers or\n\n523\n00:26:56.100 --> 00:26:56.900\nwhatever the resource is.\n\n524\n00:26:56.900 --> 00:26:59.110\nI keep saying web server\ncuz that's the most common,\n\n525\n00:26:59.110 --> 00:27:00.620\nbased on where they're located.\n\n526\n00:27:00.620 --> 00:27:05.560\nI might have EC2 instances in Asia,\nand I might have some in Africa, and\n\n527\n00:27:05.560 --> 00:27:06.560\nsome in Europe.\n\n528\n00:27:06.560 --> 00:27:09.284\nAnd so if a customer,\na visitor is coming from Europe,\n\n529\n00:27:09.284 --> 00:27:11.369\nI want them to go to the European servers.\n\n530\n00:27:11.369 --> 00:27:13.888\nI don't want them to come to\nthe US servers, it's further away.\n\n531\n00:27:13.888 --> 00:27:16.774\nAnd so,\nbased on geolocation of their IP address,\n\n532\n00:27:16.774 --> 00:27:20.817\nI can return to them IPs of instances\nthat are in the same region as them.\n\n533\n00:27:20.817 --> 00:27:24.090\nAgain, improving their experience and\ngiving them better access.\n\n534\n00:27:25.710 --> 00:27:28.600\nAll right, so those are some of the tools,\n\n535\n00:27:28.600 --> 00:27:31.680\nsome of the tricks of the trade that\nwe have kind of behind the scenes.\n\n536\n00:27:31.680 --> 00:27:35.450\nAnd you guys start to see how we're\ndifferentiated from a regular DNS server.\n\n537\n00:27:35.450 --> 00:27:36.750\nThis is pretty powerful stuff.\n\n538\n00:27:36.750 --> 00:27:38.470\n&gt;&gt; Don,\nyou mentioned things like failover,\n\n539\n00:27:38.470 --> 00:27:39.910\nyou mentioned things like health check.\n\n540\n00:27:39.910 --> 00:27:42.270\nIs there a way that, inside of Route 53,\n\n541\n00:27:42.270 --> 00:27:45.860\nthat we can build a little bit of\nresiliency to things like failover?\n\n542\n00:27:45.860 --> 00:27:50.160\n&gt;&gt; Absolutely, so let me give you the best\nuse case scenario here, for Route 53.\n\n543\n00:27:50.160 --> 00:27:53.720\nIf you really wanna take advantage of\nthis, and it spans more than one product,\n\n544\n00:27:53.720 --> 00:27:55.070\nas any solution does.\n\n545\n00:27:55.070 --> 00:27:58.180\nSo if you're a solutions architect,\nand somebody comes to you, and says,\n\n546\n00:27:58.180 --> 00:27:59.680\nhey, I have this web app.\n\n547\n00:27:59.680 --> 00:28:01.230\nIt's great,\nit's gonna be the next Twitter.\n\n548\n00:28:01.230 --> 00:28:04.640\nSo, we need this thing to be highly\navailable, highly redundant,\n\n549\n00:28:04.640 --> 00:28:05.655\nwe need this thing always online.\n\n550\n00:28:05.655 --> 00:28:07.940\nYou have to start looking at it saying,\nall right,\n\n551\n00:28:07.940 --> 00:28:09.540\nwell we're gonna need\nmore than one instance.\n\n552\n00:28:09.540 --> 00:28:13.090\nAnd we're gonna need to spread it across,\nat least availability zones in a region,\n\n553\n00:28:13.090 --> 00:28:15.540\nbut we probably need to\nspan across regions, right.\n\n554\n00:28:15.540 --> 00:28:18.550\nAnd so you start looking at technologies\nlike elastic load balancers.\n\n555\n00:28:18.550 --> 00:28:22.950\nOkay, I can do an auto scaling group of\nweb servers, so it can grow on demand.\n\n556\n00:28:22.950 --> 00:28:24.320\nThey're gonna be the next Twitter, so\n\n557\n00:28:24.320 --> 00:28:26.610\nI might need five servers today and\n500 tomorrow.\n\n558\n00:28:26.610 --> 00:28:30.820\nSo we do an auto scaling group, great,\nI'll stick that behind a load balancer.\n\n559\n00:28:30.820 --> 00:28:34.720\nBecause the load balancer is gonna make\nsure we spread across all 500 instances or\n\n560\n00:28:34.720 --> 00:28:36.840\nhowever many more instances I spin up.\n\n561\n00:28:36.840 --> 00:28:38.330\nAll right, so I got a load balancer,\n\n562\n00:28:38.330 --> 00:28:42.360\nwell a load balancer can spread resources\nacross more than one availability zone.\n\n563\n00:28:42.360 --> 00:28:43.030\nGreat, so\n\n564\n00:28:43.030 --> 00:28:48.370\nI tune my autoscaling group to spread\nmy instances across more than one AZ.\n\n565\n00:28:48.370 --> 00:28:54.480\nI create an ELB in front of it,\nwell an ELB is tied to one region.\n\n566\n00:28:54.480 --> 00:28:56.430\nI can only have an ELB cover one region,\nso\n\n567\n00:28:56.430 --> 00:29:00.820\nif I create one in US East,\nwhat if I wanna put instances in US West?\n\n568\n00:29:00.820 --> 00:29:03.285\nToo bad, well it's not too bad.\n\n569\n00:29:03.285 --> 00:29:07.040\nYou just create a load balancer in US\nWest, and then you create a load balancer\n\n570\n00:29:07.040 --> 00:29:13.080\nin Asia North Pacific, North East,\nand you create one in Europe West.\n\n571\n00:29:13.080 --> 00:29:17.340\nYou create load balancers\nthe EOB's in each region, and\n\n572\n00:29:17.340 --> 00:29:19.700\nyou create instances behind them,\nauto scaling groups,\n\n573\n00:29:19.700 --> 00:29:22.170\nall the infrastructure you\nneed behind them, all rigth.\n\n574\n00:29:22.170 --> 00:29:25.340\nThen, now you've got more than one ELB.\n\n575\n00:29:25.340 --> 00:29:28.050\nThat's when you come to Route 53, and\n\n576\n00:29:28.050 --> 00:29:33.480\nin Route 53 you can create either\na latency routing policy or\n\n577\n00:29:33.480 --> 00:29:39.020\na geolocation routing policy that\nincludes all of your load balancers.\n\n578\n00:29:39.020 --> 00:29:41.860\nAnd it send people to the appropriate\nload balancer for their region, and\n\n579\n00:29:41.860 --> 00:29:44.630\nthey hit instances for their region.\n\n580\n00:29:44.630 --> 00:29:45.850\nAnd if one of them fails and\n\n581\n00:29:45.850 --> 00:29:51.120\ngoes offline, if it's a latency policy\nthey just go to the next best one.\n\n582\n00:29:51.120 --> 00:29:53.930\nIf it's a geolocation they go to the\ndefault, with geolocation you always set\n\n583\n00:29:53.930 --> 00:29:56.770\na default region and so\nyou'll end up going to the default.\n\n584\n00:29:56.770 --> 00:30:00.160\nSo whichever one kinda works out\nbetter for your environment you pick.\n\n585\n00:30:00.160 --> 00:30:02.830\nOnce you do that now you've\ngot high availability,\n\n586\n00:30:02.830 --> 00:30:06.170\nnow you can survive even\nan entire region failing.\n\n587\n00:30:06.170 --> 00:30:11.600\nSo not an availability zone, but a whole\nregion, if all of USE's failed, big deal.\n\n588\n00:30:11.600 --> 00:30:14.360\nYou got load balancers and\nauto scaling groups in the other regions.\n\n589\n00:30:14.360 --> 00:30:16.880\nRoute 53 is making sure that\nyou're spread across there.\n\n590\n00:30:16.880 --> 00:30:19.575\nRoute 53 is automatically\nreplicated across all the regions,\n\n591\n00:30:19.575 --> 00:30:20.704\nAmazon takes care of that.\n\n592\n00:30:20.704 --> 00:30:22.630\nSo, you're covered, right?\n\n593\n00:30:22.630 --> 00:30:28.050\nWell, we can go even a little bit further\non this as we start to set all these up.\n\n594\n00:30:28.050 --> 00:30:30.480\nWe can do health checks to make\nsure that we're monitoring,\n\n595\n00:30:30.480 --> 00:30:33.280\nto make sure that each of these\nregions are up and going.\n\n596\n00:30:33.280 --> 00:30:36.150\nBut if something really\ndisastrous happened,\n\n597\n00:30:36.150 --> 00:30:39.060\nlet's say it was a human error,\nright, these things happen.\n\n598\n00:30:39.060 --> 00:30:42.020\nYou push out a bad copy\nof your application, and\n\n599\n00:30:42.020 --> 00:30:45.670\nthe bad copy replicated\nto all of the regions.\n\n600\n00:30:45.670 --> 00:30:47.830\nAnd so now your application is broken,\nright, and\n\n601\n00:30:47.830 --> 00:30:50.600\nit doesn't matter which region you go to,\nit's broken on every one.\n\n602\n00:30:50.600 --> 00:30:54.640\nYou can use a failover routing\npolicy to then say, okay,\n\n603\n00:30:54.640 --> 00:30:58.270\nif the primary failed let's\ngo to this failover one.\n\n604\n00:30:58.270 --> 00:31:02.700\nAnd a popular thing to do\nhere is to set up a website,\n\n605\n00:31:02.700 --> 00:31:04.575\na static website hosted in Amazon S3.\n\n606\n00:31:04.575 --> 00:31:08.790\nCuz S3 is super highly available, and\nspread out so we can create a static\n\n607\n00:31:08.790 --> 00:31:13.670\nwebsite, chuck it in S3 that has\na we'll be back shortly web page.\n\n608\n00:31:13.670 --> 00:31:15.891\nSorry our page is down, or\nthe Twitter fail whale or\n\n609\n00:31:15.891 --> 00:31:17.553\nwhatever it is that you want on there.\n\n610\n00:31:17.553 --> 00:31:19.824\nAnd so yes, our main application failed,\n\n611\n00:31:19.824 --> 00:31:22.232\nbut now we control\nthe experience users get.\n\n612\n00:31:22.232 --> 00:31:25.364\nInstead of them getting a 404 or\nserver 500 or whatever error,\n\n613\n00:31:25.364 --> 00:31:29.036\nthey get a nice little page that says hey\nsorry we're experiencing difficulties\n\n614\n00:31:29.036 --> 00:31:30.722\nwe'll be back online soon, right.\n\n615\n00:31:30.722 --> 00:31:35.119\nSo now we've got high availability,\nreliability, durability and even if there\n\n616\n00:31:35.119 --> 00:31:39.722\nis a failure that goes beyond all that, we\nat least control the experience users get.\n\n617\n00:31:39.722 --> 00:31:44.972\nThat's all thanks to Route 53, so,\nwhile elastic load balancers are awesome,\n\n618\n00:31:44.972 --> 00:31:50.230\nauto scaling groups are awesome,\nmulti AZ database deployments are awesome.\n\n619\n00:31:50.230 --> 00:31:52.060\nWhile all these things are awesome,\n\n620\n00:31:52.060 --> 00:31:57.150\nby themselves they're fairly\nlimited in how they can help you.\n\n621\n00:31:57.150 --> 00:32:01.180\nBut when they're all tucked behind Route\n53, that's where the real power is.\n\n622\n00:32:01.180 --> 00:32:05.100\nAnd now you're a powerhouse, now you've\ngot an application that is global, and\n\n623\n00:32:05.100 --> 00:32:06.830\ncan take advantage of all the resources.\n\n624\n00:32:06.830 --> 00:32:10.200\nSo that's really the best use\ncase scenario for Route 53.\n\n625\n00:32:10.200 --> 00:32:13.220\n&gt;&gt; Don, that's a lot of great information\nand we hope for you, the viewer out there,\n\n626\n00:32:13.220 --> 00:32:17.150\nthat's resolved questions\nto answers there for you.\n\n627\n00:32:17.150 --> 00:32:19.440\nNow it does look like we're coming to\nthe end of another episode, Don, but\n\n628\n00:32:19.440 --> 00:32:22.440\nbefore we do do you have any additional\nwords that you might like to impart to our\n\n629\n00:32:22.440 --> 00:32:23.810\nviewers when it comes to Route 53?\n\n630\n00:32:23.810 --> 00:32:26.610\n&gt;&gt; Main thing is get in there and\nmess around with it because you'll find\n\n631\n00:32:26.610 --> 00:32:29.290\nthat there's a lot of neat options\nin there that you can tweak and see.\n\n632\n00:32:29.290 --> 00:32:32.620\nIt is super easy to use,\nit makes it one of my favorite services.\n\n633\n00:32:32.620 --> 00:32:34.090\nBut it's also just very powerful,\n\n634\n00:32:34.090 --> 00:32:36.760\nso make sure you're taking\nadvantage of all those features.\n\n635\n00:32:36.760 --> 00:32:39.910\nThe best feature, that I didn't talk\nabout with Route 53, is how cheap it is.\n\n636\n00:32:39.910 --> 00:32:43.640\nIt is insanely inexpensive to run,\nso there's no excuse to not use it.\n\n637\n00:32:43.640 --> 00:32:45.920\nYou really,\nreally should take advantage of it.\n\n638\n00:32:45.920 --> 00:32:49.300\n&gt;&gt; All right, Don, as always, we\nappreciate having you here in the studios\n\n639\n00:32:49.300 --> 00:32:51.420\nwith us, and\nwe appreciate you the viewer watching.\n\n640\n00:32:51.420 --> 00:32:55.210\nWe're gonna go ahead and sign out for\nITProTV, I've been you host Wes Bryan.\n\n641\n00:32:55.210 --> 00:32:57.684\n&gt;&gt; And I'm Don Pezet.\n&gt;&gt; And we'll see you next time.\n\n642\n00:32:57.684 --> 00:33:04.408\n[MUSIC]\n\n643\n00:33:04.408 --> 00:33:07.495\nThank you for watching ITProTV.\n\n",
          "vimeoId": "209554477"
        }
      ],
      "title": "DNS and Amazon Route 53"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don take a look at AWS’s Amazon ElasticaCache. They will look at design considerations through availability zones (AZ), uses Multi-AZ replication, Memcached,  Redis, scalability and access control through IAM.",
          "length": "1293",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-10-1-amazon_elasticache-031517-PGM.00_21_18_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-10-1-amazon_elasticache-031517-PGM.00_21_18_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-10-1-amazon_elasticache-031517-PGM.00_21_18_01.Still001-sm.jpg",
          "title": "Amazon ElastiCache",
          "transcript": "WEBVTT\n\n1\n00:00:00.250 --> 00:00:03.578\nWelcome to IT Pro TV,\nI'm your host Don Pezet.\n\n2\n00:00:03.578 --> 00:00:05.849\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.849 --> 00:00:08.259\n[MUSIC]\n\n4\n00:00:08.259 --> 00:00:11.699\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:11.699 --> 00:00:14.760\n&gt;&gt; Hello everybody welcome\nto the IT Pro TV studios.\n\n6\n00:00:14.760 --> 00:00:17.150\nI'm your host Wes Bryan and\nwe got a great show for you today.\n\n7\n00:00:17.150 --> 00:00:20.740\nWe are continuing through\nour series in ACSAA.\n\n8\n00:00:20.740 --> 00:00:23.550\nJoining us back in the studios today\nis none other than Mister Don Pezet.\n\n9\n00:00:23.550 --> 00:00:24.690\nDon, how you doing sir.\n\n10\n00:00:24.690 --> 00:00:25.640\n&gt;&gt; I'm doing great Wes.\n\n11\n00:00:25.640 --> 00:00:28.950\nReady to dive into the world\nof database query cashing.\n\n12\n00:00:28.950 --> 00:00:34.450\nWhich is, really the key component that\nwe get with Amazon AWS elasticash.\n\n13\n00:00:34.450 --> 00:00:38.170\nElasticash is a really neat technology\nthat's part of the AWS suite.\n\n14\n00:00:38.170 --> 00:00:40.250\nAnd it allows us to\noptimize database queries.\n\n15\n00:00:40.250 --> 00:00:44.950\nAnd that is a super important\npiece of any web application.\n\n16\n00:00:44.950 --> 00:00:46.110\nSo let's start there.\n\n17\n00:00:46.110 --> 00:00:49.490\nReally, basically, what the heck I'm\ntalking about in the first place.\n\n18\n00:00:49.490 --> 00:00:51.330\nWhen we deploy a web application,\n\n19\n00:00:51.330 --> 00:00:55.610\nweb applications are usually made up of\na web front end and a data base backend.\n\n20\n00:00:55.610 --> 00:00:58.510\nAnd so the web front end is in constant\ncommunication with that data base backend.\n\n21\n00:00:58.510 --> 00:01:01.680\nBecause we're doing lookups and\nresults and queries and all that stuff.\n\n22\n00:01:01.680 --> 00:01:03.989\nSo, for example,\nlet's say I go to an online store.\n\n23\n00:01:03.989 --> 00:01:06.110\nWe'll take Amazon's website as an example.\n\n24\n00:01:06.110 --> 00:01:08.890\nSo I go to Amazon.com and\nI do a look up for a product.\n\n25\n00:01:08.890 --> 00:01:11.730\nAnd I do a look up for the X Files on DVD.\n\n26\n00:01:11.730 --> 00:01:14.210\nSo I type in XFiles DVD,\nand I do that search.\n\n27\n00:01:14.210 --> 00:01:16.610\nWell the web server's turning around and\ngoing to a database.\n\n28\n00:01:16.610 --> 00:01:19.400\nAnd saying hey, can you tell me all\nthe products that match X Files DVD.\n\n29\n00:01:19.400 --> 00:01:21.920\nAnd it gets the results back and\nit presents that page to me.\n\n30\n00:01:21.920 --> 00:01:24.040\nGreat, that was my user experience.\n\n31\n00:01:24.040 --> 00:01:27.670\nWell It had to reach out to a database and\nit had to run that query.\n\n32\n00:01:27.670 --> 00:01:31.440\nIf there's 50 other people\nrunning that same search,\n\n33\n00:01:31.440 --> 00:01:34.990\nthey're all reaching out to that database\nand they're all doing that same query.\n\n34\n00:01:34.990 --> 00:01:41.100\nWell, the longer the query takes,\nthe worse experience the visitor has.\n\n35\n00:01:41.100 --> 00:01:43.110\nHave you ever gone to a website and\nyou click on a button and it's sitting,\n\n36\n00:01:43.110 --> 00:01:46.110\ntaking time to load and load and you just\nforget it, I'll go to a different site.\n\n37\n00:01:46.110 --> 00:01:46.890\nI do it all the time.\n\n38\n00:01:46.890 --> 00:01:48.510\nYou do a google search.\n\n39\n00:01:48.510 --> 00:01:49.700\nYou get ten results.\n\n40\n00:01:49.700 --> 00:01:53.350\nIf I click on result one and it takes\ntoo long, I just hit the back button and\n\n41\n00:01:53.350 --> 00:01:54.510\ngo to result two.\n\n42\n00:01:54.510 --> 00:01:56.230\nYou don't want to wait.\n\n43\n00:01:56.230 --> 00:01:58.700\nAmazon, actually did a study\non this several years ago.\n\n44\n00:01:58.700 --> 00:02:02.700\nAnd, they found that for\nevery one hundred millisecond of latency.\n\n45\n00:02:02.700 --> 00:02:06.130\nIt resulted in a one\npercent drop in sales.\n\n46\n00:02:06.130 --> 00:02:07.660\nThat's it, a tenth of a second.\n\n47\n00:02:07.660 --> 00:02:10.410\nFor every tenth of a second long that,\n\n48\n00:02:10.410 --> 00:02:13.470\nthat transaction took,\nthey would lose 1% of the sales.\n\n49\n00:02:13.470 --> 00:02:16.570\nSo if it took a full second,\nthey would lose 10% of their sales and\n\n50\n00:02:16.570 --> 00:02:17.750\nthat's a big deal.\n\n51\n00:02:17.750 --> 00:02:20.810\nThat's a lot of money that\nyou could be actually making,\n\n52\n00:02:20.810 --> 00:02:23.990\nif your database just returned\nqueries a little bit faster.\n\n53\n00:02:23.990 --> 00:02:27.620\nAnd so,\nhaving caching really optimizes that.\n\n54\n00:02:27.620 --> 00:02:32.440\nAnd the main way that's been provided in\nthe past was by using in memory caching.\n\n55\n00:02:32.440 --> 00:02:34.460\nSo in memory caching is really\nwhat's gonna drive this and\n\n56\n00:02:34.460 --> 00:02:37.040\nI got a little diagram here to\nshow you what I'm talking about.\n\n57\n00:02:37.040 --> 00:02:39.740\nBasically we have an App Server and\nthat's usually gonna be our web\n\n58\n00:02:39.740 --> 00:02:44.190\nfront end like HTTP, Apache,\nsomething like that, maybe NGINX.\n\n59\n00:02:44.190 --> 00:02:47.050\nAnd as we interact with it\nit's doing database queries.\n\n60\n00:02:47.050 --> 00:02:49.790\nIt's reaching down here to a database and\ngetting its results.\n\n61\n00:02:49.790 --> 00:02:54.090\nAnd if I just let things run like that,\ngreat it does its queries.\n\n62\n00:02:54.090 --> 00:02:56.830\nDatabases they actually\ndo their own caching.\n\n63\n00:02:56.830 --> 00:03:00.010\nSo when I get a query that's been running\non database it's usually cached into RAM\n\n64\n00:03:00.010 --> 00:03:02.120\non the database server,\nand we get the results.\n\n65\n00:03:03.780 --> 00:03:07.870\nI can use in memory caching\nto store that cache result.\n\n66\n00:03:07.870 --> 00:03:10.340\nAnd normally this\nhappening on the database.\n\n67\n00:03:10.340 --> 00:03:14.250\nBut, with a distributed cache,\nI can store somewhere else.\n\n68\n00:03:14.250 --> 00:03:15.890\nAnd that's where elastic cache comes in.\n\n69\n00:03:15.890 --> 00:03:18.950\nSo showing here an elastic cache node,\njust kinda sitting of to the side.\n\n70\n00:03:18.950 --> 00:03:20.850\nAnd that's where the cache results happen.\n\n71\n00:03:20.850 --> 00:03:25.030\nNow I know what you're thinking, if it's\nalready being cached in the databases\n\n72\n00:03:25.030 --> 00:03:28.790\nmemory here, why bother storing\nit in a separate node anyway.\n\n73\n00:03:28.790 --> 00:03:30.270\nWhy not just leave it in the database.\n\n74\n00:03:30.270 --> 00:03:32.180\nAnd there's two main reasons for that.\n\n75\n00:03:32.180 --> 00:03:36.149\nThe first reason is what if I have\nmore than one database server.\n\n76\n00:03:37.350 --> 00:03:39.970\nLet's say that I've deployed\nan Aurora database server, Aurora DB.\n\n77\n00:03:39.970 --> 00:03:43.290\nAnd it's running on an EC2 instance.\n\n78\n00:03:43.290 --> 00:03:46.920\nAnd I start getting slow performance\non it, so I need to scale.\n\n79\n00:03:46.920 --> 00:03:48.110\nWell you got two choices.\n\n80\n00:03:48.110 --> 00:03:50.910\nYou can scale vertically, or\nyou can scale horizontally.\n\n81\n00:03:50.910 --> 00:03:54.710\nScaling vertically, or scaling up, that's\nadding more hardware to the instance.\n\n82\n00:03:54.710 --> 00:03:59.100\nSo I could bump it,\nmaybe it's an M4 4 ex large And\n\n83\n00:03:59.100 --> 00:04:02.310\nI can bump it up to an M4 8x large or\n\n84\n00:04:02.310 --> 00:04:07.660\nwith aurora db it's probably running on\nlike an R like an R3.4x large or whatever.\n\n85\n00:04:07.660 --> 00:04:11.970\nSo we can bump up like that but eventually\nas you scale vertically you hit the top.\n\n86\n00:04:11.970 --> 00:04:15.030\nYou hit the biggest instance available and\n\n87\n00:04:15.030 --> 00:04:17.870\nyou might have 128 CPUs and\nyou might have.\n\n88\n00:04:17.870 --> 00:04:21.300\nHalf a terabyte of memory or\nwhatever, but eventually hit the top.\n\n89\n00:04:21.300 --> 00:04:22.910\nAnd when you hit the top,\n\n90\n00:04:22.910 --> 00:04:27.600\nyour only choice after that is to\nscale horizontally, scale out.\n\n91\n00:04:27.600 --> 00:04:28.850\nAdd more instances.\n\n92\n00:04:28.850 --> 00:04:33.190\nWell databases typically only\nlike to have one writable copy.\n\n93\n00:04:33.190 --> 00:04:35.190\nBut on the read side of things,\n\n94\n00:04:35.190 --> 00:04:38.560\nwe can spread the reads out\nwith read-only replicas.\n\n95\n00:04:38.560 --> 00:04:40.590\nWith Aurora DB,\nyou can easily plop out 16 of them.\n\n96\n00:04:40.590 --> 00:04:43.280\nNow I've got a ton of read replicas and\n\n97\n00:04:43.280 --> 00:04:44.950\nall my read traffic can\nbe spread across them.\n\n98\n00:04:45.970 --> 00:04:46.790\nBy doing that,\n\n99\n00:04:48.020 --> 00:04:52.240\nnow I've got 16 different instances that\nare all capable of providing read access.\n\n100\n00:04:52.240 --> 00:04:57.860\n16 instances all with their own cache,\nall with their own in memory caching.\n\n101\n00:04:57.860 --> 00:05:01.500\nSo if there's 16 people doing\nthe same choreo at the same time, and\n\n102\n00:05:01.500 --> 00:05:05.510\nit gets spread across those 16 databases,\n\n103\n00:05:05.510 --> 00:05:07.510\nthey don't benefit from\neach other being cached.\n\n104\n00:05:07.510 --> 00:05:10.220\nThey're all gonna have dischoreography\nin the look up process and\n\n105\n00:05:10.220 --> 00:05:14.140\nall that's gonna happen in, and\nthat's gonna create latency.\n\n106\n00:05:14.140 --> 00:05:18.590\nSo wherein memory caching like\nElastiCache comes in handy.\n\n107\n00:05:18.590 --> 00:05:21.300\nIs when we use it as a distributed cache,\n\n108\n00:05:21.300 --> 00:05:25.840\none that's shared, one that can be shared\nacross multiple application servers,\n\n109\n00:05:25.840 --> 00:05:28.520\nand shared across multiple\ndatabases on the back end although\n\n110\n00:05:28.520 --> 00:05:31.590\nyou really don't need that at that\npoint because the cache is taking over.\n\n111\n00:05:31.590 --> 00:05:35.250\nWhen we do a query,\nwe can look to the cache and\n\n112\n00:05:35.250 --> 00:05:39.190\nsee if somebody's already done the query,\nget the results right out of the cache And\n\n113\n00:05:39.190 --> 00:05:40.530\nnever even bother the database server.\n\n114\n00:05:40.530 --> 00:05:41.790\nWe don't have to touch it!\n\n115\n00:05:41.790 --> 00:05:43.260\nDatabase server just runs along.\n\n116\n00:05:43.260 --> 00:05:44.340\nChugging along, and\n\n117\n00:05:44.340 --> 00:05:47.340\nnow we don't have to have sixteen\nread replicas in the back end.\n\n118\n00:05:47.340 --> 00:05:50.850\nWe can just have,\nmaybe even just our one master database.\n\n119\n00:05:50.850 --> 00:05:53.300\nYou want a multi AZ deployment and\nall that.\n\n120\n00:05:53.300 --> 00:05:55.110\nDon't forget that side of things, but for\n\n121\n00:05:55.110 --> 00:05:57.830\nperformance reasons,\nwe just need the master.\n\n122\n00:05:57.830 --> 00:06:01.850\nBecause our ElastiCache,\nit's a cluster of it's own, and\n\n123\n00:06:01.850 --> 00:06:05.560\nit can scale out, and it can grow, and\nit can handle huge amounts of workload\n\n124\n00:06:05.560 --> 00:06:08.560\nall in a full managed environment\nthat we don't have to mess with.\n\n125\n00:06:08.560 --> 00:06:11.250\nThat is far easier to scale\n\n126\n00:06:11.250 --> 00:06:14.540\nthen scaling your databases where it's\ndependent on the database software.\n\n127\n00:06:14.540 --> 00:06:18.500\nSo that's where elastic cache fits into\nthis picture, is optimizing queries so\n\n128\n00:06:18.500 --> 00:06:22.870\nthat they happen much, much faster,\nwhich improves the visitor experience.\n\n129\n00:06:22.870 --> 00:06:25.220\n&gt;&gt; Don, is elastic cache the only\nthing that we have out there or\n\n130\n00:06:25.220 --> 00:06:28.160\nare there existing technologies out\nthere that people are already using.\n\n131\n00:06:28.160 --> 00:06:31.300\n&gt;&gt; Well it's a funny question\nbecause Elastic cache\n\n132\n00:06:31.300 --> 00:06:32.680\nactually isn't something new.\n\n133\n00:06:32.680 --> 00:06:36.630\nWhat Elastic cache is,\nis a managed in memory cache,\n\n134\n00:06:36.630 --> 00:06:40.120\nthat using services have\nactually been around a while.\n\n135\n00:06:40.120 --> 00:06:44.040\nIn the memory caching business\nthere's really only three\n\n136\n00:06:44.040 --> 00:06:45.490\nbig names that are out there.\n\n137\n00:06:45.490 --> 00:06:48.590\nAPM and Memcache D, those are the two\nbig ones that have been around forever,\n\n138\n00:06:48.590 --> 00:06:50.170\nwell for as long as I can remember.\n\n139\n00:06:50.170 --> 00:06:52.320\nAnd then, now there's Redis.\n\n140\n00:06:52.320 --> 00:06:53.470\nRedis is a newer one.\n\n141\n00:06:53.470 --> 00:06:56.600\nIt's been around,\nprobably seven or eight years now.\n\n142\n00:06:56.600 --> 00:07:02.280\nIt's been around a little while, versus, I\nknow I've deployed APM as long as 15 ago,\n\n143\n00:07:02.280 --> 00:07:04.760\nso those guys have been around a while.\n\n144\n00:07:04.760 --> 00:07:07.080\nMemcache D,\nI think has been around even longer.\n\n145\n00:07:07.080 --> 00:07:10.470\nRedis is kind of the new kid on the block,\neven though it's seven or eight years old.\n\n146\n00:07:10.470 --> 00:07:12.840\nWell, those technologies,\nyou can do ' right now.\n\n147\n00:07:12.840 --> 00:07:17.930\nIf you you spin up an EC2 instance and\nyou pick a Linux AMI.\n\n148\n00:07:17.930 --> 00:07:19.660\nYou deploy cache MD on it, no big deal.\n\n149\n00:07:19.660 --> 00:07:22.020\nIt's part of every major\nvendors repository.\n\n150\n00:07:22.020 --> 00:07:23.940\nOr if you want to deploy Redditch,\nyou can do that too.\n\n151\n00:07:23.940 --> 00:07:25.950\nYou can drop it right on there.\n\n152\n00:07:25.950 --> 00:07:28.450\nWhat Amazon's doing is making it easy.\n\n153\n00:07:28.450 --> 00:07:30.920\nIf you deploy it yourself,\nyou've gotta configure it.\n\n154\n00:07:30.920 --> 00:07:33.530\nYou've gotta configure all of\nyour web frontends to use it,\n\n155\n00:07:33.530 --> 00:07:36.260\nall of your application servers,\nthey've gotta know to look to use it.\n\n156\n00:07:36.260 --> 00:07:39.960\nAnd you've gotta configure the cache it\nself and you gotta set it up to scale.\n\n157\n00:07:39.960 --> 00:07:42.150\nSetup autoscaling groups and\nall of that nightmare.\n\n158\n00:07:42.150 --> 00:07:45.830\nI shouldn't call it a nightmare,\nit's a lot of work is what it is.\n\n159\n00:07:45.830 --> 00:07:49.880\nWhen we deploy an elasti-cache,\nyou click some buttons.\n\n160\n00:07:49.880 --> 00:07:51.500\nA couple of buttons and\nit deploys really quickly.\n\n161\n00:07:51.500 --> 00:07:54.755\nThat's kind of the glory here, is that\nyou're getting a fully managed solution.\n\n162\n00:07:54.755 --> 00:07:58.706\nSo when we deploy elasti-cache,\nreally all we have to do is pick.\n\n163\n00:07:58.706 --> 00:08:00.611\nDo we want MemCache D.\n\n164\n00:08:00.611 --> 00:08:02.696\nOr do we want Redis.\n\n165\n00:08:02.696 --> 00:08:05.705\nIt doesn't support APM so\nit's just memcached and Redis and\n\n166\n00:08:05.705 --> 00:08:09.363\nyou just pick which one you want and\nit will deploy it fully for you, it will\n\n167\n00:08:09.363 --> 00:08:13.198\ncreate a Redis cluster or it will create\nan memcached cluster and it will set it\n\n168\n00:08:13.198 --> 00:08:17.160\nup to auto scale and it will set it up to\nwork and it's all kind of hidden from you.\n\n169\n00:08:17.160 --> 00:08:19.190\nFully managed,\nthat's kind of the advantage here.\n\n170\n00:08:19.190 --> 00:08:21.140\nSo, that choice is important.\n\n171\n00:08:21.140 --> 00:08:21.740\nWhich one do I pick.\n\n172\n00:08:21.740 --> 00:08:24.024\nDo I pick memcached or do I pick Redis.\n\n173\n00:08:24.024 --> 00:08:25.990\nWell it depends on what\nyou're looking for.\n\n174\n00:08:25.990 --> 00:08:30.650\nIf you have data that's really dynamic,\nthat's really frequently changing and\n\n175\n00:08:30.650 --> 00:08:32.980\njust rapid changes.\n\n176\n00:08:32.980 --> 00:08:35.530\nMemcached can oftentimes be the best.\n\n177\n00:08:35.530 --> 00:08:42.320\nMemcached is only in memory cache, which\nmeans it doesn't get written to the disk.\n\n178\n00:08:42.320 --> 00:08:43.592\nIf I have a fault.\n\n179\n00:08:43.592 --> 00:08:47.750\nIf memcached crashes or resets,\nIf I have to take a node down and\n\n180\n00:08:47.750 --> 00:08:49.880\nbring it back up the cache is empty.\n\n181\n00:08:49.880 --> 00:08:51.740\nSo, it has to rebuild the whole cache.\n\n182\n00:08:52.880 --> 00:08:56.050\nRedis on the hand persists.\n\n183\n00:08:56.050 --> 00:08:58.110\nIt does it in memory cuz\nthat's where your speed is.\n\n184\n00:08:58.110 --> 00:08:59.770\nRAM is way faster than discs.\n\n185\n00:08:59.770 --> 00:09:01.730\nSo, you're caching these in RAM.\n\n186\n00:09:01.730 --> 00:09:06.280\nBut it takes all the sessions it's\ntracking and writes them to disk also.\n\n187\n00:09:06.280 --> 00:09:09.040\nSo, in Redis, if we have some kind of\na crash, or reset, or if we have some kind\n\n188\n00:09:09.040 --> 00:09:13.280\nof a major fault when it pops back up\nit's got everything already cached.\n\n189\n00:09:13.280 --> 00:09:16.330\nThese can be previous queries that\nwe're now saving time on because we\n\n190\n00:09:16.330 --> 00:09:19.880\nhave a valid cache for them and\nwe bounced right back from that failure.\n\n191\n00:09:19.880 --> 00:09:23.270\nSo, if your data isn't\nchanging that often or\n\n192\n00:09:23.270 --> 00:09:27.030\nif you want to be able to survive that\nfailure and have a prepopulated cache,\n\n193\n00:09:27.030 --> 00:09:29.940\nRedis is the solution and that's what\nmost companies choose these days.\n\n194\n00:09:29.940 --> 00:09:34.303\nIf you're deploying a new solution,\nRedis is typically the option.\n\n195\n00:09:34.303 --> 00:09:37.020\nBut if you're not worried\nabout a prepopulated cache and\n\n196\n00:09:37.020 --> 00:09:39.171\nyou know faults are going\nto be pretty rare and\n\n197\n00:09:39.171 --> 00:09:42.225\nyou can handle if I have a fault and\nI'd have to bring it back up and\n\n198\n00:09:42.225 --> 00:09:45.904\nthe cache had to repopulate for a few\nmoments well then memcached can deploy,\n\n199\n00:09:45.904 --> 00:09:50.180\nand it's a little easier, because you\ndon't have to worry about backing it up.\n\n200\n00:09:50.180 --> 00:09:51.230\nRight?\nWhy back it up?\n\n201\n00:09:51.230 --> 00:09:52.320\nEverything's in RAM.\n\n202\n00:09:52.320 --> 00:09:56.452\nIf it fails, everything in RAM is gone\nanyway, there's nothing to back up.\n\n203\n00:09:56.452 --> 00:10:00.940\nSo, memcached is easier to manage but\nit's not as resilient.\n\n204\n00:10:00.940 --> 00:10:03.560\nWhen it pops back up it's\ngotta repopulate its cache.\n\n205\n00:10:03.560 --> 00:10:05.370\nSo, that's kinda how we choose.\n\n206\n00:10:05.370 --> 00:10:06.320\nYou can choose either.\n\n207\n00:10:06.320 --> 00:10:07.880\nAmazon fully supports both.\n\n208\n00:10:07.880 --> 00:10:10.420\nAnd it just depends on your use case\nscenario which one is gonna work out\n\n209\n00:10:10.420 --> 00:10:11.260\nbetter for you.\n\n210\n00:10:11.260 --> 00:10:14.390\nBut, most new applications these days are\ngoing to use Redis because Redis can cache\n\n211\n00:10:14.390 --> 00:10:15.590\nmore than database queries.\n\n212\n00:10:15.590 --> 00:10:17.610\nIt can do user sessions tokens.\n\n213\n00:10:17.610 --> 00:10:20.770\nIt can do all sorts of interesting stuff.\n\n214\n00:10:20.770 --> 00:10:23.710\nThat's all kind of based on what it does.\n\n215\n00:10:23.710 --> 00:10:26.990\nWhen you look at memcached,\nit's storing data in blobs.\n\n216\n00:10:26.990 --> 00:10:29.470\nAnd technically a blob can store anything.\n\n217\n00:10:29.470 --> 00:10:30.990\nYou can put anything you want in there.\n\n218\n00:10:30.990 --> 00:10:34.255\nBut for the most part, it's just used for\nquery results and the query results\n\n219\n00:10:34.255 --> 00:10:39.145\nmight be text or images of whatever,\ncache doesn't know about that, right?\n\n220\n00:10:39.145 --> 00:10:43.875\nReddis, on the other hand,\ncan actually cache lists, and sets, and\n\n221\n00:10:43.875 --> 00:10:45.975\nmore fixed data types.\n\n222\n00:10:45.975 --> 00:10:47.157\nNot just blobs.\n\n223\n00:10:47.157 --> 00:10:50.537\nAnd that means that we can actually\nleverage Redis as its own database.\n\n224\n00:10:50.537 --> 00:10:54.187\nAnd we can run queries not targeted at\nanother database that just happens to\n\n225\n00:10:54.187 --> 00:10:57.047\nbe cached on Redis, but\nwe can actually create queries\n\n226\n00:10:57.047 --> 00:10:59.947\nthat are targeted to Redis and\nthat makes it more powerful.\n\n227\n00:10:59.947 --> 00:11:02.167\nAnd a lot of web sites are using it for\nsession tracking.\n\n228\n00:11:02.167 --> 00:11:06.657\nSo, if I have a user logging in and I've\ngot a web farm with a thousand servers.\n\n229\n00:11:06.657 --> 00:11:08.830\nThey might be on server five right now and\n\n230\n00:11:08.830 --> 00:11:12.360\non server 507 in a minute,\nhow do I keep their session,\n\n231\n00:11:12.360 --> 00:11:15.750\nhow do I keep them logged in as their\nbouncing between those servers.\n\n232\n00:11:15.750 --> 00:11:18.990\nWell the servers can be the cache and\nfinding out what their session was, yeah,\n\n233\n00:11:18.990 --> 00:11:21.870\nthey had a shopping card and these are\nthe items that are in it and they've been\n\n234\n00:11:21.870 --> 00:11:25.850\nlogged in for two hours and all that\ninformation persist as the move node to\n\n235\n00:11:25.850 --> 00:11:29.700\nnode very easily Mem cache D's a little\nmore challenging to work with that way.\n\n236\n00:11:29.700 --> 00:11:31.780\nIt's really just optimizing the queries.\n\n237\n00:11:31.780 --> 00:11:35.482\n&gt;&gt; So Don, once we have an understanding\nabout what their options are and\n\n238\n00:11:35.482 --> 00:11:39.809\nit's time to, let's put pen to paper or\nmaybe a dry erase marker to the board, and\n\n239\n00:11:39.809 --> 00:11:41.280\nwe have to design this out.\n\n240\n00:11:41.280 --> 00:11:43.460\nCan you help us out a little\nbit with the design?\n\n241\n00:11:43.460 --> 00:11:48.660\n&gt;&gt; Amazon has a recommended design\npattern for deploying ElastiCache, right?\n\n242\n00:11:48.660 --> 00:11:52.600\nAnd it really doesn't matter whether\nyou're doing Redis or Memcached.\n\n243\n00:11:52.600 --> 00:11:54.310\nThe design is pretty similar.\n\n244\n00:11:54.310 --> 00:11:56.740\nNote the real difference comes on\nthe backup side of things, right?\n\n245\n00:11:56.740 --> 00:11:59.380\nSo, let me get the backups\nout of the way first, right?\n\n246\n00:11:59.380 --> 00:12:02.780\nSo on the backup side, with Memcached\nyou really don't have to back them up.\n\n247\n00:12:02.780 --> 00:12:05.270\nThat if a node goes down,\nyou just spin up another one.\n\n248\n00:12:05.270 --> 00:12:08.028\nNothing that survived that anyway so\nno big deal.\n\n249\n00:12:08.028 --> 00:12:11.930\nOn the redis side usually doing snapshots\nand you can do automated snapshots or\n\n250\n00:12:11.930 --> 00:12:12.900\nyou can make manual snapshots.\n\n251\n00:12:12.900 --> 00:12:15.800\nIf you're about to make a significant\nchange do manual snapshots.\n\n252\n00:12:15.800 --> 00:12:17.190\nWhen you do a snapshot,\n\n253\n00:12:17.190 --> 00:12:21.750\nit's capturing the elastic block store\nright that becomes part of the snapshot.\n\n254\n00:12:21.750 --> 00:12:25.960\nAnything written in the disk is part of\nthat snapshot well, we [INAUDIBLE] is all\n\n255\n00:12:25.960 --> 00:12:29.730\nin memory, there's nothing on the disk so\nthe snapshots are pointless, right?\n\n256\n00:12:29.730 --> 00:12:33.090\nBut in Redis it captures everything\nthat's persisted to disk.\n\n257\n00:12:33.090 --> 00:12:35.400\nAnd so when you restore that snapshot,\n\n258\n00:12:35.400 --> 00:12:38.420\neverything that's on the disk\nis read back in the [INAUDIBLE].\n\n259\n00:12:38.420 --> 00:12:43.360\nYou need to set up automated or manual or\nboth really snapshots for Redis.\n\n260\n00:12:43.360 --> 00:12:45.590\nBut, after that the design between\nthe two is pretty similar.\n\n261\n00:12:45.590 --> 00:12:47.620\nLet me show you this diagram here.\n\n262\n00:12:47.620 --> 00:12:49.550\nWe start off with an app server, right?\n\n263\n00:12:49.550 --> 00:12:51.400\nAnd the app server has\nthat web front end or\n\n264\n00:12:51.400 --> 00:12:54.710\nwhatever it is that we're working with and\nsupporting for our visitors.\n\n265\n00:12:54.710 --> 00:12:56.780\nAnd then, it's gonna have\na database that it talks to, right?\n\n266\n00:12:56.780 --> 00:12:59.270\nSo, this is kind of\nthe non-cached section here.\n\n267\n00:12:59.270 --> 00:13:01.890\nWe've got an app server,\nit's pointing to a database.\n\n268\n00:13:01.890 --> 00:13:04.262\nTypically, we want the app server and\n\n269\n00:13:04.262 --> 00:13:07.389\nthe database to be in\nthe same availability Zone.\n\n270\n00:13:07.389 --> 00:13:10.843\nSo we're talking about one region\nin the same Availability Zone,\n\n271\n00:13:10.843 --> 00:13:12.880\ncuz you get the best performance.\n\n272\n00:13:12.880 --> 00:13:17.530\nWe get a none blocking 10 Gigabit\nconnection between instances in the same\n\n273\n00:13:17.530 --> 00:13:23.060\nAvailability Zones, that's great\nperformance right there, all right?\n\n274\n00:13:23.060 --> 00:13:26.130\nBut, if I'm worried about that\nAvailability Zone going down.\n\n275\n00:13:26.130 --> 00:13:29.070\nI need to have app servers in other AZs.\n\n276\n00:13:29.070 --> 00:13:31.090\nSo, here's an app server in another AZ.\n\n277\n00:13:31.090 --> 00:13:34.890\nIt's not gonna get the network boost that\nreaching directly to the database would,\n\n278\n00:13:34.890 --> 00:13:36.190\nif it's in the same AZ.\n\n279\n00:13:36.190 --> 00:13:39.288\nSo, it's gonna have to cross AZs to get\nover to that other database server.\n\n280\n00:13:39.288 --> 00:13:43.530\nSo, just by that fact,\nit's gonna be a little bit slower.\n\n281\n00:13:43.530 --> 00:13:48.250\nSo now, depending on whether a visitor\ngets sent to the App Server in AZ, or\n\n282\n00:13:48.250 --> 00:13:51.360\nin Zone A here, or\nif they get sent to zone B they're\n\n283\n00:13:51.360 --> 00:13:54.070\ngonna get two different\nperformance experiences, right.\n\n284\n00:13:54.070 --> 00:13:57.580\nWes might have a blazing fast connection\nwhen he logs into the site and searches.\n\n285\n00:13:57.580 --> 00:14:01.470\nAnd then me, I hit search and it thinks\nfor a second, and then I get my results.\n\n286\n00:14:01.470 --> 00:14:02.910\nAll right, well that doesn't\nseem like a big deal, but\n\n287\n00:14:02.910 --> 00:14:04.960\nafter a while it gets really annoying,\nright.\n\n288\n00:14:04.960 --> 00:14:06.600\nTwo different experiences.\n\n289\n00:14:06.600 --> 00:14:09.810\nWell then I can spin up ElastiCache And\n\n290\n00:14:09.810 --> 00:14:13.530\nwhen I can spin up ElastiCache I pick,\nin this case, Redis, right?\n\n291\n00:14:13.530 --> 00:14:17.380\nAnd with Redis you can define\na Redis replication group.\n\n292\n00:14:17.380 --> 00:14:19.070\nIt's done right through ElastiCache.\n\n293\n00:14:19.070 --> 00:14:20.090\nSo, you have your primary node.\n\n294\n00:14:20.090 --> 00:14:21.410\nThe primary node is really important,\nright?\n\n295\n00:14:21.410 --> 00:14:23.620\nBecause that's the one\nthat's building the cache.\n\n296\n00:14:23.620 --> 00:14:28.140\nAnd then, it replicates that\ncache across read replicas,\n\n297\n00:14:28.140 --> 00:14:29.230\njust like a database server would.\n\n298\n00:14:29.230 --> 00:14:31.559\nSo, I can have a read replica\nright here in this zone.\n\n299\n00:14:32.630 --> 00:14:36.740\nAnd I can have a read replica in other\navailability zones and I can spread out.\n\n300\n00:14:38.140 --> 00:14:42.020\nNow, we can configure our app\nservers that when they run queries,\n\n301\n00:14:42.020 --> 00:14:45.230\nthey can run queries\nagainst the read replicas.\n\n302\n00:14:45.230 --> 00:14:49.050\n&gt;&gt; And how does that, Don, affect the user\nexperience versus before if we didn't have\n\n303\n00:14:49.050 --> 00:14:51.500\nthis in place and you say well,\nI'm getting the spinning.\n\n304\n00:14:51.500 --> 00:14:52.530\nI'm having to wait.\n\n305\n00:14:52.530 --> 00:14:55.786\nHow's the experience now when you do\none of the read replicas in zone B.\n\n306\n00:14:55.786 --> 00:14:57.460\n&gt;&gt; All right, so two big benefits, right?\n\n307\n00:14:57.460 --> 00:14:59.370\nFirst off, it's in the same AZ.\n\n308\n00:14:59.370 --> 00:15:01.700\nSo, you get that 10 gig\nnon blocking connection.\n\n309\n00:15:01.700 --> 00:15:04.120\nSo, you get better,\nfaster connectivity just\n\n310\n00:15:04.120 --> 00:15:06.550\nBased on the nature of being\nin the same availability zone.\n\n311\n00:15:06.550 --> 00:15:10.610\nThe second thing is, we're hitting\na server dedicated for reads.\n\n312\n00:15:10.610 --> 00:15:12.030\nRemember that primary node?\n\n313\n00:15:12.030 --> 00:15:14.530\nIt's handling rights too, cache updates.\n\n314\n00:15:14.530 --> 00:15:18.040\nSo, if I were to reach over to this\nprimary node, which I can, right?\n\n315\n00:15:18.040 --> 00:15:21.220\nBut if I were to reach over to the primary\nnode, we're gonna hit that and\n\n316\n00:15:21.220 --> 00:15:23.540\nnow we're competing with other people for\nrights.\n\n317\n00:15:23.540 --> 00:15:27.410\nEven if I'm doing a read, this one\nmight be performing rights also and\n\n318\n00:15:27.410 --> 00:15:28.890\nthe disk I/O gets affected.\n\n319\n00:15:28.890 --> 00:15:31.850\nSo, the only time I'm going to head\nover to that primary note is if I need\n\n320\n00:15:31.850 --> 00:15:32.790\nto do a write.\n\n321\n00:15:32.790 --> 00:15:34.990\nIf I'm writing to the database,\nI'll read to the primary note.\n\n322\n00:15:34.990 --> 00:15:38.570\nOtherwise those reads are all going\nto get sent to the read replica.\n\n323\n00:15:38.570 --> 00:15:41.540\nBut if this read replica were to fail,\nI could send read anywhere.\n\n324\n00:15:41.540 --> 00:15:44.220\nIt shows reads and\nwrites being sent to the primary note.\n\n325\n00:15:44.220 --> 00:15:47.524\nBut reads by themselves can just\ngo right to the replica and\n\n326\n00:15:47.524 --> 00:15:51.918\nif the cache is there we get the results\nand we pull it back much, much faster.\n\n327\n00:15:51.918 --> 00:15:56.948\nAnd if Zone A were to fail well\nZone A goes down Zone B is up and\n\n328\n00:15:56.948 --> 00:16:01.578\nit has one of the replicas,\nit's up and running now.\n\n329\n00:16:01.578 --> 00:16:04.596\nIf we did an Memcached, that's a problem.\n\n330\n00:16:04.596 --> 00:16:08.030\nWith Memcached, if you lose your\nprimary node, you're in bad shape.\n\n331\n00:16:08.030 --> 00:16:12.740\nAnd mostly because it's just in memory and\nyour replicas kind of cause problems.\n\n332\n00:16:12.740 --> 00:16:17.360\nBut with Redis, because they're persisting\non the disk, if you lose your primary\n\n333\n00:16:17.360 --> 00:16:21.850\nnode, you can take any read replica and\npromote it to become the primary node.\n\n334\n00:16:21.850 --> 00:16:26.380\nSo with Redis, if I were to lose\nAvailability Zone A, just the whole zone.\n\n335\n00:16:26.380 --> 00:16:29.220\nI could actually promote this read\nreplica to become the primary so\n\n336\n00:16:29.220 --> 00:16:30.660\nit can handle reads and writes.\n\n337\n00:16:30.660 --> 00:16:34.180\nNow this diagram isn't taking\ninto account the database.\n\n338\n00:16:34.180 --> 00:16:38.880\nIf you're deploying Aurora DB, or\nMaria DB, Oracle, Microsoft, SQL,\n\n339\n00:16:38.880 --> 00:16:41.990\nwhatever, you need to do\na Multi-AZ deployment of them too.\n\n340\n00:16:41.990 --> 00:16:45.970\nSo that you've got another copy of that\ndatabase over here in Availability Zone B,\n\n341\n00:16:45.970 --> 00:16:47.930\nso that it can pop back up over there.\n\n342\n00:16:47.930 --> 00:16:51.910\nSo this is just on the ElastiCache side,\nnot on the database side.\n\n343\n00:16:51.910 --> 00:16:54.170\nYou still have redundancy\nyou need to plan for there.\n\n344\n00:16:54.170 --> 00:16:58.420\nBut the cool part about this is,\nnow when people run queries,\n\n345\n00:16:58.420 --> 00:17:01.480\nthe queries can be spread\nacross these replicas.\n\n346\n00:17:01.480 --> 00:17:04.830\nAnd the replicas can scale automatically.\n\n347\n00:17:04.830 --> 00:17:08.120\nWe can set that,\nit's just done as part of ElastiCache.\n\n348\n00:17:08.120 --> 00:17:11.040\nIt creates a cluster,\nit lets them all see each other.\n\n349\n00:17:11.040 --> 00:17:15.080\nIt replicates the data,\nit grows and shrinks all on demand.\n\n350\n00:17:15.080 --> 00:17:17.200\nSo normally managing all this\nwould be kind of a challenge.\n\n351\n00:17:17.200 --> 00:17:19.640\nYou having to set up all these instances,\nsetting up all the scaling but\n\n352\n00:17:19.640 --> 00:17:23.400\nhere it's automatically happening and\nnow we get to take advantage of it.\n\n353\n00:17:23.400 --> 00:17:27.840\nWe just get our applications\nconnected to the distributed cache,\n\n354\n00:17:27.840 --> 00:17:30.520\nthat's fronting for our database and\n\n355\n00:17:30.520 --> 00:17:33.450\nwe don't really have to worry about\nreally spreading our database anymore.\n\n356\n00:17:33.450 --> 00:17:37.420\nWe take away that reliance on MySQL or\nreddiDB or whatever.\n\n357\n00:17:37.420 --> 00:17:39.600\nAnd let it all happen\nright there in the cache.\n\n358\n00:17:39.600 --> 00:17:42.420\n&gt;&gt; Don, it's interesting, we've talking\nabout the application servers using\n\n359\n00:17:42.420 --> 00:17:44.635\nthe cache,\nhow do they actually find the cache?\n\n360\n00:17:44.635 --> 00:17:46.400\n[LAUGH]\n&gt;&gt; That's a good point.\n\n361\n00:17:46.400 --> 00:17:49.580\nSo the cache is not actually\non the application server, so\n\n362\n00:17:49.580 --> 00:17:50.550\nhow do they know to find it?\n\n363\n00:17:50.550 --> 00:17:52.610\nWell, we could put that in ourselves.\n\n364\n00:17:52.610 --> 00:17:55.500\nYou can hard coded in the configuration or\nwhatever, but\n\n365\n00:17:55.500 --> 00:17:57.600\nyou can take advantage\nof other things too.\n\n366\n00:17:57.600 --> 00:18:02.170\nSo for example, there's actually an auto\ndiscover client that you can install,\n\n367\n00:18:02.170 --> 00:18:04.360\nit's part of the AWS SDK.\n\n368\n00:18:04.360 --> 00:18:08.570\nThat you can make it part of the AMI that\nyou're using for application servers.\n\n369\n00:18:08.570 --> 00:18:10.960\nSo if your application servers\nare already in an autoscaling group,\n\n370\n00:18:10.960 --> 00:18:11.900\na lot of times they are, right?\n\n371\n00:18:11.900 --> 00:18:14.850\nThey need to spin out more\napplication servers based on load.\n\n372\n00:18:14.850 --> 00:18:19.041\nIf the AMI is running Amazon's\nautodiscover client, when they power up,\n\n373\n00:18:19.041 --> 00:18:23.648\nwhen they spin up that instance, they\ncan automatically find your ElastiCache.\n\n374\n00:18:23.648 --> 00:18:26.150\nAnd when they find the cache,\nthey can start to use it.\n\n375\n00:18:26.150 --> 00:18:30.080\nAnd then they go, hey, it's super simple,\nand now off they go, or\n\n376\n00:18:30.080 --> 00:18:31.710\nyou can hard code the configurations.\n\n377\n00:18:31.710 --> 00:18:35.620\nBut hard coding the configuration is\na little more challenging because\n\n378\n00:18:35.620 --> 00:18:39.850\nif you have a failure and\nyou lose parts of your ElastiCache or\n\n379\n00:18:39.850 --> 00:18:42.560\nthings kind of come up with\na different name or whatever.\n\n380\n00:18:42.560 --> 00:18:45.020\nThen you might have some connectivity\nissues you have to tweak.\n\n381\n00:18:45.020 --> 00:18:48.125\nSo to avoid having to update your\nAMI every time there's a change in\n\n382\n00:18:48.125 --> 00:18:50.680\nElastiCache, you can choose\nthe autodiscovery and\n\n383\n00:18:50.680 --> 00:18:52.060\nyou find it works out really well.\n\n384\n00:18:52.060 --> 00:18:53.720\nRedis can do the same.\n\n385\n00:18:53.720 --> 00:18:56.640\n&gt;&gt; Don, I gotta put my security hat on and\nask this question.\n\n386\n00:18:56.640 --> 00:19:00.250\nYou've been talking about\nquerying these caches.\n\n387\n00:19:00.250 --> 00:19:01.620\nIs that something that we could control?\n\n388\n00:19:01.620 --> 00:19:04.300\nCuz I'm sure we don't want just\nanybody having access to that?\n\n389\n00:19:04.300 --> 00:19:08.890\n&gt;&gt; Yeah, and Memcached is actually really\nbig and Redis is kind of baked in.\n\n390\n00:19:08.890 --> 00:19:13.380\nBut we have IAM, we have AWS Identify and\nAccess Management and\n\n391\n00:19:13.380 --> 00:19:15.470\nyou can fully control\nwho has access to what.\n\n392\n00:19:15.470 --> 00:19:19.968\nCuz you do wanna limit it to say web\nfront ends are able to run these\n\n393\n00:19:19.968 --> 00:19:24.980\nqueries against the Redis cache or\nwhatever our last cache is holding.\n\n394\n00:19:24.980 --> 00:19:28.161\nAnd you don't want attackers\nto be able to get in there and\n\n395\n00:19:28.161 --> 00:19:32.130\nstart lifting cache results or\nwriting to it or things like that.\n\n396\n00:19:32.130 --> 00:19:35.220\nAnd so you can specify IAM\npolicies that define what\n\n397\n00:19:35.220 --> 00:19:36.970\nis allowed to take place there.\n\n398\n00:19:36.970 --> 00:19:38.560\nThat's really important with Memcached,\n\n399\n00:19:38.560 --> 00:19:41.110\nit doesn't have a ton of\nsecurity features in it.\n\n400\n00:19:41.110 --> 00:19:43.974\nWith Redis, it has security features but\nit's easier to manage with IAM.\n\n401\n00:19:43.974 --> 00:19:46.630\nIt gives you that centralized place\nto create policies and manage.\n\n402\n00:19:46.630 --> 00:19:48.300\nSo definitely take advantage of that.\n\n403\n00:19:49.880 --> 00:19:51.990\nAll right, well,\nas far as ElastiCache goes,\n\n404\n00:19:51.990 --> 00:19:54.420\nI think that's pretty much all\nwe need to talk about on it.\n\n405\n00:19:54.420 --> 00:19:57.430\nIt's obviously a very important\ntechnology for improving performance.\n\n406\n00:19:57.430 --> 00:19:58.720\nWhen you're working in test and\n\n407\n00:19:58.720 --> 00:20:00.980\ndevelopment, you probably\nwon't use it much, right?\n\n408\n00:20:00.980 --> 00:20:03.560\nCuz you're not having to cache\nlarge amounts of activity.\n\n409\n00:20:03.560 --> 00:20:06.470\nBut when you roll into production,\nit's gonna become really important.\n\n410\n00:20:06.470 --> 00:20:09.940\nAnd so as a result, you will normally\ndeploy the test and dev also\n\n411\n00:20:09.940 --> 00:20:13.010\nbecause you need to make sure your\nresults are functioning the right way.\n\n412\n00:20:13.010 --> 00:20:14.400\nWhen you configure caching,\n\n413\n00:20:14.400 --> 00:20:17.890\nthere's important things like how long you\nwant data to stay in the cache, right?\n\n414\n00:20:17.890 --> 00:20:20.180\nYou might not want something to\nstay in the cache very long.\n\n415\n00:20:20.180 --> 00:20:23.450\nIf you have a lot of dynamic and rapidly\nchanging content that can cause a problem.\n\n416\n00:20:23.450 --> 00:20:27.280\nSo you might need to tweak that, but\notherwise, you hit the checkboxes,\n\n417\n00:20:27.280 --> 00:20:30.530\nyou hit the buttons to deploy\nElastiCache and off you go.\n\n418\n00:20:30.530 --> 00:20:32.320\nYour database query is running faster.\n\n419\n00:20:32.320 --> 00:20:34.045\n&gt;&gt; All right, Don,\na lot of great information.\n\n420\n00:20:34.045 --> 00:20:35.465\nWe appreciate you taking the time.\n\n421\n00:20:35.465 --> 00:20:37.115\nBut as you heard Don say,\n\n422\n00:20:37.115 --> 00:20:39.745\ndoes look like we are coming\nto the end of another episode.\n\n423\n00:20:39.745 --> 00:20:40.355\nDon, before we do,\n\n424\n00:20:40.355 --> 00:20:42.525\ndo you have any additional words\nthat you might like to throw them?\n\n425\n00:20:44.045 --> 00:20:47.679\n&gt;&gt; Really, the big choice here is\npicking between Redis and Memcached.\n\n426\n00:20:47.679 --> 00:20:52.077\nAnd that most of the time, you are going\nto want Redis unless you get some exam\n\n427\n00:20:52.077 --> 00:20:54.990\nquestions that just talks\nabout the easiest one.\n\n428\n00:20:54.990 --> 00:20:58.230\nYou can pick the cache that you\ncan deploy the quickest and\n\n429\n00:20:58.230 --> 00:21:00.710\nrequires release maintenance,\nthat would be Memcached.\n\n430\n00:21:00.710 --> 00:21:04.290\nIt's got its faults but\nit's pretty easy to get going and\n\n431\n00:21:04.290 --> 00:21:07.280\nit doesn't require a ton of maintenance\non it, so that would be the easier one.\n\n432\n00:21:07.280 --> 00:21:09.370\nBut otherwise,\nyou're normally gonna be choosing Redis.\n\n433\n00:21:09.370 --> 00:21:09.990\n&gt;&gt; All right, Don.\n\n434\n00:21:09.990 --> 00:21:12.460\nWell, we appreciate having you\nhere in the studios with us and\n\n435\n00:21:12.460 --> 00:21:14.380\nwe do appreciate you the viewer watching.\n\n436\n00:21:14.380 --> 00:21:16.922\nSigning out for ITProTV,\nI've been your host, Wes Bryan.\n\n437\n00:21:16.922 --> 00:21:17.593\n&gt;&gt; And I'm Don Pezet.\n\n438\n00:21:17.593 --> 00:21:20.395\n&gt;&gt; And we'll see you next time.\n\n439\n00:21:20.395 --> 00:21:26.329\n[MUSIC]\n\n440\n00:21:26.329 --> 00:21:33.439\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "209555470"
        }
      ],
      "title": "Amazon ElastiCache"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don explore more of the key services within AWS such as storage services. They will talk about Amazon CloudFront including the basics of the services, configuration, distributions, origins and cache control. They will also look at Amazon Storage Gateway including the basics, gateway-cached volumes, gateway-stored volumes and gateway-virtual tape library. They will explain the benefits of these services and specifications.",
          "length": "1708",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-1-storage_services-031517-PGM.00_29_16_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-1-storage_services-031517-PGM.00_29_16_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-1-storage_services-031517-PGM.00_29_16_23.Still001-sm.jpg",
          "title": "Storage Services",
          "transcript": "WEBVTT\n\n1\n00:00:01.170 --> 00:00:02.413\nWelcome to ITProTV,\nI'm you're host Don Pezet-\n\n2\n00:00:02.413 --> 00:00:06.104\n&gt;&gt; [CROSSTALK].\n\n3\n00:00:06.104 --> 00:00:08.230\n[MUSIC]\n\n4\n00:00:08.230 --> 00:00:11.584\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.584 --> 00:00:13.560\n&gt;&gt; Hello and welcome to ITProTV.\n\n6\n00:00:13.560 --> 00:00:16.994\nI'm your host, Wes Bryan, and\nin today's episode, well,\n\n7\n00:00:16.994 --> 00:00:19.716\nwe're continuing through\nour series in ACS AA.\n\n8\n00:00:19.716 --> 00:00:23.400\nAnd joining us back in the studio\nis none other than Mr. Don Pezet.\n\n9\n00:00:23.400 --> 00:00:24.620\nDon, how are you doing sir?\n\n10\n00:00:24.620 --> 00:00:26.972\n&gt;&gt; I'm doing great, Wes, ready to dive\nright back into the world of AWS.\n\n11\n00:00:26.972 --> 00:00:31.345\nAnd we're moving into a different section\nof the show here where we're gonna\n\n12\n00:00:31.345 --> 00:00:35.190\ntake a look at what's broadly\nlabeled as additional key services.\n\n13\n00:00:35.190 --> 00:00:37.260\nAnd we're not talking about keys, well,\n\n14\n00:00:37.260 --> 00:00:39.750\nactually we will talk about keys\na little bit later as security keys.\n\n15\n00:00:39.750 --> 00:00:42.590\nBut we're just talking about\nother services inside of\n\n16\n00:00:42.590 --> 00:00:45.310\nthe AWS suite that are pretty important,\nthings that we need to know about.\n\n17\n00:00:45.310 --> 00:00:48.060\nSo this one's gonna be, it's gonna\nbe like drinking from the fire hose.\n\n18\n00:00:48.060 --> 00:00:51.710\nWe've got about 14 different services\nthat we all need to be familiar with.\n\n19\n00:00:51.710 --> 00:00:55.180\nNot from a configuration side or\nwhatever just so we know what they are and\n\n20\n00:00:55.180 --> 00:00:58.110\nwhat they do so you understand when you\nmight need to look into that solution.\n\n21\n00:00:58.110 --> 00:00:59.580\nSo we're gonna run\nthrough a couple of them.\n\n22\n00:00:59.580 --> 00:01:02.450\nIn this episode,\nwe're gonna focus on storage services.\n\n23\n00:01:02.450 --> 00:01:07.206\nNow, we did four or five episodes\nearlier just on Amazon S3 and\n\n24\n00:01:07.206 --> 00:01:09.193\nAmazon Glacier, right?\n\n25\n00:01:09.193 --> 00:01:11.430\nSo we've already talked about\nstorage services a bit.\n\n26\n00:01:11.430 --> 00:01:14.016\nBut there are other storage services\nthat we haven't talk about,\n\n27\n00:01:14.016 --> 00:01:19.400\nthat we just needed at least have\na familiar with as far as what they are.\n\n28\n00:01:19.400 --> 00:01:22.700\nAnd the one l wanna start off\nwith is Amazon CloudFront.\n\n29\n00:01:22.700 --> 00:01:27.448\nAmazon CloudFront is a very powerful\ncontent distribution network, or CDN.\n\n30\n00:01:27.448 --> 00:01:30.668\nThat's a part of AWS and makes it super,\n\n31\n00:01:30.668 --> 00:01:35.210\nl don't wanna say easy cuz\nit is hard to get it set up.\n\n32\n00:01:35.210 --> 00:01:39.802\nBut makes it easier, I guess,\n[LAUGH] for a company to\n\n33\n00:01:39.802 --> 00:01:44.820\nquickly get large amount of data to\nanyone in the entire world, to handle\n\n34\n00:01:44.820 --> 00:01:48.390\nmassive loads of traffic that you wouldn't\nnormally be able to handle on your own.\n\n35\n00:01:48.390 --> 00:01:49.686\nCloudFront lets us do that.\n\n36\n00:01:49.686 --> 00:01:51.726\nSo we're gonna talk about it and\nwhat it does and\n\n37\n00:01:51.726 --> 00:01:55.050\nthen we're gonna talk a little bit\nabout the gateway storage devices, too.\n\n38\n00:01:55.050 --> 00:01:57.930\nThat's another little piece that we\nneed to talk about in this episode.\n\n39\n00:01:57.930 --> 00:02:01.300\nAll right, well let's kick things off and\nget into CloudFront.\n\n40\n00:02:01.300 --> 00:02:04.880\nNow, you might have heard of Amazon\nCloudFront before and if you haven't, it\n\n41\n00:02:04.880 --> 00:02:10.540\nis a CDN like I said, and CDNs are usually\nthe realm of companies like Akamai.\n\n42\n00:02:10.540 --> 00:02:17.160\nAkamai is the leading provider of just\nheavy bandwidth across the world.\n\n43\n00:02:17.160 --> 00:02:21.910\nSo if you are releasing a new\nversion of your software or\n\n44\n00:02:21.910 --> 00:02:26.110\nyou're streaming video on the Internet,\nyou need that data,\n\n45\n00:02:26.110 --> 00:02:30.220\nthe video data or the binary data of\nyour application to be available for\n\n46\n00:02:30.220 --> 00:02:32.440\npeople to access all over the world.\n\n47\n00:02:32.440 --> 00:02:35.080\nAnd if it's a large amount of data,\nthat can be a burden, right?\n\n48\n00:02:35.080 --> 00:02:36.820\nFor example, Microsoft.\n\n49\n00:02:36.820 --> 00:02:39.550\nWhen they announced Windows 10,\none day they said, hey,\n\n50\n00:02:39.550 --> 00:02:43.200\nwe're gonna make the Windows 10\nInsider Preview build available, and\n\n51\n00:02:43.200 --> 00:02:45.070\nyou can down the ISO\nright from our website.\n\n52\n00:02:45.070 --> 00:02:49.080\nAnd you go to their website, and\nyou download a four gigabyte ISO file.\n\n53\n00:02:49.080 --> 00:02:52.750\nNow, for me to download four gigs,\nthat's not a big deal, right?\n\n54\n00:02:52.750 --> 00:02:56.883\nWell, it wasn't just me, there were\nhundreds of thousands of people,\n\n55\n00:02:56.883 --> 00:03:00.693\nall over the world, all downloading\nthe same four gigabyte file.\n\n56\n00:03:00.693 --> 00:03:03.895\nWell if that's all coming from the same\nserver it's gonna get overwhelmed.\n\n57\n00:03:03.895 --> 00:03:06.965\nHow do you service that kind of traffic?\n\n58\n00:03:06.965 --> 00:03:11.925\nYou can't, you rely on other people\nthat have an infrastructure for that.\n\n59\n00:03:11.925 --> 00:03:15.775\nIf you remember about Amazon S3,\nwhen you load data into there,\n\n60\n00:03:15.775 --> 00:03:18.065\nS3 can do multi region replication.\n\n61\n00:03:18.065 --> 00:03:19.322\nYou can replicate your\ndata to other regions.\n\n62\n00:03:19.322 --> 00:03:22.000\nWell that's effectively\nwhat CloudFront does.\n\n63\n00:03:22.000 --> 00:03:25.640\nCloudFront maintains\nservers all over the world.\n\n64\n00:03:25.640 --> 00:03:29.290\nAnd what they're referred to\nare not instances or servers or\n\n65\n00:03:29.290 --> 00:03:32.310\nwhatever, they're edge\ndistribution points.\n\n66\n00:03:32.310 --> 00:03:35.840\nThey have this edge of the network\nin between you and your customer,\n\n67\n00:03:35.840 --> 00:03:39.420\nthe network that you control, and then\nthe network that your customers are on.\n\n68\n00:03:39.420 --> 00:03:43.180\nAnd where people access the edge of your\nnetwork just depends on where they are.\n\n69\n00:03:43.180 --> 00:03:46.470\nIf they're in Japan or Australia,\nif they're in Europe or Africa,\n\n70\n00:03:46.470 --> 00:03:47.260\nSouth America,\n\n71\n00:03:47.260 --> 00:03:50.800\nNorth America, they're gonna hit\nyour network in different places.\n\n72\n00:03:50.800 --> 00:03:54.160\nAnd the closer we can get that\nbig chunk of data to them,\n\n73\n00:03:54.160 --> 00:03:55.960\nthe faster they'll be able to get it.\n\n74\n00:03:55.960 --> 00:03:58.790\nThe problem is we might not be\nmaintaining instances in all of\n\n75\n00:03:58.790 --> 00:04:02.170\nthose different regions, and handling\ngetting people to the right region,\n\n76\n00:04:02.170 --> 00:04:04.380\nall that stuff becomes pretty challenging.\n\n77\n00:04:04.380 --> 00:04:08.120\nSo with CloudFront, we can automate that.\n\n78\n00:04:08.120 --> 00:04:10.430\nWe can let Amazon worry about it.\n\n79\n00:04:10.430 --> 00:04:14.000\nWe can take the data and\nstick it into CloudFront.\n\n80\n00:04:14.000 --> 00:04:17.620\nAnd they handle replicating\nit across the globe and\n\n81\n00:04:17.620 --> 00:04:23.030\nmaking sure when people go to access it\nthey get the copy that's nearest to them.\n\n82\n00:04:23.030 --> 00:04:27.195\nSo you might have 100,000 people all\ntrying to download the same file but\n\n83\n00:04:27.195 --> 00:04:30.438\nthey're hitting tons of different\nservers spread all over.\n\n84\n00:04:30.438 --> 00:04:33.937\nAnd so you don't see this massive\noverwhelming impact on a single\n\n85\n00:04:33.937 --> 00:04:35.792\nimplementation.\n\n86\n00:04:35.792 --> 00:04:39.260\nAll right so that's basically\nwhat CloudFront is in a nutshell.\n\n87\n00:04:39.260 --> 00:04:42.850\nWhen CloudFront was originally\ndeployed it was designed just for\n\n88\n00:04:42.850 --> 00:04:46.010\ndata that could be transferred\nover HTTP and HTTPS.\n\n89\n00:04:46.010 --> 00:04:48.160\nSo it was mostly things like images.\n\n90\n00:04:48.160 --> 00:04:49.560\nBut you could do videos.\n\n91\n00:04:49.560 --> 00:04:51.690\nBut it was stuff that you would download,\nright?\n\n92\n00:04:51.690 --> 00:04:55.000\nBut back then,\nit was mostly focused on static data.\n\n93\n00:04:55.000 --> 00:04:58.680\nIf you had a website, and your website had\na bunch of static elements in it, right?\n\n94\n00:04:58.680 --> 00:05:00.520\nLike pictures that were\nalways gonna be the same.\n\n95\n00:05:00.520 --> 00:05:02.350\nYou can put all\nthe pictures in CloudFront.\n\n96\n00:05:02.350 --> 00:05:03.780\nAnd when people loaded your website,\n\n97\n00:05:03.780 --> 00:05:06.280\nyeah they hit your web server\nto pull up the main site, but\n\n98\n00:05:06.280 --> 00:05:10.830\nthen they would hit CloudFront to load all\nthe images, all the high bandwidth stuff.\n\n99\n00:05:10.830 --> 00:05:13.170\nAnd they would get it from servers\nthat were closer to them and\n\n100\n00:05:13.170 --> 00:05:14.430\nthey'd get a better experience, right?\n\n101\n00:05:14.430 --> 00:05:16.420\nThat is how it was\ndeployed in the beginning.\n\n102\n00:05:16.420 --> 00:05:20.273\nWell over time they've added more support\nand now they've added support for HLS and\n\n103\n00:05:20.273 --> 00:05:21.365\nRTMP video streaming.\n\n104\n00:05:21.365 --> 00:05:26.057\nSo you can actually do live and\npre-recorded video and\n\n105\n00:05:26.057 --> 00:05:29.350\nhave it streaming thorough this CDN.\n\n106\n00:05:29.350 --> 00:05:34.510\nSo now if you're like us, like ITProTV, if\nyou wanna go and watch one of our videos\n\n107\n00:05:34.510 --> 00:05:39.560\nand you're in Japan, you'll watch\nthe video from a server that's near Japan.\n\n108\n00:05:39.560 --> 00:05:41.050\nBut if you're in North America,\n\n109\n00:05:41.050 --> 00:05:44.090\nyou'll watch the videos from\na server that's in North America,\n\n110\n00:05:44.090 --> 00:05:48.880\nwhich means less buffering, lower latency\nwhich is really important for live video.\n\n111\n00:05:48.880 --> 00:05:51.310\nAnd you'd get the better experience,\nright?\n\n112\n00:05:51.310 --> 00:05:53.940\nThat's what CloudFront\nis designed to provide.\n\n113\n00:05:53.940 --> 00:05:56.960\n&gt;&gt; Now, Don, let's say an employer comes\nto one of the IT staff and says hey,\n\n114\n00:05:56.960 --> 00:05:59.050\nwe've gotta get that CloudFront up and\nrunning.\n\n115\n00:05:59.050 --> 00:06:02.320\nCan you walk us through some of just\nthe basics when it comes to configuration?\n\n116\n00:06:02.320 --> 00:06:04.840\n&gt;&gt; All right, so\nthe basics work like this.\n\n117\n00:06:04.840 --> 00:06:09.070\nInside of CloudFront, you really set\nup two two primary components, right.\n\n118\n00:06:09.070 --> 00:06:12.660\nYou have what are called distributions and\norigins, right.\n\n119\n00:06:12.660 --> 00:06:17.660\nDistributions that's where we distribute\nour data to the servers that are available\n\n120\n00:06:17.660 --> 00:06:19.810\nacross the world and\nend users access it right.\n\n121\n00:06:19.810 --> 00:06:22.670\nThat's the edge and\nthat's what CloudFront really provides.\n\n122\n00:06:22.670 --> 00:06:25.850\nWhen you activate a CloudFront\nservice Amazon is setting up\n\n123\n00:06:25.850 --> 00:06:29.400\nthe distribution side, the distribution\nnetwork that's gonna be out there.\n\n124\n00:06:29.400 --> 00:06:32.030\nSo for the most part,\non the distribution side,\n\n125\n00:06:32.030 --> 00:06:36.360\nall we have to do is\ncreate a CNAME in DNS.\n\n126\n00:06:36.360 --> 00:06:37.900\nWhen you create\nthe distribution in CloudFront,\n\n127\n00:06:37.900 --> 00:06:39.970\nit's gonna give it an Amazon URL.\n\n128\n00:06:39.970 --> 00:06:41.780\nAnd you can use that URL if you want,\n\n129\n00:06:41.780 --> 00:06:44.300\ncuz it is gonna be imbedded in your\nwebsite anyway, it's like a download link.\n\n130\n00:06:44.300 --> 00:06:47.270\nAnd people will just see the downlink\nas coming from CloudFront.\n\n131\n00:06:47.270 --> 00:06:50.740\nBut you can do a CNAME on in DNS and now\nits tied to your domain instead of Amazon.\n\n132\n00:06:50.740 --> 00:06:53.910\nSo, that functionality is all\nright there easy enough to do and\n\n133\n00:06:53.910 --> 00:06:56.410\nthat’s about all we have to\ndo on the distribution side.\n\n134\n00:06:56.410 --> 00:07:00.550\nOn the origin side, though that’s\nthe part where we need to get involved.\n\n135\n00:07:00.550 --> 00:07:02.620\nThe origin is where’s\nthe data is coming from.\n\n136\n00:07:02.620 --> 00:07:05.510\nWe need to get our data\ninto CloudFront and\n\n137\n00:07:05.510 --> 00:07:08.230\nthen CloudFront will replicate\nit out across their servers.\n\n138\n00:07:08.230 --> 00:07:11.360\nSo on the origin side we have to figure\nout where that data is gonna come from.\n\n139\n00:07:11.360 --> 00:07:13.580\nAnd it could come from a EC2 instance.\n\n140\n00:07:13.580 --> 00:07:15.980\nIt could come from an S3 bucket.\n\n141\n00:07:15.980 --> 00:07:19.320\nIt could come from just\nanother server somewhere else.\n\n142\n00:07:19.320 --> 00:07:24.190\nI might have an on-premises web server and\nI go into CloudFront and\n\n143\n00:07:24.190 --> 00:07:29.970\nI point it to my on-premises server and\nit grabs a copy of the web pages.\n\n144\n00:07:29.970 --> 00:07:32.350\nAnd then caches those across\nall the CloudFront servers.\n\n145\n00:07:32.350 --> 00:07:35.790\nSo now the visitors never actually\ncome to my real web server,\n\n146\n00:07:35.790 --> 00:07:38.010\nthey hit all the CloudFront servers.\n\n147\n00:07:38.010 --> 00:07:40.030\nAnd when I update my local web server,\n\n148\n00:07:40.030 --> 00:07:42.520\nthe CloudFront servers pull it\nas part of the replication.\n\n149\n00:07:42.520 --> 00:07:44.200\n&gt;&gt; Now, Don you also mentioned cache.\n\n150\n00:07:44.200 --> 00:07:46.940\nIs there any level of control\nthat we might have over that?\n\n151\n00:07:46.940 --> 00:07:48.840\nCan we dictate a little\nbit about the cache?\n\n152\n00:07:48.840 --> 00:07:50.400\n&gt;&gt; Yeah, absolutely, and you'll want to.\n\n153\n00:07:50.400 --> 00:07:54.467\nBecause if it's a 24-hour cache and\nyou make a change to your on premises or\n\n154\n00:07:54.467 --> 00:07:58.097\nyour S3 bucket, you want that change\nto be moved into production and\n\n155\n00:07:58.097 --> 00:08:00.803\nMaybe you're okay with a 24 hour delay,\nright?\n\n156\n00:08:00.803 --> 00:08:04.527\nBut ideally you'll have it be much\nshorter so you can push those changes or\n\n157\n00:08:04.527 --> 00:08:06.280\nyou at least need to be aware of it.\n\n158\n00:08:06.280 --> 00:08:07.700\nSo you can certainly dictate that.\n\n159\n00:08:07.700 --> 00:08:09.800\nBut you can even get more advanced.\n\n160\n00:08:09.800 --> 00:08:12.880\nIn CloudFront, you can set up policies.\n\n161\n00:08:12.880 --> 00:08:16.730\nAnd the policies let you define how\nthe content is being delivered.\n\n162\n00:08:16.730 --> 00:08:19.720\nNormally we just want static\ncontent to be cached.\n\n163\n00:08:19.720 --> 00:08:22.060\nBut you can cache dynamic content.\n\n164\n00:08:22.060 --> 00:08:25.300\nThere's risks and\nchallenges with doing that, right?\n\n165\n00:08:25.300 --> 00:08:27.430\nNormally we just cache stuff that's\nstatic, stuff that doesn't change,\n\n166\n00:08:27.430 --> 00:08:28.630\nthat makes sense.\n\n167\n00:08:28.630 --> 00:08:32.900\nIf it's something that's dynamic,\nlet's say I have a membership site,\n\n168\n00:08:32.900 --> 00:08:34.150\na website where you have to login.\n\n169\n00:08:34.150 --> 00:08:37.330\nAnd when I login,\nthe web page says welcome back, Don.\n\n170\n00:08:37.330 --> 00:08:43.470\nThe last video you were watching was\nhow to tend to a beehive, or whatever.\n\n171\n00:08:43.470 --> 00:08:45.590\nAnd then Wes comes and logs in.\n\n172\n00:08:45.590 --> 00:08:46.300\nAnd he gets a page and\n\n173\n00:08:46.300 --> 00:08:50.490\nit says, welcome back Don, the last video\nyou watched was how to tend to a beehive.\n\n174\n00:08:50.490 --> 00:08:52.600\nThat's not him, he just got my results.\n\n175\n00:08:52.600 --> 00:08:53.790\nThat's bad, right?\n\n176\n00:08:53.790 --> 00:08:58.360\nSo there's times where dynamic data\nabsolutely should not be cached.\n\n177\n00:08:58.360 --> 00:09:01.970\nAnd so we can use policies\nto dictate that and say\n\n178\n00:09:01.970 --> 00:09:06.300\nhere's content that we want to serve up\ncached, here's content we don't want to.\n\n179\n00:09:06.300 --> 00:09:09.770\nSo when we deploy CloudFront,\nthat's where, again,\n\n180\n00:09:09.770 --> 00:09:10.900\nwe have to get involved to create.\n\n181\n00:09:10.900 --> 00:09:13.340\nLet me show you a little diagram\nhere of how we can do that.\n\n182\n00:09:13.340 --> 00:09:16.800\nSo here's an example where they've\ngot a domain, example.com, right?\n\n183\n00:09:16.800 --> 00:09:19.410\nIt's just a generic web domain.\n\n184\n00:09:19.410 --> 00:09:23.934\nAnd then the content itself\nis divided into two pieces.\n\n185\n00:09:23.934 --> 00:09:27.790\nWe've got static content\nthat's in S3 bucket.\n\n186\n00:09:27.790 --> 00:09:29.920\nAnd then we've got dynamic content.\n\n187\n00:09:29.920 --> 00:09:33.620\nDynamic content is being rendered\nfrom web servers that are in EC2\n\n188\n00:09:33.620 --> 00:09:37.560\nthat have an elastic load\nbalancer in front of them.\n\n189\n00:09:37.560 --> 00:09:42.360\nYou can create a customer\norigin that stores that data.\n\n190\n00:09:42.360 --> 00:09:44.770\nOr you can just leave the data\nright there in the origin and\n\n191\n00:09:44.770 --> 00:09:46.800\ndistribute your access across those.\n\n192\n00:09:46.800 --> 00:09:51.930\nBut if you setup a custom origin\nthat's gonna draw it into CloudFront.\n\n193\n00:09:51.930 --> 00:09:55.560\nAnd when we do that with dynamic content,\nwe'll want very,\n\n194\n00:09:55.560 --> 00:09:57.120\nvery little caching, right?\n\n195\n00:09:57.120 --> 00:10:00.980\nWe can cache static elements but\nnot the actual dynamic elements.\n\n196\n00:10:00.980 --> 00:10:05.380\nNow, the way we define that is we\ncan split off our static content.\n\n197\n00:10:05.380 --> 00:10:09.200\nNotice that I might have the dynamic\npages as part of my EC2 instances, but\n\n198\n00:10:09.200 --> 00:10:11.470\nthen the static content just\nstraight up in an S3 bucket.\n\n199\n00:10:11.470 --> 00:10:13.760\nYou can do static web\nhosting in an S3 bucket.\n\n200\n00:10:13.760 --> 00:10:17.450\nAnd that can be cached for 24 hours or\nhowever you want it, right.\n\n201\n00:10:18.510 --> 00:10:21.040\nLittle side note here.\n\n202\n00:10:21.040 --> 00:10:24.360\nWhen you update files,\nthere's that cache period.\n\n203\n00:10:24.360 --> 00:10:27.770\nAnd if the cache period is 24 hours and\nyou've got a file you need to rush out\n\n204\n00:10:27.770 --> 00:10:30.790\na change for right away,\nthat's pretty difficult, right?\n\n205\n00:10:30.790 --> 00:10:32.050\nIt just takes time.\n\n206\n00:10:32.050 --> 00:10:37.040\nSo if you're in a hurry, it's often\ntimes easier instead of trying to pull\n\n207\n00:10:37.040 --> 00:10:41.950\nsomething from the cache, it's better to\ndo where you just rename the file, right?\n\n208\n00:10:41.950 --> 00:10:45.480\nSo I might have a header image on my page,\nright?\n\n209\n00:10:45.480 --> 00:10:49.035\nIf you put a version number or\nsomething in the file name,\n\n210\n00:10:49.035 --> 00:10:52.233\nI could say I've got\nheader version 1.1.png.\n\n211\n00:10:52.233 --> 00:10:56.995\nAnd I wanna make a change to this,\nnow I have header version 1.2.png.\n\n212\n00:10:56.995 --> 00:11:00.800\nBy giving it a different name,\nCloudFront sees it as an all new file and\n\n213\n00:11:00.800 --> 00:11:02.990\nit replicates it out immediately.\n\n214\n00:11:02.990 --> 00:11:06.160\nAnd now I just update the web\npages to load that new page.\n\n215\n00:11:06.160 --> 00:11:08.190\nWell, if the web pages are dynamic,\n\n216\n00:11:08.190 --> 00:11:10.640\nthey can easily be changed to\npoints in the new header image.\n\n217\n00:11:10.640 --> 00:11:12.750\nAnd the old header image is still there,\nso\n\n218\n00:11:12.750 --> 00:11:16.890\nif anything still points data to load,\nthat lets us rapidly push out changes.\n\n219\n00:11:16.890 --> 00:11:19.470\nSo renaming a file is typically better.\n\n220\n00:11:19.470 --> 00:11:23.330\nRemember that CloudFront's\nreplication is asynchronous.\n\n221\n00:11:23.330 --> 00:11:26.960\nYou update your origin,\nwherever your data's coming from, and\n\n222\n00:11:26.960 --> 00:11:31.510\nover time it will eventually be\nconsistent across all the replicas.\n\n223\n00:11:31.510 --> 00:11:32.310\nBut it can take a little while.\n\n224\n00:11:32.310 --> 00:11:35.200\nWe're talking about servers all over\nthe planet, so it can take awhile for\n\n225\n00:11:35.200 --> 00:11:36.850\nall of them to get the update.\n\n226\n00:11:36.850 --> 00:11:38.830\nRenaming helps us work around that.\n\n227\n00:11:38.830 --> 00:11:44.060\nThere is a command, an API command we\ncan send to invalidate a cached entry.\n\n228\n00:11:44.060 --> 00:11:45.450\nYou basically just expire it.\n\n229\n00:11:45.450 --> 00:11:48.080\nYou say, we don't want that\none to be cached out there,\n\n230\n00:11:48.080 --> 00:11:50.510\nit's an invalidation call,\nthat's what it is.\n\n231\n00:11:50.510 --> 00:11:53.500\nAnd when you do that,\nthat will pull it from the cache.\n\n232\n00:11:53.500 --> 00:11:56.030\nThe challenge there is it's gotta go and\nget the new copy, and\n\n233\n00:11:56.030 --> 00:11:57.640\nthat creates a performance impact.\n\n234\n00:11:57.640 --> 00:12:00.460\nIf you do a rename,\nyou can put the new file name up.\n\n235\n00:12:00.460 --> 00:12:03.260\nYou can wait for it to propagate\nout which only takes a few minutes.\n\n236\n00:12:03.260 --> 00:12:05.190\nAnd then you can switch over and\n\n237\n00:12:05.190 --> 00:12:08.070\nthere's no period of time where there's\na performance degradation for the user.\n\n238\n00:12:08.070 --> 00:12:10.690\nSo the visitors get\nthat better experience.\n\n239\n00:12:10.690 --> 00:12:14.990\nSo we'll more than likely need to\ncreate a policy that divides things up.\n\n240\n00:12:14.990 --> 00:12:17.398\nAnd the policy can be based on\nsimple things like file extension.\n\n241\n00:12:17.398 --> 00:12:22.014\nHey, if we're getting a PHP file,\nPHPs require server side rendering and\n\n242\n00:12:22.014 --> 00:12:24.000\nare almost always dynamic.\n\n243\n00:12:24.000 --> 00:12:28.070\nSo let's route them directly\nto my EC2 instances.\n\n244\n00:12:28.070 --> 00:12:30.890\nBut then JPGs, those are images.\n\n245\n00:12:30.890 --> 00:12:31.970\nThose are static.\n\n246\n00:12:31.970 --> 00:12:35.420\nAnd so we'll route them to,\nwell I could go to S3.\n\n247\n00:12:35.420 --> 00:12:36.590\nBut we're talking about CloudFront.\n\n248\n00:12:36.590 --> 00:12:37.950\nSo we'd route them to a custom origin,\n\n249\n00:12:37.950 --> 00:12:41.250\nright, to be able to pull that\ndata right from CloudFront.\n\n250\n00:12:41.250 --> 00:12:46.480\nNow we get accelerations on the JPGs\nwhich are big, and the PHP documents,\n\n251\n00:12:46.480 --> 00:12:49.700\nthose are dynamically generated, and\nthe users get the right experience.\n\n252\n00:12:49.700 --> 00:12:53.450\nSo this is all a part of\ngetting CloudFront configured.\n\n253\n00:12:53.450 --> 00:12:56.852\nYou need to understand your application,\nand you need to understand your data.\n\n254\n00:12:56.852 --> 00:13:00.430\nBecause Amazon, there are a lot of things\nover there but they're not psychic.\n\n255\n00:13:00.430 --> 00:13:02.890\nThey can't predict how you're\napplication is gonna work.\n\n256\n00:13:02.890 --> 00:13:07.530\nSo you gotta tell it and these\npolicies are the way that you do that.\n\n257\n00:13:07.530 --> 00:13:09.710\nAll right, so\nthat's kind of what's involved there.\n\n258\n00:13:09.710 --> 00:13:13.420\nYou can have more than one origin, it's\nvery, very common if you've got static or\n\n259\n00:13:13.420 --> 00:13:15.900\nthings that need to be cached for a long\ntime, things that need to be cached for\n\n260\n00:13:15.900 --> 00:13:16.780\na short time.\n\n261\n00:13:16.780 --> 00:13:20.880\nAll of that can easily be done,\nuse policies to move access back and\n\n262\n00:13:20.880 --> 00:13:22.070\nforth between those.\n\n263\n00:13:22.070 --> 00:13:27.080\nAnd you can also use things like IAM,\nthe Identity and\n\n264\n00:13:27.080 --> 00:13:30.310\nAccess Management to be able to\ncontrol who's able to access what.\n\n265\n00:13:30.310 --> 00:13:33.820\nBut to be honest with you CloudFront\nis not normally used for private data.\n\n266\n00:13:33.820 --> 00:13:37.490\nCloudFront is used for data you're\ntrying to get out to a ton of people.\n\n267\n00:13:37.490 --> 00:13:40.960\nIf you deal with private data like\ndata that's only accessible via VPN,\n\n268\n00:13:40.960 --> 00:13:44.435\nor data that's only accessible\nfrom one location, for example.\n\n269\n00:13:44.435 --> 00:13:46.300\nCloudFront's actually not a good fit for\nthat.\n\n270\n00:13:46.300 --> 00:13:48.980\nIf all of my people are in one building,\nand\n\n271\n00:13:48.980 --> 00:13:52.210\nthey're all hitting CloudFront, they're\nall gonna go to the same edge node.\n\n272\n00:13:52.210 --> 00:13:55.000\nThey're not gonna get spread\nacross the globe, and so\n\n273\n00:13:55.000 --> 00:13:57.680\nI'm wasting my time by using\nthis global infrastructure.\n\n274\n00:13:57.680 --> 00:14:02.790\nSo CloudFront's really the best fit for\nwhen we need to distribute data globally.\n\n275\n00:14:02.790 --> 00:14:04.840\nUsually our websites\nare great examples of that.\n\n276\n00:14:04.840 --> 00:14:07.570\nWe want anybody on the planet people\nto be able to get to our website.\n\n277\n00:14:07.570 --> 00:14:09.420\nGreat use for CloudFront.\n\n278\n00:14:09.420 --> 00:14:13.510\nFor our corporate employee handbook,\neverybody's in our corporate offices and\n\n279\n00:14:13.510 --> 00:14:15.335\nso they're all going to the same place.\n\n280\n00:14:15.335 --> 00:14:16.580\nCloudFront is not a good fit for that.\n\n281\n00:14:16.580 --> 00:14:20.160\nSo always make sure you're only using\nit if you actually benefit from it.\n\n282\n00:14:20.160 --> 00:14:23.930\n&gt;&gt; Now Don, you've spread out many\ndifferent examples of using CloudFront.\n\n283\n00:14:23.930 --> 00:14:28.690\nAre there additional maybe scenarios\nwhere we could see using CloudFront?\n\n284\n00:14:28.690 --> 00:14:30.910\n&gt;&gt; Mostly, it's when users\nare distributed geographically right?\n\n285\n00:14:30.910 --> 00:14:32.490\nSo they're spread across the globe.\n\n286\n00:14:32.490 --> 00:14:36.040\nIf we're doing streaming media we can\nbenefit from it because you get multiple\n\n287\n00:14:36.040 --> 00:14:37.360\nstreaming video servers.\n\n288\n00:14:37.360 --> 00:14:38.990\nStreaming video eats\nup a lot of bandwidth.\n\n289\n00:14:38.990 --> 00:14:40.730\nSo, it's a great use of CloudFront.\n\n290\n00:14:40.730 --> 00:14:45.040\nIf you want to throw your entire website,\nif you have a static website,\n\n291\n00:14:45.040 --> 00:14:47.330\nyou can throw the whole\nthing into CloudFront and\n\n292\n00:14:47.330 --> 00:14:48.840\nit's like you got web\nservers all over the planet.\n\n293\n00:14:48.840 --> 00:14:52.560\nSo, those are all great uses for\nCloudFront where it really becomes handy.\n\n294\n00:14:53.840 --> 00:14:55.930\nBut CloudFront isn't the only storage\nservice that I wanted to talk\n\n295\n00:14:55.930 --> 00:14:56.470\nabout in this episode.\n\n296\n00:14:56.470 --> 00:14:58.030\nI got one more I need to get through.\n\n297\n00:14:58.030 --> 00:14:59.980\nAnd that's the storage gateway.\n\n298\n00:14:59.980 --> 00:15:03.400\nI talked briefly about the storage\ngateway back in the S3 episode.\n\n299\n00:15:03.400 --> 00:15:05.410\nBut I wanna talk about it again now.\n\n300\n00:15:05.410 --> 00:15:07.090\nWith S3 buckets.\n\n301\n00:15:07.090 --> 00:15:09.080\nS3 buckets are stored in AWS.\n\n302\n00:15:09.080 --> 00:15:11.250\nThey're stored in the cloud.\n\n303\n00:15:11.250 --> 00:15:13.690\nBut our data may not be there, right?\n\n304\n00:15:13.690 --> 00:15:17.520\nOur data may actually be on premises and\nfor most of us it is and we're in\n\n305\n00:15:17.520 --> 00:15:21.200\nthe process of moving into the cloud or\nmaybe we need to keep it on premises.\n\n306\n00:15:21.200 --> 00:15:25.340\nWell, the storage gateway helps you\nconnect your on premises storage\n\n307\n00:15:25.340 --> 00:15:27.300\nwith your cloud storage.\n\n308\n00:15:27.300 --> 00:15:29.310\nAnd it's got three different\nmodes that it can operate in,\n\n309\n00:15:29.310 --> 00:15:32.120\ndepending on what it is you're\ntrying to achieve, all right.\n\n310\n00:15:32.120 --> 00:15:36.490\nIn a perfect world, what we're trying to\ndo is just get our data up into the cloud.\n\n311\n00:15:36.490 --> 00:15:39.030\nAnd so if you fire up a storage gateway,\n\n312\n00:15:39.030 --> 00:15:43.300\none of the models you can choose\nsets up that exact environment.\n\n313\n00:15:43.300 --> 00:15:44.550\nWhen you deploy a storage gateway,\n\n314\n00:15:44.550 --> 00:15:47.550\nlet me pull up the storage\ngateway page here real quick.\n\n315\n00:15:47.550 --> 00:15:49.521\nSo I'm gonna go under Storage and\nStorage Gateway.\n\n316\n00:15:49.521 --> 00:15:51.978\nAnd when we get in here\nto create our gateways,\n\n317\n00:15:51.978 --> 00:15:55.825\nthere's three different types of\ngateways that we'll be able to make.\n\n318\n00:15:55.825 --> 00:15:59.282\nAnd if you scroll down you'll see\nit's got, enabling cloud workloads,\n\n319\n00:15:59.282 --> 00:16:01.846\nbackup and archive to AWS,\nand tiered storage in AWS,\n\n320\n00:16:01.846 --> 00:16:05.370\nthere's kind of three different\nthings that it does, all right?\n\n321\n00:16:05.370 --> 00:16:08.945\nWell the first one,\nenabling cloud workloads, what that.\n\n322\n00:16:08.945 --> 00:16:16.265\nThat does is it allows you to have storage\nlike an S3 bucket that is up in AWS.\n\n323\n00:16:16.265 --> 00:16:22.510\nAnd via a VPN, via secured tunnel to\nconnect your on-premises devices to it.\n\n324\n00:16:22.510 --> 00:16:25.270\nNow when I mention a secure tunnel,\nhow does that work?\n\n325\n00:16:25.270 --> 00:16:28.020\nWhen you deploy a storage gateway,\nthere's actually two sides to it.\n\n326\n00:16:28.020 --> 00:16:31.530\nThere's one side that's up in AWS and\nthere's one side that's local.\n\n327\n00:16:31.530 --> 00:16:33.770\nAmazon has a virtual appliance.\n\n328\n00:16:33.770 --> 00:16:38.030\nYou can spin it up on top of VMware or\nHyper-V or Xen or\n\n329\n00:16:38.030 --> 00:16:40.740\nwhatever virtualization\nplatform you're running.\n\n330\n00:16:40.740 --> 00:16:44.260\nYou bring up that instance and\nit shows up as a server on your network.\n\n331\n00:16:44.260 --> 00:16:47.660\nAnd that server, it just looks like\nany other server on the network.\n\n332\n00:16:47.660 --> 00:16:50.700\nIt actually looks like\nan iSCSI storage appliance.\n\n333\n00:16:50.700 --> 00:16:55.690\nAnd so, you can take a Windows server,\na Linux server, a MacOS, whatever it is\n\n334\n00:16:55.690 --> 00:16:59.765\nthat uses a server on premises and\nyou can connect to that iSCSI storage.\n\n335\n00:16:59.765 --> 00:17:02.045\nIt thinks that it's local storage, but\n\n336\n00:17:02.045 --> 00:17:06.185\nin reality on the backend,\nit's sending us up into S3.\n\n337\n00:17:06.185 --> 00:17:08.925\nSo here's the interesting part, and\nyou're probably already thinking this.\n\n338\n00:17:08.925 --> 00:17:13.065\nIf I have this virtual appliance that\nshows up as iSCSI storage, and I connect,\n\n339\n00:17:13.065 --> 00:17:14.915\nlet's say I take a Windows server and\nI connect to it, so\n\n340\n00:17:14.915 --> 00:17:17.545\nnow it's just regular file\nshares on the network.\n\n341\n00:17:17.545 --> 00:17:20.470\nI can throw data in there, and\nit's gonna get sent up to S3 and\n\n342\n00:17:20.470 --> 00:17:21.670\nI can pull data out of it, right?\n\n343\n00:17:21.670 --> 00:17:24.230\nSo the end users,\nthey don't even know S3 exists.\n\n344\n00:17:24.230 --> 00:17:25.010\nBut what about the speed?\n\n345\n00:17:25.010 --> 00:17:26.430\nIsn't that gonna be slow?\n\n346\n00:17:26.430 --> 00:17:27.370\nWell, the short answer is yes.\n\n347\n00:17:27.370 --> 00:17:29.820\nYes, it's gonna be slow, right,\nbecause it's all the way up in the cloud.\n\n348\n00:17:29.820 --> 00:17:31.680\nIt's gotta reach out over\nthe Internet connection.\n\n349\n00:17:31.680 --> 00:17:33.650\nBut the virtual appliance is caching.\n\n350\n00:17:33.650 --> 00:17:37.830\nIt can cache frequently accessed or\nrecently read items.\n\n351\n00:17:37.830 --> 00:17:41.130\nSo they're actually being\naccessed from the local cache.\n\n352\n00:17:41.130 --> 00:17:41.980\nBut it is just a cache.\n\n353\n00:17:41.980 --> 00:17:44.870\nThere's not permanent storage inside\nof that appliance by default.\n\n354\n00:17:44.870 --> 00:17:48.410\nWhen you deploy it as just\na typical storage gateway,\n\n355\n00:17:48.410 --> 00:17:51.410\nmost of your data is gonna\nbe up in the Cloud in S3.\n\n356\n00:17:51.410 --> 00:17:54.740\nAnd you just see it as\nregular file storage.\n\n357\n00:17:54.740 --> 00:17:57.040\nThat makes it really easy for\neven a small business.\n\n358\n00:17:57.040 --> 00:17:59.110\nI mean you might be a five\nperson dentist office and\n\n359\n00:17:59.110 --> 00:18:01.180\nyou don't really know\nanything about the Cloud.\n\n360\n00:18:01.180 --> 00:18:03.720\nWell, you just see a storage\nserver on the network.\n\n361\n00:18:03.720 --> 00:18:05.100\nIt's all seemless to you.\n\n362\n00:18:05.100 --> 00:18:08.470\nAnd your data is being sent\nup into a highly available,\n\n363\n00:18:08.470 --> 00:18:11.600\nhigh durability environment\nthat's very easy to back up.\n\n364\n00:18:11.600 --> 00:18:12.920\nThat you'd maintain versioning and\n\n365\n00:18:12.920 --> 00:18:17.490\nall that other stuff taking advantage\nof the cloud and doing it seamlessly.\n\n366\n00:18:17.490 --> 00:18:19.640\nSo that's one example of how we\ncan deploy a storage gateway.\n\n367\n00:18:19.640 --> 00:18:20.760\nAll right?\n\n368\n00:18:20.760 --> 00:18:22.230\nThere is another way.\n\n369\n00:18:22.230 --> 00:18:28.390\nMaybe I'm not so concerned about\nhaving all my data in the cloud.\n\n370\n00:18:28.390 --> 00:18:31.190\nI just want the cloud to serve\nas a backup for me, right.\n\n371\n00:18:31.190 --> 00:18:33.650\nYou can change how that storage\nappliance is configured.\n\n372\n00:18:33.650 --> 00:18:37.610\nAnd instead of maintaining a cache, it\ncan maintain the entire set of your data.\n\n373\n00:18:37.610 --> 00:18:41.870\nSo now you can have an entire\non premises set of your data\n\n374\n00:18:41.870 --> 00:18:44.700\nthat's being replicated into the cloud.\n\n375\n00:18:44.700 --> 00:18:48.200\nThat gives you an a synchronization back\nup of your data in the cloud that you\n\n376\n00:18:48.200 --> 00:18:49.460\nnever touch.\n\n377\n00:18:49.460 --> 00:18:50.950\nUnless you have a failure right?\n\n378\n00:18:50.950 --> 00:18:53.840\nIf you have a failure now\nyou know you've got a whole\n\n379\n00:18:53.840 --> 00:18:55.400\ncopy of your data up there in the cloud.\n\n380\n00:18:55.400 --> 00:18:57.310\nSo it gives you that kind of independence.\n\n381\n00:18:57.310 --> 00:19:00.980\nIt removes you on that dependency\nof an on premises device,\n\n382\n00:19:00.980 --> 00:19:05.650\nthat if you have a failure you know you've\ngot an off site backup of that data\n\n383\n00:19:05.650 --> 00:19:09.280\nas long as you put your data into the\nfolders that are part of that appliance.\n\n384\n00:19:09.280 --> 00:19:11.419\nSo you're still deploying\nthat virtual appliance,\n\n385\n00:19:11.419 --> 00:19:13.706\nit's still an iSCSI device\nthat's seen by your server.\n\n386\n00:19:13.706 --> 00:19:17.887\nYou still connect a server to it's just\nthe data is being stored locally and\n\n387\n00:19:17.887 --> 00:19:19.091\nreplicated remotely.\n\n388\n00:19:19.091 --> 00:19:21.000\nSo you're storing data twice.\n\n389\n00:19:21.000 --> 00:19:23.380\nNow that works out for a lot of people.\n\n390\n00:19:23.380 --> 00:19:26.130\nI do need to throw out some mentions for\nsome limits on this.\n\n391\n00:19:27.230 --> 00:19:30.600\nWhen you set up these\ntype of environments,\n\n392\n00:19:30.600 --> 00:19:34.410\nthe first example I gave was what's\ncalled a gateway cached volume.\n\n393\n00:19:34.410 --> 00:19:39.160\nSo a cache volume is where you just have\nthe cache locally, and everything else is\n\n394\n00:19:39.160 --> 00:19:44.100\nstored up in s3, and with that one volume\ncan help the 32 terabytes of data in it.\n\n395\n00:19:44.100 --> 00:19:46.410\nThis is all backed by S3.\n\n396\n00:19:46.410 --> 00:19:48.490\nAnd S3 doesn't have data limits like that.\n\n397\n00:19:48.490 --> 00:19:52.039\nBut because of the virtual appliance\naccess it, there are limits.\n\n398\n00:19:52.039 --> 00:19:54.365\nThere's limits to partition sizes and\nthings.\n\n399\n00:19:54.365 --> 00:20:00.460\nSo, each volume is limited to 32 terabytes\nand you can have 32 volumes per gateway.\n\n400\n00:20:00.460 --> 00:20:03.860\nThat means that one gateway appliance\ncan have up to 1 petabyte of data,\n\n401\n00:20:03.860 --> 00:20:05.500\nwhich is pretty cool, right?\n\n402\n00:20:05.500 --> 00:20:08.960\nBut if I need more than 1 petabyte of\ndata, I just needed more than one gateway.\n\n403\n00:20:08.960 --> 00:20:11.890\nYou can spend up more than one gateway,\nand then it can all connect up.\n\n404\n00:20:11.890 --> 00:20:13.490\nAnd now,\nyou can have more than a petabyte of data.\n\n405\n00:20:13.490 --> 00:20:15.740\nSo you can have huge amounts\nof data store this way.\n\n406\n00:20:15.740 --> 00:20:19.010\nBut the first example I gave\nwas a gateway cached volume.\n\n407\n00:20:19.010 --> 00:20:22.300\nThe second example was where all\nof the data was on premises and\n\n408\n00:20:22.300 --> 00:20:24.440\nit was being backed up to the remote site,\nright?\n\n409\n00:20:24.440 --> 00:20:27.040\nThat is a gateway stored volume.\n\n410\n00:20:27.040 --> 00:20:31.100\nAnd with a gateway stored volume,\nthe data is stored up there in S3, but\n\n411\n00:20:31.100 --> 00:20:33.390\nI've got it stored locally, too.\n\n412\n00:20:33.390 --> 00:20:37.650\nSo we've got it on premises and\nwe're able to basically back it up.\n\n413\n00:20:37.650 --> 00:20:41.380\nNow the backups use EBS, so\nit's elastic block store snapshots.\n\n414\n00:20:41.380 --> 00:20:43.530\nThat's why I said it's\nan asynchronous backup.\n\n415\n00:20:43.530 --> 00:20:47.930\nAnd on these you can only have\n16 terabytes in a volume.\n\n416\n00:20:47.930 --> 00:20:50.370\nStill 32 volumes per gateway but\n\n417\n00:20:50.370 --> 00:20:55.470\nthat means that you only get\n512 terabytes of storage.\n\n418\n00:20:55.470 --> 00:20:59.950\nSo it was 1 petabyte with gateway caching,\n\n419\n00:20:59.950 --> 00:21:04.560\n500 terabytes or half of a petabyte\nwhen you do gateway stored volumes.\n\n420\n00:21:04.560 --> 00:21:07.750\nAll right.\nSo two different implementations there.\n\n421\n00:21:07.750 --> 00:21:11.160\nThey both show up as folders on\nyour network that you can access or\n\n422\n00:21:11.160 --> 00:21:15.430\nas ISCSI volumes you can access directly,\nthat's how they show up on the network.\n\n423\n00:21:15.430 --> 00:21:16.970\nBut the amount of storage\nis a little bit different.\n\n424\n00:21:16.970 --> 00:21:19.460\nThat's important,\nthat can turn up on the exam.\n\n425\n00:21:19.460 --> 00:21:23.220\nNow the third model is probably\nthe most interesting one, right?\n\n426\n00:21:23.220 --> 00:21:26.760\nBecause what it says is, all right,\ngreat, if we're gonna use this for\n\n427\n00:21:26.760 --> 00:21:29.780\na backup, having some folders on\nthe network that you can back up to,\n\n428\n00:21:29.780 --> 00:21:34.510\nthat's great, but what if we've already\ninvested in third party backup software?\n\n429\n00:21:34.510 --> 00:21:38.900\nA lot of people have things like\nSymantec or Veritas Backup Exec,\n\n430\n00:21:40.080 --> 00:21:43.930\nCommvault, Arcserv,\nthere's a whole number of\n\n431\n00:21:43.930 --> 00:21:48.720\nbackup solutions that people use locally\nand most of them leverage tape drives.\n\n432\n00:21:48.720 --> 00:21:50.860\nYou might have LTO or\neven DLT tape drives,\n\n433\n00:21:50.860 --> 00:21:53.800\nthey have older ones that\nyou're backing up to tape.\n\n434\n00:21:53.800 --> 00:21:56.970\nAnd the nice part about tape is\ntape can hold a lot of data and\n\n435\n00:21:56.970 --> 00:22:00.350\nit's easy to just eject from\na cartridge and send it offsite.\n\n436\n00:22:00.350 --> 00:22:03.300\nWe used to use Iron Mountain was a company\nthat would come and pick up the tapes and\n\n437\n00:22:03.300 --> 00:22:06.320\ntake them offsite, store them in a vault,\nand then we could retrieve them as needed.\n\n438\n00:22:06.320 --> 00:22:10.870\nSo that kind of off site backup is very,\nvery common for enterprises.\n\n439\n00:22:10.870 --> 00:22:14.440\nAnd if you've been doing it for years\non end, you don't wanna give that up.\n\n440\n00:22:14.440 --> 00:22:15.200\nThat's your safety net.\n\n441\n00:22:15.200 --> 00:22:15.950\nThat's your backup.\n\n442\n00:22:15.950 --> 00:22:18.190\nNobody likes to mess with their backup.\n\n443\n00:22:18.190 --> 00:22:21.710\nSo Amazon created a third model for\ntheir gateway appliance.\n\n444\n00:22:21.710 --> 00:22:22.750\nIt's the same appliance.\n\n445\n00:22:22.750 --> 00:22:25.030\nAll these examples use\nthe same virtual appliance.\n\n446\n00:22:25.030 --> 00:22:27.120\nIt's just the configuration for\nit is what changes.\n\n447\n00:22:27.120 --> 00:22:30.950\nAnd the third model is what's\ncalled a virtual tape library.\n\n448\n00:22:30.950 --> 00:22:35.520\nThe appliance can actually make\nitself look like a tape robot.\n\n449\n00:22:35.520 --> 00:22:38.530\nTape robots are those big boxes where\nyou load them up with tapes, and\n\n450\n00:22:38.530 --> 00:22:42.320\nthey have a robotic arm that grabs a tape,\ndrops it into a tape drive.\n\n451\n00:22:42.320 --> 00:22:45.590\nAnd then, when you fill that tape a bit\ntakes the tape out, puts a new one in.\n\n452\n00:22:45.590 --> 00:22:47.890\nSo it's automatically rotating tapes for\nus.\n\n453\n00:22:47.890 --> 00:22:50.290\nWell, with tapes,\nyou've got to put in the physical tapes,\n\n454\n00:22:50.290 --> 00:22:51.200\nyou've got to take them all off site.\n\n455\n00:22:51.200 --> 00:22:54.100\nBut, with a virtual type library,\nit's just faking it.\n\n456\n00:22:54.100 --> 00:22:55.560\nIt's saying, yeah, that's a tape.\n\n457\n00:22:55.560 --> 00:22:57.830\nAll right.\nThen you put some data in there.\n\n458\n00:22:57.830 --> 00:22:59.790\nYeah, I injected that, here's a new tape.\n\n459\n00:22:59.790 --> 00:23:00.750\nIt's not really doing anything.\n\n460\n00:23:00.750 --> 00:23:04.170\nOn the backend they're just volumes\nthat they're storing the data on, right.\n\n461\n00:23:04.170 --> 00:23:07.090\nBut it looks like tapes to the network.\n\n462\n00:23:07.090 --> 00:23:09.640\nSo you can leverage your\nexisting backup software.\n\n463\n00:23:09.640 --> 00:23:13.570\nYou can leverage BackupExec, ArcServe,\nConvult, and they just see this as\n\n464\n00:23:13.570 --> 00:23:16.300\na robotic tape drive, and\nthey start sending their backups to it.\n\n465\n00:23:16.300 --> 00:23:20.780\nAnd it's really cool because they see it\nas a tape, so they backup to the tape and\n\n466\n00:23:20.780 --> 00:23:25.730\nthen, when they send an inject signal\nwhat the storage gateway does, it takes\n\n467\n00:23:25.730 --> 00:23:29.310\nthat volume, and it says okay this\nvolume is done so it takes it offline.\n\n468\n00:23:29.310 --> 00:23:33.800\nAnd it takes a snapshot of it,\nstores a snapshot of an S3.\n\n469\n00:23:33.800 --> 00:23:35.620\nAnd that's it, that tapes now gone.\n\n470\n00:23:35.620 --> 00:23:36.770\nWe got the snapshot up in S3.\n\n471\n00:23:36.770 --> 00:23:41.740\nAnd then it puts in the next tape which\nreally is just another empty volume.\n\n472\n00:23:41.740 --> 00:23:42.487\nAnd we start writing to it.\n\n473\n00:23:42.487 --> 00:23:46.207\nAnd the moment an inject is sent\nit starts replicating it off-site.\n\n474\n00:23:46.207 --> 00:23:51.814\nSo, we're instantaneously\nreplicating our tapes up into S3.\n\n475\n00:23:51.814 --> 00:23:54.718\nAnd in S3, you have a virtual tape shelf,\n\n476\n00:23:54.718 --> 00:23:59.250\na virtual shelf of all these virtual\ntapes that are sitting there.\n\n477\n00:23:59.250 --> 00:24:00.160\nAnd you can go out and\n\n478\n00:24:00.160 --> 00:24:03.540\nretrieve any one of them that you\nneed when the time comes, right?\n\n479\n00:24:03.540 --> 00:24:06.680\nBut everything's being loaded up in that\ntape shelf and being stored right there.\n\n480\n00:24:06.680 --> 00:24:11.210\nSo, you continue to back up the exact\nsame way you're backing up now,\n\n481\n00:24:11.210 --> 00:24:14.520\nthe difference being,\nall the off-site stuff is automatic.\n\n482\n00:24:14.520 --> 00:24:17.250\nAnd unlike services like IR Mountain,\nwhere I used to have to call them up and\n\n483\n00:24:17.250 --> 00:24:18.840\nsay, all right, I need tape.\n\n484\n00:24:18.840 --> 00:24:20.350\nWell you'd have the tape barcode, so\n\n485\n00:24:20.350 --> 00:24:23.800\nI'd have to rattle off the barcodes\nthat I needed and I might need 15 tapes.\n\n486\n00:24:23.800 --> 00:24:26.780\nWell, it would take them an hour to\nfind the tapes, because you have so\n\n487\n00:24:26.780 --> 00:24:28.400\nmany, they're barcodes.\n\n488\n00:24:28.400 --> 00:24:29.550\nSo you have to find the tapes, and\n\n489\n00:24:29.550 --> 00:24:32.210\nthen they'd have to get them loaded\nup into a truck and drive them out.\n\n490\n00:24:32.210 --> 00:24:35.130\nIt would take at least two hours,\ntwo hours if we did the express service,\n\n491\n00:24:35.130 --> 00:24:36.160\nto get those tapes.\n\n492\n00:24:36.160 --> 00:24:38.180\nI mean,\nnot anything bad about IR Mountain,\n\n493\n00:24:38.180 --> 00:24:42.610\nit's just that's how long it takes\nto find the tapes and retrieve them.\n\n494\n00:24:42.610 --> 00:24:48.860\nBut with a virtual tape shelf up in S3,\nyou just, I need this one and there it is.\n\n495\n00:24:48.860 --> 00:24:49.500\nAnd it's available.\n\n496\n00:24:49.500 --> 00:24:51.280\nIt's instantly there.\n\n497\n00:24:51.280 --> 00:24:52.860\nAnd it was off-site the whole time.\n\n498\n00:24:52.860 --> 00:24:56.570\nYour entire building could be destroyed,\nthe whole tape shelf is already up there.\n\n499\n00:24:56.570 --> 00:24:57.860\nAnd we don't worry about other things,\n\n500\n00:24:57.860 --> 00:25:00.540\nlike with magnetic tapes they're magnetic,\nright?\n\n501\n00:25:00.540 --> 00:25:04.180\nSo if they get exposed to enough\nelectromagnetic interference they can\n\n502\n00:25:04.180 --> 00:25:06.470\nlose their data,\nthey can lose what's stored on them.\n\n503\n00:25:06.470 --> 00:25:07.970\nOr they can even lose tension, right?\n\n504\n00:25:07.970 --> 00:25:10.920\nThe tape is wound, and if it starts to\ncome loose, eventually the tape goes bad.\n\n505\n00:25:10.920 --> 00:25:13.260\nIf you've ever messed with\ncleaning cartridges and\n\n506\n00:25:13.260 --> 00:25:16.750\nall that other mess, all that's gone,\nand you have this virtual tape library.\n\n507\n00:25:16.750 --> 00:25:18.720\nSo really easy to snap in for\n\n508\n00:25:18.720 --> 00:25:22.160\ncompanies that have established\nbackup processes using physical tape.\n\n509\n00:25:22.160 --> 00:25:23.620\nIt's a great solution for that.\n\n510\n00:25:23.620 --> 00:25:26.490\n&gt;&gt; Now, Don, just like the first two\ntechnologies that you talked about,\n\n511\n00:25:26.490 --> 00:25:29.740\nthese are, I can only assume, are gonna\nhave some kinda limitations as well that\n\n512\n00:25:29.740 --> 00:25:31.850\nwe need to take into consideration\nbefore we implement this.\n\n513\n00:25:31.850 --> 00:25:32.610\n&gt;&gt; That's true, yep.\n\n514\n00:25:32.610 --> 00:25:36.380\nSo, the virtual tape shelf,\nit's actually using Glacier.\n\n515\n00:25:36.380 --> 00:25:40.390\nAnd Glacier is very, very forward about\nthe fact that they have no limits.\n\n516\n00:25:40.390 --> 00:25:42.402\nYou can store a ton of data in there,\nright?\n\n517\n00:25:42.402 --> 00:25:44.110\nAnd that's true.\n\n518\n00:25:44.110 --> 00:25:48.000\nBut there are a couple of odd little\nlimits, which is you have to have\n\n519\n00:25:48.000 --> 00:25:53.410\na virtual tape shelf, and you can only\nhave one virtual tape shelf per region.\n\n520\n00:25:53.410 --> 00:25:57.260\nAnd that sounds kind of weird, like what\nif I have two different types of back-ups\n\n521\n00:25:57.260 --> 00:25:58.870\nI want to do, so\nI want two different shelves.\n\n522\n00:25:58.870 --> 00:26:00.970\nWell no, you get one shelf per region.\n\n523\n00:26:00.970 --> 00:26:03.280\nYou could create another\nshelf in another region.\n\n524\n00:26:03.280 --> 00:26:06.350\nAnd that's fine you can distribute\nyour backups that way if you want.\n\n525\n00:26:06.350 --> 00:26:08.870\nBut the reality is the tape\nshelf itself has no limit.\n\n526\n00:26:08.870 --> 00:26:12.220\nSo all of your tapes can\nbe stored in one place.\n\n527\n00:26:12.220 --> 00:26:15.870\nAnd thinking from the physical side,\nwe used to try and\n\n528\n00:26:15.870 --> 00:26:18.910\nkeep our tapes separate based on which\nservers or which data was being backed up,\n\n529\n00:26:18.910 --> 00:26:20.990\njust to make it where all\nthe tapes were in one place.\n\n530\n00:26:20.990 --> 00:26:24.340\nBut here, we're always referencing them\nby their code, so it doesn't matter if\n\n531\n00:26:24.340 --> 00:26:27.690\nthey're all lumped together and even if\nyour mind pictures this giant warehouse\n\n532\n00:26:27.690 --> 00:26:31.890\nfull of tapes, that's fine, because we\ncan instantly retrieve what we want.\n\n533\n00:26:31.890 --> 00:26:34.950\nSo you really don't need more than\none virtual tape shelf per region.\n\n534\n00:26:34.950 --> 00:26:37.720\nIf you do, though, if you come up with\nsome use case scenario where you have to\n\n535\n00:26:37.720 --> 00:26:40.900\nhave it, you can always use\na second Amazon account, and\n\n536\n00:26:40.900 --> 00:26:43.180\ngo that way, and\nthen you can have two in the same region.\n\n537\n00:26:43.180 --> 00:26:47.360\nBut, for one Amazon account, you can only\nhave one virtual tape shelf per region.\n\n538\n00:26:47.360 --> 00:26:50.380\nNow, as far as tapes on that shelf,\nno limit.\n\n539\n00:26:50.380 --> 00:26:51.260\nYou can have as many as you want.\n\n540\n00:26:51.260 --> 00:26:53.000\nYou can throw a ton of them in there,\nit's fine.\n\n541\n00:26:53.000 --> 00:26:54.940\nIt's all Glacier storage on the backside,\nso\n\n542\n00:26:54.940 --> 00:26:58.390\nit can store a near\nlimitless amount of data.\n\n543\n00:26:58.390 --> 00:27:02.040\nIt's really just limited by\nthe amount of data you can generate.\n\n544\n00:27:02.040 --> 00:27:03.730\n&gt;&gt; All right,\nthat's a lot of great information.\n\n545\n00:27:03.730 --> 00:27:05.930\nA lot of different technologies\nto take into consideration for\n\n546\n00:27:05.930 --> 00:27:06.910\nthe certification, Don.\n\n547\n00:27:06.910 --> 00:27:09.700\nNow, one thing we don't seem\nto have any elasticity on\n\n548\n00:27:09.700 --> 00:27:10.890\nare the minutes in this episode.\n\n549\n00:27:10.890 --> 00:27:11.880\nBut before we sign out,\n\n550\n00:27:11.880 --> 00:27:14.630\ndo you have any additional words about\nsome of the services that you've\n\n551\n00:27:14.630 --> 00:27:15.610\npresented here?\n\n552\n00:27:15.610 --> 00:27:19.770\n&gt;&gt; Let's see, I guess one other\nlimit I forgot to mention is that\n\n553\n00:27:19.770 --> 00:27:23.240\na single gateway can\nonly track 1,500 tapes.\n\n554\n00:27:23.240 --> 00:27:25.240\nSo if you have 1,500 virtual tapes, and\n\n555\n00:27:25.240 --> 00:27:27.680\nyou need more you'll have to do a second\ngateway or you'll have to delete tapes.\n\n556\n00:27:27.680 --> 00:27:31.040\nUsually you just delete tapes,\n1500 tapes is a lot of information,\n\n557\n00:27:31.040 --> 00:27:33.170\nbecause there's no limit\non the size of a tape.\n\n558\n00:27:33.170 --> 00:27:35.670\nSo that can be a huge amount of data.\n\n559\n00:27:35.670 --> 00:27:38.470\nIf you need more than 1500 backups,\nthough, you may need to add an extra\n\n560\n00:27:38.470 --> 00:27:41.600\ngateway or you may need to purge older\nbackups to make room for new ones.\n\n561\n00:27:41.600 --> 00:27:42.890\nYou have to pay for storage on all this.\n\n562\n00:27:42.890 --> 00:27:45.140\nIt is Glacier, so it's cheap, but\nyou do have to pay for the storage.\n\n563\n00:27:45.140 --> 00:27:46.210\nSo keep that in mind.\n\n564\n00:27:46.210 --> 00:27:49.660\nThe other thing is just remember, there's\na lot of options that are available.\n\n565\n00:27:49.660 --> 00:27:52.930\nIn this episode,\nwe talked about CloudFront for\n\n566\n00:27:52.930 --> 00:27:56.390\ncaching our data all across the globe, and\nwe talked about the storage gateways for\n\n567\n00:27:56.390 --> 00:27:58.520\ngetting our data into the cloud.\n\n568\n00:27:58.520 --> 00:28:01.640\nThere's still a lot more that we have,\na lot of other key services to talk about\n\n569\n00:28:01.640 --> 00:28:03.720\nin the following episode,\nso stay tuned for those.\n\n570\n00:28:03.720 --> 00:28:05.790\n&gt;&gt; All right, Don,\ngreat place to wrap this one up.\n\n571\n00:28:05.790 --> 00:28:07.660\nWe appreciate you being here, as always.\n\n572\n00:28:07.660 --> 00:28:09.370\nAnd we appreciate you,\nthe viewer, watching.\n\n573\n00:28:09.370 --> 00:28:12.290\nSigning off for ITProTV,\nI've been your host, Wes Brian.\n\n574\n00:28:12.290 --> 00:28:13.080\n&gt;&gt; And I'm Don Pezet.\n\n575\n00:28:13.080 --> 00:28:15.599\n&gt;&gt; And we'll see you next time.\n\n576\n00:28:15.599 --> 00:28:21.458\n[MUSIC]\n\n577\n00:28:21.458 --> 00:28:24.548\nThank you for watching ITProTV.\n\n",
          "vimeoId": "209556076"
        },
        {
          "description": "In this episode, Wes and Don dive into additional services provided through AWS, focusing in on security services. They talk about AWS Directory services, AWS Key Management Services and Cloud HSM. They will also look at AWS CloudTrail.",
          "length": "1429",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-2-security_services-031617-PGM.00_23_36_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-2-security_services-031617-PGM.00_23_36_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-2-security_services-031617-PGM.00_23_36_01.Still001-sm.jpg",
          "title": "Security Services",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:08.250\nWelcome on ITPRO.TV I'm\nyour host [CROSSTALK].\n\n2\n00:00:08.250 --> 00:00:09.921\n&gt;&gt; You are watching ITPRO.TV\n&gt;&gt; Hello and\n\n3\n00:00:09.921 --> 00:00:14.745\nwelcome on ITPRO.TV Thank you\n&gt;&gt; Thank you for joining us,\n\n4\n00:00:14.745 --> 00:00:17.835\nI'm your show host Wes Brian, and\nwe got a great show for you today.\n\n5\n00:00:17.835 --> 00:00:21.855\nWe're looking at the AWS Certified\nSolution Architect Associate, and\n\n6\n00:00:21.855 --> 00:00:24.495\njoining us in the studios today\nnone other than Mr. Don Pezet.\n\n7\n00:00:24.495 --> 00:00:25.555\nDon, how you doing sir?\n\n8\n00:00:25.555 --> 00:00:28.330\n&gt;&gt; I'm doing great Wes, ready to\ncontinue our journey of looking at\n\n9\n00:00:28.330 --> 00:00:31.240\n&gt;&gt; Additional key services in AWS.\n\n10\n00:00:31.240 --> 00:00:34.400\nWe've been taking a look at a lot of\ndifferent services and trying to make sure\n\n11\n00:00:34.400 --> 00:00:37.500\nthat we all understood the use case\nscenario for them and how they're used.\n\n12\n00:00:37.500 --> 00:00:41.160\nBut we've got a whole collection of\nsmaller services we need to mention that\n\n13\n00:00:41.160 --> 00:00:42.550\nare important, right.\n\n14\n00:00:42.550 --> 00:00:44.070\nBut they're not solutions for everybody,\n\n15\n00:00:44.070 --> 00:00:48.300\nso these aren't ones that work into every\ndesign that you're going to use, but\n\n16\n00:00:48.300 --> 00:00:51.690\nthere are several designs where these\nare very pivotal very important services.\n\n17\n00:00:51.690 --> 00:00:52.460\nThey work out really well.\n\n18\n00:00:52.460 --> 00:00:57.820\nSo a little more purpose driven services,\nand in our last episode we did the storage\n\n19\n00:00:57.820 --> 00:01:00.840\nservices, in this episode we're gonna\ntake a look at security services.\n\n20\n00:01:00.840 --> 00:01:03.630\nSome of the extra security\nimplementations that we've got.\n\n21\n00:01:03.630 --> 00:01:06.000\nWe mention IM more than a few times,\n\n22\n00:01:06.000 --> 00:01:10.070\nI think we actually got a whole\nmodule on IM coming up here soon.\n\n23\n00:01:10.070 --> 00:01:14.490\nBut IM is just one piece of security\nthat's used for identity and\n\n24\n00:01:14.490 --> 00:01:16.130\naccess management.\n\n25\n00:01:16.130 --> 00:01:18.790\nFor the most part for\naccessing the server as a whole not for\n\n26\n00:01:18.790 --> 00:01:20.600\ncontrolling the services inside.\n\n27\n00:01:20.600 --> 00:01:24.120\nWell when we started to need\nadditional security controls,\n\n28\n00:01:24.120 --> 00:01:26.010\nthere's a few more\noptions we can implement.\n\n29\n00:01:26.010 --> 00:01:29.250\nSo that's what we're gonna take\na look at right here in this episode.\n\n30\n00:01:29.250 --> 00:01:33.240\nThe first service I want to talk about is,\nactually it's more like three services,\n\n31\n00:01:33.240 --> 00:01:35.860\nit's the directory service\nthat's a part of AWS.\n\n32\n00:01:35.860 --> 00:01:40.290\nAWS directory service allows us to have\na centralized user data base, right?\n\n33\n00:01:40.290 --> 00:01:41.470\nUser data bases are important.\n\n34\n00:01:41.470 --> 00:01:45.540\nA lot of times when we're\ndeploying something in like EC2 or\n\n35\n00:01:45.540 --> 00:01:48.110\nAWS in general,\nit's something like a web application.\n\n36\n00:01:48.110 --> 00:01:51.510\nAnd with a web application\nyou've got web front end.\n\n37\n00:01:51.510 --> 00:01:52.730\nYou've got database servers.\n\n38\n00:01:52.730 --> 00:01:53.980\nMaybe you have a distributed cache.\n\n39\n00:01:53.980 --> 00:01:54.760\nYou have load balancers.\n\n40\n00:01:54.760 --> 00:01:56.150\nYou have all these different components,\nright?\n\n41\n00:01:56.150 --> 00:01:57.990\nYou're always gonna have those but\n\n42\n00:01:57.990 --> 00:02:02.730\nif it's a static web page that we're\nserving up, people don't log into it.\n\n43\n00:02:02.730 --> 00:02:04.960\nI don't necessarily need user management.\n\n44\n00:02:04.960 --> 00:02:07.980\nOr my end users may never\nactually access this product.\n\n45\n00:02:07.980 --> 00:02:10.390\nIt may be my customers that access it and\nso\n\n46\n00:02:10.390 --> 00:02:13.060\nI manage the user accounts\ninside of that product.\n\n47\n00:02:13.060 --> 00:02:17.540\nBut there are times we have solutions\nup in AWS where we do want our\n\n48\n00:02:17.540 --> 00:02:22.220\nend users to be able to access\nthe products that we're putting into AWS.\n\n49\n00:02:22.220 --> 00:02:27.210\nAnd in a on-premises solution\nyou'll typically need some kind of\n\n50\n00:02:27.210 --> 00:02:30.770\ncredential management for that, and it's\nusually the user directory of some sort.\n\n51\n00:02:30.770 --> 00:02:34.950\nIt may be OpenLDAP or\nNovell Z Directory but\n\n52\n00:02:34.950 --> 00:02:37.760\nthe most popular one is\nthe Microsoft Windows Active Directory.\n\n53\n00:02:37.760 --> 00:02:39.820\nThat’s the most popular\none in enterprises today.\n\n54\n00:02:39.820 --> 00:02:42.810\nSo, when you go into a business people\nexpect to sit down, log into a computer\n\n55\n00:02:42.810 --> 00:02:46.800\nand use one username and password and then\nwhen they browse the network, shares and\n\n56\n00:02:46.800 --> 00:02:49.340\nother resources it’s that\nsame username and password.\n\n57\n00:02:49.340 --> 00:02:53.700\nWell, if we want to extend that\nfunctionality into AWS, right,\n\n58\n00:02:53.700 --> 00:02:54.600\nnow we've got a problem.\n\n59\n00:02:54.600 --> 00:02:57.510\nBecause I would have to create\nIAM credentials for them.\n\n60\n00:02:57.510 --> 00:03:02.400\nAnd give them access either via APIs,\nwhich end users don't know how to use,\n\n61\n00:03:02.400 --> 00:03:03.300\nor a Web UI.\n\n62\n00:03:03.300 --> 00:03:07.010\nWhich usually exposes more than we want\nit to so it's not really a good solution,\n\n63\n00:03:07.010 --> 00:03:12.610\nIM doesn't work for that, but a directory\ndoes it we can get it into the cloud.\n\n64\n00:03:12.610 --> 00:03:15.460\nNow you are more than welcome\nto set up an EC2 instance\n\n65\n00:03:15.460 --> 00:03:19.180\nof whatever directory service you want\non there and build up a VPN tunnel.\n\n66\n00:03:19.180 --> 00:03:20.810\nBut that requires administration.\n\n67\n00:03:20.810 --> 00:03:22.530\nIt requires making sure you do it right.\n\n68\n00:03:22.530 --> 00:03:25.850\nBecause if your directory service\ngets compromised, what happens?\n\n69\n00:03:25.850 --> 00:03:28.460\nThat's your usernames and passwords,\nthat's bad, you don't want that.\n\n70\n00:03:28.460 --> 00:03:31.750\nSo Amazon has a fully managed\ndirectory service solution.\n\n71\n00:03:31.750 --> 00:03:35.340\nAnd if we take a look,\nlike here I'm in my console and\n\n72\n00:03:35.340 --> 00:03:37.580\nin the console, if I go down to security,\n\n73\n00:03:37.580 --> 00:03:41.560\nkinda like I'm going to IAM, you'll see\nright beneath it directory service.\n\n74\n00:03:41.560 --> 00:03:45.800\nAnd I can spin up a fully managed\ndirectory service right here\n\n75\n00:03:45.800 --> 00:03:47.740\ninside of AWS.\n\n76\n00:03:47.740 --> 00:03:52.000\nNow did you see I've kind of got one in\nplace already, from my Amazon Work Spaces.\n\n77\n00:03:52.000 --> 00:03:56.720\nAmazon Work Spaces are those basically\nlike, a work station versions of\n\n78\n00:03:56.720 --> 00:03:59.380\nan easy to instance, they're not a server,\nthey're work station.\n\n79\n00:03:59.380 --> 00:04:02.080\nAnd I can log in to that workstation\nfrom anywhere in the world.\n\n80\n00:04:02.080 --> 00:04:06.870\nSo if I wanna access my work applications\nI don't care if I have my laptop or\n\n81\n00:04:06.870 --> 00:04:07.830\nsomebody else's laptop.\n\n82\n00:04:07.830 --> 00:04:08.640\nI can remote and connect.\n\n83\n00:04:08.640 --> 00:04:11.700\nWell, if I have an active\ndirectory in my office I\n\n84\n00:04:11.700 --> 00:04:14.650\nwanna be able to log in to my\nworkspace with those same credentials.\n\n85\n00:04:14.650 --> 00:04:16.720\nAnd when you create a workspace\nyou can link them together.\n\n86\n00:04:16.720 --> 00:04:21.800\nIt's created, this one this is actually\nthe workspace that Amazon manages and\n\n87\n00:04:21.800 --> 00:04:23.800\nthen we can add others into it.\n\n88\n00:04:23.800 --> 00:04:25.880\nSo right up here I can\nset up a directory and\n\n89\n00:04:25.880 --> 00:04:29.440\nyou'll see there's three different\noptions that I've got here.\n\n90\n00:04:29.440 --> 00:04:31.920\nAmazon cloud directory,\nMicrosoft active directory and\n\n91\n00:04:31.920 --> 00:04:36.370\nAmazon Cognito, your user pools which\nis where they kind of hide things.\n\n92\n00:04:36.370 --> 00:04:39.710\nIt's not really a straight up directory\nservice itself, that one's kind of weird\n\n93\n00:04:39.710 --> 00:04:45.790\nbut when we deploy, what we're normally\ngoing to see is these three models.\n\n94\n00:04:45.790 --> 00:04:50.710\nThe most common one is where we go with\na straight up Microsoft active directory.\n\n95\n00:04:50.710 --> 00:04:55.050\nThis is where in the background Amazon\ncreates a fully managed Microsoft\n\n96\n00:04:55.050 --> 00:04:58.410\nactive directory domain that's\nstored up in the cloud.\n\n97\n00:04:58.410 --> 00:05:01.761\nIt's got its own forest, its own domain,\nit's own infrastructure.\n\n98\n00:05:01.761 --> 00:05:04.770\nAnd then on-premises we\nhave our own domains,\n\n99\n00:05:04.770 --> 00:05:09.100\nour own forest, and you can build\na trust relationship between them.\n\n100\n00:05:09.100 --> 00:05:12.870\nWhen you build a trust relationship or set\nup a federation, you can go either route.\n\n101\n00:05:12.870 --> 00:05:16.070\nWhen you set up that type of\na relationship between your on-premises\n\n102\n00:05:16.070 --> 00:05:18.290\nactive directory and\nthe one that's now up in the cloud,\n\n103\n00:05:19.430 --> 00:05:23.470\nnow you can use your user accounts from\non-premises on your cloud resources.\n\n104\n00:05:23.470 --> 00:05:25.690\nAnd you simplify people's access.\n\n105\n00:05:25.690 --> 00:05:27.340\n&gt;&gt; You're speaking about on-premise Don,\n\n106\n00:05:27.340 --> 00:05:30.520\nI know that when you are using a directory\nservice resiliency is important.\n\n107\n00:05:30.520 --> 00:05:32.380\nI need to be able to login.\n\n108\n00:05:32.380 --> 00:05:36.190\nDo we have that inside of\nAmazon as far as resiliency?\n\n109\n00:05:36.190 --> 00:05:38.820\nDoes it have products or\ntechnologies there?\n\n110\n00:05:38.820 --> 00:05:42.450\n&gt;&gt; Well and it's one of the nice things of\ngoing with a fully managed system is that\n\n111\n00:05:42.450 --> 00:05:44.930\nAmazon is taking care of\nmaking this highly available.\n\n112\n00:05:44.930 --> 00:05:46.970\nThey're making it multi AZ, right?\n\n113\n00:05:46.970 --> 00:05:50.030\nSo they're distributing it\nacross availability zones.\n\n114\n00:05:50.030 --> 00:05:52.970\nThey're doing snapshot backups and\nall that's behind the scenes.\n\n115\n00:05:52.970 --> 00:05:54.330\nWe don't see any of that.\n\n116\n00:05:54.330 --> 00:05:57.550\nWe don't have to cuz it's just managed for\nus, all right?\n\n117\n00:05:57.550 --> 00:06:02.640\nNow, that solution works really well, but\nif you've ever worked with a federation,\n\n118\n00:06:02.640 --> 00:06:04.960\nor just active directory trust in general,\n\n119\n00:06:04.960 --> 00:06:06.434\nthey're not the easiest\nthings to work with.\n\n120\n00:06:06.434 --> 00:06:09.240\nWes you've done it, right, a federation.\n\n121\n00:06:09.240 --> 00:06:12.070\n&gt;&gt; Yeah, it can be very,\nvery difficult to get, for\n\n122\n00:06:12.070 --> 00:06:14.380\nsingle sign on purposes to setup and\nimplement.\n\n123\n00:06:14.380 --> 00:06:17.550\n&gt;&gt; Yeah, so\nthere's other options that we have.\n\n124\n00:06:17.550 --> 00:06:23.200\nAnother option is that we can do where the\ndirectory just existed up in the cloud,\n\n125\n00:06:23.200 --> 00:06:25.230\nand I didn't connect it to on premises.\n\n126\n00:06:25.230 --> 00:06:29.150\nMaybe I don't have any on premises servers\nanymore and I've moved everything up into\n\n127\n00:06:29.150 --> 00:06:33.880\nthe cloud Well, in those scenarios you\ncan bring up what's called, a Simple AD.\n\n128\n00:06:33.880 --> 00:06:38.470\nWhen you look here at the options,\nI've got the Microsoft Active Directory\n\n129\n00:06:38.470 --> 00:06:42.390\noption down here at the bottom and\nif I extend that out a little bit,\n\n130\n00:06:42.390 --> 00:06:44.660\nthere was a hidden option down\nhere that we couldn't see.\n\n131\n00:06:44.660 --> 00:06:46.550\nWhoops, you just run away again.\n\n132\n00:06:46.550 --> 00:06:48.980\nWhich is a simple AD.\n\n133\n00:06:48.980 --> 00:06:52.650\nWhat the simple AD is,\nis it's a Microsoft Action Directory, but\n\n134\n00:06:52.650 --> 00:06:55.100\nit's not Microsoft,\nit takes the Microsoft part out.\n\n135\n00:06:55.100 --> 00:06:59.800\nIt's Samba,\nSamba is an open source reimplemetation or\n\n136\n00:06:59.800 --> 00:07:02.630\nMicrosoft's Directory Service and\nAuthentication.\n\n137\n00:07:02.630 --> 00:07:06.170\nAnd so the problem we have with Samba,\nI shouldn't say it's a problem,\n\n138\n00:07:06.170 --> 00:07:10.090\nis that it's not a full implementation\nof the Active Directory.\n\n139\n00:07:10.090 --> 00:07:11.670\nCuz they're having to\nreverse engineer things,\n\n140\n00:07:11.670 --> 00:07:16.240\nMicrosoft hasn't put all this out as open\nlicense stuff, it's not open source.\n\n141\n00:07:16.240 --> 00:07:20.140\nSo they're reimplementing what they can,\nand doing it in an open source fashion.\n\n142\n00:07:20.140 --> 00:07:23.930\nSo you don't have the full\nfunctionality of an Active Directory.\n\n143\n00:07:23.930 --> 00:07:27.490\nYou don't have a lot of the powerful\noptions, like you can't even do trusts and\n\n144\n00:07:27.490 --> 00:07:28.060\nfederations.\n\n145\n00:07:28.060 --> 00:07:30.150\nSamba won't do it.\n\n146\n00:07:30.150 --> 00:07:32.680\nWell, this version of Samba won't do it.\n\n147\n00:07:32.680 --> 00:07:35.080\nBut you do have users and groups.\n\n148\n00:07:35.080 --> 00:07:36.460\nYou have group policy objects.\n\n149\n00:07:36.460 --> 00:07:39.600\nYou have a lot of the things that\nare what most of us need anyway and\n\n150\n00:07:39.600 --> 00:07:43.320\nyou can do a simple Active Directory and\nit's deployed entirely in the cloud.\n\n151\n00:07:43.320 --> 00:07:45.050\n&gt;&gt; Don, tell me about the scalability.\n\n152\n00:07:45.050 --> 00:07:46.910\nWhen you're doing just\na simple Active Directory,\n\n153\n00:07:46.910 --> 00:07:49.750\nI know regular Active Directory can\nsupport up to a billion objects.\n\n154\n00:07:49.750 --> 00:07:52.812\nAre we see that in something like\nthe simple Active Directory?\n\n155\n00:07:52.812 --> 00:07:55.306\n&gt;&gt; To an extent but\nthe Samba team's done a great job.\n\n156\n00:07:55.306 --> 00:07:59.557\nBut they've got one arm tied behind their\nback cuz Microsoft's closed all this\n\n157\n00:07:59.557 --> 00:08:00.550\nstuff off.\n\n158\n00:08:00.550 --> 00:08:05.383\nSo Amazon's recommendation is Simple AD\nshould only be used if you have less than\n\n159\n00:08:05.383 --> 00:08:06.600\n5,000 users.\n\n160\n00:08:06.600 --> 00:08:09.550\nAnd if you have more than 5,000 users,\nthat's really where you need a true\n\n161\n00:08:09.550 --> 00:08:12.010\nMicrosoft Active Directory to handle it,\nall right?\n\n162\n00:08:12.010 --> 00:08:14.130\nBut let's go back to that true\nMicrosoft Active Directory part,\n\n163\n00:08:14.130 --> 00:08:16.170\nis with the Active Directory,\n\n164\n00:08:16.170 --> 00:08:21.480\nI might not trust the cloud enough to put\na domain controller up there in the cloud.\n\n165\n00:08:21.480 --> 00:08:23.440\nBut I may not wanna do\na federation either.\n\n166\n00:08:23.440 --> 00:08:26.320\nA federation is nice, cuz you keep all\nyour records local, and safe, right?\n\n167\n00:08:26.320 --> 00:08:29.440\nBut you gotta set up this complex\nfederation to get things tied together.\n\n168\n00:08:29.440 --> 00:08:32.029\nSo in that scenario, what do you do?\n\n169\n00:08:32.029 --> 00:08:33.800\nIt's like neither option is great.\n\n170\n00:08:33.800 --> 00:08:35.440\nWell, there is a third option.\n\n171\n00:08:35.440 --> 00:08:38.910\nAnd the third option is what's\ncalled the AD Connector.\n\n172\n00:08:38.910 --> 00:08:41.160\nAnd it kinda goes back to\nthat whole incognito thing.\n\n173\n00:08:41.160 --> 00:08:45.190\nWhere you can keep your\nOn-premises directory, and\n\n174\n00:08:45.190 --> 00:08:50.830\ninstead of having a directory service in\nthe cloud, you have a proxy in the cloud.\n\n175\n00:08:50.830 --> 00:08:55.600\nAnd the proxy will take any authentication\nfrom an AWS resource, and proxy it,\n\n176\n00:08:55.600 --> 00:08:58.150\nand send it to one of your On-premises\n\n177\n00:08:58.150 --> 00:09:00.760\ndomain controllers where they\ncan handle the authentication.\n\n178\n00:09:00.760 --> 00:09:04.230\nAnd answer back with a yes or no,\nwhether that person's allowed.\n\n179\n00:09:04.230 --> 00:09:08.110\nSo now you have your On-premises\ndirectory, and you didn't have to set\n\n180\n00:09:08.110 --> 00:09:11.010\nsomething up in the cloud,\naside from the AD Connector that's there.\n\n181\n00:09:11.010 --> 00:09:13.870\nSo that's a great solution to\nbe able to get that kind of\n\n182\n00:09:13.870 --> 00:09:16.850\nauthentication in place without\nmaking your network overly complex.\n\n183\n00:09:17.870 --> 00:09:19.190\nNow, some of you might be thinking,\n\n184\n00:09:19.190 --> 00:09:21.690\nboy that's the great solution right there,\nit's easy.\n\n185\n00:09:21.690 --> 00:09:23.520\nOne directory, it just connects back.\n\n186\n00:09:23.520 --> 00:09:25.279\nBut now what you've done,\n\n187\n00:09:25.279 --> 00:09:30.580\nis you've made your cloud dependent\non your On-premises resources.\n\n188\n00:09:30.580 --> 00:09:33.490\nSo what happens if you have an outage\nin your On-premises location?\n\n189\n00:09:33.490 --> 00:09:35.318\nNow your cloud resources\ncan't authenticate.\n\n190\n00:09:35.318 --> 00:09:39.820\nYou just lost one of the big advantages\nof moving data into the cloud.\n\n191\n00:09:39.820 --> 00:09:43.320\nSo while it sounds like a great solution,\nand it's easy, maybe it is.\n\n192\n00:09:44.360 --> 00:09:46.880\nIt removes a lot of the availability,\n\n193\n00:09:46.880 --> 00:09:49.580\nand reliability that we get like\nwhen we do a cloud service.\n\n194\n00:09:49.580 --> 00:09:54.440\nSo the best solution is actually do a full\nMicrosoft Active Directory in the cloud,\n\n195\n00:09:54.440 --> 00:09:56.810\nand do a federation to\nkeep your stuff on site.\n\n196\n00:09:56.810 --> 00:10:01.220\nOr if you're okay with it, if you're\nable to certify your security levels,\n\n197\n00:10:01.220 --> 00:10:06.190\nthen you could deploy an actual\ndomain controller in the VPC, and\n\n198\n00:10:06.190 --> 00:10:08.950\nhave your own Active Directory\nextended right into the cloud.\n\n199\n00:10:08.950 --> 00:10:12.410\nSo those options are all available for\ngetting directory services in place.\n\n200\n00:10:12.410 --> 00:10:14.034\n[COUGH] The main thing here though,\n\n201\n00:10:14.034 --> 00:10:16.611\nis that none of these directory\nservices replace IAM.\n\n202\n00:10:16.611 --> 00:10:21.807\nYou still need IAM to be able\nto manage access to AWS.\n\n203\n00:10:21.807 --> 00:10:26.870\nBut these directories can be used to\nmanage access within our applications.\n\n204\n00:10:26.870 --> 00:10:31.090\nSo if I bring up a database server,\nor a file server of some sort, and\n\n205\n00:10:31.090 --> 00:10:34.910\nI need to control people's access\nwith ACL's to an actual file share.\n\n206\n00:10:34.910 --> 00:10:37.130\nWell, I can use these\ndirectories to do that.\n\n207\n00:10:37.130 --> 00:10:40.840\nSo that's the kind of piece of\nthe puzzle where they fit in, and\n\n208\n00:10:40.840 --> 00:10:42.458\nthe solution they create.\n\n209\n00:10:42.458 --> 00:10:46.394\nAll right, so that's one set of security\nservices that I want to talk about.\n\n210\n00:10:46.394 --> 00:10:47.430\nI've got three more.\n\n211\n00:10:47.430 --> 00:10:49.290\nI kinda went on a little\nlong on directory services.\n\n212\n00:10:49.290 --> 00:10:51.240\nSo I'll try and\npick up a bit of speed here.\n\n213\n00:10:51.240 --> 00:10:55.290\nThe next one I wanna talk about\nis the Amazon AWS KMS, right?\n\n214\n00:10:55.290 --> 00:10:58.050\nThe Key Management Service.\n\n215\n00:10:58.050 --> 00:11:01.250\nThe Key Management Service is actually\ncombined with another service\n\n216\n00:11:01.250 --> 00:11:02.440\ncalled Cloud HSM.\n\n217\n00:11:02.440 --> 00:11:05.150\nAnd HSM is a hardware security module.\n\n218\n00:11:05.150 --> 00:11:08.890\nSo each of these kind of\nprovide a different function,\n\n219\n00:11:08.890 --> 00:11:10.010\nbut they work together.\n\n220\n00:11:10.010 --> 00:11:11.610\nSo let me start with KMS.\n\n221\n00:11:11.610 --> 00:11:14.780\nKMS is a Key Management Service.\n\n222\n00:11:14.780 --> 00:11:19.757\nIf you're dealing with keys, public keys,\nand private keys, and we use them for\n\n223\n00:11:19.757 --> 00:11:21.068\nall sorts of things.\n\n224\n00:11:21.068 --> 00:11:24.470\nYou may need to set up an environment\nwhere you manage those yourselves, right?\n\n225\n00:11:24.470 --> 00:11:27.150\nIf I need an SSL certificate for\na website, right?\n\n226\n00:11:27.150 --> 00:11:28.330\nThat's a key payer.\n\n227\n00:11:28.330 --> 00:11:30.410\nI'm going to have\na private key I can use for\n\n228\n00:11:30.410 --> 00:11:33.960\ndecrypting data, and public keys\nthat I need digitally signed so\n\n229\n00:11:33.960 --> 00:11:36.150\nI can hand those to other people,\nand they'll trust them.\n\n230\n00:11:36.150 --> 00:11:39.450\nAnd we can just go out to any\ncertificate provider on the Internet and\n\n231\n00:11:39.450 --> 00:11:40.330\nwe can buy those, right?\n\n232\n00:11:40.330 --> 00:11:41.980\nYou can buy them from Amazon.\n\n233\n00:11:41.980 --> 00:11:45.220\nYou can go to DigiCert, or\nVerisign, or somebody like that and\n\n234\n00:11:45.220 --> 00:11:46.710\npurchase those certificates.\n\n235\n00:11:46.710 --> 00:11:50.450\nBut if you are issuing tens of\nthousands of these certificates to\n\n236\n00:11:50.450 --> 00:11:54.310\nall of your systems, that becomes\na lot more challenging, right?\n\n237\n00:11:54.310 --> 00:11:55.750\nIf you have a secure website,\n\n238\n00:11:55.750 --> 00:11:58.986\nwhere you require clients to have\na certificate on their browser.\n\n239\n00:11:58.986 --> 00:12:01.732\nA client side certificate\nto authenticate themselves,\n\n240\n00:12:01.732 --> 00:12:04.026\nyou may be issuing tons\nof these certificates.\n\n241\n00:12:04.026 --> 00:12:07.130\nAnd going out and purchasing them is\nnot really an option at that point.\n\n242\n00:12:07.130 --> 00:12:10.830\nSo you're gonna need to set up\na public key infrastructure, a PKI.\n\n243\n00:12:10.830 --> 00:12:14.340\nAnd setting that up is pretty complex,\nbecause you have to have a root CA and\n\n244\n00:12:14.340 --> 00:12:15.960\nsubordinate CAs.\n\n245\n00:12:15.960 --> 00:12:18.440\nYou have to maintain\na certificate replication list.\n\n246\n00:12:18.440 --> 00:12:22.450\nYou have to have all these different\ncomponents that go together to form PKI.\n\n247\n00:12:22.450 --> 00:12:24.753\nAnd you can mess them up pretty easy.\n\n248\n00:12:24.753 --> 00:12:26.521\nAnd if you do, if you make a mistake,\n\n249\n00:12:26.521 --> 00:12:29.040\nit's your keys that you're\nmaking a mistake with.\n\n250\n00:12:29.040 --> 00:12:31.632\nThat's really the worst\nthing that you can lose.\n\n251\n00:12:31.632 --> 00:12:33.120\nThat you can get compromised.\n\n252\n00:12:33.120 --> 00:12:36.698\nSo instead, we can leverage Amazon's KMS.\n\n253\n00:12:36.698 --> 00:12:43.670\nWith AWS KMS, they provide us with a PKI,\na public key infrastructure.\n\n254\n00:12:43.670 --> 00:12:47.250\nAnd I know what some of you are thinking,\nwhich is, hey, if I'm using certificates,\n\n255\n00:12:47.250 --> 00:12:48.420\nand I'm worried about authenticity, and\n\n256\n00:12:48.420 --> 00:12:51.140\nauthentication, I don't\nwant Amazon to do it.\n\n257\n00:12:51.140 --> 00:12:52.220\nI don't know their employees.\n\n258\n00:12:52.220 --> 00:12:53.893\nOne of their employees could\ngenerate their own key and\n\n259\n00:12:53.893 --> 00:12:55.400\nstart accessing my stuff.\n\n260\n00:12:55.400 --> 00:12:57.150\nWell when you set up the KMS,\n\n261\n00:12:57.150 --> 00:13:01.630\nyou have the option of allowing\nAmazon to generate the root keys.\n\n262\n00:13:01.630 --> 00:13:05.210\nOr you can generate them yourself,\nand then encrypt them, and\n\n263\n00:13:05.210 --> 00:13:06.260\nupload them into the system.\n\n264\n00:13:06.260 --> 00:13:09.450\nSo that Amazon didn't generate them for\nyou, you generated them,\n\n265\n00:13:09.450 --> 00:13:10.670\nand placed them up there.\n\n266\n00:13:10.670 --> 00:13:13.910\n&gt;&gt; So Don, you don't have to\nbe dealing with public CAs.\n\n267\n00:13:13.910 --> 00:13:16.331\nYou can be dealing with your\ninternal private CAs, and\n\n268\n00:13:16.331 --> 00:13:18.900\nyour internal private PKI,\nor the infrastructure?\n\n269\n00:13:18.900 --> 00:13:21.590\n&gt;&gt; Yeah, and it can be private,\nor it can even be a hybrid.\n\n270\n00:13:21.590 --> 00:13:24.854\nWhere when you deploy the solution, you\nmight need to be issuing certificates to\n\n271\n00:13:24.854 --> 00:13:26.877\nvisitors that aren't even\npart of your company.\n\n272\n00:13:26.877 --> 00:13:28.291\nThey're people on the outside, but\n\n273\n00:13:28.291 --> 00:13:30.302\nyou need to manage all this\nprivately on the inside.\n\n274\n00:13:30.302 --> 00:13:31.980\nAnd KMS lets you quickly and\neasily do that.\n\n275\n00:13:31.980 --> 00:13:38.420\nSo, if I wanna deploy a Key Management\nSystem, KMS makes it super easy,\n\n276\n00:13:38.420 --> 00:13:42.210\nand I don't have to worry about all\nthe individual components inside of it.\n\n277\n00:13:42.210 --> 00:13:45.530\nWhen you generate KMS,\nwhen you turn it on, and\n\n278\n00:13:45.530 --> 00:13:48.850\nget it enabled, remember that there's\ngonna be two keys that are inside of it.\n\n279\n00:13:48.850 --> 00:13:53.147\nThere's a CMK, which is a customer\nmanaged key, and then there's a data key.\n\n280\n00:13:53.147 --> 00:13:56.920\nThe data key is what's actually\nencrypting our data, right?\n\n281\n00:13:56.920 --> 00:13:59.160\nYou encrypt it, and store information.\n\n282\n00:13:59.160 --> 00:14:02.580\nBut those keys are what we\ndon't wanna get compromised,\n\n283\n00:14:02.580 --> 00:14:05.220\neven when they're\nare stored at rest in AWS.\n\n284\n00:14:05.220 --> 00:14:09.545\nAnd so those keys are encrypted with\na customer managed key, that CMK.\n\n285\n00:14:09.545 --> 00:14:11.612\nThe CMK is what you generate.\n\n286\n00:14:11.612 --> 00:14:13.186\nAnd Amazon doesn't have that.\n\n287\n00:14:13.186 --> 00:14:17.942\nAnd that CMK you have to store somewhere\nsecurely to be able to decrypt\n\n288\n00:14:17.942 --> 00:14:22.458\nthe data keys, which are then in\nturn used to decrypt other data.\n\n289\n00:14:22.458 --> 00:14:24.790\nSo we have like a double\nlayer of protection.\n\n290\n00:14:24.790 --> 00:14:29.500\nWell, where the challenge comes in,\nis how do we store that key securely?\n\n291\n00:14:29.500 --> 00:14:30.570\nNow we get confused.\n\n292\n00:14:30.570 --> 00:14:33.740\nAnd that's where the other piece of this\npuzzle comes in, which is cloud HMS.\n\n293\n00:14:35.150 --> 00:14:36.466\nOr HSM, sorry.\n\n294\n00:14:36.466 --> 00:14:38.686\nHMS would be a boat, so [LAUGH].\n\n295\n00:14:38.686 --> 00:14:41.450\nSo anyhow, the cloud HSM.\n\n296\n00:14:41.450 --> 00:14:43.380\nHSM is hardware security module.\n\n297\n00:14:43.380 --> 00:14:44.550\nIf you have a laptop, or\n\n298\n00:14:44.550 --> 00:14:49.320\na desktop, and you need to securely store\na private key somewhere, most laptops and\n\n299\n00:14:49.320 --> 00:14:52.890\ndesktops these days have what's called\na TPM in it, a Trusted Platform Module.\n\n300\n00:14:52.890 --> 00:14:57.120\nAnd it's a secure location of storage,\nusually embedded right on the motherboard,\n\n301\n00:14:57.120 --> 00:14:58.710\nand you can store keys in there.\n\n302\n00:14:58.710 --> 00:15:01.210\nThe neat part is,\nif somebody steals you hard drives, and\n\n303\n00:15:01.210 --> 00:15:04.131\ntakes them somewhere else,\nthey don't have the hardware module.\n\n304\n00:15:04.131 --> 00:15:06.032\nThey can't get to that data.\n\n305\n00:15:06.032 --> 00:15:07.821\nThey would have to steal\nthe entire computer, and\n\n306\n00:15:07.821 --> 00:15:11.240\nwould have to boot the entire computer\nin order for those keys to be present.\n\n307\n00:15:11.240 --> 00:15:13.930\nWell, you can't really do that in a cloud,\ncan you?\n\n308\n00:15:13.930 --> 00:15:15.410\nWe don't have access to the motherboards,\n\n309\n00:15:15.410 --> 00:15:19.700\nor the systems that are in Amazon's\nregions in their data centers.\n\n310\n00:15:19.700 --> 00:15:22.376\nSo where do we store those keys?\n\n311\n00:15:22.376 --> 00:15:26.391\nWell, Cloud HSM gives us a way to create\nvirtual hardware security modules,\n\n312\n00:15:26.391 --> 00:15:30.850\nones that can be attached to our instances\nand used as if they were regular TPMs.\n\n313\n00:15:30.850 --> 00:15:34.600\nAnd I know that sounds like we're kind\nof giving up some of that security.\n\n314\n00:15:34.600 --> 00:15:36.180\nBut the way that it works\nis actually really neat.\n\n315\n00:15:36.180 --> 00:15:37.830\nAnd you are the one who controls it.\n\n316\n00:15:37.830 --> 00:15:39.080\nSo let me bring up a diagram here.\n\n317\n00:15:39.080 --> 00:15:40.070\nI'll show you.\n\n318\n00:15:40.070 --> 00:15:45.530\nWhen you implement Cloud HSM, what you\ndo is you build a control instance.\n\n319\n00:15:45.530 --> 00:15:49.700\nAnd the control instance is the one that's\nbasically going to be managing the keys,\n\n320\n00:15:49.700 --> 00:15:51.290\nand the access to it.\n\n321\n00:15:51.290 --> 00:15:56.917\nAnd you create a dedicated VPC just for\nyour cloud HSM.\n\n322\n00:15:56.917 --> 00:15:59.660\nAnd you always wanna have\na minimum of two nodes.\n\n323\n00:15:59.660 --> 00:16:01.975\nBecause if one fails,\nyou just lost all your private keys, and\n\n324\n00:16:01.975 --> 00:16:04.170\nyou can't decrypt data, and\nyour whole system goes down.\n\n325\n00:16:04.170 --> 00:16:05.451\nSo you need to have two, right?\n\n326\n00:16:05.451 --> 00:16:08.373\nSo here we show too, HSM1 and HSM2.\n\n327\n00:16:08.373 --> 00:16:12.189\nAnd these on Amazon side\nare stored as extremely hardened,\n\n328\n00:16:12.189 --> 00:16:15.943\nisolated systems where we can\nsecurely store these keys.\n\n329\n00:16:15.943 --> 00:16:20.568\nAnd then our instances, our users, whoever\nit is that needs access to them are able\n\n330\n00:16:20.568 --> 00:16:24.071\nto reach out and gain access to\nit through the virtualized TPN,\n\n331\n00:16:24.071 --> 00:16:26.810\nthe virtualized type of\naccess that we provide.\n\n332\n00:16:26.810 --> 00:16:29.770\nAnd, so, now you're able to act as if\n\n333\n00:16:29.770 --> 00:16:33.150\nyou had that hardware location\nwhere those keys were stored.\n\n334\n00:16:33.150 --> 00:16:36.790\nAnd, even better,\nit's all in the cloud and managed.\n\n335\n00:16:36.790 --> 00:16:41.410\n&gt;&gt; You know, Don, it seems like it would\nbe complex if you have some kind of KRA,\n\n336\n00:16:41.410 --> 00:16:42.970\nI mean key recovery agent.\n\n337\n00:16:42.970 --> 00:16:45.930\nIs key recovery going to\nbe something that's not\n\n338\n00:16:45.930 --> 00:16:48.330\ntoo difficult inside of the cloud?\n\n339\n00:16:48.330 --> 00:16:50.580\n&gt;&gt; It's not too difficult, but it does\nrequire some extra planning, right?\n\n340\n00:16:50.580 --> 00:16:53.290\nAnd they even show you here in this\ndiagram with that control instance.\n\n341\n00:16:53.290 --> 00:16:56.180\nSee how it's being backed up\nto a corporate data center?\n\n342\n00:16:56.180 --> 00:17:00.090\nWe've got a connection, and you can build\nup a backup HSM right there locally.\n\n343\n00:17:00.090 --> 00:17:03.750\nAnd now, even if we were to fully\nlose access to these resources,\n\n344\n00:17:03.750 --> 00:17:07.370\nwe've got our backup that we can\nreach out to, we can do key recovery,\n\n345\n00:17:07.370 --> 00:17:09.310\nall from the control instance and\nmanage that.\n\n346\n00:17:09.310 --> 00:17:13.680\nSo it is a system that gives you all\nof the resources you'd normally need.\n\n347\n00:17:13.680 --> 00:17:16.590\nAnd it's basically trying to\nsolve that problem of how do we\n\n348\n00:17:16.590 --> 00:17:19.840\nsecurely encrypt data in the cloud when\nwe don't have access to the hardware?\n\n349\n00:17:21.730 --> 00:17:24.540\nAll right.\nThat's probably about enough on Cloud HSM.\n\n350\n00:17:24.540 --> 00:17:26.730\nThe next one I wanna talk\nabout is Cloud Trail.\n\n351\n00:17:26.730 --> 00:17:29.380\nAmazon Cloud Trail is a logging service,\nright?\n\n352\n00:17:29.380 --> 00:17:32.050\nNow we have logging services\nthat's not that big of a deal.\n\n353\n00:17:32.050 --> 00:17:35.690\nEvery EC2 instance, whatever operating\nsystem you're running has logs.\n\n354\n00:17:35.690 --> 00:17:37.650\nBut what about everything else, right?\n\n355\n00:17:37.650 --> 00:17:45.540\nLike S3 buckets, or Route 53, DynamoDB,\nwe have all these different services.\n\n356\n00:17:45.540 --> 00:17:50.095\nAnd they all generate logs, and they're\nall different, they're all separate logs.\n\n357\n00:17:50.095 --> 00:17:52.720\nRight?\nSo, if I need to go into auditing and\n\n358\n00:17:52.720 --> 00:17:56.470\nfind out who was in the system at 6AM\nthis morning, I might have to go and\n\n359\n00:17:56.470 --> 00:18:00.528\ncheck logs on all of these different\nsystems and it makes it a nightmare.\n\n360\n00:18:00.528 --> 00:18:03.728\nIt's not impossible, it's just really\nchallenging to go through and do that.\n\n361\n00:18:03.728 --> 00:18:10.740\nWell, the neat part about AWS is that you\nnever really directly interact with stuff,\n\n362\n00:18:10.740 --> 00:18:15.420\nyou never directly interact\nwith a DynamoDB, for example.\n\n363\n00:18:15.420 --> 00:18:18.140\nEverything's really being sent to an API.\n\n364\n00:18:18.140 --> 00:18:24.230\nAnd as a result, Amazon can log access and\nactivity right there at the API level.\n\n365\n00:18:24.230 --> 00:18:27.830\nThey can capture that traffic and\nas people are accessing the API.\n\n366\n00:18:27.830 --> 00:18:30.040\nAnd CloudTrail lets us do that.\n\n367\n00:18:30.040 --> 00:18:36.590\nWhen you enable CloudTrail, it keeps\na record of all the access to the API.\n\n368\n00:18:36.590 --> 00:18:40.690\nEvery person who connected, when they\nconnected, what commands they sent, and\n\n369\n00:18:40.690 --> 00:18:42.480\nwhat responses they got.\n\n370\n00:18:42.480 --> 00:18:45.540\nAnd now we have a perfect audit trail.\n\n371\n00:18:45.540 --> 00:18:48.040\nSo if we need to do a security audit or\n\n372\n00:18:48.040 --> 00:18:52.610\nmaybe we're trying to be PCI compliant and\nwe have to show that we're\n\n373\n00:18:52.610 --> 00:18:56.270\nkeeping a record of all access to our\nsystem in to maintain PCI compliance.\n\n374\n00:18:56.270 --> 00:18:58.330\nWell, CloudTrail can do it.\n\n375\n00:18:58.330 --> 00:19:00.940\nMaintaining all those individual logs,\nthat's a hard one to do,\n\n376\n00:19:00.940 --> 00:19:03.800\nit's a hard way to prove that you're\nactually tracking all that information.\n\n377\n00:19:03.800 --> 00:19:06.120\nBut CloudTrail makes it easy.\n\n378\n00:19:06.120 --> 00:19:09.680\nSo that's another security service\nthat we have backed in into AWS.\n\n379\n00:19:09.680 --> 00:19:14.650\nThe neat part is because it\nspans all of the services,\n\n380\n00:19:14.650 --> 00:19:17.360\nyou can actually follow the trail.\n\n381\n00:19:17.360 --> 00:19:19.590\nYou can follow the path somebody\nfollows through your system.\n\n382\n00:19:19.590 --> 00:19:22.957\nThat is, when they access one node and\nthen access another and\n\n383\n00:19:22.957 --> 00:19:24.730\nyou kinda watch that path.\n\n384\n00:19:24.730 --> 00:19:27.490\nIt's really neat because not just for\nauditing, but\n\n385\n00:19:27.490 --> 00:19:29.720\nwe can use it for troubleshooting too.\n\n386\n00:19:29.720 --> 00:19:32.360\nIf a problem occurs again,\nto find out where it is.\n\n387\n00:19:32.360 --> 00:19:34.230\nSometimes your connections are very,\nvery complex,\n\n388\n00:19:34.230 --> 00:19:37.330\nand it's easy to lose where\nthe failure point is.\n\n389\n00:19:37.330 --> 00:19:40.500\nAnd with CloudTrail, we can spot that\neasier cuz it's all right there.\n\n390\n00:19:40.500 --> 00:19:44.910\nIt's all correlated, it's all in\none place, which is pretty slick.\n\n391\n00:19:44.910 --> 00:19:49.220\nAnd CloudTrail, when it's creating its\nauto logs It stores them in S3 buckets.\n\n392\n00:19:49.220 --> 00:19:51.337\nAnd what's the maximum\nsize of an S3 bucket?\n\n393\n00:19:52.490 --> 00:19:53.780\nThere isn't one.\n\n394\n00:19:53.780 --> 00:19:55.530\nYeah theoretically infinite.\n\n395\n00:19:55.530 --> 00:19:58.190\nIt's not truly infinite, but a\ntheoretically infinite amount of storage.\n\n396\n00:19:58.190 --> 00:20:01.460\nSo it can store tons and\ntons and tons of data in there.\n\n397\n00:20:01.460 --> 00:20:03.680\nNow, obviously you don't\nwant to store tons and\n\n398\n00:20:03.680 --> 00:20:05.730\ntons of data eventually\nit becomes not useful.\n\n399\n00:20:05.730 --> 00:20:07.530\nBut you have that ability to\nstore as much as you need.\n\n400\n00:20:07.530 --> 00:20:10.630\nSo even if you have massive\namounts of access on your network,\n\n401\n00:20:10.630 --> 00:20:12.580\nyou can still get a reasonable\namount of information out of it.\n\n402\n00:20:13.760 --> 00:20:16.140\nAll right, so CloudTrail\ndefinitely one you wanna look at.\n\n403\n00:20:16.140 --> 00:20:18.370\nLet's see, some of the other things.\n\n404\n00:20:19.710 --> 00:20:23.090\nI mentioned storing in S3 buckets,\nI'm glad I looked at my notes there.\n\n405\n00:20:23.090 --> 00:20:27.920\nWe can optionally send our\ndata to CloudWatch also.\n\n406\n00:20:27.920 --> 00:20:29.350\nNow CloudWatch is designed for\n\n407\n00:20:29.350 --> 00:20:32.920\nmonitoring our systems, right, and\nit's monitoring performance and things.\n\n408\n00:20:32.920 --> 00:20:35.660\nNot necessarily monitoring\nthe actions people take,\n\n409\n00:20:35.660 --> 00:20:37.700\nit's monitoring the performance.\n\n410\n00:20:37.700 --> 00:20:43.330\nSo it might say, this EC2 instance\nis running at 90% CPU utilization.\n\n411\n00:20:43.330 --> 00:20:45.360\nOr it's running at 43%\nmemory utilization or\n\n412\n00:20:45.360 --> 00:20:49.310\ndisk IO is at 1,200 IOPS\nat this particular time.\n\n413\n00:20:49.310 --> 00:20:52.390\nAnd you look at it and\nyou're like, man, 1,200 IOPS,\n\n414\n00:20:52.390 --> 00:20:55.050\nwhat the heck was that\nserver doing at that time?\n\n415\n00:20:55.050 --> 00:20:59.092\nWell, let me go to CloudTrail and I can\npull up and find out what it was doing.\n\n416\n00:20:59.092 --> 00:21:02.050\nWell, CloudTrail's always gonna\nstore your data to an S3 bucket,\n\n417\n00:21:02.050 --> 00:21:05.710\nbut you can optionally send\nit to CloudWatch also.\n\n418\n00:21:05.710 --> 00:21:06.762\nAnd by sending it to CloudWatch,\n\n419\n00:21:06.762 --> 00:21:10.790\nit helps us to correlate that information\nto say like, here's the IOPS at this time,\n\n420\n00:21:10.790 --> 00:21:13.890\nlet me see what API calls are being\nsent that involve that server.\n\n421\n00:21:13.890 --> 00:21:15.180\nAnd you start to correlate\nthat information.\n\n422\n00:21:15.180 --> 00:21:18.400\nSo it gives you much better visibility\ninto what's going on on the network.\n\n423\n00:21:18.400 --> 00:21:22.720\nSo all that's kind of tucked\nin there behind the scenes,\n\n424\n00:21:22.720 --> 00:21:26.690\nall used right through CloudTrail and\nCloudWatch.\n\n425\n00:21:26.690 --> 00:21:30.960\nOne thing I do need to throw out\nabout CloudTrail is that it's\n\n426\n00:21:30.960 --> 00:21:34.390\none of those things where you need to get\nit configured, you need to get it set up.\n\n427\n00:21:34.390 --> 00:21:36.800\nIt's not magic, it can't go back in time.\n\n428\n00:21:36.800 --> 00:21:40.470\nSo if you start having some problem\non the network, and you say, well,\n\n429\n00:21:40.470 --> 00:21:42.940\nlet me go check out and\nsee if I can find this out in CloudTrail.\n\n430\n00:21:44.040 --> 00:21:46.190\nIt wasn't turned on,\nwell let me turn it on.\n\n431\n00:21:46.190 --> 00:21:48.740\nWell, now it doesn't have\nthe historical data, right?\n\n432\n00:21:48.740 --> 00:21:50.850\nSo you wanna make sure you get in\nthere and you get that set up, and\n\n433\n00:21:50.850 --> 00:21:53.660\nyou get it configured right ahead of time,\nbefore you have problems.\n\n434\n00:21:53.660 --> 00:21:54.660\nRight?\nPreventative maintenance.\n\n435\n00:21:54.660 --> 00:21:58.032\nAnd then you can use it to\nsolve problems later on and\n\n436\n00:21:58.032 --> 00:22:00.470\ndo reactive maintenance as needed.\n\n437\n00:22:00.470 --> 00:22:03.210\nAll right, so I think that is about it for\nsecurity services,\n\n438\n00:22:03.210 --> 00:22:05.240\nI'm trying to think if there are any\nothers that I need to mention.\n\n439\n00:22:05.240 --> 00:22:08.320\nWe talked a little but about the directory\nservices which are important for\n\n440\n00:22:08.320 --> 00:22:11.280\ndoing application authentication and\nclient management.\n\n441\n00:22:11.280 --> 00:22:16.260\nWe talked about KMS and HSM and\nhow we can do key management and\n\n442\n00:22:16.260 --> 00:22:19.490\nhardware security modules even though\nwe are in a virtual cloud environment.\n\n443\n00:22:19.490 --> 00:22:23.600\nAnd then last thing we talked about\nCloudTrail which is auditing and logging,\n\n444\n00:22:23.600 --> 00:22:26.950\nwhich is great for compliance and\ntroubleshooting, you know,\n\n445\n00:22:26.950 --> 00:22:29.540\njust a great resources to have\navailable for us if we need them.\n\n446\n00:22:29.540 --> 00:22:32.290\n&gt;&gt; Don, that's a lot of great information\nabout those additional services, but\n\n447\n00:22:32.290 --> 00:22:34.960\nit does look like we're coming to\nthe end of yet another great episode.\n\n448\n00:22:34.960 --> 00:22:37.660\nBut before we do Don, do you have a final\nwords that maybe you'd like to impart to\n\n449\n00:22:37.660 --> 00:22:40.080\nthe viewers when it comes to\nadditional security services?\n\n450\n00:22:40.080 --> 00:22:42.440\n&gt;&gt; You know, a lot of the services\nwe look at are great.\n\n451\n00:22:42.440 --> 00:22:44.600\nBells and whistles,\nthey do a lot of amazing things.\n\n452\n00:22:44.600 --> 00:22:49.480\nBut security isn't one of those, right,\nyour end users don't appreciate security.\n\n453\n00:22:49.480 --> 00:22:50.980\nBut it's not something\nyou want to skimp on.\n\n454\n00:22:50.980 --> 00:22:54.800\nAnd any design that you create you need\nto incorporate security into that design,\n\n455\n00:22:54.800 --> 00:22:56.920\nyou've gotta be thinking\nabout it all the time.\n\n456\n00:22:56.920 --> 00:22:58.510\nAnd it's all multi-level.\n\n457\n00:22:58.510 --> 00:23:00.450\nSo when we talk about\nsome of this services,\n\n458\n00:23:00.450 --> 00:23:02.230\nyou might not need\na centralized user directory.\n\n459\n00:23:02.230 --> 00:23:06.790\nAnd so the Amazon Cloud Directory might\nnot be useful in this particular design.\n\n460\n00:23:06.790 --> 00:23:10.320\nBut, we might need keys, or\nwe might not need keys, but\n\n461\n00:23:10.320 --> 00:23:13.890\nwe need logging, you kind of pick and\nchoose what you want.\n\n462\n00:23:13.890 --> 00:23:14.860\nBut just don't skimp.\n\n463\n00:23:14.860 --> 00:23:17.500\nMake sure you implement all\nthe resources you can benefit from\n\n464\n00:23:17.500 --> 00:23:20.390\ncuz security is an area that\n\n465\n00:23:20.390 --> 00:23:24.090\nif you don't invest in it properly\nyou'll certainly regret it later on.\n\n466\n00:23:24.090 --> 00:23:24.590\n&gt;&gt; All right, Don.\n\n467\n00:23:24.590 --> 00:23:25.880\nWell, we appreciate having you here.\n\n468\n00:23:25.880 --> 00:23:29.300\nThank you for joining us and leading this\njourney on the pathway to clarity and\n\n469\n00:23:29.300 --> 00:23:29.900\nunderstanding.\n\n470\n00:23:29.900 --> 00:23:32.120\nBut it does look like we're gonna\ngo ahead and sign out here.\n\n471\n00:23:32.120 --> 00:23:34.750\nFor ITProTv,\nI've been your host, Wes Bryan.\n\n472\n00:23:34.750 --> 00:23:35.580\n&gt;&gt; And I'm Don Pezet.\n\n473\n00:23:35.580 --> 00:23:36.620\n&gt;&gt; And we'll see you next time.\n\n474\n00:23:36.620 --> 00:23:43.978\n[MUSIC].\n\n475\n00:23:43.978 --> 00:23:47.749\n&gt;&gt; Thank you for watching IT Pro TV.\n\n",
          "vimeoId": "209558986"
        },
        {
          "description": "In this episode, Wes and Don dive into additional services provided through AWS, focusing in on analytical services. They discuss Amazon Kinesis,  Amazon Elastic MapReduce (EMR), AWS Pipeline, AWS Snowball and AWS Import/Export.",
          "length": "1517",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-3-analytics_services-031617-PGM.00_25_25_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-3-analytics_services-031617-PGM.00_25_25_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-3-analytics_services-031617-PGM.00_25_25_26.Still001-sm.jpg",
          "title": "Analytics Services",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:04.304\nWelcome to IT PRO TV I'm\nyour host Don Pezet\n\n2\n00:00:04.304 --> 00:00:07.892\n[MUSIC]\n\n3\n00:00:07.892 --> 00:00:10.966\n&gt;&gt; You're watching IT.PRO.TV.\n\n4\n00:00:10.966 --> 00:00:14.890\n&gt;&gt; Hello and welcome to IT.PRO.TV,\nthank you for joining us today.\n\n5\n00:00:14.890 --> 00:00:16.350\nI'm your show host Wes Bryan.\n\n6\n00:00:16.350 --> 00:00:17.950\nAnd today, we got a great show for\nyou today.\n\n7\n00:00:17.950 --> 00:00:22.840\nWe're gonna be moving along in our AWS\nCertified Solutions Architect Associate.\n\n8\n00:00:22.840 --> 00:00:25.642\nAnd joining us back in the studios for\nthis endeavor is none other than Mr.\n\n9\n00:00:25.642 --> 00:00:26.170\nDon Pezet.\n\n10\n00:00:26.170 --> 00:00:27.260\nDon, how you doing, sir?\n\n11\n00:00:27.260 --> 00:00:28.543\n&gt;&gt; I'm doing great, Wes,\n\n12\n00:00:28.543 --> 00:00:32.218\nready to continue our journey down\nthe additional key services at AWS.\n\n13\n00:00:32.218 --> 00:00:35.202\nIn the last couple episodes,\nwe've been taking a look at a few odds and\n\n14\n00:00:35.202 --> 00:00:37.050\nends services that are available.\n\n15\n00:00:37.050 --> 00:00:39.954\nThat may not be perfect for\nevery solution we design, but\n\n16\n00:00:39.954 --> 00:00:42.312\ncertainly have a use case for\neach one of them so\n\n17\n00:00:42.312 --> 00:00:46.330\nwe need to be aware that they're there,\nso we know to use them when necessary.\n\n18\n00:00:46.330 --> 00:00:49.200\nIn our first episode we\ndid storage services.\n\n19\n00:00:49.200 --> 00:00:51.860\nIn our second one,\nwe did security services.\n\n20\n00:00:51.860 --> 00:00:55.350\nIn this one, we're gonna take a look\nat analytics and analytic services.\n\n21\n00:00:55.350 --> 00:00:59.490\nNow, If you just cringed a little bit\non the inside, I totally feel you.\n\n22\n00:00:59.490 --> 00:01:00.550\nI'm the same way.\n\n23\n00:01:00.550 --> 00:01:03.710\nData analytics is not my cup of tea, but\n\n24\n00:01:03.710 --> 00:01:09.120\nthere is no denying the fact that it\nis essential to large organizations.\n\n25\n00:01:10.240 --> 00:01:13.770\nIt's hard to read any tech news today\nwithout hearing the term big data.\n\n26\n00:01:13.770 --> 00:01:15.700\nBig data, big data this, big data that.\n\n27\n00:01:15.700 --> 00:01:20.460\nWell data analytics is really what\nwe're doing with that big data.\n\n28\n00:01:20.460 --> 00:01:23.640\nBig data just simply means you\nhave a ton of information.\n\n29\n00:01:23.640 --> 00:01:25.320\nYou have a large amount of data.\n\n30\n00:01:25.320 --> 00:01:28.980\nAnd the larger your data set,\nthe harder it is to pick through it and\n\n31\n00:01:28.980 --> 00:01:31.670\nget information out and\nidentify patterns and so on.\n\n32\n00:01:31.670 --> 00:01:34.955\nSo you may have a massive amount of\ndata with great info in there but\n\n33\n00:01:34.955 --> 00:01:38.802\nyou can't see it, you can't see\nthe forest through the trees or whatever.\n\n34\n00:01:38.802 --> 00:01:41.116\nYou know, it's just all in there and\n\n35\n00:01:41.116 --> 00:01:45.530\nyou've gotta have a way to extract\nthat and do it rapidly at a low cost.\n\n36\n00:01:45.530 --> 00:01:46.934\nAnd that's where AWS snaps in.\n\n37\n00:01:46.934 --> 00:01:50.240\nIs that nobody deals\nmore data than Amazon.\n\n38\n00:01:50.240 --> 00:01:51.390\nProbably not nobody, but\n\n39\n00:01:51.390 --> 00:01:54.540\nthey are definitely experienced\nhandling huge amounts of data.\n\n40\n00:01:54.540 --> 00:01:58.460\nAnd they've taken that knowledge and moved\nit over to a handful of analytic services\n\n41\n00:01:58.460 --> 00:02:00.920\nthat are available to us,\nand we can do the same.\n\n42\n00:02:00.920 --> 00:02:05.600\nWe can take advantage of their experience\nto manage our massive amounts of data.\n\n43\n00:02:05.600 --> 00:02:08.700\nSo when your CEO or\nyour CIO comes down to your office and\n\n44\n00:02:08.700 --> 00:02:12.410\nsays, boy, we need big data.\n\n45\n00:02:12.410 --> 00:02:13.362\nWe need it.\n\n46\n00:02:13.362 --> 00:02:18.224\nAnd we do the inevitable question of,\nwhat are you talking about?\n\n47\n00:02:18.224 --> 00:02:21.653\nBut they say look we've got years and\nyears and years of customer data,\n\n48\n00:02:21.653 --> 00:02:24.870\nand trends and product analysis and\nanalysis of our competitors.\n\n49\n00:02:24.870 --> 00:02:27.986\nWe need to take all of that and\ncorrelate it together, and extract and\n\n50\n00:02:27.986 --> 00:02:31.585\nfind out when is the optimum time for us\nto order sun glasses to put on the shelve,\n\n51\n00:02:31.585 --> 00:02:33.820\nand what is the optimum\ntime to order sunscreen.\n\n52\n00:02:33.820 --> 00:02:36.687\nCuz it's not in November,\nit's in the spring time and so\n\n53\n00:02:36.687 --> 00:02:38.377\nwe have to figure that stuff out.\n\n54\n00:02:38.377 --> 00:02:41.737\nSome of it's common sense but when you\nare dealing with tones and tones of data,\n\n55\n00:02:41.737 --> 00:02:43.204\nmay be it's scientific studies.\n\n56\n00:02:43.204 --> 00:02:47.071\nRight, we've got\nsequencing human genome or\n\n57\n00:02:47.071 --> 00:02:51.236\nmonitoring out tens of\nthousands of test cases and\n\n58\n00:02:51.236 --> 00:02:56.910\nseeing whether a drug is effective,\nand managing control groups.\n\n59\n00:02:56.910 --> 00:02:59.402\nYou can get a huge amount of data and you\nneed to be able to filter through that.\n\n60\n00:02:59.402 --> 00:03:03.410\nSo, let's jump into the first service here\nand talk about what we've got available.\n\n61\n00:03:03.410 --> 00:03:06.440\nThe first one Is what's\ncalled Amazon Kinesis.\n\n62\n00:03:06.440 --> 00:03:09.410\nAmazon Kinesis is actually made up\nof a couple of different components.\n\n63\n00:03:09.410 --> 00:03:13.760\nBut what it allows us to do is\ndump a ton of data into AWS.\n\n64\n00:03:13.760 --> 00:03:18.360\nAnd it can either be done all at once or\nit can be done ongoing.\n\n65\n00:03:18.360 --> 00:03:21.978\nAnd then Kinesis can reach in there and\ndo stuff with it.\n\n66\n00:03:21.978 --> 00:03:24.970\nAnd turn it in to usable information.\n\n67\n00:03:24.970 --> 00:03:26.958\nNow, inside of Kinesis\nthere's three components.\n\n68\n00:03:26.958 --> 00:03:28.313\nAnd the first component\nis the Firehose and\n\n69\n00:03:28.313 --> 00:03:30.630\nthat's what's being shown\nhere in this diagram.\n\n70\n00:03:30.630 --> 00:03:32.300\nWhat you'll see is streaming data.\n\n71\n00:03:32.300 --> 00:03:37.150\nWe're sending data into Kinesis and\nlike I said, it could be all at once or\n\n72\n00:03:37.150 --> 00:03:38.390\nit could be an ongoing thing.\n\n73\n00:03:38.390 --> 00:03:43.080\nIf you're tracking sports scores, or\nstudent's metrics, attendance records,\n\n74\n00:03:43.080 --> 00:03:43.640\nthings like that.\n\n75\n00:03:43.640 --> 00:03:44.950\nThat'll be ongoing.\n\n76\n00:03:44.950 --> 00:03:49.170\nSo we're constantly feeding that\ndata into the Kineses firehose.\n\n77\n00:03:49.170 --> 00:03:51.100\nAnd then, what does it do with it?\n\n78\n00:03:51.100 --> 00:03:54.804\nWell, at a minimum, it can just\ntake that data and dump it into S3.\n\n79\n00:03:54.804 --> 00:03:56.750\nThat was exciting, done.\n\n80\n00:03:57.820 --> 00:03:58.530\nMaybe that's all we want.\n\n81\n00:03:58.530 --> 00:04:00.790\nWe just wanna store this data,\nwe don't have a use for it yet.\n\n82\n00:04:00.790 --> 00:04:04.110\nWe'll put some use to it later,\nwe'll just store it in S3 for now.\n\n83\n00:04:04.110 --> 00:04:06.400\nS3 has near limitless storage.\n\n84\n00:04:06.400 --> 00:04:09.720\nSo if I have a huge amount of data\nthat I just don't wanna lose,\n\n85\n00:04:09.720 --> 00:04:12.840\nthat's a great solution,\nthe firehose can just dump right to it.\n\n86\n00:04:12.840 --> 00:04:17.500\nOr, I can take that data and\nsend it to S3, but\n\n87\n00:04:18.550 --> 00:04:22.720\nhave another service configured to pick\nthe data up, like red shift right?\n\n88\n00:04:22.720 --> 00:04:27.100\nKinesis can't feed directly into red\nshift, but it can take our stream of data,\n\n89\n00:04:27.100 --> 00:04:32.070\nlarge quantities of data, dump it into\nS3 and Amazon red shift can pick it up.\n\n90\n00:04:32.070 --> 00:04:35.380\nAnd if you remember from our red\nshift episode, what does it do?\n\n91\n00:04:35.380 --> 00:04:38.601\nIt does online analysis processing, OLAP.\n\n92\n00:04:38.601 --> 00:04:41.180\nIt does OLAP really really well.\n\n93\n00:04:41.180 --> 00:04:42.800\nIt is very very optimized.\n\n94\n00:04:42.800 --> 00:04:48.060\nIt's a customized version of QL\nthat is designed to just read and\n\n95\n00:04:48.060 --> 00:04:50.930\nreturn results very very quickly.\n\n96\n00:04:50.930 --> 00:04:54.152\nSo it can do that based off of the data\nthat we've dumped into Amazon S3.\n\n97\n00:04:54.152 --> 00:04:58.550\nSo using those two products together gives\nus a great way to start working with it.\n\n98\n00:04:58.550 --> 00:05:02.640\nAnd using standard SQL, right,\nthat we can communicate and\n\n99\n00:05:02.640 --> 00:05:04.760\nget that data through means\nthat we're already used to.\n\n100\n00:05:05.760 --> 00:05:09.300\nAnother option is I can have the firehose\npoint us over to Elastic Search,\n\n101\n00:05:09.300 --> 00:05:10.800\nthe Elastic Search service.\n\n102\n00:05:10.800 --> 00:05:14.100\nNow I've got tons of data and\nI can search through it.\n\n103\n00:05:14.100 --> 00:05:18.740\nAnd I can pull results, and\nwe can index and dump that Into Amazon S3.\n\n104\n00:05:18.740 --> 00:05:22.355\nNotice how S3 is always kind of an end\npoint somewhere in here because S3\n\n105\n00:05:22.355 --> 00:05:24.738\nis designed to handle\nhuge amounts of storage.\n\n106\n00:05:24.738 --> 00:05:28.001\nThis data's gotta go somewhere, and\nwe don't wanna store it in the ephemeral\n\n107\n00:05:28.001 --> 00:05:31.280\nstorage or in RAM cuz,\nwell RAM's expensive, and it's temporary.\n\n108\n00:05:31.280 --> 00:05:32.980\nSo we need it somewhere\nwhere it can persist and\n\n109\n00:05:32.980 --> 00:05:35.010\nthe S3 is the best place for it.\n\n110\n00:05:35.010 --> 00:05:36.280\nSo that's what the fire hose does.\n\n111\n00:05:36.280 --> 00:05:39.510\nThat's the first component of Kinesis.\n\n112\n00:05:39.510 --> 00:05:44.740\nThe second component of kinesis\nis the streams themselves, right?\n\n113\n00:05:44.740 --> 00:05:48.110\nThe streams, which we kinda see over here,\nthe streaming data that comes in,\n\n114\n00:05:48.110 --> 00:05:51.770\nthose streams can come from\nany number of things, right?\n\n115\n00:05:51.770 --> 00:05:56.440\nThe streams that pump in can be\ncoming from EC2 instances, clients.\n\n116\n00:05:56.440 --> 00:05:59.534\nMobile data,\ntraditional servers, anything.\n\n117\n00:05:59.534 --> 00:06:04.660\nThere's a lot of mobile applications that\nuse centralized leaderboards, right?\n\n118\n00:06:04.660 --> 00:06:10.019\nI used to make fun of Wes, Wes played\na little space game where you had fleets.\n\n119\n00:06:10.019 --> 00:06:12.788\nAnd you had to keep track of all\nthe information about your account and\n\n120\n00:06:12.788 --> 00:06:16.640\nother people's account and you competed\nand there was a unified scoreboard.\n\n121\n00:06:16.640 --> 00:06:17.970\nWhere's all the data come from?\n\n122\n00:06:17.970 --> 00:06:22.850\nWell every mobile client that had that\ngame was reporting that data back,\n\n123\n00:06:22.850 --> 00:06:28.290\nsending that information in, as a Kinesis\nstream, into the fire hose, right?\n\n124\n00:06:28.290 --> 00:06:32.052\nAnd it was all getting combined and put\nsomewhere, but then when somebody on that\n\n125\n00:06:32.052 --> 00:06:35.000\nsame mobile client needs to be\nable to pull up the leaderboard.\n\n126\n00:06:35.000 --> 00:06:37.245\nNow, we're getting the data back out and\n\n127\n00:06:37.245 --> 00:06:41.223\nthat's be coming out of something\nlike red shift or, dynamo DB or\n\n128\n00:06:41.223 --> 00:06:45.060\nthe one that my head is covering\nwhich is Amazon elastic map reduce.\n\n129\n00:06:45.060 --> 00:06:47.580\nMap reduce we're gonna talk about here\nin the moment which is a hadoop cluster.\n\n130\n00:06:47.580 --> 00:06:50.490\nSo, we can pull data from any\nof those types of things and\n\n131\n00:06:50.490 --> 00:06:52.730\nget that information right back,\nall right?\n\n132\n00:06:52.730 --> 00:06:54.500\nSo that's the second component.\n\n133\n00:06:54.500 --> 00:06:57.500\nAnd then the third component,\nI don't actually have a diagram for,\n\n134\n00:06:57.500 --> 00:07:00.920\nbut it's the Kinesis Analytics.\n\n135\n00:07:00.920 --> 00:07:02.560\nThis is all about analytics, right?\n\n136\n00:07:02.560 --> 00:07:05.420\nOnce the data is in there,\nhow do we ingest it?\n\n137\n00:07:05.420 --> 00:07:06.840\nHow do we make use of it?\n\n138\n00:07:06.840 --> 00:07:10.790\nAnd so we've got an analytics system,\nif I can say it,\n\n139\n00:07:10.790 --> 00:07:14.370\nthat is built as part of Kinesis where\nwe can do basic extrapolation of data.\n\n140\n00:07:14.370 --> 00:07:17.450\nNow, be careful with\nwhat I just said there.\n\n141\n00:07:17.450 --> 00:07:19.620\nWe can do basic extrapolation of data.\n\n142\n00:07:19.620 --> 00:07:21.638\nIt's not designed to do really fancy,\n\n143\n00:07:21.638 --> 00:07:24.154\ncrazy things like manipulate the data,\nright?\n\n144\n00:07:24.154 --> 00:07:27.498\nA lot of us have systems that do ETL,\nright?\n\n145\n00:07:27.498 --> 00:07:30.232\nExtraction, transformation, and\n\n146\n00:07:30.232 --> 00:07:36.390\nlet's see it's attracting transformation\nand I'm forgetting what the L is.\n\n147\n00:07:36.390 --> 00:07:37.836\nBut we manipulate our data, right?\n\n148\n00:07:37.836 --> 00:07:40.090\nWe take our information in and\nwe change it somehow.\n\n149\n00:07:40.090 --> 00:07:41.260\nWe do transforms.\n\n150\n00:07:41.260 --> 00:07:45.070\nWell, Kenisis doesn't do that,\nit can, very very limited.\n\n151\n00:07:45.070 --> 00:07:46.250\nIt's not designed to do it.\n\n152\n00:07:46.250 --> 00:07:51.720\nIt's really just designed to\nprovide that data to us, right?\n\n153\n00:07:51.720 --> 00:07:52.858\nSo if we wanna go a step further,\n\n154\n00:07:52.858 --> 00:07:54.984\nthat's when we need to bring\nin some of the other services.\n\n155\n00:07:54.984 --> 00:08:00.798\nAnd we'll talk about the AWS pipeline,\nwhich is great at doing transforms.\n\n156\n00:08:00.798 --> 00:08:04.065\nAnd we might wanna leverage that one\ninstead if we need to manipulate the data.\n\n157\n00:08:04.065 --> 00:08:06.470\n&gt;&gt; Don, is that load that you\nwere thinking about there?\n\n158\n00:08:06.470 --> 00:08:07.031\nExtract-\n&gt;&gt; Load.\n\n159\n00:08:07.031 --> 00:08:07.631\n&gt;&gt; Transform, and load?\n\n160\n00:08:07.631 --> 00:08:08.373\n&gt;&gt; Yes, thank you.\n\n161\n00:08:08.373 --> 00:08:11.680\n&gt;&gt; Sorry, we gotta load the data in,\nor extract it from the source.\n\n162\n00:08:11.680 --> 00:08:13.160\nAnd then we gotta transform it and\nmake use of it, and\n\n163\n00:08:13.160 --> 00:08:14.630\nthen load it into wherever we're going.\n\n164\n00:08:14.630 --> 00:08:15.660\nSorry, load is the other one.\n\n165\n00:08:15.660 --> 00:08:16.810\nThank you, Wes.\n\n166\n00:08:16.810 --> 00:08:19.589\nAll right,\nit's good to have a wingman on this show.\n\n167\n00:08:19.589 --> 00:08:23.800\n[LAUGH] All right, so Kinesis,\nmassive amounts of data.\n\n168\n00:08:23.800 --> 00:08:25.090\nWe can do analysis on it.\n\n169\n00:08:25.090 --> 00:08:27.360\nIt is a great system for that.\n\n170\n00:08:27.360 --> 00:08:30.290\nBut when you hear people\ntalking about big data,\n\n171\n00:08:30.290 --> 00:08:32.270\nKinesis is not the first\nname you're gonna hear.\n\n172\n00:08:32.270 --> 00:08:33.730\nWhen you read an article on big data,\n\n173\n00:08:33.730 --> 00:08:36.670\nthe buzzword you're gonna\nhear about is Hadoop, right?\n\n174\n00:08:36.670 --> 00:08:37.960\nHadoop clusters.\n\n175\n00:08:37.960 --> 00:08:41.525\nHadoop clusters are specially tuned\ndatabase clusters that are designed\n\n176\n00:08:41.525 --> 00:08:45.566\nto handle large amounts of data and allow\nus to manipulate and work with them right?\n\n177\n00:08:45.566 --> 00:08:48.140\nIt's kinda the whole\npurpose of Hadoop cluster.\n\n178\n00:08:48.140 --> 00:08:51.540\nIf you wanna spin one up yourself, you're\nmore than welcome too, you go to EC2,\n\n179\n00:08:51.540 --> 00:08:54.871\nyou can launch a couple fo instances,\nyou can build up your own Hadoop cluster.\n\n180\n00:08:54.871 --> 00:08:57.998\nThe problem is,\nit's hard to set up, right?\n\n181\n00:08:57.998 --> 00:09:00.766\nHadoop cluster is not an easy\nthing to get in place.\n\n182\n00:09:00.766 --> 00:09:04.509\nAnd tuning and\noptimizing them is a challenge.\n\n183\n00:09:04.509 --> 00:09:09.610\nIt's almost an art, more than a science,\ngetting those things running optimally.\n\n184\n00:09:09.610 --> 00:09:13.440\nSo with AWS, we have Elastic Map Reducer,\n\n185\n00:09:13.440 --> 00:09:18.270\nEMR, and\nEMR is a fully managed Hadoop cluster.\n\n186\n00:09:18.270 --> 00:09:21.760\nSo we take what would normally be hard,\nand we make it just a couple of clicks,\n\n187\n00:09:21.760 --> 00:09:24.260\nand all of a sudden you've got a fully\nfunctioning cluster that's up and going.\n\n188\n00:09:24.260 --> 00:09:26.810\nAnd you chuck data into it and\nyou're gonna be in business.\n\n189\n00:09:26.810 --> 00:09:29.780\nThe Hadoop cluster itself\nis still complex, right?\n\n190\n00:09:29.780 --> 00:09:32.050\n&gt;&gt; All right, Don, so\nthe cluster itself is still complex.\n\n191\n00:09:32.050 --> 00:09:34.902\nIs that transparent or\ndo we see any of that?\n\n192\n00:09:34.902 --> 00:09:38.960\n&gt;&gt; Most of it is hidden, but you get\nreally just like one little choice.\n\n193\n00:09:38.960 --> 00:09:42.250\nYou can always reach in and mess with all\nsorts of things, and you can contact AWS\n\n194\n00:09:42.250 --> 00:09:45.500\nsupport, and they can help you with things\nthat you don't normally have access to.\n\n195\n00:09:45.500 --> 00:09:49.030\nBut really the only decision most of us\nhave to make is to choose a file system.\n\n196\n00:09:49.030 --> 00:09:50.527\nWhen you set up a Hadoop cluster,\n\n197\n00:09:50.527 --> 00:09:53.103\nthere's actually two types\nof file systems you can use.\n\n198\n00:09:53.103 --> 00:09:57.603\nThere's the default, the one that\nthe most of us are gonna stick with,\n\n199\n00:09:57.603 --> 00:10:02.340\nwhich is what's called the HDFS, or\nthe Hadoop Distributed File System.\n\n200\n00:10:02.340 --> 00:10:05.220\nAnd that way it brings up each\nof its nodes in the cluster and\n\n201\n00:10:05.220 --> 00:10:07.500\nit's able to distribute\nthe file system across it.\n\n202\n00:10:07.500 --> 00:10:09.440\nAnd that file system is the default,\n\n203\n00:10:09.440 --> 00:10:11.760\nit's whatever any third party\nwould build up using Hadoop.\n\n204\n00:10:11.760 --> 00:10:15.420\nSo it's what most of us expect to have and\nthat's the one most people used.\n\n205\n00:10:15.420 --> 00:10:18.330\nWhen you use the HDFS,\n\n206\n00:10:18.330 --> 00:10:21.760\nall of your data is actually being\nstore in EBS, Elastic Box Store.\n\n207\n00:10:21.760 --> 00:10:24.470\nSo you get great performance\ncharacteristics just like you would on any\n\n208\n00:10:24.470 --> 00:10:28.100\nEC2 instance, and\nthat's typically the way that we wanna go.\n\n209\n00:10:28.100 --> 00:10:32.570\nBut because this is AWS, we have an option\nthat's a little more Amazon specific.\n\n210\n00:10:32.570 --> 00:10:35.610\nSo Amazon has what's called\nthe EMR file system, right?\n\n211\n00:10:35.610 --> 00:10:38.890\nSo the Elastic Map Reduced File System,\nEMRFS.\n\n212\n00:10:38.890 --> 00:10:42.340\nAnd EMRFS stores the data in S3.\n\n213\n00:10:42.340 --> 00:10:45.310\nNow, storing the data in S3,\nat first you might say, well,\n\n214\n00:10:45.310 --> 00:10:47.327\nEBS is gonna give me better performance.\n\n215\n00:10:47.327 --> 00:10:50.230\nIt is, but EBS is more expensive.\n\n216\n00:10:50.230 --> 00:10:51.790\nAnd so it's a trade off.\n\n217\n00:10:51.790 --> 00:10:55.630\nRight, so you pay more,\nbut you get better speeds.\n\n218\n00:10:55.630 --> 00:10:59.910\nThere is also limits to the size of\nthe EBS, and when dealing with big data,\n\n219\n00:10:59.910 --> 00:11:01.395\nthat can be a problem.\n\n220\n00:11:01.395 --> 00:11:05.780\nEMRFS stores in S3, so\nwe lose the size on it.\n\n221\n00:11:05.780 --> 00:11:09.794\nWe can handle large amounts of data,\nbig data tells us to use a buzzword.\n\n222\n00:11:10.890 --> 00:11:13.080\nBut we do it at a much lower cost.\n\n223\n00:11:13.080 --> 00:11:16.080\nAnd the performance isn't as great as EBS,\nbut\n\n224\n00:11:16.080 --> 00:11:19.020\nwhen you're dealing with big data,\nthere's more things that factor into\n\n225\n00:11:19.020 --> 00:11:22.970\nperformance than simply disk I/O\nbecause of the sheer amount of data.\n\n226\n00:11:22.970 --> 00:11:25.240\nSo it's usually a good option for\nus to entertain.\n\n227\n00:11:25.240 --> 00:11:29.933\nSo if you're dealing with truly immense\namounts of data or data that you\n\n228\n00:11:29.933 --> 00:11:34.713\nintend to retain for a long time,\nthe EMRFS can be a better choice for us.\n\n229\n00:11:34.713 --> 00:11:38.861\nBut most of the time when you're dealing\nwith big data like this is very temporary,\n\n230\n00:11:38.861 --> 00:11:41.289\nwe load our data in the EMR,\nwe run our analysis,\n\n231\n00:11:41.289 --> 00:11:44.870\nand then we take it back out again,\nwe don't leave it there a long term.\n\n232\n00:11:44.870 --> 00:11:49.625\nSo even though EBS is more expensive, we\ncan chuck it right in into the HTFS Hadoop\n\n233\n00:11:49.625 --> 00:11:53.850\ndistribute file system and run our\nanalysis, we're paying that higher rate,\n\n234\n00:11:53.850 --> 00:11:55.790\nbut then we take the data out and\nnow we're not paying for it, right?\n\n235\n00:11:55.790 --> 00:11:57.320\nTake advantage of the cloud.\n\n236\n00:11:57.320 --> 00:11:59.490\nSo for transient analysis,\n\n237\n00:11:59.490 --> 00:12:04.380\nthings where you just upload and do it and\ndone, the HTFS is usually good for us.\n\n238\n00:12:04.380 --> 00:12:08.210\nFor long term data,\nusing the EFRMS is usually better.\n\n239\n00:12:08.210 --> 00:12:10.110\nSo that's really one of\nthe only choices we have and\n\n240\n00:12:10.110 --> 00:12:13.880\neven that's really just hitting some\nbuttons and getting it configured,\n\n241\n00:12:13.880 --> 00:12:15.670\nit's not a complex thing to do.\n\n242\n00:12:15.670 --> 00:12:18.085\nBut we do, at least have a little\nbit of control there how we\n\n243\n00:12:18.085 --> 00:12:18.720\nwanna handle our data.\n\n244\n00:12:20.070 --> 00:12:23.640\nAll right, I've kind of talked about\nthe potential uses for this already, but\n\n245\n00:12:23.640 --> 00:12:25.190\nany area where we have big data.\n\n246\n00:12:25.190 --> 00:12:30.340\nSo if you're dealing with like\ngeologic survey information,\n\n247\n00:12:30.340 --> 00:12:34.180\ngenetics, human genome,\neven just simple logging, right?\n\n248\n00:12:34.180 --> 00:12:38.580\nIf I'm logging Immense amounts\nof access to my system and\n\n249\n00:12:38.580 --> 00:12:41.090\nI wanna do some kind of\nanalyses based on that.\n\n250\n00:12:41.090 --> 00:12:45.140\nI would use an EMR instance for\nthat or EMR cluster.\n\n251\n00:12:45.140 --> 00:12:47.090\nSo it's a very powerful thing and\n\n252\n00:12:47.090 --> 00:12:50.380\nit makes something that would otherwise\nbe really complex, really, really simple.\n\n253\n00:12:51.930 --> 00:12:54.710\nAll right, the next service I wanna\ntalk about is the AWS Pipeline.\n\n254\n00:12:54.710 --> 00:12:58.150\nI already mentioned it briefly back\nwhen we were talking about Kinesis.\n\n255\n00:12:58.150 --> 00:13:02.560\nKinesis is great in taking in\na bunch of data and analyzing it.\n\n256\n00:13:02.560 --> 00:13:05.200\nIt does really well and\nif that's all we need, wonderful.\n\n257\n00:13:05.200 --> 00:13:08.160\nBut what it doesn't do well\nis manipulate the data.\n\n258\n00:13:08.160 --> 00:13:11.900\nIf we need to change the data, that's\nnot what Kinesis is designed to do, but\n\n259\n00:13:11.900 --> 00:13:14.330\nthe Pipeline is.\n\n260\n00:13:14.330 --> 00:13:18.740\nAnd AWS Pipeline is designed to take\nlarge amounts of data and manipulate it,\n\n261\n00:13:18.740 --> 00:13:21.830\ndo transforms, do whatever it\nis we need to do to change it.\n\n262\n00:13:21.830 --> 00:13:24.920\nMaybe you're getting data from\nmore than one source, and\n\n263\n00:13:24.920 --> 00:13:27.550\nthe data is formatted in different ways.\n\n264\n00:13:27.550 --> 00:13:30.070\nAnd from one source it might be perfect,\nso you don't have to change that.\n\n265\n00:13:30.070 --> 00:13:34.650\nBut from another source,\nmaybe it's financial data from Europe and\n\n266\n00:13:34.650 --> 00:13:36.390\nin the number characters for\n\n267\n00:13:36.390 --> 00:13:40.950\ntheir currency, they use commas\nwhere we use decimals in the US.\n\n268\n00:13:40.950 --> 00:13:43.610\nAnd they use decimals where\nwe use commas in the US.\n\n269\n00:13:43.610 --> 00:13:46.720\nSo it is kind of backwards.\n\n270\n00:13:46.720 --> 00:13:48.530\nI don't know which side is backwards.\n\n271\n00:13:48.530 --> 00:13:51.540\nI imagine the US is the backward\nside just you know Europe's older.\n\n272\n00:13:51.540 --> 00:13:55.720\nBut either way we may need to\nmanipulate that data to change it, or\n\n273\n00:13:55.720 --> 00:14:00.530\nit may not be strategically data typed or\nwe may have excessive field characters, or\n\n274\n00:14:00.530 --> 00:14:01.910\nwhatever it is, right?\n\n275\n00:14:01.910 --> 00:14:04.540\nWe can go in and\ncreate a pipeline that handles that.\n\n276\n00:14:04.540 --> 00:14:06.890\nAnd I've got a little diagram\nthat kinda shows the process.\n\n277\n00:14:06.890 --> 00:14:11.800\nBasically, you have an on-premises\nserver or data base.\n\n278\n00:14:11.800 --> 00:14:15.420\nAnd we feed the data into the pipeline.\n\n279\n00:14:15.420 --> 00:14:18.060\nAnd the pipeline is stored in the cloud.\n\n280\n00:14:18.060 --> 00:14:22.150\nAnd it leverages any number of\nservices we need to manipulate and\n\n281\n00:14:22.150 --> 00:14:25.350\nchange that data and\nthen finally expose it to our users.\n\n282\n00:14:25.350 --> 00:14:28.170\nNow, it's up to us what we\nwanna do in the middle.\n\n283\n00:14:28.170 --> 00:14:31.992\nSo here it's showing we take our\nlocal data and we extract it into S3.\n\n284\n00:14:31.992 --> 00:14:34.098\nSo now our data is in S3.\n\n285\n00:14:34.098 --> 00:14:39.414\nAnd once it's in S3 Fire up\nElastic Map Reduce and use an ETL cluster\n\n286\n00:14:39.414 --> 00:14:45.487\nto take the data, extract the data,\ntransform the data, and load, right?\n\n287\n00:14:45.487 --> 00:14:46.980\nThat we can manipulate that.\n\n288\n00:14:46.980 --> 00:14:50.340\nAnd then we can take that transform\ndata and chuck it right back into S3.\n\n289\n00:14:50.340 --> 00:14:53.840\nAnd if we have Redshift monitoring for\nthat data, it can then ingest it.\n\n290\n00:14:53.840 --> 00:14:58.280\nAnd now it can provide that out to our\nusers for BI, business intelligence, or\n\n291\n00:14:58.280 --> 00:15:00.030\nwhatever it is that we wanna provide.\n\n292\n00:15:00.030 --> 00:15:05.218\nIt's a Pipeline in that it's not\njust one service doing the job.\n\n293\n00:15:05.218 --> 00:15:07.504\nIt's gotta bounce through\na couple of difference services.\n\n294\n00:15:07.504 --> 00:15:09.254\nAnd somebody's gotta be the overseer,\n\n295\n00:15:09.254 --> 00:15:11.579\nsomebody's gotta make sure\nthat this is happening.\n\n296\n00:15:11.579 --> 00:15:15.738\nIt's kinda like the simple workflow\nservice except it's not as simple.\n\n297\n00:15:15.738 --> 00:15:18.710\nThe simple workflow service is really just\ndesigned to be making little decisions\n\n298\n00:15:18.710 --> 00:15:19.730\nas we go.\n\n299\n00:15:19.730 --> 00:15:23.839\nHere it's focused on getting this large\namount of data moved between each of these\n\n300\n00:15:23.839 --> 00:15:25.994\nsystems and manipulated, and provided.\n\n301\n00:15:25.994 --> 00:15:28.103\nAnd if issues or\nerrors occur along the way,\n\n302\n00:15:28.103 --> 00:15:32.520\nwe can always get that reported back\nall right through the data pipeline.\n\n303\n00:15:32.520 --> 00:15:35.080\nSo this is a great way to\nmanipulate the data, and\n\n304\n00:15:35.080 --> 00:15:38.390\nwe can use it in combination\nwith other systems.\n\n305\n00:15:38.390 --> 00:15:41.060\nEven in combination with\nKinesis to an extent.\n\n306\n00:15:41.060 --> 00:15:44.740\nBut once it's done,\nwe've manipulated the data, and\n\n307\n00:15:44.740 --> 00:15:48.400\nnow we've got it available to us\nvia Redshift or whatever else.\n\n308\n00:15:48.400 --> 00:15:50.398\nAnd now the data's in\nthe format that we need.\n\n309\n00:15:50.398 --> 00:15:54.261\nSo that's what Pipeline does,\nvery powerful system,\n\n310\n00:15:54.261 --> 00:15:56.897\ndoes just an amazing amount of stuff.\n\n311\n00:15:56.897 --> 00:16:01.878\nBut it's also designed not,\nreally, for stream data.\n\n312\n00:16:01.878 --> 00:16:03.550\nKenny says it's great for stream data.\n\n313\n00:16:03.550 --> 00:16:05.720\nThis is designed more for,\nlike, batch processing.\n\n314\n00:16:05.720 --> 00:16:09.270\nThat, I have a batch of data I dump in,\nthe pipeline kicks in,\n\n315\n00:16:09.270 --> 00:16:11.250\ndoes it's work, and puts it out.\n\n316\n00:16:11.250 --> 00:16:15.370\nThere are ways to do rapid batches,\nbut it's really designed for\n\n317\n00:16:15.370 --> 00:16:17.380\nhuge amounts of data in batches\nto kind of move through and\n\n318\n00:16:17.380 --> 00:16:20.520\nyou just define the pipeline, and\ndo whatever it is you need with data.\n\n319\n00:16:20.520 --> 00:16:23.880\n&gt;&gt; Now Don, let's say that we have a lot,\na large amount of big data, right?\n\n320\n00:16:23.880 --> 00:16:28.987\nAnd we have to move it into AWS, and\nwe have to move it maybe out of AWS.\n\n321\n00:16:28.987 --> 00:16:31.985\nIs there a service that can provide us a\nlittle bit of assistance on this as well?\n\n322\n00:16:31.985 --> 00:16:33.510\n&gt;&gt; [LAUGH] There is.\n\n323\n00:16:33.510 --> 00:16:36.590\nI mentioned it briefly way back\nwhen we were talking about S3, but\n\n324\n00:16:36.590 --> 00:16:37.870\nhere it's even more important.\n\n325\n00:16:37.870 --> 00:16:41.200\nWhen we're talking about big data,\nwhat do I mean by big data?\n\n326\n00:16:41.200 --> 00:16:46.020\nIf I have a database, I remember the olden\ndays, right, I started working with\n\n327\n00:16:46.020 --> 00:16:49.770\nmodern databases really about,\nI don't know, 16 or 17 years ago.\n\n328\n00:16:49.770 --> 00:16:53.480\nAnd back then, if you told me that you had\na database that was a gigabyte in size,\n\n329\n00:16:53.480 --> 00:16:56.030\nI would have said, wow,\nthat is a giant database.\n\n330\n00:16:56.030 --> 00:16:58.550\nNow we laugh at a gigabyte and\nit's like, a gigabyte of data,\n\n331\n00:16:58.550 --> 00:17:02.010\nwhat you been running your database for\nan hour?\n\n332\n00:17:02.010 --> 00:17:05.370\nAnd so now we have databases\nthat are terabytes, petabytes,\n\n333\n00:17:05.370 --> 00:17:08.630\neven exabyte in size,\nmassive amounts of data.\n\n334\n00:17:08.630 --> 00:17:10.970\nWe're talking about big data.\n\n335\n00:17:10.970 --> 00:17:13.790\nSo if I have a database and\n\n336\n00:17:13.790 --> 00:17:19.060\nlet's just say it's 20 terabytes in size,\nhow do I get that into AWS?\n\n337\n00:17:19.060 --> 00:17:20.740\nI can upload it, right?\n\n338\n00:17:20.740 --> 00:17:22.060\nNot through your web browser you can't.\n\n339\n00:17:22.060 --> 00:17:26.337\nBut you can do a multi-part\nupload through S3's API.\n\n340\n00:17:26.337 --> 00:17:29.540\nYou can go in that way and\nbreak it up and start sending data.\n\n341\n00:17:29.540 --> 00:17:31.330\nThey actually require those\nmulti-part uploads for\n\n342\n00:17:31.330 --> 00:17:32.660\nanything higher than 5 gigs anyways.\n\n343\n00:17:32.660 --> 00:17:36.387\nSo if I got 20 terabytes I'm going\nto break that up quite a bit.\n\n344\n00:17:36.387 --> 00:17:40.563\nAnd it gets uploaded and reassembled in S3\nbut it's gonna take a long time isn't it?\n\n345\n00:17:40.563 --> 00:17:45.291\nAnd there does come a point where that\ntime is so long, that you'll find yourself\n\n346\n00:17:45.291 --> 00:17:49.668\nsaying, boy it would be faster for me to\njust put this data on a hard drive and\n\n347\n00:17:49.668 --> 00:17:53.380\nmail it to Amazon then it would\nbe to upload it via the Internet.\n\n348\n00:17:53.380 --> 00:17:56.600\nAnd that's a very real, real number.\n\n349\n00:17:56.600 --> 00:17:59.740\nThere does come a time where you\njust don't have the bandwidth.\n\n350\n00:17:59.740 --> 00:18:00.880\nIt depends on your bandwidth.\n\n351\n00:18:00.880 --> 00:18:03.840\nHere in our building we have\nwhat do we have Wes like 10 gig?\n\n352\n00:18:03.840 --> 00:18:06.030\n&gt;&gt; Like 200.\n&gt;&gt; I think we have a 200 megabit fiber\n\n353\n00:18:06.030 --> 00:18:07.580\nis our primary line here.\n\n354\n00:18:07.580 --> 00:18:12.790\nSo 200 megabit fiber,\nwell that's not gigabit, it's not 10 gig.\n\n355\n00:18:12.790 --> 00:18:14.100\nWe have 10 gig internally.\n\n356\n00:18:14.100 --> 00:18:14.640\n&gt;&gt; Internally yeah.\n\n357\n00:18:14.640 --> 00:18:16.290\n&gt;&gt; But to the Internet just a 200 megabit.\n\n358\n00:18:16.290 --> 00:18:21.880\nSo if I had to upload 20 terabytes\nof data, actually, I know I uploaded\n\n359\n00:18:21.880 --> 00:18:25.470\nabout 30 terabytes over the Christmas\nbreak that we did, and it took a month.\n\n360\n00:18:25.470 --> 00:18:26.630\nIt took forever.\n\n361\n00:18:26.630 --> 00:18:30.840\nSo that kind of stuff, if we're\ntrying to do data processing quickly,\n\n362\n00:18:30.840 --> 00:18:32.490\nthat's not gonna work.\n\n363\n00:18:32.490 --> 00:18:36.963\nWell, that's where an interesting\nset of services comes in.\n\n364\n00:18:36.963 --> 00:18:40.550\nThey have the AWS import, export service.\n\n365\n00:18:40.550 --> 00:18:45.070\nAWS import export is designed to\nget large amounts of data in and\n\n366\n00:18:45.070 --> 00:18:50.020\nout of AWS and there's digital solutions\nand there's physical solutions.\n\n367\n00:18:50.020 --> 00:18:50.990\nThis is one of my favorite ones.\n\n368\n00:18:50.990 --> 00:18:53.390\nYou have a cool one it's\ncalled the AWS snowball.\n\n369\n00:18:53.390 --> 00:18:56.410\nI'm not exactly sure how\nthey got that name but\n\n370\n00:18:56.410 --> 00:19:01.080\nthe snowball is a appliance,\nit's a big box that they send it to you.\n\n371\n00:19:01.080 --> 00:19:03.520\nI've got a picture here.\n\n372\n00:19:03.520 --> 00:19:06.580\nSo, this is an Amazon Snowball.\n\n373\n00:19:06.580 --> 00:19:11.110\nAnd it's about the size of\nan old tower computer, so\n\n374\n00:19:11.110 --> 00:19:15.060\nit would probably stand,\nabout this tall as my little window here.\n\n375\n00:19:15.060 --> 00:19:17.340\nBut it's basically a size\nof an old computer.\n\n376\n00:19:17.340 --> 00:19:19.780\nIt's not a computer on the inside,\nit's actually, I guess it is,\n\n377\n00:19:19.780 --> 00:19:22.990\nthere is a small computer in there but\nit's mostly storage.\n\n378\n00:19:22.990 --> 00:19:24.910\nAnd you get this big box shipped to you.\n\n379\n00:19:24.910 --> 00:19:27.970\nIt's ruggedized and this is the box.\n\n380\n00:19:27.970 --> 00:19:30.130\nLike it's not, they don't put\ncardboard around or anything.\n\n381\n00:19:30.130 --> 00:19:32.410\nIt goes through the mail\njust like this and\n\n382\n00:19:32.410 --> 00:19:35.128\nit's got a little E-ink screen right here.\n\n383\n00:19:35.128 --> 00:19:38.860\nAnd the e-ink screen is\ndisplaying the shipping label.\n\n384\n00:19:38.860 --> 00:19:42.790\nAnd so that's what the UPS guy, cuz it is\nshipped via UPS, they'll scan that and\n\n385\n00:19:42.790 --> 00:19:43.690\nthey bring it to you.\n\n386\n00:19:43.690 --> 00:19:47.460\nAnd when you receive it,\nyou flip open the little latch,\n\n387\n00:19:47.460 --> 00:19:51.720\nyou hook it into your system, and you load\nyour terabytes of data into this snowball.\n\n388\n00:19:51.720 --> 00:19:56.710\nAnd when you're ready, the label changes\nto be the return label back to Amazon and\n\n389\n00:19:56.710 --> 00:19:58.120\nyou ship it back.\n\n390\n00:19:58.120 --> 00:20:00.480\n&gt;&gt; Don, in past episodes,\nwhen you're talking about the service,\n\n391\n00:20:00.480 --> 00:20:03.100\nyou've mentioned things\nlike PCI compliance.\n\n392\n00:20:03.100 --> 00:20:04.620\nIf we have things like FSA or\n\n393\n00:20:04.620 --> 00:20:07.680\nHIPAA, is this anything that we're gonna\nbe able to use to ship data like that?\n\n394\n00:20:07.680 --> 00:20:09.030\nOr are we gonna have to\nuse another technology?\n\n395\n00:20:09.030 --> 00:20:10.720\n&gt;&gt; All right,\nwhen you initiate this service,\n\n396\n00:20:10.720 --> 00:20:13.940\nyou initiate it through the AWS console or\nyou can do it for\n\n397\n00:20:13.940 --> 00:20:17.140\nthe API but it usually is a one-time\njob so you do it to the console.\n\n398\n00:20:17.140 --> 00:20:22.100\nWhen you initiate that it uses a AWS KMS\nto generate encryption keys and\n\n399\n00:20:22.100 --> 00:20:25.480\nall of the data is fully encrypted\nto meet standards compliance.\n\n400\n00:20:25.480 --> 00:20:28.240\nSo you know the data's\nencrypted on this box and\n\n401\n00:20:28.240 --> 00:20:31.150\nthe keys have to be used to decrypt\nit once it's on the other end.\n\n402\n00:20:31.150 --> 00:20:33.530\nAnd so, you're in control of the data.\n\n403\n00:20:33.530 --> 00:20:37.480\nThe nice part about this is they\ncan mail you one of these boxes and\n\n404\n00:20:37.480 --> 00:20:38.800\nthey come in two sizes.\n\n405\n00:20:38.800 --> 00:20:43.030\nIt's, let's see, 50 terabytes and\n80 terabytes are the two sizes.\n\n406\n00:20:43.030 --> 00:20:44.590\nIf you've got more than\n80 terabytes of data,\n\n407\n00:20:44.590 --> 00:20:46.210\nyou have to get more than one Snowball.\n\n408\n00:20:46.210 --> 00:20:48.120\nIt's still faster, right?\n\n409\n00:20:48.120 --> 00:20:51.260\nAnd you take your data, you throw\nit on here, it's fully encrypted.\n\n410\n00:20:51.260 --> 00:20:52.770\nThey force that,\nthere's no way to do it unencrypted.\n\n411\n00:20:52.770 --> 00:20:54.570\nAnd then you send it back and\n\n412\n00:20:54.570 --> 00:20:57.700\nthen load it right into S3 and\nthen your data is right there.\n\n413\n00:20:57.700 --> 00:21:01.590\nAnd the shipping times, let's say it's\na week turn around, a week to get you\n\n414\n00:21:01.590 --> 00:21:05.130\nthe snowball you throw the date on it\nyou get it back, so seven days passes.\n\n415\n00:21:05.130 --> 00:21:07.180\nHow much data could you\nupload in seven days?\n\n416\n00:21:07.180 --> 00:21:10.690\nCould you upload a petabyte of data,\nunlikely.\n\n417\n00:21:10.690 --> 00:21:13.200\nMaybe you got a connection way\nbetter than ours and you can.\n\n418\n00:21:13.200 --> 00:21:17.400\nBut most of us aren't able to do that, so\nsnowball is a great alternative to that.\n\n419\n00:21:17.400 --> 00:21:18.620\nNow, there is another way to go.\n\n420\n00:21:19.870 --> 00:21:24.310\nIf you've got even, well I don't\nwanna say more data, if you've got,\n\n421\n00:21:24.310 --> 00:21:28.390\nif you don't wanna use\nthe snowball service, right?\n\n422\n00:21:28.390 --> 00:21:31.350\nI'm trying to think of scenarios where\nyou wouldn't wanna use the snowball.\n\n423\n00:21:31.350 --> 00:21:34.700\nSnowball's kind of expensive\nis one side of it.\n\n424\n00:21:34.700 --> 00:21:36.530\nThe other thing with\nthe Snowball is it only supports\n\n425\n00:21:36.530 --> 00:21:38.060\nputting the data into S3, right?\n\n426\n00:21:38.060 --> 00:21:41.860\nWhat if I have a bunch of data\nthat I want to go into Glacier?\n\n427\n00:21:41.860 --> 00:21:44.690\nAll right, and this is the data I was\ntalking about that I uploaded over\n\n428\n00:21:44.690 --> 00:21:46.700\nthe Christmas break was something\nI was sending into Glacier.\n\n429\n00:21:46.700 --> 00:21:49.930\nAnd about 30 terabytes of video data\nwe just wanted to go into Glacier.\n\n430\n00:21:49.930 --> 00:21:52.795\nNow for that, the snowball goes into S3.\n\n431\n00:21:52.795 --> 00:21:56.269\nNow once it's in S3 I can use a life\ncycle policy and move it into Glacier.\n\n432\n00:21:56.269 --> 00:22:01.945\nBut there's another service we can use\nwhere the data can go right to Glacier or\n\n433\n00:22:01.945 --> 00:22:06.900\nto S3, it's our choice and\nthat is the AWS import export disk.\n\n434\n00:22:06.900 --> 00:22:08.950\nNot the snowball, but disk.\n\n435\n00:22:08.950 --> 00:22:13.000\nThis is where you use your own storage,\nso you have your own hard drives, or\n\n436\n00:22:13.000 --> 00:22:16.190\nwhatever it is you use for storing\nyour data, as many drives as you need,\n\n437\n00:22:16.190 --> 00:22:20.980\nand you load your data on there, and\nyou ship your own drives to Amazon, right?\n\n438\n00:22:20.980 --> 00:22:25.329\nNow when that happens, they receive it\non their end, they load the data and\n\n439\n00:22:25.329 --> 00:22:28.933\nthey can load it into S3,\ninto Glacier or straight into EBS.\n\n440\n00:22:28.933 --> 00:22:30.220\nThey can go into Elastic Block Store and\n\n441\n00:22:30.220 --> 00:22:32.140\nbe attached to an instance\nat a moment's notice, right?\n\n442\n00:22:32.140 --> 00:22:34.330\nSo you can get your data that way.\n\n443\n00:22:34.330 --> 00:22:36.230\nYou have more flexibility this way.\n\n444\n00:22:36.230 --> 00:22:37.620\nIt does require you to\nhave your own storage.\n\n445\n00:22:37.620 --> 00:22:38.650\nThey do send it back, right?\n\n446\n00:22:38.650 --> 00:22:40.050\nThey didn't used to,\nthey used to destroy it.\n\n447\n00:22:40.050 --> 00:22:43.540\nNow they actually do send it back,\nso you get your storage back.\n\n448\n00:22:43.540 --> 00:22:46.950\nOn a negative side though\nthey cap it at 16 terabytes.\n\n449\n00:22:46.950 --> 00:22:51.170\nSo 16 terabytes per job, you can do\nmore than one job if need be but\n\n450\n00:22:51.170 --> 00:22:52.020\n16 terabytes is the limit.\n\n451\n00:22:52.020 --> 00:22:56.910\nSo this is a much smaller amount of data\nversus the snowball where you can get\n\n452\n00:22:56.910 --> 00:22:58.630\nthe 80 terabytes, you get more than one.\n\n453\n00:22:58.630 --> 00:23:00.880\nYou can send tons of information up there.\n\n454\n00:23:00.880 --> 00:23:03.220\nThat one's gonna be better for\nlarger jobs.\n\n455\n00:23:03.220 --> 00:23:06.800\nFor smaller jobs, the import-export\ndisk solution is another option.\n\n456\n00:23:06.800 --> 00:23:10.398\nNow don't just take a bunch of data and\ntry and send it to Amazon.\n\n457\n00:23:10.398 --> 00:23:13.081\nThat's not gonna work,\nthey won't receive it.\n\n458\n00:23:13.081 --> 00:23:14.540\nWell, they'll receive it and\nthey'll throw it away.\n\n459\n00:23:14.540 --> 00:23:17.780\nWhat you need to do is you need\nto initiate the import export\n\n460\n00:23:17.780 --> 00:23:19.320\nthrough the service via the console.\n\n461\n00:23:19.320 --> 00:23:22.320\nYou initiate it there and then that'll\ncreate everything you need, the shipping\n\n462\n00:23:22.320 --> 00:23:25.700\nlabels, or the snowball will get mailed,\nor whatever it is that you're doing.\n\n463\n00:23:25.700 --> 00:23:30.140\nThey don't want to, just out of the blue,\nreceive data from you, they'll toss it.\n\n464\n00:23:30.140 --> 00:23:32.080\nSo you gotta make sure\nyou initiate that first.\n\n465\n00:23:32.080 --> 00:23:34.650\nBut if you have a huge amount of\ndata you need to get into AWS,\n\n466\n00:23:34.650 --> 00:23:39.550\neven temporarily, a lot of times,\nusing traditional mail facilities,\n\n467\n00:23:39.550 --> 00:23:43.590\ncan be faster than\nuploading via the Internet.\n\n468\n00:23:43.590 --> 00:23:45.360\nAll right, trying to think\nif I left anything else out,\n\n469\n00:23:45.360 --> 00:23:47.900\nI mentioned the 16 terabyte limit, that's\nkind of important, that's the one that\n\n470\n00:23:47.900 --> 00:23:52.760\nusually turns up on the exam, but\nyeah, that's about it on those.\n\n471\n00:23:52.760 --> 00:23:55.860\nSo, really neat stuff,\ngreat way to get big data in place,\n\n472\n00:23:55.860 --> 00:23:58.030\nif you're going to be\nanalysis on top of that.\n\n473\n00:23:58.030 --> 00:23:59.870\n&gt;&gt; All right, Don,\na lot of great information, thank you for\n\n474\n00:23:59.870 --> 00:24:02.770\nbringing us to the end of yet\nanother good episode.\n\n475\n00:24:02.770 --> 00:24:06.510\nBut before we sign out, Don, do you have\nany additional words about the analytics\n\n476\n00:24:06.510 --> 00:24:09.300\nor in general some of the services\nthat you've mentioned in this episode?\n\n477\n00:24:09.300 --> 00:24:12.100\n&gt;&gt; All right, for the exam you definitely\nwanna pay attention to the limitation of\n\n478\n00:24:12.100 --> 00:24:14.110\neach service cuz that's gonna\nhelp you select the right one.\n\n479\n00:24:14.110 --> 00:24:17.740\nWhen you get a question that's giving\nyou a scenario built around analytics\n\n480\n00:24:17.740 --> 00:24:19.610\nyou may not work with analytics a lot.\n\n481\n00:24:19.610 --> 00:24:21.570\nBut know that each one\nhas its own purpose.\n\n482\n00:24:21.570 --> 00:24:24.330\nIf I have a huge amount of data that\nI just need to run analysis on,\n\n483\n00:24:24.330 --> 00:24:27.752\nI want to extrapolate data from,\nI can use Kinesis, does a great job.\n\n484\n00:24:27.752 --> 00:24:29.920\nBut if I need to manipulate the data,\n\n485\n00:24:29.920 --> 00:24:33.130\nI want to use the Pipeline,\nPipeline does it better.\n\n486\n00:24:33.130 --> 00:24:36.190\nAnd the Pipeline can leverage EMR,\nElastic Map Reduce,\n\n487\n00:24:36.190 --> 00:24:38.960\nwhich is a Hadoop cluster,\nto be able to manipulate and\n\n488\n00:24:38.960 --> 00:24:42.390\nchange that data to then dump it\ninto an S3 bucket and be analyzed.\n\n489\n00:24:42.390 --> 00:24:45.110\nSo those two solutions are really\n\n490\n00:24:45.110 --> 00:24:47.420\nkind of selected based on whether\nwe need to modify the data or not.\n\n491\n00:24:47.420 --> 00:24:50.480\nSo remember that, that'll help you make\nsure you pick the right solution for\n\n492\n00:24:50.480 --> 00:24:51.600\nthe right scenario.\n\n493\n00:24:51.600 --> 00:24:53.830\n&gt;&gt; All right Don, as always,\nwe appreciate you jumping in and\n\n494\n00:24:53.830 --> 00:24:55.920\nlending your expertise on this subject.\n\n495\n00:24:55.920 --> 00:24:58.260\nAnd we appreciate you,\nthe viewer, for watching.\n\n496\n00:24:58.260 --> 00:24:59.830\nWe're gonna go ahead and sign out here,\n\n497\n00:24:59.830 --> 00:25:02.340\nfor ITPro.TV,\nI've been your host Wes Bryan.\n\n498\n00:25:02.340 --> 00:25:02.960\n&gt;&gt; And I'm Don Pezet.\n\n499\n00:25:02.960 --> 00:25:04.819\n&gt;&gt; And we'll see you next time.\n\n500\n00:25:04.819 --> 00:25:11.453\n[MUSIC]\n\n501\n00:25:11.453 --> 00:25:14.582\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "209559419"
        },
        {
          "description": "In this episode, Wes and Don dive into additional services provided through AWS, focusing in on DevOps services. They will talk about AWS OpsWorks, AWS CloudFormation, AWS Elasticstalk, AWS Trusted Advisor and AWS Config.",
          "length": "1651",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-4-devops_services-031617-PGM.00_27_17_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-4-devops_services-031617-PGM.00_27_17_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-11-4-devops_services-031617-PGM.00_27_17_01.Still001-sm.jpg",
          "title": "DevOps Services",
          "transcript": "WEBVTT\n\n1\n00:00:00.250 --> 00:00:03.154\nWelcome to ITProTV,\nI'm your host, Don Pizet.\n\n2\n00:00:03.154 --> 00:00:07.368\n[CROSSTALK]\n\n3\n00:00:07.368 --> 00:00:08.654\n[MUSIC]\n\n4\n00:00:08.654 --> 00:00:11.566\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.566 --> 00:00:13.770\n&gt;&gt; Hello and welcome to ITProTV.\n\n6\n00:00:13.770 --> 00:00:15.930\nThanks for joining us,\nI'm your host Wes Bryan.\n\n7\n00:00:15.930 --> 00:00:19.240\nAnd in today's episode,\nwe are continuing through our series in\n\n8\n00:00:19.240 --> 00:00:22.250\nAWS Certified Solutions\nArchitect Associate,\n\n9\n00:00:22.250 --> 00:00:24.870\njoining us back in the studios today\nis none other than Mr. Don Pezet.\n\n10\n00:00:24.870 --> 00:00:26.110\nDon, how are you doing sir?\n\n11\n00:00:26.110 --> 00:00:29.570\n&gt;&gt; I'm doing great Wes, ready to wrap up\nour adventure in some of the additional\n\n12\n00:00:29.570 --> 00:00:31.350\nkey services found in AWS you know.\n\n13\n00:00:31.350 --> 00:00:33.426\nIn most of our episodes we've been\ndialing in on individual services.\n\n14\n00:00:33.426 --> 00:00:37.092\nBut in these last few we've been\nfocused on just kind of categories\n\n15\n00:00:37.092 --> 00:00:40.985\nof services to group some of\nthe lesser known services in there.\n\n16\n00:00:40.985 --> 00:00:44.205\nIn our first episode we did storage\nservices, our second one we did security,\n\n17\n00:00:44.205 --> 00:00:48.105\nour last one we did analytics,\nor analyses, and\n\n18\n00:00:48.105 --> 00:00:50.815\nin this episode we're\ngonna pick up with DevOps.\n\n19\n00:00:50.815 --> 00:00:53.815\nIn analyses we get to use the big\nbuzzword of a big data over and\n\n20\n00:00:53.815 --> 00:00:54.695\nover and over again.\n\n21\n00:00:54.695 --> 00:00:56.385\nIn this episode, it's DevOps, so\n\n22\n00:00:56.385 --> 00:01:00.930\nit's all about continuing our buzzword\njourney but, on a serious note,\n\n23\n00:01:00.930 --> 00:01:04.660\nDevOps is a really important piece\nof deploying a cloud infrastructure.\n\n24\n00:01:04.660 --> 00:01:07.090\nCuz so much of what we do\ngets abstracted away and\n\n25\n00:01:07.090 --> 00:01:10.720\nmanaged by the cloud provider,\nthat we kinda forget about it.\n\n26\n00:01:10.720 --> 00:01:13.280\nBut somebody still has to\nkeep tabs on everything and\n\n27\n00:01:13.280 --> 00:01:16.306\nthat's where the bridge comes\nin between being a developer or\n\n28\n00:01:16.306 --> 00:01:19.002\nbeing a system administrator,\na SysOps type person.\n\n29\n00:01:19.002 --> 00:01:22.330\nAnd we end up with this DevOps role\nwhere you're responsible for both.\n\n30\n00:01:22.330 --> 00:01:25.050\nSo we're gonna take a look at a couple of\nservices that are available in AWS to help\n\n31\n00:01:25.050 --> 00:01:27.310\nto help us to provide that role.\n\n32\n00:01:27.310 --> 00:01:32.028\nFirst service that I wanna look\nat is AWS Ops works all right.\n\n33\n00:01:32.028 --> 00:01:34.560\nOps Works,\nif we're talking about DevOps, right?\n\n34\n00:01:34.560 --> 00:01:39.372\nThis is not the developer side but\nthe Ops side of the role, the operations.\n\n35\n00:01:39.372 --> 00:01:44.059\nOperations really centers around\nhaving our systems deployed and\n\n36\n00:01:44.059 --> 00:01:46.570\nup and running and stable.\n\n37\n00:01:46.570 --> 00:01:49.670\nWhich is usually what Amazon\ntakes care of for us, right?\n\n38\n00:01:49.670 --> 00:01:53.232\nWhen we deploy into AWS, they're deploying\nsystems, they're keeping them up and\n\n39\n00:01:53.232 --> 00:01:55.752\nstable, they're maintaining\nall that infrastructure.\n\n40\n00:01:55.752 --> 00:01:59.000\nBut that doesn't mean we can't\nget in there and screw it up.\n\n41\n00:01:59.000 --> 00:02:00.740\nWe certainly can, right?\n\n42\n00:02:00.740 --> 00:02:06.520\nIf I need a Linux instance fired up in\nEC2, I can do it in a matter of minutes,\n\n43\n00:02:06.520 --> 00:02:11.330\nand it'll be up, it'll be running,\nand it'll be perfect right then.\n\n44\n00:02:11.330 --> 00:02:14.680\nBut if I just ignore that machine and\ndon't mess with it.\n\n45\n00:02:14.680 --> 00:02:17.010\nOr maybe I do mess with it,\nI start throwing software on it,\n\n46\n00:02:17.010 --> 00:02:20.190\nI can have it running pretty poorly\nin a short amount of time too.\n\n47\n00:02:20.190 --> 00:02:23.220\nAnd then it just runs like garbage for\nthe rest of time.\n\n48\n00:02:23.220 --> 00:02:27.730\nWe can cause problems and as a result we\nneed some kinda system in place that makes\n\n49\n00:02:27.730 --> 00:02:31.610\nsure that doesn't happen and\nthat's what Opsworks aims to do.\n\n50\n00:02:31.610 --> 00:02:34.800\nOpsworks actually leverages an open\nsource solution called Chef.\n\n51\n00:02:34.800 --> 00:02:39.510\nAnd what Chef does is it allows us to\ntake any solution that we have and\n\n52\n00:02:39.510 --> 00:02:42.310\nturn it into some kind of\na manageable entity right.\n\n53\n00:02:42.310 --> 00:02:43.798\nAnd let me kinda explain\nwhat I mean by that.\n\n54\n00:02:43.798 --> 00:02:46.697\nWhen you have a solution,\nwhat is it made up of?\n\n55\n00:02:46.697 --> 00:02:48.519\nYou might have web front ends.\n\n56\n00:02:48.519 --> 00:02:51.830\nYou might have application servers,\ndatabase servers.\n\n57\n00:02:51.830 --> 00:02:53.797\nYou probably have elastic\nload balancers right?\n\n58\n00:02:53.797 --> 00:02:57.020\nAll of these are different\npieces of that puzzle.\n\n59\n00:02:57.020 --> 00:03:00.100\nRight and we know that all\ntogether they form a solution.\n\n60\n00:03:00.100 --> 00:03:02.252\nBut inside of AWS they're\nall treated separately.\n\n61\n00:03:02.252 --> 00:03:06.010\nHere's this elastic load balancer,\nit's its own entity.\n\n62\n00:03:06.010 --> 00:03:08.530\nHere's my EC2 instances,\nthey are their own entities.\n\n63\n00:03:08.530 --> 00:03:11.160\nHere's this database Server.\n\n64\n00:03:11.160 --> 00:03:13.420\nMeanwhile, we now they're all\nlinked together by our application.\n\n65\n00:03:13.420 --> 00:03:14.504\nBut Amazon doesn't know that.\n\n66\n00:03:14.504 --> 00:03:17.150\nThey just provide all the functionality.\n\n67\n00:03:17.150 --> 00:03:19.786\nWell we can get in with Opsworks and\nwe can define that.\n\n68\n00:03:19.786 --> 00:03:21.820\nWe create what's called the stack.\n\n69\n00:03:21.820 --> 00:03:26.780\nAnd the stack is the collection of\nresources that go together to create our\n\n70\n00:03:26.780 --> 00:03:27.583\nsolution.\n\n71\n00:03:27.583 --> 00:03:30.520\nSo I've got a diagram here\nthat kinda shows that.\n\n72\n00:03:30.520 --> 00:03:33.800\nHere's a solution where we've\ngot a elastic load balancer,\n\n73\n00:03:33.800 --> 00:03:38.220\nright here, and under the load\nbalancer you've got app instances.\n\n74\n00:03:38.220 --> 00:03:41.790\nAnd each app instance is part\nof an auto scaling group.\n\n75\n00:03:41.790 --> 00:03:43.690\nIt's got a subnet in place.\n\n76\n00:03:43.690 --> 00:03:45.611\nThis is a multi-AZ deployment, right?\n\n77\n00:03:45.611 --> 00:03:49.190\nWe've got two availability zones, so\nthere's a different subnet in each one.\n\n78\n00:03:49.190 --> 00:03:52.850\nWe've got a multi-AZ database deployed,\nright?\n\n79\n00:03:52.850 --> 00:03:54.929\nWhere one is active and\nthe other is standby, and\n\n80\n00:03:54.929 --> 00:03:56.307\nthese instances need to see it.\n\n81\n00:03:56.307 --> 00:04:02.732\nThese are all linked together to provide\none web application to my visitors right?\n\n82\n00:04:02.732 --> 00:04:07.130\nI know that they're linked,\nbut Amazon doesn't.\n\n83\n00:04:07.130 --> 00:04:12.360\nAnd so in Opsworks we can go in and we\ncan define what's called a recipe right?\n\n84\n00:04:12.360 --> 00:04:15.230\nChef is what's managing all this and\nrecipes are what we work with.\n\n85\n00:04:15.230 --> 00:04:16.980\nThat's the little terminology they use.\n\n86\n00:04:16.980 --> 00:04:19.366\nBut what a recipe really boils\ndown to is just this stack.\n\n87\n00:04:19.366 --> 00:04:23.000\nAnd the way they've got the stack\ndefined here are with layers.\n\n88\n00:04:23.000 --> 00:04:25.520\nSo the stack is one thing and\nthere's different layers inside of it.\n\n89\n00:04:25.520 --> 00:04:27.411\nWe've got the Amazon RDS layer.\n\n90\n00:04:27.411 --> 00:04:29.570\nThere's the database servers.\n\n91\n00:04:29.570 --> 00:04:31.097\nI've got the application server layer.\n\n92\n00:04:31.097 --> 00:04:34.840\nThere's my EC2 instances or\nmy autoscaling groups.\n\n93\n00:04:34.840 --> 00:04:38.063\nI've got my ELB layer,\nwhere the actual load balancers reside.\n\n94\n00:04:38.063 --> 00:04:41.509\nAnd all of those together\ncreate my solution that\n\n95\n00:04:41.509 --> 00:04:46.140\nultimately is viewed as an app\nthat's then seen by the Internet.\n\n96\n00:04:46.140 --> 00:04:48.380\nAnd there might be other repositories and\n\n97\n00:04:48.380 --> 00:04:52.220\nthings that are sitting out there that\nwe tap into but for the most part,\n\n98\n00:04:52.220 --> 00:04:55.617\neverything is self contained\nright here in this one big stack.\n\n99\n00:04:55.617 --> 00:04:58.080\nNow why does this matter to me?\n\n100\n00:04:59.200 --> 00:05:02.790\nLet's say that I've got a new version\nof my software that's coming out.\n\n101\n00:05:02.790 --> 00:05:05.154\nRight, so this is my web\napplication version 1.1, and\n\n102\n00:05:05.154 --> 00:05:07.047\nI've got version 1.2 that's coming out.\n\n103\n00:05:07.047 --> 00:05:10.869\nAnd when I roll out version 1.2 it's gonna\nneed new instances that are updated with\n\n104\n00:05:10.869 --> 00:05:14.371\nthis new software, and maybe I'm moving\nto a new database at the same time, or\n\n105\n00:05:14.371 --> 00:05:16.040\nan updated version of the database.\n\n106\n00:05:16.040 --> 00:05:17.960\nAnd so\nI've got all these different components.\n\n107\n00:05:17.960 --> 00:05:21.872\nWhen I deploy I need to make sure that\nI'm deploying all of the components.\n\n108\n00:05:21.872 --> 00:05:26.170\nAnd I don't so something dumb like roll\nout my instances and my databases and\n\n109\n00:05:26.170 --> 00:05:27.794\nforget the load balancers.\n\n110\n00:05:27.794 --> 00:05:28.650\nWhoops, right?\n\n111\n00:05:28.650 --> 00:05:31.974\nIt's something like that that can happen\nwhen you have so many moving components.\n\n112\n00:05:31.974 --> 00:05:35.200\nHere it doesn't look like that many we\nhave five or six different components.\n\n113\n00:05:35.200 --> 00:05:39.031\nBut the more complex your project becomes,\nthe more resources you're leveraging,\n\n114\n00:05:39.031 --> 00:05:41.169\nthe more likely it is you\ncan mess something up.\n\n115\n00:05:41.169 --> 00:05:46.001\nSo when we define a stack like this,\nwe're creating a programmatic\n\n116\n00:05:46.001 --> 00:05:50.855\nrecord of all the components that\ngo together to form the solution.\n\n117\n00:05:50.855 --> 00:05:55.498\nAnd now, if l ever had a problem, like\nlet's say my system get compromised or\n\n118\n00:05:55.498 --> 00:06:00.428\nsomething just breaks and doesn't work,\nl can actually just blow the whole thing\n\n119\n00:06:00.428 --> 00:06:04.570\naway and redeploy it from my recipe\nrather than the chef cookbook.\n\n120\n00:06:04.570 --> 00:06:08.307\nWe got all these food references,\nand l can redeploy the whole thing.\n\n121\n00:06:08.307 --> 00:06:10.900\nAnd OptWorks would know what to do.\n\n122\n00:06:10.900 --> 00:06:13.790\nOptWorks would say all right I need create\na load balancer ,I need to create a auto\n\n123\n00:06:13.790 --> 00:06:16.450\nscaling group, I need to put these\ninstances in there build off of these\n\n124\n00:06:16.450 --> 00:06:18.640\nAMIs, I need to bring up\nthese database servers,\n\n125\n00:06:18.640 --> 00:06:20.310\nI need to populate with\ninformation from here.\n\n126\n00:06:20.310 --> 00:06:23.307\nIt's all defined in the recipe\nit's like cooking a meal right.\n\n127\n00:06:23.307 --> 00:06:27.550\nWe get all the components together and\nat the end you have one meal.\n\n128\n00:06:27.550 --> 00:06:30.644\nBut it was a bunch of different\ningredients that went together.\n\n129\n00:06:30.644 --> 00:06:32.770\nThat's what OpsWorks is all about.\n\n130\n00:06:32.770 --> 00:06:37.165\nNow, as a developer, you don't want to\nget involved with building servers and\n\n131\n00:06:37.165 --> 00:06:40.652\nyou don't wanna get involved with\nbacking things up and so on.\n\n132\n00:06:40.652 --> 00:06:46.130\nAnd so what chef is trying to\ndo is automate that for you.\n\n133\n00:06:46.130 --> 00:06:47.800\nSo you don't have to worry about it.\n\n134\n00:06:47.800 --> 00:06:50.530\nThat you can go into Amazon OpsWorks and\n\n135\n00:06:50.530 --> 00:06:54.070\nyou can define the stack and it'll\ntake care of the stuff on the backend.\n\n136\n00:06:54.070 --> 00:06:56.640\nAnd it does make life really convenient.\n\n137\n00:06:56.640 --> 00:06:58.831\nIt's useful for\na number of different things but\n\n138\n00:06:58.831 --> 00:07:01.129\nif you have a multi tier\nweb application like this,\n\n139\n00:07:01.129 --> 00:07:04.925\nthat's where it's really essential, cuz\nthis is us kind of teaching Amazon okay,\n\n140\n00:07:04.925 --> 00:07:08.252\nhere's all the components that work\ntogether to create my application.\n\n141\n00:07:08.252 --> 00:07:11.920\nCuz otherwise, they have no way of\nknowing that it's up to you to manage it.\n\n142\n00:07:11.920 --> 00:07:15.210\nHere, we're adding a little more\nintelligence to the AWS Cloud, and\n\n143\n00:07:15.210 --> 00:07:16.990\ndefining our stacks.\n\n144\n00:07:16.990 --> 00:07:20.750\nThe other thing is,\nif we're doing Continuous Integration,\n\n145\n00:07:20.750 --> 00:07:25.450\nCI, with CI we're taking\nresources from other areas and\n\n146\n00:07:25.450 --> 00:07:28.770\nbrining them into our model,\nwe're modifying our model.\n\n147\n00:07:28.770 --> 00:07:31.410\nWe need to have a good understanding\nof what our stack is so that as we make\n\n148\n00:07:31.410 --> 00:07:35.300\nmodifications to it we make sure we don't\nimpact any of the other components.\n\n149\n00:07:35.300 --> 00:07:37.160\nAnd because we're able to track and\n\n150\n00:07:37.160 --> 00:07:40.638\nsee all that we can better view what\nthe impact would be of a change.\n\n151\n00:07:40.638 --> 00:07:44.502\nThat, hey, if I'm starting to see\nmy databases get overwhelmed and\n\n152\n00:07:44.502 --> 00:07:49.096\nI decide to roll out some more replicas,\nwell I've gotta make sure my application\n\n153\n00:07:49.096 --> 00:07:54.000\nserver layer is using the replicas\nthat are down here in the RDS layer.\n\n154\n00:07:54.000 --> 00:07:56.734\nAnd because I've kind of\nlogically partitioned them out.\n\n155\n00:07:56.734 --> 00:08:00.744\nI can see how that connectivity is defined\nand make sure that it's defined properly\n\n156\n00:08:00.744 --> 00:08:03.448\nso they take advantage of\nthe resources that are there.\n\n157\n00:08:03.448 --> 00:08:06.146\nAnd we can also even\nreplace individual layers.\n\n158\n00:08:06.146 --> 00:08:10.854\nIf I decide that, hey, when I rolled\nthis out originally, I did this all off\n\n159\n00:08:10.854 --> 00:08:15.416\nan aurora database or a DB, but I'm\nreally just doing a lot of analysis and\n\n160\n00:08:15.416 --> 00:08:19.263\nmaybe I need to move that over\nto a red shift database instead.\n\n161\n00:08:19.263 --> 00:08:23.350\nAnd so you might find where you can change\nthings out component wise like that.\n\n162\n00:08:23.350 --> 00:08:27.315\nAnd that's where having an OpsWorks\nenvironment makes it easier to view that\n\n163\n00:08:27.315 --> 00:08:30.060\nimpact and\neasier to build those test environments,\n\n164\n00:08:30.060 --> 00:08:33.903\ncuz I can redeploy this entire environment\nin test and know that it's built\n\n165\n00:08:33.903 --> 00:08:37.380\nthe same was as what's in production,\ncuz it's all been defined.\n\n166\n00:08:37.380 --> 00:08:42.250\nSo, that's kind of what\nOpsWorks is designed to do.\n\n167\n00:08:42.250 --> 00:08:46.120\nOpsWorks is one of those things\nwhere right out of the box\n\n168\n00:08:46.120 --> 00:08:47.570\nit doesn't do anything.\n\n169\n00:08:47.570 --> 00:08:50.480\nIt's up to you to define your stack,\nright?\n\n170\n00:08:50.480 --> 00:08:52.180\nTo put all your components together.\n\n171\n00:08:52.180 --> 00:08:55.000\nAnd once you've done that inside of\nOpsWorks, then it's very powerful.\n\n172\n00:08:55.000 --> 00:08:58.980\nIt's a very great way to be able to\nmanage your multi-tier web applications.\n\n173\n00:08:58.980 --> 00:09:01.640\nNow, if you don't have a multi-tier\nweb application, if you have a very,\n\n174\n00:09:01.640 --> 00:09:04.585\nvery simple model, or\nyou have a web server with local storage.\n\n175\n00:09:04.585 --> 00:09:05.910\nOpsWorks is kind of overkill.\n\n176\n00:09:05.910 --> 00:09:09.800\nSo it's not perfect or that,\nbut as your networks grow and\n\n177\n00:09:09.800 --> 00:09:11.440\nyou have those multi tiered applications,\n\n178\n00:09:11.440 --> 00:09:13.650\nthis becomes essential to be\nable to tie everything together.\n\n179\n00:09:14.730 --> 00:09:16.240\nAll right, so that's OpsWorks.\n\n180\n00:09:16.240 --> 00:09:19.820\nThere is another service that a lot\nof people confuse with OpsWorks\n\n181\n00:09:19.820 --> 00:09:20.970\nis kind of similar.\n\n182\n00:09:20.970 --> 00:09:23.370\nAnd it's called AWS Cloud Formation.\n\n183\n00:09:23.370 --> 00:09:26.405\nCloud Formation is similar.\n\n184\n00:09:26.405 --> 00:09:31.260\nOpsWorks is really designed to have\nmy infrastructure deployed and\n\n185\n00:09:31.260 --> 00:09:34.630\nmanaged and continue to work with\nit over a long period of time.\n\n186\n00:09:34.630 --> 00:09:39.080\nCloud formation is really designed\nto get my environment deployed in\n\n187\n00:09:39.080 --> 00:09:43.370\nthe first place, and\nthen let it run free from there.\n\n188\n00:09:43.370 --> 00:09:47.510\nNot necessarily staying on top of\nit beyond the initial deployments.\n\n189\n00:09:47.510 --> 00:09:51.550\nSo with cloud formation\nwhat we do is we define\n\n190\n00:09:52.790 --> 00:09:57.740\nwhat our stack would be and we can use\nthat as a template to do deployments.\n\n191\n00:09:57.740 --> 00:10:00.975\nWith cloud formation it's all about\ntemplates not recipes like with chef.\n\n192\n00:10:00.975 --> 00:10:03.305\nAnd a template is very\nsimilar to a recipe.\n\n193\n00:10:03.305 --> 00:10:05.975\nA template says, all right,\nif I'm going to deploy my web application,\n\n194\n00:10:05.975 --> 00:10:08.575\nhere's the web servers I need,\nhere's the database servers I need,\n\n195\n00:10:08.575 --> 00:10:12.135\nhere's the other components that I need,\nand I can deploy it.\n\n196\n00:10:12.135 --> 00:10:14.295\nIf I want to deploy my web application,\nand\n\n197\n00:10:14.295 --> 00:10:20.435\nI need to do it in five different regions,\nI can go in to AWS CloudFormation,\n\n198\n00:10:20.435 --> 00:10:24.055\nI can create a template for my\napplication, and then I can just tell it,\n\n199\n00:10:24.055 --> 00:10:26.550\nhey, deploy in this region and this\nregion, and this region, and this region.\n\n200\n00:10:26.550 --> 00:10:28.240\nAnd then it does it, and\n\n201\n00:10:28.240 --> 00:10:31.750\nthen it builds that same environment in\nall of those different regions, okay?\n\n202\n00:10:31.750 --> 00:10:36.050\nSo CloudFormation sounds a lot\nlike OpsWorks, doesn't it?\n\n203\n00:10:36.050 --> 00:10:39.702\nWell here's the thing, CloudFormation is\nmuch more simple, it's very, very basic.\n\n204\n00:10:39.702 --> 00:10:43.765\nIt's designed to be easy to quickly\nwhip up something and deploy it out.\n\n205\n00:10:43.765 --> 00:10:47.255\nYou write JSON documents that define\nall the components that you need.\n\n206\n00:10:47.255 --> 00:10:50.955\nAnd those are just text files that define\nall the components that you need as part\n\n207\n00:10:50.955 --> 00:10:51.805\nof you solution.\n\n208\n00:10:51.805 --> 00:10:55.665\nAnd when you roll it out, the templates,\nthese JSON files, they just get read.\n\n209\n00:10:55.665 --> 00:10:57.515\nIt pulls the components and\nit deploys them.\n\n210\n00:10:57.515 --> 00:10:59.325\nAnd it follows whatever\ninstruction you give it.\n\n211\n00:10:59.325 --> 00:11:02.325\nSo it's designed to be quick and\neasy to get environments deployed.\n\n212\n00:11:02.325 --> 00:11:05.680\nOnce they're deployed\nCloudFormation really says, hey,\n\n213\n00:11:05.680 --> 00:11:07.740\nI'm done, that's it for me.\n\n214\n00:11:07.740 --> 00:11:11.260\nVersus OpsWorks where it\ncan continue to manage and\n\n215\n00:11:11.260 --> 00:11:14.040\ncontrol that environment\nbeyond the initial deployment.\n\n216\n00:11:14.040 --> 00:11:15.740\nSo two different solutions.\n\n217\n00:11:15.740 --> 00:11:17.890\nNow, how do you pick which one you want?\n\n218\n00:11:17.890 --> 00:11:22.570\nWell, CloudFormation is useful\nin most environments and\n\n219\n00:11:22.570 --> 00:11:24.490\ndefinitely useful long term.\n\n220\n00:11:24.490 --> 00:11:28.490\nBut if I just need a way to quickly deploy\na solution, to just get in and get out,\n\n221\n00:11:28.490 --> 00:11:29.210\njust deploy it and\n\n222\n00:11:29.210 --> 00:11:32.710\nbe done, that's where CloudFormation\nis the better solution, right?\n\n223\n00:11:32.710 --> 00:11:34.160\nIt's not as powerful, but\n\n224\n00:11:34.160 --> 00:11:36.970\nthat means it's faster to get\nimplemented and put in place.\n\n225\n00:11:36.970 --> 00:11:38.220\nSo those two are very similar.\n\n226\n00:11:38.220 --> 00:11:41.860\nI have a diagram here that kind of\nshows how Cloud Formation works.\n\n227\n00:11:41.860 --> 00:11:45.300\nWe start by creating that template, and we\nstore the template in an S3 bucket, right.\n\n228\n00:11:45.300 --> 00:11:45.850\nWhy an S3 bucket?\n\n229\n00:11:45.850 --> 00:11:49.060\nBecause then it can be accessed\nfrom anywhere inside of AWS.\n\n230\n00:11:49.060 --> 00:11:53.440\nAnd from there, we can use it to\ndeploy our stack wherever we need.\n\n231\n00:11:53.440 --> 00:11:56.740\nWe can chuck it out there into our\ntest environment or dev environment,\n\n232\n00:11:56.740 --> 00:11:59.870\ninto production, into one region or\nanother and get it rolled out there.\n\n233\n00:11:59.870 --> 00:12:03.060\nAnd beyond that you can do other things.\n\n234\n00:12:03.060 --> 00:12:06.520\nWe can change those definitions\nto then re-roll out.\n\n235\n00:12:06.520 --> 00:12:07.880\nSo if I'm about to make a modification for\n\n236\n00:12:07.880 --> 00:12:12.580\nupgraded software or something of that\nnature, I can redefine the template and\n\n237\n00:12:12.580 --> 00:12:15.520\nthen roll it out and\npush that out to update the stack.\n\n238\n00:12:15.520 --> 00:12:21.296\nSo I can continue to update my stack based\non what my current needs happen to be,\n\n239\n00:12:21.296 --> 00:12:22.179\nall right?\n\n240\n00:12:22.179 --> 00:12:23.945\nSo it is just triggered by us, though.\n\n241\n00:12:23.945 --> 00:12:27.840\nWe run it, it's not like it's\nconstantly attached like CloudWorks is.\n\n242\n00:12:27.840 --> 00:12:30.580\n&gt;&gt; Yeah, Don, it seems like there's\na lot of layers, a lot of moving pieces.\n\n243\n00:12:30.580 --> 00:12:33.280\nWhat if I need to deploy\na web application quickly and\n\n244\n00:12:33.280 --> 00:12:35.720\nI don't want to know about\nall the infrastructure?\n\n245\n00:12:35.720 --> 00:12:39.100\nIs there a service that will provide\nus with that kind of functionality?\n\n246\n00:12:39.100 --> 00:12:40.120\n&gt;&gt; Absolutely, and\n\n247\n00:12:40.120 --> 00:12:44.130\nif you're in the DevOps role, it doesn't\nmean that you got ops training, right?\n\n248\n00:12:44.130 --> 00:12:45.380\nIt usually just means you're a developer.\n\n249\n00:12:45.380 --> 00:12:47.460\nAnd for whatever reason, they decided\nyou're going to do ops too and\n\n250\n00:12:47.460 --> 00:12:48.390\nit's stuck on there.\n\n251\n00:12:48.390 --> 00:12:53.000\nWell, you might be the most amazing\nPHP developer in the world, but\n\n252\n00:12:53.000 --> 00:12:58.810\nyou might not know the first thing\nabout NGINX or Apache, or Linux even,\n\n253\n00:12:58.810 --> 00:13:02.590\nor whatever it is that's running under\nthe hood to power your PHP application.\n\n254\n00:13:02.590 --> 00:13:06.230\nAnd with Elastic Beanstalk,\nyou don't have to be.\n\n255\n00:13:06.230 --> 00:13:10.035\nWith Elastic Beanstalk,\nit lets you focus on being a developer and\n\n256\n00:13:10.035 --> 00:13:12.610\nlets Amazon take care of\nthe whole ops side of things.\n\n257\n00:13:12.610 --> 00:13:14.180\nNow, that whole ops side is important,\n\n258\n00:13:14.180 --> 00:13:17.440\nbecause it's not just\nspinning up an EC2 instance.\n\n259\n00:13:17.440 --> 00:13:20.210\nIt's keeping that EC2 instance up to date,\nright?\n\n260\n00:13:20.210 --> 00:13:23.560\nYou've got a Linux distribution that needs\nto be updated with security updates and\n\n261\n00:13:23.560 --> 00:13:24.370\npatches.\n\n262\n00:13:24.370 --> 00:13:26.610\nYou've got the Apache software, nginx.\n\n263\n00:13:26.610 --> 00:13:28.200\nThey need to be update also.\n\n264\n00:13:28.200 --> 00:13:30.810\nAnd you have things like\nthe Heartbleed Attack that were out there,\n\n265\n00:13:30.810 --> 00:13:35.230\nwhere you had to update the open SSL\nlibraries and you have to know that.\n\n266\n00:13:35.230 --> 00:13:37.290\nAnd if you're a sys op,\nyou know how to do that.\n\n267\n00:13:37.290 --> 00:13:39.300\nThat's what you do,\nthat's what your job is, right?\n\n268\n00:13:39.300 --> 00:13:44.880\nBut if you're a developer, if you're the\nmost amazing Ruby developer on the planet,\n\n269\n00:13:44.880 --> 00:13:47.640\nyou don't have to know how to\ndeal with the open SSL library.\n\n270\n00:13:47.640 --> 00:13:49.710\nI mean, you have to know how to\ncall the open SSL library but\n\n271\n00:13:49.710 --> 00:13:51.630\nnot necessarily how to update it, right?\n\n272\n00:13:51.630 --> 00:13:55.780\nSo that's where we can leverage Amazon,\ncuz they know how to do it.\n\n273\n00:13:55.780 --> 00:13:57.380\nThey do this stuff all the time.\n\n274\n00:13:57.380 --> 00:14:02.120\nWith Elastic Beanstalk, you go in and\nyou launch an application.\n\n275\n00:14:02.120 --> 00:14:04.870\nAnd all it asks you is hey,\nwhat platform do you want?\n\n276\n00:14:04.870 --> 00:14:08.290\nAnd it supports a ton of platforms,\nI got a little list here.\n\n277\n00:14:08.290 --> 00:14:12.515\nJava and PHP are the two most common,\nso it's got Java and PHP right there.\n\n278\n00:14:12.515 --> 00:14:16.340\nNode.js, which is the big buzz\nword of web development today.\n\n279\n00:14:16.340 --> 00:14:20.450\nThey've got Python, Ruby, Go is there, and\n\n280\n00:14:20.450 --> 00:14:23.430\neven container support, so\nif you've got a Docker application,\n\n281\n00:14:23.430 --> 00:14:27.206\nyou can deploy Docker containers\nright into Elastic Beanstalk.\n\n282\n00:14:27.206 --> 00:14:30.035\nAgain, you've built the the container\nalready on your own system,\n\n283\n00:14:30.035 --> 00:14:33.424\nyou just [SOUND] turn around, deploy it\nright there, maybe without sound effect.\n\n284\n00:14:33.424 --> 00:14:37.200\n[LAUGH] Into Elastic Beanstock and\noff you go.\n\n285\n00:14:37.200 --> 00:14:42.410\nThey also support Tomcat which\nis the Java application server.\n\n286\n00:14:42.410 --> 00:14:45.530\nPassenger and\nPuma which are little lesser known, but\n\n287\n00:14:45.530 --> 00:14:48.748\nall those are supported\nright to Elastic Beanstock.\n\n288\n00:14:48.748 --> 00:14:53.470\nAnd 100% of the underlined\ninfrastructure is taken care of for you.\n\n289\n00:14:53.470 --> 00:14:55.860\nIt's all managed by Elastic Beanstalk.\n\n290\n00:14:55.860 --> 00:14:58.410\nIt doesn't have to be completely\nmanaged by Elastic Beanstalk.\n\n291\n00:14:58.410 --> 00:15:00.670\nYou actually do see the components,\nso you can get in there and\n\n292\n00:15:00.670 --> 00:15:04.430\nmess with the brake system if you want or\noptimize it better if you know how.\n\n293\n00:15:04.430 --> 00:15:08.655\nBut if you don't know how, you can just\nkick back and let EBS take care of it.\n\n294\n00:15:08.655 --> 00:15:10.030\nI shouldn't call it EBS.\n\n295\n00:15:10.030 --> 00:15:13.800\nIt's Elastic Beanstalk, but EBS,\nmost of us think Elastic Block Store, for\n\n296\n00:15:13.800 --> 00:15:14.810\nthe storage site.\n\n297\n00:15:14.810 --> 00:15:19.310\nSo Elastic Beanstock, it'll take care\nof all the backend side for you.\n\n298\n00:15:19.310 --> 00:15:23.030\nThat's really advantageous if you're one\nof those people who have been thrust\n\n299\n00:15:23.030 --> 00:15:24.530\ninto the DevOps role.\n\n300\n00:15:24.530 --> 00:15:29.580\nSo if I'm a true DevOps, if I've been\ntrained on the operations side and\n\n301\n00:15:29.580 --> 00:15:35.280\non the developers side then something\nlike CloudFormation works really well,\n\n302\n00:15:35.280 --> 00:15:37.320\nor OpsWorks works really well.\n\n303\n00:15:37.320 --> 00:15:38.790\nOpsWorks is usually what I go for.\n\n304\n00:15:39.880 --> 00:15:43.635\nBut if I'm somebody who's kind\nof had this mantle thrust on me.\n\n305\n00:15:43.635 --> 00:15:48.090\nWell, Beanstock lets me focus on being a\ndeveloper and not focus on the operations.\n\n306\n00:15:48.090 --> 00:15:53.342\nTo know that it's being taken care\nof that's really where it excels so.\n\n307\n00:15:53.342 --> 00:15:55.759\nElastic Beanstock is\nfairly an old product.\n\n308\n00:15:55.759 --> 00:15:59.102\nIt's been part of AWS suite for\na long time.\n\n309\n00:15:59.102 --> 00:16:03.046\nAnd so it's pretty robust, and\nthey're adding new platforms and support,\n\n310\n00:16:03.046 --> 00:16:04.209\nlike Docker support.\n\n311\n00:16:04.209 --> 00:16:06.939\nThat was only added in the last couple\nof years, that was definitely not there\n\n312\n00:16:06.939 --> 00:16:09.320\nin the beginning because\nDocker's a really new thing.\n\n313\n00:16:09.320 --> 00:16:12.010\nSo they're always adding to that platform,\nit's definitely a good option for\n\n314\n00:16:12.010 --> 00:16:14.100\nus to have.\n\n315\n00:16:14.100 --> 00:16:17.700\nAll right, another thing that is\nuseful for us on the DevOps side is,\n\n316\n00:16:17.700 --> 00:16:22.570\nwhen you start deploying all of\nthis infrastructure, as a SysOp,\n\n317\n00:16:22.570 --> 00:16:27.830\nas a systems operations person,\none of the jobs that you have to\n\n318\n00:16:27.830 --> 00:16:31.520\ndo is to make sure that things are being\ndeployed according to best practices.\n\n319\n00:16:31.520 --> 00:16:34.590\nAnd not only are they being deployed\naccording to best practices, but\n\n320\n00:16:34.590 --> 00:16:38.590\nthey're staying configured\naccording to best practices.\n\n321\n00:16:38.590 --> 00:16:39.780\nSo for example,\n\n322\n00:16:39.780 --> 00:16:43.790\nI could deploy a Red Hat Enterprise\nLinux AMI right now inside of AWS.\n\n323\n00:16:43.790 --> 00:16:49.090\nAnd when I deploy it,\nit'll have things like SE Linux for\n\n324\n00:16:49.090 --> 00:16:52.690\ndoing security hardening on\nthe file system, it'll have\n\n325\n00:16:55.230 --> 00:16:57.900\nFirewallD for doing firewalls.\n\n326\n00:16:57.900 --> 00:17:01.237\nBut if I deployed and I hardened that\nsystem, I need to turn those on and\n\n327\n00:17:01.237 --> 00:17:02.720\nget them configured, right?\n\n328\n00:17:02.720 --> 00:17:04.720\nSo I may do that as part\nof my initial deployment.\n\n329\n00:17:04.720 --> 00:17:07.667\nOr I might build a custom AMI that's\nconfigured to my security standards so\n\n330\n00:17:07.667 --> 00:17:09.720\nthat I know that it's deployed.\n\n331\n00:17:09.720 --> 00:17:11.180\nBut then one day,\n\n332\n00:17:11.180 --> 00:17:15.410\nI go and I'm troubleshooting\nthere's some problem I go well,\n\n333\n00:17:15.410 --> 00:17:18.320\nmaybe it's SE Linux that's the problem\nlet me turn SE Linux off for a minute.\n\n334\n00:17:18.320 --> 00:17:19.909\nAnd you turn it off.\n\n335\n00:17:19.909 --> 00:17:22.027\nAnd no that wasn't the problem,\nlet me keep going, and\n\n336\n00:17:22.027 --> 00:17:24.976\nyou're troubleshooting things, and\nyou forget to turn it back on, right.\n\n337\n00:17:24.976 --> 00:17:29.407\nSo I configured the system,\nI configured it properly, but\n\n338\n00:17:29.407 --> 00:17:32.251\nthen I didn't stay that way, right.\n\n339\n00:17:32.251 --> 00:17:35.080\nI kind of moved away from\nbeing configured properly.\n\n340\n00:17:35.080 --> 00:17:39.490\nWell, when we use something like Cloud\nformation, we can ensure the deployment\n\n341\n00:17:39.490 --> 00:17:43.390\nis done securely but we don't\nensure that it stays that way, and\n\n342\n00:17:43.390 --> 00:17:46.350\nthat's where these next two\nservices really come in.\n\n343\n00:17:46.350 --> 00:17:50.710\nThe first one I want to talk about is\nwhat's called the Amazon Trusted Advisor.\n\n344\n00:17:50.710 --> 00:17:53.040\nThe Trusted Advisor is a web dashboard.\n\n345\n00:17:53.040 --> 00:17:56.670\nIt's a dashboard that you go to and\nit's where Amazon has\n\n346\n00:17:56.670 --> 00:17:59.790\nanalyzed your services according\nto their best practices.\n\n347\n00:17:59.790 --> 00:18:03.050\nAnd they help you highlight areas\nwhere you might be missing components,\n\n348\n00:18:03.050 --> 00:18:03.660\nyou might be weak.\n\n349\n00:18:03.660 --> 00:18:06.090\nNow, it's their best practices, not yours.\n\n350\n00:18:06.090 --> 00:18:06.860\nYou're might be different.\n\n351\n00:18:06.860 --> 00:18:10.120\nSo always keep that in mind, but if you\nhave no best practices you gotta start\n\n352\n00:18:10.120 --> 00:18:12.520\nsomewhere and\nAmazon actually has a great set.\n\n353\n00:18:13.740 --> 00:18:17.467\nIf we take a look, I've got a little\ndiagram here that kind of shows,\n\n354\n00:18:17.467 --> 00:18:21.645\nwhat they do is they give you a simple\ndashboard that does cost optimization,\n\n355\n00:18:21.645 --> 00:18:24.372\nperformance, security,\nand fault tolerance.\n\n356\n00:18:24.372 --> 00:18:27.928\nAnd it's looking at your deployments and\nif it sees you've got\n\n357\n00:18:27.928 --> 00:18:32.845\na Maria DB with no replicas, that's gonna\nset off a fault tolerance warning, right.\n\n358\n00:18:32.845 --> 00:18:38.602\nOr if you've got a load balancer where all\nthe nodes in that load balancer are in one\n\n359\n00:18:38.602 --> 00:18:44.930\navailability zone, that's gonna throw\nup a fault tolerance warning, right.\n\n360\n00:18:44.930 --> 00:18:50.380\nOn the security side, if I've got security\ngroups with wide open access on them,\n\n361\n00:18:50.380 --> 00:18:52.630\nthat's gonna throw up a warning, right.\n\n362\n00:18:52.630 --> 00:18:55.580\nNow the Trusted Advisor has\ntwo different modes to it.\n\n363\n00:18:55.580 --> 00:18:58.190\nThere's a free mode and a paid mode.\n\n364\n00:18:58.190 --> 00:19:04.300\nAnd the free mode has a limited amount\nof best practices that it monitors.\n\n365\n00:19:04.300 --> 00:19:08.410\nI forget the actual number on it, and\nI don't have it my notes, either.\n\n366\n00:19:08.410 --> 00:19:11.800\nBut it's just a handful of\nthings that it reports back on.\n\n367\n00:19:11.800 --> 00:19:14.610\nMostly, it's gonna be reporting on\nthings that deal with your account.\n\n368\n00:19:14.610 --> 00:19:20.700\nSo things like your cost limits,\nif you got a limit on your spending.\n\n369\n00:19:20.700 --> 00:19:22.690\nYou can set a spending limit in AWS.\n\n370\n00:19:22.690 --> 00:19:25.590\nIf you're approaching on that, it'll warn\non that cuz it's gotta track that anyway.\n\n371\n00:19:25.590 --> 00:19:27.415\nright?\nSo stuff that Amazon has to track anyway,\n\n372\n00:19:27.415 --> 00:19:30.314\nthey give to you for free here cuz,\nwell, they're tracking it anyway.\n\n373\n00:19:30.314 --> 00:19:35.355\nBut if you do the paid Trusted Advisor, it\nmonitors hundreds of things, tons of best\n\n374\n00:19:35.355 --> 00:19:40.124\npractices they've defined and they can\ngive you great insight in your system.\n\n375\n00:19:40.124 --> 00:19:42.825\nYou could have things misconfigured and\nnot even know it and\n\n376\n00:19:42.825 --> 00:19:44.490\nhere it will show it for you.\n\n377\n00:19:44.490 --> 00:19:45.780\nYou don't have to be the expert.\n\n378\n00:19:45.780 --> 00:19:48.860\nYou don't have to know that ins and\nouts of the system under the hood,\n\n379\n00:19:48.860 --> 00:19:51.150\nthey figure it out for you and\nthey report that back.\n\n380\n00:19:51.150 --> 00:19:53.980\n&gt;&gt; And it's interesting,\nby looking at this interface here, Don,\n\n381\n00:19:53.980 --> 00:19:56.800\nit looks like it could be used\nby multiple departments too.\n\n382\n00:19:56.800 --> 00:19:59.070\nCuz a manager might be looking at ROI,\nright?\n\n383\n00:19:59.070 --> 00:20:02.260\nReturn on investments, so looks like the\ncost would be important to them, where if\n\n384\n00:20:02.260 --> 00:20:05.730\nyou're a security officer, the security\nside might be a little bit more important.\n\n385\n00:20:05.730 --> 00:20:08.150\n&gt;&gt; Yeah, absolutely, and\nthis is all controlled by IAM.\n\n386\n00:20:08.150 --> 00:20:10.320\nSo you can easily create\nIAM credentials for\n\n387\n00:20:10.320 --> 00:20:13.890\nany of your employees to give them\naccess to parts of the Trusted Advisor.\n\n388\n00:20:13.890 --> 00:20:14.910\nBut you can jump right in here and\n\n389\n00:20:14.910 --> 00:20:17.710\nsee great things,\nsome of it is near real-time.\n\n390\n00:20:17.710 --> 00:20:20.500\nSo like performance, you can kinda\nsee how your systems are doing.\n\n391\n00:20:20.500 --> 00:20:21.508\nIt really is useful,\n\n392\n00:20:21.508 --> 00:20:25.108\nespecially if you're somebody who's\nnot a professional SysOps, right?\n\n393\n00:20:25.108 --> 00:20:29.540\nIf you are a developer that's been\nthrust into this DevOps role,\n\n394\n00:20:29.540 --> 00:20:33.470\nhere we get it kind of analyzed for\nus and we can jump in, and\n\n395\n00:20:33.470 --> 00:20:37.010\nact like the expert based\non what we find here.\n\n396\n00:20:37.010 --> 00:20:40.973\nNow, I went out of my way to mention\nthat this is Amazon's best practices.\n\n397\n00:20:40.973 --> 00:20:41.597\nWhat if we have our own?\n\n398\n00:20:41.597 --> 00:20:46.560\nWhat if we have our own, maybe they're not\neven best practices, maybe I have legal,\n\n399\n00:20:46.560 --> 00:20:49.300\nor regulatory compliance\nthat I have to maintain.\n\n400\n00:20:49.300 --> 00:20:52.870\nMaybe I work for a medical facility,\nI've got medical records, and\n\n401\n00:20:52.870 --> 00:20:57.400\nI have HIPAA compliance, and I have to\nensure that all of my data is encrypted.\n\n402\n00:20:57.400 --> 00:21:00.530\nWell, not every business has that, not\nevery business has to make sure their data\n\n403\n00:21:00.530 --> 00:21:04.160\nis encrypted, and so I might not get\na security warning in the Trusted Advisor\n\n404\n00:21:04.160 --> 00:21:09.150\nif I'm just trying to store\nsome data up there, right?\n\n405\n00:21:09.150 --> 00:21:11.340\nBut I might have that requirement.\n\n406\n00:21:11.340 --> 00:21:15.100\nAnd so, if you want to set up your own\nrequirements, there's another service,\n\n407\n00:21:15.100 --> 00:21:19.200\nthe last one I'm going to talk about,\nwhich is AWS Config.\n\n408\n00:21:19.200 --> 00:21:23.880\nAWS Config is one of those swiss\narmy knife services that really does\n\n409\n00:21:23.880 --> 00:21:25.060\na ton of things.\n\n410\n00:21:25.060 --> 00:21:27.790\nIt lets you define a configuration, and\n\n411\n00:21:27.790 --> 00:21:31.030\nit's the configuration that your\nservices should be following.\n\n412\n00:21:31.030 --> 00:21:35.560\nSo if I say that, hey, when I deploy\nan EC2 instance, those containers,\n\n413\n00:21:35.560 --> 00:21:38.820\nnot containers, the storage, right,\nthe block stores should be encrypted.\n\n414\n00:21:39.990 --> 00:21:43.770\nI can create that in AWS Config,\nI can define that requirement.\n\n415\n00:21:43.770 --> 00:21:48.715\nAnd then if I ever deploy instances and\nI don't encrypt their EBS volume,\n\n416\n00:21:48.715 --> 00:21:52.535\nit can throw up a warning,\nI can spot that, I can see that problem.\n\n417\n00:21:52.535 --> 00:21:56.035\nMore importantly, I can lock in\nthe configuration of my services and\n\n418\n00:21:56.035 --> 00:22:00.755\nresources right now and\nif they change, I can get warnings.\n\n419\n00:22:00.755 --> 00:22:05.625\nAWS Config is an amazing way to implement\nchange management and change control.\n\n420\n00:22:05.625 --> 00:22:08.645\nIf you work for a company that's not\ndoing change control, you work for\n\n421\n00:22:08.645 --> 00:22:11.005\na company that is constantly\nputting out fires, right?\n\n422\n00:22:11.005 --> 00:22:14.255\nIf you have 10 admins, or 20 admins and\nthey're all in the system and\n\n423\n00:22:14.255 --> 00:22:17.879\nthey're all making changes, it's a matter\nof time before one of them bumps into\n\n424\n00:22:17.879 --> 00:22:20.220\nthe other and it starts causing problems.\n\n425\n00:22:20.220 --> 00:22:23.201\nWe need to have a record of any\nchange that occurs in the system,\n\n426\n00:22:23.201 --> 00:22:25.461\nespecially if that change\nwasn't made by you.\n\n427\n00:22:25.461 --> 00:22:28.514\nMaybe it was an attacker,\nsomebody on the outside who got in and\n\n428\n00:22:28.514 --> 00:22:32.614\nchanged a security group to allow their IP\naddress to have full access to something.\n\n429\n00:22:32.614 --> 00:22:34.109\nThat would be bad, right?\n\n430\n00:22:34.109 --> 00:22:38.793\nIf we have AWS Config set up,\nthen what it can do is it can monitor and\n\n431\n00:22:38.793 --> 00:22:44.200\nsee if any of those things change and\nit can alerts us on it right away.\n\n432\n00:22:44.200 --> 00:22:46.230\nAnd we can even go in and\ncorrect it if need be.\n\n433\n00:22:46.230 --> 00:22:49.940\nAnd we could use things like cloud\nformation to go in and put stuff\n\n434\n00:22:49.940 --> 00:22:54.350\nback to the way they were or OpsWorks\ncan do it too, where we can automate,\n\n435\n00:22:54.350 --> 00:22:56.760\nkind of reconfiguring things getting\nthem back to the way they were.\n\n436\n00:22:56.760 --> 00:23:00.690\nBut here we'll have a record\nthat happened and we can even\n\n437\n00:23:00.690 --> 00:23:05.560\ncombine that with Cloud Trail to get\nthe auto logs and find out who did that?\n\n438\n00:23:05.560 --> 00:23:07.470\nWho made that unauthorized change?\n\n439\n00:23:07.470 --> 00:23:10.370\nWho put this system in place\nthat's not supposed to be here?\n\n440\n00:23:10.370 --> 00:23:14.490\nWhen the two correlate now you really\nhave a powerful information system.\n\n441\n00:23:14.490 --> 00:23:16.480\n&gt;&gt; Don you've mentioned\nconfiguration items.\n\n442\n00:23:16.480 --> 00:23:18.440\nWhere are they going to be stored.\n\n443\n00:23:18.440 --> 00:23:21.380\n&gt;&gt; So the configuration items themselves,\nif you build them yourself they're\n\n444\n00:23:21.380 --> 00:23:24.030\nbuilt locally and\nwe end up putting them into an S3 bucket.\n\n445\n00:23:24.030 --> 00:23:25.140\nIf we build them in the cloud,\n\n446\n00:23:25.140 --> 00:23:28.050\nlike if you have AWS Config build\nthem off of your existing resources,\n\n447\n00:23:28.050 --> 00:23:31.240\nthen they also go in the S3 bucket\nright that's where they all go.\n\n448\n00:23:31.240 --> 00:23:33.600\nAnd the neat part there,\nit's an S3 bucket, so\n\n449\n00:23:33.600 --> 00:23:37.740\nit can store a ton of stuff which means\nyou can store revisions, versions, right?\n\n450\n00:23:37.740 --> 00:23:39.580\nYou can basically do version control.\n\n451\n00:23:39.580 --> 00:23:42.520\nAnd I might have a web application,\nI've deployed five different versions, and\n\n452\n00:23:42.520 --> 00:23:45.350\nso I'll have five different configs\nthat are all stored in an S3 bucket.\n\n453\n00:23:45.350 --> 00:23:46.987\nI can pull back at any time.\n\n454\n00:23:46.987 --> 00:23:51.898\nMaybe I start getting reports from users\nsaying that something's not working on\n\n455\n00:23:51.898 --> 00:23:53.206\nmy web application.\n\n456\n00:23:53.206 --> 00:23:56.479\nAnd I'd look and yeah,\nthere was an update yesterday, but\n\n457\n00:23:56.479 --> 00:24:00.811\nI've never seen this feature, so\nI don't actually know if it worked before.\n\n458\n00:24:00.811 --> 00:24:01.505\nDoes it work now?\n\n459\n00:24:01.505 --> 00:24:03.090\nDid it work before?\n\n460\n00:24:03.090 --> 00:24:04.220\nI don't really know.\n\n461\n00:24:04.220 --> 00:24:07.280\nI could actually take one of\nthe older configurations and\n\n462\n00:24:07.280 --> 00:24:09.370\ndeploy it in test, and see.\n\n463\n00:24:09.370 --> 00:24:10.460\nDid it work before?\n\n464\n00:24:10.460 --> 00:24:12.370\nAnd I can look at it and say,\nyeah, yeah, it worked before,\n\n465\n00:24:12.370 --> 00:24:14.770\nso the new stuff must've broken something.\n\n466\n00:24:14.770 --> 00:24:16.440\nOr no, it didn't work before either.\n\n467\n00:24:16.440 --> 00:24:18.820\nIt's just nobody noticed until now,\nand it's coincidental.\n\n468\n00:24:18.820 --> 00:24:20.670\nIt helps us to solve\nthose kind of problems.\n\n469\n00:24:20.670 --> 00:24:24.830\nSo good change management,\nchange control, is really important.\n\n470\n00:24:24.830 --> 00:24:27.830\nIf your organization follows\nITIL best practices,\n\n471\n00:24:27.830 --> 00:24:29.280\nthey're going to have change management.\n\n472\n00:24:29.280 --> 00:24:30.855\nMost organizations do these days.\n\n473\n00:24:30.855 --> 00:24:32.633\nDatabaseConfig is a great\nway to enforce that.\n\n474\n00:24:32.633 --> 00:24:36.583\nSo any deviation from your set\nconfiguration will basically\n\n475\n00:24:36.583 --> 00:24:37.827\nthrow up an alarm.\n\n476\n00:24:37.827 --> 00:24:40.452\nIt'll let you see that and\nyou can get in there and fix it,\n\n477\n00:24:40.452 --> 00:24:42.220\nfind out why it happened and all that.\n\n478\n00:24:42.220 --> 00:24:44.565\nSo very powerful,\ndefinitely something we want.\n\n479\n00:24:44.565 --> 00:24:47.890\nThe use case scenarios here\nwould be discovery, right?\n\n480\n00:24:47.890 --> 00:24:51.160\nIf we're trying to find\nwhere we're not compliant,\n\n481\n00:24:51.160 --> 00:24:53.349\nDatabaseConfig is great for that.\n\n482\n00:24:53.349 --> 00:24:56.683\nIf we have custom requirements or\nbest practices that go beyond what\n\n483\n00:24:56.683 --> 00:25:00.199\nthe trusted advisor does,\nthat's another instance we might need it.\n\n484\n00:25:00.199 --> 00:25:03.180\nRegulatory compliance and auditing,\nthat's the number one for me.\n\n485\n00:25:03.180 --> 00:25:07.610\nIf I ever go to an organization and they\nsay, look, we have to be PCI compliant,\n\n486\n00:25:07.610 --> 00:25:11.990\nokay, well, Amazon,\nthey are PCI compliant, right?\n\n487\n00:25:11.990 --> 00:25:14.180\nBut when I deploy my instances,\nI can break that.\n\n488\n00:25:14.180 --> 00:25:17.070\nI can make my stuff not PCI compliant,\nright?\n\n489\n00:25:17.070 --> 00:25:19.360\nI can set up my web server to not do SSL.\n\n490\n00:25:19.360 --> 00:25:21.298\nWell, there goes PCI\ncompliance just like that.\n\n491\n00:25:21.298 --> 00:25:25.815\nI can take AWS Config, though, and\nI can set what my requirements are there.\n\n492\n00:25:25.815 --> 00:25:31.225\nAnd I can enforce it and create logs\nwhich are perfect for your PCI audits.\n\n493\n00:25:31.225 --> 00:25:35.567\nSo you can show that information that,\nyes, AWS is PCI compliant on their side.\n\n494\n00:25:35.567 --> 00:25:39.140\nAnd I've taken the steps to make\nsure that I am on my side too.\n\n495\n00:25:39.140 --> 00:25:42.890\nBetween the two, I've got a PCI compliant\nsolution, even though it's in the cloud.\n\n496\n00:25:42.890 --> 00:25:44.450\nEven though I don't have access\nto the physical servers.\n\n497\n00:25:44.450 --> 00:25:46.800\nSo that's an important thing.\n\n498\n00:25:46.800 --> 00:25:48.600\nOther areas, troubleshooting.\n\n499\n00:25:48.600 --> 00:25:51.200\nI've told this story on\nthis show multiple times,\n\n500\n00:25:51.200 --> 00:25:55.030\nthat an employee makes a bunch of changes\non the network and then goes on vacation.\n\n501\n00:25:55.030 --> 00:25:56.790\nAnd you come in and\neverything's going crazy.\n\n502\n00:25:56.790 --> 00:25:58.230\nWell, what did they change?\n\n503\n00:25:58.230 --> 00:26:00.620\nIf you've got Change Management,\nyou can go in and you can see,\n\n504\n00:26:00.620 --> 00:26:02.046\nhere's all the things they changed.\n\n505\n00:26:02.046 --> 00:26:03.310\nLet's roll that back, right?\n\n506\n00:26:03.310 --> 00:26:05.250\nAnd you can do that with DatabaseConfig.\n\n507\n00:26:05.250 --> 00:26:07.710\nSo very powerful service, very useful and\n\n508\n00:26:07.710 --> 00:26:11.780\nan easy way to get Change Management\nimplemented in your cloud.\n\n509\n00:26:11.780 --> 00:26:14.670\n&gt;&gt; Don, that's a lot of services and a lot\nof great information there, for sure.\n\n510\n00:26:14.670 --> 00:26:16.660\nSo hopefully you guys have enjoyed that.\n\n511\n00:26:16.660 --> 00:26:18.490\nBut we are coming to\nthe end of another episode.\n\n512\n00:26:18.490 --> 00:26:21.060\nBut before we do, Don, do you have any\nadditional words that you might wanna\n\n513\n00:26:21.060 --> 00:26:24.420\nthrow in on some of those services\nthat you've discussed in this episode?\n\n514\n00:26:24.420 --> 00:26:27.999\n&gt;&gt; The only thing I can think of that\nI forgot to mention is in AWS Config,\n\n515\n00:26:27.999 --> 00:26:30.854\nit is doing a configuration\nsnapshot every six hours.\n\n516\n00:26:30.854 --> 00:26:33.443\nSo it's capturing that\ninformation over time.\n\n517\n00:26:33.443 --> 00:26:36.300\nBut you can define a config\nwhenever you want.\n\n518\n00:26:36.300 --> 00:26:39.082\nMost of these services are designed\nto just kinda run on their own.\n\n519\n00:26:39.082 --> 00:26:40.675\nBut they still require\na little bit of maintenance.\n\n520\n00:26:40.675 --> 00:26:41.720\nYou gotta keep an eye on them.\n\n521\n00:26:41.720 --> 00:26:43.470\nJust make sure you take\nadvantage of what's there.\n\n522\n00:26:43.470 --> 00:26:47.175\nA lot of people are getting that DevOps\ntitle thrown on them and it's unfortunate\n\n523\n00:26:47.175 --> 00:26:50.330\ncuz they're not getting the training\nthat goes alongside with that role.\n\n524\n00:26:50.330 --> 00:26:55.358\nSo these services really help out,\nbut it's not a one size fits all.\n\n525\n00:26:55.358 --> 00:27:00.030\nSo between OpsWorks, and\nCloudFormation, and Config,\n\n526\n00:27:00.030 --> 00:27:02.120\nthey each kinda serve a different role.\n\n527\n00:27:02.120 --> 00:27:03.240\nAnd you'll wanna know that role for\n\n528\n00:27:03.240 --> 00:27:06.720\nthe exam so you can pick the right\nsolution for the scenario they give you.\n\n529\n00:27:06.720 --> 00:27:07.930\n&gt;&gt; Don, that's a wealth of information.\n\n530\n00:27:07.930 --> 00:27:10.480\nAs always, we appreciate you\nbeing in the studios with us.\n\n531\n00:27:10.480 --> 00:27:11.890\nWe appreciate you, the viewer, watching.\n\n532\n00:27:11.890 --> 00:27:14.504\nBut we're gonna go ahead and\nsign out here for ITProTV.\n\n533\n00:27:14.504 --> 00:27:16.090\nI've been your host, Wes Bryan.\n\n534\n00:27:16.090 --> 00:27:16.900\n&gt;&gt; And I'm Don Pezet.\n\n535\n00:27:16.900 --> 00:27:19.439\n&gt;&gt; And we'll see you next time.\n\n536\n00:27:19.439 --> 00:27:25.473\n[MUSIC]\n\n537\n00:27:25.473 --> 00:27:28.816\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "209483515"
        }
      ],
      "title": "Additional Key Services"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don dive into security inside of AWS. They talk about physical security and look at the point responsibility of AWS as well as the responsibility of the customer. They also look at network security, discussing various topics like tenant isolation, hypervisors, data transmission security and network monitoring.",
          "length": "1852",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-1-security_on_aws-031717-PGM.00_30_37_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-1-security_on_aws-031717-PGM.00_30_37_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-1-security_on_aws-031717-PGM.00_30_37_08.Still001-sm.jpg",
          "title": "Security on AWS",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.892\nWelcome to ITPRO.TV, I'm your host,\nDon Pezet [CROSSTALK]\n\n2\n00:00:05.892 --> 00:00:08.405\n[MUSIC]\n\n3\n00:00:08.405 --> 00:00:12.087\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.087 --> 00:00:15.000\n&gt;&gt; Hello and welcome to ITPRO.TV,\nthanks for tuning in.\n\n5\n00:00:15.000 --> 00:00:17.440\nI'm your host Wes Bryan and\nin today's episode, well,\n\n6\n00:00:17.440 --> 00:00:18.670\nwe got a great show coming for you.\n\n7\n00:00:18.670 --> 00:00:22.840\nWe're gonna be doing the AWS certified\nsolutions architect associate.\n\n8\n00:00:22.840 --> 00:00:25.760\nAnd joining us back in the studios\ntoday is none other than Mr. Don Pezet.\n\n9\n00:00:25.760 --> 00:00:27.040\nDon, how you doing, sir?\n\n10\n00:00:27.040 --> 00:00:29.942\n&gt;&gt; I'm doing great, Wes, ready to dive\nright back into the world of AWS.\n\n11\n00:00:29.942 --> 00:00:33.122\nAnd we're gonna actually gonna be\nswitching gears a little bit and\n\n12\n00:00:33.122 --> 00:00:36.928\ninstead of focusing in on the individual\ntechnology we're gonna take the whole\n\n13\n00:00:36.928 --> 00:00:38.687\nshabang, the entire AWS suite, and\n\n14\n00:00:38.687 --> 00:00:41.389\nwe're gonna talk about\nimplementing security in AWS.\n\n15\n00:00:41.389 --> 00:00:44.115\nAnd that's a really important\ntopic because there's some\n\n16\n00:00:44.115 --> 00:00:45.430\nmisconceptions out there.\n\n17\n00:00:45.430 --> 00:00:47.950\nThere's some confusion over\nhow security is managed.\n\n18\n00:00:47.950 --> 00:00:52.640\nAnd if we design a solution relying too\nmuch on Amazon to provide security,\n\n19\n00:00:52.640 --> 00:00:55.580\nwe may find that we end up in\na situation that we don't want to be in.\n\n20\n00:00:55.580 --> 00:00:57.710\nOr if we find out that we're\nnot relying on them enough,\n\n21\n00:00:57.710 --> 00:01:00.550\nnot taking advantage of all of the\ndifferent things that are provided to us\n\n22\n00:01:00.550 --> 00:01:05.410\nthrough the AWS suite of products, then\nyou may not be as secure as you could.\n\n23\n00:01:05.410 --> 00:01:08.620\nAnd there's a lot of, there's even free\nsecurity solutions that are built in that\n\n24\n00:01:08.620 --> 00:01:10.130\nyou just have to know and\ngo in and turn on.\n\n25\n00:01:10.130 --> 00:01:11.844\nAnd once you have them in place,\n\n26\n00:01:11.844 --> 00:01:14.776\nyou can have that much better\nof a secure environment.\n\n27\n00:01:14.776 --> 00:01:16.550\nSo definitely things that\nwe want to look at and\n\n28\n00:01:16.550 --> 00:01:18.507\nstuff we're gonna see right\nhere in this episode.\n\n29\n00:01:18.507 --> 00:01:21.379\n&gt;&gt; You know, Don, and some of\nthe other courses that we teach here,\n\n30\n00:01:21.379 --> 00:01:23.113\nwe talk a lot about physical security.\n\n31\n00:01:23.113 --> 00:01:26.860\nAnd one of the benefits of the cloud is\nnot really having to worry about that\n\n32\n00:01:26.860 --> 00:01:28.312\nunless it's on premise, so\n\n33\n00:01:28.312 --> 00:01:32.080\nhow do we deal with physical security\nwhen it comes to something like AWS?\n\n34\n00:01:32.080 --> 00:01:34.530\n&gt;&gt; All right, so let's start right there,\ncuz that's really important.\n\n35\n00:01:34.530 --> 00:01:35.730\nYou said one thing,\n\n36\n00:01:35.730 --> 00:01:39.350\nwe don't have to worry about security\nunless it's on premises, right?\n\n37\n00:01:39.350 --> 00:01:43.070\nWell, that is a common conception that\npeople have, that hey if l just stick\n\n38\n00:01:43.070 --> 00:01:48.300\nsomething up in the cloud, it's going to\nbe secure and that's not exactly true.\n\n39\n00:01:48.300 --> 00:01:52.650\nThat when you put something in\nthe cloud there are aspects of it\n\n40\n00:01:52.650 --> 00:01:55.620\nthat you don't have to worry about but\nthere's aspects of it that you do.\n\n41\n00:01:55.620 --> 00:01:58.570\nYou have what's called\nshared responsibility.\n\n42\n00:01:58.570 --> 00:02:01.880\nYou are still responsible for\nthe security of your applications, but\n\n43\n00:02:01.880 --> 00:02:05.660\nAmazon is taking responsibility for\ncertain aspects.\n\n44\n00:02:05.660 --> 00:02:08.130\nI've got a little diagram that\nkinda helps to show that.\n\n45\n00:02:08.130 --> 00:02:10.370\nWhen you work with AWS,\n\n46\n00:02:10.370 --> 00:02:15.570\nwhat you're dealing with is a mixture\nof all the cloud buzzwords,\n\n47\n00:02:15.570 --> 00:02:19.500\nPlatform as a Service, Infrastructure\nas a Service, Software as a Service.\n\n48\n00:02:19.500 --> 00:02:23.757\nSo SaaS, Software as a Service,\nthat's the one, where you really don't\n\n49\n00:02:23.757 --> 00:02:27.360\nhave to worry about, security, everything\nis provided by the cloud vendor.\n\n50\n00:02:27.360 --> 00:02:33.920\nIf you take a look at something like\nGmail, Google's email service, right?\n\n51\n00:02:33.920 --> 00:02:36.180\nEverything is handled by them,\nyou just log in in the web page and\n\n52\n00:02:36.180 --> 00:02:37.060\nthere's your email.\n\n53\n00:02:37.060 --> 00:02:40.043\nSo you don't have to worry about\nsecurity from that standpoint,\n\n54\n00:02:40.043 --> 00:02:43.476\naside from your own personal passwords and\nmultifactor authentication.\n\n55\n00:02:43.476 --> 00:02:47.946\nBut with AWS it's not all Software as\na Service, a lot of it is Platform as\n\n56\n00:02:47.946 --> 00:02:52.810\na Service where they're taking care\nof the operating system and below.\n\n57\n00:02:52.810 --> 00:02:54.620\nOr Infrastructure as a Service,\n\n58\n00:02:54.620 --> 00:02:56.670\nwhere they're not even taking\ncare of your operating system,\n\n59\n00:02:56.670 --> 00:03:00.280\nthey're taking care of the physical\ninfrastructure behind the scenes.\n\n60\n00:03:00.280 --> 00:03:02.420\nAnd you don't have to worry\nabout security there, but\n\n61\n00:03:02.420 --> 00:03:04.700\nyou still have to worry about\neverything on top of it.\n\n62\n00:03:04.700 --> 00:03:08.670\nSo this diagram shows kinda that\nshared responsibility model where\n\n63\n00:03:08.670 --> 00:03:12.850\nAWS is providing the functionality for\nthings that are down here in orange,\n\n64\n00:03:12.850 --> 00:03:16.930\nright, the regions,\nthe availability zones, the edge location.\n\n65\n00:03:16.930 --> 00:03:20.620\nOn top of that, they're giving you\nthe compute resources, storage, database,\n\n66\n00:03:20.620 --> 00:03:22.990\nnetworking, each of those components.\n\n67\n00:03:22.990 --> 00:03:27.160\nWhen I go into EC2, and I spit up\nan instance, I don't have to worry about\n\n68\n00:03:27.160 --> 00:03:30.890\nhow that instance is getting power,\nor what host it's going onto.\n\n69\n00:03:30.890 --> 00:03:32.990\nI just get the compute resource,\nand I've got it.\n\n70\n00:03:32.990 --> 00:03:36.342\nAnd the storage is being placed on\nthe disk and I know that that's redundant.\n\n71\n00:03:36.342 --> 00:03:38.620\nAnd I don't have to worry about that.\n\n72\n00:03:38.620 --> 00:03:42.000\nSo, security issues based\naround availability,\n\n73\n00:03:42.000 --> 00:03:45.000\nbased on what if somebody\nbreaks into the data center?\n\n74\n00:03:45.000 --> 00:03:47.150\nWhat if the data center catches on fire?\n\n75\n00:03:47.150 --> 00:03:50.010\nWhat if I have a failed hard drive.\n\n76\n00:03:50.010 --> 00:03:53.840\nI don't have to worry about those,\nAmazon takes care of all of that,\n\n77\n00:03:53.840 --> 00:03:55.100\nyou can put it out of your mind.\n\n78\n00:03:55.100 --> 00:03:58.030\nAnd that's really the great\nadvantage of going into the cloud.\n\n79\n00:03:58.030 --> 00:04:02.450\nBut, once that operating systems stands\nup on that instance and I log in,\n\n80\n00:04:03.610 --> 00:04:07.970\nall this stuff in the blue is stuff\nI have to worry about, right?\n\n81\n00:04:07.970 --> 00:04:10.805\nEverything in the blue,\nthis is customer responsibility.\n\n82\n00:04:10.805 --> 00:04:14.535\nWe need to deal with server-side\nencryption or encryption of the files.\n\n83\n00:04:14.535 --> 00:04:17.465\nWe need to deal with our\nnetwork traffic protection.\n\n84\n00:04:17.465 --> 00:04:19.105\nWe need to configure a firewall.\n\n85\n00:04:19.105 --> 00:04:23.095\nWe need to configure access to\nthe server and permissions and roles.\n\n86\n00:04:23.095 --> 00:04:24.615\nWe need to configure that,\n\n87\n00:04:24.615 --> 00:04:28.035\nAmazon doesn't know what\napplications you're going to run.\n\n88\n00:04:28.035 --> 00:04:30.745\nThey can't anticipate what you're\ngonna need, so they can't do that.\n\n89\n00:04:30.745 --> 00:04:33.000\nThey can't provide that functionality.\n\n90\n00:04:33.000 --> 00:04:37.050\nWell, all of this other stuff,\nthe OS, the firewall, the network,\n\n91\n00:04:37.050 --> 00:04:41.790\nthe platform itself are applications\nare identities we manage that.\n\n92\n00:04:41.790 --> 00:04:43.380\nAnd we can screw it up.\n\n93\n00:04:43.380 --> 00:04:48.230\nJust like any project you can screw up,\nbut here we can rest too heavily\n\n94\n00:04:48.230 --> 00:04:51.230\non the idea that the cloud provider\nis taking care of everything and\n\n95\n00:04:51.230 --> 00:04:53.130\nwe can end up in a real problem.\n\n96\n00:04:53.130 --> 00:04:55.368\nA great example of that is LAMP.\n\n97\n00:04:55.368 --> 00:05:02.590\nLAMP is Linux, Apache,\nMySQL, and PHP, right?\n\n98\n00:05:02.590 --> 00:05:06.740\nA LAMP stack is a great way\nto deploy a web application.\n\n99\n00:05:06.740 --> 00:05:10.980\nSo you might have a developer out\nthere who has created this amazing PHP\n\n100\n00:05:10.980 --> 00:05:17.170\napplication and so they need\na Linux box with Apache and MySQL.\n\n101\n00:05:17.170 --> 00:05:18.650\nSo what do they do?\n\n102\n00:05:18.650 --> 00:05:21.420\nThey go and they find an AMI that's\ngot it all in there already.\n\n103\n00:05:21.420 --> 00:05:24.890\nOr they just pick a random AMI and they\nthrow it in place, right and it's Linux.\n\n104\n00:05:24.890 --> 00:05:29.050\nAnd it takes two commands to install\nApache and MySQL and PHP, you got it\n\n105\n00:05:29.050 --> 00:05:32.880\ninstalled and they stand it up and they\nthrow their application on there, right?\n\n106\n00:05:32.880 --> 00:05:37.470\nWell, when Amazon deployed that AMI,\nit was secure.\n\n107\n00:05:37.470 --> 00:05:39.620\nBut now, you've added Apache,\nnow, you've added MySQL,\n\n108\n00:05:39.620 --> 00:05:43.720\nnow you've added other things,\nhave they been secured?\n\n109\n00:05:43.720 --> 00:05:46.790\nNo, no, you deployed them,\nyou have to secure them.\n\n110\n00:05:46.790 --> 00:05:49.060\nAnd a developer won't\nnecessarily think about that.\n\n111\n00:05:49.060 --> 00:05:51.810\nAs a DevOps,\nyou have to think about that, right?\n\n112\n00:05:51.810 --> 00:05:55.110\nAnd even those AMI was\nsecured when it's deployed,\n\n113\n00:05:55.110 --> 00:05:59.030\nis it secured tomorrow or\nthe next day or the next day?\n\n114\n00:05:59.030 --> 00:06:01.480\nPatches, hot fixes, updates come out.\n\n115\n00:06:01.480 --> 00:06:05.340\nAmazon is not updating your\ninstances you have to update them.\n\n116\n00:06:05.340 --> 00:06:07.520\nSo I have to go in and\nmake sure I'm updating my libraries.\n\n117\n00:06:07.520 --> 00:06:14.280\nI'm doing an app to get install or\nupdate, or I'm doing a Yum, update.\n\n118\n00:06:14.280 --> 00:06:17.710\nWhatever it is that I need to do to\ngo in and update all of my files and\n\n119\n00:06:17.710 --> 00:06:19.600\nget them patched and\nkeep the systems up to date.\n\n120\n00:06:19.600 --> 00:06:22.000\n&gt;&gt; So Don, you would say that just\nbecause we're using the cloud,\n\n121\n00:06:22.000 --> 00:06:24.910\nit's important as a customer, or\na provider if you're using it,\n\n122\n00:06:24.910 --> 00:06:26.790\nto know where that line\nin the sand is drawn.\n\n123\n00:06:26.790 --> 00:06:31.080\n&gt;&gt; Absolutely and that's a great\neuphemism there, a line in the sand.\n\n124\n00:06:31.080 --> 00:06:32.900\nYou have a very visible line.\n\n125\n00:06:32.900 --> 00:06:36.180\nPhysical security you don't have to worry\nabout, that is completely taken care of.\n\n126\n00:06:36.180 --> 00:06:40.270\nAll of the aspects of redundancy and\navailability and all that,\n\n127\n00:06:40.270 --> 00:06:44.820\nbuilt around the physical side, the\ninfrastructure side, that's taken care of.\n\n128\n00:06:44.820 --> 00:06:47.890\nEverything that's on the logical side,\nthat's still in your realm.\n\n129\n00:06:47.890 --> 00:06:49.200\nThat's still something\nyou've got to deal with.\n\n130\n00:06:49.200 --> 00:06:50.690\nSo we've always gotta be aware of that.\n\n131\n00:06:50.690 --> 00:06:55.170\nSo as we go through this series here,\nthis is not all gonna fit in one episode.\n\n132\n00:06:55.170 --> 00:06:56.850\nBefore this show I gave Wes my notes and\nand\n\n133\n00:06:56.850 --> 00:06:59.630\nit's this giant stack of stuff\nwe gotta talk about here.\n\n134\n00:06:59.630 --> 00:07:02.020\nIt's gonna take us a couple of\nepisodes to get through it,\n\n135\n00:07:02.020 --> 00:07:04.930\nbut it's really gonna be\nfocusing on that logical side.\n\n136\n00:07:04.930 --> 00:07:07.010\nBut you're not gonna hear me\ntalk about the physical side.\n\n137\n00:07:07.010 --> 00:07:10.600\nYou're not gonna hear me talk about\nradar rays or power generators or\n\n138\n00:07:10.600 --> 00:07:12.510\nwhatever, because that's taken care of.\n\n139\n00:07:12.510 --> 00:07:15.570\nAll right, let's run through some of\nthe things that are taken care of.\n\n140\n00:07:15.570 --> 00:07:20.070\nFire detection, right,\nat each region you've got data centers.\n\n141\n00:07:20.070 --> 00:07:21.960\nAnd inside of a region you've\ngot availability zones.\n\n142\n00:07:21.960 --> 00:07:25.120\nAnd each availability zone is\nan independent data center.\n\n143\n00:07:25.120 --> 00:07:29.970\nAnd in that data center,\nthey've got sprinklers, smoke detectors.\n\n144\n00:07:29.970 --> 00:07:32.700\nThey've got gaseous fire suppression so\n\n145\n00:07:32.700 --> 00:07:36.790\nit doesn't damage all the equipment\nwhen it takes the oxygen out of the air.\n\n146\n00:07:36.790 --> 00:07:39.390\nYou've got all those different\ntechnologies, those are implemented,\n\n147\n00:07:39.390 --> 00:07:41.710\nthey are serviced and maintained.\n\n148\n00:07:41.710 --> 00:07:45.074\nThere's a human presence there,\nnot just an electronic sensor, so\n\n149\n00:07:45.074 --> 00:07:48.902\nyou've got people, the feet on the ground\nthat are actually there monitoring\n\n150\n00:07:48.902 --> 00:07:50.540\nbecause that's important too.\n\n151\n00:07:50.540 --> 00:07:53.973\nI might have a bunch of air conditioners,\nright, in a data center you have what\n\n152\n00:07:53.973 --> 00:07:56.584\nare called chillers that chill the air,\nthey're really.\n\n153\n00:07:56.584 --> 00:07:58.094\nHardcore air conditioners.\n\n154\n00:07:58.094 --> 00:08:01.370\nAnd they might be doing great,\nthey might not.\n\n155\n00:08:01.370 --> 00:08:02.590\nHow do we know if they're not doing well?\n\n156\n00:08:02.590 --> 00:08:04.620\nWell, we need to have temperature sensors.\n\n157\n00:08:04.620 --> 00:08:06.150\nAnd if you have a thermostat on the wall,\n\n158\n00:08:06.150 --> 00:08:09.395\nwe can have a threshold where the\nthermostat hits and it sends out an alert.\n\n159\n00:08:09.395 --> 00:08:11.395\nOr you're gonna just\nhave a human there and\n\n160\n00:08:11.395 --> 00:08:13.785\nthe human can tell when\nthe temperature's not right.\n\n161\n00:08:13.785 --> 00:08:16.216\nOr you can have both, and\nthat's what Amazon does.\n\n162\n00:08:16.216 --> 00:08:19.516\nThey have a network operation center\nthat's staffed 24 hours a day,\n\n163\n00:08:19.516 --> 00:08:22.871\n7 days a week cuz they're monitoring\nthe environmental conditions and\n\n164\n00:08:22.871 --> 00:08:24.748\npaying attention to if there's a fire.\n\n165\n00:08:24.748 --> 00:08:26.915\nCuz if there's a fire they don't\nwanna be in the building either.\n\n166\n00:08:26.915 --> 00:08:29.870\nSo [LAUGH] they're gonna detect that and\nthen take action.\n\n167\n00:08:29.870 --> 00:08:34.520\nSo that's one of the things that is\nkind of already taken care of by Amazon.\n\n168\n00:08:34.520 --> 00:08:38.600\nOn the power side,\nthey've got generators, they've got UPS,\n\n169\n00:08:38.600 --> 00:08:42.300\nuninterruptible power supplies, right,\nbig battery sets that are in place\n\n170\n00:08:42.300 --> 00:08:46.870\nto ensure that if they lose power\nthe UPS's keep them up temporarily.\n\n171\n00:08:46.870 --> 00:08:48.937\nThe generators fire up next.\n\n172\n00:08:48.937 --> 00:08:51.665\nAnd if you've ever worked with generators\nit takes a lot to maintain those.\n\n173\n00:08:51.665 --> 00:08:55.209\nYou've got to cycle them once a week\nbecause a lot of them are diesel and\n\n174\n00:08:55.209 --> 00:08:59.113\ndiesel fuel, if you let it sit there for\na few weeks, will start to gel up and so\n\n175\n00:08:59.113 --> 00:09:01.600\nit can basically make\nthe generator not work.\n\n176\n00:09:01.600 --> 00:09:03.710\nSo they've got to cycle them and\ntest them.\n\n177\n00:09:03.710 --> 00:09:06.320\nThey've got to do maintenance and\nkeep them under warranty.\n\n178\n00:09:06.320 --> 00:09:08.050\nThey've got to be secured.\n\n179\n00:09:08.050 --> 00:09:11.190\nGenerators usually need to be outside\nbecause they put out a lot of,\n\n180\n00:09:11.190 --> 00:09:13.040\nis it carbon monoxide?\n\n181\n00:09:13.040 --> 00:09:15.510\nWhich is toxic to humans,\nright, it's exhaust.\n\n182\n00:09:15.510 --> 00:09:19.140\nSo we need the exhaust to be outside and\n\n183\n00:09:19.140 --> 00:09:21.050\nbecause of that there's\nan external component.\n\n184\n00:09:21.050 --> 00:09:23.200\nSomebody outside could attack, right?\n\n185\n00:09:23.200 --> 00:09:27.040\nThere's an exhaust vent,\nthey could jam that up and\n\n186\n00:09:27.040 --> 00:09:32.010\ncause the generator to start backing\nup CO into the internal environment.\n\n187\n00:09:32.010 --> 00:09:35.390\nOr if the whole generator is outside\nthey could sabotage the generator and\n\n188\n00:09:35.390 --> 00:09:37.540\nstop it from working so\nthat's gotta be secured.\n\n189\n00:09:37.540 --> 00:09:39.260\nThese data centers are like compounds.\n\n190\n00:09:39.260 --> 00:09:41.220\nThey've got razor wires around them,\n\n191\n00:09:41.220 --> 00:09:44.790\nthey've got cameras,\nthey've got 24-hour surveillance going on.\n\n192\n00:09:44.790 --> 00:09:50.930\nIt's high security and it takes a lot of\nmoney and man power to be able to do that.\n\n193\n00:09:50.930 --> 00:09:54.290\nAmazon is doing it so\nall of that stuff is taken care of.\n\n194\n00:09:54.290 --> 00:09:55.640\nWhat else?\nI already talked about climate and\n\n195\n00:09:55.640 --> 00:09:56.830\ntemperature.\n\n196\n00:09:56.830 --> 00:09:59.500\nThe management side of things,\nthe network operations center,\n\n197\n00:09:59.500 --> 00:10:03.810\nthey're manning this 24, 7 and I do\nwant to throw another comment on that.\n\n198\n00:10:03.810 --> 00:10:05.910\nBecause anybody can setup a network\noperations center, right.\n\n199\n00:10:05.910 --> 00:10:10.290\nI can say Wes you and me,\nlet's start doing 12 hour shifts, right?\n\n200\n00:10:10.290 --> 00:10:12.980\nI'll take the first half of the day,\nyou take the second half of the day, and\n\n201\n00:10:12.980 --> 00:10:15.030\nwe can monitor the network 24 hours a day.\n\n202\n00:10:15.030 --> 00:10:16.690\nWe can do that, right?\n\n203\n00:10:16.690 --> 00:10:20.410\nBut who are we,\nwe're just two guys who do a show, right?\n\n204\n00:10:20.410 --> 00:10:27.690\nSo what Amazon does, is they have a whole\nstaff of people that are the best.\n\n205\n00:10:27.690 --> 00:10:30.350\nThey are ones that have been\nselected that are capable\n\n206\n00:10:30.350 --> 00:10:33.160\nof monitoring the largest\ndata centers in the world.\n\n207\n00:10:33.160 --> 00:10:37.090\nThis is a level of staff that\nyou may not be able to afford or\n\n208\n00:10:37.090 --> 00:10:40.230\neven if you can afford,\nmay just not be available to you.\n\n209\n00:10:40.230 --> 00:10:43.930\nWe're in Gainesville,\nFlorida which is not a giant city, so\n\n210\n00:10:43.930 --> 00:10:48.900\nwhen we put an ad in the paper that says,\nhey we need to hire a technician.\n\n211\n00:10:48.900 --> 00:10:52.400\nWe don't have a huge labor pool here\nin town we've gotta recruit people from\n\n212\n00:10:52.400 --> 00:10:53.400\nother cities.\n\n213\n00:10:53.400 --> 00:10:57.290\nWell that's hard for a small company\nto recruit somebody to move,\n\n214\n00:10:57.290 --> 00:10:58.850\nto come to work for your small company.\n\n215\n00:10:58.850 --> 00:11:02.820\nBut when you're Amazon, people are jumping\nat the chance to move, to go and\n\n216\n00:11:02.820 --> 00:11:05.260\nwork at those data centers cuz\nthe biggest ones in the world.\n\n217\n00:11:05.260 --> 00:11:09.620\nSo, they have a talent pool that is well\nbeyond what most organizations are going\n\n218\n00:11:09.620 --> 00:11:10.570\nto have.\n\n219\n00:11:10.570 --> 00:11:12.510\nSo, that's another thing\nabout their management.\n\n220\n00:11:13.690 --> 00:11:17.930\nOn the physical side, there's more than\njust environmental controls, though.\n\n221\n00:11:17.930 --> 00:11:22.710\nThese things like a daily disposition,\nwhen you're done with hardware,\n\n222\n00:11:22.710 --> 00:11:24.400\nthink about what you're doing\non your own environment.\n\n223\n00:11:24.400 --> 00:11:29.240\nWhen I'm done with a work station, so\nI just got a new laptop a few days ago, so\n\n224\n00:11:29.240 --> 00:11:30.825\nwhat I'm gonna do with my old laptop?\n\n225\n00:11:30.825 --> 00:11:34.240\nWell, if it's really old and\nit's broken I'm gonna junk it to trash,\n\n226\n00:11:34.240 --> 00:11:37.770\nwell I'm gonna recycle it responsibly,\nright, that's what I'm gonna do.\n\n227\n00:11:37.770 --> 00:11:39.950\nBut, what about my personal\ndata that's on there?\n\n228\n00:11:41.220 --> 00:11:44.350\nI don't want that to get out,\nif I don't care about my data, who cares?\n\n229\n00:11:44.350 --> 00:11:46.720\nAnd I just dispose with the laptop and\nthat's that.\n\n230\n00:11:46.720 --> 00:11:51.100\nBut with Amazon, they're disposing\nhardware every single day,\n\n231\n00:11:51.100 --> 00:11:53.700\nnot physical hardware but\nvirtual hardware.\n\n232\n00:11:53.700 --> 00:11:56.160\nAnd there's some physical hardware,\nthey have to cycle out drives and so\n\n233\n00:11:56.160 --> 00:12:00.500\nthey have a whole process where the drives\nare destroyed and sanitized and\n\n234\n00:12:00.500 --> 00:12:01.250\nrecycled properly.\n\n235\n00:12:01.250 --> 00:12:02.970\nSo, they're taking care of\nthat on the physical side.\n\n236\n00:12:02.970 --> 00:12:06.070\nBut even on the logical side, they're\nhaving to deal with deal with that too.\n\n237\n00:12:06.070 --> 00:12:10.570\nBecause, I might be done with a set\nof storage I was using in AWS,\n\n238\n00:12:10.570 --> 00:12:13.210\nbut that doesn't mean it's\ntime to throw it away.\n\n239\n00:12:13.210 --> 00:12:15.240\nIt's still good storage,\nI just happen to be done with it.\n\n240\n00:12:15.240 --> 00:12:18.240\nSo they can re-provision\nit to another customer.\n\n241\n00:12:18.240 --> 00:12:21.048\nWell, what do we do about that?\n\n242\n00:12:21.048 --> 00:12:25.090\nIn an on-premises location when\nI'm done with physical storage,\n\n243\n00:12:25.090 --> 00:12:27.870\nI might have a procedure\nthat says I need to\n\n244\n00:12:27.870 --> 00:12:32.020\nrun seven erase processes on that\nbefore I send it over to somebody else.\n\n245\n00:12:32.020 --> 00:12:34.360\nRight, so that's my internal procedure and\nI can do that.\n\n246\n00:12:34.360 --> 00:12:37.470\nBut when we deal with a cloud,\nwe're leaving it up to Amazon.\n\n247\n00:12:37.470 --> 00:12:41.750\nAnd Amazon does that, they follow all of\nthe regulatory compliance guidelines to\n\n248\n00:12:41.750 --> 00:12:43.650\nmake sure that they can get in there,\n\n249\n00:12:43.650 --> 00:12:48.790\nclean that drive before they then\nprovision it off to somebody else, right?\n\n250\n00:12:48.790 --> 00:12:50.960\nAnd I know I'm talking about hard drives,\nbut they do the same thing with RAM.\n\n251\n00:12:50.960 --> 00:12:54.500\nAnd that's kind of a funny one because\nwhat happens with RAM when you power down\n\n252\n00:12:54.500 --> 00:12:55.120\nyour computer?\n\n253\n00:12:55.120 --> 00:12:57.710\nIt gets erased,\neverything goes away, right?\n\n254\n00:12:57.710 --> 00:12:59.730\nSo, RAM's easy to clean.\n\n255\n00:12:59.730 --> 00:13:03.460\nUnless that RAM is being shared\namongst a number of customers, right?\n\n256\n00:13:03.460 --> 00:13:08.910\nIf we have shared tenancy on\nour EC2 instances, for example.\n\n257\n00:13:08.910 --> 00:13:13.590\nI might be using 8 gigs of RAM on\na server that's 256 gigs of RAM.\n\n258\n00:13:13.590 --> 00:13:16.700\nSo I can't just power the server\ndown to flush that RAM, right?\n\n259\n00:13:16.700 --> 00:13:20.872\nSo, any time I take an EC2 instance down,\nin the background,\n\n260\n00:13:20.872 --> 00:13:26.178\nAmazon jumps right in, they take that\nmemory and they write zeroes to all of it.\n\n261\n00:13:26.178 --> 00:13:29.715\nThey zero it all out before they allow\nthat memory to come back into the pool\n\n262\n00:13:29.715 --> 00:13:31.810\nto be provisioned to another customer.\n\n263\n00:13:31.810 --> 00:13:34.570\nIt's part of their instance isolation.\n\n264\n00:13:34.570 --> 00:13:38.770\nThey do the same thing with your database\ninstances, if you're using RDS or\n\n265\n00:13:38.770 --> 00:13:42.790\nreally any of the other services that\nuse RAM on instances of their systems.\n\n266\n00:13:42.790 --> 00:13:44.260\nThey're taking care of that.\n\n267\n00:13:44.260 --> 00:13:47.420\nSo when it's physical\nhardware that is worn out and\n\n268\n00:13:47.420 --> 00:13:49.550\nneeds to be replaced, they deal with it.\n\n269\n00:13:49.550 --> 00:13:52.913\nBut even the logical hardware we use,\nthey're making sure it gets erased and\n\n270\n00:13:52.913 --> 00:13:53.907\ngets cycled through.\n\n271\n00:13:53.907 --> 00:13:58.717\nSo that's all kind of part of that process\nof maintaining the physical security of\n\n272\n00:13:58.717 --> 00:13:59.704\ntheir systems.\n\n273\n00:13:59.704 --> 00:14:02.372\n&gt;&gt; Don, it seems like they've\ngot a lot of resiliency\n\n274\n00:14:02.372 --> 00:14:04.550\nwhen it comes to individual components.\n\n275\n00:14:04.550 --> 00:14:06.140\nBut I know in the larger scheme of things,\n\n276\n00:14:06.140 --> 00:14:08.380\nwe can have organizations\nthat are very huge.\n\n277\n00:14:08.380 --> 00:14:11.230\nWhat happens when we have to worry\nabout things like business continuity?\n\n278\n00:14:11.230 --> 00:14:14.500\nDo they have things in place that we\ncan kind of rest assured that they're\n\n279\n00:14:14.500 --> 00:14:15.960\ntaking care of that as well?\n\n280\n00:14:15.960 --> 00:14:19.560\n&gt;&gt; Yeah, disaster recovery,\nright, business resumption, BRPs,\n\n281\n00:14:19.560 --> 00:14:23.290\nall the industry buzzwords\ncentered around that.\n\n282\n00:14:23.290 --> 00:14:26.870\nWhen we have a physical failure, I said\nthat Amazon is gonna take care of that.\n\n283\n00:14:26.870 --> 00:14:29.800\nAnd if it's a failed hard drive, we don't\neven notice, right, that's a simple thing.\n\n284\n00:14:29.800 --> 00:14:34.450\nEven a failed host, they can shift your\ninstances over to another one, and\n\n285\n00:14:34.450 --> 00:14:36.240\nyou might just see a reboot and\nthat's that.\n\n286\n00:14:36.240 --> 00:14:40.800\nIt's not that significant, and if you've\ngot enough instances deployed, they'll\n\n287\n00:14:40.800 --> 00:14:43.820\nspan across more than one host, and so\nyou don't even get a blip on your radar.\n\n288\n00:14:43.820 --> 00:14:47.180\nThat kind of stuff is automated,\nbut when it gets bigger, right.\n\n289\n00:14:47.180 --> 00:14:49.750\nWhat if it's an entire\ndata center that fails?\n\n290\n00:14:49.750 --> 00:14:52.850\nIt's happened, it wasn't catastrophic,\nit wasn't like there was a fire, or\n\n291\n00:14:52.850 --> 00:14:55.820\nan explosion,\nit was a bad route that was put in place,\n\n292\n00:14:55.820 --> 00:14:59.840\nand traffic couldn't get to\na particular data center.\n\n293\n00:14:59.840 --> 00:15:01.952\nSo that data is effectively offline.\n\n294\n00:15:01.952 --> 00:15:04.442\nWell what happens then, right?\n\n295\n00:15:04.442 --> 00:15:09.689\nThat's when we start getting into our\nbusiness continuity and there is a certain\n\n296\n00:15:09.689 --> 00:15:15.060\nlevel of that that is taken care of by\nAmazon as far as the physical side.\n\n297\n00:15:15.060 --> 00:15:18.165\nBut they don't take care of the logical\nside, the side that you and\n\n298\n00:15:18.165 --> 00:15:19.224\nI have to worry about.\n\n299\n00:15:19.224 --> 00:15:21.368\nIf they have an entire center go down,\n\n300\n00:15:21.368 --> 00:15:24.540\nremember to them a data center\nis in availability zone.\n\n301\n00:15:24.540 --> 00:15:28.070\nAnd you'll have more than one\navailability zone within a region and\n\n302\n00:15:28.070 --> 00:15:31.110\nthere's many technologies that we've\nalready talked about in previous episodes\n\n303\n00:15:31.110 --> 00:15:34.330\nthat are automatically replicated\nbetween availability zones.\n\n304\n00:15:34.330 --> 00:15:37.150\nSome of them are automatic and\nthen it's up to us to make sure that\n\n305\n00:15:37.150 --> 00:15:40.170\nwe're replicating our data\nbetween availability zones.\n\n306\n00:15:40.170 --> 00:15:44.004\nAnd then it goes even a step further\nbecause replicating is not just enough.\n\n307\n00:15:44.004 --> 00:15:47.917\nIf a failure happens, I have to have\na way to get my applications to say,\n\n308\n00:15:47.917 --> 00:15:52.288\nyou know what, I need to go to this other\navailability zone now instead of the one\n\n309\n00:15:52.288 --> 00:15:53.155\nI was going to.\n\n310\n00:15:53.155 --> 00:15:57.114\nHow does our application know to do that,\nright, we've gotta have a way.\n\n311\n00:15:57.114 --> 00:16:01.758\nAnd you can use Route 53 to do that,\nyou can use elastic load balancers.\n\n312\n00:16:01.758 --> 00:16:05.074\nRemember an elastic load balancer can\nbalance traffic across more than one\n\n313\n00:16:05.074 --> 00:16:07.330\navailability zone in the same region.\n\n314\n00:16:07.330 --> 00:16:10.400\nIf we wanna go multiregion,\nthat's where we need to bring in Route 53,\n\n315\n00:16:10.400 --> 00:16:14.300\ncuz it can help us to do that and\ncombine it with Load balancers.\n\n316\n00:16:14.300 --> 00:16:15.690\nSo the technology is there.\n\n317\n00:16:15.690 --> 00:16:18.710\nAmazon is giving us the tools\nto build that redundancy.\n\n318\n00:16:18.710 --> 00:16:21.310\nThey just can't build it for\nus because they don't know what we need.\n\n319\n00:16:21.310 --> 00:16:22.730\nThey don't know what our application is.\n\n320\n00:16:22.730 --> 00:16:24.070\nThey don't know how we're gonna use it.\n\n321\n00:16:24.070 --> 00:16:27.995\nSo, they're taking care of making sure the\nresources are present when we need them\n\n322\n00:16:27.995 --> 00:16:31.320\neven if there's a failure,\nthey make sure the resource is replaced.\n\n323\n00:16:31.320 --> 00:16:34.667\nBut it's up to us to make sure that\nwe've crafted our application to\n\n324\n00:16:34.667 --> 00:16:35.910\ntake advantage of that.\n\n325\n00:16:35.910 --> 00:16:37.704\nSo that's a key thing, and\n\n326\n00:16:37.704 --> 00:16:42.540\nI've got a little diagram that kinda\nshows how AWS is divided up, right.\n\n327\n00:16:42.540 --> 00:16:46.716\nThat AWS is a giant umbrella term,\nAmazon Web Services,\n\n328\n00:16:46.716 --> 00:16:51.250\nand they've got regions that\nare located all over the world.\n\n329\n00:16:51.250 --> 00:16:55.600\nI've got their, let's see here we go,\nthese are all their regions,\n\n330\n00:16:55.600 --> 00:16:56.770\nthe orange dots.\n\n331\n00:16:56.770 --> 00:16:58.840\nWherever you see an orange\ndot is an active region.\n\n332\n00:16:58.840 --> 00:17:00.580\nA green one is one that's coming soon.\n\n333\n00:17:00.580 --> 00:17:03.720\nSo I think the only one I'm\ncovering up is Australia.\n\n334\n00:17:03.720 --> 00:17:04.365\nThere we go, Australia.\n\n335\n00:17:04.365 --> 00:17:07.198\n[LAUGH] So\nwe've got regions all over the globe and\n\n336\n00:17:07.198 --> 00:17:10.940\nin each region there's multiple\navailability zones, right.\n\n337\n00:17:10.940 --> 00:17:13.150\nSo there's five right here in Virginia.\n\n338\n00:17:13.150 --> 00:17:14.790\nThere's three up in Oregon.\n\n339\n00:17:14.790 --> 00:17:16.480\nThere's three down in California.\n\n340\n00:17:16.480 --> 00:17:20.210\nThey're spread out like\nthat with multiple AZs.\n\n341\n00:17:20.210 --> 00:17:24.010\nNow the AZs are the easiest for\nus to take advantage of.\n\n342\n00:17:24.010 --> 00:17:28.080\nBecause you've got really good bandwidth\nin between the availability zones at\n\n343\n00:17:28.080 --> 00:17:29.260\na single region.\n\n344\n00:17:29.260 --> 00:17:31.240\nRight it's all a private\nnetwork at that point.\n\n345\n00:17:31.240 --> 00:17:34.590\nSo you'd get massive amounts of bandwidth,\nsuper fast replication.\n\n346\n00:17:34.590 --> 00:17:38.179\nIt might be asynchronous application but\nit's gonna be really close to synchronous\n\n347\n00:17:38.179 --> 00:17:41.090\nbecause you have such a good connection,\nright?\n\n348\n00:17:41.090 --> 00:17:45.375\nAnd Amazon is handling most fail over\nright here when I created S3 bucket,\n\n349\n00:17:45.375 --> 00:17:47.415\nthe S3 bucket is tied to a region and\n\n350\n00:17:47.415 --> 00:17:51.990\nis automatically replicated between\nAZs on the backend, that's automatic.\n\n351\n00:17:51.990 --> 00:17:54.708\nBut if a region were to fail for\nsome reason,\n\n352\n00:17:54.708 --> 00:17:57.650\nwhich I believe to this day,\nhas not happened.\n\n353\n00:17:57.650 --> 00:17:58.940\nI know they've had an AZ fail,\n\n354\n00:17:58.940 --> 00:18:01.150\nI don't believe they've ever\nhad a whole region fail.\n\n355\n00:18:01.150 --> 00:18:05.304\nBut if a whole region were to fail for\nsome reason, we could flip over and\n\n356\n00:18:05.304 --> 00:18:07.460\nbe in another region pretty easily.\n\n357\n00:18:07.460 --> 00:18:09.700\nIf our application supported it, right?\n\n358\n00:18:09.700 --> 00:18:11.826\nThe only example I can give for you for\n\n359\n00:18:11.826 --> 00:18:15.540\nwhen I've seen this is it wasn't\nactually Amazon's problem.\n\n360\n00:18:15.540 --> 00:18:18.909\nBut there was a fiber backbone issue\nthat happened here in the U.S.,\n\n361\n00:18:18.909 --> 00:18:22.750\nhere in the U.S. we have a number\nof Internet backbone providers.\n\n362\n00:18:22.750 --> 00:18:25.920\nBut most of them run their\nfibre through the same places.\n\n363\n00:18:25.920 --> 00:18:30.090\nIt's not as redundant as it really\nshould be, and it's just a cost reason.\n\n364\n00:18:30.090 --> 00:18:33.540\nSo, for example, linking the east coast,\nand the west coast of the United States.\n\n365\n00:18:33.540 --> 00:18:36.120\nIf we were to divide the U.S.\nvertically right?\n\n366\n00:18:36.120 --> 00:18:39.014\nJust draw a line right down the middle\nwhich, would I don't know maybe be\n\n367\n00:18:39.014 --> 00:18:41.160\nthe Mississippi River or\nsomething like that right?\n\n368\n00:18:41.160 --> 00:18:44.560\nSo you cut the country in half, the East\ncoast has a pretty heavy population on\n\n369\n00:18:44.560 --> 00:18:48.012\nthe coastline, and the West coast is all\nin the coastline, and in the middle of\n\n370\n00:18:48.012 --> 00:18:52.330\nthe U.S. there's really not a whole lot\nof people there's a lot of empty space.\n\n371\n00:18:52.330 --> 00:18:55.170\nSorry for everybody in Kansas and\nNebraska, and\n\n372\n00:18:55.170 --> 00:18:58.490\nplaces like that, but there are people\nthere but it's just not as dense.\n\n373\n00:18:58.490 --> 00:19:01.060\nAnd so to get the backbones to run across\n\n374\n00:19:01.060 --> 00:19:03.290\nto save money they've all kind of\nbeen run through the same place.\n\n375\n00:19:03.290 --> 00:19:06.360\nAnd there was this one location it was in,\n\n376\n00:19:06.360 --> 00:19:08.600\nI believe it was in case do\nyou remember Wes where it was?\n\n377\n00:19:08.600 --> 00:19:11.760\nI think it was Kansas where they\nhad some fiber lines break and\n\n378\n00:19:11.760 --> 00:19:16.190\nit effectively separated the country\nto an east and a west U.S..\n\n379\n00:19:16.190 --> 00:19:21.009\nAnd so if I was on the East Coast I\ncan get to north Virginia region I\n\n380\n00:19:21.009 --> 00:19:24.937\ncould get to U.S.\neast but I couldn't get to U.S.\n\n381\n00:19:24.937 --> 00:19:28.437\nwest because it was\nsegregated it was cut off.\n\n382\n00:19:28.437 --> 00:19:33.264\nAnd it wasn't Amazon's fault it was\nthis physical backbone transfer\n\n383\n00:19:33.264 --> 00:19:34.990\nstation that went down.\n\n384\n00:19:34.990 --> 00:19:41.390\nWell if I had designed an application\nthey use RAR 53, with geo location.\n\n385\n00:19:41.390 --> 00:19:44.750\nI could be sending West Coast people,\nto the West Coast Region.\n\n386\n00:19:44.750 --> 00:19:46.780\nAnd East Coast people to\nthe East Coast Region.\n\n387\n00:19:46.780 --> 00:19:51.170\nAnd when that little break happened,\nit wouldn't affected my customers at all.\n\n388\n00:19:51.170 --> 00:19:53.360\nBut if I had put everything in U.S.\n\n389\n00:19:53.360 --> 00:19:56.200\nEast, cuz I know that's Amazon's\nbiggest data center, right?\n\n390\n00:19:56.200 --> 00:19:58.510\nThat's the one they created first,\nand it's got the most resources.\n\n391\n00:19:58.510 --> 00:20:02.950\nSo if I'd put everything in U.S. East and\njust went multi-AZ, I could survive an AZ\n\n392\n00:20:02.950 --> 00:20:08.230\nfailing, but I couldn't survive that\nbackbone issue that happened, right?\n\n393\n00:20:08.230 --> 00:20:08.980\nBut the tools were there.\n\n394\n00:20:08.980 --> 00:20:11.770\nThe tools were there for us to take\nadvantage of that if we wanted to.\n\n395\n00:20:11.770 --> 00:20:12.950\nThat's how all of this stuff is, right?\n\n396\n00:20:12.950 --> 00:20:15.300\nYou've gotta identify what\nyou have to worry about and\n\n397\n00:20:15.300 --> 00:20:17.430\nbasically resolve it as best you can.\n\n398\n00:20:17.430 --> 00:20:19.890\n&gt;&gt; You know Don,\nas part as any business continuity,\n\n399\n00:20:19.890 --> 00:20:23.100\nI gotta be one that jump in here\nwith some IT buzz words as well.\n\n400\n00:20:23.100 --> 00:20:25.220\nI also think of things like incident and\nresponse.\n\n401\n00:20:25.220 --> 00:20:28.010\nDo have things like incident\nresponse handling for us?\n\n402\n00:20:28.010 --> 00:20:30.580\n&gt;&gt; Yeah, well, at least for\ntheir resources right.\n\n403\n00:20:30.580 --> 00:20:35.415\nIf I have an instance and it's up and\nit's running and the Apache service stops,\n\n404\n00:20:35.415 --> 00:20:38.390\nwell Amazon doesn't do\nanything about that.\n\n405\n00:20:38.390 --> 00:20:41.250\nWe can set up CloudWatch and it can\nmonitor and it can see that happen and\n\n406\n00:20:41.250 --> 00:20:42.990\nit can notify us and we can deal with it.\n\n407\n00:20:42.990 --> 00:20:46.540\nBut on their side for\neverything they're responsible for\n\n408\n00:20:46.540 --> 00:20:51.110\nthey're managing with 24 hours,\nseven day a week monitored services.\n\n409\n00:20:51.110 --> 00:20:55.150\nSo, they jumped in and deal with it\nright away, so instant responses there.\n\n410\n00:20:55.150 --> 00:20:58.400\nIf an AZ fails they take care of that,\nright?\n\n411\n00:20:58.400 --> 00:21:00.240\nThey rebuild, they bring it back up.\n\n412\n00:21:00.240 --> 00:21:02.556\nIf they're doing multi-AZ replications for\nyou,\n\n413\n00:21:02.556 --> 00:21:05.040\nthey're bringing up your\nresources on the other side.\n\n414\n00:21:05.040 --> 00:21:08.530\nLike if you do the relational database\nservice and bring up Aurora DB.\n\n415\n00:21:08.530 --> 00:21:12.330\nAurora DB has three replicas of your\ndatabase, even if you don't configure it.\n\n416\n00:21:12.330 --> 00:21:13.900\nIf you just spit up a database,\n\n417\n00:21:13.900 --> 00:21:16.220\nstart chucking data in there,\nit's got three replicas.\n\n418\n00:21:16.220 --> 00:21:20.590\nYou don't see them, but they're there,\nand if the main replica fails,\n\n419\n00:21:20.590 --> 00:21:23.410\namazon automatically brings\nup one of the other ones.\n\n420\n00:21:23.410 --> 00:21:24.450\nYou don't even have to touch it.\n\n421\n00:21:24.450 --> 00:21:25.880\nThat's automatic, right?\n\n422\n00:21:25.880 --> 00:21:29.000\nSo they are certain things that they\nprovide instant response for and\n\n423\n00:21:29.000 --> 00:21:31.270\nthey're very fast at it\nthey do a great job.\n\n424\n00:21:31.270 --> 00:21:33.885\nBut with each service you need to\nmake sure you do your research\n\n425\n00:21:33.885 --> 00:21:36.620\nto understand what it is they provide and\nwhat it is they don't.\n\n426\n00:21:36.620 --> 00:21:38.879\n&gt;&gt; Now,\nif it happens to be an incident like that,\n\n427\n00:21:38.879 --> 00:21:41.025\nis it gonna be completely\ntransparent to us or\n\n428\n00:21:41.025 --> 00:21:44.930\nwe're gonna be able to see some kind of\nwarning or about the servers or something?\n\n429\n00:21:44.930 --> 00:21:47.040\nAre we made aware at all about this?\n\n430\n00:21:47.040 --> 00:21:49.210\n&gt;&gt; A lot of it is transparent.\n\n431\n00:21:49.210 --> 00:21:50.330\nAnd we don't know about it, right?\n\n432\n00:21:50.330 --> 00:21:54.662\nIf a generator is having a fault\nin one availability zone in U.S.\n\n433\n00:21:54.662 --> 00:21:57.580\nEast We never hear about that, right?\n\n434\n00:21:57.580 --> 00:22:00.660\nThey replace it, they had a redundant one,\nit was completely infrastructure side,\n\n435\n00:22:00.660 --> 00:22:02.520\nwe never see that, right?\n\n436\n00:22:02.520 --> 00:22:05.441\nBut there are some that we do see, and\n\n437\n00:22:05.441 --> 00:22:09.410\nthey communicate that to\nus a few different ways.\n\n438\n00:22:09.410 --> 00:22:12.080\nAmazon has a, like a status report page.\n\n439\n00:22:12.080 --> 00:22:14.369\nLet me just bring it up here real quick so\nI can show it to you guys.\n\n440\n00:22:15.490 --> 00:22:18.260\nThis is the status report page right here.\n\n441\n00:22:18.260 --> 00:22:23.010\nIf you go to status.aws.amazon.com I\nknow that's microscopic text today.\n\n442\n00:22:23.010 --> 00:22:25.800\nBut there it is, status.aws.amazon.com.\n\n443\n00:22:25.800 --> 00:22:29.665\nAnd you can see a list of\nall of their services.\n\n444\n00:22:29.665 --> 00:22:31.255\nNow they do two neat things here,\n\n445\n00:22:31.255 --> 00:22:35.905\none they give you a quick at a glance\nof all the services per region, right.\n\n446\n00:22:35.905 --> 00:22:39.565\nSo when I see Glacier, here's Glacier for\nMontreal, here's Glacier for\n\n447\n00:22:39.565 --> 00:22:40.255\nNorth Carolina,\n\n448\n00:22:40.255 --> 00:22:44.745\nhere's Glacier for North Virginia,\nI can see how it is in each region.\n\n449\n00:22:44.745 --> 00:22:47.665\nBecause it might be failing in\none region and not another.\n\n450\n00:22:47.665 --> 00:22:50.310\nThat's what happened the other week,\nthere was an S3 outage.\n\n451\n00:22:50.310 --> 00:22:55.428\nAnd the S3 outage was just in\nNorth Virginia, it wasn't in the U.S.\n\n452\n00:22:55.428 --> 00:22:58.050\nWest, in Oregon, or one of those.\n\n453\n00:22:58.050 --> 00:22:59.920\nSo you could identify where that was.\n\n454\n00:22:59.920 --> 00:23:03.650\nBut the other cool thing they do\nis they provide these RSS feeds.\n\n455\n00:23:03.650 --> 00:23:06.740\nBecause when I look at this right here,\nit's green check marks all they way.\n\n456\n00:23:06.740 --> 00:23:09.000\nIn fact, there I finally found one.\n\n457\n00:23:09.000 --> 00:23:12.445\nLooks like Amazon Route 53 does\nhave a warning right here and\n\n458\n00:23:12.445 --> 00:23:16.430\nwhen you float over that warning,\nsee the history that comes in there?\n\n459\n00:23:16.430 --> 00:23:21.289\nAs soon as the problem was detected they\nstarted sorting it and as they worked it,\n\n460\n00:23:21.289 --> 00:23:24.933\nthey posted updates here to let\nus know what was going on and so\n\n461\n00:23:24.933 --> 00:23:28.490\nwe can see that this problem was detected.\n\n462\n00:23:28.490 --> 00:23:33.738\nLet's see, at 4:44 PM that was when they\ndetected it, so we're investigating.\n\n463\n00:23:33.738 --> 00:23:38.470\nAnd then at 5:11, less than 30 minutes\nlater, we continued to investigate, right.\n\n464\n00:23:38.470 --> 00:23:41.766\nSo they hadn't found the problem, but\nthey established that it's not impacting\n\n465\n00:23:41.766 --> 00:23:43.639\nqueries so\nmost of us wouldn't of noticed it.\n\n466\n00:23:43.639 --> 00:23:45.698\nThey noticed it, but\nmost of us wouldn't have.\n\n467\n00:23:45.698 --> 00:23:46.794\nBut they kept updating it.\n\n468\n00:23:46.794 --> 00:23:50.953\nAnd so then they started posting updates\nas they worked And figure out the problem.\n\n469\n00:23:50.953 --> 00:23:54.828\nSo, they figured out the problem they\nstarted restoring here just says record\n\n470\n00:23:54.828 --> 00:23:56.541\nchanges are slowly propagating.\n\n471\n00:23:56.541 --> 00:24:00.235\nAnd it's a little dynamic pop up so it's\nkind of hard for me to keep on my screen.\n\n472\n00:24:00.235 --> 00:24:03.979\nBut then it goes through and basically\nlays it out and explains what needs to be\n\n473\n00:24:03.979 --> 00:24:07.507\ndone or what's already been done and\nthen it's been resolved, right?\n\n474\n00:24:07.507 --> 00:24:10.820\nAnd those RSS feeds up there\nallow us to follow that.\n\n475\n00:24:10.820 --> 00:24:14.620\nWe can follow that story and kind of\nsee the news reader or get that history\n\n476\n00:24:14.620 --> 00:24:17.800\nbecause you don't see a history here where\nyou just see green check marks, right?\n\n477\n00:24:17.800 --> 00:24:21.590\nBut you will see history when\nyou pull up those RSS feeds\n\n478\n00:24:21.590 --> 00:24:22.890\nto be able to go in and view that.\n\n479\n00:24:22.890 --> 00:24:26.650\nAnd I picked one that's not got\na lot of activity on it but\n\n480\n00:24:26.650 --> 00:24:28.180\nyou can see it all there.\n\n481\n00:24:28.180 --> 00:24:31.740\nSo that's all part of instant response\nin keeping the systems healthy.\n\n482\n00:24:31.740 --> 00:24:35.860\nWe can use Cloud watch for monitoring\nthe parts that we're responsible for.\n\n483\n00:24:35.860 --> 00:24:38.470\nWe can use this status health\npage to be able to monitor\n\n484\n00:24:38.470 --> 00:24:40.480\nwhat Amazon should perform.\n\n485\n00:24:40.480 --> 00:24:42.500\n&gt;&gt; That's a lot on the physical security.\n\n486\n00:24:42.500 --> 00:24:44.181\nOne of the things I know that,\n\n487\n00:24:44.181 --> 00:24:47.142\nin seeing you over the last\ncouple years use AWS Don,\n\n488\n00:24:47.142 --> 00:24:49.630\nyou've never ever once SSH into a switch-\n&gt;&gt; [LAUGH]\n\n489\n00:24:49.630 --> 00:24:51.061\n&gt;&gt; Done any configurations.\n\n490\n00:24:51.061 --> 00:24:52.166\nNever touched a port.\n\n491\n00:24:52.166 --> 00:24:53.684\nWhat about the network side of things?\n\n492\n00:24:53.684 --> 00:24:55.170\nWhere does that come into play for us?\n\n493\n00:24:55.170 --> 00:24:58.130\n&gt;&gt; Yeah, the physical network is\ncompletely hidden from us in EC2,\n\n494\n00:24:58.130 --> 00:24:59.020\nwe don't see it, right.\n\n495\n00:24:59.020 --> 00:25:01.354\nSwitches, routers, firewalls,\nyou can't touch them.\n\n496\n00:25:01.354 --> 00:25:05.340\nThey're there, and you can interact\nsort of like with routers.\n\n497\n00:25:05.340 --> 00:25:07.950\nYou never touch a router at Amazon.\n\n498\n00:25:07.950 --> 00:25:12.370\nYou might bring up a NAT gateway\non a VPC and that is a router and\n\n499\n00:25:12.370 --> 00:25:14.650\ninternet gateway on a VPC,\nthat's a router.\n\n500\n00:25:14.650 --> 00:25:18.200\nBut their virtual instances that is\ntied to your account, there are physical\n\n501\n00:25:18.200 --> 00:25:23.200\nrouters in the data centers, you cross\nthrough them but you never configure them,\n\n502\n00:25:23.200 --> 00:25:26.830\nthey are physical switches, you cross\nthrough them but you never configure them.\n\n503\n00:25:26.830 --> 00:25:28.360\nSo how are you suppose\nto maintain security and\n\n504\n00:25:28.360 --> 00:25:30.050\ndevices that you can't even touch?\n\n505\n00:25:30.050 --> 00:25:31.620\nWell, you don't have to,\nAmazon does, right.\n\n506\n00:25:31.620 --> 00:25:33.300\nThey are the ones that\nare maintaining that.\n\n507\n00:25:33.300 --> 00:25:35.510\nAnd they use a fully\nsoftware defined network.\n\n508\n00:25:35.510 --> 00:25:38.450\nAnd so it's constantly partitioning and\nisolating out customers and\n\n509\n00:25:38.450 --> 00:25:41.470\nmaking sure that your data is isolated and\nsafe.\n\n510\n00:25:41.470 --> 00:25:44.296\nBut still has access to the other\nnetworks that you need to get to.\n\n511\n00:25:44.296 --> 00:25:46.710\nSo that's really being taken care of.\n\n512\n00:25:46.710 --> 00:25:51.340\nThe physical equipment, the edge devices,\nthose are being taken care of.\n\n513\n00:25:51.340 --> 00:25:53.820\nThe routers and firewalls that\nactually connect to the Internet,\n\n514\n00:25:53.820 --> 00:25:57.820\nthey use multiple ISPs to be able to\nconnect to more than one backbone for\n\n515\n00:25:57.820 --> 00:25:59.150\naccess in and out of the network.\n\n516\n00:25:59.150 --> 00:26:02.735\nThey have multiple connections between\navailability zones for redundancy there,\n\n517\n00:26:02.735 --> 00:26:07.955\nso replication should always occur,\nall that is being dealt with by them.\n\n518\n00:26:07.955 --> 00:26:10.715\nBut that doesn't mean that we can\nignore the network entirely, right?\n\n519\n00:26:10.715 --> 00:26:14.315\nBecause no matter how well you secure your\nserver, and even if you encrypt your data\n\n520\n00:26:14.315 --> 00:26:17.315\non the server,\nas soon as you start sending data, or\n\n521\n00:26:17.315 --> 00:26:22.035\nwhen you're receiving data, it's crossing\na network and it may not be secure.\n\n522\n00:26:22.035 --> 00:26:24.485\nSo Amazon gives us a whole collection\nof tools for dealing with that.\n\n523\n00:26:24.485 --> 00:26:30.970\nThey have support for IPsec VPNs, we can\ndo SSL and TLS on practically anything.\n\n524\n00:26:30.970 --> 00:26:33.590\nAll of our API calls can\nbe secured using SSL, so\n\n525\n00:26:33.590 --> 00:26:36.580\nwe know that that's encrypted in transit.\n\n526\n00:26:36.580 --> 00:26:38.360\nWe can use VPN tunnels.\n\n527\n00:26:38.360 --> 00:26:41.020\nIPsec is technically a VPN.\n\n528\n00:26:41.020 --> 00:26:43.940\nBut other VPN tunnel technologies\nyou can make use of those.\n\n529\n00:26:43.940 --> 00:26:47.730\nSo you really have tools at your\ndisposal to protect your data while it's\n\n530\n00:26:47.730 --> 00:26:48.750\ncrossing the network.\n\n531\n00:26:48.750 --> 00:26:52.800\nSo while we know Amazon's doing a great\njob we don't have to trust them entirely.\n\n532\n00:26:52.800 --> 00:26:55.890\nWe can say, well,\neven if they do leak my data\n\n533\n00:26:55.890 --> 00:26:57.880\nI wanna make sure that it's encrypted so\nI don't care, right?\n\n534\n00:26:57.880 --> 00:27:00.400\nAnd now it's no different than crossing\nthe Internet where you're crossing\n\n535\n00:27:00.400 --> 00:27:02.940\na ton of equipment that you have\nno idea where it is anyway,\n\n536\n00:27:02.940 --> 00:27:04.690\nyou can treat Amazon the same way.\n\n537\n00:27:04.690 --> 00:27:05.631\nThey don't get offended.\n\n538\n00:27:05.631 --> 00:27:07.150\n[LAUGH] They're fine with it.\n\n539\n00:27:07.150 --> 00:27:09.690\nGo ahead and secure your data so\nyou can be sure.\n\n540\n00:27:09.690 --> 00:27:10.797\nAnd you might not have a choice,\n\n541\n00:27:10.797 --> 00:27:14.430\nyou might have to if you have a regulatory\ncompliance that you're trying to maintain.\n\n542\n00:27:14.430 --> 00:27:17.970\nYou may have to encrypt your data even\nif you know it's a completely safe and\n\n543\n00:27:17.970 --> 00:27:18.810\nsecure network.\n\n544\n00:27:18.810 --> 00:27:23.100\nSo I usually just do it just make\nit part of your general practices.\n\n545\n00:27:23.100 --> 00:27:25.190\n&gt;&gt; Now Don, how about some of the,\nspeaking with the network,\n\n546\n00:27:25.190 --> 00:27:28.767\nhow about some of the network based\nattacks that we have to worry about,\n\n547\n00:27:28.767 --> 00:27:33.220\njust any network, do we have things like\nthat that are involved with AWS as well?\n\n548\n00:27:33.220 --> 00:27:34.825\n&gt;&gt; Yes and no.\n\n549\n00:27:34.825 --> 00:27:38.245\nSo, the most grievous attacks,\nthe ones that are really visible,\n\n550\n00:27:38.245 --> 00:27:40.640\nAmazon actually protects us from those.\n\n551\n00:27:40.640 --> 00:27:44.720\nSo, they have some basic distributed\ndenial service protection.\n\n552\n00:27:44.720 --> 00:27:48.700\nThey monitor for\nreconnaissance attacks, right?\n\n553\n00:27:48.700 --> 00:27:50.480\nWhen somebody's going\nto attack your server,\n\n554\n00:27:50.480 --> 00:27:51.870\nthe first thing they do is reconnaissance.\n\n555\n00:27:51.870 --> 00:27:53.760\nThey'll do like a ping\nsweep to find your IPs,\n\n556\n00:27:53.760 --> 00:27:56.980\nthey'll do port scans to\nlocate what ports are open.\n\n557\n00:27:56.980 --> 00:27:59.550\nAmazon sees that and blocks it, right?\n\n558\n00:27:59.550 --> 00:28:03.278\nIt's important to remember that they're\nactively doing that because you might\n\n559\n00:28:03.278 --> 00:28:05.430\nbe security scanning\nyour own servers right?\n\n560\n00:28:05.430 --> 00:28:08.896\nMaybe I fire up metasplay or\nsome other program like that and\n\n561\n00:28:08.896 --> 00:28:12.110\nI start scanning some of\nmy instances in Amazon.\n\n562\n00:28:12.110 --> 00:28:14.320\nAnd when I start scanning them,\n\n563\n00:28:14.320 --> 00:28:16.690\nI all of a sudden notice that I\nget all these failed connections.\n\n564\n00:28:16.690 --> 00:28:18.900\nI'm like well all right\nmy stuff is secure.\n\n565\n00:28:18.900 --> 00:28:22.920\nWell it means that Amazon saw you running\nthese scans and stopped you right?\n\n566\n00:28:22.920 --> 00:28:27.420\nSo if you ever want to do a true intrusion\ndetection or like a penetration test on\n\n567\n00:28:27.420 --> 00:28:31.150\nyour servers, you need to contact Amazon\nTech Support first, and let them know.\n\n568\n00:28:31.150 --> 00:28:31.930\nAnd that way they'll make\n\n569\n00:28:31.930 --> 00:28:34.320\nsure you don't get blocked while\nyou're scanning your system.\n\n570\n00:28:34.320 --> 00:28:38.550\nBut if you scan even one other customer,\nthey'll shut you down really fast, right?\n\n571\n00:28:38.550 --> 00:28:41.190\nSo we've got basic protection there,\nbut that\n\n572\n00:28:41.190 --> 00:28:44.080\ndoesn't mean nobody can hack into your\nservers, it doesn't mean you're protected.\n\n573\n00:28:44.080 --> 00:28:48.460\nAnd so there's a whole collection of\nAMIs that are available from Cisco, and\n\n574\n00:28:48.460 --> 00:28:51.860\nJuniper, Checkpoint, Dell, and SonicWall.\n\n575\n00:28:51.860 --> 00:28:55.530\nThey've all got virtual firewalls\nthat you can deploy, and\n\n576\n00:28:55.530 --> 00:28:57.770\nthey can do deep packet inspection.\n\n577\n00:28:57.770 --> 00:28:59.780\nAmazon doesn't do deep packet inspection.\n\n578\n00:28:59.780 --> 00:29:05.110\nIn other words, if I send a packet to your\nApache Server and it's traffic on port 80?\n\n579\n00:29:05.110 --> 00:29:06.630\nAmazon says, all right, it's web traffic.\n\n580\n00:29:06.630 --> 00:29:08.320\nI'm gonna let that through, right?\n\n581\n00:29:08.320 --> 00:29:11.930\nMeanwhile, inside of it,\nit might actually be an attack payload.\n\n582\n00:29:11.930 --> 00:29:13.070\nThey don't look inside of the packet.\n\n583\n00:29:13.070 --> 00:29:14.750\nThey don't look into your data, right?\n\n584\n00:29:14.750 --> 00:29:16.100\nThere's privacy issues there.\n\n585\n00:29:16.100 --> 00:29:18.370\nBut it's also just the amount\nof effort it would take.\n\n586\n00:29:18.370 --> 00:29:19.550\nSo, it's up to us to deal with that.\n\n587\n00:29:19.550 --> 00:29:23.790\nSo, we may still need to go that extra\nstep and say, yeah Amazon is protecting me\n\n588\n00:29:23.790 --> 00:29:28.470\nfrom some one that most vulnerable attack\nbut I'm gonna put my own protections in\n\n589\n00:29:28.470 --> 00:29:31.700\nalso and I'm gonna put a web\napplication firewall or whatever.\n\n590\n00:29:31.700 --> 00:29:33.810\nI'll get it to run\nmulti-home DNS instance and\n\n591\n00:29:33.810 --> 00:29:38.290\nI'll flow all my traffic in my DNS\ninstance that is what most of us do.\n\n592\n00:29:38.290 --> 00:29:40.690\n&gt;&gt; Well that's a lot of great\ninformation on security, Don.\n\n593\n00:29:40.690 --> 00:29:43.070\nNow, it does look like we're coming\nto the end of another episode and\n\n594\n00:29:43.070 --> 00:29:45.680\nI know we've got a lot more\non security AWS to go.\n\n595\n00:29:45.680 --> 00:29:46.760\nBut before we wrap this one up,\n\n596\n00:29:46.760 --> 00:29:49.850\ndo you got any final words on\nwhat we've talked about so far.\n\n597\n00:29:49.850 --> 00:29:54.800\n&gt;&gt; One little thing that it might pop\nup in the exam is that in an instance,\n\n598\n00:29:54.800 --> 00:29:57.580\nyou might notice that on network\ninterfaces, you can turn promiscuous mode.\n\n599\n00:29:57.580 --> 00:29:59.100\nSo if you wanna run\nlike a network sniffer,\n\n600\n00:29:59.100 --> 00:30:02.290\nyou can put it in promiscuous mode and\nstart capturing packets.\n\n601\n00:30:02.290 --> 00:30:06.440\nIt does work, you can turn it on but\nAmazon doesn't actually allow it.\n\n602\n00:30:06.440 --> 00:30:07.780\nSo, even in promiscuous mode,\n\n603\n00:30:07.780 --> 00:30:11.010\nyour instance will only capture\ntraffic destined for that instant.\n\n604\n00:30:11.010 --> 00:30:12.930\nYou can't capture other customers traffic.\n\n605\n00:30:12.930 --> 00:30:14.500\nIt won't let you do that.\n\n606\n00:30:14.500 --> 00:30:16.300\nIt's got the Xen hypervisor\nunder the hood, and\n\n607\n00:30:16.300 --> 00:30:17.980\nit's isolating all the traffic out.\n\n608\n00:30:17.980 --> 00:30:20.770\nSo, while it might look like you\ncould capture someone else's data,\n\n609\n00:30:20.770 --> 00:30:21.990\nyou actually can't.\n\n610\n00:30:21.990 --> 00:30:26.348\nIt's still a good idea to encrypt\nanyway but that protection is there.\n\n611\n00:30:26.348 --> 00:30:29.013\n&gt;&gt; Don as always we appreciate you\nbeing here in the studios with us and\n\n612\n00:30:29.013 --> 00:30:30.640\nwe appreciate you the viewer watching.\n\n613\n00:30:30.640 --> 00:30:33.730\nStick around cuz we got more\nsecurity on AWS coming up.\n\n614\n00:30:33.730 --> 00:30:36.580\nSigning off for\nIT Pro TV I've been your host Wes Bryran.\n\n615\n00:30:36.580 --> 00:30:37.294\n&gt;&gt; And I'm Don Pezet.\n\n616\n00:30:37.294 --> 00:30:38.488\n&gt;&gt; And we'll see you next time.\n\n617\n00:30:38.488 --> 00:30:45.772\n[MUSIC]\n\n618\n00:30:45.772 --> 00:30:48.756\nThank you for watching, ITProTV.\n\n",
          "vimeoId": "209557009"
        },
        {
          "description": "In this episode Wes and Don dive into security inside of AWS. They will discuss account security, concepts like root account, password character length, password policies and multi-factor authentication. They will look at access keys, key pairs and X.509 certificates. Finally, they will explore the auditing services provided by AWS CloudTrail.",
          "length": "1574",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-2-account_secuirty-031717-PGM.00_25_57_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-2-account_secuirty-031717-PGM.00_25_57_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-2-account_secuirty-031717-PGM.00_25_57_19.Still001-sm.jpg",
          "title": "Account Security",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.180\nWelcome to ITProTV.\n\n2\n00:00:01.180 --> 00:00:03.455\nI'm your host, Don Pezet.\n\n3\n00:00:03.455 --> 00:00:08.285\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.285 --> 00:00:12.180\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.180 --> 00:00:13.930\n&gt;&gt; Hello everyone, and welcome\n&gt;&gt; To ITProTV,\n\n6\n00:00:13.930 --> 00:00:17.280\nI'm your show host Wes Bryan, and\nwe got a great show for you today.\n\n7\n00:00:17.280 --> 00:00:19.080\nWe are continuing through our series in\n\n8\n00:00:19.080 --> 00:00:22.320\nthe AWS Certified Solutions\nArchitect Associate.\n\n9\n00:00:22.320 --> 00:00:25.390\nAnd joining us back in the studios today\nis none other than Mr Don Pizzette,\n\n10\n00:00:25.390 --> 00:00:26.620\nDon how you doing, sir?\n\n11\n00:00:26.620 --> 00:00:27.380\nI'm doing just swell.\n\n12\n00:00:27.380 --> 00:00:29.440\nWes, ready to dive back into security.\n\n13\n00:00:29.440 --> 00:00:33.760\nWe've been talking a little bit about the\nsecurity that goes on at Amazon AWS, and\n\n14\n00:00:33.760 --> 00:00:36.040\nthe regions, and the ability zones and\n\n15\n00:00:36.040 --> 00:00:39.310\nall that good stuff, but\nI want to shift gears a little bit for\n\n16\n00:00:39.310 --> 00:00:42.810\nthis episode, because we need to\ntalk briefly about account security.\n\n17\n00:00:42.810 --> 00:00:46.080\nAnd I know way back in episode one or\n\n18\n00:00:46.080 --> 00:00:49.840\ntwo of this year, we talked a bit about\naccount security, but we need to revisit.\n\n19\n00:00:49.840 --> 00:00:54.110\nBecause you've gotta understand the\ndifferent methods of authenticating users,\n\n20\n00:00:54.110 --> 00:00:57.160\nand determine which one is\nthe right one for which scenario.\n\n21\n00:00:57.160 --> 00:00:59.050\nSo, we're gonna take a look at each\none of those different methods and\n\n22\n00:00:59.050 --> 00:01:02.370\ntalk just a little bit about them to\nmake sure we've got a good handle on\n\n23\n00:01:02.370 --> 00:01:05.590\nhow we can authenticate\npeople inside of our new\n\n24\n00:01:05.590 --> 00:01:07.520\nshiny cloud solution\nthat we deploy out there.\n\n25\n00:01:07.520 --> 00:01:12.410\nAll right, so, let's just get started\nwith the 600 pound gorilla in\n\n26\n00:01:12.410 --> 00:01:16.530\nthe room which is IAM,\nidentity and access Management.\n\n27\n00:01:16.530 --> 00:01:20.940\nIAM is a critical piece of\ndeploying anything in AWS,\n\n28\n00:01:20.940 --> 00:01:24.820\nbecause it's really gonna be the main tool\nwhere you control who has access to what\n\n29\n00:01:24.820 --> 00:01:26.960\nresources inside of your Cloud deployment.\n\n30\n00:01:26.960 --> 00:01:28.360\nSo, when we get in there,\n\n31\n00:01:28.360 --> 00:01:31.550\nyou'll see a couple of things that really\nhelp to hammer home what you need to do.\n\n32\n00:01:31.550 --> 00:01:33.050\nLet me just get in there myself.\n\n33\n00:01:33.050 --> 00:01:33.889\nI'm in my console.\n\n34\n00:01:34.890 --> 00:01:38.020\nAnd I'm gonna go down here to security and\nIAM.\n\n35\n00:01:38.020 --> 00:01:42.240\nAnd when I jump in IAM,\nwhat I'm gonna see is right off the bat,\n\n36\n00:01:42.240 --> 00:01:46.240\nI get my IAM resources, and\nI'm gonna see users, groups, and roles and\n\n37\n00:01:46.240 --> 00:01:48.165\nthat's what we talked about\nin that other episode.\n\n38\n00:01:48.165 --> 00:01:50.725\nEpisode.\nI mentioned how users are designed to\n\n39\n00:01:50.725 --> 00:01:54.755\nidentify an individual person\nwho's a part of your account.\n\n40\n00:01:54.755 --> 00:01:58.185\nAnd then you have groups which\nare used to collect those people and\n\n41\n00:01:58.185 --> 00:02:01.025\nassign permissions and\nmore than one person at the same time.\n\n42\n00:02:01.025 --> 00:02:04.305\nAnd then roles are very similar to groups.\n\n43\n00:02:04.305 --> 00:02:09.905\nExcept they're designed to point to\npeople in other accounts or applications.\n\n44\n00:02:09.905 --> 00:02:12.950\nYou can do application\nauthentication using a role also.\n\n45\n00:02:12.950 --> 00:02:15.360\nAn application you don't necessarily want\nto have a user account that has to be\n\n46\n00:02:15.360 --> 00:02:15.870\nhard coded.\n\n47\n00:02:15.870 --> 00:02:19.370\nIt can use an application rule,\ninstead, that provides a better and\n\n48\n00:02:19.370 --> 00:02:20.810\nmore secure connection.\n\n49\n00:02:20.810 --> 00:02:22.960\nSo those are some of the things\nthat we talked about before.\n\n50\n00:02:22.960 --> 00:02:26.470\nBut there's a lot more going on\non this screen that is important.\n\n51\n00:02:26.470 --> 00:02:27.540\nRight?\nLike, if you look down here,\n\n52\n00:02:27.540 --> 00:02:30.190\nyou'll see where it's telling me\nthings that I should have done.\n\n53\n00:02:30.190 --> 00:02:32.550\nThere's five tasks that I should\nhave done on this account.\n\n54\n00:02:32.550 --> 00:02:34.130\nThis is a demo account for me.\n\n55\n00:02:34.130 --> 00:02:37.060\nIf it was a production account\nI'd want five green check marks,\n\n56\n00:02:37.060 --> 00:02:38.610\nor five green boxes here.\n\n57\n00:02:38.610 --> 00:02:40.760\nBut instead I've gotta a couple of\nyellow cuz it's warning me about some of\n\n58\n00:02:40.760 --> 00:02:42.040\nthe stuff that I haven't done.\n\n59\n00:02:42.040 --> 00:02:44.680\nFirst off, root access keys.\n\n60\n00:02:44.680 --> 00:02:48.620\nWhen you create a user account a user\naccount actually has two different ways of\n\n61\n00:02:48.620 --> 00:02:49.440\nauthenticating.\n\n62\n00:02:49.440 --> 00:02:50.570\nThey can have a username and\n\n63\n00:02:50.570 --> 00:02:53.609\na password, your root account\nhas a username and a password.\n\n64\n00:02:54.610 --> 00:02:59.640\nOr sometimes and,\nthey can have access keys.\n\n65\n00:02:59.640 --> 00:03:00.630\nAnd what an access key is,\n\n66\n00:03:00.630 --> 00:03:05.040\nis where you have an access key this kind\nof random string of letters and numbers.\n\n67\n00:03:05.040 --> 00:03:08.270\nAnd then you have a secret\nkey that goes along with it.\n\n68\n00:03:08.270 --> 00:03:10.810\nAnd that can be used to authenticate you.\n\n69\n00:03:10.810 --> 00:03:13.320\nNot in the web UI like I'm in right now,\nbut in the API.\n\n70\n00:03:13.320 --> 00:03:18.020\nSo if you're doing API level access calls\nwhich is what most of us do Then that's\n\n71\n00:03:18.020 --> 00:03:21.440\nwhat you're gonna need so those keys\nare really what we use most of the time.\n\n72\n00:03:21.440 --> 00:03:24.680\nAnd so I've deleted my root access keys.\n\n73\n00:03:24.680 --> 00:03:25.420\nWhy would I do that?\n\n74\n00:03:25.420 --> 00:03:26.600\nThat's crazy talk.\n\n75\n00:03:26.600 --> 00:03:29.760\nWell, you shouldn't be doing\nanything as the root account.\n\n76\n00:03:29.760 --> 00:03:33.880\nEvery time you access a resource\ninside of AWS You should be\n\n77\n00:03:33.880 --> 00:03:38.140\nusing a purpose driven account\nthat has limited permissions.\n\n78\n00:03:38.140 --> 00:03:41.250\nPermissions that just pertain\nto the job that it needs to do.\n\n79\n00:03:41.250 --> 00:03:43.730\nI need to read some data\nout of an S3 bucket.\n\n80\n00:03:43.730 --> 00:03:45.190\nCould I use the root key to do that?\n\n81\n00:03:45.190 --> 00:03:46.090\nAbsolutely.\n\n82\n00:03:46.090 --> 00:03:47.620\nThe root key can do everything.\n\n83\n00:03:47.620 --> 00:03:49.780\nThe root key can delete that bucket.\n\n84\n00:03:49.780 --> 00:03:51.160\nBut I just need to read.\n\n85\n00:03:51.160 --> 00:03:53.380\nSo, I should create another account.\n\n86\n00:03:53.380 --> 00:03:57.470\nThat just has the ability to read from\nthe bucket and use that key, right.\n\n87\n00:03:57.470 --> 00:04:00.480\nSo the best practice is to\ndelete the root access key so\n\n88\n00:04:00.480 --> 00:04:03.710\nthe root access key can't\neven be used on the API.\n\n89\n00:04:03.710 --> 00:04:05.250\nIt'll always be other keys\nthat we've generated.\n\n90\n00:04:06.440 --> 00:04:08.600\nActivating MFA, right.\n\n91\n00:04:08.600 --> 00:04:10.900\nMFA is multi-factor authentication,\n\n92\n00:04:10.900 --> 00:04:15.770\nthat's another one where We need to make\nsure that we're securing our accounts.\n\n93\n00:04:15.770 --> 00:04:21.190\nNow, MFA says basically that\na password isn't enough,\n\n94\n00:04:21.190 --> 00:04:23.560\nso we need other factors\nof authentication.\n\n95\n00:04:23.560 --> 00:04:24.800\nWell why isn't a password enough?\n\n96\n00:04:24.800 --> 00:04:28.860\nWell first off, a password, if I just\ncreate a user account, my account here and\n\n97\n00:04:28.860 --> 00:04:32.700\nassign a password to it, it's got\na maximum of 128 characters all right?\n\n98\n00:04:32.700 --> 00:04:34.900\nSo, it can't be more than 128 characters.\n\n99\n00:04:34.900 --> 00:04:36.430\nSo, that's a limit, now.\n\n100\n00:04:36.430 --> 00:04:40.270\nRaise your hand if your password\nis over 128 characters.Mine isn't.\n\n101\n00:04:40.270 --> 00:04:41.727\nI couldn't remember it.\n\n102\n00:04:41.727 --> 00:04:43.624\nBut I could go up to that far.\n\n103\n00:04:43.624 --> 00:04:48.120\nWell, the problem with a password is the\nmore complex you make it the harder it is\n\n104\n00:04:48.120 --> 00:04:51.210\nto remember and the more likely you are to\nwrite it down on a piece of paper and\n\n105\n00:04:51.210 --> 00:04:52.618\nstick it on your monitor,right.\n\n106\n00:04:52.618 --> 00:04:55.079\nSo that's kind of a problem\nthat we have with passwords.\n\n107\n00:04:55.079 --> 00:04:57.610\nThe other thing is people\ncan run key loggers.\n\n108\n00:04:57.610 --> 00:05:01.540\nThey can run a key logger and capture you\ntyping in the password, and I don't know\n\n109\n00:05:01.540 --> 00:05:04.160\nwhat your password, so, that's\nanother problem that we have with it.\n\n110\n00:05:04.160 --> 00:05:07.850\nNow, that a few ways we can kind\nof work around that to help right,\n\n111\n00:05:07.850 --> 00:05:09.250\npassword policies.\n\n112\n00:05:09.250 --> 00:05:13.080\nIf we go back in the screen here one\nof the other warnings is way down\n\n113\n00:05:13.080 --> 00:05:14.050\nhere the bottom.\n\n114\n00:05:14.050 --> 00:05:15.790\nApply an IAM password policy.\n\n115\n00:05:15.790 --> 00:05:18.840\nI haven't done that yet, so\nI've got a little warning.\n\n116\n00:05:18.840 --> 00:05:23.410\nIf I click on that, it tells me where\nI can go to manage my password policy.\n\n117\n00:05:23.410 --> 00:05:24.280\nAnd right here.\nI could\n\n118\n00:05:24.280 --> 00:05:25.420\nhave just clicked on account settings.\n\n119\n00:05:25.420 --> 00:05:26.730\nI guess it would have been faster.\n\n120\n00:05:26.730 --> 00:05:28.990\nBut we can see my password\npolicy right here.\n\n121\n00:05:28.990 --> 00:05:32.860\nYou can define a password policy\nthat sets a minimum password.\n\n122\n00:05:32.860 --> 00:05:35.340\nI know it can be 128 characters maximum,\nbut\n\n123\n00:05:35.340 --> 00:05:38.730\nthe default is it can be\nas few as six characters.\n\n124\n00:05:38.730 --> 00:05:40.800\nSomebody could type in\nsomething really short.\n\n125\n00:05:40.800 --> 00:05:44.550\nAnd then I dictate the complexity\nrequirements for it, and\n\n126\n00:05:44.550 --> 00:05:49.560\nif you look The default policy here\nis not very impressive is it, right?\n\n127\n00:05:49.560 --> 00:05:50.680\nIt's pretty weak.\n\n128\n00:05:50.680 --> 00:05:53.530\nAnd that's because Amazon is leaving\nup to you to create the security\n\n129\n00:05:53.530 --> 00:05:54.180\npolicy you needed.\n\n130\n00:05:54.180 --> 00:05:56.590\nIn reality, they don't even want\nyou to use these passwords at all.\n\n131\n00:05:56.590 --> 00:05:59.420\nRight, so it doesn't matter if they're\nweak if you're not gonna be even using.\n\n132\n00:05:59.420 --> 00:06:01.010\nYou're gonna be using access keys instead.\n\n133\n00:06:01.010 --> 00:06:02.440\nThe access keys are really strong.\n\n134\n00:06:03.550 --> 00:06:06.650\nBut the key thing I wanted to\nhighlight here is that we could do\n\n135\n00:06:06.650 --> 00:06:08.180\npassword expiration.\n\n136\n00:06:08.180 --> 00:06:12.100\nWith password expiration we can require\npeople to change their password\n\n137\n00:06:12.100 --> 00:06:14.250\nat a certain interval, like every 30 days.\n\n138\n00:06:14.250 --> 00:06:18.380\nBy doing that if somebody were to get my\npassword they only got a limited time to\n\n139\n00:06:18.380 --> 00:06:21.010\nbe able to use it before I reset it Right?\n\n140\n00:06:21.010 --> 00:06:23.810\nDouble edged sword on this one.\n\n141\n00:06:23.810 --> 00:06:26.140\nThe more frequently you make\nsomebody change the password,\n\n142\n00:06:26.140 --> 00:06:27.560\nthe more secure it is.\n\n143\n00:06:27.560 --> 00:06:29.110\nBut, the more frequently\nthey have to change it,\n\n144\n00:06:29.110 --> 00:06:33.500\nthe more likely they are to write it down\nand stick it on their monitor, right?\n\n145\n00:06:33.500 --> 00:06:37.310\nSo, this isn't really an effective\nproblem, or effective solution.\n\n146\n00:06:37.310 --> 00:06:40.080\nIt's one of those,\nthat on paper sounds great.\n\n147\n00:06:40.080 --> 00:06:44.970\nBut in practice you just run into it too\nmuch where the end users are not able\n\n148\n00:06:44.970 --> 00:06:46.900\nto uphold that policy.\n\n149\n00:06:46.900 --> 00:06:51.390\n&gt;&gt; Is that Achilles heel there where\nconvenience starts to trump security,\n\n150\n00:06:51.390 --> 00:06:55.140\nsecurity starts to trump convenience,\nor vice versa?\n\n151\n00:06:55.140 --> 00:06:57.190\n&gt;&gt; Yeah, and\nyou could try to find a balance point, but\n\n152\n00:06:57.190 --> 00:07:00.000\nsometimes that balance point\n&gt;&gt; Point is not enough.\n\n153\n00:07:00.000 --> 00:07:03.390\nAnd with security,\nit's not like an optional thing anymore.\n\n154\n00:07:03.390 --> 00:07:05.080\nWe've gotta secure our accounts.\n\n155\n00:07:05.080 --> 00:07:07.070\nSo, we're normally gonna\ngo a step further and\n\n156\n00:07:07.070 --> 00:07:09.460\nimplement a technology that\nhelps with that, and that's MFA.\n\n157\n00:07:09.460 --> 00:07:14.050\nThe Multi Factor Authentication, and\nthat's warning me about here on my\n\n158\n00:07:14.050 --> 00:07:17.460\ndashboard is that I don't\nhave MFA on my root account.\n\n159\n00:07:17.460 --> 00:07:21.820\nMFA can be turned on or\noff on a per credential basis.\n\n160\n00:07:21.820 --> 00:07:24.810\nSo if I have ten accounts\n&gt;&gt; I might have it on on some and\n\n161\n00:07:24.810 --> 00:07:25.900\noff on others.\n\n162\n00:07:25.900 --> 00:07:29.850\nIf I have a really low risk account, an\naccount that only has read access to data\n\n163\n00:07:29.850 --> 00:07:32.800\nthat's public,\nI might not worry about MFA.\n\n164\n00:07:32.800 --> 00:07:35.830\nBut typically, we want to enforce that.\n\n165\n00:07:35.830 --> 00:07:39.900\nThis is kind of neat because on\nthe back end, Amazon employees.\n\n166\n00:07:39.900 --> 00:07:42.530\nAny time an Amazon employee works\nlike on a physical host for\n\n167\n00:07:42.530 --> 00:07:45.270\nexample Amazon requires them to have MFA.\n\n168\n00:07:45.270 --> 00:07:47.322\nThey have to be using it as an employee.\n\n169\n00:07:47.322 --> 00:07:50.203\nAnd their access is only granted while\nthey're in the maintenance window, and\n\n170\n00:07:50.203 --> 00:07:52.655\nthen their access is taken away\noutside of the maintenance window.\n\n171\n00:07:52.655 --> 00:07:56.282\nSo their employees don't even have\naccess to most of the hosts, normally.\n\n172\n00:07:56.282 --> 00:07:59.130\nAnd then even when they do have\naccess they have to use multi factor.\n\n173\n00:07:59.130 --> 00:08:01.370\nNow what is multi factor?\n\n174\n00:08:01.370 --> 00:08:03.890\nMulti factor means you still have\na user name and password, right,\n\n175\n00:08:03.890 --> 00:08:06.150\nthat's your first factor\nof authentication.\n\n176\n00:08:06.150 --> 00:08:08.260\nAnd then you have something else,\n\n177\n00:08:08.260 --> 00:08:11.500\na second something that validates\nyou are who you say you are.\n\n178\n00:08:11.500 --> 00:08:14.280\nAnd when we set up MFA inside of AWS,\n\n179\n00:08:14.280 --> 00:08:18.000\nthe way that's done is by setting up\na mobile authenticator device, right.\n\n180\n00:08:18.000 --> 00:08:22.720\nSo if l click on that,\nl wanna MFA, so if I go to MFA and\n\n181\n00:08:22.720 --> 00:08:28.290\nI go to manage that, it'll have the option\nto turn on a virtual MFA device or\n\n182\n00:08:28.290 --> 00:08:31.520\na hardware MFA device,\nthere's two different types, all right.\n\n183\n00:08:31.520 --> 00:08:33.230\nThe virtual one is what most of us do.\n\n184\n00:08:33.230 --> 00:08:38.310\nBecause you can take any standard\ncellphone and turn it into an MFA and\n\n185\n00:08:38.310 --> 00:08:40.370\nI showed this in an earlier episode also,\nright?\n\n186\n00:08:40.370 --> 00:08:44.870\nSo when somebody goes to log in,\nall they have to do is fire up their\n\n187\n00:08:44.870 --> 00:08:47.510\napp which I'm trying to do right\nnow in the background here.\n\n188\n00:08:47.510 --> 00:08:50.750\nSo you set the fire up their app and\nonce they've got it up and\n\n189\n00:08:50.750 --> 00:08:54.530\ngoing, it's displaying a code.\n\n190\n00:08:54.530 --> 00:09:00.030\nAnd that code is used the same way\na password is used and if we watch it.\n\n191\n00:09:00.030 --> 00:09:01.590\nCan we make this a little bigger?\n\n192\n00:09:01.590 --> 00:09:04.150\nIf we watch you're going\nto see that code change.\n\n193\n00:09:04.150 --> 00:09:08.810\nNow if I set a password policy and\nI make it change once a week.\n\n194\n00:09:08.810 --> 00:09:11.070\nRight, if I require everyone to\nchange their passwords once a week,\n\n195\n00:09:12.140 --> 00:09:13.550\nyou're gonna have some angry users.\n\n196\n00:09:13.550 --> 00:09:15.070\nPeople hate changing their password and\n\n197\n00:09:15.070 --> 00:09:17.500\nonce a week is really gonna\nmake them angry right?\n\n198\n00:09:17.500 --> 00:09:20.710\nBut what if I said I wanted them to\nchange the password every 60 seconds?\n\n199\n00:09:20.710 --> 00:09:22.600\nYou'd have a revolt right?\n\n200\n00:09:22.600 --> 00:09:23.570\nPeople wouldn't be able to work,\n\n201\n00:09:23.570 --> 00:09:25.880\nthey would just constantly\nbe changing their passwords.\n\n202\n00:09:25.880 --> 00:09:28.970\nBut with a code like this as the time\nticks down you're gonna notice the code is\n\n203\n00:09:28.970 --> 00:09:30.070\ngonna change.\n\n204\n00:09:30.070 --> 00:09:32.020\nIn every 30 seconds or every 60 seconds,\n\n205\n00:09:32.020 --> 00:09:36.110\ndepending on how I set it up, that code\nis gonna change, my code just changed.\n\n206\n00:09:36.110 --> 00:09:42.420\nAnd, so that's updating and now I've got\nthis new code, and they're one time code.\n\n207\n00:09:42.420 --> 00:09:48.280\nSo when I use this code it's going to\nget used and it won't function again.\n\n208\n00:09:48.280 --> 00:09:50.510\nSo now I've got a really high\nlevel of security on my account.\n\n209\n00:09:50.510 --> 00:09:52.980\nSo if somebody runs a key\nlogger that they're not able\n\n210\n00:09:52.980 --> 00:09:54.910\nto use my credentials to get in.\n\n211\n00:09:54.910 --> 00:09:58.510\n&gt;&gt; Don, do they have anything maybe\nakin to like an RSID secure id?\n\n212\n00:09:58.510 --> 00:09:59.930\nCan you implement stuff like that as well?\n\n213\n00:09:59.930 --> 00:10:03.030\n&gt;&gt; Yeah, that would be the hardware side\nif I wanted to go with a hardware token.\n\n214\n00:10:03.030 --> 00:10:06.230\nThere's a physical hardware key chains\nthat you can get that actually have\n\n215\n00:10:06.230 --> 00:10:09.630\nthe little code display right on\nthe screen, you can go that route too.\n\n216\n00:10:09.630 --> 00:10:13.633\nThe cellphone approach is nice because\nthese days who's gonna leave their home\n\n217\n00:10:13.633 --> 00:10:17.109\nwithout their cellphone, right,\npeople don't think about that.\n\n218\n00:10:17.109 --> 00:10:18.920\nBut you might have a secure facility,\n\n219\n00:10:18.920 --> 00:10:21.418\na secure facility that\ndoesn't allow cellphones.\n\n220\n00:10:21.418 --> 00:10:26.379\nNow the virtual MFA devices don't work so\nwell anymore, so having a hardware\n\n221\n00:10:26.379 --> 00:10:31.560\none is a good option I actually use both,\nI have a virtual and a hardware one.\n\n222\n00:10:31.560 --> 00:10:35.280\nBut you run a risk with these things\nbecause the more of them you have,\n\n223\n00:10:35.280 --> 00:10:38.010\nthe more likely you are to lose one,\nwhich means, now,\n\n224\n00:10:38.010 --> 00:10:39.910\nyou've kind of compromised\nyour identity a bit.\n\n225\n00:10:39.910 --> 00:10:42.620\nSo we have that option\nright inside of AWS.\n\n226\n00:10:42.620 --> 00:10:45.700\nWe really need to get that configured,\nthat is an important thing.\n\n227\n00:10:45.700 --> 00:10:49.330\nBut, everything that I've talked about\nthere is really authenticating users.\n\n228\n00:10:49.330 --> 00:10:51.430\nAnd normally,\nit's not users that we're worried about,\n\n229\n00:10:51.430 --> 00:10:53.720\nit's our applications that\nwe're having to authenticate.\n\n230\n00:10:53.720 --> 00:10:56.580\nAnd for them, they're really\ngoing to be using access keys.\n\n231\n00:10:56.580 --> 00:11:00.260\nAnd the access keys are how we\nauthenticate them to get into the system.\n\n232\n00:11:00.260 --> 00:11:03.945\nSo when you define an application role,\n\n233\n00:11:03.945 --> 00:11:07.620\nyou'll generate those keys and\nthose keys can be cycled out.\n\n234\n00:11:07.620 --> 00:11:09.650\nYou can add keys and remove keys and\n\n235\n00:11:09.650 --> 00:11:12.220\nI'm pretty sure I talked about\nthat in an earlier episode also.\n\n236\n00:11:12.220 --> 00:11:17.060\nBut basically the keys are really long,\nthey're really complex and\n\n237\n00:11:17.060 --> 00:11:20.860\nwe can rotate them over time to\nmake sure that they stay secure.\n\n238\n00:11:20.860 --> 00:11:22.290\nThey're complex enough and\n\n239\n00:11:22.290 --> 00:11:25.730\nthe hashing algorithms are complex\nenough that it becomes computationally\n\n240\n00:11:25.730 --> 00:11:29.330\ninfeasible that they can be guessed,\nwhich is really important.\n\n241\n00:11:29.330 --> 00:11:32.730\nBut things change, year after year,\ntechnology's getting more and\n\n242\n00:11:32.730 --> 00:11:33.590\nmore advanced.\n\n243\n00:11:33.590 --> 00:11:34.830\nAnd so\nwe've got to stay on top of that and\n\n244\n00:11:34.830 --> 00:11:38.670\nmake sure that we're using the strongest\nauthentication that we can.\n\n245\n00:11:39.900 --> 00:11:43.491\nAll right, there is another type of\nauthentication that we don't see here.\n\n246\n00:11:43.491 --> 00:11:46.202\nWhen we look here,\nwe see all these credentials and roles and\n\n247\n00:11:46.202 --> 00:11:47.224\npolicies, and so on.\n\n248\n00:11:47.224 --> 00:11:50.924\nBut there is another one,\nwhich is certificate based, and\n\n249\n00:11:50.924 --> 00:11:55.966\nif I go down here to encryption keys,\nI'll see key management service, right?\n\n250\n00:11:55.966 --> 00:11:58.828\nCertificates are another way\nof authenticating people, and\n\n251\n00:11:58.828 --> 00:12:02.569\nthey can be used for encryption, which\nis what they're talking about here, but\n\n252\n00:12:02.569 --> 00:12:04.562\nthey can also be used for authentication.\n\n253\n00:12:04.562 --> 00:12:06.550\nThat when somebody comes to a website,\n\n254\n00:12:06.550 --> 00:12:10.420\nwe validate that server is who they say\nthey are based on their certificate.\n\n255\n00:12:10.420 --> 00:12:12.550\nRight I'm on Amazon's website and\n\n256\n00:12:12.550 --> 00:12:16.920\nI can see I got a little green lock\nup here that tells I'm using SSL.\n\n257\n00:12:16.920 --> 00:12:21.940\nAnd when I come in and I view that\ncertificate, and I take a look at it.\n\n258\n00:12:21.940 --> 00:12:24.340\nIf I can view it, here.\n\n259\n00:12:24.340 --> 00:12:29.270\nI can see that the server is\nsaying that it's Amazon and that\n\n260\n00:12:29.270 --> 00:12:33.870\nsemantic that was on the screen there a\nsecond ago, semantic verified that for me.\n\n261\n00:12:33.870 --> 00:12:37.240\nThey verified it, they made sure\nthat this is actually Amazon.\n\n262\n00:12:37.240 --> 00:12:41.780\nSo as long as I trust Semantic then\nI can trust that this is Amazon.\n\n263\n00:12:41.780 --> 00:12:46.160\nI may not trust Semantic that's entirely\nup to you but we get this validation.\n\n264\n00:12:46.160 --> 00:12:48.200\nSo I know they are who they say they are.\n\n265\n00:12:48.200 --> 00:12:50.240\nWell, we can do the same\nthing with our users.\n\n266\n00:12:50.240 --> 00:12:53.620\nWe can issue our users certificates and\nwe can use that to validate them.\n\n267\n00:12:53.620 --> 00:12:56.410\nAnd in fact, if you've ever\nhardened a Linux server in EC2,\n\n268\n00:12:56.410 --> 00:13:00.360\nwhich we're going to talk about here in\na few episodes, you can use certificates\n\n269\n00:13:00.360 --> 00:13:02.850\nthere and it's far better than\nusing a username and password.\n\n270\n00:13:02.850 --> 00:13:04.880\nSo, that's another option\nthat we have available to us.\n\n271\n00:13:04.880 --> 00:13:08.852\n&gt;&gt; Don, you mentioned with access keys\nthat we have the hashing algorithms a bit\n\n272\n00:13:08.852 --> 00:13:11.850\nwise are pretty lengthy,\nso they're strong.\n\n273\n00:13:11.850 --> 00:13:13.970\nWhat are we seeing as far as the keys?\n\n274\n00:13:13.970 --> 00:13:16.730\nWhat kind of bit length can\nwe see with those keys?\n\n275\n00:13:16.730 --> 00:13:18.330\n&gt;&gt; It really depends on\nhow we're using them.\n\n276\n00:13:18.330 --> 00:13:21.540\nIf you're using them with SHS,\nthe example I gave, they're 2048 bit,\n\n277\n00:13:21.540 --> 00:13:23.960\nthey're pretty strong, right?\n\n278\n00:13:23.960 --> 00:13:25.790\nAnd that's what we typically use.\n\n279\n00:13:25.790 --> 00:13:30.030\nSHS version 2 uses 2048\nbit keys SSH version 1,\n\n280\n00:13:30.030 --> 00:13:31.140\nyou really shouldn't use anymore.\n\n281\n00:13:31.140 --> 00:13:33.050\nIt can use as low as,\n\n282\n00:13:33.050 --> 00:13:38.340\nI believe, 768 bit which is\ncomputational feasible to be broken.\n\n283\n00:13:38.340 --> 00:13:41.660\nI'm not sure if anybody's actually broken\nit yet, but it's one of those where as\n\n284\n00:13:41.660 --> 00:13:44.230\nsoon as it becomes feasible,\nyou need to have moved away from it.\n\n285\n00:13:44.230 --> 00:13:48.220\nYou need to move away from it before\nsomebody compromises it instead of being\n\n286\n00:13:48.220 --> 00:13:51.250\nreactive and saying, well, somebody\nbroke into that, let me move away.\n\n287\n00:13:51.250 --> 00:13:52.680\nThat's too late, right?\n\n288\n00:13:52.680 --> 00:13:54.570\nSo, any time something becomes feasible.\n\n289\n00:13:54.570 --> 00:13:58.380\nThat's the big right now with SHA-1,\nright, the secure hashing algorithm one.\n\n290\n00:13:59.380 --> 00:14:04.400\nIt has now been demonstrated,\none time, that somebody was able to\n\n291\n00:14:04.400 --> 00:14:09.020\ngenerate two documents that were different\ndocuments but resulted in the same hash.\n\n292\n00:14:09.020 --> 00:14:12.550\nAnd while it took a lot, it took,\n\n293\n00:14:12.550 --> 00:14:16.940\nI think it was like a 1,000 computers\nover a long time, 10 years.\n\n294\n00:14:16.940 --> 00:14:18.110\n&gt;&gt; I wanna say it was a decade, yeah.\n\n295\n00:14:18.110 --> 00:14:20.920\n&gt;&gt; Yeah it was over a long time\nin order to compromise that.\n\n296\n00:14:20.920 --> 00:14:24.170\nWe know that's not realistic for\nmost people but it's feasible.\n\n297\n00:14:24.170 --> 00:14:27.930\nSo in a few years, as CPUs get faster,\nand computers get faster and\n\n298\n00:14:27.930 --> 00:14:28.830\nit becomes easier.\n\n299\n00:14:28.830 --> 00:14:31.260\nSo you move away from it now,\nbefore it's a problem, right?\n\n300\n00:14:31.260 --> 00:14:35.440\nThat's how we always need to look at this\nstuff, move away from it before hand.\n\n301\n00:14:35.440 --> 00:14:38.720\nAll right, now the certificates\nthat we generate when they're\n\n302\n00:14:38.720 --> 00:14:43.652\npublic key private key pairs like we used\nfor SSL, those are x.509 certificates.\n\n303\n00:14:43.652 --> 00:14:48.030\nAnd x.509 can be used for\nencryption like I'm seeing on\n\n304\n00:14:48.030 --> 00:14:51.150\nthe IM screen that I was on a moment ago,\nor actually right here.\n\n305\n00:14:51.150 --> 00:14:53.680\nSo these would be used for encryption.\n\n306\n00:14:53.680 --> 00:14:56.730\nBut they can also be used for\nsecuring your website.\n\n307\n00:14:56.730 --> 00:15:00.800\nAnd we can fire up Amazon's Cloud KMS,\ntheir Key Management.\n\n308\n00:15:00.800 --> 00:15:04.920\nAnd we can jump in and start generating\nthose and issuing them to our users.\n\n309\n00:15:04.920 --> 00:15:09.530\nYou may need to purchase SSL certificates\nthough, if you need them to be trusted.\n\n310\n00:15:09.530 --> 00:15:13.480\nNotice how Amazon's own\ncertificate was through Semantic,\n\n311\n00:15:13.480 --> 00:15:16.020\nright, we usually purchased\nthem from somebody else.\n\n312\n00:15:16.020 --> 00:15:20.020\nAnd there's a number of companies\nout there, we usually use DigiCert.\n\n313\n00:15:20.020 --> 00:15:24.610\nAnd so you can go and you can buy\ncertificates from a company like that.\n\n314\n00:15:24.610 --> 00:15:29.020\nAnd now if people trust DigiCert and\nDigiCert verifies that we are who we say\n\n315\n00:15:29.020 --> 00:15:32.200\nwe are,\nthen you can trust that you know it's us.\n\n316\n00:15:32.200 --> 00:15:34.810\nIn a past episode,\nyou said that Amazon is a CA too.\n\n317\n00:15:34.810 --> 00:15:38.650\nSo are we buying these from Amazon at all\nor do they recommend a third party and\n\n318\n00:15:38.650 --> 00:15:39.350\nimporting them in?\n\n319\n00:15:39.350 --> 00:15:40.950\n&gt;&gt; So you can buy them from Amazon.\n\n320\n00:15:40.950 --> 00:15:43.570\nAnd it's actually kind of nice because\nthen you're managing everything in one\n\n321\n00:15:43.570 --> 00:15:44.540\nplace, right.\n\n322\n00:15:44.540 --> 00:15:46.750\nAmazon doesn't use their own certificate.\n\n323\n00:15:46.750 --> 00:15:48.746\nAnd that's not them saying\nwe don't trust ourselves.\n\n324\n00:15:48.746 --> 00:15:53.706\nIt's saying, who's gonna trust us if\nwe're the ones saying who we say we are.\n\n325\n00:15:53.706 --> 00:15:56.486\nSo, it makes sense that they would\nhave to buy from somebody else, right?\n\n326\n00:15:56.486 --> 00:15:57.535\nThat's how that works.\n\n327\n00:15:57.535 --> 00:16:00.533\nBut for us,\nwe could easily buy from Amazon.\n\n328\n00:16:00.533 --> 00:16:05.202\nWhere you do get a little bit of risk is\nhaving all of your eggs in one basket,\n\n329\n00:16:05.202 --> 00:16:09.799\nis not the end of the world when it's\na massive infrastructure like this,\n\n330\n00:16:09.799 --> 00:16:14.050\nbut we normally do want to distribute\nour systems across multiple.\n\n331\n00:16:15.360 --> 00:16:18.050\nVendors or\nmaybe even multiple cloud providers.\n\n332\n00:16:18.050 --> 00:16:19.970\nAnd so,\nwhen you start purchasing certificates,\n\n333\n00:16:19.970 --> 00:16:21.760\nthat becomes something\nyou wanna worry about.\n\n334\n00:16:21.760 --> 00:16:25.950\nWhen you generate these keys through\nAmazon, a lot of them can not be exported.\n\n335\n00:16:25.950 --> 00:16:29.060\nIn other words they're generated and\nthey're stored inside of AWS, and\n\n336\n00:16:29.060 --> 00:16:30.820\nthey can be used but\nthey can't be exported.\n\n337\n00:16:30.820 --> 00:16:32.480\nNow, that means two things.\n\n338\n00:16:32.480 --> 00:16:33.610\nIt means one it's really secure.\n\n339\n00:16:33.610 --> 00:16:37.370\nIf somebody breaks into your account\nThey can't export your private key.\n\n340\n00:16:37.370 --> 00:16:41.590\nImagine if somebody got in and exported\nyour private key and then got out and\n\n341\n00:16:41.590 --> 00:16:43.300\nyou never even noticed, right?\n\n342\n00:16:43.300 --> 00:16:45.340\nNow, they're sitting out\nthere with your private key.\n\n343\n00:16:45.340 --> 00:16:48.360\nAnd any network traffic they\nintercept they can start decrypting,\n\n344\n00:16:48.360 --> 00:16:49.630\nbecause they've got the private key.\n\n345\n00:16:49.630 --> 00:16:51.820\nThat would be bad and you wouldn't\neven know it was happening, right?\n\n346\n00:16:51.820 --> 00:16:54.990\nSo, we can't export it,\nthat's a good thing.\n\n347\n00:16:54.990 --> 00:16:59.180\nBut at the same time, if I've generated\nkeys that are locked into the AWS\n\n348\n00:16:59.180 --> 00:17:02.540\necosystem, and\nI start working in another cloud provider,\n\n349\n00:17:02.540 --> 00:17:05.010\nI have no way to export those\nkeys to bring them over.\n\n350\n00:17:05.010 --> 00:17:08.340\nSo, it's a good thing, but in some\nscenarios you might not want that and\n\n351\n00:17:08.340 --> 00:17:11.650\nwe might find that we need to use keys\ngenerated by an outside provider.\n\n352\n00:17:11.650 --> 00:17:14.990\nAnd you could always stand up in\nEC2 instance and make your own CA.\n\n353\n00:17:14.990 --> 00:17:18.330\nNobody's going to trust it, but\nyou can do that if it's a private use.\n\n354\n00:17:18.330 --> 00:17:19.420\nRight?\nIf you have a VPC and\n\n355\n00:17:19.420 --> 00:17:23.650\nyou're just doing this privately You can\ntrust yourself, because you made it.\n\n356\n00:17:23.650 --> 00:17:25.040\nHopefully, you trust yourself.\n\n357\n00:17:25.040 --> 00:17:25.890\nAnd then it's fine.\n\n358\n00:17:25.890 --> 00:17:28.500\nIt's really when we've got that public\npresence that we have to worry about\n\n359\n00:17:28.500 --> 00:17:29.520\nthe trust side of things.\n\n360\n00:17:30.810 --> 00:17:31.650\nAll right.\nAnd the last thing\n\n361\n00:17:31.650 --> 00:17:32.650\nthat I want to talk about.\n\n362\n00:17:32.650 --> 00:17:35.660\nI know we've been talking credentials and\naccess this whole time.\n\n363\n00:17:35.660 --> 00:17:39.310\nBut the last thing that I want\nto mention is AWS Cloud Trail.\n\n364\n00:17:39.310 --> 00:17:43.410\nWe talked about it a little bit in\nthe additional keys service section, but\n\n365\n00:17:43.410 --> 00:17:44.440\nit was real brief.\n\n366\n00:17:44.440 --> 00:17:48.090\nI wanna highlight it again here,\nbecause with all of this,\n\n367\n00:17:48.090 --> 00:17:51.290\nall these credentials and so\non, they all have weaknesses.\n\n368\n00:17:51.290 --> 00:17:54.050\nThere's always a weak link in there,\nthe weak link is humans.\n\n369\n00:17:54.050 --> 00:17:57.860\nRight, that yeah, I've got MFA,\ngreat, it's on my phone.\n\n370\n00:17:57.860 --> 00:18:01.030\nBut somebody could steal my phone,\nand they could use a key logger and\n\n371\n00:18:01.030 --> 00:18:02.480\nthey could get my password, right.\n\n372\n00:18:02.480 --> 00:18:06.160\nAnd now if they've got my password and\nmy MFA device, they can be me, right.\n\n373\n00:18:06.160 --> 00:18:09.550\nOr you could kidnap somebody and\nslap them around a bit, and\n\n374\n00:18:09.550 --> 00:18:10.820\nnow you got that information, right?\n\n375\n00:18:10.820 --> 00:18:12.740\nThere's always that human piece.\n\n376\n00:18:12.740 --> 00:18:14.461\nNot that I'm saying that\nyou should do that.\n\n377\n00:18:14.461 --> 00:18:16.630\n[LAUGH] Although could you\ndo it with management and\n\n378\n00:18:16.630 --> 00:18:18.290\ntell them it was an intrusion test?\n\n379\n00:18:18.290 --> 00:18:21.382\nWe were pen testing,\nwe had to beat that accountant.\n\n380\n00:18:21.382 --> 00:18:24.770\n[LAUGH] And so either way,\nthere's a weakness, right?\n\n381\n00:18:24.770 --> 00:18:28.840\nAnd if you just Take\nthe approach of saying, look,\n\n382\n00:18:28.840 --> 00:18:30.800\na compromise very well could happen.\n\n383\n00:18:32.240 --> 00:18:34.080\nWhat do you do next?\n\n384\n00:18:34.080 --> 00:18:37.530\nAlways plan for that, plan how would\nyou respond to that compromise?\n\n385\n00:18:37.530 --> 00:18:38.610\nAnd the best thing,\n\n386\n00:18:38.610 --> 00:18:42.860\nthe best thing you could put in place is\na good logging and auditing system so\n\n387\n00:18:42.860 --> 00:18:45.838\nthat you can say, all right, a compromise\nhappened, what did they get at?\n\n388\n00:18:45.838 --> 00:18:49.050\nI know Wes' credentials got compromised.\n\n389\n00:18:49.050 --> 00:18:54.260\nSo, what has Wes' credentials been\nused to access for the last 24 hours?\n\n390\n00:18:54.260 --> 00:18:56.370\nHow can I pull that up?\n\n391\n00:18:56.370 --> 00:18:59.680\nBy default, I might not have a very good\nway to pull that information up, but\n\n392\n00:18:59.680 --> 00:19:01.720\nwith cloud trail we can.\n\n393\n00:19:01.720 --> 00:19:04.030\nAnd cloud trail is not\na hard thing to set up.\n\n394\n00:19:04.030 --> 00:19:07.490\nAnd we didn't talk about the setup earlier\ncuz this This whole series is more about\n\n395\n00:19:07.490 --> 00:19:10.210\ndesign than setup, but\nI just wanna show it real quick.\n\n396\n00:19:10.210 --> 00:19:12.710\nI'm gonna jump back to my console here,\nand\n\n397\n00:19:12.710 --> 00:19:17.690\nback under Security, I'm gonna jump\ndown into getting CloudTrail set up.\n\n398\n00:19:17.690 --> 00:19:20.990\nAnd actually sorry,\nit's not under Security,\n\n399\n00:19:20.990 --> 00:19:23.300\nit's under Management,\nunder Management and\n\n400\n00:19:23.300 --> 00:19:27.570\nyou go down to CloudTrail And CloudShell\nis one of those things that it's so\n\n401\n00:19:27.570 --> 00:19:31.760\nsimple to set up but you have to make sure\nyour turn on before your crisis, right?\n\n402\n00:19:31.760 --> 00:19:33.530\nIt's not something you\nturn on after the crisis.\n\n403\n00:19:33.530 --> 00:19:35.050\nIt's already miss the data.\n\n404\n00:19:35.050 --> 00:19:39.180\nWhen you turn it on, you create a trail\nname and it's gonna store it's data.\n\n405\n00:19:39.180 --> 00:19:40.460\nAnd it's gonna store it in S3.\n\n406\n00:19:40.460 --> 00:19:46.990\nThe main thing to pay attention to is this\nguy right here Apply trail to all regions.\n\n407\n00:19:46.990 --> 00:19:54.840\nWhen you turn on CloudTrail you may want\nall of your auditing to go to one place.\n\n408\n00:19:54.840 --> 00:19:57.030\nAnd so we've got that option right here.\n\n409\n00:19:57.030 --> 00:20:02.460\nI can audit API calls to every\nregion from my account and\n\n410\n00:20:02.460 --> 00:20:05.030\nlog them all into one S3 bucket.\n\n411\n00:20:05.030 --> 00:20:09.860\nAnd by doing that I now have one place\nthat I go that I can see everything.\n\n412\n00:20:09.860 --> 00:20:13.670\nOtherwise, if Wes' credentials got\ncompromised, I would have to say okay let\n\n413\n00:20:13.670 --> 00:20:17.880\nme go pull the cloud trail for US East,\nlet me go pull the cloud trail for\n\n414\n00:20:17.880 --> 00:20:21.630\nUS West, let me go do the Asia Pacific\nNortheast, let me go pull this.\n\n415\n00:20:21.630 --> 00:20:22.788\nYou have to go pull each region.\n\n416\n00:20:22.788 --> 00:20:26.730\nWell maybe Wes' credentials\nonly had access to one region,\n\n417\n00:20:26.730 --> 00:20:27.930\nthat would be easy, right?\n\n418\n00:20:27.930 --> 00:20:31.330\nAnd so then I wouldn't need a centralized\ncloud trail I could split it up.\n\n419\n00:20:31.330 --> 00:20:31.990\nRight?\n\n420\n00:20:31.990 --> 00:20:35.720\nBut if I have credentials that\nwork in more than one region,\n\n421\n00:20:35.720 --> 00:20:37.620\nit's a good idea to collect them all.\n\n422\n00:20:37.620 --> 00:20:39.670\nSo we've got that option\nright here to collect it and\n\n423\n00:20:39.670 --> 00:20:41.190\nstore it all into one place.\n\n424\n00:20:41.190 --> 00:20:44.520\nOkay, now,\nit's being stored in an S3 bucket, and\n\n425\n00:20:44.520 --> 00:20:47.210\nwhen the data gets dumped into\nthe S3 bucket, if it's your\n\n426\n00:20:47.210 --> 00:20:51.380\nroot credential that got compromised,\nWhat are they gonna have access to?\n\n427\n00:20:51.380 --> 00:20:52.350\nThe S3 bucket.\n\n428\n00:20:52.350 --> 00:20:55.010\nA good attacker, I know,\nthere's no such thing as a good attacker.\n\n429\n00:20:55.010 --> 00:20:59.590\nBut a talented or skilled attacker,\nonce they break into the network,\n\n430\n00:20:59.590 --> 00:21:02.490\nthey don't immediately dive into\nyour data and start digging around.\n\n431\n00:21:02.490 --> 00:21:05.680\nThe first thing they do is\nthey compromise your logs,\n\n432\n00:21:05.680 --> 00:21:07.400\nbecause they need to cover their tracks.\n\n433\n00:21:07.400 --> 00:21:10.570\nAnd if they can compromise the logs,\nthen they can dig into your data and\n\n434\n00:21:10.570 --> 00:21:12.540\nget whatever they want, and\nthey know they can cover their tracks.\n\n435\n00:21:12.540 --> 00:21:16.950\nIf it just goes straight from the data,\nnow you're building an evidence trail and\n\n436\n00:21:16.950 --> 00:21:18.180\nthey can go to court and get in trouble.\n\n437\n00:21:18.180 --> 00:21:20.860\nBut if they can clear the logs,\nthe evidence trail is gone and\n\n438\n00:21:20.860 --> 00:21:24.240\nit's really hard to prosecute\nwithout anything like that.\n\n439\n00:21:24.240 --> 00:21:25.930\nSo, we've got to be careful there.\n\n440\n00:21:25.930 --> 00:21:27.480\nWhen the data gets written to S3.\n\n441\n00:21:28.630 --> 00:21:30.420\nIt would be ideal to be replicating that.\n\n442\n00:21:30.420 --> 00:21:32.470\nSending it somewhere else,\ntaking it offsite.\n\n443\n00:21:32.470 --> 00:21:34.220\nRight?\nIf you have a storage gateway you can\n\n444\n00:21:34.220 --> 00:21:37.420\neasily sink that back down and\nget it out of the cloud and\n\n445\n00:21:37.420 --> 00:21:38.850\nhave that stored externally.\n\n446\n00:21:38.850 --> 00:21:41.690\nThose are options that are available\nto you if you take the time to get\n\n447\n00:21:41.690 --> 00:21:42.810\nthem set up.\n\n448\n00:21:42.810 --> 00:21:44.790\n&gt;&gt; Don,\nwhat are some of the DNA of these logs?\n\n449\n00:21:44.790 --> 00:21:48.170\nWhat are some of the attributes that we\nmight see stored in some of these logs?\n\n450\n00:21:48.170 --> 00:21:51.360\nSo, there's a handful of\nentries that you're gonna see.\n\n451\n00:21:51.360 --> 00:21:53.725\nActually, I've got the list so\nI don't even have to make this up.\n\n452\n00:21:53.725 --> 00:21:55.780\n[LAUGH] Got the name of\nthe API that was used, right?\n\n453\n00:21:55.780 --> 00:21:58.330\nCuz there's a number of different APIs,\none for each service.\n\n454\n00:21:58.330 --> 00:22:01.720\nWe've got the identity of the caller,\nand the identity is their IP address and\n\n455\n00:22:01.720 --> 00:22:02.990\nthe credentials that were used, right?\n\n456\n00:22:02.990 --> 00:22:04.590\nSo, where they're coming in.\n\n457\n00:22:04.590 --> 00:22:05.930\nThe time of the call.\n\n458\n00:22:05.930 --> 00:22:07.820\nSo, it's timestamped and dated.\n\n459\n00:22:07.820 --> 00:22:09.460\nWe've got the request parameters.\n\n460\n00:22:09.460 --> 00:22:13.470\nSo what call did they send us and\nwe've got the response.\n\n461\n00:22:13.470 --> 00:22:14.600\nWhat did they get back?\n\n462\n00:22:14.600 --> 00:22:17.620\nSo, maybe they tried to\nterminate an instance, but\n\n463\n00:22:17.620 --> 00:22:18.820\ntermination protection was turned on.\n\n464\n00:22:18.820 --> 00:22:20.630\nSo they got a response back\nsaying they couldn't terminate.\n\n465\n00:22:20.630 --> 00:22:23.790\nSo now, I can see they tried to\nterminate the instance, but it failed.\n\n466\n00:22:23.790 --> 00:22:25.930\nOr I could say,\nthey terminated it and it's gone.\n\n467\n00:22:25.930 --> 00:22:28.490\nThey got their response, yep,\nA-okay we're gonna terminate.\n\n468\n00:22:28.490 --> 00:22:29.280\nAnd now it's gone.\n\n469\n00:22:29.280 --> 00:22:31.060\nSo I've got that record and\nnow I can see it.\n\n470\n00:22:31.060 --> 00:22:33.080\nSo those are the things that\ngo into the cloud trail.\n\n471\n00:22:33.080 --> 00:22:33.980\nIt's not a huge amount of data.\n\n472\n00:22:33.980 --> 00:22:35.660\nIt doesn't carry the data payload.\n\n473\n00:22:35.660 --> 00:22:39.620\nIt's not actually carrying the data\nthat communicate into an instance.\n\n474\n00:22:39.620 --> 00:22:41.960\nIt's carrying the API calls.\n\n475\n00:22:41.960 --> 00:22:44.680\n&gt;&gt; Don, so let's say I'm the good,\nwait, not good.\n\n476\n00:22:44.680 --> 00:22:47.190\nI'm the talented hacker and\nI actually make it into your logs.\n\n477\n00:22:47.190 --> 00:22:49.560\nThe logs, we always say,\nwe've gotta keep them protected.\n\n478\n00:22:50.830 --> 00:22:53.600\nIs there anything that they offer as\nfar as maintaining those logs, so\n\n479\n00:22:53.600 --> 00:22:57.070\nthat we know they're still in the same\nstate that we expect to find them in?\n\n480\n00:22:57.070 --> 00:23:00.130\n&gt;&gt; Yeah, so once the logs are written,\nthey're protected.\n\n481\n00:23:00.130 --> 00:23:02.460\nThey can't be modified,\nwell they shouldn't be able to modified.\n\n482\n00:23:02.460 --> 00:23:05.000\nThey can be deleted but\nthey shouldn't be able to be modified, and\n\n483\n00:23:05.000 --> 00:23:07.040\nthe way that's maintained,\nis they're encrypted.\n\n484\n00:23:07.040 --> 00:23:14.010\nThey are digitally signed with Shaw 256,\nthe secure hashing algorithm 256.\n\n485\n00:23:14.010 --> 00:23:15.870\nRemember I mentioned Shaw 1 earlier.\n\n486\n00:23:15.870 --> 00:23:20.170\nWell Shaw 256 is insanely stronger,\nthis is one that is computationally\n\n487\n00:23:20.170 --> 00:23:24.840\ninfeasible to break, at least right now\nand probably for the next 10 to 20 years.\n\n488\n00:23:24.840 --> 00:23:28.910\nSo they're digitally signed and encrypted,\nif somebody were to modify even a single\n\n489\n00:23:28.910 --> 00:23:32.780\nbit, it would break the hash and we would\nknow the files have been tampered with.\n\n490\n00:23:32.780 --> 00:23:35.300\nSo you've got that protection\nthat's in place there.\n\n491\n00:23:35.300 --> 00:23:38.320\nSo we've got it and\nthat's really kinda take care of things.\n\n492\n00:23:38.320 --> 00:23:40.800\nAnd you know,\nactually I said it's encrypted.\n\n493\n00:23:40.800 --> 00:23:43.200\nIt's not encrypted,\nit's just digitally signed.\n\n494\n00:23:43.200 --> 00:23:46.500\nSo the logs are plain text but\nyou can read it.\n\n495\n00:23:46.500 --> 00:23:49.140\nNow the S3 bucket itself\ncan be encrypted and\n\n496\n00:23:49.140 --> 00:23:53.790\nnow you've got that extra level where\nyou can store it encrypted yourself.\n\n497\n00:23:53.790 --> 00:23:55.790\nSo all that's available.\n\n498\n00:23:55.790 --> 00:23:59.180\nWe can also tie it into other things\nlike simple notification service.\n\n499\n00:23:59.180 --> 00:24:03.400\nSo every time a log file is generated,\nit kicks off SNS and\n\n500\n00:24:03.400 --> 00:24:07.350\nwe can have SNS trigger to then take those\nlog files and send them somewhere else or\n\n501\n00:24:07.350 --> 00:24:10.260\nmove them into Glacier where they can't\neven be deleted, that kind of stuff.\n\n502\n00:24:10.260 --> 00:24:13.260\nThere's other steps you can\ntake to be able to maintain and\n\n503\n00:24:13.260 --> 00:24:17.760\nprotect that, but it is one of those\nthings that we've got to turn it on\n\n504\n00:24:17.760 --> 00:24:22.100\nnow because it benefits us if it's\nturned on when the incident occurs.\n\n505\n00:24:22.100 --> 00:24:25.650\nIt doesn't benefit us to turn it on after\nthe instant right so you got to plan for\n\n506\n00:24:25.650 --> 00:24:26.950\nthis one ahead of time.\n\n507\n00:24:26.950 --> 00:24:30.100\n&gt;&gt; All right Don lot of great information\non keeping those accounts secure but\n\n508\n00:24:30.100 --> 00:24:32.310\nit does look like we're coming to\nthe end to another episode but\n\n509\n00:24:32.310 --> 00:24:35.270\nbefore we do Don when it comes to account\nsecurity do you have any additional\n\n510\n00:24:35.270 --> 00:24:37.530\nmaybe pieces of advice you'd\nlike to give our viewers?\n\n511\n00:24:37.530 --> 00:24:40.340\nWe are not talking about\na huge amount of money here.\n\n512\n00:24:40.340 --> 00:24:43.560\nWhen you configure accounts inside of AWS.\n\n513\n00:24:43.560 --> 00:24:47.940\nSo, Please create individual accounts for\nevery person.\n\n514\n00:24:47.940 --> 00:24:51.205\nCreate individual roles for\nevery Single application.\n\n515\n00:24:51.205 --> 00:24:53.495\nUse groups so you only have to\nsign permissions a few times, but\n\n516\n00:24:53.495 --> 00:24:55.585\ngive everyone their own credentials.\n\n517\n00:24:55.585 --> 00:24:58.745\nAnd the main reason is you just have\nto assume that somebody's gonna get\n\n518\n00:24:58.745 --> 00:25:00.135\ncompromised sooner or later.\n\n519\n00:25:00.135 --> 00:25:02.835\nAnd if everybody has their\nown individual credential,\n\n520\n00:25:02.835 --> 00:25:05.695\nyou can revoke their credential,\nyou can disable that one person.\n\n521\n00:25:05.695 --> 00:25:08.875\nYou can reset that one access key.\n\n522\n00:25:08.875 --> 00:25:11.325\nAnd that way it only impacts\nthat one service, and\n\n523\n00:25:11.325 --> 00:25:13.245\nit doesn't impact your account as a whole.\n\n524\n00:25:13.245 --> 00:25:15.630\nSo Use this generously.\n\n525\n00:25:15.630 --> 00:25:18.530\nI mean just, any chance you have\nto create more and more and\n\n526\n00:25:18.530 --> 00:25:21.160\nmore credentials until you have thousands\nof credentials that are out there.\n\n527\n00:25:21.160 --> 00:25:23.790\nTha's great because you\ncan use that granularity.\n\n528\n00:25:23.790 --> 00:25:26.510\nIf you just have that one key,\nand everybody's sharing it.\n\n529\n00:25:26.510 --> 00:25:27.585\nThat's bad news.\n\n530\n00:25:27.585 --> 00:25:28.795\nCuz you're gonna go into the auto logs and\n\n531\n00:25:28.795 --> 00:25:31.325\nit's always gonna be one\nperson that did the task.\n\n532\n00:25:31.325 --> 00:25:33.535\nYou don't know who that one\nperson is cuz you're all sharing.\n\n533\n00:25:33.535 --> 00:25:37.105\nAnd if it gets compromised, you have\nto disable it and it affects everybody.\n\n534\n00:25:37.105 --> 00:25:39.645\nYou could effectively get yourself\nlocked out of the account, or\n\n535\n00:25:39.645 --> 00:25:43.000\nat least locked out of your resources and\nthen have to go and work around that.\n\n536\n00:25:43.000 --> 00:25:46.070\nThat's gonna be a support ticket so\nyou wanna avoid that if you can.\n\n537\n00:25:46.070 --> 00:25:49.320\nJust create lots of accounts,\nthat's my advice.\n\n538\n00:25:49.320 --> 00:25:51.990\n&gt;&gt; All right Don as always we do\nappreciate having you here, and\n\n539\n00:25:51.990 --> 00:25:53.800\nwe appreciate you the viewer watching.\n\n540\n00:25:53.800 --> 00:25:56.090\nWe're gonna go ahead and\nsign out here at ITProTV.\n\n541\n00:25:56.090 --> 00:25:57.430\nI'm been your host Wes Bryan.\n\n542\n00:25:57.430 --> 00:25:58.130\n&gt;&gt; And I'm Don Pezet.\n\n543\n00:25:58.130 --> 00:26:00.513\n&gt;&gt; And we'll see you next time.\n\n544\n00:26:00.513 --> 00:26:06.573\n[MUSIC]\n\n545\n00:26:06.573 --> 00:26:09.615\nThank you for watching ITProTV\n\n",
          "vimeoId": "209557633"
        },
        {
          "description": "In this episode, Wes and Don dive into security inside of AWS. They will focus in on could service-specific security, specifically taking a look at security in AWS’s compute service EC2. They will explore instance isolation, host OS and guest OS security, securing API access and EBS security.",
          "length": "1542",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-1-cloud_service_specific_security-031717-PGM.00_25_28_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-1-cloud_service_specific_security-031717-PGM.00_25_28_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-1-cloud_service_specific_security-031717-PGM.00_25_28_10.Still001-sm.jpg",
          "title": "Cloud Service Specific Security",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:07.683\nWelcome to ITPRO.TV I'm your\nhost Don Pezet, [CROSSTALK].\n\n2\n00:00:07.683 --> 00:00:08.543\n[MUSIC]\n\n3\n00:00:08.543 --> 00:00:11.018\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:11.018 --> 00:00:15.540\n&gt;&gt; Welcome everybody to ITProTV,\nI'm your show host, Wes Bryan.\n\n5\n00:00:15.540 --> 00:00:18.200\nAnd in today's episode,\nwe're continuing through our series\n\n6\n00:00:18.200 --> 00:00:21.580\nin AWS's Certified Solutions\nArchitect Associate.\n\n7\n00:00:21.580 --> 00:00:24.330\nAnd joining us back in the studios\nis none other than Mr. Don Pezet.\n\n8\n00:00:24.330 --> 00:00:25.200\nDon, how are you doing, sir?\n\n9\n00:00:25.200 --> 00:00:28.232\n&gt;&gt; I'm doing just well Wes, we're\ngonna continue our security adventure.\n\n10\n00:00:28.232 --> 00:00:32.542\nIn the last couple episodes we've been\ntalking about various security design\n\n11\n00:00:32.542 --> 00:00:34.182\nconsiderations inside AWS.\n\n12\n00:00:34.182 --> 00:00:37.758\nAnd now what we're gonna do is we've\nkind of been talking about our account\n\n13\n00:00:37.758 --> 00:00:41.210\nas a whole, right, the big picture,\nin the last two episodes.\n\n14\n00:00:41.210 --> 00:00:44.240\nNow we're gonna switch to being\na little more service specific.\n\n15\n00:00:44.240 --> 00:00:47.350\nSo we're gonna go through and\nlook at a few individual services.\n\n16\n00:00:47.350 --> 00:00:50.400\nI say a few, it's actually quite a few,\nit's like 15 different services and\n\n17\n00:00:50.400 --> 00:00:53.460\ntalk a little bit about our\nsecurity design for each one.\n\n18\n00:00:53.460 --> 00:00:56.260\nBut in this episode we'll probably\njust talk about one, EC2.\n\n19\n00:00:56.260 --> 00:01:00.270\nEC2 is the elastic compute cloud,\nit's where we bring up our instances,\n\n20\n00:01:00.270 --> 00:01:01.570\nour servers.\n\n21\n00:01:01.570 --> 00:01:03.770\nAnd as a result,\nit's the one we hear about most and\n\n22\n00:01:03.770 --> 00:01:05.910\nit's the one that's probably\nthe most vulnerable.\n\n23\n00:01:05.910 --> 00:01:10.010\nBecause once you deploy an EC2 instance,\nthe rest of the configuration and\n\n24\n00:01:10.010 --> 00:01:13.260\nsecurity maintenance is kind of up to you\nand it's very easy to mis-configure and\n\n25\n00:01:13.260 --> 00:01:14.290\nget compromised.\n\n26\n00:01:14.290 --> 00:01:17.660\nSo this is probably the one we\nneed to focus the most on for\n\n27\n00:01:17.660 --> 00:01:21.540\ndeploying a secure environment native to\nUS, and that's where we're gonna start.\n\n28\n00:01:21.540 --> 00:01:25.190\n&gt;&gt; I know that the military follows\na model called a layer defense\n\n29\n00:01:25.190 --> 00:01:25.830\nsystem, right.\n\n30\n00:01:25.830 --> 00:01:29.000\nDefense in depth,\nI know Microsoft has adopted it as well.\n\n31\n00:01:29.000 --> 00:01:30.990\nIs that something that we're\ngonna see here inside ECT,\n\n32\n00:01:30.990 --> 00:01:32.810\ndo we see a layered defense system?\n\n33\n00:01:32.810 --> 00:01:38.470\n&gt;&gt; Absolutely, any security best practice\nyou've ever heard of, Amazon follows.\n\n34\n00:01:38.470 --> 00:01:42.180\nThey really do because they try to\nmaintain regulatory compliance, so\n\n35\n00:01:42.180 --> 00:01:43.730\nthat their customers can be compliant,\nright?\n\n36\n00:01:43.730 --> 00:01:47.270\nSo they are following things\nto the T on their end.\n\n37\n00:01:47.270 --> 00:01:50.710\nBut you gotta remember that they\ndon't take care of everything,\n\n38\n00:01:50.710 --> 00:01:52.760\nyou're part of the picture to, right?\n\n39\n00:01:52.760 --> 00:01:54.980\nIt's shared responsibility, so\n\n40\n00:01:54.980 --> 00:01:57.109\nAmazon's upholding their end\nof the security bargain.\n\n41\n00:01:58.160 --> 00:02:00.460\nNow it's up to you,\nwhether you're going to do it the same.\n\n42\n00:02:00.460 --> 00:02:03.780\nAnd if you do, now you're both at a nice,\nhigh secure level, and\n\n43\n00:02:03.780 --> 00:02:06.910\nyou can be compliant, or\nmeet whatever other requirements you have.\n\n44\n00:02:06.910 --> 00:02:10.110\nBut if you drop the ball, it doesn't\nmatter how much work Amazon does,\n\n45\n00:02:10.110 --> 00:02:14.031\nthey can't magically make your system\nsecure if you've botched the job.\n\n46\n00:02:14.031 --> 00:02:16.984\n[LAUGH] So that's what we've gotta make so\nthat we know what's going on.\n\n47\n00:02:16.984 --> 00:02:18.210\nNow fortunately,\n\n48\n00:02:18.210 --> 00:02:22.750\nbecause this is all a virtualized\nenvironment, there's a lot of stuff that's\n\n49\n00:02:22.750 --> 00:02:26.710\nkind of already taken care of us just\nthrough the nature of being virtualized.\n\n50\n00:02:26.710 --> 00:02:29.780\nBut it is important to understand\nwhat works and what doesn't work.\n\n51\n00:02:29.780 --> 00:02:32.380\nWhat kind of is taken care of for\nus and what isn't.\n\n52\n00:02:32.380 --> 00:02:35.920\nSo I want to show you guys a diagram and\ntalk a little bit about\n\n53\n00:02:35.920 --> 00:02:41.160\nthe virtualization model that's in use\nwhen we spin up EC2 instances, all right?\n\n54\n00:02:41.160 --> 00:02:45.480\nFirst off, Amazon under the hood,\n\n55\n00:02:45.480 --> 00:02:49.070\nunder your EC2 instances,\nthey're using the Xen Hypervisor.\n\n56\n00:02:49.070 --> 00:02:51.970\nXen is an open source Hypervisor,\nit's X-E-N.\n\n57\n00:02:51.970 --> 00:02:56.270\nI think you can go to xen.org and you can\nfind, there's a lot of information out\n\n58\n00:02:56.270 --> 00:03:00.350\nthere on Citrix Zen which is a commercial\nproduct built around the Zen software.\n\n59\n00:03:00.350 --> 00:03:05.150\nThat's not what Amazon uses, Amazon\nuses the straight up Zen solution and\n\n60\n00:03:05.150 --> 00:03:06.550\nyour virtual machines\nare thrown on top of that.\n\n61\n00:03:06.550 --> 00:03:11.920\nSo that means that somewhere,\nsomewhere at a region near you,\n\n62\n00:03:11.920 --> 00:03:16.490\nthere's a physical server that's\nrunning Linux, running Amazon's Linux.\n\n63\n00:03:16.490 --> 00:03:19.220\nAnd it's running the Xen\nhypervisor on top of it and\n\n64\n00:03:19.220 --> 00:03:22.430\nyour EC2 instances are running\nin a hypervisor, right?\n\n65\n00:03:22.430 --> 00:03:24.560\nSo that is what's going on on the backend.\n\n66\n00:03:24.560 --> 00:03:28.820\nYou don't see that, you never see that\nhost, but it is there, does exist.\n\n67\n00:03:28.820 --> 00:03:32.710\nAnd Amazon is taking care of security for\nthat host.\n\n68\n00:03:32.710 --> 00:03:35.000\nNow as you launch your own instances,\n\n69\n00:03:35.000 --> 00:03:38.110\nthey're being dumped on\ntop of that hypervisor.\n\n70\n00:03:38.110 --> 00:03:40.370\nAnd it's not just you, right?\n\n71\n00:03:40.370 --> 00:03:43.980\nSo here I can see the hypervisor, and on\ntop of the hypervisor we've got Customer\n\n72\n00:03:43.980 --> 00:03:47.010\n1, Customer 2 all the way\nthrough Customer whatever.\n\n73\n00:03:47.010 --> 00:03:51.780\nOne host could have 256 gigs of RAM and\nit could have 100 virtual machines on it,\n\n74\n00:03:51.780 --> 00:03:55.730\n100 instances running on it and\nthat can be 100 different customers.\n\n75\n00:03:55.730 --> 00:03:58.670\nOr maybe 10 of those instances are mine,\nand\n\n76\n00:03:58.670 --> 00:04:01.030\n90 of them are from other customers,\nright?\n\n77\n00:04:01.030 --> 00:04:02.690\nWell that's a risk, isn't it?\n\n78\n00:04:02.690 --> 00:04:05.440\nI'm running side by side,\nmaybe with a direct competitor or\n\n79\n00:04:05.440 --> 00:04:07.140\na hacker that brought\nup their own instance.\n\n80\n00:04:07.140 --> 00:04:08.840\nI could be running right beside them.\n\n81\n00:04:08.840 --> 00:04:13.700\nBut that's okay because\nthe hypervisor is enforcing isolation.\n\n82\n00:04:13.700 --> 00:04:16.970\nIt's enforcing separation across these,\nright?\n\n83\n00:04:16.970 --> 00:04:21.530\nNow when we look at securing this,\nwe got to think about this model and\n\n84\n00:04:21.530 --> 00:04:23.560\nall the different things\nthat we have to secure.\n\n85\n00:04:23.560 --> 00:04:26.380\nAnd if you look you'll see the hypervisor,\nand then you\n\n86\n00:04:26.380 --> 00:04:30.520\ngot your virtual interfaces underneath it\nwhere we tie into our security groups.\n\n87\n00:04:30.520 --> 00:04:33.803\nAnd under the security groups there's\nanother firewall, which then ties into\n\n88\n00:04:33.803 --> 00:04:36.310\nthe physical interfaces before\nit connects to the network.\n\n89\n00:04:36.310 --> 00:04:41.051\nEach of these gives us a level of\nopportunity to secure our environment and\n\n90\n00:04:41.051 --> 00:04:43.330\nwe likely will have to.\n\n91\n00:04:43.330 --> 00:04:48.050\nAll communications between these virtual\nmachines are passing through these\n\n92\n00:04:48.050 --> 00:04:52.070\nsecurity layers, so we always have\nthe opportunity to interact with that.\n\n93\n00:04:52.070 --> 00:04:55.960\nEven if, let's say that I am\nCustomer 1 and Customer 2,\n\n94\n00:04:55.960 --> 00:04:57.820\nthese are both my instances.\n\n95\n00:04:57.820 --> 00:05:02.210\nStill every communication between my first\ninstance, my second instance would still\n\n96\n00:05:02.210 --> 00:05:06.060\nbe passing through these security\nlayers to be able to harden, right?\n\n97\n00:05:06.060 --> 00:05:08.100\nSo when I go to secure this environment,\n\n98\n00:05:08.100 --> 00:05:12.030\nI have to think about the OS of the host,\nwhat's running on the actual hardware.\n\n99\n00:05:12.030 --> 00:05:14.270\nWell, I don't have to think about that,\nAmazon does that.\n\n100\n00:05:14.270 --> 00:05:15.930\nThey take care of that OS.\n\n101\n00:05:15.930 --> 00:05:19.060\nI have to think about the OS of the guest,\nthat's me.\n\n102\n00:05:19.060 --> 00:05:21.500\nNow, I can use an AMI to deploy it.\n\n103\n00:05:21.500 --> 00:05:25.360\nAnd the AMIs are usually hardened and\nsecure but not always.\n\n104\n00:05:25.360 --> 00:05:27.180\nAnd so when I deploy an AMI,\n\n105\n00:05:27.180 --> 00:05:30.050\nif it's a secured one I'm okay\nat the moment of deployment.\n\n106\n00:05:30.050 --> 00:05:32.700\nIf it's not a secured one,\nI need to harden it.\n\n107\n00:05:32.700 --> 00:05:35.870\nBut once it's deployed,\nthey're both on the same ground and\n\n108\n00:05:35.870 --> 00:05:38.700\neverything I do to modify it could\nweaken or strengthen security.\n\n109\n00:05:38.700 --> 00:05:42.120\nSo I need to be thinking\nabout the OS of the guest.\n\n110\n00:05:42.120 --> 00:05:43.701\nThen we have the firewall, right?\n\n111\n00:05:43.701 --> 00:05:47.200\nAnd the firewall takes two\ndifferent forms inside of EC2.\n\n112\n00:05:47.200 --> 00:05:48.858\nWe've got the, oops, the security groups.\n\n113\n00:05:48.858 --> 00:05:52.280\nThe security groups are what\nwe normally think of, right?\n\n114\n00:05:52.280 --> 00:05:55.170\nThat's the software firewall, it's a part\nof the EC2 service that we can go in and\n\n115\n00:05:55.170 --> 00:05:57.110\nconfigure, very visible.\n\n116\n00:05:57.110 --> 00:06:00.270\nBut there's also the network ACLs.\n\n117\n00:06:00.270 --> 00:06:01.800\nThe network access control lists,\n\n118\n00:06:01.800 --> 00:06:06.160\nwhich are actually part of the VPC,\nthe virtual private cloud.\n\n119\n00:06:06.160 --> 00:06:09.570\nEvery instance has to be inside of a VPC.\n\n120\n00:06:09.570 --> 00:06:14.150\nIt might be your default VPC, but\nit's got to be in a VPC somewhere, and\n\n121\n00:06:14.150 --> 00:06:17.700\nthat virtual private cloud\nhas its own network ACL and\n\n122\n00:06:17.700 --> 00:06:21.380\nthat's applied in addition\nto the security group.\n\n123\n00:06:21.380 --> 00:06:23.200\nSo you have two firewalls.\n\n124\n00:06:23.200 --> 00:06:27.130\nNow, a lot of people never configure the\nnetwork ACLs, they just leave them alone.\n\n125\n00:06:27.130 --> 00:06:28.860\nPros and cons for that, right?\n\n126\n00:06:28.860 --> 00:06:32.140\nOn the pro side, you could say, I'm going\nto do everything in a security group.\n\n127\n00:06:32.140 --> 00:06:33.560\nSo if I ever have to do troubleshooting,\n\n128\n00:06:33.560 --> 00:06:36.000\nI know I just have to look\nat the security group.\n\n129\n00:06:36.000 --> 00:06:39.160\nAnd I never have to look at the firewall,\nbecause I just opened it wide, right?\n\n130\n00:06:39.160 --> 00:06:42.210\nWell, that does make it easier\nto troubleshoot, that's true.\n\n131\n00:06:42.210 --> 00:06:45.890\nBut if I give Wes access\nto an instance and\n\n132\n00:06:45.890 --> 00:06:49.530\nI give him full control over the instance\nand I give him access to the security\n\n133\n00:06:49.530 --> 00:06:53.370\ngroup, he could go in and\nweaken the security group, couldn't he?\n\n134\n00:06:53.370 --> 00:06:55.830\nAnd I gave him the access,\nmy own fault and his fault for\n\n135\n00:06:55.830 --> 00:06:58.710\ndoing it, but he could weaken that access.\n\n136\n00:06:58.710 --> 00:07:03.540\nI could be using the network ACL also and\nnow continue to\n\n137\n00:07:03.540 --> 00:07:07.030\nrestrict access and not give him\nthe ability to mess with that part.\n\n138\n00:07:07.030 --> 00:07:10.440\nAnd so it's an extra layer of defense\nwe can use to control our accounts.\n\n139\n00:07:10.440 --> 00:07:13.710\nYou may or may not need that,\nbut it is there, it is present.\n\n140\n00:07:13.710 --> 00:07:18.180\nEither way, any communication\nbetween your instance and\n\n141\n00:07:18.180 --> 00:07:21.700\nother systems is going to pass through\nthe firewall on the security groups.\n\n142\n00:07:21.700 --> 00:07:25.730\nAnd any communication between two\ninstances, even on the same physical host,\n\n143\n00:07:25.730 --> 00:07:29.620\neven, the same customer and\nthe same VPC will still\n\n144\n00:07:29.620 --> 00:07:33.690\npass through the security groups,\nand the network ACL, right.\n\n145\n00:07:33.690 --> 00:07:35.850\nAnd, just in case it shows up on the exam,\n\n146\n00:07:35.850 --> 00:07:37.790\nI think I mentioned this\nis another episode.\n\n147\n00:07:37.790 --> 00:07:42.590\nIn the default VPC,\nif I have two instances in the same VPC,\n\n148\n00:07:42.590 --> 00:07:44.740\nthey can talk to each other, right?\n\n149\n00:07:44.740 --> 00:07:48.276\nBut if I've created my own VPC, every VPC\nwe create ourselves, you could put two\n\n150\n00:07:48.276 --> 00:07:51.656\ninstances in there and they're not\nallowed to talk to each other by default.\n\n151\n00:07:51.656 --> 00:07:54.800\nI've got to allow that,\nyou get true isolation.\n\n152\n00:07:54.800 --> 00:07:58.334\nAnd so that's usually what we want,\nto be able to control that access.\n\n153\n00:07:58.334 --> 00:08:01.925\nDon, I know that when it comes to\nhypervisors if we are running them locally\n\n154\n00:08:01.925 --> 00:08:05.858\nit gives us some amount of security of the\nisolation between the other host machine\n\n155\n00:08:05.858 --> 00:08:07.010\nand the guest machine.\n\n156\n00:08:07.010 --> 00:08:10.760\nWhat kind of security do we get\nwith the hypervisors inside of AWS?\n\n157\n00:08:10.760 --> 00:08:13.750\n&gt;&gt; One of the things we have to think\nabout with hypervisors is they can\n\n158\n00:08:13.750 --> 00:08:14.920\nvirtualize a lot of stuff.\n\n159\n00:08:14.920 --> 00:08:17.040\nSo, your network adapter is virtualized.\n\n160\n00:08:17.040 --> 00:08:20.220\nYour storage gets virtualized and\nso it is easy to isolate.\n\n161\n00:08:20.220 --> 00:08:24.200\nBut there are some things that can't be\nvirtualized, like virtualizing a CPU.\n\n162\n00:08:24.200 --> 00:08:27.040\nThat can't be done in\na realistic amount of time.\n\n163\n00:08:27.040 --> 00:08:30.880\nSo customer one, customer two, customer\nthree, we're all hitting the same CPU,\n\n164\n00:08:30.880 --> 00:08:33.380\nand if somebody really\ngot crafty within a tech,\n\n165\n00:08:33.380 --> 00:08:36.610\nthey could find some way to\njump instances through the CPU.\n\n166\n00:08:36.610 --> 00:08:40.230\nAnd fortunately, people smarter than\nus have already thought about this.\n\n167\n00:08:40.230 --> 00:08:44.830\nAnd at the CPU level we have this\nfour ring privileged access model.\n\n168\n00:08:44.830 --> 00:08:47.370\nThat's ring zero, ring one,\nring two, ring three.\n\n169\n00:08:47.370 --> 00:08:51.650\nAnd everything that runs through the CPU\nhas a certain access level granted to it\n\n170\n00:08:51.650 --> 00:08:55.170\nthat dictates what it's allowed to do\nas far as communicating with the CPU.\n\n171\n00:08:55.170 --> 00:08:59.250\nNow your hypervisor or your host OS.\n\n172\n00:08:59.250 --> 00:09:01.830\nThe one that's in control of the system.\n\n173\n00:09:01.830 --> 00:09:03.400\nThat one's gonna be ring zero.\n\n174\n00:09:03.400 --> 00:09:07.300\nRing zero means it has full\naccess to talk to the CPU.\n\n175\n00:09:07.300 --> 00:09:13.110\nNow, if I had a server and I install Linux\non it, my Linux kernel would be ring zero.\n\n176\n00:09:13.110 --> 00:09:17.630\nIf installed Windows Server 2016 on it,\nmy Windows kernel would be ring zero.\n\n177\n00:09:17.630 --> 00:09:19.670\nBut with a hypervisor,\n\n178\n00:09:19.670 --> 00:09:23.530\nif it's a type one hypervisor which is the\nonly type you should be using these days.\n\n179\n00:09:23.530 --> 00:09:27.780\nThe type on hypervisor puts\nthe hypervisor at ring zero, and\n\n180\n00:09:27.780 --> 00:09:31.050\nthe host OS actually becomes a guest OS.\n\n181\n00:09:31.050 --> 00:09:32.860\nIt looks like it's running\non the hardware but\n\n182\n00:09:32.860 --> 00:09:35.610\nit's actually running on the hypervisor\nright alongside everything else.\n\n183\n00:09:35.610 --> 00:09:40.530\nAnd so that OS,\na guest OS at that point is ring one, and\n\n184\n00:09:40.530 --> 00:09:45.910\nwith ring one we have less\naccess to the CPU, we lose\n\n185\n00:09:45.910 --> 00:09:49.780\nthe ability to do those tricky attacks\nto try and jump to different areas.\n\n186\n00:09:49.780 --> 00:09:52.450\nSend our instructions to a different\nblock of memory or whatever.\n\n187\n00:09:52.450 --> 00:09:56.710\nWe are more isolated in ring one, and\nthen every application that you run every\n\n188\n00:09:56.710 --> 00:09:59.980\nprogram you run skips ring two and\ngoes all the way to ring three.\n\n189\n00:09:59.980 --> 00:10:02.920\nApplications run with\nthe lowest privileges possible.\n\n190\n00:10:02.920 --> 00:10:07.880\nSo even if another customer brings up\nan operating system and starts loading\n\n191\n00:10:07.880 --> 00:10:11.530\nhacker tools on it, all of their hacker\ntools are running in ring three.\n\n192\n00:10:11.530 --> 00:10:14.800\nThey're running at the lowest privilege\npossible through those CPUs, and\n\n193\n00:10:14.800 --> 00:10:16.770\nthat helps to enforce that isolation.\n\n194\n00:10:16.770 --> 00:10:17.470\nAnd if you're gonna try and\n\n195\n00:10:17.470 --> 00:10:20.670\njump memory area, that's usually where\nyou gotta to try and compromise it.\n\n196\n00:10:20.670 --> 00:10:23.170\nYou're already at the lowest\nprivilege level possible.\n\n197\n00:10:23.170 --> 00:10:26.370\nSo, it's very, very difficult,\nnear impossible.\n\n198\n00:10:26.370 --> 00:10:29.550\nThe NSA and a number of other\norganizations have evaluated Zen and\n\n199\n00:10:29.550 --> 00:10:32.510\nother technologies like these, and\ncertified that the isolation between\n\n200\n00:10:32.510 --> 00:10:36.390\nthem is complete enough, that it can\nmeet national security standards.\n\n201\n00:10:36.390 --> 00:10:38.040\nSo, it's a good sign.\n\n202\n00:10:38.040 --> 00:10:39.870\nThat means that we don't have to\nworry about the other customers\n\n203\n00:10:39.870 --> 00:10:40.870\nthat are out there.\n\n204\n00:10:40.870 --> 00:10:42.480\nAnd on the other things that are in there,\n\n205\n00:10:42.480 --> 00:10:46.570\nthings like the disk, right,\nwe never see a raw disk.\n\n206\n00:10:46.570 --> 00:10:48.670\nNow if you've run Zen yourself, right?\n\n207\n00:10:48.670 --> 00:10:51.240\nIf you go and\ninstall Red Hat Enterprise Linux and\n\n208\n00:10:51.240 --> 00:10:56.210\nyou bring up Zen, you'll see where you can\nexpose a raw disk to a virtual machine.\n\n209\n00:10:56.210 --> 00:10:57.810\nBut Amazon doesn't allow that.\n\n210\n00:10:57.810 --> 00:11:01.960\nAmazon doesn't allow raw disks to\nbe exposed to any virtual machine\n\n211\n00:11:01.960 --> 00:11:03.470\nanywhere in EC2.\n\n212\n00:11:03.470 --> 00:11:05.840\nAnd that means you always\nsee a virtualized disk.\n\n213\n00:11:05.840 --> 00:11:09.510\nThat makes it impossible for\nyou to see other customers discs, and\n\n214\n00:11:09.510 --> 00:11:12.680\nthat virtualized disc that you see\nis being stored on physical storage\n\n215\n00:11:12.680 --> 00:11:13.720\nthat's been erased.\n\n216\n00:11:13.720 --> 00:11:17.360\nIt's been write erased numerous times,\nso even if you were to start firing up\n\n217\n00:11:17.360 --> 00:11:21.320\ndelete software or forensic software\nto scan for the magnetic signatures.\n\n218\n00:11:21.320 --> 00:11:24.430\nWell, you're seeing a virtual disk,\nit has no magnetic signatures.\n\n219\n00:11:24.430 --> 00:11:26.700\nAnd your application is running\nin that virtualized environment.\n\n220\n00:11:26.700 --> 00:11:29.835\nIt doesn't see the raw disk,\nyou can't get the other customer's data.\n\n221\n00:11:29.835 --> 00:11:32.180\nWe;re protected and isolated, right?\n\n222\n00:11:32.180 --> 00:11:36.340\nThat's an important piece of what has\nto be done to isolate our systems, and\n\n223\n00:11:36.340 --> 00:11:37.640\nthen we know that they're safe.\n\n224\n00:11:37.640 --> 00:11:39.740\n&gt;&gt; Don, in your diagram,\nyou talked about those different layers.\n\n225\n00:11:39.740 --> 00:11:42.170\nYou mentioned the host OS, and\nyou mentioned the guest OS.\n\n226\n00:11:42.170 --> 00:11:44.640\nI could see another proverbial\nline in the sand being drawn.\n\n227\n00:11:44.640 --> 00:11:47.500\nTell us a little bit about the security\nbetween the two different types.\n\n228\n00:11:47.500 --> 00:11:50.890\n&gt;&gt; All right, so the host OS,\nwe're not allowed to touch.\n\n229\n00:11:50.890 --> 00:11:52.240\nWe never see that, right?\n\n230\n00:11:52.240 --> 00:11:58.310\nIn fact, if I hadn't read that Amazon\nused Zen, I probably wouldn't know it.\n\n231\n00:11:58.310 --> 00:11:59.270\nThen there's ways to find out.\n\n232\n00:11:59.270 --> 00:12:00.590\nIf you dig in the drivers or whatever,\n\n233\n00:12:00.590 --> 00:12:03.000\nyou can figure out there's Zen drivers\nthat are being loaded in there.\n\n234\n00:12:03.000 --> 00:12:06.420\nBut we never actually see the Zen host OS.\n\n235\n00:12:06.420 --> 00:12:09.980\nThe only time you see it is\nyou go to work for Amazon.\n\n236\n00:12:09.980 --> 00:12:12.290\nYou go to work for them and you become one\nof the administrators that supports it.\n\n237\n00:12:12.290 --> 00:12:15.270\nAnd I think I mentioned this in the last\nepisode with credentials, where,\n\n238\n00:12:15.270 --> 00:12:20.750\nif you are somebody who's supporting\nthe hosts at Amazon In one of the regions.\n\n239\n00:12:20.750 --> 00:12:23.340\nThey require you to use MFA for\nyour account,\n\n240\n00:12:23.340 --> 00:12:26.420\nwhich eliminates the ability of someone\nto key logging in administrator.\n\n241\n00:12:26.420 --> 00:12:29.270\nAnd the other thing is,\nwhen they're doing maintenance on a host,\n\n242\n00:12:29.270 --> 00:12:32.090\nthey only get access to the host\nduring the maintenance window,\n\n243\n00:12:32.090 --> 00:12:33.670\nwhen they're supposed to be working on it.\n\n244\n00:12:33.670 --> 00:12:36.390\nAnd as soon the maintenance window\nis over, their access is taken away.\n\n245\n00:12:36.390 --> 00:12:38.030\nSo even as an administrator,\n\n246\n00:12:38.030 --> 00:12:41.370\nthey only have the limited access\nthey need to work on those hosts.\n\n247\n00:12:41.370 --> 00:12:45.040\nAnd during the maintenance window, all the\nguest instances should have been moved off\n\n248\n00:12:45.040 --> 00:12:48.050\nto other hosts so\nthat they can do maintenance.\n\n249\n00:12:48.050 --> 00:12:49.230\nSo they shift that around.\n\n250\n00:12:49.230 --> 00:12:50.350\nThat happens all the time.\n\n251\n00:12:50.350 --> 00:12:53.290\nYour instances get moved around\nfrom host to host all the time and\n\n252\n00:12:53.290 --> 00:12:55.770\nyou never even know it,\ncuz we don't see the hosts.\n\n253\n00:12:55.770 --> 00:12:59.020\nAmazon can be doing maintenance, replacing\nfailed hard drives, or doing whatever.\n\n254\n00:12:59.020 --> 00:13:03.200\nThey could be moving you to an entirely\nnew server rack in the data center,\n\n255\n00:13:03.200 --> 00:13:04.580\nall invisible to you, right?\n\n256\n00:13:04.580 --> 00:13:08.230\nAnd so that is nice to have that kind of,\non the back side.\n\n257\n00:13:08.230 --> 00:13:11.340\nOn the front side though,\non the guest OSs, we control that.\n\n258\n00:13:11.340 --> 00:13:14.720\nAnd we could easily give other people\nadministrative access into our guest OSs.\n\n259\n00:13:14.720 --> 00:13:17.250\nSo we don't have that level of control\n\n260\n00:13:17.250 --> 00:13:19.240\nunless we choose to implement\nit ourselves, right.\n\n261\n00:13:19.240 --> 00:13:23.620\nAmazon enforces it on the host,\nbut on the guest, it's up to us.\n\n262\n00:13:23.620 --> 00:13:26.060\n&gt;&gt; Don if I have various\ndifferent types of guest OSs,\n\n263\n00:13:26.060 --> 00:13:30.020\nhow would you recommend following\nthe security practices for each OS?\n\n264\n00:13:30.020 --> 00:13:33.350\n&gt;&gt; All right, every OS no matter\nhow secure they say it is,\n\n265\n00:13:33.350 --> 00:13:34.300\nit needs to be hardened.\n\n266\n00:13:34.300 --> 00:13:35.650\nAnd let me just give you an example.\n\n267\n00:13:35.650 --> 00:13:40.090\nOpen BSD which I think not even sure\nif you can do open BST in Amazon but\n\n268\n00:13:40.090 --> 00:13:42.400\njust use it as an example.\n\n269\n00:13:42.400 --> 00:13:46.210\nThey're very proud of their track\nrecord of only having like two flaws.\n\n270\n00:13:46.210 --> 00:13:50.290\nTheir default install in the last 20\nyears or something ridiculous like that.\n\n271\n00:13:50.290 --> 00:13:54.170\nIt's a very secure operating system but\nthey did have two flaws.\n\n272\n00:13:54.170 --> 00:14:00.810\nAnd even if they had a spotless record\nit's flaws in the default install.\n\n273\n00:14:00.810 --> 00:14:02.470\nWell who runs the default install?\n\n274\n00:14:02.470 --> 00:14:05.530\nNobody, you do a default install and\nthe server does nothing.\n\n275\n00:14:05.530 --> 00:14:08.900\nWe then install a web server on it,\nwe install languages on it,\n\n276\n00:14:08.900 --> 00:14:10.280\nwe put our web page on there.\n\n277\n00:14:10.280 --> 00:14:13.180\nWe do all these things that\nincrease the attack surface.\n\n278\n00:14:13.180 --> 00:14:16.750\nAnd so we need to make sure we\nharden those operating systems.\n\n279\n00:14:16.750 --> 00:14:19.970\nAnd to know how to do that,\nmaybe you're a security researcher, and\n\n280\n00:14:19.970 --> 00:14:21.550\nyou've figured all that out on your own.\n\n281\n00:14:21.550 --> 00:14:23.380\nBut if you're running a number\nof different operating systems,\n\n282\n00:14:23.380 --> 00:14:25.450\nmost of us don't have that kind of time.\n\n283\n00:14:25.450 --> 00:14:27.840\nFortunately, each vendor\nputs out hardening guides.\n\n284\n00:14:27.840 --> 00:14:29.510\nI work with Red Hat a lot.\n\n285\n00:14:29.510 --> 00:14:32.750\nAnd if you log into the Red Hat customer\nportal, they have hardening guides for\n\n286\n00:14:32.750 --> 00:14:35.610\neach version of their operating system\nthat walks you through steps you can take\n\n287\n00:14:35.610 --> 00:14:37.640\nto make it as secure as possible.\n\n288\n00:14:37.640 --> 00:14:40.410\nMicrosoft puts out hardening guides.\n\n289\n00:14:40.410 --> 00:14:42.320\nIf you go to the NSA website.\n\n290\n00:14:42.320 --> 00:14:44.890\nI know a lot of people aren't\ntoo happy with the NSA but\n\n291\n00:14:44.890 --> 00:14:48.130\nthey have hardening guides up there for\nsecuring servers.\n\n292\n00:14:48.130 --> 00:14:51.180\nSo there's a number of different places\nthat we can get that information from to\n\n293\n00:14:51.180 --> 00:14:52.560\nmake sure we're securing it.\n\n294\n00:14:52.560 --> 00:14:56.930\nBe careful because sometimes\nyou might deploy something like\n\n295\n00:14:56.930 --> 00:14:58.640\nthe Amazon Linux ami.\n\n296\n00:14:58.640 --> 00:15:01.660\nRight?\nAnd I know that the Amazon Linux AMI is\n\n297\n00:15:01.660 --> 00:15:04.220\nbased on CentOS which in turn\nis based on Red Hat, right?\n\n298\n00:15:04.220 --> 00:15:08.310\nSo I know that it's from\na trusted code base.\n\n299\n00:15:08.310 --> 00:15:12.680\nBut if I assume that\nthe Linux AMI is hardened,\n\n300\n00:15:12.680 --> 00:15:17.220\nthat the Amazon Linux AMI is hardened\nI could be very wrong, right?\n\n301\n00:15:17.220 --> 00:15:21.120\nIf I deploy CentOS or red hat,\nI know it's gonna see Linux enabled and\n\n302\n00:15:21.120 --> 00:15:22.990\nit's got a firewall de-enabled.\n\n303\n00:15:22.990 --> 00:15:27.760\nBut if you fire up an Amazon Linux AMI,\nit doesn't have either of those enabled.\n\n304\n00:15:27.760 --> 00:15:31.860\nSo now it's actually missing some\nof the features that we have that\n\n305\n00:15:31.860 --> 00:15:32.910\nwe normally expect.\n\n306\n00:15:32.910 --> 00:15:34.560\nThat's not a big deal, right?\n\n307\n00:15:34.560 --> 00:15:37.320\nAmazon doesn't put those on there cuz they\nhave other technologies that you can use\n\n308\n00:15:37.320 --> 00:15:38.900\ninstead, right?\n\n309\n00:15:38.900 --> 00:15:40.080\nBut it's up to us to make sure we do that.\n\n310\n00:15:40.080 --> 00:15:41.250\nSo always make sure to look for\n\n311\n00:15:41.250 --> 00:15:43.460\nhardening guides from the vendor\nthat created that operating system.\n\n312\n00:15:44.720 --> 00:15:46.550\nAll right,\nlet's see what else can we talk about?\n\n313\n00:15:46.550 --> 00:15:51.329\nAPI access, right, unlike a normal host\nlike Wes' laptop over here, right.\n\n314\n00:15:51.329 --> 00:15:54.489\nWes is on a Mac so\nhe's running MacOS over there.\n\n315\n00:15:54.489 --> 00:15:57.341\nAnd if he wants to interact with it,\nhe logs in with it and\n\n316\n00:15:57.341 --> 00:15:58.575\nhe works on the laptop.\n\n317\n00:15:58.575 --> 00:16:02.210\nI can't send a whole bunch of commands\nto his laptop and tell it what to do.\n\n318\n00:16:03.270 --> 00:16:07.770\nIn Windows, maybe you can enable Win RM or\nin a Linux box or in his Mac, maybe we can\n\n319\n00:16:07.770 --> 00:16:10.270\nenable an SH server and I can remote\nit and start throwing commands at it.\n\n320\n00:16:10.270 --> 00:16:12.304\nBut that stuff's not on by default.\n\n321\n00:16:12.304 --> 00:16:16.620\nBy default, you've gotta sit down and\nlog into that machine and work with it.\n\n322\n00:16:16.620 --> 00:16:20.840\nWhen you deploy things in AWS,\nthat's not the case.\n\n323\n00:16:20.840 --> 00:16:27.540\nWhen I deploy in EC2 instance, the EC2 API\nis enabled and ready to receive commands.\n\n324\n00:16:27.540 --> 00:16:31.180\nI can send commands to API to turn\nthe machine on, to shut it down,\n\n325\n00:16:31.180 --> 00:16:35.250\nto terminate it, to add disks,\nto remove disks, to do all these things,\n\n326\n00:16:35.250 --> 00:16:40.739\nto manipulate that instance, all through\nthe API, independent of the guest OS.\n\n327\n00:16:40.739 --> 00:16:44.140\nI don't even have to log in to\nthe guest OS to send an API call and\n\n328\n00:16:44.140 --> 00:16:48.380\nto shut down an instance as long\nas I have the Amazon credentials.\n\n329\n00:16:48.380 --> 00:16:53.620\nSo maybe I got or maybe Wes got my\nroot key from my Amazon account.\n\n330\n00:16:53.620 --> 00:16:56.320\nMaybe I left myself logged in on\na computer one day or whatever.\n\n331\n00:16:56.320 --> 00:17:00.530\nHe could just open up a command prompt and\ndrop down into the AWS CLI and\n\n332\n00:17:00.530 --> 00:17:04.690\nstart sending terminate\ncommands to my instances.\n\n333\n00:17:04.690 --> 00:17:07.370\nHe wouldn't even have to have\na Windows username and password, or\n\n334\n00:17:07.370 --> 00:17:11.560\na valid Linux account, or\na SSH certificate to authenticate.\n\n335\n00:17:11.560 --> 00:17:12.470\nHe wouldn't need any of that.\n\n336\n00:17:12.470 --> 00:17:14.070\nHe could just send it in through the API.\n\n337\n00:17:14.070 --> 00:17:22.130\nSo it's really important that when we\nsetup our instances that we use IAM roles.\n\n338\n00:17:22.130 --> 00:17:26.030\nIAM roles will dictate who's allowed to\naccess and what they're allowed to do,\n\n339\n00:17:26.030 --> 00:17:29.980\nwhat what access that instance\nhas to access other instances.\n\n340\n00:17:29.980 --> 00:17:33.550\nAnd we can use IEM policies to\ndictate what commands people are on to\n\n341\n00:17:33.550 --> 00:17:34.430\nsend to those.\n\n342\n00:17:34.430 --> 00:17:36.760\nWe need to control the API.\n\n343\n00:17:36.760 --> 00:17:39.810\nAnd the number one way to control it,\nis through access credentials.\n\n344\n00:17:39.810 --> 00:17:41.720\nLimit who has access credentials and\n\n345\n00:17:41.720 --> 00:17:44.220\nthen use policies to limit\nthe commands they can issue.\n\n346\n00:17:44.220 --> 00:17:46.730\n&gt;&gt; In one of the layers that you were\nshowing us in your diagram at first,\n\n347\n00:17:46.730 --> 00:17:48.180\nyou had talked about firewalls, Don.\n\n348\n00:17:48.180 --> 00:17:49.320\nCan you tell us a little bit more,\n\n349\n00:17:49.320 --> 00:17:51.650\nexpand a little bit more on\nthe firewalls themselves.\n\n350\n00:17:51.650 --> 00:17:54.740\nYeah, so the firewalls,\nthey all are software firewalls.\n\n351\n00:17:54.740 --> 00:17:58.450\nThere's hardware firewalls at the various\nregions, but we never see those.\n\n352\n00:17:58.450 --> 00:18:00.540\nWell, what we're seeing\nare software firewalls, and\n\n353\n00:18:00.540 --> 00:18:05.050\nthe software firewalls are operating\ninside of really, zen.\n\n354\n00:18:05.050 --> 00:18:08.710\nIn zen, it's providing your network\ninterfaces as virtual network interfaces,\n\n355\n00:18:08.710 --> 00:18:13.550\nwe talk about those in an earlier episode,\nENI's, Elastic Network Interfaces.\n\n356\n00:18:13.550 --> 00:18:18.080\nAnd each Elastic Network Interface is\na virtual network interface that then\n\n357\n00:18:18.080 --> 00:18:19.730\nconnects to a security group.\n\n358\n00:18:19.730 --> 00:18:23.300\nAnd then that security group\nin turn connects to a VPC,\n\n359\n00:18:23.300 --> 00:18:26.620\nat least the default VPC\nthat has a network ACL.\n\n360\n00:18:26.620 --> 00:18:29.280\nAnd that's all done entirely in software.\n\n361\n00:18:29.280 --> 00:18:31.920\nBut all of your access\nis going through those.\n\n362\n00:18:31.920 --> 00:18:35.640\nSo if we can stop somebody from even\ngetting to the instance in the first place\n\n363\n00:18:35.640 --> 00:18:37.530\nwe don't have to worry about\nwhether they've got credentials,\n\n364\n00:18:37.530 --> 00:18:38.820\nthey can't even get there.\n\n365\n00:18:38.820 --> 00:18:43.830\nWhen we have management access like RDP or\nSSH, that kind of access,\n\n366\n00:18:43.830 --> 00:18:47.310\nwe can restrict the source IP,\nwhere these people are coming from.\n\n367\n00:18:47.310 --> 00:18:48.020\nAnd we can limit it.\n\n368\n00:18:48.020 --> 00:18:51.330\nFor example, there's a lot of stuff\nthat we have here at ITProTV where\n\n369\n00:18:51.330 --> 00:18:55.050\nwe only allow you to SSH into the server\nif you're coming from the IP address for\n\n370\n00:18:55.050 --> 00:18:56.030\nthis building.\n\n371\n00:18:56.030 --> 00:18:59.850\nNow, I know what you're thinking is\nsomebody could just spoof that IP.\n\n372\n00:18:59.850 --> 00:19:06.680\nWell, Amazon actually does anti-spoofing\nand IP masquerading, ARPS spoofing.\n\n373\n00:19:06.680 --> 00:19:08.300\nA lot of this stuff they detect and\n\n374\n00:19:08.300 --> 00:19:11.870\nblock right in the firewalls before\nthe traffic even gets to your system.\n\n375\n00:19:11.870 --> 00:19:15.410\nSo one of the things I do on-premises\nis anytime I setup a router,\n\n376\n00:19:15.410 --> 00:19:18.820\nI take all the internal IPs and\nI put them in an access list and\n\n377\n00:19:18.820 --> 00:19:22.660\nI say, no outside traffic should be\ncoming in with the source of my own IPs.\n\n378\n00:19:22.660 --> 00:19:24.150\nThat doesn't make sense.\n\n379\n00:19:24.150 --> 00:19:25.640\nWell, Amazon does that for you.\n\n380\n00:19:25.640 --> 00:19:27.600\nThey know that doesn't make sense,\nso why even forward it.\n\n381\n00:19:27.600 --> 00:19:28.820\nSo we don't have to worry about it.\n\n382\n00:19:28.820 --> 00:19:33.520\nSo they're taking certain steps to help\nprotect us but we control the firewall.\n\n383\n00:19:33.520 --> 00:19:34.190\nWe can override it.\n\n384\n00:19:34.190 --> 00:19:36.030\nWe can allow ourselves to\nbecome weakened on that,\n\n385\n00:19:36.030 --> 00:19:39.790\nso we just need to make sure\nwe get in there and tune that.\n\n386\n00:19:39.790 --> 00:19:42.800\nNow, on the firewall side, let me just\nbring up another diagram that I've got\n\n387\n00:19:42.800 --> 00:19:44.310\nhere, because I know I've\nsaid this more than once.\n\n388\n00:19:44.310 --> 00:19:46.430\nThat all the traffic for\n\n389\n00:19:46.430 --> 00:19:48.370\nan instance passes through\nthe firewall no matter what.\n\n390\n00:19:48.370 --> 00:19:51.520\nSo here, they show web traffic\ncoming from the internet and\n\n391\n00:19:51.520 --> 00:19:55.640\ngoing down into an instance,\nor SSH traffic coming in.\n\n392\n00:19:55.640 --> 00:19:57.310\nAnd here's that SSH like I mentioned.\n\n393\n00:19:57.310 --> 00:20:00.070\nOr synching with an on premises database.\n\n394\n00:20:00.070 --> 00:20:03.170\nIt all passes through the firewall.\n\n395\n00:20:03.170 --> 00:20:08.730\nAnd if it's not explicitly permitted,\nthen it hits the default block, okay.\n\n396\n00:20:08.730 --> 00:20:10.940\nThe traffic gets blocked,\nand that's the end of it.\n\n397\n00:20:10.940 --> 00:20:13.130\nThe network ACLs are not stateful.\n\n398\n00:20:13.130 --> 00:20:14.500\nThey're not bidirectional, so\n\n399\n00:20:14.500 --> 00:20:17.800\nwe have to define traffic both ways\nto allow the traffic to come through.\n\n400\n00:20:17.800 --> 00:20:20.880\nAfter that, the security groups,\nthey all are stateful.\n\n401\n00:20:20.880 --> 00:20:23.790\nThey are allowing that communication\nto come in and get the replies back.\n\n402\n00:20:23.790 --> 00:20:27.430\nSo we can define those communications and\nlimit and restrict that access.\n\n403\n00:20:27.430 --> 00:20:30.110\nWhat this diagram doesn't\nnecessarily show very well\n\n404\n00:20:30.110 --> 00:20:32.310\nis here I've got this EC2 instance.\n\n405\n00:20:32.310 --> 00:20:35.280\nAnd see how it's doing SSH\nto my other instances.\n\n406\n00:20:35.280 --> 00:20:40.300\nWell, even that SSH access passes\nthrough the security group,\n\n407\n00:20:40.300 --> 00:20:41.650\nexcept in the default VPC.\n\n408\n00:20:41.650 --> 00:20:45.460\nIn the default VPC,\nthey are allowed to define it.\n\n409\n00:20:45.460 --> 00:20:52.970\nBecause what if a hacker breaks\ninto one of your instances.\n\n410\n00:20:52.970 --> 00:20:54.500\nThey can then leapfrog and\n\n411\n00:20:54.500 --> 00:20:57.970\nattack all of your other ones because\nthey're behind the firewall at that point.\n\n412\n00:20:57.970 --> 00:20:59.450\nSo we've gotta be careful with that.\n\n413\n00:20:59.450 --> 00:21:03.412\nBut the tools are there- we just\nneed to make sure we set it up.\n\n414\n00:21:03.412 --> 00:21:06.100\nAll right, the last thing that I\nneed to talk about is storage.\n\n415\n00:21:06.100 --> 00:21:08.860\nI've kind of already mentioned\nstorage a little bit in that\n\n416\n00:21:08.860 --> 00:21:10.960\nall storage is virtualized.\n\n417\n00:21:10.960 --> 00:21:12.790\nSo we never see a raw disk,\n\n418\n00:21:12.790 --> 00:21:16.870\nwe are seeing a virtualized\nDisk that doesn't truly exist.\n\n419\n00:21:16.870 --> 00:21:18.850\nIt's all stored in a file on the back end.\n\n420\n00:21:18.850 --> 00:21:23.690\nWell, that file in the back end is\nnormally EBS, Elastic Block Store.\n\n421\n00:21:23.690 --> 00:21:25.820\nRemember that when you\nspin up an instance,\n\n422\n00:21:25.820 --> 00:21:27.150\nthere's two types of storage you have.\n\n423\n00:21:27.150 --> 00:21:31.240\nYou have instant storage and\nyou have Elastic Block Store.\n\n424\n00:21:31.240 --> 00:21:35.660\nInstant storage is not designed for\npermanent data.\n\n425\n00:21:35.660 --> 00:21:39.860\nThat if you have an instance and\nthe hardware underneath it fails,\n\n426\n00:21:39.860 --> 00:21:43.790\nthe instance storage is not replicated\nto other AZs or even other racks].\n\n427\n00:21:43.790 --> 00:21:46.929\nSo they'll move your\ninstance to another host.\n\n428\n00:21:48.130 --> 00:21:50.730\nAnd it'll come up and anything you had\nin the instance storage would be gone.\n\n429\n00:21:50.730 --> 00:21:52.300\nSo we don't normally use that.\n\n430\n00:21:52.300 --> 00:21:55.210\nOur data usually goes in EBS,\nElastic Block Store.\n\n431\n00:21:55.210 --> 00:21:59.180\nElastic Block Store is replicated\nwithin an availability zone.\n\n432\n00:22:00.340 --> 00:22:03.640\nSo if you have failed hardware\nit'll just flip over to another\n\n433\n00:22:03.640 --> 00:22:05.650\nhost right there in the same AZ.\n\n434\n00:22:05.650 --> 00:22:09.046\nAnd you don't even notice, it just\nkeeps going and you're in business.\n\n435\n00:22:09.046 --> 00:22:14.290\nSo using Elastic Block Store is typically\nwhat we wanna do to maintain availability.\n\n436\n00:22:14.290 --> 00:22:17.449\nEBS also gives us\nthe ability to do snapshots.\n\n437\n00:22:17.449 --> 00:22:20.871\nAnd once you take a snapshot of\nElastic Block Store storage,\n\n438\n00:22:20.871 --> 00:22:24.170\nyou can then build new volumes\nbased off of that snapshot.\n\n439\n00:22:24.170 --> 00:22:28.170\nAnd the new volume is gonna be an other\navailability zones or even other regions,\n\n440\n00:22:28.170 --> 00:22:30.660\nyou can transfer a snapshot\nto another region And\n\n441\n00:22:30.660 --> 00:22:32.210\nspin up instances somewhere else.\n\n442\n00:22:32.210 --> 00:22:35.360\nThat gives you even more availability.\n\n443\n00:22:35.360 --> 00:22:38.180\nBut a quick warning about snapshots.\n\n444\n00:22:38.180 --> 00:22:42.300\nWith snapshots, we've always gotta worry\nabout whether our data is consistent.\n\n445\n00:22:42.300 --> 00:22:44.990\nAnd so, I think I addressed\nthat in another episode where\n\n446\n00:22:44.990 --> 00:22:48.680\nif you're writing data to the drive when\na snapshot is taken, that causes problems.\n\n447\n00:22:48.680 --> 00:22:51.410\nSo, ideally, you shut the instance down,\nyou stop it.\n\n448\n00:22:51.410 --> 00:22:53.790\nAnd take the snapshot while it's stopped.\n\n449\n00:22:53.790 --> 00:22:54.640\nIf you can't do that,\n\n450\n00:22:54.640 --> 00:22:59.050\nif it's mission critical, then you need to\nfind another way to replicate that data.\n\n451\n00:22:59.050 --> 00:23:01.800\nSometimes, relying on the storage\nreplication that Amazon\n\n452\n00:23:01.800 --> 00:23:02.880\nprovides is not enough.\n\n453\n00:23:02.880 --> 00:23:04.060\nFor example, a database.\n\n454\n00:23:04.060 --> 00:23:07.140\nIf I have a database server,\nI'm not gonna shut it down.\n\n455\n00:23:07.140 --> 00:23:08.680\nThat's crazy talk.\n\n456\n00:23:08.680 --> 00:23:10.800\nAnd the master is where all\nthe writes are happening,\n\n457\n00:23:10.800 --> 00:23:12.060\nso the master's what I wanna back up.\n\n458\n00:23:12.060 --> 00:23:14.240\nIf I shut it down,\nnow we can't write data to the database.\n\n459\n00:23:14.240 --> 00:23:15.958\nSo I have to go read-only for\na few moments.\n\n460\n00:23:15.958 --> 00:23:18.010\nThat’s not gonna happen.\n\n461\n00:23:18.010 --> 00:23:21.730\nWell every database software\nthat’s worth its salt\n\n462\n00:23:21.730 --> 00:23:24.000\nhas its own replication technology.\n\n463\n00:23:24.000 --> 00:23:26.710\nIf I deploy MariaDB or Aurora,\n\n464\n00:23:26.710 --> 00:23:30.040\nif I do Redshift they all have their\nown replication technology built in.\n\n465\n00:23:30.040 --> 00:23:30.885\nThat’s not using,\n\n466\n00:23:30.885 --> 00:23:35.470\nit’s not necessarily not using, it’s\nnot relying on the Elastic Block Store,\n\n467\n00:23:35.470 --> 00:23:38.550\nit’s just supplementing it with\nits own replication, all right.\n\n468\n00:23:38.550 --> 00:23:41.990\nNow that replication is there\nto give me availability.\n\n469\n00:23:41.990 --> 00:23:45.840\nIf one instance fails, I've got\nanother copy that's ready to go and\n\n470\n00:23:45.840 --> 00:23:47.520\ntake over at a moment's notice.\n\n471\n00:23:47.520 --> 00:23:51.280\nBut it is not a substitute for backups.\n\n472\n00:23:51.280 --> 00:23:52.150\nBecause if I go in and\n\n473\n00:23:52.150 --> 00:23:55.770\nI delete a bunch of junk out of my\ndatabase, the delete gets replicated.\n\n474\n00:23:55.770 --> 00:23:57.900\nAnd it gets deleted out of the copies too.\n\n475\n00:23:57.900 --> 00:23:59.590\nIt doesn't protect me from that.\n\n476\n00:23:59.590 --> 00:24:02.260\nSo don't rely on replication.\n\n477\n00:24:02.260 --> 00:24:06.110\nReplication gives you availability\nit doesn't give durability.\n\n478\n00:24:06.110 --> 00:24:06.861\nDurability of your data.\n\n479\n00:24:06.861 --> 00:24:08.675\nYour data could get deleted.\n\n480\n00:24:08.675 --> 00:24:11.460\nAnd the database is online\njust fine it's working.\n\n481\n00:24:11.460 --> 00:24:12.930\nJust your data's gone.\n\n482\n00:24:12.930 --> 00:24:13.930\nSo that's where snapshots come in.\n\n483\n00:24:13.930 --> 00:24:15.380\nSo we still wanna do snapshots.\n\n484\n00:24:15.380 --> 00:24:18.080\nYou still want to have those\nback-ups in case you need them.\n\n485\n00:24:18.080 --> 00:24:19.210\nHopefully you don't.\n\n486\n00:24:19.210 --> 00:24:21.850\nBut then you've got your\nreplicas that are also providing.\n\n487\n00:24:21.850 --> 00:24:25.300\nAnd combined,\nnow we get the best of both efforts.\n\n488\n00:24:25.300 --> 00:24:28.620\nNow, with a database, if you use\nthe RDS service, it's all done for\n\n489\n00:24:28.620 --> 00:24:29.780\nus automatically.\n\n490\n00:24:29.780 --> 00:24:33.440\nBut if you're putting databases on EC2\ninstance, you've gotta do that manually.\n\n491\n00:24:33.440 --> 00:24:37.470\nYou've gotta set that up and make sure\nthat's part of your security plan.\n\n492\n00:24:37.470 --> 00:24:38.840\n&gt;&gt; Don, that's a lot of information,\n\n493\n00:24:38.840 --> 00:24:41.030\na lot of consideration that\nwe have to think about.\n\n494\n00:24:41.030 --> 00:24:43.110\nIt does look like we're coming\nto the end of another episode.\n\n495\n00:24:43.110 --> 00:24:46.170\nNow, I know we've got more when it\ncomes to cloud specific security, but\n\n496\n00:24:46.170 --> 00:24:48.890\nbefore we wrap this one up do you have any\nadditional words that you'd like to embark\n\n497\n00:24:48.890 --> 00:24:50.080\nto our viewers?\n\n498\n00:24:50.080 --> 00:24:51.734\n&gt;&gt; Don't forget all the stuff\nyou do on-premises.\n\n499\n00:24:51.734 --> 00:24:54.042\nMost of what you do on-premises\nyou can do in the cloud too.\n\n500\n00:24:54.042 --> 00:24:55.943\nSo if you have a large file share and\n\n501\n00:24:55.943 --> 00:25:00.019\nyou're used to just R syncing it\nsomewhere, you can do that in native US.\n\n502\n00:25:00.019 --> 00:25:02.861\nI can have an instance in US East,\nand instance in US West,\n\n503\n00:25:02.861 --> 00:25:05.140\nand just R synch data between them.\n\n504\n00:25:05.140 --> 00:25:08.080\nThere may be other technologies I can use,\nbut those still work, too.\n\n505\n00:25:08.080 --> 00:25:11.780\nSo anything you do on premises can\ntypically be done right in the cloud.\n\n506\n00:25:11.780 --> 00:25:13.740\nAnd you can maintain\nyour same processes and\n\n507\n00:25:13.740 --> 00:25:16.460\nthen supplement it with all this new\nshiny stuff that really works better.\n\n508\n00:25:16.460 --> 00:25:19.385\nSo just take advantage of every\nresource available to you.\n\n509\n00:25:19.385 --> 00:25:20.770\n&gt;&gt; Don, great place to wrap this one up.\n\n510\n00:25:20.770 --> 00:25:22.120\nWe appreciate having you here and\n\n511\n00:25:22.120 --> 00:25:24.500\nwe appreciate us always\nyou the viewer watching.\n\n512\n00:25:24.500 --> 00:25:27.350\nSigning out for ITProTV,\nI've been your host Wes Brian.\n\n513\n00:25:27.350 --> 00:25:30.567\n&gt;&gt; And I'm Don Pezet\n&gt;&gt; And we'll see you next time.\n\n514\n00:25:30.567 --> 00:25:36.559\n[MUSIC]\n\n515\n00:25:36.559 --> 00:25:39.637\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "209558291"
        },
        {
          "description": "In this episode, Wes and Don dive into security inside of AWS. They will discuss cloud service-specific security, specifically looking at the networking side of AWS security. They will talk about Elastic Load Balancing (ELB) security as well as Virtual Private Cloud Security.",
          "length": "1594",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-2-cloud_service-specific_security_pt2-032017.00_28_12_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-2-cloud_service-specific_security_pt2-032017.00_28_12_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-2-cloud_service-specific_security_pt2-032017.00_28_12_20.Still001-sm.jpg",
          "title": "Cloud Service Specific Security Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:06.306\nWelcome to ITPRO.TV,\nI'm your host [CROSSTALK].\n\n2\n00:00:06.306 --> 00:00:08.430\n[MUSIC]\n\n3\n00:00:08.430 --> 00:00:11.063\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:11.063 --> 00:00:12.010\n[MUSIC]\n\n5\n00:00:12.010 --> 00:00:15.290\nHello, and welcome to ITProTV,\nI'm your show host, Wes Bryan.\n\n6\n00:00:15.290 --> 00:00:16.590\nWe got a great show for you today,\n\n7\n00:00:16.590 --> 00:00:20.590\nwe're gonna be looking at the AWS\nCertified Solutions Architect Associates.\n\n8\n00:00:20.590 --> 00:00:23.190\nAnd joining us back in the studios\ntoday is none other than Mr.\n\n9\n00:00:23.190 --> 00:00:24.840\nDon Pezet, Don, how you doing, sir?\n\n10\n00:00:24.840 --> 00:00:29.510\n&gt;&gt; I'm doing great, Wes, ready to continue\nour adventure down securing AWS services.\n\n11\n00:00:29.510 --> 00:00:32.230\nYou'll remember in part one of this\nseries, we started talking about EC2\n\n12\n00:00:32.230 --> 00:00:35.060\ninstances, and\nsome of the different security concerns.\n\n13\n00:00:35.060 --> 00:00:40.050\nOr not so much concerns, just the security\ntools and resources that we have available\n\n14\n00:00:40.050 --> 00:00:43.130\ninside of EC2 to make our\nenvironment that much more secure.\n\n15\n00:00:43.130 --> 00:00:46.940\nWell, we're gonna switch gears here in\nthis episode, continuing with security,\n\n16\n00:00:46.940 --> 00:00:50.690\nnot completely switching, but jumping\nover to the networking side of things.\n\n17\n00:00:50.690 --> 00:00:55.490\nAnd networking is almost more important\nthan the EC2 site in a lot of cases\n\n18\n00:00:55.490 --> 00:01:00.250\nbecause all of our services get affected\nby networking one way or another.\n\n19\n00:01:00.250 --> 00:01:03.090\nWhen you deploy something like\nthe relational database service,\n\n20\n00:01:03.090 --> 00:01:06.530\nRDS, well there's database\ninstances behind the scenes.\n\n21\n00:01:06.530 --> 00:01:09.250\nBut you don't have to manage them,\nAmazon manages them for you, right?\n\n22\n00:01:09.250 --> 00:01:13.520\nSo the EC2 side there is kinda taken care\nof but they're attached to your VPC.\n\n23\n00:01:13.520 --> 00:01:15.330\nYou have to manage the network side,\n\n24\n00:01:15.330 --> 00:01:17.920\neven though everything else\nbehind the scene's taken care of.\n\n25\n00:01:17.920 --> 00:01:22.300\nSo, on the networking side there's\na couple of components that we really need\n\n26\n00:01:22.300 --> 00:01:22.880\nto focus on.\n\n27\n00:01:22.880 --> 00:01:26.440\nAnd the one I wanna start with\nis elastic load balancing.\n\n28\n00:01:26.440 --> 00:01:32.480\nBecause the ELBs are really the kind of\nkey ingredient to creating a resilient and\n\n29\n00:01:32.480 --> 00:01:35.890\nhighly available solution inside AWS.\n\n30\n00:01:35.890 --> 00:01:36.970\nSo let's take a look at ELB and\n\n31\n00:01:36.970 --> 00:01:40.590\nkind of talk about some of the things\nthat we need to think about on it.\n\n32\n00:01:40.590 --> 00:01:44.306\nNow ELB by itself,\nwhen you deploy an elastic load balancer,\n\n33\n00:01:44.306 --> 00:01:46.958\nit is actually in EC2 instance somewhere.\n\n34\n00:01:46.958 --> 00:01:50.346\nIt's usually more than one\nbecause they are multi AC and\n\n35\n00:01:50.346 --> 00:01:52.881\nyou can deploy them in multiple regions.\n\n36\n00:01:52.881 --> 00:01:55.910\nAn ELB is tied to a single region,\nso when I say multiple regions,\n\n37\n00:01:55.910 --> 00:01:59.340\nI mean we're deploying more than one\nELB to cover the different regions.\n\n38\n00:01:59.340 --> 00:02:02.740\nWe talked about that back in the DNS and\navailability episodes.\n\n39\n00:02:02.740 --> 00:02:04.530\nWell, when we deploy an ELB,\n\n40\n00:02:04.530 --> 00:02:06.890\nwe don't have to deal with\nthe instance behind the scenes.\n\n41\n00:02:06.890 --> 00:02:11.080\nBut it is the primary point of contact for\nyour customer, for your visitor, for\n\n42\n00:02:11.080 --> 00:02:12.460\nthe people that come to your website or\n\n43\n00:02:12.460 --> 00:02:15.350\nwhatever other resource it is\nthat you're load balancing.\n\n44\n00:02:15.350 --> 00:02:17.660\nAnd so, when a visitor hits your site,\n\n45\n00:02:17.660 --> 00:02:21.190\nthey hit the load balancer first then they\nhit your instances behind the scenes.\n\n46\n00:02:21.190 --> 00:02:25.330\nSo when an attacker attacks your site,\nwhat do they attack first?\n\n47\n00:02:25.330 --> 00:02:27.670\nThe load balancer,\nthat's what they hit first.\n\n48\n00:02:27.670 --> 00:02:30.410\nAnd then they get moved into\nan instance behind the scene.\n\n49\n00:02:30.410 --> 00:02:34.430\nWell, fortunately,\nthe load balancer has very,\n\n50\n00:02:34.430 --> 00:02:38.010\nvery limited availability to the public\nworld and even to the private world,\n\n51\n00:02:38.010 --> 00:02:40.270\neven in your VPC,\nthere's only so much you can do.\n\n52\n00:02:40.270 --> 00:02:45.290\nYou can't open up a root session\ninto your ELB's instance,\n\n53\n00:02:45.290 --> 00:02:46.630\nthey don't let you do that.\n\n54\n00:02:46.630 --> 00:02:48.970\nBut, there are still attacks\nthat can be performed and\n\n55\n00:02:48.970 --> 00:02:52.440\nif they can take the load balancer down,\nit doesn't matter how many hundreds or\n\n56\n00:02:52.440 --> 00:02:56.770\neven thousands of instances you might have\nbehind that load balancer, it's offline.\n\n57\n00:02:56.770 --> 00:02:59.510\nSo we've gotta make sure that we take\nsome precautions there to ensure that\n\n58\n00:02:59.510 --> 00:03:00.520\ndata is safe.\n\n59\n00:03:00.520 --> 00:03:07.170\nNow the primary area of risk with an ELB\nis the certificates, the SSL certificates.\n\n60\n00:03:07.170 --> 00:03:09.870\nWhen I have encrypted traffic\npassing through an ELB which\n\n61\n00:03:09.870 --> 00:03:11.150\nmost of us do these days, right?\n\n62\n00:03:11.150 --> 00:03:15.709\nWe see websites with SSL anywhere\nis getting more and more common.\n\n63\n00:03:15.709 --> 00:03:19.025\nSo, even you just doing some kind\nof mundane thing, like going and\n\n64\n00:03:19.025 --> 00:03:21.880\nchecking the news and\nthe web page is encrypted, right?\n\n65\n00:03:21.880 --> 00:03:23.370\nSo most people moved to that.\n\n66\n00:03:23.370 --> 00:03:26.806\nSo when you bring up a web application\ninside a VC2, you're gonna stick a load\n\n67\n00:03:26.806 --> 00:03:29.894\nbalancer in front of it,\nyou're gonna deal with encrypted traffic.\n\n68\n00:03:29.894 --> 00:03:32.402\nWell encrypted traffic is hard to\nload balance cuz the load balancer\n\n69\n00:03:32.402 --> 00:03:33.510\ncan't see it.\n\n70\n00:03:33.510 --> 00:03:34.800\nSo what do we do?\n\n71\n00:03:34.800 --> 00:03:38.470\nWe take our certificate and\nwe load into ELB.\n\n72\n00:03:38.470 --> 00:03:40.530\nRight, let me just kind of\nshow you really quick here.\n\n73\n00:03:40.530 --> 00:03:45.550\nIf I jump in and I'll create a load\nbalancer here just real fast.\n\n74\n00:03:45.550 --> 00:03:48.130\nRemember on this exam we're not\nworried about how to do things so\n\n75\n00:03:48.130 --> 00:03:50.160\nmuch as the when and why.\n\n76\n00:03:50.160 --> 00:03:54.030\nBut when you create a load balancer and\nyou go to whip one up,\n\n77\n00:03:54.030 --> 00:03:57.480\nyou can choose the standard\nload balancer of HTTP and\n\n78\n00:03:57.480 --> 00:04:00.950\nHTTPS cuz most everybody\nis doing a web application.\n\n79\n00:04:00.950 --> 00:04:03.580\nYou can go classic where you\ncan load balance any port, but\n\n80\n00:04:03.580 --> 00:04:05.860\nnormally we're gonna go\nwith the newer model.\n\n81\n00:04:05.860 --> 00:04:07.720\nAnd when you go with the newer model,\n\n82\n00:04:07.720 --> 00:04:09.980\nyou're gonna have your\nload balancer protocol.\n\n83\n00:04:09.980 --> 00:04:12.080\nAnd if you just do HTTP,\nit's not a big deal.\n\n84\n00:04:12.080 --> 00:04:17.200\nBut if you do HTTPS, it's got to\nknow how to encrypt and decrypt,\n\n85\n00:04:17.200 --> 00:04:22.620\nreally the other way around,\ndecrypt and then encrypt the traffic.\n\n86\n00:04:22.620 --> 00:04:25.530\nBecause it's gotta be able to inspect the\ntraffic to figure out where to send it.\n\n87\n00:04:25.530 --> 00:04:28.830\nAnd so we've gotta put our certificate\nhere in the load balancer.\n\n88\n00:04:28.830 --> 00:04:31.050\nAnd if I were to move forward on this,\n\n89\n00:04:31.050 --> 00:04:35.440\nlet me just chuck this into a couple\nof AZ's, kinda have to give it a name.\n\n90\n00:04:35.440 --> 00:04:37.700\nThere's that whole name part, and\n\n91\n00:04:37.700 --> 00:04:41.490\nthen right here on the very next screen\nit asks me about my certificate, right.\n\n92\n00:04:41.490 --> 00:04:45.880\nSo, I need to take the script again and\nwe're talking public and private key here.\n\n93\n00:04:45.880 --> 00:04:49.020\nWe got to get those loaded into the load\nbouncers so that it can decrypt and\n\n94\n00:04:49.020 --> 00:04:50.910\nhandle that traffic and make decisions.\n\n95\n00:04:50.910 --> 00:04:55.430\nNow that means that there's some really\nsensitive data stored right here.\n\n96\n00:04:55.430 --> 00:04:58.740\nAnd if I'm using a really weak form\nof encryption, that can be a problem.\n\n97\n00:04:58.740 --> 00:05:03.180\nWell, the load balancer is\nconfigured very, very well.\n\n98\n00:05:03.180 --> 00:05:06.553\nAmazon has hardened it, they've put a lot\nof effort into it because they know how\n\n99\n00:05:06.553 --> 00:05:07.955\nimportant the load balancer is.\n\n100\n00:05:07.955 --> 00:05:10.926\nAnd you don't hear reports about\npeople hacking into load balancers,\n\n101\n00:05:10.926 --> 00:05:12.570\nbecause it hasn't happened, right?\n\n102\n00:05:12.570 --> 00:05:14.070\nOr at least that we know about.\n\n103\n00:05:14.070 --> 00:05:17.790\nWell sometimes you can't\njust rely on that.\n\n104\n00:05:17.790 --> 00:05:23.260\nAmazon is PCI compliant,\nthey have gone through\n\n105\n00:05:23.260 --> 00:05:29.170\nthe SSA16 certification, the soc one,\nsoc two, soc three audits.\n\n106\n00:05:29.170 --> 00:05:34.000\nThey've done all that stuff, but\nhow can you be sure it's configured\n\n107\n00:05:34.000 --> 00:05:36.920\nexactly the way you need it for\nyour own regulatory compliance?\n\n108\n00:05:36.920 --> 00:05:39.630\nThere are things you can\ndo beyond what's in the UI.\n\n109\n00:05:39.630 --> 00:05:41.817\nRight, when I come in here\nto upload a certificate,\n\n110\n00:05:41.817 --> 00:05:44.410\nnotice this little security policy here.\n\n111\n00:05:44.410 --> 00:05:46.810\nI can change the security\npolicy that this is using.\n\n112\n00:05:46.810 --> 00:05:48.250\nAnd I'll see a couple here in the choice,\n\n113\n00:05:48.250 --> 00:05:52.240\nthese are our predefined\npolicies that they've created.\n\n114\n00:05:52.240 --> 00:05:56.670\nAnd those are gonna dictate what\ncypher suites I support, right?\n\n115\n00:05:56.670 --> 00:05:57.887\nWhen I have one certificate,\n\n116\n00:05:57.887 --> 00:06:01.270\nthe certificate doesn't actually\ndetermine the cypher suite that I use.\n\n117\n00:06:01.270 --> 00:06:03.540\nI can use multiple cypher\nsuites with a certificate and\n\n118\n00:06:03.540 --> 00:06:05.500\nsome are stronger than others, right?\n\n119\n00:06:05.500 --> 00:06:10.670\nWe refer to secure stuff, notice right\nhere, Upload a new SSL certificate, right?\n\n120\n00:06:10.670 --> 00:06:13.740\nThat term, SSL,\nthat's been around a long time.\n\n121\n00:06:13.740 --> 00:06:16.990\nIt's kind of ubiquitous, when we talk\nabout secure web pages we think SSL, but\n\n122\n00:06:16.990 --> 00:06:22.620\nthe reality is every version of SSL\nhas been compromised and very easy.\n\n123\n00:06:22.620 --> 00:06:26.550\nVery easy to compromise on a monitored\ncomputer, SSL is no longer reliable.\n\n124\n00:06:26.550 --> 00:06:32.360\nAnd so SSL was replaced years ago with\nTLS, Transport Layer Security, right?\n\n125\n00:06:32.360 --> 00:06:36.580\nAnd so SSL and I don't remember all the\nversion numbers, there's like version 1,\n\n126\n00:06:36.580 --> 00:06:40.040\nversion 1.1, version 2,\neven SSL version 3, all compromised.\n\n127\n00:06:40.040 --> 00:06:44.550\nAnd now we have TLS version 1,\n1.1 and 1.2, and even with TLS,\n\n128\n00:06:44.550 --> 00:06:49.160\nTLS version 1.0 has been shown to be weak.\n\n129\n00:06:49.160 --> 00:06:51.830\nAnd so you're supposed to be using 1.1 or\nhigher.\n\n130\n00:06:51.830 --> 00:06:53.820\nSo nobody uses SSL anymore.\n\n131\n00:06:54.840 --> 00:06:57.640\nWell, I shouldn't say nobody, I bet if we\ngo and scan the Internet there's plenty of\n\n132\n00:06:57.640 --> 00:06:59.600\npeople that do because they\ndon't know any better, right?\n\n133\n00:06:59.600 --> 00:07:02.720\nWell when you choose one of these\npre-built security policies,\n\n134\n00:07:02.720 --> 00:07:06.380\nyou're choosing something\nthat Amazon has pre-defined.\n\n135\n00:07:06.380 --> 00:07:12.270\nAnd some of it they pre-defined as long as\nthree years ago or two years ago, 2015.\n\n136\n00:07:12.270 --> 00:07:14.370\nThere's older policies if you\ndo a classic load balancer,\n\n137\n00:07:14.370 --> 00:07:17.595\nyou'll see even more, well actually\nI've got the page, where is that?\n\n138\n00:07:17.595 --> 00:07:21.575\nPulled up, here,\nhere's the pre-defined policies, right.\n\n139\n00:07:21.575 --> 00:07:23.695\nAnd there are some older\nones that are out there, but\n\n140\n00:07:23.695 --> 00:07:27.705\nthe May of 2015 was the oldest one that\nwe saw on that screen a moment ago.\n\n141\n00:07:27.705 --> 00:07:32.416\nAnd if you look at the SSL protocols that\nare supported, here's TLS version 1,\n\n142\n00:07:32.416 --> 00:07:34.350\n1.1, 1.2.\n\n143\n00:07:34.350 --> 00:07:39.090\nAnd see how in the May of 2015 it's\nsupported, but then if we bump up and\n\n144\n00:07:39.090 --> 00:07:42.851\nget into January of 2017 which is very,\nvery current,\n\n145\n00:07:42.851 --> 00:07:46.028\nnow you no longer have support for\nTLS version 1.\n\n146\n00:07:46.028 --> 00:07:50.649\nSo if you require a certain level of\nencryption, a certain level of cypher\n\n147\n00:07:50.649 --> 00:07:54.610\nsuite, you may need to go and\nmanipulate the security policy.\n\n148\n00:07:54.610 --> 00:07:57.483\nIt's super easy to skip right over that\nwhen you configure a load balancer and\n\n149\n00:07:57.483 --> 00:07:58.286\ngo with the default.\n\n150\n00:07:58.286 --> 00:08:00.237\nWell fortunately, default.\n\n151\n00:08:00.237 --> 00:08:05.724\nIf we paid attention was, well, the\ndefault was actually August of 2016 and\n\n152\n00:08:05.724 --> 00:08:10.564\nif I look at August 2016 right here,\nit still supported TLS version\n\n153\n00:08:10.564 --> 00:08:15.400\n1 which has not been blown open\ncompromised like SSL, right?\n\n154\n00:08:15.400 --> 00:08:16.650\nBut it has been shown to be weak.\n\n155\n00:08:16.650 --> 00:08:18.770\nSo it's only a matter of time\nbefore it's blown open, so\n\n156\n00:08:18.770 --> 00:08:19.980\nwe're supposed to move away.\n\n157\n00:08:19.980 --> 00:08:21.190\nYou can do that.\n\n158\n00:08:21.190 --> 00:08:21.913\n&gt;&gt; Don, you know,\n\n159\n00:08:21.913 --> 00:08:25.330\nI know with any kind of encryption,\nlike for instance in VPN communications,\n\n160\n00:08:25.330 --> 00:08:28.723\nit takes a little bit of processor power\nto do the encryption and decryption.\n\n161\n00:08:28.723 --> 00:08:30.903\nHeck, that's why we need\nthings like VPN concentrators.\n\n162\n00:08:30.903 --> 00:08:35.101\nAnd I know that when you start bumping up\nthe cipher suites It can be a little bit\n\n163\n00:08:35.101 --> 00:08:39.110\ncomputational heavy, does ELB give\nus something to help with that?\n\n164\n00:08:39.110 --> 00:08:40.610\n&gt;&gt; It does, but you know what?\n\n165\n00:08:40.610 --> 00:08:43.451\nWe don't care about it because it's\nAmazon's problem, not ours, right?\n\n166\n00:08:43.451 --> 00:08:45.330\n[LAUGH] That's kind of the thing here.\n\n167\n00:08:45.330 --> 00:08:49.800\nWhen you use an ELB they charge you,\nyou pay for the ELB, but\n\n168\n00:08:49.800 --> 00:08:51.930\nit's their resources on the back end.\n\n169\n00:08:51.930 --> 00:08:55.460\nAnd ELBs actually scale out automatically,\nthey do it dynamically,\n\n170\n00:08:55.460 --> 00:09:00.270\nwe don't see that so if you need the\nstronger cypher suites, use them, right?\n\n171\n00:09:00.270 --> 00:09:03.127\nDo it, the resources are there,\ngo ahead and bump up to them.\n\n172\n00:09:03.127 --> 00:09:07.345\nPay attention to the documentation though,\nbecause like the page that I've got here,\n\n173\n00:09:07.345 --> 00:09:10.309\nwhere it's really showing all\nthe stuff that's available,\n\n174\n00:09:10.309 --> 00:09:12.988\nyou need to understand what's\nsupported in which one.\n\n175\n00:09:12.988 --> 00:09:15.210\nAnd that's going to\ninfluence your choices.\n\n176\n00:09:15.210 --> 00:09:18.430\nAnd we can pick some of\nthe really strong ones, but\n\n177\n00:09:18.430 --> 00:09:21.880\nit's easy to lose sight of\nwhich one support what.\n\n178\n00:09:21.880 --> 00:09:27.143\nAnd the other thing is you\ncan effect your clients.\n\n179\n00:09:27.143 --> 00:09:30.769\nIf you have a lot of clients that\nare still running Internet Explorer 6,\n\n180\n00:09:30.769 --> 00:09:34.943\nhopefully you don't have that, but\neven newer one's like Internet Explorer 9.\n\n181\n00:09:34.943 --> 00:09:38.106\nWhere it can cause problems if\nyou shut off TLS version one,\n\n182\n00:09:38.106 --> 00:09:42.330\nInternet Explorer 9 is not happy\nabout that, and it has some problems.\n\n183\n00:09:42.330 --> 00:09:46.740\nInternet Explorer 10 and 11 they work\nfine, or Edge, whatever, those work fine.\n\n184\n00:09:46.740 --> 00:09:50.710\nAnd as IT people, a lot of us,\nwe say, well just upgrade, whatever.\n\n185\n00:09:50.710 --> 00:09:54.350\nBut when you're a business and\nyou are selling products online you've\n\n186\n00:09:54.350 --> 00:09:57.380\ngot to make sure that your\nvisitors can log into the website.\n\n187\n00:09:57.380 --> 00:09:59.869\nAnd do it properly and\nsecurely and safely and\n\n188\n00:09:59.869 --> 00:10:04.206\nyou can't tell them, you need to upgrade\nyour web browser shop on our site.\n\n189\n00:10:04.206 --> 00:10:05.370\nEventually you can do that.\n\n190\n00:10:05.370 --> 00:10:07.620\nEventually it's far enough\nback that you can say that.\n\n191\n00:10:07.620 --> 00:10:11.010\nBut usually, you're gonna need to be\nable to support those type of customers.\n\n192\n00:10:11.010 --> 00:10:13.594\nSo don't ratchet it up too high.\n\n193\n00:10:13.594 --> 00:10:17.091\nNow, these pre-defined security\npolicies are all created by Amazon,\n\n194\n00:10:17.091 --> 00:10:18.475\nthey're already in place.\n\n195\n00:10:18.475 --> 00:10:22.377\nYou can deploy them via your\nown definitions in the API.\n\n196\n00:10:22.377 --> 00:10:25.340\nSee here, we're just kinda calling\none of these standard policy names.\n\n197\n00:10:25.340 --> 00:10:28.897\nOr if you're using the UI, it's just\na drop down box, and you can choose.\n\n198\n00:10:28.897 --> 00:10:32.590\nAnd again, I only see four here,\nbecause I'm in a modern load balancer.\n\n199\n00:10:32.590 --> 00:10:35.335\nIf you do the classic one you actually\nsee a few others that are available.\n\n200\n00:10:35.335 --> 00:10:37.127\nSo on the load balancer side,\n\n201\n00:10:37.127 --> 00:10:40.830\nthose are some of the things\nthat we need to be aware of.\n\n202\n00:10:40.830 --> 00:10:44.061\nThere's another option that you\ncan enable the via the API called\n\n203\n00:10:44.061 --> 00:10:45.760\nPerfect Forward Secrecy.\n\n204\n00:10:45.760 --> 00:10:48.991\nLet me talk about PFS for a minute.\n\n205\n00:10:48.991 --> 00:10:52.420\nI read a number of VPN\nbooks over the years.\n\n206\n00:10:52.420 --> 00:10:56.430\nAnd a lot of them will say to make\na connection easier, turn off PFS.\n\n207\n00:10:56.430 --> 00:10:58.330\nWell, let's talk about\nwhat PFS is real quick so\n\n208\n00:10:58.330 --> 00:11:00.880\nwe understand whether it's valuable to us.\n\n209\n00:11:00.880 --> 00:11:04.820\nWhen we create an encrypted\nsession to a server,\n\n210\n00:11:04.820 --> 00:11:07.910\nthere's a private key and a public key.\n\n211\n00:11:07.910 --> 00:11:12.670\nThe public key is used to encrypt data and\nthe private key is used to decrypt data.\n\n212\n00:11:13.780 --> 00:11:17.180\nWell, the public key gets\nrotated with each session.\n\n213\n00:11:17.180 --> 00:11:22.387\nIf Wes goes to Amazon.com right now and\nI go to Amazon.com right now.\n\n214\n00:11:22.387 --> 00:11:25.986\nThe same private key is being used for\nboth our sessions but Wes is getting\n\n215\n00:11:25.986 --> 00:11:29.600\na public key for his session and\nI'm getting a public key for my session.\n\n216\n00:11:29.600 --> 00:11:31.540\nWe're getting different public keys,\nright?\n\n217\n00:11:31.540 --> 00:11:34.870\nSo when we encrypt things and\nsend it in, that's going along and\n\n218\n00:11:34.870 --> 00:11:36.500\ngetting it moved into the system.\n\n219\n00:11:36.500 --> 00:11:40.190\nWell, even if we used the same public key,\nit wouldn't matter because we can only\n\n220\n00:11:40.190 --> 00:11:43.300\nencrypt data,\nthe other side is going to decrypt it.\n\n221\n00:11:43.300 --> 00:11:46.070\nBut, that's for us sending data to Amazon.\n\n222\n00:11:46.070 --> 00:11:48.260\nWhat about when Amazon sends data to us?\n\n223\n00:11:48.260 --> 00:11:51.580\nWell, a temporary private\nkey will get generated.\n\n224\n00:11:51.580 --> 00:11:55.010\nOne that's generated based\non the original keys.\n\n225\n00:11:55.010 --> 00:11:58.830\nAnd then a temporary public key will\nget generated and sent to Amazon, so\n\n226\n00:11:58.830 --> 00:12:00.280\nthat Amazon can reply back.\n\n227\n00:12:00.280 --> 00:12:01.890\nNow, if somebody is\nmonitoring that session,\n\n228\n00:12:01.890 --> 00:12:04.260\nthey can intercept both the private\nkeys when they cross the network.\n\n229\n00:12:05.410 --> 00:12:07.550\nThat’s not going to do him a lot of\ngood because they can encrypt data but\n\n230\n00:12:07.550 --> 00:12:09.200\nthey can't decrypt it, right.\n\n231\n00:12:09.200 --> 00:12:13.730\nBut now the session is up and\nthere is that possibility that\n\n232\n00:12:13.730 --> 00:12:18.410\nsomebody intercepted both public keys and\nthey could send a forged\n\n233\n00:12:18.410 --> 00:12:23.630\ntransmit from either side and potentially\ninject traffic into that tunnel.\n\n234\n00:12:23.630 --> 00:12:26.029\nIt's not likely but it is possible.\n\n235\n00:12:26.029 --> 00:12:29.161\nWith PFS what it does is it says okay\nwe're gonna go through that whole\n\n236\n00:12:29.161 --> 00:12:30.619\nhandshake that SSL or TLS does,\n\n237\n00:12:30.619 --> 00:12:34.555\nwe're gonna build up that encrypted\nsession like I described a moment ago.\n\n238\n00:12:34.555 --> 00:12:37.050\nBut then as soon as the tunnel is up,\n\n239\n00:12:37.050 --> 00:12:40.490\nthe next thing we're gonna do\nis generate a whole new key.\n\n240\n00:12:40.490 --> 00:12:45.360\nWe're gonna generate a whole new private\nkey and public key and transmit,\n\n241\n00:12:45.360 --> 00:12:49.300\nor a lot of times it will\ndo a symmetric key so\n\n242\n00:12:49.300 --> 00:12:53.490\nit's just a private key straight across\nthe tunnel, and it'll use that new key.\n\n243\n00:12:53.490 --> 00:12:57.695\nTo encrypt and decrypt everything just for\nthat session until the session is done.\n\n244\n00:12:57.695 --> 00:13:00.615\n&gt;&gt; Don, does that help with\nthings like confidentiality and\n\n245\n00:13:00.615 --> 00:13:04.790\ntrying to help strengthen ourselves\nagainst things like replay attacks?\n\n246\n00:13:04.790 --> 00:13:07.120\n&gt;&gt; Absolutely, because If you\nthink about that private key,\n\n247\n00:13:07.120 --> 00:13:09.090\nthe private key that starts\nthis whole mess, right.\n\n248\n00:13:09.090 --> 00:13:14.520\nWe create a private key and\nwe take it to a certificate authority,\n\n249\n00:13:14.520 --> 00:13:18.040\nsomebody like Amazon or\nDigiCert or VeriSign,\n\n250\n00:13:18.040 --> 00:13:19.910\nand we get them the digitally\nsign the certificate.\n\n251\n00:13:19.910 --> 00:13:21.290\nThey charge you money for that.\n\n252\n00:13:21.290 --> 00:13:23.670\nAnd so when you do it, you buy it for\na certain period of time.\n\n253\n00:13:23.670 --> 00:13:27.670\nYou say, I want this certificate to be\ngood for two years, one year, three years,\n\n254\n00:13:27.670 --> 00:13:28.950\nwhatever, right?\n\n255\n00:13:28.950 --> 00:13:31.420\nUsually one year is the lowest\nterm they sell for.\n\n256\n00:13:31.420 --> 00:13:35.140\nWell, that means I'm going to\nuse that key for an entire year.\n\n257\n00:13:35.140 --> 00:13:39.890\nThat means that attackers have an entire\nyear to try and compromise that key, but\n\n258\n00:13:39.890 --> 00:13:44.780\nif I'm using PFS, every single session\nit's going to generate its own key for\n\n259\n00:13:44.780 --> 00:13:45.349\nthat session.\n\n260\n00:13:46.360 --> 00:13:49.369\nSessions don't normally last\nmore than five minutes.\n\n261\n00:13:49.369 --> 00:13:51.143\nIf somebody's actively\nbrowsing your page and\n\n262\n00:13:51.143 --> 00:13:53.685\ndoing more then maybe they stay in\nthere for a longer period of time.\n\n263\n00:13:53.685 --> 00:13:55.090\nLet's say it's 24 hours.\n\n264\n00:13:55.090 --> 00:13:58.540\nSomebody just on a hardcore bender,\nthey're watching Netflix and\n\n265\n00:13:58.540 --> 00:14:00.960\nthey're binge watching some\nnew season of something.\n\n266\n00:14:00.960 --> 00:14:02.560\nAnd they stay on there for 24 hours.\n\n267\n00:14:02.560 --> 00:14:03.790\nWell, great.\n\n268\n00:14:03.790 --> 00:14:06.630\nBut at the end of that\nsession that key is gone and\n\n269\n00:14:06.630 --> 00:14:08.320\nis no longer use anywhere it's gone.\n\n270\n00:14:08.320 --> 00:14:12.130\nPFS gives us that perfect level, right?\n\n271\n00:14:12.130 --> 00:14:14.670\nSo, it's an extra layer,\nit takes a little extra work.\n\n272\n00:14:14.670 --> 00:14:17.580\nYour browser has to support it,\nyour clients have to support it.\n\n273\n00:14:17.580 --> 00:14:20.013\nBut if you can do,\nyou can get a really strong session there.\n\n274\n00:14:20.013 --> 00:14:21.668\nSo, the more sensitive your data is,\n\n275\n00:14:21.668 --> 00:14:24.240\nthe more likely you're\ngoing to want PFS enabled.\n\n276\n00:14:24.240 --> 00:14:27.380\nAnd you can dive into the API and turn\nthat on inside of your load balancer and\n\n277\n00:14:27.380 --> 00:14:29.590\nhave it up and going if you need that.\n\n278\n00:14:29.590 --> 00:14:30.850\n&gt;&gt; You know in past episodes, Don,\n\n279\n00:14:30.850 --> 00:14:33.950\nyou've talked about things like,\nwhat is it, the cloud trail for auditing.\n\n280\n00:14:33.950 --> 00:14:35.250\nDo we get some kind of auditing or\n\n281\n00:14:35.250 --> 00:14:39.240\nvisibility as far as logging\nwhen it comes to ELB as well?\n\n282\n00:14:39.240 --> 00:14:43.756\n&gt;&gt; Absolutely, it's really special when\nyou have https because logging with https\n\n283\n00:14:43.756 --> 00:14:48.283\nis really hard because it's encrypted so\nyou just get header data and that's it.\n\n284\n00:14:48.283 --> 00:14:49.806\nNot a whole lot of information.\n\n285\n00:14:49.806 --> 00:14:53.089\nBut when we've got our certificates\nstored in the load balancer,\n\n286\n00:14:53.089 --> 00:14:57.191\nnow I can actually see the data, interpret\nit, and report back into cloud trail and\n\n287\n00:14:57.191 --> 00:14:59.844\nother areas so\nwe can troubleshoot and monitor that.\n\n288\n00:14:59.844 --> 00:15:03.373\nIf we start seeing a lot of connections\nwhere people are trying to negotiate\n\n289\n00:15:03.373 --> 00:15:04.724\na weak level of encryption.\n\n290\n00:15:04.724 --> 00:15:07.272\nWe can identify that and say wow,\nwe got a lot of customers that are being\n\n291\n00:15:07.272 --> 00:15:09.500\nblocked because we chose\nsomething too strong.\n\n292\n00:15:09.500 --> 00:15:14.900\nOr we can look at it and say,\nnobody is connecting with TLS 1 anymore.\n\n293\n00:15:14.900 --> 00:15:17.997\nSo let's just turn it off and\nget it with 1.1 and 1.2.\n\n294\n00:15:17.997 --> 00:15:20.855\nAll right let's go ahead and make it\nstronger now, because we don't have\n\n295\n00:15:20.855 --> 00:15:23.865\nanybody being affected with the older one,\nand we can tighten our security.\n\n296\n00:15:23.865 --> 00:15:27.734\nAll right now, ELBs are probably\nthe most targeted attack point in\n\n297\n00:15:27.734 --> 00:15:33.160\nyour network because that's the facing,\nyou know, the customer facing side.\n\n298\n00:15:33.160 --> 00:15:37.632\nBut the other part that goes right\nalongside the ELV is the virtual\n\n299\n00:15:37.632 --> 00:15:39.429\nprivate cloud, the VPC.\n\n300\n00:15:39.429 --> 00:15:43.759\nEvery ELB resides where it can have\nnodes that are attached to a VPC and\n\n301\n00:15:43.759 --> 00:15:48.180\nyou've got your availability zones\nbehind the scenes also, right?\n\n302\n00:15:48.180 --> 00:15:51.000\nBut all of that is kind of tied\ninto your virtual private cloud.\n\n303\n00:15:51.000 --> 00:15:54.560\nAnd so we need to make sure that it's\nconfigured as securely as possible also.\n\n304\n00:15:54.560 --> 00:15:57.600\nFortunately, VPCs are pretty\nsecure by default, all right.\n\n305\n00:15:57.600 --> 00:15:59.792\nEspecially if you're creating custom ones,\nright.\n\n306\n00:15:59.792 --> 00:16:03.412\nYour default one allows any traffic out\nand allows nodes to talk to each other.\n\n307\n00:16:03.412 --> 00:16:05.148\nSo your default one's not the most secure.\n\n308\n00:16:05.148 --> 00:16:07.648\nBut the ones that you create\non your own are very secure.\n\n309\n00:16:07.648 --> 00:16:11.076\nAnd then you could tighten them and add or\nweaken them or whatever it is that you\n\n310\n00:16:11.076 --> 00:16:14.180\nneed to do to get them configured\nthe way that you want, right?\n\n311\n00:16:14.180 --> 00:16:20.050\nBut VPCs, if they're misconfigured, can\nallow for leap frog attacks, can allow for\n\n312\n00:16:20.050 --> 00:16:23.940\nsomebody to bounce through your systems\nand start accessing other nodes.\n\n313\n00:16:23.940 --> 00:16:27.646\nIf you have one weak link in the chain,\neverything kinda falls apart.\n\n314\n00:16:27.646 --> 00:16:30.184\nSo we need to make sure we take advantage\nof all of the resources in the VPC.\n\n315\n00:16:30.184 --> 00:16:31.960\nAnd I know we talked\nabout several of them but\n\n316\n00:16:31.960 --> 00:16:33.592\nlet's kinda just recount a few of them.\n\n317\n00:16:33.592 --> 00:16:38.400\nI've got a diagram here that shows\nan example of how we would leverage a VPC.\n\n318\n00:16:38.400 --> 00:16:41.788\nAnd notice here the VPC,\nthe little blue cloud and\n\n319\n00:16:41.788 --> 00:16:44.950\nit's the white rectangle\nhere in the middle.\n\n320\n00:16:44.950 --> 00:16:46.836\nNotice what it encompasses, right?\n\n321\n00:16:46.836 --> 00:16:50.621\nOne VPC can stretch across more\nthan one availability zone.\n\n322\n00:16:50.621 --> 00:16:52.561\nSo we can have availability and\n\n323\n00:16:52.561 --> 00:16:58.480\nredundancy thanks to stretching our nodes\nacross more than one availability zone.\n\n324\n00:16:58.480 --> 00:17:02.955\nBut then getting into and out of the VPC,\nthat's what I really wanna highlight.\n\n325\n00:17:02.955 --> 00:17:07.155\nBecause there's really two main\nways to get in and out of a VPC.\n\n326\n00:17:07.155 --> 00:17:08.995\nOne way is an Internet gateway,\n\n327\n00:17:08.995 --> 00:17:11.985\nand another way is a virtual\nprivate gateway, right?\n\n328\n00:17:11.985 --> 00:17:15.655\nA virtual private gateway, that would\nbe a VPN back to our own offices.\n\n329\n00:17:15.655 --> 00:17:17.885\nNormally that's pretty secure, right?\n\n330\n00:17:17.885 --> 00:17:20.975\nUnless an attacker breaks into the VPC and\n\n331\n00:17:20.975 --> 00:17:24.225\ncan now use the virtual private gateway\nto get into your private servers.\n\n332\n00:17:24.225 --> 00:17:26.310\nThat would not be so good, would it?\n\n333\n00:17:26.310 --> 00:17:29.380\nSo we've got to make sure that\nwe have our network ACLs and\n\n334\n00:17:29.380 --> 00:17:34.060\nour security groups configured in a way\nthat prevents that type of access.\n\n335\n00:17:34.060 --> 00:17:37.590\nDo not trust either side of this equation.\n\n336\n00:17:37.590 --> 00:17:40.900\nDon't trust the cloud servers and\ndon't trust your local servers, right?\n\n337\n00:17:40.900 --> 00:17:42.850\nYou should really never\ntrust your servers,\n\n338\n00:17:42.850 --> 00:17:44.980\neven though they're your own servers and\nyou configure them.\n\n339\n00:17:44.980 --> 00:17:47.340\nBecause once one of those\nservers gets broken into,\n\n340\n00:17:47.340 --> 00:17:49.370\nit's not your server anymore, right?\n\n341\n00:17:49.370 --> 00:17:52.210\nNow, it's somebody else's server and\nthat's why you don't trust it.\n\n342\n00:17:52.210 --> 00:17:54.350\nSo on a virtual private gateway,\n\n343\n00:17:54.350 --> 00:18:00.080\nyou should only be allowing\nthe minimum amount of access possible.\n\n344\n00:18:00.080 --> 00:18:04.410\nIf there's a database server up here that\nsynchronizes traffic to a database server\n\n345\n00:18:04.410 --> 00:18:08.760\ndown at the corporate office, then you\nshould only be allowing the ports used for\n\n346\n00:18:08.760 --> 00:18:10.710\nsynchronizing that data, right?\n\n347\n00:18:10.710 --> 00:18:14.760\nDon't allow it to establish SQL client or\nSQL client connectivity.\n\n348\n00:18:14.760 --> 00:18:18.100\nDon't allow it to use web traffic or\nwhatever.\n\n349\n00:18:18.100 --> 00:18:20.810\nJust the synchronization\nyou've gotta be very specific.\n\n350\n00:18:20.810 --> 00:18:23.870\n&gt;&gt; Looks like you got two entry points\nthere to each availability zone that you\n\n351\n00:18:23.870 --> 00:18:24.748\nneed to have secure.\n\n352\n00:18:24.748 --> 00:18:27.860\nWhat about in between, the router\ncommunication between the availability\n\n353\n00:18:27.860 --> 00:18:30.590\nzones, is this something that you can\ncontrol the communication as well?\n\n354\n00:18:30.590 --> 00:18:31.510\n&gt;&gt; You can, yeah.\n\n355\n00:18:31.510 --> 00:18:35.060\nThere's the master routing table\nthat you use that manipulates what\n\n356\n00:18:35.060 --> 00:18:35.600\nyou can route between.\n\n357\n00:18:35.600 --> 00:18:38.260\nAnd that's gonna control your access\nbetween the different subnets.\n\n358\n00:18:38.260 --> 00:18:40.880\nBecause in each availability zone,\nyou have to have a different subnet so\n\n359\n00:18:40.880 --> 00:18:42.540\nyou gotta be able to route between them.\n\n360\n00:18:42.540 --> 00:18:46.700\nSo the master routing table,\nit can be used for\n\n361\n00:18:46.700 --> 00:18:48.370\ncontrolling your access\nout to the Internet also.\n\n362\n00:18:48.370 --> 00:18:50.280\nBut usually you're gonna have\nan Internet gateway for that.\n\n363\n00:18:50.280 --> 00:18:52.490\nAnd the master routing table will\njust point to the Internet gateway.\n\n364\n00:18:52.490 --> 00:18:55.340\nSo that's usually where we'll\ncontrol the Internet side of things.\n\n365\n00:18:55.340 --> 00:18:58.600\nBut the routing table itself can\nabsolutely be used to control who even\n\n366\n00:18:58.600 --> 00:19:00.240\nsees what networks.\n\n367\n00:19:00.240 --> 00:19:04.076\nYou might have some VPCs that you want to\nbasically remain hidden from other VPCs.\n\n368\n00:19:04.076 --> 00:19:08.130\nSo, in an On-Premises network,\nwe typically have,\n\n369\n00:19:08.130 --> 00:19:13.780\nlike a private network, a DMZ network,\nand maybe a guest network or something.\n\n370\n00:19:13.780 --> 00:19:15.050\nAnd that's about it.\n\n371\n00:19:15.050 --> 00:19:17.950\nBut when you're up in the cloud,\nthese VPCs are all virtual,\n\n372\n00:19:17.950 --> 00:19:19.870\nbut you can create as\nmany of them as you want.\n\n373\n00:19:19.870 --> 00:19:21.430\nYou could have your database VPCs.\n\n374\n00:19:21.430 --> 00:19:24.250\nYou could have VPCs that were\nseparated out by product.\n\n375\n00:19:24.250 --> 00:19:29.410\nSo I have a web application for filing\ninsurance claims and that's in one VPC.\n\n376\n00:19:29.410 --> 00:19:33.670\nAnd then I have another product\nthat's online mortgage payments,\n\n377\n00:19:33.670 --> 00:19:36.570\nand so that's a separate VPC or\nit might even be more than one.\n\n378\n00:19:36.570 --> 00:19:39.940\nThe databases for\nthe mortgage product are in one VPC.\n\n379\n00:19:39.940 --> 00:19:43.000\nAnd then the web front-end, so\nthe mortgage product are in another VPC,\n\n380\n00:19:43.000 --> 00:19:45.820\ncuz I want customers to\nget to the web front-end,\n\n381\n00:19:45.820 --> 00:19:48.010\nI don't want customers\nto get to the database.\n\n382\n00:19:48.010 --> 00:19:51.660\nBut I do want the web front-end to get to\nthe database and now I can control that\n\n383\n00:19:51.660 --> 00:19:54.930\naccess cuz I'm splitting things off,\nI'm creating VPCs, right?\n\n384\n00:19:54.930 --> 00:19:58.750\nAnd there's not really much of\na limit here, it's all virtual,\n\n385\n00:19:58.750 --> 00:20:00.760\nso you can just keep adding and\nadding and adding and\n\n386\n00:20:00.760 --> 00:20:05.780\ncreate a very granular network that would\nbe very difficult to recreate on-premises.\n\n387\n00:20:05.780 --> 00:20:09.860\nThe other things to remember is that each\nof our services might need to communicate\n\n388\n00:20:09.860 --> 00:20:12.100\noutside of the VPC to talk\nto other things, right?\n\n389\n00:20:12.100 --> 00:20:15.220\nOther things like the simple\nqueuing service or whatever.\n\n390\n00:20:15.220 --> 00:20:17.970\nThese are services that are managed and\nhidden from us.\n\n391\n00:20:17.970 --> 00:20:22.250\nAnd so, we don't see them as residing\nin one particular VPC or another.\n\n392\n00:20:22.250 --> 00:20:25.560\nYou can use security groups to control\nthe access to those services though, and\n\n393\n00:20:25.560 --> 00:20:26.970\nyou can use network ACLs.\n\n394\n00:20:26.970 --> 00:20:29.590\nAnd again, don't trust your servers.\n\n395\n00:20:29.590 --> 00:20:33.480\nIf I have one instance\nthat needs access to SQS,\n\n396\n00:20:33.480 --> 00:20:36.960\nI should approve just that\none instance to get to SQS.\n\n397\n00:20:36.960 --> 00:20:39.610\nDon't approve the other ones,\nthey don't need to get to SQS.\n\n398\n00:20:39.610 --> 00:20:42.790\nAnd now you've got that control and\nyou kept it nice and granular.\n\n399\n00:20:42.790 --> 00:20:45.370\nSo those are all different\nthings to think about.\n\n400\n00:20:45.370 --> 00:20:51.010\nThe other thing to think about is\nyou might not trust Amazon, right?\n\n401\n00:20:51.010 --> 00:20:55.520\nI mean, they're a great company, huge\namount of staff that is very talented, but\n\n402\n00:20:55.520 --> 00:20:57.840\nat the end of the day,\nyou don't know them, right?\n\n403\n00:20:57.840 --> 00:21:01.130\nIt's hard to name people that work in\nthe data center cuz we don't interact\n\n404\n00:21:01.130 --> 00:21:02.180\nwith them at all.\n\n405\n00:21:02.180 --> 00:21:06.520\nSo if you don't trust them, you don't\nhave to use their Internet gateway,\n\n406\n00:21:06.520 --> 00:21:11.260\nyou don't have to use their virtual,\nthe VPN gateways.\n\n407\n00:21:11.260 --> 00:21:15.750\nYou don't have to use their routers even,\nalthough to an extent you sort of have to,\n\n408\n00:21:15.750 --> 00:21:18.860\ninstead you could deploy\nyour own EC2 instances.\n\n409\n00:21:18.860 --> 00:21:20.190\nAnd multihome them, right?\n\n410\n00:21:20.190 --> 00:21:23.100\nYou can add more than one network\ninterface to any EC2 instance and\n\n411\n00:21:23.100 --> 00:21:25.210\nyou can bring up your own firewalls.\n\n412\n00:21:25.210 --> 00:21:28.690\nCisco, for example, has a virtual ASA,\nthat's their firewall.\n\n413\n00:21:28.690 --> 00:21:33.270\nAnd I could deploy a virtual ASA that's\nin between the VPC and the Internet.\n\n414\n00:21:33.270 --> 00:21:37.470\nAnd then another one that is in\nbetween that VPC and another VPC.\n\n415\n00:21:37.470 --> 00:21:40.900\nAnd I can use those appliances to\ncontrol access in between them.\n\n416\n00:21:40.900 --> 00:21:43.650\nAnd that really takes Amazon\nout of the mix, right?\n\n417\n00:21:43.650 --> 00:21:46.250\nIt's not some mysterious\n\n418\n00:21:46.250 --> 00:21:50.070\nmaster routing table that I have no idea\nwhat actually builds it under the hood.\n\n419\n00:21:50.070 --> 00:21:52.700\nNow it's my router that I brought up,\nthat I control.\n\n420\n00:21:52.700 --> 00:21:54.990\nIf I want to shut it down,\nI can shut it down.\n\n421\n00:21:54.990 --> 00:21:59.630\nThat kind of functionality gives you just\npowerful control over your environment.\n\n422\n00:21:59.630 --> 00:22:01.750\nYou have complete control now.\n\n423\n00:22:01.750 --> 00:22:06.540\nBut it takes away the whole\nmanageability side of things,\n\n424\n00:22:06.540 --> 00:22:09.670\nwhere Amazon's gonna take care of\nstuff for you, well, now they're not.\n\n425\n00:22:09.670 --> 00:22:11.520\nIt's your instance,\nyou've got to deal with it.\n\n426\n00:22:11.520 --> 00:22:13.220\nIf you screw it up,\nit's kind of your problem.\n\n427\n00:22:13.220 --> 00:22:16.330\n&gt;&gt; Don, I know on private networks we\ncan implement things like DHCP snooping,\n\n428\n00:22:16.330 --> 00:22:20.880\ndynamic ARP inspection and\nget rid of some of those invalid messages.\n\n429\n00:22:20.880 --> 00:22:23.230\nIs that something that we can\nget in the cloud as well?\n\n430\n00:22:23.230 --> 00:22:24.370\n&gt;&gt; Yeah, that's a really good point.\n\n431\n00:22:24.370 --> 00:22:26.330\nI've got another diagram pulled up.\n\n432\n00:22:26.330 --> 00:22:29.810\nThat when our traffic pools passes\nthrough a virtual private gateway or\n\n433\n00:22:29.810 --> 00:22:32.350\nthrough an Internet gateway,\nit goes through the routing table.\n\n434\n00:22:32.350 --> 00:22:36.930\nIt goes through the network ACLs\nwhich are not stateful, right?\n\n435\n00:22:36.930 --> 00:22:39.360\nThey're unidirectional, so\nyou have your inbound and your outbound.\n\n436\n00:22:39.360 --> 00:22:41.510\nAnd then we hit out subnet and\nwe hit our security groups and\n\n437\n00:22:41.510 --> 00:22:42.880\nthe security groups are stateful.\n\n438\n00:22:42.880 --> 00:22:46.100\nSo traffic is allowed in, we assume\nwe're gonna allow the replies and so on.\n\n439\n00:22:46.100 --> 00:22:49.350\nSo it's passing through all of this stuff,\nand it's very powerful.\n\n440\n00:22:49.350 --> 00:22:51.490\nAnd it looks like we've got double\nfirewalls, that's all we need.\n\n441\n00:22:52.580 --> 00:22:56.980\nBut these are just standard,\ntraditional firewalls.\n\n442\n00:22:56.980 --> 00:22:58.880\nAnd if you go to any\nsecurity blog these days,\n\n443\n00:22:58.880 --> 00:23:00.070\nyou're gonna hear a lot of buzzwords.\n\n444\n00:23:00.070 --> 00:23:03.290\nYou're gonna hear about things\nlike advanced threat protection,\n\n445\n00:23:03.290 --> 00:23:05.180\nor persistent threat protection.\n\n446\n00:23:05.180 --> 00:23:08.300\nYou've got, or advanced persistent\nthreat detection [LAUGH].\n\n447\n00:23:08.300 --> 00:23:12.110\nYou've got intrusion detection services\nand intrusion prevention services.\n\n448\n00:23:12.110 --> 00:23:15.890\nYou've got deep packet inspection,\nand you've got all sorts of\n\n449\n00:23:15.890 --> 00:23:20.880\ncrazy things that are very,\nvery powerful, that really allow\n\n450\n00:23:20.880 --> 00:23:25.960\nyour security subsystem to look inside\nthe traffic and see what's going on.\n\n451\n00:23:25.960 --> 00:23:29.420\nThese solutions here that\nare built into AWS don't do that.\n\n452\n00:23:29.420 --> 00:23:34.220\nIf I've allowed port 80 to pass through\nthe network ACL, and I've allowed port 80\n\n453\n00:23:34.220 --> 00:23:37.890\nto pass through the security group and\nget to one of my instances, right?\n\n454\n00:23:37.890 --> 00:23:41.040\nThen all Amazon is looking at is\nhere comes this Internet traffic,\n\n455\n00:23:41.040 --> 00:23:44.850\nit's on port 80, we're gonna allow it\nall the way through to the instance.\n\n456\n00:23:44.850 --> 00:23:47.340\nThat traffic's not even encrypted,\nit's on port 80, it's HTTP, so\n\n457\n00:23:47.340 --> 00:23:50.700\nit's just gonna pass it right through,\nbut it could read it.\n\n458\n00:23:50.700 --> 00:23:52.660\nAnd if it had read it, and\nlooked a little deeper in there,\n\n459\n00:23:52.660 --> 00:23:57.770\nit might see that there's an HTTP post, or\nan HTTP get with an attack string in it.\n\n460\n00:23:57.770 --> 00:24:01.190\nWith a very obvious SQL injection or\nwhatever,\n\n461\n00:24:01.190 --> 00:24:04.570\nright there in the URL that's\nbeing passed for that access.\n\n462\n00:24:04.570 --> 00:24:06.830\nAnd it doesn't look at that.\n\n463\n00:24:06.830 --> 00:24:10.380\nAmazon is acting like\na traditional firewall.\n\n464\n00:24:10.380 --> 00:24:13.370\nMeanwhile if I had had\na checkpoint firewall,\n\n465\n00:24:13.370 --> 00:24:15.880\none of their virtual appliances in place,\nit would have looked at it and said, well,\n\n466\n00:24:15.880 --> 00:24:17.990\nthat's attack traffic, and\nnot even send it to the instance.\n\n467\n00:24:17.990 --> 00:24:19.150\nIt would have stopped it.\n\n468\n00:24:19.150 --> 00:24:21.050\nSo if you want advanced\nfunctionality like that,\n\n469\n00:24:21.050 --> 00:24:25.220\nyou absolutely can do it,\njust check out the EC2 marketplace, and\n\n470\n00:24:25.220 --> 00:24:28.760\nyou'll see AMIs from all sorts\nof vendors that are out there.\n\n471\n00:24:28.760 --> 00:24:32.660\nCheckpoint has really probably made one\nof the biggest pushes in that area, but\n\n472\n00:24:32.660 --> 00:24:35.900\nCisco, Juniper, all the other big names\nare in there, even smaller names,\n\n473\n00:24:35.900 --> 00:24:40.790\nopen source solutions like pfSense,\nyou can deploy in the cloud these days.\n\n474\n00:24:40.790 --> 00:24:44.650\nAnd now you can start to get some of\nthat more intelligent threat detection.\n\n475\n00:24:44.650 --> 00:24:46.320\nThat's probably enough buzz words.\n\n476\n00:24:46.320 --> 00:24:47.620\nWe'll make up some buzz words, right?\n\n477\n00:24:47.620 --> 00:24:49.700\nThe fancy pants threat detection.\n\n478\n00:24:49.700 --> 00:24:50.840\nAnd once you've got that going,\n\n479\n00:24:50.840 --> 00:24:53.270\nyou can really improve the security\nof your web application.\n\n480\n00:24:54.290 --> 00:24:59.570\nAnother scenario would be an application\nlayer gateway, an ALG, right?\n\n481\n00:24:59.570 --> 00:25:03.810\nALG is not so much a buzzword as it is\njust a technology, allow us to basically\n\n482\n00:25:03.810 --> 00:25:07.770\nproxy user connections to hide everything\nthat's going on behind the scenes.\n\n483\n00:25:07.770 --> 00:25:09.840\nAnd they're pretty useful for\na number of different things.\n\n484\n00:25:09.840 --> 00:25:13.010\nWell, when we bring up a standard\nAmazon load balancer an ELB,\n\n485\n00:25:13.010 --> 00:25:17.170\nthe elastic load balancers,\nthe new ones, support HTTP and HTTPS.\n\n486\n00:25:17.170 --> 00:25:21.690\nIf I have other protocols, I have to\ngo back to a classic load balancer.\n\n487\n00:25:21.690 --> 00:25:24.430\nAnd like the name implies, it's classic\ncuz you're not going to see whole lot of\n\n488\n00:25:24.430 --> 00:25:26.440\nnew great innovation with\nthe classic load balancer.\n\n489\n00:25:26.440 --> 00:25:29.510\nSo you might be better bringing up\nyour own application layer gateway,\n\n490\n00:25:29.510 --> 00:25:33.800\nbring up your own ALG and now you may\nhave more control or more features or\n\n491\n00:25:33.800 --> 00:25:35.520\nat least better support by going that way.\n\n492\n00:25:35.520 --> 00:25:38.820\nSo, always keep in mind\nwhat your solution is.\n\n493\n00:25:38.820 --> 00:25:41.340\nAnd make sure you choose the right\nsecurity services to be able to\n\n494\n00:25:41.340 --> 00:25:42.350\nsupport that.\n\n495\n00:25:42.350 --> 00:25:43.840\n&gt;&gt; A lot of great information in that one,\nDon.\n\n496\n00:25:43.840 --> 00:25:47.445\nAnd I think we did get all the IT\nbuzzwords in this episode.\n\n497\n00:25:47.445 --> 00:25:49.370\n&gt;&gt; [LAUGH]\n&gt;&gt; But, we've got more to come and\n\n498\n00:25:49.370 --> 00:25:51.360\nwhat we don't have in this\nepisode is more time.\n\n499\n00:25:51.360 --> 00:25:53.410\nSo we're gonna go ahead and\nend this one, but before we do, Don,\n\n500\n00:25:53.410 --> 00:25:55.290\ndo you got any additional words\nthat you'd like to throw in?\n\n501\n00:25:55.290 --> 00:25:57.030\n&gt;&gt; We definitely have more to talk about.\n\n502\n00:25:57.030 --> 00:25:59.250\nI spent the most time on EC2 and\n\n503\n00:25:59.250 --> 00:26:02.900\nnetworking on the VPC side here because\nthose are the two most important.\n\n504\n00:26:02.900 --> 00:26:05.740\nBut we're gonna run through a bunch of\nthe other services too in part three.\n\n505\n00:26:05.740 --> 00:26:06.640\nSo we'll get to see those.\n\n506\n00:26:06.640 --> 00:26:09.440\nI'll move a lot faster through those,\ncuz it kind of become repetitive.\n\n507\n00:26:09.440 --> 00:26:11.740\nBut we're definitely gonna\nhave more coming up.\n\n508\n00:26:11.740 --> 00:26:13.310\n&gt;&gt; All right, thank you for\nbeing here, Don.\n\n509\n00:26:13.310 --> 00:26:15.300\nAnd we appreciate you,\nthe viewer, watching.\n\n510\n00:26:15.300 --> 00:26:18.100\nSigning out for ITProTV,\nI've been your host, Wes Bryan.\n\n511\n00:26:18.100 --> 00:26:18.830\n&gt;&gt; And I'm Don Pezet.\n\n512\n00:26:18.830 --> 00:26:21.993\n&gt;&gt; And we'll see you next time.\n\n513\n00:26:21.993 --> 00:26:27.384\n[MUSIC]\n\n514\n00:26:27.384 --> 00:26:30.755\nThank you for watching ITProTV.\n\n",
          "vimeoId": "209483238"
        },
        {
          "description": "In this episode, Wes and Don dive into security inside of AWS. They will discuss cloud service-specific security, looking at securing various AWS services like S3, database security, Amazon SQS, Amazon SNS and Amazon Analytic security. They will also explore IAM, Mobile Services and Amazon WorkSpaces security.",
          "length": "1688",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-3-cloud_service-specific_security_pt3-032017-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-3-cloud_service-specific_security_pt3-032017-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-12-3-3-cloud_service-specific_security_pt3-032017-1-sm.jpg",
          "title": "Cloud Service Specific Security Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.005 --> 00:00:07.051\nWelcome to ITProTV, I'm your host-\n&gt;&gt; [CROSSTALK]\n\n2\n00:00:07.051 --> 00:00:08.719\n[MUSIC]\n\n3\n00:00:08.719 --> 00:00:11.452\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.452 --> 00:00:14.935\n&gt;&gt; Hello and welcome to ITProTV,\nthank you for joining us.\n\n5\n00:00:14.935 --> 00:00:16.225\nI'm your show host Wes Bryan.\n\n6\n00:00:16.225 --> 00:00:17.265\nAnd in today's episode,\n\n7\n00:00:17.265 --> 00:00:21.975\nwe're continuing through our series in AWS\nCertified Solution Architect Associate,\n\n8\n00:00:21.975 --> 00:00:24.585\nand joining us back in the studios\nis none other than Mr. Don Pezet.\n\n9\n00:00:24.585 --> 00:00:25.385\nDon, how are you doing sir?\n\n10\n00:00:25.385 --> 00:00:28.883\n&gt;&gt; I am doing great, Wes, really dive\nright back into the world of AWS Security.\n\n11\n00:00:28.883 --> 00:00:31.209\nAnd this episode is an important one but\n\n12\n00:00:31.209 --> 00:00:35.930\nit's gonna be a little bit different\nthan the ones we've already done.\n\n13\n00:00:35.930 --> 00:00:39.180\nWhat we need to do,\nis we need to talk about security for\n\n14\n00:00:39.180 --> 00:00:43.060\neach of the individual services that are\nkind of smaller than what we talked about\n\n15\n00:00:43.060 --> 00:00:43.880\nin the first two parts.\n\n16\n00:00:43.880 --> 00:00:46.017\nWe'll be talking about EC2 and\n\n17\n00:00:46.017 --> 00:00:49.905\nnetworking which are just huge\ncomponents inside of AWS.\n\n18\n00:00:49.905 --> 00:00:51.472\nBut there's so many other services, so\n\n19\n00:00:51.472 --> 00:00:55.090\nmany other different individual components\nthat have different security concerns.\n\n20\n00:00:55.090 --> 00:00:57.800\nWell, I knew that going into\nthis whole series, and so\n\n21\n00:00:57.800 --> 00:01:01.140\nwe've actually talked about the security\nfor each one as we've gone along.\n\n22\n00:01:01.140 --> 00:01:04.230\nAnd in each episode we've had a little\nbit on security spread across there.\n\n23\n00:01:04.230 --> 00:01:07.290\nSo this is gonna be more of\na recap episode, kinda recapping\n\n24\n00:01:07.290 --> 00:01:11.100\nsome of the things that we've covered, and\nmoving through each of the different ones\n\n25\n00:01:11.100 --> 00:01:14.220\nthat are available, and kinda seeing\nwhat we need to know about each one.\n\n26\n00:01:14.220 --> 00:01:17.220\nSo, it's a lot,\nwe're gonna move kinda quickly through it.\n\n27\n00:01:17.220 --> 00:01:20.281\nSo, it's gonna be like drinking\nfrom the security fire hose but\n\n28\n00:01:20.281 --> 00:01:23.793\nit'll be a good time, and we'll kind\nof get a better picture of what all we\n\n29\n00:01:23.793 --> 00:01:26.248\nneed to plan when we design\nusing these solutions.\n\n30\n00:01:26.248 --> 00:01:29.780\nAll right, so let's see,\nwhere do we want to get started Wes?\n\n31\n00:01:29.780 --> 00:01:33.150\nLet's kick things off with\nS3 storage services, right?\n\n32\n00:01:33.150 --> 00:01:37.754\nWhen we implement S3, the simple storage\nservice, we're putting documents,\n\n33\n00:01:37.754 --> 00:01:39.050\nand files, and things like that.\n\n34\n00:01:39.050 --> 00:01:43.777\nI mean, whatever is we want, really, into\nblobs that are stored online and in S3.\n\n35\n00:01:43.777 --> 00:01:46.170\nAnd we can then make those\navailable to our end users.\n\n36\n00:01:46.170 --> 00:01:48.940\nAnd we talked about some of\nthe basics there, things like IAM,\n\n37\n00:01:48.940 --> 00:01:54.220\nwhere we can do user polices and\nspecify what access people have,\n\n38\n00:01:54.220 --> 00:01:57.910\nwhether they have read or write, whether\nthey can manipulate permissions or not.\n\n39\n00:01:57.910 --> 00:02:02.094\nAnd those are really important aspects\nof configuring access to an S3 bucket.\n\n40\n00:02:02.094 --> 00:02:06.980\nSome of our S3 buckets we may want to\nbe public, some we may not, right?\n\n41\n00:02:06.980 --> 00:02:10.167\nSo, from a security standpoint,\nthe policies and the ACLs,\n\n42\n00:02:10.167 --> 00:02:13.492\nthose are usually the two main\nways that we configure security.\n\n43\n00:02:13.492 --> 00:02:17.504\nAnd we make sure that we have that access\nnice and secure the way that it needs to\n\n44\n00:02:17.504 --> 00:02:21.230\nbe, or wide open if that's\nwhat we're trying to do there.\n\n45\n00:02:21.230 --> 00:02:23.810\nFortunately, there's not a whole lot else\nwe have to worry about on the security\n\n46\n00:02:23.810 --> 00:02:26.130\nside as far our basic security, right?\n\n47\n00:02:26.130 --> 00:02:30.000\nWe have to think about availability and\nreplication but for the most part of\n\n48\n00:02:30.000 --> 00:02:33.400\nthe security side is done right in\nthe policies and right in the ACL.\n\n49\n00:02:33.400 --> 00:02:38.700\n&gt;&gt; Don, in past episodes,\nyou've mentioned how the S3 service,\n\n50\n00:02:38.700 --> 00:02:41.770\nif you will, does follow things\nlike data standards as well.\n\n51\n00:02:41.770 --> 00:02:44.860\nHow about data security,\nwhat are we seeing inside of S3?\n\n52\n00:02:44.860 --> 00:02:48.978\n&gt;&gt; So with S3, by default there's not\na whole lot of data security, right?\n\n53\n00:02:48.978 --> 00:02:50.440\nBut if you'll remember\nfrom the S3 episode,\n\n54\n00:02:50.440 --> 00:02:53.230\nthere's a little check mark we can hit\nthat will encrypt data on the server side,\n\n55\n00:02:53.230 --> 00:02:54.240\nso it can be encrypted.\n\n56\n00:02:54.240 --> 00:03:00.090\nIt does use server-side encryption, and\nit's using AES-256 which really strong.\n\n57\n00:03:00.090 --> 00:03:03.640\nSo, you really just check that box,\nand there's your data at rest.\n\n58\n00:03:03.640 --> 00:03:07.076\nFor your data in motion, you've got SSL,\nwhich is determined by your own policies\n\n59\n00:03:07.076 --> 00:03:09.792\nbut you'll usually use TLS for\nthat, which is very strong also.\n\n60\n00:03:09.792 --> 00:03:14.761\nAnd now you've got good,\nencrypted data in motion, and at rest,\n\n61\n00:03:14.761 --> 00:03:18.100\nit's secure, it's taken care of for you.\n\n62\n00:03:18.100 --> 00:03:19.840\nSo that's normally all\nwe have to worry about.\n\n63\n00:03:19.840 --> 00:03:22.396\nIf we really wanted to get advanced\nwith it, you can do other things like,\n\n64\n00:03:22.396 --> 00:03:25.341\nyou can do client-side encryption, encrypt\nthe data before it even goes into S3.\n\n65\n00:03:25.341 --> 00:03:29.503\nI've talked about that in another\nepisode but that's pretty uncommon and\n\n66\n00:03:29.503 --> 00:03:33.200\nit does make it a little more\nchallenging on the Amazon side as far as\n\n67\n00:03:33.200 --> 00:03:35.610\nhow you manage that data.\n\n68\n00:03:35.610 --> 00:03:38.980\nThe other thing to think about though is\nhow the data is gonna to be presented if\n\n69\n00:03:38.980 --> 00:03:40.610\nyou embed it like on your webpage.\n\n70\n00:03:40.610 --> 00:03:44.830\nFor example, if I have a webpage that is\nstored on an Apache server somewhere, and\n\n71\n00:03:44.830 --> 00:03:49.720\nI have a certificate from my domain but\nI lowered all of my images out of S3.\n\n72\n00:03:49.720 --> 00:03:52.700\nWell, the URL endpoint for\neach of my images\n\n73\n00:03:52.700 --> 00:03:56.520\nwere the different domain attached to\nit than the domain for my main site.\n\n74\n00:03:56.520 --> 00:04:00.709\nAnd so for that, we have to set up\na different kind of a policy, you have\n\n75\n00:04:00.709 --> 00:04:05.973\nwhat's called a cross-origin resource\nsharing policy or CORS policy, C-O-R-S.\n\n76\n00:04:05.973 --> 00:04:08.889\nAnd what CORS does is it allows for\n\n77\n00:04:08.889 --> 00:04:14.630\nother domain content to be\nprovided alongside your domain.\n\n78\n00:04:14.630 --> 00:04:17.430\nNormally, if we have one\nweb page that we go to and\n\n79\n00:04:17.430 --> 00:04:20.510\nit starts loading content from another\ndomain, it can set off a security policy.\n\n80\n00:04:20.510 --> 00:04:22.870\nThe end users will see it,\ntheir web browser will flag it and\n\n81\n00:04:22.870 --> 00:04:25.140\nsay, we're loading unsafe script.\n\n82\n00:04:25.140 --> 00:04:26.830\nSo we've got mixed content,\n\n83\n00:04:26.830 --> 00:04:31.160\nor do you wanna allow this server\nto contact this other server?\n\n84\n00:04:31.160 --> 00:04:35.130\nWell, we don't want our end users to\nget a deluge of security pop ups,\n\n85\n00:04:35.130 --> 00:04:36.830\nas IT admins we can handle that, right?\n\n86\n00:04:36.830 --> 00:04:39.600\nBut your average end user they\ndon't know what the answer is,\n\n87\n00:04:39.600 --> 00:04:42.260\nthey're gonna hit whatever it takes\nto get the message to go away.\n\n88\n00:04:42.260 --> 00:04:47.180\nWell, if we properly define our CORS\npolicy, it will say, yeah, it's okay for\n\n89\n00:04:47.180 --> 00:04:51.330\nthis content to be embedded in this other\ndomain, we expect that to be there.\n\n90\n00:04:51.330 --> 00:04:54.570\nAnd when the end users access the content,\nthey can look at the CORS policy and\n\n91\n00:04:54.570 --> 00:04:57.730\nverify that's what we want to happen,\nwe wanna make sure it's okay.\n\n92\n00:04:57.730 --> 00:05:00.479\nAnd then the browser won't annoy\nthem with a bunch of pop ups.\n\n93\n00:05:00.479 --> 00:05:04.313\nIt's an extra layer of security, it's not\ntrue security in that, it's not making\n\n94\n00:05:04.313 --> 00:05:08.039\nthings stronger, it's actually kinda\nmaking things a little bit weaker because\n\n95\n00:05:08.039 --> 00:05:12.180\nyou're now approving more than one domain\nto be nested behind this single entity.\n\n96\n00:05:12.180 --> 00:05:16.140\nBut it is important to create the right\nexperience for your end user.\n\n97\n00:05:17.310 --> 00:05:22.920\nAll right, that's really about it for\nS3 but S3 isn't the only\n\n98\n00:05:22.920 --> 00:05:26.360\nservice that we need to protect, right,\nthere's plenty more that's in there.\n\n99\n00:05:26.360 --> 00:05:30.176\n&gt;&gt; In the past episode, you've talked a\nlot about things like relational database\n\n100\n00:05:30.176 --> 00:05:31.598\nand database securing that.\n\n101\n00:05:31.598 --> 00:05:34.970\nCan you kinda recap that for us Don when\nit comes to if I do have a database and\n\n102\n00:05:34.970 --> 00:05:37.150\nI need to throw it in the AWS cloud?\n\n103\n00:05:37.150 --> 00:05:40.000\n&gt;&gt; Yeah, in the database side\nsuper nice if you use RDS, right?\n\n104\n00:05:40.000 --> 00:05:42.310\nBecause Amazon manages the instance, so\n\n105\n00:05:42.310 --> 00:05:44.280\nI don't have to worry about\nthe underlying operating system anymore.\n\n106\n00:05:44.280 --> 00:05:45.850\nI don't have to worry\nabout patching the OS,\n\n107\n00:05:45.850 --> 00:05:48.700\nI don't have to worry about all that\nstuff that goes on behind the scenes.\n\n108\n00:05:48.700 --> 00:05:52.190\nI don't even have to worry about patching\nthe database engine because they're gonna\n\n109\n00:05:52.190 --> 00:05:55.360\ndo that unless we disable that cuz you\ngotta have the option to disable it.\n\n110\n00:05:55.360 --> 00:05:56.630\nBut if you're letting them handle it,\n\n111\n00:05:56.630 --> 00:05:58.680\nthey'll even patch that in\nthe maintenance window.\n\n112\n00:05:58.680 --> 00:06:02.070\nSo, boy,\nsecurity is just really taken care of,\n\n113\n00:06:02.070 --> 00:06:03.980\nwhy are we even talking about it here?\n\n114\n00:06:03.980 --> 00:06:06.720\nWell, you might need more,\nmore than what's there.\n\n115\n00:06:06.720 --> 00:06:11.170\nPatches and updates, that's one thing but\nencrypted data, secure communications,\n\n116\n00:06:11.170 --> 00:06:12.940\nrestricted access, that's another.\n\n117\n00:06:12.940 --> 00:06:16.410\nLike most of our stuff, we're gonna\ncontrol access through the use of VPCs,\n\n118\n00:06:16.410 --> 00:06:18.230\nright, our virtual private cloud.\n\n119\n00:06:18.230 --> 00:06:21.137\nYou'll use SSL to encrypt your\ncommunications back and forth unless\n\n120\n00:06:21.137 --> 00:06:24.560\nyou're using some of the other database\nengines like Oracle and Microsoft SQL.\n\n121\n00:06:24.560 --> 00:06:28.980\nThey have their own encryption suites that\nyou can use to give secure communications.\n\n122\n00:06:28.980 --> 00:06:31.596\nAnd those suites,\nwhile they support the standard stuff,\n\n123\n00:06:31.596 --> 00:06:35.312\ntheir custom suites are usually better cuz\nthey'll provide redundancy options and\n\n124\n00:06:35.312 --> 00:06:37.525\nother features that you\nwanna take advantage of.\n\n125\n00:06:37.525 --> 00:06:41.428\nIf you're gonna use the licensed database\nsoftware, you might as well take advantage\n\n126\n00:06:41.428 --> 00:06:45.320\nof all the feature it has, so you\ndefinitely wanna check those things out.\n\n127\n00:06:45.320 --> 00:06:47.045\nRemember that when we deploy a database,\n\n128\n00:06:47.045 --> 00:06:51.140\nyou do get a choice at the very beginning\nwhether it's gonna be multi-ASCII or not.\n\n129\n00:06:51.140 --> 00:06:54.570\nAnd in testing and development, you\nmight choose to not make it multi-ASCII,\n\n130\n00:06:54.570 --> 00:06:57.520\nthat means that your database is\nnow a single point of failure.\n\n131\n00:06:57.520 --> 00:07:00.400\nSo, you'll always wanna do\na multi-availability zone\n\n132\n00:07:00.400 --> 00:07:01.860\ndeployment if you can.\n\n133\n00:07:01.860 --> 00:07:04.955\nAnd you can even convert the database over\nto multi-ASCII if you need it when you're\n\n134\n00:07:04.955 --> 00:07:08.895\nready but make sure you do it, you\ndefinitely want to have that availability.\n\n135\n00:07:08.895 --> 00:07:12.770\n&gt;&gt; Don, I think of things like recovery,\ntoo, inside of our cloud-based database\n\n136\n00:07:12.770 --> 00:07:15.931\nservices, is it something that we\ncan do as far as backups as well?\n\n137\n00:07:15.931 --> 00:07:19.295\n&gt;&gt; Yeah, the automated backups, again,\nit's a managed service, right, so\n\n138\n00:07:19.295 --> 00:07:22.360\nthe automated backups are happening\nonce a day, every 24 hours.\n\n139\n00:07:22.360 --> 00:07:25.730\nAnd it's not exactly precise,\nwe can set a maintenance window down to\n\n140\n00:07:25.730 --> 00:07:28.890\na 30-minute window, and the backup will\nhappen somewhere in that 30 minutes.\n\n141\n00:07:28.890 --> 00:07:32.190\nWell, if I have a failure and\nI have to rollback to a snapshot,\n\n142\n00:07:32.190 --> 00:07:37.030\nI could lose 23 and a half hours of data,\nthat'd be pretty bad.\n\n143\n00:07:37.030 --> 00:07:40.120\nSo, if you need something more,\nif you want backups every 15 minutes,\n\n144\n00:07:40.120 --> 00:07:42.240\nthat's up to you.\n\n145\n00:07:42.240 --> 00:07:46.140\nAmazon will give you one backup a day but\nif your needs are higher than that you\n\n146\n00:07:46.140 --> 00:07:48.210\nneed to configure your own\nbackups to go beyond that.\n\n147\n00:07:48.210 --> 00:07:51.670\nAnd you can set up snapshots that\nrun every 15 minutes if you want.\n\n148\n00:07:51.670 --> 00:07:54.858\nOr you can do backups from within\nthe database software which is\n\n149\n00:07:54.858 --> 00:07:55.950\noftentimes better.\n\n150\n00:07:55.950 --> 00:08:00.126\nRemember when you do a snapshot,\nthe file system is not quiesced, so\n\n151\n00:08:00.126 --> 00:08:02.511\nthere's activity on the file system.\n\n152\n00:08:02.511 --> 00:08:04.608\nAnd if you're backing up\ndatabase files that way,\n\n153\n00:08:04.608 --> 00:08:06.623\nyou could be backing up\ncorrupt database files.\n\n154\n00:08:06.623 --> 00:08:09.903\nFortunately, your transaction logs will\nresolve a lot of that for you, but\n\n155\n00:08:09.903 --> 00:08:12.270\nwouldn't it be nice to not\neven have to deal with that.\n\n156\n00:08:12.270 --> 00:08:15.733\nIf you do the backup from within your\nsoftware, they support exports and\n\n157\n00:08:15.733 --> 00:08:19.366\nother things that will basically make\nit where you don't have to worry about\n\n158\n00:08:19.366 --> 00:08:22.374\nthe file system and you can do\nthe backups while it's online and\n\n159\n00:08:22.374 --> 00:08:23.988\nthere's no outage and all that.\n\n160\n00:08:23.988 --> 00:08:28.829\n&gt;&gt; You've mentioned availability too\nwhen talking about multi-AZ's now, Don.\n\n161\n00:08:28.829 --> 00:08:30.786\nI think about like a patch\nmanagement system,\n\n162\n00:08:30.786 --> 00:08:33.595\nwe certainly don't wanna take our\ndatabase servers offline, but\n\n163\n00:08:33.595 --> 00:08:37.050\nwe have to implement sometimes patch\nmanagement when we have them on-premise.\n\n164\n00:08:37.050 --> 00:08:39.188\nHow is the cloud helping us out\nwhen it comes to patch management?\n\n165\n00:08:39.188 --> 00:08:41.769\n&gt;&gt; The main thing is if you\ndo a multi-AZ deployment.\n\n166\n00:08:41.769 --> 00:08:44.349\nBecause during the patch, yes,\nyour database goes offline,\n\n167\n00:08:44.349 --> 00:08:48.010\nactually when you do a backup, a snapshot\nfor a moment your database is offline.\n\n168\n00:08:48.010 --> 00:08:52.042\nIf you have a multi-AZ deployment,\nthen when a patch update is happening,\n\n169\n00:08:52.042 --> 00:08:56.273\nAmazon just flips you over to the other\none and it updates the AZ that you're in.\n\n170\n00:08:56.273 --> 00:08:59.844\nSo, it's all happening behind the scenes\nand your customers never even see it.\n\n171\n00:08:59.844 --> 00:09:01.618\nIf we wanna do that on-premises,\n\n172\n00:09:01.618 --> 00:09:04.438\nwe would need multiple servers\nto be able to flip over.\n\n173\n00:09:04.438 --> 00:09:08.336\nAnd if you got a virtualized environment\non-premises networks out great, but\n\n174\n00:09:08.336 --> 00:09:09.510\na lot of people don't.\n\n175\n00:09:09.510 --> 00:09:10.680\nThat's why you are going to the cloud.\n\n176\n00:09:10.680 --> 00:09:12.175\nYou're trying to virtualize\nthere using the cloud.\n\n177\n00:09:12.175 --> 00:09:16.297\nAnd so that's one of the things that\nyou're kinda taking care of for us and\n\n178\n00:09:16.297 --> 00:09:19.420\nwe've been talking about RDS kinda,\nspecifically.\n\n179\n00:09:19.420 --> 00:09:23.334\nMariaDB, MySQL, Aurora DB,\nOracle, Microsoft SQL, but\n\n180\n00:09:23.334 --> 00:09:27.264\na lot of this whole is true for\nthe non-standard databases.\n\n181\n00:09:27.264 --> 00:09:29.795\nThings like Redshift or DynamoDB.\n\n182\n00:09:29.795 --> 00:09:32.655\nDynamoDB where you don't even see\nthe instances that's all just\n\n183\n00:09:32.655 --> 00:09:36.030\ncompletely hidden from you, but\nRedshift is pretty much the same.\n\n184\n00:09:36.030 --> 00:09:39.312\nOn the encryption side in Redshift,\nyou can do support for things like HSM and\n\n185\n00:09:39.312 --> 00:09:41.940\ndo the hardware security module\nto store an encryption key and\n\n186\n00:09:41.940 --> 00:09:43.372\nhave your data encrypted there.\n\n187\n00:09:43.372 --> 00:09:48.371\nYou've got a lot of extra functionality\nif you wanna improve the security of\n\n188\n00:09:48.371 --> 00:09:52.200\nthese systems, but\nit all available right a minute.\n\n189\n00:09:52.200 --> 00:09:54.373\nNow, that's kind of it for databases.\n\n190\n00:09:54.373 --> 00:09:57.491\nAnd again, I guess database are a pretty\nbig service for most of us.\n\n191\n00:09:57.491 --> 00:10:01.049\nCuz if you lose your database, you lose\nyour data, but there's still more that we\n\n192\n00:10:01.049 --> 00:10:04.620\nneed to look at for all of our\nother services that are in there.\n\n193\n00:10:04.620 --> 00:10:05.394\n&gt;&gt; Don, we talked about the back-end.\n\n194\n00:10:05.394 --> 00:10:07.595\nWe talked about the database itself.\n\n195\n00:10:07.595 --> 00:10:08.617\nBut on the front-end,\n\n196\n00:10:08.617 --> 00:10:11.830\nwe've got applications that still\nneed to connect to that database.\n\n197\n00:10:11.830 --> 00:10:13.815\nSo, what kind of application\nservice security are we looking at?\n\n198\n00:10:13.815 --> 00:10:16.806\n&gt;&gt; So when you're talking\nabout web applications,\n\n199\n00:10:16.806 --> 00:10:21.078\nthey usually reside in EC2 or\nthey might reside in elastic beanstalk or\n\n200\n00:10:21.078 --> 00:10:23.712\nin a docker container\ndeployed somewhere or\n\n201\n00:10:23.712 --> 00:10:28.886\nany of the number of other methods that we\ncan roll-out an application inside of AWS.\n\n202\n00:10:28.886 --> 00:10:31.735\nAnd when they interact with\nthings like the database servers,\n\n203\n00:10:31.735 --> 00:10:34.218\nthey can do that through any\nnumber of services there.\n\n204\n00:10:34.218 --> 00:10:37.580\nSo all of these other services,\nthey have to be secured too and\n\n205\n00:10:37.580 --> 00:10:39.530\neach one is a little bit different.\n\n206\n00:10:39.530 --> 00:10:42.138\nSo you've gonna make sure you do your\nresearch when you deploy this, but\n\n207\n00:10:42.138 --> 00:10:43.394\nthey usually have a common trend.\n\n208\n00:10:43.394 --> 00:10:44.429\nLet me give you an example.\n\n209\n00:10:44.429 --> 00:10:50.110\nWe talked about the simple queuing service\nand the simple notification service.\n\n210\n00:10:50.110 --> 00:10:55.414\nSNS and SQS, they are two great ways\nto get information in-between services.\n\n211\n00:10:55.414 --> 00:10:59.136\nI might have EC2 instances that I need\nto talk to a database server, but\n\n212\n00:10:59.136 --> 00:11:02.795\nI don't wanna open up a hole in my\nVPC to allow that communication, cuz\n\n213\n00:11:02.795 --> 00:11:07.840\nan attacker can compromise a web front-end\nand then get into the database server.\n\n214\n00:11:07.840 --> 00:11:08.534\nI mean, I want that.\n\n215\n00:11:08.534 --> 00:11:12.926\nInstead, I might use SQS in between\nmy front-end and my back-end act as\n\n216\n00:11:12.926 --> 00:11:17.330\nthat middle man everything's got to\npass through the queuing service.\n\n217\n00:11:17.330 --> 00:11:20.975\nSo, that's a great way to ensure that we\ndon't get non-standard connections between\n\n218\n00:11:20.975 --> 00:11:22.463\nthe front-end and the back-end.\n\n219\n00:11:22.463 --> 00:11:26.521\nIt improves security by adding\nthis extra layer of obfuscation,\n\n220\n00:11:26.521 --> 00:11:30.480\nthis extra kind of proxy\nin-between one and the other.\n\n221\n00:11:30.480 --> 00:11:34.032\nWe can leverage SQS and we can leverage\nSNS both to provide that functionality,\n\n222\n00:11:34.032 --> 00:11:36.003\nand get the messages sent back, and forth.\n\n223\n00:11:36.003 --> 00:11:37.711\nWe've gotta make sure our\napplication's supported.\n\n224\n00:11:37.711 --> 00:11:39.320\nWe've gotta develop that.\n\n225\n00:11:39.320 --> 00:11:43.470\nBut once you've done it, you can create\na very, very, very cool environment.\n\n226\n00:11:43.470 --> 00:11:45.892\nYou can have all of your database servers\nin a VPC that is completely isolated.\n\n227\n00:11:45.892 --> 00:11:48.192\nIt doesn't even have\ninternet connectivity,\n\n228\n00:11:48.192 --> 00:11:49.803\nbut it's allowed to talk to SQS.\n\n229\n00:11:49.803 --> 00:11:52.950\nAnd any interaction with the database\ngoes through SQS and you pick it up,\n\n230\n00:11:52.950 --> 00:11:54.750\nyou process it, you respond back.\n\n231\n00:11:54.750 --> 00:11:55.991\nYou can do the same thing\nwith certificate authorities.\n\n232\n00:11:55.991 --> 00:11:59.529\nMy certificate authority shouldn't be\nable to be accessed from anywhere.\n\n233\n00:11:59.529 --> 00:12:03.510\nBut if it can talk to SQS, then I can\nhave certificates come in through SQS.\n\n234\n00:12:03.510 --> 00:12:04.326\nWe approve or decline them.\n\n235\n00:12:04.326 --> 00:12:05.824\nWe respond back through SQS.\n\n236\n00:12:05.824 --> 00:12:09.179\nSo, those types of services just\nin their own nature can be used to\n\n237\n00:12:09.179 --> 00:12:11.240\nsecure our web applications.\n\n238\n00:12:11.240 --> 00:12:13.052\n&gt;&gt; I guess we wouldn't be\ndoing any justice here,\n\n239\n00:12:13.052 --> 00:12:14.966\nif any kind of service\nthat we're talking about.\n\n240\n00:12:14.966 --> 00:12:16.716\nA lot of times, we think about encryption.\n\n241\n00:12:16.716 --> 00:12:18.825\nAre there any encryption concerns or\n\n242\n00:12:18.825 --> 00:12:22.725\njust things that we need to be\naware of when it comes to SQS?\n\n243\n00:12:22.725 --> 00:12:26.143\n&gt;&gt; So SQS really doesn't have encryption,\nit doesn't support it.\n\n244\n00:12:26.143 --> 00:12:28.813\nSo, you're supposed to have already\nencrypted your pay load before you stick\n\n245\n00:12:28.813 --> 00:12:29.385\nit into the SQS.\n\n246\n00:12:29.385 --> 00:12:32.667\nSo that should be in your libraries,\nyou encrypt the data.\n\n247\n00:12:32.667 --> 00:12:35.923\nYou don't need a public key encrypt it and\nthen you dump it into SQS, and\n\n248\n00:12:35.923 --> 00:12:39.234\nthen it gets picked up on the back-end\nby somebody who has the private key\n\n249\n00:12:39.234 --> 00:12:41.535\nthat can decrypt it, and\nread that information.\n\n250\n00:12:41.535 --> 00:12:44.190\nSo, that kind of service is up to you.\n\n251\n00:12:44.190 --> 00:12:47.812\n&gt;&gt; Other ones like SNS,\nyou can actually use the HTTPS endpoints.\n\n252\n00:12:47.812 --> 00:12:50.599\nAnd so, it's encrypted while\nyou're sending data to it.\n\n253\n00:12:50.599 --> 00:12:54.573\nBut while the data's at rest,\nit's not really encrypted at that point.\n\n254\n00:12:54.573 --> 00:12:57.125\nSo you've always got to remember\nthat you've got data in motion and\n\n255\n00:12:57.125 --> 00:13:00.010\ndata at rest, and encryption at\ndifferent legs in that journey.\n\n256\n00:13:00.010 --> 00:13:00.560\nSo, those are things to think about.\n\n257\n00:13:00.560 --> 00:13:04.124\nThe other thing is IAM,\nidentity and access management,\n\n258\n00:13:04.124 --> 00:13:08.610\nthen we can control who has access to\nSNS or who has access to the queues.\n\n259\n00:13:08.610 --> 00:13:10.860\nIf we're moving our sensitive\ndata through these queues,\n\n260\n00:13:10.860 --> 00:13:13.065\nyou don't want just anybody to\nbe able to reach in there and\n\n261\n00:13:13.065 --> 00:13:15.233\nstart messing with entries or\neven submitting entries.\n\n262\n00:13:15.233 --> 00:13:17.773\nSo, you've got to be able to\ncontrol what's allowed to be done.\n\n263\n00:13:17.773 --> 00:13:20.685\nIAM will let you do that.\n\n264\n00:13:20.685 --> 00:13:23.228\nAnother similar thing is gonna\nbe the analytics service.\n\n265\n00:13:23.228 --> 00:13:27.200\nWith analytics, it's a lot like our\ndatabase service, cuz typically it does\n\n266\n00:13:27.200 --> 00:13:31.510\nhave database behind the scenes, but\nwe're harvesting all this information.\n\n267\n00:13:31.510 --> 00:13:35.936\nThis big data and then analyzing it and\nthat big data may be sensitive data, but\n\n268\n00:13:35.936 --> 00:13:37.426\nwe need to get it in there.\n\n269\n00:13:37.426 --> 00:13:38.339\nWork with it.\n\n270\n00:13:38.339 --> 00:13:41.173\nAnd then more importantly,\nthis is the part a lot of people forget.\n\n271\n00:13:41.173 --> 00:13:43.715\nIf you're not using the data,\nget it outta there.\n\n272\n00:13:43.715 --> 00:13:46.510\nDon't just leave the data sitting\nthere on one of the analytic servers.\n\n273\n00:13:46.510 --> 00:13:49.814\nSo you might have Kinesis or\nEMR, Elastic MapReduce.\n\n274\n00:13:49.814 --> 00:13:53.594\nYou got Hadoop cluster that's up and\nyou've got all this data sitting there and\n\n275\n00:13:53.594 --> 00:13:55.410\nyou run your great big analysis on it.\n\n276\n00:13:55.410 --> 00:13:57.853\nYou get your reports and\nthen you say something like,\n\n277\n00:13:57.853 --> 00:14:00.520\nI leave it up there just in case\nI wanna run another report.\n\n278\n00:14:00.520 --> 00:14:01.561\nWell, don't do that.\n\n279\n00:14:01.561 --> 00:14:02.431\nGet rid of it.\n\n280\n00:14:02.431 --> 00:14:03.597\nGet the data out of there.\n\n281\n00:14:03.597 --> 00:14:05.689\nBecause if you need to run another report,\nyou know what you can do?\n\n282\n00:14:05.689 --> 00:14:06.901\nYou can upload the data again.\n\n283\n00:14:06.901 --> 00:14:10.992\nYou just push it back up in there or\nyou can take it out of EMR and\n\n284\n00:14:10.992 --> 00:14:15.260\nlet it sit in S3, or\nsomewhere else where it can be encrypted.\n\n285\n00:14:15.260 --> 00:14:19.417\nRemember, S3 has a ES256 server side\nencryption that we can do really\n\n286\n00:14:19.417 --> 00:14:23.519\nstrong encryption and we can do\nencrypted into and out of during motion.\n\n287\n00:14:23.519 --> 00:14:27.110\nSo, we can take advantage of the\nencryption of other services to supplement\n\n288\n00:14:27.110 --> 00:14:28.350\nwhat we've got.\n\n289\n00:14:28.350 --> 00:14:32.120\nSo I might have a pipeline setup,\n\n290\n00:14:32.120 --> 00:14:36.790\nthe AWS pipeline where I'm manipulating\nthe data that moves through.\n\n291\n00:14:36.790 --> 00:14:39.654\nIts got to be decrypted while it's being\nmanipulated and that introduces risk.\n\n292\n00:14:39.654 --> 00:14:43.067\nBut if the data is stored in S3,\nI decrypt it.\n\n293\n00:14:43.067 --> 00:14:45.578\nManipulate it, drop it back in S3,\nencrypt it again.\n\n294\n00:14:45.578 --> 00:14:46.889\nNow it's nice and safe, so\n\n295\n00:14:46.889 --> 00:14:50.850\nwe can leverage those technologies to\nimprove the security on some of these.\n\n296\n00:14:50.850 --> 00:14:52.486\nWe've got IAM just like everywhere else.\n\n297\n00:14:52.486 --> 00:14:53.784\nYou're gonna hear this again.\n\n298\n00:14:53.784 --> 00:14:57.231\nIt gets kind of repetitive\nIAM is super important.\n\n299\n00:14:57.231 --> 00:14:59.380\nIf you're new to AWS,\nyou don't know any better.\n\n300\n00:14:59.380 --> 00:15:00.955\nYou're always gonna use IAM.\n\n301\n00:15:00.955 --> 00:15:03.103\nBut if you're an old school AWS user,\n\n302\n00:15:03.103 --> 00:15:07.080\nyou remember a time like I do where\nwe didn't have IAM the way we do now.\n\n303\n00:15:07.080 --> 00:15:10.113\nAnd so, you did security a lot differently\nand you gotta get out of those habits.\n\n304\n00:15:10.113 --> 00:15:12.814\nWe gotta make sure we leverage\nIAM everywhere that we can.\n\n305\n00:15:12.814 --> 00:15:16.885\nWe can use IAM rolls for our applications\nto authenticate them and then we\n\n306\n00:15:16.885 --> 00:15:21.510\nuse IAM groups, and users to authenticate\nour users, and control their access.\n\n307\n00:15:21.510 --> 00:15:25.484\nSo in-between all those, that really\ngives us a lot of flexibility there.\n\n308\n00:15:25.484 --> 00:15:30.519\nMost of the services like Kinesis\nsupport SSL for API connections.\n\n309\n00:15:30.519 --> 00:15:33.348\nSo they've got kind of encryption\nbuilt-in in motion, but\n\n310\n00:15:33.348 --> 00:15:35.630\nyou've still got where the data resides.\n\n311\n00:15:35.630 --> 00:15:37.086\nThe data itself is sitting somewhere.\n\n312\n00:15:37.086 --> 00:15:39.800\nWe need to make sure that's secure,\nunless it's just public data and\n\n313\n00:15:39.800 --> 00:15:41.090\nwe don't care about it.\n\n314\n00:15:41.090 --> 00:15:44.707\nBut even if it's public data,\nwould you care if somebody got in and\n\n315\n00:15:44.707 --> 00:15:46.072\nmanipulated that data?\n\n316\n00:15:46.072 --> 00:15:50.868\nI mean, just look at the US elections see\nwhat would happen if somebody manipulates\n\n317\n00:15:50.868 --> 00:15:53.415\nthe public data it would\nbe a huge news item.\n\n318\n00:15:53.415 --> 00:15:56.953\nAnyway, so that's the kind of stuff\nwe are up against when it comes to\n\n319\n00:15:56.953 --> 00:15:58.550\nmanipulating data like this.\n\n320\n00:15:58.550 --> 00:16:01.138\n&gt;&gt; So Don, we've got a lot of\nadditional services that we\n\n321\n00:16:01.138 --> 00:16:02.609\nneed to worry about, as well.\n\n322\n00:16:02.609 --> 00:16:04.810\nCan you give us the rundown\non some of the odds and\n\n323\n00:16:04.810 --> 00:16:07.360\nends services that we\nstill have to look at?\n\n324\n00:16:07.360 --> 00:16:10.400\n&gt;&gt; All right, I think at this point,\nI've probably mentioned in\n\n325\n00:16:10.400 --> 00:16:15.020\nthe three parts that we've done here so\nfar, ten or 11 different services, right?\n\n326\n00:16:15.020 --> 00:16:17.610\nBut, if you go to the AWS\nmanagement console you'll see,\n\n327\n00:16:17.610 --> 00:16:22.300\nthere's 90 some odd services,\nthere's a ton of services.\n\n328\n00:16:22.300 --> 00:16:24.650\nFortunately, your solutions are always\ngonna be built kind of around\n\n329\n00:16:24.650 --> 00:16:25.420\nthe same thing, right?\n\n330\n00:16:26.430 --> 00:16:30.590\nUse VPCs, network ACLs, and\nsecurity groups to control access.\n\n331\n00:16:30.590 --> 00:16:35.260\nUse IAM to control access, right,\nto get the specific permissions.\n\n332\n00:16:35.260 --> 00:16:38.420\nBut there are a few other little odds and\nends that might turn up on the exam, so\n\n333\n00:16:38.420 --> 00:16:40.910\nI just wanna mention a few\nhere kind of rapid fire style.\n\n334\n00:16:40.910 --> 00:16:45.080\nLet's start with IAM itself, right?\n\n335\n00:16:45.080 --> 00:16:48.830\nI talked about IM in another episode\nwhen we did the access control and\n\n336\n00:16:48.830 --> 00:16:51.090\nI mentioned how we can have user accounts.\n\n337\n00:16:51.090 --> 00:16:52.620\nWe can have access keys.\n\n338\n00:16:52.620 --> 00:16:55.440\nWe can have multi-factor authentication.\n\n339\n00:16:55.440 --> 00:16:58.970\nWe can use roles to\npoint to multi accounts.\n\n340\n00:16:58.970 --> 00:17:02.980\nSo you can add user accounts in another\nAWS account that you're granting access\n\n341\n00:17:02.980 --> 00:17:04.080\nto, or applications.\n\n342\n00:17:04.080 --> 00:17:06.040\nSo those are all different\nways to authenticate.\n\n343\n00:17:06.040 --> 00:17:10.575\nOne that I didn't mention or at least\nI don't remember mentioning was SML.\n\n344\n00:17:10.575 --> 00:17:15.706\nSAML is an authentication framework,\nit stands for\n\n345\n00:17:15.706 --> 00:17:20.261\nSecurity Assertion Markup Language, SAML.\n\n346\n00:17:20.261 --> 00:17:24.927\nAnd SAML 2.0 is probably the most commonly\nsupported way to exchange security\n\n347\n00:17:24.927 --> 00:17:27.468\ncredentials between separate systems, or\n\n348\n00:17:27.468 --> 00:17:31.020\ndisparate systems that\nare not normally compatible.\n\n349\n00:17:31.020 --> 00:17:38.440\nSo I might have something like\na Red Shift database up in Amazon and\n\n350\n00:17:38.440 --> 00:17:42.980\nthen meanwhile, I'm running\na Novell e-directory, on-premises.\n\n351\n00:17:42.980 --> 00:17:48.348\nWell, those two aren't designed to talk to\neach other but there's SAML modules for\n\n352\n00:17:48.348 --> 00:17:51.990\nNovell e-directory and\nthere'ss SAML support in IAM.\n\n353\n00:17:51.990 --> 00:17:53.990\nSo since they could both\ntalk that same language,\n\n354\n00:17:53.990 --> 00:17:57.340\nnow they can talk to each other and\nthey can exchange authentication.\n\n355\n00:17:57.340 --> 00:18:01.807\nSo when I say IAM, it should always be\npart of your solution, I literally mean\n\n356\n00:18:01.807 --> 00:18:06.583\nalways, even if you got a completely\nproprietary line of business application.\n\n357\n00:18:06.583 --> 00:18:09.139\nAs long as it can speak the SAML language,\n\n358\n00:18:09.139 --> 00:18:13.166\nas long as it can exchange\ncredentials using that common method.\n\n359\n00:18:13.166 --> 00:18:16.549\nThen we'll be able to authenticate with\nIAM, and be able to use that as part of\n\n360\n00:18:16.549 --> 00:18:19.410\nour call authentication\nmodel; that's real important.\n\n361\n00:18:19.410 --> 00:18:22.630\n&gt;&gt; And does that secure you from like a\nvendor lock, if you have to have this one,\n\n362\n00:18:22.630 --> 00:18:25.180\nor you have to have this style,\nyou can have both of them talk?\n\n363\n00:18:25.180 --> 00:18:28.185\nEven if they are like you said\ntwo completely different vendors.\n\n364\n00:18:28.185 --> 00:18:31.070\n&gt;&gt; Yeah, it makes a big difference.\n\n365\n00:18:31.070 --> 00:18:34.280\nA great example with that\nwould be the mobile services.\n\n366\n00:18:34.280 --> 00:18:38.470\nMobile Services I haven't talked\nabout in this series, at least again,\n\n367\n00:18:38.470 --> 00:18:41.520\nat least I don't remember,\n[LAUGH] but if you have web app.\n\n368\n00:18:41.520 --> 00:18:44.094\nNot a web app a mobile application, so\n\n369\n00:18:44.094 --> 00:18:48.937\nyou decide to create the next best\nvideo game or a task manager, right?\n\n370\n00:18:48.937 --> 00:18:53.230\nMaybe you're the next Wunderlist, or\nTrello, or somebody like that, right?\n\n371\n00:18:53.230 --> 00:18:58.918\nSo you have a task list and you have a iOS\napp and you've got an Android app, right?\n\n372\n00:18:58.918 --> 00:19:01.648\nAnd you want people to be\nable to install the app and\n\n373\n00:19:01.648 --> 00:19:04.444\nif they check something is\ndone on the Android app.\n\n374\n00:19:04.444 --> 00:19:07.711\nYou want them to see it's done on\nthe iOS app also, or on their desktop or\n\n375\n00:19:07.711 --> 00:19:10.440\non whatever platform they're on, right?\n\n376\n00:19:10.440 --> 00:19:15.690\nOr you might want it to synchronize\nagainst Google's task list or\n\n377\n00:19:15.690 --> 00:19:17.680\nsome other task list that's out there,\nright?\n\n378\n00:19:17.680 --> 00:19:19.060\nRemember, Wonder List, somebody like that,\n\n379\n00:19:19.060 --> 00:19:20.500\nyou wanna be able to\nsynchronize with them.\n\n380\n00:19:20.500 --> 00:19:23.904\nWell, now we're dealing with a bunch of\ndifferent services a bunch of different\n\n381\n00:19:23.904 --> 00:19:25.416\nplaces where we can authenticate.\n\n382\n00:19:25.416 --> 00:19:28.839\nAnd we could rebuild that whole\nauthentication structure from the ground\n\n383\n00:19:28.839 --> 00:19:31.225\nup, you could stand up\nyour own identity servers.\n\n384\n00:19:31.225 --> 00:19:34.705\nYou can create your own protocol for\nauthenticating against it and\n\n385\n00:19:34.705 --> 00:19:37.390\nyou could write that protocol\nonto all these apps.\n\n386\n00:19:37.390 --> 00:19:40.260\nOr you could say I'm just gonna\nreuse something somebody else has\n\n387\n00:19:40.260 --> 00:19:41.312\nalready made, right?\n\n388\n00:19:41.312 --> 00:19:46.369\nAnd by leveraging IAM by leveraging\nthings like Amazon Cognito Security,\n\n389\n00:19:46.369 --> 00:19:49.590\nyou can use somebody\nelse's authentication.\n\n390\n00:19:49.590 --> 00:19:53.850\nYou ever go to a webpage and it say\nsomething like create a user account, or\n\n391\n00:19:53.850 --> 00:19:58.520\nlog in with Google, or log in with Amazon,\nor log in with Facebook.\n\n392\n00:19:58.520 --> 00:20:01.290\nAnd what they're saying is you don't\nhave to create a user account here.\n\n393\n00:20:01.290 --> 00:20:03.630\nIf you've already got a user\naccount on somebody elses site,\n\n394\n00:20:03.630 --> 00:20:06.800\nwe can use their authentication, right?\n\n395\n00:20:06.800 --> 00:20:09.280\nThat doesn't mean they have\naccess to the user database but\n\n396\n00:20:09.280 --> 00:20:13.110\nit means that they can take the username\nand password that you give them.\n\n397\n00:20:13.110 --> 00:20:16.890\nTurn it into a token,\nsend it over to that other company and\n\n398\n00:20:16.890 --> 00:20:20.810\nthe other company can look at the token\nand verify it against the real account.\n\n399\n00:20:20.810 --> 00:20:24.320\nAnd determine whether it's good or\nnot, and send it back.\n\n400\n00:20:24.320 --> 00:20:25.100\n&gt;&gt; You mentioned token,\n\n401\n00:20:25.100 --> 00:20:28.580\nwhat kinda tokens do we see as far as\nsupport inside of Cognito services?\n\n402\n00:20:28.580 --> 00:20:31.440\n&gt;&gt; There's several, I mean,\nOAuth is the main one, right?\n\n403\n00:20:31.440 --> 00:20:33.480\nSo OAuth, or open authentication,\n\n404\n00:20:33.480 --> 00:20:35.450\nthat's the one that's supported\nby just about everybody.\n\n405\n00:20:35.450 --> 00:20:38.730\nIt's actually OAuth 2, but\nI think in the exam they just say OAuth.\n\n406\n00:20:38.730 --> 00:20:41.937\nThere's OpenID which is another one,\nthose are the two big ones and\n\n407\n00:20:41.937 --> 00:20:43.802\nboth of them are supported in Cognito.\n\n408\n00:20:43.802 --> 00:20:46.174\nAnd let me explain that\nservice a little bit more,\n\n409\n00:20:46.174 --> 00:20:49.618\ncuz I said we take a username and\npassword, which we don't really do, so\n\n410\n00:20:49.618 --> 00:20:51.612\nlet me kind of lay out the workflow for\nit.\n\n411\n00:20:51.612 --> 00:20:54.726\nImagine if you will, you go to\na webpage and it's got a username and\n\n412\n00:20:54.726 --> 00:20:55.959\npassword block, right?\n\n413\n00:20:55.959 --> 00:20:59.530\nSo, this is a standard web application,\nusername and password and you log in.\n\n414\n00:20:59.530 --> 00:21:02.345\nWell, that web application has to\ntake that username and password and\n\n415\n00:21:02.345 --> 00:21:05.267\nauthenticate it against,\ntypically it's own user database, right?\n\n416\n00:21:05.267 --> 00:21:09.947\nBut when you're leveraging something like\nOAuth, it doesn't ask for a username and\n\n417\n00:21:09.947 --> 00:21:10.990\na password.\n\n418\n00:21:10.990 --> 00:21:13.739\nIt gives you a button and\nit says log in with Google, right?\n\n419\n00:21:13.739 --> 00:21:16.925\nAnd when you click on that you're\ntaken to a login form, but\n\n420\n00:21:16.925 --> 00:21:19.585\nthat login form is not\nyour web application.\n\n421\n00:21:19.585 --> 00:21:22.910\nThat login form is actually being\nrendered by who that other provider is.\n\n422\n00:21:22.910 --> 00:21:26.590\nNow that other provider might be you,\nit might be your application and\n\n423\n00:21:26.590 --> 00:21:28.270\nyou are just supporting OAuth.\n\n424\n00:21:28.270 --> 00:21:33.182\nOr it might be something that you've\nbuilt into IAM and Amazon support like\n\n425\n00:21:33.182 --> 00:21:36.700\nin Cognito Security so that you can\ndo it through your own service.\n\n426\n00:21:36.700 --> 00:21:40.170\nBut at the end of the day the actual\nlog in form is being provided by\n\n427\n00:21:40.170 --> 00:21:41.080\nthat other provider.\n\n428\n00:21:41.080 --> 00:21:44.596\nThat secondary provider where the actual\naccounts reside, so if I say I'm gonna log\n\n429\n00:21:44.596 --> 00:21:47.880\nin with Google, I never give my username\nand password to the site that I'm on.\n\n430\n00:21:47.880 --> 00:21:52.290\nI give my username and password to\nGoogle and they generate that token.\n\n431\n00:21:52.290 --> 00:21:55.320\nThey know it's good cuz they can verify\nit against the actual user database and\n\n432\n00:21:55.320 --> 00:21:57.080\nthey can send that token back.\n\n433\n00:21:57.080 --> 00:22:00.190\nAnd now, any time that webpage\ntries to do something as me,\n\n434\n00:22:00.190 --> 00:22:02.300\nit can use that token as\nlong as it's approved.\n\n435\n00:22:02.300 --> 00:22:03.910\nRight, you approve the application, so,\n\n436\n00:22:03.910 --> 00:22:06.139\nthat's the neat part is I don't\nneed another user account.\n\n437\n00:22:06.139 --> 00:22:09.918\nI keep using the same account and\nI can access my resources.\n\n438\n00:22:09.918 --> 00:22:13.426\nAnd, more importantly,\nif I'm on an iOS app, and\n\n439\n00:22:13.426 --> 00:22:16.863\nI'm on an Android app,\nand I'm on a desktop app.\n\n440\n00:22:16.863 --> 00:22:20.193\nIt'll know that it's always me, that\nit's the same person on all three apps,\n\n441\n00:22:20.193 --> 00:22:23.377\neven though I'm authenticating with\nsome secondary provider cuz I've got\n\n442\n00:22:23.377 --> 00:22:23.937\nthis token.\n\n443\n00:22:23.937 --> 00:22:27.475\nThis authorized application token that's\nthe same across all of the devices so\n\n444\n00:22:27.475 --> 00:22:29.120\nit can recognize who I am.\n\n445\n00:22:29.120 --> 00:22:32.500\n&gt;&gt; Now, Don, would you have to create\nan individual account for that, for\n\n446\n00:22:32.500 --> 00:22:33.020\nall those?\n\n447\n00:22:33.020 --> 00:22:34.930\nDo you have to create individual accounts?\n\n448\n00:22:34.930 --> 00:22:37.124\n&gt;&gt; Well, you gotta have\nan account somewhere, right?\n\n449\n00:22:37.124 --> 00:22:40.688\nFor the most part, so if I'm\nauthenticating with Google, or Amazon, or\n\n450\n00:22:40.688 --> 00:22:44.538\nFacebook, I'm gonna have to have a\nFacebook account, or a Google account, or\n\n451\n00:22:44.538 --> 00:22:45.720\nwhatever.\n\n452\n00:22:45.720 --> 00:22:48.256\nIf we create our own proprietor\nauthentication we have to have a user\n\n453\n00:22:48.256 --> 00:22:49.287\naccount somewhere there.\n\n454\n00:22:49.287 --> 00:22:53.566\nThe only real exception\nthat is like an IAM role.\n\n455\n00:22:53.566 --> 00:22:57.227\nIf your application has an IM role,\nit's not truly a user account,\n\n456\n00:22:57.227 --> 00:23:01.870\nit's really just a way of identifying the\napplication and giving it certain access.\n\n457\n00:23:01.870 --> 00:23:06.128\nSo you might have an application that\ndoesn't require a log in at all, right?\n\n458\n00:23:06.128 --> 00:23:10.590\nMaybe you're CNN and\nyou want to have a mobile app.\n\n459\n00:23:10.590 --> 00:23:13.228\nWhere people can launch the app and\nthey can see the news.\n\n460\n00:23:13.228 --> 00:23:16.248\nYou don't care who they are, it's the same\nnews that you're presenting to everybody,\n\n461\n00:23:16.248 --> 00:23:18.400\nand so\nyou don't worry about authentication.\n\n462\n00:23:18.400 --> 00:23:22.470\nWell, then you could use an IAM role\nthat said, when this app launches,\n\n463\n00:23:22.470 --> 00:23:26.260\nit's allowed to query this database to\nfind out what news items are available.\n\n464\n00:23:26.260 --> 00:23:29.200\nIt's allowed to hit these S3 buckets\nto get the images to display, and\n\n465\n00:23:29.200 --> 00:23:31.950\nthen it's allowed to hit these cloud\nfront end-points to be able to actually\n\n466\n00:23:31.950 --> 00:23:33.050\nplay videos.\n\n467\n00:23:33.050 --> 00:23:36.470\nAnd all of those permissions come from\nthe application identifying itself, and\n\n468\n00:23:36.470 --> 00:23:37.770\nI never had to log in.\n\n469\n00:23:37.770 --> 00:23:42.590\nSo to the end user, they look at it as\nI never had to have a user account.\n\n470\n00:23:42.590 --> 00:23:44.730\nBut there is still authentication\ngoing on behind the scenes,\n\n471\n00:23:44.730 --> 00:23:46.920\nthat is an important part of security.\n\n472\n00:23:48.470 --> 00:23:49.623\nAll right, let's see.\n\n473\n00:23:49.623 --> 00:23:53.568\nAnother example, and this'll probably be\nthe last one I do cuz they really do just\n\n474\n00:23:53.568 --> 00:23:56.271\nkind of recycle the same\nsolutions over and over again.\n\n475\n00:23:56.271 --> 00:23:58.949\nThe last tip I wanna give is WorkSpaces.\n\n476\n00:23:58.949 --> 00:24:02.878\nAmazon WorkSpaces, where you have what's\neffectively a hosted EC2 instance but\n\n477\n00:24:02.878 --> 00:24:04.310\nit's a desktop, right?\n\n478\n00:24:04.310 --> 00:24:07.357\nA Windows desktop where people can\nlogin at their Microsoft Office and\n\n479\n00:24:07.357 --> 00:24:08.295\nInternet Explorer.\n\n480\n00:24:08.295 --> 00:24:12.135\nAnd so they can kind of conduct their\nbusiness from this web presence.\n\n481\n00:24:12.135 --> 00:24:13.670\nWhile I talked about in\nan earlier episode and\n\n482\n00:24:13.670 --> 00:24:16.120\nmentioned how we can set\nup an Active Directory.\n\n483\n00:24:16.120 --> 00:24:18.291\nWe can have a centralized\ndirectory service or\n\n484\n00:24:18.291 --> 00:24:22.296\nmaybe not a Microsoft Active Directory,\nmaybe an Amazon simple directory, right,\n\n485\n00:24:22.296 --> 00:24:26.046\nthe sum of solution or some other type\nof directory they authenticate against.\n\n486\n00:24:26.046 --> 00:24:29.870\nThat's one formal authentication\nthat controls access into it.\n\n487\n00:24:29.870 --> 00:24:33.590\nYou can also do MFA for\nmulti-factor authentication, right?\n\n488\n00:24:33.590 --> 00:24:36.269\nAnywhere that you can use MFA,\nyou really should,\n\n489\n00:24:36.269 --> 00:24:40.764\nmulti-factor authentication is a great\nway to just completely defeat keyloggers.\n\n490\n00:24:40.764 --> 00:24:42.320\nIt's not perfect, right?\n\n491\n00:24:42.320 --> 00:24:45.388\nThere's always the human flaw that\nwe introduce in these things but,\n\n492\n00:24:45.388 --> 00:24:48.924\nit would help eliminate things like\nkeyloggers and increase account security,\n\n493\n00:24:48.924 --> 00:24:50.952\nyou definitely wanna\ntake advantage of that.\n\n494\n00:24:52.235 --> 00:24:56.187\nThe WorkSpaces themselves are leveraging\nelastic black stores are being backed up\n\n495\n00:24:56.187 --> 00:24:57.660\ntwice a day in the background.\n\n496\n00:24:57.660 --> 00:25:00.290\nSo as far as the backup that's\nkind of being taken of for us.\n\n497\n00:25:00.290 --> 00:25:02.600\nBut we can always be more\naggressive with those backups and\n\n498\n00:25:02.600 --> 00:25:05.000\ntake them more frequently if we need it.\n\n499\n00:25:05.000 --> 00:25:09.710\nKey thing to remember about WorkSpaces,\nit's got a second layer of security.\n\n500\n00:25:09.710 --> 00:25:12.230\nYou got the security\nprovided by Amazon but\n\n501\n00:25:12.230 --> 00:25:15.300\nthen there's the operating\nsystem inside of it, Windows.\n\n502\n00:25:15.300 --> 00:25:17.740\nAnd the default Windows\ndeployment that they use\n\n503\n00:25:17.740 --> 00:25:20.660\nhas Windows Update turned on by default.\n\n504\n00:25:20.660 --> 00:25:23.050\nBut we could turn it off if we wanted,\nright?\n\n505\n00:25:23.050 --> 00:25:26.770\nSo, now we need an extra layer\nof security to manage that.\n\n506\n00:25:26.770 --> 00:25:31.290\nYou'll want to use something like a group\npolicy object to say, Windows Updates\n\n507\n00:25:31.290 --> 00:25:34.680\nhas to be turned on and prevent your\nusers from turning it off, right.\n\n508\n00:25:34.680 --> 00:25:37.190\nBy default when you log in to\nthat WorkSpace the first time,\n\n509\n00:25:37.190 --> 00:25:39.350\nyou're an administrator,\nyou can do whatever you want.\n\n510\n00:25:39.350 --> 00:25:42.110\nYou may not want your users to be\nable to do whatever they want.\n\n511\n00:25:42.110 --> 00:25:47.490\nSo now it's up to us to improve security\non that product through Windows and\n\n512\n00:25:47.490 --> 00:25:48.840\nthen the servers that it provides.\n\n513\n00:25:48.840 --> 00:25:51.720\n&gt;&gt; Yeah, Don, this looks a lot like that\nshared responsibility bottle that you\n\n514\n00:25:51.720 --> 00:25:52.620\nwere talking about.\n\n515\n00:25:52.620 --> 00:25:53.885\nIs that what we're seeing here?\n\n516\n00:25:53.885 --> 00:25:56.900\n&gt;&gt; Yeah, you got the two different layers\nand let me pull that diagram up that I had\n\n517\n00:25:56.900 --> 00:25:58.990\nfrom the earlier show,\nso I've got it here.\n\n518\n00:25:58.990 --> 00:26:02.240\nWhenever you deploy AWS, yes,\nthey're securing a lot of stuff.\n\n519\n00:26:02.240 --> 00:26:05.650\nThey're taking a lot of measures\nthat are really impressive.\n\n520\n00:26:05.650 --> 00:26:09.940\nBut you're still responsible for\na huge chunk of what's going on.\n\n521\n00:26:09.940 --> 00:26:13.500\nAnd while it might be secured day one\nwhen you do the initial deployment,\n\n522\n00:26:13.500 --> 00:26:15.440\nit's very easy to mess all this stuff up.\n\n523\n00:26:15.440 --> 00:26:17.660\nSo we've got to get in there and\ntake care of that.\n\n524\n00:26:17.660 --> 00:26:21.170\nAny kind of client side data encryption,\nserver side encryption,\n\n525\n00:26:21.170 --> 00:26:25.040\nnetwork traffic protection, the operating\nsystem network and firewall configuration.\n\n526\n00:26:25.040 --> 00:26:26.220\nThat's all us.\n\n527\n00:26:26.220 --> 00:26:27.530\nWe have to deal with that.\n\n528\n00:26:27.530 --> 00:26:28.750\nThe platform applications,\n\n529\n00:26:28.750 --> 00:26:32.110\nidentity access management,\nwe have to configure that, right?\n\n530\n00:26:32.110 --> 00:26:35.980\nThat's really the whole point of this\nepisode is understand that each product\n\n531\n00:26:35.980 --> 00:26:40.170\nhas extra needs, beyond just that initial\ndeployment to make sure that it's secure.\n\n532\n00:26:40.170 --> 00:26:42.689\nAnd as we create a design,\nwhen you're designing, all right,\n\n533\n00:26:42.689 --> 00:26:45.550\nI'm gonna need this service and\nthat service, and this third service.\n\n534\n00:26:45.550 --> 00:26:47.570\nI'm gonna put them all\ntogether to create a solution.\n\n535\n00:26:47.570 --> 00:26:50.690\nI need to also be thinking of, okay,\nhere's how I need to secure this one,\n\n536\n00:26:50.690 --> 00:26:51.570\nhere's how I need to secure that one,\n\n537\n00:26:51.570 --> 00:26:54.340\nhere's the access that this\nother service needs and so on.\n\n538\n00:26:54.340 --> 00:26:55.520\nThink about what's available.\n\n539\n00:26:55.520 --> 00:26:59.960\nSo that's a real key principle of\narchitecting a solution in AWS.\n\n540\n00:26:59.960 --> 00:27:01.400\n&gt;&gt; Don, that's a lot of great information.\n\n541\n00:27:01.400 --> 00:27:04.555\nHats off to you when it comes to\ntying up the loose ends on a lot of\n\n542\n00:27:04.555 --> 00:27:06.026\ndifferent services in AWS.\n\n543\n00:27:06.026 --> 00:27:09.443\nBut, looks like we're gonna have to tie\nup the episode here cuz we don't have any\n\n544\n00:27:09.443 --> 00:27:10.406\nadditional minutes.\n\n545\n00:27:10.406 --> 00:27:13.930\nBut before we do, do you have any parting\nwords on us, some of the various security\n\n546\n00:27:13.930 --> 00:27:16.653\nrecommendation that you've\ngiven throughout this episode?\n\n547\n00:27:16.653 --> 00:27:20.230\n&gt;&gt; All right, well this wraps up our\nservice specific security that we're gonna\n\n548\n00:27:20.230 --> 00:27:23.208\ntalk about but in a following episode,\nnext one or the one after,\n\n549\n00:27:23.208 --> 00:27:26.100\nwe're gonna talk a little bit\nabout security and compliance.\n\n550\n00:27:26.100 --> 00:27:28.740\nIn that episode, I'm gonna talk\nabout Amazon Security Guide.\n\n551\n00:27:28.740 --> 00:27:30.250\nIt is recommended reading.\n\n552\n00:27:30.250 --> 00:27:31.525\nIt's really a useful thing to read.\n\n553\n00:27:31.525 --> 00:27:33.280\nCuz they break down each\nof the services and\n\n554\n00:27:33.280 --> 00:27:34.800\ntalk about all the stuff that's available.\n\n555\n00:27:34.800 --> 00:27:37.510\nIf I were to talk about it here, it would\ntake hours and it would be really boring.\n\n556\n00:27:37.510 --> 00:27:39.180\nBut when you pull the guide\non your own computer,\n\n557\n00:27:39.180 --> 00:27:41.800\nyou can jump right to the areas that\nyou need and it's really handy.\n\n558\n00:27:41.800 --> 00:27:44.360\nSo definitely check out\nthe compliance episode,\n\n559\n00:27:44.360 --> 00:27:46.010\nthat's gonna be one you benefit from.\n\n560\n00:27:46.010 --> 00:27:47.210\n&gt;&gt; All right, Don, as always,\n\n561\n00:27:47.210 --> 00:27:49.320\nwe appreciate you being here\nin the studios with us.\n\n562\n00:27:49.320 --> 00:27:51.220\nAnd we appreciate you the viewer watching,\n\n563\n00:27:51.220 --> 00:27:54.230\nsigning out for TProTV,\nI've been your host Wes Bryan.\n\n564\n00:27:54.230 --> 00:27:54.961\n&gt;&gt; And, I'm Don Pezet.\n\n565\n00:27:54.961 --> 00:27:57.076\n&gt;&gt; And we'll see you next time.\n\n566\n00:27:57.076 --> 00:28:03.609\n[MUSIC]\n\n567\n00:28:03.609 --> 00:28:07.929\n&gt;&gt; Thank you for watching, ITPro.TV.\n\n",
          "vimeoId": "209560820"
        }
      ],
      "title": "Security on AWS"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don explore risk and compliance in AWS. They explain a shared responsibility model and governance concepts, while looking at Amazon recommendations. They talk about the evaluation and integration of AWS controls as well as discussing the core areas of the AWS Risk and Compliance program.",
          "length": "1522",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-13-1-aws_risk_and_compliance-032017-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-13-1-aws_risk_and_compliance-032017-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-13-1-aws_risk_and_compliance-032017-1-sm.jpg",
          "title": "AWS Risk and Compliance",
          "transcript": "WEBVTT\n\n1\n00:00:00.260 --> 00:00:06.289\nWelcome to ITPro.TV I'm your\nhost Don Pezet [CROSSTALK]\n\n2\n00:00:06.289 --> 00:00:08.322\n[MUSIC]\n\n3\n00:00:08.322 --> 00:00:10.590\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:12.200 --> 00:00:12.840\n&gt;&gt; Hello everyone.\n\n5\n00:00:12.840 --> 00:00:14.890\nThanks for joining us here at IT Pro TV.\n\n6\n00:00:14.890 --> 00:00:17.650\nI'm your show host Wes Brian and\nwe've got a great show in store for\n\n7\n00:00:17.650 --> 00:00:22.420\nyou today as we continue through our AWS\ncertified solutions architect associate\n\n8\n00:00:22.420 --> 00:00:25.320\nand joining us back in the studios\ntoday is none other than Don Pezet.\n\n9\n00:00:25.320 --> 00:00:26.281\nDon, how you doing, sir?\n\n10\n00:00:26.281 --> 00:00:29.236\n&gt;&gt; I am pumped up and excited and ready\nto talk about risk and compliance and\n\n11\n00:00:29.236 --> 00:00:32.349\nI'm glad I've got Wes with me you know\nwe have another host here, Daniel.\n\n12\n00:00:32.349 --> 00:00:35.865\nWho, the moment you mention\nanything about a risk assessment,\n\n13\n00:00:35.865 --> 00:00:39.705\nhe's curled up in a ball in the corner\nsobbing to himself over here, so\n\n14\n00:00:39.705 --> 00:00:43.180\nwe're ready to jump in and\ntalk about it Real important topic.\n\n15\n00:00:43.180 --> 00:00:47.170\nWhen you move infrastructure, when you\nmove data up into a cloud service.\n\n16\n00:00:47.170 --> 00:00:48.810\nAny cloud service really.\n\n17\n00:00:48.810 --> 00:00:52.400\nYou lose that tangible\ncontrol of your equipment.\n\n18\n00:00:52.400 --> 00:00:57.620\nYou lose that knowing exactly where your\ndata is type thing that we're used to.\n\n19\n00:00:57.620 --> 00:00:59.520\nAnd that means that there's risk.\n\n20\n00:00:59.520 --> 00:01:03.429\nAnd so in this episode we're going to\ntalk about how we evaluate that risk, and\n\n21\n00:01:03.429 --> 00:01:05.335\nhow we ensure that our data is stored.\n\n22\n00:01:05.335 --> 00:01:08.578\nAnd that we meet the compliance\nrequirements that we've got to ensure that\n\n23\n00:01:08.578 --> 00:01:11.357\nwe're not taking unnecessary risks and\nthat we're living up to\n\n24\n00:01:11.357 --> 00:01:14.090\nour legal obligations depending\non which industry we're in.\n\n25\n00:01:14.090 --> 00:01:16.929\nSo that's all stuff we're going to\nlook at right here in this episode.\n\n26\n00:01:17.970 --> 00:01:22.110\nAll right, so\nlet's get things started with compliance.\n\n27\n00:01:22.110 --> 00:01:23.840\nWhen we talk about risk.\n\n28\n00:01:23.840 --> 00:01:25.680\nRisk is one of those funny things,\n\n29\n00:01:25.680 --> 00:01:28.673\nbecause there are people out\nthere who are risk averse.\n\n30\n00:01:28.673 --> 00:01:31.549\nThere are people out there who\nare risk seekers, that want the risk.\n\n31\n00:01:31.549 --> 00:01:35.820\nThere's people that know, the bigger\nthe risk, the bigger the reward, right?\n\n32\n00:01:35.820 --> 00:01:37.510\nBut there's times where\nwe can't take chances.\n\n33\n00:01:37.510 --> 00:01:40.780\nAnd if you're dealing with\nmedical records there's a chance\n\n34\n00:01:40.780 --> 00:01:44.260\nthat you can use the cheapest servers in\nthe world, and not maintain them, and\n\n35\n00:01:44.260 --> 00:01:48.240\nnot do updates, and not secure them,\nand not get hacked.\n\n36\n00:01:48.240 --> 00:01:50.582\nMaybe, just nobody ever\nbreaks into your servers.\n\n37\n00:01:50.582 --> 00:01:54.560\nAnd the servers run fine for\n20 years and you save a ton of money.\n\n38\n00:01:54.560 --> 00:01:57.330\nBecause you never bothered with doing\nany of the higher end availability,\n\n39\n00:01:57.330 --> 00:01:58.320\ndurability and all that stuff.\n\n40\n00:01:58.320 --> 00:02:01.890\nThere's a chance that could happen,\nthat is a realistic outcome.\n\n41\n00:02:01.890 --> 00:02:04.490\nI know a lot of us scoff at it,\nbut it is a realistic outcome.\n\n42\n00:02:04.490 --> 00:02:05.600\nThat could happen.\n\n43\n00:02:05.600 --> 00:02:08.850\nIt's not likely though right, [LAUGH]\nmore likely you're gonna get hacked,\n\n44\n00:02:08.850 --> 00:02:10.780\ndata gets compromised and\nnow you got a problem.\n\n45\n00:02:10.780 --> 00:02:16.743\nSo in many cases the government or\ntrade industries, trade associations,\n\n46\n00:02:16.743 --> 00:02:21.973\nsomebody in international standards board,\nsomebody steps in.\n\n47\n00:02:21.973 --> 00:02:25.554\nAnd says okay,\nlook it's okay to roll the dice and\n\n48\n00:02:25.554 --> 00:02:31.940\ntake risks in your company, but\nhere's things you have to do at a minimum.\n\n49\n00:02:31.940 --> 00:02:34.480\nAnd that's where compliance comes in.\n\n50\n00:02:34.480 --> 00:02:38.500\nAre you complying with the minimum\nrequirements set forth\n\n51\n00:02:38.500 --> 00:02:42.370\nby whatever body it is\nthat governs what you do?\n\n52\n00:02:42.370 --> 00:02:49.460\nAnd that body could be city, state,\nnational, international organizations.\n\n53\n00:02:49.460 --> 00:02:51.360\nIt could be trade associations.\n\n54\n00:02:51.360 --> 00:02:52.720\nIt could just be you internally.\n\n55\n00:02:52.720 --> 00:02:56.810\nYou internally set a goal and say here's\nwhat I want to provide to my customers or\n\n56\n00:02:56.810 --> 00:02:58.120\nto my employees.\n\n57\n00:02:58.120 --> 00:03:01.610\nWell, how do we make sure that we're\nliving up to those goals that we set?\n\n58\n00:03:01.610 --> 00:03:05.690\nWhen we can't even see the servers that\nwe're running our software on, right?\n\n59\n00:03:05.690 --> 00:03:07.550\nWe don't even know where that building is.\n\n60\n00:03:07.550 --> 00:03:09.930\nAnd if we went to that building they\nwouldn't even let us in the door.\n\n61\n00:03:09.930 --> 00:03:13.110\nHow can we make sure that we're secure?\n\n62\n00:03:13.110 --> 00:03:15.140\nAnd the way we do that,\n\n63\n00:03:15.140 --> 00:03:19.520\nIs through independent validation\nof what's going on, right?\n\n64\n00:03:19.520 --> 00:03:24.160\nWe need a third party, somebody outside to\ncome in, check out what's being done, and\n\n65\n00:03:24.160 --> 00:03:27.260\nmake sure that it's being done\naccording to what our standards are.\n\n66\n00:03:27.260 --> 00:03:31.391\n&gt;&gt; Don do you think it's a fair statement\nto say when it comes to risk it's not\n\n67\n00:03:31.391 --> 00:03:33.403\nabout risk complete elimination.\n\n68\n00:03:33.403 --> 00:03:34.792\nIt's about the mitigation,\n\n69\n00:03:34.792 --> 00:03:37.909\nreducing the risk while still\nadhering to compliance standards.\n\n70\n00:03:37.909 --> 00:03:41.890\n&gt;&gt; Yeah it's almost impossible to\ncompletely eliminate risks, right.\n\n71\n00:03:41.890 --> 00:03:45.840\nThere's hackers out there, people\nwho want to break into my equipment.\n\n72\n00:03:45.840 --> 00:03:49.656\nSo how can I make it where my\nequipment cannot be hacked into?\n\n73\n00:03:49.656 --> 00:03:50.540\nWhat can I do?\n\n74\n00:03:50.540 --> 00:03:53.779\nAnd I'm not talking about mostly or\nmitigation, I'm talking about absolute,\n\n75\n00:03:53.779 --> 00:03:56.412\nout right, what can I do to make\nsure it doesn't get hacked into?\n\n76\n00:03:56.412 --> 00:03:58.614\n&gt;&gt; Well the first thing I think of is\nas you walk over to the power plug and\n\n77\n00:03:58.614 --> 00:03:59.475\nyou pull it from the wall.\n\n78\n00:03:59.475 --> 00:04:01.700\n&gt;&gt; Well and that would work.\n\n79\n00:04:01.700 --> 00:04:03.280\nBut now my service isn't available.\n\n80\n00:04:03.280 --> 00:04:05.594\nSo while keeping the service available,\n\n81\n00:04:05.594 --> 00:04:08.113\nhow can I make sure it's\nnot getting hacked.\n\n82\n00:04:08.113 --> 00:04:09.975\nYou could go extreme,\nyou could pull the power,\n\n83\n00:04:09.975 --> 00:04:12.460\nyou could unplug it from the network,\nair gap it.\n\n84\n00:04:12.460 --> 00:04:16.040\nBut even there, there's times where\npeople can find ways around it.\n\n85\n00:04:16.040 --> 00:04:18.610\nSo, it's a tough balancing act.\n\n86\n00:04:18.610 --> 00:04:20.500\nIf you want your service to be available,\n\n87\n00:04:20.500 --> 00:04:22.950\nyou're going to have to take that risk in,\nokay?\n\n88\n00:04:22.950 --> 00:04:26.520\nAnd so,\nyou take steps to minimize the risk, and\n\n89\n00:04:26.520 --> 00:04:29.690\nyou can have an independent third party\ncome in and evaluate your systems to\n\n90\n00:04:29.690 --> 00:04:34.930\ndetermine are you doing the things that\nare necessary to minimize that risk.\n\n91\n00:04:34.930 --> 00:04:36.360\nWell, with Amazon.\n\n92\n00:04:36.360 --> 00:04:38.830\nI can't just go and\ncall some random auditor.\n\n93\n00:04:38.830 --> 00:04:40.270\nAnd send them to Amazon.\n\n94\n00:04:40.270 --> 00:04:43.095\nAnd say, go knock on their door and\ncheck it out.\n\n95\n00:04:43.095 --> 00:04:45.030\nAnd make sure everything is doing okay,\nright?\n\n96\n00:04:45.030 --> 00:04:46.500\nAnd fortunately, I don't have to.\n\n97\n00:04:46.500 --> 00:04:48.480\nBecause that gets expensive, right?\n\n98\n00:04:48.480 --> 00:04:50.690\nInstead, Amazon is doing it for us.\n\n99\n00:04:50.690 --> 00:04:54.580\nThey are already paying for third party\nexternal organizations to come and\n\n100\n00:04:54.580 --> 00:04:55.720\naudit their infrastructure.\n\n101\n00:04:55.720 --> 00:04:58.800\nTo look and make sure that their\nmeeting compliance requirements.\n\n102\n00:04:58.800 --> 00:05:01.327\nFor a number of different\nstandards that are out there.\n\n103\n00:05:01.327 --> 00:05:02.549\nAnd they're not messing around,\n\n104\n00:05:02.549 --> 00:05:05.870\nthey're not just saying look, we're gonna\naudit one individual thing or whatever.\n\n105\n00:05:05.870 --> 00:05:09.360\nThey hit a ton of them, we'll take\na look at those in just a moment.\n\n106\n00:05:09.360 --> 00:05:11.610\nSo they're really handling a lot of that.\n\n107\n00:05:11.610 --> 00:05:13.600\nBut before I dive into\nthose individual ones,\n\n108\n00:05:13.600 --> 00:05:16.330\nlet me just reiterate something I\nmentioned in a few episodes now.\n\n109\n00:05:16.330 --> 00:05:20.970\nWe have a shared responsibility model\nAmazon is gonna make suer that they\n\n110\n00:05:20.970 --> 00:05:24.360\nare compliant according to a number\nof different standards out there.\n\n111\n00:05:24.360 --> 00:05:28.056\nEven standards from businesses that\nthey're not a part of because they\n\n112\n00:05:28.056 --> 00:05:30.767\nknow they might be hosting\nother people who are, but\n\n113\n00:05:30.767 --> 00:05:33.435\nthey can only certify\nthe parts that they control.\n\n114\n00:05:33.435 --> 00:05:37.019\nSo let's look at that shared\nresponsibility model again, and\n\n115\n00:05:37.019 --> 00:05:41.890\nwhat we'll see Is the compute resources,\nthe instances themselves, the storage,\n\n116\n00:05:41.890 --> 00:05:47.310\nthe databases, the networking, the edge\nlocations, regions, availability zones.\n\n117\n00:05:47.310 --> 00:05:51.290\nThat's all stuff that Amazon controls,\nand when they bring an external\n\n118\n00:05:51.290 --> 00:05:55.080\nthird party auditor in they can generate\nthe reports and certifications for\n\n119\n00:05:55.080 --> 00:05:57.070\nall of that infrastructure.\n\n120\n00:05:57.070 --> 00:06:01.780\nBut then on top of that we've got all this\nother stuff including the operating system\n\n121\n00:06:01.780 --> 00:06:03.510\nof our instances.\n\n122\n00:06:03.510 --> 00:06:05.370\nAnd they won't certify that.\n\n123\n00:06:05.370 --> 00:06:08.280\nBecause we could get in there and\nmess with a lot of stuff right?\n\n124\n00:06:08.280 --> 00:06:12.010\nSo instead when we bring in that\nindependent third party auditor,\n\n125\n00:06:13.020 --> 00:06:16.560\nwe're gonna give them remote access into\nour services, into our applications,\n\n126\n00:06:16.560 --> 00:06:17.940\ninto our instances.\n\n127\n00:06:17.940 --> 00:06:20.500\nAnd they can certify that\nwe're doing everything\n\n128\n00:06:20.500 --> 00:06:23.480\nthat's under our purview\nunder this blue area.\n\n129\n00:06:23.480 --> 00:06:28.130\nMeanwhile, with Amazon I don't need\nthem to audit the orange area here\n\n130\n00:06:28.130 --> 00:06:29.860\nbecause Amazon's already done it.\n\n131\n00:06:29.860 --> 00:06:33.120\nAnd when you go to Amazon's webpage,\nthey show\n\n132\n00:06:33.120 --> 00:06:36.670\na lot of the compliance resources that\nare available right on their website.\n\n133\n00:06:36.670 --> 00:06:40.800\nIf you go to aws.amazon.com/compliance,\n\n134\n00:06:40.800 --> 00:06:43.570\nthey highlight some of the bigger\nprograms right off the bat, right?\n\n135\n00:06:43.570 --> 00:06:47.820\nISO 27001, PCI, right,\nthat's the payment card industry so\n\n136\n00:06:47.820 --> 00:06:51.020\nthat you can process credit card data.\n\n137\n00:06:51.020 --> 00:06:56.234\nSOC, right, for doing the SSAE 16\nrequirements that we have here in the U.S.\n\n138\n00:06:56.234 --> 00:06:58.008\nand a number more, right?\n\n139\n00:06:58.008 --> 00:06:59.790\nThey're just highlighting\na few right here.\n\n140\n00:06:59.790 --> 00:07:02.047\nBut as I scroll down and\nget to the assurance programs.\n\n141\n00:07:02.047 --> 00:07:06.613\nYou'll see it's quite the list and the\nlist is even bigger than what we're seeing\n\n142\n00:07:06.613 --> 00:07:11.260\nhere because they do multinational and\nthey cover a lot of different things.\n\n143\n00:07:11.260 --> 00:07:15.210\nIf we start taking a look at some of\nthe other resources that are available,\n\n144\n00:07:15.210 --> 00:07:19.602\nyou'll see where they provide reports\nwhen they're providing the ISO 27001\n\n145\n00:07:19.602 --> 00:07:20.999\nCertification, right?\n\n146\n00:07:20.999 --> 00:07:22.820\nSo, they got certified.\n\n147\n00:07:22.820 --> 00:07:26.820\nThey went through a whole rigmarole\nto get ISO 27001 certified.\n\n148\n00:07:26.820 --> 00:07:28.390\nYou can pull up the report.\n\n149\n00:07:28.390 --> 00:07:30.090\nOr their SOC 3 report.\n\n150\n00:07:30.090 --> 00:07:35.590\nOr whatever it is that you need\nto make sure that they have it\n\n151\n00:07:35.590 --> 00:07:37.450\ngovern the way that you\nneed it to be governed.\n\n152\n00:07:37.450 --> 00:07:40.290\nAnd you'll say where they can\nkind of break it all up in all\n\n153\n00:07:40.290 --> 00:07:40.840\nsorts of categories.\n\n154\n00:07:40.840 --> 00:07:43.440\nYou can pull all sorts of different\ninformation from here to find out\n\n155\n00:07:43.440 --> 00:07:46.690\nwhether or not they're being compliant.\n\n156\n00:07:46.690 --> 00:07:50.520\nBut after that,\nyou still have to do the same, right?\n\n157\n00:07:50.520 --> 00:07:55.016\nIt's great that Amazon\nis ISO 27001 certified.\n\n158\n00:07:55.016 --> 00:07:59.654\nSo if I'm a company and\nI deploy all of my servers in AWS,\n\n159\n00:07:59.654 --> 00:08:03.133\ndoes that mean that I'm ISO 27001?\n\n160\n00:08:03.133 --> 00:08:05.011\nNo, it doesn't, right?\n\n161\n00:08:05.011 --> 00:08:07.080\nYou've gotta turn around and\ndo your own audit.\n\n162\n00:08:07.080 --> 00:08:08.722\nYou've gotta do your own attestation.\n\n163\n00:08:08.722 --> 00:08:13.362\nYou've gotta do your own paperwork and\nshow that for the areas you control,\n\n164\n00:08:13.362 --> 00:08:15.619\nyou're ISO 27001 certified.\n\n165\n00:08:15.619 --> 00:08:18.105\nAnd when you meet all the requirements and\n\n166\n00:08:18.105 --> 00:08:23.083\nAmazon meets all the requirements\ntogether, now you are ISO 27001, right?\n\n167\n00:08:23.083 --> 00:08:24.302\nThat's what you have to go through.\n\n168\n00:08:24.302 --> 00:08:27.490\n&gt;&gt; And is it fair to say, Don, they've\ngiven you the tools, like you've shown us.\n\n169\n00:08:27.490 --> 00:08:29.618\nThey give you the tools\nto come into compliance.\n\n170\n00:08:29.618 --> 00:08:32.669\nBut it's up to you to do the configuration\nand flip the right switches to make\n\n171\n00:08:32.669 --> 00:08:35.780\nsure that your side of the business\nlives up to the compliance standard.\n\n172\n00:08:35.780 --> 00:08:36.620\n&gt;&gt; Absolutely, and\n\n173\n00:08:36.620 --> 00:08:40.380\nthere's many people that are using AWS\nthat don't need to be compliant, right?\n\n174\n00:08:40.380 --> 00:08:41.590\nAnd so they don't care about that stuff.\n\n175\n00:08:41.590 --> 00:08:42.850\nAnd they're not gonna do the extra part.\n\n176\n00:08:42.850 --> 00:08:46.490\nWell, Amazon's already done it cuz they\nhave to do it for the whole data center.\n\n177\n00:08:46.490 --> 00:08:50.380\nIf you have two racks and\none rack has servers for\n\n178\n00:08:50.380 --> 00:08:54.460\na company that needs to be PCI compliant,\nthe rack next to that\n\n179\n00:08:54.460 --> 00:08:58.230\nmight have instances from a company\nthat doesn't need to be PCI compliant.\n\n180\n00:08:58.230 --> 00:09:01.662\nBut both racks have to be PCI compliant.\n\n181\n00:09:01.662 --> 00:09:04.450\nBecause otherwise, if one got compromised,\n\n182\n00:09:04.450 --> 00:09:06.880\nit could potentially lead to\nthe other getting compromised.\n\n183\n00:09:06.880 --> 00:09:11.070\nSo Amazon certifies the whole environment\nfor the areas that they're responsible.\n\n184\n00:09:11.070 --> 00:09:13.390\nEven if you don't ask for\nit, they do it, right?\n\n185\n00:09:13.390 --> 00:09:15.050\nSo they've already taken care of it.\n\n186\n00:09:15.050 --> 00:09:16.610\nYou just go and download the forms and\n\n187\n00:09:16.610 --> 00:09:20.030\ntack it onto your forms that\nshow you did your part.\n\n188\n00:09:20.030 --> 00:09:22.830\nAnd now you're certified,\nif you choose to go that route.\n\n189\n00:09:22.830 --> 00:09:26.118\nAnd that's important because different\ncountries have different requirements,\n\n190\n00:09:26.118 --> 00:09:28.251\ndifferent industries have\ndifferent requirements.\n\n191\n00:09:28.251 --> 00:09:31.163\nAnd even internally, we might set\ndifferent goals and guidelines for\n\n192\n00:09:31.163 --> 00:09:32.610\nour own organization.\n\n193\n00:09:32.610 --> 00:09:33.820\nAnd those are gonna vary also.\n\n194\n00:09:33.820 --> 00:09:36.420\nSo it's nice that we're able to\njust reach in an grab the pieces\n\n195\n00:09:36.420 --> 00:09:40.110\nthat we want to make\nsure that we have that.\n\n196\n00:09:40.110 --> 00:09:43.600\nSo definitely something that we need to\nlook into as we deal with compliance and\n\n197\n00:09:43.600 --> 00:09:45.199\nmaking sure that we meet\nall those requirements.\n\n198\n00:09:46.800 --> 00:09:51.290\nIf we want to validate all of these\ncontrols and we wanna make sure that we\n\n199\n00:09:51.290 --> 00:09:55.230\ntake advantage of what's there, we do need\nto have a good idea of what is available.\n\n200\n00:09:55.230 --> 00:09:58.959\nSo for example, I'm gonna pull up here,\nI've got the SOC Compliance,\n\n201\n00:09:58.959 --> 00:10:01.539\nwhich is Service Organization Control,\nright?\n\n202\n00:10:01.539 --> 00:10:07.340\nIf you've ever heard of SSAE 16,\nwhich is a service attestation, right?\n\n203\n00:10:07.340 --> 00:10:12.200\nWhere you you attest, you say that you're\nperforming certain steps to make sure that\n\n204\n00:10:12.200 --> 00:10:14.310\nall of your data is safe, right?\n\n205\n00:10:14.310 --> 00:10:18.090\nThere's actually three different levels,\ntechnically four.\n\n206\n00:10:18.090 --> 00:10:23.358\nBut usually three different levels of\nSOC audit that we can perform to prove,\n\n207\n00:10:23.358 --> 00:10:27.115\nor to attest,\nthat we've met these requirements, right?\n\n208\n00:10:27.115 --> 00:10:30.980\nSOC Level 1 is kind of the entry-level\nwhere you're just saying,\n\n209\n00:10:30.980 --> 00:10:33.690\nhey, I did certain things\nto make sure I'm okay.\n\n210\n00:10:33.690 --> 00:10:37.741\nBut a SOC 2 or a SOC 1 Type 2\naudit will actually go in and\n\n211\n00:10:37.741 --> 00:10:42.326\nevaluate that you are actually\ndoing the things you attest to.\n\n212\n00:10:42.326 --> 00:10:44.603\nAnd so you're really getting\nan independent body to attest to\n\n213\n00:10:44.603 --> 00:10:45.910\nwhat you've done.\n\n214\n00:10:45.910 --> 00:10:49.057\nAnd so\nwe can come in to Amazon's web page, and\n\n215\n00:10:49.057 --> 00:10:51.411\nwe can pull up their SOC 1 Report.\n\n216\n00:10:51.411 --> 00:10:54.220\nWe can pull up their SOC 2 and\nSOC 3 reports.\n\n217\n00:10:54.220 --> 00:10:57.849\nWe can pull that information from\nwhere they've already had the audit.\n\n218\n00:10:57.849 --> 00:10:59.858\nNow I'd love to be able\nto show you guys this.\n\n219\n00:10:59.858 --> 00:11:02.950\nBut when you click on a lot of these,\nit's gonna take you to a special page,\n\n220\n00:11:02.950 --> 00:11:05.300\nthis page here where you can\npull up your AWS Artifacts.\n\n221\n00:11:05.300 --> 00:11:08.730\nAnd here's where you see\nall the different reports.\n\n222\n00:11:08.730 --> 00:11:10.710\nAnd some of these,\nI'll be honest with you,\n\n223\n00:11:10.710 --> 00:11:12.400\nsome of these I've never even heard of.\n\n224\n00:11:12.400 --> 00:11:16.150\nMany of these, I have, and\nthat's because some of them are not for\n\n225\n00:11:16.150 --> 00:11:17.710\ncompanies that just do business in the US.\n\n226\n00:11:17.710 --> 00:11:18.730\nSome of these are international.\n\n227\n00:11:18.730 --> 00:11:21.180\nSome of these are only\nrequired by certain countries.\n\n228\n00:11:21.180 --> 00:11:23.350\nSo some of these may not\napply to you at all.\n\n229\n00:11:23.350 --> 00:11:27.320\nOthers may be super important to you and\nnot an optional thing.\n\n230\n00:11:27.320 --> 00:11:29.440\nBut as you scroll down and\nstart looking at some of these,\n\n231\n00:11:29.440 --> 00:11:33.430\nyou'll find the ISO 27001\ncertification that was done.\n\n232\n00:11:33.430 --> 00:11:37.140\nAnd see how it's the ISO 27001:2013?\n\n233\n00:11:37.140 --> 00:11:43.845\nBut if you look the validity period,\nit's valid through November 7th, 2019.\n\n234\n00:11:43.845 --> 00:11:47.900\nSo even though it says that 2013,\nit's still valid for quite some time.\n\n235\n00:11:47.900 --> 00:11:52.070\nAnd you can see not just that\nthe certification was issued, but\n\n236\n00:11:52.070 --> 00:11:54.300\nwhich services were covered.\n\n237\n00:11:54.300 --> 00:11:56.880\nAnd here's where it gets really picky.\n\n238\n00:11:56.880 --> 00:12:01.040\nBecause now it cannot just the service but\n\n239\n00:12:01.040 --> 00:12:06.300\nthe region, not every region\nhas the same certification.\n\n240\n00:12:06.300 --> 00:12:10.133\nNow for ISO 27,001 if you look,\nI'm pretty sure they covered most of it.\n\n241\n00:12:10.133 --> 00:12:15.298\nSo you'll see EC2, EBS,\nSQS, they're all listed.\n\n242\n00:12:15.298 --> 00:12:18.410\nAnd when you look at some of them,\nthough, they'll list a particular region.\n\n243\n00:12:18.410 --> 00:12:24.560\nLike here I see, US East Ohio, or\nUS West Oregon, US West North California.\n\n244\n00:12:24.560 --> 00:12:28.460\nBut you might be deploying in a data\ncenter that's not in this list.\n\n245\n00:12:28.460 --> 00:12:31.900\nAnd if that's the case,\nthen it's not ISO27001.\n\n246\n00:12:31.900 --> 00:12:34.204\nI think all of their data\ncenters are ISO27001, but\n\n247\n00:12:34.204 --> 00:12:36.226\nyou'll see of the other\nones where they aren't.\n\n248\n00:12:36.226 --> 00:12:38.568\nHere's the 2015 edition.\n\n249\n00:12:38.568 --> 00:12:41.170\nAnd you'll see other ones as\nyou kinda keep scrolling down.\n\n250\n00:12:41.170 --> 00:12:45.250\nHere's the PCI DSS that they've got,\nand that's an important one.\n\n251\n00:12:45.250 --> 00:12:49.440\nAnd you'll notice this list is\na little smaller than the ISO 27001.\n\n252\n00:12:49.440 --> 00:12:53.700\nOr QMS, the Quality Management System,\nthat one's even smaller, right?\n\n253\n00:12:53.700 --> 00:12:56.620\nAnd that's because it pertains\nto a much smaller market,\n\n254\n00:12:56.620 --> 00:13:00.170\na much smaller group of people\nare affected by that one.\n\n255\n00:13:00.170 --> 00:13:03.760\nBut if I wanted to people the SOC 1,\nright, and take a look at that, or\n\n256\n00:13:03.760 --> 00:13:06.020\nthe SOC 2 report, here they are.\n\n257\n00:13:06.020 --> 00:13:10.200\nAnd I see what services and\nwhat regions have been certified, and\n\n258\n00:13:10.200 --> 00:13:12.184\nagain, it's not all of them.\n\n259\n00:13:12.184 --> 00:13:15.730\nIn fact,\nlet me see if I can spot somebody missing.\n\n260\n00:13:15.730 --> 00:13:17.226\nActually, you know what,\nthat might be all of them,\n\n261\n00:13:17.226 --> 00:13:18.437\ncuz I don't see anybody missing offhand.\n\n262\n00:13:18.437 --> 00:13:20.140\nBut there might be somebody missing.\n\n263\n00:13:20.140 --> 00:13:21.863\nBut when you choose to get the artifact,\n\n264\n00:13:21.863 --> 00:13:24.355\nthey make you sign a non-disclosure\nagreement, an NDA.\n\n265\n00:13:24.355 --> 00:13:28.370\nAnd you're not allowed to share\nthe information with anybody because it's\n\n266\n00:13:28.370 --> 00:13:32.410\ninformation pertaining to how Amazon\ncarries out security on the back end.\n\n267\n00:13:32.410 --> 00:13:36.000\nWell, that's pretty useful information for\nan attacker to have, right?\n\n268\n00:13:36.000 --> 00:13:38.931\nSo I can't bring it up here on\nthe show but you can at home.\n\n269\n00:13:38.931 --> 00:13:41.377\nIf you log into the AWS console and\nyou sign that NDA,\n\n270\n00:13:41.377 --> 00:13:43.800\nyou can pull that information up and\nview it.\n\n271\n00:13:43.800 --> 00:13:46.750\nIt does take a little bit of time to\nget approved to be able to view it.\n\n272\n00:13:46.750 --> 00:13:49.120\nBut once that's done, you're able\nto actually look at these reports.\n\n273\n00:13:49.120 --> 00:13:50.510\n&gt;&gt; So, Don, am I understanding this right?\n\n274\n00:13:50.510 --> 00:13:53.860\nIf we're deploying something like\nmultiple AZs, we could have completely\n\n275\n00:13:53.860 --> 00:13:58.070\ndifferent regulations for,\nlet's say your database, right?\n\n276\n00:13:58.070 --> 00:14:00.340\nYou close down one site cuz\nthey're doing updates and\n\n277\n00:14:00.340 --> 00:14:02.500\nit moves that instance over to another AZ.\n\n278\n00:14:02.500 --> 00:14:04.580\nYou could be under a different\nset of regulations.\n\n279\n00:14:04.580 --> 00:14:06.120\n&gt;&gt; Not AZs.\n\n280\n00:14:06.120 --> 00:14:09.040\nSo, remember that availability\nzones are all within a region.\n\n281\n00:14:09.040 --> 00:14:11.340\nAnd so the region is your geography,\nright?\n\n282\n00:14:11.340 --> 00:14:15.575\nSo in US East, there's five AZs.\n\n283\n00:14:15.575 --> 00:14:19.015\nAnd as long as I stay on one of those\nfive AZs, I'm in the same region.\n\n284\n00:14:19.015 --> 00:14:20.695\nI'm covered by the same compliance.\n\n285\n00:14:20.695 --> 00:14:22.385\nThe region's what's important.\n\n286\n00:14:22.385 --> 00:14:24.706\nBut if I do multi-region replication,\nright?\n\n287\n00:14:24.706 --> 00:14:29.167\nIf I have an S3 bucket and I'm doing\nmulti-region, yes, you could end up where,\n\n288\n00:14:29.167 --> 00:14:32.585\nwell, my data's over here,\nAmazon certified for XYZ.\n\n289\n00:14:32.585 --> 00:14:36.140\nBut when I replicate to this other region,\nit's not.\n\n290\n00:14:36.140 --> 00:14:37.600\nGot the same certification.\n\n291\n00:14:37.600 --> 00:14:40.990\nAnd if even one component of\nyour network breaks down,\n\n292\n00:14:40.990 --> 00:14:43.000\nyou just blew the certification, right?\n\n293\n00:14:43.000 --> 00:14:44.479\nWe have to do the homework on that,\n\n294\n00:14:44.479 --> 00:14:47.955\nbecause Amazon doesn't even know if\nthat certification applies to us, right?\n\n295\n00:14:47.955 --> 00:14:49.538\nBetter yet, whether it's important to us.\n\n296\n00:14:49.538 --> 00:14:52.003\nAlways keep that in mind,\nwhen you're spreading your data and\n\n297\n00:14:52.003 --> 00:14:53.270\nyour resources out.\n\n298\n00:14:53.270 --> 00:14:56.770\nI might have a lot of customers in Japan.\n\n299\n00:14:56.770 --> 00:15:01.125\nAnd boy, there's that Asia Pacific\nNortheast region that is right there,\n\n300\n00:15:01.125 --> 00:15:04.335\nthat will give great service\nto my Japanese customers.\n\n301\n00:15:04.335 --> 00:15:08.235\nBut if I require some certification and\nthat region isn't certified,\n\n302\n00:15:08.235 --> 00:15:11.970\nisn't compliant,\nI shouldn't put my resources there.\n\n303\n00:15:11.970 --> 00:15:14.633\nAnd I might need to move\nthem into Mainland China, or\n\n304\n00:15:14.633 --> 00:15:17.367\nMalaysia, one of the other\nregions that's nearby.\n\n305\n00:15:17.367 --> 00:15:21.520\nAnd I might not get as great performance,\nbut I maintain my compliance.\n\n306\n00:15:21.520 --> 00:15:24.220\nAnd that's more important, cuz what\nhappens if you don't maintain compliance?\n\n307\n00:15:24.220 --> 00:15:27.190\nWell, a lot of times there's legal and\nfinancial penalties,\n\n308\n00:15:27.190 --> 00:15:29.540\nyou can get your business\nshutdown in some cases.\n\n309\n00:15:29.540 --> 00:15:31.450\nThose are all legal outcomes.\n\n310\n00:15:31.450 --> 00:15:34.565\nBut then there's the whole you get\nyour data compromised outcome.\n\n311\n00:15:34.565 --> 00:15:35.855\nThat's not good either, right?\n\n312\n00:15:35.855 --> 00:15:37.735\nYou take a huge marketing hit and PR hit.\n\n313\n00:15:37.735 --> 00:15:39.715\nThat's not something you\nwant to have happen.\n\n314\n00:15:39.715 --> 00:15:43.062\n&gt;&gt; So when it comes to governance, so\nthat I don't get somebody else in trouble,\n\n315\n00:15:43.062 --> 00:15:45.971\ndo you have any general recommendations\nwhen it comes down to that?\n\n316\n00:15:45.971 --> 00:15:46.548\n&gt;&gt; All right, so\n\n317\n00:15:46.548 --> 00:15:49.642\nthe recommendation from Amazon is that\nyou really take four steps, right?\n\n318\n00:15:49.642 --> 00:15:51.832\nFirst off, you take a holistic approach.\n\n319\n00:15:51.832 --> 00:15:54.987\nYou have to look at your entire solution,\nnot just one little aspect,\n\n320\n00:15:54.987 --> 00:15:56.600\nyou need to look at the whole thing.\n\n321\n00:15:56.600 --> 00:15:59.833\nBecause if I need to be PCI compliant\njust for my web front-end Well,\n\n322\n00:15:59.833 --> 00:16:03.237\nthat applies to my data bases,\neverything throughout my environment,\n\n323\n00:16:03.237 --> 00:16:06.900\nI've got to maintain that level of\ncompliance throughout the environment.\n\n324\n00:16:06.900 --> 00:16:12.170\nSo always look at the big picture to\nfigure out compliance, that's a key thing.\n\n325\n00:16:12.170 --> 00:16:17.070\nSecond, once you know what your compliance\nrequirements are all of your controls,\n\n326\n00:16:17.070 --> 00:16:18.810\nall your access and security controls,\n\n327\n00:16:18.810 --> 00:16:21.520\nshould be built to provide\nthat level of compliance.\n\n328\n00:16:21.520 --> 00:16:23.538\nThat should be your minimum, right?\n\n329\n00:16:23.538 --> 00:16:26.030\nMake sure that you're not dipping\nbelow that minimum bar area,\n\n330\n00:16:26.030 --> 00:16:29.460\nyou can go higher, you can go\nstronger than the requirements, but\n\n331\n00:16:29.460 --> 00:16:32.190\nthe compliance level's\nbecome your minimum.\n\n332\n00:16:32.190 --> 00:16:36.460\nNext is identify any third party controls.\n\n333\n00:16:36.460 --> 00:16:38.050\nNow what's a third party control?\n\n334\n00:16:38.050 --> 00:16:40.380\nI might have something like\n\n335\n00:16:40.380 --> 00:16:43.770\nIAM where Amazon is taking\ncare of part of that for me.\n\n336\n00:16:43.770 --> 00:16:45.630\nSo I need to identify that\nthat's a third party controller.\n\n337\n00:16:45.630 --> 00:16:49.660\nOr I might be using checkpoint\nfirewall appliances inside of a VPC.\n\n338\n00:16:49.660 --> 00:16:51.720\nI'm letting checkpoint do certain things.\n\n339\n00:16:51.720 --> 00:16:53.670\nSo I need to identify those\nthird party controls and\n\n340\n00:16:53.670 --> 00:16:56.260\nget any documentation from\nthem that's necessary.\n\n341\n00:16:56.260 --> 00:16:59.790\nTo make sure that I've got my\ncompliance manual up to date.\n\n342\n00:16:59.790 --> 00:17:01.040\nAnd then lastly,\n\n343\n00:17:01.040 --> 00:17:04.620\nonce it's all put in place, you've got\nto verify your objectives are met.\n\n344\n00:17:04.620 --> 00:17:07.680\nYou've got to verify you're\nproviding the right level\n\n345\n00:17:07.680 --> 00:17:09.500\nto meet your compliance requirements.\n\n346\n00:17:09.500 --> 00:17:12.570\nAnd you've got to constantly test, you've\ngot to make sure you stay in compliance,\n\n347\n00:17:12.570 --> 00:17:15.510\nbecause somebody could always\ndisable a security control for\n\n348\n00:17:15.510 --> 00:17:17.350\ntroubleshooting and\nforget to turn it back on.\n\n349\n00:17:17.350 --> 00:17:18.810\nAnd now you're not complaint, right?\n\n350\n00:17:18.810 --> 00:17:22.826\nSo, you get compliant and\nthen you stay compliant.\n\n351\n00:17:22.826 --> 00:17:26.200\nIt's an ongoing operation that goes for\nthe life of your company really.\n\n352\n00:17:27.350 --> 00:17:31.280\nAll right now, on the Amazon side,\nif we wanna evaluate what they've done.\n\n353\n00:17:31.280 --> 00:17:33.230\nWell, we can pull all their reports.\n\n354\n00:17:33.230 --> 00:17:34.400\nSo validating their information.\n\n355\n00:17:34.400 --> 00:17:38.690\nThey've already had third parties come in\naudited system, they do it routinely so\n\n356\n00:17:38.690 --> 00:17:40.940\nthey're constantly updating these and\nkeeping them current.\n\n357\n00:17:40.940 --> 00:17:43.620\nAnd you'll find that they're\nalready certified in\n\n358\n00:17:43.620 --> 00:17:45.690\na number of different regulatory areas.\n\n359\n00:17:45.690 --> 00:17:48.440\nAnd they've got the paperwork\nprovided to give to you so\n\n360\n00:17:48.440 --> 00:17:52.760\nthat you can then make that a part\nof your own documentation to submit.\n\n361\n00:17:52.760 --> 00:17:56.650\nUnderstand that it is kind of critical\nthat we stay up to date on this,\n\n362\n00:17:56.650 --> 00:17:58.790\nthat we pay attention to\nwhat we need to meet.\n\n363\n00:17:58.790 --> 00:18:02.299\nAnd then we make sure that amazon\nstays up to date also, if Amazon for\n\n364\n00:18:02.299 --> 00:18:06.195\nsome reason decides to phase out one\nof their compliance certifications.\n\n365\n00:18:06.195 --> 00:18:09.163\nYou need to be aware of that you need\nto move your data accordingly so\n\n366\n00:18:09.163 --> 00:18:11.710\nI don't believe it has happened yet\nbut it always could.\n\n367\n00:18:12.890 --> 00:18:13.966\nAll right few other things to think about,\n\n368\n00:18:13.966 --> 00:18:18.375\nI already talked about a few of these I\ngot a little all around my notes here but\n\n369\n00:18:18.375 --> 00:18:21.320\n[LAUGH] so\na few other things to think about here.\n\n370\n00:18:21.320 --> 00:18:24.150\nWhat is Amazon doing on their end exactly,\nto stay compliant?\n\n371\n00:18:24.150 --> 00:18:26.310\nWell, they're doing a lot of stuff.\n\n372\n00:18:26.310 --> 00:18:28.890\nThey have a whole employee\nonboarding program, for example.\n\n373\n00:18:28.890 --> 00:18:32.705\nWhenever they hire an employee, before the\nemployee is allowed to go into the data\n\n374\n00:18:32.705 --> 00:18:36.469\ncenter and start working, they have a\nwhole onboarding process where they learn\n\n375\n00:18:36.469 --> 00:18:38.542\nall of their responsibilities to operate.\n\n376\n00:18:38.542 --> 00:18:41.750\nSo that they meet all\nof these regulations.\n\n377\n00:18:41.750 --> 00:18:46.020\nIt's hard enough to say, like, hey,\nWes, you in all of your activities,\n\n378\n00:18:46.020 --> 00:18:47.870\nyou need to be PCI compliant.\n\n379\n00:18:47.870 --> 00:18:49.950\nOkay, well at least Wes knows,\nhey, I can go online.\n\n380\n00:18:49.950 --> 00:18:51.870\nI can pull up the PCI audit forms.\n\n381\n00:18:51.870 --> 00:18:54.110\nAnd I can look at that I can do all\nof the stuff that it tells me to do.\n\n382\n00:18:54.110 --> 00:19:00.890\nGreat, but what if I say, Wes, you need\nto be ISO 27001, ISO 9000, PCI compliant.\n\n383\n00:19:00.890 --> 00:19:02.660\nWe need to be Sarbain Soxley compliant.\n\n384\n00:19:02.660 --> 00:19:04.918\nWe need to be HIPAA.\n\n385\n00:19:04.918 --> 00:19:09.682\nNow, what's he he's going to go in and\naggregate all these different things and\n\n386\n00:19:09.682 --> 00:19:10.645\nget a law degree.\n\n387\n00:19:10.645 --> 00:19:13.673\n&gt;&gt; My thought process was you just fed\nme a whole bunch of alphabet soup and\n\n388\n00:19:13.673 --> 00:19:14.605\nnow I'm in trouble.\n\n389\n00:19:14.605 --> 00:19:15.964\n&gt;&gt; I know I could have\nmade some of those up.\n\n390\n00:19:15.964 --> 00:19:18.505\n[LAUGH] You wouldn't know the difference.\n\n391\n00:19:18.505 --> 00:19:19.985\nIt's too much, right?\n\n392\n00:19:19.985 --> 00:19:21.510\nSo Amazon's already taken the time.\n\n393\n00:19:21.510 --> 00:19:22.875\nThey have a [LAUGH]\nmassive legal department.\n\n394\n00:19:22.875 --> 00:19:25.553\nAnd they've put together an on-boarding\nprogram for their employees so\n\n395\n00:19:25.553 --> 00:19:27.337\nthey know exactly what\nthey're supposed to do.\n\n396\n00:19:27.337 --> 00:19:31.735\nAnd they follow those procedures\nto make sure they stay compliant.\n\n397\n00:19:31.735 --> 00:19:34.339\nAnd they're applying this at a very,\nvery strict level.\n\n398\n00:19:34.339 --> 00:19:36.635\nAnd it's throughout their organization,\nnot just their employees,\n\n399\n00:19:36.635 --> 00:19:38.170\nbut even just the regular processes.\n\n400\n00:19:38.170 --> 00:19:41.460\nThings like when they decommission\na server or decommission storage.\n\n401\n00:19:41.460 --> 00:19:45.520\nWhere it's getting cleaned, and it's\ngetting cleaned to a very strong level\n\n402\n00:19:45.520 --> 00:19:48.240\nto meet a level of compliance\nthat you might not even require.\n\n403\n00:19:48.240 --> 00:19:49.460\nBut, they're taking care of it.\n\n404\n00:19:49.460 --> 00:19:52.140\nOkay, so, they're doing a lot of that.\n\n405\n00:19:52.140 --> 00:19:54.080\nThey've got risk management in place.\n\n406\n00:19:54.080 --> 00:19:56.090\nIf, they identify areas of risk,\n\n407\n00:19:56.090 --> 00:19:58.380\nthey're taking the steps to isolate and\nprotect that.\n\n408\n00:19:58.380 --> 00:20:00.470\nThat's where the availability\nzones comes in.\n\n409\n00:20:00.470 --> 00:20:01.838\nThat's where the regions come in.\n\n410\n00:20:01.838 --> 00:20:04.911\nThat's where the redundant Internet\nproviders and all those things come in.\n\n411\n00:20:04.911 --> 00:20:07.022\nThey're doing risk management.\n\n412\n00:20:07.022 --> 00:20:11.494\nAnd they're making sure that it's stable\nand operational as much as possible.\n\n413\n00:20:11.494 --> 00:20:12.269\nThere are outages.\n\n414\n00:20:12.269 --> 00:20:15.083\nThey do happen just like with any other\norganisation and they resolve them.\n\n415\n00:20:15.083 --> 00:20:15.947\nThey take care of that.\n\n416\n00:20:15.947 --> 00:20:20.100\nSo all that is out of our\nhands which is really nice.\n\n417\n00:20:21.755 --> 00:20:25.666\nThey also are just taking your standard\ninformation security practices.\n\n418\n00:20:25.666 --> 00:20:28.799\nAnd while Amazon says it, and\nI've stressed it more than once,\n\n419\n00:20:28.799 --> 00:20:31.480\nyou have this shared responsibility,\nright?\n\n420\n00:20:31.480 --> 00:20:33.887\nAnd they say, where is that diagram, here.\n\n421\n00:20:33.887 --> 00:20:36.095\nSo they say, look we're gonna\ntake care of the orange stuff,\n\n422\n00:20:36.095 --> 00:20:38.030\nif we look at that diagram again.\n\n423\n00:20:38.030 --> 00:20:39.630\nWe're going to take care\nof the orange stuff.\n\n424\n00:20:39.630 --> 00:20:41.570\nYou have to take care of the blue stuff,\nbut they don't say,\n\n425\n00:20:41.570 --> 00:20:44.350\nlook you're on your own\nwith the blue stuff.\n\n426\n00:20:44.350 --> 00:20:44.910\nYou deal with it.\n\n427\n00:20:44.910 --> 00:20:46.961\nGood luck with your operating system.\n\n428\n00:20:46.961 --> 00:20:48.780\nThey don't leave you high and dry.\n\n429\n00:20:48.780 --> 00:20:51.466\nThey actually do put out a number\nof security white papers.\n\n430\n00:20:51.466 --> 00:20:55.050\nWhich let's see I've got\none of them pulled up here.\n\n431\n00:20:55.050 --> 00:20:58.420\nThis is Amazon's Overview\nof Security Processes.\n\n432\n00:20:58.420 --> 00:21:02.460\nWhere they outline the different\nthings they're doing,\n\n433\n00:21:02.460 --> 00:21:05.780\nlike their fire detection and suppression,\ntheir power, their climate temperature.\n\n434\n00:21:05.780 --> 00:21:08.996\nThese are the things they're\ndoing to secure the orange area.\n\n435\n00:21:08.996 --> 00:21:11.810\nSo they're not saying,\njust trust us, we're securing it.\n\n436\n00:21:11.810 --> 00:21:15.800\nThey're saying, here's what we actually\ndo for the orange areas in that diagram,\n\n437\n00:21:15.800 --> 00:21:17.340\nthe shared responsibility model.\n\n438\n00:21:17.340 --> 00:21:19.890\nAnd then for your servers?\n\n439\n00:21:19.890 --> 00:21:21.980\nHere, we'll put out a white paper.\n\n440\n00:21:21.980 --> 00:21:25.390\nAnd they have, oops, that's not the white\npaper, they put out white papers,\n\n441\n00:21:25.390 --> 00:21:31.150\nwhich are tucked under their resources,\non how you can secure your environments.\n\n442\n00:21:31.150 --> 00:21:33.642\nSo you have this AWS security white paper,\n\n443\n00:21:33.642 --> 00:21:36.213\nI'll just pull this up\nin another tab here.\n\n444\n00:21:36.213 --> 00:21:39.830\nAnd, actually that's the same one, all\nright, I guess I already had it pulled up.\n\n445\n00:21:39.830 --> 00:21:43.890\nWhere it goes and\nit extends beyond the orange areas and\n\n446\n00:21:43.890 --> 00:21:47.590\ngoes into the blue areas and starts\ntalking about things that you can do with\n\n447\n00:21:47.590 --> 00:21:52.500\nkey pairs and individual user accounts and\nstuff that you can do to ensure security.\n\n448\n00:21:52.500 --> 00:21:56.530\nAnd it goes service by service breaking\nthat down so that you can see it.\n\n449\n00:21:56.530 --> 00:22:00.833\nThat little resources page right here is\nreally handy, cuz they've got a reference\n\n450\n00:22:00.833 --> 00:22:05.275\nguide for their certifications,\nthey've got other programs, reports.\n\n451\n00:22:05.275 --> 00:22:07.764\nAnything that you need\nto pull right there, and\n\n452\n00:22:07.764 --> 00:22:11.126\nan auditing security checklist\nthat you can use to go through and\n\n453\n00:22:11.126 --> 00:22:13.880\nmake sure that you're\nmaintaining the component.\n\n454\n00:22:13.880 --> 00:22:18.340\nSo while the blue area is up to you,\nthey do give you some guidance.\n\n455\n00:22:18.340 --> 00:22:20.300\nYou'll find a lot of information on there.\n\n456\n00:22:20.300 --> 00:22:24.094\nA lot of how to's, and step by step\nmanuals in their documentation that help\n\n457\n00:22:24.094 --> 00:22:25.766\nyou to securely deploy servers.\n\n458\n00:22:25.766 --> 00:22:28.613\nIf you want to use certificate\nauthentication, for SSH,\n\n459\n00:22:28.613 --> 00:22:31.270\nwell that takes place in\nthe operating system.\n\n460\n00:22:31.270 --> 00:22:33.910\nBut they'll give you documentation on how\nto do it, how to create your own accounts.\n\n461\n00:22:33.910 --> 00:22:37.860\nHow to harden the Linux AMI, how to do\nthings like that there's documentation for\n\n462\n00:22:37.860 --> 00:22:39.820\nthat you can get right\nvia the Amazon website.\n\n463\n00:22:39.820 --> 00:22:42.718\n&gt;&gt; So this is just like a lot of the other\nmajor vendors when we have their products.\n\n464\n00:22:42.718 --> 00:22:44.951\nLike I know Cisco's got\ntheir documentation for\n\n465\n00:22:44.951 --> 00:22:47.355\ndeploying their equipment\ninside of a data center.\n\n466\n00:22:47.355 --> 00:22:49.968\nMicrosoft, you have things like\nthe security baseline analyzer.\n\n467\n00:22:49.968 --> 00:22:53.854\nSo they're giving you something that,\nif you are deploying these processes,\n\n468\n00:22:53.854 --> 00:22:55.700\nyou can adhere to best practices.\n\n469\n00:22:55.700 --> 00:22:59.020\n&gt;&gt; Yeah absolutely, and\nit's in their best interest, right?\n\n470\n00:22:59.020 --> 00:23:01.960\nBecause if you're an Amazon customer,\nan AWS customer, and\n\n471\n00:23:01.960 --> 00:23:05.860\nyour site gets hacked and compromised,\nand blown out of the water,\n\n472\n00:23:05.860 --> 00:23:10.000\nwell It looks bad for you,\nit's usually our fault.\n\n473\n00:23:10.000 --> 00:23:11.760\nBut it looks bad for Amazon too.\n\n474\n00:23:11.760 --> 00:23:15.090\nSo they want everybody to be secure and\nthey've got the staff,\n\n475\n00:23:15.090 --> 00:23:17.780\nthey've got the talent to really\nsecure things to a high level.\n\n476\n00:23:17.780 --> 00:23:20.720\nSo they share that information,\nthey've already got it why not share it?\n\n477\n00:23:20.720 --> 00:23:24.660\nSo they want you to be successful and\nthey need to be successful also and\n\n478\n00:23:24.660 --> 00:23:27.190\nby working together you\ncreate that environment.\n\n479\n00:23:27.190 --> 00:23:29.350\nBut it up to you to do a little reading.\n\n480\n00:23:29.350 --> 00:23:30.780\nGo to the compliance page.\n\n481\n00:23:30.780 --> 00:23:33.598\nGo to aws.amazom.com/compliance.\n\n482\n00:23:33.598 --> 00:23:34.690\nRead through the resources.\n\n483\n00:23:34.690 --> 00:23:36.480\nAt least read through\nthe little handbook they have.\n\n484\n00:23:36.480 --> 00:23:37.990\nIt doesn't take long to read through it,\n\n485\n00:23:37.990 --> 00:23:42.080\nand it'll help you with better\nunderstanding what is available.\n\n486\n00:23:42.080 --> 00:23:46.062\nThat security white paper that I showed\nyou guys Is considered testable material\n\n487\n00:23:46.062 --> 00:23:46.771\non this exam.\n\n488\n00:23:46.771 --> 00:23:48.150\nSo definitely read that white paper.\n\n489\n00:23:48.150 --> 00:23:51.020\nIt's pretty long and we've already\ncovered the majority of what's in there\n\n490\n00:23:51.020 --> 00:23:52.960\njust throughout the course of this show.\n\n491\n00:23:52.960 --> 00:23:57.530\nBut at least skim over it and get\nan idea of what's expected of you if you\n\n492\n00:23:57.530 --> 00:24:00.050\nare deploying a solution inside of AWS.\n\n493\n00:24:00.050 --> 00:24:01.830\n&gt;&gt; All right, Don, well, we appreciate it.\n\n494\n00:24:01.830 --> 00:24:03.050\nA lot of great information.\n\n495\n00:24:03.050 --> 00:24:05.750\nI can tell you when it comes to risk and\ncompliance I can get myself out of\n\n496\n00:24:05.750 --> 00:24:08.130\ncompliance really quick so\nwe appreciate you being here.\n\n497\n00:24:08.130 --> 00:24:10.614\nDoes look like we're running to\nthe end of another episode, but\n\n498\n00:24:10.614 --> 00:24:12.276\nbefore we do do you\nhave any parting words?\n\n499\n00:24:12.276 --> 00:24:16.290\n&gt;&gt; The main thing is this is bureaucracy\nit's paper work, it's monotonous and\n\n500\n00:24:16.290 --> 00:24:18.660\ntedious, and most of us hate it.\n\n501\n00:24:18.660 --> 00:24:21.469\nBut the reality is it will save\nyour butt sooner or later.\n\n502\n00:24:21.469 --> 00:24:23.930\nIf not right away,\ndefinitely in the near future.\n\n503\n00:24:23.930 --> 00:24:27.657\nThat all of this designed to help make\nsure we're doing things securely.\n\n504\n00:24:27.657 --> 00:24:31.688\nAnd a lot of the big compromises that\nyou read about in the news are from when\n\n505\n00:24:31.688 --> 00:24:34.370\ncompanies didn't follow\nstandard practices.\n\n506\n00:24:34.370 --> 00:24:36.050\nThings that have been drilled\ninto our head over and\n\n507\n00:24:36.050 --> 00:24:38.180\nover again in security training courses.\n\n508\n00:24:38.180 --> 00:24:39.450\nPeople still don't follow them,\n\n509\n00:24:39.450 --> 00:24:42.210\npeople still put their password on\na post it note right on their monitor.\n\n510\n00:24:42.210 --> 00:24:44.670\nAnd MFA can defeat that right?\n\n511\n00:24:44.670 --> 00:24:46.190\nBut not everybody uses an MFA.\n\n512\n00:24:46.190 --> 00:24:48.260\nThe tools are there,\nyou just flip it on right.\n\n513\n00:24:48.260 --> 00:24:49.560\nBut people still don't use it.\n\n514\n00:24:49.560 --> 00:24:50.650\nSo that's the key thing.\n\n515\n00:24:50.650 --> 00:24:54.210\nIt doesn't matter how great the security\nresources are that are available to you.\n\n516\n00:24:54.210 --> 00:24:56.800\nIf you don't use them,\nit's not gonna work out.\n\n517\n00:24:56.800 --> 00:25:00.111\nSo definitely take advantage of\nthe resources that are there.\n\n518\n00:25:00.111 --> 00:25:01.610\n&gt;&gt; Words of wisdom from Don Pezet.\n\n519\n00:25:01.610 --> 00:25:03.573\nWe appreciate you being here as always,\nDon.\n\n520\n00:25:03.573 --> 00:25:05.650\nWe appreciate you, the viewer, watching.\n\n521\n00:25:05.650 --> 00:25:08.353\nSigning out for ITPro.TV,\nI've been your host, Wes Bryan.\n\n522\n00:25:08.353 --> 00:25:09.075\n&gt;&gt; And I'm Don Pezet.\n\n523\n00:25:09.075 --> 00:25:11.950\n&gt;&gt; And we'll see you next time.\n\n524\n00:25:11.950 --> 00:25:17.747\n[MUSIC]\n\n525\n00:25:17.747 --> 00:25:20.335\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "209560353"
        }
      ],
      "title": "AWS Risk and Compliance"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Wes and Don finalize the AWS Certified Solutions Architect: Associates certification by bringing together all the technologies with design and implementation through architecture best practices.",
          "length": "2223",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-14-1-architecture_best_practices-032117-PGM.00_37_11_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-14-1-architecture_best_practices-032117-PGM.00_37_11_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-14-1-architecture_best_practices-032117-PGM.00_37_11_20.Still001-sm.jpg",
          "title": "Architecture Best Practices",
          "transcript": "WEBVTT\n\n1\n00:00:00.260 --> 00:00:08.260\nWelcome to ITProTV I'm your\nhost Don Pezet- [CROSSTALK]\n\n2\n00:00:08.260 --> 00:00:11.696\n&gt;&gt; You're watching ITProTV.\n\n3\n00:00:11.696 --> 00:00:13.079\n&gt;&gt; Hello everyone out there.\n\n4\n00:00:13.079 --> 00:00:14.690\nWelcome to ITProTV.\n\n5\n00:00:14.690 --> 00:00:15.880\nThank you for joining us.\n\n6\n00:00:15.880 --> 00:00:18.110\nI'm your show host Wes Bryan and\nin today's episode,\n\n7\n00:00:18.110 --> 00:00:22.560\nwe're coming at you with more AWS\nCertified Solutions Architect- Associate.\n\n8\n00:00:22.560 --> 00:00:25.090\nAnd joining us in the studios\nis none other than Don Pezet.\n\n9\n00:00:25.090 --> 00:00:25.880\nDon how you doing sir?\n\n10\n00:00:25.880 --> 00:00:27.140\n&gt;&gt; I am doing great, Wes.\n\n11\n00:00:27.140 --> 00:00:30.370\nReady to wrap up our ACSA training.\n\n12\n00:00:30.370 --> 00:00:34.104\nNow we've gone through a lot of different\ntopics over the last however many episodes\n\n13\n00:00:34.104 --> 00:00:36.904\nwe've been through at this point\nat all kinda lose track of it.\n\n14\n00:00:36.904 --> 00:00:41.326\nBut what we're gonna do right here,\nis we're gonna try and tie together all\n\n15\n00:00:41.326 --> 00:00:45.902\nthe threads that we've been looking at,\nto weave that into a final solution.\n\n16\n00:00:45.902 --> 00:00:47.206\nThat's a crazy analogy there,\n\n17\n00:00:47.206 --> 00:00:49.920\nbut really all I'm just saying is\nwe talked about a bunch of stuff.\n\n18\n00:00:49.920 --> 00:00:54.007\nHow do you jam it all together to\ncreate and architect a final solution?\n\n19\n00:00:54.007 --> 00:00:58.395\nRemember the exam is\nthe AWS Certified Solutions Architect.\n\n20\n00:00:58.395 --> 00:01:03.015\nWe should be able to architect or\ndesign out a solution, a collection of\n\n21\n00:01:03.015 --> 00:01:07.562\nproducts that provides a service,\nfor a customer or our own company.\n\n22\n00:01:07.562 --> 00:01:09.940\nWell, we've talked about\nall of those services,\n\n23\n00:01:09.940 --> 00:01:12.834\nall those different components\nthat are available from AWS.\n\n24\n00:01:12.834 --> 00:01:15.870\nWe talked about how to use each one.\n\n25\n00:01:15.870 --> 00:01:18.220\nWhat solution each one provides.\n\n26\n00:01:18.220 --> 00:01:22.360\nNow we're gonna look at combining\nthem all together to create\n\n27\n00:01:22.360 --> 00:01:27.070\nwhat is considered a highly available,\nhighly scalable\n\n28\n00:01:27.070 --> 00:01:31.350\ncloud service that far exceeds what\nwe can do with on premises equipment.\n\n29\n00:01:31.350 --> 00:01:33.320\nSo we've got quite the chore ahead of us,\n\n30\n00:01:33.320 --> 00:01:36.690\nbut that's what we're gonna take\na look at right here in this episode.\n\n31\n00:01:36.690 --> 00:01:38.010\nAll right, so let's go ahead and\nget things started.\n\n32\n00:01:38.010 --> 00:01:39.720\nI wanna kick things off,\n\n33\n00:01:39.720 --> 00:01:43.050\nwith what's probably one of the most\nuseful things with going to the cloud, and\n\n34\n00:01:43.050 --> 00:01:46.280\nthat is redundancy, redundancy and\navailability, right.\n\n35\n00:01:46.280 --> 00:01:50.004\nRemember redundancy means if I have a\ncomponent fail I've got another one right\n\n36\n00:01:50.004 --> 00:01:51.791\nbehind the scenes ready to take over.\n\n37\n00:01:51.791 --> 00:01:56.100\nAnd availability means the service\nis gonna stay available even during\n\n38\n00:01:56.100 --> 00:01:56.829\na failure.\n\n39\n00:01:56.829 --> 00:02:01.440\nWe could have a device fail and\nwe don't even notice it, right.\n\n40\n00:02:01.440 --> 00:02:04.390\nA spare tire in your car is redundancy.\n\n41\n00:02:04.390 --> 00:02:06.411\nIf you have a flat tire\nyou've gotta pull over and\n\n42\n00:02:06.411 --> 00:02:10.070\nstop your drive you've gotta change\nthe tire your your driver is interrupted.\n\n43\n00:02:10.070 --> 00:02:12.740\nBut then you back up and going before\nlong so redundancy is good but\n\n44\n00:02:12.740 --> 00:02:13.930\nit's not perfect.\n\n45\n00:02:13.930 --> 00:02:16.273\nAvailability is saying hey,\nI got a flat tire but\n\n46\n00:02:16.273 --> 00:02:20.043\nI got another one was already in place and\nso we just kept driving we didn't even\n\n47\n00:02:20.043 --> 00:02:23.553\nnotice like this the big trucks that\nhave tires right next to each other.\n\n48\n00:02:23.553 --> 00:02:24.708\nThey can lose one tire and\n\n49\n00:02:24.708 --> 00:02:28.800\nkeep driving if they want, I don't think\nthey're supposed to but they do that.\n\n50\n00:02:28.800 --> 00:02:31.760\nSo, that's the kind of thing that\nwe can achieve with the cloud.\n\n51\n00:02:31.760 --> 00:02:36.702\nAnd the CTO, the Chief Technology Officer\nfor AWS has this kinda famous quote,\n\n52\n00:02:36.702 --> 00:02:41.645\nwhich basically what he says is, you\nshould always be designing for failure and\n\n53\n00:02:41.645 --> 00:02:44.631\nhis saying is,\neverything fails all the time.\n\n54\n00:02:44.631 --> 00:02:47.233\nAnd it's kind of a pessimistic\nway of looking at things.\n\n55\n00:02:47.233 --> 00:02:51.006\nBut it's important if you're\ndesigning a redundant solution.\n\n56\n00:02:51.006 --> 00:02:56.210\nYou need to make sure that you\nanticipate every component failing.\n\n57\n00:02:56.210 --> 00:02:58.030\nIt may not happen right away.\n\n58\n00:02:58.030 --> 00:03:00.250\nIt may not happen this year,\nor even next year.\n\n59\n00:03:00.250 --> 00:03:02.320\nBut sooner or later every component fails.\n\n60\n00:03:02.320 --> 00:03:04.990\nNow, I've got a diagram here\nthat shows kind of a standard,\n\n61\n00:03:04.990 --> 00:03:07.510\nvery basic web application, right?\n\n62\n00:03:07.510 --> 00:03:10.840\nI know that I can go into Route 53 and\ncreate a domain.\n\n63\n00:03:10.840 --> 00:03:13.133\nSo, I need a domain name to\nreference my application.\n\n64\n00:03:13.133 --> 00:03:18.610\nI can have that domain name point\nright to a web server running on EC2.\n\n65\n00:03:18.610 --> 00:03:19.720\nA web instance, right.\n\n66\n00:03:19.720 --> 00:03:22.770\nAnd it's gonna be the subnet I may\nhave all these in one subnet, but\n\n67\n00:03:22.770 --> 00:03:24.130\nit's pretty bad for security practices.\n\n68\n00:03:24.130 --> 00:03:26.030\nSo normally,\nwe're gonna have two subnets, and\n\n69\n00:03:26.030 --> 00:03:27.850\non my database back on another subnet,\nright?\n\n70\n00:03:27.850 --> 00:03:31.920\nSo I did a separation there, for\nbasic security, again thinking basic.\n\n71\n00:03:31.920 --> 00:03:35.516\nThis is all in one VPC, but\nI'm using different subnets to get across\n\n72\n00:03:35.516 --> 00:03:39.431\navailability zones or whatever, and\ncreate a basic level of separation.\n\n73\n00:03:39.431 --> 00:03:42.111\nSo here is a basic web app.\n\n74\n00:03:42.111 --> 00:03:45.595\nAnybody can spin this up in a few\nminutes and have an application online.\n\n75\n00:03:45.595 --> 00:03:49.530\nWell, let's look at where the single\npoints of failures are, right?\n\n76\n00:03:49.530 --> 00:03:53.766\nWhat would happen if I messed\nup my DNS record in route 53,\n\n77\n00:03:53.766 --> 00:03:55.893\nor I had a route 53 failure?\n\n78\n00:03:55.893 --> 00:03:59.800\nWell those don't really happened because\nthe redundancy is built in route 53 maybe\n\n79\n00:03:59.800 --> 00:04:02.745\nit's not a fair example so\nlet's ignore route 53 on this one.\n\n80\n00:04:02.745 --> 00:04:08.642\nLet's go down to my VPC,\nI'm having the enter into the availability\n\n81\n00:04:08.642 --> 00:04:14.041\nzone to get to that subnet,\nmy web server is only in one subnet.\n\n82\n00:04:14.041 --> 00:04:18.980\nSo if I have a routing issue of my\nVPC I can't get to the web server.\n\n83\n00:04:18.980 --> 00:04:21.150\nIf I have a security group or\n\n84\n00:04:21.150 --> 00:04:25.500\nnetwork ACL problem at the VPC,\nI can't get to the web server.\n\n85\n00:04:25.500 --> 00:04:28.365\nIf the web server fails,\nI can't get to the web server.\n\n86\n00:04:28.365 --> 00:04:32.340\nRight, those are all single points of\nfailure that bring my application down.\n\n87\n00:04:32.340 --> 00:04:35.108\nIf this availability zone fails,\nI can't get to the web server.\n\n88\n00:04:35.108 --> 00:04:38.564\nThen from here I've gotta get the web\ninstance to reach out to the database to\n\n89\n00:04:38.564 --> 00:04:39.275\ncommunicate.\n\n90\n00:04:39.275 --> 00:04:42.692\nIf the database fails, or\nthe AZ the database is in fifth fails,\n\n91\n00:04:42.692 --> 00:04:46.681\nif there's network communications\nissues in between the web instance and\n\n92\n00:04:46.681 --> 00:04:50.700\nthe database and any of those things\nfail I lose my web application.\n\n93\n00:04:50.700 --> 00:04:54.160\nThere are so many single points of\nfailure in this design because there's so\n\n94\n00:04:54.160 --> 00:04:56.020\nmany single components.\n\n95\n00:04:56.020 --> 00:04:59.210\nAnd that's the real challenge that\nwe have architecting a solution\n\n96\n00:04:59.210 --> 00:05:02.800\nis even when you don't anticipate\na high volume of traffic,\n\n97\n00:05:02.800 --> 00:05:05.390\nyou still need to have\nredundant components.\n\n98\n00:05:05.390 --> 00:05:07.000\nYou need to have multiple instances.\n\n99\n00:05:07.000 --> 00:05:07.640\nThings like that.\n\n100\n00:05:07.640 --> 00:05:11.953\nSo that you can survive failures,\nbecause failures will happen eventually.\n\n101\n00:05:11.953 --> 00:05:13.392\nSooner or later, they will happen.\n\n102\n00:05:13.392 --> 00:05:15.889\nSo here's that same web application.\n\n103\n00:05:15.889 --> 00:05:20.980\nBut now, we’ve flushed it out\nwith a few extra solutions right?\n\n104\n00:05:20.980 --> 00:05:24.340\nWe still have Route 53 at the top you see\nhow Route 53 doesn’t chance cuz redundancy\n\n105\n00:05:24.340 --> 00:05:25.230\nis built into it.\n\n106\n00:05:25.230 --> 00:05:27.130\nIt’s very stable, very robust.\n\n107\n00:05:27.130 --> 00:05:30.144\nAmazon puts a lot of effort into that,\nso we don’t have to worry about it.\n\n108\n00:05:30.144 --> 00:05:34.516\nBut now, instead of that pointing\nright to one of our instances\n\n109\n00:05:34.516 --> 00:05:36.588\nit points to a load balancer.\n\n110\n00:05:36.588 --> 00:05:41.212\nBringing in Elastic Load Balancer allows\nus to hide more than one instance behind\n\n111\n00:05:41.212 --> 00:05:42.850\nit to create availability.\n\n112\n00:05:42.850 --> 00:05:47.390\nAnd remember that load balancers stretch\nacross more than one availability zone,\n\n113\n00:05:47.390 --> 00:05:49.110\nand they have redundancy built into them.\n\n114\n00:05:49.110 --> 00:05:52.060\nSo Amazon has already taken care\nof the redundancy on that side\n\n115\n00:05:52.060 --> 00:05:54.970\nwithin a single region, right?\n\n116\n00:05:54.970 --> 00:05:56.240\nI still have a failure here,\n\n117\n00:05:56.240 --> 00:06:00.160\nor a possible single point of failure\nin the region, in this model.\n\n118\n00:06:00.160 --> 00:06:04.037\nBut behind that we then have\nmultiple web instances.\n\n119\n00:06:04.037 --> 00:06:05.686\nThey're in two different subnets.\n\n120\n00:06:05.686 --> 00:06:07.922\nSo if I mess up routing,\nas long as I only mess up routing for\n\n121\n00:06:07.922 --> 00:06:09.438\none subnet I can still get to the other.\n\n122\n00:06:09.438 --> 00:06:14.400\nOr if I mess up security groups or network\nACLs, again they're separate subnets.\n\n123\n00:06:14.400 --> 00:06:17.230\nIf I lose an availability zone, well,\n\n124\n00:06:17.230 --> 00:06:19.390\nthe other web servers in\nthe other availability zone.\n\n125\n00:06:19.390 --> 00:06:22.530\nI've got that extra redundancy\nbaked in there, all right.\n\n126\n00:06:22.530 --> 00:06:26.265\nNot only that, but my database server,\nwe've got a replica.\n\n127\n00:06:26.265 --> 00:06:30.869\nNow the replica database may or\nmay not be one that is geared up and\n\n128\n00:06:30.869 --> 00:06:32.325\nready to go active.\n\n129\n00:06:32.325 --> 00:06:37.386\nWhen I deploy a Aurora DB or\na Maria DB in RDS instance,\n\n130\n00:06:37.386 --> 00:06:43.587\nwhen I do that, you have the option\nto do a multi easy deployment.\n\n131\n00:06:43.587 --> 00:06:45.804\nThis is a multi easy deployment.\n\n132\n00:06:45.804 --> 00:06:49.897\nWhen you do that, you have a standby\ninstance that you can't mess with.\n\n133\n00:06:49.897 --> 00:06:51.668\nYou can't do reads off of it and so on.\n\n134\n00:06:51.668 --> 00:06:55.512\nBut that's okay because if a failure\nhappens it'll automatically flip over and\n\n135\n00:06:55.512 --> 00:06:59.090\ngo active without us lifting\na figure that's redundancy.\n\n136\n00:06:59.090 --> 00:07:01.190\nYou can also do read replicas.\n\n137\n00:07:01.190 --> 00:07:03.575\nAnd if you do read replicas,\nyou can improve performance with those.\n\n138\n00:07:03.575 --> 00:07:07.860\nBut failing over to a read\nreplica is not automatic, right?\n\n139\n00:07:07.860 --> 00:07:09.730\nThat's right it's important\nto do a multi-AZ deployment.\n\n140\n00:07:09.730 --> 00:07:13.446\nAnd you might do a multi-AZ and read\nreplicas and that's where it really gets\n\n141\n00:07:13.446 --> 00:07:16.363\nconfusing cuz you're like why\nwould I have a read replica and\n\n142\n00:07:16.363 --> 00:07:18.613\nAZ drive actually got\na standby replica also?\n\n143\n00:07:18.613 --> 00:07:22.354\nAnd the reasoning there is the standby\nreplica can go active at any time,\n\n144\n00:07:22.354 --> 00:07:23.715\nthe read replica can't.\n\n145\n00:07:23.715 --> 00:07:25.910\n&gt;&gt; Now Don,\nwhat if I'm a start up company right?\n\n146\n00:07:25.910 --> 00:07:28.056\nAnd I plan for redundancy,\nwe start it out and\n\n147\n00:07:28.056 --> 00:07:31.460\nwe have maybe a couple servers and\nall of a sudden overnight we go viral.\n\n148\n00:07:31.460 --> 00:07:35.781\nAnd now I can't support the workload that,\nthat single server is providing,\n\n149\n00:07:35.781 --> 00:07:39.930\nhow do we implement something,\nlike being able to prepare for that?\n\n150\n00:07:39.930 --> 00:07:41.600\n&gt;&gt; All right, so when we build for\n\n151\n00:07:41.600 --> 00:07:46.770\nredundancy like this, you can also build\nfor scalability, for that ability to grow.\n\n152\n00:07:46.770 --> 00:07:48.755\nAnd Amazon calls that elasticity, right,\n\n153\n00:07:48.755 --> 00:07:52.042\na number of the products we've talked\nabout had that word elastic in it.\n\n154\n00:07:52.042 --> 00:07:57.263\nElastic load balancers, elastic network\ninterfaces Elastic compute cloud EC2.\n\n155\n00:07:57.263 --> 00:08:00.391\nThat elastic word keeps popping\nup over and over and over again.\n\n156\n00:08:00.391 --> 00:08:03.859\nAnd It's not that Amazon\njust likes elastic things.\n\n157\n00:08:03.859 --> 00:08:07.370\nWe'd end up with data forms that were\ncalled, I don't know, leisure suit or\n\n158\n00:08:07.370 --> 00:08:07.920\nwhatever.\n\n159\n00:08:07.920 --> 00:08:14.770\nBut elastic, just the idea is that elastic\nmeans it can stretch and it can contract.\n\n160\n00:08:14.770 --> 00:08:18.290\nIt can grow bigger and\nsmaller at any need,\n\n161\n00:08:18.290 --> 00:08:20.750\nany time we have a spike in activity.\n\n162\n00:08:20.750 --> 00:08:23.970\nAnd it can stretch really,\nreally far, right?\n\n163\n00:08:23.970 --> 00:08:26.040\nWes gave the example of\nsomebody going viral.\n\n164\n00:08:26.040 --> 00:08:29.932\nThat I might have a small company, I only\nneed two servers or two instances to spin\n\n165\n00:08:29.932 --> 00:08:33.272\nup, and a little database, and\nthat's able to provide my product.\n\n166\n00:08:33.272 --> 00:08:37.315\nBut then, when the Internet at large\nhears about it and loves my product,\n\n167\n00:08:37.315 --> 00:08:39.221\nthey all wanna jump in and sign up.\n\n168\n00:08:39.221 --> 00:08:42.190\nI might have hundreds of thousands\nof users bombarding my site.\n\n169\n00:08:43.220 --> 00:08:46.480\nAnd I need to be able to\ngrow rapidly to handle that.\n\n170\n00:08:46.480 --> 00:08:49.260\nNow, we already know\nthat AWS can handle that.\n\n171\n00:08:49.260 --> 00:08:53.770\nBy putting our solution in AWS,\nwe get elasticity, right?\n\n172\n00:08:53.770 --> 00:08:55.200\nNot necessarily.\n\n173\n00:08:55.200 --> 00:08:59.650\nWe have to make sure that we design\nour solution to support elasticity.\n\n174\n00:08:59.650 --> 00:09:01.690\nNot everything supports that, right?\n\n175\n00:09:01.690 --> 00:09:03.830\nDatabases are a great example of that.\n\n176\n00:09:03.830 --> 00:09:08.890\nMost databases only have\none writable master.\n\n177\n00:09:08.890 --> 00:09:11.850\nSo when it comes to the writing\ndata into that database,\n\n178\n00:09:11.850 --> 00:09:14.970\nyou're limited to a single master server.\n\n179\n00:09:14.970 --> 00:09:18.045\nAnd all of the other replicas\nyou have are read replicas.\n\n180\n00:09:18.045 --> 00:09:22.350\nThey can stretch and grow for\nreads but not for writes.\n\n181\n00:09:22.350 --> 00:09:24.240\nWell, there are some database\nsolutions that we saw that and\n\n182\n00:09:24.240 --> 00:09:27.020\nagain it's all about\nchoosing the right solution.\n\n183\n00:09:27.020 --> 00:09:29.680\nSo the main thing you need to think\nabout we're dealing with elasticity\n\n184\n00:09:29.680 --> 00:09:34.630\nis making sure that we pick and design\nthat works for elasticity, all right.\n\n185\n00:09:34.630 --> 00:09:37.270\nLet's take the diagram that I\nshowed you guys a moment ago.\n\n186\n00:09:37.270 --> 00:09:39.640\nBasically we have these web instances.\n\n187\n00:09:39.640 --> 00:09:46.360\nAnd for redundancy, I made it where we had\na web instance in each availability zone.\n\n188\n00:09:46.360 --> 00:09:50.463\nAnd we park them behind a load balancer so\nthe general public is none the wiser.\n\n189\n00:09:50.463 --> 00:09:54.232\nThey don't know how many instances I have,\nthey just see those two, right?\n\n190\n00:09:54.232 --> 00:09:56.413\nWell, what if we replace that, and\n\n191\n00:09:56.413 --> 00:10:01.300\nsaid, instead of just a single instance,\nlet's put in an auto scaling group.\n\n192\n00:10:01.300 --> 00:10:05.050\nAnd with an auto scaling group,\nwe can spin up more, and\n\n193\n00:10:05.050 --> 00:10:07.210\nmore, and more web apps as we need.\n\n194\n00:10:07.210 --> 00:10:10.420\nAnd so instead of having one instance\nin each AZ, we might have three.\n\n195\n00:10:10.420 --> 00:10:14.680\nNow I'm up to six servers, I can\nhandle that much more workload, right?\n\n196\n00:10:14.680 --> 00:10:15.710\nWe're growing.\n\n197\n00:10:15.710 --> 00:10:20.770\nAnd with an auto scaling group,\nit can grow and shrink on demand.\n\n198\n00:10:20.770 --> 00:10:24.376\nSo we can handle the peaks and the\nvalleys, and not have to pay for a bunch\n\n199\n00:10:24.376 --> 00:10:28.550\nof extra instances we're not using,\nif we're just using them during peak time.\n\n200\n00:10:28.550 --> 00:10:32.570\nBuilding in that auto scaling group really\nhelps to make sure that we can support\n\n201\n00:10:32.570 --> 00:10:35.037\nthat kind of a model and\nit is an important thing.\n\n202\n00:10:35.037 --> 00:10:39.623\nNow, notice even with my design here,\nI have an auto scaling group and\n\n203\n00:10:39.623 --> 00:10:42.200\nthese web instances can scale.\n\n204\n00:10:42.200 --> 00:10:45.510\nThis is called scaling horizontally or\nscaling out.\n\n205\n00:10:45.510 --> 00:10:49.925\nI'm adding more and\nmore instances to cover the work load.\n\n206\n00:10:49.925 --> 00:10:53.245\nBut if you look down here,\nI still just have that one database,\n\n207\n00:10:53.245 --> 00:10:57.696\nthat one master database that's active,\nand the other one is a standby, right?\n\n208\n00:10:57.696 --> 00:11:01.025\nSo, how do I solve that problem?\n\n209\n00:11:01.025 --> 00:11:03.819\nI can't put that in an auto scaling group,\nnot for rights.\n\n210\n00:11:03.819 --> 00:11:06.742\nFor reads I could, but for rights,\nit's not really gonna make any difference.\n\n211\n00:11:06.742 --> 00:11:07.476\n[INAUDIBLE].\n\n212\n00:11:07.476 --> 00:11:12.670\nSo here the solution is\nnot scaling horizontally.\n\n213\n00:11:12.670 --> 00:11:15.386\nIt's scaling vertically, it's scaling up.\n\n214\n00:11:15.386 --> 00:11:17.672\nAnd that means that I could\ntake this instance and\n\n215\n00:11:17.672 --> 00:11:20.070\nI can just keep throwing resources at it.\n\n216\n00:11:20.070 --> 00:11:22.800\nI could throw more memory,\nmore CPU, right?\n\n217\n00:11:22.800 --> 00:11:26.380\nMore resources into that database and\ngrow it that way.\n\n218\n00:11:26.380 --> 00:11:28.810\nNow there's two problems with\nthat part of the solution.\n\n219\n00:11:28.810 --> 00:11:30.620\nProblem number one, there's a limit.\n\n220\n00:11:30.620 --> 00:11:33.640\nEventually you hit the limit,\nyou've added the maximum amount of memory,\n\n221\n00:11:33.640 --> 00:11:38.240\nmax amount of CPU you can to that\ndatabase, that database instance.\n\n222\n00:11:38.240 --> 00:11:42.750\nThe second problem is, transitioning\nfrom one instance type to another is not\n\n223\n00:11:42.750 --> 00:11:45.294\na live, while you're running operation.\n\n224\n00:11:45.294 --> 00:11:49.000\nI gotta shut the thing down,\nchange the type and bring it back up.\n\n225\n00:11:49.000 --> 00:11:50.146\nSo, now I have an outage.\n\n226\n00:11:50.146 --> 00:11:54.260\nWell, if you need to grow your instance,\nit means you're under heavy load.\n\n227\n00:11:54.260 --> 00:11:58.210\nIf you're under heavy load, that's not\nthe time you wanna shut things down.\n\n228\n00:11:58.210 --> 00:12:00.880\nSo, that make things really challenging.\n\n229\n00:12:00.880 --> 00:12:04.770\nNot everything can scale\ndynamically like this.\n\n230\n00:12:04.770 --> 00:12:07.730\nThere's some things just\ndon't work that way.\n\n231\n00:12:07.730 --> 00:12:11.340\nAnd in this scenario, if I need that type\nof functionality, if I need the ability to\n\n232\n00:12:11.340 --> 00:12:16.600\nscale out rapidly while online,\nthis isn't gonna work out so well for me.\n\n233\n00:12:16.600 --> 00:12:22.750\nI really need to look into like a dynamo\nDV, which can do crazy magical things\n\n234\n00:12:22.750 --> 00:12:26.560\ncuz it's no SQL and it's got all sorts of\nscalability built into the back of it.\n\n235\n00:12:26.560 --> 00:12:28.700\nDynamo DV can really do\na lot of that stuff.\n\n236\n00:12:28.700 --> 00:12:31.290\nThere's other solutions that are out\nthere too that can take advantage of that\n\n237\n00:12:31.290 --> 00:12:32.370\nscalability.\n\n238\n00:12:32.370 --> 00:12:35.940\n&gt;&gt; Now my instant thought, Don,\nwas well, we must just go ahead and\n\n239\n00:12:35.940 --> 00:12:37.090\nscale horizontally.\n\n240\n00:12:37.090 --> 00:12:40.190\nBut are there considerations that we need\nto think about when it comes to scaling\n\n241\n00:12:40.190 --> 00:12:41.670\nhorizontally as well?\n\n242\n00:12:41.670 --> 00:12:43.850\n&gt;&gt; Yeah, you know our applications,\n\n243\n00:12:43.850 --> 00:12:46.790\nour applications may not be\ndesigned the scale this way, right?\n\n244\n00:12:46.790 --> 00:12:50.000\nLet me give you an example here,\nthese web instances.\n\n245\n00:12:50.000 --> 00:12:52.283\nWell, let’s say that Wes comes and\nlogs into my website.\n\n246\n00:12:52.283 --> 00:12:55.129\nAnd he passes through the load balancer,\nand on his way through,\n\n247\n00:12:55.129 --> 00:12:58.770\nhe gets sent to this instance right here,\nthis particular instance.\n\n248\n00:12:58.770 --> 00:13:01.180\nHe logs in, and\nmaybe I’ve got an e-commerce site.\n\n249\n00:13:01.180 --> 00:13:03.920\nSo, he loads up his shopping\ncart with some goodies.\n\n250\n00:13:03.920 --> 00:13:06.400\nAnd then, he says, man, I’m out of coffee.\n\n251\n00:13:06.400 --> 00:13:09.970\nAnd so, he walks off to the coffeemaker\nand he comes back, and he sits back down.\n\n252\n00:13:09.970 --> 00:13:12.376\nAnd you know, five,\nten minutes have gone by.\n\n253\n00:13:12.376 --> 00:13:15.400\nAnd he's sitting there and looking at\na shopping cart, and he goes in it,\n\n254\n00:13:15.400 --> 00:13:17.250\nsee it's the checkout button.\n\n255\n00:13:17.250 --> 00:13:20.270\nAnd when he reconnects this time,\nhe's such in timed out.\n\n256\n00:13:20.270 --> 00:13:24.307\nSo now, when he hits the load balancer,\nmaybe he gets sense of distance over here,\n\n257\n00:13:24.307 --> 00:13:26.460\nand the shopping cart is empty, right?\n\n258\n00:13:26.460 --> 00:13:27.660\nJust lost everything in the shopping cart.\n\n259\n00:13:27.660 --> 00:13:28.450\nWhat's gonna happen?\n\n260\n00:13:28.450 --> 00:13:31.889\nWell, if he's a dedicated consumer,\nhe's getting a great bargain,\n\n261\n00:13:31.889 --> 00:13:35.399\nthen he just gonna add this stuff to\nhis card again and check out, right?\n\n262\n00:13:35.399 --> 00:13:39.168\nBut if he's annoyed in anyway or if our\nprices maybe even a little more expensive\n\n263\n00:13:39.168 --> 00:13:42.430\nthan the competitor's or\nequal to the competitor he might just say,\n\n264\n00:13:42.430 --> 00:13:44.650\nforget that I'll go buy\nit over here instead.\n\n265\n00:13:44.650 --> 00:13:46.250\nAnd I just lost a sale.\n\n266\n00:13:46.250 --> 00:13:49.217\nThat is a problem with what's\ncalled state tracking.\n\n267\n00:13:49.217 --> 00:13:52.505\nWhen somebody connects they have a state,\nit's like a session, right?\n\n268\n00:13:52.505 --> 00:13:56.060\nAnd that session needs to\nstay with them regardless of\n\n269\n00:13:56.060 --> 00:13:58.370\nwhich component they connect to.\n\n270\n00:13:58.370 --> 00:14:00.240\nSo if they bump from instance,\nto instance,\n\n271\n00:14:00.240 --> 00:14:03.430\nto instance I'm gonna have\nsome way to track that, right?\n\n272\n00:14:03.430 --> 00:14:07.740\nIf I have a state full application,\nI've got to track that somehow.\n\n273\n00:14:07.740 --> 00:14:11.431\nAnd there's two main ways that we can\ndo that.when we design a solution.\n\n274\n00:14:11.431 --> 00:14:14.060\nOne, is through connection affinity.\n\n275\n00:14:14.060 --> 00:14:18.012\nYou can tell the load balancer to the\ntrack a person based on IP whether coming\n\n276\n00:14:18.012 --> 00:14:21.060\nfrom, and always send them\nto the same instance, right.\n\n277\n00:14:21.060 --> 00:14:22.950\nThat helps to make sure we have that.\n\n278\n00:14:22.950 --> 00:14:27.040\nBut it weakens our ability\nto load balance properly.\n\n279\n00:14:27.040 --> 00:14:30.520\nThere's gonna be some people\nthat stay connected for an hour,\n\n280\n00:14:30.520 --> 00:14:33.480\nand other people that are only\nconnected for one minute.\n\n281\n00:14:33.480 --> 00:14:36.130\nAnd those people who are connected for\nan hour can start to make it where one\n\n282\n00:14:36.130 --> 00:14:39.940\ninstance is carrying more workload than\nthe other instances that are out there.\n\n283\n00:14:39.940 --> 00:14:44.610\nAnd so she's getting a little too busy,\nit's not an even balanced anymore.\n\n284\n00:14:44.610 --> 00:14:48.660\nSo a better solution is to leverage\nsomething like cookies, right?\n\n285\n00:14:48.660 --> 00:14:51.370\nWe can have a cookies\nstored on Wes' laptop.\n\n286\n00:14:51.370 --> 00:14:54.590\nAnd when he connects up,\nhe exchanges that cookie information.\n\n287\n00:14:54.590 --> 00:14:59.410\nWe see that and\nwe can send him to the right instance or\n\n288\n00:14:59.410 --> 00:15:02.150\ngrab his session out of a database.\n\n289\n00:15:02.150 --> 00:15:06.040\nWe can store the session in a database,\nbut cookie identifies the session.\n\n290\n00:15:06.040 --> 00:15:07.892\nAll the session data is actually\nstored in the database.\n\n291\n00:15:07.892 --> 00:15:11.860\nSo maybe, three days have gone by and\nWes comes back.\n\n292\n00:15:11.860 --> 00:15:15.140\nAll his session data is gone\nfrom the instances, but\n\n293\n00:15:15.140 --> 00:15:17.590\nwhen he shows that cookie that he's got.\n\n294\n00:15:17.590 --> 00:15:20.410\nIf it hasn't expired yet,\nthen we can run it against the database on\n\n295\n00:15:20.410 --> 00:15:23.830\nthe back end and say yeah here you go,\nyou had all this stuff in your cart.\n\n296\n00:15:23.830 --> 00:15:27.140\nAnd you just pre-populate the cart again,\nand now off you go.\n\n297\n00:15:27.140 --> 00:15:29.210\nWe track that session, right?\n\n298\n00:15:29.210 --> 00:15:32.510\nNow, cookies are becoming\nincreasingly dangerous, right,\n\n299\n00:15:32.510 --> 00:15:34.050\nbecause they can be tampered with.\n\n300\n00:15:34.050 --> 00:15:36.890\nSo that's where things like Dynamo DB, or\n\n301\n00:15:36.890 --> 00:15:40.330\njust an SQL solution in general,\ncuz they can handle tons, and tons and\n\n302\n00:15:40.330 --> 00:15:43.630\ntons of data that we might choose\nto put the session ID there.\n\n303\n00:15:43.630 --> 00:15:47.010\nSo when Wes logs in,\nit's checking in with the database and\n\n304\n00:15:47.010 --> 00:15:48.460\ngetting his information there.\n\n305\n00:15:48.460 --> 00:15:51.292\nIf he walks away for a period of time and\nhis sessions times out,\n\n306\n00:15:51.292 --> 00:15:53.599\nthen we just make him log\nin again when he connects.\n\n307\n00:15:53.599 --> 00:15:55.209\nAnd now every time he connects,\nhe logs in, and\n\n308\n00:15:55.209 --> 00:15:57.281\nwe're able to pull all those\ninformation that way, right?\n\n309\n00:15:57.281 --> 00:16:01.053\nSo there's ways to do it with cookies,\nwithout cookies, with the database,\n\n310\n00:16:01.053 --> 00:16:05.011\nwithout a database Which solution's right\nfor you depends on your application.\n\n311\n00:16:05.011 --> 00:16:06.490\nDepends on what's available to you, right?\n\n312\n00:16:06.490 --> 00:16:09.200\nSo you've gotta look at what\nyour application supports.\n\n313\n00:16:09.200 --> 00:16:12.450\nYou may have an application that\ndoesn't need state at all, right?\n\n314\n00:16:12.450 --> 00:16:16.400\nMaybe you've got a website that is purely\nfocused on handing out information.\n\n315\n00:16:16.400 --> 00:16:19.130\nIt does it free of charge, and\nyou don't do any shopping carts,\n\n316\n00:16:19.130 --> 00:16:21.070\nor e-commerce, or logins.\n\n317\n00:16:21.070 --> 00:16:24.050\nIf you don't have that stuff,\nyou don't even care about state.\n\n318\n00:16:24.050 --> 00:16:26.361\nWho cares which instance\nyou get connected to,\n\n319\n00:16:26.361 --> 00:16:29.379\nyou could get connected to\ninstance number 5 or number 12.\n\n320\n00:16:29.379 --> 00:16:33.230\nYou're just seeing content,\nright, it doesn't matter.\n\n321\n00:16:33.230 --> 00:16:37.270\nIf you've got that type of an environment,\nthen it makes life a lot more simple.\n\n322\n00:16:37.270 --> 00:16:40.350\n&gt;&gt; Don, so we went viral now,\nand we need a lot more resources.\n\n323\n00:16:40.350 --> 00:16:44.380\nDo we have to have things like an IT\nstaff that's on wait, just looking at\n\n324\n00:16:44.380 --> 00:16:47.310\nthe numbers and saying, hey,\nwe'd better spin up some more instances.\n\n325\n00:16:47.310 --> 00:16:49.580\nOr can we make it a little\nbit easier on the IT staff?\n\n326\n00:16:49.580 --> 00:16:51.670\n&gt;&gt; Well,\nthere's things like the autoscaling group,\n\n327\n00:16:51.670 --> 00:16:54.650\nthat I mentioned earlier, which,\nas its name implies, is auto, right?\n\n328\n00:16:54.650 --> 00:16:57.170\nIt's automatic, it automatically scans,\nso we don't have to watch it.\n\n329\n00:16:57.170 --> 00:17:01.450\nBut for things like scaling vertically,\nthat's not automatic.\n\n330\n00:17:01.450 --> 00:17:03.330\nIt can be, we can script that,\nwe can automate it.\n\n331\n00:17:03.330 --> 00:17:07.000\nYou can kinda schedule those things\nif you take the time to do it, and\n\n332\n00:17:07.000 --> 00:17:08.920\nthat's part of automation, right?\n\n333\n00:17:08.920 --> 00:17:11.770\nThere's things in AWS that\nare not automatic, but\n\n334\n00:17:11.770 --> 00:17:13.560\nyou can make them automatic,\n\n335\n00:17:13.560 --> 00:17:17.090\nif you just take the time to understand\nyour business and what your needs are.\n\n336\n00:17:17.090 --> 00:17:22.060\nSo if you're watching your server, you\nmentioned the admins watching 24/7, right?\n\n337\n00:17:22.060 --> 00:17:23.950\nThey shouldn't have to watch 24/7.\n\n338\n00:17:23.950 --> 00:17:25.650\nThey should be able to go home\nat the end of the day, and\n\n339\n00:17:25.650 --> 00:17:27.520\nrelax like any normal human being.\n\n340\n00:17:27.520 --> 00:17:29.310\nAnd if you're tracking trends,\n\n341\n00:17:29.310 --> 00:17:32.840\nyou should be able to see when you're\ngoing to run out of resources.\n\n342\n00:17:32.840 --> 00:17:34.580\nEspecially with things like storage,\n\n343\n00:17:34.580 --> 00:17:38.630\nyou usually have a pretty standard growth\ntable for how you're consuming storage.\n\n344\n00:17:38.630 --> 00:17:40.750\nAnd you can anticipate\nwhen you're gonna run out.\n\n345\n00:17:40.750 --> 00:17:46.000\nAnd that means you can take the time\nto use things like cloud formation,\n\n346\n00:17:46.000 --> 00:17:51.160\nor any of the automation tools\nthat we have inside of AWS.\n\n347\n00:17:51.160 --> 00:17:54.070\nTo step in and scale, or update,\n\n348\n00:17:54.070 --> 00:17:57.530\nor rotate out those systems during\nnon-peak time, during off-hours.\n\n349\n00:17:57.530 --> 00:18:00.300\nYou could do a scheduled maintenance\nwindow, and say, like, for\n\n350\n00:18:00.300 --> 00:18:03.690\nthree hours on the third Sunday of the\nmonth, we're gonna take the servers down.\n\n351\n00:18:03.690 --> 00:18:06.820\nIf you do something like that,\npeople will kinda build that in.\n\n352\n00:18:06.820 --> 00:18:09.720\nNow, automation can\nsave you a lot of time,\n\n353\n00:18:09.720 --> 00:18:12.720\nespecially when we talk about\nautoscaling groups, right?\n\n354\n00:18:12.720 --> 00:18:15.321\nWith autoscaling groups,\nyou can't just spin up a web server and\n\n355\n00:18:15.321 --> 00:18:16.750\nit magically works, right?\n\n356\n00:18:16.750 --> 00:18:20.187\nThat web server has to know what to do,\nit has to know what database to talk to.\n\n357\n00:18:20.187 --> 00:18:22.770\nHow to get the web page,\nwhat languages it runs.\n\n358\n00:18:22.770 --> 00:18:27.030\nAnd so we don't wanna just take\nstandard AMIs and throw those out.\n\n359\n00:18:27.030 --> 00:18:30.790\nUltimately, what you're gonna do\nis create your own custom AMIs.\n\n360\n00:18:30.790 --> 00:18:34.352\nYou'll build custom Amazon Machine Images\nthat might be built off those,\n\n361\n00:18:34.352 --> 00:18:36.450\nlike the standard Amazon Linux MI, right?\n\n362\n00:18:36.450 --> 00:18:38.150\nI love that one, I use it all the time.\n\n363\n00:18:38.150 --> 00:18:41.010\nBut by itself, it only has so much, right?\n\n364\n00:18:41.010 --> 00:18:43.799\nSo we might set it to already\nhave a copy of our web page,\n\n365\n00:18:43.799 --> 00:18:45.387\nour web application in there.\n\n366\n00:18:45.387 --> 00:18:49.000\nThat it already has Apache activated,\nand installed, and running, and\n\n367\n00:18:49.000 --> 00:18:51.320\nit already has NGINX fully configured.\n\n368\n00:18:51.320 --> 00:18:54.350\nAnd it's already got the connection\ncredentials and strings to be able to\n\n369\n00:18:54.350 --> 00:18:58.020\nreach out to a database on the back-end,\nto get all of the other data.\n\n370\n00:18:58.020 --> 00:19:02.370\nAnd so when that AMI spins up, all it\ndoes is it fires up and it's ready to go.\n\n371\n00:19:02.370 --> 00:19:04.520\nOr maybe I have a little extra logic,\nthat says, it spins up,\n\n372\n00:19:04.520 --> 00:19:07.810\nand then it checks to see if there's\nany updates to the web page, right?\n\n373\n00:19:07.810 --> 00:19:09.670\nCuz things might've changed\nsince I made the AMI.\n\n374\n00:19:09.670 --> 00:19:12.870\nI don't want to edit the AMI\nevery time I update my web page.\n\n375\n00:19:12.870 --> 00:19:16.170\nSo it goes and gets a copy of\nthe web page, maybe out of S3.\n\n376\n00:19:16.170 --> 00:19:19.970\nAnd then it fires up that way,\nand now it's up and running.\n\n377\n00:19:19.970 --> 00:19:22.650\nNow I can add them in and\ntake them out at a moment's notice, and\n\n378\n00:19:22.650 --> 00:19:24.620\nI don't have to worry\nabout manual intervention.\n\n379\n00:19:24.620 --> 00:19:26.250\nCuz what happens with manual intervention?\n\n380\n00:19:26.250 --> 00:19:28.496\nTwo things, one,\nwe forget to do it, right?\n\n381\n00:19:28.496 --> 00:19:31.290\n[LAUGH] That's one, so\nthe servers are under high load, and\n\n382\n00:19:31.290 --> 00:19:32.542\nnobody's in the office to notice.\n\n383\n00:19:32.542 --> 00:19:35.320\nAnd so the site just runs slow and\nwe start losing business.\n\n384\n00:19:35.320 --> 00:19:37.800\nOr two, we make mistakes.\n\n385\n00:19:37.800 --> 00:19:40.280\nWhen you have humans involved,\nand we have to type commands, and\n\n386\n00:19:40.280 --> 00:19:42.790\nwe have to do things,\nyou can make mistakes.\n\n387\n00:19:42.790 --> 00:19:45.420\nThere have been big examples\nof that over the last five or\n\n388\n00:19:45.420 --> 00:19:49.400\nsix years, where entire networks have been\nbrought down because of a simple typo.\n\n389\n00:19:49.400 --> 00:19:51.090\nIt can happen, right?\n\n390\n00:19:51.090 --> 00:19:53.360\nBy automating as much as we can,\n\n391\n00:19:53.360 --> 00:19:55.840\nwe minimize the possibility\nof that happening.\n\n392\n00:19:55.840 --> 00:19:58.950\nWe can have it happen after hours,\nwhile we're not even there, and\n\n393\n00:19:58.950 --> 00:20:01.410\nwe know it's gonna be done\nright without mistakes.\n\n394\n00:20:01.410 --> 00:20:02.960\n&gt;&gt; Don, throughout this series you have\n\n395\n00:20:04.270 --> 00:20:08.720\nexplained many different storage\noptions that we have inside of AWS.\n\n396\n00:20:08.720 --> 00:20:12.610\nHow do we make a choice as what's best for\nus?\n\n397\n00:20:12.610 --> 00:20:15.850\n&gt;&gt; Good point, Wes, cuz storage is gonna\nfactor into this in a big way, right?\n\n398\n00:20:15.850 --> 00:20:18.702\nWhen we look at my diagram,\nthere's storage involved in this, right,\n\n399\n00:20:18.702 --> 00:20:19.990\nthat we just don't see.\n\n400\n00:20:19.990 --> 00:20:24.170\nFor example, my web instances, they\nall have EBS, or Elastic Blog Storage.\n\n401\n00:20:24.170 --> 00:20:27.050\nI may or may not be using, I might just\nbe using Instant Storage on these,\n\n402\n00:20:27.050 --> 00:20:28.388\nbecause they're temporary, right?\n\n403\n00:20:28.388 --> 00:20:30.127\nIn autoscaling groups,\nthese things come and go.\n\n404\n00:20:30.127 --> 00:20:33.910\nOn my database, though,\nyou know I'm using EBS there, right?\n\n405\n00:20:33.910 --> 00:20:37.700\nI've gotta have persistent storage\nthat's high performance, and\n\n406\n00:20:37.700 --> 00:20:40.200\nso those are kinda part of\nthe database instances.\n\n407\n00:20:40.200 --> 00:20:43.890\nBut there might be other\nstorage that factors into this.\n\n408\n00:20:43.890 --> 00:20:45.578\nRemember the state that\nI was talking about?\n\n409\n00:20:45.578 --> 00:20:49.980\nHow I might wanna track user state by\nusing a NoSQL database, or using DynamoDB?\n\n410\n00:20:49.980 --> 00:20:52.130\nWell, that would be additional storage.\n\n411\n00:20:52.130 --> 00:20:54.034\nIn fact,\nit kinda counts as storage itself,\n\n412\n00:20:54.034 --> 00:20:56.440\neven though it has its\nown underlying storage.\n\n413\n00:20:56.440 --> 00:20:58.570\nThere may be other scenarios\nwhere I need storage too.\n\n414\n00:20:58.570 --> 00:21:01.520\nSo if we add a little more to it, right,\n\n415\n00:21:01.520 --> 00:21:05.830\nmaybe my web application has a number of\ndynamic components, like a shopping cart.\n\n416\n00:21:05.830 --> 00:21:08.940\nWell, that's going to have to be rendered\nfrom a web application like this.\n\n417\n00:21:08.940 --> 00:21:10.580\nIt's going to be pulled from a database.\n\n418\n00:21:10.580 --> 00:21:13.890\nBut what about things like\nthe static images on my web site?\n\n419\n00:21:13.890 --> 00:21:16.980\nAll of that, those are static,\nthey don't change.\n\n420\n00:21:16.980 --> 00:21:20.430\nAnd so they don't need to\ncome out of my instances.\n\n421\n00:21:20.430 --> 00:21:23.331\nI could take that workload\noff of the instance and\n\n422\n00:21:23.331 --> 00:21:26.100\nmove them over to CloudFront and\nS3, right?\n\n423\n00:21:26.100 --> 00:21:29.670\nS3 gives high-performance,\nhigh-capacity storage.\n\n424\n00:21:29.670 --> 00:21:33.260\nIt's very available, very durable,\nso super easy to use.\n\n425\n00:21:33.260 --> 00:21:36.620\nWe can stick CloudFront in front of it,\nand now we're replicating that S3\n\n426\n00:21:36.620 --> 00:21:40.380\nstorage to endpoints all around the world,\nso people will get access to that quickly.\n\n427\n00:21:40.380 --> 00:21:42.250\nSo now all the static images,\n\n428\n00:21:42.250 --> 00:21:47.200\nwhere the real bandwidth comes from,\nare being served at a very fast data.\n\n429\n00:21:47.200 --> 00:21:48.790\nBut all the dynamic content,\n\n430\n00:21:48.790 --> 00:21:52.470\nwhich is usually just HTML,\nis being rendered out of my instances.\n\n431\n00:21:52.470 --> 00:21:56.090\nI'm putting that workload\nsomewhere that's more appropriate.\n\n432\n00:21:56.090 --> 00:22:01.040\nThe reality is, there's like 15\ndifferent storage solutions in AWS, and\n\n433\n00:22:01.040 --> 00:22:03.440\nhonestly, you can use any one of them.\n\n434\n00:22:03.440 --> 00:22:08.410\nBut if you use the right one,\nyou'll get great performance,\n\n435\n00:22:08.410 --> 00:22:11.710\ngreat availability, and\nusually a lower cost, right?\n\n436\n00:22:11.710 --> 00:22:14.140\nSo picking the right one is important,\n\n437\n00:22:14.140 --> 00:22:18.710\nknowing to use S3 here instead of\njust EBS attached to an instance.\n\n438\n00:22:18.710 --> 00:22:23.450\nOr using S3 instead of Instant Storage\non these, or whatever.\n\n439\n00:22:23.450 --> 00:22:26.430\nThat's gonna make a big difference\nhere in how my performance work, and\n\n440\n00:22:26.430 --> 00:22:27.106\nhow my abilities.\n\n441\n00:22:27.106 --> 00:22:29.630\nSo we've covered most of these\nin the storage episode, so\n\n442\n00:22:29.630 --> 00:22:31.610\nlet me just kinda run\nthrough them real quick.\n\n443\n00:22:31.610 --> 00:22:36.010\nS3 is great for bulk data, cuz you have\nnear-limitless amounts of storage, so\n\n444\n00:22:36.010 --> 00:22:37.880\nthat's a good one for that.\n\n445\n00:22:37.880 --> 00:22:41.300\nIt's also very easy to replicate out and\nget performance out of it too, but\n\n446\n00:22:41.300 --> 00:22:44.190\nit's not terribly flexible\nas far as storage goes.\n\n447\n00:22:44.190 --> 00:22:48.050\nAmazon Glacier is designed to be lower\ncost, but it's super slow, right, so\n\n448\n00:22:48.050 --> 00:22:49.610\nthat's really archival-type data.\n\n449\n00:22:49.610 --> 00:22:52.720\nIf I'm backing up things,\nthat's where Glacier really comes in,\n\n450\n00:22:52.720 --> 00:22:56.810\nit's not designed for production data,\ndata we need access to right away.\n\n451\n00:22:56.810 --> 00:23:00.990\nCloudFront, CloudFront storage is great\nwhen we need to get storage as close\n\n452\n00:23:00.990 --> 00:23:03.490\nto the visitor or\ncustomer as possible, right?\n\n453\n00:23:03.490 --> 00:23:04.956\nThat's where CloudFront really comes in.\n\n454\n00:23:04.956 --> 00:23:07.730\nIf all of our employees are in one place,\n\n455\n00:23:07.730 --> 00:23:10.720\nCloudFront doesn't help us a single bit,\ndon't bother with it.\n\n456\n00:23:10.720 --> 00:23:13.022\nBut if you've got customers\nall over the world,\n\n457\n00:23:13.022 --> 00:23:15.282\nnow CloudFront becomes really handy,\nright?\n\n458\n00:23:15.282 --> 00:23:17.449\nSo that's when we that one,\nwe're really talking about geography.\n\n459\n00:23:17.449 --> 00:23:22.930\nDynamoDB, when you need NoSQL data,\nlike for storing session state data.\n\n460\n00:23:22.930 --> 00:23:26.500\nI know we don't think of that as storage,\nbut that database acts like storage for\n\n461\n00:23:26.500 --> 00:23:27.570\nall the session files.\n\n462\n00:23:27.570 --> 00:23:31.560\nThe neat part about NoSQL\nis it can get huge,\n\n463\n00:23:31.560 --> 00:23:35.310\nit can handle petabyte-scale data and\nit'll be fine.\n\n464\n00:23:35.310 --> 00:23:40.250\nSo if your website goes viral, and you're\nhaving to track millions of sessions,\n\n465\n00:23:40.250 --> 00:23:42.900\nDynamoDB won't blink an eye,\nthat's not a big deal at all.\n\n466\n00:23:42.900 --> 00:23:45.620\nVersus if you were writing cookies and\nstoring them in S3,\n\n467\n00:23:45.620 --> 00:23:48.910\nwell, that would be a bit of a nightmare,\ntrying to pull all that information.\n\n468\n00:23:48.910 --> 00:23:52.013\nNot to mention the security side of that,\ntoo, would be pretty challenging.\n\n469\n00:23:52.013 --> 00:23:54.576\nWe have Elastic Block Store,\nso just regular EBS storage.\n\n470\n00:23:54.576 --> 00:23:59.389\nThat's persistent storage that we use with\nRDS, and we use it with EC2 instances.\n\n471\n00:23:59.389 --> 00:24:03.939\nThat's great when we just need localized\nstorage on a particular instance,\n\n472\n00:24:03.939 --> 00:24:07.180\nhold a copy of a webpage or\nsmaller applications.\n\n473\n00:24:07.180 --> 00:24:11.959\nEBS does a really good job for that, but\nit's mostly focused around reliability.\n\n474\n00:24:11.959 --> 00:24:15.696\nAnother nice part about EBS is that\nyou can do provisioned IOPS, so\n\n475\n00:24:15.696 --> 00:24:19.140\nyou can dedicate a certain\nlevel of performance to it.\n\n476\n00:24:19.140 --> 00:24:22.740\nVersus S3 where you just rely\non its basic performance levels.\n\n477\n00:24:22.740 --> 00:24:26.750\nIn EBS you can get really\nspecific in user IOPS.\n\n478\n00:24:26.750 --> 00:24:28.260\nRDS the relational data base.\n\n479\n00:24:28.260 --> 00:24:31.920\nThe relational database is use as\na storage on the back end too right?\n\n480\n00:24:31.920 --> 00:24:33.981\nBut the databases\nthemselves can store data.\n\n481\n00:24:33.981 --> 00:24:37.903\nThere's applications like WordPress\nwhere when you log in to WordPress site,\n\n482\n00:24:37.903 --> 00:24:41.826\nthe bulkable you're seeing is being\nrendered right from within the database,\n\n483\n00:24:41.826 --> 00:24:44.247\nit's coming right out of\nan RDS style database.\n\n484\n00:24:44.247 --> 00:24:47.470\nAnd that solution works well\nwith heavily dynamic content.\n\n485\n00:24:47.470 --> 00:24:51.160\nIf you have a lot of static content\nthough, it can be very wasteful.\n\n486\n00:24:51.160 --> 00:24:53.835\nUnless you stack something\nin front like NGINX.\n\n487\n00:24:53.835 --> 00:24:56.620\nNGINX can cache a lot of that and\ntake the workload off of the database.\n\n488\n00:24:56.620 --> 00:24:58.768\nSo there's different solutions\nthat can be found there.\n\n489\n00:24:58.768 --> 00:25:03.218\nAmazon's ElastiCache which technically\ncounts as another type of storage.\n\n490\n00:25:03.218 --> 00:25:06.120\nElastiCache can cache\nthose database queries.\n\n491\n00:25:06.120 --> 00:25:08.152\nSo now it's okay to store\nthe data in the RDS and\n\n492\n00:25:08.152 --> 00:25:10.460\nuse ElastiCache to optimize\nthe performance on it.\n\n493\n00:25:10.460 --> 00:25:15.140\nSo that's kind of a combination two types\nof storage being used for a solution.\n\n494\n00:25:16.258 --> 00:25:17.240\nAmazon Redshift,\n\n495\n00:25:17.240 --> 00:25:22.060\nRedshift we need to do really,\nreally high performance analysis, right?\n\n496\n00:25:22.060 --> 00:25:26.161\nWe need a really huge amounts of data,\nRedshift is specifically tunned for\n\n497\n00:25:26.161 --> 00:25:30.534\nthat it does an amazing job so definitely\none that you'd wanna look at for that.\n\n498\n00:25:30.534 --> 00:25:34.794\nAnd then we've got, what have I left off,\nthat, the Elastic File System, EFS,\n\n499\n00:25:34.794 --> 00:25:38.400\nof all the one's ever there is,\nis probably the ones frequently used.\n\n500\n00:25:38.400 --> 00:25:41.844\nElastic File System is if I have\nstorage that I need to have more\n\n501\n00:25:41.844 --> 00:25:45.240\nthan one EC2 instance connected to,\nlike shared storage.\n\n502\n00:25:45.240 --> 00:25:48.500\nWhen I have shared storage, well,\nnormally you can't do that, right?\n\n503\n00:25:48.500 --> 00:25:51.370\nAn EBS volume can only be\nattached to one instance.\n\n504\n00:25:51.370 --> 00:25:54.390\nBut the elastic file system\nallows us to connect\n\n505\n00:25:54.390 --> 00:25:56.050\nthat storage to more than once instance.\n\n506\n00:25:56.050 --> 00:25:59.380\nAnd so if you're having to set up some\nkind of like third party clustering and\n\n507\n00:25:59.380 --> 00:26:02.000\nit needs that shared\nstorage you can do that.\n\n508\n00:26:02.000 --> 00:26:05.410\n&gt;&gt; Don in all let's talk about design and\nimplementation, I know that any good\n\n509\n00:26:05.410 --> 00:26:09.000\ndesigner implementation is gonna have\nto think about well security, right?\n\n510\n00:26:09.000 --> 00:26:11.490\nAnd there are a lot of\nsecurity options out there.\n\n511\n00:26:11.490 --> 00:26:14.203\nSo what are we gonna use when\nit comes to designing and\n\n512\n00:26:14.203 --> 00:26:16.063\nimplementing our networks in AWS?\n\n513\n00:26:16.063 --> 00:26:18.878\n&gt;&gt; One of the security episode we talk\nabout all the different things that Amazon\n\n514\n00:26:18.878 --> 00:26:20.479\ndoes for us and\nthey do that automatically,\n\n515\n00:26:20.479 --> 00:26:22.260\nwe don't even have to worry about it.\n\n516\n00:26:22.260 --> 00:26:26.310\nSo what we're left with is architecting\nour end of the deal, right, and\n\n517\n00:26:26.310 --> 00:26:28.760\nAmazon recommends a simple\nthree step process, right.\n\n518\n00:26:28.760 --> 00:26:31.048\nStep one, inventory your data.\n\n519\n00:26:31.048 --> 00:26:34.599\nYou understand your data, Amazon doesn't,\nright, you've got to understand it.\n\n520\n00:26:34.599 --> 00:26:39.140\nSo you look at all of your information and\nthen you prioritize it.\n\n521\n00:26:39.140 --> 00:26:41.690\nSo inventory where your data is stored and\n\n522\n00:26:41.690 --> 00:26:44.860\nthen prioritize it from critical\ndata to non critical data.\n\n523\n00:26:44.860 --> 00:26:46.893\nSensitive to non sensitive right?\n\n524\n00:26:46.893 --> 00:26:49.776\nThere's data like the images on\nyour website that you don't care if\n\n525\n00:26:49.776 --> 00:26:50.640\nthose get out.\n\n526\n00:26:50.640 --> 00:26:52.700\nIf a hacker breaks in and\ngets all the images on your website,\n\n527\n00:26:52.700 --> 00:26:55.800\nthey didn't have to break in, they could\nhave just gone to the website right?\n\n528\n00:26:55.800 --> 00:26:57.340\nBut if they get your user database.\n\n529\n00:26:57.340 --> 00:27:00.900\nWith all the credentials and\ncredit card data that's bad right?\n\n530\n00:27:00.900 --> 00:27:02.633\nThat's highly sensitive data.\n\n531\n00:27:02.633 --> 00:27:05.979\nSo we need to understand what's sensitive\nand what isn't because the stuff that\n\n532\n00:27:05.979 --> 00:27:09.980\nisn't sensitive, we don't need to waste\nour time putting heavy security on it.\n\n533\n00:27:09.980 --> 00:27:12.791\nBut the stuff that is sensitive that's\nwhat where we need to focus our effort.\n\n534\n00:27:12.791 --> 00:27:15.460\nSo it gets us kind of looking\nin the right direction.\n\n535\n00:27:15.460 --> 00:27:19.657\nAnd then lastly,\nonce we've identified our sensitive data,\n\n536\n00:27:19.657 --> 00:27:22.440\nwe implement encryption with impunity.\n\n537\n00:27:22.440 --> 00:27:26.195\nWe need to encrypt data at rest, we need\nto encrypt data in motion, and we need to\n\n538\n00:27:26.195 --> 00:27:29.786\nmake sure its done up to cryptographic\nstandards that meet any regulatory or\n\n539\n00:27:29.786 --> 00:27:32.562\ncompliance concerns that our\norganizations might have.\n\n540\n00:27:32.562 --> 00:27:35.380\nAnd that varies, we talked about\nthat in the compliance episode.\n\n541\n00:27:35.380 --> 00:27:39.174\nIt varies based on what industry youre in,\nwhat state, country,\n\n542\n00:27:39.174 --> 00:27:40.947\nwhat continent in some cases.\n\n543\n00:27:40.947 --> 00:27:45.431\nSo that all does kind of dictate that\nkinda security design we have to be\n\n544\n00:27:45.431 --> 00:27:46.800\naware of all of that.\n\n545\n00:27:46.800 --> 00:27:50.202\nNow, the standard defense in depth\nmodel that we're all used to,\n\n546\n00:27:50.202 --> 00:27:51.305\nthat applies in AWS.\n\n547\n00:27:51.305 --> 00:27:53.895\nSo it's not like you're putting\nin one security solution.\n\n548\n00:27:53.895 --> 00:27:55.191\nIt's gonna be several things.\n\n549\n00:27:55.191 --> 00:27:58.267\nYou're gonna use VPCs to isolate data.\n\n550\n00:27:58.267 --> 00:28:01.625\nYou're gonna use your routing tables\nto restrict access between your VPCs.\n\n551\n00:28:01.625 --> 00:28:05.915\nYou're gonna use security groups to\nrestrict access to individual instances\n\n552\n00:28:05.915 --> 00:28:07.107\nand databases.\n\n553\n00:28:07.107 --> 00:28:11.774\nYou are going to use network ACLs to\nfurther restrict access between resources.\n\n554\n00:28:11.774 --> 00:28:14.802\nYou're gonna use IAM,\nIdentity and Access Management,\n\n555\n00:28:14.802 --> 00:28:17.702\nto control who can log in,\nwho can get to what resource,\n\n556\n00:28:17.702 --> 00:28:21.376\nand who can perform what commands,\nthat is all very, very critical.\n\n557\n00:28:21.376 --> 00:28:25.645\nAnd controlling access to the API\nis the best way to do that.\n\n558\n00:28:25.645 --> 00:28:30.428\nSo the other recommendation that Amazon\nhas is to only interact with your services\n\n559\n00:28:30.428 --> 00:28:31.481\nthrough the API.\n\n560\n00:28:31.481 --> 00:28:35.692\nDon't let people SSH right into instances,\ndon't let people remote desktop\n\n561\n00:28:35.692 --> 00:28:39.088\ninto Windows instances or\ndirectly connect to a SQL database.\n\n562\n00:28:39.088 --> 00:28:41.864\nHave them do everything through the API,\n\n563\n00:28:41.864 --> 00:28:44.729\nthat way you can focus\non securing the API.\n\n564\n00:28:44.729 --> 00:28:47.690\nAnd more importantly,\nyou can do real-time auditing.\n\n565\n00:28:47.690 --> 00:28:51.280\nWith real-time auditing you can see what's\ngoing on in your system at any given time.\n\n566\n00:28:51.280 --> 00:28:55.360\nAnd if I have everybody going through\nthe API, I can use CloudTrail and\n\n567\n00:28:55.360 --> 00:28:58.010\nCloudTrail can record\neverything that's happening.\n\n568\n00:28:58.010 --> 00:29:02.250\nVersus if somebody SSHs into an instance\nand starts doing all sorts of stuff,\n\n569\n00:29:02.250 --> 00:29:04.089\nI don't see that in CloudTrail.\n\n570\n00:29:04.089 --> 00:29:06.171\nBecause that's not being done in AWS,\n\n571\n00:29:06.171 --> 00:29:10.726\nit's being in the guest operating system\nthat you and I are responsible for, right?\n\n572\n00:29:10.726 --> 00:29:13.710\nIf we forced that all to go through\nthe API, we'd have a record of it, right?\n\n573\n00:29:13.710 --> 00:29:17.597\nSo we need to keep as much as\nwe can going through that API.\n\n574\n00:29:17.597 --> 00:29:20.085\nThere's other ways to do\nreal time auditing though,\n\n575\n00:29:20.085 --> 00:29:23.455\nthere's things like the AWS\ntrusted Advisor that we can use.\n\n576\n00:29:23.455 --> 00:29:25.805\nWe've got AWS config rules.\n\n577\n00:29:25.805 --> 00:29:29.645\nConfig rules let us reapply\nrules that we've defined,\n\n578\n00:29:29.645 --> 00:29:32.305\nlike configuration settings that we've\ndefined, to make sure that we always stay\n\n579\n00:29:32.305 --> 00:29:34.975\ncompliant with how things\nare originally provisioned.\n\n580\n00:29:34.975 --> 00:29:38.745\nAnd then, there's the Amazon Inspector\nthat we can use to look in and\n\n581\n00:29:38.745 --> 00:29:41.737\nevaluate our system for\nvulnerabilities and things.\n\n582\n00:29:41.737 --> 00:29:44.366\nWe may also need others things\nlike web application firewalls and\n\n583\n00:29:44.366 --> 00:29:46.180\nAmazon has that too,\nwhere we can inspect for\n\n584\n00:29:46.180 --> 00:29:49.070\ncommon attacks while they're\ncrossing the network.\n\n585\n00:29:49.070 --> 00:29:52.201\nNone of these are solutions that\nshould be deployed by themselves.\n\n586\n00:29:52.201 --> 00:29:54.000\nThey should all be deployed together.\n\n587\n00:29:54.000 --> 00:29:58.859\nThey form that big picture that helps\nus to secure our application and\n\n588\n00:29:58.859 --> 00:30:03.992\nmake sure that everything is done to\nour highest level of due diligence.\n\n589\n00:30:03.992 --> 00:30:08.330\nAll right, the last things that I wanna\ntalk about here kinda odds and ends right?\n\n590\n00:30:08.330 --> 00:30:11.580\nWhen you design a solution\nto be deployed in the cloud.\n\n591\n00:30:11.580 --> 00:30:15.360\nTheres some things we can do that we\ncan't necessarily do on premisis, right?\n\n592\n00:30:15.360 --> 00:30:18.780\nOne example is performing\ntasks in parallel.\n\n593\n00:30:18.780 --> 00:30:20.929\nOn premisis you usually have\na fixed amount of servers.\n\n594\n00:30:20.929 --> 00:30:23.017\nSo you have to make do\nwith what you've got.\n\n595\n00:30:23.017 --> 00:30:26.470\nAnd things typically happen serialized,\nright.\n\n596\n00:30:26.470 --> 00:30:29.870\nActivity one happens, then activity two\nhappens, then activity three happens.\n\n597\n00:30:29.870 --> 00:30:32.440\nOne after the other, right, all in order.\n\n598\n00:30:32.440 --> 00:30:36.255\nBut when you're in the cloud,\nyou don't have a limit to resources.\n\n599\n00:30:36.255 --> 00:30:41.090\nSo you can perform more that one\nthing at the same time right?\n\n600\n00:30:41.090 --> 00:30:44.830\nAnd by doing that you can\nreally improve performance and\n\n601\n00:30:44.830 --> 00:30:45.990\nreally get things moving along.\n\n602\n00:30:45.990 --> 00:30:49.889\nI mentioned that way back in\nthe auto scaling episode,\n\n603\n00:30:49.889 --> 00:30:53.281\nwhere maybe I'm sequencing\nthe human genom and\n\n604\n00:30:53.281 --> 00:30:58.139\nI know that if I have 100 instances\nI can get it done in two months.\n\n605\n00:30:58.139 --> 00:31:00.600\nWhat if I had 200 instances?\n\n606\n00:31:00.600 --> 00:31:02.420\nI can get it done in one month.\n\n607\n00:31:02.420 --> 00:31:06.890\nOr if I had 400 instances,\ncould I get it done in two weeks?\n\n608\n00:31:06.890 --> 00:31:08.830\nOr you keep going up and up and up.\n\n609\n00:31:08.830 --> 00:31:11.270\nAnd by increasing your instances\nyou get these done faster.\n\n610\n00:31:11.270 --> 00:31:14.160\nNow in the real world we can't do\nthat because we'd have to buy all\n\n611\n00:31:14.160 --> 00:31:15.120\nthose servers.\n\n612\n00:31:15.120 --> 00:31:16.707\nAnd then we'd be stuck with\nthem at the end of the day.\n\n613\n00:31:16.707 --> 00:31:20.750\nSo, we buy as many servers as we\ncan tolerate being stuck with.\n\n614\n00:31:20.750 --> 00:31:22.180\nBut when you're in the cloud,\n\n615\n00:31:22.180 --> 00:31:25.930\nit doesn't matter if it's done over a\nperiod of two months, or done in one week.\n\n616\n00:31:25.930 --> 00:31:27.690\nYou can grab as many instances\nas you need to get it done,\n\n617\n00:31:27.690 --> 00:31:29.930\nand the cost ends up being about the same.\n\n618\n00:31:29.930 --> 00:31:32.030\nThe difference is,\nyou got done a heck of a lot faster.\n\n619\n00:31:32.030 --> 00:31:33.700\nBecause you did things in parallel.\n\n620\n00:31:33.700 --> 00:31:35.289\nIf I can take my activities and\n\n621\n00:31:35.289 --> 00:31:39.295\nbreak them up into separate activities\nthat can be performed in parallel,\n\n622\n00:31:39.295 --> 00:31:42.998\nI can really get some amazing\nperformance out of the system, right?\n\n623\n00:31:42.998 --> 00:31:47.039\nAnd that leads me to my last\npoint which is loose coupling.\n\n624\n00:31:47.039 --> 00:31:51.702\nWhat loose coupling is, is an interesting\nidea where basically we don't say\n\n625\n00:31:51.702 --> 00:31:54.944\nthings have to happen and\nbe dependent on each other.\n\n626\n00:31:54.944 --> 00:31:58.162\nThat things can spiral out and\nbranch out in their own way right?\n\n627\n00:31:58.162 --> 00:32:00.547\nI have a little diagram\nthat kinda shows this.\n\n628\n00:32:00.547 --> 00:32:04.383\nThink about a user creating a new account,\nokay?\n\n629\n00:32:04.383 --> 00:32:07.985\nSo a user comes to my website for\nthe first time and they hit Controller A.\n\n630\n00:32:07.985 --> 00:32:08.860\nThey hit a login form.\n\n631\n00:32:08.860 --> 00:32:10.490\nThey hit the register button.\n\n632\n00:32:10.490 --> 00:32:12.240\nAnd they provide a user name and password.\n\n633\n00:32:12.240 --> 00:32:14.660\nThat's being submitted to Controller B,\nright?\n\n634\n00:32:14.660 --> 00:32:19.340\nAnd then, it kicks off an email\nto them to verify their account.\n\n635\n00:32:19.340 --> 00:32:22.060\nAnd everything stops, and it waits.\n\n636\n00:32:22.060 --> 00:32:26.000\nAnd that person is to go log into their\naccount and in their email and click\n\n637\n00:32:26.000 --> 00:32:28.960\na link to verify them and once they verify\nthen they go over to the control and\n\n638\n00:32:28.960 --> 00:32:31.560\nsee was actually able to access\nmanage applications, right?\n\n639\n00:32:31.560 --> 00:32:34.580\nThings happen one after the other and\nif something happens,\n\n640\n00:32:34.580 --> 00:32:37.990\nwe stop and\nwe're kind of stuck in the water.\n\n641\n00:32:37.990 --> 00:32:43.010\nBut, if we do lose coupling If we make\nthings less dependent on each other\n\n642\n00:32:43.010 --> 00:32:45.930\nthen we can continue moving on, right?\n\n643\n00:32:45.930 --> 00:32:49.531\nI might have them log in and\nsubmit their information to controller A,\n\n644\n00:32:49.531 --> 00:32:52.225\nthey submit user name and\npassword to controller B.\n\n645\n00:32:52.225 --> 00:32:55.128\nAnd then it kicks off an email\nto do verification, and\n\n646\n00:32:55.128 --> 00:32:58.950\nmeanwhile I let them go ahead and\nlong, and start working on the side.\n\n647\n00:32:58.950 --> 00:33:02.480\nThey might have full access but they're\nable to log in and continue working and\n\n648\n00:33:02.480 --> 00:33:04.580\nthen go and verify on their own, right.\n\n649\n00:33:04.580 --> 00:33:08.840\nThat's an example in a web application, we\ncan even take that a step further, right.\n\n650\n00:33:08.840 --> 00:33:14.030\nAnd apply it to a web\napp of really any sort\n\n651\n00:33:14.030 --> 00:33:18.390\nby leveraging queues in between,\nlike those simple queuing service.\n\n652\n00:33:18.390 --> 00:33:23.280\nWe can say Wes might be submitting\nan order on my website.\n\n653\n00:33:23.280 --> 00:33:27.090\nAnd he submits the order and\nit drops into a queue.\n\n654\n00:33:27.090 --> 00:33:29.860\nNow, what if I didn't drop into a queue,\nwhat if I just submitted the order and\n\n655\n00:33:29.860 --> 00:33:31.790\nI went straight to a database with it?\n\n656\n00:33:31.790 --> 00:33:33.890\nAnd something happened with the database,\nit started slowing down.\n\n657\n00:33:33.890 --> 00:33:37.150\nMay be it was under heavy load,\nlike the database is on a very heavy load.\n\n658\n00:33:37.150 --> 00:33:40.822\nHe goes to submit the order and it just\nsits there and waits, and it waits and\n\n659\n00:33:40.822 --> 00:33:44.890\nit waits and eventually it says,\nforget this, cancels and moves on.\n\n660\n00:33:44.890 --> 00:33:45.460\nRight?\n\n661\n00:33:45.460 --> 00:33:47.920\nHis order would have processed\nif he would have just waited.\n\n662\n00:33:47.920 --> 00:33:52.160\nBut for every 100 milliseconds of latency,\nwe lose 1% of sales.\n\n663\n00:33:52.160 --> 00:33:53.520\nThat's what Amazon says, right?\n\n664\n00:33:53.520 --> 00:33:55.940\nSo, if it takes two or three seconds,\n\n665\n00:33:55.940 --> 00:33:59.620\nthe odds of him completing that sale\nstart becoming really, really low.\n\n666\n00:33:59.620 --> 00:34:02.830\nSo, instead of having my web server or\nController A,\n\n667\n00:34:02.830 --> 00:34:06.890\nwhatever the application is, Instead\nof having it dependent on the database,\n\n668\n00:34:06.890 --> 00:34:10.610\nI could have it just throw\nthe order into a queue.\n\n669\n00:34:10.610 --> 00:34:14.230\nAnd then the web application could tell\nWes, yep, it's done, your order's placed.\n\n670\n00:34:14.230 --> 00:34:16.500\nIn reality your order isn't\neven in the database yet.\n\n671\n00:34:16.500 --> 00:34:17.910\nIt's just in the queue.\n\n672\n00:34:17.910 --> 00:34:22.230\nAnd now my database, at its leisure,\nanytime in the next hour,\n\n673\n00:34:22.230 --> 00:34:25.580\n24 hours It can go and\npick up that order out of the queue and\n\n674\n00:34:25.580 --> 00:34:28.050\napply it to the database, and\nWes will be none the wiser.\n\n675\n00:34:28.050 --> 00:34:30.380\nAs far as he's concerned,\nhe placed the order.\n\n676\n00:34:30.380 --> 00:34:31.530\nIt's done.\n\n677\n00:34:31.530 --> 00:34:35.440\nAnd the database will grab it eventually,\nand then that'll kick off my shipping and\n\n678\n00:34:35.440 --> 00:34:37.780\nall the other things that\nkind of follow in line.\n\n679\n00:34:37.780 --> 00:34:42.280\nLeveraging things like Amazon Simple Queue\nService allow us to do loose coupling.\n\n680\n00:34:42.280 --> 00:34:46.400\nIt's still important that the order gets\nplaced, but I don't have to wait on that.\n\n681\n00:34:46.400 --> 00:34:49.020\nI can let Wes move on and\nhave a great user experience.\n\n682\n00:34:49.020 --> 00:34:51.050\nMeanwhile, I still get\nthe order on the back end.\n\n683\n00:34:51.050 --> 00:34:53.095\nWe can do that with darn near anything.\n\n684\n00:34:53.095 --> 00:34:56.743\nYou kick off that validation email for\nan account meanwhile let them go in and\n\n685\n00:34:56.743 --> 00:34:59.380\nlog in and\nstart having basic access to the site.\n\n686\n00:34:59.380 --> 00:35:01.520\nAnd I'm still waiting for\nthat verification in the background.\n\n687\n00:35:01.520 --> 00:35:02.820\nI haven't given up on it, right?\n\n688\n00:35:02.820 --> 00:35:05.920\nThat's stuff that we can do by\nusing simple notification service.\n\n689\n00:35:05.920 --> 00:35:08.340\nReally the simple cue service,\nwhen it comes down to time,\n\n690\n00:35:08.340 --> 00:35:11.080\nthe simple cue service\nis a great solution.\n\n691\n00:35:11.080 --> 00:35:12.810\nWhen it just comes down to fanning out,\n\n692\n00:35:12.810 --> 00:35:16.010\nsending the same data to more than one\nplace simple notification service works.\n\n693\n00:35:16.010 --> 00:35:19.720\nBut those are two very easy services\nto integrate into our workflow\n\n694\n00:35:19.720 --> 00:35:21.630\nthat you may not be using on-premises.\n\n695\n00:35:21.630 --> 00:35:24.160\nYou may not have a session broker or\nservice broker or\n\n696\n00:35:24.160 --> 00:35:26.680\nwhatever that acts like\nthe queueing service.\n\n697\n00:35:26.680 --> 00:35:29.940\nBut in the cloud it's already there,\nyou just have to choose to use it, right.\n\n698\n00:35:29.940 --> 00:35:33.770\nSo, those are all things that we need\nto be implementing into a solution.\n\n699\n00:35:33.770 --> 00:35:36.210\nWhen you develop, when you architect.\n\n700\n00:35:36.210 --> 00:35:38.750\nA solution that's gonna\nbe deployed in AWS.\n\n701\n00:35:38.750 --> 00:35:42.360\nYou need to take advantage of as\nmany of these resources as possible\n\n702\n00:35:42.360 --> 00:35:44.130\nto get the best performance.\n\n703\n00:35:44.130 --> 00:35:47.850\nThe best availability and\nthe highest level of reliability and\n\n704\n00:35:47.850 --> 00:35:52.730\nultimately the best visitor and user\nexperience possible with your application.\n\n705\n00:35:52.730 --> 00:35:54.630\n&gt;&gt; A lot of things to consider\nwhen it comes to design,\n\n706\n00:35:54.630 --> 00:35:55.990\nnow considering one thing.\n\n707\n00:35:55.990 --> 00:35:57.547\nWe don't have anymore time on the clock,\nDon.\n\n708\n00:35:57.547 --> 00:35:58.850\n&gt;&gt; [LAUGH]\n&gt;&gt; But great job.\n\n709\n00:35:58.850 --> 00:36:00.270\nBut before we wrap this one up,\n\n710\n00:36:00.270 --> 00:36:03.130\ndo you have any additional things that\nyou might like to impart to our viewers,\n\n711\n00:36:03.130 --> 00:36:06.260\nwhen it comes to things like design and\nimplementation in AWS?\n\n712\n00:36:06.260 --> 00:36:07.230\n&gt;&gt; The other thing to remember,\n\n713\n00:36:07.230 --> 00:36:09.270\nI guess the best point that\nI can impart on you guys.\n\n714\n00:36:09.270 --> 00:36:12.610\nThere will always be an initial\narchitecture that you design.\n\n715\n00:36:12.610 --> 00:36:13.930\nBut don't stop there.\n\n716\n00:36:13.930 --> 00:36:18.090\nDo continual process improvement,\nCPI Monitor your solution and\n\n717\n00:36:18.090 --> 00:36:20.170\nover time you may find\nthat there's alternatives.\n\n718\n00:36:20.170 --> 00:36:22.920\nThere's changes you can make to\ntweak things and make it better.\n\n719\n00:36:22.920 --> 00:36:25.590\nAmazon may offer a new service\nthat you can take advantage of.\n\n720\n00:36:25.590 --> 00:36:29.160\nOr maybe your user base grows and what\nused to be a good solution is no longer\n\n721\n00:36:29.160 --> 00:36:32.290\na good solution because your users are so\nmuch greater than they were before.\n\n722\n00:36:32.290 --> 00:36:34.300\nSo, we've always got to\nstay on top of that and\n\n723\n00:36:34.300 --> 00:36:36.820\ncontinue to make our solution better.\n\n724\n00:36:36.820 --> 00:36:39.420\n&gt;&gt; Don, thank you as always for\njoining us in the studios here and\n\n725\n00:36:39.420 --> 00:36:41.420\nlending you expertise in AWS.\n\n726\n00:36:41.420 --> 00:36:43.990\nAnd we do appreciate you\nthe viewer watching.\n\n727\n00:36:43.990 --> 00:36:46.190\nBut, it does look like\nit's time to sign out.\n\n728\n00:36:46.190 --> 00:36:47.760\nI've been your host Wes Bryan.\n\n729\n00:36:47.760 --> 00:36:48.690\n&gt;&gt; And I'm Don Pezet.\n\n730\n00:36:48.690 --> 00:36:50.337\n&gt;&gt; And we'll see you next time.\n\n731\n00:36:50.337 --> 00:36:57.609\n[MUSIC]\n\n732\n00:36:57.609 --> 00:36:59.780\nThank you for watching ITPRO TV.\n\n",
          "vimeoId": "209767154"
        }
      ],
      "title": "Architecture Best Practices"
    }
  ],
  "url": "aws-certified-solutions-architect-associate",
  "vLab": false
}
