{
  "description": "Unix and Unix-like operating systems(Linux/BSD), known for their speed and reliability, are becoming an ever increasing presence in many data centers and server closets. That being the case, systems administrators that are new to the command-line driven nature of these systems will need to get up to speed on how to interact with the CLI shell environment found as the default on the majority of those systems. In this series, we introduce you to that shell environment known as the Bourne Again Shell or bash, for short. The series starts with an introduction to the bash environment, showing and explaining to you how to navigate through the system using text-based commands. This includes file system navigation, setting file permissions, manipulating output, etc. Then, building upon that foundation, we show you how to automate repetitive tasks by creating customized scripts. All the main bash scripting abilities are covered; from basic repetitive command execution, to more complex functionality like arithmetic, arrays, conditional statements(if-then/elif/case-esac), program loops(for/while/until), and functions/libraries.",
  "descriptionMD": "",
  "length": "42335",
  "name": "Bash and Scripting",
  "practiceExam": false,
  "subtitle": "CLI",
  "tagUrl": "help-desk",
  "topics": [
    {
      "episodes": [
        {
          "description": "",
          "length": "259",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-0-0-overview-111715-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-0-0-overview-111715-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-0-0-overview-111715-1-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.554\n[MUSIC]\n\n2\n00:00:01.554 --> 00:00:05.596\nWelcome, we're taking a look at Bash and\n\n3\n00:00:05.596 --> 00:00:11.150\nScripting this is gonna be\npart of our tech skill series.\n\n4\n00:00:11.150 --> 00:00:15.920\nWhat we wanna do is we wanna make sure\nthat we introduce you to what the show is\n\n5\n00:00:15.920 --> 00:00:20.000\ngonna be about and our, of course\nsubject matter expert Mr. Daniel Lowrie.\n\n6\n00:00:20.000 --> 00:00:22.670\nDaniel tell us what we're\ngonna be doing in this show.\n\n7\n00:00:22.670 --> 00:00:24.063\n>> Yeah, in Bash and scripting,\n\n8\n00:00:24.063 --> 00:00:26.446\nwe're going to be doing\na lot of interesting stuff.\n\n9\n00:00:26.446 --> 00:00:29.930\nIf you've never heard of Linux or Unix or\nmaybe you've got a Macbook and you might\n\n10\n00:00:29.930 --> 00:00:34.110\nnot know this but the Bash environment,\nthe Bourne-again shell, is actually built\n\n11\n00:00:34.110 --> 00:00:38.070\ninto that system and maybe you started to\nthink hey, I'm going to partake in this.\n\n12\n00:00:38.070 --> 00:00:39.640\nI want to see what I can do with it.\n\n13\n00:00:39.640 --> 00:00:43.540\nAnd maybe even I want to get into\nscripting, create scripts that do things\n\n14\n00:00:43.540 --> 00:00:48.150\nfor me in the system that\nare customizable for myself.\n\n15\n00:00:48.150 --> 00:00:51.370\nSo how do I do that,\nwhere do I get started?\n\n16\n00:00:51.370 --> 00:00:55.260\nThat's what this show is all about, if\nyou've been administrating a Linux system\n\n17\n00:00:55.260 --> 00:00:58.630\nor a Unix system, anything with a Bash\nshell in it, this is also for you, right?\n\n18\n00:00:58.630 --> 00:01:01.450\nYou you know the basics and\nyou need to get to that next level,\n\n19\n00:01:01.450 --> 00:01:04.840\nyou need to start to be able to\ncreate more complex scripts.\n\n20\n00:01:04.840 --> 00:01:06.100\nThat we're gonna get to as well.\n\n21\n00:01:06.100 --> 00:01:10.670\nSo hopefully, if you're watching this, I\nwant to take you down the stream of where\n\n22\n00:01:10.670 --> 00:01:12.570\nwe're gonna go,\nwhere we're gonna take you.\n\n23\n00:01:12.570 --> 00:01:14.540\nWe're gonna start with some\nvery basic functionality.\n\n24\n00:01:14.540 --> 00:01:18.450\nWe're gonna work right into the best,\nget your feet wet as it were.\n\n25\n00:01:18.450 --> 00:01:21.490\nSo that you understand,\nhow do I work the directories?\n\n26\n00:01:21.490 --> 00:01:22.680\nHow do I create files?\n\n27\n00:01:22.680 --> 00:01:24.170\nHow do I make directories?\n\n28\n00:01:24.170 --> 00:01:27.350\nHow do I do a whole lot of\nthings that are just normal,\n\n29\n00:01:27.350 --> 00:01:29.910\neveryday activities inside\nof the Bash environment?\n\n30\n00:01:29.910 --> 00:01:32.290\nSo that's where we're going to start.\n\n31\n00:01:32.290 --> 00:01:35.620\nThen we're going to move you along into\nusing things like text editors, because\n\n32\n00:01:35.620 --> 00:01:39.320\ntext editors, if we know how to use those,\nwell that's how we create our scripts.\n\n33\n00:01:39.320 --> 00:01:45.300\nWe have to be able to work with text\nfiles, you have to remember in a pure Bash\n\n34\n00:01:45.300 --> 00:01:50.330\nenvironment, there is no graphical, so\nyou may be stuck using just those CLI or\n\n35\n00:01:50.330 --> 00:01:53.590\nCommand Line Interface tools\nthat are at your ready.\n\n36\n00:01:53.590 --> 00:01:57.865\nThere are some text editors\nthat are built in the CLIs and\n\n37\n00:01:57.865 --> 00:02:01.565\nin the Bash environment specifically,\nso we're gonna try to show you, wade\n\n38\n00:02:01.565 --> 00:02:05.445\nyou through a couple of more commonly used\ntext editors inside of your Bash system.\n\n39\n00:02:05.445 --> 00:02:09.588\nOther things we're gonna take a look\nat is how to do things like math.\n\n40\n00:02:09.588 --> 00:02:10.810\nInside of yourself you're thinking,\n\n41\n00:02:10.810 --> 00:02:13.880\nwow, why would I want to do math,\nI'm not a mathematician.\n\n42\n00:02:13.880 --> 00:02:16.580\nBecause math is something\nthat you're actually\n\n43\n00:02:16.580 --> 00:02:18.760\ngoing to do as get into more\nadvanced scripting functions.\n\n44\n00:02:18.760 --> 00:02:20.460\nSo we're going to show how to do that.\n\n45\n00:02:20.460 --> 00:02:23.630\nWe're also going to take a look at\ncreating conditional statements.\n\n46\n00:02:23.630 --> 00:02:28.740\nThis is where it really starts to put\nthe meat on the bones of the show.\n\n47\n00:02:28.740 --> 00:02:32.330\nIs how do I do one thing over another?\n\n48\n00:02:32.330 --> 00:02:34.350\nHow do I make it loop through that?\n\n49\n00:02:34.350 --> 00:02:37.030\nWe're gonna look at loops and\nhow to create those.\n\n50\n00:02:37.030 --> 00:02:40.780\nWe're gonna create functions which\nare basically mini scripts that I can call\n\n51\n00:02:40.780 --> 00:02:43.910\ninside of the scripts that I'm creating\nand I don't have to rewrite my code.\n\n52\n00:02:43.910 --> 00:02:50.086\nSo I can create a whole library of\ndifferent functions that do things like,\n\n53\n00:02:50.086 --> 00:02:55.020\nif-then statements and for\nand while and until loops\n\n54\n00:02:55.020 --> 00:02:59.950\nthat will create the functionality inside\nof my script to get the response and\n\n55\n00:02:59.950 --> 00:03:02.970\nthe exiting the actual functionality\nthat I'm looking for from my script.\n\n56\n00:03:02.970 --> 00:03:05.010\nSo there's going to be a lot of stuff.\n\n57\n00:03:05.010 --> 00:03:07.470\nWe're also going to take\na look at regular expression.\n\n58\n00:03:07.470 --> 00:03:10.060\nA very difficult topic but\na lot of scripting involves this,\n\n59\n00:03:10.060 --> 00:03:10.870\nworking with that.\n\n60\n00:03:10.870 --> 00:03:16.280\nHow do I search for things that\nmaybe are known or even unknown?\n\n61\n00:03:16.280 --> 00:03:16.930\nThat can help us out.\n\n62\n00:03:16.930 --> 00:03:20.300\nWe also want to take a look at\nlogical operators, parameters,\n\n63\n00:03:20.300 --> 00:03:24.980\nand a lot of interesting things that\nare add-on functionality to our scripts.\n\n64\n00:03:24.980 --> 00:03:28.760\nHow do we make them go beyond what\nwe've already built them to do?\n\n65\n00:03:29.940 --> 00:03:33.410\nHow do we add functionality outside\nof it and expand that horizon?\n\n66\n00:03:33.410 --> 00:03:36.510\nLet's see here, is there anything\nelse that we need to go over?\n\n67\n00:03:36.510 --> 00:03:40.050\nBasically, the major part of scripting.\n\n68\n00:03:40.050 --> 00:03:44.430\nOnce we get out of what is Bash,\nhow do I work with Bash, how do I become\n\n69\n00:03:44.430 --> 00:03:50.540\nan everyday user, that's when we start\nreally veering toward creating scripts.\n\n70\n00:03:50.540 --> 00:03:57.890\nAnd then that will be the rest of the meat\non the bone, right, which will be creating\n\n71\n00:03:57.890 --> 00:04:00.670\nvariables, moving into those conditional\nstatements, moving into those loops,\n\n72\n00:04:00.670 --> 00:04:03.590\nusing regular expression, using\nthings like parameters and functions.\n\n73\n00:04:03.590 --> 00:04:05.440\nSo it's a lot of goings on with this show.\n\n74\n00:04:05.440 --> 00:04:08.310\nSo if you're If you're interested\nin creating scripts you've\n\n75\n00:04:08.310 --> 00:04:09.370\nfound the right place.\n\n76\n00:04:09.370 --> 00:04:15.991\nWe've got a lot great content coming up\nfor you and we hope to see you there.\n\n77\n00:04:15.991 --> 00:04:18.879\n[MUSIC]\n\n",
          "vimeoId": "146521487"
        },
        {
          "description": "In this episode, Ronnie and Daniel introduce us to BASH--Bourne Again Shell.  They talk about the history and basics of how bash started.  Discussing what a shell is, they introduce the ways in which we interact with bash in the interactive login, the interactive non-login and the non-interactive ways.  The guys also take a moment to describe the use of bash as both a scripting and programming language.   They spend a little time emphasizing the flexibility and portability of bash skills across multiple Linux distros.",
          "length": "2075",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-1-what_is_bash-110915.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-1-what_is_bash-110915-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-1-what_is_bash-110915-sm.jpg",
          "title": "What is Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.055 --> 00:00:10.055\n[MUSIC]\n\n2\n00:00:12.268 --> 00:00:15.170\nWelcome to another exciting\nepisode here on IT PRO TV.\n\n3\n00:00:15.170 --> 00:00:20.000\nI'm your host Ronnie Wong and today, we'll\ntake a look at Bash as well as scripting\n\n4\n00:00:20.000 --> 00:00:24.554\nusing well, Linux is actually what were\ntaking a look at today and who better to\n\n5\n00:00:24.554 --> 00:00:29.250\nhelp us out in, in this world that we're\ntalking about then, Mr Daniel Lowrie.\n\n6\n00:00:29.250 --> 00:00:31.800\nAnd so Daniel, let's go ahead and\nget started here.\n\n7\n00:00:31.800 --> 00:00:34.560\nWhat the heck are we talking\nabout when we talk about Bash?\n\n8\n00:00:34.560 --> 00:00:36.890\n>> Yeah, let's jump right in to Bash,\nthe good old Bourne Again Shell.\n\n9\n00:00:36.890 --> 00:00:37.990\nThat's what we're talking about.\n\n10\n00:00:37.990 --> 00:00:42.480\nThat's the little acronym that Ronnie\nwas mentioning here, and that's what we\n\n11\n00:00:42.480 --> 00:00:46.330\ntend to use when you use any kind of\nstar nix system, as they like to say, or\n\n12\n00:00:46.330 --> 00:00:50.190\nany Unix or Linux deviant or\nvariant that you might run into.\n\n13\n00:00:50.190 --> 00:00:53.350\nBash is the de facto, the drug of choice\nwhen it comes to shells on an operating\n\n14\n00:00:53.350 --> 00:00:54.960\nsystem that is running Linux.\n\n15\n00:00:54.960 --> 00:00:59.630\nNow if you have every played with Linux\nbefore, you've probably encountered Bash,\n\n16\n00:00:59.630 --> 00:01:04.630\nbut like Ronnie said,\nthat doesn't really answer the question.\n\n17\n00:01:04.630 --> 00:01:05.950\nWhat exactly is Bash?\n\n18\n00:01:05.950 --> 00:01:07.650\nWell, I kind of gave up the play there.\n\n19\n00:01:07.650 --> 00:01:08.790\nIt is a shell.\n\n20\n00:01:08.790 --> 00:01:11.040\nYeah okay, that's great right?\n\n21\n00:01:11.040 --> 00:01:15.800\nIt is the Bourne Again Shell and\nit was developed by a guy named\n\n22\n00:01:15.800 --> 00:01:20.500\nBrian Fox back in, I think, 1989,\nif I'm remembering correctly.\n\n23\n00:01:20.500 --> 00:01:23.600\nThis guy was an awesome programmer and\nhe said, you know what?\n\n24\n00:01:23.600 --> 00:01:26.030\nWe've got this great shell\ncalled the Bourne Shell, but\n\n25\n00:01:26.030 --> 00:01:29.860\nthere's some limitations to it,\nthere's other shells that are out there.\n\n26\n00:01:29.860 --> 00:01:32.710\nAnd it would nice if we had some\nof that functionality in something\n\n27\n00:01:32.710 --> 00:01:33.800\nthat was like the Bourne Shell.\n\n28\n00:01:33.800 --> 00:01:37.350\nSo he started working on that, and\ntrying to make it a little better.\n\n29\n00:01:37.350 --> 00:01:40.620\nAnd lo and behold, his baby that he\ncreated was the Bourne Again Shell and\n\n30\n00:01:40.620 --> 00:01:42.320\nit has taken off like wildfire.\n\n31\n00:01:42.320 --> 00:01:46.040\nBack when it first came out, it was,\nyou know it took some time for\n\n32\n00:01:46.040 --> 00:01:51.600\nit to build up steam but as people saw\nthe ability, the flexibility should I say,\n\n33\n00:01:51.600 --> 00:01:55.030\nthat they found in the Bash shell,\nthey started adopting it even more.\n\n34\n00:01:55.030 --> 00:01:57.630\nAnd that's when it became\nthe de facto Linux and\n\n35\n00:01:57.630 --> 00:02:01.010\nUnix shell found on most Unix or\nLinux systems today.\n\n36\n00:02:01.010 --> 00:02:04.670\nAnd I almost guarantee if you download and\ninstall anything like Red Hat,\n\n37\n00:02:04.670 --> 00:02:05.460\nor a and even online.\n\n38\n00:02:05.460 --> 00:02:08.900\nI have a Macbook, it's running I\nthink it's Darwin OS something,\n\n39\n00:02:09.980 --> 00:02:13.130\nsome Unix variant,\nguess what shell I'm running?\n\n40\n00:02:13.130 --> 00:02:17.600\nIt's the Bash Shell, is the one\nthat we find here on, like I said,\n\n41\n00:02:17.600 --> 00:02:19.350\njust about every Linux system.\n\n42\n00:02:19.350 --> 00:02:22.625\nLet's see another thing to know about\nthe Bash Shell, not only does it stand for\n\n43\n00:02:22.625 --> 00:02:27.460\nBourne Again Shell, which is a play\non words, the old Bourne Shell,\n\n44\n00:02:27.460 --> 00:02:29.098\nwhich is B-O-U-R-N-E,\n\n45\n00:02:29.098 --> 00:02:33.600\nwas developed by by a guy named, I\nbelieve his first name is Stephen Bourne.\n\n46\n00:02:33.600 --> 00:02:36.060\nLike I said, great shell and\nhe kinda say, it'd be funny,\n\n47\n00:02:36.060 --> 00:02:41.580\nthe whole spiritual side of being\nborn again is a reiteration\n\n48\n00:02:41.580 --> 00:02:46.630\nof a new coming of that shell\nis kinda the same thing.\n\n49\n00:02:46.630 --> 00:02:49.690\nSo he said it's funny we'll\ncall it the Bourne Again Shell.\n\n50\n00:02:49.690 --> 00:02:50.600\nNot only that but\n\n51\n00:02:50.600 --> 00:02:54.200\nit does a great job of giving you\nthe idea of what exactly it's doing.\n\n52\n00:02:54.200 --> 00:02:58.870\nAnd what it is doing is Is it's bashing\ntogether highlights from the C shell, and\n\n53\n00:02:58.870 --> 00:02:59.790\nI believe the K shell.\n\n54\n00:02:59.790 --> 00:03:01.650\n>> Bourne Shell.\n>> Yeah, and the Bourne Shell itself.\n\n55\n00:03:01.650 --> 00:03:03.320\nSo it takes all the great\nfeatures from there,\n\n56\n00:03:03.320 --> 00:03:07.150\nkind of tries to wrangle them into\none shell, put them all together.\n\n57\n00:03:07.150 --> 00:03:12.900\nSo that we have this lovely born again\nshell and that's what we use today.\n\n58\n00:03:12.900 --> 00:03:15.680\n>> All right, now Daniel,\nI understand that.\n\n59\n00:03:15.680 --> 00:03:19.140\nBut you mentioned the word shell and\nwhen I think about that,\n\n60\n00:03:19.140 --> 00:03:21.340\ncuz I'm not super for Linux savvy.\n\n61\n00:03:21.340 --> 00:03:25.010\nI always think about going by the sea and\nholding one up.\n\n62\n00:03:25.010 --> 00:03:27.070\nYou're obviously not talking about that.\n\n63\n00:03:27.070 --> 00:03:30.350\nSo, what are we talking about\nwhen we talk about a shell?\n\n64\n00:03:30.350 --> 00:03:31.710\n>> That was exactly what\nI was talking about.\n\n65\n00:03:31.710 --> 00:03:33.170\n>> No [LAUGH]\n>> Well, it is sea shells, that amazing.\n\n66\n00:03:33.170 --> 00:03:35.660\n>> You are a clairvoyant,\nsome sort of Savant or Swami.\n\n67\n00:03:35.660 --> 00:03:38.120\nNo, no, he's playing around\nwe're having a good time here.\n\n68\n00:03:38.120 --> 00:03:39.135\nWhen I say shell, what do I mean?\n\n69\n00:03:39.135 --> 00:03:41.580\nOkay, we understand that\nthe Bourne Again Shell is a shell, but\n\n70\n00:03:41.580 --> 00:03:42.480\nwhat the heck is a shell?\n\n71\n00:03:42.480 --> 00:03:45.990\nObviously, it's not the sea shell created\nby some sort of weird crustacean or\n\n72\n00:03:45.990 --> 00:03:48.320\nanything like that, the ocean.\n\n73\n00:03:48.320 --> 00:03:50.387\nIt is the intermediates, right.\n\n74\n00:03:50.387 --> 00:03:54.120\nThe thing that stands between you and\nyour Linux kernel.\n\n75\n00:03:54.120 --> 00:03:56.610\nThat's the important\npart of what a shell is.\n\n76\n00:03:56.610 --> 00:04:01.020\nIt allows you to interact with\nthe Linux or Unix system that you\n\n77\n00:04:01.020 --> 00:04:05.650\nhave installed on your hardware and give\nit commands, have it do things for you.\n\n78\n00:04:05.650 --> 00:04:09.300\nBasically, is your interpreter between\nyourself and what you what to do and\n\n79\n00:04:09.300 --> 00:04:12.580\nthe In the machine code that's\nunderneath there saying,\n\n80\n00:04:12.580 --> 00:04:15.180\nhow do I do what it is\nmy user wants me to do?\n\n81\n00:04:15.180 --> 00:04:17.720\nIt says okay, I understand.\n\n82\n00:04:17.720 --> 00:04:22.350\nYou don't speak human so well,\nthat's not a problem, but I do.\n\n83\n00:04:22.350 --> 00:04:23.729\nI do a decent job of it anyway.\n\n84\n00:04:23.729 --> 00:04:25.050\n>> [LAUGH]\n>> And then the machine, but\n\n85\n00:04:25.050 --> 00:04:29.950\nhuman I know you're probably not the best\nat assembly language or binary numbers, so\n\n86\n00:04:29.950 --> 00:04:30.720\nI speak that as well.\n\n87\n00:04:30.720 --> 00:04:32.310\nI think of it as almost as C-3PO.\n\n88\n00:04:32.310 --> 00:04:35.050\nHe says,\nI'm fluent in over four billion languages.\n\n89\n00:04:35.050 --> 00:04:35.810\n>> Protocol droid.\n\n90\n00:04:35.810 --> 00:04:36.390\n>> Yes, that's right.\n\n91\n00:04:36.390 --> 00:04:37.040\nIt's a protocol droid.\n\n92\n00:04:37.040 --> 00:04:37.850\nThat's exactly what it does.\n\n93\n00:04:37.850 --> 00:04:39.820\nIt's merging two protocols together so\n\n94\n00:04:39.820 --> 00:04:42.200\nthat you can have some\ninteraction with your system.\n\n95\n00:04:42.200 --> 00:04:44.270\nSo one of the things I want to do,\n\n96\n00:04:44.270 --> 00:04:47.020\nthat I want to show you about, that I\ndo have a lovely little diagram here,\n\n97\n00:04:47.020 --> 00:04:51.470\nkind of help us give us a visual\non what that actually means.\n\n98\n00:04:51.470 --> 00:04:54.700\nAnd you'll notice that over here on\nmy left side I've got and a user and\n\n99\n00:04:54.700 --> 00:04:59.020\nhis computer and in the middle is the CLI,\nthe command line interpreter or\n\n100\n00:04:59.020 --> 00:05:03.290\nthe command line interface,\neither is usually pretty well accepted.\n\n101\n00:05:03.290 --> 00:05:07.370\nAnd then you have the kernel which is\nthe actual operating system's system file.\n\n102\n00:05:07.370 --> 00:05:09.770\nThat's what makes it work and\ndo it's thing.\n\n103\n00:05:09.770 --> 00:05:12.410\nSo you can see the the CLI\nis sitting in the middle.\n\n104\n00:05:12.410 --> 00:05:17.580\nWe've got our lovely Bourne Again Shell,\nand the command line interface.\n\n105\n00:05:17.580 --> 00:05:22.580\nThat's how we interface,\nnow normally a shell is text based.\n\n106\n00:05:22.580 --> 00:05:27.130\nThat's what you're going to see, it's just\ngoing to be alphanumeric characters and\n\n107\n00:05:27.130 --> 00:05:31.190\nspecial characters and it's just a black\nbox that's how you interact with it.\n\n108\n00:05:31.190 --> 00:05:36.050\nYou give it command based,\ntext based commands and it does it.\n\n109\n00:05:36.050 --> 00:05:37.590\nRight, and that's how it works.\n\n110\n00:05:37.590 --> 00:05:40.820\nThe output comes back at you\nthat's also gonna be text based or\n\n111\n00:05:40.820 --> 00:05:44.220\ncommand based those type of things.\n\n112\n00:05:44.220 --> 00:05:49.510\nTechnically, you do login to a system and\nyou get a graphical user interface,\n\n113\n00:05:49.510 --> 00:05:52.430\nthat is also technically a shell,\nit's just a graphical shell, and\n\n114\n00:05:52.430 --> 00:05:57.360\nthere's a lot of overhead that comes\nalong with those graphical shells, which,\n\n115\n00:05:57.360 --> 00:05:58.830\nthey're fine, they're great, we love them.\n\n116\n00:05:58.830 --> 00:05:59.930\nI know Ronnie uses them.\n\n117\n00:05:59.930 --> 00:06:00.870\nI use them, obviously.\n\n118\n00:06:00.870 --> 00:06:03.260\nThey're sitting at home,\nwatching TV, or on your computer,\n\n119\n00:06:03.260 --> 00:06:05.460\nyou're using one as well,\nand that's great.\n\n120\n00:06:05.460 --> 00:06:06.690\nWe love them.\n\n121\n00:06:06.690 --> 00:06:10.790\nBut, in a server environment, an\nenvironment where speed is what matters,\n\n122\n00:06:10.790 --> 00:06:15.230\nwhen a low overhead is\nthe talk of the day.\n\n123\n00:06:15.230 --> 00:06:18.750\nHigh speed, low drag,\nthat's what you're looking for.\n\n124\n00:06:18.750 --> 00:06:21.130\nUsing a shell,\na text based shell is probably\n\n125\n00:06:21.130 --> 00:06:24.930\nthe way you're gonna wanna go cuz then\nyou don't have to draw a screen, and\n\n126\n00:06:24.930 --> 00:06:28.260\nhave a window, and\ncolors and support this, and\n\n127\n00:06:28.260 --> 00:06:32.500\ndrivers which are working with a graphics\ncard and outputting to the display.\n\n128\n00:06:32.500 --> 00:06:34.130\nAnd make sure it looks right.\n\n129\n00:06:34.130 --> 00:06:36.600\nTrust me, we deal with enough of\nthat around here in the studio.\n\n130\n00:06:36.600 --> 00:06:38.120\nWe know how much of\nheadache that could be.\n\n131\n00:06:38.120 --> 00:06:42.360\nIf everything was text based I'm sure\nRonnie would probably jump for joy.\n\n132\n00:06:42.360 --> 00:06:44.380\n>> Yes, I would.\nAt times you do see stuff like this,\n\n133\n00:06:44.380 --> 00:06:47.820\nwhen you work with certain types\nof appliances in networking.\n\n134\n00:06:47.820 --> 00:06:50.580\nBut what we're taking a look at here, of\ncourse, is just that idea of being sure.\n\n135\n00:06:50.580 --> 00:06:55.670\nAnd we feel confident in being able to run\nsome of the Bash stuff that we need to,\n\n136\n00:06:55.670 --> 00:06:59.100\nas well as unsend the commands and also\nthe scripting that we're getting into.\n\n137\n00:06:59.100 --> 00:07:02.170\nNow speaking of that, Daniel though,\nwe have to understand something\n\n138\n00:07:02.170 --> 00:07:04.660\nas well in there's multiple ways that\nwe can interact with Bash, right?\n\n139\n00:07:04.660 --> 00:07:05.730\n>> Yeah, that's\n>> Exactly right.\n\n140\n00:07:05.730 --> 00:07:09.210\nRonnie hits on a really great point,\nand that's that there's a few\n\n141\n00:07:09.210 --> 00:07:12.430\ndifferent types of, even though they're\nall text based shells, there's even a few\n\n142\n00:07:12.430 --> 00:07:16.000\nof those types of shells, and I just wanna\nmake sure that you're familiar with that.\n\n143\n00:07:16.000 --> 00:07:18.980\nSo if you encounter any of those,\nyou're not gonna,\n\n144\n00:07:18.980 --> 00:07:21.940\nthis isn't the same as what I did on this\nsystem, it was different over there.\n\n145\n00:07:21.940 --> 00:07:23.560\nThat's okay, it's not a big deal, but\n\n146\n00:07:23.560 --> 00:07:27.250\nwe're gonna try to help you walk down that\nroad, make things a little easier for you.\n\n147\n00:07:27.250 --> 00:07:32.430\nThe first thing we want to\nget our minds wrapped around\n\n148\n00:07:32.430 --> 00:07:36.470\nis a login shell and\nit's also an interactive shell.\n\n149\n00:07:36.470 --> 00:07:39.970\nSo what we mean when we say login or\n\n150\n00:07:39.970 --> 00:07:43.540\ninteractive login shell\nis that you interact,\n\n151\n00:07:43.540 --> 00:07:47.770\nit takes commands from the user and\nthat's how you interact with the shell.\n\n152\n00:07:47.770 --> 00:07:52.230\nIt does things that you type into it and\nresults some sort of result.\n\n153\n00:07:52.230 --> 00:07:56.940\nAnd when we say, interactive login\n\n154\n00:07:56.940 --> 00:07:59.970\nmeans you're actually going to\nlogin from the shell prompt itself.\n\n155\n00:07:59.970 --> 00:08:03.690\nAnd that's an important thing because\nnot every type of shell does that.\n\n156\n00:08:03.690 --> 00:08:07.130\nAnd we're going to get into\nthat here in just a second.\n\n157\n00:08:07.130 --> 00:08:10.430\nSo, the first thing we see is\nan interactive login shell.\n\n158\n00:08:10.430 --> 00:08:13.170\nWe take a look at my computer, I can\nshow you kind of what that looks like.\n\n159\n00:08:13.170 --> 00:08:16.120\nAnd as you can see,\nit's not very exciting, right?\n\n160\n00:08:16.120 --> 00:08:17.820\nIt's basically a black screen and\n\n161\n00:08:17.820 --> 00:08:20.030\nI know the text is a little bit small\nhere, it's because it's a login shell.\n\n162\n00:08:20.030 --> 00:08:21.620\nSo I'll have to go in and\n\n163\n00:08:21.620 --> 00:08:25.710\ncrazy around with a little bit of\nthe configuration files to make it bigger.\n\n164\n00:08:25.710 --> 00:08:29.350\nBut all this is here is local\nhost login and it's waiting for\n\n165\n00:08:29.350 --> 00:08:32.480\nsomeone to type in a user name and\na password.\n\n166\n00:08:32.480 --> 00:08:34.720\nSo that, they can log into the system and\n\n167\n00:08:34.720 --> 00:08:38.520\nthen they can start to interact with\nthe kernel itself through the shell.\n\n168\n00:08:38.520 --> 00:08:39.650\nVery, very simple.\n\n169\n00:08:39.650 --> 00:08:41.530\nI just created an easy user one account.\n\n170\n00:08:41.530 --> 00:08:44.800\nSo if I just type in user one,\ncuz it's asking for\n\n171\n00:08:44.800 --> 00:08:48.680\nmy username here when it says login,\nand I hit return.\n\n172\n00:08:48.680 --> 00:08:51.900\nThen it prompts me for\na password little bit of security there,\n\n173\n00:08:51.900 --> 00:08:55.030\nthat's always helpful you type that in.\n\n174\n00:08:55.030 --> 00:08:57.006\nI actually have a real\npassword on this thing so.\n\n175\n00:08:57.006 --> 00:08:57.834\n[LAUGH]\n>> [LAUGH]\n\n176\n00:08:57.834 --> 00:08:59.210\n>> Just in case some of you\n\n177\n00:08:59.210 --> 00:09:01.165\nguys out there are a little funny.\n\n178\n00:09:01.165 --> 00:09:01.860\n[LAUGH] All right.\n\n179\n00:09:01.860 --> 00:09:02.830\nAnd then now you see, that's it.\n\n180\n00:09:02.830 --> 00:09:03.650\nI'm logged in.\n\n181\n00:09:03.650 --> 00:09:04.810\nIt didn't give me any errors.\n\n182\n00:09:04.810 --> 00:09:06.230\nIt didn't give me any problems.\n\n183\n00:09:06.230 --> 00:09:09.080\nIt just greeted me with the terminal,\nand gave me a prompt.\n\n184\n00:09:09.080 --> 00:09:10.960\nOkay. I'm in.\nI can now now start interacting,\n\n185\n00:09:10.960 --> 00:09:15.410\nI can throw commands at this thing,\nI can say I want to know what the date is,\n\n186\n00:09:15.410 --> 00:09:18.470\nI want to know the exact day,\nwhat is the let's see here.\n\n187\n00:09:18.470 --> 00:09:21.880\nIfconfig that's another one of our\ncommands, gives us interaction with\n\n188\n00:09:21.880 --> 00:09:25.320\nour network interface,\nI'm interacting with the system itself.\n\n189\n00:09:25.320 --> 00:09:29.110\nI'm throwing commands at it,\nit's interpreting those commands,\n\n190\n00:09:29.110 --> 00:09:31.370\npassing them along to the Kernel.\n\n191\n00:09:31.370 --> 00:09:35.120\nKernel is doing the job returning\nthe output and displaying it to my screen.\n\n192\n00:09:35.120 --> 00:09:36.660\nScreen we are interacting.\n\n193\n00:09:36.660 --> 00:09:38.330\nThis is pretty awesome.\n\n194\n00:09:38.330 --> 00:09:39.160\nIt's not too bad.\n\n195\n00:09:39.160 --> 00:09:42.260\nVery easy, very simplistic, and\nthat can be a good way to go.\n\n196\n00:09:42.260 --> 00:09:46.170\nWe also have interactive non-login shells.\n\n197\n00:09:46.170 --> 00:09:50.420\nAnd you're like, okay, well how the heck\ndo you have a login shell that's\n\n198\n00:09:50.420 --> 00:09:55.866\ninteractive, or I should say, I'm sorry,\nit's a non-interactive, non-login shell.\n\n199\n00:09:55.866 --> 00:09:58.916\nIt can get confusing ladies and gentlemen.\n\n200\n00:09:58.916 --> 00:09:59.590\n>> [LAUGH]\n>> So, we have\n\n201\n00:09:59.590 --> 00:10:00.360\ninteractive\n>> Log in.\n\n202\n00:10:00.360 --> 00:10:04.090\nI log in, I interact with the system,\nthrow commands at it, it returns results.\n\n203\n00:10:04.090 --> 00:10:07.080\nA non-interactive,\nnon-login shell is things like a script.\n\n204\n00:10:07.080 --> 00:10:09.750\nAnd, that's what we're going to\nget into throughout this series,\n\n205\n00:10:09.750 --> 00:10:12.580\nis how to create scripts,\nwhat's going on with scripts, and\n\n206\n00:10:12.580 --> 00:10:15.730\nhow to make them do things\nwe want them to do.\n\n207\n00:10:15.730 --> 00:10:17.390\nAutomate processes,\nit's going to be a lot of fun.\n\n208\n00:10:17.390 --> 00:10:22.018\nBut, at this point in time, all you\nneed to know about a non-interactive,\n\n209\n00:10:22.018 --> 00:10:24.790\nnon-login shell is, a,\nyou don't interact with it.\n\n210\n00:10:24.790 --> 00:10:25.300\nRight?\n\n211\n00:10:25.300 --> 00:10:26.240\nIt runs autonomously.\n\n212\n00:10:26.240 --> 00:10:29.450\nIt doesn't need your input and\nthen you don't login to make it run.\n\n213\n00:10:29.450 --> 00:10:30.980\nRight.\nYou don't have to login.\n\n214\n00:10:30.980 --> 00:10:35.070\nSo once the system is up and running,\nit will when that script is ready to go,\n\n215\n00:10:35.070 --> 00:10:37.790\nwhatever triggers that script,\nit will create a cell,\n\n216\n00:10:37.790 --> 00:10:41.010\nthat's kind of a sub shell\nyou don't actually see it.\n\n217\n00:10:41.010 --> 00:10:44.660\nIt's working on the background processes,\nwe don't login into it,\n\n218\n00:10:44.660 --> 00:10:46.130\nwe're not interacting with it.\n\n219\n00:10:46.130 --> 00:10:48.930\nBut it is running commands and\nit is doing things.\n\n220\n00:10:48.930 --> 00:10:52.085\nLet's say,\nnon-interactive non-login shell.\n\n221\n00:10:52.085 --> 00:10:54.720\nAnd then we have the final con,\nwhich is probably even though what\n\n222\n00:10:54.720 --> 00:10:58.400\nyou see here on my screen is fairly\nnormal, especially in server environments.\n\n223\n00:10:58.400 --> 00:11:02.360\nProbably the more normal\nis the desktop environment.\n\n224\n00:11:02.360 --> 00:11:03.800\nI'll jump over to that real quick.\n\n225\n00:11:03.800 --> 00:11:04.810\nLet's see here.\n\n226\n00:11:04.810 --> 00:11:05.650\nSomething like this.\n\n227\n00:11:05.650 --> 00:11:06.960\nWe've got a nice GUI, desktop background.\n\n228\n00:11:06.960 --> 00:11:09.290\nI see icons there on\nthe bottom left-hand corner.\n\n229\n00:11:09.290 --> 00:11:10.590\nThis is a little more normal.\n\n230\n00:11:10.590 --> 00:11:11.680\nAgain, that's a graphical shell.\n\n231\n00:11:11.680 --> 00:11:17.090\nBut I can also run an interactive\nactive non-log in shell,\n\n232\n00:11:17.090 --> 00:11:21.040\nfrom here very, very simply and\nthis will differ from\n\n233\n00:11:21.040 --> 00:11:23.360\nwhatever version of Linux that\nyou're using or Unix as it were.\n\n234\n00:11:23.360 --> 00:11:25.820\nHow to get to something like this,\nbut basically you look for\n\n235\n00:11:25.820 --> 00:11:29.420\nthe search feature or you look for\nan icon that looks like a little\n\n236\n00:11:29.420 --> 00:11:33.280\nblack command prompt or a CLI prompt and\nyou launch that, it's looking for an icon.\n\n237\n00:11:33.280 --> 00:11:36.220\nHere if I just go into mine and\nI type in terminal,\n\n238\n00:11:36.220 --> 00:11:40.580\nthat's usually a good way to,\nto find an interactive, not login shell.\n\n239\n00:11:40.580 --> 00:11:42.770\nYou'll notice I have\na couple of them actually.\n\n240\n00:11:42.770 --> 00:11:44.480\nI have this console one and xterm.\n\n241\n00:11:44.480 --> 00:11:47.200\nXterm is available on just\nabout every Linux system.\n\n242\n00:11:47.200 --> 00:11:52.017\nSo if you, they can all have all these\ndifferent terminals that allows you,\n\n243\n00:11:52.017 --> 00:11:54.361\nare basically terminal emulators.\n\n244\n00:11:54.361 --> 00:11:58.323\nWhen we saw that interactive login\nshell before, that is a terminal.\n\n245\n00:11:58.323 --> 00:12:00.029\nIt is not emulating a terminal, it is,\n\n246\n00:12:00.029 --> 00:12:02.325\nIs a terminal that's giving\nyou a terminal prompt.\n\n247\n00:12:02.325 --> 00:12:05.874\nHere I'm already in a shell,\nso I've gotta, kinda,\n\n248\n00:12:05.874 --> 00:12:10.260\nemulate that output using one\nof these terminal emulators.\n\n249\n00:12:10.260 --> 00:12:12.620\nThat's basically what we're looking at.\n\n250\n00:12:12.620 --> 00:12:15.990\nAnd each of them have their own bells and\nwhistles, so if you get used to one and\n\n251\n00:12:15.990 --> 00:12:20.100\nit's not around, and you jump over to your\nfriend's system, they're running Linux,\n\n252\n00:12:20.100 --> 00:12:20.850\nthey're running Unix, and\n\n253\n00:12:20.850 --> 00:12:24.210\nyou don't find your terminal, you could\nbe at a little bit of a disadvantage.\n\n254\n00:12:24.210 --> 00:12:27.700\nSo it's good to use one that\nusually ubiquitous, but\n\n255\n00:12:27.700 --> 00:12:30.950\nconsole and xterm they're basically\nfound on just about every system.\n\n256\n00:12:30.950 --> 00:12:32.710\nAnd, I do like console a lot, but\n\n257\n00:12:32.710 --> 00:12:36.860\nxterm will do just about everything\nthat console does as well.\n\n258\n00:12:36.860 --> 00:12:40.420\nSo, if you hit that,\nyou'll notice I now have a terminal, and\n\n259\n00:12:40.420 --> 00:12:42.590\nI have a little more control over this.\n\n260\n00:12:42.590 --> 00:12:46.830\nI can make it a little wider if I want,\nI can use some hot keys, and\n\n261\n00:12:46.830 --> 00:12:50.230\nyou'll notice that my prompt is getting\nbigger and the font size there is Nice.\n\n262\n00:12:50.230 --> 00:12:53.440\nYou see I can throw commands at it.\n\n263\n00:12:53.440 --> 00:12:55.920\nI'm emulating that terminal\nthat I had with the login,\n\n264\n00:12:55.920 --> 00:12:57.670\nbut I didn't have to log in to it.\n\n265\n00:12:57.670 --> 00:12:59.020\nNotice it didn't ask me.\n\n266\n00:12:59.020 --> 00:12:59.540\nLog in to this.\n\n267\n00:12:59.540 --> 00:13:02.650\nI just clicked a button\nbecause I'm already logged in.\n\n268\n00:13:02.650 --> 00:13:04.950\nIt doesn't need to do that,\nit already has credentials.\n\n269\n00:13:04.950 --> 00:13:06.300\nIt can read that from the system files.\n\n270\n00:13:06.300 --> 00:13:10.090\nAnd when I hit the terminal emulator,\nit does all the work for me.\n\n271\n00:13:10.090 --> 00:13:12.410\nI don't have to do anything,\nand it shows me a screen.\n\n272\n00:13:12.410 --> 00:13:14.870\nI'm allowed to interact\nthrough that shell.\n\n273\n00:13:14.870 --> 00:13:18.720\nIt is running bash and\nget that terminal output.\n\n274\n00:13:18.720 --> 00:13:21.570\nSo there are things that I can\ndo like creating scripts but\n\n275\n00:13:21.570 --> 00:13:26.020\nI want to stay inside of a graphical\nenvironment I can still to that.\n\n276\n00:13:26.020 --> 00:13:28.900\nI don't have to sit at a black\nscreen with no internet access,\n\n277\n00:13:28.900 --> 00:13:32.990\nif I need to look something up I can still\nbring up my browser and get access to\n\n278\n00:13:32.990 --> 00:13:36.630\nthose types of resources that are out\nthere on the internet to help me out.\n\n279\n00:13:36.630 --> 00:13:39.030\nSo it's kind of the best of both worlds.\n\n280\n00:13:39.030 --> 00:13:42.970\nAnd again, it's the environment\nthat you need to be in,\n\n281\n00:13:42.970 --> 00:13:46.700\ndo I need to be stripped\ndown on high speed low drag?\n\n282\n00:13:46.700 --> 00:13:49.140\nI'm probably going to go with that server\n\n283\n00:13:49.140 --> 00:13:51.850\nstyle interactive login type prompt,\nright.\n\n284\n00:13:51.850 --> 00:13:55.710\nBut if I want to have a little more normal\ntype system where I'm doing graphical type\n\n285\n00:13:55.710 --> 00:13:57.620\nof work and I'm still working\nin the command line interface,\n\n286\n00:13:57.620 --> 00:14:01.630\nthat interactive non login terminal\nis probably the way I'm going to go.\n\n287\n00:14:01.630 --> 00:14:04.210\n>> Daniel, when we start taking\n\n288\n00:14:04.210 --> 00:14:07.140\na look at some of the\n>> Different types of things that\n\n289\n00:14:07.140 --> 00:14:09.610\nwe're talking about with\nthe command line interpreter.\n\n290\n00:14:09.610 --> 00:14:11.580\nUnderstanding that bash\nitself really is that.\n\n291\n00:14:11.580 --> 00:14:14.490\nIt allows us to be able to interact\nwith the operating system.\n\n292\n00:14:14.490 --> 00:14:17.450\nBe able to send commands to it or\nbe able to actually allow it to say,\n\n293\n00:14:17.450 --> 00:14:19.470\nhey, look, I need programs run.\n\n294\n00:14:19.470 --> 00:14:21.550\nAll that's really good, but\n\n295\n00:14:21.550 --> 00:14:24.500\nwhy in the world if we already have\nother types of shells out there.\n\n296\n00:14:24.500 --> 00:14:26.440\nWhy is bash so much better?\n\n297\n00:14:26.440 --> 00:14:28.180\nWhat's with the other shells that we have?\n\n298\n00:14:28.180 --> 00:14:29.060\n>> Yeah.\nThat's a really good\n\n299\n00:14:29.060 --> 00:14:30.090\nquestion that Ronny brings up.\n\n300\n00:14:30.090 --> 00:14:34.610\nIf there are so many other shells, and we\nare going to show you a few in a second.\n\n301\n00:14:34.610 --> 00:14:36.490\nWhy would we create that.\n\n302\n00:14:36.490 --> 00:14:38.030\nWell, it is all about,\n\n303\n00:14:38.030 --> 00:14:42.630\nyou got to remember that most the people\nthat run Linx they are tweekers, right?\n\n304\n00:14:42.630 --> 00:14:45.550\nThey are never satisfied\nwith just the way it is.\n\n305\n00:14:45.550 --> 00:14:48.100\nThey want to change it,\nwant to manuever it.\n\n306\n00:14:48.100 --> 00:14:49.600\nIt would be better if did this, right?\n\n307\n00:14:49.600 --> 00:14:54.250\nIt is kind of the mentality of the open\nsource community to be honest with you,\n\n308\n00:14:54.250 --> 00:14:56.860\nis if I could just, let's make it do this,\nlet me get in there and\n\n309\n00:14:56.860 --> 00:14:58.240\nsee if I can modify that.\n\n310\n00:14:58.240 --> 00:15:01.510\nWell you got to remember that's\nwhat Brian Fox was thinking.\n\n311\n00:15:01.510 --> 00:15:05.230\nHe was like, man the born shell is\nawesome, but if it just did something\n\n312\n00:15:05.230 --> 00:15:09.270\nlike this over here in this other shell,\nit would be even more awesome, right?\n\n313\n00:15:09.270 --> 00:15:12.590\nAnd man, if I could grab some of\nthe bits from this other shell as well,\n\n314\n00:15:12.590 --> 00:15:16.240\nincorporate that, it would be\neven more awesome, and obviously,\n\n315\n00:15:16.240 --> 00:15:20.210\nhe was on to something because he created\nthe born shell or the born again shell.\n\n316\n00:15:20.210 --> 00:15:21.860\nAnd it took off, right?\n\n317\n00:15:21.860 --> 00:15:26.680\nIt is almost ubiquitous throughout\nthe Linux and Unix systems,\n\n318\n00:15:26.680 --> 00:15:29.790\nthat's what you're going to\nfind is that BASH shell, and\n\n319\n00:15:29.790 --> 00:15:31.460\nthat's what most--that's\nthe whole purpose of it.\n\n320\n00:15:31.460 --> 00:15:33.670\nAnd that was the purpose\nof creating the BASH shell.\n\n321\n00:15:33.670 --> 00:15:35.860\nNow, does that mean that we\ncan't use the old systems?\n\n322\n00:15:35.860 --> 00:15:39.080\nNo, no, they are still available, and\nsometimes you even need to look out for\n\n323\n00:15:39.080 --> 00:15:42.420\na backwards compatibility,\ngotta look for compliance.\n\n324\n00:15:42.420 --> 00:15:46.240\nAnd when we get into the hardcore\nshell scripting, every now and\n\n325\n00:15:46.240 --> 00:15:47.750\nthen I'm gonna pop up with going,\ndon't forget.\n\n326\n00:15:47.750 --> 00:15:50.890\nThis isn't gonna be available if\nyou're not running a bash shell,\n\n327\n00:15:50.890 --> 00:15:53.870\nmight not be there for you to use as\na function when we're creating a script.\n\n328\n00:15:53.870 --> 00:15:57.840\nSo you gotta make sure that these scripts\nare gonna run on the bash environment.\n\n329\n00:15:57.840 --> 00:15:59.390\nThat's the kinda thing\nyou gotta look out for.\n\n330\n00:15:59.390 --> 00:16:02.080\nBut if we wanna play around\nwith other shells, we can.\n\n331\n00:16:02.080 --> 00:16:03.620\nIt's very, very simple to do.\n\n332\n00:16:03.620 --> 00:16:05.700\nLet's jump up and\ntake a look at my screen.\n\n333\n00:16:05.700 --> 00:16:08.790\nI've got a few of them laid out for\nus here in a diagram.\n\n334\n00:16:08.790 --> 00:16:13.720\nNotice I've got my lovely Bash shell\nappear, and then other shells,\n\n335\n00:16:13.720 --> 00:16:17.040\nthis is by far in no way\nan exhaust in list of shells.\n\n336\n00:16:17.040 --> 00:16:20.670\nThere are shells upon shells upon\nshells far as the eye can see plenty\n\n337\n00:16:20.670 --> 00:16:23.490\nof them to mess around with\nare they all installed on\n\n338\n00:16:23.490 --> 00:16:26.810\nevery system you're going to\nsit down at probably not right.\n\n339\n00:16:26.810 --> 00:16:31.200\nThese shells I'm showing you here its\na fairly good chance that these might\n\n340\n00:16:31.200 --> 00:16:36.800\nactually be installed on a standard Unix\nof Linux system that you sit down at and\n\n341\n00:16:36.800 --> 00:16:38.740\nyou're like, you know what?\n\n342\n00:16:38.740 --> 00:16:41.020\nI really like this function\nthat this shield does and\n\n343\n00:16:41.020 --> 00:16:44.610\nit's not supported in the Bourne shell so\nlet me jump over to that shell real quick.\n\n344\n00:16:44.610 --> 00:16:47.980\nSo, it is good to,\nespecially the type of work or\n\n345\n00:16:47.980 --> 00:16:50.140\nway you interact with Linux systems,\n\n346\n00:16:50.140 --> 00:16:53.600\nthis might be something that you want to\ninvest some time and effort into learning.\n\n347\n00:16:53.600 --> 00:16:57.090\nWhat are the other shells and\nhow can I utilize them in my job or\n\n348\n00:16:57.090 --> 00:17:01.200\nin the environment that I'm working in So\nlet's take a look at this.\n\n349\n00:17:01.200 --> 00:17:04.280\nObviously, we have the good\nold bourne shell and\n\n350\n00:17:04.280 --> 00:17:06.130\nthat is denoted by this lovely sh.\n\n351\n00:17:06.130 --> 00:17:08.890\nRight.\nNow, if you look at your system,\n\n352\n00:17:08.890 --> 00:17:14.840\nwe're gonna take us and take a look\nat this here in just a second here,\n\n353\n00:17:14.840 --> 00:17:20.550\nyou'll see that there is an sh shell built\ninto your computer, into your link system.\n\n354\n00:17:20.550 --> 00:17:22.820\nBut normally, on newer versions of Linux,\n\n355\n00:17:22.820 --> 00:17:25.710\nbasically left on the last ten years or\nso.\n\n356\n00:17:25.710 --> 00:17:30.600\nYour SH Executable is actually\na symbolic link to the BASH Shell.\n\n357\n00:17:30.600 --> 00:17:33.670\nSo they're kind of fooling\nyou into thinking, \" yeah.\n\n358\n00:17:33.670 --> 00:17:35.130\nYeah, man, that's that good old SH Shell.\n\n359\n00:17:35.130 --> 00:17:38.490\nThat's the good old\nBourne Shell.\" It's probably not.\n\n360\n00:17:38.490 --> 00:17:39.880\nIt's probably BASH itself.\n\n361\n00:17:39.880 --> 00:17:40.820\nSo just be aware of that.\n\n362\n00:17:40.820 --> 00:17:43.860\nNot that the Bourne Shell\nmight not be on there,\n\n363\n00:17:43.860 --> 00:17:48.720\nit's just probably most people think,\n\" that's what I want.\n\n364\n00:17:48.720 --> 00:17:51.840\nI want to do Because bash is so popular.\n\n365\n00:17:51.840 --> 00:17:55.200\nWe have the C shell, actually,\nlet's jump over to my computer here, and\n\n366\n00:17:55.200 --> 00:17:56.400\nlet's take a look.\n\n367\n00:17:56.400 --> 00:17:59.150\nHow do I change to the other shells,\nhow do I get there?\n\n368\n00:17:59.150 --> 00:18:00.520\nDo I have to run something?\n\n369\n00:18:00.520 --> 00:18:02.460\nYep, that's exactly what you gotta do.\n\n370\n00:18:02.460 --> 00:18:04.490\nYou're basically running\nthat executable file, and\n\n371\n00:18:04.490 --> 00:18:08.390\nit will launch into your shell\nthat you already have open.\n\n372\n00:18:08.390 --> 00:18:12.490\nRight now, that terminal emulator\nsoftware is saying, do bash stuff.\n\n373\n00:18:12.490 --> 00:18:15.060\nThat's kind of what it's thinking about.\n\n374\n00:18:15.060 --> 00:18:16.140\nNot right now.\n\n375\n00:18:16.140 --> 00:18:19.610\nThat's the parameters\nthat are built into it.\n\n376\n00:18:19.610 --> 00:18:20.830\nI don't wanna do bash shell.\n\n377\n00:18:20.830 --> 00:18:22.410\nI wanna do other stuff.\n\n378\n00:18:22.410 --> 00:18:25.020\nI need to tell it what shell\nI want it to do from, right?\n\n379\n00:18:25.020 --> 00:18:28.260\nSo if I just type in sh and hit Enter,\nyou'll notice that my prompt has changed\n\n380\n00:18:28.260 --> 00:18:33.507\nand even though that that's so,\nthis is still bash actually, so.\n\n381\n00:18:33.507 --> 00:18:35.840\n>> [LAUGH]\n>> Because they're doing that little freak\n\n382\n00:18:35.840 --> 00:18:36.640\nout there in the back.\n\n383\n00:18:36.640 --> 00:18:39.490\nBut what it's probably doing is throwing\nsome commands at it that make it\n\n384\n00:18:39.490 --> 00:18:43.790\nshell compliant with With born shell and\nwe'll probably strip away, but\n\n385\n00:18:43.790 --> 00:18:48.660\nit's still the bash shell, it's throwing\na bash environmental variable at it,\n\n386\n00:18:48.660 --> 00:18:50.380\nsaying, this is the shell we're using,\n\n387\n00:18:50.380 --> 00:18:54.860\nwe're just kind of removing the ability to\nuse all the enhanced features from shell.\n\n388\n00:18:54.860 --> 00:18:56.590\nThat's probably what's going on.\n\n389\n00:18:56.590 --> 00:18:59.270\nBut you'll see here that\nmy prompt has changed.\n\n390\n00:18:59.270 --> 00:19:02.330\nIt's no longer giving me all this\ncool stuff because bash, each one\n\n391\n00:19:02.330 --> 00:19:05.950\nof these things usually has their own set\nof scripts that runs when they When they\n\n392\n00:19:05.950 --> 00:19:09.050\nstart and it looks to the scripts to\nsee how the environment should be.\n\n393\n00:19:09.050 --> 00:19:11.100\nThat's how it knows how to operate and\n\n394\n00:19:11.100 --> 00:19:14.360\nthat's why my little\nprompt there has changed.\n\n395\n00:19:14.360 --> 00:19:16.930\nIt's getting a different\nset of instructions\n\n396\n00:19:16.930 --> 00:19:19.230\nfrom when I'm running the Bourne shell,\nright?\n\n397\n00:19:19.230 --> 00:19:23.980\nSo that's what it does and basically\nwe're going to see, for all intents and\n\n398\n00:19:23.980 --> 00:19:28.370\npurposes, unless you were really diving\ninto some good scripting stuff, just\n\n399\n00:19:28.370 --> 00:19:31.730\neveryday, run of the mill, running through\nThrough the command prompts here or\n\n400\n00:19:31.730 --> 00:19:32.660\nthe command line interface.\n\n401\n00:19:32.660 --> 00:19:34.970\nYou're not gonna see a whole\nlot of difference in this.\n\n402\n00:19:34.970 --> 00:19:36.900\nHere and there, differences will pop up.\n\n403\n00:19:36.900 --> 00:19:41.750\nYou'll probably see it more along\nthe lines of limitation, than you do.\n\n404\n00:19:41.750 --> 00:19:42.430\nThis does this but\n\n405\n00:19:42.430 --> 00:19:46.400\nthis doesn't, the Bourne shell will\nbe more limited than the Bask shell.\n\n406\n00:19:46.400 --> 00:19:50.660\nThat's why it's normally what you run\nin but if I want to get out of this,\n\n407\n00:19:50.660 --> 00:19:53.320\nI'm done,\nI'm sick of running the Bourne shell here.\n\n408\n00:19:53.320 --> 00:19:57.580\nI just type in exit and exit, Zip me out\nof there and I'm back to my bash shell.\n\n409\n00:19:57.580 --> 00:19:59.230\nIf I wanted to close this shell as well,\n\n410\n00:19:59.230 --> 00:20:02.560\nI would type in exit and\nclose the screen, and we'd be done.\n\n411\n00:20:02.560 --> 00:20:06.080\nSo let's jump back over to see\nwhat else we have available.\n\n412\n00:20:06.080 --> 00:20:06.780\nC shell, right?\n\n413\n00:20:06.780 --> 00:20:10.740\nNot the S-E-A shell that Ronnie was\ntalking about earlier, stick your ear in\n\n414\n00:20:10.740 --> 00:20:16.230\nand hear the ocean, no we're talking\nC as in the C programming language.\n\n415\n00:20:16.230 --> 00:20:19.440\nNow this is one of the shells that\nRyan Fox took a look at and said, \"Man,\n\n416\n00:20:19.440 --> 00:20:22.660\nit's got a lot of good\" Features\nthat I think would be good for\n\n417\n00:20:22.660 --> 00:20:27.600\nthe bash shell that I'm creating so\nI'm gonna kind of embezzle from the way\n\n418\n00:20:27.600 --> 00:20:31.710\nC does a lot of things and\nuse those functions inside of bash.\n\n419\n00:20:31.710 --> 00:20:34.340\nI'm gonna kinda merge them together.\n\n420\n00:20:34.340 --> 00:20:36.660\nSo I'm taking bourne I'm taking C and\n\n421\n00:20:36.660 --> 00:20:39.770\nthe C shell basically is\nthe C programming language.\n\n422\n00:20:39.770 --> 00:20:43.380\nSo instead of you can basically\ntake any kind of C functionality.\n\n423\n00:20:43.380 --> 00:20:45.060\nSay you need to print to the screen.\n\n424\n00:20:45.060 --> 00:20:49.860\nOr if you needed to create a variable or\nwrite scripts or anything like that.\n\n425\n00:20:49.860 --> 00:20:54.340\nYou could use C as a programming langauge\nand that shell itself will be able to\n\n426\n00:20:56.270 --> 00:20:58.750\ninterpret those commands and\nrun them as you see fit.\n\n427\n00:20:58.750 --> 00:21:02.780\nSo again, all we have to do is come\nover here to our screen and type in CSH.\n\n428\n00:21:02.780 --> 00:21:03.830\nThat's our C shell.\n\n429\n00:21:03.830 --> 00:21:05.050\nHit return.\nNot\n\n430\n00:21:05.050 --> 00:21:06.470\nseeing a whole lot of difference there.\n\n431\n00:21:06.470 --> 00:21:06.995\nRight?\n>> [LAUGH]\n\n432\n00:21:06.995 --> 00:21:08.340\n>> Now I didn't get any errors so\n\n433\n00:21:08.340 --> 00:21:10.020\nthat lets me believe that that is.\n\n434\n00:21:10.020 --> 00:21:12.180\nIs the shell I'm running,\nand I'm good to go.\n\n435\n00:21:12.180 --> 00:21:15.480\nIf it didn't exist on my system,\nit would probably throw an error at me,\n\n436\n00:21:15.480 --> 00:21:18.050\nletting me know CHS is\nnot a valid program or\n\n437\n00:21:18.050 --> 00:21:21.010\nfile or folder on the system,\nplease try something else.\n\n438\n00:21:21.010 --> 00:21:25.350\nRight?\nSo, now, I can do an exit, and you'll\n\n439\n00:21:25.350 --> 00:21:27.950\nnotice, I was in the C shell, because if I\nwas to have exited and I was still in my\n\n440\n00:21:27.950 --> 00:21:32.280\nBASH shell, this would have closed the\nterminal emulator down and we'd be out.\n\n441\n00:21:32.280 --> 00:21:33.940\nSo, C shell's up and running, so\n\n442\n00:21:33.940 --> 00:21:36.700\nif you're a C programmer,\nYou need to work with Bash.\n\n443\n00:21:36.700 --> 00:21:40.160\nYou can, kinda, dip into both waters,\nhere, it'll be very, very helpful.\n\n444\n00:21:40.160 --> 00:21:42.560\nCuz you can just jump into the CShell, and\n\n445\n00:21:42.560 --> 00:21:47.370\ndo a lot of things that you\nalready know you can do, until you\n\n446\n00:21:47.370 --> 00:21:52.100\nget more familiar with the Bash way of\ndoing things, which it does change.\n\n447\n00:21:52.100 --> 00:21:54.310\nSo, let's jump back, and\nsee what else we have.\n\n448\n00:21:54.310 --> 00:21:57.080\nTCSH, which is basically a more\nenhanced version of the CShell.\n\n449\n00:21:57.080 --> 00:22:01.830\nAgain, people are tweakers when it comes\nto Open Source Linux Users Community.\n\n450\n00:22:01.830 --> 00:22:03.520\nThey said, hey, we can improve on this.\n\n451\n00:22:03.520 --> 00:22:04.070\nWe can make it better.\n\n452\n00:22:04.070 --> 00:22:06.770\nWe can build it faster, stronger, tougher.\n\n453\n00:22:06.770 --> 00:22:08.330\nAnd that's what they did.\n\n454\n00:22:08.330 --> 00:22:09.780\nSo, same kind of idea.\n\n455\n00:22:09.780 --> 00:22:11.240\nThe KornShell, if I'm not mistaken,\n\n456\n00:22:11.240 --> 00:22:16.590\nis also another variation of the C Shell\ngiving you more functionality.\n\n457\n00:22:16.590 --> 00:22:18.540\nAgain, it's all in the way\nin which it does things.\n\n458\n00:22:19.820 --> 00:22:24.080\nThe Dash Shell, on the other hand,\nis obviously a weird name.\n\n459\n00:22:24.080 --> 00:22:26.740\nIt's Debian Al Almquist Shell,\n[LAUGH] Gesundheit, right?\n\n460\n00:22:26.740 --> 00:22:32.520\nIt's a strange a name and really it comes\nfrom the Ash A-S-H, the Almquist Shell,\n\n461\n00:22:32.520 --> 00:22:36.130\nDebian kinda hooked on to that and\nmade their own version of that.\n\n462\n00:22:36.130 --> 00:22:39.430\nThat actually has become quite popular.\n\n463\n00:22:39.430 --> 00:22:43.920\nIt's a very fast, it's a very stream lined\nversion of BASH is basically what it is.\n\n464\n00:22:43.920 --> 00:22:46.870\nIt's trying to make it\nas fast as possible.\n\n465\n00:22:46.870 --> 00:22:51.760\nA lot of people like Dash dash that\nour bash users came from bash and\n\n466\n00:22:51.760 --> 00:22:56.160\nthey've migrated over to dash and\nthey like the speed of it and\n\n467\n00:22:56.160 --> 00:23:00.680\nthey need it fast, they need it dirty,\ndash is the way to go.\n\n468\n00:23:00.680 --> 00:23:02.500\nThat doesn't mean it's\nalways the way to go.\n\n469\n00:23:02.500 --> 00:23:06.156\nFor your standard user probably Probably,\nBASH is gonna be just fine.\n\n470\n00:23:06.156 --> 00:23:10.165\nAs you become higher and higher and\nhigher and you get better and better and\n\n471\n00:23:10.165 --> 00:23:13.658\nbetter at using the Shells and\ncreating scripts that do things,\n\n472\n00:23:13.658 --> 00:23:15.427\nBASH might be a way to go for you.\n\n473\n00:23:15.427 --> 00:23:20.872\nYou might need that speed for A script\nthat you're running, to give you better\n\n474\n00:23:20.872 --> 00:23:26.665\nperformance, make things work a little\nmore, like I said, better performance.\n\n475\n00:23:26.665 --> 00:23:29.515\nLet's see what else we have, a ZSH,\njust another shell available.\n\n476\n00:23:29.515 --> 00:23:33.445\nThey have different subsets and ways to\ndo it again, all you have to do is dash,\n\n477\n00:23:33.445 --> 00:23:36.865\ndash is obviously not on the system,\nthat would be the error we would\n\n478\n00:23:36.865 --> 00:23:40.445\nget if it was not on there, let's see,\nZSH is a command not found.\n\n479\n00:23:40.445 --> 00:23:44.219\nMost of these shells are found\nin The bin directory, so\n\n480\n00:23:44.219 --> 00:23:49.798\nif you migrate to the bin directory which\nis gonna have a ton of executable files,\n\n481\n00:23:49.798 --> 00:23:52.443\nyou'll be able to find them in there.\n\n482\n00:23:52.443 --> 00:23:55.510\nBut, we have sea shell,\nwe have good ol shell,\n\n483\n00:23:55.510 --> 00:24:00.265\ndash in here and if you want one you\ncould just download it and install it and\n\n484\n00:24:00.265 --> 00:24:04.075\nyou then have the ability to\nhave that on your system.\n\n485\n00:24:04.075 --> 00:24:05.875\nNo too difficult here.\n\n486\n00:24:05.875 --> 00:24:09.235\nThe last one we have is\nrestricted Restricted BASH.\n\n487\n00:24:09.235 --> 00:24:11.565\nAnd you're thinking okay, well what?\n\n488\n00:24:11.565 --> 00:24:12.925\nBasically, self-explanatory.\n\n489\n00:24:12.925 --> 00:24:15.235\nThis is not a difficult\nconcept to understand at all.\n\n490\n00:24:15.235 --> 00:24:19.935\nIt very much restricts the user's ability\nto do things inside the shell environment.\n\n491\n00:24:19.935 --> 00:24:21.965\nWell, what do I mean by that?\n\n492\n00:24:21.965 --> 00:24:23.345\nOkay, let's take a look here.\n\n493\n00:24:23.345 --> 00:24:26.495\nI can get into there one of two ways.\n\n494\n00:24:26.495 --> 00:24:30.909\nSome systems support one way,\nsome systems support the other,\n\n495\n00:24:30.909 --> 00:24:33.675\nsome systems Support both.\n\n496\n00:24:33.675 --> 00:24:36.445\nSo learn one way, but if it doesn't work,\nso you need to learn both\n\n497\n00:24:36.445 --> 00:24:40.415\nways just in case you're on a system\ndoesn't port one to the other.\n\n498\n00:24:40.415 --> 00:24:42.635\nOne way you can do is type in bash dash r.\n\n499\n00:24:42.635 --> 00:24:44.375\nHit return.\nYou'll notice again,\n\n500\n00:24:44.375 --> 00:24:46.785\nnothing really looks like it changed.\n\n501\n00:24:46.785 --> 00:24:48.285\nLet me show you a little bit of this.\n\n502\n00:24:48.285 --> 00:24:51.625\nSo I'm gonna use CD which is this\nchange directory command and\n\n503\n00:24:51.625 --> 00:24:55.185\nI'm just gonna try to move up one level.\n\n504\n00:24:55.185 --> 00:24:56.435\nI'm restricted.\nCan't do that.\n\n505\n00:24:56.435 --> 00:24:58.215\nOkay, well if I wanna\nmake a directory here.\n\n506\n00:24:58.215 --> 00:25:00.545\nDIR, we'll call that fun.\n\n507\n00:25:00.545 --> 00:25:03.355\nThat allowed me to make that good.\n\n508\n00:25:03.355 --> 00:25:04.845\nOkay, good I can work inside this shell.\n\n509\n00:25:04.845 --> 00:25:07.425\nThat's what your going to\nstart seeing is allot of stuff\n\n510\n00:25:07.425 --> 00:25:09.415\nyou're not going to be able\nto remove directories.\n\n511\n00:25:09.415 --> 00:25:12.244\nYou're not going to be\nable to remove files.\n\n512\n00:25:12.244 --> 00:25:16.035\nYou're not going to be able\nto do allot of things.\n\n513\n00:25:16.035 --> 00:25:18.985\nIf I exit out of here and\nwe take a look at the man bash.\n\n514\n00:25:18.985 --> 00:25:22.465\nThis is the manual page for\nthe bash program it self.\n\n515\n00:25:22.465 --> 00:25:25.225\nAnd I hit this and\nwe start looking through here.\n\n516\n00:25:25.225 --> 00:25:30.035\nOnce we find the restricted area,\nyou'll see here there's the -r option.\n\n517\n00:25:30.035 --> 00:25:34.465\nYou can also do rbash on a lot of systems,\nthat's another way of getting in there.\n\n518\n00:25:34.465 --> 00:25:37.695\nSo if bash -r doesn't work,\nwhich it almost invariably should,\n\n519\n00:25:37.695 --> 00:25:39.295\nyou can also use rbash,\nwhich lets it know.\n\n520\n00:25:39.295 --> 00:25:45.067\nIt's basically, an alias for\nbash -r, lets you get into there.\n\n521\n00:25:45.067 --> 00:25:51.185\nAnd this is a huge, huge wow,\nokay so we'll just do a little for\n\n522\n00:25:53.625 --> 00:25:59.925\na restricted and\nlet's see if we can find that real quick.\n\n523\n00:25:59.925 --> 00:26:00.885\nOne more, here we go.\n\n524\n00:26:00.885 --> 00:26:03.925\nHere's what you can and\ncannot do in the restricted shell,\n\n525\n00:26:03.925 --> 00:26:06.685\nso you've got to be aware of some of\nthese things if you're moving into\n\n526\n00:26:06.685 --> 00:26:09.315\nthe restricted shell,\nwhat you can and cannot do.\n\n527\n00:26:09.315 --> 00:26:11.035\nSo, we see here that changing directories,\n\n528\n00:26:11.035 --> 00:26:13.265\nsetting or unsetting boundaries,\nYou're gonna understand what.\n\n529\n00:26:13.265 --> 00:26:16.355\nIf you don't get what's going on here,\nthat's quite all right.\n\n530\n00:26:16.355 --> 00:26:18.665\nWe're gonna get into that later,\nbut right now,\n\n531\n00:26:18.665 --> 00:26:22.915\nI just want you to be aware that if you're\nhaving trouble doing some of these things.\n\n532\n00:26:22.915 --> 00:26:25.445\nAnd maybe you're logged into a system\nthat you've been given access to.\n\n533\n00:26:25.445 --> 00:26:27.195\nMaybe you're in a restricted shell.\n\n534\n00:26:27.195 --> 00:26:28.905\nThat's what they default you to do,\n\n535\n00:26:28.905 --> 00:26:33.355\nsince you can't do these functions\nbecause it can cause security issues.\n\n536\n00:26:33.355 --> 00:26:34.165\nBut if you just wanna,\n\n537\n00:26:34.165 --> 00:26:37.825\nmaybe you have users of your own and\nyou wanna restrict them.\n\n538\n00:26:37.825 --> 00:26:41.385\nYou can make their default login\ngo to the RBASH or BASH-R,\n\n539\n00:26:41.385 --> 00:26:44.595\ngiving them these types\nof non-functionality.\n\n540\n00:26:44.595 --> 00:26:48.525\nYou'll notice that specifying\ncommands with a slash on it,\n\n541\n00:26:48.525 --> 00:26:50.395\ngiving me all sorts of\ndifferent options here.\n\n542\n00:26:50.395 --> 00:26:54.955\nA lot of stuff built into\nwhat you can't do when it\n\n543\n00:26:54.955 --> 00:26:58.523\ncomes to the restrictive BASH shell.\n\n544\n00:26:58.523 --> 00:27:00.961\nLet me go ahead and quit out of there.\n\n545\n00:27:00.961 --> 00:27:05.395\n>> Now Daniel You had mentioned earlier\nthat the very fact is bash is maybe\n\n546\n00:27:05.395 --> 00:27:10.807\na programming language, so are we really\ntalking about just programming language,\n\n547\n00:27:10.807 --> 00:27:12.325\nor is it more than that?\n\n548\n00:27:12.325 --> 00:27:13.915\n>> Yeah,\nit is a programming language, okay.\n\n549\n00:27:13.915 --> 00:27:18.015\nBash does do programming, that is\nsomething I want to make very, very clear.\n\n550\n00:27:18.015 --> 00:27:23.425\nIt's not a compiled programming\nlanguage like something like C, right.\n\n551\n00:27:23.425 --> 00:27:26.685\nC or C++ or things like that,\nthey are compiled languages,\n\n552\n00:27:26.685 --> 00:27:30.205\nyou create Create a file\nit has all the different,\n\n553\n00:27:30.205 --> 00:27:34.155\nit's a program you create a program with\nall the commands that are built into it.\n\n554\n00:27:34.155 --> 00:27:38.765\nAnd then you compile that program and\nthen you run an executable so\n\n555\n00:27:38.765 --> 00:27:40.235\nit's a compiled program.\n\n556\n00:27:40.235 --> 00:27:45.695\nThat's when you see a dot exc in a Windows\nenvironment that's a compiled program.\n\n557\n00:27:45.695 --> 00:27:49.365\nIf I run batch it is a complied program\nas well any time you try to look at\n\n558\n00:27:49.365 --> 00:27:53.015\none of these files you get just\na bunch of garbage, Garbage, it's\n\n559\n00:27:53.015 --> 00:27:55.695\nbecause it's not interpreting it correctly\nbecause it is a compiled program.\n\n560\n00:27:55.695 --> 00:27:58.935\nSo they'll let you know,\nthis is an actual programming,\n\n561\n00:27:58.935 --> 00:28:00.385\nlike high level programming language.\n\n562\n00:28:00.385 --> 00:28:03.075\nWhereas, Bash,\neven though it is a programming language,\n\n563\n00:28:03.075 --> 00:28:06.475\nit is an interpreted programming language.\n\n564\n00:28:06.475 --> 00:28:07.855\nIt is a subset, right?\n\n565\n00:28:07.855 --> 00:28:09.195\nIt doesn't need to be compiled.\n\n566\n00:28:09.195 --> 00:28:12.735\nIt interprets commands, and functions,\nand everything that you throw at it,\n\n567\n00:28:12.735 --> 00:28:16.635\nline by line, starting from the top and\nworking it's way down to the bottom.\n\n568\n00:28:16.635 --> 00:28:19.645\nAnd it attempts to do everything\nthat you ask it to do.\n\n569\n00:28:19.645 --> 00:28:21.105\nThat's why it so\n\n570\n00:28:21.105 --> 00:28:25.965\ngreat when it comes to scripting, cuz\nthat's exactly what we want scripts to do.\n\n571\n00:28:25.965 --> 00:28:27.595\nWe want them to do exactly\nwhat we tell them.\n\n572\n00:28:27.595 --> 00:28:31.425\nRun this command, now run this command,\nnow do this, now erase these files,\n\n573\n00:28:31.425 --> 00:28:33.105\nnow create this directory.\n\n574\n00:28:33.105 --> 00:28:35.415\nWhatever it is we need,\nthat's why bash is so\n\n575\n00:28:35.415 --> 00:28:40.235\ngreat, cuz that's exactly what it does,\nwe're scripting.\n\n576\n00:28:40.235 --> 00:28:42.045\nSo even though scripting\nisn't programming proper,\n\n577\n00:28:42.045 --> 00:28:46.015\nit is a ton Type of programming, it's\njust an interpretive type of programming.\n\n578\n00:28:46.015 --> 00:28:48.695\nSo we are going to have all\nthe types of functionality,\n\n579\n00:28:48.695 --> 00:28:51.925\nat least most of them anyway,\nthat compile program R.\n\n580\n00:28:51.925 --> 00:28:54.935\nWe're gonna be able to run conditional\nstatements, we're gonna be able to have it\n\n581\n00:28:54.935 --> 00:28:58.645\nprint to the screen or gonna have it be\nable to create and delete things, right?\n\n582\n00:28:58.645 --> 00:29:03.075\nSo we're gonna have a lot of use\njust like any standard programming,\n\n583\n00:29:03.075 --> 00:29:06.865\nwe're gonna have if thens,\nyou name it, loops, lots of fun stuff.\n\n584\n00:29:06.865 --> 00:29:09.285\nIt's gonna be Be a good\ntime once we get into that.\n\n585\n00:29:09.285 --> 00:29:12.605\nSo that is what we mean when we say\nit is a programming language and\n\n586\n00:29:12.605 --> 00:29:13.490\na scripting language.\n\n587\n00:29:13.490 --> 00:29:16.345\n>> [LAUGH] Now Daniel,\nI understand one other thing here.\n\n588\n00:29:16.345 --> 00:29:18.115\nThat bash can do math.\n\n589\n00:29:18.115 --> 00:29:22.155\nWhy in the world would\nwe want bash to do math?\n\n590\n00:29:22.155 --> 00:29:23.525\nCuz I don't like to do math.\n\n591\n00:29:23.525 --> 00:29:24.105\n>> Yeah, I hate math.\n>> [LAUGH]\n\n592\n00:29:24.105 --> 00:29:25.765\n>> Math and me do not get along,\n\n593\n00:29:25.765 --> 00:29:28.595\njust about whatsoever.\n\n594\n00:29:28.595 --> 00:29:29.955\nWe're not friends.\nWe're not vibing.\n\n595\n00:29:29.955 --> 00:29:33.265\nBut why does bash need to do new math.\n\n596\n00:29:33.265 --> 00:29:38.535\nWell, if you think about it we\ntalked about bashing a program which\n\n597\n00:29:38.535 --> 00:29:41.055\nprogramming and math are kind\nof married to each other, okay.\n\n598\n00:29:41.055 --> 00:29:45.485\nSo that's why it's important\nthe fact that it can to arithmetic.\n\n599\n00:29:45.485 --> 00:29:48.955\nNow can it search for oil and\ndo complex arithmetic problems?\n\n600\n00:29:48.955 --> 00:29:51.005\nNo, I don't think it can anyway\nnot to my understanding.\n\n601\n00:29:51.005 --> 00:29:53.175\nThere's some pretty\nclever folks out there.\n\n602\n00:29:53.175 --> 00:29:57.435\nProbably make it do more than it was\never intended to do but on the standard.\n\n603\n00:29:57.435 --> 00:29:58.785\nNo, it's not that advanced.\n\n604\n00:29:58.785 --> 00:30:02.855\nWe can do some, some standard mathematic\noperations and that can come in handy\n\n605\n00:30:02.855 --> 00:30:06.115\nwhen you're writing scripts, and you're\nthinking, why would that come in handy?\n\n606\n00:30:06.115 --> 00:30:07.685\nWell, think about it.\n\n607\n00:30:07.685 --> 00:30:11.985\nI've got a file that's\nten kilobytes in size for\n\n608\n00:30:11.985 --> 00:30:16.335\nthe sake of an argument, and\nit's growing by two kilobytes everyday,\n\n609\n00:30:16.335 --> 00:30:20.395\nand I want it to stop growing after or\ndelete it after it becomes so big.\n\n610\n00:30:20.395 --> 00:30:23.605\nWell, I need to put in a math\noperation that lets it know once this\n\n611\n00:30:23.605 --> 00:30:25.635\nfile becomes x large,\ndo this command to that file.\n\n612\n00:30:25.635 --> 00:30:30.565\nSo working with math is something that\nyou will tend to do, plus they're really\n\n613\n00:30:30.565 --> 00:30:35.695\ngreat for, it's good for showing you how\nsome of the looping function will work and\n\n614\n00:30:35.695 --> 00:30:39.215\nsome of the statements, conditional\nstatements we're gonna work with.\n\n615\n00:30:39.215 --> 00:30:42.775\nIt's really good for that because,\nwell, adding numbers and\n\n616\n00:30:42.775 --> 00:30:47.535\ngenerating output until something is\ndone or until you reach a certain value\n\n617\n00:30:47.535 --> 00:30:50.485\nIs gonna be what we're looking for,\nso it does do math.\n\n618\n00:30:50.485 --> 00:30:53.655\nIt has a couple of ways\nin which we can do it.\n\n619\n00:30:53.655 --> 00:30:56.525\nWe're gonna check that out in\nan episode that's gonna be\n\n620\n00:30:56.525 --> 00:30:58.485\nall about using arithmetic\nin the Bash shell.\n\n621\n00:30:58.485 --> 00:31:02.425\nSo be prepared for that, but\njust right now just know it can do math.\n\n622\n00:31:02.425 --> 00:31:05.095\nYou can add five and five and\nit will give you ten.\n\n623\n00:31:05.095 --> 00:31:07.700\nAnd you can make yourself a calculator.\n\n624\n00:31:07.700 --> 00:31:10.335\n>> [LAUGH] All right,\nnow in this episode then,\n\n625\n00:31:10.335 --> 00:31:13.325\nwhat we took a look at was fairly simple\n>> Simple right?\n\n626\n00:31:13.325 --> 00:31:17.515\nWe want to understand that Bash itself\nis going to be the main shell that\n\n627\n00:31:17.515 --> 00:31:20.915\nwe generally find ourselves in with most\nbasic installs whether we're talking\n\n628\n00:31:20.915 --> 00:31:23.665\nabout Unix or\neven Lynx type of systems and this is\n\n629\n00:31:23.665 --> 00:31:26.745\nactually the command line interperature\nthat we're going to be dealing with.\n\n630\n00:31:26.745 --> 00:31:28.975\nNow does that mean that it's the only one?\n\n631\n00:31:28.975 --> 00:31:30.695\nObviously not,\nDaniel showed us many different one's\n\n632\n00:31:30.695 --> 00:31:32.105\nthat we can get access into.\n\n633\n00:31:32.105 --> 00:31:36.805\nRemember that the born again shell is\nreally a combination it actually takes\n\n634\n00:31:36.805 --> 00:31:39.075\nsome of the features\n>> From all of those and\n\n635\n00:31:39.075 --> 00:31:44.525\ntries to combine you into one and\ngive you, well, some of those features\n\n636\n00:31:44.525 --> 00:31:49.085\nwithout you having to switch between every\ncommand line shell that's also out there.\n\n637\n00:31:49.085 --> 00:31:53.355\nWe'll also talk about it in terms of it\nbeing also a scripting language as well as\n\n638\n00:31:53.355 --> 00:31:55.795\na programming language as well,\nor interface, I should say.\n\n639\n00:31:55.795 --> 00:31:57.375\nAnd it's something that we\nwant to understand too.\n\n640\n00:31:57.375 --> 00:32:01.185\nSo either way, right, that we are covered\nin everything that we're doing.\n\n641\n00:32:01.185 --> 00:32:02.465\nAnd then, well it can also do math.\n\n642\n00:32:02.465 --> 00:32:05.265\n>> Because it helps us out,\nespecially in the programming,\n\n643\n00:32:05.265 --> 00:32:08.895\nthe idea of being able to do iterations\nand loops and make mature files and\n\n644\n00:32:08.895 --> 00:32:12.085\nactually hit so big, they get\ntransferred somewhere else or deleted,\n\n645\n00:32:12.085 --> 00:32:15.595\nwhatever it might be, this is the language\nthat we are gonna be working in.\n\n646\n00:32:15.595 --> 00:32:16.245\nAnd the majority of us,\n\n647\n00:32:16.245 --> 00:32:19.035\nwhat Daniel mentioned is, as we go into\nthe server administration systems, well,\n\n648\n00:32:19.035 --> 00:32:22.315\nknowing at least a little bit of\nhow this is going to work, and\n\n649\n00:32:22.315 --> 00:32:25.225\nDaniel is actually going to\ntake us through a lot of it,\n\n650\n00:32:25.225 --> 00:32:29.975\nand we become more More familiar and\nmore comfortable with that language.\n\n651\n00:32:29.975 --> 00:32:34.445\nWell that's what we hope to do as Linux\nadministrators to become more proficient\n\n652\n00:32:34.445 --> 00:32:37.845\nat it, become very comfortable in what\nwe see and not just get scared and\n\n653\n00:32:37.845 --> 00:32:39.685\ngo, that's some type of command.\n\n654\n00:32:39.685 --> 00:32:40.595\nLet me avoid it.\n\n655\n00:32:40.595 --> 00:32:42.065\nWell we wanna actually be better at it,\n\n656\n00:32:42.065 --> 00:32:46.145\nso we're gonna actually spend the time to\ndo that in our upcoming episodes as well.\n\n657\n00:32:46.145 --> 00:32:48.995\nSo Daniel, any parting words before\nwe get started on a gigantic\n\n658\n00:32:48.995 --> 00:32:49.965\nseries of a lot of fun?\n\n659\n00:32:49.965 --> 00:32:50.915\n>> It is a lot of fun.\n\n660\n00:32:50.915 --> 00:32:54.475\nYou're gonna have a great time I'm\nplaying around with the BASH environment,\n\n661\n00:32:54.475 --> 00:32:55.815\ncreating scripts.\n\n662\n00:32:55.815 --> 00:33:01.665\nHours of entertainment and enjoyment\nto be able to create something and\n\n663\n00:33:01.665 --> 00:33:04.475\nhave it do exactly what you want it to do.\n\n664\n00:33:04.475 --> 00:33:06.675\nIt gives you a sense of fulfillment and\nenjoyment.\n\n665\n00:33:06.675 --> 00:33:07.975\nBut that being said it is a bear.\n\n666\n00:33:07.975 --> 00:33:09.135\nI'm not gonna lie to you.\n\n667\n00:33:09.135 --> 00:33:10.255\nI'm not gonna sugarcoat it.\n\n668\n00:33:10.255 --> 00:33:12.385\nNot gonna put the kid gloves on.\n\n669\n00:33:12.385 --> 00:33:16.815\nI'm gonna let you know there is a lot of\ninformation when it comes to the BASH\n\n670\n00:33:16.815 --> 00:33:20.755\ninterpreter itself and Working with it\nas a scripting programming language.\n\n671\n00:33:20.755 --> 00:33:22.385\nSo be prepared to take a lot of notes.\n\n672\n00:33:22.385 --> 00:33:26.915\nBe prepared to do a lot of reading, even\nthough we're doing a video content here.\n\n673\n00:33:26.915 --> 00:33:29.115\nLook at things like the Linux\ndocumentation project.\n\n674\n00:33:29.115 --> 00:33:31.195\nThey have great guides for using batch.\n\n675\n00:33:31.195 --> 00:33:33.665\nLooking at how to's,\nthings of that nature.\n\n676\n00:33:33.665 --> 00:33:34.895\nIt's basically a free book.\n\n677\n00:33:34.895 --> 00:33:38.475\nAlso basically a free book is\nthat manual page for batch.\n\n678\n00:33:38.475 --> 00:33:39.875\nRight.\nI did that man batch.\n\n679\n00:33:39.875 --> 00:33:43.285\nYou can also do info batch,\nwhich Which is probable a little,\n\n680\n00:33:43.285 --> 00:33:44.445\na little easier to read.\n\n681\n00:33:44.445 --> 00:33:48.005\nTo be honest with you, it's starting\nto become a little more prevalent than\n\n682\n00:33:48.005 --> 00:33:49.515\nthe old man pages, but\nlook through that thing.\n\n683\n00:33:49.515 --> 00:33:52.535\nIt is long and drawn out and very,\nvery dry, but the information\n\n684\n00:33:52.535 --> 00:33:57.685\nyou need to do what it is you're trying to\ndo is in there and even though it might be\n\n685\n00:33:57.685 --> 00:34:03.525\na little cryptic at times, if you stick\nwith an you play around with it, you'll\n\n686\n00:34:03.525 --> 00:34:07.475\nstart creating scripts in no time doing a\nlot of cool stuff that you want it to do.\n\n687\n00:34:07.475 --> 00:34:11.535\nAnd that's, just hang in there and\nyou will get it.\n\n688\n00:34:11.535 --> 00:34:13.885\n>> Alright.\nWell, thank you Daniel for showing us, and\n\n689\n00:34:13.885 --> 00:34:17.035\nhelping us at least get started\nin understanding what BASH is.\n\n690\n00:34:17.035 --> 00:34:19.965\nAnd that's a great place for\nus to go and end our episode today.\n\n691\n00:34:19.965 --> 00:34:24.305\nThank you also for watching Signing\noff for IT pro TV I'm Ronnie Wong.\n\n692\n00:34:24.305 --> 00:34:25.599\n>> And I'm Daniel Lowrie.\n\n693\n00:34:25.599 --> 00:34:30.395\n>> And we'll see\n\n694\n00:34:30.395 --> 00:34:34.750\nyou next time.\n\n",
          "vimeoId": "146026808"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin issuing commands to the underlying operating with the goal of getting information returns about the system itself. They talk about built in commands that are used to do this and learning the basis of running commands from the shell to make the OS do what we need for it do.  They also show ways that we can efficiently operate the OS through bash.",
          "length": "2336",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-2-issuing_commands_in_bash-110915-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-2-issuing_commands_in_bash-110915-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-1-2-issuing_commands_in_bash-110915-high-sm.jpg",
          "title": "Issuing Commands in Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.450\n[MUSIC]\n\n2\n00:00:01.450 --> 00:00:08.660\nWelcome to another exciting\nepisode here on itpro.tv.\n\n3\n00:00:08.660 --> 00:00:13.381\nI'm your host, Ronnie Wong, and today\n\n4\n00:00:13.381 --> 00:00:18.040\nwe're taking a.\n\n5\n00:00:18.040 --> 00:00:20.630\nFast and command line scripting as well.\n\n6\n00:00:20.630 --> 00:00:22.360\nWe gonna be doing this side of Linux.\n\n7\n00:00:22.360 --> 00:00:25.650\nNow help us out that we really understand\nthat we do understand that bash is\n\n8\n00:00:25.650 --> 00:00:31.410\na command line interpreter allows us to\ninteract with the operating system but\n\n9\n00:00:31.410 --> 00:00:35.830\nwe also learn something else which is very\nfast and allows us to issue commands so\n\n10\n00:00:35.830 --> 00:00:38.520\nthat's what we wanna do today\nwe wanna jump right into it and\n\n11\n00:00:38.520 --> 00:00:41.630\nwho better to help us out well,\ndaniel lowrie,\n\n12\n00:00:41.630 --> 00:00:45.490\nyou're going to have to help us out\nby taking a look at issuing commands.\n\n13\n00:00:45.490 --> 00:00:47.580\nLet's go ahead and jump into it.\n\n14\n00:00:47.580 --> 00:00:48.710\n>> Yeah.\nI'm going to do my best anyway.\n\n15\n00:00:48.710 --> 00:00:52.340\nThat's the whole purpose of this game here\nis to learn how to use our command line\n\n16\n00:00:52.340 --> 00:00:56.200\ninterpreter, that bash environment,\na little more effectively.\n\n17\n00:00:56.200 --> 00:00:59.020\nNow, we are,\nobviously this is bash and scripting.\n\n18\n00:00:59.020 --> 00:01:01.950\nSo, we've got to understand bash and\nhow that works.\n\n19\n00:01:01.950 --> 00:01:03.740\nAnd then we can get into\nthe scripting stuff.\n\n20\n00:01:03.740 --> 00:01:06.570\nBecause, that's It's a little more high\nbrow then just working in the bash\n\n21\n00:01:06.570 --> 00:01:08.880\nenvironment, but\nthat's what we're working on today.\n\n22\n00:01:08.880 --> 00:01:11.350\nHow do I work with bash\nas an environment for\n\n23\n00:01:11.350 --> 00:01:14.990\nme to interact with my Linux operating\nsystem or my unix operating system?.\n\n24\n00:01:14.990 --> 00:01:17.390\nThat's what we're trying\nto figure out today.\n\n25\n00:01:17.390 --> 00:01:20.130\nAnd the first thing is is we\ncan issue commands then, right.\n\n26\n00:01:20.130 --> 00:01:23.370\nThat's what ronnie was throwing at us is I\n\n27\n00:01:23.370 --> 00:01:25.090\nam sure there are tons of\nthings this thing can do.\n\n28\n00:01:25.090 --> 00:01:27.180\nLet's pop the hood and take a look.\n\n29\n00:01:27.180 --> 00:01:30.000\nAnd see what it can do\nwhat it can't do and\n\n30\n00:01:30.000 --> 00:01:33.880\nhow we are going to use\nthis day to day basis and\n\n31\n00:01:33.880 --> 00:01:37.390\nissuing commands for command's prompt\nis something you will do a lot of.\n\n32\n00:01:37.390 --> 00:01:40.980\nI don't care what cool graphic environment\nthat you have installed and running.\n\n33\n00:01:40.980 --> 00:01:42.530\nIt does not matter.\n\n34\n00:01:42.530 --> 00:01:46.530\nIt will still be a way\nthrough the command line.\n\n35\n00:01:46.530 --> 00:01:48.340\nA lot if you are a Linux user.\n\n36\n00:01:48.340 --> 00:01:50.440\nIt is just for Linux user as that word.\n\n37\n00:01:50.440 --> 00:01:54.440\nIt does not matter that you have\nthose great, graphical tools.\n\n38\n00:01:54.440 --> 00:01:57.130\nYou're gonna find yourself a lot going,\n\n39\n00:01:57.130 --> 00:02:00.400\nit's just easier to go to the command\nprompt or the command line.\n\n40\n00:02:00.400 --> 00:02:02.561\nAnd I'm so used to Windows now.\n\n41\n00:02:02.561 --> 00:02:03.798\n>> [LAUGH]\n>> I want to say command prompt.\n\n42\n00:02:03.798 --> 00:02:04.532\nIt's the command line.\n\n43\n00:02:04.532 --> 00:02:05.760\nIt's not command prompt.\n\n44\n00:02:05.760 --> 00:02:07.680\nIt's easier to go to that\nin my Linux system and\n\n45\n00:02:07.680 --> 00:02:09.720\nkind of throw some commands\nat it really quick.\n\n46\n00:02:09.720 --> 00:02:13.590\nGet the output that I need, and when I'm\ndone I can go back to using my graph,\n\n47\n00:02:13.590 --> 00:02:16.760\nsurfing the web, or\nrunning a spreadsheet program.\n\n48\n00:02:16.760 --> 00:02:17.980\nWhatever the case is.\n\n49\n00:02:17.980 --> 00:02:19.190\nSo that's what we need to do.\n\n50\n00:02:19.190 --> 00:02:21.310\nThat's what we need to\nbe able to jump into.\n\n51\n00:02:21.310 --> 00:02:25.690\nNow I did want to reiterate a few things\nthat if you didn't see the last show, or\n\n52\n00:02:25.690 --> 00:02:28.850\nthe introduction to the We talked about\na couple of different types of prompts, or\n\n53\n00:02:28.850 --> 00:02:30.800\nterminals, that you may get, right?.\n\n54\n00:02:30.800 --> 00:02:37.340\nOne is the, let me make sure I get these\nright cuz it's kind of a mouthful.\n\n55\n00:02:37.340 --> 00:02:39.660\nYou got the interactive login prompt.\n\n56\n00:02:39.660 --> 00:02:41.010\nRight?.\nThat was the one where you go to\n\n57\n00:02:41.010 --> 00:02:46.380\nthe system, you turn on the screen, and\nit's sitting there with a little cursor\n\n58\n00:02:46.380 --> 00:02:51.440\njust waiting for you to type in\na username, type in a password.\n\n59\n00:02:51.440 --> 00:02:55.570\nAnd then once that authenticates you\nhave a little blinking cursor and\n\n60\n00:02:55.570 --> 00:02:58.490\nit's waiting for\nyou to do something to it.\n\n61\n00:02:58.490 --> 00:03:00.766\nGood old strip down,\nno nonsense type of environment.\n\n62\n00:03:00.766 --> 00:03:04.915\nThen of course, ff course you have the,\nnon, non log, the interactive non log in.\n\n63\n00:03:04.915 --> 00:03:06.856\nI'm gonna get all these straight and\nmake sure.\n\n64\n00:03:06.856 --> 00:03:08.440\n>> [LAUGH]\n>> I don't want to misspeak on\n\n65\n00:03:08.440 --> 00:03:08.984\nthese things.\n\n66\n00:03:08.984 --> 00:03:09.917\nThe right,\n\n67\n00:03:09.917 --> 00:03:14.745\nthe interactive non login type of terminal\nsessions that you find in a GUI, right?.\n\n68\n00:03:14.745 --> 00:03:17.405\nAnd that's, we're gonna probably\nstick around that a lot,\n\n69\n00:03:17.405 --> 00:03:19.705\njust because who needs to\nbe logging in and out.\n\n70\n00:03:19.705 --> 00:03:22.785\nJust a plain black screen\ncan get a little monotonous.\n\n71\n00:03:22.785 --> 00:03:23.320\nSo.\n\n72\n00:03:23.320 --> 00:03:24.830\nWe'll take a look at my\ncomputer real quick.\n\n73\n00:03:24.830 --> 00:03:26.080\nAnd let's make sure that we remember that.\n\n74\n00:03:26.080 --> 00:03:27.930\nSo here I have my graphical\ninterface up and running.\n\n75\n00:03:27.930 --> 00:03:29.979\nI wanna get to a terminal emulator,\n\n76\n00:03:29.979 --> 00:03:32.930\nI wanna get into that\ninteractive non login shell.\n\n77\n00:03:32.930 --> 00:03:37.410\nSo I just gotta find my terminal and the\ngood thing here is I can do a search for\n\n78\n00:03:37.410 --> 00:03:43.400\nit and just, terminal and pick the one\nI wanna use and now I'm logged in.\n\n79\n00:03:43.400 --> 00:03:46.050\nNow I noticed that [INAUDIBLE]\nnow this is good for you.\n\n80\n00:03:46.050 --> 00:03:48.590\nAll right.\nWe're gonna go over to some keyboard\n\n81\n00:03:48.590 --> 00:03:49.560\nshortcuts in a little while.\n\n82\n00:03:49.560 --> 00:03:54.190\nThis is what I can give you right out\nof the gate, cuz it is very helpful.\n\n83\n00:03:54.190 --> 00:03:56.430\nAnd it is that is a little small.\n\n84\n00:03:56.430 --> 00:03:58.160\nAll right.\n[INAUDIBLE] For us.\n\n85\n00:03:58.160 --> 00:04:00.130\nMaybe you're looking at this,\nand it's a little big.\n\n86\n00:04:00.130 --> 00:04:03.260\nYou're thinking,\nman I need to get more on the screen,\n\n87\n00:04:03.260 --> 00:04:05.080\nand I've got the superman vision.\n\n88\n00:04:05.080 --> 00:04:06.500\nI can see the tiniest of fonts.\n\n89\n00:04:06.500 --> 00:04:08.530\nAnd I wanna get the most bang for my buck.\n\n90\n00:04:08.530 --> 00:04:12.110\nWell the cool thing is, with your\nkeyboard, you can do sometimes it's\n\n91\n00:04:12.110 --> 00:04:16.940\nshift control, and sometime I think mostly\njust control plus or minus, right?.\n\n92\n00:04:16.940 --> 00:04:20.460\nSo if you hold your control button down,\nnow do plus.\n\n93\n00:04:20.460 --> 00:04:24.650\nAnd I'm hitting plus every time I\nhit plus that font gets bigger.\n\n94\n00:04:24.650 --> 00:04:26.720\nRight?.\nUntil it gets to the largest font size\n\n95\n00:04:26.720 --> 00:04:28.180\nit has available.\n\n96\n00:04:28.180 --> 00:04:30.800\nThat's ultra big.\nI wanna go back, if I go down,\n\n97\n00:04:30.800 --> 00:04:33.220\nI can do hold that control and do minus.\n\n98\n00:04:33.220 --> 00:04:36.630\nYou'll notice it starts to get smaller.\n\n99\n00:04:36.630 --> 00:04:41.010\nIt's an easy way to bump the fonts\nup if it's a little small for you or\n\n100\n00:04:41.010 --> 00:04:46.010\nit's too big and it's filling your screen\nup and you're getting a lot of crazy.\n\n101\n00:04:46.010 --> 00:04:49.070\nSometimes, the output\ncan look a little bad.\n\n102\n00:04:49.070 --> 00:04:51.500\nSo, we wanna avoid that.\n\n103\n00:04:51.500 --> 00:04:54.153\nAdjust your font size,\nget it at the right size, real easy,\n\n104\n00:04:54.153 --> 00:04:56.570\nCtrl + or Ctrl-or Shift+Ctrl+ or\nShift+Ctrl-.\n\n105\n00:04:56.570 --> 00:04:59.600\nI'm pretty sure either\none those should work for\n\n106\n00:04:59.600 --> 00:05:01.900\nyou on just about any\nsystem that you're on.\n\n107\n00:05:01.900 --> 00:05:05.000\nSo I'm gonna, think I've got it\njust about, that's good for me.\n\n108\n00:05:05.000 --> 00:05:07.080\nI'm going to leave it there.\n\n109\n00:05:07.080 --> 00:05:10.270\nSo, now that we're in\nthe interactive non logon, remember,\n\n110\n00:05:10.270 --> 00:05:13.840\nI didn't have to log into this,\njust had to start my terminal.\n\n111\n00:05:13.840 --> 00:05:16.110\nIf i wanted that old\ninteractive log in script,\n\n112\n00:05:16.110 --> 00:05:22.330\nI could give you another real quick one\nhere to jump between terminal sessions.\n\n113\n00:05:22.330 --> 00:05:26.120\nYou've go to remember linux Itself\nis a multi user operating system.\n\n114\n00:05:26.120 --> 00:05:27.810\nIt's a true multi user operating system.\n\n115\n00:05:27.810 --> 00:05:32.240\nWell I can have ten users logged\nin at the exact same time.\n\n116\n00:05:32.240 --> 00:05:35.950\nI don't need licenses,\nI don't need anything, it just does it.\n\n117\n00:05:35.950 --> 00:05:39.520\nIf you want to do this, you want\nto jump between terminal sessions,\n\n118\n00:05:39.520 --> 00:05:43.250\nyou can do control + Alt + F1 or\nF2 or F3, and\n\n119\n00:05:43.250 --> 00:05:48.940\nall the way across the F1 to F12 scale or\nmaybe even F11.\n\n120\n00:05:48.940 --> 00:05:52.690\nYou can do one and\nthey'll each open a new terminal for you.\n\n121\n00:05:52.690 --> 00:05:55.190\nSo you'll notice I'm in\na terminal right now.\n\n122\n00:05:55.190 --> 00:05:58.000\nI can actually I think see\nthat with the w command.\n\n123\n00:05:58.000 --> 00:06:02.743\nYou'll see right here, I'm logged into\ntty one, that's the virtual terminal,\n\n124\n00:06:02.743 --> 00:06:06.590\ntty one and two,\nthat's the two terminals I'm logged into.\n\n125\n00:06:06.590 --> 00:06:11.740\nSo if I want to get to one or the other,\nI just need to use that key combination.\n\n126\n00:06:11.740 --> 00:06:17.150\nJust control+alt and then F1 will bring\nme to a terminal I'm logged in at.\n\n127\n00:06:17.150 --> 00:06:19.190\nAs you can see I have commands here.\n\n128\n00:06:19.190 --> 00:06:20.950\nI'm just going to exit out of it.\n\n129\n00:06:20.950 --> 00:06:23.850\nIt's going to take me to the login prompt,\nvery simple.\n\n130\n00:06:23.850 --> 00:06:25.510\nI can do that with F3, F4 and F5.\n\n131\n00:06:25.510 --> 00:06:28.290\nI could even start a graphical session.\n\n132\n00:06:28.290 --> 00:06:31.840\nOn one you'll notice\nthat if I do control+F2,\n\n133\n00:06:31.840 --> 00:06:33.900\nthere's my graphical session waiting for\nme.\n\n134\n00:06:33.900 --> 00:06:37.530\nSo if I just want a terminal area\nto go to, I can keep that on F1 and\n\n135\n00:06:37.530 --> 00:06:40.550\nthen I want one with a graphical\nsession I can do up to as well.\n\n136\n00:06:40.550 --> 00:06:42.480\nReally quick and easy way,\nit's a nice thing for\n\n137\n00:06:42.480 --> 00:06:45.110\nus to be able to do,\nbounce around our systems.\n\n138\n00:06:45.110 --> 00:06:48.060\nSo now that we have that down,\nlet me clear my screen here.\n\n139\n00:06:48.060 --> 00:06:49.270\nLet me make sure I'm on track here.\n\n140\n00:06:49.270 --> 00:06:52.060\nWe've got that Now,\nwe're throwing commands at it.\n\n141\n00:06:52.060 --> 00:06:55.410\nYou'll see I threw a command at it right\nthere, and it gave me some information.\n\n142\n00:06:55.410 --> 00:06:57.970\nI just type in w,\nhit enter, and it tells me,\n\n143\n00:06:57.970 --> 00:07:00.690\nwho is logged in and\nwhere they're logged in at.\n\n144\n00:07:00.690 --> 00:07:04.320\nThat is a command that is able to be run,\nand I'm interacting with the system.\n\n145\n00:07:04.320 --> 00:07:05.670\nRight?.\nDidn't have to log in,\n\n146\n00:07:05.670 --> 00:07:06.570\nbut I'm interacting.\n\n147\n00:07:06.570 --> 00:07:10.260\nHence forth the interactive\nnon-login terminal.\n\n148\n00:07:10.260 --> 00:07:11.420\nVery, very cool stuff.\n\n149\n00:07:11.420 --> 00:07:15.540\nNow, there is some things you need\nto know about issuing commands when\n\n150\n00:07:15.540 --> 00:07:16.770\nit comes to Linux.\n\n151\n00:07:16.770 --> 00:07:18.550\nUsually they'll have arguments and\n\n152\n00:07:18.550 --> 00:07:22.280\nthings of that nature that\nare involved with the command itself.\n\n153\n00:07:22.280 --> 00:07:23.150\nYou remember,\n\n154\n00:07:23.150 --> 00:07:27.070\nthe command is just an executable program\nthat has its abilities and limitations.\n\n155\n00:07:27.070 --> 00:07:28.660\nSo how do we know what's what?.\n\n156\n00:07:28.660 --> 00:07:31.300\nAnd that is by basically playing\naround with the command,\n\n157\n00:07:31.300 --> 00:07:33.200\nlooking at help files on the command.\n\n158\n00:07:33.200 --> 00:07:35.520\nAnd seeing what it can do and\n\n159\n00:07:35.520 --> 00:07:38.180\nthere are some commands that\nyou're gonna run into a lot.\n\n160\n00:07:38.180 --> 00:07:40.720\nSome of them that I want you to be\nfamiliar with, that w command, right?.\n\n161\n00:07:40.720 --> 00:07:42.460\nIt tells you who is logged in.\n\n162\n00:07:42.460 --> 00:07:43.400\nIt's a very nice command.\n\n163\n00:07:43.400 --> 00:07:44.910\nI can see if Ronnie was logged in.\n\n164\n00:07:44.910 --> 00:07:46.800\nIt'll show me what\nterminal he's logged in.\n\n165\n00:07:46.800 --> 00:07:48.230\nMaybe he's not on local terminal.\n\n166\n00:07:48.230 --> 00:07:49.710\nMaybe he's on a remote virtual terminal.\n\n167\n00:07:49.710 --> 00:07:50.760\nIt'll show me that, right?.\n\n168\n00:07:50.760 --> 00:07:53.030\nAnd give me a lot of good information.\n\n169\n00:07:53.030 --> 00:07:55.990\nAnd you're thinking okay, cool,\nI get it, it does commands,\n\n170\n00:07:55.990 --> 00:07:59.130\nbut what's the big hairy deal about that,\nright?.\n\n171\n00:07:59.130 --> 00:08:02.950\nWell, the big hairy deal is when\nwe get into scripting Right?\n\n172\n00:08:02.950 --> 00:08:04.760\nWhat does scripting do?\n\n173\n00:08:04.760 --> 00:08:07.770\nScripting is basically\nstringing a bunch of\n\n174\n00:08:07.770 --> 00:08:11.320\ncommands together to give me an output\nto make my life a little bit easier.\n\n175\n00:08:11.320 --> 00:08:12.960\nUsually that's what we're trying to do.\n\n176\n00:08:12.960 --> 00:08:14.180\nTrying to automate a lot of things.\n\n177\n00:08:14.180 --> 00:08:16.700\nSo if I know the commands and\nI know the parameters,\n\n178\n00:08:16.700 --> 00:08:20.330\nthat's gonna help me in my\nscripting later down the line.\n\n179\n00:08:20.330 --> 00:08:22.070\nSo that's why we kinda\nwanna touch on this today.\n\n180\n00:08:23.280 --> 00:08:26.230\nLet's take a look at some\nother commands that we have.\n\n181\n00:08:26.230 --> 00:08:30.114\nAnother really good one that you want\nto get familiar with is you name and\n\n182\n00:08:30.114 --> 00:08:34.090\nI'll go to the screen here and\ndo you name and hit return.\n\n183\n00:08:34.090 --> 00:08:36.340\nAnd it says Linux, wow, that's awesome.\n\n184\n00:08:36.340 --> 00:08:40.330\nDaniel, thanks for\nletting me know I'm on a Linux system.\n\n185\n00:08:40.330 --> 00:08:43.530\nYes, yes, yes.\nWell uname has a little more operation\n\n186\n00:08:43.530 --> 00:08:44.080\nto that.\n\n187\n00:08:44.080 --> 00:08:47.890\nNormally you can get a really quick\nunderstanding of some of the more common\n\n188\n00:08:47.890 --> 00:08:52.220\nways in which the command is used\nby throwing the Help command at it.\n\n189\n00:08:52.220 --> 00:08:53.580\nJust do a dash dash help.\n\n190\n00:08:53.580 --> 00:08:56.310\nAnd a lot of times that will give you,\nlike I said,\n\n191\n00:08:56.310 --> 00:08:58.720\nsome of the most common iterations of it.\n\n192\n00:08:58.720 --> 00:09:03.130\nSo if I do uname,\nlet's see if this works here.\n\n193\n00:09:03.130 --> 00:09:05.260\nHelp, and I get a few extra\noptions that I can add to it.\n\n194\n00:09:05.260 --> 00:09:09.835\nThese are what they call arguments, right,\nor parameters that we have to modify\n\n195\n00:09:09.835 --> 00:09:13.680\nin which the way the program\nactually outputs data tools, right?\n\n196\n00:09:13.680 --> 00:09:16.190\nSo that's a very interesting thing.\n\n197\n00:09:16.190 --> 00:09:19.310\nIt's a very important thing.\n\n198\n00:09:19.310 --> 00:09:22.530\nEspecially, again,\nonce we get down to that scripting level.\n\n199\n00:09:22.530 --> 00:09:23.880\nSo you'll notice here I can do a -a.\n\n200\n00:09:23.880 --> 00:09:26.980\nAnd I will get all information\nthat uname is able to gether.\n\n201\n00:09:26.980 --> 00:09:27.480\nOkay, that's cool.\n\n202\n00:09:27.480 --> 00:09:29.550\nBut maybe I don't want\nall the information.\n\n203\n00:09:29.550 --> 00:09:31.670\nMaybe I want just the kernel name.\n\n204\n00:09:31.670 --> 00:09:33.820\nMaybe I want just the node name.\n\n205\n00:09:33.820 --> 00:09:35.750\nMaybe the kernel release or\nthe version of the machine.\n\n206\n00:09:35.750 --> 00:09:39.000\nYou'll notice that it has a lot\nof different options that we can\n\n207\n00:09:39.000 --> 00:09:40.120\nnarrow it down.\n\n208\n00:09:40.120 --> 00:09:43.020\nBut an easy one obviously\nis gonna be uname -a and\n\n209\n00:09:43.020 --> 00:09:44.520\nthat's gonna give us a lot of information.\n\n210\n00:09:44.520 --> 00:09:45.808\nLet's see what we see here.\n\n211\n00:09:45.808 --> 00:09:49.060\nSo uname -a, and you'll notice\na space because if you didn't\n\n212\n00:09:49.060 --> 00:09:51.530\nput that space there,\nit would see that as one command.\n\n213\n00:09:51.530 --> 00:09:53.260\nSo that space is important.\n\n214\n00:09:53.260 --> 00:09:55.860\nAny time you throw an argument out,\nyou need to give it a space and\n\n215\n00:09:55.860 --> 00:09:57.920\nthen whatever the argument is,\nso that it works correctly.\n\n216\n00:09:57.920 --> 00:10:02.440\nOtherwise, it's just not gonna be\nable to interpret it correctly.\n\n217\n00:10:02.440 --> 00:10:04.720\nSo unames- a, let's see what we get.\n\n218\n00:10:04.720 --> 00:10:07.160\nNow we get a little more information.\n\n219\n00:10:07.160 --> 00:10:10.970\nAnd basically all this\nstuff that we saw up here,\n\n220\n00:10:10.970 --> 00:10:12.670\nis now being printed and aligned below.\n\n221\n00:10:12.670 --> 00:10:15.550\nSo let's take a look,\nour system name is Linux.\n\n222\n00:10:15.550 --> 00:10:18.415\nAnd here we have, let's see here\nit looks like the node name is\n\n223\n00:10:18.415 --> 00:10:21.480\nlocalhost.localdomain that's\nalways good stuff.\n\n224\n00:10:21.480 --> 00:10:25.790\nGiving me things like release and version,\nwhat architecture it's running on,\n\n225\n00:10:25.790 --> 00:10:27.670\nwhat the date and time is.\n\n226\n00:10:27.670 --> 00:10:30.540\nLots of great stuff for\nus to glean from this.\n\n227\n00:10:30.540 --> 00:10:32.710\nSo, this is a really good command.\n\n228\n00:10:32.710 --> 00:10:35.860\nEspecially when it comes to\nscripting things for informatics.\n\n229\n00:10:35.860 --> 00:10:40.270\nI need information, I need it at a quick\nglance, and I don't want to have to\n\n230\n00:10:40.270 --> 00:10:43.470\nstart typing uname -a, and then type this\nand then type that and get that command.\n\n231\n00:10:43.470 --> 00:10:46.500\nSo we're gonna eventually be\nputting these things together and\n\n232\n00:10:46.500 --> 00:10:49.310\ngleaning information out of it that\nmakes our scripts look cool and\n\n233\n00:10:49.310 --> 00:10:53.670\ndoes things that are practical for\nus in our environment.\n\n234\n00:10:53.670 --> 00:10:56.660\n>> Now, Daniel, when you start taking\na look at some of these different commands\n\n235\n00:10:56.660 --> 00:10:59.090\nyou're talking about,\nit looks like what you're trying to is,\n\n236\n00:10:59.090 --> 00:11:02.490\nyou're trying to get information about the\nsystem itself and getting that reported.\n\n237\n00:11:02.490 --> 00:11:07.250\nSo, we understand that Linux itself has at\nleast some of these commands in there, so\n\n238\n00:11:07.250 --> 00:11:11.870\nthat you can find out that information,\nbut Daniel, there's a lot of commands or\n\n239\n00:11:11.870 --> 00:11:15.610\na lot of different programs or\nutilities that I may download.\n\n240\n00:11:15.610 --> 00:11:18.700\nWhat makes that different than what we're\ndoing right here in terms of commands that\n\n241\n00:11:18.700 --> 00:11:22.960\nare already in there versus what\nI would download at some point or\n\n242\n00:11:22.960 --> 00:11:23.970\npull in as a package.\n\n243\n00:11:23.970 --> 00:11:25.650\n>> Yeah, and\nthat's a really good question, right.\n\n244\n00:11:25.650 --> 00:11:28.340\nBecause you're thinking,\nwell that's just a bunch\n\n245\n00:11:28.340 --> 00:11:31.450\nof different executable programs\nthat are built in to the system.\n\n246\n00:11:31.450 --> 00:11:33.740\nGreat, thanks for\nputting those all together for me.\n\n247\n00:11:33.740 --> 00:11:36.830\nI appreciate it and now I'm gonna\ngo get some of my own as well, and\n\n248\n00:11:36.830 --> 00:11:37.849\nI'm gonna build on the system.\n\n249\n00:11:39.130 --> 00:11:44.140\nAnd in one sense that's kind of correct,\nbut the difference is is there it's what's\n\n250\n00:11:44.140 --> 00:11:48.100\nknown as built in commands\nto the BASH system itself.\n\n251\n00:11:48.100 --> 00:11:49.450\nThese are BASH built-ins.\n\n252\n00:11:49.450 --> 00:11:53.400\nThis is different than if I\ndownloaded some program and\n\n253\n00:11:53.400 --> 00:11:55.020\ninstalled it on my system and ran it.\n\n254\n00:11:55.020 --> 00:11:59.140\nNot that I can't use those in my\nscripts or anything of that nature.\n\n255\n00:11:59.140 --> 00:12:01.800\nBut at least I'm gonna have\nthese built-in functions.\n\n256\n00:12:01.800 --> 00:12:05.020\nAnd we have to be aware that those\nare there and I'll even, you know,\n\n257\n00:12:05.020 --> 00:12:05.920\nlet's go ahead.\n\n258\n00:12:05.920 --> 00:12:07.410\nLet's take a look at my screen here and\n\n259\n00:12:07.410 --> 00:12:11.200\nI'll show you how you can see the built-in\nfunctions of the bash system itself.\n\n260\n00:12:11.200 --> 00:12:16.059\nSo, I'm gonna clear the screen and\nif I just type in the word help,\n\n261\n00:12:17.180 --> 00:12:21.090\nbelieve it or not, it actually\nshows you the built-in commands.\n\n262\n00:12:21.090 --> 00:12:22.820\nYeah a lot of stuff there.\n\n263\n00:12:22.820 --> 00:12:24.430\nYou'll notice that even\nwent out of my screen.\n\n264\n00:12:24.430 --> 00:12:28.620\nLet me make the screen\njust a hair larger here.\n\n265\n00:12:28.620 --> 00:12:29.940\nWe'll clear it and try it again.\n\n266\n00:12:29.940 --> 00:12:33.090\nMaybe it will give us more, there we go.\n\n267\n00:12:33.090 --> 00:12:36.660\nWe can scroll up and down, but as you can\nsee there's quite a few commands that\n\n268\n00:12:36.660 --> 00:12:39.700\nare built into the bash system itself.\n\n269\n00:12:39.700 --> 00:12:41.000\nA lot of stuff here.\n\n270\n00:12:41.000 --> 00:12:44.380\nNow, you could probably spend\nmonths pouring through,\n\n271\n00:12:44.380 --> 00:12:49.290\nlearning each one of these things,\nhow they work, how you can use them.\n\n272\n00:12:49.290 --> 00:12:52.840\nWe're gonna use a lot of this kind of\nstuff when it comes to our scripts, right?\n\n273\n00:12:52.840 --> 00:12:56.080\nSo this is kinda why I wanted to\nintroduce you to that here and now.\n\n274\n00:12:56.080 --> 00:12:59.170\nThat they're here and\nthat you can start playing with them and\n\n275\n00:12:59.170 --> 00:13:02.090\nget familiar with them so that when\nwe get into actually writing scripts.\n\n276\n00:13:02.090 --> 00:13:06.050\nYou're not going,\nhow did you put that command in there?\n\n277\n00:13:06.050 --> 00:13:07.790\nHow does it know to use that?\n\n278\n00:13:07.790 --> 00:13:09.580\nWell, it's because it's\na built-in command.\n\n279\n00:13:09.580 --> 00:13:13.560\nSo if we don't use commands that\nwe've either installed ourselves or\n\n280\n00:13:13.560 --> 00:13:17.640\nthe built-ins, that really give us the\nfunctionality when it comes to scripting,\n\n281\n00:13:17.640 --> 00:13:20.360\nwe're not gonna understand\nwhere we're going and\n\n282\n00:13:20.360 --> 00:13:24.290\nI want you guys to understand what\nwe're doing and how we're doing it.\n\n283\n00:13:24.290 --> 00:13:27.750\nI'm gonna use all of these,\ntrust me that's not gonna happen,\n\n284\n00:13:27.750 --> 00:13:30.700\nI probably off the top of my head\nonly know maybe a tenth of these.\n\n285\n00:13:30.700 --> 00:13:32.960\nBut it's good for us to be able to go hey,\n\n286\n00:13:32.960 --> 00:13:38.270\nI can just type in help, jump into\nthe system and go hm, how can I use that.\n\n287\n00:13:38.270 --> 00:13:39.370\nHow can I use that command?\n\n288\n00:13:39.370 --> 00:13:40.400\nI'm trying to do this.\n\n289\n00:13:40.400 --> 00:13:42.370\nI would like a script that does this for\nme.\n\n290\n00:13:42.370 --> 00:13:43.670\nHow do I make that happen?\n\n291\n00:13:43.670 --> 00:13:47.700\nMaybe there's a built-in that\nalready kinda does that for me.\n\n292\n00:13:47.700 --> 00:13:50.330\nLet me take a look and\nsee if that's available.\n\n293\n00:13:50.330 --> 00:13:53.840\nSo, you type in help, start looking\nat the different built-in commands.\n\n294\n00:13:53.840 --> 00:13:57.400\nObviously, you can do man bash or info\nbash and look at those help files as well.\n\n295\n00:13:57.400 --> 00:14:00.640\nThey're gonna have a whole lot more\ninformation as far as how they work,\n\n296\n00:14:00.640 --> 00:14:04.940\nbut again, it's gonna be a little tedious\nand more dry when it comes to material.\n\n297\n00:14:04.940 --> 00:14:06.790\nThe information's there, but\n\n298\n00:14:06.790 --> 00:14:09.370\nyou gotta kind of trudge\nthrough it from time to time.\n\n299\n00:14:09.370 --> 00:14:10.600\nIt's not a lot of fun.\n\n300\n00:14:10.600 --> 00:14:15.050\nBut, at least you know there are built in\ncommands that are there for Linux, and\n\n301\n00:14:15.050 --> 00:14:19.670\nyou're not going how did he know to put in\nbreak, how did he know to put in end, or\n\n302\n00:14:19.670 --> 00:14:22.080\nexit, or this or that,\nor whatever the case is.\n\n303\n00:14:22.080 --> 00:14:24.435\nA lot of them, you're gonna see,\nthey're coming straight from here.\n\n304\n00:14:24.435 --> 00:14:25.006\n>> Now, Daniel,\n\n305\n00:14:25.006 --> 00:14:28.800\non these built-in commands, why don't you\nshow us a couple of examples of them, but\n\n306\n00:14:28.800 --> 00:14:33.910\nmaybe what you can do because it's also a\nquestion on our chatroom as well, is there\n\n307\n00:14:33.910 --> 00:14:39.458\na built-in command to show us the name or\nthe version of Linux that you're running?\n\n308\n00:14:39.458 --> 00:14:43.630\n>> Yeah, the u-name is what you're gonna\nwant to run, it is telling me the version.\n\n309\n00:14:43.630 --> 00:14:45.410\nLet me get outta here.\n\n310\n00:14:45.410 --> 00:14:48.130\nIf I use uname and\nif I do that help again,\n\n311\n00:14:48.130 --> 00:14:52.860\nit will show you that if\nI want the version, and\n\n312\n00:14:52.860 --> 00:14:57.050\nif you're looking for the version of,\nlike, am I running Debian?\n\n313\n00:14:57.050 --> 00:14:58.486\nAm I running Ubuntu?\n\n314\n00:14:58.486 --> 00:14:59.910\nOr things like that.\n\n315\n00:14:59.910 --> 00:15:03.260\nYou'll probably, let me do a uname\ndash let's see here, -a, so\n\n316\n00:15:03.260 --> 00:15:07.420\nwe get everything that it returns,\nand sometimes through here,\n\n317\n00:15:07.420 --> 00:15:11.940\nyou will see that it'll\nsay something like CentOS.\n\n318\n00:15:11.940 --> 00:15:14.030\nIt will say Ubuntu, right.\n\n319\n00:15:14.030 --> 00:15:19.140\nI know that in, I also run Linux Mint as\na desktop environment, it's a really nice,\n\n320\n00:15:19.140 --> 00:15:23.300\neasy Linux distro to use, and\nif I did uname -a, it would say Ubuntu.\n\n321\n00:15:23.300 --> 00:15:26.450\nIt would tell me in here that this is.\n\n322\n00:15:26.450 --> 00:15:28.970\nSo a lot of times it will be in here.\n\n323\n00:15:30.600 --> 00:15:32.677\nIf it's not, I mean,\nrestart your computer.\n\n324\n00:15:32.677 --> 00:15:34.020\n>> [LAUGH]\n>> I mean, I'm sure there's\n\n325\n00:15:34.020 --> 00:15:38.310\nsomething in there, but I mean, the fact\nthat you're sitting down at a system,\n\n326\n00:15:38.310 --> 00:15:41.410\nif you're logging into a system,\nit'll probably tell you at that login,\n\n327\n00:15:41.410 --> 00:15:43.050\nwelcome to red hat version whatever.\n\n328\n00:15:43.050 --> 00:15:44.500\nWelcome to central west seven.\n\n329\n00:15:44.500 --> 00:15:45.520\nThings of that nature.\n\n330\n00:15:45.520 --> 00:15:47.030\nI don't know off the top of my head.\n\n331\n00:15:47.030 --> 00:15:48.810\nYet again, there's probably a variable or\n\n332\n00:15:48.810 --> 00:15:51.990\na path or something somewhere\nthat gives you that information.\n\n333\n00:15:51.990 --> 00:15:53.800\nI just don't know it\noff the top of my head.\n\n334\n00:15:53.800 --> 00:15:54.750\n>> And sorry about that, Daniel.\n\n335\n00:15:54.750 --> 00:15:57.100\nSomebody was just asking about what\nversion you were using, and so,\n\n336\n00:15:57.100 --> 00:15:59.630\nI just thought, well,\nmaybe you can just tell us what it is\n\n337\n00:15:59.630 --> 00:16:00.508\nby using that built-in-\n>> Oh, yeah.\n\n338\n00:16:00.508 --> 00:16:02.260\nYeah.\nThat's the great thing about Linux is\n\n339\n00:16:02.260 --> 00:16:08.290\nthere is a lot of commands, so\nthere very well may be an easy way to go,\n\n340\n00:16:08.290 --> 00:16:10.140\nhey what is that,\nI tend to use you names for\n\n341\n00:16:10.140 --> 00:16:13.850\nthat kind of thing and it almost\nalways has built in what that is.\n\n342\n00:16:13.850 --> 00:16:18.320\nWhat is the operating system is\nthis Ubuntu something like that.\n\n343\n00:16:18.320 --> 00:16:21.510\nThis does not do that apparently.\n\n344\n00:16:21.510 --> 00:16:22.820\n>> So you are running CentOS.\n\n345\n00:16:22.820 --> 00:16:23.802\n>> I'm running CentOS.\n\n346\n00:16:23.802 --> 00:16:27.160\n[LAUGH] I installed it,\nso I know it is CentOS.\n\n347\n00:16:27.160 --> 00:16:29.250\nSo it was very helpful.\n\n348\n00:16:29.250 --> 00:16:32.120\n>> Just show us some of those different\ncommands you were talking about so\n\n349\n00:16:32.120 --> 00:16:34.760\npeople understand what we mean by built.\n\n350\n00:16:34.760 --> 00:16:37.460\nYeah I'm going to give you some\nof the more useful commands.\n\n351\n00:16:37.460 --> 00:16:41.080\nSomething that you actually might run and\nvery interesting things.\n\n352\n00:16:41.080 --> 00:16:44.470\nA lot of times when you run commands\nthey'll take over your shell, right.\n\n353\n00:16:44.470 --> 00:16:48.980\nAnd that can be a bit of a problem\nbecause while it's running the command\n\n354\n00:16:48.980 --> 00:16:50.010\nyou can't do anything with the shell.\n\n355\n00:16:50.010 --> 00:16:53.120\nYou have to open up another shell,\nand then use that shell.\n\n356\n00:16:53.120 --> 00:16:54.650\nAnd then when you are done\nwith the whatever.\n\n357\n00:16:54.650 --> 00:16:55.730\nIt may be a script or\n\n358\n00:16:55.730 --> 00:16:59.810\na program that you were running\nthat you launched from a shell.\n\n359\n00:16:59.810 --> 00:17:00.560\nThen you could go back.\n\n360\n00:17:00.560 --> 00:17:02.540\nBut what if we don't wanna do that?\n\n361\n00:17:02.540 --> 00:17:05.510\nWhat if I just wanna run a script,\nnot have it take over my shell, and\n\n362\n00:17:05.510 --> 00:17:09.990\nthen keep doing what I wanna do.\n\n363\n00:17:09.990 --> 00:17:11.530\nAnd when it's done I can jump back over.\n\n364\n00:17:11.530 --> 00:17:13.850\nOr if I wanna wait I\ncan work with it later.\n\n365\n00:17:13.850 --> 00:17:15.560\nThere's an easy way to do that and\n\n366\n00:17:15.560 --> 00:17:19.430\nit's when you throw a command at\nsomething I'll clear the screen here.\n\n367\n00:17:19.430 --> 00:17:20.540\nSo let's say I wanted to.\n\n368\n00:17:20.540 --> 00:17:22.590\nLet's try our u name command yet again.\n\n369\n00:17:22.590 --> 00:17:28.610\nIf I did u name even though it doesn't\nkinda hang the actual terminal itself.\n\n370\n00:17:28.610 --> 00:17:31.540\nIt's just the first thing\noff the top of my head.\n\n371\n00:17:31.540 --> 00:17:33.620\nIf I did u name.\n\n372\n00:17:33.620 --> 00:17:34.860\nAnd I put an ampersand.\n\n373\n00:17:34.860 --> 00:17:36.940\nAnd on the end of it, right.\n\n374\n00:17:36.940 --> 00:17:38.190\nThat's the important part.\n\n375\n00:17:38.190 --> 00:17:41.680\nSo what that's telling the system\nto do is take this command and\n\n376\n00:17:41.680 --> 00:17:43.760\nrun it in the background.\n\n377\n00:17:43.760 --> 00:17:44.820\nDon't run it in the foreground.\n\n378\n00:17:44.820 --> 00:17:47.010\nDon't take control of my terminal.\n\n379\n00:17:47.010 --> 00:17:49.250\nI want this to run in the background,\nokay.\n\n380\n00:17:49.250 --> 00:17:53.230\nSo if I hit Enter, even though it\nusually runs the first line so\n\n381\n00:17:53.230 --> 00:17:54.620\nthat's why I'm getting output.\n\n382\n00:17:54.620 --> 00:17:56.570\nAnd you'll notice that.\n\n383\n00:17:56.570 --> 00:18:00.070\nI still have control of my terminal,\nnow if this was something.\n\n384\n00:18:00.070 --> 00:18:02.860\nI can't think of anything off\nthe top of my head that would!\n\n385\n00:18:02.860 --> 00:18:05.340\nLet me try this, let me see here.\n\n386\n00:18:05.340 --> 00:18:09.980\nKate is a graphical editor,\nI am gonna outsmart her, how about gedit?\n\n387\n00:18:09.980 --> 00:18:11.200\nIt's not available either.\n\n388\n00:18:11.200 --> 00:18:14.060\nAll right, give us some help here buddy.\n\n389\n00:18:14.060 --> 00:18:15.530\nHow about, let's try conqueror.\n\n390\n00:18:17.650 --> 00:18:18.360\nConqueror.\n\n391\n00:18:18.360 --> 00:18:19.280\nIs that right?\n\n392\n00:18:19.280 --> 00:18:20.285\nI can't spell.\n\n393\n00:18:20.285 --> 00:18:23.150\n>> [LAUGH]\n>> I'm on a con Q-U-E-R-O-R.\n\n394\n00:18:23.150 --> 00:18:24.675\nDid I spell that right?\n\n395\n00:18:24.675 --> 00:18:25.450\nQ-U-E-R-O-R.\n\n396\n00:18:25.450 --> 00:18:26.670\nThere we go.\n\n397\n00:18:26.670 --> 00:18:27.890\nThere's the problem.\n\n398\n00:18:27.890 --> 00:18:28.520\nI'm a horrible speller.\n\n399\n00:18:28.520 --> 00:18:30.150\nI type conqueror, right?\n\n400\n00:18:30.150 --> 00:18:32.240\nThat launches my web browser.\n\n401\n00:18:32.240 --> 00:18:33.500\nCool, I'm web browsing now.\n\n402\n00:18:33.500 --> 00:18:34.450\nEverything's great.\n\n403\n00:18:35.910 --> 00:18:38.580\nWhich you'll notice like,\nlook at my terminal.\n\n404\n00:18:38.580 --> 00:18:42.620\nI have no ability to type in if I\nhit enter it just gives me nothing.\n\n405\n00:18:42.620 --> 00:18:46.920\nSo if I want to run that and\nstill have control over my terminal,\n\n406\n00:18:46.920 --> 00:18:48.170\nthat's when we can go here.\n\n407\n00:18:48.170 --> 00:18:50.720\nSo now what I have to do is\nI have to go to Konqueror\n\n408\n00:18:50.720 --> 00:18:52.200\nwhen I'm done with that, and click done.\n\n409\n00:18:52.200 --> 00:18:53.540\nAnd now I get my terminal back.\n\n410\n00:18:53.540 --> 00:18:54.850\nOkay, great.\n\n411\n00:18:54.850 --> 00:18:58.490\nBut if I do Konqueror and\nthen add the ampersand.\n\n412\n00:18:59.730 --> 00:19:02.430\nNow I've got the Konqueror running,\nthat's my web browser.\n\n413\n00:19:02.430 --> 00:19:05.210\nI can go over here and\nI still have control over my terminal.\n\n414\n00:19:05.210 --> 00:19:06.450\nSo that's a very helpful command.\n\n415\n00:19:06.450 --> 00:19:10.440\nA lot of commands will do that, those are\nscripts that will take over your terminal.\n\n416\n00:19:10.440 --> 00:19:11.790\nYou don't want to do that.\n\n417\n00:19:11.790 --> 00:19:14.740\nYou want to be able to still run\nthe same terminals that you're using.\n\n418\n00:19:14.740 --> 00:19:16.200\nThat ampersand can help you out.\n\n419\n00:19:16.200 --> 00:19:23.490\nNow, in the same vein there is it's\npushing commands to the background, right.\n\n420\n00:19:23.490 --> 00:19:28.680\nSo we also have an ability\nto pause a command.\n\n421\n00:19:28.680 --> 00:19:33.580\nSo if I typed in, let's see here\n\n422\n00:19:34.580 --> 00:19:40.150\nLet's do conqueror again, and\nthis time we'll do- let's see here.\n\n423\n00:19:40.150 --> 00:19:43.140\nWe'll just run conqueror like so.\n\n424\n00:19:43.140 --> 00:19:44.900\nSo now it's taking over, right?\n\n425\n00:19:44.900 --> 00:19:49.520\nWhen I didn't do the ampersand,\nI've lost control of my terminal, but\n\n426\n00:19:49.520 --> 00:19:50.260\nnot completely.\n\n427\n00:19:50.260 --> 00:19:54.340\nI think I should be able to run Ctrl Z And\n\n428\n00:19:54.340 --> 00:19:58.510\nyou'll notice that I've regained\ncontrol of my terminal.\n\n429\n00:19:58.510 --> 00:20:00.280\nThis is cool.\n\n430\n00:20:00.280 --> 00:20:03.010\nOkay, but\nconqueror is still running, right?\n\n431\n00:20:03.010 --> 00:20:04.430\nBut it's kind of in a suspended state.\n\n432\n00:20:04.430 --> 00:20:08.540\nYou'll notice that here we've got this\nstopped konquerer, command, right?\n\n433\n00:20:08.540 --> 00:20:11.000\nThis is letting me know that I've\nput this into the background.\n\n434\n00:20:11.000 --> 00:20:13.500\nIt is kind of stopped or paused and\n\n435\n00:20:13.500 --> 00:20:17.540\nI can actually run the jobs command And\nsee what I have running.\n\n436\n00:20:17.540 --> 00:20:22.018\nYou'll notice I actually have two jobs\nstill running, the konqueror & job and\n\n437\n00:20:22.018 --> 00:20:22.636\nkonqueror.\n\n438\n00:20:22.636 --> 00:20:25.980\nAnd of course that makes sense,\nthere's one and there's the other.\n\n439\n00:20:25.980 --> 00:20:28.270\nYou'll notice this is the one\nthat has been stopped, and\n\n440\n00:20:28.270 --> 00:20:30.548\nit is, it's kind of like doing nothing.\n\n441\n00:20:30.548 --> 00:20:35.340\nSo I can either exit out of that,\nor if I'm still in that\n\n442\n00:20:35.340 --> 00:20:40.530\nterminal session right there, I can do,\nlet's see, fg, which is foreground.\n\n443\n00:20:40.530 --> 00:20:44.240\nSo, I want to bring something to\nthe foreground, if I leave everything off\n\n444\n00:20:44.240 --> 00:20:47.500\nthat fg it'll just do whatever's\nin the number one position.\n\n445\n00:20:47.500 --> 00:20:52.110\nYou'll notice that I have number one,\nnumber two, if I had three, four,\n\n446\n00:20:52.110 --> 00:20:55.010\nand five, they would be labeled so\non and so forth.\n\n447\n00:20:55.010 --> 00:20:57.200\nBut if I just do fg and I hit return.\n\n448\n00:20:58.280 --> 00:21:00.650\nThen it brings that to the foreground.\n\n449\n00:21:00.650 --> 00:21:04.010\nYou'll notice,\nI have lost my terminal yet again.\n\n450\n00:21:04.010 --> 00:21:08.860\nCuz I brought that back to the foreground,\nit took control of the internal session.\n\n451\n00:21:08.860 --> 00:21:11.460\nI'd have to do the control Z,\nnow it stopped.\n\n452\n00:21:11.460 --> 00:21:12.650\nI can do jobs again.\n\n453\n00:21:12.650 --> 00:21:14.560\nStart looking, okay everything's good.\n\n454\n00:21:14.560 --> 00:21:18.980\nIf I wanted to go ahead and bring it to\nthe foreground, not a problem I could\n\n455\n00:21:18.980 --> 00:21:22.920\ndo that with just the fg,\nif I wanted number two, I could do fg2.\n\n456\n00:21:22.920 --> 00:21:27.220\nAnd now Conqueror is taking over and\nI'm back to action.\n\n457\n00:21:27.220 --> 00:21:31.606\nSo if you want to bring things to the\nforeground or background, or pause them.\n\n458\n00:21:31.606 --> 00:21:34.980\nControl+Z to pause,\n& to launch it into the background And\n\n459\n00:21:34.980 --> 00:21:39.460\nfg and then whatever number process it\nis to bring it back to the foreground.\n\n460\n00:21:39.460 --> 00:21:44.360\n>> Now Daniel, when we continue to\nactually become more proficient at\n\n461\n00:21:44.360 --> 00:21:48.360\nrunning these types of commands and even\nadditional commands that you and I will\n\n462\n00:21:48.360 --> 00:21:52.050\nactually end up learning, the problem\nalso comes in sometimes where it doesn't\n\n463\n00:21:52.050 --> 00:21:56.260\nmatter how many times I've done it,\n>> You have to do it again and again and\n\n464\n00:21:56.260 --> 00:21:57.170\nagain and again,\n\n465\n00:21:57.170 --> 00:22:02.230\nand what that means is that, well, you\nhave to remember a lot of these commands.\n\n466\n00:22:02.230 --> 00:22:08.330\nSo, Daniel, does Linux or Unix or does\nthe bash have a way for us that we don't\n\n467\n00:22:08.330 --> 00:22:12.850\nhave to keep repeating those commands\nover and over again if we're using it.\n\n468\n00:22:12.850 --> 00:22:14.060\n>> Yeah.\nYeah, the good thing is,\n\n469\n00:22:14.060 --> 00:22:15.470\nis that in the bash itself,\n\n470\n00:22:15.470 --> 00:22:18.430\nLinux itself actually keeps a history\nOf the commands that you've used.\n\n471\n00:22:18.430 --> 00:22:21.410\nSo if you're like man,\nwhat was that command again?\n\n472\n00:22:21.410 --> 00:22:22.670\nI can't remember what it was.\n\n473\n00:22:22.670 --> 00:22:25.620\nI just used it maybe an hour ago and\n\n474\n00:22:25.620 --> 00:22:27.320\nI've lost the web page that\nshowed me how to use that.\n\n475\n00:22:27.320 --> 00:22:27.840\nNow I can't find it.\n\n476\n00:22:27.840 --> 00:22:28.370\nOh my goodness.\n\n477\n00:22:28.370 --> 00:22:32.050\nWell the good news is we can look through\nour history, see what we've issued,\n\n478\n00:22:32.050 --> 00:22:37.000\nfind the right command and then even\nissue that command from the history.\n\n479\n00:22:37.000 --> 00:22:38.840\nNow, some things we need to know.\n\n480\n00:22:38.840 --> 00:22:40.110\nI'll go back to my computer here.\n\n481\n00:22:40.110 --> 00:22:44.700\nLet me get rid of Konqueror here,\nwe don't need you anymore.\n\n482\n00:22:44.700 --> 00:22:48.810\nThank you, it was lovely playing,\nhave this nice parting gift.\n\n483\n00:22:50.120 --> 00:22:52.730\nAnd let me clear my screen.\n\n484\n00:22:52.730 --> 00:22:54.540\nAnd, you have a file, right?\n\n485\n00:22:54.540 --> 00:22:55.970\nSo each user has their own file, so\n\n486\n00:22:55.970 --> 00:23:00.350\nthat if Ronnie's logged in, His history\nis different from my history, right?\n\n487\n00:23:00.350 --> 00:23:02.170\nSo we don't get the two confused.\n\n488\n00:23:02.170 --> 00:23:03.220\nSo, that's a good thing.\n\n489\n00:23:03.220 --> 00:23:07.800\nEach one of these commands in this file is\ngoing to give me what I've been issuing.\n\n490\n00:23:07.800 --> 00:23:10.740\nSo let's, how do we see that file?\n\n491\n00:23:10.740 --> 00:23:12.640\nThe good thing is, that is just right.\n\n492\n00:23:12.640 --> 00:23:15.880\nUsually when you log in,\nit's usually right there when you log in.\n\n493\n00:23:15.880 --> 00:23:19.870\nActually, it's not usually there, it is\nthere If I do an ls command, which is\n\n494\n00:23:19.870 --> 00:23:23.940\nthe list command we're gonna get into that\na little bit later on how to use that,\n\n495\n00:23:23.940 --> 00:23:29.280\nit shows me the directories and files that\nare in the current directory that I'm in.\n\n496\n00:23:29.280 --> 00:23:34.430\nIf I wanna see this file is a hidden\nfile and it has a special attribute or,\n\n497\n00:23:34.430 --> 00:23:37.050\nit's not really an attribute,\nit's just a way of naming a file.\n\n498\n00:23:37.050 --> 00:23:40.330\nIf you start a file name with a period, it\ndoesn't show it to you with a regular ls\n\n499\n00:23:40.330 --> 00:23:43.740\ncommand, so I have to do ls Dash A,\nto let me get all the good stuff.\n\n500\n00:23:44.880 --> 00:23:45.660\nRemember the space.\n\n501\n00:23:45.660 --> 00:23:48.420\nS dash A.\nAnd now, you'll start seeing I have a lot\n\n502\n00:23:48.420 --> 00:23:51.240\nmore stuff there,\nthey just start with a period.\n\n503\n00:23:51.240 --> 00:23:56.720\nSo, I've got period batch history, that's\nthe file we're looking for, actually.\n\n504\n00:23:56.720 --> 00:23:58.180\nHow serendipitous of that.\n\n505\n00:23:58.180 --> 00:24:00.490\nThere is also a bash.logout,\na bash.profile, a bash.rc.\n\n506\n00:24:00.490 --> 00:24:03.870\nWe're actually going to get into\na lot of those in later episodes.\n\n507\n00:24:03.870 --> 00:24:06.890\nBut for right now we're\nworried about bash.history.\n\n508\n00:24:06.890 --> 00:24:08.470\nSo let's take a look at that.\n\n509\n00:24:08.470 --> 00:24:12.570\nIf I use cat, which is a concatenate\ncommand, just short for\n\n510\n00:24:12.570 --> 00:24:13.440\nthat word concatenate,\n\n511\n00:24:13.440 --> 00:24:16.780\nit will actually read whatever's in\nthe file and print it to the screen.\n\n512\n00:24:18.150 --> 00:24:20.400\nSo I just do .bash_history and hit enter.\n\n513\n00:24:20.400 --> 00:24:23.580\nAnd you'll see I get all these lovely,\n\n514\n00:24:23.580 --> 00:24:29.720\nlovely items that\nare available in my history.\n\n515\n00:24:29.720 --> 00:24:34.420\nSo you can see the last few things I\ndid an exit, an ifconfig, I did date.\n\n516\n00:24:34.420 --> 00:24:37.730\nI can go through them,\nthat's something we We wanna do.\n\n517\n00:24:37.730 --> 00:24:40.520\nAlso when it comes to searching,\n\n518\n00:24:40.520 --> 00:24:43.320\nI'm trying to see where\nI'm at in my list here.\n\n519\n00:24:43.320 --> 00:24:47.150\nThere's some quick shortcuts\nto being able to do this.\n\n520\n00:24:47.150 --> 00:24:51.860\nLet's say I wanted to issue the last\ncommand that I issued, right?\n\n521\n00:24:51.860 --> 00:24:52.850\nI'll clear this out.\n\n522\n00:24:52.850 --> 00:24:55.996\nSo clear would be the last\ncommand I issued now.\n\n523\n00:24:55.996 --> 00:25:00.040\nIf I do two exclamation points that.\n\n524\n00:25:00.040 --> 00:25:02.390\nIt will read the very last\ncommand that you issued, and\n\n525\n00:25:02.390 --> 00:25:04.570\nit will actually run that command, right.\n\n526\n00:25:04.570 --> 00:25:09.620\nSo I don't have to try to know what\nthat is, I can just hit return and\n\n527\n00:25:09.620 --> 00:25:11.180\nyou notice it cleared the screen.\n\n528\n00:25:11.180 --> 00:25:15.850\nIf the last thing I issued was ifconfig,\nwhich is our Our lovely little\n\n529\n00:25:15.850 --> 00:25:20.880\nnetwork interface command let me know what\nthe IP address is and things like that.\n\n530\n00:25:20.880 --> 00:25:24.650\nIf I do that and then I do pound pound.\n\n531\n00:25:24.650 --> 00:25:25.950\nI call it pound,\nit's the exclamation point.\n\n532\n00:25:25.950 --> 00:25:29.580\nPound is a programming term for it.\n\n533\n00:25:29.580 --> 00:25:31.180\nHit Enter, it runs the same command.\n\n534\n00:25:31.180 --> 00:25:34.030\nYou're thinking Well,\nI guess that's kinda cool.\n\n535\n00:25:34.030 --> 00:25:36.220\nYeah, it does the last command I did.\n\n536\n00:25:36.220 --> 00:25:37.610\nNotice I didn't have to type ipconfig.\n\n537\n00:25:37.610 --> 00:25:39.250\nIt's a lot less typing.\n\n538\n00:25:39.250 --> 00:25:40.890\nLot of times, like what Ronnie was saying.\n\n539\n00:25:40.890 --> 00:25:43.010\nYou're typing in long strings of commands.\n\n540\n00:25:43.010 --> 00:25:47.960\nAnd narrowing that down it makes your\nlife in a command line very much easier.\n\n541\n00:25:47.960 --> 00:25:50.030\nAnd that's what we're looking for.\n\n542\n00:25:50.030 --> 00:25:54.050\nA lot of times this comes in\nhandy when I ran a command and\n\n543\n00:25:54.050 --> 00:25:55.520\nit says, permission denied.\n\n544\n00:25:55.520 --> 00:25:59.160\nAnd I'm like, I've gotta do the pseudo or\npseudo, however you say it.\n\n545\n00:25:59.160 --> 00:26:02.810\nI've gotta do the pseudo command so\nthat it will elevate my privileges and\n\n546\n00:26:02.810 --> 00:26:05.560\ngive me administrative and\nthen I'll type in my password.\n\n547\n00:26:05.560 --> 00:26:10.600\nAnd now I've gotta type in pseudo long\nstring of characters for my command and\n\n548\n00:26:10.600 --> 00:26:15.620\nthen hit Enter, prompt me for a password,\nand then I'm off to the races.\n\n549\n00:26:15.620 --> 00:26:18.310\nIf I have the bang bang though,\nthe two exclamation points,\n\n550\n00:26:18.310 --> 00:26:22.990\nthat is gonna be a little bit easier,\ncuz I can just do sudo,\n\n551\n00:26:22.990 --> 00:26:27.710\nI don't think the user one is in the sudo,\nuser, so I can actually su to myself.\n\n552\n00:26:27.710 --> 00:26:29.400\nIt's gonna ask me.\n\n553\n00:26:29.400 --> 00:26:32.750\nSo let's say I wanted to run something and\n\n554\n00:26:32.750 --> 00:26:35.760\nnow you'll notice I'm\nlogged in as myself here.\n\n555\n00:26:35.760 --> 00:26:36.710\nI am in the sudo.\n\n556\n00:26:36.710 --> 00:26:40.920\nSo if I need to run ifconfig\nwith elevated privileges.\n\n557\n00:26:40.920 --> 00:26:44.010\nSo if I ran ifconfig and\nlet's say I got the error,\n\n558\n00:26:44.010 --> 00:26:46.290\nall I'd have to do is enter the sudo,\nbang, bang.\n\n559\n00:26:46.290 --> 00:26:48.320\nAnd it would run that command.\n\n560\n00:26:48.320 --> 00:26:51.390\nObviously it's asking me for\nthe password because I'm sudoing.\n\n561\n00:26:51.390 --> 00:26:55.790\nAnd then it runs the command.\n\n562\n00:26:55.790 --> 00:26:59.700\nSo that can be very helpful in speeding\nthings up when we're issuing commands.\n\n563\n00:26:59.700 --> 00:27:02.250\n>> With that history it\nreally makes it nice.\n\n564\n00:27:02.250 --> 00:27:05.000\nEspecially when you do\nrun a lot of commands and\n\n565\n00:27:05.000 --> 00:27:07.610\nall the sudden you wonder things like,\nif you only type in one time and\n\n566\n00:27:07.610 --> 00:27:11.675\nyou had a misspelling and\nyou go back and Be able to do that.\n\n567\n00:27:11.675 --> 00:27:16.025\nA lot of times we also do this when we\nactually hit the up arrow on that command\n\n568\n00:27:16.025 --> 00:27:18.935\nline, and it can also run through\nthose commands for us, too.\n\n569\n00:27:18.935 --> 00:27:20.545\nEspecially if they've been recent, right?\n\n570\n00:27:20.545 --> 00:27:22.655\nI think, Daniel,\nyou can also clear that out.\n\n571\n00:27:22.655 --> 00:27:23.185\nCan't you?\n\n572\n00:27:23.185 --> 00:27:24.083\nBy running a.\n\n573\n00:27:24.083 --> 00:27:25.728\n>> Oh yeah, yeah,\nyou can totally clear that out.\n\n574\n00:27:25.728 --> 00:27:26.668\nThe cool thing is, is that,\n\n575\n00:27:26.668 --> 00:27:29.800\nas we saw that history file You\nalso have a history command.\n\n576\n00:27:29.800 --> 00:27:34.990\nNow that's gonna make things a little\nbit easier if I just type in,\n\n577\n00:27:34.990 --> 00:27:37.820\nlet me, I'll as myself here.\n\n578\n00:27:37.820 --> 00:27:40.993\nI type in history, it starts showing you,\nusually it shows you the last 500 commands\n\n579\n00:27:40.993 --> 00:27:41.589\n>> [LAUGH]\n\n580\n00:27:41.589 --> 00:27:43.049\n>> That you've issued right?\n\n581\n00:27:43.049 --> 00:27:44.640\nThat's usually the default.\n\n582\n00:27:44.640 --> 00:27:48.240\nI'm seeing a thousand here for\nS7 so Thanks cent os for\n\n583\n00:27:48.240 --> 00:27:49.500\na thousand different commands?\n\n584\n00:27:49.500 --> 00:27:52.550\nNow the cool thing is is that as\nyou can see on the left hand side\n\n585\n00:27:52.550 --> 00:27:55.590\nit's giving me a number it's giving me\na number for each line of commands.\n\n586\n00:27:55.590 --> 00:27:56.500\nWhat does that do?\n\n587\n00:27:56.500 --> 00:28:02.660\nIt gives me a reference point so\nthat I know what command is what and\n\n588\n00:28:02.660 --> 00:28:07.380\nthat's cool because A, well A we're gonna\ndo the clearing history here in a second.\n\n589\n00:28:07.380 --> 00:28:10.600\nBut if I wanted to run a command we did\nthe bang bang the exclamation point\n\n590\n00:28:10.600 --> 00:28:15.480\nexclamation point Can also do !1000 and\nhit return and it will\n\n591\n00:28:15.480 --> 00:28:21.880\nactually run that command, so,\nwhich is the history command.\n\n592\n00:28:21.880 --> 00:28:25.550\nSo let's say, let's do clear.\n\n593\n00:28:25.550 --> 00:28:29.500\nSo number 995 is my clear command,\n\n594\n00:28:29.500 --> 00:28:34.420\nso if I do The exclamation point,\n995, it should clear the screen.\n\n595\n00:28:34.420 --> 00:28:36.290\nAnd it did.\n\n596\n00:28:36.290 --> 00:28:41.630\nSo, very helpful when you're wanting to,\noh man, look at that long string.\n\n597\n00:28:41.630 --> 00:28:45.800\nI see it, now I've gotta, okay,\nit's the ampersand at this, dash this,\n\n598\n00:28:45.800 --> 00:28:48.130\nthis, okay forget that.\n\n599\n00:28:49.550 --> 00:28:50.813\nWhat number is it on?\n\n600\n00:28:50.813 --> 00:28:52.700\nBang, 995 and it runs,\noh I had to throw pseudo back.\n\n601\n00:28:52.700 --> 00:28:54.380\nAnd it makes life a little bit easier.\n\n602\n00:28:54.380 --> 00:28:56.430\nThen we want to clear the commands.\n\n603\n00:28:56.430 --> 00:29:00.330\nWell I'm going to exit out here because\nI like to keep my command history.\n\n604\n00:29:00.330 --> 00:29:03.700\nIf you want to remove\nyour command history, for\n\n605\n00:29:03.700 --> 00:29:05.470\nall you wannabe hackers out there.\n\n606\n00:29:05.470 --> 00:29:08.030\nYou've got to remember,\nyou log into a system and\n\n607\n00:29:08.030 --> 00:29:10.960\nyou start typing commands it's going\nto save it in that history file.\n\n608\n00:29:10.960 --> 00:29:13.290\nAnd you can run the history command and\nfind out what they were.\n\n609\n00:29:13.290 --> 00:29:15.280\nI've actually done this.\n\n610\n00:29:15.280 --> 00:29:18.360\nTo find out a hacker on one of our\nlocal law enforcement agencies.\n\n611\n00:29:18.360 --> 00:29:20.520\nThey lost their Linux sky,\nthey called us up,\n\n612\n00:29:20.520 --> 00:29:22.870\nsaid do you have anybody that knows Linux?\n\n613\n00:29:22.870 --> 00:29:24.170\nI got sent over there.\n\n614\n00:29:24.170 --> 00:29:25.820\nI took a look.\n\n615\n00:29:25.820 --> 00:29:29.310\nI realized and said let's check\nthe history and see what kind of commands.\n\n616\n00:29:29.310 --> 00:29:30.010\nI saw FTPing action.\n\n617\n00:29:30.010 --> 00:29:34.450\nWe were able to track who was logging in\nbecause they didn't clear the history.\n\n618\n00:29:34.450 --> 00:29:37.010\nThey were good enough to\nbreak into the system but\n\n619\n00:29:37.010 --> 00:29:40.438\nNot good enough to of realized that they\nshould have, or they just didn't care.\n\n620\n00:29:40.438 --> 00:29:41.830\n>> [LAUGH]\n>> I should\n\n621\n00:29:41.830 --> 00:29:43.370\nprobably clear the history out.\n\n622\n00:29:43.370 --> 00:29:44.380\nSo what do w do?\n\n623\n00:29:44.380 --> 00:29:47.120\nI do the history command, dash c.\n\n624\n00:29:47.120 --> 00:29:51.755\nAnd now if I type in history,\nI got one command in history.\n\n625\n00:29:51.755 --> 00:29:53.160\n>> [LAUGH]\n>> Not a lot going on in there.\n\n626\n00:29:53.160 --> 00:29:56.070\nIt's a good way to clean up your tracks.\n\n627\n00:29:56.070 --> 00:29:59.690\nGet rid of like I said,\nif you wanna be hackers out there\n\n628\n00:29:59.690 --> 00:30:03.150\nbreaking into the systems, don't say\nDaniel said to clear your history leave\n\n629\n00:30:03.150 --> 00:30:06.210\nit all on there for files so\nthey can all come round you up.\n\n630\n00:30:06.210 --> 00:30:08.020\nDont break into people's systems,\nthat is not cool.\n\n631\n00:30:08.020 --> 00:30:08.690\nWe don't like that.\n\n632\n00:30:08.690 --> 00:30:11.990\n>> Now Daniel because we are also\nactually learning scripting we know that\n\n633\n00:30:11.990 --> 00:30:15.010\na lot of times hat keeping our hands on\nthe keyboard is pretty much the key to us\n\n634\n00:30:15.010 --> 00:30:16.550\nactually being able to do\neverything we need to do.\n\n635\n00:30:16.550 --> 00:30:20.050\nSo that means we also actually have\nto have some efficiency things, and\n\n636\n00:30:20.050 --> 00:30:21.940\nthat comes down to shortcuts.\n\n637\n00:30:21.940 --> 00:30:23.380\nDaniel, show us some shortcuts.\n\n638\n00:30:23.380 --> 00:30:24.670\n>> Yeah, Wes Bryan is the shortcut king.\n\n639\n00:30:24.670 --> 00:30:29.210\nI've never seen anybody use more keyboard\nshortcuts in my life than this guy.\n\n640\n00:30:29.210 --> 00:30:31.720\nHe is every keyboard shortcut.\n\n641\n00:30:31.720 --> 00:30:34.620\nAnd I'm sure some of,\nhe's a Windows guy, I'm a Linux guy,\n\n642\n00:30:34.620 --> 00:30:38.400\nI'm sure some of them transfer over,\nI don't know a lot of Windows shortcuts.\n\n643\n00:30:38.400 --> 00:30:40.120\nBut Ronnie is actually very,\nvery right here.\n\n644\n00:30:41.260 --> 00:30:44.820\nWhen we're jumping around on this thing,\nhaving to use the arrows do work.\n\n645\n00:30:44.820 --> 00:30:46.550\n>> [LAUGH]\n>> They work great, right.\n\n646\n00:30:46.550 --> 00:30:49.980\nAnd I use them and you still will use them\neven though you know these shortcuts but\n\n647\n00:30:49.980 --> 00:30:53.530\nas you start using shortcuts more,\nthey'll start to become more and\n\n648\n00:30:53.530 --> 00:30:56.510\nmore handy because they\nbecome more intuitive.\n\n649\n00:30:56.510 --> 00:30:57.310\nFor you.\n\n650\n00:30:57.310 --> 00:31:00.750\nSo I've picked a few of them out for\nyou to try to help make things easier,\n\n651\n00:31:00.750 --> 00:31:04.150\nget your feet wet into keyboard shortcuts.\n\n652\n00:31:04.150 --> 00:31:07.940\nLet's see here, the first one we're\ngonna do is tab completion, right.\n\n653\n00:31:07.940 --> 00:31:08.900\nThis is the best thing.\n\n654\n00:31:08.900 --> 00:31:10.940\nIt took Windows forever\nto jump on this boat.\n\n655\n00:31:10.940 --> 00:31:13.800\nI don't know why, it's been around\nin Linux as long as I can remember.\n\n656\n00:31:13.800 --> 00:31:17.390\nYou're typing in the command\nI can't remember.\n\n657\n00:31:17.390 --> 00:31:20.020\nIs it spelled like this,\nis it spelled like that?\n\n658\n00:31:20.020 --> 00:31:23.910\nIf it's a global command that can\nrun from anywhere, you use Tab.\n\n659\n00:31:23.910 --> 00:31:26.510\nIf you're trying to fill\nout maybe a long math name,\n\n660\n00:31:26.510 --> 00:31:28.380\nthose things can get buried, right,\n\n661\n00:31:28.380 --> 00:31:33.990\ntons of directory under directory under\ndirectory under directory under directory.\n\n662\n00:31:33.990 --> 00:31:37.080\nThat gets a lot, especially if\nthey're long directory names.\n\n663\n00:31:38.130 --> 00:31:40.080\nThat's too much to type.\n\n664\n00:31:40.080 --> 00:31:44.320\nTab completes the little tab key,\nwhere your pinky goes.\n\n665\n00:31:44.320 --> 00:31:49.450\nIf I start typing,\ntake a look at my screen computer here.\n\n666\n00:31:49.450 --> 00:31:53.110\nIf I wanted to go to, let's say we're\ngonna change directory, we'll used cd, and\n\n667\n00:31:53.110 --> 00:31:56.330\nI'm gonna go to /bin/user/ oh I\ndon't even know what's beyond that.\n\n668\n00:31:56.330 --> 00:31:57.040\nLet's just go there.\n\n669\n00:31:57.040 --> 00:31:57.830\nThere's no such file.\n\n670\n00:31:57.830 --> 00:31:59.250\nMaybe it's sbin.\n\n671\n00:31:59.250 --> 00:32:03.710\nAnd you'll notice, this, this is\nexactly what we're trying to avoid.\n\n672\n00:32:03.710 --> 00:32:05.910\nI'm having to arrow up and bounce around.\n\n673\n00:32:05.910 --> 00:32:10.637\nOkay, there is no sbin user,\nmaybe it's S bin bin, and nothing, right?\n\n674\n00:32:12.310 --> 00:32:14.180\nThings aren't working for me.\n\n675\n00:32:14.180 --> 00:32:15.070\nOkay.\n\n676\n00:32:15.070 --> 00:32:16.660\nI want to make that a little bit easier.\n\n677\n00:32:16.660 --> 00:32:20.040\nSo, if I did do C-D slash S,\nso I just started S.\n\n678\n00:32:20.040 --> 00:32:21.420\nI hit Tab, does nothing.\n\n679\n00:32:21.420 --> 00:32:25.400\nIf I hit Tab twice, it will give me\nevery directory that's available, or\n\n680\n00:32:25.400 --> 00:32:29.330\ncommands that are available,\ndirectories, usually.\n\n681\n00:32:29.330 --> 00:32:32.200\nOr files, that's available for\nme to tab through.\n\n682\n00:32:32.200 --> 00:32:35.060\nSo I see, okay,\nsbin is different than srv,\n\n683\n00:32:35.060 --> 00:32:37.570\nthat's where I want to go,\nI want to go to sbin.\n\n684\n00:32:37.570 --> 00:32:40.100\nSo I just type in b and hit Tab.\n\n685\n00:32:40.100 --> 00:32:45.890\nSince it's unique enough, I put in enough\ncharacters to make it unique enough\n\n686\n00:32:45.890 --> 00:32:51.640\nfrom the other options that I had\navailable, it fills it out for me, right?\n\n687\n00:32:51.640 --> 00:32:53.080\nAnd now, I can do Tab again.\n\n688\n00:32:53.080 --> 00:32:54.590\nSo if I said B, I notice a Tab,\nthere's nothing happening.\n\n689\n00:32:54.590 --> 00:33:00.550\nActually let's go into there and\nsee what the heck we've got available.\n\n690\n00:33:00.550 --> 00:33:03.080\nNot a whole lot,\nexcept a bunch of stuff, right?\n\n691\n00:33:03.080 --> 00:33:06.590\nThere's a lot of commands in here but\nthere are no other,\n\n692\n00:33:06.590 --> 00:33:09.430\nI'm not seeing a lot of directories.\n\n693\n00:33:09.430 --> 00:33:11.410\nAll these are files.\n\n694\n00:33:11.410 --> 00:33:12.540\nSo that's what's going on.\n\n695\n00:33:12.540 --> 00:33:17.130\nI would need to know the name\nof the file to keep going here.\n\n696\n00:33:17.130 --> 00:33:18.560\nSo let's see here.\n\n697\n00:33:18.560 --> 00:33:20.630\nAnd I can't change\ndirectory into the file.\n\n698\n00:33:20.630 --> 00:33:22.040\nObviously that doesn't work.\n\n699\n00:33:22.040 --> 00:33:26.550\nSo what I would have to do\nis I would have to say,\n\n700\n00:33:26.550 --> 00:33:30.449\nI wanna run one of these things.\n\n701\n00:33:30.449 --> 00:33:32.200\nLet's see.\n\n702\n00:33:32.200 --> 00:33:32.900\nI know in bin.\n\n703\n00:33:32.900 --> 00:33:36.470\nI'm gonna say,\nI want to run /bin/ b something.\n\n704\n00:33:36.470 --> 00:33:37.210\nAll right.\n\n705\n00:33:37.210 --> 00:33:38.430\nOkay, now I have a bunch of commands.\n\n706\n00:33:38.430 --> 00:33:40.640\nThese are all files, basically.\n\n707\n00:33:40.640 --> 00:33:41.700\nAnd there is bash.\n\n708\n00:33:41.700 --> 00:33:43.560\nThat's a good one.\n\n709\n00:33:43.560 --> 00:33:44.750\nCuz we're learning bash.\n\n710\n00:33:44.750 --> 00:33:47.690\nSo, I type in ba and I hit tab.\n\n711\n00:33:47.690 --> 00:33:50.550\nNow you notice it keeps narrowing it down.\n\n712\n00:33:50.550 --> 00:33:54.580\nSo, the more unique I can make it,\nthe more I can get to.\n\n713\n00:33:54.580 --> 00:33:58.940\nIf I've got a long string of stuff, and\nobviously this was a little bit crazy\n\n714\n00:33:58.940 --> 00:34:01.540\nhere because I wasn't finding\nwhat I was looking for.\n\n715\n00:34:01.540 --> 00:34:04.320\nBut, if i wanted bash bug; So\nif I did sh-b.\n\n716\n00:34:04.320 --> 00:34:05.850\nYou'll notice it fills it out.\n\n717\n00:34:05.850 --> 00:34:11.940\nYou get really fast at going a couple of\ncharacters, Tab, couple characters, Tab.\n\n718\n00:34:11.940 --> 00:34:15.790\nAnd it continues to start\nfilling stuff out for you.\n\n719\n00:34:15.790 --> 00:34:17.590\nSo it can be very, very helpful.\n\n720\n00:34:19.500 --> 00:34:21.530\nIf I make a file name that's super crazy.\n\n721\n00:34:21.530 --> 00:34:22.810\nLet me go home here.\n\n722\n00:34:22.810 --> 00:34:27.550\nLet's say, cd and\nhead to this little tild here.\n\n723\n00:34:27.550 --> 00:34:31.570\nIt's basically a quick\nreference to my home directory.\n\n724\n00:34:31.570 --> 00:34:32.554\nAnd I say,\n\n725\n00:34:32.554 --> 00:34:38.690\ntouch file1_this_is_a_really_long_filename\nlike so.\n\n726\n00:34:38.690 --> 00:34:40.560\nThat's super long.\n\n727\n00:34:40.560 --> 00:34:47.760\nNow if I ls, you'll see I've\ngot this super long file name.\n\n728\n00:34:49.320 --> 00:34:53.930\nIf I want to read that, I'll say,\ncat file1, notice I hit Tab.\n\n729\n00:34:53.930 --> 00:34:56.500\nI didn't even think about\nit to be honest with you.\n\n730\n00:34:56.500 --> 00:35:00.110\nIt's so ingrained in me to hit Tab to\ncomplete, and that's how you want to get.\n\n731\n00:35:00.110 --> 00:35:00.970\nSo tab is really a nice one.\n\n732\n00:35:00.970 --> 00:35:03.250\nLet's see what else we have.\n\n733\n00:35:03.250 --> 00:35:05.430\nMoving back and forth on stuff\nyou've already actually typed.\n\n734\n00:35:05.430 --> 00:35:06.780\nObviously you can arrow up or\n\n735\n00:35:06.780 --> 00:35:10.480\narrow down and it will scroll through\nthe commands that you have available.\n\n736\n00:35:10.480 --> 00:35:15.382\nBut, if I wanna go back to\nthe beginning of the temp.\n\n737\n00:35:15.382 --> 00:35:19.900\nI've got this really long file name and\nI've got to pseudo that.\n\n738\n00:35:19.900 --> 00:35:23.650\nNow I got to arrow, arrow, arrow,\narrow, arrow, no, no, no, right?\n\n739\n00:35:23.650 --> 00:35:24.594\nIf you do Ctrl+A,\n\n740\n00:35:24.594 --> 00:35:28.300\nit takes you to the beginning of\nyour command structure, right?\n\n741\n00:35:28.300 --> 00:35:30.420\nThe very front of that line.\n\n742\n00:35:30.420 --> 00:35:34.950\nOnce I'm done, if I need to add more\nto the end of it, I can do Ctrl+E.\n\n743\n00:35:34.950 --> 00:35:38.720\nJumps me to the end of the line,\nso that's very helpful as well.\n\n744\n00:35:38.720 --> 00:35:41.200\nLet's see, what else do we have?\n\n745\n00:35:41.200 --> 00:35:45.120\nIf for whatever reason the arrow keys\naren't mapped to go through your history,\n\n746\n00:35:45.120 --> 00:35:48.990\nyou can do Ctrl+P and\nCtrl+N or up and down, so\n\n747\n00:35:48.990 --> 00:35:53.790\nP is up and N is next, so\nprevious for P and N for next.\n\n748\n00:35:53.790 --> 00:35:54.840\nWhat else do we have?\n\n749\n00:35:54.840 --> 00:35:56.670\nCancel out,\nthis is definitely an important one,\n\n750\n00:35:56.670 --> 00:35:58.010\nthis is one you need to know.\n\n751\n00:35:58.010 --> 00:36:01.200\nI'm running a script, I'm doing something,\nI'm running command, and\n\n752\n00:36:01.200 --> 00:36:02.600\nit's locked up on me.\n\n753\n00:36:02.600 --> 00:36:03.830\nThis will happen to you.\n\n754\n00:36:03.830 --> 00:36:07.160\nYou're gonna write a bad script that's\ngonna have an infinite loop in it,\n\n755\n00:36:07.160 --> 00:36:09.620\nit's gonna do crazy stuff that\nyou didn't expect it to do, and\n\n756\n00:36:09.620 --> 00:36:11.848\nit won't let go of your prompt.\n\n757\n00:36:11.848 --> 00:36:17.645\nAnd not just your scripts,\nprograms, all over the place,\n\n758\n00:36:17.645 --> 00:36:21.590\nCtrl+C will actually send\na signal to kill the process and\n\n759\n00:36:21.590 --> 00:36:24.970\ntake you back to your terminal.\n\n760\n00:36:24.970 --> 00:36:29.150\nSo if I was running something\ncrazy I could do Ctrl+C.\n\n761\n00:36:29.150 --> 00:36:31.350\nI don't have anything to run.\n\n762\n00:36:31.350 --> 00:36:32.290\nIt just works.\n\n763\n00:36:32.290 --> 00:36:34.020\nWhen you do things.\n\n764\n00:36:34.020 --> 00:36:37.265\nActually I do, we'll run that\nkonqueror command, if I can spell it.\n\n765\n00:36:37.265 --> 00:36:40.610\nK-O-N-Q-U-E-R-O-R, we'll run that.\n\n766\n00:36:40.610 --> 00:36:46.370\nIf I go back here, I hit Ctrl+C,\nyou'll notice it kills it.\n\n767\n00:36:46.370 --> 00:36:48.470\nIt's done, it's not in the background.\n\n768\n00:36:48.470 --> 00:36:50.300\nIt's not doing any of that.\n\n769\n00:36:50.300 --> 00:36:52.320\nIt has been killed, that's a good one.\n\n770\n00:36:53.870 --> 00:36:55.570\nAnd then we covered Ctrl+Z.\n\n771\n00:36:55.570 --> 00:36:56.570\n>> How about the Q?\n\n772\n00:36:56.570 --> 00:37:00.550\n>> Yeah, Q is definitely important,\nRonnie brings up a good one.\n\n773\n00:37:00.550 --> 00:37:04.270\nThis is for things like we're\nusing certain types of commands.\n\n774\n00:37:04.270 --> 00:37:07.590\nLike the manual page, and\nthis is a good example.\n\n775\n00:37:07.590 --> 00:37:09.090\nI'll do man bash.\n\n776\n00:37:09.090 --> 00:37:09.720\nI'm in man.\n\n777\n00:37:09.720 --> 00:37:12.830\nI'm in the manual,\nI'm scrolling through having a great time\n\n778\n00:37:12.830 --> 00:37:16.400\nlooking through this stuff,\nreading, reading, reading.\n\n779\n00:37:16.400 --> 00:37:19.640\nAnd lets see here, I get to, let's see if\nwe can go all the way to the end here.\n\n780\n00:37:21.280 --> 00:37:24.110\nAs you can see it's quite lengthy,\nthere we go, I'm at the end.\n\n781\n00:37:24.110 --> 00:37:28.380\nI'm done reading,\nI read the entire 4,046 lines of text,\n\n782\n00:37:28.380 --> 00:37:30.150\nI'm a crazy person I don't\nknow why I've done that.\n\n783\n00:37:30.150 --> 00:37:33.900\nBut I have, how do I get out of this?\n\n784\n00:37:33.900 --> 00:37:34.520\nAs you can see.\n\n785\n00:37:35.880 --> 00:37:36.426\nQ to quit.\n\n786\n00:37:36.426 --> 00:37:38.890\nQ to quit works on a lot of stuff.\n\n787\n00:37:38.890 --> 00:37:42.010\nUsually in your pagers and\nthings like that.\n\n788\n00:37:42.010 --> 00:37:45.710\nA lot of times it will give the option for\nQ to quit.\n\n789\n00:37:45.710 --> 00:37:49.580\nSo, take a look if you're in VI,\nwhich is a text editor, it's Q to quit.\n\n790\n00:37:49.580 --> 00:37:52.200\nMost things will give you that\nq option to quit out of it.\n\n791\n00:37:52.200 --> 00:37:52.990\n>> Awesome.\n\n792\n00:37:52.990 --> 00:37:57.360\nDaniel, thank you again for showing us all\nthose different ways that we can issue\n\n793\n00:37:57.360 --> 00:38:00.050\ncommands, really to our operating system.\n\n794\n00:38:00.050 --> 00:38:06.050\nSo we're actually starting to see\nthe power of BASH, of course,\n\n795\n00:38:06.050 --> 00:38:09.550\ninside of what we can do to help us\ninteract with the operating system itself.\n\n796\n00:38:09.550 --> 00:38:11.190\nIt gives us that ability to say hey.\n\n797\n00:38:11.190 --> 00:38:13.420\nWe need this information returned.\n\n798\n00:38:13.420 --> 00:38:15.680\nEven with that, as powerful as that is and\n\n799\n00:38:15.680 --> 00:38:18.620\nit will help us at least\nget familiar with it.\n\n800\n00:38:18.620 --> 00:38:21.810\nWe're gonna see more and more throughout\nthis series that's gonna be more helpful\n\n801\n00:38:21.810 --> 00:38:23.200\nwhen we enter in to the scripting as well.\n\n802\n00:38:23.200 --> 00:38:24.380\nSo these basic navigations,\n\n803\n00:38:24.380 --> 00:38:28.760\nunderstanding how it actually brings up\nthe information, is gonna be of help.\n\n804\n00:38:28.760 --> 00:38:33.690\nAnd then we're going to take all that\ninformation as well and then bring\n\n805\n00:38:33.690 --> 00:38:37.260\nin more skills and this actually is some\nof the foundational building blocks.\n\n806\n00:38:37.260 --> 00:38:39.400\nSo thank you again Daniel for\nshowing that to us, and\n\n807\n00:38:39.400 --> 00:38:42.440\nthat means that's a great place to us to\ngo ahead and also end this episode, so\n\n808\n00:38:42.440 --> 00:38:45.090\nsigning off for IT Pro TV, I'm Ronnie Wong\n>> And I'm Daniel Lowry\n\n809\n00:38:45.090 --> 00:38:46.082\n>> And we'll see you next time.\n\n810\n00:38:46.082 --> 00:38:49.902\n[SOUND]\n\n",
          "vimeoId": "145426732"
        },
        {
          "description": "In this episode, Ronnie and Daniel guide us using BASH to manage files and directories.  Key to running commands is knowing where be when running commands, they show now to use basic commands to navigate through folders.  They show how to create and copy files and folders.  They also talk about the use of links in bash.",
          "length": "2302",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-3-1-files_and_directories_in_bash-110915.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-3-1-files_and_directories_in_bash-110915-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-3-1-files_and_directories_in_bash-110915-sm.jpg",
          "title": "Files and Directories in Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.650\n[MUSIC]\n\n2\n00:00:10.650 --> 00:00:13.010\nWelcome to another exciting\nepisode here on ITPro TV.\n\n3\n00:00:13.010 --> 00:00:13.880\nI'm your host Ronnie Wong, and\n\n4\n00:00:13.880 --> 00:00:17.690\ntoday we're taking a look at using BASH\nas well as doing some scripting in Linux.\n\n5\n00:00:17.690 --> 00:00:20.940\nAnd what we're gonna do\nhere is we are specifically\n\n6\n00:00:20.940 --> 00:00:23.850\ntaking a look at working with files and\nfolders.\n\n7\n00:00:23.850 --> 00:00:27.160\nAnd who better to help us\nthan Mister Daniel Lowrie.\n\n8\n00:00:27.160 --> 00:00:30.300\nAnd he's gonna actually show us how to\nnavigate around, how to make sure that we\n\n9\n00:00:30.300 --> 00:00:35.340\nunderstand what are the things we need\nto accomplish in our operating system.\n\n10\n00:00:35.340 --> 00:00:36.480\nDaniel, let's get to it, buddy.\n\n11\n00:00:36.480 --> 00:00:38.120\n>> Yeah, let's just right in head first.\n\n12\n00:00:38.120 --> 00:00:41.500\nThis is the fun stuff, this is actually\nstarting to get into where we can actually\n\n13\n00:00:41.500 --> 00:00:42.800\ndo something with Linux.\n\n14\n00:00:42.800 --> 00:00:46.270\nOr in the Bash environment,\nwe're not specifically talking Linux.\n\n15\n00:00:46.270 --> 00:00:50.650\nCuz this might be in Mac OS,\nanywhere that's running the Bash shell.\n\n16\n00:00:50.650 --> 00:00:53.110\nThat's what we're looking at right here.\n\n17\n00:00:53.110 --> 00:00:56.470\nSo, in the Bash shell a lot\nof the work that we're gonna\n\n18\n00:00:56.470 --> 00:00:59.870\nbe doing is actually navigating files and\nfolders.\n\n19\n00:00:59.870 --> 00:01:04.240\nAs administrators for someone that is\nrunning or working with a Linux system or\n\n20\n00:01:04.240 --> 00:01:06.860\na Bash shell, I wanna be able\nto work in that environment.\n\n21\n00:01:06.860 --> 00:01:09.350\nI wanna be able to actually do stuff.\n\n22\n00:01:09.350 --> 00:01:12.050\nWe've looked at throwing some\ncommands at it before, but\n\n23\n00:01:12.050 --> 00:01:14.600\nthis is probably some of the meat and\npotatoes, right?\n\n24\n00:01:14.600 --> 00:01:19.050\nThe actual day-to-day grind work that\nyou might actually be working with\n\n25\n00:01:19.050 --> 00:01:20.860\ninside of your operating system.\n\n26\n00:01:20.860 --> 00:01:22.750\nSo, we gotta be able to use that, right?\n\n27\n00:01:22.750 --> 00:01:24.870\nI gotta be able to navigate\nthrough directories.\n\n28\n00:01:24.870 --> 00:01:28.752\nI gotta be able to open files, I gotta\nto be able to create new directories,\n\n29\n00:01:28.752 --> 00:01:33.830\nI gotta be able to do a lot of those\ntypes of stuff that is just, like I said,\n\n30\n00:01:33.830 --> 00:01:37.610\nthat day-to-day business of\nworking in that environment.\n\n31\n00:01:37.610 --> 00:01:38.970\nSo, let's hit the ground running.\n\n32\n00:01:38.970 --> 00:01:42.430\nLet's take a look at how we can manage and\nnavigate throughout this system here.\n\n33\n00:01:42.430 --> 00:01:45.640\nAgain, we do have a file system in place,\nor otherwise you're gonna have\n\n34\n00:01:45.640 --> 00:01:48.180\na real hard time saving files or\nworking with files and\n\n35\n00:01:48.180 --> 00:01:51.380\nthat's kind of the point of our systems\nis having access to those items.\n\n36\n00:01:51.380 --> 00:01:54.650\nI wanna move right into\nhow do we get around?\n\n37\n00:01:54.650 --> 00:01:55.680\nHow do we do that?\n\n38\n00:01:55.680 --> 00:01:56.730\nAnd it's real easy.\n\n39\n00:01:56.730 --> 00:01:59.640\nLet's go ahead and go right to my system.\n\n40\n00:01:59.640 --> 00:02:01.500\nI've already got my terminal emulator up.\n\n41\n00:02:01.500 --> 00:02:03.510\nI'm in the GUI environment, but\n\n42\n00:02:03.510 --> 00:02:07.020\nwe know we wanna run that Bash terminal,\nso I've got that up and running.\n\n43\n00:02:07.020 --> 00:02:08.450\nWell what do I do, right?\n\n44\n00:02:08.450 --> 00:02:11.220\nI'm stuck here with this terminal and\nthat looks great,\n\n45\n00:02:11.220 --> 00:02:15.070\nit's a nice black box you got there,\nbut how do I start diving into it?\n\n46\n00:02:15.070 --> 00:02:19.140\nUsually one of the first things that I do,\nwhen I've logged into a system and\n\n47\n00:02:19.140 --> 00:02:23.150\nI want to see where I'm at and\nkind of get my bearings as it were,\n\n48\n00:02:23.150 --> 00:02:27.220\nis I run the ls command, and\nthat's going to list all the files and\n\n49\n00:02:27.220 --> 00:02:29.930\ndirectories that are in my\ncurrent working directory.\n\n50\n00:02:29.930 --> 00:02:34.870\nSo, if I just do an ls and I hit Enter,\nit's gonna give me those directories.\n\n51\n00:02:34.870 --> 00:02:36.940\nIt's gonna give me those files.\n\n52\n00:02:36.940 --> 00:02:38.560\nYou'll notice I've got a few things here.\n\n53\n00:02:38.560 --> 00:02:42.610\nYou'll also notice that there are some\ncolor things that are happening as well.\n\n54\n00:02:42.610 --> 00:02:45.770\nAnd that's letting me know what type of\nfiles or folders that I'm working with.\n\n55\n00:02:45.770 --> 00:02:49.310\nYou'll notice that most of these\nwhite ones here, that have no color,\n\n56\n00:02:49.310 --> 00:02:51.950\njust the regular text color,\nthat's probably a file.\n\n57\n00:02:51.950 --> 00:02:55.090\nThat's almost invariably,\nthat's exactly what it is,\n\n58\n00:02:55.090 --> 00:02:58.560\njust a regular file of some sort\nholding x data, whatever that is.\n\n59\n00:02:58.560 --> 00:03:02.470\nThe blue ones though,\nthat's a little bit more special.\n\n60\n00:03:02.470 --> 00:03:05.220\nObviously it's got a color,\nit's letting me know it's something\n\n61\n00:03:05.220 --> 00:03:09.250\ndifferent than what that\nfile is at the directory.\n\n62\n00:03:09.250 --> 00:03:11.340\nNow, you're saying great, I love that.\n\n63\n00:03:11.340 --> 00:03:14.660\nAnd then you're gonna be like me when I\nfirst started using the Bash environment\n\n64\n00:03:14.660 --> 00:03:17.740\nand I logged into a console and\nthere was no pillar.\n\n65\n00:03:17.740 --> 00:03:19.290\nAnd I thought great,\n\n66\n00:03:19.290 --> 00:03:23.940\nhow the heck am I suppose to know\nwhat's a directory, what's a file?\n\n67\n00:03:23.940 --> 00:03:26.200\nHow do I tell the difference\nbetween the two?\n\n68\n00:03:26.200 --> 00:03:29.870\nWe give it a little bit of argumentation,\nit should help us out with that.\n\n69\n00:03:29.870 --> 00:03:34.360\nIf I do ls -l, now things start to\nwork a little better for us, right?\n\n70\n00:03:34.360 --> 00:03:38.710\nStart to see that if you look, A,\nl stands for the long list format,\n\n71\n00:03:38.710 --> 00:03:40.460\nthat's what we're looking at.\n\n72\n00:03:40.460 --> 00:03:45.760\nIt's giving me a nice, more easily\nreadable format for us to look through.\n\n73\n00:03:45.760 --> 00:03:49.195\nAnd if you look at this over\nhere on this left-hand side,\n\n74\n00:03:49.195 --> 00:03:52.930\nyou'll notice that we get these rws and\ndashes and ds, and things like that.\n\n75\n00:03:52.930 --> 00:03:54.510\nThat's the information you're looking for.\n\n76\n00:03:54.510 --> 00:03:59.740\nSo if you don't have the colorized system\nif you were just on a standard terminal,\n\n77\n00:03:59.740 --> 00:04:04.380\nI can look and I see this d,\nit lets me know that's a directory.\n\n78\n00:04:04.380 --> 00:04:06.680\nSo, I'm not completely lost and\nout in the woods, I can find out.\n\n79\n00:04:06.680 --> 00:04:09.750\nGotta remember this stuff came\nfrom monochrome terminals\n\n80\n00:04:09.750 --> 00:04:11.210\nwhen they did not have color.\n\n81\n00:04:11.210 --> 00:04:14.030\nColor is a new feature for\nus to be able to work with now.\n\n82\n00:04:14.030 --> 00:04:16.090\nDon't get me wrong, it's great.\n\n83\n00:04:16.090 --> 00:04:19.710\nI love having the color,\nletting me know it's something different.\n\n84\n00:04:19.710 --> 00:04:22.280\nI see blue I know,\nthat there is my directories.\n\n85\n00:04:22.280 --> 00:04:25.087\nBut if I was without that,\nI could use the -l.\n\n86\n00:04:25.087 --> 00:04:29.080\nAnd that will give me\nthe long list format there,\n\n87\n00:04:29.080 --> 00:04:30.920\nletting me see there is a directory.\n\n88\n00:04:30.920 --> 00:04:32.610\nIf it's just the dash, that's a file.\n\n89\n00:04:32.610 --> 00:04:35.240\nThat's what it's telling you,\nthat's what it is.\n\n90\n00:04:35.240 --> 00:04:37.770\nThere's some other options as well.\n\n91\n00:04:37.770 --> 00:04:39.400\nBut normally,\nthat's what you're working with.\n\n92\n00:04:39.400 --> 00:04:42.220\nEven though some things might be dot\nsomething something something then\n\n93\n00:04:42.220 --> 00:04:44.080\ndot something else, that's fine.\n\n94\n00:04:44.080 --> 00:04:46.250\nThat's still just a file.\n\n95\n00:04:46.250 --> 00:04:49.830\nReally all you're looking for is,\nis this the directory or is it a file?\n\n96\n00:04:49.830 --> 00:04:50.840\nNow, another thing is, is I said,\n\n97\n00:04:50.840 --> 00:04:53.130\nI want to see what's in\nthe current working directory.\n\n98\n00:04:53.130 --> 00:04:53.930\nWhat am I doing?\n\n99\n00:04:53.930 --> 00:04:55.090\nWhat do I have around me?\n\n100\n00:04:55.090 --> 00:04:56.950\nWell, how do I know where I'm even at?\n\n101\n00:04:56.950 --> 00:05:00.390\nNow, a lot of times your prompt\nwill help you out with this.\n\n102\n00:05:00.390 --> 00:05:04.880\nYou'll notice that in my prompt I have\nthis little tilde, or tilde or however\n\n103\n00:05:04.880 --> 00:05:10.290\nit's pronounced and that let's me know\nthat I'm actually in my home directory.\n\n104\n00:05:10.290 --> 00:05:12.670\nThat's kind of like a shorthand version of\n\n105\n00:05:12.670 --> 00:05:16.050\nsyntax to let you know you\nare in your home directory.\n\n106\n00:05:16.050 --> 00:05:17.461\nSo, if I was logged in,\n\n107\n00:05:17.461 --> 00:05:22.320\nas you can see I'm logged in as user1,\nI'm in user1's home directory.\n\n108\n00:05:22.320 --> 00:05:23.980\nThat's what that tilde me.\n\n109\n00:05:23.980 --> 00:05:26.670\nSo, if I was logged in as me,\nD Lowrie, I could use the tilde and\n\n110\n00:05:26.670 --> 00:05:29.160\nit would take me to\nD Lowrie's home directory.\n\n111\n00:05:29.160 --> 00:05:31.530\nIf Ronnie logs in,\nhe goes to Ronnie's home directory.\n\n112\n00:05:31.530 --> 00:05:34.270\nAnd that's almost invariably going to be,\nunless you change it,\n\n113\n00:05:34.270 --> 00:05:36.700\nwhich you can, but normally that's\n\n114\n00:05:36.700 --> 00:05:41.220\nlocated in the /home/username\nwhatever that may be directory.\n\n115\n00:05:41.220 --> 00:05:45.000\nSo, if we take a look at mine.\n\n116\n00:05:45.000 --> 00:05:45.820\nLet's see here.\n\n117\n00:05:45.820 --> 00:05:50.040\nIf I do a pwd that stands for\nprint working directory.\n\n118\n00:05:50.040 --> 00:05:53.960\nWell some people might remember\nit as present working directory.\n\n119\n00:05:53.960 --> 00:05:54.520\nThat's okay, but\n\n120\n00:05:54.520 --> 00:05:59.420\nI think that it now is almost universally\nknown as print working directory.\n\n121\n00:05:59.420 --> 00:06:00.578\nThat's what we want it to do.\n\n122\n00:06:00.578 --> 00:06:04.720\nSo, pwd, hit Return, it shows me where\nI'm at, that is my home/user1 directory.\n\n123\n00:06:04.720 --> 00:06:08.650\nThat's why the tilde is there,\nletting me know that if I were to change\n\n124\n00:06:08.650 --> 00:06:12.230\nthe directory, which is another great\ncommand that's what we want to do.\n\n125\n00:06:12.230 --> 00:06:15.160\nI don't want to just\nstay in my one directory.\n\n126\n00:06:15.160 --> 00:06:18.470\nI might want to build a directory\nstructure for organizational purposes, or\n\n127\n00:06:18.470 --> 00:06:19.270\nwhatever the case may be.\n\n128\n00:06:19.270 --> 00:06:22.360\nMaybe I just feel like making\na directory for every file in my system,\n\n129\n00:06:22.360 --> 00:06:23.585\nthat is my prerogative.\n\n130\n00:06:23.585 --> 00:06:26.710\nRonnie is going you are crazy man,\nand yes,\n\n131\n00:06:26.710 --> 00:06:29.420\nyou would be a crazy man if you did that.\n\n132\n00:06:29.420 --> 00:06:32.720\nBut, if you wanted to,\nthat's what you would do.\n\n133\n00:06:32.720 --> 00:06:36.920\nYou want to be able to bounce\naround through those directories,\n\n134\n00:06:36.920 --> 00:06:39.310\nand we're going to show you how\nto do that here in just a second.\n\n135\n00:06:39.310 --> 00:06:42.272\nBut being able to change directory,\nthat's an important one.\n\n136\n00:06:42.272 --> 00:06:45.390\nSo, cd command, or change directory,\nobviously very, very important.\n\n137\n00:06:45.390 --> 00:06:48.812\nSo, if I have, let's see here, a documents\nfolder, so I can cd into documents and\n\n138\n00:06:48.812 --> 00:06:55.520\nhit Enter and now, you'll notice that\nthe tilde here has changed into documents.\n\n139\n00:06:55.520 --> 00:06:58.990\nSo, it's kind of letting me\nknow where I changed into.\n\n140\n00:06:58.990 --> 00:07:03.973\nWhat I do another pwd, hit Enter,\nyou'll notice that we went from\n\n141\n00:07:03.973 --> 00:07:08.890\n/home/user1 to /home/user1/documents,\nI've moved into that.\n\n142\n00:07:08.890 --> 00:07:12.850\nNow, we've gotta go up and down.\n\n143\n00:07:12.850 --> 00:07:15.290\nIf I don't wanna go back,\nwanna go forward,\n\n144\n00:07:15.290 --> 00:07:19.040\nthings like that, there are some\nspecial characters we need to know.\n\n145\n00:07:19.040 --> 00:07:21.680\nIf we want to go back to\nthe directory I was in,\n\n146\n00:07:21.680 --> 00:07:25.100\nwe're going to use our change\ndirectory command, cd..\n\n147\n00:07:25.100 --> 00:07:27.240\nwhich takes us back one level.\n\n148\n00:07:27.240 --> 00:07:29.880\nAnd if I do pwd we'll see\nthat that is the case.\n\n149\n00:07:29.880 --> 00:07:33.310\nNow, the cool thing is you can string\nthose dots and slashes together,\n\n150\n00:07:33.310 --> 00:07:37.590\nand even just say this is the directory\nin which I want to move to.\n\n151\n00:07:37.590 --> 00:07:42.270\nSay I know where the directory is,\nI can do that too.\n\n152\n00:07:42.270 --> 00:07:44.810\n>> Now Daniel, I noticed something\nespecially when you typed\n\n153\n00:07:44.810 --> 00:07:46.410\nin cd Documents there.\n\n154\n00:07:46.410 --> 00:07:49.010\nDid you do the capital D on purpose?\n\n155\n00:07:49.010 --> 00:07:50.405\nIf I just typed in lower case d,\n\n156\n00:07:50.405 --> 00:07:53.760\ncuz I know that in Windows I can do that,\nit works just fine.\n\n157\n00:07:53.760 --> 00:07:59.100\n>> Yeah, in the Windows environment it\nis case insensitive usually, at least I\n\n158\n00:07:59.100 --> 00:08:01.642\nthink it is all the time actually\nunless somebody there changed that.\n\n159\n00:08:01.642 --> 00:08:04.930\nIn Linux though, or\nin the Bash environment,\n\n160\n00:08:04.930 --> 00:08:09.140\ncase sensitivity is important, so\nyou have to pay attention to that.\n\n161\n00:08:09.140 --> 00:08:11.210\nI did have to make that a D and\n\n162\n00:08:11.210 --> 00:08:16.570\nthen I used the tab auto-completion cuz\nI can make it a D and then o in the tab.\n\n163\n00:08:16.570 --> 00:08:20.940\nIt knew there's no other directory\nin here with those strings,\n\n164\n00:08:20.940 --> 00:08:24.680\nit is unique enough it\ncould complete it for me.\n\n165\n00:08:24.680 --> 00:08:29.480\nSo yes, case sensitivity is a big deal\nin the Bash environment, so make sure\n\n166\n00:08:29.480 --> 00:08:32.990\nthat if it says capital F or capital G or\nlowercase g that you go with that and\n\n167\n00:08:32.990 --> 00:08:35.760\nnot try to just go,\noh well I can just do a capital G.\n\n168\n00:08:35.760 --> 00:08:39.340\nI can do just a g.\n\n169\n00:08:39.340 --> 00:08:41.690\nIt's probably not gonna work for you.\n\n170\n00:08:41.690 --> 00:08:45.460\nSo, if you're having trouble with\nsomething, check case sensitivity and\n\n171\n00:08:45.460 --> 00:08:48.220\nthat might be an issue that you\njust gotta keep a lookout for.\n\n172\n00:08:48.220 --> 00:08:49.920\nGood question, Ronnie.\n\n173\n00:08:49.920 --> 00:08:52.990\nNow, going back to the idea of moving\nto and through the directory system.\n\n174\n00:08:52.990 --> 00:08:56.340\nLike I said, if you know a directory\nthat you wanna move into,\n\n175\n00:08:56.340 --> 00:08:59.040\nlike I know that the etc directory exists,\nright?\n\n176\n00:08:59.040 --> 00:09:00.710\nWell, I could cd..\n\n177\n00:09:00.710 --> 00:09:01.890\nmy way back to the root.\n\n178\n00:09:01.890 --> 00:09:03.990\nYou've got to understand\nthere's a root structure.\n\n179\n00:09:03.990 --> 00:09:05.410\nLet's actually do that.\n\n180\n00:09:05.410 --> 00:09:10.890\nWe'll cd, and if I just give it\nthe directory that I want it to go to,\n\n181\n00:09:10.890 --> 00:09:13.500\nthat's exactly what it will do.\n\n182\n00:09:13.500 --> 00:09:16.260\nSo, if I do /, that is the root directory.\n\n183\n00:09:16.260 --> 00:09:18.860\nNot to be confused with\nthe /root directory,\n\n184\n00:09:18.860 --> 00:09:20.840\nwhich we'll see here in just a second.\n\n185\n00:09:20.840 --> 00:09:24.880\nSo, if I hit Return, you'll notice\nagain my tilde's changed to the /.\n\n186\n00:09:24.880 --> 00:09:27.080\nThat is the directory of\nwhich I've moved into.\n\n187\n00:09:27.080 --> 00:09:30.180\nAnd if I do an ls,\nyou'll see a bunch of directories here.\n\n188\n00:09:30.180 --> 00:09:32.089\nThis is the main file structure,\n\n189\n00:09:32.089 --> 00:09:35.780\ndirectory structure hierarchy\nof most UNIX and Linux systems.\n\n190\n00:09:37.320 --> 00:09:42.090\nIf you don't see this exact,\nyou'll see something very, very similar.\n\n191\n00:09:42.090 --> 00:09:45.716\nIt might have a little extra,\nit might have a little less,\n\n192\n00:09:45.716 --> 00:09:49.800\ndepending on the distro, but\nthis is normally what you'll see.\n\n193\n00:09:49.800 --> 00:09:54.465\nAnd you'll notice I said don't get\nconfused with the / as the root directory\n\n194\n00:09:54.465 --> 00:09:56.350\nversus the /root directory.\n\n195\n00:09:56.350 --> 00:10:01.330\nBut you'll notice right here that\nthere is a root directory, right?\n\n196\n00:10:01.330 --> 00:10:06.420\nSo, this character and\nroot are not the same thing.\n\n197\n00:10:06.420 --> 00:10:10.150\nNow, if I want to move,\nif I was in my home,\n\n198\n00:10:10.150 --> 00:10:14.600\nI can do cd and\nuse that shorthand with the ~.\n\n199\n00:10:14.600 --> 00:10:19.240\nYou'll notice it takes me right\nback to my home directory, right?\n\n200\n00:10:19.240 --> 00:10:20.730\nDo a pwd.\n\n201\n00:10:20.730 --> 00:10:21.250\nDo we see that?\n\n202\n00:10:21.250 --> 00:10:23.350\nIf I wanted to move to\nthat root directory again,\n\n203\n00:10:23.350 --> 00:10:26.370\nI would need root privileges to do so.\n\n204\n00:10:26.370 --> 00:10:29.070\nIt is a protected directory,\nso you would need that.\n\n205\n00:10:29.070 --> 00:10:31.800\nI won't be able to do it with this user.\n\n206\n00:10:31.800 --> 00:10:33.740\nBut I would just do cd /root.\n\n207\n00:10:33.740 --> 00:10:36.580\nNow, what that's telling it is,\njust go to /, right?\n\n208\n00:10:36.580 --> 00:10:38.870\nThat's the root directory, and\n\n209\n00:10:38.870 --> 00:10:43.590\nthen find the directory called root and\nmove into it underneath that.\n\n210\n00:10:43.590 --> 00:10:45.840\nAnd that is the hierarchy,\nthat's how you find it.\n\n211\n00:10:45.840 --> 00:10:50.510\nNow, I can do something like, we'll\nsee up here, let's see here, like etc.\n\n212\n00:10:50.510 --> 00:10:54.420\nIt's a common directory that you'll\nmove into for system configuration and\n\n213\n00:10:54.420 --> 00:10:56.180\nthings of that nature.\n\n214\n00:10:56.180 --> 00:11:00.070\nSo, get used to going to etc, or E-T-C.\n\n215\n00:11:00.070 --> 00:11:01.660\nIf I just type in cd etc,\nwatch what happens.\n\n216\n00:11:01.660 --> 00:11:02.772\nNo such file or directory.\n\n217\n00:11:02.772 --> 00:11:04.910\n[SOUND] That's not true,\nI see it right there.\n\n218\n00:11:04.910 --> 00:11:06.380\nHow come you're saying that?\n\n219\n00:11:06.380 --> 00:11:08.700\nWell, it's because I didn't put that /.\n\n220\n00:11:08.700 --> 00:11:13.190\nI have to let it know the hierarchy if\nI wanna go directly into a directory.\n\n221\n00:11:13.190 --> 00:11:15.230\nSo, I would need to say cd /etc.\n\n222\n00:11:15.230 --> 00:11:18.587\nI'm going to the root directory, or\n\n223\n00:11:18.587 --> 00:11:23.110\nthe root of all directories,\nand then into etc.\n\n224\n00:11:23.110 --> 00:11:28.080\nAnd then I should be greeted with\nyou'll notice, the ~ has changed.\n\n225\n00:11:28.080 --> 00:11:28.670\nIt has now become etc.\n\n226\n00:11:28.670 --> 00:11:29.320\nI do a pwd and I get /etc.\n\n227\n00:11:29.320 --> 00:11:33.200\nThat's how we bounce around\ninside of our Linux system.\n\n228\n00:11:33.200 --> 00:11:37.840\n>> Now, Daniel,\nwhen we start to take a look at that,\n\n229\n00:11:37.840 --> 00:11:41.950\nyou obviously know the Linux operating\nsystem and the structure fairly well, but\n\n230\n00:11:41.950 --> 00:11:46.185\nare there commands that can actually\nhelp us to do a little bit of searching,\n\n231\n00:11:46.185 --> 00:11:47.195\nsome finding, that we need?\n\n232\n00:11:47.195 --> 00:11:47.735\n>> Oh, yeah, yeah.\n\n233\n00:11:47.735 --> 00:11:50.095\nWe're not gonna leave you in the woods.\n\n234\n00:11:50.095 --> 00:11:52.475\nThe find command is there for\nyou, and it is your friend.\n\n235\n00:11:52.475 --> 00:11:56.172\nI'm not gonna lie, it's a little,\nit's gonna take some getting used to.\n\n236\n00:11:56.172 --> 00:11:58.475\n>> [LAUGH]\n>> It's cuz you just wanna say,\n\n237\n00:11:58.475 --> 00:12:02.880\nfind me this file name name and\nthen this should be close enough.\n\n238\n00:12:02.880 --> 00:12:06.450\nNo, no it will and it won't do that.\n\n239\n00:12:06.450 --> 00:12:11.500\nYou definitely need to spend some time\nlooking at the info page for it the manual\n\n240\n00:12:11.500 --> 00:12:15.690\npage for it and reading the help files for\nit because it is a little bit quirky.\n\n241\n00:12:15.690 --> 00:12:21.090\nBut once you get that down you should be\nable to find whatever you're looking for\n\n242\n00:12:21.090 --> 00:12:21.890\nfairly simply.\n\n243\n00:12:21.890 --> 00:12:25.390\nLet me change my directory\nhere back to my home.\n\n244\n00:12:25.390 --> 00:12:26.290\nAnd I'll do an ls.\n\n245\n00:12:26.290 --> 00:12:28.430\nAnd I've created some files and\nstuff like that for\n\n246\n00:12:28.430 --> 00:12:31.280\nus to play around with so\nwe can see how to do this.\n\n247\n00:12:31.280 --> 00:12:36.550\nIf I was here and I wanted to search for\nthis file right here.\n\n248\n00:12:36.550 --> 00:12:38.180\nSay I couldn't remember.\n\n249\n00:12:38.180 --> 00:12:41.910\nI've got a whole list of files and\nI'm not gonna look through all that.\n\n250\n00:12:41.910 --> 00:12:43.950\nI know there was a file named crazy file.\n\n251\n00:12:43.950 --> 00:12:44.700\nHow do I find that, and\n\n252\n00:12:44.700 --> 00:12:49.580\nis it in this directory or\nis it maybe in another directory?\n\n253\n00:12:49.580 --> 00:12:53.430\nWhat I can do Is I can do find,\nright, find command, very simple.\n\n254\n00:12:53.430 --> 00:12:56.800\nLet me just give you\nthe help here real quick so\n\n255\n00:12:56.800 --> 00:13:01.740\nas you can see that is,\nit's kind of a bit to look through.\n\n256\n00:13:01.740 --> 00:13:04.040\nSo, I'm gonna give you the meat and\npotatoes.\n\n257\n00:13:04.040 --> 00:13:05.730\nHow do we use this guy?\n\n258\n00:13:05.730 --> 00:13:08.900\nSo, if we wanted to find that crazy file,\n\n259\n00:13:08.900 --> 00:13:13.840\nwe'd say find and I would give it\nthe directory that I want it to search.\n\n260\n00:13:13.840 --> 00:13:16.760\nSo, that's gonna be /home/ User 1 and\n\n261\n00:13:16.760 --> 00:13:20.590\nthen I would say the file\nname which I wanted to find.\n\n262\n00:13:20.590 --> 00:13:25.440\nSo, if I had a ton of files and I didn't\njust wanna manually scroll through that\n\n263\n00:13:25.440 --> 00:13:27.990\nLS feature until I find it,\nI could use Find Here.\n\n264\n00:13:27.990 --> 00:13:33.790\nSo find we'll say crazy file, I know\nthat should be in there and hit Return.\n\n265\n00:13:33.790 --> 00:13:35.840\nAnd you'll notice that hey look,\n\n266\n00:13:35.840 --> 00:13:39.410\nit searched through a bunch of stuff,\nfound a whole lot of things, but\n\n267\n00:13:39.410 --> 00:13:42.630\nit did ultimately Ultimately find my\nfiles that I was looking for, right.\n\n268\n00:13:42.630 --> 00:13:43.220\nSo that's good.\n\n269\n00:13:43.220 --> 00:13:44.950\nI can use Find to find those.\n\n270\n00:13:44.950 --> 00:13:48.330\nLet's take a look at some of\nthe other options that they have.\n\n271\n00:13:48.330 --> 00:13:53.970\nAgain we talked about there being some\nissues with case sensitivity, right.\n\n272\n00:13:53.970 --> 00:14:00.690\nSo, in my previous search it was\na little broad so I got a lot of stuff,\n\n273\n00:14:00.690 --> 00:14:05.120\nbut if I do -name I wanna make sure\nthat that's the name of the file.\n\n274\n00:14:05.120 --> 00:14:06.680\nFile that I'm looking for.\n\n275\n00:14:06.680 --> 00:14:07.480\nAnd I come back.\n\n276\n00:14:07.480 --> 00:14:10.100\nYou'll notice it only returned one file.\n\n277\n00:14:10.100 --> 00:14:13.320\nJust gave me crazy file1, which you'll\nnotice in the previous results,\n\n278\n00:14:13.320 --> 00:14:16.280\nnot only get a bunch of stuff\nthat I wasn't really looking for.\n\n279\n00:14:16.280 --> 00:14:17.740\nI did find what I was looking for,\n\n280\n00:14:17.740 --> 00:14:20.730\nbut there was another crazy\nfile had a capital C.\n\n281\n00:14:20.730 --> 00:14:23.300\nWhat if that's the one I'm looking for?\n\n282\n00:14:23.300 --> 00:14:26.840\nOr what if I want all files called\ncrazy file regardless of whether or\n\n283\n00:14:26.840 --> 00:14:28.230\nnot they're lower or upper-case.\n\n284\n00:14:28.230 --> 00:14:30.050\nWe can throw some arguments in it.\n\n285\n00:14:30.050 --> 00:14:31.220\nHave to do that as well.\n\n286\n00:14:31.220 --> 00:14:34.230\nSo, if we just come back in here and\nI'm just using the arrow up and\n\n287\n00:14:34.230 --> 00:14:38.660\ndown keys to cycle through my history,\nthe command history.\n\n288\n00:14:38.660 --> 00:14:42.450\nSo, if I go back over here to name and\nI say, iname, so\n\n289\n00:14:42.450 --> 00:14:47.370\nit's basically, it's saying, ignore case\nsensitivity for this name file, right.\n\n290\n00:14:47.370 --> 00:14:50.810\nSo, that's what iname is meant to do.\n\n291\n00:14:50.810 --> 00:14:54.000\nSo, now I should,\nhopefully, fingers crossed,\n\n292\n00:14:54.000 --> 00:14:59.160\nif I issue this command, I should get\nboth files instead of just the one.\n\n293\n00:14:59.160 --> 00:15:01.040\nAnd that's exactly what I can get.\n\n294\n00:15:01.040 --> 00:15:03.040\nSo that's very very good stuff.\n\n295\n00:15:03.040 --> 00:15:03.940\nThat'll help you start.\n\n296\n00:15:03.940 --> 00:15:07.940\nAnd you'll see this as we move along\ninto the scripting episodes and\n\n297\n00:15:07.940 --> 00:15:08.520\nthings like that.\n\n298\n00:15:08.520 --> 00:15:09.740\nOnce we get into regular expression.\n\n299\n00:15:09.740 --> 00:15:12.330\nYou're going to see how we can manipulate\n\n300\n00:15:12.330 --> 00:15:15.190\nthe strings of things\nthat we're looking for.\n\n301\n00:15:15.190 --> 00:15:16.970\nWhat if I wanted this without that?\n\n302\n00:15:16.970 --> 00:15:17.710\nAnd you know.\nWe're\n\n303\n00:15:17.710 --> 00:15:20.008\ngoing to narrow down our\nsearch parameters a lot.\n\n304\n00:15:20.008 --> 00:15:23.550\nLot using reg-x, so I know you're\nprobably looking forward to that.\n\n305\n00:15:23.550 --> 00:15:24.780\nWe're not gonna dive into that just yet.\n\n306\n00:15:24.780 --> 00:15:26.780\nIt's a bit more than you\ncan chew at this point.\n\n307\n00:15:26.780 --> 00:15:29.720\nI don't want you guys to\ndrown before you can swim.\n\n308\n00:15:29.720 --> 00:15:32.760\nSo, let's see here,\nwhat else do we have when it comes to-\n\n309\n00:15:32.760 --> 00:15:33.470\n>> Well, Daniel,\n\n310\n00:15:33.470 --> 00:15:37.980\nsometimes what we also need to do, right,\nis not only find something by their file\n\n311\n00:15:37.980 --> 00:15:41.100\nname, but it may just be a certain type of\nfile, whether it's a file or directory.\n\n312\n00:15:41.100 --> 00:15:43.090\nCan we do that with a find command,\nas well?\n\n313\n00:15:43.090 --> 00:15:43.620\n>> Yeah, yeah.\n\n314\n00:15:43.620 --> 00:15:45.150\nYou can just throw a couple more switches.\n\n315\n00:15:45.150 --> 00:15:46.730\nRight?\nSome parameters to\n\n316\n00:15:46.730 --> 00:15:49.190\nlet it know exactly what\nyou're looking for.\n\n317\n00:15:49.190 --> 00:15:52.680\nAgain, this is something that you\nwill be using a lot of in scripting.\n\n318\n00:15:52.680 --> 00:15:55.940\nAnd even though this is a find command,\nyou can use the find command in a script.\n\n319\n00:15:55.940 --> 00:16:00.420\nBut a lot of the parameters tend to be\nthe same throughout different commands, so\n\n320\n00:16:00.420 --> 00:16:04.880\nlearning them here is very helpful.\n\n321\n00:16:04.880 --> 00:16:08.180\nIf I bring my file back up and\nI say, instead of I name,\n\n322\n00:16:08.180 --> 00:16:12.920\nI say, I wanna find all All\nthe files in this directory.\n\n323\n00:16:12.920 --> 00:16:15.430\nI don't wanna see the directories.\n\n324\n00:16:15.430 --> 00:16:17.490\nI just wanna see the files.\n\n325\n00:16:17.490 --> 00:16:19.310\nI can do a -f,\noh not two dashes, just a -f.\n\n326\n00:16:19.310 --> 00:16:23.760\nOh I'm sorry, type, I didn't know this is\nthe type of file that I'm looking for,\n\n327\n00:16:23.760 --> 00:16:24.520\nand then f like so.\n\n328\n00:16:24.520 --> 00:16:28.360\nAnd then I should just get all\nthe files they're looking.\n\n329\n00:16:28.360 --> 00:16:32.360\nYou know, you'll notice that I'm\ngetting all this coverage up here.\n\n330\n00:16:32.360 --> 00:16:35.930\nIt's because It's working recursively and\nI'd have to shut that off, and\n\n331\n00:16:35.930 --> 00:16:38.150\nI just want to show you\nthe basics of this right now, and\n\n332\n00:16:38.150 --> 00:16:40.840\nnot throw too much at you\nright out of the gate.\n\n333\n00:16:40.840 --> 00:16:46.710\nBut, you'll notice I'm getting files, I'm\nnot getting the directories, all right?\n\n334\n00:16:46.710 --> 00:16:51.300\nSo, that's what I'm looking for, I only\nwanted files, so that's what it returned.\n\n335\n00:16:51.300 --> 00:16:54.090\nI could do the same thing,\nI change around and make it for d, for\n\n336\n00:16:54.090 --> 00:16:58.490\ndirectories, hit Return, now you'll see\nI'm getting a bunch of directories.\n\n337\n00:16:58.490 --> 00:17:03.070\nOkay, that's working Recursively as well,\nbut you'll see I've got fun and\n\n338\n00:17:03.070 --> 00:17:03.750\nCrazyFile, and\n\n339\n00:17:03.750 --> 00:17:08.570\nyou'll see that's in straight up user1,\nthat's the kind of stuff I'm looking for.\n\n340\n00:17:08.570 --> 00:17:10.400\nAll these period something something,\n\n341\n00:17:10.400 --> 00:17:13.910\nthose are hidden files that\nwe're not seeing right now.\n\n342\n00:17:13.910 --> 00:17:15.220\nWe can do an ls -a to see those.\n\n343\n00:17:15.220 --> 00:17:16.970\nBut, that's what I want to see.\n\n344\n00:17:16.970 --> 00:17:20.560\nIf you just want to find directories,\n\n345\n00:17:20.560 --> 00:17:24.797\nit's -type d and if you want to\nfind files, it's -type f, right.\n\n346\n00:17:24.797 --> 00:17:26.610\nSo So be aware of that.\n\n347\n00:17:26.610 --> 00:17:31.240\nYou also do things like links, we're\ngonna take a look at links and different,\n\n348\n00:17:31.240 --> 00:17:35.000\nthough we have hard links and soft links\nand how they work here in a second.\n\n349\n00:17:35.000 --> 00:17:37.170\nBut if you're looking for just links,\n\n350\n00:17:37.170 --> 00:17:41.230\nyou can do a dash, type L and\nit'll look for just links.\n\n351\n00:17:41.230 --> 00:17:43.830\nNow's not nearly the extent\nof the find command.\n\n352\n00:17:43.830 --> 00:17:45.170\nYou do a man find,\n\n353\n00:17:45.170 --> 00:17:50.120\nthere's gonna be a lot of information on\nnarrowing down your search parameters.\n\n354\n00:17:50.120 --> 00:17:53.240\nExactly what you're looking for but it\nwould take us forever to go through every\n\n355\n00:17:53.240 --> 00:17:57.110\none of those so\ni'm giving the most common ones available.\n\n356\n00:17:57.110 --> 00:17:59.810\n>> So, Daniel, also the other things that\nwe have to do of course then is we need to\n\n357\n00:17:59.810 --> 00:18:01.600\nbe able to do things like\ncreate directories and\n\n358\n00:18:01.600 --> 00:18:04.750\nfiles and\nactually even be able to look at files.\n\n359\n00:18:04.750 --> 00:18:08.270\nWell, I know that from the command\nline it doesn't look like\n\n360\n00:18:08.270 --> 00:18:12.660\nit's actually very easy to do so, but\nthere are commands to help us, right?\n\n361\n00:18:12.660 --> 00:18:14.080\n>> Oh, yeah.\nThere's plenty of ways\n\n362\n00:18:14.080 --> 00:18:15.180\nthat we can do that.\n\n363\n00:18:15.180 --> 00:18:17.530\nBefore we jump into that though,\n\n364\n00:18:17.530 --> 00:18:19.260\nI just remembered\n>> Okay.\n\n365\n00:18:19.260 --> 00:18:23.730\n>> I've got one more trick up my sleeve\nwhen it comes to using the find command.\n\n366\n00:18:23.730 --> 00:18:28.210\nAnd it is the fact that we can actually,\nif we find something that's executable,\n\n367\n00:18:28.210 --> 00:18:32.250\nor if we want execute\na command on what we found.\n\n368\n00:18:32.250 --> 00:18:36.760\nAgain, now you're starting to see\nhow we're moving towards scripting.\n\n369\n00:18:36.760 --> 00:18:39.850\nEven though we're still staying in\nthe lime we're not making a file yet\n\n370\n00:18:39.850 --> 00:18:41.450\nthat is Run later.\n\n371\n00:18:41.450 --> 00:18:45.380\nI'm showing you thinks that you can do\nto put into a file and it will run.\n\n372\n00:18:45.380 --> 00:18:47.080\nThis is actually kinda cool.\n\n373\n00:18:48.240 --> 00:18:49.890\nI wanted to show this off.\n\n374\n00:18:49.890 --> 00:18:54.510\nSo, let's bring up our find command again.\n\n375\n00:18:54.510 --> 00:18:55.860\nRight?\nIf we, let's see here,\n\n376\n00:18:55.860 --> 00:18:59.960\nI'm gonna just back this up.\n\n377\n00:18:59.960 --> 00:19:01.950\nWe'll say /home/user1, I can't spell it.\n\n378\n00:19:03.430 --> 00:19:07.730\nAnd we'll say -name is crazyfile.\n\n379\n00:19:07.730 --> 00:19:11.240\nThat's our file we're looking for.\n\n380\n00:19:11.240 --> 00:19:14.452\nAnd now if I throw another little\nextra switch at it called exec,\n\n381\n00:19:14.452 --> 00:19:15.610\ne-x-e-c, like that.\n\n382\n00:19:15.610 --> 00:19:20.240\nNow, I can actually perform an action,\nan executable action on that file itself.\n\n383\n00:19:20.240 --> 00:19:21.790\nWho knows what it is, right?\n\n384\n00:19:21.790 --> 00:19:25.290\nSo, if I just wanted to\n\n385\n00:19:26.320 --> 00:19:30.850\nread the contents of that file,\nwell I could do The find,\n\n386\n00:19:30.850 --> 00:19:35.120\nI find my file and then I can do a cat and\nread the input to a file.\n\n387\n00:19:35.120 --> 00:19:36.690\nThat's short for concatenate, right.\n\n388\n00:19:36.690 --> 00:19:41.100\nIt's a cool little command that you can\nuse to look at the contents of a file.\n\n389\n00:19:41.100 --> 00:19:46.720\nBut, if I wanted to do that all on one\nline, do exec and then I say cat, like so.\n\n390\n00:19:46.720 --> 00:19:49.070\nThat's the command we want to run.\n\n391\n00:19:49.070 --> 00:19:52.280\nAnd then you do this crazy\nthing with this curly brackets.\n\n392\n00:19:52.280 --> 00:19:55.500\nAnd you're like okay,\nnow you've lost me, curly brackets.\n\n393\n00:19:55.500 --> 00:19:57.190\nThe brackets make no sense.\n\n394\n00:19:57.190 --> 00:20:00.480\nAll you're telling it with\nthe curly brackets are,\n\n395\n00:20:00.480 --> 00:20:02.080\nI guess they're braces not brackets.\n\n396\n00:20:02.080 --> 00:20:02.850\nThey're curly braces.\n\n397\n00:20:02.850 --> 00:20:04.190\nWhat I'm saying is,\n\n398\n00:20:04.190 --> 00:20:08.950\nwhatever I've found, that is basically\na place holder for what we found.\n\n399\n00:20:08.950 --> 00:20:13.750\nSo, that's what you're telling\nthe system at this point in time.\n\n400\n00:20:13.750 --> 00:20:19.320\nAnd now I want to run cat\nagainst that file that we found.\n\n401\n00:20:19.320 --> 00:20:20.870\nSo there's the place holder For it.\n\n402\n00:20:20.870 --> 00:20:23.910\nAnd then do a backslash and\na semicolon like\n\n403\n00:20:24.930 --> 00:20:29.150\nthis that let's you know it's the end\nof what we're trying to do, okay?\n\n404\n00:20:29.150 --> 00:20:35.040\nIf I hit Enter,\nit's of course giving me a problem here.\n\n405\n00:20:35.040 --> 00:20:36.660\nLet's see here.\n\n406\n00:20:36.660 --> 00:20:38.200\nWhat did I not do correctly?\n\n407\n00:20:38.200 --> 00:20:39.600\nI see it.\nAnd this is a common problem.\n\n408\n00:20:39.600 --> 00:20:42.880\nSyntax errors, remember syntax,\nsyntax, syntax.\n\n409\n00:20:42.880 --> 00:20:45.165\nIt is a dash -exec.\n\n410\n00:20:45.165 --> 00:20:48.200\n[LAUGH] It's easy to forget\nthose little things right here.\n\n411\n00:20:48.200 --> 00:20:51.110\nHit Return, and now you can see\nit's actually done something.\n\n412\n00:20:51.110 --> 00:20:52.850\nIt's reading the inside of that file,\n\n413\n00:20:52.850 --> 00:20:55.880\nrunning that cat program\nagainst the file that we found.\n\n414\n00:20:55.880 --> 00:21:00.410\nNow, what if you're not\nsure you want to run that?\n\n415\n00:21:00.410 --> 00:21:03.310\nSo, we want a little more\nconfirmation before that happens.\n\n416\n00:21:03.310 --> 00:21:06.790\nIf we do the same command,\nbut instead of exec we do ok.\n\n417\n00:21:08.580 --> 00:21:10.540\nI hit Enter,\nnow it's waiting for For input.\n\n418\n00:21:10.540 --> 00:21:12.690\nAnd this is basically the universal yes or\nno answer.\n\n419\n00:21:12.690 --> 00:21:13.330\nDo you want to do this?\n\n420\n00:21:13.330 --> 00:21:14.570\nYes or no?\nIf you don't put anything and\n\n421\n00:21:14.570 --> 00:21:15.530\nyou hit Enter, it defaults to no.\n\n422\n00:21:15.530 --> 00:21:16.860\nBecause it's trying to be safe.\n\n423\n00:21:16.860 --> 00:21:21.500\nBut if you want this to do this,\nyou just type in y and hit return.\n\n424\n00:21:21.500 --> 00:21:25.170\nIt gives you a little break to make\nsure that's exactly what you wanna do.\n\n425\n00:21:25.170 --> 00:21:27.620\nMaybe you hit the wrong file.\n\n426\n00:21:27.620 --> 00:21:29.900\nMaybe you did something like that.\n\n427\n00:21:29.900 --> 00:21:33.220\nAnd you're like,\noh no that's not what I wanna do.\n\n428\n00:21:33.220 --> 00:21:37.080\nYou could hit Enter and just exit out of\nit or you hit yes, that's what I want, and\n\n429\n00:21:37.080 --> 00:21:40.040\nhit that so it's nice, so we're starting\nto string together commands and\n\n430\n00:21:40.040 --> 00:21:42.580\noptions to make it do things that we want.\n\n431\n00:21:42.580 --> 00:21:45.770\nGet some unexpected or\nexpected outputs, should I say, and\n\n432\n00:21:45.770 --> 00:21:48.330\nnow we can move into files and\ndirectories.\n\n433\n00:21:48.330 --> 00:21:50.260\nRight?\nThis is the standard, again,\n\n434\n00:21:50.260 --> 00:21:55.210\nmeat and\npotatoes of working in the structure.\n\n435\n00:21:55.210 --> 00:21:57.590\nLet's go ahead and\nplay around with it here.\n\n436\n00:21:57.590 --> 00:21:58.450\nSo, I'll do an ls.\n\n437\n00:21:58.450 --> 00:22:01.480\nWe'll list stuff out, and\nSome common commands.\n\n438\n00:22:01.480 --> 00:22:02.662\nI wanna create a directory.\n\n439\n00:22:02.662 --> 00:22:05.430\nAll right, I wanna store all\nmy mp3s in that directory.\n\n440\n00:22:05.430 --> 00:22:08.130\nWell it's probably\nhelpful if I name it mp3.\n\n441\n00:22:08.130 --> 00:22:12.740\nSo, I use mkdir and we're not gonna\nget into a bunch of switches with\n\n442\n00:22:12.740 --> 00:22:16.520\nthese commands, just the standard\noperation, which is make directory.\n\n443\n00:22:16.520 --> 00:22:20.060\nThat's what I want, and\nI'll say, we'll call it mp3.\n\n444\n00:22:20.060 --> 00:22:25.250\nHit enter.\nIf I do an ls I should now have\n\n445\n00:22:25.250 --> 00:22:30.350\nA directory which I do called MP3,\nvery good.\n\n446\n00:22:30.350 --> 00:22:33.900\nNothing to it, I can change into\nthat directory, I can start doing,\n\n447\n00:22:33.900 --> 00:22:34.720\nlets actually do that.\n\n448\n00:22:34.720 --> 00:22:35.440\nLets go here to MP3.\n\n449\n00:22:35.440 --> 00:22:36.740\nCDMP3, we'll do an LS.\n\n450\n00:22:36.740 --> 00:22:39.150\nObviously there's nothing in it,\nwe just created it.\n\n451\n00:22:39.150 --> 00:22:43.060\nLets see here, what else did we have\nthat I wanted to show you guys.\n\n452\n00:22:43.060 --> 00:22:44.440\nRM, alright, remove.\n\n453\n00:22:44.440 --> 00:22:50.360\nSo lets say,\nactually I'm gonna jump over real quick,\n\n454\n00:22:50.360 --> 00:22:54.140\nI'm gonna to use the touch command.\n\n455\n00:22:54.140 --> 00:22:56.130\nThis is an interesting command.\n\n456\n00:22:56.130 --> 00:22:59.410\nWhat it does,\nis it actually modifies the time\n\n457\n00:22:59.410 --> 00:23:02.330\nstamp of the file that\nyou're working with, okay?\n\n458\n00:23:02.330 --> 00:23:03.460\nSo, that's it's basic function.\n\n459\n00:23:03.460 --> 00:23:07.280\nIt's saying if I haven't worked\nwith this file in five days, if I\n\n460\n00:23:07.280 --> 00:23:11.590\nlook at the attributes on that file, it\nshould tell me when the last time it took.\n\n461\n00:23:11.590 --> 00:23:14.170\nLet me show you that real quick.\n\n462\n00:23:15.480 --> 00:23:18.640\nAnd ls- l should show that.\n\n463\n00:23:18.640 --> 00:23:22.050\nYou'll notice these times right here?\n\n464\n00:23:22.050 --> 00:23:25.760\nThat's that time stamp\nthat I'm talking about.\n\n465\n00:23:25.760 --> 00:23:28.720\nIf I do touch against a file,\nit will update it to the current time, so\n\n466\n00:23:28.720 --> 00:23:30.920\nif I haven't messed with a file,\nI do touch that file.\n\n467\n00:23:30.920 --> 00:23:32.230\nIt'll update that time.\n\n468\n00:23:32.230 --> 00:23:35.920\nBut it also does a cool little thing for\nus which is actually creates files.\n\n469\n00:23:35.920 --> 00:23:41.530\nIf there is no file, you say If I want\nthis file, even though I'm using touch.\n\n470\n00:23:41.530 --> 00:23:45.300\nI want you to create that\nfile that doesn't exist.\n\n471\n00:23:45.300 --> 00:23:49.010\nSo, we'll go back in mp3, cd mp3.\n\n472\n00:23:49.010 --> 00:23:51.060\nAnd we'll say touch file1, like so.\n\n473\n00:23:51.060 --> 00:23:53.770\nNow we do an ls.\n\n474\n00:23:53.770 --> 00:23:54.900\nAnd now we have a file.\n\n475\n00:23:54.900 --> 00:23:57.720\nSo, we can use touch to create files.\n\n476\n00:23:57.720 --> 00:23:58.310\nI can say, touch.\n\n477\n00:23:58.310 --> 00:23:59.630\nLet's see here.\n\n478\n00:23:59.630 --> 00:24:04.118\nFile2, File File three,\nfile four and hit enter.\n\n479\n00:24:04.118 --> 00:24:06.960\nL S and It continues to make files for me.\n\n480\n00:24:06.960 --> 00:24:07.610\nSo, thanks.\n\n481\n00:24:07.610 --> 00:24:09.411\nI apparently made file two twice.\n\n482\n00:24:09.411 --> 00:24:11.475\n[LAUGH] Missed my, missed my typing there.\n\n483\n00:24:11.475 --> 00:24:13.400\nBut, it's a nice little tool for\nus to use.\n\n484\n00:24:13.400 --> 00:24:15.820\nAnd, now, that I say that, let's see here.\n\n485\n00:24:15.820 --> 00:24:16.550\nThat moves me into rm.\n\n486\n00:24:16.550 --> 00:24:17.650\nOkay, I'm done with file four.\n\n487\n00:24:17.650 --> 00:24:19.020\nI don't need that anymore.\n\n488\n00:24:19.020 --> 00:24:21.110\nSo, I'll just do rM and\nthen the name of the file.\n\n489\n00:24:21.110 --> 00:24:21.830\nHit enter, LS.\n\n490\n00:24:21.830 --> 00:24:24.830\nYou'll notice that file 4 is gone.\n\n491\n00:24:24.830 --> 00:24:27.710\nSo, it's nice to be able to remove.\n\n492\n00:24:27.710 --> 00:24:30.840\nYou've got to remember though, so\n\n493\n00:24:30.840 --> 00:24:34.260\nif you're trying to remove a directory,\nit's gonna balk at you.\n\n494\n00:24:34.260 --> 00:24:35.580\nIt's gonna say, hey buddy.\n\n495\n00:24:35.580 --> 00:24:37.080\nYou're moving, there might be files and\n\n496\n00:24:37.080 --> 00:24:38.750\nstuff in there that you\ndon't wanna delete.\n\n497\n00:24:38.750 --> 00:24:39.910\nAre you sure that's what you wanna do?.\n\n498\n00:24:39.910 --> 00:24:42.740\nAnd actually, it defaults to\nthe fact that you're not sure that's\n\n499\n00:24:42.740 --> 00:24:44.430\nwhat you wanted to do.\n\n500\n00:24:44.430 --> 00:24:48.350\nOtherwise you would've told me,\nthat's what you wanted to do and\n\n501\n00:24:48.350 --> 00:24:49.520\nit'll give you an error, right?.\n\n502\n00:24:49.520 --> 00:24:50.740\nSo if I try to remove a directory,\n\n503\n00:24:50.740 --> 00:24:53.510\nit's gonna give me a problem unless I tell\nit that's exactly what I wanted to do.\n\n504\n00:24:53.510 --> 00:24:56.930\nSo if I go back and\nI wanna remove my mp3 directory.\n\n505\n00:24:56.930 --> 00:24:58.720\nI can do r-m dash capital R.\n\n506\n00:24:58.720 --> 00:25:02.470\nRemember, case sensitivity and then, mp3.\n\n507\n00:25:02.470 --> 00:25:04.610\nNotice, no error.\n\n508\n00:25:04.610 --> 00:25:06.705\nIt just did exactly what I want.\n\n509\n00:25:06.705 --> 00:25:07.550\nL-S.\n\n510\n00:25:07.550 --> 00:25:09.930\nAnd now, mp3 is gone.\n\n511\n00:25:09.930 --> 00:25:13.280\nLet's see what other, things we have here.\n\n512\n00:25:13.280 --> 00:25:14.850\nOkay, these are good ones.\n\n513\n00:25:14.850 --> 00:25:15.710\nSo, head and tail.\n\n514\n00:25:15.710 --> 00:25:16.658\nVery fun.\n>> [LAUGH].\n\n515\n00:25:16.658 --> 00:25:21.080\n>> A lot of times, you'll be looking\nthrough a file, and it's very large.\n\n516\n00:25:21.080 --> 00:25:23.260\nThere's a lot of information.\n\n517\n00:25:23.260 --> 00:25:26.780\nIt's just too much to work with or\nmaybe you just want to see,\n\n518\n00:25:26.780 --> 00:25:32.050\nwhat the last few lines were that you had,\nspecifically the last ten lines, right.\n\n519\n00:25:32.050 --> 00:25:33.780\nBecause that's what tail does.\n\n520\n00:25:33.780 --> 00:25:34.630\nIf you type in tail and\n\n521\n00:25:34.630 --> 00:25:38.320\na file name, it's going to give you\nthe last ten lines of that file.\n\n522\n00:25:38.320 --> 00:25:39.480\nI should have created a file.\n\n523\n00:25:39.480 --> 00:25:43.430\nWell let's go into I bet\nthere will be one there.\n\n524\n00:25:43.430 --> 00:25:49.797\nLet's see here,\n\n525\n00:25:49.797 --> 00:25:54.042\nhow about,\n\n526\n00:25:57.014 --> 00:26:00.410\nhow about\n\n527\n00:26:00.410 --> 00:26:07.210\ninaudible video.\n\n528\n00:26:10.890 --> 00:26:12.090\nAll very good stuff.\n\n529\n00:26:12.090 --> 00:26:15.680\nI'm gonna go back to my\nhome directory here.\n\n530\n00:26:15.680 --> 00:26:19.820\nLet's say I wanted to copy crazyfile,\nright?.\n\n531\n00:26:19.820 --> 00:26:25.600\nSo I'm gonna say cp crazyfile, and\nthen where I want it to copy to.\n\n532\n00:26:25.600 --> 00:26:29.990\nIt can be a directory path,\nit can be in the same path by just\n\n533\n00:26:29.990 --> 00:26:33.680\ngiving it a new name, so\nif I wanted to call it crazyfile2.\n\n534\n00:26:33.680 --> 00:26:34.320\ncrazyfile2, hit enter.\n\n535\n00:26:34.320 --> 00:26:37.140\nYou'll notice now I have\ncrazyfile1 One crazy file, two.\n\n536\n00:26:37.140 --> 00:26:38.650\nAnd if I cat crazy file two you'll\n\n537\n00:26:40.210 --> 00:26:42.910\nnotice it says the exact same thing\nas crazy file one as they copy.\n\n538\n00:26:42.910 --> 00:26:47.060\nBut if I wanted to move that,\nlets say I wanted to move into fun,\n\n539\n00:26:47.060 --> 00:26:53.270\nuse mv crazyfile2 and then tell it\nwhat directory I wanna move it to.\n\n540\n00:26:53.270 --> 00:26:57.740\nWe do an LS you'll notice crazy file two\nis gone from here, at least the file is.\n\n541\n00:26:57.740 --> 00:27:00.540\nWe've got a directory\nnamed crazy file two.\n\n542\n00:27:00.540 --> 00:27:05.030\nAnd it has been moved to the fun,\n\n543\n00:27:05.030 --> 00:27:08.810\nif I do LS slash fun, or just fun.\n\n544\n00:27:08.810 --> 00:27:09.680\nThere we go.\n\n545\n00:27:09.680 --> 00:27:14.720\nIn those crazy file two is inside\nof that directory, very good.\n\n546\n00:27:14.720 --> 00:27:18.720\nLast too really cool commands, I want\nyou guys to be aware of, less and more,\n\n547\n00:27:18.720 --> 00:27:21.430\nthese are called pagers,\nwhat they do is they page large files.\n\n548\n00:27:21.430 --> 00:27:25.440\nSo, you got a lot of outputs and\nwhat happens, right?.\n\n549\n00:27:25.440 --> 00:27:29.600\nWe've seen that, we did that crazy find\ncommand and it gave us all that stuff.\n\n550\n00:27:29.600 --> 00:27:34.720\nLet me go back through here real quick,\nfind that find command,\n\n551\n00:27:34.720 --> 00:27:38.830\nwhere are you, here we go.\n\n552\n00:27:38.830 --> 00:27:41.110\nSo let's get this one.\n\n553\n00:27:41.110 --> 00:27:44.360\nLook at all that, right,\nit scrolls past my screen, it's too much.\n\n554\n00:27:44.360 --> 00:27:46.250\nWhat can I do?.\nI can actually like less that or\n\n555\n00:27:46.250 --> 00:27:48.770\nmore that, I can pipe it in,\nwe're gonna get into pipes, but\n\n556\n00:27:48.770 --> 00:27:53.398\nif I have a large file so,\ninstead of using cat, I can use less.\n\n557\n00:27:53.398 --> 00:27:57.030\nAnd that allow me to go line by line,\nor page by page, up or down,\n\n558\n00:27:57.030 --> 00:27:59.950\nwhich is the better way to go?.\n\n559\n00:27:59.950 --> 00:28:05.170\nUp where a place you see this commonly\nis in your manual pages, right?.\n\n560\n00:28:05.170 --> 00:28:07.040\nSo, if I did man dash.\n\n561\n00:28:07.040 --> 00:28:12.300\nThis is almost guaranteed, this is using\nless for us to be able to look through.\n\n562\n00:28:12.300 --> 00:28:14.820\nIf I press enter, it goes me,\nit moves me line by line, right?.\n\n563\n00:28:14.820 --> 00:28:17.690\nI can use the up and up and\ndown keys, up and down.\n\n564\n00:28:17.690 --> 00:28:20.020\nSee as i page up and down and, or\n\n565\n00:28:20.020 --> 00:28:25.650\nI can go by page by doing the space\nlike that and it'll zip through there.\n\n566\n00:28:25.650 --> 00:28:30.230\nSo more does the same thing, it only does\npages though it doesn't do line by line.\n\n567\n00:28:30.230 --> 00:28:34.020\nAnd if I'm remembering correctly,\nI might be wrong on this one,\n\n568\n00:28:34.020 --> 00:28:34.940\nit only goes one way.\n\n569\n00:28:34.940 --> 00:28:37.970\nSo more was the beginning,\nright that was the first pager we had.\n\n570\n00:28:37.970 --> 00:28:41.640\nAnd then someone said,\nman this is junk I like the answer.\n\n571\n00:28:41.640 --> 00:28:42.460\nNot that more is junk.\n\n572\n00:28:42.460 --> 00:28:44.160\nBut it's not as featurefull as less.\n\n573\n00:28:44.160 --> 00:28:47.210\nSo less is obviously to come\na whole lot more popular.\n\n574\n00:28:47.210 --> 00:28:49.090\n>> Now.\nThe other thing that we also\n\n575\n00:28:49.090 --> 00:28:49.720\nneed to deal with.\n\n576\n00:28:49.720 --> 00:28:51.530\n>> Since we're talking about files and\n\n577\n00:28:51.530 --> 00:28:55.100\ndirectories of course are working\nwith different links that we have.\n\n578\n00:28:55.100 --> 00:28:58.690\nAnd you already mentioned the idea\nof working with hard links.\n\n579\n00:28:58.690 --> 00:29:00.130\nAnd then we have sim links.\n\n580\n00:29:00.130 --> 00:29:02.860\nAnd there's some other things\nthat we have to deal with.\n\n581\n00:29:02.860 --> 00:29:04.000\nSo help us out here Daniel.\n\n582\n00:29:04.000 --> 00:29:04.700\n>> Yeah.\nWhen it comes to\n\n583\n00:29:04.700 --> 00:29:05.450\nlinks this can be a little bit.\n\n584\n00:29:05.450 --> 00:29:06.410\nFor a lot of people.\n\n585\n00:29:06.410 --> 00:29:07.250\nIt's not that hard, right.\n\n586\n00:29:07.250 --> 00:29:10.660\nWe're going to give you all you need\nto know to really get going with links.\n\n587\n00:29:10.660 --> 00:29:12.420\nSo you have what's called an inode,\n\n588\n00:29:12.420 --> 00:29:14.160\nthis is the first concept\nyou need to understand.\n\n589\n00:29:14.160 --> 00:29:17.940\nAnd I have a nice diagram\nhere to show you that.\n\n590\n00:29:17.940 --> 00:29:22.100\nYou'll notice that this is basically\na representation of my drive.\n\n591\n00:29:22.100 --> 00:29:27.810\nAnd there is a block and an actual certain\nsector on my drive that holds information.\n\n592\n00:29:27.810 --> 00:29:28.790\nThey call that an inode.\n\n593\n00:29:28.790 --> 00:29:30.770\nIt's the attributes of the file.\n\n594\n00:29:30.770 --> 00:29:34.300\nThe permissions, the blocks that it\nresides on, that's what the inode does.\n\n595\n00:29:34.300 --> 00:29:36.600\nIt points to that area and\nholds that information.\n\n596\n00:29:36.600 --> 00:29:40.340\nSo that's something you need to kind of\nunderstand, when it comes to links and\n\n597\n00:29:40.340 --> 00:29:42.290\nthe difference between the two.\n\n598\n00:29:42.290 --> 00:29:45.460\nWhen you come to a hard link,\n\n599\n00:29:45.460 --> 00:29:51.030\nwhat happens is when i create a hard link,\nit basically creates another pointer.\n\n600\n00:29:51.030 --> 00:29:52.820\nSo once I create a file,\nI create crazy file.\n\n601\n00:29:52.820 --> 00:29:55.420\nCrazy file is on my system.\n\n602\n00:29:55.420 --> 00:29:59.430\nSystem, and it points to an Inode that\nsays, take up this space on the drive,\n\n603\n00:29:59.430 --> 00:30:02.290\nhave these attributes and permissions,\nand other certain things,\n\n604\n00:30:02.290 --> 00:30:04.130\nthat's basically what you need to know.\n\n605\n00:30:04.130 --> 00:30:07.950\nSo when I reference that file name,\nthat's what it's doing.\n\n606\n00:30:07.950 --> 00:30:09.620\nIt's actually looking at that inode.\n\n607\n00:30:09.620 --> 00:30:11.110\nBut if I create a hard link,\n\n608\n00:30:11.110 --> 00:30:14.320\nyou'll notice,\nhard link goes to the same inode, right.\n\n609\n00:30:14.320 --> 00:30:16.880\nDoesn't create a new Inode.\n\n610\n00:30:17.880 --> 00:30:19.780\nIt looks at the exact same one.\n\n611\n00:30:19.780 --> 00:30:22.420\nSo if I delete deleted file one.\n\n612\n00:30:22.420 --> 00:30:23.770\nThat inode is still there.\n\n613\n00:30:23.770 --> 00:30:27.248\nIt doesn't disappear because,\nit's got a link to hard link one.\n\n614\n00:30:27.248 --> 00:30:30.030\nSo hard link one would\nhave to be deleted before,\n\n615\n00:30:30.030 --> 00:30:32.990\nthat inode would say\nokay i've guess I'm done.\n\n616\n00:30:32.990 --> 00:30:35.370\nI no longer need to keep that information.\n\n617\n00:30:35.370 --> 00:30:37.180\nThen it would delete that stuff.\n\n618\n00:30:37.180 --> 00:30:40.580\nSo hard links are basically duplicates,\n\n619\n00:30:40.580 --> 00:30:43.840\nduplicate pointers to\nthe same inode location.\n\n620\n00:30:43.840 --> 00:30:46.150\nThat's what you need to understand.\n\n621\n00:30:46.150 --> 00:30:49.260\nUnderstand about hard links, okay?.\n\n622\n00:30:49.260 --> 00:30:51.080\nSoft links, on the other hand,\nor symlinks,\n\n623\n00:30:51.080 --> 00:30:53.750\nsymbolic links are different, right?.\n\n624\n00:30:53.750 --> 00:30:58.410\nIf I have the file, that's the original\npointer toward the inode and\n\n625\n00:30:58.410 --> 00:30:59.670\ncreate a symbolic link or a soft link.\n\n626\n00:30:59.670 --> 00:31:05.560\nIt's actually a reference to that\none hard link to that pointer,\n\n627\n00:31:05.560 --> 00:31:06.860\nthat actual file name.\n\n628\n00:31:06.860 --> 00:31:07.780\nIt is not the same.\n\n629\n00:31:07.780 --> 00:31:11.080\nYou'll notice it doesn't\nshare that inode property.\n\n630\n00:31:11.080 --> 00:31:12.265\nIf I.\nI delete that file,\n\n631\n00:31:12.265 --> 00:31:15.195\nthat symlink is just broken\nbecause it says there's\n\n632\n00:31:15.195 --> 00:31:17.915\nnothing there because the inode is\ngone and the link to it is gone,\n\n633\n00:31:17.915 --> 00:31:22.245\nthe pointer that tells that symbolic link\nwhere to look has disappeared, it is gone.\n\n634\n00:31:22.245 --> 00:31:24.765\nSo that's what happens with\nsymbolic versus hard links.\n\n635\n00:31:24.765 --> 00:31:28.075\nSo now that you understand that,\nwhy would we use hard links and\n\n636\n00:31:28.075 --> 00:31:29.925\nwhy would we use soft links?\n\n637\n00:31:29.925 --> 00:31:33.265\nIf I want to make sure that\n\n638\n00:31:34.635 --> 00:31:38.495\ninformation to that inode stays secure and\nthat it is a hard push.\n\n639\n00:31:38.495 --> 00:31:41.315\nThis is something that programmers\nreally worry about a lot, and\n\n640\n00:31:41.315 --> 00:31:43.365\nsometimes in systems administration.\n\n641\n00:31:43.365 --> 00:31:47.155\nI'm having a hard time thinking of\nsomething off the top of my head of\n\n642\n00:31:47.155 --> 00:31:51.215\nwhat you would want to do one or\nthe other.\n\n643\n00:31:51.215 --> 00:31:53.225\nUsually though,\nsim links are the way to go.\n\n644\n00:31:53.225 --> 00:31:56.395\nI'm just creating a pointer to my pointer,\nright?\n\n645\n00:31:56.395 --> 00:32:00.651\nBecause, and\nhere's where I normally use it for myself,\n\n646\n00:32:00.651 --> 00:32:03.545\nI have a program I've installed.\n\n647\n00:32:03.545 --> 00:32:07.165\nI've written a script in my\nscripts folder that I keep.\n\n648\n00:32:07.165 --> 00:32:11.935\nIf I want my system to\nbe able to run that I\n\n649\n00:32:11.935 --> 00:32:16.305\nneed to copy that script to one of\nthe path variables right there.\n\n650\n00:32:16.305 --> 00:32:19.915\nThere's a path that says anything\nin this path- like if you try to\n\n651\n00:32:19.915 --> 00:32:23.465\nrun a command without giving\nthe path name how does it know\n\n652\n00:32:23.465 --> 00:32:26.425\nlike when I type LS to go to\nwhere LS actually resides?\n\n653\n00:32:26.425 --> 00:32:29.765\nWell that's in that path,\nit looks in these specific directories and\n\n654\n00:32:29.765 --> 00:32:32.075\nthat path variable lets\nyou know where that is.\n\n655\n00:32:32.075 --> 00:32:36.655\nSo, I use a simlink to actually create\na link in one of those directories without\n\n656\n00:32:36.655 --> 00:32:40.575\nhaving to move anything and\nthen it just looks at my symbolic link and\n\n657\n00:32:40.575 --> 00:32:47.535\nit knows go point it back to where that\nscript's folder actually is and run that.\n\n658\n00:32:47.535 --> 00:32:52.335\nSo it can become and makes it easier, I'm\nnot making copies of everything all over\n\n659\n00:32:52.335 --> 00:32:54.305\nbecause what if I wanted to modify that.\n\n660\n00:32:54.305 --> 00:32:55.825\nThen I'd have to create a .old and\n\n661\n00:32:55.825 --> 00:32:58.125\nthis and that working with\na bunch of different files.\n\n662\n00:32:58.125 --> 00:33:01.985\nSim links make it easier for\nyou to reference actual files and\n\n663\n00:33:01.985 --> 00:33:03.185\nscripts and things like that.\n\n664\n00:33:03.185 --> 00:33:04.125\nSo how do we do that?\n\n665\n00:33:04.125 --> 00:33:07.655\nWell that's the big name of the game we're\nalmost done here take me two seconds to\n\n666\n00:33:07.655 --> 00:33:08.545\nshow you here.\n\n667\n00:33:08.545 --> 00:33:09.805\nLets create some links.\n\n668\n00:33:09.805 --> 00:33:14.925\nLets say I want to create\na hard link to crazyfile1.\n\n669\n00:33:14.925 --> 00:33:18.795\nAll right, so what we would do is\nwe would say in and let's see here.\n\n670\n00:33:18.795 --> 00:33:22.515\nYou go from your target where I want and\nthen to the link name.\n\n671\n00:33:22.515 --> 00:33:24.985\nThat's what you're looking for right.\n\n672\n00:33:24.985 --> 00:33:29.025\nSo in and it will be target and\nthen link name like this.\n\n673\n00:33:29.025 --> 00:33:31.685\nSo that's kind of the structure.\n\n674\n00:33:31.685 --> 00:33:35.325\nSo my target would be crazyfile1 and\nmy link name\n\n675\n00:33:38.505 --> 00:33:41.565\nto be whatever I want it to be.\n\n676\n00:33:41.565 --> 00:33:46.625\nSo if I want to be, and since this is a\nhard link that we are creating right here,\n\n677\n00:33:46.625 --> 00:33:47.895\nI'll call it hard crazy.\n\n678\n00:33:47.895 --> 00:33:54.845\nHard crazy, like that allows me to kind of\nunderstand what's going on and hit enter.\n\n679\n00:33:54.845 --> 00:33:55.535\nI do an LS.\n\n680\n00:33:55.535 --> 00:33:59.335\nLook, I've got this nice little blue\ncolored backward colored crazy file.\n\n681\n00:33:59.335 --> 00:34:01.025\nLet's me know it's a link.\n\n682\n00:34:01.025 --> 00:34:06.475\nI can also do an LS dash L and\noh I thought there was a link in it,\n\n683\n00:34:06.475 --> 00:34:08.705\nbut that will let you know.\n\n684\n00:34:08.705 --> 00:34:10.115\nThat is a hard link.\n\n685\n00:34:10.115 --> 00:34:14.535\nI can delete crazy file one and\ncrazy file one link or I'm sorry.\n\n686\n00:34:14.535 --> 00:34:17.385\nHard link here,\nhard_crazy will still work.\n\n687\n00:34:17.385 --> 00:34:21.687\nIt will still have the same because\nit's pointing to that, right?\n\n688\n00:34:21.687 --> 00:34:28.415\nThat's the difference, and these colors\nlet you know that they're linked together.\n\n689\n00:34:28.415 --> 00:34:29.195\nSo that's pretty cool.\n\n690\n00:34:29.195 --> 00:34:30.495\nNot a problem.\n\n691\n00:34:30.495 --> 00:34:34.385\nAnd again, like I said,\nthat I can cat CrazyFile1, right.\n\n692\n00:34:34.385 --> 00:34:36.815\nGives me that.\nI can remove CrazyFile1.\n\n693\n00:34:36.815 --> 00:34:42.565\nYou notice CrazyFile1 is gone, and\nI can still cat hard_crazy and\n\n694\n00:34:42.565 --> 00:34:47.895\nit does what it's supposed to because\nthat pointer to the inode is still there.\n\n695\n00:34:47.895 --> 00:34:50.435\nSymlinks on the other hand,\ndifferent story, right.\n\n696\n00:34:50.435 --> 00:34:53.595\nSo let's create a symlink,\nlet's take a look.\n\n697\n00:34:53.595 --> 00:35:00.785\nWe still have crazyfile One I think,\nyou know what that'll work.\n\n698\n00:35:00.785 --> 00:35:01.695\nAll we do is LS, dash.\n\n699\n00:35:02.768 --> 00:35:07.495\nNow, with the soft link, the symbolic\nlink, the same parameters right.\n\n700\n00:35:07.495 --> 00:35:15.055\nSo, we say, crazy file, crazy file one,\nlike so, and the our target.\n\n701\n00:35:15.055 --> 00:35:20.185\nWe'll call it Sim, under store,\ncrazy, and it's giving me a.\n\n702\n00:35:21.825 --> 00:35:23.485\nDid I add the wrong file?\n\n703\n00:35:23.485 --> 00:35:26.895\nI think- I thought I did.\n\n704\n00:35:26.895 --> 00:35:27.415\nLet's see here.\n\n705\n00:35:27.415 --> 00:35:29.705\nLet me try this one more time here.\n\n706\n00:35:29.705 --> 00:35:31.395\nOne more time.\n\n707\n00:35:31.395 --> 00:35:36.015\nLet me delete my string,\ncuz I might just be typing it wrong.\n\n708\n00:35:36.015 --> 00:35:37.795\nDash- oh, there's the problem.\n\n709\n00:35:37.795 --> 00:35:40.365\nLn -s.\nLet's try to do the right command,\n\n710\n00:35:40.365 --> 00:35:42.625\nLowrie, and see how that works.\n\n711\n00:35:42.625 --> 00:35:49.475\nSo let's try CrazyFile1, and and now we\nshould be able to do the sym underscore.\n\n712\n00:35:52.355 --> 00:35:56.280\nThere we go, and\nnow we have sym for crazy,\n\n713\n00:35:56.280 --> 00:36:01.135\nwe do the ls -l, and\nyou'll see where it's linking to.\n\n714\n00:36:01.135 --> 00:36:04.295\nIt's actually built into that long format.\n\n715\n00:36:04.295 --> 00:36:07.755\nIt's nice to be able to see\nexactly where it's pointing to.\n\n716\n00:36:07.755 --> 00:36:12.095\nFor the hard links it doesn't give\nup the ghost as as easily as that,\n\n717\n00:36:12.095 --> 00:36:15.015\nbut that is creating hard links and\nsoft links.\n\n718\n00:36:15.015 --> 00:36:18.585\nI can put it in another file if I want.\n\n719\n00:36:18.585 --> 00:36:24.115\nLike I said, I can move it to like, an\ns-bin or bin or wherever I feel like it.\n\n720\n00:36:24.115 --> 00:36:26.425\nYou just have to give it the actual paths.\n\n721\n00:36:26.425 --> 00:36:31.405\nSo if I wanted CrazyFile1 to have\na sim link in /etsy/whatever/whatever,\n\n722\n00:36:31.405 --> 00:36:36.385\nI would need to put that path, and then\nthe name of the link that I wanted And it\n\n723\n00:36:36.385 --> 00:36:40.065\nwould create it there for me, and make it\neasy for me to, to reference those files.\n\n724\n00:36:40.065 --> 00:36:43.275\nAnd, that Ronny,\nis basically Lynx wrapped up in a ball.\n\n725\n00:36:43.275 --> 00:36:44.935\n>> All right, so,\n\n726\n00:36:44.935 --> 00:36:48.255\ntaking a look at what we've just,\nthe talked about here today, right?\n\n727\n00:36:48.255 --> 00:36:51.025\nSo far we've talked about\nworking with folders and files.\n\n728\n00:36:51.025 --> 00:36:54.465\nAnd you also showed us not only how to\ncreate folders and folders and files, but\n\n729\n00:36:54.465 --> 00:36:57.385\nalso how we can navigate\nthroughout the file system itself.\n\n730\n00:36:57.385 --> 00:36:59.435\nWe took a look,\na little bit about the find command,\n\n731\n00:36:59.435 --> 00:37:01.355\nwhere we're able to use that.\n\n732\n00:37:01.355 --> 00:37:05.745\nThat command also helps search out and\nfind exact file that we're walking, or\n\n733\n00:37:05.745 --> 00:37:06.925\nlooking at, walking to.\n\n734\n00:37:06.925 --> 00:37:09.925\nWhere we're actually looking at it and\nbe able to work with that.\n\n735\n00:37:09.925 --> 00:37:12.285\nAnd then lastly we also talked\nabout different lengths,\n\n736\n00:37:12.285 --> 00:37:16.655\ngoing to the i nodes as well as hard\nlinks, and the sim links as well.\n\n737\n00:37:16.655 --> 00:37:20.985\nAll these are actually building blocks\nto what we're building up to, which of\n\n738\n00:37:20.985 --> 00:37:24.745\ncourse is getting into the scripting\nside of working with bash as well.\n\n739\n00:37:24.745 --> 00:37:28.455\nSo understanding at least the file and\nthe fundamentals that we've done so\n\n740\n00:37:28.455 --> 00:37:31.985\nfar in these episodes is really those\nbuilding blocks, cuz we're gonna see,\n\n741\n00:37:31.985 --> 00:37:34.185\nlike Daniel said, that the sim links and\n\n742\n00:37:34.185 --> 00:37:38.355\nthe hard links are gonna be important\nwhen it comes down to the scripting and\n\n743\n00:37:38.355 --> 00:37:41.825\ndepending on what we need done, and\nthat's why we're also looking at that too.\n\n744\n00:37:41.825 --> 00:37:45.265\nBeing able to create that script where we\nwant to is also important and why this\n\n745\n00:37:45.265 --> 00:37:49.355\nshow also helps us to understand what\nwe're gonna be doing later on as well.\n\n746\n00:37:49.355 --> 00:37:52.925\nSo thank you Daniel for showing us\nthose demos We really do appreciate it.\n\n747\n00:37:52.925 --> 00:37:57.375\nCuz it does help us actually get\na little bit more comfortable in working\n\n748\n00:37:57.375 --> 00:37:59.335\ninside of the bash cell as well.\n\n749\n00:37:59.335 --> 00:38:02.535\nSo saying that,\nwell that means it's a great time for\n\n750\n00:38:02.535 --> 00:38:04.235\nus to go ahead and end this episode.\n\n751\n00:38:04.235 --> 00:38:05.915\nThank you for watching.\n\n752\n00:38:05.915 --> 00:38:09.815\nSigning off for IT Hey Pro TV,\nI'm Ronny Wong.\n\n753\n00:38:09.815 --> 00:38:11.465\n>> I'm Daniel Lowery.\n\n754\n00:38:11.465 --> 00:38:16.325\n>> And we'll see you next time.\n\n755\n00:38:16.325 --> 00:38:22.370\n[MUSIC]\n\n",
          "vimeoId": "145426746"
        },
        {
          "description": "In this episode, Ronnie and Daniel discuss permissions and changing permission in BASH.  This topic is important as we may need to change permissions for users to be able to run files, according the guys.  They take some time to show how to see the permissions, modify them also show how to seize ownership of the files.",
          "length": "2226",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-4-1-permissions_in_bash-111015-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-4-1-permissions_in_bash-111015-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-4-1-permissions_in_bash-111015-1-sm.jpg",
          "title": "Permissions in Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.286 --> 00:00:10.286\n[MUSIC]\n\n2\n00:00:12.163 --> 00:00:14.764\nWelcome to another exciting\nepisode here on IT Pro TV.\n\n3\n00:00:14.764 --> 00:00:19.109\nI'm your host Ronnie Wong, and today were\ntalking about bash as well as working and\n\n4\n00:00:19.109 --> 00:00:20.428\nscripting a little bit.\n\n5\n00:00:20.428 --> 00:00:23.565\nAnd to help us out is going\nto be Daniel Lowrie, and\n\n6\n00:00:23.565 --> 00:00:28.446\ntoday were taking a look at permissions\nusing bash and setting permissions.\n\n7\n00:00:28.446 --> 00:00:29.920\nAnd this is a really important topic.\n\n8\n00:00:29.920 --> 00:00:34.485\nThe reason why is that remember that\nLinux really does revolve around using\n\n9\n00:00:34.485 --> 00:00:36.373\na multi-user type of system.\n\n10\n00:00:36.373 --> 00:00:38.941\nIn other words, multiple users can\nbe logged in at the same time, and\n\n11\n00:00:38.941 --> 00:00:41.128\nthat means it's very important\nthat we understand that.\n\n12\n00:00:41.128 --> 00:00:44.368\nAs we start setting permissions,\nas we start getting into scripting,\n\n13\n00:00:44.368 --> 00:00:46.366\nwe need to know who can actually do what,\nand\n\n14\n00:00:46.366 --> 00:00:49.775\nhow we can actually protect ourselves\nin working with those files as well.\n\n15\n00:00:49.775 --> 00:00:51.492\nAnd Daniel you're going\nto actually help us out.\n\n16\n00:00:51.492 --> 00:00:55.613\nBecause, there's a lot of details in\nsetting up permissions with BASH.\n\n17\n00:00:55.613 --> 00:00:57.760\n>> Yeah,\nit's not your mama's old permissions.\n\n18\n00:00:57.760 --> 00:00:59.559\nRight?\nActually, it probably is old.\n\n19\n00:00:59.559 --> 00:01:01.630\n[LAUGH] It's quite old,\nas a matter of fact.\n\n20\n00:01:01.630 --> 00:01:04.450\nAnd, we're going to take a look at some\nof those older ways in which we're\n\n21\n00:01:04.450 --> 00:01:06.230\ngoing to set permissions on that.\n\n22\n00:01:06.230 --> 00:01:08.570\nRonnie hit the nail on the head.\n\n23\n00:01:08.570 --> 00:01:10.170\nHe talked about multi-user system.\n\n24\n00:01:10.170 --> 00:01:13.060\nHe talked about having\nmultiple users logging in or\n\n25\n00:01:13.060 --> 00:01:15.540\njust being a part of our operating system.\n\n26\n00:01:15.540 --> 00:01:21.190\nThat being said, how do I stop user\nA from accessing user B's resources?\n\n27\n00:01:21.190 --> 00:01:24.400\nOr, how do I make it to where user\nB can access user A's resources.\n\n28\n00:01:24.400 --> 00:01:27.910\nIt can get a little\nconfusing from time to time.\n\n29\n00:01:27.910 --> 00:01:30.420\nAnd if you've worked in any\noperating system in the last,\n\n30\n00:01:30.420 --> 00:01:32.300\nI don't know Ronnie, what, 30 years?\n\n31\n00:01:32.300 --> 00:01:33.107\n>> Probably.\n\n32\n00:01:33.107 --> 00:01:37.137\n>> You, at least, have some understanding\nof why we set file permissions, and\n\n33\n00:01:37.137 --> 00:01:39.004\nmaybe even what some of them may be.\n\n34\n00:01:39.004 --> 00:01:41.165\nBut were gonna make sure to\nstart from the beginning.\n\n35\n00:01:41.165 --> 00:01:42.756\nRefresher, that kinda thing, and\n\n36\n00:01:42.756 --> 00:01:45.870\nmove right through the differences\nof the different permissions.\n\n37\n00:01:45.870 --> 00:01:48.020\nHow we set permissions,\nand so on and so forth.\n\n38\n00:01:48.020 --> 00:01:52.170\nSo that we're able to actually gain\naccess or block access to resources and\n\n39\n00:01:52.170 --> 00:01:52.860\nso on from there.\n\n40\n00:01:54.140 --> 00:01:57.050\nAll right, so that being said,\nlet's talk about users, right?\n\n41\n00:01:57.050 --> 00:01:59.650\nWe sense a multi-user system.\n\n42\n00:01:59.650 --> 00:02:04.290\nWhen you're in any Unix or Linux\nenvironment, you're almost invariably, and\n\n43\n00:02:04.290 --> 00:02:07.090\nI say almost invariably Invariably,\nbecause I'm being facetious.\n\n44\n00:02:07.090 --> 00:02:09.400\nInvariably there will\nat least be one user.\n\n45\n00:02:09.400 --> 00:02:10.930\nThat user is root.\n\n46\n00:02:10.930 --> 00:02:11.830\nThe root user.\n\n47\n00:02:11.830 --> 00:02:16.668\nHe is the almighty dictator\nof that operating system.\n\n48\n00:02:16.668 --> 00:02:21.260\nHe has carte blanche to do anything and\neverything that they wish to do.\n\n49\n00:02:21.260 --> 00:02:25.970\nIf you are logged in as the root user,\nit will not stop you.\n\n50\n00:02:25.970 --> 00:02:30.960\nThe system believes that because you are\nroot, you can do anything you want to do.\n\n51\n00:02:30.960 --> 00:02:34.910\nBecause your the root guy and\nyou shouldn't try to balk at you or\n\n52\n00:02:34.910 --> 00:02:37.720\ntell hey man you sure you\nwanna do that kinda thing.\n\n53\n00:02:37.720 --> 00:02:40.770\nHey it's the root user\ndo what he says right.\n\n54\n00:02:40.770 --> 00:02:41.530\nHe's evil and\n\n55\n00:02:41.530 --> 00:02:46.470\nmean and he'll bring the hammer down if\nwe don't just follow his orders blindly.\n\n56\n00:02:46.470 --> 00:02:48.080\nThat is the power of root user.\n\n57\n00:02:48.080 --> 00:02:51.474\nThat user is built into the system.\n\n58\n00:02:51.474 --> 00:02:55.097\nAnd you know what a lot of people\nthey install a nix operating\n\n59\n00:02:55.097 --> 00:02:59.882\nsystem of some sort and they login as root\nand they do everything they want, and\n\n60\n00:02:59.882 --> 00:03:02.881\nthey live happily ever after,\nor so they think.\n\n61\n00:03:02.881 --> 00:03:07.141\nProblem comes into it's kind of dangerous\nto be able to do whatever you want, right?\n\n62\n00:03:07.141 --> 00:03:10.228\n>> [LAUGH]\n>> Imagine your child had the ability to\n\n63\n00:03:10.228 --> 00:03:11.669\ndo whatever they wanted.\n\n64\n00:03:11.669 --> 00:03:16.149\nYou ever see the old Twilight Zone\nepisode where that kid is\n\n65\n00:03:16.149 --> 00:03:19.540\nable to make his fantasies become reality?\n\n66\n00:03:19.540 --> 00:03:23.120\nThat was a scary scary episode, because\nthat kid did whatever he felt like doing.\n\n67\n00:03:23.120 --> 00:03:24.340\nThat's basically our root user.\n\n68\n00:03:24.340 --> 00:03:26.640\nThey can do whatever they want.\n\n69\n00:03:26.640 --> 00:03:28.470\nYou can get yourself\ninto a lot of trouble,\n\n70\n00:03:28.470 --> 00:03:33.440\nhose your system up completely, make it\nunusable even and they won't stop you.\n\n71\n00:03:33.440 --> 00:03:35.550\nThey'll say yeah, go ahead, rock and roll.\n\n72\n00:03:35.550 --> 00:03:37.030\nDo whatever you feel like doing.\n\n73\n00:03:37.030 --> 00:03:39.450\nSo it's a dangerous\nthing to log in as root.\n\n74\n00:03:39.450 --> 00:03:42.290\nDoes that mean that sometimes\nwe never log in as root?\n\n75\n00:03:42.290 --> 00:03:44.280\nNo, sometimes we will do that.\n\n76\n00:03:44.280 --> 00:03:46.632\nWe will use that route user account for\n\n77\n00:03:46.632 --> 00:03:51.204\ncertain specific administrative\nfunctions that we need to accomplish.\n\n78\n00:03:51.204 --> 00:03:55.658\nOther than that we log in as a normal\nuser, that is the best security practice,\n\n79\n00:03:55.658 --> 00:04:00.468\na because you remember if you're logged in\nas root, you have the ability anything.\n\n80\n00:04:00.468 --> 00:04:03.161\nWhat happens if your\naccount gets compromised?\n\n81\n00:04:03.161 --> 00:04:06.564\nThat person that logins in with your now\ncompromised account now has the ability to\n\n82\n00:04:06.564 --> 00:04:07.561\ndo whatever they want.\n\n83\n00:04:07.561 --> 00:04:09.964\nSo there's some security\nbuilt in there as well.\n\n84\n00:04:09.964 --> 00:04:14.143\nThat logging in as a standard user\nwithout all the privileges in the world.\n\n85\n00:04:14.143 --> 00:04:15.490\nThat's a good thing, right?\n\n86\n00:04:15.490 --> 00:04:19.993\nNow you will have people that just want to\nsit down on the computer, create files,\n\n87\n00:04:19.993 --> 00:04:23.160\ndo things, and\nthey're just a real standard user.\n\n88\n00:04:23.160 --> 00:04:26.780\nAnd then you've got other\nusers that are going to be in\n\n89\n00:04:26.780 --> 00:04:30.830\npart of what's called the pseudo group,\nhowever you like to say it.\n\n90\n00:04:30.830 --> 00:04:32.870\nI think user nomenclature is fine.\n\n91\n00:04:32.870 --> 00:04:34.629\nBut they're basically your power users.\n\n92\n00:04:34.629 --> 00:04:39.273\nAnd so instead of logging in as root,\nI can log in as myself, and\n\n93\n00:04:39.273 --> 00:04:45.168\nthen use the sudo command to elevate my\nprivileges for that one time operation.\n\n94\n00:04:45.168 --> 00:04:50.647\nI'm not always logged in with the higher\nstatus, and that's a good thing.\n\n95\n00:04:50.647 --> 00:04:55.209\nIt helps us run those administrative\ntasks as we need to, get that done, and\n\n96\n00:04:55.209 --> 00:04:57.578\ngo right back to being a standard user.\n\n97\n00:04:57.578 --> 00:04:59.180\n>> Now Daniel,\nI'm more familiar with Windows.\n\n98\n00:04:59.180 --> 00:05:00.770\nBecause that's kinda what I grew up in.\n\n99\n00:05:00.770 --> 00:05:05.393\nBut that does sound like that is the way\nthat Windows has finally kind of caught up\n\n100\n00:05:05.393 --> 00:05:07.538\nto using that user account control.\n\n101\n00:05:07.538 --> 00:05:09.314\nWell everybody logs in a standard user but\n\n102\n00:05:09.314 --> 00:05:12.473\nwhen administrative things need to be\ndone they just need to hit consent.\n\n103\n00:05:12.473 --> 00:05:15.815\nBut what you're saying though is they can\nactually have that inside the Linux, but\n\n104\n00:05:15.815 --> 00:05:18.740\nall they actually use is sudo or sudo,\nI don't know how to pronounce it.\n\n105\n00:05:18.740 --> 00:05:20.779\nAnd then they are able to\ntype in their command and\n\n106\n00:05:20.779 --> 00:05:23.186\nthat elevates their privileges\nto run what they need to.\n\n107\n00:05:23.186 --> 00:05:24.765\n>> That is nail on the head.\n\n108\n00:05:24.765 --> 00:05:26.286\nRonnie has it perfectly.\n\n109\n00:05:26.286 --> 00:05:30.023\nIt took Windows, I've done quite\na few shows on active directory.\n\n110\n00:05:30.023 --> 00:05:32.780\nThings with Mike, Windows 10 and\nthey're a lot of fun and\n\n111\n00:05:32.780 --> 00:05:36.092\nthen when he comes to permissions\nI'm like, we've been doing this for\n\n112\n00:05:36.092 --> 00:05:37.928\nyears in a Linux environment, right.\n\n113\n00:05:37.928 --> 00:05:40.466\nIt is the better way to go when\nthat security comes along you don't\n\n114\n00:05:40.466 --> 00:05:42.189\nwant to be logging in\nas the administrator.\n\n115\n00:05:42.189 --> 00:05:46.020\nYou want to elevate for that one\ntime thing and then move back down.\n\n116\n00:05:46.020 --> 00:05:49.747\nNow that's not to say that you have\nto just, okay I'm a regular user.\n\n117\n00:05:49.747 --> 00:05:52.684\nI want I want to be,\ndo some administrative stuff.\n\n118\n00:05:52.684 --> 00:05:55.325\nI can do a sudo or I can log in as root.\n\n119\n00:05:55.325 --> 00:05:57.360\nYou can also switch users.\n\n120\n00:05:57.360 --> 00:06:01.130\nSo I might have multiple users\nto do administrative tasks.\n\n121\n00:06:01.130 --> 00:06:07.210\nI might be dlowrie on this system and\ndlowrie a as well, have two accounts.\n\n122\n00:06:07.210 --> 00:06:10.672\nMy normal standard user account\ndoesn't have psuedo privileges, but\n\n123\n00:06:10.672 --> 00:06:11.670\nmy d lowrie a does.\n\n124\n00:06:11.670 --> 00:06:15.292\nSo when I need to do\nadministrative things, this,\n\n125\n00:06:15.292 --> 00:06:19.098\nagain's another layer of safety for\nus in security.\n\n126\n00:06:19.098 --> 00:06:22.359\nI can log in as dlowrie whenever I\nneed to do administrative things.\n\n127\n00:06:22.359 --> 00:06:25.161\nI'll need switch user over to dlowrie a,\nso\n\n128\n00:06:25.161 --> 00:06:28.270\nthat I can sudo things\nthat I need to be done.\n\n129\n00:06:28.270 --> 00:06:32.210\nBut, then when I'm done, I exit out and\nI'm back to my standard user.\n\n130\n00:06:32.210 --> 00:06:35.850\nAnd it, it just gives another,\nlike I said, another layer of protection.\n\n131\n00:06:35.850 --> 00:06:38.810\nBecause I'm not,\nI'm not even logging in a lot as.\n\n132\n00:06:38.810 --> 00:06:40.000\nProbably gonna have a longer password.\n\n133\n00:06:40.000 --> 00:06:45.700\nWe're more complexity better security\ngoing along with that user account.\n\n134\n00:06:45.700 --> 00:06:48.123\nSo, it's all about keeping\nus out of the weeds.\n\n135\n00:06:48.123 --> 00:06:51.584\nNow, talked about this long enough let's\ngo ahead and jump into my screen here and\n\n136\n00:06:51.584 --> 00:06:54.206\ntake a look at this and\nhow this actually works out in reality.\n\n137\n00:06:54.206 --> 00:06:57.921\nI am logged into my Linux box here.\n\n138\n00:06:57.921 --> 00:07:00.207\nThis is CentOS 7 I believe.\n\n139\n00:07:00.207 --> 00:07:04.409\nAnd you'll see here my user\naccount is well user one.\n\n140\n00:07:04.409 --> 00:07:08.008\nFind that out, actually,\nby saying who am I?\n\n141\n00:07:08.008 --> 00:07:11.260\nJust type that command in, and\nyou'll see I get this nice user one.\n\n142\n00:07:11.260 --> 00:07:11.863\nGreat.\n\n143\n00:07:11.863 --> 00:07:14.330\nObviously, that is a fantastic thing.\n\n144\n00:07:14.330 --> 00:07:15.640\nWell, what if I want to switch users?\n\n145\n00:07:15.640 --> 00:07:16.860\nI'm, I'm not user one, I'm dlowrie, right?\n\n146\n00:07:16.860 --> 00:07:18.300\nThat's my administrative account.\n\n147\n00:07:18.300 --> 00:07:20.468\nThat's what I wanna maybe do\nsome administrative stuff with.\n\n148\n00:07:20.468 --> 00:07:24.404\nI can do S-U for switch user, right?\n\n149\n00:07:24.404 --> 00:07:26.088\nAnd then just name\nthe account I want to S-U to.\n\n150\n00:07:26.088 --> 00:07:28.304\nSo, for me it would be dlowrie.\n\n151\n00:07:28.304 --> 00:07:29.825\nAnd now it's gonna ask me for\nthe password for that.\n\n152\n00:07:29.825 --> 00:07:31.149\nNot like you just get to say hey.\n\n153\n00:07:31.149 --> 00:07:32.125\nThis is a good time.\n\n154\n00:07:32.125 --> 00:07:33.286\nI'm just going to start switching users.\n\n155\n00:07:33.286 --> 00:07:34.272\nThat's always fun.\n\n156\n00:07:34.272 --> 00:07:35.696\nNo, no.\nYou got to actually have\n\n157\n00:07:35.696 --> 00:07:36.722\nthe credentials for it.\n\n158\n00:07:36.722 --> 00:07:40.028\nSo type that password in right there, and\n\n159\n00:07:40.028 --> 00:07:44.289\nnow you'll notice if I do the who am I,\nI get dlowrie.\n\n160\n00:07:44.289 --> 00:07:49.045\nI have successfully switched from\nuser one into the dlowrie user.\n\n161\n00:07:49.045 --> 00:07:50.510\ndlowrie is in the pseudo group, so\n\n162\n00:07:50.510 --> 00:07:54.530\nif I need to run something with\nelevated permissions, I can do that.\n\n163\n00:07:54.530 --> 00:07:57.040\nAnd this is normally going to be for\nlike installing software and\n\n164\n00:07:57.040 --> 00:07:58.300\nthings of that nature, right?\n\n165\n00:07:58.300 --> 00:08:03.020\nSo, normally systems don't like non\nadministrators to install software.\n\n166\n00:08:03.020 --> 00:08:05.710\nSo if I wanted to do that\nI could do that here.\n\n167\n00:08:05.710 --> 00:08:09.620\nI'm trying to think of anything else at\nthe top of my mind that would give me,\n\n168\n00:08:09.620 --> 00:08:12.330\nI guess like creating users and\nthings of that nature.\n\n169\n00:08:12.330 --> 00:08:15.960\nWe're gonna see a lot of actually\nusing the sudo command, but\n\n170\n00:08:15.960 --> 00:08:18.626\nall you do is hit sudo and I config.\n\n171\n00:08:18.626 --> 00:08:24.020\nThere's actually in some systems\nifconfig is a protected command so\n\n172\n00:08:24.020 --> 00:08:25.290\nthis might actually be a good example.\n\n173\n00:08:25.290 --> 00:08:27.030\nSo ifconfig and I hit Return.\n\n174\n00:08:27.030 --> 00:08:30.830\nNotice it's asking me for the same\npassword that I've already entered.\n\n175\n00:08:30.830 --> 00:08:34.860\nThis is so that it knows that I\nreally do want to elevate privileges.\n\n176\n00:08:34.860 --> 00:08:38.800\nThis isn't some sort of automated\nprogram trying to break security,\n\n177\n00:08:38.800 --> 00:08:41.650\nso it's asking me for my password.\n\n178\n00:08:41.650 --> 00:08:45.340\nLet's put that in there and\nthen it completes the command.\n\n179\n00:08:45.340 --> 00:08:49.020\nSo any time you get a permission is\ndenied, if you're in that sudo group,\n\n180\n00:08:49.020 --> 00:08:52.860\nyou can sudo the command, and\nthen it'll elevate your privileges and\n\n181\n00:08:52.860 --> 00:08:55.410\nyou won't get that permission is denied.\n\n182\n00:08:55.410 --> 00:08:59.110\nAnd you can also obviously login as root,\nand we do that to get out,\n\n183\n00:08:59.110 --> 00:09:01.860\nto go back to the original\nuser you've logged in as.\n\n184\n00:09:01.860 --> 00:09:06.000\nJust type in exit, and\nyou'll notice whoami, if I can spell it,\n\n185\n00:09:06.000 --> 00:09:08.750\nwhich I can't, this is very difficult.\n\n186\n00:09:08.750 --> 00:09:10.521\nThere we go, I'm back to user1.\n\n187\n00:09:10.521 --> 00:09:13.911\nIf you just do su, it defaults to root.\n\n188\n00:09:13.911 --> 00:09:20.657\nSo if I just did su, it's asking me for\na password, and there we go.\n\n189\n00:09:20.657 --> 00:09:25.254\nYou'll notice that the good old\nwhoami lets me know I am now root.\n\n190\n00:09:25.254 --> 00:09:28.394\nSo if you just leave that off,\nit'll take you right into root and\n\n191\n00:09:28.394 --> 00:09:31.429\nI have full system access to\nwhatever I need to do at all times.\n\n192\n00:09:31.429 --> 00:09:34.215\n>> Now Daniel, let's say that\nwe do end up logging in as root.\n\n193\n00:09:34.215 --> 00:09:37.955\nOne of the best practice is, though, is\nthat after we do what we need to, right,\n\n194\n00:09:37.955 --> 00:09:39.111\nis to immediately try and\n\n195\n00:09:39.111 --> 00:09:42.758\nleave that because we don't wanna leave\nourselves logged in as root, right?\n\n196\n00:09:42.758 --> 00:09:44.289\n>> Oh yeah, yeah.\nYou don't wanna stay logged in as root.\n\n197\n00:09:44.289 --> 00:09:46.600\nIt's just a bad practice\nall the way around.\n\n198\n00:09:46.600 --> 00:09:50.440\nSo get into the habit of saying,\nokay I'm logged in as root, I need to do\n\n199\n00:09:50.440 --> 00:09:54.297\nthese administrative privileges as root or\nwhatever it is I'm doing.\n\n200\n00:09:54.297 --> 00:09:58.719\nAnd then as soon as you're done,\nlike Ronnie said, jump back out, hit that,\n\n201\n00:09:58.719 --> 00:10:01.669\nif you look at my screen,\njust type in the word exit.\n\n202\n00:10:01.669 --> 00:10:04.873\nAnd it will jump you back to\nthe original user that you logged in.\n\n203\n00:10:04.873 --> 00:10:09.567\nSo those are commands that you're gonna be\ndoing a lot of for changing privileges and\n\n204\n00:10:09.567 --> 00:10:13.813\nwhat you can and cannot do, and\ndifferent permissions that you encounter.\n\n205\n00:10:13.813 --> 00:10:17.279\n>> All right, so Daniel, I know that\nsince we're talking about the idea\n\n206\n00:10:17.279 --> 00:10:21.158\nof setting permissions, one of the most\nuseful commands that we have access to\n\n207\n00:10:21.158 --> 00:10:23.075\nin BASH is gonna be the chmod command.\n\n208\n00:10:23.075 --> 00:10:26.351\nAnd so when we run that, right, what I\nshould see as a regular user is that it\n\n209\n00:10:26.351 --> 00:10:28.483\nmay actually say look if\nyou don't want to try and\n\n210\n00:10:28.483 --> 00:10:30.832\ndo this you're probably\nnot gonna have permission.\n\n211\n00:10:30.832 --> 00:10:35.010\nSo this is when I would use either sudo or\nlogin as the root user right?\n\n212\n00:10:35.010 --> 00:10:39.129\n>> Yeah that's exactly right sometimes\nyou'll encounter files or directories or\n\n213\n00:10:39.129 --> 00:10:41.256\nsomething that you have no permissions.\n\n214\n00:10:41.256 --> 00:10:46.021\nMaybe its a command like we saw with\nioconfig that you don't have permissions\n\n215\n00:10:46.021 --> 00:10:46.689\nto right.\n\n216\n00:10:46.689 --> 00:10:50.015\nIf you wanted to change permissions\nto allow somebody to do that,\n\n217\n00:10:50.015 --> 00:10:51.290\nthe you would use CHmod.\n\n218\n00:10:51.290 --> 00:10:54.150\nNow root users aren't the only\npeople that can use CHmod.\n\n219\n00:10:54.150 --> 00:10:55.210\nAnybody can use this, right?\n\n220\n00:10:55.210 --> 00:10:55.790\n>> Okay.\n\n221\n00:10:55.790 --> 00:10:58.480\n>> You, as a standard user,\nyou can create your own files.\n\n222\n00:10:58.480 --> 00:10:59.850\nYou can create your own directories.\n\n223\n00:10:59.850 --> 00:11:03.500\nAnd you,\nsince you are the owner of those things,\n\n224\n00:11:03.500 --> 00:11:06.270\nyou do have the right to say who can and\ncannot.\n\n225\n00:11:06.270 --> 00:11:08.750\nNow, will that stop the root user?\n\n226\n00:11:08.750 --> 00:11:09.275\nNo.\n>> [LAUGH]\n\n227\n00:11:09.275 --> 00:11:10.740\n>> It will not stop him at all.\n\n228\n00:11:10.740 --> 00:11:15.180\nHe has, like I said,\nhe's the almighty despot of this system.\n\n229\n00:11:15.180 --> 00:11:19.080\nIt will stop your power users up until the\npart where they use the pseudo command.\n\n230\n00:11:19.080 --> 00:11:23.550\nAnd then they'll have the ability\nto override those permissions and\n\n231\n00:11:23.550 --> 00:11:26.390\nbasically elevate up to root level and\ndo whatever they need to do.\n\n232\n00:11:26.390 --> 00:11:30.346\nBut for us regular users, this comes\ndown to what we talked about earlier.\n\n233\n00:11:30.346 --> 00:11:31.610\nI'm logged in a dlowrie.\n\n234\n00:11:31.610 --> 00:11:34.085\nRonnie is logged in as rwong.\n\n235\n00:11:34.085 --> 00:11:37.961\nI don't rwong going any further down\nthis directory than here, right.\n\n236\n00:11:37.961 --> 00:11:42.860\nI don't want rwong being able to\nsee these two files, or read them.\n\n237\n00:11:42.860 --> 00:11:44.680\nMight be able to see them,\nbut he can't read them.\n\n238\n00:11:44.680 --> 00:11:47.390\nOr he can't execute these scripts and\nhe can read them.\n\n239\n00:11:47.390 --> 00:11:49.800\nAnd it's all, it goes right\nback down to our permissions.\n\n240\n00:11:49.800 --> 00:11:51.960\nSo that, that's basically\nwhere we're at with CH mod.\n\n241\n00:11:51.960 --> 00:11:52.980\nThat's what CH mod does.\n\n242\n00:11:52.980 --> 00:11:54.761\nCH mod stands for change modifier.\n\n243\n00:11:54.761 --> 00:11:56.399\nThat's, that's basically what we're doing,\nright?\n\n244\n00:11:56.399 --> 00:11:58.779\nYou have all these modificational bits.\n\n245\n00:11:58.779 --> 00:12:02.632\nWhen it all boils down, at the end of\nthe day, they're your permissions.\n\n246\n00:12:02.632 --> 00:12:06.548\nAnd that's really what we need to get\ninto as we look at the chmod command,\n\n247\n00:12:06.548 --> 00:12:10.466\ncuz that's what it's intended for\nis changing permissions on a file, or\n\n248\n00:12:10.466 --> 00:12:13.080\na directory, or a program,\nwhatever the case.\n\n249\n00:12:14.460 --> 00:12:17.540\nYou gotta remember the bash\nenvironment in Linux environment,\n\n250\n00:12:17.540 --> 00:12:19.270\nthey treat everything as a file.\n\n251\n00:12:19.270 --> 00:12:20.080\nOkay?\n\n252\n00:12:20.080 --> 00:12:21.960\nEven if it's a program,\neven if it's the hardware.\n\n253\n00:12:21.960 --> 00:12:23.290\nRight?\nSo, like my hard drive,\n\n254\n00:12:23.290 --> 00:12:26.580\nitself, is represented in\na A file format here so,\n\n255\n00:12:26.580 --> 00:12:29.160\nfile permissions is really a big deal\nwhen it comes to the batch environment.\n\n256\n00:12:29.160 --> 00:12:31.010\nSo, let's take a look at this stuff.\n\n257\n00:12:31.010 --> 00:12:33.730\nI've actually created\na simple diagram here for\n\n258\n00:12:33.730 --> 00:12:35.520\nus to understand this a little bit better.\n\n259\n00:12:35.520 --> 00:12:37.280\nHopefully this makes some sense for you.\n\n260\n00:12:37.280 --> 00:12:39.220\nWe've got two modes, for permissions.\n\n261\n00:12:39.220 --> 00:12:45.460\nAll right, there's basically we've\ngot symbolic, we've got numeric.\n\n262\n00:12:45.460 --> 00:12:50.265\nLet's, let's boil down even easier than\nthat, we've got easy and we've got hard.\n\n263\n00:12:50.265 --> 00:12:53.450\nOkay, so the easy mode is gonna\nbe the symbolic mode because it\n\n264\n00:12:53.450 --> 00:12:56.640\nworks in a more human\nunderstandable format.\n\n265\n00:12:56.640 --> 00:12:59.510\nYou'll notice right here that we\na have a couple of file permissions.\n\n266\n00:12:59.510 --> 00:13:02.880\nWe have read, we have write,\nand we have execute.\n\n267\n00:13:02.880 --> 00:13:03.890\nThese are standard permissions.\n\n268\n00:13:03.890 --> 00:13:06.250\nI don't care if you come from a Windows\nbackground, a Unix background,\n\n269\n00:13:06.250 --> 00:13:07.510\na Mac background, it doesn't matter.\n\n270\n00:13:07.510 --> 00:13:12.870\nThese are permissions that you're\nprobably pretty familiar with if you've\n\n271\n00:13:12.870 --> 00:13:18.040\never touched any kind of electronic\ndevice that deals with permissions.\n\n272\n00:13:18.040 --> 00:13:20.260\nThese are going to be the ones you see.\n\n273\n00:13:20.260 --> 00:13:21.510\nRead, write and execute.\n\n274\n00:13:21.510 --> 00:13:22.150\nWhat does read mean?\n\n275\n00:13:22.150 --> 00:13:26.130\nIt just means I'm able to read\nthe contents of a file or\n\n276\n00:13:26.130 --> 00:13:27.480\nif it's a program, you can read that.\n\n277\n00:13:27.480 --> 00:13:28.500\nIf it makes any sense.\n\n278\n00:13:28.500 --> 00:13:30.020\nIt won't, it'll come out as garbage.\n\n279\n00:13:30.020 --> 00:13:33.390\nBut you could read it\nif you had permissions.\n\n280\n00:13:33.390 --> 00:13:37.240\nWrite, obviously, I have the ability\nto change and modify what's going on.\n\n281\n00:13:37.240 --> 00:13:37.960\nI can write to it.\n\n282\n00:13:37.960 --> 00:13:40.950\nSo, if It's a text file and I have write\npermissions I can I can go in, I can add,\n\n283\n00:13:40.950 --> 00:13:42.260\nI can take away.\n\n284\n00:13:42.260 --> 00:13:43.260\nI can delete it.\n\n285\n00:13:43.260 --> 00:13:47.750\nI can do whatever I want to, to it,\nbecause I have write permissions.\n\n286\n00:13:47.750 --> 00:13:48.830\nAnd, we have execute.\n\n287\n00:13:48.830 --> 00:13:52.870\nAnd, that's going to come in handy for\nus as we get down into the old\n\n288\n00:13:52.870 --> 00:13:55.320\nscripting stuff, here and\ncoming up in future episodes.\n\n289\n00:13:55.320 --> 00:13:57.930\nThat's why we're talking about this now.\n\n290\n00:13:57.930 --> 00:14:00.940\nSo, that what we do in those episodes,\nmake a little more sense to you.\n\n291\n00:14:00.940 --> 00:14:02.470\nSo, being able to execute\nan executable file.\n\n292\n00:14:02.470 --> 00:14:03.560\nRight?\nThese are the programs.\n\n293\n00:14:03.560 --> 00:14:05.740\nSo, it doesn't make since to, Read a file,\n\n294\n00:14:05.740 --> 00:14:08.810\neven though you need read access\nif you wanna execute something.\n\n295\n00:14:08.810 --> 00:14:12.170\nIt makes sense that you can actually\nlook at it so that it will run.\n\n296\n00:14:12.170 --> 00:14:14.180\nSo, read and\nexecute almost invariably go hand in hand.\n\n297\n00:14:14.180 --> 00:14:16.940\nYou wanna be able to execute something,\nyou need that execute ability,\n\n298\n00:14:16.940 --> 00:14:17.930\nthat means I can run it.\n\n299\n00:14:17.930 --> 00:14:20.180\nSo, that's the important thing.\n\n300\n00:14:20.180 --> 00:14:23.430\nAnd you look down, and\nthat was symbolic mode.\n\n301\n00:14:23.430 --> 00:14:25.360\nYou'll notice that it's R, W, and X.\n\n302\n00:14:25.360 --> 00:14:26.280\nRight?\nR for read,\n\n303\n00:14:26.280 --> 00:14:28.890\nW for write, and X for execute.\n\n304\n00:14:28.890 --> 00:14:34.320\nVery very simplistic Format,\nit's probably gonna be the way you go.\n\n305\n00:14:34.320 --> 00:14:37.800\nBut there is the older\nformat that's still around.\n\n306\n00:14:37.800 --> 00:14:39.600\nAnd it does come in\nhandy from time to time.\n\n307\n00:14:39.600 --> 00:14:42.880\nSo, it's always good to see where we\ncame from to see where we're going.\n\n308\n00:14:42.880 --> 00:14:45.900\nSo, I also wanted to\nshow you that as well.\n\n309\n00:14:45.900 --> 00:14:52.440\nYou'll notice under Numeric format,\nread is represented by the number four.\n\n310\n00:14:52.440 --> 00:14:54.340\nWrite is represented by the number two.\n\n311\n00:14:54.340 --> 00:14:57.150\nAnd execute is Is represented\nby the number one.\n\n312\n00:14:57.150 --> 00:14:58.370\nAnd you're thinking okay, that's cool.\n\n313\n00:14:58.370 --> 00:15:01.440\nSo, if I need to add read\npermissions using numeric format,\n\n314\n00:15:01.440 --> 00:15:02.300\nI would give it a four.\n\n315\n00:15:02.300 --> 00:15:04.990\nIf I needed to do write, I would do 2 and\n\n316\n00:15:04.990 --> 00:15:09.460\nif I needed to do execute,\nI would do a one.\n\n317\n00:15:09.460 --> 00:15:16.900\nThat sounds awesome, but what if I needed\nread and execute, do I do a four and one?\n\n318\n00:15:16.900 --> 00:15:18.030\nYes, but not in that way.\n\n319\n00:15:18.030 --> 00:15:22.540\nYou don't do four and\na one It would think that's crazy, right?\n\n320\n00:15:22.540 --> 00:15:24.070\nAnd actually, as you'll see,\nit will take that,\n\n321\n00:15:24.070 --> 00:15:26.540\nbut it won't work the way\nyou expect it to work.\n\n322\n00:15:26.540 --> 00:15:29.710\nIt will accept that input, but\nthat's not how we want to do it.\n\n323\n00:15:29.710 --> 00:15:33.410\nWhat we need to do is we actually need\nto do some addition, which we can do,\n\n324\n00:15:33.410 --> 00:15:34.760\nif anybody's ever gotten past,\n\n325\n00:15:34.760 --> 00:15:38.026\nI don't know, first grade,\nyou should be able to do this math.\n\n326\n00:15:38.026 --> 00:15:39.050\n>> [LAUGH]\n>> it's very simple.\n\n327\n00:15:39.050 --> 00:15:41.230\nI'm horrible mathematician,\nand I can do this, so\n\n328\n00:15:41.230 --> 00:15:44.115\nI have full confidence that you people\nwill be able to do this as well.\n\n329\n00:15:44.115 --> 00:15:44.663\n>> [LAUGH] Except for Ron.\n\n330\n00:15:44.663 --> 00:15:46.280\n>> [INAUDIBLE]\n>> Except for Ryan right?\n\n331\n00:15:46.280 --> 00:15:48.580\nRyan cannot do math what so ever.\n\n332\n00:15:48.580 --> 00:15:52.750\n>> That being said I do want you\nto keep in mind four, two and one,\n\n333\n00:15:52.750 --> 00:15:55.270\nthese are numbers you always want in your\n\n334\n00:15:55.270 --> 00:15:59.250\nbrain when it comes to these\npermissions using numeric code.\n\n335\n00:15:59.250 --> 00:16:00.380\nAnd why is that?\n\n336\n00:16:00.380 --> 00:16:03.930\nBecause when you add them together they\ncreate the other permissions that we\n\n337\n00:16:03.930 --> 00:16:05.880\nneed and if you look below we'll see that.\n\n338\n00:16:05.880 --> 00:16:07.080\nIf we have read write and\n\n339\n00:16:07.080 --> 00:16:10.060\nexecute it, that's the permission\nI want to set than I.\n\n340\n00:16:10.060 --> 00:16:12.570\nI need it to be the number 7,\nif it was symbolic mode, it's easy,\n\n341\n00:16:12.570 --> 00:16:16.180\nI just do a +rwx and it adds those\npermissions if they don't already exist,\n\n342\n00:16:16.180 --> 00:16:19.640\nthen it gives those to me,\nthat's what I want, very simple.\n\n343\n00:16:19.640 --> 00:16:23.130\nBut in that numeric mode,\nyou'll notice, what is 7?\n\n344\n00:16:23.130 --> 00:16:24.570\nIt is 4+2+1, remember 4, 2, and 1,\n\n345\n00:16:24.570 --> 00:16:30.280\nthese are your base numbers that you\nwanna remember because they stand for\n\n346\n00:16:30.280 --> 00:16:33.400\nread, they stand for write,\nand they stand for execute.\n\n347\n00:16:33.400 --> 00:16:38.010\nSo, if I need read and execute then\nI need 4 and 1, which is 5, and\n\n348\n00:16:38.010 --> 00:16:41.010\nyou'll notice,\nyou'll see that right over here.\n\n349\n00:16:41.010 --> 00:16:43.950\nSo, if I put a 5, it's telling the system,\n\n350\n00:16:43.950 --> 00:16:47.315\nput read and\nexecute permissions on this system.\n\n351\n00:16:47.315 --> 00:16:52.130\n>> Now, Daniel,\njust watching the actual diagram here and\n\n352\n00:16:52.130 --> 00:16:56.300\ntrying to think about something,\nI just realized, when do we actually use,\n\n353\n00:16:56.300 --> 00:16:59.160\nhow do you know whether you're\ngoing to use either the numeric or\n\n354\n00:16:59.160 --> 00:17:01.850\nyou're gonna use symbolic\n>> Is that based on the distro,\n\n355\n00:17:01.850 --> 00:17:06.650\nor is that just because of the age of\nthe system, and things have changed now?\n\n356\n00:17:06.650 --> 00:17:07.230\nDo we know?\n>> Yeah.\n\n357\n00:17:07.230 --> 00:17:08.250\nEither A, it's part of the system,\n\n358\n00:17:08.250 --> 00:17:11.210\nlike the distro itself does\nnot support the symbolic mode.\n\n359\n00:17:11.210 --> 00:17:15.865\nYou'll be hard-pressed, maybe,\nif you have an old distro laying around,\n\n360\n00:17:15.865 --> 00:17:20.550\nsuper-old, that does not\nsupport the symbolic,\n\n361\n00:17:20.550 --> 00:17:23.830\nthen yeah,\nthat's when you would need to know this.\n\n362\n00:17:23.830 --> 00:17:25.266\nOther than that, At.\n\n363\n00:17:25.266 --> 00:17:27.130\nIt's pretty ubiquitous.\n\n364\n00:17:27.130 --> 00:17:29.670\nThe symbolic mode is that much easier.\n\n365\n00:17:29.670 --> 00:17:35.050\nAnd I believe there is probably\neven a ratification date that said,\n\n366\n00:17:35.050 --> 00:17:36.350\nin Bash version 3.\n\n367\n00:17:36.350 --> 00:17:42.230\nwhatever or 4.0 or something, this is\nstandardized and it's part of the system.\n\n368\n00:17:42.230 --> 00:17:44.980\nYou'll never not see it again\nfrom this point forward.\n\n369\n00:17:44.980 --> 00:17:50.280\nSo, it's fairly safe to rest\non the fact that symbolic mode\n\n370\n00:17:50.280 --> 00:17:51.160\n>> Will be there at,\n\n371\n00:17:51.160 --> 00:17:54.080\nat, probably at least from today forward.\n\n372\n00:17:54.080 --> 00:17:56.710\nOlder stuff,\nthat's where you might want to use this.\n\n373\n00:17:56.710 --> 00:17:59.600\nIf you come from this environment,\nfrom back in the day,\n\n374\n00:17:59.600 --> 00:18:03.450\nyou're probably,\nmaybe familiar with do, oh, like, like.\n\n375\n00:18:03.450 --> 00:18:06.277\nRonnie and\nI were talking about this earlier and\n\n376\n00:18:06.277 --> 00:18:10.880\nworked on some XenServers, right,\nand they're running of Linux.\n\n377\n00:18:10.880 --> 00:18:11.850\nWell, he had to use some.\n\n378\n00:18:11.850 --> 00:18:14.080\nHe learned what a couple of them do.\n\n379\n00:18:14.080 --> 00:18:16.730\nHe might not of understood\n>> But exactly why that was that he would\n\n380\n00:18:16.730 --> 00:18:20.230\nuse those numeric values, but\nhe knew that, if I wanted.\n\n381\n00:18:20.230 --> 00:18:22.950\nRewrite and execute for the owner.\n\n382\n00:18:22.950 --> 00:18:24.610\nRead and execute for the group.\n\n383\n00:18:24.610 --> 00:18:28.390\nAnd read and execute for\nothers, then he would do 755.\n\n384\n00:18:28.390 --> 00:18:29.910\nRight.\nThat's what he would do.\n\n385\n00:18:29.910 --> 00:18:31.320\nSo, that not knowing why.\n\n386\n00:18:31.320 --> 00:18:33.650\nThat's kinda what we're doing today.\n\n387\n00:18:33.650 --> 00:18:36.030\nThat's what I'm trying to explain.\n\n388\n00:18:36.030 --> 00:18:40.370\nIt's no longer a mystery on why is\nthis a seven and why is this of five.\n\n389\n00:18:40.370 --> 00:18:41.850\nThat's the whole purpose.\n\n390\n00:18:41.850 --> 00:18:44.680\nSo, let's just, really quickly,\ntake a look again.\n\n391\n00:18:44.680 --> 00:18:47.940\nSix is gonna be read and write,\nbecause it's four plus two, and\n\n392\n00:18:47.940 --> 00:18:49.770\nthat gives us read and write.\n\n393\n00:18:49.770 --> 00:18:50.730\nFour plus two.\n\n394\n00:18:50.730 --> 00:18:53.540\nAnd then write and execute would be\na three, so there you have that.\n\n395\n00:18:53.540 --> 00:18:55.250\nPretty straightforward.\n\n396\n00:18:55.250 --> 00:18:56.450\nNot too difficult.\n\n397\n00:18:56.450 --> 00:19:01.540\nA real good thing to do if you are gonna\nbe working within numeric conditions.\n\n398\n00:19:01.540 --> 00:19:03.070\nJust create yourself a little chart.\n\n399\n00:19:03.070 --> 00:19:06.190\nPost it up on your cork board or whatever.\n\n400\n00:19:06.190 --> 00:19:08.280\nAnd keep it handy in case\nyou just don't remember it.\n\n401\n00:19:08.280 --> 00:19:11.170\nBut if you can remember four plus\ntwo plus one, or four plus two, or\n\n402\n00:19:11.170 --> 00:19:12.630\nfour plus one, or two plus whatever.\n\n403\n00:19:12.630 --> 00:19:15.240\nAs long as you're adding\none of those three\n\n404\n00:19:15.240 --> 00:19:17.750\nnumbers together you're going\nto come up with the correct one.\n\n405\n00:19:17.750 --> 00:19:22.490\nAnd if you know that four is read,\ntwo is write, and one is execute; You'll\n\n406\n00:19:22.490 --> 00:19:25.460\nunderstand what you've done and\nyou'll be able to figure it out.\n\n407\n00:19:25.460 --> 00:19:26.650\n>> All right.\n\n408\n00:19:26.650 --> 00:19:30.120\nNow, there's also another attribute\nthat we also have to be concerned about.\n\n409\n00:19:30.120 --> 00:19:34.450\nAnd this is the one that always gets me,\nit's the sticky bit,\n\n410\n00:19:34.450 --> 00:19:37.292\nI always equate that with the sticky bun.\n\n411\n00:19:37.292 --> 00:19:38.850\n>> [LAUGH]\n>> It's not exactly the same.\n\n412\n00:19:38.850 --> 00:19:40.410\n>> Yeah, no, it has honey all over it,\n\n413\n00:19:40.410 --> 00:19:42.900\nit's a tasty treat,\neverybody loves it, I know I do.\n\n414\n00:19:42.900 --> 00:19:45.890\nNo, the sticky bit is, and\nI don't want to get too crazy with this,\n\n415\n00:19:45.890 --> 00:19:49.180\nit's really simply, it protects your\n\n416\n00:19:51.140 --> 00:19:56.460\nfile from anyone who is not you or root\nfrom deleting it so it's basically saying,\n\n417\n00:19:56.460 --> 00:20:01.100\ndo not delete this file if it's\nnot the owner or word user.\n\n418\n00:20:01.100 --> 00:20:04.030\nOkay, so\nthat's basically what you're doing.\n\n419\n00:20:04.030 --> 00:20:06.850\nNow, when we look at the permissions here,\nactually, let's do this.\n\n420\n00:20:06.850 --> 00:20:08.660\nLet's use this as a good example.\n\n421\n00:20:08.660 --> 00:20:09.560\nLet's jump over here.\n\n422\n00:20:09.560 --> 00:20:11.400\nI've got another output here.\n\n423\n00:20:11.400 --> 00:20:12.240\nAnytime you do an LS.\n\n424\n00:20:12.240 --> 00:20:14.260\nLet me jump to my computer here.\n\n425\n00:20:14.260 --> 00:20:16.330\nLet me clear the screen.\n\n426\n00:20:16.330 --> 00:20:18.045\nOops, cellar is not the correct term.\n\n427\n00:20:18.045 --> 00:20:19.190\n>> [LAUGH]\n>> All right, so\n\n428\n00:20:19.190 --> 00:20:20.176\nif I do an LS dash\n>> L.\n\n429\n00:20:20.176 --> 00:20:24.070\nWe get all this.\n\n430\n00:20:24.070 --> 00:20:26.820\nAnd if you're a little bit newer\nto this type of environment,\n\n431\n00:20:26.820 --> 00:20:29.970\nthis might not be making\na whole lot of sense.\n\n432\n00:20:29.970 --> 00:20:32.380\nYou might understand some of it,\nbut not everything.\n\n433\n00:20:32.380 --> 00:20:35.910\nAnd let's dispel any kind of\nmystery behind this right now.\n\n434\n00:20:35.910 --> 00:20:38.370\nBasically, you're reading\nfrom left to right.\n\n435\n00:20:39.370 --> 00:20:41.270\nSome of the easy stuff in here is,\nobviously,\n\n436\n00:20:41.270 --> 00:20:45.060\nthe file or directory name that is\nbeing listed out using the LS command.\n\n437\n00:20:45.060 --> 00:20:47.350\nAnd, but here's obviously our permissions.\n\n438\n00:20:48.410 --> 00:20:49.270\nPermissions are a good thing.\n\n439\n00:20:49.270 --> 00:20:51.280\nThat's what we're kind\nof talking about today.\n\n440\n00:20:51.280 --> 00:20:53.240\nSo, that's where we wanna start.\n\n441\n00:20:53.240 --> 00:20:56.900\nWhat is going on in\nthe permissions side of things?\n\n442\n00:20:56.900 --> 00:21:00.940\nSo, kind of made a diagram of\nthat using this right here.\n\n443\n00:21:00.940 --> 00:21:06.730\nYou'll notice, under the permissions\ncolumn, I have a dash and\n\n444\n00:21:06.730 --> 00:21:11.850\nthat is a, what, what's called the mode\nof the actual target you are looking at.\n\n445\n00:21:11.850 --> 00:21:16.070\nSo, it is a file remember everything is\na file even it's directory it's a file.\n\n446\n00:21:16.070 --> 00:21:18.120\nIt's just flagged as a directory and\n\n447\n00:21:18.120 --> 00:21:21.640\nyou know that because when we go\nover here you see that directory.\n\n448\n00:21:21.640 --> 00:21:26.120\nYou see that mode bit right there it's a D\nand there's a few others like C and S.\n\n449\n00:21:26.120 --> 00:21:29.790\nThey all mean different things socket\nthere is a B for block level devices for\n\n450\n00:21:29.790 --> 00:21:31.360\nthings like your hard drive.\n\n451\n00:21:31.360 --> 00:21:35.150\nEven though it represented\nas a file it'll have,\n\n452\n00:21:35.150 --> 00:21:38.890\nhave that b attribute there in that\nmode column of the permissions column.\n\n453\n00:21:38.890 --> 00:21:40.830\nSo, just be aware of\nthat that that is there.\n\n454\n00:21:40.830 --> 00:21:44.070\nNormally though you're gonna see D's and\nyou're gonna see dashes and\n\n455\n00:21:44.070 --> 00:21:45.280\nthat's what we see here.\n\n456\n00:21:45.280 --> 00:21:48.050\nWe see a dash letting\nyou know this is a file.\n\n457\n00:21:48.050 --> 00:21:49.350\nIf it was a D it would be a directory.\n\n458\n00:21:49.350 --> 00:21:50.410\nSo, know that.\n\n459\n00:21:50.410 --> 00:21:51.820\nThen we get into our permissions.\n\n460\n00:21:51.820 --> 00:21:56.190\nWe see read write and execute read write\nand execute read write and execute.\n\n461\n00:21:56.190 --> 00:21:59.490\nNow, this could be obviously as you could\nsee here a lot of different things.\n\n462\n00:21:59.490 --> 00:22:03.530\nWe have read write Rewrite and\nexecute, dash x,\n\n463\n00:22:03.530 --> 00:22:08.470\nthan it's r, so is it xr or\nis it dash x what's going on?\n\n464\n00:22:09.960 --> 00:22:16.030\nWe have three different types of,\nI don't even know, it's the person or\n\n465\n00:22:16.030 --> 00:22:20.500\nthe group or the other people that\nare out there, that are on your system.\n\n466\n00:22:20.500 --> 00:22:25.745\nThat's how you're setting up permissions\nand this is how we're reading.\n\n467\n00:22:25.745 --> 00:22:30.220\nS,o you have the first column which is\nthe owner this is the person who created\n\n468\n00:22:30.220 --> 00:22:34.290\nthe file who owns the file, one of the two\nusually the creator is the owner but\n\n469\n00:22:34.290 --> 00:22:38.730\nnot always sometimes, I can create\na file and make Ronnie the owner that\n\n470\n00:22:38.730 --> 00:22:43.400\nis fine we are gonna have to look\nat that in just a little bit and\n\n471\n00:22:43.400 --> 00:22:47.810\nthat is gonna tell you what permissions\nthat owner has on that file or folder.\n\n472\n00:22:47.810 --> 00:22:51.780\nthe next one is the group [INAUDIBLE] so\nanybody Everybody in this group gets this\n\n473\n00:22:51.780 --> 00:22:55.420\nset so if it's R-X it lets you know you've\ngot the three different permission right,\n\n474\n00:22:55.420 --> 00:22:56.590\nread, write, and execute.\n\n475\n00:22:56.590 --> 00:22:58.350\nIf I see a read, an R and then a dash, and\n\n476\n00:22:58.350 --> 00:23:00.860\nthen an X I know that they\ndon't have write permissions.\n\n477\n00:23:00.860 --> 00:23:02.820\nI know they have read and\nthey have execute permissions.\n\n478\n00:23:02.820 --> 00:23:06.410\nThey don't have write,\nthat's why the dash is there.\n\n479\n00:23:06.410 --> 00:23:11.810\nSo, these columns butt up to each other\nwithout any kind of demarcation line other\n\n480\n00:23:11.810 --> 00:23:16.750\nthan the fact that once you hit execute\nthere aren't Are no other permissions so\n\n481\n00:23:16.750 --> 00:23:19.490\nyou know that the next one is going\nto be the start of the next column.\n\n482\n00:23:19.490 --> 00:23:23.130\nI know it can sound a little confusing but\nthe visual portion of it is, is,\n\n483\n00:23:23.130 --> 00:23:25.040\nis what makes it a little bit easier.\n\n484\n00:23:25.040 --> 00:23:27.940\nSo, we see read, write and\nexecute for owner and group and\n\n485\n00:23:27.940 --> 00:23:31.320\nthen other is any other user that is\nnot the owner or not in that group.\n\n486\n00:23:31.320 --> 00:23:37.140\nSo, if I made a file and I set permissions\nfor the owner to have read write and\n\n487\n00:23:37.140 --> 00:23:39.380\nexecute Execute and the group and\nhave rewrite and execute.\n\n488\n00:23:39.380 --> 00:23:43.638\nWell, what if you're not the owner and\nyou're not in that group,\n\n489\n00:23:43.638 --> 00:23:45.624\nwhat permissions do you have?\n\n490\n00:23:45.624 --> 00:23:49.153\nThat's where that other permissions part\ncomes from because, just because you're\n\n491\n00:23:49.153 --> 00:23:52.486\nnot the owner or in the group that has\npermissions to it, doesn't mean you don't\n\n492\n00:23:52.486 --> 00:23:55.150\nwant people to be able to read it,\nmaybe it's a script, right?\n\n493\n00:23:55.150 --> 00:23:56.688\nThat's can handy.\nYou want them to be able to read it or\n\n494\n00:23:56.688 --> 00:23:57.472\nmaybe even execute it.\n\n495\n00:23:57.472 --> 00:24:01.314\nMaybe it's something for everyone and\nthat That's where you're gonna set that.\n\n496\n00:24:01.314 --> 00:24:03.195\nSo then we move on, we have links.\n\n497\n00:24:03.195 --> 00:24:06.851\nThat's the, basically,\nlike if it's a directory,\n\n498\n00:24:06.851 --> 00:24:09.560\nhow many objects are in that directory.\n\n499\n00:24:09.560 --> 00:24:13.762\nSo there's three files and two other\ndirectories, that will show five, right?\n\n500\n00:24:13.762 --> 00:24:17.193\nBecause this is a file there is\nno other links than itself, so\n\n501\n00:24:17.193 --> 00:24:20.780\nit only shows one and\nthe longer they go, the bigger they get.\n\n502\n00:24:20.780 --> 00:24:22.032\nThis is the other important one here.\n\n503\n00:24:22.032 --> 00:24:25.991\nMy thing has moved around on\nme just a little bit here.\n\n504\n00:24:25.991 --> 00:24:27.993\nBut this is the user and group,\n\n505\n00:24:27.993 --> 00:24:31.773\nI love simple diagrams when it\ndoes crazy stuff to me here.\n\n506\n00:24:31.773 --> 00:24:34.292\nBut this is the user and\nthis is the group.\n\n507\n00:24:34.292 --> 00:24:38.350\nRoot and root, so that means that there\nis a root user and there is a root group.\n\n508\n00:24:38.350 --> 00:24:41.587\nIf this said dlowry dlowry,\nit would be dlowry the user and\n\n509\n00:24:41.587 --> 00:24:43.712\nthere's also a group called dlowry.\n\n510\n00:24:43.712 --> 00:24:46.822\nThat can be a bit confusing,\nI wanna make sure you understand that.\n\n511\n00:24:46.822 --> 00:24:50.596\nI can have it be dlowry and\nroot for the group, right?\n\n512\n00:24:50.596 --> 00:24:54.648\nI can make my own groups and\nadd that group to here.\n\n513\n00:24:54.648 --> 00:24:59.526\nOut of the gate, when you create\nsomething, the defaults are the user and\n\n514\n00:24:59.526 --> 00:25:05.046\nthe group that, that user belongs to,\nthe main group that, that user belongs to.\n\n515\n00:25:05.046 --> 00:25:07.948\nThat is the group it will\nuse to set the defaults.\n\n516\n00:25:07.948 --> 00:25:11.767\nThen, it will give you the size,\nI just did some random number, 2048.\n\n517\n00:25:11.767 --> 00:25:13.126\nAnd, then last modified.\n\n518\n00:25:13.126 --> 00:25:17.216\nWhen's the last time someone actually did\nsomething to this thing other than look at\n\n519\n00:25:17.216 --> 00:25:17.950\nit, right?\n\n520\n00:25:17.950 --> 00:25:21.604\nAnd then the file name itself or\nthe directory name, whatever the case is.\n\n521\n00:25:21.604 --> 00:25:26.485\nThis should now be making a little\nmore sense on what it means to look\n\n522\n00:25:26.485 --> 00:25:31.281\nat the permissions and\nwhat's going on with the permissions when\n\n523\n00:25:31.281 --> 00:25:35.834\nwe see them in our output,\nespecially from the list command.\n\n524\n00:25:35.834 --> 00:25:36.810\n>> There's no doubt, Daniel.\n\n525\n00:25:36.810 --> 00:25:40.506\nThere's times when we're actually working\nfrom that command line that what ends\n\n526\n00:25:40.506 --> 00:25:44.436\nup happening, we run the script or run the\nprogram, and we're told access is denied.\n\n527\n00:25:44.436 --> 00:25:47.651\nAnd this is when we have to go in there be\nable to check those permissions out and\n\n528\n00:25:47.651 --> 00:25:49.591\nat least have a basic\nunderstanding of those.\n\n529\n00:25:49.591 --> 00:25:52.830\nSo by running that LS dash,\nyou just did the l or la?\n\n530\n00:25:52.830 --> 00:25:56.160\n>> Yeah, the -l does the long listing\nformat and that will give you those\n\n531\n00:25:56.160 --> 00:25:59.726\npermissions that your looking for\nplus all the other information you saw.\n\n532\n00:25:59.726 --> 00:26:04.292\nSo ls-l is a very, very common,\nit's so common, I'm wondering,\n\n533\n00:26:04.292 --> 00:26:09.172\nlet's take a look at my system cuz a lot\nof times you'll see this as well you\n\n534\n00:26:09.172 --> 00:26:12.113\ncan do in ll and\nit's built in to the system.\n\n535\n00:26:12.113 --> 00:26:16.143\nThat's an alias, and we're gonna talk\nabout aliases in an upcoming show and\n\n536\n00:26:16.143 --> 00:26:18.760\nsee how we can make our own\nto do that kind of thing.\n\n537\n00:26:18.760 --> 00:26:21.897\nBasically what I did when I\nhit ll is it called ls -l.\n\n538\n00:26:21.897 --> 00:26:26.187\nAnd it's so common, it's the built\nin alias into the system, so\n\n539\n00:26:26.187 --> 00:26:30.491\nif you're running Linux,\nI would use ll more than I would use ls.\n\n540\n00:26:30.491 --> 00:26:32.251\n>> Yeah,\nby taking a look at this screen, right,\n\n541\n00:26:32.251 --> 00:26:35.243\nwhat you do end up seeing a lot of times,\nright, is that if you are given that issue\n\n542\n00:26:35.243 --> 00:26:38.120\nwhere you're told that you're not able\nto access it, pull that command up.\n\n543\n00:26:38.120 --> 00:26:42.160\nAnd that allows you to go, okay, why am I\nnot, if I'm actually the owner of that, or\n\n544\n00:26:42.160 --> 00:26:44.850\nis somebody else the owner or\nwhatever it might be.\n\n545\n00:26:44.850 --> 00:26:48.580\nThat's where you can actually\ncheck that and then maybe if\n\n546\n00:26:48.580 --> 00:26:53.110\nyou know the commands and if you are\nactually the administrator on that system,\n\n547\n00:26:53.110 --> 00:26:57.060\nbeing able to go in and change those\nthis permission when you need to.\n\n548\n00:26:57.060 --> 00:26:59.376\nIt's probably gonna help you out when you\nactually finish everything that you need.\n\n549\n00:26:59.376 --> 00:27:01.257\n>> That's exactly right, nail on the head.\n\n550\n00:27:01.257 --> 00:27:05.778\nNow Ronnie, I'm taking a look at what we\nwanted to go over with this and we talked\n\n551\n00:27:05.778 --> 00:27:09.967\nthe big game about the ch mod command,\nwe have yet to really show it at all.\n\n552\n00:27:09.967 --> 00:27:12.208\n>> Lets do it.\n>> Lets do that really quickly before we\n\n553\n00:27:12.208 --> 00:27:13.409\nrun out of time, and\n\n554\n00:27:13.409 --> 00:27:18.250\nbasically what we're doing is we're\nsaying change the modification, right?\n\n555\n00:27:18.250 --> 00:27:22.720\nSo lets see here if I just do a standard\nls, let's take a file here, file1,\n\n556\n00:27:22.720 --> 00:27:28.480\nI bet that's fine, and if we look up\nhere we'll see that file1, here it is.\n\n557\n00:27:28.480 --> 00:27:29.148\nThere's it's output.\n\n558\n00:27:29.148 --> 00:27:30.425\nI wanna change that.\n\n559\n00:27:30.425 --> 00:27:34.692\nI wanna make it to be where I,\nas the owner have, let's say,\n\n560\n00:27:34.692 --> 00:27:39.300\nrewrite and execute and\nwe'll say the group will have rewrite and\n\n561\n00:27:39.300 --> 00:27:42.603\nexecute and\nanybody else will have just read.\n\n562\n00:27:42.603 --> 00:27:45.145\nHow about that,\nthat'll work, so here we go.\n\n563\n00:27:45.145 --> 00:27:48.588\nWe do the chmod command, and\nbecause this is my file,\n\n564\n00:27:48.588 --> 00:27:50.509\nI can do whatever I want to it.\n\n565\n00:27:50.509 --> 00:27:52.601\nAnd what I'm gonna do\nis I'm gonna do plus,\n\n566\n00:27:52.601 --> 00:27:55.104\nbecause I'm adding\npermissions I'm taking away.\n\n567\n00:27:55.104 --> 00:28:01.189\nThat's one thing you're gonna see, you can\nadd permissions by saying user plus this.\n\n568\n00:28:01.189 --> 00:28:02.789\nI wanna add this permission to it.\n\n569\n00:28:02.789 --> 00:28:05.308\nSo if they already have a permission,\nyou don't have to re-add it.\n\n570\n00:28:05.308 --> 00:28:10.250\nNot that it will give you a problem, but\nit's like a waste of effort, I guess.\n\n571\n00:28:10.250 --> 00:28:14.447\nBut, I can do user, I'm sorry, yes,\n\n572\n00:28:14.447 --> 00:28:18.655\nuser plus read, write, and execute.\n\n573\n00:28:18.655 --> 00:28:25.862\nAnd if I do that, and only that, it will\nchange the file, and we'll say file1.\n\n574\n00:28:25.862 --> 00:28:27.160\nWatch what happens when I do that.\n\n575\n00:28:27.160 --> 00:28:29.900\nNo problems, it gave me no error output,\nthat's good.\n\n576\n00:28:29.900 --> 00:28:33.948\nLet's do the ll for file1,\nand you'll see It added,\n\n577\n00:28:33.948 --> 00:28:38.880\nit didn't touch anything else though,\nit left those guys alone.\n\n578\n00:28:38.880 --> 00:28:41.264\nWhatever they had they still have,\n\n579\n00:28:41.264 --> 00:28:46.275\nbecause it wasn't modifying any of\nthe group or other users permissions.\n\n580\n00:28:46.275 --> 00:28:50.420\nSo if I just did user,\nthat would be fine, which is the owner.\n\n581\n00:28:50.420 --> 00:28:53.113\nUGOA, that's what we're looking at.\n\n582\n00:28:53.113 --> 00:29:00.195\nU is user, which is the owner, which is\na little confusing, [LAUGH] I know that.\n\n583\n00:29:00.195 --> 00:29:04.901\nG obviously is for group, O is for\nother, and then A is for all.\n\n584\n00:29:04.901 --> 00:29:09.068\nSo if I wanted to make those read,\nwrite and execute for\n\n585\n00:29:09.068 --> 00:29:13.611\neveryone, I could just do chmod\nlike that and say plus RWX.\n\n586\n00:29:13.611 --> 00:29:17.523\nI'm sorry I would need to add\nan a there and I hit that.\n\n587\n00:29:17.523 --> 00:29:19.801\nAnd then it's missing an operand.\n\n588\n00:29:19.801 --> 00:29:22.279\nOh, the file name, usually helps,\nfile1, there we go.\n\n589\n00:29:22.279 --> 00:29:27.275\nAnd now if I do that ls- file1,\nyou'll notice every one now has read,\n\n590\n00:29:27.275 --> 00:29:29.876\nwrite, x because I did the a for all.\n\n591\n00:29:29.876 --> 00:29:33.672\nSo remember, U for the owner or\nthe user that created it.\n\n592\n00:29:33.672 --> 00:29:38.688\nG for group, O for other people, and\nthen A for everyone, and you can do plus.\n\n593\n00:29:38.688 --> 00:29:39.832\nYou can also do minus.\n\n594\n00:29:39.832 --> 00:29:43.217\nI need to remove so I'll say okay,\nthe people in that other group,\n\n595\n00:29:43.217 --> 00:29:45.581\nthey don't need read, write, and execute.\n\n596\n00:29:45.581 --> 00:29:48.263\nThey're going crazy, they're modifying\nmy files, I wanna stop that.\n\n597\n00:29:48.263 --> 00:29:51.959\nI'm gonna do chmod, let's see here,\n\n598\n00:29:51.959 --> 00:29:55.994\nother minus, we'll say, write, okay?\n\n599\n00:29:55.994 --> 00:29:57.620\nAnd then file1.\n\n600\n00:29:57.620 --> 00:30:03.485\nNow when we do that, we'll notice now they\nonly have read and execute abilities.\n\n601\n00:30:03.485 --> 00:30:06.504\nThey can read the file, if it's a script\nor something they can still execute it.\n\n602\n00:30:06.504 --> 00:30:10.172\nThey can no longer make modifications\nto it, so we can move it that way.\n\n603\n00:30:10.172 --> 00:30:13.365\nThere's one more operator real quickly,\nthe equal sign.\n\n604\n00:30:13.365 --> 00:30:18.717\nI can just say, this group\nequals this type of permissions.\n\n605\n00:30:18.717 --> 00:30:21.987\nKind of works the exact same way, but\nit's just another way you can do this.\n\n606\n00:30:21.987 --> 00:30:24.873\nSo if I said chmod, and\nI'll say other again,\n\n607\n00:30:24.873 --> 00:30:29.551\nwe'll pick on that one more time,\nequals r, it'll say it only gets read.\n\n608\n00:30:29.551 --> 00:30:32.930\nSo, if it had read, write, and execute,\nit would remove write and execute and\n\n609\n00:30:32.930 --> 00:30:33.848\nonly give them read.\n\n610\n00:30:33.848 --> 00:30:39.280\nIf they had Execute and that's it, it\nwould remove that and then give them Read.\n\n611\n00:30:39.280 --> 00:30:40.320\nSo you see how that works.\n\n612\n00:30:40.320 --> 00:30:43.320\nI'm saying it equates\nto these permissions.\n\n613\n00:30:43.320 --> 00:30:45.641\nAgain, I love to leave the file name out.\n\n614\n00:30:45.641 --> 00:30:48.520\nfile1, there we go.\n\n615\n00:30:48.520 --> 00:30:52.320\nAnd now ll file1, and we get it again.\n\n616\n00:30:52.320 --> 00:30:53.658\nYou'll see it right there.\n\n617\n00:30:53.658 --> 00:30:57.199\nOnly read is now available for\nthat permission.\n\n618\n00:30:57.199 --> 00:31:00.839\n>> Now, Daniel, there's also a chance and\nyou had just mentioned this that what you\n\n619\n00:31:00.839 --> 00:31:04.056\nmay have to do to be able to assign\npermissions is to take ownership of that\n\n620\n00:31:04.056 --> 00:31:06.997\nfile, so is there a special command for\nus to go ahead and do that?\n\n621\n00:31:06.997 --> 00:31:08.018\n>> Yes, there is.\n\n622\n00:31:08.018 --> 00:31:11.137\nThe chown command, or change owner,\ncuz like Ronnie said,\n\n623\n00:31:11.137 --> 00:31:14.392\nyou're thinking,\nwhy would I ever want to change ownership?\n\n624\n00:31:14.392 --> 00:31:17.968\nWell, the reasons are usually this.\n\n625\n00:31:17.968 --> 00:31:20.862\nRonnie's working for my company,\nhe's working on files, and\n\n626\n00:31:20.862 --> 00:31:22.855\nRonnie comes in one day and says, I'm out.\n\n627\n00:31:22.855 --> 00:31:24.596\nI'm sick of this job, I'm walking.\n\n628\n00:31:24.596 --> 00:31:27.789\n>> [LAUGH]\n>> He takes off, I no longer have Ronnie.\n\n629\n00:31:27.789 --> 00:31:28.555\nWell what am I going to do?\n\n630\n00:31:28.555 --> 00:31:31.852\nI'm going to delete Ronnie\nas a user from my system.\n\n631\n00:31:31.852 --> 00:31:36.193\nOr at least I'm going to deprecate him,\nI'm going to make him not able to log in.\n\n632\n00:31:36.193 --> 00:31:38.906\nAnd what happens when you do that,\nwhen you start removing users,\n\n633\n00:31:38.906 --> 00:31:39.932\nthey have orphan files.\n\n634\n00:31:39.932 --> 00:31:42.955\nSo I need to go in as an administrator and\nchange the owner so\n\n635\n00:31:42.955 --> 00:31:45.748\nsomeone can actually do\nsomething with those files.\n\n636\n00:31:45.748 --> 00:31:48.784\nSo I hire someone to replace Ronnie,\ncreate them a user account,\n\n637\n00:31:48.784 --> 00:31:50.670\nand then I would give them permissions.\n\n638\n00:31:50.670 --> 00:31:51.727\nAnd we use the chown command.\n\n639\n00:31:51.727 --> 00:31:53.514\nIt's pretty quick, pretty easy.\n\n640\n00:31:53.514 --> 00:31:57.368\nAll we have to do is, let's see here.\n\n641\n00:31:57.368 --> 00:32:04.334\nObviously, file1 is owned by user1,\nand the group is user1, as well.\n\n642\n00:32:04.334 --> 00:32:07.910\nIf I wanted to change that user1's gone,\neven though I'm logged in as user1.\n\n643\n00:32:07.910 --> 00:32:11.300\nThe one caveat you must know about\nthe chown command is usually, almost\n\n644\n00:32:11.300 --> 00:32:14.991\ninvariably, I can't think of anytime\njust trying to cover my bases really.\n\n645\n00:32:14.991 --> 00:32:18.486\n[LAUGH] Is that you need to\nbe administrative level to.\n\n646\n00:32:18.486 --> 00:32:19.089\nEven if you own the file.\n\n647\n00:32:19.089 --> 00:32:19.704\nRight.\n\n648\n00:32:19.704 --> 00:32:22.003\nSo I might be wrong on that one.\n\n649\n00:32:22.003 --> 00:32:25.175\nBut I'm pretty sure that it's only\nadministrative are able to actually\n\n650\n00:32:25.175 --> 00:32:25.904\nchange owners.\n\n651\n00:32:25.904 --> 00:32:27.007\nSo be aware of that.\n\n652\n00:32:27.007 --> 00:32:27.866\nGuess what?\n\n653\n00:32:27.866 --> 00:32:29.167\nWe're going to need that sudu command.\n\n654\n00:32:29.167 --> 00:32:31.522\nOr we're going to need something in right.\n\n655\n00:32:31.522 --> 00:32:36.328\nSo if I wanted to change this first I'd\nhave to be a user that could do sudu.\n\n656\n00:32:36.328 --> 00:32:41.529\nSo I need the su to d.lowrie and\nthen put in my password.\n\n657\n00:32:41.529 --> 00:32:46.661\nAnd then I'm actually going to\nchange to my home directory.\n\n658\n00:32:46.661 --> 00:32:47.845\nI think I have a file here.\n\n659\n00:32:47.845 --> 00:32:49.388\nIf not, we'll create one.\n\n660\n00:32:49.388 --> 00:32:53.022\nSo we'll just say touch file1,\nthere we go.\n\n661\n00:32:53.022 --> 00:32:55.007\nSo now we're working,\nwe have file1, it's good to go.\n\n662\n00:32:55.007 --> 00:32:59.084\nDo ll file1 and\nthere's the permissions on it and\n\n663\n00:32:59.084 --> 00:33:04.724\nyou'll notice dlowrie is the owner and\nthe group is dlowrie as well.\n\n664\n00:33:04.724 --> 00:33:08.206\nIf I wanted to change that to user1 or\nmaybe even Val Kilmer.\n\n665\n00:33:08.206 --> 00:33:11.040\nYou never know Val might\nshow up to work on his file.\n\n666\n00:33:11.040 --> 00:33:12.839\nI know Val's actually a user on my system,\nso.\n\n667\n00:33:12.839 --> 00:33:14.058\nLets do that.\n\n668\n00:33:14.058 --> 00:33:19.458\nSo we do chown and\nthen we're gonna say what\n\n669\n00:33:19.458 --> 00:33:24.563\nis the owner that you wanna switch it to?\n\n670\n00:33:24.563 --> 00:33:27.698\nSo if I wanted it to be\nVal Kilmer I would say vkilmer and\n\n671\n00:33:27.698 --> 00:33:29.382\nthen I would say what it was.\n\n672\n00:33:29.382 --> 00:33:30.438\nSo the actual target.\n\n673\n00:33:30.438 --> 00:33:32.179\nSo file1.\n\n674\n00:33:32.179 --> 00:33:33.723\nAnd you'll notice operation not permitted.\n\n675\n00:33:33.723 --> 00:33:37.830\nHere's where we get to use one\nof our good old quit commands.\n\n676\n00:33:37.830 --> 00:33:40.690\nSo I can do sudu bang bang like that.\n\n677\n00:33:40.690 --> 00:33:43.960\nAnd it'll run the last\ncommand that I entered.\n\n678\n00:33:43.960 --> 00:33:45.120\nAnd add sudu to the front it it.\n\n679\n00:33:45.120 --> 00:33:45.730\n>> Nice.\n\n680\n00:33:45.730 --> 00:33:47.655\n>> So it makes it a little bit easier.\n\n681\n00:33:47.655 --> 00:33:49.090\n[INAUDIBLE] We get good to go.\n\n682\n00:33:49.090 --> 00:33:50.963\nWe have no more problem.\n\n683\n00:33:50.963 --> 00:33:51.787\nWe do that.\n\n684\n00:33:51.787 --> 00:33:52.448\nOh.\n\n685\n00:33:52.448 --> 00:33:53.389\nIt's asking me for the password.\n\n686\n00:33:53.389 --> 00:33:54.283\nThat's what, that's what's happening here.\n\n687\n00:33:54.283 --> 00:33:54.840\nI didn't see that.\n\n688\n00:33:54.840 --> 00:33:57.069\nPut that in.\n\n689\n00:33:57.069 --> 00:33:58.148\nIt elevated my privileges.\n\n690\n00:33:58.148 --> 00:34:00.343\nRan the command, and we're back to action.\n\n691\n00:34:00.343 --> 00:34:07.146\nl file1, and now we see the owner\nhas changed from dlowrie to vkilmer.\n\n692\n00:34:07.146 --> 00:34:08.387\nWe do the same thing for the group.\n\n693\n00:34:08.387 --> 00:34:10.222\nYou just have to add a colon and\nthen the group name.\n\n694\n00:34:10.222 --> 00:34:13.866\nOr, if you want to do both,\nyou would do user name colon group name.\n\n695\n00:34:13.866 --> 00:34:16.979\nPut that in your command,\nand you'll be good.\n\n696\n00:34:16.979 --> 00:34:19.207\nSo, it would look like this.\n\n697\n00:34:19.207 --> 00:34:23.247\nSo if I wanted to add vkilmer's group\nas well, it would look like that.\n\n698\n00:34:23.247 --> 00:34:28.321\nThat would give me a new user, a new\nowner, and a new group owner as well.\n\n699\n00:34:28.321 --> 00:34:31.268\nIf I just wanted the group,\nI just come over here and\n\n700\n00:34:31.268 --> 00:34:35.951\nremove everything on that side of the\ncolon, and it would just change the group.\n\n701\n00:34:35.951 --> 00:34:38.281\nThere's a change group command as well,\nbut\n\n702\n00:34:38.281 --> 00:34:41.362\nchange own will do the exact\nsame thing within itself, so.\n\n703\n00:34:41.362 --> 00:34:45.385\n>> All right Daniel, there's a lot there\nthat we actually have to think about when\n\n704\n00:34:45.385 --> 00:34:47.561\nwe are dealing with permissions in batch.\n\n705\n00:34:47.561 --> 00:34:50.893\nRemember that we just talked about the\nvery fact that a lot of times you do need\n\n706\n00:34:50.893 --> 00:34:53.341\nto make sure that you understand\nthe privilege levels,\n\n707\n00:34:53.341 --> 00:34:56.675\nwhether you're logged in as root or\nwhether you're gonna use sudo or sudo,\n\n708\n00:34:56.675 --> 00:34:59.000\nhowever you want to pronounce\nit is perfectly fine.\n\n709\n00:34:59.000 --> 00:35:02.150\nBut you do have to make sure that you\nunderstand that those two are really\n\n710\n00:35:02.150 --> 00:35:03.050\nabout making sure that your\n\n711\n00:35:03.050 --> 00:35:05.320\nadministrative privileges\nare the way that they need to be.\n\n712\n00:35:05.320 --> 00:35:10.040\nAlso then when you want to modify or be\nable to change permissions on resources.\n\n713\n00:35:10.040 --> 00:35:11.600\nYou need that chmod or\n\n714\n00:35:11.600 --> 00:35:16.634\nif you want to seize ownership of\nthose files also that chown as well.\n\n715\n00:35:16.634 --> 00:35:19.048\nAnd just understanding of course\nthe permission structure.\n\n716\n00:35:19.048 --> 00:35:24.795\nWhether we use the symbolic way\nof doing it or the numeric way.\n\n717\n00:35:24.795 --> 00:35:28.591\nJust kind of remember that they may\ndepend on the operating system or\n\n718\n00:35:28.591 --> 00:35:29.729\nthe distro itself.\n\n719\n00:35:29.729 --> 00:35:32.788\nOr it may just be that you're on a really\nold system if you realize that you\n\n720\n00:35:32.788 --> 00:35:33.955\ncan't do one or the other.\n\n721\n00:35:33.955 --> 00:35:35.337\nYou may also see that too.\n\n722\n00:35:35.337 --> 00:35:38.377\nSo, there's a lot of issues\nthat you have to deal with.\n\n723\n00:35:38.377 --> 00:35:42.511\nAs we move on to more advanced scripting,\nthis is the time when you're gonna see\n\n724\n00:35:42.511 --> 00:35:45.902\nthat, is when you do try to run\na script and all of a sudden it says,\n\n725\n00:35:45.902 --> 00:35:47.900\npermission denied, access denied.\n\n726\n00:35:47.900 --> 00:35:52.366\nWhatever it might be, that you may find\nyourself now having to deal with those\n\n727\n00:35:52.366 --> 00:35:56.899\npermissions, to be able to give users\nthe permissions that are needed to run or\n\n728\n00:35:56.899 --> 00:36:00.059\nto give your script permission\nto get access to files or\n\n729\n00:36:00.059 --> 00:36:02.350\nresources that they also need as well.\n\n730\n00:36:02.350 --> 00:36:05.271\nSo Daniel we're actually gonna get\neven deeper then this as we go\n\n731\n00:36:05.271 --> 00:36:06.470\ninto scripting, right?\n\n732\n00:36:06.470 --> 00:36:10.667\n>> Oh yeah, yeah this is just the\npreliminary necessities of understanding\n\n733\n00:36:10.667 --> 00:36:14.330\nbas so when we get into the hardcore\nactually creating scripts.\n\n734\n00:36:14.330 --> 00:36:17.325\nYou think okay well now that I know how\nto set permissions what's the big deal?\n\n735\n00:36:17.325 --> 00:36:20.668\nIf you don't set the execute permissions\non your script [LAUGH] it won't run.\n\n736\n00:36:20.668 --> 00:36:21.909\nYou can not run it.\n\n737\n00:36:21.909 --> 00:36:25.510\nSo that's what we need to look\nat things like that and, so\n\n738\n00:36:25.510 --> 00:36:27.320\ngo through this a few times.\n\n739\n00:36:27.320 --> 00:36:30.350\nUnderstand even though that numeric\nthing has been depreciated you'll\n\n740\n00:36:30.350 --> 00:36:33.890\nalmost always find it even though it's\nolder, all right it will always be there.\n\n741\n00:36:33.890 --> 00:36:36.670\nSo if you know it, you understand it,\nyou can always use it if you need to.\n\n742\n00:36:36.670 --> 00:36:40.193\nIf you're working with someone who\ndoesn't understand symbolic way and\n\n743\n00:36:40.193 --> 00:36:42.991\nthey know the numeric way you're not,\nyou guys can talk.\n\n744\n00:36:42.991 --> 00:36:46.147\n>> All right, well thank you Daniel for\nshowing us the way to deal with those\n\n745\n00:36:46.147 --> 00:36:49.585\npermissions and understanding some of\nthe commands that we're going to use.\n\n746\n00:36:49.585 --> 00:36:51.933\nAlso, that means that\nthis is a great place for\n\n747\n00:36:51.933 --> 00:36:53.751\nus to end this particular episode.\n\n748\n00:36:53.751 --> 00:36:56.213\nSigning off for ITProTV, I'm Ronnie Wong.\n\n749\n00:36:56.213 --> 00:36:57.002\n>> And I'm Daniel Lowrie.\n\n750\n00:36:57.002 --> 00:36:59.011\n>> And we'll see you next time.\n\n751\n00:36:59.011 --> 00:37:02.632\n[SOUND]\n\n",
          "vimeoId": "145426755"
        },
        {
          "description": "In this episode, Ronnie and Daniel take a look into the basic way to create, modify and edit files within BASH using a text editor. Remembering that in Linux everything is a file, Daniel and Ronnie take a look at working with some of the different text editors to accomplish tasks within BASH.",
          "length": "2223",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-5-1-text_editors_in_bash-111015-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-5-1-text_editors_in_bash-111015-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-5-1-text_editors_in_bash-111015-1-sm.jpg",
          "title": "Text editors in Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.480\n[MUSIC]\n\n2\n00:00:01.480 --> 00:00:08.264\nWelcome to another exciting\n\n3\n00:00:08.264 --> 00:00:14.510\nepisode here on ITProTV.\n\n4\n00:00:14.510 --> 00:00:15.350\nI'm your host, Ronnie Wong.\n\n5\n00:00:15.350 --> 00:00:19.890\nAnd today we're taking a look at well\nworking with Bash and of course scripting.\n\n6\n00:00:19.890 --> 00:00:23.060\nAnd what we're doing today\nis something really special.\n\n7\n00:00:23.060 --> 00:00:25.330\nWe're getting into working with\ntext editors inside of Bash.\n\n8\n00:00:25.330 --> 00:00:27.880\nAnd you're going to\nactually learn the reason\n\n9\n00:00:27.880 --> 00:00:30.330\nwhy we actually have to know\nexactly what we want to do.\n\n10\n00:00:30.330 --> 00:00:33.870\nAnd Daniel,\nyou're actually going to help us decide on\n\n11\n00:00:33.870 --> 00:00:37.080\nwhat particular type of\ntext editor we want to use.\n\n12\n00:00:37.080 --> 00:00:40.490\n>> Well, I'm going to throw my\ntwo cents into that ring anyway.\n\n13\n00:00:40.490 --> 00:00:41.950\nThe put my name in a hat.\n\n14\n00:00:41.950 --> 00:00:43.660\nWe're going to take a look\nat a few text editors.\n\n15\n00:00:43.660 --> 00:00:46.060\nYou might be thinking to yourself,\ntext editors?\n\n16\n00:00:46.060 --> 00:00:47.030\nA whole show on text editors?\n\n17\n00:00:47.030 --> 00:00:49.760\nYes, there is going to be\na whole show on text editors.\n\n18\n00:00:49.760 --> 00:00:52.170\nYour thinking there is no stinking way,\nyou worked on Windows or\n\n19\n00:00:52.170 --> 00:00:53.190\nanything like that.\n\n20\n00:00:53.190 --> 00:00:57.120\nYou've got Notepad, a basic text editor,\nthat's built into Windows.\n\n21\n00:00:57.120 --> 00:00:58.554\nIt's easy.\nYou run Notepad,\n\n22\n00:00:58.554 --> 00:01:02.550\nNotepad opens up, you type into it,\nyou save, you exit, you're done.\n\n23\n00:01:03.970 --> 00:01:08.660\nHow the heck is that gonna be\nanymore complicated than Linux?\n\n24\n00:01:08.660 --> 00:01:11.930\nIs it being complicated for\nthe sake of being complicated?\n\n25\n00:01:11.930 --> 00:01:15.160\nNo, actually there's some really good\nreasons in way we use the different\n\n26\n00:01:15.160 --> 00:01:15.950\ntext editors that we use.\n\n27\n00:01:15.950 --> 00:01:18.550\nAnd a, it's gonna come down\nto personal preference.\n\n28\n00:01:18.550 --> 00:01:22.490\nThat's gonna be your main guiding star\non why do you choose this text editor\n\n29\n00:01:22.490 --> 00:01:23.910\nover that text editor.\n\n30\n00:01:23.910 --> 00:01:26.190\nIt's just you find it easier to use.\n\n31\n00:01:26.190 --> 00:01:28.840\nAnd you gotta remember\nin a Linux environment\n\n32\n00:01:28.840 --> 00:01:31.750\nyou might not be in a graphical shell.\n\n33\n00:01:31.750 --> 00:01:33.190\nThose might not be there, right?\n\n34\n00:01:33.190 --> 00:01:36.580\nSo the lovely graphic, you hit an icon,\nsomething opens up, you type into it,\n\n35\n00:01:36.580 --> 00:01:38.690\nyou click Edit, Save, whatever.\n\n36\n00:01:38.690 --> 00:01:40.890\nAll that stuff happens.\n\n37\n00:01:40.890 --> 00:01:41.860\nThat might not happen.\n\n38\n00:01:41.860 --> 00:01:44.520\nIt could be leaving you out in the lurch.\n\n39\n00:01:44.520 --> 00:01:45.110\nSo what do you do?\n\n40\n00:01:45.110 --> 00:01:48.240\nYou have to know how to run\nthe built in text editors that\n\n41\n00:01:48.240 --> 00:01:51.030\nnormally come with your\nLinux operating system.\n\n42\n00:01:51.030 --> 00:01:53.350\nWe're gonna look at a few of them.\n\n43\n00:01:53.350 --> 00:01:58.200\nSee the bells and whistles and\nstrengths and weaknesses.\n\n44\n00:01:58.200 --> 00:02:00.723\nAnd hopefully,\nyou'll help pick one by the end of day.\n\n45\n00:02:00.723 --> 00:02:04.100\n>> [LAUGH] Now, when we start\ntaking a look at text editors.\n\n46\n00:02:04.100 --> 00:02:08.060\nThis is one of the main functions in\nutilities that you and I are going to end\n\n47\n00:02:08.060 --> 00:02:11.560\nup using within our Linux operating\nsystem or Unix operating system.\n\n48\n00:02:11.560 --> 00:02:14.720\nIf we need to modify files and\nchange files a lot of times.\n\n49\n00:02:14.720 --> 00:02:16.590\nSo it's actually a very neat system,\nright?\n\n50\n00:02:16.590 --> 00:02:19.390\nWe don't need a special program to\ngo in and change configurations.\n\n51\n00:02:19.390 --> 00:02:22.690\nWe don't need special programs\nto even build scripts at times.\n\n52\n00:02:22.690 --> 00:02:24.680\nAll we need is a good, decent text editor.\n\n53\n00:02:24.680 --> 00:02:25.690\nAnd a lot of times,\n\n54\n00:02:25.690 --> 00:02:30.110\nthey are built in to the operating system\nand what's actually incumbent upon us\n\n55\n00:02:30.110 --> 00:02:34.130\nthen of course is mastering some of those\ndifferent text editors that are out there.\n\n56\n00:02:34.130 --> 00:02:37.730\nTo help us to be able to function and\ndo all the things that we need to do.\n\n57\n00:02:37.730 --> 00:02:41.100\nAnd when it comes down to scripting,\nDaniel I think text editing is actually\n\n58\n00:02:41.100 --> 00:02:43.290\ngonna be the way that we're gonna\nprobably work more often, right?\n\n59\n00:02:43.290 --> 00:02:44.370\n>> Ding, ding, ding, ding.\nThat's exactly right.\n\n60\n00:02:44.370 --> 00:02:45.296\nGive the man a prize.\n\n61\n00:02:45.296 --> 00:02:47.120\nBecause what are scripts?\n\n62\n00:02:47.120 --> 00:02:53.580\nAre just basically text files with a bunch\nof commands that are built inside of them.\n\n63\n00:02:53.580 --> 00:02:56.640\nSo we have to have some sorta\nmastery over a text editor.\n\n64\n00:02:56.640 --> 00:02:57.740\nRegardless of which one it is.\n\n65\n00:02:57.740 --> 00:03:00.730\nI'm going to show you\nthe most commonly used one.\n\n66\n00:03:00.730 --> 00:03:04.080\nCuz obviously we want you\nto know how to use that.\n\n67\n00:03:04.080 --> 00:03:07.690\nThat way you can jump from\none system to the other.\n\n68\n00:03:07.690 --> 00:03:09.130\nAnd have that lovely,\nit's across the board.\n\n69\n00:03:09.130 --> 00:03:09.980\nYou'll always find it, so\n\n70\n00:03:09.980 --> 00:03:14.180\nyou're not at somebody's mercy of going\noh I don't know this distribution.\n\n71\n00:03:14.180 --> 00:03:19.560\nIt doesn't have my favorite text editor\ntherefore I can't create scripts.\n\n72\n00:03:19.560 --> 00:03:21.980\nWe're going to show you\nthe one that's almost always,\n\n73\n00:03:21.980 --> 00:03:26.630\nif not always installed on every Unix and\nLinux system that you run across.\n\n74\n00:03:26.630 --> 00:03:27.680\nSo that you can edit text.\n\n75\n00:03:27.680 --> 00:03:30.560\nNow Ronnie made a good point;\nwhen it comes to text editing,\n\n76\n00:03:30.560 --> 00:03:32.150\nwhy do we need text editors?\n\n77\n00:03:32.150 --> 00:03:34.260\nWhat is their main functions?\n\n78\n00:03:34.260 --> 00:03:36.150\nMain functions is to create files, right?\n\n79\n00:03:36.150 --> 00:03:38.040\nThat's one thing that you\ncan do with a text editor.\n\n80\n00:03:38.040 --> 00:03:40.690\nAnother one is to actually modify a file.\n\n81\n00:03:40.690 --> 00:03:45.390\nMaybe you already have one in existence,\nyou want to make modifications to it,\n\n82\n00:03:45.390 --> 00:03:47.860\nchange the way it looks or\ndoes, or whatever.\n\n83\n00:03:47.860 --> 00:03:52.540\nYou can open it with your text editor,\nmake your changes, and save those changes.\n\n84\n00:03:52.540 --> 00:03:53.390\nIt's a very important part.\n\n85\n00:03:53.390 --> 00:03:54.400\nAnd then, just opening files.\n\n86\n00:03:54.400 --> 00:03:55.520\nIt will help you open files just so\n\n87\n00:03:55.520 --> 00:03:57.440\nyou can take a look to see\nwhat's inside of them.\n\n88\n00:03:57.440 --> 00:03:59.900\nYou gotta remember we\ntalked about this before.\n\n89\n00:03:59.900 --> 00:04:03.120\nIn the Linux and Unix environments, in\na Bash environment, cuz that's the shell\n\n90\n00:04:03.120 --> 00:04:08.590\nthat you interact with those systems with,\nbasically everything is a file.\n\n91\n00:04:08.590 --> 00:04:11.680\nIt treats everything as a file.\n\n92\n00:04:11.680 --> 00:04:14.420\nSo being able to use an editor for\n\n93\n00:04:14.420 --> 00:04:17.000\nthose files is gonna lend\nus some good operations.\n\n94\n00:04:17.000 --> 00:04:20.890\nSo we gotta have some mastery over that.\n\n95\n00:04:24.450 --> 00:04:26.970\nBefore I jump into\nthe belle of the ball here,\n\n96\n00:04:26.970 --> 00:04:30.430\nwhat text editors are available for us?\n\n97\n00:04:30.430 --> 00:04:33.020\nIn our environments there's usually\n\n98\n00:04:34.050 --> 00:04:38.720\nquite a few that if they're not installed,\nyou probably want to install them.\n\n99\n00:04:38.720 --> 00:04:41.580\nThings like Vi, and then Vim,\nwhich is Vi improved.\n\n100\n00:04:41.580 --> 00:04:45.680\nSo there's Vi and Vim,\nthey're the same program but\n\n101\n00:04:45.680 --> 00:04:49.770\none's better than the other obviously, the\nimproved one is the way you'll want to go.\n\n102\n00:04:49.770 --> 00:04:52.350\nThere's things like Nano,\nwhich is a great one.\n\n103\n00:04:52.350 --> 00:04:52.890\nI like it a lot.\n\n104\n00:04:52.890 --> 00:04:56.299\nI've actually become quite a fan\nof it as I've prepared for\n\n105\n00:04:56.299 --> 00:04:58.780\nthis show to the point where\nI threw it in the show.\n\n106\n00:04:58.780 --> 00:05:00.094\nI'm gonna show you that one.\n\n107\n00:05:00.094 --> 00:05:02.700\nAnd Emacs is tried and true,\nhas been around for quite some time.\n\n108\n00:05:02.700 --> 00:05:05.450\nThere are others as well that\nif you like them use them.\n\n109\n00:05:05.450 --> 00:05:07.720\nPlay around with them.\n\n110\n00:05:07.720 --> 00:05:12.350\nThose four though\nare gonna be found a lot.\n\n111\n00:05:12.350 --> 00:05:15.103\nSo you just any Linux distribution or\nUnix distribution, you sit down at,\n\n112\n00:05:15.103 --> 00:05:17.430\nyou open the shell, and\nyou're like, let me jump on here.\n\n113\n00:05:17.430 --> 00:05:19.200\nI type in vi and it's there.\n\n114\n00:05:19.200 --> 00:05:20.770\nI type in vim and it's there.\n\n115\n00:05:20.770 --> 00:05:23.270\nI type in emacs and it is there.\n\n116\n00:05:23.270 --> 00:05:25.740\nNano is still relatively new.\n\n117\n00:05:25.740 --> 00:05:32.030\nIt's starting to become more and\nmore because, and I see why.\n\n118\n00:05:32.030 --> 00:05:33.500\nIt works very well.\n\n119\n00:05:33.500 --> 00:05:36.600\nIt's very easy to bounce around in.\n\n120\n00:05:36.600 --> 00:05:38.030\nYou're gonna see that Vi and Vim there,\n\n121\n00:05:38.030 --> 00:05:41.620\neven though it's okay to work with,\nit's not bad.\n\n122\n00:05:41.620 --> 00:05:44.380\nAnd you do want to know how to do it,\nNano is easy.\n\n123\n00:05:44.380 --> 00:05:45.690\nSo let's start there.\n\n124\n00:05:45.690 --> 00:05:47.630\nLet's jump into Vi or Vim should I say.\n\n125\n00:05:47.630 --> 00:05:52.920\nBecause Vi really, Ronnie and\nI were talking about this earlier.\n\n126\n00:05:52.920 --> 00:05:58.225\nVi is the oldest at least as far as we\nunderstand is the oldest text editor.\n\n127\n00:05:58.225 --> 00:06:00.290\nEmacs is if it's not older,\nit's right there.\n\n128\n00:06:00.290 --> 00:06:03.350\nThey're pretty close neck and\nneck when it comes to age.\n\n129\n00:06:03.350 --> 00:06:04.900\nBut Vi is tried and true.\n\n130\n00:06:04.900 --> 00:06:05.970\nIt's been around a lot.\n\n131\n00:06:05.970 --> 00:06:09.080\nSo if you don't find Vim,\nyou almost guaranteed that you'll find Vi.\n\n132\n00:06:09.080 --> 00:06:12.670\nAnd a lot of the commands,\nthey work back and forth.\n\n133\n00:06:12.670 --> 00:06:16.220\nSo, if you learn Vim,\nyou basically learned Vi as well.\n\n134\n00:06:16.220 --> 00:06:21.840\n>> All right, so Daniel,\nlet me as a question too.\n\n135\n00:06:21.840 --> 00:06:25.770\nFor everything that we've talked\nabout is some form of text editor.\n\n136\n00:06:25.770 --> 00:06:29.790\nIt's like you said, it's almost like\nNotepad, you work in it, you do that.\n\n137\n00:06:29.790 --> 00:06:32.140\nBut, what you're actually\ntrying to tell us then is,\n\n138\n00:06:32.140 --> 00:06:36.280\nthe reason why would chose another one is,\neither there's more features in it, or\n\n139\n00:06:36.280 --> 00:06:38.780\nit works easier than some\nof the other ones here.\n\n140\n00:06:38.780 --> 00:06:42.750\nAnd so, for example, like,Vi, we know\nit's just the most basic text editor.\n\n141\n00:06:42.750 --> 00:06:45.130\nAnd, it's even challenging to navigate and\nget around in it.\n\n142\n00:06:45.130 --> 00:06:49.510\nAnd, what we're saying, are some of these\nnewer ones though, make it a lot easier,\n\n143\n00:06:49.510 --> 00:06:50.730\nmake it more user friendly,\n\n144\n00:06:50.730 --> 00:06:53.290\neven though you're working\nin a text based environment.\n\n145\n00:06:53.290 --> 00:06:54.280\n>> Yeah, that's exactly right.\n\n146\n00:06:54.280 --> 00:06:56.800\nThe thing with Vi was,\nif you can't remember, it's old, right?\n\n147\n00:06:56.800 --> 00:06:57.810\nIt was the first impetus.\n\n148\n00:06:57.810 --> 00:07:01.720\nIt was where all things began when it came\nto text editing as far as Vi went anyway.\n\n149\n00:07:01.720 --> 00:07:04.030\nSo it's going to be a little clumsy,\nit's going to be a little clunky.\n\n150\n00:07:04.030 --> 00:07:08.910\nAnd people as they use things more and\nmore, they go you know it would be great\n\n151\n00:07:08.910 --> 00:07:12.470\nif this did this, or\nif our text editors were able to do that.\n\n152\n00:07:12.470 --> 00:07:18.310\nAnd as people start writing their own text\neditors, they add those modifications.\n\n153\n00:07:18.310 --> 00:07:21.360\nObviously people said,\nwell I like Vi, I like what it does,\n\n154\n00:07:21.360 --> 00:07:23.842\nbut it needs a little more oomph.\n\n155\n00:07:23.842 --> 00:07:26.230\n>> [LAUGH]\n>> It needs some more [FOREIGN],\n\n156\n00:07:26.230 --> 00:07:27.380\nas it ways, right?\n\n157\n00:07:27.380 --> 00:07:31.470\nSo they added some features to it and\nthat's when Vim jumped onto the game.\n\n158\n00:07:31.470 --> 00:07:33.380\nAnd that's what we're\ngonna take a look at.\n\n159\n00:07:33.380 --> 00:07:36.050\nSo let's go ahead and\nwe'll jump into my computer here.\n\n160\n00:07:36.050 --> 00:07:39.010\nAnd we'll start working with Vim.\n\n161\n00:07:39.010 --> 00:07:44.430\nSo to make sure that Vim is actually\ninstalled on your system, you can do,\n\n162\n00:07:44.430 --> 00:07:49.630\nwell vim --help and\nyou'll get a nice help file here.\n\n163\n00:07:49.630 --> 00:07:51.460\nAnd that let's me know\nit's actually installed.\n\n164\n00:07:51.460 --> 00:07:55.010\nIf I try to run Vim and\nstart getting not found, that kinda thing.\n\n165\n00:07:55.010 --> 00:07:58.210\nWell then you know it's not there and\nyou might wanna try Vi.\n\n166\n00:07:58.210 --> 00:08:02.260\nNow, Vi will probably still work\neven if you have Vim installed.\n\n167\n00:08:02.260 --> 00:08:05.230\nBut here's the thing it's another\none of those ahh tricked ya kinda\n\n168\n00:08:05.230 --> 00:08:08.500\nthings that they do here in\nmodern Linux distributions.\n\n169\n00:08:08.500 --> 00:08:11.490\nSo they install Vim and\nthey make Vi .2Vim.\n\n170\n00:08:11.490 --> 00:08:13.140\nSo when you invoke Vi at the command line,\n\n171\n00:08:13.140 --> 00:08:17.130\nit's probably not running Vi,\nit's probably running Vim.\n\n172\n00:08:17.130 --> 00:08:22.080\nSo, that being said just understand\nthat that's probably what's occuring.\n\n173\n00:08:22.080 --> 00:08:26.330\nAnd that's why we want to look\nat Vim itself, it's more modern,\n\n174\n00:08:26.330 --> 00:08:27.190\nit's the better way to go.\n\n175\n00:08:27.190 --> 00:08:29.900\nSo that's what I want you\nguys to learn how to use it.\n\n176\n00:08:29.900 --> 00:08:33.860\nIf it's not, just install it and\nuse it because it's better than Vi.\n\n177\n00:08:33.860 --> 00:08:35.368\nLet's see here, where do we begin here?\n\n178\n00:08:35.368 --> 00:08:37.400\nWorking in lets open and\ncreate some files.\n\n179\n00:08:37.400 --> 00:08:41.670\nWe'll go ahead and clean my screen back\nout so we can start with fresh page here.\n\n180\n00:08:42.980 --> 00:08:46.730\nIf I ls, I can see I have a few\nfiles here in my directory and\n\n181\n00:08:46.730 --> 00:08:48.190\nI list those out for me.\n\n182\n00:08:48.190 --> 00:08:50.860\nI got a couple of,\nthis crazy file, file two.\n\n183\n00:08:50.860 --> 00:08:52.860\nIf I want to create a file,\n\n184\n00:08:52.860 --> 00:08:55.330\nif you've been watching the series\nyou'll notice I've done touch.\n\n185\n00:08:55.330 --> 00:08:57.210\nI can touch and create file three and\nthat will be there.\n\n186\n00:08:57.210 --> 00:08:59.160\nIt's a great way to create files.\n\n187\n00:08:59.160 --> 00:09:01.820\nYou can also use the i to\ndo the exact same thing.\n\n188\n00:09:01.820 --> 00:09:05.740\nThe only thing is,\nit will actually open the vi editor,\n\n189\n00:09:05.740 --> 00:09:08.570\nbecause it's expecting that you,\nyou don't want to create empty files.\n\n190\n00:09:08.570 --> 00:09:10.375\nTouch is good for creating empty files.\n\n191\n00:09:10.375 --> 00:09:12.110\n[INAUDIBLE] Good for creating files and\n\n192\n00:09:12.110 --> 00:09:15.020\nthen actually putting\nsomething inside of them.\n\n193\n00:09:15.020 --> 00:09:16.780\nSo, that's what we wanna do.\n\n194\n00:09:16.780 --> 00:09:20.660\nSo, if I wanna create a file,\nI just invoke vim like so and\n\n195\n00:09:20.660 --> 00:09:22.600\nI say what I want the file name to be.\n\n196\n00:09:22.600 --> 00:09:24.220\nIf it doesn't exist, it will create it.\n\n197\n00:09:24.220 --> 00:09:25.940\nIf it does exist, what's it gonna do?.\n\n198\n00:09:25.940 --> 00:09:27.410\nIt's gonna open the file of that name.\n\n199\n00:09:27.410 --> 00:09:29.870\nSo, you're kind of killing\ntwo birds with one stone.\n\n200\n00:09:29.870 --> 00:09:32.820\nYou're learning how to open\nfiles using the Vim, and\n\n201\n00:09:32.820 --> 00:09:37.020\nyou're learning how to\ncreate files using Vim.\n\n202\n00:09:37.020 --> 00:09:39.260\nIt's a very handy function.\n\n203\n00:09:39.260 --> 00:09:42.970\nSo if I wanna create file three,\nI just call it file three.\n\n204\n00:09:42.970 --> 00:09:46.360\nWe can see up above,\nfile three is not in this list.\n\n205\n00:09:46.360 --> 00:09:49.550\nSo if I do that and hit return,\nI've now launched into the program,\n\n206\n00:09:49.550 --> 00:09:51.950\nVim, and I can start editing the file.\n\n207\n00:09:51.950 --> 00:09:55.100\nAnd this is where that you've got to\nknow something about Vim, right?.\n\n208\n00:09:55.100 --> 00:09:59.610\nYou can't just start ticking\ntacking away at your keyboard and\n\n209\n00:09:59.610 --> 00:10:01.920\nexpect it to take your input.\n\n210\n00:10:01.920 --> 00:10:03.210\nIt's not going to do that.\n\n211\n00:10:03.210 --> 00:10:05.070\nIt's actually in the command button.\n\n212\n00:10:05.070 --> 00:10:08.180\nIt's looking for\ncommands at this point in time.\n\n213\n00:10:08.180 --> 00:10:08.890\nSo what I want to do is,\n\n214\n00:10:08.890 --> 00:10:12.350\nI want to give it a command so,\nthat I can actually insert text.\n\n215\n00:10:12.350 --> 00:10:13.340\nWhat is that command?.\n\n216\n00:10:13.340 --> 00:10:14.090\nIt's good old I.\n\n217\n00:10:14.090 --> 00:10:17.920\nIf I press I on my keyboard it's going to\nchange me from this command mode to insert\n\n218\n00:10:17.920 --> 00:10:25.370\nmode, and then I'll be able to modify,\nthe file itself and add text to it.\n\n219\n00:10:25.370 --> 00:10:25.880\nSo let's do that.\n\n220\n00:10:25.880 --> 00:10:31.160\nIf I hit I, you'll notice that down here\nin my left hand corner it now says insert.\n\n221\n00:10:31.160 --> 00:10:32.820\nThat lets me know I'm in insert mode.\n\n222\n00:10:32.820 --> 00:10:35.980\nThis is something that you\nwant to pay attention to,\n\n223\n00:10:35.980 --> 00:10:39.920\nbecause I still do it to this day, you\nget, you know Mr. tap tap, tappy type, and\n\n224\n00:10:39.920 --> 00:10:43.020\nyou're going crazy and you've accidentally\nescaped out of that insert mode or\n\n225\n00:10:43.020 --> 00:10:47.070\nyou've gone into another mode,\nthat's adding text and\n\n226\n00:10:47.070 --> 00:10:50.660\nit's different where you jumped the cursor\nand you've done the issues on that.\n\n227\n00:10:50.660 --> 00:10:55.260\nThat is something you do need to pay\nattention to when you're using them,\n\n228\n00:10:55.260 --> 00:10:57.880\nis have I gone out of that insert mode and\ninto something else?.\n\n229\n00:10:57.880 --> 00:10:59.990\nAnd then you can be lost\nto all high heaven.\n\n230\n00:10:59.990 --> 00:11:02.090\nYou don't have any idea what's going on.\n\n231\n00:11:02.090 --> 00:11:04.260\nWhy is my text box showing\nup on the screen?.\n\n232\n00:11:04.260 --> 00:11:05.850\nWell, it's because you're\nout of that insert mode.\n\n233\n00:11:05.850 --> 00:11:07.440\nMake sure that you keep an eye down there,\nand\n\n234\n00:11:07.440 --> 00:11:10.670\nsee if that changes ever and\nthen you're like, oh, that's the problem.\n\n235\n00:11:10.670 --> 00:11:15.420\nI'm not Insert mode,\neither not insert text in file.\n\n236\n00:11:15.420 --> 00:11:19.980\nBut now that we are in insert\nmode it's as easy as pressing I,\n\n237\n00:11:19.980 --> 00:11:23.430\nI cannot touch this file as you can see.\n\n238\n00:11:23.430 --> 00:11:28.570\nThis is some text and\nthis is some more text.\n\n239\n00:11:28.570 --> 00:11:30.450\nEasy stuff, right?.\n\n240\n00:11:30.450 --> 00:11:31.620\nI have now modified my file.\n\n241\n00:11:31.620 --> 00:11:35.630\nI added information into it,\nand now I what do I do?.\n\n242\n00:11:35.630 --> 00:11:36.645\nHow do I how do I save this?.\n\n243\n00:11:36.645 --> 00:11:38.170\nCuz that's what I want to do.\n\n244\n00:11:38.170 --> 00:11:39.840\nWell, we got to use the command.\n\n245\n00:11:39.840 --> 00:11:41.940\nWe got to go,\nhey we got to get out of insert mode,\n\n246\n00:11:41.940 --> 00:11:45.370\nbecause now anything I type is going\nto be put into the pile itself.\n\n247\n00:11:45.370 --> 00:11:49.970\nSo I got to get out of that mode and\nback into the command mode.\n\n248\n00:11:49.970 --> 00:11:51.250\nSo what do I do?.\nPress the escape key,\n\n249\n00:11:51.250 --> 00:11:53.490\nsort of an easy one to remember.\n\n250\n00:11:53.490 --> 00:11:55.780\nOnce I press escape you'll\nnotice that text, or\n\n251\n00:11:55.780 --> 00:11:57.710\nthat insert mode has\ndisappeared from down here.\n\n252\n00:11:57.710 --> 00:12:00.210\nThat's letting me know that\nI'm no longer in insert mode,\n\n253\n00:12:00.210 --> 00:12:02.550\nI'm in that command mode\nI then use the colon.\n\n254\n00:12:02.550 --> 00:12:08.910\nThe colon is gonna be your friend for\nVIM and it is basically,\n\n255\n00:12:08.910 --> 00:12:13.450\nin a lot of ways, you don't always\nuse it but you'll use it a lot.\n\n256\n00:12:13.450 --> 00:12:15.330\nAnd you're gonna say colon, command.\n\n257\n00:12:15.330 --> 00:12:17.860\nSo that's what we're gonna do right now.\n\n258\n00:12:17.860 --> 00:12:22.680\nIf I wanted to save this file,\nI would want to write, right?.\n\n259\n00:12:22.680 --> 00:12:24.550\nThat's basically what it's looking for.\n\n260\n00:12:24.550 --> 00:12:31.320\nDo I want to write, the modifications that\nI've made to the file which is named file.\n\n261\n00:12:31.320 --> 00:12:33.230\nThat is exactly what I want to do.\n\n262\n00:12:33.230 --> 00:12:35.270\nSo if I want to do that,\nI would do my colon.\n\n263\n00:12:35.270 --> 00:12:37.690\nYou'll notice it didn't insert that\n\n264\n00:12:37.690 --> 00:12:42.620\ninto the file itself cuz I 'm in\nthe command mode and then I would do W's.\n\n265\n00:12:42.620 --> 00:12:44.560\nColon w is gonna write my changes.\n\n266\n00:12:44.560 --> 00:12:46.020\nAnd that's exactly what I want.\n\n267\n00:12:46.020 --> 00:12:47.420\nSo I hit teturn after that.\n\n268\n00:12:47.420 --> 00:12:51.030\nIt says that it has been written,\nand it's good.\n\n269\n00:12:51.030 --> 00:12:56.480\nThat's good, so save that into file\nthree and I'm off to the races.\n\n270\n00:12:56.480 --> 00:12:59.370\nBut now we get to the part where\nI'm done typing, I've created this,\n\n271\n00:12:59.370 --> 00:13:03.550\nI've saved my changes, now how\nthe heck do I get out of this thing?.\n\n272\n00:13:03.550 --> 00:13:04.910\nI'm still stuck in there.\n\n273\n00:13:04.910 --> 00:13:08.080\nWell we've talked about this\nas well in a previous episode.\n\n274\n00:13:08.080 --> 00:13:12.480\nA lot of times your q command is going to\nbe your quit ,and it's not different for\n\n275\n00:13:12.480 --> 00:13:13.340\nhere and them.\n\n276\n00:13:13.340 --> 00:13:18.310\nWe want to use the q, and\nthat's gonna get us out of here.\n\n277\n00:13:18.310 --> 00:13:20.860\nSo we jump back here on my screen.\n\n278\n00:13:20.860 --> 00:13:26.560\nWe're still in that command mode and\nall we have to do is colon again and\n\n279\n00:13:26.560 --> 00:13:30.580\nhit q, hit return, and\nnow I'm back out to my shell.\n\n280\n00:13:30.580 --> 00:13:32.540\nI've released the prompt.\n\n281\n00:13:32.540 --> 00:13:36.310\nI can now take a look, do an ls and\nfile three should be in my list.\n\n282\n00:13:36.310 --> 00:13:38.660\nAnd there it is right there.\n\n283\n00:13:38.660 --> 00:13:42.800\nSo now we've successfully created,\nopened, edited, saved the changes and\n\n284\n00:13:42.800 --> 00:13:43.330\nquit the editor.\n\n285\n00:13:43.330 --> 00:13:44.550\nAnd a very short amount of time.\n\n286\n00:13:44.550 --> 00:13:47.140\nAs you can see it's not that\ndifficult to work in VIM.\n\n287\n00:13:47.140 --> 00:13:49.690\nAnd now that I say that\nwe're going to jump into\n\n288\n00:13:49.690 --> 00:13:52.720\na few little more difficult things.\n\n289\n00:13:52.720 --> 00:14:00.100\nThere's no doubt that now today with\nusing VIM, it does actually make it nice.\n\n290\n00:14:00.100 --> 00:14:03.500\n>> I know when I first started\nlearning about it was actually using,\n\n291\n00:14:03.500 --> 00:14:06.530\nand even navigating around,\nthe actual text itself,\n\n292\n00:14:06.530 --> 00:14:09.560\nonce you got in there,\nwas a little bit more challenging.\n\n293\n00:14:09.560 --> 00:14:12.940\nFor example, some of the keyboards\nwouldn't allow you to use arrow keys when\n\n294\n00:14:12.940 --> 00:14:15.930\nyou tried to actually move between\nlines that you had typed, and\n\n295\n00:14:15.930 --> 00:14:20.870\nyou actually had to use, I think, the H\nand the K, and whatever other letters were\n\n296\n00:14:20.870 --> 00:14:24.810\nactually up there, that you'd have\nto be able to navigate around.\n\n297\n00:14:24.810 --> 00:14:27.540\nBut it looks like them kinda\nmodernized some of that.\n\n298\n00:14:27.540 --> 00:14:30.130\nAnd not only can we do it\nthe way that daniel showed, but\n\n299\n00:14:30.130 --> 00:14:33.030\nsometimes you can even end and\ncombine those things together at the end.\n\n300\n00:14:33.030 --> 00:14:36.090\n>> So like you could do a .Q or\n.WQ to write and then quit.\n\n301\n00:14:36.090 --> 00:14:38.890\n>> And so\nall that can be combined together as well.\n\n302\n00:14:38.890 --> 00:14:41.390\n>> And this is really gonna be handy for\nyou, right,\n\n303\n00:14:41.390 --> 00:14:44.310\nas you go and\nstart editing more and more files.\n\n304\n00:14:44.310 --> 00:14:47.940\nIt really is handy when\n\n305\n00:14:47.940 --> 00:14:52.000\nyou start working with them because you're\nnot just go oh, what do I have to do?.\n\n306\n00:14:52.000 --> 00:14:53.810\nSo you have to now put out of this and\nsave that.\n\n307\n00:14:53.810 --> 00:14:56.510\nYou're going to want to do all\nof those in one fellow swoop.\n\n308\n00:14:56.510 --> 00:15:01.210\nSo then there's a very nice addition or\nenhancement to the original VI.\n\n309\n00:15:01.210 --> 00:15:01.800\nBut daniel.\n\n310\n00:15:01.800 --> 00:15:04.560\nYou're saying that you\nhave a new favorite now.\n\n311\n00:15:04.560 --> 00:15:06.510\nEven though you've been\nworking with them for a while.\n\n312\n00:15:06.510 --> 00:15:08.970\n>> Oh yeah.\nI definitely have a new favorite but\n\n313\n00:15:08.970 --> 00:15:09.800\nwe're not done with that.\n\n314\n00:15:09.800 --> 00:15:10.920\n>> Oh okay.\nI'm sorry.\n\n315\n00:15:10.920 --> 00:15:12.190\n>> Oh.\nYou thought it was the end of them.\n\n316\n00:15:12.190 --> 00:15:13.000\n>> Yeah. I did. >> You thought wrong.\n\n317\n00:15:13.000 --> 00:15:13.878\n[INAUDIBLE] we got more to go.\n\n318\n00:15:13.878 --> 00:15:15.430\n[LAUGH] It is.\n\n319\n00:15:15.430 --> 00:15:16.610\nIt's not done.\n\n320\n00:15:16.610 --> 00:15:17.630\nI do wanna show you.\n\n321\n00:15:17.630 --> 00:15:19.410\nRonny did make a great point though.\n\n322\n00:15:19.410 --> 00:15:23.900\nHe brought up a thing that you can combine\ncommands in them doing the :wq right.\n\n323\n00:15:23.900 --> 00:15:26.080\nSo, I want to write and then quit.\n\n324\n00:15:26.080 --> 00:15:27.200\nRight, so, I do all those.\n\n325\n00:15:27.200 --> 00:15:28.170\nI don't have to the w.\n\n326\n00:15:28.170 --> 00:15:32.920\nIt writes the changes, and\nthen the :q and I get to quit out.\n\n327\n00:15:32.920 --> 00:15:36.820\nJust put that :wq and\nit does both operations at the same time.\n\n328\n00:15:36.820 --> 00:15:38.090\nSo, that's a good thing.\n\n329\n00:15:38.090 --> 00:15:41.010\nHere's some of the things\nthat happen sometimes though.\n\n330\n00:15:41.010 --> 00:15:43.150\nEspecially, when you're\nworking with file names.\n\n331\n00:15:43.150 --> 00:15:45.190\nLike I've got: file 1, file 2 and file 3.\n\n332\n00:15:45.190 --> 00:15:46.940\nVery straightforward.\n\n333\n00:15:46.940 --> 00:15:51.180\nWhat if I, you know, get happy with that\npinky finger on that tab completion and\n\n334\n00:15:51.180 --> 00:15:55.800\nI go to the wrong file and\nmaybe I don't even realize it.\n\n335\n00:15:55.800 --> 00:16:00.060\nMaybe I've jumped in the wrong file and\nI insert, I'm editing, I'm going crazy.\n\n336\n00:16:00.060 --> 00:16:05.150\nI've added file, I've added content to it\nand I realize man this is the wrong file.\n\n337\n00:16:05.150 --> 00:16:07.530\nI've gotta get out of here.\n\n338\n00:16:07.530 --> 00:16:08.540\nBut I've made changes.\n\n339\n00:16:08.540 --> 00:16:11.030\nDo I then just backspace\nall those changes, and\n\n340\n00:16:11.030 --> 00:16:13.920\ntry to get the file back\nto the original setting?\n\n341\n00:16:13.920 --> 00:16:14.870\nNo, that's not what we do.\n\n342\n00:16:14.870 --> 00:16:16.270\nSo what do we do?\nI'm gonna show you.\n\n343\n00:16:16.270 --> 00:16:18.090\nAnd this is an interesting thing here.\n\n344\n00:16:18.090 --> 00:16:22.030\nSomething you will actually need to know.\n\n345\n00:16:22.030 --> 00:16:24.200\nSo I'm gonna open our File 3\nagain because that's our file.\n\n346\n00:16:24.200 --> 00:16:25.990\nSo vim File 3, and open that up.\n\n347\n00:16:25.990 --> 00:16:27.999\nThere's our lovely file.\n\n348\n00:16:30.150 --> 00:16:30.930\nWe, we love it.\n\n349\n00:16:30.930 --> 00:16:31.860\nWe adore it.\n\n350\n00:16:31.860 --> 00:16:32.930\nDo the I for insert, mode.\n\n351\n00:16:32.930 --> 00:16:35.780\nI come to the, the top of this beast.\n\n352\n00:16:35.780 --> 00:16:36.860\nGo to the end.\n\n353\n00:16:36.860 --> 00:16:38.570\nI start adding.\n\n354\n00:16:38.570 --> 00:16:40.670\nI'm like okay, this is some text.\n\n355\n00:16:40.670 --> 00:16:42.820\nI can't even spell today.\n\n356\n00:16:42.820 --> 00:16:47.209\nSome text that doesn't, doesn't belong.\n\n357\n00:16:47.209 --> 00:16:53.320\nAlright, oh no, that is now, I,\nI've made changes to this file.\n\n358\n00:16:53.320 --> 00:16:55.460\nNow like I said,\nthere's a lot of changes, and\n\n359\n00:16:55.460 --> 00:16:59.250\nI don't wanna just scroll back and try\nto all that, it's too much work for me.\n\n360\n00:16:59.250 --> 00:17:01.040\nWhat do I do, right?\n\n361\n00:17:01.040 --> 00:17:04.720\nWell, you can go back to Escape, and\nif I just say, oh, you know what?\n\n362\n00:17:04.720 --> 00:17:08.650\nI'll just quit, I'll just quit out and\nthat'll make it easy, right?\n\n363\n00:17:08.650 --> 00:17:11.780\nIt'll do the Q, look at that,\nwhat has happened here?\n\n364\n00:17:11.780 --> 00:17:13.110\nIt's giving me an error,\n\n365\n00:17:13.110 --> 00:17:18.460\nit's saying, hey bud, you've made some\nchanges to this file, you can't just quit.\n\n366\n00:17:18.460 --> 00:17:19.830\nYeah that's not how we roll.\n\n367\n00:17:19.830 --> 00:17:22.780\nNow do you wanna save that?\n\n368\n00:17:22.780 --> 00:17:24.710\nBecause, actually this\nis a really good thing.\n\n369\n00:17:24.710 --> 00:17:25.890\nRight, you think of it.\n\n370\n00:17:25.890 --> 00:17:27.020\nWhen you're in a gooey editor.\n\n371\n00:17:27.020 --> 00:17:29.540\nRight, and you go hit the X\nwithout doing any kind of saving.\n\n372\n00:17:29.540 --> 00:17:30.230\nWhat does it do?\n\n373\n00:17:30.230 --> 00:17:31.190\nIt said do you really.\n\n374\n00:17:31.190 --> 00:17:33.100\nDo you want to save before you exit?\n\n375\n00:17:33.100 --> 00:17:34.900\nAnd that's what it's\ntelling us right here.\n\n376\n00:17:34.900 --> 00:17:36.670\nDo you want to save before I exit?\n\n377\n00:17:36.670 --> 00:17:39.230\nBut I don't want to save before I exit.\n\n378\n00:17:39.230 --> 00:17:41.190\nIf I don't what does it say?\n\n379\n00:17:41.190 --> 00:17:43.210\nAdd the exclamation point.\n\n380\n00:17:43.210 --> 00:17:48.285\nOver ride the fact that there\nhas been modifications made,\n\n381\n00:17:48.285 --> 00:17:49.770\nthat's saying I want to quit.\n\n382\n00:17:49.770 --> 00:17:54.930\nAnd I don't want to hear any argument\nabout it, I just want to quit this thing.\n\n383\n00:17:54.930 --> 00:17:58.370\nOnce this happens, once I add that\nexclamation point at the end of\n\n384\n00:17:58.370 --> 00:18:02.250\nthis command, it will actually jump out\nof the editor and not save those changes.\n\n385\n00:18:02.250 --> 00:18:06.090\nAgain, you have to be careful with that,\nbecause if you're like oh no.\n\n386\n00:18:06.090 --> 00:18:10.890\nDon't get into the habit and\nI've been there myself and\n\n387\n00:18:10.890 --> 00:18:14.960\nget in the habit of adding that\nbecause you don't wanna be told no.\n\n388\n00:18:14.960 --> 00:18:17.546\nYou don't wanna be given\nanything like this so\n\n389\n00:18:17.546 --> 00:18:20.010\nyou start adding it to\nall the end of WQ bang.\n\n390\n00:18:20.010 --> 00:18:20.720\nNo, don't do that.\n\n391\n00:18:20.720 --> 00:18:23.930\nDo WQ and\nif you really want to then go back in.\n\n392\n00:18:23.930 --> 00:18:29.660\nSo, let's do that, let's add that to\nhere so i'll give it the colon Q and\n\n393\n00:18:29.660 --> 00:18:33.140\nthe bang symbol, hit return,\nno more balking at me.\n\n394\n00:18:33.140 --> 00:18:35.540\nAnd if I do cat of the file3 and\n\n395\n00:18:35.540 --> 00:18:40.050\nlook what's inside, you'll notice\nthat it did not save those changes.\n\n396\n00:18:40.050 --> 00:18:42.960\nThat's exactly what we want.\n\n397\n00:18:42.960 --> 00:18:44.260\nLet's see what else we have here.\n\n398\n00:18:44.260 --> 00:18:47.700\nOh, yes.\nThis is a very, very handy thing as well.\n\n399\n00:18:47.700 --> 00:18:53.260\nIf I open up then again, file3, and let's\nsay I've got a ton of lines of text here.\n\n400\n00:18:53.260 --> 00:18:55.010\nAnd maybe I actually have some.\n\n401\n00:18:55.010 --> 00:18:57.220\nThat would be easier here.\n\n402\n00:18:57.220 --> 00:18:58.640\nLet me just q out.\n\n403\n00:18:58.640 --> 00:18:59.440\nTake a look, yeah.\n\n404\n00:18:59.440 --> 00:19:01.861\nLet's just take a look at that README.TXT.\n\n405\n00:19:01.861 --> 00:19:04.190\nThis is a file I downloaded from FreeBSD.\n\n406\n00:19:04.190 --> 00:19:05.190\nIt was a text file.\n\n407\n00:19:05.190 --> 00:19:06.590\nIt has a lot of information.\n\n408\n00:19:06.590 --> 00:19:11.360\nI just needed a file with some content\nthat I didn't want to generate myself.\n\n409\n00:19:11.360 --> 00:19:12.740\nSo I found one here.\n\n410\n00:19:12.740 --> 00:19:14.160\nNotice there is a lot of stuff.\n\n411\n00:19:14.160 --> 00:19:18.700\nNow, this is going to come in\nhandy when it comes to scripting.\n\n412\n00:19:18.700 --> 00:19:21.350\nLet's say this was a script and\nyou get an error.\n\n413\n00:19:21.350 --> 00:19:22.150\nLine 53 has an issue.\n\n414\n00:19:22.150 --> 00:19:23.240\nRight?\nOh, okay.\n\n415\n00:19:23.240 --> 00:19:26.870\nNow if I open this file thing,\nthis is our script here.\n\n416\n00:19:26.870 --> 00:19:28.220\nI say read me that text.\n\n417\n00:19:28.220 --> 00:19:30.020\nI'm inside here.\n\n418\n00:19:30.020 --> 00:19:34.020\nI can see that I'm in read me that text.\n\n419\n00:19:34.020 --> 00:19:36.250\nHow do I know,\nI'm going to have to go through and\n\n420\n00:19:36.250 --> 00:19:39.420\nread one two three four five six seven,\nno stop.\n\n421\n00:19:39.420 --> 00:19:41.280\nThat's not what we're going to do.\n\n422\n00:19:41.280 --> 00:19:42.540\nThe good thing is down here.\n\n423\n00:19:42.540 --> 00:19:46.130\nYou see that eight and that one?\n\n424\n00:19:46.130 --> 00:19:50.470\nThat lets you know that\nyou're on the eighth line,\n\n425\n00:19:50.470 --> 00:19:54.160\non the first character of that line,\nor the first word of that line.\n\n426\n00:19:54.160 --> 00:19:56.840\nRight, so that's a good thing to know,\nthat that is there.\n\n427\n00:19:56.840 --> 00:20:01.300\nBut, I wanna make it a little easier for\nmyself, so we're in that command mode,\n\n428\n00:20:01.300 --> 00:20:04.530\nwe're gonna throw a colon at it,\nand say set number.\n\n429\n00:20:04.530 --> 00:20:07.270\nRight, this is our lifesaver right here,\nmakes it easier for us to see.\n\n430\n00:20:07.270 --> 00:20:11.420\nNow I get a nice list of numbers down\nthe left-hand side, I could easily\n\n431\n00:20:11.420 --> 00:20:16.530\njust drop down to line 53, and if there's\nan error there I can make the change,\n\n432\n00:20:16.530 --> 00:20:20.570\njust take a look and see what's going\non with line 53 that it doesn't like?\n\n433\n00:20:20.570 --> 00:20:22.520\nMaybe I forgot to close a parenthesis.\n\n434\n00:20:22.520 --> 00:20:24.930\nYou've seen my typing skills,\nthey're horrible, so\n\n435\n00:20:24.930 --> 00:20:27.710\nobviously I'm gonna have\nerrors in my syntax.\n\n436\n00:20:27.710 --> 00:20:31.700\nAnd having the ability to go right to\nthe line that it's telling me is having\n\n437\n00:20:31.700 --> 00:20:33.520\nan issue, that's what I want.\n\n438\n00:20:33.520 --> 00:20:38.070\nSo colon, set number, that's gonna be\na nice thing to have inside of VIM.\n\n439\n00:20:38.070 --> 00:20:39.500\nLet's see what else we have here.\n\n440\n00:20:39.500 --> 00:20:41.540\nYes, the ability to actually\nsearch the document.\n\n441\n00:20:41.540 --> 00:20:43.910\nWow, that's gonna be helpful as well.\n\n442\n00:20:43.910 --> 00:20:45.770\nRight, now, again, GUIs,\nwe have this forever.\n\n443\n00:20:45.770 --> 00:20:49.750\nThey're a whole lot nicer, but\nwhen you're inside this text mode, hey!\n\n444\n00:20:49.750 --> 00:20:51.340\nWhat are you gonna do?\n\n445\n00:20:51.340 --> 00:20:52.840\nYou gotta be able to do this.\n\n446\n00:20:52.840 --> 00:20:55.910\nSo what you do is you do\nthe forward slash, and\n\n447\n00:20:55.910 --> 00:20:59.170\nnow you have the string of\ncharacters that you want to search.\n\n448\n00:20:59.170 --> 00:21:02.260\nSo if I was looking for\nBSD, and I hit return, and\n\n449\n00:21:02.260 --> 00:21:04.380\nnow it's highlight all those BSD's.\n\n450\n00:21:04.380 --> 00:21:08.320\nIt's showing me exactly\nwhere those are lined up.\n\n451\n00:21:08.320 --> 00:21:11.760\nSo, if I'm looking for a specific again\nthinking in the lines of scripting,\n\n452\n00:21:11.760 --> 00:21:14.600\nI'm looking for maybe an if statement.\n\n453\n00:21:14.600 --> 00:21:18.160\nI can just search for if's and\nthen start combing through them and\n\n454\n00:21:18.160 --> 00:21:21.360\nfind the one that I might think needs\nto be modified or has a problem.\n\n455\n00:21:21.360 --> 00:21:23.350\nSomething of that nature.\n\n456\n00:21:23.350 --> 00:21:28.030\n>> Now, the other thing that we can also\ndo with these different types of commands\n\n457\n00:21:28.030 --> 00:21:30.060\nis of course the ability to copy and\npaste.\n\n458\n00:21:30.060 --> 00:21:33.010\nAnd you may be wondering like why\nin the world would I do that?\n\n459\n00:21:33.010 --> 00:21:37.600\nWell don't forget in scripting sometimes\nwhat can happen is you have a lot of text\n\n460\n00:21:37.600 --> 00:21:41.780\nthere that you might actually want to\ncopy from one location to another one.\n\n461\n00:21:41.780 --> 00:21:45.030\nAnd so Daniel, there are commands in VIM\nthat actually help us do that right?\n\n462\n00:21:45.030 --> 00:21:46.800\nYep, copy and paste,\nan oldie but a goodie.\n\n463\n00:21:46.800 --> 00:21:48.060\nWe've all used it, we all love it.\n\n464\n00:21:48.060 --> 00:21:50.780\nSo we gotta know how to\nwork with it inside of VIM.\n\n465\n00:21:50.780 --> 00:21:51.480\nIn VIM they call it yank.\n\n466\n00:21:51.480 --> 00:21:53.410\nSo that's fun.\nBecause it's yanking that text out.\n\n467\n00:21:53.410 --> 00:21:54.720\nSo it's saying this is the text I want.\n\n468\n00:21:54.720 --> 00:21:56.660\nNot that it's removing it,\nit's just copying it.\n\n469\n00:21:56.660 --> 00:22:02.490\nSo don't be afraid to yank\none of these pieces of text.\n\n470\n00:22:02.490 --> 00:22:03.680\nSo how do we use yank?\n\n471\n00:22:03.680 --> 00:22:04.980\nIt is the YYY command.\n\n472\n00:22:04.980 --> 00:22:05.910\nAnd all you do is throw.\n\n473\n00:22:05.910 --> 00:22:07.560\nYou see now I'm freaking it out.\n\n474\n00:22:07.560 --> 00:22:09.020\nNow I gotta go back and Escape.\n\n475\n00:22:09.020 --> 00:22:10.670\nThere we go, YY, I'm sorry here.\n\n476\n00:22:10.670 --> 00:22:12.490\nLet me go there, it's recording.\n\n477\n00:22:12.490 --> 00:22:17.130\nLet me just quit this file,\nI don't want to mess with it.\n\n478\n00:22:18.260 --> 00:22:19.720\nThat's what I want to do.\n\n479\n00:22:19.720 --> 00:22:22.340\nAll right, escape out of here,\nthere we go.\n\n480\n00:22:22.340 --> 00:22:23.360\nNow it's nice and happy.\n\n481\n00:22:23.360 --> 00:22:25.020\nLet's go back to our file three here.\n\n482\n00:22:25.020 --> 00:22:29.310\nVim, file three,\na little bit easier to work with here.\n\n483\n00:22:29.310 --> 00:22:32.290\nSo here we go.\nWe need to get into the insert mode, and\n\n484\n00:22:32.290 --> 00:22:34.400\nthat way we can start messing\naround with this yankability.\n\n485\n00:22:34.400 --> 00:22:37.750\nSo if I go into insert and\nI find, I'm sorry you don't\n\n486\n00:22:37.750 --> 00:22:38.650\nwant to be in this [INAUDIBLE]\n>> [LAUGH]\n\n487\n00:22:38.650 --> 00:22:40.380\n>> I'm so used to jumping\n\n488\n00:22:40.380 --> 00:22:41.120\ninto that insert mode.\n\n489\n00:22:41.120 --> 00:22:44.350\nYou don't want it, get out of that guy.\n\n490\n00:22:44.350 --> 00:22:46.500\nFind the line that you want\nto yank out of, right?\n\n491\n00:22:46.500 --> 00:22:49.280\nSo, if I wanted to yank this whole\nline two, the system or text,\n\n492\n00:22:49.280 --> 00:22:49.960\nI would just do Y-Y.\n\n493\n00:22:49.960 --> 00:22:51.100\nDidn't see anything happen.\n\n494\n00:22:51.100 --> 00:22:52.760\n>> Right?\n>> Just crazy business.\n\n495\n00:22:52.760 --> 00:22:55.730\nAnd now, I want to paste it.\n\n496\n00:22:55.730 --> 00:22:56.670\nWell, guess what?\n\n497\n00:22:56.670 --> 00:22:57.930\nP is our guy, I hit P.\n\n498\n00:22:57.930 --> 00:22:58.890\nLook at that.\n\n499\n00:22:58.890 --> 00:23:00.340\n>> Nice.\n>> Skips to the next line.\n\n500\n00:23:00.340 --> 00:23:02.170\nSo, that's a good thing for us to know.\n\n501\n00:23:02.170 --> 00:23:04.900\nIf I want.\nNotice that it pasted\n\n502\n00:23:04.900 --> 00:23:06.530\nit to the line below the cursor.\n\n503\n00:23:06.530 --> 00:23:09.780\nIf I wanted to do it above\nthe curser I'd do a capital P.\n\n504\n00:23:09.780 --> 00:23:10.910\nSo you've got up, up, and above.\n\n505\n00:23:10.910 --> 00:23:13.320\nRight there's a whole line.\n\n506\n00:23:13.320 --> 00:23:16.370\nNow let's do, what about from\nthe cursor to the end of the line?\n\n507\n00:23:16.370 --> 00:23:18.020\nWhat if I didn't want the whole line?\n\n508\n00:23:18.020 --> 00:23:19.170\nI just wanted more text.\n\n509\n00:23:19.170 --> 00:23:23.350\nSo I could scroll over with my cursor,\nput my cursor where I want it.\n\n510\n00:23:23.350 --> 00:23:28.430\nAnd then say, well I'll do it over\nhere to make sure it gets that.\n\n511\n00:23:28.430 --> 00:23:31.240\nAnd say Y, dollar sign.\n\n512\n00:23:31.240 --> 00:23:32.260\nThat's what you need.\n\n513\n00:23:32.260 --> 00:23:33.940\nSo Y dollar sign.\n\n514\n00:23:33.940 --> 00:23:36.250\nAgain, notice you didn't see anything.\n\n515\n00:23:36.250 --> 00:23:38.030\nBut if I move the cursor\n[INAUDIBLE] wherever.\n\n516\n00:23:38.030 --> 00:23:39.200\nAnd I do the paste.\n\n517\n00:23:39.200 --> 00:23:41.300\nIt's pasting it to the other\nside of the cursor.\n\n518\n00:23:41.300 --> 00:23:43.030\nSo it's grabbing that.\n\n519\n00:23:43.030 --> 00:23:45.850\nIt's putting it through\nthe right side of cursor.\n\n520\n00:23:45.850 --> 00:23:47.740\nSo that's one way we can do it.\n\n521\n00:23:47.740 --> 00:23:48.970\nWe can also do the word.\n\n522\n00:23:50.270 --> 00:23:54.800\nIf I just want let's\nsay the word sum here.\n\n523\n00:23:54.800 --> 00:23:56.810\nI will do yw.\n\n524\n00:23:56.810 --> 00:23:58.090\nThat's y for the word [INAUDIBLE].\n\n525\n00:23:58.090 --> 00:24:01.470\nYank the word, so yw, and then just p.\n\n526\n00:24:01.470 --> 00:24:04.420\nOh, I copied a blank space.\n\n527\n00:24:04.420 --> 00:24:04.980\n[LAUGH] That helps.\n\n528\n00:24:04.980 --> 00:24:07.250\nPut it on the right spot there Daniel.\n\n529\n00:24:07.250 --> 00:24:07.840\nSo yw, and now p.\n\n530\n00:24:07.840 --> 00:24:09.910\nAnd now you notice we get some again.\n\n531\n00:24:09.910 --> 00:24:11.830\nIt redoes what you already had.\n\n532\n00:24:11.830 --> 00:24:14.320\nSo cutting and pasting,\nthat's the basics of it.\n\n533\n00:24:14.320 --> 00:24:19.260\nProbably won't do a whole lot\nof that inside of VIM, I mean\n\n534\n00:24:19.260 --> 00:24:23.800\nunless you're just copying blocks of code\nor something of that in your scripts.\n\n535\n00:24:23.800 --> 00:24:26.190\nThat will make it a little bit easier.\n\n536\n00:24:26.190 --> 00:24:30.010\nGood thing is is inside on some of these\neditors you can actually use your mouse.\n\n537\n00:24:30.010 --> 00:24:32.210\nA lot of that goes by the wayside, but\n\n538\n00:24:32.210 --> 00:24:33.870\nif you don't have that\nmouse option there you go.\n\n539\n00:24:33.870 --> 00:24:35.990\nYou can use the yank command for that.\n\n540\n00:24:35.990 --> 00:24:39.840\nYou can even yank like I said if\nyou want multiple lines say my\n\n541\n00:24:39.840 --> 00:24:41.380\nY's are yank command.\n\n542\n00:24:41.380 --> 00:24:44.780\nI want to get all three of these, right?\n\n543\n00:24:44.780 --> 00:24:47.455\nGo to here.\nI want all three of those lines.\n\n544\n00:24:47.455 --> 00:24:49.310\nI'll I'll say 3yy, right?\n\n545\n00:24:49.310 --> 00:24:52.670\nAnd you'll notice down at the bottom here,\nit says 3 lines yanked.\n\n546\n00:24:52.670 --> 00:24:55.470\nThat's what we wanted to see.\n\n547\n00:24:55.470 --> 00:24:59.120\nSo now I can just key that, and\nthere we go, we're good to go.\n\n548\n00:24:59.120 --> 00:25:01.710\nAll right, so very, very simple.\n\n549\n00:25:01.710 --> 00:25:07.080\nThat is basically all the real stuff\nyou're gonna do inside of VIM,\n\n550\n00:25:07.080 --> 00:25:09.240\nthat VIM is now over,\nRonnie is happy, I know it, and\n\n551\n00:25:09.240 --> 00:25:12.620\nwe can move onto the more\neasily used nano.\n\n552\n00:25:13.700 --> 00:25:15.280\nNano was our friend.\n\n553\n00:25:15.280 --> 00:25:17.860\nNano was a whole lot easier.\n\n554\n00:25:17.860 --> 00:25:20.290\nLet me get out of VIM here and\nwe'll jump into nano and\n\n555\n00:25:20.290 --> 00:25:22.760\nsee how much easier it is for us to use.\n\n556\n00:25:22.760 --> 00:25:24.410\nI'm going to escape out.\n\n557\n00:25:24.410 --> 00:25:27.710\nThat's right, and control,\nor I'm sorry colon+q.\n\n558\n00:25:27.710 --> 00:25:28.620\nOh, gotta remember that.\n\n559\n00:25:28.620 --> 00:25:32.140\nI put my, because I don't\nwant to save those changes.\n\n560\n00:25:32.140 --> 00:25:34.110\nThere we go.\n\n561\n00:25:34.110 --> 00:25:37.120\nOh look at me.\nI'm going right back into it.\n\n562\n00:25:37.120 --> 00:25:38.100\nQ, thank you sir.\n\n563\n00:25:38.100 --> 00:25:39.980\nMay I please have another.\n\n564\n00:25:39.980 --> 00:25:41.120\nHere we go.\n\n565\n00:25:41.120 --> 00:25:41.930\nLet's get outta here.\n\n566\n00:25:41.930 --> 00:25:42.840\nI'll clear the screen.\n\n567\n00:25:42.840 --> 00:25:46.680\nNano, same way to, again, if you want\nto create a file that doesn't exist.\n\n568\n00:25:46.680 --> 00:25:48.720\nSo, file four if it was there.\n\n569\n00:25:48.720 --> 00:25:50.720\nJust nano and file four.\n\n570\n00:25:50.720 --> 00:25:52.310\nAgain, it will create\nit if it doesn't exist.\n\n571\n00:25:52.310 --> 00:25:53.525\nIt'll open if it does.\n\n572\n00:25:53.525 --> 00:25:54.045\nAnd guess what?\n\n573\n00:25:54.045 --> 00:25:55.815\nI'm already in insert mode here.\n\n574\n00:25:55.815 --> 00:25:58.685\nI don't have to do any of that crazy\ncommand, this that and the other.\n\n575\n00:25:58.685 --> 00:26:00.635\nI'm already ready to go and\nI can just start typing.\n\n576\n00:26:00.635 --> 00:26:01.405\nThis is some text.\n\n577\n00:26:01.405 --> 00:26:03.775\nSo already it's easier than VIM.\n\n578\n00:26:03.775 --> 00:26:06.895\nRight, because there was no\ngetting into some sort of mode.\n\n579\n00:26:06.895 --> 00:26:11.065\nIf you're Wherever your cursor is,\nyou can start typing, it's gonna show it.\n\n580\n00:26:11.065 --> 00:26:12.925\nYour arrow keys, they're all there.\n\n581\n00:26:12.925 --> 00:26:14.935\nThat's the fantastic part of it.\n\n582\n00:26:14.935 --> 00:26:18.655\nLet me see, what else do I want\nyou guys to know about this.\n\n583\n00:26:18.655 --> 00:26:21.585\n>> Oh, the nice thing is you\ncan actually see you have some,\n\n584\n00:26:21.585 --> 00:26:22.685\nlooks like hotkeys there.\n\n585\n00:26:22.685 --> 00:26:25.325\n>> Yeah, there's some nice options\navailable for you that they keep\n\n586\n00:26:25.325 --> 00:26:28.615\nto the fore front to say hey buddy, if\nyou want to do this, you want to do that,\n\n587\n00:26:28.615 --> 00:26:33.135\nthey're right here so you can quickly\nreference what they are so you can.\n\n588\n00:26:33.135 --> 00:26:33.895\n>> Use them.\n\n589\n00:26:33.895 --> 00:26:37.455\nOne of them is gonna write changes,\nthat's one we want.\n\n590\n00:26:37.455 --> 00:26:40.455\nYou'll notice to write out,\nthat caret right there,\n\n591\n00:26:40.455 --> 00:26:44.245\nsymbol, that's letting you\nknow it's the Ctrl key, okay.\n\n592\n00:26:44.245 --> 00:26:48.675\nSo any time you see that,\nthat's the Ctrl key, and then the o, okay.\n\n593\n00:26:48.675 --> 00:26:51.125\nSo, all I had to, and\nI wrote this is some text,\n\n594\n00:26:51.125 --> 00:26:54.885\nif I do Ctrl+O, this is the filename\nthat you want to write to?.\n\n595\n00:26:54.885 --> 00:27:00.635\nRight now, i could create a new file name\nIf I wanted to and it would save to that.\n\n596\n00:27:00.635 --> 00:27:01.875\nAnd, file four would still be blank.\n\n597\n00:27:01.875 --> 00:27:05.055\nIt would be created, but\nit would be blank or,\n\n598\n00:27:05.055 --> 00:27:10.765\nI could go with the file name that exists,\nit's already there by default.\n\n599\n00:27:10.765 --> 00:27:11.925\nSo, I just hit enter and it saves it.\n\n600\n00:27:11.925 --> 00:27:15.405\nIf I'm ready to quit,\nthis is one where quit is not the Q.\n\n601\n00:27:15.405 --> 00:27:16.205\nIt is down here.\n\n602\n00:27:16.205 --> 00:27:17.075\nI want to exit.\n\n603\n00:27:17.075 --> 00:27:18.265\nSo, it uses the X.\n\n604\n00:27:18.265 --> 00:27:19.505\nSo, control X to exit.\n\n605\n00:27:19.505 --> 00:27:23.595\nAnd bam, I do a cat file four, and\nyou'll see, this is some text.\n\n606\n00:27:23.595 --> 00:27:24.435\ntext.\nRight?\n\n607\n00:27:24.435 --> 00:27:27.475\nThere's the text that I\nput inside of that file.\n\n608\n00:27:27.475 --> 00:27:28.585\nVery, very simple.\n\n609\n00:27:28.585 --> 00:27:30.695\nThat was a whole lot easier.\n\n610\n00:27:30.695 --> 00:27:35.035\nNow, I do wanna put in,\nit does have some of that calming mode,\n\n611\n00:27:35.035 --> 00:27:38.775\nwhere you can see where the heck\nyou're at at all given times.\n\n612\n00:27:38.775 --> 00:27:42.135\nIt might do the numbering, but\nusually it does it like this.\n\n613\n00:27:42.135 --> 00:27:46.381\nNano -c will give you that column\nword kinda character thing.\n\n614\n00:27:46.381 --> 00:27:48.485\nSo if I open foul four.\n\n615\n00:27:48.485 --> 00:27:51.177\nYou'll notice that,\n\n616\n00:27:51.177 --> 00:27:55.845\nread line one right here, so\nif I start moving around, line two,\n\n617\n00:27:55.845 --> 00:27:59.745\nline three, and it all shows up right here\nin real time as you change the lines.\n\n618\n00:27:59.745 --> 00:28:02.225\nSo, if I, let me control x this, and\n\n619\n00:28:02.225 --> 00:28:06.495\nwe'll do nano, we'll do that read\nme cuz it's got more content.\n\n620\n00:28:06.495 --> 00:28:08.945\nThat's the read me.\n\n621\n00:28:08.945 --> 00:28:13.145\nYes, Lowery, there's two 'Ns' in nano.\n\n622\n00:28:13.145 --> 00:28:14.305\nAnd there we go.\n\n623\n00:28:14.305 --> 00:28:16.815\nNow if you watch where\nit says read 107 lines.\n\n624\n00:28:16.815 --> 00:28:19.795\nSo this means there's 107 lines in\nthis file and as I shift through them,\n\n625\n00:28:19.795 --> 00:28:22.515\nit shows me exactly\nthe position of my cursor.\n\n626\n00:28:22.515 --> 00:28:27.395\nAnd that's what we wanna do with -z,\nso it makes that easy for us.\n\n627\n00:28:27.395 --> 00:28:30.555\nAnd like I said it changes in real time.\n\n628\n00:28:30.555 --> 00:28:33.975\n>> Now daniel I also understand\nyou do have the ability to\n\n629\n00:28:33.975 --> 00:28:37.915\ndo some syntax highlighting inside of\nnano which I'm pretty sure is by or vi.\n\n630\n00:28:37.915 --> 00:28:42.275\n>> You might be able to do it, but\nI think you know to do it in nano, right?.\n\n631\n00:28:42.275 --> 00:28:44.035\n>> Yes, I do.\nSo, vim does have one thing,\n\n632\n00:28:44.035 --> 00:28:47.525\nright out of the gate,\nthat it beats the crap out of nano with.\n\n633\n00:28:47.525 --> 00:28:49.385\nAnd that is syntax highlighting.\n\n634\n00:28:49.385 --> 00:28:49.932\n>> [LAUGH].\n\n635\n00:28:49.932 --> 00:28:53.798\n>> Creating a, a script in vim, it will\nhighlight that to give me a better visual\n\n636\n00:28:53.798 --> 00:28:56.726\nreference to say, okay,\nI've started an if statement.\n\n637\n00:28:56.726 --> 00:28:57.775\nI've, echoed this.\n\n638\n00:28:57.775 --> 00:28:58.575\nI've done that.\n\n639\n00:28:58.575 --> 00:29:01.955\nAnd, you're gonna learn more\nabout these commands later.\n\n640\n00:29:01.955 --> 00:29:02.945\nBut, basically it'll color.\n\n641\n00:29:02.945 --> 00:29:06.495\nColor code it so that I get\na better visual representation and\n\n642\n00:29:06.495 --> 00:29:09.785\na better look at my script and\nto understand it a little better.\n\n643\n00:29:09.785 --> 00:29:12.755\nNotice that in here though,\nI'll actually show you that real quick.\n\n644\n00:29:12.755 --> 00:29:18.455\nLet me, what am I doing here,\ncontrol x, no we do not want to modify.\n\n645\n00:29:18.455 --> 00:29:22.505\nThere we go, so if I do vin and I'll\nsay script one and I start putting in,\n\n646\n00:29:24.315 --> 00:29:27.705\nit helps if I go into insert mode.\n\n647\n00:29:29.495 --> 00:29:30.385\nThere we go.\n\n648\n00:29:30.385 --> 00:29:32.655\nI start putting in contact.\n\n649\n00:29:32.655 --> 00:29:33.575\nBan and bash and echo.\n\n650\n00:29:33.575 --> 00:29:34.995\nWell lordy b how about that.\n\n651\n00:29:34.995 --> 00:29:37.125\nIt's not actually doing\nit in this terminal.\n\n652\n00:29:37.125 --> 00:29:39.585\nIt must be this terminal\nthat's not doing it.\n\n653\n00:29:39.585 --> 00:29:43.215\nI'll tell you what,\nwatch this we'll log in here.\n\n654\n00:29:43.215 --> 00:29:45.725\nOf course there is no user two.\n\n655\n00:29:47.585 --> 00:29:51.755\nHaving a good time here\nwith my typing abilities.\n\n656\n00:29:51.755 --> 00:29:55.205\nUser one One, and then we'll log in.\n\n657\n00:29:56.275 --> 00:29:58.035\nAnd it should show it to you here.\n\n658\n00:29:58.035 --> 00:30:00.925\nHere we go.\nSo, let's see here.\n\n659\n00:30:00.925 --> 00:30:01.715\nWhere is our.\n\n660\n00:30:01.715 --> 00:30:05.226\nWe'll create a new script [INAUDIBLE] So,\n\n661\n00:30:05.226 --> 00:30:09.295\nvim script2.sh and insert and\nwe'll start saying.\n\n662\n00:30:09.295 --> 00:30:14.480\nYou'll notice that now it is highlighted.\n\n663\n00:30:14.480 --> 00:30:15.087\nRight.\n\n664\n00:30:15.087 --> 00:30:17.395\nBashbin/bash and I do an echo.\n\n665\n00:30:18.445 --> 00:30:20.685\nThis is what I want to echo.\n\n666\n00:30:20.685 --> 00:30:23.375\nYou see all that coloring?.\n\n667\n00:30:23.375 --> 00:30:25.285\nThat's what we're looking for.\n\n668\n00:30:25.285 --> 00:30:26.645\nNano doesn't do that.\n\n669\n00:30:27.645 --> 00:30:29.545\nLet me just get out of here.\n\n670\n00:30:29.545 --> 00:30:31.365\nNot save those changes.\n\n671\n00:30:31.365 --> 00:30:36.745\nIf I do nano with the script,\nfive if we can do\n\n672\n00:30:38.425 --> 00:30:42.650\nthat and\nI start writing the same exact stuff.\n\n673\n00:30:42.650 --> 00:30:44.145\n/bin/ Bash.\nYou see that?.\n\n674\n00:30:44.145 --> 00:30:45.735\nNo highlighting,\nit doesn't turn a blue color.\n\n675\n00:30:45.735 --> 00:30:46.355\nWe want to change that.\n\n676\n00:30:46.355 --> 00:30:51.675\nWe want that to be in nano because nano's\neasier to use but if it's not gonna give\n\n677\n00:30:51.675 --> 00:30:55.055\nme that syntax highlighting, it's not as\ngood as vim and you'll probably use vim.\n\n678\n00:30:55.055 --> 00:30:57.945\nBut we can, and\nI'm gonna show you how to do that.\n\n679\n00:30:57.945 --> 00:30:59.190\nSo let me get out of here.\n\n680\n00:30:59.190 --> 00:31:05.253\nCtrl+X, there we go, no, and\nlet me get back to my login screen.\n\n681\n00:31:05.253 --> 00:31:08.275\nHere we go.\n\n682\n00:31:08.275 --> 00:31:10.075\nI know, it's a lot of bouncing around,\na lot of keyboard stuff.\n\n683\n00:31:10.075 --> 00:31:10.995\nBut you'll get the hang of it.\n\n684\n00:31:10.995 --> 00:31:12.365\nAnd it's a lot of fun.\n\n685\n00:31:12.365 --> 00:31:12.955\nBut here we go.\n\n686\n00:31:12.955 --> 00:31:17.305\nSo for nano you need to look to see\nwhat highlighting it supports with\n\n687\n00:31:17.305 --> 00:31:18.305\nyour distribution.\n\n688\n00:31:18.305 --> 00:31:20.605\nIf you've installed it using\nsomething like yum or app get,\n\n689\n00:31:20.605 --> 00:31:24.765\nyou need to check this out to\nmake sure that you actually\n\n690\n00:31:24.765 --> 00:31:26.275\nhave the highlighting\nsyntax that you need.\n\n691\n00:31:26.275 --> 00:31:29.765\nIf not,\nyou'll have to get it from somebody.\n\n692\n00:31:29.765 --> 00:31:30.335\nSo let's see,\n\n693\n00:31:30.335 --> 00:31:33.935\nwhat we need to do here is we need\nto check the user share nano folder.\n\n694\n00:31:33.935 --> 00:31:35.175\nAnd that's what's gonna do.\n\n695\n00:31:35.175 --> 00:31:39.718\nSo we'll ls/user/share/nano like that.\n\n696\n00:31:39.718 --> 00:31:45.295\nAnd this gives us all the different\nsyntax highlighting that nano supports.\n\n697\n00:31:45.295 --> 00:31:47.465\nAt least my distribution of it.\n\n698\n00:31:47.465 --> 00:31:49.235\nSo, in here what I'm looking for\n\n699\n00:31:49.235 --> 00:31:53.350\nspecifically because we're gonna be doing\nbash scripting is this one right here.\n\n700\n00:31:53.350 --> 00:31:54.815\nsh.nanorc.\n\n701\n00:31:54.815 --> 00:31:56.375\nThat's the guy we want.\n\n702\n00:31:56.375 --> 00:31:57.035\nWe know it's there.\n\n703\n00:31:57.035 --> 00:31:57.945\nWe know it supports it.\n\n704\n00:31:57.945 --> 00:32:00.255\nhow do we make it do it?.\n\n705\n00:32:00.255 --> 00:32:02.715\nI'm glad you asked.\n\n706\n00:32:02.715 --> 00:32:06.215\nSo what we're going to do is we need\nto do an ls-a to list all the files,\n\n707\n00:32:06.215 --> 00:32:06.925\nhidden files.\n\n708\n00:32:06.925 --> 00:32:12.685\nYou'll notice that these files right here,\nthis .bashhistory, .bashlogout, anything\n\n709\n00:32:12.685 --> 00:32:18.145\nthat begins with a period is hidden by\nthe fault from a normal ls command.\n\n710\n00:32:18.145 --> 00:32:20.915\nWe need to add a file if it doesn't\nexist and that is the nano rc file,\n\n711\n00:32:20.915 --> 00:32:25.625\nthat's an important thing you'll notice\nthat I do not have nanorc in here,\n\n712\n00:32:25.625 --> 00:32:27.045\nit's .nanorc by the way.\n\n713\n00:32:27.045 --> 00:32:28.795\nSo we need to have that guy.\n\n714\n00:32:28.795 --> 00:32:31.665\nSo how do we do that?.\n\n715\n00:32:31.665 --> 00:32:35.525\nObviously, we can use nano to\nactually create the file we need.\n\n716\n00:32:35.525 --> 00:32:37.205\nSo we'll say nano, and\n\n717\n00:32:37.205 --> 00:32:41.140\njust to make sure I'm getting my\nsyntax correct here, yes here we go.\n\n718\n00:32:41.140 --> 00:32:43.505\n.nanorc that's the file we want.\n\n719\n00:32:43.505 --> 00:32:51.125\nAnd now we just need to add one\nline to it, which is implude,\n\n720\n00:32:51.125 --> 00:32:55.925\nand then the directory to the actual\nhighlighted syntax of support.\n\n721\n00:32:55.925 --> 00:33:01.255\nSo, just give a little quotation mark and\nwe'll say user slash share slash\n\n722\n00:33:01.255 --> 00:33:07.035\nnano slash and whatever it is so\nthis one would be SH nano RC.\n\n723\n00:33:07.035 --> 00:33:11.475\nLike that closure bracket or\nparenthesis out and\n\n724\n00:33:11.475 --> 00:33:16.035\nnow we're gonna Ctrl O,\nreturn, Ctrl X to log out,\n\n725\n00:33:16.035 --> 00:33:21.425\nand now we run nano,\nwe should get that syntax highlighting.\n\n726\n00:33:21.425 --> 00:33:24.832\nSo if I do nano script6.sh, and\n\n727\n00:33:24.832 --> 00:33:29.105\nI start going to town with and\nthere it is.\n\n728\n00:33:30.535 --> 00:33:33.075\nThat's what I'm looking for.\n\n729\n00:33:33.075 --> 00:33:34.515\nGood old syntax highlighting.\n\n730\n00:33:34.515 --> 00:33:38.735\nI can echo this oh, I gotta deal\nwith [INAUDIBLE] quotation marks.\n\n731\n00:33:38.735 --> 00:33:39.435\nThis is some text.\n\n732\n00:33:39.435 --> 00:33:45.225\nClose it out.\nNotice I get all that lovely highlighting.\n\n733\n00:33:45.225 --> 00:33:47.315\nSo, that's how you do it.\n\n734\n00:33:47.315 --> 00:33:51.415\nIf you wanted to do C and all the others\nas well, you can just add those include\n\n735\n00:33:51.415 --> 00:33:56.825\nlines to that .nanorc file and\nit will do highlighting for them as well.\n\n736\n00:33:56.825 --> 00:33:59.345\nAnd now, we have nano up and\nrunning the way we like it.\n\n737\n00:33:59.345 --> 00:34:00.575\nNow, for me, it's the go to editor.\n\n738\n00:34:00.575 --> 00:34:02.265\nIt does great for me.\n\n739\n00:34:02.265 --> 00:34:02.875\n>> It sure looks like the.\n\n740\n00:34:02.875 --> 00:34:04.935\n>> That's highly customizable\nwhere as maybe VI and VIM,\n\n741\n00:34:04.935 --> 00:34:08.025\neven though you might be\nable to add in a few things,\n\n742\n00:34:08.025 --> 00:34:11.595\nthis one looks incredibly customizable,\na lot more user friendly.\n\n743\n00:34:11.595 --> 00:34:12.855\nBut we're not done yet,\n\n744\n00:34:12.855 --> 00:34:17.005\nthere's a couple of other GUI based text\neditors you wanted to talk about as well?.\n\n745\n00:34:17.005 --> 00:34:19.325\n>> Yeah, just a couple off the top of\nmy head, there's things like G edit.\n\n746\n00:34:19.325 --> 00:34:23.045\nSo if you're running inside of an\nenvironment like, I am right now that has\n\n747\n00:34:23.045 --> 00:34:27.875\na graphical user interface, G edit\nmight be installed, it's very popular.\n\n748\n00:34:27.875 --> 00:34:31.055\nA little one called kate's been around for\nquite some time, and\n\n749\n00:34:31.055 --> 00:34:36.435\nthey work just like your any old run of\nthe mill, this is graphical user base.\n\n750\n00:34:36.435 --> 00:34:38.755\nI run one, have, enjoy it, let's see.\n\n751\n00:34:38.755 --> 00:34:41.135\nLet me get out of here.\n\n752\n00:34:41.135 --> 00:34:41.695\nI'll say no.\n\n753\n00:34:41.695 --> 00:34:45.965\nSo I think I have kate installed,\noh no I don't have kate.\n\n754\n00:34:47.025 --> 00:34:47.715\nBut, I bet g edit is.\n\n755\n00:34:47.715 --> 00:34:48.318\nAnd, it's not.\n\n756\n00:34:48.318 --> 00:34:49.485\n>> [LAUGH].\n>> I have no graphical user [LAUGH]\n\n757\n00:34:49.485 --> 00:34:50.375\nwriters on here.\n\n758\n00:34:50.375 --> 00:34:51.945\nAt least not those two.\n\n759\n00:34:51.945 --> 00:34:52.455\nBut, that's.\n\n760\n00:34:52.455 --> 00:34:54.215\nAll.\nAll you would have to do is sudo but\n\n761\n00:34:54.215 --> 00:34:55.095\nI'm not sudo user.\n\n762\n00:34:55.095 --> 00:34:57.855\nAnyway, those are some graphical ones.\n\n763\n00:34:57.855 --> 00:34:59.425\nWe're not going to spend time on them.\n\n764\n00:34:59.425 --> 00:35:00.565\nYou've seen graphical stuff.\n\n765\n00:35:00.565 --> 00:35:03.685\nThe text based versions,\nthose are the real meat and potatoes.\n\n766\n00:35:03.685 --> 00:35:05.265\nThat's what we want to do.\n\n767\n00:35:05.265 --> 00:35:07.935\nI just wanted to mention that\nthere are graphical editors.\n\n768\n00:35:07.935 --> 00:35:12.525\nThey work just as well as things like\nnotepad or whatever and they're fantastic.\n\n769\n00:35:12.525 --> 00:35:14.665\nFind one that you like and use it.\n\n770\n00:35:14.665 --> 00:35:18.525\nAlso find a text based text\neditor that you like and use.\n\n771\n00:35:18.525 --> 00:35:20.235\nMy two cents goes toward Nano.\n\n772\n00:35:20.235 --> 00:35:20.935\nI like it a lot.\n\n773\n00:35:20.935 --> 00:35:22.065\n>> I hate to say it.\n\n774\n00:35:22.065 --> 00:35:22.855\nI'm still a VI guy.\n\n775\n00:35:22.855 --> 00:35:24.371\nThat's just [CROSSTALK].\n\n776\n00:35:24.371 --> 00:35:25.805\n>> I'll change your mind sir.\n\n777\n00:35:25.805 --> 00:35:27.225\nGuarantee it.\n\n778\n00:35:27.225 --> 00:35:28.905\n>> When it comes down to it.\n\n779\n00:35:28.905 --> 00:35:32.555\n>> But remember that when we start\ntaking a look at working with right?.\n\n780\n00:35:32.555 --> 00:35:36.405\nWe're not beyond just understanding,\nthe basic commands that you and I would\n\n781\n00:35:36.405 --> 00:35:41.645\ngenerally run as a Linux administrator,\njust trying to work with permissions and\n\n782\n00:35:41.645 --> 00:35:44.095\nalso just understanding the way\nthat we navigate around.\n\n783\n00:35:44.095 --> 00:35:49.095\nWe're now getting into kind of the basics\nof where we're gonna begin with scripting.\n\n784\n00:35:49.095 --> 00:35:51.395\nChoosing a text editor\nis gonna be important.\n\n785\n00:35:51.395 --> 00:35:53.865\nDepending on what you need and\nhow you feel comfortable,\n\n786\n00:35:53.865 --> 00:35:57.265\nyou're gonna probably see the more modern\ntext editors are probably gonna suit us\n\n787\n00:35:57.265 --> 00:36:00.355\nbetter than working with some of\nthe ones that are a little bit older.\n\n788\n00:36:00.355 --> 00:36:02.795\nBut at the same time,\nthe benefit of some of those older\n\n789\n00:36:02.795 --> 00:36:05.645\nones is that regardless of\nwhat system you go to, you'll\n\n790\n00:36:05.645 --> 00:36:08.475\nprobably find them a little bit more\nuniversal than you would things like nano.\n\n791\n00:36:08.475 --> 00:36:10.375\nIt's that nano can't be\nput onto the system.\n\n792\n00:36:10.375 --> 00:36:13.355\nBut if you happen to be working for\na company that's like, no,\n\n793\n00:36:13.355 --> 00:36:15.785\nyou're not installing\nanything else on our system.\n\n794\n00:36:15.785 --> 00:36:17.555\nI'm like,\nwhat do you use as a text editor?.\n\n795\n00:36:17.555 --> 00:36:18.775\nAnd they tell you BI.\n\n796\n00:36:18.775 --> 00:36:19.458\nI'm like, oh, nice.\n\n797\n00:36:19.458 --> 00:36:22.135\n>> [LAUGH] You're gonna\nhave to deal with it.\n\n798\n00:36:22.135 --> 00:36:22.945\nSo learning, at least,\n\n799\n00:36:22.945 --> 00:36:25.755\nthe basics of this is gonna help\nyou as you begin scripting, right?.\n\n800\n00:36:25.755 --> 00:36:28.875\nLearning how to use this is actually be\none of the best things that you're gonna\n\n801\n00:36:28.875 --> 00:36:32.535\nbe able to do, as well,\nbecause it's gonna become of immense help.\n\n802\n00:36:32.535 --> 00:36:35.925\nAnd the different commands that daniel\njust showed us about being able to\n\n803\n00:36:35.925 --> 00:36:37.095\nnavigate, copying, pasting,\n\n804\n00:36:37.095 --> 00:36:40.445\nall that's gonna be very helpful\nas you start scripting as well.\n\n805\n00:36:40.445 --> 00:36:44.995\nThat way, you don't have to keep\nrepeating code over and over again.\n\n806\n00:36:44.995 --> 00:36:49.835\nAll right daniel,\nthank you again for Introducing us\n\n807\n00:36:49.835 --> 00:36:54.275\nto some of those different text editors,\nand thank you for watching.\n\n808\n00:36:54.275 --> 00:36:58.465\nSigning off for IT Pro TV,\nI'm Ronnie Wong.\n\n809\n00:36:59.715 --> 00:37:00.625\n>> And, I'm Daniel Lowery.\n\n810\n00:37:00.625 --> 00:37:02.025\n>> And, we'll see you next time.\n\n811\n00:37:02.025 --> 00:37:02.750\n[MUSIC].\n\n",
          "vimeoId": "145426762"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin working in BASH to show how to redirect output.  This redirection can be put to many uses in scripting as well as troubleshooting so that data can be appended for historical data or overwritten for comparative issues, according to the guys.  Demonstrating the use of GREP and TEE, they show where the power of using piping is very helpful when working in BASH.",
          "length": "1927",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-6-1-io_manipulation_in_bash-111015-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-6-1-io_manipulation_in_bash-111015-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-6-1-io_manipulation_in_bash-111015-high-sm.jpg",
          "title": "I/O Manipulation in Bash",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.590\n[MUSIC]\n\n2\n00:00:05.590 --> 00:00:08.930\nWelcome to another exciting\nepisode here on IT Pro TV.\n\n3\n00:00:08.930 --> 00:00:14.840\nI'm your host Ronnie Wong and today we're\ntaking that bash along with scripting and\n\n4\n00:00:14.840 --> 00:00:20.110\ntalking about working inside of Linux and\nof course even Unix and\n\n5\n00:00:20.110 --> 00:00:24.800\nmaking sure that we\nunderstand what we're doing.\n\n6\n00:00:24.800 --> 00:00:29.450\nNow, a lot of the episodes that\nwe've been taking a look at so\n\n7\n00:00:29.450 --> 00:00:33.748\nfar have been really Basic\nstart to get into little bit\n\n8\n00:00:33.748 --> 00:00:38.530\nmore stuff here now redirecting output and\ninputs.\n\n9\n00:00:38.530 --> 00:00:43.200\nAnd so Daniel Lowrie is here with\nus today to help us in talking\n\n10\n00:00:43.200 --> 00:00:45.650\nabout input output\nredirection of the emulation.\n\n11\n00:00:45.650 --> 00:00:49.920\nThat's he gonna help us to teach where\nthis stuff is exactly gonna appear.\n\n12\n00:00:49.920 --> 00:00:53.340\nMost of the time when I type and stuff,\nit appears on screen, I am happy.\n\n13\n00:00:53.340 --> 00:00:53.940\nThat's all there is.\n\n14\n00:00:53.940 --> 00:00:54.770\n>> It is always to good.\n\n15\n00:00:54.770 --> 00:00:56.950\nYou throw a command at the not\nthe machine that does it.\n\n16\n00:00:56.950 --> 00:00:58.650\nThat's what we want to see.\n\n17\n00:00:58.650 --> 00:01:01.770\nBut there's some interesting ways\nin which the bash environment, and\n\n18\n00:01:01.770 --> 00:01:06.590\nthe Unix world, and\nthe Linux world can handle commands and\n\n19\n00:01:06.590 --> 00:01:11.260\nyou're going to see that, especially,\nagain this is a scripting show.\n\n20\n00:01:11.260 --> 00:01:14.280\nWe're going to move into\nscripting eventually, obviously.\n\n21\n00:01:14.280 --> 00:01:17.430\nWe got to understand some things\nbecause you can't just write scripts if\n\n22\n00:01:17.430 --> 00:01:18.890\nyou don't know how to make them work.\n\n23\n00:01:18.890 --> 00:01:23.140\nSo, that's why we're laying this\nfoundation and manipulating input and\n\n24\n00:01:23.140 --> 00:01:26.370\noutput is actually something\nwe're gonna do quite a bit of,\n\n25\n00:01:26.370 --> 00:01:27.660\nand it's a very handy thing.\n\n26\n00:01:27.660 --> 00:01:28.830\nSo, you're thinking to yourself,\n\n27\n00:01:28.830 --> 00:01:33.310\nwhat are we talking about when we're\nmanipulating or redirecting the input or\n\n28\n00:01:33.310 --> 00:01:36.330\noutput of a command or a file,\nor what's going on here?\n\n29\n00:01:36.330 --> 00:01:39.130\nSo, we gotta lay the foundation, right?\n\n30\n00:01:39.130 --> 00:01:41.760\nThe foundation is the thing\ncalled file descriptors.\n\n31\n00:01:41.760 --> 00:01:45.890\nThat's the first thing we need\nto get buried into our brain.\n\n32\n00:01:45.890 --> 00:01:52.220\nAnd there are three foundational file\ndescriptors you can create a few more but\n\n33\n00:01:52.220 --> 00:01:57.590\nthere are three that\nare always going to be there.\n\n34\n00:01:57.590 --> 00:02:00.880\nIt's gonna be standard input,\nstandard output, and standard error.\n\n35\n00:02:00.880 --> 00:02:03.560\nSo, it'll be represented by\nSTD OU standard output right,\n\n36\n00:02:03.560 --> 00:02:08.420\nor STDIN standard input or\nstandard air STDRR.\n\n37\n00:02:08.420 --> 00:02:11.130\nAnd they also have a number\nof data with them.\n\n38\n00:02:11.130 --> 00:02:15.160\nAnd this number is actually very important\nwhen it coms to these file descriptors.\n\n39\n00:02:15.160 --> 00:02:17.140\nAnd that is a zero, a one or a two.\n\n40\n00:02:17.140 --> 00:02:20.190\nAnd just make sure I don't mess up.\n\n41\n00:02:20.190 --> 00:02:22.070\nStandard input is zero, right?\n\n42\n00:02:22.070 --> 00:02:24.640\nThat's anything that comes\nfrom usually the keyboard.\n\n43\n00:02:24.640 --> 00:02:26.930\nAnd that's usually where\nstandard input is.\n\n44\n00:02:26.930 --> 00:02:27.690\nIt is a keyboard.\n\n45\n00:02:27.690 --> 00:02:28.990\nIt can be other devices as well.\n\n46\n00:02:28.990 --> 00:02:32.140\nBut almost invariably you're going to be\n\n47\n00:02:32.140 --> 00:02:34.180\nusing a keyboard to input\ndata into the system.\n\n48\n00:02:34.180 --> 00:02:36.260\nSo, that's what it's It's looking for.\n\n49\n00:02:36.260 --> 00:02:41.870\nIt's looking for standard input number\nzero or the number zero from a keyboard.\n\n50\n00:02:41.870 --> 00:02:43.310\nNorma.\n\n51\n00:02:43.310 --> 00:02:46.280\nAlso have standard output and\nthat's gonna be number one.\n\n52\n00:02:46.280 --> 00:02:48.550\nSo, STDOUT is gonna be number one.\n\n53\n00:02:48.550 --> 00:02:52.350\nThat's going to be almost\ninvariably your screen.\n\n54\n00:02:52.350 --> 00:02:55.700\nAnd that's where if I type in a command,\nright, that's my input.\n\n55\n00:02:55.700 --> 00:02:56.870\nThe output is gonna come to the screen so\n\n56\n00:02:56.870 --> 00:03:00.640\nthat I can see what it actually did and\nmove along.\n\n57\n00:03:00.640 --> 00:03:01.770\nStandard error, which is number two.\n\n58\n00:03:01.770 --> 00:03:03.070\nAnd, guess where it goes?\n\n59\n00:03:03.070 --> 00:03:05.930\nIt goes to the exact same place\nthat standard output goes.\n\n60\n00:03:05.930 --> 00:03:06.650\nIt goes to the screen.\n\n61\n00:03:06.650 --> 00:03:09.260\nAnd, that's so\nthat we can get error messages.\n\n62\n00:03:09.260 --> 00:03:09.880\nI try to run a command.\n\n63\n00:03:09.880 --> 00:03:11.360\nAnd, the command is not found.\n\n64\n00:03:11.360 --> 00:03:15.120\nYou get, you know, error, command not\nfound, or something like that affect.\n\n65\n00:03:15.120 --> 00:03:17.150\nRight?\nSo, that's what we mean when we\n\n66\n00:03:17.150 --> 00:03:20.440\nsay standard input,\nstandard output and standard error.\n\n67\n00:03:20.440 --> 00:03:22.780\nAnd, you do need to know for\n\n68\n00:03:22.780 --> 00:03:27.790\nreference purposes that it's zero one and\ntwo that two is error.\n\n69\n00:03:27.790 --> 00:03:30.670\nThat one is output and zero is input.\n\n70\n00:03:30.670 --> 00:03:35.370\nSo, be aware of those,\ncuz that's going to help you along as you\n\n71\n00:03:35.370 --> 00:03:39.720\nget into more advanced topics when\nit comes to manipulating that input,\n\n72\n00:03:39.720 --> 00:03:42.670\nredirecting it to somewhere else.\n\n73\n00:03:42.670 --> 00:03:43.400\nAll right.\n\n74\n00:03:43.400 --> 00:03:46.360\nLet's talk about some of the redirectors.\n\n75\n00:03:46.360 --> 00:03:49.530\nSo, we're going to start very basic and\nthen we'll move to a little bit\n\n76\n00:03:49.530 --> 00:03:53.000\nmore complex,\nbecause it's It can get extremely complex.\n\n77\n00:03:53.000 --> 00:03:55.350\nI don't want to like lead\nyou down the wrong road.\n\n78\n00:03:55.350 --> 00:03:58.520\nIt can get extremely extremely complex.\n\n79\n00:03:58.520 --> 00:04:02.230\nWe're not going to cover the wealth\nof knowledge that is redirection.\n\n80\n00:04:02.230 --> 00:04:05.640\nBut we're going to cover the basic stuff\nthat you'll use on a regular basis.\n\n81\n00:04:05.640 --> 00:04:08.410\nSo, let's take a look at my screen and\nsee how that works out.\n\n82\n00:04:09.750 --> 00:04:11.480\nI have my command prompt up obviously.\n\n83\n00:04:11.480 --> 00:04:12.150\nCuz that's.\n\n84\n00:04:12.150 --> 00:04:12.770\nI say that again.\n\n85\n00:04:12.770 --> 00:04:13.815\nI love to say command prompt.\n\n86\n00:04:13.815 --> 00:04:16.020\n[LAUGH] Those old windows\ndays coming back.\n\n87\n00:04:16.020 --> 00:04:17.310\nStab me in the back.\n\n88\n00:04:17.310 --> 00:04:22.950\nThis is the shell, the terminal shell,\nthe command line interface and\n\n89\n00:04:22.950 --> 00:04:25.980\nif I type into the shell here.\n\n90\n00:04:25.980 --> 00:04:29.240\nIf I throw a command at it like LS,\nthat did two things.\n\n91\n00:04:29.240 --> 00:04:34.010\nIt took input from my keyboard and\nit ran a command.\n\n92\n00:04:34.010 --> 00:04:39.300\nIt interpreted a command to the CLI and\nthen it generated some output.\n\n93\n00:04:39.300 --> 00:04:40.640\nSo, we saw two file descriptors.\n\n94\n00:04:40.640 --> 00:04:41.140\nHard at work.\n\n95\n00:04:42.330 --> 00:04:46.270\nOne was that imput from the keyboard and\nthe other was the output which points to,\n\n96\n00:04:46.270 --> 00:04:52.884\nand you gotta remember these are all\nsome sort of device that are located\n\n97\n00:04:52.884 --> 00:04:57.900\nin the dev directory of\nyour Unix structure here.\n\n98\n00:04:57.900 --> 00:05:01.940\nSo, if you didn't want to see these I\nthink the, if i'm remember correctly,\n\n99\n00:05:01.940 --> 00:05:03.110\nit's dev, let's take a look at this.\n\n100\n00:05:03.110 --> 00:05:05.620\nLet's see here ls dev/pts\nif i'm not mistaken.\n\n101\n00:05:05.620 --> 00:05:06.320\nYeah, yeah there we go.\n\n102\n00:05:06.320 --> 00:05:11.000\nSo, it's showing you that in this\nPTS directory we have zero and\n\n103\n00:05:11.000 --> 00:05:15.560\ntwo, theses are actual devices\nthat it is sending output to.\n\n104\n00:05:15.560 --> 00:05:16.090\nAll right.\nSo,\n\n105\n00:05:16.090 --> 00:05:19.230\nthat's one of the ways in\nwhich it comes around.\n\n106\n00:05:19.230 --> 00:05:22.150\nAgin, it looks like a file, but\nthat's where output is going.\n\n107\n00:05:22.150 --> 00:05:25.480\nWhich is basically a file\nrepresentation fo my screen itself.\n\n108\n00:05:25.480 --> 00:05:27.990\nSo, that's where it's trying to.\n\n109\n00:05:27.990 --> 00:05:30.770\nThat's the normal operation,\nright, I do an LS.\n\n110\n00:05:30.770 --> 00:05:31.830\nAnd that's how it works.\n\n111\n00:05:31.830 --> 00:05:36.790\nStandard output always goes to your\nscreen, so that's what you wanna look for.\n\n112\n00:05:36.790 --> 00:05:39.820\nWell if I wanted to redirect some of that,\n\n113\n00:05:39.820 --> 00:05:43.260\nwhat if I wanted to maybe\ndirect it to a file?\n\n114\n00:05:43.260 --> 00:05:45.950\nThat could be something I wanna do.\n\n115\n00:05:45.950 --> 00:05:49.930\nMaybe I wanna have this forever and for\nalways, in a file format that I can\n\n116\n00:05:49.930 --> 00:05:54.130\nmanipulate and peruse, and\ndo things I want to with it later time?\n\n117\n00:05:54.130 --> 00:05:56.250\nIt's not actually what Five at five,\nright.\n\n118\n00:05:56.250 --> 00:05:57.290\nThat whole thing that we see here.\n\n119\n00:05:57.290 --> 00:05:57.820\nHow do we do that?\n\n120\n00:05:58.840 --> 00:06:01.530\nThat's gonna be our first redirector and\nthat's gonna be the,\n\n121\n00:06:01.530 --> 00:06:02.740\nI guess it's the greater than sign.\n\n122\n00:06:02.740 --> 00:06:07.440\nIt looks like that or that way,\nI can't, look at the screen it\n\n123\n00:06:07.440 --> 00:06:10.990\nwill do a better job than my sign\nlanguage that we got going on here.\n\n124\n00:06:10.990 --> 00:06:15.970\nSo, as we see here if I wanted to generate\nthis output and send it to a file\n\n125\n00:06:15.970 --> 00:06:20.590\nI could do Ellis and then that is\nthe greater than sign I guess it is.\n\n126\n00:06:20.590 --> 00:06:22.500\nAnd then give it a file name.\n\n127\n00:06:22.500 --> 00:06:25.040\nIf the file does not exist,\nguess what happens?\n\n128\n00:06:25.040 --> 00:06:26.210\nIt creates the file.\n\n129\n00:06:26.210 --> 00:06:29.820\nSo, if you give it a file name\nthat no longer is not there,\n\n130\n00:06:29.820 --> 00:06:36.050\nit will create that file and put that\ninput into the file and save it for you.\n\n131\n00:06:36.050 --> 00:06:38.310\nNow, let's take a look\nat it in operation here.\n\n132\n00:06:38.310 --> 00:06:43.530\nSo, we'll call this list1 and hit Return.\n\n133\n00:06:43.530 --> 00:06:46.140\nNow, we'll notice something interesting so\nwe did LS.\n\n134\n00:06:46.140 --> 00:06:51.070\nThat was a command we generated, and\nit didn't come out to the screen.\n\n135\n00:06:51.070 --> 00:06:51.690\nRight?\n\n136\n00:06:51.690 --> 00:06:55.420\nAnd I didn't see all of this\nthat we saw before when did it.\n\n137\n00:06:55.420 --> 00:06:56.950\nIt didn't show up.\n\n138\n00:06:56.950 --> 00:06:58.730\nWhy did that happen?\n\n139\n00:06:58.730 --> 00:07:02.360\nBecause we redirected that output\nthat normally goes to the screen and\n\n140\n00:07:02.360 --> 00:07:05.320\ninstead of putting it to\nthe screen we set it to a file.\n\n141\n00:07:05.320 --> 00:07:09.600\nAnd the file name is List 1 and\nI can make it whatever I want.\n\n142\n00:07:09.600 --> 00:07:14.020\nSo, now is Is that actually,\ndid that actually happen?\n\n143\n00:07:14.020 --> 00:07:18.070\nWell, it didn't then now put it\nto the screen, that's for sure.\n\n144\n00:07:18.070 --> 00:07:21.330\nSo, we got half of the equation\nis working correctly.\n\n145\n00:07:21.330 --> 00:07:22.850\nIf I do an OS I'll see if I find,\n\n146\n00:07:22.850 --> 00:07:26.770\noh yeah, there is now a file called\nlist one that did not exist before.\n\n147\n00:07:26.770 --> 00:07:29.320\nAll right, so we're two-thirds of\nthe way through is inside that\n\n148\n00:07:29.320 --> 00:07:31.980\nfile that actually the output\nof what we were looking at here.\n\n149\n00:07:31.980 --> 00:07:36.230\nWe can do good old cat in the list one and\nThere it is.\n\n150\n00:07:36.230 --> 00:07:40.060\nAnd you notice it didn't\ncome out in the same way.\n\n151\n00:07:40.060 --> 00:07:45.090\nBecause this is a file it has it's own,\nwhat's called a separator.\n\n152\n00:07:45.090 --> 00:07:51.290\nSo, every time it's on a new line it just\nadded another line to the text file.\n\n153\n00:07:51.290 --> 00:07:52.570\nSo, it kind of did,\n\n154\n00:07:52.570 --> 00:07:55.400\nwe'll give another example of LS\nhere because LS formats itself.\n\n155\n00:07:55.400 --> 00:07:57.520\nOkay?\nWhereas when we generated that out to\n\n156\n00:07:57.520 --> 00:08:00.310\na file it reformatted in a different way.\n\n157\n00:08:00.310 --> 00:08:02.130\nSo, if we do ls-l L gives\nit that long list format.\n\n158\n00:08:02.130 --> 00:08:04.720\nAnd let's go ahead and do this again.\n\n159\n00:08:04.720 --> 00:08:06.220\nAll right?\nSo, we'll do the same file.\n\n160\n00:08:06.220 --> 00:08:06.740\nRight?\nList one,\n\n161\n00:08:06.740 --> 00:08:10.450\nnow Ronnie I want to ask\nyou a question here.\n\n162\n00:08:10.450 --> 00:08:15.190\nWhat do you think is going to happen\nwhen I hit the Enter key on this?\n\n163\n00:08:15.190 --> 00:08:18.880\n>> Well if you to the same name I\nthink it's going to, either it's going\n\n164\n00:08:18.880 --> 00:08:23.010\nto create another file or it's going\nto overwrite the file [CROSSTALK]\n\n165\n00:08:23.010 --> 00:08:24.070\n>> That's right.\n\n166\n00:08:24.070 --> 00:08:28.040\nThat's exactly If the file name exists,\nand you use the redirecter, that\n\n167\n00:08:28.040 --> 00:08:30.940\none right there which is just standard\nredirection, and you go to the same name.\n\n168\n00:08:30.940 --> 00:08:34.040\nIt will overwrite the file\nif it already exists, so\n\n169\n00:08:34.040 --> 00:08:36.590\nif you have data in there\nthat is sensitive and\n\n170\n00:08:36.590 --> 00:08:40.645\nyou use this redirecter, you're gonna be\nin a lot of trouble if you overwrite it.\n\n171\n00:08:40.645 --> 00:08:44.150\nSo, make sure that you use the right one,\nand\n\n172\n00:08:44.150 --> 00:08:49.810\nwe'll get to how to make sure that\ndoesn't happen here in just a second.\n\n173\n00:08:49.810 --> 00:08:52.460\nBut for right here I don't care\nabout overriding that data, so\n\n174\n00:08:52.460 --> 00:08:53.690\nthat's exactly what I'm going to do.\n\n175\n00:08:53.690 --> 00:08:55.200\nI'm going to hit enter.\n\n176\n00:08:55.200 --> 00:08:56.980\nNo problems here, so no error messages.\n\n177\n00:08:56.980 --> 00:08:57.480\nThat's good.\n\n178\n00:08:57.480 --> 00:09:01.840\nLet's do the cat list one and\nwe'll see now it looks\n\n179\n00:09:01.840 --> 00:09:06.270\nmore like what we see because\nof the way it formats.\n\n180\n00:09:06.270 --> 00:09:11.380\nSo, just got to understand that\nit could reformat some things but\n\n181\n00:09:11.380 --> 00:09:15.780\nfor the most part, you'll get exactly\nthe output that you would have gotten\n\n182\n00:09:15.780 --> 00:09:18.210\nif you'd of done the command normally.\n\n183\n00:09:18.210 --> 00:09:20.860\nSo, that's a good example of that and\nnow it's a file.\n\n184\n00:09:20.860 --> 00:09:24.310\nI can go in there,\nI can change things, I can rewrite it.\n\n185\n00:09:24.310 --> 00:09:29.270\nIf I just wanted a nice\nsnapshot of what that direct\n\n186\n00:09:29.270 --> 00:09:34.380\nrestructure looked like on this\nday in time, bot-a-bing, I'm done.\n\n187\n00:09:34.380 --> 00:09:37.810\nI've created that, I now have that\nfile forever and I'm good to go.\n\n188\n00:09:37.810 --> 00:09:41.970\nSo, that's one way to redirect,\nnow then I can see where this might\n\n189\n00:09:41.970 --> 00:09:45.110\nbe useful in something like if I\nwas running some type of syslog,\n\n190\n00:09:45.110 --> 00:09:48.650\nand instead of actually just saying hey,\njust report it onto the screen,\n\n191\n00:09:48.650 --> 00:09:52.970\nlet me go ahead and save it to a file and\nthen I can examine it a little bit later.\n\n192\n00:09:52.970 --> 00:09:55.200\nBut what you were talking about\na little bit earlier interesting,\n\n193\n00:09:55.200 --> 00:09:57.200\nespecially in the scenario I\nwas just talking about here.\n\n194\n00:09:57.200 --> 00:10:00.260\nThe very fact is if I just go ahead and\nredirect this thing the whole time and\n\n195\n00:10:00.260 --> 00:10:02.990\nit just overwrites it,\nI want to compare the historical data.\n\n196\n00:10:02.990 --> 00:10:06.430\nAnd you said that there's a way instead\nthat what can happen is You don't override\n\n197\n00:10:06.430 --> 00:10:08.010\nit even if you use the same name.\n\n198\n00:10:08.010 --> 00:10:09.390\n>> Yeah, and that's the great thing.\n\n199\n00:10:09.390 --> 00:10:11.290\nThat's what we want to do sometimes.\n\n200\n00:10:11.290 --> 00:10:12.810\nLike, now, I didn't care about that data.\n\n201\n00:10:12.810 --> 00:10:15.250\nSo, that way I'm not creating and\nendless file with history.\n\n202\n00:10:15.250 --> 00:10:16.170\nSometimes you want to do that.\n\n203\n00:10:16.170 --> 00:10:19.330\nRyan said, \"Nail in the head with that\none.\"What if I have something like log.\n\n204\n00:10:19.330 --> 00:10:22.990\nI'm generating messages and I want to\ncontinually look back through them without\n\n205\n00:10:22.990 --> 00:10:27.740\ngenerating a millions files because\nyou're creating a new one every day or\n\n206\n00:10:27.740 --> 00:10:30.650\nevery hour or however...\n\n207\n00:10:30.650 --> 00:10:35.490\nYou have the increments set\nup to generate that output.\n\n208\n00:10:35.490 --> 00:10:37.850\nHow do I append to\nthe file I already have?\n\n209\n00:10:37.850 --> 00:10:39.290\nThat's a good question.\n\n210\n00:10:39.290 --> 00:10:40.030\nAnd guess what?\n\n211\n00:10:40.030 --> 00:10:41.980\nIt's just as easy as it was for us,\n\n212\n00:10:41.980 --> 00:10:45.340\nwe just have to remember\nto do it when we invoke it.\n\n213\n00:10:45.340 --> 00:10:46.960\nSo, if I use the exact same command here.\n\n214\n00:10:46.960 --> 00:10:51.190\nI'll bring it up and\nwe'll say lists like that.\n\n215\n00:10:51.190 --> 00:10:52.060\nBut you know what?\n\n216\n00:10:52.060 --> 00:10:53.340\nI'll change this to AL.\n\n217\n00:10:53.340 --> 00:10:55.930\nThat way it will Will add the,\n\n218\n00:10:55.930 --> 00:10:59.220\nall the hidden files that are in that\ndirectory as well, how about that?\n\n219\n00:10:59.220 --> 00:11:00.660\nThat will let us know.\n\n220\n00:11:00.660 --> 00:11:03.370\nNow, if I do it the way it is here,\nwith this redirector only,\n\n221\n00:11:03.370 --> 00:11:07.340\nit's gonna over write what I've already\ngot, and that's not what we want.\n\n222\n00:11:07.340 --> 00:11:11.040\nSo, what we need to do\nis just add another one.\n\n223\n00:11:11.040 --> 00:11:13.460\nSo, that lets it know to\nappend to the end of the file.\n\n224\n00:11:13.460 --> 00:11:14.790\nRight?\nSo very very nice.\n\n225\n00:11:14.790 --> 00:11:22.234\nAll we gotta do now is hit return,\nand we actually can That file.\n\n226\n00:11:22.234 --> 00:11:23.850\nWhich is list1.\n\n227\n00:11:23.850 --> 00:11:25.680\nWe should now have two.\n\n228\n00:11:25.680 --> 00:11:27.660\nSee?\nThere's our first result.\n\n229\n00:11:27.660 --> 00:11:33.970\nThe one that we generated before using\nthe first iteration of redirection.\n\n230\n00:11:33.970 --> 00:11:35.490\nAnd then there's our append.\n\n231\n00:11:35.490 --> 00:11:39.090\nTo that you'll notice that all those\ndot dash history, dot dash logout.\n\n232\n00:11:39.090 --> 00:11:42.105\nAll those hidden files\nAre now in there as well, and\n\n233\n00:11:42.105 --> 00:11:46.015\nI can continue to do this,\nnot just with the LS command.\n\n234\n00:11:46.015 --> 00:11:49.655\nWe can go back out here, so\nI'm basically just looking at the file.\n\n235\n00:11:49.655 --> 00:11:52.815\nLet's say I did, I wanted to give it a\ndate, and kinda throw a date stamp at it.\n\n236\n00:11:52.815 --> 00:11:56.285\nI could just do date,\nand into our list one.\n\n237\n00:11:56.285 --> 00:12:01.060\nAnd now, once I do the The cat\n\n238\n00:12:02.790 --> 00:12:07.390\nlist 1, I'll get a nice date stamp at\nthe end, letting me know that's when I\n\n239\n00:12:07.390 --> 00:12:10.660\nran the command and got the results and\nthat's when I saved the file.\n\n240\n00:12:10.660 --> 00:12:13.170\nNice little thing to add on top of it.\n\n241\n00:12:13.170 --> 00:12:18.050\nRight, so we're redirecting that\noutput from going to the screen to go\n\n242\n00:12:18.050 --> 00:12:21.790\ninto a file or pending to a file and that\nis, you're gonna do this a lot actually.\n\n243\n00:12:21.790 --> 00:12:24.989\n>> Now dan I also understand that.\n\n244\n00:12:26.400 --> 00:12:29.930\n>> You're the one that\nhas convinced me of this.\n\n245\n00:12:29.930 --> 00:12:33.280\nThat you can actually redirect an input?.\n\n246\n00:12:33.280 --> 00:12:34.030\nIs that correct?.\n\n247\n00:12:34.030 --> 00:12:35.190\n>> Yes.\n\n248\n00:12:35.190 --> 00:12:36.340\nIt's definitely correct.\n\n249\n00:12:36.340 --> 00:12:40.320\nIt's something that you'll do\nprobably only in scripting.\n\n250\n00:12:40.320 --> 00:12:43.330\nI say that now,\nI can hear the keyboards typing away.\n\n251\n00:12:43.330 --> 00:12:44.020\nOh no your using.\n\n252\n00:12:44.020 --> 00:12:48.760\nI have been using Linux for quite some\ntime, I've been using max environment for\n\n253\n00:12:48.760 --> 00:12:50.190\nquite some time, I've never [INAUDIBLE],\n\n254\n00:12:50.190 --> 00:12:54.110\nreally had any real good reason to use\nthis and you'll see why here in just\n\n255\n00:12:54.110 --> 00:12:59.505\na second because we had another way to\ndo this that's a little more common.\n\n256\n00:12:59.505 --> 00:13:00.920\n>> [LAUGH].\n>> But yes, you can, you can say,\n\n257\n00:13:00.920 --> 00:13:06.510\nI wanna take the contents of a file or\nthe contents of something [INAUDIBLE] or\n\n258\n00:13:06.510 --> 00:13:09.770\nwhatever and\nI want that to be the input for a command.\n\n259\n00:13:09.770 --> 00:13:14.380\nSo, normally we make a command, right,\nlike say we do word count, right.\n\n260\n00:13:14.380 --> 00:13:17.480\nI say the word count and the file name.\n\n261\n00:13:17.480 --> 00:13:20.700\nAnd it looks into that file, and\nit counts all the words in it,\n\n262\n00:13:20.700 --> 00:13:22.330\nand it generates an output for them.\n\n263\n00:13:22.330 --> 00:13:23.190\nRight?.\nVery, very simple.\n\n264\n00:13:23.190 --> 00:13:26.620\nThe word count is the command, and it\ngenerates output that goes to the screen,\n\n265\n00:13:26.620 --> 00:13:29.070\nand I had to tell it what file to look in.\n\n266\n00:13:29.070 --> 00:13:31.360\nWe're kinda doing the same thing,\n\n267\n00:13:31.360 --> 00:13:34.980\nwe're gonna get very similar results if\nthat's the exact example I'm gonna use.\n\n268\n00:13:34.980 --> 00:13:40.400\nBut you'll see a little bit of difference,\nand really as a Just\n\n269\n00:13:40.400 --> 00:13:44.220\nwanna show you that the theory is sound,\nright, that this actually does work.\n\n270\n00:13:44.220 --> 00:13:47.770\nSo we're going to redirect\nfrom a file to a command.\n\n271\n00:13:47.770 --> 00:13:48.930\nSo this is how it works.\n\n272\n00:13:48.930 --> 00:13:52.860\nYou might already be down with this and\nthinking if we're using the greater\n\n273\n00:13:52.860 --> 00:13:57.810\nthan sign to redirect output, we're gonna\nuse the less than sign to redirect input.\n\n274\n00:13:57.810 --> 00:14:00.420\nSo that's what we're gonna do.\n\n275\n00:14:00.420 --> 00:14:05.190\nLet's go ahead and jump back into the\nscreen here, and let me clear this out.\n\n276\n00:14:05.190 --> 00:14:06.690\nAnd let's see here, what do I have?.\n\n277\n00:14:06.690 --> 00:14:08.180\nOkay, so we got reame.txt.\n\n278\n00:14:08.180 --> 00:14:11.320\nGot a lot of generated input in there.\n\n279\n00:14:11.320 --> 00:14:14.920\nSo that's something I downloaded\nfrom the BSD 3 FTP site.\n\n280\n00:14:14.920 --> 00:14:17.440\nSo I needed to file a lot of data in it.\n\n281\n00:14:17.440 --> 00:14:19.790\nBut I want to do a wordcount on that.\n\n282\n00:14:19.790 --> 00:14:23.740\nNow normally I could just do wordcount and\nthen readme.txt.\n\n283\n00:14:23.740 --> 00:14:26.630\nAnd out comes the count, there it is.\n\n284\n00:14:26.630 --> 00:14:29.970\nIt's wonderful and\nit's got all its little syntax it's done.\n\n285\n00:14:29.970 --> 00:14:32.350\nAnd fills me that's readme.txt.\n\n286\n00:14:32.350 --> 00:14:34.860\nWhat we can do in a different way as well.\n\n287\n00:14:34.860 --> 00:14:38.760\nI can do word count with\nthat less than sign,\n\n288\n00:14:38.760 --> 00:14:41.680\nwhich means I'm redirecting that way,\nthat way is the way to go.\n\n289\n00:14:41.680 --> 00:14:48.580\nIt's almost like an arrowhead pointing\ntoward where you want the direction to be.\n\n290\n00:14:48.580 --> 00:14:50.800\nAnd then just give it the file.\n\n291\n00:14:50.800 --> 00:14:51.450\nHere we go.\n\n292\n00:14:51.450 --> 00:14:53.570\nNow you notice I got almost\nthe exact same output.\n\n293\n00:14:53.570 --> 00:14:55.200\nUni airs, that's good right?.\n\n294\n00:14:55.200 --> 00:14:57.180\nAlmost got the exact same output.\n\n295\n00:14:57.180 --> 00:15:02.760\nOnly one difference is I didn't get\nthis read me dot text on the end there.\n\n296\n00:15:02.760 --> 00:15:08.820\nThis is where input redirection can be\nhelpful inscripting from time to time.\n\n297\n00:15:08.820 --> 00:15:11.800\nMaybe I just want those\nnumbers to be generated.\n\n298\n00:15:11.800 --> 00:15:14.680\nI don't want the fact,\nI know it's read me dot text.\n\n299\n00:15:14.680 --> 00:15:16.270\nI told it to look at read me dot text.\n\n300\n00:15:16.270 --> 00:15:16.830\nI don't need that.\n\n301\n00:15:16.830 --> 00:15:19.270\nI just need the input to come out.\n\n302\n00:15:19.270 --> 00:15:23.210\nSo, things like that, being able\nto generate, that kind of output\n\n303\n00:15:23.210 --> 00:15:27.710\nis one of the ways in which you'll\nwanna use input redirection in.\n\n304\n00:15:27.710 --> 00:15:30.740\n>> Now daniel, you talked about\nthe different standard type of input and\n\n305\n00:15:30.740 --> 00:15:31.540\noutput and error.\n\n306\n00:15:31.540 --> 00:15:33.970\nAnd we also have available to us.\n\n307\n00:15:33.970 --> 00:15:36.030\nSo what you showed us though,\n\n308\n00:15:36.030 --> 00:15:39.280\nwe should be able to take even our\nstandard errors that come out.\n\n309\n00:15:39.280 --> 00:15:42.990\nAnd normally they\nredirect into our screen.\n\n310\n00:15:42.990 --> 00:15:47.280\nBut if we wanna redirect to,\nthe file it's as simple as using\n\n311\n00:15:47.280 --> 00:15:51.930\nthe greater than symbol, or do we need to\ndo something different with that one?.\n\n312\n00:15:51.930 --> 00:15:53.980\n>> Yeah, we gotta remember when it\ncomes to standard error, right?.\n\n313\n00:15:53.980 --> 00:15:57.090\nIt's its own file descriptor, and\nremember at the beginning of this\n\n314\n00:15:57.090 --> 00:15:59.420\nshow I told you that it goes to the exact\nsame place that standard output goes,\n\n315\n00:15:59.420 --> 00:16:00.510\nand that's a good thing, right?.\n\n316\n00:16:00.510 --> 00:16:03.240\nI want to be able to see the errors\nthat are generated by my system, so\n\n317\n00:16:03.240 --> 00:16:06.360\nthat I know if something went wrong, and\nthen if it did go wrong, what was it?.\n\n318\n00:16:06.360 --> 00:16:10.290\nBut not every time do\nI want that to happen.\n\n319\n00:16:10.290 --> 00:16:13.990\nSometimes I don't care about\nthe fact that there's an error.\n\n320\n00:16:13.990 --> 00:16:14.850\nI wanna get rid of it.\n\n321\n00:16:14.850 --> 00:16:17.560\nI just wanna see the output\nthat I wanna see.\n\n322\n00:16:17.560 --> 00:16:18.370\nSo, what do we do?.\n\n323\n00:16:18.370 --> 00:16:19.240\nIs it like ronny said?.\n\n324\n00:16:19.240 --> 00:16:20.460\nDo we just append to a file?.\n\n325\n00:16:20.460 --> 00:16:21.500\nWell, yeah, we can do that.\n\n326\n00:16:21.500 --> 00:16:23.730\nWe can say, I wanna send this to a file.\n\n327\n00:16:23.730 --> 00:16:26.030\nBut then,\nwe've got a bunch of files, right?.\n\n328\n00:16:26.030 --> 00:16:27.390\nThat are basically error logs.\n\n329\n00:16:27.390 --> 00:16:30.900\nAnd if that's what you're wanting to do,\nwell then you can do that.\n\n330\n00:16:30.900 --> 00:16:33.160\nThat's where the file\ndescriptors come back in handy.\n\n331\n00:16:33.160 --> 00:16:34.250\nRemember, there's zero, one, and two.\n\n332\n00:16:34.250 --> 00:16:37.900\nTwo being standard error so,\nif I wanted to redirect standard air,\n\n333\n00:16:37.900 --> 00:16:42.400\nyou'll notice we haven't been\nusing any numbers yet, right?.\n\n334\n00:16:42.400 --> 00:16:47.550\nA, because standard input is zero,\nso there's nothing there to give,\n\n335\n00:16:47.550 --> 00:16:51.860\nstandard output is\nactually kind of assumed.\n\n336\n00:16:51.860 --> 00:16:55.280\nIf I don't give any file description\nnumbers, it is assumed that it is,\n\n337\n00:16:55.280 --> 00:16:56.710\nI'm sorry, standard output.\n\n338\n00:16:56.710 --> 00:17:00.470\nThat's what it's assuming,\nthat that's where you want it to go.\n\n339\n00:17:00.470 --> 00:17:01.200\nIs the standard output.\n\n340\n00:17:01.200 --> 00:17:03.310\nIf I don't want it to go\nto standard output or\n\n341\n00:17:03.310 --> 00:17:07.720\nI want to change what file descriptor that\nis, I want to redirect to a different one,\n\n342\n00:17:07.720 --> 00:17:10.490\nthen I need to name which one that is,\nwhich would be two.\n\n343\n00:17:10.490 --> 00:17:11.790\nThat's our standard error.\n\n344\n00:17:11.790 --> 00:17:15.010\nWe gotta say,\nsend standard error to somewhere else.\n\n345\n00:17:15.010 --> 00:17:19.650\nNow the cool thing is is that in\nour system we have a file that is\n\n346\n00:17:19.650 --> 00:17:24.465\navailable to us that is basically a file\nto nowhere, that if you send things to it,\n\n347\n00:17:24.465 --> 00:17:28.810\nit just magically disappears into the void\nand is no longer a bother to us, and\n\n348\n00:17:28.810 --> 00:17:33.370\nthat is a good thing because I don't wanna\ncreate a bazillion air files keeping\n\n349\n00:17:33.370 --> 00:17:36.490\nall my air messages.\n\n350\n00:17:36.490 --> 00:17:40.440\nSo, let's take a look at\nhow this actually works.\n\n351\n00:17:40.440 --> 00:17:44.360\nSo, if I got to let's see\nhere let me CD into here.\n\n352\n00:17:44.360 --> 00:17:45.470\nAnd i'm gonna do a find.\n\n353\n00:17:45.470 --> 00:17:48.020\nSo i'm gonna throw a find at this.\n\n354\n00:17:48.020 --> 00:17:53.720\nFind dash, oh let me give it the path and\nwe'll say, well actually we'll look for\n\n355\n00:17:53.720 --> 00:17:58.360\nthat crazy file that we have\nin my directory, right?.\n\n356\n00:17:58.360 --> 00:18:01.990\nSo we'll look for that crazy file one.\n\n357\n00:18:01.990 --> 00:18:03.260\nI hit return.\n\n358\n00:18:03.260 --> 00:18:04.060\nSo what do we see here?.\n\n359\n00:18:04.060 --> 00:18:05.850\nWe've got a bunch of,\nwe run the find command,\n\n360\n00:18:05.850 --> 00:18:07.460\nall this stuff comes generating out.\n\n361\n00:18:07.460 --> 00:18:09.341\nI was only looking for one thing.\n\n362\n00:18:09.341 --> 00:18:10.090\n>> [LAUGH].\n\n363\n00:18:10.090 --> 00:18:13.360\n>> But I get a bunch of this\npermission denied stuff, right?.\n\n364\n00:18:13.360 --> 00:18:17.280\nAnd that's because of where I was running\ncommand man the permissions that I have.\n\n365\n00:18:17.280 --> 00:18:19.200\nWhere it was trying to look.\n\n366\n00:18:19.200 --> 00:18:21.110\nIt's giving me standard error output.\n\n367\n00:18:21.110 --> 00:18:23.900\nIt's coming to the screen because\nwhere does standard error go?.\n\n368\n00:18:23.900 --> 00:18:27.160\nTo the same place that standard\noutput goes, which is my screen.\n\n369\n00:18:27.160 --> 00:18:29.300\nI don't want that,\nI want to get rid of standard,\n\n370\n00:18:29.300 --> 00:18:33.390\nI want the standard input, I'm sorry\nit's standard output to come out but\n\n371\n00:18:33.390 --> 00:18:35.700\nmaybe I don't necessarily\nwant that standard error.\n\n372\n00:18:35.700 --> 00:18:37.060\nJust like in this case right here.\n\n373\n00:18:37.060 --> 00:18:38.270\nI don't need to know that stuff.\n\n374\n00:18:38.270 --> 00:18:39.820\nSo what do we do?.\n\n375\n00:18:39.820 --> 00:18:41.390\nAnd this is a command.\n\n376\n00:18:41.390 --> 00:18:44.360\nTatoo it to your head, your fore arm,\nwherever you've got to,\n\n377\n00:18:44.360 --> 00:18:47.840\nso that it stays with you at all times,\nbecause this is going to help you out\n\n378\n00:18:47.840 --> 00:18:50.240\na lot,\nespecially when you get things like this.\n\n379\n00:18:50.240 --> 00:18:51.800\nAnd we're going to redirect\nthat standard air.\n\n380\n00:18:51.800 --> 00:18:53.860\nSo what do we do?.\nWe'll run the same exact command,\n\n381\n00:18:53.860 --> 00:18:54.880\nno difference there.\n\n382\n00:18:54.880 --> 00:18:56.040\nWe're just going to add some to it.\n\n383\n00:18:56.040 --> 00:18:57.620\nWhat are we going to add?.\n\n384\n00:18:57.620 --> 00:19:01.400\nWe're going to say two,\nlike that, that's our two,\n\n385\n00:19:01.400 --> 00:19:04.300\nour number two, letting us know\nthat's standard air redirection.\n\n386\n00:19:04.300 --> 00:19:08.367\nWe're\n\n387\n00:19:08.367 --> 00:19:17.178\ninaudible then\n\n388\n00:19:17.178 --> 00:19:23.278\nmaybe this\n\n389\n00:19:23.278 --> 00:19:28.699\nis the way\n\n390\n00:19:28.699 --> 00:19:32.770\nto go.\n\n391\n00:19:32.770 --> 00:19:35.280\nI can at least start pairing it down.\n\n392\n00:19:35.280 --> 00:19:40.360\nSo adding this to the commands that are\ngenerating a ton of output specifically\n\n393\n00:19:40.360 --> 00:19:45.730\nstandard error output can help at least\npair down what you're looking for.\n\n394\n00:19:45.730 --> 00:19:49.140\nIt's all about searching and\nfinding things and redirecting.\n\n395\n00:19:49.140 --> 00:19:51.640\nSo that is one of the best ways to go for\nthat.\n\n396\n00:19:51.640 --> 00:19:52.930\nI use this all the time.\n\n397\n00:19:52.930 --> 00:19:54.960\nIt's one of my staple commands.\n\n398\n00:19:54.960 --> 00:19:55.890\n>> Now\n>> Daniel, we can also take a look at\n\n399\n00:19:55.890 --> 00:19:59.470\nthe idea of combining some of these\ndifferent types of redirections together.\n\n400\n00:19:59.470 --> 00:20:03.390\nAnd what we're talking about now is\ndoing some piping, right daniel?.\n\n401\n00:20:03.390 --> 00:20:04.110\n>> Yeah, exactly.\n\n402\n00:20:04.110 --> 00:20:05.380\nPiping is cool, right?.\n\n403\n00:20:05.380 --> 00:20:08.580\nThis is basically saying\nwe've got a command and\n\n404\n00:20:08.580 --> 00:20:10.800\nit's gonna generate some standard output,\nright?.\n\n405\n00:20:10.800 --> 00:20:16.580\nSo, if I'm looking at the screen there is,\nagain, a command and then output.\n\n406\n00:20:16.580 --> 00:20:17.245\nYeah, that's right.\n\n407\n00:20:17.245 --> 00:20:17.868\n>> [LAUGH].\n\n408\n00:20:17.868 --> 00:20:19.650\n>> So, that's how we want it.\n\n409\n00:20:19.650 --> 00:20:21.880\nWell, what I and the output,\nwhat can we do with that?.\n\n410\n00:20:21.880 --> 00:20:26.450\nWell, obviously we've\nredirected it to a file before.\n\n411\n00:20:26.450 --> 00:20:32.570\nBut what if we wanted to maybe let it\nbecome the input to a new command, right?.\n\n412\n00:20:32.570 --> 00:20:34.560\nThat's what we want to build.\n\n413\n00:20:34.560 --> 00:20:35.200\nHow can we do that?.\n\n414\n00:20:35.200 --> 00:20:35.960\nTake a look at that.\n\n415\n00:20:35.960 --> 00:20:40.250\nThis is something that you'll\nactually do a lot of as well.\n\n416\n00:20:40.250 --> 00:20:41.750\nLet's see what we got going on here.\n\n417\n00:20:41.750 --> 00:20:42.590\nWe'll do an ls.\n\n418\n00:20:42.590 --> 00:20:43.690\nLet me clear the screen here.\n\n419\n00:20:43.690 --> 00:20:47.780\nWe'll do an ls/ex lot of stuff going on,\nright.\n\n420\n00:20:47.780 --> 00:20:53.850\nAnd if I added another directory like\n[INAUDIBLE] ,something like that now.\n\n421\n00:20:53.850 --> 00:20:57.820\nThe cool thing is I'm in\na graphic user interface.\n\n422\n00:20:57.820 --> 00:21:02.970\nI have the ability to scroll and use a\nmouse in a solely text based environment.\n\n423\n00:21:02.970 --> 00:21:04.720\nA lot of times you don't\nget that functionality.\n\n424\n00:21:04.720 --> 00:21:06.950\nI can't use my mouse\ncause there is no mouse.\n\n425\n00:21:06.950 --> 00:21:08.880\nSometimes there is, but\na lot of times there isn't.\n\n426\n00:21:08.880 --> 00:21:10.240\nIf that is the case how do I.\n\n427\n00:21:10.240 --> 00:21:13.300\nI go back up,\nI can't use my arrow keys there.\n\n428\n00:21:13.300 --> 00:21:16.830\nThey're mapped to function up my history,\nso I can go up and\n\n429\n00:21:16.830 --> 00:21:18.150\ndown through my history.\n\n430\n00:21:18.150 --> 00:21:22.630\nI can't scroll like I'm doing right there\nto go back up and see what's going on.\n\n431\n00:21:22.630 --> 00:21:26.380\nSo how do I get that in a format\nthat I can actually read?.\n\n432\n00:21:26.380 --> 00:21:28.500\nWell, I could pump that out to a file,\nright.\n\n433\n00:21:28.500 --> 00:21:31.690\nWe saw that works great, I could do that.\n\n434\n00:21:31.690 --> 00:21:36.240\nIt'll do what I need to do, but\nI don't wanna keep creating files, right.\n\n435\n00:21:36.240 --> 00:21:39.820\nSo, now I gotta remove them, I gotta\nrun some sort of clean up all the time.\n\n436\n00:21:39.820 --> 00:21:42.480\nNot the way I wanna go.\n\n437\n00:21:42.480 --> 00:21:43.920\nSo, this try something else.\n\n438\n00:21:43.920 --> 00:21:49.380\nLet's just do the LS dash dome and\nslash again.\n\n439\n00:21:49.380 --> 00:21:50.890\nAnd let's see here.\n\n440\n00:21:50.890 --> 00:21:53.260\nLet's try typing that output.\n\n441\n00:21:53.260 --> 00:21:53.890\nRemember.\n\n442\n00:21:53.890 --> 00:21:57.140\nIt's going to generate those\nlong list format as an output.\n\n443\n00:21:57.140 --> 00:21:59.180\nAnd we're going to type\nit into another command.\n\n444\n00:21:59.180 --> 00:22:00.280\nThis command will be let's right.\n\n445\n00:22:00.280 --> 00:22:00.880\nAnd we talked about.\n\n446\n00:22:00.880 --> 00:22:01.480\nI believe we did.\n\n447\n00:22:01.480 --> 00:22:03.395\nMore and less our paging.\n\n448\n00:22:03.395 --> 00:22:08.665\nSystems that are built into our operating\nsystem allows us to go page by page\n\n449\n00:22:08.665 --> 00:22:11.565\nthrough a file, through searches,\ngo back, up and down.\n\n450\n00:22:11.565 --> 00:22:12.885\nThat's a really nice feature.\n\n451\n00:22:12.885 --> 00:22:17.645\nThat's gonna allow me to do\nexactly what it is I need to do.\n\n452\n00:22:17.645 --> 00:22:21.465\nI can look through up and\ndown, but search through it.\n\n453\n00:22:21.465 --> 00:22:23.225\nAnd when it generates a lot of outputs.\n\n454\n00:22:23.225 --> 00:22:27.735\nI'm gonna take that output from the ls\ncommand, from that Etsy directory,\n\n455\n00:22:27.735 --> 00:22:30.885\nand I'm gonna We're going to put\nthat into the input of less and\n\n456\n00:22:30.885 --> 00:22:33.275\nless is going to work on that input.\n\n457\n00:22:33.275 --> 00:22:35.095\nSo let's see how that works.\n\n458\n00:22:35.095 --> 00:22:38.145\nAnd what we do is we use\nthe pipe operator here,\n\n459\n00:22:38.145 --> 00:22:40.915\nwhich is the little stick that\ngoes straight up and down.\n\n460\n00:22:40.915 --> 00:22:43.495\nOn most keyboards it's\nright above the return key.\n\n461\n00:22:43.495 --> 00:22:44.775\nYou do a shift.\nA lot of times it's\n\n462\n00:22:44.775 --> 00:22:45.585\nthe same as the backslash.\n\n463\n00:22:45.585 --> 00:22:50.565\nSo to get that pipe operator, you do shift\nbackslash and that will give you the pipe.\n\n464\n00:22:50.565 --> 00:22:53.845\nAnd then make sure that you space as well.\n\n465\n00:22:53.845 --> 00:22:55.875\nOkay, you have to have spaces\n\n466\n00:22:57.745 --> 00:23:02.205\nbetween your output generating command and\nthe input operating command.\n\n467\n00:23:02.205 --> 00:23:06.625\nOkay, so just like this, the pipe in\nthe space and we'll say yes, like so.\n\n468\n00:23:06.625 --> 00:23:08.065\nHit return.\n\n469\n00:23:08.065 --> 00:23:10.905\nNotice it starts me right at the top.\n\n470\n00:23:10.905 --> 00:23:15.915\nI don't get the pretty colors and\neverything because it's basically kind of\n\n471\n00:23:15.915 --> 00:23:19.775\nputting it in text file format and reading\nit in general Generating it out through\n\n472\n00:23:19.775 --> 00:23:24.705\nless as a command, but I have the ability\nto use my arrow keys, scroll up and\n\n473\n00:23:24.705 --> 00:23:26.555\ndown, use the spacebar,\ngo through it by page.\n\n474\n00:23:26.555 --> 00:23:29.745\nI can use my search function, so\nif I'm looking for hosts, it'll show me\n\n475\n00:23:29.745 --> 00:23:33.485\neverywhere that says hosts, I can start\nlooking through, it's a lot easier.\n\n476\n00:23:33.485 --> 00:23:37.605\nSo now you start to see why would\nwe want to pipe commands together,\n\n477\n00:23:37.605 --> 00:23:43.545\nwhy would we want to string them\ntogether and use them in that way.\n\n478\n00:23:43.545 --> 00:23:48.765\nNow one of the more ubiquitous uses for\nthis is through the grub command.\n\n479\n00:23:48.765 --> 00:23:50.215\nAnd I'm mentioning grub here.\n\n480\n00:23:50.215 --> 00:23:51.745\nI'm not getting into grub.\n\n481\n00:23:51.745 --> 00:23:55.945\nRon will show you how to use it and make\nyou functional for just a second here.\n\n482\n00:23:55.945 --> 00:23:57.275\nYou can do some basic stuff.\n\n483\n00:23:57.275 --> 00:24:02.135\nBut we're gonna do a lot of\nhere in just a little while.\n\n484\n00:24:02.135 --> 00:24:05.755\nSo I just wanna get you\nguys familiar with that.\n\n485\n00:24:05.755 --> 00:24:10.725\nI can quit out of here just like\nI did if I unlike man bash, and\n\n486\n00:24:10.725 --> 00:24:14.165\nget out of the less paging system.\n\n487\n00:24:14.165 --> 00:24:15.705\nBut that was cool, right.\n\n488\n00:24:15.705 --> 00:24:20.985\nI took that out that was too much for\nme to be able to process or go through,\n\n489\n00:24:20.985 --> 00:24:25.165\nand I redirected that into a system\nthat could handle that much data and\n\n490\n00:24:25.165 --> 00:24:27.245\nmake it easier for\nme to peruse and go through.\n\n491\n00:24:27.245 --> 00:24:30.078\nSo let's jump into let's\nsee how that works as well.\n\n492\n00:24:30.078 --> 00:24:32.395\nLet's see.\nWhat do I have on tap for\n\n493\n00:24:32.395 --> 00:24:35.755\nfirst, let's see how grep works.\n\n494\n00:24:35.755 --> 00:24:37.385\nI'm gonna clear that thing here.\n\n495\n00:24:37.385 --> 00:24:41.235\nAnd basically grep, you say grep,\nand then you give it a string,\n\n496\n00:24:41.235 --> 00:24:43.865\nan operator, or\nwhat's called a regular expression.\n\n497\n00:24:43.865 --> 00:24:47.960\nAnother term we're gonna get well into,\ndon't worry, just not in this episode.\n\n498\n00:24:47.960 --> 00:24:50.435\n[LAUGH] Your expression,\nwhich is whatever.\n\n499\n00:24:50.435 --> 00:24:52.805\nSo just whatever string that you want.\n\n500\n00:24:52.805 --> 00:24:54.715\nI'm looking for the word cat.\n\n501\n00:24:54.715 --> 00:24:56.795\nI'm looking for the word network.\n\n502\n00:24:56.795 --> 00:24:57.545\nSomething like that.\n\n503\n00:24:57.545 --> 00:25:02.815\nI'm looking for this String of\ncharacters together, that's what I want.\n\n504\n00:25:02.815 --> 00:25:06.105\nThat's what grep is gonna do.\n\n505\n00:25:06.105 --> 00:25:10.005\nIt stands for globally search\nregular expression and print,\n\n506\n00:25:10.005 --> 00:25:12.555\nthat's what grep stands for.\n\n507\n00:25:12.555 --> 00:25:14.165\nSo that's what it's doing.\n\n508\n00:25:14.165 --> 00:25:15.675\nAnd then I just give it a file name,\nso maybe, and\n\n509\n00:25:15.675 --> 00:25:19.765\nthere you go, that's basically\nthe command structure itself.\n\n510\n00:25:19.765 --> 00:25:23.655\nSo now that you see how it works,\nwe'll go back and we'll actually use grep.\n\n511\n00:25:23.655 --> 00:25:27.245\nSo let's see here, grep, let's see here,\n\n512\n00:25:27.245 --> 00:25:29.905\ngrep, we'll say BSD, and\nwe'll do that README.\n\n513\n00:25:29.905 --> 00:25:36.625\nOh, I'm not in a, let me change back to\nthe directory that file actually exists.\n\n514\n00:25:36.625 --> 00:25:39.245\ncd, yeah, there we go.\n\n515\n00:25:39.245 --> 00:25:41.645\nNow this should work.\n\n516\n00:25:41.645 --> 00:25:44.915\nGrep, we'll say BSD, and\nI'm a horrible typer.\n\n517\n00:25:44.915 --> 00:25:48.011\nI went to the school of typing.\n\n518\n00:25:48.011 --> 00:25:53.225\nBSD And\nthen,the file name which is read me.\n\n519\n00:25:53.225 --> 00:25:53.725\nThere we go.\n\n520\n00:25:53.725 --> 00:25:54.855\nNow you see what Grep does.\n\n521\n00:25:54.855 --> 00:25:58.425\nIt returns every line that had\nthe string VSD in it right.\n\n522\n00:25:58.425 --> 00:26:00.605\nAnd it did a nice job of\nhighlighting it for me as well.\n\n523\n00:26:00.605 --> 00:26:04.215\nThat is a function that may or\nmay not be turned on.\n\n524\n00:26:04.215 --> 00:26:07.245\nIt's part of the Grep system and\nyou can enable that if you wanted,\n\n525\n00:26:07.245 --> 00:26:08.955\nif it's not already enabled.\n\n526\n00:26:08.955 --> 00:26:10.495\nBut it's nice.\nIt just gives me every line\n\n527\n00:26:10.495 --> 00:26:13.304\nthat had the string that I was looking for\ninside of that text\n\n528\n00:26:34.995 --> 00:26:36.325\nInaudible\n\n529\n00:27:02.555 --> 00:27:07.715\nInaudible So I want ls to generate\neverything that's inside of that seat and\n\n530\n00:27:07.715 --> 00:27:09.545\nthen I want to send that to grep and\n\n531\n00:27:09.545 --> 00:27:12.615\nI want grep to find every line that\nhas rc.d and only generate that.\n\n532\n00:27:12.615 --> 00:27:17.515\nAll right, so see how we're starting\nto pair down a bunch of stuff and\n\n533\n00:27:17.515 --> 00:27:20.545\nif I wanted to if were to get\nany kind of crazy results,\n\n534\n00:27:20.545 --> 00:27:25.197\nI could do the whole 2 slash\ndev slash null idea as well.\n\n535\n00:27:25.197 --> 00:27:29.725\nThere we go and And look at that.\n\n536\n00:27:29.725 --> 00:27:34.805\nIf I were to leave all that off of there\nand just do the etc, remember what we got?\n\n537\n00:27:34.805 --> 00:27:35.505\nLots of stuff, right?\n\n538\n00:27:35.505 --> 00:27:36.375\nI'm not looking for that.\n\n539\n00:27:36.375 --> 00:27:37.495\nI'm looking for just rc.d.\n\n540\n00:27:37.495 --> 00:27:40.875\nSo now, if I do it this way,\nI've gotta look through here.\n\n541\n00:27:40.875 --> 00:27:43.215\nOkay, okay,\nat least it's in alphabetical order.\n\n542\n00:27:43.215 --> 00:27:46.755\nAnd I can look for, oh,\nalmost there, oh there's some rc.\n\n543\n00:27:46.755 --> 00:27:49.125\nMaybe I miss some, maybe I don't.\n\n544\n00:27:49.125 --> 00:27:54.035\nBut if I throw that grep command on there,\nnow I just get a Exactly\n\n545\n00:27:54.035 --> 00:27:57.385\nwhat I'm looking for and thank you\nGriff for highlighting it for me.\n\n546\n00:27:57.385 --> 00:27:59.005\nI know exactly what it is.\n\n547\n00:27:59.005 --> 00:28:00.505\nI'm pairing down what\nit is I'm looking for.\n\n548\n00:28:00.505 --> 00:28:01.505\nVery, very nice.\n\n549\n00:28:01.505 --> 00:28:05.435\n>> This is really a helpful command,\nlike Daniel said.\n\n550\n00:28:05.435 --> 00:28:08.405\nI learned it from the Linux\ncommand line where I was\n\n551\n00:28:08.405 --> 00:28:11.185\nable to actually reduce the output to\njust see what I need to in config files.\n\n552\n00:28:11.185 --> 00:28:15.075\nBut you're actually seeing where this\nis gonna become useful in scripting\n\n553\n00:28:15.075 --> 00:28:18.185\nespecially when you have to back and\ntroubleshoot things like errors and\n\n554\n00:28:18.185 --> 00:28:21.015\nyou need You need to find\nexactly what you need to find.\n\n555\n00:28:21.015 --> 00:28:24.005\nIt's probably one of\nthe most useful things you\n\n556\n00:28:24.005 --> 00:28:26.115\nwill actually ever learn how to do.\n\n557\n00:28:26.115 --> 00:28:29.095\nAlong with learning those regular\nexpressions your gonna see that it's\n\n558\n00:28:29.095 --> 00:28:32.425\na powerful combination in terms of\nthings that we need to understand.\n\n559\n00:28:32.425 --> 00:28:36.285\nNow, the other thing we could also do\nis not just redirect the output but\n\n560\n00:28:36.285 --> 00:28:40.125\nwe can actually redirect the output\ninto two different outputs as well.\n\n561\n00:28:40.125 --> 00:28:42.525\nAnd we can use I think it's called\nthe T command, right Daniel?\n\n562\n00:28:42.525 --> 00:28:46.315\nYes, and when he says Iced tea\ndoesn't mean like something you drink.\n\n563\n00:28:46.315 --> 00:28:47.543\n>> No.\nYeah, with the pinky out.\n\n564\n00:28:47.543 --> 00:28:50.295\n[LAUGH]\n>> Yeah, with the pinky out right?\n\n565\n00:28:50.295 --> 00:28:51.715\nIt's T-E-E tee like that.\n\n566\n00:28:51.715 --> 00:28:54.135\nNot just the letter, but T-E-E.\n\n567\n00:28:54.135 --> 00:28:58.535\nThat being said, what TEE does is\nit's kind of a redirecting program.\n\n568\n00:28:58.535 --> 00:28:59.715\nThat's what it does.\n\n569\n00:28:59.715 --> 00:29:03.725\nIt means to redirect stuff, and\nspecifically standard output and\n\n570\n00:29:03.725 --> 00:29:04.925\nto a file, right?\n\n571\n00:29:04.925 --> 00:29:06.515\nSo, that's what we're doing.\n\n572\n00:29:06.515 --> 00:29:09.280\nNow, obviously there's\nother ways to do this,\n\n573\n00:29:09.280 --> 00:29:13.235\nthat;s the great thing about your\nenvironment, your Linux environment,\n\n574\n00:29:13.235 --> 00:29:17.305\nis that there's usually half a dozen ways\nto do the exact same thing, this is just\n\n575\n00:29:17.305 --> 00:29:22.515\nanother way for us to manipulate and\nredirect output somewhere else.\n\n576\n00:29:22.515 --> 00:29:25.355\nCool little command,\nyou never know when it might be handy, so\n\n577\n00:29:25.355 --> 00:29:27.095\nI threw it in here a bonus surprise.\n\n578\n00:29:27.095 --> 00:29:31.365\nSo let's take look at C, here we are in\nthe screen here, i'll clear that out,\n\n579\n00:29:31.365 --> 00:29:33.465\nand T is command we're looking for.\n\n580\n00:29:33.465 --> 00:29:35.695\nAnd all we want to do, is say,\n\n581\n00:29:35.695 --> 00:29:39.075\nwell, is this the file that I\nwanted to redirect it, right?\n\n582\n00:29:39.075 --> 00:29:40.465\nSo, it's gonna do, remember, two things.\n\n583\n00:29:40.465 --> 00:29:44.425\nIt's gonna redirect to\nthe file name that we give it,\n\n584\n00:29:44.425 --> 00:29:46.035\nbut it's also gonna go to standard output.\n\n585\n00:29:46.035 --> 00:29:48.035\nSo, it does two things at one time.\n\n586\n00:29:48.035 --> 00:29:49.735\nGo to standard output and\nredirect to a file.\n\n587\n00:29:49.735 --> 00:29:51.005\nSo, let's see what that looks like.\n\n588\n00:29:51.005 --> 00:29:52.195\nWe'll call this the T file.\n\n589\n00:29:52.195 --> 00:29:54.455\nT file one, how about that?\n\n590\n00:29:54.455 --> 00:29:57.495\nAnd now, okay, what's going on?\n\n591\n00:29:57.495 --> 00:29:58.965\nIt's, it's Kind of crazy.\n\n592\n00:29:58.965 --> 00:30:00.475\nIt's stuck.\nIt's not doing anything.\n\n593\n00:30:00.475 --> 00:30:05.915\nNo, you're actually in the program at\nthis point and you can start giving it\n\n594\n00:30:05.915 --> 00:30:10.185\nstuff that you want to send to\nthe output and to your file.\n\n595\n00:30:10.185 --> 00:30:13.967\nSo I can say please add salt to my soup.\n\n596\n00:30:13.967 --> 00:30:15.277\nBoom.\n\n597\n00:30:15.277 --> 00:30:16.915\nI hit return.\n\n598\n00:30:16.915 --> 00:30:20.505\nYou'll notice that it kind\nof echoed that to my screen.\n\n599\n00:30:20.505 --> 00:30:21.385\nBecause why?\n\n600\n00:30:21.385 --> 00:30:22.915\nBecause that's what it does.\n\n601\n00:30:22.915 --> 00:30:27.925\nIt send is to The standard output and\nto the file, tfile1.\n\n602\n00:30:27.925 --> 00:30:28.755\nDid it actually do that?\n\n603\n00:30:28.755 --> 00:30:29.835\nWell, let's take a look.\n\n604\n00:30:29.835 --> 00:30:36.825\nWe'll do the old control C to get out\nof that guy and ls, do we have tfile1,\n\n605\n00:30:36.825 --> 00:30:42.245\nwe do have tfile1, let's cap that guy and\nplease add salt to my soup so\n\n606\n00:30:42.245 --> 00:30:47.225\nthat's exactly what it did, sent it to the\noutput and to the file at the same time,\n\n607\n00:30:47.225 --> 00:30:49.945\nredirecting it just again That's\nanother way to do some redirection.\n\n608\n00:30:49.945 --> 00:30:51.925\n>> All right, Daniel.\n\n609\n00:30:51.925 --> 00:30:57.085\nThere's a lot there on redirection and\nwe're starting to see where this type of\n\n610\n00:30:57.085 --> 00:31:00.615\ncommands and understanding at least these\nredirectors are really going to help us.\n\n611\n00:31:00.615 --> 00:31:03.875\nRemember that you do need to understand\nthat the way that the Linux actually ends\n\n612\n00:31:03.875 --> 00:31:06.355\nup putting the input out onto\nthe screen by default, but\n\n613\n00:31:06.355 --> 00:31:08.385\nthen we can take these\ndifferent redirectors and\n\n614\n00:31:08.385 --> 00:31:12.085\nredirect them to other files, or we can\nactually take the commands themselves and\n\n615\n00:31:12.085 --> 00:31:15.425\nactually give it some other input\nby redirecting the input as well.\n\n616\n00:31:15.425 --> 00:31:19.615\nDaniel also took some time to show us how\nto actually use a little bit of grip or\n\n617\n00:31:19.615 --> 00:31:22.535\nat least the understanding\nof why we use that.\n\n618\n00:31:22.535 --> 00:31:25.035\nI guarantee as we get more\ninto the scripting episode,\n\n619\n00:31:25.035 --> 00:31:28.665\nyou're going to see grip constantly as\nyou're actually searching for things and\n\n620\n00:31:28.665 --> 00:31:32.355\nthen of course, being able to see\nthe output, not only in the file and\n\n621\n00:31:32.355 --> 00:31:34.215\nalso on the screen at the same time.\n\n622\n00:31:34.215 --> 00:31:35.395\nSo there's a lot of stuff for\n\n623\n00:31:35.395 --> 00:31:38.304\nus when it comes down to making sure\nthat we can see what we need to\n\n624\n00:31:49.035 --> 00:31:56.460\nInaudible Signing off for\nIT ProTV, I'm Ronnie Wong.\n\n625\n00:31:56.460 --> 00:31:57.240\n>> And I'm Daniel Laury.\n\n626\n00:31:58.400 --> 00:32:03.200\n>> And we'll see you next time.\n\n",
          "vimeoId": "145426773"
        },
        {
          "description": "In this episode, Ronnie and Daniel introduce the concept of variables and working with variables in BASH. They talk about what a variable is and the scope of using them:  global and local variables.  They create the basic variable in RAM and show the output with the echo command.  Using the terminal, they show some of scripts that define global variables and local variables.",
          "length": "1531",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash-111115-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash-111115-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash-111115-1-sm.jpg",
          "title": "Variables in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.635 --> 00:00:15.516\nWelcome to another exciting\nepisode here on ITProTV.\n\n3\n00:00:15.516 --> 00:00:18.815\nI'm your host Ronnie Wong, and today\nwe're taking a look at, well, BASH and\n\n4\n00:00:18.815 --> 00:00:19.440\nscripting.\n\n5\n00:00:19.440 --> 00:00:23.762\nAnd what we're going to do is we're going\nto focus in on using variables today, and\n\n6\n00:00:23.762 --> 00:00:26.374\nto help us out is gonna be\nof course Daniel Lowrie.\n\n7\n00:00:26.374 --> 00:00:30.591\nDaniel when it come down to it, now we're\nactually in the area that's over my head.\n\n8\n00:00:30.591 --> 00:00:33.621\nSo you're gonna help us out with actually\nunderstanding what variables are.\n\n9\n00:00:33.621 --> 00:00:36.110\nAnd at least explain what\nthe heck we use them for..\n\n10\n00:00:36.110 --> 00:00:38.110\n>> Yeah that's the purpose of\ntoday's show, is to try and\n\n11\n00:00:38.110 --> 00:00:40.830\nfigure out what are these kooky\nthings we call variables.\n\n12\n00:00:40.830 --> 00:00:42.780\nHow do we use them, how can I employ them?\n\n13\n00:00:42.780 --> 00:00:44.270\nWhat do I need to know about them?\n\n14\n00:00:44.270 --> 00:00:45.072\nThat's what we are doing today.\n\n15\n00:00:45.072 --> 00:00:47.922\nObviously we plumed Ronnie's\ndepths as he's told us [LAUGH].\n\n16\n00:00:47.922 --> 00:00:49.094\n>> [LAUGH]\n>> And\n\n17\n00:00:49.094 --> 00:00:50.342\nthat's all right that is not a problem.\n\n18\n00:00:50.342 --> 00:00:54.547\nIf you've never been around variable\nbefore, if you're new to scripting or\n\n19\n00:00:54.547 --> 00:00:58.690\nprogramming languages altogether,\nvariables can be a little misguided,\n\n20\n00:00:58.690 --> 00:01:00.890\na little cryptic towards you.\n\n21\n00:01:00.890 --> 00:01:02.304\nWhat do you mean when you say a variable?\n\n22\n00:01:02.304 --> 00:01:04.104\nThis takes me back to the days of math,\nright?\n\n23\n00:01:04.104 --> 00:01:07.586\nWhen your teacher's telling you,\nn + 2 = whatever and you're like,\n\n24\n00:01:07.586 --> 00:01:09.482\nwhat the heck is with this n doing here?\n\n25\n00:01:09.482 --> 00:01:12.622\nThere's no n's, there's no alphabet\nsoup when it comes to math.\n\n26\n00:01:12.622 --> 00:01:14.763\nIt's numbers,\nthat's what we're working with.\n\n27\n00:01:14.763 --> 00:01:16.043\nWell that's the same kind of idea.\n\n28\n00:01:16.043 --> 00:01:19.360\nn is an unknown, right?\n\n29\n00:01:19.360 --> 00:01:23.684\nWell in programming, or in scripting\nper se, cuz we're gonna be doing,\n\n30\n00:01:23.684 --> 00:01:27.662\nsame idea applies except we know\nwhat the variable is because we're\n\n31\n00:01:27.662 --> 00:01:29.782\ngonna assign the variable a value.\n\n32\n00:01:29.782 --> 00:01:34.927\nSo, that's what the variable is, it's a\ncontainer that can actually hold a value.\n\n33\n00:01:34.927 --> 00:01:37.540\nAnd it can hold lots of different\ntypes of values, actually,\n\n34\n00:01:37.540 --> 00:01:38.757\nit's gonna be really cool.\n\n35\n00:01:38.757 --> 00:01:43.045\nAnd as we get down the pipe here, and you\nstart seeing how variables in our scripts\n\n36\n00:01:43.045 --> 00:01:46.973\nare employed, all the different things\nwe can actually make a variable.\n\n37\n00:01:46.973 --> 00:01:51.018\nI like to liken the variable\nas Santa's gift bag, right?\n\n38\n00:01:51.018 --> 00:01:53.542\n>> [LAUGH]\n>> I know, it's kind of funny but\n\n39\n00:01:53.542 --> 00:01:56.852\nbear with me and\nsee if the analogy holds water for you.\n\n40\n00:01:56.852 --> 00:01:59.564\nSanta, he's got the bag, if you've ever\nseen the movie and he reaches in and\n\n41\n00:01:59.564 --> 00:02:00.452\nlittle Billy's there.\n\n42\n00:02:00.452 --> 00:02:03.489\nAnd he says, Billy you were good this\nyear, you needed a bike this year.\n\n43\n00:02:03.489 --> 00:02:06.789\nHe reaches in the bag and\nhe pulls out a bike from his bag, right?\n\n44\n00:02:06.789 --> 00:02:09.636\nAnd then his dad, you've been good\nthis year too and he reaches in,\n\n45\n00:02:09.636 --> 00:02:10.912\nthere's a Rolex watch for you.\n\n46\n00:02:10.912 --> 00:02:16.972\nAnd mom gets a brand new over\nunder stove or whatever.\n\n47\n00:02:16.972 --> 00:02:18.732\nAnd it all comes out of the one bag,\nright?\n\n48\n00:02:18.732 --> 00:02:21.772\nThis bag that's really\nno bigger than himself.\n\n49\n00:02:21.772 --> 00:02:23.732\nAnd how the heck is it\nholding all that stuff?\n\n50\n00:02:23.732 --> 00:02:28.349\nThat's the same kind of idea that\nthe variable is Santa's bag, and\n\n51\n00:02:28.349 --> 00:02:31.272\nthe value is whatever's inside that bag.\n\n52\n00:02:31.272 --> 00:02:34.443\nSo whatever Santa needs, he reaches in and\nhe pulls it out, and that's what it is.\n\n53\n00:02:34.443 --> 00:02:37.819\nThat's the same idea that we're gonna\nbe looking at when it comes to using\n\n54\n00:02:37.819 --> 00:02:38.971\nvariables and scripts.\n\n55\n00:02:38.971 --> 00:02:41.854\nAnd declaring variables through\nthe environments even and\n\n56\n00:02:41.854 --> 00:02:44.226\nthat's kind of what we're\ngonna look at today.\n\n57\n00:02:44.226 --> 00:02:47.687\nSo hopefully that makes sense to you,\n\n58\n00:02:47.687 --> 00:02:52.891\na variable is a container that\nholds a value inside of it.\n\n59\n00:02:52.891 --> 00:02:54.780\nWe tell it what the value is and\n\n60\n00:02:54.780 --> 00:02:59.000\nthen we can reference the variable\ninstead of the value itself.\n\n61\n00:02:59.000 --> 00:03:00.921\nThat's the purpose of a variable.\n\n62\n00:03:00.921 --> 00:03:04.712\n>> Now, from my understanding though,\nDaniel, I understand that what variables\n\n63\n00:03:04.712 --> 00:03:08.281\ncan also do is that they can actually\nrange from whether they're global, or\n\n64\n00:03:08.281 --> 00:03:09.863\nthey're also local variables.\n\n65\n00:03:09.863 --> 00:03:12.332\nWhat are we talking about when we\nactually use language like that?\n\n66\n00:03:12.332 --> 00:03:14.159\n>> Yeah, that's a really good question and\n\n67\n00:03:14.159 --> 00:03:16.412\nthis is where it can really\nstart to get confusing.\n\n68\n00:03:16.412 --> 00:03:19.382\nBecause local variables, and global or\n\n69\n00:03:19.382 --> 00:03:23.930\nenvironmental variables,\nreally they act the same.\n\n70\n00:03:23.930 --> 00:03:25.792\nThere's not a lot of\ndifference between them.\n\n71\n00:03:25.792 --> 00:03:30.512\nAs far as creating them and using them and\nimplementing them, there is no difference.\n\n72\n00:03:30.512 --> 00:03:31.970\nYou make a global variable or\n\n73\n00:03:31.970 --> 00:03:35.872\nan environmental variable in the same\nway that you create a local variable.\n\n74\n00:03:35.872 --> 00:03:38.468\nYou declare it,\nyou say this is my container name and\n\n75\n00:03:38.468 --> 00:03:41.949\nthis is the value of said container,\nyou put the things together, and\n\n76\n00:03:41.949 --> 00:03:45.050\nthe system sees it and goes,\nokay I'm going to use that.\n\n77\n00:03:45.050 --> 00:03:50.581\nThe real difference is where\nthe system is looking for them, okay?\n\n78\n00:03:50.581 --> 00:03:54.592\nSo we talked earlier about shells and\nwhat shell environments you may be in.\n\n79\n00:03:54.592 --> 00:03:56.592\nMaybe you're in\nan interactive login shell.\n\n80\n00:03:56.592 --> 00:03:59.032\nMaybe your in interactive nonlogin shell.\n\n81\n00:03:59.032 --> 00:04:03.084\nOr maybe you're in a noninteractive shell\nat all because we're running a script, or\n\n82\n00:04:03.084 --> 00:04:06.911\nit's a subshell that gets spawned from\nthe shell that we're already in as it runs\n\n83\n00:04:06.911 --> 00:04:07.890\na command, right?\n\n84\n00:04:07.890 --> 00:04:09.892\nSo those are the three different\ntypes of shells that we have.\n\n85\n00:04:09.892 --> 00:04:14.321\nSo that's really the difference, the local\nvariables are those the ones that\n\n86\n00:04:14.321 --> 00:04:18.360\nwe create inside of the shell\nthat we're already logged into.\n\n87\n00:04:18.360 --> 00:04:21.215\nThey're going to be\nlocal to that shell and\n\n88\n00:04:21.215 --> 00:04:24.871\nif we want them to be able to\ngo to Ronnie when he logs in.\n\n89\n00:04:24.871 --> 00:04:26.995\nHe wants to be able to use\nthe exact same variable.\n\n90\n00:04:26.995 --> 00:04:30.077\nWell then we need to create\nan environmental variable or\n\n91\n00:04:30.077 --> 00:04:31.192\na global variable so\n\n92\n00:04:31.192 --> 00:04:35.401\nit starts reaching out farther than\njust the user that it's specified for.\n\n93\n00:04:35.401 --> 00:04:39.593\nSo, local variables they work with just\nthat one user that has declared them or\n\n94\n00:04:39.593 --> 00:04:42.592\ncreated them or\neven a script that's already premade.\n\n95\n00:04:42.592 --> 00:04:45.865\nStuff that's happening when they\nlog in that they didn't do, and\n\n96\n00:04:45.865 --> 00:04:48.971\nit's declaring variables,\nthat's their local variables.\n\n97\n00:04:48.971 --> 00:04:52.342\nEnvironmental variables or\nglobal variables that's gonna be for\n\n98\n00:04:52.342 --> 00:04:55.121\neveryone, they're gonna get\nthe same kind of stuff.\n\n99\n00:04:55.121 --> 00:04:56.982\nAnd we're gonna take a look\nat some of those as well.\n\n100\n00:04:56.982 --> 00:05:00.771\n>> All right, now since we're talking\nabout it and we've mentioned it,\n\n101\n00:05:00.771 --> 00:05:05.021\nthat the variables are really very closely\naligned to what we also find in math.\n\n102\n00:05:05.021 --> 00:05:07.620\nWe also understand that it's\ncontainered to help us out.\n\n103\n00:05:07.620 --> 00:05:09.816\nAnd so, a lot of the times\ninside your computer system,\n\n104\n00:05:09.816 --> 00:05:12.856\nwhen we talk about a variable, we're\nactually referring to a place inside of\n\n105\n00:05:12.856 --> 00:05:16.161\nRAM that we can actually switch in and out\nsome of the information that's in there.\n\n106\n00:05:16.161 --> 00:05:20.794\nAnd Daniel just mentioned that the idea of\nglobal variables can actually apply, well,\n\n107\n00:05:20.794 --> 00:05:21.931\nto multiple shells.\n\n108\n00:05:21.931 --> 00:05:23.173\nWhereas a local variable,\n\n109\n00:05:23.173 --> 00:05:26.801\nnormally is gonna apply to that single\nshell that you're currently using too.\n\n110\n00:05:26.801 --> 00:05:28.291\nDaniel that will actually\nlead us to a great place,\n\n111\n00:05:28.291 --> 00:05:30.242\nyou're gonna show us how to actually\ncreate one of these, right?\n\n112\n00:05:30.242 --> 00:05:32.262\n>> Yeah,\nwe're gonna show you how to create them.\n\n113\n00:05:32.262 --> 00:05:35.730\nFirst thing I wanna do is I wanna show you\nwhat variables may already be residing on\n\n114\n00:05:35.730 --> 00:05:36.350\nyour system.\n\n115\n00:05:36.350 --> 00:05:37.210\n>> Wow, okay.\n\n116\n00:05:37.210 --> 00:05:39.071\n>> This can be a little helpful for\nus, right?\n\n117\n00:05:39.071 --> 00:05:41.503\nAnd I wanna see if there's\nvariables already there,\n\n118\n00:05:41.503 --> 00:05:44.581\nmaybe I can employ them in my scripts,\nwe're gonna see some of where\n\n119\n00:05:44.581 --> 00:05:47.623\nthey're being used in scripts that\nare already available for us.\n\n120\n00:05:47.623 --> 00:05:48.663\nSo let's take a look at that.\n\n121\n00:05:48.663 --> 00:05:53.721\nLet's go ahead and jump to my screen,\nand see what we have here.\n\n122\n00:05:53.721 --> 00:05:56.001\nLet's start off with\nenvironmental variables, right?\n\n123\n00:05:56.001 --> 00:06:00.108\nSo, if we type in the env\ncommand that's gonna give us\n\n124\n00:06:00.108 --> 00:06:03.591\nthe environmental variables list, right?\n\n125\n00:06:03.591 --> 00:06:07.715\nAnd I just hit Return, and now we get\na whole list of variables that have been\n\n126\n00:06:07.715 --> 00:06:11.644\ndeclared by the system that our\nenvironmental, no matter who logs in,\n\n127\n00:06:11.644 --> 00:06:14.942\nthey're going to have these\nvariables available to them.\n\n128\n00:06:14.942 --> 00:06:17.222\nI'm gonna scroll up here real quick,\nand we'll start from the beginning.\n\n129\n00:06:17.222 --> 00:06:22.282\nYou'll see this is quite\nan extensive list.\n\n130\n00:06:22.282 --> 00:06:25.368\nIf you've just installed the system,\n\n131\n00:06:25.368 --> 00:06:29.199\nyou open CLI, you type in env for\nthe first time,\n\n132\n00:06:29.199 --> 00:06:35.301\nit's gonna have a list of stuff that's\nbeen generated by the system itself.\n\n133\n00:06:35.301 --> 00:06:36.900\nYou've not created any of these.\n\n134\n00:06:36.900 --> 00:06:39.612\nWe can create environmental variables,\nand we're gonna get into that.\n\n135\n00:06:39.612 --> 00:06:47.035\nSo these for right now should all\njust be ones the system has created.\n\n136\n00:06:47.035 --> 00:06:50.250\nAnd lets just take a look at a few\nof them, things like hosting, right?\n\n137\n00:06:50.250 --> 00:06:54.971\nHere's a variable right here, it tells\nme what the HOSTNAME of my system is.\n\n138\n00:06:54.971 --> 00:06:55.611\nAll right cool.\n\n139\n00:06:55.611 --> 00:07:00.504\nSo, if I reference the HOSTNAME\nvariable it's going to give me whatever\n\n140\n00:07:00.504 --> 00:07:04.851\nthe value of that is,\nwhich would be localhost.localdomain.\n\n141\n00:07:04.851 --> 00:07:09.284\nAll right, so let's take a look at the env\ncommand, which will actually let us see\n\n142\n00:07:09.284 --> 00:07:12.191\nthe environmental variables\nthat are on our system.\n\n143\n00:07:12.191 --> 00:07:15.932\nSo whatever you're running, you can run\nthis command it should show all of them.\n\n144\n00:07:15.932 --> 00:07:19.748\nAll you've gotta do is type in\nenv like I said, hit Return, and\n\n145\n00:07:19.748 --> 00:07:24.428\nthat shows you a bunch of stuff as you\ncan see, there's quite a lengthy list,\n\n146\n00:07:24.428 --> 00:07:26.161\nquite a few variables here.\n\n147\n00:07:26.161 --> 00:07:27.617\nLet's take a look through here and\n\n148\n00:07:27.617 --> 00:07:29.681\nsee if we can see anything\nthat makes sense to us.\n\n149\n00:07:29.681 --> 00:07:33.962\nSome of them should be really well\nnamed and they really flow together.\n\n150\n00:07:33.962 --> 00:07:38.527\nAnd that's what you want to do\nwhen you're creating variables,\n\n151\n00:07:38.527 --> 00:07:41.349\nis try to make them, if at all possible,\n\n152\n00:07:41.349 --> 00:07:46.169\nat least descriptive of what is\ninside of them, what is their value.\n\n153\n00:07:46.169 --> 00:07:48.211\nTake a look at HOSTNAME here,\nthat's a good one.\n\n154\n00:07:48.211 --> 00:07:49.831\nMost of you know this is\nthe HOSTNAME of my system.\n\n155\n00:07:49.831 --> 00:07:53.953\nI'm defining that as a variable so I can\nreference it later, as a variable name and\n\n156\n00:07:53.953 --> 00:07:55.526\nnot the HOSTNAME of my system.\n\n157\n00:07:55.526 --> 00:07:59.959\nThat way if my system HOSTNAME changes,\nwell, that variable will change,\n\n158\n00:07:59.959 --> 00:08:04.060\nand no matter what happens Happens\nhostname is always my system name.\n\n159\n00:08:04.060 --> 00:08:06.230\nHere's another one's shell, right?\n\n160\n00:08:06.230 --> 00:08:07.140\nThat's a good one.\n\n161\n00:08:07.140 --> 00:08:08.730\nLet's me know what shell that I'm running.\n\n162\n00:08:08.730 --> 00:08:09.690\nObviously this is bin bash.\n\n163\n00:08:09.690 --> 00:08:13.391\nThis is a bash shell, so\nit's a good thing we're running bash.\n\n164\n00:08:13.391 --> 00:08:13.931\nA few others.\n\n165\n00:08:13.931 --> 00:08:14.891\nThe terminal.\n\n166\n00:08:14.891 --> 00:08:16.910\nThat's letting you know\nthat if I run a terminal,\n\n167\n00:08:16.910 --> 00:08:19.270\nit's going to do exterm with 256 colors.\n\n168\n00:08:19.270 --> 00:08:19.970\nThat's nice.\n\n169\n00:08:19.970 --> 00:08:21.820\nColoring system.\n\n170\n00:08:21.820 --> 00:08:23.020\nAll sorts of good stuff.\n\n171\n00:08:23.020 --> 00:08:24.592\nLots of interesting things to go through.\n\n172\n00:08:24.592 --> 00:08:26.412\nLook at this one.\nIt's always cool.\n\n173\n00:08:26.412 --> 00:08:28.072\nThe LS colors.\n\n174\n00:08:28.072 --> 00:08:33.051\nKind of a variable that's being called by\na script when you run the LS command to\n\n175\n00:08:33.051 --> 00:08:35.551\nsay this is how I want the color scheme.\n\n176\n00:08:35.551 --> 00:08:37.370\nThe auto color feature of LS.\n\n177\n00:08:37.370 --> 00:08:39.930\nAs you can see, it's quite a bit of stuff.\n\n178\n00:08:39.930 --> 00:08:44.140\nYou'd hate to have to actually type\nall this in as part of your command\n\n179\n00:08:44.140 --> 00:08:47.420\njust to do another list to get\nthe color scheme you're looking for.\n\n180\n00:08:47.420 --> 00:08:50.082\nIt doesn't make any sense to do that and\nthat's why we create variables.\n\n181\n00:08:50.082 --> 00:08:54.869\nNow all I have to do is reference\nLS_Colors instead of typing all of\n\n182\n00:08:54.869 --> 00:08:55.730\nthis mess.\n\n183\n00:08:55.730 --> 00:08:59.970\nI'm sure there's some script that does\nthat references that variable and\n\n184\n00:08:59.970 --> 00:09:04.070\nget a nice color scheme Instead of\njust plain black and white text.\n\n185\n00:09:04.070 --> 00:09:07.690\nSo that's our environmental variables,\nand they're awesome.\n\n186\n00:09:07.690 --> 00:09:08.768\nI'm gonna go ahead and\n\n187\n00:09:08.768 --> 00:09:11.842\nshow you one more command that\nkind of does the exact same thing.\n\n188\n00:09:11.842 --> 00:09:13.343\nIt's called printenv.\n\n189\n00:09:13.343 --> 00:09:17.300\nSo P-R-I-N-T-E-N-V, yep that's right.\n\n190\n00:09:17.300 --> 00:09:19.800\nAnd does the exact same thing, right?\n\n191\n00:09:19.800 --> 00:09:23.362\nYou hit that same And you give me\nthe exact same list that we saw before.\n\n192\n00:09:23.362 --> 00:09:26.690\nAs you can see there's my LS colors,\nall handy dandy.\n\n193\n00:09:26.690 --> 00:09:31.830\nThe one thing that it does do for\nyou that the ENV command does not is if\n\n194\n00:09:31.830 --> 00:09:35.220\nI want to see the contents, so\n\n195\n00:09:35.220 --> 00:09:40.510\nlet's say I wanted to see what was\nin this, what's a good one here.\n\n196\n00:09:40.510 --> 00:09:41.106\nWe'll do hosting.\n\n197\n00:09:41.106 --> 00:09:42.509\nI wanna see what's in hosting.\n\n198\n00:09:42.509 --> 00:09:43.477\nI can do print N and\nthen hostname like so.\n\n199\n00:09:43.477 --> 00:09:50.694\nIt returned and it tells me this is\nwhat's inside of that container.\n\n200\n00:09:50.694 --> 00:09:52.470\nThat's its value.\n\n201\n00:09:52.470 --> 00:09:56.680\nSo kind of a neat thing for you in case\nyou wanna throw that in a script maybe.\n\n202\n00:09:56.680 --> 00:09:58.740\nI don't know.\nSo easy step.\n\n203\n00:09:58.740 --> 00:10:01.430\nAgain, these are all global or\nenvironmental variables.\n\n204\n00:10:01.430 --> 00:10:05.756\nWe also have local variables, so\nwe gotta take a look at those,\n\n205\n00:10:05.756 --> 00:10:08.381\nand that's gonna be our set command.\n\n206\n00:10:08.381 --> 00:10:11.670\nClear the screen for us here,\nand we'll do set and hit return.\n\n207\n00:10:11.670 --> 00:10:16.022\nAnd you're gonna see a lot of\ncrazy gibberish going on here.\n\n208\n00:10:16.022 --> 00:10:21.021\nThis is actually functions and\nwhen you type in set with no options,\n\n209\n00:10:21.021 --> 00:10:24.618\nit's going to return all\nyour local variables,\n\n210\n00:10:24.618 --> 00:10:29.618\nand your global variables, and\nany environmental variables, and\n\n211\n00:10:29.618 --> 00:10:35.840\nany functions that have been created by\nscripts that do things for your system.\n\n212\n00:10:35.840 --> 00:10:38.670\nFunctions are kind of\na variable as well but\n\n213\n00:10:38.670 --> 00:10:40.560\nwe'll talk about that in\nan up coming episode.\n\n214\n00:10:40.560 --> 00:10:45.930\nBut for this, right now were looking\nat the regular type of variables and\n\n215\n00:10:45.930 --> 00:10:49.700\nwe're getting a lot of output it's to\nmuch for us so let's do that set and\n\n216\n00:10:49.700 --> 00:10:52.640\nwe'll redirect into the less command.\n\n217\n00:10:52.640 --> 00:10:57.030\nSo it's going to page for it and\nmake it easier to read the output.\n\n218\n00:10:57.030 --> 00:10:58.870\nNow, we see it starts\nat the top of the line.\n\n219\n00:10:58.870 --> 00:11:01.650\nIt allows me to go forward and\nback, and search for things.\n\n220\n00:11:01.650 --> 00:11:04.560\nAnd, we're seeing probably some of\nthe same stuff that we saw, well,\n\n221\n00:11:04.560 --> 00:11:09.060\nnot probably, we are seeing some of the\nsame things that we saw on the other one,\n\n222\n00:11:09.060 --> 00:11:10.410\nlike, there's host name, right there.\n\n223\n00:11:10.410 --> 00:11:11.720\nThat's a good one.\n\n224\n00:11:12.860 --> 00:11:14.940\nRight?\nBut, it also has other things\n\n225\n00:11:14.940 --> 00:11:16.860\nthat are local only to\nthe shell that I'm logged into.\n\n226\n00:11:17.980 --> 00:11:19.580\nAnd that is the difference.\n\n227\n00:11:19.580 --> 00:11:20.571\nGlobal variables,\n\n228\n00:11:20.571 --> 00:11:25.422\ntherefore everyone, anybody that logs in,\nthey're gonna get those global variables.\n\n229\n00:11:25.422 --> 00:11:29.015\nBut for the local variables,\nif I'm logged in as me and\n\n230\n00:11:29.015 --> 00:11:33.110\nI have ashell running,\nthese variables are only for me.\n\n231\n00:11:33.110 --> 00:11:34.400\nRonnie might be logged in and\n\n232\n00:11:34.400 --> 00:11:36.630\nhave the same variables because\nthe system is generating them.\n\n233\n00:11:36.630 --> 00:11:41.510\nBut if I change them, they don't\nchange for Ron, they only change for\n\n234\n00:11:41.510 --> 00:11:43.030\nme, so\nthat's why they're considered local.\n\n235\n00:11:43.030 --> 00:11:44.450\nI'm only modifying them for myself.\n\n236\n00:11:44.450 --> 00:11:47.900\nIf I modify the global variable, that\nwould be a completely different story, and\n\n237\n00:11:47.900 --> 00:11:51.670\nthen Ronnie would start seeing\nsome differences in the way his\n\n238\n00:11:51.670 --> 00:11:53.510\ncomputing experience would be going about.\n\n239\n00:11:53.510 --> 00:11:56.933\n>> All right, Daniel, so why don't you\nshow us how to create a local variable,\n\n240\n00:11:56.933 --> 00:11:59.743\nand then show us that it is local and\nnot just a global variable.\n\n241\n00:11:59.743 --> 00:12:00.623\n>> Okay.\nYeah.\n\n242\n00:12:00.623 --> 00:12:02.140\nLet's take a look at that.\n\n243\n00:12:02.140 --> 00:12:03.380\nRight.\nClear, click this,\n\n244\n00:12:03.380 --> 00:12:05.860\nand clear the screen out again.\n\n245\n00:12:05.860 --> 00:12:06.650\nSo how do we see that?\n\n246\n00:12:06.650 --> 00:12:08.450\nRight.\nThat's what Ronnie's getting at.\n\n247\n00:12:08.450 --> 00:12:12.478\nHow do we see the global versus the local,\nwithout having to use the?\n\n248\n00:12:12.478 --> 00:12:13.400\nIt's pretty simple.\n\n249\n00:12:13.400 --> 00:12:17.680\nIf I create a variable,\nit's just something you need to know.\n\n250\n00:12:17.680 --> 00:12:20.900\nWhen you create a variable\nit is local to you, right?\n\n251\n00:12:20.900 --> 00:12:25.040\nIt is a local variable and it's local\nto the shell that you're logged into.\n\n252\n00:12:25.040 --> 00:12:28.320\nIt's not local to any other shells yet,\nright?\n\n253\n00:12:28.320 --> 00:12:31.670\nSo if I create a variable and\nthen I use the command to see\n\n254\n00:12:31.670 --> 00:12:36.360\nwhat the contents of it are,\nit's going to show me that I'll be fine.\n\n255\n00:12:36.360 --> 00:12:39.950\nIf open another shell,\nand I try to see it.\n\n256\n00:12:39.950 --> 00:12:41.250\nIt's not gonna show you.\n\n257\n00:12:41.250 --> 00:12:42.192\nLet me show you what I'm talking about.\n\n258\n00:12:42.192 --> 00:12:43.172\nSo, here's how to create a variable.\n\n259\n00:12:43.172 --> 00:12:44.892\nIt's pretty simple.\n\n260\n00:12:44.892 --> 00:12:48.292\nI'll say var1 = hello.\n\n261\n00:12:48.292 --> 00:12:51.270\nOkay, and hit return.\n\n262\n00:12:51.270 --> 00:12:52.270\nThat is it.\n\n263\n00:12:52.270 --> 00:12:53.730\nBells and whistles are not going off.\n\n264\n00:12:53.730 --> 00:12:55.550\nStart the parade and throw confetti.\n\n265\n00:12:55.550 --> 00:12:58.620\nWe've created a variable,\nand it's that simple.\n\n266\n00:12:58.620 --> 00:13:00.340\nVery, very easy.\n\n267\n00:13:00.340 --> 00:13:03.467\nAnd if you needed to modify that,\nyou say I made a mistake,\n\n268\n00:13:03.467 --> 00:13:06.431\nI didn't want it to be hello,\nI want it to be howdy, right.\n\n269\n00:13:06.431 --> 00:13:09.530\nNo problem,\nyou just do the exact same thing, really.\n\n270\n00:13:09.530 --> 00:13:15.270\nBring it back up, say var1 = howdy,\nand now it = howdy.\n\n271\n00:13:15.270 --> 00:13:19.229\nIt doesn't equal hello and\nhowdy It's saying, okay,\n\n272\n00:13:19.229 --> 00:13:24.031\nI have a variable, I've named it,\nthere's my variable name, and\n\n273\n00:13:24.031 --> 00:13:28.602\nit is equaling this text or\nstring of characters, which is out.\n\n274\n00:13:28.602 --> 00:13:30.082\nThat's what I want it to do.\n\n275\n00:13:30.082 --> 00:13:34.184\nAny time I change it, anytime I say\nvariable 1 equals something, whatever's in\n\n276\n00:13:34.184 --> 00:13:38.120\nthere, is going to get pumped out and\nthe new stuff is gonna get put in, right.\n\n277\n00:13:38.120 --> 00:13:38.900\nIt's gonna make room for it.\n\n278\n00:13:38.900 --> 00:13:40.980\nCan we do other things with that?\n\n279\n00:13:40.980 --> 00:13:44.930\nYeah, but for right now that's\na variable creation and modification.\n\n280\n00:13:44.930 --> 00:13:45.510\nVery, very simple.\n\n281\n00:13:45.510 --> 00:13:46.790\nAll right, so let's do that.\n\n282\n00:13:46.790 --> 00:13:49.160\nI have actually created the variable.\n\n283\n00:13:49.160 --> 00:13:51.730\nNow we saw print end for\n\n284\n00:13:51.730 --> 00:13:56.490\nthose environmental variables,\nbut this is a local variable.\n\n285\n00:13:56.490 --> 00:13:57.900\nSo you gotta learn the echo command.\n\n286\n00:13:57.900 --> 00:13:58.790\nThis is a nice command.\n\n287\n00:13:58.790 --> 00:13:59.490\nYou're gonna use it a lot.\n\n288\n00:13:59.490 --> 00:14:00.960\nIt's one of my favorites.\n\n289\n00:14:00.960 --> 00:14:03.630\nIt basically says print to the screen.\n\n290\n00:14:03.630 --> 00:14:09.871\nIf I say echo hi there,\nit will print hi there.\n\n291\n00:14:09.871 --> 00:14:11.471\nRight, so that's what echo does.\n\n292\n00:14:11.471 --> 00:14:14.231\nSo now I'm actually gonna\nreference a variable.\n\n293\n00:14:14.231 --> 00:14:14.751\nWhat's it gonna do?\n\n294\n00:14:14.751 --> 00:14:16.250\nIt's gonna print the value\nof that variable.\n\n295\n00:14:17.880 --> 00:14:23.300\nSo if I say echo $, that dollar sign\nthere is to let the system know\n\n296\n00:14:23.300 --> 00:14:28.130\nI'm referencing a variable, so\nit needs to look for variables.\n\n297\n00:14:28.130 --> 00:14:29.820\nAnd what variables should it look for?\n\n298\n00:14:29.820 --> 00:14:31.790\nWell, it should look for $VAR1.\n\n299\n00:14:31.790 --> 00:14:34.370\nSo if I say echo $VAR1 it's gonna say,\nhowdy.\n\n300\n00:14:34.370 --> 00:14:35.540\nVery cool, right?\n\n301\n00:14:35.540 --> 00:14:38.570\nThat is a local variable to this system.\n\n302\n00:14:38.570 --> 00:14:45.715\nIf I switch users to me,\nand I rock and roll.\n\n303\n00:14:45.715 --> 00:14:50.253\nLet's see here,\nI'll start at my own [INAUDIBLE] self.\n\n304\n00:14:50.253 --> 00:14:51.753\nThat way it doesn't give me any problems.\n\n305\n00:14:51.753 --> 00:14:55.913\nAnd I try echo var one\njust like we did before.\n\n306\n00:14:55.913 --> 00:14:57.350\nGet nothing, right.\n\n307\n00:14:57.350 --> 00:14:57.920\nBecause why?\n\n308\n00:14:57.920 --> 00:14:59.650\nIt was local to user1, not dlowry.\n\n309\n00:14:59.650 --> 00:15:04.350\nI'm logged in, I'm running a different\nshell, I don't see that local variable so\n\n310\n00:15:04.350 --> 00:15:06.180\nI'm not gonna get any output for it.\n\n311\n00:15:06.180 --> 00:15:10.850\n>> Now Daniel, is that dollar sign\nimportant in front of the word var1?\n\n312\n00:15:10.850 --> 00:15:14.960\n>> Yes, the dollar sign is very important.\n\n313\n00:15:14.960 --> 00:15:16.610\nThe dollar sign lets you know that it,\n\n314\n00:15:16.610 --> 00:15:20.220\nor it tells the system this is the\nvariable that I would like to reference.\n\n315\n00:15:20.220 --> 00:15:22.770\nSometimes you use it and\nsometimes you don't.\n\n316\n00:15:22.770 --> 00:15:25.600\nUsually when you're just referencing and\nnot declaring,\n\n317\n00:15:25.600 --> 00:15:29.540\nthat's normally when you have or\ndon't have a dollar sign.\n\n318\n00:15:29.540 --> 00:15:33.430\nSo declaring the variable,\nno dollar sign necessary.\n\n319\n00:15:33.430 --> 00:15:36.400\nIf I'm referencing the variable.\n\n320\n00:15:36.400 --> 00:15:38.090\nYou're going to need that dollar sign so\n\n321\n00:15:38.090 --> 00:15:43.280\nthe system knows you're not just\nasking it about the string var1,\n\n322\n00:15:43.280 --> 00:15:47.410\nit's an actual variable named to var1 and\nit knows that through that dollar sign.\n\n323\n00:15:47.410 --> 00:15:49.069\nSo, yes, it is an important thing.\n\n324\n00:15:49.069 --> 00:15:53.177\nSo now that we've seen that we've\nseen echo, echo's a nice command,\n\n325\n00:15:53.177 --> 00:15:58.116\nand also that when I create a variable,\nit doesn't permeate throughout the system.\n\n326\n00:15:58.116 --> 00:16:02.388\nIt's local to the shell\nthat I'm logged into.\n\n327\n00:16:02.388 --> 00:16:06.260\nAll right, what else do we want\nto do with variables today?\n\n328\n00:16:06.260 --> 00:16:08.420\nWe've created them, we've modified them.\n\n329\n00:16:08.420 --> 00:16:13.145\nLet's take a look at some of the scripts\nthat actually create variables for\n\n330\n00:16:13.145 --> 00:16:13.900\nus, okay?\n\n331\n00:16:13.900 --> 00:16:14.445\nIt's an important thing.\n\n332\n00:16:14.445 --> 00:16:20.459\nLet me exit out of here, and get back\nto local, and I'll clear the screen.\n\n333\n00:16:20.459 --> 00:16:24.848\nSo some of the scripts we have available\nto ourselves is we'll start with the big\n\n334\n00:16:24.848 --> 00:16:25.906\ndogs, all right?\n\n335\n00:16:25.906 --> 00:16:31.138\nEtc/profile and Etc/bashrc.\n\n336\n00:16:31.138 --> 00:16:35.120\nThese are our two big dogs for\nmost UNIX Linux systems.\n\n337\n00:16:35.120 --> 00:16:38.834\nThey are the scripts that run the declare\nthose environmental variables.\n\n338\n00:16:38.834 --> 00:16:41.151\nThey also do other things as well,\nbut for right now,\n\n339\n00:16:41.151 --> 00:16:42.863\nthat's what we wanna know about them.\n\n340\n00:16:42.863 --> 00:16:44.847\nSo let's take a look at\nwhat's inside of there.\n\n341\n00:16:44.847 --> 00:16:48.690\nI'll cd and then I'll go to old etc and\nthen I will, let's see here.\n\n342\n00:16:48.690 --> 00:16:51.303\nI guess we'll cat and profile.\n\n343\n00:16:51.303 --> 00:16:54.088\nProfile, there we go.\n\n344\n00:16:54.088 --> 00:16:56.157\nAnd now we're looking at\nwhat's inside our profile.\n\n345\n00:16:56.157 --> 00:17:00.070\nThe cool thing is is that there's a lot of\nneat stuff in here for us to look through.\n\n346\n00:17:00.070 --> 00:17:01.619\nIt can help you learn scripting as well.\n\n347\n00:17:01.619 --> 00:17:07.842\nBut basically, this is that script\nthat says here's what we should do.\n\n348\n00:17:07.842 --> 00:17:09.319\nThis is the big dog, all right?\n\n349\n00:17:09.319 --> 00:17:11.957\nSo this is what you should do\nwhen the system starts up and\n\n350\n00:17:11.957 --> 00:17:14.158\nthen somebody logs in and\nthey create a shell.\n\n351\n00:17:14.158 --> 00:17:16.701\nThis is where we get a lot\nof our information, and\n\n352\n00:17:16.701 --> 00:17:18.256\na lot of things are done here.\n\n353\n00:17:18.256 --> 00:17:19.862\nSo if you go in here and you modify this,\n\n354\n00:17:19.862 --> 00:17:21.773\nyou're taking your life\ninto your own hands.\n\n355\n00:17:21.773 --> 00:17:23.375\n>> [LAUGH]\n>> Cuz it could mess it up.\n\n356\n00:17:23.375 --> 00:17:24.779\nYou're gonna have a system\nthat doesn't work right.\n\n357\n00:17:24.779 --> 00:17:30.215\nSo the rule of thumb is don't play with\nthis unless you are a master of scripting.\n\n358\n00:17:30.215 --> 00:17:31.156\nJust leave her alone.\n\n359\n00:17:31.156 --> 00:17:33.500\nWe're gonna have other scripts\nthat we can mess with.\n\n360\n00:17:33.500 --> 00:17:34.530\nPlay around all day long.\n\n361\n00:17:34.530 --> 00:17:35.330\nCan you make back ups?\n\n362\n00:17:35.330 --> 00:17:38.215\nYes of course you can make back ups, but\nwho wants that administrative headache?\n\n363\n00:17:38.215 --> 00:17:43.805\nJust don't mess with this guy and\ndon't mess with, let's see here,\n\n364\n00:17:43.805 --> 00:17:48.268\ngood old, what is it, bashrc,\nyeah, cat and bashrc.\n\n365\n00:17:48.268 --> 00:17:50.800\nAgain, same kind of idea,\nthey're creating,\n\n366\n00:17:50.800 --> 00:17:54.258\nthey're the scripts that a lot of\nour scripts are gonna play with,\n\n367\n00:17:54.258 --> 00:17:57.840\nthey'll call to those, or\nother stuff is calling to these scripts,\n\n368\n00:17:57.840 --> 00:18:01.969\nso that's why we really don't want to\nmess around with that too much if at all.\n\n369\n00:18:01.969 --> 00:18:05.080\nLike again, my advice would just be,\nstay away from them.\n\n370\n00:18:05.080 --> 00:18:08.350\nDon't play with them other than to look\nat them and see what they're doing,\n\n371\n00:18:08.350 --> 00:18:11.000\ntry to learn more about\nscripting through them.\n\n372\n00:18:11.000 --> 00:18:14.360\nOther than that, just hang out with\nthem and that's all you need to know.\n\n373\n00:18:14.360 --> 00:18:16.922\n>> And these files, though,\nthat we're looking at,\n\n374\n00:18:16.922 --> 00:18:19.486\nthese actually affect\nthe global system itself, so\n\n375\n00:18:19.486 --> 00:18:23.113\nthat anybody logged on, these\nare the ones that's going to affect them.\n\n376\n00:18:23.113 --> 00:18:26.897\nBut every user also may have\nsomething like that bashrc as well.\n\n377\n00:18:26.897 --> 00:18:30.120\nAnd that one is really\nonly affecting that user.\n\n378\n00:18:30.120 --> 00:18:34.646\n>> Yes, that is a great point Ronny makes,\nand that's why I say just stay away from\n\n379\n00:18:34.646 --> 00:18:38.647\nthe etc profile and the etc bashrc,\nbecause they do affect everyone.\n\n380\n00:18:38.647 --> 00:18:42.210\nMaybe I don't care if I craze up\nthe system and it does stupid stuff.\n\n381\n00:18:42.210 --> 00:18:45.480\nRonny's over here trying to get work done,\nhe's like what is going on, my scripts\n\n382\n00:18:45.480 --> 00:18:48.909\naren't working, I'm calling these global\nvariables and nothing is working right.\n\n383\n00:18:48.909 --> 00:18:52.337\nIt's because I've been kicking around\nin the profile, etc profile and\n\n384\n00:18:52.337 --> 00:18:55.608\netc bashrc making a mess of things and\nnow things don't work for him.\n\n385\n00:18:55.608 --> 00:18:58.267\nSo that's why it's a good\nreason to stay away from those.\n\n386\n00:18:58.267 --> 00:19:03.571\nAnd like we also said, we have our\nown that is going to affect just us.\n\n387\n00:19:03.571 --> 00:19:05.173\nSo let's take a look at that.\n\n388\n00:19:05.173 --> 00:19:08.845\nIf I go back to my home directory,\nI do an ls, look,\n\n389\n00:19:08.845 --> 00:19:12.372\nI have a whole lot of stuff,\njust my regular files.\n\n390\n00:19:12.372 --> 00:19:17.246\nBut if I do an ls -a, hit Return, I start\nto see more because there's some hidden\n\n391\n00:19:17.246 --> 00:19:20.347\nfiles here and\nthat period denotes them as hidden.\n\n392\n00:19:20.347 --> 00:19:24.718\nI notice some of them right here,\nlike this bash.profile and\n\n393\n00:19:24.718 --> 00:19:28.501\nbashrc, and\nthere might even be a couple others, but\n\n394\n00:19:28.501 --> 00:19:34.069\nthose are really the ones we want to know\nabout that are on the system right now.\n\n395\n00:19:34.069 --> 00:19:37.470\nLet's start with bashrc.\n\n396\n00:19:37.470 --> 00:19:39.966\nI'm gonna cap bashrc and see what we get.\n\n397\n00:19:39.966 --> 00:19:42.694\n.bashrc.\n\n398\n00:19:42.694 --> 00:19:45.469\nSo not a whole lot here.\n\n399\n00:19:45.469 --> 00:19:47.189\nVery simplistic.\n\n400\n00:19:47.189 --> 00:19:50.832\nAnd this is a script that runs\nwhenever you log in, right?\n\n401\n00:19:50.832 --> 00:19:52.330\nYou get a shell.\n\n402\n00:19:52.330 --> 00:19:56.495\nI wanna make sure this is, and I wrote\nthis down to make sure that I get these\n\n403\n00:19:56.495 --> 00:20:00.948\ncorrect because, it's real easy to\nstart mixing and matching these things.\n\n404\n00:20:00.948 --> 00:20:04.767\nSo this is launched by\ninteractive non-login shells.\n\n405\n00:20:04.767 --> 00:20:08.868\nNow we talked about login shells before,\nand the shell that I'm using right now,\n\n406\n00:20:08.868 --> 00:20:10.363\nI didn't have to log in to it.\n\n407\n00:20:10.363 --> 00:20:14.461\nI launched it from the GUI interface,\nand it threw up a terminal emulator.\n\n408\n00:20:14.461 --> 00:20:18.835\nIf I was already logged into a system and\nI opened another shell,\n\n409\n00:20:18.835 --> 00:20:22.891\nthan anything that's inside\nof this one actually launch.\n\n410\n00:20:22.891 --> 00:20:26.546\nSo anytime a non-login\ninteractive shell launches,\n\n411\n00:20:26.546 --> 00:20:30.285\nwhatever's in this batch RC file,\nit will execute it.\n\n412\n00:20:30.285 --> 00:20:31.807\nIt is a script, and it will execute it.\n\n413\n00:20:31.807 --> 00:20:34.382\nSo I told you one day we would get\nto scripting, and we're there.\n\n414\n00:20:34.382 --> 00:20:37.841\nWe're not creating one yet, but\nwe are going to modify these things and\n\n415\n00:20:37.841 --> 00:20:38.771\nsee how they work.\n\n416\n00:20:38.771 --> 00:20:39.410\nSo let's do that.\n\n417\n00:20:39.410 --> 00:20:40.849\nLet's play around with this guy.\n\n418\n00:20:40.849 --> 00:20:42.756\nAnd everybody gets a bash.rc, right?\n\n419\n00:20:42.756 --> 00:20:46.526\nThat's the cool thing about it is\nbash.rc is there for everyone.\n\n420\n00:20:46.526 --> 00:20:51.007\nRonnie's got his own bash.rc, I got my own\nbash, I can do whatever I want to it, and\n\n421\n00:20:51.007 --> 00:20:54.434\nmess up my system till high heaven,\nand Ronny is none the wiser.\n\n422\n00:20:54.434 --> 00:20:55.546\nHe does not see that.\n\n423\n00:20:55.546 --> 00:20:57.428\nHe continues to work as normal.\n\n424\n00:20:57.428 --> 00:20:59.517\nSo, that's the cool thing.\n\n425\n00:20:59.517 --> 00:21:03.680\nYou'll notice I've actually already\ncreated a little extra there, and\n\n426\n00:21:03.680 --> 00:21:07.302\nyou'll notice, right here,\nit says we have this lovely part,\n\n427\n00:21:07.302 --> 00:21:09.536\nuser specific aliases and functions.\n\n428\n00:21:09.536 --> 00:21:11.614\nAnd that's where we can add our own stuff.\n\n429\n00:21:11.614 --> 00:21:16.478\nSo any time I launch a non-interactive\nlogin shell, I can get this, it will\n\n430\n00:21:16.478 --> 00:21:21.424\nrun this script and make it do whatever\nit is I tell it to do, so let's do that.\n\n431\n00:21:21.424 --> 00:21:27.577\nI'm gonna nano good old .bashrc.\n\n432\n00:21:27.577 --> 00:21:30.789\nGet inside here, and I'm gonna rock down,\nyou'll notice I put this export command,\n\n433\n00:21:30.789 --> 00:21:32.384\nwe're gonna look at that here in a second.\n\n434\n00:21:32.384 --> 00:21:36.111\nBut I'm gonna add some more.\n\n435\n00:21:36.111 --> 00:21:38.851\nI wanna see the date, and\noutline in a calendar format.\n\n436\n00:21:38.851 --> 00:21:42.323\nWe got a cool command called cal,\nwhich gives you a calendar.\n\n437\n00:21:42.323 --> 00:21:46.623\nAnytime I launch a new shell,\n\n438\n00:21:46.623 --> 00:21:53.331\nI wanna get the calendar,\nand I want it to say,\n\n439\n00:21:53.331 --> 00:22:00.040\nhow about echo \"Welcome $USER\" like that.\n\n440\n00:22:00.040 --> 00:22:06.517\nAnd now we'll save that, hit Enter, and\nthen exit out, and now that's there.\n\n441\n00:22:06.517 --> 00:22:10.255\nSo what happens if I launch a new show?\n\n442\n00:22:10.255 --> 00:22:11.451\nI'll just type in bash.\n\n443\n00:22:11.451 --> 00:22:14.295\nHey, it actually did something for\nme, right?\n\n444\n00:22:14.295 --> 00:22:15.919\nThat's kind of cool.\nIt's a script, it ran,\n\n445\n00:22:15.919 --> 00:22:18.416\nI gave it some commands and\nthat's what it's doing.\n\n446\n00:22:18.416 --> 00:22:19.928\nIt gives me that calendar, and\n\n447\n00:22:19.928 --> 00:22:23.489\nsays welcome user one because that's\nwhat I'm logged in as, user one.\n\n448\n00:22:23.489 --> 00:22:24.638\nAnd that's local to me.\n\n449\n00:22:24.638 --> 00:22:27.663\nIf I switched user and logged into\nsomebody else and ran a new shell,\n\n450\n00:22:27.663 --> 00:22:28.950\nnot gonna see that, right?\n\n451\n00:22:28.950 --> 00:22:30.356\nCuz that's only for me.\n\n452\n00:22:30.356 --> 00:22:31.947\nRonnie creates one for himself.\n\n453\n00:22:31.947 --> 00:22:37.019\nSame idea, so bashrc, interactive\nnon-login shows you want something\n\n454\n00:22:37.019 --> 00:22:42.310\nto happen every time you launch one,\nthat's where you go that bashrc file.\n\n455\n00:22:42.310 --> 00:22:45.970\n>> Now Daniel, there's also one\nwhere it actually runs when the user\n\n456\n00:22:45.970 --> 00:22:46.880\nlogs in, right?\n\n457\n00:22:46.880 --> 00:22:48.430\nSo, instead of just it being turned on and\n\n458\n00:22:48.430 --> 00:22:51.300\nthen, it just runs,\nit actually is specific to the user, so\n\n459\n00:22:51.300 --> 00:22:53.590\nthat I could have something\ndifferent that what you have, right?\n\n460\n00:22:53.590 --> 00:22:54.318\n>> Exactly right.\n\n461\n00:22:54.318 --> 00:22:57.696\nSo, going back to the idea of\ndifferent types of shells, right?\n\n462\n00:22:57.696 --> 00:23:00.029\nInteractive non log in,\nwe saw what to do with that.\n\n463\n00:23:00.029 --> 00:23:04.043\nSo what if we are at an interactive\nlog on or log in interactive prompt,\n\n464\n00:23:04.043 --> 00:23:05.207\nwhat do we do there?\n\n465\n00:23:05.207 --> 00:23:05.720\nNot a problem.\n\n466\n00:23:05.720 --> 00:23:07.412\nThere's also a file for that.\n\n467\n00:23:07.412 --> 00:23:09.270\nWe do that ls-a.\n\n468\n00:23:09.270 --> 00:23:13.252\nYou'll see this bash profile, right?\n\n469\n00:23:13.252 --> 00:23:16.272\nNow this guy is actually\npretty ubiquitous.\n\n470\n00:23:16.272 --> 00:23:19.151\nIt happens to work with\na lot of different stuff.\n\n471\n00:23:19.151 --> 00:23:23.945\nThe only thing I think it doesn't\naffect is interactive non login shells.\n\n472\n00:23:23.945 --> 00:23:28.258\nSo that being said if you needed to create\nsomething when your already logged in and\n\n473\n00:23:28.258 --> 00:23:32.071\nyou already launched a shell bashrc's\nyour guy, if it doesn't exist,\n\n474\n00:23:32.071 --> 00:23:33.774\nit does happen on some systems.\n\n475\n00:23:33.774 --> 00:23:35.968\nYou don't see the bashrc, just create it.\n\n476\n00:23:35.968 --> 00:23:38.593\nNano.bashrc and\nthrow your commands in there.\n\n477\n00:23:38.593 --> 00:23:41.394\nIt doesn't have to have that cool\nif statement that was in there.\n\n478\n00:23:41.394 --> 00:23:42.737\nDon't worry about that.\n\n479\n00:23:42.737 --> 00:23:44.730\nJust put a command in there\nthat you want it to do.\n\n480\n00:23:44.730 --> 00:23:48.418\nDeclare a variable that you\nwant to declare like I did.\n\n481\n00:23:48.418 --> 00:23:51.505\nVery, very simple stuff.\n\n482\n00:23:51.505 --> 00:23:56.261\nThe bash profile one, it does work when\nyou're at a logged-in interactive prompt.\n\n483\n00:23:56.261 --> 00:24:00.746\nSo I go to that login screen,\nall I have is that text space,\n\n484\n00:24:00.746 --> 00:24:03.783\nmaybe I'm SSH-ing into that system.\n\n485\n00:24:03.783 --> 00:24:05.954\nAll I get is text.\n\n486\n00:24:05.954 --> 00:24:07.602\nThat's the one I wanna do.\n\n487\n00:24:07.602 --> 00:24:10.589\nSo if I capture the dots,\n\n488\n00:24:10.589 --> 00:24:15.578\nbash_profile, helps if I finish this.\n\n489\n00:24:15.578 --> 00:24:17.715\nAgain, goes right back to the same look.\n\n490\n00:24:17.715 --> 00:24:19.258\nIt's very, very similar.\n\n491\n00:24:19.258 --> 00:24:24.236\nAnd you'll notice it also has\na user specific environment set\n\n492\n00:24:24.236 --> 00:24:27.883\nof programs just like\nwe had with the Bashrc.\n\n493\n00:24:27.883 --> 00:24:31.898\nSo those are the two guys you're gonna\nwork with when it comes to yourself and\n\n494\n00:24:31.898 --> 00:24:35.301\nnot globally declaring things for\neveryone and their brother.\n\n495\n00:24:35.301 --> 00:24:38.444\n>> Now Daniel, there's a lot of\nthis that we've gone through and\n\n496\n00:24:38.444 --> 00:24:42.061\nwe've taken a look at where some of\nthese are actually going to run when,\n\n497\n00:24:42.061 --> 00:24:45.768\nregardless of the user that logs in,\nor even when the user logs in as well.\n\n498\n00:24:45.768 --> 00:24:49.488\nThere's a lot more to go but taking\na look at the time that we have, Daniel,\n\n499\n00:24:49.488 --> 00:24:51.674\nit looks like we're gonna\nneed a part two for\n\n500\n00:24:51.674 --> 00:24:55.483\nus to even actually learn a little bit\nmore, so Daniel, you good with that?\n\n501\n00:24:55.483 --> 00:24:58.399\n>> Yeah I'm good with that cuz\nthis is really good stuff and\n\n502\n00:24:58.399 --> 00:25:02.450\nyou gotta know it when it comes to\ncreating scripts and working with scripts.\n\n503\n00:25:02.450 --> 00:25:05.887\nYou have to be familiar with\nthis type of information.\n\n504\n00:25:05.887 --> 00:25:10.147\nSo, part two, I guess it is, I'll run my\nmouth a little bit more about variables.\n\n505\n00:25:10.147 --> 00:25:11.368\nIt'll be a good time had by all.\n\n506\n00:25:11.368 --> 00:25:14.938\n>> It sounds great, Daniel, you're willing\nto stick in with us, well, we know that\n\n507\n00:25:14.938 --> 00:25:18.357\nour audience is also willing to stick with\nus as well for a part two, and speaking\n\n508\n00:25:18.357 --> 00:25:21.749\nof that, that means it's a great point for\nus to go ahead and end this episode.\n\n509\n00:25:21.749 --> 00:25:24.174\nSigning off for IT pro TV,\nI'm Ronnie Wong.\n\n510\n00:25:24.174 --> 00:25:24.989\n>> And I'm Daniel Lowrie.\n\n511\n00:25:24.989 --> 00:25:25.732\n>> And we'll see you next time.\n\n512\n00:25:25.732 --> 00:25:30.165\n[SOUND]\n\n",
          "vimeoId": "146026801"
        },
        {
          "description": "In this episode, Ronnie and Daniel introduce the concept of variables and working with variables in BASH. They talk about what a variable is and the scope of using them:  global and local variables.  They create the basic variable in RAM and show the output with the echo command.  Using the terminal, they show some of scripts that define global variables and local variables.",
          "length": "1762",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash_pt2-111115-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash_pt2-111115-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-8-1-variables_in_bash_pt2-111115-1-sm.jpg",
          "title": "Variables in BASH Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.011 --> 00:00:10.011\n[MUSIC]\n\n2\n00:00:11.425 --> 00:00:15.185\nWelcome to another exciting\nepisode here on ITProTV.\n\n3\n00:00:15.185 --> 00:00:19.905\nI'm your host Ronnie Wong, and today we're\ntaking [INAUDIBLE] BASH and scripting, and\n\n4\n00:00:19.905 --> 00:00:23.176\nwe're specifically gonna dive\ninto the area of variables.\n\n5\n00:00:23.176 --> 00:00:27.002\nNow, this you actually see has a part two,\nwhich means that our show was so\n\n6\n00:00:27.002 --> 00:00:30.360\njam-packed filled with information\nthat we needed a part two.\n\n7\n00:00:30.360 --> 00:00:32.630\nSo part one was too much\nto get jammed in there.\n\n8\n00:00:32.630 --> 00:00:35.931\nBut to help us out is going to be well,\nMr. Daniel Lowrie.\n\n9\n00:00:35.931 --> 00:00:37.588\nAnd so Daniel, we did it.\n\n10\n00:00:37.588 --> 00:00:39.629\nWe jammed so much stuff in there,\nwe needed this part two.\n\n11\n00:00:39.629 --> 00:00:41.547\nSo Daniel,\ntell us where we need to pick up here.\n\n12\n00:00:41.547 --> 00:00:42.900\n>> Yeah, we sure did.\n\n13\n00:00:42.900 --> 00:00:46.050\nThere was a lot of information\nthat was going on in part one.\n\n14\n00:00:46.050 --> 00:00:47.500\nWe're looking at variables.\n\n15\n00:00:47.500 --> 00:00:52.170\nWhere we left off was some of the scripts\nthat start up as we either log in or\n\n16\n00:00:52.170 --> 00:00:55.290\nlaunch a terminal after\nwe've already logged in.\n\n17\n00:00:55.290 --> 00:00:57.717\nAnd how they assign some variables to us.\n\n18\n00:00:57.717 --> 00:01:02.540\nMaybe they look to a certain file or\nscript itself to make that happen.\n\n19\n00:01:02.540 --> 00:01:04.970\nOr, us as users can assign\nsome variables there as well.\n\n20\n00:01:04.970 --> 00:01:10.470\nThe ones we looked at were\nthe .bash_profile, and the .bashRC.\n\n21\n00:01:10.470 --> 00:01:12.848\nWhich is located in our home directory.\n\n22\n00:01:12.848 --> 00:01:16.297\nIf we take a look back at my screen\nreally quickly I can show you that under\n\n23\n00:01:16.297 --> 00:01:16.881\nthe LS-A.\n\n24\n00:01:16.881 --> 00:01:20.379\nAnd it was really simple because\nthese are beginning with the dot\n\n25\n00:01:20.379 --> 00:01:23.580\nare the period character that\nhides it from the system.\n\n26\n00:01:23.580 --> 00:01:24.807\nSo, I've gotta do that -a.\n\n27\n00:01:24.807 --> 00:01:29.663\nAnd there was .bash_profile\nwhich gives us what\n\n28\n00:01:29.663 --> 00:01:34.760\nhappens when I jump into\na login interactive shell.\n\n29\n00:01:34.760 --> 00:01:38.765\nSo, I'm greeted with,\nwhat's your username and password?\n\n30\n00:01:38.765 --> 00:01:39.932\nAnd then it launches.\n\n31\n00:01:39.932 --> 00:01:44.070\nWell, once that shell opens up, it's gonna\ndo these things that are inside that.\n\n32\n00:01:44.070 --> 00:01:48.230\nSame kind of idea with .bashrc\nexcept we're already logged in and\n\n33\n00:01:48.230 --> 00:01:49.540\nI'm launching another shell.\n\n34\n00:01:49.540 --> 00:01:53.245\nMaybe it's like this, I'm in\na terminal and I open a new terminal or\n\n35\n00:01:53.245 --> 00:01:55.131\nI go into my graphic environment.\n\n36\n00:01:55.131 --> 00:01:57.634\nI click the little icon\na terminal opens up.\n\n37\n00:01:57.634 --> 00:01:59.661\nIt's gonna look to that file for\n\n38\n00:01:59.661 --> 00:02:03.651\nthose interactive non-login\nshells to see what it should do.\n\n39\n00:02:03.651 --> 00:02:08.257\nSo if I created a variable and I want\nit to be there, as soon as I launch my\n\n40\n00:02:08.257 --> 00:02:12.962\nterminal or I log in, that's where I\nwould need to go and add that line.\n\n41\n00:02:12.962 --> 00:02:16.779\nAnd we saw how to do that with creating a\nvariable and now we're going to get into,\n\n42\n00:02:16.779 --> 00:02:19.827\nand we just add that variable line\ninto two scripts right there.\n\n43\n00:02:19.827 --> 00:02:23.842\nThat being said, we do have a few\nothers I want you to be aware of and\n\n44\n00:02:23.842 --> 00:02:25.669\nkind of along the same lines.\n\n45\n00:02:25.669 --> 00:02:30.273\nAll these files basically do the same kind\nof thing, you just kind of know where and\n\n46\n00:02:30.273 --> 00:02:31.755\nwhich one's doing what.\n\n47\n00:02:31.755 --> 00:02:36.424\nSo hopefully those last two that I told\nyou about are making some sense to you and\n\n48\n00:02:36.424 --> 00:02:39.710\ndont forget the old etsy-profile or\netsy/profile.\n\n49\n00:02:39.710 --> 00:02:41.080\nThat's the big dog, right?\n\n50\n00:02:41.080 --> 00:02:43.050\nAnd also, etsy/bashrc.\n\n51\n00:02:43.050 --> 00:02:47.311\nAnd if I'm not mistaken, if I cat .bashrc,\n\n52\n00:02:47.311 --> 00:02:53.041\nyou'll notice it's actually\nlooking toward those files.\n\n53\n00:02:53.041 --> 00:02:55.461\nSo it doesn't have to create\nthe global variables.\n\n54\n00:02:55.461 --> 00:02:57.929\nIt looks to that to do it for it.\n\n55\n00:02:57.929 --> 00:03:02.592\nSo that's why we get global variables and\nthe variables that we've declared here for\n\n56\n00:03:02.592 --> 00:03:05.391\nourselves in one script,\nit's very nicely done.\n\n57\n00:03:05.391 --> 00:03:09.682\nMoving right along,\nthere's another one called .bash_login.\n\n58\n00:03:09.682 --> 00:03:15.620\nNow, this is one that if we do look up\nhere in my output, we don't really see it.\n\n59\n00:03:15.620 --> 00:03:22.182\nWe see bash_profile, we see bash_logout,\nwe don't see .bash_login.\n\n60\n00:03:22.182 --> 00:03:22.974\nAnd why is that?\n\n61\n00:03:22.974 --> 00:03:27.410\nIt's a really good reason,\ncuz they don't use it any more hardly.\n\n62\n00:03:27.410 --> 00:03:28.320\nIt's defunct.\n\n63\n00:03:28.320 --> 00:03:32.600\nIf you do have it, it probably says,\nthis is not used if bashrc is around or\n\n64\n00:03:32.600 --> 00:03:34.640\nif bash_profiles is around.\n\n65\n00:03:34.640 --> 00:03:40.070\nIt was meant to be compliant\nwith c shell type of stuff and\n\n66\n00:03:40.070 --> 00:03:44.320\nit really didn't fan out,\nat least that's my understanding of\n\n67\n00:03:44.320 --> 00:03:49.162\nwhy bash_login is no longer around or\nis very much deprecated.\n\n68\n00:03:49.162 --> 00:03:53.364\nThere's no need to use it,\nthe .bash_profile and\n\n69\n00:03:53.364 --> 00:03:57.766\n.bashrc does such a great\njob of defining variables.\n\n70\n00:03:57.766 --> 00:04:01.379\nIt's the better way to go, it works\nbetter in the BASH environment itself, so\n\n71\n00:04:01.379 --> 00:04:02.660\nwe tend to stick with that.\n\n72\n00:04:02.660 --> 00:04:06.737\nAnd if you do see it and\nyou do wanna use it, you can, but\n\n73\n00:04:06.737 --> 00:04:09.683\nit's very much frowned upon anymore.\n\n74\n00:04:09.683 --> 00:04:12.267\nSo not that you can't,\nyou can if you want, it's up to you,\n\n75\n00:04:12.267 --> 00:04:14.959\nthat's the great thing about\nLinux systems and Unix systems,\n\n76\n00:04:14.959 --> 00:04:16.552\nthey are very highly customizable.\n\n77\n00:04:16.552 --> 00:04:20.674\nBut unless it's an older distribution\nyou're probably not going to see that one\n\n78\n00:04:20.674 --> 00:04:21.225\non there.\n\n79\n00:04:21.225 --> 00:04:25.357\nBut if you do, I wanted you to be aware\nof what it was and why it's there.\n\n80\n00:04:25.357 --> 00:04:26.763\nLet's see what else we have.\n\n81\n00:04:26.763 --> 00:04:33.461\nA very cool one here, going back to the\netc column is a file called environments.\n\n82\n00:04:33.461 --> 00:04:36.532\nOkay, well kind of\nhitting to what it does.\n\n83\n00:04:36.532 --> 00:04:38.136\nThis is a great place for\n\n84\n00:04:38.136 --> 00:04:42.480\nus to create variables that we\nwant to be environments, right?\n\n85\n00:04:42.480 --> 00:04:47.434\nSo, environmental variables that we want\nto call that are user created that become\n\n86\n00:04:47.434 --> 00:04:48.720\nglobal all the time.\n\n87\n00:04:48.720 --> 00:04:53.194\nNow what it isn't good for is for\nyou to say, I'm going to redefine a global\n\n88\n00:04:53.194 --> 00:04:56.975\nvariable that's already being\ncreated by some other script.\n\n89\n00:04:56.975 --> 00:04:59.425\nThat's probably not what you want to do.\n\n90\n00:04:59.425 --> 00:05:03.309\nI mean you can, it will work, but once\nyou start having variable calls in two\n\n91\n00:05:03.309 --> 00:05:07.510\ndifferent places things start getting\nhinky and it's easy to mess stuff up.\n\n92\n00:05:07.510 --> 00:05:12.504\nSo, the best thing to do with\nthat etc/environment file is to\n\n93\n00:05:12.504 --> 00:05:14.720\njust put the user created.\n\n94\n00:05:14.720 --> 00:05:19.340\nI always want my variable called,\nwhat was it?\n\n95\n00:05:19.340 --> 00:05:22.098\nI always want it to equal howdy,\nand I want it to be global.\n\n96\n00:05:22.098 --> 00:05:23.846\nI want it to always be there for me.\n\n97\n00:05:23.846 --> 00:05:27.216\nEvery subshell I create, that's what\nI want, so that's what I'm gonna do.\n\n98\n00:05:27.216 --> 00:05:28.637\nI'm gonna put it in that etc environment.\n\n99\n00:05:28.637 --> 00:05:34.060\nSo all you have to do, obviously,\n\n100\n00:05:34.060 --> 00:05:38.177\nis CD etc/environment.\n\n101\n00:05:38.177 --> 00:05:42.764\nI'm horrible at typing as you can see.\n\n102\n00:05:42.764 --> 00:05:43.977\nHorrible at typing.\n\n103\n00:05:43.977 --> 00:05:46.130\nLet me just get into etc, how about that?\n\n104\n00:05:46.130 --> 00:05:47.013\nThere we go.\n\n105\n00:05:47.013 --> 00:05:48.430\nLet's see if we can find that guy.\n\n106\n00:05:48.430 --> 00:05:51.590\ncd/, it's a file, that's why.\n\n107\n00:05:51.590 --> 00:05:53.587\nI'm losing my mind everyone.\n\n108\n00:05:53.587 --> 00:05:54.756\nAnd welcome to the show.\n\n109\n00:05:54.756 --> 00:05:58.430\nSo it is a file so\nwe need to cat that guy, cat environments.\n\n110\n00:05:59.730 --> 00:06:02.886\nThere we go.\nAnd you notice I already stuck a line in\n\n111\n00:06:02.886 --> 00:06:07.598\nthere and it's just Foo equals\nthis path that I have available.\n\n112\n00:06:07.598 --> 00:06:10.600\nIf I use that, it will always be there.\n\n113\n00:06:10.600 --> 00:06:17.512\nI can open a new bash, right, and I can\necho Foo and I will get it no matter what.\n\n114\n00:06:17.512 --> 00:06:21.432\nI didn't have to do any other thing\nbecause it's looking to that file to see\n\n115\n00:06:21.432 --> 00:06:24.609\nif there's any variables that\nthe users trying to export for\n\n116\n00:06:24.609 --> 00:06:26.870\ntheir entirety of their system.\n\n117\n00:06:26.870 --> 00:06:29.470\nSo you don't have to keep exporting\nstuff and un-exporting stuff.\n\n118\n00:06:29.470 --> 00:06:31.889\nSo, it makes things a whole lot neater and\ncleaner.\n\n119\n00:06:31.889 --> 00:06:35.641\nSo play around with that,\nuse that to your advantage,\n\n120\n00:06:35.641 --> 00:06:40.490\notherwise you can always stick with,\n.bashrc or .bash_profile.\n\n121\n00:06:40.490 --> 00:06:43.710\nThose will work as well,\ndo the same kind of thing for you.\n\n122\n00:06:43.710 --> 00:06:47.131\nBut for making sure those\nsubshells get that variable,\n\n123\n00:06:47.131 --> 00:06:51.221\nthat's the environment,\nthat might be a good way to go with that.\n\n124\n00:06:51.221 --> 00:06:53.748\n>> Now, Daniel,\nthat seems great that we understand\n\n125\n00:06:53.748 --> 00:06:57.685\nthat the operating system itself tends to\nmake these files, and they do work for\n\n126\n00:06:57.685 --> 00:06:59.589\nus to do what the system wants us to do.\n\n127\n00:06:59.589 --> 00:07:03.305\nAnd then we can modify a bit of those\nlines to help us to add in more variables.\n\n128\n00:07:03.305 --> 00:07:07.013\nBut is there a place for, let's say that\nI wanted to create my own custom script?\n\n129\n00:07:07.013 --> 00:07:07.723\n>> Yeah.\nYeah.\n\n130\n00:07:07.723 --> 00:07:10.541\nAnd obviously you can put\nthem in your startup,\n\n131\n00:07:10.541 --> 00:07:15.426\nyou can stick scripting language\nInto that .bashrc, that will work.\n\n132\n00:07:15.426 --> 00:07:18.763\nBut what if you wanna create separate\nscripts that do separate things and\n\n133\n00:07:18.763 --> 00:07:20.304\nkeep things neater and cleaner?\n\n134\n00:07:20.304 --> 00:07:21.931\nWhere can we put some scripts for that?\n\n135\n00:07:21.931 --> 00:07:24.224\nAnd it's in good old etc for us.\n\n136\n00:07:24.224 --> 00:07:25.344\nSo let's take a look here.\n\n137\n00:07:25.344 --> 00:07:29.752\nThere should be a directory\ncalled profile,\n\n138\n00:07:29.752 --> 00:07:34.420\nthat's it, let's see here, cd profile.d.\n\n139\n00:07:34.420 --> 00:07:36.895\nThere we go, lovely, it actually worked.\n\n140\n00:07:36.895 --> 00:07:37.650\n>> [LAUGH]\n>> It's not a file.\n\n141\n00:07:37.650 --> 00:07:41.508\nSo if I do an ls here, you'll see I have\nsome scripts that are already available.\n\n142\n00:07:41.508 --> 00:07:44.100\nThese are system-generated scripts.\n\n143\n00:07:44.100 --> 00:07:47.560\nBut if I wanted to, I could create my\nown scripts and stick them here and\n\n144\n00:07:47.560 --> 00:07:48.930\nthey'll run at startup as well.\n\n145\n00:07:48.930 --> 00:07:52.420\nSo if I wanted to add some startup\nfiles or some startup scripts,\n\n146\n00:07:52.420 --> 00:07:53.600\nthis is a good place to do it.\n\n147\n00:07:53.600 --> 00:07:55.548\nSo create your scripts,\nthrow them in there.\n\n148\n00:07:55.548 --> 00:07:59.022\nThere's other places, again,\nwe're talking Linux and Unix,\n\n149\n00:07:59.022 --> 00:08:01.700\n19 different ways to do\nthe exact same thing.\n\n150\n00:08:01.700 --> 00:08:03.598\nIt's just another bee in your bonnet,\n\n151\n00:08:03.598 --> 00:08:06.931\nanother trick in the bag for you to\nbe able to put a script somewhere and\n\n152\n00:08:06.931 --> 00:08:09.427\nmake it run when your system starts up or\nyou login.\n\n153\n00:08:09.427 --> 00:08:10.086\n>> All right.\n\n154\n00:08:10.086 --> 00:08:13.629\nDaniel, also we had talked a little bit\nearlier, actually in a previous episode,\n\n155\n00:08:13.629 --> 00:08:16.564\nthat when we create variables,\nthey are actually local variables,\n\n156\n00:08:16.564 --> 00:08:19.270\nwhich means that they're only\navailable inside of the shell.\n\n157\n00:08:19.270 --> 00:08:21.820\nBut you'd also said that I could\nactually run another shell and\n\n158\n00:08:21.820 --> 00:08:25.130\nmake them also appear there,\neven though they're actually local?\n\n159\n00:08:25.130 --> 00:08:26.370\n>> Yes, that's exactly right.\n\n160\n00:08:26.370 --> 00:08:29.580\nSo what happens,\nwe talked about that back in part one.\n\n161\n00:08:29.580 --> 00:08:30.220\nCheck that out.\n\n162\n00:08:30.220 --> 00:08:36.278\nIf I create a variable, it's local\nto the shell that I'm logged into.\n\n163\n00:08:36.278 --> 00:08:37.518\nThat's what we wanted to get down.\n\n164\n00:08:37.518 --> 00:08:42.170\nBut as we saw, it can be very\nunhandy if I open another shell.\n\n165\n00:08:42.170 --> 00:08:45.610\nOr If launch a sub-shell, or\nmaybe a script or something like that.\n\n166\n00:08:45.610 --> 00:08:47.970\nAnd it's not there, right?\n\n167\n00:08:47.970 --> 00:08:51.670\nBecause it's only local to the shell\nthat I created the variable in.\n\n168\n00:08:51.670 --> 00:08:52.579\nI need, to, some way, to say.\n\n169\n00:08:53.650 --> 00:08:57.940\nHello, all shells that I create, I want\nyou to have this variable available.\n\n170\n00:08:57.940 --> 00:09:02.079\nOne of the ways we saw we can actually do\nthat, sticking that in etc/environments,\n\n171\n00:09:02.079 --> 00:09:03.262\nthat'll work for you.\n\n172\n00:09:03.262 --> 00:09:06.322\nYou can add a line to .bashrc,\n\n173\n00:09:06.322 --> 00:09:11.400\nyou can declare it straight\nfrom the command line.\n\n174\n00:09:11.400 --> 00:09:12.600\nYou can do that,\n\n175\n00:09:12.600 --> 00:09:15.530\nI'll actually show you how to do it,\nand we're gonna use the export command.\n\n176\n00:09:15.530 --> 00:09:19.014\nIf you're careful and you were watchful,\nyou saw when I showed you the inside of\n\n177\n00:09:19.014 --> 00:09:22.718\nsome of those scripts, like inside of that\nenvironment, what did it have in there?\n\n178\n00:09:22.718 --> 00:09:26.560\nIt had, where did it go?\n\n179\n00:09:26.560 --> 00:09:27.230\nIt hid from me.\n\n180\n00:09:27.230 --> 00:09:29.540\nLet's do it again, let's show you here.\n\n181\n00:09:29.540 --> 00:09:31.540\nI'll, cat environment, let me back up.\n\n182\n00:09:31.540 --> 00:09:35.553\ncd, and cat environment.\n\n183\n00:09:38.543 --> 00:09:39.099\nThere we go.\n\n184\n00:09:39.099 --> 00:09:41.975\nYou'll notice there's a thing there,\nbut i didn't have to do anything.\n\n185\n00:09:41.975 --> 00:09:45.530\nIt just does it, that's nice, but\nwhat if I wanted to do it on the fly?\n\n186\n00:09:45.530 --> 00:09:48.450\nThat's what we're looking at right now,\nand it's export.\n\n187\n00:09:48.450 --> 00:09:53.530\nThe export command says take this variable\nand, I know it's launched in this shell,\n\n188\n00:09:53.530 --> 00:09:58.150\nbut now make it for\nevery shell that I launch underneath this.\n\n189\n00:09:58.150 --> 00:10:00.432\nSo you gotta think of it in a hierarchy,\nright.\n\n190\n00:10:00.432 --> 00:10:03.840\nThe shell that you actually\ncreate the variable in,\n\n191\n00:10:03.840 --> 00:10:06.091\nthat's the parent shell, okay.\n\n192\n00:10:06.091 --> 00:10:11.080\nEvery shell that's launched from there and\nso on and so forth is a childs shell.\n\n193\n00:10:11.080 --> 00:10:12.090\nOkay?\n\n194\n00:10:12.090 --> 00:10:16.680\nSo if I create a variable it\nwill be in my parent shell and\n\n195\n00:10:16.680 --> 00:10:19.810\nif I don't have any child shells yet\nthere's nothing to do.\n\n196\n00:10:19.810 --> 00:10:22.658\nBut if I create child shells,\nthat variable won't be in there,\n\n197\n00:10:22.658 --> 00:10:25.052\nwe will need export to put\nit into those child shells.\n\n198\n00:10:25.052 --> 00:10:27.759\nSo, let's do that,\nwe'll create a variable here.\n\n199\n00:10:27.759 --> 00:10:32.463\nLet me, just for the sake of making\nsure I don't do anything dumb,\n\n200\n00:10:32.463 --> 00:10:37.926\nget back to my home directory here,\nand we'll do var2=, we'll do hello.\n\n201\n00:10:37.926 --> 00:10:39.556\nIt's just easier to do.\n\n202\n00:10:39.556 --> 00:10:41.440\nAnd now I've created a variable.\n\n203\n00:10:41.440 --> 00:10:43.850\nIt is local to this shell.\n\n204\n00:10:43.850 --> 00:10:45.370\nSo what do I do?\n\n205\n00:10:45.370 --> 00:10:46.220\nI export.\n\n206\n00:10:46.220 --> 00:10:47.000\nE-x-p-o-r-t.\n\n207\n00:10:47.000 --> 00:10:49.480\nAnd then just say VAR2.\n\n208\n00:10:49.480 --> 00:10:51.340\nEasy peasy.\n\n209\n00:10:51.340 --> 00:10:52.170\nNothing to it.\n\n210\n00:10:52.170 --> 00:10:55.245\nNow, when I check my other shells,\n\n211\n00:10:55.245 --> 00:10:59.560\nthere should be a little\naction going on in there.\n\n212\n00:10:59.560 --> 00:11:06.030\nSo let's see here,\nif I echo VAR2, I get hello.\n\n213\n00:11:06.030 --> 00:11:08.590\nThat's good.\nNow let's see if it actually worked with\n\n214\n00:11:08.590 --> 00:11:11.270\nthat echo, or the export command.\n\n215\n00:11:11.270 --> 00:11:15.390\nI'll launch another bash shell, and echo,\n\n216\n00:11:15.390 --> 00:11:20.250\nfingers crossed it was VAR2,\nand there it is.\n\n217\n00:11:20.250 --> 00:11:24.746\nSo we've used the export command to make\nsure that every shell that I launch,\n\n218\n00:11:24.746 --> 00:11:26.751\nstarts getting each one of those,\n\n219\n00:11:26.751 --> 00:11:31.055\nif I launched another one it should do\nit as well, and so on, and so forth.\n\n220\n00:11:31.055 --> 00:11:34.160\nI'm not gonna do that tediousness.\n\n221\n00:11:34.160 --> 00:11:37.838\nBut every shell that I launch from my\nparent shell should have that available\n\n222\n00:11:37.838 --> 00:11:39.974\nto it and\nthat's what we want a lot of times.\n\n223\n00:11:39.974 --> 00:11:44.342\nIf I want to make that permanent,\nI'm gonna have to edit one of those files,\n\n224\n00:11:44.342 --> 00:11:48.438\nbashrc, bash_profile, or\nenvironments, to make that permanent,\n\n225\n00:11:48.438 --> 00:11:53.107\nbut if I just need to do it on the fly,\nexport command, that's gonna be your guy.\n\n226\n00:11:53.107 --> 00:11:55.846\n>> Now Daniel,\neverything that we've done so\n\n227\n00:11:55.846 --> 00:12:00.744\nfar has always been like VAR1 equals one\nor two or hello or anything like that.\n\n228\n00:12:00.744 --> 00:12:04.691\nIt seems like I can do that\nwith one piece of information,\n\n229\n00:12:04.691 --> 00:12:09.299\nthen I believe there's a way we can\nactually take an environment or\n\n230\n00:12:09.299 --> 00:12:15.190\nany type of variable, and actually make\nmultiple choices to what we call an array.\n\n231\n00:12:15.190 --> 00:12:16.340\n>> Yes, exactly.\n\n232\n00:12:16.340 --> 00:12:17.060\nI love arrays.\n\n233\n00:12:17.060 --> 00:12:18.080\nThey're so cool,\n\n234\n00:12:18.080 --> 00:12:21.470\nbecause I'm really now going into that\nwhole Santa's gift back kind of idea.\n\n235\n00:12:21.470 --> 00:12:25.220\nI'm not just gonna hold one value,\nI'm gonna hold multiple values.\n\n236\n00:12:25.220 --> 00:12:28.920\nAnd that way I can call one value or\nanother, depending on what I wanna do.\n\n237\n00:12:28.920 --> 00:12:32.820\nNow you're starting to see the value in\nusing variables inside of your scripts.\n\n238\n00:12:32.820 --> 00:12:36.910\nThey make it easy for you to say,\nhere's a value, here's a value,\n\n239\n00:12:36.910 --> 00:12:39.280\nhere's a value and reference those values.\n\n240\n00:12:39.280 --> 00:12:40.090\nSo how do we do that?\n\n241\n00:12:40.090 --> 00:12:43.590\nLike Ronnie said, this is called an array,\nand that makes sense,\n\n242\n00:12:43.590 --> 00:12:48.340\ncuz we're having an array of different\ntypes of values inside of a variable, and\n\n243\n00:12:48.340 --> 00:12:50.120\nI just need to define what those are.\n\n244\n00:12:50.120 --> 00:12:51.880\nBizarre.\nAnd it's almost as easy as it was for\n\n245\n00:12:51.880 --> 00:12:54.590\nus to create the original variable.\n\n246\n00:12:54.590 --> 00:12:55.260\nVery simple.\n\n247\n00:12:55.260 --> 00:12:59.880\nLet me make sure that I'm logged\nout of all my shells here and\n\n248\n00:12:59.880 --> 00:13:01.230\nI will clear the screen.\n\n249\n00:13:03.330 --> 00:13:04.480\nAnd let's see here.\n\n250\n00:13:04.480 --> 00:13:11.150\nAll we have to do is we'll make VAR3, will\nsay equals, and then open parentheses.\n\n251\n00:13:11.150 --> 00:13:12.490\nRemember no space characters here.\n\n252\n00:13:12.490 --> 00:13:16.340\nIt all has to be, well, no space\ncharacters up until we start separating\n\n253\n00:13:16.340 --> 00:13:22.780\nthe different values, and\nthat's where space does come in handy.\n\n254\n00:13:22.780 --> 00:13:27.910\nSo I'm gonna say,\napples oranges bananas, B-A-N-A-N-A-S.\n\n255\n00:13:27.910 --> 00:13:30.370\nThat's right.\nAnd then kiwi, and grapes.\n\n256\n00:13:30.370 --> 00:13:36.940\nSo this is a little demo I've set up for\nus here.\n\n257\n00:13:36.940 --> 00:13:40.580\nI've named my variable, it is var3 Equals,\n\n258\n00:13:40.580 --> 00:13:43.890\nthen the open parenthesis let's\nit know that this is an array.\n\n259\n00:13:43.890 --> 00:13:46.720\nSo, you start with the open parenthesis,\nand\n\n260\n00:13:46.720 --> 00:13:51.320\nthen you immediately start\nwith your first value.\n\n261\n00:13:51.320 --> 00:13:54.220\nOnce you're done typing\nin that first value,\n\n262\n00:13:54.220 --> 00:13:58.730\nspace and then the next value,\nspace, the next value and so on.\n\n263\n00:13:58.730 --> 00:14:03.080\nWhen you're done, you close that\narray with the other parenthesis.\n\n264\n00:14:03.080 --> 00:14:04.520\nThe open and closing parenthesis.\n\n265\n00:14:04.520 --> 00:14:07.080\nSo Now that we have that set,\nI hit Return.\n\n266\n00:14:08.210 --> 00:14:10.630\nNo errors, that's always a good idea,\nand what do we do now?\n\n267\n00:14:10.630 --> 00:14:14.280\nWell, it works just like any other\nvariable, we can echo it, right?\n\n268\n00:14:14.280 --> 00:14:17.220\nSo, echo, VAR3, and hit enter.\n\n269\n00:14:17.220 --> 00:14:18.820\nNow that's interesting.\n\n270\n00:14:18.820 --> 00:14:21.450\nWe get apples back.\n\n271\n00:14:21.450 --> 00:14:26.580\nAnd the apples is in the array, but\nit's not the entirety of the array,\n\n272\n00:14:26.580 --> 00:14:28.910\nwhat's going on, right?\n\n273\n00:14:28.910 --> 00:14:32.040\nWell, you've gotta remember an aray\nis saying I have multiple values.\n\n274\n00:14:32.040 --> 00:14:37.390\nAnd you didn't define which\nvalue you wanted me to return,\n\n275\n00:14:37.390 --> 00:14:43.870\nso I'm gonna go with the default, which\nis whatever is in the first position.\n\n276\n00:14:43.870 --> 00:14:45.620\nSo it returned apples and\nthat's what we get.\n\n277\n00:14:45.620 --> 00:14:47.580\nSo okay, I've got an array.\n\n278\n00:14:47.580 --> 00:14:48.860\nI wanna use the array.\n\n279\n00:14:48.860 --> 00:14:51.250\nHow do I say return\nbananas instead of apples?\n\n280\n00:14:51.250 --> 00:14:53.230\nWell what I need to do is say,\n\n281\n00:14:53.230 --> 00:14:58.320\neach one of these variable values\nhas a numeric place holder, right?\n\n282\n00:14:58.320 --> 00:15:00.569\nIt has a numeric situation.\n\n283\n00:15:00.569 --> 00:15:03.024\nSituation is apples.\n\n284\n00:15:03.024 --> 00:15:04.750\nPosition, yep.\n\n285\n00:15:04.750 --> 00:15:08.900\n>> Position number two oranges,\nposition number three is gonna be bananas,\n\n286\n00:15:08.900 --> 00:15:10.440\nso on and so forth.\n\n287\n00:15:10.440 --> 00:15:13.640\nSo how do I reference\nwhich position their in?\n\n288\n00:15:13.640 --> 00:15:15.140\nPretty easy, not a problem.\n\n289\n00:15:15.140 --> 00:15:19.560\nWe will do echo, and let's see here,\n\n290\n00:15:19.560 --> 00:15:24.640\nwe will do the dollar sign, again calling\nour variable, referencing our variable.\n\n291\n00:15:24.640 --> 00:15:26.290\nThen we're gonna use a curly brace.\n\n292\n00:15:26.290 --> 00:15:28.320\nOkay, so open curly brace,\n\n293\n00:15:28.320 --> 00:15:32.260\nlittle crazy looking squiggly guy that\ngives you blocked parameters, right?\n\n294\n00:15:32.260 --> 00:15:37.860\nAnd now we're going to say var,\nbecause that's our,\n\n295\n00:15:37.860 --> 00:15:43.182\nvar 3, that's our variable,\nand then open bracket, right,\n\n296\n00:15:43.182 --> 00:15:48.530\nthe squared guy, a square bracket,\nand what position we want to look at.\n\n297\n00:15:48.530 --> 00:15:52.290\nSo if I wanted to see position three,\nI would put position three,\n\n298\n00:15:52.290 --> 00:15:54.370\nclose that out, and\nthen close my curly brace, right.\n\n299\n00:15:54.370 --> 00:15:59.150\nThis should give us that\nwhat we're looking for.\n\n300\n00:15:59.150 --> 00:16:03.340\nAnd look, we get kiwi,\ncuz obviously I can't count very well.\n\n301\n00:16:03.340 --> 00:16:06.050\nSo yeah, we're giving,\nlet's see here, position three.\n\n302\n00:16:06.050 --> 00:16:08.320\nI see what it's doing.\n\n303\n00:16:08.320 --> 00:16:12.270\nWe're talking computers here,\nwe don't count like people do.\n\n304\n00:16:12.270 --> 00:16:14.480\nPosition one is actually zero, right?\n\n305\n00:16:14.480 --> 00:16:18.840\nYour computers usually normally\nstart counting from zero so\n\n306\n00:16:18.840 --> 00:16:20.760\nzero, one, two, three, and so on.\n\n307\n00:16:20.760 --> 00:16:23.140\nA little addendum there to\nwhat we're talking about.\n\n308\n00:16:23.140 --> 00:16:26.650\nDon't forget that computers start\ncounting from zero as I apparently did.\n\n309\n00:16:26.650 --> 00:16:27.270\nBut it did, right?\n\n310\n00:16:27.270 --> 00:16:29.760\nIt gave us the output.\n\n311\n00:16:29.760 --> 00:16:34.600\nIt gave us position number three,\nwhich is really position number four and\n\n312\n00:16:34.600 --> 00:16:38.360\nit was so,\nnow I can start referencing the array and\n\n313\n00:16:38.360 --> 00:16:41.680\nthe position in that array\nwhen i need them to.\n\n314\n00:16:41.680 --> 00:16:42.990\nSo a lot of cool stuff there.\n\n315\n00:16:42.990 --> 00:16:47.350\nBut what if I wanted to see what's\nin the entirety of the array?\n\n316\n00:16:47.350 --> 00:16:51.060\nI'm like man, I made this array six months\nago and it's in a script somewhere.\n\n317\n00:16:51.060 --> 00:16:52.040\nI know it's in there, but\n\n318\n00:16:52.040 --> 00:16:56.310\nI just want to see what's inside\nof the array we can do that too.\n\n319\n00:16:57.470 --> 00:17:03.660\nIf we echo and do the exact same kind\nof idea, and var 3 and this time\n\n320\n00:17:03.660 --> 00:17:07.190\nwhen we open our brace, instead of giving\nit no position or whatever position,\n\n321\n00:17:07.190 --> 00:17:12.880\nwe give it a star, kind of a wild card\nas it were and then close it out.\n\n322\n00:17:12.880 --> 00:17:18.840\nIt should show us everything that's in\nthe area, and it did so that's nice.\n\n323\n00:17:18.840 --> 00:17:22.540\nNow we're able to look into the area and\nsee every value that's there, and\n\n324\n00:17:22.540 --> 00:17:27.460\nthen go okay position zero is going to be\napples, one's oranges, bananas, so on.\n\n325\n00:17:27.460 --> 00:17:28.760\nNow I get my reference back.\n\n326\n00:17:28.760 --> 00:17:31.430\nLot of times that can come in\nreal handy when you're trying\n\n327\n00:17:31.430 --> 00:17:33.800\nto figure out exactly which\nposition you want to reference.\n\n328\n00:17:33.800 --> 00:17:35.980\nSo it's a nice little trick.\n\n329\n00:17:35.980 --> 00:17:39.840\n>> Now, Daniel, we actually have\na question in our chat room here.\n\n330\n00:17:39.840 --> 00:17:45.930\nAvian would like to know, why in the world\nwould we ever choose to open the subshell.\n\n331\n00:17:45.930 --> 00:17:48.330\n>> Yes.\nWell, normally when you call a script into\n\n332\n00:17:48.330 --> 00:17:49.410\norder, it does open a subshell.\n\n333\n00:17:49.410 --> 00:17:53.050\nLike if any kind of commands that you\nthrow at it it'll actually create that\n\n334\n00:17:53.050 --> 00:17:56.350\nsubshell, do that and\nthen return you back to your shell.\n\n335\n00:17:56.350 --> 00:17:57.710\nDoes it a lot in scripting actually.\n\n336\n00:17:57.710 --> 00:18:00.180\nYou got to remember\nsubshells are nice because,\n\n337\n00:18:00.180 --> 00:18:03.250\nI don't want it to take\nover the shell that I'm in.\n\n338\n00:18:03.250 --> 00:18:06.160\nSo if I use like, if you saw\nthe other show that we talked about,\n\n339\n00:18:06.160 --> 00:18:10.360\nwhere we can launch scripts or\nexecutables in the background.\n\n340\n00:18:10.360 --> 00:18:12.670\nSo if I want to run\na script in the background,\n\n341\n00:18:12.670 --> 00:18:15.180\nit basically creates a subshell.\n\n342\n00:18:15.180 --> 00:18:19.050\nDoes whatever it's doing and I can still\nhave my terminal it's not doing that.\n\n343\n00:18:19.050 --> 00:18:21.210\nWe see that a lot with start up\nscripts they create subshells,\n\n344\n00:18:21.210 --> 00:18:24.030\nprograms they do the same thing,\n\n345\n00:18:24.030 --> 00:18:27.610\nwhere they're doing stuff that we don't\nsee because they're in a subshell.\n\n346\n00:18:27.610 --> 00:18:31.200\nSo that's where subshells\nwould come in handy.\n\n347\n00:18:31.200 --> 00:18:34.560\nOther than that,\nyou just might want to do some work and\n\n348\n00:18:34.560 --> 00:18:36.890\nmove around and\nthen go back to the shell you were in.\n\n349\n00:18:36.890 --> 00:18:42.090\nIt's basically the same idea of, like I\nhave on my graphical environment here,\n\n350\n00:18:42.090 --> 00:18:47.550\nI can go to file and then hit new tab, and\nhave this running, and make it go like\n\n351\n00:18:47.550 --> 00:18:52.910\nthis and do work here and\nthen jump over to my other tab.\n\n352\n00:18:52.910 --> 00:18:54.720\nIt's the same basic idea.\n\n353\n00:18:54.720 --> 00:18:57.850\nLiterally, that is another shell,\nit's just not launched from here.\n\n354\n00:18:57.850 --> 00:19:01.220\nIf I did dash,\nit would launch another sub shell,\n\n355\n00:19:01.220 --> 00:19:04.890\nor launch another shell, which is the sub\nshell or parent-child relationship.\n\n356\n00:19:04.890 --> 00:19:10.290\nSo, that would be the real\nreason that you wanna do that.\n\n357\n00:19:10.290 --> 00:19:13.370\n>> Now Daniel, getting back to the idea\nof the arrays a little bit here.\n\n358\n00:19:13.370 --> 00:19:15.010\nI know that I can probably go back in and\n\n359\n00:19:15.010 --> 00:19:19.020\nchange the array value like we did\na little bit earlier with the variables.\n\n360\n00:19:19.020 --> 00:19:23.090\nBut that seems like it can\nactually become fairly hairy.\n\n361\n00:19:23.090 --> 00:19:25.130\nIs there a way I can train just\na single value inside an array?\n\n362\n00:19:25.130 --> 00:19:26.930\n>> Yeah, it's really not too difficult.\n\n363\n00:19:26.930 --> 00:19:30.130\nSame kind of structure that we've\nbeen used to, so very, very simple.\n\n364\n00:19:30.130 --> 00:19:33.390\nSee how that's done, let's say that\nwe wanted to change, let's see here,\n\n365\n00:19:33.390 --> 00:19:34.620\nhow about value number two.\n\n366\n00:19:34.620 --> 00:19:37.990\nWe'll change,\nI guess that's bananas into strawberries.\n\n367\n00:19:37.990 --> 00:19:39.320\nRight?\nThat's what I want to do.\n\n368\n00:19:39.320 --> 00:19:41.090\nI want to say you know what?\n\n369\n00:19:41.090 --> 00:19:44.658\nBananas isn't working in this array,\nI want to make it strawberries,\n\n370\n00:19:44.658 --> 00:19:48.720\ncuz that's going to work\na whole lot better.\n\n371\n00:19:48.720 --> 00:19:49.390\nHow do we do that?\n\n372\n00:19:49.390 --> 00:19:53.401\nAll right, well,\nyou jump back into, let's see here,\n\n373\n00:19:53.401 --> 00:19:58.030\nvar one equals, I'm sorry var 1 and\nthen open braces and\n\n374\n00:19:58.030 --> 00:20:01.750\nthen what position you\nactually want to change.\n\n375\n00:20:01.750 --> 00:20:05.890\nSo if I wanted to change bananas,\nI would change position two,\n\n376\n00:20:05.890 --> 00:20:09.110\nclose my bracket down right,\nand then I would say it equals.\n\n377\n00:20:09.110 --> 00:20:11.740\nSo you can see it's just like\nwhen we're creating a variable,\n\n378\n00:20:11.740 --> 00:20:17.090\na regular variable, except this\ntime that variable already exists.\n\n379\n00:20:17.090 --> 00:20:21.367\nAnd what happens if I just\nrename if I just change the,\n\n380\n00:20:21.367 --> 00:20:26.064\nif I did VAR1, or I'm sorry VAR3 is\nwhat we want, there we go, VAR3.\n\n381\n00:20:26.064 --> 00:20:30.137\nWatch Lowrie's syntax he'll get it\nwrong every time if I'm not careful.\n\n382\n00:20:30.137 --> 00:20:34.919\nIf I just did VAR3 equals\nstrawberries then it will change\n\n383\n00:20:34.919 --> 00:20:38.540\nthe entire thing, that array will be gone.\n\n384\n00:20:38.540 --> 00:20:39.098\n>> Yeah it wipes out.\n\n385\n00:20:39.098 --> 00:20:39.662\nIt will wipe it out.\n\n386\n00:20:39.662 --> 00:20:40.881\n>> Right that's not what we want.\n\n387\n00:20:40.881 --> 00:20:42.755\nWe wanna change that one value.\n\n388\n00:20:42.755 --> 00:20:47.483\nSo I gotta tell it what value it is and\nI do that with the braces and\n\n389\n00:20:47.483 --> 00:20:49.546\nwhat position you're in.\n\n390\n00:20:49.546 --> 00:20:51.252\nSo that will be 2.\n\n391\n00:20:51.252 --> 00:20:52.773\nSay goodbye bananas.\n\n392\n00:20:52.773 --> 00:20:54.247\nClose that out.\n\n393\n00:20:54.247 --> 00:20:57.232\nAlso name strawberries.\n\n394\n00:20:57.232 --> 00:20:58.068\nHit Enter.\n\n395\n00:20:58.068 --> 00:21:00.504\nAnd now, when we do the echo,\n\n396\n00:21:00.504 --> 00:21:05.486\nyou will see that has changed\nfrom bananas to strawberries.\n\n397\n00:21:05.486 --> 00:21:08.686\nAnd now, we can work with the data\nthat's inside of an array\n\n398\n00:21:08.686 --> 00:21:11.379\nwithout completely\nrecreating it from scratch.\n\n399\n00:21:11.379 --> 00:21:14.097\nSo that's a nice thing that\nwe have available to us\n\n400\n00:21:14.097 --> 00:21:14.716\n>> All right, so\n\n401\n00:21:14.716 --> 00:21:17.920\nwe're actually starting to seize now\nsome of the power of the variables,\n\n402\n00:21:17.920 --> 00:21:19.482\nespecially by using those arrays.\n\n403\n00:21:19.482 --> 00:21:22.396\nBeing able to at least set them up is,\nright, a skill that we have to have,\n\n404\n00:21:22.396 --> 00:21:24.230\neven if we're only\nreturning a single value.\n\n405\n00:21:24.230 --> 00:21:26.692\nBut arrays are where we're\ngonna see more power behind it.\n\n406\n00:21:26.692 --> 00:21:29.778\nThe other thing that can also happen\nwith variables though, Daniel,\n\n407\n00:21:29.778 --> 00:21:31.881\nis that after a while,\nwe just quit using them.\n\n408\n00:21:31.881 --> 00:21:33.805\nAnd when we leave them in our system,\nwell,\n\n409\n00:21:33.805 --> 00:21:36.197\nthat probably just doesn't\nreally help anything, so\n\n410\n00:21:36.197 --> 00:21:39.067\nis there a way to just remove them and\nnot have to worry about them?\n\n411\n00:21:39.067 --> 00:21:42.480\n>> Yeah, it happens from time to time,\nyou're like, all right, this variable,\n\n412\n00:21:42.480 --> 00:21:44.399\nI'm done with it, I don't need it anymore.\n\n413\n00:21:44.399 --> 00:21:45.573\nI just need to get rid of it.\n\n414\n00:21:45.573 --> 00:21:46.281\nHow do I do that?\n\n415\n00:21:46.281 --> 00:21:48.801\nAnd we're gonna basically unset them,\nright?\n\n416\n00:21:48.801 --> 00:21:51.204\nSo we saw the set command\nshows us all these variables.\n\n417\n00:21:51.204 --> 00:21:55.916\nWe can use unsets or,\nunset's usually the best way to go.\n\n418\n00:21:55.916 --> 00:22:02.612\nI think you can use the print end, or not\nprint end, but the export command as well.\n\n419\n00:22:02.612 --> 00:22:03.878\nI think there's a negation there.\n\n420\n00:22:03.878 --> 00:22:08.423\nBut I find unset to be [LAUGH] very,\nvery much helpful for this particular-\n\n421\n00:22:08.423 --> 00:22:09.061\n>> And intuitive.\n\n422\n00:22:09.061 --> 00:22:09.618\n>> That's right.\n\n423\n00:22:09.618 --> 00:22:10.175\nAnd intuitive.\n\n424\n00:22:10.175 --> 00:22:12.689\n>> [LAUGH]\n>> We are unsetting that variable from\n\n425\n00:22:12.689 --> 00:22:13.483\nexistence.\n\n426\n00:22:13.483 --> 00:22:14.517\nSo let's do that.\n\n427\n00:22:14.517 --> 00:22:17.302\nLet's create ourselves\na new variable here.\n\n428\n00:22:17.302 --> 00:22:24.801\nWe'll call it VAR4, say VAR4= whatever.\n\n429\n00:22:24.801 --> 00:22:25.683\nThere we go.\n\n430\n00:22:25.683 --> 00:22:26.506\nGreat.\n\n431\n00:22:26.506 --> 00:22:29.328\nVAR4's around, it's doing its thing,\nit's on, all right.\n\n432\n00:22:29.328 --> 00:22:31.441\nVAR4, I'm done with you,\nI don't need you anymore.\n\n433\n00:22:31.441 --> 00:22:32.009\nWhat do I do?\n\n434\n00:22:32.009 --> 00:22:35.866\nWell, I just type in the unset VAR4, and\n\n435\n00:22:35.866 --> 00:22:40.286\nthat should do it,\nthat should be the end of it.\n\n436\n00:22:40.286 --> 00:22:42.318\nVery simple, not a lot to it.\n\n437\n00:22:42.318 --> 00:22:44.559\nJust gotta remember that's it.\n\n438\n00:22:44.559 --> 00:22:51.641\nAnd now if I echo $VAR4, I get nothing.\n\n439\n00:22:51.641 --> 00:22:54.321\nWhereas before, it would have said,\nwhatever, right?\n\n440\n00:22:54.321 --> 00:22:57.808\nVery, very pretentious little\nvariable we created there.\n\n441\n00:22:57.808 --> 00:22:58.757\n[LAUGH]\n>> Now Daniel,\n\n442\n00:22:58.757 --> 00:23:02.182\nthere's also a possibility though, let's\nsay we have that array value that we were\n\n443\n00:23:02.182 --> 00:23:05.574\ntalking about a little bit earlier, and\nthose are the products that I'm selling.\n\n444\n00:23:05.574 --> 00:23:10.234\nWhat if I no longer need to sell like,\nkiwis, anymore, but\n\n445\n00:23:10.234 --> 00:23:13.042\nI still need the rest of that array?\n\n446\n00:23:13.042 --> 00:23:15.570\nI don't have a clue what I'd have to do to\nactually get rid of something like that.\n\n447\n00:23:15.570 --> 00:23:16.268\nIs there a way to do that?\n\n448\n00:23:16.268 --> 00:23:16.831\n>> Yeah, yeah.\n\n449\n00:23:16.831 --> 00:23:20.130\nWe can jump right into an array and\nsay how many kiwis and\n\n450\n00:23:20.130 --> 00:23:24.156\nmore that's not on my plate so\nlet's remove that out of the array.\n\n451\n00:23:24.156 --> 00:23:28.824\nIt's gonna harken right back to what we\ndid before when we reset a variable inside\n\n452\n00:23:28.824 --> 00:23:29.589\nof an array.\n\n453\n00:23:29.589 --> 00:23:33.119\nSo same kind of thing, and we're\ngonna use the unset command to do it.\n\n454\n00:23:33.119 --> 00:23:39.921\nSo we'll just do unset, and\nthen we'll say that was VAR3.\n\n455\n00:23:39.921 --> 00:23:45.703\nOpen your brace, and tell it what\nposition you want, so I guess that's 3.\n\n456\n00:23:45.703 --> 00:23:47.908\nAnd close it out.\n\n457\n00:23:47.908 --> 00:23:48.524\nThere you go.\n\n458\n00:23:48.524 --> 00:23:52.118\nAnd now if we check VAR3, where's that?\n\n459\n00:23:52.118 --> 00:23:53.616\nThere we go, echo VAR3.\n\n460\n00:23:53.616 --> 00:23:55.480\nYou'll notice that key visa's now gone.\n\n461\n00:23:55.480 --> 00:23:58.430\nWe only removed that one string,\nthat one value,\n\n462\n00:23:58.430 --> 00:24:00.971\ninside the array that we no longer needed.\n\n463\n00:24:00.971 --> 00:24:03.014\nSo that's pretty easy as well.\n\n464\n00:24:03.014 --> 00:24:06.370\n>> So being able to work with variables,\nwe're starting to see again.\n\n465\n00:24:06.370 --> 00:24:09.795\nNow this is where, if you're starting\nto run program in your head and\n\n466\n00:24:09.795 --> 00:24:13.339\nbasic program, you're starting to\nsee where using these variables,\n\n467\n00:24:13.339 --> 00:24:17.000\nbeing able to actually set what you\nwant to gives you essentially, well,\n\n468\n00:24:17.000 --> 00:24:18.859\nanother way that you can reference.\n\n469\n00:24:18.859 --> 00:24:22.815\nLet's say, an entire path that's really\nlong by setting a variable in its place\n\n470\n00:24:22.815 --> 00:24:24.397\nand that will also help out too.\n\n471\n00:24:24.397 --> 00:24:27.207\nBut the other way that we can do this,\nDaniel though,\n\n472\n00:24:27.207 --> 00:24:29.272\nis the power of using aliases, right.\n\n473\n00:24:29.272 --> 00:24:31.528\n>> Yeah.\nAliases are awesome, this is,\n\n474\n00:24:31.528 --> 00:24:34.409\neven if you're not into scripting or\nwhatever,\n\n475\n00:24:34.409 --> 00:24:38.481\naliases is something that you wanna\nbe able to do as just a Linux user or\n\n476\n00:24:38.481 --> 00:24:42.725\nUNIX user, to be able to say,\nI always make this typographical error.\n\n477\n00:24:42.725 --> 00:24:46.865\nOr, man, I wish I didn't have to type\nout this whole command every time\n\n478\n00:24:46.865 --> 00:24:51.154\nthat I want it, cuz I always put these\narguments along with that command.\n\n479\n00:24:51.154 --> 00:24:53.035\nWhat can I do to make my\nlife a little bit easier?\n\n480\n00:24:53.035 --> 00:24:57.538\nAnd it kinda goes along with the idea\nof variables, because you're\n\n481\n00:24:57.538 --> 00:25:03.405\nchanging the content, as it were,\na little bit, in a certain way anyway.\n\n482\n00:25:03.405 --> 00:25:05.065\nSo what do I mean by that?\n\n483\n00:25:05.065 --> 00:25:05.740\nLet's take a look.\n\n484\n00:25:05.740 --> 00:25:06.936\nI'm gonna clear the screen.\n\n485\n00:25:06.936 --> 00:25:09.199\nAnd if I just type in the word alias,\n\n486\n00:25:09.199 --> 00:25:12.978\nit will actually show me\nthe aliases that are on the system.\n\n487\n00:25:12.978 --> 00:25:18.225\nAnd you can see what it's\ndoing is it's saying if I run.\n\n488\n00:25:18.225 --> 00:25:20.583\nIf I have this alias,\nI create an alias for.\n\n489\n00:25:20.583 --> 00:25:22.789\nLet's do one,\nls makes a little more sense.\n\n490\n00:25:22.789 --> 00:25:27.214\nNotice down here, ls,\nit defines ls as an alias.\n\n491\n00:25:27.214 --> 00:25:30.628\nWell, ls already exists, so\nhow are you aliasing ls?\n\n492\n00:25:30.628 --> 00:25:34.131\nWell, what I'm saying\nis when I type in ls,\n\n493\n00:25:34.131 --> 00:25:38.124\nI want you to interpret\nit as this command, okay?\n\n494\n00:25:38.124 --> 00:25:44.114\nSo, that's what it's doing, as you\ncan see, alias ls='ls --color=auto'.\n\n495\n00:25:44.114 --> 00:25:48.884\nSo it's throwing that extra\nparameter along with the ls command,\n\n496\n00:25:48.884 --> 00:25:51.533\nand all I had to do was type ls to do it.\n\n497\n00:25:51.533 --> 00:25:55.596\nSo if that alias wasn't there and\nI typed in ls, I would get no color.\n\n498\n00:25:55.596 --> 00:25:59.893\nThere would be none of this cool blues and\ngreens and whites and stuff, and\n\n499\n00:25:59.893 --> 00:26:03.232\nI see sim links and directories,\nand executable files.\n\n500\n00:26:03.232 --> 00:26:06.088\nThat wouldn't be there,\nit would just be black and white text, and\n\n501\n00:26:06.088 --> 00:26:09.185\nI would have to do long\nformat to see what that was.\n\n502\n00:26:09.185 --> 00:26:11.575\nSo, that's really cool, I like that.\n\n503\n00:26:11.575 --> 00:26:12.112\nRight?\n\n504\n00:26:12.112 --> 00:26:13.435\nHow do I make that happen?\n\n505\n00:26:13.435 --> 00:26:16.919\nWell, we use the alias command to do it.\n\n506\n00:26:16.919 --> 00:26:23.089\nAll I would have to do is say, let's see\nhere, let's create another alias for\n\n507\n00:26:23.089 --> 00:26:28.433\nls, and we'll call it, we'll say,\nalias la, we'll call it la.\n\n508\n00:26:28.433 --> 00:26:34.602\nWe'll say it equals ls', and you'll\nnotice I did put a quotation mark there,\n\n509\n00:26:34.602 --> 00:26:39.128\nbecause I'm defining a certain string and\nit needs that.\n\n510\n00:26:39.128 --> 00:26:43.384\nSo for this syntax, you've gotta have at\nleast a single quotation if not a double\n\n511\n00:26:43.384 --> 00:26:46.022\nquotation as well, but\neither of them will work.\n\n512\n00:26:46.022 --> 00:26:49.424\nSo just do ls -a'.\n\n513\n00:26:49.424 --> 00:26:53.944\nAnd then I close my quotation,\nand I hit Return,\n\n514\n00:26:53.944 --> 00:26:57.701\nand now if I do la, la, it does an ls -a.\n\n515\n00:26:57.701 --> 00:27:01.504\nSo I don't have to throw those\nextra parts of the command there,\n\n516\n00:27:01.504 --> 00:27:06.223\nI've made an alias for it, and it serves\nme a whole lot better, it makes my job,\n\n517\n00:27:06.223 --> 00:27:08.210\ncuz we're doing a lot of typing.\n\n518\n00:27:08.210 --> 00:27:12.248\nYou're in a mixed system, doing a lot\nof tickety, tickety, tickety, right?\n\n519\n00:27:12.248 --> 00:27:14.595\nSo the less I can do, the better.\n\n520\n00:27:14.595 --> 00:27:18.348\nThe faster I can do it,\nthe more efficient I'm going to be and\n\n521\n00:27:18.348 --> 00:27:21.232\nthat's why aliases are very, very popular.\n\n522\n00:27:21.232 --> 00:27:24.709\n>> All right, Daniel, that sounds\nlike a lot of information again and\n\n523\n00:27:24.709 --> 00:27:28.918\nworking with variables is one of the big\nparts that's really gonna help us out when\n\n524\n00:27:28.918 --> 00:27:30.936\nit comes down to a lot of the scripting.\n\n525\n00:27:30.936 --> 00:27:34.580\nAnd one that actually gets very long, we\nwanna actually reduce as much as we can.\n\n526\n00:27:34.580 --> 00:27:38.414\nSo, being able to actually take these\nepisodes that we've actually done on,\n\n527\n00:27:38.414 --> 00:27:41.336\nwell, variables is really gonna\nbe helpful in the future.\n\n528\n00:27:41.336 --> 00:27:46.427\nDaniel, any last words on variables before\nwe get started into some scripting?\n\n529\n00:27:46.427 --> 00:27:48.122\n>> Into some more good stuff?\n\n530\n00:27:48.122 --> 00:27:49.830\nNo, you just gotta get\ncomfortable with them.\n\n531\n00:27:49.830 --> 00:27:51.744\nObviously, they're not that difficult.\n\n532\n00:27:51.744 --> 00:27:54.309\nThe really difficult\npart is making sure that\n\n533\n00:27:54.309 --> 00:27:56.811\nthey work inside the shell that you're in.\n\n534\n00:27:56.811 --> 00:28:01.350\nAnd then knowing which one of\nthose files to dot dash RC,\n\n535\n00:28:01.350 --> 00:28:04.160\nthe dot dash underscore profile.\n\n536\n00:28:04.160 --> 00:28:07.086\nAnd those Etsy directories,\nwhich you wanna be careful about.\n\n537\n00:28:07.086 --> 00:28:08.618\nWhich one do you wanna put that in?\n\n538\n00:28:08.618 --> 00:28:13.404\nObviously dot dash RC and dot dash\nunderscore profile is going to be your\n\n539\n00:28:13.404 --> 00:28:17.008\ntwo main guys that you create stuff in and\nguess what?\n\n540\n00:28:17.008 --> 00:28:19.330\nYou can set aliases in there so\nthey're permanent.\n\n541\n00:28:19.330 --> 00:28:22.047\nBecause if I create an alias here,\nI log out of the shell.\n\n542\n00:28:22.047 --> 00:28:23.463\nThat alias goes away.\n\n543\n00:28:23.463 --> 00:28:26.447\nOr if I wanted to un-alias something,\nI could do that as well.\n\n544\n00:28:26.447 --> 00:28:29.173\nBut if I want it to be permanent,\nI can put it in one of those scripts and\n\n545\n00:28:29.173 --> 00:28:31.716\nit will always be there for me and\nmake my life a whole lot easier.\n\n546\n00:28:31.716 --> 00:28:35.556\nBut other than that, I think for\nenvironmental variables, for\n\n547\n00:28:35.556 --> 00:28:38.828\nglobal variables,\nhopefully I've done a good job and\n\n548\n00:28:38.828 --> 00:28:42.542\nyou guys understand what is meant\nby those and how we use them.\n\n549\n00:28:42.542 --> 00:28:45.097\nAnd then when we get into scripting and\ncreating our own scripts,\n\n550\n00:28:45.097 --> 00:28:46.593\nwe've modified a couple of scripts.\n\n551\n00:28:46.593 --> 00:28:50.320\nBut when we create our own,\nthat's when they really become powerful.\n\n552\n00:28:50.320 --> 00:28:55.313\nCuz we're creating custom variables\nthat do a lot of cool stuff for us.\n\n553\n00:28:55.313 --> 00:28:57.235\n>> All right.\nWell, thank you again, Daniel, for\n\n554\n00:28:57.235 --> 00:28:58.794\nshowing us all those different things.\n\n555\n00:28:58.794 --> 00:29:02.464\nEspecially with the variables and\nthe arrays, that seems kind of amazing.\n\n556\n00:29:02.464 --> 00:29:06.534\nAnd I can see where I might use that in\nprogramming a little bit on the batch\n\n557\n00:29:06.534 --> 00:29:07.550\nscripting side.\n\n558\n00:29:07.550 --> 00:29:11.659\nAnd that means it's a great place for\nus to also end this episode, so\n\n559\n00:29:11.659 --> 00:29:14.411\nsigning off for ITProTV, I'm Ronnie Wong.\n\n560\n00:29:14.411 --> 00:29:15.108\n>> And I'm Daniel Lowry.\n\n561\n00:29:15.108 --> 00:29:16.373\n>> And we'll see you next time.\n\n562\n00:29:16.373 --> 00:29:21.439\n[SOUND]\n\n",
          "vimeoId": "146026780"
        },
        {
          "description": "In this episode, Ronnie and Daniel continue to show the scripts and their locations. They show basic array creation and use of aliases as well as show now to unset a variable.  These are basic tools that we will use when creating powerful scripts.",
          "length": "2107",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-9-1-creating_scripts_in_bash-111115-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-9-1-creating_scripts_in_bash-111115-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashingandscripting-9-1-creating_scripts_in_bash-111115-1-sm.jpg",
          "title": "Creating Scripts in BASH",
          "transcript": "WEBVTT\r\n\r\n1\r\n00:00:00.000 --> 00:00:10.000\r\n[MUSIC]\r\n\r\n2\r\n00:00:12.384 --> 00:00:15.428\r\nWelcome to another exciting\r\nepisode here on ITPro tV.\r\n\r\n3\r\n00:00:15.428 --> 00:00:18.885\r\nMy name is Ronnie Wong and\r\ntoday we're taking a look at, well,\r\n\r\n4\r\n00:00:18.885 --> 00:00:22.605\r\nBASH and scripting specifically now,\r\nwe've been hinting at it for\r\n\r\n5\r\n00:00:22.605 --> 00:00:26.130\r\nmultiple episodes now we're\r\ngonna Such a great scripts.\r\n\r\n6\r\n00:00:26.130 --> 00:00:30.300\r\nToday we're going in to\r\ncreating scripts in Bash and\r\n\r\n7\r\n00:00:30.300 --> 00:00:33.030\r\nwho better to help us then Mr.\r\nDaniel Lawry.\r\n\r\n8\r\n00:00:33.030 --> 00:00:36.440\r\nSo, Daniel help us out, let's ask\r\nthe question and answer it right away.\r\n\r\n9\r\n00:00:36.440 --> 00:00:39.670\r\nWhat the heck is a script and\r\nwhy do we want to use it?\r\n\r\n10\r\n00:00:39.670 --> 00:00:42.000\r\n>> Yeah, we've been kind of\r\nfiddling around with scripts and\r\n\r\n11\r\n00:00:42.000 --> 00:00:45.930\r\nlearning the Bash environment and\r\nnow the dare truth has come right?\r\n\r\n12\r\n00:00:45.930 --> 00:00:50.050\r\nWe're actually going to create a script,\r\nbut Ryan poses a really good question.\r\n\r\n13\r\n00:00:50.050 --> 00:00:51.870\r\nThe heck is a script?\r\n\r\n14\r\n00:00:51.870 --> 00:00:53.870\r\nI mean why are we even\r\nlooking at this show?\r\n\r\n15\r\n00:00:53.870 --> 00:00:55.720\r\nWell a script is simple.\r\n\r\n16\r\n00:00:55.720 --> 00:01:02.320\r\nIt's basically a executable file that will\r\nexecute commands that's inside the file.\r\n\r\n17\r\n00:01:02.320 --> 00:01:06.200\r\nSo, that's what you're doing, you're\r\nsaying I'm creating a text file that has\r\n\r\n18\r\n00:01:06.200 --> 00:01:09.510\r\na list of commands that I want\r\nthe shell to interpret and do.\r\n\r\n19\r\n00:01:09.510 --> 00:01:13.820\r\nAnd I'm going to make that file executable\r\nso that it can run those commands.\r\n\r\n20\r\n00:01:13.820 --> 00:01:15.030\r\nThat is what a script is.\r\n\r\n21\r\n00:01:15.030 --> 00:01:15.620\r\nIn a nutshell.\r\n\r\n22\r\n00:01:15.620 --> 00:01:18.730\r\nJust a text file with a bunch\r\nof commands inside of it and\r\n\r\n23\r\n00:01:18.730 --> 00:01:21.480\r\nI'm telling the shell hey,\r\nlook at this file and\r\n\r\n24\r\n00:01:21.480 --> 00:01:25.330\r\nif you see a command inside of there, do\r\nme a favor, run those for me if you would.\r\n\r\n25\r\n00:01:25.330 --> 00:01:27.663\r\nIt's all about automation.\r\n\r\n26\r\n00:01:27.663 --> 00:01:29.480\r\nThat's why we love scripts, because it\r\nmakes our lives a whole lot easier.\r\n\r\n27\r\n00:01:29.480 --> 00:01:32.017\r\n>> All right.\r\n\r\n28\r\n00:01:32.017 --> 00:01:36.097\r\nSo, Daniel, this is why we took the time\r\nto go over things like the text editors,\r\n\r\n29\r\n00:01:36.097 --> 00:01:40.240\r\nto learn a little bit about variables,\r\nunderstand how to navigate around the file\r\n\r\n30\r\n00:01:40.240 --> 00:01:43.121\r\nsystem Mike, and so\r\nall that preparation is leading up,\r\n\r\n31\r\n00:01:43.121 --> 00:01:46.482\r\nat least at the beginning into\r\nwhat we're talking about here, and\r\n\r\n32\r\n00:01:46.482 --> 00:01:50.300\r\neven into more things than that and so\r\nDaniel tell us what we have to do here.\r\n\r\n33\r\n00:01:50.300 --> 00:01:51.500\r\n>> Yes.\r\nThat's right, all of the long,\r\n\r\n34\r\n00:01:51.500 --> 00:01:54.110\r\nhard work up to this point will\r\nnow actually pay off for us.\r\n\r\n35\r\n00:01:54.110 --> 00:01:57.920\r\nAll of the things we've learned,\r\nwe're going to start implementing a lot of\r\n\r\n36\r\n00:01:57.920 --> 00:02:00.390\r\nthat into a script and\r\nthen creating a script.\r\n\r\n37\r\n00:02:00.390 --> 00:02:05.870\r\nNow, these scripts that we're going\r\nto create here are going to be very\r\n\r\n38\r\n00:02:05.870 --> 00:02:07.710\r\nRudimentary, very simple.\r\n\r\n39\r\n00:02:07.710 --> 00:02:12.210\r\nBecause we want to a get your feet wet,\r\nmake sure you understand what's going on,\r\n\r\n40\r\n00:02:12.210 --> 00:02:18.850\r\nand b I want you to understand why we're\r\ndoing some of the things that we're doing.\r\n\r\n41\r\n00:02:18.850 --> 00:02:22.410\r\nAnd naming conventions, and invoking\r\nthings, how we're working with that,\r\n\r\n42\r\n00:02:22.410 --> 00:02:25.680\r\nwith the script itself,\r\ninside the actual content of the script.\r\n\r\n43\r\n00:02:25.680 --> 00:02:28.340\r\nSo, that it makes more sense to you.\r\n\r\n44\r\n00:02:28.340 --> 00:02:30.490\r\nBecause what good is it if I just\r\nsay type this This type type,\r\n\r\n45\r\n00:02:30.490 --> 00:02:32.750\r\nthis type this type,\r\nyou type it and it runs great,\r\n\r\n46\r\n00:02:32.750 --> 00:02:36.190\r\nyou have no idea why that stuff\r\nis doing what it's doing.\r\n\r\n47\r\n00:02:36.190 --> 00:02:39.280\r\nThat's hopefully what we're\r\ngoing to dispel today and\r\n\r\n48\r\n00:02:39.280 --> 00:02:42.380\r\nmake you understand why this\r\nscript it doing what it's doing so\r\n\r\n49\r\n00:02:42.380 --> 00:02:47.050\r\nthat you can create your own scripts\r\nin the future making your life easier,\r\n\r\n50\r\n00:02:47.050 --> 00:02:48.730\r\nautomating processes and\r\nthings of that nature.\r\n\r\n51\r\n00:02:48.730 --> 00:02:50.880\r\nLike I said it's going to\r\nbe pretty basic stuff but\r\n\r\n52\r\n00:02:50.880 --> 00:02:55.180\r\nit is going to employ a lot of the things\r\nwe've learned up until this point.\r\n\r\n53\r\n00:02:55.180 --> 00:02:58.070\r\nSo, that's where we're going\r\nto start with scripting today,\r\n\r\n54\r\n00:02:58.070 --> 00:03:00.530\r\nso where's a good place to start?\r\n\r\n55\r\n00:03:00.530 --> 00:03:02.770\r\nNaming the scripts, right?\r\n\r\n56\r\n00:03:02.770 --> 00:03:06.090\r\nYou name a script,\r\nyou wanna be descriptive.\r\n\r\n57\r\n00:03:06.090 --> 00:03:09.560\r\nBecause what good is it if I name it one,\r\nyou know,\r\n\r\n58\r\n00:03:09.560 --> 00:03:12.160\r\nif I name it script one, okay great.\r\n\r\n59\r\n00:03:12.160 --> 00:03:15.380\r\nAnybody else can say you gotta\r\nremember when it comes to scripting,\r\n\r\n60\r\n00:03:15.380 --> 00:03:17.660\r\nyou might write a script and\r\n\r\n61\r\n00:03:17.660 --> 00:03:22.320\r\nthen five years from now go What is this\r\nscript that I've written I don't remember.\r\n\r\n62\r\n00:03:22.320 --> 00:03:23.410\r\nAnd then you've gotta open it up and\r\n\r\n63\r\n00:03:23.410 --> 00:03:26.340\r\nlook inside and\r\ntry to figure out what it's doing.\r\n\r\n64\r\n00:03:26.340 --> 00:03:29.260\r\nIf you're not being\r\ndescriptive in your scripts,\r\n\r\n65\r\n00:03:29.260 --> 00:03:32.280\r\nthey're gonna seem a little cryptic to\r\nyou and you're gonna have to actually\r\n\r\n66\r\n00:03:32.280 --> 00:03:35.270\r\ninterpret them yourself to figure what\r\nthe heck you're actually doing with them.\r\n\r\n67\r\n00:03:35.270 --> 00:03:37.470\r\nSo, be descriptive when\r\nyou name your scripts.\r\n\r\n68\r\n00:03:37.470 --> 00:03:39.660\r\nThat's one of the easiest\r\nthings you can do and\r\n\r\n69\r\n00:03:39.660 --> 00:03:43.010\r\nit's gonna really help you down the line,\r\nso don't forget to that.\r\n\r\n70\r\n00:03:43.010 --> 00:03:46.340\r\nAnd be descriptive inside\r\nof your scripts as well.\r\n\r\n71\r\n00:03:46.340 --> 00:03:49.010\r\nWe have the ability to\r\nactually comment things and\r\n\r\n72\r\n00:03:49.010 --> 00:03:51.070\r\nsay this is why I'm doing this and\r\nthis is why I'm doing that, and\r\n\r\n73\r\n00:03:51.070 --> 00:03:54.020\r\nwe'll show you how to do that, but\r\nmake sure you do that as well.\r\n\r\n74\r\n00:03:54.020 --> 00:03:57.300\r\nSo, you don't come back in five years and\r\ntry to figure out what this script is\r\n\r\n75\r\n00:03:57.300 --> 00:03:59.150\r\ndoing and be completely lost\r\nuntil you've interpreted it.\r\n\r\n76\r\n00:03:59.150 --> 00:03:59.910\r\nSo be descriptive.\r\n\r\n77\r\n00:03:59.910 --> 00:04:03.760\r\n>> Now, Daniel since you've mentioned the\r\nidea of naming a script here, is it still\r\n\r\n78\r\n00:04:03.760 --> 00:04:07.710\r\nimportant that I worry about case\r\nsensitivity in the naming of the script?\r\n\r\n79\r\n00:04:07.710 --> 00:04:11.390\r\n>> Yes case sensitivity has gone no where,\r\nremember in our Unix Linux environment,\r\n\r\n80\r\n00:04:11.390 --> 00:04:15.470\r\nthey love case so\r\nif you make a script capital B backup.\r\n\r\n81\r\n00:04:15.470 --> 00:04:19.050\r\nThen that's the script\r\nyou're gonna have to call.\r\n\r\n82\r\n00:04:19.050 --> 00:04:21.860\r\nIf you make another script\r\nthat's lowercase B backup.\r\n\r\n83\r\n00:04:21.860 --> 00:04:23.620\r\nThat's a different script.\r\n\r\n84\r\n00:04:23.620 --> 00:04:25.000\r\nThat's not the same file.\r\n\r\n85\r\n00:04:25.000 --> 00:04:27.130\r\nYou can't interchange those guys.\r\n\r\n86\r\n00:04:27.130 --> 00:04:30.460\r\nSo, make sure that you pay\r\nattention to case sensitivity.\r\n\r\n87\r\n00:04:30.460 --> 00:04:34.170\r\nNow the other thing you need to understand\r\nis when you're naming your script.\r\n\r\n88\r\n00:04:34.170 --> 00:04:35.130\r\nIs it does need.\r\n\r\n89\r\n00:04:35.130 --> 00:04:36.070\r\nAn extension, right?\r\n\r\n90\r\n00:04:36.070 --> 00:04:38.450\r\nIt has a required extension for it.\r\n\r\n91\r\n00:04:38.450 --> 00:04:39.460\r\nAnd it is .sh.\r\n\r\n92\r\n00:04:39.460 --> 00:04:45.370\r\nIt's letting you know that this is a shell\r\nscript, and that's what we want it to do.\r\n\r\n93\r\n00:04:45.370 --> 00:04:48.470\r\nSo, whenever you name your files,\r\nso if you named it backup,\r\n\r\n94\r\n00:04:48.470 --> 00:04:50.850\r\nyou're gonna name it backup.sh.\r\n\r\n95\r\n00:04:50.850 --> 00:04:56.120\r\nThis is one of the times in where\r\nthe actual file extension does kinda\r\n\r\n96\r\n00:04:56.120 --> 00:04:57.990\r\ncome in handy for us.\r\n\r\n97\r\n00:04:57.990 --> 00:05:00.170\r\nLet's just note,\r\nthis is a shell script, and again,\r\n\r\n98\r\n00:05:00.170 --> 00:05:02.690\r\nkind of being descriptive\r\nat that same time.\r\n\r\n99\r\n00:05:02.690 --> 00:05:04.140\r\n>> All right.\r\n\r\n100\r\n00:05:04.140 --> 00:05:07.120\r\nSo Daniel, if we go ahead and\r\njust create just a basic text file,\r\n\r\n101\r\n00:05:07.120 --> 00:05:10.740\r\nwhat draft are you telling us to make\r\nsure that when we do so we worry\r\n\r\n102\r\n00:05:10.740 --> 00:05:15.010\r\nabout the case sensitive, case sensitivity\r\nexcuse me and then we go to save it.\r\n\r\n103\r\n00:05:15.010 --> 00:05:19.050\r\nWe need to make sure it saves and has that\r\n.sh and that's whats turned into script.\r\n\r\n104\r\n00:05:19.050 --> 00:05:21.590\r\nIf not whatever the exception is,\r\nif there's no exception.\r\n\r\n105\r\n00:05:21.590 --> 00:05:24.970\r\nIt's perfectly fine it's just not going\r\nto be able to run that script, right?\r\n\r\n106\r\n00:05:24.970 --> 00:05:27.290\r\n>> Right.\r\nNot going to like that, so\r\n\r\n107\r\n00:05:27.290 --> 00:05:32.070\r\nmaybe there's an alias or something\r\nlike that helps with people data.\r\n\r\n108\r\n00:05:32.070 --> 00:05:35.360\r\nJust as a good rule of thumb put a .SH\r\nat the end of all your scripts and\r\n\r\n109\r\n00:05:35.360 --> 00:05:37.470\r\nyou'll have to worry about none of this.\r\n\r\n110\r\n00:05:37.470 --> 00:05:39.380\r\nIt's a very simple thing to do, and\r\n\r\n111\r\n00:05:39.380 --> 00:05:42.710\r\nonce you get used to it it'll\r\nfeel weird to not do it that way.\r\n\r\n112\r\n00:05:42.710 --> 00:05:46.882\r\nSo, good rule of thumb, .SH on the end\r\nof your descriptive script name.\r\n\r\n113\r\n00:05:46.882 --> 00:05:50.250\r\nAll right, so here it is,\r\ndrum roll please.\r\n\r\n114\r\n00:05:50.250 --> 00:05:52.830\r\nLet's jump on my computer and\r\ncreate a script,\r\n\r\n115\r\n00:05:52.830 --> 00:05:56.220\r\nand remember a script is\r\njust a flat text box file.\r\n\r\n116\r\n00:05:56.220 --> 00:05:57.990\r\nIt's nothing crazy.\r\n\r\n117\r\n00:05:57.990 --> 00:06:00.080\r\nYou're just putting in text, so\r\n\r\n118\r\n00:06:00.080 --> 00:06:03.510\r\nall you have to do is find\r\nyour favorite text editor.\r\n\r\n119\r\n00:06:03.510 --> 00:06:05.230\r\nIf you live VIM or Vi or Emax or whatever.\r\n\r\n120\r\n00:06:05.230 --> 00:06:07.930\r\nI have chosen Nano as my script\r\nchoice because I like it.\r\n\r\n121\r\n00:06:07.930 --> 00:06:12.380\r\nIt makes my life a whole lot easier,\r\nand that's what I'm going to use.\r\n\r\n122\r\n00:06:12.380 --> 00:06:17.650\r\nJust a text editor creating a text file,\r\nbut the shell itself is going to be able\r\n\r\n123\r\n00:06:17.650 --> 00:06:21.520\r\nto interpret what we put into the text\r\nfile and that's what makes it a script.\r\n\r\n124\r\n00:06:21.520 --> 00:06:22.310\r\nSo, let's do that.\r\n\r\n125\r\n00:06:22.310 --> 00:06:24.400\r\nI'm going to create a simple-\r\nwouldn't be a scripting show,\r\n\r\n126\r\n00:06:24.400 --> 00:06:29.370\r\nwouldn't be a programming show, if we\r\ndidn't add the old 'hello world' script.\r\n\r\n127\r\n00:06:29.370 --> 00:06:31.400\r\nVery simple.\r\nAny time you start a program or\r\n\r\n128\r\n00:06:31.400 --> 00:06:35.480\r\nscripting, this is probably\r\nthe first script you'll always run.\r\n\r\n129\r\n00:06:35.480 --> 00:06:37.720\r\nI would hate to break with tradition.\r\n\r\n130\r\n00:06:37.720 --> 00:06:40.850\r\nThat's what we're going to create,\r\nis a 'hello world' And I'll call it,\r\n\r\n131\r\n00:06:40.850 --> 00:06:45.120\r\nI'll do nano,\r\nwe'll call it hello.sh, right?\r\n\r\n132\r\n00:06:45.120 --> 00:06:48.230\r\nMaking sure I know that\r\nthis is the script.\r\n\r\n133\r\n00:06:48.230 --> 00:06:49.170\r\nIt's got the .sh extension.\r\n\r\n134\r\n00:06:49.170 --> 00:06:53.740\r\nAnd it's hello, anybody that's done\r\nthis before is gonna know exactly\r\n\r\n135\r\n00:06:53.740 --> 00:06:55.260\r\nwhat this does.\r\n\r\n136\r\n00:06:55.260 --> 00:06:56.120\r\nSo, I'll hit Enter.\r\n\r\n137\r\n00:06:56.120 --> 00:07:01.570\r\nI've launched my editor and now I can\r\nstart making this an actual script.\r\n\r\n138\r\n00:07:01.570 --> 00:07:05.430\r\nIf I just start typing commands,\r\nunfortunately,\r\n\r\n139\r\n00:07:05.430 --> 00:07:08.380\r\nThat's not going to work,\r\nat least not in this case.\r\n\r\n140\r\n00:07:08.380 --> 00:07:12.930\r\nI have to invoke the shell,\r\nlet the first command\r\n\r\n141\r\n00:07:12.930 --> 00:07:16.480\r\nbe the fact that this is a script and\r\nthere is a way in which we do that.\r\n\r\n142\r\n00:07:16.480 --> 00:07:21.060\r\nWhat we have to do is, we have to put\r\n\r\n143\r\n00:07:21.060 --> 00:07:25.390\r\nsomething called the shebang, and\r\nI know Don hates that kind of terminology.\r\n\r\n144\r\n00:07:25.390 --> 00:07:30.060\r\nBut it's very widespread, most people\r\nunderstand it as being the shebang.\r\n\r\n145\r\n00:07:30.060 --> 00:07:35.270\r\nOr the hash bang or the pound bang,\r\nor whatever you want to call it.\r\n\r\n146\r\n00:07:35.270 --> 00:07:38.140\r\nAnd that is these characters right here.\r\n\r\n147\r\n00:07:38.140 --> 00:07:42.060\r\nThe hash are the pound sign and\r\nan exclamation point.\r\n\r\n148\r\n00:07:42.060 --> 00:07:42.750\r\nThat's the shebang.\r\n\r\n149\r\n00:07:42.750 --> 00:07:47.060\r\nShh for the end of hash\r\nbecause that's a hash mark.\r\n\r\n150\r\n00:07:47.060 --> 00:07:48.830\r\nAnd then bang because.\r\n\r\n151\r\n00:07:48.830 --> 00:07:51.690\r\nWell I guess exclamation points\r\nmean bang I shot you or something.\r\n\r\n152\r\n00:07:51.690 --> 00:07:54.040\r\n>> I don't know but\r\nthat's where it came from.\r\n\r\n153\r\n00:07:54.040 --> 00:07:58.320\r\nThat's why Wes We do it and\r\nwe always start a script with the shebang.\r\n\r\n154\r\n00:07:58.320 --> 00:08:03.017\r\nRight, you gotta let it know shebang.\r\n\r\n155\r\n00:08:03.017 --> 00:08:08.890\r\nThe next thing we're gonna do is tell\r\nit what shell we want to invoke.\r\n\r\n156\r\n00:08:08.890 --> 00:08:09.735\r\nThat's a good thing.\r\n\r\n157\r\n00:08:09.735 --> 00:08:14.960\r\n/bin/bash is what we're bash scripting so\r\nit makes sense for\r\n\r\n158\r\n00:08:14.960 --> 00:08:17.810\r\nus to create, to invoke the bash shell so\r\nthat's what we're doing.\r\n\r\n159\r\n00:08:17.810 --> 00:08:20.040\r\nSo that first line in\r\njust about every script.\r\n\r\n160\r\n00:08:20.040 --> 00:08:23.230\r\nScript you're ever gonna write,\r\nyou're gonna wanna put the #!/bin/bash,\r\n\r\n161\r\n00:08:23.230 --> 00:08:27.450\r\nletting it know, hey buddy, this is\r\na script, and this is the interpreter\r\n\r\n162\r\n00:08:27.450 --> 00:08:31.470\r\nthat I want you to use, and\r\nnow we can start throwing commands out.\r\n\r\n163\r\n00:08:32.510 --> 00:08:36.600\r\n>> Now Daniel,\r\nI think I understand this a little bit.\r\n\r\n164\r\n00:08:36.600 --> 00:08:41.240\r\nSo, if we were to change that, let's say\r\ninstead, to CSH or something like that,\r\n\r\n165\r\n00:08:41.240 --> 00:08:44.750\r\nthat would actually not run bash, but\r\nthat would end up running Seashell?\r\n\r\n166\r\n00:08:44.750 --> 00:08:45.680\r\n>> That\r\n>> That's exactly right.\r\n\r\n167\r\n00:08:45.680 --> 00:08:47.270\r\nRonnie, you're dead on the mark,\r\nexactly right.\r\n\r\n168\r\n00:08:47.270 --> 00:08:49.670\r\nIf I put another shell in there,\r\nit will run that shell.\r\n\r\n169\r\n00:08:49.670 --> 00:08:52.070\r\nIt's saying okay,\r\nI understand this is a script,\r\n\r\n170\r\n00:08:52.070 --> 00:08:54.720\r\nnow tell me which interpreter to use.\r\n\r\n171\r\n00:08:54.720 --> 00:08:59.020\r\nAnd I saying use bash, but if I put C\r\nshell in there, it will use the C shell.\r\n\r\n172\r\n00:08:59.020 --> 00:09:05.380\r\nAnd you're thinking okay, well that's\r\npretty cool, is there any issue with that?\r\n\r\n173\r\n00:09:05.380 --> 00:09:09.220\r\nAnd yeah, there can be because\r\nyou gotta remember, each shell\r\n\r\n174\r\n00:09:09.220 --> 00:09:13.570\r\nhas its own environmental variables has\r\nit's own way of interpreting commands.\r\n\r\n175\r\n00:09:13.570 --> 00:09:17.810\r\nAnd eventhough a lot of them\r\nare probably very similar and you\r\n\r\n176\r\n00:09:17.810 --> 00:09:21.690\r\ncan't even get away with a few scripts,\r\nthey're using a different interpreter but\r\n\r\n177\r\n00:09:21.690 --> 00:09:26.190\r\nthe one time that you write a script and\r\nit doesn't, it's not portable, right?\r\n\r\n178\r\n00:09:26.190 --> 00:09:29.910\r\nIt doesn't cross those\r\ncultures very well so\r\n\r\n179\r\n00:09:29.910 --> 00:09:33.400\r\nthat I need to invoke a command that\r\nis specific to the bash environment.\r\n\r\n180\r\n00:09:33.400 --> 00:09:35.060\r\nMaybe one of those built in.\r\n\r\n181\r\n00:09:35.060 --> 00:09:36.700\r\nFor the bash and\r\n\r\n182\r\n00:09:36.700 --> 00:09:40.090\r\nthat's not in the C shell, it's not gonna\r\nwork, my script isn't going to run.\r\n\r\n183\r\n00:09:40.090 --> 00:09:43.940\r\nOr it's gonna run to a certain spot and\r\nthen it's gonna error, it's gonna have\r\n\r\n184\r\n00:09:43.940 --> 00:09:47.140\r\na problem, right, and we'll get\r\nan error outputted to the screen and\r\n\r\n185\r\n00:09:47.140 --> 00:09:50.490\r\nI'm gonna start scratching my head\r\nto try to figure out what went wrong\r\n\r\n186\r\n00:09:50.490 --> 00:09:54.180\r\nwhen all I did was invoke\r\nthe wrong shell interpreter.\r\n\r\n187\r\n00:09:54.180 --> 00:09:57.070\r\nSo make sure that if you are putting that\r\nin there, if you do want to use the C\r\n\r\n188\r\n00:09:57.070 --> 00:09:59.330\r\nshell, well then you can do that,\r\nbut we're talking bash here.\r\n\r\n189\r\n00:09:59.330 --> 00:10:02.270\r\nI'm not a C programmer Maybe you are,\r\nbut now you're trying to get into Bash.\r\n\r\n190\r\n00:10:02.270 --> 00:10:03.210\r\nIt's all about Bash.\r\n\r\n191\r\n00:10:03.210 --> 00:10:05.220\r\nWe're using the Bash interpreter.\r\n\r\n192\r\n00:10:05.220 --> 00:10:06.830\r\nSo, that's where we're at.\r\n\r\n193\r\n00:10:06.830 --> 00:10:09.570\r\nNow that I have that line I can move on.\r\n\r\n194\r\n00:10:09.570 --> 00:10:11.670\r\nAnd like I said,\r\nI can start creating my commands.\r\n\r\n195\r\n00:10:11.670 --> 00:10:14.880\r\nNow, you'll notice I've starting\r\nto put some spaces in there.\r\n\r\n196\r\n00:10:14.880 --> 00:10:16.150\r\nThat's fine, it doesn't matter.\r\n\r\n197\r\n00:10:16.150 --> 00:10:20.690\r\nAny no line characters,\r\nthere's actually nothing on that line,\r\n\r\n198\r\n00:10:20.690 --> 00:10:23.020\r\nit just will skip over because\r\nthere's nothing to interpret.\r\n\r\n199\r\n00:10:23.020 --> 00:10:25.790\r\nSo, if you want to break things up,\r\n\r\n200\r\n00:10:25.790 --> 00:10:28.330\r\nmake it a little easier to read\r\nby adding spaces, go right ahead.\r\n\r\n201\r\n00:10:28.330 --> 00:10:29.910\r\nYou're full carte blanche to do this.\r\n\r\n202\r\n00:10:29.910 --> 00:10:33.290\r\nAnd to be honest with you,\r\nit is a good idea.\r\n\r\n203\r\n00:10:33.290 --> 00:10:34.410\r\nI do recommend it.\r\n\r\n204\r\n00:10:34.410 --> 00:10:37.990\r\nIt does make it easier for\r\nyou to peruse through the script\r\n\r\n205\r\n00:10:37.990 --> 00:10:40.800\r\nif you're looking at it,\r\ntry to figure out what's going on.\r\n\r\n206\r\n00:10:40.800 --> 00:10:45.100\r\n>> Yeah, Daniel I also understand that\r\nsince we're just beginning, right?\r\n\r\n207\r\n00:10:45.100 --> 00:10:47.660\r\nThe idea of establishing best\r\npractices is always a good thing,\r\n\r\n208\r\n00:10:47.660 --> 00:10:51.280\r\nand we know that this has to be the first\r\n[INAUDIBLE] than any script that we\r\n\r\n209\r\n00:10:51.280 --> 00:10:54.990\r\ncreate so it actually indicates,\r\nthis is actually going to be a script.\r\n\r\n210\r\n00:10:54.990 --> 00:10:58.250\r\nIt now also says,\r\nhere is the shell that we're\r\n\r\n211\r\n00:10:58.250 --> 00:11:01.960\r\ngoing to end up using which is good but\r\nalso understand the idea of commenting.\r\n\r\n212\r\n00:11:01.960 --> 00:11:05.490\r\nIs that really something super important\r\nif I get started in scripting?\r\n\r\n213\r\n00:11:05.490 --> 00:11:09.250\r\n>> Yeah.\r\nCommenting is super important actually and\r\n\r\n214\r\n00:11:09.250 --> 00:11:10.960\r\nit's a really easy thing to do.\r\n\r\n215\r\n00:11:10.960 --> 00:11:12.290\r\nIt's not very difficult at all.\r\n\r\n216\r\n00:11:12.290 --> 00:11:15.060\r\nYou want to comment as\r\nverbose as you can be.\r\n\r\n217\r\n00:11:15.060 --> 00:11:16.550\r\nJust because it makes life easier.\r\n\r\n218\r\n00:11:16.550 --> 00:11:19.660\r\nI've seen some commented stuff and\r\nI'm like what are they talking about?\r\n\r\n219\r\n00:11:19.660 --> 00:11:24.120\r\nWhen you read the comments because\r\nthey're not very descriptive.\r\n\r\n220\r\n00:11:24.120 --> 00:11:26.550\r\nAgain it goes back to be descriptive.\r\n\r\n221\r\n00:11:26.550 --> 00:11:30.620\r\nIt's not just for you it's probably\r\nyou're going to give this script away\r\n\r\n222\r\n00:11:30.620 --> 00:11:32.650\r\nto the world and\r\nthe thing is if you've got a friend.\r\n\r\n223\r\n00:11:32.650 --> 00:11:33.890\r\nHey man how are you doing that?\r\n\r\n224\r\n00:11:33.890 --> 00:11:34.550\r\nThat's a cool script.\r\n\r\n225\r\n00:11:34.550 --> 00:11:36.340\r\nEmail it to them.\r\n\r\n226\r\n00:11:36.340 --> 00:11:37.420\r\nRight give them the file.\r\n\r\n227\r\n00:11:37.420 --> 00:11:39.480\r\nIt's just a Just a text file, email it to.\r\n\r\n228\r\n00:11:39.480 --> 00:11:41.120\r\nNow, they're looking at it,\r\n\r\n229\r\n00:11:41.120 --> 00:11:45.210\r\nscratching their head because you didn't\r\ncomment very well or commented at all.\r\n\r\n230\r\n00:11:45.210 --> 00:11:46.470\r\nIt's a very easy thing to do.\r\n\r\n231\r\n00:11:46.470 --> 00:11:49.330\r\nSo, let's do that and it's an interesting\r\nthing that Ronnie actually brought up.\r\n\r\n232\r\n00:11:49.330 --> 00:11:51.800\r\nWe're gonna make a comment and\r\nthen we're gonna give it a command.\r\n\r\n233\r\n00:11:51.800 --> 00:11:53.630\r\nSo, let us know what's going on.\r\n\r\n234\r\n00:11:53.630 --> 00:11:56.280\r\nTo comment, you have to tell it,\r\n\r\n235\r\n00:11:56.280 --> 00:12:02.063\r\nI don't want you to interpret this line or\r\nOr anything after this point.\r\n\r\n236\r\n00:12:02.063 --> 00:12:03.432\r\nSo how do I do that?\r\n\r\n237\r\n00:12:03.432 --> 00:12:06.024\r\nWell, you do it with the hash character.\r\n\r\n238\r\n00:12:06.024 --> 00:12:12.386\r\nYou're thinking, well how come it's\r\nnot commenting out the bin bash?\r\n\r\n239\r\n00:12:12.386 --> 00:12:20.279\r\nBecause on line one of the script it\r\nexpects it to start with the hash bang.\r\n\r\n240\r\n00:12:20.279 --> 00:12:22.974\r\nSo if that shebang is there,\r\nit's the script.\r\n\r\n241\r\n00:12:22.974 --> 00:12:28.150\r\nAny other line after line one that has a\r\ncomment in it, it will read as a comment.\r\n\r\n242\r\n00:12:28.150 --> 00:12:31.328\r\nSo if you see that hash on any\r\nof the line, the line one,\r\n\r\n243\r\n00:12:31.328 --> 00:12:35.355\r\nit will be a comment on line one,\r\nit's treated as invoking a script.\r\n\r\n244\r\n00:12:35.355 --> 00:12:37.574\r\nSo that's the difference\r\nbetween the two and\r\n\r\n245\r\n00:12:37.574 --> 00:12:39.979\r\nthat's why bin bash does\r\nnot get commented out.\r\n\r\n246\r\n00:12:39.979 --> 00:12:42.868\r\nSo now we can make this,\r\n\r\n247\r\n00:12:42.868 --> 00:12:47.934\r\nwe're gonna call this our first script.\r\n\r\n248\r\n00:12:47.934 --> 00:12:52.122\r\nAnd we'll say let's see here,\r\n\r\n249\r\n00:12:52.122 --> 00:12:57.872\r\nprints out, Hello World, like so, okay?\r\n\r\n250\r\n00:12:57.872 --> 00:12:59.194\r\nThat's what we want it to do.\r\n\r\n251\r\n00:12:59.194 --> 00:13:01.145\r\nSo all that is coming out and\r\nwe'll not interpret that.\r\n\r\n252\r\n00:13:01.145 --> 00:13:03.165\r\nWe won't see anything about it.\r\n\r\n253\r\n00:13:03.165 --> 00:13:06.827\r\nNow we come in, we actually come in and\r\n\r\n254\r\n00:13:06.827 --> 00:13:11.867\r\nI'm just gonna do an echo and\r\nHello World, like so.\r\n\r\n255\r\n00:13:11.867 --> 00:13:14.422\r\nOur script is done,\r\nwe have created a script.\r\n\r\n256\r\n00:13:14.422 --> 00:13:17.548\r\nAll you have to do is save it and then we\r\ngot a few other things we gotta go through\r\n\r\n257\r\n00:13:17.548 --> 00:13:19.103\r\nand make sure that it actually works.\r\n\r\n258\r\n00:13:19.103 --> 00:13:20.603\r\nBut for all intents and\r\n\r\n259\r\n00:13:20.603 --> 00:13:26.067\r\npurposes everything that we need to do to\r\nmake a script a script, this is a script.\r\n\r\n260\r\n00:13:26.067 --> 00:13:28.713\r\nIt has a command it has\r\na comment in it and\r\n\r\n261\r\n00:13:28.713 --> 00:13:34.265\r\nit's invoking the fact that it's gonna\r\nuse the bash interpreter to run a script.\r\n\r\n262\r\n00:13:34.265 --> 00:13:38.086\r\nAll right so let's save this, Ctrl+O,\r\n\r\n263\r\n00:13:38.086 --> 00:13:42.670\r\nReturn, Ctrl+X and\r\nnow I want to run my script.\r\n\r\n264\r\n00:13:42.670 --> 00:13:47.170\r\nRight, I saved my script, it's there,\r\nit's waiting for me to do it.\r\n\r\n265\r\n00:13:47.170 --> 00:13:48.053\r\nHow do I do that?\r\n\r\n266\r\n00:13:48.053 --> 00:13:51.733\r\nWell the first thing you got to do is\r\nyou got to make it executable, right?\r\n\r\n267\r\n00:13:51.733 --> 00:13:55.585\r\nThis goes back to that whole\r\npermissions show we did and\r\n\r\n268\r\n00:13:55.585 --> 00:13:59.780\r\nmaking things writable,\r\nreadable or executable.\r\n\r\n269\r\n00:13:59.780 --> 00:14:05.737\r\nScripts have to be executable, so\r\nwe need to put those permissions on there.\r\n\r\n270\r\n00:14:05.737 --> 00:14:06.831\r\nI'm just going to make it executable for\r\n\r\n271\r\n00:14:06.831 --> 00:14:08.514\r\nme because I'm the only one\r\nthat's going to run this script.\r\n\r\n272\r\n00:14:08.514 --> 00:14:12.865\r\nBut you can use all what you've learned in\r\nthat permission show to make sure that if\r\n\r\n273\r\n00:14:12.865 --> 00:14:15.957\r\nanybody other than yourself\r\nwho created it is running it,\r\n\r\n274\r\n00:14:15.957 --> 00:14:19.386\r\nthat they get the right permissions\r\nto make sure they can run it.\r\n\r\n275\r\n00:14:19.386 --> 00:14:22.499\r\nThey have to have execute permissions\r\nif they want to run a script.\r\n\r\n276\r\n00:14:22.499 --> 00:14:25.403\r\n>> Now Daniel, before you go ahead and\r\nmake this executable, why don't you show\r\n\r\n277\r\n00:14:25.403 --> 00:14:28.006\r\nus the actual permissions and\r\nthat way we can see it being executable.\r\n\r\n278\r\n00:14:28.006 --> 00:14:30.373\r\n>> That is a good idea Mr.\r\nWong, I will do that.\r\n\r\n279\r\n00:14:30.373 --> 00:14:35.234\r\nLet's take a look at that, so\r\nour script is called hello.sh,\r\n\r\n280\r\n00:14:35.234 --> 00:14:39.177\r\nso I'm just gonna do an ls\r\n-l on that actual file and\r\n\r\n281\r\n00:14:39.177 --> 00:14:42.220\r\nthat returns our actual permissions.\r\n\r\n282\r\n00:14:42.220 --> 00:14:46.360\r\nAnd you're seeing that by the default when\r\nyou just create a file in my system it's\r\n\r\n283\r\n00:14:46.360 --> 00:14:50.092\r\njust read and write, read and write,\r\nand then read for any other person.\r\n\r\n284\r\n00:14:50.092 --> 00:14:54.128\r\nSo read and write for the owner, the\r\nperson that created the file and read and\r\n\r\n285\r\n00:14:54.128 --> 00:14:58.606\r\nwrite for the group that has permissions\r\nover that file, and read for anybody else,\r\n\r\n286\r\n00:14:58.606 --> 00:15:00.459\r\nbut I need to execute, all right?\r\n\r\n287\r\n00:15:00.459 --> 00:15:07.401\r\nAnd you'll notice that this is just\r\na regular good old black and white, right?\r\n\r\n288\r\n00:15:07.401 --> 00:15:11.407\r\nIf you look at my other stuff,\r\nlet's say you've got all these green ones,\r\n\r\n289\r\n00:15:11.407 --> 00:15:14.153\r\ngreen let's me know that\r\nit is an executable file.\r\n\r\n290\r\n00:15:14.153 --> 00:15:20.082\r\nSo, let me do that,\r\nlet's add the ch mod, chmod.\r\n\r\n291\r\n00:15:20.082 --> 00:15:26.769\r\nAnd for myself, I could just do +x,\r\nI don't actually have to say u plus x.\r\n\r\n292\r\n00:15:26.769 --> 00:15:29.487\r\nI can just do plus x, and it's implied.\r\n\r\n293\r\n00:15:29.487 --> 00:15:31.809\r\nSo a little less typing on the front end.\r\n\r\n294\r\n00:15:31.809 --> 00:15:35.709\r\nIf it doesn't work,\r\ndo u plus x, and it'll know.\r\n\r\n295\r\n00:15:35.709 --> 00:15:38.542\r\nOkay, the owner of that file\r\nneeds executable permissions.\r\n\r\n296\r\n00:15:38.542 --> 00:15:43.720\r\nSo if you just use +x here and\r\nthen name the file hello.sh and hit Enter.\r\n\r\n297\r\n00:15:43.720 --> 00:15:49.176\r\nNow if I do an ls -l on hello,\r\nyou'll see it has turned green.\r\n\r\n298\r\n00:15:49.176 --> 00:15:53.251\r\nAnd it is now executable for\r\nboth the user and the owner,\r\n\r\n299\r\n00:15:53.251 --> 00:15:56.643\r\nthe owner and\r\nthe owner's group, as it were.\r\n\r\n300\r\n00:15:56.643 --> 00:15:59.756\r\nAll right, so\r\nnow this file is ready to rock.\r\n\r\n301\r\n00:15:59.756 --> 00:16:03.587\r\nWe can actually run a script and\r\nit should do something.\r\n\r\n302\r\n00:16:03.587 --> 00:16:04.608\r\nShall we, Ronnie?\r\n\r\n303\r\n00:16:04.608 --> 00:16:08.194\r\n>> We should run it, but remember that\r\nthis is one of the things that I know.\r\n\r\n304\r\n00:16:08.194 --> 00:16:10.084\r\nThe very first script that I ever wrote,\r\nDaniel,\r\n\r\n305\r\n00:16:10.084 --> 00:16:11.581\r\nit was something very similar to this.\r\n\r\n306\r\n00:16:11.581 --> 00:16:15.066\r\nBut my problem was I could not\r\nactually remember that I needed to\r\n\r\n307\r\n00:16:15.066 --> 00:16:16.526\r\nchange it to executable.\r\n\r\n308\r\n00:16:16.526 --> 00:16:20.902\r\nBy just running this command to show what\r\nthe actual permissions are is a key for\r\n\r\n309\r\n00:16:20.902 --> 00:16:22.970\r\nus that we're gonna make this work.\r\n\r\n310\r\n00:16:22.970 --> 00:16:25.965\r\nSo being able to see that x right\r\nthere is probably very helpful.\r\n\r\n311\r\n00:16:25.965 --> 00:16:28.800\r\nSo that way you don't get as frustrated\r\nas I says why is that not working.\r\n\r\n312\r\n00:16:28.800 --> 00:16:31.040\r\nI tried to do pseudo,\r\nI tried to do everything else.\r\n\r\n313\r\n00:16:31.040 --> 00:16:33.673\r\nAnd the very fact is it wouldn't run\r\nI finally said if you check your\r\n\r\n314\r\n00:16:33.673 --> 00:16:34.291\r\npermissions.\r\n\r\n315\r\n00:16:34.291 --> 00:16:37.332\r\nAnd so it's one of the very first things\r\nthat can trip you up if you don't\r\n\r\n316\r\n00:16:37.332 --> 00:16:38.051\r\nthink about it.\r\n\r\n317\r\n00:16:38.051 --> 00:16:40.860\r\nYou're excited because you just\r\ncreated your first script and\r\n\r\n318\r\n00:16:40.860 --> 00:16:44.200\r\nthen you just forget to [LAUGH] change\r\nthe permissions and it doesn't work,\r\n\r\n319\r\n00:16:44.200 --> 00:16:45.484\r\nno matter what you try to do.\r\n\r\n320\r\n00:16:45.484 --> 00:16:46.636\r\nSo yes, let's go ahead and\r\n\r\n321\r\n00:16:46.636 --> 00:16:49.149\r\nrun this and see your magic\r\nthat you actually created here.\r\n\r\n322\r\n00:16:49.149 --> 00:16:52.395\r\n>> Yeah, great point Ronnie, I don't care\r\nif you're rude, I don't care who you are,\r\n\r\n323\r\n00:16:52.395 --> 00:16:54.396\r\nif it's not executable,\r\nit's not gonna execute.\r\n\r\n324\r\n00:16:54.396 --> 00:16:56.905\r\nIt just doesn't work that way so\r\ngood point.\r\n\r\n325\r\n00:16:56.905 --> 00:17:01.247\r\nHelpful safety tip from Ronnie Wong, so\r\nlet's run this guy and see what it does.\r\n\r\n326\r\n00:17:01.247 --> 00:17:04.288\r\nIt should just print\r\nHello World to the screen.\r\n\r\n327\r\n00:17:04.288 --> 00:17:08.119\r\nSo let's see here, how do I invoke this,\r\nhow do I make this run?\r\n\r\n328\r\n00:17:08.119 --> 00:17:10.140\r\nThere's a couple of ways\r\nin which you can do it.\r\n\r\n329\r\n00:17:10.140 --> 00:17:15.190\r\nThe most common way to do this is\r\nto do ./ and then the script name.\r\n\r\n330\r\n00:17:15.190 --> 00:17:16.930\r\nSo ./hello.sh.\r\n\r\n331\r\n00:17:16.930 --> 00:17:21.330\r\nIf I hit Enter, you notice it prints\r\nHello World right out to the screen.\r\n\r\n332\r\n00:17:21.330 --> 00:17:23.002\r\nThat's exactly what we want it to do.\r\n\r\n333\r\n00:17:23.002 --> 00:17:25.900\r\nThank you, script, you're awesome.\r\n\r\n334\r\n00:17:25.900 --> 00:17:28.356\r\nAnd not a whole that to that,\r\nbut big whoop.\r\n\r\n335\r\n00:17:28.356 --> 00:17:31.833\r\nNow there are some things I want you to\r\nunderstand about what's going on here.\r\n\r\n336\r\n00:17:31.833 --> 00:17:36.729\r\nWhen I run this ./,\r\nwhat I'm telling it is to basically\r\n\r\n337\r\n00:17:36.729 --> 00:17:41.115\r\nopen this up in a subshell,\r\nrun the thing, do it and\r\n\r\n338\r\n00:17:41.115 --> 00:17:47.042\r\nprint it out to my screen and\r\nthen release back to the original shell.\r\n\r\n339\r\n00:17:47.042 --> 00:17:50.850\r\nThat is what is going on here, all right?\r\n\r\n340\r\n00:17:50.850 --> 00:17:53.519\r\nThere can be some weird things\r\nthat happen when that occurs.\r\n\r\n341\r\n00:17:53.519 --> 00:17:56.166\r\nEspecially when you're working\r\nwith things like variables.\r\n\r\n342\r\n00:17:56.166 --> 00:18:00.702\r\nRemember we talked about variables\r\nwhen we declare a variable if\r\n\r\n343\r\n00:18:00.702 --> 00:18:04.398\r\nit's declared in this if\r\nit's local to this shell.\r\n\r\n344\r\n00:18:04.398 --> 00:18:06.557\r\nWhen I create a subshell,\r\nit's not gonna be there, right?\r\n\r\n345\r\n00:18:06.557 --> 00:18:08.555\r\nSo, that's when things\r\ncan get a little weird.\r\n\r\n346\r\n00:18:08.555 --> 00:18:11.241\r\nSo if I've declared a local variable and\r\n\r\n347\r\n00:18:11.241 --> 00:18:14.800\r\nit opens a subshell that\r\nvariable's not gonna work.\r\n\r\n348\r\n00:18:14.800 --> 00:18:18.121\r\nAnd if I've used that variable inside\r\nof my script is that gonna work?\r\n\r\n349\r\n00:18:18.121 --> 00:18:19.471\r\nNope it's not gonna work at all, so\r\n\r\n350\r\n00:18:19.471 --> 00:18:22.045\r\nthere's a couple of ways in which\r\nyou can actually run your script.\r\n\r\n351\r\n00:18:22.045 --> 00:18:25.335\r\nSometimes you wanna run it in\r\nthe shell that you're actually in.\r\n\r\n352\r\n00:18:25.335 --> 00:18:27.031\r\nSo that's an important thing.\r\n\r\n353\r\n00:18:27.031 --> 00:18:32.082\r\nTo do that we can just run in it\r\nusing a different type of command.\r\n\r\n354\r\n00:18:32.082 --> 00:18:36.253\r\nInstead of this ./,\r\nwe can do, let's see here,\r\n\r\n355\r\n00:18:36.253 --> 00:18:39.555\r\nsource is probably one of the best ones.\r\n\r\n356\r\n00:18:39.555 --> 00:18:44.234\r\nWe can just say source, like this,\r\njust type in the word source, and\r\n\r\n357\r\n00:18:44.234 --> 00:18:47.552\r\nthen hello.sh and\r\nit runs right inside of this.\r\n\r\n358\r\n00:18:47.552 --> 00:18:50.982\r\nSo any variables that I wanted to\r\nuse that were used in that and\r\n\r\n359\r\n00:18:50.982 --> 00:18:55.034\r\nthey're local to this shell,\r\nthey'll get used, so if I wanna use it.\r\n\r\n360\r\n00:18:55.034 --> 00:18:58.981\r\nThere's also a synonym to this,\r\njust a period and then a space.\r\n\r\n361\r\n00:18:58.981 --> 00:19:02.125\r\nHello.sh, if I can do that.\r\n\r\n362\r\n00:19:02.125 --> 00:19:05.905\r\nDoes the same thing, it's synonymous with\r\nrunning within the shell that you're\r\n\r\n363\r\n00:19:05.905 --> 00:19:07.886\r\nalready in, so\r\nkeep that in mind as you go.\r\n\r\n364\r\n00:19:07.886 --> 00:19:10.458\r\nBut normally it's fine to jump a subshell.\r\n\r\n365\r\n00:19:10.458 --> 00:19:13.950\r\nNot a big deal, especially if we're\r\nnot getting crazy variable stuff,\r\n\r\n366\r\n00:19:13.950 --> 00:19:15.890\r\njust a standard script like this.\r\n\r\n367\r\n00:19:15.890 --> 00:19:20.658\r\nJust do the ./hello.sh,\r\nand you're good to go.\r\n\r\n368\r\n00:19:20.658 --> 00:19:23.287\r\nCan also kinda,\r\nwhat Ronnie was talking about earlier,\r\n\r\n369\r\n00:19:23.287 --> 00:19:26.420\r\nwhen you say, can you use another\r\nshell when we invoke that script?\r\n\r\n370\r\n00:19:26.420 --> 00:19:30.396\r\nYou can actually do that from the command\r\nline as well, just by saying,\r\n\r\n371\r\n00:19:30.396 --> 00:19:31.602\r\nuse C shell, right?\r\n\r\n372\r\n00:19:31.602 --> 00:19:36.021\r\nI could do CSH or just old SH if you\r\nactually have, it's not pointing to that\r\n\r\n373\r\n00:19:36.021 --> 00:19:39.389\r\nbash, you actually have the old\r\nborn shell installed and\r\n\r\n374\r\n00:19:39.389 --> 00:19:42.924\r\nmaybe you've written a script\r\nthat's specific for that.\r\n\r\n375\r\n00:19:42.924 --> 00:19:44.596\r\nYou need to be compliant there.\r\n\r\n376\r\n00:19:44.596 --> 00:19:46.154\r\nYou can just do SH and then your shell,\r\n\r\n377\r\n00:19:46.154 --> 00:19:48.799\r\nit'll run in the old born shell\r\ninstead of the born again shell.\r\n\r\n378\r\n00:19:48.799 --> 00:19:50.541\r\nSo, you could do that there, very simple.\r\n\r\n379\r\n00:19:50.541 --> 00:19:51.840\r\nI'm not gonna waste your time with that.\r\n\r\n380\r\n00:19:51.840 --> 00:19:54.270\r\nLet's keep the ball rolling.\r\n\r\n381\r\n00:19:54.270 --> 00:19:59.680\r\nLet's see here, let's talk about our\r\nshell here, our script should I say,\r\n\r\n382\r\n00:19:59.680 --> 00:20:04.670\r\nit's cool, it's neat, it does a little\r\necho thing, not really that awesome.\r\n\r\n383\r\n00:20:04.670 --> 00:20:06.797\r\nI want something practical.\r\n\r\n384\r\n00:20:06.797 --> 00:20:10.441\r\nWe've seen the theory,\r\nnow let's move into the practical, right,\r\n\r\n385\r\n00:20:10.441 --> 00:20:13.368\r\nlet's make this thing do\r\nsomething other than be lame.\r\n\r\n386\r\n00:20:13.368 --> 00:20:16.820\r\nAnd say Hello World, whoop dee do.\r\n\r\n387\r\n00:20:16.820 --> 00:20:18.240\r\nSo let's create a new shell, I'm sorry,\r\n\r\n388\r\n00:20:18.240 --> 00:20:20.180\r\nI don't wanna create another shell,\r\na new script.\r\n\r\n389\r\n00:20:20.180 --> 00:20:21.896\r\nLet's create a new script.\r\n\r\n390\r\n00:20:21.896 --> 00:20:27.666\r\nI'm gonna create a script, and\r\nlet's say we want it to copy a file,\r\n\r\n391\r\n00:20:27.666 --> 00:20:31.832\r\nand make a backup of it\r\nto a different directory.\r\n\r\n392\r\n00:20:31.832 --> 00:20:37.172\r\nAnd then we'll create a new file\r\nwith some information in it.\r\n\r\n393\r\n00:20:37.172 --> 00:20:38.810\r\nAnd then once that's done,\r\n\r\n394\r\n00:20:38.810 --> 00:20:41.910\r\nwe'll make sure that it's done\r\nby echoing the word, success.\r\n\r\n395\r\n00:20:41.910 --> 00:20:43.095\r\nEverything will work correctly.\r\n\r\n396\r\n00:20:43.095 --> 00:20:46.891\r\nCuz if I get to the bottom of my script\r\nand the last thing is like echo some word\r\n\r\n397\r\n00:20:46.891 --> 00:20:49.263\r\nand that word is the only\r\nthing that comes out.\r\n\r\n398\r\n00:20:49.263 --> 00:20:50.493\r\nWell than I know everything worked.\r\n\r\n399\r\n00:20:50.493 --> 00:20:54.165\r\nCuz it sifted through that stuff,\r\nunless I'm redirecting output,\r\n\r\n400\r\n00:20:54.165 --> 00:20:58.590\r\nwhich we're not gonna get into that, well\r\nactually we are, we are gonna do that.\r\n\r\n401\r\n00:20:58.590 --> 00:20:59.310\r\n>> So yeah, no sorry.\r\n\r\n402\r\n00:20:59.310 --> 00:21:00.919\r\nGo ahead, Ronnie.\r\n>> So remember that what Daniel's\r\n\r\n403\r\n00:21:00.919 --> 00:21:02.377\r\nactually describing, right,\r\n\r\n404\r\n00:21:02.377 --> 00:21:05.516\r\nis he's given us a list of things\r\nthat he really wants to accomplish.\r\n\r\n405\r\n00:21:05.516 --> 00:21:09.741\r\nBut what he's saying is that what he's\r\ngonna do is he's gonna put all of those\r\n\r\n406\r\n00:21:09.741 --> 00:21:14.098\r\ndifferent commands into a file and then\r\nmake that file into an executable file.\r\n\r\n407\r\n00:21:14.098 --> 00:21:17.156\r\nThat then should actually run each of\r\nthose commands from the top of the list to\r\n\r\n408\r\n00:21:17.156 --> 00:21:20.090\r\nthe bottom of the list, and\r\nthen hopefully print out something, right?\r\n\r\n409\r\n00:21:20.090 --> 00:21:21.831\r\n>> That is exactly right.\r\n\r\n410\r\n00:21:21.831 --> 00:21:25.231\r\nThat is like we said at the beginning of\r\nthe show, that's what these scripts do.\r\n\r\n411\r\n00:21:25.231 --> 00:21:28.022\r\nThey work their way through a list\r\nof commands and once they're done,\r\n\r\n412\r\n00:21:28.022 --> 00:21:29.836\r\nit exits out,\r\ngives you your terminal back.\r\n\r\n413\r\n00:21:29.836 --> 00:21:33.224\r\nNow, I was gonna create this whole thing,\r\nbut that would take forever and\r\n\r\n414\r\n00:21:33.224 --> 00:21:35.259\r\nwe got a limited amount\r\nof time on this show.\r\n\r\n415\r\n00:21:35.259 --> 00:21:37.418\r\nSo I've done some preworking.\r\n\r\n416\r\n00:21:37.418 --> 00:21:41.628\r\nWe're sticking the undone turkey into the\r\noven, and now we're pulling out the done\r\n\r\n417\r\n00:21:41.628 --> 00:21:44.778\r\nturkey to go look at the magic\r\nof television, so much fun.\r\n\r\n418\r\n00:21:44.778 --> 00:21:46.634\r\nSo I've got a couple of scripts here,\r\n\r\n419\r\n00:21:46.634 --> 00:21:50.175\r\nyou'll notice that I'll just clear\r\nthis screen make this easier, ls.\r\n\r\n420\r\n00:21:50.175 --> 00:21:57.490\r\nI've got these two scripts right here,\r\nthis back.sh1 and backup2.sh.\r\n\r\n421\r\n00:21:57.490 --> 00:21:58.490\r\nI've created these.\r\n\r\n422\r\n00:21:58.490 --> 00:22:00.234\r\nLet's start with backup1, and\r\nthen we'll see how it works.\r\n\r\n423\r\n00:22:00.234 --> 00:22:05.222\r\nAnd then we'll see if we can't improve\r\nthat a little bit using some of\r\n\r\n424\r\n00:22:05.222 --> 00:22:08.180\r\nthe things we've learned in backup2.\r\n\r\n425\r\n00:22:08.180 --> 00:22:09.722\r\nSo let's take a look at backup1.\r\n\r\n426\r\n00:22:09.722 --> 00:22:14.732\r\nI will nano that so\r\nwe get all the nice highlighting.\r\n\r\n427\r\n00:22:14.732 --> 00:22:19.837\r\nBackup, if I can spell, backup1.sh.\r\n\r\n428\r\n00:22:19.837 --> 00:22:25.057\r\nSo you'll notice that the first thing I've\r\ndone is I've put the lovely shabang there.\r\n\r\n429\r\n00:22:25.057 --> 00:22:27.727\r\nWith bin bash and\r\nletting it know what it needs to know, and\r\n\r\n430\r\n00:22:27.727 --> 00:22:29.591\r\nI've thrown a couple of commands in it.\r\n\r\n431\r\n00:22:29.591 --> 00:22:32.180\r\nVery straight forward,\r\nnothing fancy going on here.\r\n\r\n432\r\n00:22:32.180 --> 00:22:38.354\r\nI've got the copy command, and I want to\r\ncopy this directory and this file name.\r\n\r\n433\r\n00:22:38.354 --> 00:22:41.093\r\nSo if that files there, it will copy it.\r\n\r\n434\r\n00:22:41.093 --> 00:22:45.362\r\nAnd then I want to copy it to this\r\ndirectory with this file name.\r\n\r\n435\r\n00:22:45.362 --> 00:22:49.742\r\nAnd then if I get the errors like so\r\nI don't know, maybe file does not exist,\r\n\r\n436\r\n00:22:49.742 --> 00:22:51.527\r\nI don't care about the error.\r\n\r\n437\r\n00:22:51.527 --> 00:22:53.280\r\nIt's fine, just go ahead and copy it and\r\n\r\n438\r\n00:22:53.280 --> 00:22:56.390\r\nif there's nothing there don't worry\r\nabout it, it's not a big deal.\r\n\r\n439\r\n00:22:56.390 --> 00:22:58.456\r\nThat just means there's nothing to copy.\r\n\r\n440\r\n00:22:58.456 --> 00:23:03.362\r\nAnd so I'm redirecting that standard\r\nerror to the middle of nowhere,\r\n\r\n441\r\n00:23:03.362 --> 00:23:05.283\r\nwhich is good old dev null.\r\n\r\n442\r\n00:23:05.283 --> 00:23:06.095\r\nAnd then what am I doing?\r\n\r\n443\r\n00:23:06.095 --> 00:23:11.898\r\nI'm doing hostname -I which\r\nwill just return my IP address.\r\n\r\n444\r\n00:23:11.898 --> 00:23:12.651\r\nOkay, and\r\n\r\n445\r\n00:23:12.651 --> 00:23:18.361\r\nthen I'm redirecting that output into\r\na file that is located in this directory.\r\n\r\n446\r\n00:23:18.361 --> 00:23:20.449\r\nSo the name of the file is ipadd.txt.\r\n\r\n447\r\n00:23:20.449 --> 00:23:24.936\r\nIt's located in home/user1/Data/Network,\r\nand we're good to go.\r\n\r\n448\r\n00:23:24.936 --> 00:23:29.225\r\nThen I'm going to run the date command\r\nthat tells me what the date and\r\n\r\n449\r\n00:23:29.225 --> 00:23:31.935\r\ntime was when this script actually ran, so\r\n\r\n450\r\n00:23:31.935 --> 00:23:35.113\r\nthat I can keep a record\r\nof This actually working.\r\n\r\n451\r\n00:23:35.113 --> 00:23:36.841\r\nAnd I do that here,\r\n\r\n452\r\n00:23:36.841 --> 00:23:42.467\r\nI just append the output to this\r\ndirectory and this file name.\r\n\r\n453\r\n00:23:42.467 --> 00:23:45.227\r\nAnd we echo success at the end letting\r\nus know everything went fine, and\r\n\r\n454\r\n00:23:45.227 --> 00:23:46.905\r\nwe're good to go.\r\n\r\n455\r\n00:23:46.905 --> 00:23:51.358\r\nOnce I run this script, if it finds\r\nsomething in that backup, which it\r\n\r\n456\r\n00:23:51.358 --> 00:23:56.337\r\nprobably is cuz I've run this a couple\r\ntimes, and we'll clear that out just to\r\n\r\n457\r\n00:23:56.337 --> 00:24:01.791\r\nmake sure this runs like it's white as the\r\ndriven snow, and we'll see what happens.\r\n\r\n458\r\n00:24:01.791 --> 00:24:04.772\r\n>> Now, Daniel before we go on here,\r\nit's nice to actually see,\r\n\r\n459\r\n00:24:04.772 --> 00:24:07.435\r\nlike in the episodes that\r\nwe've actually done before.\r\n\r\n460\r\n00:24:07.435 --> 00:24:11.857\r\nThese are all the commands that we have\r\nlearned about in the previous episodes in\r\n\r\n461\r\n00:24:11.857 --> 00:24:13.849\r\nour bash and scripting show so far.\r\n\r\n462\r\n00:24:13.849 --> 00:24:17.666\r\nSo we can actually easily interpret and\r\nsee what's gonna happen here, and this is\r\n\r\n463\r\n00:24:17.666 --> 00:24:21.225\r\nwhy we took so much time in saying,\r\nhey look, here's what needs to be done.\r\n\r\n464\r\n00:24:21.225 --> 00:24:24.355\r\nAnd so Daniel is now actually\r\nlinking them all together.\r\n\r\n465\r\n00:24:24.355 --> 00:24:25.835\r\nAnd now here's what the output should be.\r\n\r\n466\r\n00:24:25.835 --> 00:24:27.355\r\nIf everything works\r\nthe way that it should,\r\n\r\n467\r\n00:24:27.355 --> 00:24:29.455\r\nwe should get a nice little\r\nprintout that says success.\r\n\r\n468\r\n00:24:29.455 --> 00:24:33.030\r\nAnd then, Daniel whatever else\r\nactually shows up, should be cool.\r\n\r\n469\r\n00:24:33.030 --> 00:24:33.782\r\n>> That's it, that's it.\r\n\r\n470\r\n00:24:33.782 --> 00:24:34.785\r\nThat's exactly what we want.\r\n\r\n471\r\n00:24:34.785 --> 00:24:37.715\r\nWe just want it to run through\r\nthese commands, and get our output.\r\n\r\n472\r\n00:24:37.715 --> 00:24:42.365\r\nSo, basically what we're doing is we're\r\ncreating a backup of one file and then\r\n\r\n473\r\n00:24:42.365 --> 00:24:45.895\r\ncreating a new file, that if we run the\r\nscript again it will back up that file,\r\n\r\n474\r\n00:24:45.895 --> 00:24:48.065\r\ndelete the old one and\r\nwe're off to the races.\r\n\r\n475\r\n00:24:48.065 --> 00:24:49.265\r\nSo, very, very cool.\r\n\r\n476\r\n00:24:49.265 --> 00:24:51.175\r\nLet's see if this guy works or not.\r\n\r\n477\r\n00:24:51.175 --> 00:24:55.015\r\nThe first thing I do want to do,\r\n\r\n478\r\n00:24:55.015 --> 00:24:59.205\r\nis you'll notice there is the file path,\r\nor our part of it.\r\n\r\n479\r\n00:24:59.205 --> 00:25:03.145\r\nSo, I'm going to go in there\r\nI'm going to say cd /data,\r\n\r\n480\r\n00:25:03.145 --> 00:25:06.375\r\nI don't need the slash, there we go.\r\n\r\n481\r\n00:25:06.375 --> 00:25:10.252\r\nAnd I'm going to go into back up and\r\nmake sure I delete all of those.\r\n\r\n482\r\n00:25:10.252 --> 00:25:15.065\r\nYeah, there's one, so I'm gonna remove\r\nthat and then I'm gonna go into backup\r\n\r\n483\r\n00:25:15.065 --> 00:25:20.495\r\nthat a little bit and\r\ngo into network, yeah, there we go.\r\n\r\n484\r\n00:25:20.495 --> 00:25:22.812\r\nI'm gonna remove all these files\r\ncuz I was testing it earlier.\r\n\r\n485\r\n00:25:22.812 --> 00:25:23.578\r\nAnd there we go.\r\n\r\n486\r\n00:25:23.578 --> 00:25:26.623\r\nSo now we have a pristine\r\nenvironment in which to work with.\r\n\r\n487\r\n00:25:26.623 --> 00:25:29.386\r\nAnd everything should run like butter.\r\n\r\n488\r\n00:25:29.386 --> 00:25:36.215\r\nSo let's go back to our\r\noriginal thing here.\r\n\r\n489\r\n00:25:36.215 --> 00:25:38.758\r\nLet's run our script ./backup1.sh.\r\n\r\n490\r\n00:25:38.758 --> 00:25:39.435\r\nHere we go.\r\n\r\n491\r\n00:25:39.435 --> 00:25:40.815\r\nGood thing is no errors.\r\n\r\n492\r\n00:25:40.815 --> 00:25:43.056\r\nNow we were redirecting some errors so\r\n\r\n493\r\n00:25:43.056 --> 00:25:46.005\r\nthere might be an error\r\nthat i'm just not seeing.\r\n\r\n494\r\n00:25:46.005 --> 00:25:50.975\r\nWe'll see if that happens,\r\nand if it does anything.\r\n\r\n495\r\n00:25:50.975 --> 00:25:51.805\r\nAnd I did get to success, and\r\n\r\n496\r\n00:25:51.805 --> 00:25:55.215\r\nthere were no error redirections\r\non some of this stuff.\r\n\r\n497\r\n00:25:55.215 --> 00:25:57.045\r\nSo, I know at least it got through, right?\r\n\r\n498\r\n00:25:57.045 --> 00:25:58.505\r\nIt made it through my script.\r\n\r\n499\r\n00:25:58.505 --> 00:26:01.035\r\nSo, let's take a look,\r\nand we will go into data.\r\n\r\n500\r\n00:26:01.035 --> 00:26:05.405\r\nAnd if I can actually finish that.\r\n\r\n501\r\n00:26:05.405 --> 00:26:08.975\r\nMy pinky finger just isn't\r\nquite quick enough sometimes.\r\n\r\n502\r\n00:26:08.975 --> 00:26:14.785\r\nAnd let's go into network and\r\nif I do an there is the remember\r\n\r\n503\r\n00:26:14.785 --> 00:26:18.615\r\nI removed the old one it was there before,\r\nand I made this nice and white for\r\n\r\n504\r\n00:26:18.615 --> 00:26:22.995\r\nus to clean as a whistle, so that if\r\nit created any output it would be here.\r\n\r\n505\r\n00:26:22.995 --> 00:26:28.715\r\nSo there it is and we can cap that\r\nfile and there's my IP address and\r\n\r\n506\r\n00:26:28.715 --> 00:26:33.795\r\nit gives me the date and time in which\r\nit actually generated this output.\r\n\r\n507\r\n00:26:33.795 --> 00:26:34.475\r\nAwesome.\r\n\r\n508\r\n00:26:34.475 --> 00:26:35.930\r\nLet's check out that backup file.\r\n\r\n509\r\n00:26:35.930 --> 00:26:41.108\r\nGo back and see the end of back up.\r\n\r\n510\r\n00:26:41.108 --> 00:26:42.849\r\nAnd there's nothing there.\r\n\r\n511\r\n00:26:42.849 --> 00:26:45.015\r\nSo obviously there was\r\nan error generated but\r\n\r\n512\r\n00:26:45.015 --> 00:26:47.754\r\nit did what I wanted it to do\r\nwas don't give me that error.\r\n\r\n513\r\n00:26:47.754 --> 00:26:52.483\r\nI don't care whether or not it actually\r\nhas a problem with backing that up.\r\n\r\n514\r\n00:26:52.483 --> 00:26:56.294\r\nI just want it to go through, because if\r\nthere's nothing to back up there would\r\n\r\n515\r\n00:26:56.294 --> 00:26:58.915\r\nhave been an error to generate so\r\nI didn't want that.\r\n\r\n516\r\n00:26:58.915 --> 00:26:59.955\r\nI I got rid of that with that.\r\n\r\n517\r\n00:26:59.955 --> 00:27:00.995\r\nSo now we're good to go.\r\n\r\n518\r\n00:27:00.995 --> 00:27:02.035\r\nLet's run it again.\r\n\r\n519\r\n00:27:02.035 --> 00:27:03.095\r\nLet's see what happens.\r\n\r\n520\r\n00:27:03.095 --> 00:27:10.541\r\nWe go back and there we go ./backup1.sh.\r\n\r\n521\r\n00:27:10.541 --> 00:27:12.352\r\nSuccess again.\r\n\r\n522\r\n00:27:12.352 --> 00:27:13.628\r\nNow let's check that backup folder.\r\n\r\n523\r\n00:27:13.628 --> 00:27:18.505\r\nAnd I'll just do an ls-Data/Backup/.\r\n\r\n524\r\n00:27:18.505 --> 00:27:22.011\r\nAnd look, now it has the file cuz\r\nit had something to actually copy.\r\n\r\n525\r\n00:27:22.011 --> 00:27:23.055\r\nSo there was no error.\r\n\r\n526\r\n00:27:23.055 --> 00:27:24.865\r\nIt did what it was supposed to do.\r\n\r\n527\r\n00:27:24.865 --> 00:27:26.465\r\nAnd we're good to go.\r\n\r\n528\r\n00:27:26.465 --> 00:27:28.505\r\nNow you might be thinking,\r\nthis is so cool.\r\n\r\n529\r\n00:27:28.505 --> 00:27:31.395\r\nEverything is working exactly\r\nlike you wanted it to.\r\n\r\n530\r\n00:27:31.395 --> 00:27:32.555\r\nBut here's the thing.\r\n\r\n531\r\n00:27:32.555 --> 00:27:36.415\r\nMy script is a little clunky,\r\na little dirty.\r\n\r\n532\r\n00:27:36.415 --> 00:27:37.695\r\nIt's not great, it's not eloquent.\r\n\r\n533\r\n00:27:37.695 --> 00:27:42.790\r\nLet's see if we can't make it a little\r\nmore what we like to call portable.\r\n\r\n534\r\n00:27:42.790 --> 00:27:47.375\r\nCuz like I said before, maybe Ronnie\r\nsays man that's a great script.\r\n\r\n535\r\n00:27:47.375 --> 00:27:50.626\r\nI could do that on another\r\nfile I would like to back up,\r\n\r\n536\r\n00:27:50.626 --> 00:27:55.422\r\nthe problem is that his file structure's\r\ndifferent, things of that nature.\r\n\r\n537\r\n00:27:55.422 --> 00:27:57.048\r\nSo what can we do?\r\n\r\n538\r\n00:27:57.048 --> 00:27:58.000\r\nVariables.\r\n\r\n539\r\n00:27:58.000 --> 00:27:58.744\r\nVariables are nice.\r\n\r\n540\r\n00:27:58.744 --> 00:28:01.575\r\nRemember we get to declare\r\nwhat that data is.\r\n\r\n541\r\n00:28:01.575 --> 00:28:06.054\r\nSo, I give Ronnie the file,\r\nhe could change some variable names and\r\n\r\n542\r\n00:28:06.054 --> 00:28:09.838\r\nthen he easily has ported that\r\nscript over to his system.\r\n\r\n543\r\n00:28:09.838 --> 00:28:11.696\r\nAll he had to do was do some\r\nvariable name changing.\r\n\r\n544\r\n00:28:11.696 --> 00:28:12.825\r\nMakes it a whole lot easier.\r\n\r\n545\r\n00:28:12.825 --> 00:28:15.695\r\nHe has to go through there and\r\nfind every word, there's a long.\r\n\r\n546\r\n00:28:15.695 --> 00:28:18.235\r\nYou saw some of those directory listings,\r\nthey were very long.\r\n\r\n547\r\n00:28:18.235 --> 00:28:20.727\r\nIt would take him forever to\r\ndo that with his own system.\r\n\r\n548\r\n00:28:20.727 --> 00:28:24.302\r\nGet rid of that stuff, re-input what\r\nhe needs, too much time and effort.\r\n\r\n549\r\n00:28:24.302 --> 00:28:26.136\r\nVariables are the way to go with this.\r\n\r\n550\r\n00:28:26.136 --> 00:28:30.505\r\nSo, let's play around with that.\r\n\r\n551\r\n00:28:30.505 --> 00:28:34.785\r\nThat's when I create [INAUDIBLE] a little\r\nmore nice, a little more neat, and\r\n\r\n552\r\n00:28:34.785 --> 00:28:36.218\r\na little more portable.\r\n\r\n553\r\n00:28:36.218 --> 00:28:39.078\r\nSo, let's nano backup2.sh and\r\ntake a look at here.\r\n\r\n554\r\n00:28:39.078 --> 00:28:41.595\r\nAll right, so\r\na whole lot more color, right?\r\n\r\n555\r\n00:28:41.595 --> 00:28:44.285\r\nIt's a whole lot cooler.\r\n\r\n556\r\n00:28:44.285 --> 00:28:46.693\r\nYou'll notice I created some variables\r\nat the beginning of my script.\r\n\r\n557\r\n00:28:46.693 --> 00:28:49.916\r\nI said IPADD is gonna\r\nequal this directory,\r\n\r\n558\r\n00:28:49.916 --> 00:28:56.025\r\nbackup is gonna equal this directory, text\r\nis gonna equal IPADD and BACKUP IPADD.\r\n\r\n559\r\n00:28:56.025 --> 00:29:00.795\r\nNow I could've just used one, but for\r\nthe sake of being more easily understood,\r\n\r\n560\r\n00:29:00.795 --> 00:29:04.495\r\nbeing descriptive, I created two different\r\nvariables with the exact same content so\r\n\r\n561\r\n00:29:04.495 --> 00:29:07.375\r\nthat I understand what's going\r\non at the bottom of the script.\r\n\r\n562\r\n00:29:07.375 --> 00:29:11.545\r\nIf I gave this to Ronnie, he should easily\r\nbe able to see what's happening and\r\n\r\n563\r\n00:29:11.545 --> 00:29:13.808\r\nnot have too much trouble interpreting.\r\n\r\n564\r\n00:29:13.808 --> 00:29:17.246\r\nI probably, I kind of threw this together\r\nin a hurry so it's not commented.\r\n\r\n565\r\n00:29:17.246 --> 00:29:18.145\r\nI should have commented this, and\r\n\r\n566\r\n00:29:18.145 --> 00:29:20.385\r\nthat would be the next thing\r\nI would do with this script.\r\n\r\n567\r\n00:29:20.385 --> 00:29:24.604\r\nBut down here below,\r\nwe see that's what are we doing?\r\n\r\n568\r\n00:29:24.604 --> 00:29:25.348\r\nWe're doing the same thing.\r\n\r\n569\r\n00:29:25.348 --> 00:29:31.031\r\nWe're copying, but this time I'm\r\nreferencing my actual variable names,\r\n\r\n570\r\n00:29:31.031 --> 00:29:36.733\r\ninstead of printing out those long drawn\r\nout directories that I had before.\r\n\r\n571\r\n00:29:36.733 --> 00:29:41.885\r\nI can say IP add, there is IP text and\r\nI just put .txt on the end.\r\n\r\n572\r\n00:29:41.885 --> 00:29:45.065\r\nAnother way for portability,\r\nwhat if Ronnie didn't want it to be .txt?\r\n\r\n573\r\n00:29:45.065 --> 00:29:47.820\r\nWhat if he wanted some other file name?\r\n\r\n574\r\n00:29:47.820 --> 00:29:49.635\r\nHe'd easily change that\r\nfile extension right there.\r\n\r\n575\r\n00:29:49.635 --> 00:29:51.665\r\nSame thing for the back up.\r\n\r\n576\r\n00:29:51.665 --> 00:29:54.933\r\nIf he didn't want .bac,\r\nmaybe he wanted .back and\r\n\r\n577\r\n00:29:54.933 --> 00:29:57.247\r\nthat's what he likes on his system.\r\n\r\n578\r\n00:29:57.247 --> 00:29:58.855\r\nHe can easily change that here as well.\r\n\r\n579\r\n00:29:58.855 --> 00:30:03.515\r\nSo we cleaned it up, we've concised things\r\nup, we made it a whole lot nicer and\r\n\r\n580\r\n00:30:03.515 --> 00:30:07.135\r\neasier and again portability,\r\nthat was the key with this guy.\r\n\r\n581\r\n00:30:07.135 --> 00:30:12.055\r\nAnd again doing a host name, same kind\r\nof idea, date and then echo success.\r\n\r\n582\r\n00:30:12.055 --> 00:30:16.095\r\n>> Now Daniel there's only one thing that\r\nconfused me probably just cuz I don't\r\n\r\n583\r\n00:30:16.095 --> 00:30:17.445\r\nreally understand a lot of it, but\r\n\r\n584\r\n00:30:17.445 --> 00:30:19.665\r\nwhen you have the two dollar\r\nsigns there in the red.\r\n\r\n585\r\n00:30:19.665 --> 00:30:23.635\r\nWhy did you have to do IP add and\r\nthen dollar sign txt there?\r\n\r\n586\r\n00:30:23.635 --> 00:30:25.345\r\n>> Because it's two different variables.\r\n\r\n587\r\n00:30:25.345 --> 00:30:29.766\r\nRemember to reference a variable you do\r\na dollar sign and then the variable name.\r\n\r\n588\r\n00:30:29.766 --> 00:30:33.317\r\nSo, I wanted them to be together with no\r\nspace apart from them because that would\r\n\r\n589\r\n00:30:33.317 --> 00:30:34.775\r\nmess up my script.\r\n\r\n590\r\n00:30:34.775 --> 00:30:39.975\r\nSo I put the first variable which is\r\ndollar sign IP add butted right up\r\n\r\n591\r\n00:30:39.975 --> 00:30:43.212\r\nnext to the other\r\nvariable dollar sign txt.\r\n\r\n592\r\n00:30:43.212 --> 00:30:46.125\r\nSo that puts those two\r\nright together that way\r\n\r\n593\r\n00:30:46.125 --> 00:30:47.415\r\nI don't have to add more text to my file.\r\n\r\n594\r\n00:30:47.415 --> 00:30:50.296\r\nI can put it all inside\r\nthe variable itself.\r\n\r\n595\r\n00:30:50.296 --> 00:30:53.408\r\n>> So what we're seeing there is\r\nactually the path with the IP add.\r\n\r\n596\r\n00:30:53.408 --> 00:30:53.941\r\n>> Mm-hm.\r\n>> And\r\n\r\n597\r\n00:30:53.941 --> 00:30:57.414\r\nthen the name of that file with\r\nthe txt with the dollar sign there and\r\n\r\n598\r\n00:30:57.414 --> 00:30:58.915\r\nthat just puts it all as one.\r\n\r\n599\r\n00:30:58.915 --> 00:31:00.585\r\nSo it's saying copy that whole path.\r\n\r\n600\r\n00:31:00.585 --> 00:31:01.103\r\n>> Right.\r\n>> And\r\n\r\n601\r\n00:31:01.103 --> 00:31:03.464\r\nthen copy it to this whole path here.\r\n\r\n602\r\n00:31:03.464 --> 00:31:04.044\r\n>> That's exactly right.\r\n\r\n603\r\n00:31:04.044 --> 00:31:05.005\r\n>> Okay, just want to make sure.\r\n\r\n604\r\n00:31:05.005 --> 00:31:08.075\r\n>> If this was Ronnie and I gave it to\r\nhim, he could go right in here and say,\r\n\r\n605\r\n00:31:08.075 --> 00:31:13.305\r\nwell I don't want to backup IPADD,\r\nI wanna backup my syslog, right.\r\n\r\n606\r\n00:31:13.305 --> 00:31:16.400\r\nSo, and it's, we'll say it's syslog.sys.\r\n\r\n607\r\n00:31:16.400 --> 00:31:20.147\r\nHe could go right in here,\r\nchange txt to be syslog, and\r\n\r\n608\r\n00:31:20.147 --> 00:31:25.858\r\nthen change .txt here to be .sys, and\r\nthen this script will work for him, right.\r\n\r\n609\r\n00:31:25.858 --> 00:31:30.314\r\nHe would have to have the directory\r\nstructure as well, but barring that fact,\r\n\r\n610\r\n00:31:30.314 --> 00:31:34.703\r\nall he has to do is make the modifications\r\nto the variables instead of changing\r\n\r\n611\r\n00:31:34.703 --> 00:31:36.815\r\neverywhere that I have referenced.\r\n\r\n612\r\n00:31:36.815 --> 00:31:43.105\r\nWhat if I had five different copies and\r\nthey were all to different directories.\r\n\r\n613\r\n00:31:43.105 --> 00:31:44.359\r\nIt would be a bear.\r\n\r\n614\r\n00:31:44.359 --> 00:31:47.717\r\nI make one variable with the same\r\ndirectory name I can now make five copies\r\n\r\n615\r\n00:31:47.717 --> 00:31:48.993\r\nwith just a variable name.\r\n\r\n616\r\n00:31:48.993 --> 00:31:50.060\r\nMakes it a lot easier.\r\n\r\n617\r\n00:31:50.060 --> 00:31:51.453\r\nSo let's see if this guy will run Ronnie.\r\n\r\n618\r\n00:31:51.453 --> 00:31:54.031\r\nLet's do the old thing.\r\n\r\n619\r\n00:31:54.031 --> 00:31:59.585\r\nWe will do ./backup2.sh and\r\nwe get success.\r\n\r\n620\r\n00:31:59.585 --> 00:32:02.945\r\nNow only one way to actually\r\nknow if this ran correctly is,\r\n\r\n621\r\n00:32:02.945 --> 00:32:06.495\r\nlet's check those date stamps and\r\nsee if the times have changed.\r\n\r\n622\r\n00:32:06.495 --> 00:32:10.185\r\nSo the backup should be the one\r\nthat we ran from backup1.\r\n\r\n623\r\n00:32:10.185 --> 00:32:12.732\r\nIt's been replaced with\r\nthe one we created there, so\r\n\r\n624\r\n00:32:12.732 --> 00:32:16.426\r\nit should be that old time stamp and the\r\nnew one should be a current time stamp.\r\n\r\n625\r\n00:32:16.426 --> 00:32:21.524\r\nSo let's first check,\r\ncat Data/Network/ and\r\n\r\n626\r\n00:32:21.524 --> 00:32:26.248\r\nIPadd.txt and\r\nwe'll see that that should be\r\n\r\n627\r\n00:32:26.248 --> 00:32:30.365\r\nthe current date and time right there.\r\n\r\n628\r\n00:32:30.365 --> 00:32:35.885\r\n16:50 which I believe is 4:50 in the\r\nafternoon here on Eastern Standard Time.\r\n\r\n629\r\n00:32:35.885 --> 00:32:38.767\r\nAs you can see, great good for\r\nus, I can count.\r\n\r\n630\r\n00:32:38.767 --> 00:32:44.285\r\n[LAUGH] And if we cat Data/backup/ipadd,\r\n\r\n631\r\n00:32:44.285 --> 00:32:49.875\r\nyou'll see this is a little bit older,\r\nfour minutes ago.\r\n\r\n632\r\n00:32:49.875 --> 00:32:53.375\r\nThat's when we created that first\r\noriginal file, it backed it up.\r\n\r\n633\r\n00:32:53.375 --> 00:32:56.915\r\nEverything ran great my script runs, it's\r\nnow portable, I can give it to Ronnie.\r\n\r\n634\r\n00:32:56.915 --> 00:32:58.295\r\nEverything's running fantastically.\r\n\r\n635\r\n00:32:58.295 --> 00:33:03.139\r\nAnd now we understand the basics and\r\nthe good foundation that we need for\r\n\r\n636\r\n00:33:03.139 --> 00:33:05.979\r\nwhen we look at more advanced scripting.\r\n\r\n637\r\n00:33:05.979 --> 00:33:06.815\r\nWhat's going on there.\r\n\r\n638\r\n00:33:06.815 --> 00:33:07.859\r\nWe've worked with variables.\r\n\r\n639\r\n00:33:07.859 --> 00:33:08.925\r\nWe've worked with commands.\r\n\r\n640\r\n00:33:08.925 --> 00:33:11.985\r\nEverything works fine and\r\nwe see how that goes.\r\n\r\n641\r\n00:33:11.985 --> 00:33:15.985\r\nThat should give you a good foundation for\r\nwhen we start bumping it up.\r\n\r\n642\r\n00:33:15.985 --> 00:33:18.745\r\n>> Awesome, Daniel that sounds\r\nlike a great place to begin.\r\n\r\n643\r\n00:33:18.745 --> 00:33:22.045\r\nGet's us a little bit excited we can\r\nsee some of the stuff that we've been\r\n\r\n644\r\n00:33:22.045 --> 00:33:23.195\r\nlearning a little bit earlier.\r\n\r\n645\r\n00:33:23.195 --> 00:33:26.175\r\nEven though you might ask how does\r\nthis really slow it at some points.\r\n\r\n646\r\n00:33:26.175 --> 00:33:28.825\r\nBut the very fact is that\r\nfoundational knowledge helps\r\n\r\n647\r\n00:33:28.825 --> 00:33:30.065\r\nthis part go so much faster.\r\n\r\n648\r\n00:33:30.065 --> 00:33:32.985\r\nAnd that's what we're actually\r\nbeginning to see here as well.\r\n\r\n649\r\n00:33:32.985 --> 00:33:35.955\r\nSo don't forget that we did actually\r\ncreate a couple of different scripts.\r\n\r\n650\r\n00:33:35.955 --> 00:33:37.335\r\nIt didn't allow us to run them.\r\n\r\n651\r\n00:33:37.335 --> 00:33:40.680\r\nDaniel also showed how we use the\r\nvariables that we also learned about in\r\n\r\n652\r\n00:33:40.680 --> 00:33:41.693\r\nprevious episodes.\r\n\r\n653\r\n00:33:41.693 --> 00:33:46.655\r\nAnd that means that we are about ready to,\r\nto not only begin scripting, right.\r\n\r\n654\r\n00:33:46.655 --> 00:33:50.026\r\nWe're now ready to face a few more\r\nchallenges as we continue on, and\r\n\r\n655\r\n00:33:50.026 --> 00:33:51.633\r\nthere's a lot more for us to go.\r\n\r\n656\r\n00:33:51.633 --> 00:33:55.534\r\nNow Daniel, any other comments,\r\nlast words here on the basics?\r\n\r\n657\r\n00:33:55.534 --> 00:34:00.315\r\n>> My last words would be, when things\r\ngo wrong, you wanna debug your script.\r\n\r\n658\r\n00:34:00.315 --> 00:34:03.375\r\nYou're basically just looking though\r\nyour script and trying to find,\r\n\r\n659\r\n00:34:03.375 --> 00:34:07.855\r\nthe good thing is if I made an error,\r\nthere was a problem, I wasn't redirecting\r\n\r\n660\r\n00:34:07.855 --> 00:34:12.495\r\nanything, it would say error in syntax on\r\nline 12 or wherever that, the problem was.\r\n\r\n661\r\n00:34:12.495 --> 00:34:16.025\r\nSo that's always good, there's always\r\ninformation that's coming back from\r\n\r\n662\r\n00:34:16.025 --> 00:34:18.295\r\nthe system, so\r\nuse that information to find out.\r\n\r\n663\r\n00:34:18.295 --> 00:34:22.335\r\nCheck your syntax, check your typing,\r\nmake sure there's capitals and dashes and\r\n\r\n664\r\n00:34:22.335 --> 00:34:24.253\r\nthings like that are all\r\nin their proper place,\r\n\r\n665\r\n00:34:24.253 --> 00:34:28.766\r\ncuz it's gonna go crazy at you if\r\nyou don't do it exactly right.\r\n\r\n666\r\n00:34:28.766 --> 00:34:30.395\r\nSo make sure you check that for debugging.\r\n\r\n667\r\n00:34:30.395 --> 00:34:34.965\r\nThere's also ways to let the system\r\ndebug for you, using the set command.\r\n\r\n668\r\n00:34:34.965 --> 00:34:38.275\r\nBut we'll save that for\r\nanother time, another time and day.\r\n\r\n669\r\n00:34:38.275 --> 00:34:39.814\r\nWe'll through it in as a bonus round.\r\n\r\n670\r\n00:34:39.814 --> 00:34:41.554\r\n>> All right, well,\r\nthank you Daniel for helping us.\r\n\r\n671\r\n00:34:41.554 --> 00:34:46.504\r\nAt least to begin to see how powerful\r\nscripting can be even with just the simple\r\n\r\n672\r\n00:34:46.504 --> 00:34:47.964\r\ncommands of copy and.\r\n\r\n673\r\n00:34:47.964 --> 00:34:51.403\r\nAnd actually just navigating around\r\nthe operating system and how it works.\r\n\r\n674\r\n00:34:51.403 --> 00:34:55.118\r\nBut this is a great place for\r\nus to go ahead and end this episode.\r\n\r\n675\r\n00:34:55.118 --> 00:34:57.765\r\nSo signing off for\r\nITPro Tv I'm Ronnie Wong.\r\n\r\n676\r\n00:34:57.765 --> 00:34:58.577\r\n>> And I'm Daniel Lowry.\r\n\r\n677\r\n00:34:58.577 --> 00:34:59.925\r\n>> We'll see you next time.\r\n\r\n678\r\n00:34:59.925 --> 00:35:07.090\r\n[MUSIC]\r\n\r\n",
          "vimeoId": "146026766"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin to take a look at what it takes to create a script and why we use scripts.  They show the components of script creation and talk about why those element are included in scripts  After creating some scripts, they also show how to make them excitable and show the command used in debugging scripts you’ve created.",
          "length": "2202",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-12-1-logical_operators_in_bash-111315-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-12-1-logical_operators_in_bash-111315-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-12-1-logical_operators_in_bash-111315-1-sm.jpg",
          "title": "Logical Operators in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.157 --> 00:00:15.364\nWelcome to another exciting\nepisode right here on IT Pro TV.\n\n3\n00:00:15.364 --> 00:00:19.630\nI'm your host Ronnie Wong and today\nwe're taking that bash and scripting.\n\n4\n00:00:19.630 --> 00:00:23.200\nSpecifically though, we're talking\nabout logical operators, and really,\n\n5\n00:00:23.200 --> 00:00:26.860\nthat's what we have to\nactually deal with right now.\n\n6\n00:00:26.860 --> 00:00:30.440\nAnd who better to help us than well,\nMr. Daniel Lowery.\n\n7\n00:00:30.440 --> 00:00:36.508\nYou are here to help us understand why\ndo we need to bring logic into well,\n\n8\n00:00:36.508 --> 00:00:38.780\nwhat we're doing in scripting.\n\n9\n00:00:38.780 --> 00:00:42.040\n>> Really great question there Ronny,\nand the answer to that question is,\n\n10\n00:00:42.040 --> 00:00:43.530\nis because that's what scripting is.\n\n11\n00:00:43.530 --> 00:00:44.330\nIt is logic, right?\n\n12\n00:00:44.330 --> 00:00:47.390\nWe're kind of programming an output\nthat we want and if it doesn't have\n\n13\n00:00:47.390 --> 00:00:51.800\nany logic to it, we're, or our lives for\nthat matter, logic is something we need.\n\n14\n00:00:51.800 --> 00:00:55.820\nSo we've got to be able to work our\nway logically through a script,\n\n15\n00:00:55.820 --> 00:00:57.920\nto get the outcome that we're looking for.\n\n16\n00:00:57.920 --> 00:01:02.090\nAnd this is really important because,\nand not very much longer here,\n\n17\n00:01:02.090 --> 00:01:07.120\nthe next fifteen episodes we're going to\nbe getting into conditional statements.\n\n18\n00:01:07.120 --> 00:01:11.170\nAnd what doesn't conditional\nstatements rely on logic of some sort.\n\n19\n00:01:11.170 --> 00:01:13.890\nIf this, then this,\nif not that, then do this.\n\n20\n00:01:13.890 --> 00:01:16.550\nSo how do we define what this is and\nwhat that is and\n\n21\n00:01:16.550 --> 00:01:18.400\nthat there's a difference between the two.\n\n22\n00:01:18.400 --> 00:01:23.540\nAnd that's through logic, so\nthat's how we got to take a look at today,\n\n23\n00:01:23.540 --> 00:01:27.120\nso that when we move into conditional\nstatements, and loops, and\n\n24\n00:01:27.120 --> 00:01:31.720\nthings like that, we're not not\nunderstanding what's going on.\n\n25\n00:01:31.720 --> 00:01:36.550\nWe're gonna hear the word not a lot today,\nbecause that is part of logic itself.\n\n26\n00:01:36.550 --> 00:01:40.660\nThere's a lot of characters built into\nthe bash environment that we can use\n\n27\n00:01:40.660 --> 00:01:41.440\nin different ways.\n\n28\n00:01:41.440 --> 00:01:43.280\nIn different types of\nlogic of your math logic.\n\n29\n00:01:43.280 --> 00:01:46.760\nYou have string logic\ncomparing two things together.\n\n30\n00:01:46.760 --> 00:01:47.890\nAre they the same?\n\n31\n00:01:47.890 --> 00:01:48.970\nAre they different?\n\n32\n00:01:48.970 --> 00:01:53.060\nIf so how different are they and\nwhat way are they different?\n\n33\n00:01:53.060 --> 00:01:56.610\nThat's the kind of ideas that we're\nlooking at so that we can start writing\n\n34\n00:01:56.610 --> 00:02:00.580\nscripts that can us that to its\nadvantage for generating output we need.\n\n35\n00:02:00.580 --> 00:02:03.760\n>> Now Daniel, when we start talking\nabout the ideaologic operators,\n\n36\n00:02:03.760 --> 00:02:06.600\nwe do appreciate the very fact that\nwe know that things have to be\n\n37\n00:02:06.600 --> 00:02:10.279\nput into a certain order, but\nwe need to begin at the most basic, right?\n\n38\n00:02:10.279 --> 00:02:13.675\nOf being i'll say, the most basic\ncondition that we might have to meet of\n\n39\n00:02:13.675 --> 00:02:16.985\ncourse is deciding whether\nsomething is true or false.\n\n40\n00:02:16.985 --> 00:02:19.725\nSo we're talking about really at this\npoint where you may hear the term\n\n41\n00:02:19.725 --> 00:02:22.525\nbullion operator,\ndon't get hung up on that particular term.\n\n42\n00:02:22.525 --> 00:02:23.755\nBut overall though,\n\n43\n00:02:23.755 --> 00:02:26.785\nthat's what you're talking about\nis we talk about true or false.\n\n44\n00:02:26.785 --> 00:02:30.055\nSo we need a way to determine whether\na statement's gonna be true or\n\n45\n00:02:30.055 --> 00:02:31.595\nwhether a statement's gonna be false.\n\n46\n00:02:31.595 --> 00:02:32.415\nAnd we have to do that so\n\n47\n00:02:32.415 --> 00:02:35.210\nthat we can actually get some of\nthe stuff done that we need to.\n\n48\n00:02:35.210 --> 00:02:37.550\nLet me give you an example of\nwhat I'm talking about and\n\n49\n00:02:37.550 --> 00:02:39.060\nthen I'll turn it over to Daniel again,\ntoo.\n\n50\n00:02:39.060 --> 00:02:40.120\nSo right here on ITProTV,\n\n51\n00:02:40.120 --> 00:02:43.080\none of the things that we have to do if\nwe're hosting a show is fairly simple,\n\n52\n00:02:43.080 --> 00:02:46.450\nwe've gotta create descriptions for\nthe show, we've gotta add in keywords,\n\n53\n00:02:46.450 --> 00:02:49.940\nwe've gotta make sure that we\nhave all the things that we need.\n\n54\n00:02:49.940 --> 00:02:53.220\nAnd what has to be done of course\nthen is either I actually have to\n\n55\n00:02:53.220 --> 00:02:54.260\nkeep track of it.\n\n56\n00:02:54.260 --> 00:02:57.440\nBut what we can do is we can\nturn it over to our dev team.\n\n57\n00:02:57.440 --> 00:03:01.580\nAnd then say look,\nif I enter in the proper description and\n\n58\n00:03:01.580 --> 00:03:04.810\nI enter in the show title,\nthen it becomes a true statement and\n\n59\n00:03:04.810 --> 00:03:07.250\nat that point I can say\nthat I finished my part.\n\n60\n00:03:07.250 --> 00:03:09.730\nBut if I only fill in a part of it,\nright, and\n\n61\n00:03:09.730 --> 00:03:12.850\nit actually return to false,\nwell then it knows.\n\n62\n00:03:12.850 --> 00:03:16.370\nOr I should know, excuse me, that what\nshould happen is I need to enter in more\n\n63\n00:03:16.370 --> 00:03:18.270\ninformation before it lets me proceed on.\n\n64\n00:03:18.270 --> 00:03:22.610\nWell, we really use something like a\nboolean operator when we start doing this,\n\n65\n00:03:22.610 --> 00:03:26.140\nbut Daniel, you're actually gonna walk\nus through from the very beginning,\n\n66\n00:03:26.140 --> 00:03:30.720\nto just kind of help us out in working\nwith the operators a little bit better.\n\n67\n00:03:30.720 --> 00:03:32.060\n>> Yeah, that's exactly right.\n\n68\n00:03:32.060 --> 00:03:35.720\nRonnie really hit the nail on the head\nwhen he talked about things being true and\n\n69\n00:03:35.720 --> 00:03:36.330\nfalse.\n\n70\n00:03:36.330 --> 00:03:39.530\nThat is our most basic idea of logic when\nit comes to well a lot of things, but\n\n71\n00:03:39.530 --> 00:03:43.390\nspecifically here for scripting, we're\ngonna have, we're gonna test conditions,\n\n72\n00:03:43.390 --> 00:03:46.730\nand if they work out, then they're true,\nand if they don't, then they're false.\n\n73\n00:03:46.730 --> 00:03:51.670\nAnd because of those different conditions,\nthose two conditions, we can then move\n\n74\n00:03:51.670 --> 00:03:55.640\nalong, and make the script do something\nelse, based off of those answers.\n\n75\n00:03:55.640 --> 00:04:00.670\nNow, what we wanna start off with,\nis something called a logical operator, or\n\n76\n00:04:00.670 --> 00:04:04.840\nspecifically a logical operator,\nnot much a boolean, but it might be.\n\n77\n00:04:04.840 --> 00:04:09.000\nWhat we're gonna so\nis say we got two different statements.\n\n78\n00:04:09.000 --> 00:04:13.750\n[COUGH] Excuse me, and if they're\nboth true, then that's true, right?\n\n79\n00:04:13.750 --> 00:04:18.930\nThen that makes the statement true,\nand that's called a logical and.\n\n80\n00:04:18.930 --> 00:04:22.640\nWe kind of have in arithmetic a similar\nfunction that's called logic anding.\n\n81\n00:04:22.640 --> 00:04:24.490\nWe do that with IP addresses\nthrough subnet masks.\n\n82\n00:04:24.490 --> 00:04:26.190\nWe an things through there.\n\n83\n00:04:26.190 --> 00:04:28.810\nThere's this plus this and\nthat equals a true or\n\n84\n00:04:28.810 --> 00:04:33.460\nfalse statements usually found with\nlike I said, IP addressing, right?\n\n85\n00:04:33.460 --> 00:04:37.260\nBut for here in scripting, I'm probably\ngoing to be talking about a condition,\n\n86\n00:04:37.260 --> 00:04:38.270\nright, or a statement.\n\n87\n00:04:38.270 --> 00:04:41.680\nAnd it's going to be different\nthan another statement.\n\n88\n00:04:41.680 --> 00:04:46.170\nAnd if I want a function to run I need\nboth of those statements to be true,\n\n89\n00:04:46.170 --> 00:04:50.470\notherwise my function won't work\nbecause some part is missing, right?\n\n90\n00:04:50.470 --> 00:04:51.670\nSo that's why we use logical.\n\n91\n00:04:51.670 --> 00:04:53.300\nIt's a very, very handy function.\n\n92\n00:04:53.300 --> 00:04:57.120\nYou'll see it a lot in a lot of\nscripts that you might encounter.\n\n93\n00:04:57.120 --> 00:05:00.378\nYou'll see this a lot.\n\n94\n00:05:00.378 --> 00:05:03.936\nAnd in scripts that you create I almost\nguarantee, as you get better and\n\n95\n00:05:03.936 --> 00:05:07.437\nmore proficient at creating scripts,\nyou're going to start going,\n\n96\n00:05:07.437 --> 00:05:10.650\nI need it to be this and this before\nI can do any of this over here.\n\n97\n00:05:10.650 --> 00:05:12.510\nSo being able to use that logical and\n\n98\n00:05:12.510 --> 00:05:17.520\nstructure usually is seen as a capital\nA-N-D or two ampersand signs.\n\n99\n00:05:17.520 --> 00:05:21.740\nThose are the actual\ncharacters that we're gonna\n\n100\n00:05:21.740 --> 00:05:24.230\nuse inside of our scripts\nto make a logical and.\n\n101\n00:05:24.230 --> 00:05:26.536\nLet's just jump into my computer here and\nI'll show you what I mean.\n\n102\n00:05:26.536 --> 00:05:29.589\nWe'll run a couple of examples\nfrom just the command line, and\n\n103\n00:05:29.589 --> 00:05:32.540\nthen we'll jump into a script and\nsee how it operates there.\n\n104\n00:05:32.540 --> 00:05:35.250\nSo the first thing I'm gonna do is\nI'm gonna say I F config, right.\n\n105\n00:05:35.250 --> 00:05:38.210\nSo that's a standard\ncommand you might run,\n\n106\n00:05:38.210 --> 00:05:41.110\nget some information about\nyour network adaptor, right?\n\n107\n00:05:41.110 --> 00:05:42.820\nIt's great, great stuff.\n\n108\n00:05:42.820 --> 00:05:44.690\nLearn it, use it, love it.\n\n109\n00:05:44.690 --> 00:05:48.620\nNow it's very similar to what we're\ngetting ready to do, and then, what I'll\n\n110\n00:05:48.620 --> 00:05:52.570\nsay, go ahead and jump the gun here, that\nand and, that's my logical and operator.\n\n111\n00:05:52.570 --> 00:05:54.750\nSo Lear that use it and love it.\n\n112\n00:05:54.750 --> 00:05:58.728\nSo, what I'm saying is this command and\nanother command.\n\n113\n00:05:58.728 --> 00:06:00.090\nSo something like a cal,\nright for the calendar.\n\n114\n00:06:00.090 --> 00:06:02.820\nSo both of those need to be true and\nthat's what I'm doing.\n\n115\n00:06:02.820 --> 00:06:07.340\nNow the cool thing is is this works\na lot like the semi colon function\n\n116\n00:06:07.340 --> 00:06:10.660\ninside of either scripts or\nthe command line.\n\n117\n00:06:10.660 --> 00:06:13.470\nWhich will put two commands together.\n\n118\n00:06:13.470 --> 00:06:14.900\nI can run two commands from one line.\n\n119\n00:06:14.900 --> 00:06:19.620\nSo a lot of times you can run it that way,\neven though the semicolon is probably your\n\n120\n00:06:19.620 --> 00:06:22.950\nbetter way to do that just because\nyou don't wanna get confused.\n\n121\n00:06:22.950 --> 00:06:24.110\nYou don't wanna start confusing.\n\n122\n00:06:24.110 --> 00:06:25.920\nBut they will work in the same way.\n\n123\n00:06:25.920 --> 00:06:26.700\nSo let's do it.\n\n124\n00:06:26.700 --> 00:06:31.140\nIf I hit Return, it does the IF config and\nwe see there's my\n\n125\n00:06:31.140 --> 00:06:35.260\nInformation about my ethernet adapter and\nthen it ran the calendar command as well.\n\n126\n00:06:35.260 --> 00:06:38.170\nAgain, like I said,\nif I just replace this with a semicolon\n\n127\n00:06:40.190 --> 00:06:41.950\nthen it does the exact same thing.\n\n128\n00:06:41.950 --> 00:06:43.275\nI know it didn't look like it did.\n\n129\n00:06:43.275 --> 00:06:47.059\n[LAUGH] If I clear the screen and\nthen run the same command.\n\n130\n00:06:48.600 --> 00:06:50.100\nYou can see it does that.\n\n131\n00:06:50.100 --> 00:06:52.850\nSo they work very similarly,\nexcept that the logical and\n\n132\n00:06:52.850 --> 00:06:57.000\nhas further functionality, and\nthat's what we want to see.\n\n133\n00:06:57.000 --> 00:07:00.410\nNow I do want to show you what can\nhappen if things aren't correct, right?\n\n134\n00:07:00.410 --> 00:07:02.160\nWhat happens if I didn't\ndo something right.\n\n135\n00:07:02.160 --> 00:07:03.100\nJust got to remember,\n\n136\n00:07:03.100 --> 00:07:07.280\nit's looking at this as some sort\nof statement of both being true.\n\n137\n00:07:07.280 --> 00:07:09.130\nSo what happens is one of them is false.\n\n138\n00:07:09.130 --> 00:07:12.640\nWhen we're running from the command line,\nyou'd probably just get weird output.\n\n139\n00:07:12.640 --> 00:07:15.770\nYou may have one command work and\nthe other not.\n\n140\n00:07:15.770 --> 00:07:16.650\nOr no commands work at all.\n\n141\n00:07:16.650 --> 00:07:20.100\nSo like I said, you might not wanna\nuse this from the command line itself.\n\n142\n00:07:20.100 --> 00:07:22.970\nIt's better for inside of scripts\nbecause we're gonna take that.\n\n143\n00:07:22.970 --> 00:07:25.890\nAnd that's a condition, that whole\ncondition of both them being true and\n\n144\n00:07:25.890 --> 00:07:27.330\nthen do something after that.\n\n145\n00:07:27.330 --> 00:07:30.540\nBut for here, just from the command line,\nif we did something like callll,\n\n146\n00:07:30.540 --> 00:07:33.480\nlet's see what would happen if I did that.\n\n147\n00:07:33.480 --> 00:07:37.250\nI get command not found with callll.\n\n148\n00:07:37.250 --> 00:07:40.390\nSo it ran the first command but\nit didn't run the second command.\n\n149\n00:07:40.390 --> 00:07:44.050\nWhat happens if my first command is\ncorrect and my second command isn't?\n\n150\n00:07:44.050 --> 00:07:46.115\nWell let's see here.\n\n151\n00:07:46.115 --> 00:07:49.286\nThen it didn't run the first command but\nit did run the second command.\n\n152\n00:07:49.286 --> 00:07:53.694\nSo it breaks the output, but what happens\nif As if we used inside of a script.\n\n153\n00:07:53.694 --> 00:07:54.947\nThat's what we want to see.\n\n154\n00:07:54.947 --> 00:07:59.070\nSo the good thing is I'm in my conditional\ndirectory here and if I do an ls,\n\n155\n00:07:59.070 --> 00:08:01.077\nI've pre made some scripts for us.\n\n156\n00:08:01.077 --> 00:08:05.395\nAnd let's see here, for\nthis guy we're gonna do the 1logical_And.\n\n157\n00:08:05.395 --> 00:08:09.352\nLet's see, that is this guy\nright here created this script.\n\n158\n00:08:09.352 --> 00:08:11.960\nLet's take a look inside and\nsee what's going on.\n\n159\n00:08:11.960 --> 00:08:17.793\nSo I'll go ahead and nano that so\nwe can get the nice syntax highlighting.\n\n160\n00:08:17.793 --> 00:08:22.019\nAnd I'm creating new scripts here.\n\n161\n00:08:22.019 --> 00:08:23.134\nNo, thank you.\n\n162\n00:08:23.134 --> 00:08:24.581\nLet's go back, try that one more time.\n\n163\n00:08:24.581 --> 00:08:25.750\nThere we go.\n\n164\n00:08:25.750 --> 00:08:27.655\nAnd there we go.\n\n165\n00:08:27.655 --> 00:08:29.315\nSo very short script.\n\n166\n00:08:29.315 --> 00:08:31.438\nNot a lot of crazy things going on.\n\n167\n00:08:31.438 --> 00:08:34.370\nBut probably some things you haven't\nseen before up to this time.\n\n168\n00:08:34.370 --> 00:08:36.640\nActually I know you haven't seen\na lot of this up til this time.\n\n169\n00:08:36.640 --> 00:08:38.650\nBut let's see what we do know.\n\n170\n00:08:38.650 --> 00:08:42.300\nFirst line, very simple,\ncalling the script a script.\n\n171\n00:08:42.300 --> 00:08:45.980\nDoing the shebang bin bash,\ninvoke that lovely bash shell.\n\n172\n00:08:46.980 --> 00:08:48.420\nAnd then we have this if.\n\n173\n00:08:48.420 --> 00:08:52.740\nI know we haven't gotten into ifs and all\nsorts of cool stuff, it's coming I swear.\n\n174\n00:08:52.740 --> 00:08:57.500\nBut I have no way to show you this, how\nit really works, without going ahead and\n\n175\n00:08:57.500 --> 00:09:00.100\nkinda dipping our toe into that water.\n\n176\n00:09:00.100 --> 00:09:02.850\nSo that being said, here we are.\n\n177\n00:09:02.850 --> 00:09:08.200\nSo the if statement is saying if this\nis true, then do something, right?\n\n178\n00:09:08.200 --> 00:09:09.805\nThat's basically the structure of an if.\n\n179\n00:09:09.805 --> 00:09:13.447\nAnd like I said, we'll get more in\ndepth in that in another show, but for\n\n180\n00:09:13.447 --> 00:09:15.979\nright now,\nwe just need to know the basic syntax.\n\n181\n00:09:15.979 --> 00:09:18.890\nIf this, then do this, okay?\n\n182\n00:09:18.890 --> 00:09:21.340\nSo, there's our if statement,\nit is started.\n\n183\n00:09:21.340 --> 00:09:26.874\nAnd what I'm saying right here with\nthis e, is to say if this exists.\n\n184\n00:09:26.874 --> 00:09:32.129\nIf this file or directory exists,\nthen the answer is true, right?\n\n185\n00:09:32.129 --> 00:09:33.716\nAnd after that do something.\n\n186\n00:09:33.716 --> 00:09:37.964\nBut you'll notice there's my logical and\noperator right there, and and.\n\n187\n00:09:37.964 --> 00:09:42.520\nAnd I have another conditional\nstatement right here.\n\n188\n00:09:42.520 --> 00:09:43.520\nIf this one is true.\n\n189\n00:09:43.520 --> 00:09:49.090\nSo what I'm saying is, is that this is\netc/passwd, that's a file on my system.\n\n190\n00:09:49.090 --> 00:09:52.569\nIf you're running in some sort of UNIX or\nLinux variants,\n\n191\n00:09:52.569 --> 00:09:57.539\nyou will probably have this file, because\nthat's where it keeps the usernames for\n\n192\n00:09:57.539 --> 00:09:59.891\neverybody that logs in to your system.\n\n193\n00:09:59.891 --> 00:10:01.092\nWell, does that exist?\n\n194\n00:10:01.092 --> 00:10:07.111\nSo I'm saying does this file exist and\ndoes this directory user/bin exist?\n\n195\n00:10:07.111 --> 00:10:11.937\nIf it does, then, and\nthere's my little semicolon separator.\n\n196\n00:10:11.937 --> 00:10:13.756\nThat way I don't have to\nput then on another line.\n\n197\n00:10:13.756 --> 00:10:16.926\nKinda shortens up my script a little bit.\n\n198\n00:10:16.926 --> 00:10:18.763\nNot so many lines,\neasier to read that way.\n\n199\n00:10:18.763 --> 00:10:23.754\nAnd a lot of other programmers,\nthey probably do it that way.\n\n200\n00:10:23.754 --> 00:10:26.687\nSo it's nice that bash\nbuilt that function in.\n\n201\n00:10:26.687 --> 00:10:29.528\nBut then I'm saying then do this,\necho success.\n\n202\n00:10:29.528 --> 00:10:36.600\nSo if this and this exists, echo this word\nsuccess, letting me know that they exist.\n\n203\n00:10:36.600 --> 00:10:38.790\n>> Now Daniel,\nlooks like you misspelled that last line.\n\n204\n00:10:38.790 --> 00:10:39.959\nF-I.\n\n205\n00:10:39.959 --> 00:10:40.988\nShouldn't it be I-F?\n\n206\n00:10:40.988 --> 00:10:42.460\n>> [LAUGH] Yeah.\n\n207\n00:10:42.460 --> 00:10:43.005\nThat's a funny one.\n\n208\n00:10:43.005 --> 00:10:47.331\nThat's basically going back to, without\ngetting into the if statements too much.\n\n209\n00:10:47.331 --> 00:10:53.178\nIt is the syntax that lets the if\nstatement know that you're done, right?\n\n210\n00:10:53.178 --> 00:10:55.318\nYou're complete with your\nconditional statement and\n\n211\n00:10:55.318 --> 00:10:56.905\nyou can now close that if statement out.\n\n212\n00:10:56.905 --> 00:11:00.240\nSo kind of like an opening parentheses.\n\n213\n00:11:00.240 --> 00:11:01.582\nIt's the closing parentheses.\n\n214\n00:11:01.582 --> 00:11:05.403\nWhere you start an if statement with if,\nyou close it with fi.\n\n215\n00:11:05.403 --> 00:11:07.582\nAnd that way you know you\nhave one block of code, and\n\n216\n00:11:07.582 --> 00:11:10.419\neverything inside of those barriers\nshould be doing something and\n\n217\n00:11:10.419 --> 00:11:12.356\nthey work together and\nnot outside of there.\n\n218\n00:11:12.356 --> 00:11:13.293\n>> So it's not a typo?\n\n219\n00:11:13.293 --> 00:11:13.997\n>> No it's not a typo.\n\n220\n00:11:13.997 --> 00:11:15.404\n>> Okay [LAUGH]\n>> Yeah, it's supposed to be there.\n\n221\n00:11:15.404 --> 00:11:16.712\nSo good stuff.\n\n222\n00:11:16.712 --> 00:11:20.249\nAnd now you got a little precursor to\nwhen we get into if statements in another\n\n223\n00:11:20.249 --> 00:11:20.752\nepisode.\n\n224\n00:11:20.752 --> 00:11:24.491\nSo now that we know what's going\non in here, let's jump back,\n\n225\n00:11:24.491 --> 00:11:27.679\nlet's see if this runs and\nwhat kind of output we get.\n\n226\n00:11:27.679 --> 00:11:29.498\nSo let me exit out.\n\n227\n00:11:29.498 --> 00:11:33.450\nAnd I will ./1logical_AND, and\n\n228\n00:11:33.450 --> 00:11:38.173\nyou'll notice I just get the word SUCCESS.\n\n229\n00:11:38.173 --> 00:11:39.055\nSo what does that mean?\n\n230\n00:11:39.055 --> 00:11:44.520\nIt means that it found that password file\nand it found that user/bin directory.\n\n231\n00:11:44.520 --> 00:11:48.480\nBoth of those statements were true,\njust like what we want.\n\n232\n00:11:48.480 --> 00:11:50.880\nAnd therefore it echoed the word success.\n\n233\n00:11:50.880 --> 00:11:55.452\nOur script was successful, everything did\nwhat it was supposed to do, logical_AND,\n\n234\n00:11:55.452 --> 00:11:56.149\nsuper easy.\n\n235\n00:11:56.149 --> 00:12:00.069\nBut, what happens if it doesn't exist,\nright?\n\n236\n00:12:00.069 --> 00:12:06.149\nIf one of those conditions do not meet the\ntrue outcome that I need, what goes on?\n\n237\n00:12:06.149 --> 00:12:07.629\nI don't know.\nLet's take a look, and\n\n238\n00:12:07.629 --> 00:12:09.350\nwe'll mess this script up a little bit.\n\n239\n00:12:09.350 --> 00:12:12.130\nAnd see what kind of output that we get.\n\n240\n00:12:12.130 --> 00:12:15.481\nSo I'll go back into the nano,\nthere, bring it up.\n\n241\n00:12:15.481 --> 00:12:16.789\nAnd here's what I'll do.\n\n242\n00:12:16.789 --> 00:12:18.716\nI'll just say usr/binnnn,\n\n243\n00:12:18.716 --> 00:12:22.733\n[LAUGH] cuz I've got some sort of\nslur in my voice or something.\n\n244\n00:12:22.733 --> 00:12:23.252\nI don't know.\n\n245\n00:12:23.252 --> 00:12:25.819\nI accidentally held down the key for\ntoo long when I was typing.\n\n246\n00:12:25.819 --> 00:12:27.731\nAnd for whatever reason I didn't see it.\n\n247\n00:12:27.731 --> 00:12:28.853\nSo now it's there.\n\n248\n00:12:28.853 --> 00:12:32.243\nI CTRL+O to save, CTRL+X to get out.\n\n249\n00:12:32.243 --> 00:12:36.237\nAnd we'll run the script again and\nnotice nothing happens.\n\n250\n00:12:36.237 --> 00:12:37.305\nNow why is that?\n\n251\n00:12:37.305 --> 00:12:38.617\nWhy did nothing happen?\n\n252\n00:12:38.617 --> 00:12:41.132\nI didn't get a syntax error,\nI didn't get anything.\n\n253\n00:12:41.132 --> 00:12:42.858\nBecause there was no syntax here.\n\n254\n00:12:42.858 --> 00:12:50.143\nEven though that bin was super long,\nall I was telling it was does this exist?\n\n255\n00:12:50.143 --> 00:12:55.946\nIf it does, great, give me that success,\nbut both of these need to exist.\n\n256\n00:12:55.946 --> 00:12:58.269\nWe know the etc/passwd is there, right?\n\n257\n00:12:58.269 --> 00:12:58.927\nWe can look at that.\n\n258\n00:12:58.927 --> 00:13:02.960\nWe can actually do an ls /etc/passwd, and\n\n259\n00:13:02.960 --> 00:13:08.083\nI'll give it the long listing format,\nand there it is.\n\n260\n00:13:08.083 --> 00:13:08.694\nIt exists.\n\n261\n00:13:08.694 --> 00:13:14.947\nI can do ls /user/bin and\nI get everything that's inside there.\n\n262\n00:13:14.947 --> 00:13:20.159\nBoth of those exist, user/binnnnnnn\ndoesn't exist, it's not there.\n\n263\n00:13:20.159 --> 00:13:24.275\nSo it's saying if it was there\nit might be correct syntax,\n\n264\n00:13:24.275 --> 00:13:29.663\ncuz it's just looking for a string and\nthat string happens to be a file path.\n\n265\n00:13:29.663 --> 00:13:34.075\nIf it doesn't exist, then we get no\noutput, because it wasn't successful.\n\n266\n00:13:34.075 --> 00:13:41.490\nBoth of those must be true statements for\nus to get that echo of success.\n\n267\n00:13:41.490 --> 00:13:42.062\n>> Now Daniel,\n\n268\n00:13:42.062 --> 00:13:45.236\nlet me ask my standard question I've\nasked in just about every episode.\n\n269\n00:13:45.236 --> 00:13:49.829\nSo where you actually had that bin,\nwhere you added in six extra n's in there,\n\n270\n00:13:49.829 --> 00:13:52.344\nwhat if I accidentally capitalized the b?\n\n271\n00:13:52.344 --> 00:13:54.947\nSo again,\nI'm talking about case sensitivity here.\n\n272\n00:13:54.947 --> 00:13:57.854\nIt was inside of quotes,\nit should work right, or not?\n\n273\n00:13:57.854 --> 00:14:00.138\n>> No,\nagain going back to case sensitivity,\n\n274\n00:14:00.138 --> 00:14:03.500\nyou gotta remember that it really\ntakes that stuff seriously.\n\n275\n00:14:03.500 --> 00:14:08.651\nSo if there's not a direct recall of\nuser or forward slash user forward\n\n276\n00:14:08.651 --> 00:14:14.255\nslash capital BIN, if that doesn't exist,\nyour operation still breaks.\n\n277\n00:14:14.255 --> 00:14:16.292\n>> Okay.\n>> It does not come back as true,\n\n278\n00:14:16.292 --> 00:14:17.661\nit comes back as false.\n\n279\n00:14:17.661 --> 00:14:21.477\nAnd therefore it does not do the commands\nthat are underneath that if condition.\n\n280\n00:14:21.477 --> 00:14:22.924\nSo just be aware of that.\n\n281\n00:14:22.924 --> 00:14:27.130\nTypos will get you in trouble with your\nscripts and because we don't get any\n\n282\n00:14:27.130 --> 00:14:31.493\nsyntax problems out of it, you're really\ngonna have a hard time finding it.\n\n283\n00:14:31.493 --> 00:14:33.869\nIf this was a long script, you're gonna\nhave a hard time finding out why.\n\n284\n00:14:33.869 --> 00:14:36.888\nYou'll probably have a good idea\nbecause of where the script will stop.\n\n285\n00:14:36.888 --> 00:14:39.071\nYou'll be like, okay,\nthere must be a problem there.\n\n286\n00:14:39.071 --> 00:14:44.493\nBut Ronnie is exactly right, check your\ncase sensitivity and make sure that works.\n\n287\n00:14:44.493 --> 00:14:47.651\nNow, there's another logical operator\nthat we're going to play with.\n\n288\n00:14:47.651 --> 00:14:50.252\nAnd it's the logical_OR, right?\n\n289\n00:14:50.252 --> 00:14:52.831\nSo this is a little different than and,\nwith and\n\n290\n00:14:52.831 --> 00:14:56.580\nyou have this statement must be true and\nthis statement must be true.\n\n291\n00:14:56.580 --> 00:15:02.445\nNow we can go where this statement or\nthis statement must be true.\n\n292\n00:15:02.445 --> 00:15:06.798\nSo either of them, if either\nstatement that I give it is true,\n\n293\n00:15:06.798 --> 00:15:09.412\nthen I will get my intended outcome.\n\n294\n00:15:09.412 --> 00:15:10.441\nSo let's take a look at them.\n\n295\n00:15:10.441 --> 00:15:11.888\nAnd clear screen here.\n\n296\n00:15:11.888 --> 00:15:16.911\nWe do an ls, you will notice that I got\nhis logical_OR script that I have written.\n\n297\n00:15:16.911 --> 00:15:22.956\nLet's see what is in there,\nnano 1logical_OR.\n\n298\n00:15:22.956 --> 00:15:25.007\nAnd let's see, about the same length.\n\n299\n00:15:25.007 --> 00:15:29.705\nActually if you'll notice,\nit is our logical_AND script.\n\n300\n00:15:29.705 --> 00:15:31.338\nIt's the exact same syntax.\n\n301\n00:15:31.338 --> 00:15:34.179\nThere's no difference, save one.\n\n302\n00:15:34.179 --> 00:15:35.023\nAnd it's the broken one.\n\n303\n00:15:35.023 --> 00:15:39.442\nNotice the one I broke, I had all\nthe n's on the end of the binnn there.\n\n304\n00:15:39.442 --> 00:15:44.697\nI just copied that and renamed it,\nand I changed one thing.\n\n305\n00:15:44.697 --> 00:15:48.838\nOne piece of syntax inside of the script,\nand that's this guy right here.\n\n306\n00:15:48.838 --> 00:15:50.007\nThe double pipes.\n\n307\n00:15:50.007 --> 00:15:51.594\nSo normally we see the pipe.\n\n308\n00:15:51.594 --> 00:15:53.459\nRemember it was to pipe things in?\n\n309\n00:15:53.459 --> 00:15:55.239\nThat straight up and down line.\n\n310\n00:15:55.239 --> 00:15:58.048\nIt's located right, usually,\nabove your enter key or\n\n311\n00:15:58.048 --> 00:16:00.866\nyour return key,\ndepending on what keyboard you have.\n\n312\n00:16:00.866 --> 00:16:01.772\nIt's just that straight up and down line.\n\n313\n00:16:01.772 --> 00:16:05.203\nYou can do a shift and hit that key\nit's the same as the back slash.\n\n314\n00:16:05.203 --> 00:16:06.016\nThat's our pipe command.\n\n315\n00:16:06.016 --> 00:16:09.209\nIf I do two pipes inside\nof an if statement,\n\n316\n00:16:09.209 --> 00:16:11.972\nthat's saying this is a logical or.\n\n317\n00:16:11.972 --> 00:16:17.764\nIf this or that is true then do that.\n\n318\n00:16:17.764 --> 00:16:19.931\nSo that's what we're doing\ninside of this script.\n\n319\n00:16:19.931 --> 00:16:22.597\nSo we see that is the only difference.\n\n320\n00:16:22.597 --> 00:16:26.221\nSo now I can have that broken name, right.\n\n321\n00:16:26.221 --> 00:16:29.847\nI can make a mistype there and\nit will still turn true.\n\n322\n00:16:29.847 --> 00:16:31.972\nNow you're thinking,\nwell why would I wanna do that?\n\n323\n00:16:31.972 --> 00:16:37.002\nWell in this case it's for\ndemonstration purposes, but\n\n324\n00:16:37.002 --> 00:16:43.306\nin reality sometimes, what if I had,\nprime example, the bin or sbin.\n\n325\n00:16:43.306 --> 00:16:47.945\nA lot of times, executable programs\nget put into the bin directory, or\n\n326\n00:16:47.945 --> 00:16:50.431\nthey get put into the sbin directory.\n\n327\n00:16:50.431 --> 00:16:53.695\nBut if I create a program,\nmaybe this script, and\n\n328\n00:16:53.695 --> 00:16:58.278\nI wanna path that out to one of those\ndirectories, I can say, if this or\n\n329\n00:16:58.278 --> 00:17:01.722\nthis exists, copy it there,\nor do something else.\n\n330\n00:17:01.722 --> 00:17:05.439\nSo if I don't have one or the other,\nI still get success and I'll still\n\n331\n00:17:05.439 --> 00:17:09.720\nget the outcome that I'm looking for,\njust because of the way that works.\n\n332\n00:17:09.720 --> 00:17:13.180\nAgain, it's all gonna depend on your\nenvironment, on how you use this, but\n\n333\n00:17:13.180 --> 00:17:16.220\nit should be pretty\nself-explanatory on how that works.\n\n334\n00:17:16.220 --> 00:17:20.472\nWhere I have one or\nthe other will work for me.\n\n335\n00:17:20.472 --> 00:17:25.076\nThen what I'm doing is I'm increasing\nmy odds of success by saying this or\n\n336\n00:17:25.076 --> 00:17:29.455\nthis instead of just this, or\neven kind of narrowing it, that this and\n\n337\n00:17:29.455 --> 00:17:30.888\nthis needs to be true.\n\n338\n00:17:30.888 --> 00:17:35.764\nAs you can see, that starts to narrow\nour ability to get a successful return,\n\n339\n00:17:35.764 --> 00:17:38.280\nwhereas the or kind of expands it.\n\n340\n00:17:38.280 --> 00:17:39.540\nBecause I'm saying this or this.\n\n341\n00:17:39.540 --> 00:17:43.639\nOnly one needs to be true to give me\nthe correct output that I'm looking for.\n\n342\n00:17:43.639 --> 00:17:47.147\n>> So we not only need to understand, of\ncourse, that logical operation itself and\n\n343\n00:17:47.147 --> 00:17:47.722\nthe syntax.\n\n344\n00:17:47.722 --> 00:17:49.286\nSo remember what Daniel is really\nsaying to us if you haven't\n\n345\n00:17:49.286 --> 00:17:49.940\nreally dealt with this.\n\n346\n00:17:49.940 --> 00:17:50.955\nWhen we use the and\n\n347\n00:17:50.955 --> 00:17:55.630\nstatement it is because we want a more\nrestrictive condition that both conditions\n\n348\n00:17:55.630 --> 00:17:59.306\nhave to actually be met or\nboth files or whatever might be there.\n\n349\n00:17:59.306 --> 00:18:01.130\nHave to actually give us what we need.\n\n350\n00:18:01.130 --> 00:18:03.640\nBefore it will declare it as true,\nand then we move on.\n\n351\n00:18:03.640 --> 00:18:07.130\nWhen you use the or, it's a little bit\nless restrictive, in the fact we're saying\n\n352\n00:18:07.130 --> 00:18:11.030\neither or, either one of those two\nstatements will actually work the way that\n\n353\n00:18:11.030 --> 00:18:15.240\nwe need to, before we can actually move\non and do other things with it, as well.\n\n354\n00:18:15.240 --> 00:18:18.450\nAnd this is really important,\nbecause it does depend on which one you\n\n355\n00:18:18.450 --> 00:18:21.140\nneed to happen a lot of times\nyou don't need both conditions.\n\n356\n00:18:21.140 --> 00:18:24.900\nYou just need one, and you need to\nknow the way that actually set that up\n\n357\n00:18:24.900 --> 00:18:28.820\nsyntactically to make sure that you can,\ncan get the information that you need.\n\n358\n00:18:28.820 --> 00:18:30.110\nNow, Daniel what if, though?\n\n359\n00:18:30.110 --> 00:18:33.805\nOkay.\nWhat if, neither of those two conditions\n\n360\n00:18:33.805 --> 00:18:37.365\nactually exist, but I really wanted\nto return something anyways.\n\n361\n00:18:37.365 --> 00:18:41.513\nIs there a way that I can do that,\nwhere I negate the logic.\n\n362\n00:18:41.513 --> 00:18:42.715\n>> I got you, yeah, Ronnie.\n\n363\n00:18:42.715 --> 00:18:45.722\nWhat Ronnie is talking\nabout is a logical not.\n\n364\n00:18:45.722 --> 00:18:48.977\nSo, if this is not true,\nthen that's a true statement.\n\n365\n00:18:48.977 --> 00:18:51.023\n[LAUGH]\n>> [LAUGH]\n\n366\n00:18:51.023 --> 00:18:54.263\n>> That can start twisting your mind.\n\n367\n00:18:54.263 --> 00:18:56.520\nToday we're gonna talk about\nmetaphysically about whether or\n\n368\n00:18:56.520 --> 00:18:57.889\nnot something does or does not exist.\n\n369\n00:18:57.889 --> 00:18:58.820\nExistentialism, no.\n\n370\n00:18:58.820 --> 00:19:01.300\nWhat we're talking about is just saying\n\n371\n00:19:01.300 --> 00:19:03.920\nthat my true statement is the fact\nthat this does not exist.\n\n372\n00:19:03.920 --> 00:19:05.740\nThat's what Ronnie is getting to.\n\n373\n00:19:05.740 --> 00:19:11.495\nSo kind of a Ronnie is wearing a blue\nshirt if red shirts don't exist,\n\n374\n00:19:11.495 --> 00:19:14.681\nor something to that effect, right.\n\n375\n00:19:14.681 --> 00:19:16.320\nBut how does that work out on our script?\n\n376\n00:19:16.320 --> 00:19:17.514\nSo that's a really good question.\n\n377\n00:19:17.514 --> 00:19:20.211\nLet me get out of our logical OR here,\n\n378\n00:19:20.211 --> 00:19:23.960\nlet's open up another script and\nsee what we have.\n\n379\n00:19:23.960 --> 00:19:28.370\nSo here you'll see also have a logical\nNOT, let's see how that's setup.\n\n380\n00:19:28.370 --> 00:19:33.847\nSo nano 1logical_NOT.sh.\n\n381\n00:19:33.847 --> 00:19:36.135\nSo this is a little bit different\nthan what we saw with our other\n\n382\n00:19:36.135 --> 00:19:36.930\ndifferent scripts.\n\n383\n00:19:36.930 --> 00:19:40.597\nNot that it needs to be, but\nI think this was a better example.\n\n384\n00:19:40.597 --> 00:19:41.190\nSo what are we saying here?\n\n385\n00:19:41.190 --> 00:19:45.490\nLet's take a look at our\nfirst real line of code.\n\n386\n00:19:45.490 --> 00:19:48.500\nWhich is DIR1 it's a variable we're\ndeclaring we know all about that,\n\n387\n00:19:48.500 --> 00:19:49.580\npretty simple stuff.\n\n388\n00:19:49.580 --> 00:19:51.660\nAnd it's just a path name, okay?\n\n389\n00:19:51.660 --> 00:19:53.420\nNow what I'm saying is if, and\n\n390\n00:19:53.420 --> 00:19:58.050\nyou see this lovely little bang sign\nright here the exclamation point.\n\n391\n00:19:58.050 --> 00:20:02.437\nWhen you're inside those if\nconditions that bang sign means we\n\n392\n00:20:02.437 --> 00:20:04.847\nare negating the trueness right?\n\n393\n00:20:04.847 --> 00:20:08.931\nSo if normally this would where\nthe dash e stood for exists.\n\n394\n00:20:08.931 --> 00:20:13.740\nNow I'm saying if this does not exist\nthen we're gonna do something okay?\n\n395\n00:20:13.740 --> 00:20:17.750\nSo now you're starting to see why we\nwould actually want to use this cuz\n\n396\n00:20:17.750 --> 00:20:19.100\nof what's going on in our script.\n\n397\n00:20:19.100 --> 00:20:24.001\nSo if this directory right here\nwhich is the value of DIR1,\n\n398\n00:20:24.001 --> 00:20:27.639\nif that does not exist, then do something.\n\n399\n00:20:27.639 --> 00:20:28.847\nWhat do we want to do?\n\n400\n00:20:28.847 --> 00:20:30.710\nWe want to make it, right.\n\n401\n00:20:30.710 --> 00:20:35.575\nThere's a good reason why I would want to\ncheck whether something does not exist,\n\n402\n00:20:35.575 --> 00:20:40.299\nbecause I don't want to overwrite or\nI don't want to step on anybody's toes and\n\n403\n00:20:40.299 --> 00:20:41.514\nmake duplication.\n\n404\n00:20:41.514 --> 00:20:43.170\nI don't want to duplicate that effort.\n\n405\n00:20:43.170 --> 00:20:46.220\nI want to just check and\nsee if that statement is true,\n\n406\n00:20:46.220 --> 00:20:47.200\nthat that does not exist.\n\n407\n00:20:47.200 --> 00:20:49.870\nAnd then if it doesn't,\ndo something for me.\n\n408\n00:20:49.870 --> 00:20:50.889\nWhat am I doing?\n\n409\n00:20:50.889 --> 00:20:54.556\nI'm making whatever\nthe contents under one is.\n\n410\n00:20:54.556 --> 00:21:02.060\nWhich is this a directory right here, so\nmkdir that's our main directory command.\n\n411\n00:21:02.060 --> 00:21:03.222\nI happen to have the correct syntax for\nthat.\n\n412\n00:21:03.222 --> 00:21:06.561\nInside of our dir one variable, and\n\n413\n00:21:06.561 --> 00:21:12.140\nit should use that as the condition for\nthat mkdir command.\n\n414\n00:21:12.140 --> 00:21:16.169\nAnd then just echo done so that the user\nactually knows that something occurred\n\n415\n00:21:16.169 --> 00:21:18.682\ndoes not give you a blank\nline back to the prompt.\n\n416\n00:21:18.682 --> 00:21:20.547\n>> All right so let me see if I\ncan follow the logic here and\n\n417\n00:21:20.547 --> 00:21:21.556\nyou correct me if I am wrong.\n\n418\n00:21:21.556 --> 00:21:22.222\nRight?\n>> Okay.\n\n419\n00:21:22.222 --> 00:21:24.306\n>> You declared the variable and\nyou are saying, hey.\n\n420\n00:21:24.306 --> 00:21:28.980\nThis back up DIR is what that variable is.\n\n421\n00:21:28.980 --> 00:21:30.640\nSo if you are actually looking at this.\n\n422\n00:21:30.640 --> 00:21:35.306\nYou're telling me, if it doesn't exist,\nto create the directory?\n\n423\n00:21:35.306 --> 00:21:36.223\n>> That's exactly right.\n\n424\n00:21:36.223 --> 00:21:37.014\n>> Just wanted to make sure.\n\n425\n00:21:37.014 --> 00:21:38.515\n>> Ronnie you are following\nthe script exactly.\n\n426\n00:21:38.515 --> 00:21:43.039\nAnd just so that this will actually work\nfor us here, let me put this in here,\n\n427\n00:21:43.039 --> 00:21:46.514\njust cuz I don't want to have\nto move around directories.\n\n428\n00:21:46.514 --> 00:21:48.056\nWe'll show you what's going on here.\n\n429\n00:21:48.056 --> 00:21:54.540\nI have a directory called\nconditional the IT panel like so.\n\n430\n00:21:54.540 --> 00:21:59.565\nSo I'll add that into my path name so\nthat when I run that script, it\n\n431\n00:21:59.565 --> 00:22:03.450\nshould actually add this backup dir to my\ncurrent directory that I'm in right now.\n\n432\n00:22:03.450 --> 00:22:07.080\nSo I'll just throw that in there\nreally quickly and I will save that.\n\n433\n00:22:07.080 --> 00:22:10.536\nGo next, yes it is called conditional,\nhopefully I spelled it correctly,\n\n434\n00:22:10.536 --> 00:22:12.806\nI'm adding to a script I knew worked but\nwhatevs.\n\n435\n00:22:12.806 --> 00:22:13.764\nWe'll check.\n\n436\n00:22:13.764 --> 00:22:17.472\nWe see no directories\ninside this directory.\n\n437\n00:22:17.472 --> 00:22:25.290\nWell if we run that 1logical_NOT,\nthen it says done.\n\n438\n00:22:25.290 --> 00:22:29.420\nThat means we made it through a script,\nno bad syntactical output error or\n\n439\n00:22:29.420 --> 00:22:30.400\nanything like that.\n\n440\n00:22:30.400 --> 00:22:33.940\nNow if I do an LS you'll\nnotice I have a backup dir.\n\n441\n00:22:33.940 --> 00:22:39.481\nSo the script looked into this directory,\nsaw that that did not exist.\n\n442\n00:22:39.481 --> 00:22:41.603\nAnd because it didn't exist it created it.\n\n443\n00:22:41.603 --> 00:22:42.807\nIf it did exist it wouldn't\nhave created it because\n\n444\n00:22:42.807 --> 00:22:44.068\nit would've met the conditions\nof the if statement.\n\n445\n00:22:44.068 --> 00:22:49.263\nAnd it would have just shoveled\nyou back out to your prompt.\n\n446\n00:22:49.263 --> 00:22:50.389\nSo that's pretty simple.\n\n447\n00:22:50.389 --> 00:22:52.201\n>> All right.\nNow, Daniel, just again,\n\n448\n00:22:52.201 --> 00:22:55.139\nbeing as picky as I am,\nif we go back into that script.\n\n449\n00:22:55.139 --> 00:22:56.556\nYou had a lot of spaces in there.\n\n450\n00:22:56.556 --> 00:22:59.431\nAre those spaces really important or\nis that okay?\n\n451\n00:22:59.431 --> 00:23:02.933\nLike where you had the symbol and\nthen you had a space and\n\n452\n00:23:02.933 --> 00:23:04.597\nthen what you had following.\n\n453\n00:23:04.597 --> 00:23:07.557\n>> Yeah, inside of those\nbracketed commands in there,\n\n454\n00:23:07.557 --> 00:23:09.806\nthe spaces normally aren't a big deal.\n\n455\n00:23:09.806 --> 00:23:13.069\nThis just makes it easier for\nus to see what's going on, and\n\n456\n00:23:13.069 --> 00:23:16.348\nget a better quick visual\nreference of what's happening.\n\n457\n00:23:16.348 --> 00:23:21.166\nWhen you start squishing things together,\nit can be, unless you absolutely have to,\n\n458\n00:23:21.166 --> 00:23:22.820\nwhich in some cases, you do.\n\n459\n00:23:22.820 --> 00:23:25.150\nIt can get a little difficult\nto read at a glance.\n\n460\n00:23:25.150 --> 00:23:30.309\nSo when you can, it's usually a really\ngood idea just to add spacing in there so\n\n461\n00:23:30.309 --> 00:23:31.806\nit's easier to read.\n\n462\n00:23:31.806 --> 00:23:35.729\nIt's easier to follow and see what's\ngoing on, so inside of those brackets I'm\n\n463\n00:23:35.729 --> 00:23:39.304\nallowed to use spacing, so I do to make\nthat easy for you guys to see what's\n\n464\n00:23:39.304 --> 00:23:42.850\ngoing on and easy for me to see what's\nhappening inside of my own script.\n\n465\n00:23:42.850 --> 00:23:46.890\nIt's a very, very handy item, so yes,\ninside of brackets we've got that covered.\n\n466\n00:23:46.890 --> 00:23:49.911\n>> So, so far we've taken a look at\nthe fact that we know that we can\n\n467\n00:23:49.911 --> 00:23:50.889\ndo the logical AND.\n\n468\n00:23:50.889 --> 00:23:54.080\nWe also can take a look at the logical OR\nstatement, right?\n\n469\n00:23:54.080 --> 00:23:55.875\nEither or.\nOr both and.\n\n470\n00:23:55.875 --> 00:23:59.198\nAnd then, Daniel just showed us,\nof course, the negation of those.\n\n471\n00:23:59.198 --> 00:24:03.705\nDaniel, there's sometimes though, what we\nhave is actually not exactly an equal.\n\n472\n00:24:03.705 --> 00:24:06.528\nIn other words it's not both and\nit's not either or,\n\n473\n00:24:06.528 --> 00:24:08.537\nit's kind of somewhere in between and\n\n474\n00:24:08.537 --> 00:24:12.583\nthis is where we get into what we call\nlike the mathematic type of operators.\n\n475\n00:24:12.583 --> 00:24:13.234\nRight?\n\n476\n00:24:13.234 --> 00:24:17.509\n>> Yeah yeah, and remember we did\na show on math and bash, watch that so\n\n477\n00:24:17.509 --> 00:24:21.440\nyou understand that we can do\nmath inside of our scripts.\n\n478\n00:24:21.440 --> 00:24:26.680\nSometimes we want to like Ronnie said,\nmaybe I'm not adding something.\n\n479\n00:24:26.680 --> 00:24:29.500\nMaybe I'm comparing two values together,\n\n480\n00:24:29.500 --> 00:24:35.120\nand when I'm doing that in a mathematical\nstatement, I'm going to use\n\n481\n00:24:35.120 --> 00:24:40.630\ncertain characters to make those\nequations, to see, does this equal this?\n\n482\n00:24:40.630 --> 00:24:41.920\nDoes this not equal that?\n\n483\n00:24:41.920 --> 00:24:45.830\nIs this greater than this or\nis that, less than this.\n\n484\n00:24:45.830 --> 00:24:49.610\nSo, how do I do the inside of something\nlike an equation working with integers?\n\n485\n00:24:49.610 --> 00:24:51.520\nDoing mathematical type of statements.\n\n486\n00:24:51.520 --> 00:24:52.520\nWell, we can do them.\n\n487\n00:24:52.520 --> 00:24:54.120\nLet me show you what we're talking about.\n\n488\n00:24:54.120 --> 00:24:55.797\nLet's jump back onto my computer.\n\n489\n00:24:55.797 --> 00:24:56.875\nI don't have any scripts or\nanything created.\n\n490\n00:24:56.875 --> 00:24:59.090\nI'm just going to open up a file here.\n\n491\n00:24:59.090 --> 00:25:01.450\nWe'll call it operators.\n\n492\n00:25:03.600 --> 00:25:04.252\nThat's spelled correctly, right?\n\n493\n00:25:04.252 --> 00:25:05.157\nYeah, there we go.\n\n494\n00:25:05.157 --> 00:25:06.501\nSo what am I talking about?\n\n495\n00:25:06.501 --> 00:25:14.424\nWell, the first one on the list\nis the less than or equal to.\n\n496\n00:25:14.424 --> 00:25:16.000\nAnd what is that?\n\n497\n00:25:16.000 --> 00:25:16.790\nWhat does that mean?\n\n498\n00:25:16.790 --> 00:25:21.350\nWell within side of that mathematical\noperation we're talking about here\n\n499\n00:25:21.350 --> 00:25:23.270\nis something that looks like this.\n\n500\n00:25:23.270 --> 00:25:23.880\nAll right?\n\n501\n00:25:23.880 --> 00:25:25.860\nSo hopefully that makes\na little bit of sense.\n\n502\n00:25:25.860 --> 00:25:28.090\nIt's the less-than sign and\nthe equal-to sign.\n\n503\n00:25:28.090 --> 00:25:30.150\nNow, we've seen the less-than sign before,\nbut\n\n504\n00:25:30.150 --> 00:25:33.830\nit's usually not in\nan arithmetic statement.\n\n505\n00:25:33.830 --> 00:25:38.130\nNormally, this has a different,\ndepending on how you're using it, I know,\n\n506\n00:25:38.130 --> 00:25:40.362\nthis is where you start going here we go.\n\n507\n00:25:40.362 --> 00:25:42.330\n>> [LAUGH]\n>> This is the I'm confused,\n\n508\n00:25:42.330 --> 00:25:43.810\nI'm fully out of my depths and\n\n509\n00:25:43.810 --> 00:25:48.090\nthis makes no sense because before\nyou told me this was redirection.\n\n510\n00:25:48.090 --> 00:25:52.760\nAll right, inside of an equation,\ninside of a math conditional statement,\n\n511\n00:25:52.760 --> 00:25:56.580\nit becomes a math operator.\n\n512\n00:25:56.580 --> 00:25:59.270\nRight?\nSo just use a plus as a plus\n\n513\n00:25:59.270 --> 00:26:03.190\nsign here instead of something else,\nsome other special character.\n\n514\n00:26:03.190 --> 00:26:04.200\nInside of a math statement,\nit's a plus sign.\n\n515\n00:26:04.200 --> 00:26:06.370\nA minus sign, it means subtract.\n\n516\n00:26:06.370 --> 00:26:11.752\nIn here, the less than sign means less\nthan and the equal to sign means equal to.\n\n517\n00:26:11.752 --> 00:26:14.370\nSo I can do less than and\nequal to whatever.\n\n518\n00:26:14.370 --> 00:26:15.910\nSo if I have.\n\n519\n00:26:15.910 --> 00:26:19.400\nOne if one is less than or\nequal to some variable that I create,\n\n520\n00:26:19.400 --> 00:26:24.530\nthen do this, and whatever that\nis it'll run down to the pipe.\n\n521\n00:26:24.530 --> 00:26:28.673\nWe also have the other way around,\ngreater than or equal to.\n\n522\n00:26:28.673 --> 00:26:33.932\nSo greater than or equal to and\nas you probably have\n\n523\n00:26:33.932 --> 00:26:38.920\nalready guessed, greater than or equal to.\n\n524\n00:26:38.920 --> 00:26:43.520\nRemember same kind of math operators as\nwe normally work with as kids in school,\n\n525\n00:26:43.520 --> 00:26:47.190\ngetting into things like algebra and\nthat kind of math operation.\n\n526\n00:26:47.190 --> 00:26:49.870\n>> Now Daniel, I can see where\nthese things can be useful.\n\n527\n00:26:49.870 --> 00:26:51.300\nSo let's take for\nan example, a call center.\n\n528\n00:26:51.300 --> 00:26:53.410\nWhat you have, of course,\nare many employees.\n\n529\n00:26:53.410 --> 00:26:56.650\nAnd what you might tell them to do is if\nyou're working in the call center you\n\n530\n00:26:56.650 --> 00:26:58.000\nhave to have this many calls per day.\n\n531\n00:26:58.000 --> 00:27:02.620\nSo you set that minimum and\nthen you can go back through, right?\n\n532\n00:27:02.620 --> 00:27:07.060\nAs the information's being presented to\nyou to make one of these statements to\n\n533\n00:27:07.060 --> 00:27:10.340\nsit and go look, here's the number,\nlet's say 20 calls.\n\n534\n00:27:10.340 --> 00:27:13.440\nHere's the number and you run through it\nat the end of the day, whoever doesn't\n\n535\n00:27:13.440 --> 00:27:16.880\nhave those 20 days that will return\nto you that true or that false.\n\n536\n00:27:16.880 --> 00:27:20.560\nSo being able to do stuff like that,\nor if they actually hit let's say\n\n537\n00:27:20.560 --> 00:27:23.160\na certain level let's say 20 or\nactually hit lets say over let's say 30,\n\n538\n00:27:23.160 --> 00:27:26.220\nwe might say they are eligible for\na bonus of some sort.\n\n539\n00:27:26.220 --> 00:27:30.270\nAnd you can see why these operators\nare important programatically and that's\n\n540\n00:27:30.270 --> 00:27:33.950\nreally the key behind why you would use\nsome of these other statements as well.\n\n541\n00:27:33.950 --> 00:27:37.670\nEven though the and or the oring is by\nfar the most basic ones that we deal\n\n542\n00:27:37.670 --> 00:27:42.640\nwith that really help us to set how we\nwant the rest of the script to turn out.\n\n543\n00:27:42.640 --> 00:27:45.420\nThere are some times, like we said,\n\n544\n00:27:45.420 --> 00:27:48.490\nit just doesn't make a lot of sense\njust to say it's those two extremes.\n\n545\n00:27:48.490 --> 00:27:51.590\nIn this sense, we do have those\nin-betweens, and that's what\n\n546\n00:27:51.590 --> 00:27:54.820\nthose mathematical operators really help\nus deal with, is those gray areas, and\n\n547\n00:27:54.820 --> 00:27:57.800\nall we're really doing then is taking,\ninside of those scripts,\n\n548\n00:27:57.800 --> 00:28:02.210\nis changing that operator and trying to\nmake sure that it actually makes sense,\n\n549\n00:28:02.210 --> 00:28:06.010\nand In the numbers that we're using or\nthe statements that we're using.\n\n550\n00:28:06.010 --> 00:28:08.000\nAnd use those mathematical operators.\n\n551\n00:28:08.000 --> 00:28:09.400\nI think it helps out a lot.\n\n552\n00:28:09.400 --> 00:28:10.490\n>> Yeah.\nRonnie's a wise man.\n\n553\n00:28:10.490 --> 00:28:11.980\nHe's picking up on this really quickly.\n\n554\n00:28:11.980 --> 00:28:13.600\nHopefully you are as well.\n\n555\n00:28:13.600 --> 00:28:14.700\nIt's not that difficult.\n\n556\n00:28:14.700 --> 00:28:17.210\nRight.\nWe're just basically trying to say If\n\n557\n00:28:17.210 --> 00:28:20.990\nsomething is less than or equal to,\ngreater than, or whatever.\n\n558\n00:28:20.990 --> 00:28:24.140\nHowever kind of expression\nwork we're trying to get to,\n\n559\n00:28:24.140 --> 00:28:26.950\nwe just have to know\nthe syntax to make that work.\n\n560\n00:28:26.950 --> 00:28:28.580\nAnd it's out of a mathematical expression.\n\n561\n00:28:28.580 --> 00:28:30.210\nThese are the operators that we use.\n\n562\n00:28:30.210 --> 00:28:31.570\nNow, what if we don't want equal to?\n\n563\n00:28:31.570 --> 00:28:33.910\nRight?\nWhat if we just straight up want greater\n\n564\n00:28:33.910 --> 00:28:37.770\nthan or something straight up less than or\nsomething straight up equal to.\n\n565\n00:28:37.770 --> 00:28:38.580\nHow do we do that?\n\n566\n00:28:38.580 --> 00:28:41.030\nWell you probably already\nfigured that out.\n\n567\n00:28:41.030 --> 00:28:44.002\nLet's go ahead and jump back into\nour little text editor here.\n\n568\n00:28:44.002 --> 00:28:45.197\nLet's see if we can look at that.\n\n569\n00:28:45.197 --> 00:28:46.865\nWe just want less than.\n\n570\n00:28:46.865 --> 00:28:49.079\nIt's gonna be just like that.\n\n571\n00:28:49.079 --> 00:28:50.798\nJust the less than sign.\n\n572\n00:28:50.798 --> 00:28:56.640\nAgain with the greater than,\nit's gonna be just the greater than sign.\n\n573\n00:28:56.640 --> 00:29:00.300\nEqual to this is where it\ndoes get a little bit weird.\n\n574\n00:29:00.300 --> 00:29:02.030\nYou can use equal, just equal to.\n\n575\n00:29:02.030 --> 00:29:06.770\nSo if I just wanna equal to,\nI could just do this.\n\n576\n00:29:06.770 --> 00:29:08.180\nThat works a lot of the time.\n\n577\n00:29:08.180 --> 00:29:13.690\nBut specifically in math, if you want to\nmake sure that you're being proper and\n\n578\n00:29:13.690 --> 00:29:18.740\ndoing everything the right way,\nequal equal is what you wanna do.\n\n579\n00:29:18.740 --> 00:29:22.190\nOkay, like I said, equal Just a straight\nup equal sign tends to work a lot but\n\n580\n00:29:22.190 --> 00:29:26.830\nif you want to know the exact proper way,\nthat is normally the proper way.\n\n581\n00:29:26.830 --> 00:29:30.650\nAnd then if you want not equal to\nyou do the, I believe it's, yeah\n\n582\n00:29:31.780 --> 00:29:37.720\nhere we go where's the there we go,\nequal like that.\n\n583\n00:29:37.720 --> 00:29:42.790\nSo the bang and then the equal sign so\nI'm saying not equal and that fan.\n\n584\n00:29:42.790 --> 00:29:44.510\nIt's really the only one strange one.\n\n585\n00:29:44.510 --> 00:29:48.868\nI do have one script that I've written\nthat kind of illustrates a couple of\n\n586\n00:29:48.868 --> 00:29:49.371\nthese.\n\n587\n00:29:49.371 --> 00:29:50.716\nLet me jump over here real quick.\n\n588\n00:29:50.716 --> 00:29:54.419\nThat script was called\n1expression_operator, like this.\n\n589\n00:29:54.419 --> 00:29:55.163\nSo, let's run that.\n\n590\n00:29:55.163 --> 00:29:56.626\nLet's take a look in there.\n\n591\n00:29:56.626 --> 00:30:00.740\nNano 1, expression operators.\n\n592\n00:30:00.740 --> 00:30:02.060\nAnd see what's going on.\n\n593\n00:30:02.060 --> 00:30:04.370\nAgain, a little more lines of code\nthan we've seen here so far, but\n\n594\n00:30:04.370 --> 00:30:05.930\njust a couple of read commands.\n\n595\n00:30:05.930 --> 00:30:07.760\nWe saw read in a previous episode.\n\n596\n00:30:07.760 --> 00:30:10.610\nJust read input from the user's keyboard.\n\n597\n00:30:10.610 --> 00:30:13.200\nAnd then we have our if statement.\n\n598\n00:30:13.200 --> 00:30:16.990\nAnd we've got a couple of open\nparenthesis that's letting it know\n\n599\n00:30:16.990 --> 00:30:19.820\nthis a mathematical operation, right?\n\n600\n00:30:19.820 --> 00:30:21.310\nAnd then the I can get to you.\n\n601\n00:30:21.310 --> 00:30:26.420\nBecause I've used those two open\nparenthesis I can use the expression,\n\n602\n00:30:26.420 --> 00:30:29.760\nthe math expression operators\nthat we've gone through so far.\n\n603\n00:30:29.760 --> 00:30:34.510\nSo it'll ask me to use the if\nnumber value of variable\n\n604\n00:30:34.510 --> 00:30:39.320\nnum one here is greater than\nthe value of variable num two.\n\n605\n00:30:39.320 --> 00:30:42.039\nWell then you're gonna\nget echo first is bigger.\n\n606\n00:30:42.039 --> 00:30:46.015\nSo we're asking the user to just\ngive us a couple of numbers and\n\n607\n00:30:46.015 --> 00:30:50.400\nthen we're going to see what\nstatement comes out as true.\n\n608\n00:30:50.400 --> 00:30:52.725\nThis [INAUDIBLE] just means\nanother if statement.\n\n609\n00:30:52.725 --> 00:30:54.105\nIf this then do this.\n\n610\n00:30:54.105 --> 00:30:57.945\nElse if this then do this and\nwe'll see more of that when we get to if.\n\n611\n00:30:57.945 --> 00:30:59.475\n>> [LAUGH]\n>> I'm kinda having to shovel this stuff\n\n612\n00:30:59.475 --> 00:31:02.585\nat you right now because there's\nno other way to show you\n\n613\n00:31:02.585 --> 00:31:06.610\nhow this works before we get into\nshowing you how if statements work.\n\n614\n00:31:06.610 --> 00:31:10.810\nSo, just worry more about\nwhat's going on here.\n\n615\n00:31:10.810 --> 00:31:12.390\nThat's really what we want to know.\n\n616\n00:31:12.390 --> 00:31:15.230\nAnd here we're saying,\nif this number is less than this number,\n\n617\n00:31:15.230 --> 00:31:17.190\nthen do this right here.\n\n618\n00:31:17.190 --> 00:31:18.410\nAll right?\n\n619\n00:31:18.410 --> 00:31:21.410\nAnd then if they're equal to each other,\njust say all things equal.\n\n620\n00:31:21.410 --> 00:31:27.420\nLet's take a look and see how it works and\nif I, yeah I can do this here.\n\n621\n00:31:27.420 --> 00:31:28.680\nAnd just take that nano off.\n\n622\n00:31:28.680 --> 00:31:30.680\nHit return.\n\n623\n00:31:30.680 --> 00:31:32.850\nIt's asking me to enter a first number.\n\n624\n00:31:32.850 --> 00:31:33.350\nI'll enter 1.\n\n625\n00:31:33.350 --> 00:31:36.340\nAnd as second number I'll enter 9.\n\n626\n00:31:36.340 --> 00:31:37.570\nIt says second it's bigger.\n\n627\n00:31:37.570 --> 00:31:38.120\nScript worked.\n\n628\n00:31:38.120 --> 00:31:45.000\nI run it again and this time I say 9 is my\nfirst number and 1 is my second number.\n\n629\n00:31:45.000 --> 00:31:46.420\nThen the first number is bigger.\n\n630\n00:31:46.420 --> 00:31:47.425\nIt's running correctly.\n\n631\n00:31:47.425 --> 00:31:50.908\nIf I run it again, and\nI say 5 for the fist number, and\n\n632\n00:31:50.908 --> 00:31:54.484\n5 for the second number,\nsince all things are equal.\n\n633\n00:31:54.484 --> 00:31:58.664\nSo it, they all work correctly, you can\nuse them in this certain way, and then you\n\n634\n00:31:58.664 --> 00:32:02.421\ncan get, as you can see, it generates\nthe outcome that I'm looking for,\n\n635\n00:32:02.421 --> 00:32:06.504\nif I compare Pair the two expressions\nthe mathematical expressions together.\n\n636\n00:32:06.504 --> 00:32:08.433\nWhat comes out to be the right thing?\n\n637\n00:32:08.433 --> 00:32:12.030\nThen give me this answer and\nmove on to the next one if it doesn't.\n\n638\n00:32:12.030 --> 00:32:14.530\nSo very cool.\n>> Now Daniel you have one other\n\n639\n00:32:14.530 --> 00:32:17.940\nexample here which we talked about,\na symbolic operator, what's that about?\n\n640\n00:32:17.940 --> 00:32:20.620\n>> Yeah one more last example\nhere before we close the show.\n\n641\n00:32:20.620 --> 00:32:24.530\nIt is the symbolic operators,\nbasically the same idea, right, but\n\n642\n00:32:24.530 --> 00:32:29.990\nwe're probably gonna use this,\nnot inside of a math expression,\n\n643\n00:32:29.990 --> 00:32:34.690\nprobably with other comparative operations\nthat aren't specifically mathematically,\n\n644\n00:32:36.450 --> 00:32:39.610\nthat's what they are,\nby nature they're not math problems.\n\n645\n00:32:39.610 --> 00:32:40.580\nAll right.\n\n646\n00:32:40.580 --> 00:32:44.030\nSo what are we talking about here?\n\n647\n00:32:44.030 --> 00:32:46.920\nLet's go back to our little thing here.\n\n648\n00:32:46.920 --> 00:32:50.020\nThose are our symbolic, symbolic,\nwe'll just put that there.\n\n649\n00:32:51.690 --> 00:32:55.470\nEverything underneath here,\nwhat we're talking about is dash EQ.\n\n650\n00:32:55.470 --> 00:32:57.770\nAnd we're talking about dash g e,\ndash g t.\n\n651\n00:32:57.770 --> 00:33:04.610\nI'll just put them all up here really\nquickly so that we can go through them.\n\n652\n00:33:04.610 --> 00:33:10.850\nI'll take that back down\na little more there, guy.\n\n653\n00:33:10.850 --> 00:33:11.500\nThere we go.\n\n654\n00:33:11.500 --> 00:33:14.800\nLess than l t and Dash ne.\n\n655\n00:33:14.800 --> 00:33:17.200\nSo what we're looking at here is equal to.\n\n656\n00:33:17.200 --> 00:33:21.040\nGreater than or equal to.\n\n657\n00:33:21.040 --> 00:33:25.520\nGreater than less than or\nequal to less than and not equal.\n\n658\n00:33:25.520 --> 00:33:29.160\nSo all the same operators that we saw\nup here, just in a different format.\n\n659\n00:33:29.160 --> 00:33:32.560\nWe can, we're using a symbolic mode.\n\n660\n00:33:32.560 --> 00:33:36.880\nIt's saying gt instead of\nthe actual operational command.\n\n661\n00:33:36.880 --> 00:33:40.390\nSo let's take a look at that inside\nof our script really quickly.\n\n662\n00:33:40.390 --> 00:33:44.640\nI have another script\nthere called 1 symbolic.\n\n663\n00:33:44.640 --> 00:33:47.080\nIf I can nano that called 1 symbolic.\n\n664\n00:33:47.080 --> 00:33:50.330\nSo I just basically took\nthe original script and\n\n665\n00:33:50.330 --> 00:33:53.440\nrehashed it to use these operators.\n\n666\n00:33:53.440 --> 00:33:57.160\nSo you'll notice in here, but\nyou'll also notice I'm not using\n\n667\n00:33:57.160 --> 00:34:00.980\nthe two open parentheses, because I'm not\ndeclaring to say a specific math function.\n\n668\n00:34:00.980 --> 00:34:04.600\nI could do a lot of equations in here,\nor comparisons should I say.\n\n669\n00:34:04.600 --> 00:34:11.150\nDoes this equal this, and it could be\na string, could be anything I want.\n\n670\n00:34:11.150 --> 00:34:13.080\nAnd I can use these GT greater than,\n\n671\n00:34:13.080 --> 00:34:18.090\nless than or\nequal to operations to make them work.\n\n672\n00:34:18.090 --> 00:34:22.000\nBasically, this script should do\nthe same thing our old script did, and\n\n673\n00:34:22.000 --> 00:34:25.820\ngive us those outputs, but\nI am using different way to do it,\n\n674\n00:34:25.820 --> 00:34:28.310\nbecause I might not want\nto do math specifically.\n\n675\n00:34:28.310 --> 00:34:31.270\nAnd that is why you would want\nto use one versus the other.\n\n676\n00:34:31.270 --> 00:34:34.240\n>> Daniel, you said that parentheses,\nthat is the mathematical one, but\n\n677\n00:34:34.240 --> 00:34:38.070\nthen if we use square brackets\n>> It can be kind\n\n678\n00:34:38.070 --> 00:34:41.140\nof like strings that we want to equal?\n\n679\n00:34:41.140 --> 00:34:41.790\n>> Exactly.\n\n680\n00:34:41.790 --> 00:34:45.870\nI can say, here I can go in here and\nsay, if num1='hi', that's not numbers.\n\n681\n00:34:45.870 --> 00:34:48.550\nBut if I put those inside of parentheses,\nit's looking for\n\n682\n00:34:48.550 --> 00:34:52.930\nmathematical equations and\n'hi' is not a mathematical equation.\n\n683\n00:34:52.930 --> 00:34:54.510\nThat's a string operator.\n\n684\n00:34:54.510 --> 00:34:59.320\nSo I want to use the open brackets, open\nand close brackets, to make that happen,\n\n685\n00:34:59.320 --> 00:35:02.410\nand when I use open and close brackets,\nI need to use the greater than.\n\n686\n00:35:02.410 --> 00:35:06.560\nThe only operator I know that really\nworks in there is that equals sign,\n\n687\n00:35:06.560 --> 00:35:09.650\njust the regular equals sign tends\nto work a lot, wherever you need it.\n\n688\n00:35:09.650 --> 00:35:11.520\nSo if you need that there, employ that.\n\n689\n00:35:11.520 --> 00:35:13.950\nOtherwise, just do the -EQ,\nand that'll work for you.\n\n690\n00:35:13.950 --> 00:35:18.060\nI run the script, it'll do the exact\nsame thing as the other script did.\n\n691\n00:35:18.060 --> 00:35:19.850\nSo I won't bore you with that.\n\n692\n00:35:19.850 --> 00:35:21.670\nBut now you can see\nthe difference between the two.\n\n693\n00:35:21.670 --> 00:35:24.020\nAnd again, hopefully you understand\nwhy you would use one over the other.\n\n694\n00:35:24.020 --> 00:35:26.660\n>> Yeah, if you've never worked\non any type of networking\n\n695\n00:35:26.660 --> 00:35:28.800\nequipment like Cisco routers or\nanything like that.\n\n696\n00:35:28.800 --> 00:35:33.750\nYou actually see these when you create\nroute maps, is where you tend to see them.\n\n697\n00:35:33.750 --> 00:35:35.470\nWhere you need to say look,\n\n698\n00:35:35.470 --> 00:35:39.630\nit needs to be between this IP address\nrange and this IP address range.\n\n699\n00:35:39.630 --> 00:35:41.520\nBut not any of these other ones here.\n\n700\n00:35:41.520 --> 00:35:44.100\nSo that what I actually\nencountered them most often is\n\n701\n00:35:44.100 --> 00:35:45.720\nwhen creating route maps as well.\n\n702\n00:35:45.720 --> 00:35:47.130\nSo there's a lot of features, right?\n\n703\n00:35:47.130 --> 00:35:50.060\nThere's a lot of different operators that\nhelps us out in other context just like\n\n704\n00:35:50.060 --> 00:35:51.410\nwe've been talking about.\n\n705\n00:35:51.410 --> 00:35:55.450\nBut when we begin to talk about now\nusing bash and the logical operatives,\n\n706\n00:35:55.450 --> 00:35:59.920\nthen again is foundational knowledge\nthat will help us as we get deeper and\n\n707\n00:35:59.920 --> 00:36:01.720\ndeeper into our scripting\nknowledge as well.\n\n708\n00:36:01.720 --> 00:36:05.600\nWhere we move from just numbers or\nthe existence of files,\n\n709\n00:36:05.600 --> 00:36:10.220\nactually building conditions\nthat need to be met and\n\n710\n00:36:10.220 --> 00:36:12.830\nusing those logical operators\nto help us prove that.\n\n711\n00:36:12.830 --> 00:36:13.990\nThank you again Daniel.\n\n712\n00:36:13.990 --> 00:36:14.530\n>> Happy to do it.\n\n713\n00:36:14.530 --> 00:36:15.320\n>> For helping us out here.\n\n714\n00:36:15.320 --> 00:36:17.080\nShowing us all the basic work.\n\n715\n00:36:17.080 --> 00:36:19.150\nI think we're finally\ngetting our feet wet right.\n\n716\n00:36:19.150 --> 00:36:20.690\n>> Yeah we definitely are.\n\n717\n00:36:20.690 --> 00:36:24.300\n>> We're actually going to be\ndiving in a little bit deeper,\n\n718\n00:36:24.300 --> 00:36:27.690\nand that means there's more shows, and\nDaniel's gonna be with us to help us out.\n\n719\n00:36:27.690 --> 00:36:30.130\nAnd that means you need\nto be with us as well as\n\n720\n00:36:30.130 --> 00:36:32.150\nwe continue on in BASH and scripting.\n\n721\n00:36:32.150 --> 00:36:34.690\nSigning off for ITProTV, I'm Ronnie Wong.\n\n722\n00:36:34.690 --> 00:36:35.490\n>> I'm Daniel Lowrie.\n\n723\n00:36:36.840 --> 00:36:39.295\n>> And we'll see you next time.\n\n724\n00:36:39.295 --> 00:36:41.810\n[SOUND]\n\n",
          "vimeoId": "146026746"
        },
        {
          "description": "In this episode, Ronnie and Daniel show us how to script the most basic condition: true or false.  They use the AND operator and the OR operator to help us under the syntax and function.  They also show several scripts that operate on those conditions.  There is a chance were every output may not give us the both and but we need  in-between values, according to the guys, it’s just as easy as substituting the AND / OR with mathematical or symbolic expressions to help.",
          "length": "2014",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements-111315-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements-111315-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements-111315-1-sm.jpg",
          "title": "Conditional Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.544 --> 00:00:15.760\nWelcome to another exciting\nepisode right here on ITproTV.\n\n3\n00:00:15.760 --> 00:00:19.940\nI'm your host Ronnie Wong and today we're\ntaking a look at bash and scripting,\n\n4\n00:00:19.940 --> 00:00:21.040\nspecifically though,\n\n5\n00:00:21.040 --> 00:00:24.990\ntalking about conditional statements\nthat we can use inside of our scripts.\n\n6\n00:00:24.990 --> 00:00:27.510\nAnd who better to help us then well,\nMr. Daniel Lowery.\n\n7\n00:00:27.510 --> 00:00:31.310\nAs we start getting more and more into\nscripting, conditions is where the power\n\n8\n00:00:31.310 --> 00:00:35.471\nis and Daniel you're going to show us\nhow to become that power user right now.\n\n9\n00:00:35.471 --> 00:00:37.115\n>> That's right.\nWe're gonna take this little bash\n\n10\n00:00:37.115 --> 00:00:37.642\nenvironment.\n\n11\n00:00:37.642 --> 00:00:41.930\nWe're gonna grab it in our little fist and\nmake it do a lot of cool stuff.\n\n12\n00:00:41.930 --> 00:00:44.420\nAnd make scripts that are very,\nvery useful to us and\n\n13\n00:00:44.420 --> 00:00:47.877\nmaking scripts that are useful to us\nusually involves conditional statements,\n\n14\n00:00:47.877 --> 00:00:50.440\nand that's what we're\ngonna focus on today.\n\n15\n00:00:50.440 --> 00:00:53.290\nWhat do I mean when I say\nconditional statements?\n\n16\n00:00:53.290 --> 00:00:58.050\nI'm talking about if-thens, and\ncase statements and even loops, whiles,\n\n17\n00:00:58.050 --> 00:01:02.700\nand for and all these other loops\nthat we're gonna look at as well,\n\n18\n00:01:02.700 --> 00:01:07.150\nthey're also conditional statements but\nthey're more properly called loops.\n\n19\n00:01:07.150 --> 00:01:09.120\nMost people refer to them as loops so\n\n20\n00:01:09.120 --> 00:01:12.810\nI've separated them out as conditional\nstatements gonna be if-then and\n\n21\n00:01:12.810 --> 00:01:16.880\ncase and then we'll do another show\non specific loops and how they work.\n\n22\n00:01:16.880 --> 00:01:20.030\nBut for today,\nlet's jump into the conditional statements\n\n23\n00:01:20.030 --> 00:01:23.170\nthat I've laid out for\nus which are if-then and case.\n\n24\n00:01:23.170 --> 00:01:25.640\n>> All right, sounds good Daniel.\n\n25\n00:01:25.640 --> 00:01:30.480\nAs we get started this is probably the\nmost logical way for us to get started.\n\n26\n00:01:30.480 --> 00:01:35.380\nWe all have understood at least\nfrom the time we were young.\n\n27\n00:01:35.380 --> 00:01:39.930\nThat our parents would say, if you do\nthis, then this is going to happen.\n\n28\n00:01:39.930 --> 00:01:43.000\nAnd we're really carrying that through and\nnow inside the scripting.\n\n29\n00:01:43.000 --> 00:01:45.520\nThe very fact is that we have a lot\nof data and what we need to do\n\n30\n00:01:45.520 --> 00:01:48.820\nis be able to react to that data and\nscripting helps us to be able to do that.\n\n31\n00:01:48.820 --> 00:01:51.310\nBut the logic is the key and\nthe syntax is the key.\n\n32\n00:01:51.310 --> 00:01:53.770\nSo Daniel where we gonna begin here?\n\n33\n00:01:53.770 --> 00:01:54.880\n>> Yeah.\nThat's a great question.\n\n34\n00:01:54.880 --> 00:01:58.870\nWe have to understand how to create the\nlogical structures of these conditional\n\n35\n00:01:58.870 --> 00:02:02.300\nstatements, or it's not gonna work.\n\n36\n00:02:02.300 --> 00:02:05.195\nThe bash interprets only a certain way.\n\n37\n00:02:05.195 --> 00:02:08.868\nAnd if we step outside of those\nboundaries it's gonna yell at you,\n\n38\n00:02:08.868 --> 00:02:13.458\nsend you to your room, going to go to bed\nwithout supper, all of sorts of bad stuff,\n\n39\n00:02:13.458 --> 00:02:16.345\nso let's see how we build\na conditional statement so\n\n40\n00:02:16.345 --> 00:02:19.649\nthat we can put the correct\nsyntax into our scripts itself.\n\n41\n00:02:19.649 --> 00:02:23.822\nSo we'll take a look at my computer really\nquickly, I've just made up a quick-\n\n42\n00:02:23.822 --> 00:02:24.478\n>> Diagram.\n\n43\n00:02:24.478 --> 00:02:28.207\n>> Yeah it's a diagram but\nwhat I mean to say is pseudo code, almost.\n\n44\n00:02:28.207 --> 00:02:29.557\nIt's not the real code,\n\n45\n00:02:29.557 --> 00:02:33.044\nit's just kind of a representation\nof how the code should look.\n\n46\n00:02:33.044 --> 00:02:38.061\nSo we have if-then, which is basically\nsaying if we have a condition and\n\n47\n00:02:38.061 --> 00:02:44.260\nit comes out that that condition is true,\nthen the run commands do something for me.\n\n48\n00:02:44.260 --> 00:02:44.880\nRight.\nAnd\n\n49\n00:02:44.880 --> 00:02:48.620\nthen we have to make sure that we close\nthat out by using the phi statement.\n\n50\n00:02:48.620 --> 00:02:52.160\nWe see the same kind of\nthing over here with case.\n\n51\n00:02:52.160 --> 00:02:55.390\nWhat case does is basically it's a faster,\na better stronger way\n\n52\n00:02:55.390 --> 00:02:58.050\nof using if-then statements,\nespecially if you have a lot of them.\n\n53\n00:02:58.050 --> 00:02:59.428\nThis case could be your life saver there.\n\n54\n00:02:59.428 --> 00:03:02.984\nBut what it's saying is case,\nthen we have a condition, and\n\n55\n00:03:02.984 --> 00:03:07.588\nwe put that into the case environment,\ninto the case syntax, condition one,\n\n56\n00:03:07.588 --> 00:03:09.988\ncondition two, condition three so on.\n\n57\n00:03:09.988 --> 00:03:12.643\nIf it meets condition one,\nit runs this command.\n\n58\n00:03:12.643 --> 00:03:14.823\nIf it meets condition two,\nit runs that command.\n\n59\n00:03:14.823 --> 00:03:19.061\nIf it meets condition three, so on and\nso forth until you give it some sort of\n\n60\n00:03:19.061 --> 00:03:23.302\noperator to say I'm done running\nconditions, let's get out of here which\n\n61\n00:03:23.302 --> 00:03:26.770\nis basically the word case\nspelled backwards which is esac.\n\n62\n00:03:26.770 --> 00:03:31.160\nSo case and esac, and if-then,\nthat's the guys we're talking about.\n\n63\n00:03:31.160 --> 00:03:34.330\nSo now you can see\nthe basic structure of what\n\n64\n00:03:34.330 --> 00:03:36.810\nit means to have a conditional statement,\nwe're gonna do a lot of if-then today.\n\n65\n00:03:36.810 --> 00:03:38.570\nI don't know if we'll get to case in this.\n\n66\n00:03:38.570 --> 00:03:40.640\nWe might actually have to\ndo a part two on that.\n\n67\n00:03:40.640 --> 00:03:41.370\nBut we'll see.\n\n68\n00:03:41.370 --> 00:03:43.840\nHopefully, we'll cross that\nbridge when we get there.\n\n69\n00:03:43.840 --> 00:03:46.260\nSo let's see here.\n\n70\n00:03:46.260 --> 00:03:48.970\nLet's make some code.\n\n71\n00:03:48.970 --> 00:03:53.100\nLet's jump into our environment and\nsee what we can do with this thing.\n\n72\n00:03:54.430 --> 00:03:55.610\nInto my computer we go.\n\n73\n00:03:55.610 --> 00:03:58.010\nI've got the terminal all ready open, and\n\n74\n00:03:58.010 --> 00:04:02.910\nI'm just going to make a very simple easy\nif statement so that we can look at how\n\n75\n00:04:02.910 --> 00:04:07.160\nit's structured and\nhow it actually works, all right?\n\n76\n00:04:07.160 --> 00:04:10.190\nSo I'll call this one, let's see here.\n\n77\n00:04:10.190 --> 00:04:14.700\nWe'll call it simple, so nano,\nsimple.sh, so very simple right?\n\n78\n00:04:14.700 --> 00:04:18.680\nGo into here, add my first line of code,\n/bin/bash, so\n\n79\n00:04:18.680 --> 00:04:23.690\nthat we invoke that bash terminal,\nthat bash shell, and\n\n80\n00:04:23.690 --> 00:04:29.705\nwhat we're doing is here,\nwe're just gonna say if a command is true,\n\n81\n00:04:29.705 --> 00:04:33.330\nthen do something, right?\n\n82\n00:04:33.330 --> 00:04:36.860\nSo I'll just say if cal,\n\n83\n00:04:36.860 --> 00:04:40.920\nwhich is the calendar command,\nthen echo success, like so.\n\n84\n00:04:43.580 --> 00:04:44.250\nAnd then fi.\n\n85\n00:04:44.250 --> 00:04:48.560\nSo really quickly I\nstarted an if statement.\n\n86\n00:04:48.560 --> 00:04:51.590\nHere it is right there, declared it.\n\n87\n00:04:51.590 --> 00:04:55.920\nIf you'll notice,\nit gets syntax highlighted, and\n\n88\n00:04:55.920 --> 00:05:01.820\nthen I said here is a command, a condition\nthat I need to see if it is true or false.\n\n89\n00:05:01.820 --> 00:05:04.950\nIf it is true,\nthen echo success out to the terminal and\n\n90\n00:05:04.950 --> 00:05:05.940\nthen exit the if statement.\n\n91\n00:05:05.940 --> 00:05:06.860\nWe're done.\n\n92\n00:05:06.860 --> 00:05:07.920\nI'm tired of this if statement.\n\n93\n00:05:07.920 --> 00:05:09.030\nIt's over with.\n\n94\n00:05:09.030 --> 00:05:11.630\nI throw my fi on the end of there and\nI'm good to go.\n\n95\n00:05:11.630 --> 00:05:14.890\nSo now all we have to do is save that.\n\n96\n00:05:14.890 --> 00:05:19.770\nWe'll go back out and\ndon't forget to CH mod that guy.\n\n97\n00:05:19.770 --> 00:05:22.060\nMod plus X, and that was simple SH.\n\n98\n00:05:22.060 --> 00:05:23.510\nNow it should be runnable.\n\n99\n00:05:25.090 --> 00:05:26.010\nAnd let's see what it does.\n\n100\n00:05:26.010 --> 00:05:28.590\nI have a of course I do.\n\n101\n00:05:28.590 --> 00:05:31.000\nLet's see here, let's go in here and\nsee where I messed up.\n\n102\n00:05:31.000 --> 00:05:35.010\nNano simple,\nI can't even write a simple one.\n\n103\n00:05:36.510 --> 00:05:38.295\nThere's my problem, my then says the.\n\n104\n00:05:38.295 --> 00:05:40.690\n[LAUGH] There we go,\ngetting the syntax highlighting.\n\n105\n00:05:40.690 --> 00:05:42.880\nI can't believe I didn't see that.\n\n106\n00:05:42.880 --> 00:05:46.715\nLet's try that one, see if that\ndoesn't work a little bit better.\n\n107\n00:05:46.715 --> 00:05:49.030\nSimple.sh, there we go.\n\n108\n00:05:49.030 --> 00:05:51.000\nSo it ran the command.\n\n109\n00:05:51.000 --> 00:05:54.530\nIt saw that it did run, it was true,\nand then echoed success.\n\n110\n00:05:54.530 --> 00:05:56.310\nSo, now, very simplistic, but\n\n111\n00:05:56.310 --> 00:05:59.830\nwe're starting to get the idea of what's\ngoing on here, that we're looking for\n\n112\n00:05:59.830 --> 00:06:03.850\na certain condition to be true for\nif to do things for us.\n\n113\n00:06:03.850 --> 00:06:06.410\n>> Now, Daniel,\nthe operating system is in the background,\n\n114\n00:06:06.410 --> 00:06:11.370\nthough, taking the time to determine\nif that if statement is true or false,\n\n115\n00:06:11.370 --> 00:06:15.460\nbut when it does so, it has actually\nreturned some type of code, right?\n\n116\n00:06:15.460 --> 00:06:18.823\n>> Yeah, yeah, and this is probably\nsomething that if you've ever took a look\n\n117\n00:06:18.823 --> 00:06:22.031\nat programming before, or scripting\nbefore, it might have been a bit of\n\n118\n00:06:22.031 --> 00:06:25.462\na mystery to you when they say like\nin C I know it says return zero.\n\n119\n00:06:25.462 --> 00:06:28.620\nWe actually have a way to do that\nsame kind of thing here in bash.\n\n120\n00:06:28.620 --> 00:06:34.711\nBut what's happening is there are exit\ncodes or exit statuses of commands.\n\n121\n00:06:34.711 --> 00:06:37.019\nAnd if I run a command and\nit runs successfully,\n\n122\n00:06:37.019 --> 00:06:39.570\nthe exit status should be zero.\n\n123\n00:06:39.570 --> 00:06:40.940\nThat is a successful run, okay?\n\n124\n00:06:40.940 --> 00:06:43.940\nIf I have anything else, and\nthere are codes that mean certain thing,\n\n125\n00:06:43.940 --> 00:06:45.100\nexit statuses that mean this.\n\n126\n00:06:45.100 --> 00:06:49.650\nSo if you see something and\nyou're like, how do I see this?\n\n127\n00:06:49.650 --> 00:06:51.530\nI wanna know this magical power.\n\n128\n00:06:51.530 --> 00:06:53.070\nYeah, we'll take a look\nat it in just a second.\n\n129\n00:06:53.070 --> 00:06:57.640\nBut, I get anything other than zero, that\nmeans it didn't work correctly, right?\n\n130\n00:06:57.640 --> 00:07:01.500\nI did not get a successful exit status.\n\n131\n00:07:01.500 --> 00:07:03.630\nSo lets see what I'm talking about here.\n\n132\n00:07:03.630 --> 00:07:05.270\nHow do we see exit statuses?\n\n133\n00:07:05.270 --> 00:07:09.290\nWhat's really cool is you have a way\nof doing that inside your shell.\n\n134\n00:07:09.290 --> 00:07:10.850\nYou can do it very simply.\n\n135\n00:07:10.850 --> 00:07:15.090\nAll you have to do is say,\nlets run a command, okay?\n\n136\n00:07:15.090 --> 00:07:15.780\nPWD.\n\n137\n00:07:15.780 --> 00:07:17.110\nPrint working directory.\n\n138\n00:07:17.110 --> 00:07:18.000\nVery simple.\n\n139\n00:07:18.000 --> 00:07:20.340\nType PWD, hit enter, it runs.\n\n140\n00:07:20.340 --> 00:07:22.659\nIt successfully gave me\nthe output right here.\n\n141\n00:07:23.680 --> 00:07:26.499\nAnd now, I wanna see that exit status.\n\n142\n00:07:26.499 --> 00:07:29.107\nHow do I know that the exit status\nwas zero other than the fact it\n\n143\n00:07:29.107 --> 00:07:30.824\nactually did what it was supposed to do?\n\n144\n00:07:30.824 --> 00:07:34.910\nI can do echo $?.\n\n145\n00:07:34.910 --> 00:07:35.562\nOkay.\n\n146\n00:07:35.562 --> 00:07:37.011\nSo that $?\n\n147\n00:07:37.011 --> 00:07:41.599\nis our Bash way of\nsaying show me the last,\n\n148\n00:07:41.599 --> 00:07:47.180\nthe exit stance of the last\nexecuted command, okay.\n\n149\n00:07:47.180 --> 00:07:47.975\nHopefully that made sense.\n\n150\n00:07:47.975 --> 00:07:53.635\nSo the last Last executed command,\nshow me that exit status, okay?\n\n151\n00:07:53.635 --> 00:07:56.070\nSo I hit return and\nI see it comes back as zero.\n\n152\n00:07:56.070 --> 00:07:58.080\nThat's what we wanted to see.\n\n153\n00:07:58.080 --> 00:07:59.680\nThat mean that it was true.\n\n154\n00:07:59.680 --> 00:08:02.460\nAnd that's what if looks for.\n\n155\n00:08:02.460 --> 00:08:04.570\nSo it kind of does this\nall in the background.\n\n156\n00:08:04.570 --> 00:08:08.260\nThe back shell itself is doing this for\nyou through the if statement so\n\n157\n00:08:08.260 --> 00:08:09.560\nyou don't have to see it.\n\n158\n00:08:09.560 --> 00:08:13.560\nYou don't have to say look for\nthis and that, it would take forever.\n\n159\n00:08:13.560 --> 00:08:15.200\nIt does that stuff for you.\n\n160\n00:08:15.200 --> 00:08:18.080\nLooking for those exit status' and\nlooking for that zero.\n\n161\n00:08:18.080 --> 00:08:22.480\nFind zero and it knows that it was true,\nit finds anything else then it must have\n\n162\n00:08:22.480 --> 00:08:27.700\nbeen false and therefore we\nbuild our scripts accordingly.\n\n163\n00:08:27.700 --> 00:08:31.480\n>> So, Daniel, if we type in something\nwrong, like PWD for print working record,\n\n164\n00:08:31.480 --> 00:08:35.410\ninstead we said PWWD,\nthen we would ge a different exit status?\n\n165\n00:08:35.410 --> 00:08:36.410\n>> That's exactly right.\n\n166\n00:08:36.410 --> 00:08:40.690\nWe see these kind of in error codes and\nthings like that, but\n\n167\n00:08:40.690 --> 00:08:43.040\nlet's stop talking about it.\n\n168\n00:08:43.040 --> 00:08:45.070\nLet's take a look and\nsee how that works itself out.\n\n169\n00:08:45.070 --> 00:08:45.830\nLet's do what Ronnie said.\n\n170\n00:08:45.830 --> 00:08:46.750\nWe'll do PWWD.\n\n171\n00:08:46.750 --> 00:08:50.640\nNow I hit Enter and\nI get this bash: PWWD command not found.\n\n172\n00:08:50.640 --> 00:08:53.080\nThat's the standard error message for\n\n173\n00:08:53.080 --> 00:08:55.500\nany command you type in that\ndoesn't actually exist.\n\n174\n00:08:55.500 --> 00:08:56.640\nYou get that return.\n\n175\n00:08:56.640 --> 00:09:00.610\nBut if I echo that variable,\nyou'll notice I get an exit status of 127.\n\n176\n00:09:00.610 --> 00:09:03.040\nWhoa.\nSo different than zero obviously.\n\n177\n00:09:03.040 --> 00:09:05.610\nAnd well, what does that mean?\n\n178\n00:09:06.680 --> 00:09:08.690\nWell, I'm gonna show you\nhere really quickly.\n\n179\n00:09:08.690 --> 00:09:10.330\nWe got this command not found.\n\n180\n00:09:10.330 --> 00:09:17.290\nThat exit status, 127,\nmeans command not found.\n\n181\n00:09:17.290 --> 00:09:21.810\nSo, I've actually made a diagram for us\nto take a look at with these exit codes.\n\n182\n00:09:21.810 --> 00:09:26.160\nWe have a few of them that\nare very common that we work\n\n183\n00:09:26.160 --> 00:09:29.090\nwith that you might see\non any day to day basis.\n\n184\n00:09:29.090 --> 00:09:31.680\nWhere you're actually\nlooking at exit statuses.\n\n185\n00:09:31.680 --> 00:09:34.440\nObviously, if you were\nworking with an if command,\n\n186\n00:09:34.440 --> 00:09:37.230\nthis might be something\nthat is pertinent for you.\n\n187\n00:09:37.230 --> 00:09:39.940\nSo we see number one,\nis a catch-all for general errors.\n\n188\n00:09:39.940 --> 00:09:43.413\nSo if I were to type in something,\nI tried to throw a command, or\n\n189\n00:09:43.413 --> 00:09:48.003\nit just didn't return what we were looking\nfor, and I saw one was that exit status,\n\n190\n00:09:48.003 --> 00:09:52.159\nIt's not really descriptive but\nwe knew it was something other than zero.\n\n191\n00:09:52.159 --> 00:09:55.510\nAnd we can use that to our advantage,\nright?\n\n192\n00:09:55.510 --> 00:09:57.220\nI can say,\nif the exit status comes out false,\n\n193\n00:09:57.220 --> 00:10:00.380\nwhich is anything other than zero\nlike one, so if I'm a programmer,\n\n194\n00:10:00.380 --> 00:10:05.350\nI'm creating a program, and I'm putting\nexit statuses into that program,\n\n195\n00:10:05.350 --> 00:10:09.340\none might be a general exit status\nthat I create for whatever error.\n\n196\n00:10:09.340 --> 00:10:11.470\nRight?\nAnd I don't want to define it.\n\n197\n00:10:11.470 --> 00:10:14.006\nSo I might see a one, and that's what\nI mean. It's just a general error,\n\n198\n00:10:14.006 --> 00:10:17.970\nsomething went wrong with the program and\nit stopped.\n\n199\n00:10:17.970 --> 00:10:19.351\nSo we also have two.\n\n200\n00:10:19.351 --> 00:10:21.227\nA misuse of shell builtins.\n\n201\n00:10:21.227 --> 00:10:21.910\n>> [LAUGH]\n>> All right.\n\n202\n00:10:21.910 --> 00:10:23.870\nSo you're going, okay,\nwhat does that mean?\n\n203\n00:10:23.870 --> 00:10:27.748\nThat means that we've tried\nto use a shell builtin.\n\n204\n00:10:27.748 --> 00:10:28.915\n>> Command?\n\n205\n00:10:28.915 --> 00:10:30.267\n>> Command.\n\n206\n00:10:30.267 --> 00:10:31.820\nBut we threw something at\nit that it didn't expect.\n\n207\n00:10:31.820 --> 00:10:33.840\nWe threw an argument at\nit that's not valid.\n\n208\n00:10:33.840 --> 00:10:37.340\nThat's probably the most common way\nin which you'll see this misuse\n\n209\n00:10:37.340 --> 00:10:38.840\nof shell commands.\n\n210\n00:10:38.840 --> 00:10:40.280\nWe didn't do the syntax correctly.\n\n211\n00:10:40.280 --> 00:10:43.470\nThat's why you'll see\nthe exit status of two.\n\n212\n00:10:43.470 --> 00:10:45.870\n126 is command invoked cannot execute.\n\n213\n00:10:45.870 --> 00:10:48.140\nNow this might happen for\na few different reasons.\n\n214\n00:10:48.140 --> 00:10:50.300\nMaybe you don't have\npermissions to execute it.\n\n215\n00:10:50.300 --> 00:10:53.550\nCould be a valid program,\nyou just don't have the rights to run it.\n\n216\n00:10:54.870 --> 00:10:56.730\nAnd then you'll get an exit status of 126.\n\n217\n00:10:56.730 --> 00:10:57.940\n127 is command not found.\n\n218\n00:10:57.940 --> 00:11:02.490\nWe saw that one with the PWWD,\ndoesn't exist, not in our system.\n\n219\n00:11:02.490 --> 00:11:03.870\nSo, the exit status is 127.\n\n220\n00:11:03.870 --> 00:11:07.290\n128 is invalid argument to exit.\n\n221\n00:11:07.290 --> 00:11:08.732\nOkay, well what does that mean?\n\n222\n00:11:08.732 --> 00:11:12.336\nIt means that we were actually\ntrying to get an exit status,\n\n223\n00:11:12.336 --> 00:11:15.450\nkind of what I was talking\nabout with programming.\n\n224\n00:11:15.450 --> 00:11:18.445\nAnd you'll see this with your scripts\nas well if you get that advanced.\n\n225\n00:11:18.445 --> 00:11:23.296\nWhere you're saying, this is the exit\nstatus of this, if it's not zero.\n\n226\n00:11:23.296 --> 00:11:26.391\nIf you give it a value that it\ndoesn't know how to interpret,\n\n227\n00:11:26.391 --> 00:11:29.870\nthen you'll get that 128 because\nit'll say invalid argument.\n\n228\n00:11:29.870 --> 00:11:31.310\nI don't know what this is.\n\n229\n00:11:31.310 --> 00:11:32.540\nI don't know how to interpret this.\n\n230\n00:11:32.540 --> 00:11:34.100\nSo 128 is my exit.\n\n231\n00:11:34.100 --> 00:11:37.100\n130 is script terminated by control-c.\n\n232\n00:11:37.100 --> 00:11:40.673\nSo if I'm running a script and\nI get lost in an infinite loop and\n\n233\n00:11:40.673 --> 00:11:43.304\nit's just running and running and running.\n\n234\n00:11:43.304 --> 00:11:47.220\nOr the output is so large it doesn't stop.\n\n235\n00:11:47.220 --> 00:11:50.270\nAnd I'm like, I wanna kill this\nreally quickly, I can do a control-c.\n\n236\n00:11:50.270 --> 00:11:57.170\nControl c usually sends a kill\nsignal to to whatever is running.\n\n237\n00:11:58.330 --> 00:12:01.290\nYou'll get that 130 because you\nthrew that control c at it and\n\n238\n00:12:01.290 --> 00:12:03.900\nnot some other way of killing a program.\n\n239\n00:12:03.900 --> 00:12:06.780\nLike a kill dash nine or something\nlike that that sends a kill signal.\n\n240\n00:12:06.780 --> 00:12:08.068\nThat's a different exit status.\n\n241\n00:12:08.068 --> 00:12:13.140\nAnd then 255* basically saying,\nwe got an exit status, but\n\n242\n00:12:13.140 --> 00:12:16.550\nit's not within the range of 1 to 255 or\n0 to 255.\n\n243\n00:12:16.550 --> 00:12:18.730\nSo it's out of range.\n\n244\n00:12:18.730 --> 00:12:21.010\nIt's just not something\nwe know what to do with.\n\n245\n00:12:21.010 --> 00:12:25.250\nSomebody's programmed a range in here,\nit's a valid number, something like 312,\n\n246\n00:12:25.250 --> 00:12:27.630\nso it's not like a floating point decimal.\n\n247\n00:12:27.630 --> 00:12:29.560\nWhich will give you this\ninvalid argument to exit,\n\n248\n00:12:29.560 --> 00:12:31.070\nit wouldn't know what to do with that.\n\n249\n00:12:31.070 --> 00:12:34.030\nIt is a good integer it just\ndoesn't know what to do with it or\n\n250\n00:12:34.030 --> 00:12:36.090\nit's out of the range, I mean.\n\n251\n00:12:36.090 --> 00:12:37.990\nSo that's when you've seen that 255 star.\n\n252\n00:12:37.990 --> 00:12:42.900\nSo a lot of different exits statuses for\nus to look at and understand,\n\n253\n00:12:42.900 --> 00:12:45.490\nthese are probably ones that you'll\neasily start to memorize and\n\n254\n00:12:45.490 --> 00:12:46.650\nuse them inside of your scripts.\n\n255\n00:12:46.650 --> 00:12:50.939\nBut for right now, it's okay if\nyou don't have that on lockdown,\n\n256\n00:12:50.939 --> 00:12:52.479\nthat's not a big deal.\n\n257\n00:12:52.479 --> 00:12:53.666\nThe more you use it and\nthe more you play with it,\n\n258\n00:12:53.666 --> 00:12:55.190\nthe easier that information\nwill be retained.\n\n259\n00:12:55.190 --> 00:12:58.620\nSo just look over that kind of\nthing from time to time, and\n\n260\n00:12:58.620 --> 00:13:00.360\nbe aware that they are there.\n\n261\n00:13:00.360 --> 00:13:02.480\nBut normally, looking for\nexit status zero or\n\n262\n00:13:02.480 --> 00:13:06.560\nsomething other than zero,\nmaybe not specifically one of these.\n\n263\n00:13:06.560 --> 00:13:09.370\n>> Now Daniel, it looks like since\nwe don't see the codes themselves,\n\n264\n00:13:09.370 --> 00:13:13.970\nsometimes though, where we saw, what\nwe just saw, where the command was not\n\n265\n00:13:13.970 --> 00:13:17.090\nexecuted, or whatever the syntax\nwas that we saw the PWWD.\n\n266\n00:13:17.090 --> 00:13:20.967\nIt seems like what the system does,\nat least, is takes that exit code and\n\n267\n00:13:20.967 --> 00:13:25.242\njust gives it an alias like here's what\nthe message is supposed to be reported.\n\n268\n00:13:25.242 --> 00:13:27.752\nSo it's something that we understand\nwithout having to look it up.\n\n269\n00:13:27.752 --> 00:13:28.967\n>> Yeah, that's exactly right.\n\n270\n00:13:28.967 --> 00:13:33.537\nIt's all about letting the system\nknow what's happened maybe not\n\n271\n00:13:33.537 --> 00:13:37.870\nnecessarily you as the user\nbecause as a user, if I got 127.\n\n272\n00:13:37.870 --> 00:13:41.380\nIf I didn't know what 127 meant,\nthen I wouldn't care about it.\n\n273\n00:13:41.380 --> 00:13:45.360\nI'd go, okay 127, apparently that's what\nhappens when you type in this command.\n\n274\n00:13:45.360 --> 00:13:48.840\nSo, will you tend to get\nsome human-readable output?\n\n275\n00:13:48.840 --> 00:13:52.050\nAnd the system works with\nthe exit statuses normally.\n\n276\n00:13:52.050 --> 00:13:56.500\nNow again, we can't play with them,\nthat's why we know what they are.\n\n277\n00:13:56.500 --> 00:14:00.870\nSo if you want to use them inside of your\nscripts for exiting out, then you can.\n\n278\n00:14:00.870 --> 00:14:05.390\nBut normally, like I said, especially\ninside just a standard if statement\n\n279\n00:14:05.390 --> 00:14:08.290\nIt's just looking for zero or\nsomething other than zero.\n\n280\n00:14:08.290 --> 00:14:11.080\n>> Now Daniel, I understand that we can\nalso run another command called test.\n\n281\n00:14:11.080 --> 00:14:15.220\nAnd it really does kinda the same thing\nthat the system is already doing.\n\n282\n00:14:15.220 --> 00:14:19.411\nSo we're gonna run it but you need to tell\nme why in the world I would choose to,\n\n283\n00:14:19.411 --> 00:14:23.755\nif I know I can get an exit status of 0 of\nwhatever it is, why would I choose this?\n\n284\n00:14:23.755 --> 00:14:27.511\n>> Yeah, we're gonna use tests\nbecause we want to test conditions.\n\n285\n00:14:27.511 --> 00:14:32.114\nSo when we did our original,\nour simple if statement there,\n\n286\n00:14:32.114 --> 00:14:35.194\nit was just saying, Here's a command.\n\n287\n00:14:35.194 --> 00:14:41.140\nAnd if it is true, if it returns an exit\nstatus of zero, then do something.\n\n288\n00:14:41.140 --> 00:14:43.494\nBut what if I have conditions\nbased off of that?\n\n289\n00:14:43.494 --> 00:14:47.872\nOr I have more conditions that I\nwant to throw at the if command.\n\n290\n00:14:47.872 --> 00:14:53.610\nHow do I make those valid to if, and\nthat's where the test command comes in.\n\n291\n00:14:53.610 --> 00:14:55.112\nIt's easier to show you and\n\n292\n00:14:55.112 --> 00:14:58.521\nthen talk about it than it is to\ntry to explain it and then do it.\n\n293\n00:14:58.521 --> 00:14:59.316\nSo let's do that.\n\n294\n00:14:59.316 --> 00:15:03.430\nLet's jump back to my\ncomputer really quickly here.\n\n295\n00:15:03.430 --> 00:15:08.540\nSo here we have just standard,\nlet's open a file I have here.\n\n296\n00:15:08.540 --> 00:15:09.650\nLet's take a look at that.\n\n297\n00:15:09.650 --> 00:15:10.882\nI'm gonna clear out here.\n\n298\n00:15:10.882 --> 00:15:16.540\nAnd we'll do nano and\none simple all right, so here we go.\n\n299\n00:15:16.540 --> 00:15:22.070\nWhat we're looking at here is a simple if\nstatement, another simple if statement.\n\n300\n00:15:23.550 --> 00:15:26.620\nI'm trying to keep it as\neasy to swallow as possible,\n\n301\n00:15:26.620 --> 00:15:28.650\nespecially for you guys out there.\n\n302\n00:15:28.650 --> 00:15:30.100\nSo we have, if test.\n\n303\n00:15:30.100 --> 00:15:35.059\nNow this is a command that's\nbuilt in to the bash shell.\n\n304\n00:15:35.059 --> 00:15:40.967\nWe're saying test dash d which is\nbasically saying if this directory exists,\n\n305\n00:15:40.967 --> 00:15:43.841\nif you find this and it is a directory.\n\n306\n00:15:43.841 --> 00:15:46.055\nThen return zero.\n\n307\n00:15:46.055 --> 00:15:47.507\nSo it's not a command.\n\n308\n00:15:47.507 --> 00:15:48.635\nAnd it's a directory.\n\n309\n00:15:48.635 --> 00:15:50.721\nHow does the directory return zero?\n\n310\n00:15:50.721 --> 00:15:52.290\nThat's why we need the test command.\n\n311\n00:15:52.290 --> 00:15:53.387\nAll right, okay?\n\n312\n00:15:53.387 --> 00:15:58.113\nSo it looks through that and\nsees is that an actual thing,\n\n313\n00:15:58.113 --> 00:16:00.579\nthen do this, echo success.\n\n314\n00:16:00.579 --> 00:16:03.015\nSo then when I run this statement,\n\n315\n00:16:03.015 --> 00:16:08.307\nif it finds that directory in the system,\nit will return to 0 exit status,\n\n316\n00:16:08.307 --> 00:16:12.687\ntherefore running the next part\nof the code that's built in.\n\n317\n00:16:12.687 --> 00:16:15.827\nIf it doesn't find it, then it won't run\nthe code and nothing will happen, okay?\n\n318\n00:16:15.827 --> 00:16:19.118\nCuz there's no condition for\nif nothing is found, or\n\n319\n00:16:19.118 --> 00:16:22.420\nsome exit status other than one,\nor other than zero.\n\n320\n00:16:22.420 --> 00:16:26.279\nSo let's take a look at that, let's run it\nreally quickly and see what happens here.\n\n321\n00:16:26.279 --> 00:16:28.640\nSo I'll log out and I'll say nano,\n\n322\n00:16:28.640 --> 00:16:33.030\none simple, I didn't want name it that,\nwhat am I doing?\n\n323\n00:16:33.030 --> 00:16:34.110\nI wanna run it.\n\n324\n00:16:34.110 --> 00:16:34.730\nThat's right, boy.\n\n325\n00:16:34.730 --> 00:16:37.040\nGet down to it, to doing things.\n\n326\n00:16:37.040 --> 00:16:38.710\nThere we go.\n\n327\n00:16:38.710 --> 00:16:42.940\nAnd, we get success,\neverything is nice and running.\n\n328\n00:16:42.940 --> 00:16:44.690\nNow, there's a lot of operators or\n\n329\n00:16:44.690 --> 00:16:48.010\narguments that you can\nthrow at the test command.\n\n330\n00:16:48.010 --> 00:16:50.300\nIt doesn't stop,\nit's just a one trick pony.\n\n331\n00:16:50.300 --> 00:16:52.292\nLook for directories and\ngive me a zero status.\n\n332\n00:16:52.292 --> 00:16:56.541\nThere is a ton of arguments you can\nactually use with the test command,\n\n333\n00:16:56.541 --> 00:16:58.855\nlots and lots and lots of them, okay?\n\n334\n00:16:58.855 --> 00:17:02.227\nBut, I am gonna just give some of\nthe more common ones, let's see here.\n\n335\n00:17:02.227 --> 00:17:07.145\nThe dash a, so if I do test -a\nlike that Inside of my code,\n\n336\n00:17:07.145 --> 00:17:10.232\nit would say this is illogical and.\n\n337\n00:17:10.232 --> 00:17:14.154\nSo we looked at logical anding before\nusing that ampersand, ampersand,\n\n338\n00:17:14.154 --> 00:17:15.747\nkind of the exact same thing.\n\n339\n00:17:15.747 --> 00:17:19.201\nSo I'm giving it a condition and\nanother condition.\n\n340\n00:17:19.201 --> 00:17:22.837\nSo I would call that into\neffect by saying -a like that.\n\n341\n00:17:22.837 --> 00:17:28.729\nAlso -o,\nlike that will give us the or, right?\n\n342\n00:17:28.729 --> 00:17:33.493\nAgain, we have the two pipes straight up\nand down, that logical or, same idea,\n\n343\n00:17:33.493 --> 00:17:38.278\nit's just a way I could use test to do\noring, logical oring inside of my scripts.\n\n344\n00:17:38.278 --> 00:17:44.220\nI can say test-o and then condition,\ncondition, and off we go, right?\n\n345\n00:17:44.220 --> 00:17:45.610\nWhat else do we have here?\n\n346\n00:17:45.610 --> 00:17:49.207\nE, one of our favorites,\nthe dash E, does this file exist?\n\n347\n00:17:49.207 --> 00:17:53.372\nSo it can be either a file or\na directory, an executable program,\n\n348\n00:17:53.372 --> 00:17:55.270\ndoesn't matter what it is.\n\n349\n00:17:55.270 --> 00:18:00.985\nAs long as it exists on the system, then\ndo the code, return that zero exit status.\n\n350\n00:18:00.985 --> 00:18:05.836\nBut see there's a -f is probably the only\nother one that you really need to know off\n\n351\n00:18:05.836 --> 00:18:09.090\nthe top of your head and\nbe able to spit those out on cue.\n\n352\n00:18:09.090 --> 00:18:12.971\nAnd that -f says is it a file,\nand does it exist?\n\n353\n00:18:12.971 --> 00:18:15.590\nSo just a couple of those\nI wanted to show at you.\n\n354\n00:18:15.590 --> 00:18:20.484\nYou can look inside the Bash manual page,\nhas all of them in there, and just look\n\n355\n00:18:20.484 --> 00:18:25.110\nfor the test function that's built in\nthere, that built in test command.\n\n356\n00:18:25.110 --> 00:18:28.896\n>> Now Daniel the test commands seem to\ndo everything that we just talked about,\n\n357\n00:18:28.896 --> 00:18:32.391\nbut there are apparently is other ways\nwe can also run the test command,\n\n358\n00:18:32.391 --> 00:18:35.207\ninstead of using the word test,\nwe use square brackets?\n\n359\n00:18:35.207 --> 00:18:40.408\n>> Yes, so test is awesome, we can use\nit to test and return that zero for\n\n360\n00:18:40.408 --> 00:18:45.040\nus or something other than zero,\nbut we have to type in test.\n\n361\n00:18:45.040 --> 00:18:49.878\nSo there's a newer,\nneater way to do it which is the brackets.\n\n362\n00:18:49.878 --> 00:18:52.958\nSo let's do that, let me show you\nhow that works really quickly and\n\n363\n00:18:52.958 --> 00:18:54.775\nthen we'll explain what's going on.\n\n364\n00:18:54.775 --> 00:19:01.804\nLet me get rid of this here,\nlet's take a look at, okay, here we go.\n\n365\n00:19:01.804 --> 00:19:07.182\nLet me see what we got here,\nit will be nano\n\n366\n00:19:07.182 --> 00:19:12.114\n1simple_if.sh, and take a look.\n\n367\n00:19:12.114 --> 00:19:15.831\nSo in here,\nthat's the one we just used before.\n\n368\n00:19:15.831 --> 00:19:18.667\nI want to run this exact same thing,\nbut I want it to be a little neater,\n\n369\n00:19:18.667 --> 00:19:20.410\na little cleaner, a little easier to use.\n\n370\n00:19:20.410 --> 00:19:22.180\nThat's where these\nbrackets come into play.\n\n371\n00:19:22.180 --> 00:19:25.060\nSo basically, when I use the open and\nclosing brackets,\n\n372\n00:19:25.060 --> 00:19:29.760\nI'm saying, do the test command,\nokay, without actually saying test.\n\n373\n00:19:29.760 --> 00:19:33.380\nSo when you see those if and then open\nbracket, you're basically saying, okay,\n\n374\n00:19:33.380 --> 00:19:37.570\nwe're testing a condition\ninside of these brackets, and\n\n375\n00:19:37.570 --> 00:19:40.290\nwe're just not using the word\ntest to do it, okay?\n\n376\n00:19:40.290 --> 00:19:41.170\nSo that's what's happening.\n\n377\n00:19:41.170 --> 00:19:44.360\nSo all I have to do is go in here and\njust remove this word test, and\n\n378\n00:19:44.360 --> 00:19:49.560\nthen give it an open bracket,\nand close that bracket out,\n\n379\n00:19:49.560 --> 00:19:53.460\nand now, we have the exact same thing.\n\n380\n00:19:53.460 --> 00:19:58.375\nThis is the identical, same script as\nfar as the shell is concerned, right?\n\n381\n00:19:58.375 --> 00:20:02.659\nSo if I save it, return,\ndo an exit, and I run it,\n\n382\n00:20:02.659 --> 00:20:08.376\nyou'll notice it works just fine,\nbecause it is the same script.\n\n383\n00:20:08.376 --> 00:20:09.697\nThere is no difference between there.\n\n384\n00:20:09.697 --> 00:20:11.746\nThe only difference is in syntax and\n\n385\n00:20:11.746 --> 00:20:14.887\nthe way we see it when we're\nlooking at the scrip,t and\n\n386\n00:20:14.887 --> 00:20:19.345\nwe're using our text editor to go, hm,\nwhat is going on in this script here?\n\n387\n00:20:19.345 --> 00:20:20.553\nI see that open bracket.\n\n388\n00:20:20.553 --> 00:20:21.722\nWe're running a test command.\n\n389\n00:20:21.722 --> 00:20:24.932\nThat's what those single open and\nclose brackets mean.\n\n390\n00:20:24.932 --> 00:20:28.411\n>> Now Daniel,\nwhat if I don't know exactly, let's say,\n\n391\n00:20:28.411 --> 00:20:32.038\nthe spelling of a particular file or\nlocation instead, and\n\n392\n00:20:32.038 --> 00:20:34.886\nI need to actually be able\nto do the same thing.\n\n393\n00:20:34.886 --> 00:20:37.701\nI still need to test if\nthat condition is true, but\n\n394\n00:20:37.701 --> 00:20:42.072\nnow I need to add in a little bit more\nsince I can't tell you exactly what it is.\n\n395\n00:20:42.072 --> 00:20:43.799\n>> Yeah, that's a really good questions.\n\n396\n00:20:43.799 --> 00:20:46.467\nWhat Ronnie's talking about\nhere is pattern matching and\n\n397\n00:20:46.467 --> 00:20:48.542\nthat gets into a regular expression, okay?\n\n398\n00:20:48.542 --> 00:20:52.750\nSo if you don't understand regular\nexpression, we have a show for\n\n399\n00:20:52.750 --> 00:20:53.660\nthat as well.\n\n400\n00:20:53.660 --> 00:20:57.460\nIt is a very in-depth topic, but\nwe're gonna try to make it easy for\n\n401\n00:20:57.460 --> 00:20:59.480\nyou, at least for these purposes.\n\n402\n00:20:59.480 --> 00:21:01.440\nWe're not gonna get too crazy with RegX.\n\n403\n00:21:01.440 --> 00:21:05.450\nBut what it means is,\nhow do I put regular expressions,\n\n404\n00:21:05.450 --> 00:21:08.370\nhow do I pattern match inside of my\nconditions, like what if Ronnie said,\n\n405\n00:21:08.370 --> 00:21:11.870\nwhat if I don't know whether it's\nsupposed to be this or this, or\n\n406\n00:21:11.870 --> 00:21:14.300\nI want it to be any of these characters?\n\n407\n00:21:14.300 --> 00:21:17.990\nHow do I use that regular expression\ninside of an if statement?\n\n408\n00:21:17.990 --> 00:21:19.573\nWell, it's real easy.\n\n409\n00:21:19.573 --> 00:21:24.307\nAll you have to do is add another bracket\nto our condition and we're good to go.\n\n410\n00:21:24.307 --> 00:21:28.087\nLet's see what I'm talking about here,\nlet's open up a nano,\n\n411\n00:21:28.087 --> 00:21:32.567\nlet's see here, I will call it, yes,\nthat's right, this is a fun one,\n\n412\n00:21:32.567 --> 00:21:34.546\nI had a good time making this one.\n\n413\n00:21:34.546 --> 00:21:38.936\nIt does serve our purposes well,\nI call it name snob.\n\n414\n00:21:38.936 --> 00:21:42.020\nSo we open it up, let's see what's\ngoing on in here with name snob.\n\n415\n00:21:42.020 --> 00:21:46.672\nSo, we're reading from the user's input,\nright, saying what's your name?\n\n416\n00:21:46.672 --> 00:21:49.645\nIt's asking a question to the user,\nwhat's your name, and\n\n417\n00:21:49.645 --> 00:21:51.406\nit's creating the variable name.\n\n418\n00:21:51.406 --> 00:21:54.838\nHere's our if statement,\nthe beginning of it, and\n\n419\n00:21:54.838 --> 00:21:57.887\nwe have the double opening brackets,\nright?\n\n420\n00:21:57.887 --> 00:22:02.532\nThat's letting it know that I want\nto use regular expression pattern\n\n421\n00:22:02.532 --> 00:22:05.343\nmatching inside of my condition, okay?\n\n422\n00:22:05.343 --> 00:22:10.274\nSo I put my variable in there which is\nbasically whatever the user typed in and\n\n423\n00:22:10.274 --> 00:22:14.125\nsaying, take a look at that and\nsee what the user typed in and\n\n424\n00:22:14.125 --> 00:22:16.456\nsee if it equals something, okay?\n\n425\n00:22:16.456 --> 00:22:20.507\nSo this double equal sign,\nwe saw this one it came to math, right?\n\n426\n00:22:20.507 --> 00:22:25.762\nThat was basically you saying it equals\nand then we have the equal in the bang.\n\n427\n00:22:25.762 --> 00:22:29.049\nThe exclamation point that was not\nequal or the other way around,\n\n428\n00:22:29.049 --> 00:22:30.077\nthat was not equal.\n\n429\n00:22:30.077 --> 00:22:32.142\nInside of this with regular expression,\n\n430\n00:22:32.142 --> 00:22:36.159\nwe're saying that on the other side of\nhere, expect to see regular expression.\n\n431\n00:22:36.159 --> 00:22:40.872\nThat's what that double equal side\nmeans when it comes to this specific\n\n432\n00:22:40.872 --> 00:22:42.630\ntype of syntax, okay?\n\n433\n00:22:42.630 --> 00:22:47.180\nSo if you see open bracket, open bracket,\nand a double equal sign in there,\n\n434\n00:22:47.180 --> 00:22:50.040\nthat means on the right\nside of this equal sign,\n\n435\n00:22:50.040 --> 00:22:52.580\nthere should be some sort of\nregular expression going on.\n\n436\n00:22:52.580 --> 00:22:55.760\nDo some pattern matching,\nthat's what I'm looking for.\n\n437\n00:22:55.760 --> 00:22:58.429\nRight, and in here,\nhere's my regular expression.\n\n438\n00:22:58.429 --> 00:23:00.238\nIt's open bracket again.\n\n439\n00:23:00.238 --> 00:23:01.566\nYou're like, is that okay?\n\n440\n00:23:01.566 --> 00:23:04.091\nYes it's okay,\nwe can use brackets inside of,\n\n441\n00:23:04.091 --> 00:23:06.505\nbecause of that double equals sign, right?\n\n442\n00:23:06.505 --> 00:23:09.199\nNow whatever's on the right\nof there it's saying,\n\n443\n00:23:09.199 --> 00:23:13.560\nwell that must be a regular expression,\nI can use regular expression terminology.\n\n444\n00:23:13.560 --> 00:23:17.440\nOnce I'm done,\nmove along down the line, right?\n\n445\n00:23:17.440 --> 00:23:21.504\nSo we have either a lower case d,\nor a capital D.\n\n446\n00:23:21.504 --> 00:23:24.222\nThat's what it's looking for\nwith this regular expression, and\n\n447\n00:23:24.222 --> 00:23:27.486\nthen any string of characters after that,\nthat's what the star means, okay?\n\n448\n00:23:27.486 --> 00:23:33.115\nThen we close that out, and you'll notice\nI've incorporated the lovely semicolon\n\n449\n00:23:33.115 --> 00:23:38.528\nthere, so just to make my lines a little\neasier to use, and then my then command.\n\n450\n00:23:38.528 --> 00:23:40.672\n[COUGH] Excuse me.\n\n451\n00:23:40.672 --> 00:23:45.517\nSo if we see the user input starts with\neither lowercase or an uppercase d,\n\n452\n00:23:45.517 --> 00:23:46.310\nthen echo.\n\n453\n00:23:46.310 --> 00:23:48.099\nThese two lines.\n\n454\n00:23:48.099 --> 00:23:50.096\nIt says, welcome name,\nI love names that start with D.\n\n455\n00:23:50.096 --> 00:23:56.820\nOtherwise, we have this else, we'll get\ninto else here in just a little bit.\n\n456\n00:23:56.820 --> 00:23:58.430\nEcho, you're not welcome here.\n\n457\n00:23:58.430 --> 00:23:59.510\nSo it's very bigoted.\n\n458\n00:23:59.510 --> 00:24:00.590\nYes, it's a fun one.\n\n459\n00:24:00.590 --> 00:24:04.360\nSo, if you don't tell it your name starts\nwith a D, either lowercase or uppercase,\n\n460\n00:24:04.360 --> 00:24:09.120\nit's gonna say you're not welcome here and\nit's gonna kick you out.\n\n461\n00:24:09.120 --> 00:24:11.610\nSo all we have to do now is run it and\nsee if it actually works.\n\n462\n00:24:11.610 --> 00:24:12.530\n>> All right so Daniel,\n\n463\n00:24:12.530 --> 00:24:15.950\nlet me see if I can follow the logic\nhere on this one that you actually have.\n\n464\n00:24:15.950 --> 00:24:18.880\nThat way, I think I understand\nwhat you're trying to do here.\n\n465\n00:24:18.880 --> 00:24:21.930\nWhat should happen when you run\nthe script, it should print out for\n\n466\n00:24:21.930 --> 00:24:24.970\nme on the screen, what is your name,\nand I should type in a name.\n\n467\n00:24:24.970 --> 00:24:28.780\nIf I type in Daniel,\nI wonder the D came from.\n\n468\n00:24:28.780 --> 00:24:32.280\nDaniel, in upper and\nlower case letter, what we should get\n\n469\n00:24:32.280 --> 00:24:36.990\nis those echo statements there that says\nwelcome, that you have, or I love names.\n\n470\n00:24:36.990 --> 00:24:38.060\nExcuse me.\nI love names,\n\n471\n00:24:38.060 --> 00:24:41.020\nI love names that start with D or\nelse your not welcome.\n\n472\n00:24:41.020 --> 00:24:41.930\n>> That's exactly right.\n\n473\n00:24:41.930 --> 00:24:44.650\n>> So the regular expression there\nsays either capital or lower case and\n\n474\n00:24:44.650 --> 00:24:48.100\nthen whatever else follows that asterisk\nis a wildcard saying anything it\n\n475\n00:24:48.100 --> 00:24:49.300\nfollows is great.\n\n476\n00:24:50.330 --> 00:24:51.420\nYou got it.\n\n477\n00:24:51.420 --> 00:24:52.960\n>> All right.\n\n478\n00:24:52.960 --> 00:24:57.190\n>> Ronnie has become a great student when\nit comes to using these if statements.\n\n479\n00:24:57.190 --> 00:24:58.620\nHe's following along so far.\n\n480\n00:24:58.620 --> 00:25:03.140\nHopefully you got the exact same idea\nrolling around upstairs in your brain.\n\n481\n00:25:03.140 --> 00:25:04.420\nSo, let's do this, let's close this out.\n\n482\n00:25:04.420 --> 00:25:06.990\nLet's actually run it and\nsee if it works, see how it works.\n\n483\n00:25:06.990 --> 00:25:12.420\nLet's, dot slash one name Name snob,\nthere we go.\n\n484\n00:25:12.420 --> 00:25:13.010\nAll right.\n\n485\n00:25:13.010 --> 00:25:14.180\nIt says what is your name?\n\n486\n00:25:14.180 --> 00:25:15.110\nI'll type in my name.\n\n487\n00:25:15.110 --> 00:25:16.310\nHit return.\n\n488\n00:25:16.310 --> 00:25:19.330\nIt says, welcome Daniel,\nI love names that start with D.\n\n489\n00:25:19.330 --> 00:25:19.890\nGreat.\n\n490\n00:25:19.890 --> 00:25:20.750\nSo far, so good.\n\n491\n00:25:20.750 --> 00:25:23.610\nWhat if I said my name was\nDaniel with lowercase?\n\n492\n00:25:23.610 --> 00:25:24.475\nHit return.\n\n493\n00:25:24.475 --> 00:25:30.060\nWelcome Daniel,\nI love names that start with D.\n\n494\n00:25:30.060 --> 00:25:31.640\nSo, so far so good.\n\n495\n00:25:31.640 --> 00:25:33.970\nThe regular expression is working.\n\n496\n00:25:33.970 --> 00:25:37.180\nNow let's see what happens\nif Ronnie tries to use it.\n\n497\n00:25:37.180 --> 00:25:40.315\nWhen you say my name is Ronnie,\nyou are not welcome here, Ronnie.\n\n498\n00:25:40.315 --> 00:25:41.340\n>> [LAUGH]\n>> Get out.\n\n499\n00:25:41.340 --> 00:25:43.990\nSo it didn't meet the expression\nthat we were looking for.\n\n500\n00:25:43.990 --> 00:25:45.710\nThat condition did not return true.\n\n501\n00:25:45.710 --> 00:25:48.320\nTherefore, it did not\ndo that block of code\n\n502\n00:25:48.320 --> 00:25:51.340\nthat goes underneath that\nconditional statement.\n\n503\n00:25:51.340 --> 00:25:57.430\nWhat it did was it jumped out and went\nto whatever next code it had available.\n\n504\n00:25:57.430 --> 00:25:59.960\nIt didn't do what's\ninside the if statement.\n\n505\n00:25:59.960 --> 00:26:02.260\nSo that's what we wanted,\nthat was a good example.\n\n506\n00:26:02.260 --> 00:26:05.460\nAnd again,\nthat meant any string of characters,\n\n507\n00:26:05.460 --> 00:26:06.820\nas long as it started\nwith D I could do it.\n\n508\n00:26:06.820 --> 00:26:10.856\nSo if I said my name was David, Look,\n\n509\n00:26:10.856 --> 00:26:15.290\nwelcome David, your name starts with D,\nI love names that start with D.\n\n510\n00:26:15.290 --> 00:26:19.670\nAgain anything, Doug, Dale you\nname it that will work because its\n\n511\n00:26:19.670 --> 00:26:22.190\nlooking an upper or lowercase D\ncharacter followed by some strings.\n\n512\n00:26:22.190 --> 00:26:26.930\nAnd anything that doesn't start that way\nit doesn't like and gives it the opposite.\n\n513\n00:26:26.930 --> 00:26:31.160\nSo you're starting to see how\nour scripts are getting smarter.\n\n514\n00:26:32.460 --> 00:26:34.710\nThey they have some ability,\nagain, to do logic.\n\n515\n00:26:34.710 --> 00:26:35.950\nTo think and\n\n516\n00:26:35.950 --> 00:26:40.630\nmake decisions based off of the conditions\nthat we're setting inside of them.\n\n517\n00:26:40.630 --> 00:26:42.710\nAnd hopefully you're\nstarting to see that power,\n\n518\n00:26:42.710 --> 00:26:46.170\nthat's the real power of being\nable to program or write scripts.\n\n519\n00:26:46.170 --> 00:26:46.830\n>> All right, Daniel.\n\n520\n00:26:46.830 --> 00:26:49.070\nSo being able to use those square\nbrackets really do help us,\n\n521\n00:26:49.070 --> 00:26:52.850\nespecially when trying to return some\nof those values like the string values,\n\n522\n00:26:52.850 --> 00:26:54.470\nalong with regular expressions.\n\n523\n00:26:54.470 --> 00:26:57.060\nSeems to work great, but\nif we actually want to do this,\n\n524\n00:26:57.060 --> 00:27:00.680\nlet's say with, well, numbers, in other\nwords values that we can calculate,\n\n525\n00:27:00.680 --> 00:27:03.170\nwe can't use those square brackets right?\n\n526\n00:27:03.170 --> 00:27:05.980\n>> No, the square brackets are not for\ndoing mathematical calculations.\n\n527\n00:27:05.980 --> 00:27:08.960\nWe did a whole show on math, so\nif you haven't seen that one yet,\n\n528\n00:27:08.960 --> 00:27:12.840\nyou should probably stop now go back and\nwatch the math one and come back here,\n\n529\n00:27:12.840 --> 00:27:14.420\na lot of this will make more sense.\n\n530\n00:27:14.420 --> 00:27:16.845\nBut if you're not,\nhopefully you'll be able to follow along,\n\n531\n00:27:16.845 --> 00:27:18.550\nI'm sure you guys are smart people.\n\n532\n00:27:18.550 --> 00:27:24.230\nSo let's just jump into it again and\nsee what's going on and\n\n533\n00:27:24.230 --> 00:27:26.940\nthen we'll explain what's happening.\n\n534\n00:27:26.940 --> 00:27:28.830\nSo, I did want to mention one thing.\n\n535\n00:27:28.830 --> 00:27:32.521\nIf you don't use those double brackets,\nyou can't get away with that.\n\n536\n00:27:32.521 --> 00:27:35.422\n>> [LAUGH]\n>> It'll break, give you weird output,\n\n537\n00:27:35.422 --> 00:27:36.265\nweird syntax.\n\n538\n00:27:36.265 --> 00:27:41.500\nSo if you're getting weird results, go in,\ncheck your script and see if there's,\n\n539\n00:27:41.500 --> 00:27:46.410\nmaybe there's, cuz it will run, it just\nwon't run correctly so be aware of that.\n\n540\n00:27:46.410 --> 00:27:48.990\nIf you forget your double brackets\nwhen it comes to a script,\n\n541\n00:27:48.990 --> 00:27:52.220\nthat's like,\nit will work it just won't work right.\n\n542\n00:27:52.220 --> 00:27:56.020\nAll right, so let's go back to that\nmath idea that Ronnie was talking about.\n\n543\n00:27:56.020 --> 00:27:59.840\nWhat if I need to do mathematical\nexpressions and equations inside of my if?\n\n544\n00:27:59.840 --> 00:28:05.500\nLet me clear my screen,\nwe're getting a little too congested here.\n\n545\n00:28:05.500 --> 00:28:07.080\nAnd let's see, let's see ls.\n\n546\n00:28:07.080 --> 00:28:10.360\nI know I've got a mathematical one here,\nhow about double parenthesis?\n\n547\n00:28:10.360 --> 00:28:13.260\nThat's the one I'm looking for.\n\n548\n00:28:13.260 --> 00:28:19.270\nSo we'll nano one double parenthesis and\nsee what's happening inside of here.\n\n549\n00:28:19.270 --> 00:28:20.962\nSo inside of this script\nI'm declaring a value.\n\n550\n00:28:20.962 --> 00:28:24.350\n[COUGH] Excuse me, or variable should\nI say, and that variable is 10.\n\n551\n00:28:24.350 --> 00:28:29.870\nThen I say if, and you'll start to\nsee something that looks a little\n\n552\n00:28:29.870 --> 00:28:34.470\nbit familiar, especially if you watched\nthat arithmetic show that we did before,\n\n553\n00:28:34.470 --> 00:28:37.710\nand it's the double open parentheses,\nclose parentheses.\n\n554\n00:28:37.710 --> 00:28:41.310\nThat's usually an indication that I\nwanna do a mathematical expression.\n\n555\n00:28:41.310 --> 00:28:43.030\nSo I look in here.\n\n556\n00:28:43.030 --> 00:28:48.160\nIt grabs VAL1, which equals 10, and\nthen you've got these double asterisks.\n\n557\n00:28:48.160 --> 00:28:51.350\nOkay, Daniel, you've totally lost me.\n\n558\n00:28:51.350 --> 00:28:53.330\nDouble asterisks,\nwe haven't talked about that.\n\n559\n00:28:53.330 --> 00:28:54.300\nYou're absolutely right.\n\n560\n00:28:54.300 --> 00:28:56.990\nThere's a lot of\nmathematical operators that\n\n561\n00:28:56.990 --> 00:28:59.930\nwould be its own show if\nwe tried to cover them all.\n\n562\n00:28:59.930 --> 00:29:03.140\nI'm just giving you an idea\nof how you can use this.\n\n563\n00:29:03.140 --> 00:29:04.930\nI don't want this to be the math show.\n\n564\n00:29:04.930 --> 00:29:07.580\nAll that's saying is that's exponential.\n\n565\n00:29:07.580 --> 00:29:11.280\nSo if I want the exponential of two, so\n\n566\n00:29:11.280 --> 00:29:14.770\nwhatever ten is,\ndo the exponential value with two,\n\n567\n00:29:14.770 --> 00:29:20.350\nthat's running a mathematical equation,\n10 to the two, whatever that is.\n\n568\n00:29:20.350 --> 00:29:25.420\nAnd then if that is greater than 90,\nthen do this.\n\n569\n00:29:25.420 --> 00:29:29.620\nSo we have a full fledged,\nactual math equation going on,\n\n570\n00:29:29.620 --> 00:29:33.460\nand I need those double\nparentheses to do that.\n\n571\n00:29:33.460 --> 00:29:35.580\nAll right.\nAnd that's how we do it inside of if.\n\n572\n00:29:35.580 --> 00:29:39.540\nYou'll remember that when we were doing it\nin variables, we had to do the dollar sign\n\n573\n00:29:39.540 --> 00:29:43.770\nin front of that to let it know it was\ngoing to be a mathematical equation.\n\n574\n00:29:43.770 --> 00:29:49.200\nHere we don't have to have the dollar sign\nbecause we're not declaring a variable.\n\n575\n00:29:49.200 --> 00:29:51.634\nWe're using an if statement and\n\n576\n00:29:51.634 --> 00:29:57.640\ndeclaring a arithmetic expression\ninside of these double parentheses.\n\n577\n00:29:57.640 --> 00:30:02.730\nThen it jumps down and\nwe do another mathematical equation\n\n578\n00:30:02.730 --> 00:30:07.520\nthat we declare a variable and\nthat variable equals whatever VAL ten is,\n\n579\n00:30:07.520 --> 00:30:11.170\nwhich is ten or VAL one which is ten and\ndo that to the second power.\n\n580\n00:30:11.170 --> 00:30:14.150\nThen if that works,\necho the square of VAL one is VAL two.\n\n581\n00:30:14.150 --> 00:30:18.780\nYou see, we're injecting that equation,\nusing the variable that we called at\n\n582\n00:30:18.780 --> 00:30:22.720\nthe beginning of the script, making\nthat whole thing, the value of VAL two.\n\n583\n00:30:22.720 --> 00:30:25.500\nAnd then we end our if with the fee.\n\n584\n00:30:25.500 --> 00:30:31.290\nSo if this all works, it should just give\nme the square value of VAL one is VAL two.\n\n585\n00:30:31.290 --> 00:30:36.810\nSo that should say, 10 is 100,\nor whatever it comes out to be.\n\n586\n00:30:36.810 --> 00:30:38.380\nI'm not really great at math.\n\n587\n00:30:38.380 --> 00:30:40.730\n[LAUGH] We've been over that subject.\n\n588\n00:30:40.730 --> 00:30:45.478\nSo let's do this,\nlet me get out of here, we'll run it.\n\n589\n00:30:45.478 --> 00:30:50.210\nWe'll say ./1 what did I call this,\ndouble_parenthesis.\n\n590\n00:30:50.210 --> 00:30:53.650\nNow, this is, the square of 10 is 100,\nso it did that math equation.\n\n591\n00:30:53.650 --> 00:30:57.200\nAll those complex math things,\nI had to have that double parentheses\n\n592\n00:30:57.200 --> 00:31:00.660\nto actually make that work,\nnot the double brackets.\n\n593\n00:31:00.660 --> 00:31:02.540\nThat's not the same thing.\n\n594\n00:31:02.540 --> 00:31:05.070\nThat's for doing conditionals.\n\n595\n00:31:05.070 --> 00:31:07.710\nHere it's for doing math equations or\nmath expressions.\n\n596\n00:31:07.710 --> 00:31:08.590\n>> Excellent, Daniel.\n\n597\n00:31:08.590 --> 00:31:10.130\nA lot of great information there and\n\n598\n00:31:10.130 --> 00:31:13.710\nthe beginning of taking a look at how\ncomplex conditional statements can become.\n\n599\n00:31:13.710 --> 00:31:16.660\nRemember that you will see different\noperators as we move through.\n\n600\n00:31:16.660 --> 00:31:20.980\nWhen working with strings,\nwe're working with the square brackets.\n\n601\n00:31:20.980 --> 00:31:25.090\nWhen working with numeric values\nthat we need to do some type of math\n\n602\n00:31:25.090 --> 00:31:27.560\nwith we're gonna be using\nthe parentheses as well.\n\n603\n00:31:27.560 --> 00:31:29.200\nWe also saw in this episode, of course,\n\n604\n00:31:29.200 --> 00:31:32.950\nthe beginning of where that logic comes\nin in the operating system itself.\n\n605\n00:31:32.950 --> 00:31:35.986\n[INAUDIBLE] Here's a value that\nactually exists that's true and\n\n606\n00:31:35.986 --> 00:31:39.640\nit's going to return a code and then\nthat code actually means that everything\n\n607\n00:31:39.640 --> 00:31:41.115\nis good the way that we want to.\n\n608\n00:31:41.115 --> 00:31:44.235\nWe can test that as well by using\nthe true statements as well as,\n\n609\n00:31:44.235 --> 00:31:47.465\nwhat was it the other one, the square\nbracket, the single square bracket.\n\n610\n00:31:47.465 --> 00:31:48.525\nI was trying to remember.\n\n611\n00:31:48.525 --> 00:31:50.765\nI was trying not to look down at\nmy notes here to think about it.\n\n612\n00:31:50.765 --> 00:31:51.785\nSo yeah we saw all of that.\n\n613\n00:31:51.785 --> 00:31:54.615\nAll of that is going to be important.\n\n614\n00:31:54.615 --> 00:31:59.125\nWe want to make sure that we can actually\nhave the test run, verify that everything\n\n615\n00:31:59.125 --> 00:32:04.280\nis good, and we're starting to see again\nhow we're starting to build upon it.\n\n616\n00:32:04.280 --> 00:32:06.380\nThis last one was actually\npretty challenging.\n\n617\n00:32:06.380 --> 00:32:08.320\nI'm glad you didn't ask me to try and\nverify the logic.\n\n618\n00:32:08.320 --> 00:32:10.020\n>> [LAUGH]\n>> I was trying to follow along and\n\n619\n00:32:10.020 --> 00:32:11.200\nI got a little bit lost there.\n\n620\n00:32:11.200 --> 00:32:15.090\nBut overall though, the reason why we\nwant to use scripting is we can take all\n\n621\n00:32:15.090 --> 00:32:17.390\nthat stuff and\njust pump numbers into it and\n\n622\n00:32:17.390 --> 00:32:20.840\nthe machine itself can actually\ngive us the values that we need.\n\n623\n00:32:20.840 --> 00:32:23.690\nAnd that's really some of\nthe power of the scripting,\n\n624\n00:32:23.690 --> 00:32:26.900\nbeing able to test those conditions\nis really going to be helpful.\n\n625\n00:32:26.900 --> 00:32:28.854\nDaniel, any last words before\nwe close out this episode?\n\n626\n00:32:28.854 --> 00:32:31.130\n>> No if you've been following along so\nfar, you might like,\n\n627\n00:32:31.130 --> 00:32:33.930\nokay I'm drinking from a fire hose,\nthis is a lot of info.\n\n628\n00:32:33.930 --> 00:32:34.930\nYou are absolutely right.\n\n629\n00:32:34.930 --> 00:32:36.720\nTrust me, I know your pain.\n\n630\n00:32:36.720 --> 00:32:38.120\nI had to learn this myself.\n\n631\n00:32:38.120 --> 00:32:40.750\nAnd it does take a little bit of\nthought and time, and working with it,\n\n632\n00:32:40.750 --> 00:32:42.990\nand running scripts and debugging scripts.\n\n633\n00:32:42.990 --> 00:32:43.640\nBut hopefully now,\n\n634\n00:32:43.640 --> 00:32:47.880\nyou have enough that you could start\ncreating some scripts of your own.\n\n635\n00:32:47.880 --> 00:32:50.630\nNow that we've jumped in\nthese conditional statements,\n\n636\n00:32:50.630 --> 00:32:52.860\nstart creating if then statements.\n\n637\n00:32:52.860 --> 00:32:54.360\nStart working with that.\n\n638\n00:32:54.360 --> 00:32:56.600\nUse all the stuff that you've learned so\nfar.\n\n639\n00:32:56.600 --> 00:33:00.090\nSee where it's breaking, where you're\nnot understanding it, then go back and\n\n640\n00:33:00.090 --> 00:33:03.760\nwatch this episode over and over again\nuntil it start to completely make sense.\n\n641\n00:33:03.760 --> 00:33:04.980\nOther than that we're not quite done.\n\n642\n00:33:04.980 --> 00:33:08.960\nThere's more to if than what I've already\nshown you, actually quite a bit more, so\n\n643\n00:33:08.960 --> 00:33:11.290\nwe've gotta cover that, and\nwe haven't even touched case.\n\n644\n00:33:11.290 --> 00:33:12.790\nSo guess what that means Ronnie?\n\n645\n00:33:12.790 --> 00:33:16.280\n>> I'm assuming that means we\nhave a part two coming up for\n\n646\n00:33:16.280 --> 00:33:18.860\nwhat we're actually talking about here.\n\n647\n00:33:18.860 --> 00:33:22.210\nAnd speaking of that, that's a great\nplace for us to go ahead and\n\n648\n00:33:22.210 --> 00:33:23.470\nalso end this episode.\n\n649\n00:33:23.470 --> 00:33:25.130\nThank you again for helping us out.\n\n650\n00:33:25.130 --> 00:33:26.620\nSigning off for ITproTV, I'm Ronnie Wong.\n\n651\n00:33:26.620 --> 00:33:27.700\n>> And I'm Daniel Lowry.\n\n652\n00:33:27.700 --> 00:33:28.490\n>> And we'll see you next time.\n\n653\n00:33:28.490 --> 00:33:34.540\n[MUSIC]\n\n",
          "vimeoId": "146012357"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin to use conditional if-then statements in scripting.  They use this single condition with operators and variables showing us how to use logic to get the output we’re expecting to see.  This same logic can be applied not only to string values but also to arithmetic to derive a value based on a conditional statement.",
          "length": "1615",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements_pt2-111315-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements_pt2-111315-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-13-1-conditional_statements_pt2-111315-1-sm.jpg",
          "title": "Conditional Statements Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.357 --> 00:00:15.052\nWelcome to another exciting\nepisode right here on ITpro TV.\n\n3\n00:00:15.052 --> 00:00:16.406\nI'm your host Ronnie Wong.\n\n4\n00:00:16.406 --> 00:00:21.229\nAnd today we're talking bash inscripting,\nspecifically talking about conditional\n\n5\n00:00:21.229 --> 00:00:25.249\nstatements, and actually this a part two,\nwhich means we've already\n\n6\n00:00:25.249 --> 00:00:30.070\ngone through a lot of the actual basics\nhere, and now we're continuing on.\n\n7\n00:00:30.070 --> 00:00:34.260\nAnd Daniel, Daniel, I forgot, Daniel\nLowrie, that's who we're talking about,\n\n8\n00:00:34.260 --> 00:00:34.920\nDaniel Lowrie.\n\n9\n00:00:34.920 --> 00:00:38.010\nYou are going to help us to see\nthat conditional statements\n\n10\n00:00:38.010 --> 00:00:39.578\nare just the beginning.\n\n11\n00:00:39.578 --> 00:00:43.380\nBut what we're taking a look at now\nis that conditional statements can\n\n12\n00:00:43.380 --> 00:00:44.310\nbe even smarter than we think..\n\n13\n00:00:44.310 --> 00:00:45.700\n>> Yeah, that's exactly right.\n\n14\n00:00:45.700 --> 00:00:49.990\nThe power is not just in doing one\ncondition and then doing something for me.\n\n15\n00:00:49.990 --> 00:00:51.770\nWhat if I wanted to do\nmultiple somethings?\n\n16\n00:00:51.770 --> 00:00:54.300\nWhat if I wanted to look\nat more than one condition,\n\n17\n00:00:54.300 --> 00:00:58.260\nhow do we get into that without just\ncreating a bunch of crazy conditions?\n\n18\n00:00:58.260 --> 00:01:01.110\nWell, we can work with\nthese if statements and\n\n19\n00:01:01.110 --> 00:01:03.840\nthese conditional statements inside\nof themselves, and start doing some\n\n20\n00:01:03.840 --> 00:01:06.750\nvery cool things with them to get\nthe output that we're looking for.\n\n21\n00:01:06.750 --> 00:01:10.690\nCuz that's what it's all about,\ngetting the output generated from,\n\n22\n00:01:10.690 --> 00:01:14.100\nor doing something\nautomated through a script.\n\n23\n00:01:14.100 --> 00:01:16.670\nAnd these conditional statements,\nwhat their power\n\n24\n00:01:16.670 --> 00:01:20.610\nreally lies in not just being able to do\none thing, but multiple different things.\n\n25\n00:01:20.610 --> 00:01:21.940\nSo let's see how that works.\n\n26\n00:01:21.940 --> 00:01:23.250\nWe'll pick up right where we left off.\n\n27\n00:01:23.250 --> 00:01:25.122\nWe'll jump right back\nto my screen here and\n\n28\n00:01:25.122 --> 00:01:28.660\ncheck out some of the scripts that I have\navailable for us to see what's going on.\n\n29\n00:01:28.660 --> 00:01:31.864\nSo we do an ls,\nI've got some other scripts.\n\n30\n00:01:31.864 --> 00:01:34.580\nBefore we work with some simple scripts,\nlet's try this one.\n\n31\n00:01:34.580 --> 00:01:40.246\nLet me nano up one if underscore else.\n\n32\n00:01:40.246 --> 00:01:42.150\nThere we go.\n\n33\n00:01:42.150 --> 00:01:43.450\nNow, what's going on here?\n\n34\n00:01:43.450 --> 00:01:47.470\nWell, we've seen how if statements work,\nwe've looked at the basic Syntax with\n\n35\n00:01:47.470 --> 00:01:50.044\nthe very simple if scripts\nin the previous episode.\n\n36\n00:01:50.044 --> 00:01:53.202\nIn this episode we're gonna start\nexpanding on what if can do.\n\n37\n00:01:53.202 --> 00:01:54.549\nSo let's take a look at this one.\n\n38\n00:01:54.549 --> 00:01:57.196\nWe have read -p.\n\n39\n00:01:57.196 --> 00:02:00.581\nWell, we know the read commands,\nit's also looking for\n\n40\n00:02:00.581 --> 00:02:05.322\nsome input from the user right here,\nit's gonna create a variable called num.\n\n41\n00:02:05.322 --> 00:02:09.757\nAnd if num equals 1, then do something.\n\n42\n00:02:09.757 --> 00:02:13.903\nSo far, everything's looking very,\nvery straightforward,\n\n43\n00:02:13.903 --> 00:02:16.676\nwe should be comfortable up to this point.\n\n44\n00:02:16.676 --> 00:02:20.275\nBut, now we've introduced\nthis part of the statement.\n\n45\n00:02:20.275 --> 00:02:23.247\nRight, this part of our if, it's else.\n\n46\n00:02:23.247 --> 00:02:24.037\nSo what does that mean?\n\n47\n00:02:24.037 --> 00:02:25.964\nWhat is else trying to tell us?\n\n48\n00:02:25.964 --> 00:02:27.729\nIt's really that logical function, right?\n\n49\n00:02:27.729 --> 00:02:31.873\nIf you think about it,\nlike Ronnie mentioned in the last episode,\n\n50\n00:02:31.873 --> 00:02:36.250\nyour parents will say, if you don't\ndo this, then this will happen.\n\n51\n00:02:36.250 --> 00:02:37.852\nAnd or else, right.\n\n52\n00:02:37.852 --> 00:02:39.524\nOr else, or else what?\n\n53\n00:02:39.524 --> 00:02:42.682\nWell, that's basically what's going\non here, it's that or else what.\n\n54\n00:02:42.682 --> 00:02:47.664\nSo we're gonna give it one condition, and\nif it doesn't meet that condition, then\n\n55\n00:02:47.664 --> 00:02:52.152\ndo this, so we have to give it an area in\nwhich we can say if the first condition\n\n56\n00:02:52.152 --> 00:02:57.379\nisn't met, do something else, all right,\nso that's where the L statement comes in.\n\n57\n00:02:57.379 --> 00:03:00.258\nSo, over here what is\nthis script trying to do.\n\n58\n00:03:00.258 --> 00:03:02.975\nIt says choose a number other than 1.\n\n59\n00:03:02.975 --> 00:03:07.035\nI want the user to input some number,\nI just don't want it to be 1 for\n\n60\n00:03:07.035 --> 00:03:08.687\nwhatever reason, right?\n\n61\n00:03:08.687 --> 00:03:12.558\nAnd then it creates that variable,\nputs 1 in its and then says Or\n\n62\n00:03:12.558 --> 00:03:17.441\nit says, if that variable does equal one,\nthat's what's going on right here.\n\n63\n00:03:17.441 --> 00:03:20.955\nThen echo, you chose one you're\na bad user, don't do that,\n\n64\n00:03:20.955 --> 00:03:23.470\nI told you not to do that,\nyou did it anyway.\n\n65\n00:03:23.470 --> 00:03:25.810\nBut if they choose\nanything other than one,\n\n66\n00:03:25.810 --> 00:03:29.995\nI don't want to have to write an is\nstatement for if they choose to,\n\n67\n00:03:29.995 --> 00:03:33.835\nthen do you've chose number one if they\nchoose three then they chose this.\n\n68\n00:03:33.835 --> 00:03:38.435\nSee that would be a lot of work, I can\ndo the exact same thing with else and\n\n69\n00:03:38.435 --> 00:03:41.950\nall I need is two lines of code else and\nthen echo, you chose number two.\n\n70\n00:03:41.950 --> 00:03:46.490\nSo now are the whatever\nother than one is and\n\n71\n00:03:46.490 --> 00:03:49.610\nthat's why we call that\nvariable right here.\n\n72\n00:03:49.610 --> 00:03:53.210\nSo, whatever that is as long as it\ndoesn't equal one, it will echo,\n\n73\n00:03:53.210 --> 00:03:54.900\nyou chose number and\nthen echo that number.\n\n74\n00:03:54.900 --> 00:03:57.100\nSo that's what we want to do so\n\n75\n00:03:57.100 --> 00:04:00.730\nwe're giving it that condition\nof if you meet this condition,\n\n76\n00:04:00.730 --> 00:04:06.320\nOf the fact that I told you not to do\nthis, that condition is one, then do this.\n\n77\n00:04:06.320 --> 00:04:07.740\nElse, do this.\n\n78\n00:04:07.740 --> 00:04:11.320\nSo every other condition that doesn't\nequal this, that's what it's gonna do.\n\n79\n00:04:11.320 --> 00:04:12.770\nHopefully, that made sense to you.\n\n80\n00:04:12.770 --> 00:04:15.450\n>> Now what we're actually\nstarting to see here, right,\n\n81\n00:04:15.450 --> 00:04:17.660\nwith just plain if then statements\n>> When we told it, hey.\n\n82\n00:04:17.660 --> 00:04:20.645\nIf you do this, make sure it\nactually shows what we want it to.\n\n83\n00:04:20.645 --> 00:04:22.549\nBut we didn't do anything\nelse with the rest of it.\n\n84\n00:04:22.549 --> 00:04:24.043\nIn other words, we chose any other value.\n\n85\n00:04:24.043 --> 00:04:27.494\nSo any other value that we would have put\nin there, it would just return us, well,\n\n86\n00:04:27.494 --> 00:04:28.741\nnothing is what we'd have.\n\n87\n00:04:28.741 --> 00:04:32.159\nWhat we're trying to do here, then,\nwith the if/then/else, of course,\n\n88\n00:04:32.159 --> 00:04:34.140\nis meet every condition that we have.\n\n89\n00:04:34.140 --> 00:04:37.898\nAnd I think Daniel calls it the ability\nfor that script to make a decision and\n\n90\n00:04:37.898 --> 00:04:40.225\nsaying look,\nwe're either gonna have this or\n\n91\n00:04:40.225 --> 00:04:44.061\nwe're gonna also have this if it's not\nthe answer that we're looking for.\n\n92\n00:04:44.061 --> 00:04:48.741\nSo that's where we're starting to see,\nadding in this idea of else is really\n\n93\n00:04:48.741 --> 00:04:53.350\ngoing to be helpful because it is actually\ngoing to make it more intuitive for\n\n94\n00:04:53.350 --> 00:04:57.454\na user to realize like what Daniel\nsaid here that they are a bad user or\n\n95\n00:04:57.454 --> 00:05:01.753\nthey're not exactly getting\nthe answer that they are looking for.\n\n96\n00:05:01.753 --> 00:05:04.975\nInstead of just leaving them and\nwondering, like, did I type\n\n97\n00:05:04.975 --> 00:05:07.935\nsomething in wrong or is this script\nnot running or whatever it might be.\n\n98\n00:05:07.935 --> 00:05:12.060\nBefore we just didn't have that, now we\nactually have that way to report that out.\n\n99\n00:05:12.060 --> 00:05:12.985\n>> That's exactly right.\n\n100\n00:05:12.985 --> 00:05:15.835\nWe want the scripts to be\nable to make decisions and\n\n101\n00:05:15.835 --> 00:05:19.005\nbased on how complex we want to them to\nbe, we got to know how to make that work.\n\n102\n00:05:19.005 --> 00:05:21.110\nThis is a very simple\ndecision making script.\n\n103\n00:05:21.110 --> 00:05:22.440\nAnd that's why I made it, so\n\n104\n00:05:22.440 --> 00:05:25.990\nthat you can see how the logical\norder of things are working out.\n\n105\n00:05:25.990 --> 00:05:30.060\nBut it's always better to show than tell,\nso let's run the script and\n\n106\n00:05:30.060 --> 00:05:32.910\nsee what kind of output gets generated,\nall right?\n\n107\n00:05:32.910 --> 00:05:35.770\nSo now that we've got the screen up,\nI will get out of here.\n\n108\n00:05:35.770 --> 00:05:38.100\nI don't need to save it,\nit's already saved.\n\n109\n00:05:38.100 --> 00:05:40.455\nAnd I'll just run it.\n\n110\n00:05:40.455 --> 00:05:41.440\n1if_else.sh.\n\n111\n00:05:41.440 --> 00:05:43.330\nThis says choose a number other than one.\n\n112\n00:05:43.330 --> 00:05:45.380\nOkay, so Ronnie what's a good number?\n\n113\n00:05:45.380 --> 00:05:46.420\n>> Lets say ten.\n\n114\n00:05:46.420 --> 00:05:47.560\n>> Alright, ten.\n\n115\n00:05:47.560 --> 00:05:48.720\nSay ten.\nHit return.\n\n116\n00:05:48.720 --> 00:05:51.260\nIt says you chose number ten.\n\n117\n00:05:51.260 --> 00:05:52.100\nSo far so good.\n\n118\n00:05:53.305 --> 00:05:55.290\nLet's not listen to it.\n\n119\n00:05:56.840 --> 00:05:57.840\nYou know what?\n\n120\n00:05:57.840 --> 00:06:01.270\nWe'll give it another number,\nmaybe it was a fluke that it worked right?\n\n121\n00:06:01.270 --> 00:06:01.924\nI'll choose 23.\n\n122\n00:06:03.320 --> 00:06:04.190\nOkay.\nYou chose 23.\n\n123\n00:06:04.190 --> 00:06:05.470\nGood.\nEverything, so far, so good.\n\n124\n00:06:05.470 --> 00:06:08.140\nThat means that that\ncondition is being met and\n\n125\n00:06:08.140 --> 00:06:12.260\nthat it's under that else part,\nand that's giving us that output.\n\n126\n00:06:12.260 --> 00:06:14.860\nSo now let's be that bad user.\n\n127\n00:06:14.860 --> 00:06:16.845\nLet's do what it's told us not to do.\n\n128\n00:06:16.845 --> 00:06:19.145\nGood thing is we've made a condition for\nthat and\n\n129\n00:06:19.145 --> 00:06:22.935\nit's going to give us different results\nthan what we've been seeing so far.\n\n130\n00:06:22.935 --> 00:06:25.325\nIt's going to make a decision\n\n131\n00:06:25.325 --> 00:06:28.555\non what results it should make\nbased off of those conditions.\n\n132\n00:06:28.555 --> 00:06:31.565\nSo we'll run our script and\nthis time we'll say one.\n\n133\n00:06:31.565 --> 00:06:33.105\nYou chose number one, bad user.\n\n134\n00:06:33.105 --> 00:06:36.590\nRight, so\nnow that you see what the logic does and\n\n135\n00:06:36.590 --> 00:06:39.940\nhow it works itself out\nwhen we run the script.\n\n136\n00:06:39.940 --> 00:06:42.310\nIf it was 1, echo this.\n\n137\n00:06:42.310 --> 00:06:44.760\nIf it was anything other than 1,\necho that.\n\n138\n00:06:44.760 --> 00:06:45.830\nAnd that's exactly what we saw.\n\n139\n00:06:45.830 --> 00:06:48.580\nWe echoed, we used 10, we used 23,\neverything worked fine.\n\n140\n00:06:48.580 --> 00:06:54.340\nWhen we used one it changed the condition\nmoving it into a different block of code.\n\n141\n00:06:54.340 --> 00:06:57.660\n>> Well Daniel, I can see how this is\nuseful if I have a single condition,\n\n142\n00:06:57.660 --> 00:06:59.430\nwhen I'm saying, hey either give me this.\n\n143\n00:06:59.430 --> 00:07:03.510\nAnd it should report this out or, if it's\nnot, it's gonna report something else out.\n\n144\n00:07:03.510 --> 00:07:05.420\nBut what if I have multiple if-statements?\n\n145\n00:07:05.420 --> 00:07:07.520\nIn other words,\nmultiple conditions instead, and\n\n146\n00:07:07.520 --> 00:07:11.230\nI wanted to actually just be able to\ndistinguish those and help us out?\n\n147\n00:07:11.230 --> 00:07:15.110\n>> Yeah, that's a great question, and it's\nprobably an issue you're gonna run into\n\n148\n00:07:15.110 --> 00:07:16.370\n>> As you start creating scripts.\n\n149\n00:07:16.370 --> 00:07:17.520\nSo what do we do?\n\n150\n00:07:17.520 --> 00:07:20.060\nWhat are some of the ways in\nwhich this will work itself out?\n\n151\n00:07:20.060 --> 00:07:24.110\nOne way it'll work itself out\nis what's called a nested if.\n\n152\n00:07:24.110 --> 00:07:27.980\nSo I've got an if statement and\nthen I need it to make another decision\n\n153\n00:07:27.980 --> 00:07:31.070\nbased off a decision\nthat's already been made.\n\n154\n00:07:31.070 --> 00:07:32.410\nNow you're thinking wow,\nthat's really complex.\n\n155\n00:07:32.410 --> 00:07:33.780\nYeah, it is really complex but\n\n156\n00:07:33.780 --> 00:07:36.930\nthis is how we do things like\ncontinue to make menu options.\n\n157\n00:07:36.930 --> 00:07:42.410\nSo if I wanted to write a script that\nhad menu options in it, and the further\n\n158\n00:07:42.410 --> 00:07:46.390\nI get into the menu system, how does it\nknow to stay here and not move back out.\n\n159\n00:07:46.390 --> 00:07:49.390\nHow does it know to do this\ncondition instead of that condition.\n\n160\n00:07:49.390 --> 00:07:52.660\nWe're gonna nest a bunch of if's in there,\nif I make this decision,\n\n161\n00:07:52.660 --> 00:07:54.140\nthen do this, else do that,\nend of statement.\n\n162\n00:07:54.140 --> 00:07:59.381\nAnd then now we're back out of that if\nstatement into our original if statement.\n\n163\n00:07:59.381 --> 00:08:02.645\nWhat's going on in there,\nas long as those conditions are met,\n\n164\n00:08:02.645 --> 00:08:05.014\nwe're gonna move in and\nout of if statements.\n\n165\n00:08:05.014 --> 00:08:11.650\nSo that's Nested if's, putting more if's\ninto an already existing if statement.\n\n166\n00:08:11.650 --> 00:08:14.480\nAgain it's better always to show then\ntell, so let's jump back into some\n\n167\n00:08:14.480 --> 00:08:17.890\nscripting here, take a look at one of the\nscripts already have built for us here.\n\n168\n00:08:17.890 --> 00:08:22.250\nLet me clear out and let's see here.\n\n169\n00:08:22.250 --> 00:08:24.390\nFor this one, we're gonna use nano,\nI believe it's two.\n\n170\n00:08:24.390 --> 00:08:26.410\nWe're gonna use another name style.\n\n171\n00:08:26.410 --> 00:08:33.960\nRemember our fun little name style\nscript that we wrote in the first one?\n\n172\n00:08:33.960 --> 00:08:38.250\nI made some variation to that so\nwe can play around with this.\n\n173\n00:08:38.250 --> 00:08:40.300\nSo, name snob to nested if.\n\n174\n00:08:42.000 --> 00:08:45.670\nSo, what's going on here again,\nnothing too complex.\n\n175\n00:08:45.670 --> 00:08:49.650\nReading from the inputs and\nwe have our if statement and\n\n176\n00:08:49.650 --> 00:08:52.860\nhere's our double bracket expansion,\nremember that.\n\n177\n00:08:52.860 --> 00:08:56.560\nSo, we've got a condition that needs to\nbe met and I need to be able to do some\n\n178\n00:08:56.560 --> 00:09:00.880\nsort of pattern matching,\nuse that regular expression.\n\n179\n00:09:00.880 --> 00:09:04.910\nSo, I've got my double equals sign,\nletting it know\n\n180\n00:09:04.910 --> 00:09:09.970\nthat there's gonna be a regular expression\nto the right of that, which is right here.\n\n181\n00:09:09.970 --> 00:09:12.290\nAnd it's saying, if this, then do this.\n\n182\n00:09:12.290 --> 00:09:14.760\nOkay?\nSo, now we're seeing another if.\n\n183\n00:09:14.760 --> 00:09:21.180\nBasically this whole portion right here,\nis the exact same block of code.\n\n184\n00:09:21.180 --> 00:09:21.990\nI reused that code.\n\n185\n00:09:21.990 --> 00:09:26.870\nAnd I said you know what I want it\nto be able to make more decisions,\n\n186\n00:09:26.870 --> 00:09:27.820\nmore informed decisions.\n\n187\n00:09:27.820 --> 00:09:31.060\nSo, I need to give it\nmore ability to do that.\n\n188\n00:09:31.060 --> 00:09:34.730\nWe make decisions based off of ifs,\nat least one way.\n\n189\n00:09:34.730 --> 00:09:36.060\nSo, I had to put that in here.\n\n190\n00:09:36.060 --> 00:09:37.140\nSo, what did I do?\n\n191\n00:09:37.140 --> 00:09:41.620\nI kind of took the same idea and I said,\nwell I want it to start with D and I don't\n\n192\n00:09:41.620 --> 00:09:45.030\ncare whether it's a lowercase or and\nuppercase, so that's where we get this.\n\n193\n00:09:45.030 --> 00:09:47.800\nAnd then, any string after that.\n\n194\n00:09:47.800 --> 00:09:52.160\nSo, any string of characters after\nthat is fine, it will work in this.\n\n195\n00:09:52.160 --> 00:09:55.680\nAs long as it starts with an upper or\nlower case d, do this.\n\n196\n00:09:55.680 --> 00:09:58.870\nWell, what do I want it to do?\n\n197\n00:09:58.870 --> 00:09:59.850\nI want it to if again.\n\n198\n00:09:59.850 --> 00:10:02.420\nSo, I've nested an if inside of here.\n\n199\n00:10:02.420 --> 00:10:07.500\nIf this value is this, so now,\nI'm putting more constraints\n\n200\n00:10:07.500 --> 00:10:11.170\non what that condition can be,\nI've started off as being a D and\n\n201\n00:10:11.170 --> 00:10:15.830\nyou'll see why I didn't just put this line\nand nothing else here in just a second.\n\n202\n00:10:15.830 --> 00:10:20.710\nI had to put a nested if because I wanted\nto be able to separate out whether or\n\n203\n00:10:20.710 --> 00:10:25.960\nnot it was me or\nsomebody else who's name started with D.\n\n204\n00:10:25.960 --> 00:10:29.570\nThat is the power of doing the nested ifs.\n\n205\n00:10:29.570 --> 00:10:34.320\nSo, I said okay, if the name starts\nwith a lower or upper case D and\n\n206\n00:10:34.320 --> 00:10:39.230\nthen the next part of the string is aniel,\nthen echo, All hail the maker, right.\n\n207\n00:10:39.230 --> 00:10:41.360\nThat's me.\nI created this script so\n\n208\n00:10:41.360 --> 00:10:44.130\nit gets to give me a little praise there.\n\n209\n00:10:44.130 --> 00:10:46.240\nElse what are we gonna do?\n\n210\n00:10:46.240 --> 00:10:51.920\nWelcome name and so basically the rest\nof our script that we saw before.\n\n211\n00:10:51.920 --> 00:10:56.640\nSo, now I should be able to type in my\nname and get unique output cuz I gave it\n\n212\n00:10:56.640 --> 00:11:02.550\nmore parameters in which to check and\nrun a decisional algorithm against.\n\n213\n00:11:02.550 --> 00:11:05.180\nSo, that being said, again,\nbetter to show than tell.\n\n214\n00:11:05.180 --> 00:11:08.460\nLet's get out of here and\nrun that guy, and see what happens.\n\n215\n00:11:08.460 --> 00:11:10.820\nSo And it says what is your name?\n\n216\n00:11:10.820 --> 00:11:12.240\nI will say, my name is Daniel.\n\n217\n00:11:12.240 --> 00:11:15.350\nAnd it says all hail the maker.\n\n218\n00:11:15.350 --> 00:11:17.660\nGreat, everything's working so far.\n\n219\n00:11:17.660 --> 00:11:19.980\nWhat if I was case insensitive, right?\n\n220\n00:11:19.980 --> 00:11:21.350\nWe'll run the thing again.\n\n221\n00:11:21.350 --> 00:11:22.130\nI'll say my name is Daniel.\n\n222\n00:11:22.130 --> 00:11:26.260\nEL, type my own name.\n\n223\n00:11:26.260 --> 00:11:27.740\nAgain, all hail the maker, right?\n\n224\n00:11:27.740 --> 00:11:32.430\nCuz that's what we get when it looks at\nthat condition it found it to be true.\n\n225\n00:11:32.430 --> 00:11:36.280\nTherefore, it returned or\nit went through a block of code and\n\n226\n00:11:36.280 --> 00:11:38.420\nexited those things out.\n\n227\n00:11:38.420 --> 00:11:41.900\nSo, what happens if I give it\nanother name that starts with d.\n\n228\n00:11:41.900 --> 00:11:42.890\nWhat happens?\nSo, let's run it again.\n\n229\n00:11:42.890 --> 00:11:45.390\nAnd I'll say my name's David.\n\n230\n00:11:45.390 --> 00:11:46.130\nWelcome David.\n\n231\n00:11:46.130 --> 00:11:47.390\nI love names that start with D.\n\n232\n00:11:47.390 --> 00:11:51.560\nSo, now we're seeing the sync output\nwe saw before because it's not\n\n233\n00:11:51.560 --> 00:11:56.410\nmeeting that condition of being upper or\nlowercase d A Daniel name, right?\n\n234\n00:11:56.410 --> 00:12:01.240\nSo it still saw a D and that's why\nI left that first block in there,\n\n235\n00:12:01.240 --> 00:12:04.330\nlooking for a D with any string\nof characters after that,\n\n236\n00:12:04.330 --> 00:12:07.720\nbecause I wanted anybody with\ntheir name starting with D\n\n237\n00:12:10.300 --> 00:12:13.030\neither upper or lower to always\ncome back as I love names with D.\n\n238\n00:12:13.030 --> 00:12:19.130\nAgain, if Ronnie tries to run this and\nuse his name, he's gonna get welcome here.\n\n239\n00:12:19.130 --> 00:12:21.420\nIt's a name snob program.\n\n240\n00:12:21.420 --> 00:12:22.770\nIt only likes d names.\n\n241\n00:12:22.770 --> 00:12:24.600\nDoesn't matter if it's whatever.\n\n242\n00:12:24.600 --> 00:12:28.140\nMaybe he puts in Ronnie Wong.\n\n243\n00:12:28.140 --> 00:12:30.040\nYou're not welcome here!\n\n244\n00:12:30.040 --> 00:12:32.590\nOkay.\nSo, that is nested ifs making more\n\n245\n00:12:32.590 --> 00:12:34.450\ndecisions based off decisions\nyou've already made.\n\n246\n00:12:34.450 --> 00:12:36.400\nAll right Daniel, that's pretty complex.\n\n247\n00:12:36.400 --> 00:12:39.080\nBut can we take a look at that\nscript just for a moment so\n\n248\n00:12:39.080 --> 00:12:41.390\nwe can emphasize some\nof those points again?\n\n249\n00:12:41.390 --> 00:12:42.930\n>> Sure.\n>> Can we take a look at that nested one,\n\n250\n00:12:42.930 --> 00:12:44.890\nis what we're taking a look at here.\n\n251\n00:12:44.890 --> 00:12:47.660\nRemember that what we have\nto keep in mind, right,\n\n252\n00:12:47.660 --> 00:12:50.650\nis that when talking about\nthe two if statements.\n\n253\n00:12:50.650 --> 00:12:52.200\nNotice that there are two ifs, right?\n\n254\n00:12:52.200 --> 00:12:55.190\nBut notice also at the end that there's\nactually two of the fee fi fo fum [LAUGH],\n\n255\n00:12:55.190 --> 00:12:58.040\nas well, and\nyou actually start seeing that, too.\n\n256\n00:12:58.040 --> 00:13:01.600\nSometimes the things that get me, right,\nis I forget to leave one of those off\n\n257\n00:13:01.600 --> 00:13:04.980\nat the end, and then it doesn't\nrun the way I think it's going to.\n\n258\n00:13:04.980 --> 00:13:08.300\nSo, make sure you pay attention to this\nthat if you're gonna do nested statements,\n\n259\n00:13:08.300 --> 00:13:10.170\nmake sure that the ifs are actually there,\n\n260\n00:13:10.170 --> 00:13:12.330\nmake sure the thens there,\nmake sure the else.\n\n261\n00:13:12.330 --> 00:13:14.980\nEverything actually matches\nthe way that you think it should.\n\n262\n00:13:14.980 --> 00:13:18.140\nIf not,\nyou're gonna run into syntax errors and\n\n263\n00:13:18.140 --> 00:13:19.990\nthat's gonna be a long day of debugging.\n\n264\n00:13:19.990 --> 00:13:20.850\n>> Yeah, great spot Ronnie.\n\n265\n00:13:20.850 --> 00:13:25.000\nThat's an excellent point that when you\nnest an if inside of another if Remember,\n\n266\n00:13:25.000 --> 00:13:26.470\nevery If statement has be closed out.\n\n267\n00:13:26.470 --> 00:13:29.140\nSo, if you have three ifs\nthat are nested together,\n\n268\n00:13:29.140 --> 00:13:32.600\nyou have to close three Ifs with Fis so\nthere should be three Fis.\n\n269\n00:13:32.600 --> 00:13:37.790\nSo, that's a lot of the reason you see\nhow I've done this indention system,\n\n270\n00:13:37.790 --> 00:13:41.360\nmakes it easier to find\nthose type of things.\n\n271\n00:13:41.360 --> 00:13:44.280\nSo, I'm always working toward\nan indented line of code, and\n\n272\n00:13:44.280 --> 00:13:48.308\nI should be able to find the opening and\nclosing of those lines.\n\n273\n00:13:48.308 --> 00:13:53.060\nThrough the indention portions, makes it\neasier to read, makes it easier to see and\n\n274\n00:13:53.060 --> 00:13:57.940\nfind errors like that because Ronny is\nright very, very easy to forget a fi or\n\n275\n00:13:57.940 --> 00:13:59.690\nsome part of the condition and\nnothing works.\n\n276\n00:13:59.690 --> 00:14:00.220\nThat's right.\n\n277\n00:14:00.220 --> 00:14:04.430\n>> So, you see right here where there's\ntwo ifs, two thens, and two elses as well?\n\n278\n00:14:04.430 --> 00:14:08.380\nThat's the two fees at the end Make\nsure you do understand that or\n\n279\n00:14:08.380 --> 00:14:10.720\nyou will run in those problems and it is.\n\n280\n00:14:10.720 --> 00:14:13.930\nIt's a long day of trying to\ntroubleshoot or debug scripting like\n\n281\n00:14:13.930 --> 00:14:17.000\nthis when you don't remember what\nthe actual syntax is gonna be.\n\n282\n00:14:17.000 --> 00:14:21.990\nSo, always have what you need especially\nin those nested statements too.\n\n283\n00:14:21.990 --> 00:14:24.500\nNow, there's also another\nway to do this right?\n\n284\n00:14:24.500 --> 00:14:26.680\nWe don't always have to use\nthis at the end of else,\n\n285\n00:14:26.680 --> 00:14:31.810\nwe actually do have something else that we\ncan compound this type of condition with.\n\n286\n00:14:31.810 --> 00:14:33.670\n>> Yeah, that's exactly right.\n\n287\n00:14:33.670 --> 00:14:38.300\nWe do have the ability to make things\na little more compounded or more complex.\n\n288\n00:14:38.300 --> 00:14:42.900\nBecause I wanna continually make these\nstatements start looking at conditions and\n\n289\n00:14:42.900 --> 00:14:46.390\nfurther narrowing those conditions\ndown to be very, very specific.\n\n290\n00:14:46.390 --> 00:14:48.330\nTherefore, I get different output.\n\n291\n00:14:48.330 --> 00:14:49.460\nDepending on that specificity.\n\n292\n00:14:49.460 --> 00:14:53.660\nSo, let's take a look at another script\nthat I've written and see how that works,\n\n293\n00:14:53.660 --> 00:14:56.120\nand how we can do that as well.\n\n294\n00:14:56.120 --> 00:14:58.680\nSo, jump right on in, and let's see here,\n\n295\n00:14:58.680 --> 00:15:04.230\nif I look at nano 3name.sh good on another\nname snob, and we look at here we see that\n\n296\n00:15:04.230 --> 00:15:07.360\nit's a little bit different in the way\nwe've been working with it here before,\n\n297\n00:15:07.360 --> 00:15:10.960\nand that's because I'm doing something\na little bit differently, right?\n\n298\n00:15:10.960 --> 00:15:12.990\nSo, normal stuff, here, reading the input.\n\n299\n00:15:12.990 --> 00:15:15.225\nAnd I'm just putting an empty echo here.\n\n300\n00:15:15.225 --> 00:15:18.465\nIt's just gonna and\nmake it a little easier to read and\n\n301\n00:15:18.465 --> 00:15:20.449\nwork with on the user's end of things.\n\n302\n00:15:20.449 --> 00:15:21.749\nSo, that's why I stuck that there.\n\n303\n00:15:21.749 --> 00:15:23.119\nAnd then our if statement.\n\n304\n00:15:23.119 --> 00:15:28.367\nSo if D, lowercase or capital, and aniel.\n\n305\n00:15:28.367 --> 00:15:30.178\nIf the name is Daniel,\nlowercase or uppercase.\n\n306\n00:15:30.178 --> 00:15:33.350\nThen echo all hail the maker\ncuz I'm creator of the script.\n\n307\n00:15:33.350 --> 00:15:37.540\nWhat if I want to do something else?\n\n308\n00:15:37.540 --> 00:15:41.230\nWhat if I wanted another person to\nhave a specific type of outcome?\n\n309\n00:15:41.230 --> 00:15:43.000\nHere I run this elif command.\n\n310\n00:15:43.000 --> 00:15:48.140\nBasically it's else and\nif put together, so if and\n\n311\n00:15:48.140 --> 00:15:51.490\nthen elif, and\nthen at the very end we have else do this.\n\n312\n00:15:51.490 --> 00:15:56.531\nSo, if any of these conditions aren't\nmet each one of the ifs that aren't\n\n313\n00:15:56.531 --> 00:16:01.757\nnested necessarily, then do the very\nlast thing, which is under the else.\n\n314\n00:16:01.757 --> 00:16:05.716\nSo, with all the conditions that we have,\nmaybe I want David, who is\n\n315\n00:16:05.716 --> 00:16:10.154\nactually a cousin of mine, and I can put\nthat in there and say if equals David,\n\n316\n00:16:10.154 --> 00:16:14.760\nlowercase or uppercase, Then run this\nWelcome, cousin, well I put cousing.\n\n317\n00:16:14.760 --> 00:16:19.013\nI'll change that little typographical\nerror there from my end of\n\n318\n00:16:19.013 --> 00:16:21.110\nthe spectrum and then say that.\n\n319\n00:16:21.110 --> 00:16:26.112\nSo different from if I log in and\ndifferent from other people that log in or\n\n320\n00:16:26.112 --> 00:16:29.559\ngive it a name, should I say,\nthat starts with D.\n\n321\n00:16:29.559 --> 00:16:33.181\nIf it gives a name that starts with D and\nany other characters following that,\n\n322\n00:16:33.181 --> 00:16:36.600\nit's gonna be happy with that as well and\nsay, hey, name, how are you?\n\n323\n00:16:36.600 --> 00:16:37.209\nWelcome.\n\n324\n00:16:37.209 --> 00:16:38.840\nAnd I love names that start with D.\n\n325\n00:16:38.840 --> 00:16:42.584\nAnd then again anyone that gives it\na name that doesn't start with D,\n\n326\n00:16:42.584 --> 00:16:46.990\nwe get the good old, you are not welcome\nhere prompt and we're out of our script.\n\n327\n00:16:46.990 --> 00:16:51.541\nSo that all being said, let's run the\nscript and see if it works correctly and\n\n328\n00:16:51.541 --> 00:16:53.933\nwhat kind of outcome we can expect here.\n\n329\n00:16:53.933 --> 00:16:57.517\nSo I will save that change and\nget out of here.\n\n330\n00:16:57.517 --> 00:17:02.392\nAnd let's do ./3name_snob.\n\n331\n00:17:02.392 --> 00:17:03.610\nRun that asking me what my name is.\n\n332\n00:17:03.610 --> 00:17:04.580\nSo far, so good.\n\n333\n00:17:04.580 --> 00:17:06.234\nMy name is Daniel.\n\n334\n00:17:06.234 --> 00:17:07.593\nAll hail the maker!!!\n\n335\n00:17:07.593 --> 00:17:08.504\nRight, great.\n\n336\n00:17:08.504 --> 00:17:11.180\nWhat if I did the lower case,\nsee if that works.\n\n337\n00:17:12.970 --> 00:17:14.820\nAll hail the maker, great.\n\n338\n00:17:14.820 --> 00:17:16.810\nSo far, everything is working.\n\n339\n00:17:16.810 --> 00:17:21.675\nWent to that first if statement, met\nthose conditions and returned the output.\n\n340\n00:17:21.675 --> 00:17:23.670\nBut what if I do David, right?\n\n341\n00:17:23.670 --> 00:17:26.462\nIt's gonna jump that condition,\ngo to the other one.\n\n342\n00:17:26.462 --> 00:17:30.117\nIt's gonna find it because it's gonna say,\nI'm looking at this condition, this first\n\n343\n00:17:30.117 --> 00:17:33.200\ncondition that I've come across, and\nI don't meet those requirements.\n\n344\n00:17:33.200 --> 00:17:34.427\nI don't meet those criteria.\n\n345\n00:17:34.427 --> 00:17:38.482\nSo let's see what else is available for\nme, so it's gonna jump to that L if and\n\n346\n00:17:38.482 --> 00:17:40.620\nsee if it meets the conditions there.\n\n347\n00:17:40.620 --> 00:17:43.677\nIf I do David, it should meet them and\nwill be off to running.\n\n348\n00:17:43.677 --> 00:17:47.411\nSo I'll run the script again,\nI'll say my name is David,\n\n349\n00:17:47.411 --> 00:17:49.870\nwelcome cousin to the maker!\n\n350\n00:17:49.870 --> 00:17:53.219\nGreat, again should give the same results\nwhether I do upper case or lower case.\n\n351\n00:17:54.360 --> 00:17:55.850\nAnd all hail to the maker.\n\n352\n00:17:55.850 --> 00:17:59.100\nAnd now, what if we just, or a D name.\n\n353\n00:17:59.100 --> 00:18:00.685\nWhat if my name was Doug, right?\n\n354\n00:18:00.685 --> 00:18:02.330\nOkay, no problem.\n\n355\n00:18:02.330 --> 00:18:03.540\nAnd I'll say, my name is Doug.\n\n356\n00:18:03.540 --> 00:18:06.400\nWelcome Doug,\nI love names that start with D.\n\n357\n00:18:06.400 --> 00:18:10.633\nSo as you can see, as the conditions\nchange in the variable, it changes which\n\n358\n00:18:10.633 --> 00:18:14.605\none of the conditional statements,\neither the first if, or the L if, or\n\n359\n00:18:14.605 --> 00:18:18.609\nthe next L if, which one of those it's\ngonna meet and then fill out that.\n\n360\n00:18:18.609 --> 00:18:21.480\nIf I try to log in yet again as Ronnie,\n\n361\n00:18:21.480 --> 00:18:25.662\nwell he still gets the standard\nnomenclature there.\n\n362\n00:18:25.662 --> 00:18:28.334\nThe output that you're not welcome here,\nI am a namestop,\n\n363\n00:18:28.334 --> 00:18:31.017\nyou gotta start with D if you\nwant me to give you an ice cream.\n\n364\n00:18:31.017 --> 00:18:34.838\n>> Excellent Daniel, so what we've seen in\nthe nested statement, right, is take that\n\n365\n00:18:34.838 --> 00:18:38.516\nfirst if and actually return it and then\nuse that also in that second if statement.\n\n366\n00:18:38.516 --> 00:18:40.274\nBut here with the compounding one,\n\n367\n00:18:40.274 --> 00:18:43.848\nwe're actually saying any of these\nif statements that we have, right,\n\n368\n00:18:43.848 --> 00:18:47.714\nmeet any one of those and then return\nthe value also associated with it as well,\n\n369\n00:18:47.714 --> 00:18:51.193\nwithout us having to create multiple\nscripts to actually do each one.\n\n370\n00:18:51.193 --> 00:18:55.359\nSo it really is a powerful way that we can\nactually start creating those multiple\n\n371\n00:18:55.359 --> 00:18:56.167\nconditions for\n\n372\n00:18:56.167 --> 00:18:59.977\nus when we do need to meet those values\nthat's actually out there for us.\n\n373\n00:18:59.977 --> 00:19:02.521\nNow the other thing that we also have,\nof course,\n\n374\n00:19:02.521 --> 00:19:06.293\nis that there is a more elegant way to\ndo some of this stuff, right Daniel?\n\n375\n00:19:06.293 --> 00:19:07.431\n>> That is exactly right.\n\n376\n00:19:07.431 --> 00:19:11.006\nNow we're finally jumping\ninto that case environment.\n\n377\n00:19:11.006 --> 00:19:14.605\nCase works very similarly to if, right?\n\n378\n00:19:14.605 --> 00:19:16.579\nI'm gonna give it the set of conditions.\n\n379\n00:19:16.579 --> 00:19:20.503\nIf it finds those conditions to be met,\nthen it's going to run an output.\n\n380\n00:19:20.503 --> 00:19:21.873\nIt's gonna generate output.\n\n381\n00:19:21.873 --> 00:19:23.846\nSo why would I use case over using if?\n\n382\n00:19:23.846 --> 00:19:28.583\nBecause, as you can start to see,\nif I'm running if this, then do that.\n\n383\n00:19:28.583 --> 00:19:29.721\nL if this, then do that.\n\n384\n00:19:29.721 --> 00:19:30.789\nL if this, then do that.\n\n385\n00:19:30.789 --> 00:19:34.501\nL if this, and things start to get very,\nvery wordy and verbose, and\n\n386\n00:19:34.501 --> 00:19:37.894\nit's difficult to look through that and\nsee what's going on.\n\n387\n00:19:37.894 --> 00:19:43.165\nWe always want to try to make our\ncode as short as we possibly can.\n\n388\n00:19:43.165 --> 00:19:45.185\nAnd don't get me wrong,\nI'm not the best at this.\n\n389\n00:19:45.185 --> 00:19:47.924\nThere's guys out there, man, they write\na little blocks of code this long.\n\n390\n00:19:47.924 --> 00:19:51.454\nThey do everything I do with ten lines of\ncode cuz they're better at it than me.\n\n391\n00:19:51.454 --> 00:19:55.129\nBut if I can shorten things up, if I can\nlearn a tip or a trick or use a different\n\n392\n00:19:55.129 --> 00:19:58.652\nthing, they probably know something\nabout how to script then I don't.\n\n393\n00:19:58.652 --> 00:20:00.556\nSo that's what we're\ntrying to learn today.\n\n394\n00:20:00.556 --> 00:20:03.085\nSo with using case,\nthat's gonna be one of those tips\n\n395\n00:20:03.085 --> 00:20:05.966\nthat we can start to shorten\nup our conditional statements.\n\n396\n00:20:05.966 --> 00:20:08.340\nSo lets jump into doing that.\n\n397\n00:20:08.340 --> 00:20:10.360\nLets see how we can we can do it,\nI'll clear the screen.\n\n398\n00:20:10.360 --> 00:20:12.677\nAnd this one we're gonna\nactually have to write it,\n\n399\n00:20:12.677 --> 00:20:14.583\ncuz I didn't create any premade scripts.\n\n400\n00:20:14.583 --> 00:20:18.252\nBut, shouldn't be a problem,\nwe'll call this Case1.\n\n401\n00:20:18.252 --> 00:20:21.598\nSo nano case1.sh.\n\n402\n00:20:21.598 --> 00:20:27.874\nGive it the bin/bash line, and let's see\nhere, we wanna start with just an echo,\n\n403\n00:20:27.874 --> 00:20:31.832\nkind of getting that good\nuser input from our users.\n\n404\n00:20:31.832 --> 00:20:37.198\nActually, I'll use read -p,\n\n405\n00:20:37.198 --> 00:20:41.578\nand say what is your name?.\n\n406\n00:20:41.578 --> 00:20:43.806\nI like to give it a couple\nspaces after that.\n\n407\n00:20:43.806 --> 00:20:46.405\nAnd then name is my variable.\n\n408\n00:20:46.405 --> 00:20:51.353\nAnd then I'll say case, so\nwe're starting our case statement, and\n\n409\n00:20:51.353 --> 00:20:55.467\nwe'll give it the variable\nname that we're using with.\n\n410\n00:20:55.467 --> 00:20:58.641\nSo whatever the user inputs,\nthat's what we're gonna run through case.\n\n411\n00:20:58.641 --> 00:21:03.204\nSo I'm gonna reference that variable\nwith name, and I'm gonna say, in.\n\n412\n00:21:03.204 --> 00:21:06.463\nSo I'm saying, start the case statement,\ntake the variable and\n\n413\n00:21:06.463 --> 00:21:10.030\nshove it into the case statement,\nokay, that's what in is there for.\n\n414\n00:21:10.030 --> 00:21:13.820\nHit Return, and\nnow we start giving it the conditions.\n\n415\n00:21:13.820 --> 00:21:18.593\nSo I'll tab in a little bit, and\nI'll say for my first condition,\n\n416\n00:21:18.593 --> 00:21:22.525\nwe'll say, how about Bob,\nsome more name goodness.\n\n417\n00:21:22.525 --> 00:21:27.330\nSo we'll say Bob, and\nthen I give it a closed parentheses.\n\n418\n00:21:27.330 --> 00:21:30.948\nThat lets case know this is\nmy first condition, okay?\n\n419\n00:21:30.948 --> 00:21:38.500\nSo now what I need to do is just give it\nwhat to do if it reaches this condition,\n\n420\n00:21:38.500 --> 00:21:44.524\nand for here we'll just do\nsimple echo hello, and the name.\n\n421\n00:21:44.524 --> 00:21:48.527\nLike that and then when I'm done,\nwhen I finished my condition and\n\n422\n00:21:48.527 --> 00:21:52.042\nI either wanna finish the case\nstatement or go to the next,\n\n423\n00:21:52.042 --> 00:21:56.105\nevery time you get done with\na condition inside of a case statement,\n\n424\n00:21:56.105 --> 00:22:00.926\nit needs to be completed by giving it\ntwo characters, which is two semicolons.\n\n425\n00:22:00.926 --> 00:22:03.490\nSo if I'm done with this,\nI can do like that,\n\n426\n00:22:03.490 --> 00:22:06.471\nthat lets it know that's\nthe end of that condition.\n\n427\n00:22:06.471 --> 00:22:08.885\nI can do another one, I can say jill.\n\n428\n00:22:10.990 --> 00:22:14.155\nAnd echo,\n\n429\n00:22:14.155 --> 00:22:19.084\nhey there name.\n\n430\n00:22:19.084 --> 00:22:21.832\nClose that out,\ncouple of brackets like that.\n\n431\n00:22:21.832 --> 00:22:26.968\nNow you're thinking, where am I\ngetting this Bob close parentheses and\n\n432\n00:22:26.968 --> 00:22:29.210\nJill close parentheses?\n\n433\n00:22:29.210 --> 00:22:34.903\nWhat I'm saying is is whatever this is,\nif it meets this condition,\n\n434\n00:22:34.903 --> 00:22:38.690\ntherefore if name does equal Bob,\nthen do this.\n\n435\n00:22:38.690 --> 00:22:41.228\nIf name equals Jill, then do this.\n\n436\n00:22:41.228 --> 00:22:44.698\nBut how do I do the old if\nstatement of whatever else, right?\n\n437\n00:22:44.698 --> 00:22:49.486\nSo when I'm done and hit return,\nif I end it by just giving it a star,\n\n438\n00:22:49.486 --> 00:22:53.939\nthat's basically the else\nportion of this statement, okay?\n\n439\n00:22:53.939 --> 00:23:01.570\nAnd I can say, you're not welcome here.\n\n440\n00:23:01.570 --> 00:23:04.442\nKind of our name snob\n[LAUGH] moving through that.\n\n441\n00:23:04.442 --> 00:23:09.326\nBoom, close that out give it\nthe double semicolons there, and\n\n442\n00:23:09.326 --> 00:23:14.321\nthen make sure to end your case\nstatement with esac like that.\n\n443\n00:23:14.321 --> 00:23:17.392\nAlways want to close anything you\nstart and that's how we do that.\n\n444\n00:23:17.392 --> 00:23:19.211\nLet me check my input here.\n\n445\n00:23:19.211 --> 00:23:20.891\nEverything looks good.\n\n446\n00:23:20.891 --> 00:23:24.652\nI should be good to go and\nwe should be off to the races.\n\n447\n00:23:24.652 --> 00:23:26.659\nLet's save this and run it,\nsee how well it works.\n\n448\n00:23:26.659 --> 00:23:29.040\nSo Bob and Jill are two actual users.\n\n449\n00:23:29.040 --> 00:23:31.206\nEverybody else is not gonna get any joy.\n\n450\n00:23:31.206 --> 00:23:36.650\nSo save this, save that, chmod that guy,\n\n451\n00:23:36.650 --> 00:23:41.048\n+x case1, and then run case1.\n\n452\n00:23:41.048 --> 00:23:41.613\nWhat's my name?\n\n453\n00:23:41.613 --> 00:23:42.501\nMy name's Bob.\n\n454\n00:23:42.501 --> 00:23:43.855\nHello, Bob.\n\n455\n00:23:43.855 --> 00:23:45.665\nEverything's working fine so far.\n\n456\n00:23:45.665 --> 00:23:47.522\nDo it again, Jill.\n\n457\n00:23:47.522 --> 00:23:49.055\nHey there Jill.\n\n458\n00:23:49.055 --> 00:23:51.220\nEverything's working fine so far.\n\n459\n00:23:51.220 --> 00:23:54.238\nIf I do myself,\nI'm not welcome here, right,\n\n460\n00:23:54.238 --> 00:23:57.034\ncuz I didn't meet any of those conditions.\n\n461\n00:23:57.034 --> 00:24:00.433\nNow you saw how neater\nthat was using case,\n\n462\n00:24:00.433 --> 00:24:04.507\nwhole lot less lines of code\nthan we did with the if.\n\n463\n00:24:04.507 --> 00:24:08.000\nCourse we didn't make it nearly as\ncomplex, but even if we did, it would\n\n464\n00:24:08.000 --> 00:24:11.497\nstill probably be a whole lot shorter and\na whole lot more efficient to use\n\n465\n00:24:11.497 --> 00:24:15.306\nthe case statement for when we're trying\ntrying to run through a bunch of ifs.\n\n466\n00:24:15.306 --> 00:24:17.637\n>> And we can see this also work too,\nright?\n\n467\n00:24:17.637 --> 00:24:21.492\nTaste is not only limited to what Daniel\nshowed you, but we can also meet multiple\n\n468\n00:24:21.492 --> 00:24:25.009\ntypes of statements, just like we were\nalready doing with what we had done\n\n469\n00:24:25.009 --> 00:24:28.183\npreviously with the LF as well,\nbut a little bit more elegant, and\n\n470\n00:24:28.183 --> 00:24:31.560\na little bit more efficient in the way\nthat the coding actually works.\n\n471\n00:24:31.560 --> 00:24:33.413\nWell, Daniel, that's a lot there for\n\n472\n00:24:33.413 --> 00:24:37.304\nthe conditional statements that we've\ngone through with two episodes, so far.\n\n473\n00:24:37.304 --> 00:24:40.277\nAnd actually,\nDaniel actually says he has one more.\n\n474\n00:24:40.277 --> 00:24:41.545\n>> I got one more.\n>> To go through.\n\n475\n00:24:41.545 --> 00:24:42.851\nSo let's go ahead and take a look.\n\n476\n00:24:42.851 --> 00:24:43.788\n>> Yeah, let's take a look at that one.\n\n477\n00:24:43.788 --> 00:24:47.560\nI didn't want leave, this is actually the\ncoolest parts of using the k statements.\n\n478\n00:24:47.560 --> 00:24:48.894\nAnd what that is is,\n\n479\n00:24:48.894 --> 00:24:53.530\nI can say this or this in one line\ninstead of having to do a line for each.\n\n480\n00:24:53.530 --> 00:24:56.260\nThat's kind of a nice function\nof the case statement.\n\n481\n00:24:56.260 --> 00:25:00.420\nSo we'll actually continue using\nthe statement we've already made and\n\n482\n00:25:00.420 --> 00:25:05.840\ngo back in the nano and say, case one,\nand down here instead of having two lines\n\n483\n00:25:05.840 --> 00:25:09.470\nof code, I can actually solidify\nthis into one line of code, right?\n\n484\n00:25:09.470 --> 00:25:12.080\nAnd not by some weird conjunction or\nanything like that.\n\n485\n00:25:12.080 --> 00:25:16.848\nBut by saying, I'll take out,\nI'll just comment out this line.\n\n486\n00:25:16.848 --> 00:25:21.380\nWe don't need you, so\nthat's commented out.\n\n487\n00:25:21.380 --> 00:25:26.880\nAnd here what we'll do is we'll add our\npipe operand like that, and say jill.\n\n488\n00:25:26.880 --> 00:25:32.510\nAnd now if it's bob or jill,\nwe'll get Hello $NAME!, right?\n\n489\n00:25:32.510 --> 00:25:35.298\nSo all I've done here is I've\njust commented that line out,\n\n490\n00:25:35.298 --> 00:25:37.109\nit won't be interpreted by the shell.\n\n491\n00:25:37.109 --> 00:25:40.779\nBut I've done in one line of code what I\nhad to do with two in the other way I was\n\n492\n00:25:40.779 --> 00:25:41.320\ndoing it.\n\n493\n00:25:41.320 --> 00:25:45.619\nSo very cool, I should be able to close\nthis, save it out, and fingers crossed,\n\n494\n00:25:45.619 --> 00:25:48.486\nof course, always,\nyou gotta love debugging code.\n\n495\n00:25:48.486 --> 00:25:53.785\nWhat's my name is Bob, Hello Bob,\nit's good so far, how about Jill?\n\n496\n00:25:53.785 --> 00:25:54.760\nHello Jill.\n\n497\n00:25:54.760 --> 00:25:57.001\nEverything's working, one more time.\n\n498\n00:25:57.001 --> 00:25:58.301\nThat's not what I wanted to do.\n\n499\n00:25:58.301 --> 00:25:59.284\nCtrl + L.\n\n500\n00:25:59.284 --> 00:26:03.462\nThere we go, and my name's Daniel, and\nI should get you're not welcome here.\n\n501\n00:26:03.462 --> 00:26:07.737\nEverything's working so now, again, going\nback to that whole making things elegant,\n\n502\n00:26:07.737 --> 00:26:11.499\nhaving the ability to say this or this in\none line instead of having to make a line\n\n503\n00:26:11.499 --> 00:26:15.204\nfor each, shortens that code, makes it\nmore efficient, makes it easier for\n\n504\n00:26:15.204 --> 00:26:17.387\nyou to read and\nunderstand what's going on.\n\n505\n00:26:17.387 --> 00:26:20.675\nAnd it's really nice because typing\ncode can be a little arduous.\n\n506\n00:26:20.675 --> 00:26:22.267\n[LAUGH]\n>> All right, Daniel, thank you for\n\n507\n00:26:22.267 --> 00:26:23.231\nthose demonstrations.\n\n508\n00:26:23.231 --> 00:26:24.751\nAgain, sorry to kind of cut\nyou off too soon there.\n\n509\n00:26:24.751 --> 00:26:25.639\n>> No problem.\n\n510\n00:26:25.639 --> 00:26:26.862\n>> Didn't mean to do that but\n\n511\n00:26:26.862 --> 00:26:30.201\nremember that we're starting to see\nthese conditional statements and\n\n512\n00:26:30.201 --> 00:26:33.388\nhow powerful they can be as we add\nin multiple if statements as well.\n\n513\n00:26:33.388 --> 00:26:37.238\nAnd this is where we're gonna see\nscripting really start to blossom and\n\n514\n00:26:37.238 --> 00:26:40.654\nbloom beyond even the scope of\nwhat we're talking about here.\n\n515\n00:26:40.654 --> 00:26:43.728\nSo that's a great place for\nus to go ahead and end this episode,\n\n516\n00:26:43.728 --> 00:26:45.940\nsigning off for ITProTV, I'm Ronnie Wong.\n\n517\n00:26:45.940 --> 00:26:46.800\n>> And I'm Daniel Lowry.\n\n518\n00:26:46.800 --> 00:26:48.523\n>> And we'll see you next time.\n\n519\n00:26:48.523 --> 00:26:55.320\n[MUSIC]\n\n",
          "vimeoId": "146012343"
        },
        {
          "description": "In this episode, Ronnie and Daniel continue on with conditional statements by showing us the power of the conditional statements to handle multiple conditions and also to choose to report the output based on the condition or conditions.  Using nested if statements and case commands are we we work with complex and multiple conditions.",
          "length": "2170",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash-111615-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash-111615-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash-111615-1-sm.jpg",
          "title": "Creating Loops in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.328 --> 00:00:15.657\nWelcome to another exciting\nepisode right here on ITProTV.\n\n3\n00:00:15.657 --> 00:00:19.450\nI'm your host Ronnie Wong and\ntoday we'll take a look at BASH and\n\n4\n00:00:19.450 --> 00:00:24.386\nscripting, specifically though, taking\na look at creating loops in scripting.\n\n5\n00:00:24.386 --> 00:00:26.342\nAnd who better to help us than well,\nMr. Daniel Larry.\n\n6\n00:00:26.342 --> 00:00:29.932\nDaniel, you're going to help me to get my\nhead around this idea of loops because\n\n7\n00:00:29.932 --> 00:00:31.152\nwhen I started looking at it,\n\n8\n00:00:31.152 --> 00:00:35.322\nI was completely lost at this point so\nyou gotta help me out.\n\n9\n00:00:35.322 --> 00:00:36.535\n>> Yeah, it was kind of funny.\n\n10\n00:00:36.535 --> 00:00:38.723\nBefore we started this show,\nI handed Ronnie the notes for it.\n\n11\n00:00:38.723 --> 00:00:43.512\nHe's going yeah, this isn't really\nmaking a whole lot of sense to me.\n\n12\n00:00:43.512 --> 00:00:44.634\nAnd you know what?\n\n13\n00:00:44.634 --> 00:00:46.458\nIf you've never seen loops before and\n\n14\n00:00:46.458 --> 00:00:49.312\nyou looked at it you would\nprobably do the exact same thing.\n\n15\n00:00:49.312 --> 00:00:53.453\nYou would say this is a little [SOUND],\nit's a little difficult here.\n\n16\n00:00:53.453 --> 00:00:55.510\nI'm not understanding\nthe flow of what's going on.\n\n17\n00:00:55.510 --> 00:00:56.900\nAnd hopefully by the end of this show, and\n\n18\n00:00:56.900 --> 00:00:59.130\nactually this is probably\ngonna be a couple of shows.\n\n19\n00:00:59.130 --> 00:01:01.760\nIt's quite a bit of information\nwhen it comes to looping.\n\n20\n00:01:01.760 --> 00:01:04.880\nSo we're gonna take our time and\nmake sure we understand it.\n\n21\n00:01:04.880 --> 00:01:08.360\nBut when we take a look at them, it can\nbe difficult to understand the flow,\n\n22\n00:01:08.360 --> 00:01:10.020\nand to see how it's\nsupposed to be working.\n\n23\n00:01:10.020 --> 00:01:11.812\nYou have to know the syntax.\n\n24\n00:01:11.812 --> 00:01:15.734\nYou have to understand what's going on and\nwithout that piece of information,\n\n25\n00:01:15.734 --> 00:01:18.191\nit is gonna look like a bunch\nof gibberish to you and\n\n26\n00:01:18.191 --> 00:01:20.312\nyou're not gonna make any sense out of it.\n\n27\n00:01:20.312 --> 00:01:24.030\nThe good news is it's\nreally not that difficult.\n\n28\n00:01:24.030 --> 00:01:26.312\nIt's been a while since I've\nhad to do this kinda stuff,\n\n29\n00:01:26.312 --> 00:01:29.508\nsince back in the college days, so I had\nto dust all this kinda information off.\n\n30\n00:01:29.508 --> 00:01:33.629\nAnd I started going, yeah,\nthat's right, that's right,\n\n31\n00:01:33.629 --> 00:01:38.284\nas I started creating scripts to do\nthings like this and good examples for\n\n32\n00:01:38.284 --> 00:01:43.427\nus to really understand how the script\nis working, and the loop specifically.\n\n33\n00:01:43.427 --> 00:01:47.822\nSo that's what we're gonna take a look at\ntoday and how we do loops, what are loops?\n\n34\n00:01:47.822 --> 00:01:51.050\nAnd a really good place to\nstart is what is a loop?\n\n35\n00:01:51.050 --> 00:01:53.230\nWhat do we mean when we say loop?\n\n36\n00:01:53.230 --> 00:01:57.170\nWell, you probably heard of loops when\nit comes to beats and things like that,\n\n37\n00:01:57.170 --> 00:02:02.710\nwhere you take a piece of music and\nthen you cut it into one little slice and\n\n38\n00:02:02.710 --> 00:02:05.350\nyou add the same slice to the end of that,\nand it loops around,\n\n39\n00:02:05.350 --> 00:02:08.740\nit creates the same type of music over and\nover and over again.\n\n40\n00:02:08.740 --> 00:02:12.532\nThat's exactly what we're doing\nwhen we create loops in a script,\n\n41\n00:02:12.532 --> 00:02:16.602\nwe're creating a piece of code that\ndoes something over and over again.\n\n42\n00:02:16.602 --> 00:02:18.574\nWe're talking about repetitive tasks.\n\n43\n00:02:18.574 --> 00:02:20.619\nThis is where loops will\nreally help us out.\n\n44\n00:02:20.619 --> 00:02:22.820\nCan we do this other ways?\n\n45\n00:02:22.820 --> 00:02:27.414\nThere is other ways to do it, but creating\na loop is usually the most effective,\n\n46\n00:02:27.414 --> 00:02:28.717\nless time consuming,\n\n47\n00:02:28.717 --> 00:02:32.779\nmost efficient way to get a repetitive\ntask done inside of our script.\n\n48\n00:02:32.779 --> 00:02:35.724\nSo that's what I want you to\nunderstand when I say loop,\n\n49\n00:02:35.724 --> 00:02:40.048\nyou're thinking we're going to do\nsomething repeatedly, over and over again,\n\n50\n00:02:40.048 --> 00:02:43.448\nuntil we meet a certain condition,\nand then the loop will stop.\n\n51\n00:02:43.448 --> 00:02:44.904\nAnd if we don't meet that condition,\n\n52\n00:02:44.904 --> 00:02:46.869\nwe're gonna get into a little\nbit of trouble here.\n\n53\n00:02:46.869 --> 00:02:49.963\nYou're gonna see those are called infinite\nloops, where they go on forever and\n\n54\n00:02:49.963 --> 00:02:51.684\nnever end and you're stuck inside of them.\n\n55\n00:02:51.684 --> 00:02:53.875\nIf you've ever tried to\nmess with loops before and\n\n56\n00:02:53.875 --> 00:02:56.534\nyou ran your script and\nit just kept going and going, going,\n\n57\n00:02:56.534 --> 00:03:00.360\ngoing, nothing ever stopped, well, you my\nfriend, have created an infinite loop.\n\n58\n00:03:00.360 --> 00:03:03.455\nWe're actually gonna create some today for\nthe fun of it, so\n\n59\n00:03:03.455 --> 00:03:06.307\nwe can see the dangers of how\nwe can stay away from that and\n\n60\n00:03:06.307 --> 00:03:08.994\nsome of the logic behind the loops itself,\nas well.\n\n61\n00:03:08.994 --> 00:03:12.697\nSo learning that syntax, understanding\nit's gonna do something repeatedly, and\n\n62\n00:03:12.697 --> 00:03:14.881\nwe need to make sure that\nwe can get out of the loop,\n\n63\n00:03:14.881 --> 00:03:16.359\nthat it actually comes to an end.\n\n64\n00:03:16.359 --> 00:03:19.167\nSo that's what we're gonna do today.\n\n65\n00:03:19.167 --> 00:03:19.714\n>> All right.\n\n66\n00:03:19.714 --> 00:03:23.242\nSo Daniel, when we start taking a look\nat the idea of creating these loops,\n\n67\n00:03:23.242 --> 00:03:26.776\nthen what we need is a really good\nexample, at least at the very beginning.\n\n68\n00:03:26.776 --> 00:03:31.092\nWhat is it that I really need to remember\nwhen I start creating these loops?\n\n69\n00:03:31.092 --> 00:03:34.121\nAnd how do I actually make sure\nthat I see the results that I need?\n\n70\n00:03:34.121 --> 00:03:35.752\nSo Daniel,\nyou're going to help us out with this.\n\n71\n00:03:35.752 --> 00:03:36.454\n>> Yeah.\n\n72\n00:03:36.454 --> 00:03:37.249\nThat's exactly right.\n\n73\n00:03:37.249 --> 00:03:41.713\nWe need to see what is available for us\nwhen it comes to creating loops in BASH.\n\n74\n00:03:41.713 --> 00:03:44.871\nAnd the best way to do it is to\ndo it in some sort of order.\n\n75\n00:03:44.871 --> 00:03:48.493\nThere really is no better\nloop than the other.\n\n76\n00:03:48.493 --> 00:03:52.307\nThere's a few different types of loops\nthat are in the scripting language itself.\n\n77\n00:03:52.307 --> 00:03:56.376\nNot one is any better than the other,\nit just does it a different way, and\n\n78\n00:03:56.376 --> 00:03:59.711\nit might be more efficient to\ndo it this way than that way, or\n\n79\n00:03:59.711 --> 00:04:01.990\ntry that way instead of this way.\n\n80\n00:04:01.990 --> 00:04:04.688\nSo the best thing I'm gonna do is\nI'm just gonna start with the ones\n\n81\n00:04:04.688 --> 00:04:07.397\nthat are most common and work our\nway up to other ways you can use it.\n\n82\n00:04:07.397 --> 00:04:10.213\nSo let's start with the for loop, okay?\n\n83\n00:04:10.213 --> 00:04:11.893\nAnd when I say for,\nI don't mean the number four.\n\n84\n00:04:11.893 --> 00:04:13.851\nI mean the word for, F-O-R.\n\n85\n00:04:13.851 --> 00:04:15.354\nRight?\nThat's a for loop.\n\n86\n00:04:15.354 --> 00:04:18.001\nSo what happens inside of a for loop?\n\n87\n00:04:18.001 --> 00:04:20.675\nWell, inside of a for loop you basically,\n\n88\n00:04:20.675 --> 00:04:25.300\nyou give it a list of items and it\niterates through each one of those items.\n\n89\n00:04:25.300 --> 00:04:29.264\nWhen it comes to the end of the items,\nthe loop is over and it exits out.\n\n90\n00:04:29.264 --> 00:04:33.866\nSo it's a really simple loop that can come\nin really handy in a bunch of different\n\n91\n00:04:33.866 --> 00:04:34.494\nscripts.\n\n92\n00:04:34.494 --> 00:04:38.166\nIt's quick to create,\nespecially if you only have a few items,\n\n93\n00:04:38.166 --> 00:04:41.096\nmaybe a list of items that\nyou want to loop through.\n\n94\n00:04:41.096 --> 00:04:45.044\nThe for loop can really be\nhandy when it comes to that.\n\n95\n00:04:45.044 --> 00:04:46.909\nSo let's take a look at a for loop.\n\n96\n00:04:46.909 --> 00:04:49.720\nLet's jump onto my computer\nreally quickly and\n\n97\n00:04:49.720 --> 00:04:52.960\ntake a look see at some of\nthe loops I have created here.\n\n98\n00:04:52.960 --> 00:04:58.817\nSo let's see here,\nI created a loops document here.\n\n99\n00:04:58.817 --> 00:05:00.822\nAnd that's where we'll create our loops,\nour directory.\n\n100\n00:05:00.822 --> 00:05:05.090\nAnd let's just create a simple loop so\nwe can see how it works, okay,\n\n101\n00:05:05.090 --> 00:05:06.274\na simple for loop.\n\n102\n00:05:06.274 --> 00:05:13.538\nSo we'll call it nano simple4.sh\nlike that, just to make it easy.\n\n103\n00:05:13.538 --> 00:05:15.837\nEven though I told you\nit's not the number four,\n\n104\n00:05:15.837 --> 00:05:18.005\nI like to break my own\nrules from time to time.\n\n105\n00:05:18.005 --> 00:05:19.180\n>> [LAUGH]\n>> All right.\n\n106\n00:05:19.180 --> 00:05:21.752\nSo we gotta start off with\nthat whole bin/bash line.\n\n107\n00:05:21.752 --> 00:05:24.540\nYou know,\nit's not a script without it, right?\n\n108\n00:05:24.540 --> 00:05:26.370\nSo put that in there.\n\n109\n00:05:26.370 --> 00:05:28.100\nAnd let's see here.\n\n110\n00:05:28.100 --> 00:05:33.302\nFor a simple for loop let's do for test,\n\n111\n00:05:33.302 --> 00:05:37.892\nand we'll say in, we'll say Dog,\n\n112\n00:05:37.892 --> 00:05:41.564\nCat, Mouse, Cat not Cate,\n\n113\n00:05:41.564 --> 00:05:46.307\n[LAUGH] Elephant, Rhino, Dolphin,\n\n114\n00:05:46.307 --> 00:05:51.350\nL-P-H-I-N, and Hippo, okay?\n\n115\n00:05:51.350 --> 00:05:58.294\nAnd then we'll say do\necho The next animal is,\n\n116\n00:05:58.294 --> 00:06:02.212\nthat makes it easier, and\n\n117\n00:06:02.212 --> 00:06:07.388\nthen test, hit that and say done.\n\n118\n00:06:07.388 --> 00:06:10.440\nOkay, I've created a very simple for\nloop and\n\n119\n00:06:10.440 --> 00:06:13.266\nyou saw it didn't take\nme much time at all.\n\n120\n00:06:13.266 --> 00:06:16.244\nIt took me longer to actually type out the\nname of the animals than it was to put in\n\n121\n00:06:16.244 --> 00:06:17.432\nthe commands for the for loop.\n\n122\n00:06:17.432 --> 00:06:20.912\nSo let's look through this really\nquickly and see what the structure,\n\n123\n00:06:20.912 --> 00:06:21.900\nwhat the syntax is.\n\n124\n00:06:21.900 --> 00:06:25.348\nSo I started off obviously with our,\nexcuse me, the bin/bash.\n\n125\n00:06:25.348 --> 00:06:27.724\nWe need that and then I went for.\n\n126\n00:06:27.724 --> 00:06:30.518\nSo for something, for whatever.\n\n127\n00:06:30.518 --> 00:06:34.100\nWhat is that something\nthat we're doing for?\n\n128\n00:06:34.100 --> 00:06:35.594\nAnd it is this.\n\n129\n00:06:35.594 --> 00:06:39.046\nAnd you're thinking is that some sort\nof built in, or anything like that?\n\n130\n00:06:39.046 --> 00:06:41.166\nNope, it is not,\neven though test is a built it, but\n\n131\n00:06:41.166 --> 00:06:42.674\nthat's not what we're doing here.\n\n132\n00:06:42.674 --> 00:06:44.850\nI'm just using the word test.\n\n133\n00:06:44.850 --> 00:06:45.415\nAnd what is that?\n\n134\n00:06:45.415 --> 00:06:46.537\nIt's my variable.\n\n135\n00:06:46.537 --> 00:06:49.570\nNow that does bring up a good topic.\n\n136\n00:06:49.570 --> 00:06:50.660\nThat's bad on my part.\n\n137\n00:06:50.660 --> 00:06:54.383\nI should make this something like var1.\n\n138\n00:06:54.383 --> 00:06:55.645\nOf course I can't do it.\n\n139\n00:06:55.645 --> 00:07:00.016\nI'm a little bad at\nmaneuvering around here, var1.\n\n140\n00:07:00.016 --> 00:07:01.788\nThat would be better.\n\n141\n00:07:01.788 --> 00:07:07.093\nThen we go over here and change this\nto var1 because that's my variable,\n\n142\n00:07:07.093 --> 00:07:12.244\nand it's bad to use words that are built\ninto the actual shell command.\n\n143\n00:07:12.244 --> 00:07:13.190\nIt can get a little confusing.\n\n144\n00:07:13.190 --> 00:07:16.390\nSo we'll do var1, like that.\n\n145\n00:07:16.390 --> 00:07:18.280\nDon't forget your dollar sign.\n\n146\n00:07:18.280 --> 00:07:19.650\nYou know that it is my\nfavorite thing to do,\n\n147\n00:07:19.650 --> 00:07:22.110\nforget the dollar sign or\nreference my variables.\n\n148\n00:07:22.110 --> 00:07:23.298\nBut that is what is going on.\n\n149\n00:07:23.298 --> 00:07:24.200\nSo I have the for command.\n\n150\n00:07:24.200 --> 00:07:25.543\nI'm starting the for loop.\n\n151\n00:07:25.543 --> 00:07:28.705\nThat's how I am initiate,\nthat is how I evoke the for loop, and\n\n152\n00:07:28.705 --> 00:07:29.970\nthen I have variable1.\n\n153\n00:07:29.970 --> 00:07:31.780\nI just declare whatever I want it to be.\n\n154\n00:07:31.780 --> 00:07:32.577\nI could have left it test.\n\n155\n00:07:32.577 --> 00:07:33.746\nI could make it anything I want.\n\n156\n00:07:33.746 --> 00:07:36.726\nI could make it zsa zsa ba if\nI even knew how to spell that.\n\n157\n00:07:36.726 --> 00:07:40.920\n[COUGH] But I'm just going to make\nit var1 for the sake of ease.\n\n158\n00:07:40.920 --> 00:07:43.590\nAnd then I have, in, okay?\n\n159\n00:07:43.590 --> 00:07:46.336\nWhat in is telling us,\nlet me get over there.\n\n160\n00:07:46.336 --> 00:07:50.919\nWhat in is telling us, is there's\ngoing to be a list, a list of items,\n\n161\n00:07:50.919 --> 00:07:54.669\nright, and that's what I want\nthe loop to work against.\n\n162\n00:07:54.669 --> 00:08:00.698\nThat's how it knows how many times and\nwhat to use for its loop itself.\n\n163\n00:08:00.698 --> 00:08:06.103\nOkay, so every item after that, so\ndog, cat, mouse, elephant, rhino,\n\n164\n00:08:06.103 --> 00:08:11.850\ndolphin, hippo, that is the list of\nitems that are in the for loop, okay.\n\n165\n00:08:11.850 --> 00:08:12.840\nSo now what?\n\n166\n00:08:12.840 --> 00:08:15.500\nOkay, well I get that,\nI've got a for loop,\n\n167\n00:08:15.500 --> 00:08:18.890\nI've got a variable, I tell it in and\ngive it a list of items.\n\n168\n00:08:18.890 --> 00:08:23.210\nWe've basically got almost the entire\nstructure of the for loop done.\n\n169\n00:08:23.210 --> 00:08:26.120\nAll we have now to do is to do something.\n\n170\n00:08:26.120 --> 00:08:26.800\nSo we tell it, do.\n\n171\n00:08:26.800 --> 00:08:29.650\nThat's the next command\nyou'll want it to do.\n\n172\n00:08:29.650 --> 00:08:31.260\nSo, for this do.\n\n173\n00:08:31.260 --> 00:08:32.250\nThese commands.\n\n174\n00:08:32.250 --> 00:08:36.230\nSo you'll have for,\nyour variable, your in command,\n\n175\n00:08:36.230 --> 00:08:39.850\nyour list of whatever the loop is\ngoing to go through, and then do so\n\n176\n00:08:39.850 --> 00:08:42.940\nit actually does something and\nthen your list of commands.\n\n177\n00:08:42.940 --> 00:08:47.050\nRight here, I only have one command, so\nit should be pretty simple to go through,\n\n178\n00:08:47.050 --> 00:08:51.540\nis echo the next animal is var1.\n\n179\n00:08:51.540 --> 00:08:56.400\nSo, this is where I used to get\nconfused myself when it came to loops.\n\n180\n00:08:56.400 --> 00:09:00.630\nHow does it know that var1\nis anything other than dog?\n\n181\n00:09:00.630 --> 00:09:02.110\nHow does it know to go?\n\n182\n00:09:02.110 --> 00:09:04.220\nIt's just how the loop works, okay?\n\n183\n00:09:04.220 --> 00:09:07.690\nIt knows that after it fills in\nthe variable, the first variable given in\n\n184\n00:09:07.690 --> 00:09:10.980\nthe list, that looks to see if\nthere are any other variables.\n\n185\n00:09:10.980 --> 00:09:15.450\nIf there are, it puts that value\ninto var one, reiterates the list,\n\n186\n00:09:15.450 --> 00:09:19.320\nlooks to see if there's any other values,\nputs that value if it exists.\n\n187\n00:09:19.320 --> 00:09:20.540\nIf not, then it ends.\n\n188\n00:09:20.540 --> 00:09:25.190\nSo once it gets to dolphin or hippo,\nonce it gets to hippo at the very end,\n\n189\n00:09:25.190 --> 00:09:31.160\nit puts that value into var one,\nruns whatever the commands are,\n\n190\n00:09:31.160 --> 00:09:33.190\nand then looks back in the list\nto see if there's anything else.\n\n191\n00:09:33.190 --> 00:09:37.020\nIf there's nothing, then it knows\nit's come to the end of the loop, and\n\n192\n00:09:37.020 --> 00:09:38.000\nit exits out, right?\n\n193\n00:09:38.000 --> 00:09:38.660\nSo it just ends.\n\n194\n00:09:38.660 --> 00:09:40.800\nAt that time,\nI can either give it another command, or\n\n195\n00:09:40.800 --> 00:09:42.900\nI could just tell it that I'm done.\n\n196\n00:09:42.900 --> 00:09:44.540\nAnd that's what I did.\n\n197\n00:09:44.540 --> 00:09:45.710\nI just said done.\n\n198\n00:09:45.710 --> 00:09:47.700\nSo remember that when you\nhave a do you need a done.\n\n199\n00:09:47.700 --> 00:09:50.250\nAnd for every do you have,\nyou need a done.\n\n200\n00:09:50.250 --> 00:09:51.660\nSo if you have multiple dos,\n\n201\n00:09:51.660 --> 00:09:54.610\nmake sure there are multiple\ndones that correspond with them.\n\n202\n00:09:54.610 --> 00:09:55.830\nBut this is a very simple thing.\n\n203\n00:09:55.830 --> 00:10:00.080\nWhat it should do is basically echo\nthe name of each one of these animals\n\n204\n00:10:00.080 --> 00:10:03.270\non a separate line and\nonce it's come to the end of it,\n\n205\n00:10:03.270 --> 00:10:07.330\nit will end and complete and it will rock.\n\n206\n00:10:07.330 --> 00:10:08.730\nShould be a lot of fun.\n\n207\n00:10:08.730 --> 00:10:10.200\nLet's save this guy, Control O to save.\n\n208\n00:10:10.200 --> 00:10:11.960\nControl X to get out of there.\n\n209\n00:10:11.960 --> 00:10:13.879\nThe chmod +x, the simple.\n\n210\n00:10:15.190 --> 00:10:17.095\nAnd now let's run it and see what it does.\n\n211\n00:10:17.095 --> 00:10:17.800\nsimple4.sh.\n\n212\n00:10:17.800 --> 00:10:19.440\nAnd that's exactly what it did.\n\n213\n00:10:19.440 --> 00:10:23.470\nIt ran through the list, echoed each one\nof the animals, the next animal is dog,\n\n214\n00:10:23.470 --> 00:10:25.630\nthe next animal is cat, mouse, and so on.\n\n215\n00:10:25.630 --> 00:10:29.820\nSo it ran through every item\nI gave it in that list, and\n\n216\n00:10:29.820 --> 00:10:32.470\nthat's how it knew how to loop,\nusing the for loop.\n\n217\n00:10:32.470 --> 00:10:35.220\nSo if you have a list of items\nyou have to go through and\n\n218\n00:10:35.220 --> 00:10:38.920\ndo some sort of repetitive task on,\nfor loops are your guy.\n\n219\n00:10:38.920 --> 00:10:42.200\n>> Now Daniel,\nwhen we start taking a look at this again,\n\n220\n00:10:42.200 --> 00:10:45.400\nmy standard question is again,\nwhat about the idea of case sensitivity?\n\n221\n00:10:45.400 --> 00:10:48.040\nAre the values listed here,\ndoes it really matter, since\n\n222\n00:10:48.040 --> 00:10:53.270\nwe're not actually putting in any values\nto interact with it, does it matter?\n\n223\n00:10:53.270 --> 00:10:54.390\n>> Yeah.\nIf you want\n\n224\n00:10:54.390 --> 00:10:58.420\nthe variable to be a lower case or\nupper case, it will matter a lot of times.\n\n225\n00:10:58.420 --> 00:11:02.110\nIf you created a script to where\nyou use regular expression, or\n\n226\n00:11:02.110 --> 00:11:05.200\nsomething to that effect,\nthen you can negate that fact.\n\n227\n00:11:05.200 --> 00:11:06.430\nBut normally just standard,\n\n228\n00:11:06.430 --> 00:11:10.360\njust like what we've written here\nthat case sensitivity does matter.\n\n229\n00:11:10.360 --> 00:11:13.260\nIf you need a variable\nto output to something,\n\n230\n00:11:13.260 --> 00:11:18.290\nmaybe a file name specifically or\na directory name those definitely matter.\n\n231\n00:11:18.290 --> 00:11:19.560\nUsually inside any Unix or\n\n232\n00:11:19.560 --> 00:11:24.420\nLinux system always think case sensitivity\nis an issue, so mind your cases.\n\n233\n00:11:24.420 --> 00:11:26.610\n>> Now with the simple values,\nthat's actually great,\n\n234\n00:11:26.610 --> 00:11:29.300\nbut what if I have complex values?\n\n235\n00:11:29.300 --> 00:11:33.380\nInstead of just having a single word, can\nI do it with like a word like 200 or 300,\n\n236\n00:11:33.380 --> 00:11:36.800\nwhere you actually separate\nit out with spaces?\n\n237\n00:11:36.800 --> 00:11:42.730\n>> Yeah, that is a very good observation,\nis that, what happens if the person say,\n\n238\n00:11:42.730 --> 00:11:46.040\nwas reading values in to an array and\nI use that kind of thing.\n\n239\n00:11:46.040 --> 00:11:50.810\nOr I just put in there, I want 100,\nlike Ronnie said, 100 or 200,\n\n240\n00:11:50.810 --> 00:11:53.250\nthose are two words.\n\n241\n00:11:53.250 --> 00:11:56.925\nWhat will happen is if I just use normal\nsyntax like what we did right here.\n\n242\n00:11:56.925 --> 00:11:59.595\nIt won't see them as a combined effort.\n\n243\n00:11:59.595 --> 00:12:02.125\nit won't be one in hundred go together.\n\n244\n00:12:02.125 --> 00:12:04.285\nIt doesn't know that.\n\n245\n00:12:04.285 --> 00:12:06.595\nIt'll think that one is a variable,\nand 100 is a variable.\n\n246\n00:12:06.595 --> 00:12:08.875\nTwo is a variable and 100 is a variable.\n\n247\n00:12:08.875 --> 00:12:10.945\nAnd so on and so forth.\n\n248\n00:12:10.945 --> 00:12:15.425\nIt'll just think it's one big list\nwith repetitive variable values.\n\n249\n00:12:15.425 --> 00:12:16.045\nSo how do we do that?\n\n250\n00:12:16.045 --> 00:12:20.060\nHow do we tell it this is a complex\nvalue that has maybe spaces in it or\n\n251\n00:12:20.060 --> 00:12:21.140\nother special characters.\n\n252\n00:12:21.140 --> 00:12:22.920\nThings of that nature.\n\n253\n00:12:22.920 --> 00:12:24.250\nAnd it's really simple.\n\n254\n00:12:24.250 --> 00:12:26.270\nWe use the double quotation marks.\n\n255\n00:12:26.270 --> 00:12:29.780\nSo let's go back into our script here.\n\n256\n00:12:29.780 --> 00:12:34.620\nLet's see if we can't modify it a little\nbit and see how that works out.\n\n257\n00:12:34.620 --> 00:12:39.385\nSo what'll do is I'll copy simple4 and\nwe'll call it simple5 [LAUGH] .sh.\n\n258\n00:12:39.385 --> 00:12:41.350\nFive 5.sh and Return.\n\n259\n00:12:41.350 --> 00:12:43.690\nAnd we'll nano simple5.\n\n260\n00:12:43.690 --> 00:12:49.290\nAnd let's take a look at this.\n\n261\n00:12:49.290 --> 00:12:51.060\nWe'll go in here.\n\n262\n00:12:51.060 --> 00:12:54.630\nWe'll remove all these rhino,\nhippos, stuff like that.\n\n263\n00:12:54.630 --> 00:12:56.860\nAnd we'll just kinda get out of there.\n\n264\n00:12:56.860 --> 00:12:59.430\nAnd we'll say like what\nRonnie was talking about.\n\n265\n00:12:59.430 --> 00:13:00.670\nWhat do we do?\n\n266\n00:13:00.670 --> 00:13:06.960\nI can say one, two, three, but\nwhat happens when I get to 100, right?\n\n267\n00:13:06.960 --> 00:13:08.460\nNot that I would have\na list of 100 things.\n\n268\n00:13:08.460 --> 00:13:12.480\nBut for the sake of an argument here,\nfor demonstration purposes,\n\n269\n00:13:12.480 --> 00:13:15.610\nhow do I say 100 is one value,\nnot just one and hundred?\n\n270\n00:13:15.610 --> 00:13:20.290\nSo like I said,\nall you gotta do is go in here and\n\n271\n00:13:20.290 --> 00:13:22.935\nput quotations around your complex value.\n\n272\n00:13:22.935 --> 00:13:24.510\n[COUGH] Excuse me.\n\n273\n00:13:24.510 --> 00:13:27.450\nAnd then you can put in the next one.\n\n274\n00:13:27.450 --> 00:13:31.320\nBut if it's going to be complex it's\ngot to have those quotations around it.\n\n275\n00:13:31.320 --> 00:13:36.870\nSo if I was doing two hundred like that,\nthen three hundred.\n\n276\n00:13:40.010 --> 00:13:41.920\nSo on and so forth.\n\n277\n00:13:41.920 --> 00:13:43.266\nRight?\n[NOISE] Excuse me.\n\n278\n00:13:43.266 --> 00:13:49.970\nThat's what we wanted to do to let\nit know these are complex values.\n\n279\n00:13:49.970 --> 00:13:52.610\nLet's put it in there, and I'll just.\n\n280\n00:13:52.610 --> 00:13:54.650\nThe next value is, so on.\n\n281\n00:13:54.650 --> 00:13:58.770\nJust make it easy for\nus to play around with this.\n\n282\n00:13:58.770 --> 00:14:01.200\nI'll save that.\nCtrl+X, chmod+X on simple5.\n\n283\n00:14:01.200 --> 00:14:02.070\nAnd now let's run it.\n\n284\n00:14:02.070 --> 00:14:03.180\nAnd see, there it goes.\n\n285\n00:14:05.170 --> 00:14:09.220\nNow it sees that that's 100, 200, and 300.\n\n286\n00:14:09.220 --> 00:14:14.230\nOtherwise if we left those out,\nit would be a longer list of values that\n\n287\n00:14:14.230 --> 00:14:20.020\ndidn't make a whole lot of sense,\nbecause it didn't see them as grouped.\n\n288\n00:14:20.020 --> 00:14:24.620\nNow Daniel, if I create something\nlike an array or a variable,\n\n289\n00:14:24.620 --> 00:14:28.030\ncan it also loop through those arrays or\nvariables?\n\n290\n00:14:28.030 --> 00:14:29.300\n>> Yes, it can.\nIt can loop through just\n\n291\n00:14:29.300 --> 00:14:30.530\nabout anything you give it.\n\n292\n00:14:30.530 --> 00:14:34.000\nSo loops in general are very,\nvery flexible.\n\n293\n00:14:34.000 --> 00:14:38.830\nThey can work with just about\neverything that we play around with.\n\n294\n00:14:38.830 --> 00:14:41.510\nIf I wanted to read\nfrom a variable itself,\n\n295\n00:14:41.510 --> 00:14:45.430\nI would just have to kind of\ndeclare that variable in there.\n\n296\n00:14:45.430 --> 00:14:49.060\nAnd it's easier to show you\nthan it is to tell you.\n\n297\n00:14:49.060 --> 00:14:50.430\n>> [LAUGH]\n>> So let's take a look at that,\n\n298\n00:14:50.430 --> 00:14:55.700\nlet's create a script that does that, and\nsee what's going on, how that works out.\n\n299\n00:14:55.700 --> 00:14:59.760\nSo let's jump back down here,\nclear our screen out real quick,\n\n300\n00:14:59.760 --> 00:15:03.530\nand we'll nano, we'll call it simple6.\n\n301\n00:15:03.530 --> 00:15:07.720\nGive it the bash, and let's see here.\n\n302\n00:15:07.720 --> 00:15:09.790\nSo, let's name a variable.\n\n303\n00:15:09.790 --> 00:15:13.133\nWe'll just call it list.\n\n304\n00:15:13.133 --> 00:15:16.890\nSo, I have a list of variables.\n\n305\n00:15:16.890 --> 00:15:21.130\nList equals and also one,\ntwo, three, four, and five.\n\n306\n00:15:21.130 --> 00:15:22.300\nLike so.\n\n307\n00:15:22.300 --> 00:15:23.120\nAll right.\n\n308\n00:15:23.120 --> 00:15:24.710\nSo, I've got my variable.\n\n309\n00:15:24.710 --> 00:15:29.710\nIt is basically one long string\nof five different words.\n\n310\n00:15:29.710 --> 00:15:31.150\nAll right, so now what do I do?\n\n311\n00:15:31.150 --> 00:15:34.770\nI gotta put that into my for\nloop so it can read it.\n\n312\n00:15:34.770 --> 00:15:40.980\nSo I gotta start my for loop, and\nwe'll say for var1 in and then,\n\n313\n00:15:40.980 --> 00:15:44.660\nright, now this would be the normally\nthe part where we put our list of stuff.\n\n314\n00:15:44.660 --> 00:15:48.176\nI've already got a variable\nwith a list of stuff in it.\n\n315\n00:15:48.176 --> 00:15:52.180\nSo, I can just chuck that in there.\n\n316\n00:15:52.180 --> 00:15:53.027\nI can just reference that variable.\n\n317\n00:15:53.027 --> 00:15:56.888\nThe variable's called list,\nso I can say, list like that,\n\n318\n00:15:56.888 --> 00:16:01.281\nreferencing the variable,\nnow I'll be able to see every one of those\n\n319\n00:16:01.281 --> 00:16:05.840\nDifferent items inside of that\nvariable and do the loop normally.\n\n320\n00:16:05.840 --> 00:16:10.300\nSo at this point we would just do\nthe do and then, let's see here,\n\n321\n00:16:10.300 --> 00:16:12.230\nwe'll just do another echo here.\n\n322\n00:16:12.230 --> 00:16:16.380\nEcho, the next number is, and then\n\n323\n00:16:18.950 --> 00:16:23.190\nsay whatever the variable is, so var1.\n\n324\n00:16:24.490 --> 00:16:27.330\nBadabing, and then done.\n\n325\n00:16:27.330 --> 00:16:30.060\nAnd now that's what's going on.\n\n326\n00:16:30.060 --> 00:16:32.125\nSo right here we have for var1,\nthat's our normal variable.\n\n327\n00:16:32.125 --> 00:16:35.245\nWhen it his here,\ninstead of making that list,\n\n328\n00:16:35.245 --> 00:16:39.770\nI can just reference the variable\nthat I've created before the for or\n\n329\n00:16:39.770 --> 00:16:43.760\nanywhere else,\njust as long as it can see above it.\n\n330\n00:16:43.760 --> 00:16:46.130\nIt will be able to reference\nthat variable and work with it,\n\n331\n00:16:46.130 --> 00:16:50.110\nwhatever value is inside there, if I have\na list items, then that's what it will do.\n\n332\n00:16:50.110 --> 00:16:51.780\nSo let's say this and see if it works.\n\n333\n00:16:54.340 --> 00:16:59.666\nDo the ch mod plus x for simple 6,\n\n334\n00:16:59.666 --> 00:17:03.481\nand then run simple6.\n\n335\n00:17:03.481 --> 00:17:04.021\nAnd there you go.\n\n336\n00:17:04.021 --> 00:17:07.019\nThe next one is one, the next number\nis two, next number is three and\n\n337\n00:17:07.019 --> 00:17:07.930\nfour and so on.\n\n338\n00:17:07.930 --> 00:17:11.760\nReaches the end of the list, exits\nthe loop, takes you back to the prompt.\n\n339\n00:17:11.760 --> 00:17:16.280\nRuns any other commands if you had\nthem and then you're good to go.\n\n340\n00:17:16.280 --> 00:17:17.610\n>> Now Daniel, that's pretty impressive.\n\n341\n00:17:17.610 --> 00:17:20.630\nThe very fact that it can actually read\nvariables, it can read the string or\n\n342\n00:17:20.630 --> 00:17:22.780\nthe list of things that\nwe've also created there.\n\n343\n00:17:22.780 --> 00:17:26.550\nBut what if I needed for, let's say,\nfor example, I wanted to run\n\n344\n00:17:26.550 --> 00:17:29.610\na command to actually call up, let's say,\nvalues that I'd find inside of a file.\n\n345\n00:17:29.610 --> 00:17:33.880\nCan it actually reach into the file and\nalso run through that with the loop?\n\n346\n00:17:33.880 --> 00:17:35.900\n>> Yeah.\nThat's really a powerful thing, right.\n\n347\n00:17:35.900 --> 00:17:40.872\nThat we can actually create a file\nthat has variables inside of it, and\n\n348\n00:17:40.872 --> 00:17:43.920\nthen run whatever our values inside of it.\n\n349\n00:17:43.920 --> 00:17:47.108\nSay that's my variable,\ncall to that file and have it work,\n\n350\n00:17:47.108 --> 00:17:49.181\nhave the for-loop work through that.\n\n351\n00:17:49.181 --> 00:17:53.043\nSo it's starting to get a little\nmore complex with our ability, but\n\n352\n00:17:53.043 --> 00:17:57.718\nit's nice cuz it gives us flexibility that\nI can create text files that my loop will\n\n353\n00:17:57.718 --> 00:18:00.633\nactually reference using\na variable inside of it,\n\n354\n00:18:00.633 --> 00:18:03.591\ngiving me a lot of power\nto work in that way, right.\n\n355\n00:18:03.591 --> 00:18:07.742\nSo I can just create new text files\nanytime I wanna modify the script.\n\n356\n00:18:07.742 --> 00:18:10.017\nEspecially when it comes\nto those type of variables,\n\n357\n00:18:10.017 --> 00:18:12.491\nI just create a new text files\nwith those variables in it and\n\n358\n00:18:12.491 --> 00:18:15.120\nthen go into the script and\nsay, here's the new text file.\n\n359\n00:18:15.120 --> 00:18:15.940\nRight, so very very nice.\n\n360\n00:18:15.940 --> 00:18:17.110\nSo how's that work out?\n\n361\n00:18:17.110 --> 00:18:18.810\nLet's take a look at it here.\n\n362\n00:18:18.810 --> 00:18:21.440\nLet's create a script and\nsee what it does.\n\n363\n00:18:21.440 --> 00:18:24.340\nWe will call this one,\n\n364\n00:18:24.340 --> 00:18:29.600\nhell let's keep up with\nthe old simple idea.\n\n365\n00:18:29.600 --> 00:18:34.144\nSimple7.sh go bin\n\n366\n00:18:34.144 --> 00:18:39.210\nbash, And we'll say, let's see here.\n\n367\n00:18:39.210 --> 00:18:41.440\nWe need to name the variable first, right?\n\n368\n00:18:41.440 --> 00:18:43.440\nThat's the first thing we wanna do.\n\n369\n00:18:43.440 --> 00:18:45.440\nSo we'll say list, now this time\ninstead of getting it to list,\n\n370\n00:18:45.440 --> 00:18:46.780\nwe're gonna give it a text file.\n\n371\n00:18:46.780 --> 00:18:53.590\nSo we'll say equals and it will, we'll\ncall it numbers.txt like that, right?\n\n372\n00:18:53.590 --> 00:19:00.240\nSo it's actually going to look for\na file name inside of here.\n\n373\n00:19:00.240 --> 00:19:03.890\nSo then we'll do our for, we'll say var1,\n\n374\n00:19:03.890 --> 00:19:07.453\nin, then we'll say what\nare we going to do?\n\n375\n00:19:07.453 --> 00:19:11.321\nWe're actually going to run the cat\ncommand to look inside of our\n\n376\n00:19:11.321 --> 00:19:15.690\ntext file and then use that output,\nso we're getting command output and\n\n377\n00:19:15.690 --> 00:19:20.730\nputting it into our variable so that our\nfor-loop can run against that output.\n\n378\n00:19:20.730 --> 00:19:22.690\nKind of cool stuff here actually.\n\n379\n00:19:22.690 --> 00:19:23.590\nSo let's see here,\n\n380\n00:19:23.590 --> 00:19:29.440\nwe do that in kinda the same way that we\nworked with Command output with variables.\n\n381\n00:19:29.440 --> 00:19:32.570\nRight?\nWe just do the good old, like that, and\n\n382\n00:19:32.570 --> 00:19:37.550\nthen run the command so it would\nbe cat like that, and then tell it\n\n383\n00:19:37.550 --> 00:19:43.040\nthe variable that we need,\nwhich our variable will be a list.\n\n384\n00:19:43.040 --> 00:19:44.449\nSo dollar sign, list, and\nthen close out our quotes like so.\n\n385\n00:19:44.449 --> 00:19:46.697\nAnd that should be it.\n\n386\n00:19:46.697 --> 00:19:48.287\nWe should just be able to do do, and\nthen what do we want to do, we say echo,\n\n387\n00:19:48.287 --> 00:19:49.367\nthe next number in the text,\nsame kind of thing.\n\n388\n00:19:49.367 --> 00:19:54.664\nThe next number is and\n\n389\n00:19:54.664 --> 00:19:59.078\nthen say whatever\n\n390\n00:19:59.078 --> 00:20:06.144\nthe variable is so, var1.\n\n391\n00:20:06.144 --> 00:20:07.124\nLike so.\n\n392\n00:20:07.124 --> 00:20:12.830\nClose my quotes, make sure my syntax\nis correct, get done in there and\n\n393\n00:20:12.830 --> 00:20:17.663\nnow, I do need to go in here and\nactually create a text file,\n\n394\n00:20:17.663 --> 00:20:22.050\nreally quickly, called numbers so\nthis will work.\n\n395\n00:20:22.050 --> 00:20:22.760\nLet's do that.\n\n396\n00:20:22.760 --> 00:20:25.130\nAlt Ctrl O, save that, Ctrl X.\n\n397\n00:20:25.130 --> 00:20:28.619\nCh mod so\nit'll work with array + x simple 7.sh.\n\n398\n00:20:28.619 --> 00:20:32.710\nNow let's create that\ntext file really quickly.\n\n399\n00:20:32.710 --> 00:20:33.580\nNumbers.\n\n400\n00:20:33.580 --> 00:20:36.420\nActually, I think I might\nactually already have that here.\n\n401\n00:20:36.420 --> 00:20:37.780\nLet me look here.\n\n402\n00:20:37.780 --> 00:20:39.540\nNumbers, numbers, numbers,\nnumbers, numbers.\n\n403\n00:20:39.540 --> 00:20:40.250\nDo I have that?\n\n404\n00:20:40.250 --> 00:20:41.330\nNope.\n\n405\n00:20:41.330 --> 00:20:43.730\nOkay, we gotta go back in the loops,\nso let's do that.\n\n406\n00:20:43.730 --> 00:20:48.740\nNano numbers.txt, and\njust create your list, right.\n\n407\n00:20:48.740 --> 00:20:53.762\nSo one, two, actually yeah, two,\n\n408\n00:20:53.762 --> 00:20:58.136\nthree, four, five, like so.\n\n409\n00:21:01.577 --> 00:21:03.430\nThere we go, now we should have\nour numbers.txt, there it is.\n\n410\n00:21:03.430 --> 00:21:05.720\nLet's see if I,\nhopefully I put the list correctly.\n\n411\n00:21:05.720 --> 00:21:07.886\nI can never remember if\nit goes out long ways or\n\n412\n00:21:07.886 --> 00:21:12.460\nif you list them one by one, so it will\nbe fun to see if this actually works.\n\n413\n00:21:14.040 --> 00:21:20.770\nGonna run simple7, seven,\nthere we go, and there we go.\n\n414\n00:21:20.770 --> 00:21:24.440\nSo it looked inside of our text file,\nfound the first value, and actually,\n\n415\n00:21:24.440 --> 00:21:25.050\nhow did we do that?\n\n416\n00:21:25.050 --> 00:21:26.240\nBy running a command.\n\n417\n00:21:26.240 --> 00:21:30.320\nSo we used the command output to generate\nthe value of our variables throughout\n\n418\n00:21:30.320 --> 00:21:33.820\nthat array or\nthat list that we wanted to create.\n\n419\n00:21:33.820 --> 00:21:38.380\nSo a lot of different ways and a lot of\nflexibility when it comes to for-loop.\n\n420\n00:21:38.380 --> 00:21:42.850\nSo you'll start seeing some really\npractical ways in which we use this.\n\n421\n00:21:42.850 --> 00:21:46.490\nAnd actually that's the next thing I want\nto show you is, okay it's nice to see\n\n422\n00:21:46.490 --> 00:21:49.750\nthe theory but sometimes it's better\nto show you some practicality.\n\n423\n00:21:49.750 --> 00:21:51.491\nSo how does this actually work, right.\n\n424\n00:21:51.491 --> 00:21:53.540\nSo practical example here.\n\n425\n00:21:53.540 --> 00:21:54.360\nI should have one here,\n\n426\n00:21:54.360 --> 00:21:57.949\nit should be called four_backup.sh,\nand that's this guy right here.\n\n427\n00:21:57.949 --> 00:22:02.540\nLet's take a look at the script,\nsee what it does,\n\n428\n00:22:02.540 --> 00:22:07.510\nand then see what kind of\noutput we should get from that.\n\n429\n00:22:07.510 --> 00:22:09.910\nSo let's, nano into four_backup.sh and\ntake a look in here.\n\n430\n00:22:09.910 --> 00:22:11.510\nSo what's going on?\n\n431\n00:22:11.510 --> 00:22:14.630\nThe first thing I'm doing, obviously I was\nin declaring this a script by bin bash.\n\n432\n00:22:14.630 --> 00:22:17.410\nThe next thing I'm doing is I'm\ncreating a couple of variables.\n\n433\n00:22:17.410 --> 00:22:20.290\nShould be easy stuff.\n\n434\n00:22:20.290 --> 00:22:23.200\nWe've worked with this,\nwe've been down this road a million times.\n\n435\n00:22:23.200 --> 00:22:25.930\nAll I've done is create\nthree variables here and\n\n436\n00:22:25.930 --> 00:22:28.660\nI've created basically some path names.\n\n437\n00:22:28.660 --> 00:22:31.510\nThese are some paths to\ndifferent directories.\n\n438\n00:22:31.510 --> 00:22:32.720\nSensitive and backup.\n\n439\n00:22:32.720 --> 00:22:36.660\nAnd then I've created one for\ncreating backup.lists.\n\n440\n00:22:36.660 --> 00:22:39.020\nSo what I'm doing is taking\nthis value right here and\n\n441\n00:22:39.020 --> 00:22:43.220\nI'm referencing it in this value so\nI don't have to type it in again and\n\n442\n00:22:43.220 --> 00:22:46.760\nthen creating the rest\nof it in backup.txt.\n\n443\n00:22:46.760 --> 00:22:47.930\nSo three variables.\n\n444\n00:22:48.940 --> 00:22:51.590\nBasically giving you directory and\nfile paths, okay?\n\n445\n00:22:51.590 --> 00:22:54.120\nThen we come here.\n\n446\n00:22:54.120 --> 00:22:56.430\nI want to say LS.\n\n447\n00:22:56.430 --> 00:23:00.720\nSo I'm running a command to list\nwhatever is in this variable.\n\n448\n00:23:00.720 --> 00:23:02.850\nWhat's in that variable?\n\n449\n00:23:02.850 --> 00:23:03.860\nWell, it's a directory.\n\n450\n00:23:03.860 --> 00:23:06.940\nSo I want to list what's\ninside of sensitive and\n\n451\n00:23:06.940 --> 00:23:11.510\nthen I want to redirect that into back\nlist, which is this guy right here.\n\n452\n00:23:11.510 --> 00:23:13.470\nSo I want to create a backup.txt.\n\n453\n00:23:13.470 --> 00:23:21.470\nBased off of the output generated from\nlisting whatever's in this directory.\n\n454\n00:23:21.470 --> 00:23:22.140\nThen I go into my loop.\n\n455\n00:23:22.140 --> 00:23:25.360\nSo, for i, I just used i as\na quick fast variable to use.\n\n456\n00:23:25.360 --> 00:23:26.250\nSo, for i in, and\n\n457\n00:23:26.250 --> 00:23:32.070\nI did just like what we did before created\nthat back.list right, whatever's there.\n\n458\n00:23:32.070 --> 00:23:33.460\nSo, I've created the list.\n\n459\n00:23:33.460 --> 00:23:38.879\nBy doing this ls and I'm going to cat\nit and I'm going to do backing up file,\n\n460\n00:23:38.879 --> 00:23:44.040\nand it's going to tell me what it's\ndoing and it's actually going to do\n\n461\n00:23:44.040 --> 00:23:49.746\na copy command and it's going to copy\nthis file to this file and name it .back.\n\n462\n00:23:49.746 --> 00:23:52.797\nOkay and so hopefully that makes sense,\nbasically, this is a backup script.\n\n463\n00:23:52.797 --> 00:23:56.918\nI'm creating a backup of one directory,\nwhatever's In one directory into a text\n\n464\n00:23:56.918 --> 00:23:59.981\na file and I'm backing that up\nto another place, all right?\n\n465\n00:23:59.981 --> 00:24:02.610\nAnd then once it's done it should\nsay files backed up successfully.\n\n466\n00:24:02.610 --> 00:24:04.480\nHopefully that made sense to you, but\n\n467\n00:24:04.480 --> 00:24:07.450\nthis is a practical way in which\nwe would use a for Or loop.\n\n468\n00:24:07.450 --> 00:24:09.020\nRemember, it's a repetitive process.\n\n469\n00:24:09.020 --> 00:24:14.110\nInstead of me having to go every day and\nCD into this directory,\n\n470\n00:24:14.110 --> 00:24:17.900\ndo an LS, generate that output,\nthen copy it over to another directory,\n\n471\n00:24:17.900 --> 00:24:20.340\nname it .bak so\nthat I've got a backup of it.\n\n472\n00:24:20.340 --> 00:24:24.910\nI let the script do it for me, and\nall I have to do is run the script, right?\n\n473\n00:24:24.910 --> 00:24:25.979\nSo very, very, very simple.\n\n474\n00:24:27.400 --> 00:24:30.480\nLet's get out of here and give it a shot.\n\n475\n00:24:30.480 --> 00:24:31.490\nDot for dot sh.\n\n476\n00:24:31.490 --> 00:24:36.920\nAnd there we go, generated a lot of\noutput for us.It's Backing up file,\n\n477\n00:24:36.920 --> 00:24:41.160\nso it looked inside of there it\nfound these different files, and\n\n478\n00:24:41.160 --> 00:24:46.550\nthen it backed them up to\nwherever it was that I wanted.\n\n479\n00:24:46.550 --> 00:24:48.370\nSo let's, I think there's a backup.\n\n480\n00:24:48.370 --> 00:24:50.170\nSo let's, I think it backs it up here.\n\n481\n00:24:50.170 --> 00:24:51.490\nYeah, there you go.\n\n482\n00:24:51.490 --> 00:24:56.680\nCD backup, do a ls, there's all my files,\nand you'll notice they\n\n483\n00:24:56.680 --> 00:25:01.775\nall have the extension .back on the end,\nexcept this one, backup.txt.\n\n484\n00:25:01.775 --> 00:25:05.385\nWhich is the file we generated so\n\n485\n00:25:05.385 --> 00:25:10.725\nthat we would have the variable input for\nour for loop.\n\n486\n00:25:10.725 --> 00:25:13.785\n>> Now Daniel, when we start taking\na look at the idea of using this in\n\n487\n00:25:13.785 --> 00:25:16.525\nit looks very powerful,\nlooks like it works fairly easily.\n\n488\n00:25:16.525 --> 00:25:18.345\nEven I understood it,\nat least the most basic of it.\n\n489\n00:25:18.345 --> 00:25:21.595\nBut I also understand that we can\nactually run loops in like C.\n\n490\n00:25:21.595 --> 00:25:23.820\nIs this the same thing?\n\n491\n00:25:23.820 --> 00:25:25.030\nIt's not the same thing, okay?\n\n492\n00:25:25.030 --> 00:25:30.990\nSo, what Ronnie's talking about is C\nstyle fore loops, you're going okay?\n\n493\n00:25:30.990 --> 00:25:32.260\nWhat does that mean?\n\n494\n00:25:32.260 --> 00:25:35.390\nWhat that means is C is\na very powerful programming\n\n495\n00:25:35.390 --> 00:25:39.980\nlanguage it's a programming language\nthat allows people familiar with it,\n\n496\n00:25:39.980 --> 00:25:43.100\nespecially if you're a developer\ninside of a unex or Linux system.\n\n497\n00:25:43.100 --> 00:25:47.480\nA lot of those guys Are C, Pearl and\nPython writers, and Java as well.\n\n498\n00:25:47.480 --> 00:25:52.240\nAnd, when the come over to Bash, or\nthey get into a Bash, they're like,\n\n499\n00:25:52.240 --> 00:25:56.830\nit'd be nice to be able to do some of the\nstuff that I do in C in the Bash style.\n\n500\n00:25:56.830 --> 00:26:00.260\nRemember when Brian Fox created\nBash he liked the C shell.\n\n501\n00:26:00.260 --> 00:26:04.490\nHe liked a lot of stuff about it,\nso he wanted to import a lot of\n\n502\n00:26:04.490 --> 00:26:08.430\nthe mechanisms or\nat least the way it did it to mimic that.\n\n503\n00:26:08.430 --> 00:26:12.100\nWe wanted to mimic the way\nC did some things.\n\n504\n00:26:12.100 --> 00:26:13.290\nThis is one of those ideas.\n\n505\n00:26:13.290 --> 00:26:17.500\nSo, we said we've got four loops we've got\nthe ability to work through a list but\n\n506\n00:26:17.500 --> 00:26:20.900\nwhat if I wanted to work like\na more traditional style loop?\n\n507\n00:26:20.900 --> 00:26:22.710\nThat's the one thing I\ndidn't tell you about.\n\n508\n00:26:22.710 --> 00:26:25.950\nFour loops about regular bashed\nfour loops is they don't work like\n\n509\n00:26:25.950 --> 00:26:27.130\na traditional loop.\n\n510\n00:26:27.130 --> 00:26:30.840\nYou give it list of things\nto iterate through.\n\n511\n00:26:30.840 --> 00:26:33.330\nAnd once it's done, it exits.\n\n512\n00:26:33.330 --> 00:26:37.810\nMost loops, you're giving it a statement\nand saying, while this is true,\n\n513\n00:26:37.810 --> 00:26:41.100\nor until this is true,\nthen do something and then you change\n\n514\n00:26:41.100 --> 00:26:44.630\nthe value of what makes the statement\ntrue, and that's what stops it.\n\n515\n00:26:44.630 --> 00:26:47.600\nWith four we didn't have that.\n\n516\n00:26:47.600 --> 00:26:49.630\nIt just looks through each\none of the iterations,\n\n517\n00:26:49.630 --> 00:26:51.100\nonce it reached the end, it's done.\n\n518\n00:26:51.100 --> 00:26:55.070\nWith C style for loops,\nwe get that functionality back.\n\n519\n00:26:55.070 --> 00:27:01.420\nWe can use for loops in that way and it's\nstructured more like C so guys that work\n\n520\n00:27:01.420 --> 00:27:05.300\nin C can easily migrate over and start\nusing for loops in their shell scripts.\n\n521\n00:27:05.300 --> 00:27:09.840\nSo, they don't have to create\na whole compiled program that can\n\n522\n00:27:09.840 --> 00:27:11.660\nrun scripting just like we do.\n\n523\n00:27:11.660 --> 00:27:14.860\nAnd without making a program.\n\n524\n00:27:14.860 --> 00:27:16.810\nSo, why is that important?\n\n525\n00:27:16.810 --> 00:27:18.550\nWhy is that a good thing?\n\n526\n00:27:18.550 --> 00:27:20.490\nWhy is that something we would want to do?\n\n527\n00:27:20.490 --> 00:27:23.570\nWell A, it is easy to do, and\nit shrinks down your code, and\n\n528\n00:27:23.570 --> 00:27:28.200\nit gets us away from having to\nuse the regular style Fore loop,\n\n529\n00:27:28.200 --> 00:27:31.510\nmaybe I don't want to list out everything,\nmaybe I just want to say do something\n\n530\n00:27:31.510 --> 00:27:35.600\nuntil you reach a conditional state and\nthen exit out.\n\n531\n00:27:35.600 --> 00:27:37.360\nSo how does that look, how does that work?\n\n532\n00:27:37.360 --> 00:27:38.940\nLet's jump in a take a look here.\n\n533\n00:27:38.940 --> 00:27:42.290\nI actually do have one that's ready\nto rock, so we can see how that is.\n\n534\n00:27:42.290 --> 00:27:45.192\nLet me get out of here and\nback into the loops.\n\n535\n00:27:45.192 --> 00:27:52.285\nAnd that one is for_backup.sh,\n\n536\n00:27:52.285 --> 00:27:56.630\nso for_, if I can nano first,\n\n537\n00:27:56.630 --> 00:28:01.050\nprobably help, for_backup.sh.\n\n538\n00:28:01.050 --> 00:28:03.450\nWell that's our guy right here.\n\n539\n00:28:03.450 --> 00:28:04.970\nThat's the wrong loop.\n\n540\n00:28:04.970 --> 00:28:06.730\nI put the wrong one in there.\n\n541\n00:28:06.730 --> 00:28:09.520\nI'm looking in the wrong area, my bad.\n\n542\n00:28:09.520 --> 00:28:11.960\nLet's try this again, we get out of here.\n\n543\n00:28:11.960 --> 00:28:12.540\nWhich one is it?\n\n544\n00:28:12.540 --> 00:28:13.680\nIt's the c style.\n\n545\n00:28:13.680 --> 00:28:14.703\nIt is called c style.\n\n546\n00:28:14.703 --> 00:28:15.218\nLook at me.\n\n547\n00:28:15.218 --> 00:28:17.860\n>> [LAUGH]\n>> I'm trying to get ahead of myself here.\n\n548\n00:28:17.860 --> 00:28:20.690\nSo, let's do that.\n\n549\n00:28:20.690 --> 00:28:21.209\nNano the c style.\n\n550\n00:28:23.520 --> 00:28:24.550\nFor, there we go.\n\n551\n00:28:25.640 --> 00:28:27.990\nSo not a whole lot going on here as well,\n\n552\n00:28:27.990 --> 00:28:31.020\nbut definitely looks different\nthan our regular for loop.\n\n553\n00:28:31.020 --> 00:28:31.770\nSo, what's happening?\n\n554\n00:28:31.770 --> 00:28:37.020\nWhat we're saying is four, and\nthen we're declaring a variable, okay.\n\n555\n00:28:37.020 --> 00:28:39.140\nThat's the first thing we're doing.\n\n556\n00:28:39.140 --> 00:28:40.860\nSo we use these open parentheses,\n\n557\n00:28:40.860 --> 00:28:45.620\nthat's the syntax of a C-style for\nloop, because that's how C does this.\n\n558\n00:28:45.620 --> 00:28:47.130\nAnd it's mimicking that.\n\n559\n00:28:47.130 --> 00:28:49.250\nSo, we open parenthesis, open parenthesis,\n\n560\n00:28:49.250 --> 00:28:52.650\nand then we give it whatever variables\nthat we would like to run against it.\n\n561\n00:28:52.650 --> 00:28:54.760\nNormally, this is not\ngoing to be very complex.\n\n562\n00:28:54.760 --> 00:28:57.930\nThis is normally gonna be probably\nabout what you're seeing here.\n\n563\n00:28:57.930 --> 00:29:01.030\nIt usually stays pretty simple\nbecause it's the command\n\n564\n00:29:01.030 --> 00:29:04.200\nstructure inside of there that\nnormally is more complex.\n\n565\n00:29:04.200 --> 00:29:07.040\nAnd then we reach a value,\nbecause that's what we're doing.\n\n566\n00:29:07.040 --> 00:29:10.070\nWe're creating a conditional state.\n\n567\n00:29:10.070 --> 00:29:13.670\nThat the loop needs to\nreach before it will stop.\n\n568\n00:29:13.670 --> 00:29:16.360\nSo, it will iterate and then stop.\n\n569\n00:29:16.360 --> 00:29:17.870\nSo, let's take a look at this.\n\n570\n00:29:17.870 --> 00:29:18.840\nIt says a equals one.\n\n571\n00:29:18.840 --> 00:29:21.010\nThat's our variable a equaling one.\n\n572\n00:29:21.010 --> 00:29:22.890\nYes there are spaces in there.\n\n573\n00:29:22.890 --> 00:29:27.010\nIt is OK to do that inside\nof this type of environment.\n\n574\n00:29:27.010 --> 00:29:29.810\nThen we have a is less than or\nequal to 11.\n\n575\n00:29:29.810 --> 00:29:31.730\nSo, what's happening there?\n\n576\n00:29:31.730 --> 00:29:33.810\nThat is the condition that I want to meet.\n\n577\n00:29:34.870 --> 00:29:38.520\nSo, we've got our variables, we got our\ncondition, and then we have our increment.\n\n578\n00:29:38.520 --> 00:29:43.940\nOur incrementation or our iteration.\n\n579\n00:29:43.940 --> 00:29:45.610\niteration, yeah.\nThings that are working against the loop,\n\n580\n00:29:45.610 --> 00:29:48.770\nso that it knows how\nmany times to iterate.\n\n581\n00:29:48.770 --> 00:29:50.940\nWhat does it do every time I iterate?\n\n582\n00:29:50.940 --> 00:29:53.700\nI increment at least by one with this ++.\n\n583\n00:29:53.700 --> 00:29:54.900\nWe saw that before.\n\n584\n00:29:54.900 --> 00:29:59.160\nSo, if I do the ++,\nit's basically a shorthand for\n\n585\n00:29:59.160 --> 00:30:02.200\nadd one to whatever this variable is.\n\n586\n00:30:02.200 --> 00:30:04.260\nAnd normally it is going to be a numbers.\n\n587\n00:30:04.260 --> 00:30:07.140\nIt's not going to be strings usually.\n\n588\n00:30:07.140 --> 00:30:08.610\nSo, that's why this example.\n\n589\n00:30:08.610 --> 00:30:11.250\nSo, basically we're saying a = 1 and\nthat a is less than or\n\n590\n00:30:11.250 --> 00:30:14.430\nequal to our a is less than or\nequal to 11.\n\n591\n00:30:14.430 --> 00:30:16.370\nGo through iterations add one to it.\n\n592\n00:30:16.370 --> 00:30:20.940\nSo, if it equals one, the next\niteration will add one, it'll be two.\n\n593\n00:30:20.940 --> 00:30:28.470\nIt'll still look here and\nfind that condition to be less than 11.\n\n594\n00:30:28.470 --> 00:30:32.120\nSo, because of that it'll do whatever's\nbelow here under the do part, and\n\n595\n00:30:32.120 --> 00:30:36.450\nthen increment it by 1, it'll be 3,\nit's still less than 11,\n\n596\n00:30:36.450 --> 00:30:41.060\nit's gonna continue to do that until\nwe reach the end of the statement.\n\n597\n00:30:41.060 --> 00:30:45.660\nSo, hopefully that's making sense,\nlet's see how it works.\n\n598\n00:30:45.660 --> 00:30:50.000\nSo, if I just ./C-style Ste, ste while.\n\n599\n00:30:50.000 --> 00:30:51.022\nThere we go.\n\n600\n00:30:51.022 --> 00:30:52.050\n>> [LAUGH]\n>> For.\n\n601\n00:30:52.050 --> 00:30:53.310\nThere we go.\nAnd there it goes.\n\n602\n00:30:53.310 --> 00:30:54.820\nIt ran through the loop.\n\n603\n00:30:54.820 --> 00:30:58.970\nSo, it said counting is fun one,\ncuz that's what a equaled.\n\n604\n00:30:58.970 --> 00:31:00.060\nAnd then it looked.\n\n605\n00:31:00.060 --> 00:31:01.420\nIs it still less than 11?\n\n606\n00:31:01.420 --> 00:31:01.930\nYes, it is.\n\n607\n00:31:01.930 --> 00:31:07.040\nSo, increment it by one and\ndo what's in the do section.\n\n608\n00:31:07.040 --> 00:31:10.020\nWhich is echo that variable out.\n\n609\n00:31:10.020 --> 00:31:12.720\nEcho counting is whatever the variable is.\n\n610\n00:31:12.720 --> 00:31:15.750\n2, so on and so forth with\nworking itself through the list.\n\n611\n00:31:15.750 --> 00:31:19.190\nOnce it reached the conditional state\nwhere it was less than or equal to 11.\n\n612\n00:31:19.190 --> 00:31:19.690\nThen it ended.\n\n613\n00:31:19.690 --> 00:31:22.380\nYou notice it didn't go to 12 and\nbeyond and so forth.\n\n614\n00:31:22.380 --> 00:31:23.670\nSo, that is a really nice way.\n\n615\n00:31:23.670 --> 00:31:27.770\nAnd we can use this type of thing\ninside of other loops we're\n\n616\n00:31:27.770 --> 00:31:31.860\ngonna look at later and work them together\nin a way so that we can nest loops.\n\n617\n00:31:31.860 --> 00:31:33.800\nIt's gonna be a lot of fun to see that.\n\n618\n00:31:33.800 --> 00:31:36.760\nBut for right now know that you\ncan do regular style loops.\n\n619\n00:31:36.760 --> 00:31:39.648\nAnd C style loops are like\na more traditional loop.\n\n620\n00:31:39.648 --> 00:31:42.529\n>> Now Daniel,\ncan we work with multiple variables?\n\n621\n00:31:42.529 --> 00:31:46.752\nDoing it with one variable in In\nterms of a equally one is fine but\n\n622\n00:31:46.752 --> 00:31:51.800\nwhat if I need an a equals one but b\nequals like, two or whatever it might be?\n\n623\n00:31:51.800 --> 00:31:53.067\n>> Yeah, yeah.\nSometimes you'll need multiple\n\n624\n00:31:53.067 --> 00:31:55.200\nvariables and work with that,\nit's just as easy as this.\n\n625\n00:31:55.200 --> 00:31:58.360\nYou'll notice that was\na really not complex switch.\n\n626\n00:31:58.360 --> 00:31:59.458\nIt's very simple and\n\n627\n00:31:59.458 --> 00:32:03.791\nworking with multiple variables is just as\neasy as basically adding the variables.\n\n628\n00:32:03.791 --> 00:32:07.532\nThere's only one thing you\nneed to know about using\n\n629\n00:32:07.532 --> 00:32:11.624\na multi-variable type of\nscript using the C style for.\n\n630\n00:32:11.624 --> 00:32:14.250\nSo let's take a look at that.\n\n631\n00:32:14.250 --> 00:32:20.290\nIf i do an ls, you'll notice I have\nC-style_multivar, so let's nano that.\n\n632\n00:32:20.290 --> 00:32:24.460\nC-style_multicar_for.sh.\n\n633\n00:32:24.460 --> 00:32:25.650\nAnd here we go.\n\n634\n00:32:25.650 --> 00:32:30.760\nSo, so far, right out of the gate,\nthis is identical to our previous script,\n\n635\n00:32:30.760 --> 00:32:33.745\nup until we add this second variable.\n\n636\n00:32:33.745 --> 00:32:37.395\nAnd all I had to do was put a comma there,\nbasically comma delimited.\n\n637\n00:32:37.395 --> 00:32:37.905\nThat's a value.\n\n638\n00:32:37.905 --> 00:32:40.145\nAs you add more you give it a comma and\n\n639\n00:32:40.145 --> 00:32:43.515\nthen whatever is next is\ngonna be your next variable.\n\n640\n00:32:43.515 --> 00:32:45.105\nSo I put a comma and\nthen add my next variable.\n\n641\n00:32:45.105 --> 00:32:47.165\nSo I have a variable a and variable b.\n\n642\n00:32:47.165 --> 00:32:47.745\nA equals one.\n\n643\n00:32:47.745 --> 00:32:49.015\nB equals 10.\n\n644\n00:32:49.015 --> 00:32:50.400\nEasy peasy, nothing too it.\n\n645\n00:32:50.400 --> 00:32:53.080\nI'm gonna jump the conditional for\n\n646\n00:32:53.080 --> 00:32:57.720\na second here, and\nI'm gonna go over here to our iterations.\n\n647\n00:32:57.720 --> 00:33:02.250\nSo, basically what I'm saying is,\nfor A as we iterate through,\n\n648\n00:33:02.250 --> 00:33:05.679\nadd one, but for B,\nI want you to subtract one.\n\n649\n00:33:07.730 --> 00:33:12.270\nSo again, the short hand plus,\nplus and minus, minus to add one.\n\n650\n00:33:12.270 --> 00:33:16.610\nI could do the long form\nversion of a plus one, but\n\n651\n00:33:16.610 --> 00:33:20.830\nwhy do that when I just do a plus,\nplus amd b inus minus?\n\n652\n00:33:20.830 --> 00:33:21.460\nSuper, super easy.\n\n653\n00:33:22.580 --> 00:33:24.200\nNow we'll come back here to the condition.\n\n654\n00:33:24.200 --> 00:33:27.510\nYou'll notice I only have one\nvariable in the conditional state.\n\n655\n00:33:27.510 --> 00:33:29.440\nIn the C style loops,\nyou can only have one condition.\n\n656\n00:33:29.440 --> 00:33:34.790\nYou can't have multiple conditions,\nbut that's not going to matter here.\n\n657\n00:33:34.790 --> 00:33:37.490\nIt's still going to do the same thing.\n\n658\n00:33:37.490 --> 00:33:39.380\nJust know that's how they work.\n\n659\n00:33:39.380 --> 00:33:43.420\nSo you can't put multiple\nconditions together in there,\n\n660\n00:33:43.420 --> 00:33:45.220\nthat's just not how it is.\n\n661\n00:33:45.220 --> 00:33:49.130\nUse one, make a condition about it and let\nthat be how you iterate through the loop.\n\n662\n00:33:49.130 --> 00:33:52.900\nAnd then other than that we're basically\nkind of doing the same thing other than\n\n663\n00:33:52.900 --> 00:33:57.560\nI'm saying math is fun and then echoing\nwhat ever a equals minus what our dash is,\n\n664\n00:33:57.560 --> 00:34:01.720\nit's not really a minus,\ndash whatever b equals.\n\n665\n00:34:01.720 --> 00:34:09.270\nSo we're gonna get both of those values\nas it works its way through the loop.\n\n666\n00:34:09.270 --> 00:34:10.476\nLet's do it.\nLet's see what it does.\n\n667\n00:34:10.476 --> 00:34:11.560\n./Cstyle_multivar.\n\n668\n00:34:11.560 --> 00:34:13.430\nThere you go.\n\n669\n00:34:13.430 --> 00:34:18.580\nSo it's saying for a, remember it\nstarted with one and it increments.\n\n670\n00:34:18.580 --> 00:34:21.280\nSo it should be 123456789 and 10.\n\n671\n00:34:21.280 --> 00:34:24.620\nAnd then B started at ten, and\nthis should be decrementing by one.\n\n672\n00:34:24.620 --> 00:34:25.291\nSo should be 10, 9, 8,\n7, 6, 5, 4, 3, 2, 1. And\n\n673\n00:34:25.291 --> 00:34:28.010\nthat's exactly what we see\nas the output that we get.\n\n674\n00:34:28.010 --> 00:34:31.670\nSee, that's exactly how would we\nwant it and it worked perfectly.\n\n675\n00:34:31.670 --> 00:34:36.980\nHopefully that made a lot of sense to you.\n\n676\n00:34:36.980 --> 00:34:42.120\nAnd now you can start to work with that\ninside of other loops later on as you,\n\n677\n00:34:42.120 --> 00:34:45.860\nnow is you know how they work, you'll\nstart seeing applications for that and\n\n678\n00:34:45.860 --> 00:34:51.060\nbuilding scripts based off of this type\nof scripting or looping in your own life.\n\n679\n00:34:51.060 --> 00:34:54.490\n>> All right, Daniel, thank you very\nmuch for those demonstrations there.\n\n680\n00:34:54.490 --> 00:34:57.500\nThe very fact is,\nremember that loop server, really, again,\n\n681\n00:34:57.500 --> 00:35:00.410\nwhere the power scripting\nis gonna end up being,\n\n682\n00:35:00.410 --> 00:35:02.330\nbecause we tend not just to\nneed run a script one time.\n\n683\n00:35:02.330 --> 00:35:05.560\nA lot of times there are going to be\nmulti-values that we have to run that same\n\n684\n00:35:05.560 --> 00:35:08.460\nexact script through and\nwe can either create multiple scripts,\n\n685\n00:35:08.460 --> 00:35:11.830\neach and every individual thing\nwe need to run it through.\n\n686\n00:35:11.830 --> 00:35:14.350\nOr, we can create things\nlike loops to help us out.\n\n687\n00:35:14.350 --> 00:35:18.318\nNot only, of course, can we create loops\ninside of bash, Dan also showed us\n\n688\n00:35:18.318 --> 00:35:22.534\nthe ability, of course, to use those\nC-style types of loops that will help us,\n\n689\n00:35:22.534 --> 00:35:26.192\nespecially when we are in the midst\nof trying to remember that same type\n\n690\n00:35:26.192 --> 00:35:29.990\nof programming language and get\neverything done the way that we need to.\n\n691\n00:35:29.990 --> 00:35:31.060\nDaniel, any last words here?\n\n692\n00:35:31.060 --> 00:35:33.129\nI think we have a lot more to go,\nbut looking at our time,\n\n693\n00:35:33.129 --> 00:35:34.640\nwe're kind of a little bit over, even.\n\n694\n00:35:34.640 --> 00:35:37.089\n>> Yeah,\nwe're a little bit over on our time and\n\n695\n00:35:37.089 --> 00:35:39.160\nwe have a few more loops to go through.\n\n696\n00:35:39.160 --> 00:35:43.300\nRonnie, I hope you'll join me back here,\nand I hope you'll join me back here.\n\n697\n00:35:43.300 --> 00:35:46.133\nWe'll take a look at some other types of\nloops that we have available to us inside\n\n698\n00:35:46.133 --> 00:35:47.930\nof the bash system, and\nhow we can work with them.\n\n699\n00:35:47.930 --> 00:35:49.530\nAnd they're a lot of fun.\n\n700\n00:35:49.530 --> 00:35:53.990\nIt's a lot of fun to play with these\nthings and be kind of a coder.\n\n701\n00:35:53.990 --> 00:35:54.510\n>> All right.\n\n702\n00:35:54.510 --> 00:35:57.991\nWell, thank you again Daniel for\nbeing with us, and thank you also for\n\n703\n00:35:57.991 --> 00:35:59.000\njoining us as well.\n\n704\n00:35:59.000 --> 00:36:01.660\nSigning off for ITpro TV, I'm Ronnie Wong.\n\n705\n00:36:01.660 --> 00:36:04.060\n>> And I'm Daniel Lowry.\n\n706\n00:36:04.060 --> 00:36:07.310\n>> And we'll see you next time.\n\n707\n00:36:07.310 --> 00:36:09.790\n[MUSIC]\n\n",
          "vimeoId": "146012332"
        },
        {
          "description": "In this episode, Ronnie and Daniel show how to use for loops from the BASH.  Many repeatable task that need to be automated can be handled by creating loops in scripting according to the guys.  They show multiple examples of loops to show how this may work.  They take a look into C-style loops and show a practical script to backup multiple files.",
          "length": "1757",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt2-111615-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt2-111615-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt2-111615-1-sm.jpg",
          "title": "Creating Loops in BASH Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.131 --> 00:00:14.681\nWelcome to another great episode\nright here on IT Pro TV.\n\n3\n00:00:14.681 --> 00:00:17.900\nI'm your host Ronnie Wong and today we're\ntaking a look at Bash and Scripting.\n\n4\n00:00:17.900 --> 00:00:22.690\nSpecifically though talking about\nthe idea here of working with well,\n\n5\n00:00:22.690 --> 00:00:26.110\nloops is what we're and\nlook at it, especially in bash.\n\n6\n00:00:26.110 --> 00:00:27.260\nAnd we already had a part one,\n\n7\n00:00:27.260 --> 00:00:31.860\nwhere we spent the entirety of that first\nepisode just talking about four, and\n\n8\n00:00:31.860 --> 00:00:35.370\nnow we're actually going a little\nfurther than that and you go, wow four.\n\n9\n00:00:35.370 --> 00:00:36.200\nThat's a lot of stuff to do.\n\n10\n00:00:36.200 --> 00:00:40.190\nBut, it's great because we actually have\nMr. Daniel Lowry here to help us out and\n\n11\n00:00:40.190 --> 00:00:44.640\nthere's actually even more commands\nthat we can use with loops.\n\n12\n00:00:44.640 --> 00:00:45.254\nDaniel what are we talking about here?\n\n13\n00:00:45.254 --> 00:00:49.637\n>> That's right, four is not the only\ngame in town when it comes to\n\n14\n00:00:49.637 --> 00:00:53.120\ncreating loops inside of\nyour bash environment.\n\n15\n00:00:53.120 --> 00:00:56.930\nNow remember, if you watched part one,\nyou'll remember that I said there\n\n16\n00:00:56.930 --> 00:00:59.430\nare different reasons for\nusing different types of loops.\n\n17\n00:00:59.430 --> 00:01:00.600\nLet's remember what a loop actually is.\n\n18\n00:01:00.600 --> 00:01:04.290\nIt's just a block of code\nthat does a repetitive task.\n\n19\n00:01:04.290 --> 00:01:06.130\nI trying to repeat over and\n\n20\n00:01:06.130 --> 00:01:09.060\nover again through a certain amount\nof iterations and get to a result.\n\n21\n00:01:09.060 --> 00:01:12.160\nOnce I've reached that result,\nthen I can exit the loop so\n\n22\n00:01:12.160 --> 00:01:14.570\nthat's what we're working with.\n\n23\n00:01:14.570 --> 00:01:16.320\nThat's why we do loops.\n\n24\n00:01:16.320 --> 00:01:18.070\nFour was really really good at that right.\n\n25\n00:01:18.070 --> 00:01:21.610\nWe had the ability to say here's a list of\nthings I want you to iterate through, and\n\n26\n00:01:21.610 --> 00:01:23.750\nonce you get to the end of it you're done,\nyou can stop the loop.\n\n27\n00:01:23.750 --> 00:01:25.760\nWe also had that c style four loop,\n\n28\n00:01:25.760 --> 00:01:28.350\nwhich is a little more like\na traditional style loop.\n\n29\n00:01:28.350 --> 00:01:33.220\nWhich kind of gave you a condition to\nreach before the loop would end, and\n\n30\n00:01:33.220 --> 00:01:37.270\nevery time it went through an iteration of\nthe loop, it would change a little bit,\n\n31\n00:01:37.270 --> 00:01:39.530\nand then finally reaching the end result.\n\n32\n00:01:39.530 --> 00:01:42.820\nSo that kinda moves us into\nwhat we're looking at today,\n\n33\n00:01:42.820 --> 00:01:45.790\nwhich is what's called a while loop, okay.\n\n34\n00:01:45.790 --> 00:01:51.594\nAnd this is a lot like maybe that\ntraditional C-style for-loop or\n\n35\n00:01:51.594 --> 00:01:53.310\neven And if-then statement.\n\n36\n00:01:53.310 --> 00:01:57.940\nRemember we talked about if-then, but\nwe kinda had, when we were looking at that\n\n37\n00:01:57.940 --> 00:02:04.630\nwas, if this is true, then do these\nstatements, right else do something else.\n\n38\n00:02:04.630 --> 00:02:06.620\nWell with a while loop, it's very similar.\n\n39\n00:02:06.620 --> 00:02:12.930\nWhat we're talking about here is, while\nthis is true do these statements, right.\n\n40\n00:02:12.930 --> 00:02:14.140\nAnd until it's done,\n\n41\n00:02:14.140 --> 00:02:18.770\nuntil you reach that condition I want\nyou to continue to do these statements.\n\n42\n00:02:18.770 --> 00:02:22.180\nAnd we're gonna add some iteration,\nthings of that nature so\n\n43\n00:02:22.180 --> 00:02:27.610\nthat we can actually have an end to out\nloop, but that's the basic idea right.\n\n44\n00:02:27.610 --> 00:02:32.460\nI have a condition that I need to\nmeet before the loop will end, and\n\n45\n00:02:32.460 --> 00:02:37.130\nuntil then this is gonna continue to do\nthe loop over and over and over again.\n\n46\n00:02:37.130 --> 00:02:40.660\nNow while means that while this is true,\n\n47\n00:02:40.660 --> 00:02:42.670\nthat's what you need to\nbury into your brain.\n\n48\n00:02:42.670 --> 00:02:45.340\nWhy would I wanna use a while loop?\n\n49\n00:02:45.340 --> 00:02:50.210\nBecause I already have\na condition that I've met, and\n\n50\n00:02:50.210 --> 00:02:53.530\nso while it's true, and until it's\ndifferent I'm gonna keep doing something.\n\n51\n00:02:53.530 --> 00:02:57.540\nAnd then I know it's gonna be a little\nconfusing because we're gonna move into\n\n52\n00:02:57.540 --> 00:03:01.530\na different type of loop that's very very\nsimilar, works kind of like the opposite.\n\n53\n00:03:01.530 --> 00:03:04.940\nBut we'll get to that,\nI won't give it away too soon, too early.\n\n54\n00:03:04.940 --> 00:03:07.830\nLet's tackle wild loops,\nsee how they work, and\n\n55\n00:03:07.830 --> 00:03:13.060\nwhat we can How we can use them\nin our looping strategies.\n\n56\n00:03:13.060 --> 00:03:15.120\nSo lets look into my computer and\nsee some wild loops.\n\n57\n00:03:15.120 --> 00:03:17.950\nFirst obviously we need\nto get the syntax down.\n\n58\n00:03:17.950 --> 00:03:21.260\nThat's the first thing\nwe need to start with.\n\n59\n00:03:21.260 --> 00:03:23.080\nI'm in my loop directory.\n\n60\n00:03:23.080 --> 00:03:27.470\nI have a few loops available to us so\nwe can play around with this.\n\n61\n00:03:27.470 --> 00:03:30.754\nLet's look at this one\nthat I call it infinite.\n\n62\n00:03:32.962 --> 00:03:35.993\nIt would probably help if I nano this.\n\n63\n00:03:35.993 --> 00:03:38.345\n[LAUGH] Infinite while.sh.\n\n64\n00:03:38.345 --> 00:03:42.420\nSo you'll understand the naming\nconvention there in just a second.\n\n65\n00:03:42.420 --> 00:03:46.140\nSo let's see here a very basic loop.\n\n66\n00:03:46.140 --> 00:03:50.440\nDoesn't require a lot of brain power to\nfigure out what's going on here, you just\n\n67\n00:03:50.440 --> 00:03:56.550\nneed to know the syntax behind it so\nthat you can understand what's happening.\n\n68\n00:03:56.550 --> 00:03:59.140\nAgain, obviously we start\nthe script with vin dash.\n\n69\n00:03:59.140 --> 00:04:03.480\nI harp on that so you don't forget,\nit's an easy thing to misplace.\n\n70\n00:04:03.480 --> 00:04:05.650\nThen we have this I equals 1.\n\n71\n00:04:05.650 --> 00:04:07.662\nWell what's happening with I equals 1.\n\n72\n00:04:07.662 --> 00:04:10.740\n[COUGH] You see I used as a variable\na lot in scripting, why do they do that?\n\n73\n00:04:10.740 --> 00:04:13.230\nJust because it's easy,\n\n74\n00:04:13.230 --> 00:04:16.800\nit's just say i equals instead of\ncreate some explicit variable name.\n\n75\n00:04:16.800 --> 00:04:21.610\nSo if you see i equals something or dollar\nsign i, that's usually because somebody\n\n76\n00:04:21.610 --> 00:04:25.680\njust created i as a variable,\nand that's what's happening.\n\n77\n00:04:25.680 --> 00:04:28.370\nAnd that's exactly what I'm doing here.\n\n78\n00:04:28.370 --> 00:04:31.160\nI'm just declaring the variable,\nsaying the variable is i, it equals 1.\n\n79\n00:04:31.160 --> 00:04:34.160\nThis isn't, this shouldn't be anything\nthat's out of our scope so far,\n\n80\n00:04:34.160 --> 00:04:37.880\nit's just a little bit different than\nthe normal naming conventions that\n\n81\n00:04:37.880 --> 00:04:41.770\nI've been using because I wanna see,\nI wanna show you that let's\n\n82\n00:04:41.770 --> 00:04:44.385\nstart shortening the amount\nof code that we type in.\n\n83\n00:04:44.385 --> 00:04:46.965\nAnd while var one can be\nvery descriptive it's\n\n84\n00:04:46.965 --> 00:04:49.475\nalso a little bit more difficult to type.\n\n85\n00:04:49.475 --> 00:04:51.545\nSo when you're trying\nto create a quick and\n\n86\n00:04:51.545 --> 00:04:53.795\ndirty script using just single\ncharacters is perfectly fine.\n\n87\n00:04:53.795 --> 00:04:55.435\nYou can do that, and I've done that here.\n\n88\n00:04:55.435 --> 00:04:57.965\nIt makes it a little more simplistic.\n\n89\n00:04:59.660 --> 00:05:01.040\nSo, what's happening now?\n\n90\n00:05:01.040 --> 00:05:02.360\nWe have the while loop.\n\n91\n00:05:02.360 --> 00:05:08.750\nI've invoked the word while that lets the\nbash interpreter know, use that command.\n\n92\n00:05:08.750 --> 00:05:11.680\nI'm going to actually\nwant to do a while loop.\n\n93\n00:05:11.680 --> 00:05:12.430\nOkay, no problem.\n\n94\n00:05:12.430 --> 00:05:16.640\nNow you'll notice I don't have any of the,\nin this stuff, or like we did with the for\n\n95\n00:05:16.640 --> 00:05:18.940\nloops, I don't have a list.\n\n96\n00:05:18.940 --> 00:05:22.230\nWhat I'm doing is I'm\ngiving it a condition.\n\n97\n00:05:22.230 --> 00:05:26.090\nI wanna say that while this condition\nis true, I want you to do something.\n\n98\n00:05:27.530 --> 00:05:28.710\nOkay?\nThis is my condition.\n\n99\n00:05:28.710 --> 00:05:34.080\nSo between the two open and\nclose brackets I have my condition.\n\n100\n00:05:34.080 --> 00:05:35.630\nWhat is my condition?\n\n101\n00:05:35.630 --> 00:05:38.330\nWell while I, there's our variable, right?\n\n102\n00:05:38.330 --> 00:05:38.845\nThere's $i.\n\n103\n00:05:38.845 --> 00:05:41.130\nThose who know that's\nthe variable I'm referencing and\n\n104\n00:05:41.130 --> 00:05:43.380\nthere's only one which is right here.\n\n105\n00:05:43.380 --> 00:05:45.400\nSo it makes it really simple to see.\n\n106\n00:05:45.400 --> 00:05:50.300\nBut I'm referencing this variable and\nI'm saying that while it equals 1,\n\n107\n00:05:50.300 --> 00:05:52.380\nwell right now, while does equal 1.\n\n108\n00:05:52.380 --> 00:05:56.710\nThat's good, so that condition is true,\nthe loop should start, okay?\n\n109\n00:05:56.710 --> 00:06:02.505\nIf for whatever reason, i did not equal 1,\nobviously this is not going to work.\n\n110\n00:06:02.505 --> 00:06:08.106\nThen I say do, there's our standard do\ncommand, I have some commands I would\n\n111\n00:06:08.106 --> 00:06:13.547\nlike you to do while this statement is\ntrue, and I'll list them out below.\n\n112\n00:06:13.547 --> 00:06:20.296\nAnd that's exactly what I do,\nI say echo I equals $1, which is our.\n\n113\n00:06:20.296 --> 00:06:25.839\n$1 is wrong, yeah well I equals\nI think let me just run it and\n\n114\n00:06:25.839 --> 00:06:29.100\nsee if I made a mistake here or not.\n\n115\n00:06:29.100 --> 00:06:33.020\nThis should and then Im done,\nbasically im saying echo whatever\n\n116\n00:06:34.440 --> 00:06:40.090\nthe value of $1 is which is\nI know it's not Not true.\n\n117\n00:06:40.090 --> 00:06:41.530\nIt needs to be i, like so.\n\n118\n00:06:41.530 --> 00:06:42.890\nAnd then Ctrl O to save that.\n\n119\n00:06:42.890 --> 00:06:46.500\nThere we go.\nSo now that should be a little more right.\n\n120\n00:06:46.500 --> 00:06:50.540\nSo I equals whatever\nthis variable is okay?\n\n121\n00:06:51.820 --> 00:06:54.780\nNow this is an interesting loop because.\n\n122\n00:06:54.780 --> 00:06:55.820\nIt's going to do something that a lot of,\n\n123\n00:06:55.820 --> 00:06:58.930\nbelieve me when you start writing\nloops it's very, very easy to do.\n\n124\n00:06:58.930 --> 00:07:01.430\nAnd then when you think you get\nreally good at writing loops,\n\n125\n00:07:01.430 --> 00:07:04.920\nyou'll probably start doing it again,\nbecause you get a little hap hazard.\n\n126\n00:07:04.920 --> 00:07:07.980\nBut Ronnie I'm taking a look\nat this logic here, and\n\n127\n00:07:07.980 --> 00:07:12.830\nI know I'm kinda throwing you on the spot\nhere, it's okay if you get this wrong,\n\n128\n00:07:12.830 --> 00:07:15.488\nit's okay if you get this wrong, but\nwhat do you think is going to happen?\n\n129\n00:07:15.488 --> 00:07:18.070\nWhen I run this loop.\n\n130\n00:07:18.070 --> 00:07:22.071\n>> All right, so if I understand this\ncorrectly, what should happen is as long\n\n131\n00:07:22.071 --> 00:07:24.820\nas one equals whatever\nthe variable is which is one,\n\n132\n00:07:24.820 --> 00:07:27.212\nthen it should continue\nuntil that changes.\n\n133\n00:07:27.212 --> 00:07:28.296\n>> That is actually correct.\n\n134\n00:07:28.296 --> 00:07:29.171\n>> All right.\n\n135\n00:07:29.171 --> 00:07:31.800\n>> You hit the nail on the head.\n\n136\n00:07:31.800 --> 00:07:34.650\nSo according to this script,\nhow long should that be?\n\n137\n00:07:34.650 --> 00:07:38.870\nI'm gonna assume it's gonna be forever\nsince there's nothing that says the I's\n\n138\n00:07:38.870 --> 00:07:40.584\ngonna equal anything different.\n\n139\n00:07:40.584 --> 00:07:41.570\n[LAUGH]\n>> That is,\n\n140\n00:07:41.570 --> 00:07:44.800\nRonnie is a smart man, listen to him,\nif you didn't understand that.\n\n141\n00:07:44.800 --> 00:07:48.832\nRemember we're saying,\nthat while this condition equals true,\n\n142\n00:07:48.832 --> 00:07:52.360\nwhile this statement is true,\nI want you to do something.\n\n143\n00:07:52.360 --> 00:07:56.796\nWell if that statement never changes,\nwhen is the loop gonna end?\n\n144\n00:07:56.796 --> 00:08:01.871\nNever So it's just going to continually\nloop itself around infinitely.\n\n145\n00:08:01.871 --> 00:08:04.080\nAnd that's what we call an infinite loop.\n\n146\n00:08:04.080 --> 00:08:06.710\nAnd it's something that\nyou can easily fall into.\n\n147\n00:08:06.710 --> 00:08:09.381\nAnd that's why I named\nthis infinite_while.sh,\n\n148\n00:08:09.381 --> 00:08:14.250\nbecause this loop is gonna go on forever,\nbecause that statement never changes.\n\n149\n00:08:14.250 --> 00:08:15.390\nThe conditions never change.\n\n150\n00:08:15.390 --> 00:08:17.980\nSo that's an important\npart of creating loops.\n\n151\n00:08:17.980 --> 00:08:22.060\nYou gotta remember that\nthe condition needs to change.\n\n152\n00:08:22.060 --> 00:08:24.528\nWith our for loop, the condition,\n\n153\n00:08:24.528 --> 00:08:28.820\nit did change because there was\na list of values to go through.\n\n154\n00:08:28.820 --> 00:08:33.856\nOnce we reached the end of the values,\nyou're done, the loop would end.\n\n155\n00:08:33.856 --> 00:08:36.510\nBut our C-style for\nloop could probably have this as well.\n\n156\n00:08:36.510 --> 00:08:41.980\nBecause I gave it a condition, as long as\nthis was true continue to go through here.\n\n157\n00:08:41.980 --> 00:08:43.070\nSo that's important.\n\n158\n00:08:43.070 --> 00:08:44.310\nWe're seeing that here as well,\n\n159\n00:08:44.310 --> 00:08:48.160\nthis is a traditional style loop,\nbecause I'm giving it a condition.\n\n160\n00:08:48.160 --> 00:08:53.070\nUntil the condition changes,\nbecause I'm saying while this is true.\n\n161\n00:08:53.070 --> 00:08:56.710\nSo it will continue to do this\nuntil that while is not true.\n\n162\n00:08:56.710 --> 00:09:00.257\nAll right, and since we haven't done\nanything to make it not true this is gonna\n\n163\n00:09:00.257 --> 00:09:01.615\nbe an infinite loop.\n\n164\n00:09:01.615 --> 00:09:07.260\nLet's show you what that looks like\nwhen you create an infinite loop.\n\n165\n00:09:07.260 --> 00:09:11.130\nSo let's go ahead, and I'll make\nsure I save this and X out of here.\n\n166\n00:09:11.130 --> 00:09:13.870\nAnd let's run that guy.\n\n167\n00:09:13.870 --> 00:09:16.050\nThat is infinite_while.sh.\n\n168\n00:09:16.050 --> 00:09:17.000\nAnd there it goes.\n\n169\n00:09:17.000 --> 00:09:17.670\nIt's going crazy.\n\n170\n00:09:17.670 --> 00:09:20.980\nIt's just continually doing I equals one,\nI equals one, I equals one.\n\n171\n00:09:20.980 --> 00:09:25.320\nAnd I have to actually control\nCtrl+C to break the script,\n\n172\n00:09:25.320 --> 00:09:27.060\nto stop the script from running.\n\n173\n00:09:27.060 --> 00:09:28.210\nSo that's what you'll have to do.\n\n174\n00:09:28.210 --> 00:09:31.230\nWhen you create an infinite loop,\nthat's the kinda thing that you'll see.\n\n175\n00:09:31.230 --> 00:09:35.920\nIt'll just keep doing stuff over and\nover, and over, and over, and over again.\n\n176\n00:09:35.920 --> 00:09:38.050\nEven if there's user\ninput that's happening,\n\n177\n00:09:38.050 --> 00:09:42.130\nit might get to where it's asking for\nuser input, take that input, go on, and\n\n178\n00:09:42.130 --> 00:09:44.750\nthen you'll be right back to\nwhere you had user input.\n\n179\n00:09:44.750 --> 00:09:47.470\nYou're like, I've already done this,\nit should be doing something else.\n\n180\n00:09:47.470 --> 00:09:51.370\nSo when you get crazy results when you're\nworking with loops, especially if it's\n\n181\n00:09:51.370 --> 00:09:54.675\nrepeating itself over and over again,\nin a way that you didn't design it to,\n\n182\n00:09:54.675 --> 00:09:56.670\nyou've probably got\nan infinite loop in there.\n\n183\n00:09:56.670 --> 00:10:00.710\nThere's a condition that needs to be\nchanged, and it's not seeing the change.\n\n184\n00:10:00.710 --> 00:10:04.820\nEven if you think you've created the\nchange, as we'll see it's very important\n\n185\n00:10:04.820 --> 00:10:09.190\nhow you put the structure\nof these things in there.\n\n186\n00:10:09.190 --> 00:10:14.670\nSo always make sure there's a condition\nin there to change the statements to\n\n187\n00:10:14.670 --> 00:10:20.370\nbe something other than what is supposed\nto be true, when it comes to these whiles.\n\n188\n00:10:20.370 --> 00:10:22.840\nAll right,\nlet's see what else we've got here.\n\n189\n00:10:22.840 --> 00:10:24.050\nYou know what, let's fix this.\n\n190\n00:10:24.050 --> 00:10:26.960\nHow can we do this loop and\nnot have it be wrong?\n\n191\n00:10:26.960 --> 00:10:31.860\nBecause even though it's working,\nit is looping, it's not looping in the way\n\n192\n00:10:31.860 --> 00:10:36.630\nthat we would like it to,\nIt's not It's never coming to an end game.\n\n193\n00:10:36.630 --> 00:10:40.290\nWe need it to stop at some certain point.\n\n194\n00:10:40.290 --> 00:10:42.210\nSo what do we do?\n\n195\n00:10:42.210 --> 00:10:44.590\nWe need to fix this so\nthe condition will change.\n\n196\n00:10:44.590 --> 00:10:45.700\nSo let's see how to do that.\n\n197\n00:10:45.700 --> 00:10:47.260\nI think, I did.\nI created a script so\n\n198\n00:10:47.260 --> 00:10:50.200\nwe that don't have to mess\nwith the other script.\n\n199\n00:10:50.200 --> 00:10:54.080\nLet's do nano regular while dot s h and\nsee what's different here.\n\n200\n00:10:54.080 --> 00:10:55.440\nSo basically the same thing again.\n\n201\n00:10:56.450 --> 00:10:58.050\nTook the same kinda code here.\n\n202\n00:10:58.050 --> 00:11:00.260\nI equals one.\nWhile I equals one do this.\n\n203\n00:11:00.260 --> 00:11:01.260\nEcho equals one.\n\n204\n00:11:01.260 --> 00:11:03.710\nThere is not difference here,\nother than one line.\n\n205\n00:11:03.710 --> 00:11:06.977\nThis line right here.\n\n206\n00:11:06.977 --> 00:11:08.460\nRight?\n\n207\n00:11:08.460 --> 00:11:09.370\nIt says I plus plus.\n\n208\n00:11:09.370 --> 00:11:11.800\nWe're gonna open parentheses open\n\n209\n00:11:11.800 --> 00:11:14.740\nparentheses I plus plus\nclose close parentheses.\n\n210\n00:11:14.740 --> 00:11:17.720\nRight?\nSo a neat little statement, and\n\n211\n00:11:17.720 --> 00:11:18.930\nwhat does that do?\n\n212\n00:11:18.930 --> 00:11:21.020\nDoes that look familiar to you.\n\n213\n00:11:21.020 --> 00:11:25.000\nIt should because we used that\nback in that C-style loop.\n\n214\n00:11:25.000 --> 00:11:26.700\nRemember we did A++ and B--.\n\n215\n00:11:26.700 --> 00:11:32.970\nThese are so basically I'm changing\nthe value of A at the end of the loop.\n\n216\n00:11:32.970 --> 00:11:34.560\nSo what's happening.\n\n217\n00:11:34.560 --> 00:11:40.080\nWhat's happening is, If I do this\nincrementation, i here, and that's what\n\n218\n00:11:40.080 --> 00:11:47.000\nI should be talking about our variable, i,\nequals one at the end of our statement.\n\n219\n00:11:47.000 --> 00:11:52.280\nIt's incrementing it by one\nincrementation, and now it will equal two.\n\n220\n00:11:52.280 --> 00:11:55.730\nSo, Ronnie, again,\nkind of putting you on the spot here.\n\n221\n00:11:55.730 --> 00:11:58.600\nWhen this group runs,\nwhat do you think it will do, and\n\n222\n00:11:58.600 --> 00:12:00.950\nhow long do you think it will do it?\n\n223\n00:12:00.950 --> 00:12:02.810\n>> Well, if this is correct in\nthe way that I'm seeing it.\n\n224\n00:12:02.810 --> 00:12:04.810\nAs long as one equals one,\nit should loop forever.\n\n225\n00:12:04.810 --> 00:12:08.490\nBut if we're actually incrementing\nhere by one, it should\n\n226\n00:12:08.490 --> 00:12:13.210\nchange which means it shouldn't run\nany farther after the first time.\n\n227\n00:12:13.210 --> 00:12:13.910\n>> That's exactly right.\n\n228\n00:12:13.910 --> 00:12:16.380\nMan Ronnie,\nhe's on his game today, I love it.\n\n229\n00:12:16.380 --> 00:12:18.080\nThat's exactly what's gonna happen.\n\n230\n00:12:18.080 --> 00:12:22.880\nWe're incrementing,\nbecause what's gonna happen is when\n\n231\n00:12:22.880 --> 00:12:26.800\nthat incrementation occurs,\nthis variable changes from one to two.\n\n232\n00:12:26.800 --> 00:12:31.470\nAnd because I is not equalling two, the\ncommands don't run and it breaks the loop,\n\n233\n00:12:31.470 --> 00:12:33.430\nit stops and\nit goes to the next line of code.\n\n234\n00:12:34.440 --> 00:12:38.430\nSince there's nothing under the next line\nof code, that's the end of our script.\n\n235\n00:12:38.430 --> 00:12:42.030\nSo what it should do is it should\necho one time that I equals one,\n\n236\n00:12:42.030 --> 00:12:43.260\nand that'll be the end of our script.\n\n237\n00:12:43.260 --> 00:12:46.690\nIf I've written this correctly and\nI know what the heck I'm talking about,\n\n238\n00:12:46.690 --> 00:12:48.460\nthat's exactly what we should see.\n\n239\n00:12:48.460 --> 00:12:50.460\nSo let's see if that works itself out.\n\n240\n00:12:50.460 --> 00:12:52.670\nI will get out of here.\n\n241\n00:12:52.670 --> 00:12:57.280\nWe will run this regular_while script.\n\n242\n00:12:57.280 --> 00:12:58.250\nHere we go, moment of truth.\n\n243\n00:12:59.510 --> 00:13:03.680\nAnd there we go, I equals,\nwell I see what I did there.\n\n244\n00:13:03.680 --> 00:13:04.531\nI equals nothing.\n\n245\n00:13:04.531 --> 00:13:05.523\n[LAUGH]\n>> [LAUGH]\n\n246\n00:13:05.523 --> 00:13:06.295\n>> That's because\n\n247\n00:13:06.295 --> 00:13:08.890\nI have poor syntax in there,\nlet me fix that real quick.\n\n248\n00:13:08.890 --> 00:13:10.500\nNano regular_while and\n\n249\n00:13:10.500 --> 00:13:15.760\nI did the same thing on the other script,\nI had to change it.\n\n250\n00:13:15.760 --> 00:13:16.700\nIt's not a 1, it's an I.\n\n251\n00:13:16.700 --> 00:13:19.495\nThat or they look similar but\nthey're not the same.\n\n252\n00:13:19.495 --> 00:13:21.540\n>> [LAUGH]\n>> Let's try that guy.\n\n253\n00:13:21.540 --> 00:13:23.590\nHere we go and now exit out.\n\n254\n00:13:23.590 --> 00:13:25.730\nAnd that's a really good\nlesson in debugging.\n\n255\n00:13:25.730 --> 00:13:28.740\n[LAUGH] I didn't get the output I was\nlooking for cuz it just says i equals.\n\n256\n00:13:28.740 --> 00:13:32.360\nThere was no actual output, so\nI need to go and debug my script,\n\n257\n00:13:32.360 --> 00:13:35.990\ncuz I expected something\nthat I didn't see.\n\n258\n00:13:35.990 --> 00:13:38.280\nSo now when we run this guy, regular.\n\n259\n00:13:38.280 --> 00:13:40.110\nWhile.\nThere we go, I equals one,\n\n260\n00:13:40.110 --> 00:13:41.080\nit only iterated one time,\n\n261\n00:13:41.080 --> 00:13:44.140\ncuz after it was one,\nit added one to it, it became two.\n\n262\n00:13:44.140 --> 00:13:46.550\nTherefore the while loop was broken and\n\n263\n00:13:46.550 --> 00:13:50.780\nwe exited the loop moving on\nto whatever else code we had.\n\n264\n00:13:50.780 --> 00:13:56.390\n>> Now Daniel, we have a question in our\nchatroom which is a really good question.\n\n265\n00:13:56.390 --> 00:13:59.720\nCan you actually mix the for\nand the while statements?\n\n266\n00:13:59.720 --> 00:14:02.360\nAw, Fabian.\nI see you're trying to get ahead\n\n267\n00:14:02.360 --> 00:14:03.330\nof the game.\n\n268\n00:14:03.330 --> 00:14:04.790\nYes, yes you can.\nAnd we're gonna look at that.\n\n269\n00:14:04.790 --> 00:14:08.890\nBut I don't want to jump in that until\nwe understand exactly how each one\n\n270\n00:14:08.890 --> 00:14:11.750\nof the loops work, and then we are going\nto look at mixing them together and\n\n271\n00:14:11.750 --> 00:14:13.590\nseeing how that works itself out.\n\n272\n00:14:13.590 --> 00:14:16.470\nSo yes, short answer is yes,\nif you wait just a bit,\n\n273\n00:14:16.470 --> 00:14:19.080\nwe're actually gonna tackle that topic.\n\n274\n00:14:19.080 --> 00:14:25.480\nSo let's jump back into while and see\nwhat else we need to know about this guy.\n\n275\n00:14:25.480 --> 00:14:26.200\nLet me see here.\n\n276\n00:14:26.200 --> 00:14:28.880\nWhere are we at when it\ncomes to our script here?\n\n277\n00:14:28.880 --> 00:14:34.050\nAnother example, something that actually\ndoes a little more than just one thing.\n\n278\n00:14:34.050 --> 00:14:35.280\nA little more complexity to it.\n\n279\n00:14:35.280 --> 00:14:36.670\nLet's take a look at this.\n\n280\n00:14:36.670 --> 00:14:44.050\nAnd if I do nano, while1.sh,\nthere we go, that's my file name.\n\n281\n00:14:44.050 --> 00:14:47.710\nAs we can see, little more going on\nhere than whar we previously had.\n\n282\n00:14:47.710 --> 00:14:53.780\nBut if we break it down,\nit should make a whole lot of sense to us.\n\n283\n00:14:53.780 --> 00:14:55.386\nLet's see where we're at.\n\n284\n00:14:56.470 --> 00:15:01.070\nI went back to my standard\nstyle of creating variables for\n\n285\n00:15:01.070 --> 00:15:02.070\ndemonstration purposes.\n\n286\n00:15:02.070 --> 00:15:04.350\nI do like things to be descriptive.\n\n287\n00:15:04.350 --> 00:15:08.460\nIt makes your scripts a whole lot easier,\neven for\n\n288\n00:15:08.460 --> 00:15:12.355\nyourself, when you go back\nyou take a look at ' and\n\n289\n00:15:12.355 --> 00:15:16.855\nbeing descriptive when you are allowed\nto name things, helps out a lot.\n\n290\n00:15:16.855 --> 00:15:20.975\nSo, I know that I have var1 here and\nit equals ten.\n\n291\n00:15:20.975 --> 00:15:22.855\nSo I created a variable name var1 =10.\n\n292\n00:15:22.855 --> 00:15:26.195\nThen I start to my while loop and\nI have my condition.\n\n293\n00:15:27.730 --> 00:15:31.030\nSo what is my condition,\nif I can right-click on that?\n\n294\n00:15:31.030 --> 00:15:35.670\nMy condition is while var1 is, and\nthat gt, if you'll remember that,\n\n295\n00:15:35.670 --> 00:15:37.480\nthat's our greater than, right?\n\n296\n00:15:37.480 --> 00:15:42.445\nRemember our Earth mystic operators that\nwe talked about back in the math show?\n\n297\n00:15:42.445 --> 00:15:43.895\nThat's when this stuff comes in handy.\n\n298\n00:15:43.895 --> 00:15:45.753\nRight?\nThat's why we learned that before now, so\n\n299\n00:15:45.753 --> 00:15:47.306\nthis doesn't like throw you off guard.\n\n300\n00:15:47.306 --> 00:15:51.843\nSo while varl1 is greater than zero,\nI want you to do something, and\n\n301\n00:15:51.843 --> 00:15:56.767\nhere, I love to right click,\nI Instead of putting do on an extra line,\n\n302\n00:15:56.767 --> 00:16:00.365\nto shorten things up,\nmake it a little easier to read,\n\n303\n00:16:00.365 --> 00:16:04.550\nI've added the semi-colon\nseparating the while from the do.\n\n304\n00:16:04.550 --> 00:16:06.800\nSo just be aware you can do that.\n\n305\n00:16:06.800 --> 00:16:09.577\nIt's a nice little trick to shrink\nthings down a little bit so\n\n306\n00:16:09.577 --> 00:16:11.219\nthat things aren't so spread out.\n\n307\n00:16:11.219 --> 00:16:15.439\nAnd what are we doing,\nwe are echoing countdown and\n\n308\n00:16:15.439 --> 00:16:19.800\nt-minus and then whatever var1's value is.\n\n309\n00:16:19.800 --> 00:16:25.887\nSo right now, var's value is 10, so it\nshould say countdown in t-minus 10, right?\n\n310\n00:16:25.887 --> 00:16:28.200\nBecause that's what var is.\nAnd then what do we do,\n\n311\n00:16:28.200 --> 00:16:30.920\nwe come down here to where\nwe change our condition.\n\n312\n00:16:30.920 --> 00:16:33.040\nAnd you'll notice that\nthis time instead of,\n\n313\n00:16:33.040 --> 00:16:37.160\neven though I put it over\nhere you can also do var1--.\n\n314\n00:16:37.160 --> 00:16:40.930\nWe're starting to change the condition\nof the variable of that statement.\n\n315\n00:16:40.930 --> 00:16:43.210\nBut what's happening.\n\n316\n00:16:43.210 --> 00:16:49.452\nVar equals, or\nvar1 is going to equal var1- 1.\n\n317\n00:16:49.452 --> 00:16:51.910\nSo, I'm changing what var1 equals.\n\n318\n00:16:51.910 --> 00:16:53.604\nI'm subtracting 1 from it.\n\n319\n00:16:53.604 --> 00:16:56.817\nAnd again, like I said,\nit's a whole lot easier to use this but\n\n320\n00:16:56.817 --> 00:17:00.168\nI wanted to show you the other,\nas well, so that that made sense.\n\n321\n00:17:00.168 --> 00:17:04.578\nSo if you see one or the other, you\nknow that they are synonymous terms for\n\n322\n00:17:04.578 --> 00:17:05.967\nwhat you're seeing.\n\n323\n00:17:05.967 --> 00:17:11.370\nSo basically decrement\nwhatever var 1 is by 1, okay?\n\n324\n00:17:11.370 --> 00:17:14.535\nSo, it's.\nIt's ten subtract one from that it should\n\n325\n00:17:14.535 --> 00:17:15.395\nbe nine.\n\n326\n00:17:15.395 --> 00:17:17.445\nBut what happens if it is nine?\n\n327\n00:17:17.445 --> 00:17:22.415\nSo it goes back here to the while, and\nsays well while one is greater than zero.\n\n328\n00:17:22.415 --> 00:17:23.268\nDo something.\n\n329\n00:17:23.268 --> 00:17:27.344\nWell nine last time I checked,\nadd the two carry the,\n\n330\n00:17:27.344 --> 00:17:32.054\nyes it is greater than zero, so\nthat should mean it's going to\n\n331\n00:17:32.054 --> 00:17:37.150\nreiterate whatever is in the script or\nbetween the do and the done.\n\n332\n00:17:37.150 --> 00:17:41.464\nSo it's gonna echo t-minus,\nnow we know var1 equals 9 so\n\n333\n00:17:41.464 --> 00:17:43.717\nthis is echo var1 basically.\n\n334\n00:17:43.717 --> 00:17:46.582\nAnd that's gonna be nine and\nthen what's it gonna do?\n\n335\n00:17:46.582 --> 00:17:51.137\nIt's gonna subtract one from\nthat using this statement, and\n\n336\n00:17:51.137 --> 00:17:53.072\nnow it's gonna equal 8.\n\n337\n00:17:53.072 --> 00:17:54.271\nAgain we go back.\n\n338\n00:17:54.271 --> 00:17:55.760\nWhat happens with that?\n\n339\n00:17:55.760 --> 00:17:59.480\nWell, with while, while var1 is greater\nthan 0, and again, 8 is greater than 0.\n\n340\n00:17:59.480 --> 00:18:01.340\nSo now you're starting to see the pattern.\n\n341\n00:18:01.340 --> 00:18:03.219\nBasically this is a countdown, and\n\n342\n00:18:03.219 --> 00:18:07.177\nhopefully that's makes a little sense\nto you with this echo section here.\n\n343\n00:18:07.177 --> 00:18:09.027\nIt's going to echo each iteration so\n\n344\n00:18:09.027 --> 00:18:11.900\nthat we can see how many times\nit goes through the script.\n\n345\n00:18:11.900 --> 00:18:15.389\nNow if we get anything more than zero,\nright,\n\n346\n00:18:15.389 --> 00:18:18.613\nthen we know we've done something wrong.\n\n347\n00:18:18.613 --> 00:18:21.907\nIt should just get down to one,\nand then that'd be the end of it,\n\n348\n00:18:21.907 --> 00:18:24.670\nbecause if it equals zero,\nit won't run the script.\n\n349\n00:18:24.670 --> 00:18:26.060\nAnd that makes sense, right?\n\n350\n00:18:26.060 --> 00:18:28.470\nBecause this says it's greater than zero.\n\n351\n00:18:28.470 --> 00:18:30.440\nNot equal,not great than or equal to.\n\n352\n00:18:30.440 --> 00:18:35.750\nIf I put ge in there, greater than or\nequal to, then zero will also integrate.\n\n353\n00:18:35.750 --> 00:18:41.236\nBut because it just says greater than,\nthe true statement is 10, 9, 8, 7,\n\n354\n00:18:41.236 --> 00:18:46.333\n6, 5, 4, 3, 2, 1 because all those\nnumbers are greater than zero.\n\n355\n00:18:46.333 --> 00:18:51.197\nOnce it becomes zero, once I get this\npart right here where var is 1 and\n\n356\n00:18:51.197 --> 00:18:56.560\nthen it runs to here where var=1-1,\nwell that equals zero, therefore,\n\n357\n00:18:56.560 --> 00:19:01.673\nthis while statement is no longer true,\nand then it will break the loop and\n\n358\n00:19:01.673 --> 00:19:06.394\nwe'll be out of it we won't get\nan iteration of T minus zero, okay?\n\n359\n00:19:06.394 --> 00:19:09.885\nHopefully that's making sense, a very\nshort script, but I know there's a lot of\n\n360\n00:19:09.885 --> 00:19:13.223\ndescription in there, but I want to make\nsure that you understand each item and\n\n361\n00:19:13.223 --> 00:19:16.320\nhow it's working, what's going\non as we move our way though it.\n\n362\n00:19:16.320 --> 00:19:18.380\nSo this actually does\na little more complexity, and\n\n363\n00:19:18.380 --> 00:19:20.250\nlet's do this T minus stuff.\n\n364\n00:19:20.250 --> 00:19:22.942\nLet's get out of here and let's run it.\n\n365\n00:19:22.942 --> 00:19:29.782\nSo we call this while one dot SH there\nwe go, we get ten minus T987654321,\n\n366\n00:19:29.782 --> 00:19:34.195\nnot zero,\nbecause the condition said greater than.\n\n367\n00:19:34.195 --> 00:19:39.349\nAgain if it said greater than or equal to\nwe would have gotten zero in there and\n\n368\n00:19:39.349 --> 00:19:43.464\nthat is basically how,\nwhile loops are going to work for us.\n\n369\n00:19:43.464 --> 00:19:44.499\n>> All right Daniel.\n\n370\n00:19:44.499 --> 00:19:48.404\nNow that we've actually seen that,that we\nunderstand that with the if statement,\n\n371\n00:19:48.404 --> 00:19:51.979\nright, it actually changes a condition and\nno longer will that particular,\n\n372\n00:19:51.979 --> 00:19:54.132\nwhatever we have in the do\nstatement will run.\n\n373\n00:19:54.132 --> 00:19:54.689\nWith while,\n\n374\n00:19:54.689 --> 00:19:58.420\nit will continue to run as long as our\nvariable statement is gonna remain true.\n\n375\n00:19:58.420 --> 00:20:02.320\nSo while actually seems to be\nsomething that will allow us just to\n\n376\n00:20:02.320 --> 00:20:04.520\ncontinue running it until we\nrealize something is not true.\n\n377\n00:20:04.520 --> 00:20:07.910\nNow, tell us where we can actually\nfind a practical example of this.\n\n378\n00:20:07.910 --> 00:20:11.450\n>> Yeah, I like to do practical\nexamples whenever I can.\n\n379\n00:20:11.450 --> 00:20:13.840\nAnd this is one of the cases\nI came up with one,\n\n380\n00:20:13.840 --> 00:20:18.430\nbacking up stuff is a very\ncommon thing that gets scripted.\n\n381\n00:20:18.430 --> 00:20:23.000\nSo it becomes a very good practical\nexercise for everything that we're doing.\n\n382\n00:20:23.000 --> 00:20:24.610\nWith while loops, no difference.\n\n383\n00:20:24.610 --> 00:20:29.430\nI've created a little backup\nscript to do something for us,\n\n384\n00:20:29.430 --> 00:20:32.090\nwhich is back up stuff, and\nwe'll see how that works.\n\n385\n00:20:32.090 --> 00:20:34.650\nLet me clear my screen so\nwe can get into here.\n\n386\n00:20:34.650 --> 00:20:35.430\nLet me see.\n\n387\n00:20:35.430 --> 00:20:36.272\nWhat is the name of that guy?\n\n388\n00:20:36.272 --> 00:20:38.333\nIt is while_backup.sh.\n\n389\n00:20:38.333 --> 00:20:43.270\nSo let's nano while_backup.sh.\n\n390\n00:20:43.270 --> 00:20:45.500\nLet's see what's going on.\n\n391\n00:20:45.500 --> 00:20:48.390\nSo, a little bit more complexity,\ncause this is an actual script.\n\n392\n00:20:48.390 --> 00:20:52.410\nThis is actually does something\nother than do some counting.\n\n393\n00:20:52.410 --> 00:20:55.300\nThat was one of the hardest\nthings about this\n\n394\n00:20:55.300 --> 00:20:58.870\nshow to come up with looping examples\nthat weren't about counting something.\n\n395\n00:20:58.870 --> 00:21:02.143\nCounting is an easy way to demonstrate\nthis, but doing something that's\n\n396\n00:21:02.143 --> 00:21:05.013\ndifferent, I have to come up with\na good backup script for this.\n\n397\n00:21:05.013 --> 00:21:06.463\nLet's look in this script and\n\n398\n00:21:06.463 --> 00:21:10.536\nsee what's happening right out of the bat\nI'm declaring some variables, right.\n\n399\n00:21:10.536 --> 00:21:14.965\nNow, you'll notice that I do that a lot\ncuz we need value in those variables so\n\n400\n00:21:14.965 --> 00:21:16.780\nwe can use them in our script.\n\n401\n00:21:16.780 --> 00:21:18.520\nSo what's going on here?\n\n402\n00:21:19.760 --> 00:21:22.420\nAnd hopefully I've used just about\neverything we've talked about up until\n\n403\n00:21:22.420 --> 00:21:23.280\nthis point here.\n\n404\n00:21:23.280 --> 00:21:25.290\nWe have DIR 1, that's our variable.\n\n405\n00:21:25.290 --> 00:21:28.822\nSo directory one and\nit's equalling this directory.\n\n406\n00:21:28.822 --> 00:21:31.939\nBut you'll notice that I have\nthe dollar sign home there.\n\n407\n00:21:31.939 --> 00:21:32.691\nThat's kinda cool.\n\n408\n00:21:32.691 --> 00:21:34.416\nWhat's that?\nThat's a global variable.\n\n409\n00:21:34.416 --> 00:21:38.835\nThat's a variable that's declared by\nthe system when you start it up and\n\n410\n00:21:38.835 --> 00:21:42.827\nit's whatever your username is\nunderneath the home directory.\n\n411\n00:21:42.827 --> 00:21:49.932\nSo in here, I'm /HOME/user1, so\ninstead of having to type all that in,\n\n412\n00:21:49.932 --> 00:21:55.120\nI can just use HOME because\nit equals /HOME/user1.\n\n413\n00:21:55.120 --> 00:21:58.927\nSo, I've referenced a variable\ninside of a variable I'm creating.\n\n414\n00:21:58.927 --> 00:22:01.821\nOld school stuff, or\nelse should be anyway by now.\n\n415\n00:22:01.821 --> 00:22:04.563\nThen I just added slash logs to that so\n\n416\n00:22:04.563 --> 00:22:08.465\nI have a directory in my\nhome directory called logs.\n\n417\n00:22:08.465 --> 00:22:10.821\nAll right, dir two same kind of idea.\n\n418\n00:22:10.821 --> 00:22:15.300\nHome slash temp so I have a temp\ndirectory and then slash error.\n\n419\n00:22:15.300 --> 00:22:18.570\nSo what I, what I tried to do is\ncreate an environment that might be\n\n420\n00:22:18.570 --> 00:22:20.380\nsimilar to an actual environment.\n\n421\n00:22:20.380 --> 00:22:22.120\nProbably got a place where\nyou're storing your logs,\n\n422\n00:22:22.120 --> 00:22:24.260\nprobably got a place where\nyou're storing temporary files,\n\n423\n00:22:24.260 --> 00:22:27.760\nyou've probably got a place\nwhere you're storing errors.\n\n424\n00:22:27.760 --> 00:22:31.670\nSo that's what I created,\nthat environment for us.\n\n425\n00:22:31.670 --> 00:22:33.650\nLet's jump back down into our script.\n\n426\n00:22:33.650 --> 00:22:38.522\nWe see i equals 1, standard operating\nprocedure when you see a lot\n\n427\n00:22:38.522 --> 00:22:41.745\nof looping and we saw this earlier, right?\n\n428\n00:22:41.745 --> 00:22:45.013\nSo what's happening here,\nwhile i eq, or equals,\n\n429\n00:22:45.013 --> 00:22:49.770\nI could've also probably used\nthe equal sign, equals 1, do what?\n\n430\n00:22:49.770 --> 00:22:53.720\nWhat are we doing,\nwe're echoing backing up this directory.\n\n431\n00:22:53.720 --> 00:22:59.080\nWhatever the value of this is,\nwhich would be this, and it's not gonna\n\n432\n00:22:59.080 --> 00:23:04.040\nprint out $HOME/logs, it's gonna actually\nsay, or at least I think it won't,\n\n433\n00:23:04.040 --> 00:23:09.480\nI'm pretty sure it'll give me\nthe entirety of that file sub-structure.\n\n434\n00:23:09.480 --> 00:23:14.615\nAll right, so should be /HOME/user1/logs.\n\n435\n00:23:14.615 --> 00:23:16.016\nThat's what dir 1 is.\n\n436\n00:23:16.016 --> 00:23:16.971\nAnd then what's it doing?\n\n437\n00:23:16.971 --> 00:23:20.007\nI'm using the tar command\nwhich is the tape archiver.\n\n438\n00:23:20.007 --> 00:23:22.190\nIf you don't know about tar,\ncheck out our Linux plus shows.\n\n439\n00:23:22.190 --> 00:23:22.890\nThose are great.\n\n440\n00:23:22.890 --> 00:23:26.680\nShows you a lot of Linux commands and\nusing the CLI in Linux.\n\n441\n00:23:26.680 --> 00:23:29.276\nAnd, basically what I'm doing is,\n\n442\n00:23:29.276 --> 00:23:33.983\nI'm creating an archive of whatever\nis inside of this directory.\n\n443\n00:23:33.983 --> 00:23:37.855\nSo, it's archiving-css\nthat creates the file and\n\n444\n00:23:37.855 --> 00:23:40.937\nthen I'm saying, this is the file name.\n\n445\n00:23:40.937 --> 00:23:46.563\nBasically giving it the entirety of\nthe directory that that's going to be in,\n\n446\n00:23:46.563 --> 00:23:48.448\nand then naming it .tar.\n\n447\n00:23:48.448 --> 00:23:51.852\nAnd then saying whatever's in\nthat directory, there's our\n\n448\n00:23:51.852 --> 00:23:56.505\nregular expression coming back to haunt us\nsaying that it's a wild card statement.\n\n449\n00:23:56.505 --> 00:24:00.395\nYou've got this directory, anything in it,\nso that's what that star means,\n\n450\n00:24:00.395 --> 00:24:04.187\nany file you find in there, that That's\nwhat I want to put in my tape archive.\n\n451\n00:24:04.187 --> 00:24:06.801\nSo this is the name of our archive, and\n\n452\n00:24:06.801 --> 00:24:11.740\nthis is what's actually going\nto go in the archive, okay?\n\n453\n00:24:11.740 --> 00:24:15.200\nAnd then I want to remove whatever's\nin it because I'm backing it up.\n\n454\n00:24:15.200 --> 00:24:19.242\nOnce it's backed up,\nI don't need it any more, so\n\n455\n00:24:19.242 --> 00:24:24.050\nremove all the files that you\nfind inside of this directory.\n\n456\n00:24:24.050 --> 00:24:29.260\nAgain, using my regular expression to do\nthat so I don't have to type all that in.\n\n457\n00:24:29.260 --> 00:24:32.170\nAnd then, move to a different directory.\n\n458\n00:24:32.170 --> 00:24:33.620\nRemember, this is loops.\n\n459\n00:24:33.620 --> 00:24:36.160\nWhat are we doing with loops?\n\n460\n00:24:36.160 --> 00:24:37.875\nRepetitive tasks.\nIf I had to do this manually,\n\n461\n00:24:37.875 --> 00:24:41.214\nI would have to go into this directory,\ncreate the archive myself,\n\n462\n00:24:41.214 --> 00:24:44.965\nremove all the files, and then change\ndirectory, go into that directory,\n\n463\n00:24:44.965 --> 00:24:46.326\ndo the exact same process.\n\n464\n00:24:46.326 --> 00:24:51.648\nThen, change directories again and\ngo in there and do the exact same process.\n\n465\n00:24:51.648 --> 00:24:55.290\nSo, now you're seeing the practicality\nof using these types of loops.\n\n466\n00:24:55.290 --> 00:24:58.130\nI'm repeating myself over and\nover again and over again.\n\n467\n00:24:58.130 --> 00:24:59.370\nI don't want to do that.\n\n468\n00:24:59.370 --> 00:25:01.340\nI want my script to do that for me.\n\n469\n00:25:01.340 --> 00:25:03.410\nSo a loop is coming in to\nsave the day on me on that.\n\n470\n00:25:03.410 --> 00:25:06.390\nSo we've got the three directories\nare going to go in there,\n\n471\n00:25:06.390 --> 00:25:08.786\nit's going to create\nan archive of each one, and\n\n472\n00:25:08.786 --> 00:25:12.420\nthen it's going to remove all the files\nin each one of those directories.\n\n473\n00:25:12.420 --> 00:25:14.010\nAnd then what do we have?\n\n474\n00:25:14.010 --> 00:25:16.330\nDon't forget the most important part.\n\n475\n00:25:16.330 --> 00:25:19.308\nIf I were just to have hit\ndone at the end of that,\n\n476\n00:25:19.308 --> 00:25:24.147\nwe'd have been stuck in an infinite loop\nand it would've been going crazy and\n\n477\n00:25:24.147 --> 00:25:26.020\nit never would have stopped.\n\n478\n00:25:26.020 --> 00:25:28.530\nI have to change that while condition.\n\n479\n00:25:28.530 --> 00:25:31.569\nOnce I get through all\neverything I want it to do,\n\n480\n00:25:31.569 --> 00:25:35.240\nI throw a statement at it to\nchange the value of I to be -1.\n\n481\n00:25:35.240 --> 00:25:39.468\nSo if it's -1 now it equals 0,\nwell 0 is not what we want to see, for\n\n482\n00:25:39.468 --> 00:25:42.510\nat least for,\nthat's not what the y wants to see.\n\n483\n00:25:42.510 --> 00:25:44.220\nIt wants to see equals one.\n\n484\n00:25:44.220 --> 00:25:47.242\nSo if it doesn't equal one, the loop\nis over and we get out of there and\n\n485\n00:25:47.242 --> 00:25:48.090\nwe're good to go.\n\n486\n00:25:48.090 --> 00:25:52.677\nSo that's what's happening here and\nif everything works correctly,\n\n487\n00:25:52.677 --> 00:25:55.963\nwe should get three different\ntar archive files and\n\n488\n00:25:55.963 --> 00:25:59.950\nall of our directories should be\nempty at the end of this loop.\n\n489\n00:25:59.950 --> 00:26:02.310\nSo let's take a look and\nsee if that actually works.\n\n490\n00:26:02.310 --> 00:26:04.090\nGet out of here.\n\n491\n00:26:04.090 --> 00:26:08.700\nLet me show you those really quickly so\nI can show you or I'll just ls /.\n\n492\n00:26:08.700 --> 00:26:15.390\nI can do $HOME like this, slash,\nwhat was one of them, error.\n\n493\n00:26:15.390 --> 00:26:18.527\nAnd you'll see that there are files\ninside of that directory.\n\n494\n00:26:18.527 --> 00:26:24.675\nSame thing with logs, and\nsame thing with temp, right?\n\n495\n00:26:24.675 --> 00:26:26.242\nFiles inside of each one of those.\n\n496\n00:26:26.242 --> 00:26:30.000\nAnd we don't have any tar archive files.\n\n497\n00:26:30.000 --> 00:26:32.420\nYou don't see anything here, right.\n\n498\n00:26:32.420 --> 00:26:35.900\nSo let's run this guy and\nsee what happens.\n\n499\n00:26:35.900 --> 00:26:42.365\nLet's see here,\n.while_backup.sh, all right.\n\n500\n00:26:42.365 --> 00:26:45.425\nSo kinda gave me some\noutput which is nice.\n\n501\n00:26:45.425 --> 00:26:46.145\nAlways good to get some output.\n\n502\n00:26:46.145 --> 00:26:48.895\nWe see that tar was working.\n\n503\n00:26:48.895 --> 00:26:49.510\nDon't have any errors.\n\n504\n00:26:49.510 --> 00:26:52.855\nIt's not continually to go crazy over and\nover and over and over again.\n\n505\n00:26:52.855 --> 00:26:56.567\nAnd if we do an ls, or if I do an ls here,\n\n506\n00:26:56.567 --> 00:27:00.754\nthis is the directory I\ntold it to put it in.\n\n507\n00:27:00.754 --> 00:27:06.540\nWe see logs.tar, error.tar, and temp.tar.\n\n508\n00:27:06.540 --> 00:27:08.960\nIf we do an ls of temp,\nWe get nothing, right?\n\n509\n00:27:08.960 --> 00:27:13.820\nI can cd in the temp, ls,\nthere's nothing there, right?\n\n510\n00:27:13.820 --> 00:27:18.400\nBecause that's what we\ntold our script to do.\n\n511\n00:27:18.400 --> 00:27:20.871\nSo the script has run successfully.\n\n512\n00:27:20.871 --> 00:27:22.240\nEverything's working.\n\n513\n00:27:22.240 --> 00:27:24.080\nAnd that is a practical\nexample of using a for loop.\n\n514\n00:27:24.080 --> 00:27:27.953\nSo I want it to do all these commands\nuntil the condition changes and\n\n515\n00:27:27.953 --> 00:27:29.070\nthen it'll stop.\n\n516\n00:27:29.070 --> 00:27:30.610\nAnd that's a nice way to\nuse something like this.\n\n517\n00:27:30.610 --> 00:27:33.970\n>> All right, Daniel,\nthat's a lot of information there.\n\n518\n00:27:33.970 --> 00:27:35.809\nIt seems like at least a trick, for\n\n519\n00:27:35.809 --> 00:27:39.617\nme, right at the beginning,\nis being able to distinguish between what\n\n520\n00:27:39.617 --> 00:27:42.930\nwe actually talked about in\nanother episode, the for loops.\n\n521\n00:27:42.930 --> 00:27:46.367\nAnd when I would actually use while,\nbut that's actually a great way for\n\n522\n00:27:46.367 --> 00:27:47.051\nus to do that.\n\n523\n00:27:47.051 --> 00:27:50.393\nSo these examples have been really\nhelpful, at least to get me to understand\n\n524\n00:27:50.393 --> 00:27:53.440\nwhat the logic behind choosing one\nover the other is also going to be.\n\n525\n00:27:53.440 --> 00:27:57.114\nSo there's a lot of information that\nyou have to get used to working with,\n\n526\n00:27:57.114 --> 00:27:59.320\nand hopefully this has\nalso helped you out.\n\n527\n00:27:59.320 --> 00:28:03.810\nSo remember that when you're picking the\nidea of while, you'll want to make sure\n\n528\n00:28:03.810 --> 00:28:08.042\nthat that condition that's there is\ngonna continue to do whatever's in that\n\n529\n00:28:08.042 --> 00:28:11.710\ndo part of the statement until that\ncondition no longer to be true.\n\n530\n00:28:11.710 --> 00:28:14.873\nIf it's an if condition, right,\nonly if it's actually possible that\n\n531\n00:28:14.873 --> 00:28:17.420\nthat condition is gonna be true,\nwould you use it there.\n\n532\n00:28:17.420 --> 00:28:18.060\nAnd also, of the for.\n\n533\n00:28:18.060 --> 00:28:19.350\nI keep saying if.\n\n534\n00:28:19.350 --> 00:28:21.030\nThe for statement.\n\n535\n00:28:21.030 --> 00:28:22.020\nIf you have a list of things, right?\n\n536\n00:28:22.020 --> 00:28:25.348\nIn other words, if you know what\nthat finite list is gonna be or\n\n537\n00:28:25.348 --> 00:28:29.060\nyou know the variables that you're\ngonna use, it really does help.\n\n538\n00:28:29.060 --> 00:28:32.542\nSo thank you again, Daniel, for showing\nus this information and thank you for\n\n539\n00:28:32.542 --> 00:28:34.090\nalso joining us for this episode.\n\n540\n00:28:34.090 --> 00:28:36.107\nBut there's more to go, Daniel, and\n\n541\n00:28:36.107 --> 00:28:40.205\nthe problem is we've actually come this\npoint here within this episode, and\n\n542\n00:28:40.205 --> 00:28:43.310\nthat means we're actually going\nto a part three on these.\n\n543\n00:28:43.310 --> 00:28:45.010\nOn the idea of working with loops here.\n\n544\n00:28:45.010 --> 00:28:45.941\nSo Daniel.\n>> [CROSSTALK] It’s like a Rocky movie now\n\n545\n00:28:45.941 --> 00:28:47.772\n[LAUGH].\n>> You'll join us for part three, right?\n\n546\n00:28:47.772 --> 00:28:49.288\n>> Yeah we'll be here for part three.\n\n547\n00:28:49.288 --> 00:28:53.020\nWe're gonna look at another type of loop.\n\n548\n00:28:53.020 --> 00:28:56.090\nBut it does take us a little time, as we\nwant you to understand the structure.\n\n549\n00:28:56.090 --> 00:28:58.240\nSo it'll do the same\nthing with the next one.\n\n550\n00:28:58.240 --> 00:29:00.660\nWe'll see how that works,\nhow we can implement it as well.\n\n551\n00:29:00.660 --> 00:29:02.900\nHopefully you'll join us for part three.\n\n552\n00:29:02.900 --> 00:29:04.740\nI look forward to it.\n\n553\n00:29:04.740 --> 00:29:05.290\n>> All right.\n\n554\n00:29:05.290 --> 00:29:07.060\nSo signing off for\nITProTV, I'm Ronnie Wong.\n\n555\n00:29:07.060 --> 00:29:08.210\n>> I'm Daniel Lowry.\n\n556\n00:29:08.210 --> 00:29:09.600\n>> And we'll see you next time.\n\n557\n00:29:09.600 --> 00:29:12.087\n[MUSIC]\n\n",
          "vimeoId": "146012317"
        },
        {
          "description": "In this episode, Ronnie and Daniel show how to use until and nested loops from the BASH.  Needing to run things until a condition becomes true?  This is the show where they take a look into until loops.  These loops are great when you need to run a script like redirecting the contents of a folder to NULL until an error is generated.  Daniel and Ronnie also take a look at nested loops and redirecting the output of loops to a file.",
          "length": "1823",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt3-111615-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt3-111615-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-14-1-creating_loops_in_bash_pt3-111615-1-sm.jpg",
          "title": "Creating Loops in BASH Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.079 --> 00:00:10.079\n[MUSIC]\n\n2\n00:00:12.262 --> 00:00:16.690\nWelcome to another great episode here\non ITProTV, I'm your host Ronnie Wong,\n\n3\n00:00:16.690 --> 00:00:21.600\nand today we're taking Bash and scripting,\nspecifically still talking about loops.\n\n4\n00:00:21.600 --> 00:00:25.110\nNow, in previous episodes we've\nalready talked about four loops.\n\n5\n00:00:25.110 --> 00:00:28.330\nWe did spend a good deal of\ntime talking about four loops.\n\n6\n00:00:28.330 --> 00:00:32.530\nWe also then took a little a bit of\ntime talking about while loops as well.\n\n7\n00:00:32.530 --> 00:00:36.390\nAnd we actually have more to go.\n\n8\n00:00:36.390 --> 00:00:39.610\nThere's actually several more\nthat we need to go through, and\n\n9\n00:00:39.610 --> 00:00:42.520\nwe're actually getting into\nthe different loops that we\n\n10\n00:00:42.520 --> 00:00:45.590\nactually have available that I don't\nknow really anything about as well.\n\n11\n00:00:45.590 --> 00:00:48.130\nBut the good thing is, I have my friend\nDaniel Lowry here to help us out.\n\n12\n00:00:48.130 --> 00:00:51.400\nNow Daniel, I was looking over\nthe notes a little bit earlier.\n\n13\n00:00:51.400 --> 00:00:54.000\nWe did, actually I started to\nsee something and I was like,\n\n14\n00:00:54.000 --> 00:00:55.570\nwhat does this mean?\n\n15\n00:00:55.570 --> 00:01:01.810\nAnd it says until loops,\nwhat in the world is an until loop?\n\n16\n00:01:01.810 --> 00:01:04.370\n>> That's a great question,\nand Ronnie, he's cheating,\n\n17\n00:01:04.370 --> 00:01:05.910\nhe's looking at our notes here.\n\n18\n00:01:05.910 --> 00:01:06.900\n>> Yes. [LAUGH] >> And that's okay,\n\n19\n00:01:06.900 --> 00:01:08.700\nbecause we do want to\nget into until loops.\n\n20\n00:01:08.700 --> 00:01:11.050\nRemember just like you said\nwe looked at four loops and\n\n21\n00:01:11.050 --> 00:01:13.630\nhow they work,\nmaybe you'll throw a list at them,\n\n22\n00:01:13.630 --> 00:01:17.530\nor we can do the c style loop,\na little more traditional like.\n\n23\n00:01:17.530 --> 00:01:21.720\nAnd we looked at while loops which are,\na lot more complexity in there and\n\n24\n00:01:21.720 --> 00:01:23.188\nthe way we can use them.\n\n25\n00:01:23.188 --> 00:01:27.856\nWe're saying, while this statement is\ntrue, then do this, and then iterate\n\n26\n00:01:27.856 --> 00:01:32.185\nthrough as many times as we need to\nmaybe incrementing a value up or down.\n\n27\n00:01:32.185 --> 00:01:38.000\nNow until is very very similar\nto the while loop, right.\n\n28\n00:01:38.000 --> 00:01:41.000\nWhere as while is, while this statement\nis true, do something, right?\n\n29\n00:01:41.000 --> 00:01:46.080\nThe until loop is basically\nthe opposite of that.\n\n30\n00:01:46.080 --> 00:01:48.779\nIt's the exact opposite of that.\n\n31\n00:01:48.779 --> 00:01:53.980\nWhere it says until this\nstatement is true, do something.\n\n32\n00:01:53.980 --> 00:01:56.580\nAnd you're thinking why would I\nwant to do one over the other?\n\n33\n00:01:56.580 --> 00:01:59.233\nWe'll really it's just two\ndifferent ways to do the, well,\n\n34\n00:01:59.233 --> 00:02:01.300\nat least the same kind of thing.\n\n35\n00:02:01.300 --> 00:02:05.110\nAnd you'll find it to be easier to go,\n\n36\n00:02:05.110 --> 00:02:09.100\nthis a prime example of when I want to\ndo an until because I'm waiting for\n\n37\n00:02:09.100 --> 00:02:13.980\nsomething to become true and\nuntil that happens, I want this to occur.\n\n38\n00:02:13.980 --> 00:02:14.880\nWhereas while, I would say,\n\n39\n00:02:14.880 --> 00:02:19.430\nthis statement was already true and I\nwant to do something until it's not true.\n\n40\n00:02:19.430 --> 00:02:21.550\nRight so, that's when you\nwould use one over the other.\n\n41\n00:02:21.550 --> 00:02:25.710\nSo, that is a good thing for\nyou to try to wrap your mind around.\n\n42\n00:02:25.710 --> 00:02:27.405\nAnd, you'll see that as you\nstart building your scripts,\n\n43\n00:02:27.405 --> 00:02:30.230\nyou start coming up with ideas like man\nthis would be a good idea for a script,\n\n44\n00:02:30.230 --> 00:02:35.450\nand then you have to go in there and\nmake the syntax do what you need it to do,\n\n45\n00:02:35.450 --> 00:02:41.410\nthat's when you start thinking okay,\nwell now, here I'm waiting for a condition\n\n46\n00:02:41.410 --> 00:02:46.462\nto become true, therefore I need\nto use this type of loop okay.\n\n47\n00:02:46.462 --> 00:02:48.834\nSo with until that's what we're doing,\n\n48\n00:02:48.834 --> 00:02:53.441\nwe're saying that this condition is what\nwe need to meet and it's not true yet and\n\n49\n00:02:53.441 --> 00:02:56.015\nuntil it's true we need\nyou to do something,\n\n50\n00:02:56.015 --> 00:03:00.485\nand then we're gonna do something to make\nit true so that we can break our loop,\n\n51\n00:03:00.485 --> 00:03:04.664\njump out of the loop, and move along\nto something else, some more code.\n\n52\n00:03:04.664 --> 00:03:09.296\nSo that being said, again it's always\nbetter to show then to talk, just talk\n\n53\n00:03:09.296 --> 00:03:14.290\nabout it, let's jump into the computer and\nsee what these until loops look like.\n\n54\n00:03:14.290 --> 00:03:16.400\nSo I've got one ready for us here.\n\n55\n00:03:16.400 --> 00:03:18.830\nAnd, again kinda like what we did,\n\n56\n00:03:18.830 --> 00:03:21.310\nkinda follow the same path as\nwe did with the while loops.\n\n57\n00:03:21.310 --> 00:03:25.590\nWe will do, let's see here,\nI believe there is an infinite until.\n\n58\n00:03:25.590 --> 00:03:33.300\nThere is, okay, so nano, infinite,\nuntil, I misspelled it but whatever.\n\n59\n00:03:33.300 --> 00:03:33.810\n[LAUGH] There we go.\n\n60\n00:03:33.810 --> 00:03:35.758\nLet's take a look inside here and\nsee what's happening.\n\n61\n00:03:35.758 --> 00:03:40.516\nAgain start off with the standard shebang,\n/bin/bash,\n\n62\n00:03:40.516 --> 00:03:45.950\nwanna hammer that home and\nthen again I start with a variable right?\n\n63\n00:03:45.950 --> 00:03:47.960\nVariable i equals 0.\n\n64\n00:03:47.960 --> 00:03:50.764\nEasy peasy, nothing to it.\n\n65\n00:03:50.764 --> 00:03:52.483\nNow we have the until statement.\n\n66\n00:03:52.483 --> 00:03:56.871\nUntil something, and\nhere's our condition that we\n\n67\n00:03:56.871 --> 00:04:00.930\nneed to meet that I want\nyou to do something.\n\n68\n00:04:00.930 --> 00:04:04.490\nAnd you'll notice I could've\ndone I could've done this for\n\n69\n00:04:05.570 --> 00:04:09.530\nease of sake here, could've removed that\nand just did that on a separate line.\n\n70\n00:04:09.530 --> 00:04:11.558\nThat will also work.\n\n71\n00:04:11.558 --> 00:04:17.010\nAll I did was throw in that semicolon\nto make it all in one line.\n\n72\n00:04:17.010 --> 00:04:20.180\nThere's a really cool site out there\ncalled Bash One-Liners and it's seeing\n\n73\n00:04:20.180 --> 00:04:24.340\nbasically, how can you create an entire\nscript that you work on one line.\n\n74\n00:04:24.340 --> 00:04:25.870\nSo it can get really interesting.\n\n75\n00:04:25.870 --> 00:04:26.560\nIt's a lot of fun.\n\n76\n00:04:26.560 --> 00:04:29.130\nAnd it will help you understand\na lot of scripting that's going on.\n\n77\n00:04:29.130 --> 00:04:31.690\nSo it's a good site for\nyou guys to check out.\n\n78\n00:04:31.690 --> 00:04:34.850\nOther than that,\ngoing back to our script here we see\n\n79\n00:04:34.850 --> 00:04:36.240\nthat until this statement is true.\n\n80\n00:04:36.240 --> 00:04:37.510\nWell what is the statement?\n\n81\n00:04:37.510 --> 00:04:39.240\nThe statement is the variable, i.\n\n82\n00:04:39.240 --> 00:04:40.760\nWe're referencing that.\n\n83\n00:04:40.760 --> 00:04:42.640\nWhatever that is, it should equal 1.\n\n84\n00:04:42.640 --> 00:04:49.670\nSo if it doesn't equal 1, until it\nequals 1, I want you to do something.\n\n85\n00:04:49.670 --> 00:04:50.960\nWhat is that?\n\n86\n00:04:50.960 --> 00:04:55.460\nI want you to echo the value of i is i,\nwhatever that is.\n\n87\n00:04:55.460 --> 00:04:58.360\nSo whatever it's current value is,\nthat's what I want you to echo.\n\n88\n00:04:58.360 --> 00:05:02.591\nAnd then, of course, as always, you've\ngotta remember to close out a lot of\n\n89\n00:05:02.591 --> 00:05:06.629\nyour statements and in this statement,\nthe do statement specifically,\n\n90\n00:05:06.629 --> 00:05:10.952\ngotta put that done command there so\nit knows that's the end of the code block.\n\n91\n00:05:10.952 --> 00:05:14.499\nNow that we see that,\nI'm taking a look at this and\n\n92\n00:05:14.499 --> 00:05:17.631\nI'm seeing some interesting things here.\n\n93\n00:05:17.631 --> 00:05:19.326\nAnd Ronnie I'm gonna throw\nyou back on the spot.\n\n94\n00:05:19.326 --> 00:05:20.742\nYou're gonna be my guinea pig.\n\n95\n00:05:20.742 --> 00:05:25.802\nAgain, I've kinda tilted my hand, I'd be\nsurprised if he doesn't get this right,\n\n96\n00:05:25.802 --> 00:05:29.120\nbut what do you think that\nthis statement is going to do.\n\n97\n00:05:29.120 --> 00:05:29.715\nWhat do you think this\nscript is going to do?\n\n98\n00:05:29.715 --> 00:05:35.530\n>> All right so\nif I can read this correctly, right?\n\n99\n00:05:35.530 --> 00:05:39.350\nAs long as i equals\nzero it should continue\n\n100\n00:05:39.350 --> 00:05:41.820\nto run until we actually\nget i to equal one.\n\n101\n00:05:41.820 --> 00:05:42.640\n>> That's right.\n\n102\n00:05:42.640 --> 00:05:43.820\n>> And so.\nIn other words,\n\n103\n00:05:43.820 --> 00:05:46.300\nit should look until i equals one.\n\n104\n00:05:46.300 --> 00:05:47.104\n>> When do you think\nthat's going to happen?\n\n105\n00:05:47.104 --> 00:05:51.237\n>> As of right now, it should not happen,\nas far as I can tell in the script.\n\n106\n00:05:51.237 --> 00:05:51.933\n>> That's exactly right.\n\n107\n00:05:51.933 --> 00:05:56.110\nOkay, hence the name\ninfinite until dot sh.\n\n108\n00:05:56.110 --> 00:05:59.540\nHelps me remember which one\nof these scripts is which.\n\n109\n00:05:59.540 --> 00:06:00.690\nThis is my infinite loop.\n\n110\n00:06:00.690 --> 00:06:04.460\nAgain, we gotta remember to look out for\ninfinite loops.\n\n111\n00:06:04.460 --> 00:06:09.240\nInfinite loops, it's super easy to forget\nthat we need to change the statement or\n\n112\n00:06:09.240 --> 00:06:11.396\nthe condition that we have.\n\n113\n00:06:11.396 --> 00:06:15.860\nIf we don't change that condition,\nwe're just going to go on forever so it's\n\n114\n00:06:15.860 --> 00:06:18.820\nsomething I wanted to harp on, something\nI wanted to bury into your brain.\n\n115\n00:06:18.820 --> 00:06:22.060\nDon't write infinite loops unless for\nwhatever reason you may need it to\n\n116\n00:06:22.060 --> 00:06:26.060\nrun infinitely, I can't think of\nanything at the top of my head why\n\n117\n00:06:26.060 --> 00:06:29.730\nI would want an infinite loop to run, I'm\nsure there are reasons for that, but for\n\n118\n00:06:29.730 --> 00:06:34.410\nright now, trying to help you not write\ninfinite loops that just you're going, no,\n\n119\n00:06:34.410 --> 00:06:35.980\nmy script has gone crazy.\n\n120\n00:06:35.980 --> 00:06:39.580\nAnd especially if you're trying\nto go to production thing,\n\n121\n00:06:39.580 --> 00:06:42.530\nit's just one less thing\nyou gotta worry about.\n\n122\n00:06:42.530 --> 00:06:46.630\nSo make sure that when you're done doing\nwhatever it is you're doing, you make some\n\n123\n00:06:46.630 --> 00:06:51.310\nconditional change so that your\nstatement changes and breaks the loop.\n\n124\n00:06:51.310 --> 00:06:52.025\nOkay, so look out for infinite loops.\n\n125\n00:06:52.025 --> 00:06:55.658\nAnd Ronnie is actually 100% correct,\nthis will be an infinite loop.\n\n126\n00:06:55.658 --> 00:07:02.067\nLet's run this guy and see what happens\nhere, Ctrl+X, yeah that's okay.\n\n127\n00:07:02.067 --> 00:07:06.824\nI will say no because that's fine,\nit should run just the way it is.\n\n128\n00:07:06.824 --> 00:07:10.048\nSo ./ and we will give it the infinite,\n\n129\n00:07:10.048 --> 00:07:13.935\nhow did I misspell this thing,\nI don't ever know.\n\n130\n00:07:13.935 --> 00:07:14.880\n>> [LAUGH]\n>> Here we go.\n\n131\n00:07:15.930 --> 00:07:19.600\nAnd there it goes, it's off to the races,\nthis thing is going berserk on me.\n\n132\n00:07:19.600 --> 00:07:22.730\nThe value of i is 0,\nyes we know the value of i is 0,\n\n133\n00:07:22.730 --> 00:07:24.020\nthank you script, you can stop now.\n\n134\n00:07:24.020 --> 00:07:28.471\nRemember, you get caught in an infinite\nloop, easy way to get out of it is do the,\n\n135\n00:07:28.471 --> 00:07:32.530\non your keyboard, Control and just hold\nthat down and hit c, Control c and\n\n136\n00:07:32.530 --> 00:07:36.198\nthat should stop your loop, and\nsometimes it gets really stuck and\n\n137\n00:07:36.198 --> 00:07:40.192\nyou just do a bunch of them and then that\nshould break you out of there and so\n\n138\n00:07:40.192 --> 00:07:44.054\nif get that infinite loop, Control c\nshould get you out of the weeds but\n\n139\n00:07:44.054 --> 00:07:48.098\nthat means we need to fix this statement,\nit's not working correctly.\n\n140\n00:07:48.098 --> 00:07:53.559\nAnd like I said, this is basically\nthe opposite of that while loop right?\n\n141\n00:07:53.559 --> 00:07:56.627\nBut the only real difference\nis in the condition.\n\n142\n00:07:56.627 --> 00:07:58.996\nSo, I need to Just change the condition.\n\n143\n00:07:58.996 --> 00:08:02.293\nSo until that condition equals true,\nit'll continue to go.\n\n144\n00:08:02.293 --> 00:08:06.827\nI need to make that condition true so\nthat the loop will stop.\n\n145\n00:08:06.827 --> 00:08:09.481\nAnd if you think back to\nour pervious episode,\n\n146\n00:08:09.481 --> 00:08:14.120\nwe kind of did the exact same thing, just\nin the opposite way with our while loop.\n\n147\n00:08:14.120 --> 00:08:19.119\nSo I'm guessing Ronnie will be able to\nguess how we can go about doing that.\n\n148\n00:08:19.119 --> 00:08:20.453\nRonnie?\n\n149\n00:08:20.453 --> 00:08:25.159\n>> I'm assuming that what we have to do is\nwe have to be able to increment the i to\n\n150\n00:08:25.159 --> 00:08:29.290\nbe a value besides zero, so\nwe need to add in another line of code.\n\n151\n00:08:29.290 --> 00:08:33.140\n>> That is right, we just need one little\nextra line of code to make that true,\n\n152\n00:08:33.140 --> 00:08:33.800\nand let's do that.\n\n153\n00:08:33.800 --> 00:08:37.112\nLet's go in here and actually,\nI have already written it, and\n\n154\n00:08:37.112 --> 00:08:38.244\nit should be in here.\n\n155\n00:08:38.244 --> 00:08:39.710\nIt should be regular until, there it is.\n\n156\n00:08:39.710 --> 00:08:42.560\nWe'll nano regular until.\n\n157\n00:08:44.680 --> 00:08:49.285\nAnd there it is, now hopefully that piece\nof code jumps right out off the screen and\n\n158\n00:08:49.285 --> 00:08:50.369\nyou see it easily.\n\n159\n00:08:50.369 --> 00:08:54.495\nYou'll notice everything is basically\nthe same, a little bit different.\n\n160\n00:08:54.495 --> 00:08:59.619\nWhat I've said here is, until i equals 10,\ndo the value of i as i, right?\n\n161\n00:08:59.619 --> 00:09:02.121\nAnd so instead of one, well,\nI want to do it more than one time,\n\n162\n00:09:02.121 --> 00:09:03.702\n[INAUDIBLE] see a loop actually happen.\n\n163\n00:09:03.702 --> 00:09:05.328\nNot to have one thing happen.\n\n164\n00:09:05.328 --> 00:09:08.020\nBut I could have easily done\nit with something else.\n\n165\n00:09:08.020 --> 00:09:11.290\nThis gives you a little\nmore true effect of a loop.\n\n166\n00:09:11.290 --> 00:09:14.450\nSo what I've done is I've said,\ni equals zero.\n\n167\n00:09:14.450 --> 00:09:15.540\nEasy.\n\n168\n00:09:15.540 --> 00:09:22.161\nUntil i equals 10, do echo the value\nof i is whatever is in that variable.\n\n169\n00:09:22.161 --> 00:09:25.827\nSo right now it's 0, so it should echo 0.\n\n170\n00:09:25.827 --> 00:09:26.703\nAnd then what does it do?\n\n171\n00:09:26.703 --> 00:09:34.010\nHere's our real line of code that changes\nwhat's happening to the condition, right?\n\n172\n00:09:34.010 --> 00:09:36.952\nWhat this does is\nincrements i by one place.\n\n173\n00:09:36.952 --> 00:09:41.121\nSo zero will become one, and it'll run\nthrough i again and it'll say well,\n\n174\n00:09:41.121 --> 00:09:43.744\ni doesn't equal 10 yet, it still equals 1.\n\n175\n00:09:43.744 --> 00:09:46.032\nNow the problem,\nas you'll see with stuff like this,\n\n176\n00:09:46.032 --> 00:09:49.440\nI'm already seeing a little problem,\nthis is a demonstration.\n\n177\n00:09:49.440 --> 00:09:53.162\nLet's see what if does first and\nthen I'll show you what the problem is.\n\n178\n00:09:53.162 --> 00:09:54.037\nSo let's see what happens here.\n\n179\n00:09:54.037 --> 00:09:58.193\nI'm going to Ctrl+X and should add, and\n\n180\n00:09:58.193 --> 00:10:01.896\nbasically go through these things.\n\n181\n00:10:01.896 --> 00:10:06.786\nSo ./regular_until,\nthere we go and there we go.\n\n182\n00:10:06.786 --> 00:10:11.386\nVery simple, the value of i is zero,\nthat are incremented by 1 and\n\n183\n00:10:11.386 --> 00:10:13.536\nit printed the value of i is 1.\n\n184\n00:10:13.536 --> 00:10:18.343\nAnd it echoed the value of i is 2 as\nit continues to increment up till 9,\n\n185\n00:10:18.343 --> 00:10:21.327\nyou notice it didn't put 10 there right?\n\n186\n00:10:21.327 --> 00:10:26.495\nBecause until it equals 10 do this if\nit does equal 10 then don't do that.\n\n187\n00:10:26.495 --> 00:10:29.953\nAnd I didn't even realize I did this\nbefore I started with this script.\n\n188\n00:10:29.953 --> 00:10:31.536\nBecause, A, it's a demonstration.\n\n189\n00:10:31.536 --> 00:10:35.734\nIf this was a real script, I probably\nwould want to change it a little bit,\n\n190\n00:10:35.734 --> 00:10:39.411\nbecause of what I've said\nthe condition is, if it equals 10.\n\n191\n00:10:39.411 --> 00:10:40.952\nWell, what if it equals 11?\n\n192\n00:10:40.952 --> 00:10:42.286\nWhat does it do?\n\n193\n00:10:42.286 --> 00:10:43.577\nIt continues to go.\n\n194\n00:10:43.577 --> 00:10:48.404\nSo if somehow I put in the code there, and\nsome way I actually made a mistake, and\n\n195\n00:10:48.404 --> 00:10:51.369\nmaybe I'm incrementing\nit by 2 accidentally.\n\n196\n00:10:51.369 --> 00:10:52.952\nRight, and it skips 10, right?\n\n197\n00:10:52.952 --> 00:10:53.990\nMaybe I did 3.\n\n198\n00:10:53.990 --> 00:10:56.360\nIf I do powers of 3,\nit will never equal 10, and\n\n199\n00:10:56.360 --> 00:11:00.890\nthis will be an infinite loop because\nI'll never reach that decision.\n\n200\n00:11:00.890 --> 00:11:04.576\nRight of that statement that\ncondition to say i = 10.\n\n201\n00:11:04.576 --> 00:11:08.602\nSo you need to be really careful about how\nyou word your conditions because if it\n\n202\n00:11:08.602 --> 00:11:12.628\ndoesn't see that condition with until or\nwhile, it's not gonna meet that and\n\n203\n00:11:12.628 --> 00:11:16.170\nit's gonna continue to loop and\nyou're gonna get an infinite loop.\n\n204\n00:11:16.170 --> 00:11:21.310\nSo you gotta be really careful, so\nfor me I would probably wanna say,\n\n205\n00:11:21.310 --> 00:11:24.869\nas long as this is less than or\nequal to, right.\n\n206\n00:11:24.869 --> 00:11:26.536\nThen do that.\n\n207\n00:11:26.536 --> 00:11:30.613\nSo work my way through it, that way if it\nskipped ten accidentally, I wouldn't be\n\n208\n00:11:30.613 --> 00:11:34.830\ncaught in an infinite loop, at least if\nI'm thinking right, that should be right.\n\n209\n00:11:34.830 --> 00:11:37.702\nIf this equals or less than or\nequal to ten, then run the loop.\n\n210\n00:11:37.702 --> 00:11:39.119\nYeah that works.\n\n211\n00:11:39.119 --> 00:11:44.134\nSo hopefully that makes sense, just look\nout for little things like that that can\n\n212\n00:11:44.134 --> 00:11:49.110\ncause you problems in your scripts, so\nyou don't get caught out in the weeds.\n\n213\n00:11:49.110 --> 00:11:52.380\n>> I was just trying to think of, at least\nfor me, an example of where this script\n\n214\n00:11:52.380 --> 00:11:56.290\nwould actually be very helpful, and I was\nthinking of something like the backups\n\n215\n00:11:56.290 --> 00:12:00.300\nthat you were talking about that as\nlong as there's nothing to back up then\n\n216\n00:12:00.300 --> 00:12:02.480\nyou kind of ignore it or\nyou tell it to do something else.\n\n217\n00:12:02.480 --> 00:12:05.120\nBut then once there's actually\nsomething to change or\n\n218\n00:12:05.120 --> 00:12:06.600\nback up then it runs something.\n\n219\n00:12:06.600 --> 00:12:11.050\nAnd so I think that might actually be\nan example of where we might find the idea\n\n220\n00:12:11.050 --> 00:12:11.830\nof using an until.\n\n221\n00:12:11.830 --> 00:12:16.453\n>> Yeah, I could actually even take the\nback up script that we wrote for while.\n\n222\n00:12:16.453 --> 00:12:18.377\nRemember that really long back up\nscript and it went through and\n\n223\n00:12:18.377 --> 00:12:19.395\nmade the TAR archives.\n\n224\n00:12:19.395 --> 00:12:23.077\nIf you've just joining us here and\nyou didn't see that episode.\n\n225\n00:12:23.077 --> 00:12:23.870\nWe did that.\n\n226\n00:12:23.870 --> 00:12:26.024\n[LAUGH] And it was cool.\n\n227\n00:12:26.024 --> 00:12:28.655\nI can do the exact same\nthing with the until right?\n\n228\n00:12:28.655 --> 00:12:32.840\nI would just change the statements,\ninstead of a while put until and\n\n229\n00:12:32.840 --> 00:12:37.702\nthen the condition I would change and\nthen the incrementation I would change.\n\n230\n00:12:37.702 --> 00:12:39.702\nAnd it would basically\ndo the exact same thing.\n\n231\n00:12:39.702 --> 00:12:41.244\nIt's just, what do you wanna do?\n\n232\n00:12:41.244 --> 00:12:41.912\nRonnie's right.\n\n233\n00:12:41.912 --> 00:12:48.577\nWhat if I use the output of a command\nto give me, what if it's a number?\n\n234\n00:12:48.577 --> 00:12:52.036\nAnd I could say, that number is\nless than until it equals this.\n\n235\n00:12:52.036 --> 00:12:56.530\nSo I'm writing, maybe I write a script\nthat says don't back up until we have 10\n\n236\n00:12:56.530 --> 00:12:57.994\nfiles to back up, right?\n\n237\n00:12:57.994 --> 00:13:02.330\nThat's a good way in which you\nwould want to use an until.\n\n238\n00:13:02.330 --> 00:13:08.720\nSo until we have log.10.tar,\nor whatever, right?\n\n239\n00:13:08.720 --> 00:13:10.070\nIt wouldn't do anything.\n\n240\n00:13:10.070 --> 00:13:11.370\nIt would just continue to, but\n\n241\n00:13:11.370 --> 00:13:14.760\nonce it reached that iteration of 10,\nthen you run your script.\n\n242\n00:13:14.760 --> 00:13:15.780\nThen it would do it.\n\n243\n00:13:15.780 --> 00:13:19.040\nIt would back all of that up into one\nbig archive, move it somewhere else,\n\n244\n00:13:19.040 --> 00:13:23.740\nmaybe to an external hard drive and\nthen you'd be done.\n\n245\n00:13:24.980 --> 00:13:27.120\nBut it wouldn't do it\nuntil it reached that.\n\n246\n00:13:27.120 --> 00:13:28.950\nSo that was something you\ncould run on a daily basis.\n\n247\n00:13:28.950 --> 00:13:32.286\nMaybe set up a scheduled\njob to run that script.\n\n248\n00:13:32.286 --> 00:13:35.252\nIt would look into that directory, see,\n\n249\n00:13:35.252 --> 00:13:38.911\nokay, count through all\nthe things that you have.\n\n250\n00:13:38.911 --> 00:13:43.270\nYou can do all this inside the script\nuntil, and then take that,\n\n251\n00:13:43.270 --> 00:13:48.276\nwhat you get from that, put that in\na variable, and until variable equals\n\n252\n00:13:48.276 --> 00:13:53.077\n10 then do this or while this is\nless than 10, don't do anything.\n\n253\n00:13:53.077 --> 00:13:55.119\nBut as soon as it equals 10,\nrun that right?\n\n254\n00:13:55.119 --> 00:13:55.827\nSo, now you can see.\n\n255\n00:13:55.827 --> 00:13:57.660\nThat's how we use these loops.\n\n256\n00:13:57.660 --> 00:13:59.535\nThat's how they make our\nlives a whole lot easier.\n\n257\n00:13:59.535 --> 00:14:01.578\nAutomation, that's what it's all about.\n\n258\n00:14:01.578 --> 00:14:02.869\n>> All right, Daniel.\n\n259\n00:14:02.869 --> 00:14:06.168\nThat actually does seem to give us some\nmore options than just saying, look,\n\n260\n00:14:06.168 --> 00:14:09.820\nhere's what our situation is, here's our\ncondition with just the for statement.\n\n261\n00:14:09.820 --> 00:14:13.230\nAnd if we have that condition,\nthen we can actually run whatever\n\n262\n00:14:13.230 --> 00:14:16.630\nwe need with that loop and\ngoing through that list of things.\n\n263\n00:14:16.630 --> 00:14:18.369\nWe can also see while\nactually working as well.\n\n264\n00:14:18.369 --> 00:14:20.750\nAnd now we also have the until.\n\n265\n00:14:20.750 --> 00:14:23.270\nBut Daniel, there's actually\nat least a couple of more.\n\n266\n00:14:23.270 --> 00:14:26.480\nAnd what we're actually looking at\nnext is what we call nested loops.\n\n267\n00:14:26.480 --> 00:14:27.460\n>> Yes.\n>> So, okay,\n\n268\n00:14:27.460 --> 00:14:29.619\nhelp us out with nested loops.\n\n269\n00:14:29.619 --> 00:14:33.213\n>> So nested loops, so one of our\nchatroom viewers was all about this,\n\n270\n00:14:33.213 --> 00:14:37.578\nfervently asking about that because this\nis something that you'll probably do.\n\n271\n00:14:37.578 --> 00:14:41.688\nNesting things inside of things is\nstandard operating procedure when it comes\n\n272\n00:14:41.688 --> 00:14:42.585\nto scripting.\n\n273\n00:14:42.585 --> 00:14:46.569\nYou'll start to see that as you write\nscripts that are doing something for\n\n274\n00:14:46.569 --> 00:14:48.827\nyou in real life, real practical stuff.\n\n275\n00:14:48.827 --> 00:14:50.385\nSo what do we mean?\n\n276\n00:14:50.385 --> 00:14:52.410\nRemember we talked about\nifs back in the day?\n\n277\n00:14:52.410 --> 00:14:55.895\nRight, we were in that episode\ngoing through the if statements and\n\n278\n00:14:55.895 --> 00:14:58.155\nwe could nest ifs inside of themselves.\n\n279\n00:14:58.155 --> 00:15:00.990\nSo if this is true, then do this.\n\n280\n00:15:00.990 --> 00:15:04.360\nAnd while that's true, if this is also\ntrue then you can do something else, and\n\n281\n00:15:04.360 --> 00:15:05.270\ngo on from there.\n\n282\n00:15:05.270 --> 00:15:08.730\nWell, whiles, and untils,\nand for loops, same idea.\n\n283\n00:15:08.730 --> 00:15:12.369\nWe can do, while this is true do that.\n\n284\n00:15:12.369 --> 00:15:17.453\nAnd then while this is also true,\ninside of that do something else or for\n\n285\n00:15:17.453 --> 00:15:23.412\nloops, specifically with the C style,\nthose are very similar to while and until.\n\n286\n00:15:23.412 --> 00:15:26.661\nThey come in handy and\nyou can mix and match the two.\n\n287\n00:15:26.661 --> 00:15:30.576\nYou can put any command inside of\nanother command as long as it's\n\n288\n00:15:30.576 --> 00:15:33.350\nsyntactically correct, it should work.\n\n289\n00:15:33.350 --> 00:15:34.520\nBecause that's all they are.\n\n290\n00:15:34.520 --> 00:15:35.970\nThey're just lines of commands.\n\n291\n00:15:35.970 --> 00:15:40.950\nSo if I have an if statement happening,\nI can throw a while in there right?\n\n292\n00:15:40.950 --> 00:15:43.410\nIf I have a while statement happening,\nI can throw a for\n\n293\n00:15:43.410 --> 00:15:47.870\nin there, I can do a for inside of a for,\nI can do an until inside of an until.\n\n294\n00:15:47.870 --> 00:15:52.262\nI can do any combinations of two that I\nwant and again it all comes down to what\n\n295\n00:15:52.262 --> 00:15:55.219\nyour application is,\nhow you make that work out.\n\n296\n00:15:55.219 --> 00:15:59.485\nBut I might be until this statement\nis true I want this to happen and\n\n297\n00:15:59.485 --> 00:16:03.537\nyou're changing Changing\nthe value of your variable right.\n\n298\n00:16:03.537 --> 00:16:09.184\nI am saying that while wile is\nnot equal to ten then do this,\n\n299\n00:16:09.184 --> 00:16:14.139\nbut what if I make and\nI see the value of i is four, and\n\n300\n00:16:14.139 --> 00:16:19.587\nI get to four and I say,\nwell while i equals four do this.\n\n301\n00:16:19.587 --> 00:16:21.974\nAnd I can give it a subset of commands, so\n\n302\n00:16:21.974 --> 00:16:25.497\nit's basically building like\na subsection of structures, or\n\n303\n00:16:25.497 --> 00:16:29.961\na subsection of commands to do inside of\nwhat commands you are already running.\n\n304\n00:16:29.961 --> 00:16:34.581\nSo it can get really tricky and get really\nhairy but if you think about it logically,\n\n305\n00:16:34.581 --> 00:16:37.228\nyou put the logic in place,\nit will make sense.\n\n306\n00:16:37.228 --> 00:16:39.958\nI have a real simple example for\nus to take a look and\n\n307\n00:16:39.958 --> 00:16:42.824\nsee how this works itself\nout just using four loops.\n\n308\n00:16:42.824 --> 00:16:46.212\nWe're going to use a C style loops so\nthat it's a little cleaner,\n\n309\n00:16:46.212 --> 00:16:48.384\na little neater And we can work with that.\n\n310\n00:16:48.384 --> 00:16:51.601\nSo let's see,\nI'm gonna clear my screen out real quick.\n\n311\n00:16:51.601 --> 00:16:53.654\nAnd what is the name of that command?\n\n312\n00:16:53.654 --> 00:16:56.801\nI had it, I'll call it, here we go.\n\n313\n00:16:56.801 --> 00:16:57.520\nIt's called nested.\n\n314\n00:16:57.520 --> 00:17:00.482\nOne nested, it started right at\nthe beginning of the list, I missed it.\n\n315\n00:17:00.482 --> 00:17:01.538\nSo let's see here.\n\n316\n00:17:01.538 --> 00:17:06.157\nNano 1nested_loop.sh.\n\n317\n00:17:06.157 --> 00:17:08.363\nSo here we go, this is a nested loop.\n\n318\n00:17:08.363 --> 00:17:11.995\nYou'll notice there are two for\ncommands, two do commands, and\n\n319\n00:17:11.995 --> 00:17:13.588\ntwo done commands, right?\n\n320\n00:17:13.588 --> 00:17:18.533\nVery important that you've gotta have\ndo and done, right, if you open a for.\n\n321\n00:17:18.533 --> 00:17:22.005\nBut let's start from the beginning and\nsee what's going on.\n\n322\n00:17:22.005 --> 00:17:25.023\nSo standard for command, C style, right?\n\n323\n00:17:25.023 --> 00:17:27.426\nWe have for open parentheses,\nopen parentheses.\n\n324\n00:17:27.426 --> 00:17:32.081\nWe declare a variable a It equals one.\n\n325\n00:17:32.081 --> 00:17:36.005\nVery easy,\nnothing too out of the ballpark yet.\n\n326\n00:17:36.005 --> 00:17:40.987\nThen remember, we do these things inside\nthat c style using that semicolon,\n\n327\n00:17:40.987 --> 00:17:42.728\nso make sure those are there.\n\n328\n00:17:42.728 --> 00:17:47.100\nIf I had another variable, it would be\nseparated the two variables by our commas\n\n329\n00:17:47.100 --> 00:17:50.298\nand then we separate our conditions,\nour variables, and\n\n330\n00:17:50.298 --> 00:17:52.207\nour iterations by the semicolon.\n\n331\n00:17:52.207 --> 00:17:57.250\nSo here's our condition,\nbasically saying that while\n\n332\n00:17:57.250 --> 00:18:02.398\na is less than or equal to three,\nthen increments by one,\n\n333\n00:18:02.398 --> 00:18:06.708\nthat's the plus plus and\necho go through this.\n\n334\n00:18:06.708 --> 00:18:09.308\nNow notice what happens as we get to echo.\n\n335\n00:18:09.308 --> 00:18:11.966\nWe start four again, right.\n\n336\n00:18:11.966 --> 00:18:14.671\nAnd we're saying, so\nwhat's going to happen.\n\n337\n00:18:14.671 --> 00:18:19.707\nSo far we're saying, echo, loop,\nnumber a, so right now a equals one so\n\n338\n00:18:19.707 --> 00:18:23.783\nthis should say one and\nthen it's going to say b equals one.\n\n339\n00:18:23.783 --> 00:18:27.349\nAnd that's okay, you can have a b c and\nd all hundred of them if you want,\n\n340\n00:18:27.349 --> 00:18:29.927\nthat all equal the exact same thing,\nthat is fine.\n\n341\n00:18:29.927 --> 00:18:32.110\nThey're still different variables okay?\n\n342\n00:18:32.110 --> 00:18:36.513\nSo maybe we're gonna modify what a is and\nmaybe we're gonna modify what b is,\n\n343\n00:18:36.513 --> 00:18:38.976\nit's okay if they're the same variable.\n\n344\n00:18:38.976 --> 00:18:41.405\nThey're not the same value.\n\n345\n00:18:41.405 --> 00:18:43.845\nThey're not the same variable,\nthey are different.\n\n346\n00:18:43.845 --> 00:18:46.304\nSo and\nthat's why I'm using a different variable.\n\n347\n00:18:46.304 --> 00:18:49.416\nBecause I'm gonna change what a equals.\n\n348\n00:18:49.416 --> 00:18:51.320\nI'm also gonna change what b equals.\n\n349\n00:18:51.320 --> 00:18:53.177\nAnd maybe they're not\ngonna be the same thing.\n\n350\n00:18:53.177 --> 00:18:54.897\nSo that's why I need two\ndifferent variables,\n\n351\n00:18:54.897 --> 00:18:56.625\nthat's why I need two different for\ncommands.\n\n352\n00:18:56.625 --> 00:19:01.106\nBecause I'm gonna work a loop on\nboth of these different variables.\n\n353\n00:19:01.106 --> 00:19:03.985\nSo we're saying for, and\nwe have our variable b=1.\n\n354\n00:19:03.985 --> 00:19:08.450\nThen we have b is less than or\nequal to three,\n\n355\n00:19:08.450 --> 00:19:12.936\nthen increment b by one degree or\none digit.\n\n356\n00:19:12.936 --> 00:19:14.061\nAnd then we're gonna do what?\n\n357\n00:19:14.061 --> 00:19:16.870\nWe're gonna say echo, nested loop b.\n\n358\n00:19:16.870 --> 00:19:21.098\nSo whatever B equals which, and\nwhen it starts off, it should be one.\n\n359\n00:19:21.098 --> 00:19:26.167\nAnd then inside loop whatever A equals\nat this current time and place.\n\n360\n00:19:26.167 --> 00:19:28.060\nSo, the first time we run it.\n\n361\n00:19:28.060 --> 00:19:30.570\nA at this point is gonna equal one.\n\n362\n00:19:30.570 --> 00:19:35.010\nAs it exits that loop and\nstarts again, it's gonna equal two.\n\n363\n00:19:35.010 --> 00:19:38.530\nAnd then it's gonna exit because\nremember our statement here as well.\n\n364\n00:19:38.530 --> 00:19:39.800\nIt's less than or equal to three.\n\n365\n00:19:39.800 --> 00:19:41.340\nWe're gonna continue to run.\n\n366\n00:19:41.340 --> 00:19:44.560\nSo once it equals three,\nthree will be the last iteration and we're\n\n367\n00:19:44.560 --> 00:19:48.990\ngonna get three iterations of this as well\ncuz they're basically the same command.\n\n368\n00:19:48.990 --> 00:19:49.900\nSo that's what we're doing.\n\n369\n00:19:49.900 --> 00:19:54.350\nWe're creating one loop that iterates\nthree times and we're creating a sub-loop.\n\n370\n00:19:54.350 --> 00:19:57.250\nIt iterates three times for each loop.\n\n371\n00:19:57.250 --> 00:19:58.020\nThat make sense?\n\n372\n00:19:58.020 --> 00:19:59.135\nHopefully that made sense.\n\n373\n00:19:59.135 --> 00:20:01.750\nIt should make a little more\nsense when we actually do it.\n\n374\n00:20:01.750 --> 00:20:03.409\nLet's do that.\n\n375\n00:20:03.409 --> 00:20:06.592\nAnd then don't forget your done commands.\n\n376\n00:20:06.592 --> 00:20:11.899\nI'm the king of forgetting to put\nsome sort of syntactical ending.\n\n377\n00:20:11.899 --> 00:20:15.427\nI'm Michael Bolton from Office Space.\n\n378\n00:20:15.427 --> 00:20:17.624\nIt's always one little thing I forget.\n\n379\n00:20:17.624 --> 00:20:18.707\nI do the exact same thing.\n\n380\n00:20:18.707 --> 00:20:23.173\nSo don't forget those done commands there,\ndon't forget, things like these semicolons\n\n381\n00:20:23.173 --> 00:20:26.081\nand don't forget dollar signs\nin front of your variables.\n\n382\n00:20:26.081 --> 00:20:29.533\nSo let's get out of here,\nlet's run this guy and see what happens.\n\n383\n00:20:29.533 --> 00:20:34.745\nDot slash, 1nested_loop.sh then return and\n\n384\n00:20:34.745 --> 00:20:38.184\nnow we see that output, right?\n\n385\n00:20:38.184 --> 00:20:40.099\nSo that's exactly what happened.\n\n386\n00:20:40.099 --> 00:20:42.557\nWe said the running loop number one,\n\n387\n00:20:42.557 --> 00:20:45.900\nI said it was the first\niteration to where we had a.\n\n388\n00:20:45.900 --> 00:20:47.641\nAnd then it went into that,\n\n389\n00:20:47.641 --> 00:20:52.881\nit echoed the command running loop number\nwhatever variable a was, which is one.\n\n390\n00:20:52.881 --> 00:20:58.771\nThen it ran the next loop, that next for\nloop, so basically the same type\n\n391\n00:20:58.771 --> 00:21:03.998\nof loop and it said, running nested\nloop one inside of loop one.\n\n392\n00:21:03.998 --> 00:21:07.109\nAnd it said running nested loop\ntwo because this runs three times.\n\n393\n00:21:07.109 --> 00:21:08.896\nSo we get one, two, and three.\n\n394\n00:21:08.896 --> 00:21:11.775\nThere it is, one, two, and three.\n\n395\n00:21:11.775 --> 00:21:14.631\nBut they're all running\ninside of loop one.\n\n396\n00:21:14.631 --> 00:21:17.315\nOnce loop one is done, what happens?\n\n397\n00:21:17.315 --> 00:21:19.835\nIt increments to be number two.\n\n398\n00:21:19.835 --> 00:21:23.208\nAnd since it doesn't meet\nthe the while condition,\n\n399\n00:21:23.208 --> 00:21:25.822\nhas it broken that while condition yet?\n\n400\n00:21:25.822 --> 00:21:29.397\nThen we go right back through\nthe same process, the second for\n\n401\n00:21:29.397 --> 00:21:32.580\nloop does it's magic,\nit does one, two, and three.\n\n402\n00:21:32.580 --> 00:21:36.068\nAnd it does it inside of loop two and\nthe same is true for loop three.\n\n403\n00:21:36.068 --> 00:21:42.420\nFinally, meeting the while statement's\ncondition of less than or equal to,\n\n404\n00:21:42.420 --> 00:21:46.640\nor breaking it I should say, it's breaking\nthat statement and finally exiting.\n\n405\n00:21:46.640 --> 00:21:51.090\nAnd out of there so even though\nwe're not using the while command or\n\n406\n00:21:51.090 --> 00:21:53.510\nthe until command, that's what\nthat c style four command is for.\n\n407\n00:21:53.510 --> 00:21:56.230\nSo it kind of kills two\nbirds with one stone.\n\n408\n00:21:56.230 --> 00:21:59.860\nWe can use while commands in this,\ndo the exact same operation,\n\n409\n00:21:59.860 --> 00:22:02.820\nwe can use until do the exact\nsame operation, we could mix and\n\n410\n00:22:02.820 --> 00:22:05.540\nmatch them if we liked and\ndone the exact same operation.\n\n411\n00:22:05.540 --> 00:22:08.570\nThe great thing about scripting,\nLinux, bash, all that other goodness,\n\n412\n00:22:08.570 --> 00:22:12.510\nis there's always 12 different\nways to do one thing.\n\n413\n00:22:12.510 --> 00:22:16.126\nYou just find the way that you like\nthe best, that works best for you, and\n\n414\n00:22:16.126 --> 00:22:18.750\nrun through, but\nthat's basically nested loops.\n\n415\n00:22:18.750 --> 00:22:22.577\nPutting one loop inside of\nanother loop to do sub commands.\n\n416\n00:22:22.577 --> 00:22:23.761\nThat's what's happening right there.\n\n417\n00:22:23.761 --> 00:22:25.444\nHopefully that makes sense to you guys.\n\n418\n00:22:25.444 --> 00:22:29.049\n>> All right Daniel, that does actually\nhelp us out a lot of times when we\n\n419\n00:22:29.049 --> 00:22:33.288\nactually start having where there's\nmultiple conditions that need to be made.\n\n420\n00:22:33.288 --> 00:22:36.799\nThe other thing that we also have of\ncourse is just that we need to redirect\n\n421\n00:22:36.799 --> 00:22:38.369\nthe output, not to the screen.\n\n422\n00:22:38.369 --> 00:22:39.832\nWe need to redirect it somewhere else.\n\n423\n00:22:39.832 --> 00:22:40.982\nSo Daniel, how do we do that?\n\n424\n00:22:40.982 --> 00:22:42.654\n>> Yeah, this is super easy.\n\n425\n00:22:42.654 --> 00:22:46.677\nThis is basically a gimme,\nan addendum on the end of this.\n\n426\n00:22:46.677 --> 00:22:52.602\nWhat if I wanna take all that running\nnested loop number one inside of the one,\n\n427\n00:22:52.602 --> 00:22:55.170\nall that, it's a lot of output.\n\n428\n00:22:55.170 --> 00:23:00.228\nA lot of our scripts will generate tons\nof output, and if it comes to the screen,\n\n429\n00:23:00.228 --> 00:23:04.756\nit's not the best with tons of output\nthe screen is not the best place for\n\n430\n00:23:04.756 --> 00:23:06.594\nit to generate that output.\n\n431\n00:23:06.594 --> 00:23:08.904\nThat's why we have redirection.\n\n432\n00:23:08.904 --> 00:23:12.792\nSo how can we redirect\nthe output of the command?\n\n433\n00:23:12.792 --> 00:23:14.072\nWell there's a couple ways to do it.\n\n434\n00:23:14.072 --> 00:23:17.582\nObviously we could just run our script and\n\n435\n00:23:17.582 --> 00:23:22.003\nredirect the output from\nthe command line to a file.\n\n436\n00:23:22.003 --> 00:23:23.582\nThat's the easy one right?\n\n437\n00:23:23.582 --> 00:23:27.367\nBut what if this is a job that runs?\n\n438\n00:23:27.367 --> 00:23:29.526\nWhat if I wanted to put\nthat function inside?\n\n439\n00:23:29.526 --> 00:23:31.987\nOr what if I just wanted that part?\n\n440\n00:23:31.987 --> 00:23:34.761\nJust wanted the loop section or whatever.\n\n441\n00:23:34.761 --> 00:23:37.524\nI wanna generate some output that way.\n\n442\n00:23:37.524 --> 00:23:40.067\nAnd I wanna send that to a file for\nlater looking at.\n\n443\n00:23:40.067 --> 00:23:41.971\nA lot of reasons that you'd wanna do this.\n\n444\n00:23:41.971 --> 00:23:42.667\nAnd it's super simple.\n\n445\n00:23:42.667 --> 00:23:46.626\nLike I said, this is basically a gimme.\n\n446\n00:23:46.626 --> 00:23:49.342\nI actually have created,\nit's called redirected, right?\n\n447\n00:23:49.342 --> 00:23:50.259\nYeah, redirected.\n\n448\n00:23:50.259 --> 00:23:55.270\nSo if I nano redirected,\nsimple little four loop that I have here,\n\n449\n00:23:55.270 --> 00:23:58.133\nand you'll notice at the end of done,\n\n450\n00:23:58.133 --> 00:24:03.280\nyou can do this with the done command,\nI have the redirector.\n\n451\n00:24:03.280 --> 00:24:04.506\nRight there.\n\n452\n00:24:04.506 --> 00:24:06.355\nRight?\nAnd then I just give it a file name.\n\n453\n00:24:06.355 --> 00:24:10.450\nAgain with redirection, if the file\ndoesn't exist, it will create it and\n\n454\n00:24:10.450 --> 00:24:11.951\nput that content in there.\n\n455\n00:24:11.951 --> 00:24:12.532\nThe file does.\n\n456\n00:24:12.532 --> 00:24:16.829\nDoes exist, it will overwrite it,\nokay, so beware of that.\n\n457\n00:24:16.829 --> 00:24:19.875\nYou have to do the,\nwhat's that called, what are they,\n\n458\n00:24:19.875 --> 00:24:23.434\ncan't think of the word where they\nattach addendum or something.\n\n459\n00:24:23.434 --> 00:24:25.850\nAppending, that's the word.\n\n460\n00:24:25.850 --> 00:24:27.800\nIt appends the file if used multiple,\nbut for\n\n461\n00:24:27.800 --> 00:24:30.880\nthis purpose I'm just going to redirect\nthat output straight to a file,\n\n462\n00:24:30.880 --> 00:24:34.990\nI don't care if it overwrites it and all\nyou have to do is add the redirector and\n\n463\n00:24:34.990 --> 00:24:41.130\nsay what file you want to put it to\neven if it doesn't exist that's fine.\n\n464\n00:24:41.130 --> 00:24:45.630\nNow if I run this command\nit should output all\n\n465\n00:24:45.630 --> 00:24:50.260\nthis stuff to a file called forloop.txt.\n\n466\n00:24:50.260 --> 00:24:55.109\nSo we'll see if that actually works\nitself out and let's see here ./,\n\n467\n00:24:55.109 --> 00:25:00.595\nwhat was that called forloop,\nredirected, ./redirected.\n\n468\n00:25:02.400 --> 00:25:04.143\nThere we go so that should work.\n\n469\n00:25:04.143 --> 00:25:09.030\nNotice, I didn't get any output, right?\n\n470\n00:25:09.030 --> 00:25:13.768\nBut if I ls, I should have\nthis forloop.txt right there.\n\n471\n00:25:13.768 --> 00:25:20.250\nIf I cat that, you'll see there was\nthe output generated by the script.\n\n472\n00:25:20.250 --> 00:25:24.622\nSo if you need to just move that output,\nyou don't want it to screen, you wanna\n\n473\n00:25:24.622 --> 00:25:29.017\nperuse whatever it's generating for\nyou later, that's an easy way to do it.\n\n474\n00:25:29.017 --> 00:25:33.233\nJust after that done command, through the\nredirector on there and a file name and\n\n475\n00:25:33.233 --> 00:25:35.101\nyou should be off to the races easy.\n\n476\n00:25:35.101 --> 00:25:35.947\nNothing to it.\n\n477\n00:25:35.947 --> 00:25:39.638\n>> Daniel, I can actually see where that\nmight be used in things like, log files,\n\n478\n00:25:39.638 --> 00:25:42.465\nwhere we actually append more\ninformation to a single file.\n\n479\n00:25:42.465 --> 00:25:45.916\nSo if I were, let's say,\nto run a back-up script and\n\n480\n00:25:45.916 --> 00:25:49.448\nthen I wanted to actually\noutput the success command or\n\n481\n00:25:49.448 --> 00:25:53.035\necho the command I could echo\nthat into a file, right?\n\n482\n00:25:53.035 --> 00:25:54.620\n>> Yes,that's exactly right.\n\n483\n00:25:54.620 --> 00:25:56.840\nJust use these tools.\n\n484\n00:25:56.840 --> 00:26:00.420\nIt's all about building\na set of tools that you use\n\n485\n00:26:00.420 --> 00:26:03.440\nto get what it is you're looking for\nout of your scripts.\n\n486\n00:26:03.440 --> 00:26:07.190\nRonnie's got great reasons for\nwanting to use something like this.\n\n487\n00:26:07.190 --> 00:26:10.370\nI don't need all that output, or\nmaybe I want to create a log file.\n\n488\n00:26:10.370 --> 00:26:13.861\nI'm running all these different commands\nand I want to create a log of it.\n\n489\n00:26:13.861 --> 00:26:16.196\n>> Boom,\nI just redirect that out to a file.\n\n490\n00:26:16.196 --> 00:26:19.732\nI can then peruse that file later,\nI get dates and times stamps,\n\n491\n00:26:19.732 --> 00:26:23.611\nall sorts of great information that\ncomes along with creating a file.\n\n492\n00:26:23.611 --> 00:26:25.150\nIt can be very, very helpful.\n\n493\n00:26:25.150 --> 00:26:27.770\nAnd then we can use that file\ninside of another script, right?\n\n494\n00:26:27.770 --> 00:26:29.350\nIt generates something.\n\n495\n00:26:29.350 --> 00:26:30.320\nWe can use that.\n\n496\n00:26:30.320 --> 00:26:34.190\nWhat if I create a for\nloop that generate the file that I use\n\n497\n00:26:34.190 --> 00:26:36.850\nto create the variable to\ncreate another for loop?\n\n498\n00:26:36.850 --> 00:26:39.930\nThat it's going to iterate,\nthrough see how that starts working.\n\n499\n00:26:39.930 --> 00:26:42.725\nIt's obviously going to get\na little complicated [LAUGH] but\n\n500\n00:26:42.725 --> 00:26:45.910\nif you just stay logical and\nyou start thinking how I want to do this.\n\n501\n00:26:45.910 --> 00:26:50.978\nSometimes you do need to step back and\nget out the old pen and\n\n502\n00:26:50.978 --> 00:26:55.447\npaper and kind of,\nwhat I like to call pseudo code.\n\n503\n00:26:55.447 --> 00:26:58.310\nJust kind of work out the logic of it.\n\n504\n00:26:58.310 --> 00:27:02.350\nYou're not necessarily sitting there\nlooking at your screen going okay,\n\n505\n00:27:02.350 --> 00:27:04.590\nwhat should be the next syntax?\n\n506\n00:27:04.590 --> 00:27:07.830\nIt's nice sometimes to just get\nthe flow of what you want the script to\n\n507\n00:27:07.830 --> 00:27:09.840\ndo out on a piece of paper,\nand just write it in.\n\n508\n00:27:09.840 --> 00:27:13.414\nAnd say okay,\nwell I wanna create if this does this,\n\n509\n00:27:13.414 --> 00:27:15.778\nthen it should do that, and then.\n\n510\n00:27:15.778 --> 00:27:18.610\nYou're not writing syntax, you're\njust writing what you want it to do.\n\n511\n00:27:18.610 --> 00:27:21.915\nThen you go back,\nnow you got your template of what you\n\n512\n00:27:21.915 --> 00:27:26.405\nwant your script to do and you start\nwriting the syntax to make it happen.\n\n513\n00:27:26.405 --> 00:27:29.862\nSo you're basically coming up with\na laundry list of things you want your\n\n514\n00:27:29.862 --> 00:27:33.489\nscript to do, then you take that laundry\nlist, take a look at your screen and\n\n515\n00:27:33.489 --> 00:27:35.488\nstart typing syntax to make it a reality.\n\n516\n00:27:35.488 --> 00:27:38.562\n>> All right Daniel,\nthat sounds likes a lot of information for\n\n517\n00:27:38.562 --> 00:27:41.648\nus to just try to chew through\nin these just few the episodes.\n\n518\n00:27:41.648 --> 00:27:44.989\nIt's kind of a little miniseries inside\nof our series, here, on just loops.\n\n519\n00:27:44.989 --> 00:27:49.267\nBut let's make sure we understand some of\nthe basic takeaways here right at the end\n\n520\n00:27:49.267 --> 00:27:51.318\nof this three parter that we've done.\n\n521\n00:27:51.318 --> 00:27:55.530\nWe've talked about loops, we talk\nabout for loops in Bash specifically.\n\n522\n00:27:55.530 --> 00:27:59.730\nAnd even those C style loops,\nI couldn't remember what they're called.\n\n523\n00:27:59.730 --> 00:28:00.850\nBut remember when you're using that,\n\n524\n00:28:00.850 --> 00:28:04.070\nyou're actually taking the idea of\nsomething like a list that you have and\n\n525\n00:28:04.070 --> 00:28:06.870\nyou're saying,\nif that condition is actually true,\n\n526\n00:28:06.870 --> 00:28:09.180\nlet's make sure we continue\nto go through that and\n\n527\n00:28:09.180 --> 00:28:11.210\nuntil that condition stops\nwe're just gonna run through.\n\n528\n00:28:11.210 --> 00:28:15.630\nOr excuse me, when we go through that\nlist I've gotten into the while there.\n\n529\n00:28:15.630 --> 00:28:20.483\nIf we have while, we wanna actually make\nsure that while that condition is true.\n\n530\n00:28:20.483 --> 00:28:22.541\nWe will continue to iterate and\n\n531\n00:28:22.541 --> 00:28:27.777\nrun whatever that script is going to be\nuntil it doesn't become true anymore.\n\n532\n00:28:27.777 --> 00:28:29.565\nSo that and\nwhen there's actually another condition.\n\n533\n00:28:29.565 --> 00:28:32.598\nAnd then we have the until,\nwhich is the one that says, hey,\n\n534\n00:28:32.598 --> 00:28:36.896\nwe're actually gonna keep running this\nuntil something becomes true here instead.\n\n535\n00:28:36.896 --> 00:28:40.388\nSo notice that it really offers\nflexibility in how you need whatever\n\n536\n00:28:40.388 --> 00:28:41.864\nscript that you want to run.\n\n537\n00:28:41.864 --> 00:28:46.742\nLastly, Daniel also ended up showing\nthis about nested loops as well as\n\n538\n00:28:46.742 --> 00:28:51.720\nredirecting the output from these loops\nto help us out a little bit more.\n\n539\n00:28:51.720 --> 00:28:52.960\nNow the screen fills up.\n\n540\n00:28:52.960 --> 00:28:54.010\nWe don't want that.\n\n541\n00:28:54.010 --> 00:28:57.570\nWe want to be able to review it for\nhistorical purposes or\n\n542\n00:28:57.570 --> 00:28:59.230\nkeep track of it in something like a log,\n\n543\n00:28:59.230 --> 00:29:02.200\nthe redirected output probably the way for\nus to also go as well.\n\n544\n00:29:02.200 --> 00:29:03.943\nSo loops, Daniel, thank you again.\n\n545\n00:29:03.943 --> 00:29:05.250\nThat's been a big gigantic help.\n\n546\n00:29:05.250 --> 00:29:09.650\nFor our viewers, any last minute\ntips on on getting this done.\n\n547\n00:29:09.650 --> 00:29:11.654\nWe know we have to keep practicing,\nbut anything else that will\n\n548\n00:29:11.654 --> 00:29:13.042\n>> Yeah, as far as loops go,\n\n549\n00:29:13.042 --> 00:29:17.550\njust like Ronnie said, practice,\npractice, practice, understand the logic.\n\n550\n00:29:17.550 --> 00:29:19.900\nThat's really where you want to be,\n\n551\n00:29:19.900 --> 00:29:23.790\nis that you understand the logic behind,\neach one of the loops.\n\n552\n00:29:23.790 --> 00:29:27.490\nAnd that's when you'll start to\nbe able to use them effectively\n\n553\n00:29:27.490 --> 00:29:28.850\ninside of your scripts.\n\n554\n00:29:28.850 --> 00:29:32.620\nIf I showed you scripts that\ndid all sorts of crazy stuff,\n\n555\n00:29:32.620 --> 00:29:34.060\nyou probably would be completely lost.\n\n556\n00:29:34.060 --> 00:29:35.910\nThat's why I use the very simplistic form.\n\n557\n00:29:35.910 --> 00:29:43.355\nSo do that, create simple loops that make\nsure that you understand what they do and\n\n558\n00:29:43.355 --> 00:29:48.450\nyou will be able to test that and\ntest yourself that you do understand\n\n559\n00:29:48.450 --> 00:29:51.500\nthem because when you run the script\nit will do what you think it should do.\n\n560\n00:29:51.500 --> 00:29:52.983\nIt will give you the output\nyou are looking for.\n\n561\n00:29:52.983 --> 00:29:57.585\nSo play with them, work through them,\nmake sure you understand their logic and\n\n562\n00:29:57.585 --> 00:30:02.050\nthen, you can graduate into actually\nwriting scripts that do stuff for you,\n\n563\n00:30:02.050 --> 00:30:05.433\nloops that work to your advantage\ninside of your scripts.\n\n564\n00:30:05.433 --> 00:30:06.153\n>> All right, Daniel.\n\n565\n00:30:06.153 --> 00:30:07.407\nThank you for being here with us.\n\n566\n00:30:07.407 --> 00:30:08.069\n>> Yeah, no problem.\n\n567\n00:30:08.069 --> 00:30:11.194\n>> And thank you for\nwatching us today as well.\n\n568\n00:30:11.194 --> 00:30:13.937\nSigning off for ITProTV, I'm Ronnie Wong.\n\n569\n00:30:13.937 --> 00:30:14.814\n>> And I'm Daniel Lowrie.\n\n570\n00:30:14.814 --> 00:30:16.483\n>> And we'll see you next time.\n\n571\n00:30:16.483 --> 00:30:23.420\n[SOUND]\n\n",
          "vimeoId": "146012304"
        },
        {
          "description": "In this episode, Ronnie and Daniel introduce us to the use of regular expressions.  Every output that you and I have is represented by a character, including spaces.  This is helpful because this means that everything is searchable, even when we do not know the exact values we are looking for.  Using regular expressions allows users to search for anything within our computers, or within a file on a computer for matching patterns.  This search ignores syntax and focuses only on patterns.",
          "length": "1942",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-7-1-regular_expressions_in_bash-111715-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-7-1-regular_expressions_in_bash-111715-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-7-1-regular_expressions_in_bash-111715-1-sm.jpg",
          "title": "Regular Expressions in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.630\n[MUSIC]\n\n2\n00:00:10.630 --> 00:00:14.500\nWelcome to another great\nepisode here on ITPro TV.\n\n3\n00:00:14.500 --> 00:00:17.910\nI'm your host Ronnie Wong and\ntoday were taking that bash and scripting.\n\n4\n00:00:17.910 --> 00:00:21.570\nSpecifically though, heading into\na topic that well really if anything,\n\n5\n00:00:21.570 --> 00:00:25.030\nit scares me even thought it's\nabout regular expressions.\n\n6\n00:00:25.030 --> 00:00:29.310\nThis is something that actually\nis fairly irregular to me.\n\n7\n00:00:29.310 --> 00:00:32.740\nBut great thing is we have Daniel Lowrie\nto help us to get through this.\n\n8\n00:00:32.740 --> 00:00:36.640\nDaniel when it comes down to regular\nexpressions, there is no more set of\n\n9\n00:00:36.640 --> 00:00:41.840\nthings that we have to learn that is so\n\n10\n00:00:41.840 --> 00:00:44.780\nvery, so incredibly generic,\n>> [LAUGH]\n\n11\n00:00:44.780 --> 00:00:46.650\n>> I don't know how else to describe it,\n\n12\n00:00:46.650 --> 00:00:48.440\nthat you're gonna have to\nhelp us to get through.\n\n13\n00:00:48.440 --> 00:00:51.161\nSo Daniel, help us here on\nregular expressions my friend.\n\n14\n00:00:51.161 --> 00:00:52.286\n[LAUGH]\n>> Yeah, I'm gonna do my best.\n\n15\n00:00:52.286 --> 00:00:54.691\nI've got two words for you when it\ncomes to regular expression, be afraid.\n\n16\n00:00:54.691 --> 00:00:55.810\n>> [LAUGH]\n>> Be afraid.\n\n17\n00:00:55.810 --> 00:01:01.270\nI saw one person they likened\nit unto hieroglyphics.\n\n18\n00:01:01.270 --> 00:01:07.830\nIt is basically a different language\nthat you have to learn and understand.\n\n19\n00:01:07.830 --> 00:01:09.210\nAnd if I'm scaring you, good.\n\n20\n00:01:09.210 --> 00:01:10.100\nYou should be scared.\n\n21\n00:01:10.100 --> 00:01:13.330\nThis is regular expression stuff\ncan be really daunting and tricky.\n\n22\n00:01:13.330 --> 00:01:16.190\nBut if you get a handle on it,\nif you get a hold of it,\n\n23\n00:01:16.190 --> 00:01:21.180\nman, you're gonna be in an elite group\nof people that understand basically,\n\n24\n00:01:21.180 --> 00:01:22.990\nlike I said,\nanother language all together.\n\n25\n00:01:22.990 --> 00:01:24.620\nSo what does that mean?\n\n26\n00:01:24.620 --> 00:01:26.140\nWhat is regular expressions?\n\n27\n00:01:26.140 --> 00:01:30.970\nWhat are we talking about when it\ncomes down to that term specifically?\n\n28\n00:01:30.970 --> 00:01:35.100\nWhat we mean by regular expression\nis basically a string of,\n\n29\n00:01:35.100 --> 00:01:38.100\nof text, or something were looking for.\n\n30\n00:01:38.100 --> 00:01:39.040\nIt's regular.\n\n31\n00:01:39.040 --> 00:01:41.310\nMaybe the word cat, right?\n\n32\n00:01:41.310 --> 00:01:46.030\nIf I say cat is my regular expression,\nthen I want to look for\n\n33\n00:01:46.030 --> 00:01:47.940\nevery instance of the word cat.\n\n34\n00:01:47.940 --> 00:01:50.670\nThat's, that's about as\nbroken down as I can get,\n\n35\n00:01:50.670 --> 00:01:55.180\nto try to explain what we mean when\nwe say, I'm using regular expression.\n\n36\n00:01:55.180 --> 00:01:58.320\nNow there's a few programs that\nimplement regular expression.\n\n37\n00:01:58.320 --> 00:02:01.620\nMost programs actually do some\nform of regular expression.\n\n38\n00:02:01.620 --> 00:02:04.110\nRegular expression is widely implemented.\n\n39\n00:02:04.110 --> 00:02:07.460\nIf you've ever been on\na Windows system and\n\n40\n00:02:07.460 --> 00:02:12.840\nyou searched for files, and\nyou used a star as a wild card, right?\n\n41\n00:02:12.840 --> 00:02:14.996\nThat was regular expression.\n\n42\n00:02:14.996 --> 00:02:18.450\nInside of a Linux system, you are in\na bash prompt, and you've used a star, or\n\n43\n00:02:18.450 --> 00:02:21.270\na period, or\nanother special character like that.\n\n44\n00:02:21.270 --> 00:02:23.290\nYou've used regular expression.\n\n45\n00:02:23.290 --> 00:02:24.340\nThat's what is going on, okay?\n\n46\n00:02:24.340 --> 00:02:25.670\nSo that's what we mean.\n\n47\n00:02:25.670 --> 00:02:30.810\nI'm substituting, or I'm looking for,\nor I'm giving parameters for a search.\n\n48\n00:02:30.810 --> 00:02:36.490\nUsually that's exactly what we're doing,\nis we're doing some sort of search.\n\n49\n00:02:36.490 --> 00:02:40.860\nIf you get in to more advanced things like\nSAID and AWK, I guess it's GAWK now, but\n\n50\n00:02:40.860 --> 00:02:42.610\nyou can do a search and replace.\n\n51\n00:02:42.610 --> 00:02:45.000\nWhere find a regular expression and\n\n52\n00:02:45.000 --> 00:02:48.570\nI replace it with another expression\nthat I'm going to give it.\n\n53\n00:02:48.570 --> 00:02:51.820\nAnd it can get really,\nreally complex really, really fast, right?\n\n54\n00:02:51.820 --> 00:02:54.940\nAnd that's why I say It's like\nlearning another language.\n\n55\n00:02:54.940 --> 00:02:56.870\nIt's extremely complex.\n\n56\n00:02:56.870 --> 00:03:01.800\nYou'll see a lot of people go, I'm having\ntrouble with this regular expression.\n\n57\n00:03:01.800 --> 00:03:06.520\nAnd you look at it, and you're like,\nthis is complete foreigness to me.\n\n58\n00:03:06.520 --> 00:03:08.410\nThere's nothing but garbage characters.\n\n59\n00:03:08.410 --> 00:03:09.530\nThis makes no sense.\n\n60\n00:03:09.530 --> 00:03:12.600\nAnd it can.\nI'm not gonna take us down the road of\n\n61\n00:03:12.600 --> 00:03:16.520\nsuper complexity, because I don't want to\nscare you off from regular expression.\n\n62\n00:03:16.520 --> 00:03:18.930\nI do want you to be able to\nuse it practically, though.\n\n63\n00:03:18.930 --> 00:03:22.180\nSo, that's what we're gonna try to do\ntoday, we're gonna walk through some very\n\n64\n00:03:22.180 --> 00:03:27.040\npractical, pragmatic, common examples\nof implementing regular expression.\n\n65\n00:03:27.040 --> 00:03:31.060\nAnd, for the whole entirety of it.\n\n66\n00:03:31.060 --> 00:03:31.670\nWe'll use Grep.\n\n67\n00:03:31.670 --> 00:03:33.820\nGrep loves regular expression.\n\n68\n00:03:33.820 --> 00:03:36.810\nAnd we love using Grep, and\nusing regular expression with Grep, so\n\n69\n00:03:36.810 --> 00:03:39.720\nwe can find and\nsift through a myriad of data.\n\n70\n00:03:39.720 --> 00:03:40.740\nSo that's what we're going to do today.\n\n71\n00:03:40.740 --> 00:03:43.710\nAnd hopefully,\nthat makes some sense to you.\n\n72\n00:03:43.710 --> 00:03:48.110\nNow, before we get going, before we get\ntoo deep into showing you examples and\n\n73\n00:03:48.110 --> 00:03:49.330\nthings like that.\n\n74\n00:03:49.330 --> 00:03:51.240\nWe need to define some terms, okay?\n\n75\n00:03:51.240 --> 00:03:55.550\nWe need you to understand some\nthings before we get going.\n\n76\n00:03:55.550 --> 00:03:58.390\nLets go ahead and\ntake a look at my computer really quickly.\n\n77\n00:03:58.390 --> 00:04:01.610\nI've got a little chart I've\nbuilt up here of some definitions\n\n78\n00:04:01.610 --> 00:04:06.240\nthat we need to get into our brains, okay?\n\n79\n00:04:06.240 --> 00:04:13.410\nThe first definition is a literal, so\nobviously we know what literal means.\n\n80\n00:04:13.410 --> 00:04:14.960\nIt means that if it's A, literally mean A.\n\n81\n00:04:14.960 --> 00:04:17.990\nThere is no specialness to the characters,\nokay.\n\n82\n00:04:17.990 --> 00:04:19.090\nThat's what we mean.\n\n83\n00:04:19.090 --> 00:04:23.540\nThat's why I say characters\nthat are to be taken literally.\n\n84\n00:04:23.540 --> 00:04:25.050\nThen we have a metacharacter.\n\n85\n00:04:25.050 --> 00:04:28.720\nOkay now it's starting to get crazy.\n\n86\n00:04:28.720 --> 00:04:31.780\nWe're going into the upper\nechelons of philosophy.\n\n87\n00:04:31.780 --> 00:04:37.350\nHere meta this something or\nother meta meaning above.\n\n88\n00:04:37.350 --> 00:04:39.020\nMetacharacter, what does that mean?\n\n89\n00:04:39.020 --> 00:04:44.310\nIt means characters that have a special\nmeaning, and are not taken literally.\n\n90\n00:04:44.310 --> 00:04:46.810\nOkay?\nAnd I've listed a few of them here.\n\n91\n00:04:46.810 --> 00:04:52.000\nThe period, the star, the open and closed\nbrackets, a caret and a dollar sign.\n\n92\n00:04:52.000 --> 00:04:54.420\nWith regular expression,\n\n93\n00:04:54.420 --> 00:04:58.330\nthose have a meaning other than what you\nwould normally think of the mass, okay?\n\n94\n00:04:58.330 --> 00:05:02.350\nSo a dollar sign doesn't mean I'm trying\nto say this is an amount of money.\n\n95\n00:05:02.350 --> 00:05:04.970\nAnd a period doesn't mean I've\ncome to the end of a sentence,\n\n96\n00:05:04.970 --> 00:05:07.260\nor I'm trying to separate two things out.\n\n97\n00:05:07.260 --> 00:05:09.190\nIt means something different than that.\n\n98\n00:05:09.190 --> 00:05:13.620\nIt has special meaning, and you say,\nwell why do they use those,\n\n99\n00:05:13.620 --> 00:05:16.660\nwhen we use them normally in text and\nthings of that nature?\n\n100\n00:05:16.660 --> 00:05:18.460\nBecause they had to use something, and\n\n101\n00:05:18.460 --> 00:05:21.710\nit's easy to use characters that\nare already built into a keyboard,\n\n102\n00:05:21.710 --> 00:05:25.040\nwithout having to tell you,\nAlt Shift Control then double tap this,\n\n103\n00:05:25.040 --> 00:05:28.925\nyou know that would get a little\nabsurd to create special characters.\n\n104\n00:05:28.925 --> 00:05:34.410\nSo they just use characters that we\nalready use and gave them special Meaning.\n\n105\n00:05:34.410 --> 00:05:38.910\nIf we want them to not to be special\nmeaning, we want to use them literally,\n\n106\n00:05:38.910 --> 00:05:39.770\nwe can do that too.\n\n107\n00:05:39.770 --> 00:05:43.680\nAnd if I jump down this search expression,\nthat's what this escape sequence needs.\n\n108\n00:05:43.680 --> 00:05:48.500\nIf I want to actually use\na special character and\n\n109\n00:05:48.500 --> 00:05:51.620\nnot have its special\nmeaning be interpreted.\n\n110\n00:05:51.620 --> 00:05:53.710\nI want it to be interpreted literally,\n\n111\n00:05:53.710 --> 00:05:57.074\nI would need to use some\nsort of escape sequence or\n\n112\n00:05:57.074 --> 00:06:00.652\nnegation, so that that would be seen,\nand there are characters for that.\n\n113\n00:06:00.652 --> 00:06:02.620\nAnd we're going to see that as well.\n\n114\n00:06:02.620 --> 00:06:06.370\nAnd then we have the last one,\nwhich is just the search expression and\n\n115\n00:06:06.370 --> 00:06:08.380\nthat's just the expression itself.\n\n116\n00:06:08.380 --> 00:06:13.330\nAre literals and our meta characters, our\nspecial characters, put together in some\n\n117\n00:06:13.330 --> 00:06:18.800\nsort of fashion to elicit,\nresponse that we're looking for.\n\n118\n00:06:18.800 --> 00:06:21.590\nSo, those are the definitions,\nthat's how we use regular expression.\n\n119\n00:06:21.590 --> 00:06:27.492\nThat's what regular expression is, and\nhopefully now, you guys are up to speed.\n\n120\n00:06:27.492 --> 00:06:29.380\n>> All right Daniel, so, I think I'm\nstarting to get the idea here, okay.\n\n121\n00:06:29.380 --> 00:06:34.650\nWhat we're actually trying to do, right,\nby using the idea of regular expressions\n\n122\n00:06:34.650 --> 00:06:39.600\nis what if I don't know exactly what\nI'm looking for, and I need a system.\n\n123\n00:06:39.600 --> 00:06:41.670\nLet's say I only know\nthe first few characters,\n\n124\n00:06:41.670 --> 00:06:44.900\nbut I don't know what the rest of that\nstring of characters is gonna be.\n\n125\n00:06:44.900 --> 00:06:48.270\nThe idea being that I use these\nregular characters that I have,\n\n126\n00:06:48.270 --> 00:06:51.020\nsuch as the beginning of the letter and\n\n127\n00:06:51.020 --> 00:06:54.670\nthen being able to use some of the special\ncharacters you were talking about.\n\n128\n00:06:54.670 --> 00:06:57.310\nI should be able to find\nwhat I'm looking for,\n\n129\n00:06:57.310 --> 00:06:59.540\neven if I don't know the complete\nnature of everything.\n\n130\n00:06:59.540 --> 00:07:02.570\nAnd so this really does make it easier for\nyou and\n\n131\n00:07:02.570 --> 00:07:05.800\nme to be able to do searches,\nand to end up with the results,\n\n132\n00:07:05.800 --> 00:07:08.700\ninstead of searches and go okay,\nI didn't spell that exact right.\n\n133\n00:07:08.700 --> 00:07:13.030\nI didn't remember that one right there and\nit didn't actually return anything, and\n\n134\n00:07:13.030 --> 00:07:16.250\nthat gives me a false value when\nI know that it's there and so\n\n135\n00:07:16.250 --> 00:07:18.020\nhopefully that's what\nwe're trying to do right.\n\n136\n00:07:18.020 --> 00:07:20.360\n>> Yeah, yeah, you totally got it\n>> Ronnie,\n\n137\n00:07:20.360 --> 00:07:22.280\nyou're right on the right track.\n\n138\n00:07:22.280 --> 00:07:27.770\nIf I'm not 100% sure, or\nmaybe I'm not sure, or a maybe\n\n139\n00:07:27.770 --> 00:07:33.160\nthe case is that I want this and this,\nor I want anything that looks like this.\n\n140\n00:07:33.160 --> 00:07:37.770\nSo maybe I want every word that\nstarts with D, like my name, right?\n\n141\n00:07:37.770 --> 00:07:41.590\nIf I'm looking for\nD names throughout a file full of names,\n\n142\n00:07:41.590 --> 00:07:43.210\nhow do I sift that out?\n\n143\n00:07:43.210 --> 00:07:47.080\nIf I had to if I had to\ngrip every single name.\n\n144\n00:07:47.080 --> 00:07:48.840\nThat would be crazy.\n\n145\n00:07:48.840 --> 00:07:49.920\nIt'd be a lot of effort.\n\n146\n00:07:50.960 --> 00:07:53.476\nOtherwise I could use reg x right?\n\n147\n00:07:53.476 --> 00:07:58.515\nThe regular expression to say everything\nthat starts with D show me that.\n\n148\n00:07:58.515 --> 00:07:59.270\nThat makes it easier.\n\n149\n00:07:59.270 --> 00:08:03.156\nI write one little line of code or\none little line of option or\n\n150\n00:08:03.156 --> 00:08:06.281\nregular expression and\nit returns that value.\n\n151\n00:08:06.281 --> 00:08:09.600\nIt looks through it\ndoes all the hard work.\n\n152\n00:08:09.600 --> 00:08:12.590\nI don't have to go in and say okay I\nneed this name, that name, that date.\n\n153\n00:08:12.590 --> 00:08:13.540\nIt does it all for me.\n\n154\n00:08:13.540 --> 00:08:15.310\nI just give it parameters.\n\n155\n00:08:15.310 --> 00:08:18.540\nAnd it, the basics of it\naren't as hard as what we're\n\n156\n00:08:18.540 --> 00:08:19.840\nmaking out the complexity of it to be.\n\n157\n00:08:19.840 --> 00:08:21.410\nDoes it get super duper complex?\n\n158\n00:08:21.410 --> 00:08:24.271\nYes, don't get me wrong, it does.\n\n159\n00:08:24.271 --> 00:08:25.905\nBut for basic searching and\n\n160\n00:08:25.905 --> 00:08:30.031\nbasic regular expression functionality\nit's not that difficult.\n\n161\n00:08:30.031 --> 00:08:30.860\nOkay?\n\n162\n00:08:30.860 --> 00:08:33.531\nAnd so, like I said,\nthat's what I hope to show you today.\n\n163\n00:08:33.531 --> 00:08:37.915\nTo give you some practical, pragmatic,\nat least some foundational knowledge of\n\n164\n00:08:37.915 --> 00:08:42.043\nregular expressions so that you can go\nfrom there and learn more about it, and\n\n165\n00:08:42.043 --> 00:08:45.090\nyou know, look at more stuff and\nmove on, until one day,\n\n166\n00:08:45.090 --> 00:08:49.610\nyou're a regular expression king or\nqueen, or whatever you may be.\n\n167\n00:08:49.610 --> 00:08:51.600\nAnd you're using it\nlike no one's business,\n\n168\n00:08:51.600 --> 00:08:54.110\nlike I need your help with\nthe regular expression.\n\n169\n00:08:54.110 --> 00:08:57.250\nThat's where one day you hope to be, but\nyou gotta get that foundation first.\n\n170\n00:08:57.250 --> 00:08:59.160\nSo that's where we're\ngonna take you today.\n\n171\n00:08:59.160 --> 00:09:00.700\nSo let's jump into some examples and\n\n172\n00:09:00.700 --> 00:09:02.970\nsee how we can actually\nuse regular expressions.\n\n173\n00:09:02.970 --> 00:09:06.860\nIt's gonna make a whole\nlot more sense now.\n\n174\n00:09:06.860 --> 00:09:09.230\nSo we got my computer up here, and\n\n175\n00:09:09.230 --> 00:09:13.432\nI've got a file I actually\ncreated called ls regex.txt.\n\n176\n00:09:13.432 --> 00:09:16.071\nYeah,there it is.\n\n177\n00:09:16.071 --> 00:09:17.461\nSo pretty straightforward.\n\n178\n00:09:17.461 --> 00:09:22.860\nIf we cat what's inside of there,\nlet's see the data.\n\n179\n00:09:22.860 --> 00:09:27.490\nWhat I've done was I just created a file\nwith a bunch of server names and IP\n\n180\n00:09:27.490 --> 00:09:32.200\naddresses and basically, maybe something\nyou actually might have in your system.\n\n181\n00:09:32.200 --> 00:09:35.060\nKeeping a list of all the servers\nthat I have, their IP addresses, and\n\n182\n00:09:35.060 --> 00:09:39.080\nwhat type of server they are,\nwhat role are they playing.\n\n183\n00:09:39.080 --> 00:09:44.039\nAnd then just for the sake of the\ndemonstration purposes, I also added this\n\n184\n00:09:44.039 --> 00:09:49.247\nAdmins and phone extension office thing\nwith all the hosts here in the studio.\n\n185\n00:09:49.247 --> 00:09:52.388\nSo we can run some expressions\nagainst them as well.\n\n186\n00:09:52.388 --> 00:09:56.827\nGives us a little more data to work\nwith so that we can see some cool stuff.\n\n187\n00:09:56.827 --> 00:10:00.205\nThat being said,\nhow do we use regular expression?\n\n188\n00:10:00.205 --> 00:10:05.210\nI got a lot of stuff here, what if\nI want to see only specific things.\n\n189\n00:10:05.210 --> 00:10:07.140\nWell, grep is great for that, right?\n\n190\n00:10:07.140 --> 00:10:08.140\nGrep is great for finding stuff.\n\n191\n00:10:08.140 --> 00:10:13.060\nIf I cap the file, regex.txt and\nI pipe that through grep,\n\n192\n00:10:13.060 --> 00:10:17.490\nand I look for something like my name,\nlike Dan, right?\n\n193\n00:10:17.490 --> 00:10:20.620\nIt comes back with the one line\nthat has Dan on it, awesome.\n\n194\n00:10:20.620 --> 00:10:21.160\nWe like grep.\n\n195\n00:10:21.160 --> 00:10:21.800\nIt's very cool.\n\n196\n00:10:21.800 --> 00:10:23.540\nWe looked at it before.\n\n197\n00:10:23.540 --> 00:10:24.150\nAwesome stuff.\n\n198\n00:10:24.150 --> 00:10:30.010\nBut I can use regex in more ways to help\nme sift through the data that I wanna see.\n\n199\n00:10:30.010 --> 00:10:34.120\nLet's take a look at the first thing I\nwanna show you, which is the open and\n\n200\n00:10:34.120 --> 00:10:37.075\nclosed brace, those are brackets.\n\n201\n00:10:37.075 --> 00:10:38.946\nRight?\nThe square ones, not the curly ones.\n\n202\n00:10:38.946 --> 00:10:40.366\nCurly ones are braces.\n\n203\n00:10:40.366 --> 00:10:42.306\nThe square ones are brackets.\n\n204\n00:10:42.306 --> 00:10:43.206\nLet's see how we can use that.\n\n205\n00:10:43.206 --> 00:10:45.146\nLet me tell what it does first.\n\n206\n00:10:45.146 --> 00:10:49.695\nIt indicates a collection\nof acceptable values, okay?\n\n207\n00:10:49.695 --> 00:10:51.397\nSo, what do I mean by that?\n\n208\n00:10:51.397 --> 00:10:55.431\nI'm going to,\nwhatever I put inside of those brackets,\n\n209\n00:10:55.431 --> 00:11:00.280\nthose are the acceptable values\nthat I will take in my search.\n\n210\n00:11:00.280 --> 00:11:03.191\nSo if I put something like,\nlet's see here.\n\n211\n00:11:03.191 --> 00:11:04.351\nWe'll bring this back up.\n\n212\n00:11:04.351 --> 00:11:11.110\nAnd I say, D, bracket,\nA bracket like so, and then n.\n\n213\n00:11:11.110 --> 00:11:14.801\nI'll only accept an a there.\n\n214\n00:11:14.801 --> 00:11:18.600\nBut it doesn't stop there, I could go\nback in there and say all the vowels.\n\n215\n00:11:18.600 --> 00:11:21.970\nWhat if I wanted to accept\nanything that starts with a D,\n\n216\n00:11:21.970 --> 00:11:24.110\nadd a vowel in it, and then an n?\n\n217\n00:11:24.110 --> 00:11:27.031\nAlright, so you put A-E-I-O-U like that.\n\n218\n00:11:27.031 --> 00:11:30.691\nI will accept those values as true.\n\n219\n00:11:30.691 --> 00:11:35.771\nIf it's db or dc, df, dg won't take it.\n\n220\n00:11:35.771 --> 00:11:38.171\nRight it'll only show\nme what goes on there.\n\n221\n00:11:38.171 --> 00:11:43.091\nSo if I run this one you'll\nnotice I get Dan and Don.\n\n222\n00:11:43.091 --> 00:11:45.011\nBecause it accepted the a.\n\n223\n00:11:45.011 --> 00:11:45.725\nAnd the O,\n\n224\n00:11:45.725 --> 00:11:51.000\nthat was part of the acceptable values\nthat I put inside of those brackets.\n\n225\n00:11:51.000 --> 00:11:55.451\nSo a lot of times,\nthat's the way in which we use that.\n\n226\n00:11:55.451 --> 00:11:59.930\nAnother way in which we could do it\nwould have been something like this\n\n227\n00:11:59.930 --> 00:12:03.559\nI could say A comma O like that and\nit would have done Dan or\n\n228\n00:12:03.559 --> 00:12:08.290\nDon, right, so only those two values\nwould have would have been found.\n\n229\n00:12:08.290 --> 00:12:10.280\nSo, I'm going to leave the comma out,\nit makes it easier for\n\n230\n00:12:10.280 --> 00:12:14.550\nme to see, and old dogs, new tricks,\nthat kind of thing, so that's that.\n\n231\n00:12:14.550 --> 00:12:16.397\nSo, acceptable value range,\n\n232\n00:12:16.397 --> 00:12:20.238\nthat's what we're looking at\nwhen it comes to those brackets.\n\n233\n00:12:20.238 --> 00:12:23.602\n>> Now, Daniel, I'm noticing your\nIP address is up there What if I,\n\n234\n00:12:23.602 --> 00:12:27.208\nis there a way that I could do a search\nwhere, let's say I just wanted all\n\n235\n00:12:27.208 --> 00:12:30.442\nthe ones that began with the 200\nin that last octet range?\n\n236\n00:12:30.442 --> 00:12:34.492\n>> Yeah, yeah, and this is probably\none of those practical ways in\n\n237\n00:12:34.492 --> 00:12:38.318\nwhich we'll use a regular\nexpression to find IP addresses or\n\n238\n00:12:38.318 --> 00:12:42.760\nto find lines with a specific type\nof text that you’re looking for.\n\n239\n00:12:42.760 --> 00:12:46.170\nWhat Ronnie says is a very\ncommon way in which we do this.\n\n240\n00:12:46.170 --> 00:12:50.276\nSo in this example, for sake of ease and\nkeeping it as not complex as possible,\n\n241\n00:12:50.276 --> 00:12:52.531\nwe’re going to use the hyphen character.\n\n242\n00:12:52.531 --> 00:12:54.451\nWhat does the hyphen do?\n\n243\n00:12:54.451 --> 00:12:58.755\nAnd I’m actually going to use the hyphen\nin conjunction with my open and\n\n244\n00:12:58.755 --> 00:13:00.330\nclose brackets.\n\n245\n00:13:00.330 --> 00:13:02.750\nSo what do I mean by that?\n\n246\n00:13:02.750 --> 00:13:06.460\nWhat the hyphen does, is it tells me\na range of acceptable characters.\n\n247\n00:13:06.460 --> 00:13:08.701\nSo, got the brackets tells me these\nare my acceptable characters.\n\n248\n00:13:08.701 --> 00:13:11.256\nIf I make a hyphen in\nbetween two characters,\n\n249\n00:13:11.256 --> 00:13:14.680\nit will accept the range\nof those characters.\n\n250\n00:13:14.680 --> 00:13:16.300\nSo what do I mean by arranged?\n\n251\n00:13:16.300 --> 00:13:17.370\nI'm glad you asked.\n\n252\n00:13:17.370 --> 00:13:19.750\nSo let's bring up our last one here.\n\n253\n00:13:19.750 --> 00:13:22.091\nI'll removed a and o.\n\n254\n00:13:22.091 --> 00:13:26.630\nWhat I can do here, actually we're gonna\nlook for an IP address, so let's do that.\n\n255\n00:13:26.630 --> 00:13:29.140\nLet's say I wanna do grep and\n\n256\n00:13:29.140 --> 00:13:34.060\nthen everything that starts with,\nmaybe ends with 2.\n\n257\n00:13:34.060 --> 00:13:37.661\nSo let's do 2 I'll do a bracket and\nthen I'll do zero to nine.\n\n258\n00:13:37.661 --> 00:13:39.161\nSo, there's that hyphen character.\n\n259\n00:13:39.161 --> 00:13:40.730\nClose it out.\n\n260\n00:13:40.730 --> 00:13:43.060\nThen, I'll do another one.\n\n261\n00:13:43.060 --> 00:13:44.930\nSo, zero to nine.\n\n262\n00:13:44.930 --> 00:13:46.500\nSomething like that.\n\n263\n00:13:46.500 --> 00:13:47.970\nSo, what is this doing?\n\n264\n00:13:47.970 --> 00:13:48.960\nWhat is this happening?\n\n265\n00:13:48.960 --> 00:13:53.091\nIt's looking for the number two and\nthen, it's looking for\n\n266\n00:13:53.091 --> 00:13:55.610\nany other character, zero to nine.\n\n267\n00:13:55.610 --> 00:13:58.232\nAs long as it's between zero and nine.\n\n268\n00:13:58.232 --> 00:13:59.163\nIf it's a d or a j or\n\n269\n00:13:59.163 --> 00:14:02.711\nan exclamation point,\nit's not gonna return a value because I've\n\n270\n00:14:02.711 --> 00:14:06.750\ntold it the acceptable range is zero\nthrough nine for the next character.\n\n271\n00:14:06.750 --> 00:14:10.681\nAnd then for the next character,\nI've done the same thing.\n\n272\n00:14:10.681 --> 00:14:15.120\nSo I'm really only looking for\nsomething that has 200 something, right?\n\n273\n00:14:15.120 --> 00:14:16.514\nThat's what I'm looking for.\n\n274\n00:14:16.514 --> 00:14:20.908\nSo if I run this,\nyou'll notice that I get a line,\n\n275\n00:14:20.908 --> 00:14:25.003\nany line that has a value\nof 200 something.\n\n276\n00:14:25.003 --> 00:14:29.077\nSo there is this one, 222, 204, 223, so\n\n277\n00:14:29.077 --> 00:14:35.291\nit gives me all the IP addresses that\nhave 200 has a value in there somewhere.\n\n278\n00:14:35.291 --> 00:14:38.412\nSo since I know that all my IP\naddresses start with 10.1.1.\n\n279\n00:14:38.412 --> 00:14:41.591\nI know it only going to give me the range\nof IP addresses that are in the 200 block.\n\n280\n00:14:41.591 --> 00:14:46.708\nMaybe I've set the 200 block\napart as a specific range\n\n281\n00:14:46.708 --> 00:14:52.340\nof IP addresses for\nyou know DACP right or something else.\n\n282\n00:14:52.340 --> 00:14:53.721\nI can quickly see.\n\n283\n00:14:53.721 --> 00:14:56.441\nWhat I’ve done with that by\nusing regular expression.\n\n284\n00:14:56.441 --> 00:15:00.637\nYou’ll notice also that it\ngave me this room number,\n\n285\n00:15:00.637 --> 00:15:04.100\n200 because they were a value of 200.\n\n286\n00:15:04.100 --> 00:15:06.420\nSo, it showed me all that as well.\n\n287\n00:15:06.420 --> 00:15:08.261\nBut that’s a really quick and\n\n288\n00:15:08.261 --> 00:15:12.912\neasy way to if I know a part of the string\nlike what Ronnie was talking about.\n\n289\n00:15:12.912 --> 00:15:16.592\nI can find the rest of it based\noff my regular expression.\n\n290\n00:15:16.592 --> 00:15:20.842\n>> Now Daniel in that same vein what if\nI knew everything but a single character\n\n291\n00:15:20.842 --> 00:15:25.091\ninside, so let's say that in one of your\nIP addresses there I knew that I was\n\n292\n00:15:25.091 --> 00:15:29.608\nlooking for a server name, but I knew that\nthe IP address It started with a one and\n\n293\n00:15:29.608 --> 00:15:33.682\nit ended with a one, but I couldn't\nremember the number in the middle.\n\n294\n00:15:33.682 --> 00:15:35.102\nWhat if I needed a search like that?\n\n295\n00:15:35.102 --> 00:15:37.636\n>> Right.\nThe cool thing about this is it's just\n\n296\n00:15:37.636 --> 00:15:39.162\nthat single character.\n\n297\n00:15:39.162 --> 00:15:41.851\nI only need to find one thing.\n\n298\n00:15:41.851 --> 00:15:45.367\nI don't know what that one thing is,\nmaybe it is an a, maybe it is a b, and\n\n299\n00:15:45.367 --> 00:15:48.330\nI don't want to go through it,\nI just want it to be anything.\n\n300\n00:15:48.330 --> 00:15:51.366\nAs long as there's a one and\nthen something, and\n\n301\n00:15:51.366 --> 00:15:54.564\nthen another one Well then I'm good to go,\nright?\n\n302\n00:15:54.564 --> 00:15:58.660\nThat's our example for\nthis specific thing.\n\n303\n00:15:58.660 --> 00:15:59.280\nWhat if that's what I'm looking for?\n\n304\n00:15:59.280 --> 00:16:03.292\nI just don't know or I want to see\neverything that has one with something and\n\n305\n00:16:03.292 --> 00:16:04.319\nthen another one.\n\n306\n00:16:04.319 --> 00:16:05.597\nHow do I make that happen?\n\n307\n00:16:05.597 --> 00:16:06.814\nI use my period.\n\n308\n00:16:06.814 --> 00:16:09.692\nRight?\nThat denotes one single, basically,\n\n309\n00:16:09.692 --> 00:16:11.100\nwildcard character.\n\n310\n00:16:11.100 --> 00:16:13.710\nAnd it's that one specific place.\n\n311\n00:16:13.710 --> 00:16:19.250\nWhatever that period is at that is where\nit's gonna be, and it can be anything.\n\n312\n00:16:19.250 --> 00:16:20.650\nSo it's a wildcard.\n\n313\n00:16:20.650 --> 00:16:22.330\nSo how does that work out?\nLet's do that here.\n\n314\n00:16:22.330 --> 00:16:27.280\nLet's take the grep, that too, and\nI'll say one dot one like that.\n\n315\n00:16:27.280 --> 00:16:33.880\nSo you gotta remember A period in this\ninstance is a special character, right?\n\n316\n00:16:33.880 --> 00:16:40.025\nSo that's why it's not gonna look for\n2, I'm sorry, 1.1.\n\n317\n00:16:40.025 --> 00:16:41.553\nThat's not what it's gonna look for.\n\n318\n00:16:41.553 --> 00:16:47.090\nActually, to be honest with you, it will\nfind that because this is a wild card.\n\n319\n00:16:47.090 --> 00:16:50.305\nIf there is a string that has one and\na period and then another one,\n\n320\n00:16:50.305 --> 00:16:51.662\nit will return that value.\n\n321\n00:16:51.662 --> 00:16:55.082\nIt will return that line cuz\nthat's what grep does and\n\n322\n00:16:55.082 --> 00:16:57.980\nthat's what this regular expression does.\n\n323\n00:16:57.980 --> 00:17:01.970\nOkay, But it will also return 101,\nit will return 1A1, it will return 121.\n\n324\n00:17:01.970 --> 00:17:06.970\nAnd that helps us and\nwe can find an IP address using that way.\n\n325\n00:17:06.970 --> 00:17:10.740\nSo if I hit Return You'll notice I get\n\n326\n00:17:10.740 --> 00:17:13.560\nall the IP addresses back\nbecause they did have 1.1.\n\n327\n00:17:13.560 --> 00:17:16.430\nRemember, I said it would return\nthat value and there it does that.\n\n328\n00:17:16.430 --> 00:17:22.254\nIt also returned 131 because it was a one,\na something, and then a one.\n\n329\n00:17:22.254 --> 00:17:25.156\nThat period was that wildcard something.\n\n330\n00:17:25.156 --> 00:17:30.133\nAnd then down here it gave me my phone\nextension of 111 because it was 1\n\n331\n00:17:30.133 --> 00:17:33.330\nsomething 1 so\nthat's how the period works.\n\n332\n00:17:33.330 --> 00:17:36.934\nIt gives you a single character\nwild card and it can be anything so\n\n333\n00:17:36.934 --> 00:17:41.696\nif you're looking for that, that would be\nthe period, that's what you would use.\n\n334\n00:17:41.696 --> 00:17:42.262\n>> Now Daniel,\n\n335\n00:17:42.262 --> 00:17:45.622\nusually the wild card that I normally\nuse inside of Windows is fairly simple.\n\n336\n00:17:45.622 --> 00:17:48.141\nIt's the asterisk that\nreally helps me out.\n\n337\n00:17:48.141 --> 00:17:49.997\nWhere is that really\nbeneficial in what we do?\n\n338\n00:17:49.997 --> 00:17:52.786\nCuz if I use an asterisk here,\nit's gonna return everything.\n\n339\n00:17:52.786 --> 00:17:57.001\n>> Yes, the asterisk is\na little bit different here.\n\n340\n00:17:57.001 --> 00:18:02.157\nWhat it does is it says that if I am\nremembering correctly it looks for\n\n341\n00:18:02.157 --> 00:18:04.154\nthe previous character.\n\n342\n00:18:04.154 --> 00:18:09.434\nSo whatever the previous character was,\nand it finds that,\n\n343\n00:18:09.434 --> 00:18:15.190\nor zero or infinite times,\nand then anything after that.\n\n344\n00:18:15.190 --> 00:18:19.290\nSo, any length of string after that,\neven spaces and things of that nature.\n\n345\n00:18:19.290 --> 00:18:23.710\nSo this can be an interesting one\nto play with as far as a wild card,\n\n346\n00:18:23.710 --> 00:18:26.590\nespecially when you combine\nit with the period.\n\n347\n00:18:26.590 --> 00:18:30.270\nIf I do .* that basically means search for\neverything.\n\n348\n00:18:30.270 --> 00:18:33.864\nAnd it's gonna return everything.\n\n349\n00:18:33.864 --> 00:18:37.750\nSo, if I had a character and a period and\na star it's gonna find that character and\n\n350\n00:18:37.750 --> 00:18:39.590\nthen anything after that.\n\n351\n00:18:39.590 --> 00:18:41.110\nRight?\nWhatever that character is, and\n\n352\n00:18:41.110 --> 00:18:43.150\nthen any possibilities after that.\n\n353\n00:18:43.150 --> 00:18:44.790\nSo you've got to be careful\nwhen you use that but\n\n354\n00:18:44.790 --> 00:18:46.681\nsometimes that's exactly\nwhat you're looking for.\n\n355\n00:18:46.681 --> 00:18:50.838\nI need you to return everything cuz\nI have no idea what I'm looking for.\n\n356\n00:18:50.838 --> 00:18:55.580\nAnd then you can see some values and\nyou can start to pare down your searching.\n\n357\n00:18:55.580 --> 00:18:57.190\nAlright?\nBut let's take a look at the star and\n\n358\n00:18:57.190 --> 00:18:59.250\nhow we can use it very simply and\neffectively.\n\n359\n00:18:59.250 --> 00:19:01.970\nLet's see what we got here.\n\n360\n00:19:01.970 --> 00:19:07.890\nIf I wanna use my star, I'm gonna say,\nlet's see here, FL's a good one, right?\n\n361\n00:19:07.890 --> 00:19:13.250\nSo let's say we will cat, I'll just\nbring that back up, cat my regex, and\n\n362\n00:19:13.250 --> 00:19:17.385\nwe will look for, yeah that's right.\n\n363\n00:19:17.385 --> 00:19:20.010\nFL And I will do, heck,\n\n364\n00:19:20.010 --> 00:19:25.220\nI'll throw the .star in there for\nthe funs of it, .star and return.\n\n365\n00:19:25.220 --> 00:19:26.030\nAnd what did it do?\n\n366\n00:19:26.030 --> 00:19:28.060\nIt returned every single thing.\n\n367\n00:19:28.060 --> 00:19:31.130\nBut that might not be what I wanna do.\n\n368\n00:19:31.130 --> 00:19:34.290\nBut you start to see, that's really\nthe extent of its functionality,\n\n369\n00:19:34.290 --> 00:19:36.430\nis showing me every single line.\n\n370\n00:19:36.430 --> 00:19:42.110\nIt's Most of these lines are,\nactually all of these lines start with FL.\n\n371\n00:19:43.260 --> 00:19:46.177\nYou'll notice what it didn't show me\nwas all the a, if I do that cat regex.\n\n372\n00:19:46.177 --> 00:19:48.983\nIt didn't show me this stuff,\nthis Admins and D Lowrie,\n\n373\n00:19:48.983 --> 00:19:52.130\nit didn't show me Server Name,\nIP Address and Server Type.\n\n374\n00:19:52.130 --> 00:19:53.590\nIt didn't return those.\n\n375\n00:19:53.590 --> 00:19:55.070\nWhy?\nBecause they didn't start with FL.\n\n376\n00:19:55.070 --> 00:20:00.790\nI kind of parametered it a little bit by\nsaying it needs tp at least be fl and\n\n377\n00:20:00.790 --> 00:20:03.840\nthen anything in any length\nof characters after that.\n\n378\n00:20:03.840 --> 00:20:08.340\nSo we would find FL1 or FLTPO1.\n\n379\n00:20:08.340 --> 00:20:08.840\nRight?\n\n380\n00:20:10.090 --> 00:20:11.200\nSo even though FL1.\n\n381\n00:20:11.200 --> 00:20:13.860\nIt had the FL, that's the search\nparameter, and then the 1 period star.\n\n382\n00:20:13.860 --> 00:20:15.270\nThat means any [INAUDIBLE] character.\n\n383\n00:20:15.270 --> 00:20:20.039\nWell, there is no characters after that.\n\n384\n00:20:20.039 --> 00:20:21.142\nWell, technically there are.\n\n385\n00:20:21.142 --> 00:20:24.145\nThere are spaces between here and\nFake Server, so\n\n386\n00:20:24.145 --> 00:20:26.780\nit returned the entirety of that as well.\n\n387\n00:20:26.780 --> 00:20:30.080\nI normally grab that's what it does,\nit shows you the whole line.\n\n388\n00:20:30.080 --> 00:20:32.060\nYou can use functionality\nto pare that down.\n\n389\n00:20:32.060 --> 00:20:33.830\nBut that's what's happening.\n\n390\n00:20:33.830 --> 00:20:37.951\nWe didn't get all this stuff down here\nbecause it didn't meet the requirements of\n\n391\n00:20:37.951 --> 00:20:40.353\nF and L, so\nthat's how we search through that.\n\n392\n00:20:40.353 --> 00:20:42.327\nNow Daniel,\nsince you actually brought it up and\n\n393\n00:20:42.327 --> 00:20:45.038\nshowed me the I'm gonna ask\nmy standard question here.\n\n394\n00:20:45.038 --> 00:20:46.931\nWhat about case sensitivity?\n\n395\n00:20:46.931 --> 00:20:50.199\nIn regular expressions,\nif I had somebody like Now,\n\n396\n00:20:50.199 --> 00:20:54.131\ndown in that list of admins and\nit actually had F-L, whatever.\n\n397\n00:20:54.131 --> 00:20:57.696\nWould it have actually found that if\nit was a capital F and a lowercase l,\n\n398\n00:20:57.696 --> 00:20:58.595\nin which you did?\n\n399\n00:20:58.595 --> 00:20:59.473\n>> No it would not.\n\n400\n00:20:59.473 --> 00:21:00.611\n>> Okay.\n>> That would not find it.\n\n401\n00:21:00.611 --> 00:21:01.966\nIt is case sensitive.\n\n402\n00:21:01.966 --> 00:21:04.163\nYou can kinda bypass this.\n\n403\n00:21:04.163 --> 00:21:05.384\nEspecially if you're just using grep.\n\n404\n00:21:05.384 --> 00:21:06.839\nI mean, sed and awk and\n\n405\n00:21:06.839 --> 00:21:11.520\nother things that use special characters\nThey might have their own way.\n\n406\n00:21:11.520 --> 00:21:15.400\nYou can use rejects to formulate that.\n\n407\n00:21:15.400 --> 00:21:18.410\nGreg gives us a nice little functionality\n\n408\n00:21:18.410 --> 00:21:21.230\nhere where I could have\njust grep-i which means.\n\n409\n00:21:21.230 --> 00:21:22.790\nIgnore case sensitivity.\n\n410\n00:21:22.790 --> 00:21:26.550\nSo FL could have been lowercase FL and\nit would still return that value.\n\n411\n00:21:26.550 --> 00:21:32.173\nIf I wanted to do it with RegX,\nit would be a little bit more complex.\n\n412\n00:21:32.173 --> 00:21:38.338\nI would need to tell it basically\nkind of doing this here.\n\n413\n00:21:38.338 --> 00:21:43.920\nOpen curly, and\nthen I think F,f like that.\n\n414\n00:21:43.920 --> 00:21:49.470\nI actually probably even have to\ndo like a parenthesis like this.\n\n415\n00:21:49.470 --> 00:21:51.050\n>> [LAUGH]\n>> Yeah, now you start to see\n\n416\n00:21:51.050 --> 00:21:52.450\nhow it starts getting complex.\n\n417\n00:21:52.450 --> 00:21:58.450\nO Open parenthesis,\nyeah l comma l and close that out.\n\n418\n00:21:58.450 --> 00:22:00.506\nYou know, Daniel, that seems easy.\n\n419\n00:22:00.506 --> 00:22:01.690\n[LAUGH]\n>> Yeah, yeah, you start to see how\n\n420\n00:22:01.690 --> 00:22:06.010\nthings things can start getting\ncomplex really really quickly.\n\n421\n00:22:06.010 --> 00:22:07.848\nSo, thank you grep for\nthrowing that -i option in there,\n\n422\n00:22:07.848 --> 00:22:08.759\ncuz it saves me some typing.\n\n423\n00:22:08.759 --> 00:22:10.784\nAnd having to make sure\nthat my regex is right.\n\n424\n00:22:10.784 --> 00:22:13.963\nI'm not even 100% sure if that will\nwork to be honest with you [LAUGH].\n\n425\n00:22:13.963 --> 00:22:16.600\nLike I said, it gets really complex.\n\n426\n00:22:16.600 --> 00:22:20.980\nI've grown to become very reliant on\ngrep-i so that's one of my feelings.\n\n427\n00:22:20.980 --> 00:22:26.560\nBut yes, case sensitivity is something\nyou do need to look out for, so be aware.\n\n428\n00:22:27.650 --> 00:22:31.300\nNow the other thing that we\ncan also take a look at right,\n\n429\n00:22:31.300 --> 00:22:35.650\nis let's say that I want to actually do\na search but at the beginning of a word.\n\n430\n00:22:35.650 --> 00:22:38.040\nIn other words,\nI don't know anything else,\n\n431\n00:22:38.040 --> 00:22:39.930\ncan I limit myself by doing that instead?\n\n432\n00:22:39.930 --> 00:22:44.070\n>> Yeah, sometimes you want to look for\na word that begins, or is the beginning of\n\n433\n00:22:44.070 --> 00:22:47.990\na file, all right, or the beginning\nof a line of a file, should I say.\n\n434\n00:22:47.990 --> 00:22:49.840\nIt's very important,\nI don't wanna confuse you.\n\n435\n00:22:49.840 --> 00:22:54.020\nSo maybe I'm looking, parsing through\na text file, and I wanna find every\n\n436\n00:22:54.020 --> 00:22:58.320\nline that starts with this,\nand return only those lines.\n\n437\n00:22:58.320 --> 00:22:58.950\n>> How can I do that?\n\n438\n00:22:58.950 --> 00:23:00.270\nWell, there's cool stuff.\n\n439\n00:23:00.270 --> 00:23:04.380\nThere's a thing they call anchoring in\nregular expression, so what we're doing\n\n440\n00:23:04.380 --> 00:23:08.290\nis we're anchoring the regular\nexpression to the beginning of the file.\n\n441\n00:23:08.290 --> 00:23:11.374\nIt must be found at\nthe beginning of the file.\n\n442\n00:23:11.374 --> 00:23:14.753\nYou can find it anywhere else if you like,\nbut that's not what I want.\n\n443\n00:23:14.753 --> 00:23:17.016\nI want, I only want to see\nthe beginning of the file.\n\n444\n00:23:17.016 --> 00:23:18.202\nSo how do I do that?\n\n445\n00:23:18.202 --> 00:23:21.164\nPretty simple we go\ndown here to our regex.\n\n446\n00:23:21.164 --> 00:23:25.964\nWe add what's called a caret, which is\nthat little tee-pee looking guy and\n\n447\n00:23:25.964 --> 00:23:28.250\nthen we give it our expression.\n\n448\n00:23:28.250 --> 00:23:31.510\nSo for this example, what did I put here?\n\n449\n00:23:31.510 --> 00:23:35.840\nWe'll do, we'll actually take\nadvantage of that dash i caret and d.\n\n450\n00:23:35.840 --> 00:23:39.870\nWe should find any line that starts\nwith d either upper or lower case,\n\n451\n00:23:39.870 --> 00:23:44.860\nthank you Grep, and\nOnly if it starts with d.\n\n452\n00:23:44.860 --> 00:23:46.256\nIf it ends with d it doesn't matter.\n\n453\n00:23:46.256 --> 00:23:49.504\nIf it's the next one that's d,\nif there's just a d sitting somewhere,\n\n454\n00:23:49.504 --> 00:23:51.527\nif it's not the first\ncharacter in the line,\n\n455\n00:23:51.527 --> 00:23:54.531\nit's not sitting in that number one slot,\nI don't care about it.\n\n456\n00:23:54.531 --> 00:23:55.320\nThat's all I want to see.\n\n457\n00:23:55.320 --> 00:23:56.494\nSo hit return.\n\n458\n00:23:56.494 --> 00:24:01.775\nAnd you'll notice I get my\ntwo outputs here, d and d.\n\n459\n00:24:01.775 --> 00:24:02.972\nAnd yes, it's highlighted for me.\n\n460\n00:24:02.972 --> 00:24:06.791\nAnother nice functionality of a lot of\ngrep systems is it does highlighting,\n\n461\n00:24:06.791 --> 00:24:10.040\nto let me know there's your\ncharacter that you were looking for.\n\n462\n00:24:10.040 --> 00:24:13.540\nThey are at the very beginning of my file\nand I've returned those values for you.\n\n463\n00:24:13.540 --> 00:24:17.662\n>> Now Daniel, if we can actually look for\ncharacters as the beginning of a line,\n\n464\n00:24:17.662 --> 00:24:20.097\nthere's gotta also be\na way that we can look for\n\n465\n00:24:20.097 --> 00:24:22.480\ncharacters at the end of\na line as well right?\n\n466\n00:24:22.480 --> 00:24:25.970\n>> Yeah, that's another great way in which\nwe can use regular expression, right.\n\n467\n00:24:25.970 --> 00:24:28.086\nIf we want to find things\nat the beginning of a line,\n\n468\n00:24:28.086 --> 00:24:30.711\nsometimes we maybe we want to find\nthings at the end of the line.\n\n469\n00:24:30.711 --> 00:24:31.501\nHow do we do that?\n\n470\n00:24:31.501 --> 00:24:35.350\nSo we got the little teepee, the carrot\nsymbol for the first part of the line.\n\n471\n00:24:35.350 --> 00:24:38.928\nHow do I tell it that this is\nthe expression at the end of the line?\n\n472\n00:24:38.928 --> 00:24:42.270\nThat's where our dollar sign comes in.\n\n473\n00:24:42.270 --> 00:24:44.470\nThat's that special meta character for\nthat.\n\n474\n00:24:44.470 --> 00:24:46.800\nSo, how do we implement that?\n\n475\n00:24:46.800 --> 00:24:48.160\nHow do we make that happen?\n\n476\n00:24:48.160 --> 00:24:51.593\nLet's take a look at my screen really\nquick and I'll show you how to do that.\n\n477\n00:24:51.593 --> 00:24:55.048\nSo, the first thing I'm going to do\nis I'm going to cat the regex file.\n\n478\n00:24:55.048 --> 00:24:57.050\nE-X dot T-X-T.\n\n479\n00:24:57.050 --> 00:24:59.999\nAnd you'll notice at\nthe end of some of these,\n\n480\n00:24:59.999 --> 00:25:03.034\nover here I've got some\nof these test servers.\n\n481\n00:25:03.034 --> 00:25:04.570\nRight?\nIt says test,\n\n482\n00:25:04.570 --> 00:25:07.070\ntest, test for these different servers.\n\n483\n00:25:07.070 --> 00:25:09.490\nWell what if I just wanna spine those?\n\n484\n00:25:09.490 --> 00:25:12.910\nIt'd be really hard for me to go over\nhere and have to label them out,\n\n485\n00:25:12.910 --> 00:25:18.040\nespecially if I'm not 100% sure which\none of the servers are my test servers.\n\n486\n00:25:18.040 --> 00:25:21.358\nThey're named very similarly\ndacpo1 versus dacpo2.\n\n487\n00:25:21.358 --> 00:25:22.037\nDid I make TCPO?\n\n488\n00:25:22.037 --> 00:25:24.221\nMaybe I'm coming into\nan environment that's not my own.\n\n489\n00:25:24.221 --> 00:25:26.803\nI need to look through this text file and\n\n490\n00:25:26.803 --> 00:25:29.940\nfind out what's what,\nwhich one are the test.\n\n491\n00:25:29.940 --> 00:25:32.490\nWell, the cool thing is someone\nlabeled test on the end of there.\n\n492\n00:25:32.490 --> 00:25:34.410\nIt's a very nice thing to do.\n\n493\n00:25:34.410 --> 00:25:37.854\nSo I can use this with regular expression,\nand\n\n494\n00:25:37.854 --> 00:25:43.430\nI can use regular expression for\nthings like, I don't know, scripting.\n\n495\n00:25:43.430 --> 00:25:45.720\nThat's always a nice thing, right?\n\n496\n00:25:45.720 --> 00:25:46.872\nSo let's look for that character.\n\n497\n00:25:46.872 --> 00:25:49.530\nLet's look for\ntest at the end of our string here.\n\n498\n00:25:49.530 --> 00:25:52.205\nSo I will cap the file regex.text,\npipe that through grep.\n\n499\n00:25:52.205 --> 00:25:59.230\nWe'll do a dash I just for grins and we'll\nsay, let's see here, dollar sign right?\n\n500\n00:25:59.230 --> 00:26:01.740\nCuz that's end of my end of my line.\n\n501\n00:26:01.740 --> 00:26:03.438\nSo it'll look for this expression.\n\n502\n00:26:03.438 --> 00:26:07.831\nAnd I'm gonna say, that way I'll put\nthe star cuz that means anything.\n\n503\n00:26:07.831 --> 00:26:10.640\nAny length of characters\nup to this point it can be.\n\n504\n00:26:10.640 --> 00:26:14.780\nAnd then I'll say how about just est,\nlike so.\n\n505\n00:26:14.780 --> 00:26:18.023\nNow, you're gonna get two for\none deal right here,\n\n506\n00:26:18.023 --> 00:26:21.867\ncuz I gotta kinda jump the gun so\nI can show you what I'm doing.\n\n507\n00:26:21.867 --> 00:26:26.260\nI'm going to need to negate\nthe meaning of a character.\n\n508\n00:26:26.260 --> 00:26:28.810\nHopefully I mentioned\nto you the parenthesis.\n\n509\n00:26:28.810 --> 00:26:31.450\nMaybe I haven't yet\nif we haven't got to there.\n\n510\n00:26:31.450 --> 00:26:33.873\nAnyway parenthesis are special characters,\n\n511\n00:26:33.873 --> 00:26:36.860\nthey're meta characters\ninside a regular expression.\n\n512\n00:26:36.860 --> 00:26:41.410\nSo if I use one, it's gonna expect\nit to be a special character.\n\n513\n00:26:41.410 --> 00:26:44.140\nIt's gonna try to read\nthat meaning into it.\n\n514\n00:26:44.140 --> 00:26:47.199\nSo how do I use a parenthesis,\nlike what's on the end of my string,\n\n515\n00:26:47.199 --> 00:26:50.220\nwithout it trying to interpret it\nas some sort of meta character.\n\n516\n00:26:50.220 --> 00:26:54.930\nWell I have to do what's called negation,\nor escaping that character's value, and\n\n517\n00:26:54.930 --> 00:26:55.670\njust have it,\n\n518\n00:26:55.670 --> 00:27:00.900\nremember we talked about that earlier,\nabout having that negation functionality?\n\n519\n00:27:00.900 --> 00:27:02.960\nThis is one of the ways\nin which we do that.\n\n520\n00:27:02.960 --> 00:27:08.240\nAll I have to do is add a back slash\nlike so, and whatever special character\n\n521\n00:27:08.240 --> 00:27:12.885\ncomes after that back slash, it interprets\nas a literal instead of a meta character.\n\n522\n00:27:12.885 --> 00:27:17.077\nSo, I'm having to kinda throw that, like I\nsaid two for one deal for you to see not\n\n523\n00:27:17.077 --> 00:27:21.085\nonly we are using the dollar sign to find\nsomething at the end, but we're also\n\n524\n00:27:21.085 --> 00:27:25.300\nnegating the meaning of a special meta\ncharacter all in one regular expression.\n\n525\n00:27:25.300 --> 00:27:26.910\nThat's right ladies and gents.\n\n526\n00:27:26.910 --> 00:27:30.280\nSo I will put that\nclosing bracket in there.\n\n527\n00:27:30.280 --> 00:27:32.570\nHopefully, if I have done\neverything right, fingers crossed.\n\n528\n00:27:32.570 --> 00:27:34.150\nThey we go.\n\n529\n00:27:34.150 --> 00:27:35.830\nWorks like a charm.\n\n530\n00:27:35.830 --> 00:27:38.820\nI get every line that ends in est),\nclosed parentheses should I say.\n\n531\n00:27:38.820 --> 00:27:43.760\nAnd that's all my test servers, so\nnow I easily found all my test servers.\n\n532\n00:27:43.760 --> 00:27:45.160\nIt's a nice thing.\n\n533\n00:27:45.160 --> 00:27:46.730\nWe're moving on.\n\n534\n00:27:48.340 --> 00:27:50.940\nRegular expression, it rocks the day.\n\n535\n00:27:50.940 --> 00:27:55.557\n>> The other things that we can also\ndo of course is we can use an either or\n\n536\n00:27:55.557 --> 00:27:59.526\nexpression as well when we\nactually use grep along with our\n\n537\n00:27:59.526 --> 00:28:02.770\nregular expressions too,\nso help us out here.\n\n538\n00:28:02.770 --> 00:28:05.180\n>> Yeah, sometimes you want\nto say it's this or this.\n\n539\n00:28:05.180 --> 00:28:08.890\nWe've kind of done that with\nthe the brackets right.\n\n540\n00:28:08.890 --> 00:28:14.550\nWhen I did the search for\nthe names right, Dan or Don.\n\n541\n00:28:14.550 --> 00:28:17.750\nI said,\neither one of these things are acceptable.\n\n542\n00:28:17.750 --> 00:28:19.840\nA or O, or maybe it was A-E-I-O-U,\nor things like that.\n\n543\n00:28:19.840 --> 00:28:25.620\nSometimes I want to say it's this or\nthis and that's the ticket, right?\n\n544\n00:28:25.620 --> 00:28:29.630\nSo it's just a kind of a different\nway of doing the same type of thing.\n\n545\n00:28:29.630 --> 00:28:30.350\nSo how do we do that?\n\n546\n00:28:30.350 --> 00:28:33.717\nWe use our pipe operant,\nthat line that goes up and down,\n\n547\n00:28:33.717 --> 00:28:35.970\nto separate one value from the other.\n\n548\n00:28:35.970 --> 00:28:37.816\nNow, let me show you how this works and\n\n549\n00:28:37.816 --> 00:28:40.310\nthen we'll talk about what we're seeing,\nokay?\n\n550\n00:28:40.310 --> 00:28:43.170\nSo let me jack this down a little bit.\n\n551\n00:28:43.170 --> 00:28:45.400\nWe start using grep again.\n\n552\n00:28:45.400 --> 00:28:49.540\nAnd inside of here, I can do, this is\nsomething that you do need to know.\n\n553\n00:28:49.540 --> 00:28:52.510\nThis is part of what's called\nthe extended regular expressions.\n\n554\n00:28:52.510 --> 00:28:56.250\nThere's basic regular expressions and\nextended regular expressions.\n\n555\n00:28:56.250 --> 00:29:00.916\nSometimes if you run a regular\nexpression and it doesn't really work,\n\n556\n00:29:00.916 --> 00:29:04.338\nwhich can happen because\nyou've done it wrong, but\n\n557\n00:29:04.338 --> 00:29:09.960\nit can also be because you haven't invoked\nthe extended set of regular expressions.\n\n558\n00:29:09.960 --> 00:29:11.470\nThis is one of those cases.\n\n559\n00:29:11.470 --> 00:29:14.218\nTo do that we need to do\na grep dash capital E, so\n\n560\n00:29:14.218 --> 00:29:17.890\nit knows that this is an extended\nset of regular expressions.\n\n561\n00:29:17.890 --> 00:29:18.860\nYou could also just run E grep,\n\n562\n00:29:18.860 --> 00:29:23.420\nit's usually an alias in your system for\ngrep -E.\n\n563\n00:29:23.420 --> 00:29:24.350\nSo that let's us know,\n\n564\n00:29:24.350 --> 00:29:28.070\nor grep know, that it's moving to\nthe extended set of regular expressions.\n\n565\n00:29:28.070 --> 00:29:32.840\nSo now that we've got that there,\nwe can do,\n\n566\n00:29:32.840 --> 00:29:38.060\nI'm gonna look for D and then I do\na quotation mark, a single quotation mark.\n\n567\n00:29:38.060 --> 00:29:42.500\nCuz I need to group some things together,\nand that's why I needed that E.\n\n568\n00:29:42.500 --> 00:29:48.490\nAnd then I'm gonna do an open parenthesis,\nno negation on this one and\n\n569\n00:29:48.490 --> 00:29:53.270\nthen \"a|o\" and then close my\nparenthesis and close my quotation.\n\n570\n00:29:53.270 --> 00:29:56.767\nAnd then I'll add n for\nthe sake of good measure,\n\n571\n00:29:56.767 --> 00:30:00.106\nand that should be a good\nregular expression.\n\n572\n00:30:00.106 --> 00:30:03.460\nIt should find any string that\nstarts with a capitol D, and\n\n573\n00:30:03.460 --> 00:30:06.490\nhas either an A or\nan O between itself and an N, okay.\n\n574\n00:30:06.490 --> 00:30:12.076\nSo it should find Dan, Don, or Den,\nor Din or anything, I'm sorry,\n\n575\n00:30:12.076 --> 00:30:17.407\nit won't find Den or Din,\nonly words that are D-A-N or D-O-N.\n\n576\n00:30:17.407 --> 00:30:22.483\nIt won't find any other thing\nthan those two words, okay?\n\n577\n00:30:22.483 --> 00:30:27.210\nSo if I hit return,\nwe do see that it finds Dan and Don.\n\n578\n00:30:27.210 --> 00:30:31.160\nIf I had Din in here, it wouldn't have\nfound that, even if it was capital D,\n\n579\n00:30:31.160 --> 00:30:35.200\nwith an I, and an N, it would not have\nfound that because I said only A or O.\n\n580\n00:30:36.330 --> 00:30:38.390\nAgain I could have done\nthat with the braces.\n\n581\n00:30:38.390 --> 00:30:40.310\nObviously, that would have\nbeen a little bit easier,\n\n582\n00:30:40.310 --> 00:30:44.010\nbut you need to know this\nextended functionality for other\n\n583\n00:30:44.010 --> 00:30:48.610\nways in which you can use the or operator\ninside of your regular expressions.\n\n584\n00:30:49.670 --> 00:30:52.832\nWell Ronnie I think that\nis all I've got for today.\n\n585\n00:30:52.832 --> 00:30:56.829\n[LAUGH] But as far as regular expressions,\nit should be plenty for\n\n586\n00:30:56.829 --> 00:30:59.502\nour good viewers here to chew on, though.\n\n587\n00:30:59.502 --> 00:31:00.120\n>> All right.\n\n588\n00:31:00.120 --> 00:31:04.880\nSo regular expressions really do help\nwhen we don't know the exact pattern\n\n589\n00:31:04.880 --> 00:31:08.062\nthat we're normally looking for,\nand you can see how powerful it is.\n\n590\n00:31:08.062 --> 00:31:11.087\nWe can either have it where we know maybe\nthe beginning of the line, we know the end\n\n591\n00:31:11.087 --> 00:31:14.085\nof the line, we can have it where we only\nknow the middle of the line if we need to.\n\n592\n00:31:14.085 --> 00:31:15.835\nAnd any characters, anything in between.\n\n593\n00:31:15.835 --> 00:31:19.951\nThe only thing that we really\nhave to worry about, of course,\n\n594\n00:31:19.951 --> 00:31:23.785\nis that it is such a wide variety\nof characters we can use.\n\n595\n00:31:23.785 --> 00:31:26.220\nAnd those special characters also,\nwe're looking for that character.\n\n596\n00:31:26.220 --> 00:31:28.950\nWe also need to understand that\nability to escape those as well.\n\n597\n00:31:28.950 --> 00:31:31.992\nAnd this is gonna become very handy as you\ndo need to search through files to find\n\n598\n00:31:31.992 --> 00:31:33.250\nthe information that you need.\n\n599\n00:31:33.250 --> 00:31:37.500\nAnd you see by using grep, where we\nshowed the power of regular expressions.\n\n600\n00:31:37.500 --> 00:31:41.120\nRegular expressions are used\njust about everywhere.\n\n601\n00:31:41.120 --> 00:31:44.186\nEven if you're not sure\nthat they're being used,\n\n602\n00:31:44.186 --> 00:31:47.050\nmore than likely they\nare actually a part of it.\n\n603\n00:31:47.050 --> 00:31:51.198\nI know like in Windows if I ask you to do\nsomething like DAR*.*, that's actually\n\n604\n00:31:51.198 --> 00:31:54.456\na regular expression that's being\nused there in the end as well so\n\n605\n00:31:54.456 --> 00:31:57.620\nit is actually flooding our lives\nwhether or not we know about.\n\n606\n00:31:57.620 --> 00:32:01.514\nDan, thank you again for those examples\nof regular expressions and even though we\n\n607\n00:32:01.514 --> 00:32:04.910\nknow it can get a lot deeper,\nthat's a great place for us to begin with.\n\n608\n00:32:04.910 --> 00:32:07.060\nThank you also for\nbeing with us to day as well.\n\n609\n00:32:07.060 --> 00:32:10.420\nAnd we're going to go ahead and\nsign off on this episode.\n\n610\n00:32:10.420 --> 00:32:13.530\nSigning off for ITProTV, I'm Ronnie Wong.\n\n611\n00:32:13.530 --> 00:32:15.580\n>> And I'm Daniel Lowrie.\n\n612\n00:32:15.580 --> 00:32:19.600\n>> And we'll see you next time.\n\n613\n00:32:19.600 --> 00:32:20.100\n[MUSIC]\n\n",
          "vimeoId": "146521507"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin to show the use of variables within scripts.  They take a look again at basic variables.   Even though we can create variables and define them, there are times when we need input from another user.  Daniel demonstrates how we accomplish having another user provide input for the variables and even multiple inputs for an array.  Here are the building blocks for more complex scripts that we create.",
          "length": "2158",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-10-1-variables_in_bash_scripts-111215-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-10-1-variables_in_bash_scripts-111215-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-10-1-variables_in_bash_scripts-111215-1-sm.jpg",
          "title": "Variables in BASH Scripting",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.064\n[MUSIC]\n\n2\n00:00:01.064 --> 00:00:05.895\nWelcome to another exciting\nepisode here on ITPRO TV.\n\n3\n00:00:05.895 --> 00:00:06.680\nI'm your host Ronnie Wong.\n\n4\n00:00:06.680 --> 00:00:12.947\nAnd today we are taking a look at BASH and\nscripting.\n\n5\n00:00:12.947 --> 00:00:17.891\nSpecifically talking about variables, and\n\n6\n00:00:17.891 --> 00:00:22.320\nusing them, of course, in scripts to.\n\n7\n00:00:23.590 --> 00:00:25.566\nAnd who better to help use than Mr.\nDaniel Lowry.\n\n8\n00:00:25.566 --> 00:00:29.850\nAnd Daniel, you've already led us through\nsome scripting, a little bit of it.\n\n9\n00:00:29.850 --> 00:00:33.150\nBut we need to understand why\ndo we use variables in scripts.\n\n10\n00:00:33.150 --> 00:00:34.280\nThat's what we have to begin to do.\n\n11\n00:00:34.280 --> 00:00:36.345\n>> Yeah, it's exactly right.\n\n12\n00:00:36.345 --> 00:00:41.530\nWell, you might be thinking to yourself,\ndidn't we already kinda cover this topic?\n\n13\n00:00:41.530 --> 00:00:43.029\nAnd yeah, we did kind of cover this topic.\n\n14\n00:00:43.029 --> 00:00:45.170\nWe talked about variables\nin the previous show.\n\n15\n00:00:45.170 --> 00:00:49.087\nBut mostly specifically\nwhat a global variable was,\n\n16\n00:00:49.087 --> 00:00:52.831\nenvironmental variable\nversus a local variable,\n\n17\n00:00:52.831 --> 00:00:57.718\nand how you work with the two\ndifferent things and set them as well.\n\n18\n00:00:57.718 --> 00:00:59.510\nBut now we're talking about scripts.\n\n19\n00:00:59.510 --> 00:01:02.759\nWe had to lay that foundation so\nthat we could come back here and say,\n\n20\n00:01:02.759 --> 00:01:06.350\nnow that I'm actually creating a script,\nhow do I work with my variables?\n\n21\n00:01:06.350 --> 00:01:10.790\nEvery time you launch a script,\nit usually will create a sub shell.\n\n22\n00:01:10.790 --> 00:01:14.984\nAnd remember, my variables that I create\nin the shell, the original shell, won't be\n\n23\n00:01:14.984 --> 00:01:19.680\nin my sub shells and just start exporting\nthings, and then it gets a little hinkey.\n\n24\n00:01:19.680 --> 00:01:23.442\nSo, the best thing to do is call\nthem in the actual script itself, so\n\n25\n00:01:23.442 --> 00:01:26.290\nwe can use that, and\nthe values that they contain.\n\n26\n00:01:26.290 --> 00:01:30.297\nSo, that's why it's important for\nus to be able to declare variables and\n\n27\n00:01:30.297 --> 00:01:33.280\nuse variable inside of a script\nin our scripting life.\n\n28\n00:01:33.280 --> 00:01:37.547\nNow, that being said, we're gonna\nremember what a variable actually is,\n\n29\n00:01:37.547 --> 00:01:39.088\nand that is the container.\n\n30\n00:01:39.088 --> 00:01:41.710\nRemember it's a container\nthat holds a value.\n\n31\n00:01:41.710 --> 00:01:45.590\nSo, we declare the value, here's\nthe container which is the variable.\n\n32\n00:01:45.590 --> 00:01:49.186\nYou put the value into the container and\nwe're off to the races.\n\n33\n00:01:49.186 --> 00:01:51.200\nThat is what a variable is.\n\n34\n00:01:51.200 --> 00:01:52.890\nNow what can that be?\n\n35\n00:01:52.890 --> 00:01:54.190\nWell, it can be a lot of things.\n\n36\n00:01:54.190 --> 00:01:57.220\nAnd we've seen this a little bit already.\n\n37\n00:01:57.220 --> 00:01:59.700\nIt can be just a string of text.\n\n38\n00:01:59.700 --> 00:02:03.290\nI can make it a word,\nI can make it number, an integer.\n\n39\n00:02:03.290 --> 00:02:07.990\nAnd not just a regular, if I type\nthe number one, it sees that as a string.\n\n40\n00:02:07.990 --> 00:02:10.164\nIt automatically interprets\nthat as a string.\n\n41\n00:02:10.164 --> 00:02:14.614\nI would also wanna declare those as\nintegers as well, which I can do and\n\n42\n00:02:14.614 --> 00:02:15.670\nit'll be fun.\n\n43\n00:02:15.670 --> 00:02:22.420\nWe can do command output, we can do file\npaths, just about anything that we like.\n\n44\n00:02:22.420 --> 00:02:25.864\nWe can throw into those variables,\nso that we can use\n\n45\n00:02:25.864 --> 00:02:30.710\nthe variable as the reference to\nthe value throughout our scripts.\n\n46\n00:02:30.710 --> 00:02:34.094\nMaking it a whole lot easier for\nus to use and create scripts without\n\n47\n00:02:34.094 --> 00:02:37.370\nwanting to pull our eyes out,\ntyping in all sorts of craziness.\n\n48\n00:02:37.370 --> 00:02:39.260\nWe just use the variable name instead.\n\n49\n00:02:39.260 --> 00:02:43.466\n>> So Daniel, what we had actually talked\nabout also previously in creating our\n\n50\n00:02:43.466 --> 00:02:46.520\nvariables here,\nis that syntax of being do so.\n\n51\n00:02:46.520 --> 00:02:51.488\nSo, we saw where you'd actually done in\na previous episode where you said like,\n\n52\n00:02:51.488 --> 00:02:55.301\nvar one equals, you know,\nhost name or something like that.\n\n53\n00:02:55.301 --> 00:02:57.484\nAnd then we're able to actually\ncall that variable up and\n\n54\n00:02:57.484 --> 00:02:58.990\nactually print it out on the host name.\n\n55\n00:02:58.990 --> 00:03:01.520\nSo, that's kind of an example\nof what we're talking about.\n\n56\n00:03:01.520 --> 00:03:04.795\nWhether we're talking something\nlike as string like that, or\n\n57\n00:03:04.795 --> 00:03:08.502\nwhether we're trying to refer to\na file somewhere inside a directory,\n\n58\n00:03:08.502 --> 00:03:12.240\ninside of Linux or whatever,\na Unix system that you're working with.\n\n59\n00:03:12.240 --> 00:03:13.789\nIt gives us that ability to do so.\n\n60\n00:03:13.789 --> 00:03:16.570\nAnd that's the basis of what\nwe're talking about here today.\n\n61\n00:03:16.570 --> 00:03:20.485\nSo, trying to at least understand that\nis really going to help us out because\n\n62\n00:03:20.485 --> 00:03:23.620\nnow we're actually starting\nto add those things together.\n\n63\n00:03:23.620 --> 00:03:26.693\nIn a previous episode we started\nscripting a little bit, but\n\n64\n00:03:26.693 --> 00:03:28.145\nnow we're combining both.\n\n65\n00:03:28.145 --> 00:03:29.965\nWe're taking the idea of variables and\n\n66\n00:03:29.965 --> 00:03:33.234\nwe're taking the scripting idea,and\nwe are merging them together.\n\n67\n00:03:33.234 --> 00:03:37.660\nAnd Daniel, this is again for me where it\ngets a little I'm now in the deep end and\n\n68\n00:03:37.660 --> 00:03:40.304\nI'm trying to paddle water to stay afloat,\nand\n\n69\n00:03:40.304 --> 00:03:42.772\nI keep dipping under\na every once in a while.\n\n70\n00:03:42.772 --> 00:03:46.847\nYou're gonna help us stay afloat and\nstart to swim a little bit.\n\n71\n00:03:46.847 --> 00:03:47.620\n>> That's right Ronnie.\n\n72\n00:03:47.620 --> 00:03:48.990\nDon't worry,\nI'm gonna tuck you a life preserver today.\n\n73\n00:03:48.990 --> 00:03:51.510\n>> Thank you. [LAUGH] >> Hopefully by\nthe end of the show, you'll at least\n\n74\n00:03:51.510 --> 00:03:54.500\nunderstand variables, you'll be\nable to use them in your scripts.\n\n75\n00:03:54.500 --> 00:03:57.202\nYou might not be the most advanced\nvariable guy on earth and\n\n76\n00:03:57.202 --> 00:03:58.924\ncreate these awesome bash scripts.\n\n77\n00:03:58.924 --> 00:04:03.590\nBut you'll start to see them and\nthey're really not that difficult.\n\n78\n00:04:03.590 --> 00:04:06.850\nSo, you very well may be at\nthe advanced level of variables.\n\n79\n00:04:06.850 --> 00:04:08.490\nIt's not a whole lot to it.\n\n80\n00:04:08.490 --> 00:04:11.703\nWe're just gonna see how we use\nthem inside of our scripts, and\n\n81\n00:04:11.703 --> 00:04:13.590\nthat's what I wanna show you today.\n\n82\n00:04:13.590 --> 00:04:19.174\nSo, let's jump to my computer and\nlet's do a little go back in time here,\n\n83\n00:04:19.174 --> 00:04:23.330\nremember exactly what it\nmeans to declare a variable.\n\n84\n00:04:23.330 --> 00:04:27.951\nSo in Bash, which I am using, obviously\nI've got this terminal emulator up.\n\n85\n00:04:27.951 --> 00:04:31.100\nI wanted to declare a variable foo.\n\n86\n00:04:31.100 --> 00:04:32.730\nI'll just say foo equals hello.\nWe kinda saw that before,\n\n87\n00:04:32.730 --> 00:04:35.450\nif you watched the previous episodes.\n\n88\n00:04:35.450 --> 00:04:39.945\nNow, declared foo to equal hello,\nand any time I want to do that and\n\n89\n00:04:39.945 --> 00:04:44.522\nuse the foo variable, you just\nremember I can do things like echo and\n\n90\n00:04:44.522 --> 00:04:50.180\nthen put the dollar sign in front of it,\ncoz that is saying reference my variables.\n\n91\n00:04:50.180 --> 00:04:54.250\nIf there's a variable named this,\nthey start with that dollar sign.\n\n92\n00:04:54.250 --> 00:04:58.092\nAnything after that dollar sign if you\nfind a variable with that name use that\n\n93\n00:04:58.092 --> 00:04:58.701\nvariable.\n\n94\n00:04:58.701 --> 00:05:00.580\nOtherwise, there'll be nothing.\n\n95\n00:05:00.580 --> 00:05:02.650\nEcho foo, we see that I get Hello.\n\n96\n00:05:02.650 --> 00:05:08.320\nIt doesn't do, like this would do\necho foo, where I get foo back.\n\n97\n00:05:08.320 --> 00:05:10.866\nSo, with the dollar sign\nit tells the shell,\n\n98\n00:05:10.866 --> 00:05:15.570\ndon't forget what I'm trying to get you to\ndo is to work with some sort of variable.\n\n99\n00:05:15.570 --> 00:05:19.021\nAnd if you find it, echo the results\nback out to the screen and\n\n100\n00:05:19.021 --> 00:05:20.520\nthat's what we see here.\n\n101\n00:05:20.520 --> 00:05:21.980\nAnd, again, we can do path names,\n\n102\n00:05:21.980 --> 00:05:24.530\njust about anything you want to\nput inside of your variables.\n\n103\n00:05:24.530 --> 00:05:27.560\nAnd make them do things.\n\n104\n00:05:27.560 --> 00:05:30.670\nFor scripting, really it's identical,\nthere is no difference.\n\n105\n00:05:30.670 --> 00:05:34.730\nSo let me do a,\nwe'll just create a little script here.\n\n106\n00:05:34.730 --> 00:05:41.337\nWe'll call it, how about variable?\n\n107\n00:05:41.337 --> 00:05:42.990\n>> Variable.\n>> Variable.sh.\n\n108\n00:05:42.990 --> 00:05:47.250\nSo, variable.sh if I can spell that.\n\n109\n00:05:47.250 --> 00:05:50.574\nAnd we'll don't forget to add our\nshebang line kind of bin bash.\n\n110\n00:05:50.574 --> 00:05:55.720\nAnd really,\nall we're doing is the exact same thing.\n\n111\n00:05:55.720 --> 00:06:01.600\nWe'll say FOO=Hello, just like that.\n\n112\n00:06:01.600 --> 00:06:04.684\nNow we've created a script that\nhas a variable inside of it and\n\n113\n00:06:04.684 --> 00:06:06.060\nthe variable has content.\n\n114\n00:06:06.060 --> 00:06:09.168\nAnd if I put another command, say echo,\n\n115\n00:06:09.168 --> 00:06:14.300\ndon't forget my dollar sign, FOO,\nand then we save and run this.\n\n116\n00:06:14.300 --> 00:06:17.370\nWell, that should echo\nwhatever the value of FOO is.\n\n117\n00:06:17.370 --> 00:06:20.233\nSo, let's do that on for load, x.\n\n118\n00:06:20.233 --> 00:06:22.942\nAnd don't forget to add\nthe executable bits to your scripts,\n\n119\n00:06:22.942 --> 00:06:24.620\notherwise they won't run very well.\n\n120\n00:06:24.620 --> 00:06:27.500\nSo, we'll do chmod command\n+x to variable.sh.\n\n121\n00:06:27.500 --> 00:06:30.696\nAnd now, I can do the ./variable.sh.\n\n122\n00:06:30.696 --> 00:06:36.890\nAnd look, it runs and echos the word\nhello, coz that was our variable.\n\n123\n00:06:36.890 --> 00:06:45.040\nSo, now you've seen exactly what it takes\nto declare a variable inside of a script.\n\n124\n00:06:45.040 --> 00:06:48.570\nNot a lot to it, identical really, to what\nwe did just at the command line itself.\n\n125\n00:06:48.570 --> 00:06:51.950\nCuz you gotta remember what is a script?\n\n126\n00:06:51.950 --> 00:06:56.018\nA script is just a list of\ncommands that gets interpreted in\n\n127\n00:06:56.018 --> 00:06:58.350\norder by the shell environment.\n\n128\n00:06:58.350 --> 00:07:01.605\n>> Now Daniel, that seems to work well\nbecause you actually have defined\n\n129\n00:07:01.605 --> 00:07:04.472\na variable, you named it exactly\nwhat you wanted to, you're\n\n130\n00:07:04.472 --> 00:07:08.608\nreally giving it everything The very fact\nis you're saying, hey, here's what I want,\n\n131\n00:07:08.608 --> 00:07:12.280\nhere's what I want this to actually be\nnamed, and here's what the output is.\n\n132\n00:07:12.280 --> 00:07:14.679\nBut a lot of times when\nwe start doing scripting,\n\n133\n00:07:14.679 --> 00:07:18.790\nit's usually also because we're trying to\nget answers from someone else as well.\n\n134\n00:07:18.790 --> 00:07:20.240\nAnd now,\nwe want to actually set some parameters.\n\n135\n00:07:20.240 --> 00:07:23.230\nSo, it might be instead that\nwhat we wanna be able to do is,\n\n136\n00:07:23.230 --> 00:07:26.540\nI don't have all of the actual,\nwhat I want the variables to me.\n\n137\n00:07:26.540 --> 00:07:29.498\nCan we, or is there someway\nthat we can actually say, look,\n\n138\n00:07:29.498 --> 00:07:32.290\nI need more information\nthan what I have right now.\n\n139\n00:07:32.290 --> 00:07:34.232\nI'm just gonna go ahead and\nset these variables and\n\n140\n00:07:34.232 --> 00:07:36.050\nthen hopefully we can\nget these answers later.\n\n141\n00:07:36.050 --> 00:07:37.020\n>> Yeah.\n\n142\n00:07:37.020 --> 00:07:39.708\nAnd this is really now we're\nstarting to get into a little\n\n143\n00:07:39.708 --> 00:07:41.280\nmore advanced in the scripting.\n\n144\n00:07:41.280 --> 00:07:44.970\nNot that this is a difficult thing,\nbut it's not just those commands.\n\n145\n00:07:44.970 --> 00:07:46.137\nNow we're asking,\n\n146\n00:07:46.137 --> 00:07:50.113\nwhat Ronnie saying is what if I have\na user that's running a script and\n\n147\n00:07:50.113 --> 00:07:54.380\nmy script needs input from them coz\nonly they know what the value would be.\n\n148\n00:07:54.380 --> 00:07:56.810\nSo, if the user has the value,\nsomething like their name.\n\n149\n00:07:56.810 --> 00:08:01.190\nThe user knows their name, but the script\nprobably doesn't know their name.\n\n150\n00:08:01.190 --> 00:08:03.720\nIt's just a script.\nIf I create it for everyone and\n\n151\n00:08:03.720 --> 00:08:08.260\nI want them to be able to run it,and\nit needs to know who they are.\n\n152\n00:08:08.260 --> 00:08:12.520\nWell, then they're going to have\nto supply them with that value.\n\n153\n00:08:12.520 --> 00:08:15.308\nSo, we need to be able to\nread from them to say,\n\n154\n00:08:15.308 --> 00:08:17.460\nscript is asking me what my name is.\n\n155\n00:08:17.460 --> 00:08:23.130\nHow do I tell it how to read\nthat information from the user.\n\n156\n00:08:23.130 --> 00:08:25.606\nIt's a really simple idea or\ncommand, it's read.\n\n157\n00:08:25.606 --> 00:08:29.350\nIt's gonna say read from\nthe terminal whatever user inputs,\n\n158\n00:08:29.350 --> 00:08:32.330\nand that's what we're going to use.\n\n159\n00:08:32.330 --> 00:08:35.564\nSo, let's jump back into scripts here.\n\n160\n00:08:35.564 --> 00:08:40.330\nLet's see here, let's create a real\nquick one, we'll just call it read.sh.\n\n161\n00:08:40.330 --> 00:08:42.505\nActually, I need that nano,\ndon't forget that.\n\n162\n00:08:42.505 --> 00:08:43.526\nread.sh.\n\n163\n00:08:43.526 --> 00:08:47.370\nActually you know,\nI'll use my old variable script.\n\n164\n00:08:47.370 --> 00:08:48.100\nThat'll make it easier.\n\n165\n00:08:48.100 --> 00:08:52.090\nThat way I don't create a bunch of files.\n\n166\n00:08:52.090 --> 00:08:53.310\nSo, we go back in here and Ronnie's right.\n\n167\n00:08:53.310 --> 00:08:57.070\nLook, here I've declared this\nis what the variable is.\n\n168\n00:08:57.070 --> 00:09:01.967\nBut if I want to,\nwhat if the rates are from here to here,\n\n169\n00:09:01.967 --> 00:09:06.910\nif I say echo,\nwhat is your name, like that.\n\n170\n00:09:06.910 --> 00:09:08.682\nWell, it's asking something.\n\n171\n00:09:08.682 --> 00:09:10.190\nIt's trying to get input from you.\n\n172\n00:09:10.190 --> 00:09:12.450\nSo, all we do is we say, read.\n\n173\n00:09:13.920 --> 00:09:17.048\nAnd then we create a variable name.\n\n174\n00:09:17.048 --> 00:09:21.743\nNow remember, when you're declaring\nvariables you don't use the dollar sign,\n\n175\n00:09:21.743 --> 00:09:24.274\nonly when you're referencing variables.\n\n176\n00:09:24.274 --> 00:09:25.600\nSo, you don't need\na dollar sign right now.\n\n177\n00:09:25.600 --> 00:09:27.750\nWe just need to give it a name.\n\n178\n00:09:27.750 --> 00:09:32.020\nWhat we're doing is we're saying,\nwe'll read and just call it NAME.\n\n179\n00:09:32.020 --> 00:09:35.515\nAnd now, we have a variable that\nis going to be read into that.\n\n180\n00:09:35.515 --> 00:09:38.496\nValue's gonna be coming\nfrom that read command.\n\n181\n00:09:38.496 --> 00:09:43.580\nRead's gonna put that value from\nwhatever the user has imputed at\n\n182\n00:09:43.580 --> 00:09:49.140\nthe keyboard into the script here,\nand it's gonna put that into name.\n\n183\n00:09:49.140 --> 00:09:52.585\nSo, name becomes that value.\n\n184\n00:09:52.585 --> 00:09:58.027\nAnd now I can say, echo welcome and\n\n185\n00:09:58.027 --> 00:10:02.430\nthen say name, like that.\n\n186\n00:10:02.430 --> 00:10:05.575\nAnd close my A brackets up.\nWhen we get to anytime you open something\n\n187\n00:10:05.575 --> 00:10:07.370\nyou gotta close it.\n\n188\n00:10:07.370 --> 00:10:09.829\nAnd that should work for us here.\n\n189\n00:10:09.829 --> 00:10:11.666\nYeah, that looks good.\n\n190\n00:10:11.666 --> 00:10:12.220\nLet's do that.\n\n191\n00:10:12.220 --> 00:10:12.990\nAll right.\n\n192\n00:10:12.990 --> 00:10:13.675\nCtrl+Alt save.\n\n193\n00:10:13.675 --> 00:10:17.225\nCtrl+X to get out, and\nrun our script again.\n\n194\n00:10:17.225 --> 00:10:20.426\nAnd now that the script is running,\nit's asking me another question.\n\n195\n00:10:20.426 --> 00:10:21.970\nWhat is your name?\n\n196\n00:10:21.970 --> 00:10:25.080\nI can type in my name, Daniel,\nand it'll say welcome Daniel.\n\n197\n00:10:25.080 --> 00:10:26.185\nAll right.\n\n198\n00:10:26.185 --> 00:10:29.561\nSo, I gave it the value,\nread put that into our variable.\n\n199\n00:10:29.561 --> 00:10:33.360\nAnd then we echoed whatever was\ninside that value of that variable.\n\n200\n00:10:33.360 --> 00:10:36.995\nIf Ronnie would've run the same\nscripts and he types in Ronnie,\n\n201\n00:10:36.995 --> 00:10:38.420\nit says welcome Ronnie.\n\n202\n00:10:38.420 --> 00:10:41.156\nSee, the variable changes each time.\n\n203\n00:10:41.156 --> 00:10:46.010\nBecause what it's only reading whatever\nis given to it by the read command.\n\n204\n00:10:46.010 --> 00:10:49.791\nSo, read is a very powerful tool for us\nto be able to start creating some really\n\n205\n00:10:49.791 --> 00:10:52.070\ninteractive scripts that\nwork with the user.\n\n206\n00:10:52.070 --> 00:10:55.091\nSo, it's a lot of fun to play with\nespecially when you start writing\n\n207\n00:10:55.091 --> 00:10:57.900\nscripts that do stuff for you and\nneed that input from the user.\n\n208\n00:10:57.900 --> 00:11:00.950\nVery cool stuff.\n\n209\n00:11:00.950 --> 00:11:02.478\n>> Yes.\nDaniel what it seems like is without\n\n210\n00:11:02.478 --> 00:11:03.767\nactually being able to do this,\n\n211\n00:11:03.767 --> 00:11:06.776\nwhat you'd have to do is you'd have\nto create a variable with everybody's\n\n212\n00:11:06.776 --> 00:11:09.350\nname that you wanted to be able\nto interact with the script.\n\n213\n00:11:09.350 --> 00:11:12.809\nAnd so, you'd actually probably\ncreate like Ronnie equals Ronnie, and\n\n214\n00:11:12.809 --> 00:11:16.267\nthen hopefully it actually asks that\nname and you actually type that in and\n\n215\n00:11:16.267 --> 00:11:17.570\nit actually prints it out.\n\n216\n00:11:17.570 --> 00:11:20.994\nBut by doing the variable like this,\nit doesn't matter who inputs it,\n\n217\n00:11:20.994 --> 00:11:24.030\nit's actually gonna display\nwhatever is actually out there.\n\n218\n00:11:24.030 --> 00:11:28.534\nNow Daniel, there's also times there where\nI can see this being very useful as these\n\n219\n00:11:28.534 --> 00:11:29.239\nscript run.\n\n220\n00:11:29.239 --> 00:11:31.873\nWhere I know that not only\nwant to identify the user, but\n\n221\n00:11:31.873 --> 00:11:35.312\nmaybe we want to identify a department or\nsomething else that they want.\n\n222\n00:11:35.312 --> 00:11:39.630\nSo in other words, I want them to actually\nbe able to do more than just provide\n\n223\n00:11:39.630 --> 00:11:41.460\na single value like a name here.\n\n224\n00:11:41.460 --> 00:11:45.578\nSo, if I do something like that, can you\nhelp us to actually figure how to do that?\n\n225\n00:11:45.578 --> 00:11:47.231\n>> Yeah it's really cool\nwe can create arrays,\n\n226\n00:11:47.231 --> 00:11:49.310\nis basically what Ronnie's\ntrying to get to.\n\n227\n00:11:49.310 --> 00:11:51.510\nWe can create a whole array\ninside of a variable.\n\n228\n00:11:51.510 --> 00:11:54.171\nWe saw about how to build\narrays in a previous episode.\n\n229\n00:11:54.171 --> 00:11:57.357\nSo, we're gonna to take some\nof what we learned there, and\n\n230\n00:11:57.357 --> 00:11:59.922\nwe're gonna move that into,\nin combination.\n\n231\n00:11:59.922 --> 00:12:04.655\nCombination here, using our read command\nto see if we can't get the two to conjoin\n\n232\n00:12:04.655 --> 00:12:08.712\ntheir powers, so that we can build\nan array using input from the user.\n\n233\n00:12:08.712 --> 00:12:11.587\nAnd that's going to be very helpful\nthing in some of our scripts.\n\n234\n00:12:11.587 --> 00:12:14.372\nSo let's do that.\nI've actually already created this script,\n\n235\n00:12:14.372 --> 00:12:16.504\nbecause it took a little bit of typing up.\n\n236\n00:12:16.504 --> 00:12:21.296\nI didn't want to bore you with watching me\nfumble around trying to type correctly.\n\n237\n00:12:21.296 --> 00:12:24.837\nSo I'm just going to, I believe I\nsaved it in this foo directory.\n\n238\n00:12:24.837 --> 00:12:26.962\nYeah, there it is, array.sh.\n\n239\n00:12:26.962 --> 00:12:28.160\nLet me clear our screen here real quickly.\n\n240\n00:12:29.600 --> 00:12:30.870\nThere we go.\n\n241\n00:12:30.870 --> 00:12:31.962\nSo let's take a look inside there.\n\n242\n00:12:31.962 --> 00:12:36.420\nI'll open nano and array.sh.\n\n243\n00:12:36.420 --> 00:12:40.671\nAnd we look in here and we see, and\nthere's a lot of stuff happening, right?\n\n244\n00:12:40.671 --> 00:12:46.087\nBut don't feel like, whoa, man that's a\nlot of stuff, we haven't gotten that far!\n\n245\n00:12:46.087 --> 00:12:49.683\nReally, everything you see in here,\njust about, if I'm not mistaken,\n\n246\n00:12:49.683 --> 00:12:51.838\nis something that we've already covered.\n\n247\n00:12:51.838 --> 00:12:54.920\nI think save one command, and\nI'll explain it when we get there.\n\n248\n00:12:56.280 --> 00:12:58.087\nSo let's take a look at the script,\nwork our way through it.\n\n249\n00:12:58.087 --> 00:13:00.823\nSee if we can figure out what's happening,\nand then run it and\n\n250\n00:13:00.823 --> 00:13:02.250\nsee what kind of results we get.\n\n251\n00:13:02.250 --> 00:13:06.652\nSo the first line, obviously,\nis good old shebang bin bash,\n\n252\n00:13:06.652 --> 00:13:12.422\ncalling that shell and invoking that so\nit will read this through the bash shell.\n\n253\n00:13:12.422 --> 00:13:17.004\nAnd now our first command is echo,\nsaying echo this string of text.\n\n254\n00:13:17.004 --> 00:13:18.629\nWelcome to the array building script.\n\n255\n00:13:18.629 --> 00:13:20.990\nSo that's what we should\nsee on our screen.\n\n256\n00:13:20.990 --> 00:13:22.620\nAnd then there's our read command, right?\n\n257\n00:13:22.620 --> 00:13:24.220\nSo we've all ready covered reads.\n\n258\n00:13:24.220 --> 00:13:26.993\nIt's not that difficult looking for\nuser interaction.\n\n259\n00:13:26.993 --> 00:13:31.797\nNow you will notice there is an extra\nlittle tag on there to our read command.\n\n260\n00:13:31.797 --> 00:13:34.726\nIt's the p.\nIt's basically saying, read and\n\n261\n00:13:34.726 --> 00:13:35.713\nthen pause.\n\n262\n00:13:35.713 --> 00:13:38.712\nAnd that gives me the ability\nto add a line or print a line.\n\n263\n00:13:38.712 --> 00:13:40.379\nI believe it's either pause or print.\n\n264\n00:13:40.379 --> 00:13:43.212\nI can't remember which one it is,\nas a matter of fact.\n\n265\n00:13:43.212 --> 00:13:43.795\nIt's one of the two.\n\n266\n00:13:43.795 --> 00:13:48.219\nBut what it's saying is, I'm gonna have\nsomething here and I want you to wait for\n\n267\n00:13:48.219 --> 00:13:49.337\nuser interaction.\n\n268\n00:13:49.337 --> 00:13:53.297\nSo I'm printing out this line,\nwhat would you like to call your array?\n\n269\n00:13:53.297 --> 00:13:55.462\nAnd then I'm defining a variable.\n\n270\n00:13:55.462 --> 00:13:57.587\nThis is the variable definition.\n\n271\n00:13:57.587 --> 00:14:00.172\nHere is the value coming\nfrom the read command.\n\n272\n00:14:00.172 --> 00:14:03.671\nSo I want to name this array.\n\n273\n00:14:03.671 --> 00:14:06.730\nThat's basically saying I can\nname it whatever I want, and\n\n274\n00:14:06.730 --> 00:14:09.129\nthat goes into the array or\nvariable, right?\n\n275\n00:14:09.129 --> 00:14:12.347\nOkay, so moving on,\njust a blank echo line,\n\n276\n00:14:12.347 --> 00:14:16.260\ntrying to make it look a little\nbetter with the output.\n\n277\n00:14:16.260 --> 00:14:18.318\nThrowing some echos in there\nsometimes with no value whatsoever,\n\n278\n00:14:18.318 --> 00:14:20.129\nit'll just give you nice line breaks and\nbreak things up.\n\n279\n00:14:20.129 --> 00:14:22.426\nSo it's a nice thing to do in\nyour scripts from time to time.\n\n280\n00:14:22.426 --> 00:14:25.171\nLet's see here,\nalso echoing please add a value.\n\n281\n00:14:25.171 --> 00:14:29.837\nSo now the script is asking for\nmore input from the user itself.\n\n282\n00:14:29.837 --> 00:14:32.546\nSo it's saying read VAL 0.\n\n283\n00:14:32.546 --> 00:14:35.789\nSo it's reading input from the user, and\n\n284\n00:14:35.789 --> 00:14:39.503\nit's applying that value\nto a variable VAL0.\n\n285\n00:14:39.503 --> 00:14:42.171\nWe're going to use it later.\n\n286\n00:14:42.171 --> 00:14:46.332\nSo again, more breakage, and\nthen adding another variable,\n\n287\n00:14:46.332 --> 00:14:49.796\nand then same kind of idea\nadding another variable.\n\n288\n00:14:49.796 --> 00:14:52.676\nAnd now since now we have all\nthe necessary components,\n\n289\n00:14:52.676 --> 00:14:54.462\nthere's a little more down here.\n\n290\n00:14:54.462 --> 00:14:59.027\nAnd this is where we are gonna see the one\nnew command that you have not really seen\n\n291\n00:14:59.027 --> 00:15:02.796\nyet, or you haven't seen at all,\nand that's this declare -a.\n\n292\n00:15:02.796 --> 00:15:06.974\nThis was the only way I could actually\nmake this script work, without jumping\n\n293\n00:15:06.974 --> 00:15:11.296\nahead of the game and diving you guys\ninto things like conditional statements.\n\n294\n00:15:11.296 --> 00:15:12.129\nThis made that easy.\n\n295\n00:15:12.129 --> 00:15:15.636\nSo it was a nice little built-in\ncommand like called declare, and\n\n296\n00:15:15.636 --> 00:15:18.087\nit allows me to use the -a\nto declare an array.\n\n297\n00:15:18.087 --> 00:15:19.712\nSo what did I do?\n\n298\n00:15:19.712 --> 00:15:21.461\nI declared -a.\n\n299\n00:15:21.461 --> 00:15:28.380\nAnd what did I make the array name, but\nwhatever value was in our array variable.\n\n300\n00:15:28.380 --> 00:15:31.337\nSo I'm really kind of modifying\nwhat's going on there.\n\n301\n00:15:31.337 --> 00:15:33.515\nI'm making a regular variable, and I'm\nturning it into an array variable, okay?\n\n302\n00:15:33.515 --> 00:15:38.537\nBecause even though they're\nthe same kind of thing,\n\n303\n00:15:38.537 --> 00:15:41.671\nthey work in two different ways.\n\n304\n00:15:41.671 --> 00:15:42.671\nSo I had to do that.\n\n305\n00:15:42.671 --> 00:15:46.837\nI had to say, this variable is an array\nnow, and no longer just the standard.\n\n306\n00:15:46.837 --> 00:15:51.780\nBut it gets to keep the name that we\ngave it when we interact with it through\n\n307\n00:15:51.780 --> 00:15:53.180\nour script.\n\n308\n00:15:53.180 --> 00:15:54.005\nSo that's good.\n\n309\n00:15:54.005 --> 00:15:58.223\nAnd then down here, downstairs, you should\nbe familiar with this if you watched\n\n310\n00:15:58.223 --> 00:16:01.337\nthe show on variables before and\narrays, we covered this.\n\n311\n00:16:01.337 --> 00:16:05.798\nIt's basically saying in this array,\non this position which is position 0,\n\n312\n00:16:05.798 --> 00:16:09.041\nremember we kind of had some\nfun with that, it threw me for\n\n313\n00:16:09.041 --> 00:16:10.950\na loop for a second there.\n\n314\n00:16:10.950 --> 00:16:12.960\nComputers start counting\nfrom zero not one,\n\n315\n00:16:12.960 --> 00:16:16.112\nso don't forget that little\ntidbit of information.\n\n316\n00:16:16.112 --> 00:16:20.587\nSo ARRAY[0 is really the first\nposition will equal value one.\n\n317\n00:16:20.587 --> 00:16:23.370\nAnd where do we get these values from,\nright?\n\n318\n00:16:23.370 --> 00:16:25.940\nThose values come from what\nwe pulled from up here.\n\n319\n00:16:25.940 --> 00:16:30.880\nSee there's VAL1, VAL2,\nVAL0 is a little higher than that.\n\n320\n00:16:30.880 --> 00:16:37.296\nSo array position 1 will be value 1,\nand array position 2 will be VAL2.\n\n321\n00:16:37.296 --> 00:16:41.519\nThose cool variables that we got from\nthe read command, from our user, and\n\n322\n00:16:41.519 --> 00:16:45.087\nnow we're actually building\nan array using the read command.\n\n323\n00:16:45.087 --> 00:16:48.219\nSo let's look down here, and\nthen I even said all right,\n\n324\n00:16:48.219 --> 00:16:52.220\nlet's make sure that this does something\nmore than just build an array.\n\n325\n00:16:52.220 --> 00:16:53.754\nI wanna build an array, and\nthen I wanna be able to add to that array.\n\n326\n00:16:53.754 --> 00:16:57.671\nLet's say I forgot a variable,\ncan I do that?\n\n327\n00:16:57.671 --> 00:17:00.174\nYeah, I figured that out as well, and\n\n328\n00:17:00.174 --> 00:17:05.750\nbasically doing another read from\nthe user, and just giving it a position.\n\n329\n00:17:05.750 --> 00:17:09.101\nEven though there's nothing there,\nwe can just add that position,\n\n330\n00:17:09.101 --> 00:17:13.171\nby saying the array position that doesn't\nexist, so in this case it was number 3.\n\n331\n00:17:13.171 --> 00:17:15.171\nEven though there was nothing there,\nI just declare it.\n\n332\n00:17:15.171 --> 00:17:18.237\nAnd it equals whatever I\nput in there which is VAL3,\n\n333\n00:17:18.237 --> 00:17:20.337\nwhich is what we read from the user.\n\n334\n00:17:20.337 --> 00:17:25.350\nAnd then we echo of the entirety of what\nis in the array, it says, your new array.\n\n335\n00:17:25.350 --> 00:17:27.830\nAnd that's what this little\nstatement does right here.\n\n336\n00:17:27.830 --> 00:17:31.540\nIt says, basically print\neverything that's in the array.\n\n337\n00:17:31.540 --> 00:17:34.260\nOkay, so,\nhopefully that made sense to you guys.\n\n338\n00:17:34.260 --> 00:17:35.837\nI know it was a lot of talking.\n\n339\n00:17:35.837 --> 00:17:37.087\nBut really what commands are we using?\n\n340\n00:17:37.087 --> 00:17:38.921\nWe're using echo.\n\n341\n00:17:38.921 --> 00:17:39.671\nWe're using read.\n\n342\n00:17:39.671 --> 00:17:42.917\nAnd we're using declare,\nwhich is a new one for you, and\n\n343\n00:17:42.917 --> 00:17:47.462\nthen the array variable positioning stuff\nthat we saw in the previous episode.\n\n344\n00:17:47.462 --> 00:17:49.380\nSo, four things that we're really doing.\n\n345\n00:17:49.380 --> 00:17:53.631\nIt just seems like a lot, and\nyou have to logically get it squared away\n\n346\n00:17:53.631 --> 00:17:58.420\nin your mind, so that you understand\nthat remember, programming is logic.\n\n347\n00:17:58.420 --> 00:17:59.754\nThat's exactly what you're doing.\n\n348\n00:17:59.754 --> 00:18:03.812\nSo you really need to try to think\nlogically when it comes to your scripts,\n\n349\n00:18:03.812 --> 00:18:06.046\nand see how the flow is going to work out.\n\n350\n00:18:06.046 --> 00:18:08.685\nBut now that we've got this done,\nhopefully you see the logic in it, and\n\n351\n00:18:08.685 --> 00:18:10.337\nhopefully the computer\nsees the logic in it.\n\n352\n00:18:10.337 --> 00:18:13.337\nAnd it runs correctly, and\nit works that's what we want to do.\n\n353\n00:18:13.337 --> 00:18:15.255\nSo I'm just gonna exit out of here.\n\n354\n00:18:15.255 --> 00:18:16.711\nAnd now we're gonna run that guy.\n\n355\n00:18:16.711 --> 00:18:21.160\nSo I'm gonna say ./array and return.\n\n356\n00:18:21.160 --> 00:18:22.920\nOkay, so what do we get?\n\n357\n00:18:22.920 --> 00:18:25.150\nWelcome to the array building script!\n\n358\n00:18:25.150 --> 00:18:27.465\nWhat would you like to call your array?\n\n359\n00:18:27.465 --> 00:18:28.588\nNow, it's waiting for input.\n\n360\n00:18:28.588 --> 00:18:30.212\nSee, it's not doing anything.\n\n361\n00:18:30.212 --> 00:18:33.337\nIt's not my back at my terminal,\nI'm not getting a prompt.\n\n362\n00:18:33.337 --> 00:18:35.379\nIt's waiting for\nme to actually input data.\n\n363\n00:18:35.379 --> 00:18:40.712\nSo, let's just call this,\nwe'll call it fruit, cuz I like fruit.\n\n364\n00:18:40.712 --> 00:18:43.795\nFruit, not Freud, U-I-T, there we go.\n\n365\n00:18:43.795 --> 00:18:44.879\nFruit it is!\n\n366\n00:18:44.879 --> 00:18:48.190\nGood, now I understand that\nit did read what I had.\n\n367\n00:18:48.190 --> 00:18:51.134\nThat was a little help I put in there in\nthe script to help the user understand\n\n368\n00:18:51.134 --> 00:18:54.671\nthat they did something, and the computer\nrecognized that they did something, right?\n\n369\n00:18:54.671 --> 00:18:56.837\nSo it says please add value to your array.\n\n370\n00:18:56.837 --> 00:19:00.510\nNot a problem, let's call it,\nlet's do apples.\n\n371\n00:19:02.050 --> 00:19:03.710\nIt did the same thing.\n\n372\n00:19:03.710 --> 00:19:04.539\nPlease add another.\n\n373\n00:19:04.539 --> 00:19:05.754\nSo I know it's not the original one.\n\n374\n00:19:05.754 --> 00:19:10.421\nI'm not getting the exact same repetitious\noutput, and the user might get confused.\n\n375\n00:19:10.421 --> 00:19:12.557\nWhen you write scripts\nthat are user-interactive,\n\n376\n00:19:12.557 --> 00:19:15.463\nyou wanna make sure that they don't\nget confused by what's happening.\n\n377\n00:19:15.463 --> 00:19:19.669\nSo that's what I've done here, and\nthat's why you see different output for\n\n378\n00:19:19.669 --> 00:19:21.296\nadding more values, right?\n\n379\n00:19:21.296 --> 00:19:27.672\nSo we'll do B-A-N-A-N-A-S,\nbananas and then kiwi.\n\n380\n00:19:27.672 --> 00:19:30.897\nAll right, says now we have\nall the necessary components,\n\n381\n00:19:30.897 --> 00:19:34.588\nhere are the contents of your array,\nand it prints those out for me.\n\n382\n00:19:34.588 --> 00:19:35.700\nThank you so much, script.\n\n383\n00:19:35.700 --> 00:19:36.790\nI have added apples.\n\n384\n00:19:36.790 --> 00:19:37.587\nI have added bananas.\n\n385\n00:19:37.587 --> 00:19:38.671\nAnd I have added kiwi.\n\n386\n00:19:38.671 --> 00:19:39.790\nWe're good to go.\n\n387\n00:19:39.790 --> 00:19:41.130\nIt says, hey, you know what,\nwe're not done.\n\n388\n00:19:41.130 --> 00:19:43.004\nLet's add another value just in case.\n\n389\n00:19:43.004 --> 00:19:44.504\nAll right, what should it be?\n\n390\n00:19:44.504 --> 00:19:49.421\nI will add, how about oranges,\nO-R-A-N-G-E-S.\n\n391\n00:19:49.421 --> 00:19:55.087\nAll right, and then it says your new array\nhas apples, bananas, kiwis and oranges.\n\n392\n00:19:55.087 --> 00:19:57.891\nAdding that position to that array itself,\n\n393\n00:19:57.891 --> 00:20:02.589\nwe have now built an array using basically\nthe read command from the system\n\n394\n00:20:02.589 --> 00:20:07.086\nallowing us to build those arrays very,\nvery handy, handy feature.\n\n395\n00:20:07.086 --> 00:20:10.453\n>> Yeah, this is great, Daniel, because\nlike I said a little bit earlier not only\n\n396\n00:20:10.453 --> 00:20:12.212\ncan we do this with things like fruit, but\n\n397\n00:20:12.212 --> 00:20:15.505\nI can see where I can take these values\nnow and get the user to interact with me.\n\n398\n00:20:15.505 --> 00:20:19.508\nProvide for me things like their username,\nor maybe the first and last name,\n\n399\n00:20:19.508 --> 00:20:21.868\nas well as the department\nthat they work for.\n\n400\n00:20:21.868 --> 00:20:25.512\nAnd then even take some of the information\nthey were actually trying to use and\n\n401\n00:20:25.512 --> 00:20:28.837\nmaybe even insert that into another\nscript, which is also possible.\n\n402\n00:20:28.837 --> 00:20:31.212\nSo that's what we also wanna talk about.\n\n403\n00:20:31.212 --> 00:20:35.177\nAs well as the very fact is we can take\nlike the value that we have in this array,\n\n404\n00:20:35.177 --> 00:20:38.047\nand actually use it again now\nthat we have the array out.\n\n405\n00:20:38.047 --> 00:20:39.004\n>> Yeah, that's right.\n\n406\n00:20:39.004 --> 00:20:42.911\nAs soon as you give value to an array or\njust a regular variable,\n\n407\n00:20:42.911 --> 00:20:46.546\nyou can continue to keep using\nit throughout your script.\n\n408\n00:20:46.546 --> 00:20:50.050\nSo have a great time with that.\n\n409\n00:20:50.050 --> 00:20:54.588\nYou're going to actually do that\nprobably a lot, because values change.\n\n410\n00:20:54.588 --> 00:20:58.680\nAnd as we move into more advanced\nscripting stuff, conditional statements,\n\n411\n00:20:58.680 --> 00:21:02.963\nyou're gonna want values to change, so\nthat you can generate different output.\n\n412\n00:21:02.963 --> 00:21:06.921\nWe can start forking in different ways\nto start making decisions throughout our\n\n413\n00:21:06.921 --> 00:21:07.462\nscripts.\n\n414\n00:21:07.462 --> 00:21:10.379\nAnd that's where that's really\ngoing to come in handy.\n\n415\n00:21:10.379 --> 00:21:13.962\nAnd I'll show you how to\ndo that really quickly.\n\n416\n00:21:13.962 --> 00:21:15.498\nThat way we get it out of the way.\n\n417\n00:21:15.498 --> 00:21:17.794\nHow about that?\nAll we'd have to do is,\n\n418\n00:21:17.794 --> 00:21:23.716\nlet's just create a script really quickly,\nand we'll call it script1.\n\n419\n00:21:23.716 --> 00:21:30.338\nnano script1.sh and\ngive it my old shebang, bin/bash.\n\n420\n00:21:30.338 --> 00:21:37.296\nAnd we're just gonna declare a variable,\nwe'll say VAR1=Foo.\n\n421\n00:21:37.296 --> 00:21:41.981\nAnd, we will say echo VAR1.\n\n422\n00:21:41.981 --> 00:21:45.546\nDon't forget your correct\nsyntax there now, VAR1.\n\n423\n00:21:45.546 --> 00:21:50.943\nAnd now I can come here and say VAR2,\n\n424\n00:21:50.943 --> 00:21:56.210\ndeclaring a new variable =VAR1.\n\n425\n00:21:56.210 --> 00:21:59.989\nSo you kind of saw this before\nin my other scripts that,\n\n426\n00:21:59.989 --> 00:22:05.490\nwhere we're using referencing\nvariables within new command paths.\n\n427\n00:22:05.490 --> 00:22:08.321\nHere what I'm doing is,\nI'm saying I'm gonna create a variable\n\n428\n00:22:08.321 --> 00:22:10.336\nthat is actually includes\nanother variable.\n\n429\n00:22:10.336 --> 00:22:16.587\nSo I can do that, and\nI can say, echo VAR2.\n\n430\n00:22:16.587 --> 00:22:19.156\nI should get the same results as\nVAR1 because they're equal to each\n\n431\n00:22:19.156 --> 00:22:19.796\nother, right.\n\n432\n00:22:19.796 --> 00:22:21.254\nThey equal the same thing.\n\n433\n00:22:21.254 --> 00:22:24.547\nThe value of VAR2 is the variable of VAR1.\n\n434\n00:22:24.547 --> 00:22:29.629\nThe value of VAR1 is Foo, right,\nso that's how that's working.\n\n435\n00:22:29.629 --> 00:22:33.337\nSo we should see foo foo at this point.\n\n436\n00:22:33.337 --> 00:22:35.017\n>> [LAUGH]\n>> And then if I hit return and\n\n437\n00:22:35.017 --> 00:22:36.921\nthen I say I wanna add a little more.\n\n438\n00:22:36.921 --> 00:22:38.380\nI still wanna continue to\nreference my variable.\n\n439\n00:22:38.380 --> 00:22:45.438\nI'll say VAR3=$VAR2 and\n\n440\n00:22:45.438 --> 00:22:48.546\nthen is fun.\n\n441\n00:22:48.546 --> 00:22:51.421\nHow about that?\n\n442\n00:22:51.421 --> 00:22:55.212\nLike so, that should do it, I do believe.\n\n443\n00:22:55.212 --> 00:22:57.712\nI might be wrong, but\nwe'll see what happens here.\n\n444\n00:22:57.712 --> 00:22:59.921\nIn the meantime, I'm just trying to throw\nan example here together for you guys.\n\n445\n00:22:59.921 --> 00:23:02.547\nAnd then we'll echo VAR3.\n\n446\n00:23:02.547 --> 00:23:06.211\nOop don't forget that, it's easily done.\n\n447\n00:23:06.211 --> 00:23:06.963\nNow let's see if this works.\n\n448\n00:23:06.963 --> 00:23:08.837\nI'm not too sure about that VAR3.\n\n449\n00:23:08.837 --> 00:23:09.483\n>> [LAUGH]\n>> But\n\n450\n00:23:09.483 --> 00:23:10.629\nit'll be a good time had by all anyway.\n\n451\n00:23:10.629 --> 00:23:13.129\nSo here we go, Ctrl+X.\n\n452\n00:23:13.129 --> 00:23:17.380\nDon't forget to run that chmod +x.\n\n453\n00:23:17.380 --> 00:23:22.837\nAnd that was called script1 and\nthen and ./script1.\n\n454\n00:23:22.837 --> 00:23:23.837\nAnd there it is!\n\n455\n00:23:23.837 --> 00:23:25.254\nFoo is fun.\nWe see Foo.\n\n456\n00:23:25.254 --> 00:23:25.962\nWe see VAR2.\n\n457\n00:23:25.962 --> 00:23:27.713\nI must have made a mistake there.\n\n458\n00:23:27.713 --> 00:23:29.422\nBut that's basically what we're doing.\n\n459\n00:23:29.422 --> 00:23:30.711\nWe got output.\n\n460\n00:23:30.711 --> 00:23:37.755\nIt did actually look into those other\nthings and use them as their variables.\n\n461\n00:23:37.755 --> 00:23:41.624\nSo, that's what you want to know\nthat you can reference a new,\n\n462\n00:23:41.624 --> 00:23:46.515\nyou can make new variables that reference\nold variables to add or detract from or\n\n463\n00:23:46.515 --> 00:23:51.187\neven change completely to retain the\noriginal state of the variable that was\n\n464\n00:23:51.187 --> 00:23:54.546\ncreated, because these\nare things that happen a lot.\n\n465\n00:23:54.546 --> 00:23:58.547\nIf I want it to change, but I wanna retain\nthat old state that it originally was,\n\n466\n00:23:58.547 --> 00:24:00.939\nMaybe I've changed it\nthroughout the script,\n\n467\n00:24:00.939 --> 00:24:03.422\nand then I need to reference\nwhat the old one was.\n\n468\n00:24:03.422 --> 00:24:06.470\nThat's where it really comes in handy so\nkeep that in mind.\n\n469\n00:24:06.470 --> 00:24:09.300\nYou'll see that more and\nmore as we build bigger and\n\n470\n00:24:09.300 --> 00:24:11.530\nbetter scripts so\nthat's basically variable referencing.\n\n471\n00:24:11.530 --> 00:24:14.910\n>> All right, now a lot of times we\nalso have the ability to substitute, so\n\n472\n00:24:14.910 --> 00:24:18.510\nthat entire script that\nwe just wrote could also\n\n473\n00:24:18.510 --> 00:24:20.920\nuse that then in another\nscript as well and call it.\n\n474\n00:24:20.920 --> 00:24:26.410\nSo taking the output from\none particular variable or\n\n475\n00:24:26.410 --> 00:24:31.800\nscript and being able to use it in\na variable or use it the other way around?\n\n476\n00:24:31.800 --> 00:24:33.335\nI'm [CROSSTALK]\n>> I'm seeing the consternation on\n\n477\n00:24:33.335 --> 00:24:34.140\nRonnie's face.\n\n478\n00:24:34.140 --> 00:24:36.270\nThe wheels are starting to lock up,\nand he's saying, okay,\n\n479\n00:24:36.270 --> 00:24:39.800\nnow it's starting to get confusing, and\nyeah, this can be really confusing.\n\n480\n00:24:39.800 --> 00:24:43.680\nWhat Ronnie's trying to think of, and\nI see where he's going with this,\n\n481\n00:24:43.680 --> 00:24:44.600\nis command substitution.\n\n482\n00:24:44.600 --> 00:24:50.530\nThis is the idea of, we're gonna create\na variable that's going to call a actual\n\n483\n00:24:50.530 --> 00:24:55.324\ncommand, and the output of that command\nis going to be value of the variable.\n\n484\n00:24:55.324 --> 00:24:57.090\n>> [LAUGH]\n>> [LAUGH] As Ronnie\n\n485\n00:24:57.090 --> 00:24:58.240\nstarts to giggle and laugh.\n\n486\n00:24:58.240 --> 00:25:00.508\nHe's going, this is crazy.\n\n487\n00:25:00.508 --> 00:25:04.190\nYou're talking witchcraft here, Lowry,\nthere's no way this is going to work.\n\n488\n00:25:04.190 --> 00:25:07.330\nYes, and it's done quite often,\nas a matter of fact.\n\n489\n00:25:07.330 --> 00:25:09.840\nSo, let's show you guys\nhow do that as well.\n\n490\n00:25:09.840 --> 00:25:12.790\nJump back to my screen here,\nlet's see what we can do.\n\n491\n00:25:14.090 --> 00:25:17.210\nSo there's a couple of ways\nin which you can do this.\n\n492\n00:25:18.225 --> 00:25:21.010\nSo let's use that script one and\n\n493\n00:25:21.010 --> 00:25:23.920\nwe'll just keep using that\nthroughout this thing.\n\n494\n00:25:23.920 --> 00:25:25.200\nLet's see here, nano script1.\n\n495\n00:25:26.690 --> 00:25:33.610\nAnd I'm gonna erase all this\nstuff because we don't need it.\n\n496\n00:25:33.610 --> 00:25:34.300\nThere's my problem.\n\n497\n00:25:34.300 --> 00:25:36.140\nI forgot the stinking,\n>> Mm.\n\n498\n00:25:36.140 --> 00:25:37.500\n>> I love to do that, I leave those off.\n\n499\n00:25:37.500 --> 00:25:43.920\nI'm always debugging my scripts looking\nfor places where a dollar sign should be.\n\n500\n00:25:43.920 --> 00:25:44.960\nAnyway, let's jump into this.\n\n501\n00:25:44.960 --> 00:25:48.930\nThere are a couple ways we can do this.\n\n502\n00:25:48.930 --> 00:25:54.150\nWe can say VAR1 equals, and\nthen use the backtick character.\n\n503\n00:25:55.270 --> 00:25:59.630\nIf I said something like,\nwhat do I want to do,\n\n504\n00:25:59.630 --> 00:26:01.770\nlet's say, hostname, hostname dash I.\n\n505\n00:26:01.770 --> 00:26:07.950\nIf I said that, VAR1 and then I said,\necho, don't forget, memory bar 1 and\n\n506\n00:26:07.950 --> 00:26:12.260\nwe save this, troll O, troll X,\nand we run our script.\n\n507\n00:26:12.260 --> 00:26:18.620\nYou notice, we're getting some weird\noutput, it's not doing correctly,\n\n508\n00:26:18.620 --> 00:26:25.310\nthings are looking strange to it,\neven though that was a valid command.\n\n509\n00:26:25.310 --> 00:26:27.490\nIt should have run the command.\n\n510\n00:26:27.490 --> 00:26:31.640\nThe problem is how we\ndeclared it as a variable.\n\n511\n00:26:31.640 --> 00:26:33.310\nYou have to know a little bit of syntax,\n\n512\n00:26:33.310 --> 00:26:37.260\nand that's where that\nbacktick comes in handy.\n\n513\n00:26:37.260 --> 00:26:38.890\nSo let's go back into nano.\n\n514\n00:26:38.890 --> 00:26:42.850\nWhat I need to do, what I should've done,\nis put the backtick character in there.\n\n515\n00:26:42.850 --> 00:26:44.670\nThe d I didn't mean to put in there, but\n\n516\n00:26:44.670 --> 00:26:46.890\nthe backtick character\nshould've gone there.\n\n517\n00:26:46.890 --> 00:26:49.770\nOkay, now that you see those two there,\nyou're thinking backtick,\n\n518\n00:26:49.770 --> 00:26:52.040\nwhere the heck is this backtick thing?\n\n519\n00:26:52.040 --> 00:26:54.460\nThe backtick is usually in\nthe upper left hand corner of\n\n520\n00:26:54.460 --> 00:26:56.790\nyour keyboard on US keyboards.\n\n521\n00:26:56.790 --> 00:27:00.740\nIt's usually the same thing as the tilde,\nthe little wavy line,\n\n522\n00:27:00.740 --> 00:27:02.410\nlooks like you surfing.\n\n523\n00:27:02.410 --> 00:27:06.820\nThat's your little backtick, you'll\nnotice a little tick character there.\n\n524\n00:27:06.820 --> 00:27:08.560\nThat's what you're looking for.\n\n525\n00:27:08.560 --> 00:27:12.380\nNow that I have that there, if I save and\n\n526\n00:27:12.380 --> 00:27:15.068\nrun, you'll notice that\nI get my IP address.\n\n527\n00:27:15.068 --> 00:27:16.140\nBecause it ran the command.\n\n528\n00:27:16.140 --> 00:27:20.470\nI echoed the variable, and yet\nit gave me the output of the command,\n\n529\n00:27:20.470 --> 00:27:22.880\nand that's command substitution.\n\n530\n00:27:22.880 --> 00:27:27.060\nSo I'm making the output of\na command the value of our variable.\n\n531\n00:27:27.060 --> 00:27:30.510\nAnd then, when I echo the variable to say,\nshow me your value.\n\n532\n00:27:30.510 --> 00:27:31.580\nWhat's it going to do?\n\n533\n00:27:31.580 --> 00:27:35.690\nIt's going to show me the output of the\ncommand, because that's what its value is.\n\n534\n00:27:35.690 --> 00:27:36.810\nSo hopefully that makes sense.\n\n535\n00:27:36.810 --> 00:27:39.720\nAnd you're thinking,\nwow that's actually pretty cool.\n\n536\n00:27:39.720 --> 00:27:42.330\nI like being able to use commands\nthat are inside of my scripts.\n\n537\n00:27:42.330 --> 00:27:43.730\nThe whole purpose of the thing.\n\n538\n00:27:43.730 --> 00:27:48.880\nAnd making variables out of these commands\nis gonna really expand what I can do with\n\n539\n00:27:48.880 --> 00:27:49.848\nmy scripting.\n\n540\n00:27:49.848 --> 00:27:54.060\nBut not backtick character, as cool as it\nis, not the best way to go around making\n\n541\n00:27:54.060 --> 00:27:57.192\nthis happen, these is another\nway to do this really quickly.\n\n542\n00:27:57.192 --> 00:28:01.310\nLet's get back in the script here and\nlets take a look, what I should do,\n\n543\n00:28:01.310 --> 00:28:04.010\nnot that you cant do this but\nthe problem is it gets a little and\n\n544\n00:28:04.010 --> 00:28:05.588\nit can start looking weird.\n\n545\n00:28:05.588 --> 00:28:10.370\nIt can start making you confused\nas you look through your scripts,\n\n546\n00:28:10.370 --> 00:28:15.010\nbecause there's another character\nthat looks very similar to it.\n\n547\n00:28:15.010 --> 00:28:15.580\nIt's that one.\n\n548\n00:28:15.580 --> 00:28:18.190\nRight.\nIt's the single quotation mark.\n\n549\n00:28:18.190 --> 00:28:23.360\nYou don't want to get\nconfused with the two.\n\n550\n00:28:23.360 --> 00:28:28.594\nSo to get around that little problem,\nif you start your command name variable\n\n551\n00:28:28.594 --> 00:28:34.410\nwith the dollar sign and then open\nparenthesis, and then closed parenthesis.\n\n552\n00:28:34.410 --> 00:28:39.540\nNow we're able to call this, and it looks\ndifferent than any other characters.\n\n553\n00:28:39.540 --> 00:28:44.160\nIt tells me I want to, whatever's\non the inside of these parentheses,\n\n554\n00:28:44.160 --> 00:28:46.800\nI want to interpret that as a command.\n\n555\n00:28:46.800 --> 00:28:49.290\nSo now we should be able\nto get the same output.\n\n556\n00:28:50.569 --> 00:28:54.010\nSave, control x, run the script and\nwe get the exact same output.\n\n557\n00:28:54.010 --> 00:28:55.950\nThat's what we're looking for.\n\n558\n00:28:55.950 --> 00:28:59.890\nNow that we can do that, you can\nsee how that can become a lot more.\n\n559\n00:28:59.890 --> 00:29:03.380\nLike I said, it will expand your ability\nto do things with your scripts so\n\n560\n00:29:03.380 --> 00:29:04.830\nit's a very nice thing to do.\n\n561\n00:29:04.830 --> 00:29:09.020\nI know I've got more stuff for you guys,\n\n562\n00:29:09.020 --> 00:29:11.205\nsee I'm just checking\nmy notes real quickly.\n\n563\n00:29:11.205 --> 00:29:14.950\nLet's see where we are at here Ronnie,\nwe've seen that,\n\n564\n00:29:14.950 --> 00:29:18.600\nlet me give you a good example\nof when this might be used,\n\n565\n00:29:18.600 --> 00:29:22.770\nso not just theoretically but\nactual way which it might be used.\n\n566\n00:29:22.770 --> 00:29:29.916\nSo let's take this script,\n\n567\n00:29:29.916 --> 00:29:34.689\nwe'll modify it.\n\n568\n00:29:34.689 --> 00:29:42.885\nAnd what we'll do is we'll make\nthis command be called, today.\n\n569\n00:29:42.885 --> 00:29:49.667\nAnd we'll say equals dollar sign open,\nand we'll say date and then plus percent.\n\n570\n00:29:49.667 --> 00:29:54.290\nYeah, I'm getting a little\nout of control here.\n\n571\n00:29:54.290 --> 00:29:59.290\nPlus, thank you, there we go,\npercent and we'll say, what is it?\n\n572\n00:29:59.290 --> 00:30:02.750\nMonth, day, year is how we\nnormally do things around there.\n\n573\n00:30:02.750 --> 00:30:04.950\nSo month, percent, day, percent, year.\n\n574\n00:30:04.950 --> 00:30:08.930\nBasically, what I'm adding on there\nis that that's part of the date\n\n575\n00:30:08.930 --> 00:30:10.340\ncommands functionality.\n\n576\n00:30:10.340 --> 00:30:12.290\nI'm saying format it in this way,\nmonth, date, year.\n\n577\n00:30:12.290 --> 00:30:13.490\nI want to add those things.\n\n578\n00:30:13.490 --> 00:30:14.015\nI wanna take away the [INAUDIBLE].\n\n579\n00:30:14.015 --> 00:30:16.290\nSo that's all that's happening there,\nnothing crazy here.\n\n580\n00:30:16.290 --> 00:30:18.510\nDoesn't mean anything to our script\n\n581\n00:30:19.960 --> 00:30:23.990\nother than how we want it to be\nformatted when it outputs that output.\n\n582\n00:30:23.990 --> 00:30:28.700\nSo now that I have that, that,\ntoday equals that, we are going to say,\n\n583\n00:30:28.700 --> 00:30:29.980\nlet's see here.\n\n584\n00:30:29.980 --> 00:30:33.530\nWe're gonna LS that list, again,\nwe're just doing commands.\n\n585\n00:30:33.530 --> 00:30:37.250\nI'm not creating a variable here, that's\nwhy I'm not saying something equals LS.\n\n586\n00:30:37.250 --> 00:30:39.300\nI'm just saying, run the LS command.\n\n587\n00:30:39.300 --> 00:30:41.130\nAnd I'll add A and L to that.\n\n588\n00:30:41.130 --> 00:30:45.090\nAnd I'll say, how about user slash bin and\nwe will redirect that.\n\n589\n00:30:47.170 --> 00:30:50.300\nRemember our redirection,\nthat's always fun.\n\n590\n00:30:50.300 --> 00:30:53.695\nAnd we'll do that to log dot today.\n\n591\n00:30:53.695 --> 00:30:57.560\nNow this is where it got\na little bit different.\n\n592\n00:30:57.560 --> 00:31:01.140\nI'm using the variable,\nthe output of that variable,\n\n593\n00:31:01.140 --> 00:31:04.740\nto be the file extension\nof my log file here.\n\n594\n00:31:04.740 --> 00:31:07.500\nSo what I'm doing is I'm listing all\n\n595\n00:31:07.500 --> 00:31:10.170\nthe contents of whatever's in\nslash user slash bin directory.\n\n596\n00:31:10.170 --> 00:31:13.040\nI'm listing that in a long list format.\n\n597\n00:31:13.040 --> 00:31:17.519\nI'm redirecting that out to\na file called log dot something.\n\n598\n00:31:17.519 --> 00:31:20.290\nThat dot something is going\nto be our variable, and\n\n599\n00:31:20.290 --> 00:31:25.480\nwhatever the variable returns is what\nis gonna name the end of that file to.\n\n600\n00:31:25.480 --> 00:31:29.880\nSo this another way of referencing\nvariables in our scripts, so\n\n601\n00:31:29.880 --> 00:31:35.350\nnow that that's done, what it\nshould do is every time I run this,\n\n602\n00:31:35.350 --> 00:31:37.870\nit'll create a log called log\ndot whatever today's date is.\n\n603\n00:31:37.870 --> 00:31:42.150\nSo if I run this on a daily basis then\nwe will a new entry with the date and\n\n604\n00:31:42.150 --> 00:31:46.710\ntime, or at least the date, for that\nactual variable itself, So let's do that.\n\n605\n00:31:46.710 --> 00:31:48.250\nLet's see if it's working.\n\n606\n00:31:48.250 --> 00:31:51.360\nSo I'll get rid of that echo,\nwe don't need that.\n\n607\n00:31:51.360 --> 00:31:53.670\nOr should I, yeah, this looks good.\n\n608\n00:31:53.670 --> 00:31:54.350\nLet's do it.\n\n609\n00:31:54.350 --> 00:31:55.710\nAnd run new script.\n\n610\n00:31:55.710 --> 00:31:58.470\nLet's see here.\n\n611\n00:31:58.470 --> 00:32:00.310\nAnd there is our log file.\n\n612\n00:32:00.310 --> 00:32:01.880\nRight there with today's date, 11/12/15.\n\n613\n00:32:01.880 --> 00:32:02.660\nAnd it's good to go.\n\n614\n00:32:02.660 --> 00:32:07.800\nSo that's how we can use those command\noutputs inside of our variables,\n\n615\n00:32:07.800 --> 00:32:11.070\ninside of our scripts to use\nthat output to our advantage.\n\n616\n00:32:11.070 --> 00:32:15.653\n>> Now Daniel, you've shown us a lot here\nwhere we can take those variables and\n\n617\n00:32:15.653 --> 00:32:17.240\nuse them within scripts.\n\n618\n00:32:17.240 --> 00:32:19.590\nAnd you also showed us\nwhy we also do that.\n\n619\n00:32:19.590 --> 00:32:23.080\nSo by at least learning the basics here,\nand being able to understand\n\n620\n00:32:23.080 --> 00:32:26.060\nthat we are going to be using them, and\nit's gonna actually lead to more and more.\n\n621\n00:32:26.060 --> 00:32:28.680\nWe're starting to see\nthe heart of scripting.\n\n622\n00:32:28.680 --> 00:32:32.080\nWhere we take whatever we're\nactually trying to pull up, and\n\n623\n00:32:32.080 --> 00:32:33.590\nthen we use it again,\neven into another script.\n\n624\n00:32:33.590 --> 00:32:36.770\nAnd, we'll probably continue to do that\nas our scripting knowledge gets more in\n\n625\n00:32:36.770 --> 00:32:40.880\ndepth, we'll probably continue to just\nbuild and build even more complex scripts.\n\n626\n00:32:40.880 --> 00:32:44.340\nNow Daniel, is there anything else\nthat we need to know just right\n\n627\n00:32:44.340 --> 00:32:45.790\nhere at the end of our show?\n\n628\n00:32:45.790 --> 00:32:48.100\n>> Yeah, really quickly,\nI got one more thing to show you.\n\n629\n00:32:48.100 --> 00:32:48.870\n>> Okay.\n\n630\n00:32:48.870 --> 00:32:51.690\n>> Just one quick thing and\nit is negation.\n\n631\n00:32:51.690 --> 00:32:54.320\nSo with negation,\nwhat we're talking about is\n\n632\n00:32:54.320 --> 00:32:57.470\nthere are special characters\nthat the shell interprets,\n\n633\n00:32:57.470 --> 00:33:01.410\nand what happens if I wanna use\nthat as not a special character?\n\n634\n00:33:01.410 --> 00:33:04.780\nI wanna actually just literally\ninterpret whatever those characters are,\n\n635\n00:33:04.780 --> 00:33:08.140\nI don't want it to look\ninto the meaning of that.\n\n636\n00:33:08.140 --> 00:33:09.090\nHow do I do that?\n\n637\n00:33:09.090 --> 00:33:10.810\nThat's where negation comes in.\n\n638\n00:33:10.810 --> 00:33:12.170\nSometimes this happens.\n\n639\n00:33:12.170 --> 00:33:14.290\nI'm gonna give you a really quick example.\n\n640\n00:33:14.290 --> 00:33:15.320\nWe'll call it shell dot sh.\n\n641\n00:33:15.320 --> 00:33:22.210\nThere we go and\nI'll just jump back here and say nano.\n\n642\n00:33:24.630 --> 00:33:27.130\nThen really quickly, bin bash.\n\n643\n00:33:27.130 --> 00:33:34.400\nIf I say let's see here,\necho the book is $12.\n\n644\n00:33:34.400 --> 00:33:38.780\nYou already noticed I was getting\nsome syntax highlighting.\n\n645\n00:33:38.780 --> 00:33:43.100\nThat's because remember, what does that\ndollar sign do inside of our script?\n\n646\n00:33:43.100 --> 00:33:46.120\nIt is a special character that says,\nthis is a variable.\n\n647\n00:33:46.120 --> 00:33:50.070\nSo, it thinks that that is a variable, so\nwe're gonna get some interesting output,\n\n648\n00:33:50.070 --> 00:33:51.430\nor at least we should.\n\n649\n00:33:51.430 --> 00:33:57.740\nSo now that it's there I'll just say,\nescape, or I'm sorry, control O to save.\n\n650\n00:33:57.740 --> 00:34:01.960\nX chmod plus x to shell dot sh, and\nthen run it, oops, there we go.\n\n651\n00:34:01.960 --> 00:34:07.190\nIt says the book is two.\n\n652\n00:34:07.190 --> 00:34:10.690\nBecause it saw that dollar sign and\n\n653\n00:34:10.690 --> 00:34:14.065\nwhatever was after that and\nit thought that was the variable.\n\n654\n00:34:14.065 --> 00:34:16.440\nBecause that variable had no value,\nit didn't print anything.\n\n655\n00:34:16.440 --> 00:34:20.080\nIt didn't echo that value out\nbecause there's nothing to echo.\n\n656\n00:34:20.080 --> 00:34:20.610\nSo what do we do?\n\n657\n00:34:20.610 --> 00:34:22.820\nHow do we have it say I\nwant it to be 12 books?\n\n658\n00:34:22.820 --> 00:34:27.870\nNot a problem, go back into nano here and\nwhat we need to\n\n659\n00:34:27.870 --> 00:34:32.660\ndo is go into our script and negate\nthat by adding the backslash character.\n\n660\n00:34:32.660 --> 00:34:34.402\nSo now that that backslash\ncharacter is in there,\n\n661\n00:34:34.402 --> 00:34:39.280\nits saying the next character after me,\njust interpret it literally.\n\n662\n00:34:39.280 --> 00:34:43.280\nAnd if its a special character just see it\nas the literal character that it is and\n\n663\n00:34:43.280 --> 00:34:45.580\nnot the special meaning.\n\n664\n00:34:45.580 --> 00:34:49.960\nSo now if I save and go back out rerun\nthis guy, now it says the book is $12.\n\n665\n00:34:49.960 --> 00:34:54.181\nWe've negated the specialness of the\nmeaning of what's called a meta-character\n\n666\n00:34:54.181 --> 00:34:57.880\nbecause it has special meaning and\nit just interpreted it literally.\n\n667\n00:34:57.880 --> 00:34:59.440\nSo sometimes you may need to do that.\n\n668\n00:34:59.440 --> 00:35:02.280\nOtherwise your scripts won't work,\nyou get funky output and\n\n669\n00:35:02.280 --> 00:35:03.500\nnot what you're looking for.\n\n670\n00:35:03.500 --> 00:35:04.390\nSo be aware of that as well.\n\n671\n00:35:04.390 --> 00:35:06.890\n>> Alright.\nNow Daniel, the other thing you\n\n672\n00:35:06.890 --> 00:35:10.850\nmay hear somebody call this, is escaping\na character a lot of times too.\n\n673\n00:35:10.850 --> 00:35:13.550\nSo you use the term,\nnegation, you use the term,\n\n674\n00:35:13.550 --> 00:35:15.530\nescape, that's what they're really saying.\n\n675\n00:35:15.530 --> 00:35:18.500\nWhatever follows that slash,\nmake sure you report it as a character and\n\n676\n00:35:18.500 --> 00:35:23.270\nnot use it in the special function in\nthe way that you would normally use it.\n\n677\n00:35:23.270 --> 00:35:25.580\nAll right Daniel,\nthank you again for all those demos.\n\n678\n00:35:25.580 --> 00:35:28.370\nIt really did help us to at least\nunderstand that we are going to be taking\n\n679\n00:35:28.370 --> 00:35:31.420\nthe variable knowledge that we\nfirst started off with, and\n\n680\n00:35:31.420 --> 00:35:33.890\nit's going to become more and\nmore complex.\n\n681\n00:35:33.890 --> 00:35:35.596\nAnd for me right now,\nit's way over my head.\n\n682\n00:35:35.596 --> 00:35:36.234\n>> [LAUGH]\n>> So, yeah,\n\n683\n00:35:36.234 --> 00:35:38.628\nI'm getting a little bit more lost\nas we continue to go through, but\n\n684\n00:35:38.628 --> 00:35:41.490\nthis is a great place for us to stop this\nepisode cuz we've got more coming up.\n\n685\n00:35:41.490 --> 00:35:42.000\n>> We've got plenty.\n\n686\n00:35:42.000 --> 00:35:42.990\nWe've got plenty to do, trust me.\n\n687\n00:35:42.990 --> 00:35:46.270\n>> We've got more coming up in BASH and\nscripting so thank you for\n\n688\n00:35:46.270 --> 00:35:49.780\njoining us, signing off for\nITPro.tv, I'm Ronnie Wong.\n\n689\n00:35:49.780 --> 00:35:51.388\n>> And I'm Daniel Lowry.\n\n690\n00:35:51.388 --> 00:35:56.965\n>> And we'll see you next time.\n\n691\n00:35:56.965 --> 00:35:58.060\n[SOUND]\n\n",
          "vimeoId": "146521683"
        },
        {
          "description": "In this episode, Ronnie and Daniel begin to show the use of variables within scripts.  They take a look again at basic variables.   Even though we can create variables and define them, there are times when we need input from another user.  Daniel demonstrates how we accomplish having another user provide input for the variables and even multiple inputs for an array.  Here are the building blocks for more complex scripts that we create.",
          "length": "1951",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash-111215-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash-111215-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash-111215-1-sm.jpg",
          "title": "Math in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.578 --> 00:00:15.504\nWelcome to another exciting\nepisode here on ITProTV.\n\n3\n00:00:15.504 --> 00:00:19.277\nI'm host Ronnie Wong and\ntoday we're talking about bash scripting.\n\n4\n00:00:19.277 --> 00:00:23.038\nWhat we are actually going to be\ntaking a look at more importantly and\n\n5\n00:00:23.038 --> 00:00:26.809\nmore specifically is math in scripting,\nas well in the bash shell.\n\n6\n00:00:26.809 --> 00:00:28.697\nAnd that is something\nthat only our friend,\n\n7\n00:00:28.697 --> 00:00:30.953\nDaniel Lowrie is actually\ncan help us out with here.\n\n8\n00:00:30.953 --> 00:00:35.569\nNow Daniel when it comes down to it,\nyou and I are both not great at math but\n\n9\n00:00:35.569 --> 00:00:38.930\napparently scripting and\nbash pretty decent at it.\n\n10\n00:00:38.930 --> 00:00:39.835\n>> Yeah, yeah.\n\n11\n00:00:39.835 --> 00:00:43.330\nThe good thing is I have a computer and\nthe computer can do math.\n\n12\n00:00:43.330 --> 00:00:46.452\nWhereas, Daniel and Ronnie, not so much.\n\n13\n00:00:46.452 --> 00:00:48.995\nYeah we're pretty horrible at it,\nas a matter of fact [LAUGH].\n\n14\n00:00:48.995 --> 00:00:53.981\nWe were just seeing who was actually\nworse at math before the show.\n\n15\n00:00:53.981 --> 00:00:58.050\nIt comes out that Titus is the worst\nmathematician here in our studio.\n\n16\n00:00:58.050 --> 00:00:58.900\nSo good luck to Titus there for that.\n\n17\n00:00:58.900 --> 00:01:01.229\n>> That's right.\n>> [LAUGH] But you might be thinking,\n\n18\n00:01:01.229 --> 00:01:03.259\nwhy are we talking about math?\n\n19\n00:01:03.259 --> 00:01:06.566\nThis is scripting show,\nwe're doing commands, and\n\n20\n00:01:06.566 --> 00:01:11.942\nwe're doing things that make our computer\ndo automation, and things of that nature.\n\n21\n00:01:11.942 --> 00:01:16.036\nYou gotta remember,\nscripting is a type of program and\n\n22\n00:01:16.036 --> 00:01:22.058\nyou've gotta remember again that\nprogramming and math are very connected.\n\n23\n00:01:22.058 --> 00:01:26.967\nThey're very put together because it's\nall about logic, it's all about flow, and\n\n24\n00:01:26.967 --> 00:01:31.761\na lot of times, you'll actually use math\nand output in really advanced programs.\n\n25\n00:01:31.761 --> 00:01:36.186\nIt will tend to use some math or\narithmetic in there to make those programs\n\n26\n00:01:36.186 --> 00:01:39.387\ndo exactly what you want it to do,\nsome fine tuning.\n\n27\n00:01:39.387 --> 00:01:44.050\nI'm not gonna, I'm not great at math,\nI'm not great at making my bash\n\n28\n00:01:44.050 --> 00:01:48.509\nscripts use math other than the nice\nfoundational understanding.\n\n29\n00:01:48.509 --> 00:01:52.456\nI do not get into the level of\nscripting that requires advanced math.\n\n30\n00:01:52.456 --> 00:01:57.427\nAll I do is I sometimes need to increment\na number, or maybe do some calculations,\n\n31\n00:01:57.427 --> 00:01:59.743\nand have it return some values for me.\n\n32\n00:01:59.743 --> 00:02:01.246\nAnd a lot of times,\nthat's exactly what you're gonna be doing,\n\n33\n00:02:01.246 --> 00:02:02.380\nthose are the scripts\nyou're gonna be writing.\n\n34\n00:02:02.380 --> 00:02:05.710\nJust want it to do some calculations.\n\n35\n00:02:05.710 --> 00:02:08.826\nFunctions for me,\ninstead of me having to do it myself.\n\n36\n00:02:08.826 --> 00:02:11.102\nLet the computers handle that job, not me.\n\n37\n00:02:11.102 --> 00:02:13.840\nBecause again, hey,\nwho's bad at math in this room?\n\n38\n00:02:13.840 --> 00:02:14.560\nRight here.\n\n39\n00:02:14.560 --> 00:02:16.290\nAnd I see Ronnie's hand\nstraight up in the air.\n\n40\n00:02:16.290 --> 00:02:18.857\nSo that being said,\nthat is why we use math.\n\n41\n00:02:18.857 --> 00:02:23.171\nThat is why we want to use math,\nand our computer, thank goodness,\n\n42\n00:02:23.171 --> 00:02:24.470\nit will do it for us.\n\n43\n00:02:24.470 --> 00:02:27.370\n>> Daniel, there's times when we can\nactually see where this is used,\n\n44\n00:02:27.370 --> 00:02:30.640\neven right here in the ITProTV studio.\n\n45\n00:02:30.640 --> 00:02:34.570\nThe very fact is, we need to keep\ntrack of the numbers of hours.\n\n46\n00:02:34.570 --> 00:02:38.151\nAnd when I mean hours, I mean literally\nhours that we're actually recording.\n\n47\n00:02:38.151 --> 00:02:40.972\nAnd so a lot of times, instead of\nus actually having to go back and\n\n48\n00:02:40.972 --> 00:02:41.715\nadd them all up.\n\n49\n00:02:41.715 --> 00:02:45.378\nWhat we can do is, we can make variables\nand functions that actually allow us to\n\n50\n00:02:45.378 --> 00:02:48.610\ntake each one of those shows, and\nthen actually add up all that time.\n\n51\n00:02:48.610 --> 00:02:52.530\nAnd report it in hours or minutes,\nor whatever we might need to.\n\n52\n00:02:52.530 --> 00:02:55.710\nAnd that's where the math function\nreally does come in for us,\n\n53\n00:02:55.710 --> 00:02:58.657\nto at least help us to do just\nsome simple things like that.\n\n54\n00:02:58.657 --> 00:02:59.785\nBut beyond that, of course,\n\n55\n00:02:59.785 --> 00:03:02.187\nthen you can actually see where\nthese calculations do come in.\n\n56\n00:03:02.187 --> 00:03:05.762\nHelp people to determine values or trends\nand whatever else they might need to\n\n57\n00:03:05.762 --> 00:03:08.188\ndo but this is where\nthe foundation begins, right.\n\n58\n00:03:08.188 --> 00:03:11.405\nIf you're needing to script out stuff like\nthat this is where we're actually setting\n\n59\n00:03:11.405 --> 00:03:12.130\nthat foundation.\n\n60\n00:03:12.130 --> 00:03:16.644\nAnd Daniel, you're going to help us to\nsay, alright, we're going to take a script\n\n61\n00:03:16.644 --> 00:03:20.347\nand do four plus four hopefully\nwill equal, I'm going to say eight.\n\n62\n00:03:20.347 --> 00:03:23.540\nIs what I'm gonna do and even a little\nbit more than that I'm pretty sure.\n\n63\n00:03:23.540 --> 00:03:26.779\n>> Shows how much you know Ronnie,\nfour plus four doesn't equal eight, right?\n\n64\n00:03:26.779 --> 00:03:27.824\nDoes it equal eight.\n\n65\n00:03:27.824 --> 00:03:29.704\nWe'll let the computer find out for us.\n\n66\n00:03:29.704 --> 00:03:34.142\nHe's right four plus four equals eight and\nthat was a really good\n\n67\n00:03:34.142 --> 00:03:39.003\nexample of when I might want to use\nmy scripts to calculate math for me.\n\n68\n00:03:39.003 --> 00:03:40.942\nCan I go grab a calculator and\ndo that stuff?\n\n69\n00:03:40.942 --> 00:03:46.343\nSure, I can do that, but if I'm already\nsitting, and maybe for whatever reason,\n\n70\n00:03:46.343 --> 00:03:51.381\nI want to create a script that calculates\nvalues for me on an automated basis.\n\n71\n00:03:51.381 --> 00:03:53.150\nAnd that's why you would use\nmath instead of the script.\n\n72\n00:03:53.150 --> 00:03:55.249\nOtherwise, that's exactly right.\n\n73\n00:03:55.249 --> 00:03:56.362\nYou'd just jump over,\ngrab me a calculator,\n\n74\n00:03:56.362 --> 00:03:57.170\ndo the math that you needed to do.\n\n75\n00:03:57.170 --> 00:04:01.263\nAnd then get your value and you're done,\nand you just put your calculator down and\n\n76\n00:04:01.263 --> 00:04:03.830\ngo back to doing whatever\nit is that you're doing.\n\n77\n00:04:03.830 --> 00:04:05.610\nHere, this is more about automation.\n\n78\n00:04:05.610 --> 00:04:06.820\nThat's what scripting is about.\n\n79\n00:04:06.820 --> 00:04:10.859\nSo that's when you'll tend to do these\nthings, something that you'll want to do\n\n80\n00:04:10.859 --> 00:04:14.678\non a repetition basis that's gonna\nrepeat this process over and over again.\n\n81\n00:04:14.678 --> 00:04:18.481\nThat way you can make a script,\nmake that script run at 4 times a day,\n\n82\n00:04:18.481 --> 00:04:22.758\n2 times a day, 12 times a day,\nwhatever you like, and you're good to go.\n\n83\n00:04:22.758 --> 00:04:28.550\nWhen it comes to math,\nokay, how do we do it?\n\n84\n00:04:28.550 --> 00:04:31.760\nDo I just five plus five equals ten,\nand my computer puts that out?\n\n85\n00:04:31.760 --> 00:04:32.450\nUnfortunately, no.\n\n86\n00:04:32.450 --> 00:04:33.990\nI wish it was that easy,\nto be honest with you,\n\n87\n00:04:33.990 --> 00:04:37.830\nthat the computer Computer you just gave\nit five, and you gave it the operator,\n\n88\n00:04:37.830 --> 00:04:42.640\nthe plus sign, and then another five and\nhit Return, and it spits out ten.\n\n89\n00:04:42.640 --> 00:04:47.450\nIt doesn't do that,\nwe have to tell it that we want\n\n90\n00:04:47.450 --> 00:04:51.780\nto do math instead of interpret a command,\nor do something else.\n\n91\n00:04:51.780 --> 00:04:55.610\nYou gotta remember, that's normally\nits function, not math operations.\n\n92\n00:04:55.610 --> 00:05:00.050\nSo, well I say that, for\nus in our interaction with it.\n\n93\n00:05:00.050 --> 00:05:03.450\nLet that caveat put in there so\nI don't get flamed to death.\n\n94\n00:05:03.450 --> 00:05:05.405\nIt does do math, all the time actually.\n\n95\n00:05:05.405 --> 00:05:09.400\n[LAUGHTER] But when we want it to math,\nit's usually a very small amount of time\n\n96\n00:05:09.400 --> 00:05:13.360\nversus the time we're just saying, \"Hey go\nto this directory and open this file, and\n\n97\n00:05:13.360 --> 00:05:15.770\nedit this file, and\nsave that, and move this, and\n\n98\n00:05:15.770 --> 00:05:21.170\ncopy that,\" That's normally the things\nthat we are doing, not math operations.\n\n99\n00:05:21.170 --> 00:05:25.060\nSo when we want to do math,\nwe have to tell it we want to enter into\n\n100\n00:05:25.060 --> 00:05:28.700\nTo some sort of mathematic equation and\nhave you interpret that for us.\n\n101\n00:05:28.700 --> 00:05:31.190\nAnd how do we do that?\n\n102\n00:05:31.190 --> 00:05:33.835\nAll right, let's start the ground\nrunning here start you with the simple,\n\n103\n00:05:33.835 --> 00:05:34.713\nthe basic way to do this.\n\n104\n00:05:34.713 --> 00:05:38.892\nAnd it's through what's\ncalled the lets command.\n\n105\n00:05:38.892 --> 00:05:44.114\nVery simple LET that's the Lima Echo Tango\nthrow that into your computer and\n\n106\n00:05:44.114 --> 00:05:49.089\nthen it says okay, I see this LET\ncommand That means you wanna do math, so\n\n107\n00:05:49.089 --> 00:05:52.108\nI now am expecting some\nsort of expression or\n\n108\n00:05:52.108 --> 00:05:57.630\na mathematical equation to come at me and\nI'll return the results for you.\n\n109\n00:05:57.630 --> 00:06:00.769\nI'll do the math on whatever it is\nyou give me after that command.\n\n110\n00:06:00.769 --> 00:06:03.580\nSo let's do that, let's,\nwhat I'll do is I'll create a script and\n\n111\n00:06:03.580 --> 00:06:07.150\nwe'll write each line and\nsee what they do and see how it works and\n\n112\n00:06:07.150 --> 00:06:10.630\nsee how we can use that to\nour advantage down the road.\n\n113\n00:06:10.630 --> 00:06:14.190\n>> But I wanna give you that\nfoundational understanding,\n\n114\n00:06:14.190 --> 00:06:15.850\nhow to use Who's the lucky man, right?\n\n115\n00:06:15.850 --> 00:06:16.930\nSo let's take a look.\n\n116\n00:06:16.930 --> 00:06:23.007\nI will move into, I have a lovely\ndirectory that I created called, Math.\n\n117\n00:06:23.007 --> 00:06:23.720\nI will see the inter Math.\n\n118\n00:06:23.720 --> 00:06:28.030\nAnd I have a couple of scripts\nthere that we'll get to.\n\n119\n00:06:28.030 --> 00:06:29.568\nBut right now we will create a new one.\n\n120\n00:06:29.568 --> 00:06:36.180\nAnd we'll call it, \"1let.sh\" and it helps\nif I actually invoke my text editor.\n\n121\n00:06:36.180 --> 00:06:37.835\nThere we go.\n\n122\n00:06:37.835 --> 00:06:39.410\nSo now I'm creating my file,\n\n123\n00:06:39.410 --> 00:06:43.316\nit's called called 1let.sh because\nwe're using the let command, and\n\n124\n00:06:43.316 --> 00:06:47.730\nI will do my good shebang bin/bash because\nwe're going to invoke the bash shell.\n\n125\n00:06:47.730 --> 00:06:52.122\nLet's see what we can do,\nwhere do I want to start here?\n\n126\n00:06:52.122 --> 00:06:54.270\nHow about just simple math?\n\n127\n00:06:54.270 --> 00:06:59.180\nLet's make a variable and we'll put\nan equation in there with it so it\n\n128\n00:06:59.180 --> 00:07:04.260\ncan return the value of that equation and\nthat will be the value of our variable.\n\n129\n00:07:04.260 --> 00:07:06.158\nSo we'll just say let's see here.\n\n130\n00:07:06.158 --> 00:07:09.060\nLet, VAR, one.\n\n131\n00:07:09.060 --> 00:07:10.084\nActually, we don't even need to do this.\n\n132\n00:07:10.084 --> 00:07:11.906\nBut I'll do it from here.\n\n133\n00:07:11.906 --> 00:07:14.565\nWe'll call Var one.\n\n134\n00:07:14.565 --> 00:07:19.928\nA Var One, is going to equal,\nWe saw this on another show.\n\n135\n00:07:19.928 --> 00:07:22.750\nHow to use commands in our scripting.\n\n136\n00:07:22.750 --> 00:07:24.640\nSo I'm going to use the Let command.\n\n137\n00:07:26.120 --> 00:07:30.624\nAnd it will be, you know what, I don't\nwant Let's just do it from the command so\n\n138\n00:07:30.624 --> 00:07:33.785\nwe don't have to keep running back and\nsaving scripts,\n\n139\n00:07:33.785 --> 00:07:35.684\nso that'll be the easier thing.\n\n140\n00:07:35.684 --> 00:07:37.821\nAnd just get you familiar with\nthe lit command that way.\n\n141\n00:07:37.821 --> 00:07:41.619\nLet's get out of here.\n\n142\n00:07:41.619 --> 00:07:44.858\nLet's just do it from the command prompt,\nand then we'll add up the scripts later.\n\n143\n00:07:44.858 --> 00:07:52.260\nSo if I just do let's VAR one equals\nfour and five, four plus five.\n\n144\n00:07:52.260 --> 00:07:56.358\nSo I've said let's Here's a variable.\n\n145\n00:07:56.358 --> 00:07:58.420\nI want it to equal 4+5.\n\n146\n00:07:58.420 --> 00:07:59.580\nWill you do that?\n\n147\n00:07:59.580 --> 00:08:00.790\nHit return.\n\n148\n00:08:00.790 --> 00:08:02.072\nOkay it didn't give me any.\n\n149\n00:08:02.072 --> 00:08:04.637\nRemember I just assigned\nthat value to the variable.\n\n150\n00:08:04.637 --> 00:08:08.376\nSo now I would need to echo var1.\n\n151\n00:08:08.376 --> 00:08:13.824\nAnd what's my favorite\nthing to not do right?\n\n152\n00:08:13.824 --> 00:08:15.260\n>> [LAUGH] > Add that stinking-\n>> Dollar sign.\n\n153\n00:08:15.260 --> 00:08:19.258\n>> dollar sign and now we see the math\nright there and we get the output of 9.\n\n154\n00:08:19.258 --> 00:08:21.499\nSo 4+ Five equals nine.\n\n155\n00:08:21.499 --> 00:08:25.736\nBasic calculation, easy-peasy,\nlemon squeezy, nothing to it.\n\n156\n00:08:25.736 --> 00:08:31.245\nLet's see here, now I know a lot of\nyou are probably thinking to yourself,\n\n157\n00:08:31.245 --> 00:08:35.367\nI saw the command here, and\nyou didn't put any spaces.\n\n158\n00:08:35.367 --> 00:08:36.563\nIs that the big deal?\n\n159\n00:08:36.563 --> 00:08:39.714\nBecause notice when we declare\na variable we don't use spaces and\n\n160\n00:08:39.714 --> 00:08:40.870\nthings of that nature.\n\n161\n00:08:40.870 --> 00:08:44.450\nWhat if I add spaces, is that a problem?\n\n162\n00:08:44.450 --> 00:08:45.680\nNo, we can Can do that too.\n\n163\n00:08:45.680 --> 00:08:50.550\nWe just need to put some quotations around\nit, and then we can add some spaces.\n\n164\n00:08:50.550 --> 00:08:55.640\nSo, just be prepared to if you're not\ngetting the outputs you're looking for\n\n165\n00:08:55.640 --> 00:08:58.050\nmaybe you need to add quotes around it so\n\n166\n00:08:58.050 --> 00:09:00.710\nthat you are not interpreting\nthings like the blank spaces.\n\n167\n00:09:00.710 --> 00:09:04.360\nSo let's do that,\nbasically the same kind of idea, let, and\n\n168\n00:09:04.360 --> 00:09:08.700\nthen we'll do the open quotations,\nor yeah, the quotation marks.\n\n169\n00:09:08.700 --> 00:09:12.531\nAnd we'll say So, $VAR1,\n\n170\n00:09:12.531 --> 00:09:17.442\nand then I can use spaces, = 4 + 5.\n\n171\n00:09:17.442 --> 00:09:18.382\nAnd then closed it out.\n\n172\n00:09:18.382 --> 00:09:20.518\nYou gotta make sure you\nremembered to do that.\n\n173\n00:09:20.518 --> 00:09:23.730\nAnd then hit return.\n\n174\n00:09:23.730 --> 00:09:28.616\nAgain, we get the same idea,\necho $VAR1, and we get 9.\n\n175\n00:09:28.616 --> 00:09:32.977\nIf I went through there, and let's just\nmake that something different just so\n\n176\n00:09:32.977 --> 00:09:34.508\nwe get different results.\n\n177\n00:09:34.508 --> 00:09:35.407\nAnd now we get Get ten.\n\n178\n00:09:35.407 --> 00:09:40.230\nSo write four plus six is ten, we see that\nis affecting that variable itself and\n\n179\n00:09:40.230 --> 00:09:42.071\nthat's how we would do that.\n\n180\n00:09:42.071 --> 00:09:43.987\nIf we wanted to we could\nadd that line to a script.\n\n181\n00:09:43.987 --> 00:09:47.149\nLike I said, I'm just not gonna create\na script cuz we have to save it and\n\n182\n00:09:47.149 --> 00:09:50.753\nwe keep invoking the script when it's just\neasier to do it from the command line.\n\n183\n00:09:50.753 --> 00:09:53.295\nBut you would just add\nthat line to your script.\n\n184\n00:09:53.295 --> 00:09:54.410\nAll right, so now let's see.\n\n185\n00:09:54.410 --> 00:09:55.548\nLet's move along here.\n\n186\n00:09:55.548 --> 00:10:00.537\nThis is one of the functions that you will\nprobably actually use quite a bit when\n\n187\n00:10:00.537 --> 00:10:04.394\nyou invoke math in your scripting and\nit's incrementing and\n\n188\n00:10:04.394 --> 00:10:06.450\ndecrementing a value, right?\n\n189\n00:10:06.450 --> 00:10:08.940\nSo what do I mean by that?\n\n190\n00:10:08.940 --> 00:10:11.120\nIf my value is 10, and\nI increment it by 2, it'll be 12.\n\n191\n00:10:11.120 --> 00:10:13.210\nBasically adding 2 to the script, right?\n\n192\n00:10:13.210 --> 00:10:15.370\nOr adding 2 to the value of that variable.\n\n193\n00:10:15.370 --> 00:10:18.380\nDecrementing, the opposite of that.\n\n194\n00:10:18.380 --> 00:10:23.635\nIf I have 10, my value is 10,\nmy variable's value is 10 And\n\n195\n00:10:23.635 --> 00:10:28.234\nI decrement it by two,\nit's gonna equal eight, right?\n\n196\n00:10:28.234 --> 00:10:32.820\nSo if I just don't wanna put in all the\noperators and I just wanna do quick math,\n\n197\n00:10:32.820 --> 00:10:36.035\nincrementing and\ndecrementing is a quick way to do it.\n\n198\n00:10:36.035 --> 00:10:40.410\nSo let's see how we do that.\n\n199\n00:10:40.410 --> 00:10:41.622\nUse our let command, and\n\n200\n00:10:41.622 --> 00:10:45.028\nthis time I'm actually get away with\nnot having to use my dollar sign so\n\n201\n00:10:45.028 --> 00:10:48.800\nthat's always nice, because I'm playing\naround with this variable here.\n\n202\n00:10:48.800 --> 00:10:53.605\nSo VAR1 Is going to ++.\n\n203\n00:10:53.605 --> 00:10:55.997\nSo ++ means increment by one.\n\n204\n00:10:55.997 --> 00:10:59.364\nThat's the default for incrementation.\n\n205\n00:10:59.364 --> 00:11:02.661\nSo if I just wanna increment by one,\nI'll do ++.\n\n206\n00:11:02.661 --> 00:11:05.947\nAnd then that's it, that's all you do.\n\n207\n00:11:05.947 --> 00:11:12.079\nHit Enter and now I will echo $VAR1,\nand it should be 11.\n\n208\n00:11:12.079 --> 00:11:13.751\nYeah, there it is, it is 11.\n\n209\n00:11:13.751 --> 00:11:16.500\nBut incremented by that many values,\nright?\n\n210\n00:11:16.500 --> 00:11:20.250\nIf I want to do the opposite, I will just,\nbasically the same command, but\n\n211\n00:11:20.250 --> 00:11:22.270\nthis time two subtractions.\n\n212\n00:11:22.270 --> 00:11:26.210\nThere we go, and\nnow it should be back to ten.\n\n213\n00:11:26.210 --> 00:11:29.000\nSo if I echo VAR1, and we're back to ten.\n\n214\n00:11:29.000 --> 00:11:32.250\nSo incrementing and decrimenting, and\nyou're thinking, yeah, that's kinda cool,\n\n215\n00:11:32.250 --> 00:11:36.170\nit's a really quick way to add or\nsubtract from my variables value, but\n\n216\n00:11:36.170 --> 00:11:38.520\nhow's that coming Handy?\n\n217\n00:11:38.520 --> 00:11:42.770\nWell, it comes in handy when you start\ngetting into conditional statements,\n\n218\n00:11:42.770 --> 00:11:44.420\nespecially with loops.\n\n219\n00:11:44.420 --> 00:11:48.659\nYou want to assign a value and while that\nvalue is true you're gonna do something,\n\n220\n00:11:48.659 --> 00:11:52.545\nand if it does this thing it will change\nthe value of that to something else.\n\n221\n00:11:52.545 --> 00:11:57.253\nAnd all you have to do is if it doesn't\nequal that value it will change.\n\n222\n00:11:57.253 --> 00:12:00.629\nRight, since the values change\nthe loop ends, and you exit the loop.\n\n223\n00:12:00.629 --> 00:12:03.505\nSo that's when we use\nincrementation a lot.\n\n224\n00:12:03.505 --> 00:12:06.288\nBut otherwise you're just doing math and\nit's an easy way to do math.\n\n225\n00:12:06.288 --> 00:12:09.868\nObviously, we will get into loops and\nhow that works and how that plays out.\n\n226\n00:12:09.868 --> 00:12:12.790\nBut for right now I just wanted\nyou to see that cuz it's fun,\n\n227\n00:12:12.790 --> 00:12:15.640\nit's cool to do, and\nwe can increment things.\n\n228\n00:12:15.640 --> 00:12:17.565\n>> Now, Dan, I do have a question\nabout just the basic math.\n\n229\n00:12:17.565 --> 00:12:20.239\n>> Yeah.\n>> Now, the very fact is we're actually\n\n230\n00:12:20.239 --> 00:12:23.110\njust doing just straight integers here.\n\n231\n00:12:23.110 --> 00:12:24.576\nWhat if I had like 4.5 plus 5.5.\n\n232\n00:12:24.576 --> 00:12:27.170\nCan it also do the decimal\nnumbers in using let here?\n\n233\n00:12:27.170 --> 00:12:29.380\n>> Let does not do decimals, okay?\n\n234\n00:12:29.380 --> 00:12:33.110\nThat's called floating point, and we are\ngonna get into floating point integers,\n\n235\n00:12:33.110 --> 00:12:34.190\nand floating point math.\n\n236\n00:12:34.190 --> 00:12:39.040\nBut for right now, these are basic,\njust working with straight up integers,\n\n237\n00:12:39.040 --> 00:12:42.960\nstraight up numbers that were whole\nnumbers, we love whole numbers.\n\n238\n00:12:42.960 --> 00:12:44.940\n>> [LAUGH]\n>> And that's what we're working with.\n\n239\n00:12:44.940 --> 00:12:50.190\nSo for right now, note that we will\nsee how to do that in upcoming.\n\n240\n00:12:50.190 --> 00:12:52.300\nSo let's keep on moving with the let.\n\n241\n00:12:52.300 --> 00:12:57.115\nI think I just have a couple more examples\non how to use that for doing math and\n\n242\n00:12:57.115 --> 00:12:59.110\nthen we'll move on amicably.\n\n243\n00:12:59.110 --> 00:13:00.630\nSo what do we have here?\n\n244\n00:13:00.630 --> 00:13:03.440\nWe have division and\nescaping special characters.\n\n245\n00:13:03.440 --> 00:13:06.739\nWe kinda saw this with variables, right?\n\n246\n00:13:06.739 --> 00:13:10.781\nWhat did we do to escape a special\ncharacter with our variables?\n\n247\n00:13:10.781 --> 00:13:11.695\nWe used the backslash.\n\n248\n00:13:11.695 --> 00:13:13.447\nWell, guess what, no different here.\n\n249\n00:13:13.447 --> 00:13:16.556\nYou're going to see a lot of these\ncommands work with each other,\n\n250\n00:13:16.556 --> 00:13:18.990\nso they cross-pollinate, as it were.\n\n251\n00:13:18.990 --> 00:13:21.310\nAnd you can use them all the way around.\n\n252\n00:13:21.310 --> 00:13:23.750\nSometimes, that is,\nmost of the time's it is, should I say,\n\n253\n00:13:23.750 --> 00:13:26.490\nsometimes it's not, so\njust be aware of that.\n\n254\n00:13:26.490 --> 00:13:30.820\nFor here, though, we get to use it,\nso let's see here, we can do lets.\n\n255\n00:13:30.820 --> 00:13:35.980\nAnd we'll say, open quotations because\nI'm gonna use some spaces here.\n\n256\n00:13:35.980 --> 00:13:39.545\nVAR1 is going to equal, and\nI want to do some multiplication.\n\n257\n00:13:39.545 --> 00:13:45.310\nSo I'm gonna say, 5 * 4, right,\nand then I'll close my quotes.\n\n258\n00:13:45.310 --> 00:13:49.145\nNow here's what's wrong with this\nstatement is that asterisk that I used for\n\n259\n00:13:49.145 --> 00:13:50.340\nthe multiplication.\n\n260\n00:13:50.340 --> 00:13:52.040\nI need to escape that character.\n\n261\n00:13:52.040 --> 00:13:56.827\nI need to use the negation so\nthat it is an interpretable regular\n\n262\n00:13:56.827 --> 00:14:02.130\nexpression by the Bash environment,\nso I need to escape that character.\n\n263\n00:14:02.130 --> 00:14:07.011\nSo I've just gotta go back in there,\nthrow my backslash in there, and\n\n264\n00:14:07.011 --> 00:14:09.682\nnow my variable should equal 5 * 4.\n\n265\n00:14:09.682 --> 00:14:12.886\nAnd I can echo that so, of course,\nI'm gonna get a syntax error.\n\n266\n00:14:12.886 --> 00:14:19.079\nWhat did I do wrong here,\ndid I leave anything out?\n\n267\n00:14:19.079 --> 00:14:21.120\nError token is, let's see,\n\n268\n00:14:21.120 --> 00:14:24.685\nright now make sure that I did not make\nany mistakes well maybe it's this way.\n\n269\n00:14:24.685 --> 00:14:29.193\nNope, well how about that,\nhot diggity dog, it's probable because,\n\n270\n00:14:29.193 --> 00:14:30.226\nlet me see here.\n\n271\n00:14:30.226 --> 00:14:31.626\nThere, let's try this, echo VAR.\n\n272\n00:14:31.626 --> 00:14:37.750\nOops.\nOkay, because I put it in quotations,\n\n273\n00:14:37.750 --> 00:14:42.090\nthis is what I thought was going on here,\nbecause I put it in quotations and it's\n\n274\n00:14:42.090 --> 00:14:46.980\njust I did that in my notes out of habit\nand I followed what I said to the letter.\n\n275\n00:14:46.980 --> 00:14:50.220\nSo because I put it in quotations,\nI didn't need to escape that character.\n\n276\n00:14:50.220 --> 00:14:55.269\nProbably though if I remove those quotes,\nI probably need to do this.\n\n277\n00:14:55.269 --> 00:14:59.180\nSo let's see if that does it,\nif it gives me a problem.\n\n278\n00:14:59.180 --> 00:15:01.630\nNope, it doesn't like that, that's funny.\n\n279\n00:15:01.630 --> 00:15:03.160\nOkay, I see what's going on here.\n\n280\n00:15:03.160 --> 00:15:04.660\nI removed the quotations.\n\n281\n00:15:04.660 --> 00:15:07.300\nGotta remember, that syntax is important.\n\n282\n00:15:07.300 --> 00:15:11.960\nSo, what I need to do is as you can\nsee take a look at my screen here.\n\n283\n00:15:11.960 --> 00:15:15.260\nI got it correct when\nI removed the spaces.\n\n284\n00:15:15.260 --> 00:15:18.670\nRemember, if you're gonna have spaces,\nyou gotta have quotations.\n\n285\n00:15:18.670 --> 00:15:20.310\nBut if I have quotations then\nI don't need to the negation,\n\n286\n00:15:20.310 --> 00:15:23.760\nwhich is kind of killing the point\nof my demonstration here.\n\n287\n00:15:23.760 --> 00:15:30.718\nSo, I'll remove those spaces out of here,\nand that should fix what ails us.\n\n288\n00:15:30.718 --> 00:15:36.135\nNow I hit Return and\nI echo $VAR1 and everything's gravy.\n\n289\n00:15:36.135 --> 00:15:38.169\nThere we go, 20,\nthat's what we expected to see.\n\n290\n00:15:38.169 --> 00:15:39.850\nSo as you can see the syntax of\nthis stuff is very important.\n\n291\n00:15:39.850 --> 00:15:45.590\nYou do need to spend some time making\nsure that you're doing it right.\n\n292\n00:15:45.590 --> 00:15:48.260\nA lot of times that's where you're gonna\nspend time debugging your scripts,\n\n293\n00:15:48.260 --> 00:15:50.510\ngoing, why isn't this working,\njust like what we saw right here.\n\n294\n00:15:50.510 --> 00:15:54.310\nIf I accidentally put quotations around\nsomething that doesn't need it, or\n\n295\n00:15:54.310 --> 00:15:56.210\nif I don't put quotations\naround things that do,\n\n296\n00:15:56.210 --> 00:15:59.300\nthen you see where the problems can lay.\n\n297\n00:15:59.300 --> 00:16:02.170\n>> Yeah, there's a lot of times\nwhere it's not just the very fact\n\n298\n00:16:02.170 --> 00:16:04.550\nof the syntax that can get you,\nespecially in math.\n\n299\n00:16:04.550 --> 00:16:06.350\nIn everything that I've ever seen,\n\n300\n00:16:06.350 --> 00:16:09.400\nwhat ends up happening a lot\nof times is that we also\n\n301\n00:16:09.400 --> 00:16:12.785\nhave to pay attention to what we would\ncall that order of operations, right?\n\n302\n00:16:12.785 --> 00:16:15.660\nRemembering that thing you learned in\nthird grade about the parentheses,\n\n303\n00:16:15.660 --> 00:16:18.640\nexponents, multiplication,\ndivision, addition, subtraction?\n\n304\n00:16:18.640 --> 00:16:22.630\nRemembering that actually does help\nout because if you're expecting\n\n305\n00:16:22.630 --> 00:16:26.400\nto see one result and it's not happening,\nremember that even with this and\n\n306\n00:16:26.400 --> 00:16:30.140\nespecially with the extra syntax\nin there that Daniel talked about,\n\n307\n00:16:30.140 --> 00:16:32.890\nyou gotta pay attention to the way\nthat that math is gonna work.\n\n308\n00:16:32.890 --> 00:16:34.750\nCuz that's how computers all do math,\nas well.\n\n309\n00:16:34.750 --> 00:16:38.170\nWell, Daniel, that sounds and\nlooks not exactly difficult.\n\n310\n00:16:39.310 --> 00:16:41.209\nSounds like we're done,\nis that all we're doing?\n\n311\n00:16:41.209 --> 00:16:45.518\n>> Nope, there are more ways\nto actually do math in here.\n\n312\n00:16:45.518 --> 00:16:48.954\nActually, we're gonna progress\nthrough from the least,\n\n313\n00:16:48.954 --> 00:16:52.468\nbest way to do this to the best,\nbest way to do this, okay?.\n\n314\n00:16:52.468 --> 00:16:56.569\nI don't wanna make fun of any of these,\nall of them have their place.\n\n315\n00:16:56.569 --> 00:17:00.349\nBut I wouldn't use let,\nmost likely, in any of my scripts.\n\n316\n00:17:00.349 --> 00:17:05.085\nMaybe a basic one, but\nthat's why I hardly ever use this thing.\n\n317\n00:17:05.085 --> 00:17:08.986\nLet's move into some more other\nthings that we have like expr.\n\n318\n00:17:08.986 --> 00:17:10.938\nExpression, basically,\nis what we're saying.\n\n319\n00:17:10.938 --> 00:17:14.672\nIt's a built-in command in the Bash shell,\nso we can use it and\n\n320\n00:17:14.672 --> 00:17:17.997\nplay around with it and\nlet's see what it will do for us.\n\n321\n00:17:17.997 --> 00:17:21.310\nAnd it will actually do the exact\nsame things that let will do, but\n\n322\n00:17:21.310 --> 00:17:25.056\nit kinda does it a little bit nicer,\nokay, that's what we're gonna do.\n\n323\n00:17:25.056 --> 00:17:27.080\nLet's take a look.\n\n324\n00:17:27.080 --> 00:17:30.950\nIf I do the expr command, and I say 4 + 5,\n\n325\n00:17:30.950 --> 00:17:35.520\nnow if we did that with let,\nwe'd get an issue, right?\n\n326\n00:17:35.520 --> 00:17:38.520\nIt doesn't like that,\nyou've got to put the quotations around.\n\n327\n00:17:38.520 --> 00:17:41.470\nHere, I just get math, right?\n\n328\n00:17:41.470 --> 00:17:46.430\nI didn't have to put in the variable and\ndo anything, I just have to say 4 + 5.\n\n329\n00:17:46.430 --> 00:17:49.999\nThe expression before was saying,\nShell, get ready to do some math.\n\n330\n00:17:51.090 --> 00:17:52.080\nMath.\nThe math is this expression.\n\n331\n00:17:52.080 --> 00:17:56.456\nI invoke that using the expr command,\nthe expression command, and\n\n332\n00:17:56.456 --> 00:17:57.700\ndo it when it runs.\n\n333\n00:17:57.700 --> 00:18:00.780\nIt starts seeing everything after that as\nnumbers and operators for those numbers.\n\n334\n00:18:00.780 --> 00:18:05.590\nLike what Ronnie was talking about,\nthe please excuse my dear Aunt Sally kinda\n\n335\n00:18:05.590 --> 00:18:09.160\nstuff, the plus, minus, and\nmultiplication and division.\n\n336\n00:18:09.160 --> 00:18:10.710\nSo it starts interpreting that that way.\n\n337\n00:18:10.710 --> 00:18:12.740\nSo easy stuff, right?\n\n338\n00:18:12.740 --> 00:18:14.370\nThat was super simple.\n\n339\n00:18:14.370 --> 00:18:14.999\nLet's see here.\n\n340\n00:18:16.180 --> 00:18:18.360\nI'm sorry, with no quotations,\nthat's right.\n\n341\n00:18:18.360 --> 00:18:20.620\nIt's kinda backwards actually from let.\n\n342\n00:18:21.710 --> 00:18:24.468\nWith let, if we wanted spaces,\nwe needed quotations.\n\n343\n00:18:24.468 --> 00:18:25.298\nWith expr,\n\n344\n00:18:25.298 --> 00:18:30.420\nif we want to spread it out like that,\nthere must be no quotations, okay?\n\n345\n00:18:30.420 --> 00:18:35.180\nSo, that being said,\nthat's what we're working with here.\n\n346\n00:18:35.180 --> 00:18:37.280\nIt does get a little confusing and\n\n347\n00:18:37.280 --> 00:18:40.060\nthat's why we're not gonna\nharp on a lot of these things.\n\n348\n00:18:40.060 --> 00:18:41.530\nWe're going to get you to\nthe best way to do it.\n\n349\n00:18:41.530 --> 00:18:44.160\nBut you have to be familiar with\nthese because someone might\n\n350\n00:18:44.160 --> 00:18:45.775\nbe using it in their script.\n\n351\n00:18:45.775 --> 00:18:49.450\nSo let's see what else we have here.\n\n352\n00:18:49.450 --> 00:18:51.745\nSo let's see what happens if I\ndo add quotations, right, so\n\n353\n00:18:51.745 --> 00:18:52.787\nwe'll bring ours back up.\n\n354\n00:18:52.787 --> 00:18:54.507\nI'll add quotations around it.\n\n355\n00:18:54.507 --> 00:18:57.450\nWhat does it do?\n\n356\n00:18:57.450 --> 00:18:58.688\nIt actually kind of does\nlike a echo command.\n\n357\n00:18:58.688 --> 00:19:02.386\nIt just echoes what I put in there,\nso that's why you may or\n\n358\n00:19:02.386 --> 00:19:06.254\nmay not want to use quotations\nwith the expression command.\n\n359\n00:19:06.254 --> 00:19:12.765\nSo let's go back in the and\ntake a look at what happens if I do,\n\n360\n00:19:12.765 --> 00:19:18.408\nmaybe, expr and then just 4+5,\nand hit Return.\n\n361\n00:19:18.408 --> 00:19:24.919\nAgain, it's kinda echoing that out,\nso if you want to do math,\n\n362\n00:19:24.919 --> 00:19:30.030\nexcuse me, using the expr,\nforget quotations.\n\n363\n00:19:30.030 --> 00:19:32.320\nBut you do need to remember the spaces,\n\n364\n00:19:32.320 --> 00:19:35.615\nit's very,\nvery important with this command.\n\n365\n00:19:35.615 --> 00:19:36.226\n[COUGH] Excuse me, again.\n\n366\n00:19:36.226 --> 00:19:39.662\nLet's see what else we have here.\n\n367\n00:19:39.662 --> 00:19:41.056\nThe modulus.\n\n368\n00:19:41.056 --> 00:19:43.922\nThis is an interesting little thing\nthat you're gonna go, modulus,\n\n369\n00:19:43.922 --> 00:19:45.829\nthat sounds like a transformer or\nsomething.\n\n370\n00:19:45.829 --> 00:19:51.740\nModulus Prime, right, but no, it's not\na transformer, it is the percent symbol.\n\n371\n00:19:51.740 --> 00:19:54.780\nThat's called the modulus,\nthis guy right here, looks like that.\n\n372\n00:19:54.780 --> 00:19:58.010\nIf I use the the modulus with\ntwo integers what I'm saying is,\n\n373\n00:19:58.010 --> 00:20:02.280\nI want you to do division, but\nI don't want you to give me the answer.\n\n374\n00:20:02.280 --> 00:20:06.490\nI want you to give me\nthe remainder of the answer.\n\n375\n00:20:06.490 --> 00:20:07.900\nRight, I know, strange, right?\n\n376\n00:20:07.900 --> 00:20:12.890\nI have no idea why anyone would ever\nwant just the remainder, but if you do,\n\n377\n00:20:12.890 --> 00:20:15.470\nthis is something apparently that is done.\n\n378\n00:20:15.470 --> 00:20:16.650\nSo, let's play around with that.\n\n379\n00:20:16.650 --> 00:20:22.010\nLet's expr, and we'll use our same\nnumbers here, 5 % 4, making sure to put\n\n380\n00:20:22.010 --> 00:20:27.450\nmy spaces in there, and then hitting\nEnter, and now you see the remainder is 1.\n\n381\n00:20:27.450 --> 00:20:31.278\nSo it doesn't give me, even though\nI guess that would be the answer,\n\n382\n00:20:31.278 --> 00:20:33.000\nit would be 1, remainder 1.\n\n383\n00:20:33.000 --> 00:20:35.970\nBut that's the remainder, and\nthat's what we're getting.\n\n384\n00:20:35.970 --> 00:20:39.030\nSo thank you modulus for\nshowing us how to do that.\n\n385\n00:20:39.030 --> 00:20:41.673\nAnd then anything else we wanna do?\n\n386\n00:20:41.673 --> 00:20:44.112\nYeah, we can create a variable as well.\n\n387\n00:20:44.112 --> 00:20:49.557\nAnd doing the good old VAR1,\nand don't forget our =$,\n\n388\n00:20:49.557 --> 00:20:54.352\nopen that up, and\nthen throw our command in there.\n\n389\n00:20:54.352 --> 00:20:59.263\nSo we can actually use this output and\ncreate an integer that way,\n\n390\n00:20:59.263 --> 00:21:02.669\nactually do some math\ninside of our scripts.\n\n391\n00:21:02.669 --> 00:21:04.175\nSo we can declare it this way.\n\n392\n00:21:04.175 --> 00:21:10.111\nSo just say what is it, 5- 4,\ndon't forget your space Lowry.\n\n393\n00:21:10.111 --> 00:21:14.947\nClose that out, hit there,\nand then if I echo, $VAR1,\n\n394\n00:21:14.947 --> 00:21:18.424\nif I do it correctly it'd probably help.\n\n395\n00:21:18.424 --> 00:21:21.350\nAnd then we get 1 because 5- 4 equals 1.\n\n396\n00:21:21.350 --> 00:21:25.894\nWe've used the expression\ncommand to set a variable, and\n\n397\n00:21:25.894 --> 00:21:28.501\ngot the output when we echoed it.\n\n398\n00:21:28.501 --> 00:21:32.905\n>> All right, so Daniel both of these, the\nlet as well as this expr expression type\n\n399\n00:21:32.905 --> 00:21:37.377\nof command that we've used, we've seen\nit done from the command line itself but\n\n400\n00:21:37.377 --> 00:21:39.705\nwe haven't really seen inside a script.\n\n401\n00:21:39.705 --> 00:21:43.308\nIs there something else that we use that\nwe're actually going to create a script\n\n402\n00:21:43.308 --> 00:21:43.885\nwith math?\n\n403\n00:21:43.885 --> 00:21:45.870\n>> Yeah, yeah, it was really the main\nreason why I didn't want to put\n\n404\n00:21:45.870 --> 00:21:49.020\nthem inside of a script is,\nA, they're a little clunky.\n\n405\n00:21:49.020 --> 00:21:51.650\nAs you can see it's not really\nfun to work with that stuff.\n\n406\n00:21:51.650 --> 00:21:56.170\nThere's an easier way to do it, and\nthis is the way that you tend to do it,\n\n407\n00:21:56.170 --> 00:21:58.841\nquick math operations inside of a script,\n\n408\n00:21:58.841 --> 00:22:01.979\nit's usually done the way\nI'm about to show you.\n\n409\n00:22:01.979 --> 00:22:10.086\nIt's basically an expansion of\na syntax that we already know.\n\n410\n00:22:10.086 --> 00:22:13.504\nI don't even know how to\nexplain it other than that.\n\n411\n00:22:13.504 --> 00:22:15.337\nSo, you know what, I'll stop explaining.\n\n412\n00:22:15.337 --> 00:22:17.297\nLet's just show you what I mean here.\n\n413\n00:22:17.297 --> 00:22:21.565\nLet's create a script, we'll call it\n2expr just in case I have one, .sh.\n\n414\n00:22:21.565 --> 00:22:26.009\nAnd don't forget nano as our editor.\n\n415\n00:22:26.009 --> 00:22:31.115\nSo, we'll give it the shebang,\n#!/bin/bash, and let's see here.\n\n416\n00:22:31.115 --> 00:22:36.645\nWhat we wanna do is declare our\nvariable and we want it to do math.\n\n417\n00:22:36.645 --> 00:22:40.380\nKinda like what we did with the expression\ncommand in the command line.\n\n418\n00:22:40.380 --> 00:22:46.001\nWe We could it that way but\nthere is an easier way,\n\n419\n00:22:46.001 --> 00:22:51.087\nwe could it like this VAR1=((, right?\n\n420\n00:22:51.087 --> 00:22:54.376\nSo we're double opening parenthesis,\ninstead of using 1 and the same using\n\n421\n00:22:54.376 --> 00:22:57.879\nthe expr command, I'm just saying double\nparenthesis, opening parenthesis.\n\n422\n00:22:57.879 --> 00:23:02.491\nAnd when I close that, whatever's inside,\nit's gonna treat that as\n\n423\n00:23:02.491 --> 00:23:07.505\na mathematical equation and run the math\nagainst it and give you the output.\n\n424\n00:23:07.505 --> 00:23:14.885\nSo let's see here, let's do, well heck,\nwe'll stick with five and four.\n\n425\n00:23:14.885 --> 00:23:19.465\nWe'll just say 4+5.\n\n426\n00:23:19.465 --> 00:23:22.865\nClose that out and then echo VAR1.\n\n427\n00:23:22.865 --> 00:23:27.745\nSo now when we save this and\nwe chmod+x our 2expres.sh and\n\n428\n00:23:27.745 --> 00:23:31.735\nwe run it It gives us the answer, right?\n\n429\n00:23:31.735 --> 00:23:33.925\nBecause all I did was\necho the value of that,\n\n430\n00:23:33.925 --> 00:23:36.985\nand it was a whole lot easier than doing\nit the way we were doing it before.\n\n431\n00:23:36.985 --> 00:23:40.565\nLet's go back into that script and\nwe'll do a couple more examples of this.\n\n432\n00:23:40.565 --> 00:23:42.735\nSo I will nano my 2e, there we go.\n\n433\n00:23:42.735 --> 00:23:46.946\nLet's play around with\nthis a little bit here,\n\n434\n00:23:46.946 --> 00:23:50.643\nlet's see what other good times we have.\n\n435\n00:23:53.390 --> 00:23:54.095\nYeah, variables, right?\n\n436\n00:23:54.095 --> 00:23:58.085\nNormally when we When\nwe declare variables,\n\n437\n00:23:58.085 --> 00:24:01.745\nwe have to use our little dollar\nsign when we reference them.\n\n438\n00:24:01.745 --> 00:24:04.185\nInside of these parentheses\nwe dont do that.\n\n439\n00:24:04.185 --> 00:24:08.165\nSo if I wanted to reference a variable\ninside of a mathematical equation,\n\n440\n00:24:08.165 --> 00:24:09.575\nI don't need my parentheses.\n\n441\n00:24:09.575 --> 00:24:14.575\nSo it would look something like this,\nwe'll say VAR2=$ dollar sign open open\n\n442\n00:24:14.575 --> 00:24:18.905\nlike so, and then we'll say,\nI'm sorry let's keep VAR1 going here.\n\n443\n00:24:20.590 --> 00:24:27.189\nAnd we'll say VAR2.\n\n444\n00:24:27.189 --> 00:24:29.265\nAnd we'll add that to five.\n\n445\n00:24:29.265 --> 00:24:29.965\nClose that out.\n\n446\n00:24:29.965 --> 00:24:36.885\nAnd you'll also notice I have,\nwhat do you call it, spaces, right?\n\n447\n00:24:36.885 --> 00:24:37.775\nSpaces in between the stuff.\n\n448\n00:24:37.775 --> 00:24:40.675\nWhen inside of the brackets,\n\n449\n00:24:40.675 --> 00:24:43.915\nit usually doesn't really matter as\nlong as it's inside of those brackets.\n\n450\n00:24:43.915 --> 00:24:47.415\nKind of the same way we had With the\nquotation marks you can start using spaces\n\n451\n00:24:47.415 --> 00:24:48.075\nin your equations.\n\n452\n00:24:48.075 --> 00:24:51.704\nSo, now that, that's done,\n\n453\n00:24:51.704 --> 00:24:57.298\nlet's see here,\nwe can then say echo, VAR1,\n\n454\n00:25:01.511 --> 00:25:06.245\nFor some reason it just escapes me to do\nthat, and then we'll save that and exit.\n\n455\n00:25:06.245 --> 00:25:12.075\nNow, here's the problem with my\nscript I'm already seeing an issue.\n\n456\n00:25:12.075 --> 00:25:15.365\ni was trying to throw a quick\nexample together for you.\n\n457\n00:25:15.365 --> 00:25:24.205\nR2 has no value so we actually we need\nto go back in here and give R2 a value.\n\n458\n00:25:24.205 --> 00:25:30.205\nWe'll say R2=4 because we like four.\n\n459\n00:25:30.205 --> 00:25:31.125\nSo now it'll be 4+5.\n\n460\n00:25:31.125 --> 00:25:31.755\nSo there we go.\n\n461\n00:25:31.755 --> 00:25:33.105\nEscape out of here.\n\n462\n00:25:33.105 --> 00:25:34.705\nI'm sorry.\n\n463\n00:25:34.705 --> 00:25:38.615\nNot escape And run our scripts.\n\n464\n00:25:38.615 --> 00:25:40.395\nAnd now we get nine and nine.\n\n465\n00:25:40.395 --> 00:25:45.335\nSo it's echoing both of our equations\ngiving us the answer to each one of those.\n\n466\n00:25:45.335 --> 00:25:48.675\nSo we can reference variables\ninside of that as well.\n\n467\n00:25:48.675 --> 00:25:52.265\nIt's basically giving me all the bells and\nwhistles of doing math, but\n\n468\n00:25:52.265 --> 00:25:54.665\nall I have to do is do dollar sign,\nopen parenthesis, open parenthesis,\n\n469\n00:25:54.665 --> 00:25:56.865\nclosed parenthesis, closed parenthesis.\n\n470\n00:25:56.865 --> 00:25:59.165\nI'm trying to thing,\nwe can do incrementation,\n\n471\n00:25:59.165 --> 00:26:04.075\nwe can do decrementation\nWhat else can we do?\n\n472\n00:26:04.075 --> 00:26:06.985\nWe don't seen and escape sign because\nwe're inside of those parenthesis.\n\n473\n00:26:06.985 --> 00:26:11.725\nSo I don't need to negate things like\nthe asterisks if I want to multiply.\n\n474\n00:26:11.725 --> 00:26:13.615\nSo I can just put that in there.\n\n475\n00:26:13.615 --> 00:26:17.415\nAs long as I'm well inside those\nparameters, those two open and\n\n476\n00:26:17.415 --> 00:26:22.165\nclose parentheses marks, I can basically\ndo just about anything I want and\n\n477\n00:26:22.165 --> 00:26:25.295\nthrow it out there and it will treat\nit as a mathematical expression and\n\n478\n00:26:25.295 --> 00:26:28.895\nspit out the The output and then I\ncould echo that variable's output or\n\n479\n00:26:28.895 --> 00:26:32.705\nuse it in a script for some other reason.\n\n480\n00:26:32.705 --> 00:26:35.165\n>> All right, so actually learning about\n\n481\n00:26:35.165 --> 00:26:37.925\njust a few of these is really helpful for\nus.\n\n482\n00:26:37.925 --> 00:26:40.425\nWe took a look at the first two\nways that we've talked about let,\n\n483\n00:26:40.425 --> 00:26:41.905\nas well as the expression command.\n\n484\n00:26:41.905 --> 00:26:44.835\nWe could see where we can do\nthe math directly inside,\n\n485\n00:26:44.835 --> 00:26:48.335\nof course,\nthe command line interface there.\n\n486\n00:26:48.335 --> 00:26:50.175\nAnd then lastly,\nDan also showed us, of course,\n\n487\n00:26:50.175 --> 00:26:54.075\nusing the dollar Sign with the double\nparentheses inside the scripts.\n\n488\n00:26:54.075 --> 00:26:56.855\nBut there's times, though, what we\nalso need to be able to do is to take\n\n489\n00:26:56.855 --> 00:27:00.305\nwhat's reported as a string inside of what\nwe're given and be able to change that,\n\n490\n00:27:00.305 --> 00:27:03.845\nor convert that, into a different data\ntype, such as a number or a date.\n\n491\n00:27:03.845 --> 00:27:06.715\nAnd you might be wondering,\nwhy the heck would I do that?\n\n492\n00:27:06.715 --> 00:27:10.155\nThe reason why is that sometimes we do\nneed to perform calculations and values.\n\n493\n00:27:10.155 --> 00:27:12.615\nWell, you can't perform a calculation\nagainst a number that is\n\n494\n00:27:12.615 --> 00:27:13.555\nactually written as a string.\n\n495\n00:27:13.555 --> 00:27:17.695\nSo for an example, I might have An ID,\nI don't know why you would do this,\n\n496\n00:27:17.695 --> 00:27:20.775\nan ID of ten, but the very fact is if you\nwanted to multiply that by some number\n\n497\n00:27:20.775 --> 00:27:26.185\nwell it's not gonna allow you to do that\nin the way that the math ends up working.\n\n498\n00:27:26.185 --> 00:27:28.855\nBut there is a way though, and\nDaniel's gonna show us this,\n\n499\n00:27:28.855 --> 00:27:32.055\nhow we can actually take\na string that's given to us and\n\n500\n00:27:32.055 --> 00:27:35.565\nconvert that into a number so\nthat we can perform value.\n\n501\n00:27:35.565 --> 00:27:38.605\n>> Yeah, every now and then we quickly\nwant to say, this string is not a string,\n\n502\n00:27:38.605 --> 00:27:40.705\nit's an actual integer, it's a number.\n\n503\n00:27:40.705 --> 00:27:43.545\nWe can use in a math equation.\n\n504\n00:27:43.545 --> 00:27:46.165\nSo we can quickly do that\nby using the declare.\n\n505\n00:27:46.165 --> 00:27:52.335\nThat we used declare back with the array,\nthe declare -a to make it into an array.\n\n506\n00:27:52.335 --> 00:27:53.825\nSo say, this will be an array.\n\n507\n00:27:53.825 --> 00:27:56.935\nWe'll do the same kinda thing here,\nwe're gonna say declare -i, and\n\n508\n00:27:56.935 --> 00:27:59.305\nthen my variable is\ngoing to be an integer.\n\n509\n00:27:59.305 --> 00:28:01.345\nSo let's do that.\n\n510\n00:28:01.345 --> 00:28:03.685\nLet's see how that works out practically.\n\n511\n00:28:03.685 --> 00:28:08.855\nSo let's make another script Here\nwe'll call it nanomath.sh here,\n\n512\n00:28:08.855 --> 00:28:14.135\nand put in our spang, bin/bash, and\n\n513\n00:28:14.135 --> 00:28:19.455\nhere what we're going to do is\nwe're going to say declare-I,\n\n514\n00:28:19.455 --> 00:28:23.235\nand we need to put this in quotations so\nthat it will actually work and\n\n515\n00:28:23.235 --> 00:28:31.485\ninterpret correctly, and we will say\nit is VAR1 equals Whatever, right?\n\n516\n00:28:31.485 --> 00:28:32.135\nIt'll equal 10.\n\n517\n00:28:32.135 --> 00:28:32.735\nThat's fine.\n\n518\n00:28:32.735 --> 00:28:40.465\nSo now it's saying VAR, whatever the VAR\nis, it's going to be an integer.\n\n519\n00:28:40.465 --> 00:28:44.295\nRight now if I echoed it it'll be 10 and\nthat's cool.\n\n520\n00:28:44.295 --> 00:28:47.883\nThat's not as cool as the fact that well,\nI could just echo VAR1=10 and\n\n521\n00:28:47.883 --> 00:28:48.885\nthat will work as well, 10.\n\n522\n00:28:48.885 --> 00:28:50.945\nBut that 10 is a string,\nit's not an integer.\n\n523\n00:28:50.945 --> 00:28:53.145\nCan't do math and things with it.\n\n524\n00:28:53.145 --> 00:28:55.465\nSo how do I prove that to you?\n\n525\n00:28:55.465 --> 00:29:01.085\nHow How do I show you that it's\na string versus an integer?\n\n526\n00:29:01.085 --> 00:29:04.385\nWell it's kind of a cool thing.\n\n527\n00:29:04.385 --> 00:29:06.565\nWhat I can do is I'll say VAR1=a.\n\n528\n00:29:06.565 --> 00:29:08.895\nA is not a number, it's a string.\n\n529\n00:29:08.895 --> 00:29:12.514\nand if I say echo $VAR1.\n\n530\n00:29:12.514 --> 00:29:16.105\nCan't do it Ronnie, I just can't do it.\n\n531\n00:29:16.105 --> 00:29:19.655\nThere we go.\nYou would think it'll echo a.\n\n532\n00:29:19.655 --> 00:29:20.887\nWell It won't.\n\n533\n00:29:20.887 --> 00:29:21.765\nWe,ll see what happens here.\n\n534\n00:29:21.765 --> 00:29:28.855\nI will save this, save that,\nwe will do the chmod plus X forward math\n\n535\n00:29:28.855 --> 00:29:34.185\ndot SH and then run Math dot SH,\nyou notice it comes back as zero.\n\n536\n00:29:34.185 --> 00:29:40.615\nWe set the variable value of bar\none to be A, but it gave me zero.\n\n537\n00:29:40.615 --> 00:29:46.055\nWell zero is a number, if you havent\nrealized that, zero is an actual number.\n\n538\n00:29:46.055 --> 00:29:47.325\nIt's not an A that's for sure.\n\n539\n00:29:47.325 --> 00:29:48.445\nIt's not the A character.\n\n540\n00:29:48.445 --> 00:29:49.765\nSo why did I get zero?\n\n541\n00:29:49.765 --> 00:29:50.755\nWhy did I not get A?\n\n542\n00:29:50.755 --> 00:29:54.105\nBecause we declared var one whatever\n\n543\n00:29:54.105 --> 00:29:58.915\nwould be in there even though I put ten\nas the initial value to be an integer.\n\n544\n00:29:58.915 --> 00:30:02.875\nSo when I changed that value to A it\njust said well there is no value.\n\n545\n00:30:02.875 --> 00:30:04.105\nWhat has no value?\n\n546\n00:30:04.105 --> 00:30:06.325\nZero.\nSo it prints zero.\n\n547\n00:30:06.325 --> 00:30:07.065\nSo what do we do?\n\n548\n00:30:07.065 --> 00:30:07.915\nHow do we change that?\n\n549\n00:30:07.915 --> 00:30:09.885\nJust go back in and\nmake it an actual integer and\n\n550\n00:30:09.885 --> 00:30:12.465\nthen it will work correctly so.\n\n551\n00:30:12.465 --> 00:30:16.225\nLet's jump back in there and\n\n552\n00:30:16.225 --> 00:30:20.295\nwe'll change var1 from 8 to 22 and\nwe'll save that and exit out.\n\n553\n00:30:20.295 --> 00:30:26.945\nWe'll run our scripts and now it says 22\nwe didn't give us any problem, right.\n\n554\n00:30:26.945 --> 00:30:28.755\nBecause 22 is an actual integer,\n\n555\n00:30:28.755 --> 00:30:32.765\nit interpreted it as an integer and\nit echoed that out.\n\n556\n00:30:32.765 --> 00:30:35.785\nThen we can start using that\nto create math equations and\n\n557\n00:30:35.785 --> 00:30:39.395\nAnd using that because that is\nan actual integer that will add,\n\n558\n00:30:39.395 --> 00:30:43.335\nsubtract, multiply, and\ndivide, it's not a strength.\n\n559\n00:30:43.335 --> 00:30:46.885\n>> All right Daniel well that really does\nhelp us out to understand that when we\n\n560\n00:30:46.885 --> 00:30:51.525\nstart taking a look at doing math we're\ngonna see that's gonna become a more and\n\n561\n00:30:51.525 --> 00:30:54.425\nmore valuable function tha we\nhave to be able to understand\n\n562\n00:30:54.425 --> 00:30:58.385\nwhen we create It's not just about\ncreating variables in equal text and\n\n563\n00:30:58.385 --> 00:31:00.645\npath a lot of times it's trying\nto call the information up.\n\n564\n00:31:00.645 --> 00:31:04.435\nGetting the information to the state\nthat we need to be by doing addition,\n\n565\n00:31:04.435 --> 00:31:05.605\nsubtraction, division,\n\n566\n00:31:05.605 --> 00:31:08.375\nwhatever we actually need to get\nthe values that we want it to be.\n\n567\n00:31:08.375 --> 00:31:12.405\nSometimes it also means that being able\nto take text values that were given,\n\n568\n00:31:12.405 --> 00:31:14.775\neven though they actually\nappear as numbers,\n\n569\n00:31:14.775 --> 00:31:17.335\nthey're actually being\nread as screen values.\n\n570\n00:31:17.335 --> 00:31:21.325\nAnd be able to convert them to integers so\nthat we can also do addition,\n\n571\n00:31:21.325 --> 00:31:24.215\nor subtraction, or division, or whatever\nwe might ant to do with it as well.\n\n572\n00:31:24.215 --> 00:31:26.065\nSo Daniel, thank you again for\nthose demonstrations.\n\n573\n00:31:26.065 --> 00:31:29.265\nBecause it's gonna help us on our way\nas we continue on for, well deeper and\n\n574\n00:31:29.265 --> 00:31:31.155\nof course more advanced scripting.\n\n575\n00:31:31.155 --> 00:31:33.125\nDaniel, we've got a lot more to go.\n\n576\n00:31:33.125 --> 00:31:33.675\nDon't we?\n>> Yeah.\n\n577\n00:31:33.675 --> 00:31:34.865\nYou would think okay.\n\n578\n00:31:34.865 --> 00:31:36.595\nWe've covered a lot of math stuff today.\n\n579\n00:31:36.595 --> 00:31:37.965\nAnd.\nHeavens to Betsy.\n\n580\n00:31:37.965 --> 00:31:38.685\nIt is not a fun, fun topic.\n\n581\n00:31:38.685 --> 00:31:40.055\nBut we do need to know it.\n\n582\n00:31:40.055 --> 00:31:43.635\nAnd like Ronnie said,\nguess what there's more to come.\n\n583\n00:31:43.635 --> 00:31:44.835\nThere is more math.\n\n584\n00:31:44.835 --> 00:31:48.895\nNow the cool thing is is that,\nthis is more advanced math.\n\n585\n00:31:48.895 --> 00:31:50.705\nRonnie mentioned floating points.\n\n586\n00:31:50.705 --> 00:31:52.535\nIntegers and floating point expressions.\n\n587\n00:31:52.535 --> 00:31:55.395\nThat's what we're gonna get into and\nwe're gonna use\n\n588\n00:31:55.395 --> 00:31:59.455\na cool little tool built in through most\noperating systems that are running Unix or\n\n589\n00:31:59.455 --> 00:32:01.905\nLinux to do that for us and\nscripting with it as well.\n\n590\n00:32:01.905 --> 00:32:04.885\nI've got some cool scripts online for\nus to play around with next show.\n\n591\n00:32:04.885 --> 00:32:07.485\nWe just don't have time to\ndo it in this one Ronnie.\n\n592\n00:32:07.485 --> 00:32:11.150\n>> That actually means that\nwe're gonna need to make\n\n593\n00:32:11.150 --> 00:32:12.476\n>> A part two on math and\n\n594\n00:32:12.476 --> 00:32:14.984\nthat means more serious stuff for me.\n\n595\n00:32:14.984 --> 00:32:19.442\nBut it also means that well it's great for\nyou if you're learning Bash scripting.\n\n596\n00:32:19.442 --> 00:32:22.368\nSo signing off from ITProTV,\nI am Ronnie Wong.\n\n597\n00:32:22.368 --> 00:32:23.134\n>> I'm Daniel Lowrie.\n\n598\n00:32:23.134 --> 00:32:24.968\n>> And we'll see you next time.\n\n599\n00:32:24.968 --> 00:32:31.170\n[SOUND]\n\n",
          "vimeoId": "146521700"
        },
        {
          "description": "In this episode, Ronnie and Daniel take a look at using the BASH calculator.  The guys show how to use it and why we would uses the BASH calculator instead of the basic let or expo commands.  We also see the power of bc when we work with some complicated math problems.",
          "length": "1917",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash_pt2-111215-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash_pt2-111215-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-11-1-math_in_bash_pt2-111215-1-sm.jpg",
          "title": "Math in BASH Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.003 --> 00:00:15.884\nWelcome to another exciting\nepisode right here on ITProTV.\n\n3\n00:00:15.884 --> 00:00:19.415\nI'm your host, Ronnie Wong, and today\nwe're taking a look at BASH and scripting.\n\n4\n00:00:19.415 --> 00:00:23.170\nSpecifically though, we're continuing\non taking a look at math and\n\n5\n00:00:23.170 --> 00:00:26.000\nbeing able to use that\ninside of BASH as well.\n\n6\n00:00:26.000 --> 00:00:29.038\nAnd the nice thing is we have somebody\nto help us out which is Mr. Dan Lowery.\n\n7\n00:00:29.038 --> 00:00:31.731\nHe's gonna actually be helping us\nto understand a little bit better.\n\n8\n00:00:31.731 --> 00:00:35.311\nNow Daniel we went through a lot\nin part one in this episode,\n\n9\n00:00:35.311 --> 00:00:38.186\nin this little kinda\nmini-series that we had.\n\n10\n00:00:38.186 --> 00:00:40.508\nBut Daniel I'm starting to see something.\n\n11\n00:00:40.508 --> 00:00:42.690\nYou've kinda fooled me.\n\n12\n00:00:42.690 --> 00:00:46.128\nThere's an actual calculator inside\nof BASH and we haven't been using it.\n\n13\n00:00:46.128 --> 00:00:48.404\nDaniel what the heck is that about.\n\n14\n00:00:48.404 --> 00:00:51.935\n>> Yeah, I've kinda pulled\nthe old hamstring on us here.\n\n15\n00:00:51.935 --> 00:00:54.908\n>> [LAUGH]\n>> And with the long way around to get to\n\n16\n00:00:54.908 --> 00:00:57.784\nthe answer of how to do\nsomething here in BASH.\n\n17\n00:00:57.784 --> 00:00:59.090\nHe is absolutely right,\n\n18\n00:00:59.090 --> 00:01:03.270\nthere is a calculator that is built\ninto most of your BASH environments.\n\n19\n00:01:03.270 --> 00:01:09.438\nIt's called the [COUGH], excuse me,\nthe BASH calculator, or BC for short.\n\n20\n00:01:09.438 --> 00:01:13.916\nWe've looked at the other to do it, using\nthe EXPR command or expression command.\n\n21\n00:01:13.916 --> 00:01:18.169\nWorking inside of scripts with,\nthe little characters or\n\n22\n00:01:18.169 --> 00:01:22.788\nthe syntax version of the EXPR\ncommand inside of there as well.\n\n23\n00:01:22.788 --> 00:01:24.950\nBC kinda makes things easier for us,\n\n24\n00:01:24.950 --> 00:01:28.440\nand it's a better way to do math\ninside of your BASH environment.\n\n25\n00:01:28.440 --> 00:01:32.220\nAnd here's why,\nit trumps all these other ways,\n\n26\n00:01:32.220 --> 00:01:34.400\nbecause it does floating point, right?\n\n27\n00:01:34.400 --> 00:01:36.096\nRonnie kind of mentioned\nthat in our previous show.\n\n28\n00:01:36.096 --> 00:01:39.160\nHe said, does this do complex numbers?\n\n29\n00:01:39.160 --> 00:01:44.515\nBasically, if I have a number like pi,\n3.14 and on and on and on it goes.\n\n30\n00:01:44.515 --> 00:01:46.097\nCan I work with that type of number?\n\n31\n00:01:46.097 --> 00:01:47.896\nOne of the other ways we did that,\n\n32\n00:01:47.896 --> 00:01:51.280\nI don't know of any way off the top\nof my head that you can do it.\n\n33\n00:01:51.280 --> 00:01:54.350\nThis works with whole numbers and\nif there is, again,\n\n34\n00:01:54.350 --> 00:01:57.640\nit's probably gonna be very\nvery limited in it's scope.\n\n35\n00:01:57.640 --> 00:02:00.240\nWhereas the BASH calculator\ngives us a real way\n\n36\n00:02:00.240 --> 00:02:04.908\nto work with floating point integers and\nexpressions that work with floating point.\n\n37\n00:02:04.908 --> 00:02:08.758\n>> Now Daniel, since this is a calculator\nI'm gonna assume it's sort of like\n\n38\n00:02:08.758 --> 00:02:10.111\nthe Windows calculator.\n\n39\n00:02:10.111 --> 00:02:12.853\nEasy enough, you type in calculator,\npops right up.\n\n40\n00:02:12.853 --> 00:02:16.245\nI get to be able now use my mouse and\nno you're not-\n\n41\n00:02:16.245 --> 00:02:17.083\n>> [LAUGH]\n\n42\n00:02:17.083 --> 00:02:17.869\n>> You're actually looking at me\n\n43\n00:02:17.869 --> 00:02:18.478\nlike, are you joking?\n\n44\n00:02:18.478 --> 00:02:21.867\n>> Yeah,\nwelcome to the command line world.\n\n45\n00:02:21.867 --> 00:02:23.601\n>> Man.\n>> We're not in a graphical interface\n\n46\n00:02:23.601 --> 00:02:24.968\nwhen it comes to these types of things.\n\n47\n00:02:24.968 --> 00:02:29.189\nWhen we're talking about things that we\ncan script we're usually not talking about\n\n48\n00:02:29.189 --> 00:02:31.456\nsome sort of photographical thing, right?\n\n49\n00:02:31.456 --> 00:02:35.975\nThis is going to be a command line option,\nand that's why we can script with it,\n\n50\n00:02:35.975 --> 00:02:38.481\nbecause it works through the command line.\n\n51\n00:02:38.481 --> 00:02:43.185\nAnd through that I can redirect input and\noutput and play around with that.\n\n52\n00:02:43.185 --> 00:02:48.197\nNot only that, but when it comes\nto the BC, the BASH calculator,\n\n53\n00:02:48.197 --> 00:02:51.949\nit really is even its own\nprogramming language.\n\n54\n00:02:51.949 --> 00:02:54.918\nSo even though it is command line enabled,\n\n55\n00:02:54.918 --> 00:03:00.526\nit's probably a little more functional,\nespecially when it comes to scripts,\n\n56\n00:03:00.526 --> 00:03:04.400\nthan something like a GUI\nbased calculator would be.\n\n57\n00:03:04.400 --> 00:03:07.608\nSo, running calc from run in a Windows\nbox and bringing up a calculator and\n\n58\n00:03:07.608 --> 00:03:10.145\ndoing math, getting my results and\nclosing the program,\n\n59\n00:03:10.145 --> 00:03:12.037\nisn't really what we're talking about.\n\n60\n00:03:12.037 --> 00:03:15.037\n>> [LAUGH]\n>> We're talking about scripts that do\n\n61\n00:03:15.037 --> 00:03:18.310\nmath for certain reasons right\nthere you're looking for.\n\n62\n00:03:18.310 --> 00:03:20.341\nAnd especially floating point math.\n\n63\n00:03:20.341 --> 00:03:25.003\nSo that I can work with integers that\nhave decimal places off to one way, and\n\n64\n00:03:25.003 --> 00:03:27.667\nto as many places I'd\nlike it to work with.\n\n65\n00:03:27.667 --> 00:03:29.805\nSo what are we talking about when\nI say it's a programming language.\n\n66\n00:03:29.805 --> 00:03:33.102\nAnd I wrote down some of the greatest\ntips when it comes to that.\n\n67\n00:03:33.102 --> 00:03:35.053\nThat means it works with numbers, right?\n\n68\n00:03:35.053 --> 00:03:39.513\nIt does integers and floating point,\nit also has its own variables.\n\n69\n00:03:39.513 --> 00:03:43.502\nI can create variables inside\nthe BC command structure, so\n\n70\n00:03:43.502 --> 00:03:48.226\nit's almost like like launching\na shell that just does math, right?\n\n71\n00:03:48.226 --> 00:03:50.788\nSo it interprets these variable commands.\n\n72\n00:03:50.788 --> 00:03:52.907\nWe also have, you can do comments.\n\n73\n00:03:52.907 --> 00:03:57.543\nJust like we do in BASH, we put a little\nhash mark there, anything after that is\n\n74\n00:03:57.543 --> 00:04:01.856\ngonna be a comment and is not going to\nbe interpreted by the shell itself.\n\n75\n00:04:01.856 --> 00:04:04.271\nSame thing with BC,\nif I put a hash comment there,\n\n76\n00:04:04.271 --> 00:04:07.962\nit is not going to be interpreting\nanything in that line, I can comment out.\n\n77\n00:04:07.962 --> 00:04:11.440\nI can add notes to my scripts and\nthings of that nature, so\n\n78\n00:04:11.440 --> 00:04:13.261\nthat's really nice as well.\n\n79\n00:04:13.261 --> 00:04:18.054\nWe also have conditional statements,\nif thens, that type of thing.\n\n80\n00:04:18.054 --> 00:04:23.721\nIf this equals that, then do this,\nthis math equation and return the results.\n\n81\n00:04:23.721 --> 00:04:24.977\nThat's also nice.\n\n82\n00:04:24.977 --> 00:04:26.233\nAnd functions as well.\n\n83\n00:04:26.233 --> 00:04:30.696\nI know conditionals and functions we\nhaven't really talked about other than in\n\n84\n00:04:30.696 --> 00:04:33.108\nvery brief passing, we will get to those.\n\n85\n00:04:33.108 --> 00:04:35.341\nBut you gotta remember\nwe're talking about BC and\n\n86\n00:04:35.341 --> 00:04:38.640\nI just wanted to give you the features\nof everything that it does.\n\n87\n00:04:38.640 --> 00:04:41.866\nIt is a programming language,\nyou can program with it.\n\n88\n00:04:41.866 --> 00:04:45.600\nIt's just specifically for\ndoing arithmetic.\n\n89\n00:04:45.600 --> 00:04:48.471\n>> Now Daniel, this sounds like\na fairly flexible type of program\n\n90\n00:04:48.471 --> 00:04:50.268\nthat we can actually end up using here.\n\n91\n00:04:50.268 --> 00:04:51.849\nSo, let's go in and jump into it.\n\n92\n00:04:51.849 --> 00:04:54.126\nDaniel can show us some examples\nof why we wanna use it.\n\n93\n00:04:54.126 --> 00:04:55.567\n>> Yeah, no problem.\n\n94\n00:04:55.567 --> 00:04:59.608\nSo let's stop playing around,\nlet's watch the metal meet the meat here.\n\n95\n00:04:59.608 --> 00:05:03.789\nSo, what do we do, how do we get\nthe BC calculator up and running?\n\n96\n00:05:03.789 --> 00:05:08.202\nNot a problem,\nyou just type in bc and hit return.\n\n97\n00:05:08.202 --> 00:05:09.566\nIf you don't have anything,\nif it doesn't come\n\n98\n00:05:09.566 --> 00:05:11.740\nback then it just probably means\nit's not installed on your system.\n\n99\n00:05:11.740 --> 00:05:16.315\nAnd I'm not 100% sure if\nit's a built in or not.\n\n100\n00:05:16.315 --> 00:05:17.350\nSomething tells me that it's not,\nso you might not have it.\n\n101\n00:05:17.350 --> 00:05:20.626\nAnd if not you just download and\ninstall, it runs.\n\n102\n00:05:20.626 --> 00:05:23.272\nBut if it's a built-in you're good to go,\nyou're gravy.\n\n103\n00:05:23.272 --> 00:05:27.237\nActually we can see that, if I wanted\nto quit out, now that we're in it,\n\n104\n00:05:27.237 --> 00:05:31.204\nif I wanted to quit, I would just type\nquit and now I'm back to my prompt.\n\n105\n00:05:31.204 --> 00:05:34.274\nSo you'll notice, like I said,\nit almost works like a shell.\n\n106\n00:05:34.274 --> 00:05:38.012\nLike if I typed in CSH or ZSH and\nI opened a different shell,\n\n107\n00:05:38.012 --> 00:05:41.920\nchanges my prompt,\nmy interface is a little bit different.\n\n108\n00:05:41.920 --> 00:05:48.007\nWe can see if this actually is a part\nof our built-ins by just going here.\n\n109\n00:05:48.007 --> 00:05:50.841\nAnd let's see here, is BC a built-in.\n\n110\n00:05:50.841 --> 00:05:54.959\nSo I don't see it here in the built-in,\nso that must mean that it's not one.\n\n111\n00:05:54.959 --> 00:05:58.068\nSo if you don't have it,\njust download and install it,\n\n112\n00:05:58.068 --> 00:06:01.392\nit's one of the best ways to do\nmath inside of your scripts.\n\n113\n00:06:01.392 --> 00:06:02.370\nSo let me clear out of here.\n\n114\n00:06:03.900 --> 00:06:06.984\nSo now that's been said,\nlet's get back into BC here.\n\n115\n00:06:06.984 --> 00:06:11.369\nEnter, you'll notice it gives\nus a nice little thing,\n\n116\n00:06:11.369 --> 00:06:16.314\nif you wanna suppress this welcome\nbanner or whatever this is,\n\n117\n00:06:16.314 --> 00:06:19.600\nyou can put, and just do bc -q for quiet.\n\n118\n00:06:19.600 --> 00:06:21.348\nAnd you'll notice I didn't\nget any of that output.\n\n119\n00:06:21.348 --> 00:06:24.955\nSo, if you wanna throw that in, if you\never see scripts that are using the BASH\n\n120\n00:06:24.955 --> 00:06:27.810\ncalculator and\nyou're wondering what is that -c there.\n\n121\n00:06:27.810 --> 00:06:31.282\nIt's just so that it will shut up with I\ndon't care when it was created, dates and\n\n122\n00:06:31.282 --> 00:06:32.268\ntimes, and all that.\n\n123\n00:06:32.268 --> 00:06:34.034\nDon't need to know about a warranty.\n\n124\n00:06:34.034 --> 00:06:36.915\nI just wanna use the thing,\nso that can be helpful.\n\n125\n00:06:36.915 --> 00:06:38.660\nSo, I'll use bc -q for that.\n\n126\n00:06:38.660 --> 00:06:40.700\nNow, let's see what it can do.\n\n127\n00:06:40.700 --> 00:06:44.742\nNow we're basically kind of in that\nmathematical operators idea, right?\n\n128\n00:06:44.742 --> 00:06:50.790\nSo if I did 4 + 5, hit enter,\nreturns the actual thing, 9.\n\n129\n00:06:50.790 --> 00:06:57.132\nIf I did 4 +, I'm sorry, 4 + 5.4 and\n\n130\n00:06:57.132 --> 00:07:01.197\nhit return, I get 9.4.\n\n131\n00:07:01.197 --> 00:07:03.426\nSee, now we're starting to see\nthe extended capabilities.\n\n132\n00:07:03.426 --> 00:07:04.960\nI know that it doesn't\nseem really special.\n\n133\n00:07:04.960 --> 00:07:07.922\nI'm sure Ronnie and I could,\nas horrible at math as we are,\n\n134\n00:07:07.922 --> 00:07:11.138\nwe could've probably had done\nthose calculations in our head.\n\n135\n00:07:11.138 --> 00:07:17.780\nBut it's that floating decimal point\nthat is the real big attraction here.\n\n136\n00:07:17.780 --> 00:07:19.546\nTo be able to work with that.\n\n137\n00:07:19.546 --> 00:07:23.077\nSo it's gonna give us better accuracy and\nthings like that.\n\n138\n00:07:23.077 --> 00:07:27.559\nWhen it returns a value for\nus we can go down to a decimal place,\n\n139\n00:07:27.559 --> 00:07:29.209\ngive us a little more.\n\n140\n00:07:29.209 --> 00:07:32.569\nActually this sort of works great\nwith things like statistical math and\n\n141\n00:07:32.569 --> 00:07:35.153\nstuff like that, so\nthat's why it's such a big deal.\n\n142\n00:07:35.153 --> 00:07:40.614\n>> So Daniel, can I take two numbers\nlet's say, like with different decimal\n\n143\n00:07:40.614 --> 00:07:45.658\npoint values like 4.32 plus 7.477 and\nadd those together?\n\n144\n00:07:45.658 --> 00:07:47.378\nAnd it doesn't matter how\nmany decimal places we have?\n\n145\n00:07:47.378 --> 00:07:50.310\n>> Nope, it'll be just fine,\nit'll handle it fine.\n\n146\n00:07:50.310 --> 00:07:54.565\nWe can put any two decimaled integers,\nany two floating point integers together,\n\n147\n00:07:54.565 --> 00:07:57.984\nit will add them, it will subtract them,\nmultiply and, divide.\n\n148\n00:07:57.984 --> 00:08:00.463\nDo all the great math functions\nthat we all know and love and\n\n149\n00:08:00.463 --> 00:08:01.840\nit won't give you any trouble.\n\n150\n00:08:01.840 --> 00:08:04.582\nIt's as easy as just\nputting it into the system.\n\n151\n00:08:04.582 --> 00:08:05.466\nLet's take a look at this.\n\n152\n00:08:05.466 --> 00:08:06.304\nLet's try that actually.\n\n153\n00:08:06.304 --> 00:08:13.875\nLet's try, how about 9.4, not 9.4, let's\ngive you something a little longer here.\n\n154\n00:08:13.875 --> 00:08:20.285\n4.334 and\nwe'll multiply that by 7.32, right?\n\n155\n00:08:20.285 --> 00:08:20.983\nAnd we'll hit enter.\n\n156\n00:08:20.983 --> 00:08:23.817\nBoom, no problem, just did the math.\n\n157\n00:08:23.817 --> 00:08:31.898\nEven though 7.32 is a shorter decimal\nplace than 4.334, it didn't care.\n\n158\n00:08:31.898 --> 00:08:32.921\nIt says that's not a problem.\n\n159\n00:08:32.921 --> 00:08:37.520\nI assume that that is a zero,\nand just don't worry about it.\n\n160\n00:08:37.520 --> 00:08:39.309\nSo it assumes some certain things,\n\n161\n00:08:39.309 --> 00:08:42.119\njust like your calculator\nwould that sits on your desk.\n\n162\n00:08:42.119 --> 00:08:44.441\nIf you were to type these two numbers in,\nit wouldn't have a problem with it either.\n\n163\n00:08:44.441 --> 00:08:48.560\nYou don't have to to fill out\nplaces that aren't there.\n\n164\n00:08:48.560 --> 00:08:52.103\n>> Now, Daniel, we also have to use\nsomething that we call scale to really\n\n165\n00:08:52.103 --> 00:08:54.181\nhelp us to zoom in\nexactly on what we need.\n\n166\n00:08:54.181 --> 00:08:55.437\nSo, Daniel, how do we use this?\n\n167\n00:08:55.437 --> 00:08:59.722\n>> Yeah, with the scale,\na option that's built into the BC command,\n\n168\n00:08:59.722 --> 00:09:03.782\nthis is something we're gonna\nprobably use almost every time,\n\n169\n00:09:03.782 --> 00:09:06.658\nI would expect, or\nat least a lot of the time.\n\n170\n00:09:06.658 --> 00:09:11.805\nWhat scale does is it says,\nhow far out do I want decimals to show?\n\n171\n00:09:11.805 --> 00:09:18.192\nSo how, how many places past the decimal\npoint do I want to see output for, right?\n\n172\n00:09:18.192 --> 00:09:21.770\nSo if I wanted only two decimal places,\nI would say scale equals two.\n\n173\n00:09:21.770 --> 00:09:24.904\nIf I wanted ten decimal places,\nscale equals ten, right?\n\n174\n00:09:24.904 --> 00:09:26.280\nSo that's what we can do.\n\n175\n00:09:26.280 --> 00:09:27.768\nLet's take a look at how\nwe can do that here.\n\n176\n00:09:27.768 --> 00:09:31.370\nLet's play around with it.\n\n177\n00:09:31.370 --> 00:09:36.365\nLet's see here, if we do 4.555 and\nwe say divided by 5,\n\n178\n00:09:36.365 --> 00:09:40.262\ndivided by, there we go,\nby 5, and I hit enter.\n\n179\n00:09:40.262 --> 00:09:41.843\nI get 0, right?\n\n180\n00:09:41.843 --> 00:09:42.495\nAnd why is that?\n\n181\n00:09:42.495 --> 00:09:46.862\nBecause this is where decimal points and\nflow define.\n\n182\n00:09:46.862 --> 00:09:50.625\nI need to tell it,\nshow me what I'm working with here.\n\n183\n00:09:50.625 --> 00:09:51.602\nSo let's play around here.\n\n184\n00:09:51.602 --> 00:09:57.892\nLet's say scale=4, and\nI'll say the same thing, 4.555 divided by,\n\n185\n00:09:57.892 --> 00:10:02.580\nwhere's my divide, there it is,\nby 5, and hit enter.\n\n186\n00:10:02.580 --> 00:10:05.089\nNow, because what happens?\n\n187\n00:10:05.089 --> 00:10:06.948\nLet's take a look at that math equation.\n\n188\n00:10:06.948 --> 00:10:08.714\nI know,\nI'm the worlds worst mathematician.\n\n189\n00:10:08.714 --> 00:10:10.805\nI'm gonna teach you guy\nmath here real quick.\n\n190\n00:10:10.805 --> 00:10:18.098\n5 divided by 4.555,\nwell 5 doesn't go into 4.555 1 time.\n\n191\n00:10:18.098 --> 00:10:19.586\n1 is a whole integer.\n\n192\n00:10:19.586 --> 00:10:25.940\nThere is nothing, and I need it to\ntell it, I need that decimal places.\n\n193\n00:10:25.940 --> 00:10:30.424\nI need to tell it this is all floating\npoint and set it out to this far, so\n\n194\n00:10:30.424 --> 00:10:33.160\nthat I can see that result and\nreturn that.\n\n195\n00:10:33.160 --> 00:10:36.566\nSo every now and\nthen you'll need to set that variable or\n\n196\n00:10:36.566 --> 00:10:39.403\nthat value for that, and\nthen you can move on.\n\n197\n00:10:39.403 --> 00:10:42.026\n>> So Daniel, it sounds like that if you\nend up getting a 0 a lot of times when\n\n198\n00:10:42.026 --> 00:10:44.490\nyou're actually trying to get do\nthis with these decimal numbers.\n\n199\n00:10:44.490 --> 00:10:47.900\nThis is a good place to use scale if\nyou really need to see that value,\n\n200\n00:10:47.900 --> 00:10:50.190\nif it's not returning\nwhat you need to see.\n\n201\n00:10:50.190 --> 00:10:55.117\n>> Exactly, that's just prime example of\nwhere you would want to set your scale so\n\n202\n00:10:55.117 --> 00:10:57.773\nthat you could see those returned values.\n\n203\n00:10:57.773 --> 00:10:59.632\nAll right, let's see what else you can do.\n\n204\n00:10:59.632 --> 00:11:00.609\nVariables, right?\n\n205\n00:11:00.609 --> 00:11:02.979\nI said this does variables.\n\n206\n00:11:02.979 --> 00:11:04.488\nWell I'm not just gonna talk about it,\n\n207\n00:11:04.488 --> 00:11:06.510\nlet's actually do that to\nsee how we work with that.\n\n208\n00:11:06.510 --> 00:11:10.645\nWe're still in BC here,\nI'm going to just scroll down a bit.\n\n209\n00:11:10.645 --> 00:11:15.058\nHow about we do, now yeah,\nI'll go ahead and do it.\n\n210\n00:11:15.058 --> 00:11:20.911\nvar1, and we'll say = 4,\nhit enter, no problem, right?\n\n211\n00:11:20.911 --> 00:11:23.095\nEasy, nothing to it.\n\n212\n00:11:23.095 --> 00:11:29.086\nAnd if I say var1 * 5 I get 20.\n\n213\n00:11:29.086 --> 00:11:32.710\nSo, I took a variable, I named a variable.\n\n214\n00:11:32.710 --> 00:11:35.173\nI added the value it, I said it is 4.\n\n215\n00:11:35.173 --> 00:11:40.885\nAnd since this is working with integers\nspecifically, it interprets it that way.\n\n216\n00:11:40.885 --> 00:11:45.381\nSo all I have to do then is multiply\nthat variable, which has a value of 4,\n\n217\n00:11:45.381 --> 00:11:47.061\nby whatever number I want.\n\n218\n00:11:47.061 --> 00:11:50.586\nOr another variable that has a value of\nsomething, and it will return the results.\n\n219\n00:11:50.586 --> 00:11:53.977\nSo, we can work with variables,\ncreate variables, use them, and\n\n220\n00:11:53.977 --> 00:11:56.130\nnot just like that, but is raised as well.\n\n221\n00:11:56.130 --> 00:12:01.193\nSo, all the great functionality that we're\nused to in BASH You implement it here and\n\n222\n00:12:01.193 --> 00:12:04.900\ncreate kind of scripts inside of\nscripts that do math for us and\n\n223\n00:12:04.900 --> 00:12:08.640\nthen generate an output and\nthen work with that down the pipe.\n\n224\n00:12:08.640 --> 00:12:11.820\nNow, let me also ask this question,\nthis is my standard question.\n\n225\n00:12:11.820 --> 00:12:16.683\nIs this case sensitive as well\nusing the bc inside of here?\n\n226\n00:12:16.683 --> 00:12:20.410\n>> Yes it is, and\nwe learn that little trick the hard way.\n\n227\n00:12:20.410 --> 00:12:21.572\nI was playing around with this.\n\n228\n00:12:21.572 --> 00:12:25.478\nAgain, if you're not doing a lot of\nmath type equations in your scripts,\n\n229\n00:12:25.478 --> 00:12:28.954\nthat's kind of the thing where if\nyou don't use it, you lose it.\n\n230\n00:12:28.954 --> 00:12:32.364\nAnd guilty as charged, I was playing\naround creating scripts for the show\n\n231\n00:12:32.364 --> 00:12:36.055\ntoday, and I was having a bear of a time,\nand I couldn't figure out what it was.\n\n232\n00:12:36.055 --> 00:12:39.874\nSo now I can tell you, I can warn you.\n\n233\n00:12:39.874 --> 00:12:46.143\nInside of bc and inside of scripts\nthat use bc, don't use capitals.\n\n234\n00:12:46.143 --> 00:12:47.059\nOkay?\n\n235\n00:12:47.059 --> 00:12:51.513\nIf you have variables that are capitals\nlike, you see if you've been watching\n\n236\n00:12:51.513 --> 00:12:56.255\nthe show, I like to use capitals for my\nvariables inside of my BAS scripts, right?\n\n237\n00:12:56.255 --> 00:12:58.592\nIt makes them very easy to find,\neasy to see,\n\n238\n00:12:58.592 --> 00:13:00.817\nthey stand out from\nthe rest of the script.\n\n239\n00:13:00.817 --> 00:13:04.859\nThe problem is, is that when I\ntry to invoke that through bc,\n\n240\n00:13:04.859 --> 00:13:06.617\nit was freaking out on me.\n\n241\n00:13:06.617 --> 00:13:09.085\nIt didn't know what to do with\nthat because it didn't like that.\n\n242\n00:13:09.085 --> 00:13:13.493\nApparently it does not like capitalized\nletters as variables or anything around\n\n243\n00:13:13.493 --> 00:13:17.200\na capital, just avoid capitalization\nat all when it comes to this.\n\n244\n00:13:17.200 --> 00:13:20.450\nThis is my full on warning,\nyour scripts will freak out, and\n\n245\n00:13:20.450 --> 00:13:23.842\nyou'll be scratching your head going,\nI don't understand.\n\n246\n00:13:23.842 --> 00:13:28.215\nI was even looking at examples that were\nalmost identical to what I had built, and\n\n247\n00:13:28.215 --> 00:13:30.351\ntheir's was working and mine was not.\n\n248\n00:13:30.351 --> 00:13:31.570\nI couldn't figure it out.\n\n249\n00:13:31.570 --> 00:13:33.601\nIt was the stinking capitals.\n\n250\n00:13:33.601 --> 00:13:37.477\nSo if you have capital\nvariables in your BAS script,\n\n251\n00:13:37.477 --> 00:13:41.543\nyou might wanna convert them\nto lowercase variables.\n\n252\n00:13:41.543 --> 00:13:47.601\nEasily done, VAR1 equals var1,\nalright, or something like that.\n\n253\n00:13:47.601 --> 00:13:52.305\nAnd var1 equals one or var1 equals $VAR1,\n\n254\n00:13:52.305 --> 00:13:56.169\nthen that's the easiest way to do it.\n\n255\n00:13:56.169 --> 00:13:59.129\nDo something like that and then use\nthose variables inside of your script.\n\n256\n00:13:59.129 --> 00:14:02.371\nOtherwise it's not gonna be a good time,\nand you're gonna be pulling your eyes out\n\n257\n00:14:02.371 --> 00:14:04.562\ngoing, I hate scripting,\nit's the worst thing ever.\n\n258\n00:14:04.562 --> 00:14:08.723\nIt can be frustrating, as little\nthings like that can snag you up and\n\n259\n00:14:08.723 --> 00:14:10.111\nbe a stumbling block.\n\n260\n00:14:10.111 --> 00:14:13.293\nBut thank goodness I figured\nout what was going on and\n\n261\n00:14:13.293 --> 00:14:16.990\nI can warn you against that,\nand we can move along amicably.\n\n262\n00:14:16.990 --> 00:14:18.244\n[LAUGH]\n>> Well, Daniel,\n\n263\n00:14:18.244 --> 00:14:19.522\ndon't mince words on this.\n\n264\n00:14:19.522 --> 00:14:21.460\nTell me what you really think on this one.\n\n265\n00:14:21.460 --> 00:14:23.062\n>> Yeah, I know, right.\n\n266\n00:14:23.062 --> 00:14:25.134\nIt was a little annoying,\nI'm not gonna lie.\n\n267\n00:14:25.134 --> 00:14:28.029\nI worked for\nover an hour debugging that script.\n\n268\n00:14:28.029 --> 00:14:29.778\n>> [LAUGH]\n>> And it came down to stinking\n\n269\n00:14:29.778 --> 00:14:30.814\ncapital letters.\n\n270\n00:14:30.814 --> 00:14:32.416\nIt was a lot of fun.\n\n271\n00:14:32.416 --> 00:14:33.531\nYou know what though.\n\n272\n00:14:33.531 --> 00:14:37.071\nI learned something that I didn't know.\n\n273\n00:14:37.071 --> 00:14:39.277\nNow I get to pass that\nknowledge along to you guys.\n\n274\n00:14:39.277 --> 00:14:40.900\n>> That's great.\nThat's one of our core values, right?\n\n275\n00:14:40.900 --> 00:14:43.917\nFacing challenges with optimism,\nand we did learn how to do this.\n\n276\n00:14:43.917 --> 00:14:45.865\nNow Daniel, everything you've shown us so\n\n277\n00:14:45.865 --> 00:14:47.976\nfar works great from\nthe terminal line itself.\n\n278\n00:14:47.976 --> 00:14:51.516\nBut the idea though behind\nthe BAS calculator, right,\n\n279\n00:14:51.516 --> 00:14:54.691\nis to deal with actually\nuse it inside of scripts.\n\n280\n00:14:54.691 --> 00:14:57.320\nAnd Daniel, you're gonna actually\nshow us some examples of what we're\n\n281\n00:14:57.320 --> 00:14:58.231\ntalking about here.\n\n282\n00:14:58.231 --> 00:15:01.545\n>> Yeah, I went ahead and\nI created some example scripts for us so\n\n283\n00:15:01.545 --> 00:15:04.349\nyou don't have to watch me\nbang away at a keyboard and\n\n284\n00:15:04.349 --> 00:15:08.204\ntry to figure this stuff out and\nfumble around with my horrible typing.\n\n285\n00:15:08.204 --> 00:15:09.469\nSo that's gonna help us.\n\n286\n00:15:09.469 --> 00:15:10.932\nSo what we're gonna do is we're\ngonna take a look at them.\n\n287\n00:15:10.932 --> 00:15:13.603\nWe're gonna see how they operate and\nwhat's going on and\n\n288\n00:15:13.603 --> 00:15:14.890\nthen see what they output.\n\n289\n00:15:14.890 --> 00:15:15.924\nSo let's do that.\n\n290\n00:15:15.924 --> 00:15:18.223\nLet me quit out of the good old bc here.\n\n291\n00:15:18.223 --> 00:15:21.310\nSo it just quits and\nI'll clear the screen.\n\n292\n00:15:21.310 --> 00:15:25.732\nAnd you'll notice,\nI'm in my math directory.\n\n293\n00:15:25.732 --> 00:15:28.018\nThat's where I keep all my math scripts.\n\n294\n00:15:28.018 --> 00:15:30.664\nAnd if I do an ls,\nI've got a few scripts in here.\n\n295\n00:15:30.664 --> 00:15:33.604\nSome I was playing around with in\nthe other shows, these are the ones\n\n296\n00:15:33.604 --> 00:15:36.921\nthat if you watch those shows I mentioned,\nbut we didn't actually look at.\n\n297\n00:15:36.921 --> 00:15:38.767\nSo we're gonna look at them today.\n\n298\n00:15:38.767 --> 00:15:44.084\nLet's start off with bc.script.sh and\nsee what's going on in there.\n\n299\n00:15:44.084 --> 00:15:51.168\nSo I will nano bc_script.sh and\nlet's see what's happening here.\n\n300\n00:15:51.168 --> 00:15:55.150\nSo, $VAR1 is being executed, right?\n\n301\n00:15:55.150 --> 00:15:58.674\nI'm saying I'm putting a value into $VAR1,\n\n302\n00:15:58.674 --> 00:16:02.649\nwell notice that that value\nis coming from a command.\n\n303\n00:16:02.649 --> 00:16:05.145\nThat's something we've seen in previous\nepisodes as well, how to do that.\n\n304\n00:16:05.145 --> 00:16:08.021\nThat's what the dollar sign,\nopen parenthesis is.\n\n305\n00:16:08.021 --> 00:16:13.180\nThe command will be echo and\nit's echoing this thing right here.\n\n306\n00:16:13.180 --> 00:16:15.153\nNow what is this?\n\n307\n00:16:15.153 --> 00:16:18.019\nNow, remember I said that bc\nis a programming language.\n\n308\n00:16:18.019 --> 00:16:22.361\nRemember when we type bc, we jumped into\nit and I was able to throw commands at it.\n\n309\n00:16:22.361 --> 00:16:23.231\nIt interpreted those commands.\n\n310\n00:16:23.231 --> 00:16:25.111\nThings like scale, right?\n\n311\n00:16:25.111 --> 00:16:26.504\nWhat do I see here?\n\n312\n00:16:26.504 --> 00:16:30.067\nI see scale=4,\njust like what we saw before.\n\n313\n00:16:30.067 --> 00:16:35.824\nSo what I'm doing is I'm putting inside of\nquotations marks some of the options and\n\n314\n00:16:35.824 --> 00:16:38.553\nexpressions that I want to put into bc.\n\n315\n00:16:38.553 --> 00:16:43.083\nSo I'm making sure that I'm letting\nknow my variable know that I'm reading\n\n316\n00:16:43.083 --> 00:16:46.621\nthe output from a command by\ndollar sign open parenthesis,\n\n317\n00:16:46.621 --> 00:16:49.894\ninside of that is going to be\nthe things that go into it.\n\n318\n00:16:49.894 --> 00:16:54.209\nAnd you'll notice I'm using the pipe\nredirector to go into bc, so\n\n319\n00:16:54.209 --> 00:16:58.540\nit's gonna take these values,\nand it's gonna push them into bc.\n\n320\n00:16:58.540 --> 00:17:03.577\nRemember with the pipe operator, you're\ntaking the standard output of one command,\n\n321\n00:17:03.577 --> 00:17:08.338\nor whatever that is, and you're putting\nthe command here, in this case is echo.\n\n322\n00:17:08.338 --> 00:17:12.384\nSo you're echoing that output,\nand that output is this.\n\n323\n00:17:12.384 --> 00:17:16.006\nAnd I'm piping that into the standard\ninput of the bc command.\n\n324\n00:17:16.006 --> 00:17:17.806\nSo, it's a little more complex, but\n\n325\n00:17:17.806 --> 00:17:20.338\nif you've been watching all\nthe episodes up to here,\n\n326\n00:17:20.338 --> 00:17:24.074\nnothing here should be a huge surprise,\nyou should see how it's working out.\n\n327\n00:17:24.074 --> 00:17:27.170\nSo I'm taking the standard\noutput of echo and\n\n328\n00:17:27.170 --> 00:17:30.274\nI'm piping it into\nthe standard input of bc.\n\n329\n00:17:30.274 --> 00:17:34.831\nAnd then we're doing another command which\nis echo with this string of characters\n\n330\n00:17:34.831 --> 00:17:38.411\nplus referencing our variable\nthat we're creating with that.\n\n331\n00:17:38.411 --> 00:17:40.524\nSo, if we run this command,\n\n332\n00:17:40.524 --> 00:17:45.818\nit should basically what it should do\nis use bc to do this math equation.\n\n333\n00:17:45.818 --> 00:17:50.307\nAnd then take that math equation and\nput it inside our variable VAR1, okay.\n\n334\n00:17:50.307 --> 00:17:55.169\nNow I know I've already told you don't\nuse capitalized letters when you're\n\n335\n00:17:55.169 --> 00:17:58.851\nworking with bc, that's really for\na special occasion.\n\n336\n00:17:58.851 --> 00:18:01.193\nI can get away with it here,\nI know I'm breaking my own laws.\n\n337\n00:18:01.193 --> 00:18:03.187\n>> [LAUGH]\n>> Don't worry, don't freak out,\n\n338\n00:18:03.187 --> 00:18:04.338\nI can change that if I want.\n\n339\n00:18:04.338 --> 00:18:06.475\nAnd you know what?\nJust for consistency, so\n\n340\n00:18:06.475 --> 00:18:09.909\nthat I'm not lying to you guys,\nwe'll change that.\n\n341\n00:18:09.909 --> 00:18:13.670\nWe'll say var1, we'll go over here and\n\n342\n00:18:13.670 --> 00:18:17.542\nwe'll change that to var1, there we go.\n\n343\n00:18:17.542 --> 00:18:20.479\nAnd it would've worked that way,\nand I know I've run this script.\n\n344\n00:18:20.479 --> 00:18:21.361\nIt actually works.\n\n345\n00:18:21.361 --> 00:18:24.146\nAnd that's why I was getting\nhung up with my other script.\n\n346\n00:18:24.146 --> 00:18:28.069\nWe'll see why those capitalizations\nactually matter when we get to the last\n\n347\n00:18:28.069 --> 00:18:29.486\nscript on our plate today.\n\n348\n00:18:29.486 --> 00:18:31.309\nBut for here, I've changed it for you.\n\n349\n00:18:31.309 --> 00:18:34.230\nBut just know, for here,\nit would've actually worked.\n\n350\n00:18:34.230 --> 00:18:35.561\nI have tested it and it is approved.\n\n351\n00:18:35.561 --> 00:18:37.112\n[LAUGH]\n>> Yeah, it's probably a great idea\n\n352\n00:18:37.112 --> 00:18:39.349\nthough to pick one way and\nto stay consistent to it.\n\n353\n00:18:39.349 --> 00:18:42.031\nThat way, you're not trying to guess,\nand you're not trying to worry about it.\n\n354\n00:18:42.031 --> 00:18:43.906\nIf we've already told you that hey,\n\n355\n00:18:43.906 --> 00:18:46.454\nwe know that it works with\nthe lowercase letters.\n\n356\n00:18:46.454 --> 00:18:48.555\nAnd if you keep them all lowercase,\nyou'll be fine.\n\n357\n00:18:48.555 --> 00:18:51.896\nThen you don't have to guess,\nlike do I need to use uppercase or not?\n\n358\n00:18:51.896 --> 00:18:55.333\nJust keep it one way, and\neven though both ways may work at times.\n\n359\n00:18:55.333 --> 00:18:57.678\nYou'll actually see sometimes,\nboth ways are not gonna work.\n\n360\n00:18:57.678 --> 00:19:00.499\nSo just stick with one and\nsay keep the lowercase.\n\n361\n00:19:00.499 --> 00:19:02.460\nYou'll probably be better off by doing it.\n\n362\n00:19:02.460 --> 00:19:04.287\n>> Yeah.\nRonnie's absolutely right.\n\n363\n00:19:04.287 --> 00:19:09.132\nStay consistent as possible, and that way,\nyou're not going, well this is var1,\n\n364\n00:19:09.132 --> 00:19:11.508\nbut remember case matters a lot of times.\n\n365\n00:19:11.508 --> 00:19:13.705\n>> [LAUGH]\n>> So just keep that in mind and\n\n366\n00:19:13.705 --> 00:19:15.408\nstay as consistent as possible.\n\n367\n00:19:15.408 --> 00:19:16.848\nSo that's what I'm doing here.\n\n368\n00:19:16.848 --> 00:19:19.814\nLet's go ahead and\nwe'll save this and we'll exit.\n\n369\n00:19:19.814 --> 00:19:21.277\nAnd I'll see what this actually does.\n\n370\n00:19:21.277 --> 00:19:26.652\nHopefully it does that division\nproblem for me and returns the value.\n\n371\n00:19:26.652 --> 00:19:29.390\nSo if I run my script,\nactually if I do an ls,\n\n372\n00:19:29.390 --> 00:19:32.353\nyou'll notice that my\nscripts aren't green.\n\n373\n00:19:32.353 --> 00:19:33.601\nIf do an ls -l,\n\n374\n00:19:33.601 --> 00:19:39.562\nyou'll see that some of them don't\nhave the execute modifier turned on.\n\n375\n00:19:39.562 --> 00:19:41.941\nSo I gotta do my chmod\non this script here.\n\n376\n00:19:41.941 --> 00:19:47.595\nI'll do chmod +x, just for\nmyself and the usergroup,\n\n377\n00:19:47.595 --> 00:19:51.694\nand that was called, bc_script.sh.\n\n378\n00:19:51.694 --> 00:19:54.211\nNow it should be executable,\n\n379\n00:19:54.211 --> 00:19:59.861\nrun that guy with the ./bc_script.sh and\nit gives me the same.\n\n380\n00:19:59.861 --> 00:20:02.753\nYou'll notice that's the exact\nsame calculation that we,\n\n381\n00:20:02.753 --> 00:20:06.042\nthe last one we did with the floating\npoint integer when we were just in\n\n382\n00:20:06.042 --> 00:20:07.871\nthe actual bc itself playing around.\n\n383\n00:20:07.871 --> 00:20:11.121\nIt gives us the same exact answer and\njust works inside of a script.\n\n384\n00:20:11.121 --> 00:20:15.433\nSo now all I have to do instead of\ngoing into bc, scale=4, this, that and\n\n385\n00:20:15.433 --> 00:20:18.935\nthe other, and\nmake all of these different modifications.\n\n386\n00:20:18.935 --> 00:20:21.875\nI just do that inside of the script and\ncall the script, and\n\n387\n00:20:21.875 --> 00:20:23.624\nit automates that process for me.\n\n388\n00:20:23.624 --> 00:20:25.401\nSo very, very nice way to go.\n\n389\n00:20:25.401 --> 00:20:28.302\nLet's see what else we have\non the plate here, Ronald.\n\n390\n00:20:28.302 --> 00:20:29.764\nMoving right along.\n\n391\n00:20:29.764 --> 00:20:33.259\nSo let's take a look at another\nscript that I have available for us.\n\n392\n00:20:33.259 --> 00:20:36.104\nI've already opened it up, so\nlet's jump to my screen here real quick.\n\n393\n00:20:36.104 --> 00:20:39.261\nThis is another bc type script.\n\n394\n00:20:39.261 --> 00:20:42.773\nSome stuff should look familiar, but\nthere's a few other things going on here.\n\n395\n00:20:42.773 --> 00:20:45.489\nSo what's happening is I'm\ndeclaring some variables.\n\n396\n00:20:45.489 --> 00:20:50.551\nAnd again, for consistency's sake,\nI'll lower case those guys for us.\n\n397\n00:20:50.551 --> 00:20:55.977\nLet's see here, var1 and var2.\n\n398\n00:20:55.977 --> 00:21:00.376\nSo I'm just basically saying var1=5 and\nvar2=4.\n\n399\n00:21:00.376 --> 00:21:03.279\nRight and I've actually even\ncommented this script for us.\n\n400\n00:21:03.279 --> 00:21:07.495\nIt says calculate one variable divided\nby the other and then echo the results.\n\n401\n00:21:07.495 --> 00:21:10.380\nSo, what's going on here?\n\n402\n00:21:10.380 --> 00:21:14.070\nWell, instead of saying\nthese are the results,\n\n403\n00:21:14.070 --> 00:21:16.868\nremember we can do things like read.\n\n404\n00:21:16.868 --> 00:21:20.903\nSo if I wanted to, I could read into those\nvariables and create whatever I want,\n\n405\n00:21:20.903 --> 00:21:21.997\nget that user input.\n\n406\n00:21:21.997 --> 00:21:24.819\nBut here I'm just declaring them for\nsake of ease.\n\n407\n00:21:24.819 --> 00:21:29.657\nBut down here, in VAR3,\nalmost identical to the script that we\n\n408\n00:21:29.657 --> 00:21:33.793\nsaw before with the first\nbc_script.sh that we did.\n\n409\n00:21:33.793 --> 00:21:38.656\nIt says VAR3=$(echo.\n\n410\n00:21:38.656 --> 00:21:40.893\nThen it gives me that scale=4.\n\n411\n00:21:40.893 --> 00:21:44.956\nYou also notice I have this\nlittle semicolon here.\n\n412\n00:21:44.956 --> 00:21:46.581\nSemicolons usually delimits.\n\n413\n00:21:46.581 --> 00:21:50.147\nThey're like a separator for commands.\n\n414\n00:21:50.147 --> 00:21:51.087\nSo that's why I have that in there.\n\n415\n00:21:51.087 --> 00:21:52.629\nI think it's in the other script as well.\n\n416\n00:21:52.629 --> 00:21:55.990\nSo I'm separating these two\nthings out from each other,\n\n417\n00:21:55.990 --> 00:21:57.961\ninside of the same block of text.\n\n418\n00:21:57.961 --> 00:22:01.796\nSo On my little, my little keyboard here.\n\n419\n00:22:01.796 --> 00:22:04.399\nSo then I'm saying $VAR1 divided by $VAR2.\n\n420\n00:22:04.399 --> 00:22:09.916\nSo instead of saying five divided by four,\nI'm saying whatever's in this variable,\n\n421\n00:22:09.916 --> 00:22:13.252\ndivide that by whatever's\nin this other variable.\n\n422\n00:22:13.252 --> 00:22:18.280\nSo we can use variables\nin our shell script.\n\n423\n00:22:18.280 --> 00:22:19.700\nNotice I haven't jumped to BC yet.\n\n424\n00:22:19.700 --> 00:22:23.670\nThat doesn't happen until I hit this pipe.\n\n425\n00:22:23.670 --> 00:22:25.230\nI'm pulling from the script.\n\n426\n00:22:25.230 --> 00:22:27.380\nThe script is to find the variables and\n\n427\n00:22:27.380 --> 00:22:32.050\nthen it's putting that, using that value,\nto throw that in to BC.\n\n428\n00:22:32.050 --> 00:22:36.300\nSo we can use our shell variables that\nwe've defined to put in to our equations.\n\n429\n00:22:36.300 --> 00:22:40.330\nAgain, making things a little easier,\nmore portability, that kind of idea.\n\n430\n00:22:40.330 --> 00:22:45.420\nSo then we use BC and\nthen we should get our output.\n\n431\n00:22:45.420 --> 00:22:49.589\nI'll go ahead and\nchange these guys to all lower case so\n\n432\n00:22:49.589 --> 00:22:54.757\nthat everything, works even though\nagain I have tested this one and\n\n433\n00:22:54.757 --> 00:22:59.126\nit did work but for consistency,\nwe will be consistent.\n\n434\n00:22:59.126 --> 00:23:02.001\nOne more.\n\n435\n00:23:02.001 --> 00:23:04.816\nThere we go.\nLet's save that and\n\n436\n00:23:04.816 --> 00:23:08.084\nlet's run that guy nano.\n\n437\n00:23:08.084 --> 00:23:09.959\nI'm sorry nano 2bc.\n\n438\n00:23:09.959 --> 00:23:14.041\nNo 1bc.\n\n439\n00:23:14.041 --> 00:23:14.625\nOkay.\n\n440\n00:23:14.625 --> 00:23:15.650\nIf you wanna be that way, we'll do it.\n\n441\n00:23:18.470 --> 00:23:19.980\nThat's fun.\n\n442\n00:23:19.980 --> 00:23:20.600\nSo let's try it again.\n\n443\n00:23:20.600 --> 00:23:21.270\nYou know what?\n\n444\n00:23:22.520 --> 00:23:23.650\nThere's the problem.\n\n445\n00:23:23.650 --> 00:23:25.410\nSee how that happens?\n\n446\n00:23:25.410 --> 00:23:28.881\nThis is why it's important to\nalways check your [INAUDIBLE].\n\n447\n00:23:28.881 --> 00:23:30.620\nWhen you're done writing a script,\n\n448\n00:23:30.620 --> 00:23:32.530\nthe first thing you should\ndo is make it executable.\n\n449\n00:23:32.530 --> 00:23:33.699\nSo let me do that.\nI actually did that\n\n450\n00:23:33.699 --> 00:23:35.001\npurposefully for the show.\n\n451\n00:23:35.001 --> 00:23:37.755\nI know, you're like yeah sure you did.\n\n452\n00:23:37.755 --> 00:23:39.010\n>> [LAUGH]\n>> I did, they were unchecked.\n\n453\n00:23:39.010 --> 00:23:40.870\nI knew they were there,\nI told you about it.\n\n454\n00:23:40.870 --> 00:23:42.960\nI did it to show you that's what happens.\n\n455\n00:23:42.960 --> 00:23:43.810\nYou get problems.\n\n456\n00:23:43.810 --> 00:23:49.008\nSo, make sure you run your\nchmod +x against your script.\n\n457\n00:23:49.008 --> 00:23:51.513\n2bc.\n\n458\n00:23:51.513 --> 00:23:53.670\nThere we go.\n\n459\n00:23:53.670 --> 00:23:56.001\nNow we should be able to do it.\n\n460\n00:23:56.001 --> 00:24:01.000\nThere we go and it answers my math\nproblem so it does the math for me.\n\n461\n00:24:01.000 --> 00:24:02.042\nAll good.\n\n462\n00:24:02.042 --> 00:24:04.100\nThat's what I wanted to see.\n\n463\n00:24:04.100 --> 00:24:05.020\nVery very very nice.\n\n464\n00:24:05.020 --> 00:24:08.970\nAll right so I've got one more example for\nus to look through and\n\n465\n00:24:08.970 --> 00:24:10.330\nsee what we can do with this.\n\n466\n00:24:10.330 --> 00:24:12.420\nThis is the mac daddy\nof all scripts today.\n\n467\n00:24:12.420 --> 00:24:17.320\nThis is the one that took me an hour to\nfigure out that the capitalization was\n\n468\n00:24:17.320 --> 00:24:17.910\ngiving me an issue.\n\n469\n00:24:17.910 --> 00:24:20.640\nI thank Mr. Ronnie here for\nlending his eyes to it.\n\n470\n00:24:20.640 --> 00:24:23.460\nHe had a lot of great ideas but\nat the end of the day we-\n\n471\n00:24:23.460 --> 00:24:24.270\n>> Capital letters.\n\n472\n00:24:24.270 --> 00:24:26.250\n>> The capital letters\nis what was killing us.\n\n473\n00:24:26.250 --> 00:24:27.000\nSo let's take a look at this.\n\n474\n00:24:27.000 --> 00:24:28.126\nWhat are we talking about here right?\n\n475\n00:24:28.126 --> 00:24:33.209\nAnd Ronnie, I remember he was\nasking me about complexity.\n\n476\n00:24:33.209 --> 00:24:37.975\nAnd not in the fact of, you know, are we\ngonna do advanced PhD type math, but\n\n477\n00:24:37.975 --> 00:24:42.167\nin the fact of what if I have a bunch\nof math to do inside of my script?\n\n478\n00:24:42.167 --> 00:24:45.980\nIs there an easier way to do it,\nand yes, with bc there is.\n\n479\n00:24:45.980 --> 00:24:47.555\nSo let's take a look\nat how we can do that,\n\n480\n00:24:47.555 --> 00:24:49.042\nlet's look at this script that I have.\n\n481\n00:24:49.042 --> 00:24:53.174\nI will clear, and\nif we do ls we've got one more script, and\n\n482\n00:24:53.174 --> 00:24:58.467\nthat's this 3bc.sh I'm gonna go ahead and\nchmod that so I don't forget,\n\n483\n00:24:58.467 --> 00:25:02.875\nand get tripped up on my own thing\nthat I meant to trip myself up.\n\n484\n00:25:02.875 --> 00:25:03.959\nAnd it worked very well.\n\n485\n00:25:03.959 --> 00:25:06.795\nSo dot x 3bc.\n\n486\n00:25:06.795 --> 00:25:12.334\nThere we go, and then we'll nano 3bc.\n\n487\n00:25:12.334 --> 00:25:15.166\nSo inside of here,\nlet's talk a look to see how it's working.\n\n488\n00:25:15.166 --> 00:25:20.063\nSo we're declaring some variables\nall loading point integer variables,\n\n489\n00:25:20.063 --> 00:25:24.336\neven though we're not doing\nthe declare thing we don't have to,\n\n490\n00:25:24.336 --> 00:25:26.450\nthe bc program will do it for us.\n\n491\n00:25:27.710 --> 00:25:30.750\nSo, looking through here I say,\nuse inline input redirection.\n\n492\n00:25:30.750 --> 00:25:35.146\nThis is one of the redirectors, we didn't\ncover it the other day because it's not\n\n493\n00:25:35.146 --> 00:25:39.286\nused a lot and it's a very difficult thing\nto use which is why I didn't cover it\n\n494\n00:25:39.286 --> 00:25:42.980\nin the other redirectors, and\nI left it for here because this is one of\n\n495\n00:25:42.980 --> 00:25:46.458\nthe ways in which you would want\nto use this in line redirection.\n\n496\n00:25:46.458 --> 00:25:51.796\nSo what we're doing is we're saying\nwe have a command, I want to redirect\n\n497\n00:25:51.796 --> 00:25:56.670\ninput from somewhere else into it\ninstead of output to it, right?\n\n498\n00:25:56.670 --> 00:25:59.500\nWe're redirecting input to it.\n\n499\n00:25:59.500 --> 00:26:00.370\nHow does that work?\n\n500\n00:26:00.370 --> 00:26:01.240\nCrazy, crazy stuff.\n\n501\n00:26:02.260 --> 00:26:03.130\nLet's see.\n\n502\n00:26:03.130 --> 00:26:08.240\nIf you look at this $var5, and you'll\nnotice all these variables are lowercase.\n\n503\n00:26:08.240 --> 00:26:10.376\nAnd that was our It's our trouble.\n\n504\n00:26:10.376 --> 00:26:15.288\nThis $var5 equals, and then we start\na command, this looks very very normal,\n\n505\n00:26:15.288 --> 00:26:19.709\njust like when we create normal\nvariables inside of bash shell, right?\n\n506\n00:26:19.709 --> 00:26:23.041\nBut this time I'm starting with\nbc instead of piping into bc.\n\n507\n00:26:23.041 --> 00:26:28.605\nKinda going the opposite way, I'm saying\nbc is the command I wanna run and\n\n508\n00:26:28.605 --> 00:26:31.800\nthen I want it to get it's input, right?\n\n509\n00:26:31.800 --> 00:26:36.520\nBecause if I just leave bc, it'll run bc,\nand not do anything, it'll be kinda stuck.\n\n510\n00:26:36.520 --> 00:26:39.270\nI want to give it stuff to do.\n\n511\n00:26:39.270 --> 00:26:44.340\nSo that's what this double\narrow sign is here for.\n\n512\n00:26:44.340 --> 00:26:50.251\nThat's our input redirect,\nour inline redirector.\n\n513\n00:26:50.251 --> 00:26:51.240\nAnd then this EOF, this technically\ncan be anything you want it to be.\n\n514\n00:26:51.240 --> 00:26:58.417\nYou can name it foo or bar or toes, or\nanything you feel like, that's fine.\n\n515\n00:26:58.417 --> 00:27:02.283\nWhat's it's saying is whatever that is,\nwhatever that character,\n\n516\n00:27:02.283 --> 00:27:03.470\nI tend to make it EOF.\n\n517\n00:27:03.470 --> 00:27:07.376\nMost people tend to make it EOF,\nbecause that stands for End Of File.\n\n518\n00:27:07.376 --> 00:27:13.167\nSo when I'm done, I'm gonna have a line\nwith only this string of characters on it.\n\n519\n00:27:13.167 --> 00:27:15.584\nAnd that lets you know we've come\nto the end, and you can exit.\n\n520\n00:27:15.584 --> 00:27:17.400\nAll right?\nSo that's what's going on there.\n\n521\n00:27:19.090 --> 00:27:20.720\nSo now we move down into it.\n\n522\n00:27:20.720 --> 00:27:23.580\nNow the cool thing is when you do it\nthis way, you do it line by line.\n\n523\n00:27:23.580 --> 00:27:28.925\nBasically create a line by\nline structure that is going\n\n524\n00:27:28.925 --> 00:27:34.170\nto be piped into, or\nredirected into the bc command.\n\n525\n00:27:34.170 --> 00:27:37.800\nNow I said piped because this is,\npipe does this it's kind of a different.\n\n526\n00:27:37.800 --> 00:27:40.880\nAgain six ways to do the exact\nsame thing they all have\n\n527\n00:27:40.880 --> 00:27:43.320\ntheir own little quirks and\nthings like that.\n\n528\n00:27:43.320 --> 00:27:46.400\nSo that's why we're using this one for\nthis specific scale.\n\n529\n00:27:46.400 --> 00:27:49.459\nSo we're making scale equals four.\n\n530\n00:27:49.459 --> 00:27:54.917\nWe have a variable foo1 = ($var1 * $var2).\n\n531\n00:27:54.917 --> 00:27:56.833\nNow where's it getting $var1 and $var2?\n\n532\n00:27:56.833 --> 00:27:58.501\nIt's getting that from our shell.\n\n533\n00:27:58.501 --> 00:28:00.127\nOur shell variables.\n\n534\n00:28:00.127 --> 00:28:01.584\nNot pulling it from bc.\n\n535\n00:28:01.584 --> 00:28:03.584\nBut remember bc can read\nthose shell variables.\n\n536\n00:28:03.584 --> 00:28:05.459\nVery very cool item there.\n\n537\n00:28:05.459 --> 00:28:08.667\nAnd then I'm creating another expression.\n\n538\n00:28:08.667 --> 00:28:11.209\nThat's gonna be the value\nof another variable.\n\n539\n00:28:11.209 --> 00:28:15.730\nSo I'm creating foo2 =\n($var3 times $var4).\n\n540\n00:28:15.730 --> 00:28:18.810\nSo now I've got two expressions,\nso multiple expressions,\n\n541\n00:28:18.810 --> 00:28:22.484\nmultiple mathematical equations going\non instead of just one at a time and\n\n542\n00:28:22.484 --> 00:28:24.751\nthen having,\nit would make typing too much.\n\n543\n00:28:24.751 --> 00:28:28.443\nSo then I say, foo1 + foo2 and\nthen EOF, end of file,\n\n544\n00:28:28.443 --> 00:28:33.475\ncuz that's the last command I wanna\ngive to bc and close my parenthesis out,\n\n545\n00:28:33.475 --> 00:28:36.876\ndon't forget to do that or\nthis won't work at all.\n\n546\n00:28:36.876 --> 00:28:38.605\nYou get a syntax error.\n\n547\n00:28:38.605 --> 00:28:40.600\n[INAUDIBLE] script manual.\n\n548\n00:28:40.600 --> 00:28:42.510\nThere's more, a little bit.\n\n549\n00:28:42.510 --> 00:28:45.280\nSo then we just echo\nwhat the calculation is.\n\n550\n00:28:45.280 --> 00:28:49.000\nGive me the answer to all these\ncalculations that are happening.\n\n551\n00:28:49.000 --> 00:28:51.667\nSo I'm basically doing what,\nI'm doing three calculations.\n\n552\n00:28:51.667 --> 00:28:54.129\nI'm doing $var1 times $var2.\n\n553\n00:28:54.129 --> 00:28:55.890\nI'm doing $var3 times $var4.\n\n554\n00:28:55.890 --> 00:28:59.414\nAnd I'm saving that into each of\nthem having their own variable, and\n\n555\n00:28:59.414 --> 00:29:01.680\nthen I'm adding those variable together.\n\n556\n00:29:01.680 --> 00:29:03.980\nSo whatever the output of this is,\nis gonna be foo1,\n\n557\n00:29:03.980 --> 00:29:06.860\nwhatever the output of this is,\nis gonna be foo2.\n\n558\n00:29:06.860 --> 00:29:11.010\nThen add those two things together and\necho that result.\n\n559\n00:29:11.010 --> 00:29:15.044\nLittle bit of time and effort to put\ninto this script, but hopefully now,\n\n560\n00:29:15.044 --> 00:29:17.335\nwhen we run it, we will see about it here.\n\n561\n00:29:17.335 --> 00:29:19.333\nAnd, let's run that guy and\nsee what it does.\n\n562\n00:29:19.333 --> 00:29:23.542\nSo we'll, that was three, here we go.\n\n563\n00:29:23.542 --> 00:29:27.725\nAnd, it gives me the echo of\ncomplex calculation completed,\n\n564\n00:29:27.725 --> 00:29:31.588\nthe answer is 79.3494,\nso very complex math, or\n\n565\n00:29:31.588 --> 00:29:35.542\nat least a lot of complexity\nto the math that we're doing.\n\n566\n00:29:35.542 --> 00:29:39.141\nIt does for me a lot whole easier than\nif I had to type all that stuff out or\n\n567\n00:29:39.141 --> 00:29:41.670\nuse pipe redirectors and create variables.\n\n568\n00:29:41.670 --> 00:29:43.410\nIt'd be a lot of work.\n\n569\n00:29:43.410 --> 00:29:47.060\nThat was a simpler way to do it,\nredirect all that stuff into bc,\n\n570\n00:29:47.060 --> 00:29:49.460\nlet it do the work and pump it out.\n\n571\n00:29:49.460 --> 00:29:51.450\nLet the shell take care of the rest.\n\n572\n00:29:51.450 --> 00:29:54.111\n>> Yeah, I can see where this actually\ndoes help out with complex math problems\n\n573\n00:29:54.111 --> 00:29:56.417\nthat you may encounter,\nespecially when you need to scripting.\n\n574\n00:29:56.417 --> 00:30:00.731\nYou add in multiple values or subtract\nmultiple values and be able to come up\n\n575\n00:30:00.731 --> 00:30:04.583\nwith a product of all those values\nas well, where it does help out.\n\n576\n00:30:04.583 --> 00:30:08.012\nUnlike the ideas of what we looked\nat earlier about the let command and\n\n577\n00:30:08.012 --> 00:30:11.619\nthen the expression command as well,\nwhere we could do a few things, but\n\n578\n00:30:11.619 --> 00:30:15.667\nnot with the complex numbers, the floating\npoint numbers that we talked about.\n\n579\n00:30:15.667 --> 00:30:18.580\nAnd not in the manner\nthat we just showed you.\n\n580\n00:30:18.580 --> 00:30:22.170\nWe actually took the whole thing and\ncame up with one particular value.\n\n581\n00:30:22.170 --> 00:30:23.550\nDaniel, that's a lot of great stuff for\nus.\n\n582\n00:30:23.550 --> 00:30:27.990\nAnd it also means that we're starting to\nsee that, man, we can do stuff like this,\n\n583\n00:30:27.990 --> 00:30:29.700\njust with simple values.\n\n584\n00:30:29.700 --> 00:30:32.620\nWell, what can we do as we actually\nget one, more complex values?\n\n585\n00:30:32.620 --> 00:30:34.650\nThe same principles will still apply.\n\n586\n00:30:34.650 --> 00:30:38.700\nSo learning these foundational,\nyou know, ideas of using bc in what\n\n587\n00:30:38.700 --> 00:30:43.240\nwe do is really gonna help out once we\nstart the scripting process and we do\n\n588\n00:30:43.240 --> 00:30:47.440\nagain end up with multiple values, so it's\na great skill for us to develop right now.\n\n589\n00:30:47.440 --> 00:30:48.500\n>> Yeah, definitely.\n\n590\n00:30:48.500 --> 00:30:50.950\nAnd then you can create your own\nscripts that does math for you so\n\n591\n00:30:50.950 --> 00:30:54.280\nthat you don't have to do it yourself,\nso that's always a nice feature of that.\n\n592\n00:30:54.280 --> 00:30:57.890\nOther than that though,\nthat's basically what you're gonna do.\n\n593\n00:30:57.890 --> 00:30:59.770\nI would almost tell you,\n\n594\n00:30:59.770 --> 00:31:02.300\nyou're gonna use two things when it\ncomes to math inside of scripts.\n\n595\n00:31:02.300 --> 00:31:04.850\nIt's either gonna be that dollar\nsign double parentheses for\n\n596\n00:31:04.850 --> 00:31:09.460\nquick calculations, or\nyou're gonna call bc in the order.\n\n597\n00:31:09.460 --> 00:31:13.507\nHave it do the more complex stuff and\nthen exit back out to your script and\n\n598\n00:31:13.507 --> 00:31:14.458\nrun from there.\n\n599\n00:31:14.458 --> 00:31:18.105\nSo, that's really the two big guys you're\ngoing to be using when it comes inside of\n\n600\n00:31:18.105 --> 00:31:18.792\nyour scripts.\n\n601\n00:31:18.792 --> 00:31:21.626\nOther than that,\nthat's my math class for you guys.\n\n602\n00:31:21.626 --> 00:31:25.334\n>> Excellent so there it is for,\nwell, Math inside of Bash.\n\n603\n00:31:25.334 --> 00:31:29.334\nMake sure you take a look\nat these videos over again.\n\n604\n00:31:29.334 --> 00:31:33.688\nEven though the concepts by themselves are\nfairly simple, putting it all together Is\n\n605\n00:31:33.688 --> 00:31:37.800\nwhat we're really trying to do because\nwe're gonna head into more complex thing\n\n606\n00:31:37.800 --> 00:31:41.626\nin working with BASH and scripting as\nwell, so stay tuned for more of that.\n\n607\n00:31:41.626 --> 00:31:44.459\nBut that's a great place for\nus to go and end this episode as well.\n\n608\n00:31:44.459 --> 00:31:47.710\nSo signing off for ITProTV,\nI'm your host Ronny Wong.\n\n609\n00:31:47.710 --> 00:31:48.627\n>> And I'm Daniel Lowery.\n\n610\n00:31:48.627 --> 00:31:50.501\n>> And we'll see you next time.\n\n611\n00:31:50.501 --> 00:31:57.160\n[MUSIC]\n\n",
          "vimeoId": "146522296"
        },
        {
          "description": "In this episode, Ronnie and Daniel introduce how to use functions in BASH scripting.   Functions are used to reduce repetitive nature of scripting when certain tasks are called over and over again, according to the guys.  They show us how functions can be made and then called within our scripts.  Even though we can simply create them within the script, we can also take output of a function and have that output to a variable for uses complex scripts.  Daniel then shows how to create a library of functions and how to call that library within scripts.",
          "length": "2243",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-15-1-functions_in_bash-111715-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-15-1-functions_in_bash-111715-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-15-1-functions_in_bash-111715-1-sm.jpg",
          "title": "Functions in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.662 --> 00:00:15.763\nWelcome to another exciting\nepisode right here on IT PRO TV.\n\n3\n00:00:15.763 --> 00:00:19.848\nI'm your host Ronnie Wong and today we're\ntaking a look at bash and scripting.\n\n4\n00:00:19.848 --> 00:00:23.907\nSpecifically though, heading into\nfunctions, take away that, functions being\n\n5\n00:00:23.907 --> 00:00:27.170\nused in bash, and who better to\nhelp us out than Mr. Daniel Larry.\n\n6\n00:00:27.170 --> 00:00:30.796\nDaniel, you've to help me out here\nwith the idea of what functions\n\n7\n00:00:30.796 --> 00:00:33.149\nactually are and\nwhy do we want to use them.\n\n8\n00:00:33.149 --> 00:00:33.696\n>> Yeah.\n\n9\n00:00:33.696 --> 00:00:35.356\nThat's a great question obviously.\n\n10\n00:00:35.356 --> 00:00:38.170\nRonnie's teeing us up for\ngetting into what functions are.\n\n11\n00:00:38.170 --> 00:00:43.030\nWe have to define these things, and\nthey are very nice and helpful thing for\n\n12\n00:00:43.030 --> 00:00:46.480\nwhen we are creating scripts\ninside of our bash environment.\n\n13\n00:00:46.480 --> 00:00:49.139\nAnd you're saying okay, well everything\nyou've shown me so far has been helpful,\n\n14\n00:00:49.139 --> 00:00:50.156\nat least hopefully it has been.\n\n15\n00:00:50.156 --> 00:00:53.974\nHow does functions make this even\nbetter than what it already is?\n\n16\n00:00:53.974 --> 00:00:58.050\nWell first let's start there,\nlet's define what a function is.\n\n17\n00:00:58.050 --> 00:01:01.925\nBasically a function\nis like a mini script.\n\n18\n00:01:01.925 --> 00:01:05.350\nThat's the idea of what we want\nto get wrapped around our brain.\n\n19\n00:01:05.350 --> 00:01:09.684\nThat it's a little script inside\na script that we already have.\n\n20\n00:01:09.684 --> 00:01:13.079\nNow I don't want you to get confused\nbecause it can seem like things like\n\n21\n00:01:13.079 --> 00:01:15.173\nWhile's and If's and statements of that,\n\n22\n00:01:15.173 --> 00:01:19.090\nthose conditional statements almost\nseem like mini scripts but they're not.\n\n23\n00:01:19.090 --> 00:01:23.199\nThey are just conditions that are\nhappening inside the body of the script.\n\n24\n00:01:23.199 --> 00:01:24.012\nOkay?\n\n25\n00:01:24.012 --> 00:01:28.385\nWith a function, we're actually creating\na block of code that we're gonna give it\n\n26\n00:01:28.385 --> 00:01:32.140\na name, we're gonna give it a block\nof code telling it to do something.\n\n27\n00:01:33.150 --> 00:01:36.380\nAnd then we're gonna close that\ninto its own little sphere and\n\n28\n00:01:36.380 --> 00:01:38.456\nwe're gonna set that inside of our script.\n\n29\n00:01:38.456 --> 00:01:40.930\nAnd then inside of the main\nbody of the script we're\n\n30\n00:01:40.930 --> 00:01:42.580\ngonna be able to call to those functions.\n\n31\n00:01:43.820 --> 00:01:47.030\nAnd say okay now would be\na really good time for\n\n32\n00:01:47.030 --> 00:01:49.490\nme to use that little mini script and\nput it right here.\n\n33\n00:01:49.490 --> 00:01:51.190\nAnd I can do that.\n\n34\n00:01:51.190 --> 00:01:53.440\nI just gotta say okay,\nuse that mini script.\n\n35\n00:01:53.440 --> 00:01:54.700\nAnd there's a way we do it.\n\n36\n00:01:54.700 --> 00:01:58.000\nIt's really easy basically\nyou just give it it's name.\n\n37\n00:01:58.000 --> 00:01:59.045\nSo why would we do that?\n\n38\n00:01:59.045 --> 00:02:03.518\nWell A the number one reason why we would\nuse functions is because it reduces\n\n39\n00:02:03.518 --> 00:02:05.933\nthe amount of code that we have to write.\n\n40\n00:02:05.933 --> 00:02:11.199\nIf I write something that I can use over\nand over again, I'll go wow it'll be nice\n\n41\n00:02:11.199 --> 00:02:16.630\nto create a case statement here, or it'd\nbe nice to create a loop in this section.\n\n42\n00:02:16.630 --> 00:02:20.691\nOr I need to do some math, and I'm going\nto continually do math throughout this\n\n43\n00:02:20.691 --> 00:02:24.276\nscript and essentially the same\nthing just with different numbers.\n\n44\n00:02:24.276 --> 00:02:27.770\nWell I could continue to\nuse the same function.\n\n45\n00:02:27.770 --> 00:02:31.520\nSo I write one function and\nthen give it the variables it needs,\n\n46\n00:02:31.520 --> 00:02:35.320\nfeed that into the function and let the\nfunction work on it, output to the script.\n\n47\n00:02:35.320 --> 00:02:35.978\nAnd there we go.\nAll I\n\n48\n00:02:35.978 --> 00:02:39.121\nhave to do at that point is\njust I have my one function.\n\n49\n00:02:39.121 --> 00:02:41.090\nI work it throughout my script.\n\n50\n00:02:41.090 --> 00:02:42.913\nI'm recalling it over and\nover and over again.\n\n51\n00:02:42.913 --> 00:02:45.873\nSo that I don't have to continually\ntype the same amount of code.\n\n52\n00:02:45.873 --> 00:02:48.671\nThe same stuff over and over again.\n\n53\n00:02:48.671 --> 00:02:52.544\nIt takes that repetitive nature of code\ntyping and throws that out of the window.\n\n54\n00:02:52.544 --> 00:02:56.033\nWe get one spot where we can\ncall to that function and\n\n55\n00:02:56.033 --> 00:02:59.127\nsay that's the block of\ncode I wanna do here.\n\n56\n00:02:59.127 --> 00:03:01.901\nAnd I wanna use that\nsame block of code here.\n\n57\n00:03:01.901 --> 00:03:04.465\nSo over and\nover again we get to reuse code.\n\n58\n00:03:04.465 --> 00:03:06.897\nThat's the number one reason why\nwe would wanna use function.\n\n59\n00:03:06.897 --> 00:03:08.880\nIt just makes our lives easier.\n\n60\n00:03:08.880 --> 00:03:10.810\nAnd because, think about it this way.\n\n61\n00:03:10.810 --> 00:03:16.040\nYou've seen me, I love to leave out things\nlike the dollar sign in my variables.\n\n62\n00:03:16.040 --> 00:03:18.620\nI'm horrible at forgetting about that.\n\n63\n00:03:18.620 --> 00:03:21.120\nAnd the more I have,\nsay I'm writing an if statement.\n\n64\n00:03:21.120 --> 00:03:23.640\nminutes using those variables.\n\n65\n00:03:23.640 --> 00:03:25.830\nI'm gonna forget that somewhere.\n\n66\n00:03:25.830 --> 00:03:29.353\nAnd then I'll probably forget it another\nplace because I continually have to type\n\n67\n00:03:29.353 --> 00:03:31.303\nout everything over and\nover and over again.\n\n68\n00:03:31.303 --> 00:03:35.510\nSo as I continue to forget,\nI run my script and it doesn't work.\n\n69\n00:03:35.510 --> 00:03:37.530\nAnd it says syntax error on line 12.\n\n70\n00:03:37.530 --> 00:03:41.290\nWell now i got to go look at line 12,\nfind my error, and fix it, go back and\n\n71\n00:03:41.290 --> 00:03:43.320\ntry to re-run my script again, and\n\n72\n00:03:43.320 --> 00:03:48.320\nI'll get SYNTAX ERROR on line 27 because\nI forgot something, and I got to go back.\n\n73\n00:03:48.320 --> 00:03:51.659\nWhen all I had to do was write it\none time, made sure it worked,\n\n74\n00:03:51.659 --> 00:03:54.566\nmake it a function, and\nnow I just call the function.\n\n75\n00:03:54.566 --> 00:03:57.620\nI don't have to worry about\naccidentally forgetting something.\n\n76\n00:03:57.620 --> 00:04:01.010\nThat block of code will always work so\nit reduces the amount\n\n77\n00:04:01.010 --> 00:04:05.090\nof errors I'm gonna have as well so forget\nthat repetitive business and forget making\n\n78\n00:04:05.090 --> 00:04:08.420\nerrors all the time, we'll use a function,\nmake sure that works one time and\n\n79\n00:04:08.420 --> 00:04:11.760\nnow I can use it over and over and\nover again inside of my script.\n\n80\n00:04:11.760 --> 00:04:16.040\nNot only that but\nas we'll show here in a little while I can\n\n81\n00:04:16.040 --> 00:04:19.160\nactually create functions that I call\nto that are outside of my script.\n\n82\n00:04:19.160 --> 00:04:22.150\nSo I can create a whole library of\ndifferent functions and use them in all\n\n83\n00:04:22.150 --> 00:04:27.890\nmy scripts, and that's where the real\npower comes in in creating functions.\n\n84\n00:04:27.890 --> 00:04:31.210\n>> Okay, so Daniel,\nwhat I've noticed before though,\n\n85\n00:04:31.210 --> 00:04:35.320\nwhenever I see functions is that they are\npretty much created in two separate ways.\n\n86\n00:04:35.320 --> 00:04:37.304\nOne is,\nyou just name whatever the function is and\n\n87\n00:04:37.304 --> 00:04:40.482\nthen you start listing the commands that\nare gonna follow after that function.\n\n88\n00:04:40.482 --> 00:04:44.604\nThe other one, there was a name and only,\nthere's a set of parentheses afterwards.\n\n89\n00:04:44.604 --> 00:04:47.169\nWhat's that about, and why would I\nchoose to use one over the other?\n\n90\n00:04:47.169 --> 00:04:50.769\n>> Yeah, what they're doing there is,\nit's just basically six of one,\n\n91\n00:04:50.769 --> 00:04:52.090\nhalf a dozen of the other.\n\n92\n00:04:52.090 --> 00:04:53.250\nIt's just, which way do you prefer?\n\n93\n00:04:53.250 --> 00:04:54.370\nEither way is valid.\n\n94\n00:04:54.370 --> 00:04:59.121\nAnd it's just one, really it takes a\nlittle more typing effort to make it work.\n\n95\n00:04:59.121 --> 00:05:01.180\nAnd even that not so much.\n\n96\n00:05:01.180 --> 00:05:03.015\nBut what Ronnie's getting at\nis that there are two ways.\n\n97\n00:05:03.015 --> 00:05:05.431\nNow is there one way that's\nbetter than the other?\n\n98\n00:05:05.431 --> 00:05:08.078\nNope, they do the exact same thing.\n\n99\n00:05:08.078 --> 00:05:11.710\nLike I said, it's just two different\nways to do the exact same thing.\n\n100\n00:05:11.710 --> 00:05:13.490\nSo six in one, half a dozen in the other.\n\n101\n00:05:13.490 --> 00:05:15.579\nYou say tomato, I say tomato.\n\n102\n00:05:15.579 --> 00:05:18.621\nAnd that's basically what\nthe show is going on right there.\n\n103\n00:05:18.621 --> 00:05:22.770\nSo let's take a look at that and\nlet's see how that is.\n\n104\n00:05:22.770 --> 00:05:23.816\nI'll show you on my screen,\n\n105\n00:05:23.816 --> 00:05:26.658\nwe'll play around and show you those\nsyntaxical ways in which we can do this.\n\n106\n00:05:26.658 --> 00:05:33.030\nSo I'll just open,\nI'll say nano in just a plain file.\n\n107\n00:05:33.030 --> 00:05:35.290\nWhy can't, there we go, plain.txt.\n\n108\n00:05:35.290 --> 00:05:40.240\nJust so we can see inside of my text\neditor what Ronnie is talking about.\n\n109\n00:05:40.240 --> 00:05:42.741\nNormally when you create a function\nyou have two different ways in which\n\n110\n00:05:42.741 --> 00:05:43.246\nyou can do it.\n\n111\n00:05:43.246 --> 00:05:48.670\nOne is to use the function command, so\nI am saying I want to create a function.\n\n112\n00:05:48.670 --> 00:05:49.920\nThen I give it a name.\n\n113\n00:05:49.920 --> 00:05:51.432\nAnd then I open a curly brace.\n\n114\n00:05:51.432 --> 00:05:54.194\nI have an area for commands and\nI close that curly brace out.\n\n115\n00:05:54.194 --> 00:05:57.110\nSo it looks a little something like this.\n\n116\n00:05:57.110 --> 00:05:59.390\nSo if I wanted to create\na function I would say,\n\n117\n00:05:59.390 --> 00:06:03.250\nof course we have like bin/bash and\nthen it would something like function1.\n\n118\n00:06:03.250 --> 00:06:09.000\nI m sorry we would say function we're\ncalling the function command and\n\n119\n00:06:09.000 --> 00:06:12.910\nthen I would call it something\nlike we'll call it function one.\n\n120\n00:06:12.910 --> 00:06:15.335\nThat's the name of the function.\n\n121\n00:06:15.335 --> 00:06:19.470\nAnd then, you would open your curly\nbraces, you would put your commands here.\n\n122\n00:06:23.880 --> 00:06:26.140\nAnd and then you would close your\ncurly breaks out, so like that.\n\n123\n00:06:26.140 --> 00:06:28.590\nThat would be us creating\na legitimate function and\n\n124\n00:06:28.590 --> 00:06:31.580\nthat would be the syntactical\nway to do that.\n\n125\n00:06:31.580 --> 00:06:35.002\nThe other way to do it, like I said,\nit's just a little less\n\n126\n00:06:35.002 --> 00:06:39.809\nadministrative effort by you, a little\nless typing, is, I could do it like this.\n\n127\n00:06:39.809 --> 00:06:43.999\nI could say just give it a function name\nso if I wanted to call it function1, and\n\n128\n00:06:43.999 --> 00:06:47.111\nthen do the parentheses like\nRonnie was talking about, so\n\n129\n00:06:47.111 --> 00:06:51.641\nover with these closed parenthesis right\nafter, immediately after, no spacing.\n\n130\n00:06:51.641 --> 00:06:58.630\nSo function name open close parenthesis\nand then the rest is basically the same.\n\n131\n00:06:58.630 --> 00:07:03.317\nOpen curly brace, commands, commands,\n\n132\n00:07:03.317 --> 00:07:08.144\ncommands, and close your curly brace out.\n\n133\n00:07:08.144 --> 00:07:14.600\nThat is the two ways in which you can\ncreate a function inside of a script, so.\n\n134\n00:07:14.600 --> 00:07:17.164\nIf I actually put commands in there and\nstuff,\n\n135\n00:07:17.164 --> 00:07:21.304\nthis would be a script with two functions\nin it, both having the same name,\n\n136\n00:07:21.304 --> 00:07:24.087\nwhich you can do, but\nthat's a dangerous thing.\n\n137\n00:07:24.087 --> 00:07:28.649\nAnd we'll talk about that in just a little\nbit, but right now those are the two ways.\n\n138\n00:07:28.649 --> 00:07:32.090\nI tend to go this way,\njust because it's easier.\n\n139\n00:07:32.090 --> 00:07:34.420\nI don't have to type in\nthe function command.\n\n140\n00:07:34.420 --> 00:07:38.420\nNow you might be thinking,\nyeah, that'd be the way to go.\n\n141\n00:07:38.420 --> 00:07:41.800\nBut you've gotta remember, if you're\nlooking at a script that's not yours, so\n\n142\n00:07:41.800 --> 00:07:45.410\nif you're writing a script and\nother people are gonna look at it,\n\n143\n00:07:45.410 --> 00:07:48.990\nit might be easier to find the functions\nby looking for the function command.\n\n144\n00:07:48.990 --> 00:07:50.394\nSo just remember that.\nIt's not that you can't\n\n145\n00:07:50.394 --> 00:07:53.527\ncomment on it as well, you just put\ncomments in there to make it easy.\n\n146\n00:07:53.527 --> 00:07:58.312\nwere functioning, but the two different\nways why you might use one other the other\n\n147\n00:07:58.312 --> 00:08:01.913\njust to make it easier to see,\nbut normally I use the easy way,\n\n148\n00:08:01.913 --> 00:08:04.408\nbecause it's just less\ntyping on my end and\n\n149\n00:08:04.408 --> 00:08:09.015\nI'm one of the world's worst typist, so\n[LAUGH] That's the easier way for me.\n\n150\n00:08:09.015 --> 00:08:11.851\n>> All right, Daniel, let me ask some\nstandard questions I normally ask about\n\n151\n00:08:11.851 --> 00:08:14.610\nthis, because it does help us understand\nthe syntax a little bit better.\n\n152\n00:08:14.610 --> 00:08:19.500\nWhen we create functions, one, do I\nneed to worry about spaces in the name?\n\n153\n00:08:19.500 --> 00:08:21.238\nTwo, am I worried about case sensitivity?\n\n154\n00:08:21.238 --> 00:08:23.798\nI know that's my favorite question,\nbut I think it helps.\n\n155\n00:08:23.798 --> 00:08:27.023\n>> Yeah, in the name,\nyou wanna stay away from spaces,\n\n156\n00:08:27.023 --> 00:08:29.108\nyou can probably get away with it.\n\n157\n00:08:29.108 --> 00:08:34.628\nI normally don't do spaces just because A,\nit doesn't take them.\n\n158\n00:08:34.628 --> 00:08:37.558\nI'm pretty sure it doesn't take\nspaces in names, so leave spaces out.\n\n159\n00:08:37.558 --> 00:08:41.059\nNormally, if you wanna put\nspace in between two words, so\n\n160\n00:08:41.059 --> 00:08:42.989\nif I wanted it to be my function,\n\n161\n00:08:42.989 --> 00:08:47.438\nI would do an underscore connecting\nthe two words so giving that spacing.\n\n162\n00:08:47.438 --> 00:08:49.808\nSo just forget spacing for the most part.\n\n163\n00:08:49.808 --> 00:08:52.580\nSometimes you can get away with\nthings like quotations but again,\n\n164\n00:08:52.580 --> 00:08:53.728\nI'm not 100% on that.\n\n165\n00:08:53.728 --> 00:08:57.370\nNormally for me,\nI know better than to muck up my code and\n\n166\n00:08:57.370 --> 00:09:00.948\nmake it difficult to read by\nputting spacing in there.\n\n167\n00:09:00.948 --> 00:09:03.848\nSo, it's just a good rule of thumb,\nstay away from spacing.\n\n168\n00:09:03.848 --> 00:09:06.940\nCase sensitivity though,\nthat is a definite important.\n\n169\n00:09:06.940 --> 00:09:09.100\nYou have to watch out for\ncase sensitivity.\n\n170\n00:09:09.100 --> 00:09:14.870\nIf I name my function capital F, function\nand 1, it's gonna be capital F function1.\n\n171\n00:09:14.870 --> 00:09:18.970\nCalling lowercase function1 is\ngonna do a whole lot of nothing.\n\n172\n00:09:18.970 --> 00:09:22.445\nOkay so, gotta make sure\nthat your naming conventions\n\n173\n00:09:22.445 --> 00:09:26.371\nare standardized across your script,\nso they have to look for\n\n174\n00:09:26.371 --> 00:09:30.168\nthe correct names and\nthat case sensitivity is important.\n\n175\n00:09:30.168 --> 00:09:31.962\n>> All right, Daniel,\nwhat if I go ahead and\n\n176\n00:09:31.962 --> 00:09:35.308\ncreate a function like you said,and we\ncall it function One with a capital F.\n\n177\n00:09:35.308 --> 00:09:38.808\nAnd then I look through it and I realize\nthat something needs to be changed inside.\n\n178\n00:09:38.808 --> 00:09:40.459\nDo I need to create\na brand new function or\n\n179\n00:09:40.459 --> 00:09:42.848\nis there a way that I can edit\nthat function and it's fine?\n\n180\n00:09:42.848 --> 00:09:45.980\n>> Yeah, super easy, just go right\ninto the code of the function,\n\n181\n00:09:45.980 --> 00:09:48.768\nwhatever is wrong with it and\nfix it right then and there.\n\n182\n00:09:48.768 --> 00:09:52.068\nYou don't have to create a new function or\ndelete that function or edit it out.\n\n183\n00:09:52.068 --> 00:09:56.653\nSometimes you may wanna make a copy of\nthat function and because you're gonna do\n\n184\n00:09:56.653 --> 00:10:00.554\nsomething that's maybe wildly\ndifferent than what's going on but\n\n185\n00:10:00.554 --> 00:10:03.928\nstill built on the basis of\nthe function you already have.\n\n186\n00:10:03.928 --> 00:10:06.630\nSo that's something I do,\nIf I'm gonna do that.\n\n187\n00:10:07.832 --> 00:10:08.860\nI'll kinda copy and\n\n188\n00:10:08.860 --> 00:10:13.420\ncreate a new function with a different\nname o comment the old function out and\n\n189\n00:10:13.420 --> 00:10:18.930\nthen make my changes but other than that,\nfor comparison reasons, you don't have to.\n\n190\n00:10:18.930 --> 00:10:19.958\nYou can just go right into that function.\n\n191\n00:10:19.958 --> 00:10:24.094\nIf I had this command was wrong,\nI could go in here and\n\n192\n00:10:24.094 --> 00:10:29.278\nedit it out and make it to whatever\nit's supposed to be, okay so.\n\n193\n00:10:29.278 --> 00:10:31.456\nAnd then soon as I save the document,\n\n194\n00:10:31.456 --> 00:10:35.338\nI save the script that function\nshould be good to go at that point.\n\n195\n00:10:35.338 --> 00:10:37.338\nYou don't have to do anything crazy.\n\n196\n00:10:37.338 --> 00:10:41.258\nAll right so now that we've\nseen the syntax of a function.\n\n197\n00:10:41.258 --> 00:10:44.732\nLet's take a look the script that\nactually has a function built into it and\n\n198\n00:10:44.732 --> 00:10:48.262\nhow it calls the function so how do we\nuse the function inside of our script,\n\n199\n00:10:48.262 --> 00:10:51.570\nthat's the main portion because if I\nshow you how to make functions and\n\n200\n00:10:51.570 --> 00:10:55.298\nI don't show you how to use them well\nthey're not gonna be very helpful to you.\n\n201\n00:10:55.298 --> 00:10:56.378\nSo that's what we're gonna do.\n\n202\n00:10:56.378 --> 00:10:57.896\nI'm just gonna get out of here,\n\n203\n00:10:57.896 --> 00:11:00.718\nI'm not gonna save any of\nthe changes cuz we don't need it.\n\n204\n00:11:00.718 --> 00:11:04.138\nSo let's see here,\nthis will be called, what is my code?\n\n205\n00:11:04.138 --> 00:11:05.198\nIt is return.\n\n206\n00:11:05.198 --> 00:11:06.218\nThere it is.\n\n207\n00:11:06.218 --> 00:11:10.138\nSo it's nano return.sh.\n\n208\n00:11:10.138 --> 00:11:13.858\nSo this is a script that I created to give\nus a little demonstration purposes here.\n\n209\n00:11:13.858 --> 00:11:18.058\nHere is my function,\nright and we see fun1.\n\n210\n00:11:18.058 --> 00:11:20.538\nThere's my open and closed parentheses.\n\n211\n00:11:20.538 --> 00:11:23.258\nThen there's my open curly brace.\n\n212\n00:11:23.258 --> 00:11:30.538\nSo that's basically saying here is\nthe beginning of this function named fun1.\n\n213\n00:11:30.538 --> 00:11:32.380\nSo if I go down in here.\n\n214\n00:11:32.380 --> 00:11:33.758\nI start my commands.\n\n215\n00:11:33.758 --> 00:11:37.618\nWe're familiar with the read command dash\np, we've used this quite a few times.\n\n216\n00:11:37.618 --> 00:11:41.802\nIt's asking me to enter\na number other than one and\n\n217\n00:11:41.802 --> 00:11:46.398\nthen basically push that\nout in to something, right?\n\n218\n00:11:46.398 --> 00:11:49.138\nInto a variable.\n\n219\n00:11:49.138 --> 00:11:54.050\nAnd then we move over here we call that\nvariable or reference that variable and\n\n220\n00:11:54.050 --> 00:11:58.357\nwe say that if it equals one then do this,\necho your number is valid,\n\n221\n00:11:58.357 --> 00:12:00.498\nI'm sorry invalid so try again.\n\n222\n00:12:00.498 --> 00:12:04.088\nBecause I'm saying enter\na number other than one and\n\n223\n00:12:04.088 --> 00:12:08.331\nthen this return right here,\nthis is something important and\n\n224\n00:12:08.331 --> 00:12:12.258\nI guess I need to stop and\ntalk about this really quickly.\n\n225\n00:12:12.258 --> 00:12:14.426\nRemember when we talked\nabout exit codes and\n\n226\n00:12:14.426 --> 00:12:16.778\nthe different things\nthat come out from there?\n\n227\n00:12:16.778 --> 00:12:20.906\nIf it returns 0 then it was successful,\nif it returns 1 there was a failure, and\n\n228\n00:12:20.906 --> 00:12:24.220\nthere was all the other ones\nthat had some speciality to it.\n\n229\n00:12:24.220 --> 00:12:25.060\nRemember that stuff?\n\n230\n00:12:25.060 --> 00:12:27.138\nReturn is kinda the same thing.\n\n231\n00:12:27.138 --> 00:12:30.617\nI can use exit in here as well and\nreturn an exit code, but\n\n232\n00:12:30.617 --> 00:12:35.298\nnormally if I don't wanna exit the script\neven though it's a mini script.\n\n233\n00:12:35.298 --> 00:12:39.978\nI'll use return and basically\nsaying return a value that I want.\n\n234\n00:12:39.978 --> 00:12:43.658\nI can just use return and it'll use\nzero one and all the standard stuff.\n\n235\n00:12:43.658 --> 00:12:44.650\nBut I can also make my own.\n\n236\n00:12:44.650 --> 00:12:47.970\nAnd I can say as long as this is\na valid number that it will accept.\n\n237\n00:12:47.970 --> 00:12:51.290\nAnd whole integers is the way to do that.\n\n238\n00:12:51.290 --> 00:12:54.140\nI'm saying that if this runs.\n\n239\n00:12:54.140 --> 00:12:55.630\nReturn value of two, right?\n\n240\n00:12:55.630 --> 00:12:59.360\nAnd I'm gonna use those return\nvalues later on in my script to get\n\n241\n00:12:59.360 --> 00:13:01.530\nthe idea that I'm looking at.\n\n242\n00:13:01.530 --> 00:13:06.037\nJust like we used the exit codes\nbefore to get certain activities\n\n243\n00:13:06.037 --> 00:13:08.298\nto happen inside of our script.\n\n244\n00:13:08.298 --> 00:13:11.942\nI'm gonna use the return values inside\nof a function to get the same kinda\n\n245\n00:13:11.942 --> 00:13:12.666\nidea, okay.\n\n246\n00:13:12.666 --> 00:13:14.774\nSo that's what's basically going on there.\n\n247\n00:13:14.774 --> 00:13:19.424\nIt's nothing too extraordinary\nother than I wanna\n\n248\n00:13:19.424 --> 00:13:24.514\ncreate a return code that I\ncan use in a variable, okay?\n\n249\n00:13:24.514 --> 00:13:26.534\nSo then we move on with the else.\n\n250\n00:13:26.534 --> 00:13:31.027\nSo basically, I don't If I put\nany number other than one,\n\n251\n00:13:31.027 --> 00:13:34.434\nI should get this and\nreturn one it will say.\n\n252\n00:13:34.434 --> 00:13:38.819\nWhatever that variable was it\nis such a wonderful number and\n\n253\n00:13:38.819 --> 00:13:41.194\nthat's what we'd like to see.\n\n254\n00:13:41.194 --> 00:13:43.734\nDon't use one because one\nis against the system.\n\n255\n00:13:43.734 --> 00:13:44.654\nRight, we don't like that.\n\n256\n00:13:44.654 --> 00:13:49.498\nAnd then of course in my and\nthen I close my curly brace.\n\n257\n00:13:49.498 --> 00:13:50.968\nThat's the end of this function.\n\n258\n00:13:50.968 --> 00:13:55.150\nSo, this is an entire block of code\nthat I can use over and over and\n\n259\n00:13:55.150 --> 00:13:58.028\nover again if I'd like\ninside of my script.\n\n260\n00:13:58.028 --> 00:14:00.468\nNow, for demonstration purposes,\nI've only used it once.\n\n261\n00:14:00.468 --> 00:14:04.886\nBut, I could've used it as many times as I\nlike as long as it worked out correctly,\n\n262\n00:14:04.886 --> 00:14:06.048\nyou know what I mean.\n\n263\n00:14:06.048 --> 00:14:08.788\nYou can't have two things\nbattling each other.\n\n264\n00:14:08.788 --> 00:14:11.328\nBut other than that we\nmove out of the function.\n\n265\n00:14:11.328 --> 00:14:13.896\nNow the function isn't\nactually being used yet.\n\n266\n00:14:13.896 --> 00:14:16.265\nEven though like this is at\nthe beginning of my script,\n\n267\n00:14:16.265 --> 00:14:19.776\nthat's another thing you need to worry\nabout is where do you put your functions.\n\n268\n00:14:19.776 --> 00:14:24.936\nYou have to have your functions defined\nbefore you’re able to call them.\n\n269\n00:14:24.936 --> 00:14:29.016\nSo I can’t call a function higher in\nthe script and then actually define\n\n270\n00:14:29.016 --> 00:14:33.376\nit lower in the script because it’s\ngonna look upward to see if it’s there.\n\n271\n00:14:33.376 --> 00:14:36.696\nCuz you gotta remember scripts go\nline by line, from top to bottom.\n\n272\n00:14:36.696 --> 00:14:40.887\nSo if I need to use a function it needs\nto be above where I actually call it\n\n273\n00:14:40.887 --> 00:14:41.676\nout, okay?\n\n274\n00:14:41.676 --> 00:14:44.256\nSo make sure that that's\nsomething you remember.\n\n275\n00:14:44.256 --> 00:14:45.996\nIt's very important.\n\n276\n00:14:45.996 --> 00:14:49.523\nSo right here we're saying,\nstarting to unfill and\n\n277\n00:14:49.523 --> 00:14:51.776\nI see this little guy right here.\n\n278\n00:14:51.776 --> 00:14:54.796\nWe remember that,that's my return code,\nright?\n\n279\n00:14:54.796 --> 00:14:59.337\nIt goes in the same variable,\nthat's the last good return command or\n\n280\n00:14:59.337 --> 00:15:04.037\nwhatever command I ran before,\nI wanna see what the return value was and\n\n281\n00:15:04.037 --> 00:15:05.776\nwhat the exit status was.\n\n282\n00:15:05.776 --> 00:15:08.429\nAnd if I have a function,\nit will show me that return value,\n\n283\n00:15:08.429 --> 00:15:11.256\nit will save it there as well,\nthat dollar sign question mark.\n\n284\n00:15:11.256 --> 00:15:14.304\nAnd if I say if it\nequals one then do this,\n\n285\n00:15:14.304 --> 00:15:18.716\necho return of the function\nis whatever was given, okay.\n\n286\n00:15:18.716 --> 00:15:24.396\nHere's the grand huzzah, which is fun one.\n\n287\n00:15:24.396 --> 00:15:26.856\nThat's how I say do the function.\n\n288\n00:15:26.856 --> 00:15:31.720\nIt sees fun one as a command because\nit is a function that is defined\n\n289\n00:15:31.720 --> 00:15:33.936\ninside of the script, okay.\n\n290\n00:15:33.936 --> 00:15:36.976\nSo pretty simple, and then I'm done and\nwe should be off to the races.\n\n291\n00:15:36.976 --> 00:15:40.536\nLet me make sure I didn't forget anything,\nyeah that's the end of my script.\n\n292\n00:15:40.536 --> 00:15:44.065\nSo what it should do is it should\nask you to enter a variable,\n\n293\n00:15:44.065 --> 00:15:45.696\nour number other than one.\n\n294\n00:15:45.696 --> 00:15:49.926\nIf I put a number other than\none it should say the return,\n\n295\n00:15:49.926 --> 00:15:55.236\nthis is what I should echo which is n\ninput is so number two if it was two.\n\n296\n00:15:55.236 --> 00:15:58.824\nWe'll say two is such a wonderful number\nand the return value of the function.\n\n297\n00:15:58.824 --> 00:16:03.720\nSo I'm actually reaching inside of that\nfunction to get some value out of that for\n\n298\n00:16:03.720 --> 00:16:04.516\na variable.\n\n299\n00:16:04.516 --> 00:16:06.743\nAnd it should print that out.\n\n300\n00:16:06.743 --> 00:16:08.166\nHopefully that's what is does.\n\n301\n00:16:08.166 --> 00:16:11.072\nSo let's go ahead and\nwe'll save this here and we'll run it.\n\n302\n00:16:12.798 --> 00:16:15.114\nDot s h and see what happens.\n\n303\n00:16:15.114 --> 00:16:19.567\nSo it says the return function or our\nvaluable function is one because one is\n\n304\n00:16:19.567 --> 00:16:24.150\nprobably the last known variable\nwhatever that variable is right now.\n\n305\n00:16:24.150 --> 00:16:27.280\nRight now it doesn't matter for us we can\njust say enter a number other than one.\n\n306\n00:16:27.280 --> 00:16:30.890\nIf I do two it says two is a wonderful\nnumber, right, very,very good.\n\n307\n00:16:30.890 --> 00:16:34.043\nIf I run it again and I say one and\n\n308\n00:16:34.043 --> 00:16:38.907\nit says that's not what we're looking for.\n\n309\n00:16:38.907 --> 00:16:42.426\nThat is wrong and\nwe shouldn't be seeing that and exit out.\n\n310\n00:16:42.426 --> 00:16:43.680\nSo I called the function.\n\n311\n00:16:43.680 --> 00:16:47.466\nThis isn't the greatest script in\nthe world it was just obviously for\n\n312\n00:16:47.466 --> 00:16:50.018\ndemonstration purposes,\nbut it is doing it.\n\n313\n00:16:50.018 --> 00:16:53.554\nIt's calling to that function,\nbecause you gotta remember,\n\n314\n00:16:53.554 --> 00:16:57.024\nall that part right there with\nthe return value, I'm sorry,\n\n315\n00:16:57.024 --> 00:17:00.645\nwhere it says your number is invalid,\nthat was in the function.\n\n316\n00:17:00.645 --> 00:17:06.630\nThat's in the code All I did\nwas call the function from,\n\n317\n00:17:06.630 --> 00:17:10.590\nI'm sorry, until loop that we had\nset off inside of our script.\n\n318\n00:17:10.590 --> 00:17:13.856\nSo that's how you do it,\nyou just say define my function,\n\n319\n00:17:13.856 --> 00:17:17.389\ngive it all the parameters, and\nthen when I'm ready to use it,\n\n320\n00:17:17.389 --> 00:17:20.676\ndown in the code I just name\nwhatever the function name is.\n\n321\n00:17:20.676 --> 00:17:23.208\n>> Now Daniel if we go ahead and\ndefine this function then and\n\n322\n00:17:23.208 --> 00:17:26.550\nit's actually reporting out to the screen,\nwhich is what we want it to do.\n\n323\n00:17:26.550 --> 00:17:28.854\nBut a lot of times for\nits usefulness though,\n\n324\n00:17:28.854 --> 00:17:32.204\nwhat if I wanted that return to come\nout to be inside of a variable?\n\n325\n00:17:32.204 --> 00:17:33.992\nCan I make that also work?\n\n326\n00:17:33.992 --> 00:17:36.858\n>> You wanted the return to come\nout inside of the variable?\n\n327\n00:17:36.858 --> 00:17:40.185\n>> Yeah, to assign your\nfunction output to a variable?\n\n328\n00:17:40.185 --> 00:17:41.981\n>> Assign my function\noutput to a variable.\n\n329\n00:17:41.981 --> 00:17:45.020\nYes, yeah, we definitely can do that.\n\n330\n00:17:45.020 --> 00:17:48.249\nI wasn't quite following around\nthese wordings there, but yeah,\n\n331\n00:17:48.249 --> 00:17:49.333\nI totally get you now.\n\n332\n00:17:49.333 --> 00:17:50.472\nWe can totally do that.\n\n333\n00:17:50.472 --> 00:17:53.524\nAnd maybe I did some math\ninside of a function and\n\n334\n00:17:53.524 --> 00:17:55.591\nI take the product of that math.\n\n335\n00:17:55.591 --> 00:17:57.153\nAnd I put that on the other\nside of a variable.\n\n336\n00:17:57.153 --> 00:17:59.570\nCan I do that, yeah I can do that.\n\n337\n00:17:59.570 --> 00:18:02.650\nAnd that's one of the main\nreasons we use functions, or\n\n338\n00:18:02.650 --> 00:18:06.580\nI say one of the main\nreasons we can use functions.\n\n339\n00:18:06.580 --> 00:18:08.220\nIt might not be the main\nreason you can use them.\n\n340\n00:18:08.220 --> 00:18:09.865\nBut it's one of the main reasons you can\nuse them. So let's see how that works out.\n\n341\n00:18:09.865 --> 00:18:13.480\nI think I've got an actual script for\nthat as well.\n\n342\n00:18:13.480 --> 00:18:15.820\nI think let's see here,\nlet me get out of this.\n\n343\n00:18:17.400 --> 00:18:18.710\nYeah it's looping through here.\n\n344\n00:18:18.710 --> 00:18:20.098\nI haven't met the loop yet.\n\n345\n00:18:20.098 --> 00:18:20.887\nThere we go.\n\n346\n00:18:20.887 --> 00:18:22.060\nLet me clear the screen.\n\n347\n00:18:22.060 --> 00:18:22.965\nDo an L S.\n\n348\n00:18:22.965 --> 00:18:24.347\nAnd yeah there it is.\n\n349\n00:18:24.347 --> 00:18:25.287\nOne fun variable.\n\n350\n00:18:25.287 --> 00:18:26.204\nSo let's take a look at that.\n\n351\n00:18:26.204 --> 00:18:32.752\nNano one fun, there we go,\nyeah looks good.\n\n352\n00:18:32.752 --> 00:18:35.746\nAll right so let's see what's\ngoing on inside this script.\n\n353\n00:18:35.746 --> 00:18:38.438\nRight here we have our\nfunction fun one again,\n\n354\n00:18:38.438 --> 00:18:41.830\nit is an easy term to use creating\nthe name of the function.\n\n355\n00:18:41.830 --> 00:18:43.419\nThen I have some variables.\n\n356\n00:18:43.419 --> 00:18:49.380\nVar1 = 10, Var2 = 2,\nVar3 Is the mathematical\n\n357\n00:18:49.380 --> 00:18:53.658\nformulation of var one times var two and\n\n358\n00:18:53.658 --> 00:18:59.240\nthen I wanna echo whatever\nthat product is, okay?\n\n359\n00:18:59.240 --> 00:19:01.530\nSo that's what's happening.\n\n360\n00:19:01.530 --> 00:19:05.350\nFirst thing I jump out of\nthe gate with is fun one.\n\n361\n00:19:05.350 --> 00:19:06.650\nI run the function.\n\n362\n00:19:06.650 --> 00:19:08.180\nThat gives me the output, right?\n\n363\n00:19:08.180 --> 00:19:14.210\nThat creates this variable and the product\nof it, the value that goes inside of it.\n\n364\n00:19:14.210 --> 00:19:20.380\nAnd then I say, bigvar1, so\nanother variable equals fun1, right?\n\n365\n00:19:20.380 --> 00:19:22.860\nSo that's, that's putting that there.\n\n366\n00:19:22.860 --> 00:19:26.362\nAnd then I can say bigvar2 is 100,\nyou'll see where it's going in a second.\n\n367\n00:19:26.362 --> 00:19:30.518\nSo I've created just so I can make\ndifferent var2s and var1s I use bigvar.\n\n368\n00:19:30.518 --> 00:19:37.190\nSo bigvar2 equals 100,\nthen bigvar3 again, we're doing some math.\n\n369\n00:19:37.190 --> 00:19:43.430\nSo I'm basically, giving this variable\nvalue from our function right here.\n\n370\n00:19:43.430 --> 00:19:47.703\nSo whatever gets called from this\nfunction, should be put inside\n\n371\n00:19:47.703 --> 00:19:52.218\nof this variable and then I can use it and\nthen kinda echo that as well.\n\n372\n00:19:52.218 --> 00:19:56.000\nSo again another really simple script\njust to illustrate the point, so\n\n373\n00:19:56.000 --> 00:19:58.092\nlet's run that and see how that works.\n\n374\n00:19:58.092 --> 00:20:01.877\nAnd now of course,\nI created another file here.\n\n375\n00:20:01.877 --> 00:20:03.364\n[INAUDIBLE], there we go.\n\n376\n00:20:03.364 --> 00:20:06.812\n./1fun_variable.\n\n377\n00:20:06.812 --> 00:20:08.193\nLet's see what happens.\n\n378\n00:20:08.193 --> 00:20:14.248\nAnd there it did it, so 20, which was\nwhat was return by the function so\n\n379\n00:20:14.248 --> 00:20:20.520\nI had the basically what was it, two and\nten, so two times ten equals 20.\n\n380\n00:20:20.520 --> 00:20:24.319\nThat's what VAR three was and\nthen I piped that into or\n\n381\n00:20:24.319 --> 00:20:27.698\npushed that into the actual\nbody of the script,\n\n382\n00:20:27.698 --> 00:20:32.355\nput that 20 that came from function\none slam that into another.\n\n383\n00:20:32.355 --> 00:20:36.752\nVariable that's in the main body of the\nscript ran another math equation which was\n\n384\n00:20:36.752 --> 00:20:39.442\ntimes 100 and we get 2000 and\nthere you go.\n\n385\n00:20:39.442 --> 00:20:42.120\nSo you can take the output\nof that function and\n\n386\n00:20:42.120 --> 00:20:44.164\nput that inside of a variable, and\n\n387\n00:20:44.164 --> 00:20:49.120\nthen use that variable in the main body of\nyour script and it's pretty simple to do.\n\n388\n00:20:50.420 --> 00:20:54.509\n>> Now, when we're actually using this,\nwe've done this before with other things,\n\n389\n00:20:54.509 --> 00:20:57.215\nwe're gonna talk about a local and\na global type scope,\n\n390\n00:20:57.215 --> 00:21:00.211\nespecially with the idea of scripts,\nand variables we know,\n\n391\n00:21:00.211 --> 00:21:02.081\nthat's where we all tend to see that.\n\n392\n00:21:02.081 --> 00:21:03.868\nCan we do the same thing with functions?\n\n393\n00:21:03.868 --> 00:21:04.426\n>> Yeah.\n\n394\n00:21:04.426 --> 00:21:09.352\nYou have to be careful when it comes\nto functions because they have their\n\n395\n00:21:09.352 --> 00:21:12.980\nown Global and\nthey have it on local variables.\n\n396\n00:21:12.980 --> 00:21:16.070\nRemember when we talked about local and\nglobal variables?\n\n397\n00:21:16.070 --> 00:21:18.541\nI declared global variable, every shell,\n\n398\n00:21:18.541 --> 00:21:21.695\neverything I run gets to use\nthat because it's global.\n\n399\n00:21:21.695 --> 00:21:24.910\nIf Ronnie logs in, opens a shell,\nhe can see that variable.\n\n400\n00:21:25.940 --> 00:21:27.591\nIf I'm running a local variable though,\nright?\n\n401\n00:21:27.591 --> 00:21:30.535\nOnly the shell that I'm in\nruns that local variable and\n\n402\n00:21:30.535 --> 00:21:33.735\nI'd have to export it to do sub variable,\nto do subshells,\n\n403\n00:21:33.735 --> 00:21:38.280\nmake that variable available to them and\nit's still not available to Ronnie.\n\n404\n00:21:38.280 --> 00:21:40.500\nIt's only available to me and\nmy subshells.\n\n405\n00:21:40.500 --> 00:21:44.350\nSame kinda idea, you gotta remember\nthat function is a mini script.\n\n406\n00:21:44.350 --> 00:21:48.449\nSo what happens when I run\nit inside of my main script?\n\n407\n00:21:49.690 --> 00:21:50.956\nIt actually creates a subshell.\n\n408\n00:21:50.956 --> 00:21:55.777\nSo inside of that subshell,\nthat variable is gonna be,\n\n409\n00:21:55.777 --> 00:22:02.360\nit might affect the variable above it,\nsome things might not be available.\n\n410\n00:22:02.360 --> 00:22:05.148\nSo you gotta be really, really\ncareful on how you use your variables.\n\n411\n00:22:05.148 --> 00:22:08.710\nSo if I make a global variable\nin the main part of the script,\n\n412\n00:22:08.710 --> 00:22:13.417\nI can use that inside of my function\nbecause it's a subshell and it's global so\n\n413\n00:22:13.417 --> 00:22:18.011\nevery shell sees it, that's not a problem,\nit's those local variables.\n\n414\n00:22:18.011 --> 00:22:22.979\nSometimes I want a variable inside\nof my script to be said this is\n\n415\n00:22:22.979 --> 00:22:27.668\nlocal to the script and\nthen basically what that's gonna do\n\n416\n00:22:27.668 --> 00:22:32.542\nit's gonna make sure that if I\nhave a variable maybe of the same\n\n417\n00:22:32.542 --> 00:22:37.091\nname that it doesn't get\nconfused with the two, right?\n\n418\n00:22:37.091 --> 00:22:40.840\nSo one would be local and\none would be global.\n\n419\n00:22:40.840 --> 00:22:46.594\nSo sometimes I need to declare\na variable as local to the function.\n\n420\n00:22:46.594 --> 00:22:49.580\nSo let's take a look at that and\nsee what I mean.\n\n421\n00:22:49.580 --> 00:22:50.880\nLet me see here.\n\n422\n00:22:50.880 --> 00:22:54.973\nIt is gonna be called [SOUND]\nwhat did I call that one?\n\n423\n00:22:54.973 --> 00:22:58.955\nLocal bar broken, so\nlet's look how that works.\n\n424\n00:22:58.955 --> 00:23:02.961\nNano local bar broken.\n\n425\n00:23:02.961 --> 00:23:07.150\nSo let's take a look in here and\nyou'll see that inside of my function\n\n426\n00:23:07.150 --> 00:23:10.740\nI've declared a couple of variables,\ntemp and results right.\n\n427\n00:23:10.740 --> 00:23:13.860\nSo the value of temp is Value plus five.\n\n428\n00:23:13.860 --> 00:23:16.534\nWell, where is it getting\nthis value variable from?\n\n429\n00:23:16.534 --> 00:23:17.997\nWell, it's getting it from here.\n\n430\n00:23:17.997 --> 00:23:20.447\nRight there, right?\n\n431\n00:23:20.447 --> 00:23:22.362\nThat's where it's getting that.\n\n432\n00:23:22.362 --> 00:23:25.660\nIt's redefining what temp is.\n\n433\n00:23:25.660 --> 00:23:28.961\nHere's temp right here,\nwhich is a global variable as well, and\n\n434\n00:23:28.961 --> 00:23:32.803\nthen now I'm staying inside the function\nso if I call a function in a script,\n\n435\n00:23:32.803 --> 00:23:35.462\nit's gonna say well now\nit equals 6 plus 5, okay?\n\n436\n00:23:35.462 --> 00:23:39.293\nInstead of 4,\nbecause that's not what I want it to be.\n\n437\n00:23:39.293 --> 00:23:42.242\nI'm changing the variable,\nthe global variable inside of the script.\n\n438\n00:23:42.242 --> 00:23:46.481\nBut what happens, you gotta remember,\nreading top to bottom,\n\n439\n00:23:46.481 --> 00:23:49.462\nif I come in here and\nI mess around with this and\n\n440\n00:23:49.462 --> 00:23:54.100\nI start asking about this if temp\nis greater than value, right?\n\n441\n00:23:54.100 --> 00:23:57.263\nSo basically is that we're\ngonna get the wrong answer.\n\n442\n00:23:57.263 --> 00:24:01.632\nSo what happens is when I feed it\nthrough it's gonna run this whole\n\n443\n00:24:01.632 --> 00:24:06.401\ncalculation I believe, so if this is\nfour plus five that equals 11 and\n\n444\n00:24:06.401 --> 00:24:10.629\nthen 11 is the value attempt,\nso 11 times two will be 22.\n\n445\n00:24:10.629 --> 00:24:13.961\nThat would now be what result is.\n\n446\n00:24:13.961 --> 00:24:15.854\nBut if I come down here and\n\n447\n00:24:15.854 --> 00:24:20.464\nI say if temp is greater than value,\nthen say temp is larger.\n\n448\n00:24:20.464 --> 00:24:25.360\nAnd if its not, if it's anything else,\nthen say temp is smaller.\n\n449\n00:24:25.360 --> 00:24:30.540\nSo as I say here, here the script sees\nthe value of temp as 4, it's calling it\n\n450\n00:24:30.540 --> 00:24:34.720\nfrom that global variable instead of what\nwe've redefined it inside of the function.\n\n451\n00:24:34.720 --> 00:24:35.470\nOkay?\n\n452\n00:24:35.470 --> 00:24:38.030\nThere's the problem So\n\n453\n00:24:38.030 --> 00:24:42.380\nwhen I run this if statement,\nwe're going to get the wrong result.\n\n454\n00:24:42.380 --> 00:24:43.750\nAnd let's show you that.\n\n455\n00:24:43.750 --> 00:24:46.516\nExit out of here, we'll run that.\n\n456\n00:24:46.516 --> 00:24:49.730\n./local, broken and\nit says that the result is 22.\n\n457\n00:24:49.730 --> 00:24:54.270\nWe got the right output, but\nthen it saw that global variable again.\n\n458\n00:24:54.270 --> 00:24:55.540\nSaw it as four.\n\n459\n00:24:55.540 --> 00:24:56.500\nSo temp is this?\n\n460\n00:24:56.500 --> 00:24:57.610\nNow, it's not.\n\n461\n00:24:57.610 --> 00:24:59.480\nWe want it to be 22,\nso there's the problem.\n\n462\n00:24:59.480 --> 00:25:00.490\nThat's the problem.\n\n463\n00:25:00.490 --> 00:25:01.280\nSo what do I do?\n\n464\n00:25:01.280 --> 00:25:04.550\nI declare it as a local variable\ninside of the function itself.\n\n465\n00:25:04.550 --> 00:25:08.570\nAnd now I have another script,\nwhich is a localVar works.\n\n466\n00:25:08.570 --> 00:25:10.840\nWe'll do that one, nano, localVar, works.\n\n467\n00:25:14.320 --> 00:25:15.280\nAnd all I had to do to say,\n\n468\n00:25:15.280 --> 00:25:21.770\nthis is a local variable to my\nfunction is to use the local command.\n\n469\n00:25:21.770 --> 00:25:23.950\nAll right.\nSo now it won't get confused.\n\n470\n00:25:23.950 --> 00:25:27.210\nIt'll know that this is what I'm running.\n\n471\n00:25:27.210 --> 00:25:28.630\nI'm not looking here.\n\n472\n00:25:28.630 --> 00:25:29.730\nI'm looking here.\n\n473\n00:25:29.730 --> 00:25:32.620\nActually specifically right here for\nmy value.\n\n474\n00:25:32.620 --> 00:25:36.120\nOkay.\nSo that's what we're looking for.\n\n475\n00:25:36.120 --> 00:25:37.650\nNow if I've, now that I've done this.\n\n476\n00:25:37.650 --> 00:25:41.020\nI've created as a local variable,\nand I run the scripts.\n\n477\n00:25:42.790 --> 00:25:48.690\nWe should be able to get the correct\noutputs which is to say its large\n\n478\n00:25:48.690 --> 00:25:53.470\nright because of its so the dutch\nslash total scripts im sorry smaller.\n\n479\n00:25:53.470 --> 00:25:54.890\nThat's exactly..\n\n480\n00:25:54.890 --> 00:25:56.400\nBe what we're looking for.\n\n481\n00:25:56.400 --> 00:25:58.410\nSo be careful,\nsometimes that can interfere.\n\n482\n00:25:58.410 --> 00:26:00.440\nNot getting the results\nyou are looking for?\n\n483\n00:26:00.440 --> 00:26:04.680\nMaybe it's because you have a couple\nvariables that are duking it out over who\n\n484\n00:26:04.680 --> 00:26:08.130\nis actually going to be the winner as\nyou used them inside of your scripts.\n\n485\n00:26:08.130 --> 00:26:11.610\n>> Alright Daniel, if we keep\ncreating more and more variables.\n\n486\n00:26:11.610 --> 00:26:16.150\nVariables, you mentioned at the very\nbeginning of the show that we could take\n\n487\n00:26:16.150 --> 00:26:19.550\nthose, not variables, functions, and\nwe keep creating more and more functions.\n\n488\n00:26:19.550 --> 00:26:23.070\nYou said that what we could do is we\ncould write that function, essentially,\n\n489\n00:26:23.070 --> 00:26:25.580\none time, but\nthen reuse it again and again.\n\n490\n00:26:25.580 --> 00:26:26.490\nHow do we do that?\n\n491\n00:26:26.490 --> 00:26:28.210\nWhat do we have to have to\nmake sure that happens?\n\n492\n00:26:28.210 --> 00:26:30.000\n>> Yeah.\nThis is what's called a library, and\n\n493\n00:26:30.000 --> 00:26:31.460\nit's easy for Ronnie.\n\n494\n00:26:31.460 --> 00:26:32.310\nActually functions and\n\n495\n00:26:32.310 --> 00:26:35.710\nvariables are very, very similar, so I can\nsee how you can get those two confused.\n\n496\n00:26:35.710 --> 00:26:42.580\nThey do kind of the same thing where\nyou are creating a value for a name.\n\n497\n00:26:42.580 --> 00:26:46.400\nA function does a lot inside of that name.\n\n498\n00:26:46.400 --> 00:26:50.330\nAll right, so the library thing this is\nprobably one of the coolest portions of\n\n499\n00:26:50.330 --> 00:26:54.080\nusing functions is I can create an entire\nlist of functions that I want to use.\n\n500\n00:26:54.080 --> 00:26:58.740\nAnd then call to that file that holds\nthem inside of my script, right?\n\n501\n00:26:58.740 --> 00:27:02.800\nI can create a library and\nuse the functions that I want.\n\n502\n00:27:02.800 --> 00:27:03.660\nSo how do I do that?\n\n503\n00:27:03.660 --> 00:27:07.630\nFirst thing I have to do is I have to\ntell it where to look for the library.\n\n504\n00:27:07.630 --> 00:27:11.558\nAnd then I can call out my functions that\nare inside that library as I need them.\n\n505\n00:27:11.558 --> 00:27:16.880\nLet me show you what\nI'm talking about here.\n\n506\n00:27:16.880 --> 00:27:18.970\nSo, I've got a, let's see here,\na script, obviously.\n\n507\n00:27:18.970 --> 00:27:19.990\nLet's do an LS.\n\n508\n00:27:19.990 --> 00:27:22.550\nIt is one, Lib script, that's it.\n\n509\n00:27:22.550 --> 00:27:23.710\nSo, what's the end of that guy?\n\n510\n00:27:26.020 --> 00:27:30.880\nAnd you'll see,\nnot a whole lot going on in here but\n\n511\n00:27:30.880 --> 00:27:35.010\nthis is a script, you'll see that\nbecause I have This guy right here, and\n\n512\n00:27:35.010 --> 00:27:40.560\nthis is the first important line\nwhen you're using libraries.\n\n513\n00:27:40.560 --> 00:27:44.450\nYou'll notice I have a dot,\ndot, slash function lib.\n\n514\n00:27:44.450 --> 00:27:46.280\nWhat is function lib?\n\n515\n00:27:46.280 --> 00:27:52.530\nWell if we get out of here real quick and\nI have this function lib file right here.\n\n516\n00:27:52.530 --> 00:27:53.800\nIt's just a flat text file.\n\n517\n00:27:53.800 --> 00:27:59.910\nIf I can't function lib, You'll see\nit holds functions inside of it.\n\n518\n00:27:59.910 --> 00:28:01.120\nThat's awesome, right?\n\n519\n00:28:01.120 --> 00:28:02.530\nThat's kinda cool.\n\n520\n00:28:02.530 --> 00:28:04.750\nBut nothing really too fancy about it.\n\n521\n00:28:04.750 --> 00:28:06.750\nI mean, they're very simple functions.\n\n522\n00:28:06.750 --> 00:28:08.370\nIt's just echoing something.\n\n523\n00:28:08.370 --> 00:28:10.880\nSo this is function 1 called\nfrom the functionLib file.\n\n524\n00:28:10.880 --> 00:28:13.420\nSo it's just kinda giving\nyou some information.\n\n525\n00:28:13.420 --> 00:28:14.610\nHere's function 2.\n\n526\n00:28:14.610 --> 00:28:17.200\nEcho, this is function 2 called\nfrom the functionLib file.\n\n527\n00:28:17.200 --> 00:28:20.700\nSo just three different functions\ninside of a flat text file.\n\n528\n00:28:20.700 --> 00:28:24.790\nThere's nothing special about this other\nthan I've created the correct syntax for\n\n529\n00:28:24.790 --> 00:28:29.120\nfunctions inside of it and\ngiven it a name.\n\n530\n00:28:29.120 --> 00:28:30.570\nThat's all I've done, okay?\n\n531\n00:28:30.570 --> 00:28:36.770\nWhen we go back to our script I'm\ncalling that like I do a script.\n\n532\n00:28:36.770 --> 00:28:38.167\nSee that ./ right there?\n\n533\n00:28:38.167 --> 00:28:40.390\nYou notice when we start a script,\nwhat do we do?\n\n534\n00:28:40.390 --> 00:28:44.470\nWe do ./ whatever the script name is and\nthat runs the script.\n\n535\n00:28:44.470 --> 00:28:48.370\nWell we're doing the exact\nsame thing against that file.\n\n536\n00:28:48.370 --> 00:28:51.970\nEven though it is not a script,\nper se, it is a library.\n\n537\n00:28:51.970 --> 00:28:53.720\nThat's how we call it.\n\n538\n00:28:53.720 --> 00:28:57.020\nAnd there's also another\nthing you gotta be careful of\n\n539\n00:28:57.020 --> 00:29:01.320\nYou gotta make sure you take a look at,\nand that's that period right there.\n\n540\n00:29:01.320 --> 00:29:04.570\nI could also have done this and\ntaken that period out.\n\n541\n00:29:04.570 --> 00:29:10.200\nSource and the period,\nI don't know if you remember this from our\n\n542\n00:29:10.200 --> 00:29:14.070\nprevious show, but if you need to launch\nsomething inside of the same shell.\n\n543\n00:29:14.070 --> 00:29:17.500\nRemember, if you run a script,\nwhat does it do?\n\n544\n00:29:17.500 --> 00:29:19.470\nIt launches it in a sub-shell.\n\n545\n00:29:19.470 --> 00:29:21.600\nSo I don't want to launch in a sub shell,\n\n546\n00:29:21.600 --> 00:29:24.100\nI want it to launch in\nthe same shell that I am in.\n\n547\n00:29:24.100 --> 00:29:26.530\nBecause if I launch the sub\nshell I lose variables and\n\n548\n00:29:26.530 --> 00:29:28.980\nthings of that nature,\nsee where I'm going with this?\n\n549\n00:29:28.980 --> 00:29:30.520\nSo I want to launch it in the same shell.\n\n550\n00:29:30.520 --> 00:29:34.100\nTo do that we use the source command or\nthe synonym for\n\n551\n00:29:34.100 --> 00:29:35.500\nsource which is just a period.\n\n552\n00:29:35.500 --> 00:29:40.040\nSo that's why I have the period there,\nsource will work work I'll\n\n553\n00:29:40.040 --> 00:29:43.680\nleave it the same way it is because it's\na lot less typing, just a period and\n\n554\n00:29:43.680 --> 00:29:45.440\nthen dot slash,\nwhatever your file name is.\n\n555\n00:29:45.440 --> 00:29:47.660\nThat's how you get to your file\nwith your functions inside it.\n\n556\n00:29:47.660 --> 00:29:49.250\nThat's calling that library.\n\n557\n00:29:49.250 --> 00:29:51.200\nAnd then what am I doing?\n\n558\n00:29:51.200 --> 00:29:55.250\nI'm saying, now that I can see inside\nof that, I wanna run some commands.\n\n559\n00:29:55.250 --> 00:29:56.330\nWhat are those commands?\n\n560\n00:29:56.330 --> 00:29:58.640\nWell those are function names.\n\n561\n00:29:58.640 --> 00:30:00.210\nEach function name is,\nin essence, a command.\n\n562\n00:30:00.210 --> 00:30:03.420\nSo function 3, function 2,\nfunction 1, function 2, function 3.\n\n563\n00:30:03.420 --> 00:30:06.140\nSo we should get a interesting output\nwhere it kinda counts down and\n\n564\n00:30:06.140 --> 00:30:08.730\nthen back up,\ngiving us those different functions.\n\n565\n00:30:08.730 --> 00:30:12.880\nYou might be saying,\nwell why did you do that?\n\n566\n00:30:12.880 --> 00:30:18.020\nJust so we can see that it is actually\nlooking at the different functions,\n\n567\n00:30:18.020 --> 00:30:22.690\nrunning them, and\nthen doing a different function right?\n\n568\n00:30:22.690 --> 00:30:24.220\nSo demonstrational purposes.\n\n569\n00:30:24.220 --> 00:30:25.590\nSO let's do this.\n\n570\n00:30:25.590 --> 00:30:26.560\nLet's get out of here.\n\n571\n00:30:26.560 --> 00:30:28.190\nI'll say no I don't need\nto save any changes.\n\n572\n00:30:28.190 --> 00:30:29.610\nLet's run that lib script.\n\n573\n00:30:29.610 --> 00:30:30.560\nAnd there we go.\n\n574\n00:30:30.560 --> 00:30:35.130\nIt says this function This is function\nthree called from the function lib file.\n\n575\n00:30:35.130 --> 00:30:37.150\nThis is function two\ncalled from the lib file.\n\n576\n00:30:37.150 --> 00:30:42.070\nIt looked inside of the file, saw\nthe functions that are there then I was\n\n577\n00:30:42.070 --> 00:30:44.920\nable to call those functions\nin my script as I needed.\n\n578\n00:30:44.920 --> 00:30:49.340\nWe run the script everything\nworks as necessary.\n\n579\n00:30:49.340 --> 00:30:53.190\n>> So Daniel if I'm using this library\nin the script the thing that I need\n\n580\n00:30:53.190 --> 00:30:53.990\nto do is being run?\n\n581\n00:30:53.990 --> 00:30:55.749\nOut of the script.\n\n582\n00:30:55.749 --> 00:30:57.260\nIs that what I need to run or\n\n583\n00:30:57.260 --> 00:31:01.390\ndo I defer to the function\nto the side of the library?\n\n584\n00:31:01.390 --> 00:31:05.250\n>> If I'm hearing you correctly\nI'm running a script,\n\n585\n00:31:05.250 --> 00:31:08.050\nmy script is called live script right?\n\n586\n00:31:08.050 --> 00:31:10.010\nInside of that script.\n\n587\n00:31:10.010 --> 00:31:13.570\nIs the, the call to the library file.\n\n588\n00:31:13.570 --> 00:31:18.070\nAnd then since I can read inside\na library file, because I called it,\n\n589\n00:31:18.070 --> 00:31:21.800\nI can look for any function that\nI have in there and name them.\n\n590\n00:31:21.800 --> 00:31:23.840\nAs I name them,\nit will run them inline as they do.\n\n591\n00:31:23.840 --> 00:31:26.800\nAnd that's why we get this, because\nI went function three, function two,\n\n592\n00:31:26.800 --> 00:31:29.820\nfunction one, function two,\nfunction three, I get the output.\n\n593\n00:31:29.820 --> 00:31:32.590\nOf those different functions\nfrom that lib file.\n\n594\n00:31:32.590 --> 00:31:38.350\nSo the lib file, if you are creating\na library file it needs to be or\n\n595\n00:31:38.350 --> 00:31:40.000\nat least given the whole path.\n\n596\n00:31:40.000 --> 00:31:43.210\nIf you have it in a different path\n\n597\n00:31:43.210 --> 00:31:46.820\nA lot of times you'll keep these things\ngrouped together just so you can do ./ but\n\n598\n00:31:46.820 --> 00:31:49.760\nother than that you'll have to\ngive it the entire file name.\n\n599\n00:31:49.760 --> 00:31:52.340\nSo whatever directory was\nin call to that library.\n\n600\n00:31:52.340 --> 00:31:58.615\nOther than that the Function,\nthe, whatever was\n\n601\n00:31:58.615 --> 00:32:03.085\nthe lib file that we had, is not a script,\nit's just a file full of functions.\n\n602\n00:32:03.085 --> 00:32:05.361\nThe script is lib script, right?\n\n603\n00:32:05.361 --> 00:32:09.475\nIsn't that what it's called, yeah,\nlib script, that's the script, and\n\n604\n00:32:09.475 --> 00:32:12.385\nit's looking to that file,\nthat file is not a script,\n\n605\n00:32:12.385 --> 00:32:16.401\nthen we can use them in our script even\nthough it's looking from that file.\n\n606\n00:32:16.401 --> 00:32:20.868\nSo just keeps the, if I have all\nthose functions in a separate file.\n\n607\n00:32:20.868 --> 00:32:23.326\nA it's easier to call\nthem to multiple scripts.\n\n608\n00:32:23.326 --> 00:32:25.173\nSo if I wrote 5 different scripts and\n\n609\n00:32:25.173 --> 00:32:28.520\nI wanted to use functions that\nare inside that file, I can do that.\n\n610\n00:32:28.520 --> 00:32:32.290\nI don't have to reinvent the wheel,\nit's already there.\n\n611\n00:32:32.290 --> 00:32:34.390\nThat's the purpose of a library, right?\n\n612\n00:32:34.390 --> 00:32:37.790\nAnd also if I don't want\nto keep my code all bulky,\n\n613\n00:32:37.790 --> 00:32:42.090\nI have to sift through 257 lines of code,\nI can use libraries to make it easier.\n\n614\n00:32:42.090 --> 00:32:46.660\nI'm calling to a function, if I need to\nsee what's going on in that function, or\n\n615\n00:32:46.660 --> 00:32:49.790\nI think there's a problem,\nI can go look at that file and\n\n616\n00:32:49.790 --> 00:32:55.040\nit keeps my code a little neater,\na little cleaner, and I can move on.\n\n617\n00:32:55.040 --> 00:32:55.850\nThat way.\n\n618\n00:32:55.850 --> 00:32:59.360\nSo two good reasons why you\nwanna use library files.\n\n619\n00:32:59.360 --> 00:33:00.140\n>> Yeah.\nAnd Daniel,\n\n620\n00:33:00.140 --> 00:33:04.620\nwhat I was trying to get at is,\nhow do we get that library to work,\n\n621\n00:33:04.620 --> 00:33:06.090\nlike if I have a new script?\n\n622\n00:33:06.090 --> 00:33:08.700\nDo I actually run this type of script, or\n\n623\n00:33:08.700 --> 00:33:12.340\ndo I have to refer to the actual\nfunctions inside of that library?\n\n624\n00:33:12.340 --> 00:33:13.230\nDoes that make sense?\n\n625\n00:33:13.230 --> 00:33:13.919\n>> I'm not 100% following you.\n\n626\n00:33:13.919 --> 00:33:14.700\n>> [LAUGH]\n>> Are you saying\n\n627\n00:33:14.700 --> 00:33:16.510\nthat\n>> How?\n\n628\n00:33:16.510 --> 00:33:17.870\nHow?\nYou said how do we get to the functions\n\n629\n00:33:17.870 --> 00:33:18.392\ninside of [INAUDIBLE]?\n\n630\n00:33:18.392 --> 00:33:18.990\n>> How do we actually do that?\n\n631\n00:33:18.990 --> 00:33:19.800\nIf so I write a script.\n\n632\n00:33:19.800 --> 00:33:20.720\n>> Right.\n>> If I write a whole script.\n\n633\n00:33:20.720 --> 00:33:23.490\nAnd I say, hey.\nI want to go run one of these functions\n\n634\n00:33:23.490 --> 00:33:26.100\ninside of that library there.\n\n635\n00:33:26.100 --> 00:33:26.780\n>> Okay.\n>> So what?\n\n636\n00:33:26.780 --> 00:33:30.690\nWhat do I have to have in my\nscript to make that work?\n\n637\n00:33:30.690 --> 00:33:32.130\n>> Got you.\n>> That particular.\n\n638\n00:33:32.130 --> 00:33:32.750\n>> Got you.\n>> Script.\n\n639\n00:33:32.750 --> 00:33:33.310\n>> What you need.\n\n640\n00:33:33.310 --> 00:33:35.238\nIs this line right here.\n\n641\n00:33:35.238 --> 00:33:37.000\n>> Yeah okay.\n\n642\n00:33:37.000 --> 00:33:39.970\n>> You have to put that line there,\nthat's how it knows to look\n\n643\n00:33:39.970 --> 00:33:40.690\n>> That was me.\n\n644\n00:33:40.690 --> 00:33:41.700\n>> To that file and\n\n645\n00:33:41.700 --> 00:33:47.618\nthen I'm able to use any of the functions\nthat are located inside that file.\n\n646\n00:33:47.618 --> 00:33:51.861\n[CROSSTALK] That's okay, that's some\nof the things that can get confusing,\n\n647\n00:33:51.861 --> 00:33:55.271\nit's like what is going one here,\nhow was I making this work?\n\n648\n00:33:55.271 --> 00:33:57.870\nYou need this lot to make it work.\n\n649\n00:33:57.870 --> 00:34:01.590\n>> You need that line that lets you know,\nI'm running this inside the same shell as\n\n650\n00:34:01.590 --> 00:34:05.340\nmy script, and\nthis is the name of the library, right.\n\n651\n00:34:05.340 --> 00:34:05.920\n>> Cool.\n\n652\n00:34:05.920 --> 00:34:09.370\n>> And then any function inside\nof the library, I'm allowed use.\n\n653\n00:34:09.370 --> 00:34:10.220\n>> Awesome.\n\n654\n00:34:10.220 --> 00:34:11.240\n>> Right.\n>> So pretty good.\n\n655\n00:34:11.240 --> 00:34:11.980\nAnything else, Ronnie?\n\n656\n00:34:11.980 --> 00:34:13.760\nNot that I know right now but\n\n657\n00:34:13.760 --> 00:34:16.790\nthat was the only part that was really\ngetting me at the very end there.\n\n658\n00:34:16.790 --> 00:34:20.230\nNow Daniel, we've taken a lot of\ntime in taking a look at the idea of\n\n659\n00:34:20.230 --> 00:34:22.880\nwhat functions do for us and\nwhy we want to do them.\n\n660\n00:34:22.880 --> 00:34:27.580\nWe also talked a little bit about\nthe scope of these functions, Functions.\n\n661\n00:34:27.580 --> 00:34:30.560\nAnd by using libraries it sounds\nlike we can actually make them\n\n662\n00:34:30.560 --> 00:34:31.800\navailable to us wherever we want to.\n\n663\n00:34:31.800 --> 00:34:34.330\nSo instead of having to repeat\nwriting every function over again in\n\n664\n00:34:34.330 --> 00:34:36.770\nevery single script that I create,\nwe can actually do that.\n\n665\n00:34:36.770 --> 00:34:40.500\nWe also saw where we can also use\nfunctions inside of variables, as well.\n\n666\n00:34:40.500 --> 00:34:43.250\nTaking the output of that and\nputting them in there.\n\n667\n00:34:43.250 --> 00:34:48.470\nAnd, it actually looks a A lot like\nsomething that can actually help\n\n668\n00:34:48.470 --> 00:34:53.070\nus to speed up the way that we script,\nwhich is why we want to do it.\n\n669\n00:34:53.070 --> 00:34:55.250\nDaniel, any last words as\nwe continue on to try and\n\n670\n00:34:55.250 --> 00:34:57.040\nlearn about the idea of\nusing functions here?\n\n671\n00:34:57.040 --> 00:34:58.280\n>> I would just say use them.\n\n672\n00:34:58.280 --> 00:35:00.540\nThey're very, very simple To employee.\n\n673\n00:35:00.540 --> 00:35:04.300\nJust create that function name and\ngive it the commands that you need.\n\n674\n00:35:04.300 --> 00:35:07.420\nIt'll help you with your scripting,\ncreate you some libraries.\n\n675\n00:35:07.420 --> 00:35:09.290\nOnce you start seeing\nyourself using stuff over and\n\n676\n00:35:09.290 --> 00:35:13.330\nover again create that library file,\nthrow those bad boys in there and\n\n677\n00:35:13.330 --> 00:35:16.520\nthen use them for\nscripts over and over again.\n\n678\n00:35:16.520 --> 00:35:20.900\nThis is one of the most helpful ways in\nwhich we can Use our scripts because then\n\n679\n00:35:20.900 --> 00:35:24.470\nyou're not typing the same block of\ncode over and over and over again.\n\n680\n00:35:24.470 --> 00:35:27.960\nYou can just refer to the code\nyou've all ready written.\n\n681\n00:35:27.960 --> 00:35:28.910\nSo I say just use them.\n\n682\n00:35:28.910 --> 00:35:30.490\nPlay with them, use them,\nhave fun with them.\n\n683\n00:35:30.490 --> 00:35:31.280\nThey're a lot of fun.\n\n684\n00:35:31.280 --> 00:35:34.230\n>> All right, before we close,\nI guess we have one last question,\n\n685\n00:35:34.230 --> 00:35:36.900\nwhich is a great question\nhere from our chat room.\n\n686\n00:35:36.900 --> 00:35:39.960\nAre functions allowed\nto start with numbers?\n\n687\n00:35:39.960 --> 00:35:44.280\nBen in our chat room says in Java, you're\nnot supposed to actually do that, but\n\n688\n00:35:44.280 --> 00:35:46.450\nis it okay in bash to\nstart them with numbers?\n\n689\n00:35:46.450 --> 00:35:47.720\n>> You know,\nthat's a really good question.\n\n690\n00:35:47.720 --> 00:35:50.290\nI can't think of any reason why we\nwouldn't, but you know what, let's do it.\n\n691\n00:35:50.290 --> 00:35:51.550\nLet's find out.\n\n692\n00:35:51.550 --> 00:35:54.950\nLet's change one of these guys and\nsee what happens.\n\n693\n00:35:54.950 --> 00:35:56.280\nLet's play around with it.\n\n694\n00:35:56.280 --> 00:35:57.700\nLet me get out of this one.\n\n695\n00:35:57.700 --> 00:35:59.510\nWe'll control x there.\n\n696\n00:35:59.510 --> 00:36:02.350\nLet's open one of these guys that\nactually has, we do know L S here.\n\n697\n00:36:03.930 --> 00:36:05.250\nI hate when I do that.\n\n698\n00:36:06.860 --> 00:36:07.730\n>> Me too.\n\n699\n00:36:07.730 --> 00:36:09.610\n>> Nope.\nThere we go.\n\n700\n00:36:09.610 --> 00:36:12.480\nL S and what was one that was easy here?\n\n701\n00:36:12.480 --> 00:36:17.170\nWe'll do one fun variable.\n\n702\n00:36:17.170 --> 00:36:17.899\nYes.\n\n703\n00:36:17.899 --> 00:36:19.670\nDot nano one fun variable.\n\n704\n00:36:19.670 --> 00:36:23.230\nSo if we come in here and\nI call it three function and\n\n705\n00:36:23.230 --> 00:36:27.013\nI just make sure to Put a three\nwherever I see that and\n\n706\n00:36:27.013 --> 00:36:31.305\nlet's see what happens.\n\n707\n00:36:31.305 --> 00:36:34.307\nCtrl+O, Ctrl+X.\n\n708\n00:36:34.307 --> 00:36:39.010\nOne fun variable, a slash,\nand we're Works just fine.\n\n709\n00:36:39.010 --> 00:36:40.800\nSo yes, you can start it with numbers.\n\n710\n00:36:40.800 --> 00:36:41.430\nNow we all know.\n\n711\n00:36:41.430 --> 00:36:43.690\nWe all learn something new every day.\n\n712\n00:36:43.690 --> 00:36:44.610\n>> Excellent.\nThank you Daniel.\n\n713\n00:36:44.610 --> 00:36:46.440\nThat last little bit probably\nat least helped Ben out,\n\n714\n00:36:46.440 --> 00:36:49.040\nif not all of us if we're trying to go,\nshould I do this or not?\n\n715\n00:36:49.040 --> 00:36:53.030\nEspecially we have experience in other\nplaces where they're We're not allowed to\n\n716\n00:36:53.030 --> 00:36:56.280\nbe but remember take advantage of\nthe variables because they are gonna be\n\n717\n00:36:56.280 --> 00:36:59.500\nhelpful as your scripts get larger and\nlarger and you start creating more and\n\n718\n00:36:59.500 --> 00:37:02.460\nmore functions you don't want it\nto keep writhing them over and\n\n719\n00:37:02.460 --> 00:37:04.240\nthat's why I want to\ntake advantage of that.\n\n720\n00:37:04.240 --> 00:37:05.640\nThank you again Daniel for that.\n\n721\n00:37:05.640 --> 00:37:06.240\n>> Your welcome.\n\n722\n00:37:06.240 --> 00:37:07.990\n>> And thank you for actually being\nwith us today as we continue.\n\n723\n00:37:07.990 --> 00:37:13.050\nYou wanna take a look some more\nBASH scripting in the future.\n\n724\n00:37:13.050 --> 00:37:15.190\nSigning off for IT Pro TV,\nI'm Ronnie Wong.\n\n725\n00:37:15.190 --> 00:37:16.367\n>> And I'm Daniel Lowrie,\nand we'll see you next time.\n\n726\n00:37:16.367 --> 00:37:22.750\n[MUSIC]\n\n",
          "vimeoId": "146521672"
        },
        {
          "description": "In this episode, Ronnie and Daniel continue to show how include user input into BASH scripting.  This helps when creating a script and we do not know the exact values needed at the moment of script creation.  They show how to create a parameterized script so that it request additional information for the the script before being run.  Also this is helpful when there may be multiple parameters that need to be provided.",
          "length": "1795",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-16-1-parameters_in_bash-111715-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-16-1-parameters_in_bash-111715-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-bashandscripting/techskills-bashandscripting-16-1-parameters_in_bash-111715-1-sm.jpg",
          "title": "Parameters in BASH",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.161 --> 00:00:15.619\nWelcome to another exciting\nepisode here on ITProTV.\n\n3\n00:00:15.619 --> 00:00:19.199\nI'm your host Ronnie Wong, and today,\nwe're taking a look at Bash and\n\n4\n00:00:19.199 --> 00:00:22.008\nscripting, specifically\ntalking about parameters,\n\n5\n00:00:22.008 --> 00:00:24.651\nand working that inside our\nBash scripting as well.\n\n6\n00:00:24.651 --> 00:00:26.340\nAnd who better to help us than, well, Mr.\n\n7\n00:00:26.340 --> 00:00:29.100\nDaniel Lowrie as we continue\nto take a look at this idea.\n\n8\n00:00:29.100 --> 00:00:32.780\nDaniel, let's talk about the idea of\nparameters, why do we want to use them,\n\n9\n00:00:32.780 --> 00:00:37.320\nand how do we us them is what we're\nactually gonna take a look at.\n\n10\n00:00:37.320 --> 00:00:38.420\n>> Yeah, exactly right.\n\n11\n00:00:38.420 --> 00:00:41.510\nSo, parameters\nare an interesting function,\n\n12\n00:00:41.510 --> 00:00:45.800\nthis is kind of our hodgepodge of things\nthat we might want to do with our script.\n\n13\n00:00:45.800 --> 00:00:47.000\nThis is I wanna add something to it,\n\n14\n00:00:47.000 --> 00:00:52.330\nI want to waanna actually create ,or put\nto my script some extra functionality.\n\n15\n00:00:52.330 --> 00:00:55.250\nMaybe even create variables or\nsomething like that.\n\n16\n00:00:55.250 --> 00:00:59.810\nAnd you're thinking okay,\nwell we know how to create variables,\n\n17\n00:00:59.810 --> 00:01:01.260\nwe know how to do extra stuff.\n\n18\n00:01:01.260 --> 00:01:03.350\nWe just create the code for that.\n\n19\n00:01:03.350 --> 00:01:04.470\nWhat exactly are parameters?\n\n20\n00:01:04.470 --> 00:01:07.870\nWhat do you mean by when\nyou say a parameter?\n\n21\n00:01:07.870 --> 00:01:09.120\nWell, when you're running your script,\n\n22\n00:01:09.120 --> 00:01:14.150\nremember we do the dot slash script name,\nand that runs our script.\n\n23\n00:01:14.150 --> 00:01:20.100\nWhat if I wanted to give it some\ninformation at that point in time, right?\n\n24\n00:01:20.100 --> 00:01:23.670\nWe see this very often,\nwhen you run a program, and you give it a,\n\n25\n00:01:23.670 --> 00:01:28.350\nmore specifically these\nwould be called options,\n\n26\n00:01:28.350 --> 00:01:32.590\nbut they're very similar in\nthe way that they worked.\n\n27\n00:01:32.590 --> 00:01:35.630\nBut you do a dash A, right, or\nyou say Run my script with Bob.\n\n28\n00:01:35.630 --> 00:01:37.960\nI'm going to run it as Bob.\n\n29\n00:01:37.960 --> 00:01:42.330\nI'm going to give it some input, so that\nthat will work it's way into the script.\n\n30\n00:01:42.330 --> 00:01:45.310\nThat is what we need\nwhen we say parameters.\n\n31\n00:01:45.310 --> 00:01:46.060\nThat is the idea.\n\n32\n00:01:46.060 --> 00:01:49.630\nBut, there's a little extra\nchunk of something at\n\n33\n00:01:49.630 --> 00:01:52.660\nthe time in which we\nrun the actual script.\n\n34\n00:01:52.660 --> 00:01:54.390\nSo, how can we use that?\n\n35\n00:01:54.390 --> 00:01:56.030\nHow can we work with that?\n\n36\n00:01:56.030 --> 00:01:57.810\nThat's what we're going to cover today.\n\n37\n00:01:57.810 --> 00:02:00.130\nIt actually can increase\nyour functionality.\n\n38\n00:02:00.130 --> 00:02:04.860\nThink of it in that very reason we're\ngonna look at a script that really uses\n\n39\n00:02:04.860 --> 00:02:09.885\nit to that advantage, if I call it\nthis way it'll do something different.\n\n40\n00:02:09.885 --> 00:02:13.015\nAlright, so if I make sure I add\nup a parameter that is this,\n\n41\n00:02:13.015 --> 00:02:17.355\nnow my script acts in a different way\nthan it normally would if I just ran it.\n\n42\n00:02:17.355 --> 00:02:20.165\nSo, that's where options and\nparameters specifically,\n\n43\n00:02:20.165 --> 00:02:23.305\ncan come in handy, and there's a lot\nof them that we can work with.\n\n44\n00:02:23.305 --> 00:02:28.220\nWe just have to know, how does the Bash\nenvironment interpret those variables.\n\n45\n00:02:28.220 --> 00:02:30.150\nHow do I work with those\nvariables in my scripts, so\n\n46\n00:02:30.150 --> 00:02:33.460\nthat I can make them do stuff for\nmy scripting life?\n\n47\n00:02:33.460 --> 00:02:34.950\nAnd that's, hopefully,\nby the end of this show,\n\n48\n00:02:34.950 --> 00:02:38.510\nyou'll be, yeah,\nthat parameter stuff's pretty easy.\n\n49\n00:02:38.510 --> 00:02:40.030\nAnd I'm gonna start using that.\n\n50\n00:02:40.030 --> 00:02:41.170\n>> Alright.\nDaniel, what I normally see,\n\n51\n00:02:41.170 --> 00:02:44.840\nwhere I've seen the idea of the use of\nparameters, is when all of a sudden\n\n52\n00:02:44.840 --> 00:02:49.420\nI get a webpage, and it says who am I, I\nhave to enter in my username, but then, it\n\n53\n00:02:49.420 --> 00:02:53.710\nasks me to set what the parameters are, in\nother words, where am I doing a query for?\n\n54\n00:02:53.710 --> 00:02:55.840\nI might say the Southern region, or\n\n55\n00:02:55.840 --> 00:02:58.040\nI might even list\nthe states that I'm I need.\n\n56\n00:02:58.040 --> 00:03:00.390\nAnd when I run that against a database,\n\n57\n00:03:00.390 --> 00:03:03.960\nit actually allows me then, to report\nout all the information that I need.\n\n58\n00:03:03.960 --> 00:03:05.810\nBut it's just for the values that I set.\n\n59\n00:03:05.810 --> 00:03:08.930\nSomeone else could come along, such as\nDaniel, could also do the same thing but\n\n60\n00:03:08.930 --> 00:03:13.470\nenter in his name, and then enter in there\nin a totally different set of states and\n\n61\n00:03:13.470 --> 00:03:16.170\nthen, it actually does\na query against that.\n\n62\n00:03:16.170 --> 00:03:19.140\nAnd so, by being able to use\nthese parameters, it allows for\n\n63\n00:03:19.140 --> 00:03:23.790\nthe users to add in additional input\nthat I may not have at the time that I'm\n\n64\n00:03:23.790 --> 00:03:28.280\ncreating the actual script itself and\nthat way, we actually get the user input.\n\n65\n00:03:28.280 --> 00:03:31.580\nWe get different values\nthat I may not know exactly\n\n66\n00:03:31.580 --> 00:03:33.380\nwhat one particular user needs but\nthey do.\n\n67\n00:03:33.380 --> 00:03:37.930\nAnd that allows us to take that script and\nbecome incredibly more flexible.\n\n68\n00:03:37.930 --> 00:03:41.440\nSo, Daniel, when you talk about this idea,\nwe can kind of logically understand it,\n\n69\n00:03:41.440 --> 00:03:43.920\nbut since we're talking about\nthe idea of writing scripts for it.\n\n70\n00:03:43.920 --> 00:03:48.560\nDaniel, how do we get our scripts to begin\nto recognize the idea of using parameters?\n\n71\n00:03:48.560 --> 00:03:50.730\n>> Yeah,\nthat's probably a good place to start.\n\n72\n00:03:50.730 --> 00:03:52.150\nHow do I define my parameters?\n\n73\n00:03:52.150 --> 00:03:57.410\nHow do I say that my name is Ronny or that\nmy name is Daniel or that a value that\n\n74\n00:03:57.410 --> 00:04:03.090\nI want to add to the script at\nthe run time is whatever it is?\n\n75\n00:04:03.090 --> 00:04:05.320\nWell, it's really simple,\nit's actually super simple.\n\n76\n00:04:05.320 --> 00:04:08.960\nLet's take a look at my computer, and I'll\njust give you an example of what I mean.\n\n77\n00:04:08.960 --> 00:04:11.130\nSo, let's say I had\na script called script1.\n\n78\n00:04:11.130 --> 00:04:13.930\nNormally, I would just do ./script1.\n\n79\n00:04:13.930 --> 00:04:16.005\nIt doesn't actually exist, but.\n\n80\n00:04:16.005 --> 00:04:17.215\n>> [LAUGH]\n>> For our, and\n\n81\n00:04:17.215 --> 00:04:19.424\n.sh don't forget your .sh right.\n\n82\n00:04:19.424 --> 00:04:21.658\nYou always gotta end those files with .sh.\n\n83\n00:04:21.658 --> 00:04:27.830\nBut, If I just run that she'll gonna\njust run whatever is in the script.\n\n84\n00:04:27.830 --> 00:04:31.390\nIf I want a parameter how am I going\nto say I want a parameter as well\n\n85\n00:04:31.390 --> 00:04:34.190\nas running the script at the same time?\n\n86\n00:04:34.190 --> 00:04:36.940\nJust give a space and\nwhatever you want the parameter to be.\n\n87\n00:04:36.940 --> 00:04:39.530\nSo, if I wanted it to be a name,\nI can save demo.\n\n88\n00:04:39.530 --> 00:04:40.470\nLike that.\n\n89\n00:04:40.470 --> 00:04:43.950\nThat would be a parameter if\nI wanted to be you know...\n\n90\n00:04:43.950 --> 00:04:45.760\nRonnie, and that would be the parameter.\n\n91\n00:04:45.760 --> 00:04:49.880\nAnd now, when I run the script,\nthat input that we put in there.\n\n92\n00:04:49.880 --> 00:04:51.860\nThat name that Ronnie or\nDaniel, the A, the 1, the 2.\n\n93\n00:04:51.860 --> 00:04:55.380\nWhatever we put there,\nis going to actually become a variable.\n\n94\n00:04:55.380 --> 00:04:58.770\nSo, we're actually kind\nof creating variables,\n\n95\n00:04:58.770 --> 00:05:04.290\nbefore we even enter into the scriptk and\nI have a diagram to\n\n96\n00:05:05.630 --> 00:05:10.450\nhelp that make a little more sense,\nbecause it can be a bit confusing.\n\n97\n00:05:10.450 --> 00:05:12.170\nLet me jump over here to my diagram.\n\n98\n00:05:12.170 --> 00:05:16.180\nAnd what do I mean,\nwhen I say a parameter?\n\n99\n00:05:16.180 --> 00:05:20.090\nYou'll notice this is kind\nof the exact same idea.\n\n100\n00:05:20.090 --> 00:05:21.970\nWe have, this is our shell prompt.\n\n101\n00:05:21.970 --> 00:05:24.120\nHere's our script, ./script1.sh and\nthen, I can do a -a -b.\n\n102\n00:05:24.120 --> 00:05:25.850\nTechnically, that would be an option.\n\n103\n00:05:25.850 --> 00:05:27.740\nIf you add the dash the script\nsees it as an option, but\n\n104\n00:05:27.740 --> 00:05:31.860\nwe're talking parameters that like I\nsaid almost work in an identical way.\n\n105\n00:05:31.860 --> 00:05:35.250\nThere's just some different\nlimitations on each one of the other.\n\n106\n00:05:35.250 --> 00:05:40.090\nParameters is normally something that's\neasy to get our feet wet in, and then,\n\n107\n00:05:40.090 --> 00:05:44.190\nlater when you give them more advanced\nscripting you can jump into Options.\n\n108\n00:05:44.190 --> 00:05:45.510\nBut let's take a look here.\n\n109\n00:05:45.510 --> 00:05:50.430\nI've added those dashes to make\nseparation a little easier to see.\n\n110\n00:05:50.430 --> 00:05:53.010\nSo, we've got this whole thing, we've got\na, we've got b, we've got c, d, e, f, g,\n\n111\n00:05:53.010 --> 00:05:53.600\nh, and i, alright?\n\n112\n00:05:53.600 --> 00:05:56.240\nWhat are we going on here,\nwhat's happening?\n\n113\n00:05:56.240 --> 00:06:01.550\nWell, if you notice I've\ngot there's dollar sign 1,\n\n114\n00:06:01.550 --> 00:06:05.550\ndollar sign 2, dollar sign 3 we even have\ndollar sign 0 here in a different color,\n\n115\n00:06:05.550 --> 00:06:08.510\nwe'll talk across that bridge\nhere in just a moment.\n\n116\n00:06:08.510 --> 00:06:09.660\nWhat is that?\nWhat's that going on?\n\n117\n00:06:09.660 --> 00:06:12.410\nObviously, I'm correlating\nA with dollar sign 1.\n\n118\n00:06:12.410 --> 00:06:13.660\nNow, if you're thinking scripting,\n\n119\n00:06:13.660 --> 00:06:17.860\nright, if you put your scripting hat on\nwhat does dollar sign something mean?\n\n120\n00:06:17.860 --> 00:06:22.199\nDollar sign something is\nreferencing a variable, right?\n\n121\n00:06:22.199 --> 00:06:26.365\nSo, what we've done,\nis we've referenced or\n\n122\n00:06:26.365 --> 00:06:30.020\nwe're inputting value into a variable.\n\n123\n00:06:30.020 --> 00:06:32.190\nThat's what's going on.\n\n124\n00:06:32.190 --> 00:06:35.450\nAnd that variable is going to be $1.\n\n125\n00:06:35.450 --> 00:06:37.280\nIn this position, that would be $1.\n\n126\n00:06:37.280 --> 00:06:41.530\nIf I do a space and then,\nsomething else, guess what?\n\n127\n00:06:41.530 --> 00:06:42.620\nThat will be $2.\nAnd you can see that\n\n128\n00:06:42.620 --> 00:06:43.546\nI get all the way up to $9.\n\n129\n00:06:43.546 --> 00:06:49.890\nI have basically nine different\nparameters that I can pass to my script.\n\n130\n00:06:49.890 --> 00:06:51.320\nThat's a cool thing, right?\n\n131\n00:06:51.320 --> 00:06:54.450\nSo, I don't have just one spot,\nI have multiple.\n\n132\n00:06:54.450 --> 00:06:57.150\nWhat about that dollar sign zero?\n\n133\n00:06:57.150 --> 00:06:57.680\nWhat is that?\nWell,\n\n134\n00:06:57.680 --> 00:07:01.460\nas we know, computers tend to\nstart counting at zero, so\n\n135\n00:07:01.460 --> 00:07:06.030\nthere is a dollar sign zero, which is\nright here which is actually the position\n\n136\n00:07:06.030 --> 00:07:10.390\nof the script name don't forget\nyou can give it the full path.\n\n137\n00:07:10.390 --> 00:07:11.200\nIf that occurs,\n\n138\n00:07:11.200 --> 00:07:16.240\nthat full path name will become that\ndollar sign zero variable okay?\n\n139\n00:07:16.240 --> 00:07:20.690\nSo, you gotta be aware of that.\n\n140\n00:07:20.690 --> 00:07:23.970\nIf you wanted to use this variable.\n\n141\n00:07:23.970 --> 00:07:27.630\nAnd you didn't want maybe that preceding\n./, or if you had the full variable name.\n\n142\n00:07:27.630 --> 00:07:29.350\nI'm sorry, the path name there.\n\n143\n00:07:29.350 --> 00:07:34.120\nYou would need to use a command\ncalled base name, I believe this is.\n\n144\n00:07:34.120 --> 00:07:36.920\nBut for the most part, for\n\n145\n00:07:36.920 --> 00:07:39.490\nsimplistic terms,\njust getting this idea into our brains.\n\n146\n00:07:39.490 --> 00:07:41.810\nI'm trying to keep it as easy as possible.\n\n147\n00:07:43.070 --> 00:07:45.570\nIs that script where\nwe call that variable,\n\n148\n00:07:45.570 --> 00:07:47.811\nthat is the dollar sign zero variable.\n\n149\n00:07:47.811 --> 00:07:52.135\nAnd every parameter we give it after that\ngets dollar sign one, dollar sign two,\n\n150\n00:07:52.135 --> 00:07:55.778\ndollar sign three, four, five,\nsix, seven, eight, and nine.\n\n151\n00:07:55.778 --> 00:07:57.774\nAll right, so very, very simple.\n\n152\n00:07:57.774 --> 00:08:05.216\nSo if I go back over to right here,\nwe know that Ronnie is dollar sign one.\n\n153\n00:08:05.216 --> 00:08:05.995\nSo what does that mean?\n\n154\n00:08:05.995 --> 00:08:08.177\nIt means I can use that in my script,\nright?\n\n155\n00:08:08.177 --> 00:08:10.197\nThat's why we would\nwanna pass a parameter.\n\n156\n00:08:10.197 --> 00:08:16.316\nIf I put something as a parameter, it gets\na variable value inside of my script.\n\n157\n00:08:16.316 --> 00:08:17.568\nIt knows that it's there.\n\n158\n00:08:17.568 --> 00:08:19.739\nThis system, the BASH system,\ndoes that for us.\n\n159\n00:08:19.739 --> 00:08:23.292\nI don't have to say,\ndollar sign equals Ronnie, right?\n\n160\n00:08:23.292 --> 00:08:24.475\nI can do that.\n\n161\n00:08:24.475 --> 00:08:27.633\nAnd it will change whatever\nparameter we gave it.\n\n162\n00:08:27.633 --> 00:08:31.826\nBut right out of the gate I can give it\na variable name so that we can do things\n\n163\n00:08:31.826 --> 00:08:35.479\nlike what Ronnie was talking about,\nwhere you go to a website and\n\n164\n00:08:35.479 --> 00:08:40.103\nit says, okay, you're gonna login, but\ntell me what area you're in, right?\n\n165\n00:08:40.103 --> 00:08:41.710\nMaybe you're in a different\nstate than this thing and\n\n166\n00:08:41.710 --> 00:08:43.075\nyou get a different\nwebsite because of that.\n\n167\n00:08:43.075 --> 00:08:46.117\nSo that's the whole idea\nof adding parameters.\n\n168\n00:08:46.117 --> 00:08:47.394\nI should have actually consulted him.\n\n169\n00:08:47.394 --> 00:08:51.538\nMy script is a whole lot more simplistic,\nand I could probably have used that.\n\n170\n00:08:51.538 --> 00:08:54.057\nBut that's fine, it's a really good idea,\ngood job Ronnie.\n\n171\n00:08:54.057 --> 00:08:56.657\n>> [LAUGH]\n>> It is using that because it shows you\n\n172\n00:08:56.657 --> 00:08:57.379\nthe difference.\n\n173\n00:08:57.379 --> 00:08:59.933\nAs something comes in I\nthrow a parameter at it and\n\n174\n00:08:59.933 --> 00:09:02.313\nit changes the way the script it runs,\nokay?\n\n175\n00:09:02.313 --> 00:09:06.953\nSo that's normally why we're using\nparameters to give us more functionality\n\n176\n00:09:06.953 --> 00:09:08.298\ninside of our script.\n\n177\n00:09:08.298 --> 00:09:13.057\nAnd, like I said, a good example of that\nis always the idea of you run a command\n\n178\n00:09:13.057 --> 00:09:15.636\nand it has an operator on the end, right?\n\n179\n00:09:15.636 --> 00:09:19.930\nAnd you have to remember that's an option,\nnot a thing that's a little more advanced,\n\n180\n00:09:19.930 --> 00:09:22.438\nbut same kind of idea for\nour intents and purposes.\n\n181\n00:09:22.438 --> 00:09:25.771\nSo, I throw an A at it,\nand I run the script.\n\n182\n00:09:25.771 --> 00:09:30.092\nWell, the script will operate under\nthe assumption that dollar sign one equals\n\n183\n00:09:30.092 --> 00:09:33.895\na and because dollar sign one equals\na I can make a set of conditions to do\n\n184\n00:09:33.895 --> 00:09:37.141\ncertain things that are different\nthan if it was b, right?\n\n185\n00:09:37.141 --> 00:09:41.483\nI can then go on to make it if it's a and\nb, right?\n\n186\n00:09:41.483 --> 00:09:45.222\nI'm sorry, dollar sign one and dollar sign\ntwo, and dollar sign one equals a and\n\n187\n00:09:45.222 --> 00:09:47.104\ndollar sign two equals b, then do this.\n\n188\n00:09:47.104 --> 00:09:51.263\nYou can start to see the added\nflexibility, the added control,\n\n189\n00:09:51.263 --> 00:09:53.351\nover the output of our scripts.\n\n190\n00:09:53.351 --> 00:09:56.380\nSo that is the main reason that we're\n\n191\n00:09:56.380 --> 00:10:00.750\ngonna use these parameters is to\nchange out the way the script works.\n\n192\n00:10:00.750 --> 00:10:03.131\nNow, Daniel, again,\nI think that the key here is,\n\n193\n00:10:03.131 --> 00:10:06.989\nto make sure that everybody understands,\nis that it allows to change these values.\n\n194\n00:10:06.989 --> 00:10:10.499\nWe can use then that dollar sign\none inside of our own script, and\n\n195\n00:10:10.499 --> 00:10:14.206\nregardless of what value it actually has,\nit just puts that in there\n\n196\n00:10:14.206 --> 00:10:17.610\ninstead of setting into stone\nas one particular equal value.\n\n197\n00:10:17.610 --> 00:10:18.794\nThat's what we can do.\n\n198\n00:10:18.794 --> 00:10:23.420\nDaniel actually you showed us zero through\nnine but what if I was really talking\n\n199\n00:10:23.420 --> 00:10:27.850\nabout running more scripts and\nneeding more parameters than that?\n\n200\n00:10:27.850 --> 00:10:30.324\nIs there actually things that go to 10,\n11, 12 etc.?\n\n201\n00:10:30.324 --> 00:10:33.109\n>> Yeah, and that starts to get\nreally advanced with the parameters.\n\n202\n00:10:33.109 --> 00:10:34.666\nIt's super simple to do.\n\n203\n00:10:34.666 --> 00:10:37.376\nIt's nothing difficult\nto make that happen.\n\n204\n00:10:37.376 --> 00:10:41.007\nWhen older versions of bash,\nright in the shell and\n\n205\n00:10:41.007 --> 00:10:44.360\nthe scripting that you can do with it.\n\n206\n00:10:44.360 --> 00:10:47.750\nSupport and the way that it works,\nthe changes it evolves over time.\n\n207\n00:10:47.750 --> 00:10:51.839\nWhen it first came out you were only able\nto use that zero though nine, right?\n\n208\n00:10:51.839 --> 00:10:54.057\nSo that was all you had available.\n\n209\n00:10:54.057 --> 00:10:57.146\nBut what if you had like what Ronnie said,\nI've got more variables or\n\n210\n00:10:57.146 --> 00:10:59.342\nmore parameters that I\nwanna pass to the script.\n\n211\n00:10:59.342 --> 00:11:00.503\nWhat do we do?\n\n212\n00:11:00.503 --> 00:11:03.730\nWell, they've increased\nthat functionality now.\n\n213\n00:11:03.730 --> 00:11:08.320\nAnd so instead of just saying, and\nthis is going to be inside the script.\n\n214\n00:11:08.320 --> 00:11:11.919\nI tell you what, let's take a look at\na script and see how that works and\n\n215\n00:11:11.919 --> 00:11:14.246\nthen I can show you how\nthat can be added to it.\n\n216\n00:11:14.246 --> 00:11:16.444\nSo let me just get out of here real quick.\n\n217\n00:11:16.444 --> 00:11:19.368\nAnd I will Nano this,\nit's called parameters.\n\n218\n00:11:19.368 --> 00:11:19.972\nHow about that?\n\n219\n00:11:19.972 --> 00:11:20.993\nLook at me being creative.\n\n220\n00:11:20.993 --> 00:11:24.070\nSo what's going on in the script?\n\n221\n00:11:24.070 --> 00:11:25.695\nIt's just a bunch of echo statements,\nright?\n\n222\n00:11:25.695 --> 00:11:32.881\nIf I echo parameter zero is and then I\ncall a variable, what's it gonna do?\n\n223\n00:11:32.881 --> 00:11:35.181\nIt's gonna say parameter zero is this.\n\n224\n00:11:35.181 --> 00:11:39.653\nSo we know by looking at our little,\nwhat do we call,\n\n225\n00:11:39.653 --> 00:11:44.548\ndiagram here,\nthat that is going to be whatever this is.\n\n226\n00:11:44.548 --> 00:11:48.185\nSo whatever this script name is going\nto be whatever gets echoed, right?\n\n227\n00:11:48.185 --> 00:11:52.267\nAnd then echo \"Parameter\n1 is going to be $1.\n\n228\n00:11:52.267 --> 00:11:56.505\nSo if I add a parameter, it's gonna echo\nthat and show it to me on the screen.\n\n229\n00:11:56.505 --> 00:11:57.608\nSame thing with 2.\n\n230\n00:11:57.608 --> 00:11:59.419\nSo very simple items\nall the way up to ten.\n\n231\n00:11:59.419 --> 00:12:05.057\nIf I wanted to go up to ten, so\nlet's say I've done this for\n\n232\n00:12:05.057 --> 00:12:09.431\nevery one of our standard\nparameter places,\n\n233\n00:12:09.431 --> 00:12:14.032\nall I'd have to do is say\nonce I got past 9 I would\n\n234\n00:12:14.032 --> 00:12:18.978\nsay echo \"Parameter 10 is,\nand then say, ooh,\n\n235\n00:12:18.978 --> 00:12:23.730\nlet me back that up,\nlike to be consistent here.\n\n236\n00:12:23.730 --> 00:12:30.558\nAnd how I would do that is like this,\n$ {10}.\n\n237\n00:12:30.558 --> 00:12:33.830\nSo if I need to go beyond 9 I can do that.\n\n238\n00:12:33.830 --> 00:12:36.619\nI need to start using that\ndollar sign curly brace, and\n\n239\n00:12:36.619 --> 00:12:40.335\nthen whatever number, instead of\njust dollar sign number, all right?\n\n240\n00:12:40.335 --> 00:12:44.100\nSo it just changes a little bit in the\nsyntax and then you can go beyond that.\n\n241\n00:12:44.100 --> 00:12:47.274\nAnd I'm going to show you,\nactually, in just a little bit,\n\n242\n00:12:47.274 --> 00:12:51.586\na way that In previous versions you got\naround that limitation by using a command.\n\n243\n00:12:51.586 --> 00:12:55.724\nBut for right now, in today's modern\nworld, we get all the lovely luxuries\n\n244\n00:12:55.724 --> 00:12:59.733\nthat are afforded to us and going beyond\n[LAUGH] nine different variables,\n\n245\n00:12:59.733 --> 00:13:03.827\nor nine different parameters,\nis available to us in most modern systems.\n\n246\n00:13:03.827 --> 00:13:07.565\nAnd that command I want to show you in\na little bit will work if maybe you're\n\n247\n00:13:07.565 --> 00:13:09.012\nworking on an older system so\n\n248\n00:13:09.012 --> 00:13:11.810\nif you need to do that,\nyou can still make that happen.\n\n249\n00:13:11.810 --> 00:13:15.639\n>> Now Daniel, I also see that there's\nsome special characters that we have to be\n\n250\n00:13:15.639 --> 00:13:18.378\naware of when we work with\nthe parameter values as well.\n\n251\n00:13:18.378 --> 00:13:19.319\nHow do we use those?\n\n252\n00:13:19.319 --> 00:13:21.583\n>> Yeah,\nI will talk about special characters.\n\n253\n00:13:21.583 --> 00:13:26.573\nLet's actually run this script and let's\nshow the good folks out there at home how\n\n254\n00:13:26.573 --> 00:13:29.629\nthis stuff actually works\nitself out in reality.\n\n255\n00:13:29.629 --> 00:13:33.832\nSo, let's see here, I will Ctrl+X and,\nno, I don't want to save the changes.\n\n256\n00:13:33.832 --> 00:13:34.647\nThere we go.\n\n257\n00:13:34.647 --> 00:13:36.484\nLet's run it, parameters, and\n\n258\n00:13:36.484 --> 00:13:39.967\nyou'll notice that I didn't\ngive it any parameters, right?\n\n259\n00:13:39.967 --> 00:13:41.116\nI just ran the script.\n\n260\n00:13:41.116 --> 00:13:42.568\nWhat did it do?\n\n261\n00:13:42.568 --> 00:13:47.915\nIt did parameter zero is parameters.sh,\nright, because that's right here,\n\n262\n00:13:47.915 --> 00:13:53.103\nthat's our 0th place, but since I\ndidn't give it anything, it didn't have\n\n263\n00:13:53.103 --> 00:13:58.317\nanything No parameters, it didn't have\nanything to echo, so I got nothing.\n\n264\n00:13:58.317 --> 00:14:02.090\nAnd I just got Parameter 1 is nothing,\nand Parameter 2 is nothing.\n\n265\n00:14:02.090 --> 00:14:04.028\nSo let's add some parameters to it.\n\n266\n00:14:04.028 --> 00:14:06.711\nLet's add Daniel.\n\n267\n00:14:06.711 --> 00:14:10.599\nAnd now I see that\nparameter one is Daniel,\n\n268\n00:14:10.599 --> 00:14:14.920\nbecause that $1 is what\nit's trying to echo.\n\n269\n00:14:14.920 --> 00:14:17.565\nWhatever that value is,\nis what's gonna come out in the script.\n\n270\n00:14:17.565 --> 00:14:21.345\nAgain, you see that nothing happens\nin parameter two because no\n\n271\n00:14:21.345 --> 00:14:23.103\nsecond parameter was given.\n\n272\n00:14:23.103 --> 00:14:24.357\nSo let's do that.\n\n273\n00:14:24.357 --> 00:14:27.516\nLet's say, Ronnie.\n\n274\n00:14:27.516 --> 00:14:32.961\nNow you can see by adding a parameter.\n\n275\n00:14:32.961 --> 00:14:37.801\nI changed the way, or at least I changed\nthe outcome, of what the script is,\n\n276\n00:14:37.801 --> 00:14:41.145\nit gave it value, and\nallowed it to echo that value.\n\n277\n00:14:41.145 --> 00:14:45.642\nSo that's how that works,\nthis is very simplistic example of that,\n\n278\n00:14:45.642 --> 00:14:48.520\nI actually have a more realistic approach.\n\n279\n00:14:48.520 --> 00:14:52.055\nAnd what I've done is I've created\na menu system using parameters, right?\n\n280\n00:14:52.055 --> 00:14:53.332\nSo let's take a look at that.\n\n281\n00:14:53.332 --> 00:14:56.999\nLet's see here, it is called 1param.sh.\n\n282\n00:14:56.999 --> 00:14:59.194\nThat was my script, I believe that's it.\n\n283\n00:14:59.194 --> 00:15:01.899\nSo, let's take a look in there.\n\n284\n00:15:04.859 --> 00:15:07.910\nAnd, wow,\nthere’s a whole lot more going on here.\n\n285\n00:15:07.910 --> 00:15:11.376\nThis is another one of those culminating\nscripts that I created where all of\n\n286\n00:15:11.376 --> 00:15:14.402\nthe previous episodes there should\nbe a little bit of something,\n\n287\n00:15:14.402 --> 00:15:16.618\nor at least most things,\ninside of the script.\n\n288\n00:15:16.618 --> 00:15:18.973\nWe should know what's going on\noff the top of the bat here,\n\n289\n00:15:18.973 --> 00:15:20.670\nbecause we've got a bunch of functions.\n\n290\n00:15:20.670 --> 00:15:23.868\nLooking through our functions,\nwe've got a welcome function,\n\n291\n00:15:23.868 --> 00:15:27.369\nwe've got a sub-menu1 function,\nsub-menu2, and sub-menu3.\n\n292\n00:15:27.369 --> 00:15:30.673\nSo we've got four total functions,\none's a welcome screen.\n\n293\n00:15:30.673 --> 00:15:33.018\nSo basically giving me a welcome menu.\n\n294\n00:15:33.018 --> 00:15:37.673\nThe others are submenus\nunderneath that welcome, right?\n\n295\n00:15:37.673 --> 00:15:40.017\nSo what's going on with the script?\n\n296\n00:15:40.017 --> 00:15:45.948\nOnce we come down here, you'll notice\nI created another variable and\n\n297\n00:15:45.948 --> 00:15:52.999\nI put the value of the first parameter in\nthat variable, so I don't mess with that.\n\n298\n00:15:52.999 --> 00:15:57.569\nThat's why I created a different\nvariable so that the original variable,\n\n299\n00:15:57.569 --> 00:16:00.770\nthat dollar sign one,\nretains it's value, okay?\n\n300\n00:16:01.800 --> 00:16:06.200\nAnd then I created a case system\njust saying case prime in and\n\n301\n00:16:06.200 --> 00:16:11.040\nit runs sub_menu1 if it's 1,\nso if that parameter equals 1,\n\n302\n00:16:11.040 --> 00:16:17.466\nif that's what I put as my parameter when\nI run the script, it should run sub_menu1.\n\n303\n00:16:17.466 --> 00:16:18.881\nWhat is sub_menu1?\n\n304\n00:16:18.881 --> 00:16:21.174\nIt's a function so\nit's gonna all that function.\n\n305\n00:16:21.174 --> 00:16:24.110\nIf it's 2, it's gonna run sub_menu2,\nif it's 3, it's gonna run sub_menu3.\n\n306\n00:16:24.110 --> 00:16:26.000\nAnd then if it's anything else,\nif I put 4 in, or 5, or 10, or 50,000,\n\n307\n00:16:26.000 --> 00:16:32.020\nit's just gonna run the welcome screen\nbecause I didn't pass it a legitimate\n\n308\n00:16:32.020 --> 00:16:38.780\nparameter, so that's where my\ncase function's working here.\n\n309\n00:16:38.780 --> 00:16:42.500\nThen underneath that I'm running\nthat welcome screen, right.\n\n310\n00:16:42.500 --> 00:16:44.383\nWhat happens when I run\nthe welcome screen?\n\n311\n00:16:44.383 --> 00:16:45.716\nWhat else do I want it to do?\n\n312\n00:16:45.716 --> 00:16:48.800\nWe'll I'm creating another Case\ncommand cuz it's gonna read input.\n\n313\n00:16:48.800 --> 00:16:52.406\nIf you look up in the welcome\nyou'll notice it's reading\n\n314\n00:16:52.406 --> 00:16:55.424\nsome value that's gonna\nask the user to input.\n\n315\n00:16:55.424 --> 00:16:59.829\nSo once that's done, I create another\nCase command or a Case function,\n\n316\n00:16:59.829 --> 00:17:02.870\nI say function,\nit's a conditional statement.\n\n317\n00:17:02.870 --> 00:17:05.899\nAnd another case conditional statement,\nto say,\n\n318\n00:17:05.899 --> 00:17:09.211\nwhatever that is,\nfeed that through a list of things and\n\n319\n00:17:09.211 --> 00:17:13.610\ndo sub_menu1, sub_menu2,\nsub_menu3, and then 4 would exit.\n\n320\n00:17:13.610 --> 00:17:17.276\nIf you used 4,\nthat would exit out the script.\n\n321\n00:17:17.276 --> 00:17:21.188\nAnything else it''ll say,\nYou didn't make a selection,\n\n322\n00:17:21.188 --> 00:17:25.883\nyou basically left it blank and\nhit Enter, and it will rerun the script.\n\n323\n00:17:25.883 --> 00:17:29.438\nThat's what I'm doing right here so\nthat it will rerun\n\n324\n00:17:29.438 --> 00:17:33.780\ninside the same shell that I'm in,\nI put that bash command there.\n\n325\n00:17:33.780 --> 00:17:37.600\nAnd then I just close my Case\nstatements out with esacs.\n\n326\n00:17:37.600 --> 00:17:40.752\nSo now when we run this we\nshould see some different\n\n327\n00:17:40.752 --> 00:17:44.216\noutput depending on how we\nthrow the parameters at it.\n\n328\n00:17:44.216 --> 00:17:47.726\nSo let's just close this out,\nwe'll run it as normal and\n\n329\n00:17:47.726 --> 00:17:50.299\nsee how it works without any parameters.\n\n330\n00:17:50.299 --> 00:17:54.089\nSo I'll say ./param, I'm sorry,\n\n331\n00:17:54.089 --> 00:17:58.841\n1param, I do that to make it easy,\nI mess myself up.\n\n332\n00:17:58.841 --> 00:18:01.679\nThere we go, so it's asking me,\nWelcome to the menu script,\n\n333\n00:18:01.679 --> 00:18:03.660\nPlease choose a menu option number.\n\n334\n00:18:03.660 --> 00:18:07.610\n1)Small, 2)Medium, 3)Large, and 4)Exit.\n\n335\n00:18:07.610 --> 00:18:10.440\nSo okay, so far, so good,\neverything looks cool.\n\n336\n00:18:10.440 --> 00:18:13.868\nIf I do 1 and hit Enter, it says,\nYou are in the \"Small\" sub-menu.\n\n337\n00:18:13.868 --> 00:18:17.570\nAnd then I didn't go\nany further than that,\n\n338\n00:18:17.570 --> 00:18:23.190\nI left it a little bit more simplistic,\nvery simple, nothing to it.\n\n339\n00:18:23.190 --> 00:18:27.549\nBut, I had to go through this\nwelcome menu to get there.\n\n340\n00:18:27.549 --> 00:18:30.156\nThat's where my parameters come in.\n\n341\n00:18:32.140 --> 00:18:34.708\nLet me exit out of here, 4,\n\n342\n00:18:34.708 --> 00:18:40.716\nwhat if I run it with a parameter\nlike that, as 1, what does it do?\n\n343\n00:18:40.716 --> 00:18:43.666\nIt goes ahead and\njumps that welcome menu and\n\n344\n00:18:43.666 --> 00:18:47.848\ngoes right in to the sub-menu\nthat is \"Small\", right.\n\n345\n00:18:47.848 --> 00:18:49.702\nSo I've affected the way the script works,\n\n346\n00:18:49.702 --> 00:18:51.967\nI'm bypassing things that\nmaybe I don't need to do.\n\n347\n00:18:51.967 --> 00:18:54.620\nThis'll come in handy when you're\nwriting scripts that have a menu.\n\n348\n00:18:54.620 --> 00:19:00.130\nMaybe I have a script that does networking\nstuff and maybe I want to do a script that\n\n349\n00:19:00.130 --> 00:19:05.770\nmaybe affects the Ethernet, or network\ncard, and then I want to, in the same\n\n350\n00:19:05.770 --> 00:19:11.120\nscript, have a menu that does Iptables,\nright, creates firewalls input.\n\n351\n00:19:12.770 --> 00:19:14.965\nSo I wanna create a firewall rule.\n\n352\n00:19:14.965 --> 00:19:18.463\nI could do both inside the same\nscript by creating functions and\n\n353\n00:19:18.463 --> 00:19:22.423\nusing parameters to say, well I could\ngo through a menu system that gets\n\n354\n00:19:22.423 --> 00:19:25.855\nme to where I want to go, or\nI can jump right to where I wanna be,\n\n355\n00:19:25.855 --> 00:19:28.841\ncreating the output that I\nwant by using parameters.\n\n356\n00:19:28.841 --> 00:19:33.019\nSo it's a very, very helpful thing, and as\nyou can see we can run through this if I\n\n357\n00:19:33.019 --> 00:19:35.924\ndo 2, you'll notice it\njumps me right to \"Medium\".\n\n358\n00:19:35.924 --> 00:19:41.256\nIf I do 3, we get the same thing, we go\nto \"Large\", or what happens if I do 4?\n\n359\n00:19:41.256 --> 00:19:42.716\nLet's see what happens.\n\n360\n00:19:42.716 --> 00:19:45.976\nYou'll notice it jumps me to the welcome\nbecause 4 was not a valid option,\n\n361\n00:19:45.976 --> 00:19:49.391\nso it just puts me right into the welcome,\nthat's that first case statement,\n\n362\n00:19:49.391 --> 00:19:50.341\nthat's what it did.\n\n363\n00:19:50.341 --> 00:19:53.405\nAnd from here what if I put 5?\n\n364\n00:19:53.405 --> 00:19:56.018\nYou'll notice,\nYou didn't make a selection, or\n\n365\n00:19:56.018 --> 00:19:59.924\nI should have put you made an invalid\nselection, and welcome to the script.\n\n366\n00:19:59.924 --> 00:20:04.244\nIt ran that welcome function over\nagain and now I can continue on and\n\n367\n00:20:04.244 --> 00:20:08.103\nmake a correct selection, and\nit'll keep doing this until\n\n368\n00:20:08.103 --> 00:20:12.132\nI make a valid selection or\nI Ctrl+C out of the actual script.\n\n369\n00:20:12.132 --> 00:20:14.025\nSo now you're starting to see the power.\n\n370\n00:20:15.325 --> 00:20:17.735\nNow we move to Ronnie's question,\nall right.\n\n371\n00:20:17.735 --> 00:20:21.380\nWe're going back into these special\nparameters that we have available to us.\n\n372\n00:20:21.380 --> 00:20:24.830\nAnd they kinda just increase\nthe functionality of parameters.\n\n373\n00:20:24.830 --> 00:20:29.000\nLet me jump back over here to my simple\ndiagrams and if I take a look here.\n\n374\n00:20:29.000 --> 00:20:31.860\nHere are our Special Parameter Variables.\n\n375\n00:20:31.860 --> 00:20:34.320\nThe first one is $*.\n\n376\n00:20:34.320 --> 00:20:40.579\nAs you can see it says Includes all given\nparameters as it's a single word, so\n\n377\n00:20:40.579 --> 00:20:46.931\nif I had Daniel, Ronnie, Wes, Mike and\nDon as my parameters, and I use .* or\n\n378\n00:20:46.931 --> 00:20:53.132\nI use $* as the variable, it's gonna\nsee that as one long string of words.\n\n379\n00:20:53.132 --> 00:20:58.257\nBasically all of us are the same thing,\nright, that's one variable.\n\n380\n00:20:58.257 --> 00:21:01.174\nWe also have this $@, right.\n\n381\n00:21:01.174 --> 00:21:04.782\nThis Includes all given parameters\nas individual words, so\n\n382\n00:21:04.782 --> 00:21:09.168\ninstead of seeing one long string,\nit'll see Daniel, it will see Mike,\n\n383\n00:21:09.168 --> 00:21:14.750\nit will see Ronnie, it'll see Wes and\nit'll see Don as separate parameters.\n\n384\n00:21:14.750 --> 00:21:20.340\nSo this is really cool that we can use\nthat, the things like for loops, right?\n\n385\n00:21:20.340 --> 00:21:24.716\nRemember with for loops you can throw\nthat and give a list of things to do and\n\n386\n00:21:24.716 --> 00:21:27.341\nit'll run through each one of those items.\n\n387\n00:21:27.341 --> 00:21:32.090\nWell when I use that $@, I can\nbasically say for variable in $@, and\n\n388\n00:21:32.090 --> 00:21:36.683\nevery one of the parameters that\nwere given when I started the thing,\n\n389\n00:21:36.683 --> 00:21:42.175\nit will pipe that into that for loop and\nrun through them and iterate through that.\n\n390\n00:21:42.175 --> 00:21:43.597\nSo it's very handy,\n\n391\n00:21:43.597 --> 00:21:49.048\nit reduces the amount of typing that maybe\nyou'll be doing as a scriptor, and lets\n\n392\n00:21:49.048 --> 00:21:54.423\nthe user give the variable input without\nhaving to go through a lot of prompting.\n\n393\n00:21:54.423 --> 00:21:58.443\nYou can just say, hey, just right out of\nthe gate, just add those variables and\n\n394\n00:21:58.443 --> 00:22:01.395\nthey'll jump right into the script and\nrun as necessary.\n\n395\n00:22:01.395 --> 00:22:03.424\nSo very, very handy there.\n\n396\n00:22:03.424 --> 00:22:07.091\nAnd then this one, the $#,\nit Counts all the parameters.\n\n397\n00:22:07.091 --> 00:22:10.450\nAnd I can use that in things like\ngreater than, less than, equal to.\n\n398\n00:22:10.450 --> 00:22:15.220\nThose kind of scripts, where I'm saying\ncount all the parameters given, and\n\n399\n00:22:15.220 --> 00:22:18.780\nif the amount of parameters\ngiven is less than five,\n\n400\n00:22:18.780 --> 00:22:23.330\nthen do this, if it equals five, then\ndo this, else do something else, right?\n\n401\n00:22:23.330 --> 00:22:26.380\nSo you're starting to see\nhow we can use these.\n\n402\n00:22:26.380 --> 00:22:27.770\nAnd then this is one of the more,\n\n403\n00:22:27.770 --> 00:22:31.660\nprobably more practical\nexamples of special parameters.\n\n404\n00:22:31.660 --> 00:22:35.180\nWhat if I have something like \"Red Hat\",\nand it's two words?\n\n405\n00:22:35.180 --> 00:22:40.591\nI don't want it to be $1 and $2,\nI want it to be inside of $1.\n\n406\n00:22:40.591 --> 00:22:45.031\nI gotta put double quotes around that,\nand if I put those double quotes around\n\n407\n00:22:45.031 --> 00:22:48.308\na whole entire string of words,\nit'll put that in $1,\n\n408\n00:22:48.308 --> 00:22:52.770\nand it's treated as one variable instead\nof multiple different variables.\n\n409\n00:22:52.770 --> 00:22:55.544\nSo those are our special\nparameters that we need,\n\n410\n00:22:55.544 --> 00:22:57.467\nand we can play around with those.\n\n411\n00:22:57.467 --> 00:23:01.951\nLet me see, yeah, I didn't create\nany scripts with this just because I\n\n412\n00:23:01.951 --> 00:23:06.860\ndidn't wanna take the time to do it, I\nknew I had a lot to pack in this episode.\n\n413\n00:23:06.860 --> 00:23:09.133\nBut it's pretty simple,\nthey're just variables,\n\n414\n00:23:09.133 --> 00:23:12.174\nyou throw them in your scripts and\nyou do whatever you need to with them.\n\n415\n00:23:12.174 --> 00:23:18.257\nAnd you just use these variable names\nto do that, so very simple stuff.\n\n416\n00:23:18.257 --> 00:23:20.235\nLet's see here Ronnie,\nwhere does that bring us to?\n\n417\n00:23:20.235 --> 00:23:21.205\n>> Shift command.\n\n418\n00:23:21.205 --> 00:23:23.549\n>> The shift command, that's right.\n\n419\n00:23:23.549 --> 00:23:28.378\nSo I told you before that there was\na way that we could get beyond having\n\n420\n00:23:28.378 --> 00:23:33.216\nnine parameters, or ten specifically\nparameters, but only nine.\n\n421\n00:23:33.216 --> 00:23:37.242\nOne thing I do need to go back and tell\nyou is, is that, and this is because it's\n\n422\n00:23:37.242 --> 00:23:41.091\nnow pertinent, is when we use the shift\ncommand, basically what it does.\n\n423\n00:23:41.091 --> 00:23:43.203\nLet me, I got a nice little diagram here.\n\n424\n00:23:43.203 --> 00:23:45.805\nWe're used to this, right, we saw this.\n\n425\n00:23:45.805 --> 00:23:50.212\nThis is the standard\nway in which parameters\n\n426\n00:23:50.212 --> 00:23:55.700\nParameters get assigned\nvalue to variables, right?\n\n427\n00:23:55.700 --> 00:23:56.498\nAnything in this position is $0.\n\n428\n00:23:56.498 --> 00:24:01.310\nAnything in this position is $1,\n2, 3 and so forth.\n\n429\n00:24:01.310 --> 00:24:06.300\nWe employ the shift command,\nwhat that dose is it shifts the parameters\n\n430\n00:24:06.300 --> 00:24:09.360\nto the left by one place.\n\n431\n00:24:09.360 --> 00:24:11.800\nAll right, so we see that here.\n\n432\n00:24:11.800 --> 00:24:12.360\nI've got shift.\n\n433\n00:24:12.360 --> 00:24:16.870\nIf I use shift with dot slash script sh,\nyou'll notice that param2,\n\n434\n00:24:16.870 --> 00:24:22.010\nwhat's over here was dollar sign 2,\nbecomes dollar sign 1.\n\n435\n00:24:22.010 --> 00:24:24.800\nThat's the shift, right.\n\n436\n00:24:24.800 --> 00:24:29.920\nThat's moving,\nyou'll notice we lose Param1.\n\n437\n00:24:29.920 --> 00:24:30.920\nWhat happens to param1?\n\n438\n00:24:30.920 --> 00:24:35.150\nParam1 gets chucked into the bit\nbucket and we never see it again.\n\n439\n00:24:35.150 --> 00:24:36.180\nSo, if I employ shift,\n\n440\n00:24:36.180 --> 00:24:40.905\nI have to keep that in mind that\nit's gonna shift those values over.\n\n441\n00:24:40.905 --> 00:24:44.555\nAnd it's gonna eject whatever is in that\nfirst parameter and it's gonna be gone.\n\n442\n00:24:44.555 --> 00:24:47.265\nIt's gonna no longer have value.\n\n443\n00:24:47.265 --> 00:24:49.355\nRight?\nThis becomes this' value.\n\n444\n00:24:49.355 --> 00:24:51.105\nWhen I use shift, all right.\n\n445\n00:24:51.105 --> 00:24:52.095\nThat's just a shift command.\n\n446\n00:24:53.100 --> 00:24:56.690\nWhat if I wanted to move\nit more than one/ Right?\n\n447\n00:24:56.690 --> 00:24:59.600\nRemember I said I've got more than ten.\n\n448\n00:24:59.600 --> 00:25:03.700\nWell, I could do that if I said shift\nnine, and I had ten parameters,\n\n449\n00:25:03.700 --> 00:25:04.730\nwhat's going to happen?\n\n450\n00:25:04.730 --> 00:25:09.820\nEverything's going to shift over and\nthat last parameter is going to\n\n451\n00:25:09.820 --> 00:25:12.090\nbecome number one, so\nthat way I could do ten, 11, 12, and 13.\n\n452\n00:25:12.090 --> 00:25:14.810\nThat was an old crafty way that\nthe scripters used to get more than\n\n453\n00:25:14.810 --> 00:25:19.840\nnine parameters into a script,\nthey would use the shift command.\n\n454\n00:25:19.840 --> 00:25:22.280\nReally now that we have\nthe functionality of doing dollar sign,\n\n455\n00:25:22.280 --> 00:25:27.010\ncurly brace, whatever number, I don't\nknow of any reason to use this anymore.\n\n456\n00:25:27.010 --> 00:25:31.680\nThis was the main, I guess you can, if you\ndon't know what a variable is going to be,\n\n457\n00:25:31.680 --> 00:25:33.290\nthat might be a good reason to use this.\n\n458\n00:25:33.290 --> 00:25:34.490\nThat it's off to the side and\n\n459\n00:25:34.490 --> 00:25:38.490\nyou need to move it into that\n$1 command you can shit it over.\n\n460\n00:25:38.490 --> 00:25:40.970\nAnd say anything after that,\nI'm gonna put it in the first.\n\n461\n00:25:40.970 --> 00:25:46.500\nIf someone adds more variables\nthan what you were expecting.\n\n462\n00:25:46.500 --> 00:25:49.390\nYou can kind of account for\nthat using shifts.\n\n463\n00:25:49.390 --> 00:25:51.510\nThat's basically the shift command.\n\n464\n00:25:51.510 --> 00:25:53.710\nPretty simple.\n\n465\n00:25:53.710 --> 00:25:57.170\nNo real example for that other than, just\nthrow the shift command into your script.\n\n466\n00:25:57.170 --> 00:25:58.870\nAll you would have to do is basically.\n\n467\n00:25:58.870 --> 00:26:01.550\nLook at that, it's looking for\nme to do something.\n\n468\n00:26:01.550 --> 00:26:06.600\nIf I wanted to put shift in here,\nI would do, nano like that.\n\n469\n00:26:06.600 --> 00:26:07.150\nNot like that.\n\n470\n00:26:07.150 --> 00:26:11.790\nNano, what was that one called?\n\n471\n00:26:11.790 --> 00:26:13.210\nOne param?\nOne param.\n\n472\n00:26:13.210 --> 00:26:13.750\nYeah.\n\n473\n00:26:13.750 --> 00:26:19.390\nI would just have to come\nin here Somewhere in here,\n\n474\n00:26:19.390 --> 00:26:22.090\nlet's say, like in here.\n\n475\n00:26:22.090 --> 00:26:23.570\nSay shift, just like that.\n\n476\n00:26:23.570 --> 00:26:25.410\nThat's all you have to do.\n\n477\n00:26:25.410 --> 00:26:29.710\nIf I wanted to do shift three places,\nI would do shift three.\n\n478\n00:26:29.710 --> 00:26:31.380\nThat's it.\nThat's all you would need to do to\n\n479\n00:26:31.380 --> 00:26:33.040\nstart shifting around your parameters.\n\n480\n00:26:33.040 --> 00:26:33.900\nPretty simple,\n\n481\n00:26:33.900 --> 00:26:38.700\npretty straight forward, and then you\nget the outputs you're looking for.\n\n482\n00:26:38.700 --> 00:26:40.220\nAll right, what else do we have?\n\n483\n00:26:40.220 --> 00:26:42.690\nWe have one last thing about parameters.\n\n484\n00:26:42.690 --> 00:26:44.520\nIf you watched the episode on functions,\n\n485\n00:26:44.520 --> 00:26:46.250\nremember, they're like\nlittle mini scripts.\n\n486\n00:26:46.250 --> 00:26:49.590\nWell guess what,\nthey get their own parameters.\n\n487\n00:26:49.590 --> 00:26:51.640\nSo, you have the main script,\nwhich gets parameters,\n\n488\n00:26:51.640 --> 00:26:54.720\nand you also have the functions\ninside of that script,\n\n489\n00:26:54.720 --> 00:26:57.480\nwhich are mini scripts which\nget their own parameters.\n\n490\n00:26:57.480 --> 00:26:58.670\nWe can use those as well.\n\n491\n00:26:58.670 --> 00:27:03.900\nIt's just,\nwe gotta know how to actually do it.\n\n492\n00:27:03.900 --> 00:27:06.270\nLet me get out of here.\n\n493\n00:27:06.270 --> 00:27:09.270\nI'll say no and let's see here.\n\n494\n00:27:09.270 --> 00:27:12.010\nIf I nano function.param sh,\ngot a nice little easy script for\n\n495\n00:27:12.010 --> 00:27:13.580\nus to take a look at.\n\n496\n00:27:13.580 --> 00:27:16.520\nBasically made a very small function here,\nright?\n\n497\n00:27:16.520 --> 00:27:21.130\nSo I'm calling it add because I'm gonna\nhave it add some numbers together.\n\n498\n00:27:21.130 --> 00:27:27.810\nAnd then I create a variable, and\nI'm saying $1, we know what that is right?\n\n499\n00:27:27.810 --> 00:27:29.200\nAnd then $2.\n\n500\n00:27:29.200 --> 00:27:31.390\nSo we're gonna add two\nparameters together,\n\n501\n00:27:31.390 --> 00:27:35.130\nwhatever their values may be, and\nthen echo whatever that sum is.\n\n502\n00:27:35.130 --> 00:27:37.380\nThat's our function.\n\n503\n00:27:38.740 --> 00:27:41.870\nWhen I come down here, I create sum 2,\nand here's where I call.\n\n504\n00:27:41.870 --> 00:27:45.690\nI say, here are the parameters for\nmy function.\n\n505\n00:27:45.690 --> 00:27:49.170\nSo it works really similarly to\nthe way that we do with our scripts,\n\n506\n00:27:49.170 --> 00:27:54.430\nI do ./ script name and then my parameters\none, two, three, four and five.\n\n507\n00:27:54.430 --> 00:27:55.810\nHere's the same kind of thing.\n\n508\n00:27:55.810 --> 00:28:00.090\nWe do $(add,\nwhich is the function name, right?\n\n509\n00:28:00.090 --> 00:28:01.345\nThat's the function name.\n\n510\n00:28:01.345 --> 00:28:06.660\nAnd then $1 will be 10,\n$2 will be 15, so on and so forth and\n\n511\n00:28:06.660 --> 00:28:14.550\nthe same rules apply to work\nparameters into my function.\n\n512\n00:28:14.550 --> 00:28:18.770\nSo, $1 will equal 10, $2 will equal 15,\nand I've taken that output, and\n\n513\n00:28:18.770 --> 00:28:21.000\nI've shoved it into sum2 and\nI'm going to echo that out.\n\n514\n00:28:21.000 --> 00:28:24.130\nOkay, so we should get some\ninteresting functionality here.\n\n515\n00:28:24.130 --> 00:28:30.540\nLet me go out of there, we'll run that\nguy, dot slash function parameter.\n\n516\n00:28:30.540 --> 00:28:34.100\nAnd we see lets add some numbers ten and\n15 sounds good.\n\n517\n00:28:34.100 --> 00:28:36.460\nWe add them to answer we\nget the answer is 25.\n\n518\n00:28:36.460 --> 00:28:39.210\nAnd we did that all\nthrough using parameters,\n\n519\n00:28:39.210 --> 00:28:41.910\nassigning them to the function itself.\n\n520\n00:28:41.910 --> 00:28:45.770\nSo with a lot of functionality\nwhen it comes to parameters.\n\n521\n00:28:45.770 --> 00:28:49.630\nYou can see it's gonna add more\nflexibility, add more ability for\n\n522\n00:28:49.630 --> 00:28:51.990\nyou to change the output of your systems.\n\n523\n00:28:51.990 --> 00:28:53.060\nOr the scripts that you're writing.\n\n524\n00:28:53.060 --> 00:28:54.320\nAnd that could be a really good thing,\n\n525\n00:28:54.320 --> 00:28:56.540\nespecially when you're trying\nto bypass certain things.\n\n526\n00:28:56.540 --> 00:28:59.310\nOr if you have one user sitting down and\nthey're running the script,\n\n527\n00:28:59.310 --> 00:29:02.350\nit should do something different\nthan if another user sat down and\n\n528\n00:29:02.350 --> 00:29:03.980\nis running the same exact script.\n\n529\n00:29:03.980 --> 00:29:05.860\nSo that's why we wanna use the parameters.\n\n530\n00:29:05.860 --> 00:29:09.370\nWell, that's an excellent place for\nus to actually think about,\n\n531\n00:29:09.370 --> 00:29:10.780\nbecause a lot of times,\n\n532\n00:29:10.780 --> 00:29:15.300\nwhen we create the scripts, we don't\nknow the actual values that most people.\n\n533\n00:29:15.300 --> 00:29:18.490\nWe're not gonna be running the script or\nneeding to run the script.\n\n534\n00:29:18.490 --> 00:29:21.010\nReally are gonna be inputting in by\nsetting the parameters in place we give\n\n535\n00:29:21.010 --> 00:29:22.230\nthat flexibility that we need.\n\n536\n00:29:22.230 --> 00:29:24.620\nAnd it also makes it easier for us, right?\n\n537\n00:29:24.620 --> 00:29:28.210\nWe're not having to try and figure out\nwhat every single possible combination is.\n\n538\n00:29:28.210 --> 00:29:31.790\nWe have the user who knows and\nthey can then input values and\n\n539\n00:29:31.790 --> 00:29:35.710\nhelp our scripts to run effectively\nThe way that they need to.\n\n540\n00:29:35.710 --> 00:29:38.310\nDaniel, thank you again for\nthose demonstrations.\n\n541\n00:29:38.310 --> 00:29:42.120\nIt really did help us to understand\nthe use of parameters a little bit more.\n\n542\n00:29:42.120 --> 00:29:44.020\nThank you also for joining us as well.\n\n543\n00:29:44.020 --> 00:29:46.900\nSigning off for IT ProTV, I'm Ronnie Wong.\n\n544\n00:29:46.900 --> 00:29:49.013\nAnd I'm Daniel Lowery.\n\n545\n00:29:49.013 --> 00:29:49.563\nAnd we'll see you next time.\n\n546\n00:29:49.563 --> 00:29:55.580\n[MUSIC]\n\n",
          "vimeoId": "146521527"
        }
      ],
      "title": "Bash and Scripting"
    }
  ],
  "url": "bash-scripting",
  "vLab": false
}
