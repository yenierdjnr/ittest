{
  "description": "Becoming a Linux Power User is a technical skills course designed to elevate viewers to \"Power User\" status. Linux provides a very robust and powerful platform that enables users to achieve great things. Unfortunately, most users only scratch the surface of what Linux is capable of. This series explores some of the more powerful functions hidden away behind the graphical user interface. Topics cover using terminals and shells, managing processes and files, and writing simple shell scripts.",
  "descriptionMD": "Becoming a Linux Power User is a technical skills course designed to elevate viewers to \"Power User\" status. Linux provides a very robust and powerful platform that enables users to acheive great things. Unfortunately, most users only scratch the surface of what Linux is capable of. This series explores some of the more powerful functions hidden away behind the graphical user interface. Topics cover using terminals and shells, managing processes and files, and writing simple shell scripts.",
  "length": "31310",
  "name": "Becoming a Linux Power User",
  "practiceExam": false,
  "subtitle": "Becoming a Linux Power User",
  "tagUrl": "systems-admin",
  "topics": [
    {
      "episodes": [
        {
          "description": "Becoming a Linux Power User is a technical skills course designed to elevate viewers to \"Power User\" status. Linux provides a very robust and powerful platform that enables users to acheive great things. Unfortunately, most users only scratch the surface of what Linux is capable of. This series explores some of the more powerful functions hidden away behind the graphical user interface. Topics cover using terminals and shells, managing processes and files, and writing simple shell scripts.",
          "length": "260",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-0-0-overview-062317-PGM.00_00_05_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-0-0-overview-062317-PGM.00_00_05_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-0-0-overview-062317-PGM.00_00_05_22.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.181\n[MUSIC]\n\n2\n00:00:05.181 --> 00:00:06.526\nHello, thanks for watching.\n\n3\n00:00:06.526 --> 00:00:11.422\nBecoming a Linux power user is an exciting\ncourse we're offering here at ITPRO.TV,\n\n4\n00:00:11.422 --> 00:00:13.911\nand to tell us more\nabout that is Don Pezet.\n\n5\n00:00:13.911 --> 00:00:16.460\nHey, Don,\ntell us what is exactly the course?\n\n6\n00:00:16.460 --> 00:00:20.940\n&gt;&gt; This is a pretty neat course, because\nit is designed to get users introduced to\n\n7\n00:00:20.940 --> 00:00:23.160\nhow powerful an operating system Linux is.\n\n8\n00:00:23.160 --> 00:00:25.740\nA lot people hear about\nthe Linux Operating System and\n\n9\n00:00:25.740 --> 00:00:26.750\nthey wanna learn more.\n\n10\n00:00:26.750 --> 00:00:29.540\nThey go and they install it, they get\na nice little graphical user interface.\n\n11\n00:00:29.540 --> 00:00:32.450\nAnd they give you the basic things that\nthey're used to from other operating\n\n12\n00:00:32.450 --> 00:00:37.580\nsystems like Microsoft Windows and\nMAC OS and operating systems like that.\n\n13\n00:00:37.580 --> 00:00:39.580\nBut you hear about how powerful it can be.\n\n14\n00:00:39.580 --> 00:00:42.530\nAll this extra stuff, and\nyou don't immediately see it.\n\n15\n00:00:42.530 --> 00:00:43.230\nSo in this series,\n\n16\n00:00:43.230 --> 00:00:46.180\nwhat we're trying to do is pull back\nthe veil and give us a chance to look\n\n17\n00:00:46.180 --> 00:00:51.032\nat some of the really cool things you\ncan do behind the scenes, and it's hard.\n\n18\n00:00:51.032 --> 00:00:53.830\nIt's a challenging stuff, it's not stuff\nyou can just figure out on your own.\n\n19\n00:00:53.830 --> 00:00:56.880\nSo, getting a change to get\na guided tour through some\n\n20\n00:00:56.880 --> 00:00:59.560\nof the powerful back-end\nfeatures inside of Linux.\n\n21\n00:00:59.560 --> 00:01:02.170\nIs a really great thing to do,\nespecially if you're getting started.\n\n22\n00:01:02.170 --> 00:01:05.580\nAnd that's exactly what this episode,\nor this series, is all about.\n\n23\n00:01:05.580 --> 00:01:08.950\n&gt;&gt; Now, who would benefit most from\nwatching, becoming a Linux power user?\n\n24\n00:01:08.950 --> 00:01:12.180\n&gt;&gt; Well, mostly it's going to\nbenefit people who are new to Linux.\n\n25\n00:01:12.180 --> 00:01:13.880\nIf you've worked with Linux for\na long time,\n\n26\n00:01:13.880 --> 00:01:17.000\nif you've been using it in the field,\nyou may well already know these topics, so\n\n27\n00:01:17.000 --> 00:01:18.270\nit might be a little boring to you.\n\n28\n00:01:18.270 --> 00:01:22.060\nBut if you're just getting started it\nis really daunting, really challenging.\n\n29\n00:01:22.060 --> 00:01:25.010\nAnd instead of getting intimidated and\njust going back to Windows or going back\n\n30\n00:01:25.010 --> 00:01:28.770\nto Mac OS, here is the chance for you to\ntake that time to learn the features,\n\n31\n00:01:28.770 --> 00:01:30.940\nget used to it, understand how it works.\n\n32\n00:01:30.940 --> 00:01:34.510\nSo if you're just getting started\nwith Linux, if you are a desktop\n\n33\n00:01:34.510 --> 00:01:37.980\nsupport engineer, if you are a systems\nadministrator, that you're gonna\n\n34\n00:01:37.980 --> 00:01:41.340\nbe managing the Linux Operating System,\nthis is good knowledge to learn.\n\n35\n00:01:41.340 --> 00:01:45.290\nAnd what we're gonna see in this series\npertains to servers as well as work\n\n36\n00:01:45.290 --> 00:01:47.820\nstations, so\nif you're working in either environment,\n\n37\n00:01:47.820 --> 00:01:49.290\nyou'll benefit from this series as well.\n\n38\n00:01:49.290 --> 00:01:51.900\nSo, it really does cover\na good group of people.\n\n39\n00:01:51.900 --> 00:01:54.840\n&gt;&gt; Now, is there a certification\navailable for this course?\n\n40\n00:01:54.840 --> 00:01:58.000\n&gt;&gt; There are a lot of really good Linux\ncertifications that are out there,\n\n41\n00:01:58.000 --> 00:02:00.950\nmany of which cover some of the topics\nwe're gonna cover in this series.\n\n42\n00:02:00.950 --> 00:02:03.150\nBut this series isn't really\nbuilt around a search.\n\n43\n00:02:03.150 --> 00:02:06.930\nSo there's no exam based on this content,\nfor what we're creating here.\n\n44\n00:02:06.930 --> 00:02:10.230\nThis is really focused, not to get you\na certification to get you a job, but\n\n45\n00:02:10.230 --> 00:02:14.950\nto get you comfortable with Linux and\nbecoming that power user.\n\n46\n00:02:14.950 --> 00:02:17.360\nSo we tackle exactly what\nwe think is pertinent and\n\n47\n00:02:17.360 --> 00:02:20.290\nrelevant to a power user\nto get you to that point.\n\n48\n00:02:20.290 --> 00:02:23.180\nOn one hand, it's really nice because\nthat means we're not saddled by\n\n49\n00:02:23.180 --> 00:02:24.470\na list of objectives we have to follow.\n\n50\n00:02:24.470 --> 00:02:26.710\nWe get to hand pick what\nwe think is important.\n\n51\n00:02:26.710 --> 00:02:29.410\nOn the other hand, it's a little more\ndifficult to kind of show on the resume.\n\n52\n00:02:29.410 --> 00:02:32.660\nSo what a lot of people do is watch\na series like this to get started.\n\n53\n00:02:32.660 --> 00:02:35.583\nAnd then move on to do things\nlike CompTIA's Linux+ or\n\n54\n00:02:35.583 --> 00:02:37.650\nthe LPIC-1 certification.\n\n55\n00:02:37.650 --> 00:02:40.680\nThose certifications cover a lot of\nthe topics that we're gonna see here\n\n56\n00:02:40.680 --> 00:02:41.500\nin this series.\n\n57\n00:02:41.500 --> 00:02:44.140\nBut they're not mirrored up exactly,\nso these here won't get you ready for\n\n58\n00:02:44.140 --> 00:02:45.070\nthose exams.\n\n59\n00:02:45.070 --> 00:02:47.930\n&gt;&gt; So what are some of the topics\ncovered in becoming a Linux power user?\n\n60\n00:02:47.930 --> 00:02:49.530\n&gt;&gt; All right, we've got quite a few and\n\n61\n00:02:49.530 --> 00:02:53.510\nthe very first topic's probably the most\nimportant one, which is using the shell.\n\n62\n00:02:53.510 --> 00:02:55.320\nWhen you first launch a Linux desktop,\n\n63\n00:02:55.320 --> 00:02:57.570\nyou're gonna see\na graphical user interface.\n\n64\n00:02:57.570 --> 00:03:00.000\nAnd a graphical user interface is\nsomething you can stumble through and\n\n65\n00:03:00.000 --> 00:03:00.660\nfigure out on your own.\n\n66\n00:03:00.660 --> 00:03:02.800\nYou just click around until\nyou find what you want.\n\n67\n00:03:02.800 --> 00:03:06.290\nBut the shell, when you drop to\nthe command line there is so\n\n68\n00:03:06.290 --> 00:03:08.890\nmuch more you can do,\nbut it's so much harder.\n\n69\n00:03:08.890 --> 00:03:10.640\nAnd you can't just stumble around and\nfigure it out.\n\n70\n00:03:10.640 --> 00:03:11.820\nSo we're gonna learn how to use the shell.\n\n71\n00:03:11.820 --> 00:03:14.460\nWe're gonna learn how to\nnavigate the Unix and\n\n72\n00:03:14.460 --> 00:03:18.090\nLinux file system, which is very\ndifferent than the Windows file system.\n\n73\n00:03:18.090 --> 00:03:20.920\nWe'll talk about how to work\nwith text files, because almost\n\n74\n00:03:20.920 --> 00:03:24.790\nall of the Linux Operating System\nconfigurations are stored in text files.\n\n75\n00:03:24.790 --> 00:03:27.525\nWe need to know how to manipulate those,\nand edit, change them.\n\n76\n00:03:27.525 --> 00:03:29.710\nThen we're gonna take a look\nto how to manage processes,\n\n77\n00:03:29.710 --> 00:03:32.860\nhow to run applications,\nhow to make them perform better,\n\n78\n00:03:32.860 --> 00:03:36.610\nhow to stop them if they're not performing\nright and manipulate how they work.\n\n79\n00:03:36.610 --> 00:03:39.023\nAnd lastly, we're gonna learn how\nto write simple shell script.\n\n80\n00:03:39.023 --> 00:03:43.232\nShell scripting is really where a lot of\nthe power of the Linux Operating System\n\n81\n00:03:43.232 --> 00:03:43.944\ncomes from.\n\n82\n00:03:43.944 --> 00:03:48.530\nThe Linux OS was designed by\ndevelopers for developers.\n\n83\n00:03:48.530 --> 00:03:52.080\nAnd it's evolved a lot since then, so\nthat now it's good for everybody to use.\n\n84\n00:03:52.080 --> 00:03:55.560\nBut if we know how to do a little bit of\ndevelopment, we could take advantage of\n\n85\n00:03:55.560 --> 00:03:59.170\nthat and really streamline our\nworkflow by using shell scripts.\n\n86\n00:03:59.170 --> 00:04:01.220\nSo that's what we'll take a look\nat at the end of the series.\n\n87\n00:04:01.220 --> 00:04:02.260\n&gt;&gt; Well, thanks, Don.\n\n88\n00:04:02.260 --> 00:04:05.040\nNow, if this sounds like something that\nyou'd be interested in, and it should,\n\n89\n00:04:05.040 --> 00:04:09.220\nyou should check out all the episodes in\nthe Becoming a Linux Power User series.\n\n90\n00:04:09.220 --> 00:04:15.384\nThanks for watching.\n[MUSIC]\n\n",
          "vimeoId": "223181905"
        },
        {
          "description": "In this episode, Don and Mike discuss terminals in a Linux environment. They look at X-Term, GNOME, Terminator, and Guake. They explain the difference between preferences and profiles, and demonstrate configuring various aspects of a terminal.",
          "length": "1556",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-1-terminals_and_shells-061417-PGM.00_25_40_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-1-terminals_and_shells-061417-PGM.00_25_40_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-1-terminals_and_shells-061417-PGM.00_25_40_13.Still001-sm.jpg",
          "title": "Terminals and Shells",
          "transcript": "WEBVTT\n\n1\n00:00:00.200 --> 00:00:01.443\nWelcome to ITProTV I'm\nyour Host Don Pezet.\n\n2\n00:00:01.443 --> 00:00:07.314\n[CROSSTALK]\n\n3\n00:00:07.314 --> 00:00:09.612\n[MUSIC]\n\n4\n00:00:09.612 --> 00:00:12.267\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.267 --> 00:00:15.513\n&gt;&gt; Hello, welcome to another\nexciting episode here in ITProTV,\n\n6\n00:00:15.513 --> 00:00:20.023\nI'm your host Mike Rodrick, and today\nwe're doing becoming a Linux power user.\n\n7\n00:00:20.023 --> 00:00:23.706\nAnd specifically in this episode, we're\ngonna be taking a look at terminals and\n\n8\n00:00:23.706 --> 00:00:26.720\nshells, and talking about\nthe differences in what we do with them.\n\n9\n00:00:26.720 --> 00:00:30.596\nAnd here to explain that to us is Mr.\nDon Pezet, welcome Don.\n\n10\n00:00:30.596 --> 00:00:31.618\n&gt;&gt; Hey, thanks for having me, Mike.\n\n11\n00:00:31.618 --> 00:00:35.790\nAnd we're kicking off our series\non becoming a Linux power user.\n\n12\n00:00:35.790 --> 00:00:40.182\nAnd nothing says being a power user\nmore than dropping down to a shell and\n\n13\n00:00:40.182 --> 00:00:41.289\ngetting to work.\n\n14\n00:00:41.289 --> 00:00:44.994\nThe graphical user interface\nin Linux is optional.\n\n15\n00:00:44.994 --> 00:00:47.822\nOn a server,\nyou're likely not gonna have the GUI.\n\n16\n00:00:47.822 --> 00:00:50.457\nBut even on a desktop\nwhere you do have the GUI,\n\n17\n00:00:50.457 --> 00:00:54.187\nthe really powerful functionality\nis not in a button somewhere.\n\n18\n00:00:54.187 --> 00:00:56.317\nIt's not in a little switch you flip.\n\n19\n00:00:56.317 --> 00:00:59.883\nIt's dropping to the terminal and getting\nyour hands dirty with the real meat and\n\n20\n00:00:59.883 --> 00:01:00.993\npotatoes behind Linux.\n\n21\n00:01:00.993 --> 00:01:02.280\nAnd so that's what we're\ngonna be taking a look at.\n\n22\n00:01:02.280 --> 00:01:05.190\nBut in order to do that,\nI kinda know how to get there,\n\n23\n00:01:05.190 --> 00:01:07.120\nso we'll take a look at that\nright here in this episode.\n\n24\n00:01:07.120 --> 00:01:11.388\n&gt;&gt; Yeah, this is gonna be fun cuz I've run\na few distros of Linux, and it's true,\n\n25\n00:01:11.388 --> 00:01:15.150\nyou fire it up, and you've got this\npretty desktop environment, and\n\n26\n00:01:15.150 --> 00:01:18.639\nyou really feel no different than\na Windows user, for example.\n\n27\n00:01:18.639 --> 00:01:20.194\n&gt;&gt; Yeah, [LAUGH]\n&gt;&gt; It's like, wait,\n\n28\n00:01:20.194 --> 00:01:21.020\nwhere's the good stuff?\n\n29\n00:01:21.020 --> 00:01:23.513\nAnd that's what we're gonna do now.\n\n30\n00:01:23.513 --> 00:01:24.519\n&gt;&gt; Even the Mac OS, right,\n\n31\n00:01:24.519 --> 00:01:29.326\nyou guys have seen I use a Mac on some\nshows when I'm doing Mac virtualization.\n\n32\n00:01:29.326 --> 00:01:32.265\nAnd when I'm on Mac OS\nit's a super simple GUI,\n\n33\n00:01:32.265 --> 00:01:36.320\nit's designed to be really easy to use and\nwhat do I end up doing?\n\n34\n00:01:36.320 --> 00:01:39.190\nI end up dropping to a shell most of\nthe time cuz it's BSD under the hood and\n\n35\n00:01:39.190 --> 00:01:40.570\nthat's what I'm used to.\n\n36\n00:01:40.570 --> 00:01:43.784\nSo I'll drop down to that and\ndo things cuz it's faster for me,\n\n37\n00:01:43.784 --> 00:01:46.028\nthat when you learn how\nto do things by hand,\n\n38\n00:01:46.028 --> 00:01:49.200\na lot of times you can do it way\nfaster than you could in the GUI.\n\n39\n00:01:49.200 --> 00:01:54.650\nAnd you can absolutely do repetitious\ntasks insanely faster than in the GUI.\n\n40\n00:01:54.650 --> 00:01:57.388\nSo there's a lot of power to be\nhad by working in that shell, but\n\n41\n00:01:57.388 --> 00:01:59.145\nif you've never used it before, well,\n\n42\n00:01:59.145 --> 00:02:02.266\nthis is gonna be the first step on\nyour journey to becoming a power user.\n\n43\n00:02:02.266 --> 00:02:05.239\nYou need to get used to the shell,\nused to running commands, and\n\n44\n00:02:05.239 --> 00:02:08.177\nlearn how to get help,\nlearn how to figure out how things work.\n\n45\n00:02:08.177 --> 00:02:11.040\nSo that's what we're gonna be taking a\nlook at here in the next couple episodes.\n\n46\n00:02:11.040 --> 00:02:11.770\n&gt;&gt; All right Don, well,\n\n47\n00:02:11.770 --> 00:02:14.600\nI guess the first thing we need to do\nthen is really talk about the difference.\n\n48\n00:02:14.600 --> 00:02:18.166\nCuz we said terminals, we also said shell,\nand I know a lot of people,\n\n49\n00:02:18.166 --> 00:02:21.138\nwhen they're getting in Linux,\naren't those the same?\n\n50\n00:02:21.138 --> 00:02:22.310\nOr they think they're the same?\n\n51\n00:02:22.310 --> 00:02:24.848\n&gt;&gt; A lot of people think they're the same,\nbut they are indeed different right.\n\n52\n00:02:24.848 --> 00:02:27.665\nSo, a terminal and\nshell are two different things.\n\n53\n00:02:27.665 --> 00:02:31.280\nSo the shell is actually\na little program that runs.\n\n54\n00:02:31.280 --> 00:02:35.250\nAnd the program is allowing\nyou to talk to the kernel.\n\n55\n00:02:35.250 --> 00:02:37.933\nYou can issue commands,\nthe kernel receives those commands and\n\n56\n00:02:37.933 --> 00:02:39.433\ndoes something with them, right.\n\n57\n00:02:39.433 --> 00:02:42.640\nSo the shell is obviously very\nimportant that's who we wanna talk to.\n\n58\n00:02:42.640 --> 00:02:44.760\nBut, how do you even see the shell?\n\n59\n00:02:44.760 --> 00:02:48.110\nWell, the terminal is what\nlets you see the shell.\n\n60\n00:02:48.110 --> 00:02:50.840\nThen you can actually visually\nwith your eyeballs see it.\n\n61\n00:02:50.840 --> 00:02:52.125\nI shouldn't say with your eyeballs.\n\n62\n00:02:52.125 --> 00:02:53.418\nCuz you might have a braille keyboard or\n\n63\n00:02:53.418 --> 00:02:55.072\nother attachments that\nlet you interact with it.\n\n64\n00:02:55.072 --> 00:02:56.990\nThose are different types of terminals.\n\n65\n00:02:56.990 --> 00:02:59.890\nTerminals can be software or\neven hardware terminals.\n\n66\n00:02:59.890 --> 00:03:02.835\nThat name terminal actually comes\nfrom the old mainframe days, right.\n\n67\n00:03:02.835 --> 00:03:07.441\nIn the old mainframe days,\nyou had a massive computer somewhere.\n\n68\n00:03:07.441 --> 00:03:10.691\nAnd then on everybody's desk you didn't\nhave a computer you had what was\n\n69\n00:03:10.691 --> 00:03:11.870\ncalled a dummy terminal.\n\n70\n00:03:11.870 --> 00:03:16.610\nAnd it was called a dummy terminal\nbecause it didn't do it's own thinking.\n\n71\n00:03:16.610 --> 00:03:20.260\nIt was a monitor, a keyboard,\nmaybe a mouse usually not even a mouse.\n\n72\n00:03:20.260 --> 00:03:21.678\nSo a monitor and a keyboard and\n\n73\n00:03:21.678 --> 00:03:25.379\nit was displaying information that was\nactually coming from the main frame.\n\n74\n00:03:25.379 --> 00:03:26.784\nThe main frame was doing\nall of the thinking.\n\n75\n00:03:26.784 --> 00:03:29.480\nThe terminal was just letting you see it.\n\n76\n00:03:29.480 --> 00:03:35.470\nAnd in the terminal, you would see a shell\nthat was running on the mainframe.\n\n77\n00:03:35.470 --> 00:03:37.990\nAnd so now you're interacting with that,\nthat's the two different pieces.\n\n78\n00:03:37.990 --> 00:03:41.290\nNow, back then, the terminal was\na physical piece of equipment.\n\n79\n00:03:41.290 --> 00:03:46.167\nNowadays, the terminal is just as\nlikely to be virtual as it is physical.\n\n80\n00:03:46.167 --> 00:03:50.862\nNow, technically when I log into my laptop\nand I see this graphical user interface,\n\n81\n00:03:50.862 --> 00:03:52.670\nthis is a terminal, right.\n\n82\n00:03:52.670 --> 00:03:56.500\nIt's running a display server and\nit's got a window manager on top of it so\n\n83\n00:03:56.500 --> 00:03:58.460\nI see graphics and prettiness.\n\n84\n00:03:58.460 --> 00:04:01.673\nBut there's an actual terminal\nthat's running in the background.\n\n85\n00:04:01.673 --> 00:04:03.145\nLet me show you what I mean.\n\n86\n00:04:03.145 --> 00:04:08.710\nSo if you look at my desktop, what I'm\nlooking at here is technically terminal 7.\n\n87\n00:04:08.710 --> 00:04:12.820\nThat there are seven terminals\ncreated on most distros.\n\n88\n00:04:12.820 --> 00:04:15.012\nIt's up to distro,\nthey create 1000 terminals if they want.\n\n89\n00:04:15.012 --> 00:04:17.612\nBut most of them are settled on seven for\nsome reason.\n\n90\n00:04:17.612 --> 00:04:21.766\n[LAUGH] I don't actually know why,\nbut this happen.\n\n91\n00:04:21.766 --> 00:04:25.630\nBut when you fire up the Linux kernel,\nit's not a GUI.\n\n92\n00:04:25.630 --> 00:04:27.360\nIt's not all this crazy stuff.\n\n93\n00:04:27.360 --> 00:04:29.817\nThat's not the way that Linux\nwas originally designed.\n\n94\n00:04:29.817 --> 00:04:33.056\nIt was all designed in command line.\n\n95\n00:04:33.056 --> 00:04:35.378\nSo when you fire it up,\nit's the display server and\n\n96\n00:04:35.378 --> 00:04:37.810\nthe window manager that\ngenerates all this, right.\n\n97\n00:04:37.810 --> 00:04:42.962\nOn your keyboard,\nif you're on the Linux machine,\n\n98\n00:04:42.962 --> 00:04:47.877\nyou can hit Ctrl+ Alt, so\nyou hold Ctrl and Alt and\n\n99\n00:04:47.877 --> 00:04:51.058\nthen hit F1 through F5 or F6.\n\n100\n00:04:51.058 --> 00:04:54.702\nAnd what those will do is they'll move\nyou between the actual terminals on\n\n101\n00:04:54.702 --> 00:04:55.418\nyour system.\n\n102\n00:04:55.418 --> 00:04:59.884\nSo I'm gonna hit Ctrl+Alt+F1 and\nmy screen is gonna go blank for\n\n103\n00:04:59.884 --> 00:05:02.860\na second and then, there we go, all right.\n\n104\n00:05:02.860 --> 00:05:08.120\nThis is Linux, this is me logging into\nmy operating system, and it's really\n\n105\n00:05:08.120 --> 00:05:11.890\nsmall because I've got a high resolution\nscreen and this is a simple text.\n\n106\n00:05:11.890 --> 00:05:14.453\nBut you log in and\nyou punch in your username and\n\n107\n00:05:14.453 --> 00:05:17.298\nyou punch in whatever your\npassword happens to be.\n\n108\n00:05:17.298 --> 00:05:22.030\nAnd once you're in, now you start working\nwith the system and interacting with it.\n\n109\n00:05:22.030 --> 00:05:24.688\nYou're in a shell, I'm accessing a shell.\n\n110\n00:05:24.688 --> 00:05:30.328\nI see the shell, but\nI'm using a terminal, I'm using TTY1,\n\n111\n00:05:30.328 --> 00:05:35.346\nmy first terminal on this\nsystem to get connected, okay.\n\n112\n00:05:35.346 --> 00:05:38.897\nAs I continue to use the system,\nI might run a program here.\n\n113\n00:05:38.897 --> 00:05:44.474\nAnd then I could hit Ctrl+Alt+F2 and\nit takes me to another terminal, okay.\n\n114\n00:05:44.474 --> 00:05:47.753\nAnd it's really small on the screen\nI can't really highlight it.\n\n115\n00:05:47.753 --> 00:05:52.815\nBut up there in the top it says\nUbuntu 17.04 Dons-laptop TTY2, right.\n\n116\n00:05:52.815 --> 00:05:59.360\nSo I'm in TTY2 and if I go back to\nCtrl+Alt+F1, this one says TTY1, right.\n\n117\n00:05:59.360 --> 00:06:02.030\nTTY is actually short for teletype.\n\n118\n00:06:02.030 --> 00:06:05.856\nAnd this was built around the same\ntechnology that was used for\n\n119\n00:06:05.856 --> 00:06:11.390\nthe original teletype machines to be able\nto hook a keyboard up to a phone line and\n\n120\n00:06:11.390 --> 00:06:12.020\nto communicate.\n\n121\n00:06:12.020 --> 00:06:15.923\nThat if you know anyone who's hearing\nimpaired, they still use TTYs today that\n\n122\n00:06:15.923 --> 00:06:18.892\nthey have a special phone that\nhas a keyboard attached to it so\n\n123\n00:06:18.892 --> 00:06:22.417\nthat they can type a message and\nit sends it over the line to an operator.\n\n124\n00:06:22.417 --> 00:06:27.350\nAnd in that way, if you can't speak you\ncan type and the message goes across.\n\n125\n00:06:27.350 --> 00:06:28.974\nSo same thing here, I'm typing and\n\n126\n00:06:28.974 --> 00:06:32.119\nthe computer is able to interpret\nit that's why these are TTYs.\n\n127\n00:06:32.119 --> 00:06:34.698\nNow a TTY is a physical terminal.\n\n128\n00:06:34.698 --> 00:06:40.057\nI'm using a physical terminal\nhere if I hit Ctrl+Alt+F1, F2,\n\n129\n00:06:40.057 --> 00:06:45.893\nF3, F4, F5, f6, all those that\nwas TTY1 through 6, there we go.\n\n130\n00:06:45.893 --> 00:06:48.200\n[LAUGH] I got stuck on five.\n\n131\n00:06:48.200 --> 00:06:50.823\nBut when I get to TTY, what would be TTY7,\n\n132\n00:06:50.823 --> 00:06:55.128\nthat's the one that's powering\nmy graphical user interface.\n\n133\n00:06:55.128 --> 00:06:59.390\nAnd so when I hit Ctrl+Alt+F7,\nit takes me back to my GUI.\n\n134\n00:06:59.390 --> 00:07:02.160\nNow, most distros stop there,\nsome actually do let you go further.\n\n135\n00:07:02.160 --> 00:07:05.330\nYou Ctrl+Alt+F8 or F9 and you do it.\n\n136\n00:07:05.330 --> 00:07:09.970\nBut usually it's just one through six that\nlets you pull up those different TTYs.\n\n137\n00:07:09.970 --> 00:07:14.097\n&gt;&gt; So, if I've got a terminal and\non that terminal I can run a desktop\n\n138\n00:07:14.097 --> 00:07:18.449\nmanager here and I can run all these\ndifferent programs and windows,\n\n139\n00:07:18.449 --> 00:07:20.713\nwhy do I need five other terminals?\n\n140\n00:07:20.713 --> 00:07:24.438\n&gt;&gt; In the olden days,\nthat's what how you multi task, right.\n\n141\n00:07:24.438 --> 00:07:27.298\nSo you go into one terminal, you run a\nprogram, and you switch to other terminal,\n\n142\n00:07:27.298 --> 00:07:29.208\nyou run the second program or\nyou go to a third terminal.\n\n143\n00:07:29.208 --> 00:07:31.944\nOr may be you are using the computer and\nyou walk away and\n\n144\n00:07:31.944 --> 00:07:36.440\nsomebody else wants to come up and use\nthe computer but not mess with your stuff.\n\n145\n00:07:36.440 --> 00:07:38.080\nSo they would switch to another terminal.\n\n146\n00:07:38.080 --> 00:07:39.261\nThat was the original idea.\n\n147\n00:07:39.261 --> 00:07:43.020\nAnd this was running on mainframe\nin the really early days.\n\n148\n00:07:43.020 --> 00:07:45.360\nAnd so the dummy terminals would\nbe connecting to each of these.\n\n149\n00:07:45.360 --> 00:07:49.370\nSo I might have six dummy terminals,\nthe monitor and keyboard and\n\n150\n00:07:49.370 --> 00:07:51.210\nthen connected to each of these.\n\n151\n00:07:51.210 --> 00:07:54.400\nNow that type of stuff is handled\ntoday through what are called VTYs or\n\n152\n00:07:54.400 --> 00:07:55.770\nvirtual terminals.\n\n153\n00:07:55.770 --> 00:07:57.091\nAnd the VTYs don't have a limit.\n\n154\n00:07:57.091 --> 00:07:59.531\nYou can have tons of VTYs.\n\n155\n00:07:59.531 --> 00:08:03.915\nSo, when I'm looking at the GUI here on my\nsystems, let me get this out of the way.\n\n156\n00:08:03.915 --> 00:08:06.492\nSo I'm looking at the GUI I can\n\n157\n00:08:06.492 --> 00:08:11.144\npull up just a regular terminal\nright here in the GUI.\n\n158\n00:08:11.144 --> 00:08:13.240\nSo here's a terminal window.\n\n159\n00:08:13.240 --> 00:08:14.587\nVery similar to what I saw a moment ago.\n\n160\n00:08:14.587 --> 00:08:17.617\nActually it didn't ask me for a username\nand password cuz I'm already logged in.\n\n161\n00:08:17.617 --> 00:08:22.690\nBut is this terminal tty1, tty2, tty3?\n\n162\n00:08:22.690 --> 00:08:25.080\nWell, it's not any of them.\n\n163\n00:08:25.080 --> 00:08:26.630\nThese are virtual terminals.\n\n164\n00:08:26.630 --> 00:08:29.829\nI'm now able to sit here and\nopen up a bunch of these.\n\n165\n00:08:29.829 --> 00:08:31.417\nI'm not sure there's a keyboard\nshortcut I'm missing out on here.\n\n166\n00:08:31.417 --> 00:08:34.150\n&gt;&gt; [LAUGH]\n&gt;&gt; But I can open up a bunch of these, and\n\n167\n00:08:34.150 --> 00:08:38.250\neach one is its own VTY or\nVirtual Terminal.\n\n168\n00:08:38.250 --> 00:08:42.480\nAnd now I can interact and\nrun all sorts of different things here.\n\n169\n00:08:42.480 --> 00:08:46.220\nLater on I'll teach you guys about\nforeground jobs and background jobs and\n\n170\n00:08:46.220 --> 00:08:49.090\nhow you could actually use one terminal\nand run many many different processes and\n\n171\n00:08:49.090 --> 00:08:49.950\nmulti task.\n\n172\n00:08:49.950 --> 00:08:53.574\nBut in the earliest days switching TTYs\nwas the easiest way to do that and\n\n173\n00:08:53.574 --> 00:08:55.747\nget these different things up and running.\n\n174\n00:08:55.747 --> 00:08:59.140\nAll right now actually\naccessing the terminal,\n\n175\n00:08:59.140 --> 00:09:04.360\nmost of us aren't gonna be using\nthe Ctrl+Alt+F1 through F5 or F6 or\n\n176\n00:09:04.360 --> 00:09:09.700\nwhatever because most of us are either\ngonna be in a GUI or not in a GUI.\n\n177\n00:09:09.700 --> 00:09:13.040\nIf you're not in a GUI if you got command\nline only that's typically a server.\n\n178\n00:09:13.040 --> 00:09:15.740\nAnd on a server you're probably gonna\ngo and sit down at your desktop and\n\n179\n00:09:15.740 --> 00:09:17.310\nremote connect to the server.\n\n180\n00:09:17.310 --> 00:09:19.541\nSo you'll use a virtual\nterminal like this.\n\n181\n00:09:19.541 --> 00:09:23.310\nOr on your own desktop, you'll use\na GUI and you use virtual terminals.\n\n182\n00:09:23.310 --> 00:09:26.280\nSo most of us are using virtual\nterminals all the time and\n\n183\n00:09:26.280 --> 00:09:28.600\nnever really using the physical\nterminals except for\n\n184\n00:09:28.600 --> 00:09:30.982\nthe one that's rendering the GUI\non your on workstation, right?\n\n185\n00:09:30.982 --> 00:09:35.030\nBut they're there, you don't have to\nconfigure them, they're already on.\n\n186\n00:09:35.030 --> 00:09:36.420\nEvery distro supports that.\n\n187\n00:09:37.430 --> 00:09:40.940\nThere's some like Mac OS,\nthat's running VST under the hood,\n\n188\n00:09:40.940 --> 00:09:44.260\nbut they've disabled those other\nterminals so you can't get to them.\n\n189\n00:09:44.260 --> 00:09:45.610\nBut in all of the other ones,\n\n190\n00:09:45.610 --> 00:09:49.350\nlike free BSD, open BSD,\nall of the Linux distros, they've got it.\n\n191\n00:09:49.350 --> 00:09:52.270\nCtrl+Alt+F1 through F6 and\nyou can pull those up.\n\n192\n00:09:53.410 --> 00:09:55.530\nThe virtual terminals though\nare normally where it's at.\n\n193\n00:09:55.530 --> 00:09:59.461\nAnd in the virtual terminal,\nthere's actually a lot of flexibility and\n\n194\n00:09:59.461 --> 00:10:01.340\npower available to you.\n\n195\n00:10:01.340 --> 00:10:03.453\nSo when I fire up a regular terminal.\n\n196\n00:10:03.453 --> 00:10:07.813\nWhen I hit Ctrl+Alt+F1, you guys saw\nthat text was really, really small.\n\n197\n00:10:07.813 --> 00:10:08.647\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n198\n00:10:08.647 --> 00:10:09.813\nthere wasn't much I could do about it.\n\n199\n00:10:09.813 --> 00:10:12.220\nIt actually is a way to\nadjust the font size of it.\n\n200\n00:10:12.220 --> 00:10:12.967\nIt is a pain.\n\n201\n00:10:12.967 --> 00:10:16.767\nYou've gotta go into configuration files,\nmodify things, you might make sure your\n\n202\n00:10:16.767 --> 00:10:19.420\nvideo card supports rendering\nfont sizes in a larger size.\n\n203\n00:10:19.420 --> 00:10:22.702\nAnd when you get all that stuff tweaked\nand it works, it's usually easier to just\n\n204\n00:10:22.702 --> 00:10:26.035\nfake the screen resolution to something\nmuch lower and then it stretches out and\n\n205\n00:10:26.035 --> 00:10:27.750\nlooks all blurry and messy but it works.\n\n206\n00:10:27.750 --> 00:10:28.980\nIt's a nightmare.\n\n207\n00:10:28.980 --> 00:10:31.245\nBut in a virtual terminal, it's virtual.\n\n208\n00:10:31.245 --> 00:10:32.440\nYou can do whatever you want.\n\n209\n00:10:32.440 --> 00:10:33.350\nYou can change the font.\n\n210\n00:10:33.350 --> 00:10:34.870\nYou can change the color.\n\n211\n00:10:34.870 --> 00:10:36.320\nYou can change the size of the window.\n\n212\n00:10:36.320 --> 00:10:38.882\nYou can really manipulate that and\nit creates a much better experience.\n\n213\n00:10:38.882 --> 00:10:43.035\nWhich is another reason why we use virtual\nterminals more than we use the actual TTYs\n\n214\n00:10:43.035 --> 00:10:44.010\nanymore.\n\n215\n00:10:44.010 --> 00:10:48.110\nIn a VTY, one of the first decisions\nwe need to make that was what terminal\n\n216\n00:10:48.110 --> 00:10:49.680\nsoftware we're gonna use.\n\n217\n00:10:49.680 --> 00:10:52.971\nAlmost every Distro include\nsoftware called X-term.\n\n218\n00:10:52.971 --> 00:10:56.110\nX-term is terminal software\nthat was written for X-Windows.\n\n219\n00:10:56.110 --> 00:10:58.890\nMost of us use X.org\nas our display server,\n\n220\n00:10:58.890 --> 00:11:01.050\nI see most of us, practically everybody.\n\n221\n00:11:01.050 --> 00:11:03.510\nAnd so\nxterm is likely built-in to your system.\n\n222\n00:11:03.510 --> 00:11:09.574\nWell if I go on my system, and\nI'm just gonna type in xterm here.\n\n223\n00:11:09.574 --> 00:11:11.576\nAnd you know what actually,\n\n224\n00:11:11.576 --> 00:11:16.896\nI forgot Ubuntu does this annoying thing\nwhere they don't install xterm [LAUGH].\n\n225\n00:11:16.896 --> 00:11:18.810\nXterm is very basic.\n\n226\n00:11:18.810 --> 00:11:21.540\nWhen you launch it it'll be a white\nscreen with some black text.\n\n227\n00:11:21.540 --> 00:11:24.510\nAnd it's very, very limited in\nfunctionality because it's very old.\n\n228\n00:11:24.510 --> 00:11:27.030\nAnd it was designed to\nwork in a simpler world.\n\n229\n00:11:27.030 --> 00:11:31.280\nSo a lot of systems have started\nreplacing xterm with other terminals.\n\n230\n00:11:31.280 --> 00:11:33.980\nNow I'm running the gnome desktop, and so\n\n231\n00:11:33.980 --> 00:11:38.760\nwhen I run a terminal like this one\nit's actually the gnome term, right.\n\n232\n00:11:38.760 --> 00:11:42.906\nWhich is their version of xterm but\nthey've added a lot of bells and\n\n233\n00:11:42.906 --> 00:11:43.950\nwhistles to it.\n\n234\n00:11:43.950 --> 00:11:47.010\nAnd some of those you may use and\nsome you may not.\n\n235\n00:11:47.010 --> 00:11:50.440\nFor example, when I am in this terminal\nit's real easy for me to go up here and\n\n236\n00:11:50.440 --> 00:11:52.780\nchoose File open Terminal.\n\n237\n00:11:52.780 --> 00:11:53.877\nAnd now I've got another terminal right.\n\n238\n00:11:53.877 --> 00:11:58.229\nSo I can spawn new terminals really\neasy and jump in and start to do things.\n\n239\n00:11:58.229 --> 00:12:01.913\nSo maybe I'm in this terminal and\nI run the top command.\n\n240\n00:12:01.913 --> 00:12:06.928\nWhen you run top it starts showing\nprocesses and what they're doing,\n\n241\n00:12:06.928 --> 00:12:10.940\nand we can kind of see who's\neating up CPU on the system.\n\n242\n00:12:10.940 --> 00:12:13.620\nI hear my fans kind of\nramping up in the background.\n\n243\n00:12:13.620 --> 00:12:16.950\nSo when I run this I can look and\nI can see that I've got a runaway\n\n244\n00:12:16.950 --> 00:12:21.665\nprocess right there,\nwhatever if you kind of look at it.\n\n245\n00:12:21.665 --> 00:12:24.299\nWhoops if I hit the right key here.\n\n246\n00:12:24.299 --> 00:12:26.436\nWhatever that Delana renderer is,\n\n247\n00:12:26.436 --> 00:12:31.363\nit's starting to eat up 100% of one of my\nCPUs and so I can see what's going on.\n\n248\n00:12:31.363 --> 00:12:34.210\nNow I might say I want\nto kill that process.\n\n249\n00:12:34.210 --> 00:12:36.080\nWell there's actually a keyboard\nshortcut to do it from here.\n\n250\n00:12:36.080 --> 00:12:41.440\nBut I could just jump to another terminal\nand I see that process ID of 7390.\n\n251\n00:12:41.440 --> 00:12:46.410\nAnd so I can come here and\nsay kill 7390 and then it's gonna go away.\n\n252\n00:12:46.410 --> 00:12:49.827\nAnd I'll see it disappear from\nthis list eventually [LAUGH].\n\n253\n00:12:49.827 --> 00:12:53.590\nAnd soon as it goes away, I should do\nthe fans on my laptop, ramp back down.\n\n254\n00:12:53.590 --> 00:12:58.380\nSo I'm doing more than one thing at\nthe same time or at least I'm trying to.\n\n255\n00:12:58.380 --> 00:13:01.680\nAnd that's one of the nice parts\nabout having these terminals.\n\n256\n00:13:01.680 --> 00:13:06.260\nOther terminals though might introduce\nsomething like tab functionality right.\n\n257\n00:13:06.260 --> 00:13:08.718\nI don't have tabs here\nin the GNOME Terminal.\n\n258\n00:13:08.718 --> 00:13:10.980\nEach terminal is its own window.\n\n259\n00:13:10.980 --> 00:13:12.500\nWell, that might get a little annoying.\n\n260\n00:13:12.500 --> 00:13:16.960\nSo I might choose to use another\nprogram like the one I normally use\n\n261\n00:13:16.960 --> 00:13:18.999\nwhich is called terminator.\n\n262\n00:13:18.999 --> 00:13:21.585\nYou get it, terminal,\nterminator, they're very witty.\n\n263\n00:13:21.585 --> 00:13:25.423\nTerminator now when I launched terminator\nat first glance it doesn't really look\n\n264\n00:13:25.423 --> 00:13:27.980\nthat much different than\nthe other terminals right.\n\n265\n00:13:27.980 --> 00:13:33.110\nI get in here and I've got a prompt.\n\n266\n00:13:33.110 --> 00:13:36.962\nAnd I can start to issue commands\nif I wanna run top or try and\n\n267\n00:13:36.962 --> 00:13:38.703\nkill that process again.\n\n268\n00:13:38.703 --> 00:13:41.190\nWas it process 7390?\n\n269\n00:13:41.190 --> 00:13:46.186\nSo if I go in here and\ntry and kill 7390 and\n\n270\n00:13:46.186 --> 00:13:49.168\ntry and wipe that one out.\n\n271\n00:13:49.168 --> 00:13:51.490\nBoy that process really sticking in there,\nisn't it?\n\n272\n00:13:51.490 --> 00:13:54.580\nSo I can go in and issue that and\nit's not really any different, right?\n\n273\n00:13:54.580 --> 00:13:56.570\nBut it adds more bells and whistles.\n\n274\n00:13:56.570 --> 00:14:00.250\nIf I wanted to open up top and\nhave it up and\n\n275\n00:14:00.250 --> 00:14:05.970\nrunning I could come in here and\nI could tell it that I wanted a new tab.\n\n276\n00:14:05.970 --> 00:14:10.860\nAnd so in its menu options here I can come\nin and I can choose to open a tab and\n\n277\n00:14:10.860 --> 00:14:15.840\nnow in one window I could come in here and\nsay I'm gonna run Top.\n\n278\n00:14:15.840 --> 00:14:20.120\nAnd then I can just switch tabs and\nmove between them like that.\n\n279\n00:14:20.120 --> 00:14:24.410\nNow I have one window with more than one\ntab in it, which is pretty convenient,\n\n280\n00:14:24.410 --> 00:14:25.840\nbecause it lets you work,\n\n281\n00:14:25.840 --> 00:14:30.261\nand use the system, and do everything that\nyou need to do all from one interface.\n\n282\n00:14:30.261 --> 00:14:32.081\nThat's a reason to choose\na different terminal, right?\n\n283\n00:14:32.081 --> 00:14:33.117\n&gt;&gt; Absolutely.\n\n284\n00:14:33.117 --> 00:14:37.057\n&gt;&gt; And this one goes even further like I'm\nnot saying you should definitely go out\n\n285\n00:14:37.057 --> 00:14:38.198\nand use terminators.\n\n286\n00:14:38.198 --> 00:14:39.125\n&gt;&gt; [LAUGH]\n&gt;&gt; Just one of the options.\n\n287\n00:14:39.125 --> 00:14:42.340\nBut terminator has a neat feature\nwhere you can split windows.\n\n288\n00:14:42.340 --> 00:14:46.016\nSo for example, let me close out of that.\n\n289\n00:14:46.016 --> 00:14:49.638\nMaybe I want to run top and\nmidnight commander and\n\n290\n00:14:49.638 --> 00:14:52.120\nstill be able to issue commands.\n\n291\n00:14:52.120 --> 00:14:55.455\nSo I can come in here and I can say,\nI wanna split these windows horizontally.\n\n292\n00:14:55.455 --> 00:14:58.101\nAnd then I'll split these\nwindows vertically and\n\n293\n00:14:58.101 --> 00:15:00.685\nthen down here at the bottom\nleft I might run Top.\n\n294\n00:15:00.685 --> 00:15:04.344\nAnd at the bottom right I might\nrun the Midnight Commander and\n\n295\n00:15:04.344 --> 00:15:08.879\nthen up here I'm still able to jump in and\nwork and issue commands and so on.\n\n296\n00:15:08.879 --> 00:15:13.765\nI've got these little window panes\nbasically and they're all running,\n\n297\n00:15:13.765 --> 00:15:16.030\nthey're all separate VTYs.\n\n298\n00:15:16.030 --> 00:15:18.130\nThat are doing their job and\nI'm able to operate.\n\n299\n00:15:18.130 --> 00:15:20.690\nThat's a reason why we might\nchoose an advanced terminal\n\n300\n00:15:20.690 --> 00:15:22.740\nemulator like this one right?\n\n301\n00:15:22.740 --> 00:15:26.404\nOr you can just use xterm,\nxterm is included on most systems or\n\n302\n00:15:26.404 --> 00:15:28.953\nGnome Terminal, or KDEs they have kterm.\n\n303\n00:15:28.953 --> 00:15:32.959\nAnd so you can use the one that comes\nwith the system it's just which one has\n\n304\n00:15:32.959 --> 00:15:35.350\nthe features that you want right.\n\n305\n00:15:35.350 --> 00:15:39.429\nNow one pretty common element you're\ngoing to run in in most terminals.\n\n306\n00:15:39.429 --> 00:15:42.080\nYou know, before I move on,\nlet me mention one thing.\n\n307\n00:15:42.080 --> 00:15:43.020\nI really like Terminator.\n\n308\n00:15:43.020 --> 00:15:43.960\nI use it a lot.\n\n309\n00:15:43.960 --> 00:15:47.110\nBut lately, I've been using one\nterminal pretty much all the time,\n\n310\n00:15:47.110 --> 00:15:50.320\nwhich is a terminal called Guake,\nG-U-A-K-E.\n\n311\n00:15:50.320 --> 00:15:53.080\nAnd if you've ever played\na video game that had a console,\n\n312\n00:15:53.080 --> 00:15:54.300\nyou hit like the tilde key and\n\n313\n00:15:54.300 --> 00:15:57.570\na little console drops from the top of\nthe screen that's what what Guake does.\n\n314\n00:15:57.570 --> 00:15:58.984\nIt gives you a terminal\nthat's always available.\n\n315\n00:15:58.984 --> 00:15:59.884\nWhich is really handy for me.\n\n316\n00:15:59.884 --> 00:16:03.356\nSo if I show you here on my system,\nwhile I'm looking at the desktop\n\n317\n00:16:03.356 --> 00:16:06.523\nI can just use F12 on my keyboard And\nthat terminal pops up.\n\n318\n00:16:06.523 --> 00:16:11.077\nSo, now I can start issuing commands, and\nit's really neat because maybe you're\n\n319\n00:16:11.077 --> 00:16:14.210\nfollowing some kinda tutorial\non the Internet, right?\n\n320\n00:16:14.210 --> 00:16:17.490\nSo, I fire up a Web browser,\nI'm looking at steps, and\n\n321\n00:16:17.490 --> 00:16:19.900\nit's giving me a step by\nsteps on how to do something.\n\n322\n00:16:19.900 --> 00:16:23.973\nI can hit F12 and start typing\nthe command, well, I see it right there.\n\n323\n00:16:23.973 --> 00:16:26.400\nThen the moment you click away from it,\nit disappears, but\n\n324\n00:16:26.400 --> 00:16:32.270\nyou can jump right back into it, and you\ncan work and it kinda saves everything.\n\n325\n00:16:32.270 --> 00:16:36.830\nIt also has the ability to do tabs, so I\ncan create more than one tab inside of it.\n\n326\n00:16:36.830 --> 00:16:39.610\nIt's just really super convenient,\nso I've been using that one.\n\n327\n00:16:39.610 --> 00:16:41.090\nIt's one of my favorites.\n\n328\n00:16:41.090 --> 00:16:43.370\nAgain, use whatever one\nyou're comfortable with.\n\n329\n00:16:43.370 --> 00:16:47.380\nYou do need to find one that has\nthe features that make it usable for\n\n330\n00:16:47.380 --> 00:16:48.620\nyou, right?\n\n331\n00:16:48.620 --> 00:16:50.585\nLet me show you,\non the customization site,\n\n332\n00:16:50.585 --> 00:16:54.221\nsome common elements that you're gonna\nbump into regardless of which one you use.\n\n333\n00:16:54.221 --> 00:16:58.060\nNow, I use the regular Gnome Term because\nmost of you are going to have that.\n\n334\n00:16:59.400 --> 00:17:03.480\nIn the regular Gnome Terminal, there's\nsome things we can customize to change\n\n335\n00:17:03.480 --> 00:17:05.850\nthe way that it looks and\nthe way that it behaves.\n\n336\n00:17:05.850 --> 00:17:09.110\nFor example, the text is a little\nsmall on my screen here, isn't it?\n\n337\n00:17:09.110 --> 00:17:11.540\nWell, for me standing right\nhere I can read it, but for\n\n338\n00:17:11.540 --> 00:17:14.510\nyou guys out in TV land,\nit's kind of hard to read what's in there.\n\n339\n00:17:14.510 --> 00:17:18.410\nSo, I might want to change the default\nfont size, also it has this annoying\n\n340\n00:17:18.410 --> 00:17:23.400\nbackground that is sort of black but\nnot black, and I hate that.\n\n341\n00:17:23.400 --> 00:17:26.110\nThat's a design element that a lot of\npeople are doing these days that really\n\n342\n00:17:26.110 --> 00:17:27.350\njust annoys me.\n\n343\n00:17:27.350 --> 00:17:29.050\nIf it's gonna be a black background,\nmake it black.\n\n344\n00:17:29.050 --> 00:17:31.890\nDon't make it look like it's been through\nthe washing machine too many times.\n\n345\n00:17:31.890 --> 00:17:33.900\n&gt;&gt; It's the stone wash terminal.\n\n346\n00:17:33.900 --> 00:17:37.800\n&gt;&gt; My favorite is the light grey text on\nthe white background, which kills me.\n\n347\n00:17:37.800 --> 00:17:42.240\nI don't work for Apple,\nI don't wanna lose my eyes before I'm 50.\n\n348\n00:17:42.240 --> 00:17:48.890\nSo, what you'll find is that most\nterminals have preferences and profiles.\n\n349\n00:17:48.890 --> 00:17:52.810\nPreferences change the way that\nthe terminal itself works, and\n\n350\n00:17:52.810 --> 00:17:56.050\nthen profiles change the way\nthat the terminal looks.\n\n351\n00:17:56.050 --> 00:17:59.880\nAnd you'd kinda set up custom profiles\nthat are quick and easy to switch between.\n\n352\n00:17:59.880 --> 00:18:02.510\nPreferences, you can only set one way,\nprofiles,\n\n353\n00:18:02.510 --> 00:18:04.870\nyou can create more than one profile and\neasily switch.\n\n354\n00:18:05.880 --> 00:18:08.910\nYou might have one profile for\nwhen you are at work and one profile for\n\n355\n00:18:08.910 --> 00:18:11.970\nwhen you are at home or one profile\nwhen you are on your laptop screen and\n\n356\n00:18:11.970 --> 00:18:15.140\nanother profile for when you are on\nthe big monitor on your desk, right?\n\n357\n00:18:15.140 --> 00:18:18.600\nYou can set those up so easy but\npreferences, they are just set one way.\n\n358\n00:18:18.600 --> 00:18:23.420\nSo when I'm in my terminal here,\nif I go to the file menu and I look,\n\n359\n00:18:23.420 --> 00:18:27.110\nI'll see New Profile right there\nwhere I can create a profile.\n\n360\n00:18:27.110 --> 00:18:29.970\nBut if I go under Edit,\nI'll see Preferences and\n\n361\n00:18:29.970 --> 00:18:31.770\nProfile Preferences, right?\n\n362\n00:18:31.770 --> 00:18:34.710\nSo preferences are on the terminal itself.\n\n363\n00:18:34.710 --> 00:18:38.781\nAnd we'll see options like\nwhether we'll show the menu bar,\n\n364\n00:18:38.781 --> 00:18:42.860\nwhat keyboard shortcuts we support,\nwhat profiles exists.\n\n365\n00:18:42.860 --> 00:18:46.390\nI've got one right now called unnamed\ncuz apparently I haven't named it.\n\n366\n00:18:46.390 --> 00:18:48.110\nWhat encodings we support.\n\n367\n00:18:48.110 --> 00:18:50.040\nAnd if you're in the US you don't\nhave to worry about this cuz it\n\n368\n00:18:50.040 --> 00:18:51.240\ndefaults what you've got.\n\n369\n00:18:51.240 --> 00:18:55.740\nBut if you're in China, they have a very\ndifferent encoding, so you need to\n\n370\n00:18:55.740 --> 00:18:59.430\ncome in and set that to what will render\ncharacters on your screen properly.\n\n371\n00:18:59.430 --> 00:19:04.340\nOr if you're in Russia, Macedonia, places\nlike that where they use the cyrillic\n\n372\n00:19:04.340 --> 00:19:08.300\nalphabet, you need to make sure\nthat you update to reflect it.\n\n373\n00:19:08.300 --> 00:19:13.370\nSo, these are settings that affect\nthe terminal itself, right?\n\n374\n00:19:13.370 --> 00:19:17.200\nAnd then, if I close that and\nI go back up to my File menu and\n\n375\n00:19:17.200 --> 00:19:19.820\nI'm gonna choose New Profile, right?\n\n376\n00:19:19.820 --> 00:19:23.620\nI can create, Don's Custom Profile.\n\n377\n00:19:25.210 --> 00:19:29.650\nAnd this might be Don's desktop,\nor Don's laptop or\n\n378\n00:19:29.650 --> 00:19:32.690\nwhatever, whatever it is I intend\nto use this profile for and\n\n379\n00:19:32.690 --> 00:19:36.100\nthen in here I can adjust things like\nwhat size I want the terminal to be.\n\n380\n00:19:36.100 --> 00:19:37.628\nIt defaults to 80 by 24,\n\n381\n00:19:37.628 --> 00:19:41.523\n80 columns by 24 rows cuz that's\nwhat the old dummy terminals used.\n\n382\n00:19:41.523 --> 00:19:43.282\nWell it's not 1984 anymore.\n\n383\n00:19:43.282 --> 00:19:44.496\n&gt;&gt; [LAUGH]\n&gt;&gt; You can go ahead and\n\n384\n00:19:44.496 --> 00:19:46.726\nbump this higher if you want,\nit'll fit on the screen.\n\n385\n00:19:46.726 --> 00:19:49.289\nOr you can leave it and\njust make your font size bigger,\n\n386\n00:19:49.289 --> 00:19:51.330\nwhich what I normally end up doing.\n\n387\n00:19:51.330 --> 00:19:53.760\nIt's got cursor shape,\nwhether we do the terminal bell.\n\n388\n00:19:53.760 --> 00:19:55.510\nYou know when you get an error or\nwhatever to go ping!\n\n389\n00:19:55.510 --> 00:19:57.490\nYou can turn that on and off.\n\n390\n00:19:57.490 --> 00:20:01.310\nAnd then you'll see here\nwhere I can do a custom font.\n\n391\n00:20:01.310 --> 00:20:03.530\nThe default on this one\nis Monospace Regular.\n\n392\n00:20:03.530 --> 00:20:05.099\nIt may or may not be that way on yours.\n\n393\n00:20:05.099 --> 00:20:09.554\nAnd then it's a 12 pitch font, well 12\npitch is a little bit small on this screen\n\n394\n00:20:09.554 --> 00:20:12.150\nso I might wanna come in and bump that up.\n\n395\n00:20:12.150 --> 00:20:15.900\nI'm gonna go 18, so I'm gonna bump\nthat up to an 18 pitch font and\n\n396\n00:20:15.900 --> 00:20:19.270\nthat mono font is fine but\nyou might want something different.\n\n397\n00:20:19.270 --> 00:20:22.200\nMono space is great cuz things\nalways renders out the same width.\n\n398\n00:20:22.200 --> 00:20:25.348\nBut there are other fonts like Courier,\nwell Courier's monospace too.\n\n399\n00:20:25.348 --> 00:20:30.760\nLike, what's an example of\none that is not, it's like,\n\n400\n00:20:30.760 --> 00:20:36.620\nSands Serif or something like that,\nthat is a variable width.\n\n401\n00:20:36.620 --> 00:20:40.340\nLike the letter I is thinner than\nthe letter M, but in a monospace font,\n\n402\n00:20:40.340 --> 00:20:42.080\nthe letter I is the same\nwidth as the letter M.\n\n403\n00:20:42.080 --> 00:20:44.040\nThey kind of follow that pattern.\n\n404\n00:20:44.040 --> 00:20:48.295\nBut I can set that, and that's being\nsaid inside of this profile, and\n\n405\n00:20:48.295 --> 00:20:51.182\nso when I launch terminals\nusing this profile,\n\n406\n00:20:51.182 --> 00:20:54.807\nthey'll now have an 18 pitch font,\nthey'll be larger.\n\n407\n00:20:54.807 --> 00:20:59.238\nAnd I can go to like the colors tab and\nI can change the way the coloring is done.\n\n408\n00:20:59.238 --> 00:21:01.960\nI might want to do green and\nlack like the old terminals.\n\n409\n00:21:01.960 --> 00:21:04.660\nWell, I might want to go\nsomething different, right?\n\n410\n00:21:04.660 --> 00:21:08.882\nBlack on white, where it's black text\non a white background, or vice versa.\n\n411\n00:21:08.882 --> 00:21:10.625\nWe can do, is white on black in here?\n\n412\n00:21:10.625 --> 00:21:13.200\nYeah, white on black,\nwhere it's white text on black background.\n\n413\n00:21:13.200 --> 00:21:16.050\nYou can define the bold coloring and\nother color pallates.\n\n414\n00:21:16.050 --> 00:21:18.628\nYou can set all these options,\nall really customizable.\n\n415\n00:21:18.628 --> 00:21:21.924\nThis is also where that annoying\ntransparent background setting is.\n\n416\n00:21:21.924 --> 00:21:24.904\nA lot of people think that's really cool,\nlike, I want it to be transparent,\n\n417\n00:21:24.904 --> 00:21:25.830\nit looks neat.\n\n418\n00:21:25.830 --> 00:21:27.100\nWell, here, let me show you.\n\n419\n00:21:27.100 --> 00:21:33.350\nSo if I go in here and\npull up a new terminal,\n\n420\n00:21:33.350 --> 00:21:38.090\nand what I did is, I went to File &gt; Open\nTerminal, and I chose my custom profile.\n\n421\n00:21:38.090 --> 00:21:42.000\nAnd when I did that, notice that it's\na nice, dark, black background now,\n\n422\n00:21:42.000 --> 00:21:45.530\nversus the fake black scent,\nfor that is so annoying.\n\n423\n00:21:45.530 --> 00:21:48.610\nAnd that green is so much more vibrant,\ncuz it's on a real black background.\n\n424\n00:21:48.610 --> 00:21:51.240\nBut it's also a larger font, so\nit's easier for you guys to read now,\n\n425\n00:21:51.240 --> 00:21:52.330\nso we could see it, right?\n\n426\n00:21:52.330 --> 00:21:54.120\nThat's a great way to do that.\n\n427\n00:21:54.120 --> 00:21:56.410\nBut if we turn that transparency.\n\n428\n00:21:56.410 --> 00:21:59.280\nSo if I go back into my\nprofile preferences.\n\n429\n00:21:59.280 --> 00:22:02.204\nAnd I take that transparency,\nit's under colors.\n\n430\n00:22:02.204 --> 00:22:03.284\nThere, transparent.\n\n431\n00:22:03.284 --> 00:22:07.036\nAnd I set this transparency,\nmaybe I'll put it at 50%.\n\n432\n00:22:07.036 --> 00:22:08.369\nAnd I'll close that.\n\n433\n00:22:08.369 --> 00:22:10.964\nSee how you can see through the terminal,\nright.\n\n434\n00:22:10.964 --> 00:22:11.564\n&gt;&gt; That's cool Don.\n\n435\n00:22:11.564 --> 00:22:15.020\n[LAUGH]\n&gt;&gt; It looks cool, right?\n\n436\n00:22:15.020 --> 00:22:18.050\nIf you're gonna be on a hacker movie or\nsomething like that,\n\n437\n00:22:18.050 --> 00:22:20.270\nyou certainly want to be able\nto see through your terminal.\n\n438\n00:22:20.270 --> 00:22:23.300\nBut man, when you start working with this,\nand you're going through and\n\n439\n00:22:23.300 --> 00:22:26.350\nyou're working through your files,\nit gets annoying after a while.\n\n440\n00:22:26.350 --> 00:22:29.566\nAnd maybe you could turn on\na little bit of transparency, but\n\n441\n00:22:29.566 --> 00:22:32.290\nyou end up with this fake black color,\nbasically.\n\n442\n00:22:32.290 --> 00:22:33.010\nAnd it's annoying to me.\n\n443\n00:22:33.010 --> 00:22:36.453\nBut the cool part here is you\nget to set your own preference.\n\n444\n00:22:36.453 --> 00:22:39.158\nYou create your own profile,\nyou can customize it,\n\n445\n00:22:39.158 --> 00:22:43.110\nyou can change the dimensions of\nthe terminal, the way that it's rending.\n\n446\n00:22:43.110 --> 00:22:46.860\nAll of that stuff is customizable and\nit's easy to switch so\n\n447\n00:22:46.860 --> 00:22:50.600\nif Mike comes to my computer and\nhe hates this profile he can just go\n\n448\n00:22:50.600 --> 00:22:53.520\nopen a terminal and\nchoose a new profile or create his own.\n\n449\n00:22:53.520 --> 00:22:55.050\nAnd now it's customized to his needs.\n\n450\n00:22:55.050 --> 00:23:00.320\nAnd so very easy to flip between those and\nmake them the way that you want.\n\n451\n00:23:00.320 --> 00:23:01.740\nAs far as the setting in here,\n\n452\n00:23:01.740 --> 00:23:05.600\nit is going to vary a little bit,\nbased on what terminal you're using.\n\n453\n00:23:05.600 --> 00:23:07.520\nSome of the setting I\nrecommend you check out,\n\n454\n00:23:07.520 --> 00:23:11.980\nunder scrolling it'll choose whether or\nnot you display a scroll bar.\n\n455\n00:23:11.980 --> 00:23:14.290\nAnd displaying a scroll bar is kind\nof important if you're going to be\n\n456\n00:23:14.290 --> 00:23:15.300\nrunning long output.\n\n457\n00:23:15.300 --> 00:23:16.644\nAlso the scrollback.\n\n458\n00:23:16.644 --> 00:23:18.049\nYou have a scrollback buffer.\n\n459\n00:23:18.049 --> 00:23:20.700\nMine is set to 10,000, okay?\n\n460\n00:23:20.700 --> 00:23:21.490\nThat's not the default.\n\n461\n00:23:21.490 --> 00:23:22.570\nThat's what I set it to.\n\n462\n00:23:22.570 --> 00:23:24.880\nSometimes I run really\nlong running commands and\n\n463\n00:23:24.880 --> 00:23:27.000\nI wanna be able to scroll back and\nsee that history.\n\n464\n00:23:27.000 --> 00:23:30.127\nWell, the default I think it's\nsomething like 200 lines.\n\n465\n00:23:30.127 --> 00:23:33.323\nSo if more than 200 lines of\noutput comes up on the screen,\n\n466\n00:23:33.323 --> 00:23:36.957\nyou can't scroll back to see what it\nwas so I like to bump up that number\n\n467\n00:23:36.957 --> 00:23:40.430\nright there the scroll back buffer\nto get that to a larger number.\n\n468\n00:23:40.430 --> 00:23:43.532\nAnd here it just calls it scroll\nback other terminals might call\n\n469\n00:23:43.532 --> 00:23:46.530\nit a scroll back buffer because\nit is being stored in memory.\n\n470\n00:23:46.530 --> 00:23:48.981\nYou have other things\nlike compatibility here.\n\n471\n00:23:48.981 --> 00:23:53.377\nSometimes you'll bump into systems\nwhere your back space key doesn't work.\n\n472\n00:23:53.377 --> 00:23:56.273\nAnd hit the backspace key and\nit sends a control H for\n\n473\n00:23:56.273 --> 00:23:58.776\nsome reason, that's one of the mappings.\n\n474\n00:23:58.776 --> 00:24:02.649\nYou can come in here and tweak what the\nbackspace key sends, so your Ctrl+ H or\n\n475\n00:24:02.649 --> 00:24:04.087\nautomatic delete.\n\n476\n00:24:04.087 --> 00:24:07.061\nSo you can tell it how\nyou want the function.\n\n477\n00:24:07.061 --> 00:24:09.536\nAnd that's something you may\nhave to adjust for some systems.\n\n478\n00:24:09.536 --> 00:24:10.614\nThis is in the profile, so\n\n479\n00:24:10.614 --> 00:24:13.849\nyou could have a profile that you use when\nconnecting to one of those systems and\n\n480\n00:24:13.849 --> 00:24:16.465\nit's different profile used normally,\nflip back and forth.\n\n481\n00:24:16.465 --> 00:24:19.893\nI've had to do that there's some I think\nit's one of the switches we have here in\n\n482\n00:24:19.893 --> 00:24:23.490\nthe building that the delete key doesn't\nwork when I'm connected to that switch.\n\n483\n00:24:23.490 --> 00:24:26.360\nSo I have a different profile that I\nswitch to when I'm on that switch and\n\n484\n00:24:26.360 --> 00:24:27.740\nnow I can use my delete key.\n\n485\n00:24:27.740 --> 00:24:29.580\nAnd then I flip back to my normal profile.\n\n486\n00:24:29.580 --> 00:24:31.810\nThose are all things we can\ndo inside of a terminal.\n\n487\n00:24:31.810 --> 00:24:35.360\nNow, you can use xterm, gnometerm, kterm.\n\n488\n00:24:35.360 --> 00:24:37.730\nYou can use Terminator, which is,\nI think, pretty awesome.\n\n489\n00:24:37.730 --> 00:24:38.474\nYou can use Guake.\n\n490\n00:24:38.474 --> 00:24:40.501\nAll of these are different terminals.\n\n491\n00:24:40.501 --> 00:24:44.127\nAnd when you launch them, at the end\nof the day they're all just giving\n\n492\n00:24:44.127 --> 00:24:47.530\nyou access to a shell which I know,\nI'm a little low on time here.\n\n493\n00:24:47.530 --> 00:24:51.340\nSo we want to cover the show in part two,\nbut they're gaining access to the shell.\n\n494\n00:24:51.340 --> 00:24:54.480\nThe shell is the same regardless\nof which terminal you used.\n\n495\n00:24:54.480 --> 00:24:57.990\nI could have five different terminal\nprograms all accessing the same shell,\n\n496\n00:24:57.990 --> 00:25:01.240\nsame command, same keyboard shortcuts,\nthat kind of stuff, but\n\n497\n00:25:01.240 --> 00:25:01.930\ndifferent terminals.\n\n498\n00:25:01.930 --> 00:25:03.520\nSo feel free to shop around.\n\n499\n00:25:03.520 --> 00:25:06.350\nFind the terminal that you like, pick one.\n\n500\n00:25:06.350 --> 00:25:08.776\nI do recommend Guake,\nwhich I use all the time.\n\n501\n00:25:08.776 --> 00:25:11.980\nAnd Terminator which what I use all\nthe time, those are two good ones.\n\n502\n00:25:11.980 --> 00:25:15.210\nBut even Gnome Terminal and xterm,\nkterm those guys, they're all good.\n\n503\n00:25:15.210 --> 00:25:16.901\nThey all give you access to that Shell and\n\n504\n00:25:16.901 --> 00:25:20.510\nlet you do the stuff they're gonna be\ndoing in the whole rest of the series.\n\n505\n00:25:20.510 --> 00:25:21.840\n&gt;&gt; Fantastic, all right Don.\n\n506\n00:25:21.840 --> 00:25:23.246\nA lot of great information there.\n\n507\n00:25:23.246 --> 00:25:24.199\nA little bit of a cliffhanger, right?\n\n508\n00:25:24.199 --> 00:25:25.772\n&gt;&gt; [LAUGH]\n&gt;&gt; We got the terminals,\n\n509\n00:25:25.772 --> 00:25:27.942\nwe're gonna get to Shells in our part two.\n\n510\n00:25:27.942 --> 00:25:31.570\nSo make sure you join us for that,\nwe're looking forward to it.\n\n511\n00:25:31.570 --> 00:25:33.688\nWe hope everybody out there\nenjoyed watching this one.\n\n512\n00:25:33.688 --> 00:25:36.865\nSigning off for IT ProTV,\nI've been your host Mike Roderick.\n\n513\n00:25:36.865 --> 00:25:39.427\n&gt;&gt; I'm Don,\njust say no to transparency Pezet.\n\n514\n00:25:39.427 --> 00:25:40.427\n&gt;&gt; And we'll see you next time.\n\n515\n00:25:40.427 --> 00:25:42.458\n&gt;&gt; [LAUGH]\n\n516\n00:25:42.458 --> 00:25:48.414\n[MUSIC]\n\n517\n00:25:48.414 --> 00:25:51.881\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "221901337"
        },
        {
          "description": "In this episode, Don and Mike discuss what shells are in a Linux environment. They cover the various shells that are available, and how to determine if a particular shell is installed. They also demonstrate how to change the default shell for an individual user.",
          "length": "1114",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-2-terminals_and_shells_pt2-061417-PGM.00_18_18_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-2-terminals_and_shells_pt2-061417-PGM.00_18_18_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-1-2-terminals_and_shells_pt2-061417-PGM.00_18_18_04.Still001-sm.jpg",
          "title": "Terminals and Shells Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:07.448\nWelcome to ITPro.TV,\nI'm your host [CROSSTALK]\n\n2\n00:00:07.448 --> 00:00:08.799\n[MUSIC]\n\n3\n00:00:08.799 --> 00:00:11.280\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:11.280 --> 00:00:15.340\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPro.TV.\n\n5\n00:00:15.340 --> 00:00:20.290\nI'm your host, Mike Rodrick, and today\nwe're doing our part two to Terminals and\n\n6\n00:00:20.290 --> 00:00:20.940\nShells.\n\n7\n00:00:20.940 --> 00:00:23.820\nWe left you with a little bit of\na cliffhanger on that previous one.\n\n8\n00:00:23.820 --> 00:00:24.890\nWe talked about terminals.\n\n9\n00:00:24.890 --> 00:00:26.310\nWe didn't quite make it to shells.\n\n10\n00:00:26.310 --> 00:00:30.480\nSo that's where we're going today, and\nhere to guide us though it is Don Pezet.\n\n11\n00:00:30.480 --> 00:00:31.120\nWelcome Don.\n\n12\n00:00:31.120 --> 00:00:32.450\n&gt;&gt; Hey, thanks for having me back, Mike.\n\n13\n00:00:32.450 --> 00:00:35.010\nAnd yeah, like you said,\nin the last episode we saw terminals, and\n\n14\n00:00:35.010 --> 00:00:38.510\nwhen you launch a terminal,\nit lets you see the shell.\n\n15\n00:00:38.510 --> 00:00:41.220\nSo we probably need to talk a little bit\nabout what the heck that thing is that we\n\n16\n00:00:41.220 --> 00:00:42.970\nsee, but we really didn't do\nthat in the last episode.\n\n17\n00:00:42.970 --> 00:00:45.480\nWe just focused on getting the terminal\nitself kind of customized and\n\n18\n00:00:45.480 --> 00:00:46.690\nset the way we want.\n\n19\n00:00:46.690 --> 00:00:49.980\nBut then you're exposed to this\ncommand-line interface, and\n\n20\n00:00:49.980 --> 00:00:51.550\nthat command-line interface is the shell.\n\n21\n00:00:51.550 --> 00:00:54.810\nSo we need to talk a little bit about that\ncuz there is more than one type of shell.\n\n22\n00:00:54.810 --> 00:00:56.490\nYou can switch between different ones.\n\n23\n00:00:56.490 --> 00:00:58.250\nThere is one that's pretty common.\n\n24\n00:00:58.250 --> 00:00:59.550\nSo we'll talk about each off those and\n\n25\n00:00:59.550 --> 00:01:01.270\njust kinda get a basic\nidea of how it works.\n\n26\n00:01:01.270 --> 00:01:03.270\nNow we're not gonna launch\ninto tons of commands and\n\n27\n00:01:03.270 --> 00:01:04.520\nthings like that in this episode.\n\n28\n00:01:04.520 --> 00:01:05.870\nWe'll save that for the next one.\n\n29\n00:01:05.870 --> 00:01:08.370\nBut just understanding\nthe environment that we're working in\n\n30\n00:01:08.370 --> 00:01:11.880\nis a critical thing before we start\njumping into all of the extras.\n\n31\n00:01:11.880 --> 00:01:13.032\n&gt;&gt; All right, Don, so where do we start?\n\n32\n00:01:13.032 --> 00:01:17.650\n&gt;&gt; All right, well,\nmuch like the window managers and\n\n33\n00:01:17.650 --> 00:01:20.350\nthe terminals and so on with\nthe shell you have a lot of choices.\n\n34\n00:01:20.350 --> 00:01:21.890\nLinux is all about choices.\n\n35\n00:01:21.890 --> 00:01:24.620\nIf you don't like one thing you can\nswap it out for something else.\n\n36\n00:01:24.620 --> 00:01:27.320\nAnd the shell is no exception to that.\n\n37\n00:01:27.320 --> 00:01:30.100\nThat the shell has been around for\na long, long time.\n\n38\n00:01:30.100 --> 00:01:33.391\nBut when the original,\nit didn't even originate in Linux,\n\n39\n00:01:33.391 --> 00:01:34.820\nway back in the Unix days.\n\n40\n00:01:34.820 --> 00:01:36.560\nIn the original version of Unix,\n\n41\n00:01:36.560 --> 00:01:40.110\nwhen they had the Unix kernel that would\nfire up you had a way to interact with it.\n\n42\n00:01:40.110 --> 00:01:42.600\nAnd so they created the original\nshells to be able to do that.\n\n43\n00:01:42.600 --> 00:01:48.271\nAnd one of the earliest shells was what\nmost of us just call SH, the shell.\n\n44\n00:01:48.271 --> 00:01:52.135\nAnd it's the Bourne shell was developed\nby somebody who's last name was\n\n45\n00:01:52.135 --> 00:01:53.249\nBourne [LAUGH].\n\n46\n00:01:53.249 --> 00:01:56.233\nI can't remember the whole name but\nthat was the Bourne shell.\n\n47\n00:01:56.233 --> 00:01:57.481\nAnd it was very basic.\n\n48\n00:01:57.481 --> 00:02:00.955\nIt allowed you to enter in commands and\nit would be interpreted and\n\n49\n00:02:00.955 --> 00:02:03.177\nprocessed by the kernel and executed.\n\n50\n00:02:03.177 --> 00:02:06.805\nAnd you could enter in commands\nalmost like a programming language.\n\n51\n00:02:06.805 --> 00:02:11.298\nYou could really put in a lot more than\njust some straight up single command.\n\n52\n00:02:11.298 --> 00:02:16.270\nYou could pipeline commands and\nreally write simple programs and\n\n53\n00:02:16.270 --> 00:02:19.460\nscripts right there in\nthe command line interface, and\n\n54\n00:02:19.460 --> 00:02:21.200\nthey would run,\nthe computer would execute it.\n\n55\n00:02:21.200 --> 00:02:24.430\nThis was the alternative to using punch\ncards, and other things to feed data into\n\n56\n00:02:24.430 --> 00:02:27.010\nthe computer, here you could feed\nit right in via the command line.\n\n57\n00:02:27.010 --> 00:02:28.790\nThat's what the original shells did.\n\n58\n00:02:28.790 --> 00:02:30.620\nBut the original shells are a basic.\n\n59\n00:02:30.620 --> 00:02:33.570\nAnd over time, people started\ntweaking them and changing them and\n\n60\n00:02:33.570 --> 00:02:34.450\nmaking them work different.\n\n61\n00:02:34.450 --> 00:02:38.338\nAnd making them accept\ndifferent keyboard shortcuts or\n\n62\n00:02:38.338 --> 00:02:43.225\ndifferent programming languages or\ndifferent command structures.\n\n63\n00:02:43.225 --> 00:02:44.990\nThey kinda tweaked and changed things.\n\n64\n00:02:44.990 --> 00:02:49.210\nWell, fortunately, most systems\nhave settled on a single shell, and\n\n65\n00:02:49.210 --> 00:02:50.400\nthat's what most of us experience.\n\n66\n00:02:50.400 --> 00:02:53.160\nSo you get a common experience\nas you move between systems but\n\n67\n00:02:53.160 --> 00:02:57.000\nthere are other ones that are out there so\nI want to talk a little bit about that.\n\n68\n00:02:57.000 --> 00:03:00.060\nThe most common shell is\none that's called Bash.\n\n69\n00:03:00.060 --> 00:03:03.070\nThe Bash shell is what you're\ngoing to be in in the majority of\n\n70\n00:03:03.070 --> 00:03:05.270\nLinux distributions\nthat you install today.\n\n71\n00:03:05.270 --> 00:03:08.768\nBash stands for the Bourne Again Shell.\n\n72\n00:03:08.768 --> 00:03:13.140\nSo the Bourne shell, that old one that\nI mentioned, well somebody rewrote it.\n\n73\n00:03:13.140 --> 00:03:13.833\nThey improved upon it.\n\n74\n00:03:13.833 --> 00:03:17.180\nThey changed it, and they called it\nthe Bourne Again Shell which is Bash.\n\n75\n00:03:17.180 --> 00:03:21.950\nAnd so when you open up a terminal,\nthe odds are you're using Bash.\n\n76\n00:03:21.950 --> 00:03:23.780\nWell, how do you know?\n\n77\n00:03:23.780 --> 00:03:28.260\nUnfortunately it's really difficult to\nfind out because when you drop to a shell\n\n78\n00:03:28.260 --> 00:03:31.470\nyou see a prompt and it doesn't\ntell you what type of shell it is.\n\n79\n00:03:31.470 --> 00:03:35.170\nAnd you can assume that it's Bash but\ndo you really know?\n\n80\n00:03:35.170 --> 00:03:38.720\nWell let me show you how you can find out,\nso I've got a terminal fired up here.\n\n81\n00:03:38.720 --> 00:03:40.158\nSame terminal we worked\nwith in the last episode.\n\n82\n00:03:40.158 --> 00:03:45.320\nI've launched it and I'm at a prompt and\nso now I can start to work with it.\n\n83\n00:03:45.320 --> 00:03:48.113\nWell, if it's not the shell\nthat I'm expecting it to be,\n\n84\n00:03:48.113 --> 00:03:51.150\nthere may be somethings that work and\nsomethings that don't.\n\n85\n00:03:51.150 --> 00:03:53.034\nI might be missing some components,\n\n86\n00:03:53.034 --> 00:03:56.160\nsome commands might not function\nthe way I expect them to be.\n\n87\n00:03:56.160 --> 00:03:58.559\nEspecially when it comes\nto programming syntax and\n\n88\n00:03:58.559 --> 00:04:00.073\nI might not be able to function.\n\n89\n00:04:00.073 --> 00:04:03.150\nOr maybe it is the right shell and\neverything works the way that I want.\n\n90\n00:04:03.150 --> 00:04:05.490\nSo, we can check that fairly easy.\n\n91\n00:04:05.490 --> 00:04:08.720\nEach user can pick their own shell.\n\n92\n00:04:08.720 --> 00:04:11.260\nAnd when a user account\nis created in Linux,\n\n93\n00:04:11.260 --> 00:04:14.220\nit gives you a chance to specify\nwhat their default shell is.\n\n94\n00:04:14.220 --> 00:04:17.532\nWell, most network administrators or\nsystem administrators just press enter,\n\n95\n00:04:17.532 --> 00:04:19.261\n[CROSSTALK] so whatever the default shell.\n\n96\n00:04:19.261 --> 00:04:22.262\nWell, the default shell can be\ndifferent depending on the distro.\n\n97\n00:04:22.262 --> 00:04:24.972\nIf you're running Fedora or\nUbuntu or Dominion or whatever,\n\n98\n00:04:24.972 --> 00:04:26.440\nthey can pick different shells.\n\n99\n00:04:26.440 --> 00:04:30.070\nNow, most of them don't,\nmost of them use Bash and that's it.\n\n100\n00:04:30.070 --> 00:04:32.420\nBut you really have to\nlook at your user account.\n\n101\n00:04:32.420 --> 00:04:36.982\nAnd user account settings\nare stored in a file that is\n\n102\n00:04:36.982 --> 00:04:42.290\n/etc/P-A-S-S-W-D which is short for\npassword.\n\n103\n00:04:42.290 --> 00:04:45.600\nIn the olden days, this is where\nthe user account passwords were stored.\n\n104\n00:04:45.600 --> 00:04:47.330\nWhich is not the most secure practice.\n\n105\n00:04:47.330 --> 00:04:49.838\nBut these days the passwords\nare not stored there anymore, but\n\n106\n00:04:49.838 --> 00:04:51.503\ninformation about your user account is.\n\n107\n00:04:51.503 --> 00:04:56.922\nSo if I were to use something\nlike the more command\n\n108\n00:04:56.922 --> 00:05:02.150\n/etc/passwd it'll show me that file.\n\n109\n00:05:02.150 --> 00:05:06.153\nAnd l can see all the user accounts for\nmy computer.\n\n110\n00:05:06.153 --> 00:05:11.248\nAnd l can find in there my user account,\nnow you might have a ton of users.\n\n111\n00:05:11.248 --> 00:05:14.178\nSo,you can actually get\na little more advanced with\n\n112\n00:05:14.178 --> 00:05:17.118\nthis to hunt things down\nby using like grep instead.\n\n113\n00:05:17.118 --> 00:05:19.630\nGrep is a string search utility.\n\n114\n00:05:19.630 --> 00:05:24.238\nAnd so l could come in and\nsay l wanna grep for\n\n115\n00:05:24.238 --> 00:05:28.360\nthe string dpezet in /etc/passwd.\n\n116\n00:05:28.360 --> 00:05:31.210\nSo, search through that file for dpezet.\n\n117\n00:05:31.210 --> 00:05:33.004\nSo if you have a master file,\nit's a little more simple.\n\n118\n00:05:33.004 --> 00:05:35.470\nWe're gonna take a look at grep and\nmore, and\n\n119\n00:05:35.470 --> 00:05:37.190\nall these other commands\nin future episodes.\n\n120\n00:05:37.190 --> 00:05:40.140\nSo right now I just wanted to\njust kind of cover them lightly.\n\n121\n00:05:40.140 --> 00:05:41.990\nTo just show us how to find our shell.\n\n122\n00:05:41.990 --> 00:05:44.660\nBut when I do that, I get just my line.\n\n123\n00:05:44.660 --> 00:05:46.080\nAnd when you look at my user account,\n\n124\n00:05:46.080 --> 00:05:50.326\nyou'll see my username,\nmy full name, my home directory.\n\n125\n00:05:50.326 --> 00:05:52.350\nSo where my stuff is stored.\n\n126\n00:05:52.350 --> 00:05:55.348\nAnd then right here at the end\nis what shell I'm using.\n\n127\n00:05:55.348 --> 00:06:00.235\nMy default shell is /bin/bash.\n\n128\n00:06:00.235 --> 00:06:04.360\n/bin is a path, and that's our\nfolder which is short for binary, so\n\n129\n00:06:04.360 --> 00:06:07.770\nit's binary stored in there, and\nthe bash binary is stored right there.\n\n130\n00:06:07.770 --> 00:06:12.240\nSo when open up a shell,\nthat's when I'm opening by default, but\n\n131\n00:06:12.240 --> 00:06:14.200\nI don't have to stay in that\nshell if I don't want to.\n\n132\n00:06:14.200 --> 00:06:15.880\nThis is just my default shell.\n\n133\n00:06:15.880 --> 00:06:18.020\nWhen I open up a terminal,\nthat's what I'm gonna be in.\n\n134\n00:06:18.020 --> 00:06:19.890\nBut if I wanna do something and\n\n135\n00:06:19.890 --> 00:06:24.630\nI wanna use one of the other shells\nthat are available, I can do that.\n\n136\n00:06:24.630 --> 00:06:30.000\nSo for example, let's say that you\nworked in the BSD world a lot.\n\n137\n00:06:31.520 --> 00:06:34.012\nMaybe you were a Solaris\nadministrator in a past life.\n\n138\n00:06:34.012 --> 00:06:35.080\n&gt;&gt; [LAUGH]\n&gt;&gt; And now you're moving into\n\n139\n00:06:35.080 --> 00:06:36.140\nthe Linux world.\n\n140\n00:06:36.140 --> 00:06:40.630\nWell, in the BSD world, a lot of them\ndefault to a different shell called KSH.\n\n141\n00:06:40.630 --> 00:06:44.080\nKSH is short for the KornShell, K-O-R-N,\n\n142\n00:06:44.080 --> 00:06:45.820\nwhich I assume is named after somebody-\n&gt;&gt; [LAUGH]\n\n143\n00:06:45.820 --> 00:06:47.260\n&gt;&gt; And not the rap,\n\n144\n00:06:47.260 --> 00:06:48.930\nmetal band, but [LAUGH]\n&gt;&gt; [LAUGH]\n\n145\n00:06:48.930 --> 00:06:51.210\n&gt;&gt; But anyhow, it's the KornShell.\n\n146\n00:06:51.210 --> 00:06:55.690\nAnd if that's what you're used to, in\nLinux you can drop to a command prompt and\n\n147\n00:06:55.690 --> 00:06:56.980\nyou can fire up the KornShell.\n\n148\n00:06:56.980 --> 00:06:59.650\nNow it may not be installed.\n\n149\n00:06:59.650 --> 00:07:02.760\nI'm running Ubuntu and the KornShell\nwas not installed by default but\n\n150\n00:07:02.760 --> 00:07:04.457\nit's part of the Ubuntu repository.\n\n151\n00:07:04.457 --> 00:07:08.410\nSo it took me only two seconds to install\nit, you can add additional shells.\n\n152\n00:07:08.410 --> 00:07:11.550\nI probably got six different\nshells installed on this machine.\n\n153\n00:07:11.550 --> 00:07:14.900\nNow, if you don't know if a shell\nis present, you can always find it.\n\n154\n00:07:14.900 --> 00:07:17.040\nThere's a few different\ncommands to find it.\n\n155\n00:07:17.040 --> 00:07:18.720\nThe which command is probably the easiest.\n\n156\n00:07:18.720 --> 00:07:19.345\nLet me show you what I mean.\n\n157\n00:07:19.345 --> 00:07:24.672\nNot witch as in magic, but which as in,\nI don't know, something else.\n\n158\n00:07:24.672 --> 00:07:25.372\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n159\n00:07:25.372 --> 00:07:30.270\n[LAUGH] I can say which and\ntype a command like bash.\n\n160\n00:07:30.270 --> 00:07:34.180\nAnd that'll look and say is Bash\ninstalled, and if it is where is it?\n\n161\n00:07:34.180 --> 00:07:37.040\nSo here I have Bash it's in /bin/bash.\n\n162\n00:07:37.040 --> 00:07:39.700\nAnd if I wanted to run the KornShell.\n\n163\n00:07:39.700 --> 00:07:42.740\nI could say which ksh.\n\n164\n00:07:42.740 --> 00:07:46.220\nAnd if it's installed it'll\ntell me where it's installed.\n\n165\n00:07:46.220 --> 00:07:48.735\nHere it's in /usr/bin/ksh.\n\n166\n00:07:48.735 --> 00:07:51.650\n/usr is the user folder,\nthat's user stuff.\n\n167\n00:07:51.650 --> 00:07:52.930\nUser binaries that we've added.\n\n168\n00:07:52.930 --> 00:07:54.830\nI installed this afterwards.\n\n169\n00:07:54.830 --> 00:07:58.020\nIt wasn't part of the base install,\nso that's why it ended up there.\n\n170\n00:07:58.020 --> 00:08:01.880\nYou may find that you have a lot of\nshells installed in your computer.\n\n171\n00:08:01.880 --> 00:08:05.460\nYou may find that you don't,\nthat there's just Bash, and that's it.\n\n172\n00:08:05.460 --> 00:08:08.580\nMany people that's all they need anyway,\nso why have the other shells?\n\n173\n00:08:08.580 --> 00:08:10.120\nBut you can install plenty more.\n\n174\n00:08:10.120 --> 00:08:13.613\nSo let me give you a rundown of some of\nthe more common shells that are out there.\n\n175\n00:08:13.613 --> 00:08:16.460\nKSH is one of them, KornShell.\n\n176\n00:08:16.460 --> 00:08:19.820\nIt is the old school Unix default.\n\n177\n00:08:19.820 --> 00:08:23.570\nSo, again, people that worked in\nthe Solaris world back in the day, or\n\n178\n00:08:23.570 --> 00:08:27.070\nsome of the other Unix OS that were out,\na lot of them defaulted to KSH.\n\n179\n00:08:27.070 --> 00:08:29.040\nThat was the first shell that I worked in.\n\n180\n00:08:29.040 --> 00:08:31.120\nAnd you might just be used to it.\n\n181\n00:08:31.120 --> 00:08:34.460\nI moved away from it a long time ago,\nbut some people are still there.\n\n182\n00:08:34.460 --> 00:08:38.900\nYou might have scripts or other routines\nthat are dependent on that KornShell and\n\n183\n00:08:38.900 --> 00:08:40.850\nit's still supported today so\nyou can fire that up.\n\n184\n00:08:40.850 --> 00:08:46.670\nI've got it installed, so all I type\nis KSH and I'm in the KornShell.\n\n185\n00:08:46.670 --> 00:08:49.560\nAnd now I can get in here and\nmy prompt isn't as pretty, but\n\n186\n00:08:49.560 --> 00:08:50.800\nI can customize the prompt.\n\n187\n00:08:50.800 --> 00:08:53.870\nWe'll cover that in another episode,\nbut we can customize the prompt and\n\n188\n00:08:53.870 --> 00:08:55.110\nmake it look like whatever we want.\n\n189\n00:08:55.110 --> 00:08:57.660\nI could make it look like my Bash prompt.\n\n190\n00:08:57.660 --> 00:09:05.710\nBut I can jump in here and I can pull up\nmy directories and change into my folders.\n\n191\n00:09:05.710 --> 00:09:08.870\nI can start to work with files and\ndo all the things I normally do.\n\n192\n00:09:08.870 --> 00:09:11.620\nBut the keyboard shortcuts\nmight be different or\n\n193\n00:09:11.620 --> 00:09:15.450\nthe syntax of the scripts that I write and\nthe way that I handle command lines.\n\n194\n00:09:15.450 --> 00:09:19.180\nThose things are different because\nI'm now in that KornShell and\n\n195\n00:09:19.180 --> 00:09:23.030\nI can just type exit and\nnow I am back into my original shell.\n\n196\n00:09:23.030 --> 00:09:24.400\nSo I don't have to change my default,\n\n197\n00:09:24.400 --> 00:09:27.020\nI don't have to say I'm using Korn or\nnothing.\n\n198\n00:09:27.020 --> 00:09:30.950\nI can use Korn when I need it,\ngo back to Bash for the rest of the time.\n\n199\n00:09:32.060 --> 00:09:33.810\nSo that's one example.\n\n200\n00:09:33.810 --> 00:09:36.810\nIf you're a purist there's the C shell.\n\n201\n00:09:37.950 --> 00:09:41.080\nIt's kind of a play on words like\na seashell on the beach, but\n\n202\n00:09:41.080 --> 00:09:42.915\nit's actually the letter C shell.\n\n203\n00:09:42.915 --> 00:09:46.170\nThat Unix in it's original form,\n\n204\n00:09:46.170 --> 00:09:48.220\nwas really dependent on\nthe C programming language.\n\n205\n00:09:48.220 --> 00:09:49.740\nThe majority of it was written in C.\n\n206\n00:09:49.740 --> 00:09:53.448\nThe Linux kernel today is\nalmost entirely written in C.\n\n207\n00:09:53.448 --> 00:09:58.252\nI think there was quote from Linus\nTorvalds where he said the only thing in\n\n208\n00:09:58.252 --> 00:10:03.471\nthe Linux Kernel that is not written in\nC is the Assembly compiler or whatever.\n\n209\n00:10:03.471 --> 00:10:06.850\nCuz it's written in Assembly but\neverything else is written in C.\n\n210\n00:10:06.850 --> 00:10:11.880\nSo the C shell allows you to issue\ncommands in the command prompt,\n\n211\n00:10:11.880 --> 00:10:14.870\nas if you were writing a C program\nin the C programming language.\n\n212\n00:10:14.870 --> 00:10:18.810\nAnd if that's useful if you know C,\nwhich I don't, so I don't use a C shell.\n\n213\n00:10:18.810 --> 00:10:22.060\nBut I've got it installed and\nI could just type csh and\n\n214\n00:10:22.060 --> 00:10:23.400\nI'll jump right into that shell.\n\n215\n00:10:23.400 --> 00:10:28.080\nAnd it's got a different prompt because it\nfunctions differently than our normal one.\n\n216\n00:10:28.080 --> 00:10:32.240\nBut as far as base functionality I can\nlist folders, I can browse around,\n\n217\n00:10:32.240 --> 00:10:34.170\nnavigate, do whatever it is I need to do.\n\n218\n00:10:34.170 --> 00:10:37.390\nBut now, I've got that extra programming\nfunctionality that I can issue\n\n219\n00:10:37.390 --> 00:10:40.650\nthis C programming language\nright here in my command prompt.\n\n220\n00:10:40.650 --> 00:10:42.420\nAnd I can always back out\nof that if I don't need it.\n\n221\n00:10:43.750 --> 00:10:46.150\nSo that's the C shell.\n\n222\n00:10:46.150 --> 00:10:50.318\nAnd there's some BSD systems that are out\ntoday that default to the C shell but\n\n223\n00:10:50.318 --> 00:10:52.240\nnot any of the big ones.\n\n224\n00:10:52.240 --> 00:10:55.260\nThe bigger ones all have all\nswitched to Bash as well.\n\n225\n00:10:55.260 --> 00:10:57.020\nWho else do we have?\n\n226\n00:10:57.020 --> 00:10:57.800\nTCSH.\n\n227\n00:10:58.810 --> 00:11:02.886\nTCSH is a modification of the C\nshell that is styled after\n\n228\n00:11:02.886 --> 00:11:05.497\nan operating system called 10X.\n\n229\n00:11:05.497 --> 00:11:08.980\n10X was an operating system\nthat was out the late 80s.\n\n230\n00:11:08.980 --> 00:11:12.089\nAnd again, there are some people\nthat have gotten used to that,\n\n231\n00:11:12.089 --> 00:11:15.889\nthey've written scripts or have some\nroutines that are dependent on that type\n\n232\n00:11:15.889 --> 00:11:18.326\nof formating, and so\nyou can run TCSH to get that.\n\n233\n00:11:18.326 --> 00:11:20.090\nSome people like it, I'm not a big fan.\n\n234\n00:11:20.090 --> 00:11:24.509\nI've never used TCH for anything other\nthan experimenting, but there are people\n\n235\n00:11:24.509 --> 00:11:28.110\nwho like that one, so TCSH is out\nthere and you'll bump into that.\n\n236\n00:11:28.110 --> 00:11:32.020\nDash, Dash is another one\nwhich I'm not even sure.\n\n237\n00:11:32.020 --> 00:11:33.100\nLet me see what I have installed.\n\n238\n00:11:33.100 --> 00:11:34.350\nDo I have TCSH?\n\n239\n00:11:34.350 --> 00:11:38.600\nYeah, I have a TCSH installed and Dash.\n\n240\n00:11:38.600 --> 00:11:42.310\nDash is another one that is\nactually somewhat popular.\n\n241\n00:11:42.310 --> 00:11:46.010\nDebian for a long time defaulted\nto Dash as their shell.\n\n242\n00:11:46.010 --> 00:11:50.662\nAnd Dash, it stands for\nthe Debian Almquist Shell.\n\n243\n00:11:50.662 --> 00:11:51.580\n&gt;&gt; Almquist?\n&gt;&gt; Almquist\n\n244\n00:11:51.580 --> 00:11:54.270\nwas the last name of the guy\nwho created this one.\n\n245\n00:11:54.270 --> 00:11:56.600\nAnd it was just a shell that he liked.\n\n246\n00:11:56.600 --> 00:11:59.355\nIt was customized the way that he\nwanted it, and people loved it.\n\n247\n00:11:59.355 --> 00:12:01.640\nAnd in the Debian world,\nthey liked it, too.\n\n248\n00:12:01.640 --> 00:12:04.650\nAnd they had it as their default for\na long time.\n\n249\n00:12:04.650 --> 00:12:06.100\nI don't think it's their default anymore.\n\n250\n00:12:06.100 --> 00:12:07.770\nI'll have to double-check that.\n\n251\n00:12:07.770 --> 00:12:12.210\nBut Dash, I'm on an Ubuntu machine,\nand Dash was installed by default.\n\n252\n00:12:12.210 --> 00:12:15.810\nI didn't have to install it,\nbut it wasn't my default shell.\n\n253\n00:12:15.810 --> 00:12:18.130\nIt just happens to be\ninstalled by default.\n\n254\n00:12:18.130 --> 00:12:23.582\nAnd so I can drop into a Dash shell and\nit really looks like all the other shells.\n\n255\n00:12:23.582 --> 00:12:27.149\nBut there's certain behaviors that\nare different in this one that you may be\n\n256\n00:12:27.149 --> 00:12:29.070\nused to that you have that tradition to.\n\n257\n00:12:29.070 --> 00:12:32.290\nNow, I'll tell you guys if you're\njust getting started with Linux,\n\n258\n00:12:32.290 --> 00:12:35.340\nand you're becoming a power user,\nthe whole title of the show.\n\n259\n00:12:35.340 --> 00:12:37.850\nBash is the one you wanna learn, and\nthat's the one we're gonna be using for\n\n260\n00:12:37.850 --> 00:12:41.050\nthe whole rest of the series as I\nshow you guys the scripting and\n\n261\n00:12:41.050 --> 00:12:42.330\nother configurations.\n\n262\n00:12:42.330 --> 00:12:48.100\nSo all these other shells are really only\nuseful for you is if you receive some\n\n263\n00:12:48.100 --> 00:12:53.620\nkind of script or whatever that tells you\nit needs to be run from that custom shell.\n\n264\n00:12:53.620 --> 00:12:57.220\nOtherwise, you're gonna stick with Bash\nand that's where you're gonna operate.\n\n265\n00:12:57.220 --> 00:13:00.830\nAnd even the old, like the really old SH,\nshell type stuff,\n\n266\n00:13:00.830 --> 00:13:04.620\nthe old C shell stuff,\na lot of that will run in Bash just fine.\n\n267\n00:13:04.620 --> 00:13:07.210\nAnd so you're kind of gonna\nstick with just that one.\n\n268\n00:13:07.210 --> 00:13:09.220\nBut you can always install more and\nwork with them.\n\n269\n00:13:09.220 --> 00:13:11.630\nOne of the big things about\nDash that made it popular,\n\n270\n00:13:11.630 --> 00:13:14.990\nthat made Debian really like it,\nis that it was POSIX compliant.\n\n271\n00:13:15.990 --> 00:13:21.820\nIf you never heard of POSIX, in the early\nUnix days, AT&amp;T never sold Unix.\n\n272\n00:13:21.820 --> 00:13:24.920\nWhat they did is they licensed\nthe source code to people and\n\n273\n00:13:24.920 --> 00:13:26.660\nlet them create their\nown operating systems.\n\n274\n00:13:26.660 --> 00:13:31.840\nAnd so things like MINIX and TENEX, these\noperating system we hear about, Solaris.\n\n275\n00:13:31.840 --> 00:13:37.010\nThey were all licensed from Unix and\nso they're effectively Unix.\n\n276\n00:13:37.010 --> 00:13:42.900\nBut if you wanted to ensure compatibility\nthat a program could run on Sun OS and\n\n277\n00:13:42.900 --> 00:13:44.080\nthen it could run on TENEX and\n\n278\n00:13:44.080 --> 00:13:48.290\nthen it could run on MINIX there had to\nbe some kind of consistency between them.\n\n279\n00:13:48.290 --> 00:13:53.370\nAnd so they had POSIX compliance,\nyou could license the Unix source code.\n\n280\n00:13:53.370 --> 00:13:55.470\nAnd choose to be POSIX compliant or not.\n\n281\n00:13:55.470 --> 00:13:57.829\nIf you were POSIX compliant,\nthen a program written for\n\n282\n00:13:57.829 --> 00:14:00.960\nyour system would likely run on\nother POSIX compliant systems.\n\n283\n00:14:00.960 --> 00:14:04.660\nAnd the Dash shell\nenforces POSIX compliance.\n\n284\n00:14:04.660 --> 00:14:07.240\nSo it makes sure than anything\nyou do is POSIX compliant, and\n\n285\n00:14:07.240 --> 00:14:08.540\nthat means it's going to be portable.\n\n286\n00:14:08.540 --> 00:14:10.960\nYou can take that code, or\nscript, or whatever and\n\n287\n00:14:10.960 --> 00:14:12.140\ntake it to other systems and run fine.\n\n288\n00:14:12.140 --> 00:14:15.650\nAnd that's one of the reasons why\nDebian latched onto that one early on.\n\n289\n00:14:15.650 --> 00:14:19.665\nSome of the other shows like Bash,\nBash doesn't care if you want to be POSIX\n\n290\n00:14:19.665 --> 00:14:22.690\ncompliant great,\nif you don't want to that's fine too.\n\n291\n00:14:22.690 --> 00:14:24.140\nThey leave it up to you so\n\n292\n00:14:24.140 --> 00:14:28.574\nBash is more flexible which is kind\nof why it's the default everywhere.\n\n293\n00:14:28.574 --> 00:14:33.830\nBut Dash is still around because of\nthat enforcement of POSIX compliance.\n\n294\n00:14:33.830 --> 00:14:35.985\nSo that's a reason why we\nmight choose to use that one.\n\n295\n00:14:35.985 --> 00:14:39.773\n&gt;&gt; All right Don let's say for\nsome reason I really need that C shell,\n\n296\n00:14:39.773 --> 00:14:42.970\nto be my default,\ncan we change what the default is?\n\n297\n00:14:42.970 --> 00:14:46.070\n&gt;&gt; Yeah, yeah absolutely, so\nif you're worried about forgetting.\n\n298\n00:14:46.070 --> 00:14:47.840\nSo maybe I wanna be POSIX compliant, or\n\n299\n00:14:47.840 --> 00:14:50.640\nI wanna use Dash,\nI wanna make sure that's my default shell.\n\n300\n00:14:50.640 --> 00:14:54.139\nWell, I could say I'll leave Bash and\nthen every time I open up a terminal,\n\n301\n00:14:54.139 --> 00:14:55.710\nI'll just make sure to run Dash.\n\n302\n00:14:55.710 --> 00:14:58.580\nI can even add a little like\nprofile script to say run\n\n303\n00:14:58.580 --> 00:14:59.930\nthis command every time I run it.\n\n304\n00:14:59.930 --> 00:15:01.180\nThat causes problems though.\n\n305\n00:15:01.180 --> 00:15:03.700\nSo instead it's better\nto change your default.\n\n306\n00:15:03.700 --> 00:15:10.910\nAnd there's a command you can run chsh,\nwhich is the change shell command.\n\n307\n00:15:10.910 --> 00:15:14.670\nAnd when you run that, it allows\nyou to change what your shell is.\n\n308\n00:15:14.670 --> 00:15:17.930\nNow, it's gonna ask you for your password\nbecause it's changing your user account.\n\n309\n00:15:17.930 --> 00:15:19.400\nSo, you need to provide your password.\n\n310\n00:15:19.400 --> 00:15:22.040\nAnd then after that it's gonna ask\nyou what shell you wanna use and\n\n311\n00:15:22.040 --> 00:15:25.000\nyou need to know where\nyour shell is stored.\n\n312\n00:15:25.000 --> 00:15:32.570\nSo, before you run chsh, it's a good idea\nto run which followed by your shell name.\n\n313\n00:15:32.570 --> 00:15:34.620\nAnd that that way we can\nfind the shell for you.\n\n314\n00:15:34.620 --> 00:15:37.010\nSo mine is in /bin/dash.\n\n315\n00:15:37.010 --> 00:15:41.560\nThat's important because,\non Ubuntu the dash shows a default and so\n\n316\n00:15:41.560 --> 00:15:43.550\nits in /bin/dash.\n\n317\n00:15:43.550 --> 00:15:47.581\nBut if you run Fedora it might not have it\nyou might have to install it now it's in\n\n318\n00:15:47.581 --> 00:15:49.090\n/user/bin/dash.\n\n319\n00:15:49.090 --> 00:15:51.980\nSo its in a different place so\nyou need to find your shell first.\n\n320\n00:15:51.980 --> 00:15:53.640\nThat's kinda step one.\n\n321\n00:15:53.640 --> 00:15:57.757\nAnd then after that you can run chsh.\n\n322\n00:15:57.757 --> 00:15:59.661\nYou can provide your password.\n\n323\n00:15:59.661 --> 00:16:03.544\nAnd if you're an administrator you can do\na command line argument to specify other\n\n324\n00:16:03.544 --> 00:16:06.510\nusers here so you can change\nsomebody else's default shell.\n\n325\n00:16:06.510 --> 00:16:08.100\nBut, I'm changing mine.\n\n326\n00:16:08.100 --> 00:16:11.020\nAnd so I'll punch in my password,\nif I can remember it.\n\n327\n00:16:12.370 --> 00:16:14.820\nThere we go and now it's asking for\nwhat shell I wanna use.\n\n328\n00:16:14.820 --> 00:16:17.700\nAnd you'll notice the default\nlogin shell here, is /bin/bash,\n\n329\n00:16:17.700 --> 00:16:19.520\nthat's what it wants me to use.\n\n330\n00:16:19.520 --> 00:16:26.490\nBut I can put in /bin/dash and I'll hit\nthat and now, my default shell is changed.\n\n331\n00:16:26.490 --> 00:16:33.840\nIf we go back to the passwd file,\nthat password file and\n\n332\n00:16:33.840 --> 00:16:39.070\nI look at my entry, see how my default\nis now /bin/dash instead of bash.\n\n333\n00:16:39.070 --> 00:16:42.030\nNow, does that take effect right away?\n\n334\n00:16:42.030 --> 00:16:43.890\nWell it actually doesn't.\n\n335\n00:16:43.890 --> 00:16:48.870\nIf I log out and log back in,\nI've still got the longer prompt here.\n\n336\n00:16:48.870 --> 00:16:54.950\nI'm still in bash, sorry because I didn't\nlog out and log back in let me clarify.\n\n337\n00:16:54.950 --> 00:16:56.070\nIf I log out and\n\n338\n00:16:56.070 --> 00:17:00.160\nlog back in, that little profile gets\nloaded, it only gets loaded at login time.\n\n339\n00:17:00.160 --> 00:17:02.630\nSo I need to logout and log back in.\n\n340\n00:17:02.630 --> 00:17:07.190\nAnd then when I open up a terminal,\nI'll get the regular Dash terminal.\n\n341\n00:17:07.190 --> 00:17:10.640\nAnd now I'll be able to go in and\nstart in doing things in that way.\n\n342\n00:17:10.640 --> 00:17:12.705\nAnd know when I'm being POSIX\ncompliant because that's important.\n\n343\n00:17:12.705 --> 00:17:13.682\n&gt;&gt; [LAUGH]\n&gt;&gt; Maybe is, and\n\n344\n00:17:13.682 --> 00:17:15.270\nthat's how we'd ensure that.\n\n345\n00:17:15.270 --> 00:17:17.990\nBut chsh that's how you\nchange the shell and\n\n346\n00:17:17.990 --> 00:17:20.448\nthen whoever the user is just\nneed to logout and log back in.\n\n347\n00:17:20.448 --> 00:17:22.563\nThat's their new default and\nthat's what they're gonna get.\n\n348\n00:17:22.563 --> 00:17:24.864\n&gt;&gt; All right Don again\na lot of great stuff there,\n\n349\n00:17:24.864 --> 00:17:28.110\nreally taking a look at the different\nshells that are available.\n\n350\n00:17:28.110 --> 00:17:29.347\nHow we can determine\nwhat shell we're using.\n\n351\n00:17:29.347 --> 00:17:31.642\nWhat shells we have on our system, and\n\n352\n00:17:31.642 --> 00:17:34.455\nhow to change that default\nshell if we need to.\n\n353\n00:17:34.455 --> 00:17:37.440\nI'm really starting to feel\nlike a power user on Linux.\n\n354\n00:17:37.440 --> 00:17:39.640\nWe've covered terminals in that part one.\n\n355\n00:17:39.640 --> 00:17:41.540\nWe looked at shells in part two.\n\n356\n00:17:41.540 --> 00:17:44.700\nSo anything else you wanna add\nbefore we close this one out Don?\n\n357\n00:17:44.700 --> 00:17:46.926\n&gt;&gt; You know the shells are all really,\nreally small, so\n\n358\n00:17:46.926 --> 00:17:49.464\ndon't hesitate to install four,\nfive, six, all of them.\n\n359\n00:17:49.464 --> 00:17:51.863\n[LAUGH] You can jump in and mess around.\n\n360\n00:17:51.863 --> 00:17:54.583\nBut if you are getting started out,\nI do recommend that you stay in Bash.\n\n361\n00:17:54.583 --> 00:17:56.672\nThat Bash is kind of\nthe way of the future,\n\n362\n00:17:56.672 --> 00:17:59.030\nit's what most things have settled on.\n\n363\n00:17:59.030 --> 00:18:01.428\nAnd so that's the one you really\nwanna learn and get used to.\n\n364\n00:18:01.428 --> 00:18:04.823\nThat's what we're gonna use the whole rest\nof this series we're gonna be in Bash.\n\n365\n00:18:04.823 --> 00:18:06.096\nI'm not gonna mess the other shells.\n\n366\n00:18:06.096 --> 00:18:08.155\nBut don't discount the other\nshells they're there for\n\n367\n00:18:08.155 --> 00:18:09.782\na reason mostly backwards compatibility.\n\n368\n00:18:09.782 --> 00:18:12.490\n&gt;&gt; Very good, all right Don well\nwe thank you for that information.\n\n369\n00:18:12.490 --> 00:18:14.581\nThat's gonna do it for\nthis one, signing off for\n\n370\n00:18:14.581 --> 00:18:16.469\nITProTV I've been your host Mike Rodrick.\n\n371\n00:18:16.469 --> 00:18:17.239\n&gt;&gt; And I'm Don Pezet.\n\n372\n00:18:17.239 --> 00:18:18.430\n&gt;&gt; And I'll see you next time.\n\n373\n00:18:18.430 --> 00:18:26.096\n[MUSIC]\n\n374\n00:18:26.096 --> 00:18:28.454\nThank you for watching ITPro.TV.\n\n",
          "vimeoId": "221901598"
        },
        {
          "description": "In this episode, Don and Mike demonstrate executing basic commands. They start with simple commands like date and hostname. Then they look at using commands that take options, like ls and cat. They finish by demonstrating how to use history to execute a previously used command.",
          "length": "2008",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-1-executing_commands-061417-PGM.00_33_12_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-1-executing_commands-061417-PGM.00_33_12_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-1-executing_commands-061417-PGM.00_33_12_01.Still001-sm.jpg",
          "title": "Executing Commands",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:08.067\nWelcome to ITProTV I'm\nyour host [CROSSTALK]\n\n2\n00:00:08.067 --> 00:00:12.292\n&gt;&gt; You're watching ITProTV.\n\n3\n00:00:12.292 --> 00:00:15.739\n&gt;&gt; Hello, welcome to another\nexiting episode here at ITPro.TV.\n\n4\n00:00:15.739 --> 00:00:20.140\nI'm your host Mike Rodrick and today we're\ndoing our become a Linux power user.\n\n5\n00:00:20.140 --> 00:00:24.326\nAnd specifically int his episode,\nwe'll be focusing on executing commands.\n\n6\n00:00:24.326 --> 00:00:25.915\nI know, sounds exciting right.\n\n7\n00:00:25.915 --> 00:00:27.989\n[LAUGH].\nAnd here to help us with that is Mr.\n\n8\n00:00:27.989 --> 00:00:28.650\nDon Pezet.\n\n9\n00:00:28.650 --> 00:00:29.530\nWelcome back, Don.\n\n10\n00:00:29.530 --> 00:00:31.240\n&gt;&gt; Hey, we're going to make\nit as exciting as we can.\n\n11\n00:00:31.240 --> 00:00:34.350\nYou know, in the first couple of episodes,\nwe got a chance to see.\n\n12\n00:00:34.350 --> 00:00:36.564\nUsing the terminal and\naccessing the shell, but\n\n13\n00:00:36.564 --> 00:00:38.462\nwe didn't actually do much of anything.\n\n14\n00:00:38.462 --> 00:00:39.887\n&gt;&gt; We could type anything.\n\n15\n00:00:39.887 --> 00:00:40.431\n[LAUGH]\n&gt;&gt; At some point,\n\n16\n00:00:40.431 --> 00:00:42.760\nwe've got to do something or this is\nnot going to be very powerful at all.\n\n17\n00:00:42.760 --> 00:00:44.330\nSo, this is the episode where\nwe're just going to start.\n\n18\n00:00:44.330 --> 00:00:46.140\nWe're going to start issuing\nsome command line commands.\n\n19\n00:00:46.140 --> 00:00:47.770\nWe're going to see how\nthe command line works.\n\n20\n00:00:47.770 --> 00:00:49.420\nThere's some really amazing,\n\n21\n00:00:49.420 --> 00:00:51.510\namazingly powerful stuff you\ncan do from the command line.\n\n22\n00:00:51.510 --> 00:00:54.360\nThis whole need for a series called\nBecoming a Linux Power User.\n\n23\n00:00:54.360 --> 00:00:56.110\nSo, this is where it really starts.\n\n24\n00:00:56.110 --> 00:00:58.110\nBut we do need to know\nhow to issue commands and\n\n25\n00:00:58.110 --> 00:01:00.380\nwhat Linux is expecting us to do.\n\n26\n00:01:00.380 --> 00:01:02.650\nSo that's what we're going to take\na look at right here in this episode.\n\n27\n00:01:02.650 --> 00:01:03.220\n&gt;&gt; Fantastic.\n\n28\n00:01:03.220 --> 00:01:04.700\nAll right.\nWhere do we start?\n\n29\n00:01:04.700 --> 00:01:06.090\n&gt;&gt; Well,\nlet's just start with basic commands.\n\n30\n00:01:06.090 --> 00:01:09.800\nRight, basic command entry,\na couple of things that\n\n31\n00:01:09.800 --> 00:01:11.990\nyou may not be familiar with\nfrom other operating systems.\n\n32\n00:01:11.990 --> 00:01:15.955\nYou're coming from Mac OS or Windows or\nwhatever is that a lot of what we do\n\n33\n00:01:15.955 --> 00:01:19.931\nin the Linux world and really the UNIX\nworld as a whole is case sensitive.\n\n34\n00:01:19.931 --> 00:01:24.085\nAnd expects a very particular syntax if\nyou deviate from that syntax it's not very\n\n35\n00:01:24.085 --> 00:01:27.831\nnice to you it is not going to hold your\nhand and give you a whole lot of help.\n\n36\n00:01:27.831 --> 00:01:30.889\nSo we gotta have a good understanding\nof what we're expected to do and\n\n37\n00:01:30.889 --> 00:01:34.264\nunderstand how to get help at those times\nwhen we need it so we're gonna punch\n\n38\n00:01:34.264 --> 00:01:37.558\nthrough in and take a look at some basic\nstuff right here in the beginning.\n\n39\n00:01:37.558 --> 00:01:40.030\nTalking about executing a single command.\n\n40\n00:01:40.030 --> 00:01:42.250\nI'm in my terminal right here.\n\n41\n00:01:42.250 --> 00:01:43.900\nAnd I can see my command prompt.\n\n42\n00:01:43.900 --> 00:01:46.020\nAnd it's basically waiting for\nme to do something.\n\n43\n00:01:46.020 --> 00:01:47.570\nAnd so I need to type in a command.\n\n44\n00:01:49.240 --> 00:01:52.970\nIt's just normal keyboard type stuff\nif you know the command to type.\n\n45\n00:01:52.970 --> 00:01:56.850\nIf you don't know the command to type,\nyou're kind of just dead in the water?\n\n46\n00:01:56.850 --> 00:01:58.610\n&gt;&gt; Yeah, yeah!\nI mean, you type a question mark,\n\n47\n00:01:58.610 --> 00:02:01.920\nit does nothing because it thinks\nthe question mark is the command, right?\n\n48\n00:02:01.920 --> 00:02:04.490\nSo, we need to know\nthe commands to execute and\n\n49\n00:02:04.490 --> 00:02:07.510\nthere are a standard set of commands\nyou can expect to be there.\n\n50\n00:02:07.510 --> 00:02:11.330\nMany of which are built into the system,\nsome of which we load afterwards or\n\n51\n00:02:11.330 --> 00:02:13.620\ninclude it with the system- there\nare different things that happen there.\n\n52\n00:02:13.620 --> 00:02:16.530\nBut these commands are us\ninteracting with the system.\n\n53\n00:02:16.530 --> 00:02:19.450\nAnd you just type whatever\nthat command name is.\n\n54\n00:02:19.450 --> 00:02:21.845\nIf it's a simple command like\nthe date command, right?\n\n55\n00:02:21.845 --> 00:02:23.098\nD-A-T-E.\n\n56\n00:02:23.098 --> 00:02:26.070\nI can type date, and there's today's date.\n\n57\n00:02:26.070 --> 00:02:27.910\nIt's just a simple command.\n\n58\n00:02:27.910 --> 00:02:29.270\nYou issue one word.\n\n59\n00:02:29.270 --> 00:02:30.890\nIt issues a response.\n\n60\n00:02:30.890 --> 00:02:33.660\nAnd that's the most basic type\nof command you've got, right?\n\n61\n00:02:33.660 --> 00:02:34.930\nOne command, one response.\n\n62\n00:02:34.930 --> 00:02:36.590\nIn and out, done.\n\n63\n00:02:36.590 --> 00:02:38.570\nThere's plenty of commands\nthat are like that,\n\n64\n00:02:38.570 --> 00:02:43.030\ncommands like pwd, which is short for\nthe present working directory.\n\n65\n00:02:43.030 --> 00:02:46.100\nSo show me what folder I'm\nin in the file system.\n\n66\n00:02:46.100 --> 00:02:50.070\nYou run the one command, it tells you\nthe folder, I'm in /home/dpezet, right?\n\n67\n00:02:50.070 --> 00:02:51.250\nSo there we go, very exciting.\n\n68\n00:02:52.250 --> 00:02:55.860\nHostname I tell it hey,\nwhat's the name of my computer?\n\n69\n00:02:55.860 --> 00:02:58.110\nIt returns you're on Don's laptop, right?\n\n70\n00:02:58.110 --> 00:02:59.490\nOne command, one response.\n\n71\n00:02:59.490 --> 00:03:00.820\nThat's basic command.\n\n72\n00:03:00.820 --> 00:03:05.460\nNow if I type it in all CAPS,\ncommand not found.\n\n73\n00:03:05.460 --> 00:03:08.580\nOr even one letter, command not found.\n\n74\n00:03:08.580 --> 00:03:10.450\nRight?\nNow in a Ubuntu it does this nice thing\n\n75\n00:03:10.450 --> 00:03:13.010\nwhere it tries to figure out what\ncommand you were trying to do, right?\n\n76\n00:03:13.010 --> 00:03:14.880\nLike, well you screwed up,\nwhat were you trying to do?\n\n77\n00:03:14.880 --> 00:03:16.040\nAnd it tries to find it.\n\n78\n00:03:16.040 --> 00:03:17.600\nBut it still doesn't run it for you,\n\n79\n00:03:17.600 --> 00:03:20.570\nyou have to type it in the proper\ncase which s all lower case.\n\n80\n00:03:20.570 --> 00:03:24.700\nSo in the Linux world, just do your\ncommands in all lower case, there's\n\n81\n00:03:24.700 --> 00:03:29.450\nexceptions we'll see later but most part\neverything is done in all lower case.\n\n82\n00:03:29.450 --> 00:03:34.600\nAll right now, simple commands only get\nyou so far, right, like the list command,\n\n83\n00:03:34.600 --> 00:03:38.760\nls, if I wanna see the files\nin my directory I can type ls.\n\n84\n00:03:38.760 --> 00:03:43.160\nAnd I'll see a list of the files,\nokay so I see some stuff great, but\n\n85\n00:03:43.160 --> 00:03:46.330\nwhat if I wanna change the way\nthat output is displayed?\n\n86\n00:03:46.330 --> 00:03:48.830\nRight maybe I want more information,\nI don't just want the names,\n\n87\n00:03:48.830 --> 00:03:51.260\nI want the file sizes or\nwhen they were modified.\n\n88\n00:03:51.260 --> 00:03:54.840\nMaybe I want to alphabetize the list and\nchange that.\n\n89\n00:03:54.840 --> 00:03:56.550\nWe can start to manipulate that.\n\n90\n00:03:56.550 --> 00:04:00.260\nMost commands support\ncommand line arguments.\n\n91\n00:04:00.260 --> 00:04:02.750\nA command line argument\nis like a modifier,\n\n92\n00:04:02.750 --> 00:04:05.480\nsomething that changes\nthe way the command works.\n\n93\n00:04:05.480 --> 00:04:08.110\nAnd you will find that\nmajority of commands do that.\n\n94\n00:04:08.110 --> 00:04:12.450\nThat if you just run a command by itself,\nlike date, and you run that.\n\n95\n00:04:12.450 --> 00:04:15.090\nThere is my upward or\nalias, I get my upward.\n\n96\n00:04:15.090 --> 00:04:22.260\nBut if I do \"ls\" and\nthen a space followed by a dash.\n\n97\n00:04:22.260 --> 00:04:25.950\nI can then provide command line arguments\nthat change the way it behaves.\n\n98\n00:04:25.950 --> 00:04:28.860\nAnd there's two different ways to\nprovide command line arguments:\n\n99\n00:04:28.860 --> 00:04:32.060\nthere is the Unix way and the BSD way.\n\n100\n00:04:32.060 --> 00:04:34.570\nThe Unix way uses individual letters.\n\n101\n00:04:34.570 --> 00:04:37.770\nSo if i wanna see everything\nthat's in this folder,\n\n102\n00:04:37.770 --> 00:04:42.740\neven hidden files I can do ls -a,\na is short for all, right?\n\n103\n00:04:42.740 --> 00:04:46.170\nSo, I want it to show me all\nof the stuff in this folder.\n\n104\n00:04:46.170 --> 00:04:47.430\nAnd when I run ls -a,\n\n105\n00:04:47.430 --> 00:04:50.960\nyou'll see a lot more of my home\nfolder than what we saw a moment ago.\n\n106\n00:04:50.960 --> 00:04:54.510\nAll these files that start with a dot or\neven the folders that start with a dot-\n\n107\n00:04:54.510 --> 00:04:58.080\nthose are hidden by default,\nso -a told it to show all.\n\n108\n00:04:58.080 --> 00:05:04.580\nWell, in the bsd notation,\nwhat we would say is we would say ls--all.\n\n109\n00:05:04.580 --> 00:05:05.360\nThe word all.\n\n110\n00:05:05.360 --> 00:05:08.300\nRight?\nInstead of one dash, we do two dashes.\n\n111\n00:05:08.300 --> 00:05:09.680\nAnd that's important.\n\n112\n00:05:09.680 --> 00:05:11.710\nBecause when I say dash dash,\n\n113\n00:05:11.710 --> 00:05:16.020\nthat's the indicator that tells it I'm\nabout to give you a word not a letter\n\n114\n00:05:16.020 --> 00:05:19.630\nIf it was just a single dash, we'd assume\nthat I was about to give it a letter.\n\n115\n00:05:19.630 --> 00:05:22.630\nAnd I might not get the behavior\nthat I expect, right.\n\n116\n00:05:22.630 --> 00:05:24.120\nThings can go a little weird.\n\n117\n00:05:24.120 --> 00:05:31.790\nIf I run ls -- all, I get the same output\nthat I did when I ran ls- a, right.\n\n118\n00:05:31.790 --> 00:05:38.570\nBut if I run ls- o like that, and\nrun it things look really different.\n\n119\n00:05:38.570 --> 00:05:40.420\nOkay, why is that?\n\n120\n00:05:40.420 --> 00:05:45.600\nWell, instead of looking at it as a word,\nit looked at it as letters, and\n\n121\n00:05:45.600 --> 00:05:48.010\neach letter means something\na little different.\n\n122\n00:05:48.010 --> 00:05:53.459\nSo for example, if I do ls -a, that\nmeans show all files, even hidden ones.\n\n123\n00:05:53.459 --> 00:05:58.233\nAnd if I do -l, that means give me the\nlong output, the long output is the file\n\n124\n00:05:58.233 --> 00:06:02.810\nname with the modification date,\nthe permissions, and the file size.\n\n125\n00:06:02.810 --> 00:06:05.650\nSo it's adding all of that right?\n\n126\n00:06:05.650 --> 00:06:10.390\nAnd so when I do ls-al I get that output.\n\n127\n00:06:10.390 --> 00:06:15.480\nSo when I ran ls-all like that.\n\n128\n00:06:15.480 --> 00:06:16.706\nIt said these are letters.\n\n129\n00:06:16.706 --> 00:06:21.600\nI mean -a, I mean -l and\nI mean -l again which is the same thing.\n\n130\n00:06:21.600 --> 00:06:22.660\nSo it doesn't do anything, right?\n\n131\n00:06:22.660 --> 00:06:25.470\nAnd so a process of that way and\nthat's why I got the different output.\n\n132\n00:06:25.470 --> 00:06:27.640\nWhen you do more than one\nletter you can combine them.\n\n133\n00:06:27.640 --> 00:06:31.470\nSo for example I like to\ndo ls -a to show all files,\n\n134\n00:06:31.470 --> 00:06:35.870\nls- l to give a long output and ls -h.\n\n135\n00:06:35.870 --> 00:06:40.520\nWhich takes these file sizes and puts\nthem into a human readable format, right?\n\n136\n00:06:40.520 --> 00:06:42.350\nCuz these are bits, and bits are annoying.\n\n137\n00:06:42.350 --> 00:06:43.600\nAnd, or I'm sorry, bytes.\n\n138\n00:06:43.600 --> 00:06:45.030\nSee, I screwed that up, right?\n\n139\n00:06:45.030 --> 00:06:46.400\n&gt;&gt; [LAUGH]\n&gt;&gt; The bytes, but either way,\n\n140\n00:06:46.400 --> 00:06:47.390\nbytes are annoying too.\n\n141\n00:06:47.390 --> 00:06:50.940\nSo I want it to be in megabytes,\nor gigabytes, or kilobytes even.\n\n142\n00:06:50.940 --> 00:06:53.930\nSo putting in some of these is a little\nmore easy for me to handle, so -h.\n\n143\n00:06:53.930 --> 00:06:57.284\nSo that's ls, dash a, dash l, dash h.\n\n144\n00:06:57.284 --> 00:07:00.040\nAnd when I run that,\nthere's the output the way I like to see.\n\n145\n00:07:00.040 --> 00:07:01.430\nSee how they're in kilobytes now?\n\n146\n00:07:01.430 --> 00:07:03.010\nThat makes like a lot easier.\n\n147\n00:07:03.010 --> 00:07:05.080\nSo, now I can see that information.\n\n148\n00:07:05.080 --> 00:07:10.200\nI can do the same command by combining\nthose letters together, dash a l h,\n\n149\n00:07:10.200 --> 00:07:14.610\nand the command like processor\nwill interpret this the same way.\n\n150\n00:07:14.610 --> 00:07:18.480\nIt treats them as letters\nbecause I used a single dash.\n\n151\n00:07:18.480 --> 00:07:21.270\nIf I used a double dash it\nwould assume it's a word and\n\n152\n00:07:21.270 --> 00:07:24.930\nALH is not a word, it'll generate an error\nand that's the end of that right?\n\n153\n00:07:24.930 --> 00:07:29.060\nSo when we run command line arguments,\nhere I'm gonna clear my screen with\n\n154\n00:07:29.060 --> 00:07:33.980\na clear command and\nI'll run ls-alh all together.\n\n155\n00:07:33.980 --> 00:07:34.730\nAnd there it is.\n\n156\n00:07:34.730 --> 00:07:35.240\nRight?\n\n157\n00:07:35.240 --> 00:07:37.530\nSo that's where that\ndouble dash is important.\n\n158\n00:07:37.530 --> 00:07:39.100\nIt makes a big difference, right?\n\n159\n00:07:39.100 --> 00:07:43.343\nBecause ls-all is being\ntreated as letters.\n\n160\n00:07:43.343 --> 00:07:47.608\nls--all is being treated as a word.\n\n161\n00:07:47.608 --> 00:07:49.175\nVery different outputs, right?\n\n162\n00:07:49.175 --> 00:07:50.183\nSo we've got to be careful,\n\n163\n00:07:50.183 --> 00:07:53.040\nwe've got to be sensitive with that as\nwe provide these command line arguments.\n\n164\n00:07:53.040 --> 00:07:55.666\nWhat's another example?\n\n165\n00:07:55.666 --> 00:07:58.780\nOther examples of command line arguments.\n\n166\n00:07:58.780 --> 00:08:01.280\nThey don't always have to\nbe dash something, right?\n\n167\n00:08:01.280 --> 00:08:05.460\nA dash something is usually modifying\nthe way that command behaves, right?\n\n168\n00:08:05.460 --> 00:08:08.750\nAnd the command may have a ton\nof dash modifiers that you use.\n\n169\n00:08:08.750 --> 00:08:13.680\nBut a lot of commands expect to\nhave file input or file output.\n\n170\n00:08:13.680 --> 00:08:16.360\nAnd so you might be specifying\nsomething like a file name, or\n\n171\n00:08:16.360 --> 00:08:19.170\nsomething else to change\nthe way that command behaves.\n\n172\n00:08:19.170 --> 00:08:23.120\nNot a modifier per se but\njust input or output.\n\n173\n00:08:23.120 --> 00:08:26.100\nAnd that looks a little different, because\nyou don't normally use a dash for that.\n\n174\n00:08:26.100 --> 00:08:28.560\nThis is just input or\noutput that we're feeding to it.\n\n175\n00:08:28.560 --> 00:08:31.130\nSo for example, the cat command.\n\n176\n00:08:31.130 --> 00:08:33.958\nCat, it lists a file.\n\n177\n00:08:33.958 --> 00:08:37.310\nIf I wanna see the contents of a file,\nI can use the cat command, and\n\n178\n00:08:37.310 --> 00:08:39.140\nit'll output that file on my screen.\n\n179\n00:08:39.140 --> 00:08:44.160\nSo if I wanna look at /etc/password.\n\n180\n00:08:44.160 --> 00:08:45.020\nI wanna look at that file.\n\n181\n00:08:45.020 --> 00:08:45.800\nWhen I say cat,\n\n182\n00:08:45.800 --> 00:08:49.764\nand then I provide it the file that's\ngonna serve as the input to this command.\n\n183\n00:08:49.764 --> 00:08:53.017\nAnd then it outputs that on my screen,\nright.\n\n184\n00:08:53.017 --> 00:08:57.310\nSo that's the cat command, or I think in a\nprevious episode, I used the more command.\n\n185\n00:08:57.310 --> 00:08:58.820\nVery similar, right?\n\n186\n00:08:58.820 --> 00:09:01.250\nMore will show me that file, and\n\n187\n00:09:01.250 --> 00:09:05.170\nit'll give me a pagination,\nsee there's more, 40%.\n\n188\n00:09:05.170 --> 00:09:09.560\nSo now I can page through it, whereas cat\njust dumps it all under the screen, right.\n\n189\n00:09:09.560 --> 00:09:15.170\nSo this is not a command line argument as\nmuch as it's just an input to the command.\n\n190\n00:09:15.170 --> 00:09:17.030\nI'm feeding data into it.\n\n191\n00:09:17.030 --> 00:09:20.320\nSo that's why there's not dash before or\na double dash, even.\n\n192\n00:09:20.320 --> 00:09:22.630\nIt's just providing that\ninput to the command.\n\n193\n00:09:24.640 --> 00:09:29.140\nSome actually need more than one\nkind of value that's being provided.\n\n194\n00:09:29.140 --> 00:09:31.720\nSo for example, I did LS, right.\n\n195\n00:09:31.720 --> 00:09:34.410\nAnd when I do LS,\nthere's a bunch of folders in here,\n\n196\n00:09:34.410 --> 00:09:35.910\nmaybe I don't wanna see some of them.\n\n197\n00:09:35.910 --> 00:09:39.310\nSo, I can exclude something, like,\nif I wanna exclude the desktop command,\n\n198\n00:09:39.310 --> 00:09:44.450\nI can say LS--hide,\ncuz I wanna hide something.\n\n199\n00:09:44.450 --> 00:09:49.247\nBut then I need to tell what I wanna\nhide and so, I can say = desktop, right?\n\n200\n00:09:49.247 --> 00:09:55.250\nSo --hide is the actual modifier, right?\n\n201\n00:09:55.250 --> 00:09:56.170\nThe argument.\n\n202\n00:09:56.170 --> 00:10:00.940\nAnd then I'm providing desktop as\nthe value that I want to hide.\n\n203\n00:10:00.940 --> 00:10:02.570\nSo this one is a little bit different too.\n\n204\n00:10:02.570 --> 00:10:05.780\nThe equal sign here is\nwhat's adding that modifier.\n\n205\n00:10:05.780 --> 00:10:08.180\nThis is part of command syntax.\n\n206\n00:10:08.180 --> 00:10:10.910\nAnd if you know it, if you gotta memorize,\nit's no big deal, right?\n\n207\n00:10:10.910 --> 00:10:14.640\nBut if this is the very first time\nyou've been in the Linux command line,\n\n208\n00:10:14.640 --> 00:10:18.290\nyou might be asking yourself,\nDon, how do you know to do that?\n\n209\n00:10:18.290 --> 00:10:20.270\nAnd, the short answer-\n&gt;&gt; And what else is there?\n\n210\n00:10:20.270 --> 00:10:21.660\n&gt;&gt; Yeah, and what else is there, right.\n\n211\n00:10:21.660 --> 00:10:22.868\nCuz I'm only showing you\na couple of commands.\n\n212\n00:10:22.868 --> 00:10:24.470\n[INAUDIBLE] More, right?\n\n213\n00:10:24.470 --> 00:10:28.220\nSo what we're seeing here is the tip\nof the iceberg and you can memorize it.\n\n214\n00:10:28.220 --> 00:10:30.700\nBut I'll be honest with you guys,\nI don't memorize that.\n\n215\n00:10:30.700 --> 00:10:33.420\nI would not have known the --hide command\nif I didn't have it written on this piece\n\n216\n00:10:33.420 --> 00:10:35.850\nof paper beside me,\ncuz I don't use it very often.\n\n217\n00:10:35.850 --> 00:10:36.880\nIt's very rare.\n\n218\n00:10:36.880 --> 00:10:37.850\nI don't have to hide things.\n\n219\n00:10:37.850 --> 00:10:38.650\nI can just ignore them.\n\n220\n00:10:38.650 --> 00:10:40.690\nMy mind is very good at ignoring things,\nand so\n\n221\n00:10:40.690 --> 00:10:42.120\nI don't wanna see so I'll ignore it.\n\n222\n00:10:42.120 --> 00:10:45.400\nBut here, if I run this command and\nI choose the Hide Desktop,\n\n223\n00:10:45.400 --> 00:10:49.870\nI get the same output except the desktop\nfolder, it's normally there.\n\n224\n00:10:49.870 --> 00:10:51.740\nIt hit it,\nit worked the way that I wanted to.\n\n225\n00:10:51.740 --> 00:10:54.630\nSo one of the key things\nabout these commands,\n\n226\n00:10:54.630 --> 00:10:56.160\nis we do need to learn about them.\n\n227\n00:10:56.160 --> 00:11:01.050\nAnd I'm gonna talk more about that\na little bit later in this series because\n\n228\n00:11:01.050 --> 00:11:02.910\nthere's several different\nways we can learn about it.\n\n229\n00:11:02.910 --> 00:11:07.305\nBut at a minimum, you'll want to learn\nabout the man command, which is short for\n\n230\n00:11:07.305 --> 00:11:08.050\nmanual.\n\n231\n00:11:08.050 --> 00:11:09.730\nEvery command has a manual.\n\n232\n00:11:09.730 --> 00:11:13.187\nAnd so you can say man,\nfollowed by a command, like LS, right.\n\n233\n00:11:14.380 --> 00:11:17.280\nAnd that will show you the manual for it.\n\n234\n00:11:17.280 --> 00:11:21.610\nSo here it's telling me I can use\ndash a or dash dash all, right?\n\n235\n00:11:21.610 --> 00:11:26.560\nNotice that a A might be different, and\nin this case that's what it's saying.\n\n236\n00:11:26.560 --> 00:11:30.300\nIt's almost all leaving out\nsome things when you do dash a.\n\n237\n00:11:30.300 --> 00:11:34.080\nBut it gives you all the command\nsyntax for that command.\n\n238\n00:11:34.080 --> 00:11:36.350\nAnd sometimes it'll even have\nexamples down at the end.\n\n239\n00:11:37.360 --> 00:11:39.190\nNot this one, but sometimes they will, and\n\n240\n00:11:39.190 --> 00:11:40.900\nyou can kind of see how\nthat command works.\n\n241\n00:11:40.900 --> 00:11:45.180\nSo that man command is really\nhandy to be able to find that.\n\n242\n00:11:45.180 --> 00:11:48.130\nThe man command is very powerful, so I'm\ngonna talk about it later to show some of\n\n243\n00:11:48.130 --> 00:11:50.180\nthe different ways we can use it and\nfind out about a whole lot of stuff,\n\n244\n00:11:50.180 --> 00:11:53.750\nnot just about commands, but even\nthe files that are a part of our system.\n\n245\n00:11:53.750 --> 00:11:56.840\nIt's pretty handy for that, all right.\n\n246\n00:11:56.840 --> 00:12:00.020\nThere's plenty of other commands that\nare available, that do different things.\n\n247\n00:12:01.050 --> 00:12:04.692\nMost of the commands I've been\nissuing are just pretty generic,\n\n248\n00:12:04.692 --> 00:12:07.340\nones that are part of the system,\nand there's a lot of those.\n\n249\n00:12:07.340 --> 00:12:12.030\nIf you wanna learn about your user\naccount, for example, you can type ID and\n\n250\n00:12:12.030 --> 00:12:14.050\nit'll show information\nabout your user account,\n\n251\n00:12:14.050 --> 00:12:15.870\nthat shows quite a bit here, right?\n\n252\n00:12:15.870 --> 00:12:18.600\nLike my user name and my Unix ID, my GID,\n\n253\n00:12:18.600 --> 00:12:23.250\nthe groups that I'm in, and so\nit's listing really specific data.\n\n254\n00:12:23.250 --> 00:12:27.616\nIf I want to know my user name,\nthere's alternative commands I might use.\n\n255\n00:12:27.616 --> 00:12:30.240\nSo for example, I could run, who am I.\n\n256\n00:12:30.240 --> 00:12:32.880\nAnd who am I just gives you my username.\n\n257\n00:12:32.880 --> 00:12:35.880\nSo sometimes there's more than one\ncommand that achieves the same goal.\n\n258\n00:12:35.880 --> 00:12:39.201\nIf I want to know my username,\nI could run ID and it's in there,\n\n259\n00:12:39.201 --> 00:12:40.972\nI just need to know to look for it.\n\n260\n00:12:40.972 --> 00:12:43.722\nHey, that's my username or\nI could run whoami, and\n\n261\n00:12:43.722 --> 00:12:46.660\nI get a much more specific-\nthere is my username.\n\n262\n00:12:46.660 --> 00:12:52.180\nYou can also do, this is what's awesome,\nwho am i with spaces,\n\n263\n00:12:52.180 --> 00:12:54.700\nand when you do that,\nthere is my user name also.\n\n264\n00:12:54.700 --> 00:12:57.900\nIn addition, it's showing me\nthe terminal that I'm attached to.\n\n265\n00:12:57.900 --> 00:13:00.140\nAnd so\nI can see a little bit more information,\n\n266\n00:13:00.140 --> 00:13:05.060\nincluding when I logged in to be able to\nsee that and get that information too.\n\n267\n00:13:05.060 --> 00:13:08.280\nSo three commands,\nthey all show me my user name.\n\n268\n00:13:08.280 --> 00:13:09.020\nWhich one is the right one?\n\n269\n00:13:10.090 --> 00:13:11.280\nThey are all right.\n\n270\n00:13:11.280 --> 00:13:13.930\nWhichever one you remember is usually,\n[LAUGH] the one you run.\n\n271\n00:13:13.930 --> 00:13:17.464\nBut sometimes there's one that is more\nbetter suited from what you want,\n\n272\n00:13:17.464 --> 00:13:18.840\nbad grammar, but it works.\n\n273\n00:13:18.840 --> 00:13:21.280\nSo the one that's a little\nmore suited to your task.\n\n274\n00:13:21.280 --> 00:13:23.632\nAnd so you choose the one that's\nappropriate and make use of it.\n\n275\n00:13:23.632 --> 00:13:27.882\nBut there is definitely more than one way\nto achieve a goal in the Linux world.\n\n276\n00:13:27.882 --> 00:13:30.960\nThere's oftentimes, five, six,\nten different ways that you can do\n\n277\n00:13:30.960 --> 00:13:34.410\nthe same thing, and you just gotta find\nthe right command to meet your needs.\n\n278\n00:13:34.410 --> 00:13:37.720\n&gt;&gt; Like you said earlier in another\nepisode, Linux is all about choices right?\n\n279\n00:13:37.720 --> 00:13:38.880\n&gt;&gt; Yeah, absolutely.\n\n280\n00:13:38.880 --> 00:13:42.189\nAnd when we run a command,\nsometimes they're programs, and so\n\n281\n00:13:42.189 --> 00:13:45.820\nwe might've installed more programs\nto change that functionality.\n\n282\n00:13:45.820 --> 00:13:49.420\nSo I can have two installs of Ubuntu that\nare behaving very differently because I\n\n283\n00:13:49.420 --> 00:13:51.410\ninstalled a bunch of extra stuff on one.\n\n284\n00:13:51.410 --> 00:13:55.700\nOther times they're built-in commands,\nthey're just part of the system and\n\n285\n00:13:55.700 --> 00:13:58.880\nthat's kind of an interesting\nthing because you'll find where\n\n286\n00:13:58.880 --> 00:14:00.360\na lot of stuff is a program.\n\n287\n00:14:00.360 --> 00:14:01.463\nSo for example, LS, right.\n\n288\n00:14:01.463 --> 00:14:05.350\nI was running LS to list my folder, right.\n\n289\n00:14:05.350 --> 00:14:09.540\nIf I run the which command,\nwhich tells you where our command sits,\n\n290\n00:14:09.540 --> 00:14:10.960\nI can say which LS.\n\n291\n00:14:10.960 --> 00:14:12.897\nAnd it tells me, hey, that's a program.\n\n292\n00:14:12.897 --> 00:14:15.730\nIt's in /bin/ls.\nThat's where that command is.\n\n293\n00:14:15.730 --> 00:14:19.940\nWell, I also ran the pwd command, right,\nto show me my present working directory.\n\n294\n00:14:19.940 --> 00:14:26.482\nIf I run which pwd, I get, /bin/pwd,\nthat was a program too, darn it.\n\n295\n00:14:26.482 --> 00:14:34.470\n[LAUGH] So you will find some commands\nthat aren't a part of like a utility.\n\n296\n00:14:34.470 --> 00:14:37.460\nSo for example, the type command,\nif I do which type, there we go.\n\n297\n00:14:37.460 --> 00:14:38.730\nThat's what I was looking for.\n\n298\n00:14:38.730 --> 00:14:41.050\nThe type command, I get nothing back.\n\n299\n00:14:41.050 --> 00:14:42.460\nIt's not a program.\n\n300\n00:14:42.460 --> 00:14:44.980\nIt's actually part of the shell.\n\n301\n00:14:44.980 --> 00:14:46.640\nIt's a built in command to the shell.\n\n302\n00:14:46.640 --> 00:14:49.070\nThe shell provides the type command,\nnot a program.\n\n303\n00:14:49.070 --> 00:14:53.140\nSo, most of the time we're\nrunning programs, LS, PWD, right?\n\n304\n00:14:53.140 --> 00:14:57.080\nThose are programs, but sometimes\nthey're what are called built-ins.\n\n305\n00:14:57.080 --> 00:15:02.490\nAnd the type command actually helps us\nto identify built-ins, cuz if I run type\n\n306\n00:15:02.490 --> 00:15:07.150\nLS, it will show me that my\nLS actually isn't a program.\n\n307\n00:15:07.150 --> 00:15:11.280\nIt's an alias,\nit's alias to LS--color=auto,\n\n308\n00:15:11.280 --> 00:15:15.780\nso I get a nice colored output\nof the LS command, right.\n\n309\n00:15:15.780 --> 00:15:21.220\nBut if I do type pwd,\nthat one is just a shell built-in.\n\n310\n00:15:21.220 --> 00:15:22.760\nIt's part of the shell.\n\n311\n00:15:22.760 --> 00:15:25.340\nNow there is a utility it's mapped to,\nbut it is part of it here.\n\n312\n00:15:25.340 --> 00:15:28.530\nAnd so that one's built-in, and\nI can execute that command and\n\n313\n00:15:28.530 --> 00:15:31.330\nthe shell will run it without\neven accessing a program.\n\n314\n00:15:31.330 --> 00:15:33.880\nSo that's all part of the system, and\n\n315\n00:15:33.880 --> 00:15:37.290\nthese commands are all getting\nkind of stuck together.\n\n316\n00:15:37.290 --> 00:15:40.380\nI don't have to worry about the fact\nthat some are in different directories.\n\n317\n00:15:40.380 --> 00:15:46.132\nAnd as I do the which command, and\nI look at bash, which is in /bin/bash.\n\n318\n00:15:46.132 --> 00:15:50.951\nOr ksh, which is in /users/bin/ksh.\n\n319\n00:15:50.951 --> 00:15:53.436\nThese programs are in different locations.\n\n320\n00:15:53.436 --> 00:15:56.639\nSome are built-in, some are added on,\nthey're all over the place.\n\n321\n00:15:56.639 --> 00:15:59.486\nI don't have to worry about that\nbecause when I run commands,\n\n322\n00:15:59.486 --> 00:16:01.144\nthere's something called a path.\n\n323\n00:16:01.144 --> 00:16:06.360\nAnd the path is showing the system\nall the places to look for a command.\n\n324\n00:16:06.360 --> 00:16:12.464\nSo if I type something, if I type don and\nrun it, it's gonna say, is that a program?\n\n325\n00:16:12.464 --> 00:16:16.085\nLet me see if I can find a program called\ndon or maybe there's a built in called\n\n326\n00:16:16.085 --> 00:16:20.115\nDon, let me go and find this thing and the\nsystem looks a number of different places.\n\n327\n00:16:20.115 --> 00:16:22.310\nSo let's run through all\nthe different places that it looks.\n\n328\n00:16:22.310 --> 00:16:24.542\nThe first place it looks for\nis an alias, so\n\n329\n00:16:24.542 --> 00:16:27.839\nan alias is where I've created\nsome kind of shortcut command.\n\n330\n00:16:27.839 --> 00:16:31.220\nAnd you can make an alias that's named\nanything we'll cover that later, but\n\n331\n00:16:31.220 --> 00:16:33.190\nif you just run the alias command.\n\n332\n00:16:33.190 --> 00:16:36.660\nYou'll see a list of things\nthat have been aliased, right?\n\n333\n00:16:36.660 --> 00:16:40.793\nSo for example, I've got LS,\naliased right there, and\n\n334\n00:16:40.793 --> 00:16:43.471\nyou'll see LL and LA are also alias.\n\n335\n00:16:43.471 --> 00:16:47.593\nYou've got a couple of different things\nthat are aliased even the letter L\n\n336\n00:16:47.593 --> 00:16:50.530\nis aliased just to a single command,\nright?\n\n337\n00:16:50.530 --> 00:16:58.110\nAnd if I run just L by itself, that's a\ndifferent output then if I run LS, right?\n\n338\n00:16:58.110 --> 00:17:02.695\nSee how L is actually showing the trailing\nslash on folders versus LS isn't and\n\n339\n00:17:02.695 --> 00:17:07.290\nthat's because the alias is\ndifferent on these right?\n\n340\n00:17:07.290 --> 00:17:10.312\nIf I do LA, it's defaulting to the all.\n\n341\n00:17:10.312 --> 00:17:14.400\nInstead of typing LS-A,\nI can just type LA and there it is.\n\n342\n00:17:14.400 --> 00:17:15.780\nThese are aliases that we create.\n\n343\n00:17:15.780 --> 00:17:16.790\nThe alias isn't a command.\n\n344\n00:17:16.790 --> 00:17:18.850\nIt's a shortcut to another command.\n\n345\n00:17:18.850 --> 00:17:20.720\nSo that's the first\nplace the system looks.\n\n346\n00:17:20.720 --> 00:17:23.800\nWhenever you type something,\nit looks for an alias.\n\n347\n00:17:23.800 --> 00:17:26.928\nIf it doesn't find an alias,\nthen it moves to the next step and\n\n348\n00:17:26.928 --> 00:17:29.531\nthe next step is to look for\nshelled reserve words.\n\n349\n00:17:29.531 --> 00:17:32.990\nReserved words are special\nwords that are not commands,\n\n350\n00:17:32.990 --> 00:17:37.978\nbut are something used by the shell and\nthe shell provides a particular function.\n\n351\n00:17:37.978 --> 00:17:40.399\nSo typically,\nlike if you're in the C shell,\n\n352\n00:17:40.399 --> 00:17:44.137\nyou can do the C programming language,\nand so you might type a bracket.\n\n353\n00:17:44.137 --> 00:17:48.038\nAnd I'm not saying find a program called\nbracket, I'm saying I'm about to open up\n\n354\n00:17:48.038 --> 00:17:50.670\na function, and so\nit interprets that, it knows that.\n\n355\n00:17:50.670 --> 00:17:53.330\nSo it looks for those shell commands.\n\n356\n00:17:53.330 --> 00:17:55.420\nThen it looks for actual functions.\n\n357\n00:17:55.420 --> 00:17:58.580\nSo if we have a function on our system,\nif you are running a script,\n\n358\n00:17:58.580 --> 00:18:01.060\nyou might have functions inside of it and\nso it'll look for those.\n\n359\n00:18:01.060 --> 00:18:03.230\nFunctions are like temporary programs,\nthey are stored in RAM.\n\n360\n00:18:03.230 --> 00:18:04.990\nYou know you load it in\nthe RAM it does it's thing and\n\n361\n00:18:04.990 --> 00:18:07.990\nthen it disappears it's not like\nresident on the hard drive.\n\n362\n00:18:08.990 --> 00:18:11.062\nThen It looks for the built-ins.\n\n363\n00:18:11.062 --> 00:18:13.564\nThe built-ins are those ones\nthat are part of the shell.\n\n364\n00:18:13.564 --> 00:18:16.369\nThere are programs, that are part\nof the shell that provides it,\n\n365\n00:18:16.369 --> 00:18:19.543\nnot necessarily a binary located on\nyour hard drive, so looks for those.\n\n366\n00:18:19.543 --> 00:18:24.280\nA lot of commands, like the exit command,\nexit closes my shell.\n\n367\n00:18:24.280 --> 00:18:29.150\nWell, if I do a which exit,\nthat's not a command but\n\n368\n00:18:29.150 --> 00:18:32.450\nif I do a type exit I can see there\nit is it's a shell built in and\n\n369\n00:18:32.450 --> 00:18:35.030\nif I run the exit command\nthey close my terminal.\n\n370\n00:18:35.030 --> 00:18:40.360\nSo it does something but it wasn't\na binary so it found it and it ran that.\n\n371\n00:18:40.360 --> 00:18:44.920\nAnd then the very last thing that it does,\nthe very last one when\n\n372\n00:18:44.920 --> 00:18:49.310\nit can't find anything there, Is it looks\nfor actual binaries on the file system.\n\n373\n00:18:49.310 --> 00:18:53.600\nAnd your file system could have\nfiles all over the place so\n\n374\n00:18:53.600 --> 00:18:55.790\nit uses on what's called\nan environment variable.\n\n375\n00:18:55.790 --> 00:18:59.678\nAn environment variable is a little bit of\ndata you store in RAM that creates a list\n\n376\n00:18:59.678 --> 00:19:01.864\nof all the places you\nmight have put a binary.\n\n377\n00:19:01.864 --> 00:19:04.535\nAnd if you wanna see that,\nyou can type echo.\n\n378\n00:19:04.535 --> 00:19:08.017\nWhich is a command that\nsays show me something.\n\n379\n00:19:08.017 --> 00:19:11.186\nAnd then $Path.\n\n380\n00:19:11.186 --> 00:19:14.960\n$Path is the variable where your\npath is stored, your execution path.\n\n381\n00:19:14.960 --> 00:19:16.130\nAnd I'm saying echo it.\n\n382\n00:19:16.130 --> 00:19:17.350\nShow it to me.\n\n383\n00:19:17.350 --> 00:19:20.140\nAnd when I run that, here's my path.\n\n384\n00:19:20.140 --> 00:19:25.790\nSo when I run a command,\nit's going to look in /user/local/sBin.\n\n385\n00:19:25.790 --> 00:19:30.125\nAnd if it is not there it's gonna\nlook in to /users/local/bin and\n\n386\n00:19:30.125 --> 00:19:32.112\nthen /users/sbin and so on.\n\n387\n00:19:32.112 --> 00:19:33.771\nIt is looking in all\nthese different places.\n\n388\n00:19:33.771 --> 00:19:37.696\nNow you'll notice one commonality here\nthe bin word, right, bin is a binary.\n\n389\n00:19:37.696 --> 00:19:38.871\nSo it's looking for binaries.\n\n390\n00:19:38.871 --> 00:19:43.323\nThere's user binaries one's we\ninstalled and there's system binaries,\n\n391\n00:19:43.323 --> 00:19:47.690\none's that came with the system and\nthen there is local binaries.\n\n392\n00:19:47.690 --> 00:19:49.570\nAnd shared binaries.\n\n393\n00:19:49.570 --> 00:19:54.650\nSo system binaries are in /bin and /sbin.\n\n394\n00:19:54.650 --> 00:19:58.433\nUser binaries are in /user/bin and\n/user/sbin.\n\n395\n00:19:58.433 --> 00:20:01.100\nThose are ones we've typically installed.\n\n396\n00:20:01.100 --> 00:20:03.620\nAnd then bin vs sbin, right?\n\n397\n00:20:03.620 --> 00:20:06.320\nBin is a local binary,\nit's here on this system.\n\n398\n00:20:06.320 --> 00:20:09.160\nIt's not necessarily something that's\ngonna be available on other systems.\n\n399\n00:20:09.160 --> 00:20:13.290\nAnd then sbin is a shared binary, one that\nneeds to be accessed from remote as well\n\n400\n00:20:13.290 --> 00:20:16.120\nas local, and\nmaybe present on other systems too.\n\n401\n00:20:16.120 --> 00:20:17.640\nMost of us never care about any of that,\nright?\n\n402\n00:20:17.640 --> 00:20:20.490\nAs long as it's in one of those four\nplaces, it's gonna find it, but\n\n403\n00:20:20.490 --> 00:20:21.560\nyou can put binaries anywhere.\n\n404\n00:20:21.560 --> 00:20:24.050\nYou could actually create a binary\nin your own home folder, right?\n\n405\n00:20:24.050 --> 00:20:28.930\nSo I might have /home/dpezet/bin and\nput binaries there.\n\n406\n00:20:28.930 --> 00:20:32.010\nBut if it's not in the path,\nmy system won't know to look there,\n\n407\n00:20:32.010 --> 00:20:37.360\nso if I look at the path here\n-home-depossess-bin is not in this list,\n\n408\n00:20:37.360 --> 00:20:39.620\nso when I run a command\nit's never gonna find it.\n\n409\n00:20:39.620 --> 00:20:44.082\nSo I would need to add that to the path so\nit would know to look there or\n\n410\n00:20:44.082 --> 00:20:50.092\nevery time I run a command I would have to\nsay I wanna run -home-dpezet-bin- program.\n\n411\n00:20:50.092 --> 00:20:53.444\nI'd have to type the whole path\nevery time, which is super annoying.\n\n412\n00:20:53.444 --> 00:20:55.489\nSo when I run a command like date,\n\n413\n00:20:55.489 --> 00:20:59.668\nwhat it's doing in the background\nis it's saying, where is that?\n\n414\n00:20:59.668 --> 00:21:02.480\nAnd it's looking in all those\npath locations to find it.\n\n415\n00:21:02.480 --> 00:21:04.968\nWhen I run the which command,\nthat's all it's doing.\n\n416\n00:21:04.968 --> 00:21:08.073\nIt looks at the path, it goes to each\nof those locations, says, there it is,\n\n417\n00:21:08.073 --> 00:21:08.975\n/bin/date, right?\n\n418\n00:21:08.975 --> 00:21:13.574\nSo that's all happening automatically\nbehind the scenes when we run a command.\n\n419\n00:21:13.574 --> 00:21:16.854\n&gt;&gt; I think you already\nanswered my question here,\n\n420\n00:21:16.854 --> 00:21:19.150\nbut then can we modify that path?\n\n421\n00:21:19.150 --> 00:21:21.286\nIf I wanna make a folder,\nput some things in there, and\n\n422\n00:21:21.286 --> 00:21:23.523\nI want it to search that folder\nevery time I run a command.\n\n423\n00:21:23.523 --> 00:21:24.684\n&gt;&gt; Yeah, you can.\n\n424\n00:21:24.684 --> 00:21:26.507\nWe can modify the variables.\n\n425\n00:21:26.507 --> 00:21:28.086\nI want to talk about variables.\n\n426\n00:21:28.086 --> 00:21:32.391\nI'll probably save it for a little bit\nlater because when you create a variable,\n\n427\n00:21:32.391 --> 00:21:35.760\nvariables are temporary, so\nyou log out and it's gone again.\n\n428\n00:21:35.760 --> 00:21:37.050\nSo we need to make it permanent and\n\n429\n00:21:37.050 --> 00:21:38.690\nyou make it permanent by\nmodifying your profile.\n\n430\n00:21:38.690 --> 00:21:41.780\nAnd I wanna spend time on that cuz we can\ncustomize the prompt on our screen and\n\n431\n00:21:41.780 --> 00:21:44.990\nwe can have variables that load and\nchange every time we log in and\n\n432\n00:21:44.990 --> 00:21:46.660\nthat's really how you wanna go about that.\n\n433\n00:21:46.660 --> 00:21:48.080\nBut you can change any variable.\n\n434\n00:21:48.080 --> 00:21:51.587\nThere's a set command you use that\nlets you modify any variable and\n\n435\n00:21:51.587 --> 00:21:52.910\nwe can change that path.\n\n436\n00:21:52.910 --> 00:21:59.192\nIf you wanted to do it temporarily\nyou could come in and say set $Path=.\n\n437\n00:21:59.192 --> 00:22:01.153\nAnd then specify the new path right,\n\n438\n00:22:01.153 --> 00:22:05.265\nwhich normally you'd say let me bring\nin the existing path because you don't\n\n439\n00:22:05.265 --> 00:22:09.707\nwanna start over, and then you could add\nsomething like, /home / dpezet /bin.\n\n440\n00:22:09.707 --> 00:22:14.986\nAnd it's gonna tack that on, and now\nwhen I echo that path and I look at it,\n\n441\n00:22:14.986 --> 00:22:19.753\nit'll have that added on, and\nshoot, actually did I not,\n\n442\n00:22:19.753 --> 00:22:23.860\nI set it temporarily is what I did, so,\n&gt;&gt; We can do that.\n\n443\n00:22:23.860 --> 00:22:24.839\n&gt;&gt; We'll set it permanently, and\n\n444\n00:22:24.839 --> 00:22:27.130\nwe'll see a little bit later where\nwe'll actually make it where it stays.\n\n445\n00:22:27.130 --> 00:22:30.300\nWhen you use the set command like I'm\ndoing, basically it's going to set that\n\n446\n00:22:30.300 --> 00:22:33.960\npath and then it's just going to go\naway at the moment you log out, and so\n\n447\n00:22:33.960 --> 00:22:37.600\nwhen I'm echoing it, it's actually\npulling from what's saved on this system.\n\n448\n00:22:37.600 --> 00:22:39.990\nBut we can do that,\nwe can modify tons of different variables.\n\n449\n00:22:39.990 --> 00:22:44.380\nIf you just run the set command by itself\nyou'll see tons of stuff in here that's\n\n450\n00:22:44.380 --> 00:22:48.860\nall session variables and\nthings for your particular login.\n\n451\n00:22:48.860 --> 00:22:53.838\nAnd each one of these is modifying\nthe way that your system is behaving and\n\n452\n00:22:53.838 --> 00:22:54.740\nexecuting.\n\n453\n00:22:54.740 --> 00:22:59.630\nSo let me just like look for path and\n\n454\n00:22:59.630 --> 00:23:04.300\nwe'll find it right here where that's\ndefined and laid out for the systems.\n\n455\n00:23:04.300 --> 00:23:08.020\nThat's where that's coming from and then\nwe can go in and modify that as needed.\n\n456\n00:23:08.020 --> 00:23:09.945\nYou know, speaking of these variables,\n\n457\n00:23:09.945 --> 00:23:13.795\nthere is actually one thing that's going\non that's really cool which is every time\n\n458\n00:23:13.795 --> 00:23:17.373\nI execute a command It's being stored\nin memory in what's called a history.\n\n459\n00:23:17.373 --> 00:23:19.155\nSo you have a command history and\n\n460\n00:23:19.155 --> 00:23:22.191\nyou can easily retrieve\ncommands that you've typed.\n\n461\n00:23:22.191 --> 00:23:27.295\nSo if you have a mistake,\nif you type something wrong or whatever\n\n462\n00:23:27.295 --> 00:23:33.452\nyou can go back and change it or fix it\nand that kinda stuff is fairly easy to do.\n\n463\n00:23:33.452 --> 00:23:38.520\nWhen I type a command,\nI make mistakes a lot.\n\n464\n00:23:38.520 --> 00:23:39.585\nSo I need to go back and I can fix it.\n\n465\n00:23:39.585 --> 00:23:42.142\nYou can hit the up arrow\non your keyboard and\n\n466\n00:23:42.142 --> 00:23:45.565\nyou can scroll back through\nthe commands that you typed.\n\n467\n00:23:45.565 --> 00:23:49.114\nSo if I thought I made a mistake here,\nI could come back to this one And\n\n468\n00:23:49.114 --> 00:23:52.975\nthen I can use the left and right arrows\nto move back and forth, and go in and\n\n469\n00:23:52.975 --> 00:23:55.690\nfix my typo, or mistake,\nor whatever it was.\n\n470\n00:23:55.690 --> 00:23:59.180\nSo you can come in and you can fix and\nretrieve and change those commands.\n\n471\n00:23:59.180 --> 00:24:01.820\nThis is being powered by the history,\nand the up and\n\n472\n00:24:01.820 --> 00:24:04.000\ndown arrows are the easiest way to use it.\n\n473\n00:24:04.000 --> 00:24:06.210\nIf you're using a terminal\nthat doesn't support arrows,\n\n474\n00:24:06.210 --> 00:24:11.980\nyou can use keyboard shortcuts, Ctrl + P,\nfor previous, and Ctrl + N for next.\n\n475\n00:24:11.980 --> 00:24:15.900\nSo previous and next lets you move back\nand forth without using the arrow keys.\n\n476\n00:24:15.900 --> 00:24:18.103\nSo an easy way to navigate through those.\n\n477\n00:24:18.103 --> 00:24:21.660\nBut you can also use the history command.\n\n478\n00:24:21.660 --> 00:24:22.827\nAnd when you run that,\n\n479\n00:24:22.827 --> 00:24:26.099\nthat gives you the output of all\nthe commands that you've run.\n\n480\n00:24:26.099 --> 00:24:28.477\nAnd so you'll see from\nthe beginning of this show,\n\n481\n00:24:28.477 --> 00:24:30.870\nI cleared my terminal at\nthe beginning of the show.\n\n482\n00:24:30.870 --> 00:24:33.940\nAnd then after that, I started by saying,\nyou can't type a question mark.\n\n483\n00:24:33.940 --> 00:24:34.990\nHere's date, here's password,\n\n484\n00:24:34.990 --> 00:24:37.380\nhere's everything I've typed\nsince the beginning of the show.\n\n485\n00:24:37.380 --> 00:24:39.798\nAnd if I hit my up arrow,\nthat's what I'm scrolling through them.\n\n486\n00:24:39.798 --> 00:24:42.770\nI'm scrolling through that list,\nand I've got 53 commands in there.\n\n487\n00:24:42.770 --> 00:24:44.700\nI believe the default is 1,000 commands.\n\n488\n00:24:44.700 --> 00:24:46.860\nIt saves your last 1,000 commands.\n\n489\n00:24:46.860 --> 00:24:48.117\nSo it goes back quite a bit.\n\n490\n00:24:48.117 --> 00:24:49.029\nAnd when you log out,\n\n491\n00:24:49.029 --> 00:24:51.990\nthis isn't stored in RAM it actually\ngets stored on your hard drive.\n\n492\n00:24:51.990 --> 00:24:56.374\nSo there will be a file in your home\nfolder called, it's a hidden file, so\n\n493\n00:24:56.374 --> 00:24:58.090\nit's like .-_history.\n\n494\n00:24:58.090 --> 00:24:59.490\nAnd all of these commands\nwill be written to that file.\n\n495\n00:24:59.490 --> 00:25:02.610\nSo the next time you log in,\nthe history is still there and\n\n496\n00:25:02.610 --> 00:25:06.057\nyou can retrieve these commands and\nscroll back through them.\n\n497\n00:25:06.057 --> 00:25:09.148\nNow scrolling back through\nthem isn't the most convenient\n\n498\n00:25:09.148 --> 00:25:12.610\nthing if I have got 1,000\ncommands in there, right?\n\n499\n00:25:12.610 --> 00:25:14.830\nSo you can search through it.\n\n500\n00:25:15.870 --> 00:25:22.950\nWhen I take a look at this, for example,\nlet's say I want to find where ksh is.\n\n501\n00:25:22.950 --> 00:25:25.600\nThat was command 37 for me, right?\n\n502\n00:25:25.600 --> 00:25:30.760\nSo when I run the history command,\nI can come in here and say, history 37.\n\n503\n00:25:30.760 --> 00:25:33.190\nAnd it'll come back and\n\n504\n00:25:33.190 --> 00:25:37.722\nit'll show me that, actually\nthat's not right, we get shortcut.\n\n505\n00:25:37.722 --> 00:25:40.657\nSo there's a shortcut for this,\nit was the exclamation point, right?\n\n506\n00:25:40.657 --> 00:25:47.638\nIf I do the !37, I'm telling it run\nthe history command that's numbered 37.\n\n507\n00:25:47.638 --> 00:25:50.790\nAnd when I run that,\nsee how it ran which ksh?\n\n508\n00:25:50.790 --> 00:25:54.200\nAnd there it is, so\nI can rerun these things pretty easy.\n\n509\n00:25:54.200 --> 00:26:00.877\nIf I wanna run type exit, that was command\n44, so I can do !44 and there it is.\n\n510\n00:26:00.877 --> 00:26:04.447\nSo pretty easy to retrieve\nprevious commands and run them and\n\n511\n00:26:04.447 --> 00:26:08.802\nnot have to to have had them memorized or\nwhatever by doing them like that.\n\n512\n00:26:08.802 --> 00:26:13.855\nNow if I don't know the number and I'm in\na hurry, I don't wanna run history and\n\n513\n00:26:13.855 --> 00:26:18.330\ngo through and find the thing,\nright, and then kind of rerun it.\n\n514\n00:26:18.330 --> 00:26:22.180\nSo I might know, hey,\nI ran the type exit command.\n\n515\n00:26:22.180 --> 00:26:25.525\nSo what you can do is you can say, !type.\n\n516\n00:26:26.700 --> 00:26:30.820\nAnd it'll look for the most recent command\nthat started with the word type and\n\n517\n00:26:30.820 --> 00:26:32.060\nit'll rerun that one.\n\n518\n00:26:32.060 --> 00:26:35.340\nSo I know it started with type, so just\ngo in and find that one and rerun it, or\n\n519\n00:26:35.340 --> 00:26:36.680\nthe last time I ran set.\n\n520\n00:26:36.680 --> 00:26:40.130\nSo I wanna go in and find the last time\nthat I ran something that started with set\n\n521\n00:26:40.130 --> 00:26:41.420\nand it'll find command 49.\n\n522\n00:26:41.420 --> 00:26:44.450\nThat was the last command that I ran\nthat started with set, no, it's not?\n\n523\n00:26:44.450 --> 00:26:46.090\nI guess this one right here,\nis what it'll run.\n\n524\n00:26:46.090 --> 00:26:48.330\nSo it'll find command 52 and\nit'll run that.\n\n525\n00:26:48.330 --> 00:26:52.650\nThat was the most recent one that I ran,\nand there it is doing set and\n\n526\n00:26:52.650 --> 00:26:54.090\npiping it into grep.\n\n527\n00:26:54.090 --> 00:26:58.076\nBut that's not the one that I wanted,\nI wanted the one that set path, right?\n\n528\n00:26:58.076 --> 00:27:03.540\nAnd that's not what it did, so\nI would have to add a little more to that.\n\n529\n00:27:03.540 --> 00:27:09.390\nI would have to say, !set, and continue\non to say that I was setting path so\n\n530\n00:27:09.390 --> 00:27:11.730\nit has enough to find the right command.\n\n531\n00:27:11.730 --> 00:27:14.500\nYou just have to give it enough to make\nit unique and then it'll find it and\n\n532\n00:27:14.500 --> 00:27:15.710\nit'll rerun that.\n\n533\n00:27:15.710 --> 00:27:20.340\nIf you're trying to find something that's\nmore in the middle of the command,\n\n534\n00:27:20.340 --> 00:27:21.730\nyou can use question marks for that.\n\n535\n00:27:21.730 --> 00:27:24.890\nSo if you do a question mark,\nyou can look for\n\n536\n00:27:24.890 --> 00:27:26.320\nsomething in the middle of the command.\n\n537\n00:27:26.320 --> 00:27:34.140\nSo, for example, if I wanted to\npull up where I ran type exit,\n\n538\n00:27:34.140 --> 00:27:37.890\nand I couldn't remember the command that\nI used, but I knew I did exit, right?\n\n539\n00:27:37.890 --> 00:27:42.535\nSo I could say, !?exit?.\n\n540\n00:27:42.535 --> 00:27:45.860\nAnd that would say look for a command that\nhas exit somewhere in the middle, right?\n\n541\n00:27:45.860 --> 00:27:48.531\nNot at the beginning, but somewhere\nin the middle or even in the end and\n\n542\n00:27:48.531 --> 00:27:49.172\nit will find it.\n\n543\n00:27:49.172 --> 00:27:52.690\nAnd when I run that, there it goes,\ntype exit and it runs it.\n\n544\n00:27:52.690 --> 00:27:55.240\nSo we can quickly retrieve these commands.\n\n545\n00:27:55.240 --> 00:27:58.590\nOne that I forget is I might do ls-la.\n\n546\n00:27:58.590 --> 00:28:03.780\nAnd I run it, then I'm like, shoot,\nI wanted to add h to that ls-lah so\n\n547\n00:28:03.780 --> 00:28:05.860\nthat the sizes are human readable.\n\n548\n00:28:05.860 --> 00:28:10.128\nOkay, well, you can do !!, that says,\n\n549\n00:28:10.128 --> 00:28:14.470\nrun the same command I just ran,\nif I wanna run it the second time.\n\n550\n00:28:14.470 --> 00:28:18.100\nSo I can run that, well,\nthat runs the same thing.\n\n551\n00:28:18.100 --> 00:28:20.180\nBut if I stick an h on the end of it,\n\n552\n00:28:20.180 --> 00:28:25.630\nI do !!h, it says, run the command that\nI just ran and stick an h on the end.\n\n553\n00:28:25.630 --> 00:28:28.355\nOr stick whatever it is\nthat you want on the end.\n\n554\n00:28:28.355 --> 00:28:31.240\nAnd by doing that, now, it modifies it.\n\n555\n00:28:31.240 --> 00:28:32.694\nAnd if I hit the up arrow,\n\n556\n00:28:32.694 --> 00:28:37.477\nsee how it doesn't show that I ran !!,\nit shows that I ran\n\n557\n00:28:37.477 --> 00:28:42.006\nls-la with that little add-on h there at\nthe end because that is how I ran it.\n\n558\n00:28:42.006 --> 00:28:47.495\nSo if you forget something,\nif I do ls./documents, like that,\n\n559\n00:28:47.495 --> 00:28:53.277\nand I am looking in my documents folder\nand I see the ARC Welder folder,\n\n560\n00:28:53.277 --> 00:28:59.170\nI could come in and actually just\nsay I wanna run that same command.\n\n561\n00:28:59.170 --> 00:29:03.220\nAnd I wanna add ARC welder to the end of\nit, which ARC Welder's gonna have a space,\n\n562\n00:29:03.220 --> 00:29:04.826\nthis is probably a bad example.\n\n563\n00:29:04.826 --> 00:29:09.100\nBut I have to add a \\ because of\nthe space that it marks it out.\n\n564\n00:29:09.100 --> 00:29:12.530\nAnd now it's looking\ninside of that folder.\n\n565\n00:29:12.530 --> 00:29:17.300\nAnd in my history,\nI see it laid out as the full path there.\n\n566\n00:29:17.300 --> 00:29:19.725\nSo that's another one to\npay attention to though.\n\n567\n00:29:19.725 --> 00:29:23.190\nUnix and\nLinux really don't like spaces in names.\n\n568\n00:29:23.190 --> 00:29:27.100\nSo if there is ever a space, you have to\ndo what's called escaping the character.\n\n569\n00:29:27.100 --> 00:29:30.854\nIf I didn't put that slash, it would\nassume that I was talking about two\n\n570\n00:29:30.854 --> 00:29:35.300\ndifferent things, a folder called ARC and\nanother folder called Welder.\n\n571\n00:29:35.300 --> 00:29:38.146\nBut by putting that slash in there,\nthat tells it,\n\n572\n00:29:38.146 --> 00:29:40.145\nthis space is part of the filename.\n\n573\n00:29:40.145 --> 00:29:41.590\nSo that escapes the character.\n\n574\n00:29:41.590 --> 00:29:44.620\nThat's another thing you'll run into\nespecially when you're getting files from\n\n575\n00:29:44.620 --> 00:29:45.750\npeople in Windows and\n\n576\n00:29:45.750 --> 00:29:48.740\nstuff with spaces all over the place,\nthen you gotta escape things.\n\n577\n00:29:48.740 --> 00:29:50.900\nMost Unix systems are really good, or\n\n578\n00:29:50.900 --> 00:29:54.200\nmost developers,\nabout using underscores instead.\n\n579\n00:29:54.200 --> 00:29:57.300\nThat saves you from that trouble but\nin this case I had a space.\n\n580\n00:29:59.130 --> 00:30:01.690\nNow let's say you wanna really go crazy.\n\n581\n00:30:01.690 --> 00:30:06.512\nI had a long command, I ran it and\nmaybe it didn't work and I wanna edit it.\n\n582\n00:30:06.512 --> 00:30:10.150\nI wanna change it or\nmaybe even a range of commands, right?\n\n583\n00:30:10.150 --> 00:30:12.231\nYou can use another command called fc.\n\n584\n00:30:12.231 --> 00:30:17.670\nAnd what fc let's you do, is edit\nthe commands in a full screen editor.\n\n585\n00:30:17.670 --> 00:30:22.700\nSo, for example, my set command that I\nran earlier was the wrong command, right?\n\n586\n00:30:22.700 --> 00:30:27.430\nSo when I look at it, maybe I had\na typo in it, and I just wanna go and\n\n587\n00:30:27.430 --> 00:30:29.610\nfix the typo, but\nthe typo's in the middle.\n\n588\n00:30:29.610 --> 00:30:34.715\nSo it's not like I can do !!, or\nI think you call those bangs, right?\n\n589\n00:30:34.715 --> 00:30:36.870\n&gt;&gt; Mm-hm.\n&gt;&gt; Bang, bang, followed by whatever.\n\n590\n00:30:36.870 --> 00:30:39.810\nI can't do that, but I could do fc,\n\n591\n00:30:41.290 --> 00:30:44.890\nfollowed by the history\nnumber of that command.\n\n592\n00:30:44.890 --> 00:30:51.280\nSo I want to do fc 49, and\nit's gonna bring up a full screen editor.\n\n593\n00:30:51.280 --> 00:30:54.290\nAnd I can go in and\nedit this however I want.\n\n594\n00:30:54.290 --> 00:30:56.960\nAnd so maybe I spelled the word\npath wrong, so I could come in and\n\n595\n00:30:56.960 --> 00:31:01.820\nI could fix the word path and\nget that correct, okay?\n\n596\n00:31:01.820 --> 00:31:04.640\nAnd once it's done,\nI know why that command didn't work.\n\n597\n00:31:04.640 --> 00:31:06.330\nI didn't actually create the bin folder.\n\n598\n00:31:06.330 --> 00:31:07.940\nSo you can't add a folder\nthat doesn't exist..\n\n599\n00:31:07.940 --> 00:31:08.990\nSo I need to add that.\n\n600\n00:31:08.990 --> 00:31:13.953\nWell, funny thing, though,\nis I could actually come in here and say,\n\n601\n00:31:13.953 --> 00:31:18.306\nyou know what,\nlet me make /home/depossess/bin folder.\n\n602\n00:31:18.306 --> 00:31:20.544\nI'll go ahead and make that folder and\nthen execute it, so\n\n603\n00:31:20.544 --> 00:31:21.449\nnow it's gonna do both.\n\n604\n00:31:21.449 --> 00:31:25.738\nAnd when I hit Ctrl + X, it's gonna\nask me to save, I'll save it and\n\n605\n00:31:25.738 --> 00:31:28.320\nthen it runs those two commands.\n\n606\n00:31:28.320 --> 00:31:29.670\nSo it just ran them and\n\n607\n00:31:29.670 --> 00:31:34.920\nif I look in my home directory, I now\nhave a bin folder, there it is, right?\n\n608\n00:31:34.920 --> 00:31:38.160\nAnd let's see if my path actually\nupdated this time or not.\n\n609\n00:31:38.160 --> 00:31:39.874\nAnd it is still not there.\n\n610\n00:31:39.874 --> 00:31:43.590\nAll right, we'll sort that out later,\nbut now it ran that.\n\n611\n00:31:43.590 --> 00:31:47.317\nThe fc command's really powerful\nbecause I could actually come in and\n\n612\n00:31:47.317 --> 00:31:49.220\nmaybe I ran three or four commands.\n\n613\n00:31:49.220 --> 00:31:52.888\nAnd so\nmaybe I wanna get commands 63 through 66.\n\n614\n00:31:52.888 --> 00:31:59.500\nSo I can say fc 63, 66, and it's gonna\nopen up and there's all those commands.\n\n615\n00:31:59.500 --> 00:32:02.470\nAnd I can edit them however I need.\n\n616\n00:32:02.470 --> 00:32:06.030\nAnd when I exit and\nchoose save, it'll run them.\n\n617\n00:32:06.030 --> 00:32:07.970\nIf I exit and choose discard,\nit doesn't run them.\n\n618\n00:32:07.970 --> 00:32:09.200\nSo I can just give up.\n\n619\n00:32:09.200 --> 00:32:12.060\nBut if I wanted to run them,\nI can just hit Ctrl + X,\n\n620\n00:32:12.060 --> 00:32:13.490\nit'll save and then they'll run.\n\n621\n00:32:13.490 --> 00:32:15.100\nAnd you can add more and change it and so\n\n622\n00:32:15.100 --> 00:32:18.290\nthat's another really powerful\nway to re-execute commands.\n\n623\n00:32:18.290 --> 00:32:19.790\nIn the early days when\nyou're just learning,\n\n624\n00:32:19.790 --> 00:32:21.520\nyou're gonna make a lot of mistakes.\n\n625\n00:32:21.520 --> 00:32:26.190\nAnd so it's important that you have a way\nto retrieve that history, to look for\n\n626\n00:32:26.190 --> 00:32:27.390\ntypos, to correct them.\n\n627\n00:32:27.390 --> 00:32:33.030\nSo remember, the !!, because that\npulls your previous command back.\n\n628\n00:32:33.030 --> 00:32:36.180\nAnd remember fc, that lets you go in and\n\n629\n00:32:36.180 --> 00:32:40.060\nretrieve this, and\nexecute those commands, and pull them up.\n\n630\n00:32:40.060 --> 00:32:43.440\nIf you just run fc by itself,\nit just pulls your last command.\n\n631\n00:32:43.440 --> 00:32:46.877\nSo another kind of easy way to\nget in there and do that so\n\n632\n00:32:46.877 --> 00:32:51.350\nthat you can kind of just really quick\npull that up, edit it, and go on.\n\n633\n00:32:52.770 --> 00:32:56.580\n!!, runs your last command,\nfc edits it and then runs it.\n\n634\n00:32:56.580 --> 00:32:58.794\nSo that's a way that we\ncan modify while running.\n\n635\n00:32:58.794 --> 00:33:00.940\n&gt;&gt; All right, Don,\nlots of great stuff there.\n\n636\n00:33:00.940 --> 00:33:04.395\nWell, on our way to becoming\na power user in Linux.\n\n637\n00:33:04.395 --> 00:33:05.760\n&gt;&gt; [LAUGH]\n&gt;&gt; So we thank you for that.\n\n638\n00:33:05.760 --> 00:33:08.350\nWe hope everybody out there\nenjoyed watching this one.\n\n639\n00:33:08.350 --> 00:33:11.580\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n640\n00:33:11.580 --> 00:33:12.450\n&gt;&gt; And I'm Don Pezet.\n\n641\n00:33:12.450 --> 00:33:14.617\n&gt;&gt; And we'll see you next time.\n\n642\n00:33:14.617 --> 00:33:20.600\n[MUSIC]\n\n643\n00:33:20.600 --> 00:33:21.970\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "221901761"
        },
        {
          "description": "In this episode, Don and Mike continue to look at executing commands. They demonstrate using the tab autocomplete feature, piping commands, sequential commands, and expanding commands. They finish by demonstrating creating and using shell variables.",
          "length": "1830",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-2-executing_commands_pt2-061517-PGM.00_30_14_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-2-executing_commands_pt2-061517-PGM.00_30_14_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-2-executing_commands_pt2-061517-PGM.00_30_14_29.Still001-sm.jpg",
          "title": "Executing Commands Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.300\nWelcome to ITPRO.TV.\n\n2\n00:00:01.300 --> 00:00:03.585\nI'm your host, Don Pezet.\n\n3\n00:00:03.585 --> 00:00:06.120\n[CROSSTALK]\n\n4\n00:00:06.120 --> 00:00:08.293\n[MUSIC]\n\n5\n00:00:08.293 --> 00:00:12.580\n&gt;&gt; You're watching ITPRO.TV.\n\n6\n00:00:12.580 --> 00:00:15.140\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n7\n00:00:15.140 --> 00:00:20.190\nI'm your host, Mike Rodrick, and today\nwe're doing our Become a Linux Power User.\n\n8\n00:00:20.190 --> 00:00:21.380\nSpecifically, in this episode,\n\n9\n00:00:21.380 --> 00:00:24.500\nwe are actually doing a part\ntwo on executing commands.\n\n10\n00:00:24.500 --> 00:00:27.720\nPart one we took a look at\nexecuting some simple commands.\n\n11\n00:00:27.720 --> 00:00:30.720\nWe also took a look at how to look\nback at the commands we've executed,\n\n12\n00:00:30.720 --> 00:00:33.770\npull up our history and\neven re-run some of those commands.\n\n13\n00:00:33.770 --> 00:00:35.090\nToday we're gonna take\nit a step further and\n\n14\n00:00:35.090 --> 00:00:38.090\nget a little more advanced\nwith our command execution.\n\n15\n00:00:38.090 --> 00:00:40.380\nAnd here to show us the way Is Mr.\nDon Pezet.\n\n16\n00:00:40.380 --> 00:00:42.570\nWelcome, Don.\n&gt;&gt; Hey, thanks for having me back, Mike.\n\n17\n00:00:42.570 --> 00:00:45.170\nAnd, you know, like you said,\nwe're going to be continuing what we did.\n\n18\n00:00:45.170 --> 00:00:46.810\nWe saw some basic commands, right?\n\n19\n00:00:46.810 --> 00:00:48.170\nWe saw some kinda neat things.\n\n20\n00:00:48.170 --> 00:00:49.850\nWe started to get our feet wet.\n\n21\n00:00:49.850 --> 00:00:52.150\nSo here in this episode we're\njust gonna continue on with that.\n\n22\n00:00:52.150 --> 00:00:54.550\nWe're going to take a look at some other\nthings we can do from the command line.\n\n23\n00:00:54.550 --> 00:00:58.010\nAnd I want to show you guys some\nadvanced commands where we actually\n\n24\n00:00:58.010 --> 00:01:01.110\ncan execute more than one command,\neither simultaneously,\n\n25\n00:01:01.110 --> 00:01:05.720\nor as one serving as input to another and\nthey all start to build off each other.\n\n26\n00:01:05.720 --> 00:01:09.620\nIt gets kind of complex fast, but you'll\nsee how incredibly useful this can be as\n\n27\n00:01:09.620 --> 00:01:11.730\nwe go through and\ntake a look at some of the examples.\n\n28\n00:01:11.730 --> 00:01:14.070\nThat's what we've got lined up,\nright here in this episode.\n\n29\n00:01:14.070 --> 00:01:15.140\n&gt;&gt; Fantastic, all right.\n\n30\n00:01:15.140 --> 00:01:17.110\nWell, what's first on our list, Don?\n\n31\n00:01:17.110 --> 00:01:19.600\n&gt;&gt; The first thing I want to talk about\nis something I should have mentioned in\n\n32\n00:01:19.600 --> 00:01:23.390\nthe last episode and didn't,\nwhich is Tab auto complete.\n\n33\n00:01:23.390 --> 00:01:26.180\nRemembering commands is hard, right?\n\n34\n00:01:26.180 --> 00:01:30.861\nIt's a difficult thing for somebody,\nwell, at least somebody my age, I guess.\n\n35\n00:01:30.861 --> 00:01:31.994\n&gt;&gt; [LAUGH]\n&gt;&gt; But for most of us,\n\n36\n00:01:31.994 --> 00:01:34.150\nwe have a hard time remembering commands.\n\n37\n00:01:34.150 --> 00:01:38.752\nFortunately in most Linux distributions,\nwe don't have to remember the commands\n\n38\n00:01:38.752 --> 00:01:42.182\ncompletely, we can use something\ncalled Tab auto complete.\n\n39\n00:01:42.182 --> 00:01:45.133\nIf you can type the first couple\nof characters in a command name,\n\n40\n00:01:45.133 --> 00:01:47.720\nyou can hit Tab and\nit'll finish it off for you, right?\n\n41\n00:01:47.720 --> 00:01:52.550\nSo for example let me show you,\nthe ifconfig command, right?\n\n42\n00:01:52.550 --> 00:01:54.400\nThat's the interface\nconfiguration command.\n\n43\n00:01:54.400 --> 00:01:56.060\nThat let's me configure network adapters.\n\n44\n00:01:56.060 --> 00:01:59.535\nIt's actually being replaced by a new\ncommand that's part of the IP address\n\n45\n00:01:59.535 --> 00:02:02.100\ncommand, but for\nright now ifconfig is pretty common.\n\n46\n00:02:02.100 --> 00:02:05.010\nIt's located on most Linux distros and\nif you run it,\n\n47\n00:02:05.010 --> 00:02:10.070\nyou see your network adapters and what\nthey're set up to do and all that, right?\n\n48\n00:02:10.070 --> 00:02:12.300\nWell, if I don't want to type all that.\n\n49\n00:02:12.300 --> 00:02:14.850\nMaybe because I can't remember or\nmaybe because I am a lazy typer,\n\n50\n00:02:14.850 --> 00:02:16.170\nwhich is usually my story.\n\n51\n00:02:16.170 --> 00:02:17.218\n&gt;&gt; That's me.\n\n52\n00:02:17.218 --> 00:02:20.460\n&gt;&gt; Yeah, [LAUGH] so I can type just\nthe first couple of characters like I-F-C,\n\n53\n00:02:20.460 --> 00:02:24.320\nand then when I hit Tab,\nsee how it finished that out.\n\n54\n00:02:24.320 --> 00:02:26.140\nI just hit Tab on my keyboard.\n\n55\n00:02:26.140 --> 00:02:29.590\nNow, interesting thing about this,\nit saves you a lot of time.\n\n56\n00:02:29.590 --> 00:02:30.828\nInstead of having to\ntype the whole command,\n\n57\n00:02:30.828 --> 00:02:33.126\nI just type the first couple of\ncharacters and hit Tab and there it is.\n\n58\n00:02:33.126 --> 00:02:36.929\nBut if I can't remember\nexactly the command,\n\n59\n00:02:36.929 --> 00:02:41.410\nit can also help us find commands, right?\n\n60\n00:02:41.410 --> 00:02:44.990\nI showed in the last episode\nthe which command and\n\n61\n00:02:44.990 --> 00:02:49.840\nhow if I say which ifconfig it\ntells me where it's located.\n\n62\n00:02:49.840 --> 00:02:54.190\nBut I have to know the name of\nthe command if I say which I-F-C-O,\n\n63\n00:02:54.190 --> 00:02:55.800\nit doesn't find anything, right?\n\n64\n00:02:55.800 --> 00:02:58.820\nSo I have to know the name\nof the command to do that.\n\n65\n00:02:58.820 --> 00:03:03.100\nBut with the Tab autocomplete, I just\nneed to know the first couple of letters.\n\n66\n00:03:03.100 --> 00:03:06.900\nBut it does get a little tricky because\nif I don't type enough characters, right?\n\n67\n00:03:06.900 --> 00:03:08.820\nSo I-F-C, that was fine.\n\n68\n00:03:08.820 --> 00:03:13.100\nIf I do I-F and hit Tab, I get a beep.\n\n69\n00:03:13.100 --> 00:03:17.040\nOkay, now two things happened and\nlet me explain what I just did.\n\n70\n00:03:17.040 --> 00:03:21.930\nFirst off, I typed I-F and\nhit Tab and my computer beeped at me.\n\n71\n00:03:21.930 --> 00:03:26.891\nAnd that lets me know that I didn't type\nenough characters to uniquely identify\n\n72\n00:03:26.891 --> 00:03:27.861\nthat command.\n\n73\n00:03:27.861 --> 00:03:30.980\nThat means there's more than one\ncommand that starts with I-F.\n\n74\n00:03:30.980 --> 00:03:36.235\nAnd so if I hit Tab again it shows me\nall of the commands that start with I-F.\n\n75\n00:03:36.235 --> 00:03:37.987\nAnd where are these commands?\n\n76\n00:03:37.987 --> 00:03:39.945\nWell they can be in\nseveral different places.\n\n77\n00:03:39.945 --> 00:03:42.373\nWe talked about the path\nin the last episode.\n\n78\n00:03:42.373 --> 00:03:44.927\nThe path that it searches the file\nsystem to find these commands.\n\n79\n00:03:44.927 --> 00:03:52.500\nSo if I were to take like if and\nwhoops, there we go.\n\n80\n00:03:52.500 --> 00:03:53.605\nIf doesn't exist.\n\n81\n00:03:53.605 --> 00:03:55.690\nWell, that means it's a built-in,\nit's a part of the shell.\n\n82\n00:03:55.690 --> 00:03:58.000\nIt's not actually a binary\nfile on the hard drive.\n\n83\n00:03:58.000 --> 00:04:02.460\nIf I do which ifconfig,\nit's in /sbin/ifconfig.\n\n84\n00:04:02.460 --> 00:04:06.940\nIf I do which ifdown, it's in /sbin also.\n\n85\n00:04:06.940 --> 00:04:09.970\nIf I do ifquery,\nit's probably in sbin, also.\n\n86\n00:04:09.970 --> 00:04:12.720\nYep, so each of those are in sbin.\n\n87\n00:04:12.720 --> 00:04:17.290\nExcept for I-F which is actually a\nbuilt-in, cuz it's a programming language.\n\n88\n00:04:17.290 --> 00:04:19.140\nIt's for an if then else loop, right?\n\n89\n00:04:19.140 --> 00:04:20.170\nThat's what that if is.\n\n90\n00:04:20.170 --> 00:04:22.180\nSo that's a different type of thing.\n\n91\n00:04:22.180 --> 00:04:26.650\nSo it's looking across all of those though\nto show me commands that start with I-F.\n\n92\n00:04:26.650 --> 00:04:30.350\nAnd the idea is that I type I-F,\nI hit Tab.\n\n93\n00:04:30.350 --> 00:04:33.350\nI hit Tab again and\nget a list and I say ifconfig.\n\n94\n00:04:33.350 --> 00:04:34.820\nThat's the one I wanted.\n\n95\n00:04:34.820 --> 00:04:37.810\nAnd I type enough letters\nto make it unique.\n\n96\n00:04:37.810 --> 00:04:42.087\nNo other command starts with I-F-C,\nso I can type I-F-C, hit Tab and\n\n97\n00:04:42.087 --> 00:04:44.070\nit finishes, right?\n\n98\n00:04:44.070 --> 00:04:50.890\nAnd it's even gracious enough that once I\ndo that, it retypes the letters for me.\n\n99\n00:04:50.890 --> 00:04:53.240\nSo I don't have type them again and\nI can now add on to it.\n\n100\n00:04:53.240 --> 00:04:55.920\nYeah, it's helpful,\nalthough I forget about it sometimes.\n\n101\n00:04:55.920 --> 00:04:57.340\nWhich is why I got this error up here,\n\n102\n00:04:57.340 --> 00:05:00.650\nwhere I forget that I-F was already\nwritten and I issued another command.\n\n103\n00:05:00.650 --> 00:05:02.320\nI do that a lot.\n\n104\n00:05:02.320 --> 00:05:03.600\n&gt;&gt; I love this feature.\n\n105\n00:05:03.600 --> 00:05:04.890\nComing from a Windows environment,\n\n106\n00:05:04.890 --> 00:05:10.050\nsometimes the case sensitive part of\nworking in a shell like this gets to me.\n\n107\n00:05:10.050 --> 00:05:13.440\nAnd I know that with the Tab autofill,\nit'll fix a lot of that for me.\n\n108\n00:05:13.440 --> 00:05:14.630\nIf there's a second or\n\n109\n00:05:14.630 --> 00:05:17.700\nthird word that has a capital first\nletter, it takes care of that.\n\n110\n00:05:17.700 --> 00:05:18.740\nI don't have to worry about that.\n\n111\n00:05:18.740 --> 00:05:20.420\n&gt;&gt; And this is pretty common, right?\n\n112\n00:05:20.420 --> 00:05:24.140\nWindows, MacOS,\neven Cisco routers use Tab autocomplete.\n\n113\n00:05:24.140 --> 00:05:26.977\nIn fact, I think Cisco routers are one\nof the first places that I used Tab\n\n114\n00:05:26.977 --> 00:05:28.250\nautocomplete.\n\n115\n00:05:28.250 --> 00:05:32.090\nSo that is a common feature to have and\nit helps you find those commands.\n\n116\n00:05:32.090 --> 00:05:35.100\n&gt;&gt; I think Windows is\none of the last ones,\n\n117\n00:05:35.100 --> 00:05:37.195\nthey finally brought it in in Powershell.\n\n118\n00:05:37.195 --> 00:05:40.010\n&gt;&gt; Yeah, absolutely and\nit is incredibly useful.\n\n119\n00:05:40.010 --> 00:05:44.820\nNow, the Tab auto complete is nice,\nthat helps us find commands.\n\n120\n00:05:44.820 --> 00:05:49.540\nWe run a command, in the last episode\nI was always just running one command.\n\n121\n00:05:49.540 --> 00:05:52.570\nI was showing you command line\narguments and modifiers but\n\n122\n00:05:52.570 --> 00:05:55.030\nalways running one\ncommand to do something.\n\n123\n00:05:55.030 --> 00:05:59.240\nBut oftentimes,\nwe want to run more than one command.\n\n124\n00:05:59.240 --> 00:06:02.930\nAnd you can do that, you can run them\none at a time, one after the other.\n\n125\n00:06:02.930 --> 00:06:07.900\nBut there's times where you\nwant the output of one command\n\n126\n00:06:07.900 --> 00:06:11.470\nto serve as the input for\nanother command, right?\n\n127\n00:06:11.470 --> 00:06:14.020\nSo let me give you an example.\n\n128\n00:06:14.020 --> 00:06:17.040\nWhoops, let me fix that, there we go.\n\n129\n00:06:17.040 --> 00:06:21.390\nThe dmesg command,\ndmesg is a command that shows you\n\n130\n00:06:21.390 --> 00:06:24.830\nall the hardware detection that\nhappens when your system boots up.\n\n131\n00:06:24.830 --> 00:06:27.520\nSo if I run dmesg, it's going to run and\n\n132\n00:06:27.520 --> 00:06:31.360\nhere's all the hardware messages\nthat came when my system booted up.\n\n133\n00:06:31.360 --> 00:06:36.360\nAnd if I scroll to the top of it,\nwell, it's a lot of information.\n\n134\n00:06:36.360 --> 00:06:38.380\nI'm scrolling and scrolling and scrolling.\n\n135\n00:06:38.380 --> 00:06:41.800\nEventually, I'm going to hit my scroll\nback buffer which I'm set at 1000 lines,\n\n136\n00:06:41.800 --> 00:06:43.700\nwhich sounds like a lot, but\n\n137\n00:06:43.700 --> 00:06:47.502\nas I scroll back, boy I got a lot\nof these warning events here.\n\n138\n00:06:47.502 --> 00:06:49.440\n[LAUGH], [INAUDIBLE] have that many.\n\n139\n00:06:49.440 --> 00:06:53.260\nBut basically I'm scrolling back and\nthat's just a lot.\n\n140\n00:06:54.520 --> 00:06:59.518\nSo when I look at something like this,\nI might want to see it with pagination,\n\n141\n00:06:59.518 --> 00:07:03.122\nright, where it pauses every 24 lines or\nwhatever.\n\n142\n00:07:03.122 --> 00:07:06.240\nWell, there's a couple of commands\nthat do that, like the more command.\n\n143\n00:07:06.240 --> 00:07:10.840\nMore will make it show with pagination or\nless is very similar.\n\n144\n00:07:10.840 --> 00:07:13.250\nIt lets you have pagination, but\ngives you a little bit more power.\n\n145\n00:07:13.250 --> 00:07:17.070\nSo I might want to take\nthe output of dmesg and\n\n146\n00:07:17.070 --> 00:07:20.300\nuse it as the input to the more command.\n\n147\n00:07:20.300 --> 00:07:23.400\nAnd we can do that by doing\nwhat's called pipelining.\n\n148\n00:07:23.400 --> 00:07:26.600\nAnd pipelining is incredibly useful.\n\n149\n00:07:26.600 --> 00:07:31.320\nYou take the output from one command and\nuse it as the input for another.\n\n150\n00:07:31.320 --> 00:07:33.760\nSo for example if I run dmesg itself,\n\n151\n00:07:33.760 --> 00:07:37.240\nthe default output is\nwhat's called standard out.\n\n152\n00:07:37.240 --> 00:07:38.020\nS-T-D out.\n\n153\n00:07:38.020 --> 00:07:39.640\nStandard out is your screen.\n\n154\n00:07:39.640 --> 00:07:42.181\nSo when you run the command\nit outputs to the screen.\n\n155\n00:07:42.181 --> 00:07:46.962\nBut when you do the pipe symbol\nthat takes its standard out and\n\n156\n00:07:46.962 --> 00:07:49.036\nsends it somewhere else.\n\n157\n00:07:49.036 --> 00:07:51.430\nWe're redirecting that output\nto a different location.\n\n158\n00:07:51.430 --> 00:07:53.160\nWe're pipelining that command.\n\n159\n00:07:53.160 --> 00:07:57.101\nNow when I pipeline this I\ncan send it somewhere else.\n\n160\n00:07:57.101 --> 00:08:00.821\nLet me clarify real quick that pipe\ncharacter, right, it looks like a little\n\n161\n00:08:00.821 --> 00:08:04.730\nvertical line on my screen there, and\nthat's how it's rendered in most fonts.\n\n162\n00:08:04.730 --> 00:08:08.570\nBut it's actually two vertical lines,\nthere's a little gap in the middle that,\n\n163\n00:08:08.570 --> 00:08:10.635\nfor whatever reason,\nthey never show on the screen anymore.\n\n164\n00:08:10.635 --> 00:08:11.200\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n165\n00:08:11.200 --> 00:08:16.300\nif you look at your keyboard, right above\nthe Enter key, well on a US keyboard.\n\n166\n00:08:16.300 --> 00:08:17.720\nOn international keyboards it can move,\nbut\n\n167\n00:08:17.720 --> 00:08:20.790\nit is typically right above\nyour Enter key or Return key.\n\n168\n00:08:20.790 --> 00:08:23.780\nThere will be a key that's\ngot a backslash, and\n\n169\n00:08:23.780 --> 00:08:25.850\nright above it is the pipe symbol.\n\n170\n00:08:25.850 --> 00:08:28.880\nSo you've gotta hold Shift when\nyou hit back slash to do that, and\n\n171\n00:08:28.880 --> 00:08:30.780\nyou'll end up with this vertical line.\n\n172\n00:08:30.780 --> 00:08:35.110\nIt's not an l or a capital L or anything\nlike that, it's just a vertical line.\n\n173\n00:08:35.110 --> 00:08:38.880\nAnd that means, we're gonna redirect\nthe output of dmsg into something else.\n\n174\n00:08:38.880 --> 00:08:40.930\nAnd I can redirect it into more, and\n\n175\n00:08:40.930 --> 00:08:44.470\nmore just takes that output and\npaginates it, right?\n\n176\n00:08:44.470 --> 00:08:48.370\nNow, more is a very simple command,\nnotice all the pretty colors up here?\n\n177\n00:08:48.370 --> 00:08:51.400\ndmesg, the command inside\nof Ubuntu does that.\n\n178\n00:08:51.400 --> 00:08:53.520\nMore doesn't really do color, so\n\n179\n00:08:53.520 --> 00:08:57.020\nwhen I run the more command on this,\nthe output is gonna lose its coloring.\n\n180\n00:08:57.020 --> 00:09:00.840\nBut I'll get pagination,\nand now I can move through.\n\n181\n00:09:00.840 --> 00:09:04.330\nAnd every time I hit Space I'm\nmoving forward a page, right?\n\n182\n00:09:04.330 --> 00:09:07.910\nBut more only goes forward,\nit never goes back.\n\n183\n00:09:07.910 --> 00:09:11.730\nAnd so somebody really creative came\nup with an upgraded version of more\n\n184\n00:09:11.730 --> 00:09:12.830\ncalled less.\n\n185\n00:09:12.830 --> 00:09:14.950\nAnd while the name is less,\nsounds like it would do less,\n\n186\n00:09:14.950 --> 00:09:17.130\nit actually does more\nthan the more command.\n\n187\n00:09:17.130 --> 00:09:18.690\nIt lets you scroll backwards and forwards,\n\n188\n00:09:18.690 --> 00:09:22.290\nit lets you search for for\nstrings, you can find information.\n\n189\n00:09:22.290 --> 00:09:26.130\nSo if I run that, now I'm in less, and\n\n190\n00:09:26.130 --> 00:09:29.810\nevery time I hit Space,\nI'm moving forward a page.\n\n191\n00:09:29.810 --> 00:09:33.458\nBut I can use my up and down arrows, and\njust move by individual lines, right?\n\n192\n00:09:34.500 --> 00:09:38.340\nAnd I can skip forward and\nsearch for something.\n\n193\n00:09:38.340 --> 00:09:42.710\nSo a forward slash lets you search, and\nI'm gonna search for the string usb.\n\n194\n00:09:42.710 --> 00:09:46.295\nAnd now it's gonna jump forward, and\nnow I'm finding the USB detection.\n\n195\n00:09:46.295 --> 00:09:49.900\nAnd I can see where it detected a device,\nor a device was disconnect, or\n\n196\n00:09:49.900 --> 00:09:52.030\nwhatever, I can start to\nlook at that information.\n\n197\n00:09:52.030 --> 00:09:55.440\nAnd there's my wireless\nadapter being detected, and\n\n198\n00:09:55.440 --> 00:09:58.585\nI can see the MAC address or\nthe access point that I connected to.\n\n199\n00:09:58.585 --> 00:10:01.350\nHere's the MAC Address of an access\npoint that I connected to.\n\n200\n00:10:01.350 --> 00:10:04.970\nYou can see that information\nas it's being loaded in here.\n\n201\n00:10:04.970 --> 00:10:09.050\nAnd I can scroll up and scroll down,\nthe less command is really useful.\n\n202\n00:10:09.050 --> 00:10:14.048\nIn one of the earlier episodes,\nI used the more command\n\n203\n00:10:14.048 --> 00:10:19.390\nto show /etc/passwd,\nto show that password file.\n\n204\n00:10:19.390 --> 00:10:22.360\nAnd it laid it out and\nI found the information I wanted.\n\n205\n00:10:22.360 --> 00:10:27.970\nBut if I had used the less command\nto do it, right, I could have\n\n206\n00:10:27.970 --> 00:10:32.840\nscrolled and found my user account like\nmuch, much faster and got at it, right?\n\n207\n00:10:32.840 --> 00:10:34.560\nSo that less command is really handy.\n\n208\n00:10:34.560 --> 00:10:37.870\nWith the pipeline,\nyou can take the output of anything and\n\n209\n00:10:37.870 --> 00:10:41.650\nsend it to the less command, and\nthat is an incredibly useful thing.\n\n210\n00:10:41.650 --> 00:10:43.540\nPipelines are really powerful.\n\n211\n00:10:43.540 --> 00:10:45.860\nAnd here,\nI'm just pipelining one command, right?\n\n212\n00:10:45.860 --> 00:10:48.180\nLet me show you an example\nof pipelining more than one.\n\n213\n00:10:48.180 --> 00:10:52.475\nSo for example, I might use the cat\ncommand, which just displays a file,\n\n214\n00:10:52.475 --> 00:10:54.636\nto display /etc/pastwd, right?\n\n215\n00:10:54.636 --> 00:10:57.402\nSo there it is.\n\n216\n00:10:57.402 --> 00:11:00.030\nWell, it's all displayed on my screen and\nI can scroll up and see it,\n\n217\n00:11:00.030 --> 00:11:01.630\nbut there it is, right?\n\n218\n00:11:01.630 --> 00:11:06.778\nNow, when you look at how passwd is\nsorted, it's sorted by order of creation.\n\n219\n00:11:06.778 --> 00:11:12.035\nSo when the system was installed,\nthe first account it created was root.\n\n220\n00:11:12.035 --> 00:11:14.661\nAnd then after that I see all\nthese other accounts, and\n\n221\n00:11:14.661 --> 00:11:18.860\nmy user account was added way down\nhere in the end, right, there's me.\n\n222\n00:11:18.860 --> 00:11:21.580\nAnd then I see each of the accounts\nthat I've added since then.\n\n223\n00:11:21.580 --> 00:11:23.790\nBut they're not organized by\nanything other than that,\n\n224\n00:11:23.790 --> 00:11:25.610\njust the order that they were created.\n\n225\n00:11:25.610 --> 00:11:30.260\nSo I might want to pipe\nthat into the sort command.\n\n226\n00:11:30.260 --> 00:11:35.290\nAnd sort alphabetizes things, it'll take\nall those lines, and alphabetize them.\n\n227\n00:11:35.290 --> 00:11:39.109\nSo when I do that,\nnow it's in alphabetical order.\n\n228\n00:11:39.109 --> 00:11:41.884\nAnd the users that start with\nw are down here at the end.\n\n229\n00:11:41.884 --> 00:11:44.926\nIf I scroll back up there's\ndpezet in the d's, right?\n\n230\n00:11:44.926 --> 00:11:49.620\nOr I installed the Munin server,\nso there's munin right there.\n\n231\n00:11:49.620 --> 00:11:54.190\nYou can find each of those kind of listed\nout in here, and it's alphabetized.\n\n232\n00:11:54.190 --> 00:11:55.800\nBut it's still more than one page, so\n\n233\n00:11:55.800 --> 00:12:00.040\nI might want to take the output from\na sort, and pipe that into less.\n\n234\n00:12:00.040 --> 00:12:00.860\n&gt;&gt; Wow.\n&gt;&gt; Right, so\n\n235\n00:12:00.860 --> 00:12:04.770\nI'm taking the output from one command,\nturning it into the input for the next.\n\n236\n00:12:04.770 --> 00:12:06.820\nTaking the output from that command and\nturning it into the input for\n\n237\n00:12:06.820 --> 00:12:07.550\na third command.\n\n238\n00:12:07.550 --> 00:12:09.940\nYou can continue to do this,\nyou can pipeline for many,\n\n239\n00:12:09.940 --> 00:12:11.200\nmany different commands.\n\n240\n00:12:11.200 --> 00:12:18.210\nAnd now I get the cat output of\nthe file sorted alphabetically with\n\n241\n00:12:18.210 --> 00:12:22.260\nthe ability scroll forward and backwards,\nand search, and all of that, right?\n\n242\n00:12:22.260 --> 00:12:26.656\nSo really powerful functionality there,\nto be able to manipulate the commands and\n\n243\n00:12:26.656 --> 00:12:29.441\nwhat they're doing, and\nit's pretty neat stuff.\n\n244\n00:12:29.441 --> 00:12:31.817\n&gt;&gt; Absolutely, saves you a lot of\ntime when you're working with,\n\n245\n00:12:31.817 --> 00:12:34.995\nwhen you have to run multiple commands\nlike that on the same set of results.\n\n246\n00:12:34.995 --> 00:12:36.320\n&gt;&gt; Yeah, now in this example,\n\n247\n00:12:36.320 --> 00:12:39.535\nwhat I'm actually doing are running\nsequential commands, right?\n\n248\n00:12:39.535 --> 00:12:43.045\nOne is feeding and the next, or\nrunning one after the other, right?\n\n249\n00:12:43.045 --> 00:12:48.140\nSo cat runs first, when its done the\noutput is sent to sort, then sort runs.\n\n250\n00:12:48.140 --> 00:12:50.960\nAnd when it's done, the output is\nsent to less, and then less runs.\n\n251\n00:12:50.960 --> 00:12:52.819\nRight, they're running\none after the other, but\n\n252\n00:12:52.819 --> 00:12:54.830\nthey're all dependent on each other,\nright?\n\n253\n00:12:54.830 --> 00:13:00.090\nOne is giving output to serve as input\nto the next one, they're interrelated.\n\n254\n00:13:00.090 --> 00:13:02.660\nSometimes we wanna run\nsequential commands, but\n\n255\n00:13:02.660 --> 00:13:04.770\nthey're not really tied to each other.\n\n256\n00:13:04.770 --> 00:13:08.012\nSo for example,\nI might want to make a directory,\n\n257\n00:13:08.012 --> 00:13:12.460\nmove into that directory, and\nthan create a file in that directory.\n\n258\n00:13:12.460 --> 00:13:15.130\nNone of them are serving as input as for\nthe next command,\n\n259\n00:13:15.130 --> 00:13:18.580\nthey're all independent tasks, but\nI just want them to happen in order.\n\n260\n00:13:18.580 --> 00:13:21.590\nSo instead of pipelining,\nI don't wanna redirect their output,\n\n261\n00:13:21.590 --> 00:13:24.710\nI just wanna move sequentially,\nso I could it by hand, right?\n\n262\n00:13:24.710 --> 00:13:29.920\nI could come in, and I could say,\nI want to make directory test1.\n\n263\n00:13:29.920 --> 00:13:31.720\nRight, so I'll make directory test1.\n\n264\n00:13:31.720 --> 00:13:34.891\nI wanna change into directory test1, and\n\n265\n00:13:34.891 --> 00:13:39.300\nI wanna create a file, so\nI'll use touch file1.txt.\n\n266\n00:13:39.300 --> 00:13:43.080\nRight, one after the other,\nright, meticulous entering.\n\n267\n00:13:43.080 --> 00:13:46.360\nWell, that's fine, I can do that, but\n\n268\n00:13:46.360 --> 00:13:49.070\nyou can actually enter\nthese all on the same line.\n\n269\n00:13:49.070 --> 00:13:55.400\nI could say make directory test2,\nand then a semicolon.\n\n270\n00:13:55.400 --> 00:14:00.480\nThe semicolon says, that's the end of that\ncommand, now we're starting a new command.\n\n271\n00:14:00.480 --> 00:14:04.700\nAnd I could say cd test2, and a semicolon.\n\n272\n00:14:04.700 --> 00:14:10.620\nAnd then touch file2.txt,\nit's three commands.\n\n273\n00:14:10.620 --> 00:14:13.380\nBut instead of using\na pipe I use a semicolon.\n\n274\n00:14:13.380 --> 00:14:18.970\nSo the output from mkdir test2\nis not sent to cd test2.\n\n275\n00:14:18.970 --> 00:14:21.460\ncd test2 doesn't need it,\nits just changing directory.\n\n276\n00:14:21.460 --> 00:14:22.610\nIt just assumes the directory is there,\n\n277\n00:14:22.610 --> 00:14:25.480\nit doesn't need any input beyond\nwhat I've already given it.\n\n278\n00:14:25.480 --> 00:14:30.000\nSo it does that, and then touch command\nis just creating an empty file.\n\n279\n00:14:30.000 --> 00:14:33.640\nIt doesn't need any input to do that,\nso it just creates it.\n\n280\n00:14:33.640 --> 00:14:36.040\nEach one is gonna run one after the other.\n\n281\n00:14:36.040 --> 00:14:39.470\nAnd when it's done,\nI can see that I'm in the test2 directory.\n\n282\n00:14:39.470 --> 00:14:42.130\nSo obviously it got created,\nor I couldn't be in it.\n\n283\n00:14:42.130 --> 00:14:45.565\nAnd when I look inside of it,\nthere's file2.txt, right?\n\n284\n00:14:45.565 --> 00:14:49.082\nSo the pipe is redirecting output,\nthe semicolon isn't.\n\n285\n00:14:49.082 --> 00:14:53.960\nThe semicolon is saying, move on to\nthe next command and do it, and so\n\n286\n00:14:53.960 --> 00:14:55.590\nit runs each one in order.\n\n287\n00:14:55.590 --> 00:14:59.210\nSo if you're ever going to\nintentionally run a series of commands,\n\n288\n00:14:59.210 --> 00:15:01.920\nyou can do it pretty\nquickly by doing that.\n\n289\n00:15:01.920 --> 00:15:02.420\n&gt;&gt; Very handy.\n\n290\n00:15:03.450 --> 00:15:05.980\n&gt;&gt; All right,\nsome of the other things that we can do.\n\n291\n00:15:05.980 --> 00:15:07.510\nLet's get a little more advanced.\n\n292\n00:15:07.510 --> 00:15:08.390\n&gt;&gt; All right.\n\n293\n00:15:08.390 --> 00:15:13.530\n&gt;&gt; Commands are fun, pipelining commands,\nsequential commands, those are all good.\n\n294\n00:15:13.530 --> 00:15:18.300\nBut there are times when we wanna get\na little bit more advanced than that.\n\n295\n00:15:18.300 --> 00:15:23.070\nAnd so we have where you can do\nwhat's called command expansion.\n\n296\n00:15:23.070 --> 00:15:26.210\nWhere I can actually run one command\n\n297\n00:15:26.210 --> 00:15:30.190\nfrom within the syntax of another command,\nright?\n\n298\n00:15:30.190 --> 00:15:32.410\nLet me show you what I mean.\n\n299\n00:15:32.410 --> 00:15:37.120\nLet's say that I want to change\nmy shell to bash, right?\n\n300\n00:15:37.120 --> 00:15:40.650\nIn the shells episode I talked about\nhow my default shell can be changed to\n\n301\n00:15:40.650 --> 00:15:41.700\nwhatever we want, right?\n\n302\n00:15:41.700 --> 00:15:46.678\nSo you can use chsh, and\nyou could change your shell.\n\n303\n00:15:46.678 --> 00:15:51.230\nAnd you'd specify that shell as\nsomething like /bin/bash, right?\n\n304\n00:15:51.230 --> 00:15:57.202\nWell, in order to pick that shell I\nneed to tell it where the shell is.\n\n305\n00:15:57.202 --> 00:15:59.630\nAnd I might not know where the shell is,\n\n306\n00:15:59.630 --> 00:16:02.510\nso I'm gonna run the which\ncommand with bash.\n\n307\n00:16:02.510 --> 00:16:03.890\nSo that it tells me where it is.\n\n308\n00:16:03.890 --> 00:16:06.670\nOkay, so which bash tells me where it is?\n\n309\n00:16:06.670 --> 00:16:09.824\nAnd then I can come in and say chsh -s.\n\n310\n00:16:09.824 --> 00:16:13.367\nSo chsh -s/bin/bash,\n\n311\n00:16:13.367 --> 00:16:18.870\nnow that I know that information.\n\n312\n00:16:18.870 --> 00:16:22.560\nWell, instead of doing it that way,\nas two commands.\n\n313\n00:16:22.560 --> 00:16:30.343\nI can actually nest the which bash\ncommand inside of the chsh command.\n\n314\n00:16:30.343 --> 00:16:34.510\nWhere it executed the second\ncommand as part of the first.\n\n315\n00:16:34.510 --> 00:16:37.040\nIt sounds kind of confusing,\nlet me show you what I mean.\n\n316\n00:16:37.040 --> 00:16:39.250\nSo actually I need to provide\na password to do that.\n\n317\n00:16:39.250 --> 00:16:40.470\nSo let me do it, there.\n\n318\n00:16:41.600 --> 00:16:44.313\nSo, if I were to run chsh -s,\n\n319\n00:16:44.313 --> 00:16:49.208\nthen normally I would put\nthe path to bash right here.\n\n320\n00:16:49.208 --> 00:16:51.230\nBut instead I'm gonna put a dollar sign.\n\n321\n00:16:51.230 --> 00:16:52.470\nThe dollar sign is really important.\n\n322\n00:16:53.480 --> 00:16:58.400\nThe dollar sign tells the command line\nthat I'm about to work with variable data.\n\n323\n00:16:58.400 --> 00:17:01.160\nData that's stored in memory,\nnot something that I'm typing and\n\n324\n00:17:01.160 --> 00:17:03.520\nthis is a special set of information\nthat's about to come up.\n\n325\n00:17:03.520 --> 00:17:05.555\nWe're gonna talk more about\nvariables in just a minute.\n\n326\n00:17:05.555 --> 00:17:09.485\nBut here we're creating\na temporary holding place.\n\n327\n00:17:09.485 --> 00:17:14.020\nSo, this dollar sign says something is\nabout to happen, and it's temporary.\n\n328\n00:17:14.020 --> 00:17:17.380\nYou've got to figure it out,\nyou have got to do some math or something.\n\n329\n00:17:17.380 --> 00:17:21.370\nAnd once you figure it out then you\ncan use that as the text that should\n\n330\n00:17:21.370 --> 00:17:23.110\nappear here.\n\n331\n00:17:23.110 --> 00:17:26.910\nAnd so, I'll do the dollar sign\nfollowed by an open parentheses.\n\n332\n00:17:26.910 --> 00:17:32.250\nInside the parentheses, I'll say\nwhich dash and close the parentheses.\n\n333\n00:17:32.250 --> 00:17:35.310\nNow if you remember grade\nschool mathematics,\n\n334\n00:17:35.310 --> 00:17:37.740\nthere was the, I'm gonna screw this up.\n\n335\n00:17:37.740 --> 00:17:38.910\nPlease my dear Aunt Sally.\n\n336\n00:17:38.910 --> 00:17:42.010\n&gt;&gt; Please excuse my dear Aunt Sally,\norder of operations.\n\n337\n00:17:42.010 --> 00:17:43.370\n&gt;&gt; The order of operations.\n\n338\n00:17:43.370 --> 00:17:45.560\nAnd what was the p, the very first one?\n\n339\n00:17:45.560 --> 00:17:46.660\n&gt;&gt; Parentheses.\n\n340\n00:17:46.660 --> 00:17:48.630\n&gt;&gt; And that's exactly what\nyour command line does.\n\n341\n00:17:48.630 --> 00:17:51.400\nIt says I need to figure\nout parentheses first.\n\n342\n00:17:51.400 --> 00:17:54.700\nSo before I do anything I need\nto figure out what's in there.\n\n343\n00:17:54.700 --> 00:17:58.103\nAnd so\nthis dollar sign which dash it says, hey,\n\n344\n00:17:58.103 --> 00:18:01.590\nI need to do some math or\nrun a command or whatever.\n\n345\n00:18:01.590 --> 00:18:03.410\nAnd it looks at it and\nit says okay which dash.\n\n346\n00:18:03.410 --> 00:18:09.140\nI'll run which dash,\nit will return /bin/bash.\n\n347\n00:18:09.140 --> 00:18:12.840\nAnd then it expands that.\n\n348\n00:18:12.840 --> 00:18:14.850\nExecuting here is called expanding.\n\n349\n00:18:14.850 --> 00:18:21.595\nAnd so the command that actually\nruns will be chsh-s/bin/bash.\n\n350\n00:18:21.595 --> 00:18:24.350\nIt figures out the command\nin parenthesis first.\n\n351\n00:18:25.480 --> 00:18:27.980\nSo the please excuse my dear aunt Sally.\n\n352\n00:18:27.980 --> 00:18:32.921\nThat was parentheses, exponents,\nmultiplication, division,\n\n353\n00:18:32.921 --> 00:18:34.920\naddition, subtraction.\n\n354\n00:18:34.920 --> 00:18:35.548\nThat was the order.\n\n355\n00:18:35.548 --> 00:18:36.272\n&gt;&gt; Sounds good.\n\n356\n00:18:36.272 --> 00:18:39.160\n[LAUGH]\n&gt;&gt; I paid attention in third grade.\n\n357\n00:18:39.160 --> 00:18:42.340\n[LAUGH] So,\nhere it's that same idea, right?\n\n358\n00:18:42.340 --> 00:18:43.460\nAnd so, it's gonna execute that.\n\n359\n00:18:43.460 --> 00:18:47.980\nAnd when I run it, it's asking me for\nmy password cuz I'm changing my account.\n\n360\n00:18:47.980 --> 00:18:48.700\nSo, I'll provide that.\n\n361\n00:18:50.060 --> 00:18:54.080\nAnd if I take a look at my history, and\n\n362\n00:18:54.080 --> 00:18:59.700\nlook at what run last, it actually shows\nit as running with that expansion.\n\n363\n00:19:00.710 --> 00:19:04.800\nBut it did actually\nexpand it into the text.\n\n364\n00:19:04.800 --> 00:19:10.430\nAnd if I do a quick look at that\n\n365\n00:19:11.730 --> 00:19:18.050\npast WD file,\nI can see that my shell is /bin/dash.\n\n366\n00:19:18.050 --> 00:19:20.740\nAnd so,\nwe've now changed my default shell.\n\n367\n00:19:20.740 --> 00:19:22.810\nIf I wanna change it back I\ncan just rerun that command.\n\n368\n00:19:24.780 --> 00:19:28.640\nSo I don't know where the bash shell is,\nI never actually looked that one up.\n\n369\n00:19:28.640 --> 00:19:31.900\nBut now if I go and\nlook I can see I've switched back to bash.\n\n370\n00:19:31.900 --> 00:19:34.870\nSo it's running one\ncommand inside of another.\n\n371\n00:19:34.870 --> 00:19:38.236\nAnd it's not just commands, I mean\nyou can actually do math if you want.\n\n372\n00:19:38.236 --> 00:19:45.220\nFor example, let's say, we'll do echo,\necho just means display a text streams.\n\n373\n00:19:45.220 --> 00:19:50.240\nSo, if I say like echo I am\n\n374\n00:19:51.510 --> 00:19:54.770\nten years old like that.\n\n375\n00:19:54.770 --> 00:19:55.840\nIt's gonna echo that string.\n\n376\n00:19:55.840 --> 00:19:57.220\nI am 10 years old.\n\n377\n00:19:57.220 --> 00:19:59.760\nBut I could come in here and\n\n378\n00:19:59.760 --> 00:20:04.040\nget rid of that 10 and\nI could put in some simple math.\n\n379\n00:20:04.040 --> 00:20:08.660\nI could do a dollar sign, and\nI could say that hey, the year is 2017,\n\n380\n00:20:08.660 --> 00:20:12.940\nand I'm going to subtract\nmy birth year and\n\n381\n00:20:12.940 --> 00:20:17.730\nwe'll put, 2007, there we go.\n\n382\n00:20:17.730 --> 00:20:22.714\nAnd so now what I'm saying is I\nam 2017 minus 2007 years old.\n\n383\n00:20:22.714 --> 00:20:27.290\nAnd it'll run that and\nwe run it, I'm 10 years old.\n\n384\n00:20:27.290 --> 00:20:30.350\nIt didn't just display that texturing,\nit actually did the math.\n\n385\n00:20:30.350 --> 00:20:32.140\nAnd it's the dollar sign\nthat's telling you.\n\n386\n00:20:32.140 --> 00:20:34.248\nWhen it sees that dollar sign,\nit says, wait,\n\n387\n00:20:34.248 --> 00:20:36.060\n[SOUND] this isn't normal text anymore.\n\n388\n00:20:36.060 --> 00:20:39.660\nThis is something special,\nI need to expand it, and fill it out here.\n\n389\n00:20:39.660 --> 00:20:43.530\nNow I put it in square brackets\ninstead of regular parenthesis\n\n390\n00:20:43.530 --> 00:20:46.820\nbecause it's inside of\nquote marks like this.\n\n391\n00:20:46.820 --> 00:20:49.450\nBecause it's already kind of enveloped.\n\n392\n00:20:49.450 --> 00:20:53.690\nSo we we need to do that but otherwise\nlike pillar I use the parenthesis cuz\n\n393\n00:20:53.690 --> 00:20:55.180\nwe're just a regular command and\n\n394\n00:20:55.180 --> 00:20:58.666\nI didn't have quotes around it so\nthat's why it's a little bit different.\n\n395\n00:20:58.666 --> 00:20:59.413\n&gt;&gt; Awesome Don.\n\n396\n00:20:59.413 --> 00:21:03.000\nAnd I notice in this one you use\nbrackets instead of parenthesis there is\n\n397\n00:21:03.000 --> 00:21:03.540\nreason for that.\n\n398\n00:21:03.540 --> 00:21:06.680\nYou know it is something that I should\nhave explained while I was doing it.\n\n399\n00:21:06.680 --> 00:21:11.080\nThe big difference here is\nthat we're doing arithmetic.\n\n400\n00:21:11.080 --> 00:21:13.820\nWhen you're doing commands,\nyou wanna use parenthesis.\n\n401\n00:21:13.820 --> 00:21:16.650\nWhen you're doing arithmetic,\nyou'll use the square brackets.\n\n402\n00:21:16.650 --> 00:21:22.460\nSo I'm not saying run a command 2017 or\nrun a command minus, run a command 2007.\n\n403\n00:21:22.460 --> 00:21:24.720\nThose aren't commands.\n\n404\n00:21:24.720 --> 00:21:27.695\nVersus up here, here,\nwhich is a command and\n\n405\n00:21:27.695 --> 00:21:30.785\nbash is simply the input to the command.\n\n406\n00:21:30.785 --> 00:21:35.325\nSo that's how we differentiate whether\nwe're giving it an arithmetic string or\n\n407\n00:21:35.325 --> 00:21:37.455\nif we're giving it a command to execute.\n\n408\n00:21:37.455 --> 00:21:41.750\nSo for example,\nif I wanna do something like here.\n\n409\n00:21:41.750 --> 00:21:45.340\nI want to count the amount of\nfiles that are in this folder.\n\n410\n00:21:45.340 --> 00:21:47.600\nAnd I want it to output the amount\nof files that are in here.\n\n411\n00:21:47.600 --> 00:21:51.800\nWell, you've got a couple of different\ncommands you can use for that, but\n\n412\n00:21:51.800 --> 00:21:52.550\nI'll use the WC command.\n\n413\n00:21:52.550 --> 00:21:54.589\nWC is word count.\n\n414\n00:21:54.589 --> 00:21:55.907\nAnd so\nyou can feed a text file into it, and\n\n415\n00:21:55.907 --> 00:21:57.318\nit will tell you how\nmany words are in there.\n\n416\n00:21:57.318 --> 00:21:59.341\nBut you can also have it\ntell you how many lines.\n\n417\n00:21:59.341 --> 00:22:02.820\nWell if I run the LS command,\neach line would represent a file.\n\n418\n00:22:02.820 --> 00:22:04.790\nSo I could just count the amount\nof lines of output at that and\n\n419\n00:22:04.790 --> 00:22:08.100\nit will give me a basic count\nof how many files I've got.\n\n420\n00:22:08.100 --> 00:22:11.670\nSo we can use the WC command\nto do that which is funny for\n\n421\n00:22:11.670 --> 00:22:14.996\nour British viewers where\nthe WC is the bathroom.\n\n422\n00:22:14.996 --> 00:22:16.640\n[LAUGH] So I will.\n\n423\n00:22:16.640 --> 00:22:19.910\nEcho and just say something like- whoops.\n\n424\n00:22:19.910 --> 00:22:21.080\nScrew it up.\n\n425\n00:22:21.080 --> 00:22:29.180\nSo I'll say, echo and then there\nare dollar sign and open parenthesis.\n\n426\n00:22:29.180 --> 00:22:31.100\nI'm going back to parentheses cuz\nI'm going to issue a command.\n\n427\n00:22:31.100 --> 00:22:34.386\nAnd my command is gonna be ls and\nlet's go crazy.\n\n428\n00:22:34.386 --> 00:22:39.214\nI'm gonna pipeline that, so I'm taking\nthe output of ls and piping that into\n\n429\n00:22:39.214 --> 00:22:44.750\nthe wc command, where it will count\nthe amount of lines that come out, right?\n\n430\n00:22:44.750 --> 00:22:47.180\nAnd I'll close\nthe parentheses on that one.\n\n431\n00:22:47.180 --> 00:22:49.690\nFiles in this directory.\n\n432\n00:22:51.180 --> 00:22:53.540\nSo if you take a look at\nthat we're combining both.\n\n433\n00:22:53.540 --> 00:22:57.560\nI've got a command with\na pipeline right here.\n\n434\n00:22:57.560 --> 00:23:01.330\nAnd it's being expanded\nthanks to our dollar sign.\n\n435\n00:23:01.330 --> 00:23:04.993\nAnd what this should result in,\nunless I've screwed it up, is,\n\n436\n00:23:04.993 --> 00:23:07.269\nthere are 18 files in this directory.\n\n437\n00:23:07.269 --> 00:23:08.555\n&gt;&gt; Very cool.\n\n438\n00:23:08.555 --> 00:23:13.126\n&gt;&gt; Now I may have done some bad things\nhere because I don't know if that counts\n\n439\n00:23:13.126 --> 00:23:14.980\nthe header row up here or not.\n\n440\n00:23:14.980 --> 00:23:16.950\nSo you have to be aware\nof stuff like that.\n\n441\n00:23:16.950 --> 00:23:19.790\nWC probably counted that little\nheader row up at the top and so\n\n442\n00:23:19.790 --> 00:23:22.290\nthere's probably 17 files\nin this directory, not 18.\n\n443\n00:23:22.290 --> 00:23:25.510\nSo you've got to do a little bit\nof work to get the right commands.\n\n444\n00:23:25.510 --> 00:23:28.300\nBut it is neat to see that.\n\n445\n00:23:28.300 --> 00:23:30.730\nThat it'll just expand that out and\n\n446\n00:23:30.730 --> 00:23:34.850\nyou end up with,\nbasically the straight syntax right there.\n\n447\n00:23:34.850 --> 00:23:38.660\nIt's almost like programming.\n\n448\n00:23:38.660 --> 00:23:41.050\nYou're just issuing commands and\nhandling the output.\n\n449\n00:23:41.050 --> 00:23:42.970\nThis is stuff you can easily\ndo from the command line.\n\n450\n00:23:42.970 --> 00:23:46.897\nAnd when you're scripting and automating,\nyou can really do some impressive things.\n\n451\n00:23:46.897 --> 00:23:51.206\nNow, what we're actually doing\nhere when we work with expansion.\n\n452\n00:23:51.206 --> 00:23:53.079\nIs we're working with variables.\n\n453\n00:23:53.079 --> 00:23:56.761\nAnd even with pipelining commands in\na way, the output is being temporarily\n\n454\n00:23:56.761 --> 00:24:00.970\nstored in memory while it serves as\nin the input from another command.\n\n455\n00:24:00.970 --> 00:24:01.850\nThat's called Variable Data.\n\n456\n00:24:01.850 --> 00:24:04.360\nVariable data cuz we don't\nknow what it is, right?\n\n457\n00:24:04.360 --> 00:24:05.986\nIt's being generated in real time,\n\n458\n00:24:05.986 --> 00:24:08.669\nso we don't know what the data\nis until it actually appears.\n\n459\n00:24:08.669 --> 00:24:11.550\nThe other reason it's variable\nis it comes and goes.\n\n460\n00:24:11.550 --> 00:24:12.321\nIt's not gonna be there forever.\n\n461\n00:24:12.321 --> 00:24:15.103\nAnd if I reboot the computer\nthe data is gone.\n\n462\n00:24:15.103 --> 00:24:18.760\nSo it's very, very temporary in nature.\n\n463\n00:24:18.760 --> 00:24:21.237\nThose variables are very,\nvery powerful and\n\n464\n00:24:21.237 --> 00:24:23.330\nthere are a lot of them in your system.\n\n465\n00:24:23.330 --> 00:24:28.270\nWe're gonna use them in a number of\nepisodes here in the power user course.\n\n466\n00:24:28.270 --> 00:24:32.139\nBut if you stay on with us,\nI think it's a month or two from now,\n\n467\n00:24:32.139 --> 00:24:37.180\nwe're doing the shell scripting episodes\nand we use variable everywhere there.\n\n468\n00:24:37.180 --> 00:24:39.300\nBut even if you don't\nthink you use variables,\n\n469\n00:24:39.300 --> 00:24:41.210\nthere's plenty of them that are built in.\n\n470\n00:24:41.210 --> 00:24:43.860\nAnd we already saw one, we talk about\nthe PATH in our last episode, right?\n\n471\n00:24:43.860 --> 00:24:48.019\nSo I did echo $PATH,\nthere's that dollar sign again saying,\n\n472\n00:24:48.019 --> 00:24:51.300\nsomething special's about to happen.\n\n473\n00:24:51.300 --> 00:24:54.073\nBut instead of giving it a command or\narithmetic to do,\n\n474\n00:24:54.073 --> 00:24:56.743\nI didn't do any parentheses,\nI just gave it a word.\n\n475\n00:24:56.743 --> 00:25:00.154\nAnd that's saying hey there must be\na variable that's storing some data and\n\n476\n00:25:00.154 --> 00:25:01.850\nthat variable must be named PATH.\n\n477\n00:25:01.850 --> 00:25:06.692\nSo we'll just take that and expand it\ninto the string that appears right here.\n\n478\n00:25:06.692 --> 00:25:10.670\nAnd so now it's echo followed\nby whatever that string is.\n\n479\n00:25:10.670 --> 00:25:12.386\nIn this case it's our PATH, right?\n\n480\n00:25:12.386 --> 00:25:14.880\nAnd there are a lot of\nvariables like that.\n\n481\n00:25:14.880 --> 00:25:18.710\nLike, I think we did the whoamI\ncommand in an earlier episode.\n\n482\n00:25:18.710 --> 00:25:22.150\nIf not, here's the whoamI command,\nif you forget your username.\n\n483\n00:25:22.150 --> 00:25:24.978\nFirst off, it's in my command prompts so\npretty hard to forget that one.\n\n484\n00:25:24.978 --> 00:25:28.345\nBut I can run whoamI and\nthere is my username, right?\n\n485\n00:25:28.345 --> 00:25:31.930\nBut I can also do echo $USER.\n\n486\n00:25:31.930 --> 00:25:36.590\nThere's a variable called $USER and\nI can query that, and there it is.\n\n487\n00:25:36.590 --> 00:25:38.170\nIt contains my user name.\n\n488\n00:25:38.170 --> 00:25:39.719\nWhen I run whoami,\nthat's really all it's doing.\n\n489\n00:25:39.719 --> 00:25:42.272\n&gt;&gt; [LAUGH]\n&gt;&gt; It's looking at that variable,\n\n490\n00:25:42.272 --> 00:25:45.669\nit's a nice little, like an alias for\npulling out that variable data.\n\n491\n00:25:45.669 --> 00:25:48.075\nThere's a ton of variables.\n\n492\n00:25:48.075 --> 00:25:50.825\nAnd if you ever wanna see them,\nyou can just run the set command and\n\n493\n00:25:50.825 --> 00:25:52.327\nthey'll be output on your screen.\n\n494\n00:25:52.327 --> 00:25:58.600\nNow, a lot of these variables\nare built around functions.\n\n495\n00:25:58.600 --> 00:26:01.895\nAnd so when you run set, you'll see\na bunch a functions here like the services\n\n496\n00:26:01.895 --> 00:26:04.343\nfunction, and\nthose are not the variables themselves.\n\n497\n00:26:04.343 --> 00:26:07.944\nA lot of these are the functions that\ntell it how to populate the variable,\n\n498\n00:26:07.944 --> 00:26:09.760\nhow to put information in it.\n\n499\n00:26:09.760 --> 00:26:14.710\nSo for example, here you've got where\nit's defining some kind of modification\n\n500\n00:26:14.710 --> 00:26:17.199\nto the PATH when being run as a root user.\n\n501\n00:26:17.199 --> 00:26:20.529\nBecause the root user has a different\npath than regular users do, and so\n\n502\n00:26:20.529 --> 00:26:21.540\nthat's a function.\n\n503\n00:26:21.540 --> 00:26:24.186\nBut if you scroll up towards\nthe top of this file and\n\n504\n00:26:24.186 --> 00:26:26.330\nI probably should have set it into less.\n\n505\n00:26:26.330 --> 00:26:32.410\nYou'll actually find where these\nthings are defined somewhere in here.\n\n506\n00:26:32.410 --> 00:26:34.730\nI'm about to hit my scroll back limit.\n\n507\n00:26:34.730 --> 00:26:37.530\nYeah, there's some good stuff in here,\nhere they are.\n\n508\n00:26:37.530 --> 00:26:40.831\nHere's the list of all the variable\nthat were created in this system and\n\n509\n00:26:40.831 --> 00:26:42.271\nI didn't make these, right?\n\n510\n00:26:42.271 --> 00:26:44.780\nThese were ones that were already there.\n\n511\n00:26:44.780 --> 00:26:49.343\nSo if look in here for\nUSER for example, right there.\n\n512\n00:26:49.343 --> 00:26:53.250\nThere it is, that's what I queried\na minute ago, user = dpezet.\n\n513\n00:26:53.250 --> 00:26:58.679\nOr PATH, PATH will be in here, too,\nwhere it was defined right there.\n\n514\n00:26:58.679 --> 00:27:02.495\nAnd, funny enough,\nremember in the last episode,\n\n515\n00:27:02.495 --> 00:27:04.689\nI guess it was,\n&gt;&gt; A couple episodes ago.\n\n516\n00:27:04.689 --> 00:27:07.946\n&gt;&gt; Where I tried to update the PATH\nvariable and it wasn't working?\n\n517\n00:27:07.946 --> 00:27:10.310\nWell, I needed to log out and\nlog back in again.\n\n518\n00:27:10.310 --> 00:27:13.070\nAnd, sure enough,\nthere it is /home/deepslide/manage,\n\n519\n00:27:13.070 --> 00:27:14.170\nit's added to the path.\n\n520\n00:27:14.170 --> 00:27:14.720\n&gt;&gt; Right.\n\n521\n00:27:14.720 --> 00:27:18.043\n&gt;&gt; So when I didn't know why my\ncommand didn't work it actually did\n\n522\n00:27:18.043 --> 00:27:18.750\n&gt;&gt; It was working\n\n523\n00:27:18.750 --> 00:27:20.035\n&gt;&gt; Yeah I just didn't log out and back in.\n\n524\n00:27:20.035 --> 00:27:22.700\nSo anyhow you can start to see that.\n\n525\n00:27:22.700 --> 00:27:26.765\nYou can see that information all starting\nand there's neat stuff like old PWD.\n\n526\n00:27:26.765 --> 00:27:31.457\nOld PWD means what directory was I in, in\nthe file system before the directory I'm\n\n527\n00:27:31.457 --> 00:27:34.930\nin right now, where did I come from And\nso, it tracks there.\n\n528\n00:27:34.930 --> 00:27:37.537\nSo it knows how to get me back\nthere if I try and go back to it.\n\n529\n00:27:37.537 --> 00:27:40.604\nIt's got all sorts of interesting\nstuff that's stored in here and\n\n530\n00:27:40.604 --> 00:27:42.421\nyou can query these whenever you want.\n\n531\n00:27:42.421 --> 00:27:46.018\nYou can use them in scripts or you can\njust use them for your own information.\n\n532\n00:27:46.018 --> 00:27:51.290\nSome of it is really pretty handy,\nlike pulling up the Bash version.\n\n533\n00:27:51.290 --> 00:27:54.805\nLook at this one, I'm running Bash and\nif I ever wanna know what version of Bash,\n\n534\n00:27:54.805 --> 00:27:56.837\nwell that's a little bit tricky, isn't it?\n\n535\n00:27:56.837 --> 00:27:59.481\nWell they know, and so\nthey go through here, and\n\n536\n00:27:59.481 --> 00:28:01.685\nthey map all that out into these values.\n\n537\n00:28:01.685 --> 00:28:04.835\nThis is actually an array that\nis building that stores this so\n\n538\n00:28:04.835 --> 00:28:07.690\nthat I can pull the major version,\nthe minor version.\n\n539\n00:28:07.690 --> 00:28:11.366\nI can pull the architecture,\nyou can pull the individual components.\n\n540\n00:28:11.366 --> 00:28:14.860\nThat's why theres these little\nsub values 0, 1, 2, 3, and so on.\n\n541\n00:28:14.860 --> 00:28:17.555\nThat's a matrix that it's building and\nstoring in this variable.\n\n542\n00:28:17.555 --> 00:28:21.670\nSo you can have a table of data\nstored inside of a variable.\n\n543\n00:28:21.670 --> 00:28:22.847\nIt's pretty neat stuff.\n\n544\n00:28:22.847 --> 00:28:25.720\nAnd all of this is easily updatable.\n\n545\n00:28:25.720 --> 00:28:28.212\nSo if anything changes,\nthese variables change with them.\n\n546\n00:28:28.212 --> 00:28:31.496\nThat makes it where we can\nprogrammatically query them and\n\n547\n00:28:31.496 --> 00:28:33.783\nfind out what has changed in the system.\n\n548\n00:28:33.783 --> 00:28:37.410\nSo it's pretty neat to be\nable to see that stuff.\n\n549\n00:28:37.410 --> 00:28:41.516\nThe shell one is a pretty handy one,\nbecause if we've changed the shell that\n\n550\n00:28:41.516 --> 00:28:44.291\nwe're using there's not\nan easy way to spot that.\n\n551\n00:28:44.291 --> 00:28:50.170\nAnd so you can always do echo $SHELL, and\nit'll tell you which shell that you're in.\n\n552\n00:28:50.170 --> 00:28:54.338\nAssuming that value has been updated,\na lot of times they don't get updated,\n\n553\n00:28:54.338 --> 00:28:56.877\nlike if I run dash and\nnow I'm in the dash shell.\n\n554\n00:28:56.877 --> 00:28:58.319\nAnd I run echo SHELL,\n\n555\n00:28:58.319 --> 00:29:03.217\nit still shows /bin/bash because\nthe variable hasn't been updated.\n\n556\n00:29:03.217 --> 00:29:06.520\nSomething has to trigger\nupdating that variable.\n\n557\n00:29:06.520 --> 00:29:10.024\nAnd with bash when you log in\nis what triggers it, right?\n\n558\n00:29:10.024 --> 00:29:13.193\nSo if you're just sitting there\nrunning it's not updating and\n\n559\n00:29:13.193 --> 00:29:16.971\nthat's why my path wasn't reflecting\nthe change in the earlier episode.\n\n560\n00:29:16.971 --> 00:29:20.333\nJust be aware that variables\nare not always accurate, so\n\n561\n00:29:20.333 --> 00:29:23.073\nyou've always gotta kinda check and\nverify.\n\n562\n00:29:23.073 --> 00:29:24.920\n&gt;&gt; All right Don, great stuff there.\n\n563\n00:29:24.920 --> 00:29:28.928\nReally getting a little deeper when we\nlook at executing commands in our shell\n\n564\n00:29:28.928 --> 00:29:29.490\nin Linux.\n\n565\n00:29:29.490 --> 00:29:32.789\nSo we took a look at tab autocomplete,\npiping commands,\n\n566\n00:29:32.789 --> 00:29:37.000\nexecuting sequential commands as\nwell as expanding commands, right?\n\n567\n00:29:37.000 --> 00:29:39.139\nRunning commands within commands.\n\n568\n00:29:39.139 --> 00:29:43.420\nSo fantastic stuff and I know we have\nmore to do with executing commands.\n\n569\n00:29:43.420 --> 00:29:46.290\nBut unfortunately, we're out of time for\nthis particular episode.\n\n570\n00:29:46.290 --> 00:29:48.945\nAnything you want to leave with\nthem as our parting words?\n\n571\n00:29:48.945 --> 00:29:51.746\n&gt;&gt; All right, I definitely wanna show you\nsome other things like how we can modify\n\n572\n00:29:51.746 --> 00:29:54.225\nvariables and make it permanent,\nwhich goes into our user profile.\n\n573\n00:29:54.225 --> 00:29:57.593\nSo that's probably what we'll start in the\nnext episode if you stay tuned for that.\n\n574\n00:29:57.593 --> 00:29:59.685\nBut we do have a handful\nof other commands, and\n\n575\n00:29:59.685 --> 00:30:03.400\nI still haven't gotten to the really\njuicy stuff, which is, the manual system.\n\n576\n00:30:03.400 --> 00:30:05.475\nInside of Linux, there's all the\ndocumentation where we get all the help.\n\n577\n00:30:05.475 --> 00:30:09.270\nSo we're gonna tackle that, too, that's\nall coming up, so stay tuned for that.\n\n578\n00:30:09.270 --> 00:30:10.178\n&gt;&gt; All right, looking forward to that.\n\n579\n00:30:10.178 --> 00:30:11.690\nI hope you guys are, as well.\n\n580\n00:30:11.690 --> 00:30:14.218\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n581\n00:30:14.218 --> 00:30:15.230\n&gt;&gt; And I'm Don Pezet.\n\n582\n00:30:15.230 --> 00:30:15.851\n&gt;&gt; And we'll see you next time.\n\n583\n00:30:15.851 --> 00:30:23.100\n[MUSIC]\n\n584\n00:30:23.100 --> 00:30:26.398\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222354155"
        },
        {
          "description": "In this episode, Don and Mike explain how to create aliases for commands. They demonstrate creating temporary aliases as well as how to make them permanent by modifying configuration files. Then they look at how to modify what information is displayed at the prompt.",
          "length": "1564",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-3-executing_commands_pt3-061517-PGM.00_25_47_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-3-executing_commands_pt3-061517-PGM.00_25_47_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-2-3-executing_commands_pt3-061517-PGM.00_25_47_29.Still001-sm.jpg",
          "title": "Executing Commands Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:00.950\nWelcome to ITPRO.TV.\n\n2\n00:00:00.950 --> 00:00:02.390\nI'm your host, Don Pezet.\n\n3\n00:00:02.390 --> 00:00:06.389\n[CROSSTALK]\n\n4\n00:00:06.389 --> 00:00:08.256\n[MUSIC]\n\n5\n00:00:08.256 --> 00:00:12.590\n&gt;&gt; You're watching ITPRO.TV.\n\n6\n00:00:12.590 --> 00:00:14.880\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPRO.TV.\n\n7\n00:00:14.880 --> 00:00:16.756\nI'm your host Mike Rodrick.\n\n8\n00:00:16.756 --> 00:00:20.340\nAnd today we're doing\nbecome a Linux power user.\n\n9\n00:00:20.340 --> 00:00:21.672\nSpecifically in this episode,\n\n10\n00:00:21.672 --> 00:00:24.643\nwe're actually on a little mini-series\nhere on executing commands.\n\n11\n00:00:24.643 --> 00:00:28.746\nGreat stuff, we've talked about\na lot of different basic commands,\n\n12\n00:00:28.746 --> 00:00:31.745\ntyping commands,\neven hinted at a few variables.\n\n13\n00:00:31.745 --> 00:00:35.659\nBut we're gonna keep expanding on that\ninfo, and here to help us with that is Mr.\n\n14\n00:00:35.659 --> 00:00:36.245\nDon Pezet.\n\n15\n00:00:36.245 --> 00:00:36.926\nWelcome back Don.\n\n16\n00:00:36.926 --> 00:00:37.928\n&gt;&gt; Hey, thanks for having me back Mike.\n\n17\n00:00:37.928 --> 00:00:41.650\nAnd yeah, just kind of continuing on with\nall the great stuff that we can run.\n\n18\n00:00:41.650 --> 00:00:45.450\nIn this episode,\nI wanna continue on a little bit with,\n\n19\n00:00:45.450 --> 00:00:47.650\nit's a loose tie in to what we\nended the last episode with.\n\n20\n00:00:47.650 --> 00:00:49.706\nIn the last episode, we ended up\ntalking about variables, right?\n\n21\n00:00:49.706 --> 00:00:53.377\nAnd there's a lot of neat stuff you can\ndo with variables, but they're temporary.\n\n22\n00:00:53.377 --> 00:00:55.484\nSo I wanna show you a few more\nthings we can do with them, and\n\n23\n00:00:55.484 --> 00:00:57.251\nthen I wanna show you how\nto make them permanent.\n\n24\n00:00:57.251 --> 00:01:00.285\nSo you can actually make use of\nthese over a longer period of time.\n\n25\n00:01:00.285 --> 00:01:04.163\nAnd we'll get to see some really cool\nstuff here, and really kind of customize\n\n26\n00:01:04.163 --> 00:01:07.241\nour terminal a bit to get things\nthe way that we want them to be.\n\n27\n00:01:07.241 --> 00:01:10.120\nNice and I don't know, Homie.\n\n28\n00:01:10.120 --> 00:01:11.785\n&gt;&gt; Homie, [LAUGH]\n&gt;&gt; I like it.\n\n29\n00:01:11.785 --> 00:01:12.783\n&gt;&gt; Homie consoles are good.\n\n30\n00:01:12.783 --> 00:01:15.200\n[LAUGH]\n&gt;&gt; All right, so let's get started.\n\n31\n00:01:15.200 --> 00:01:16.800\nI wanna start with the alias command.\n\n32\n00:01:16.800 --> 00:01:19.600\nI mentioned the alias command very briefly\nin another episode, so I wanna double\n\n33\n00:01:19.600 --> 00:01:23.120\nback and cover it in a little more detail,\nso you guys understand how it works.\n\n34\n00:01:23.120 --> 00:01:26.020\nA lot of times,\nthere's commands we run over and over, but\n\n35\n00:01:26.020 --> 00:01:28.405\nwe don't run them in the standard form,\nright?\n\n36\n00:01:28.405 --> 00:01:33.327\nSo for example, let me show you,\na lot of times I run ls, right?\n\n37\n00:01:33.327 --> 00:01:35.966\nSo list of directory,\nI wanna see what's in this directory.\n\n38\n00:01:35.966 --> 00:01:37.374\nBut I don't like the default layout,\n\n39\n00:01:37.374 --> 00:01:39.180\ncuz the default layout\njust shows me file names.\n\n40\n00:01:39.180 --> 00:01:41.469\nAnd it's not very friendly\nwith long file names,\n\n41\n00:01:41.469 --> 00:01:44.560\nsee how the long file names\nstart to kind of mess things up?\n\n42\n00:01:44.560 --> 00:01:51.069\nSo what I normally do is run ls in the\nlong format, so it displays it this way.\n\n43\n00:01:51.069 --> 00:01:55.197\nI see more information,\nlike the file size and the file name.\n\n44\n00:01:55.197 --> 00:01:58.593\nAnd if it's a long file name it could just\nscroll right off the edge or word wrap, or\n\n45\n00:01:58.593 --> 00:01:59.692\nwhatever and it's fine.\n\n46\n00:01:59.692 --> 00:02:02.470\nSo this is a little less annoying.\n\n47\n00:02:02.470 --> 00:02:06.390\nThe size of these files is written\nin bytes which kind of annoys me.\n\n48\n00:02:06.390 --> 00:02:08.640\nSo I like it to be written\na little more human readable.\n\n49\n00:02:08.640 --> 00:02:11.006\nSo I'll usually add the h to it as well.\n\n50\n00:02:11.006 --> 00:02:15.886\nAnd when I do that, it's the same output,\nbut now that file that was showing\n\n51\n00:02:15.886 --> 00:02:20.399\nas basically 1 gigabyte is now\nshowing at 954 megabytes, right?\n\n52\n00:02:20.399 --> 00:02:24.710\nSo I can see it in a more\nhuman-readable form, right?\n\n53\n00:02:24.710 --> 00:02:29.293\nAnd then I usually add one more thing\nto it which is the a command, and\n\n54\n00:02:29.293 --> 00:02:34.764\nthat tells it that I want it to actually\nshow all the files including hidden ones,\n\n55\n00:02:34.764 --> 00:02:38.404\ncuz there's a lot of hidden\nstuff in this directory.\n\n56\n00:02:38.404 --> 00:02:42.437\nNow we'll start to see some really\nimportant things like my steam directory,\n\n57\n00:02:42.437 --> 00:02:44.035\ncuz you got a steam installed.\n\n58\n00:02:44.035 --> 00:02:45.312\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n59\n00:02:45.312 --> 00:02:47.136\n&gt;&gt; So I can see where there's aliases for\n\n60\n00:02:47.136 --> 00:02:49.188\nthat, not aliases, but links for that and\n\n61\n00:02:49.188 --> 00:02:52.445\nother information all kind of stuck\nin here that was hidden before.\n\n62\n00:02:52.445 --> 00:02:54.165\nAnd I like to see that stuff.\n\n63\n00:02:54.165 --> 00:02:58.280\nSo usually when I run this command,\nI'm adding a lot to it.\n\n64\n00:02:58.280 --> 00:03:00.348\nWell it gets annoying having to\ntype that over and over again.\n\n65\n00:03:00.348 --> 00:03:05.393\nSo we can define aliases that\ncreate shortcuts for that, right?\n\n66\n00:03:05.393 --> 00:03:09.240\nAnd an alias can be pretty\nmuch whatever you want.\n\n67\n00:03:09.240 --> 00:03:11.162\nIf you just run the alias command,\n\n68\n00:03:11.162 --> 00:03:14.460\nit will give a list of\nthe aliases you already have.\n\n69\n00:03:14.460 --> 00:03:18.216\nIn fact if we take a look,\nnotice how ls already is aliased.\n\n70\n00:03:18.216 --> 00:03:22.910\nThat when canonical built Ubuntu\nthey said, you know what,\n\n71\n00:03:22.910 --> 00:03:28.265\nlet's make ls default to dash,\ndash color equals auto, all right?\n\n72\n00:03:28.265 --> 00:03:32.210\nAnd that way it's the colored ls.\n\n73\n00:03:32.210 --> 00:03:34.950\nWell if I remove that alias,\nlet me just remove it.\n\n74\n00:03:34.950 --> 00:03:37.740\nWe've got the alias\ncommand to create aliases.\n\n75\n00:03:37.740 --> 00:03:43.507\nYou've got the unalias command to remove\nan alias, so I'm gonna unalias ls, right?\n\n76\n00:03:43.507 --> 00:03:47.821\nAnd if I run the alias command now,\nI'll see that alias for ls is gone.\n\n77\n00:03:47.821 --> 00:03:52.256\nThere's other ones in that place like l,\nla, ll, but now the ls alias is gone.\n\n78\n00:03:52.256 --> 00:03:56.766\nAnd if I run ls,\nnow I'm seeing the actual GNU\n\n79\n00:03:56.766 --> 00:04:01.350\nutility version of ls\nwhich is not colored.\n\n80\n00:04:01.350 --> 00:04:01.954\n&gt;&gt; Not nearly as pretty.\n\n81\n00:04:01.954 --> 00:04:04.124\n&gt;&gt; Yeah, and the colors are kinda nice.\n\n82\n00:04:04.124 --> 00:04:07.184\nThey don't really add all that much to it,\nbut you can say dash,\n\n83\n00:04:07.184 --> 00:04:08.384\ndash color equals auto.\n\n84\n00:04:08.384 --> 00:04:11.426\nIs it lowercase?\n\n85\n00:04:11.426 --> 00:04:16.069\nAuto, there, case sensitive is important.\n\n86\n00:04:16.069 --> 00:04:19.770\n[LAUGH] So we can see that is now\ncolorized, or there's actually a single\n\n87\n00:04:19.770 --> 00:04:24.180\nletter command you can use, just\na capital C or lowercase C, or neither.\n\n88\n00:04:24.180 --> 00:04:27.270\nAll right, well apparently I don't\nremember the letter [LAUGH].\n\n89\n00:04:27.270 --> 00:04:30.638\nBut you can specify what you want\nthat to be, and it will do it.\n\n90\n00:04:30.638 --> 00:04:32.079\nIs it F?\n\n91\n00:04:32.079 --> 00:04:33.305\n&gt;&gt; No, that's the.\n\n92\n00:04:33.305 --> 00:04:37.640\n&gt;&gt; I don't remember, it's one of those.\n\n93\n00:04:37.640 --> 00:04:40.226\nAnyhow, so we can have that dash,\ndash color equals auto,\n\n94\n00:04:40.226 --> 00:04:42.620\nthat will do it if you\ncan't remember like me.\n\n95\n00:04:42.620 --> 00:04:46.516\nWell if I wanna build mine,\nI want mine to be ls dash lah, right,\n\n96\n00:04:46.516 --> 00:04:48.960\ncuz that's what I'm used to.\n\n97\n00:04:48.960 --> 00:04:52.170\nAnd so, I could create an alias\nby typing something like this.\n\n98\n00:04:52.170 --> 00:04:57.920\nI can say alias donls equals,\n\n99\n00:04:57.920 --> 00:05:00.990\nand then I'm gonna throw\na little single quote mark here.\n\n100\n00:05:00.990 --> 00:05:05.520\nThis is actually an apostrophe,\nis what it is but it's a single quote.\n\n101\n00:05:05.520 --> 00:05:12.840\nAnd I'm gonna do ls dash lah,\nfollowed by another quote, right?\n\n102\n00:05:12.840 --> 00:05:16.150\nAnd that's gonna create and\nalias called donls, and\n\n103\n00:05:16.150 --> 00:05:20.370\nif I take a look at my aliases\nit will show up right there.\n\n104\n00:05:20.370 --> 00:05:25.300\nAnd whenever I want to, I can just go into\na directory and I can type donls, and\n\n105\n00:05:25.300 --> 00:05:29.120\nnow it's my version of the ls that runs,\nright?\n\n106\n00:05:29.120 --> 00:05:30.750\nBut you can actually overwrite a command,\n\n107\n00:05:30.750 --> 00:05:35.130\nif you remember the very first executing\ncommand episode I talked about the order\n\n108\n00:05:35.130 --> 00:05:38.060\nof how the operating\nsystem finds commands.\n\n109\n00:05:38.060 --> 00:05:41.450\nAnd one of the first things\nit looks at are aliases.\n\n110\n00:05:41.450 --> 00:05:46.340\nSo the fact that there's an ls command is\ngreat, but I could create an alias for\n\n111\n00:05:46.340 --> 00:05:51.170\nls that would be run\nbefore the command itself.\n\n112\n00:05:51.170 --> 00:05:53.087\nAnd so, now it's gonna\noverride that basic command.\n\n113\n00:05:53.087 --> 00:05:58.609\nAnd I could come in and say something\nlike, I want that to be ls dash LAH,\n\n114\n00:05:58.609 --> 00:06:01.939\nand I'll add dash dash color equals auto.\n\n115\n00:06:01.939 --> 00:06:06.750\nI can't remember the single letter for\nit, but we'll do the long way like that.\n\n116\n00:06:06.750 --> 00:06:11.520\nAnd so, now it's gonna run\nthat command when I type ls.\n\n117\n00:06:11.520 --> 00:06:13.510\nAnd now I get my nice little colors.\n\n118\n00:06:13.510 --> 00:06:14.640\nI get the long format.\n\n119\n00:06:14.640 --> 00:06:16.101\nI see all the files.\n\n120\n00:06:16.101 --> 00:06:19.507\nThat's want I want, and the file\nsizes are in a human readable format.\n\n121\n00:06:19.507 --> 00:06:20.223\nThat's want I want.\n\n122\n00:06:20.223 --> 00:06:22.519\nAnd if I take a look at my aliases,\n\n123\n00:06:22.519 --> 00:06:26.629\nthere's the alias that I just added and\nthere it is, okay?\n\n124\n00:06:26.629 --> 00:06:31.980\nAliases are a double-edge sword\nwhen you're learning, okay?\n\n125\n00:06:31.980 --> 00:06:36.560\nWhen you're a Linux power user, use\naliases like crazy, they help out a lot.\n\n126\n00:06:36.560 --> 00:06:40.400\nBut when you're learning, a lot of\npeople use aliases as a crutch and\n\n127\n00:06:40.400 --> 00:06:41.650\nit hurts them in the long run.\n\n128\n00:06:41.650 --> 00:06:43.890\nSo for example,\nlet's say you're coming from Windows.\n\n129\n00:06:43.890 --> 00:06:44.870\nAnd in the Windows world,\n\n130\n00:06:44.870 --> 00:06:48.060\nif you wanna pull up a directory listing,\nyou type DIR, right?\n\n131\n00:06:48.060 --> 00:06:49.550\nYou pull up a directory.\n\n132\n00:06:49.550 --> 00:06:51.715\nWell, see how there's an alias for that?\n\n133\n00:06:51.715 --> 00:06:53.250\n&gt;&gt; [LAUGH]\n&gt;&gt; I didn't make that,\n\n134\n00:06:53.250 --> 00:06:55.630\nit's actually in the system,\nUbuntu does that.\n\n135\n00:06:55.630 --> 00:07:00.630\nBut that makes it where I could be\nrunning the wrong command, and I'm like,\n\n136\n00:07:00.630 --> 00:07:02.280\nwell that's what I'm used to.\n\n137\n00:07:02.280 --> 00:07:05.280\nThat's fine, but if you're gonna\nbe working in the UNIX world and\n\n138\n00:07:05.280 --> 00:07:06.810\nthe LINUX world,\nyou need to learn he right command.\n\n139\n00:07:06.810 --> 00:07:08.270\nAnd the right command is ls.\n\n140\n00:07:08.270 --> 00:07:10.560\nThis is not the right command.\n\n141\n00:07:10.560 --> 00:07:14.770\nAnd so, if you're using\naliases to cover up mix ups.\n\n142\n00:07:14.770 --> 00:07:17.340\nWell it stops you from\nlearning the right commands.\n\n143\n00:07:17.340 --> 00:07:21.110\nSo I recommend while you're learning not\nto use them, but once you get used to\n\n144\n00:07:21.110 --> 00:07:24.822\nthe system and you have these kind of\nsyntax things that you use all the time,\n\n145\n00:07:24.822 --> 00:07:26.830\naliases can really save you a lot.\n\n146\n00:07:26.830 --> 00:07:29.540\nAnd I absolutely aliased\nthat last command,\n\n147\n00:07:29.540 --> 00:07:33.510\nbecause I want output in a certain way and\nto make things the way I want them.\n\n148\n00:07:33.510 --> 00:07:38.717\nBut you can do this with any command or\nany sequence of events even, right?\n\n149\n00:07:38.717 --> 00:07:40.070\nBecause in that alias,\n\n150\n00:07:40.070 --> 00:07:43.867\nI could use semicolons to indicate\nrunning more than one command.\n\n151\n00:07:43.867 --> 00:07:49.628\nSo I might want to do something like\nwhere I take that alias that I just made.\n\n152\n00:07:49.628 --> 00:07:54.809\nAnd I'm gonna add to the end of\nit a semicolon followed by pwd.\n\n153\n00:07:54.809 --> 00:07:58.018\nSo now it's gonna give me\nthe output of the directory, and\n\n154\n00:07:58.018 --> 00:08:02.029\nthen give me the present work directory,\ntell me the path of it, right?\n\n155\n00:08:02.029 --> 00:08:04.643\nSo now when I run that.\n\n156\n00:08:04.643 --> 00:08:06.808\nIt runs it and\nsee how it ran both commands.\n\n157\n00:08:06.808 --> 00:08:08.803\nI got my directory listing here.\n\n158\n00:08:08.803 --> 00:08:12.570\nAnd then here's my present working\ndirectory right there, right?\n\n159\n00:08:12.570 --> 00:08:14.130\nSo, it ran one command after the other.\n\n160\n00:08:14.130 --> 00:08:16.794\nAliases can fire off a whole\nsequence of events if you want, and\n\n161\n00:08:16.794 --> 00:08:18.463\nthey can be really, really powerful.\n\n162\n00:08:18.463 --> 00:08:20.790\nSo they're definitely a neat tool to have.\n\n163\n00:08:20.790 --> 00:08:23.690\n&gt;&gt; And, Don these aliases,\nthey really seem a lot like variable.\n\n164\n00:08:23.690 --> 00:08:26.060\n&gt;&gt; Well, they really technically\nare variables, right?\n\n165\n00:08:26.060 --> 00:08:27.450\nThey're just being stored in memory, and\n\n166\n00:08:27.450 --> 00:08:29.880\nthey're overriding\na command when we run it.\n\n167\n00:08:29.880 --> 00:08:31.365\nJust like variables,\nwhen we log out they're all gone.\n\n168\n00:08:31.365 --> 00:08:32.130\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n169\n00:08:32.130 --> 00:08:33.260\n&gt;&gt; So with a lot of this stuff,\n\n170\n00:08:33.260 --> 00:08:33.790\nit's temporary.\n\n171\n00:08:33.790 --> 00:08:36.060\nAnd if you go through the trouble\nof defining all these aliases and\n\n172\n00:08:36.060 --> 00:08:39.089\nthen you log out and they're gone, didn't\nreally save you any time, did it, right?\n\n173\n00:08:39.089 --> 00:08:42.860\nEvery time you log in, you gotta redefine\nthe aliases that's a bit of a nightmare.\n\n174\n00:08:42.860 --> 00:08:46.100\nSo when we're working with variables and\nwe're working with aliases.\n\n175\n00:08:46.100 --> 00:08:49.460\nWe'll usually wanna define\nthem in a way that keeps them,\n\n176\n00:08:49.460 --> 00:08:52.470\nthat makes them still there\nthe next time that we login.\n\n177\n00:08:52.470 --> 00:08:55.680\nAnd for most of us, what that means\nis we need to modify a little file.\n\n178\n00:08:55.680 --> 00:08:57.690\nThe file is called Bash RC.\n\n179\n00:08:57.690 --> 00:09:00.933\nAnd Bash RC has the configuration for,\nwell, Bash.\n\n180\n00:09:00.933 --> 00:09:02.622\n[LAUGH] So\nevery time to launch your Bash shell,\n\n181\n00:09:02.622 --> 00:09:04.880\nit's pulling this\nconfiguration from there.\n\n182\n00:09:04.880 --> 00:09:08.532\nThere's actually four different files that\ncan be pulled from the, they have this,\n\n183\n00:09:08.532 --> 00:09:11.385\nI know, the BashRC one is the one\nis the one that we wanna remember.\n\n184\n00:09:11.385 --> 00:09:12.515\nThat's one we normally wanna mess with.\n\n185\n00:09:12.515 --> 00:09:15.678\nLet me show you here on my Clear this out.\n\n186\n00:09:15.678 --> 00:09:19.398\nIn my home directory, if I do a quick\nLS and just kinda pull up the directory\n\n187\n00:09:19.398 --> 00:09:22.830\nlisting, I can come in here and\nfind the file that I'm looking for.\n\n188\n00:09:22.830 --> 00:09:25.840\nIt's a hidden file by default\nbecause it's got a dot\n\n189\n00:09:25.840 --> 00:09:29.090\nat the beginning of its name .bashrc.\n\n190\n00:09:29.090 --> 00:09:33.180\nIt's in your home directory, and\nit's your customized bash configuration.\n\n191\n00:09:33.180 --> 00:09:37.200\nIf you have five user accounts,\neach user has their own .bashrc.\n\n192\n00:09:37.200 --> 00:09:39.571\nAnd this file is read\nevery time bash runs.\n\n193\n00:09:39.571 --> 00:09:42.820\nThere's another file in here .profile.\n\n194\n00:09:42.820 --> 00:09:45.255\nIf I scroll down a bit we'll find it.\n\n195\n00:09:45.255 --> 00:09:46.650\nRight here, .profile.\n\n196\n00:09:46.650 --> 00:09:48.760\nThat one is run every time you log in.\n\n197\n00:09:48.760 --> 00:09:50.770\nNow that's a little more annoying.\n\n198\n00:09:50.770 --> 00:09:53.320\nIf we modify that one, we actually\nhave to log out and log back in.\n\n199\n00:09:53.320 --> 00:09:56.670\nWhich means closing all our programs and\ngoing back in for that to take effect.\n\n200\n00:09:56.670 --> 00:09:59.930\nVersus if we changed .batchrc,\nit's every time batch runs.\n\n201\n00:09:59.930 --> 00:10:01.439\nSo that's normally the one\nwe're gonna target.\n\n202\n00:10:01.439 --> 00:10:03.550\nAll right, now I mentioned four files.\n\n203\n00:10:03.550 --> 00:10:09.099\nThere's a batchrc and\na profile located in the main/etc folder.\n\n204\n00:10:09.099 --> 00:10:11.670\nAnd those apply to every user.\n\n205\n00:10:11.670 --> 00:10:14.890\nSo if I wanna create an alias and\nhave it apply to everybody on my computer,\n\n206\n00:10:14.890 --> 00:10:20.060\nI'll put in /etc/bashrc or /etc/profile.\n\n207\n00:10:20.060 --> 00:10:23.370\nWe don't normally mess with those though\ncuz we're not normally creating aliases or\n\n208\n00:10:23.370 --> 00:10:26.840\nvariables for everybody, it's normally\nto serve some purpose of ours.\n\n209\n00:10:26.840 --> 00:10:30.693\nAnd to that end we're normally just\ndealing with bashrc all right?\n\n210\n00:10:30.693 --> 00:10:32.336\nSo let's say we wanna edit that.\n\n211\n00:10:32.336 --> 00:10:35.920\nNow to edit bashrc you can do it\nright here from the command line.\n\n212\n00:10:35.920 --> 00:10:40.210\nI'm gonna use the Nano text editor which\nis installed in most distros these days.\n\n213\n00:10:40.210 --> 00:10:45.232\nIf you have Fedora, or Ubuntu,\nDebian they've all got Nano by default.\n\n214\n00:10:45.232 --> 00:10:47.722\nSome of the red hats don't\nhave nano by default.\n\n215\n00:10:47.722 --> 00:10:53.244\nThey have the traditional, V or\nVI editor, VI, which worked great.\n\n216\n00:10:53.244 --> 00:10:55.844\nSo you can use that one VI is here also.\n\n217\n00:10:55.844 --> 00:10:57.132\nActually I think it's VIM on this one.\n\n218\n00:10:57.132 --> 00:10:59.662\nBut Nano is find on most systems.\n\n219\n00:10:59.662 --> 00:11:03.920\nSo I'm gonna say nano and\nI'll point to my home directory.\n\n220\n00:11:03.920 --> 00:11:05.955\nSo ~/ ~ is also like an alias.\n\n221\n00:11:05.955 --> 00:11:07.945\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a shortcut that points to your\n\n222\n00:11:07.945 --> 00:11:08.920\nhome directory.\n\n223\n00:11:08.920 --> 00:11:11.480\nSo when you say tilde, that's your home.\n\n224\n00:11:11.480 --> 00:11:13.704\nSo in my case it would be /home/dpizette.\n\n225\n00:11:13.704 --> 00:11:21.270\nBut I'll say ~/.bashrc and\nthat's gonna let me edit that bashrc file.\n\n226\n00:11:21.270 --> 00:11:25.770\nAnd a lot of the stuff in here, we don't\nwanna mess with, things like I don't know.\n\n227\n00:11:25.770 --> 00:11:28.580\nWell, some of them we may wanna mess with,\nlike our history size.\n\n228\n00:11:28.580 --> 00:11:30.110\nRight now, I maintain a 1,000 commands.\n\n229\n00:11:30.110 --> 00:11:32.650\nI may want to bump that up in size or\nwhatever.\n\n230\n00:11:32.650 --> 00:11:35.035\nMy history file can store\nup to 2,000 commands.\n\n231\n00:11:35.035 --> 00:11:37.320\nI might want to increase or decrease that.\n\n232\n00:11:37.320 --> 00:11:39.409\nBut as you scroll through,\nyou'll find a lot of neat stuff.\n\n233\n00:11:39.409 --> 00:11:41.750\nAnd towards the end of this file,\n\n234\n00:11:41.750 --> 00:11:47.580\nyou'll find the aliases that your distro\nhas put in place and there may not be any.\n\n235\n00:11:47.580 --> 00:11:50.870\nSome distros don't create aliases\ncanonical, they create a couple.\n\n236\n00:11:50.870 --> 00:11:55.490\nAnd so here's where I can see where\nthey've alienated that ls command, right?\n\n237\n00:11:55.490 --> 00:11:59.450\nAnd I've put in the alias that\nwe just defined a moment ago.\n\n238\n00:11:59.450 --> 00:12:07.180\nSo I put in here alias ls =\nls -lah --color = auto right.\n\n239\n00:12:07.180 --> 00:12:13.001\nAnd by putting it in here, now every\ntime I log in that alias would be there.\n\n240\n00:12:13.001 --> 00:12:18.260\nAnd if I wanted to create that one that\nwas a like a lot like donls right.\n\n241\n00:12:18.260 --> 00:12:22.118\nI could come in here and\nI could say, alias donls =, and\n\n242\n00:12:22.118 --> 00:12:26.058\nthen you just do the single\nquote mark with apostrophe and\n\n243\n00:12:26.058 --> 00:12:30.515\nthe command that you want so\nmine was ls- lah --color = auto.\n\n244\n00:12:30.515 --> 00:12:36.004\nLike that and then the other ones\nare sort of hidden files all right so\n\n245\n00:12:36.004 --> 00:12:38.822\nI will just do -lh and make a call.\n\n246\n00:12:38.822 --> 00:12:42.660\nRight so now I got that defined\nright there and is present.\n\n247\n00:12:42.660 --> 00:12:46.381\nNow if I make a change to this file\ndoes it take effect right away?\n\n248\n00:12:46.381 --> 00:12:48.720\nIt takes effect the next time bash runs.\n\n249\n00:12:48.720 --> 00:12:51.302\nSo I have to exit may bash shell and\ngo back into it or\n\n250\n00:12:51.302 --> 00:12:54.759\njust lauch a new terminal either\nway I will end up triggering that.\n\n251\n00:12:54.759 --> 00:12:58.278\nIf I'm modifying profile, I would\nactually log out and log back in so\n\n252\n00:12:58.278 --> 00:12:59.440\nthat's not as ideal.\n\n253\n00:12:59.440 --> 00:13:01.749\nBut you can just take\nyour aliases in here,\n\n254\n00:13:01.749 --> 00:13:04.260\nyou can just take your\nvariables in here also.\n\n255\n00:13:04.260 --> 00:13:07.442\nAnd then every time bash\nruns It'll load these.\n\n256\n00:13:07.442 --> 00:13:12.089\nAnd you'll see several variables kinda\ntucked away in here as you kind of poke\n\n257\n00:13:12.089 --> 00:13:17.410\nthrough the file, one really important one\nthat I wanna highlight is, did I miss it?\n\n258\n00:13:17.410 --> 00:13:22.464\nIt's the PS1 variable that I must have\nmissed, so let me scroll back down.\n\n259\n00:13:22.464 --> 00:13:28.575\nAnd the PS1 variable is your prompt,\nthe prompt that shows up on your screen so\n\n260\n00:13:28.575 --> 00:13:33.980\nI can see right here PS1 =, and\nit's defining a prompt to use okay.\n\n261\n00:13:33.980 --> 00:13:35.729\nNow what is that prompt?\n\n262\n00:13:35.729 --> 00:13:37.570\nWell let me open up another window here.\n\n263\n00:13:38.820 --> 00:13:41.230\nWhen you open up a shell and\nyou go to issue commands,\n\n264\n00:13:41.230 --> 00:13:45.130\nthis is your prompt right here, and\nmy prompt is made up of my username\n\n265\n00:13:45.130 --> 00:13:48.750\nthe at symbol and my host name,\nso I see Don's laptop.\n\n266\n00:13:48.750 --> 00:13:53.106\nAnd then it's got my path, which is just\ntilled cuz I'm in my home directory,\n\n267\n00:13:53.106 --> 00:13:54.889\nright, and then a dollar sign.\n\n268\n00:13:54.889 --> 00:13:57.020\nThe dollar sign tells\nme I'm a regular user.\n\n269\n00:13:57.020 --> 00:14:00.587\nIf it was a pound symbol, I'd know I\nwas a root or an administrator user.\n\n270\n00:14:00.587 --> 00:14:04.765\nRight, so if I do like a Sudu/g/s.\n\n271\n00:14:04.765 --> 00:14:09.950\nThere we go, now see how I'm\nshowing up as root as my user.\n\n272\n00:14:09.950 --> 00:14:11.571\nI'm an administrator at Don's laptop.\n\n273\n00:14:11.571 --> 00:14:15.040\nAnd then instead of a dollar sign,\nI see a pound symbol.\n\n274\n00:14:15.040 --> 00:14:17.960\nBecause I'm an administrator,\nI'm a root user.\n\n275\n00:14:17.960 --> 00:14:23.243\nAnd if I start to browse into some kind of\nfolder, I start to see that path change\n\n276\n00:14:23.243 --> 00:14:28.304\nto represent the folder that I am in,\nand that's the way the prompt works.\n\n277\n00:14:28.304 --> 00:14:33.030\nThe prompt is pretty slick because\nit shows you a lot of information.\n\n278\n00:14:33.030 --> 00:14:38.260\nBut the longer that prompt gets the harder\nit becomes to type commands right,\n\n279\n00:14:38.260 --> 00:14:40.170\nso when I went in to like /var/log.\n\n280\n00:14:40.170 --> 00:14:44.355\nLet's find a nice long directory\nlike unintended upgrades, right.\n\n281\n00:14:44.355 --> 00:14:45.500\n&gt;&gt; [LAUGH]\n&gt;&gt; See how my\n\n282\n00:14:45.500 --> 00:14:47.980\nprompt is now over half the screen?\n\n283\n00:14:47.980 --> 00:14:49.247\nAnd, so when I start running commands,\n\n284\n00:14:49.247 --> 00:14:51.609\neven short commands are gonna start\nword wrapping, which gets annoying.\n\n285\n00:14:51.609 --> 00:14:55.817\nSo we may wann customize this prompt to\nbetter meet our needs to kind of change\n\n286\n00:14:55.817 --> 00:14:56.680\nwhat we want.\n\n287\n00:14:56.680 --> 00:14:58.821\nSo for example, username.\n\n288\n00:14:58.821 --> 00:15:02.605\nUsername is really only useful if you\nhave more than one user account and\n\n289\n00:15:02.605 --> 00:15:06.725\nyou're always logged in as your user,\nyou don't need to show the username.\n\n290\n00:15:06.725 --> 00:15:11.830\nHost name, host name is really only useful\nif you remote into other machines a lot.\n\n291\n00:15:11.830 --> 00:15:14.580\nYou might forget that hey, this shell\nis actually opened up on server one,\n\n292\n00:15:14.580 --> 00:15:16.070\nnot on my own computer.\n\n293\n00:15:16.070 --> 00:15:18.000\nBut if you're only using\nthe shell here on your system,\n\n294\n00:15:18.000 --> 00:15:20.070\nagain that's kind of wasting some space.\n\n295\n00:15:20.070 --> 00:15:21.300\nYou may want it, you may not.\n\n296\n00:15:21.300 --> 00:15:22.660\nThat's up to you.\n\n297\n00:15:22.660 --> 00:15:26.850\nThe path, having the full\npath can be really annoying,\n\n298\n00:15:26.850 --> 00:15:30.010\nthe longer that path is,\nthe more your screen takes up.\n\n299\n00:15:30.010 --> 00:15:33.187\nSo we may wanna change to just wanna\nshow the current folder which is pretty\n\n300\n00:15:33.187 --> 00:15:33.706\neasy to do.\n\n301\n00:15:33.706 --> 00:15:36.564\nAnd now it's just gonna show one\nfolder will fill up the whole screen,\n\n302\n00:15:36.564 --> 00:15:38.464\nit gives you a better\nidea of where you're at.\n\n303\n00:15:38.464 --> 00:15:43.973\nSo those are all kind of examples of\nthings we might customize with the prompt,\n\n304\n00:15:43.973 --> 00:15:49.170\nand those are all done right here by\nmodifying this PS one value okay.\n\n305\n00:15:49.170 --> 00:15:54.100\nNow, I recommend if you modify this,\nthat you save the default.\n\n306\n00:15:54.100 --> 00:15:58.555\nI'm gonna add a little hash symbol to the\nbeginning and that says ignore this line.\n\n307\n00:15:58.555 --> 00:16:03.237\nAnd by ignoring it, I can now come in and\nspecify my own PS1 And\n\n308\n00:16:03.237 --> 00:16:07.299\nI can define the prompt exactly\nthe way that I want it.\n\n309\n00:16:07.299 --> 00:16:08.930\nAnd this is just a variable, right?\n\n310\n00:16:08.930 --> 00:16:14.400\nThe variable is gonna be stored when\nyou run bash it takes a look at the PS1\n\n311\n00:16:14.400 --> 00:16:19.950\nvariable, looks at whatever is in there,\nand uses that to render the prompt, okay?\n\n312\n00:16:19.950 --> 00:16:23.148\nNow, notice though that there\nare two PS1 variables to find.\n\n313\n00:16:23.148 --> 00:16:27.523\nOne is if you have a color prompt, a\nprompt that supports colors, the other one\n\n314\n00:16:27.523 --> 00:16:32.470\nis if you have a black and white prompt\none that doesn't support colors.\n\n315\n00:16:32.470 --> 00:16:35.850\nYou may just want a black and white prompt\nand so you could define this one time and\n\n316\n00:16:35.850 --> 00:16:37.530\ndelete the other one, right?\n\n317\n00:16:37.530 --> 00:16:38.638\nBut the color looks pretty, but\n\n318\n00:16:38.638 --> 00:16:41.400\nthe color one is a little more challenging\nbecause you have to have color codes.\n\n319\n00:16:41.400 --> 00:16:46.371\nNotice all of these weird\nvalues that look like this,\n\n320\n00:16:46.371 --> 00:16:50.250\nthe 01:32m, those kind of things.\n\n321\n00:16:50.250 --> 00:16:54.130\nThose are our ask key color codes,\nand so it's defining a color change.\n\n322\n00:16:54.130 --> 00:16:57.200\nAnd you can make your prompt look really\nfancy, there's tons of websites out there\n\n323\n00:16:57.200 --> 00:17:00.690\nwhere people go crazy with this\ncreating these really amazing prompts.\n\n324\n00:17:00.690 --> 00:17:01.920\nBut it takes a lot of work.\n\n325\n00:17:01.920 --> 00:17:04.360\nI'm not usually that energetic,\nso I don't normally colors.\n\n326\n00:17:04.360 --> 00:17:08.960\nSo I'll try and keep something simple\nhere, and define the prompt of champions.\n\n327\n00:17:08.960 --> 00:17:11.210\nMike what's your preference on a prompt?\n\n328\n00:17:11.210 --> 00:17:14.030\n&gt;&gt; Unlike you I like to keep it short and\nI like to know where I am.\n\n329\n00:17:14.030 --> 00:17:16.580\nI usually know who I am and\nwhat I'm logged onto.\n\n330\n00:17:16.580 --> 00:17:17.672\nSo I get it down to the path.\n\n331\n00:17:17.672 --> 00:17:21.450\n&gt;&gt; Yup, the path is nice and\nthat's really kind of the basics.\n\n332\n00:17:21.450 --> 00:17:25.640\nI do hate it when there's just like\nthe hash mark or just the dollar sign.\n\n333\n00:17:25.640 --> 00:17:26.780\nYou get that with some shells.\n\n334\n00:17:26.780 --> 00:17:28.000\nWe seen that in this show, right?\n\n335\n00:17:28.000 --> 00:17:30.960\nSo if I For example,\nif I just drop into dash,\n\n336\n00:17:32.210 --> 00:17:36.400\nthere's my prompt which is\njust a dollar sign, right?\n\n337\n00:17:36.400 --> 00:17:39.740\nWhich tells me I'm at a prompt, I can\nrun a command and I can always say pwd,\n\n338\n00:17:39.740 --> 00:17:44.190\nthere's my present working directory,\nusername, or whoami.\n\n339\n00:17:44.190 --> 00:17:46.320\nThere's my identity.\n\n340\n00:17:46.320 --> 00:17:47.190\nI can do hostname.\n\n341\n00:17:47.190 --> 00:17:50.590\nSo I can get the information that's\nin the prompt if I really need it.\n\n342\n00:17:50.590 --> 00:17:52.470\nThat's truly spartan, right?\n\n343\n00:17:52.470 --> 00:17:57.210\nThat's the bare minimum but we can go\na little prettier than that I guess.\n\n344\n00:17:57.210 --> 00:18:00.270\nSo in my prompt I'm gonna\ndefine what I want to show up.\n\n345\n00:18:00.270 --> 00:18:02.400\nNow when you define this,\n\n346\n00:18:02.400 --> 00:18:05.890\nthere are a ton of different values\nthat you can put inside of here.\n\n347\n00:18:05.890 --> 00:18:08.150\nThese little like shortcuts.\n\n348\n00:18:08.150 --> 00:18:13.820\nSo for example I can do \\, and\nthey're all preceded by a slash.\n\n349\n00:18:13.820 --> 00:18:16.060\nSo these are like variables\ninside of the variable.\n\n350\n00:18:16.060 --> 00:18:20.180\nThese are gonna be expanded, like in the\ncommand expansion, into something else.\n\n351\n00:18:20.180 --> 00:18:26.840\nSo if I do a \\!, that's going to show\nmy command history number, right?\n\n352\n00:18:26.840 --> 00:18:30.060\nEvery time I run a command,\nthe command goes into history, right?\n\n353\n00:18:30.060 --> 00:18:31.433\nAnd the history has\na number attached to it.\n\n354\n00:18:31.433 --> 00:18:33.284\nSo that might have been command 561.\n\n355\n00:18:33.284 --> 00:18:35.467\nAnd so it'll show that number.\n\n356\n00:18:35.467 --> 00:18:40.103\nCommand history numbers are never gonna\nbe over 1,000 if I got a maximum of 1,000\n\n357\n00:18:40.103 --> 00:18:41.920\ncommands being remembered.\n\n358\n00:18:41.920 --> 00:18:46.330\nSo old commands get deleted to make\nroom for new commands as we run.\n\n359\n00:18:46.330 --> 00:18:50.970\nSo eventually, this'll hit 1,000 and\nit'll stay at 1,000 as I run each command.\n\n360\n00:18:50.970 --> 00:18:54.468\nSo instead I can just do other things,\nlike \\pound, this is kind of a fun one,\n\n361\n00:18:54.468 --> 00:18:56.589\nthis used to be a default\non a lot of these shows.\n\n362\n00:18:56.589 --> 00:19:00.940\nWhich shows how many commands\nyou've run since you logged in?\n\n363\n00:19:00.940 --> 00:19:04.030\nI might've run five commands or\n500 commands or 1,000 commands, and\n\n364\n00:19:04.030 --> 00:19:06.240\nit'll increment with each\ncommand that you run.\n\n365\n00:19:06.240 --> 00:19:08.190\nIt's kind of neat to see how many\ncommands that you've run while\n\n366\n00:19:08.190 --> 00:19:09.240\nyou're in that session.\n\n367\n00:19:09.240 --> 00:19:12.690\nReally no true benefit\nthough by doing that one.\n\n368\n00:19:12.690 --> 00:19:15.430\nAnd if you're trying to write these down\ndon't worry, I'll put them on the show\n\n369\n00:19:15.430 --> 00:19:19.096\nnotes, just the whole list of some\nof the ones that you can do here.\n\n370\n00:19:19.096 --> 00:19:23.186\n\\ $ is really important,\nthat's when the shows the user prompt,\n\n371\n00:19:23.186 --> 00:19:25.932\nthat's the dollar sign or\nthe pound symbol.\n\n372\n00:19:25.932 --> 00:19:29.870\nSo at a minimum you're gonna\nwant a prompt like that, okay?\n\n373\n00:19:29.870 --> 00:19:32.160\nBut you don't normally\nwanna stop right there,\n\n374\n00:19:32.160 --> 00:19:34.760\nyou need to be really\nliteral with this stuff.\n\n375\n00:19:34.760 --> 00:19:37.630\nYou normally wanna space afterwards,\nright?\n\n376\n00:19:37.630 --> 00:19:42.640\nNotice when I go into one of these\nterminals, and I get to a prompt,\n\n377\n00:19:42.640 --> 00:19:46.730\nsee how there's a space after the dollar\nsign before I type my command?\n\n378\n00:19:46.730 --> 00:19:50.540\nIf I don't put that space there, I'll\nbe typing right after the dollar sign.\n\n379\n00:19:50.540 --> 00:19:52.400\nAnd just visually,\nthat creates a little bit of headache.\n\n380\n00:19:52.400 --> 00:19:54.370\nBut I can reclaim an extra\nspace if I really want it,\n\n381\n00:19:54.370 --> 00:19:55.790\nright there by leaving that out.\n\n382\n00:19:55.790 --> 00:20:00.340\nThis is gonna be literally interpreted to\neither include that space or leave it out.\n\n383\n00:20:00.340 --> 00:20:05.430\nSo that right there would be the most\nspartan prompt that we could do, right?\n\n384\n00:20:05.430 --> 00:20:07.540\nBut normally, we're gonna try and\nmake it a little bit prettier.\n\n385\n00:20:08.710 --> 00:20:09.680\nThe path?\n\n386\n00:20:09.680 --> 00:20:12.410\nIf we wanna that full path, that's a \\w.\n\n387\n00:20:12.410 --> 00:20:16.360\n/w shows the full path.\n\n388\n00:20:16.360 --> 00:20:21.005\nSo /home /deposit /downloads or\nwhatever, I have very, very long one.\n\n389\n00:20:21.005 --> 00:20:27.680\nYou can do a /W and it just shows\nthe folder you're in right now.\n\n390\n00:20:27.680 --> 00:20:28.890\nSo, if I'm in the downloads folder,\n\n391\n00:20:28.890 --> 00:20:33.410\ninstead of /home /deposit /downloads\nit would just say Downloads, right?\n\n392\n00:20:33.410 --> 00:20:35.360\nThat takes a lot less room,\nand I prefer that.\n\n393\n00:20:35.360 --> 00:20:38.390\nJust show me the folder that\nI'm in right at this moment and\n\n394\n00:20:38.390 --> 00:20:40.240\nnot the whole path to get there.\n\n395\n00:20:40.240 --> 00:20:44.410\nI can always run pwd, and\nnow I get the whole path, right?\n\n396\n00:20:44.410 --> 00:20:46.570\nLet's see, what else do we have?\n\n397\n00:20:46.570 --> 00:20:51.870\nYou may want to have what are called non\nprinting characters, they're these colors.\n\n398\n00:20:51.870 --> 00:20:54.680\nNotice how the colors are always\nin square brackets right.\n\n399\n00:20:54.680 --> 00:20:58.120\nThe square brackets are indicating\nthis is a color code or\n\n400\n00:20:58.120 --> 00:21:01.750\nsome other kind of thing that we\nneed to interpret and process.\n\n401\n00:21:01.750 --> 00:21:04.161\nSo it's not necessarily something\nthat's gonna show up in the prompt.\n\n402\n00:21:04.161 --> 00:21:07.216\nIt's something that's gonna\nchange the prompt, and so\n\n403\n00:21:07.216 --> 00:21:09.990\nthat's what those square brackets are.\n\n404\n00:21:09.990 --> 00:21:13.480\nIf you want to have a backslash\nin your prompt, if for\n\n405\n00:21:13.480 --> 00:21:16.790\nsome reason in your syntax\nyou wanna have a backslash.\n\n406\n00:21:16.790 --> 00:21:19.600\nIt's gonna be interpreted\nas you issuing a variable.\n\n407\n00:21:19.600 --> 00:21:21.510\nSo anytime you wanna put\na backslash in here,\n\n408\n00:21:21.510 --> 00:21:23.810\nyou'd actually have to\ndo a double backslash.\n\n409\n00:21:23.810 --> 00:21:27.630\nAnd that would say I'm just gonna\ndo a single, displayed backslash.\n\n410\n00:21:27.630 --> 00:21:29.117\nIt doesn't happen very often,\nbut you might want that.\n\n411\n00:21:29.117 --> 00:21:31.790\nYou might want the date.\n\n412\n00:21:31.790 --> 00:21:34.020\nIf you want the date, that's a \\d.\n\n413\n00:21:34.020 --> 00:21:35.610\nThat'll put the date in there.\n\n414\n00:21:35.610 --> 00:21:39.490\nYou can go crazy and do a \\t,\nthat'll put the time in also.\n\n415\n00:21:39.490 --> 00:21:41.543\nSo now you have the date and\ntime in your prompt.\n\n416\n00:21:41.543 --> 00:21:46.207\nYou can do the host name,\nwhich is \\h for host name, right?\n\n417\n00:21:46.207 --> 00:21:48.355\nWhich was on by default in mine.\n\n418\n00:21:48.355 --> 00:21:52.801\nYou can do \\s to show the shell name.\n\n419\n00:21:52.801 --> 00:21:54.330\nThen you can have that.\n\n420\n00:21:54.330 --> 00:21:59.250\nYou can even do \\n to do a new line, which\nmeans you can have a multi line problem.\n\n421\n00:21:59.250 --> 00:22:01.600\nThat's super annoying but\nsome people like to do it.\n\n422\n00:22:01.600 --> 00:22:05.810\nBut now the prompt is on more than\none line, so you can actually have\n\n423\n00:22:05.810 --> 00:22:09.430\na whole collection of information\nfollowed by the actual entry.\n\n424\n00:22:09.430 --> 00:22:10.850\nSo for example,\n\n425\n00:22:10.850 --> 00:22:14.980\nI might have some really crazy wacked\nout prompt with a lot of information.\n\n426\n00:22:14.980 --> 00:22:18.870\nAnd then I do a \\n\\$ space, and so\n\n427\n00:22:18.870 --> 00:22:24.440\nI get a very basic prompt with all\nthe other stuff on a line above it.\n\n428\n00:22:24.440 --> 00:22:28.100\nSo, let's do that just for\nthe sake of kinda seeing it.\n\n429\n00:22:28.100 --> 00:22:33.200\nWe'll throw in some of the different\nthings like I'll do the full path.\n\n430\n00:22:33.200 --> 00:22:34.810\nAnd then I'll follow that by the date,\n\n431\n00:22:34.810 --> 00:22:39.940\nthe time, we'll do the host name,\n\\s the shell name.\n\n432\n00:22:39.940 --> 00:22:40.610\nWhat am I leaving out?\n\n433\n00:22:40.610 --> 00:22:41.960\nUsername.\n\n434\n00:22:41.960 --> 00:22:45.140\nSo if I want username\nfollowed by host name, right.\n\n435\n00:22:45.140 --> 00:22:49.230\nWell for that one,\nit was \\u for the username and\n\n436\n00:22:49.230 --> 00:22:53.550\nthen I want and @ which I'll just type.\n\n437\n00:22:53.550 --> 00:22:57.575\nAnd then a \\h, so\nthat will create user@post, right?\n\n438\n00:22:57.575 --> 00:23:03.055\nI mean, you can type just about anything,\nI can actually say prompt.\n\n439\n00:23:03.055 --> 00:23:06.560\n&gt;&gt; [LAUGH]\n&gt;&gt; So now I'm gonna be prompt followed\n\n440\n00:23:06.560 --> 00:23:09.521\nby that dollar sign or\npound symbol and then I type.\n\n441\n00:23:09.521 --> 00:23:12.558\nOr some people really like to have a call\nin there at the end, so I might type,\n\n442\n00:23:12.558 --> 00:23:14.180\noops, not in there.\n\n443\n00:23:14.180 --> 00:23:19.076\nLike a colon there, and so\nnow I see my prompt and we can type,\n\n444\n00:23:19.076 --> 00:23:24.071\nor maybe we want some brackets\nsurrounding that dollar sign.\n\n445\n00:23:24.071 --> 00:23:26.490\nSo that I can see that\nkind of separated out.\n\n446\n00:23:26.490 --> 00:23:30.400\nYou can do that, you can really kind of\ncustomize this to meet your own needs.\n\n447\n00:23:30.400 --> 00:23:32.120\nAnd create something interesting.\n\n448\n00:23:32.120 --> 00:23:35.390\nI am not gonna get into the color codes\nbecause that really takes a lot of time.\n\n449\n00:23:35.390 --> 00:23:38.180\nBut once this is all defined,\nassuming we have not screwed it up,\n\n450\n00:23:38.180 --> 00:23:39.920\nnow we will have this new prompt to find.\n\n451\n00:23:39.920 --> 00:23:44.301\nNow, when I get out of this, I am gonna\ncontrol x and tell it yes to save,\n\n452\n00:23:44.301 --> 00:23:46.358\nmy prompt has doesn't changed.\n\n453\n00:23:46.358 --> 00:23:50.060\nThat is because bashrc is\nread when we launch bash.\n\n454\n00:23:50.060 --> 00:23:54.280\nIf I get out of my terminal and\nI go back into my terminal.\n\n455\n00:23:54.280 --> 00:23:55.589\nThat gets read, and there's my prompt.\n\n456\n00:23:55.589 --> 00:23:56.865\nAnd look at the prompt.\n\n457\n00:23:56.865 --> 00:24:02.164\nI've got my directory, followed by the\ndate and time, followed by my username and\n\n458\n00:24:02.164 --> 00:24:05.888\nhost name, followed by the name\nof the shell that I'm in.\n\n459\n00:24:05.888 --> 00:24:10.191\nThen it goes to a new line where it\nsays prompt, shows my privilege, and\n\n460\n00:24:10.191 --> 00:24:11.620\nnow I can type it.\n\n461\n00:24:11.620 --> 00:24:14.476\nAnd I've got this crazy, multiline prompt\nthat I would never use in real life.\n\n462\n00:24:14.476 --> 00:24:17.343\n&gt;&gt; [LAUGH]\n&gt;&gt; But here it is, and\n\n463\n00:24:17.343 --> 00:24:20.860\nif I go into some long folder.\n\n464\n00:24:20.860 --> 00:24:22.650\nYeah, that folder is taking\nmore of the prompt, but\n\n465\n00:24:22.650 --> 00:24:26.730\nbecause it moves me down to a new line,\nI have more room to type.\n\n466\n00:24:26.730 --> 00:24:30.750\nSo, you can customize that prompt, and\nit's being done via a variable, right?\n\n467\n00:24:30.750 --> 00:24:35.070\nThat variable was $PS1, and there it is.\n\n468\n00:24:35.070 --> 00:24:37.700\nI can see how it's defined,\nand I can modify it.\n\n469\n00:24:37.700 --> 00:24:40.490\nAnd it's in .bashrc, so\nit's loaded every time we boot.\n\n470\n00:24:40.490 --> 00:24:43.510\nSo variables Aliases,\nyou put them in bashrc,\n\n471\n00:24:43.510 --> 00:24:45.460\nthey'll be there every time you boot.\n\n472\n00:24:45.460 --> 00:24:46.270\nThey can change the prompt,\n\n473\n00:24:46.270 --> 00:24:49.440\nthey can change all sorts of behavior\nin the system, it's really neat stuff.\n\n474\n00:24:49.440 --> 00:24:52.630\nAnd you can create a system that gives\nyou the information that you need,\n\n475\n00:24:52.630 --> 00:24:53.740\nto be able to work with it.\n\n476\n00:24:53.740 --> 00:24:56.587\nNow like I said, this prompt is crazy,\nI don't normally go this way,\n\n477\n00:24:56.587 --> 00:24:58.637\nI usually [CROSSTALK]\n&gt;&gt; I'm surprised you made it this long\n\n478\n00:24:58.637 --> 00:24:59.571\nwithout changing it back.\n\n479\n00:24:59.571 --> 00:25:00.975\n[LAUGH]\n&gt;&gt; It is annoying me.\n\n480\n00:25:00.975 --> 00:25:03.480\nBut I normally try and\nkeep these things as simple as possible.\n\n481\n00:25:03.480 --> 00:25:06.110\nBut do remember, everything that\nwe're doing here ties to bash.\n\n482\n00:25:06.110 --> 00:25:08.890\nAnd not dash or csh or\nany of the other guys.\n\n483\n00:25:08.890 --> 00:25:11.727\nSo if you switch shells,\nthey have their own configuration files,\n\n484\n00:25:11.727 --> 00:25:13.387\nyou'll need to put things in for them.\n\n485\n00:25:13.387 --> 00:25:15.585\nAll right, Mike,\nI didn't get to help files.\n\n486\n00:25:15.585 --> 00:25:18.672\nBut I think we can tackle that in yet\nanother part-\n\n487\n00:25:18.672 --> 00:25:19.346\n&gt;&gt; Save it for another part?\n\n488\n00:25:19.346 --> 00:25:20.043\n&gt;&gt; On this thing, yeah.\n\n489\n00:25:20.043 --> 00:25:21.867\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, we'll do that then.\n\n490\n00:25:21.867 --> 00:25:23.352\nWe'll save help for the next part.\n\n491\n00:25:23.352 --> 00:25:25.581\nHope you enjoyed watching this one,\nI know I did.\n\n492\n00:25:25.581 --> 00:25:27.692\nAnd we talked a lot about\nAliases variables and\n\n493\n00:25:27.692 --> 00:25:29.597\nhow to make them a little more permanent.\n\n494\n00:25:29.597 --> 00:25:32.838\nBut more useful so you don't have\nto define them every single time.\n\n495\n00:25:32.838 --> 00:25:35.819\nAnd then how to change our prompt,\ncustomize it to where when we're\n\n496\n00:25:35.819 --> 00:25:38.870\nin our shell we get the information\nwe need right there on our prompt.\n\n497\n00:25:38.870 --> 00:25:40.250\nIt's looking the way we want to.\n\n498\n00:25:40.250 --> 00:25:41.450\nSo we thank you for that, Don.\n\n499\n00:25:41.450 --> 00:25:43.850\nHope everybody, again,\nout there enjoyed watching this one.\n\n500\n00:25:43.850 --> 00:25:46.790\nSigning off for ITProTV,\nI've been your host, Mike Rodrick.\n\n501\n00:25:46.790 --> 00:25:48.858\n&gt;&gt; And I'm Don Pezet.\n&gt;&gt; And we'll see you next time.\n\n502\n00:25:48.858 --> 00:25:55.966\n[MUSIC]\n\n503\n00:25:55.966 --> 00:25:58.040\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222188803"
        },
        {
          "description": "In this episode, Don and Mike show how to find help with commands. They demonstrate using the -h and --help options available with most commands. They also look at how to use the man pages to get more detailed help on a command.",
          "length": "1360",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-3-getting_help-061517-PGM.00_22_24_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-3-getting_help-061517-PGM.00_22_24_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-1-3-getting_help-061517-PGM.00_22_24_01.Still001-sm.jpg",
          "title": "Getting Help",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.651\nWelcome ITProTV I'm your host Don Pezet.\n\n2\n00:00:02.651 --> 00:00:06.358\n[CROSSTALK]\n\n3\n00:00:06.358 --> 00:00:08.204\n[MUSIC]\n\n4\n00:00:08.204 --> 00:00:10.092\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.092 --> 00:00:12.190\n[MUSIC]\n\n6\n00:00:12.190 --> 00:00:15.436\n&gt;&gt; Hello and welcome to another\nexiting episode here at ITProTV,\n\n7\n00:00:15.436 --> 00:00:19.735\nI'm your host Mike Rodrick, and today\nwe're doing our become a Linux power user.\n\n8\n00:00:19.735 --> 00:00:24.432\nAnd in this episode, really focusing on\nhow we can get help within Linux, and\n\n9\n00:00:24.432 --> 00:00:27.480\nhere to show us how we can do that is Mr.\nDon Pezet.\n\n10\n00:00:27.480 --> 00:00:28.264\nWelcome back Don.\n\n11\n00:00:28.264 --> 00:00:29.841\n&gt;&gt; Hey, thanks for having me back, Mike.\n\n12\n00:00:29.841 --> 00:00:32.676\nAnd this is a pretty\nimportant episode I think.\n\n13\n00:00:32.676 --> 00:00:36.313\nWe've seen a lot of cool commands, we've\nseen a lot of neat stuff that you can do,\n\n14\n00:00:36.313 --> 00:00:37.390\nand that's all great.\n\n15\n00:00:37.390 --> 00:00:40.620\nBut when you get out there in\nthe real world, what you'll find is\n\n16\n00:00:40.620 --> 00:00:42.565\nit's hard to remember, [LAUGH]\n&gt;&gt; [LAUGH]\n\n17\n00:00:42.565 --> 00:00:44.641\n&gt;&gt; And a lot of these commands have so\n\n18\n00:00:44.641 --> 00:00:46.346\nmany options and tweaks and\n\n19\n00:00:46.346 --> 00:00:50.437\nthings that you can change that\nit's too much to memorize it all.\n\n20\n00:00:50.437 --> 00:00:52.566\nIf it is a command you use\nevery single day, yeah,\n\n21\n00:00:52.566 --> 00:00:54.910\nyou'll remember the options that's great.\n\n22\n00:00:54.910 --> 00:00:59.427\nBut if it's a command you don't use every\nday, it's hard to remember the syntax and\n\n23\n00:00:59.427 --> 00:01:02.431\nthe stuff that we use to make\nthe command do what we want.\n\n24\n00:01:02.431 --> 00:01:05.827\nOr sometimes there might be a very\ntraditional way we use the command but\n\n25\n00:01:05.827 --> 00:01:09.394\nthen you wanna to use it a little\ndifferently and now you can't remember and\n\n26\n00:01:09.394 --> 00:01:11.670\nthat's where things\nreally get challenging.\n\n27\n00:01:11.670 --> 00:01:14.770\nSo I wanna show you guys how to pull\nup a help on a command to learn\n\n28\n00:01:14.770 --> 00:01:19.030\nhow to use it there's more than one system\nin place in Linux to help you learn it.\n\n29\n00:01:19.030 --> 00:01:21.654\nSo it's good to know all\nthe different methods available so\n\n30\n00:01:21.654 --> 00:01:24.970\nthat we can make sure that we're able\nto use the commands when we need them.\n\n31\n00:01:24.970 --> 00:01:28.211\n&gt;&gt; Fantastic, all right how do we get\nstarted looking for help in Linux?\n\n32\n00:01:28.211 --> 00:01:32.771\n&gt;&gt; All right well, sometimes the help\nis really easy, for example I might\n\n33\n00:01:32.771 --> 00:01:38.280\nwanna create a file And I know that I can\nuse the touch command to create a file.\n\n34\n00:01:38.280 --> 00:01:40.851\nBut I might not remember the syntax for\nthe touch command.\n\n35\n00:01:40.851 --> 00:01:43.280\nSo on some commands,\nyou can just type the commands.\n\n36\n00:01:43.280 --> 00:01:46.830\nLike here, if I just type touch and\nI press Enter.\n\n37\n00:01:46.830 --> 00:01:49.215\nIt says hey,\nyou're missing a file operand.\n\n38\n00:01:49.215 --> 00:01:52.887\nIn other words, I didn't give it all\nthe information it needed to run, and\n\n39\n00:01:52.887 --> 00:01:55.585\nthen it says try touch--help for\nmore information.\n\n40\n00:01:55.585 --> 00:01:56.259\n&gt;&gt; Isn't that nice.\n\n41\n00:01:56.259 --> 00:01:57.669\n&gt;&gt; So, it's giving me a hint here, like,\n\n42\n00:01:57.669 --> 00:01:59.985\nyou probably should have typed\na little more, all right?\n\n43\n00:01:59.985 --> 00:02:03.448\nSome commands, like tar,\nif you just type tar,\n\n44\n00:02:03.448 --> 00:02:08.263\nyou must specify one of\nthe -A-C-D-T-R-U-X or --delete or\n\n45\n00:02:08.263 --> 00:02:12.581\n--test-label options In order for\nit to run, all right?\n\n46\n00:02:12.581 --> 00:02:16.776\nBut if you don't know what those are, you\ncan try tar --help, or tar --usage, and\n\n47\n00:02:16.776 --> 00:02:18.980\nyou'll get some information, all right?\n\n48\n00:02:18.980 --> 00:02:21.091\nSo it's giving me hints.\n\n49\n00:02:21.091 --> 00:02:26.600\nBut not every command does that,\nsome of them, like passwd right?\n\n50\n00:02:26.600 --> 00:02:28.479\nI can use that to change my password.\n\n51\n00:02:28.479 --> 00:02:32.500\nAnd if I just run it, I can actually\ngive it right here the command line.\n\n52\n00:02:32.500 --> 00:02:34.610\nAnd I can tell the user I wanna\nreset the password for it,\n\n53\n00:02:34.610 --> 00:02:37.210\nand even what the password should be if\nI want right here in the command line.\n\n54\n00:02:37.210 --> 00:02:40.080\nBut if I just run it, it says,\nyou forgot some stuff.\n\n55\n00:02:40.080 --> 00:02:41.965\nSo I'll just prompt you for them okay.\n\n56\n00:02:41.965 --> 00:02:43.390\nWhose password do you wanna change?\n\n57\n00:02:43.390 --> 00:02:44.775\nDo you wanna change your own?\n\n58\n00:02:44.775 --> 00:02:46.150\nYou can do it, right?\n\n59\n00:02:46.150 --> 00:02:48.408\nOr I can type in a different user,\nI can try and\n\n60\n00:02:48.408 --> 00:02:52.512\ntype in a different user, I'm sorry,\nits asked me for my current password,\n\n61\n00:02:52.512 --> 00:02:56.635\nit is changing my password, this is soon\nmy user, changing password for dpezet.\n\n62\n00:02:56.635 --> 00:02:59.474\nAnd it wants to know my current\npassword and so I can punch that in\n\n63\n00:02:59.474 --> 00:03:03.350\nwhich I've already screwed up I think, and\nnow what I want my new password to be.\n\n64\n00:03:03.350 --> 00:03:05.810\nSo it's just prompting me for\nthose things.\n\n65\n00:03:05.810 --> 00:03:07.000\nSome commands do that and\n\n66\n00:03:07.000 --> 00:03:11.900\nthat's pretty handy because I\ndon't have to remember the syntax.\n\n67\n00:03:11.900 --> 00:03:13.213\nWe can just do it this way.\n\n68\n00:03:13.213 --> 00:03:17.840\nThe only negative of doing it this\nway is that it doesn't work for\n\n69\n00:03:17.840 --> 00:03:21.005\nnon-interactive commands, right?\n\n70\n00:03:21.005 --> 00:03:22.723\nAnd boy it is just not\ngonna let me cancel that,\n\n71\n00:03:22.723 --> 00:03:24.232\nit's gonna make me change my password.\n\n72\n00:03:24.232 --> 00:03:25.653\n&gt;&gt; [LAUGH]\n&gt;&gt; It doesn't work for\n\n73\n00:03:25.653 --> 00:03:28.440\nnon-interactive commands,\nwhich means if I'm writing a script,\n\n74\n00:03:28.440 --> 00:03:30.715\na script,\nyou can't prompt the script for imput.\n\n75\n00:03:30.715 --> 00:03:33.535\nThe script needs to be able\nto provide the input right\n\n76\n00:03:33.535 --> 00:03:34.985\noff the bat without messing with anything.\n\n77\n00:03:36.030 --> 00:03:40.415\nSo, this type of a solution is not\nnecessarily the greatest for a script.\n\n78\n00:03:40.415 --> 00:03:45.216\nI might need to find out what that\nactual syntax is in order to provide\n\n79\n00:03:45.216 --> 00:03:49.693\nthe right values and get the run\nin my script the way that I want.\n\n80\n00:03:49.693 --> 00:03:55.240\nSo on some commands,\nyou can issue things like, passwd?, right?\n\n81\n00:03:55.240 --> 00:03:58.220\nAnd that question mark will\ntrigger it to show a help file.\n\n82\n00:03:58.220 --> 00:04:00.750\nBut more and\nmore commands have moved away from than.\n\n83\n00:04:00.750 --> 00:04:02.310\nIt's a very old syntax.\n\n84\n00:04:02.310 --> 00:04:03.481\nWe don't normally see it anymore.\n\n85\n00:04:03.481 --> 00:04:09.264\nInstead, most of them have switched\nto using -h or --help right.\n\n86\n00:04:09.264 --> 00:04:13.224\n-h though, is getting to be less and\nless common, because there's so\n\n87\n00:04:13.224 --> 00:04:14.947\nmany letters in the alphabet.\n\n88\n00:04:14.947 --> 00:04:18.730\nAnd there's some commands\nthat have a ton of options.\n\n89\n00:04:18.730 --> 00:04:22.590\nThey need that h to represent something,\nso they use the word notation.\n\n90\n00:04:22.590 --> 00:04:24.820\nAnd this is usually the safer one, right?\n\n91\n00:04:24.820 --> 00:04:26.911\nLet me give you an example of ls, right?\n\n92\n00:04:26.911 --> 00:04:30.780\nIf I just run ls by itself,\nIt actually is a default set of options.\n\n93\n00:04:30.780 --> 00:04:32.245\nAnd so it's gonna run the command.\n\n94\n00:04:32.245 --> 00:04:34.715\nMight not prompt me for help or\nanything like that, it actually runs it.\n\n95\n00:04:34.715 --> 00:04:38.010\n&gt;&gt; All right and we've made an alias for\nthat last episode, right?\n\n96\n00:04:38.010 --> 00:04:38.746\n&gt;&gt; Right, fair enough, right.\n\n97\n00:04:38.746 --> 00:04:40.330\nSo an alias can break the help too.\n\n98\n00:04:40.330 --> 00:04:42.160\nSo let's just unalias that real quick.\n\n99\n00:04:42.160 --> 00:04:43.640\nSo I'll unalias ls.\n\n100\n00:04:43.640 --> 00:04:45.526\nAnd now when I run it there it is, right?\n\n101\n00:04:45.526 --> 00:04:48.730\nIt's a default set of\noptions that it uses.\n\n102\n00:04:48.730 --> 00:04:51.999\nSo it's not gonna say,\nyou can type --help.\n\n103\n00:04:51.999 --> 00:04:52.808\nIt's not gonna tell you that.\n\n104\n00:04:52.808 --> 00:04:56.268\nAnd if I do ls-h, well -h for ls is,\n\n105\n00:04:56.268 --> 00:05:01.090\nshow the file sizes in\na human readable format.\n\n106\n00:05:01.090 --> 00:05:03.575\nWell, I'm not even showing\nfile sizes here so\n\n107\n00:05:03.575 --> 00:05:05.120\n-h doesn't really do an anything, right?\n\n108\n00:05:05.120 --> 00:05:09.600\nI'd have to do ls-l and\nnow I see those long file sizes, and\n\n109\n00:05:09.600 --> 00:05:11.380\nthen if you throw the h, and it is.\n\n110\n00:05:11.380 --> 00:05:13.380\nSo h isn't help, right?\n\n111\n00:05:13.380 --> 00:05:18.384\nBut if I do --help, and\nI use that word, there it is.\n\n112\n00:05:18.384 --> 00:05:20.416\nNow I get the help for that command.\n\n113\n00:05:20.416 --> 00:05:23.370\nSo the key one to remember\nhere is really --help.\n\n114\n00:05:23.370 --> 00:05:27.031\nAnd I know that's the Is\nthe BSD notation for help,\n\n115\n00:05:27.031 --> 00:05:29.682\nwhen use the longer words like that.\n\n116\n00:05:29.682 --> 00:05:32.598\nBut so many programs actually use -h for\n\n117\n00:05:32.598 --> 00:05:36.470\nsomething other than help\nthat it's pretty common.\n\n118\n00:05:36.470 --> 00:05:40.951\nSo if you only remember one option,\n--help is probably the best one.\n\n119\n00:05:40.951 --> 00:05:46.282\nAnd you'll find that most commands have\nthat, so if I do passwd --help, and I run\n\n120\n00:05:46.282 --> 00:05:52.760\nthat there, I get the help output, instead\nof it prompting me to change my password.\n\n121\n00:05:52.760 --> 00:05:56.288\nWe can do,\nwhat was the other command I did touch,\n\n122\n00:05:56.288 --> 00:05:59.742\ntouch --help, and\nI can see it's in tags too.\n\n123\n00:05:59.742 --> 00:06:02.757\n&gt;&gt; So even if a command supports\na -h to pull up the help,\n\n124\n00:06:02.757 --> 00:06:06.588\nyou can still do a --help, and\nthat way you know it's gonna work?\n\n125\n00:06:06.588 --> 00:06:10.800\n&gt;&gt; Right, yeah,\n--help works in almost every situation.\n\n126\n00:06:10.800 --> 00:06:13.640\nThe reality is that Linux\nis an open source project.\n\n127\n00:06:13.640 --> 00:06:17.170\nAnd anybody who writes a program\ncan choose to support whatever\n\n128\n00:06:17.170 --> 00:06:18.480\ncommand arguments they want, right.\n\n129\n00:06:18.480 --> 00:06:20.590\nSo they may choose not to support .--help.\n\n130\n00:06:20.590 --> 00:06:23.145\nBut it is pretty standard for\n--help to be there.\n\n131\n00:06:23.145 --> 00:06:25.590\nThat's the one that I usually try first.\n\n132\n00:06:25.590 --> 00:06:28.603\nNow the help screen that you see may or\nmay not be incredibly useful.\n\n133\n00:06:28.603 --> 00:06:30.745\nBecause, again,\nit's an open-source project, so\n\n134\n00:06:30.745 --> 00:06:33.390\nsometimes people have written\nreally good help documentation.\n\n135\n00:06:33.390 --> 00:06:34.605\nSometimes it's garbage, right.\n\n136\n00:06:34.605 --> 00:06:36.700\nThat's just the reality of it.\n\n137\n00:06:36.700 --> 00:06:39.715\nMost developers are not\ngood documentarians, right.\n\n138\n00:06:39.715 --> 00:06:41.731\n&gt;&gt; [LAUGH]\n&gt;&gt; So when I look at touch's help,\n\n139\n00:06:41.731 --> 00:06:46.449\ntouch --help I can see some basic\ninformation here on the file command line\n\n140\n00:06:46.449 --> 00:06:50.280\narguments that I can use -h means,\ndon't create a new file,\n\n141\n00:06:50.280 --> 00:06:52.511\njust change the access time right?\n\n142\n00:06:52.511 --> 00:06:56.511\nSo I'm taking an existing file and\nupdating i's time stamp to show it was\n\n143\n00:06:56.511 --> 00:06:59.600\nmodified even thought I\ndidn't actually modify it.\n\n144\n00:06:59.600 --> 00:07:04.547\n-c means I don't wanna create a file,\nI want to touch an existing file or\n\n145\n00:07:04.547 --> 00:07:09.186\nnot do anything, so you're looking for\nthe existence of the file.\n\n146\n00:07:09.186 --> 00:07:12.822\n-d I can give a text\nsting to change the date,\n\n147\n00:07:12.822 --> 00:07:17.799\nyou can actually modify the date\nof something -f is ignored,\n\n148\n00:07:17.799 --> 00:07:22.040\n-f does not even do anything so\nwhy is -f even here?\n\n149\n00:07:22.040 --> 00:07:25.120\nWell that is likely some deprecated\nfeature that is gone now and so\n\n150\n00:07:25.120 --> 00:07:28.705\nthey leave it in there so you know that\nis it actually not supported anymore.\n\n151\n00:07:28.705 --> 00:07:31.890\nEach of these is performing\na different function.\n\n152\n00:07:31.890 --> 00:07:35.240\nThis one doesn't actually have\na whole heck of a lot of options.\n\n153\n00:07:35.240 --> 00:07:38.541\nAnd so when you look at it,\nit is a fairly small help file.\n\n154\n00:07:38.541 --> 00:07:43.650\nBut if you take other commands like tar,\ntar has a lot of options.\n\n155\n00:07:43.650 --> 00:07:46.343\nAnd so when we start to look at it,\nIt's a little daunting.\n\n156\n00:07:46.343 --> 00:07:48.280\nHow much documentation is in there.\n\n157\n00:07:48.280 --> 00:07:50.850\nIn fact, I'm still in tar, there we go.\n\n158\n00:07:50.850 --> 00:07:51.880\nThat's where it started.\n\n159\n00:07:51.880 --> 00:07:54.076\nAnd there's a good eight or\nnine pages of syntax here.\n\n160\n00:07:54.076 --> 00:07:57.291\nTar is a very powerful and\nit's the tape archive utility.\n\n161\n00:07:57.291 --> 00:08:00.741\nIt lets you combine multiple files into\na single file, which is really handy.\n\n162\n00:08:00.741 --> 00:08:04.246\nFor backups, so I know I used tar a lot.\n\n163\n00:08:04.246 --> 00:08:09.265\nAnd when I use it,\nI always say, tar xvzf and\n\n164\n00:08:09.265 --> 00:08:15.825\nthen a file name,\nI usually do a dash cuz I like it to work.\n\n165\n00:08:15.825 --> 00:08:20.460\n[LAUGH] What this does is it\ntakes a tarred gzip file, a TGZ.\n\n166\n00:08:20.460 --> 00:08:24.720\nIt unzips it, untars it,\ndoes verbose output on the screens so\n\n167\n00:08:24.720 --> 00:08:25.300\nI can see everything.\n\n168\n00:08:25.300 --> 00:08:26.880\nIt dumps the files out, right?\n\n169\n00:08:26.880 --> 00:08:28.390\nThat's how I use it.\n\n170\n00:08:28.390 --> 00:08:29.520\nSo I've got that memorized.\n\n171\n00:08:29.520 --> 00:08:32.240\nI know those four letters, X, V, Z, F.\n\n172\n00:08:32.240 --> 00:08:37.650\nBut what if I want to not unzip something,\nbut zip it and tar it?\n\n173\n00:08:37.650 --> 00:08:41.460\nI don't remember those and so I'll have to\npull up the help and come in here and find\n\n174\n00:08:41.460 --> 00:08:46.350\nthat and the X that I specified and there\nis one that actually stands for extract.\n\n175\n00:08:46.350 --> 00:08:48.050\nI'm extracting the files.\n\n176\n00:08:48.050 --> 00:08:53.350\nWell, if you leave it off, the default\nis to combine the files to tar them.\n\n177\n00:08:53.350 --> 00:08:57.637\nAnd so, basically, we leave the X off and\nyou basically go through here and read.\n\n178\n00:08:57.637 --> 00:09:01.360\nAnd some of them do this, this is my\nfavorite, will they give you examples.\n\n179\n00:09:01.360 --> 00:09:04.200\nIf you're just trying to\ncreate a tar archive,\n\n180\n00:09:04.200 --> 00:09:08.730\ndo tar -cf, the name of the archive and\nthen all of files you wanna stick in it.\n\n181\n00:09:08.730 --> 00:09:10.230\nThere you go.\nThere's a great example.\n\n182\n00:09:10.230 --> 00:09:12.350\nBut they don't always\ngive examples like that.\n\n183\n00:09:12.350 --> 00:09:14.870\nWhen they do, though,\nit is pretty beneficial.\n\n184\n00:09:14.870 --> 00:09:18.856\nNow, this help is coming\nfrom the command itself and\n\n185\n00:09:18.856 --> 00:09:22.852\nit's up to the author of\nthe command to create that.\n\n186\n00:09:22.852 --> 00:09:26.802\nAnd if you come along and you find some\nhelp documentation like that as garbage\n\n187\n00:09:26.802 --> 00:09:28.701\nand you say I'm gonna rewrite that.\n\n188\n00:09:28.701 --> 00:09:31.952\nAnd you write up this beautiful\namazing help document and\n\n189\n00:09:31.952 --> 00:09:36.800\nyou submit it as a push request to whoever\nwrote that program, they may ignore it.\n\n190\n00:09:36.800 --> 00:09:37.720\nThey may not take it.\n\n191\n00:09:37.720 --> 00:09:39.420\nYou know, it's up to them.\n\n192\n00:09:39.420 --> 00:09:40.530\nUsually they love it, right.\n\n193\n00:09:40.530 --> 00:09:43.370\nIf you ever hear somebody say, you should\n\n194\n00:09:43.370 --> 00:09:46.530\nreally be contributing the Open Source\nmovement and you say I'm not a developer.\n\n195\n00:09:46.530 --> 00:09:48.530\nWhat can I do, help documentation.\n\n196\n00:09:48.530 --> 00:09:51.060\nThe developers love it when\npeople submit help documentation.\n\n197\n00:09:51.060 --> 00:09:53.760\nThat's a great way that anybody\ncan contribute to Linux.\n\n198\n00:09:53.760 --> 00:09:58.180\nBut if they don't, it's up to the author\nof that application to accept that and\n\n199\n00:09:58.180 --> 00:10:00.000\nput it in their help right.\n\n200\n00:10:00.000 --> 00:10:04.740\nThere is a completely separate\nset of help documentation\n\n201\n00:10:04.740 --> 00:10:08.090\nthat's controlled by the Linux\ndistribution itself.\n\n202\n00:10:08.090 --> 00:10:10.670\nAnd you can put the documentation\nthere instead and\n\n203\n00:10:10.670 --> 00:10:13.790\noften times you'll find that\ndocumentation is much more exhaustive and\n\n204\n00:10:13.790 --> 00:10:16.040\nit's not dependent on the author\nof the utilities anymore.\n\n205\n00:10:16.040 --> 00:10:20.533\nIt's dependent more on this straw and\nthose are what are known as the man pages.\n\n206\n00:10:20.533 --> 00:10:25.523\nMan is short for manual and\nthere are manual pages for\n\n207\n00:10:25.523 --> 00:10:31.090\na ton of, well, not just commands but\nfiles, see calls.\n\n208\n00:10:31.090 --> 00:10:35.395\nThere's all sorts of different things\nthat documentation that's all talked away\n\n209\n00:10:35.395 --> 00:10:39.281\nin your Unix distribution and you can\naccess them by using the man command.\n\n210\n00:10:39.281 --> 00:10:44.475\nThe man command is present on BSD,\nLinux, true Unix.\n\n211\n00:10:44.475 --> 00:10:48.105\nThey've all got this man thing,\nit's been around a long time and\n\n212\n00:10:48.105 --> 00:10:51.030\nit's a great go to to\nget help with a command.\n\n213\n00:10:51.030 --> 00:10:53.478\nSometimes it can give you too much\ninformation way more than you wanted.\n\n214\n00:10:53.478 --> 00:10:56.900\n&gt;&gt; [LAUGH]\n&gt;&gt; But if you take something like\n\n215\n00:10:56.900 --> 00:11:01.735\nthe touch command, where when I do\ntouch --help and I take a look at it,\n\n216\n00:11:01.735 --> 00:11:06.450\nit's barely more than one screen\nof information right here.\n\n217\n00:11:06.450 --> 00:11:08.740\nRight here on touch command is only so\npowerful.\n\n218\n00:11:08.740 --> 00:11:13.040\nBut if I run man touch,\nwhich sounds a little creepy, but\n\n219\n00:11:13.040 --> 00:11:15.890\nwhenever I man touch, I'm saying show me\nthe manual file for the touch command.\n\n220\n00:11:15.890 --> 00:11:19.960\nAnd when I run that,\nI get something much more.\n\n221\n00:11:19.960 --> 00:11:24.390\nAll right, this is about six pages, right?\n\n222\n00:11:24.390 --> 00:11:27.470\nNow, not all the information is\nincredibly useful to me, right?\n\n223\n00:11:27.470 --> 00:11:31.600\nA lot of it's formatted nicer, so\nI see I'm gonna run the touch command.\n\n224\n00:11:31.600 --> 00:11:35.690\nFollowed by an option, followed by\nthe file that I wanna modify, right?\n\n225\n00:11:35.690 --> 00:11:37.750\nAnd then I get the description\nof the command.\n\n226\n00:11:37.750 --> 00:11:39.100\nHere's what it does, right?\n\n227\n00:11:39.100 --> 00:11:43.290\nAnd it tells me in a long form,\ninstead of just one sentence by line,\n\n228\n00:11:43.290 --> 00:11:46.330\nhere it's a long form of\nwhat that command does.\n\n229\n00:11:46.330 --> 00:11:49.550\nAnd then I see the command line arguments,\nhow I can modify what it does.\n\n230\n00:11:49.550 --> 00:11:51.590\nThis is what I was seeing\non the one page earlier,\n\n231\n00:11:51.590 --> 00:11:55.230\nbut there's a few options here\nthat weren't in, touch --help.\n\n232\n00:11:55.230 --> 00:11:55.820\nRight?\nSo\n\n233\n00:11:55.820 --> 00:11:59.660\nI'm seeing some extra things\nhere in the man page.\n\n234\n00:11:59.660 --> 00:12:04.080\nAnd then beneath that,\nin the --help earlier, I saw where I can\n\n235\n00:12:04.080 --> 00:12:07.890\nprovide the time, but it didn't really\ntell me the format of the time.\n\n236\n00:12:07.890 --> 00:12:10.800\nHere, it tells me the format,\nhow I can specify the time,\n\n237\n00:12:10.800 --> 00:12:14.710\nthe different ways that we can specify\nthat, that the command will understand.\n\n238\n00:12:14.710 --> 00:12:17.480\nAnd you'll see there's more than\none format that I can provide.\n\n239\n00:12:17.480 --> 00:12:19.010\nAnd then it gives me some metadata.\n\n240\n00:12:19.010 --> 00:12:20.180\nLike who the author was.\n\n241\n00:12:20.180 --> 00:12:21.260\nWho wrote this thing?\n\n242\n00:12:21.260 --> 00:12:22.220\nWhen was it written?\n\n243\n00:12:22.220 --> 00:12:23.010\nIs it copyrighted?\n\n244\n00:12:23.010 --> 00:12:24.800\nWhat license is it covered under?\n\n245\n00:12:24.800 --> 00:12:27.550\nAnd then are there any related commands,\n\n246\n00:12:27.550 --> 00:12:31.530\nwhat are other things I might wanna\nlook at in relation to this command?\n\n247\n00:12:31.530 --> 00:12:34.310\nI can learn a ton about\na command right here.\n\n248\n00:12:34.310 --> 00:12:39.630\nThe man pages are a wealth of\ninformation on how these utilities work.\n\n249\n00:12:39.630 --> 00:12:41.720\nAnd it's not just for commands.\n\n250\n00:12:41.720 --> 00:12:45.873\nOften times you'll find where\nthere's commands and files and\n\n251\n00:12:45.873 --> 00:12:47.445\nother things, right.\n\n252\n00:12:47.445 --> 00:12:49.987\nSo passwd, passwd is a command.\n\n253\n00:12:49.987 --> 00:12:53.673\nI can run that and\nI can change my password.\n\n254\n00:12:53.673 --> 00:13:01.300\nBut if I look inside of the /etc folder,\nthere's actually a passwd file as well.\n\n255\n00:13:01.300 --> 00:13:04.160\nSo there's a file and a command.\n\n256\n00:13:04.160 --> 00:13:11.500\nWhen I run man passwd, it's gonna show\nme the man page for the command, right?\n\n257\n00:13:11.500 --> 00:13:14.750\nBut there's a man page for the file also.\n\n258\n00:13:14.750 --> 00:13:16.030\nNotice way up here at the top right,\n\n259\n00:13:16.030 --> 00:13:21.450\nwhere it says PASSWD and\nin parentheses there's a number one, okay.\n\n260\n00:13:21.450 --> 00:13:25.710\nMan pages are broken up into\neight different categories and\n\n261\n00:13:25.710 --> 00:13:29.830\neach category indicates\na different type of manual page.\n\n262\n00:13:29.830 --> 00:13:30.730\nRight?\n\n263\n00:13:30.730 --> 00:13:35.340\nManual page in category one, those are\ncommands and that's normally what we want.\n\n264\n00:13:35.340 --> 00:13:37.950\nNormally we need help with a command cuz\nwe're interacting with the system and\n\n265\n00:13:37.950 --> 00:13:42.340\nwe need to know it, but there's seven\nother categories that are there.\n\n266\n00:13:42.340 --> 00:13:45.600\nCategory 2 is for Unix calls.\n\n267\n00:13:45.600 --> 00:13:50.500\nThe touch command, for example,\nI can use touch as a command, but\n\n268\n00:13:50.500 --> 00:13:53.500\nI can also use touch as a Unix call.\n\n269\n00:13:53.500 --> 00:13:57.001\nAnd so when we take a look at a man\npage and I do man touch again,\n\n270\n00:13:57.001 --> 00:14:00.680\nI'll see touch and\nthere's that one in parentheses.\n\n271\n00:14:00.680 --> 00:14:03.200\nBut I know there's a Unix call too and\nthat would be touch and\n\n272\n00:14:03.200 --> 00:14:05.230\nin parentheses two.\n\n273\n00:14:05.230 --> 00:14:11.340\nSo what you can do with a man\npage is you can run man -k and\n\n274\n00:14:11.340 --> 00:14:16.580\nyou can specify the type\nthat you're looking for\n\n275\n00:14:16.580 --> 00:14:19.660\nso I can say I'm looking for two, right.\n\n276\n00:14:19.660 --> 00:14:23.500\nAnd when I run that,\nI'm sorry you don't need a -k,\n\n277\n00:14:23.500 --> 00:14:25.030\nI'll show you a -k here in a second.\n\n278\n00:14:25.030 --> 00:14:26.695\nSo just man and then the number.\n\n279\n00:14:26.695 --> 00:14:28.415\nAnd then the command.\n\n280\n00:14:28.415 --> 00:14:32.515\nWhen I do that, it's saying nope,\nactually I didn't find an entry for that.\n\n281\n00:14:32.515 --> 00:14:34.585\nSo, while there is a Unix\ncalled call touch,\n\n282\n00:14:34.585 --> 00:14:37.685\napparently there's no man page available\nor I spelled touch wrong one or the other.\n\n283\n00:14:37.685 --> 00:14:39.545\nNope, just not a call for it.\n\n284\n00:14:39.545 --> 00:14:41.626\nSo, if we take a look at other commands,\n\n285\n00:14:41.626 --> 00:14:44.156\nyou may find where they\nhave alternate version.\n\n286\n00:14:44.156 --> 00:14:45.586\nNow how do we know if they\nhave an alternate version?\n\n287\n00:14:45.586 --> 00:14:47.315\nThat's where the -k comes in.\n\n288\n00:14:47.315 --> 00:14:52.310\nIf I wanna know if there's an alternate\nversion I can say man -k and then touch.\n\n289\n00:14:52.310 --> 00:14:56.180\nAnd it's gonna look for\nany man page that references touch.\n\n290\n00:14:56.180 --> 00:14:58.900\nAnd I'll see there's the touch one.\n\n291\n00:14:58.900 --> 00:15:02.660\nBut then there's a couple of other\nones like this Synaptics (4), right?\n\n292\n00:15:02.660 --> 00:15:05.600\nWell, Synaptics is a vendor,\nthey make touch pads.\n\n293\n00:15:05.600 --> 00:15:07.890\nMost of us,\nour touch pads are made by Synaptics.\n\n294\n00:15:07.890 --> 00:15:09.780\nWhether you have a Dell or a Mac or\n\n295\n00:15:09.780 --> 00:15:13.820\nlike mine's a System 76,\nthey're all Synaptic for the most part.\n\n296\n00:15:13.820 --> 00:15:15.910\nSo, it's a touchpad.\n\n297\n00:15:15.910 --> 00:15:18.310\nAnd so it triggered off of that keyword,\ntouch.\n\n298\n00:15:18.310 --> 00:15:19.380\nRight?\n\n299\n00:15:19.380 --> 00:15:20.680\nSo that's how it found it.\n\n300\n00:15:20.680 --> 00:15:22.830\nBut I can try other things, like passwd.\n\n301\n00:15:22.830 --> 00:15:30.480\nAnd when I look at it, right down here,\nI can find there's passwd(1).\n\n302\n00:15:30.480 --> 00:15:32.390\nAnd there's passwd(5).\n\n303\n00:15:32.390 --> 00:15:37.280\nOkay, one is a command,\ntwo is a Unix call, three,\n\n304\n00:15:37.280 --> 00:15:40.690\nyou don't have to memorize these just\nreference, three is a C library.\n\n305\n00:15:40.690 --> 00:15:43.920\nSo the C programming language,\n\n306\n00:15:43.920 --> 00:15:48.200\nfour are special file names,\nreserve file names on the system.\n\n307\n00:15:48.200 --> 00:15:50.610\nFive are file formats, right?\n\n308\n00:15:50.610 --> 00:15:51.206\nPasswd is a file.\n\n309\n00:15:51.206 --> 00:15:55.393\nIt has a particular format and this\ndocument shows me what that format is.\n\n310\n00:15:55.393 --> 00:15:56.930\nSix are games.\n\n311\n00:15:56.930 --> 00:15:59.471\nThere's actually a whole\nseparate section for games.\n\n312\n00:15:59.471 --> 00:16:05.120\nSeven is word processing, and\neight is system administration commands.\n\n313\n00:16:05.120 --> 00:16:10.070\nAnd so if I look down here, update-passwd,\nthat one's got an eight, that one\n\n314\n00:16:10.070 --> 00:16:14.410\nis a system administration command, not\nnecessarily an end user command, right?\n\n315\n00:16:14.410 --> 00:16:18.100\nSo they have these different numbers\nattached to them, and so when I look at\n\n316\n00:16:18.100 --> 00:16:24.150\npasswd, if I run man passwd I'm seeing\nthe manual page for the command.\n\n317\n00:16:24.150 --> 00:16:29.200\nIf I run man five passwd,\nI'll see the page for\n\n318\n00:16:29.200 --> 00:16:34.920\nthe passwd file, and now it's showing\nme what the format of that file is.\n\n319\n00:16:34.920 --> 00:16:42.010\nBecause if you go and take a look at\nthat file, each line represents a user.\n\n320\n00:16:42.010 --> 00:16:46.650\nAnd inside each line, you've got a name,\nfollowed by something,\n\n321\n00:16:46.650 --> 00:16:48.360\nfollowed by something,\nfollowed by something.\n\n322\n00:16:48.360 --> 00:16:49.670\nWhat are all these somethings?\n\n323\n00:16:49.670 --> 00:16:50.290\nRight?\n\n324\n00:16:50.290 --> 00:16:51.740\nWell, if you got them memorized,\nthen you know.\n\n325\n00:16:51.740 --> 00:16:54.750\nBut if you don't have them memorized, what\nthe heck do each of these values mean?\n\n326\n00:16:54.750 --> 00:16:59.170\nWell, you go back over here,\nto your man page and it tells you.\n\n327\n00:16:59.170 --> 00:17:00.970\nThe first one is the login name.\n\n328\n00:17:00.970 --> 00:17:04.230\nThe second one is an optional\nencrypted password.\n\n329\n00:17:04.230 --> 00:17:07.060\nPasswords aren't stored in passwd anymore\nthey're stored in a separate file, so\n\n330\n00:17:07.060 --> 00:17:08.170\nthat's why it's optional.\n\n331\n00:17:08.170 --> 00:17:11.060\nThen the numerical user ID followed\nby the numerical group ID.\n\n332\n00:17:11.060 --> 00:17:14.381\nAnd then it's telling me what\neach of those fields are.\n\n333\n00:17:14.381 --> 00:17:17.280\nAnd then it tells me the encrypted\npassword field may be blank.\n\n334\n00:17:17.280 --> 00:17:19.760\nIn which case,\nthere's no password required or\n\n335\n00:17:19.760 --> 00:17:21.160\nit might be stored in a different file.\n\n336\n00:17:21.160 --> 00:17:23.010\nRight, it's stored in a shadow file now.\n\n337\n00:17:23.010 --> 00:17:27.330\nIt gives me all the information\nI want about that file and\n\n338\n00:17:27.330 --> 00:17:30.180\nthen it shows me other files\nthat I might care about.\n\n339\n00:17:30.180 --> 00:17:33.247\nPasswd is the file where my\nuser account information is but\n\n340\n00:17:33.247 --> 00:17:37.512\nthe passwords are now stored in shadow so\nit's telling me about the shadow file.\n\n341\n00:17:37.512 --> 00:17:40.602\nAnd then it's saying also there's\na passwd followed by a dash,\n\n342\n00:17:40.602 --> 00:17:42.580\nyou might have noticed that file.\n\n343\n00:17:42.580 --> 00:17:45.480\nThat's a backup of passwd.\n\n344\n00:17:45.480 --> 00:17:49.240\nSo it's giving me that, and\nany other related commands down here, and\n\n345\n00:17:49.240 --> 00:17:52.820\nsee how some of them have one's after it,\nsome have three's, some have eight.\n\n346\n00:17:52.820 --> 00:17:55.670\nEach one indicating\na different type of something.\n\n347\n00:17:55.670 --> 00:17:56.810\nIt's not necessarily a command.\n\n348\n00:17:56.810 --> 00:18:01.990\nIt might be a C library or\na file format or\n\n349\n00:18:01.990 --> 00:18:05.080\nsomething like that, and\nthey'll each have documentation in there.\n\n350\n00:18:05.080 --> 00:18:10.740\nSo man-k is how we find\nthose alternate versions,\n\n351\n00:18:10.740 --> 00:18:13.400\nthose alternate documents\nbuilt around something.\n\n352\n00:18:13.400 --> 00:18:15.740\nAnd if I take a game like,\nlike I'll do a nethack.\n\n353\n00:18:17.330 --> 00:18:23.080\nSo nethack is a command line game and\nsee how it's got that category of six?\n\n354\n00:18:23.080 --> 00:18:25.420\nBecause it's a game,\nit's in that separate area.\n\n355\n00:18:25.420 --> 00:18:28.620\nIf I just do man nethack,\nits the only response.\n\n356\n00:18:28.620 --> 00:18:33.050\nSo is going to show me nethack six,\nright so that's what gonna come up but\n\n357\n00:18:33.050 --> 00:18:35.700\nI could have done man six nethack.\n\n358\n00:18:35.700 --> 00:18:39.797\nYou really don't have to remember the\nnumber if there is more than one instance,\n\n359\n00:18:39.797 --> 00:18:43.773\nif there is a duplicate and that does\nhappen quite where there is duplicates and\n\n360\n00:18:43.773 --> 00:18:46.562\nyou've got to to be able to\nidentify that and find out.\n\n361\n00:18:46.562 --> 00:18:51.666\nWhich one, in nethack, it's a command\nline game, but it's actually really,\n\n362\n00:18:51.666 --> 00:18:56.412\nreally difficult to remember all the keys\nand commands and all that stuff.\n\n363\n00:18:56.412 --> 00:18:59.980\nLike I can't even remember how to\nmove one direction versus another,\n\n364\n00:18:59.980 --> 00:19:01.100\nthere we go Y, K, U.\n\n365\n00:19:01.100 --> 00:19:05.600\nSo you can come through and\nI don't know, do something.\n\n366\n00:19:05.600 --> 00:19:06.454\nI'm screwing this up, so let me get out.\n\n367\n00:19:06.454 --> 00:19:10.070\n&gt;&gt; So [LAUGH]\n&gt;&gt; So, we'll get out of that, there we go,\n\n368\n00:19:10.070 --> 00:19:13.219\nand you can read the help documentation,\nfigure out how to play the game, and\n\n369\n00:19:13.219 --> 00:19:15.340\nthen you won't die in\ntwo moves like I did.\n\n370\n00:19:15.340 --> 00:19:19.980\nSo that's all tucked away,\nreally useful stuff.\n\n371\n00:19:19.980 --> 00:19:24.900\nI mentioned the tar command, right,\nand tar --help had a lot but if we do,\n\n372\n00:19:24.900 --> 00:19:29.110\nor we pull the actual tar documentation,\n\n373\n00:19:29.110 --> 00:19:30.550\nyou'll see there's only\nthe one instance of it.\n\n374\n00:19:30.550 --> 00:19:32.563\nAnd if we take a look there,\n\n375\n00:19:32.563 --> 00:19:37.919\nit is a lot of information that is piled\nin here on how that command works.\n\n376\n00:19:37.919 --> 00:19:41.170\nI'm still hitting space,\nhow many pages have we gone through?\n\n377\n00:19:41.170 --> 00:19:44.149\nThis is really,\nreally exhaustive documentation.\n\n378\n00:19:45.300 --> 00:19:49.260\nWhen you're in these pages its\nactually using the less command.\n\n379\n00:19:49.260 --> 00:19:51.320\nSo that means you can search through it.\n\n380\n00:19:51.320 --> 00:19:56.270\nAnd that can be really handy cuz,\nif I'm trying to extract information,\n\n381\n00:19:56.270 --> 00:20:00.773\nthen what I can do is I can pull up a man\npage and if just type a forward slash,\n\n382\n00:20:00.773 --> 00:20:02.250\nyou can type the word your looking for.\n\n383\n00:20:02.250 --> 00:20:07.200\nI'm looking for extract and I can run\nthat and it'll jump down and fin extract.\n\n384\n00:20:07.200 --> 00:20:09.610\nRight, and if I wanna search for\nextract again,\n\n385\n00:20:09.610 --> 00:20:10.750\nmaybe this isn't the instance I want.\n\n386\n00:20:10.750 --> 00:20:12.858\nI can just hit slash and press enter, and\n\n387\n00:20:12.858 --> 00:20:16.764\nevery time you run slash it's just\nlooking for that same word again, and so\n\n388\n00:20:16.764 --> 00:20:19.813\nI can keep looking and\ngoing through and trying to find it.\n\n389\n00:20:19.813 --> 00:20:27.830\nIf you do a sort of question mark\nthat goes the other direction, yeah.\n\n390\n00:20:28.970 --> 00:20:32.760\nThe forward slash searches forward,\nso down the document.\n\n391\n00:20:32.760 --> 00:20:34.950\nQuestion marks are searches\nup back up the document.\n\n392\n00:20:34.950 --> 00:20:37.071\nSo the easy way to remember\nthat is that slash and\n\n393\n00:20:37.071 --> 00:20:39.776\nquestion mark are usually on\nthe same key on the keyboard, so\n\n394\n00:20:39.776 --> 00:20:42.122\nyou know you hit shift and\nslash that searches back.\n\n395\n00:20:42.122 --> 00:20:45.018\nCuz sometimes you pass something and\noops, you gotta go back, and\n\n396\n00:20:45.018 --> 00:20:46.230\nthat's how you go back up.\n\n397\n00:20:46.230 --> 00:20:49.490\nBut you can navigate through and\nfind things, definitely makes life easy.\n\n398\n00:20:49.490 --> 00:20:52.230\nEspecially, if you're like me,\nand you get into this thing,\n\n399\n00:20:52.230 --> 00:20:53.670\nand you know it's a big document.\n\n400\n00:20:53.670 --> 00:20:56.590\nSo you know what,\nI just want to find examples really quick.\n\n401\n00:20:57.670 --> 00:21:00.602\nDo be careful when searching for words\nin there, cuz they're case-sensitive.\n\n402\n00:21:00.602 --> 00:21:02.590\nSo like if I'm searching for examples,\n\n403\n00:21:02.590 --> 00:21:08.270\na lot of times what I'll do\nis I'll search for examples.\n\n404\n00:21:08.270 --> 00:21:09.480\nI'll leave the first letter off.\n\n405\n00:21:09.480 --> 00:21:12.260\nThat way, capital E and\nlowercase e will be found.\n\n406\n00:21:12.260 --> 00:21:13.656\nThis is actually a regular expression, so\n\n407\n00:21:13.656 --> 00:21:16.156\nI could do a regular expression that\nsays look for capital E and lowercase e.\n\n408\n00:21:16.156 --> 00:21:17.906\nIt's easier just to leave it off.\n\n409\n00:21:17.906 --> 00:21:19.777\n&gt;&gt; [LAUGH]\n&gt;&gt; And now, it will jump through, and\n\n410\n00:21:19.777 --> 00:21:22.693\nI can find any instance of that word,\nwhich apparently,\n\n411\n00:21:22.693 --> 00:21:24.210\nI'm just finding the one?\n\n412\n00:21:24.210 --> 00:21:24.720\nThat seems odd.\n\n413\n00:21:27.670 --> 00:21:30.400\n&gt;&gt; You put an S on it,\nmaybe there's not that many plural.\n\n414\n00:21:30.400 --> 00:21:31.370\n&gt;&gt; Yeah, that might do it.\n\n415\n00:21:31.370 --> 00:21:33.660\nBut anyhow, so you can jump in,\nyou can find that information.\n\n416\n00:21:33.660 --> 00:21:35.330\nDefinitely a handy thing to do.\n\n417\n00:21:35.330 --> 00:21:36.790\nDon't shy away from these man pages.\n\n418\n00:21:36.790 --> 00:21:40.690\nAs you're learning all these commands,\nthese are incredibly useful,\n\n419\n00:21:40.690 --> 00:21:42.110\nit's really gonna help out.\n\n420\n00:21:42.110 --> 00:21:45.150\nIf you're just in a hurry,\nyou can try --help, and\n\n421\n00:21:45.150 --> 00:21:48.780\nyou might find exactly what you want right\nthere, but it's not gonna be exhaustive.\n\n422\n00:21:48.780 --> 00:21:53.760\nIf you wanna really learn how a command\nworks, the manual pages are the way to go.\n\n423\n00:21:53.760 --> 00:21:56.821\nAnd oftentimes, when you go to\nthe various websites for register,\n\n424\n00:21:56.821 --> 00:22:00.582\nyou won't find great documentation because\nthey know the man pages are there, and\n\n425\n00:22:00.582 --> 00:22:04.010\nthey've got a ton of data\ntucked away inside of them.\n\n426\n00:22:04.010 --> 00:22:05.860\n&gt;&gt; All right, Don,\nthat's great stuff there.\n\n427\n00:22:05.860 --> 00:22:10.100\nHow I can get help with commands and\neverything else within Linux.\n\n428\n00:22:10.100 --> 00:22:12.180\nI've got you here, I'm lucky.\n\n429\n00:22:12.180 --> 00:22:15.460\nWhen you're not around though, now I\nknow I can go into my man commands and\n\n430\n00:22:15.460 --> 00:22:17.380\npull out those man pages.\n\n431\n00:22:17.380 --> 00:22:20.640\nWe appreciate that, Don, we hope\neveryone out there enjoyed this one.\n\n432\n00:22:20.640 --> 00:22:23.520\nSigning off for ITPro.TV,\nI've been your host, Mike Roderick.\n\n433\n00:22:23.520 --> 00:22:24.096\n&gt;&gt; And I'm Don Pezet.\n\n434\n00:22:24.096 --> 00:22:26.433\n&gt;&gt; And we'll see you next time.\n\n435\n00:22:26.433 --> 00:22:32.422\n[MUSIC]\n\n436\n00:22:32.422 --> 00:22:35.126\nThank you for watching ITPro.TV.\n\n",
          "vimeoId": "222188655"
        }
      ],
      "title": "Using the Shell"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Don and Mike take a look at the Linux filesystem hierarchy. They look at the key folders and explain there purpose.",
          "length": "1930",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-1-filesystem_hierarchy-061617-PGM.00_31_55_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-1-filesystem_hierarchy-061617-PGM.00_31_55_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-1-filesystem_hierarchy-061617-PGM.00_31_55_07.Still001-sm.jpg",
          "title": "Filesystem Hierarchy",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.078\nWelcome to ITProTV.\n\n2\n00:00:01.078 --> 00:00:02.311\nI'm your host, Don Pezet.\n\n3\n00:00:02.311 --> 00:00:06.705\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:06.705 --> 00:00:08.425\n[MUSIC]\n\n5\n00:00:08.425 --> 00:00:12.258\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.258 --> 00:00:15.928\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n7\n00:00:15.928 --> 00:00:20.200\nI'm your host Mike Rodrick, and today\nwe/re doing become a Linux power user.\n\n8\n00:00:20.200 --> 00:00:24.442\nSpecifically in this episode, we're gonna\nbe taking a look at the file system\n\n9\n00:00:24.442 --> 00:00:27.020\nhierarchy in a Linux operating system.\n\n10\n00:00:27.020 --> 00:00:31.280\nHere to guide us through this\nincredible maze is Mr. Don Pezet.\n\n11\n00:00:31.280 --> 00:00:32.110\nWelcome, Don.\n\n12\n00:00:32.110 --> 00:00:35.540\n&gt;&gt; Hey, thank you, Mike, and\nit is a good bit of a maze.\n\n13\n00:00:35.540 --> 00:00:38.410\nThe way that Unix and\nLinux file system is defined\n\n14\n00:00:38.410 --> 00:00:43.242\nhas not really changed all that much from\nhow it was defined back in the 1970s.\n\n15\n00:00:43.242 --> 00:00:47.550\nAnd that's not really user friendly.\n\n16\n00:00:47.550 --> 00:00:50.215\nAnd so a lot distributions have\ndone things to improve that,\n\n17\n00:00:50.215 --> 00:00:51.791\nto make it easier for people to use.\n\n18\n00:00:51.791 --> 00:00:55.125\nBut as soon as you get out from\nunder the shield of your distro,\n\n19\n00:00:55.125 --> 00:00:57.946\nyou'll see there's a lot of random,\nI say random,\n\n20\n00:00:57.946 --> 00:01:02.290\nwhat appears to be random stuff on\nthe hard drive that's actually important.\n\n21\n00:01:02.290 --> 00:01:03.750\nThat serves a particular purpose.\n\n22\n00:01:03.750 --> 00:01:07.460\nSo we're going to basically run through\nsome of that directory structure and let\n\n23\n00:01:07.460 --> 00:01:12.140\nyou guys know what exactly each piece does\nand why it's there, and when it gets used.\n\n24\n00:01:12.140 --> 00:01:14.080\nThat's all good information to know.\n\n25\n00:01:14.080 --> 00:01:17.600\nAs opposed to just trying to guess based\non some weird combination of letters-\n\n26\n00:01:17.600 --> 00:01:18.460\n&gt;&gt; [LAUGH] Right?\n\n27\n00:01:18.460 --> 00:01:20.575\n&gt;&gt; Somebody picked in 1979,\nwhich happens all too often.\n\n28\n00:01:20.575 --> 00:01:22.222\n&gt;&gt; [LAUGH]\n&gt;&gt; So that's our plan for this episode.\n\n29\n00:01:22.222 --> 00:01:23.816\n[LAUGH]\n&gt;&gt; All right, sounds good.\n\n30\n00:01:23.816 --> 00:01:27.750\nSo it's a little different from\nif you're a Windows person.\n\n31\n00:01:27.750 --> 00:01:30.250\nIt's really not arranged the same way,\nis it?\n\n32\n00:01:30.250 --> 00:01:31.020\n&gt;&gt; Yeah, you know what?\n\n33\n00:01:31.020 --> 00:01:35.106\nOn a Windows hard drive you have,\nwhat, two folders that are important,\n\n34\n00:01:35.106 --> 00:01:37.350\nC:/Windows and C:/Program Files.\n\n35\n00:01:37.350 --> 00:01:39.780\nEverything else you can delete and\nit doesn't really matter.\n\n36\n00:01:39.780 --> 00:01:41.147\nWell, in the Unix world,\nit's not like that.\n\n37\n00:01:41.147 --> 00:01:42.810\nWe've got a ton of stuff.\n\n38\n00:01:42.810 --> 00:01:47.990\nFirst off, there is no C:, so\nhard drives aren't given letters at all.\n\n39\n00:01:47.990 --> 00:01:50.360\nEverything is just represented as a file.\n\n40\n00:01:50.360 --> 00:01:54.050\nAnd that's actually one of the tenats of\nUnix that goes way back to the 1970s,\n\n41\n00:01:54.050 --> 00:01:57.300\nis that when they created\nthe original Unix,\n\n42\n00:01:57.300 --> 00:02:02.160\nthey wanted everything to be\naddressable as a file, right?\n\n43\n00:02:02.160 --> 00:02:04.880\nThat means if you have a file,\nit's a file.\n\n44\n00:02:04.880 --> 00:02:06.980\nIf you have a folder,\nit shows up as a file.\n\n45\n00:02:06.980 --> 00:02:10.850\nIf you have a sound card or\na video card, it shows up as a file.\n\n46\n00:02:10.850 --> 00:02:14.030\nIf there's a running process,\nit shows up as a file.\n\n47\n00:02:14.030 --> 00:02:15.613\nEverything shows up as a file.\n\n48\n00:02:15.613 --> 00:02:16.960\nWell, not everything.\n\n49\n00:02:16.960 --> 00:02:19.420\nCertain things like memory blocks,\nthey don't show up as files.\n\n50\n00:02:19.420 --> 00:02:23.080\nThere's another operating system out there\ncalled Plan 9, which is actually from\n\n51\n00:02:23.080 --> 00:02:29.010\nBell Labs also, that they went extreme and\nliterally everything shows up as a file.\n\n52\n00:02:29.010 --> 00:02:31.230\nBut in Unix most things do.\n\n53\n00:02:31.230 --> 00:02:33.520\nAnd because most things\nare showing up as a file,\n\n54\n00:02:33.520 --> 00:02:36.370\nthat's what creates\nthe complexity in our file system.\n\n55\n00:02:36.370 --> 00:02:38.690\nA regular user is shielded from this,\nright?\n\n56\n00:02:38.690 --> 00:02:41.150\nLet me show you my user account.\n\n57\n00:02:41.150 --> 00:02:43.022\nSo if I go into my computer, and\n\n58\n00:02:43.022 --> 00:02:46.890\nI fire up my file manager,\nIt takes me to my home directory.\n\n59\n00:02:46.890 --> 00:02:51.080\nInto my home directory, I see, well some\nof the junk I put in there, I guess.\n\n60\n00:02:51.080 --> 00:02:54.208\nBut I see some standard things\nlike desktop, documents,\n\n61\n00:02:54.208 --> 00:02:57.635\ndownloads, examples,\nmusic, pictures, public.\n\n62\n00:02:57.635 --> 00:02:58.715\nThat stuff makes sense.\n\n63\n00:02:59.865 --> 00:03:02.055\nMusic, I wonder what's in that folder?\n\n64\n00:03:02.055 --> 00:03:03.005\nWe understand.\n\n65\n00:03:03.005 --> 00:03:04.285\nWe know what those things are.\n\n66\n00:03:04.285 --> 00:03:05.705\nIt's not a big deal.\n\n67\n00:03:05.705 --> 00:03:10.747\nAnd they're even written nicely,\nwith the capital first letter.\n\n68\n00:03:10.747 --> 00:03:13.433\nAnd in the Unix world,\neverything's normally lower case, so\n\n69\n00:03:13.433 --> 00:03:16.510\nthat's not what you normally see,\nthese capital letters.\n\n70\n00:03:16.510 --> 00:03:18.870\nThat's written as kid gloves, right.\n\n71\n00:03:18.870 --> 00:03:22.530\nThey're protecting the end user from\nthe complexity behind the system.\n\n72\n00:03:22.530 --> 00:03:24.030\nThey wanna make it easy.\n\n73\n00:03:24.030 --> 00:03:28.250\nBut if you just browse outside of that, if\nyou browse outside of your home folders.\n\n74\n00:03:28.250 --> 00:03:30.860\nSo for example,\nif I go to other locations and\n\n75\n00:03:30.860 --> 00:03:36.300\nI'll browse right into my computer,\nnow I'm in the root of my computer.\n\n76\n00:03:36.300 --> 00:03:41.280\nAnd in the root, you can see all\nsorts of really interesting folders\n\n77\n00:03:41.280 --> 00:03:43.210\nthat are meaningless to most people,\nright?\n\n78\n00:03:43.210 --> 00:03:45.700\nMost people look at it and they see dev.\n\n79\n00:03:45.700 --> 00:03:46.560\nWhat is that?\n\n80\n00:03:46.560 --> 00:03:49.658\nBoot, CDROM, I don't even have\na CDROM in this computer, right?\n\n81\n00:03:49.658 --> 00:03:53.010\nAnd you see these folders and\nthey don't mean anything.\n\n82\n00:03:53.010 --> 00:03:54.350\nBut they are important.\n\n83\n00:03:54.350 --> 00:03:55.620\nIt's not that they're unimportant.\n\n84\n00:03:55.620 --> 00:03:59.810\nThey all serve a purpose\nif you know what it is.\n\n85\n00:03:59.810 --> 00:04:02.140\nAnd a regular user doesn't have to\nmess with them, but as a power user,\n\n86\n00:04:02.140 --> 00:04:05.060\nthere will be times you've got to go into\nthese folders and tinker around a bit.\n\n87\n00:04:05.060 --> 00:04:07.900\nSo we'll kind of browse through and\ntake a look at these.\n\n88\n00:04:07.900 --> 00:04:11.420\nBut the majority of these\nare created automatically.\n\n89\n00:04:11.420 --> 00:04:18.778\nThey're created as part of the Linux\nFilesystem Hierarchy Standard, the FHS.\n\n90\n00:04:18.778 --> 00:04:22.740\nAnd Red Hat, Ubuntu, Debian,\nseveral distros are all\n\n91\n00:04:22.740 --> 00:04:26.520\npart of this alliance that says, we're\ngonna follow this filesystem hierarchy.\n\n92\n00:04:26.520 --> 00:04:28.610\nAnd it's important they do.\n\n93\n00:04:28.610 --> 00:04:30.810\nBecause let's say you're a developer and\nyou wanna write a program.\n\n94\n00:04:30.810 --> 00:04:34.160\nAnd your program needs to store\nconfiguration files somewhere.\n\n95\n00:04:34.160 --> 00:04:37.030\nWell, you don't wanna it to go out and\nresearch 80 different distros to\n\n96\n00:04:37.030 --> 00:04:39.080\nfigure out where they all store\ntheir different config files, and\n\n97\n00:04:39.080 --> 00:04:41.970\nso what would happen is those\ndevelopers would say forget it.\n\n98\n00:04:41.970 --> 00:04:45.540\nI'm just gonna support the most\npopular distro and that's it, right?\n\n99\n00:04:45.540 --> 00:04:50.915\nAnd that hurts innovation, right, it\nhurts new distros that are just starting.\n\n100\n00:04:50.915 --> 00:04:55.175\nSo by following a standard file system\nhierarchy, now a developer can write\n\n101\n00:04:55.175 --> 00:04:59.395\nan application once and know, hey, if I\nput my config files in /etc, that's gonna\n\n102\n00:04:59.395 --> 00:05:04.665\nexist on all these other distros out there\n.And it makes things work a lot nicer.\n\n103\n00:05:04.665 --> 00:05:07.515\nSo in Linux,\nyou've got the freedom to change.\n\n104\n00:05:07.515 --> 00:05:10.820\nAny distro could choose not to\nfollow the file system hierarchy.\n\n105\n00:05:10.820 --> 00:05:11.350\nBut if they do,\n\n106\n00:05:11.350 --> 00:05:15.380\nit's really gonna hurt their ability to\nhave developers writing software for them.\n\n107\n00:05:15.380 --> 00:05:17.680\nSo most of them follow\na standard hierarchy.\n\n108\n00:05:17.680 --> 00:05:21.980\nSo everything I'm about to show you\nis going to be pretty much the same\n\n109\n00:05:21.980 --> 00:05:26.630\non Red Hat, Ubuntu, Debian, Mint, whatever\ndistro flavor of the day you're running.\n\n110\n00:05:26.630 --> 00:05:29.146\nThey all follow the same kind of standard.\n\n111\n00:05:29.146 --> 00:05:32.260\nAll right,\nI am gonna dump out of the GUI, though.\n\n112\n00:05:32.260 --> 00:05:34.560\nLet me get into my terminal, whoops,\n\n113\n00:05:34.560 --> 00:05:38.786\nnot that terminal, one of my\nassorted collection of terminals.\n\n114\n00:05:38.786 --> 00:05:42.352\nAnd I wanna kinda walk through the file\nsystem and some of the files and\n\n115\n00:05:42.352 --> 00:05:45.565\nfolders that are important and\nsome that are less important.\n\n116\n00:05:45.565 --> 00:05:49.472\nBut if we just take a look at\nour root directory, all right,\n\n117\n00:05:49.472 --> 00:05:51.680\nwe see a lot of stuff in here.\n\n118\n00:05:51.680 --> 00:05:55.823\nNow I have got this colorized right now,\nso you'll see a few things in light blue,\n\n119\n00:05:55.823 --> 00:05:58.781\nthose are files, and\nI've got initrd.img and vmlinuz.\n\n120\n00:05:58.781 --> 00:06:02.779\nThere's .old versions of both of those\nwhich just means that I've upgraded and\n\n121\n00:06:02.779 --> 00:06:04.970\nit backed up the previous version, right?\n\n122\n00:06:04.970 --> 00:06:08.309\nInitrd.img, that's the initial\nboot loading image.\n\n123\n00:06:08.309 --> 00:06:11.371\nWhen Ubuntu, for me, when it starts up,\n\n124\n00:06:11.371 --> 00:06:14.877\nthat initrd.img is\nactually copied into RAM.\n\n125\n00:06:14.877 --> 00:06:18.244\nAnd then it starts firing up all\nthe various services, and system.d, and\n\n126\n00:06:18.244 --> 00:06:21.220\nall the other things that\npower my distribution.\n\n127\n00:06:21.220 --> 00:06:26.142\nAnd then vmlinuz over here is actually\nwhat's tying into the Linux kernel.\n\n128\n00:06:26.142 --> 00:06:28.980\nAnd it is the heart of the system's up and\nrunning.\n\n129\n00:06:28.980 --> 00:06:30.780\nAnd Ubuntu chooses to\nstick those right here.\n\n130\n00:06:30.780 --> 00:06:33.060\nOther distros stick them\ninside of the boot folders, so\n\n131\n00:06:33.060 --> 00:06:36.510\nthey'll be kind of hidden away instead\nof sitting here right in the root.\n\n132\n00:06:36.510 --> 00:06:40.880\nDifferent distros handle that differently,\nbut the folders themselves,\n\n133\n00:06:40.880 --> 00:06:42.390\neverything in dark blue,\n\n134\n00:06:42.390 --> 00:06:45.840\nthat's where we start getting the things\nthat are a lot more standard, okay?\n\n135\n00:06:45.840 --> 00:06:49.090\nAnd they're listed here alphabetically, so\nI'll kinda go that way, but I'm gonna skip\n\n136\n00:06:49.090 --> 00:06:52.420\naround a bit cuz some of these files and\nfolders are related to each other.\n\n137\n00:06:52.420 --> 00:06:54.160\nSo I'll jump around a little bit.\n\n138\n00:06:54.160 --> 00:06:57.140\nBut starting right here at\nthe beginning is bin, right?\n\n139\n00:06:57.140 --> 00:07:02.250\nSo it would just be cd /bin for\nthe bin folder.\n\n140\n00:07:02.250 --> 00:07:03.850\nBin is short for binary.\n\n141\n00:07:03.850 --> 00:07:06.210\nAnd binary usually means a program.\n\n142\n00:07:06.210 --> 00:07:07.240\nAnd that's exactly what this means.\n\n143\n00:07:07.240 --> 00:07:10.970\nThis is a folder that's gonna store\nprograms, but not just any programs.\n\n144\n00:07:10.970 --> 00:07:14.020\nThese are programs that are installed\nas part of the operating system and\n\n145\n00:07:14.020 --> 00:07:16.500\nthat are critical to\nthe operating system functioning.\n\n146\n00:07:16.500 --> 00:07:19.011\nThese are things that we really,\nreally need to have, right?\n\n147\n00:07:19.011 --> 00:07:23.339\nAnd so if you browse into that folder and\nyou pull up a listing of what's in there,\n\n148\n00:07:23.339 --> 00:07:25.885\nyou'll see a lot of\nreally interesting stuff,\n\n149\n00:07:25.885 --> 00:07:28.510\na lot of commands that you\nrun on a regular basis.\n\n150\n00:07:28.510 --> 00:07:30.740\nLike there's cp, the copy command.\n\n151\n00:07:30.740 --> 00:07:33.350\nJust doing a basic copy or move.\n\n152\n00:07:33.350 --> 00:07:36.270\nMost of our file system commands\nare located right in here.\n\n153\n00:07:36.270 --> 00:07:39.330\nThe echo command that we've\nbeen using in several episodes.\n\n154\n00:07:39.330 --> 00:07:42.670\nThose are there, and they're considered\ncritical to the operating system working.\n\n155\n00:07:42.670 --> 00:07:44.870\nI've got to have those.\n\n156\n00:07:44.870 --> 00:07:50.640\nThere is a similar folder to bin\nwhich is called Sbin, all right?\n\n157\n00:07:50.640 --> 00:07:54.042\nAnd Sbin also has binaries in it, right?\n\n158\n00:07:54.042 --> 00:07:55.985\nSo these are our support binaries.\n\n159\n00:07:55.985 --> 00:07:59.780\nAnd if you take a look in here, you'll\nsee, again, a lot of interesting programs\n\n160\n00:07:59.780 --> 00:08:02.585\nThese are ones that are installed\nas part of the system also,\n\n161\n00:08:02.585 --> 00:08:04.540\nbut they're not critical.\n\n162\n00:08:04.540 --> 00:08:05.800\nI could get rid of some of these, and\n\n163\n00:08:05.800 --> 00:08:09.390\nit might break something, but\nthe operating system would still work.\n\n164\n00:08:09.390 --> 00:08:14.800\nSo for example here, WPA, action,\nCLI, and supplicant, those\n\n165\n00:08:14.800 --> 00:08:20.390\nare all used when we connect to a wireless\nnetwork that uses WPA encryption or WPA2.\n\n166\n00:08:20.390 --> 00:08:25.900\nWell, if I delete those I can join\na wireless network with WPA2, all right?\n\n167\n00:08:25.900 --> 00:08:27.620\nBut my operating system still works.\n\n168\n00:08:27.620 --> 00:08:29.810\nI can still boot up,\nI can still run programs, right?\n\n169\n00:08:29.810 --> 00:08:31.120\nSo it's not critical.\n\n170\n00:08:31.120 --> 00:08:34.610\nIt's important, but it's not critical,\nand those things go into S bin.\n\n171\n00:08:35.650 --> 00:08:36.600\nNow, slash bin and\n\n172\n00:08:36.600 --> 00:08:40.290\nslash S bin will be fully populated\nwhen you install your operating system.\n\n173\n00:08:40.290 --> 00:08:43.300\nAnd you rarely if ever touch them right?\n\n174\n00:08:43.300 --> 00:08:45.640\nUsually they only get touched when\nyou upgrade your operating system.\n\n175\n00:08:45.640 --> 00:08:49.100\nSo if I upgrade it might update those and\nadd some stuff to it.\n\n176\n00:08:49.100 --> 00:08:52.810\nOr if I'm installing official\npackages from my distribution.\n\n177\n00:08:52.810 --> 00:08:55.630\nThey'll add things in there occasionally,\nbut for\n\n178\n00:08:55.630 --> 00:08:58.940\nthe most part, /bin and /sbin don't\nget messed with all that much, right.\n\n179\n00:09:00.890 --> 00:09:06.660\nInstead, there's a second copy of both of\nthese folders inside of another folder.\n\n180\n00:09:06.660 --> 00:09:11.270\nHere's what they, they all get related, so\nif I go back to my root folder and look,\n\n181\n00:09:11.270 --> 00:09:16.680\nso I was just talking about bin and,\nsbin, right?\n\n182\n00:09:16.680 --> 00:09:19.590\nThere's another folder in here called usr.\n\n183\n00:09:19.590 --> 00:09:20.800\nUsr, right there.\n\n184\n00:09:20.800 --> 00:09:22.570\nAnd that's short for user.\n\n185\n00:09:22.570 --> 00:09:24.900\nAnd these are user binaries.\n\n186\n00:09:24.900 --> 00:09:26.910\nNot just binaries,\nthere's other things in here too, but\n\n187\n00:09:26.910 --> 00:09:28.850\nthis is user stuff, how about that?\n\n188\n00:09:28.850 --> 00:09:33.310\nSo, now when we install things,\nthey'll go in USR.\n\n189\n00:09:33.310 --> 00:09:37.697\nAnd so if I go into that USR folder and\ntake a look,\n\n190\n00:09:37.697 --> 00:09:43.120\nI'll find another bin folder and\nanother S bin folder.\n\n191\n00:09:43.120 --> 00:09:47.540\nSo, /user /bin, and /user / s bin.\n\n192\n00:09:47.540 --> 00:09:49.570\nThese are programs that we've installed.\n\n193\n00:09:49.570 --> 00:09:53.010\nIts not part of the base operating system,\nalthough it might be from the vendor so it\n\n194\n00:09:53.010 --> 00:09:56.424\nmight be something I got from Ubuntu but\nits not part of the base operating system.\n\n195\n00:09:56.424 --> 00:10:01.510\nSo its not considered necessary or\neven useful as far as the OS is concerned.\n\n196\n00:10:01.510 --> 00:10:04.790\nBut that we've installed and added on.\n\n197\n00:10:04.790 --> 00:10:06.870\nAnd here you'll find things change a lot.\n\n198\n00:10:06.870 --> 00:10:13.170\nNow, technically, this is the official\nstandard, the slash USR folder,\n\n199\n00:10:13.170 --> 00:10:16.030\nis supposed to be mounted read only,\nin other words we never change it.\n\n200\n00:10:16.030 --> 00:10:18.680\nYou got files in here\nthat users make use of,\n\n201\n00:10:18.680 --> 00:10:22.140\nthe regular users not the administrators\nand that it doesnt get changed.\n\n202\n00:10:22.140 --> 00:10:25.081\nBut not every distro does that,\nyou will find many distros where\n\n203\n00:10:25.081 --> 00:10:27.872\nwhen you install programs they\ngo right here into slash USR.\n\n204\n00:10:27.872 --> 00:10:34.200\nNow, you might ask yourself, if this is\nread only, how would I install programs?\n\n205\n00:10:34.200 --> 00:10:36.940\nWell, there's yet\nanother folder that gets tied into that.\n\n206\n00:10:36.940 --> 00:10:37.940\nAnd let's see if I have that.\n\n207\n00:10:37.940 --> 00:10:40.300\nI can't remember if I do or not.\n\n208\n00:10:40.300 --> 00:10:43.890\nThere is a folder,\nhere it is, opt, right, opt.\n\n209\n00:10:43.890 --> 00:10:45.820\nThis is optional software.\n\n210\n00:10:45.820 --> 00:10:48.760\nIn the official standard,\nit is listed as add-on software.\n\n211\n00:10:48.760 --> 00:10:54.050\nSo for a regular user when they install\nadditional, if we were following the FHS,\n\n212\n00:10:54.050 --> 00:10:59.370\nthe Filesystem Hierarchy Standard,\nto the letter slash bin and slash\n\n213\n00:10:59.370 --> 00:11:02.990\nsbin would be operating system commands\ndesigned for administrators, right?\n\n214\n00:11:02.990 --> 00:11:07.090\nSlash bin would be critical commands\nslash s bin would be non-critical.\n\n215\n00:11:07.090 --> 00:11:13.090\nAnd then inside of slash USR would be\nslash bin slash s bin that were commands\n\n216\n00:11:13.090 --> 00:11:17.740\nfor regular users not administrators, and\nit would be read only and not changeable.\n\n217\n00:11:17.740 --> 00:11:22.510\nAnd so then we would have this opt folder\nand the opt folder is optional and\n\n218\n00:11:22.510 --> 00:11:25.150\nthat's software that\nwe install afterwards.\n\n219\n00:11:25.150 --> 00:11:28.090\nAnd so when users install software\nthey would end up here in opt.\n\n220\n00:11:29.200 --> 00:11:31.010\nAnd not every distro has that.\n\n221\n00:11:31.010 --> 00:11:34.010\nBecause some distros\nmount USR as writeable.\n\n222\n00:11:34.010 --> 00:11:36.420\nAnd so they just install into that, right?\n\n223\n00:11:36.420 --> 00:11:39.870\nBut if they don't, then it'll go into opt.\n\n224\n00:11:39.870 --> 00:11:44.110\nAnd if we take a look inside of opt,\nthere's a lot less folders in here, right?\n\n225\n00:11:44.110 --> 00:11:45.610\nIn fact, I only see two.\n\n226\n00:11:45.610 --> 00:11:50.600\nI see a Google folder, because I installed\nGoogle Chrome and Google Remote Desktop.\n\n227\n00:11:50.600 --> 00:11:53.480\nSo if I go into that,\nI'll probably see two things.\n\n228\n00:11:53.480 --> 00:11:54.210\nWell no, just Chrome.\n\n229\n00:11:54.210 --> 00:11:54.880\nAll right.\n\n230\n00:11:54.880 --> 00:11:58.400\nThat's right I had to uninstall\nthe Chrome remote desktop.\n\n231\n00:11:58.400 --> 00:12:01.487\nSo anyhow, so I see Google Chrome and then\nthe other folder there is Sublime Text.\n\n232\n00:12:01.487 --> 00:12:04.340\nThat's the text editor I use all the time.\n\n233\n00:12:04.340 --> 00:12:08.150\nSo that's two software packages that I\ninstalled and there they are, right?\n\n234\n00:12:08.150 --> 00:12:09.850\nWell, Google Chrome, I had to go and\n\n235\n00:12:09.850 --> 00:12:13.550\ndownload from their website cause the one\nin Ubuntu's repository was outdated.\n\n236\n00:12:13.550 --> 00:12:17.120\nI wanted the current one and\nit went in the slash op like it should.\n\n237\n00:12:17.120 --> 00:12:18.200\nAnd sublime text.\n\n238\n00:12:18.200 --> 00:12:20.000\nI got that from their web page,\nbecause again,\n\n239\n00:12:20.000 --> 00:12:21.530\none of their repositories was outdated.\n\n240\n00:12:21.530 --> 00:12:24.500\nSo, it went in /opt like it should.\n\n241\n00:12:24.500 --> 00:12:27.230\nBut there's other software,\nwhere I've gone to a vendor's website, and\n\n242\n00:12:27.230 --> 00:12:31.620\ndownloaded it, and installed it, and\nit didn't necessarily go in here.\n\n243\n00:12:31.620 --> 00:12:34.980\nAnd so you may find it in /users/sbin.\n\n244\n00:12:34.980 --> 00:12:38.180\nAnd you go and you look and you find the\nsoftware that you've installed in here.\n\n245\n00:12:38.180 --> 00:12:39.650\nThat certainly happens.\n\n246\n00:12:39.650 --> 00:12:42.210\nI'm looking to see if I've done that or\nnot.\n\n247\n00:12:42.210 --> 00:12:45.860\nMost of this looks pretty,\npretty standard.\n\n248\n00:12:46.950 --> 00:12:49.218\nIt's hard to scan across a list like\nthis really fast and spot odd things.\n\n249\n00:12:49.218 --> 00:12:51.090\n&gt;&gt; [LAUGH]\n&gt;&gt; But everything looks pretty standard.\n\n250\n00:12:51.090 --> 00:12:54.674\nSo there are some programs that\ninstall on other weird places too or\n\n251\n00:12:54.674 --> 00:12:57.300\nthey will pop up where\nthey're not supposed to.\n\n252\n00:12:57.300 --> 00:12:59.090\nRemember, we have to think about our path.\n\n253\n00:12:59.090 --> 00:13:01.660\nWhen we run a program where does it\nlook to find those programs right.\n\n254\n00:13:01.660 --> 00:13:07.550\nSo if I echo my path and take a look,\nit's going to look in well,\n\n255\n00:13:07.550 --> 00:13:11.810\nI added this folder in one of\nthe earlier episodes so ignore that one.\n\n256\n00:13:11.810 --> 00:13:15.702\nBut /users/local/sbin,\nI haven't even talked about that one yet.\n\n257\n00:13:15.702 --> 00:13:22.918\n/users/local/bin, /user/sbin,\n/users/bin, regular sbin, regular bin.\n\n258\n00:13:22.918 --> 00:13:26.180\n/usr/games, that was important.\n\n259\n00:13:26.180 --> 00:13:28.250\nAnd then we have /snap/bin for\nSNAP packages.\n\n260\n00:13:28.250 --> 00:13:29.940\nYou won't normally see that one.\n\n261\n00:13:29.940 --> 00:13:31.850\nSo its looking in those locations.\n\n262\n00:13:31.850 --> 00:13:37.230\nIf a program installs somewhere else,\nlike /opt That's not in the path, right?\n\n263\n00:13:37.230 --> 00:13:41.430\nSo either I have to call that program with\nthe full path name and it's on I run it or\n\n264\n00:13:41.430 --> 00:13:42.690\nI need to come in and add that.\n\n265\n00:13:42.690 --> 00:13:46.106\nSo vendors have to be careful when they\ninstall outside of the standard paths, but\n\n266\n00:13:46.106 --> 00:13:47.400\nthey do it pretty frequently.\n\n267\n00:13:47.400 --> 00:13:50.732\nAnd you see a chrome and\nsublime text both outside of my path.\n\n268\n00:13:50.732 --> 00:13:54.860\nI can run either one of them,\nI've got them installed and\n\n269\n00:13:54.860 --> 00:13:57.010\nI run them with an icon.\n\n270\n00:13:57.010 --> 00:13:58.680\nSo like here's Sublime text.\n\n271\n00:13:58.680 --> 00:14:03.340\nIf I pull up the details for that well\nno it just takes me to the store page.\n\n272\n00:14:03.340 --> 00:14:05.370\nBut it is just calling\nit with the full path so\n\n273\n00:14:05.370 --> 00:14:09.850\nit doesn't matter that Sublime Text isn't\nfully in my path I can pull it up here and\n\n274\n00:14:09.850 --> 00:14:12.510\nyou can see what I was working on last.\n\n275\n00:14:12.510 --> 00:14:15.550\nSo that's basically how those work and\nwhere those programs are going.\n\n276\n00:14:15.550 --> 00:14:18.960\nNow there was slash user slash local also.\n\n277\n00:14:18.960 --> 00:14:23.520\n&gt;&gt; And for operating systems where\nthey mounted the file system.\n\n278\n00:14:23.520 --> 00:14:24.651\nAnd mount/user is read only.\n\n279\n00:14:24.651 --> 00:14:29.260\nA lot of them will\nmount/user/logo as writable.\n\n280\n00:14:29.260 --> 00:14:33.270\nAnd that way you're able to\ninstall applications in here.\n\n281\n00:14:33.270 --> 00:14:37.260\nAnd so you'll see another bin,\nanother s bin.\n\n282\n00:14:37.260 --> 00:14:39.140\nBut this key use a lot less frequently.\n\n283\n00:14:39.140 --> 00:14:40.780\nLet's see what all I have in there.\n\n284\n00:14:40.780 --> 00:14:43.830\nYeah, I've got just a handful\nof little programs in here.\n\n285\n00:14:43.830 --> 00:14:47.200\nO Drive, I actually installed O Drive not\ntoo long ago, so that one's showing up.\n\n286\n00:14:48.420 --> 00:14:50.530\nSee if I got anything else in here.\n\n287\n00:14:50.530 --> 00:14:53.160\nYeah, that's it, so\nnot much just made it into there.\n\n288\n00:14:53.160 --> 00:14:57.160\nSo typically, this is where things\nwould go if they thought that file or\n\n289\n00:14:57.160 --> 00:14:59.010\nfolder was writable, and\nit's already in the path, so\n\n290\n00:14:59.010 --> 00:15:02.230\nthey don't have to worry about\nbeing able to locate the command.\n\n291\n00:15:02.230 --> 00:15:04.860\nJust like local,\nthere's also a share folder.\n\n292\n00:15:04.860 --> 00:15:07.930\nAnd the idea here was local was\nsuppose to be applications that run\n\n293\n00:15:07.930 --> 00:15:10.920\non your machine,and share would\nbe applications that can be\n\n294\n00:15:10.920 --> 00:15:13.450\nshared across multiple\nmachines on a network, right?\n\n295\n00:15:13.450 --> 00:15:16.250\nBut these days, pretty much\neverything can run over the network,\n\n296\n00:15:16.250 --> 00:15:19.990\nso we don't normally differentiate\nbetween those anymore.\n\n297\n00:15:19.990 --> 00:15:23.200\nBut you will see that local and\nshared folder from time to time.\n\n298\n00:15:24.440 --> 00:15:26.430\nAll right, so as far as applications,\n\n299\n00:15:26.430 --> 00:15:27.980\nwe just covered five of the directories,\nright?\n\n300\n00:15:27.980 --> 00:15:31.150\nWe did well, I guess in the root\nfolder we only did three.\n\n301\n00:15:31.150 --> 00:15:37.980\nWe did slash bin, slash sbin, and\nslash usr and slash opt, so four, okay,\n\n302\n00:15:37.980 --> 00:15:40.810\nbut there's still plenty of other folders\nin here that we need to know about.\n\n303\n00:15:40.810 --> 00:15:45.340\nLet's take a look at the next\none alphabetically is boot.\n\n304\n00:15:45.340 --> 00:15:47.150\nBoot is super important.\n\n305\n00:15:47.150 --> 00:15:49.310\nIf you delete Boot,\nyour computer doesn't boot.\n\n306\n00:15:49.310 --> 00:15:50.856\nIt's named appropriately.\n\n307\n00:15:50.856 --> 00:15:53.640\nYour boot files are stored\ninside of there.\n\n308\n00:15:53.640 --> 00:15:55.754\nWhen you install a Linux distribution,\n\n309\n00:15:55.754 --> 00:15:58.621\nthere's always a boot loader\nof some sort installed.\n\n310\n00:15:58.621 --> 00:16:02.761\nAnd it's either installed in the master\nboot record, if you've got the old style\n\n311\n00:16:02.761 --> 00:16:06.130\nsetup, or in the EFI folder if\nyou've got EFI BIOS on your system.\n\n312\n00:16:06.130 --> 00:16:09.630\nBut either way, that boot folder's going\nto exist so you can boot off of it.\n\n313\n00:16:09.630 --> 00:16:14.170\nAnd inside of it, it's got the files\nthat are needed to support that.\n\n314\n00:16:14.170 --> 00:16:18.530\nAs far as a boot manager, most Linux\ndistros use a program called Grub.\n\n315\n00:16:18.530 --> 00:16:21.850\nGrub is the kind of most\nstandard boot loader for Linux.\n\n316\n00:16:21.850 --> 00:16:25.002\nThere are other ones out there,\nI've used several different ones,\n\n317\n00:16:25.002 --> 00:16:26.100\noops I'm typing Grub.\n\n318\n00:16:26.100 --> 00:16:29.387\nThere are several different ones that are\nout there, but Grub is the most common.\n\n319\n00:16:29.387 --> 00:16:32.693\nIn Ubuntu, in Red Hat, Fedora,\nDebian, they all use Grub, so\n\n320\n00:16:32.693 --> 00:16:35.020\nthat's the one you normally see.\n\n321\n00:16:35.020 --> 00:16:39.171\nAnd if I look inside of that boot folder,\nI'll see a lot of stuff,\n\n322\n00:16:39.171 --> 00:16:41.980\nincluding the vm.linux and initrd files.\n\n323\n00:16:41.980 --> 00:16:44.760\nNow, I saw those in the root a minute ago,\nright?\n\n324\n00:16:44.760 --> 00:16:46.940\nUp here, but see how they're light blue?\n\n325\n00:16:46.940 --> 00:16:50.050\nThose are actually links that\nare pointing to real files here,\n\n326\n00:16:50.050 --> 00:16:51.800\nthese files aren't light blue\nbecause they're the real.\n\n327\n00:16:51.800 --> 00:16:55.262\nIf I had done a ls-la instead and\npulled the long view,\n\n328\n00:16:55.262 --> 00:16:59.477\nsee how vmlin has got an arrow and\npoints to a file somewhere else and\n\n329\n00:16:59.477 --> 00:17:03.938\nin the init one that we have scrolled\npast, and it does the same thing.\n\n330\n00:17:03.938 --> 00:17:08.930\nTheir pointing to that folder boot, and\nthat's where the real files reside.\n\n331\n00:17:08.930 --> 00:17:11.410\nThese are the actual files, and\n\n332\n00:17:11.410 --> 00:17:13.790\nyou may see more than one\ncopy as you upgrade, right?\n\n333\n00:17:13.790 --> 00:17:18.600\nSo when I installed, I might have\ninstalled with an earlier version and\n\n334\n00:17:18.600 --> 00:17:20.230\nevery time you upgrade it\nsaves the last version.\n\n335\n00:17:20.230 --> 00:17:27.494\nSo I was running 4.10.0-21 and\nnow I'm running 4.10.0-22.\n\n336\n00:17:27.494 --> 00:17:29.944\nIt saves the old one and\nwhen you boot Grub gives you a menu and\n\n337\n00:17:29.944 --> 00:17:32.590\nyou can actually choose to boot\nform the old version if you want,\n\n338\n00:17:32.590 --> 00:17:35.720\nif you have some kind of problem\nit's an easy way to roll back.\n\n339\n00:17:35.720 --> 00:17:38.240\nThere's also an EFI folder in here\n\n340\n00:17:38.240 --> 00:17:41.740\nwhich has the EFI bios\ninformation which is protected so\n\n341\n00:17:41.740 --> 00:17:46.510\nif I wanna see that I'll have to elevate\nmy permissions a little bit there.\n\n342\n00:17:46.510 --> 00:17:48.742\nBecause if you can tamper with EFI BIOSes.\n\n343\n00:17:48.742 --> 00:17:49.923\n&gt;&gt; [LAUGH]\n&gt;&gt; There's all sorts of really bad stuff\n\n344\n00:17:49.923 --> 00:17:52.400\nyou can do to a computer in there so\nthey make you be an admin for that one.\n\n345\n00:17:52.400 --> 00:17:56.220\nBut I also have the GRUB folder and that's\nwhere the GRUB configuration is stored.\n\n346\n00:17:56.220 --> 00:17:58.910\nSo when the system boots up and\nit shows me the GRUB menu,\n\n347\n00:17:58.910 --> 00:18:02.390\nhow does it know what operating system\nto show me to be able to pick from?\n\n348\n00:18:02.390 --> 00:18:06.110\nMy system's actually set to dual boot,\nI've got Windows 10 on another partition.\n\n349\n00:18:06.110 --> 00:18:11.778\nAnd so inside of GRUB it knows that,\nand if I look at my GRUB config,\n\n350\n00:18:11.778 --> 00:18:17.067\nit should be in here somewhere\nif I scroll around a little bit.\n\n351\n00:18:17.067 --> 00:18:18.188\nAnd poking around in here,\n\n352\n00:18:18.188 --> 00:18:22.280\nyou'll see where it gives you the choice\nto pick the operating system at boot.\n\n353\n00:18:22.280 --> 00:18:24.150\nAnd let's see,\nthey're in these sub menus here.\n\n354\n00:18:24.150 --> 00:18:27.680\nSo see how I've got like\nadvanced options for Ubuntu.\n\n355\n00:18:27.680 --> 00:18:30.850\nAnd somewhere in here,\nwe'll find the other items.\n\n356\n00:18:30.850 --> 00:18:35.380\nHere's Ubuntu with Linux 4.10.0-22.\n\n357\n00:18:35.380 --> 00:18:38.264\nAnd then somewhere I'll see\nthe old version, the 21,\n\n358\n00:18:38.264 --> 00:18:40.503\nyeah here's the menu entry for that one.\n\n359\n00:18:40.503 --> 00:18:43.898\nYou know, I could actually just\nfilter this based on menu entry,\n\n360\n00:18:43.898 --> 00:18:45.700\nthat would make this a lot easier.\n\n361\n00:18:48.425 --> 00:18:50.825\nWhoops, if I actually grabbed\nit like I intended to,\n\n362\n00:18:50.825 --> 00:18:52.695\nthen we'll get that information,\nthere we go.\n\n363\n00:18:52.695 --> 00:18:54.915\nSo here's all the operating system\nwill see when I boot up, and\n\n364\n00:18:54.915 --> 00:18:57.675\nI'm seeing mostly Ubuntu stuff, but\nthen right down here at the end,\n\n365\n00:18:57.675 --> 00:19:00.930\nWindows Boot Manager, and I would choose\nthat one to be able to boot to Windows.\n\n366\n00:19:00.930 --> 00:19:02.980\nAll of that's stored right in here, so\n\n367\n00:19:02.980 --> 00:19:06.230\nthe boot folder is actually\npretty important right.\n\n368\n00:19:06.230 --> 00:19:10.460\nAll those files that happen\nwhen our system boots up.\n\n369\n00:19:10.460 --> 00:19:11.370\nAfter that we've got,\n\n370\n00:19:11.370 --> 00:19:15.460\nlet's see /CDrom you probably won't have,\nthat's a pretty non-standard thing.\n\n371\n00:19:15.460 --> 00:19:16.919\nI don't know why Ubuntu does that but\n\n372\n00:19:16.919 --> 00:19:19.083\nin the olden days when you\npopped a CD into your system,\n\n373\n00:19:19.083 --> 00:19:22.111\nit would mount to the CD-ROM folder and\nyou could browse in there and see it.\n\n374\n00:19:22.111 --> 00:19:25.970\nBut most people actually put in in MNT,\nthe mount folder.\n\n375\n00:19:25.970 --> 00:19:31.131\nSo you'd have /mount/CDROM and that was\nfine as long as you were an administrator.\n\n376\n00:19:31.131 --> 00:19:34.360\nIf you were like a root user or\nwhatever you had access to that folder.\n\n377\n00:19:34.360 --> 00:19:37.040\nBut regular users,\nit caused a bit of a problem, and so\n\n378\n00:19:37.040 --> 00:19:39.760\nmost modern distros don't do that anymore.\n\n379\n00:19:39.760 --> 00:19:43.048\nNow they have a folder called\nmedia that they use instead right?\n\n380\n00:19:43.048 --> 00:19:46.760\nAnd so inside of media,\nif you pop in a USB key or\n\n381\n00:19:46.760 --> 00:19:49.260\na CD, it'll usually get mounted in there.\n\n382\n00:19:49.260 --> 00:19:51.960\nBut there's not really a great standard\non this one, because there are other ones\n\n383\n00:19:51.960 --> 00:19:56.735\nthat will put it inside of /var/run/media,\nI've seen that also.\n\n384\n00:19:56.735 --> 00:20:00.378\n/var is where you have variable\ninformation or various,\n\n385\n00:20:00.378 --> 00:20:02.024\nI've heard it both ways.\n\n386\n00:20:02.024 --> 00:20:02.950\n&gt;&gt; Right.\n\n387\n00:20:02.950 --> 00:20:04.780\n&gt;&gt; Where applications\nstore temporary things.\n\n388\n00:20:04.780 --> 00:20:08.450\nAnd when you pop in a USB key or\na CD, that's temporary data so\n\n389\n00:20:08.450 --> 00:20:10.060\nit ends up in /var.\n\n390\n00:20:10.060 --> 00:20:13.522\nBut some things like Apache will\nactually store your web pages inside of\n\n391\n00:20:13.522 --> 00:20:16.840\n/var /www so it's not so\ntemporary anymore.\n\n392\n00:20:16.840 --> 00:20:19.520\nThings can stay in var\nas long as you want,\n\n393\n00:20:19.520 --> 00:20:23.120\nif it's truly temporary it\nwill go in this one /tmp.\n\n394\n00:20:23.120 --> 00:20:25.910\nThat's where truly temporary things\ngo that we can delete whenever\n\n395\n00:20:25.910 --> 00:20:26.865\nwe're done with them.\n\n396\n00:20:26.865 --> 00:20:31.236\n/var, things are considered various and\ntemporary, but that temporary might mean,\n\n397\n00:20:31.236 --> 00:20:31.896\nfive years.\n\n398\n00:20:31.896 --> 00:20:32.930\n&gt;&gt; Mm-hm.\n[LAUGH]\n\n399\n00:20:32.930 --> 00:20:35.060\n&gt;&gt; So, that can certainly happen.\n\n400\n00:20:35.060 --> 00:20:37.373\nSo, now I'm really jumping\naround in my folders.\n\n401\n00:20:37.373 --> 00:20:40.661\nLet's see,\nwhat else do we have in here, dev,\n\n402\n00:20:40.661 --> 00:20:45.910\nI mentioned how almost everything\nin Unix is represented as a file.\n\n403\n00:20:45.910 --> 00:20:49.200\nAnd I said, if you have a video card,\nit's a file., is it?\n\n404\n00:20:49.200 --> 00:20:51.680\nWhere the heck is that file,\nright, they're in /dev.\n\n405\n00:20:51.680 --> 00:20:56.110\nDev is short for device, and\nso if I go into /dev and\n\n406\n00:20:56.110 --> 00:20:59.282\ntake a look around,\nI see a lot of devices.\n\n407\n00:20:59.282 --> 00:21:02.040\nNow, I see devices that I don't even have.\n\n408\n00:21:02.040 --> 00:21:05.750\nYou'll see things in here like FD,\nFD is floppy disk.\n\n409\n00:21:05.750 --> 00:21:08.720\nI don't have a floppy disk,\nthese are virtual placeholders.\n\n410\n00:21:08.720 --> 00:21:13.180\nRight, and\nif I ever do plug in a real floppy disk,\n\n411\n00:21:13.180 --> 00:21:17.980\ndon't know that I could do that, but if I\ndid, then it would map to this file, and\n\n412\n00:21:17.980 --> 00:21:19.570\nthat would be my floppy disk.\n\n413\n00:21:19.570 --> 00:21:23.140\nThe TTYs that I used in some of the other\nepisodes, they're defined right here.\n\n414\n00:21:23.140 --> 00:21:24.186\nYour video card,\n\n415\n00:21:24.186 --> 00:21:28.666\nmy hard drive, I have two hard drives\nin my system, one of them Is NVME zero?\n\n416\n00:21:28.666 --> 00:21:31.968\nSo that's my main hard drive and\nit's got five partitions,\n\n417\n00:21:31.968 --> 00:21:34.636\nso here's the partitions\nlaid out right there.\n\n418\n00:21:34.636 --> 00:21:40.608\nI have got a second hard drive in here\nthat is a regular SMP not NVME so\n\n419\n00:21:40.608 --> 00:21:46.701\nit will show up as SDA, there it is,\nthere's my other drive, SDA.\n\n420\n00:21:46.701 --> 00:21:50.610\nAnd it only has one partition on it and\nso it's SDA1.\n\n421\n00:21:50.610 --> 00:21:52.018\nI see each of those there,\n\n422\n00:21:52.018 --> 00:21:56.070\nyour CD-ROM will typically be\ndefined in here somewhere.\n\n423\n00:21:56.070 --> 00:21:59.552\nThe name will depend on the hardware,\nyou'll see other things in here based on\n\n424\n00:21:59.552 --> 00:22:01.631\nthe hardware that's\npresent on your system.\n\n425\n00:22:01.631 --> 00:22:05.290\nIt'll get detected, your video card\nis mapped right here, video zero.\n\n426\n00:22:05.290 --> 00:22:07.074\nI've got one video card,\nyou might have more than one, right?\n\n427\n00:22:07.074 --> 00:22:10.450\nMaybe you've got one of those hardcore\ngaming rigs with SLI and all that stuff.\n\n428\n00:22:10.450 --> 00:22:12.715\nSo you'll have video zero,\nvideo one, video two.\n\n429\n00:22:12.715 --> 00:22:15.077\nThese are files that\nreference your device, and\n\n430\n00:22:15.077 --> 00:22:19.020\nsome of them have some interesting stuff,\nif you browse inside of them.\n\n431\n00:22:19.020 --> 00:22:20.540\nSome are folders, some are not, right?\n\n432\n00:22:20.540 --> 00:22:23.770\nThe dark blue ones are folders, and\nso you can browse into them and\n\n433\n00:22:23.770 --> 00:22:26.970\nsee interesting things,\nthe other ones though are just files.\n\n434\n00:22:26.970 --> 00:22:29.580\nAnd you reference the file\nto interact with the device.\n\n435\n00:22:29.580 --> 00:22:33.620\nIf I wanna send something to video\nI send it to /dev/video0 and\n\n436\n00:22:33.620 --> 00:22:35.210\nnow it goes on screen.\n\n437\n00:22:35.210 --> 00:22:38.130\nIt's gotta be in the right format and\nall that but that's how they work.\n\n438\n00:22:38.130 --> 00:22:40.170\nSo all of this stuff is pretty important.\n\n439\n00:22:43.620 --> 00:22:47.240\nAlong with slash dev another\nimportant folder is ETC, right.\n\n440\n00:22:47.240 --> 00:22:50.690\nETC is short for\netc as we usually use it but\n\n441\n00:22:50.690 --> 00:22:55.020\nit's not really just etc here's a bunch\nof extra junk, it's really config files.\n\n442\n00:22:55.020 --> 00:22:56.170\nThe configuration files for\n\n443\n00:22:56.170 --> 00:22:59.510\nthe majority of the services and\nyour operating system are stored in there.\n\n444\n00:22:59.510 --> 00:23:03.410\nSo when you become like a system\nadministrator and you're installing\n\n445\n00:23:03.410 --> 00:23:07.980\nthe Apache web server or something,\nthe configuration for Apache is in there.\n\n446\n00:23:07.980 --> 00:23:10.500\nBut even as just a regular user if\nyou're configuring your systems so\n\n447\n00:23:10.500 --> 00:23:17.540\nyou can remote SSH into it, SSHD, the SSHD\ndaemon, it stores it's config inside ETC.\n\n448\n00:23:17.540 --> 00:23:21.603\nSo when you look inside a ETC\nyou'll see a ton of config files.\n\n449\n00:23:21.603 --> 00:23:24.422\nAnd if you want to modify\nthe behavior of Linux or\n\n450\n00:23:24.422 --> 00:23:28.793\nmodify the behavior of a particular\nservice, this is the place to go, and\n\n451\n00:23:28.793 --> 00:23:30.923\nyou'll see a ton of things in here.\n\n452\n00:23:30.923 --> 00:23:32.736\nSome of these are things that you'll have,\n\n453\n00:23:32.736 --> 00:23:35.240\njust like I do, other things\nare software that I installed.\n\n454\n00:23:35.240 --> 00:23:37.320\nSo, for example,\nI installed the BitBabbler software,\n\n455\n00:23:37.320 --> 00:23:41.000\nso I've got a folder for\nthat with the BitBabbler configuration.\n\n456\n00:23:41.000 --> 00:23:43.490\nYou may not have one of those,\nthe little random number generator.\n\n457\n00:23:43.490 --> 00:23:45.579\nSo, if you don't have one of those,\nthen you're not going to have that folder.\n\n458\n00:23:46.660 --> 00:23:48.205\nEach application will create these and\n\n459\n00:23:48.205 --> 00:23:50.460\ndeposit them in store\nconfigurations in there, right?\n\n460\n00:23:50.460 --> 00:23:54.187\nSo cups for example,\nthat's the common Unix print service,\n\n461\n00:23:54.187 --> 00:23:56.777\nso that's where my printers get defined.\n\n462\n00:23:56.777 --> 00:24:01.281\nWell Most Linux distros run cups, and\nit stores its config right in there.\n\n463\n00:24:01.281 --> 00:24:05.430\nSo if I browse into the cups folder,\nand take a look there.\n\n464\n00:24:05.430 --> 00:24:07.648\nI can start to see my classes and\nmy printers.\n\n465\n00:24:07.648 --> 00:24:11.695\nPrinters.conf, that's where it's actually\nstoring which printers I'm connected to.\n\n466\n00:24:11.695 --> 00:24:15.530\nAnd then in the PPD folder is where\nit'll store any drivers that it's got.\n\n467\n00:24:15.530 --> 00:24:18.365\nSo I print to a LaserJet M506\nhere in the building,\n\n468\n00:24:18.365 --> 00:24:21.455\nthere's the PPD that defines\nhow to talk to that printer.\n\n469\n00:24:21.455 --> 00:24:25.096\nSo each service, each application,\n\n470\n00:24:25.096 --> 00:24:31.485\nwill store config files right in\nhere inside of /etc, all right.\n\n471\n00:24:31.485 --> 00:24:34.979\nThere's a couple others that I can\ncover a little bit more quickly,\n\n472\n00:24:34.979 --> 00:24:37.074\nbecause I know I'm running low on time.\n\n473\n00:24:37.074 --> 00:24:37.897\n&gt;&gt; [LAUGH]\n&gt;&gt; So let me show you\n\n474\n00:24:37.897 --> 00:24:38.525\nthe important ones here.\n\n475\n00:24:38.525 --> 00:24:39.028\n&gt;&gt; It's great stuff.\n\n476\n00:24:39.028 --> 00:24:42.850\n&gt;&gt; [LAUGH] I really thought\nI could do this faster.\n\n477\n00:24:42.850 --> 00:24:44.420\nHome, that's where your home directory is,\nright?\n\n478\n00:24:44.420 --> 00:24:48.276\nSo every user has a home directory and\nit gets dropped right inside of home.\n\n479\n00:24:48.276 --> 00:24:51.880\nSo my user comes dpezet,\nthere's a /home/dpezet.\n\n480\n00:24:51.880 --> 00:24:55.500\nI'm the only one that uses the computer,\nso nobody else has a folder here, just me.\n\n481\n00:24:55.500 --> 00:24:57.837\nThere's one exception,\nand that's the root user.\n\n482\n00:24:57.837 --> 00:25:00.950\nThe root user's folder is put\nsomewhere else to keep it safe.\n\n483\n00:25:00.950 --> 00:25:03.124\nIt's put, oddly enough,\nin the root of the drive.\n\n484\n00:25:03.124 --> 00:25:06.994\nSo there's actually a separate\nroot folder, cd /root.\n\n485\n00:25:06.994 --> 00:25:09.117\nAnd see how I'm getting\nblocked right here?\n\n486\n00:25:09.117 --> 00:25:12.622\nI'm not an administrator,\nI can't even get to that folder, but\n\n487\n00:25:12.622 --> 00:25:14.480\nit does exist right there.\n\n488\n00:25:14.480 --> 00:25:21.760\nAnd if I switch to the root user,\nI can change right into that folder.\n\n489\n00:25:21.760 --> 00:25:25.399\nAnd there we are, and\nit's just my home folder, for\n\n490\n00:25:25.399 --> 00:25:27.977\nthe root user if that's who you are.\n\n491\n00:25:27.977 --> 00:25:29.076\n[COUGH] What else do we have?\n\n492\n00:25:29.076 --> 00:25:33.240\nThat was home, there's lib and\nlib64, those are libraries.\n\n493\n00:25:34.240 --> 00:25:35.084\nWhen you run an application, right?\n\n494\n00:25:35.084 --> 00:25:36.872\nWhen you run GUI, for example, and\n\n495\n00:25:36.872 --> 00:25:39.610\nmaybe you're the developer\nthat writing this GUI.\n\n496\n00:25:39.610 --> 00:25:41.683\nAnd you need to put\na button on your screen,\n\n497\n00:25:41.683 --> 00:25:44.518\nyou're not the first person\nto think of a button, right?\n\n498\n00:25:44.518 --> 00:25:46.640\nTons of applications already have buttons.\n\n499\n00:25:46.640 --> 00:25:47.738\nSo why reinvent the wheel?\n\n500\n00:25:47.738 --> 00:25:51.755\nYou don't have to, there are plenty of\nlibraries out there that already include\n\n501\n00:25:51.755 --> 00:25:54.010\nthe majority of functions\nthat people need.\n\n502\n00:25:54.010 --> 00:25:57.060\nSo if you need a button on the screen, you\ncan go get a library that does buttons.\n\n503\n00:25:57.060 --> 00:26:01.556\nIf you need to put video up on a monitor\nthere's libraries out there that already\n\n504\n00:26:01.556 --> 00:26:02.910\nput video on a monitor.\n\n505\n00:26:02.910 --> 00:26:06.553\nSo don't write it yourself, just use\nthe library and they go here, right?\n\n506\n00:26:06.553 --> 00:26:12.180\n/lib is for 32 bit libraries and\nlib64 is for 64 bit libraries.\n\n507\n00:26:12.180 --> 00:26:16.034\nThat'll change in the future,\neventually lib64 will become lib.\n\n508\n00:26:16.034 --> 00:26:20.590\nBut for right now the 32 bit is\nstill the default, so they're there.\n\n509\n00:26:20.590 --> 00:26:22.787\n64 bit applications know\nto look to the /lib64.\n\n510\n00:26:22.787 --> 00:26:29.100\nLet's see, lost and found,\nthat's where damaged files go.\n\n511\n00:26:29.100 --> 00:26:31.496\nIf there's ever a file that\nsomehow gets a damaged pointer and\n\n512\n00:26:31.496 --> 00:26:32.704\na file system repair fixes it.\n\n513\n00:26:32.704 --> 00:26:37.180\nIt'll end up there, hopefully that's\nempty for you, but files do end up there.\n\n514\n00:26:37.180 --> 00:26:39.190\nStuff happens,\nespecially with temporary files.\n\n515\n00:26:39.190 --> 00:26:41.630\nMedia and mount,\nI already talked about opt.\n\n516\n00:26:41.630 --> 00:26:44.493\nI talked about proc,\nproc is another new one.\n\n517\n00:26:44.493 --> 00:26:46.830\nProc is short for processes.\n\n518\n00:26:46.830 --> 00:26:49.850\nWhen you run a program,\nI said earlier that everything,\n\n519\n00:26:49.850 --> 00:26:51.980\nalmost everything is\nrepresented as a file.\n\n520\n00:26:51.980 --> 00:26:54.486\nEven your programs running\nare represented as your files, and\n\n521\n00:26:54.486 --> 00:26:55.961\nthey are right there inside of proc.\n\n522\n00:26:55.961 --> 00:26:59.936\nAnd so here's all these folders with\nnumbers that don't mean a whole lot to\n\n523\n00:26:59.936 --> 00:27:00.640\nme, right?\n\n524\n00:27:00.640 --> 00:27:03.370\nWell it's not that they\ndon't mean anything,\n\n525\n00:27:03.370 --> 00:27:08.092\nit's just that when I look at them here,\nthey don't necessarily show anything.\n\n526\n00:27:08.092 --> 00:27:09.742\nFor example,\nlet me open another terminal here.\n\n527\n00:27:09.742 --> 00:27:10.436\nI'm gonna run a program.\n\n528\n00:27:10.436 --> 00:27:11.731\nI'm gonna run Midnight Commander, right?\n\n529\n00:27:11.731 --> 00:27:12.621\nSo I just ran MC.\n\n530\n00:27:12.621 --> 00:27:19.700\nIf I go back to this screen, I can run\nps aux, ps shows me all of my processes.\n\n531\n00:27:19.700 --> 00:27:24.160\nAnd I can look for that midnight\ncommander process, so there it is.\n\n532\n00:27:24.160 --> 00:27:26.615\nAnd its process ID 28593, right?\n\n533\n00:27:26.615 --> 00:27:32.610\nAnd inside of proc,\nthere'll be a folder that is 28593.\n\n534\n00:27:32.610 --> 00:27:35.005\nThere it is, right there, right?\n\n535\n00:27:35.005 --> 00:27:38.930\nAnd so that running process\nis represented right here.\n\n536\n00:27:38.930 --> 00:27:43.498\nAnd if I try and browse into it,\noops, I have to type it right first.\n\n537\n00:27:43.498 --> 00:27:47.727\nOnce I get, wow,\nmy typing skills are sub par.\n\n538\n00:27:47.727 --> 00:27:49.670\nThere we go, 28593 there.\n\n539\n00:27:49.670 --> 00:27:50.509\nWhen I get into it,\n\n540\n00:27:50.509 --> 00:27:53.661\nI can find all sorts of interesting\nthings about that process, right?\n\n541\n00:27:53.661 --> 00:27:56.432\nI can pull up information on\nhow much memory it's using,\n\n542\n00:27:56.432 --> 00:27:59.330\nhow much CPU it's utilizing,\nwhat files it is accessing.\n\n543\n00:27:59.330 --> 00:28:02.804\nIt is all stored right in here, all this\ninformation about that running process.\n\n544\n00:28:02.804 --> 00:28:05.180\nIt's all represented\nhere in the file system.\n\n545\n00:28:05.180 --> 00:28:06.560\nThis is all virtual stuff,\n\n546\n00:28:06.560 --> 00:28:10.105\nthe moment I close that program\nthis folder will dissappear, right?\n\n547\n00:28:10.105 --> 00:28:17.310\nRight now if I do a ls 28593, okay?\n\n548\n00:28:17.310 --> 00:28:19.575\nI see it, and if I go back here.\n\n549\n00:28:19.575 --> 00:28:26.416\nAnd I get out of Midnight Commander,\n\n550\n00:28:26.416 --> 00:28:32.160\nwhich is, oop, not that one.\n\n551\n00:28:32.160 --> 00:28:33.973\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] All right,\n\n552\n00:28:33.973 --> 00:28:38.130\nwell let me, Just kill that out.\n\n553\n00:28:41.336 --> 00:28:45.270\nCome on, It's not gonna let me kill it.\n\n554\n00:28:45.270 --> 00:28:48.544\nBut if I exit out of that program,\nthere we go.\n\n555\n00:28:48.544 --> 00:28:52.242\nNow when I come back over here, if I look\nfor it, the directory's gone, right?\n\n556\n00:28:52.242 --> 00:28:53.477\nIt's no longer running, so\n\n557\n00:28:53.477 --> 00:28:56.159\nproc represents the running\nprograms that are on our system.\n\n558\n00:28:57.826 --> 00:29:00.420\nAll right, shouldn't have been so\nhard to get out of that.\n\n559\n00:29:00.420 --> 00:29:02.229\n&gt;&gt; [LAUGH]\n&gt;&gt; F10 is what exits for some reason,\n\n560\n00:29:02.229 --> 00:29:04.012\nI couldn't do F10 on my keyboard.\n\n561\n00:29:04.012 --> 00:29:06.437\nAll right, what else do we have?\n\n562\n00:29:06.437 --> 00:29:07.928\nThat was proc, we've got roots.\n\n563\n00:29:07.928 --> 00:29:09.211\nWe already talked about root-\n&gt;&gt; We talked about root-\n\n564\n00:29:09.211 --> 00:29:09.869\n&gt;&gt; That's what gets us home.\n\n565\n00:29:09.869 --> 00:29:10.585\n&gt;&gt; Yep.\n&gt;&gt; Run,\n\n566\n00:29:10.585 --> 00:29:14.639\nI talked about a little bit inside of\n/var/run, but here, it's in the root.\n\n567\n00:29:14.639 --> 00:29:19.010\nUbuntu likes to do this with media\nthat it'll end up in the run folder.\n\n568\n00:29:19.010 --> 00:29:22.653\nThis is usually temporary stuff for\nusers and so you'll see like a mount or\n\n569\n00:29:22.653 --> 00:29:25.435\nother programs might store\ndata there inside of /run.\n\n570\n00:29:25.435 --> 00:29:31.205\nThat's not common across Linux distros, so\non Red Hat, you won't see that, it's not.\n\n571\n00:29:31.205 --> 00:29:32.087\nNot a normal thing.\n\n572\n00:29:32.087 --> 00:29:34.003\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n573\n00:29:34.003 --> 00:29:34.777\n&gt;&gt; Ubuntu does some weird stuff.\n\n574\n00:29:34.777 --> 00:29:39.195\nAs Ben and I talked about snap,\nwe don't have to worry about that's for\n\n575\n00:29:39.195 --> 00:29:40.908\nthe snap packet managers.\n\n576\n00:29:40.908 --> 00:29:43.636\nSrv for services that really\ndoesn't get used anymore.\n\n577\n00:29:43.636 --> 00:29:46.720\nBut it's still here, let's see if\nI actually have anything in it.\n\n578\n00:29:46.720 --> 00:29:47.633\nYeah, it's empty for me.\n\n579\n00:29:47.633 --> 00:29:49.810\nIt used to be the services went there.\n\n580\n00:29:49.810 --> 00:29:53.018\nMost of them store their information\nin /var now, so it's just there for\n\n581\n00:29:53.018 --> 00:29:54.271\nbackwards compatibility.\n\n582\n00:29:54.271 --> 00:29:59.770\n/usr, we already talked about, and /var,\nI talked about but didn't really go into.\n\n583\n00:29:59.770 --> 00:30:03.379\nBut that's where a lot of our services\nwill store their actual configurations.\n\n584\n00:30:03.379 --> 00:30:07.680\nAnd so when you come in here you\nwill find /var/opt or mail for\n\n585\n00:30:07.680 --> 00:30:11.460\na mail server, spool,\nfor your printer spool.\n\n586\n00:30:11.460 --> 00:30:14.627\nIf you print a job, it saves it to the\nhard drive, sends it to the printer and\n\n587\n00:30:14.627 --> 00:30:17.061\nit doesn't delete it until\nthe printer says it's done.\n\n588\n00:30:17.061 --> 00:30:19.513\nAnd that way if the job\nfails you can retransmitted,\n\n589\n00:30:19.513 --> 00:30:22.160\nwell it's waiting right here in /var/pool,\nright?\n\n590\n00:30:22.160 --> 00:30:25.063\nThat's what that various folder is for,\nso.\n\n591\n00:30:25.063 --> 00:30:28.202\nAnd James in the chatroom\nmentioned /var/log.\n\n592\n00:30:28.202 --> 00:30:30.600\nThat's a really great one,\nif you're troubleshooting.\n\n593\n00:30:30.600 --> 00:30:34.140\nAll your log files end up\nright there in /var/log.\n\n594\n00:30:34.140 --> 00:30:37.356\nSo if you need to dig into your\nsys log and find information about\n\n595\n00:30:37.356 --> 00:30:40.155\nwhy a crash happened,\nyou can jump in here and find it.\n\n596\n00:30:40.155 --> 00:30:42.994\nWe will see that in some later episodes,\nbut\n\n597\n00:30:42.994 --> 00:30:46.080\nthat is definitely\nanother important folder.\n\n598\n00:30:46.080 --> 00:30:48.991\n&gt;&gt; All right, Don anything else we need\nto take a peak at while it comes to\n\n599\n00:30:48.991 --> 00:30:50.308\nthe systems hierarchy Linux?\n\n600\n00:30:50.308 --> 00:30:54.135\n&gt;&gt; I think that's about it, just keeping\nin mind, these names all matter, right?\n\n601\n00:30:54.135 --> 00:30:54.709\nWell somebody maid them-\n&gt;&gt; [LAUGH]\n\n602\n00:30:54.709 --> 00:30:55.621\n&gt;&gt; At some point, but\n\n603\n00:30:55.621 --> 00:30:59.227\nnow is a part of what is called FHS,\nthe file systems hierarchy standards.\n\n604\n00:30:59.227 --> 00:31:03.952\nAnd most Linux distributions,\nalmost all of the BSDs and\n\n605\n00:31:03.952 --> 00:31:09.310\neven OS X, Mac OS follows this\nstandard for the file system.\n\n606\n00:31:09.310 --> 00:31:11.926\nSo once you learn it, it's easy to\nmove from system to system, and\n\n607\n00:31:11.926 --> 00:31:13.585\nknow basically where to look for things.\n\n608\n00:31:13.585 --> 00:31:16.460\nNow some of them like to change it a bit.\n\n609\n00:31:16.460 --> 00:31:19.642\nUbuntu is bad about that,\nwhich is what I'm running.\n\n610\n00:31:19.642 --> 00:31:24.580\nBut there are other vendors that stick to\nit, like Slackware, that will not deviate.\n\n611\n00:31:24.580 --> 00:31:27.946\nThey follow the standard to the letter,\nand then there's other ones like Red Hat\n\n612\n00:31:27.946 --> 00:31:30.338\nthat are really influential\nin changing the standards.\n\n613\n00:31:30.338 --> 00:31:33.730\nSo they everyone wanna change\nsomething they modify the standards.\n\n614\n00:31:33.730 --> 00:31:34.296\nSo, [LAUGH]\n&gt;&gt; [LAUGH]\n\n615\n00:31:34.296 --> 00:31:35.635\n&gt;&gt; There's that option too, but\n\n616\n00:31:35.635 --> 00:31:37.499\nonce you learn the file system hierarchy.\n\n617\n00:31:37.499 --> 00:31:41.070\nIt pretty much ports across every system,\nit's a good thing to learn.\n\n618\n00:31:41.070 --> 00:31:44.097\n&gt;&gt; All right, fantastic information Don,\nwait for me call that very exciting.\n\n619\n00:31:44.097 --> 00:31:48.046\nTeaching us what all those folders are in\nour Linux file system hierarchy, so\n\n620\n00:31:48.046 --> 00:31:49.530\nwe appreciate that.\n\n621\n00:31:49.530 --> 00:31:51.174\nHope everybody out there\nenjoyed watching this one.\n\n622\n00:31:51.174 --> 00:31:52.381\nSigning off for ITPro.TV.\n\n623\n00:31:52.381 --> 00:31:53.504\nI've been your host, Mike Roderick.\n\n624\n00:31:53.504 --> 00:31:54.495\n&gt;&gt; And I'm Don Pezet.\n\n625\n00:31:54.495 --> 00:31:55.458\n&gt;&gt; And we'll see you next time.\n\n626\n00:31:55.458 --> 00:32:03.302\n[MUSIC]\n\n627\n00:32:03.302 --> 00:32:05.628\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "222511152"
        },
        {
          "description": "In this episode, Don and Mike begin their look at Linux filesystem commands. They demonstrate commands used to create and work with files. They also look at aliases and metacharacters.",
          "length": "1678",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-filesystem_commands-061617-PGM.00_27_42_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-filesystem_commands-061617-PGM.00_27_42_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-filesystem_commands-061617-PGM.00_27_42_13.Still001-sm.jpg",
          "title": "Filesytem Commands",
          "transcript": "WEBVTT\n\n1\n00:00:00.004 --> 00:00:02.926\nWelcome IT PRO.TV,\nI'm your host Don Pezet-\n\n2\n00:00:02.926 --> 00:00:08.224\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:08.224 --> 00:00:12.026\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.026 --> 00:00:13.988\n&gt;&gt; Hello, welcome to another\nexiting episode here at ITPRO.TV.\n\n5\n00:00:13.988 --> 00:00:19.820\nI'm you host Mike Rodrick, and today we\nare doing a become a Linux Power User.\n\n6\n00:00:19.820 --> 00:00:23.792\nSpecifically in this episode, we're gonna\nbe taking a look at file system commands.\n\n7\n00:00:23.792 --> 00:00:27.900\nIn a previous episode, we learned\nabout the file system within Linux.\n\n8\n00:00:27.900 --> 00:00:31.460\nAnd now we need to figure out how we\ncan navigate around that file system.\n\n9\n00:00:31.460 --> 00:00:33.550\nAnd here to show us\nthe way is Mr Don Pezet.\n\n10\n00:00:33.550 --> 00:00:34.050\nWelcome back, Don.\n\n11\n00:00:34.050 --> 00:00:35.680\n&gt;&gt; Thanks for having me back, Mike.\n\n12\n00:00:35.680 --> 00:00:37.351\nAnd yeah, you know, in several episodes,\n\n13\n00:00:37.351 --> 00:00:39.170\nI've been navigating\naround the file system.\n\n14\n00:00:39.170 --> 00:00:41.440\nWe really haven't talked\nabout how to do that.\n\n15\n00:00:41.440 --> 00:00:42.770\n&gt;&gt; I was gonna say, it's like magic.\n\n16\n00:00:42.770 --> 00:00:45.040\nYour fingers move, and\nthen it's moving all over the place,\n\n17\n00:00:45.040 --> 00:00:46.138\nso-\n&gt;&gt; Stuff happens.\n\n18\n00:00:46.138 --> 00:00:47.705\n&gt;&gt; [LAUGH]\n&gt;&gt; So, some of you may be familiar with\n\n19\n00:00:47.705 --> 00:00:49.635\nthis, because it is\na pretty basic command.\n\n20\n00:00:49.635 --> 00:00:54.256\nBut, if you're a beginner in Linux, you're\nprobably using the GUI for everything.\n\n21\n00:00:54.256 --> 00:00:56.120\nAnd so, you don't necessarily\nknow about the command line and\n\n22\n00:00:56.120 --> 00:00:56.868\nhow to navigate around.\n\n23\n00:00:56.868 --> 00:01:00.202\nBut it is important to know, because when\nyou're working with the command line,\n\n24\n00:01:00.202 --> 00:01:02.685\nyou'll often have to change\nthe directory that you're in.\n\n25\n00:01:02.685 --> 00:01:05.635\nSo, we're gonna take a look at how to\nnavigate around, kinda look at files and\n\n26\n00:01:05.635 --> 00:01:07.475\nsee what's there, and\nsee how all that works.\n\n27\n00:01:07.475 --> 00:01:08.455\n&gt;&gt; That's the whole goal, right?\n\n28\n00:01:08.455 --> 00:01:09.645\nWe wanna be power users.\n\n29\n00:01:09.645 --> 00:01:12.608\nWe're not using the GUI,\nwe wanna be at that command line [LAUGH].\n\n30\n00:01:12.608 --> 00:01:13.955\n&gt;&gt; [LAUGH]\n&gt;&gt; And take off the kid gloves\n\n31\n00:01:13.955 --> 00:01:14.505\nand get to work.\n\n32\n00:01:14.505 --> 00:01:15.269\n&gt;&gt; Yep.\n&gt;&gt; All right, well,\n\n33\n00:01:15.269 --> 00:01:16.602\nlet's take a look at what we've got.\n\n34\n00:01:16.602 --> 00:01:19.315\nNow, I'm fired up into my\nterminal right here, and\n\n35\n00:01:19.315 --> 00:01:23.027\nI wanna start with a command we've\nalready seen, which is ls, right.\n\n36\n00:01:23.027 --> 00:01:28.760\nls is the list command, and we've seen it,\nI've talked about some of the options.\n\n37\n00:01:28.760 --> 00:01:32.380\nls by itself just shows me the files\nthat are in a particular folder.\n\n38\n00:01:32.380 --> 00:01:37.660\nls -l gives me the long output of it,\nso I can see more details about it.\n\n39\n00:01:37.660 --> 00:01:43.750\nAnd ls -a shows the files and the hidden\nfiles, ones that were tucked away.\n\n40\n00:01:43.750 --> 00:01:46.772\nAnd remember that we hide files just by\nsticking a dot at the beginning of their\n\n41\n00:01:46.772 --> 00:01:48.131\nfile name that makes them hidden.\n\n42\n00:01:48.131 --> 00:01:50.274\nSo it's not crazy rocket science there.\n\n43\n00:01:50.274 --> 00:01:51.480\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n44\n00:01:51.480 --> 00:01:53.960\nthat ls command is really important,\nright?\n\n45\n00:01:53.960 --> 00:01:57.790\nBecause that's how we see the folder that\nwe're in, and we figure out what's there.\n\n46\n00:01:57.790 --> 00:01:59.636\nYou may not need it,\nif you have it memorized.\n\n47\n00:01:59.636 --> 00:02:03.893\nIf you know exactly the file that you want\nto edit, or even using tab auto complete.\n\n48\n00:02:03.893 --> 00:02:06.240\nYou can kind of figure things out.\n\n49\n00:02:06.240 --> 00:02:10.345\nSo for example, I installed\na BitBabbler software on my computer.\n\n50\n00:02:10.345 --> 00:02:13.091\nSo if I wanna edit the configuration\nfile for that, and\n\n51\n00:02:13.091 --> 00:02:15.300\nmaybe I just wanna look at it first.\n\n52\n00:02:15.300 --> 00:02:18.206\nI might use the less command\nto look at the file.\n\n53\n00:02:18.206 --> 00:02:23.330\nAnd then I say, well, I know most software\nstorage has configuration in /etc.\n\n54\n00:02:23.330 --> 00:02:26.595\nSo it's probably in there, and\nthen the software's called BitBabbler.\n\n55\n00:02:26.595 --> 00:02:31.390\nSo if I just type bit and hit Tab,\nit'll probably tab auto complete.\n\n56\n00:02:31.390 --> 00:02:34.302\nAnd in short, I'm glad I did that,\nbecause it's got a hyphen in the name,\n\n57\n00:02:34.302 --> 00:02:34.915\nI forgot that.\n\n58\n00:02:34.915 --> 00:02:38.741\nSo now I know it's there, and there's\ngoing to be a config file in there,\n\n59\n00:02:38.741 --> 00:02:41.242\nwhich is probably going\nto start with bit also.\n\n60\n00:02:41.242 --> 00:02:45.380\nAnd well maybe not, but\nI at least got that far,\n\n61\n00:02:45.380 --> 00:02:47.720\nbut I can't remember\nthe name of the config file.\n\n62\n00:02:47.720 --> 00:02:53.500\nSo I would need to jump into that folder,\nand take a look at what's in there.\n\n63\n00:02:53.500 --> 00:02:57.700\nWell, when I say jump into a folder,\nwe're gonna use the command CD.\n\n64\n00:02:57.700 --> 00:02:59.880\nCD is change directory.\n\n65\n00:02:59.880 --> 00:03:04.230\nThe directory I was in was\nrepresented here as a tilde.\n\n66\n00:03:04.230 --> 00:03:07.090\nThe tilde is an alias,\nthat means I was in my home directory.\n\n67\n00:03:07.090 --> 00:03:09.260\nMy home directory is slash home,\nslash dpezet.\n\n68\n00:03:09.260 --> 00:03:10.860\nThat's where I was.\n\n69\n00:03:10.860 --> 00:03:14.556\nNow I type CD in another directory, right?\n\n70\n00:03:14.556 --> 00:03:15.970\n/etc/bit/babbler.\n\n71\n00:03:15.970 --> 00:03:18.080\nThat, took me into that directory.\n\n72\n00:03:18.080 --> 00:03:22.970\nAnd so now, that's the folder that I'm in,\nand I have my prompt set to show that.\n\n73\n00:03:22.970 --> 00:03:24.400\nYour prompt my not show that, right?\n\n74\n00:03:24.400 --> 00:03:26.910\nYour prompt, we talked about\nthat in another episode already,\n\n75\n00:03:26.910 --> 00:03:29.760\nthat you can change what\nyour prompt looks like.\n\n76\n00:03:29.760 --> 00:03:32.270\nAnd if you've done that,\nyou don't see the directory you're in.\n\n77\n00:03:32.270 --> 00:03:33.830\nOr maybe you're using an alternate shell,\nright?\n\n78\n00:03:33.830 --> 00:03:37.740\nSo if I'm using dash, for example,\nso let me just clear that.\n\n79\n00:03:37.740 --> 00:03:38.530\nOkay, what folder am I in?\n\n80\n00:03:38.530 --> 00:03:40.160\n&gt;&gt; Good question.\n\n81\n00:03:40.160 --> 00:03:41.300\n&gt;&gt; I don't know, right?\n\n82\n00:03:41.300 --> 00:03:45.690\nSo there is a command that we may or may\nnot have seen at this point, which is pwd.\n\n83\n00:03:45.690 --> 00:03:46.370\n&gt;&gt; We did.\n\n84\n00:03:46.370 --> 00:03:49.600\n&gt;&gt; Present working directory,\nit tells you what directory you're in.\n\n85\n00:03:49.600 --> 00:03:53.500\nSo now I know, I'm in /etc/bit-babbler.\n\n86\n00:03:53.500 --> 00:03:58.050\nSo, don't assume that the prompt is\ngonna tell you exactly where you are.\n\n87\n00:03:58.050 --> 00:04:00.970\nEven when it does,\nsometimes it shows an alias.\n\n88\n00:04:00.970 --> 00:04:04.300\nSo for example, here,\nI've got the tilde, and if I type pwd,\n\n89\n00:04:04.300 --> 00:04:09.150\nI can actually see that it's\ntruly /home/dpezet, all right.\n\n90\n00:04:09.150 --> 00:04:13.230\nNow, notice how I use the cd command\nthere, where I just typed cd by itself.\n\n91\n00:04:14.520 --> 00:04:17.620\nThere's an alias that says\nif you type cd by itself,\n\n92\n00:04:17.620 --> 00:04:20.530\nit takes you back you your home folder.\n\n93\n00:04:20.530 --> 00:04:25.550\nSo you may have moved into some\nreally weird folder, like this.\n\n94\n00:04:25.550 --> 00:04:28.550\nSo I'm several layers deep, and\nI just wanna go back to my home folder.\n\n95\n00:04:28.550 --> 00:04:32.720\nWell, there's several different ways you\ncan return back to your home folder.\n\n96\n00:04:32.720 --> 00:04:35.315\nAnd typing CD by itself is\nprobably the easiest one.\n\n97\n00:04:35.315 --> 00:04:38.130\nYou just type CD, and pow,\nyou're back in your home folder.\n\n98\n00:04:38.130 --> 00:04:42.240\nIf I do pwd, I can see that I'm now back\nin the home directory, and there I am.\n\n99\n00:04:42.240 --> 00:04:44.210\nSo CD let's me change directories.\n\n100\n00:04:44.210 --> 00:04:46.570\nAnd it has a few other options I'll\nshow you guys in a few moments.\n\n101\n00:04:46.570 --> 00:04:49.180\nBut let me cover a few other\ncommands first that I'm gonna use\n\n102\n00:04:49.180 --> 00:04:50.400\nto demonstrate all this.\n\n103\n00:04:50.400 --> 00:04:54.780\nSo, we saw ls for listing files\nin a folder, and we saw cd for\n\n104\n00:04:54.780 --> 00:04:59.240\nchanging directories to get into\na different folder that was there.\n\n105\n00:04:59.240 --> 00:05:02.970\nPwd shows me my present working directory.\n\n106\n00:05:02.970 --> 00:05:04.690\nWhat if I wanna make a directory?\n\n107\n00:05:04.690 --> 00:05:08.180\nIf I wanna make a directory,\nthere is mkdir.\n\n108\n00:05:08.180 --> 00:05:11.310\nNow this command deviates\na little bit from what\n\n109\n00:05:11.310 --> 00:05:14.010\nwe normally see in Unix like aliases.\n\n110\n00:05:14.010 --> 00:05:18.130\nNormally, they take a command, and they\njust remove the vowels from it, right?\n\n111\n00:05:18.130 --> 00:05:21.210\nSo copy, they remove the o and\nthe y and becomes cp.\n\n112\n00:05:21.210 --> 00:05:24.980\nOr move, they remove the o and the e,\nand it becomes emv right cp and emv.\n\n113\n00:05:26.550 --> 00:05:29.020\nList, I guess is a little weird\nthey get rid of the i, but\n\n114\n00:05:29.020 --> 00:05:30.090\nthen they get rid of the t.\n\n115\n00:05:30.090 --> 00:05:35.050\nSo it's an arbitrary thing and\nwith make directory, you'd think\n\n116\n00:05:35.050 --> 00:05:40.250\nthat it would be md or something\nlike that but instead it's mkdir.\n\n117\n00:05:40.250 --> 00:05:41.508\nThat's just what it is.\n\n118\n00:05:41.508 --> 00:05:42.980\n[LAUGH] So you have to remember that.\n\n119\n00:05:42.980 --> 00:05:44.710\n&gt;&gt; Daniel, I was waiting for\nthis great explanation.\n\n120\n00:05:44.710 --> 00:05:45.900\nLIke why they did that [LAUGH].\n\n121\n00:05:45.900 --> 00:05:47.190\n&gt;&gt; That's what it is.\n\n122\n00:05:47.190 --> 00:05:51.160\nAnd when you type make directory,\nyou can then just give it a name and\n\n123\n00:05:51.160 --> 00:05:52.490\nit'll create that directory.\n\n124\n00:05:52.490 --> 00:05:56.970\nSo, I might create a folder called,\nI don't know, junk dir.\n\n125\n00:05:56.970 --> 00:05:58.591\nSo I'll create a junk directory.\n\n126\n00:05:58.591 --> 00:06:02.750\nRemember in Unix like OS's,\nthe file system is case sensitive.\n\n127\n00:06:02.750 --> 00:06:06.139\nSo if I do capital letters here,\nI've got to remember that it's capital, or\n\n128\n00:06:06.139 --> 00:06:08.550\nI'll just do lowercase,\nand now it's in lowercase.\n\n129\n00:06:08.550 --> 00:06:11.105\nBecause if I try and\nchange into that directory, and\n\n130\n00:06:11.105 --> 00:06:12.680\nI type it with a capital letter.\n\n131\n00:06:12.680 --> 00:06:14.660\nIt doesn't work, but\n\n132\n00:06:14.660 --> 00:06:18.480\nif I type it with a lowercase letter\nit does, because it's case sensitive.\n\n133\n00:06:18.480 --> 00:06:19.730\n&gt;&gt; And Don I noticed when you did that,\n\n134\n00:06:19.730 --> 00:06:21.220\nyou didn't really give it a path or\nanything.\n\n135\n00:06:21.220 --> 00:06:23.624\nYou just makedirk and\nthen the name of the folder.\n\n136\n00:06:23.624 --> 00:06:24.840\nSo where did it go?\n\n137\n00:06:24.840 --> 00:06:28.340\n&gt;&gt; It went into whatever my present\nworking directory was, right?\n\n138\n00:06:28.340 --> 00:06:31.436\nThat is important, cuz maybe I don't\nwanna make the directory here,\n\n139\n00:06:31.436 --> 00:06:33.491\nmaybe I wanna make it somewhere else,\nright?\n\n140\n00:06:33.491 --> 00:06:37.280\nMaybe I wanted it to be inside of\nmy Downloads folder, for example.\n\n141\n00:06:37.280 --> 00:06:43.498\nWell, I could have typed mkdir, and\nthen done the full path for it, right?\n\n142\n00:06:43.498 --> 00:06:50.490\nLike /home/dpezet,/Downloads/junk, right?\n\n143\n00:06:50.490 --> 00:06:54.100\nAnd now I'm telling it exactly\nwhere I want that folder to go.\n\n144\n00:06:54.100 --> 00:06:57.290\nBut if you're already\nin the parent folder.\n\n145\n00:06:57.290 --> 00:07:00.016\nSo if I was already in\nthe Downloads folder for example,\n\n146\n00:07:00.016 --> 00:07:03.157\nyou could just type mkdiJunk,\nand then it makes it right there.\n\n147\n00:07:03.157 --> 00:07:06.150\nOr whatever you wanna name your folder,\nprobably not junk.\n\n148\n00:07:06.150 --> 00:07:10.606\nBut, when I make that, now that folder\nexists, and I can use cd to get there.\n\n149\n00:07:10.606 --> 00:07:15.670\nc/home/dpezet/Downloads, this is where tab\n\n150\n00:07:15.670 --> 00:07:20.812\nautocomplete is really handy,\n/junk, and now I'm there, right?\n\n151\n00:07:20.812 --> 00:07:23.200\nI'm in in that folder and it exists.\n\n152\n00:07:23.200 --> 00:07:25.870\nThere's actually a few neat things\nthat you can do with MKDIR,\n\n153\n00:07:25.870 --> 00:07:29.310\nfor example you can create more\nthan one directory at a time.\n\n154\n00:07:29.310 --> 00:07:31.870\nI can say MKDIR, and\n\n155\n00:07:31.870 --> 00:07:36.391\nthen multiple names, I can say like,\ndura1, dura2, dura3, right?\n\n156\n00:07:36.391 --> 00:07:40.232\nAnd when I run that,\nit processes each one individually.\n\n157\n00:07:40.232 --> 00:07:43.530\nIf I do a list,\nsee how it made three folders, right.\n\n158\n00:07:43.530 --> 00:07:47.288\nI guess listed like that, it almost looks\nlike it just has spaces in the name, but\n\n159\n00:07:47.288 --> 00:07:49.629\nit is actually three different folders,\nright?\n\n160\n00:07:49.629 --> 00:07:52.050\nWhat if I wanna have a space?\n\n161\n00:07:52.050 --> 00:07:56.960\nWhat if I wanna create a folder\ncalled junk stuff or something?\n\n162\n00:07:56.960 --> 00:07:58.143\n&gt;&gt; You should probably\nbe running Windows then.\n\n163\n00:07:58.143 --> 00:08:00.717\n[LAUGH]\n&gt;&gt; That's true in the Unix world,\n\n164\n00:08:00.717 --> 00:08:02.512\nwe typically try not to use spaces, right?\n\n165\n00:08:02.512 --> 00:08:03.768\nBut you can.\n\n166\n00:08:03.768 --> 00:08:06.579\nYou just have to let mkdir\nknow that there's a space.\n\n167\n00:08:06.579 --> 00:08:07.448\nAnd there's two ways to do that.\n\n168\n00:08:07.448 --> 00:08:09.810\nThe easiest is to put it in quotes, right?\n\n169\n00:08:09.810 --> 00:08:12.560\nSo, if I create a folder\ncalled junk stuff, and\n\n170\n00:08:12.560 --> 00:08:16.390\nI put quotes around it,\nthen it knows that's all one term.\n\n171\n00:08:16.390 --> 00:08:19.553\nAnd when it makes that,\nI can take a look at the directory and\n\n172\n00:08:19.553 --> 00:08:21.399\nsee how junk stuff is now a folder.\n\n173\n00:08:21.399 --> 00:08:25.003\nI could've also used slashes to comment,\nnot to comment,\n\n174\n00:08:25.003 --> 00:08:26.883\nto escape out that character.\n\n175\n00:08:26.883 --> 00:08:33.791\nSo for example,\nI could have created junk\\ stuff\\ 2.\n\n176\n00:08:33.791 --> 00:08:36.891\nI'm going to create the junk\nstuff 2 folder, right?\n\n177\n00:08:36.891 --> 00:08:38.950\n&gt;&gt; [LAUGH]\n&gt;&gt; And when I do that,\n\n178\n00:08:38.950 --> 00:08:41.442\nnow I've got junk stuff 2, right?\n\n179\n00:08:41.442 --> 00:08:44.352\nSo putting it in quotes is a littler\neasier if you have a lot of spaces, but\n\n180\n00:08:44.352 --> 00:08:47.264\nif it's just one space you can do\na single back slash before that space and\n\n181\n00:08:47.264 --> 00:08:49.251\nthat may be easier,\nI go back and forth on these.\n\n182\n00:08:49.251 --> 00:08:52.500\nWhichever one I remember is\nthe one that I usually do.\n\n183\n00:08:52.500 --> 00:08:53.700\nBut that's how we do it.\n\n184\n00:08:53.700 --> 00:08:56.303\nIf you leave that off it doesn't\nwork the way you intended, right?\n\n185\n00:08:56.303 --> 00:08:58.602\nIf I did-\n&gt;&gt; Like two directories?\n\n186\n00:08:58.602 --> 00:09:03.001\n&gt;&gt; Junk Stuff 3,\nit's gonna make three directories, right?\n\n187\n00:09:03.001 --> 00:09:07.274\n&gt;&gt; So now I've got a Junk,\na Stuff, and a 3 folder.\n\n188\n00:09:07.274 --> 00:09:09.165\nI should've come up with a better name for\nthis, but anyhow, so\n\n189\n00:09:09.165 --> 00:09:10.398\nthat's what it creates out right there.\n\n190\n00:09:10.398 --> 00:09:11.721\nSo be careful with that.\n\n191\n00:09:11.721 --> 00:09:15.681\nA lot of Unix commands are like that,\nthat if you provide it more than one name,\n\n192\n00:09:15.681 --> 00:09:19.101\nit just runs the command more than once,\nand it handles each one, so\n\n193\n00:09:19.101 --> 00:09:22.350\nthat's what it's doing here to\nrapidly create those folders.\n\n194\n00:09:22.350 --> 00:09:23.110\nIt can be kinda handy.\n\n195\n00:09:25.110 --> 00:09:27.390\nAll right, there's one other\ncommand that I wanna touch on here.\n\n196\n00:09:27.390 --> 00:09:32.230\nWe're gonna see it more later on,\nbut every time you create a file or\n\n197\n00:09:32.230 --> 00:09:35.910\na folder,\nit has permissions assigned to it, and\n\n198\n00:09:35.910 --> 00:09:42.230\nthe permissions define whether it can\nbe read, written to, or executed.\n\n199\n00:09:42.230 --> 00:09:44.776\nPrograms need to be executable,\nand by default,\n\n200\n00:09:44.776 --> 00:09:47.635\nthings aren't normally\nexecutable in the Unix world.\n\n201\n00:09:47.635 --> 00:09:52.409\nSo when I create files and I create\nfolders, they may not be flagged the way\n\n202\n00:09:52.409 --> 00:09:57.770\nthat I want them to be, and there's\na command called CHMOD or change mode.\n\n203\n00:09:57.770 --> 00:10:00.551\nAnd change mode let's us\nmodify those permissions.\n\n204\n00:10:00.551 --> 00:10:03.992\nThe permissions are actually listed over\nhere, all these little letters and stuff,\n\n205\n00:10:03.992 --> 00:10:07.140\nand we'll do an episode on permissions\nto cover what all these mean.\n\n206\n00:10:07.140 --> 00:10:11.419\nBut at a minimum, we've got RWX,\nread, write, execute.\n\n207\n00:10:11.419 --> 00:10:17.020\nAnd if you're working with a program,\nyou may need to mark that as executable.\n\n208\n00:10:17.020 --> 00:10:22.634\nSo, for example,\nI just downloaded yesterday, a program.\n\n209\n00:10:22.634 --> 00:10:25.246\nShoot, where would I have put that?\n\n210\n00:10:25.246 --> 00:10:27.998\nMy big problem is remembering\nwhere I put things.\n\n211\n00:10:27.998 --> 00:10:30.228\n&gt;&gt; [LAUGH]\n&gt;&gt; I downloaded a program and\n\n212\n00:10:30.228 --> 00:10:33.776\nI had to compile it myself, so\nI made the program, and when I did that,\n\n213\n00:10:33.776 --> 00:10:37.711\nit wasn't marked as executable, so\nI had to use CHMOD to make it executable.\n\n214\n00:10:37.711 --> 00:10:41.522\nSo we'll get a chance to see that in\nanother episode, how we can do that,\n\n215\n00:10:41.522 --> 00:10:46.170\nwe can flag that, so look for the Becoming\na Linux Power User permissions episode.\n\n216\n00:10:46.170 --> 00:10:47.852\n&gt;&gt; Yeah, cause that's important\nlike if you're gonna write scripts\n\n217\n00:10:47.852 --> 00:10:48.734\nand things as well.\n\n218\n00:10:48.734 --> 00:10:50.825\n&gt;&gt; Yeah, yep, cause the scripts\nneed to be executable, or\n\n219\n00:10:50.825 --> 00:10:52.535\nthey need to be called\nby a second executable.\n\n220\n00:10:52.535 --> 00:10:56.000\nMakes things more complex, so\nwe definitely have to have that in hand.\n\n221\n00:10:57.250 --> 00:11:02.060\nAlright now, as we're working with things\nlike change directory, cd, remember how\n\n222\n00:11:02.060 --> 00:11:08.226\nI'm able to change directory by typing cd,\nand then a path, so /var/log.\n\n223\n00:11:08.226 --> 00:11:09.565\nAnd now I'm there, right?\n\n224\n00:11:09.565 --> 00:11:11.876\nOne thing to note here, I guess.\n\n225\n00:11:11.876 --> 00:11:14.007\nIf you're coming from the Windows world,\n\n226\n00:11:14.007 --> 00:11:18.260\nWindows is the only operating system\nthat uses backslash for folders.\n\n227\n00:11:18.260 --> 00:11:20.440\nEverybody else uses forward slashes.\n\n228\n00:11:20.440 --> 00:11:24.155\nLinux, BSD, the Original Unix,\nmac-OS, they all use forward slashes,\n\n229\n00:11:24.155 --> 00:11:25.940\ncause they're all based off of Unix.\n\n230\n00:11:25.940 --> 00:11:27.534\nAnd so we have to remember that.\n\n231\n00:11:27.534 --> 00:11:29.219\nIt's a hard transition to make if-\n&gt;&gt; That is.\n\n232\n00:11:29.219 --> 00:11:29.995\n&gt;&gt; You're coming from the Windows world.\n\n233\n00:11:29.995 --> 00:11:30.540\n&gt;&gt; Mm-hm.\n\n234\n00:11:30.540 --> 00:11:32.422\n&gt;&gt; But, it is a forward slash for\nyour directory.\n\n235\n00:11:32.422 --> 00:11:35.258\nSo I'm in /var/log.\n\n236\n00:11:35.258 --> 00:11:39.040\nIf I wanna go to the root\nof my hard drive, or\n\n237\n00:11:39.040 --> 00:11:41.475\nwhatever file system,\nnot necessarily the hard drive,\n\n238\n00:11:41.475 --> 00:11:45.070\ncause your file system can be mounted\nto several different hard drives, but\n\n239\n00:11:45.070 --> 00:11:49.290\nif I go to cd/, that takes me\nto the root of my file system.\n\n240\n00:11:49.290 --> 00:11:50.728\nThe very beginning of my file system.\n\n241\n00:11:50.728 --> 00:11:51.412\nAnd in there,\n\n242\n00:11:51.412 --> 00:11:55.245\nI can see all sorts of crazy folders that\nwe covered in the last episode, right?\n\n243\n00:11:55.245 --> 00:11:59.030\nSo that's the root, and\neverything else is underneath it.\n\n244\n00:11:59.030 --> 00:12:02.250\nIt is very rare that you work with\nsomething right here in the root.\n\n245\n00:12:02.250 --> 00:12:05.504\nIn fact, I usually only come to the root\nwhen I want to search my hard drive to\n\n246\n00:12:05.504 --> 00:12:06.180\nfind a file.\n\n247\n00:12:06.180 --> 00:12:07.691\nI can't remember where something is,\nand so\n\n248\n00:12:07.691 --> 00:12:09.292\nI want to come here to\nthe root to be able to look.\n\n249\n00:12:09.292 --> 00:12:11.318\nI don't normally have to\nchange directory for that,\n\n250\n00:12:11.318 --> 00:12:13.623\nwe have some other commands\nwe'll see later on that do that.\n\n251\n00:12:13.623 --> 00:12:17.367\nBut basically, from here I can\nnavigate wherever I want, but\n\n252\n00:12:17.367 --> 00:12:20.832\nthere are a few interesting\naliases that are available.\n\n253\n00:12:20.832 --> 00:12:25.187\nEarlier I showed you that if I typed cd,\nit would take me to my home directory, but\n\n254\n00:12:25.187 --> 00:12:28.600\nthe home directory is represented\na little weird, isn't it?\n\n255\n00:12:28.600 --> 00:12:30.370\nIt's represented as that tilde.\n\n256\n00:12:30.370 --> 00:12:33.010\nThe tilde's an alias that we can use also.\n\n257\n00:12:33.010 --> 00:12:38.620\nSo, for example, if I'm in my root and\nI go to cd home, see how it shows /home?\n\n258\n00:12:38.620 --> 00:12:42.270\nAnd then if I go into dpezet,\nit changes to the tilde.\n\n259\n00:12:42.270 --> 00:12:43.570\nIt knows that alias is there.\n\n260\n00:12:43.570 --> 00:12:45.222\nIf I go back to the root,\n\n261\n00:12:45.222 --> 00:12:51.660\nI could've actually typed cd ~ and\ngotten right there.\n\n262\n00:12:51.660 --> 00:12:54.430\nNow, you might ask yourself,\nwhy would I type that?\n\n263\n00:12:54.430 --> 00:12:55.952\nI could've just typed cd and\npressed Enter.\n\n264\n00:12:55.952 --> 00:12:57.770\nAnd you'd be exactly right,\nyes, that's what I'd do.\n\n265\n00:12:57.770 --> 00:13:03.784\nBut what if I was in /var/log, and\nI wanted to get to my download folder?\n\n266\n00:13:03.784 --> 00:13:08.301\nI can type cd to go back to my home\ndirectory, and then cd downloads.\n\n267\n00:13:08.301 --> 00:13:14.390\nOr I could type cd ~/Downloads.\n\n268\n00:13:14.390 --> 00:13:21.310\nAnd that tells it to go to my home folder,\nand then into that, I'm using that alias.\n\n269\n00:13:21.310 --> 00:13:25.663\nThat command is exactly\nthe same as if I had typed cd\n\n270\n00:13:25.663 --> 00:13:29.403\n/home/dpezet/Downloads/, right?\n\n271\n00:13:29.403 --> 00:13:30.920\nIt knows it's the same.\n\n272\n00:13:30.920 --> 00:13:36.202\nIn fact,\nit even plays nice with tab autocomplete.\n\n273\n00:13:36.202 --> 00:13:37.003\n&gt;&gt; Mm-hm.\n\n274\n00:13:37.003 --> 00:13:40.785\n&gt;&gt; See, so if I do ~/m and I hit tab,\nit knows that Music folder is there and\n\n275\n00:13:40.785 --> 00:13:42.260\nI can change into it.\n\n276\n00:13:42.260 --> 00:13:45.394\nSo the tilde is really handy when you're\ntrying to reference things back in your\n\n277\n00:13:45.394 --> 00:13:46.294\nhome folder, right?\n\n278\n00:13:46.294 --> 00:13:50.172\nYou can easily reference that and\njump right to that folder.\n\n279\n00:13:50.172 --> 00:13:51.995\n&gt;&gt; Nice.\n&gt;&gt; It's a nice shortcut to have.\n\n280\n00:13:51.995 --> 00:13:55.057\nIt's not the only one, though.\n\n281\n00:13:55.057 --> 00:13:56.961\nThere's dot and dot dot, right?\n\n282\n00:13:56.961 --> 00:13:58.275\nThese are weird ones.\n\n283\n00:13:58.275 --> 00:14:00.800\n&gt;&gt; [LAUGH]\n&gt;&gt; If I go to my home folder for\n\n284\n00:14:00.800 --> 00:14:01.740\nyou, here, I'll stay in music.\n\n285\n00:14:01.740 --> 00:14:03.910\nSo I'm in my music folder, which is empty.\n\n286\n00:14:03.910 --> 00:14:05.420\nWell, is it empty?\n\n287\n00:14:05.420 --> 00:14:08.640\nIf I do a ls -la,\n\n288\n00:14:08.640 --> 00:14:13.200\nevery directory, even an empty directory,\nhas two at least two entries.\n\n289\n00:14:13.200 --> 00:14:15.577\nAnd those two entries,\nthey might look like files,\n\n290\n00:14:15.577 --> 00:14:18.239\nthey actually look like directories,\nbut they're not.\n\n291\n00:14:18.239 --> 00:14:19.574\nThey're actually aliases.\n\n292\n00:14:19.574 --> 00:14:21.873\nThere are these two little\naliases that are in every folder.\n\n293\n00:14:21.873 --> 00:14:27.062\nOne is a dot, just a straight up dot,\nand the other one is, well, two dots.\n\n294\n00:14:27.062 --> 00:14:28.341\n&gt;&gt; [LAUGH]\n&gt;&gt; Not very exciting there, right?\n\n295\n00:14:28.341 --> 00:14:30.850\nAnd each one of these\nmeans something different.\n\n296\n00:14:30.850 --> 00:14:36.190\nThe dot is an alias for\nthis very directory, okay?\n\n297\n00:14:36.190 --> 00:14:39.220\nWell, that changes depending\non what directory I'm in.\n\n298\n00:14:39.220 --> 00:14:42.400\nSo right now,\nthis dot represents my music folder.\n\n299\n00:14:42.400 --> 00:14:49.380\nBut, if I switch to my downloads folder,\nshoot, let me do this the right way.\n\n300\n00:14:50.700 --> 00:14:51.890\nAnd then I'll show you what\nI was trying to there.\n\n301\n00:14:51.890 --> 00:14:53.530\nIf I change to my downloads folder and\n\n302\n00:14:53.530 --> 00:14:58.730\nI do an ls -la, I'll find that\nI've got the dot in this one, too.\n\n303\n00:14:58.730 --> 00:15:02.111\nExcept now,\nthis dot represents this folder, right?\n\n304\n00:15:02.111 --> 00:15:04.350\nIt represents the folder that I'm in.\n\n305\n00:15:04.350 --> 00:15:07.506\nAt some point I created an accidental\ntilde file, apparently.\n\n306\n00:15:07.506 --> 00:15:10.813\n[LAUGH] So I can see that right here,\nthough, the dot and the dot dot.\n\n307\n00:15:10.813 --> 00:15:13.118\nThe dot is representing\nmy downloads folder.\n\n308\n00:15:13.118 --> 00:15:17.762\nAnd so each of these will\nhave a dot inside of them.\n\n309\n00:15:17.762 --> 00:15:21.312\nThe dot dot I just used that, cd..\n\n310\n00:15:21.312 --> 00:15:27.320\nDot dot actually references the parent\nfolder, the one right above you.\n\n311\n00:15:27.320 --> 00:15:31.400\nSo if I'm in the music folder, and\nI wanna get back to my home folder,\n\n312\n00:15:31.400 --> 00:15:34.870\nI could type cd~, and it would take\nme right back to my home folder.\n\n313\n00:15:34.870 --> 00:15:39.450\nOr I could type cd.., and that would\njust take me to the parent folder.\n\n314\n00:15:39.450 --> 00:15:42.310\nNow, that's not really obvious here, so\n\n315\n00:15:42.310 --> 00:15:45.811\nlet me get into\n/var/log/unattended upgrades.\n\n316\n00:15:45.811 --> 00:15:52.928\nSo now I'm three folders deep and if I do\ncd~ that'll take me to my home folder,\n\n317\n00:15:52.928 --> 00:15:57.089\nbut maybe I just wanna\nget back to /var/log.\n\n318\n00:15:57.089 --> 00:16:00.474\nI could type cd /var/log.\n\n319\n00:16:00.474 --> 00:16:04.960\nOr I could just type cd.., and\nit takes me to the parent.\n\n320\n00:16:04.960 --> 00:16:07.792\n&gt;&gt; And Don, earlier we used\na tilde in the path as an alias,\n\n321\n00:16:07.792 --> 00:16:09.860\ncan we do the same thing with the dot dot?\n\n322\n00:16:09.860 --> 00:16:12.358\n&gt;&gt; Yeah, you can actually mix and\nmatch all these things.\n\n323\n00:16:12.358 --> 00:16:17.097\nI can't think of an example where I'd\nmix a tilde with a dot dot but for\n\n324\n00:16:17.097 --> 00:16:23.085\nexample I'll only show you here, I'm gonna\njump to let me get back to like ~/music.\n\n325\n00:16:23.085 --> 00:16:27.110\nRight, so there in, and let's say I\nwant to get to my downloads folder.\n\n326\n00:16:27.110 --> 00:16:31.920\nOkay, well, the downloads folder\nis in my home folder/downloads so\n\n327\n00:16:31.920 --> 00:16:36.890\nI could type CD ~/ Downloads,\nthat would work right?\n\n328\n00:16:36.890 --> 00:16:42.100\nBut I could also type\ncd ../Downloads right?\n\n329\n00:16:42.100 --> 00:16:46.461\nThat's gonna move me to the parent folder\nand then into the downloads sub folder and\n\n330\n00:16:46.461 --> 00:16:48.341\nso that gets me there just the same.\n\n331\n00:16:48.341 --> 00:16:50.344\nNow, I probably would have used\nthe tilled here because of one character.\n\n332\n00:16:50.344 --> 00:16:55.701\nBut if I was in /var/logs,\nand /var/log, without an s,\n\n333\n00:16:55.701 --> 00:17:00.637\nand maybe I was in that\nunattended upgrades folder, and\n\n334\n00:17:00.637 --> 00:17:05.040\nI wanted to switch into\nthat upstart folder.\n\n335\n00:17:05.040 --> 00:17:07.530\nWell, I wouldn't have the tilde option for\nthat, right?\n\n336\n00:17:07.530 --> 00:17:11.990\nSo that's where I would go ahead and\nuse the dot dot like that and\n\n337\n00:17:11.990 --> 00:17:13.960\nnow I transition right\ninto that other folder.\n\n338\n00:17:13.960 --> 00:17:16.620\nSo you can do it,\nyou can even use multiple dots.\n\n339\n00:17:16.620 --> 00:17:21.000\nIf there was something in /\nval that I wanted to get to.\n\n340\n00:17:21.000 --> 00:17:23.650\nLike maybe /val/backups, right.\n\n341\n00:17:23.650 --> 00:17:30.999\nI can type cd../../ Back-ups and now it's\ngonna move me into the parent of upstart,\n\n342\n00:17:30.999 --> 00:17:36.167\nwhich is log and then the parent of log,\nwhich is var/backups.\n\n343\n00:17:36.167 --> 00:17:37.680\nAnd it'll get me there and there I am.\n\n344\n00:17:37.680 --> 00:17:38.319\n&gt;&gt; Nice.\n\n345\n00:17:38.319 --> 00:17:41.881\n&gt;&gt; It probably would've been faster for\nme to just type /var/backup, but, again,\n\n346\n00:17:41.881 --> 00:17:44.470\nif you don't remember, or\nif you get a really long path.\n\n347\n00:17:44.470 --> 00:17:47.372\nIt makes it easy to jump up a couple\nof folders and you can do that.\n\n348\n00:17:47.372 --> 00:17:49.926\nNow, some of you are probably\nasking yourself,\n\n349\n00:17:49.926 --> 00:17:54.410\nwait a minute I can see where I would use\ndot dot, when the heck would I use dot?\n\n350\n00:17:54.410 --> 00:17:57.015\nWhen would I need to reference\nthe directory that I'm in?\n\n351\n00:17:57.015 --> 00:18:01.592\nAnd I'll oftentimes do that when\nI'm uncertain of whether the path\n\n352\n00:18:01.592 --> 00:18:03.850\nvariable is defined correctly.\n\n353\n00:18:05.480 --> 00:18:10.979\nWhen you run a program, it looks to\nthe path variable to find that program.\n\n354\n00:18:10.979 --> 00:18:14.151\nSo when I run something like\nls It's gonna look in /bin and\n\n355\n00:18:14.151 --> 00:18:16.460\n/sbin and all the usual places.\n\n356\n00:18:16.460 --> 00:18:17.590\nBut if I've downloaded a program and\n\n357\n00:18:17.590 --> 00:18:20.710\nit's right there in the folder with me,\nit doesn't look there.\n\n358\n00:18:20.710 --> 00:18:25.604\nEven if I'm in that folder and I try and\nrun the program, it's not there, right?\n\n359\n00:18:25.604 --> 00:18:31.100\nSo instead I might choose to run it and\nI'll have to tell it the full path.\n\n360\n00:18:31.100 --> 00:18:34.580\nWell if I'm already in the folder I can\nuse the dot to represent the folder that\n\n361\n00:18:34.580 --> 00:18:35.480\nI'm in.\n\n362\n00:18:35.480 --> 00:18:36.338\nSo for example,\n\n363\n00:18:36.338 --> 00:18:40.091\nI have a I know there's a script in my\nhome directory that I ran recently.\n\n364\n00:18:40.091 --> 00:18:43.636\n&gt;&gt; I was gonna say you really run into\nthe same thing with the script because\n\n365\n00:18:43.636 --> 00:18:47.314\nyou make your own custom folder, and\nthey're not part of your path, so.\n\n366\n00:18:47.314 --> 00:18:49.933\n&gt;&gt; Yeah, so I run VM Workstation for\nmy Virtual Machine.\n\n367\n00:18:49.933 --> 00:18:54.487\nAnd there's actually some system operating\nsystems in VMR workstation that they\n\n368\n00:18:54.487 --> 00:18:55.150\nhide away.\n\n369\n00:18:55.150 --> 00:18:56.037\nLike OST 2 support.\n\n370\n00:18:56.037 --> 00:18:59.600\nIf you were in OST 2 in a VM,\nyou don't see that in the options.\n\n371\n00:18:59.600 --> 00:19:02.340\nBut this unlocker, it's a collection\nof scripts that will unlock that and\n\n372\n00:19:02.340 --> 00:19:05.280\nlet you run other OS's like it was too.\n\n373\n00:19:05.280 --> 00:19:08.294\nAnd so it's got this Linux install script.\n\n374\n00:19:08.294 --> 00:19:11.880\nWell if I wanna run that\nscript it's not in my path.\n\n375\n00:19:11.880 --> 00:19:17.081\nAnd so if I try and run lnx-install.sh\nit's gonna look in /bin and\n\n376\n00:19:17.081 --> 00:19:18.880\n/sbin it's not gonna find it.\n\n377\n00:19:18.880 --> 00:19:25.555\nSo I would need to say ./lnx-\nInstall to point to it right here.\n\n378\n00:19:25.555 --> 00:19:31.340\nSo it'd know, look in the folder I'm in\nfor this script file and run it, right?\n\n379\n00:19:31.340 --> 00:19:32.588\nSo that's the way that that works.\n\n380\n00:19:32.588 --> 00:19:34.580\nAnd usually how we use the dot.\n\n381\n00:19:34.580 --> 00:19:37.770\nI'll also use it when I'm copying\nthings or moving things and\n\n382\n00:19:37.770 --> 00:19:39.640\nI wanna move something into\nthe folder that I'm in.\n\n383\n00:19:39.640 --> 00:19:42.205\nI'll use the dot to reference\nthat instead of saying\n\n384\n00:19:42.205 --> 00:19:45.950\n/home/dpazet/download/vmwareunlocker.\n\n385\n00:19:45.950 --> 00:19:50.370\nNow it's just ./ and the file number\nthat makes life a lot easier.\n\n386\n00:19:50.370 --> 00:19:51.223\n&gt;&gt; Convenient.\n\n387\n00:19:51.223 --> 00:19:54.425\n&gt;&gt; Yeah, so that's an example\nof where we'd use that dot.\n\n388\n00:19:54.425 --> 00:19:59.283\nSo those are some little aliases that we\ncan use and easy ways to navigate around\n\n389\n00:19:59.283 --> 00:20:04.012\nthe file structure to get into different\nplaces and start to look at things.\n\n390\n00:20:04.012 --> 00:20:07.976\nNow the other challenge you're gonna bump\ninto to is that there are some folders\n\n391\n00:20:07.976 --> 00:20:10.190\nthat may have tons of stuff in them.\n\n392\n00:20:10.190 --> 00:20:15.524\nSo for example if I go into /bin now I\nwanna look at the commands that are here,\n\n393\n00:20:15.524 --> 00:20:16.111\nright?\n\n394\n00:20:16.111 --> 00:20:19.392\nWhen I pull up a list,\nthere's four columns of stuff here.\n\n395\n00:20:19.392 --> 00:20:25.360\nIf I give it the longer format,\nthe LA the long and show all files.\n\n396\n00:20:25.360 --> 00:20:28.580\nIt's quite a bit of stuff right?\n\n397\n00:20:28.580 --> 00:20:31.359\nAnd so\nfinding a very particular command can be\n\n398\n00:20:31.359 --> 00:20:33.791\na little challenging sometimes right?\n\n399\n00:20:33.791 --> 00:20:36.940\nLet's say that I wanna find the echo file.\n\n400\n00:20:36.940 --> 00:20:37.920\nThat's what I'm looking for.\n\n401\n00:20:37.920 --> 00:20:39.640\nI'm looking for the echo command.\n\n402\n00:20:39.640 --> 00:20:42.318\nWell, the easy way that I do\nit is if you know the command\n\n403\n00:20:42.318 --> 00:20:46.297\nname you can type which echo and it'll\ntell you exactly where it is /bin/echo.\n\n404\n00:20:46.297 --> 00:20:47.628\nI don't have to hunt at right?\n\n405\n00:20:47.628 --> 00:20:51.150\nBut if you can't remember exactly\nthe name I run into this a lot right?\n\n406\n00:20:51.150 --> 00:20:54.496\nCan't remember exactly the name you\ncan come in and you can search for\n\n407\n00:20:54.496 --> 00:20:56.175\nparts of a name pretty easy right?\n\n408\n00:20:56.175 --> 00:20:59.330\nThe ls command actually has that built\ninto it I just haven't used it in\n\n409\n00:20:59.330 --> 00:21:00.410\nthe show yet.\n\n410\n00:21:00.410 --> 00:21:05.140\nSo for example if I know it starts with an\ne or I know it It could be echo, echoed,\n\n411\n00:21:05.140 --> 00:21:07.958\nechos, I don't know\nsome variation of that.\n\n412\n00:21:07.958 --> 00:21:13.840\nI wanna look for it, I could do ls echo*.\n\n413\n00:21:13.840 --> 00:21:15.920\nThe star is a wildcard.\n\n414\n00:21:15.920 --> 00:21:19.220\nIt's an asterisk that's what it\nreally is but people say star for\n\n415\n00:21:19.220 --> 00:21:21.204\nwhatever reason cuz people say stuff.\n\n416\n00:21:21.204 --> 00:21:25.720\nAnd that'll look for any file that\nstarts with the word echo, right?\n\n417\n00:21:25.720 --> 00:21:27.570\nAnd that may return\nthe command I'm looking for and\n\n418\n00:21:27.570 --> 00:21:29.040\nit may return other things.\n\n419\n00:21:29.040 --> 00:21:31.340\nThe less letters you provide,\nthe more stuff you'll get back.\n\n420\n00:21:31.340 --> 00:21:35.230\nIf I just do, ls e star, it's gonna show\nme every command that starts with an e.\n\n421\n00:21:35.230 --> 00:21:38.950\nAnd that may be a lot just five\nthis times that's not so bad.\n\n422\n00:21:38.950 --> 00:21:42.180\nBut now I see each of those and\nI can start to try and find things.\n\n423\n00:21:42.180 --> 00:21:45.760\nYou can use that star\nseveral different ways.\n\n424\n00:21:45.760 --> 00:21:48.450\nFor example, you could use ls * sh.\n\n425\n00:21:48.450 --> 00:21:52.883\nI want commands that end in sh,\npretty much trying to find scripts.\n\n426\n00:21:52.883 --> 00:21:57.740\nOr *.sh, files that have the script\nextension, that shell script extension.\n\n427\n00:21:57.740 --> 00:21:59.028\nSo, that's one way to do it.\n\n428\n00:21:59.028 --> 00:22:03.336\nYou can also use it to find things\nwhere the text is in the middle.\n\n429\n00:22:03.336 --> 00:22:08.006\nSo for example if I do *ch*,\nnow it's gonna be any\n\n430\n00:22:08.006 --> 00:22:12.990\ncommand that contains ch\nin the command itself.\n\n431\n00:22:12.990 --> 00:22:16.400\nIt may be at the beginning\nlike in ch mode.\n\n432\n00:22:16.400 --> 00:22:18.991\nIt might be at the end like in touch.\n\n433\n00:22:18.991 --> 00:22:21.479\nOr it might be in the middle like echo.\n\n434\n00:22:21.479 --> 00:22:23.480\nThat finds it regardless.\n\n435\n00:22:23.480 --> 00:22:25.843\nSo if I just remember part of the command.\n\n436\n00:22:25.843 --> 00:22:27.790\nMaybe I am working with a NTFS partition.\n\n437\n00:22:27.790 --> 00:22:32.070\nSomebody gaves me a Windows hard drive and\nI got to get stuff off of it this happens.\n\n438\n00:22:32.070 --> 00:22:35.010\nSo I might come here and say well I\nknow I have got some NTFS commands.\n\n439\n00:22:35.010 --> 00:22:40.476\nLet me do ls* ntfs* and now I'll see\nevery command that has to do with it.\n\n440\n00:22:40.476 --> 00:22:44.199\nMost of them start with NTFS\ncuz that makes sense, but\n\n441\n00:22:44.199 --> 00:22:47.929\nhere's low NTFS-3G that\ndidn't start with NTFS.\n\n442\n00:22:47.929 --> 00:22:50.087\nI might have missed that\ncommand if I just looked for\n\n443\n00:22:50.087 --> 00:22:51.700\nthe ones that were in the n section.\n\n444\n00:22:51.700 --> 00:22:56.474\nSo it's a great way to find commands\nthat we don't know exactly the name.\n\n445\n00:22:56.474 --> 00:23:00.709\nThere is another wildcard we can\nuse which is a question mark,\n\n446\n00:23:00.709 --> 00:23:05.933\ndon't confuse them, a star represents\nany number of characters, right?\n\n447\n00:23:05.933 --> 00:23:11.300\nA question mark represents\nany one character, right?\n\n448\n00:23:11.300 --> 00:23:15.844\nSo if I were to do ls echo?,\n\n449\n00:23:15.844 --> 00:23:21.440\nthat doesn't find echo right?\n\n450\n00:23:21.440 --> 00:23:25.730\nBecause what I said is I'm looking for\nany command has E-C-H-O.\n\n451\n00:23:25.730 --> 00:23:28.650\nAnd then one more character that can be\nanything which is one more character.\n\n452\n00:23:28.650 --> 00:23:32.005\nWell echo doesn't have one more\ncharacter so doesn't find it.\n\n453\n00:23:32.005 --> 00:23:36.565\nIf I did E-C-H?, that would mean\na command that starts with ECH\n\n454\n00:23:36.565 --> 00:23:41.205\nfollowed by one more character,\nand it finds echo.\n\n455\n00:23:41.205 --> 00:23:43.445\nSo question mark is useful\nif you're just looking for\n\n456\n00:23:43.445 --> 00:23:44.565\none particular variation, right?\n\n457\n00:23:44.565 --> 00:23:48.178\nRemember in my home directory where\ndid I create the Junk folder?\n\n458\n00:23:48.178 --> 00:23:49.157\nWas it just right here?\n\n459\n00:23:49.157 --> 00:23:51.324\nYup, in my Junk folder, no not there.\n\n460\n00:23:51.324 --> 00:23:57.638\nSomewhere I made a Junk folder and here,\nI've got dir1, dir2, and dir3 right.\n\n461\n00:23:57.638 --> 00:23:58.830\nThese three directories.\n\n462\n00:23:58.830 --> 00:24:06.193\nIf I did ls dir?, It would find\ndirectory 1, directory 2, directory 3.\n\n463\n00:24:06.193 --> 00:24:09.030\nCuz they're all dir\nfollowed by one character.\n\n464\n00:24:09.030 --> 00:24:10.710\nSo that's useful sometimes.\n\n465\n00:24:10.710 --> 00:24:13.340\nYou can actually do multiple\nquestion marks like that.\n\n466\n00:24:13.340 --> 00:24:15.830\nYou can do question marks at\nthe beginning and ending, but\n\n467\n00:24:15.830 --> 00:24:19.140\njust remember that the question\nmark is representing one character.\n\n468\n00:24:19.140 --> 00:24:20.593\nSo it's an alternative to asterisk.\n\n469\n00:24:20.593 --> 00:24:23.916\nYou're probably gonna use asterisk more,\nright, or use that star, but\n\n470\n00:24:23.916 --> 00:24:25.750\nthe question mark is available as well.\n\n471\n00:24:27.140 --> 00:24:28.790\nLet's see, what else do we have?\n\n472\n00:24:28.790 --> 00:24:31.784\nBrackets, square brackets, you can\nhave some fun with this one, right?\n\n473\n00:24:31.784 --> 00:24:37.586\nFor example, I might wanna say ls dir, and\nmaybe I just want to get directory 1 and\n\n474\n00:24:37.586 --> 00:24:41.134\ndirectory 2, and\nnot directory 3, all right?\n\n475\n00:24:41.134 --> 00:24:47.090\nIf you do a square bracket like that\n[ ] you can put ranges in between.\n\n476\n00:24:47.090 --> 00:24:51.911\nI could say something like [a-z],\n\n477\n00:24:51.911 --> 00:24:56.900\nor [A-Z], or [0-9], right?\n\n478\n00:24:56.900 --> 00:25:00.436\nThat would find any letter, upper case or\nlower case, and any number, 0-9,\n\n479\n00:25:00.436 --> 00:25:01.950\nnot special characters, right?\n\n480\n00:25:01.950 --> 00:25:06.403\nBut if I just wanted to find 1 and 2,\nI might come in here and say ls dir and\n\n481\n00:25:06.403 --> 00:25:10.857\nthen in brackets, [1,2] or really,\nI could say 1 through 2, but\n\n482\n00:25:10.857 --> 00:25:12.877\nthat's, either way-\n&gt;&gt; [LAUGH]\n\n483\n00:25:12.877 --> 00:25:14.630\n&gt;&gt; Same goal here, right?\n\n484\n00:25:14.630 --> 00:25:17.040\nAnd when I run that,\nsee what it found, directory 1 and\n\n485\n00:25:17.040 --> 00:25:19.030\n2, and it didn't find directory 3?\n\n486\n00:25:19.030 --> 00:25:22.010\nRanges like that can be handy sometimes\nwhen you're working with files,\n\n487\n00:25:22.010 --> 00:25:24.000\nwhen you're trying to return\na list that's very specific.\n\n488\n00:25:25.070 --> 00:25:28.120\nThis lets you filter that down and\nminimize it.\n\n489\n00:25:28.120 --> 00:25:31.693\nJust remember that letters are treated\ndifferently if they're uppercase, and\n\n490\n00:25:31.693 --> 00:25:33.857\nthey're lowercase, and special characters.\n\n491\n00:25:33.857 --> 00:25:37.763\nSo when you do a bracket like this,\nthey're square brackets, first off,\n\n492\n00:25:37.763 --> 00:25:40.243\ndon't leave a space after\nyour search string,\n\n493\n00:25:40.243 --> 00:25:43.290\ncuz that would mean there would\nbe a space in the file name.\n\n494\n00:25:43.290 --> 00:25:47.573\nAnd then you specify the ranges as\neither a single entry and a comma, or\n\n495\n00:25:47.573 --> 00:25:51.650\na range with a hyphen in between it and\nthen commas between breaks.\n\n496\n00:25:51.650 --> 00:25:58.294\nSo I might say [a-c], and then [e-z].\n\n497\n00:25:58.294 --> 00:26:01.390\nSo that would be any file\nthat started with dir, and\n\n498\n00:26:01.390 --> 00:26:05.710\nthen had any letter after it except for\nthe letter d, skip the letter d.\n\n499\n00:26:05.710 --> 00:26:09.410\nAnd so now it's going to look for\nthat range, and you can do many ranges.\n\n500\n00:26:09.410 --> 00:26:10.280\nThere is a limit.\n\n501\n00:26:10.280 --> 00:26:11.720\nI think it's something like nine ranges.\n\n502\n00:26:11.720 --> 00:26:12.883\nBut after that it gets a really angry.\n\n503\n00:26:12.883 --> 00:26:15.740\n[LAUGH] But\nyou can do usually more than enough.\n\n504\n00:26:15.740 --> 00:26:18.300\nAnd typically it's numbers\nthat we are doing with this.\n\n505\n00:26:18.300 --> 00:26:20.122\nI might be looking for a script, though.\n\n506\n00:26:20.122 --> 00:26:24.920\nAnd saying, well, I can't remember,\nI wanna find DOM script.\n\n507\n00:26:26.060 --> 00:26:31.042\nAnd I can't remember if it was\na shell script like sh, or\n\n508\n00:26:31.042 --> 00:26:36.034\nif it was Python, or\nif it was something of that nature.\n\n509\n00:26:36.034 --> 00:26:40.210\nAnd so you can come in, and\nyou can designate those values.\n\n510\n00:26:40.210 --> 00:26:47.540\nSo I might look for, if it's got sh,\nor if it's got py, or whatever, and\n\n511\n00:26:47.540 --> 00:26:51.150\nso you can start to put entries in like\nthat, and now you're looking for those.\n\n512\n00:26:51.150 --> 00:26:53.820\nFor me, it's usually faster just to\nlook for each one individually, or\n\n513\n00:26:53.820 --> 00:26:55.985\njust do a stinking wild card here.\n\n514\n00:26:55.985 --> 00:26:58.040\n&gt;&gt; [LAUGH]\n&gt;&gt; And say, show me all of them.\n\n515\n00:26:58.040 --> 00:27:00.080\nSo there are different\nways you can use ranges.\n\n516\n00:27:00.080 --> 00:27:03.150\nWe'll cover ranges more when\nwe get into the grep command.\n\n517\n00:27:03.150 --> 00:27:05.660\nA grep is an amazing regular\nexpression searcher and\n\n518\n00:27:05.660 --> 00:27:07.720\nregular expressions are super powerful.\n\n519\n00:27:07.720 --> 00:27:11.470\nThis is actually a very light version\nof a regular expression right here.\n\n520\n00:27:11.470 --> 00:27:13.100\nSo we're gonna see those\nlater cause they're very,\n\n521\n00:27:13.100 --> 00:27:16.380\nvery powerful tools that we use\na lot in system administration.\n\n522\n00:27:16.380 --> 00:27:20.580\nBut as far as finding files, you can use\nthat just to simply define ranges and\n\n523\n00:27:20.580 --> 00:27:22.070\nlocate stuff quickly.\n\n524\n00:27:22.070 --> 00:27:23.210\n&gt;&gt; All right, great stuff there, Don.\n\n525\n00:27:23.210 --> 00:27:25.820\nWe've learned about the file system\nhierarchy in previous episodes.\n\n526\n00:27:25.820 --> 00:27:28.880\nIn this episode, we learned how to\nnavigate around that hierarchy,\n\n527\n00:27:28.880 --> 00:27:30.950\nwork through those different folders,\n\n528\n00:27:30.950 --> 00:27:34.310\nas well as being able to\nlocate things when we need to.\n\n529\n00:27:34.310 --> 00:27:37.100\nSo we've got more coming your way, but\nunfortunately we're out of time for\n\n530\n00:27:37.100 --> 00:27:38.340\nthis particular episode.\n\n531\n00:27:38.340 --> 00:27:41.550\nSo signing off for ITProTV,\nI've been your host, Mike Rodrick.\n\n532\n00:27:41.550 --> 00:27:42.340\n&gt;&gt; And I'm Don Pezet.\n\n533\n00:27:42.340 --> 00:27:44.410\n&gt;&gt; And we'll see you next time.\n\n534\n00:27:44.410 --> 00:27:50.128\n[MUSIC]\n\n535\n00:27:50.128 --> 00:27:53.831\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222511469"
        },
        {
          "description": "Don and Zach discuss where to send re-directed output, creating a file, how to add data on an existing file, expansion, and creating a numerical range-useful for working with multiple files.",
          "length": "1383",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-2-filesystem_commands_pt2-061917-PGM.00_22_47_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-2-filesystem_commands_pt2-061917-PGM.00_22_47_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-2-2-filesystem_commands_pt2-061917-PGM.00_22_47_00.Still001-sm.jpg",
          "title": "Filesystem Commands Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.260\nWelcome to ITPRO.TV.\n\n2\n00:00:01.260 --> 00:00:06.011\nI'm your host Don- [CROSSTALK].\n\n3\n00:00:06.011 --> 00:00:08.480\n[MUSIC]\n\n4\n00:00:08.480 --> 00:00:12.170\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.170 --> 00:00:13.640\n&gt;&gt; Hello again, and thank you for\n\n6\n00:00:13.640 --> 00:00:17.430\nchoosing ITPRO.TV,\nhelping you learn wherever you go.\n\n7\n00:00:17.430 --> 00:00:21.280\nI'm you host, Zach Memos as we continue\non with becoming a Linux Power user.\n\n8\n00:00:21.280 --> 00:00:26.780\nThis is Part 2 Of file system commands,\nand I'm not the brain behind this.\n\n9\n00:00:26.780 --> 00:00:29.490\nThe man bringing us all\nthe information is Don Pezet.\n\n10\n00:00:29.490 --> 00:00:30.010\nRight over here.\n\n11\n00:00:30.010 --> 00:00:31.530\nDon, good to see you, sir.\n\n12\n00:00:31.530 --> 00:00:32.873\n&gt;&gt; Hey, thanks for\nhaving me back in the studio.\n\n13\n00:00:32.873 --> 00:00:36.100\nAnd you're ready to dive right back\ninto becoming a Linux power user.\n\n14\n00:00:36.100 --> 00:00:39.340\nIn this episode, we're gonna be taking\na look at a few different things.\n\n15\n00:00:39.340 --> 00:00:41.904\nWe're gonna take a look at\ncommand output redirection.\n\n16\n00:00:41.904 --> 00:00:45.407\nAnd some file expansion which is kind of\na fun little thing we'll take a look at at\n\n17\n00:00:45.407 --> 00:00:46.820\nthe end of the episode.\n\n18\n00:00:46.820 --> 00:00:49.453\nBut command redirection is\nthe main one that I wanna hit.\n\n19\n00:00:49.453 --> 00:00:52.476\nCuz it's an important thing\nthat we'll utilize quite a bit.\n\n20\n00:00:52.476 --> 00:00:54.400\nBut we kinda already saw\nsome command redirection.\n\n21\n00:00:54.400 --> 00:00:55.930\nWe're gonna see a little more here.\n\n22\n00:00:55.930 --> 00:00:59.590\nAnd it ties in to working with the files\nsystem because we need output to a file.\n\n23\n00:00:59.590 --> 00:01:01.618\nSo we're gonna get a chance to\nsee how all of that works and\n\n24\n00:01:01.618 --> 00:01:03.104\ngo through it right here in this episode.\n\n25\n00:01:03.104 --> 00:01:05.774\n&gt;&gt; Don,\nwhere would I want to redirect the output?\n\n26\n00:01:05.774 --> 00:01:08.224\nWhere are we sending it?\n\n27\n00:01:08.224 --> 00:01:10.338\n&gt;&gt; Let's set the ground rules here right.\n\n28\n00:01:10.338 --> 00:01:14.011\nWhich is when I run a command,\nit's normally gonna output to the screen.\n\n29\n00:01:14.011 --> 00:01:15.862\nAnd we normally want that so\nwe can see it.\n\n30\n00:01:15.862 --> 00:01:19.550\nBut we don't always want to\noutput to the screen, right?\n\n31\n00:01:19.550 --> 00:01:20.945\nSometimes we wanna output to a file.\n\n32\n00:01:20.945 --> 00:01:25.805\nAnd a great example of that would be\nif I'm about to run a command that\n\n33\n00:01:25.805 --> 00:01:29.058\nhas a lot of output,\ntons and tons of output.\n\n34\n00:01:29.058 --> 00:01:31.032\nI might wanna dump that to a file.\n\n35\n00:01:31.032 --> 00:01:33.643\nThe reason I would dump it to a file\nis that I can come back later on, and\n\n36\n00:01:33.643 --> 00:01:35.910\nI can edit it, and\nI can look at it, and I can read it.\n\n37\n00:01:35.910 --> 00:01:38.764\nTechnically all logging\nsystems are doing this, right.\n\n38\n00:01:38.764 --> 00:01:41.390\nThere's error messages that\npop up on your system.\n\n39\n00:01:41.390 --> 00:01:43.000\nWell if you have a headless server,\n\n40\n00:01:43.000 --> 00:01:45.477\nyou've got a server that's\non a rack in a server room.\n\n41\n00:01:45.477 --> 00:01:48.410\nIt starts generating errors,\nyou're not gonna see that.\n\n42\n00:01:48.410 --> 00:01:49.870\nYou're not standing in\nfront of that servers,\n\n43\n00:01:49.870 --> 00:01:51.700\nespecially if there's a thousand servers.\n\n44\n00:01:51.700 --> 00:01:54.787\nSo instead,\nthey upload those messages to a file.\n\n45\n00:01:54.787 --> 00:01:56.130\nAnd that where you'd just come back and\n\n46\n00:01:56.130 --> 00:01:57.806\nthen look at the file\nwhenever you've got time.\n\n47\n00:01:57.806 --> 00:02:00.731\nSo, anytime you're dealing with\na large amount of screen output,\n\n48\n00:02:00.731 --> 00:02:01.830\nyou want to go to a file.\n\n49\n00:02:01.830 --> 00:02:03.200\nOr anytime you want a time delay,\n\n50\n00:02:03.200 --> 00:02:06.470\nwhere you can look at the data later,\nyou'll want to output to a file.\n\n51\n00:02:06.470 --> 00:02:11.860\nAnd fortunately, any command output can be\nredirected and output right into a file.\n\n52\n00:02:11.860 --> 00:02:12.848\n&gt;&gt; Let's see it.\n\n53\n00:02:12.848 --> 00:02:13.358\n&gt;&gt; All right.\n&gt;&gt; [LAUGH]\n\n54\n00:02:13.358 --> 00:02:15.944\n&gt;&gt; It's actually really easy to do.\n\n55\n00:02:15.944 --> 00:02:17.175\nIn an earlier episode,\n\n56\n00:02:17.175 --> 00:02:20.806\nwe took a look at pipelining commands.\nWhere you take the output for\n\n57\n00:02:20.806 --> 00:02:24.068\none command, and\nyou feed it as input to another command.\n\n58\n00:02:24.068 --> 00:02:24.848\nSo for example,\n\n59\n00:02:24.848 --> 00:02:29.490\nwhat I did, I'll show you here on my\nlaptop is I took the LS command, right?\n\n60\n00:02:29.490 --> 00:02:32.210\nSo let me just go into the binary\nfolder here and I'll do an LS.\n\n61\n00:02:32.210 --> 00:02:34.056\nSo here's a list of all the files.\n\n62\n00:02:34.056 --> 00:02:37.638\nAnd I might want to pipe\nthat into another command,\n\n63\n00:02:37.638 --> 00:02:41.150\nlike the sort command to\nsort it alphabetically.\n\n64\n00:02:41.150 --> 00:02:43.060\nWell, this is already\nsorted alphabetically,\n\n65\n00:02:43.060 --> 00:02:45.170\nso maybe I'll sort it in reverse.\n\n66\n00:02:45.170 --> 00:02:46.670\nSo instead of a to z, we'll go z to a.\n\n67\n00:02:46.670 --> 00:02:47.670\nThere we go.\n\n68\n00:02:47.670 --> 00:02:52.020\nI took the output of one command and I\nsent it as the input for another command.\n\n69\n00:02:52.020 --> 00:02:54.390\nWell, very similar to that,\n\n70\n00:02:54.390 --> 00:02:59.640\ninstead of using the pipe symbol,\nI can use the greater than symbol.\n\n71\n00:02:59.640 --> 00:03:03.640\nAnd what the greater than symbol\ndoes is it says, take the output.\n\n72\n00:03:03.640 --> 00:03:08.225\nAnd instead of sending it to my\nscreen send it somewhere else.\n\n73\n00:03:08.225 --> 00:03:11.220\nAnd that somewhere else is\nnormally going to be a file.\n\n74\n00:03:11.220 --> 00:03:14.340\nNow, what I'm gonna do here is just\nkinda point it to my home directory and\n\n75\n00:03:14.340 --> 00:03:19.740\nI'll do like a file called- whoops,\noutput.txt.\n\n76\n00:03:19.740 --> 00:03:23.650\nSo now when I ran that LS command,\nwhat came out of my screen?\n\n77\n00:03:23.650 --> 00:03:26.110\nNothing, it didn't output to my screen.\n\n78\n00:03:26.110 --> 00:03:29.480\nInstead, it output to that\nfile that I specified.\n\n79\n00:03:29.480 --> 00:03:34.760\nAnd now at my leisure, whenever I want,\nI can go and take a look at that file.\n\n80\n00:03:34.760 --> 00:03:37.110\nI'll use the less command,\nbut you could use cat,\n\n81\n00:03:37.110 --> 00:03:41.540\nor more, or any of the various\ncommands to open up a file.\n\n82\n00:03:41.540 --> 00:03:44.770\nAnd I'll take a look at it,\nand there's that output.\n\n83\n00:03:44.770 --> 00:03:47.790\nInstead of going to screen,\nit went right here to this file.\n\n84\n00:03:47.790 --> 00:03:48.531\n&gt;&gt; That's great.\n\n85\n00:03:48.531 --> 00:03:50.250\nNow does that get everything?\n\n86\n00:03:50.250 --> 00:03:53.080\nDoes that get all the output\nwhen you send out?\n\n87\n00:03:53.080 --> 00:03:55.090\n&gt;&gt; In normal circumstances, yes.\n\n88\n00:03:55.090 --> 00:03:56.813\nSo normally yeah this\nwould get everything.\n\n89\n00:03:56.813 --> 00:03:59.178\nBut there are some situations\nwhere it doesn't and\n\n90\n00:03:59.178 --> 00:04:01.690\nthe most common example\nthat would be errors.\n\n91\n00:04:01.690 --> 00:04:04.830\nWhen you run a command,\nsometimes you get an error, okay.\n\n92\n00:04:04.830 --> 00:04:07.680\nWell what this is capturing is\nwhat's called standard out.\n\n93\n00:04:07.680 --> 00:04:10.484\nThere's actually a couple of different\noutputs that you get when you\n\n94\n00:04:10.484 --> 00:04:11.122\nrun a command.\n\n95\n00:04:11.122 --> 00:04:15.877\nBut the main reasons that we care\nabout are the standard output or\n\n96\n00:04:15.877 --> 00:04:18.882\nstdout, and standard error or stderr.\n\n97\n00:04:18.882 --> 00:04:21.670\nAll right so standard out and\nstandard error.\n\n98\n00:04:21.670 --> 00:04:25.120\nWhen I do a redirect like what we\nsee here with a greater than symbol,\n\n99\n00:04:25.120 --> 00:04:29.580\nthat is just capturing standard out,\nstdout.\n\n100\n00:04:29.580 --> 00:04:33.052\nSo if you run that,\nit's gonna capture it and there you go.\n\n101\n00:04:33.052 --> 00:04:38.150\nIt's not going to capture std err,\nE-R-R, right?\n\n102\n00:04:38.150 --> 00:04:40.143\nErrors will still go to my screen.\n\n103\n00:04:40.143 --> 00:04:43.629\nSo now, if I run it like this it's\ncapturing all the good output and\n\n104\n00:04:43.629 --> 00:04:44.760\nleaving out the bad.\n\n105\n00:04:44.760 --> 00:04:48.290\nNow, that can be a problem because\nwhat if I'm running a script, and\n\n106\n00:04:48.290 --> 00:04:50.210\nthe script is a 100 steps?\n\n107\n00:04:50.210 --> 00:04:51.870\nAnd two of the steps fail.\n\n108\n00:04:51.870 --> 00:04:55.090\nWell, I'll capture the output for\nthe 98 steps that succeeded.\n\n109\n00:04:55.090 --> 00:04:57.201\nAnd I\"ll be missing the output for\nthe two that failed.\n\n110\n00:04:57.201 --> 00:04:58.974\nSo I'm looking at this file down the road.\n\n111\n00:04:58.974 --> 00:05:00.260\nI'm gonna look at it and say,\n\n112\n00:05:00.260 --> 00:05:03.080\nI know two commands failed\nbecause I'm two lines shorts.\n\n113\n00:05:03.080 --> 00:05:04.068\nWhich ones?\n\n114\n00:05:04.068 --> 00:05:06.480\nNow I've got to go through all 98 lines.\n\n115\n00:05:06.480 --> 00:05:07.930\nIt's a nightmare.\n\n116\n00:05:07.930 --> 00:05:11.120\nSo we wanna capture standard\nerror as well, right.\n\n117\n00:05:11.120 --> 00:05:12.335\nLet me just give you an example here.\n\n118\n00:05:12.335 --> 00:05:15.281\nIf I try and run something like rngd -v,\n\n119\n00:05:15.281 --> 00:05:20.405\nthat's gonna get the version of my\nrandom number generator, right.\n\n120\n00:05:20.405 --> 00:05:22.210\nAnd tell me what sources that I'm using.\n\n121\n00:05:22.210 --> 00:05:27.813\nWell when I run it, see how I got\nthis unable to open file/dev/tpm0.\n\n122\n00:05:27.813 --> 00:05:31.499\nAnd I got unable to adjust the right\nwake up threshold permission denied.\n\n123\n00:05:31.499 --> 00:05:35.020\nWell, I didn't run it as an administrator,\nso it generated some errors, right?\n\n124\n00:05:35.020 --> 00:05:35.690\nThe command ran,\n\n125\n00:05:35.690 --> 00:05:40.700\nI can actually see here's my entropy\nsource is great but I did get errors.\n\n126\n00:05:40.700 --> 00:05:44.498\nIf I wanna output errors I\ncould take that command.\n\n127\n00:05:44.498 --> 00:05:47.750\nAnd I could use that greater\nthan symbol like before.\n\n128\n00:05:47.750 --> 00:05:52.330\nAnd I've could send that somewhere\nto like output.txt, right.\n\n129\n00:05:52.330 --> 00:05:54.550\nBut when I run that it's\nnot gonna get the errors.\n\n130\n00:05:54.550 --> 00:05:57.915\nBut if I change this greater than\nsymbol and stick a 2 before it.\n\n131\n00:05:57.915 --> 00:06:01.390\nNow it's gonna get the errors, okay?\n\n132\n00:06:01.390 --> 00:06:05.792\nNow when I run that,\nwhat I'm doing is saying two greater than.\n\n133\n00:06:05.792 --> 00:06:08.830\nAnd two greater than means get\nthe second set of information.\n\n134\n00:06:08.830 --> 00:06:11.510\nThe first set of information\nis standard out, right?\n\n135\n00:06:11.510 --> 00:06:12.840\nSo if I did one greater than,\n\n136\n00:06:12.840 --> 00:06:14.880\nthat's the same thing as doing\na regular greater than, right?\n\n137\n00:06:14.880 --> 00:06:16.000\nThat's the standard out.\n\n138\n00:06:16.000 --> 00:06:18.290\nThis is gonna get standard error.\n\n139\n00:06:18.290 --> 00:06:21.720\nNow just like before,\nthis is only getting the errors.\n\n140\n00:06:21.720 --> 00:06:24.900\nThe other one only got the good stuff,\nthe successes.\n\n141\n00:06:24.900 --> 00:06:28.550\nThis is only gonna get the errors,\nand dump those in output.txt.\n\n142\n00:06:28.550 --> 00:06:30.656\nSo look what came up on my screen.\n\n143\n00:06:30.656 --> 00:06:34.320\nThe success, this is the good stuff,\ncame up on the screen.\n\n144\n00:06:34.320 --> 00:06:38.020\nAnd just the error went into output.txt.\n\n145\n00:06:38.020 --> 00:06:41.390\nAnd so if I take a look at that file.\n\n146\n00:06:41.390 --> 00:06:43.730\nSo I'm gonna pull that up on the screen.\n\n147\n00:06:43.730 --> 00:06:46.359\nThere we go I can see the two\nerrors are right there.\n\n148\n00:06:46.359 --> 00:06:49.804\nAll right now if you want to give them\nboth which would probably be a little more\n\n149\n00:06:49.804 --> 00:06:50.730\nrealistic.\n\n150\n00:06:50.730 --> 00:06:52.945\nThen instead of a one or a two.\n\n151\n00:06:52.945 --> 00:06:56.351\nWhat you'll do is you'll replace\nthat with an ampersand and\n\n152\n00:06:56.351 --> 00:06:58.670\nwhen you do an ampersand like that.\n\n153\n00:06:58.670 --> 00:07:01.917\nIt's gonna get the successes and\nthe failures, right.\n\n154\n00:07:01.917 --> 00:07:05.610\nSo standard out and standard error,\nand put them both in there.\n\n155\n00:07:05.610 --> 00:07:08.825\nSo when you're running a command,\nor a script, or a series of events.\n\n156\n00:07:08.825 --> 00:07:11.769\nAnd you wanna output that to\na file to be able to review,\n\n157\n00:07:11.769 --> 00:07:14.149\nthen this is usually what we're gonna use.\n\n158\n00:07:14.149 --> 00:07:17.060\nThe ampersand followed by\na greater than symbol.\n\n159\n00:07:17.060 --> 00:07:18.080\nAnd that'll dump out.\n\n160\n00:07:18.080 --> 00:07:20.250\nAnd see how nothing came up on my screen?\n\n161\n00:07:20.250 --> 00:07:22.790\nIt all went right into there.\n\n162\n00:07:22.790 --> 00:07:26.000\nNow, I'm not the biggest fan of this.\n\n163\n00:07:26.000 --> 00:07:27.760\nBecause, not because it doesn't work.\n\n164\n00:07:27.760 --> 00:07:28.530\nIt does work, right.\n\n165\n00:07:28.530 --> 00:07:29.100\nSo that's cool.\n\n166\n00:07:29.100 --> 00:07:31.970\nBut because you don't see\nanything on the screen.\n\n167\n00:07:31.970 --> 00:07:34.710\nAnd if you're running some kinda\nautomated script or a background,\n\n168\n00:07:34.710 --> 00:07:37.100\nlike a schedule job,\nyou're probably fine with that.\n\n169\n00:07:37.100 --> 00:07:39.250\nBut if you're doing, like me,\nand you're sitting here.\n\n170\n00:07:39.250 --> 00:07:40.270\nNow I immediately have to go and\n\n171\n00:07:40.270 --> 00:07:42.520\nlook at this file to find\nout what happened, right.\n\n172\n00:07:42.520 --> 00:07:44.648\nSo there is actually another\nlittle command I wanna show you.\n\n173\n00:07:44.648 --> 00:07:49.601\nAnd it's different from this type\nof redirection is instead of\n\n174\n00:07:49.601 --> 00:07:52.318\nusing that command redirection.\n\n175\n00:07:52.318 --> 00:07:56.270\nI can do a pipe, like we saw in\nthe executing commands episodes.\n\n176\n00:07:56.270 --> 00:07:59.294\nI'll do a pipe to take\nthe orange e dash v output.\n\n177\n00:07:59.294 --> 00:08:05.224\nPut and redirect it to the tee command,\nall right, T-E-E.\n\n178\n00:08:05.224 --> 00:08:10.070\nTee is a Linux command, a bash command,\nit's been around for a long time.\n\n179\n00:08:10.070 --> 00:08:14.010\nAnd what it does, is it takes\nyour output and puts in a file.\n\n180\n00:08:14.010 --> 00:08:14.785\nSounds familiar.\n\n181\n00:08:14.785 --> 00:08:17.190\nBut it also shows it on the screen.\n\n182\n00:08:17.190 --> 00:08:18.356\nIt does both.\n\n183\n00:08:18.356 --> 00:08:22.060\nIt outputs to the file redirect,\nas well as my screen.\n\n184\n00:08:22.060 --> 00:08:25.850\nSo when I run that, see how I get\nthe information on the screen.\n\n185\n00:08:25.850 --> 00:08:29.630\nThere's my errors that come up, and\nit's outputting into that text file.\n\n186\n00:08:29.630 --> 00:08:32.109\nSo that's really handy when\nyou're running commands and\n\n187\n00:08:32.109 --> 00:08:33.483\nyou wanna see what's going on.\n\n188\n00:08:33.483 --> 00:08:37.558\nSo for example, if I do ls-lh.\n\n189\n00:08:37.558 --> 00:08:39.180\nI'll pipe that,\nwe'll get really complex here, right?\n\n190\n00:08:39.180 --> 00:08:41.834\nI'm gonna pipe that into the sort command,\nand so\n\n191\n00:08:41.834 --> 00:08:44.689\nnow I'm gonna sort\nthe information that's in here.\n\n192\n00:08:44.689 --> 00:08:50.058\nAnd then I'm going to take all that and\ninstead of redirecting there,\n\n193\n00:08:50.058 --> 00:08:55.730\nI'll just go into Tee one more time and\nI'll send that into output.txt.\n\n194\n00:08:55.730 --> 00:09:00.290\nAnd now when I run that it's gonna pull\nthe listing, sort it alphabetically,\n\n195\n00:09:00.290 --> 00:09:03.960\noutput it to output.txt,\nand output it to my screen.\n\n196\n00:09:03.960 --> 00:09:07.510\nAnd so there we go, I still see\nall that information right there.\n\n197\n00:09:07.510 --> 00:09:10.220\nBut it's also been\nstored in the text file.\n\n198\n00:09:10.220 --> 00:09:11.760\nSo that's the one that I usually use.\n\n199\n00:09:11.760 --> 00:09:14.291\nI usually redirect to tee so\nthat I can see what's going on.\n\n200\n00:09:14.291 --> 00:09:16.486\n&gt;&gt; Well, you did tee for\ntwo and two for tee.\n\n201\n00:09:16.486 --> 00:09:18.120\n&gt;&gt; [LAUGH]\n&gt;&gt; Yeah, absolutely.\n\n202\n00:09:18.120 --> 00:09:20.316\nBut the piece of mind,\nI would think, right?\n\n203\n00:09:20.316 --> 00:09:21.248\nI mean, it's right three.\n\n204\n00:09:21.248 --> 00:09:26.398\n&gt;&gt; Yeah, it's right there and if you miss\nsomething, and maybe I've done this.\n\n205\n00:09:26.398 --> 00:09:30.458\nI'm in a terminal and\nmy scroll back buffer is only 1,000 lines.\n\n206\n00:09:30.458 --> 00:09:33.430\nAnd I just got more than\n1,000 lines of output.\n\n207\n00:09:33.430 --> 00:09:36.360\nWell, okay, it output to the screen,\nso I could see it and\n\n208\n00:09:36.360 --> 00:09:38.430\nI start scrolling back and I'm like shoot!\n\n209\n00:09:38.430 --> 00:09:42.410\nI can't see what happened in the first\ncouple of lines cuz it scrolled off.\n\n210\n00:09:42.410 --> 00:09:44.250\nWell, now I output to a text file so\n\n211\n00:09:44.250 --> 00:09:47.140\nI can just go to that text file and\npull it from there.\n\n212\n00:09:47.140 --> 00:09:48.850\nSo definitely a nice thing to do.\n\n213\n00:09:48.850 --> 00:09:50.680\nYou can go in, you can view it.\n\n214\n00:09:50.680 --> 00:09:52.745\nAll of that information is saved,\nvery, very handy.\n\n215\n00:09:52.745 --> 00:09:55.740\n&gt;&gt; So creating a file,\nwe've seen how we can do that.\n\n216\n00:09:55.740 --> 00:09:57.593\nCan we add to a file?\n\n217\n00:09:57.593 --> 00:09:58.601\n&gt;&gt; Yeah.\n&gt;&gt; We can add to it.\n\n218\n00:09:58.601 --> 00:10:03.320\n&gt;&gt; So every example I've done so\nfar has been overriding the output.txt.\n\n219\n00:10:03.320 --> 00:10:06.330\nEvery time I keep sending the output.txt\none I'm overriding it, right?\n\n220\n00:10:06.330 --> 00:10:12.070\nWell, what if this were say a backup job,\na backup job that runs every night?\n\n221\n00:10:12.070 --> 00:10:14.040\nSo every night it runs.\n\n222\n00:10:14.040 --> 00:10:16.346\nWell, if I override the output file,\n\n223\n00:10:16.346 --> 00:10:19.888\nthen I can only see what\nhappened in last night's backup.\n\n224\n00:10:19.888 --> 00:10:22.310\nWhat if I don't check my logs every day?\n\n225\n00:10:22.310 --> 00:10:24.150\nRaise your hand if you don't\ncheck your logs every day.\n\n226\n00:10:24.150 --> 00:10:25.330\nMost people don't.\n&gt;&gt; [LAUGH]\n\n227\n00:10:25.330 --> 00:10:27.122\n&gt;&gt; So if I just wanna check once a week\n\n228\n00:10:27.122 --> 00:10:31.282\nand look at the last seven days of logs,\nor the last month, or year of logs, or\n\n229\n00:10:31.282 --> 00:10:31.938\nwhatever.\n\n230\n00:10:31.938 --> 00:10:33.692\nI don't wanna overwrite that file,\n\n231\n00:10:33.692 --> 00:10:36.750\nI want to append,\nI want to add on to the file, okay?\n\n232\n00:10:36.750 --> 00:10:39.299\nAnd if you wanna add on to it,\nthere's a few different ways\n\n233\n00:10:39.299 --> 00:10:41.857\nto go about it depending on\nwhich redirect you're doing.\n\n234\n00:10:41.857 --> 00:10:45.870\nSo if you're doing the redirects\nthat I've been showing you,\n\n235\n00:10:45.870 --> 00:10:48.910\nthe command redirects, for example, right?\n\n236\n00:10:48.910 --> 00:10:54.370\nWhat you do is instead of just saying\ngreater than, right, to take the output\n\n237\n00:10:54.370 --> 00:10:59.760\nand dump it into output.text,\nyou do two greater thans, all right?\n\n238\n00:10:59.760 --> 00:11:04.630\nBy doing two, that says don't overwrite\nwhatever file you're writing to.\n\n239\n00:11:04.630 --> 00:11:07.252\nInstead append, add on to the end of it.\n\n240\n00:11:07.252 --> 00:11:10.070\nAnd so now I can run this command over,\nand over, and over again.\n\n241\n00:11:10.070 --> 00:11:12.500\nAnd it's gonna keep adding onto it.\n\n242\n00:11:12.500 --> 00:11:15.590\nSo for example, let me just do\nsomething a little bit shorter here.\n\n243\n00:11:15.590 --> 00:11:21.345\nI might do a uname -a to show what\nversion of the Linux kernel I'm running.\n\n244\n00:11:21.345 --> 00:11:26.940\nI might do a host name to find out\nwhat the host name of my computer is.\n\n245\n00:11:26.940 --> 00:11:33.170\nI might do a whoami to find out\nwhat user I'm logged in as, right?\n\n246\n00:11:33.170 --> 00:11:34.460\nSo I'm running each of these commands.\n\n247\n00:11:34.460 --> 00:11:38.486\nAnd every time, I'm doing the two\ngreater than symbols, right?\n\n248\n00:11:38.486 --> 00:11:43.091\nAnd so now,\nif I look at my output.txt file,\n\n249\n00:11:43.091 --> 00:11:46.737\nthere's the ls that I did, right?\n\n250\n00:11:46.737 --> 00:11:49.010\nAnd as I get to the end of that.\n\n251\n00:11:49.010 --> 00:11:51.368\nI get the version of\nLinux kernel I'm running.\n\n252\n00:11:51.368 --> 00:11:56.003\nI get [COUGH] my host name, and\nthen what happened to whoami?\n\n253\n00:11:56.003 --> 00:11:57.569\nWell, that's an interesting one.\n\n254\n00:11:57.569 --> 00:11:59.009\nNow that actually brings up a good point.\n\n255\n00:11:59.009 --> 00:12:00.110\nI'm kinda glad that happened.\n\n256\n00:12:00.110 --> 00:12:01.610\n&gt;&gt; Who am I anyway?\n\n257\n00:12:01.610 --> 00:12:02.952\n&gt;&gt; I know, the whoami is gone.\n\n258\n00:12:02.952 --> 00:12:06.637\nSo every now and\nthen you'll run into a command like this.\n\n259\n00:12:06.637 --> 00:12:10.292\nWhere see how most of my commands behave\nvery nicely and they're right in there.\n\n260\n00:12:10.292 --> 00:12:14.530\nWho am I didn't write to standard out.\n\n261\n00:12:14.530 --> 00:12:17.040\nWhen somebody creates a program,\nwhen they write an application,\n\n262\n00:12:17.040 --> 00:12:20.760\nthey have to tell it to output to\nstandard out, to show it on screen.\n\n263\n00:12:20.760 --> 00:12:24.195\nThere are some other ways to\nwrite data on screen, though.\n\n264\n00:12:24.195 --> 00:12:26.295\nAnd the whoami command\nused some alternative,\n\n265\n00:12:26.295 --> 00:12:28.510\nsome alternative that\ndidn't output to screen.\n\n266\n00:12:28.510 --> 00:12:30.610\nSo this is not a perfect system.\n\n267\n00:12:30.610 --> 00:12:32.646\nSometimes you may miss\nsome data like that,\n\n268\n00:12:32.646 --> 00:12:35.024\nwhich is why you need to review it and\ndouble check.\n\n269\n00:12:35.024 --> 00:12:38.755\nProperly written applications will\nnot have that problem, right?\n\n270\n00:12:38.755 --> 00:12:42.411\nAnd the real thing with whoamI is whoami a\nbit of an alias command, and so it's doing\n\n271\n00:12:42.411 --> 00:12:45.775\nsome weird things on the back of my\nvariables and it's just not outputting.\n\n272\n00:12:45.775 --> 00:12:49.755\n[COUGH] Had I done the normal\nwhoami command I bet it would have\n\n273\n00:12:49.755 --> 00:12:51.676\nworked let's try this one.\n\n274\n00:12:51.676 --> 00:12:54.828\nAnd now I'll just take a look at the end\nof that, yeah, and there's my username.\n\n275\n00:12:54.828 --> 00:13:01.371\nSo the whoami that I use, that three part\ncommand, actually it's outputting nothing.\n\n276\n00:13:01.371 --> 00:13:04.701\nThere's a good one, if it outputs nothing\nthen it's obviously not gonna have\n\n277\n00:13:04.701 --> 00:13:07.425\nanything to store in file either so\nit's not working for me, but\n\n278\n00:13:07.425 --> 00:13:08.550\nthe standard whoami did.\n\n279\n00:13:08.550 --> 00:13:12.410\nSo always be aware of that though\nsometimes things can get left out.\n\n280\n00:13:12.410 --> 00:13:14.370\n&gt;&gt; So we have a pretty good\nidea about redirection.\n\n281\n00:13:14.370 --> 00:13:17.510\nIs there anything else you'd\nlike to add at this point?\n\n282\n00:13:17.510 --> 00:13:20.999\n&gt;&gt; As far as redirecting our output,\nthat's really about it.\n\n283\n00:13:20.999 --> 00:13:25.108\nBut there is a neat little thing that you\nmay find useful somewhere which is you can\n\n284\n00:13:25.108 --> 00:13:27.420\nredirect your input as well, right?\n\n285\n00:13:27.420 --> 00:13:29.050\nLet me give you an example.\n\n286\n00:13:29.050 --> 00:13:33.720\nLet's say that I'm taking\na look at this directory and\n\n287\n00:13:33.720 --> 00:13:36.970\nI do an ls-lh, and\n\n288\n00:13:36.970 --> 00:13:42.180\nI redirect that into, let's just\nassume that it's not sorted, right?\n\n289\n00:13:42.180 --> 00:13:45.430\nSo I pipe that into the sort command,\nwhich is gonna sort it alphabetically.\n\n290\n00:13:45.430 --> 00:13:49.483\nAnd then I take all that, and\nI send it into my output.txt.\n\n291\n00:13:49.483 --> 00:13:52.710\nNow I'm gonna overwrite that output\n.txt file, so it's getting overwritten.\n\n292\n00:13:52.710 --> 00:13:56.079\nAnd when I take a look at that,\nthere's my output, and\n\n293\n00:13:56.079 --> 00:14:00.789\nit's my list, and everything's nice and\nalphabetized, and there we go.\n\n294\n00:14:00.789 --> 00:14:04.154\nWell, actually it's not very\nwell alphabetized, is it?\n\n295\n00:14:04.154 --> 00:14:06.873\nBecause I executed the sort command on it,\nand\n\n296\n00:14:06.873 --> 00:14:11.490\nit's alphabetizing based on the dashes\nright here at the very beginning.\n\n297\n00:14:11.490 --> 00:14:13.390\nSo let me modify my ls commands.\n\n298\n00:14:13.390 --> 00:14:15.210\nThis is a good set of data.\n\n299\n00:14:15.210 --> 00:14:18.730\nWe'll just do the regular ls command,\nthere we go.\n\n300\n00:14:18.730 --> 00:14:20.880\nAnd now when I'm sorting it, perfect.\n\n301\n00:14:20.880 --> 00:14:24.593\nNow it's alphabetized.\nOkay, so I just redirected output.\n\n302\n00:14:24.593 --> 00:14:27.860\nI've shown you that five times now,\nso that's not exciting.\n\n303\n00:14:27.860 --> 00:14:31.150\nBut I can also redirect my input.\n\n304\n00:14:31.150 --> 00:14:35.040\nWhat if I look at this and I say boy,\nI really wish I would've sorted that\n\n305\n00:14:35.040 --> 00:14:37.430\nthe other way around,\nZ to A instead of A to Z.\n\n306\n00:14:38.460 --> 00:14:43.343\nWell, I know that the sort command has\na command line argument of sort -r\n\n307\n00:14:43.343 --> 00:14:46.074\nwhich reverses the sort order, right?\n\n308\n00:14:46.074 --> 00:14:49.390\nSo if only I had have run\nthis command with sort -r.\n\n309\n00:14:49.390 --> 00:14:52.810\nWell, I could just run\nthe command again in this case.\n\n310\n00:14:52.810 --> 00:14:56.340\nBut if you just ran a script that made\nsome big database modification or\n\n311\n00:14:56.340 --> 00:15:00.700\nsomething like that, you don't wanna run\nthat again cuz it'll remodify the system.\n\n312\n00:15:00.700 --> 00:15:02.830\nYou could lose data,\nyou could cause all sorts of problems.\n\n313\n00:15:02.830 --> 00:15:06.108\nSo what I really need to do is take\nthis file that I already made and\n\n314\n00:15:06.108 --> 00:15:07.340\nchange its sort order.\n\n315\n00:15:07.340 --> 00:15:13.450\nAnd so I can run the sort -r command,\nand change what it's taking as input.\n\n316\n00:15:13.450 --> 00:15:16.930\nNow if I were pipelining commands,\nI could just pipeline one command and\n\n317\n00:15:16.930 --> 00:15:19.313\nthen create the output to\nbecomes this one's input.\n\n318\n00:15:19.313 --> 00:15:22.815\nBut because the input here is a file,\nI have to do it a different way.\n\n319\n00:15:22.815 --> 00:15:26.777\nAnd instead of using a greater\nthan symbol like I've been using,\n\n320\n00:15:26.777 --> 00:15:28.875\nI'm gonna use a less than symbol.\n\n321\n00:15:28.875 --> 00:15:32.061\nA less than symbol says redirect\nthe input and not the output, so\n\n322\n00:15:32.061 --> 00:15:34.545\nit's kinda backwards\nfrom what I've shown you.\n\n323\n00:15:34.545 --> 00:15:38.940\nSo if I take sort -r and\ndo a less than symbol,\n\n324\n00:15:38.940 --> 00:15:42.657\nI can feed it that output.text file.\n\n325\n00:15:42.657 --> 00:15:47.030\nOutput.txt becomes the input for sort -r.\n\n326\n00:15:47.030 --> 00:15:49.078\nIt's like a reverse pipeline.\n\n327\n00:15:49.078 --> 00:15:53.137\nNow a lot of commands will have a command\nline argument for providing an input file.\n\n328\n00:15:53.137 --> 00:15:55.965\nAnd usually they have like a -i or\na --if or\n\n329\n00:15:55.965 --> 00:15:59.568\nsomething like that to be able\nto bring in an input file.\n\n330\n00:15:59.568 --> 00:16:03.537\nBut if the command doesn't,\nthis is what we can do.\n\n331\n00:16:03.537 --> 00:16:06.410\nAnd it's pipelining\nthe command after the fact.\n\n332\n00:16:06.410 --> 00:16:09.780\nIt let's you go back and change things\nwithout re-running your original command.\n\n333\n00:16:09.780 --> 00:16:14.610\nI can take that text file and\nfeed it as input into anything.\n\n334\n00:16:14.610 --> 00:16:19.570\nSo when I run that, out comes the output,\nand it's in reverse\n\n335\n00:16:19.570 --> 00:16:24.210\nalphabetical order without having to\nrerun the original, I didn't rerun LS.\n\n336\n00:16:24.210 --> 00:16:27.280\nI just took the output that I\nalready had and fed it back in here.\n\n337\n00:16:27.280 --> 00:16:31.095\nSo, that's like the opposite of all\nthe other examples I showed you.\n\n338\n00:16:31.095 --> 00:16:31.998\n&gt;&gt; That's very nice.\n\n339\n00:16:31.998 --> 00:16:36.870\nHey, in a previous episode you\ntalked about command expansion.\n\n340\n00:16:36.870 --> 00:16:37.640\n&gt;&gt; Right.\n\n341\n00:16:37.640 --> 00:16:39.730\n&gt;&gt; Can we pick up on\nthat a little bit more?\n\n342\n00:16:39.730 --> 00:16:42.451\n&gt;&gt; Yeah, command expansion was the other\nthing that I wanted to touch on here in\n\n343\n00:16:42.451 --> 00:16:44.294\nthis episode cuz it's\nanother neat little thing.\n\n344\n00:16:44.294 --> 00:16:47.462\nHere we've seen greater thans and\nless thans and\n\n345\n00:16:47.462 --> 00:16:50.860\nhow that changes what\nhappens on our commands.\n\n346\n00:16:50.860 --> 00:16:55.200\nWell, there's also the good,\nold, classic squiggly bracket,\n\n347\n00:16:55.200 --> 00:16:57.135\nwhich has a real name\nI can never remember.\n\n348\n00:16:57.135 --> 00:16:59.280\n&gt;&gt; [LAUGH]\n&gt;&gt; I just call it the squiggly bracket.\n\n349\n00:16:59.280 --> 00:17:02.300\nBut the squiggly bracket is another one\nthat we can throw in to change the way\n\n350\n00:17:02.300 --> 00:17:03.610\na command behaves.\n\n351\n00:17:03.610 --> 00:17:08.520\nAnd you can have a command execute more\nthan once based on the contents of\n\n352\n00:17:08.520 --> 00:17:10.410\nwhat's inside of this squiggly bracket.\n\n353\n00:17:10.410 --> 00:17:15.880\nWhen we cover command execution, I showed\nyou guys how you could use parentheses and\n\n354\n00:17:15.880 --> 00:17:18.440\nsquare brackets to expand text.\n\n355\n00:17:18.440 --> 00:17:22.210\nThat you can have a square brackets\nthat can perform arithmetic,\n\n356\n00:17:22.210 --> 00:17:25.590\nwrite out arithmetic expressions and\ndo addition, subtraction, all that stuff.\n\n357\n00:17:25.590 --> 00:17:28.320\nAnd I showed you parentheses where\nyou could actually run a command.\n\n358\n00:17:28.320 --> 00:17:31.500\nBut, one of the things I didn't show you\nis that you can use the squiggly brackets\n\n359\n00:17:31.500 --> 00:17:34.130\nto actually generate alternate text, and\n\n360\n00:17:34.130 --> 00:17:36.420\nthat's really handy when\nworking with files.\n\n361\n00:17:36.420 --> 00:17:39.130\nThat if you need to create\na bunch of files, or\n\n362\n00:17:39.130 --> 00:17:42.990\na bunch of folders, you can do it\nquickly by using command expansion.\n\n363\n00:17:42.990 --> 00:17:45.220\nSo, let me show you some examples.\n\n364\n00:17:45.220 --> 00:17:49.390\nLet's say that I needed to\ncreate some placeholder files.\n\n365\n00:17:49.390 --> 00:17:52.700\nSo let me just make\na quick directory here.\n\n366\n00:17:52.700 --> 00:17:57.330\nAnd in this directory, there we go,\nI need to create some placeholder files.\n\n367\n00:17:57.330 --> 00:18:00.220\nI wanna create some memos,\nmemo one through memo five.\n\n368\n00:18:00.220 --> 00:18:02.440\nAnd so I wanna create those really quick.\n\n369\n00:18:02.440 --> 00:18:06.025\nWell, I could use the touch command and\n\n370\n00:18:06.025 --> 00:18:10.382\nI could say, touch memo1, and touch memo2.\n\n371\n00:18:10.382 --> 00:18:12.539\nI could use my command history to\nsave a little bit of time, but\n\n372\n00:18:12.539 --> 00:18:14.470\nI'm having to type over and over again.\n\n373\n00:18:14.470 --> 00:18:16.791\nImagine if I wanted to\ncreate a 100 of these files.\n\n374\n00:18:16.791 --> 00:18:17.740\nThat would take a while.\n\n375\n00:18:17.740 --> 00:18:18.708\n&gt;&gt; That would take a while.\n\n376\n00:18:18.708 --> 00:18:22.656\n&gt;&gt; So instead, what I could do\nis I could say, touch memo and\n\n377\n00:18:22.656 --> 00:18:28.540\nright after the word memo, do a squiggly\nbracket, and then put a range of values.\n\n378\n00:18:28.540 --> 00:18:32.468\nSo I could say, 3, 4, 5, right?\n\n379\n00:18:32.468 --> 00:18:38.010\nAnd by doing that, it's going to expand\nthis from one command into three commands.\n\n380\n00:18:38.010 --> 00:18:41.201\nAnd it's gonna run touch memo3,\ntouch memo4, touch memo5.\n\n381\n00:18:41.201 --> 00:18:43.991\nAnd when it runs that,\nI just see the one command, but\n\n382\n00:18:43.991 --> 00:18:48.091\nnow when I take a look at my directory\nthere's memo1 through memo5, right.\n\n383\n00:18:48.091 --> 00:18:51.481\nSo it's rerunning that command over and\nover again for each value and\n\n384\n00:18:51.481 --> 00:18:55.400\nthat's really handy for creating\na bunch of folders or a bunch of files.\n\n385\n00:18:55.400 --> 00:18:58.590\nIn fact we can get really\nadvanced with this right?\n\n386\n00:18:58.590 --> 00:19:00.900\nLet's say that I have three users.\n\n387\n00:19:00.900 --> 00:19:03.730\nI've got Tom, Dick and Harry.\n\n388\n00:19:03.730 --> 00:19:08.620\nAnd I wanna create five memos for\neach of them, right?\n\n389\n00:19:08.620 --> 00:19:13.027\nSo, I might wanna create a series of\nfiles that are named after them and\n\n390\n00:19:13.027 --> 00:19:16.178\nthat are tied to each of\nthese different numbers.\n\n391\n00:19:16.178 --> 00:19:21.996\nAnd so I can come through and\nI can say something like touch and\n\n392\n00:19:21.996 --> 00:19:27.950\nthen in parenthesis we can do tom,\ndick, harry, all right.\n\n393\n00:19:27.950 --> 00:19:33.950\nSo there's the three users, and then maybe\nI wanna have a hyphen followed by memo,\n\n394\n00:19:33.950 --> 00:19:35.580\nand in parenthesis, 1,2,3,4,5, okay.\n\n395\n00:19:38.300 --> 00:19:41.150\nSo there, I'm kind of specifying\nthat I wanna create these files.\n\n396\n00:19:41.150 --> 00:19:44.760\nNow, there's two different expansions that\nare gonna happen at the same time here.\n\n397\n00:19:44.760 --> 00:19:48.560\nIt's gonna expand the names first, and\nit's gonna expend the memos second,\n\n398\n00:19:48.560 --> 00:19:49.900\nor the numbers second.\n\n399\n00:19:49.900 --> 00:19:53.220\nAnd so it's actually gonna end up\nrunning 15 different commands.\n\n400\n00:19:53.220 --> 00:19:57.470\nIt'll run touch, tom, dash memo1,\ntouch, tom, dash memo2, touch, tom,\n\n401\n00:19:57.470 --> 00:20:00.740\ndash memo3 and so on, and\n\n402\n00:20:00.740 --> 00:20:04.880\nthen it'll move to the next one, touch,\ndick, dash memo1 and so on, right.\n\n403\n00:20:04.880 --> 00:20:08.248\nAnd each one is gonna get created\nout here from a second command.\n\n404\n00:20:08.248 --> 00:20:12.350\nAnd so when I run that and take a look,\nthere they all are, right?\n\n405\n00:20:12.350 --> 00:20:13.810\nSo oops, let me just do a, there.\n\n406\n00:20:15.610 --> 00:20:18.370\nSo, we can see it created each one,\nI didn't have to go through and\n\n407\n00:20:18.370 --> 00:20:20.525\ndo it myself, one by one.\n\n408\n00:20:20.525 --> 00:20:21.202\n&gt;&gt; Very nice.\n&gt;&gt; And in fact,\n\n409\n00:20:21.202 --> 00:20:24.460\nI kinda did this the hard way,\nbecause I typed all the values in.\n\n410\n00:20:24.460 --> 00:20:29.750\nRemember what I said, what if I need\nto create 100 of these files, right.\n\n411\n00:20:29.750 --> 00:20:31.320\n&gt;&gt; So Don, that's very helpful.\n\n412\n00:20:31.320 --> 00:20:33.900\nI mean you've had multiple\nmemos that you've had to do.\n\n413\n00:20:33.900 --> 00:20:35.690\nBut, what if you had a range,\n\n414\n00:20:35.690 --> 00:20:40.490\nlike you wanted to do 100 memos,\nis there an easier way to get around that?\n\n415\n00:20:40.490 --> 00:20:43.780\n&gt;&gt; I kind of set it up that way saying\nif I had to create 100 this is easy.\n\n416\n00:20:43.780 --> 00:20:49.280\nBut if you look at the command I ran,\nI had to do memo(1, 2, 3, 4, 5).\n\n417\n00:20:49.280 --> 00:20:52.190\nIf I was gonna create 100, I would have\nto do commas all the way out to 100.\n\n418\n00:20:52.190 --> 00:20:52.860\n&gt;&gt; Lots of commas.\n\n419\n00:20:52.860 --> 00:20:54.510\n&gt;&gt; Yeah, that's not really so easy, is it?\n\n420\n00:20:54.510 --> 00:20:58.280\nRight, but we can do ranges here and\nthat makes life a lot easier for us.\n\n421\n00:20:58.280 --> 00:21:00.630\nLet me just clean up my directory here.\n\n422\n00:21:03.025 --> 00:21:05.905\nI'll just delete all that,\nand there we go.\n\n423\n00:21:05.905 --> 00:21:11.643\nAnd so let's say that I wanted\nto create memo 1 through 100.\n\n424\n00:21:11.643 --> 00:21:13.291\nI wanna create a vast one, or\n\n425\n00:21:13.291 --> 00:21:16.741\nwe'll just do one through nine\nto save screens space here.\n\n426\n00:21:16.741 --> 00:21:18.549\n&gt;&gt; Okay\n&gt;&gt; So, I'll do a touch memo,\n\n427\n00:21:18.549 --> 00:21:22.248\nI'll bring up the squiggly bracket or,\nDemie is in the chat room and so\n\n428\n00:21:22.248 --> 00:21:26.342\nlet me here, it's the curly bracket,\nso I'll bring up the curly brackets.\n\n429\n00:21:26.342 --> 00:21:26.928\n&gt;&gt; Curly braces.\n\n430\n00:21:26.928 --> 00:21:33.926\n&gt;&gt; And [LAUGH] 1, followed by\ndouble dots and the 9, not comma.\n\n431\n00:21:33.926 --> 00:21:38.116\nSo right, by doing, period, period, dot,\ndot, or whatever you wanna call them,\n\n432\n00:21:38.116 --> 00:21:42.251\nI'm sure there's a code name for that\none too, LAUGH] ..9, that tells it hey,\n\n433\n00:21:42.251 --> 00:21:45.655\nthis is not just one, this is not\njust nine, it's one through nine.\n\n434\n00:21:45.655 --> 00:21:46.350\n&gt;&gt; A range.\n\n435\n00:21:46.350 --> 00:21:51.970\n&gt;&gt; And by doing that range, I can take\na look, and there's memo1 through memo9.\n\n436\n00:21:51.970 --> 00:21:55.500\nSo if I need to create a large quantity\nof files, or, usually it's folders,\n\n437\n00:21:55.500 --> 00:22:00.230\na large quantity of folders, it's pretty\neasy to that through command expansion and\n\n438\n00:22:00.230 --> 00:22:01.160\nbe able to work with that.\n\n439\n00:22:01.160 --> 00:22:04.500\nAlso with removing files, if you're\ntrying to remove files that have a date\n\n440\n00:22:04.500 --> 00:22:07.050\nin their name, you can use this to\nkind of grab those real quick and\n\n441\n00:22:07.050 --> 00:22:10.570\ndelete them or move them somewhere else,\nit's a really neat thing to do and\n\n442\n00:22:10.570 --> 00:22:13.450\nvery handy when working with\nfiles especially in bulk.\n\n443\n00:22:13.450 --> 00:22:15.720\nSo definitely it's something I wanted\nto highlight here in this episode.\n\n444\n00:22:15.720 --> 00:22:17.410\n&gt;&gt; And we learned about curly braces.\n\n445\n00:22:17.410 --> 00:22:20.900\n&gt;&gt; Yeah curly braces,\ncurly brackets, squiggly, whatever,\n\n446\n00:22:20.900 --> 00:22:21.850\nI don't know what they are.\n\n447\n00:22:21.850 --> 00:22:24.220\n&gt;&gt; It all works\n&gt;&gt; Dead snakes, something,\n\n448\n00:22:24.220 --> 00:22:25.941\nwhatever they [LAUGH].\n\n449\n00:22:25.941 --> 00:22:29.000\n&gt;&gt; [LAUGH] Becoming a Linux power user.\n\n450\n00:22:29.000 --> 00:22:32.360\nThis has been file system\ncommands part two.\n\n451\n00:22:32.360 --> 00:22:34.480\nThere is a part one,\nmake sure you watch part one and\n\n452\n00:22:34.480 --> 00:22:37.890\nwatch everything in this series\nof becoming a Linux power user.\n\n453\n00:22:37.890 --> 00:22:39.450\nYou'll be glad you did.\n\n454\n00:22:39.450 --> 00:22:41.585\nAnd thank you for watching ITPro.TV.\n\n455\n00:22:41.585 --> 00:22:44.830\nRemember, a good IT Pro\nis always learning.\n\n456\n00:22:44.830 --> 00:22:45.750\nI'm Zach Memos.\n\n457\n00:22:45.750 --> 00:22:46.500\n&gt;&gt; And I'm Don Pezet.\n\n458\n00:22:46.500 --> 00:22:48.868\n&gt;&gt; And we'll see you soon.\n\n459\n00:22:48.868 --> 00:22:54.886\n[MUSIC]\n\n460\n00:22:54.886 --> 00:22:58.376\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "222511710"
        },
        {
          "description": "Don and Zach cover assigning and removing permissions, what U.G.O. is, Symbolic Notation, Numeric Notation, where permissions come from, where default permissions come from, what '755' stands for, 'umask,' and how to change user/groups/owner.",
          "length": "1728",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-3-filesystem_permissions-061917-PGM.00_30_47_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-3-filesystem_permissions-061917-PGM.00_30_47_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-3-filesystem_permissions-061917-PGM.00_30_47_26.Still001-sm.jpg",
          "title": "Filesystem Permissions",
          "transcript": "WEBVTT\n\n1\n00:00:00.250 --> 00:00:02.648\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.648 --> 00:00:10.620\n&gt;&gt; [CROSSTALK]\n&gt;&gt; You're watching IT Pro TV.\n\n3\n00:00:10.620 --> 00:00:14.228\n&gt;&gt; Hello again and\nthank you for choosing ITProTV,\n\n4\n00:00:14.228 --> 00:00:17.140\nhelping you learn wherever you go.\n\n5\n00:00:17.140 --> 00:00:21.250\nI'm your host, Zach Memos, as we continue\non with becoming a Linux power user.\n\n6\n00:00:21.250 --> 00:00:24.770\nThis is gonna be file system permissions.\n\n7\n00:00:24.770 --> 00:00:28.290\nSo it's important information\ncoming your way from Mr. Don Pezet.\n\n8\n00:00:28.290 --> 00:00:29.060\nHello there, sir.\n\n9\n00:00:29.060 --> 00:00:30.280\n&gt;&gt; Thanks for having me back, Zach.\n\n10\n00:00:30.280 --> 00:00:31.730\nYeah, ready to dive right in.\n\n11\n00:00:31.730 --> 00:00:34.723\nIn this episode, we're gonna talk a little\nbit about our files and folders again,\n\n12\n00:00:34.723 --> 00:00:36.195\ncuz we're focusing on the file system.\n\n13\n00:00:36.195 --> 00:00:40.668\nAnd the permissions that are assigned to\neverything, that control who has access to\n\n14\n00:00:40.668 --> 00:00:44.050\nwhat, because a Linux system\nis supposed to be more secure.\n\n15\n00:00:44.050 --> 00:00:44.910\nHow do we achieve that?\n\n16\n00:00:44.910 --> 00:00:46.620\nWell, through security and permissions.\n\n17\n00:00:46.620 --> 00:00:49.055\nThat's what we've got coming\nup right here in this episode.\n\n18\n00:00:49.055 --> 00:00:51.580\n&gt;&gt; Now, when you're talking about\npermissions and we're looking at your\n\n19\n00:00:51.580 --> 00:00:55.545\nscreen and whatnot, there appears to be\na bunch of extraneous things going on.\n\n20\n00:00:55.545 --> 00:00:57.380\n&gt;&gt; [LAUGH]\n&gt;&gt; It doesn't really\n\n21\n00:00:57.380 --> 00:00:58.570\nquite make sense to me.\n\n22\n00:00:58.570 --> 00:01:00.590\nI mean, are those permissions,\nwhat is all that?\n\n23\n00:01:00.590 --> 00:01:03.340\n&gt;&gt; Okay, it is confusing,\nthe way the screen output is.\n\n24\n00:01:03.340 --> 00:01:06.030\nBut once you understand what's on the\nscreen, it actually makes a lot of sense.\n\n25\n00:01:06.030 --> 00:01:07.870\nBut at first glance,\nit's really confusing.\n\n26\n00:01:07.870 --> 00:01:10.650\nYou guys are probably seen me do this\nin the early episodes, let me show you.\n\n27\n00:01:10.650 --> 00:01:13.330\nIf I pull up just a regular\ndirectory listing,\n\n28\n00:01:13.330 --> 00:01:17.680\nlike maybe I go into the binary folder and\nI pull up a listing, well there it is.\n\n29\n00:01:17.680 --> 00:01:19.790\nIt's colorized, it's nice and pretty.\n\n30\n00:01:19.790 --> 00:01:21.230\nI can see these files.\n\n31\n00:01:21.230 --> 00:01:23.430\nAnd that's usually all I care about.\n\n32\n00:01:23.430 --> 00:01:26.820\nBut sometimes I want to see more, I want\nto see like the size of the files and\n\n33\n00:01:26.820 --> 00:01:28.620\nI want to see hidden files and things.\n\n34\n00:01:28.620 --> 00:01:34.758\nAnd so on the show, I'll typically run and\nin real life too, ls -lah.\n\n35\n00:01:34.758 --> 00:01:39.318\nThe -l shows me the long format,\nthat's gonna show me the file size and\n\n36\n00:01:39.318 --> 00:01:43.630\nthe modified date, a means show\nme all files even hidden ones.\n\n37\n00:01:43.630 --> 00:01:48.880\nAnd h means make the file sizes human\nreadable instead of showing them in bytes,\n\n38\n00:01:48.880 --> 00:01:53.050\nshow them in megabytes or\ngigabytes, the larger file sizes.\n\n39\n00:01:53.050 --> 00:01:55.830\nAnd when I do that,\n&gt;&gt; I get a very different\n\n40\n00:01:55.830 --> 00:01:57.030\nfile directory listing.\n\n41\n00:01:57.030 --> 00:01:59.430\nAnd I know I've used\nthis in several episodes.\n\n42\n00:01:59.430 --> 00:02:02.640\nIf I just wanna see file names, well there\nthey are, and they're still nice and\n\n43\n00:02:02.640 --> 00:02:06.190\norganized alphabetically and\nstill pretty, they've got their colors.\n\n44\n00:02:06.190 --> 00:02:11.210\nThe file sizes make a lot more sense,\nhere's 43K versus 4 bytes.\n\n45\n00:02:11.210 --> 00:02:16.140\nSo I can kinda get an idea of how big\nthese are in a more reasonable number.\n\n46\n00:02:16.140 --> 00:02:20.540\nBut then to the left all this other stuff,\n\n47\n00:02:20.540 --> 00:02:22.680\nwhat's effectively half the screen for\nmost of these guys.\n\n48\n00:02:22.680 --> 00:02:24.280\n&gt;&gt; There's other stuff there [LAUGH].\n\n49\n00:02:24.280 --> 00:02:28.965\n&gt;&gt; It looks like a jumbled mess,\nwell those are the file permission.\n\n50\n00:02:28.965 --> 00:02:33.055\nThose are what dictate who's allowed to\ntouch this file, and if they touch it,\n\n51\n00:02:33.055 --> 00:02:34.945\nwhat are they allowed to do with it.\n\n52\n00:02:34.945 --> 00:02:36.745\nAre they allowed to edit it it?\n\n53\n00:02:36.745 --> 00:02:38.105\nCan they just look at it?\n\n54\n00:02:38.105 --> 00:02:41.235\nCan they run it if it's a program,\nor can they do nothing at all?\n\n55\n00:02:41.235 --> 00:02:43.635\nThat's all coded right\nhere in this first half.\n\n56\n00:02:43.635 --> 00:02:44.765\nIt's not even that hard a code.\n\n57\n00:02:44.765 --> 00:02:49.010\nOnce you understand the components,\nit all makes sense.\n\n58\n00:02:49.010 --> 00:02:52.050\nWhat were actually looking at\nare three pieces of information.\n\n59\n00:02:53.110 --> 00:02:56.228\nThere is a user attached to every\nsingle file in your system, and\n\n60\n00:02:56.228 --> 00:03:00.183\nthat user's called the owner, they're\nthe person responsible for that file.\n\n61\n00:03:00.183 --> 00:03:04.270\nAnd normally, they'll have the ability\nto do whatever they want to that file.\n\n62\n00:03:04.270 --> 00:03:08.790\nThen, you have a group assigned to a file.\n\n63\n00:03:08.790 --> 00:03:10.500\nI keep saying file,\nthis is folders as well,\n\n64\n00:03:10.500 --> 00:03:12.410\nit applies to both files and folders.\n\n65\n00:03:12.410 --> 00:03:15.445\nAnd that group,\nwell that's a group of people,\n\n66\n00:03:15.445 --> 00:03:18.050\nthat they have access to that file or\nfolder.\n\n67\n00:03:18.050 --> 00:03:21.450\nAnd then lastly, you have everybody else.\n\n68\n00:03:21.450 --> 00:03:23.910\nEverybody else, what do they get?\n\n69\n00:03:23.910 --> 00:03:28.980\nSo in the Unix world,\nthis is called the user, the group and\n\n70\n00:03:28.980 --> 00:03:33.448\nthe others, UGO, user, group, others.\n\n71\n00:03:33.448 --> 00:03:37.600\nNow user you'll hear often time called\nowner, cuz they own the file, but\n\n72\n00:03:37.600 --> 00:03:40.200\nowner gets confusing cuz o and o.\n\n73\n00:03:40.200 --> 00:03:43.960\nWell, others sometimes\ngets called everyone or e,\n\n74\n00:03:43.960 --> 00:03:46.460\nbut that's not how the lettering\nworks in the system, so\n\n75\n00:03:46.460 --> 00:03:50.480\nthe official names are the user,\nthe group, and the other.\n\n76\n00:03:51.600 --> 00:03:54.770\nUser will almost always have\nfull access to the file.\n\n77\n00:03:54.770 --> 00:03:59.700\nThe group not so much, and then the other\nmay not have access at all or maybe\n\n78\n00:03:59.700 --> 00:04:03.640\na public file that I want everyone to have\naccess to, it's up to me to dictate that.\n\n79\n00:04:03.640 --> 00:04:06.150\nSo, when I look at this screen,\n\n80\n00:04:06.150 --> 00:04:11.640\non the very left side here I'm seeing the\npermissions that are being assigned out.\n\n81\n00:04:11.640 --> 00:04:15.000\nAnd what you'll actually see\nare ten different values.\n\n82\n00:04:15.000 --> 00:04:17.170\nSome of them will have all\nten values filled out.\n\n83\n00:04:17.170 --> 00:04:20.450\nIf you look at this one right here, let\nme zoom in a little bit on that, there.\n\n84\n00:04:20.450 --> 00:04:23.620\nSo see how it's got lrwxrwxrwx.\n\n85\n00:04:24.650 --> 00:04:30.370\nWell that first letter is an l, and\nthat l is telling me that this a link.\n\n86\n00:04:30.370 --> 00:04:31.440\nIt's not a real file.\n\n87\n00:04:31.440 --> 00:04:34.390\nSee how the file is light blue and\nit's got an arrow.\n\n88\n00:04:34.390 --> 00:04:38.180\nIt's saying the ypdomainename is actually\nlinked the the hostname command.\n\n89\n00:04:38.180 --> 00:04:41.280\nIf I run ypdomainename it's\njust gonna run hostname.\n\n90\n00:04:41.280 --> 00:04:44.228\nSo it's a link is what that\nfirst entry is indicating.\n\n91\n00:04:44.228 --> 00:04:47.250\nThat's important cuz there may be\npermissions on the original file that\n\n92\n00:04:47.250 --> 00:04:48.970\naren't here on the link.\n\n93\n00:04:48.970 --> 00:04:54.160\nI might also see a d, d is for directory\nif this was a folder and not a file.\n\n94\n00:04:54.160 --> 00:04:57.590\nBut if I see a dash that mean's\nthe value is not set and\n\n95\n00:04:57.590 --> 00:04:59.070\nthat means that this is a file.\n\n96\n00:04:59.070 --> 00:05:02.330\nAn individual file will have a dash,\na directory will have a d.\n\n97\n00:05:02.330 --> 00:05:04.040\nThose are the two values\nthat we normally see.\n\n98\n00:05:05.360 --> 00:05:09.570\nNow, the rest of this\nare the actual permissions, and\n\n99\n00:05:09.570 --> 00:05:11.830\nthey're broken up into groups of three.\n\n100\n00:05:11.830 --> 00:05:15.504\nSo the first three are the permissions\ntied to the user or the owner.\n\n101\n00:05:15.504 --> 00:05:19.262\nThe next three are tied to the group.\n\n102\n00:05:19.262 --> 00:05:26.170\nAnd the next three after that,\nare tied to the other, or everyone else.\n\n103\n00:05:26.170 --> 00:05:27.210\nThat's what those mean.\n\n104\n00:05:27.210 --> 00:05:30.490\nThose nine values right there\nare the three permissions for\n\n105\n00:05:30.490 --> 00:05:32.780\nthe user, the group and the other.\n\n106\n00:05:33.910 --> 00:05:37.890\nWell, the other, that's everyone else,\nthat makes sense, but who is the user and\n\n107\n00:05:37.890 --> 00:05:39.060\nwho is the group?\n\n108\n00:05:39.060 --> 00:05:40.370\nAnd that's what comes up after that.\n\n109\n00:05:40.370 --> 00:05:44.850\nNotice on these files,\nroot is the user and root is the group.\n\n110\n00:05:44.850 --> 00:05:50.450\nSo the root user account is the only\none that has user and group access.\n\n111\n00:05:50.450 --> 00:05:53.110\nEverybody else falls onto\nthe other side of things.\n\n112\n00:05:53.110 --> 00:05:55.073\nAnd, if you look at these permissions,\nwell,\n\n113\n00:05:55.073 --> 00:05:57.294\nwhat they mean is actually\npretty straight forward.\n\n114\n00:05:57.294 --> 00:06:01.960\nR is read,\nthey're allowed to read the file.\n\n115\n00:06:01.960 --> 00:06:06.290\nThey open it and look at it, they can't\nchange it, they can just look at it.\n\n116\n00:06:06.290 --> 00:06:10.210\nW is write, not only can they look at it,\nthey can modify,\n\n117\n00:06:10.210 --> 00:06:12.000\nthey can change what's inside of the file.\n\n118\n00:06:12.000 --> 00:06:13.470\nThey can write to it.\n\n119\n00:06:13.470 --> 00:06:18.710\nAnd then x is execute,\nif it's a program, they can run it.\n\n120\n00:06:18.710 --> 00:06:21.188\nNow, if it's a text file they\nwill execute permission on it,\n\n121\n00:06:21.188 --> 00:06:22.480\nit's not gonna do anything.\n\n122\n00:06:22.480 --> 00:06:25.894\nIt needs to be script or a program but\nif it has execute you can then run it and\n\n123\n00:06:25.894 --> 00:06:27.490\nexecute that application.\n\n124\n00:06:27.490 --> 00:06:34.020\nSo, rwx, the root user can read,\nwrite and execute this command.\n\n125\n00:06:34.020 --> 00:06:39.220\nThe root group, which none of us\nare a part of, can read and execute,\n\n126\n00:06:39.220 --> 00:06:44.220\nbut then everybody else,\nthe other, has read and execute.\n\n127\n00:06:44.220 --> 00:06:47.600\nAnd that means that if I'm just\na regular user on this system I'm\n\n128\n00:06:47.600 --> 00:06:49.270\ngonna fall under other.\n\n129\n00:06:49.270 --> 00:06:52.130\nAnd I will be able to read in\nthis case the which command.\n\n130\n00:06:52.130 --> 00:06:56.470\nI will be able to read that command and\nI be able to execute it, which\n\n131\n00:06:56.470 --> 00:07:01.820\nwe can see I've run it in several episodes\nwhere I do something like which ls.\n\n132\n00:07:01.820 --> 00:07:05.320\nI can run the command, but\nI can't edit it and that's important.\n\n133\n00:07:05.320 --> 00:07:09.440\nBecause if I was a hacker I could\nmodify the which command, or\n\n134\n00:07:09.440 --> 00:07:12.350\nI could modify ls or whatever and\nmake it do bad things.\n\n135\n00:07:12.350 --> 00:07:14.910\nAnd then when the root user runs it,\nit's now running as root and\n\n136\n00:07:14.910 --> 00:07:16.780\nthey can do all sorts of\ndamage to the system.\n\n137\n00:07:16.780 --> 00:07:21.000\nSo those permissions are really important\nto get set right, and put in place and\n\n138\n00:07:21.000 --> 00:07:22.240\nprotecting our system.\n\n139\n00:07:22.240 --> 00:07:23.785\n&gt;&gt; And I notice that we're using letters.\n\n140\n00:07:23.785 --> 00:07:24.600\n&gt;&gt; Yes.\n\n141\n00:07:24.600 --> 00:07:27.130\n&gt;&gt; But can we use numbers?\n\n142\n00:07:27.130 --> 00:07:30.550\n&gt;&gt; You can, so\nthankfully we're using letters.\n\n143\n00:07:30.550 --> 00:07:33.850\nIn the olden days we didn't have\n[LAUGH] we didn't have shoes,\n\n144\n00:07:33.850 --> 00:07:37.180\nwe had to walk uphill to school both ways.\n\n145\n00:07:37.180 --> 00:07:39.930\nIn the olden days, we had numbers.\n\n146\n00:07:39.930 --> 00:07:42.330\nAnd the numbers indicated the permissions.\n\n147\n00:07:42.330 --> 00:07:44.280\nAnd you had to memorize this little table.\n\n148\n00:07:44.280 --> 00:07:46.720\nFortunately we don't have to do that,\nbut the support for\n\n149\n00:07:46.720 --> 00:07:48.200\nthe numbers are still there.\n\n150\n00:07:48.200 --> 00:07:52.187\nSo, for example, I told you r was read and\nw as write and x was execute,\n\n151\n00:07:52.187 --> 00:07:54.703\nthat's pretty easy to remember isn't it?\n\n152\n00:07:54.703 --> 00:07:55.802\n&gt;&gt; Yeah, that's easy.\n\n153\n00:07:55.802 --> 00:08:00.105\n&gt;&gt; But, what if I told you that seven\n\n154\n00:08:00.105 --> 00:08:05.038\nindicated read, write and execute?\n\n155\n00:08:05.038 --> 00:08:10.330\nAnd five, indicated read and execute,\nand zero indicated no permissions.\n\n156\n00:08:10.330 --> 00:08:12.230\nLike you had these seven\ndifferent numbers, or\n\n157\n00:08:12.230 --> 00:08:14.610\neight different numbers that you had\nto memorize to know what they wanted.\n\n158\n00:08:14.610 --> 00:08:16.400\nAnd if I wanted to give somebody read and\n\n159\n00:08:16.400 --> 00:08:19.840\nexecute, I just had to know like,\nthat's the number five.\n\n160\n00:08:19.840 --> 00:08:22.400\nOr, if I wanted to give them full control,\nthat's the number seven, or\n\n161\n00:08:22.400 --> 00:08:25.170\nsome various mixture,\nthat was really challenging.\n\n162\n00:08:25.170 --> 00:08:27.560\nBut, that's how it use\nto be in the olden days.\n\n163\n00:08:27.560 --> 00:08:30.662\nSo if you're on a really, and when I say\nolden days, I'm talking like 20 years ago,\n\n164\n00:08:30.662 --> 00:08:33.369\nthat if you're on an older UNIX system\n&gt;&gt; You've got mail days.\n\n165\n00:08:33.369 --> 00:08:38.541\n&gt;&gt; Yeah, so, [LAUGH] which I mean,\nreally those are built\n\n166\n00:08:38.541 --> 00:08:43.880\noff of UNIX system, so\nit sounds funny but it's true.\n\n167\n00:08:43.880 --> 00:08:47.810\nThat in those days, you had those numbers,\nit was hidden from the end users.\n\n168\n00:08:47.810 --> 00:08:49.882\nBut now we're power users,\nwe're in the command line.\n\n169\n00:08:49.882 --> 00:08:52.590\nAnd the interesting thing is,\nall those numbers still work.\n\n170\n00:08:52.590 --> 00:08:56.040\nThese letters, they're just aliases,\naliases that point to those numbers.\n\n171\n00:08:56.040 --> 00:08:59.030\nSo if you still remember the old\nnumber days, you can do that.\n\n172\n00:08:59.030 --> 00:09:03.620\nSo, when I see a file that is written\nlike this, where it has read, write,\n\n173\n00:09:03.620 --> 00:09:07.130\nexecute, followed by read and execute,\nfollowed by read and execute.\n\n174\n00:09:07.130 --> 00:09:10.386\nIn my mind, I still think back to the old\ndays and I'm like, hey, that's 755.\n\n175\n00:09:10.386 --> 00:09:13.720\n755 would be the owner has read,\nwrite, and\n\n176\n00:09:13.720 --> 00:09:18.160\nexecute, the group has read and execute,\nand the user has read and execute.\n\n177\n00:09:18.160 --> 00:09:20.280\nThat was a pretty standard\npermission back in the days.\n\n178\n00:09:20.280 --> 00:09:22.840\nAnd you'll see in some of the config\nfiles and things like that,\n\n179\n00:09:22.840 --> 00:09:26.880\nas you poke around in your DISCRO, that\nthose numbers still pop their head up.\n\n180\n00:09:26.880 --> 00:09:30.760\nAnd with each of the commands I'm about to\nshow you, they'll accept the letters and\n\n181\n00:09:30.760 --> 00:09:31.560\nthe numbers.\n\n182\n00:09:31.560 --> 00:09:35.780\nNow, obviously we're gonna use the letters\nmostly because, they are way easier.\n\n183\n00:09:35.780 --> 00:09:36.882\nThat's the only way to do it.\n\n184\n00:09:36.882 --> 00:09:38.110\n&gt;&gt; Yep.\n&gt;&gt; But the numbers are there for\n\n185\n00:09:38.110 --> 00:09:42.000\nbackwards compatibility, but you may still\nhave scripts, and routines, and utilities\n\n186\n00:09:42.000 --> 00:09:44.720\nthat rely on those numbers, since they\nhave left them in place so they are there.\n\n187\n00:09:45.830 --> 00:09:48.386\nIf you want, take a look at the show\nnotes, cuz in the show notes,\n\n188\n00:09:48.386 --> 00:09:50.679\nI'll have a list of all of\nthe numbers zero through seven.\n\n189\n00:09:50.679 --> 00:09:52.884\nAnd what they map to and\nwhat they mean, but\n\n190\n00:09:52.884 --> 00:09:56.387\njust know that the letters are actually\nan alias for those numbers.\n\n191\n00:09:56.387 --> 00:09:59.002\nIf you just learn the letters,\nyou'll be fine in any modern DISCRO.\n\n192\n00:09:59.002 --> 00:10:01.839\nAny DISCRO made in the last ten years\nis going to use those letters, and\n\n193\n00:10:01.839 --> 00:10:03.940\nthat's gonna be the way to go.\n\n194\n00:10:03.940 --> 00:10:06.980\n&gt;&gt; So, where do permissions come from?\n\n195\n00:10:06.980 --> 00:10:08.136\nWhat magical land are they coming from?\n\n196\n00:10:08.136 --> 00:10:10.302\n&gt;&gt; [LAUGH] Well, we can set them, right,\n\n197\n00:10:10.302 --> 00:10:14.240\nwe can set the permissions however\nit is that we want them to be.\n\n198\n00:10:14.240 --> 00:10:18.520\nSo for example,\nlet me get here into my home directory.\n\n199\n00:10:18.520 --> 00:10:21.420\nAnd in a previous episode,\nI created a bunch of memo files, right.\n\n200\n00:10:21.420 --> 00:10:22.520\nSo here's these memo files.\n\n201\n00:10:22.520 --> 00:10:24.313\nI'll recycle.\n\n202\n00:10:24.313 --> 00:10:25.869\n&gt;&gt; Okay.\n&gt;&gt; I'm conscientious about\n\n203\n00:10:25.869 --> 00:10:26.916\nthe environment here.\n\n204\n00:10:26.916 --> 00:10:28.592\n&gt;&gt; Good\n&gt;&gt; I'm gonna recycle these files.\n\n205\n00:10:28.592 --> 00:10:29.233\n&gt;&gt; Sustainable.\n\n206\n00:10:29.233 --> 00:10:31.657\n&gt;&gt; If I look at these files, they've\ngot some permissions assigned to them.\n\n207\n00:10:31.657 --> 00:10:35.660\nNow, I created them, and because I created\nthem, they're tied to my user account.\n\n208\n00:10:35.660 --> 00:10:40.110\nSo you'll see that dpezet,\nI'm the owner, and I'm the group, right.\n\n209\n00:10:40.110 --> 00:10:44.260\nSo the user and the group are me,\nand then others is everybody else.\n\n210\n00:10:44.260 --> 00:10:48.720\nAnd I've got these permissions set here,\nwhich are pretty much letting me read and\n\n211\n00:10:48.720 --> 00:10:52.500\nwrite, and everybody else can just read.\n\n212\n00:10:52.500 --> 00:10:54.290\nOkay, well, that may be what I want.\n\n213\n00:10:54.290 --> 00:10:58.430\nBut, maybe I don't want everybody to\nbe able to read my memos, just for me.\n\n214\n00:10:58.430 --> 00:11:02.180\nIt's my secret biography that I'm writing.\n\n215\n00:11:02.180 --> 00:11:04.235\nIt should be an autobiography\nat that point.\n\n216\n00:11:04.235 --> 00:11:07.764\n[COUGH] So I may wanna go in here and\nmodify this permissions, and\n\n217\n00:11:07.764 --> 00:11:11.774\nI can certainly do that especially,\nif I have something like a script.\n\n218\n00:11:11.774 --> 00:11:16.108\nSo let's say I have a script file,\nif I take a look at that script file,\n\n219\n00:11:16.108 --> 00:11:18.397\nit's not flagged to be executable.\n\n220\n00:11:18.397 --> 00:11:21.800\nNow there's still ways to run it,\nI can call the interpreter and\n\n221\n00:11:21.800 --> 00:11:23.753\nhave it run the script like that, but\n\n222\n00:11:23.753 --> 00:11:26.540\nI may want to flag that as\na binary to be able to run it.\n\n223\n00:11:26.540 --> 00:11:28.550\nI may have downloaded an application, so\n\n224\n00:11:28.550 --> 00:11:33.300\nI may have like a notepad program or\nsomething like that.\n\n225\n00:11:33.300 --> 00:11:37.420\nAnd the system doesn't actually know it's\na program, it just knows it's a file.\n\n226\n00:11:37.420 --> 00:11:40.780\nAnd so I might need to give\nthat executable permissions, so\n\n227\n00:11:40.780 --> 00:11:43.450\nthat people can run it and\nuse it as an application.\n\n228\n00:11:43.450 --> 00:11:46.190\nThis is where I need to get in and\nmodify the permissions.\n\n229\n00:11:46.190 --> 00:11:50.650\nYou modify permissions by\nusing the chmod command.\n\n230\n00:11:50.650 --> 00:11:52.540\nOkay, chmod, or change mode.\n\n231\n00:11:52.540 --> 00:11:54.810\nLet's you modify the permissions, and\n\n232\n00:11:54.810 --> 00:11:57.360\nupdate them to whatever it is\nyou want them to be, right.\n\n233\n00:11:58.450 --> 00:12:02.100\nAnd in the olden days, we had to\nbreak out that little number table.\n\n234\n00:12:02.100 --> 00:12:06.610\nAnd say for example, if I want me\nto be able to read, write, and\n\n235\n00:12:06.610 --> 00:12:11.340\nexecute that script, and I wanted\neverybody else to be able to read and\n\n236\n00:12:11.340 --> 00:12:16.080\nexecute the script, I would say, chmod\n755, and then point to that script file.\n\n237\n00:12:16.080 --> 00:12:19.034\nSo I do script.sh, okay?\n\n238\n00:12:19.034 --> 00:12:23.109\nAnd when I run that, it's changing in,\nand if I look at that directory now,\n\n239\n00:12:23.109 --> 00:12:26.825\nsee other permission or script.sh\nchanged and it even lit up green.\n\n240\n00:12:26.825 --> 00:12:29.978\nCuz now the system knows, wait a minute,\nthat's a program, people could run that,\n\n241\n00:12:29.978 --> 00:12:32.500\nit's not really a program,\nit's script but you get the point.\n\n242\n00:12:32.500 --> 00:12:34.098\n&gt;&gt; Mm-hm.\n&gt;&gt; And if I look over here, I've got,\n\n243\n00:12:34.098 --> 00:12:38.740\nread, write, and execute for me, read and\nexecute for the group, and then read and\n\n244\n00:12:38.740 --> 00:12:41.650\nexecute for everybody else,\nthe permission to set the way I want.\n\n245\n00:12:42.690 --> 00:12:44.600\nBut, that's the hard way, the numbers.\n\n246\n00:12:44.600 --> 00:12:46.010\nNobody uses the numbers anymore.\n\n247\n00:12:46.010 --> 00:12:49.229\nSo instead, we can change the permissions\nby using the letters, and\n\n248\n00:12:49.229 --> 00:12:53.130\nthe letter system is really neat, because\nit let's us modify things very easily.\n\n249\n00:12:53.130 --> 00:12:56.340\nLike I can modify just\nthe user's permissions.\n\n250\n00:12:56.340 --> 00:13:00.420\nFor example,\nmaybe I want to have read and write, and\n\n251\n00:13:00.420 --> 00:13:05.200\nI don't want everybody else to have read,\nright?\n\n252\n00:13:05.200 --> 00:13:07.840\nSo I want me to have it, but\nI don't want anybody else to.\n\n253\n00:13:07.840 --> 00:13:09.570\nWell, I don't need to\nmodify my permissions.\n\n254\n00:13:09.570 --> 00:13:12.320\nI already have read and\nwrite on these files, so I'm good.\n\n255\n00:13:12.320 --> 00:13:15.100\nI just need to modify the other for\nexample.\n\n256\n00:13:15.100 --> 00:13:17.142\nI wanna take away their right.\n\n257\n00:13:17.142 --> 00:13:21.739\nSo the way we do that, is by using chmod,\nand then you specify a letter.\n\n258\n00:13:21.739 --> 00:13:25.380\nAnd the letter can be u, g, or o, right.\n\n259\n00:13:25.380 --> 00:13:27.753\nIf I'm modifying the user's\npermissions I'd say, u.\n\n260\n00:13:27.753 --> 00:13:30.256\nIf I was modifying the group's\npermissions I'd say, g, and\n\n261\n00:13:30.256 --> 00:13:32.150\nif I was modifying the other,\nI would say, o.\n\n262\n00:13:32.150 --> 00:13:35.000\nSo I'm gonna modify the other permissions.\n\n263\n00:13:35.000 --> 00:13:37.820\nAnd then you use either a plus or a minus.\n\n264\n00:13:37.820 --> 00:13:41.180\nPlus, if you're adding permissions,\nminus if you're taking away.\n\n265\n00:13:41.180 --> 00:13:44.160\nI'm going to remove, the read permissions.\n\n266\n00:13:44.160 --> 00:13:48.070\nSo I'm saying o minus r,\nremove r from other.\n\n267\n00:13:48.070 --> 00:13:49.990\nAnd then I just tell it\nthe file that I wanna modify.\n\n268\n00:13:49.990 --> 00:13:54.610\nSo maybe I wanna modify memo 1, right?\n\n269\n00:13:54.610 --> 00:13:58.470\nOr, I can use the expansion commands we\nsaw in previous episodes to grab a handful\n\n270\n00:13:58.470 --> 00:13:59.170\nof memos.\n\n271\n00:13:59.170 --> 00:14:03.970\nOr I could do a star and asterisk to\nchange them all, but I'm modifying those.\n\n272\n00:14:03.970 --> 00:14:05.942\nWe'll do all of them, there.\n\n273\n00:14:05.942 --> 00:14:11.270\nSo I'm removing the read\npermission from the other user.\n\n274\n00:14:11.270 --> 00:14:14.480\nAnd if I do an ls -la and take a look,\n\n275\n00:14:14.480 --> 00:14:18.520\nsure enough,\nthe other no longer has any permissions.\n\n276\n00:14:18.520 --> 00:14:19.129\nThey're gone.\n\n277\n00:14:19.129 --> 00:14:21.396\n&gt;&gt; Mm-hm.\n&gt;&gt; Okay, they have been taken away,\n\n278\n00:14:21.396 --> 00:14:23.588\nand now they don't have that access.\n\n279\n00:14:23.588 --> 00:14:27.201\nAnd then maybe I changed my mind and\nI'm like well, I wanna be able to read and\n\n280\n00:14:27.201 --> 00:14:30.660\nwrite, but I want the group to be\nable to read and write as well.\n\n281\n00:14:30.660 --> 00:14:34.420\nAnd well they've got read, so I just need\nto add the write permissions for them.\n\n282\n00:14:34.420 --> 00:14:39.002\nSo I could come in and say chmod g,\ncuz I'm modifying the group this time,\n\n283\n00:14:39.002 --> 00:14:43.570\n+w, so I'm adding the right permission.\n\n284\n00:14:43.570 --> 00:14:45.330\nAnd you can add more than one permission.\n\n285\n00:14:45.330 --> 00:14:47.280\nSo for example,\nmaybe I changed my mind, and\n\n286\n00:14:47.280 --> 00:14:49.160\nI want the other group to have to read and\nwrite.\n\n287\n00:14:49.160 --> 00:14:55.557\nI can do a, and then I can say like, 0+rw.\n\n288\n00:14:55.557 --> 00:14:59.697\nI'm adding read and write to other, and\nI'm adding right to group and when I,\n\n289\n00:14:59.697 --> 00:15:02.163\noops, and\nwe kinda have a total of files to do.\n\n290\n00:15:02.163 --> 00:15:04.220\n[LAUGH] So come in here and do that.\n\n291\n00:15:04.220 --> 00:15:07.350\nAnd now when I do that, I can see,\n\n292\n00:15:07.350 --> 00:15:09.700\nthat those permissions are now\nmodified across the board.\n\n293\n00:15:09.700 --> 00:15:12.396\nSo, way easier with these\nletters to be able to do it.\n\n294\n00:15:12.396 --> 00:15:15.328\nAnd I'm using plus and minus, you can\nactually use equal also if you just wanna\n\n295\n00:15:15.328 --> 00:15:16.975\noverwrite, but normally you're adding or\n\n296\n00:15:16.975 --> 00:15:20.030\ntaking something away, so the plus and\nminus are typically what we use.\n\n297\n00:15:20.030 --> 00:15:22.968\nWe go in and we change those, and\nnow we get them set the way we want.\n\n298\n00:15:22.968 --> 00:15:26.110\nIf I wanna put these back to\nthe default of I have read,\n\n299\n00:15:26.110 --> 00:15:29.680\nwrite, everybody else has read,\nthat I would need to come in and\n\n300\n00:15:29.680 --> 00:15:35.380\nchange it by saying\nsomething like chmod g=r\n\n301\n00:15:35.380 --> 00:15:43.130\nw o=r and I'm leaving out user,\nwhich would equal r like that.\n\n302\n00:15:43.130 --> 00:15:47.553\nAnd by specifying that, it's going to just\nreplace the permissions that are on there,\n\n303\n00:15:47.553 --> 00:15:50.926\nand when I take a look at it now,\neverything's, did I get it.\n\n304\n00:15:50.926 --> 00:15:52.903\nI got it backwards,\nI did get it backwards, darn it.\n\n305\n00:15:52.903 --> 00:15:56.364\n[LAUGH] Well, easy to fix, right, because-\n&gt;&gt; Yep, easy to fix.\n\n306\n00:15:56.364 --> 00:15:58.738\n&gt;&gt; I mixed up my group and my user.\n\n307\n00:15:58.738 --> 00:16:00.077\nAnd because I'm using =,\n\n308\n00:16:00.077 --> 00:16:03.864\nit's gonna overwrite the permissions\nthat are there And once that's done,\n\n309\n00:16:03.864 --> 00:16:08.120\nnow everything's back to the way it was\nbefore I got started and messed things up.\n\n310\n00:16:08.120 --> 00:16:09.886\n&gt;&gt; Well, I think we have a pretty\ngood idea how to change and\n\n311\n00:16:09.886 --> 00:16:12.900\nset the permissions, but\nquestion on the default permissions.\n\n312\n00:16:12.900 --> 00:16:14.040\nWhere do they come from?\n\n313\n00:16:14.040 --> 00:16:16.900\n&gt;&gt; Sure, right, so\nif I create a brand new file.\n\n314\n00:16:16.900 --> 00:16:19.770\nAnd if I just here, I'll do, well,\nI guess I did it with Notepad.\n\n315\n00:16:19.770 --> 00:16:23.150\nIf you look at that Notepad file that\nI made, that one right there, okay?\n\n316\n00:16:23.150 --> 00:16:26.340\nWhen I created it, it got some default\npermissions, which Zach asked about and\n\n317\n00:16:26.340 --> 00:16:27.303\nI proceeded to ignore.\n\n318\n00:16:27.303 --> 00:16:28.317\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n319\n00:16:28.317 --> 00:16:29.841\n&gt;&gt; So going way back to his original\n\n320\n00:16:29.841 --> 00:16:32.270\nquestion, where do permissions come from?\n\n321\n00:16:32.270 --> 00:16:37.030\nWell, there are default permissions that\nare assigned when you create a file.\n\n322\n00:16:37.030 --> 00:16:43.150\nNow, by default, most distributions will\nset you as the user and you as the group,\n\n323\n00:16:43.150 --> 00:16:46.380\nthat there is a group with your name,\nright, so it is still a group.\n\n324\n00:16:46.380 --> 00:16:49.070\nYou can put other people\nin your group if you want.\n\n325\n00:16:49.070 --> 00:16:53.190\nBut that's what happens by default\nas far as the user and the group.\n\n326\n00:16:53.190 --> 00:16:57.090\nThose are going to be whoever creates\nthe file by default unless we change it.\n\n327\n00:16:57.090 --> 00:17:00.930\nAnd then the permissions actually\ncome from a thing called umask.\n\n328\n00:17:00.930 --> 00:17:06.230\nUmask is a setting that's defined\nin every Linux distribution,\n\n329\n00:17:06.230 --> 00:17:08.510\nthat defines what those\ndefault permissions are.\n\n330\n00:17:08.510 --> 00:17:13.219\nAnd if you ever wanna see what your\numask is, it's typically the 755 that I\n\n331\n00:17:13.219 --> 00:17:17.362\nmentioned earlier, where the user\ngets read, write and execute.\n\n332\n00:17:17.362 --> 00:17:20.270\nEverybody else gets read and execute.\n\n333\n00:17:20.270 --> 00:17:23.610\nThat's defined in a few different\nplaces depending on your distro.\n\n334\n00:17:23.610 --> 00:17:26.740\nIf you're running Red Hat, CentOS, or\n\n335\n00:17:26.740 --> 00:17:31.330\nFedora, then it's actually tucked\naway inside of /etc/profile.\n\n336\n00:17:31.330 --> 00:17:35.516\nSo if I were to browse on my\nhard drive to /etc/profile.\n\n337\n00:17:35.516 --> 00:17:37.539\nSorry, if I were to pull that file up.\n\n338\n00:17:37.539 --> 00:17:40.170\nLet me do that, there we go.\n\n339\n00:17:40.170 --> 00:17:44.500\nAnd dig around in here somewhere,\nyou would find a umask entry.\n\n340\n00:17:44.500 --> 00:17:48.950\nWell, if you look at mine, there's no\numask entry, and that's because in Debian\n\n341\n00:17:48.950 --> 00:17:51.890\nand Ubuntu and Mint,\nit's stored in a different place, right?\n\n342\n00:17:51.890 --> 00:17:54.900\nSo Red Hat, it would be right in here,\nyou'd see umask equals and\n\n343\n00:17:54.900 --> 00:17:56.040\nit would lay it out.\n\n344\n00:17:56.040 --> 00:18:04.750\nBut on Debian-based OS's,\nit's actually in /etc/login.defs, right?\n\n345\n00:18:04.750 --> 00:18:05.665\nLogin definitions.\n\n346\n00:18:05.665 --> 00:18:08.030\n&gt;&gt; Mm-hm.\n&gt;&gt; And if I look at that file,\n\n347\n00:18:08.030 --> 00:18:12.323\nthere's a lot of stuff in here, so\nI'm gonna do a forward slash to search.\n\n348\n00:18:12.323 --> 00:18:14.930\nAnd I'm just gonna search for\numask, there it is.\n\n349\n00:18:14.930 --> 00:18:17.220\nAnd so here I can find\nwhere the umask is defined.\n\n350\n00:18:17.220 --> 00:18:21.570\nAnd it gives you some information\non how the umask command works, so\n\n351\n00:18:21.570 --> 00:18:24.170\nit kinda tells you what these values are.\n\n352\n00:18:24.170 --> 00:18:29.690\nAnd then down here, you can see\nwhat umask is actually defined as.\n\n353\n00:18:29.690 --> 00:18:32.340\nAnd here's where those numbers\ncome back to haunt us.\n\n354\n00:18:32.340 --> 00:18:37.720\nThe umask is actually masking\ncertain bit values of permissions.\n\n355\n00:18:37.720 --> 00:18:41.740\nSo this is like the exact opposite\nof what the number values would be.\n\n356\n00:18:41.740 --> 00:18:46.980\nIf I wanted to give everybody read, write\nand execute, the permissions would be 777.\n\n357\n00:18:46.980 --> 00:18:52.961\nWell, if you take 777 and\nyou've subtract 022, you're left with 755.\n\n358\n00:18:52.961 --> 00:18:57.997\nAnd 755 was, the user gets read write and\nexecute, the group gets read and\n\n359\n00:18:57.997 --> 00:19:01.730\nexecute, everyone else gets read and\nexecute, right?\n\n360\n00:19:01.730 --> 00:19:05.334\nSo RWX RX RX and that's what this\nis telling me here with umask,\n\n361\n00:19:05.334 --> 00:19:07.246\n022 is setting that default.\n\n362\n00:19:07.246 --> 00:19:09.940\nSo this is where the default\npermissions come from.\n\n363\n00:19:09.940 --> 00:19:11.830\nIf I modify this umask,\n\n364\n00:19:11.830 --> 00:19:15.470\nit'll modify the default permissions\nwhenever somebody creates a file.\n\n365\n00:19:15.470 --> 00:19:16.816\nUsers can override this, too.\n\n366\n00:19:16.816 --> 00:19:21.020\nIf they put it in bashrc, they can change\nit so that every time they log in and\n\n367\n00:19:21.020 --> 00:19:22.960\nthey create a file that\nthe permission gets set differently.\n\n368\n00:19:22.960 --> 00:19:27.030\nSo a user can override this, but this is\nwhere they system defaults come from.\n\n369\n00:19:27.030 --> 00:19:30.780\nI don't think I've ever here in\nproduction modified this default.\n\n370\n00:19:30.780 --> 00:19:33.703\nBut if you do, here's where you\ndo it basically globally for\n\n371\n00:19:33.703 --> 00:19:36.529\neverybody, but\nit can still be overridden for the users.\n\n372\n00:19:36.529 --> 00:19:37.430\nSo just be aware of that.\n\n373\n00:19:37.430 --> 00:19:40.760\nIf it doesn't work for you quite right in\nthe field, double check the user profiles,\n\n374\n00:19:40.760 --> 00:19:42.530\nmake sure they haven't\noverridden it there.\n\n375\n00:19:43.830 --> 00:19:49.360\nAll right, so that's where\nthe permissions come from, but the owner,\n\n376\n00:19:49.360 --> 00:19:53.250\nthe user, and the group, those are being\nassigned as a default value as well.\n\n377\n00:19:53.250 --> 00:19:56.880\nAnd we can jump in and we can start\nto modify and tweak those too.\n\n378\n00:19:56.880 --> 00:19:59.580\nSo we've got a couple of commands\nthat are available to do that.\n\n379\n00:19:59.580 --> 00:20:01.790\nAnd let me just show you those real quick.\n\n380\n00:20:01.790 --> 00:20:05.641\nThe command I showed you\nearlier was chmod, change mode,\n\n381\n00:20:05.641 --> 00:20:09.420\nand now let's just go in and\nmodify permissions.\n\n382\n00:20:09.420 --> 00:20:14.482\nBut there's two other commands\nthat are very similar,\n\n383\n00:20:14.482 --> 00:20:17.936\nthere's chown, and there is chgrp.\n\n384\n00:20:17.936 --> 00:20:20.340\nchown is change owner, right.\n\n385\n00:20:20.340 --> 00:20:23.494\nSo that the user that owns the file,\nwe can change that.\n\n386\n00:20:23.494 --> 00:20:28.090\nAnd chgrp is change group, so\nwe can modify the group that owns it.\n\n387\n00:20:28.090 --> 00:20:32.350\nSo when I look at my permissions,\nI've got three sets of data here.\n\n388\n00:20:32.350 --> 00:20:34.060\nI've got the permissions.\n\n389\n00:20:34.060 --> 00:20:37.830\nFollowed by the user,\nfollowed by the group, and\n\n390\n00:20:37.830 --> 00:20:41.550\nI've got three commands because it\nwould be too hard to have one command.\n\n391\n00:20:41.550 --> 00:20:46.337\nSo we've got chmod or change mode for\nthe permissions, chown or\n\n392\n00:20:46.337 --> 00:20:51.850\nchange owner for the owner, and\nchgroup for change group, right there.\n\n393\n00:20:51.850 --> 00:20:54.810\nThree different commands that\nlet me easily modify that.\n\n394\n00:20:54.810 --> 00:20:59.900\nSo, if I decide, for example,\nthat I'm the owner of a file,\n\n395\n00:20:59.900 --> 00:21:04.450\nor what happens a lot of times is\npeople will be sudo-ing things, right?\n\n396\n00:21:04.450 --> 00:21:08.240\nSudo is the superuser do,\nwhich means I'm gonna run a command, but\n\n397\n00:21:08.240 --> 00:21:10.630\nI wanna run it as the root user, right?\n\n398\n00:21:10.630 --> 00:21:13.060\nSo if I do, who am I?\n\n399\n00:21:13.060 --> 00:21:14.500\nI'm dpezet, right?\n\n400\n00:21:14.500 --> 00:21:18.290\nBut if I sudo who am I,\nand I run that, who am I?\n\n401\n00:21:18.290 --> 00:21:20.360\nI'm root, I'm now an administrator.\n\n402\n00:21:20.360 --> 00:21:25.250\nSo I might be sudo-ing something,\nand maybe just a file listing,\n\n403\n00:21:26.430 --> 00:21:30.510\nand I pipe the output of that\ncommand into something else.\n\n404\n00:21:31.710 --> 00:21:35.930\nSo maybe I do a sudo ls, and\nI'll pipe that in to t, and\n\n405\n00:21:39.930 --> 00:21:43.500\nI'll just do it right here,\nI'll put text like that, okay.\n\n406\n00:21:43.500 --> 00:21:46.010\nSo I just output some information,\nI dumped it into a file, and\n\n407\n00:21:46.010 --> 00:21:50.330\nif I take a look at output.text,\nshoot, the t command rehends me.\n\n408\n00:21:50.330 --> 00:21:51.699\nLet me do this a little\nbit different here.\n\n409\n00:21:51.699 --> 00:21:55.422\nI'm gonna do,\nlet me remove output.text here.\n\n410\n00:21:55.422 --> 00:21:59.962\nI'll do sudo touch output.text.\n\n411\n00:21:59.962 --> 00:22:04.580\nThere, okay so when I create that file,\nwho created it?\n\n412\n00:22:04.580 --> 00:22:06.740\nWell normally it would be me, but\n\n413\n00:22:06.740 --> 00:22:10.380\nbecause I was sudo-ing,\nI was running things as the root user.\n\n414\n00:22:10.380 --> 00:22:14.250\nSo now when I look at it,\nwho's the owner and who's the group?\n\n415\n00:22:14.250 --> 00:22:16.290\nThe root user, not me.\n\n416\n00:22:16.290 --> 00:22:17.690\nWell I didn't intend for\nthat to happen, right?\n\n417\n00:22:17.690 --> 00:22:20.730\nI was just trying to run something,\nI needed administrative privileges.\n\n418\n00:22:20.730 --> 00:22:25.270\nI wanted this file for\nme, but I didn't do it.\n\n419\n00:22:25.270 --> 00:22:28.540\nEarlier when I ran the t command, the t\ncommand actually ran under my context,\n\n420\n00:22:28.540 --> 00:22:31.830\nI could have sudo the t command and\nthat would have achieved the same thing.\n\n421\n00:22:31.830 --> 00:22:35.000\nBut basically here,\nI need to change that owner and\n\n422\n00:22:35.000 --> 00:22:36.610\nI really need to change that group.\n\n423\n00:22:36.610 --> 00:22:40.230\nAnd so I can say chown,\nto change the owner, and\n\n424\n00:22:40.230 --> 00:22:43.100\nthen I can specify who I want this to be.\n\n425\n00:22:43.100 --> 00:22:45.690\nNow, in this case I want it to be me.\n\n426\n00:22:45.690 --> 00:22:49.071\nSo I'll say chown dpezet, and\nI need to specify the file or\n\n427\n00:22:49.071 --> 00:22:51.910\nfiles, cuz I might be\nchanging multiple files.\n\n428\n00:22:51.910 --> 00:22:55.802\nIn this case,\nit's just output .txt, all right.\n\n429\n00:22:55.802 --> 00:22:59.200\nAnd so I'm gonna change that owner now,\nwhen I want to do what do I get?\n\n430\n00:22:59.200 --> 00:23:00.080\nOperation not permitted.\n\n431\n00:23:01.250 --> 00:23:08.250\nBecause I'm not the owner, I am considered\nother, and other can only read.\n\n432\n00:23:08.250 --> 00:23:10.340\nI don't have permission to do it.\n\n433\n00:23:10.340 --> 00:23:12.520\nSo you have to have permission\nto the file to change.\n\n434\n00:23:12.520 --> 00:23:14.860\nOtherwise, anybody can become\nthe owner of any file and\n\n435\n00:23:14.860 --> 00:23:16.200\nnow permissions serve no purpose.\n\n436\n00:23:16.200 --> 00:23:17.990\nYou can gain access to\nwhatever you wanted.\n\n437\n00:23:17.990 --> 00:23:19.660\nSo I'm gonna have to sudo this one.\n\n438\n00:23:21.180 --> 00:23:24.160\nBecause the super user,\nthe root user can override anybody, right?\n\n439\n00:23:24.160 --> 00:23:25.240\nThat's why they're super.\n\n440\n00:23:25.240 --> 00:23:28.370\nSo when I do that,\nnow the command succeeds, and\n\n441\n00:23:28.370 --> 00:23:30.600\nI can see that I'm now the owner.\n\n442\n00:23:30.600 --> 00:23:34.160\nThe group is still wrong right,\nso I can use chgroup to fix that.\n\n443\n00:23:34.160 --> 00:23:40.060\nIf I do chgroup and\nI wanna change that to my group, right?\n\n444\n00:23:40.060 --> 00:23:41.110\nSo I'm just gonna make it mine or\n\n445\n00:23:41.110 --> 00:23:43.410\nmaybe I want it to be\nthe administrator's group right?\n\n446\n00:23:43.410 --> 00:23:47.288\nSo I'll get an admin group, adm,\nand so I'll say chgroup adm.\n\n447\n00:23:47.288 --> 00:23:49.904\nAnd my dpezet account is\nnot in the root group, but\n\n448\n00:23:49.904 --> 00:23:53.284\nI am in the adm group cuz I'm\nan administrator for this machine.\n\n449\n00:23:53.284 --> 00:23:57.789\nSo I'm gonna say change group adm, and\nthen I'll specify that output.text file,\n\n450\n00:23:57.789 --> 00:23:58.430\nlike that.\n\n451\n00:23:58.430 --> 00:24:01.038\nNow I didn't get a permission\nerror this time.\n\n452\n00:24:01.038 --> 00:24:04.202\nI got one a minute ago because\nI wasn't the route user, but\n\n453\n00:24:04.202 --> 00:24:07.750\nnow I'm overriding route and\nit's not asking.\n\n454\n00:24:07.750 --> 00:24:09.190\nBecause I am the owner.\n\n455\n00:24:09.190 --> 00:24:12.210\nThe owner permissions always\ntake precedence, right?\n\n456\n00:24:12.210 --> 00:24:13.890\nYou're the owner,\nyou can do whatever you want.\n\n457\n00:24:13.890 --> 00:24:15.045\nWell within limits.\n\n458\n00:24:15.045 --> 00:24:18.490\n&gt;&gt; [LAUGH]\n&gt;&gt; So now I'm changing that group and\n\n459\n00:24:18.490 --> 00:24:20.760\nif I take a look at it it's succeeded and\n\n460\n00:24:20.760 --> 00:24:25.190\nnow ADM is the group that\nis attached to the file.\n\n461\n00:24:25.190 --> 00:24:28.240\nAnd I can put other people, I can take\nZach and put him in the ADM group.\n\n462\n00:24:28.240 --> 00:24:31.620\nAnd now he'll have well,\nsadly just read permission right but\n\n463\n00:24:31.620 --> 00:24:33.750\nif I gave him more permission\nto it he'd have that access.\n\n464\n00:24:33.750 --> 00:24:36.778\nSo I can use those groups to give other\npeople access to the file, right?\n\n465\n00:24:36.778 --> 00:24:42.320\nNow, using changed group and\nchanged owner.\n\n466\n00:24:42.320 --> 00:24:46.750\nTypically we're changing a single file,\nbut you might actually have nested files,\n\n467\n00:24:46.750 --> 00:24:51.060\nso, like if I have test two and\nI switch it to test two,\n\n468\n00:24:51.060 --> 00:24:52.905\nmaybe have another directory in here.\n\n469\n00:24:52.905 --> 00:24:55.680\nWhoops.\n\n470\n00:24:55.680 --> 00:25:03.030\nTest three, and in here I have\na file called file dot text, okay?\n\n471\n00:25:03.030 --> 00:25:09.000\nAnd let's say that I want to change all\nof this to have the group of ADM, okay?\n\n472\n00:25:09.000 --> 00:25:14.280\nWell if I do a CH group,\nADM dot slash star, right?\n\n473\n00:25:14.280 --> 00:25:18.420\nI'm saying change everything in\nthis folder to have a group of ADM.\n\n474\n00:25:18.420 --> 00:25:21.340\nWhen I run that It works.\n\n475\n00:25:21.340 --> 00:25:23.120\nEveryone's got a group ADM.\n\n476\n00:25:23.120 --> 00:25:28.150\nBut when I start navigating down into\nthe tree, it didn't go very far, did it?\n\n477\n00:25:28.150 --> 00:25:30.840\nIt only got everything that\nwas literally in that folder.\n\n478\n00:25:30.840 --> 00:25:35.580\nSo all of these commands have a -R tag.\n\n479\n00:25:35.580 --> 00:25:38.030\nIf you do the command line argument -R?\n\n480\n00:25:38.030 --> 00:25:39.040\nIt makes recursive.\n\n481\n00:25:39.040 --> 00:25:41.610\nAnd they'll dig down\ninto those sub folders.\n\n482\n00:25:41.610 --> 00:25:43.880\nAnd they'll fix the permissions\nall the way along that tree.\n\n483\n00:25:43.880 --> 00:25:45.470\nSo if you ever wanna do it that way.\n\n484\n00:25:45.470 --> 00:25:46.850\nRemember that -R.\n\n485\n00:25:46.850 --> 00:25:48.620\nAnd I did a dash capital R.\n\n486\n00:25:48.620 --> 00:25:50.710\nDash capital R works\nin all three commands.\n\n487\n00:25:50.710 --> 00:25:53.360\nCHMOD, CHOWN CHGRP.\n\n488\n00:25:53.360 --> 00:25:54.660\nDash lower case R?\n\n489\n00:25:54.660 --> 00:25:55.590\nWorks in most of them.\n\n490\n00:25:55.590 --> 00:25:56.630\nAnd I can never remember which one.\n\n491\n00:25:56.630 --> 00:25:59.070\nOne of them doesn't have dash lowercase R.\n\n492\n00:25:59.070 --> 00:26:01.210\nSo I've gotten in the habit of\nusing dash capital R because\n\n493\n00:26:01.210 --> 00:26:02.400\nI know it works everywhere.\n\n494\n00:26:02.400 --> 00:26:07.403\nAnd now if I go into test two, even\nall the way down into test three I can\n\n495\n00:26:07.403 --> 00:26:12.460\nsee that those permissions trickle\nall the way down into that tree.\n\n496\n00:26:12.460 --> 00:26:13.780\nAnd while we're talking about shortcuts.\n\n497\n00:26:13.780 --> 00:26:15.790\nLet me just show you one more shortcut.\n\n498\n00:26:15.790 --> 00:26:18.050\nI'm running low on time,\nZach's giving me the eye.\n\n499\n00:26:18.050 --> 00:26:19.250\nSo let me do one more shortcut.\n\n500\n00:26:19.250 --> 00:26:21.190\n&gt;&gt; Shortcuts are important.\n\n501\n00:26:21.190 --> 00:26:23.050\n&gt;&gt; I don't usually use change group.\n\n502\n00:26:23.050 --> 00:26:24.660\nAll right because CHMOD?\n\n503\n00:26:24.660 --> 00:26:27.392\nCan actually change the group as well.\n\n504\n00:26:27.392 --> 00:26:32.676\nSo CHGRP is somewhat of a redundant\ncommand, I use CHMOD to modify both.\n\n505\n00:26:32.676 --> 00:26:33.737\nWith CHMOD?\n\n506\n00:26:33.737 --> 00:26:37.740\nYou can actually take a file,\nlet's say I changed my mind and\n\n507\n00:26:37.740 --> 00:26:43.100\nI want a file to be owned by the root\nuser and the root group, okay?\n\n508\n00:26:43.100 --> 00:26:45.960\nI could come in and I could take that\noutput file, I'll have to sudo this.\n\n509\n00:26:45.960 --> 00:26:48.773\nActually, yeah well,\nI'll sudo it just to be on the safe side.\n\n510\n00:26:48.773 --> 00:26:51.202\nI'm gonna use CHOWN.\n\n511\n00:26:51.202 --> 00:26:53.281\nYou know what I think I\nsaid CHMOD a minute ago.\n\n512\n00:26:53.281 --> 00:26:53.987\n&gt;&gt; CHMOD.\n\n513\n00:26:53.987 --> 00:26:56.475\n&gt;&gt; Sorry I meant CHOWN that\nwe can change the owner and\n\n514\n00:26:56.475 --> 00:26:58.740\nspecify these things at the same time.\n\n515\n00:26:58.740 --> 00:27:00.910\nNot CHMOD I wanna clarify that.\n\n516\n00:27:00.910 --> 00:27:04.370\nSo I can say CHOWN and\nthen I can specify the user.\n\n517\n00:27:04.370 --> 00:27:08.720\nMaybe I want that to be root and\nthen a colon and the group.\n\n518\n00:27:08.720 --> 00:27:12.430\nI can specify the user and the group\nat the same time by using that colon.\n\n519\n00:27:12.430 --> 00:27:17.080\nAnd now I can specify output.text and\n\n520\n00:27:17.080 --> 00:27:21.180\nit goes in and\nit modifies the user and the group.\n\n521\n00:27:21.180 --> 00:27:23.218\nAnd so there I can see it modified it and\n\n522\n00:27:23.218 --> 00:27:25.960\nyou can even use it to\nmodify just the group.\n\n523\n00:27:25.960 --> 00:27:29.930\nMaybe I don't want the group to be route,\nI want the group to be admin, right?\n\n524\n00:27:29.930 --> 00:27:34.070\nSo I can take that command and\ninstead of saying user colon group,\n\n525\n00:27:34.070 --> 00:27:37.170\nI can just say colon group, right?\n\n526\n00:27:37.170 --> 00:27:39.090\nI'm going to leave the user off.\n\n527\n00:27:39.090 --> 00:27:41.850\nLeaving the user off says,\nleave it at whatever it already is.\n\n528\n00:27:41.850 --> 00:27:43.010\nMine's already at route.\n\n529\n00:27:43.010 --> 00:27:46.270\nAnd so now it's just gonna change\nthe group by doing that colon.\n\n530\n00:27:46.270 --> 00:27:47.820\nAnd when I take a look at it now?\n\n531\n00:27:47.820 --> 00:27:49.330\nJust the group changed.\n\n532\n00:27:49.330 --> 00:27:54.660\nSo, in the textbook definition of\nit we have CHGRP, that you can use.\n\n533\n00:27:54.660 --> 00:27:59.410\nBut in practice I rarely use CHGRP,\ninstead I just use CHOWN.\n\n534\n00:27:59.410 --> 00:28:01.480\nAnd you can specify the user and\ngroup or one and\n\n535\n00:28:01.480 --> 00:28:04.110\nthe other by using that colon\nto designate the group.\n\n536\n00:28:04.110 --> 00:28:06.288\nAnd you get it right there\nin a single command and\n\n537\n00:28:06.288 --> 00:28:07.610\nit makes it a little bit easier.\n\n538\n00:28:07.610 --> 00:28:08.940\n&gt;&gt; Shortcuts are nice.\n\n539\n00:28:08.940 --> 00:28:12.295\n&gt;&gt; Yeah, absolutely, anything you can\ndo to save time and reduce typos.\n\n540\n00:28:12.295 --> 00:28:15.050\n[LAUGH]\n&gt;&gt; Wonderful job as usual, sir.\n\n541\n00:28:15.050 --> 00:28:18.750\nBecoming a Linux Power User,\nthis has been Filesystem Permissions.\n\n542\n00:28:18.750 --> 00:28:22.270\nAnd there's a whole bunch of videos\nin the Becoming a Linux Power User,\n\n543\n00:28:22.270 --> 00:28:25.120\nmake sure you watch all of them,\nyou'll be glad you did.\n\n544\n00:28:25.120 --> 00:28:27.700\nAnd thank you for\nwatching ITProTV, remember,\n\n545\n00:28:27.700 --> 00:28:30.040\na good IT pro is always learning.\n\n546\n00:28:30.040 --> 00:28:30.940\nI'm Zach Memos.\n\n547\n00:28:30.940 --> 00:28:31.610\n&gt;&gt; And I'm Don Pezet.\n\n548\n00:28:31.610 --> 00:28:32.594\n&gt;&gt; And we'll see you very soon.\n\n549\n00:28:32.594 --> 00:28:40.090\n[MUSIC]\n\n550\n00:28:40.090 --> 00:28:43.059\n&gt;&gt; Thank you for watching ITPRO.TV\n\n",
          "vimeoId": "222511902"
        },
        {
          "description": "Don and Zach discuss how to move files to different locations & folders, using the 'cp' command, using the 'mv' command, and using the 'rm' command to totally remove files.",
          "length": "1314",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-4-moving_files-061917-PGM.00_21_39_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-4-moving_files-061917-PGM.00_21_39_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-2-4-moving_files-061917-PGM.00_21_39_19.Still001-sm.jpg",
          "title": "Moving Files",
          "transcript": "WEBVTT\n\n1\n00:00:00.200 --> 00:00:01.291\nWelcome to ITProTV.\n\n2\n00:00:01.291 --> 00:00:06.673\nI'm your host Don-\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.673 --> 00:00:08.233\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.233 --> 00:00:11.993\nYou're watching ITProTV.\n\n5\n00:00:11.993 --> 00:00:14.926\n&gt;&gt; Hello again and\nthank you for choosing ITProTV,\n\n6\n00:00:14.926 --> 00:00:17.270\nhelping you learn wherever you go.\n\n7\n00:00:17.270 --> 00:00:20.920\nI'm your host Zach Memos as we continue\non with becoming a LinuxPowerUser, and\n\n8\n00:00:20.920 --> 00:00:24.688\nin this episode, we're looking at moving\nsome files, isn't that right, Don?\n\n9\n00:00:24.688 --> 00:00:25.557\n&gt;&gt; That's right.\n\n10\n00:00:25.557 --> 00:00:29.113\nUp until this point we keep dealing\nwith files from the file system.\n\n11\n00:00:29.113 --> 00:00:32.424\nAs a regular user, you don't have\nto do it from the command line.\n\n12\n00:00:32.424 --> 00:00:35.351\nYou have this nice graphical user\ninterface in front of you and\n\n13\n00:00:35.351 --> 00:00:38.130\nmost things are just drag and\ndrop and that's that.\n\n14\n00:00:38.130 --> 00:00:41.748\nBut as a power user, we're oftentimes\nhaving to do things from the command line\n\n15\n00:00:41.748 --> 00:00:44.502\ninterface, and files are rarely\nwhere we want them to be, so\n\n16\n00:00:44.502 --> 00:00:48.292\nwe need to know how to manipulate them,\nhow to move them, copy them, delete them.\n\n17\n00:00:48.292 --> 00:00:50.495\nThat's a critical skill we need\nto function with files, and\n\n18\n00:00:50.495 --> 00:00:52.525\nwe really haven't addressed\nit in a previous episode,\n\n19\n00:00:52.525 --> 00:00:54.313\nso we're gonna tackle it\nright here in this one.\n\n20\n00:00:54.313 --> 00:00:54.827\n&gt;&gt; Awesome.\n\n21\n00:00:54.827 --> 00:00:58.226\nYeah, because up to this point, we've\nbeen creating permissions in files and\n\n22\n00:00:58.226 --> 00:01:01.552\nwhat not, but now we're actually gonna\nbe able to put them somewhere of use.\n\n23\n00:01:01.552 --> 00:01:04.263\n[LAUGH]\n&gt;&gt; Yeah we've kind of been leaving things\n\n24\n00:01:04.263 --> 00:01:07.154\nwhere they landed and\nthat gets messy really fast, right?\n\n25\n00:01:07.154 --> 00:01:09.290\n&gt;&gt; Yeah.\nSo having some good organizational skills,\n\n26\n00:01:09.290 --> 00:01:11.610\ngetting things put in the right\nspot it is a pretty handy thing.\n\n27\n00:01:11.610 --> 00:01:16.291\nSo let's kick things off with the good\nold trusty Unix copy command.\n\n28\n00:01:16.291 --> 00:01:18.715\nNow back in the olden days\nwhen Unix was written,-\n\n29\n00:01:18.715 --> 00:01:19.947\n&gt;&gt; Back in the olden days.\n\n30\n00:01:19.947 --> 00:01:22.095\n&gt;&gt; Yeah it was all in the late 70s,\nearly 80s,\n\n31\n00:01:22.095 --> 00:01:25.115\nthey would really just take a command and\ndrop the vowels out of it.\n\n32\n00:01:25.115 --> 00:01:28.560\nSo, if I wanna copy something,\nit's gonna be cp.\n\n33\n00:01:28.560 --> 00:01:31.170\nIt's a pretty safe guess as to\nwhat a command is gonna be.\n\n34\n00:01:31.170 --> 00:01:35.070\nFor copying files from our command line,\nthat's exactly what we are gonna do.\n\n35\n00:01:35.070 --> 00:01:41.080\nSo, if you were to run man cp,\nyou could pull up the manual page for cp.\n\n36\n00:01:41.080 --> 00:01:43.130\nThere's not a whole heck\nof a lot to this command.\n\n37\n00:01:43.130 --> 00:01:47.029\nWe're gonna copy from a source\nto a destination, and\n\n38\n00:01:47.029 --> 00:01:50.332\nthat's basically all we need to know for\ncp.\n\n39\n00:01:50.332 --> 00:01:53.756\nIf I take a look at my home directory,\nI have a folder called notes and\n\n40\n00:01:53.756 --> 00:01:57.122\nthat's where I put a bunch of note files,\nand for whatever reason I\n\n41\n00:01:57.122 --> 00:02:00.629\ncreated a note and left it right here\non the root of my note directory.\n\n42\n00:02:00.629 --> 00:02:05.238\nSo I wanna copy that and get note21 into\nthe notes folder where it needs to be.\n\n43\n00:02:05.238 --> 00:02:09.687\nIf I look in the notes folder I've got\nnote01 all the way through note20,\n\n44\n00:02:09.687 --> 00:02:13.830\nnote21 is sitting out here in my root,\nso I just wanna copy it.\n\n45\n00:02:13.830 --> 00:02:19.808\nSo, we do cp and then we specify\nthe source and the destination.\n\n46\n00:02:19.808 --> 00:02:22.531\nNow, There's two ways that we can do this.\n\n47\n00:02:22.531 --> 00:02:28.545\nThere's one way where we assume the file\nis right here in the folder that we're in.\n\n48\n00:02:28.545 --> 00:02:31.165\nSo I, if i run pwd,\npresent working directory,\n\n49\n00:02:31.165 --> 00:02:34.245\nI can see that I'm in /home/dpezet.\n\n50\n00:02:34.245 --> 00:02:39.261\nSo if I were to say cp notes, or\njust sorry, note21, I'm saying that I\n\n51\n00:02:39.261 --> 00:02:44.877\nwanna copy a file called note21 and\nit's in the present, working directory.\n\n52\n00:02:44.877 --> 00:02:47.767\nIt's in the directory\nthat I'm in right now and\n\n53\n00:02:47.767 --> 00:02:50.500\nthen I wanna copy it to somewhere else.\n\n54\n00:02:50.500 --> 00:02:54.443\nNow the somewhere else needs to be another\ndirectory, or it could be this directory,\n\n55\n00:02:54.443 --> 00:02:58.165\nif I gave it a different file name, and\nhere's where things get a little tricky,\n\n56\n00:02:58.165 --> 00:03:00.398\nbecause I can specify just\nwhere I want it to go.\n\n57\n00:03:00.398 --> 00:03:02.480\nI want it to go in the notes folder,\nwhich is right here.\n\n58\n00:03:02.480 --> 00:03:08.860\nSo, I could use the dot alias\nwhich says this folder /notes,\n\n59\n00:03:08.860 --> 00:03:13.660\nwhich is a folder I wanna copy the file,\nnote21, from this folder\n\n60\n00:03:13.660 --> 00:03:18.460\nto a subfolder called notes,\nthat's my source and my destination.\n\n61\n00:03:18.460 --> 00:03:21.169\nNow this is a pretty short\nway of writing this, so\n\n62\n00:03:21.169 --> 00:03:23.162\nwhen I run it it's gonna copy that.\n\n63\n00:03:23.162 --> 00:03:29.850\nThe longer way for me to write that would\nhave been to do fully defined path names.\n\n64\n00:03:29.850 --> 00:03:36.033\nI could have said cp\n/home/dpezet/note21 and\n\n65\n00:03:36.033 --> 00:03:41.507\nthen /home/depezet/notes/note21.\n\n66\n00:03:41.507 --> 00:03:45.480\nNow notice how this time I'm\nspecifying a destination file name.\n\n67\n00:03:45.480 --> 00:03:49.738\nHere I just gave it a destination\nfolder oops, if I can click, I gave it\n\n68\n00:03:49.738 --> 00:03:54.420\na destination folder, and that means\njust leave the file name what it was.\n\n69\n00:03:54.420 --> 00:03:57.660\nIf it was called note21 before\nI wanna call it note21 now.\n\n70\n00:03:57.660 --> 00:04:01.645\nBut by specifying a file name you\ncan actually choose to change it.\n\n71\n00:04:01.645 --> 00:04:04.233\nWhen I copy I might want it\nto have a different name,\n\n72\n00:04:04.233 --> 00:04:07.302\nmaybe I want it to be note21.txt,\nit's just a text file,\n\n73\n00:04:07.302 --> 00:04:10.088\nI forgot to put an extension on it so\nthat is what I want.\n\n74\n00:04:10.088 --> 00:04:13.896\nSo I can copy that over and\nnow it'll be note21.txt,\n\n75\n00:04:13.896 --> 00:04:18.440\nand when I run that, it'll copy it and\nit'll be right over there.\n\n76\n00:04:18.440 --> 00:04:22.220\nWhatever data was inside of it,\nwill be there in the new folder, and\n\n77\n00:04:22.220 --> 00:04:27.330\nif I go in the notes folder and\ntake a look, I should see the note21\n\n78\n00:04:27.330 --> 00:04:32.460\nI copied the first time and note21.txt,\nthe one that I copied the second time.\n\n79\n00:04:32.460 --> 00:04:35.810\nNow, I gave you two examples that\nbasically did the same thing.\n\n80\n00:04:35.810 --> 00:04:37.180\nWhich one is right?\n\n81\n00:04:37.180 --> 00:04:43.550\nWell they're both right, but\nthis first one can be prone to mistakes.\n\n82\n00:04:43.550 --> 00:04:47.668\nI might be in the wrong directory in which\ncase it won't find the original note21 or\n\n83\n00:04:47.668 --> 00:04:50.452\nit might find the wrong note21,\nthat would be bad, and\n\n84\n00:04:50.452 --> 00:04:52.315\nthen same thing with my destination.\n\n85\n00:04:52.315 --> 00:04:57.047\nIf the notes folder didn't exist It would\nassume that I was creating a file called\n\n86\n00:04:57.047 --> 00:04:57.882\nnotes, and so\n\n87\n00:04:57.882 --> 00:05:03.340\nnow it will copy note21 into a file called\nnotes instead of a folder called notes.\n\n88\n00:05:03.340 --> 00:05:07.280\nI could have put a trailing slash on\nthat to prevent that little error.\n\n89\n00:05:07.280 --> 00:05:10.937\nBut if I know my file system,\nif I know the directory hierarchy,\n\n90\n00:05:10.937 --> 00:05:13.375\nI can write it really short and\nuse alias and\n\n91\n00:05:13.375 --> 00:05:17.544\nshortcuts like that to take advantage\nof it and to make it easier to type.\n\n92\n00:05:17.544 --> 00:05:22.531\nBut if I don't know the file system, if\nI'm uncertain, it's better to type it all\n\n93\n00:05:22.531 --> 00:05:26.965\nthe way out like this because if\nanything is wrong, you'll get an error.\n\n94\n00:05:26.965 --> 00:05:28.875\nIf there wasn't a folder called notes,\n\n95\n00:05:28.875 --> 00:05:31.639\nI'd get an error instead of\ncreating a file called notes.\n\n96\n00:05:31.639 --> 00:05:34.580\nIt would let me know,\nand I can take action.\n\n97\n00:05:34.580 --> 00:05:39.316\nSo they're both right, and it's usually\nbased on how familiar you are with\n\n98\n00:05:39.316 --> 00:05:43.251\nthe file system whether you go\nthe shortcut way or the long way.\n\n99\n00:05:43.251 --> 00:05:46.230\nNow the cp command is pretty simple.\n\n100\n00:05:46.230 --> 00:05:49.590\nCP followed by a source\nfollowed by destination.\n\n101\n00:05:49.590 --> 00:05:53.962\nBut there are a few little tags that\nare kind of nice to use that are command\n\n102\n00:05:53.962 --> 00:05:58.200\nline arguments that we can use that\nchange the way cp behaves, right.\n\n103\n00:05:58.200 --> 00:06:00.980\nI wanna highlight two that\nare really common and there’s a ton.\n\n104\n00:06:00.980 --> 00:06:03.450\nIf you read the manual page for cp.\n\n105\n00:06:03.450 --> 00:06:08.720\nYou'll see there's dash a, b, d, f,\ni, h, n, p, it just goes on and on.\n\n106\n00:06:08.720 --> 00:06:11.328\nAll of these change the way that cp works,\nbut\n\n107\n00:06:11.328 --> 00:06:13.879\nI wanna show you two\nthat are really useful.\n\n108\n00:06:13.879 --> 00:06:16.300\nOne is -r.\n\n109\n00:06:16.300 --> 00:06:21.370\nIf we take a look at that man page and\nwe hunt down -r what you'll find is,\n\n110\n00:06:21.370 --> 00:06:24.990\nright here, that it's recursive.\n\n111\n00:06:24.990 --> 00:06:29.130\nIf I wanna copy not just a file,\nbut a folder and\n\n112\n00:06:29.130 --> 00:06:34.140\nall of it's contents, I can use -r and\nit will copy that folder and\n\n113\n00:06:34.140 --> 00:06:36.240\neverything inside of it\nto another location.\n\n114\n00:06:36.240 --> 00:06:39.040\nThat's really in if you\nare backing something up.\n\n115\n00:06:39.040 --> 00:06:41.631\nSo, for example, that notes folder,\nI'm in notes and\n\n116\n00:06:41.631 --> 00:06:43.462\nit's got a bunch of notes inside of it.\n\n117\n00:06:43.462 --> 00:06:50.073\nWell, if I move up to my root and I wanna\ncopy that notes folder somewhere else,\n\n118\n00:06:50.073 --> 00:06:54.390\nI can say cp notes and\nthen specify somewhere else.\n\n119\n00:06:54.390 --> 00:06:58.760\nWell, it's just going to copy\nthe folder name and that's it, but\n\n120\n00:06:58.760 --> 00:07:02.427\nif I do a cp -r notes,\nnow it's gonna copy the folder and\n\n121\n00:07:02.427 --> 00:07:06.040\neverything inside it,\nincluding other subfolders.\n\n122\n00:07:06.040 --> 00:07:07.933\nI might have several trees deep.\n\n123\n00:07:07.933 --> 00:07:13.530\nIf I go into notes and\nI'll create a directory called test1 and\n\n124\n00:07:13.530 --> 00:07:18.177\nthen I'll create a directory called test2,\nand,\n\n125\n00:07:18.177 --> 00:07:24.670\noops let me get into test2, and\nI'll make a directory called test3.\n\n126\n00:07:24.670 --> 00:07:29.000\nSo I'm making several layers deep,\nall these subfolders.\n\n127\n00:07:29.000 --> 00:07:35.370\nWell, when I do a copy for this,\nI'll be able to copy all of that.\n\n128\n00:07:35.370 --> 00:07:39.958\nSo, for example, if I say,\ncp -r notes, and\n\n129\n00:07:39.958 --> 00:07:46.932\nI wanna copy that right back here,\nbut maybe to a folder called memos.\n\n130\n00:07:46.932 --> 00:07:48.985\nSo, I can come in here and\ntype in memos, and so\n\n131\n00:07:48.985 --> 00:07:51.518\nnow I'm gonna create this\nfolder where I'm gonna have,\n\n132\n00:07:51.518 --> 00:07:54.541\nmaybe I don't wanna call them notes,\nthey're gonna be memos now.\n\n133\n00:07:54.541 --> 00:07:56.054\nSo-\n&gt;&gt; Yes, I like memos better.\n\n134\n00:07:56.054 --> 00:07:57.137\n&gt;&gt; Hey that's your last name.\n\n135\n00:07:57.137 --> 00:08:01.547\n&gt;&gt; [LAUGH]\n&gt;&gt; So unintended wordplay there, but\n\n136\n00:08:01.547 --> 00:08:06.680\nif I go into the memos folder and\ntake a look, There’s all the notes and\n\n137\n00:08:06.680 --> 00:08:11.820\nif I go into test1 and test2,\nright, they've all followed along.\n\n138\n00:08:11.820 --> 00:08:14.870\nSo making it recursive is really\nhandy when working with directories,\n\n139\n00:08:14.870 --> 00:08:18.040\nmaking it recursive doesn't help\nat all with an individual file.\n\n140\n00:08:18.040 --> 00:08:21.260\nBut if you're copying directories\nthat dash R is really handy,\n\n141\n00:08:22.300 --> 00:08:25.030\nwhat if I don't want to\nleave behind a copy?\n\n142\n00:08:25.030 --> 00:08:27.865\n&gt;&gt; What if I don't want to leave\nbehind anything, is that possible?\n\n143\n00:08:27.865 --> 00:08:31.139\n&gt;&gt; Yeah, so I am leaving stuff behind,\nright, and so\n\n144\n00:08:31.139 --> 00:08:35.954\nI made this whole memos folder but\nthe notes folder is still there, right?\n\n145\n00:08:35.954 --> 00:08:36.944\nAnd all my stuff, and\n\n146\n00:08:36.944 --> 00:08:40.750\neven note 21 from the beginning of\nthe episode is still there, right.\n\n147\n00:08:40.750 --> 00:08:45.367\nWhen you copy, it's doing what the name\nimplies, it's copy where you duplicate,\n\n148\n00:08:45.367 --> 00:08:47.656\nif you move, that's a different story.\n\n149\n00:08:47.656 --> 00:08:52.551\nNow you move, you're taking it out of\none place and putting it into another,\n\n150\n00:08:52.551 --> 00:08:56.450\nfortunately, the syntax is near identical,\nright?\n\n151\n00:08:56.450 --> 00:09:01.950\nSo I say, move this source, and\nmy source might be that note 21 file,\n\n152\n00:09:01.950 --> 00:09:05.340\nand then my destination, and\nmy destination in this case might be.\n\n153\n00:09:05.340 --> 00:09:09.295\nIn this folder called notes,\nand when I move it,\n\n154\n00:09:09.295 --> 00:09:12.675\nI can take a look and note21 is now gone.\n\n155\n00:09:12.675 --> 00:09:15.604\nAnd when I go into notes,\nthere it is, note21, well,\n\n156\n00:09:15.604 --> 00:09:19.710\nI had already copied it in there so I\nguess that's not a truly fair case, right?\n\n157\n00:09:20.740 --> 00:09:24.310\nInteresting thing though, it didn't prompt\nme about overwriting the file, did it?\n\n158\n00:09:24.310 --> 00:09:26.233\nIt just overwrote it, so be aware that,\n\n159\n00:09:26.233 --> 00:09:28.787\nthe move command will\noverwrite without prompting.\n\n160\n00:09:28.787 --> 00:09:31.371\nA lot of people like to\nuse the dash i command,\n\n161\n00:09:31.371 --> 00:09:34.160\nwhich makes you have to\napprove any overwrites.\n\n162\n00:09:34.160 --> 00:09:37.180\nIf you're worried about that,\nI know a lot of people alias that,\n\n163\n00:09:37.180 --> 00:09:40.175\nso that MV will automatically do dash i.\n\n164\n00:09:40.175 --> 00:09:44.215\nThat's really handy, especially for root\nusers where its super easy for a root user\n\n165\n00:09:44.215 --> 00:09:48.275\nto overwrite things, you can put in\nas a safety net, but move does that.\n\n166\n00:09:48.275 --> 00:09:51.544\nAnd the same thing with the dash R for\nbeing recursive,\n\n167\n00:09:51.544 --> 00:09:54.115\nmaybe I've got this folder called memos.\n\n168\n00:09:54.115 --> 00:09:58.065\nBut I decide that I actually want\nto call it memo, without an s.\n\n169\n00:09:58.065 --> 00:10:01.990\nSo I can say I wanna move memos and\n\n170\n00:10:01.990 --> 00:10:06.000\nI'm gonna move that to right here and\nI'll just call it memo instead.\n\n171\n00:10:06.000 --> 00:10:08.440\nThere's no rename command in Unix or\n\n172\n00:10:08.440 --> 00:10:12.400\nLinux, if you wanna rename something\nyou just move it to the new name.\n\n173\n00:10:12.400 --> 00:10:17.060\nAnd now when I look I got a folder\ncalled memo, and you can do\n\n174\n00:10:17.060 --> 00:10:21.310\nthat with wildcards too, like if I wanted\nto rename all of these things, right.\n\n175\n00:10:21.310 --> 00:10:26.744\nIf I wanted to rename note,\nfollowed by a number 2 memo,\n\n176\n00:10:26.744 --> 00:10:34.119\nfollowed by a number, you could come\nin and say mv note* to memo* like that.\n\n177\n00:10:34.119 --> 00:10:37.718\nThe star is an asterisk, right,\nthe asterisk that's gonna go in and\n\n178\n00:10:37.718 --> 00:10:39.130\ngrab these values.\n\n179\n00:10:39.130 --> 00:10:41.000\nAnd so it's gonna move it and shoot,\n\n180\n00:10:41.000 --> 00:10:44.020\nit's assuming it's a directory, I have\nthe do command expansion on that one.\n\n181\n00:10:44.020 --> 00:10:46.970\nBut it'll let you move it and\nyou can grab all those in bulk and\n\n182\n00:10:46.970 --> 00:10:52.140\nrename them, there's a few different ways\nthat you can go through renaming this.\n\n183\n00:10:52.140 --> 00:10:55.676\nAnd in this case because I'm sending more\nthan one file it's assuming that I'm\n\n184\n00:10:55.676 --> 00:10:58.759\nsending them to a directory which is\nwhy it threw an error on that one.\n\n185\n00:10:58.759 --> 00:11:01.831\nWe haven't done regular expressions yet,\nbut\n\n186\n00:11:01.831 --> 00:11:07.300\nI could do a regular expression here that\nsaid, take whatever value was in the star.\n\n187\n00:11:07.300 --> 00:11:09.738\nAnd insert that here at the end\nof the memo to rename it,\n\n188\n00:11:09.738 --> 00:11:12.540\nit gets a little complex so\nI'll double back on this example.\n\n189\n00:11:12.540 --> 00:11:15.850\nWhen we get to the regular expressions\nepisode and show you guys how to do that,\n\n190\n00:11:15.850 --> 00:11:18.806\nbut in the short term you could\nmove any one note by saying.\n\n191\n00:11:18.806 --> 00:11:21.933\nMove note01 to memo01,\nand now when I do that,\n\n192\n00:11:21.933 --> 00:11:26.905\nit's renamed and if we wanna use something\nwe've already learned in this show.\n\n193\n00:11:26.905 --> 00:11:31.733\nThere's command expansion right, and\nwith command expansion I said that I\n\n194\n00:11:31.733 --> 00:11:36.550\ncould do ranges right, so I could come\nin and I could say, move note zero.\n\n195\n00:11:36.550 --> 00:11:42.562\nAnd then throw in a bracket of 1..9\n\n196\n00:11:42.562 --> 00:11:46.665\nlike that, and I could be moving it to and\n\n197\n00:11:46.665 --> 00:11:50.950\nthen we could say something like\nmemo 1 through 9 or whatever.\n\n198\n00:11:50.950 --> 00:11:51.832\nSo you could grab them that way,\n\n199\n00:11:51.832 --> 00:11:53.636\nthere's a few different ways you\ncould go about renaming these.\n\n200\n00:11:53.636 --> 00:11:59.050\nBut either way it renames the file, and\nnow you end up with it being renamed.\n\n201\n00:11:59.050 --> 00:12:03.046\nIt's actually been moved, but\nthe effect is ultimately renaming, so\n\n202\n00:12:03.046 --> 00:12:07.650\ninteresting way to move those about, you\ndo have dash R with move to go recursive.\n\n203\n00:12:07.650 --> 00:12:12.380\nBut move, since it's moving the folder,\nit typically is recursive anyways, so\n\n204\n00:12:12.380 --> 00:12:15.390\nyou don't typically need\nthat dash R in this example.\n\n205\n00:12:15.390 --> 00:12:18.910\nYou can't move a parent folder\nwithout taking the child folders, so\n\n206\n00:12:18.910 --> 00:12:23.060\nit's assumed by the commands, we don't\nhave to worry about that one too much.\n\n207\n00:12:23.060 --> 00:12:26.983\nSome of the other things\nyou can do with move,\n\n208\n00:12:26.983 --> 00:12:31.020\ncenter around things like updates and\nstuff.\n\n209\n00:12:31.020 --> 00:12:34.138\nYeah updates,\nupdates would fall more back on CP,\n\n210\n00:12:34.138 --> 00:12:39.120\nlet me show you another example of\nCP here, it's an interesting thing.\n\n211\n00:12:39.120 --> 00:12:42.884\nWith move, you're getting rid of\nthe original file, right, technically,\n\n212\n00:12:42.884 --> 00:12:45.907\nthe original file exists,\nit's just moved to a new location,\n\n213\n00:12:45.907 --> 00:12:47.575\nso this is a very permanent thing.\n\n214\n00:12:47.575 --> 00:12:49.693\nWith CP, it's usually more of a temporary,\n\n215\n00:12:49.693 --> 00:12:52.382\nlike we're copying to have\na duplicate somewhere else.\n\n216\n00:12:52.382 --> 00:12:56.463\nAnd one of the best examples of\na duplicate is a backup, well,\n\n217\n00:12:56.463 --> 00:12:58.280\nif I take a backup of a file.\n\n218\n00:12:58.280 --> 00:13:02.450\nMaybe I'm worried about somebody\ngoing in and changing memo01, right.\n\n219\n00:13:02.450 --> 00:13:07.904\nSo I come in here and I'll make\na directory in my home folder called\n\n220\n00:13:07.904 --> 00:13:13.274\nbackups, and I'm gonna copy\nmemo01 into my backups folder.\n\n221\n00:13:13.274 --> 00:13:18.000\nWell, I might want to back that up every\nnight, assuming the file changes, right,\n\n222\n00:13:18.000 --> 00:13:21.690\nif the file doesn't change,\ndo I need to back it up?\n\n223\n00:13:21.690 --> 00:13:25.620\nNo, right, so every time I copy this\nthough, it's gonna copy it over and\n\n224\n00:13:25.620 --> 00:13:26.950\nover, well, small files.\n\n225\n00:13:26.950 --> 00:13:28.440\nIt's not a big deal, we don't care, but\n\n226\n00:13:28.440 --> 00:13:32.208\nwhat if this file was a gigabyte in\nsize or 10 gigs or a terabyte in size?\n\n227\n00:13:32.208 --> 00:13:37.053\nI don't wanna copy that every night,\nI just want to get it if it changed.\n\n228\n00:13:37.053 --> 00:13:38.370\n&gt;&gt; [LAUGH] [INAUDIBLE].\n\n229\n00:13:38.370 --> 00:13:45.260\n&gt;&gt; It can really bog a system down, so,\nyou have a -u command and -u is update.\n\n230\n00:13:45.260 --> 00:13:48.980\nI only wanna copy this if I've updated it,\n\n231\n00:13:48.980 --> 00:13:52.160\nif the source file is newer\nthan the destination.\n\n232\n00:13:52.160 --> 00:13:55.330\nAnd that's really good for\nbackups because a lot of times,\n\n233\n00:13:55.330 --> 00:13:58.680\nfiles don't change, only a couple of\nfiles change, so why copy them all?\n\n234\n00:13:58.680 --> 00:14:01.870\nJust copy the ones that change,\nthat's a pretty handy thing to do, so\n\n235\n00:14:01.870 --> 00:14:05.720\nwith CP command line arguments\nare pretty common, right.\n\n236\n00:14:05.720 --> 00:14:09.660\nDash R for recursive, dash U for updates,\nthere's other ones like dash i that\n\n237\n00:14:09.660 --> 00:14:14.940\nare pretty handy, with move there's\nnot really a whole lot that we use.\n\n238\n00:14:14.940 --> 00:14:17.840\nThe prompting one is pretty handy but\nusually when you move,\n\n239\n00:14:17.840 --> 00:14:19.610\nyou're just moving the source\nto the destination.\n\n240\n00:14:19.610 --> 00:14:22.580\nThere's really only one way to go about\nthat, so that command is much more simple.\n\n241\n00:14:24.130 --> 00:14:29.380\n&gt;&gt; So what if I wanna totally get rid of\nsomething, can you totally get rid of it?\n\n242\n00:14:29.380 --> 00:14:32.800\n&gt;&gt; Yeah, so when we move,\nwhen you look at it you think,\n\n243\n00:14:32.800 --> 00:14:35.870\nthe source is gone and\nthis destination is now new.\n\n244\n00:14:35.870 --> 00:14:39.405\nBut in reality you're just moving it's\nlocation, if you delete something\n\n245\n00:14:39.405 --> 00:14:45.470\nin the graphical user interface, deleting\nis actually a move, you're moving.\n\n246\n00:14:45.470 --> 00:14:47.604\nFrom one location to the recycle bin,\n\n247\n00:14:47.604 --> 00:14:50.950\nwhere it gets held until\nsomebody empties the recycle bin.\n\n248\n00:14:50.950 --> 00:14:54.498\nBut from the command line we can remove\nit and just get rid of it completely.\n\n249\n00:14:54.498 --> 00:14:59.485\nAnd so we have the rm command for that,\nrm is a pretty neat command because this\n\n250\n00:14:59.485 --> 00:15:03.877\ngot several different options, with rm-\n&gt;&gt; Which stands for\n\n251\n00:15:03.877 --> 00:15:06.647\nremove I am guessing [LAUGH].\n\n252\n00:15:06.647 --> 00:15:09.083\n&gt;&gt; Yes, they did not put the v on this\none, I guess they were shooting for\n\n253\n00:15:09.083 --> 00:15:10.140\nthe two letters, so just rm.\n\n254\n00:15:10.140 --> 00:15:13.450\n[LAUGH] But we can remove, and\nif I wanna get rid of a memo.\n\n255\n00:15:14.790 --> 00:15:20.264\nMaybe I wanna get rid of note19,\nso I can say, rm note19 and\n\n256\n00:15:20.264 --> 00:15:26.378\nwhen I run that and now I take a look\nat my listing, number 19 is gone.\n\n257\n00:15:26.378 --> 00:15:28.959\nSo rm, pretty straightforward, well,\n\n258\n00:15:28.959 --> 00:15:33.769\nit's pretty straightforward except if\nI try to remove a folder for example.\n\n259\n00:15:33.769 --> 00:15:38.413\nLet's do rm test1, okay,\nI can't remove it, test1 is a directory,\n\n260\n00:15:38.413 --> 00:15:40.945\nall right, well that's pretty lame.\n\n261\n00:15:40.945 --> 00:15:47.115\nIf I want to remove a directory, I need\nto make make this a recursive command,\n\n262\n00:15:47.115 --> 00:15:51.005\nto make it recursive,\nyou add a dash R, just like cp, right?\n\n263\n00:15:51.005 --> 00:15:55.578\nWith cp, if I wanted to copy a folder and\neverything underneath it you do a dash R,\n\n264\n00:15:55.578 --> 00:15:58.159\nand when I run that now\nit doesn't complain.\n\n265\n00:15:58.159 --> 00:16:00.499\nAnd if I look, test1 is gone and\n\n266\n00:16:00.499 --> 00:16:05.722\nall the folders underneath it\nare gone too, test2, test3 and so on.\n\n267\n00:16:05.722 --> 00:16:10.106\nSo rm dash R will remove that\nwhole structure down beneath.\n\n268\n00:16:10.106 --> 00:16:11.800\nNow, occasionally,\n\n269\n00:16:11.800 --> 00:16:17.520\nyou'll bump into a situation where it\ndoesn't let you do that, all right?\n\n270\n00:16:17.520 --> 00:16:20.110\nYou try and remove a folder,\nand it warns you it's a folder.\n\n271\n00:16:20.110 --> 00:16:22.950\nSo you do -r, so rm -r and\nit goes to delete it.\n\n272\n00:16:22.950 --> 00:16:27.553\nAnd it may complain and say something\nlike the directory is not empty, or\n\n273\n00:16:27.553 --> 00:16:30.055\nyou don't have permissions to a file.\n\n274\n00:16:30.055 --> 00:16:31.782\nBut you've got permissions to the folder.\n\n275\n00:16:31.782 --> 00:16:34.950\nVarious things like that can\nstop the command from working.\n\n276\n00:16:34.950 --> 00:16:37.258\nSo, there is one more little\nflag that you can add.\n\n277\n00:16:37.258 --> 00:16:43.010\nAnd hopefully, you don't have to do this,\nbut it's -f, and -f is the force command.\n\n278\n00:16:43.010 --> 00:16:45.800\nForce says,\ndon't prompt me about problems,\n\n279\n00:16:45.800 --> 00:16:49.030\nif I have the permission to destroy\nthe folder, then I wanna do it.\n\n280\n00:16:49.030 --> 00:16:51.200\nAnd everything inside of it is gonna go,\nalso.\n\n281\n00:16:51.200 --> 00:16:54.376\nSo if you want to destroy\nthe files with extreme prejudice-\n\n282\n00:16:54.376 --> 00:16:55.446\n&gt;&gt; [LAUGH]\n\n283\n00:16:55.446 --> 00:16:57.360\n&gt;&gt; It's rm -f.\n\n284\n00:16:57.360 --> 00:17:02.320\nAnd you'll see people mention this\nstuff online a lot of times that\n\n285\n00:17:02.320 --> 00:17:05.240\nthis is a way that they\nremove something or whatever.\n\n286\n00:17:05.240 --> 00:17:12.710\nSo, if I wanna get rid of that memo\nfolder, I can say, rm -rf memo.\n\n287\n00:17:12.710 --> 00:17:14.130\nAnd now it's gonna get rid of it.\n\n288\n00:17:14.130 --> 00:17:15.720\nAnd if there was anything in\nthere that gave me grief.\n\n289\n00:17:15.720 --> 00:17:17.649\nAs long as permissions\nto the parent folder,\n\n290\n00:17:17.649 --> 00:17:20.170\nit's gonna destroy what's inside of there,\ntoo.\n\n291\n00:17:20.170 --> 00:17:23.820\nThat's a great way to ensure\nthat gets taken care of.\n\n292\n00:17:23.820 --> 00:17:27.020\nTypically, there's these advanced archive\nbits and things that get flagged and\n\n293\n00:17:27.020 --> 00:17:28.490\nmake files read-only.\n\n294\n00:17:28.490 --> 00:17:31.156\nAnd if I've only got read-only\npermission that's what would stop me and\n\n295\n00:17:31.156 --> 00:17:32.610\nthis will override that.\n\n296\n00:17:32.610 --> 00:17:35.890\nA regular user can only really\ndo this in their home folder.\n\n297\n00:17:35.890 --> 00:17:38.293\nBut a root user can do this\nanywhere in the file system.\n\n298\n00:17:38.293 --> 00:17:41.550\nSo you might have a process\nthat left some log files, and\n\n299\n00:17:41.550 --> 00:17:43.220\nthe log files can't be removed.\n\n300\n00:17:43.220 --> 00:17:45.290\nWell, they can be if you force it.\n\n301\n00:17:45.290 --> 00:17:47.421\nYou might have the sudo the command,\n\n302\n00:17:47.421 --> 00:17:51.970\nyou'll to bump up to elevated privileges\nto be able to do that and get in there.\n\n303\n00:17:51.970 --> 00:17:58.400\nBut at the end of the day cd, cp, sorry\nnot cd, we already talked about that one.\n\n304\n00:17:58.400 --> 00:18:02.500\nCp for copy, mv for\nmove and rm for remove.\n\n305\n00:18:02.500 --> 00:18:06.510\nThose are all really handy ways to knock\nthis stuff out from the command line and\n\n306\n00:18:06.510 --> 00:18:07.505\nmove things around.\n\n307\n00:18:07.505 --> 00:18:11.620\nNow, I will throw in one\nthing here before I wrap up.\n\n308\n00:18:11.620 --> 00:18:16.560\nThose three commands are always\npresent on every Linux system.\n\n309\n00:18:16.560 --> 00:18:19.040\nThey're considered built-ins,\nyou're going to have them.\n\n310\n00:18:19.040 --> 00:18:21.290\nI believe they're actually\npart of the GNU tool suite.\n\n311\n00:18:21.290 --> 00:18:25.876\nWe can find out if we do a which cp, mv.\n\n312\n00:18:25.876 --> 00:18:29.390\nWell, they're all in /bin, so\nthey're part of my core OS.\n\n313\n00:18:29.390 --> 00:18:32.360\nSo even if I do a minimal install,\nthey're going to be there,\n\n314\n00:18:32.360 --> 00:18:34.030\nyou can assume those commands are there.\n\n315\n00:18:34.030 --> 00:18:35.884\nBut if you're working in\nthe command line a lot.\n\n316\n00:18:35.884 --> 00:18:40.181\nAnd you're doing a ton of file\nmanagement these commands are useful.\n\n317\n00:18:40.181 --> 00:18:42.150\nThey're great for\nscripting and automation.\n\n318\n00:18:42.150 --> 00:18:44.000\nBut if you're doing things by hand a lot,\nthere are some\n\n319\n00:18:44.000 --> 00:18:47.180\nother tools that are available to\nhelp you from the command line.\n\n320\n00:18:47.180 --> 00:18:49.960\nSome that actually kind of cheat or\n\n321\n00:18:49.960 --> 00:18:52.429\npush the boundaries of\nbeing in the command line.\n\n322\n00:18:52.429 --> 00:18:55.990\nOne of my favorites is a utility\ncalled Midnight Commander.\n\n323\n00:18:55.990 --> 00:18:59.230\nMidnight Commander is available on every\nLinux distro that I've ever touched.\n\n324\n00:18:59.230 --> 00:19:01.070\nIt's not installed by default\non most of them, though.\n\n325\n00:19:01.070 --> 00:19:03.410\nYou can install it on a Red Hat system.\n\n326\n00:19:03.410 --> 00:19:04.690\nHere, let me show you.\n\n327\n00:19:04.690 --> 00:19:08.610\nOn a Red Hat system,\nyou would do a sudo yum install mc,\n\n328\n00:19:08.610 --> 00:19:11.770\nthat's the Midnight Commander.\n\n329\n00:19:11.770 --> 00:19:14.470\nI'm on a Ubuntu or Debian based system.\n\n330\n00:19:14.470 --> 00:19:20.120\nSo for me,\nI would say sudo apt install mc and\n\n331\n00:19:20.120 --> 00:19:21.960\nthat would install the Midnight Commander.\n\n332\n00:19:21.960 --> 00:19:23.130\nI've already got it on mine.\n\n333\n00:19:23.130 --> 00:19:27.317\nBut once you have that installed from\nthe command line you can just run mc and\n\n334\n00:19:27.317 --> 00:19:29.588\nit'll fire up the Midnight Commander.\n\n335\n00:19:29.588 --> 00:19:31.913\nWhich is a borderline\ngraphical user interface,\n\n336\n00:19:31.913 --> 00:19:34.830\nexcept it's completely powered\nfrom the command line.\n\n337\n00:19:34.830 --> 00:19:37.740\nSo I can be using an SSH session or\nTelnet, or\n\n338\n00:19:37.740 --> 00:19:43.030\njust drop to a terminal like I am,\nand now I have multi-pane browsing.\n\n339\n00:19:43.030 --> 00:19:46.948\nI can browse to one location on the left,\nand a different location on the right.\n\n340\n00:19:46.948 --> 00:19:50.360\nAnd down at the bottom of the screen,\nyou'll see we have keyboard shortcuts for\n\n341\n00:19:50.360 --> 00:19:53.780\ncopy, move, make directory, delete.\n\n342\n00:19:53.780 --> 00:19:58.320\nI can easily do this in a much\nmore user-friendly method.\n\n343\n00:19:58.320 --> 00:20:03.100\nIt's still command line and we can still\nrun this on a headless server with no GUI.\n\n344\n00:20:03.100 --> 00:20:08.990\nBut it gives us a, shoot,\nI forget what this is called,\n\n345\n00:20:08.990 --> 00:20:12.890\nan emacs based type GUI here that\nwe use from the command line.\n\n346\n00:20:12.890 --> 00:20:16.610\nSo if you find that you're working\nwith files from the CLI a lot,\n\n347\n00:20:16.610 --> 00:20:18.460\ncheck out Midnight Commander.\n\n348\n00:20:18.460 --> 00:20:23.310\nGet it installed,\nit's a neat program, it does its job.\n\n349\n00:20:23.310 --> 00:20:26.250\nThe shortcuts at the bottom,\nthese guys down here,\n\n350\n00:20:26.250 --> 00:20:28.590\nthese are actually mapped\nto your function keys.\n\n351\n00:20:28.590 --> 00:20:29.870\nSo like 10 is quit.\n\n352\n00:20:29.870 --> 00:20:31.670\nSo that means hit function 10.\n\n353\n00:20:31.670 --> 00:20:34.321\nOr copy is 5 or function 5.\n\n354\n00:20:34.321 --> 00:20:37.410\nSo I'm just gonna hit function 10 and\nget out of that.\n\n355\n00:20:37.410 --> 00:20:39.845\nBut if you pull up the manual file from\nMidnight Commander, it goes through.\n\n356\n00:20:39.845 --> 00:20:44.530\nAnd it lays out all the information\nyou need to know on how to use it.\n\n357\n00:20:44.530 --> 00:20:46.520\nIt's even got some basic mal support, but\n\n358\n00:20:46.520 --> 00:20:48.616\nyou're not normally gonna be\nable to take advantage of that.\n\n359\n00:20:48.616 --> 00:20:51.520\nBut definitely a handy you a utility\nthat you wanna double check and\n\n360\n00:20:51.520 --> 00:20:54.650\nuse if you work with files\nfrom the command line a lot.\n\n361\n00:20:54.650 --> 00:20:57.666\nThe other alternative is\nto use another station.\n\n362\n00:20:57.666 --> 00:20:59.150\nI might have a headless\nserver with no GUI.\n\n363\n00:20:59.150 --> 00:21:02.319\nI can go to my own laptop where\nI do have a GUI and connect and\n\n364\n00:21:02.319 --> 00:21:04.350\nmanage files that way, too.\n\n365\n00:21:04.350 --> 00:21:06.100\nIt's often times faster.\n\n366\n00:21:06.100 --> 00:21:07.800\nBut when it comes to scripting and\n\n367\n00:21:07.800 --> 00:21:12.130\nautomation, if I want something to run\nin a script, it's gonna be cp, mv, rm.\n\n368\n00:21:12.130 --> 00:21:14.820\nThe tools we took a look\nat here in this episode.\n\n369\n00:21:14.820 --> 00:21:18.070\nThose are the ones that are going\nto make the most use out of.\n\n370\n00:21:18.070 --> 00:21:19.730\n&gt;&gt; There you have it, moving files.\n\n371\n00:21:19.730 --> 00:21:22.530\nAnd that's becoming a Linux power user.\n\n372\n00:21:22.530 --> 00:21:26.580\nAnd there's a whole bunch of video\ncontent on becoming a Linux power user.\n\n373\n00:21:26.580 --> 00:21:28.490\nMake sure you catch every single episode.\n\n374\n00:21:28.490 --> 00:21:31.110\nOnce again, Don, excellent job,\nthank you so much.\n\n375\n00:21:31.110 --> 00:21:32.683\nAnd thank you for watching IT Pro TV.\n\n376\n00:21:32.683 --> 00:21:36.375\nAnd remember,\na good IT pro is always learning.\n\n377\n00:21:36.375 --> 00:21:37.810\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm Zach Memos.\n\n378\n00:21:37.810 --> 00:21:38.630\n&gt;&gt; And I'm Don Pezet.\n\n379\n00:21:38.630 --> 00:21:39.301\n&gt;&gt; And we'll see you very soon.\n\n380\n00:21:43.674 --> 00:21:47.302\n[MUSIC]\n\n381\n00:21:47.302 --> 00:21:49.718\nThank you for watching ITProTV.\n\n",
          "vimeoId": "222512120"
        }
      ],
      "title": "Moving around the Filesystem"
    },
    {
      "episodes": [
        {
          "description": "Don and Zach discuss different pronunciations of 'Vi,' what Vi is, other editing tools nano-jed-mcedit-emacs, Vi is now called 'Vim,' why choose to use Vi (Vim), and how powerful & useful Vi is when you learn the language.",
          "length": "1528",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-1-editing_files_with_vi-062017-PGM.00_29_33_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-1-editing_files_with_vi-062017-PGM.00_29_33_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-1-editing_files_with_vi-062017-PGM.00_29_33_06.Still001-sm.jpg",
          "title": "Editing Files with Vi",
          "transcript": "WEBVTT\n\n1\n00:00:00.240 --> 00:00:02.084\nWelcome to IT Pro TV I'm your host.\n\n2\n00:00:02.084 --> 00:00:08.232\n[CROSSTALK]\n\n3\n00:00:08.232 --> 00:00:12.260\n&gt;&gt; You're watching IT Pro TV.\n\n4\n00:00:12.260 --> 00:00:14.940\n&gt;&gt; Hello again and thank you for\nchoosing IT Pro TV,\n\n5\n00:00:14.940 --> 00:00:17.350\nhelping you learn wherever you go.\n\n6\n00:00:17.350 --> 00:00:21.560\nI'm your host Zach Memos as we continue\non with becoming a Linux power user.\n\n7\n00:00:21.560 --> 00:00:27.851\nInteresting, interesting course today,\nediting files with V, or VI.\n\n8\n00:00:27.851 --> 00:00:28.422\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n9\n00:00:28.422 --> 00:00:32.086\nDon is gonna help us understand this a\nlittle bit more, how do you pronounce it,\n\n10\n00:00:32.086 --> 00:00:32.808\nand what is it?\n\n11\n00:00:32.808 --> 00:00:34.730\n[LAUGH]\n&gt;&gt; So I am a bit of a stickler for\n\n12\n00:00:34.730 --> 00:00:36.810\npronunciation, and\nwe were talking about before this show.\n\n13\n00:00:36.810 --> 00:00:38.080\nYou really can't go wrong on this one,\n\n14\n00:00:38.080 --> 00:00:41.680\ncuz there's no officially agreed\nupon pronunciation for it.\n\n15\n00:00:41.680 --> 00:00:46.100\nIn this episode, we're gonna be taking\na look at the text editor that I call V,\n\n16\n00:00:46.100 --> 00:00:47.250\nas many other people do.\n\n17\n00:00:47.250 --> 00:00:50.660\nSome people call it Vy, other people\ncall it VI, but whatever you call it,\n\n18\n00:00:50.660 --> 00:00:52.650\nit's a very important text editor.\n\n19\n00:00:52.650 --> 00:00:54.373\nIf you are going to be a Linux power user,\n\n20\n00:00:54.373 --> 00:00:57.072\nthis is on that you are going to\nencounter, you do need to know.\n\n21\n00:00:57.072 --> 00:00:59.026\nAnd boy, is it not user-friendly, so\n\n22\n00:00:59.026 --> 00:01:02.937\nwe're gonna get a chance to see exactly\nhow this editor works, what it does and\n\n23\n00:01:02.937 --> 00:01:06.300\nhow we can overcome that un-user\nfriendliness that it provides.\n\n24\n00:01:06.300 --> 00:01:10.483\n&gt;&gt; And there's some other editing\nsystems as well right I mean besides VI.\n\n25\n00:01:10.483 --> 00:01:15.110\n&gt;&gt; Yeah, yeah for a regular user not\na power user we're all about power.\n\n26\n00:01:15.110 --> 00:01:18.500\nFor a regular user there are a whole\nton of editors out there that you can\n\n27\n00:01:18.500 --> 00:01:19.040\nchoose from.\n\n28\n00:01:19.040 --> 00:01:23.773\nMany of which are way easier to use\nthan V, so you might be asking yourself,\n\n29\n00:01:23.773 --> 00:01:27.622\nwhy the heck would I even use V\nif it's such a pain in the butt?\n\n30\n00:01:27.622 --> 00:01:30.170\n&gt;&gt; Don, may I ask why the heck\nwould I wanna use VI?\n\n31\n00:01:31.300 --> 00:01:35.320\n&gt;&gt; Well, the main reason is it's\nbeen around a long, long time.\n\n32\n00:01:35.320 --> 00:01:37.060\nIt's one of the original text editors,\n\n33\n00:01:37.060 --> 00:01:41.960\nit's said it's the original text editor,\nbut it has been around a long, long time.\n\n34\n00:01:41.960 --> 00:01:45.657\nAnd as a result it is in almost\nevery single Linux distribution\n\n35\n00:01:45.657 --> 00:01:46.872\nthat's out there.\n\n36\n00:01:46.872 --> 00:01:51.181\nSo it's the one editor that you can count\non, and I used to say you could always\n\n37\n00:01:51.181 --> 00:01:55.293\ncount on it, but now there are a few\ndistros that started leaving it out for\n\n38\n00:01:55.293 --> 00:01:58.773\nwhatever reason, but\nit is a very very powerful text editor.\n\n39\n00:01:58.773 --> 00:01:59.677\nIt has a ton of features,\n\n40\n00:01:59.677 --> 00:02:02.610\nmore features than most other\ntext editors that are out there.\n\n41\n00:02:02.610 --> 00:02:05.065\nAnd it can run entirely text-based,\n\n42\n00:02:05.065 --> 00:02:08.451\nit's not dependent on\na graphical user interface.\n\n43\n00:02:08.451 --> 00:02:13.742\nIf you got a GUI, then just use gedit,\ngedit is a graphical editor.\n\n44\n00:02:13.742 --> 00:02:15.870\nIt lets you edit text files,\nyou can work with it.\n\n45\n00:02:15.870 --> 00:02:19.102\nIt uses menus, you use your mouse,\nit couldn't be simpler.\n\n46\n00:02:19.102 --> 00:02:23.523\nRight, but when you are remotely\nconnecting to a server that has no GUI,\n\n47\n00:02:23.523 --> 00:02:25.856\ngedit doesn't work so well anymore.\n\n48\n00:02:25.856 --> 00:02:28.880\nIt won't run, and so\nyou are left with the command line.\n\n49\n00:02:28.880 --> 00:02:32.757\nBut even on the command line there are\nsome simpler ones, so for example here,\n\n50\n00:02:32.757 --> 00:02:34.472\nI can show you a few editing types.\n\n51\n00:02:34.472 --> 00:02:38.874\nYeah, the other utilities,\nare things like Nano is\n\n52\n00:02:38.874 --> 00:02:43.990\nincluded in Fedora, and\nUbuntu, Debian, Linux Mint.\n\n53\n00:02:43.990 --> 00:02:48.361\nIt's not included in Red Hat, yet,\nbut you can install it if you want.\n\n54\n00:02:48.361 --> 00:02:50.090\nNano works right here\nfrom the command line.\n\n55\n00:02:50.090 --> 00:02:53.134\nI've got a little file here\nwe're gonna work with,\n\n56\n00:02:53.134 --> 00:02:56.185\nThe Legend of Sleepy Hollow,\nan American classic.\n\n57\n00:02:56.185 --> 00:02:59.504\nAnd so, if I want to edit it,\nI can fire it right up and\n\n58\n00:02:59.504 --> 00:03:04.290\nhere we go I can jump right in and\nstart to edit and I can navigate around.\n\n59\n00:03:04.290 --> 00:03:06.613\nIt's giving me all my shortcuts\nright down here at the bottom.\n\n60\n00:03:06.613 --> 00:03:11.260\nSo it's easy to remember what to do,\nand I can exit out and work with it.\n\n61\n00:03:11.260 --> 00:03:14.050\nNano was one example, Jed is another one.\n\n62\n00:03:14.050 --> 00:03:18.140\nJed is not installed in most distros by\ndefault, but you can add it really easy.\n\n63\n00:03:18.140 --> 00:03:22.680\nAnd it lets you jump in there,\nit kinda harkens back to the 1980s\n\n64\n00:03:22.680 --> 00:03:26.970\neditors like what you'd see in DOS,\nin the disk-based operating system.\n\n65\n00:03:26.970 --> 00:03:32.297\nSo you've got little menus up top that\nyou can navigate through and drop down.\n\n66\n00:03:32.297 --> 00:03:35.170\nAnd so, again, you are not having\nto remember keyboard shortcuts.\n\n67\n00:03:35.170 --> 00:03:37.871\nThe keyboard shortcuts are there, but\nyou don't have to remember them,.\n\n68\n00:03:37.871 --> 00:03:42.569\nYou can use these menus if you want, and\nthis is all working without a GUI, so\n\n69\n00:03:42.569 --> 00:03:46.180\nit's not like I have to have\na window manager or anything.\n\n70\n00:03:47.280 --> 00:03:50.630\nMCEdit is another one that's\navailable that you can jump in to.\n\n71\n00:03:50.630 --> 00:03:53.596\nSame kind of idea,\nexcept the menus are down at the bottom.\n\n72\n00:03:53.596 --> 00:03:57.267\nAnd they're not really menus, they're\nactually just individual commands that we\n\n73\n00:03:57.267 --> 00:03:59.055\nfire up and you can get in and out.\n\n74\n00:03:59.055 --> 00:03:59.870\nMCEdit is the part of\n\n75\n00:03:59.870 --> 00:04:02.310\nthe Midnight Commander that I've\nshown in some other episodes.\n\n76\n00:04:02.310 --> 00:04:06.673\nSo if you've installed MC, you've also\ngot MCEdit and it's part of that package.\n\n77\n00:04:06.673 --> 00:04:09.970\nThere's some bunch of other ones\nthat are out there, like Emacs.\n\n78\n00:04:09.970 --> 00:04:14.051\nEmacs I'm not gonna get into in this\nepisode, cuz it is insanely powerful.\n\n79\n00:04:14.051 --> 00:04:17.398\nAnd if you're a typesetter,\nif you're trying to create documents for\n\n80\n00:04:17.398 --> 00:04:20.802\na publishing house, Emacs has some\nreally powerful font management and\n\n81\n00:04:20.802 --> 00:04:21.822\nmargin management.\n\n82\n00:04:21.822 --> 00:04:26.039\nAnd things go way beyond what we need\nin a text editor to be able to modify\n\n83\n00:04:26.039 --> 00:04:27.471\nconfiguration files.\n\n84\n00:04:27.471 --> 00:04:31.609\nSo while all those utilities are great,\nthey're not usually installed by default\n\n85\n00:04:31.609 --> 00:04:36.040\nand they all carry a little overhead with\nthem, extra package that we installed.\n\n86\n00:04:36.040 --> 00:04:40.005\nSo the one that we can count on is simple,\nit's basic,\n\n87\n00:04:40.005 --> 00:04:44.230\nit's included in almost every distro and\nit is VI, V-I,\n\n88\n00:04:44.230 --> 00:04:50.381\nthe text editor you can fire up, start to\nmodify files, and it's pretty powerful.\n\n89\n00:04:50.381 --> 00:04:51.654\n&gt;&gt; And so then Don what is VIM?\n\n90\n00:04:51.654 --> 00:04:52.689\nWhat is that?\n\n91\n00:04:52.689 --> 00:04:56.880\n&gt;&gt; So VIM what you might notice that if I\njust run VI, so I'm wanna drop to command\n\n92\n00:04:56.880 --> 00:05:03.340\nprompt I'm wanna just write VI I\nget VIM which is not a VI, right?\n\n93\n00:05:03.340 --> 00:05:06.850\nVIM is actually a newer version,\nso VI is very old.\n\n94\n00:05:06.850 --> 00:05:11.660\nVIM is also very old too [LAUGH] but\nnot as old and it's VI improved, so\n\n95\n00:05:11.660 --> 00:05:13.520\nthey've added more to it.\n\n96\n00:05:13.520 --> 00:05:17.760\nThe original VI, it was very functional,\nbut it didn't do things like colors and\n\n97\n00:05:17.760 --> 00:05:18.900\nall that, and VIM does.\n\n98\n00:05:18.900 --> 00:05:20.350\nIt's one of the ways you can quickly\n\n99\n00:05:20.350 --> 00:05:22.050\nnotice if you're in VIM if\nyou've got pretty colors.\n\n100\n00:05:22.050 --> 00:05:24.150\n&gt;&gt; Hence, adding the M.\n\n101\n00:05:24.150 --> 00:05:25.210\n&gt;&gt; Yeah.\n&gt;&gt; Improve.\n\n102\n00:05:25.210 --> 00:05:26.984\n&gt;&gt; And you can type that if you want.\n\n103\n00:05:26.984 --> 00:05:31.354\nI just type V-I and\nit automatically took me into them.\n\n104\n00:05:31.354 --> 00:05:34.330\nNot every distro does that,\nalthough most of them do.\n\n105\n00:05:34.330 --> 00:05:35.940\nBut you can actually type VIM and\n\n106\n00:05:35.940 --> 00:05:39.860\nit will take you into the,\nactually [LAUGH], not on this distro.\n\n107\n00:05:39.860 --> 00:05:42.146\nOn a lot of distros you can definitely,\nit will take you right into VIM and\n\n108\n00:05:42.146 --> 00:05:42.760\nyou're in there.\n\n109\n00:05:42.760 --> 00:05:45.520\nAnyway, this one is wanting me to\ninstall the VIM package [INAUDIBLE] so\n\n110\n00:05:45.520 --> 00:05:46.890\nthe alias isn't there.\n\n111\n00:05:46.890 --> 00:05:48.730\n&gt;&gt; Okay.\n&gt;&gt; But you see when I run VI,\n\n112\n00:05:48.730 --> 00:05:49.890\nI actually am in VIM.\n\n113\n00:05:49.890 --> 00:05:50.580\n&gt;&gt; It's pulling up the VIM.\n\n114\n00:05:50.580 --> 00:05:52.130\n&gt;&gt; And we're there, yeah.\n\n115\n00:05:52.130 --> 00:05:54.310\nSo we don't normally separate\nthose products in our mind,\n\n116\n00:05:54.310 --> 00:05:55.380\nyou don't have to anymore.\n\n117\n00:05:55.380 --> 00:05:58.300\nThere was a time where it\ndid make a difference.\n\n118\n00:05:58.300 --> 00:05:59.770\nAm I in VIM or am I in VI?\n\n119\n00:05:59.770 --> 00:06:02.490\nBecause if I'm in VIM,\nit can do syntax highlighting.\n\n120\n00:06:02.490 --> 00:06:05.510\nIf I'm writing html and\nI do a bad bracket, it'll highlight it and\n\n121\n00:06:05.510 --> 00:06:08.078\nI'll see it, VI wouldn't do that.\n\n122\n00:06:08.078 --> 00:06:11.320\nWell, nowadays,\nthere's usually always VIM, so\n\n123\n00:06:11.320 --> 00:06:13.560\nwe got that extra\nfunctionality that we expect.\n\n124\n00:06:13.560 --> 00:06:14.710\n&gt;&gt; Wonderful.\n\n125\n00:06:14.710 --> 00:06:17.280\n&gt;&gt; All right, well, one of the things\nthat I mentioned in the setup for\n\n126\n00:06:17.280 --> 00:06:18.080\nthis kinda sounded bad.\n\n127\n00:06:18.080 --> 00:06:20.810\nWhich is that VI is not very user friendly\n&gt;&gt; Yeah\n\n128\n00:06:20.810 --> 00:06:21.420\n&gt;&gt; At all.\n\n129\n00:06:21.420 --> 00:06:23.998\n&gt;&gt; And if they're so many other friendly\n\n130\n00:06:23.998 --> 00:06:26.190\nsystems, why VI, why VIM?\n&gt;&gt; Yeah.\n\n131\n00:06:26.190 --> 00:06:27.060\n&gt;&gt; I mean you kinda touched on\n\n132\n00:06:27.060 --> 00:06:27.910\nthat, but why?\n\n133\n00:06:27.910 --> 00:06:34.630\n&gt;&gt; Well, so it is hard but once you learn\nit you can actually do it really fast.\n\n134\n00:06:34.630 --> 00:06:38.682\nNavigating through menus is easy but it's\nslow, you gotta go and hit the menu and\n\n135\n00:06:38.682 --> 00:06:40.790\nfind things and navigate around.\n\n136\n00:06:40.790 --> 00:06:46.260\nWith VI everything is done with keyboard\nshortcuts and keyboard shortcuts are fast.\n\n137\n00:06:46.260 --> 00:06:49.310\nIf I wanna delete a character, delete\na line there's a keyboard shortcut that I\n\n138\n00:06:49.310 --> 00:06:54.000\nhit and so there's this whole interface\nthat's built around keyboard shortcuts.\n\n139\n00:06:54.000 --> 00:06:57.980\nWell the problem with a text\neditor is that you're typing text.\n\n140\n00:06:57.980 --> 00:07:02.180\nSo you're kinda using a lot of\nthe keys on your keyboard, so you\n\n141\n00:07:02.180 --> 00:07:06.450\ncan't really make shortcuts out of keys\nthat you need to have available to type.\n\n142\n00:07:06.450 --> 00:07:10.920\nAnd so VI actually has two\ndifferent interaction modes.\n\n143\n00:07:10.920 --> 00:07:13.420\nOne mode that's built around\nsending shortcuts and\n\n144\n00:07:13.420 --> 00:07:15.428\nanother mode is build around text entry.\n\n145\n00:07:15.428 --> 00:07:18.630\nAnd having to move between those\ntwo modes is what confuses people,\n\n146\n00:07:18.630 --> 00:07:20.860\npeople get kind of trapped and stop.\n\n147\n00:07:20.860 --> 00:07:24.880\nNormally, you fire up a text editor and\nyou're ready to start typing and\n\n148\n00:07:24.880 --> 00:07:26.380\ngetting to work.\n\n149\n00:07:26.380 --> 00:07:30.490\nIf you fire up VI or VIM and\nyou just start typing.\n\n150\n00:07:31.560 --> 00:07:35.505\nI typed the word, this,\nwell what actually came up,\n\n151\n00:07:35.505 --> 00:07:41.100\nwell I did an extra h, but the t the h and\nthe i, they all disappeared.\n\n152\n00:07:41.100 --> 00:07:43.940\nAnd I don't know if you guys heard IT but\nmy computer beeped at me on one of those.\n\n153\n00:07:43.940 --> 00:07:44.820\n&gt;&gt; It did, it beeped.\n\n154\n00:07:44.820 --> 00:07:50.289\n&gt;&gt; Right, and that's because it opened\nin command mode not in typing mode.\n\n155\n00:07:50.289 --> 00:07:54.248\nAnd so when I started typing,\nthe t was processed as a command and\n\n156\n00:07:54.248 --> 00:07:59.013\nit expected a response which h was not\nthe right response and then I typed an i,\n\n157\n00:07:59.013 --> 00:08:01.749\nAnd that switched me\ninto text insert mode.\n\n158\n00:08:01.749 --> 00:08:03.101\nAnd now I'm ready to insert text.\n\n159\n00:08:03.101 --> 00:08:05.171\nSo now it's expecting me to type.\n\n160\n00:08:05.171 --> 00:08:07.301\nAnd now I can type the word this, and\n\n161\n00:08:07.301 --> 00:08:10.530\nit comes up because now\nI'm in text insert mode.\n\n162\n00:08:10.530 --> 00:08:13.440\nBut if I try and issue a command,\nlike if I wanna quit,\n\n163\n00:08:13.440 --> 00:08:18.860\nwell Q is quit, that's not gonna quit\nbecause I had to type letter Q, right?\n\n164\n00:08:18.860 --> 00:08:23.050\nSo, I have to move back and forth\nbetween command mode and insert mode.\n\n165\n00:08:23.050 --> 00:08:24.940\nAnd a lot of people get stuck.\n\n166\n00:08:24.940 --> 00:08:26.540\nAnd look at all that help on my screen.\n\n167\n00:08:27.850 --> 00:08:31.658\nNone, the other text that is all\nhave is press F10 for this menu, or\n\n168\n00:08:31.658 --> 00:08:32.982\npress Ctrl+X to exit.\n\n169\n00:08:32.982 --> 00:08:34.784\nThey have these on screen hints.\n\n170\n00:08:34.784 --> 00:08:36.850\nVi, you get nothing.\n\n171\n00:08:36.850 --> 00:08:38.970\nYou're in here and that's it.\n\n172\n00:08:38.970 --> 00:08:40.030\nYou get nothing.\n\n173\n00:08:40.030 --> 00:08:44.640\nWell, what you actually get is a good\nbit of help if you know how to get\n\n174\n00:08:44.640 --> 00:08:47.610\nto the help and that's the real challenge\nthat a lot of people bump into.\n\n175\n00:08:47.610 --> 00:08:51.000\nThere's actually a package you can\ninstall called the Vim tutor, and\n\n176\n00:08:51.000 --> 00:08:54.110\nif you install that, it's got a whole\ntutorial you can run through or\n\n177\n00:08:54.110 --> 00:08:56.920\nteaches you how to use it,\nyou look for the package.\n\n178\n00:08:56.920 --> 00:08:59.600\nBut it's really not that hard\nof a thing to navigate it and\n\n179\n00:08:59.600 --> 00:09:01.825\nwork with if you know how to use it.\n\n180\n00:09:01.825 --> 00:09:04.395\n&gt;&gt; So Don would you show us the way?\n\n181\n00:09:04.395 --> 00:09:05.535\n&gt;&gt; Yes, absolutely.\n\n182\n00:09:05.535 --> 00:09:08.035\nSo the first thing you\nneed to understand in vi\n\n183\n00:09:08.035 --> 00:09:11.715\nis how to move between command mode and\ntext entry mode, right?\n\n184\n00:09:11.715 --> 00:09:16.325\nSo when you launch it let me\njust oops get out of this,\n\n185\n00:09:16.325 --> 00:09:18.805\nthere we go, and if I just launch it.\n\n186\n00:09:20.150 --> 00:09:21.760\nIt shows the little about screen,\n\n187\n00:09:21.760 --> 00:09:26.380\nkind of the information of hey,\nhere is the program that you're running.\n\n188\n00:09:26.380 --> 00:09:30.284\nAnd it's really a blank file, this is\nkind of just like a splash screen, right?\n\n189\n00:09:30.284 --> 00:09:33.071\nAnd I'm in command mode.\n\n190\n00:09:33.071 --> 00:09:34.880\nNow how do I know I'm in command mode?\n\n191\n00:09:34.880 --> 00:09:39.010\nWell, I just know that vi\nlaunches in command mode.\n\n192\n00:09:39.010 --> 00:09:42.260\nIf I start typing,\nit's expecting commands.\n\n193\n00:09:42.260 --> 00:09:46.520\nAnd so it tells me right here that I can\nissue a couple of commands like help.\n\n194\n00:09:46.520 --> 00:09:49.740\nIf I wanna issue the help command,\nI can do :help.\n\n195\n00:09:49.740 --> 00:09:52.310\nCommands are typically\npreceded by a colon.\n\n196\n00:09:52.310 --> 00:09:57.430\nIf I type a colon, and my cursor moves\ndown here to the bottom like that,\n\n197\n00:09:57.430 --> 00:09:59.780\nI know I'm about to enter a command.\n\n198\n00:09:59.780 --> 00:10:03.577\nIf I type a colon and it just appears up\nhere, I know I'm in text-entry mode and\n\n199\n00:10:03.577 --> 00:10:05.087\nI'm inserting text, right.\n\n200\n00:10:05.087 --> 00:10:09.420\nSo if I were actually in\ntext-insertion mode and typed a colon,\n\n201\n00:10:09.420 --> 00:10:12.510\nit just appears right there, right?\n\n202\n00:10:12.510 --> 00:10:16.680\nIf I get into command mode, if I type\na colon, it jumps me down to the bottom.\n\n203\n00:10:16.680 --> 00:10:19.350\nAll right now,\nhow did I switch between them?\n\n204\n00:10:19.350 --> 00:10:21.290\nI used the Escape key.\n\n205\n00:10:21.290 --> 00:10:25.230\nIf you hit the Escape key,\nit takes you to command mode.\n\n206\n00:10:25.230 --> 00:10:28.310\nI can press the I key, letter I is insert.\n\n207\n00:10:28.310 --> 00:10:33.280\nWhen I press I, I'm in text insert mode,\nand now I can type, right.\n\n208\n00:10:33.280 --> 00:10:34.700\nSo I'm typing my text.\n\n209\n00:10:34.700 --> 00:10:36.260\nI'm spelling badly, but I-\n&gt;&gt; [LAUGH]\n\n210\n00:10:36.260 --> 00:10:37.700\n&gt;&gt; Can certainly type.\n\n211\n00:10:37.700 --> 00:10:40.150\nBut now I can't type well, but I can type.\n\n212\n00:10:40.150 --> 00:10:43.810\nAnd if I hit Escape, notice how\nnothing really changes on my screen.\n\n213\n00:10:44.980 --> 00:10:47.885\nBut if I type that colon\nit jumps to the bottom and\n\n214\n00:10:47.885 --> 00:10:50.293\nnow I can type in a command, all right.\n\n215\n00:10:50.293 --> 00:10:54.007\nSo that's me moving between\ntext insert mode and\n\n216\n00:10:54.007 --> 00:10:55.130\ncommand mode\n&gt;&gt; So\n\n217\n00:10:55.130 --> 00:10:57.550\nremember Escape colon\n&gt;&gt; Yeah, Yep.\n\n218\n00:10:57.550 --> 00:11:00.250\nAnd there are some commands\nwe can run without the colon,\n\n219\n00:11:00.250 --> 00:11:03.130\nwhich sounds kind of funny,\nbut you can do that.\n\n220\n00:11:03.130 --> 00:11:07.540\nBut most of them are going to have\na colon because the colon is important\n\n221\n00:11:07.540 --> 00:11:08.710\n&gt;&gt; It's an important thing.\n\n222\n00:11:08.710 --> 00:11:10.110\n&gt;&gt; To output.\n\n223\n00:11:10.110 --> 00:11:13.410\nSo if I want to do something basic, right?\n\n224\n00:11:13.410 --> 00:11:16.820\nThe basic steps I need to know\nare getting in and getting out.\n\n225\n00:11:16.820 --> 00:11:21.260\nWell, getting out of a file,\nwe're going to use Q to quit, all right?\n\n226\n00:11:21.260 --> 00:11:24.592\nNow normally I can just type Q and\nquit and it takes me out.\n\n227\n00:11:24.592 --> 00:11:26.500\nBut notice I got a warning here.\n\n228\n00:11:26.500 --> 00:11:31.330\nIt's telling me no write since last change\nadd an exclamation point to override.\n\n229\n00:11:31.330 --> 00:11:35.470\nIt's telling me that I haven't\nsaved since I changed the file.\n\n230\n00:11:35.470 --> 00:11:39.221\nI changed it but\nI haven't written it to disk yet.\n\n231\n00:11:39.221 --> 00:11:42.080\nSo if I were to exit right now\nI'm gonna lose everything I did.\n\n232\n00:11:42.080 --> 00:11:45.360\nWell, I haven't really done anything\nprofound here so I'm okay with that.\n\n233\n00:11:45.360 --> 00:11:50.220\nAnd it's telling me that if I wanna\noverride I can with an exclamation point.\n\n234\n00:11:50.220 --> 00:11:53.987\nIf I do a colon and\nQ followed by an exclamation point,\n\n235\n00:11:53.987 --> 00:11:56.351\nthat means quit without saving.\n\n236\n00:11:56.351 --> 00:11:56.882\n&gt;&gt; Mm-hm.\n\n237\n00:11:56.882 --> 00:12:01.077\n&gt;&gt; Okay, so Q is quit, and\nif I'd already saved it wouldn't care.\n\n238\n00:12:01.077 --> 00:12:04.740\nAnd q with an exclamation point is quit\nwithout saving, and I'll lose my changes.\n\n239\n00:12:04.740 --> 00:12:07.420\nSometimes we open a document\njust to look at it, and\n\n240\n00:12:07.420 --> 00:12:10.610\nyou might accidentally make a change,\nand you don't wanna keep that.\n\n241\n00:12:10.610 --> 00:12:13.390\nSo you quit without saving the changes,\nq exclamation point.\n\n242\n00:12:13.390 --> 00:12:13.944\n&gt;&gt; Got it.\n\n243\n00:12:13.944 --> 00:12:16.680\n&gt;&gt; Right, now, what if I wanted to save?\n\n244\n00:12:16.680 --> 00:12:19.750\nIf I type something here, let me,\nI'll do the q with an exclamation point.\n\n245\n00:12:19.750 --> 00:12:21.310\nSo I just threw away my changes.\n\n246\n00:12:22.330 --> 00:12:24.490\nAnd this time I'm gonna run VI again.\n\n247\n00:12:25.500 --> 00:12:29.430\nAnd I'll go into insert mode, and\nI'll just type, this is some text.\n\n248\n00:12:29.430 --> 00:12:33.360\nRight, so I hit I on my keyboard\nto go to insert mode, and I typed.\n\n249\n00:12:33.360 --> 00:12:38.720\nAnd now, I'm going to hit Escape,\ndo a colon, and\n\n250\n00:12:38.720 --> 00:12:41.350\nI'm gonna save my document, all right?\n\n251\n00:12:41.350 --> 00:12:42.310\nSo save by doing W.\n\n252\n00:12:42.310 --> 00:12:44.110\nW short for write.\n\n253\n00:12:44.110 --> 00:12:45.630\nQ for quit, W for write.\n\n254\n00:12:45.630 --> 00:12:47.650\nI'm gonna write this to disk.\n\n255\n00:12:47.650 --> 00:12:51.350\nAnd so when I write it,\nit's gonna tell me, no filename, right.\n\n256\n00:12:51.350 --> 00:12:52.570\n&gt;&gt; Mm-hm.\n&gt;&gt; I didn't provide a filename.\n\n257\n00:12:52.570 --> 00:12:54.590\nAnd there's two ways\nto provide a filename.\n\n258\n00:12:54.590 --> 00:12:55.650\nYou can do it right here.\n\n259\n00:12:55.650 --> 00:12:59.080\nYou can say w followed by a filename,\nright.\n\n260\n00:12:59.080 --> 00:13:01.580\nBut what I normally do,\nis when I'm creating a new file,\n\n261\n00:13:01.580 --> 00:13:04.210\nI provide it from the command line\nbefore you even come in, right.\n\n262\n00:13:04.210 --> 00:13:08.140\nSo I called this file.txt,\nright, and save it.\n\n263\n00:13:08.140 --> 00:13:08.650\nSo, there it goes.\n\n264\n00:13:08.650 --> 00:13:14.430\nI just wrote file.txt, and then I can quit\nout, and this time quit didn't complain.\n\n265\n00:13:14.430 --> 00:13:17.190\nIt didn't complain because\nit knew I had saved it, and\n\n266\n00:13:17.190 --> 00:13:20.132\nsure enough there's file.txt,\nnice and saved, okay.\n\n267\n00:13:20.132 --> 00:13:20.973\n&gt;&gt; Wonderful.\n\n268\n00:13:20.973 --> 00:13:24.812\n&gt;&gt; But from the command line if\nI'd launched it differently,\n\n269\n00:13:24.812 --> 00:13:31.020\nif I had said vi file1.txt, right,\nI'm providing a filename at launch time.\n\n270\n00:13:31.020 --> 00:13:35.850\nNow I don't get the splash screen,\nit tells me I've created a new file.\n\n271\n00:13:35.850 --> 00:13:40.385\nAnd I can go into insert mode and\ntype, right.\n\n272\n00:13:40.385 --> 00:13:43.685\nI can hit Escape to get into command mode.\n\n273\n00:13:43.685 --> 00:13:45.370\nI can hit my colon.\n\n274\n00:13:45.370 --> 00:13:47.844\nAnd I can do a W to save.\n\n275\n00:13:47.844 --> 00:13:50.580\nAnd when I save,\nit doesn't have to prompt me for the name.\n\n276\n00:13:50.580 --> 00:13:51.450\nIt already knows it.\n\n277\n00:13:51.450 --> 00:13:52.620\nSo I almost always do that.\n\n278\n00:13:52.620 --> 00:13:54.560\nI almost always give the filename\nfrom the command line.\n\n279\n00:13:54.560 --> 00:13:58.946\nBut you can do it if you do :w and\nthen a space, you provide that filename.\n\n280\n00:13:58.946 --> 00:14:02.570\nMost of the commands are a single letter,\nso colon followed by a letter.\n\n281\n00:14:02.570 --> 00:14:04.630\nBut many of them take arguments.\n\n282\n00:14:04.630 --> 00:14:07.350\nSo you do :w, and a space, and\n\n283\n00:14:07.350 --> 00:14:09.490\nthen the final name or\nwhatever else you're providing.\n\n284\n00:14:09.490 --> 00:14:12.895\nSo many of them will have longer\nversions of the command, and\n\n285\n00:14:12.895 --> 00:14:16.300\n:help, helps you to see\na lot of that stuff.\n\n286\n00:14:16.300 --> 00:14:20.900\nWhen you do :help,\nnow we get the vim help information and\n\n287\n00:14:20.900 --> 00:14:24.550\nwe can jump in here and\ntake a look at what's going on, okay.\n\n288\n00:14:24.550 --> 00:14:29.810\nNow notice on mine its warning me that\nI've got the vim tiny package installed.\n\n289\n00:14:29.810 --> 00:14:32.626\nIn other words,\nI don't have the full version of vim, so\n\n290\n00:14:32.626 --> 00:14:34.222\nI've got a subset of commands.\n\n291\n00:14:34.222 --> 00:14:36.238\n&gt;&gt; We've got to get to\nthe full version of Vim.\n\n292\n00:14:36.238 --> 00:14:40.436\n&gt;&gt; And that's why at the beginning\nat the episode when I ran vi and\n\n293\n00:14:40.436 --> 00:14:42.143\nI got into here, right.\n\n294\n00:14:42.143 --> 00:14:45.110\nBut when I ran Vim it told me\nthe package wasn't installed.\n\n295\n00:14:45.110 --> 00:14:47.630\nSo I don't have the full version of Vim.\n\n296\n00:14:47.630 --> 00:14:51.640\nEvery command I show you in this\nepisode works in vi or vim.\n\n297\n00:14:51.640 --> 00:14:52.330\nSo it doesn't matter, but\n\n298\n00:14:52.330 --> 00:14:54.660\nif you really want that full\nfunctionality you may need to install it.\n\n299\n00:14:54.660 --> 00:14:56.380\nSo I can install that really quick.\n\n300\n00:14:56.380 --> 00:15:02.320\nOn Red Hat or\nFedora you would say sudo yum install vim.\n\n301\n00:15:02.320 --> 00:15:06.220\nOn DB and\nUbuntu you would say sudo app install vim.\n\n302\n00:15:06.220 --> 00:15:09.520\nAnd it will find those packages and\nget them installed.\n\n303\n00:15:09.520 --> 00:15:11.140\nSo that one's gonna churn along and do it.\n\n304\n00:15:11.140 --> 00:15:14.983\nNow while I'm waiting on that, what if I\nwanna do more than one command at a time?\n\n305\n00:15:14.983 --> 00:15:15.880\n&gt;&gt; Yeah I was gonna ask you.\n\n306\n00:15:15.880 --> 00:15:17.720\nCan you switch to another file?\n\n307\n00:15:17.720 --> 00:15:21.510\n&gt;&gt; Yeah you can switch to other files, you\ncan do all sorts of things simultaneously.\n\n308\n00:15:21.510 --> 00:15:24.310\nIt's a little bit more\ndifficult than we might think.\n\n309\n00:15:24.310 --> 00:15:28.450\nNormally if I'm editing one file,\nit's easier to just quit vim and\n\n310\n00:15:28.450 --> 00:15:31.930\nthen come right back in and\nchoose a file like that.\n\n311\n00:15:31.930 --> 00:15:35.209\nBut you can do a lot from right\ninside the editor itself.\n\n312\n00:15:36.230 --> 00:15:39.760\nOops, looks like I got a package conflict.\n\n313\n00:15:39.760 --> 00:15:43.470\nAll right, well, we'll ignore that for\nright now since I do not need it.\n\n314\n00:15:43.470 --> 00:15:46.621\nSo let's say I am editing file.txt, right.\n\n315\n00:15:46.621 --> 00:15:49.366\nAnd I am in here and\nI make some changes, right.\n\n316\n00:15:49.366 --> 00:15:53.808\nSo here's some changes, very exciting.\n\n317\n00:15:53.808 --> 00:15:54.689\n&gt;&gt; It is.\n\n318\n00:15:54.689 --> 00:15:58.675\n&gt;&gt; And I want to save and quit.\n\n319\n00:15:58.675 --> 00:15:59.898\nI wanna do both, okay?\n\n320\n00:15:59.898 --> 00:16:01.434\nWell, I can do that.\n\n321\n00:16:01.434 --> 00:16:05.990\nI can hit Escape to give me a command\nmode, type a colon, and then say wq.\n\n322\n00:16:05.990 --> 00:16:09.890\nTwo commands at once, right?\n\n323\n00:16:09.890 --> 00:16:12.570\nW to write to disk, q to quit.\n\n324\n00:16:12.570 --> 00:16:13.570\nAnd the order matters.\n\n325\n00:16:13.570 --> 00:16:16.260\nIf I do qw, it's gonna try to quit first,\nand then write.\n\n326\n00:16:16.260 --> 00:16:17.520\nIt doesn't like that, right?\n\n327\n00:16:17.520 --> 00:16:19.730\nSo I wanna write first and then quit.\n\n328\n00:16:19.730 --> 00:16:21.710\nAnd it's going to to do that all at once.\n\n329\n00:16:21.710 --> 00:16:24.850\nAnd so I didn't get any complaints\nabout the file changing\n\n330\n00:16:24.850 --> 00:16:27.480\nbecause it actually wrote and then quit.\n\n331\n00:16:27.480 --> 00:16:30.380\nAnd then going back to Zach's question\nof could I open a different file\n\n332\n00:16:30.380 --> 00:16:31.350\nor something?\n\n333\n00:16:31.350 --> 00:16:32.800\nSo I'm in file.txt.\n\n334\n00:16:32.800 --> 00:16:36.590\nIf I want to switch to file1.txt,\nI could just quit.\n\n335\n00:16:36.590 --> 00:16:38.570\nAnd then, run the vi command\nto jump into the other one.\n\n336\n00:16:38.570 --> 00:16:42.421\nBut you can open other files by doing :e,\n\n337\n00:16:42.421 --> 00:16:46.780\n:e to exchange this file for another one.\n\n338\n00:16:46.780 --> 00:16:49.940\nAnd if I just run :e,\nit doesn't really do anything, right?\n\n339\n00:16:49.940 --> 00:16:51.400\nBecause it just goes back to this one.\n\n340\n00:16:51.400 --> 00:16:53.945\nSo I would need to say :e file1.\n\n341\n00:16:53.945 --> 00:16:56.020\n.txt, or whatever my other file is.\n\n342\n00:16:56.020 --> 00:16:57.960\nAnd see here I jumped over to file1.txt.\n\n343\n00:16:57.960 --> 00:17:01.650\nSo I can quickly move over\nwithout having to get out.\n\n344\n00:17:01.650 --> 00:17:04.640\nSo that's what really makes vi such\na powerful editor is there's so\n\n345\n00:17:04.640 --> 00:17:07.530\nmany shortcuts if we can learn them,\nright?\n\n346\n00:17:07.530 --> 00:17:09.530\nIt's just a ton to grasp,\nbut you can be so\n\n347\n00:17:09.530 --> 00:17:12.580\nmuch faster when you're doing easy\nkeyboard shortcuts to get things done.\n\n348\n00:17:12.580 --> 00:17:15.230\n&gt;&gt; And I know because we like\nto turn over every rock,\n\n349\n00:17:15.230 --> 00:17:17.330\nwe're gonna put some show notes.\n\n350\n00:17:17.330 --> 00:17:20.060\nSo we'll have a cheat sheet available for\npeople to refer to.\n\n351\n00:17:20.060 --> 00:17:22.350\n&gt;&gt; Yeah, don't feel pressure while\nyou're watching this episode,\n\n352\n00:17:22.350 --> 00:17:23.350\ndon't sort of just like scratch.\n\n353\n00:17:23.350 --> 00:17:24.710\nWell, I mean,\nyou can make notes if you want.\n\n354\n00:17:24.710 --> 00:17:28.550\nBut we'll post the notes alongside\nthe show so you can get these.\n\n355\n00:17:28.550 --> 00:17:31.050\nI'll show each of the commands\nthat we run here in this episode.\n\n356\n00:17:31.050 --> 00:17:33.100\nThat way you've got them and\nyou can use them as a reference.\n\n357\n00:17:33.100 --> 00:17:37.730\nBut there's a lot of great websites out\nthere that have vi tutorials and cheat\n\n358\n00:17:37.730 --> 00:17:40.570\nsheets that you can download and stick\non the side of your monitor or whatever.\n\n359\n00:17:40.570 --> 00:17:44.955\nFor the first probably month\nthat you use vi, it's tough.\n\n360\n00:17:44.955 --> 00:17:45.761\nIt is really hard.\n\n361\n00:17:45.761 --> 00:17:47.330\n&gt;&gt; Mm-hm.\n&gt;&gt; But once you've used it for a while,\n\n362\n00:17:47.330 --> 00:17:48.055\nyou get used to it.\n\n363\n00:17:48.055 --> 00:17:52.320\nYou kind of get that muscle memory or\nrote memory of the commands.\n\n364\n00:17:52.320 --> 00:17:55.980\nAnd then you'll find that you've\njust learned a text editor\n\n365\n00:17:55.980 --> 00:17:58.450\nthat's available regardless\nthe type of system you connect to.\n\n366\n00:17:58.450 --> 00:18:02.240\nSo I can sit down on a Fedora machine or\nRed Hat Enterprise Linux or Ubuntu or\n\n367\n00:18:02.240 --> 00:18:03.270\nLinux Mint.\n\n368\n00:18:03.270 --> 00:18:05.540\nIt may be some I've never even heard of,\nZach Linux.\n\n369\n00:18:05.540 --> 00:18:06.210\n&gt;&gt; That's a good one.\n\n370\n00:18:06.210 --> 00:18:07.540\n&gt;&gt; And it's the first time I logged in.\n\n371\n00:18:07.540 --> 00:18:11.590\nBut I'll know there's a text editor that\nI can use and modify those files and\n\n372\n00:18:11.590 --> 00:18:12.350\nbe able to work with.\n\n373\n00:18:12.350 --> 00:18:14.230\nSo that's really where all\nthat power comes from.\n\n374\n00:18:14.230 --> 00:18:16.790\nAll right, well let's-\n&gt;&gt; Let's look at some commands.\n\n375\n00:18:16.790 --> 00:18:17.710\n&gt;&gt; Let's take a look at some other ones.\n\n376\n00:18:17.710 --> 00:18:21.320\nI've got a ton to get through, so\nwe'll continue this on in another part.\n\n377\n00:18:21.320 --> 00:18:27.130\nBut I showed you guys i, which was insert,\nto get into that text entry mode.\n\n378\n00:18:27.130 --> 00:18:31.930\nThere's actually a little more to it,\nso let me open up a bigger file here.\n\n379\n00:18:31.930 --> 00:18:36.972\nAnd I'm gonna open up\nthe Legend of Sleepy Hollow.\n\n380\n00:18:36.972 --> 00:18:39.410\nThis nice big book here.\n\n381\n00:18:39.410 --> 00:18:43.300\nAnd when I go in and press the letter i,\nI'm switching to insert mode.\n\n382\n00:18:43.300 --> 00:18:47.510\nAnd what I'm actually doing is\ntelling it I want to insert text\n\n383\n00:18:47.510 --> 00:18:51.862\nbefore whatever the cursor\nhappens to be right now, okay?\n\n384\n00:18:51.862 --> 00:18:55.820\nSo, if I wanna add on right here at\nthe beginning of the sentence and I hit i,\n\n385\n00:18:55.820 --> 00:18:58.750\nI'm in insert mode, see at the bottom\nthere it tells me I'm in insert mode.\n\n386\n00:18:58.750 --> 00:19:00.460\nAnd now I can start typing.\n\n387\n00:19:00.460 --> 00:19:07.189\nAnd where I'm typing is right\nbefore where the cursor was, okay?\n\n388\n00:19:07.189 --> 00:19:11.938\nThere is an alternative here\nwhich is a instead of i.\n\n389\n00:19:11.938 --> 00:19:16.190\ni is insert before,\na is append, append afterwards.\n\n390\n00:19:16.190 --> 00:19:19.860\nSo if I hit a,\nsee how it goes into insert also?\n\n391\n00:19:19.860 --> 00:19:22.540\nBut see how my cursor jumped\nforward a little bit?\n\n392\n00:19:22.540 --> 00:19:27.430\nSo, now I can jump in and\ntype, or do whatever I want.\n\n393\n00:19:27.430 --> 00:19:29.180\nIt's all about cursor placement.\n\n394\n00:19:29.180 --> 00:19:31.990\nNow, I'll be honest with you guys,\nI never use a.\n\n395\n00:19:31.990 --> 00:19:33.550\nI always use i.\n\n396\n00:19:33.550 --> 00:19:37.000\nBecause if I want that behavior\nto insert after the cursor,\n\n397\n00:19:37.000 --> 00:19:38.461\nI just move the cursor, right?\n\n398\n00:19:38.461 --> 00:19:39.854\n[LAUGH] It's not that hard.\n\n399\n00:19:39.854 --> 00:19:42.370\nSo you don't have to remember\nevery shortcut there is.\n\n400\n00:19:42.370 --> 00:19:46.260\nBut do know that oftentimes there is more\nthan one way to do something because of\n\n401\n00:19:46.260 --> 00:19:48.370\nsimple things like cursor placement.\n\n402\n00:19:48.370 --> 00:19:51.055\nWhich does come in handy when\nyou're writing scripts and\n\n403\n00:19:51.055 --> 00:19:52.500\nyou're trying to add things to the end.\n\n404\n00:19:52.500 --> 00:19:54.590\nIf you want to add parenthesis\nto the end of a word,\n\n405\n00:19:54.590 --> 00:19:57.180\nthat kind of stuff can\nkind of come in handy.\n\n406\n00:19:57.180 --> 00:20:02.450\nThere is other things like I am\ndoing a lowercase i on my keyboard.\n\n407\n00:20:02.450 --> 00:20:04.180\nIf I move my cursor somewhere and\n\n408\n00:20:04.180 --> 00:20:08.510\nI hit an i, I'm now inserting right\nthere in the middle of that word.\n\n409\n00:20:08.510 --> 00:20:12.690\nIf you do a capital I,\ndo you see what happened to my cursor?\n\n410\n00:20:12.690 --> 00:20:14.220\nIt jumped to the beginning.\n\n411\n00:20:14.220 --> 00:20:17.215\nI'm inserting at\nthe beginning of the line.\n\n412\n00:20:17.215 --> 00:20:20.300\nSo, really handy to be able\nto quickly jump like that.\n\n413\n00:20:20.300 --> 00:20:21.519\nThe converse is a.\n\n414\n00:20:21.519 --> 00:20:26.190\nIf you do a capital A,\nit's inserting at the end of the line.\n\n415\n00:20:26.190 --> 00:20:29.370\nSo, whether it's lowercase or\ncapital makes a big difference, right?\n\n416\n00:20:29.370 --> 00:20:31.130\nYou're jumping before and\nafter the line, or\n\n417\n00:20:31.130 --> 00:20:34.810\ngoing right on the character that your\ncursor is currently highlighting.\n\n418\n00:20:34.810 --> 00:20:37.810\nThose are quick ways to jump\ninto that text insert mode.\n\n419\n00:20:37.810 --> 00:20:41.350\nAnd then you start typing and\nwriting along.\n\n420\n00:20:41.350 --> 00:20:42.430\nCouple of other things.\n\n421\n00:20:42.430 --> 00:20:46.080\nIf I want to delete text, well, you can\nuse the delete key on your keyboard.\n\n422\n00:20:46.080 --> 00:20:48.340\nThat's works, right?\n\n423\n00:20:48.340 --> 00:20:51.870\nBut when you're in insert mode,\nthe delete key and\n\n424\n00:20:51.870 --> 00:20:54.180\nthe backspace key really are what you use,\nright?\n\n425\n00:20:54.180 --> 00:20:56.070\nSo you delete and you backspace.\n\n426\n00:20:56.070 --> 00:21:00.060\nBut those are all built around\none character at a time.\n\n427\n00:21:00.060 --> 00:21:02.260\nWhat if I wanna delete an entire word?\n\n428\n00:21:02.260 --> 00:21:06.380\nLike this word adjacent, I see adjacent,\nI wanna get rid of that whole word.\n\n429\n00:21:06.380 --> 00:21:10.600\nI can go in insert mode, and I could hit\nBackspace seven times, eight times, sorry,\n\n430\n00:21:10.600 --> 00:21:11.570\nif I can count.\n\n431\n00:21:11.570 --> 00:21:13.580\nOr I can hit Delete eight times.\n\n432\n00:21:13.580 --> 00:21:18.370\nOr I can just put my cursor on it,\nand with your cursor on a word,\n\n433\n00:21:18.370 --> 00:21:22.130\nyou can just type dw, all right?\n\n434\n00:21:22.130 --> 00:21:25.210\nAnd when I do dw,\ndo you see what happened?\n\n435\n00:21:25.210 --> 00:21:29.240\nIt deleted the rest of\nthe word after my cursor.\n\n436\n00:21:29.240 --> 00:21:33.210\nIt didn't get adj because I was on the c.\n\n437\n00:21:33.210 --> 00:21:37.170\nBut it got rid of c, e, n,\nt and the following space.\n\n438\n00:21:37.170 --> 00:21:41.120\nI really should've gotten to the beginning\nof that word and said dw, and\n\n439\n00:21:41.120 --> 00:21:45.990\nsee how it deleted everything after that\ncursor up until that end of that word.\n\n440\n00:21:45.990 --> 00:21:49.990\nSo if I wanna delete Greensburg, so\nwe'll go to the beginning of that word and\n\n441\n00:21:49.990 --> 00:21:50.650\ntype dw.\n\n442\n00:21:50.650 --> 00:21:53.210\nWe get rid of it, okay?\n\n443\n00:21:53.210 --> 00:21:57.980\nNow, this is a different kind of command\nbecause I didn't type a colon first,\n\n444\n00:21:57.980 --> 00:21:59.140\ndid I?\n\n445\n00:21:59.140 --> 00:22:00.100\nSo that's different.\n\n446\n00:22:00.100 --> 00:22:02.689\nMost of the time [CROSSTALK] most\nof the time we type a colon.\n\n447\n00:22:02.689 --> 00:22:04.700\nHere, it's just done right here.\n\n448\n00:22:04.700 --> 00:22:08.811\nWhen it's text modification, you usually\ndon't have to do a colon, right?\n\n449\n00:22:08.811 --> 00:22:09.470\nYou can.\n\n450\n00:22:09.470 --> 00:22:13.410\nI actually could have done the colon and\na dw and it would have worked.\n\n451\n00:22:13.410 --> 00:22:16.449\nBut here, it's knowing that I'm\nwanting to manipulate the words.\n\n452\n00:22:16.449 --> 00:22:20.260\nActually, dw wouldn't have worked cuz it\nwould have interpreted the w as a write\n\n453\n00:22:20.260 --> 00:22:20.772\ncommand.\n\n454\n00:22:20.772 --> 00:22:23.060\nSo, it would've not have\nbeen happy with that.\n\n455\n00:22:23.060 --> 00:22:26.678\nSo there are alternative commands that\ncan be issued when it comes to text\n\n456\n00:22:26.678 --> 00:22:28.390\nmodification.\n\n457\n00:22:28.390 --> 00:22:31.330\nOne that I use a lot is\ndeleting a whole line.\n\n458\n00:22:31.330 --> 00:22:36.260\nIf I want to delete an entire line,\nlike just this entire first sentence.\n\n459\n00:22:36.260 --> 00:22:37.920\nSo I wanna get rid of that one.\n\n460\n00:22:37.920 --> 00:22:41.520\nYou can just type in your keyboard dd,\nright?\n\n461\n00:22:41.520 --> 00:22:42.940\nd is short for delete.\n\n462\n00:22:42.940 --> 00:22:44.370\nAnd then I tell it what I want to delete.\n\n463\n00:22:44.370 --> 00:22:47.655\nSo earlier I did dw, this time I did dd.\n\n464\n00:22:47.655 --> 00:22:50.306\ndw is the word, dd was the entire line.\n\n465\n00:22:50.306 --> 00:22:54.570\nIf I wanna do that from command mode,\nI can type a colon and\n\n466\n00:22:54.570 --> 00:22:56.120\nit's just d by itself.\n\n467\n00:22:56.120 --> 00:22:59.150\nIf you just do d,\nsee how it gets rid of the whole line?\n\n468\n00:22:59.150 --> 00:23:02.570\nSo, there's two different commands for\nthe same thing.\n\n469\n00:23:02.570 --> 00:23:03.970\nOne's in command mode, one's not.\n\n470\n00:23:03.970 --> 00:23:05.599\nOne was dd, the other was :d.\n\n471\n00:23:05.599 --> 00:23:07.380\nSame amount of keystrokes.\n\n472\n00:23:07.380 --> 00:23:08.080\nSo which one is right?\n\n473\n00:23:09.170 --> 00:23:10.780\nWhichever one you like better.\n\n474\n00:23:10.780 --> 00:23:13.450\nWhichever one makes you feel warm and\nfuzzy.\n\n475\n00:23:13.450 --> 00:23:14.370\n&gt;&gt; Yeah, options are wonderful.\n\n476\n00:23:14.370 --> 00:23:16.550\n&gt;&gt; And so I usually use :d.\n\n477\n00:23:16.550 --> 00:23:19.220\nJust because I'm used to going into\nthe command mode to do that stuff.\n\n478\n00:23:19.220 --> 00:23:21.760\nBut if you can do it right\nfrom the regular text entry,\n\n479\n00:23:21.760 --> 00:23:22.920\nthen that works out, too.\n\n480\n00:23:22.920 --> 00:23:25.400\nBut it doesn't work if you're\nactually in insert mode.\n\n481\n00:23:25.400 --> 00:23:29.022\nBecause then when you type dd,\nwell, you typed dd, right?\n\n482\n00:23:29.022 --> 00:23:30.570\nSo, that's the hard part about vi,\n\n483\n00:23:30.570 --> 00:23:33.470\nis getting your mind wrapped around\nthese different entry modes.\n\n484\n00:23:33.470 --> 00:23:35.850\nThat's a tough hurdle to get over.\n\n485\n00:23:35.850 --> 00:23:38.620\nOnce you're past it, you find that\nyou start doing it without even\n\n486\n00:23:38.620 --> 00:23:39.632\nthinking about,\nmoving between these modes.\n\n487\n00:23:39.632 --> 00:23:40.420\n&gt;&gt; Sure.\n\n488\n00:23:40.420 --> 00:23:42.780\nAnd I think with repetition,\nyou'd get it easily.\n\n489\n00:23:42.780 --> 00:23:47.190\n&gt;&gt; Absolutely,\nthere is also other things that we can\n\n490\n00:23:47.190 --> 00:23:51.530\ndo to manipulate the way that vi looks,\nand jump around in the document.\n\n491\n00:23:51.530 --> 00:23:53.760\nRight now I can use my arrow keys and\nscroll around.\n\n492\n00:23:53.760 --> 00:23:56.640\nI can use page up and page down to jump.\n\n493\n00:23:56.640 --> 00:23:59.140\nBut if we are working on a script.\n\n494\n00:23:59.140 --> 00:24:04.240\nMaybe I ran a script and\nit told me there was an error on line 273.\n\n495\n00:24:04.240 --> 00:24:06.400\nI can jump right to line 273.\n\n496\n00:24:06.400 --> 00:24:10.100\nWhen it comes to trouble shooting and\ndebugging this is really valuable.\n\n497\n00:24:10.100 --> 00:24:10.670\n&gt;&gt; Awesome.\n\n498\n00:24:10.670 --> 00:24:11.800\n&gt;&gt; I want to see what's on line 273.\n\n499\n00:24:11.800 --> 00:24:17.310\nSo I can go into command mode and\nI can just type 273.\n\n500\n00:24:17.310 --> 00:24:21.730\nAnd when I do that it\njumps me to line 273.\n\n501\n00:24:21.730 --> 00:24:24.020\nSo I don't have to go and\nfigure out where that is.\n\n502\n00:24:24.020 --> 00:24:27.070\nAnd if you've worked with computers,\nyou know that there\n\n503\n00:24:27.070 --> 00:24:30.210\nare very frequently scripts that will\ntell you, hey, error on line 712.\n\n504\n00:24:30.210 --> 00:24:33.060\nAnd that's it.\nThey don't tell you what the error was.\n\n505\n00:24:33.060 --> 00:24:35.280\nThey just tell you that's\nthe line that was the problem.\n\n506\n00:24:35.280 --> 00:24:39.110\nSo being able to do :712.\n\n507\n00:24:39.110 --> 00:24:42.260\nI can jump right through it, and\nnow I can see what the problem was.\n\n508\n00:24:42.260 --> 00:24:44.460\nOr hopefully figure out\nwhat the problem is.\n\n509\n00:24:44.460 --> 00:24:46.260\nSo those are shortcuts\nthat are really handy,\n\n510\n00:24:46.260 --> 00:24:47.970\nespecially when it comes\nto troubleshooting.\n\n511\n00:24:47.970 --> 00:24:50.930\n&gt;&gt; And there's a lot more, and\nthat'll be in part two of editing\n\n512\n00:24:50.930 --> 00:24:55.160\nfiles with vi as you\nare becoming a Linux power user.\n\n513\n00:24:55.160 --> 00:24:57.150\nSo you wanna make sure you watch part two.\n\n514\n00:24:57.150 --> 00:24:58.140\nThanks for part one, Don.\n\n515\n00:24:58.140 --> 00:24:59.340\nGreat job as usual.\n\n516\n00:24:59.340 --> 00:25:03.360\nThere's all kinds of content to\nbecoming a Linux power user library.\n\n517\n00:25:03.360 --> 00:25:05.750\nMake sure you watch all the videos,\nyou'll be glad you did.\n\n518\n00:25:05.750 --> 00:25:07.720\nAnd thank you for watching ITProTV.\n\n519\n00:25:07.720 --> 00:25:11.340\nRemember, a good IT pro\nis always learning.\n\n520\n00:25:11.340 --> 00:25:12.380\nI'm Zach Memos.\n\n521\n00:25:12.380 --> 00:25:13.160\n&gt;&gt; And I'm Don Pezet.\n\n522\n00:25:13.160 --> 00:25:15.521\n&gt;&gt; And we'll see you very soon.\n\n523\n00:25:15.521 --> 00:25:21.493\n[MUSIC]\n\n524\n00:25:21.493 --> 00:25:24.532\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222512302"
        },
        {
          "description": "Don and Zach cover how to copy & paste (Yank-Put), moving without using arrow keys (h-l-k-j), ranges, and different searches & how to execute them.",
          "length": "1572",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-2-editing_files_with_vi_pt2-062017-PGM.00_25_56_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-2-editing_files_with_vi_pt2-062017-PGM.00_25_56_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-1-2-editing_files_with_vi_pt2-062017-PGM.00_25_56_06.Still001-sm.jpg",
          "title": "Editing Files with Vi Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.230 --> 00:00:01.230\nWelcome to ITProTV.\n\n2\n00:00:01.230 --> 00:00:03.456\nI'm your host, Don Pizet.\n\n3\n00:00:03.456 --> 00:00:08.257\n[CROSSTALK]\n\n4\n00:00:08.257 --> 00:00:12.580\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.580 --> 00:00:13.170\n&gt;&gt; Hello, again.\n\n6\n00:00:13.170 --> 00:00:17.450\nAnd thank you for choosing ITProTV,\nhelping you learn wherever you go.\n\n7\n00:00:17.450 --> 00:00:21.530\nI'm your host, Zach Memos, as we continue\non with becoming a Linux power user.\n\n8\n00:00:21.530 --> 00:00:26.270\nAnd we're now going to be editing\nfiles with vi or v, or vim,\n\n9\n00:00:26.270 --> 00:00:28.357\ndepending on your point of view.\n\n10\n00:00:28.357 --> 00:00:30.390\nBringing us all the knowledge\nwe need is Don Pezet.\n\n11\n00:00:30.390 --> 00:00:31.210\nHe's awesome.\n\n12\n00:00:31.210 --> 00:00:32.930\n&gt;&gt; All right, well,\nlet's pick this thing back up.\n\n13\n00:00:32.930 --> 00:00:34.750\nIf you didn't watch part one,\ndefinitely check it out,\n\n14\n00:00:34.750 --> 00:00:38.500\nbecause that's where we covered our basic\nintroduction to the vi text editor.\n\n15\n00:00:38.500 --> 00:00:40.710\nWe showed how to get in there,\nhow to insert some text,\n\n16\n00:00:40.710 --> 00:00:42.370\nhow to work with some basic things.\n\n17\n00:00:42.370 --> 00:00:44.283\nBut in this episode, we're gonna go,\n\n18\n00:00:44.283 --> 00:00:48.260\nI don't want to call it advanced because\nthis is really just rudimentary stuff.\n\n19\n00:00:48.260 --> 00:00:50.780\nBut we're gonna go a little bit\nbeyond the basic text entry and\n\n20\n00:00:50.780 --> 00:00:54.810\nget into a few more things that make vi a\nlot more usable as a regular text editor.\n\n21\n00:00:54.810 --> 00:00:57.980\nSo we've got all sorts of cool stuff\nlined up coming up ahead in this episode.\n\n22\n00:00:57.980 --> 00:01:00.022\n&gt;&gt; So I know you wanted to go\ninto copy and paste, right?\n\n23\n00:01:00.022 --> 00:01:01.660\n&gt;&gt; Absolutely.\n&gt;&gt; So if we're doing copy and paste,\n\n24\n00:01:01.660 --> 00:01:03.370\nwe usually have a graphical screen.\n\n25\n00:01:03.370 --> 00:01:03.945\nIs that right?\n\n26\n00:01:03.945 --> 00:01:07.500\n&gt;&gt; Yeah, if you think about a normal\neditor, you'd take your mouse and\n\n27\n00:01:07.500 --> 00:01:11.110\nyou'd highlight some text and you'd\nmaybe right-click on it, choose copy.\n\n28\n00:01:11.110 --> 00:01:14.280\nMaybe you'd hit ctrl-C to copy,\nor ctrl-shift-C or whatever.\n\n29\n00:01:14.280 --> 00:01:15.830\nAnd then you go somewhere else and\nyou paste it.\n\n30\n00:01:15.830 --> 00:01:19.630\nThat's a really easy mouse\ndriven type activity.\n\n31\n00:01:19.630 --> 00:01:22.710\nWell, we can do that stuff\ninside a vi as well.\n\n32\n00:01:22.710 --> 00:01:26.760\nSo you've got slightly\ndifferent terminology for it.\n\n33\n00:01:26.760 --> 00:01:29.930\nYou've got the letter y is short for yank.\n\n34\n00:01:29.930 --> 00:01:32.300\nYou can yank text and put it in memory.\n\n35\n00:01:32.300 --> 00:01:33.670\nI know, that's a little weird.\n\n36\n00:01:33.670 --> 00:01:37.352\nI think there's only so\nmany letters for them to work with.\n\n37\n00:01:37.352 --> 00:01:41.007\n&gt;&gt; When I was over in England in\n1974 we were known as Bloody Yanks.\n\n38\n00:01:41.007 --> 00:01:42.370\n[LAUGH]\n&gt;&gt; Well,\n\n39\n00:01:42.370 --> 00:01:44.270\nthat's basically what we're doing here,\nyes, [LAUGH].\n\n40\n00:01:44.270 --> 00:01:45.580\n&gt;&gt; You're yanking some stuff out, yeah.\n\n41\n00:01:45.580 --> 00:01:46.550\n&gt;&gt; You're gonna yank that text and\n\n42\n00:01:46.550 --> 00:01:49.230\nthen you're gonna paste it right back down\nwherever it is that you want by using p,\n\n43\n00:01:49.230 --> 00:01:51.040\nwhich is actually short for put.\n\n44\n00:01:51.040 --> 00:01:54.670\nSo you got yank and\nput instead of copy and paste.\n\n45\n00:01:54.670 --> 00:01:57.810\nBut it's the same exact concept and\nwe can grab that text.\n\n46\n00:01:57.810 --> 00:01:59.820\nLet me just give you an example here.\n\n47\n00:01:59.820 --> 00:02:03.450\nLet me get into a text file.\n\n48\n00:02:03.450 --> 00:02:05.810\nSo I've got a nice long text file here.\n\n49\n00:02:05.810 --> 00:02:10.710\nAnd if I want to copy and paste something,\nI can do that by using my shortcut.\n\n50\n00:02:10.710 --> 00:02:15.180\nSo, if I come in here and take like,\nlet's find the word moved.\n\n51\n00:02:15.180 --> 00:02:17.240\nI want to copy the word moved, right?\n\n52\n00:02:17.240 --> 00:02:19.980\nWell, if I just hit y on my keyboard,\n\n53\n00:02:19.980 --> 00:02:23.400\nnotice down here that\ny has kind of lit up.\n\n54\n00:02:23.400 --> 00:02:25.120\nSo I'm in my entry mode.\n\n55\n00:02:25.120 --> 00:02:27.760\nIt knows that I'm entering in a command,\nright?\n\n56\n00:02:27.760 --> 00:02:30.500\nWell, what I hit next is\ngonna make a big difference.\n\n57\n00:02:30.500 --> 00:02:37.715\nIf I do y y, so I hit y twice, what\nthat just did is copied the entire line.\n\n58\n00:02:37.715 --> 00:02:42.970\nAnd so now if I come in and hit p,\nit puts it, and there it is.\n\n59\n00:02:42.970 --> 00:02:45.300\nI did the entire line, right?\n\n60\n00:02:45.300 --> 00:02:48.684\nRemember, with delete,from\nthe last episode it was dd\n\n61\n00:02:48.684 --> 00:02:50.410\nto delete the whole line.\n\n62\n00:02:50.410 --> 00:02:52.699\n&gt;&gt; Right\n&gt;&gt; And it will, yeah, I got it right.\n\n63\n00:02:52.699 --> 00:02:54.020\nIt's mixing up my head.\n\n64\n00:02:54.020 --> 00:02:57.630\nAnd it's dw to copy a word, right?\n\n65\n00:02:57.630 --> 00:03:03.280\nWell here, if I wanna yank I\ncan say yw to yank the word.\n\n66\n00:03:03.280 --> 00:03:07.230\nAnd then when I hit p to put,\nit's just the word, right?\n\n67\n00:03:07.230 --> 00:03:11.460\nSo unlike in a GUI, where I have to\nhighlight a big section, here I can just\n\n68\n00:03:11.460 --> 00:03:16.130\ndo it quickly and easily by using yy for\na whole line or yw for a word.\n\n69\n00:03:16.130 --> 00:03:18.770\nAnd we'll see later on\n\n70\n00:03:18.770 --> 00:03:21.280\nthat there's ranges that you can\nuse if you want to grab sections.\n\n71\n00:03:21.280 --> 00:03:22.720\nAnd you can do markers and\nplaceholders and\n\n72\n00:03:22.720 --> 00:03:24.310\nall sorts of other crazy advanced stuff.\n\n73\n00:03:24.310 --> 00:03:27.440\nBut for most people, when you're copying\nand pasting that's what we need.\n\n74\n00:03:27.440 --> 00:03:33.430\nAn example would be like let's say I'm\ngonna modify a configuration file.\n\n75\n00:03:33.430 --> 00:03:36.440\nSo I wanna change the way that\nsomething is configured on my system.\n\n76\n00:03:36.440 --> 00:03:41.630\nWell, what I'll normally do, well here,\nlet me just get out of this.\n\n77\n00:03:41.630 --> 00:03:46.190\nAnd let's say that I wanna\nmodify my bashrc file, right?\n\n78\n00:03:46.190 --> 00:03:47.440\nSo every time I log into a terminal,\n\n79\n00:03:47.440 --> 00:03:50.900\nthere's this bashrc file that defines\nwhat I see, or my profile, right?\n\n80\n00:03:50.900 --> 00:03:53.270\nThese are all stored in my home directory.\n\n81\n00:03:53.270 --> 00:03:58.730\nSo if I poke around in here, you'll\nfind .profile and .bashrc and whatever.\n\n82\n00:03:58.730 --> 00:04:03.810\nSo if I'm editing the .bashrc file,\n\n83\n00:04:03.810 --> 00:04:05.790\nand I go in here and\nI find something I don't like.\n\n84\n00:04:05.790 --> 00:04:09.510\nLike the history file size is 2,000 and\nI wanna change that.\n\n85\n00:04:09.510 --> 00:04:12.051\nWell, I might wanna bump it to 5,000.\n\n86\n00:04:12.051 --> 00:04:15.794\nAnd so I could just come right in here and\nchange 2,000 to 5,000.\n\n87\n00:04:15.794 --> 00:04:18.140\nBut then a few weeks from now\nmaybe I decide to put it back.\n\n88\n00:04:18.140 --> 00:04:20.890\nAnd I'm like, what was the default, again?\n\n89\n00:04:20.890 --> 00:04:23.970\nI can't remember what that\nwas set to by default.\n\n90\n00:04:23.970 --> 00:04:28.750\nSo, whenever I change a file,\nwhat I normally do is I copy the line.\n\n91\n00:04:28.750 --> 00:04:35.530\nSo I yank the line by typing yy, and then\nI come right below it and I put the line.\n\n92\n00:04:35.530 --> 00:04:38.430\nSo, I'm making a duplicate of that line.\n\n93\n00:04:38.430 --> 00:04:41.520\nAnd then what I'll do from there is\nI'll hit i to go into insert mode.\n\n94\n00:04:41.520 --> 00:04:44.380\nAnd I'll just comment\nout the original line,\n\n95\n00:04:44.380 --> 00:04:48.570\nand then I'll modify mine to\nwhatever I want it to be, okay?\n\n96\n00:04:48.570 --> 00:04:49.930\nSo I'll bump it up to 5,000.\n\n97\n00:04:49.930 --> 00:04:56.840\nSo by doing that, now I've got my\ncustom version but I still retained\n\n98\n00:04:56.840 --> 00:04:59.890\nthe one that was there as a default-\n&gt;&gt; It's like a ghost-line.\n\n99\n00:04:59.890 --> 00:05:02.920\n&gt;&gt; Yeah, absolutely, and it gives you\nthat fallback that you can go to.\n\n100\n00:05:02.920 --> 00:05:04.300\nMaybe if something goes wrong, right?\n\n101\n00:05:04.300 --> 00:05:05.960\nThis cause something horribly wrong.\n\n102\n00:05:05.960 --> 00:05:07.030\nI wanna put it back.\n\n103\n00:05:07.030 --> 00:05:10.570\nWell, now, I can come in here and\njust comment out my line and\n\n104\n00:05:10.570 --> 00:05:13.850\nuncomment the default, and now, I'm back.\n\n105\n00:05:13.850 --> 00:05:16.160\nSo by copying that line it's real easy.\n\n106\n00:05:16.160 --> 00:05:19.910\nSo, yy to copy the line or\nyw to copy a word.\n\n107\n00:05:19.910 --> 00:05:21.070\nAnd then p to put.\n\n108\n00:05:21.070 --> 00:05:24.010\nP just puts whatever you yanked\ninto the memory buffer out.\n\n109\n00:05:24.010 --> 00:05:26.060\nIt doesn't care if it's a word or\na line or whatever.\n\n110\n00:05:26.060 --> 00:05:27.750\nWhatever's in there,\nthat's what it's gonna put in.\n\n111\n00:05:27.750 --> 00:05:33.190\nSo that's an example of how I'll usually\nuse that to be able to get in and\n\n112\n00:05:33.190 --> 00:05:35.042\nchange a file or modify something.\n\n113\n00:05:35.042 --> 00:05:38.080\n&gt;&gt; Now, Don,\nI noticed you use arrow keys, okay?\n\n114\n00:05:38.080 --> 00:05:39.664\n&gt;&gt; Yes.\n&gt;&gt; And sometimes they don't work or\n\n115\n00:05:39.664 --> 00:05:41.820\nthere might be a problem.\n\n116\n00:05:41.820 --> 00:05:43.110\nIs there alternatives?\n\n117\n00:05:43.110 --> 00:05:46.040\n&gt;&gt; Absolutely, so\nI use the heck out of my arrow keys.\n\n118\n00:05:46.040 --> 00:05:48.940\nI'm moving up and down lines,\nand forward, and backward.\n\n119\n00:05:48.940 --> 00:05:50.950\nAnd we're gonna do that a lot, all right?\n\n120\n00:05:50.950 --> 00:05:55.020\nBut if you are SSHed into a server and\nyou're using a terminal client to\n\n121\n00:05:55.020 --> 00:05:59.790\ndo things, there are times where\narrow keys might not work.\n\n122\n00:05:59.790 --> 00:06:03.237\nIn fact, I think I did it by accident in\nthe beginning of the last episode where\n\n123\n00:06:03.237 --> 00:06:06.048\nthere's a spot where like my\nbackspace key wasn't working and\n\n124\n00:06:06.048 --> 00:06:08.025\nit was throwing extra\ntext up on the screen.\n\n125\n00:06:08.025 --> 00:06:10.517\nThere are times when that happens, and\n\n126\n00:06:10.517 --> 00:06:13.851\nnot every terminal handles\narrow keys the same way.\n\n127\n00:06:13.851 --> 00:06:18.993\nThere's VT100, there's Ansie,\nthere's tons of different terminal\n\n128\n00:06:18.993 --> 00:06:24.050\nemulations that are our there, and\nsome don't support arrow keys.\n\n129\n00:06:24.050 --> 00:06:29.140\nSo vi actually has keyboard shortcuts for\nevery movement that we'd want to do.\n\n130\n00:06:29.140 --> 00:06:35.020\nSo if you look at your keyboard,\nyou've got h, j, k and l.\n\n131\n00:06:35.020 --> 00:06:38.750\nI guess I should clarify, if you're in\nthe United States you have h, j, k and\n\n132\n00:06:38.750 --> 00:06:40.760\nl all right next to each other.\n\n133\n00:06:40.760 --> 00:06:44.160\nIf you have a localized keyboard\nto your country, h, j, k and\n\n134\n00:06:44.160 --> 00:06:45.990\nl might not be next to each other.\n\n135\n00:06:45.990 --> 00:06:49.820\nBut those four keys can be used\nin place of the mouse buttons.\n\n136\n00:06:49.820 --> 00:06:52.200\nOr I'm sorry, in place of the arrows.\n\n137\n00:06:52.200 --> 00:06:54.260\nInstead of up, down, left and right.\n\n138\n00:06:54.260 --> 00:06:57.772\nSo you can hold Ctrl and hit Ctrl+H or\n\n139\n00:06:57.772 --> 00:07:03.030\nCtrl+J, Ctrl+K,\nCtrl+L to move around on the screen.\n\n140\n00:07:03.030 --> 00:07:07.310\nSo for example, if I'm looking\nat my text document here, and\n\n141\n00:07:07.310 --> 00:07:11.920\nI hit Ctrl+H,\nsee how I'm moving to the left?\n\n142\n00:07:11.920 --> 00:07:16.541\nSo control H is left and\ncontrol J is down.\n\n143\n00:07:16.541 --> 00:07:20.910\nCtrl+k is supposed to be mapped up.\n\n144\n00:07:20.910 --> 00:07:23.980\nBut, my keyboard has that\nmapped to something else.\n\n145\n00:07:23.980 --> 00:07:27.320\nSometimes you'll bump into that where your\nOS has a keyboard shortcut mapped and\n\n146\n00:07:27.320 --> 00:07:28.040\nit overrides it.\n\n147\n00:07:28.040 --> 00:07:30.200\nSo, ctrl+k is not working for me.\n\n148\n00:07:30.200 --> 00:07:34.930\nBut basically, these keyboard\nshortcuts will let you move around in\n\n149\n00:07:34.930 --> 00:07:39.290\na document when you might not\nnormally be able to do that, right?\n\n150\n00:07:39.290 --> 00:07:42.900\nSo those things can help,\nespecially if things like your arrow keys\n\n151\n00:07:42.900 --> 00:07:46.460\naren't working to be able to\nnavigate around and do that.\n\n152\n00:07:46.460 --> 00:07:49.070\nThose will work when you're\nin insert mode as well.\n\n153\n00:07:49.070 --> 00:07:52.101\nSo when you drop into insert mode and\nyou start hitting things.\n\n154\n00:07:52.101 --> 00:07:56.565\nBut you have to be careful because see how\nctrl+J to move down is actually entering\n\n155\n00:07:56.565 --> 00:07:57.807\nin carriage returns?\n\n156\n00:07:57.807 --> 00:08:01.457\nAnd CTRL+H to move left\nis actually deleting.\n\n157\n00:08:01.457 --> 00:08:02.154\nRight?\n\n158\n00:08:02.154 --> 00:08:03.984\nSo they are moving me in that direction,\nbut\n\n159\n00:08:03.984 --> 00:08:07.160\nthey're actually modifying the text\nwhen you're in insert mode.\n\n160\n00:08:07.160 --> 00:08:08.610\nWhen you're not in the insert mode,\n\n161\n00:08:08.610 --> 00:08:12.250\nnow they're just moving you\naround on the screen, right?\n\n162\n00:08:12.250 --> 00:08:15.030\nSo different behaviors,\nwhether you're in insert mode or\n\n163\n00:08:15.030 --> 00:08:17.500\nnot in insert mode,\nalways be careful with that.\n\n164\n00:08:17.500 --> 00:08:20.400\nAnd know that if you\naccidentally screw something up,\n\n165\n00:08:20.400 --> 00:08:25.330\nyou can always choose to quit\nwith an exclamation point, and\n\n166\n00:08:25.330 --> 00:08:28.420\nthat'll get you out and\nnot save the changes.\n\n167\n00:08:28.420 --> 00:08:33.230\nSo now if you go back in and go to\nmodify something, you can jump in and\n\n168\n00:08:33.230 --> 00:08:36.390\nthe changes are gone, and\nnow you can try and do it the right way.\n\n169\n00:08:36.390 --> 00:08:40.180\nI end up doing this a lot, when I forget\nthat my arrow keys might not work, or\n\n170\n00:08:40.180 --> 00:08:41.660\nif my arrow keys don't work.\n\n171\n00:08:41.660 --> 00:08:42.930\nI'll get into a document.\n\n172\n00:08:42.930 --> 00:08:46.990\nI'll hit I to insert, and then I'll hit my\narrow keys, and all of a sudden I'll see\n\n173\n00:08:46.990 --> 00:08:50.545\na bunch of Ctrl+Cs or carriage returns or\nwhatever pop up on the screen.\n\n174\n00:08:50.545 --> 00:08:52.090\nI go, great.\n\n175\n00:08:52.090 --> 00:08:55.898\nWell, instead of going and\ndeleting all these characters I just made,\n\n176\n00:08:55.898 --> 00:09:01.000\nit's easier to just quit without changes\nand then edit it and go back in again.\n\n177\n00:09:01.000 --> 00:09:04.177\nAnd now you go through and\nyou do it using the keyboard shortcuts.\n\n178\n00:09:04.177 --> 00:09:06.579\n&gt;&gt; And once again,\nthat was Q exclamation point does that?\n\n179\n00:09:06.579 --> 00:09:08.564\n&gt;&gt; Yeah, the exclamation\npoint is what overwrites and\n\n180\n00:09:08.564 --> 00:09:09.700\nsays I don't want to save it.\n\n181\n00:09:09.700 --> 00:09:12.675\nOtherwise, you save and\nnow you've really messed up your file.\n\n182\n00:09:12.675 --> 00:09:15.890\n&gt;&gt; Whoo, boy,\nwe've been doing one word or one line.\n\n183\n00:09:17.230 --> 00:09:20.970\nAnd that's great cuz we didn't wanna\ndo before, so thank very much.\n\n184\n00:09:20.970 --> 00:09:22.220\nBut what if l wanna do more than that?\n\n185\n00:09:22.220 --> 00:09:26.200\nWhat if l wanna get paragraphs,\nor entire files for that matter?\n\n186\n00:09:26.200 --> 00:09:30.010\n&gt;&gt; Almost every command supports ranges,\nwhere you can say,\n\n187\n00:09:30.010 --> 00:09:34.050\ninstead of applying the command to one\nline, apply it to many, many lines, right?\n\n188\n00:09:34.050 --> 00:09:34.970\nAnd it's up to you to do that.\n\n189\n00:09:34.970 --> 00:09:39.260\nWell, the challenge with doing ranges,\nis you need to know the range, right?\n\n190\n00:09:39.260 --> 00:09:42.440\nAnd as I navigate around,\nmy head's probably covering up some of it.\n\n191\n00:09:42.440 --> 00:09:46.300\nBut if we look at it full screen,\nnotice down here at the bottom right,\n\n192\n00:09:46.300 --> 00:09:48.152\nI've got two sets of numbers.\n\n193\n00:09:48.152 --> 00:09:51.170\n&gt;&gt; Okay,\nthe number on the right is a percentage.\n\n194\n00:09:51.170 --> 00:09:55.100\nIt's telling me that my cursor is 46%\nof the way through the document,and\n\n195\n00:09:55.100 --> 00:09:58.710\nas I scroll down,\nsee how it's going up, 52% and so on.\n\n196\n00:09:58.710 --> 00:10:00.140\nThat's just for your own benefit.\n\n197\n00:10:00.140 --> 00:10:02.960\nI know that I'm a little more than\nhalfway through this document.\n\n198\n00:10:02.960 --> 00:10:04.970\nBut the other numbers are far more useful.\n\n199\n00:10:04.970 --> 00:10:08.220\nThese are telling me what row and\nwhat column or\n\n200\n00:10:08.220 --> 00:10:11.040\nwhat line number I'm on,\nand what character number.\n\n201\n00:10:11.040 --> 00:10:15.400\nSo I'm currently on line number 856 and\nI'm on character number 2.\n\n202\n00:10:15.400 --> 00:10:18.310\nIf I move to the right,\nsee the character number is going up?\n\n203\n00:10:18.310 --> 00:10:20.700\nI'm still on line 856 but\nnow I'm on character 28.\n\n204\n00:10:21.850 --> 00:10:25.380\nAnd now I'm on line 857, 858,\nand so you keep going like that.\n\n205\n00:10:25.380 --> 00:10:27.670\nSo you can see your position.\n\n206\n00:10:27.670 --> 00:10:30.530\nNow the position is important\nbecause if we're gonna use ranges\n\n207\n00:10:30.530 --> 00:10:31.740\nwe need to know that position.\n\n208\n00:10:31.740 --> 00:10:34.200\nSo maybe I don't like this paragraph,\nI wanna get rid of it.\n\n209\n00:10:34.200 --> 00:10:36.115\nApparently I picked the longest\nparagraph in this book.\n\n210\n00:10:36.115 --> 00:10:38.990\n&gt;&gt; [LAUGH]\n&gt;&gt; And so I can see that it starts on line\n\n211\n00:10:38.990 --> 00:10:43.850\n856, and\nthen it goes all the way down to 880.\n\n212\n00:10:43.850 --> 00:10:48.310\nOkay, so 856 to 880, and\nline 880 is technically blank.\n\n213\n00:10:48.310 --> 00:10:51.553\nSo notice the character\ncount on that one is 0-1?\n\n214\n00:10:51.553 --> 00:10:54.750\nBecause there's no actual character here,\nthere's just a carriage return and\n\n215\n00:10:54.750 --> 00:10:55.275\nthat's it.\n\n216\n00:10:55.275 --> 00:10:59.470\nBut 856 to 880, and I'm gonna forget that,\nso I'm gonna write it down real quick.\n\n217\n00:11:00.470 --> 00:11:04.490\nAnd now, if I want to delete\nthat whole paragraph, well,\n\n218\n00:11:04.490 --> 00:11:08.000\nI know if I wanna delete a line,\nin command mode,\n\n219\n00:11:08.000 --> 00:11:13.550\nI can say colon d, and\nthat'll delete the line that I'm on.\n\n220\n00:11:13.550 --> 00:11:17.110\nBut if I want to do a range, before the d,\n\n221\n00:11:17.110 --> 00:11:22.030\nwhat you'll do is you'll say colon and\nthen the first line, mine's gonna be 856,\n\n222\n00:11:22.030 --> 00:11:27.280\nand a comma, and then the second one, 880.\n\n223\n00:11:27.280 --> 00:11:29.500\nAnd then the command I want to run.\n\n224\n00:11:29.500 --> 00:11:32.450\nSo instead of colon d,\nit's got a beginning and\n\n225\n00:11:32.450 --> 00:11:35.030\nan ending line number before the d.\n\n226\n00:11:35.030 --> 00:11:38.530\nAnd delete's not the only one, if we\nwanted to yank multiple lines, we could do\n\n227\n00:11:38.530 --> 00:11:41.720\nthe same thing with a y after it and then\nwe'd copy that whole paragraph, right?\n\n228\n00:11:41.720 --> 00:11:42.920\n&gt;&gt; So we yank and put that?\n\n229\n00:11:42.920 --> 00:11:46.710\n&gt;&gt; Yeah, practically any command\nthat can be issued on a single line,\n\n230\n00:11:46.710 --> 00:11:48.480\ncan be issued on a range like this.\n\n231\n00:11:48.480 --> 00:11:51.670\nSo all you're doing is taking the command\nand inserting a beginning and\n\n232\n00:11:51.670 --> 00:11:53.150\nan end marker, right?\n\n233\n00:11:53.150 --> 00:11:56.370\nSo this is going to delete 856,\nand how am I gonna remember that?\n\n234\n00:11:56.370 --> 00:11:57.540\nWell, that's kind of tough.\n\n235\n00:11:57.540 --> 00:12:01.780\nSo right now 856 starts with,\nthe revel now gradually broke up.\n\n236\n00:12:01.780 --> 00:12:02.410\nOkay.\n\n237\n00:12:02.410 --> 00:12:04.970\nAnd when I run that,\nnow I can go to line 856 and\n\n238\n00:12:04.970 --> 00:12:09.520\nit was very witching time of night,\nthat Ichabod, blah, blah, blah.\n\n239\n00:12:09.520 --> 00:12:10.850\nSo there we go.\n\n240\n00:12:10.850 --> 00:12:12.440\nI just deleted that entire paragraph,\nright.\n\n241\n00:12:12.440 --> 00:12:14.550\nRanges are really handy.\n\n242\n00:12:14.550 --> 00:12:17.460\nIn a GUI, we'd take our mouse and\njust highlight and be done with it, right?\n\n243\n00:12:17.460 --> 00:12:19.089\nWho cares what the line number is?\n\n244\n00:12:19.089 --> 00:12:23.980\nBut when we're working from the shell\nlike this, this is what we've got.\n\n245\n00:12:23.980 --> 00:12:28.042\nAnd doing range deletes and\nrange yanks are very common.\n\n246\n00:12:28.042 --> 00:12:29.110\nI wanna copy this paragraph or\n\n247\n00:12:29.110 --> 00:12:32.780\nthis section of code or\nthis block of the config file.\n\n248\n00:12:32.780 --> 00:12:35.310\nThat stuff becomes really handy.\n\n249\n00:12:35.310 --> 00:12:39.340\nNow one thing that I do to make this\na little easier, the line numbers,\n\n250\n00:12:39.340 --> 00:12:42.370\nI get a little frustrated having to\nkind of track the line numbers and\n\n251\n00:12:42.370 --> 00:12:44.010\nthe character positioning and stuff.\n\n252\n00:12:44.010 --> 00:12:48.600\nAnd I'm a little more used to the kind of\ndevelopment interface that you have where\n\n253\n00:12:48.600 --> 00:12:51.630\ntypically you see the line numbers\non the left side of your screen.\n\n254\n00:12:51.630 --> 00:12:53.810\nYou can make the line numbers show up.\n\n255\n00:12:53.810 --> 00:12:57.639\nIf you hit the colon, normally we're\nissuing single letter commands, but\n\n256\n00:12:57.639 --> 00:13:00.840\nthere's an exception to that,\nand that's the set word.\n\n257\n00:13:00.840 --> 00:13:02.710\nIf you type set,\n\n258\n00:13:02.710 --> 00:13:06.320\nit lets you set all sorts of variables\nthat modify the way that vi works.\n\n259\n00:13:06.320 --> 00:13:07.960\nIt's not modifying your text document,\n\n260\n00:13:07.960 --> 00:13:10.400\nall those single letter commands\nmodify the text document.\n\n261\n00:13:10.400 --> 00:13:15.957\nHere I'm modifying vi, and\nI can come in and I can say set number,\n\n262\n00:13:15.957 --> 00:13:19.910\nand when you run set number,\nlook what it did.\n\n263\n00:13:19.910 --> 00:13:21.780\nThere's my line numbers.\n\n264\n00:13:21.780 --> 00:13:24.723\n&gt;&gt; Now I don't have to watch that little\ncounter down to the bottom right of my\n\n265\n00:13:24.723 --> 00:13:26.241\nscreen, I can just look right here and\n\n266\n00:13:26.241 --> 00:13:28.489\nsay, that's line 856,\nand down here is 871.\n\n267\n00:13:28.489 --> 00:13:33.755\nI now know where that begins and\nends based on a number, I like that.\n\n268\n00:13:33.755 --> 00:13:37.034\nThis is something that I always-\n&gt;&gt; It's very organized.\n\n269\n00:13:37.034 --> 00:13:39.175\n&gt;&gt; But you have to turn it on yourself,\nright?\n\n270\n00:13:39.175 --> 00:13:40.365\nAnd if you want to turn it off,\n\n271\n00:13:40.365 --> 00:13:44.125\nyou do colon set number\nwith an exclamation point.\n\n272\n00:13:44.125 --> 00:13:45.525\nYou do have to spell number right.\n\n273\n00:13:45.525 --> 00:13:46.495\nI did spell it right.\n\n274\n00:13:46.495 --> 00:13:48.460\nAnd that will turn it off, right?\n\n275\n00:13:48.460 --> 00:13:51.580\nAnd then you can always just turn\nthat right back on when you want it.\n\n276\n00:13:51.580 --> 00:13:56.540\nNow, it is temporary, right, so\nI've turned on the numbers to display.\n\n277\n00:13:56.540 --> 00:14:03.160\nIf I get out, and go back in,\nthe line numbers are off, okay.\n\n278\n00:14:03.160 --> 00:14:07.256\nIf you want to make that permanent, you\nneed to put it into your bash RC file so\n\n279\n00:14:07.256 --> 00:14:10.275\nthat it'll be, I'm sorry,\nnot bash RC, vim RC.\n\n280\n00:14:10.275 --> 00:14:12.410\nVine maintains its own configuration file.\n\n281\n00:14:12.410 --> 00:14:14.466\nAnd you probably don't\nhave one by default.\n\n282\n00:14:14.466 --> 00:14:17.010\nWhoops, that's not what I wanted.\n\n283\n00:14:17.010 --> 00:14:19.720\nSo if you look in your home directory.\n\n284\n00:14:19.720 --> 00:14:27.250\nSo if I look in tilde slash, and I'll just\ndo an ls-la, there's a file called .vimrc.\n\n285\n00:14:27.250 --> 00:14:30.840\nAnd it's the configuration for\nvim, and if you have one,\n\n286\n00:14:30.840 --> 00:14:33.920\nit'll show up in there,\nI've got a viminfo, but not a vimrc.\n\n287\n00:14:33.920 --> 00:14:37.940\nSo, you can create one and\nyou can stick set number in there, and\n\n288\n00:14:37.940 --> 00:14:39.340\nthat'll make it the default.\n\n289\n00:14:39.340 --> 00:14:44.368\nSo if I use vi to edit its\nown configuration file,\n\n290\n00:14:44.368 --> 00:14:50.880\nwhich is funny, but you can do it,\nso I will edit ~/.vimrc.\n\n291\n00:14:50.880 --> 00:14:52.030\nThere we go.\n\n292\n00:14:52.030 --> 00:14:55.600\nAnd in here,\nI'm just gonna add set number, right?\n\n293\n00:14:55.600 --> 00:14:59.470\nThat same command I would run, I'm just\nputting it right here in this config file.\n\n294\n00:14:59.470 --> 00:15:01.885\nAnd I'll hit Escape to\nget into command mode.\n\n295\n00:15:01.885 --> 00:15:07.640\n:wq, I'm gonna save and quit,\nright, and now we've got that file.\n\n296\n00:15:07.640 --> 00:15:12.310\nSo that when I edit a file,\nnow the line numbers are on my default.\n\n297\n00:15:12.310 --> 00:15:13.130\n&gt;&gt; That's amazing.\n\n298\n00:15:13.130 --> 00:15:15.860\n&gt;&gt; And if I reboot and\nI come back in later, it's there.\n\n299\n00:15:15.860 --> 00:15:17.610\nIt's tied to my user account, that vimrc.\n\n300\n00:15:17.610 --> 00:15:21.550\nAny configuration that you change,\nyou just stick right in here, and\n\n301\n00:15:21.550 --> 00:15:25.290\nit'll make it where it's configured\nthe way that you want it to be.\n\n302\n00:15:25.290 --> 00:15:28.458\nIt's all about creating that kind\nof comfortable environment for you.\n\n303\n00:15:28.458 --> 00:15:29.980\n&gt;&gt; What about searching for documents?\n\n304\n00:15:29.980 --> 00:15:33.033\nWhat if I want to search for a stream,\nor a place, or something like that?\n\n305\n00:15:33.033 --> 00:15:35.540\n&gt;&gt; All right,\nthis is a big document right here.\n\n306\n00:15:35.540 --> 00:15:38.540\nI tried to pick, well,\nZach suggested War and Peace.\n\n307\n00:15:38.540 --> 00:15:39.155\n&gt;&gt; Yes, I did.\n\n308\n00:15:39.155 --> 00:15:43.120\n&gt;&gt; Well, maybe a little too big, but\nthis is a pretty decent sized document.\n\n309\n00:15:43.120 --> 00:15:45.550\nNormally we're messing with things\nlike config files, pretty small,\n\n310\n00:15:45.550 --> 00:15:50.515\nbut this one is hundreds of lines here,\n1,500 lines.\n\n311\n00:15:50.515 --> 00:15:51.060\n&gt;&gt; Wow!\n\n312\n00:15:51.060 --> 00:15:54.460\n&gt;&gt; Right, and if I wanna search\nthrough and find something,\n\n313\n00:15:54.460 --> 00:15:58.380\nI don't wanna to have to read all 1500\nlines to find what I'm looking for.\n\n314\n00:15:58.380 --> 00:16:01.453\nSo you can search through\nthese pretty easy, right?\n\n315\n00:16:01.453 --> 00:16:04.422\nSo we can search forward or\nsearch backwards for text.\n\n316\n00:16:04.422 --> 00:16:08.911\nI know that in The Legend of\nSleepy Hollow the star is Ichabod, right?\n\n317\n00:16:08.911 --> 00:16:09.713\nIchabod Crane.\n\n318\n00:16:09.713 --> 00:16:13.170\nSo if I wanna search for\nthe first instance of Ichabod,\n\n319\n00:16:13.170 --> 00:16:16.340\nwell, I can hit the forward\nslash on my keyboard.\n\n320\n00:16:16.340 --> 00:16:18.610\nNow this another weird one.\n\n321\n00:16:18.610 --> 00:16:20.310\nI didn't hit colon.\n\n322\n00:16:20.310 --> 00:16:22.600\nI just hit forward slash, right?\n\n323\n00:16:22.600 --> 00:16:25.570\nI wasn't in the colon mode.\n\n324\n00:16:25.570 --> 00:16:27.160\nI was in command mode, right?\n\n325\n00:16:27.160 --> 00:16:32.100\nOtherwise, the text would've just inserted\na slash, but I'm now doing the search.\n\n326\n00:16:32.100 --> 00:16:34.030\nYou can type the colon first if you want.\n\n327\n00:16:34.030 --> 00:16:37.930\nSo you can say colon slash and do\nthe search or you can just hit the slash.\n\n328\n00:16:37.930 --> 00:16:41.880\nWhen we're modifying text like this,\nwe don't have to hit that colon first.\n\n329\n00:16:41.880 --> 00:16:46.520\nAnd I can hit the slash, and I can search\nfor Ichabod, and so if I come in here and\n\n330\n00:16:46.520 --> 00:16:50.538\ntype in /Ichabod, like that, right?\n\n331\n00:16:50.538 --> 00:16:54.540\nI'll type it, and it's gonna search and\nfind that first instance of Ichabod,\n\n332\n00:16:54.540 --> 00:16:55.070\n&gt;&gt; That's great.\n\n333\n00:16:55.070 --> 00:16:57.450\n&gt;&gt; And notice,\nit put it in the middle of my screen and\n\n334\n00:16:57.450 --> 00:17:00.000\nit put my cursor right on the word.\n\n335\n00:17:00.000 --> 00:17:01.050\n&gt;&gt; That's great.\n\n336\n00:17:01.050 --> 00:17:04.340\n&gt;&gt; Now, his name comes up\nmore than once in this book.\n\n337\n00:17:04.340 --> 00:17:05.663\nIt's gonna find the first occurence.\n\n338\n00:17:05.663 --> 00:17:07.166\nI'm on line 143.\n\n339\n00:17:07.166 --> 00:17:07.999\nIt found it.\n\n340\n00:17:07.999 --> 00:17:09.300\nAnd there we go.\n\n341\n00:17:09.300 --> 00:17:14.040\nIf I wanna continue searching for\nhis name, you can just type slash and\n\n342\n00:17:14.040 --> 00:17:16.850\npress enter and it'll look for it again.\n\n343\n00:17:16.850 --> 00:17:19.213\nAnd now I'm on line 176.\n\n344\n00:17:19.213 --> 00:17:21.210\nYou don't have to type slash Ichabod.\n\n345\n00:17:21.210 --> 00:17:22.200\nYou don't have to type the word again.\n\n346\n00:17:22.200 --> 00:17:26.490\nIf you just type forward slash and\npress Enter, it redoes the search.\n\n347\n00:17:26.490 --> 00:17:27.970\nThe same search that you did before.\n\n348\n00:17:27.970 --> 00:17:31.100\nSo I'm just repeating it over and\nover and over again, looking for\n\n349\n00:17:31.100 --> 00:17:32.340\nthe next occurrence.\n\n350\n00:17:32.340 --> 00:17:36.640\nAnd I can continue to page through the\nbook, finding each occurrence of his name,\n\n351\n00:17:36.640 --> 00:17:38.050\nor whatever it is that I'm looking for.\n\n352\n00:17:38.050 --> 00:17:42.895\nSo that functionality is pretty easy,\nand I'm going forward with my search.\n\n353\n00:17:42.895 --> 00:17:43.690\n&gt;&gt; Mm-hm.\n\n354\n00:17:43.690 --> 00:17:44.770\n&gt;&gt; You might go backwards.\n\n355\n00:17:44.770 --> 00:17:47.520\nAnd sometimes I get in a hurry and\nI'm like search, search, search, search.\n\n356\n00:17:47.520 --> 00:17:49.240\nI passed it, right?\n\n357\n00:17:49.240 --> 00:17:52.520\nWell, you can scroll back and\ntry and find it,\n\n358\n00:17:52.520 --> 00:17:56.066\nor instead of a slash,\nyou can do a question mark.\n\n359\n00:17:56.066 --> 00:18:00.400\nOkay, slash is search forward,\nquestion mark is search backwards.\n\n360\n00:18:00.400 --> 00:18:02.170\nAnd I know what you're thinking.\n\n361\n00:18:02.170 --> 00:18:05.110\nWhy not use a back slash for backwards and\na forward slash for forwards?\n\n362\n00:18:05.110 --> 00:18:05.792\n&gt;&gt; It'd be too easy.\n\n363\n00:18:05.792 --> 00:18:07.860\n[LAUGH]\n&gt;&gt; [LAUGH] It would be too easy.\n\n364\n00:18:07.860 --> 00:18:11.710\nThe main reason is the question mark and\nthe forward slash share a key on your\n\n365\n00:18:11.710 --> 00:18:14.450\nkeyboard, on a regular\nUS keyboard at least.\n\n366\n00:18:14.450 --> 00:18:19.390\nSo what I'm doing here is,\nI'm hitting slash to search forward or\n\n367\n00:18:19.390 --> 00:18:23.160\nshift and forward slash, which creates\na question mark, to search backwards.\n\n368\n00:18:23.160 --> 00:18:25.210\nAnd now I can search for Ichabod.\n\n369\n00:18:25.210 --> 00:18:27.490\nAnd it's searching the other way around.\n\n370\n00:18:27.490 --> 00:18:28.280\nIt behaves the same way.\n\n371\n00:18:28.280 --> 00:18:31.020\nI can just type a question mark and\nsearch over and over again.\n\n372\n00:18:31.020 --> 00:18:34.610\nAnd in fact, I didn't even have to type\nIchabod there when I did the search.\n\n373\n00:18:34.610 --> 00:18:38.240\nI can't remember what his\ngirlfriend's name was.\n\n374\n00:18:38.240 --> 00:18:40.774\nI'd search for that, but I guess we could\nsearch for the headless horseman, right?\n\n375\n00:18:40.774 --> 00:18:41.960\n&gt;&gt; Yeah.\n\n376\n00:18:41.960 --> 00:18:46.960\n&gt;&gt; So if I do a search for Headless,\nwhich I imagine is capitalized.\n\n377\n00:18:46.960 --> 00:18:48.870\nI can search forward for it, right?\n\n378\n00:18:48.870 --> 00:18:51.950\nSo now I'm searching forward, and\nthen I can just type a question mark and\n\n379\n00:18:51.950 --> 00:18:56.010\nit automatically searches backwards,\nI don't have to retype it in there.\n\n380\n00:18:56.010 --> 00:18:57.981\nNow it is case sensitive,\nso be aware of that, right?\n\n381\n00:18:57.981 --> 00:19:01.390\nThis is the Unix and Linux world,\nthings are case sensitive.\n\n382\n00:19:01.390 --> 00:19:02.630\nSo when you do the search, be aware.\n\n383\n00:19:03.890 --> 00:19:06.560\nThat does impact what you're\ngonna search and find.\n\n384\n00:19:07.590 --> 00:19:09.140\nThere is another shortcut we can use.\n\n385\n00:19:09.140 --> 00:19:10.740\nInstead of hitting the slash over and\nover again,\n\n386\n00:19:10.740 --> 00:19:14.600\nwhich I think is easier,\nthere's the N key, which is next.\n\n387\n00:19:14.600 --> 00:19:16.890\nAnd you can hit N over and over again.\n\n388\n00:19:16.890 --> 00:19:18.790\nIt does save you one stroke.\n\n389\n00:19:18.790 --> 00:19:21.660\nSo I'm having to hit slash Enter,\nslash Enter.\n\n390\n00:19:21.660 --> 00:19:23.810\nHere, it's just N for next.\n\n391\n00:19:23.810 --> 00:19:25.270\nAnd we keep going for the next.\n\n392\n00:19:25.270 --> 00:19:28.890\nAnd you kind of keep searching back and\nfinding that.\n\n393\n00:19:28.890 --> 00:19:31.728\nAll right, so\nthat's another shortcut that's available.\n\n394\n00:19:31.728 --> 00:19:37.060\nIf you wanna search backwards like the\nquestion mark, you would hit capital N.\n\n395\n00:19:37.060 --> 00:19:41.160\nSo lowercase n for going forward,\ncapital N for going backwards.\n\n396\n00:19:41.160 --> 00:19:43.230\nIt's another shortcut that's available.\n\n397\n00:19:43.230 --> 00:19:45.760\nWhich one you wanna use is up to you.\n\n398\n00:19:45.760 --> 00:19:48.450\nI usually use the forward slash and\nthe question mark are what I go to.\n\n399\n00:19:48.450 --> 00:19:50.840\n&gt;&gt; So we know we know about searching,\nwhich is great, thank you for that.\n\n400\n00:19:50.840 --> 00:19:53.990\nWhat about replacing, if you wanted\nto replace after you did your search?\n\n401\n00:19:53.990 --> 00:19:55.930\n&gt;&gt; Yeah, yeah, you can certainly do that.\n\n402\n00:19:55.930 --> 00:20:03.130\nLet's say, for example, that I want to,\nlet's change the story, right?\n\n403\n00:20:03.130 --> 00:20:08.400\nIchabod's not a very modern name so we\nwant this to become a new more modernized\n\n404\n00:20:08.400 --> 00:20:10.940\none so, we're gonna make his name-\n&gt;&gt; Wilbur.\n\n405\n00:20:10.940 --> 00:20:12.900\n&gt;&gt; Wilbur,\nwell that's not a very modern name.\n\n406\n00:20:12.900 --> 00:20:14.080\nBut we'll run with it, right?\n\n407\n00:20:14.080 --> 00:20:14.870\n&gt;&gt; Zach.\n\n408\n00:20:14.870 --> 00:20:16.340\n&gt;&gt; We'll go with Zach.\n\n409\n00:20:16.340 --> 00:20:19.960\nAll right, so instead of Ichabod Crane\nit's gonna be Zach Crane, right?\n\n410\n00:20:19.960 --> 00:20:22.180\nAnd I wanna just do a quick search and\nreplace.\n\n411\n00:20:22.180 --> 00:20:25.700\nOr maybe you're changing a command\nfile path, or something, a file, so\n\n412\n00:20:25.700 --> 00:20:28.890\nyou could search for every instance\nof that file path and adjust it.\n\n413\n00:20:28.890 --> 00:20:30.870\nThis kind of stuff is not\nhard to do from in here.\n\n414\n00:20:32.160 --> 00:20:34.717\nYou can't do it just by hitting\nthe regular slash though,\n\n415\n00:20:34.717 --> 00:20:36.540\ncuz that's just going to search.\n\n416\n00:20:36.540 --> 00:20:38.050\nWe want to do a search and replace.\n\n417\n00:20:38.050 --> 00:20:41.470\nAnd to do that, we've got to use\nthe full functionality of search.\n\n418\n00:20:41.470 --> 00:20:44.390\n&gt;&gt; Okay.\n&gt;&gt; So you need to do colon s,\n\n419\n00:20:44.390 --> 00:20:47.120\nwhich is telling it we're\ngonna do the full search.\n\n420\n00:20:47.120 --> 00:20:50.770\nNow normally you would come in here and\njust do a slash, right?\n\n421\n00:20:50.770 --> 00:20:52.890\nThe slash that we're gonna do, and\nwhat text you're gonna search for.\n\n422\n00:20:52.890 --> 00:20:55.720\nI'm gonna search for Ichabod, right?\n\n423\n00:20:55.720 --> 00:20:58.140\nAnd if I stop right there,\nwe're just gonna search for Ichabod.\n\n424\n00:20:58.140 --> 00:20:59.240\n&gt;&gt; Then we'll find Ichabods.\n\n425\n00:20:59.240 --> 00:21:02.390\n&gt;&gt; Yeah, and we're not gonna change them,\nwe're just gonna find them.\n\n426\n00:21:02.390 --> 00:21:02.970\n&gt;&gt; Right.\n\n427\n00:21:02.970 --> 00:21:08.960\n&gt;&gt; But if I do another slash,\nnow it's going to be a search and replace.\n\n428\n00:21:08.960 --> 00:21:15.130\nI'm gonna search for the word Ichabod and\nreplace it with this particular entry.\n\n429\n00:21:15.130 --> 00:21:18.030\nSo we'll put in Zach, okay?\n\n430\n00:21:18.030 --> 00:21:19.390\nSo we're gonna search and replace that.\n\n431\n00:21:19.390 --> 00:21:22.910\nNow what I got was, pattern not found.\n\n432\n00:21:22.910 --> 00:21:26.250\nI don't know, I found that Ichabod's\nname is all throughout this book.\n\n433\n00:21:26.250 --> 00:21:30.620\nWell, the search command by default\nsearches the line you're on.\n\n434\n00:21:30.620 --> 00:21:32.240\nJust that line.\n\n435\n00:21:32.240 --> 00:21:34.870\nAnd just like other commands,\nwe can do ranges if we want.\n\n436\n00:21:34.870 --> 00:21:37.820\nI might wanna do the search and\nreplace just off a single line, or\n\n437\n00:21:37.820 --> 00:21:41.440\na single paragraph, or\nthe entire file, right?\n\n438\n00:21:41.440 --> 00:21:45.620\nA lot of times, like here, where it's\ntext, we might wanna just do a paragraph.\n\n439\n00:21:45.620 --> 00:21:47.597\nSo I might need to specify a range,\n\n440\n00:21:47.597 --> 00:21:50.813\nif I can find a range that\nactually has the name Ichabod.\n\n441\n00:21:50.813 --> 00:21:54.470\nI guess I should just do\na regular Ichabod search.\n\n442\n00:21:54.470 --> 00:21:56.967\nAnd here we go.\nSo he's on line 143, right?\n\n443\n00:21:56.967 --> 00:21:59.802\nAnd so I can come in here,\nand I can do the colon s.\n\n444\n00:21:59.802 --> 00:22:02.740\ni'm gonna search for Ichabod and\nI'm gonna replace it with Zach, and\n\n445\n00:22:02.740 --> 00:22:05.420\nI'm gonna run that and there we go.\n\n446\n00:22:05.420 --> 00:22:09.810\nSo a worthy white of the name of Zach\nCrane is now the star of this book for\n\n447\n00:22:09.810 --> 00:22:11.530\nthis line, right?\n\n448\n00:22:11.530 --> 00:22:13.230\nBut not for the rest of it.\n\n449\n00:22:13.230 --> 00:22:14.870\nSo I could do a range or\n\n450\n00:22:14.870 --> 00:22:19.370\nif I wanna do the whole document, there's\nanother little modifier we can use.\n\n451\n00:22:19.370 --> 00:22:21.640\nAnd that's the percent sign, okay?\n\n452\n00:22:21.640 --> 00:22:25.830\nIf I do colon and then something like 1,\n\n453\n00:22:25.830 --> 00:22:28.880\n10 that means I wanna search\nbetween lines 1 and 10.\n\n454\n00:22:28.880 --> 00:22:33.863\nAnd if I know the first line number and\nthe last line number, I can say 1,\n\n455\n00:22:33.863 --> 00:22:36.421\n1500 or whatever it is, right?\n\n456\n00:22:36.421 --> 00:22:37.400\nBut like I'm doing right now.\n\n457\n00:22:37.400 --> 00:22:39.080\nI don't know what the last line number is.\n\n458\n00:22:39.080 --> 00:22:42.070\nSo there's a little shortcut we can\nuse that is just the percent sign.\n\n459\n00:22:42.070 --> 00:22:46.780\nAnd the percent sign says I wanna perform\nthis command across the entire document.\n\n460\n00:22:46.780 --> 00:22:51.190\nNow, in my earlier examples I\nused delete and yank, D and Y.\n\n461\n00:22:51.190 --> 00:22:54.680\nThere's not really a lot of scenarios\nwhere you would yank the whole document or\n\n462\n00:22:54.680 --> 00:22:56.960\ndelete the whole document.\n\n463\n00:22:56.960 --> 00:22:58.000\nSo it's not very useful there.\n\n464\n00:22:58.000 --> 00:23:01.300\nBut with search and replace,\nit's incredibly useful, because now,\n\n465\n00:23:01.300 --> 00:23:03.970\nI can search for Ichabod.\n\n466\n00:23:03.970 --> 00:23:06.130\nAnd I can replace him with Zach and\n\n467\n00:23:06.130 --> 00:23:09.380\nit's gonna do it across\nthe entire document, okay?\n\n468\n00:23:09.380 --> 00:23:12.260\n&gt;&gt; That is amazing and watching him,\nIrving is rolling around his grave.\n\n469\n00:23:12.260 --> 00:23:14.591\n&gt;&gt; Yeah.\n[LAUGH] It doesn't have the same\n\n470\n00:23:14.591 --> 00:23:15.103\nring to it.\n\n471\n00:23:15.103 --> 00:23:15.679\n&gt;&gt; No.\n&gt;&gt; Ichabod.\n\n472\n00:23:15.679 --> 00:23:17.080\n&gt;&gt; Ichabod works better.\n\n473\n00:23:17.080 --> 00:23:21.830\n&gt;&gt; So now it's done, I'm gonna use\ncolon 1 to jump back to line 1, so\n\n474\n00:23:21.830 --> 00:23:23.140\nI'm back at the top of my document.\n\n475\n00:23:23.140 --> 00:23:29.270\nAnd I'm gonna say, /Ichabod, and I'm\ngonna look for any instance of Ichabod.\n\n476\n00:23:29.270 --> 00:23:30.610\nPattern not found.\n\n477\n00:23:30.610 --> 00:23:35.720\nBut if I search for any instance of Zach,\nThere it is on line 143.\n\n478\n00:23:35.720 --> 00:23:39.042\nAnd then I'll use the n shortcut\nthat I said I never use.\n\n479\n00:23:39.042 --> 00:23:41.891\n176, 230, 337, right?\n\n480\n00:23:41.891 --> 00:23:43.850\nAnd I can page through and\nhere they all are.\n\n481\n00:23:43.850 --> 00:23:46.280\nIt's been changed throughout the document.\n\n482\n00:23:46.280 --> 00:23:48.450\nAnd so, hopefully,\nwhat you're seeing here,\n\n483\n00:23:48.450 --> 00:23:51.680\nwhat I'm trying to communicate by\nall this is, yeah, this is hard.\n\n484\n00:23:51.680 --> 00:23:53.400\nIt's a lot of stuff to remember.\n\n485\n00:23:53.400 --> 00:23:57.336\nBut once it's done you can actually\nwork faster this way than you can in\n\n486\n00:23:57.336 --> 00:23:59.013\na graphical user interface.\n\n487\n00:23:59.013 --> 00:24:02.175\nI mean, you can get in and modify huge\nportions of document really quickly.\n\n488\n00:24:02.175 --> 00:24:05.199\nAnd do everything that you're\nused to in your mouse world\n\n489\n00:24:05.199 --> 00:24:08.290\nright here from the shell with\nno mouse involved, right?\n\n490\n00:24:08.290 --> 00:24:12.950\nI haven't been touching my touchpad on the\nwhole episode cuz you can do everything\n\n491\n00:24:12.950 --> 00:24:17.000\nthrough keyboard shortcuts,\nwhich is really, really super handy.\n\n492\n00:24:17.000 --> 00:24:22.110\n&gt;&gt; And because of your great tutelage,\nI now understand that editing\n\n493\n00:24:22.110 --> 00:24:26.750\nwith Vi, editing files with Vi,\nisn't that daunting.\n\n494\n00:24:26.750 --> 00:24:30.000\nJust getting those codes,\nwhat buttons you push and\n\n495\n00:24:30.000 --> 00:24:32.180\nyou're gonna have some notes\nto lead people through that.\n\n496\n00:24:32.180 --> 00:24:33.830\nAnything else you wanna leave them with?\n\n497\n00:24:33.830 --> 00:24:35.140\n&gt;&gt; Well,\nlet me give you guys a little advice.\n\n498\n00:24:35.140 --> 00:24:38.870\nWhen I first started with Linux,\nVi was the standard editor, and\n\n499\n00:24:38.870 --> 00:24:40.240\nI looked at it and\nI was like, that is hard.\n\n500\n00:24:40.240 --> 00:24:42.280\nI'm not gonna learn it, and so I used JED.\n\n501\n00:24:42.280 --> 00:24:46.130\nFor years I used JED, because it was\neasier and it matched kind of what I was\n\n502\n00:24:46.130 --> 00:24:51.830\ncoming from, from OS 2 and DOS, so\nI was more comfortable with JED.\n\n503\n00:24:51.830 --> 00:24:56.390\nBut over time, I kept running into\ndistro after distro, workstation after\n\n504\n00:24:56.390 --> 00:24:59.180\nworkstation, server after server,\nthat didn't have a gen on it.\n\n505\n00:24:59.180 --> 00:25:03.210\nAnd so I finally just forced myself,\nI said you know what its time to learn Vi.\n\n506\n00:25:03.210 --> 00:25:04.660\nAnd I sat down and I worked with it.\n\n507\n00:25:04.660 --> 00:25:07.870\nI forced myself to use it, and\nit only took about a week or two for\n\n508\n00:25:07.870 --> 00:25:09.590\nme to get comfortable with those commands.\n\n509\n00:25:09.590 --> 00:25:12.600\nAnd get to the point where now,\nI don't even look for other editors.\n\n510\n00:25:12.600 --> 00:25:16.290\nI'll jump on a distro,\nI'll jump on a server, a workstation, and\n\n511\n00:25:16.290 --> 00:25:17.890\nI just use Vi out of hand.\n\n512\n00:25:17.890 --> 00:25:22.690\nThere might be Nano, which is pretty\ncommon these days, but I don't need it.\n\n513\n00:25:22.690 --> 00:25:27.060\nOnce you learn Vi, you're pretty\nwell taken care of across the board,\n\n514\n00:25:27.060 --> 00:25:31.820\nvery flexible, and\njust very common to encounter.\n\n515\n00:25:31.820 --> 00:25:35.780\nSo definitely take the time,\ndon't get frustrated, learn it, and\n\n516\n00:25:35.780 --> 00:25:36.870\nyou'll benefit from that.\n\n517\n00:25:36.870 --> 00:25:38.390\n&gt;&gt; Editing Files with Vi, Part 2.\n\n518\n00:25:38.390 --> 00:25:40.970\nThere's a part 1, you might,\nmake sure you watch them both.\n\n519\n00:25:40.970 --> 00:25:45.360\nAnd there's all kinds of video content\ninto Becoming a Linux Power User.\n\n520\n00:25:45.360 --> 00:25:46.890\nMake sure you watch all those videos.\n\n521\n00:25:46.890 --> 00:25:48.800\nYou'll be very glad that you did.\n\n522\n00:25:48.800 --> 00:25:51.010\nAnd thank you for watching ITProTV.\n\n523\n00:25:51.010 --> 00:25:53.640\nRemember, a good IT pro\nis always learning.\n\n524\n00:25:53.640 --> 00:25:54.640\nI'm Zach Memos.\n\n525\n00:25:54.640 --> 00:25:55.480\n&gt;&gt; And I'm Don Pezet.\n\n526\n00:25:55.480 --> 00:25:57.980\n&gt;&gt; And we will see you soon.\n\n527\n00:25:57.980 --> 00:26:04.035\n[MUSIC]\n\n528\n00:26:04.035 --> 00:26:07.133\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222512587"
        },
        {
          "description": "Don and Zach discuss options for finding files on a hard drive, cover various commands such as 'which-whereis-type-locate & find' command, searching by filename, searching by permission mode, search by file size, search by group, search by user ID, restricting search depth, other options, and grep command.",
          "length": "1628",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-2-finding_files-062017-PGM.00_26_52_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-2-finding_files-062017-PGM.00_26_52_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-3-2-finding_files-062017-PGM.00_26_52_27.Still001-sm.jpg",
          "title": "Finding Files",
          "transcript": "WEBVTT\n\n1\n00:00:00.005 --> 00:00:03.467\n&gt;&gt; Welcome to ITProTV,\n\n2\n00:00:03.467 --> 00:00:08.019\nI'm your host, [CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n3\n00:00:08.019 --> 00:00:13.799\n&gt;&gt; Hello again, and\nthank you for choosing ITProTV,\n\n4\n00:00:13.799 --> 00:00:18.130\nhelping you learn wherever you go.\n\n5\n00:00:18.130 --> 00:00:22.570\nI'm Zach Memos, your host as we continue\non with becoming a Linux power user and\n\n6\n00:00:22.570 --> 00:00:25.780\nwe are going to be finding\nfiles with Don Pezet aren't we?\n\n7\n00:00:25.780 --> 00:00:26.698\n&gt;&gt; That is right,\n\n8\n00:00:26.698 --> 00:00:31.300\nthroughout the series I've had to use\na few commands to help us locate a file.\n\n9\n00:00:31.300 --> 00:00:34.731\nTo find something on the hard drive and\nthat can be a little challenging, there's\n\n10\n00:00:34.731 --> 00:00:38.600\nactually some nuances to it that I didn't\ncover, just trying to do things quickly.\n\n11\n00:00:38.600 --> 00:00:42.090\nBut I wanna spend some time here in this\nepisode to give us a chance to see how to\n\n12\n00:00:42.090 --> 00:00:44.390\nreach out and\nfind the things that we need to work with.\n\n13\n00:00:44.390 --> 00:00:46.657\n&gt;&gt; And\nthere's a lot of files on our drives, so\n\n14\n00:00:46.657 --> 00:00:50.355\nwhat are some of our better options\nat finding these particular files?\n\n15\n00:00:50.355 --> 00:00:52.259\n&gt;&gt; Yeah, so, if you think about it,\n\n16\n00:00:52.259 --> 00:00:55.692\nwe did a whole episode on\nthe Filesystem Hierarchy, the FHS.\n\n17\n00:00:55.692 --> 00:00:56.790\n&gt;&gt; Mm-hm.\n\n18\n00:00:56.790 --> 00:01:00.320\n&gt;&gt; And how there's all these folders and\ndata spread all across the hard drive,\n\n19\n00:01:00.320 --> 00:01:02.750\nnow in a perfect world,\n\n20\n00:01:02.750 --> 00:01:05.980\nthe files we work with are all\ngonna be right in our user profile.\n\n21\n00:01:05.980 --> 00:01:07.650\nBut the more and more documents you get,\n\n22\n00:01:07.650 --> 00:01:09.900\nthe more difficult that\nbecomes to keep track of.\n\n23\n00:01:09.900 --> 00:01:12.840\nAnd even outside of that, the\nconfiguration files, the logs and other\n\n24\n00:01:12.840 --> 00:01:16.788\nthings our programs generate are usually\ngonna be outside of our user profile.\n\n25\n00:01:16.788 --> 00:01:21.030\nSo we're gonna be able to locate those\non the disk, and in previous episodes,\n\n26\n00:01:21.030 --> 00:01:25.190\nI showed a couple of commands,\neach one is not really perfect, though.\n\n27\n00:01:25.190 --> 00:01:28.520\nSo I wanna touch on those and make sure\nyou guys understand the limitations of\n\n28\n00:01:28.520 --> 00:01:29.820\nthe commands I've been using.\n\n29\n00:01:29.820 --> 00:01:31.980\nAnd then show you the commands\nthat are actually gonna do a much,\n\n30\n00:01:31.980 --> 00:01:33.620\nmuch better job at what we're doing.\n\n31\n00:01:33.620 --> 00:01:38.590\nSo let's start with the which command,\nthat's the one I used in the command\n\n32\n00:01:38.590 --> 00:01:41.550\nepisodes, if you watched our\nepisodes on executing commands.\n\n33\n00:01:41.550 --> 00:01:46.280\nI would take a command like MC, right,\nMC is my Midnight Commander, and\n\n34\n00:01:46.280 --> 00:01:47.450\nif I'm going to jump into that, great.\n\n35\n00:01:47.450 --> 00:01:51.690\nSo I've installed the Midnight Commander,\nwell, I say I've installed it,\n\n36\n00:01:51.690 --> 00:01:55.250\nwhere did I actually install it,\nwhere does that program reside?\n\n37\n00:01:55.250 --> 00:02:00.176\nAnd you could type which followed by\nthe command, and it'll tell you, okay,\n\n38\n00:02:00.176 --> 00:02:03.970\nit's in /usr/bin/mc, that's where it is.\n\n39\n00:02:03.970 --> 00:02:08.430\nIf I did which ls, that's in /bin/ls,\n\n40\n00:02:08.430 --> 00:02:12.885\nthat's where it's located, so\nI can use this to find commands.\n\n41\n00:02:12.885 --> 00:02:16.250\nIt's finding commands, not files,\nif I'm just looking for a general file or\n\n42\n00:02:16.250 --> 00:02:18.106\nconfiguration file it's\nnot gonna find that.\n\n43\n00:02:18.106 --> 00:02:22.900\nIt's just finding commands,\nthat's the first big limitation of which,\n\n44\n00:02:22.900 --> 00:02:28.370\nthe second limitation is it's only\nfinding the first occurrence.\n\n45\n00:02:28.370 --> 00:02:31.980\nI might have more than one copy of that\nprogram, right, as I've installed other\n\n46\n00:02:31.980 --> 00:02:36.850\npackages, maybe there's more than\none version of MC stored on my disk.\n\n47\n00:02:36.850 --> 00:02:39.540\nIt's only showing the very\nfirst occurrence, it finds it,\n\n48\n00:02:39.540 --> 00:02:43.990\noutputs it on the screen and it stops,\nand that can be a bit of a problem.\n\n49\n00:02:43.990 --> 00:02:47.520\nAlso, there's some things that aren't\ncommands or that aren't programs.\n\n50\n00:02:47.520 --> 00:02:49.650\nThat they're built in so\nthat things that are built into the shell,\n\n51\n00:02:49.650 --> 00:02:54.300\nthey don't correlate to a binary sitting\non your disk, and which will find those.\n\n52\n00:02:54.300 --> 00:02:58.710\nSo when you run which followed by\nsomething that's not an actual executable,\n\n53\n00:02:58.710 --> 00:03:03.990\nlet see if I can think of one off hand,\nexit, yeah there we go.\n\n54\n00:03:03.990 --> 00:03:07.350\nSo exit, that's a command that's\ngonna be run by my terminal,\n\n55\n00:03:07.350 --> 00:03:11.360\nit's not an actual program on the disk,\nand so what does which respond with?\n\n56\n00:03:11.360 --> 00:03:14.930\nNothing, that doesn't help me at all,\nwhere does that come from?\n\n57\n00:03:14.930 --> 00:03:20.300\nSo there are some alternatives,\nthings like the Type command,\n\n58\n00:03:20.300 --> 00:03:24.540\nType tells you how a command is going\nto be interpreted by the system.\n\n59\n00:03:24.540 --> 00:03:28.330\nIf I do Type MC,\nit tells me that it's hashed,\n\n60\n00:03:28.330 --> 00:03:32.280\nthat means that it is a binary,\nand it's in /user/bin/mc,\n\n61\n00:03:32.280 --> 00:03:37.490\nbut if I do Type exit, it tells me,\nthat's a shell built-in.\n\n62\n00:03:37.490 --> 00:03:41.260\nThat's not an actual program sitting\nthere on the hard drive, so Type helps me\n\n63\n00:03:41.260 --> 00:03:45.670\na little bit there but Type isn't showing\nme if there's more than one instance.\n\n64\n00:03:45.670 --> 00:03:50.536\nFor that I can use the whereis command,\nI can say whereis mc?\n\n65\n00:03:50.536 --> 00:03:54.290\nAnd it'll look and it'll show me, and\nsure enough, I was just guessing,\n\n66\n00:03:54.290 --> 00:03:58.055\nI didn't actually know but it looks\nlike I've got more than one copy of MC.\n\n67\n00:03:58.055 --> 00:04:00.300\n&gt;&gt; Mm-hm.\n&gt;&gt; It's in /user/bin/mc,\n\n68\n00:04:00.300 --> 00:04:05.803\n/user/lib/mc /etc/mc, well, those aren't\nnecessarily copies of the program,\n\n69\n00:04:05.803 --> 00:04:09.560\nit might be they have configuration\nfiles in those folders.\n\n70\n00:04:09.560 --> 00:04:13.470\nIt might be different things there, one\nof these is actually the manual file for\n\n71\n00:04:13.470 --> 00:04:14.930\nthis, that's not even an executable.\n\n72\n00:04:14.930 --> 00:04:19.680\nIt's looking for anything that starts\nwith MC and now putting that here for\n\n73\n00:04:19.680 --> 00:04:23.560\nmy screen so that I can find the ones\nthat are related to that initial command.\n\n74\n00:04:23.560 --> 00:04:28.170\nThis shows me a lot more, whereis is a\nlittle bit more functional than the which\n\n75\n00:04:28.170 --> 00:04:33.280\ncommand but it is still built\naround utilities finding programs.\n\n76\n00:04:33.280 --> 00:04:38.690\nAnd so that's a another limitation, so\nthat was which, whereis, and Type for\n\n77\n00:04:38.690 --> 00:04:42.305\nfinding programs and their associated\nfiles, those guys really work out.\n\n78\n00:04:42.305 --> 00:04:45.060\nwhereis is probably the most\npowerful of the three, but\n\n79\n00:04:45.060 --> 00:04:47.220\nit is just locating programs,\nbig limitations.\n\n80\n00:04:47.220 --> 00:04:52.620\n&gt;&gt; So they have limitations, are there any\nother better options for finding files?\n\n81\n00:04:52.620 --> 00:04:54.990\n&gt;&gt; Absolutely, so\nif we want to take that shackle off and\n\n82\n00:04:54.990 --> 00:04:56.810\nsay, we're not just searching for\nprograms anymore.\n\n83\n00:04:56.810 --> 00:04:59.750\nNow I want to search for everything,\ntext files, I wanna search for\n\n84\n00:04:59.750 --> 00:05:00.980\nevery type of file.\n\n85\n00:05:00.980 --> 00:05:03.619\nI'm looking for something,\nmaybe I saved my resume, and,\n\n86\n00:05:03.619 --> 00:05:06.326\n[SOUND] I really need my resume today,\nI screwed something up.\n\n87\n00:05:06.326 --> 00:05:07.918\n&gt;&gt; [LAUGH]\n&gt;&gt; So I need to find it,\n\n88\n00:05:07.918 --> 00:05:11.822\nwhere did I put resume.txt right,\nwell which isn't gonna help me, and\n\n89\n00:05:11.822 --> 00:05:15.349\nwhereis isn't gonna help me cuz\nthey're looking for programs.\n\n90\n00:05:15.349 --> 00:05:18.101\nThey're looking for\nthings that are in the file path, but\n\n91\n00:05:18.101 --> 00:05:20.580\nthere is another command called Locate.\n\n92\n00:05:20.580 --> 00:05:25.410\nAnd the Locate command can help you locate\nany type of file across the disk, and\n\n93\n00:05:25.410 --> 00:05:26.630\nit actually works really easy.\n\n94\n00:05:26.630 --> 00:05:30.540\nYou just type Locate, and\nthen whatever the name of the file is,\n\n95\n00:05:30.540 --> 00:05:35.190\nnow the file,\nit could be darn near anything.\n\n96\n00:05:36.230 --> 00:05:40.740\nFor example, I was working on a text\ndocument in our text episodes\n\n97\n00:05:40.740 --> 00:05:43.560\nof the Legend of Sleepy Hollow, right?\n\n98\n00:05:43.560 --> 00:05:48.990\nAnd I didn't wanna pick this one cuz\nits such a long name, but there we go.\n\n99\n00:05:48.990 --> 00:05:52.065\nSo if I wanna search and\nfind that file I can run Locate, and\n\n100\n00:05:52.065 --> 00:05:55.630\nit's gonna look and it's gonna find it,\nnow it didn't do a very good job did it?\n\n101\n00:05:55.630 --> 00:06:00.330\nIt didn't find the file, and there is\na reason for that, when I run Locate\n\n102\n00:06:00.330 --> 00:06:04.710\nit's looking for things, right, when I\nrun Locate MC I get a bunch of responses.\n\n103\n00:06:04.710 --> 00:06:11.160\nIt found MC, that's a command,\nit found it, if I do Locate profile\n\n104\n00:06:11.160 --> 00:06:16.050\nit's looking for files named profile and\nit's finding files all over the place.\n\n105\n00:06:16.050 --> 00:06:21.090\nBut when I did Locate Legend of Sleepy\nHollow it didn't find it, why is that?\n\n106\n00:06:21.090 --> 00:06:26.140\nWell, there is a few reasons for that but\nthe main reason is that Locate isn't\n\n107\n00:06:26.140 --> 00:06:31.440\nactually searching across your hard drive,\nLocate maintains a database.\n\n108\n00:06:31.440 --> 00:06:35.107\nA database of files and when you run\nthe Locate command, it just looks at that\n\n109\n00:06:35.107 --> 00:06:38.391\ndatabase, and it says, hey,\nis the file located in the database?\n\n110\n00:06:38.391 --> 00:06:41.784\nAnd then we can point to where it is,\nwell, I created that file for\n\n111\n00:06:41.784 --> 00:06:44.330\nThe Legend of Sleepy Hollow,\nit's a text file.\n\n112\n00:06:44.330 --> 00:06:48.960\nIt's right here in my documents folder,\nand so there it is, here's this text file\n\n113\n00:06:48.960 --> 00:06:53.390\nthat Locate just told me doesn't exist,\nbut it's right here, I can see it.\n\n114\n00:06:53.390 --> 00:06:57.650\nThe problem is I haven't\nupdated my database, so\n\n115\n00:06:57.650 --> 00:07:01.780\nas the file system changes,\nthe database has to be updated.\n\n116\n00:07:01.780 --> 00:07:07.540\nAnd what a lot of distros will do is set\na cron job, cron is a service, it's short\n\n117\n00:07:07.540 --> 00:07:13.680\nfor chronometer I believe, or chronos or\nwhatever, the Greek, Latin word for time.\n\n118\n00:07:13.680 --> 00:07:15.750\nBut cron is a service\nthat runs in the back,\n\n119\n00:07:15.750 --> 00:07:17.870\nit runs jobs on a certain schedule, and\n\n120\n00:07:17.870 --> 00:07:22.710\nso you can set it to update the database\nonce every 24 hours or once an hour.\n\n121\n00:07:22.710 --> 00:07:24.520\nBut if it's once every 24 hours and\n\n122\n00:07:24.520 --> 00:07:28.470\nI create a new file I won't be able\nto search for it until the next day.\n\n123\n00:07:28.470 --> 00:07:33.410\nYou can update it by hand\nby using updatedB, so if\n\n124\n00:07:33.410 --> 00:07:38.460\nyou run the updatedB command, sorry, you\ndo need to sudo it, you have to sudo it.\n\n125\n00:07:38.460 --> 00:07:42.830\nIt has to be run as administrator cuz\nit's indexing the entire hard drive and\n\n126\n00:07:42.830 --> 00:07:45.570\nas a regular user, you don't have\naccess to the entire hard drive.\n\n127\n00:07:45.570 --> 00:07:48.468\nYou're partitioned in your little\nsafety zone, so, we need to run that as\n\n128\n00:07:48.468 --> 00:07:51.693\nan administrator, it's gonna reach out and\nnow it's gonna update the database.\n\n129\n00:07:51.693 --> 00:07:55.160\nNow on my system,\nit's gonna run pretty fast right,\n\n130\n00:07:55.160 --> 00:07:57.636\nbecause I've got an NVME hard drive.\n\n131\n00:07:57.636 --> 00:08:02.185\nThat's only got maybe 40 gigs of stuff\non it, so it's gonna index pretty quick.\n\n132\n00:08:02.185 --> 00:08:05.293\nBut the larger your hard drives are,\nand the slower your hard drives are,\n\n133\n00:08:05.293 --> 00:08:06.409\nthe longer this can take.\n\n134\n00:08:06.409 --> 00:08:09.002\nAnd sometimes a database update\ncan take up to 30 minutes.\n\n135\n00:08:09.002 --> 00:08:13.960\nAnd it's scanning across the disk, pulling\nthe entire file table to index what\n\n136\n00:08:13.960 --> 00:08:16.555\nfiles exist and updating that database.\n\n137\n00:08:16.555 --> 00:08:19.975\nSo now, when you come in and\nyou do a locate and you look for\n\n138\n00:08:19.975 --> 00:08:24.056\nfiles, like I'm just gonna look for\nthe word sleepy, there it is.\n\n139\n00:08:24.056 --> 00:08:27.545\nThe_legend_of_sleepy_hollow.text, it\nfound it because it updated the database.\n\n140\n00:08:27.545 --> 00:08:31.703\nSo the locate command is awesome cuz\nyou can find instances of files,\n\n141\n00:08:31.703 --> 00:08:36.233\nany file across the entire hard drive,\nif you keep the database up to date.\n\n142\n00:08:36.233 --> 00:08:39.590\nThat's a key thing right there, is that\ndatabase has gotta be kept up to date.\n\n143\n00:08:39.590 --> 00:08:43.050\n&gt;&gt; So is there a search that we can\nuse that does not use the database?\n\n144\n00:08:43.050 --> 00:08:46.810\n&gt;&gt; Yeah, absolutely, so if I'm just\ngonna do a one time search, right?\n\n145\n00:08:46.810 --> 00:08:47.525\nIf I'm searching for\n\n146\n00:08:47.525 --> 00:08:51.340\nstuff all the time, it makes sense\nto update that database to keep it.\n\n147\n00:08:51.340 --> 00:08:53.980\nSet up a cron job,\nhave it update once an hour or\n\n148\n00:08:53.980 --> 00:08:57.500\nwhatever, but\nit's kind of out of sync with real time.\n\n149\n00:08:57.500 --> 00:09:01.460\nAnd if I know a file was created recently,\nit's not gonna be in that database.\n\n150\n00:09:01.460 --> 00:09:05.020\nSo you can choose to do\na search without a database.\n\n151\n00:09:05.020 --> 00:09:08.700\nOn a positive side,\nyou will find everything.\n\n152\n00:09:08.700 --> 00:09:09.700\nOn a negative side,\n\n153\n00:09:09.700 --> 00:09:13.610\nbecause there isn't a database,\nit's gotta crawl the entire hard drive.\n\n154\n00:09:13.610 --> 00:09:15.120\nSo the search will take longer.\n\n155\n00:09:15.120 --> 00:09:17.970\nHow long did the search take for\nme to type locate sleepy?\n\n156\n00:09:17.970 --> 00:09:18.765\nIt was instantaneous.\n\n157\n00:09:18.765 --> 00:09:19.464\n&gt;&gt; Mm-hm.\n\n158\n00:09:19.464 --> 00:09:21.056\n&gt;&gt; Looked in the database,\ngot the result, and gave it to me.\n\n159\n00:09:21.056 --> 00:09:23.496\nSo locate is fast.\n\n160\n00:09:23.496 --> 00:09:25.857\nWe could also use find.\n\n161\n00:09:25.857 --> 00:09:28.120\nThe find command doesn't use a database.\n\n162\n00:09:28.120 --> 00:09:31.300\nIt finds everything,\neven things that were just created.\n\n163\n00:09:31.300 --> 00:09:32.800\nBut it's slow.\n\n164\n00:09:32.800 --> 00:09:37.590\nSo if you're in a hurry, and you search\na lot, locate is usually better, right,\n\n165\n00:09:37.590 --> 00:09:39.620\nas long as that database\nis kept up to date.\n\n166\n00:09:39.620 --> 00:09:42.770\nBut if you're not in a hurry, and\nyou don't wanna maintain a database, but\n\n167\n00:09:42.770 --> 00:09:46.590\nyou do wanna search the whole hard drive,\nfind is the better option.\n\n168\n00:09:46.590 --> 00:09:50.140\nNow find has a slightly\nweird command syntax,\n\n169\n00:09:50.140 --> 00:09:51.400\nwhich I always have a problem with.\n\n170\n00:09:51.400 --> 00:09:56.160\n[LAUGH] So the way that find works is,\nyou type the word find.\n\n171\n00:09:56.160 --> 00:09:59.200\nRight, that's the command that\nwe're gonna be initiating.\n\n172\n00:09:59.200 --> 00:10:01.410\nAnd you tell it where you wanna look,\nokay?\n\n173\n00:10:01.410 --> 00:10:03.340\nIf you wanna search\nyour entire hard drive,\n\n174\n00:10:03.340 --> 00:10:07.020\nyou'll say /,\nthat means start in the root folder.\n\n175\n00:10:07.020 --> 00:10:08.930\nThat's where I wanna search.\n\n176\n00:10:08.930 --> 00:10:12.350\nOf if I wanna search my home directory,\nI could say look in ~/,\n\n177\n00:10:12.350 --> 00:10:13.990\nI wanna look in my home directory.\n\n178\n00:10:13.990 --> 00:10:17.720\nSo we're telling it where to start,\nI want it to start there.\n\n179\n00:10:17.720 --> 00:10:20.370\nAnd then we tell it\nwhat we're looking for.\n\n180\n00:10:20.370 --> 00:10:21.480\nI'm gonna give it a name.\n\n181\n00:10:21.480 --> 00:10:25.580\nI'm gonna search for\na file that has a particular name.\n\n182\n00:10:25.580 --> 00:10:27.660\nAnd then in the name,\nI can say I'm looking for\n\n183\n00:10:27.660 --> 00:10:33.510\nthe legend of sleepy hollow.txt.\n\n184\n00:10:33.510 --> 00:10:37.530\nOkay, and so I'm gonna look and\nsee what I find.\n\n185\n00:10:37.530 --> 00:10:41.260\nNow when I run it, it found it,\nthat very first line right there tells me,\n\n186\n00:10:41.260 --> 00:10:44.470\nhey if I look at my documents folder,\nI'll find it.\n\n187\n00:10:44.470 --> 00:10:48.160\nBut I also got some\npermission denieds here.\n\n188\n00:10:48.160 --> 00:10:51.860\nAnd that's because there were some\ntemporary cache files that were locked.\n\n189\n00:10:51.860 --> 00:10:54.120\nThey're in use by programs on my system.\n\n190\n00:10:54.120 --> 00:10:56.330\nAnd so it wasn't able to read those.\n\n191\n00:10:56.330 --> 00:10:58.840\nSo one of those could have been\nthe Legend of Sleepy Hollow.\n\n192\n00:10:58.840 --> 00:11:02.580\nIt couldn't read it so it doesn't know and\nthat's why it throws up this error.\n\n193\n00:11:02.580 --> 00:11:04.190\nSome people get annoyed by that.\n\n194\n00:11:04.190 --> 00:11:09.550\nIf you're searching the entire hard drive,\nyou'll get a lot of permission denieds.\n\n195\n00:11:09.550 --> 00:11:11.210\nFor any directory you\ndon't have access to, and\n\n196\n00:11:11.210 --> 00:11:15.140\neven the root user is prohibited from\ngetting into certain directories.\n\n197\n00:11:15.140 --> 00:11:18.860\nSo if you're gonna be using this command a\nlot and you don't want your screen to fill\n\n198\n00:11:18.860 --> 00:11:23.100\nup with errors like that, it's a good idea\nto redirect the errors somewhere else.\n\n199\n00:11:23.100 --> 00:11:27.900\nYou can send the errors somewhere\nelse by using our output redirection.\n\n200\n00:11:27.900 --> 00:11:32.890\nWe did a whole episode on executing\ncommands and redirecting output.\n\n201\n00:11:32.890 --> 00:11:36.980\nBut just to sum it up here,\nI can redirect the errors by typing, and\n\n202\n00:11:36.980 --> 00:11:39.620\nmy head's gonna cover this,\nbut 2 greater than.\n\n203\n00:11:39.620 --> 00:11:43.040\nNow the greater than says\nredirect your standard output or\n\n204\n00:11:43.040 --> 00:11:46.590\nyour good stuff,\n2 greater than says redirect the errors.\n\n205\n00:11:46.590 --> 00:11:48.850\nI'm gonna redirect\nthe errors to /dev/null,\n\n206\n00:11:48.850 --> 00:11:53.010\nthat's a virtual device\nthat says throw it away.\n\n207\n00:11:53.010 --> 00:11:55.055\nSo take the errors and throw them away.\n\n208\n00:11:55.055 --> 00:11:56.730\n&gt;&gt; Hm.\n&gt;&gt; And when I run that,\n\n209\n00:11:56.730 --> 00:11:59.880\nI'll see the successes and\nnot the errors, right?\n\n210\n00:11:59.880 --> 00:12:01.564\n&gt;&gt; Great!\n&gt;&gt; So that's a way to purge out and\n\n211\n00:12:01.564 --> 00:12:02.780\nget the result.\n\n212\n00:12:02.780 --> 00:12:06.170\nNow, I only searched my home directory.\n\n213\n00:12:06.170 --> 00:12:09.830\nIf I search the entire hard drive,\nso let's modify this.\n\n214\n00:12:11.190 --> 00:12:14.360\nAnd I run it myself,\nI'm going to get a lot of errors for\n\n215\n00:12:14.360 --> 00:12:16.430\nany folder that I don't have access to.\n\n216\n00:12:16.430 --> 00:12:19.500\nBut I don't have access to the folder, so\nif the file's in there, it doesn't matter,\n\n217\n00:12:19.500 --> 00:12:20.425\nI can't get to it anyway.\n\n218\n00:12:20.425 --> 00:12:24.920\nSo I'm okay with those errors that\ncome up, I just want to ignore them.\n\n219\n00:12:24.920 --> 00:12:28.612\nSo what I'm showing you here is\nwhat I'll normally run, find/,\n\n220\n00:12:28.612 --> 00:12:30.400\nstart at the root of the system.\n\n221\n00:12:30.400 --> 00:12:33.347\nI wanna search the entire system,\nall the hard drives attached.\n\n222\n00:12:33.347 --> 00:12:36.522\nAnd then I look for a name and\nI throw the errors in the trash.\n\n223\n00:12:36.522 --> 00:12:40.330\nAnd when I run that,\nit's taking a moment, right?\n\n224\n00:12:40.330 --> 00:12:44.850\nIt's scanning the entire hard drive,\nand then there's my file.\n\n225\n00:12:44.850 --> 00:12:47.720\nIt turned out that it was in\nmy home directory, right?\n\n226\n00:12:47.720 --> 00:12:51.990\nIf I'm looking for a file of a different\nname, maybe a readme file or\n\n227\n00:12:51.990 --> 00:12:55.280\nsomething, we can come in here and we\ncan just tell it what we're looking for.\n\n228\n00:12:55.280 --> 00:12:59.250\nI want to know where the midnight\ncommander binary is located.\n\n229\n00:12:59.250 --> 00:13:02.050\nAnd so I can run that and\nnow it's gonna start searching.\n\n230\n00:13:02.050 --> 00:13:06.877\nAnd there we can find each instance of it,\nthe one that's in /etc, /user,\n\n231\n00:13:06.877 --> 00:13:11.120\n/bin, and so on, and\nI didn't get a bunch of errors.\n\n232\n00:13:11.120 --> 00:13:14.747\nIf I take off that error redirection,\nthis is kinda fun.\n\n233\n00:13:14.747 --> 00:13:16.371\nWell, if you find this stuff fun.\n\n234\n00:13:16.371 --> 00:13:19.319\n&gt;&gt; [LAUGH]\n&gt;&gt; Is that I get screen after screen of\n\n235\n00:13:19.319 --> 00:13:20.727\nthis permission denied.\n\n236\n00:13:20.727 --> 00:13:23.507\nAnd so that's why I'll normally redirect\nthat and just chuck it into null and\n\n237\n00:13:23.507 --> 00:13:24.030\nget rid of it.\n\n238\n00:13:24.030 --> 00:13:26.590\nBecause somewhere in here\nare the successes but\n\n239\n00:13:26.590 --> 00:13:30.750\nit's kinda hard to tell because of\neverything that I didn't have access to.\n\n240\n00:13:30.750 --> 00:13:34.496\nThis is hundreds of lines\npermissions denied.\n\n241\n00:13:34.496 --> 00:13:36.897\nThat's the challenge\nwith the find command.\n\n242\n00:13:36.897 --> 00:13:38.369\n&gt;&gt; Mm-hm, it sure is.\n\n243\n00:13:38.369 --> 00:13:41.777\n&gt;&gt; So just to kinda recap that\none real quick to show you guys,\n\n244\n00:13:41.777 --> 00:13:45.127\nit was find followed by the root\nthat I wanted to start in.\n\n245\n00:13:45.127 --> 00:13:47.195\nAnd it could be your home directory,\nyour documents folder,\n\n246\n00:13:47.195 --> 00:13:48.324\nit could be the root of the drive.\n\n247\n00:13:48.324 --> 00:13:52.540\nAnd then -name followed by the name\nof the file that we're looking for.\n\n248\n00:13:52.540 --> 00:13:56.540\nAnd it can be a part of the name or\nthe whole name if you know it.\n\n249\n00:13:56.540 --> 00:14:00.240\nAnd then the last part here is just me\nredirecting the errors, 2 greater than,\n\n250\n00:14:00.240 --> 00:14:02.850\nand then I'm sending them to /dev/null.\n\n251\n00:14:02.850 --> 00:14:05.880\nYou could send them to a text file if\nyou wanted to dig through the errors but\n\n252\n00:14:05.880 --> 00:14:06.800\nI normally just throw it out.\n\n253\n00:14:06.800 --> 00:14:10.760\nSo that's how we can kinda take\ncare of that and find those files.\n\n254\n00:14:10.760 --> 00:14:15.170\n&gt;&gt; What about searching by group or\nI mean that sorta thing?\n\n255\n00:14:15.170 --> 00:14:16.840\n&gt;&gt; I'm doing find -name.\n\n256\n00:14:16.840 --> 00:14:19.210\nThere's actually a ton of options.\n\n257\n00:14:19.210 --> 00:14:21.510\nIf you pull up the man page for find, so\n\n258\n00:14:21.510 --> 00:14:24.870\nif I do a man find,\nwe can come in here and look.\n\n259\n00:14:24.870 --> 00:14:29.340\nAnd usually you're searching for a file\nname, that's the typical use scenario.\n\n260\n00:14:29.340 --> 00:14:31.230\nBut as you scroll down in\nthe documentation in here,\n\n261\n00:14:31.230 --> 00:14:34.740\nsomewhere it'll show all the other\nthings we can search for.\n\n262\n00:14:34.740 --> 00:14:37.410\nYou can search for files that\nare owned by a particular group or\n\n263\n00:14:37.410 --> 00:14:39.640\nfiles that are owned\nby a particular owner.\n\n264\n00:14:39.640 --> 00:14:43.616\nYou can search for files by size, right,\nmaybe I'm running low on hard drive space.\n\n265\n00:14:43.616 --> 00:14:46.708\nI'm like, man, there must be some large\nfiles on my hard drive somewhere.\n\n266\n00:14:46.708 --> 00:14:50.572\nAnd so you can come in and\nsearch based on file size, and\n\n267\n00:14:50.572 --> 00:14:53.020\ndid I scroll past it or something?\n\n268\n00:14:53.020 --> 00:14:56.285\nWell, you see some of them kind of\njust spread out here on the screen.\n\n269\n00:14:56.285 --> 00:14:58.516\n-group for searching by group,\n\n270\n00:14:58.516 --> 00:15:03.226\nI think I saw size as I scroll by\nreally quick, you'll see other ones.\n\n271\n00:15:03.226 --> 00:15:06.276\nIf the data was last modified\na certain amount of minutes ago, so\n\n272\n00:15:06.276 --> 00:15:09.190\nyou can find files you've\nbeen recently working with.\n\n273\n00:15:09.190 --> 00:15:11.880\nAll of these are different ways\nthat we can manipulate it, right.\n\n274\n00:15:11.880 --> 00:15:14.040\nLet me just show you\na couple of quick examples,\n\n275\n00:15:14.040 --> 00:15:17.300\nwe could spend days on this if\nwe wanted to really go crazy.\n\n276\n00:15:17.300 --> 00:15:19.750\nBut if I wanna search some file size,\nright?\n\n277\n00:15:19.750 --> 00:15:22.580\nI'm running low on hard drive space,\nI wanna find every file on\n\n278\n00:15:22.580 --> 00:15:27.310\nmy hard drive that is\nlarger than 100 megs, okay.\n\n279\n00:15:27.310 --> 00:15:28.500\nSo let's to that search.\n\n280\n00:15:28.500 --> 00:15:31.930\nI'll say find and\nI'll tell it where I wanna look.\n\n281\n00:15:31.930 --> 00:15:34.595\nIf I'm looking for\nprograms I might limit this to /usr, or\n\n282\n00:15:34.595 --> 00:15:37.867\nI might wanna search in the root, or\nI might wanna search my home folder.\n\n283\n00:15:37.867 --> 00:15:44.135\nBut I'll do, Well, here, we'll just\nlimit it to my home folder, right.\n\n284\n00:15:44.135 --> 00:15:48.365\nSo I'm gonna search my home folder for\nany files over a particular size.\n\n285\n00:15:48.365 --> 00:15:51.369\nAnd then you just say -size and\nwhat you want the size to be.\n\n286\n00:15:51.369 --> 00:15:55.633\nAnd there's actually several\ndifferent bits of shorthand\n\n287\n00:15:55.633 --> 00:16:00.152\nnotation here we can use like you\ncan say 10 With a capital M for\n\n288\n00:16:00.152 --> 00:16:05.110\nmegabytes or begin with a capital G for\ngigabytes or K for kilobytes.\n\n289\n00:16:05.110 --> 00:16:07.210\nSo I can look based on their size, and\n\n290\n00:16:07.210 --> 00:16:12.810\nthen if I want I can redirect\nthe arrows 2/dev/null.before.\n\n291\n00:16:12.810 --> 00:16:15.760\nAnd that way we don't get flooded with\nall that, but I'm in my home directory.\n\n292\n00:16:15.760 --> 00:16:19.378\nSo it's probably pretty safe to search,\nand now it's gonna search and look for\n\n293\n00:16:19.378 --> 00:16:21.169\nany files that are over a certain size.\n\n294\n00:16:21.169 --> 00:16:25.747\nAnd so you'll find, looks like I had\na video game installed, called TorchLight.\n\n295\n00:16:25.747 --> 00:16:28.605\nAnd so there's some extra files\nhere that left over from it.\n\n296\n00:16:28.605 --> 00:16:30.615\nAnd those are eating up space, right?\n\n297\n00:16:30.615 --> 00:16:34.108\nIf I look, they're in a little\ncache folder here, right?\n\n298\n00:16:34.108 --> 00:16:37.834\nSo they're being stored in this cache,\nI could delete those out to make room or\n\n299\n00:16:37.834 --> 00:16:39.534\nI could keep them and that's that.\n\n300\n00:16:39.534 --> 00:16:40.702\n&gt;&gt; And keep playing TorchLight.\n\n301\n00:16:40.702 --> 00:16:41.704\n[LAUGH]\n&gt;&gt; There it is, it's important.\n\n302\n00:16:41.704 --> 00:16:45.797\nSo a quick way that we can locate that and\nfigure out whether or\n\n303\n00:16:45.797 --> 00:16:48.211\nnot that's wasted space, right?\n\n304\n00:16:48.211 --> 00:16:49.997\nI might be wasting space and\nnow I can reclaim it.\n\n305\n00:16:49.997 --> 00:16:53.185\nSo searching by size is pretty handy,\nsearching by group,\n\n306\n00:16:53.185 --> 00:16:56.388\nyou would just say -group, and\nthen the name of the group.\n\n307\n00:16:56.388 --> 00:17:01.028\nSo I might look in here for\nanything that is owned by group adm, rigt?\n\n308\n00:17:01.028 --> 00:17:04.670\nAnd so are there any files in\nmy home directory owned by adm?\n\n309\n00:17:04.670 --> 00:17:05.568\nThere aren't any, right?\n\n310\n00:17:05.568 --> 00:17:09.974\nWell maybe I will make\na file called file1.txt.\n\n311\n00:17:09.974 --> 00:17:16.434\nAnd I will change the group to adm for\nfile1.txt, okay?\n\n312\n00:17:16.434 --> 00:17:21.971\nAnd now when I run that search, And I take\na look, there it is, it found file1.txt.\n\n313\n00:17:21.971 --> 00:17:24.659\nIts owned by that group,\nsame thing goes for user,\n\n314\n00:17:24.659 --> 00:17:27.358\nyou would just do -user and\nit would look that way.\n\n315\n00:17:27.358 --> 00:17:29.944\nAnd I used the group name,\nif you know the group ID.\n\n316\n00:17:29.944 --> 00:17:31.674\nThe number for it, you can look that way.\n\n317\n00:17:31.674 --> 00:17:34.606\nI don't know adm's ID number,\n\n318\n00:17:34.606 --> 00:17:40.695\nI guess I could look in /adc/group and\nfind it in here somewhere.\n\n319\n00:17:40.695 --> 00:17:42.280\nThere, it's group number four.\n\n320\n00:17:42.280 --> 00:17:47.612\nSo when I did that group and\nI said adm, I could have said gid.\n\n321\n00:17:47.612 --> 00:17:50.690\nWhich is the group ID, and\nsearch for number four that way, and\n\n322\n00:17:50.690 --> 00:17:51.746\nlook, and found it.\n\n323\n00:17:51.746 --> 00:17:53.923\nSo whichever one you've got,\nyou can search.\n\n324\n00:17:53.923 --> 00:17:58.824\nThe find command is very, very powerful\nfor locating things, baseline on that.\n\n325\n00:17:58.824 --> 00:17:59.702\n&gt;&gt; That's fantastic.\n\n326\n00:17:59.702 --> 00:18:02.397\nSo use your ID, we can search by.\n\n327\n00:18:02.397 --> 00:18:05.931\nIs there a search depth that\nyou can gauge with change.\n\n328\n00:18:05.931 --> 00:18:06.844\n&gt;&gt; [LAUGH] That's handy,\n\n329\n00:18:06.844 --> 00:18:09.679\nespecially with websites where you\nmight end up in like a rabbit hole,\n\n330\n00:18:09.679 --> 00:18:12.968\nwhere it keeps going into subdirectories,\ndeep, deep, deeper, and deeper.\n\n331\n00:18:12.968 --> 00:18:13.661\n&gt;&gt; That's what I was thinking.\n\n332\n00:18:13.661 --> 00:18:17.015\n&gt;&gt; So you can do a search, and\nI'll use it when I search the root, right?\n\n333\n00:18:17.015 --> 00:18:20.164\nIf I'm searching root like this,\nI might wanna come in and limit that.\n\n334\n00:18:20.164 --> 00:18:24.915\nSo you can set a -maxdepth,\nand I'll set it to three.\n\n335\n00:18:24.915 --> 00:18:27.511\nI don't wanna go more than\nthree directories deep,\n\n336\n00:18:27.511 --> 00:18:29.107\nit's gonna exclude anything.\n\n337\n00:18:29.107 --> 00:18:31.324\nAnd in fact with exclusions,\nyou can do that too.\n\n338\n00:18:31.324 --> 00:18:35.201\nI might wanna search my home folder for\nany text file, right?\n\n339\n00:18:35.201 --> 00:18:39.096\nSo I'm gonna search my home folder and\nI'll say /name.txt, right?\n\n340\n00:18:39.096 --> 00:18:44.678\nAnd it's gonna look,\nactually I'll do /name\n\n341\n00:18:44.678 --> 00:18:49.709\n*.txt, and do I not have any text files?\n\n342\n00:18:49.709 --> 00:18:53.024\nLet's see what I'm getting here.\n\n343\n00:18:53.024 --> 00:18:54.911\nShoot, I'm doing an expression.\n\n344\n00:18:54.911 --> 00:18:58.469\nSo regular expressions,\nwe're gonna talk about in another episode.\n\n345\n00:18:58.469 --> 00:18:59.738\nI don't wanna dive too deep into those.\n\n346\n00:18:59.738 --> 00:19:01.911\n&gt;&gt; Right.\n&gt;&gt; So if I search for something though,\n\n347\n00:19:01.911 --> 00:19:04.716\nand I know there's more than\none instance of it, right?\n\n348\n00:19:04.716 --> 00:19:07.638\nI know that it's gonna be present\nin a number of different places.\n\n349\n00:19:07.638 --> 00:19:10.160\nI could come in and say,\nwell when I did mc, right?\n\n350\n00:19:10.160 --> 00:19:13.628\nAnd it found all this stuff and\nthen I forgot to redirect that.\n\n351\n00:19:13.628 --> 00:19:18.229\nLet me do that into /dev/null,\nthere we go.\n\n352\n00:19:18.229 --> 00:19:22.717\nAll right, notice that it searched like\nthe source code directory /usr/src,\n\n353\n00:19:22.717 --> 00:19:24.700\nI might not want to do that, right?\n\n354\n00:19:24.700 --> 00:19:25.777\nI don't want to search the source code.\n\n355\n00:19:25.777 --> 00:19:28.557\nI just wanna search my\nactual compiled executables.\n\n356\n00:19:28.557 --> 00:19:36.097\nYou can use -not and\n-or to say different criteria, right?\n\n357\n00:19:36.097 --> 00:19:41.413\nI wanna find anything called MC\nthat's not in a particular location.\n\n358\n00:19:41.413 --> 00:19:46.210\nSo you can start to create exceptions\nlike that or this is not owned by a user.\n\n359\n00:19:46.210 --> 00:19:51.459\nSo when I looked here, and\nI said that I wanted to\n\n360\n00:19:51.459 --> 00:19:56.859\nfind in my own home folder\nanything by group adm.\n\n361\n00:19:56.859 --> 00:20:03.534\nI can then follow it up with the not\nowned by user dpezet, right?\n\n362\n00:20:03.534 --> 00:20:07.104\nSo anything in the adm group\nthat's not owned by me.\n\n363\n00:20:07.104 --> 00:20:08.525\nSo it kinda counteracts it.\n\n364\n00:20:08.525 --> 00:20:09.154\n&gt;&gt; Got it.\n&gt;&gt; And\n\n365\n00:20:09.154 --> 00:20:13.540\nwe can look and hunt and find things\nright there based on those criteria.\n\n366\n00:20:13.540 --> 00:20:18.190\nAnd it'll look across, and there\nare none of those that are like that, or\n\n367\n00:20:18.190 --> 00:20:19.172\nnot user root.\n\n368\n00:20:19.172 --> 00:20:22.076\nAnd now it jumps through and\nit finds file1.text again.\n\n369\n00:20:22.076 --> 00:20:26.237\nSo being able to override that\nbehavior is a pretty handy thing.\n\n370\n00:20:26.237 --> 00:20:28.128\n&gt;&gt; And Don, we're running short on time.\n\n371\n00:20:28.128 --> 00:20:28.921\nDo you wanna get into grep?\n\n372\n00:20:28.921 --> 00:20:32.336\n&gt;&gt; Grep is a great utility, so\nlet's cover here real quick.\n\n373\n00:20:32.336 --> 00:20:35.448\nWe're actually gonna cover grep way more\nwhen we get into regular expressions.\n\n374\n00:20:35.448 --> 00:20:37.881\n&gt;&gt; Okay.\n&gt;&gt; So grep is actually short for\n\n375\n00:20:37.881 --> 00:20:41.808\nthe regular expression,\nthat's the rep part of grep.\n\n376\n00:20:41.808 --> 00:20:45.992\nGrep lets us search for files,\nnot just based on filename though.\n\n377\n00:20:45.992 --> 00:20:48.094\nWe can actually search the file contents.\n\n378\n00:20:48.094 --> 00:20:49.382\n&gt;&gt; You go look inside a file.\n\n379\n00:20:49.382 --> 00:20:51.558\nFind something specific inside a file.\n\n380\n00:20:51.558 --> 00:20:53.469\n&gt;&gt; Yes, and I find that I have\nused more often than not,\n\n381\n00:20:53.469 --> 00:20:54.824\ncuz I can't remember the filename.\n\n382\n00:20:54.824 --> 00:20:56.272\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n383\n00:20:56.272 --> 00:20:57.528\n&gt;&gt; It's hard to find a file when you can't\n\n384\n00:20:57.528 --> 00:20:58.880\nremember what it's called.\n\n385\n00:20:58.880 --> 00:21:00.370\nBut I can search for the contents, and\n\n386\n00:21:00.370 --> 00:21:05.030\nI could say show me any file\nthat contains this word.\n\n387\n00:21:05.030 --> 00:21:08.860\nAnd it'll look and it'll return it, so\nthat's another really handy one to use.\n\n388\n00:21:08.860 --> 00:21:10.958\nSo I'm gonna show you just\nthe most basic way to use grep.\n\n389\n00:21:10.958 --> 00:21:13.012\nUnderstand that it is insanely powerful.\n\n390\n00:21:13.012 --> 00:21:15.879\nWe'll keep it real simple here, so we can\nfit it in before the end of the episode.\n\n391\n00:21:15.879 --> 00:21:17.994\n&gt;&gt; Okay.\n&gt;&gt; So the way grep works,\n\n392\n00:21:17.994 --> 00:21:19.907\nif you type grep, right?\n\n393\n00:21:19.907 --> 00:21:22.253\nThat's the command utility\nthat we're gonna run.\n\n394\n00:21:22.253 --> 00:21:25.854\nAnd then you tell it a string\nthat you wanna look for, okay?\n\n395\n00:21:25.854 --> 00:21:29.068\nSo I'm gonna look for\nthe word Crane, okay?\n\n396\n00:21:29.068 --> 00:21:30.790\nSo I'm looking for the word Crane.\n\n397\n00:21:30.790 --> 00:21:32.251\nAnd Crane is a last name, right?\n\n398\n00:21:32.251 --> 00:21:35.258\nIn an earlier episode, I was working\nwith the Legend of Sleepy Hollow and-\n\n399\n00:21:35.258 --> 00:21:36.411\n&gt;&gt; And we changed it to Zach Crane.\n\n400\n00:21:36.411 --> 00:21:37.556\n&gt;&gt; And we changed it to Zach Crane.\n\n401\n00:21:37.556 --> 00:21:39.748\nNow I can't remember if I saved that or\nnot.\n\n402\n00:21:39.748 --> 00:21:44.288\nSo I don't know if the file is going to\nbe Zed Crane, or Ichabod Crane, or what?\n\n403\n00:21:44.288 --> 00:21:45.383\nSo I'm just going to search for Crane.\n\n404\n00:21:45.383 --> 00:21:47.516\nBut because it's a last name,\nthe C is capitalized.\n\n405\n00:21:47.516 --> 00:21:50.720\nSo I need to search for\ncapitalized, it's case sensitive.\n\n406\n00:21:50.720 --> 00:21:53.940\nIf I wanna search not case sensitive,\nI could say -i.\n\n407\n00:21:53.940 --> 00:21:56.978\nBut maybe they mentioned a bird\ncrane somewhere in there,\n\n408\n00:21:56.978 --> 00:21:58.468\nthat would be a lowercase c.\n\n409\n00:21:58.468 --> 00:22:01.276\nSo I don't want to do that, but-\n&gt;&gt; The great Cranes of\n\n410\n00:22:01.276 --> 00:22:02.167\nthe Eastern Europes.\n\n411\n00:22:02.167 --> 00:22:04.009\n&gt;&gt; [LAUGH]\n&gt;&gt; That's right.\n\n412\n00:22:04.009 --> 00:22:06.343\nThe flight speed of an unladen swallow.\n\n413\n00:22:06.343 --> 00:22:08.034\n&gt;&gt; [LAUGH] Unladen swallow.\n\n414\n00:22:08.034 --> 00:22:11.265\n&gt;&gt; [LAUGH] Find all sorts of things, so\njust remember -i is case insensitive.\n\n415\n00:22:11.265 --> 00:22:16.580\nBut I'm gonna search for Crane, and\nI'm gonna tell it where I wanna look.\n\n416\n00:22:16.580 --> 00:22:19.357\nAnd l am gonna try to look\nin my documents folder.\n\n417\n00:22:19.357 --> 00:22:22.920\nSo look in my documents folder for\nanything containing Crane.\n\n418\n00:22:22.920 --> 00:22:25.131\nAnd it's gonna look in oops, there we go.\n\n419\n00:22:25.131 --> 00:22:28.398\nAnd sorry,\nl need to try to look in all my files.\n\n420\n00:22:28.398 --> 00:22:31.410\nSo the directory followed by asterisk,\nand it's gonna look and\n\n421\n00:22:31.410 --> 00:22:33.319\nnot only does it find it tell me the file.\n\n422\n00:22:33.319 --> 00:22:37.507\nIt finds every instance and surprisingly\nenough in the story, it looks like it\n\n423\n00:22:37.507 --> 00:22:41.133\ncould find Cranes last name is all\nl mentioned, nine and ten times.\n\n424\n00:22:41.133 --> 00:22:44.407\nAnd here they are, and I can see that\nwe didn't rename him to Zach, or\n\n425\n00:22:44.407 --> 00:22:46.451\nI didn't save it, so he is still Ichabod.\n\n426\n00:22:46.451 --> 00:22:48.347\n&gt;&gt; Still Ichabod.\n&gt;&gt; And so there we've got it.\n\n427\n00:22:48.347 --> 00:22:50.812\nIf I had made that case insensitive,\n\n428\n00:22:50.812 --> 00:22:54.241\nlet me do the -i to go case\ninsensitive on that one.\n\n429\n00:22:54.241 --> 00:22:58.043\nNow it does a search, and\nI guess there's no crane with lowercase c.\n\n430\n00:22:58.043 --> 00:22:59.938\nBut if there were, we'd find it.\n\n431\n00:22:59.938 --> 00:23:02.490\nThat's really handy with regular text,\nwhere there's capital and\n\n432\n00:23:02.490 --> 00:23:03.291\nlowercase letters.\n\n433\n00:23:03.291 --> 00:23:06.541\nIf you're doing with config files, they're\nalmost always entirely lowercase, so\n\n434\n00:23:06.541 --> 00:23:07.543\nwe don't worry about it.\n\n435\n00:23:07.543 --> 00:23:12.354\nBut here we're searching all the files in\nthe documents folder cuz there are other\n\n436\n00:23:12.354 --> 00:23:13.758\nfiles in here, right?\n\n437\n00:23:13.758 --> 00:23:15.297\nAnd just returning the one that has that.\n\n438\n00:23:15.297 --> 00:23:18.506\nIf I take a look at one\nof these other files.\n\n439\n00:23:18.506 --> 00:23:20.026\nWhat's in file.txt?\n\n440\n00:23:20.026 --> 00:23:23.220\nAll right, so I'm gonna search for\nthe word changes, right?\n\n441\n00:23:23.220 --> 00:23:27.662\nAnd so I'll grep for the word changes,\nI'll do it case insensitive.\n\n442\n00:23:27.662 --> 00:23:33.144\nAnd when I run that search,\nI can find that file.text has it.\n\n443\n00:23:33.144 --> 00:23:36.413\nAnd the legend of Sleepy Hollow\nhas the word changes, and\n\n444\n00:23:36.413 --> 00:23:40.788\nit shows me that specific lines in those\nfiles, so I can quickly find those.\n\n445\n00:23:40.788 --> 00:23:43.337\nAnd here,\nI knew they were in my documents folder.\n\n446\n00:23:43.337 --> 00:23:47.243\nIf I don't know where they are I can\nactually search based on the roots of\n\n447\n00:23:47.243 --> 00:23:48.556\nthe computer, right?\n\n448\n00:23:48.556 --> 00:23:51.180\nSo I can go like that, all right?\n\n449\n00:23:51.180 --> 00:23:54.135\nBut by default grep only\nlooks in that folder, so\n\n450\n00:23:54.135 --> 00:23:57.402\nI'd need to add a little bit more to it,\nif I had a -r.\n\n451\n00:23:57.402 --> 00:23:59.916\nDash R says, make it recursive.\n\n452\n00:23:59.916 --> 00:24:02.710\nNow I'm gonna search, not just the roof,\nbut everything under it.\n\n453\n00:24:02.710 --> 00:24:05.740\nThis would search my\nentire file hierarchy.\n\n454\n00:24:05.740 --> 00:24:07.880\nAnd that search'll take a little while.\n\n455\n00:24:07.880 --> 00:24:10.750\nAnd I might get a ton\nof results out of it.\n\n456\n00:24:10.750 --> 00:24:16.830\nSo, you'll usually wanna redirect that\ninto a file so that you can go in and\n\n457\n00:24:16.830 --> 00:24:19.520\nsearch within that file cuz otherwise\non the screen you'll get a lot of data.\n\n458\n00:24:19.520 --> 00:24:22.810\nBut if I go and do that search, it's gonna\nstart searching across the hard drive and\n\n459\n00:24:22.810 --> 00:24:27.120\nyou'll find all sorts of stuff\nincluding even binary data and\n\n460\n00:24:27.120 --> 00:24:28.800\nsearches inside of those.\n\n461\n00:24:28.800 --> 00:24:31.110\nSo some of these results\nwill be meaningful.\n\n462\n00:24:31.110 --> 00:24:32.490\nSee, this is all one line.\n\n463\n00:24:32.490 --> 00:24:35.170\nWhen you search source code,\nit's a real problem.\n\n464\n00:24:35.170 --> 00:24:35.920\nThe word changes.\n\n465\n00:24:35.920 --> 00:24:36.520\nIt was highlighted.\n\n466\n00:24:36.520 --> 00:24:37.180\nThere it is.\n\n467\n00:24:37.180 --> 00:24:38.310\nSo there's the word changes.\n\n468\n00:24:38.310 --> 00:24:40.975\nIn fact, it's not even changes,\nit's change, success.\n\n469\n00:24:40.975 --> 00:24:43.510\n&gt;&gt; Uh-hmm.\n&gt;&gt; But because we were case insensitive,\n\n470\n00:24:43.510 --> 00:24:44.680\nit found that.\n\n471\n00:24:44.680 --> 00:24:47.770\nBut it can return just a huge\namount of data like that.\n\n472\n00:24:47.770 --> 00:24:50.160\nSo you've got to be careful\nabout where you search and\n\n473\n00:24:50.160 --> 00:24:53.590\nlimit it to the areas where you kind\nof think that file is going to be.\n\n474\n00:24:55.550 --> 00:24:58.470\nHere, we could also exclude certain texts.\n\n475\n00:24:58.470 --> 00:25:02.060\nIf I wanted to search for one particular\nword but exclude something else,\n\n476\n00:25:02.060 --> 00:25:08.780\nI might come in and add a, like a dash\nv and then what I want to exclude.\n\n477\n00:25:08.780 --> 00:25:12.270\nSo I might be looking for files that\ndon't contain a certain string and\n\n478\n00:25:12.270 --> 00:25:13.670\nI could punch that in.\n\n479\n00:25:13.670 --> 00:25:18.210\nAnd then, you might notice that\nwhen I did each of these searches,\n\n480\n00:25:18.210 --> 00:25:21.670\nit's kind of highlighting the word\nI was searching for in red.\n\n481\n00:25:21.670 --> 00:25:23.880\nThat might not be on,\non your distro by default.\n\n482\n00:25:23.880 --> 00:25:28.277\nThere's actually another little command\nline modifier which is dash dash color,\n\n483\n00:25:28.277 --> 00:25:29.290\nall right?\n\n484\n00:25:29.290 --> 00:25:31.950\nAnd in Ubuntu they turn\nthat on by default.\n\n485\n00:25:31.950 --> 00:25:32.920\nIn your distro, they might not.\n\n486\n00:25:32.920 --> 00:25:35.840\nSo if you want it to be colorized like\nthat, you can do dash dash color.\n\n487\n00:25:35.840 --> 00:25:39.360\nThere's an alias that's\ncreated in Ubuntu for Grep.\n\n488\n00:25:39.360 --> 00:25:44.960\nAnd you'll see, right here where\nGrep has that dash dash equals auto.\n\n489\n00:25:44.960 --> 00:25:46.750\nSo that's been set up form me.\n\n490\n00:25:46.750 --> 00:25:47.500\nI didn't do that.\n\n491\n00:25:47.500 --> 00:25:48.430\nThat's part of the Distro.\n\n492\n00:25:48.430 --> 00:25:50.190\nSo just be aware of that one, too.\n\n493\n00:25:50.190 --> 00:25:53.320\nBut Grep is really powerful if\nwe're looking Inside the file.\n\n494\n00:25:53.320 --> 00:25:58.120\nWe had locate, for looking across\nour whole hard drive and Grep for\n\n495\n00:25:58.120 --> 00:26:01.720\nlooking inside of a single file or\neven a group of files.\n\n496\n00:26:01.720 --> 00:26:04.585\n&gt;&gt; Well, becoming a Linux power user,\nfinding files.\n\n497\n00:26:04.585 --> 00:26:06.125\nAnything else you'd like\nto add before we close out?\n\n498\n00:26:06.125 --> 00:26:10.415\n&gt;&gt; All right, just remember that locate\nand find are both very powerful.\n\n499\n00:26:10.415 --> 00:26:12.835\nLocate is faster if your\ndatabase is up-to-date.\n\n500\n00:26:12.835 --> 00:26:15.015\nFind will find everything but its slower.\n\n501\n00:26:15.015 --> 00:26:17.035\nSo that's how you pick\nbetween those two commands.\n\n502\n00:26:17.035 --> 00:26:18.395\nThey are very standard.\n\n503\n00:26:18.395 --> 00:26:21.795\nI haven't encountered a Unix distro that\ndidn't have both commands in a long time.\n\n504\n00:26:21.795 --> 00:26:25.020\nSo definitely make use of them be\ncareful about that database though.\n\n505\n00:26:25.020 --> 00:26:28.070\nAnd then remember that Grep is even\nmore powerful than what I showed you.\n\n506\n00:26:28.070 --> 00:26:31.268\nI just showed you the most\nbasic way to use Grep.\n\n507\n00:26:31.268 --> 00:26:33.288\nWe will take a look at it again in a later\nin another episode and go into and\n\n508\n00:26:33.288 --> 00:26:34.500\ngo into some of the more advanced stuff.\n\n509\n00:26:34.500 --> 00:26:35.870\nIt is an incredibly powerful utility.\n\n510\n00:26:35.870 --> 00:26:37.620\n&gt;&gt; And\nof course there will be show notes too.\n\n511\n00:26:37.620 --> 00:26:40.770\nThank you for watching every single\nepisode of becoming a Linux Power User.\n\n512\n00:26:40.770 --> 00:26:42.780\nYou will be glad you did, watch them all.\n\n513\n00:26:42.780 --> 00:26:43.819\n&gt;&gt; Ten time, Dee.\n\n514\n00:26:43.819 --> 00:26:46.784\n&gt;&gt; [LAUGH]\n&gt;&gt; And thank you for watching ITPro.TV,\n\n515\n00:26:46.784 --> 00:26:49.500\nremember a good IT Pro is always learning.\n\n516\n00:26:49.500 --> 00:26:50.550\nI'm Zach Memos.\n\n517\n00:26:50.550 --> 00:26:51.420\n&gt;&gt; And I'm Dan Pezet.\n\n518\n00:26:51.420 --> 00:26:53.286\n&gt;&gt; And we will see you again very soon.\n\n519\n00:26:53.286 --> 00:27:00.566\n[MUSIC]\n\n520\n00:27:00.566 --> 00:27:03.457\n&gt;&gt; Thank you for watching ITPro.TV\n\n",
          "vimeoId": "222512898"
        }
      ],
      "title": "Working with Text Files"
    },
    {
      "episodes": [
        {
          "description": "Don and Zach discuss what a ‘Process’ is, what is meant by managing the processes, monitoring processes, using UNIX-BSD-GNU, monitoring processes in real time, what ‘Top’ is, running ‘Jobs,’ how to kill a process, changing a process priority, sorting by CPU usage, sorting by MEM usage, and a primer to what ‘Foreground’ & ‘Background’ processes are.",
          "length": "1564",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-1-managing_processes-062117-PGM.00_28_48_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-1-managing_processes-062117-PGM.00_28_48_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-1-managing_processes-062117-PGM.00_28_48_25.Still001-sm.jpg",
          "title": "Managing Processes",
          "transcript": "WEBVTT\n\n1\n00:00:00.240 --> 00:00:06.452\nWelcome to ITProTV, I'm your host,\nDon Pezet [CROSSTALK].\n\n2\n00:00:06.452 --> 00:00:08.275\n[MUSIC]\n\n3\n00:00:08.275 --> 00:00:12.240\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.240 --> 00:00:12.883\n&gt;&gt; Hello again.\n\n5\n00:00:12.883 --> 00:00:16.735\nThank you for choosing ITProTV,\nwhere we help you learn wherever you go.\n\n6\n00:00:16.735 --> 00:00:20.961\nI'm your host Zack Memos as we continue\non with becoming a Linux power user,\n\n7\n00:00:20.961 --> 00:00:23.604\nand we're gonna be managing\nsome processes and\n\n8\n00:00:23.604 --> 00:00:27.654\nthe person person giving us all that\ninformation is our ITPro Don Pezet.\n\n9\n00:00:27.654 --> 00:00:28.549\nDon, good to see you again.\n\n10\n00:00:28.549 --> 00:00:29.175\nHow are you?\n\n11\n00:00:29.175 --> 00:00:32.709\n&gt;&gt; I am doing great, Zackary, and\ndive into the world of processes and\n\n12\n00:00:32.709 --> 00:00:36.739\nif you've worked with any Linux systems\nfor any amount of time, you know that\n\n13\n00:00:36.739 --> 00:00:40.780\nyou start running out programs and a lot\nof things are going on in your system.\n\n14\n00:00:40.780 --> 00:00:43.017\nThose are all processes and from time\nto time we've got to get in there and\n\n15\n00:00:43.017 --> 00:00:45.034\nwork with them, manage them,\nmanipulate them and at a minimum,\n\n16\n00:00:45.034 --> 00:00:46.000\nstart and stop them.\n\n17\n00:00:46.000 --> 00:00:48.510\nSo those are all different things\nthat we've got to be aware of.\n\n18\n00:00:48.510 --> 00:00:50.620\nAnd so right here in this episode\nwe're gonna take some time to look\n\n19\n00:00:50.620 --> 00:00:53.090\nat those processes and\nsee what we can do to manage that.\n\n20\n00:00:53.090 --> 00:00:54.290\n&gt;&gt; Okay, so time.\n\n21\n00:00:54.290 --> 00:00:57.270\nWhat do you mean by\nmanaging the processes?\n\n22\n00:00:57.270 --> 00:00:59.343\n&gt;&gt; [LAUGH] All right-\n&gt;&gt; Why would we have to manage\n\n23\n00:00:59.343 --> 00:00:59.981\nthe processes?\n\n24\n00:00:59.981 --> 00:01:01.150\nOr massage them, so to speak.\n\n25\n00:01:01.150 --> 00:01:03.650\n&gt;&gt; Okay, so there's a few different\nthings that I mean, right?\n\n26\n00:01:03.650 --> 00:01:04.818\nLet me clarify a little bit.\n\n27\n00:01:04.818 --> 00:01:06.590\nFirst off, monitoring.\n\n28\n00:01:06.590 --> 00:01:08.230\nWe need to monitor the processes.\n\n29\n00:01:08.230 --> 00:01:11.370\nIf you ever sit there and\nyou're like my computer is so slow.\n\n30\n00:01:11.370 --> 00:01:13.930\nWell, is your computer physically slow?\n\n31\n00:01:13.930 --> 00:01:14.820\nProbably not.\n\n32\n00:01:14.820 --> 00:01:17.400\nThere's probably some processes that\nare in the background that are doing\n\n33\n00:01:17.400 --> 00:01:19.670\nweird stuff and maybe it's perfectly okay.\n\n34\n00:01:19.670 --> 00:01:20.770\nHey, you're doing something.\n\n35\n00:01:20.770 --> 00:01:23.882\nYou're sequencing the human\ngenome on your laptop.\n\n36\n00:01:23.882 --> 00:01:24.460\n&gt;&gt; [LAUGH].\nMm-hm.\n\n37\n00:01:24.460 --> 00:01:25.620\n&gt;&gt; Yeah, it's gonna run slowly.\n\n38\n00:01:25.620 --> 00:01:26.384\n&gt;&gt; I do that every day.\n\n39\n00:01:26.384 --> 00:01:27.269\n&gt;&gt; [LAUGH] So do I.\n\n40\n00:01:27.269 --> 00:01:28.000\nMe too.\n\n41\n00:01:28.000 --> 00:01:28.750\nIt's a hobby.\n&gt;&gt; [LAUGH]\n\n42\n00:01:28.750 --> 00:01:31.390\n&gt;&gt; But so you need to monitor,\n\n43\n00:01:31.390 --> 00:01:32.130\nyou need to be able to look and\n\n44\n00:01:32.130 --> 00:01:36.380\ndetermine which process is it that's doing\nthat or is something actually running.\n\n45\n00:01:36.380 --> 00:01:38.515\nHave you ever run a program and\nit's frozen?\n\n46\n00:01:38.515 --> 00:01:39.304\n&gt;&gt; Mm-hm.\n\n47\n00:01:39.304 --> 00:01:42.866\n&gt;&gt; Well, is it actually frozen or\nis it just really busy?\n\n48\n00:01:42.866 --> 00:01:46.278\nAnd could you just wait it out until it's\nfinished, or are you going to terminate it\n\n49\n00:01:46.278 --> 00:01:48.990\nand potentially lose your work\nwhen you should have just waited?\n\n50\n00:01:48.990 --> 00:01:52.100\nThat's monitoring,\nwe need to monitor those processes.\n\n51\n00:01:52.100 --> 00:01:54.800\nWe also need to be able to\ndo things like stop them,\n\n52\n00:01:54.800 --> 00:01:58.250\nkill them off if they're not running\nright, if a process is locked up.\n\n53\n00:01:58.250 --> 00:01:59.650\nYou could reboot your whole computer,\nright?\n\n54\n00:01:59.650 --> 00:02:01.450\nThat's what we call the Windows solution.\n\n55\n00:02:01.450 --> 00:02:06.350\nBut in the Linux world we typically\ndon't have to reboot because,\n\n56\n00:02:06.350 --> 00:02:08.610\nthe Linux kernel is incredibly stable.\n\n57\n00:02:08.610 --> 00:02:12.780\nLinux software crashes left and right,\nit is no, it's not like it's magic right?\n\n58\n00:02:12.780 --> 00:02:16.010\nBut the kernel itself is insanely stable,\nand\n\n59\n00:02:16.010 --> 00:02:18.430\nso it's rare that we actually\nneed to reboot because of that.\n\n60\n00:02:18.430 --> 00:02:22.920\nSo we can usually just terminate a\nprocess, if we know which one to look for.\n\n61\n00:02:22.920 --> 00:02:25.920\nSo those are some examples of what we\nneed to do when it comes to managing.\n\n62\n00:02:25.920 --> 00:02:29.290\nWe also might need to prioritize and say\nthis process is more important than this\n\n63\n00:02:29.290 --> 00:02:31.450\nother process, and\nget in there and get involved.\n\n64\n00:02:31.450 --> 00:02:33.980\nThe computer doesn't know that,\nit treats everything equally.\n\n65\n00:02:33.980 --> 00:02:34.730\nWe might need to get involved.\n\n66\n00:02:34.730 --> 00:02:35.230\nSo those are all\n\n",
          "vimeoId": "222679811"
        },
        {
          "description": "Don and Zach cover more about Foreground & Background processes, different commands such as ‘fg’-‘nano’-‘ctrl+z’-’bg’-plus adding an ‘&’ to a command, do paused processes use resources, what ‘nice’ & ‘renice’ are, and various killing processes.",
          "length": "1412",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-2-managing_processes_pt2-062117-PGM.00_24_01_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-2-managing_processes_pt2-062117-PGM.00_24_01_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-4-1-2-managing_processes_pt2-062117-PGM.00_24_01_22.Still001-sm.jpg",
          "title": "Managing Processes Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.310 --> 00:00:03.084\nWelcome to ITProTV,\n\n2\n00:00:03.084 --> 00:00:08.330\nI'm you're host Don Pezet [CROSSTALK].\n\n3\n00:00:08.330 --> 00:00:10.660\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.300 --> 00:00:13.420\n&gt;&gt; Hello, again and thank you for\n\n5\n00:00:13.420 --> 00:00:16.895\nwatching ITProTV,\nhelping you learn wherever you go.\n\n6\n00:00:16.895 --> 00:00:21.430\nI'm your host, Zack Memos, as we continue\non with becoming a Linux power user.\n\n7\n00:00:21.430 --> 00:00:22.520\nAnd we're managing processes.\n\n8\n00:00:22.520 --> 00:00:26.440\nThis is managing processes part two, there\nis a part one, make sure you see that.\n\n9\n00:00:26.440 --> 00:00:29.660\nThe person giving us all this great\ninformation is our IT pro, Don Pezet.\n\n10\n00:00:29.660 --> 00:00:31.430\nDon, good to see you again, how are you?\n\n11\n00:00:31.430 --> 00:00:32.520\n&gt;&gt; Hey, I am doing great, Zack.\n\n12\n00:00:32.520 --> 00:00:35.030\nGlad to be back in the studio and\nready to continue on with part two.\n\n13\n00:00:35.030 --> 00:00:36.022\nIf you watched part one,\n\n14\n00:00:36.022 --> 00:00:39.002\nyou know I rambled on way too long\nabout just monitoring processes.\n\n15\n00:00:39.002 --> 00:00:39.842\n&gt;&gt; It was great.\n\n16\n00:00:39.842 --> 00:00:43.570\n&gt;&gt; It's important stuff, but we didn't\nactually do anything to those processes.\n\n17\n00:00:43.570 --> 00:00:46.460\nAnd so, in this episode, we're gonna take\na look at some of the stuff we can do to\n\n18\n00:00:46.460 --> 00:00:49.160\nmanipulate those processes and\nchange how they're running and\n\n19\n00:00:49.160 --> 00:00:51.690\nget them to behave the way\nthat we want them to behave.\n\n20\n00:00:51.690 --> 00:00:53.700\nSo, all in all,\nit'll be a pretty exciting episode.\n\n21\n00:00:53.700 --> 00:00:56.233\n&gt;&gt; Yes it will be.\nAnd I think we ended up talking about\n\n22\n00:00:56.233 --> 00:00:59.573\nbackground and\nforeground processes that are running.\n\n23\n00:00:59.573 --> 00:01:02.950\nThings we see things, we don't see, how\ndo we monitor them, how do we find them?\n\n24\n00:01:02.950 --> 00:01:03.740\n&gt;&gt; Absolutely, yeah.\n\n25\n00:01:03.740 --> 00:01:07.400\nAnd one of the examples that I was giving\nin that last episode was running a long\n\n26\n00:01:07.400 --> 00:01:09.490\nrunning process like md5sum.\n\n27\n00:01:09.490 --> 00:01:13.930\nThat it'll take hours to calculate an\nmd5sum of a hard drive and I let that run.\n\n28\n00:01:13.930 --> 00:01:18.010\nAnd when you run a program like that,\nit effectively locks your terminals, so\n\n29\n00:01:18.010 --> 00:01:19.810\nyou can't do anything else with it.\n\n30\n00:01:19.810 --> 00:01:23.650\nWell, you can take that program and\nstick it in the background.\n\n31\n00:01:23.650 --> 00:01:25.220\nYour system is doing that all the time,\nright?\n\n32\n00:01:25.220 --> 00:01:26.740\nI mean that's really what we saw here.\n\n33\n00:01:26.740 --> 00:01:27.810\nIf I go to my terminal and\n\n34\n00:01:27.810 --> 00:01:32.160\nI do that ps -ef that we were\nrunning in the last episode.\n\n35\n00:01:32.160 --> 00:01:34.210\nAll of these are programs,\n\n36\n00:01:34.210 --> 00:01:37.790\nthey're all processes that\nare running in the background.\n\n37\n00:01:37.790 --> 00:01:39.405\nNow, many of these are applications,\n\n38\n00:01:39.405 --> 00:01:41.780\nzpplications that I may\nhave even run myself.\n\n39\n00:01:41.780 --> 00:01:44.750\nA lot of them are ones\nthat the system ran.\n\n40\n00:01:44.750 --> 00:01:49.020\nThat it ran for me and will stay\nrunning even if I log out, right?\n\n41\n00:01:49.020 --> 00:01:52.090\nA program that runs even if you log out,\nthat's called a demon.\n\n42\n00:01:52.090 --> 00:01:54.850\nSome people call it a service but\nin the Unix world, it's called a demon.\n\n43\n00:01:54.850 --> 00:01:58.828\nAnd so you'll see a number of those\nlike I just scrolled by one, but,\n\n44\n00:01:58.828 --> 00:02:00.280\nwell there's Systemd.\n\n45\n00:02:00.280 --> 00:02:04.790\nSystemd is one of the bigger demons,\none of the first ones that runs, and\n\n46\n00:02:04.790 --> 00:02:07.650\na lot of daemons will end with the letter\nd to let you know that's what it is.\n\n47\n00:02:07.650 --> 00:02:09.580\n&gt;&gt; Interesting they chose\nthe name demon [LAUGH].\n\n48\n00:02:09.580 --> 00:02:11.367\n&gt;&gt; Yeah, well, everybody's got\ntheir demons, right [LAUGH]?\n\n49\n00:02:11.367 --> 00:02:12.760\n&gt;&gt; That's right, they do, good.\n\n50\n00:02:12.760 --> 00:02:17.200\n&gt;&gt; [LAUGH] So anyhow, these are all things\nthat are running in the background, right?\n\n51\n00:02:17.200 --> 00:02:21.320\nBut when I run something it's\nrunning in the foreground, right?\n\n52\n00:02:21.320 --> 00:02:26.690\nIf I run MC and launch the Midnight\nCommander, I'm in the Midnight Commander,\n\n53\n00:02:26.690 --> 00:02:31.370\nand this terminal is now locked\nrunning Midnight Commander activity.\n\n54\n00:02:31.370 --> 00:02:34.410\nOr if I go into Nano or\nwhen I did that md5sum, right?\n\n55\n00:02:34.410 --> 00:02:40.470\nIf I do md5sum /dev/sda1,\nthat's gonna run.\n\n56\n00:02:40.470 --> 00:02:42.660\nDarn it, I did that in the last\nepisode too, let me sudo that,\n\n57\n00:02:42.660 --> 00:02:43.990\nthere we go that's gonna run.\n\n58\n00:02:43.990 --> 00:02:46.440\nAnd it's going to lock up my terminal now.\n\n59\n00:02:46.440 --> 00:02:49.580\nI can't do anything else in this\nterminal until that command is done.\n\n60\n00:02:49.580 --> 00:02:51.525\nWhich it'll finish, in about two hours.\n\n61\n00:02:51.525 --> 00:02:53.942\n&gt;&gt; [LAUGH]\n&gt;&gt; Well unless we want this to be\n\n62\n00:02:53.942 --> 00:02:57.047\na marathon show,\nwe're gonna need some other solution-\n\n63\n00:02:57.047 --> 00:02:58.138\n&gt;&gt; We're going to turn into a movie of\n\n64\n00:02:58.138 --> 00:02:59.035\nthe week, if you'd like.\n\n65\n00:02:59.035 --> 00:03:00.910\n&gt;&gt; [LAUGH] We could certainly do that.\n\n66\n00:03:00.910 --> 00:03:03.860\nSo I got two options with this one.\n\n67\n00:03:03.860 --> 00:03:07.615\nThere is the method that's\nprobably easiest for\n\n68\n00:03:07.615 --> 00:03:10.790\nputting jobs in the background which\nis called the job management system.\n\n69\n00:03:10.790 --> 00:03:13.410\nAnd then the other method is\nactually stick the process in\n\n70\n00:03:13.410 --> 00:03:15.240\nthe background which is what\nyour operating system does.\n\n71\n00:03:15.240 --> 00:03:18.360\nSo let me show both ways I can\nget this thing out of my way.\n\n72\n00:03:18.360 --> 00:03:21.765\nWell, I guess I should talk about\nthe path of least resistance which\n\n73\n00:03:21.765 --> 00:03:23.568\nis okay it locked up this terminal.\n\n74\n00:03:23.568 --> 00:03:26.933\nSo I'll just open up a new terminal and\nI'll run my commands here and\n\n75\n00:03:26.933 --> 00:03:29.187\nthen let the other one\nstay in the back [LAUGH].\n\n76\n00:03:29.187 --> 00:03:31.330\nThat's fine, right, you can do that.\n\n77\n00:03:32.360 --> 00:03:35.330\nIt is a bit problematic though,\nbecause if I log out it's gonna\n\n78\n00:03:35.330 --> 00:03:38.020\nclose that terminal and\nwhat's gonna happen to the command I run?\n\n79\n00:03:38.020 --> 00:03:39.360\nIt's gonna close, right?\n\n80\n00:03:39.360 --> 00:03:40.320\nSo it won't survive a log out.\n\n81\n00:03:40.320 --> 00:03:44.430\nSo this is a easy solution,\nbut not a long term one, okay?\n\n82\n00:03:44.430 --> 00:03:48.380\nSo instead what you can do\nis is you can run a process.\n\n83\n00:03:48.380 --> 00:03:54.620\nAnd then, if you hit Ctrl+Z on your\nkeyboard, Ctrl+Z, see what happened?\n\n84\n00:03:54.620 --> 00:03:59.860\nAnd it says the job is stopped and then\nI'm back in my terminal, I can work, okay?\n\n85\n00:03:59.860 --> 00:04:02.050\nWell, what happened to the job?\n\n86\n00:04:02.050 --> 00:04:02.840\nWhere'd it go?\n\n87\n00:04:02.840 --> 00:04:06.930\nWell, it paused it, and\nit stuck it in the background, okay?\n\n88\n00:04:06.930 --> 00:04:10.400\nIf I run the jobs command,\nI can take a look, and there it is.\n\n89\n00:04:10.400 --> 00:04:12.630\nIt's waiting for me,\nI can come right back to it, and\n\n90\n00:04:12.630 --> 00:04:14.640\nI can launch Midnight Commander.\n\n91\n00:04:14.640 --> 00:04:17.780\nIn Midnight Commander I hit Ctrl+Z,\nand now it stopped.\n\n92\n00:04:17.780 --> 00:04:22.000\nI can launch Nano and start editing\na file, and Ctrl+Z and now it's running.\n\n93\n00:04:22.000 --> 00:04:26.690\nAnd if I run jobs, I can see where I've\ngot the md5sum, Midnight Commander,\n\n94\n00:04:26.690 --> 00:04:28.690\nand Nano all running in the background.\n\n95\n00:04:30.110 --> 00:04:32.830\nExcept they're all stopped, okay.\n\n96\n00:04:32.830 --> 00:04:34.780\nThey're stopped,\nwhich means they're not actually running,\n\n97\n00:04:34.780 --> 00:04:38.160\nthe md5sum is not being\ncalculated right now.\n\n98\n00:04:38.160 --> 00:04:41.920\nIf I resume that job then\nit'll be running again,\n\n99\n00:04:41.920 --> 00:04:46.950\nbut while it's back there it's kind\nof stuck and it's not moving forward.\n\n100\n00:04:46.950 --> 00:04:50.461\nAnd so\nthis is not really an ideal situation for\n\n101\n00:04:50.461 --> 00:04:53.760\nme because of the way that it is now.\n\n102\n00:04:53.760 --> 00:04:57.600\nI can pull this process back up,\nI can bring it back into\n\n103\n00:04:57.600 --> 00:05:02.210\nwhere I can use it again by\ntyping % followed by the number.\n\n104\n00:05:02.210 --> 00:05:07.940\nSo if I type %1, now I'm back into the\nmd5sum and now it's running again, right?\n\n105\n00:05:07.940 --> 00:05:10.260\nIt's running and\nthen I hit Ctrl+Z and it's gone.\n\n106\n00:05:10.260 --> 00:05:13.280\nAnd I can do %2 and\nI can jump into Midnight Commander, and\n\n107\n00:05:13.280 --> 00:05:15.870\nI'm back into Midnight Commander and\nI'm working again.\n\n108\n00:05:15.870 --> 00:05:17.930\nIt doesn't even realize that I was gone.\n\n109\n00:05:17.930 --> 00:05:21.110\nIt was paused the whole time,\nand it resumes it.\n\n110\n00:05:21.110 --> 00:05:24.910\nSo this is one way that we can\nstick jobs in the background.\n\n111\n00:05:24.910 --> 00:05:30.050\nBut when we do it this way, they're not\ncontinuing to run and so that's a problem.\n\n112\n00:05:30.050 --> 00:05:34.970\nAnd that makes this not the most useful\ntool for us, right, because of that.\n\n113\n00:05:34.970 --> 00:05:38.090\nNow going between Midnight Commander and\nNano, that's not a big deal, right?\n\n114\n00:05:38.090 --> 00:05:41.710\nThose are interactive applications and\nwhen I go and\n\n115\n00:05:41.710 --> 00:05:43.420\nrun one of them, I'm using it.\n\n116\n00:05:43.420 --> 00:05:45.860\nIf I put it in the background,\nI can't be typing in it anymore,\n\n117\n00:05:45.860 --> 00:05:47.930\nso I don't care if it pauses.\n\n118\n00:05:47.930 --> 00:05:52.080\nBut that md5sum,\nthat one I want to keep running, okay?\n\n119\n00:05:52.080 --> 00:05:55.250\nI want that one to keep running even\nwhen it goes in the background.\n\n120\n00:05:55.250 --> 00:05:59.900\nSo what I'm gonna is I'll pull it\nback up and I'm just gonna Ctrl+C and\n\n121\n00:05:59.900 --> 00:06:03.110\nbreak out of it, so now if I look\nI have got no more jobs running.\n\n122\n00:06:03.110 --> 00:06:05.820\nAnd this time, I wanna do it differently.\n\n123\n00:06:05.820 --> 00:06:09.560\nI wanna run that application,\nhave it go in the background, and\n\n124\n00:06:09.560 --> 00:06:11.040\nhave it keep running.\n\n125\n00:06:11.040 --> 00:06:14.668\nAnd there is actually more\nthan one way to do that.\n\n126\n00:06:14.668 --> 00:06:18.200\nYou'll see there's actually several\ndifferent commands that are available like\n\n127\n00:06:18.200 --> 00:06:19.500\nthe bg command.\n\n128\n00:06:19.500 --> 00:06:22.700\nAnd bg is short for background, okay?\n\n129\n00:06:22.700 --> 00:06:26.830\nI can take applications and\nput them in the background with bg.\n\n130\n00:06:26.830 --> 00:06:30.910\nAnd I can use fg to bring them\nback into the foreground again, so\n\n131\n00:06:30.910 --> 00:06:32.980\nbackground and foreground.\n\n132\n00:06:32.980 --> 00:06:37.870\nAn example would be to take\nsomething like the md5sum\n\n133\n00:06:40.060 --> 00:06:45.380\nand, whoops, if can type it right,\nhere I'll take that sum and run it.\n\n134\n00:06:45.380 --> 00:06:47.250\nI keep doing that [LAUGH].\n\n135\n00:06:47.250 --> 00:06:49.070\nThere we go, so I'm gonna run it.\n\n136\n00:06:49.070 --> 00:06:51.740\nI'm gonna Ctrl+Z to stick it\nin the background, right?\n\n137\n00:06:51.740 --> 00:06:53.170\nSo there it is, stopped.\n\n138\n00:06:53.170 --> 00:06:57.560\nAnd then I can say bg 1,\nand see what it did?\n\n139\n00:06:57.560 --> 00:06:59.690\nIt shows that it's running now and\n\n140\n00:06:59.690 --> 00:07:03.960\nif I take a look at jobs,\nit doesn't show as stopped any more, okay?\n\n141\n00:07:03.960 --> 00:07:07.020\nIf I were to take Midnight Commander,\nstick it in the background, and Nano,\n\n142\n00:07:07.020 --> 00:07:10.510\nstick it in the background and\nrun jobs, Midnight Commander and\n\n143\n00:07:10.510 --> 00:07:14.570\nNano are both stopped but\nmd5sum is running.\n\n144\n00:07:14.570 --> 00:07:18.070\nSo when I use Ctrl+Z, hide something\nin the background, I can then say bg\n\n145\n00:07:18.070 --> 00:07:22.830\nfollowed by the job number and\nnow it's actively running, okay?\n\n146\n00:07:22.830 --> 00:07:27.420\nNow if I knew I wanted to do that ahead of\ntime, I could have saved myself some time.\n\n147\n00:07:27.420 --> 00:07:31.920\nLook at the command,\nsee how it says sudo md5sum /dev/sda1,\n\n148\n00:07:31.920 --> 00:07:35.810\nthat's what I typed and\nthen this is &amp; on the end.\n\n149\n00:07:35.810 --> 00:07:38.710\nThe ampersand is what's telling it,\n\n150\n00:07:38.710 --> 00:07:42.910\nI want you to run when you're in\nthe background and not be stopped, okay?\n\n151\n00:07:42.910 --> 00:07:47.030\nNow, I can leave it like this, or\nI'm gonna go ahead and say fg 1,\n\n152\n00:07:47.030 --> 00:07:49.280\nwhich is gonna bring it\nback into the foreground.\n\n153\n00:07:49.280 --> 00:07:51.490\nThat's the same as me just typing % 1 and\npressing Enter, right?\n\n154\n00:07:51.490 --> 00:07:52.870\nSo fg 1, I bring it into the foreground.\n\n155\n00:07:52.870 --> 00:07:57.784\nAnd now from here, I can hit Ctrl+Z, and\nnow it's stopped if that's what I wanted,\n\n156\n00:07:57.784 --> 00:08:00.663\nor I can bring it back up and\nhit Ctrl+C to stop it.\n\n157\n00:08:00.663 --> 00:08:05.205\nNow if I wanna run it And have it just\ngo straight to the background and\n\n158\n00:08:05.205 --> 00:08:06.250\nkeep running.\n\n159\n00:08:06.250 --> 00:08:09.448\nI can run that same command,\nright here, and\n\n160\n00:08:09.448 --> 00:08:14.749\nif I just stick the ampersand at the end\nof it, that says run this program and\n\n161\n00:08:14.749 --> 00:08:19.440\nstick it in the background and\nkeep it running, just all at once.\n\n162\n00:08:19.440 --> 00:08:23.940\nSo now, when I hit that Ctrl+Z and\nthen jobs to find out the job number,\n\n163\n00:08:23.940 --> 00:08:26.540\nand then BG followed by the job\nnumber to get it running.\n\n164\n00:08:26.540 --> 00:08:29.360\nI save all that by just sticking\nan ampersand on the end,\n\n165\n00:08:29.360 --> 00:08:33.990\nand when I run it,\nnow I can do jobs, and there it is.\n\n166\n00:08:33.990 --> 00:08:37.630\nIt's in the background,\nand it's actively running.\n\n167\n00:08:37.630 --> 00:08:41.000\n&gt;&gt; So we have all these programs running\nin the background, or they're paused.\n\n168\n00:08:41.000 --> 00:08:43.860\nI'm guessing the programs running in\nthe background, they're using resources.\n\n169\n00:08:43.860 --> 00:08:46.920\nAre the paused programs in\nthe background also using resources?\n\n170\n00:08:46.920 --> 00:08:47.730\n&gt;&gt; Not really.\n\n171\n00:08:47.730 --> 00:08:49.160\nThey'll hold their memory, right?\n\n172\n00:08:49.160 --> 00:08:53.360\nSo they're holding RAM, but on the CPU\nside, they're paused, on the network side,\n\n173\n00:08:53.360 --> 00:08:56.000\nthey're paused, on the disk IO side,\nthey're paused.\n\n174\n00:08:56.000 --> 00:08:58.070\nBut what they're using in\nRAM is being held in RAM.\n\n175\n00:08:58.070 --> 00:09:01.587\nBecause when they resume, they're gonna\nexpect that stuff to be there, right?\n\n176\n00:09:01.587 --> 00:09:03.790\nSo they are consuming some resources,\nbut for\n\n177\n00:09:03.790 --> 00:09:08.000\nthe most part, they freed up the others,\nand that's kind of\n\n178\n00:09:08.000 --> 00:09:13.080\na nice thing about what's going on\nhere is that we kind of control that.\n\n179\n00:09:13.080 --> 00:09:18.290\nAnd if I have some process that's really\nconsuming things, I could stop it,\n\n180\n00:09:18.290 --> 00:09:20.410\nbut just pause it so\nI can resume it later,\n\n181\n00:09:20.410 --> 00:09:24.400\nand then pick it back up later on\nwhen maybe the system's not so busy.\n\n182\n00:09:24.400 --> 00:09:27.940\nThere's actually a few different\nways we can deal with that.\n\n183\n00:09:27.940 --> 00:09:31.750\nAt the end of the last episode,\nwe were taking a look at the top command.\n\n184\n00:09:31.750 --> 00:09:36.810\nAnd when I run top, I see all these\ndifferent processes that are running, and\n\n185\n00:09:36.810 --> 00:09:41.450\nI can see that md5sum\nright here consuming CPU.\n\n186\n00:09:41.450 --> 00:09:43.630\nAnd Zach had asked me a question.\n\n187\n00:09:43.630 --> 00:09:47.170\nHe said,\nare you able to reprioritize a process?\n\n188\n00:09:47.170 --> 00:09:49.455\nAnd I said, yeah, you can,\nyou can pick a process.\n\n189\n00:09:49.455 --> 00:09:53.710\nmd5sum here as process 4477,\nthat's the process id.\n\n190\n00:09:53.710 --> 00:09:56.517\nAnd I can hit the R button, and\n\n191\n00:09:56.517 --> 00:10:02.137\nwhen I hit R it says PID to renice,\ndefault is PID 4477.\n\n192\n00:10:02.137 --> 00:10:04.020\nThat just means whatever is at the top.\n\n193\n00:10:04.020 --> 00:10:08.395\nBut I can type a process number in\nhere and it will renice it, okay?\n\n194\n00:10:08.395 --> 00:10:11.361\nRenice-\n&gt;&gt; Make it much nicer than it was before.\n\n195\n00:10:11.361 --> 00:10:13.918\n&gt;&gt; Well, that's actually\nwhere the name came from is\n\n196\n00:10:13.918 --> 00:10:15.947\nin theory every program should be nice.\n\n197\n00:10:15.947 --> 00:10:17.972\n&gt;&gt; Yeah.\n&gt;&gt; Every program should play nice\n\n198\n00:10:17.972 --> 00:10:19.030\ntogether, right?\n\n199\n00:10:19.030 --> 00:10:20.930\n&gt;&gt; In the sandbox, nicely.\n\n200\n00:10:20.930 --> 00:10:22.790\n&gt;&gt; The Linux sandbox environment for\n\n201\n00:10:22.790 --> 00:10:26.310\nthe CPU resource utilization\nis like a playground sandbox.\n\n202\n00:10:26.310 --> 00:10:27.340\nThe kids are supposed to share.\n\n203\n00:10:28.440 --> 00:10:30.438\n&gt;&gt; That doesn't always happen.\n\n204\n00:10:30.438 --> 00:10:35.020\nAnd early OS's tried to fix this problem\nby doing what was called time slicing\n\n205\n00:10:35.020 --> 00:10:37.480\nwhere, think of it as like a timeshare.\n\n206\n00:10:37.480 --> 00:10:40.700\nWhere I might say, okay, Zach,\nyou get one turn on the CPU.\n\n207\n00:10:40.700 --> 00:10:41.620\nNow it's my turn.\n\n208\n00:10:41.620 --> 00:10:42.370\nNow it's your turn.\n\n209\n00:10:42.370 --> 00:10:42.960\nNow, it's my turn.\n\n210\n00:10:42.960 --> 00:10:44.715\nNow it's your turn, back and forth.\n\n211\n00:10:44.715 --> 00:10:47.790\nWell, it might be my turn and\nI don't need it.\n\n212\n00:10:47.790 --> 00:10:49.117\n&gt;&gt; And so I'm like, I'm gonna sit here.\n\n213\n00:10:49.117 --> 00:10:50.890\nAll right, now it's Zach's turn.\n\n214\n00:10:50.890 --> 00:10:51.750\nAnd now it comes back to me.\n\n215\n00:10:51.750 --> 00:10:52.870\nNo, I don't really need it.\n\n216\n00:10:52.870 --> 00:10:57.130\nAnd so now Zach is having to go slower and\nI'm wasting my turns.\n\n217\n00:10:57.130 --> 00:11:02.240\nSo time slicing is not really\nthe best way to do multitasking.\n\n218\n00:11:02.240 --> 00:11:04.926\nWell, in Linux it doesn't do\ntime slicing like that anymore.\n\n219\n00:11:04.926 --> 00:11:08.080\nNow it bases it on programs\nplaying nice together.\n\n220\n00:11:08.080 --> 00:11:11.010\nEvery application has a certain priority,\nand\n\n221\n00:11:11.010 --> 00:11:13.270\nby default the majority of them are tied.\n\n222\n00:11:13.270 --> 00:11:15.340\nAnd when they're tied,\nit's kind of a first come,\n\n223\n00:11:15.340 --> 00:11:19.000\nfirst serve feeding frenzy on the CPU.\n\n224\n00:11:19.000 --> 00:11:22.820\nBut if somebody starts going crazy and\nconsuming too much,\n\n225\n00:11:22.820 --> 00:11:27.590\nwe can manipulate the priorities, and we\ncan say process one is high priority, and\n\n226\n00:11:27.590 --> 00:11:29.970\nprocess two is low priority, or whatever.\n\n227\n00:11:29.970 --> 00:11:32.050\nAnd we can do that with\nthe renice command.\n\n228\n00:11:32.050 --> 00:11:34.470\nAnd that's what top is actually\nkind of front ending for us,\n\n229\n00:11:34.470 --> 00:11:36.150\nis that renice command.\n\n230\n00:11:36.150 --> 00:11:43.290\nIf I take a look at my processes,\nI can see that md5sum running right here.\n\n231\n00:11:43.290 --> 00:11:44.855\nAnd it's process ID 4477.\n\n232\n00:11:44.855 --> 00:11:51.300\nAnd right now, it's got the same priority\nas any other application that I run.\n\n233\n00:11:51.300 --> 00:11:56.020\nSo if I start getting performance issues,\nit may be because of this application.\n\n234\n00:11:56.020 --> 00:12:00.300\nSo I can lower its priority, and everybody\nelse, when they go to get the CPU,\n\n235\n00:12:00.300 --> 00:12:01.070\nthey'll get priority.\n\n236\n00:12:01.070 --> 00:12:02.790\nThey'll get that access first.\n\n237\n00:12:02.790 --> 00:12:06.410\nAnd when the system is idle or\nthere's just available space.\n\n238\n00:12:06.410 --> 00:12:09.330\nOn a multi-core system,\nthere's almost always extra space.\n\n239\n00:12:09.330 --> 00:12:11.900\nThen md5sum will jump in take that, right?\n\n240\n00:12:11.900 --> 00:12:13.230\nSo renice is a great way to do that.\n\n241\n00:12:13.230 --> 00:12:15.010\nAnd the command's not too tricky.\n\n242\n00:12:15.010 --> 00:12:17.810\nWe do need to know\nthe process we wanna modify.\n\n243\n00:12:17.810 --> 00:12:22.460\nAnd the command is actually not renice,\nthe command is just nice.\n\n244\n00:12:22.460 --> 00:12:24.560\nSo nice by itself like that.\n\n245\n00:12:24.560 --> 00:12:29.130\nIf you pull up the manual for it, it kinda\nlays out the information like you've got\n\n246\n00:12:29.130 --> 00:12:34.230\nnice option and the command that\nyou're trying to re-nice, to adjust.\n\n247\n00:12:34.230 --> 00:12:37.540\nAnd when we run these,\nwe're adjusting it based on a number.\n\n248\n00:12:37.540 --> 00:12:40.960\nAnd the reason I wanted to bring this\nup is the number is kind of wierd.\n\n249\n00:12:40.960 --> 00:12:44.760\nIt ranges from a -20 to a 19,\n\n250\n00:12:44.760 --> 00:12:48.950\nand the -20 is the best,\n\n251\n00:12:48.950 --> 00:12:52.480\nthe highest priority, even though it's the\nlowest number, it's the highest priority.\n\n252\n00:12:52.480 --> 00:12:56.080\nSo think of it as a golf score,\nthe lower score in golf wins.\n\n253\n00:12:56.080 --> 00:12:57.410\nImagine if you got a negative score,\n\n254\n00:12:57.410 --> 00:13:00.300\nlike you're sinking hole in ones\nbefore you even get to the course.\n\n255\n00:13:00.300 --> 00:13:02.850\nSo that's how nice it is.\n\n256\n00:13:02.850 --> 00:13:05.830\nThe lower numbers are better, right.\n\n257\n00:13:05.830 --> 00:13:07.950\nAnd everything runs at a default.\n\n258\n00:13:07.950 --> 00:13:09.680\nNotice the default here is 10.\n\n259\n00:13:09.680 --> 00:13:14.055\nSo if I give the md5sum\na nice value of 11,\n\n260\n00:13:14.055 --> 00:13:19.985\neverybody else is at 10,\nthey'll get priority over it.\n\n261\n00:13:19.985 --> 00:13:22.394\nBut if I give md5sum a nice value of 9,\n\n262\n00:13:22.394 --> 00:13:25.930\nthen it's gonna have priority\nover everybody else.\n\n263\n00:13:25.930 --> 00:13:27.780\nSo we use that as our gauge.\n\n264\n00:13:27.780 --> 00:13:33.350\nAnd it's hard to remember that -20\nis the best, and 19 is the worst,\n\n265\n00:13:33.350 --> 00:13:37.070\nand that 10 is the average, because\nthat is not intuitive at all, right?\n\n266\n00:13:37.070 --> 00:13:40.750\nSo definitely remember to pull that\nman page up to be able to get to nice.\n\n267\n00:13:40.750 --> 00:13:41.870\nBut we can come in and\n\n268\n00:13:41.870 --> 00:13:46.560\nlaunch applications using nice, and\nwhen it runs, it'll have that value.\n\n269\n00:13:46.560 --> 00:13:52.290\nSo I could have, let's see,\nam I still running,\n\n270\n00:13:52.290 --> 00:13:55.860\nyeah, I'm running md5 in the background.\n\n271\n00:13:55.860 --> 00:13:58.707\nSo I'm gonna take %4 and\nI'm gonna go ahead and\n\n272\n00:13:58.707 --> 00:14:01.772\nkill it off just by hitting\nCtrl+C to stop the md5.\n\n273\n00:14:01.772 --> 00:14:04.310\nAll right, so\nI'm gonna stop the md5 from running.\n\n274\n00:14:04.310 --> 00:14:05.204\nSo it's no longer running\nin the background.\n\n275\n00:14:05.204 --> 00:14:09.284\nAnd this time I'm gonna say, nice -n,\n\n276\n00:14:09.284 --> 00:14:13.845\nfollowed by the value I wanna give it,\nokay?\n\n277\n00:14:13.845 --> 00:14:15.181\nAnd I'm gonna give it a value of 12.\n\n278\n00:14:15.181 --> 00:14:18.452\nEverything else is running at 10,\nI'm gonna do this one at 12.\n\n279\n00:14:18.452 --> 00:14:21.979\nAnd then I'll come in and say,\n\n280\n00:14:21.979 --> 00:14:27.840\nsudo md5sum /dev/sda1, like that, okay?\n\n281\n00:14:27.840 --> 00:14:31.770\nSo there's my command, and\nit's being fed through nice.\n\n282\n00:14:31.770 --> 00:14:33.380\nAnd now it's running.\n\n283\n00:14:33.380 --> 00:14:35.670\nAnd it's running at that lower priority.\n\n284\n00:14:35.670 --> 00:14:37.410\nNow it's not in the background yet, right?\n\n285\n00:14:37.410 --> 00:14:39.430\nSo I can Ctrl+Z, or\nI should have backgrounded it,\n\n286\n00:14:39.430 --> 00:14:40.540\nis what I should have done.\n\n287\n00:14:40.540 --> 00:14:42.300\nI should have stuck\nan ampersand at the end.\n\n288\n00:14:42.300 --> 00:14:43.970\nAnd then it would have\ngone in the background.\n\n289\n00:14:43.970 --> 00:14:45.700\nSo I can always break out and do that.\n\n290\n00:14:47.310 --> 00:14:48.240\nAnd there we go.\n\n291\n00:14:48.240 --> 00:14:51.180\nAnd so\nnow it's running as process ID 4527,\n\n292\n00:14:51.180 --> 00:14:55.440\nand it's got that different\npriority assigned to it, okay?\n\n293\n00:14:55.440 --> 00:14:58.820\nNow the thing here is,\nI had to stop it to do that, right?\n\n294\n00:14:58.820 --> 00:15:01.230\nI killed off md5, and then I ran it.\n\n295\n00:15:01.230 --> 00:15:05.406\nSo if I know ahead of time I want\nthe process to be at a different value,\n\n296\n00:15:05.406 --> 00:15:07.137\nthis works out really well.\n\n297\n00:15:07.137 --> 00:15:09.240\nAll right, that job is now running.\n\n298\n00:15:09.240 --> 00:15:10.620\nIt's in the background.\n\n299\n00:15:10.620 --> 00:15:15.950\nAnd if I take a look at the process,\nit actually doesn't show up here.\n\n300\n00:15:15.950 --> 00:15:19.540\nBut it is running at that\ndifferent priority so that it will\n\n301\n00:15:20.900 --> 00:15:25.560\nnot be absorbing all the system resources\nand blocking other applications.\n\n302\n00:15:25.560 --> 00:15:27.712\nBut if the program was already running,\nright,\n\n303\n00:15:27.712 --> 00:15:29.610\nmd5sum is gonna take two hours to run.\n\n304\n00:15:30.870 --> 00:15:32.031\nWhat if I'm already an hour in?\n\n305\n00:15:32.031 --> 00:15:35.850\nI don't wanna start over,\nthat would be a real pain.\n\n306\n00:15:35.850 --> 00:15:39.070\nAnd that's where renice comes in, okay?\n\n307\n00:15:39.070 --> 00:15:42.890\nSo nice is if we're gonna\nlaunch the command and\n\n308\n00:15:42.890 --> 00:15:45.060\nwe know ahead of time\nwe wanna set the value.\n\n309\n00:15:45.060 --> 00:15:46.870\nRenice is when the command's\nalready running.\n\n310\n00:15:46.870 --> 00:15:48.740\nAnd that's what the top\ncommand was trying to do.\n\n311\n00:15:48.740 --> 00:15:50.451\nHey, this process is already running.\n\n312\n00:15:50.451 --> 00:15:52.959\nWe're gonna renice it\nto a different value.\n\n313\n00:15:52.959 --> 00:15:56.475\nAnd so, maybe instead of at 12,\nmaybe 12 is just taking too long, so\n\n314\n00:15:56.475 --> 00:15:59.201\nI wanna put it back to 10 so\nit's like everybody else.\n\n315\n00:15:59.201 --> 00:16:03.997\nSo, I can say renice -n 10, So\nI'm gonna set that number to 10,\n\n316\n00:16:03.997 --> 00:16:07.802\nand then I can follow that up\nwith any number of things,\n\n317\n00:16:07.802 --> 00:16:10.724\nusually it's just a process ID, right?\n\n318\n00:16:10.724 --> 00:16:14.620\nSo in this case, the process ID is 4528,\nand I can do that.\n\n319\n00:16:14.620 --> 00:16:17.500\nNow I might get an error on that one,\nyeah, I got an error,\n\n320\n00:16:17.500 --> 00:16:21.830\nand that's because the process is running\nas root, and I'm just good old dpezet, so\n\n321\n00:16:21.830 --> 00:16:24.500\nI need to do a sudu on this one,\nto renice it.\n\n322\n00:16:24.500 --> 00:16:27.540\nAnd now,\nit changes that priority from 12 to 10,\n\n323\n00:16:27.540 --> 00:16:30.450\nand it's running just like\neverybody else again.\n\n324\n00:16:30.450 --> 00:16:34.198\nSo we can adjust that priority on the fly,\nwithout actually stopping the application.\n\n325\n00:16:34.198 --> 00:16:37.232\n&gt;&gt; That's fantastic, so we have nice and\nwe have renice processes,\n\n326\n00:16:37.232 --> 00:16:39.249\ndoes that mean there's a naughty process?\n\n327\n00:16:39.249 --> 00:16:42.170\n&gt;&gt; [LAUGH]\n&gt;&gt; And if there is, how do you kill it?\n\n328\n00:16:42.170 --> 00:16:45.500\n&gt;&gt; All right, so we are like\nthe Santa Claus of Linux processes,\n\n329\n00:16:45.500 --> 00:16:47.800\nyou do have a naughty and nice list.\n\n330\n00:16:47.800 --> 00:16:51.157\nIf everything is running the way that it's\nsupposed to run, everything plays nice,\n\n331\n00:16:51.157 --> 00:16:51.960\nand that's great.\n\n332\n00:16:51.960 --> 00:16:55.306\nBut every now and then you get a rogue\nprocess, a process that goes crazy, and\n\n333\n00:16:55.306 --> 00:16:57.071\nstarts consuming 100% of your CPU.\n\n334\n00:16:57.071 --> 00:16:58.641\nOr it creates a memory leak, and\n\n335\n00:16:58.641 --> 00:17:03.260\nit's just draining all the available RAM\nout of your system, and that's bad, right?\n\n336\n00:17:03.260 --> 00:17:05.940\n&gt;&gt; That's bad.\n&gt;&gt; And so in those scenarios,\n\n337\n00:17:05.940 --> 00:17:09.440\nunfortunately, we don't have\na discipline-a-process command,\n\n338\n00:17:09.440 --> 00:17:10.980\nwe just go straight to kill the command.\n\n339\n00:17:10.980 --> 00:17:13.230\nWe can kill it off, and\nstop it from running.\n\n340\n00:17:13.230 --> 00:17:15.975\nRenice would be the closest thing to\ndisciplining, we could lower the priority,\n\n341\n00:17:15.975 --> 00:17:17.606\nbut that's not really\ngonna solve the problem,\n\n342\n00:17:17.606 --> 00:17:18.949\nwe just need to terminate the command.\n\n343\n00:17:18.949 --> 00:17:22.630\nAnd there's a few different\nways to terminate a process.\n\n344\n00:17:22.630 --> 00:17:26.529\nIf you can interact with the process,\nlike with md5sum, so\n\n345\n00:17:26.529 --> 00:17:32.070\nwhen I looked at that, that was job four,\nso let me just switch over to that job.\n\n346\n00:17:32.070 --> 00:17:33.890\nI can hit Ctrl+C and it stops it, and\n\n347\n00:17:33.890 --> 00:17:36.970\nthat's it, right,\nI'm interacting with that process.\n\n348\n00:17:36.970 --> 00:17:41.210\nBut what if the process has gone so crazy\nthat it's not even accepting my commands,\n\n349\n00:17:41.210 --> 00:17:43.360\nit's not even letting me do that?\n\n350\n00:17:43.360 --> 00:17:46.010\nThat's when we can jump in and\nactually kill the process,\n\n351\n00:17:46.010 --> 00:17:47.020\na little more aggressively.\n\n352\n00:17:47.020 --> 00:17:48.735\n&gt;&gt; That's when you call in Rambo.\n\n353\n00:17:48.735 --> 00:17:49.650\n&gt;&gt; [LAUGH]\n&gt;&gt; That's right,\n\n354\n00:17:49.650 --> 00:17:51.480\nwe need a cleaner, a fixer.\n\n355\n00:17:51.480 --> 00:17:55.840\nSo if I pull up top, I can see\nthe applications that are running.\n\n356\n00:17:55.840 --> 00:18:00.610\nand in here, you can actually kill\ncommands from inside of the top utility.\n\n357\n00:18:00.610 --> 00:18:04.560\nIt's got a keyboard shortcut,\nwhich is K, appropriately.\n\n358\n00:18:04.560 --> 00:18:07.950\nSo you would hit K, and\nthen you would specify the process ID, but\n\n359\n00:18:07.950 --> 00:18:10.830\nwhat it's actually doing is just using\nthe kill command in the background.\n\n360\n00:18:10.830 --> 00:18:15.980\nAgain, it's just kind of front-ending\na command that is already present, and\n\n361\n00:18:15.980 --> 00:18:16.800\nthat's the kill command.\n\n362\n00:18:16.800 --> 00:18:20.425\nAnd if you take a look at the manual\npage for kill, it's not very complex,\n\n363\n00:18:20.425 --> 00:18:23.541\nyou just say kill, and\nthen the process ID that you wanna kill.\n\n364\n00:18:23.541 --> 00:18:29.906\nSo if I did a md5sum of /dev/sda1,\nand I've got that running and\n\n365\n00:18:29.906 --> 00:18:35.741\nwhoops, hang on,\nlet me run that in the background, there.\n\n366\n00:18:35.741 --> 00:18:39.109\nOkay, so I've got it running, and\nI take a look at my processes,\n\n367\n00:18:39.109 --> 00:18:41.270\nand I see it there as process ID 4571.\n\n368\n00:18:41.270 --> 00:18:45.050\nAnd it's going crazy, right,\nit's just eating up my CPU, and\n\n369\n00:18:45.050 --> 00:18:46.820\nI want to get rid of it.\n\n370\n00:18:46.820 --> 00:18:51.970\nYou can type kill 4571, and\nit will terminate that process.\n\n371\n00:18:51.970 --> 00:18:56.130\nNow, in my case, I got an error\nbecause it's running as root,\n\n372\n00:18:56.130 --> 00:19:00.860\nI had sudu'd that one, right, so\nI'll need to sudu the kill command.\n\n373\n00:19:00.860 --> 00:19:05.058\nYou can't kill someone elses processes\nunless you're an administrator, so\n\n374\n00:19:05.058 --> 00:19:06.401\nyou've got to use sudu.\n\n375\n00:19:06.401 --> 00:19:08.430\nNow, you can kill your own\nprocesses if you want, So\n\n376\n00:19:08.430 --> 00:19:10.429\nif I launch Midnight Commander\nin the background?\n\n377\n00:19:10.429 --> 00:19:13.935\nWell, it doesn't like being in\nthe background, see how it just stopped?\n\n378\n00:19:13.935 --> 00:19:14.990\n&gt;&gt; [LAUGH]\n&gt;&gt; But if I run,\n\n379\n00:19:14.990 --> 00:19:19.500\nit is still back there, process 4576, and\nI can kill 4576, and when I run that,\n\n380\n00:19:19.500 --> 00:19:22.550\nsee how it didn't give\nme a permission denied?\n\n381\n00:19:22.550 --> 00:19:26.680\nIt's my own process, I'm free to kill\nthat off if I want to, and there we go.\n\n382\n00:19:26.680 --> 00:19:28.070\nSo if you're killing a different user's,\n\n383\n00:19:28.070 --> 00:19:30.410\nthough, you'll need to\nbe an administrator.\n\n384\n00:19:30.410 --> 00:19:34.460\nAnd as far as the user goes, the kill\ncommand does accept a few different\n\n385\n00:19:34.460 --> 00:19:36.180\narguments that you might wanna provide.\n\n386\n00:19:36.180 --> 00:19:39.079\nNormally we just kill it, for\na normal, even for a power user,\n\n387\n00:19:39.079 --> 00:19:40.890\nthat's normally all we want.\n\n388\n00:19:40.890 --> 00:19:44.508\nBut if you're a developer, there's\nseveral different ways you can kill\n\n389\n00:19:44.508 --> 00:19:47.381\nan application, and so\nyou can send a few different ways.\n\n390\n00:19:47.381 --> 00:19:51.201\nThe most common way is to send what's\ncalled a SIGTERM, or a signal termination.\n\n391\n00:19:51.201 --> 00:19:54.771\nAnd that then just tells the program, hey,\nyou're not talking to the OS any more,\n\n392\n00:19:54.771 --> 00:19:57.129\nand that effectively kills the program,\nand it dies.\n\n393\n00:19:57.129 --> 00:20:01.062\nBut there are other ones that you can do,\nIf you look at the man page for kill,\n\n394\n00:20:01.062 --> 00:20:03.295\nif you ever get bored and\nyou wanna read it.\n\n395\n00:20:03.295 --> 00:20:05.774\n&gt;&gt; [LAUGH].\n&gt;&gt; You'll see where there's a hop, int,\n\n396\n00:20:05.774 --> 00:20:09.920\nkill, there's several different\nvariations that you can use, and\n\n397\n00:20:09.920 --> 00:20:14.225\neach one is just changing the signaling\nthat's being sent to changes.\n\n398\n00:20:14.225 --> 00:20:16.905\nSo, if you're trying to\nsimulate an application crash,\n\n399\n00:20:16.905 --> 00:20:20.365\nyou can do things like removing\nthe application's ability to access RAM.\n\n400\n00:20:20.365 --> 00:20:22.268\nThat's another great way to kill it,\nright, and\n\n401\n00:20:22.268 --> 00:20:23.685\nsee how your program reacts to that.\n\n402\n00:20:23.685 --> 00:20:30.450\nSo for testing reasons, you can do those\nthings, you don't normally have to.\n\n403\n00:20:30.450 --> 00:20:31.550\nIf you do kill -l,\n\n404\n00:20:31.550 --> 00:20:35.564\nthat'll give you a list of all the\ndifferent ways you can kill the program.\n\n405\n00:20:35.564 --> 00:20:39.820\nAnd there's a lot, right, there's 64\non my system, you might have more,\n\n406\n00:20:39.820 --> 00:20:42.750\nyou might have less, depending on\nwhich distro you're running, but\n\n407\n00:20:42.750 --> 00:20:45.080\nthese are all different ways.\n\n408\n00:20:45.080 --> 00:20:48.640\nUsually all we wanna do is get it to stop,\nthat's all we care about, so\n\n409\n00:20:48.640 --> 00:20:49.910\nwe don't care which one it is, but\n\n410\n00:20:49.910 --> 00:20:53.980\na developer can really make use\nof these for various things.\n\n411\n00:20:53.980 --> 00:20:55.510\nThere's also another command that,\n\n412\n00:20:55.510 --> 00:20:58.120\nI'll be honest with you ,I never run,\nwhich is killall.\n\n413\n00:20:59.320 --> 00:21:01.110\nAnd killall's a little more aggressive,\n\n414\n00:21:01.110 --> 00:21:03.770\ncuz it kills all the things\nthat are running.\n\n415\n00:21:03.770 --> 00:21:06.556\nYou might have more than one\ninstance of a process, and\n\n416\n00:21:06.556 --> 00:21:08.510\nthen let me give you an example.\n\n417\n00:21:08.510 --> 00:21:11.485\nYou might be running a web\nbrowser browser like Chrome, and\n\n418\n00:21:11.485 --> 00:21:16.005\nin Chrome, every tab is its own process.\n\n419\n00:21:16.005 --> 00:21:19.155\nAnd the reason Google does that\nis that if one tab locks up,\n\n420\n00:21:19.155 --> 00:21:21.735\nit doesn't take down all your other tabs,\nright, you can close the bad web page, and\n\n421\n00:21:21.735 --> 00:21:22.907\nall the other ones are fine.\n\n422\n00:21:22.907 --> 00:21:24.767\nBut if Chrome is causing the problem, and\n\n423\n00:21:24.767 --> 00:21:28.017\nyou want to close Chrome,\nit might have ten different processes.\n\n424\n00:21:28.017 --> 00:21:31.157\nSo you can say killall,\nfollowed by the name of the program, or\n\n425\n00:21:31.157 --> 00:21:35.507\nfollowed by the name of the program, and\nit will kill every process with that name.\n\n426\n00:21:35.507 --> 00:21:37.957\nThe command that I was running,\nkill, kills a single process,\n\n427\n00:21:37.957 --> 00:21:39.780\nthat's why we use a process ID.\n\n428\n00:21:39.780 --> 00:21:41.305\nBut killall uses a filename,\n\n429\n00:21:41.305 --> 00:21:46.060\nand that's useful if you know there's more\nthan one instance to that program running.\n\n430\n00:21:46.060 --> 00:21:48.817\nLet me see if I have anything\nthat's doing that, I mean,\n\n431\n00:21:48.817 --> 00:21:52.215\nI guess I could just launch Chrome,\nand that would tell us right away.\n\n432\n00:21:52.215 --> 00:21:56.331\nBut when I look here, well, GNOME settings\ndaemon, well, I kind of need GNOME, and\n\n433\n00:21:56.331 --> 00:21:57.540\nthe settings are there.\n\n434\n00:21:57.540 --> 00:21:59.558\n&gt;&gt; [LAUGH]\n&gt;&gt; But you see how there's 20 different\n\n435\n00:21:59.558 --> 00:22:03.252\ninstances of it running, if I were to\ndo a killall, we can nail those, and\n\n436\n00:22:03.252 --> 00:22:04.460\nthen all close at once.\n\n437\n00:22:04.460 --> 00:22:09.866\nSo that's how we can kind of do\nthat using the killall command,\n\n438\n00:22:09.866 --> 00:22:14.660\nit's really an alias for\na do loop that runs in the back.\n\n439\n00:22:14.660 --> 00:22:17.270\nBut we don't have to know all that,\nbecause it's nice and easy,\n\n440\n00:22:17.270 --> 00:22:18.080\nit's one command.\n\n441\n00:22:19.170 --> 00:22:19.991\n&gt;&gt; Awesome.\n&gt;&gt; All right,\n\n442\n00:22:19.991 --> 00:22:22.775\ndid I actually get\nthrough the end of this?\n\n443\n00:22:22.775 --> 00:22:24.324\n&gt;&gt; [LAUGH]\n&gt;&gt; I think you went through the whole\n\n444\n00:22:24.324 --> 00:22:25.020\nthing, yeah.\n\n445\n00:22:25.020 --> 00:22:28.130\nManaging processes,\nbecoming a Linux power user,\n\n446\n00:22:28.130 --> 00:22:32.530\npart two, wonderful information as usual,\nanything you want to wrap up with?\n\n447\n00:22:32.530 --> 00:22:36.539\n&gt;&gt; The main thing here is, remember, that\nwhile graphical user interfaces are nice,\n\n448\n00:22:36.539 --> 00:22:39.586\non servers you're not going to have those,\nand as a power user,\n\n449\n00:22:39.586 --> 00:22:41.570\nthere's stuff you don't see in the GUI.\n\n450\n00:22:41.570 --> 00:22:44.044\nSo the moment you drop to the command\nline, you see a lot more,\n\n451\n00:22:44.044 --> 00:22:46.150\nand that's where all these\ncommands come in handy.\n\n452\n00:22:46.150 --> 00:22:48.970\nSo some of these commands you might\nhave looked and said, forget that, Don,\n\n453\n00:22:48.970 --> 00:22:49.720\nI'm gonna use the GUI.\n\n454\n00:22:49.720 --> 00:22:51.280\nYou can do that, that's fine,\n\n455\n00:22:51.280 --> 00:22:53.300\nbut there are some scenarios\nwhere that's not gonna work.\n\n456\n00:22:53.300 --> 00:22:57.287\nAnd knowing how to do it from the command\nline works everywhere, workstations,\n\n457\n00:22:57.287 --> 00:23:00.287\nservers, everywhere, so\nit is really the best way to do it.\n\n458\n00:23:00.287 --> 00:23:01.707\nBut use what you're comfortable with,\n\n459\n00:23:01.707 --> 00:23:03.721\njust make sure that you're\nfamiliar with both methods.\n\n460\n00:23:03.721 --> 00:23:05.770\nThat way, you're covered in any scenario.\n\n461\n00:23:05.770 --> 00:23:08.405\n&gt;&gt; Thanks again, Don, awesome information.\n\n462\n00:23:08.405 --> 00:23:11.726\nAnd thank you for\nwatching ITProTV, remember,\n\n463\n00:23:11.726 --> 00:23:14.000\na good IT pro is always learning.\n\n464\n00:23:14.000 --> 00:23:15.015\nI'm Zach Memos.\n\n465\n00:23:15.015 --> 00:23:15.930\n&gt;&gt; And I'm Don Pezet.\n\n466\n00:23:15.930 --> 00:23:16.797\n&gt;&gt; And we will see you again, real soon.\n\n467\n00:23:16.797 --> 00:23:24.670\n[MUSIC]\n\n468\n00:23:24.670 --> 00:23:28.589\nThank you for watching ITProTV.\n\n",
          "vimeoId": "222680142"
        }
      ],
      "title": "Managing Running Processes"
    },
    {
      "episodes": [
        {
          "description": "Don and Zach discuss what exactly a ‘Script’ is, if a script is a program, executing a script, demonstrations of creating scripts, what ‘Variables’ are, variable examples, do scripts do the same thing every time, will a script ever ask the user for information, and can we do math inside a script.",
          "length": "2252",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-1-executing_scripts-062117-PGM.00_00_11_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-1-executing_scripts-062117-PGM.00_00_11_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-1-executing_scripts-062117-PGM.00_00_11_25.Still001-sm.jpg",
          "title": "Executing Scripts",
          "transcript": "WEBVTT\n\n1\n00:00:00.220 --> 00:00:02.625\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.625 --> 00:00:06.686\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.686 --> 00:00:08.417\n[MUSIC]\n\n4\n00:00:08.417 --> 00:00:10.600\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.140 --> 00:00:13.620\n&gt;&gt; Hello again and thank you for\n\n6\n00:00:13.620 --> 00:00:17.460\nwatching ITProTV helping you\nto learn wherever you go.\n\n7\n00:00:17.460 --> 00:00:22.570\nI'm your host Zach Memos as we continue\non with becoming a Linux power user.\n\n8\n00:00:22.570 --> 00:00:26.122\nAnd today, we're looking at executing\nscripts, is that right Don?\n\n9\n00:00:26.122 --> 00:00:30.030\n&gt;&gt; Absolutely yeah,\nscripting is a very powerfu feature\n\n10\n00:00:30.030 --> 00:00:33.370\nfound inside of Linux operating system,\nand many operating system have it.\n\n11\n00:00:33.370 --> 00:00:35.940\nLinux has a bit of a leg up though,\nbecause almost\n\n12\n00:00:35.940 --> 00:00:39.610\neverything can be automotated through\nthe use of scripts, so very powerful.\n\n13\n00:00:39.610 --> 00:00:41.600\nYou're going to encounter\nthem all over the place.\n\n14\n00:00:41.600 --> 00:00:43.128\nAnd so in this episode,\nwe're gonna take a look at that.\n\n15\n00:00:43.128 --> 00:00:45.469\nGet a chance to see how they work,\nwhat they do, and\n\n16\n00:00:45.469 --> 00:00:48.150\neven write a basic script to\nintroduce us to that concept.\n\n17\n00:00:48.150 --> 00:00:51.660\n&gt;&gt; Right, and so, this is gonna be very\nbasic information which you can use and\n\n18\n00:00:51.660 --> 00:00:55.330\ngrow with, because in later episodes,\nwe're gonna be talking about constructs,\n\n19\n00:00:55.330 --> 00:00:59.160\nand that'll be more meat, I think,\nmore grist for the mill, as they say.\n\n20\n00:00:59.160 --> 00:00:59.924\n&gt;&gt; Absolutely, yeah.\n\n21\n00:00:59.924 --> 00:01:00.666\n&gt;&gt; [LAUGH] That's right.\n\n22\n00:01:00.666 --> 00:01:03.357\nBut why don't we begin by finding out,\nwhat exactly is a script?\n\n23\n00:01:03.357 --> 00:01:05.097\n&gt;&gt; Sure, that's a great place to start.\n\n24\n00:01:05.097 --> 00:01:07.907\nSo scripts, there purpose.\n\n25\n00:01:07.907 --> 00:01:10.188\nWhat they are,\nis really just a text file, so\n\n26\n00:01:10.188 --> 00:01:14.229\nthey are not really anything too fancy\nwith a series of commands listed in them.\n\n27\n00:01:14.229 --> 00:01:16.235\nSo have you ever sat down and\ndone something and\n\n28\n00:01:16.235 --> 00:01:17.940\nit takes five commands to do it.\n\n29\n00:01:17.940 --> 00:01:21.072\nWell, you could write a script\nthat does all five commands, and\n\n30\n00:01:21.072 --> 00:01:24.730\nnow you just run that one script and\nit does the five things for you.\n\n31\n00:01:24.730 --> 00:01:25.990\nIt's a time saving step.\n\n32\n00:01:25.990 --> 00:01:29.160\nScripts are all about automation and\nsaving time.\n\n33\n00:01:29.160 --> 00:01:32.680\nBut they also help in another area, and\nthis is one that is near and dear to me.\n\n34\n00:01:32.680 --> 00:01:34.320\nIf you're a terrible typer,\n\n35\n00:01:34.320 --> 00:01:39.370\nlike I am, running five commands\nis five times to make a mistake.\n\n36\n00:01:39.370 --> 00:01:40.810\nIf I have it in a script, though,\n\n37\n00:01:40.810 --> 00:01:43.320\nI can call the script and I don't have\nto worry about typos and bad typing.\n\n38\n00:01:43.320 --> 00:01:45.730\nIt's just gonna run and\nreally surf that automation.\n\n39\n00:01:45.730 --> 00:01:49.840\nSo scripting is very powerful because\nwe can automate all sorts of stuff.\n\n40\n00:01:49.840 --> 00:01:51.240\nWe can get jobs done way faster.\n\n41\n00:01:51.240 --> 00:01:53.370\nWe can do really complex things.\n\n42\n00:01:53.370 --> 00:01:55.890\nBut, we need to learn how to do it.\n\n43\n00:01:55.890 --> 00:01:58.490\nAnd at a minimum we need to\nknow how to execute scripts.\n\n44\n00:01:58.490 --> 00:02:01.193\nBecause even if you don't know\nthe first thing about a script,\n\n45\n00:02:01.193 --> 00:02:04.610\nthere are times where you need to download\nand run a script to perform an action,\n\n46\n00:02:04.610 --> 00:02:06.300\nto install some software for example.\n\n47\n00:02:06.300 --> 00:02:08.529\nA lot of vendors will have\na script to download, you run it,\n\n48\n00:02:08.529 --> 00:02:09.611\nit installs their program.\n\n49\n00:02:09.611 --> 00:02:12.254\nSo at a minimum you need to know\nhow to handle the script and\n\n50\n00:02:12.254 --> 00:02:14.246\nrun it which where we'll start off today.\n\n51\n00:02:14.246 --> 00:02:19.385\nAnd I'll show you the basic structure\nof a script to see how they're built.\n\n52\n00:02:19.385 --> 00:02:23.995\nBut we're not gonna dive into the really\nmeaty, here's how you can write a real\n\n53\n00:02:23.995 --> 00:02:27.125\nworld script that can be incredibly useful\ncuz we need to know the basics first.\n\n54\n00:02:27.125 --> 00:02:30.595\nAnd then our follow-up episodes, I'll\ngo into the programming constructs and\n\n55\n00:02:30.595 --> 00:02:33.375\nhow we can actually build scripts\nthat do some really neat stuff.\n\n56\n00:02:33.375 --> 00:02:36.115\nAnd get a chance to see how they\ncan be used in the real world.\n\n57\n00:02:36.115 --> 00:02:39.080\nAnd then from there,\nyou're only limited by your imagination.\n\n58\n00:02:39.080 --> 00:02:41.570\nScripts can do anything you can think of.\n\n59\n00:02:41.570 --> 00:02:44.030\nSo if you can write the commands,\nyou can put them in a script, and\n\n60\n00:02:44.030 --> 00:02:44.840\nnow you can automate it.\n\n61\n00:02:44.840 --> 00:02:46.999\n&gt;&gt; It's like my father used to say to me,\n\n62\n00:02:46.999 --> 00:02:49.771\nexplain it to me like I'm\nthree years old [LAUGH].\n\n63\n00:02:49.771 --> 00:02:50.687\n&gt;&gt; [LAUGH].\n\n64\n00:02:50.687 --> 00:02:52.125\n&gt;&gt; So we're creating a program?\n\n65\n00:02:52.125 --> 00:02:53.030\nIs that what we're doing here, Don?\n\n66\n00:02:53.030 --> 00:02:54.434\nA script is a program?\n\n67\n00:02:54.434 --> 00:02:56.540\n&gt;&gt; It's very similar to a program.\n\n68\n00:02:56.540 --> 00:03:00.280\nTechnically, a script is\nan instruction to a program.\n\n69\n00:03:00.280 --> 00:03:01.620\nYou're telling a program what to do.\n\n70\n00:03:02.720 --> 00:03:03.780\nWhat's the program?\n\n71\n00:03:03.780 --> 00:03:05.040\nWell, the program is actually BASH.\n\n72\n00:03:05.040 --> 00:03:07.760\nWell, we're going to use BASH and\nthat's what most people use, but\n\n73\n00:03:07.760 --> 00:03:10.010\nit's whatever Shell you're using.\n\n74\n00:03:10.010 --> 00:03:15.060\nSo, if you drop into DASH or CSH or\nTCSH or one of those other Shells.\n\n75\n00:03:15.060 --> 00:03:16.310\nThey're the actual program.\n\n76\n00:03:16.310 --> 00:03:19.780\nAnd the script is just a set\nof instructions to that Shell,\n\n77\n00:03:19.780 --> 00:03:21.530\ntelling it what to do.\n\n78\n00:03:21.530 --> 00:03:25.350\nNow, we can write a script in a way\nthat makes it look and act and\n\n79\n00:03:25.350 --> 00:03:29.980\nbehave just like a program, so\nit's easy to lose that distinguishment.\n\n80\n00:03:29.980 --> 00:03:35.430\nBut you can't just open a program in\na text editor and modify it, right?\n\n81\n00:03:35.430 --> 00:03:38.180\nThey're compiled executables\nthat are designed to run.\n\n82\n00:03:38.180 --> 00:03:40.700\nA script, on the other hand,\nis just a text file.\n\n83\n00:03:40.700 --> 00:03:42.120\nWe can open it in a text editor.\n\n84\n00:03:42.120 --> 00:03:43.640\nWe can modify what it does,\n\n85\n00:03:43.640 --> 00:03:45.720\nbecause there's a separate\nprogram that's calling it.\n\n86\n00:03:45.720 --> 00:03:48.690\nNow that separate program is\ncalled an interpreter, right?\n\n87\n00:03:48.690 --> 00:03:52.760\nAnd the interpreter is\nreading those commands and\n\n88\n00:03:52.760 --> 00:03:55.590\ninterpreting the actions\nthat it needs to take.\n\n89\n00:03:55.590 --> 00:03:59.650\nAnd BASH is one of our command line\ninterpreters that we can use and\n\n90\n00:03:59.650 --> 00:04:03.240\nalmost every platform supports this.\n\n91\n00:04:03.240 --> 00:04:06.442\nEven Windows naw has a BASH Shell and\nit can run BASH scripts and\n\n92\n00:04:06.442 --> 00:04:07.680\nget those things done.\n\n93\n00:04:07.680 --> 00:04:08.935\nSo, it's very, very common.\n\n94\n00:04:08.935 --> 00:04:12.279\nIt's a great place to start and\nthat's where we're gonna jump in.\n\n95\n00:04:12.279 --> 00:04:14.184\n&gt;&gt; Is the BASH Shell\nthe same as the PowerShell?\n\n96\n00:04:14.184 --> 00:04:15.385\nAre they similar?\n\n97\n00:04:15.385 --> 00:04:16.916\n&gt;&gt; They're similar, right.\n\n98\n00:04:16.916 --> 00:04:18.915\nSo the PowerShell is Microsoft's\nversion of a Shell or\n\n99\n00:04:18.915 --> 00:04:20.783\nthe Microsoft's finding that's not enough,\nand\n\n100\n00:04:20.783 --> 00:04:23.682\nthat's why they're starting to do BASH\non like Windows 10 and stuff too.\n\n101\n00:04:23.682 --> 00:04:25.860\n&gt;&gt; BASH has been around a lot longer,\nright.\n\n102\n00:04:25.860 --> 00:04:26.987\nSo it's our standard interface.\n\n103\n00:04:26.987 --> 00:04:29.941\nSo, for example,\nwhen I log into my computer and\n\n104\n00:04:29.941 --> 00:04:34.070\nI drop into a terminal like this,\nmy default Shell is BASH, right.\n\n105\n00:04:34.070 --> 00:04:36.980\nAnd most people are, we covered\nthat back in the Shells episode.\n\n106\n00:04:36.980 --> 00:04:38.990\nIf you don't remember how to check for\nthat.\n\n107\n00:04:38.990 --> 00:04:43.397\nBut BASH accepts a really simple scripting\nstructure which is basically the same\n\n108\n00:04:43.397 --> 00:04:44.961\ncommands you type on a line.\n\n109\n00:04:44.961 --> 00:04:47.360\nYou just put them in a file, and they run.\n\n110\n00:04:47.360 --> 00:04:52.251\nSo, if I'm used to running a command like\nls -lah to pull up a listing of what's\n\n111\n00:04:52.251 --> 00:04:56.196\nin my folder, or ls -lh,\nwhich is something a little cleaner.\n\n112\n00:04:56.196 --> 00:04:56.795\nThere, so\n\n113\n00:04:56.795 --> 00:05:00.986\nif I'm used to running that command,\nI can put that command in a text file,\n\n114\n00:05:00.986 --> 00:05:05.530\nand I can have BASH call that text file,\nand I just wrote my first script, right?\n\n115\n00:05:05.530 --> 00:05:07.370\nLet me walk you through that process.\n\n116\n00:05:07.370 --> 00:05:09.790\nSo, I'm gonna create a text file.\n\n117\n00:05:09.790 --> 00:05:14.830\nAnd you can really name\nit whatever you want.\n\n118\n00:05:14.830 --> 00:05:16.980\nYou can call it Bob,\nif you want to call it Bob.\n\n119\n00:05:16.980 --> 00:05:19.429\nI'm gonna call mine\nmyscript because it's mine.\n\n120\n00:05:19.429 --> 00:05:22.400\nAnd I'm gonna put\nan extension on it of .sh.\n\n121\n00:05:22.400 --> 00:05:25.360\nYou don't have to do that, okay?\n\n122\n00:05:25.360 --> 00:05:29.350\nI'm putting a .sh on it so that when\nI look at this file in the future,\n\n123\n00:05:29.350 --> 00:05:31.360\nI'll look at it and\nI'll go that's a Shell script, right.\n\n124\n00:05:31.360 --> 00:05:33.090\nSo that's very, very common.\n\n125\n00:05:33.090 --> 00:05:37.090\nAlmost everybody puts a .sh on\nthe end of their Shell scripts.\n\n126\n00:05:37.090 --> 00:05:37.870\nBut you don't have to.\n\n127\n00:05:37.870 --> 00:05:38.710\nYou can leave it off.\n\n128\n00:05:38.710 --> 00:05:39.760\nIt'll work just fine.\n\n129\n00:05:39.760 --> 00:05:42.965\nSo it's a completely optional thing that\nhelps you to recognize when something is\n\n130\n00:05:42.965 --> 00:05:44.170\na script or not.\n\n131\n00:05:44.170 --> 00:05:46.390\nSo I'm gonna create that text file.\n\n132\n00:05:46.390 --> 00:05:47.850\nAnd then I'm gonna edit it.\n\n133\n00:05:47.850 --> 00:05:51.860\nAnd when I edit that file,\nit's an empty file.\n\n134\n00:05:51.860 --> 00:05:53.640\nI'm just gonna add a command, right?\n\n135\n00:05:53.640 --> 00:05:56.471\nSo I'm gonna add ls -lh, right?\n\n136\n00:05:56.471 --> 00:06:00.450\nGonna add that right there,\nand there we go, right?\n\n137\n00:06:00.450 --> 00:06:02.020\nSo not anything too flashy.\n\n138\n00:06:02.020 --> 00:06:03.510\nJust putting in a simple command.\n\n139\n00:06:03.510 --> 00:06:06.675\nI'll save that file, and there it is.\n\n140\n00:06:06.675 --> 00:06:09.142\nI've got myscript.sh.\n\n141\n00:06:09.142 --> 00:06:13.400\nOkay, now by itself,\nit's just a text file.\n\n142\n00:06:13.400 --> 00:06:14.360\nIt's not a program.\n\n143\n00:06:14.360 --> 00:06:18.380\nIf I try and run it, I can try and\nrun myscrpit.sh, and\n\n144\n00:06:18.380 --> 00:06:20.600\nnotice I'm doing the ./ there.\n\n145\n00:06:20.600 --> 00:06:24.445\nWhen you run a program,\nif you remember our executing executables,\n\n146\n00:06:24.445 --> 00:06:28.436\nwhatever that episode was called,\nwhere I showed how to run programs.\n\n147\n00:06:28.436 --> 00:06:30.469\nThere's something called a file path,\nright.\n\n148\n00:06:30.469 --> 00:06:35.873\nAnd when you run a program, your operating\nsystem looks into whatever that path is.\n\n149\n00:06:35.873 --> 00:06:38.330\nAnd so it looks in all these folders.\n\n150\n00:06:38.330 --> 00:06:40.450\nAnd it says, is this program there?\n\n151\n00:06:40.450 --> 00:06:46.330\nSo, if I run myscript.sh, it's gonna say,\nokay, well is it in /usr/local/sbin?\n\n152\n00:06:46.330 --> 00:06:47.770\nIs it in /usr/local/bin?\n\n153\n00:06:47.770 --> 00:06:49.045\nIs it in all these places?\n\n154\n00:06:49.045 --> 00:06:52.237\nWell, notice my home folder\nis not on the list, right.\n\n155\n00:06:52.237 --> 00:06:54.538\nI'm in /home/dpezet.\n\n156\n00:06:54.538 --> 00:06:55.650\nAnd that's not on this list.\n\n157\n00:06:55.650 --> 00:06:59.997\nSo even though I'm in that folder,\nit never looks in that folder, and\n\n158\n00:06:59.997 --> 00:07:01.113\nit won't run it.\n\n159\n00:07:01.113 --> 00:07:08.264\nSo I'm saying ./ to tell it the program is\nright here in this folder, myscript.sh.\n\n160\n00:07:08.264 --> 00:07:10.740\nNow when I run that Permission denied.\n\n161\n00:07:11.950 --> 00:07:13.270\nWhat's that all about?\n\n162\n00:07:13.270 --> 00:07:15.590\nWell it's not a program.\n\n163\n00:07:15.590 --> 00:07:19.468\nIf we do ls -lh and take a look at it.\n\n164\n00:07:19.468 --> 00:07:20.930\nHere's myScript.sh.\n\n165\n00:07:20.930 --> 00:07:25.920\nAnd if I look at the permissions\nover here, see how it's read write,\n\n166\n00:07:25.920 --> 00:07:27.700\nread and read.\n\n167\n00:07:27.700 --> 00:07:29.794\nThere are no x's, x is for execute.\n\n168\n00:07:29.794 --> 00:07:31.360\nPrograms are executable.\n\n169\n00:07:31.360 --> 00:07:33.091\nDirectories are technically\nexecutable too,\n\n170\n00:07:33.091 --> 00:07:35.290\nbecause you execute them\nwhen you browse into them.\n\n171\n00:07:35.290 --> 00:07:38.048\nBut applications are executable,\nthis is not.\n\n172\n00:07:38.048 --> 00:07:41.553\nAnd it doesn't need to be\nbecause it's not a program.\n\n173\n00:07:41.553 --> 00:07:43.500\nIt's just a series of commands, right?\n\n174\n00:07:43.500 --> 00:07:46.640\nAnd I can call instead an interpreter.\n\n175\n00:07:46.640 --> 00:07:54.439\nI can call bash and\ntell BASH to run myscript.sh, okay.\n\n176\n00:07:54.439 --> 00:07:57.733\nAnd when I do that, BASH is gonna read it,\nand just to be on the safe side,\n\n177\n00:07:57.733 --> 00:08:00.562\nI'm gonna add a ./ so\nthat I know BASH will be able to find it.\n\n178\n00:08:00.562 --> 00:08:02.066\nAnd so I'm gonna provide that.\n\n179\n00:08:02.066 --> 00:08:08.120\nAnd there it goes, it ran ls -lh,\nwhich is what was in that text file.\n\n180\n00:08:08.120 --> 00:08:11.787\nBash just ran whatever was in that file,\nokay?\n\n181\n00:08:11.787 --> 00:08:15.620\nSo that shows us how it's just a text\nfile, there's nothing too fancy about it.\n\n182\n00:08:16.690 --> 00:08:20.380\nBut I said that they\nalmost act like a program.\n\n183\n00:08:20.380 --> 00:08:22.260\nThis didn't act like a program, did it?\n\n184\n00:08:22.260 --> 00:08:24.560\nBut we can make it act like a program,\nright?\n\n185\n00:08:24.560 --> 00:08:27.280\nThere's two steps we can do to\nmake it act like a program.\n\n186\n00:08:27.280 --> 00:08:29.970\nThe first is we need to edit it.\n\n187\n00:08:29.970 --> 00:08:32.270\nAnd I'm gonna edit that file and\ngo back into it.\n\n188\n00:08:32.270 --> 00:08:36.564\nAnd on the very first line\nyou can add an entry,\n\n189\n00:08:36.564 --> 00:08:40.101\nan entry who's gonna look like this.\n\n190\n00:08:40.101 --> 00:08:44.460\n#!, followed by the path\nto an interpreter.\n\n191\n00:08:44.460 --> 00:08:48.480\nYou can put which interpreter to\nuse right inside of the script.\n\n192\n00:08:48.480 --> 00:08:53.130\nSo if it's for bash, if it's for\ncsh, or tcsh, or dash,\n\n193\n00:08:53.130 --> 00:08:57.240\nor whatever, you can put the path\nto that interpreter right here.\n\n194\n00:08:57.240 --> 00:08:59.170\nAnd now, when we run this file,\n\n195\n00:08:59.170 --> 00:09:03.030\nit'll know which interpreter to use\neven if I don't provide one, okay?\n\n196\n00:09:03.030 --> 00:09:09.157\nSo I'm gonna do #!, and\nthen I'll say /bin/bash, right?\n\n197\n00:09:09.157 --> 00:09:11.767\nAnd if you don't know where your bash is,\n\n198\n00:09:11.767 --> 00:09:15.000\nyou just type which bash\nfrom a command prompt.\n\n199\n00:09:15.000 --> 00:09:18.510\nSo if I say which bash,\nit'll tell you exactly where it is, right?\n\n200\n00:09:18.510 --> 00:09:20.860\nMine's in /bin/bash.\n\n201\n00:09:20.860 --> 00:09:24.880\nSo in this case, that's where it is,\nand then there's my program.\n\n202\n00:09:24.880 --> 00:09:30.910\nNow, the initial pound symbol is doing\nwhat's called commenting out a line.\n\n203\n00:09:30.910 --> 00:09:32.040\nYou can comment out a line,\n\n204\n00:09:32.040 --> 00:09:34.940\nany line that has a pound at\nthe beginning doesn't get interpreted.\n\n205\n00:09:34.940 --> 00:09:36.435\nSo if I wanna put a note in here, right?\n\n206\n00:09:36.435 --> 00:09:40.662\nI could say this is a note, but\nit's gonna try and run that.\n\n207\n00:09:40.662 --> 00:09:43.790\nAnd it's gonna give an error,\ncuz there's no this command.\n\n208\n00:09:43.790 --> 00:09:47.190\nBut if I stick a # before it,\nthat's not going to get run now.\n\n209\n00:09:47.190 --> 00:09:50.645\nAnd it gets ignored, so\nyou can put notes in here if you want.\n\n210\n00:09:50.645 --> 00:09:52.931\nAnd that's called doing a documentation,\nright?\n\n211\n00:09:52.931 --> 00:09:54.382\nAnd a good developer does that, so\n\n212\n00:09:54.382 --> 00:09:57.128\nyou can remember why the heck\nyou did certain things.\n\n213\n00:09:57.128 --> 00:10:00.490\nSo that # is doing that, and\nthen the exclamation point after it\n\n214\n00:10:00.490 --> 00:10:04.390\nis what's telling it,\nhere's the interpreter we're going to use.\n\n215\n00:10:04.390 --> 00:10:07.250\nSo it's not actually\ntelling it to run bash,\n\n216\n00:10:07.250 --> 00:10:11.610\nit's telling it to use bash to\nrun this script, all right?\n\n217\n00:10:11.610 --> 00:10:14.960\nSo now that I've got that defined,\nI can get out of this file.\n\n218\n00:10:17.550 --> 00:10:19.870\nAnd I can run it, well, not quite.\n\n219\n00:10:19.870 --> 00:10:22.190\nIf I try and run it right now,\nif I try and run myscript.sh,\n\n220\n00:10:22.190 --> 00:10:23.452\nI still get Permission denied.\n\n221\n00:10:23.452 --> 00:10:27.160\nCuz it doesn't have\nthe execute permissions, right?\n\n222\n00:10:27.160 --> 00:10:31.400\nSo I need to grant execute permissions on\nit, so I'm gonna use the chmod command.\n\n223\n00:10:31.400 --> 00:10:34.990\nIf you don't remember this command, check\nout our episode on file permissions and\n\n224\n00:10:34.990 --> 00:10:36.080\nwe show how to use it.\n\n225\n00:10:36.080 --> 00:10:39.580\nBut I just need to add\nexecute to this application.\n\n226\n00:10:39.580 --> 00:10:43.380\nAnd I need to determine whether\nI want just me to use it, or\n\n227\n00:10:43.380 --> 00:10:45.030\nmy group, or everyone.\n\n228\n00:10:45.030 --> 00:10:48.638\nIf I want everyone to be able\nto able to execute this,\n\n229\n00:10:48.638 --> 00:10:51.430\nI would just say +x ./myscript.sh.\n\n230\n00:10:51.430 --> 00:10:54.980\nThat's gonna make it where\neverybody can run it.\n\n231\n00:10:54.980 --> 00:10:58.760\nBut if I just want me to be able to run\nit, I'm the owner of this script, so\n\n232\n00:10:58.760 --> 00:11:02.970\nI could say u+x, and\nthat would be the user, just me.\n\n233\n00:11:02.970 --> 00:11:04.990\nBut I'll let everybody run it.\n\n234\n00:11:04.990 --> 00:11:09.640\nDo be careful, you don't wanna give\npeople write permissions and execute,\n\n235\n00:11:09.640 --> 00:11:11.650\ncuz then they can modify the script and\nrun it.\n\n236\n00:11:11.650 --> 00:11:14.840\nSo that can be dangerous, and\nnormally we just give them execute.\n\n237\n00:11:14.840 --> 00:11:18.910\nAnd if I look right now, I'm the only\none who has write permissions up here.\n\n238\n00:11:20.750 --> 00:11:25.050\nSo if I give execute to everybody else,\nthey just have read and execute, and\n\n239\n00:11:25.050 --> 00:11:28.360\nthat's normally what I want, so\nI'm gonna go ahead and do that.\n\n240\n00:11:28.360 --> 00:11:31.334\nAnd when I do an ls -lh and look,\nnow I can see that it's got execute.\n\n241\n00:11:31.334 --> 00:11:38.920\nI also see something else,\nlook at the color of myscript.sh.\n\n242\n00:11:38.920 --> 00:11:44.250\nUp here, it was white,\nright here, it was white.\n\n243\n00:11:44.250 --> 00:11:49.420\nNow it's green, and\nthat's because with ls's color option,\n\n244\n00:11:49.420 --> 00:11:51.948\nexecutables, programs, are lit up green.\n\n245\n00:11:51.948 --> 00:11:55.015\nNow myscript.sh looks like a program, and\n\n246\n00:11:55.015 --> 00:11:58.045\nin the first line it tells\nit what interpreter to use.\n\n247\n00:11:58.045 --> 00:12:01.675\nAnd so if I call it directly,\nif I just call myscript.sh,\n\n248\n00:12:01.675 --> 00:12:06.025\nI'm not telling it to use bash,\nI'm just calling that directly.\n\n249\n00:12:07.245 --> 00:12:09.605\nIt runs, and it does its job, right?\n\n250\n00:12:09.605 --> 00:12:11.565\nNow it acts like a program.\n\n251\n00:12:11.565 --> 00:12:15.640\nIf this were in the path, I could run\nmyscript.sh at any prompt in here, and\n\n252\n00:12:15.640 --> 00:12:17.490\nit would run, and\nnow it acts just like a program.\n\n253\n00:12:17.490 --> 00:12:20.509\nAnd that's why it's so easy to confuse\nit and think that it's a program,\n\n254\n00:12:20.509 --> 00:12:22.550\nwhen in reality it is just a text file.\n\n255\n00:12:22.550 --> 00:12:23.750\nAnd I can go in and edit it,\n\n256\n00:12:23.750 --> 00:12:28.370\nI can add more behavior to it if I\nstart to mess with that file some more.\n\n257\n00:12:28.370 --> 00:12:30.870\nI could add another line\ndown here at the end.\n\n258\n00:12:30.870 --> 00:12:33.670\nLet me come in here, and\nI'll just say like, pwd.\n\n259\n00:12:33.670 --> 00:12:35.780\nSo it's gonna do the directory listing,\nand\n\n260\n00:12:35.780 --> 00:12:37.940\nthen it's gonna show\nthe present working directory.\n\n261\n00:12:37.940 --> 00:12:40.450\nAnd so I'll have it run those.\n\n262\n00:12:40.450 --> 00:12:44.480\nSo before, you see where it\nexported the directory listing and\n\n263\n00:12:44.480 --> 00:12:46.160\nthen dropped me to a prompt.\n\n264\n00:12:46.160 --> 00:12:49.920\nNow when I run it,\nit exports the directory listing\n\n265\n00:12:49.920 --> 00:12:52.588\nfollowed by the present working directory,\nand then drops you to a prompt, right?\n\n266\n00:12:52.588 --> 00:12:56.090\nSo it is running command after command,\nand I can modify it and go.\n\n267\n00:12:56.090 --> 00:13:00.590\nHere I can kind of adapt it to my needs\nand get it configured to run perfectly.\n\n268\n00:13:00.590 --> 00:13:04.320\n&gt;&gt; So Don, when we're running the script,\nare we running the same thing every time?\n\n269\n00:13:04.320 --> 00:13:06.710\nIs it doing the same thing,\nthe same activity every time?\n\n270\n00:13:06.710 --> 00:13:08.830\n&gt;&gt; So\nthe way I've written the script, yes.\n\n271\n00:13:08.830 --> 00:13:10.510\nIf I call the script five times,\n\n272\n00:13:10.510 --> 00:13:12.790\nit's gonna run the exact same\ncommand five times, right?\n\n273\n00:13:12.790 --> 00:13:14.759\nSo it's just gonna be\nrunning this over and over.\n\n274\n00:13:14.759 --> 00:13:16.460\nIt's not very exciting, right?\n\n275\n00:13:16.460 --> 00:13:20.220\nBut that's not how most scripts are,\nI mean, maybe it is.\n\n276\n00:13:20.220 --> 00:13:24.230\nMaybe you have a script that's written\nto back up your home directory.\n\n277\n00:13:24.230 --> 00:13:25.980\nAnd you wanna do the same\nbackup every time, right?\n\n278\n00:13:25.980 --> 00:13:27.240\nI want it to run that backup.\n\n279\n00:13:27.240 --> 00:13:29.790\nBut normally,\nI want it to change a little bit, right?\n\n280\n00:13:29.790 --> 00:13:32.710\nBecause I might want to keep\none backup from each day.\n\n281\n00:13:32.710 --> 00:13:35.470\nSo I don't want Tuesday's backup\nto overwrite Monday's backup,\n\n282\n00:13:35.470 --> 00:13:36.910\nthat kind of stuff, right?\n\n283\n00:13:36.910 --> 00:13:40.150\nSo we can use variables and other things,\n\n284\n00:13:40.150 --> 00:13:43.690\nother kinds of input into the script,\nto change what it does, so\n\n285\n00:13:43.690 --> 00:13:47.180\nthat it can behave differently based\non changing situations, right?\n\n286\n00:13:47.180 --> 00:13:49.840\nAnd that's how most of our commands are,\nlike the ls command.\n\n287\n00:13:49.840 --> 00:13:54.160\nIf I run ls by itself, it's pulling up\na listing right here in my home directory.\n\n288\n00:13:54.160 --> 00:13:59.190\nBut I can say, ls /bin, and I'm pulling\nit up from the binary directory.\n\n289\n00:13:59.190 --> 00:14:04.550\nOr ls /sbin, and it's pulling it\nup from that directory, right?\n\n290\n00:14:04.550 --> 00:14:08.030\nSo that ls command is\nchanging each time I run it\n\n291\n00:14:08.030 --> 00:14:10.260\nbecause of the command line\narguments I'm providing.\n\n292\n00:14:10.260 --> 00:14:12.030\nWe can do the same thing with a script.\n\n293\n00:14:12.030 --> 00:14:14.900\nWith a script, I can make it where,\nwhen I ran myscript.sh,\n\n294\n00:14:14.900 --> 00:14:20.690\nI then followed it up by providing\nadditional data that it could act upon.\n\n295\n00:14:20.690 --> 00:14:22.858\nAnd it would change the way that\nthat script behaves, right?\n\n296\n00:14:22.858 --> 00:14:25.226\nNow, that's a little bit more advanced,\nbut let's take a look at it,\n\n297\n00:14:25.226 --> 00:14:27.390\ncuz variables are very important.\n\n298\n00:14:27.390 --> 00:14:30.410\nI'm gonna get back into that script,\nall right?\n\n299\n00:14:30.410 --> 00:14:33.110\nAnd let's change this, this one's\njust pulling up a directory listing.\n\n300\n00:14:33.110 --> 00:14:35.200\nI'm gonna just get rid of that stuff.\n\n301\n00:14:35.200 --> 00:14:38.760\nAnd we'll go a little more\ncreative on this one, okay?\n\n302\n00:14:38.760 --> 00:14:40.190\nWhen you write a script,\n\n303\n00:14:40.190 --> 00:14:42.700\none of the hardest things to do is\nto keep it neat and clean, right?\n\n304\n00:14:42.700 --> 00:14:45.440\nSo as you start adding more and\nmore commands, it gets a bit messy.\n\n305\n00:14:45.440 --> 00:14:46.590\nAnd so you wanna try and\n\n306\n00:14:46.590 --> 00:14:50.670\nmaintain some good structure,\nfollow a good naming convention,\n\n307\n00:14:50.670 --> 00:14:54.170\nand leave room in between commands so\nit's there for troubleshooting.\n\n308\n00:14:54.170 --> 00:14:56.140\nA blank line just gets ignored.\n\n309\n00:14:56.140 --> 00:14:59.000\nSo I usually leave a blank line\nright after that first entry, and\n\n310\n00:14:59.000 --> 00:15:00.650\nthen I start putting my commands in.\n\n311\n00:15:00.650 --> 00:15:04.210\nBut it's up to you how you wanna go in and\ndefine that.\n\n312\n00:15:04.210 --> 00:15:07.990\nSo I'm gonna create a simple script\nhere that's going to leverage\n\n313\n00:15:07.990 --> 00:15:10.010\nusing a couple of variables.\n\n314\n00:15:10.010 --> 00:15:13.530\nA variable is like\na placeholder in memory.\n\n315\n00:15:13.530 --> 00:15:16.577\nI can provide it some data, and it can\nstick it in memory and hold on to it.\n\n316\n00:15:16.577 --> 00:15:21.390\nAnd then it can recall that\ndata as it needs it, okay?\n\n317\n00:15:21.390 --> 00:15:23.260\nThere's variables that\nare created manually,\n\n318\n00:15:23.260 --> 00:15:26.080\nand there's valuables that\nare created automatically.\n\n319\n00:15:26.080 --> 00:15:31.740\nManual ones, we give a name, so\nI might create a variable called fullname.\n\n320\n00:15:31.740 --> 00:15:36.258\nAnd I might choose to store in that\nvariable Don Pezet, that's my full name.\n\n321\n00:15:36.258 --> 00:15:37.880\nAnd so\nanytime I need to pull my full name,\n\n322\n00:15:37.880 --> 00:15:40.060\nI could pull from\na variable called fullname.\n\n323\n00:15:40.060 --> 00:15:42.416\nOr I could put Zach's name in there,\nand now when I call fullname,\n\n324\n00:15:42.416 --> 00:15:43.902\nI'll get Zach's name instead, right?\n\n325\n00:15:43.902 --> 00:15:46.798\nIt's a placeholder, it's got a name.\n\n326\n00:15:46.798 --> 00:15:49.072\nBut I might just be\ndoing this dynamically.\n\n327\n00:15:49.072 --> 00:15:53.461\nAnd when you feed information into\na command, like when I did ls /bin,\n\n328\n00:15:53.461 --> 00:15:56.680\nthe /bin was being stored\nIn a temporary variable,\n\n329\n00:15:56.680 --> 00:16:00.793\none that was created on the fly,\nand those are just given a number.\n\n330\n00:16:00.793 --> 00:16:03.960\nVariable number one, variable number two,\nvariable number three, each command line\n\n331\n00:16:03.960 --> 00:16:07.290\nargument you provide, you're just\ngiving another number, and that's it.\n\n332\n00:16:07.290 --> 00:16:08.670\nThose work great.\n\n333\n00:16:08.670 --> 00:16:10.620\nThey're just hard to troubleshoot.\n\n334\n00:16:10.620 --> 00:16:13.250\nIt's hard to figure out,\nwhat was variable three again?\n\n335\n00:16:13.250 --> 00:16:16.530\nLet me go back to the line and look,\nand it gets kind of confusing.\n\n336\n00:16:16.530 --> 00:16:20.630\nSo we'll usually use named variables if\nwe can, just for our sanity, right, but\n\n337\n00:16:20.630 --> 00:16:21.740\nyou don't have to.\n\n338\n00:16:21.740 --> 00:16:23.630\nSo let me start off with\nautomatic variables, and\n\n339\n00:16:23.630 --> 00:16:25.990\nthen we'll go to named ones\nthat makes a little more sense.\n\n340\n00:16:25.990 --> 00:16:30.140\nSo, let's say that I wanted to echo\non the screen my full name, okay?\n\n341\n00:16:30.140 --> 00:16:32.720\nWell, with echoes,\nwe can do a few different ways, right?\n\n342\n00:16:32.720 --> 00:16:37.510\nSo like here, if I just go in this prompt,\nI can type echo Don Pezet, and\n\n343\n00:16:37.510 --> 00:16:39.330\nthen when I run it, it echoes my name.\n\n344\n00:16:39.330 --> 00:16:40.870\nThere it is, right?\n\n345\n00:16:40.870 --> 00:16:45.361\nBut if I wanna provide my name\nto the program as a variable,\n\n346\n00:16:45.361 --> 00:16:47.390\nright, I can do that too.\n\n347\n00:16:47.390 --> 00:16:50.837\nAnd if it's a script that needs my name\nto be able to stick it in a report or\n\n348\n00:16:50.837 --> 00:16:55.060\nsomething like that, I can provide it\nin a variable and put it in the script.\n\n349\n00:16:55.060 --> 00:17:00.522\nSo, to do that I can just run,\nwhen I run myscript.sh,\n\n350\n00:17:00.522 --> 00:17:05.298\nI can then follow that up with Don Pezet,\nright.\n\n351\n00:17:05.298 --> 00:17:08.422\nNow my problem is that there's\na space in between, and so\n\n352\n00:17:08.422 --> 00:17:12.340\nit's gonna see Don as variable one,\nand Pezet as variable number two.\n\n353\n00:17:13.350 --> 00:17:16.326\nAll right, that's okay, but when I echo\nit, I need to echo both of them so\n\n354\n00:17:16.326 --> 00:17:18.390\nI got the plan for that or\nI can stick them in quotes.\n\n355\n00:17:18.390 --> 00:17:23.350\nIf I put quotes around it,\nnow it knows that's one value, okay.\n\n356\n00:17:23.350 --> 00:17:26.160\nBut for the sake of complexity,\nlet's treat them separately.\n\n357\n00:17:26.160 --> 00:17:29.992\nSo if I run the script myscript.sh and\nI get it Don followed by Pezet,\n\n358\n00:17:29.992 --> 00:17:33.174\nthat's two variables,\nvariable one and variable two.\n\n359\n00:17:33.174 --> 00:17:38.157\nAnd so in my script, I can tell it to\nhandle that, I can say, all right,\n\n360\n00:17:38.157 --> 00:17:42.210\nwell, I wanna echo the full\nname of this user, okay?\n\n361\n00:17:42.210 --> 00:17:46.690\nBut the full name is being given\nto me inside of these variables.\n\n362\n00:17:46.690 --> 00:17:50.801\nAnd so instead of being able to say,\necho \"Don Pezet\", like that, right,\n\n363\n00:17:50.801 --> 00:17:52.970\nif I run that, it's gonna echo my name.\n\n364\n00:17:52.970 --> 00:17:56.241\nBut it's always going to echo my name and\nnobody elses, like Zack S.\n\n365\n00:17:56.241 --> 00:17:57.738\nIs it always gonna do\nthe same thing this way?\n\n366\n00:17:57.738 --> 00:17:58.783\nYes.\n\n367\n00:17:58.783 --> 00:18:06.829\nBut if I replace those words with $1 and\n$2, okay.\n\n368\n00:18:06.829 --> 00:18:12.679\nWhen I do that, now what it's\ngonna echo is my first name and\n\n369\n00:18:12.679 --> 00:18:16.240\na space and my last name, right?\n\n370\n00:18:16.240 --> 00:18:20.440\nIt's handling those variables and\nit's outputting them, okay?\n\n371\n00:18:20.440 --> 00:18:24.880\nNow, if I say that, oops,\nif I remember how to use vi and\n\n372\n00:18:24.880 --> 00:18:30.535\nsave that and I run it,\nif I just run myscript.sh,\n\n373\n00:18:30.535 --> 00:18:35.440\nit not gonna be too happy because I'm not\ngiving it the information it needs, so\n\n374\n00:18:35.440 --> 00:18:36.690\nI get nothing back.\n\n375\n00:18:36.690 --> 00:18:41.455\nBut if I tell it Don Pezet,\nit's gonna read those and\n\n376\n00:18:41.455 --> 00:18:48.200\nthen it outputs it, or I could say\nZack Memos and there it is, right.\n\n377\n00:18:48.200 --> 00:18:51.390\nNow it's behaving differently\nevery time I run it\n\n378\n00:18:51.390 --> 00:18:53.630\nbecause of the command line\narguments I'm providing it.\n\n379\n00:18:53.630 --> 00:18:56.830\nAnd you can get really\nfancy with this stuff.\n\n380\n00:18:56.830 --> 00:19:01.672\nWhen you're in here editing these things,\nyou can do a lot of different cool things.\n\n381\n00:19:01.672 --> 00:19:06.340\nSo if I wanted to spice\nthis up a little bit,\n\n382\n00:19:06.340 --> 00:19:12.566\nI could come in and\nI could say like echo first name $1 and\n\n383\n00:19:12.566 --> 00:19:18.569\nthen I could echo last name $2 and\nthe echo full name.\n\n384\n00:19:20.589 --> 00:19:24.030\n$1, $2,\nI'm using the variable more than once.\n\n385\n00:19:24.030 --> 00:19:28.780\nAnd by using it more than once like this,\nwell, I can save that.\n\n386\n00:19:29.800 --> 00:19:34.050\nAnd now when I run that script like this,\nit's gonna use them over and\n\n387\n00:19:34.050 --> 00:19:38.210\nover again, so there we see it, Firstname\nDon, Lastname Pezet, Full Name Don Pezet.\n\n388\n00:19:38.210 --> 00:19:39.350\nThere it is, right?\n\n389\n00:19:39.350 --> 00:19:41.570\nThose variables become very powerful.\n\n390\n00:19:41.570 --> 00:19:45.440\nNow, the bigger this script gets, the more\ncomplex, I mean, there's scripts out there\n\n391\n00:19:45.440 --> 00:19:50.090\nthat are thousands of lines long, I start\nlooking at them and I see $1, I see $2.\n\n392\n00:19:50.090 --> 00:19:50.689\nYou forget what those are.\n\n393\n00:19:50.689 --> 00:19:52.920\nSo that's where name\nvariables come in very handy.\n\n394\n00:19:53.980 --> 00:19:55.610\nBut there's also another thing.\n\n395\n00:19:55.610 --> 00:19:58.980\nVariables don't have to be\npassed in the command line.\n\n396\n00:19:58.980 --> 00:20:03.870\nWe can actually generate the variables\nright here inside of the script itself.\n\n397\n00:20:03.870 --> 00:20:07.820\nAnd we can be populating data from other\ncommands and all sorts of crazy things,\n\n398\n00:20:07.820 --> 00:20:14.370\nlike let's say that I wanted to see\nwhat shell I was running, right?\n\n399\n00:20:14.370 --> 00:20:18.550\nWell, we actually have\na variable already $SHELL,\n\n400\n00:20:18.550 --> 00:20:21.590\nthat's a part of our user environment.\n\n401\n00:20:21.590 --> 00:20:24.090\nAnd so I can pull that up in\na regular command prompt,\n\n402\n00:20:24.090 --> 00:20:26.850\nI can pull that up inside\nof my script also.\n\n403\n00:20:26.850 --> 00:20:28.640\nThe scripts can take advantage of that.\n\n404\n00:20:28.640 --> 00:20:33.468\nSo, I might come in here and say something\nlike, here's my FirstName, LastName,\n\n405\n00:20:33.468 --> 00:20:38.693\nFull Name, and\nthen after that I say echo, And\n\n406\n00:20:38.693 --> 00:20:41.800\nhere I'm gonna echo what my shell is.\n\n407\n00:20:41.800 --> 00:20:43.805\nAnd I'll call $SHELL.\n\n408\n00:20:43.805 --> 00:20:47.620\nNow $SHELL is not being\ndefined here in this script.\n\n409\n00:20:47.620 --> 00:20:51.761\nIt's defined in my operating system,\nin my bash environment outside, but\n\n410\n00:20:51.761 --> 00:20:53.001\nI can still use those.\n\n411\n00:20:53.001 --> 00:20:54.765\nThose are called system variables, right.\n\n412\n00:20:54.765 --> 00:20:57.738\nThese that I'm creating here\nare application variables.\n\n413\n00:20:57.738 --> 00:21:00.300\nThere's system variables and\nthere's user variables also.\n\n414\n00:21:00.300 --> 00:21:03.480\nSo we can pull from any one of these,\nbut you can make use of those.\n\n415\n00:21:03.480 --> 00:21:04.685\nThis one just has a nice name.\n\n416\n00:21:04.685 --> 00:21:08.656\nWhen I look at $SHELL,\nI know what that is, it's not $5 [LAUGH].\n\n417\n00:21:08.656 --> 00:21:10.991\n&gt;&gt; [LAUGH]\n&gt;&gt; So that makes a lot of sense and\n\n418\n00:21:10.991 --> 00:21:13.360\nit's typically what we want.\n\n419\n00:21:13.360 --> 00:21:15.055\nYou may not even be using a variable,\n\n420\n00:21:15.055 --> 00:21:18.030\nI might wanna echo something\nlike the date, right?\n\n421\n00:21:18.030 --> 00:21:21.850\nThe date is, and\nI want the date to go in here, okay?\n\n422\n00:21:21.850 --> 00:21:26.310\nI could get the date, store it in\na variable, and recall the variable here.\n\n423\n00:21:26.310 --> 00:21:27.450\nOr I could say you know what?\n\n424\n00:21:27.450 --> 00:21:28.840\nI'm just gonna run the date command.\n\n425\n00:21:28.840 --> 00:21:30.440\nThe date command returns the date.\n\n426\n00:21:30.440 --> 00:21:34.790\nWell, if you wanna run a command in a\nscript that's inside of an echo like this,\n\n427\n00:21:34.790 --> 00:21:36.610\nyou have to use a little\nback tick to do it.\n\n428\n00:21:36.610 --> 00:21:39.090\nThe back tick is at the top\nleft of your keyboard,\n\n429\n00:21:39.090 --> 00:21:42.290\nit shares the tilde button\non the regular US keyboard.\n\n430\n00:21:42.290 --> 00:21:45.965\nBut I'm gonna do a back tick, and\njust type in date, like that, and\n\n431\n00:21:45.965 --> 00:21:48.830\nthrow the end closing quote, right.\n\n432\n00:21:48.830 --> 00:21:51.060\nSo the date is, and\nit's gonna run that program.\n\n433\n00:21:51.060 --> 00:21:54.420\nWhat it's actually doing is creating\na temporary variable to store that date,\n\n434\n00:21:54.420 --> 00:21:54.990\nI just never see it.\n\n435\n00:21:54.990 --> 00:21:56.867\nI don't even see the name\nof that variable,\n\n436\n00:21:56.867 --> 00:22:00.268\nbecause its just gonna output this data\nand it's gonna come out on the screen and\n\n437\n00:22:00.268 --> 00:22:02.063\nwe'll get that information right here.\n\n438\n00:22:02.063 --> 00:22:06.580\n&gt;&gt; Now Don, some scripts are actually\nasking us for some information.\n\n439\n00:22:06.580 --> 00:22:08.092\nCan we provide that and how do we do that?\n\n440\n00:22:08.092 --> 00:22:10.481\n&gt;&gt; Yeah, so\nusing this script as an example here,\n\n441\n00:22:10.481 --> 00:22:12.392\nI have to give it the information, and\n\n442\n00:22:12.392 --> 00:22:16.370\nif I don't give it the information it\njust doesn't output anything, right?\n\n443\n00:22:16.370 --> 00:22:21.020\nSo if I, let me save this,\nand I'll go back out here.\n\n444\n00:22:21.020 --> 00:22:23.777\nAnd let's just run it real quick to\nmake sure it works, right [LAUGH].\n\n445\n00:22:23.777 --> 00:22:25.520\n&gt;&gt; [LAUGH]\n&gt;&gt; So that makes a difference.\n\n446\n00:22:25.520 --> 00:22:30.000\nSo I'm going to run it, and when I run it,\nsee how Firstname and Lastname are empty,\n\n447\n00:22:30.000 --> 00:22:33.760\nFull Name is empty cuz I\ndidn't provide any operators.\n\n448\n00:22:33.760 --> 00:22:37.700\nAnd then, here, I see Shell,\nit actually returned bin bash, right?\n\n449\n00:22:37.700 --> 00:22:39.320\nBecause of the $SHELL.\n\n450\n00:22:39.320 --> 00:22:42.200\nAnd date, it actually ran that\ndate command and did that but\n\n451\n00:22:42.200 --> 00:22:43.910\nI had to provide the data.\n\n452\n00:22:43.910 --> 00:22:48.290\nAnd if I know to do that, great,\nI can provide the data and\n\n453\n00:22:48.290 --> 00:22:50.930\nnow the script is fully populated and\nit works.\n\n454\n00:22:50.930 --> 00:22:54.240\nBut, most users don't know\nto provide the data and\n\n455\n00:22:54.240 --> 00:22:57.390\nthey don't what order it should go in and\nall that.\n\n456\n00:22:57.390 --> 00:23:01.930\nSo, it's very common to do,\nas Zach was asking, and ask for the data.\n\n457\n00:23:01.930 --> 00:23:05.330\nWe can have our script say, hey can you\ntell me what your first name is, can you\n\n458\n00:23:05.330 --> 00:23:09.620\ntell me what your last name is, and then\nit can use that to populate the variables.\n\n459\n00:23:09.620 --> 00:23:13.139\nThat's nice for user interaction for,\nlike an interactive script, but\n\n460\n00:23:13.139 --> 00:23:16.049\nif you're trying to automate things,\nthat's not so nice.\n\n461\n00:23:16.049 --> 00:23:18.894\nSo with automation,\nyou want it to be all in the command line,\n\n462\n00:23:18.894 --> 00:23:22.360\nthey're on one command that gets\nthe job done, and that's it.\n\n463\n00:23:22.360 --> 00:23:24.010\nIf it's asking for information,\n\n464\n00:23:24.010 --> 00:23:27.150\nyou've gotta be there watching\nit to give it the information.\n\n465\n00:23:27.150 --> 00:23:29.970\nSo it's not something you schedule around\nat 2 AM in the morning unless you were\n\n466\n00:23:29.970 --> 00:23:32.200\ngonna be there at 2 AM in the morning.\n\n467\n00:23:32.200 --> 00:23:35.020\nBut for usability,\nboy does it make things easier.\n\n468\n00:23:35.020 --> 00:23:38.363\nSo, let me show you how to do it because\nI'll do this on a lot of my scripts where\n\n469\n00:23:38.363 --> 00:23:40.740\nI wanna be able to provide\nthat information on the fly.\n\n470\n00:23:40.740 --> 00:23:44.574\nSo if I go back to my script, and\nlet's say that I wanted to ask for\n\n471\n00:23:44.574 --> 00:23:49.331\nthe first name and ask for the last name,\nI don't need to ask for the full name cuz\n\n472\n00:23:49.331 --> 00:23:54.240\nI can build that from the first and\nlast name, so I don't need to do it there.\n\n473\n00:23:54.240 --> 00:23:57.845\nBut what we can do is use\na special command called Read.\n\n474\n00:23:57.845 --> 00:24:01.287\nThe read command is\ndesigned to receive data.\n\n475\n00:24:01.287 --> 00:24:04.359\nIt's actually the opposite\nof the echo command.\n\n476\n00:24:04.359 --> 00:24:08.895\nThe echo command outputs data,\nthe read command inputs data, right?\n\n477\n00:24:08.895 --> 00:24:12.380\nSo it's receiving versus sending or\nspeaking versus listening, right?\n\n478\n00:24:12.380 --> 00:24:15.742\nEcho is a speaking command,\nread is a listening command.\n\n479\n00:24:15.742 --> 00:24:17.952\nSo I'm gonna go up here in my file and\n\n480\n00:24:17.952 --> 00:24:22.156\nI'm gonna say when somebody runs\nthis script, I'm going to read,\n\n481\n00:24:22.156 --> 00:24:26.831\nI'm gonna spell read right, hand in\nthe wrong spot on the keyboard there.\n\n482\n00:24:26.831 --> 00:24:27.855\n&gt;&gt; There's an r in it.\n\n483\n00:24:27.855 --> 00:24:32.324\n&gt;&gt; And then dash p, because I'm\ngonna prompt for the data, right?\n\n484\n00:24:32.324 --> 00:24:34.598\nI'm not just gonna expect them\nto all of a sudden start typing.\n\n485\n00:24:34.598 --> 00:24:36.685\nI need to give them a prompt,\nso they know what to type.\n\n486\n00:24:36.685 --> 00:24:44.028\nAnd I'm gonna tell them,\nenter first name, like that, okay?\n\n487\n00:24:44.028 --> 00:24:47.130\nAnd I did a colon and\na space cuz most people expect that.\n\n488\n00:24:47.130 --> 00:24:50.880\nYeah, when you see a prompt you expect\nit to be kind of colon or a delimiter or\n\n489\n00:24:50.880 --> 00:24:51.790\nsome sort in a space.\n\n490\n00:24:51.790 --> 00:24:54.191\nSo I'm gonna say enter the first name,\nokay?\n\n491\n00:24:54.191 --> 00:24:58.739\nAnd then after that,\nI'm gonna type a variable name.\n\n492\n00:24:58.739 --> 00:25:02.100\nI'm gonna say take whatever they type and\nstick in a variable.\n\n493\n00:25:02.100 --> 00:25:04.320\nAnd I'm gonna call this variable FNAME.\n\n494\n00:25:04.320 --> 00:25:06.080\nFNAME for first name, right?\n\n495\n00:25:06.080 --> 00:25:09.495\nAnd then, I'm gonna say read dash p,\n\n496\n00:25:09.495 --> 00:25:15.800\nEnter Lastname like that, and\nI'm gonna store that in LNAME.\n\n497\n00:25:17.060 --> 00:25:20.993\nThese variables are named, so\nit's really easy for me to use.\n\n498\n00:25:20.993 --> 00:25:25.654\nWhen I come out here to echo out the first\nname, instead of echoing dollar sign one,\n\n499\n00:25:25.654 --> 00:25:27.200\nI can go dollar sign FNAME.\n\n500\n00:25:27.200 --> 00:25:31.245\nAnd instead of echoing dollar sign 2,\nI can echo dollar sign LNAME.\n\n501\n00:25:31.245 --> 00:25:35.560\nAnd for the full name it's simply\ngonna be dollar sign FNAME and\n\n502\n00:25:35.560 --> 00:25:39.020\na space, and\nthen dollar sign LNAME, like that.\n\n503\n00:25:39.020 --> 00:25:42.460\nI'm using these named variables,\nthat makes life so much easier, right?\n\n504\n00:25:42.460 --> 00:25:46.296\nI could have done named variables for\nfirst name and last name before as well,\n\n505\n00:25:46.296 --> 00:25:48.021\nall I have to do is give them a name.\n\n506\n00:25:48.021 --> 00:25:53.594\nUp at the top of my file I could said,\nFNAME equals dollar sign 1.\n\n507\n00:25:53.594 --> 00:25:58.243\nAnd it would have taken that first\nvariable and stored it in FNAME, or\n\n508\n00:25:58.243 --> 00:26:01.440\nLNAME equals dollar sign 2, like that.\n\n509\n00:26:01.440 --> 00:26:04.950\nAnd received those values and\nstored them in a named variable.\n\n510\n00:26:04.950 --> 00:26:07.740\nIt really makes no difference, though,\nbecause you're taking one variable and\n\n511\n00:26:07.740 --> 00:26:08.740\nstoring it in another.\n\n512\n00:26:08.740 --> 00:26:10.960\nSo it's just assigning a name\nto make it easier for us.\n\n513\n00:26:10.960 --> 00:26:12.950\nOn the system it doesn't make it faster or\nslower,\n\n514\n00:26:12.950 --> 00:26:15.960\nit's just the same in the system, okay.\n\n515\n00:26:15.960 --> 00:26:19.940\nBut I don't need to do that,\nbecause I'm getting it from here, right?\n\n516\n00:26:19.940 --> 00:26:25.590\nBut just to show an example of how I\nmight use that, let me add another one.\n\n517\n00:26:25.590 --> 00:26:28.050\nMaybe I wanna echo out the host\nname of the computer, right?\n\n518\n00:26:28.050 --> 00:26:33.129\nSo I might create a variable called HNAME\nthat I wanna store the host name in.\n\n519\n00:26:33.129 --> 00:26:35.657\nAnd I'm gonna put a command on that one,\nright?\n\n520\n00:26:35.657 --> 00:26:37.850\nLike host name, like that.\n\n521\n00:26:37.850 --> 00:26:40.930\nAnd now, down here where I'm\noutputting all this other data,\n\n522\n00:26:40.930 --> 00:26:45.870\nI can just say echo host name, and\n\n523\n00:26:45.870 --> 00:26:49.700\nthen I can call that dollar sign HNAME,\njust like that.\n\n524\n00:26:49.700 --> 00:26:53.159\nOkay, so you can define those\nright here at the top, and\n\n525\n00:26:53.159 --> 00:26:55.595\nput whatever you need to put into them.\n\n526\n00:26:55.595 --> 00:26:58.820\nIt could be the output of a command\nlike I'm doing here, it could be $1,\n\n527\n00:26:58.820 --> 00:26:59.611\n$2, and so on.\n\n528\n00:26:59.611 --> 00:27:03.430\nThat's how we can easily assign names to\nthose and then re-use them down here.\n\n529\n00:27:03.430 --> 00:27:04.220\nAll right.\n\n530\n00:27:04.220 --> 00:27:05.501\n&gt;&gt; I was just gonna ask you real quick.\n\n531\n00:27:05.501 --> 00:27:08.640\nHow do we do math inside a script,\nor am I jumping the gun on that?\n\n532\n00:27:08.640 --> 00:27:11.598\n&gt;&gt; Yeah, let's back up cuz I still\nhaven't shown this work, right?\n\n533\n00:27:11.598 --> 00:27:14.661\nSo at this point, we're trusting\nthat I made it work, [LAUGH] and\n\n534\n00:27:14.661 --> 00:27:16.903\nif there's anything we know-\n&gt;&gt; Put it on hold.\n\n535\n00:27:16.903 --> 00:27:20.450\n&gt;&gt; I'm not good at typing, so\nlet's make sure this actually works.\n\n536\n00:27:20.450 --> 00:27:23.020\nAnd I'm gonna save this script.\n\n537\n00:27:23.020 --> 00:27:24.550\nAnd I'm gonna call it, right?\n\n538\n00:27:24.550 --> 00:27:26.782\nSo when I come out here and\nI run the script,\n\n539\n00:27:26.782 --> 00:27:29.140\nnow before every time I\nran it gave it my name.\n\n540\n00:27:29.140 --> 00:27:31.067\nThis time I'm not gonna do that,\nI'm not gonna give it a name.\n\n541\n00:27:31.067 --> 00:27:33.930\nI'm just gonna call the script by itself,\nright?\n\n542\n00:27:33.930 --> 00:27:38.380\nAnd when I run it,\nit's gonna say what's my first name, okay?\n\n543\n00:27:38.380 --> 00:27:41.920\nAnd I didn't tell it, so\nit's asking me for that input.\n\n544\n00:27:41.920 --> 00:27:44.360\nAnd I can say, my first name is Don,\nthanks for asking.\n\n545\n00:27:44.360 --> 00:27:45.761\nAnd then, what's my last name?\n\n546\n00:27:45.761 --> 00:27:46.937\nAll right, well my last name is Pezet.\n\n547\n00:27:46.937 --> 00:27:49.090\nLet me punch that in, and then I run it.\n\n548\n00:27:49.090 --> 00:27:49.860\nAnd then the script runs.\n\n549\n00:27:49.860 --> 00:27:51.610\nIt's populated the variables on demand.\n\n550\n00:27:51.610 --> 00:27:54.257\nSo we've now created\nan interactive script.\n\n551\n00:27:54.257 --> 00:27:57.601\nAnd I can see,\nthe script actually started here.\n\n552\n00:27:57.601 --> 00:28:01.304\nI probably should have echoed some kind\nof delimiter, like drawn a line or\n\n553\n00:28:01.304 --> 00:28:03.120\nsomething to make it clear.\n\n554\n00:28:03.120 --> 00:28:06.760\nBut I can see my first name is Don,\nlast name Pezet, full name.\n\n555\n00:28:06.760 --> 00:28:07.830\nThere's my shell.\n\n556\n00:28:07.830 --> 00:28:10.930\nThe host name, that was that\nother variable that I created.\n\n557\n00:28:10.930 --> 00:28:14.140\nAnd then we get that date and\nother information right there.\n\n558\n00:28:14.140 --> 00:28:17.280\nSo all of that being output and\ndropped right on to there.\n\n559\n00:28:17.280 --> 00:28:20.630\nSo really neat stuff that we can do\nwith variables once they're in there.\n\n560\n00:28:20.630 --> 00:28:25.465\nAnd now when we call the script,\nwe've switched from being an autonomous\n\n561\n00:28:25.465 --> 00:28:29.620\nself-running script to an interactive\ndynamic trip which is very powerful.\n\n562\n00:28:29.620 --> 00:28:30.390\n&gt;&gt; Fantastic.\n\n563\n00:28:30.390 --> 00:28:33.630\nAnd sorry for jumping the gun here,\nbut I'm just kinda chopping the brigs.\n\n564\n00:28:33.630 --> 00:28:35.820\nWe haven't talked about arithmetic yet.\n\n565\n00:28:35.820 --> 00:28:40.230\n&gt;&gt; Yeah, so it really, it does build\nright on to this because I showed how\n\n566\n00:28:40.230 --> 00:28:44.420\nI can take a command and\nstick that data right into a variable.\n\n567\n00:28:44.420 --> 00:28:47.050\nAnd I can receive\ninformation on a variable.\n\n568\n00:28:47.050 --> 00:28:48.940\nIt makes sense that I should be\nable to do math also, right,\n\n569\n00:28:48.940 --> 00:28:52.160\nthat I should be able to\nperform other operations.\n\n570\n00:28:52.160 --> 00:28:56.016\nAnd not only can I do math, there's like\nthree different ways that you can do math\n\n571\n00:28:56.016 --> 00:28:57.557\ninside of one of these scripts.\n\n572\n00:28:57.557 --> 00:29:02.070\nSo for example, let's go a little\nbit different on this one.\n\n573\n00:29:02.070 --> 00:29:06.560\nSo I'm gonna change the script, and maybe\nwe're gonna do a simple math on this one.\n\n574\n00:29:06.560 --> 00:29:09.997\nWe might even be worth just\nstarting an all-new script.\n\n575\n00:29:09.997 --> 00:29:11.033\nWell no we'll modify this one, so\n\n576\n00:29:11.033 --> 00:29:12.542\nI can get this done in\na reasonable amount of time.\n\n577\n00:29:12.542 --> 00:29:15.150\nSo we're gonna turn this\ninto a little math program.\n\n578\n00:29:15.150 --> 00:29:18.910\nWe're gonna give it two numbers, and it\nwill perform a mathematical operation and\n\n579\n00:29:18.910 --> 00:29:19.430\ngive us an answer.\n\n580\n00:29:19.430 --> 00:29:22.778\nSo maybe I wanna be able to divide\none number by another number and\n\n581\n00:29:22.778 --> 00:29:23.586\nget an answer.\n\n582\n00:29:23.586 --> 00:29:26.548\nNow I could do that\nstatically really easy.\n\n583\n00:29:26.548 --> 00:29:30.338\nThere's several different ways to do it,\nbut to do a dynamic,\n\n584\n00:29:30.338 --> 00:29:33.150\nI would need to read some input in, okay?\n\n585\n00:29:33.150 --> 00:29:37.030\nSo what we're going to do is,\nI'll just get rid of that host name and\n\n586\n00:29:37.030 --> 00:29:41.070\nI'm gonna come in here and\nchange this to say enter first number.\n\n587\n00:29:42.790 --> 00:29:46.079\nAnd then enter last number, or\nit would just be the second number,\n\n588\n00:29:46.079 --> 00:29:49.264\nthere's never a last number,\nright, that would be infinity.\n\n589\n00:29:49.264 --> 00:29:52.913\nAnd so, I'll just call those like NUM1 and\nNUM2, all right?\n\n590\n00:29:52.913 --> 00:29:55.050\nSo those are going to\nbe stored in variables.\n\n591\n00:29:55.050 --> 00:29:58.220\nSo when I run this program, when I run\nthis script, it's gonna ask me for\n\n592\n00:29:58.220 --> 00:30:00.480\nnumber one and number two, okay?\n\n593\n00:30:00.480 --> 00:30:03.037\nAnd then what am I gonna\ndo with all of that?\n\n594\n00:30:03.037 --> 00:30:10.636\nWell let me just get rid of 5 through 9,\nokay?\n\n595\n00:30:10.636 --> 00:30:13.644\nAll right, so then what we're gonna do\nis we're gonna have to manipulate this\n\n596\n00:30:13.644 --> 00:30:14.520\na little bit, right?\n\n597\n00:30:14.520 --> 00:30:17.420\nAnd it comes down to\na few different things.\n\n598\n00:30:17.420 --> 00:30:19.900\nSo these are getting stored in NUM1 and\nNUM2.\n\n599\n00:30:19.900 --> 00:30:23.521\nAnd now I need to basically\ncalculate our result on it.\n\n600\n00:30:23.521 --> 00:30:25.726\nLet me show you the three\ndifferent ways we can do this..\n\n601\n00:30:25.726 --> 00:30:29.840\nBut the best way, is to have bash\nactually do the math for us.\n\n602\n00:30:29.840 --> 00:30:32.240\nBash can do that,\nit is built into the system.\n\n603\n00:30:32.240 --> 00:30:36.052\nThe other ways would be to use other\nsystem commands to do the math for us.\n\n604\n00:30:36.052 --> 00:30:38.160\nSo there's a few different ones,\nbut let's just use bash,\n\n605\n00:30:38.160 --> 00:30:39.740\ncuz that's the one that make sense.\n\n606\n00:30:39.740 --> 00:30:45.250\nAnd the way we do it is by using\nthe let command, all right?\n\n607\n00:30:45.250 --> 00:30:50.200\nLet is a really neat one, because it's\nwhat gives the system a hint to say,\n\n608\n00:30:50.200 --> 00:30:52.830\nwhat I'm about to give\nyou is not finished.\n\n609\n00:30:52.830 --> 00:30:55.630\nYou need to do a little work on it,\nyou're gonna need to interpret this.\n\n610\n00:30:55.630 --> 00:30:58.226\nAnd so, I'm gonna say, let RESULT1, so\n\n611\n00:30:58.226 --> 00:31:01.632\nthat's gonna be the variable\nthat I store my answer in.\n\n612\n00:31:01.632 --> 00:31:05.415\nI'll have number one, and number two,\nand then I'll have RESULT1.\n\n613\n00:31:05.415 --> 00:31:07.466\nSo here's gonna be\nthe result that I kick out.\n\n614\n00:31:07.466 --> 00:31:11.984\nOr I could just call it RESULT, but you\nalways run the risk of hitting a system\n\n615\n00:31:11.984 --> 00:31:14.680\nword when you do that, so I'll do RESULT1.\n\n616\n00:31:14.680 --> 00:31:22.700\nSo I'm gonna say let RESULT1 equal dollar\nsign NUM1 slash dollar sign NUM2, okay?\n\n617\n00:31:22.700 --> 00:31:25.702\nSo I'm creating a variable called RESULT1,\nand\n\n618\n00:31:25.702 --> 00:31:28.858\nthe let command lets it know\nthat I need to some math.\n\n619\n00:31:28.858 --> 00:31:31.455\nAnd the math here is gonna be\nnumber 1 divided by number 2.\n\n620\n00:31:31.455 --> 00:31:35.576\nSo we'll just divide those two\ntogether and store them in RESULT1.\n\n621\n00:31:35.576 --> 00:31:40.475\nAnd after that,\nI can echo that answer out if I want, and\n\n622\n00:31:40.475 --> 00:31:45.480\nI could say something like\ndollar sign NUM1 slash dollar\n\n623\n00:31:45.480 --> 00:31:51.961\nsign NUM2 equals dollar sign RESULT1,\nand then I'll put it like that.\n\n624\n00:31:51.961 --> 00:31:53.810\nSo that will show me.\n\n625\n00:31:53.810 --> 00:31:57.055\nThe resultant math using\neach of those variables.\n\n626\n00:31:57.055 --> 00:32:01.260\nAnd let me just save that real quick,\nand we'll execute it.\n\n627\n00:32:01.260 --> 00:32:05.625\nSo when I run my script now, it asks for\nthe first number, and I'll do 8.\n\n628\n00:32:05.625 --> 00:32:06.966\nAnd my second number I'll do 2.\n\n629\n00:32:06.966 --> 00:32:10.930\nAnd when it runs it,\nI get 8 divided by 2 equals 4.\n\n630\n00:32:10.930 --> 00:32:14.520\nIt did the math for me, and\ndid it all through Bash.\n\n631\n00:32:14.520 --> 00:32:18.440\nBut I could have used other commands\nto do that same thing, right?\n\n632\n00:32:18.440 --> 00:32:21.950\nSo let me just kinda change\nthis up a little bit here.\n\n633\n00:32:21.950 --> 00:32:26.660\nSo this is the Bash Answer, right?\n\n634\n00:32:26.660 --> 00:32:29.462\nAnd I'll show you a few other\nways that I could've done it.\n\n635\n00:32:29.462 --> 00:32:35.080\nI could've also said,\nlet's do here, do RESULT2.\n\n636\n00:32:35.080 --> 00:32:37.270\nSo I'm creating a different variable here.\n\n637\n00:32:37.270 --> 00:32:41.670\nSo RESULT2, and\nit's going to equal a command.\n\n638\n00:32:41.670 --> 00:32:44.710\nAnd the command that I'm gonna run is\nthe EXPR command which is the expression\n\n639\n00:32:44.710 --> 00:32:47.170\ncommand, we can do mathematical\nexpressions by using it.\n\n640\n00:32:47.170 --> 00:32:51.177\nSo it's gonna call this external command,\nand\n\n641\n00:32:51.177 --> 00:32:56.599\nit's gonna run dollar sign NUM1\ndivided by dollar sign NUM2.\n\n642\n00:32:56.599 --> 00:33:03.158\nAnd the result of that command\nis gonna get stored in RESULT2,\n\n643\n00:33:03.158 --> 00:33:07.363\nso that I can echo the EXPR answer is, and\n\n644\n00:33:07.363 --> 00:33:12.561\nit will be dollar sign NUM1\ndivided by dollar sign\n\n645\n00:33:12.561 --> 00:33:18.290\nNUM2 equals dollar sign RESULT2 there,\nlike that.\n\n646\n00:33:18.290 --> 00:33:21.430\nOr yet\nanother way would be if I used a command.\n\n647\n00:33:21.430 --> 00:33:22.730\nThere's always options, right?\n\n648\n00:33:22.730 --> 00:33:24.250\nWould be to use a crazy command.\n\n649\n00:33:25.410 --> 00:33:30.300\nEXPR accepts the values here\nas command line arguments.\n\n650\n00:33:30.300 --> 00:33:34.583\nSo I'm running EXPR and then dollar\nsign NUM1, that would be it's $1.\n\n651\n00:33:34.583 --> 00:33:38.540\nAnd slash that would it's $2, and dollar\nsign NUM2, that would mean it's $3, right?\n\n652\n00:33:38.540 --> 00:33:40.970\nIt's mapping it to command line arguments.\n\n653\n00:33:40.970 --> 00:33:42.290\nBut not every command line does that.\n\n654\n00:33:42.290 --> 00:33:49.920\nSo for example, I might wanna use the BC\ncommand to be able to do the calculation.\n\n655\n00:33:49.920 --> 00:33:53.550\nBC is like a little calculator that's,\nit's not in every distro, but\n\n656\n00:33:53.550 --> 00:33:54.720\nit's in most of them.\n\n657\n00:33:54.720 --> 00:34:00.100\nAnd it requires the input to be\nprovided either interactively\n\n658\n00:34:00.100 --> 00:34:04.864\non the screen or\nthrough some kind of automated input.\n\n659\n00:34:04.864 --> 00:34:10.787\nAnd so, what I can do for this one,\nthis one's a little tricky,\n\n660\n00:34:10.787 --> 00:34:17.286\nI can say RESULT3 equals, and\nI can echo $NUM1 divided by $NUM2.\n\n661\n00:34:17.286 --> 00:34:20.870\nRight, so I'm just running\nthe regular old echo command.\n\n662\n00:34:22.250 --> 00:34:24.398\nAnd I'm gonna pipe the output of echo.\n\n663\n00:34:24.398 --> 00:34:28.218\nSo it's gonna take all that and\npipe it over to the BC command,\n\n664\n00:34:28.218 --> 00:34:31.314\ncuz that's how it expects\nto receive that input.\n\n665\n00:34:31.314 --> 00:34:32.635\nThe command just behaves unusually.\n\n666\n00:34:32.635 --> 00:34:37.399\nAnd when I do that,\nI can echo that out and\n\n667\n00:34:37.399 --> 00:34:44.416\nsay the BC Answer and\nprovide that information right here.\n\n668\n00:34:44.416 --> 00:34:46.427\nAnd that will be RESULT3.\n\n669\n00:34:46.427 --> 00:34:53.134\nShoot, I forgot it's not gonna let me,\nthere we go.\n\n670\n00:34:53.134 --> 00:34:56.334\nThat will be RESULT3, and\nwe'll get it yet another way, right?\n\n671\n00:34:56.334 --> 00:35:00.062\nSo the first way was just using bash and\nthat's what we're normally gonna use, but\n\n672\n00:35:00.062 --> 00:35:03.378\nthe other two are just two different\nways of calling an external program.\n\n673\n00:35:03.378 --> 00:35:06.390\nAnd before I wrap it up here,\nlet's make sure it actually works.\n\n674\n00:35:06.390 --> 00:35:07.547\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n675\n00:35:07.547 --> 00:35:09.255\n&gt;&gt; And maybe this time we'll do,\n\n676\n00:35:09.255 --> 00:35:13.589\nwe'll call it myscript.sh and we'll\nsay 9 divided by 3, and when it runs,\n\n677\n00:35:13.589 --> 00:35:15.709\nhopefully, there we go, all right.\n\n678\n00:35:15.709 --> 00:35:16.808\nAll three got the same answer.\n\n679\n00:35:16.808 --> 00:35:17.880\n&gt;&gt; Yes.\n\n680\n00:35:17.880 --> 00:35:20.520\n&gt;&gt; But\nthey all three did it a different way.\n\n681\n00:35:20.520 --> 00:35:24.920\nAnd that's a great example right there of\nhow we can do math, and expressions, and\n\n682\n00:35:24.920 --> 00:35:28.520\nthings like that right inside of Bash,\nright inside of our script, or\n\n683\n00:35:28.520 --> 00:35:31.865\nwe can always call other programs,\nthat's what scripts are really all about.\n\n684\n00:35:31.865 --> 00:35:33.950\nIt's calling other programs,\ngetting them to do stuff, and\n\n685\n00:35:33.950 --> 00:35:35.280\nbringing the answers back to us.\n\n686\n00:35:35.280 --> 00:35:38.210\nSo we have one thing we run,\nit does a ton of work, and\n\n687\n00:35:38.210 --> 00:35:41.520\nwe look like a hero when all we\ndid was run one little script.\n\n688\n00:35:41.520 --> 00:35:45.610\nAnd that was it, that's really what it's\nall about, it's very, very powerful stuff.\n\n689\n00:35:45.610 --> 00:35:47.660\n&gt;&gt; And once again, excellently delivered.\n\n690\n00:35:47.660 --> 00:35:51.310\nBecoming a Linux power user,\nthis has been executing scripts.\n\n691\n00:35:51.310 --> 00:35:54.280\nGreat job, and by the way,\nmore information coming tomorrow,\n\n692\n00:35:54.280 --> 00:35:56.900\nmore meat coming when we look at\nconstructs and things like that.\n\n693\n00:35:56.900 --> 00:35:58.490\nSo make sure you see that as well.\n\n694\n00:35:58.490 --> 00:35:59.930\nDon, anything else you\nwanna add before we go?\n\n695\n00:35:59.930 --> 00:36:04.030\n&gt;&gt; I wanna build on that is, what you just\nsaw might not have been the most exciting.\n\n696\n00:36:04.030 --> 00:36:06.832\nNow you're like, well great,\nI could've done math on my calculator.\n\n697\n00:36:06.832 --> 00:36:10.674\n[LAUGH] So I wanted to get you guys\nfamiliar with how scripts work.\n\n698\n00:36:10.674 --> 00:36:12.766\nHow variables work.\n\n699\n00:36:12.766 --> 00:36:16.860\nHow data can be coming from other sources\nlike applications and kind of see that.\n\n700\n00:36:16.860 --> 00:36:19.730\nAnd in the next episode, we will actually\ntranslate that into something that's\n\n701\n00:36:19.730 --> 00:36:20.610\na little more the real world.\n\n702\n00:36:20.610 --> 00:36:23.330\nI'll show you how to write a backup\nscript that's always pretty handy.\n\n703\n00:36:23.330 --> 00:36:25.940\nAnd we can do some really advanced and\nfancy stuff with it.\n\n704\n00:36:25.940 --> 00:36:29.690\nThe world of scripting is only\nlimited by your knowledge.\n\n705\n00:36:29.690 --> 00:36:32.510\nYou can make scripts\ndo all sorts of magic.\n\n706\n00:36:32.510 --> 00:36:34.310\nAnd you don't have to\nbe a full on developer.\n\n707\n00:36:34.310 --> 00:36:38.386\nThe syntax is far more simpler\nthan learning something like Java,\n\n708\n00:36:38.386 --> 00:36:40.361\nwhich is a freaking nightmare.\n\n709\n00:36:40.361 --> 00:36:42.430\n&gt;&gt; [LAUGH]\n&gt;&gt; So this is far more simple.\n\n710\n00:36:42.430 --> 00:36:43.400\nWe get a lot more done.\n\n711\n00:36:43.400 --> 00:36:45.140\nSo definitely embrace this.\n\n712\n00:36:45.140 --> 00:36:47.135\nAnd if you go on to become\na system administrator,\n\n713\n00:36:47.135 --> 00:36:50.205\nsomeone who works with Linux\nin a professional manner.\n\n714\n00:36:50.205 --> 00:36:52.115\nYou'll be expected to be able to write and\n\n715\n00:36:52.115 --> 00:36:55.395\ntroubleshoot scripts on regular basis,\nvery important skill.\n\n716\n00:36:55.395 --> 00:36:56.225\n&gt;&gt; Well once again thank you for\n\n717\n00:36:56.225 --> 00:36:58.900\nwatching this episode of\nbecoming a Linux power user.\n\n718\n00:36:58.900 --> 00:37:01.570\nExecuting scripts and\nmore to come, very exciting.\n\n719\n00:37:01.570 --> 00:37:04.360\nAnd there's a lot more\ncontent in this series.\n\n720\n00:37:04.360 --> 00:37:06.850\nSo make sure you catch all those videos.\n\n721\n00:37:06.850 --> 00:37:08.440\nYou'll be glad you did.\n\n722\n00:37:08.440 --> 00:37:10.480\nAnd thank you for watching ITPRO.TV.\n\n723\n00:37:10.480 --> 00:37:12.990\nRemember, an IT Pro is always learning.\n\n724\n00:37:12.990 --> 00:37:13.731\nI'm Zach Memos.\n\n725\n00:37:13.731 --> 00:37:14.348\n&gt;&gt; And I'm Don Pezet.\n\n726\n00:37:14.348 --> 00:37:16.320\n&gt;&gt; And we'll see you again very soon.\n\n727\n00:37:16.320 --> 00:37:23.964\n[MUSIC]\n\n728\n00:37:23.964 --> 00:37:26.658\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "222680497"
        },
        {
          "description": "Don and Zach discuss what a ‘Construct’ is, give examples of what ‘Logic’ & how a construct works, modify scripts to include ‘Arguments,’ explain the ‘If’ construct, show more examples of what ‘If’ can do, perform ‘Tests,’ and examine other constructs that are useful.",
          "length": "1652",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-1-programming_contructs-062217-PGM.00_27_15_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-1-programming_contructs-062217-PGM.00_27_15_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-1-programming_contructs-062217-PGM.00_27_15_22.Still001-sm.jpg",
          "title": "Programming Constructs",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:03.952\nWelcome to ITProTV.\n\n2\n00:00:03.952 --> 00:00:06.430\n[CROSSTALK]\n\n3\n00:00:06.430 --> 00:00:08.303\n[MUSIC]\n\n4\n00:00:08.303 --> 00:00:12.310\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.310 --> 00:00:13.280\n&gt;&gt; Hello again, and\n\n6\n00:00:13.280 --> 00:00:17.910\nthank you for watching ITProTV,\nwhere we help you learn wherever you go.\n\n7\n00:00:17.910 --> 00:00:18.962\nI'm your host, Zach Memos.\n\n8\n00:00:18.962 --> 00:00:22.858\nAs we continue with becoming a Linux\npower user, and as promised,\n\n9\n00:00:22.858 --> 00:00:26.131\nwe're diving into programming\nconstructs today, and\n\n10\n00:00:26.131 --> 00:00:30.610\nthe person bringing us all that great\ninformation is our very own Don Pezet.\n\n11\n00:00:30.610 --> 00:00:32.490\nDon, very excited about this.\n\n12\n00:00:32.490 --> 00:00:34.430\nThis is like a deep dive, isn't it?\n\n13\n00:00:34.430 --> 00:00:35.270\nInto the scripting.\n\n14\n00:00:35.270 --> 00:00:36.710\n&gt;&gt; Absolutely.\n\n15\n00:00:36.710 --> 00:00:39.190\nIn the last episode we were\ndoing really simple scripts.\n\n16\n00:00:39.190 --> 00:00:41.830\nWe were introducing people to\nthe idea of scripting, and\n\n17\n00:00:41.830 --> 00:00:44.960\nsome of the different commands, and things\nthat we can do, the structure of a script.\n\n18\n00:00:44.960 --> 00:00:45.910\nReally basics.\n\n19\n00:00:45.910 --> 00:00:48.130\nBut we didn't go very crazy with it.\n\n20\n00:00:48.130 --> 00:00:50.100\nWe didn't put any logic in there.\n\n21\n00:00:50.100 --> 00:00:53.130\nWe just said, here's a series of commands,\nrun these in order.\n\n22\n00:00:53.130 --> 00:00:53.750\nDo it.\nRight?\n\n23\n00:00:53.750 --> 00:00:58.303\nWhich is effective, but sometimes, we\nwant to really get specialized and stuff.\n\n24\n00:00:58.303 --> 00:01:00.430\nWe want to introduce design logic.\n\n25\n00:01:00.430 --> 00:01:01.590\nWe want it to make decisions.\n\n26\n00:01:01.590 --> 00:01:04.421\nWe want it to say, hey, sometimes,\nI want to do one thing, other times,\n\n27\n00:01:04.421 --> 00:01:05.852\nI might want to do a different thing.\n\n28\n00:01:05.852 --> 00:01:09.430\nOr, hey, this one thing I just did,\nI might need to do it more than once.\n\n29\n00:01:09.430 --> 00:01:10.980\nWell, that takes decisions.\n\n30\n00:01:10.980 --> 00:01:12.270\nIt takes thought.\n\n31\n00:01:12.270 --> 00:01:15.530\nAnd well,\ncomputers aren't thinking machines yet.\n\n32\n00:01:15.530 --> 00:01:18.419\nThey don't have an artificial\nintelligence in any real sense.\n\n33\n00:01:18.419 --> 00:01:23.270\nEven talking to Siri or Cortana or\nwhatever isn't really intelligence.\n\n34\n00:01:23.270 --> 00:01:26.780\n&gt;&gt; So, we can bake in, though,\nan artificial type of decision making,\n\n35\n00:01:26.780 --> 00:01:28.268\nwhich is called a construct.\n\n36\n00:01:28.268 --> 00:01:29.827\nSo that's what I wanna show\nyou guys here in this episode.\n\n37\n00:01:29.827 --> 00:01:32.620\nIt's to how to make your script\na little more intelligent\n\n38\n00:01:32.620 --> 00:01:35.690\nthan just basically running\na series of commands in order.\n\n39\n00:01:35.690 --> 00:01:39.050\n&gt;&gt; So I think you've already answered\nit with what you've just said, but\n\n40\n00:01:39.050 --> 00:01:41.097\nwhat is a construct, just simply put?\n\n41\n00:01:41.097 --> 00:01:43.739\n&gt;&gt; Sure.\nI gave what a general idea of a construct\n\n42\n00:01:43.739 --> 00:01:48.428\nwas, but to be a little more specific,\nit's how it can make those decisions,\n\n43\n00:01:48.428 --> 00:01:52.570\nsaying like, if such and\nsuch scenario exists, do something else.\n\n44\n00:01:52.570 --> 00:01:54.132\nRight?\nOr take the scenario or,\n\n45\n00:01:54.132 --> 00:01:57.258\nI'm gonna run this command,\nI'm gonna run it five times.\n\n46\n00:01:57.258 --> 00:01:58.705\nOkay?\nI'm running it once,\n\n47\n00:01:58.705 --> 00:02:00.210\nthat's time number one.\n\n48\n00:02:00.210 --> 00:02:02.420\nI'm running it again,\nthat's time number two.\n\n49\n00:02:02.420 --> 00:02:03.500\nAnd then time number three.\n\n50\n00:02:03.500 --> 00:02:04.670\nKeeping track of that.\n\n51\n00:02:04.670 --> 00:02:05.370\nThat's a construct.\n\n52\n00:02:05.370 --> 00:02:05.920\nThe construct,\n\n53\n00:02:05.920 --> 00:02:08.750\nthe programming construct that we create\nis what's keeping track of that timer.\n\n54\n00:02:08.750 --> 00:02:11.224\nNow it doesn't do that by default.\n\n55\n00:02:11.224 --> 00:02:12.850\nRight?\nIt's not paying attention to that.\n\n56\n00:02:12.850 --> 00:02:14.600\nIt's just saying,\nI'm gonna do what you tell me, and\n\n57\n00:02:14.600 --> 00:02:16.330\nyou told me to do these three commands.\n\n58\n00:02:16.330 --> 00:02:17.520\nThat's what it does.\n\n59\n00:02:17.520 --> 00:02:22.170\nBut we put a construct in there\nto actually make those decisions,\n\n60\n00:02:22.170 --> 00:02:25.850\nto be intelligent about it, to progress\nthrough, and take care of that.\n\n61\n00:02:25.850 --> 00:02:29.060\nAnd you may find that you use more than\none construct, and when you combine them\n\n62\n00:02:29.060 --> 00:02:32.870\ntogether, you'll get a very advanced\nscript, and you'll find it online.\n\n63\n00:02:32.870 --> 00:02:37.460\nThere are tons of example scripts out\nthere that are thousands of lines long,\n\n64\n00:02:37.460 --> 00:02:41.100\nwhere they have tons of decision\nmaking steps all spread throughout it,\n\n65\n00:02:41.100 --> 00:02:42.720\nand very powerful.\n\n66\n00:02:42.720 --> 00:02:45.758\nAnd at that point, you can create\nscripts that are really amazing.\n\n67\n00:02:45.758 --> 00:02:48.890\nBut we gotta get our start somewhere, so\nI want to take the time to run through\n\n68\n00:02:48.890 --> 00:02:52.070\na couple of these kinda constructs, show\nyou how they work, how we can use them,\n\n69\n00:02:52.070 --> 00:02:54.620\nand give you an idea of how you can\nuse them out there in the real world.\n\n70\n00:02:54.620 --> 00:02:58.480\n&gt;&gt; So, can you give us an example\nof what that logic might be, or\n\n71\n00:02:58.480 --> 00:02:59.990\nhow the construct actually works?\n\n72\n00:02:59.990 --> 00:03:00.840\n&gt;&gt; Sure.\n\n73\n00:03:00.840 --> 00:03:04.420\nLet's start off with what's probably\nthe most common construct, and\n\n74\n00:03:04.420 --> 00:03:06.940\nthat's the if construct.\n\n75\n00:03:06.940 --> 00:03:10.020\nIf a certain scenario exist, do an action.\n\n76\n00:03:10.020 --> 00:03:10.650\nRight?\nNow,\n\n77\n00:03:10.650 --> 00:03:13.010\nit's not just do an action,\nwhich is what a normal script was.\n\n78\n00:03:13.010 --> 00:03:16.357\nIf you watched the last show, everything\nI did there was just do an action.\n\n79\n00:03:16.357 --> 00:03:17.513\n[INAUDIBLE]-\n&gt;&gt; It was very straightforward, yeah.\n\n80\n00:03:17.513 --> 00:03:19.045\n&gt;&gt; Let's use that as our\nstarting point here.\n\n81\n00:03:19.045 --> 00:03:24.134\nSo I'm gonna create a script, right,\nwhich is gonna be myscript.sh.\n\n82\n00:03:24.134 --> 00:03:25.560\nAll right.\nAnd I'm gonna mirror kind\n\n83\n00:03:25.560 --> 00:03:27.170\nof what we did in the last show.\n\n84\n00:03:27.170 --> 00:03:30.060\nSo if you watched that show then,\nthen you'll know this one.\n\n85\n00:03:30.060 --> 00:03:34.690\nBut basically, we created a little script\nthat was designed to be run in our bash\n\n86\n00:03:34.690 --> 00:03:35.950\nshell, right?\n\n87\n00:03:35.950 --> 00:03:38.418\nAnd I prompted the user.\n\n88\n00:03:38.418 --> 00:03:43.320\nI said, hey,\ncan you give me your first name?\n\n89\n00:03:43.320 --> 00:03:47.060\nAnd so we prompted for that, and\nwe stored it in a variable called FNAME.\n\n90\n00:03:47.060 --> 00:03:50.954\nAnd then, I prompted for their last name,\n\n91\n00:03:50.954 --> 00:03:54.968\nand I store that in\na variable called LNAME.\n\n92\n00:03:54.968 --> 00:04:01.439\nAnd then basically, we just output on\nthe screen a little output here that said,\n\n93\n00:04:01.439 --> 00:04:06.215\nFull name is $FNAME followed by $LNAME,\nand that was it.\n\n94\n00:04:06.215 --> 00:04:06.734\nRight.\n\n95\n00:04:06.734 --> 00:04:08.400\nIt's a really simple script.\n\n96\n00:04:08.400 --> 00:04:10.690\nWhat this script boils\ndown to is three commands.\n\n97\n00:04:10.690 --> 00:04:12.960\nI'm running a read command,\nand then stopping.\n\n98\n00:04:12.960 --> 00:04:15.520\nAnd then I'm running another read command,\nand stopping.\n\n99\n00:04:15.520 --> 00:04:18.520\nAnd then I'm running an echo command,\nand stopping, right?\n\n100\n00:04:18.520 --> 00:04:21.400\nThere's not a lot of logic\nthat's going on here, so\n\n101\n00:04:21.400 --> 00:04:26.130\nwhen I run this,\nit's always going to run one way.\n\n102\n00:04:26.130 --> 00:04:29.220\nIt's going to run each of those lines.\n\n103\n00:04:29.220 --> 00:04:31.270\nIt's gonna prompt for\nthe first name, and I'll provide it.\n\n104\n00:04:31.270 --> 00:04:33.370\nIt's gonna prompt for\nthe second name, and I'll provide it.\n\n105\n00:04:33.370 --> 00:04:34.495\nAnd then, there's the full name.\n\n106\n00:04:34.495 --> 00:04:35.123\nOkay.\n\n107\n00:04:35.123 --> 00:04:37.350\nBut it's not really thinking about it.\n\n108\n00:04:37.350 --> 00:04:39.540\nSo, for example, if I run that script and\n\n109\n00:04:39.540 --> 00:04:43.120\nI put in my first name, I'm just gonna\nleave the second name, last name empty.\n\n110\n00:04:43.120 --> 00:04:43.770\nRight?\n\n111\n00:04:43.770 --> 00:04:46.430\nWell, it doesn't interpret\nthat in any way.\n\n112\n00:04:46.430 --> 00:04:47.810\nIt just says, I don't know, it's empty.\n\n113\n00:04:47.810 --> 00:04:51.010\nYour full name is Don, and that's it.\n\n114\n00:04:51.010 --> 00:04:52.400\nAnd maybe you're Cher, right?\n\n115\n00:04:52.400 --> 00:04:53.274\nYou've only got one name.\n\n116\n00:04:53.274 --> 00:04:54.600\nIt makes sense.\n\n117\n00:04:54.600 --> 00:04:58.735\nBut, we could put some logic\nin here to say, you know what?\n\n118\n00:04:58.735 --> 00:05:02.641\nIf the last name is empty, prompt again\nand say, you forgot your last name.\n\n119\n00:05:02.641 --> 00:05:03.625\nRight?\nWe can do that.\n\n120\n00:05:03.625 --> 00:05:06.415\nThat requires a little bit of logic,\na test, a way to check and\n\n121\n00:05:06.415 --> 00:05:07.394\nsee what's going on.\n\n122\n00:05:07.394 --> 00:05:07.995\nRight?\n\n123\n00:05:07.995 --> 00:05:11.475\nOr I gave an example where\nwhen I run a script,\n\n124\n00:05:11.475 --> 00:05:15.855\nI could provide the values in-line\nas command line arguments and\n\n125\n00:05:15.855 --> 00:05:19.100\nsay, I'm gonna give you the first name,\nlast name right here.\n\n126\n00:05:19.100 --> 00:05:22.050\nWell, my script isn't\npaying attention to that.\n\n127\n00:05:22.050 --> 00:05:24.400\nAnd so it just prompts for\nthat first name.\n\n128\n00:05:24.400 --> 00:05:25.580\nAnd it prompts for the last name.\n\n129\n00:05:25.580 --> 00:05:28.900\nEven though I already gave it to\nthe script, it doesn't know that.\n\n130\n00:05:28.900 --> 00:05:32.540\nSo, I could put some logic in there to\nhandle that and say, you know what?\n\n131\n00:05:32.540 --> 00:05:37.037\nIf they already gave me the user name, or\nthe first name and last name, in-line,\n\n132\n00:05:37.037 --> 00:05:38.760\nI'll run with that.\n\n133\n00:05:38.760 --> 00:05:41.260\nBut if they didn't give it to me,\nI will prompt them.\n\n134\n00:05:41.260 --> 00:05:43.084\nNow, we're doing things conditionally.\n\n135\n00:05:43.084 --> 00:05:46.310\nWe're saying, in certain scenarios,\nwe'll run a command, and\n\n136\n00:05:46.310 --> 00:05:48.563\nin other scenarios,\nwe won't run a command.\n\n137\n00:05:48.563 --> 00:05:49.240\nAll right.\n\n138\n00:05:49.240 --> 00:05:52.175\nSo let me show you how that would work\nif I wanted to smarten up the script.\n\n139\n00:05:52.175 --> 00:05:55.405\nI'm gonna make it where the script\nwill handle the in-line arguments,\n\n140\n00:05:55.405 --> 00:05:58.475\nlike, it's arguments passed\nfrom the command line, and\n\n141\n00:05:58.475 --> 00:06:00.415\nbe able to handle it from direct input,\nas well.\n\n142\n00:06:00.415 --> 00:06:03.195\nSo, if we come in here and\nmodify this just a little bit,\n\n143\n00:06:03.195 --> 00:06:05.285\nwe can get some really neat things.\n\n144\n00:06:05.285 --> 00:06:09.805\nFirst off, if somebody provides\ncommand line arguments,\n\n145\n00:06:09.805 --> 00:06:11.678\nthey're stored in variables automatically.\n\n146\n00:06:11.678 --> 00:06:16.360\n$1, $2, $3,\nwe saw that in the last episode.\n\n147\n00:06:16.360 --> 00:06:21.086\nSo when I ran the script as myscript.sh\nfollowed by Don, followed by Pezet,\n\n148\n00:06:21.086 --> 00:06:23.938\nDon went into $1, and Pezet went into $2.\n\n149\n00:06:23.938 --> 00:06:29.341\nSo right here at the beginning,\nI can say FNAME, oops.\n\n150\n00:06:29.341 --> 00:06:36.370\nI can say FNAME = $1,\nand LNAME = $2, right?\n\n151\n00:06:36.370 --> 00:06:39.930\nSo now, when somebody provides\nthem in-line, I'll get those, and\n\n152\n00:06:39.930 --> 00:06:41.440\nI'll put them in\nthe variables that I named.\n\n153\n00:06:41.440 --> 00:06:42.970\nNow, I like it to be this way.\n\n154\n00:06:42.970 --> 00:06:45.521\nI like them to be named FNME and\nLNAME so I can remember what they are.\n\n155\n00:06:45.521 --> 00:06:48.435\nI could just use them as $1 and $2, but\n\n156\n00:06:48.435 --> 00:06:54.110\nI'm gonna leave it this way because\nI'm also reading data into those.\n\n157\n00:06:54.110 --> 00:06:59.110\nNow, this is kinda counterintuitive\nbecause I'm gonna be receiving Firstname\n\n158\n00:06:59.110 --> 00:07:02.450\nand Lastname, and then I'm gonna be\nprompting for Firstname and Lastname,\n\n159\n00:07:02.450 --> 00:07:04.320\nso what's the point?\n\n160\n00:07:04.320 --> 00:07:08.740\nNow I need to put some logic in here\nto say, if these are empty, right?\n\n161\n00:07:08.740 --> 00:07:10.250\nMaybe they didn't give me\nthat command line argument.\n\n162\n00:07:10.250 --> 00:07:13.450\nIf they're empty,\nthen go ahead and prompt.\n\n163\n00:07:13.450 --> 00:07:15.680\nBut if they're not empty, don't prompt.\n\n164\n00:07:15.680 --> 00:07:16.950\nDon't bother prompting.\n\n165\n00:07:16.950 --> 00:07:18.610\nJust handle it, okay?\n\n166\n00:07:18.610 --> 00:07:21.130\nSo, I can come in, and I can check that.\n\n167\n00:07:21.130 --> 00:07:24.630\nWhat we can do is we can\nadd what's called a test.\n\n168\n00:07:24.630 --> 00:07:27.520\nAnd a test is just checking\nwhether something is true or not.\n\n169\n00:07:27.520 --> 00:07:30.740\nSo I'm gonna say, if, followed by a test.\n\n170\n00:07:30.740 --> 00:07:36.468\nAnd my test is going to be if $FNAME\n\n171\n00:07:36.468 --> 00:07:41.350\n=, and I'm just going to put\ntwo quotes in a row, okay?\n\n172\n00:07:41.350 --> 00:07:45.330\nSo FNAME on the left side,\nthat's what I'm checking.\n\n173\n00:07:45.330 --> 00:07:47.597\nI'm gonna check the value\nthat's stored in FNAME.\n\n174\n00:07:47.597 --> 00:07:51.130\nAnd then = means I'm gonna see\nif it's equal to something.\n\n175\n00:07:51.130 --> 00:07:53.437\nAnd the equal to something\nis gonna be nothing.\n\n176\n00:07:53.437 --> 00:07:54.423\nIs it empty?\n\n177\n00:07:54.423 --> 00:07:58.197\nAnd so that's why I'm doing the two quote\nmarks there because I can't denote nothing\n\n178\n00:07:58.197 --> 00:08:01.248\nby actually writing nothing,\nit will think I screwed up my command.\n\n179\n00:08:01.248 --> 00:08:02.441\nSo I put two quotes, and it says,\n\n180\n00:08:02.441 --> 00:08:04.369\nall right,\nwell whatever's in between the quotes.\n\n181\n00:08:04.369 --> 00:08:05.841\nWell, what's in between my quotes?\n\n182\n00:08:05.841 --> 00:08:06.620\nNothing.\n\n183\n00:08:06.620 --> 00:08:10.932\nSo if FNAME is nothing,\nthen we're gonna we do something.\n\n184\n00:08:10.932 --> 00:08:15.350\nAnd so I close that with a square bracket,\nso that it knows that it's a test,\n\n185\n00:08:15.350 --> 00:08:18.740\nI do a semicolon, and\nthen I say then, right?\n\n186\n00:08:19.960 --> 00:08:24.780\nIf this is true,\nthen do something, all right?\n\n187\n00:08:24.780 --> 00:08:32.070\nSo, if FNAME is empty,\nthen I'm gonna prompt for a first name.\n\n188\n00:08:32.070 --> 00:08:34.060\nAll right, so it's gonna check that.\n\n189\n00:08:34.060 --> 00:08:39.280\nNow, once it checks that, and\nit prompts it, I'll enter in a first name,\n\n190\n00:08:39.280 --> 00:08:41.100\nand it will get stored\nin the FNAME variable.\n\n191\n00:08:41.100 --> 00:08:45.000\nIf FNAME already had something in it,\nthen this would be false, and\n\n192\n00:08:45.000 --> 00:08:45.730\nit wouldn't prompt me.\n\n193\n00:08:45.730 --> 00:08:46.830\nThere's that logic, right?\n\n194\n00:08:46.830 --> 00:08:52.440\nIt's checking, it's testing, to make\nsure that data is there and ready to go.\n\n195\n00:08:52.440 --> 00:08:56.430\nAnd when it's done,\nit's ready to move on to the next command.\n\n196\n00:08:56.430 --> 00:09:00.060\nAnd so we have to close out\nthe if statement, right?\n\n197\n00:09:00.060 --> 00:09:04.040\nYou know how in programming,\nwhenever you start some kind of construct,\n\n198\n00:09:04.040 --> 00:09:07.850\nyou have to open it and\nyou have to close it, like this test.\n\n199\n00:09:07.850 --> 00:09:12.520\nWhen I did the test construct,\nI did a square bracket to open it,\n\n200\n00:09:12.520 --> 00:09:14.750\nand then a square bracket to close it.\n\n201\n00:09:14.750 --> 00:09:18.870\nSo the computer knows exactly\nwhere my test is right there.\n\n202\n00:09:18.870 --> 00:09:23.360\nWell, I started the IF construct and\nI need to close it.\n\n203\n00:09:23.360 --> 00:09:26.170\nAnd, whoever created this was\na fairly creative person.\n\n204\n00:09:26.170 --> 00:09:28.490\nBecause they said, you know what,\nthe way we will close it,\n\n205\n00:09:28.490 --> 00:09:33.220\nwe'll just write the word if backwards,\nand so it became fi.\n\n206\n00:09:33.220 --> 00:09:36.260\nSo if opens an if loop, and fi closes it.\n\n207\n00:09:36.260 --> 00:09:38.570\nAnd if you ever wonder why they did that,\n\n208\n00:09:38.570 --> 00:09:43.970\nyou might actually have if loops\nnested inside of each other.\n\n209\n00:09:43.970 --> 00:09:47.710\nSo I might have one if, that then opens\nanother if, that then opens another if, so\n\n210\n00:09:47.710 --> 00:09:49.480\nthere's multiple ifs embedded.\n\n211\n00:09:49.480 --> 00:09:51.510\nAnd so\nwe need to use a different word to close,\n\n212\n00:09:51.510 --> 00:09:54.840\notherwise it thinks we're starting another\nloop, so we use fi to close it out.\n\n213\n00:09:54.840 --> 00:09:58.550\nSo if FNAME is empty,\nI'm gonna prompt for it, and\n\n214\n00:09:58.550 --> 00:10:01.530\nthen fi, I'll close out and move on.\n\n215\n00:10:01.530 --> 00:10:05.800\nAnd I can do the same thing again for\nthe last name, right?\n\n216\n00:10:05.800 --> 00:10:08.780\nOr I could just assume,\nright, I could assume,\n\n217\n00:10:08.780 --> 00:10:11.600\nif they left first name empty,\nlast name is going to be empty, too, and\n\n218\n00:10:11.600 --> 00:10:13.550\nI could just prompt for\nboth and add it right here.\n\n219\n00:10:13.550 --> 00:10:14.860\nThat would be the easier way.\n\n220\n00:10:14.860 --> 00:10:19.930\nOr I could do it a second time and come in\nand say, if dollar sign l name is empty.\n\n221\n00:10:20.970 --> 00:10:28.810\nSo I'll say, if it equals nothing, then\nwe'll have it prompt for the last name.\n\n222\n00:10:28.810 --> 00:10:32.230\nAnd I'm putting some\nspaces before that word.\n\n223\n00:10:32.230 --> 00:10:35.700\nAnd that's a common programming tactic,\nto be able to make this a little more\n\n224\n00:10:35.700 --> 00:10:38.580\nreadable, so we can help to\nunderstand as you read through.\n\n225\n00:10:38.580 --> 00:10:42.610\nA lot of people indent the fi as well,\nto kinda get it out of the way.\n\n226\n00:10:42.610 --> 00:10:47.270\nSo that when you look at this,\nyou can see, here's one if construct and\n\n227\n00:10:47.270 --> 00:10:49.010\neverything nested underneath it.\n\n228\n00:10:49.010 --> 00:10:52.160\nAnd then here's the next if construct,\nand everything nested underneath it.\n\n229\n00:10:52.160 --> 00:10:54.820\nSo it just makes it\na little more readable.\n\n230\n00:10:54.820 --> 00:10:59.520\nAnd then when that one is done, it moves\non to the last part which is echo,\n\n231\n00:10:59.520 --> 00:11:02.240\nfull name, f name and l name.\n\n232\n00:11:02.240 --> 00:11:06.890\nNow if I provide f name and\nl name in the command line.\n\n233\n00:11:06.890 --> 00:11:10.100\nSo if I run my script.sh Don Pezet.\n\n234\n00:11:10.100 --> 00:11:12.880\nIt will populate f name and l name.\n\n235\n00:11:12.880 --> 00:11:16.160\nBoth of these tests will fail, and\nso none of this will get run, and\n\n236\n00:11:16.160 --> 00:11:19.020\nthen it will go straight to echoing it and\nthere it goes.\n\n237\n00:11:19.020 --> 00:11:23.790\nBut if either of these are empty, it\nwill prompt the values and then echo it.\n\n238\n00:11:23.790 --> 00:11:25.590\nSo now my script is smart.\n\n239\n00:11:25.590 --> 00:11:30.230\nNow it can handle arguments from\nthe command line,or interactive\n\n240\n00:11:30.230 --> 00:11:32.030\narguments from the user.\n\n241\n00:11:32.030 --> 00:11:34.550\nWe put that logic in place and\nwe'll see it work.\n\n242\n00:11:34.550 --> 00:11:37.920\nLet me get out and save this thing,\nand then I'm going to execute it.\n\n243\n00:11:37.920 --> 00:11:41.170\nNow, when I run it,\nI've got a few choices here, right.\n\n244\n00:11:41.170 --> 00:11:45.990\nI'm gonna run it, and I'm gonna\nprovide my name right here in line.\n\n245\n00:11:45.990 --> 00:11:50.990\nSo what should happen is Fname and lname\nwill get populated from the command line.\n\n246\n00:11:50.990 --> 00:11:55.590\nAnd then from there, it should echo my\nfirst name and last name, my full name,\n\n247\n00:11:55.590 --> 00:11:56.440\nthere it is, right.\n\n248\n00:11:56.440 --> 00:11:58.830\nIt didn't prompt me for either.\n\n249\n00:11:58.830 --> 00:12:01.390\nBut if I come in and I leave those out.\n\n250\n00:12:01.390 --> 00:12:04.580\nI'm going to run it and\nit sees that the first name is empty, so\n\n251\n00:12:04.580 --> 00:12:06.020\nit prompts me for that.\n\n252\n00:12:06.020 --> 00:12:08.240\nAnd so I'll say my name is John.\n\n253\n00:12:08.240 --> 00:12:12.500\nAnd then it asks me for my last name, cuz\nthat was also empty, and I can say Doe.\n\n254\n00:12:12.500 --> 00:12:14.310\nAnd now my full name is John Doe.\n\n255\n00:12:14.310 --> 00:12:16.870\nSo now we've got logic built into it.\n\n256\n00:12:16.870 --> 00:12:19.450\nIf somebody wants to provide\nin line arguments, they can.\n\n257\n00:12:19.450 --> 00:12:21.500\nIf they want to be prompted, they can.\n\n258\n00:12:21.500 --> 00:12:22.520\nWe've got that flexibility.\n\n259\n00:12:22.520 --> 00:12:23.560\nIt took a little more work, right?\n\n260\n00:12:23.560 --> 00:12:24.530\nA little more elbow grease.\n\n261\n00:12:24.530 --> 00:12:27.390\nBut once we got it in there,\nthis script is now more powerful.\n\n262\n00:12:27.390 --> 00:12:30.690\nThat's a great example of the type of\nthing we can do with the construct.\n\n263\n00:12:30.690 --> 00:12:32.560\nIt makes it much more intelligent.\n\n264\n00:12:32.560 --> 00:12:35.370\n&gt;&gt; Because that's pretty straightforward,\nthat that's an if and what the if can do,\n\n265\n00:12:35.370 --> 00:12:36.940\nbut is there anything more that we can do?\n\n266\n00:12:36.940 --> 00:12:38.570\nAre there more things we can do?\n\n267\n00:12:38.570 --> 00:12:40.710\n&gt;&gt; Yeah, heck,\nthere's more that we can do with just if.\n\n268\n00:12:40.710 --> 00:12:41.640\nRight?\n\n269\n00:12:41.640 --> 00:12:44.810\nThat example there was\nthe most basic form of if.\n\n270\n00:12:44.810 --> 00:12:46.350\nIf actually has three parts.\n\n271\n00:12:46.350 --> 00:12:51.240\nI just said if something is true,\nthen do something else, right?\n\n272\n00:12:51.240 --> 00:12:52.980\nBut in reality there's three parts.\n\n273\n00:12:52.980 --> 00:12:56.050\nThere's if, then, else.\n\n274\n00:12:56.050 --> 00:12:59.080\nIf something is true, then do a task.\n\n275\n00:13:00.100 --> 00:13:01.670\nElse do another task, right?\n\n276\n00:13:01.670 --> 00:13:02.920\nSo I could have alternative paths.\n\n277\n00:13:02.920 --> 00:13:06.230\nNow in mine, the alternative path\nwas just move on to the next thing.\n\n278\n00:13:06.230 --> 00:13:10.020\nSo I didn't really define\na clearly specified else.\n\n279\n00:13:10.020 --> 00:13:11.960\nBut if you want to, you certainly can, and\n\n280\n00:13:11.960 --> 00:13:13.750\nyou can really create some\nimpressive things with that.\n\n281\n00:13:13.750 --> 00:13:18.300\nSo for example, I might want to let people\nknow that I received the in line argument,\n\n282\n00:13:18.300 --> 00:13:19.570\nso let me edit that script again.\n\n283\n00:13:20.650 --> 00:13:23.840\nAnd right now,\nif I just provide first name and\n\n284\n00:13:23.840 --> 00:13:26.910\nlast name as part of the command line\narguments, then it just runs with it, and\n\n285\n00:13:26.910 --> 00:13:29.150\nthat's it, but\nI might wanna display a message.\n\n286\n00:13:29.150 --> 00:13:33.240\nAnd let people know, hey,\nI got this from the command line.\n\n287\n00:13:33.240 --> 00:13:36.240\nSo when I say if,\nhere's the if statement and\n\n288\n00:13:36.240 --> 00:13:39.180\nthe test that I'm doing,\nand then the then.\n\n289\n00:13:39.180 --> 00:13:43.120\nSo then read -p \"Enter Firstname\", right?\n\n290\n00:13:43.120 --> 00:13:48.470\nI could also add an else, and so\nwe could come in and say, whoops, there.\n\n291\n00:13:50.440 --> 00:13:53.971\nElse, I want to do something,\nwell, something else.\n\n292\n00:13:53.971 --> 00:13:55.090\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] So\n\n293\n00:13:55.090 --> 00:14:03.210\nsomething else might be to just echo First\nname obtained from command line, right?\n\n294\n00:14:03.210 --> 00:14:07.120\nSo I'm letting people know, that I got\nthe first name from the command line.\n\n295\n00:14:07.120 --> 00:14:11.020\nAnd then, I might want to do\nthe same thing for this next one,\n\n296\n00:14:11.020 --> 00:14:16.860\nwhere I might say, else echo last\nname obtained from command line.\n\n297\n00:14:17.880 --> 00:14:18.480\nRight?\n\n298\n00:14:18.480 --> 00:14:20.420\nAnd then we close that loop out also.\n\n299\n00:14:20.420 --> 00:14:25.000\nSo now, we're getting feedback\nregardless of whether we provided lines\n\n300\n00:14:25.000 --> 00:14:29.230\nin the command line argument, or whether\nwe provided it manually by typing it in.\n\n301\n00:14:29.230 --> 00:14:31.250\nSo I've got three steps.\n\n302\n00:14:31.250 --> 00:14:35.605\nIf I do a test, then I perform an action.\n\n303\n00:14:35.605 --> 00:14:37.460\nElse, I perform some other action, right?\n\n304\n00:14:37.460 --> 00:14:38.860\nWe've got a fork in the road, right?\n\n305\n00:14:38.860 --> 00:14:42.250\nIt's like that poem, the path untaken,\nor something like that.\n\n306\n00:14:42.250 --> 00:14:43.420\nSo, I've got that specified.\n\n307\n00:14:43.420 --> 00:14:46.400\nI'll go ahead and get out,\nand save this, and, now,\n\n308\n00:14:46.400 --> 00:14:50.980\nwhen i run that script, if I run it like\nthis, with no command line argument, and\n\n309\n00:14:50.980 --> 00:14:54.460\nI just say, first name is Don,\nlast name is Pezet.\n\n310\n00:14:54.460 --> 00:14:55.710\nThere it is, right.\n\n311\n00:14:55.710 --> 00:15:00.590\nBut if I run it and I provide the name\nlike that, it's gonna run an IC.\n\n312\n00:15:00.590 --> 00:15:02.230\nFirstname obtained from command line,\n\n313\n00:15:02.230 --> 00:15:05.730\nLastname obtained from command line,\nFull Name is Don Pezet, right.\n\n314\n00:15:05.730 --> 00:15:08.550\nSo I get that feedback, and\nagain, this is a simple example.\n\n315\n00:15:08.550 --> 00:15:13.200\nBut it shows how the if construct\ncan be made a lot more powerful.\n\n316\n00:15:13.200 --> 00:15:14.860\nAnd you can start to nest them, and\n\n317\n00:15:14.860 --> 00:15:18.070\nthen you really have forks upon\nforks upon forks in the road.\n\n318\n00:15:18.070 --> 00:15:19.600\nAll sorts of crazy stuff.\n\n319\n00:15:19.600 --> 00:15:22.370\nAll built right around this one construct.\n\n320\n00:15:22.370 --> 00:15:24.600\n&gt;&gt; Are there any other tests\nwe can do besides that?\n\n321\n00:15:24.600 --> 00:15:25.970\n&gt;&gt; Yeah, yeah.\nThe test, boy,\n\n322\n00:15:25.970 --> 00:15:28.400\nwe could do a whole\nseries just on the test.\n\n323\n00:15:28.400 --> 00:15:33.290\nI wanna avoid that, but [LAUGH] if we\ngo back in here, the test that I ran.\n\n324\n00:15:34.610 --> 00:15:37.150\nIt's easier to think of\ntesting as a command,\n\n325\n00:15:37.150 --> 00:15:42.940\nlike the if construct has a command\nif until we know it's there.\n\n326\n00:15:42.940 --> 00:15:44.440\nBut task really does it.\n\n327\n00:15:44.440 --> 00:15:45.940\nThe task is just a square bracket.\n\n328\n00:15:45.940 --> 00:15:47.420\nSo when writing a script,\n\n329\n00:15:47.420 --> 00:15:51.080\nanything in between square\nbracket is considered a task.\n\n330\n00:15:51.080 --> 00:15:52.590\nAnd the real test.\n\n331\n00:15:52.590 --> 00:15:54.055\nIt's this guy right here, the equal sign.\n\n332\n00:15:54.055 --> 00:16:00.485\nI'm saying, if fNAME = nothing, right,\nso the = is what's doing the real work.\n\n333\n00:16:00.485 --> 00:16:04.134\nThe square brackets are what let's\nthe script know that I'm starting a test.\n\n334\n00:16:04.134 --> 00:16:06.129\nBut it doesn't tell which test to do.\n\n335\n00:16:06.129 --> 00:16:09.754\nThe equals sign is actually\ntelling it to do the test.\n\n336\n00:16:09.754 --> 00:16:13.085\nAnd there are so\nmany different tests that we can do,\n\n337\n00:16:13.085 --> 00:16:15.760\nbased on an action that we wanna perform.\n\n338\n00:16:15.760 --> 00:16:20.112\nSo for example,\nI might want to do dash a or dash e,\n\n339\n00:16:20.112 --> 00:16:24.170\nthat checks to see\nwhether something exists.\n\n340\n00:16:24.170 --> 00:16:27.240\nWe use that with files a lot,\nlike does this file exist?\n\n341\n00:16:27.240 --> 00:16:29.270\nIf a file exists, great we can use it.\n\n342\n00:16:29.270 --> 00:16:32.850\nIf it doesn't exist we might need to\nprompt people for where that file is.\n\n343\n00:16:32.850 --> 00:16:35.710\nOr if the file exists maybe\nI want to append to it,\n\n344\n00:16:35.710 --> 00:16:37.210\nas opposed to creating a new one.\n\n345\n00:16:37.210 --> 00:16:40.270\nSo dash a and dash e will do that.\n\n346\n00:16:40.270 --> 00:16:42.080\nHere I'm using equal sign.\n\n347\n00:16:42.080 --> 00:16:44.950\nYou can use an exclamation point and\nan equal, and\n\n348\n00:16:44.950 --> 00:16:47.970\nthat's if it's not equal to something.\n\n349\n00:16:47.970 --> 00:16:51.230\nSo this is testing if equal so\nthis would be I'm looking for\n\n350\n00:16:51.230 --> 00:16:54.887\na true result, not equal would be\nlooking for a true result also,\n\n351\n00:16:54.887 --> 00:16:57.566\nbut true in that it's false,\nit's not equal.\n\n352\n00:16:57.566 --> 00:16:58.661\nIt gets its-\n&gt;&gt; It's true that it's false.\n\n353\n00:16:58.661 --> 00:17:00.241\n&gt;&gt; Yeah, it gets a little-\n&gt;&gt; I love that.\n\n354\n00:17:00.241 --> 00:17:02.104\n[LAUGH]\n&gt;&gt; So as we've got that,\n\n355\n00:17:02.104 --> 00:17:05.740\nyou can do greater than signs and\nless than signs.\n\n356\n00:17:05.740 --> 00:17:08.840\nSo if a number is greater than another\nnumber or less than another number,\n\n357\n00:17:08.840 --> 00:17:13.430\nyou can do a greater than\nfollowed by a equals sign.\n\n358\n00:17:13.430 --> 00:17:16.950\nSo if it's greater than or\nequal to, then it'll test that way.\n\n359\n00:17:16.950 --> 00:17:20.230\nAnd that's why a lot of times when\nyou see people write the equal sign,\n\n360\n00:17:20.230 --> 00:17:21.320\nthey don't just do one.\n\n361\n00:17:21.320 --> 00:17:23.620\nThey do two equal signs.\n\n362\n00:17:23.620 --> 00:17:24.620\nIt's not always required.\n\n363\n00:17:24.620 --> 00:17:26.080\nIn fact it'll probably break my script.\n\n364\n00:17:26.080 --> 00:17:27.580\nBut It's not always required.\n\n365\n00:17:27.580 --> 00:17:29.520\nBut people get in the habit of\ndoing that because there's so\n\n366\n00:17:29.520 --> 00:17:31.200\nmany other ways that you can do this.\n\n367\n00:17:31.200 --> 00:17:35.160\nYou can say for example,\ngreater than or equal to.\n\n368\n00:17:36.360 --> 00:17:39.750\nAnd by doing that,\nit's kind of two different options.\n\n369\n00:17:39.750 --> 00:17:41.620\nOr less than.\n\n370\n00:17:41.620 --> 00:17:42.790\nOr equal to.\n\n371\n00:17:42.790 --> 00:17:45.810\nYou can say not equal to,\nso it's all two characters.\n\n372\n00:17:45.810 --> 00:17:48.530\nSo, when they say equal, equal,\n\n373\n00:17:48.530 --> 00:17:52.910\nI'm saying it absolutely has to equal, so\nyou'll see it written that way sometimes.\n\n374\n00:17:52.910 --> 00:17:57.270\nIn my script, the way that it's written,\na single equal works just as well.\n\n375\n00:17:57.270 --> 00:17:59.730\nSo those are some different tests.\n\n376\n00:17:59.730 --> 00:18:03.935\nThere's plenty of others like\nyou can test the age of a file,\n\n377\n00:18:03.935 --> 00:18:06.335\nyou can say dash ot for older than.\n\n378\n00:18:06.335 --> 00:18:09.378\nYou can do -nt, for new than.\n\n379\n00:18:09.378 --> 00:18:12.821\nYou've got, for the equal signs?\n\n380\n00:18:12.821 --> 00:18:14.470\nYou don't have to do\nan equal like I'm doing.\n\n381\n00:18:14.470 --> 00:18:15.550\nYou can do a -et.\n\n382\n00:18:15.550 --> 00:18:17.570\nSo for example, if I change my script.\n\n383\n00:18:17.570 --> 00:18:22.000\nInstead of the equals symbol,\nI could say, -eq.\n\n384\n00:18:22.000 --> 00:18:23.510\nAnd that does the same task right.\n\n385\n00:18:23.510 --> 00:18:25.190\nIt's the same as writing an equal symbol.\n\n386\n00:18:25.190 --> 00:18:28.484\nThat's handy sometimes if you're\nhaving problems with your keyboard.\n\n387\n00:18:28.484 --> 00:18:29.747\nLike when you're in a remote shell,\n\n388\n00:18:29.747 --> 00:18:32.131\nsometimes getting that equal symbol\nto pop-up can be a little hard.\n\n389\n00:18:32.131 --> 00:18:34.770\nSo -eq can be a little bit easier.\n\n390\n00:18:34.770 --> 00:18:38.950\nSame thing with like -lt for\nless than, -gt for\n\n391\n00:18:38.950 --> 00:18:42.740\ngreater than, those are all\ndifferent tests that we can perform.\n\n392\n00:18:42.740 --> 00:18:45.230\nAnd if you're trying to write these down,\ndon't worry about it.\n\n393\n00:18:45.230 --> 00:18:47.320\nI've got them all in the show notes, so\n\n394\n00:18:47.320 --> 00:18:49.430\nyou can kinda get an example\nof what that's like.\n\n395\n00:18:49.430 --> 00:18:50.096\n&gt;&gt; Thank you, Don.\n\n396\n00:18:50.096 --> 00:18:51.518\n[LAUGH]\n&gt;&gt; Yeah, and then try and\n\n397\n00:18:51.518 --> 00:18:52.610\nwrite all these down.\n\n398\n00:18:52.610 --> 00:18:55.500\nBut there are a lot of\ntests that are available.\n\n399\n00:18:55.500 --> 00:18:58.218\nIt's gonna vary based on your scenario.\n\n400\n00:18:58.218 --> 00:19:01.060\nYou might wanna perform a command, but\nyou check to make sure there's a certain\n\n401\n00:19:01.060 --> 00:19:03.000\namount of hard drive\nspace available first.\n\n402\n00:19:03.000 --> 00:19:04.970\nDon't runt he command unless there's\na certain amount of hard drive\n\n403\n00:19:04.970 --> 00:19:05.530\nspace available.\n\n404\n00:19:05.530 --> 00:19:07.950\nSo that's the type of test we can do.\n\n405\n00:19:07.950 --> 00:19:09.230\nLook for a file to exist,\n\n406\n00:19:09.230 --> 00:19:12.370\ncompare some numbers,\nthere's any number of things you can do.\n\n407\n00:19:12.370 --> 00:19:14.980\nYou're really just limited\nby your imagination.\n\n408\n00:19:14.980 --> 00:19:19.680\nThe one I'm doing here is just a real\nsimple example, if this value is empty,\n\n409\n00:19:19.680 --> 00:19:22.430\nif it's equal to nothing,\nthen we need to take an action.\n\n410\n00:19:22.430 --> 00:19:24.570\nBut that's what tests are all about.\n\n411\n00:19:24.570 --> 00:19:26.902\nAnd there's a ton of\nthose that are out there.\n\n412\n00:19:26.902 --> 00:19:31.010\n&gt;&gt; So we've learned a lot about if, but is\nthere anything else, any other activity,\n\n413\n00:19:31.010 --> 00:19:32.547\nany other tests that we can do?\n\n414\n00:19:32.547 --> 00:19:35.531\n&gt;&gt; Yeah, I mentioned how you can write the\nequal symbol or you can do dash eq, right?\n\n415\n00:19:35.531 --> 00:19:37.070\nIt's kind of your preference.\n\n416\n00:19:37.070 --> 00:19:39.200\nSame thing with if loops,\nyou can actually shorten them up.\n\n417\n00:19:39.200 --> 00:19:40.590\nThere's a shorthand notation.\n\n418\n00:19:40.590 --> 00:19:43.270\nSo let's combine a few things here and\nI'll show you guys an example.\n\n419\n00:19:43.270 --> 00:19:45.672\nI'm gonna get out of my script though,\nbefore I mess it up.\n\n420\n00:19:45.672 --> 00:19:50.110\n[LAUGH] So I get out of the script,\nand let me just show you a test here.\n\n421\n00:19:50.110 --> 00:19:53.630\nI'm gonna use -e, which is the exists.\n\n422\n00:19:53.630 --> 00:19:55.140\nI'm gonna check and\nsee if something exists.\n\n423\n00:19:56.380 --> 00:20:00.088\nAnd if I'm gonna create a directory for\nexample.\n\n424\n00:20:00.088 --> 00:20:03.763\nWell actually,\n-e is to check if a file exists,\n\n425\n00:20:03.763 --> 00:20:06.640\n-d is to check if a directory exists.\n\n426\n00:20:06.640 --> 00:20:09.540\nSo there are different tests,\nbased on what it is we're checking for.\n\n427\n00:20:09.540 --> 00:20:13.890\nIf I'm about to make a directory,\nI might want to do an if loop that says,\n\n428\n00:20:13.890 --> 00:20:17.530\nif the directory already exists,\ndon't make it but\n\n429\n00:20:17.530 --> 00:20:20.120\nif it doesn't exist,\ngo ahead and make it, right?\n\n430\n00:20:20.120 --> 00:20:23.510\nAnd so, looking at my home folder, maybe\nI wanna make a folder called backups.\n\n431\n00:20:23.510 --> 00:20:25.570\nSo I need a backups folder to exist.\n\n432\n00:20:25.570 --> 00:20:27.130\nSo, I can create a test.\n\n433\n00:20:27.130 --> 00:20:30.180\nSo I'll do a square bracket, and a -d.\n\n434\n00:20:30.180 --> 00:20:32.850\nI'm checking to see if a directory exists.\n\n435\n00:20:32.850 --> 00:20:36.350\nSo I'll say -d and\nthen what that directory is.\n\n436\n00:20:36.350 --> 00:20:40.030\nNow the directory I could pass it in as a\nvariable, in fact that's how we would that\n\n437\n00:20:40.030 --> 00:20:43.080\nif I was in a script here,\nlet's go ahead and put this in a script.\n\n438\n00:20:43.080 --> 00:20:47.060\nWe'll take my script,\nthis hard script that I've worked on so\n\n439\n00:20:47.060 --> 00:20:49.225\nhard, we'll go ahead and\njust clear it out.\n\n440\n00:20:49.225 --> 00:20:53.070\n&gt;&gt; [LAUGH]\n&gt;&gt; So we'll wipe that out and\n\n441\n00:20:53.070 --> 00:20:56.540\nI'll come in here and\nsay, the directory name.\n\n442\n00:20:56.540 --> 00:20:58.085\nSo I might have $DIRNAME,\n\n443\n00:20:58.085 --> 00:21:02.122\nand I wouldn't need a dollar sign\nhere cuz I'm defining the variable.\n\n444\n00:21:02.122 --> 00:21:06.492\nI'll say DIRNAME, and I'll set that\nequal to a particular location.\n\n445\n00:21:06.492 --> 00:21:09.180\nSo I'll say ~/ Backups.\n\n446\n00:21:10.290 --> 00:21:13.923\nSo I'm looking for a directory that's in\nmy home directory, and it's /Backups.\n\n447\n00:21:13.923 --> 00:21:18.393\nI might type the whole directory,\n/home/deposet if I wanna be precise.\n\n448\n00:21:18.393 --> 00:21:21.880\nOr I might leave it like this, so\nother users can run the same script.\n\n449\n00:21:21.880 --> 00:21:24.820\nIf somebody else runs it,\ntilde will map to their home directory.\n\n450\n00:21:24.820 --> 00:21:26.520\nIf I run it, it will map to mine.\n\n451\n00:21:26.520 --> 00:21:29.140\nSo I can define that right there.\n\n452\n00:21:29.140 --> 00:21:36.290\nAnd then when I do my test,\nI can just come in and say -e $DINAME and\n\n453\n00:21:36.290 --> 00:21:41.370\nthat test right there is going to just\ncheck and see, does that directory exist?\n\n454\n00:21:41.370 --> 00:21:46.271\nI don't need to provide a value before\n-e cuz I'm not comparing something.\n\n455\n00:21:46.271 --> 00:21:47.502\nI mean if I wanted to compare a name,\n\n456\n00:21:47.502 --> 00:21:49.770\nI wanted to see if the folder's\nname was backup, I could do that.\n\n457\n00:21:49.770 --> 00:21:56.510\nBut -e $DIRNAME is just gonna do\nbasically -e ~/Backups, doesn't exist.\n\n458\n00:21:56.510 --> 00:21:58.960\nIf it's true then I'm gonna do something.\n\n459\n00:21:58.960 --> 00:22:03.700\nAnd before I actually wrote a semicolon\nand then, and then what I was gonna do.\n\n460\n00:22:03.700 --> 00:22:07.270\nBut in shorthand you can\nactually just do &amp;&amp;.\n\n461\n00:22:07.270 --> 00:22:09.750\nThat's a short hand notation for then.\n\n462\n00:22:09.750 --> 00:22:15.675\nSo if the directory already exists,\nthen I'm gonna echo a message.\n\n463\n00:22:15.675 --> 00:22:17.841\nDirectory already.\n\n464\n00:22:19.172 --> 00:22:20.480\nExists.\n\n465\n00:22:20.480 --> 00:22:21.810\nRight?\nNo point in creating it again,\n\n466\n00:22:21.810 --> 00:22:22.430\nit already exists.\n\n467\n00:22:23.620 --> 00:22:26.390\nAnd then, there comes the else part.\n\n468\n00:22:26.390 --> 00:22:29.720\nAnd else, you have a shorthand\nnotation of two pipes.\n\n469\n00:22:29.720 --> 00:22:31.650\nThe pipe character,\nthe two vertical lines,\n\n470\n00:22:31.650 --> 00:22:34.150\nit's usually right above your enter or\nreturn key.\n\n471\n00:22:34.150 --> 00:22:36.740\nIf you do two pipes,\nthat's shorthand for else.\n\n472\n00:22:36.740 --> 00:22:41.440\nSo, the two ampersands for\nthen, the two pipes for else.\n\n473\n00:22:41.440 --> 00:22:44.544\nAnd I'll say, else I wanna go ahead and\nmake that directly.\n\n474\n00:22:44.544 --> 00:22:49.721\nSo, I'll mkdr Backups.\n\n475\n00:22:49.721 --> 00:22:52.770\nActually, b is tactically correct here.\n\n476\n00:22:52.770 --> 00:22:55.110\nOr if I really want it I\ncould just reuse my variable.\n\n477\n00:22:55.110 --> 00:22:58.791\nRight?\nI could say make there $DIRNAME.\n\n478\n00:22:58.791 --> 00:23:00.460\nAnd so it's gonna go ahead and create it.\n\n479\n00:23:00.460 --> 00:23:03.040\nAnd that way, I can come back later on and\nmaybe just update that variable, or\n\n480\n00:23:03.040 --> 00:23:05.640\neven pass the variable from\nthe command line and get it created.\n\n481\n00:23:05.640 --> 00:23:09.400\nSo this is just gonna use a test\nto make sure the directory exists.\n\n482\n00:23:09.400 --> 00:23:13.383\nIf it does, it lets me know,\nif it doesn't, it makes the directory,\n\n483\n00:23:13.383 --> 00:23:14.673\npretty cut and dried.\n\n484\n00:23:14.673 --> 00:23:16.826\nAnd this notation here\nis much more simple,\n\n485\n00:23:16.826 --> 00:23:19.742\nit's all on one line which\nsometimes that's a nightmare.\n\n486\n00:23:19.742 --> 00:23:21.730\nIt's one really, really long line.\n\n487\n00:23:21.730 --> 00:23:22.780\nBut this line is really short.\n\n488\n00:23:22.780 --> 00:23:25.830\nThe if then else loop,\nis completely contained in\n\n489\n00:23:25.830 --> 00:23:30.100\none line doing a simple test and\na short hand notation for that.\n\n490\n00:23:30.100 --> 00:23:32.066\nAnd if we test it out.\n\n491\n00:23:32.066 --> 00:23:34.320\nOur ultimate test here to\nsee if this thing works.\n\n492\n00:23:35.330 --> 00:23:38.610\nIf I run that, I can see up here\nI don't have a backups folder.\n\n493\n00:23:38.610 --> 00:23:39.574\nSo when I run the script,\n\n494\n00:23:39.574 --> 00:23:43.970\nI get cannot create directory\n'~/Backups': No such file or directory.\n\n495\n00:23:45.110 --> 00:23:46.250\nYou know what?\n\n496\n00:23:46.250 --> 00:23:48.540\nIt's not expanding my tilde mark.\n\n497\n00:23:48.540 --> 00:23:52.980\nSo, expansion can be a problem\nwhen you run scripts like these.\n\n498\n00:23:52.980 --> 00:23:54.990\nWe have expansion here\nin the command line.\n\n499\n00:23:54.990 --> 00:24:01.332\nIf I do cd ~/ whatever, that will\nwork because BASH is expanding that.\n\n500\n00:24:01.332 --> 00:24:05.337\nBut inside of a script, sometimes it'll\ntreat those as literal values, and\n\n501\n00:24:05.337 --> 00:24:09.287\nwhen it's a literal value it's not able\nto expand it out into the full name.\n\n502\n00:24:09.287 --> 00:24:11.051\nAnd so to be on the safe side here,\n\n503\n00:24:11.051 --> 00:24:14.713\nI'm gonna adjust my script to\nactually use the full directory name.\n\n504\n00:24:14.713 --> 00:24:22.175\nAnd so I'll say /home/dpezet and\nI could populate this from variables too.\n\n505\n00:24:22.175 --> 00:24:26.417\nSo if I really want it to be customary for\nvarious users, right inside of\n\n506\n00:24:26.417 --> 00:24:31.560\nhere remember that we could always do\na parenthesis and throw in a command.\n\n507\n00:24:31.560 --> 00:24:36.480\nLike if we wanted to throw in whoami\nlike that, then that would grab their\n\n508\n00:24:36.480 --> 00:24:41.013\nusername and stick it in there,\nand that way it would be flexible.\n\n509\n00:24:41.013 --> 00:24:43.820\nBut in my case, I'm gonna try and keep it\nsimple here and just do it for myself.\n\n510\n00:24:44.970 --> 00:24:45.796\nAnd so there we go.\n\n511\n00:24:45.796 --> 00:24:49.030\nAnd so now it's got a full one and\nit's not going to have to expand that out.\n\n512\n00:24:49.030 --> 00:24:55.380\nSo now when we go in and we run that\nscript, I get no response, right?\n\n513\n00:24:55.380 --> 00:24:58.220\nIf the directory already\nexisted it would have told me.\n\n514\n00:24:58.220 --> 00:25:02.280\nIf I look,\nI now have a folder called backups.\n\n515\n00:25:02.280 --> 00:25:06.110\nAnd if I run the script again\nthe directory already exists.\n\n516\n00:25:06.110 --> 00:25:10.220\nThe test passed, and so the step to\ntake was to echo that the directory\n\n517\n00:25:10.220 --> 00:25:11.920\nalready exists, not to create it again.\n\n518\n00:25:11.920 --> 00:25:13.886\nI didn't get an error, so\nnow it's working properly, and\n\n519\n00:25:13.886 --> 00:25:15.115\nwe're able to execute that and run.\n\n520\n00:25:15.115 --> 00:25:18.661\nSo that's kind of the shorthand notation\nfor the if-then-else construct.\n\n521\n00:25:18.661 --> 00:25:21.213\nIt gives you another example\nof how we can use that and\n\n522\n00:25:21.213 --> 00:25:24.230\nthe testing,all the different\ntesting that's available.\n\n523\n00:25:24.230 --> 00:25:25.910\nIt's really powerful stuff.\n\n524\n00:25:25.910 --> 00:25:29.660\nAnd if this is the only construct you\nlearn, it might actually be enough.\n\n525\n00:25:29.660 --> 00:25:33.100\nThis is very powerful stuff,\nbut there are plenty of others.\n\n526\n00:25:33.100 --> 00:25:34.582\n&gt;&gt; I don't know if we have enough time for\nthis, but\n\n527\n00:25:34.582 --> 00:25:35.752\nI'm gonna throw it out there anyway.\n\n528\n00:25:35.752 --> 00:25:39.770\nSo if is probably the most\ncommon construct.\n\n529\n00:25:39.770 --> 00:25:41.518\nAnd you just mentioned this,\nthere's other constructs.\n\n530\n00:25:41.518 --> 00:25:44.005\nDo we have time to talk about that or\nshould we put that in part two?\n\n531\n00:25:44.005 --> 00:25:47.444\n&gt;&gt; We probably need to go on to a part\ntwo, because if, while it is powerful,\n\n532\n00:25:47.444 --> 00:25:48.950\nis really just doing one thing.\n\n533\n00:25:48.950 --> 00:25:50.131\nWell, I guess one of two things, right?\n\n534\n00:25:50.131 --> 00:25:51.784\nYou've got a fork in the road.\n\n535\n00:25:51.784 --> 00:25:56.760\nBut there's going to be times where you\nwant more than just one of two things.\n\n536\n00:25:56.760 --> 00:25:59.553\nAnd you can nest if loops if you want,\nbut that gets really complex.\n\n537\n00:25:59.553 --> 00:26:02.643\nThere's another construct I\nwanna talk about called Case.\n\n538\n00:26:02.643 --> 00:26:05.914\nAnd with Case,\nyou can do several different outcomes,\n\n539\n00:26:05.914 --> 00:26:07.520\nall inside of one command.\n\n540\n00:26:07.520 --> 00:26:11.257\nIt's very powerful, so I wanna make sure\nI show you guys that, as well as some\n\n541\n00:26:11.257 --> 00:26:15.470\nother things, like while loops, and until\nloops and stuff where it's the same idea.\n\n542\n00:26:15.470 --> 00:26:18.690\nYou can do things repeatedly or\nin repetition.\n\n543\n00:26:18.690 --> 00:26:19.860\nSo I wanna take a look at those.\n\n544\n00:26:19.860 --> 00:26:22.226\nDefinitely not enough time\nleft on the clock today.\n\n545\n00:26:22.226 --> 00:26:24.080\nSo let's break this into a part two, Zack.\n\n546\n00:26:24.080 --> 00:26:26.698\n&gt;&gt; Let's do that.\nAnd we're gonna get loopy in part two,\n\n547\n00:26:26.698 --> 00:26:29.981\nBecoming a Linux Power User,\nProgramming Constructs.\n\n548\n00:26:29.981 --> 00:26:32.380\nAny last words before we go?\n\n549\n00:26:32.380 --> 00:26:33.144\n&gt;&gt; That's about it.\n\n550\n00:26:33.144 --> 00:26:36.480\nI do notice I had an error in my script.\n\n551\n00:26:36.480 --> 00:26:39.717\nIt happens that text expansion, stray\ncharacters that get put in your script,\n\n552\n00:26:39.717 --> 00:26:41.620\nthose are all things\nthat can cause problems.\n\n553\n00:26:41.620 --> 00:26:44.560\nSo when you're debugging a script,\nalways look for that.\n\n554\n00:26:44.560 --> 00:26:47.158\nLook for a missing bracket,\na missing semicolon,\n\n555\n00:26:47.158 --> 00:26:49.037\nan extra space inserted somewhere.\n\n556\n00:26:49.037 --> 00:26:51.048\nThese are all little things\nthat can derail a script.\n\n557\n00:26:51.048 --> 00:26:53.156\nSo you always wanna write a script and\n\n558\n00:26:53.156 --> 00:26:56.150\ntest it before you move it\ninto production, right?\n\n559\n00:26:56.150 --> 00:26:58.838\nSo always test it out,\ndon't test it on your production data or\n\n560\n00:26:58.838 --> 00:27:00.015\nyou might lose something.\n\n561\n00:27:00.015 --> 00:27:03.938\nAnd once you've tested it,\nyou see everything's working fun,\n\n562\n00:27:03.938 --> 00:27:06.516\nthen roll it into production and\nlet it go.\n\n563\n00:27:06.516 --> 00:27:07.725\n&gt;&gt; Great information as usual, Don.\n\n564\n00:27:07.725 --> 00:27:10.362\nAnd thank you for watching ITProTV.\n\n565\n00:27:10.362 --> 00:27:13.710\nRemember, an IT Pro is always learning.\n\n566\n00:27:13.710 --> 00:27:14.278\n&gt;&gt; I'm Zach Memos.\n\n567\n00:27:14.278 --> 00:27:15.109\n&gt;&gt; And I'm Don Pezet.\n\n568\n00:27:15.109 --> 00:27:16.540\n&gt;&gt; And we'll see you later.\n\n569\n00:27:21.189 --> 00:27:24.270\n[MUSIC]\n\n570\n00:27:24.270 --> 00:27:27.503\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "222836339"
        },
        {
          "description": "Don and Zach continue the discussion of alternate constructs, explain what ‘case’ is, cover what a ‘Loop’ is, show how a simple loop can be used to perform certain activities more than once, look at alternate or more complex loops, and conclude with how ‘While-Do-& Until Do’ function.",
          "length": "1977",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-2-programming_contructs_pt2-062217-PGM.00_32_40_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-2-programming_contructs_pt2-062217-PGM.00_32_40_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxpoweruser/techskills-linuxpoweruser-5-2-2-programming_contructs_pt2-062217-PGM.00_32_40_01.Still001-sm.jpg",
          "title": "Programming Constructs Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.150\nWelcome to ITProTV.\n\n2\n00:00:01.150 --> 00:00:08.456\nI'm your host Don Pezet\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:08.456 --> 00:00:09.045\n[MUSIC]\n\n4\n00:00:09.045 --> 00:00:10.740\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.240 --> 00:00:13.340\n&gt;&gt; Hello again and thank you for\n\n6\n00:00:13.340 --> 00:00:17.810\nchoosing ITProTV where we help\nyou learn wherever you go.\n\n7\n00:00:17.810 --> 00:00:22.320\nI'm your host Zach Memos as we continue\non with becoming a Linux power user.\n\n8\n00:00:22.320 --> 00:00:25.370\nAnd this is programming\nconstructs part [FOREIGN] and\n\n9\n00:00:26.850 --> 00:00:29.520\nbringing us all the information\nwe need is Don Pezet.\n\n10\n00:00:29.520 --> 00:00:30.820\nDon, good to see you again sir.\n\n11\n00:00:30.820 --> 00:00:32.120\n&gt;&gt; Thanks for having me back Zach.\n\n12\n00:00:32.120 --> 00:00:36.270\nReady to continue our adventure in the\nworld of programming constructs because\n\n13\n00:00:36.270 --> 00:00:38.070\nwe've got a taste of it now.\n\n14\n00:00:38.070 --> 00:00:40.640\nWe've seen some of the neat things\nwe can do inside of a script.\n\n15\n00:00:40.640 --> 00:00:42.250\nIf we just add a little logic to it.\n\n16\n00:00:42.250 --> 00:00:45.020\nSo we're going to be continuing\nthat on right here in part two.\n\n17\n00:00:45.020 --> 00:00:48.585\n&gt;&gt; Awesome so\nI think when last we saw Don and Zach.\n\n18\n00:00:48.585 --> 00:00:51.650\n&gt;&gt; [LAUGH]\n&gt;&gt; So it was an if, then, else.\n\n19\n00:00:51.650 --> 00:00:53.168\n&gt;&gt; Right.\n&gt;&gt; And the new constructs, and\n\n20\n00:00:53.168 --> 00:00:54.910\nthe other constructs we can look at?\n\n21\n00:00:54.910 --> 00:00:58.040\n&gt;&gt; Absolutely, so I think it was one of\nthe last things I had said in the episode\n\n22\n00:00:58.040 --> 00:01:00.570\nwas that the if statements\nare pretty powerful, right?\n\n23\n00:01:00.570 --> 00:01:02.070\nThey create a fork in the road.\n\n24\n00:01:02.070 --> 00:01:03.220\nYou've got two options.\n\n25\n00:01:03.220 --> 00:01:06.060\nSo, if the test is true, you go this way.\n\n26\n00:01:06.060 --> 00:01:07.310\nIf the test is false, you go that way.\n\n27\n00:01:07.310 --> 00:01:09.090\nIt's like a choose your own\nadventure novel, right?\n\n28\n00:01:09.090 --> 00:01:10.580\nYou pick where you're going to go.\n\n29\n00:01:10.580 --> 00:01:15.513\nWell, what if I want to have three\nchoices, or four choices, or five choices?\n\n30\n00:01:15.513 --> 00:01:18.783\nWell, if statements don't do so well with\nthat, you'd have to nest if statement.\n\n31\n00:01:18.783 --> 00:01:22.130\nIt gets really complex and your chance of\nmessing it up becomes very, very, high.\n\n32\n00:01:22.130 --> 00:01:27.840\nSo instead we can use a different type\nof construct, one that's called case.\n\n33\n00:01:27.840 --> 00:01:32.380\nYou can create a case construct that\ncreates several different scenarios,\n\n34\n00:01:32.380 --> 00:01:35.260\nas many as you want, hundreds,\nthousands, if you really wanna go crazy.\n\n35\n00:01:35.260 --> 00:01:37.290\nAnd now it can react along any of those.\n\n36\n00:01:37.290 --> 00:01:41.520\nSo you don't just have a fork in the road,\nnow you've got tons and tons of options.\n\n37\n00:01:41.520 --> 00:01:42.530\n&gt;&gt; You have a tree.\n\n38\n00:01:42.530 --> 00:01:44.910\n&gt;&gt; Yeah,\nit's like an if on steroids, right.\n\n39\n00:01:44.910 --> 00:01:47.170\nThat's what we're gonna\ntaking a look at right here.\n\n40\n00:01:47.170 --> 00:01:50.140\nSo let me paint a real-world example.\n\n41\n00:01:50.140 --> 00:01:55.210\nAll right I want to back up\nthe documents folder in my user profile.\n\n42\n00:01:55.210 --> 00:01:56.690\nAll right?\nSo I've got my documents there, and\n\n43\n00:01:56.690 --> 00:01:57.880\nI want to back it up.\n\n44\n00:01:57.880 --> 00:02:01.580\nNow, I could write a simple\nscript that runs a backup and\n\n45\n00:02:01.580 --> 00:02:03.840\nstores it in a folder somewhere.\n\n46\n00:02:03.840 --> 00:02:06.050\nAnd then each day I run that script and\n\n47\n00:02:06.050 --> 00:02:08.990\nit overwrites the old backup\nwith the new back up.\n\n48\n00:02:08.990 --> 00:02:12.440\nBut what if I wanna keep my back\nups around for a little while?\n\n49\n00:02:12.440 --> 00:02:15.800\nI might want it to run a backup\neach day of the week, and\n\n50\n00:02:15.800 --> 00:02:18.070\nsave it to a different\nfile name each time.\n\n51\n00:02:18.070 --> 00:02:22.038\nSo, on Monday, I wanna call the backup\nMonday, and on Tuesday, Tuesday,\n\n52\n00:02:22.038 --> 00:02:22.598\nand so on.\n\n53\n00:02:22.598 --> 00:02:26.274\nSo they're not overriding each other, and\nnow I'll have a week's worth of backups\n\n54\n00:02:26.274 --> 00:02:29.150\nbefore the next Monday\noverwrites the first Monday.\n\n55\n00:02:29.150 --> 00:02:33.700\nThat's great, but, technically,\nthat's seven different forks in the road\n\n56\n00:02:33.700 --> 00:02:35.770\nwhen I run the backup its got\nto check the day of the week,\n\n57\n00:02:35.770 --> 00:02:37.420\nand there is seven possibilities.\n\n58\n00:02:37.420 --> 00:02:38.800\nAt least in most people's week.\n\n59\n00:02:38.800 --> 00:02:41.920\nAnd so its got to look at\nSunday through Saturday and\n\n60\n00:02:41.920 --> 00:02:45.620\nfigure out which day of the week it is and\nname the file appropriately.\n\n61\n00:02:45.620 --> 00:02:48.920\nI can do that with an if-statement,\nbut it would take a lot of work.\n\n62\n00:02:48.920 --> 00:02:51.220\nWith a case statement it's really easy.\n\n63\n00:02:51.220 --> 00:02:54.130\nSo let me show you how case works and\ngive you an example.\n\n64\n00:02:54.130 --> 00:02:56.080\nWe'll kind of run with this\nidea of doing a back up, right?\n\n65\n00:02:56.080 --> 00:03:00.072\nSo I'm going to create\na script called mybackup.sh.\n\n66\n00:03:00.072 --> 00:03:05.045\nAnd like most scripts I'm going to start\nby telling it which interpreter I'm going\n\n67\n00:03:05.045 --> 00:03:05.550\nto use.\n\n68\n00:03:05.550 --> 00:03:08.670\nI'm using /bin/bash all right?\n\n69\n00:03:08.670 --> 00:03:11.720\nAnd then I'm gonna start telling\nit what I want it to do.\n\n70\n00:03:11.720 --> 00:03:16.140\nNow, I'm not gonna need any input on\nthis one cuz this is gonna be my script.\n\n71\n00:03:16.140 --> 00:03:18.920\nI'm gonna hard set everything but\nyou might want to put in\n\n72\n00:03:18.920 --> 00:03:22.120\nvariables in taking input to\ndo all such a crazy things.\n\n73\n00:03:22.120 --> 00:03:25.090\nI wanna keep it simple here so\nwe can see exactly what case does.\n\n74\n00:03:25.090 --> 00:03:28.774\nSo I'm gonna jump right into case.\n\n75\n00:03:28.774 --> 00:03:31.867\nNow just like the if statement,\nwith if, I would say,\n\n76\n00:03:31.867 --> 00:03:35.720\nif a certain something was true\nthen I would do something else.\n\n77\n00:03:35.720 --> 00:03:37.700\nWell here I need a set of cases, and\n\n78\n00:03:37.700 --> 00:03:41.890\nthe case is gonna be based on a value and\nthe value is gotta come from somewhere.\n\n79\n00:03:41.890 --> 00:03:44.400\nWell the somewhere I need\nis the day of the week.\n\n80\n00:03:44.400 --> 00:03:47.970\nAnd that's a tough one like how do we\nfigure out how to get the day of the week.\n\n81\n00:03:47.970 --> 00:03:50.100\nAnd fortunately, in the Linux world,\n\n82\n00:03:50.100 --> 00:03:54.100\nthere are a ton of commands that give us\ninformation if we know how to use them.\n\n83\n00:03:54.100 --> 00:03:54.650\nSo for example,\n\n84\n00:03:54.650 --> 00:03:59.200\nthe day of the week, if I run the date\ncommand it tells me the day of the week.\n\n85\n00:03:59.200 --> 00:04:00.790\nHey, it's Thursday, all right?\n\n86\n00:04:00.790 --> 00:04:02.750\nThe problem is it tells\nme a lot more also.\n\n87\n00:04:02.750 --> 00:04:08.778\nIt tells me it's Thursday, June 22nd, it's\n10:43:04 AM Eastern Daylight Time, 2017.\n\n88\n00:04:08.778 --> 00:04:11.945\nSo I don't wanna look for that string,\ncuz that's already in the past and\n\n89\n00:04:11.945 --> 00:04:13.450\nit's never gonna happen.\n\n90\n00:04:13.450 --> 00:04:15.710\nI just wanna look for the very beginning.\n\n91\n00:04:15.710 --> 00:04:17.885\nNow, there's utilities we can use,\nlike cut,\n\n92\n00:04:17.885 --> 00:04:19.913\nwhere I can cut just\nthe first three letters.\n\n93\n00:04:19.913 --> 00:04:22.260\nAnd then I would get THU.\n\n94\n00:04:22.260 --> 00:04:23.440\nThat's exactly what I need.\n\n95\n00:04:23.440 --> 00:04:27.770\nI know it's Thursday, or SAT for Saturday,\nor WED for Wednesday, I get what I want,\n\n96\n00:04:27.770 --> 00:04:29.230\nso I can feed it through cut.\n\n97\n00:04:29.230 --> 00:04:31.810\nBut the date command,\nif you look at the manual file for\n\n98\n00:04:31.810 --> 00:04:34.300\nit, it actually has some\ncommand line arguments.\n\n99\n00:04:34.300 --> 00:04:38.914\nAnd you can run date plus percent a.\n\n100\n00:04:38.914 --> 00:04:41.360\nAnd it will return just the day.\n\n101\n00:04:41.360 --> 00:04:42.720\nSo now it returns THU.\n\n102\n00:04:42.720 --> 00:04:45.780\nThat's exactly what I want, and I don't\nhave to mess around with the cut command.\n\n103\n00:04:45.780 --> 00:04:49.620\nSo, you'll have to do a little digging to\nfind out how to get exactly what you want\n\n104\n00:04:49.620 --> 00:04:52.310\nfor your scenario, but\nthere's numerous ways to do it.\n\n105\n00:04:52.310 --> 00:04:55.280\nIn my case,\nI can just call the date command directly.\n\n106\n00:04:55.280 --> 00:04:58.960\nAnd when we call a command inside of a\nscript like this when it's part of a loop,\n\n107\n00:04:58.960 --> 00:05:01.110\nwe need to make sure we do\na back tick to separate it out.\n\n108\n00:05:01.110 --> 00:05:02.379\nSo I'm going to separate that out.\n\n109\n00:05:02.379 --> 00:05:08.109\nAnd I'll do date +%A so\nthat it knows to execute that command.\n\n110\n00:05:08.109 --> 00:05:13.260\nSo now it knows where its going to go and\nget a value from.\n\n111\n00:05:13.260 --> 00:05:17.480\nAnd now its got to compare it\nagainst several different scenarios.\n\n112\n00:05:17.480 --> 00:05:18.450\nAnd so I need to say,\n\n113\n00:05:18.450 --> 00:05:22.980\nend and now I can start to define\nthose scenarios, all right?\n\n114\n00:05:22.980 --> 00:05:26.892\nNow each scenario is going to match up\nto a day of the week, in my case or\n\n115\n00:05:26.892 --> 00:05:30.140\nI could even group them together,\nif I really wanted to.\n\n116\n00:05:30.140 --> 00:05:32.980\nIt's up to me how I wanna go about it.\n\n117\n00:05:32.980 --> 00:05:35.600\nIf I wanna do each day of the week,\nI could come in and\n\n118\n00:05:35.600 --> 00:05:39.300\nI could say Saturday and\nI'm putting them in quote mark.\n\n119\n00:05:39.300 --> 00:05:41.510\nSo it's gonna match which case is getting.\n\n120\n00:05:41.510 --> 00:05:44.649\nSo if it's Saturday,\nI'm gonna perform an action or\n\n121\n00:05:44.649 --> 00:05:47.874\nif it's Sunday, whoops,\nkeep on doing all capital.\n\n122\n00:05:47.874 --> 00:05:51.678\nIf it's Sunday I'm wanna\nperform an action or\n\n123\n00:05:51.678 --> 00:05:55.820\nif it's Monday I'm gonna\nperform an action.\n\n124\n00:05:55.820 --> 00:05:58.120\nAnd I'm laying out each case, right?\n\n125\n00:05:58.120 --> 00:06:02.407\nEach possibility, let me just stop right\nthere, otherwise the show'll get boring.\n\n126\n00:06:02.407 --> 00:06:04.490\n&gt;&gt; [LAUGH] And I've got a question for\nyou, real quick.\n\n127\n00:06:04.490 --> 00:06:05.030\n&gt;&gt; Okay.\n\n128\n00:06:05.030 --> 00:06:07.560\n&gt;&gt; Is case always lowercase?\n\n129\n00:06:07.560 --> 00:06:09.930\n&gt;&gt; Yeah, in this scenario because\nit is technically a command, right?\n\n130\n00:06:09.930 --> 00:06:12.110\n&gt;&gt; Yeah.\n&gt;&gt; So, it does have to be lowercase.\n\n131\n00:06:12.110 --> 00:06:15.225\nLike it's written there, but some of\nthe things you feed into it might not be.\n\n132\n00:06:15.225 --> 00:06:18.550\nAnd see how I'm doing the capital\nletters on each day of the month?\n\n133\n00:06:18.550 --> 00:06:20.460\nThat's because of how\ndate is returning that.\n\n134\n00:06:20.460 --> 00:06:23.960\nWhen we run the date command,\nsee how that t is capitalized there?\n\n135\n00:06:23.960 --> 00:06:28.670\nSo if I get my casing wrong,\nthe letter casing, it gets confusing.\n\n136\n00:06:28.670 --> 00:06:30.590\nIf I get my letter casing wrong\nit breaks everything, right?\n\n137\n00:06:30.590 --> 00:06:33.190\nSo I've got to make sure I mirror\nthe data that I'm getting back.\n\n138\n00:06:34.230 --> 00:06:36.240\nAnd then inside of each scenario.\n\n139\n00:06:36.240 --> 00:06:39.730\nSo I've laid out three scenarios now,\nSaturday, Sunday, and Monday.\n\n140\n00:06:39.730 --> 00:06:42.549\nInside of each scenario I'm\ngoing to take an action, and\n\n141\n00:06:42.549 --> 00:06:44.439\nmy action is going to be to do a backup.\n\n142\n00:06:44.439 --> 00:06:48.632\nAnd so I can come in here and tell it\nhow I want it to run the backup and\n\n143\n00:06:48.632 --> 00:06:52.217\nI might use the tar utility to\ncreate a zipped archive and\n\n144\n00:06:52.217 --> 00:06:54.750\nthen I can tell it what I want to back up.\n\n145\n00:06:54.750 --> 00:06:59.380\nSo I will back up my documents folder,\nright, well actually,\n\n146\n00:06:59.380 --> 00:07:02.510\nhang on, I need to tell it where to put\nthe backup before I get the syntax right.\n\n147\n00:07:02.510 --> 00:07:05.869\nSo I need to go and read the tar manual so\nthat I can remember how to do it.\n\n148\n00:07:05.869 --> 00:07:08.833\nBut I need to tell it\nwhere I'm backing up to,\n\n149\n00:07:08.833 --> 00:07:11.900\nwhich is going to be my backups folder.\n\n150\n00:07:11.900 --> 00:07:16.898\nAnd because this is Saturday,\nI might call this backup Saturday.tgz.\n\n151\n00:07:16.898 --> 00:07:19.750\nIt's a tard g zip.\n\n152\n00:07:19.750 --> 00:07:22.540\nAnd then the folder that I want to\nback up is my documents folder.\n\n153\n00:07:22.540 --> 00:07:26.770\nAnd then for each day of the week,\nI can come through and\n\n154\n00:07:26.770 --> 00:07:32.070\nI can take that value and I can just\n\n155\n00:07:33.640 --> 00:07:38.760\nkinda paste that in here\ncuz I'm a lazy typer.\n\n156\n00:07:38.760 --> 00:07:42.416\nAnd then I can just come through and\nchange each one to say all right,\n\n157\n00:07:42.416 --> 00:07:45.190\nwell on Sunday,\nI want to call that file, Sunday.\n\n158\n00:07:45.190 --> 00:07:50.460\nAnd on Monday, I want to call it\nMonday and so on like that, right?\n\n159\n00:07:50.460 --> 00:07:54.330\nAnd so when this run it's going to\nsay case date plus percent a and\n\n160\n00:07:54.330 --> 00:07:56.778\nit's going to get a day of the week back.\n\n161\n00:07:56.778 --> 00:07:59.130\nSo today it would get THU, Thursday right?\n\n162\n00:07:59.130 --> 00:08:03.314\nAnd then based on Thursday it will say in\nand it's going to look down this list and\n\n163\n00:08:03.314 --> 00:08:04.200\nfind Thursday.\n\n164\n00:08:04.200 --> 00:08:08.042\nAnd then it's gonna do\nwhatever Thursday says to do.\n\n165\n00:08:08.042 --> 00:08:09.861\nWell, in mine I haven't defined Thursday,\nso\n\n166\n00:08:09.861 --> 00:08:11.860\nthat's going to be a bit of a problem for\nme.\n\n167\n00:08:11.860 --> 00:08:15.646\nThere is actually one other case that\nI left off that's kind of important,\n\n168\n00:08:15.646 --> 00:08:16.860\nwhich is a catch-all.\n\n169\n00:08:16.860 --> 00:08:18.060\nWhat if it doesn't match anything?\n\n170\n00:08:18.060 --> 00:08:20.720\nSo right now Thursday doesn't match\nany of these, so what's gonna happen?\n\n171\n00:08:20.720 --> 00:08:25.270\nYou can actually say *,\nfollowed by a closed parentheses.\n\n172\n00:08:25.270 --> 00:08:27.760\nAnd that's gonna say,\neverybody else, okay?\n\n173\n00:08:27.760 --> 00:08:31.010\nWhat's everybody else going to do?\n\n174\n00:08:31.010 --> 00:08:35.420\nAnd so if I wanted to do a backup,\nwell, like I do at home.\n\n175\n00:08:35.420 --> 00:08:38.800\nI do a weekly backup, and\nthen I do a daily backup.\n\n176\n00:08:38.800 --> 00:08:41.240\nI don't really differentiate\nbased on the individual days.\n\n177\n00:08:41.240 --> 00:08:43.460\nI just do a daily backup that yeah,\nit's overwriting.\n\n178\n00:08:43.460 --> 00:08:45.930\nBut then I've got this weekly\nbackup that stays around longer.\n\n179\n00:08:45.930 --> 00:08:49.430\nSo maybe I wanna do a weekly backup on\nSaturdays, so let's change my script.\n\n180\n00:08:49.430 --> 00:08:52.880\nI'll come in here and just say,\non Saturday I want to run a back up and\n\n181\n00:08:52.880 --> 00:08:56.020\nI wanna call it my weekly back up.\n\n182\n00:08:56.020 --> 00:08:57.540\nAnd it only runs on Saturdays, so\n\n183\n00:08:57.540 --> 00:08:59.480\nI'll hold on to that all the way\nuntil the next Saturday.\n\n184\n00:08:59.480 --> 00:09:00.460\nAnd then it will get overwritten,\n\n185\n00:09:00.460 --> 00:09:02.130\nand then next Saturday after\nthat it'll get overwritten.\n\n186\n00:09:02.130 --> 00:09:08.020\nSo I can always go back seven days, but\nthen on the other days of the week,\n\n187\n00:09:08.020 --> 00:09:12.810\nI want them to do the regular backup.\n\n188\n00:09:12.810 --> 00:09:15.750\nAnd so I'll take Sunday, here, and\nlet me just get rid of that, and\n\n189\n00:09:15.750 --> 00:09:17.680\nchange it to an asterisk.\n\n190\n00:09:17.680 --> 00:09:20.840\nAnd I'll change that\nbackup name to be daily.\n\n191\n00:09:20.840 --> 00:09:24.340\nAnd so now it's gonna run a daily\nbackup on every other day,\n\n192\n00:09:24.340 --> 00:09:27.920\nand then I can just go through and\nget rid of these lines, like that.\n\n193\n00:09:27.920 --> 00:09:31.070\nAll right, now I am still missing\na couple of important pieces of syntax.\n\n194\n00:09:31.070 --> 00:09:32.440\nI've got all the opening statements here,\nbut\n\n195\n00:09:32.440 --> 00:09:33.620\nI don't have any of\nthe closing statements,\n\n196\n00:09:33.620 --> 00:09:35.750\nI have to close out each of these.\n\n197\n00:09:35.750 --> 00:09:39.300\nI might have many,\nmany commands that run on Saturday.\n\n198\n00:09:39.300 --> 00:09:42.900\nAnd so I would have line after line\nafter line of all these commands.\n\n199\n00:09:42.900 --> 00:09:45.080\nSo how does it know when that case ends?\n\n200\n00:09:45.080 --> 00:09:51.870\nWell, the way it knows is, you put\nin a line with two semicolons, okay?\n\n201\n00:09:51.870 --> 00:09:56.530\nThe two semicolons let it know,\nthat's the end of this case, case closed.\n\n202\n00:09:56.530 --> 00:09:58.340\nAnd then we can go down to this other one,\nand\n\n203\n00:09:58.340 --> 00:10:00.160\nwe can add the two semicolons\nthere as well, right?\n\n204\n00:10:00.160 --> 00:10:01.670\nSo that's how it knows that they end.\n\n205\n00:10:01.670 --> 00:10:06.340\nIf you don't put those semicolons in,\nit bleeds over into the next case, and\n\n206\n00:10:06.340 --> 00:10:08.630\nit breaks things,\nit usually just doesn't work.\n\n207\n00:10:08.630 --> 00:10:12.530\nBut you could inadvertently run extra\ncommands that you don't intend to run.\n\n208\n00:10:12.530 --> 00:10:16.961\nSo now, it's gonna run case, it's gonna\nfind the date as the three letter day\n\n209\n00:10:16.961 --> 00:10:19.666\nname, right, that's what we're querying.\n\n210\n00:10:19.666 --> 00:10:24.121\nAnd if it's Saturday,\nthen it'll backup my documents\n\n211\n00:10:24.121 --> 00:10:27.740\nfolder into this weekly .tgz file, right?\n\n212\n00:10:27.740 --> 00:10:30.900\nBut if it's any other day,\nit's gonna match this asterisk, and\n\n213\n00:10:30.900 --> 00:10:32.560\nit's gonna run the daily backup.\n\n214\n00:10:32.560 --> 00:10:35.470\nAnd those are gonna overwrite\neach other every day as they run,\n\n215\n00:10:35.470 --> 00:10:38.040\nbecause it's the same file name, right?\n\n216\n00:10:38.040 --> 00:10:41.820\nI could store the date in a variable and\nthen use the variable in the file name,\n\n217\n00:10:41.820 --> 00:10:45.360\nand now I've one backup for everyday\nof the week, if I want to go crazy.\n\n218\n00:10:45.360 --> 00:10:47.220\nBut this is good enough for me, right?\n\n219\n00:10:47.220 --> 00:10:50.710\nAnd then I still need to close the whole\ncase out, and this is kinda of funny one.\n\n220\n00:10:50.710 --> 00:10:55.025\nIs remember with if, when I closed out the\nif construct we just wrote if backwards,\n\n221\n00:10:55.025 --> 00:10:55.589\nwrote fi.\n\n222\n00:10:55.589 --> 00:11:00.464\nThe same thing with case, when you close\nout your case loop, you write esac,\n\n223\n00:11:00.464 --> 00:11:01.780\nwhich is just case-\n&gt;&gt; [LAUGH]\n\n224\n00:11:01.780 --> 00:11:03.190\n&gt;&gt; Spelled backwards, right?\n\n225\n00:11:03.190 --> 00:11:06.430\nSo we're flipping it, so then it knows\nthat the actual setup case is over.\n\n226\n00:11:06.430 --> 00:11:08.610\n&gt;&gt; Well,\nthat's certainly easy to remember, anyway.\n\n227\n00:11:08.610 --> 00:11:09.240\n&gt;&gt; Yeah, yeah,\n\n228\n00:11:09.240 --> 00:11:13.690\nand in this example, I didn't do anything\nI couldn't have done with if, right?\n\n229\n00:11:13.690 --> 00:11:16.640\nIf gives me two branches,\nright, so I could've said,\n\n230\n00:11:16.640 --> 00:11:20.090\nif it's Saturday, do the backup,\nelse, do this other backup.\n\n231\n00:11:20.090 --> 00:11:23.340\nBut if I wanna do each day of the week,\nwe can lay out each case here.\n\n232\n00:11:23.340 --> 00:11:25.930\nThat's how powerful this command is,\nis that you've got that option.\n\n233\n00:11:25.930 --> 00:11:29.280\nI could add another entry here that says\nthat if it is the first day of the month,\n\n234\n00:11:29.280 --> 00:11:32.910\nthen I want to do a monthly backup,\nor something crazy like that.\n\n235\n00:11:32.910 --> 00:11:36.450\nIf I wanted a key off of days of the week,\nyou could certainly do that, too.\n\n236\n00:11:36.450 --> 00:11:39.260\nCase lets you have as many\noptions as you want, so\n\n237\n00:11:39.260 --> 00:11:42.840\nit's a much more robust type of if loop.\n\n238\n00:11:42.840 --> 00:11:46.090\nAnd let's see if this actually works,\nso it's Thursday right now.\n\n239\n00:11:46.090 --> 00:11:47.010\nIf I run this,\n\n240\n00:11:47.010 --> 00:11:50.770\nit should basically sweep through here,\nsee that it doesn't match Saturday.\n\n241\n00:11:50.770 --> 00:11:55.050\nMove down to this wild card here and say,\nokay, well then it's gonna match this.\n\n242\n00:11:55.050 --> 00:11:57.830\nAnd it should run a daily backup\nif I run this file right now,\n\n243\n00:11:57.830 --> 00:11:59.480\nassuming I didn't screw it up.\n\n244\n00:11:59.480 --> 00:12:01.800\nIn fact, let me just scan over\nmy tar command real quick and\n\n245\n00:12:01.800 --> 00:12:04.590\nmake sure that's good, and yeah.\n\n246\n00:12:04.590 --> 00:12:08.890\nNow if I were doing this in real life\nland, I'd put a little more logic in\n\n247\n00:12:08.890 --> 00:12:12.055\nhere to do things like,\ndoes the backups folder even exist?\n\n248\n00:12:12.055 --> 00:12:13.850\nCuz otherwise I can't\ncreate my backup files.\n\n249\n00:12:13.850 --> 00:12:15.110\nDo I have permissions?\n\n250\n00:12:15.110 --> 00:12:17.680\nWe do checks, and\nerror reporting, and logging, and\n\n251\n00:12:17.680 --> 00:12:20.700\nall these other things that make\nscripts really, really big.\n\n252\n00:12:20.700 --> 00:12:23.260\nBut in a perfect world,\nthis script is gonna work just fine.\n\n253\n00:12:23.260 --> 00:12:27.020\nSo this is kinda like the bare minimum I\nwould need to perform what I want to do.\n\n254\n00:12:27.020 --> 00:12:29.220\nSo I'm gonna go ahead and\nsave and get out of that.\n\n255\n00:12:29.220 --> 00:12:31.960\nI'm going to make that script executable.\n\n256\n00:12:33.120 --> 00:12:36.230\nAnd just so\nyou know I'm not faking it here,\n\n257\n00:12:36.230 --> 00:12:39.540\nI'm gonna go in my backups folder and\nmake sure that it is empty.\n\n258\n00:12:39.540 --> 00:12:42.780\nAll right, so it is empty, and\nif I go into my documents folder,\n\n259\n00:12:42.780 --> 00:12:45.780\nI do have some stuff in there,\nso that's good.\n\n260\n00:12:45.780 --> 00:12:50.580\nAnd now, if I run the mybackup.sh,\nthere we go.\n\n261\n00:12:50.580 --> 00:12:53.471\nI got a message from tar, so\nI know that tar ran, right?\n\n262\n00:12:53.471 --> 00:12:55.990\nIt says removing leading\nslash from member names.\n\n263\n00:12:55.990 --> 00:12:58.660\nTar hates it when there's a slash at\nthe beginning of a file name, and so\n\n264\n00:12:58.660 --> 00:13:01.210\nit removes that, so that's fine.\n\n265\n00:13:01.210 --> 00:13:05.640\nSo it ran, but it's not telling me if it\ndid the daily, or the weekly, or whatever.\n\n266\n00:13:05.640 --> 00:13:09.250\nIf I take a look in my backups folder,\nI can see it did the daily,\n\n267\n00:13:09.250 --> 00:13:11.610\nit saw that Thursday was not Saturday.\n\n268\n00:13:11.610 --> 00:13:16.260\nNow, let's edit that script,\nand I'm gonna change it so\n\n269\n00:13:16.260 --> 00:13:22.590\nthat Thursday is going to be the day\nthat we do our weekly backup, right?\n\n270\n00:13:22.590 --> 00:13:24.420\nSo now, when it runs this,\n\n271\n00:13:24.420 --> 00:13:27.380\nit should go down the cases and\nsay, oop, today is Thursday.\n\n272\n00:13:27.380 --> 00:13:31.330\nMatch that up, and\nthen run the weekly backup instead.\n\n273\n00:13:31.330 --> 00:13:35.650\nAnd so now, if I come in here and\nrun that script again, I see that tar ran.\n\n274\n00:13:35.650 --> 00:13:40.820\nAnd if I go into backups,\nI can see that I now have a weekly backup\n\n275\n00:13:40.820 --> 00:13:45.000\nright alongside my daily, so\nit's handling that case properly.\n\n276\n00:13:45.000 --> 00:13:48.220\nJust remember that most of us\nare gonna use if constructs,\n\n277\n00:13:48.220 --> 00:13:51.120\nbecause they're pretty simple and\nthey create a fork in the road.\n\n278\n00:13:51.120 --> 00:13:55.010\nBut if you need more than one fork,\nthat's where case comes in.\n\n279\n00:13:55.010 --> 00:13:57.470\nThat's when this is gonna\nbe the construct for you.\n\n280\n00:13:57.470 --> 00:14:00.730\nAnd you can even mix and match it, I could\nhave one case that leads to an if, or\n\n281\n00:14:00.730 --> 00:14:03.680\nI could have an if that\nleads to multiple cases.\n\n282\n00:14:03.680 --> 00:14:07.210\nYou can kinda mix and match,\nbut it does get confusing.\n\n283\n00:14:07.210 --> 00:14:10.060\nIt gets easy to kinda lose\nyour place when you have that.\n\n284\n00:14:10.060 --> 00:14:12.490\nAnd you can create a loop where\none is calling another, and\n\n285\n00:14:12.490 --> 00:14:15.600\nnow you're just trapped, and your script\nlocks up, and that's not a good thing.\n\n286\n00:14:15.600 --> 00:14:18.380\nSo always be careful with that,\ndo some debugging, do some testing.\n\n287\n00:14:18.380 --> 00:14:21.650\nBut right there we got a chance\nto see how case works and\n\n288\n00:14:21.650 --> 00:14:22.880\nkind of what it can do for us.\n\n289\n00:14:22.880 --> 00:14:25.150\n&gt;&gt; Awesome, now, we've learned how to\ndo certain things at certain times.\n\n290\n00:14:26.350 --> 00:14:30.515\nWhat if we wanna do something more than\nonce, and are we leading to the loop now?\n\n291\n00:14:30.515 --> 00:14:32.066\n&gt;&gt; Yeah, absolutely, and so-\n&gt;&gt; We gonna do a loop-de-loop?\n\n292\n00:14:32.066 --> 00:14:33.820\n[LAUGH]\n&gt;&gt; So technically what we've been doing\n\n293\n00:14:33.820 --> 00:14:36.630\nwere loops, but\nnot very good loops, right?\n\n294\n00:14:36.630 --> 00:14:39.590\nWe just went through and\nthat was it, so more like a line.\n\n295\n00:14:39.590 --> 00:14:43.510\nWe performed operations in order, and we\nperformed them one time and that was it.\n\n296\n00:14:43.510 --> 00:14:47.440\nBut there are times where we wanna\nloop back and do something again, and\n\n297\n00:14:47.440 --> 00:14:48.390\nmaybe again and again.\n\n298\n00:14:48.390 --> 00:14:52.711\nThere's times where we might wanna do\nthings hundreds of thousands of times if\n\n299\n00:14:52.711 --> 00:14:53.569\nwe have a need.\n\n300\n00:14:53.569 --> 00:14:54.778\n&gt;&gt; And who doesn't want to do that,\nnow think about it.\n\n301\n00:14:54.778 --> 00:14:57.441\n[LAUGH]\n&gt;&gt; It sounds exciting, right?\n\n302\n00:14:57.441 --> 00:15:02.409\nFor example, lets say that I've got\na folder, and it's got 100 files in it.\n\n303\n00:15:02.409 --> 00:15:06.950\nAnd I wanna archive each file\nindividually, I wanna compress them.\n\n304\n00:15:06.950 --> 00:15:10.090\nSo I wanna gzip them or\nsomething like that to make them smaller.\n\n305\n00:15:10.090 --> 00:15:12.352\nBut I don't wanna put\nthem all in one archive,\n\n306\n00:15:12.352 --> 00:15:14.966\nI want each one to have their\nown individual archive.\n\n307\n00:15:14.966 --> 00:15:18.550\nThat means I would have to run 100\narchive commands, that would stink.\n\n308\n00:15:19.630 --> 00:15:23.781\nOr I could write a script that has\nthe archive command written once, and\n\n309\n00:15:23.781 --> 00:15:26.080\nI could call it 100 times.\n\n310\n00:15:26.080 --> 00:15:29.210\nI can have the script do it 100 times,\nI do it once, but\n\n311\n00:15:29.210 --> 00:15:30.980\nthe script does it 100 times, right?\n\n312\n00:15:30.980 --> 00:15:33.510\nThat's where a loop is really beneficial.\n\n313\n00:15:33.510 --> 00:15:36.006\nYou loop through the same command over,\nand over, and\n\n314\n00:15:36.006 --> 00:15:37.534\nover again to achieve your goal.\n\n315\n00:15:37.534 --> 00:15:40.243\nNow there's a few different\nways to do loops, and\n\n316\n00:15:40.243 --> 00:15:44.030\nit's really up to you which one\nis gonna work the best for you.\n\n317\n00:15:44.030 --> 00:15:48.300\nThe main type of loop that we'll\nsee is what's called a for-do loop.\n\n318\n00:15:48.300 --> 00:15:50.850\nAnd for, or\nsome people call it a for-each loop.\n\n319\n00:15:50.850 --> 00:15:55.222\nSo for each value in a certain array,\nwe're gonna do a command.\n\n320\n00:15:55.222 --> 00:15:57.869\nAnd that array might contain\none command or one item, or\n\n321\n00:15:57.869 --> 00:15:59.511\nit might have a 1,000 items.\n\n322\n00:15:59.511 --> 00:16:02.180\nIf it has one item,\nwe'll do a command one time.\n\n323\n00:16:02.180 --> 00:16:06.401\nAnd if it has 1,000 items,\nwe'll do a command 1,000 times, right,\n\n324\n00:16:06.401 --> 00:16:08.804\nfor each item in that\narray Will do a command.\n\n325\n00:16:08.804 --> 00:16:11.621\nSo let me show you\na really simple example.\n\n326\n00:16:11.621 --> 00:16:15.356\nMaybe you love the Beatles,\nas a band out of England,\n\n327\n00:16:15.356 --> 00:16:20.021\nthey like a one hit wonder,\nsome of you might have of heard of them.\n\n328\n00:16:20.021 --> 00:16:21.197\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] And-\n\n329\n00:16:21.197 --> 00:16:23.100\n&gt;&gt; They had interesting haircuts when they\n\n330\n00:16:23.100 --> 00:16:24.052\ncame over here, right?\n\n331\n00:16:24.052 --> 00:16:25.180\n&gt;&gt; [LAUGH] Crazy people.\n\n332\n00:16:25.180 --> 00:16:28.820\nSo I'm gonna create\na script called beatles.sh,\n\n333\n00:16:28.820 --> 00:16:32.720\nand we're gonna basically\nwrite something out here.\n\n334\n00:16:32.720 --> 00:16:35.910\nWe'll do /bin/bash.\n\n335\n00:16:35.910 --> 00:16:40.110\nAnd I'm gonna say, for NAME.\n\n336\n00:16:40.110 --> 00:16:47.480\nSo NAME is going to be a variable,\nso for the name variable, in.\n\n337\n00:16:47.480 --> 00:16:49.290\nAnd now I'm gonna populate that variable.\n\n338\n00:16:49.290 --> 00:16:55.900\nAnd it's gonna be populated with John,\nPaul, Ringo and George, right?\n\n339\n00:16:55.900 --> 00:16:57.610\nSo that variable is now\ngoing to be an array.\n\n340\n00:16:57.610 --> 00:17:00.670\nIt doesn't have one value in it,\nit has four things in it, right?\n\n341\n00:17:00.670 --> 00:17:01.930\nAnd I'm just using names here.\n\n342\n00:17:01.930 --> 00:17:05.130\nThe can be files, they could be folders,\nthey could be network addresses.\n\n343\n00:17:05.130 --> 00:17:07.300\nThey could be any number of\nthings that we pump in there.\n\n344\n00:17:07.300 --> 00:17:13.020\nBut I'm gonna say for NAME in,\nand then the range of items, do.\n\n345\n00:17:13.020 --> 00:17:16.694\nAnd I'm gonna tell it to do something, and\n\n346\n00:17:16.694 --> 00:17:21.913\nI'm gonna tell it to echo that\n$NAME is my favorite Beatle.\n\n347\n00:17:21.913 --> 00:17:23.846\nAll right, so\nthat's what it's gonna echo out.\n\n348\n00:17:23.846 --> 00:17:29.910\nAnd then I'll say done,\nto say that I'm done with the loop, okay?\n\n349\n00:17:29.910 --> 00:17:31.440\nNow, it's not just run gonna it once.\n\n350\n00:17:31.440 --> 00:17:35.300\nIf it ran it once, it would only\necho one of those names out, right?\n\n351\n00:17:35.300 --> 00:17:40.050\nBut because I did a for\nloop, it's going to run\n\n352\n00:17:40.050 --> 00:17:44.940\nthrough each one of those, it's going to\nprocess each one, and spit those out.\n\n353\n00:17:44.940 --> 00:17:48.020\nAnd, we'll see it run\neffectively four times,\n\n354\n00:17:48.020 --> 00:17:49.440\nbecause of what I'm feeding into it.\n\n355\n00:17:49.440 --> 00:17:53.230\nSo let me get out, and\nwe'll make that executable.\n\n356\n00:17:55.810 --> 00:17:58.810\nAnd, then we'll give it a run,\nand see what happens.\n\n357\n00:17:58.810 --> 00:18:03.330\nAnd when I run it, right there we see it\nactually ran the echo command four times.\n\n358\n00:18:03.330 --> 00:18:08.350\nSo, if I had to perform an operation 1,000\ntimes, I don't wanna run 1,000 commands.\n\n359\n00:18:08.350 --> 00:18:09.310\nHere, I just run one command.\n\n360\n00:18:09.310 --> 00:18:11.300\nI ran the Beatles.sh script.\n\n361\n00:18:11.300 --> 00:18:14.530\nI executed that script and\nit did them for me.\n\n362\n00:18:14.530 --> 00:18:18.170\nAll right, now in this case,\nit was still kind of a pain\n\n363\n00:18:18.170 --> 00:18:21.200\nbecause I had to type in each\nof the Beatles' names, right?\n\n364\n00:18:21.200 --> 00:18:23.192\nWhich there's only four of them,\nso it wasn't so bad.\n\n365\n00:18:23.192 --> 00:18:23.872\nI typed them in here.\n\n366\n00:18:23.872 --> 00:18:27.136\nBut if I wanted to perform\nan operation on 1,000 files,\n\n367\n00:18:27.136 --> 00:18:30.080\nI don't wanna type 1,000\nfile names in here do I?\n\n368\n00:18:30.080 --> 00:18:31.580\nThat would take some time.\n\n369\n00:18:31.580 --> 00:18:35.980\nIt would probably take just as much time\nas if I just ran 1,000 commands, right?\n\n370\n00:18:35.980 --> 00:18:40.450\nSo instead, we can receive these values\nthat are going into the variable\n\n371\n00:18:40.450 --> 00:18:42.820\nfrom any other source really.\n\n372\n00:18:42.820 --> 00:18:48.150\nSo, for example, the ls command,\nthe ls command, right.\n\n373\n00:18:48.150 --> 00:18:51.670\nWhen we run ls,\nit's pulling up a directory listing and\n\n374\n00:18:51.670 --> 00:18:53.930\nit's showing me the files\nin the directory, right?\n\n375\n00:18:53.930 --> 00:18:57.210\nIt's actually running the ls\ncommand each time for each file,\n\n376\n00:18:57.210 --> 00:19:02.050\nespecially if you do ls -l, because\nit's gotta get the permissions, and\n\n377\n00:19:02.050 --> 00:19:04.370\nthe owner, and the group,\nand the modified date.\n\n378\n00:19:04.370 --> 00:19:07.220\nIt's gotta get that for each file, so it's\nactually running that command over and\n\n379\n00:19:07.220 --> 00:19:09.140\nover and over again to output\nthis data on the screen.\n\n380\n00:19:09.140 --> 00:19:13.685\nIt is doing a foreach loop,\nwe just don't see it, right?\n\n381\n00:19:13.685 --> 00:19:15.100\nWell, we can write a script\nthat does the same thing.\n\n382\n00:19:15.100 --> 00:19:20.080\nIf I want to form some operation on\nevery file that's here in this folder or\n\n383\n00:19:20.080 --> 00:19:21.570\neven in my documents folder.\n\n384\n00:19:21.570 --> 00:19:22.890\nLet's do that one instead.\n\n385\n00:19:22.890 --> 00:19:23.400\nThere.\n\n386\n00:19:23.400 --> 00:19:25.130\nSo I got a couple of text files in here.\n\n387\n00:19:25.130 --> 00:19:29.040\nMaybe I want to archive\nall of these files.\n\n388\n00:19:29.040 --> 00:19:30.650\nI gave that example earlier.\n\n389\n00:19:30.650 --> 00:19:34.530\nI want to create a gzip for\neach one of these files.\n\n390\n00:19:34.530 --> 00:19:38.430\nWell, I could create a script called,\nactually, here,\n\n391\n00:19:38.430 --> 00:19:44.960\nlet's put it in my home directory,\ncalled archive.sh.\n\n392\n00:19:44.960 --> 00:19:50.460\nAnd in here, I'm going to say that\nI'm using bash as my interpreter and\n\n393\n00:19:50.460 --> 00:19:54.820\nI'm going to say for FILE,\nfile is the variable that I'm creating.\n\n394\n00:19:54.820 --> 00:19:57.810\nI did a name before because they\nwere Beatles names, I'm using file.\n\n395\n00:19:57.810 --> 00:20:01.300\nYou can call it Bob, call it whatever\nyou want, it doesn't matter.\n\n396\n00:20:01.300 --> 00:20:02.616\nSo I'll call it FILE.\n\n397\n00:20:02.616 --> 00:20:10.396\nIn /home/dpezet/Documents/ star,\nall right?\n\n398\n00:20:10.396 --> 00:20:14.880\nSo I'm looking for\nfilenames that are in that directory.\n\n399\n00:20:14.880 --> 00:20:20.737\nAnd then I'm gonna say\ndo tar -czf $FILE.tgz,\n\n400\n00:20:20.737 --> 00:20:25.720\nis what I'm gonna name the archive.\n\n401\n00:20:25.720 --> 00:20:29.870\nAnd then its input is going\nto be that file name.\n\n402\n00:20:29.870 --> 00:20:32.310\nSo now it's gonna take every\nfile in that folder and\n\n403\n00:20:32.310 --> 00:20:38.110\ncreate a FILE.tgz archive equivalent\nof it, okay, and it'll build that up.\n\n404\n00:20:38.110 --> 00:20:44.340\nAnd I probably want to stick that\nsomewhere else like home/dpezet/backups.\n\n405\n00:20:44.340 --> 00:20:47.740\nWhen you start sticking files in the same\nfolder that you're running the command on,\n\n406\n00:20:47.740 --> 00:20:50.430\nyou run the risk of running the command\non stuff that it generated.\n\n407\n00:20:50.430 --> 00:20:53.420\nSo I might compress a file that's\nalready been compressed or whatever, so\n\n408\n00:20:53.420 --> 00:20:55.050\nI'm going to put those\nfiles somewhere else.\n\n409\n00:20:55.050 --> 00:20:57.170\nAnd I'll run it this way, okay?\n\n410\n00:20:57.170 --> 00:21:02.940\nNow when I do that,\nit's gonna run that tar command once for\n\n411\n00:21:02.940 --> 00:21:04.588\neach file in the directory.\n\n412\n00:21:04.588 --> 00:21:07.460\nIf there's 5 files, it'll run it 5 times,\nif there's 500 files,\n\n413\n00:21:07.460 --> 00:21:09.050\nit'll run it 500 times.\n\n414\n00:21:09.050 --> 00:21:10.690\nAnd that's the really nice part here.\n\n415\n00:21:10.690 --> 00:21:13.230\nI didn't have to type in every file name.\n\n416\n00:21:13.230 --> 00:21:15.300\nIt is going to get that for me.\n\n417\n00:21:15.300 --> 00:21:18.590\nIt's looking for those files to pull it\nfrom there and then it's gonna run it.\n\n418\n00:21:20.170 --> 00:21:23.430\nSo that's gonna save me\na lot of effort there.\n\n419\n00:21:23.430 --> 00:21:28.420\nSo if I save that and make that executable\n\n420\n00:21:30.648 --> 00:21:34.430\nThen I can get into my documents folder.\n\n421\n00:21:34.430 --> 00:21:38.560\nAnd I'm gonna call that archive.sh,\nand I'm gonna run it.\n\n422\n00:21:38.560 --> 00:21:40.198\nNow it's running over and\nover and over again.\n\n423\n00:21:40.198 --> 00:21:44.488\nAnd I got an error, which means I got\nthe error over and over and over again.\n\n424\n00:21:44.488 --> 00:21:47.125\n&gt;&gt; Boy.\n&gt;&gt; So its telling me that it tried to\n\n425\n00:21:47.125 --> 00:21:52.256\nperform tar on\n/home/dpezet/backups/home/dpezet/docume-\n\n426\n00:21:52.256 --> 00:21:53.760\nnts/ blah, blah.\n\n427\n00:21:53.760 --> 00:21:58.455\nSo it extrapolated the path\na little wrong when I tried to move\n\n428\n00:21:58.455 --> 00:22:00.396\ninto my backups folder.\n\n429\n00:22:00.396 --> 00:22:04.076\nSo it got upset about that and\nunfortunately it got upset over and\n\n430\n00:22:04.076 --> 00:22:05.312\nover and over again.\n\n431\n00:22:05.312 --> 00:22:08.640\nSo let me modify that script a little bit.\n\n432\n00:22:08.640 --> 00:22:09.360\nAnd I'll go ahead and\n\n433\n00:22:09.360 --> 00:22:13.370\ndrop the archives right in the same\nfolder instead of trying to extract that.\n\n434\n00:22:13.370 --> 00:22:20.060\nWhat I would normally do in this scenario\nis, you can actually modify variables.\n\n435\n00:22:20.060 --> 00:22:22.680\nThere's several modifications\nyou can apply to a variable that\n\n436\n00:22:22.680 --> 00:22:24.730\nchange the way\nthe directory's represented.\n\n437\n00:22:24.730 --> 00:22:27.400\nAnd I could have trimmed off\nthat extra directory part and\n\n438\n00:22:27.400 --> 00:22:28.900\nthat would have solved the problem.\n\n439\n00:22:28.900 --> 00:22:30.400\nBut I want to keep this\none kind of simple, so\n\n440\n00:22:30.400 --> 00:22:34.160\nI'll just remove that\ndirectory to save time.\n\n441\n00:22:34.160 --> 00:22:37.970\nAnd now, when I execute that,\nit should look a little bit better.\n\n442\n00:22:37.970 --> 00:22:39.500\nI see that tar is running,\n\n443\n00:22:39.500 --> 00:22:42.950\nsee how it's removing the slash\nfrom member names like we expect?\n\n444\n00:22:42.950 --> 00:22:46.310\nIt did have a bit of a problem when\nit hit that pod file for some reason.\n\n445\n00:22:46.310 --> 00:22:47.894\nA pod is a project file.\n\n446\n00:22:47.894 --> 00:22:49.806\nSo it didn't like that file name for\nsome reason, but\n\n447\n00:22:49.806 --> 00:22:51.134\nthe rest of them it looks like it ran.\n\n448\n00:22:51.134 --> 00:22:53.939\nAnd if I take a look in here, sure enough,\n\n449\n00:22:53.939 --> 00:22:58.280\nwith the, I see the problem,\nit backed up each of my files.\n\n450\n00:22:58.280 --> 00:23:03.190\nSo awsdemo.pem, that's a private key\nthat I have is just stored there.\n\n451\n00:23:03.190 --> 00:23:05.440\nI can see it created the archive for\nit right there.\n\n452\n00:23:05.440 --> 00:23:09.580\nSame name, .tgz,\nFile1.txt did the same thing and so on.\n\n453\n00:23:09.580 --> 00:23:13.380\nThe one that failed was\nthe project file that I've got.\n\n454\n00:23:13.380 --> 00:23:14.740\nAnd the reason it failed?\n\n455\n00:23:14.740 --> 00:23:15.790\nIt's got a space in the name.\n\n456\n00:23:15.790 --> 00:23:18.860\nIt has a space in the name and I didn't\nwrite my script to be able to handle it.\n\n457\n00:23:18.860 --> 00:23:21.720\nSo I need to put quote marks around\nthe file name so that it would know that,\n\n458\n00:23:21.720 --> 00:23:23.450\nyeah, that's just a single file name.\n\n459\n00:23:23.450 --> 00:23:27.480\nTar was written a long time ago, back in\na time when you didn't have spaces and\n\n460\n00:23:27.480 --> 00:23:32.462\nfile names, so it just needs to\nhave those kind of cordoned off.\n\n461\n00:23:32.462 --> 00:23:36.530\nSo it's another example, though, of how\nwhen we have a script we need to test out,\n\n462\n00:23:36.530 --> 00:23:38.030\nwe need to try because\nthere will be little bugs,\n\n463\n00:23:38.030 --> 00:23:41.320\nlittle quirks like that,\nthat can cause some basic problems.\n\n464\n00:23:41.320 --> 00:23:45.860\nBut at the end of the day if I look at\nthat script again, this is all I wrote,\n\n465\n00:23:45.860 --> 00:23:50.060\nand in turn it ran this\ntar command one time for\n\n466\n00:23:50.060 --> 00:23:52.820\neach file in that directory and\ncreated all those archives.\n\n467\n00:23:52.820 --> 00:23:56.640\nAnd that would've taken me a lot\nof work to do one at a time, but\n\n468\n00:23:56.640 --> 00:23:59.750\nhere it could be thousands,\nhundreds of thousands of times.\n\n469\n00:23:59.750 --> 00:24:02.371\nAnd I would just run the script one time,\nand it does the job.\n\n470\n00:24:02.371 --> 00:24:07.728\nThat's the real power of a loop like this,\nlike a foreach loop.\n\n471\n00:24:07.728 --> 00:24:11.011\nBravo, Mr. Pezet,\nyou know that's a symbol loop?\n\n472\n00:24:11.011 --> 00:24:12.024\n&gt;&gt; Yes, yes.\n\n473\n00:24:12.024 --> 00:24:13.710\n&gt;&gt; But there are others that we can do?\n\n474\n00:24:13.710 --> 00:24:18.550\n&gt;&gt; Absolutely, yeah, now this loop right\nhere is, get in and get out, right?\n\n475\n00:24:18.550 --> 00:24:20.130\nI give it 1,000 files?\n\n476\n00:24:20.130 --> 00:24:22.730\nIt performs 1,000 tasks and\nthen it's done, right?\n\n477\n00:24:22.730 --> 00:24:26.350\nAnd that honestly is what I would\nnormally use, it's kinda what we want.\n\n478\n00:24:26.350 --> 00:24:29.992\nBut there are times when we have other\nconditions where I wanna loop to start.\n\n479\n00:24:29.992 --> 00:24:35.010\nI just want it to keep running\nuntil something happens, right?\n\n480\n00:24:35.010 --> 00:24:38.170\nMaybe I wanna run a command and\nhave it run for an hour.\n\n481\n00:24:38.170 --> 00:24:42.460\nSo I just need it to run monitoring\ntime until a certain time or\n\n482\n00:24:42.460 --> 00:24:46.160\nI want a command to run\nuntil an application closes.\n\n483\n00:24:46.160 --> 00:24:47.870\nAnd so I'm monitoring for\nthat application to close.\n\n484\n00:24:47.870 --> 00:24:49.780\nThere's some action, some activity,\n\n485\n00:24:49.780 --> 00:24:54.510\nsome condition that tells\nthe script when to stop, right?\n\n486\n00:24:54.510 --> 00:24:56.846\nThese, all the scripts\nthat I've written so far,\n\n487\n00:24:56.846 --> 00:24:59.357\nthey stop when they're done\nrunning their commands.\n\n488\n00:24:59.357 --> 00:25:01.526\nBut we can tell them to loop over and\nover and\n\n489\n00:25:01.526 --> 00:25:04.900\nover again as long as we want\nuntil a scenario hits, right?\n\n490\n00:25:04.900 --> 00:25:09.742\nSo an example might be, when I run an\napplication almost any application creates\n\n491\n00:25:09.742 --> 00:25:12.080\na PID file, a little lock file.\n\n492\n00:25:12.080 --> 00:25:13.940\nAnd that's how you can\nknow that it's running.\n\n493\n00:25:13.940 --> 00:25:16.060\nSo I might say I have this\nscript that I want to run.\n\n494\n00:25:16.060 --> 00:25:18.300\nIt's doing something\nthat's heavy disk I/O.\n\n495\n00:25:18.300 --> 00:25:23.700\nAnd so if it sees this lock file appear,\nwe need to stop the script and pause, and\n\n496\n00:25:23.700 --> 00:25:26.840\nwait for that locked file to disappear,\nand then we can start again, right?\n\n497\n00:25:26.840 --> 00:25:30.690\nYou can put that kind of logic in your\nscript, where it understands that.\n\n498\n00:25:30.690 --> 00:25:33.030\nBut more commonly we do it with a counter.\n\n499\n00:25:33.030 --> 00:25:36.150\nI say something like, well,\nlike the ping command, right?\n\n500\n00:25:36.150 --> 00:25:39.230\nIf wanna ping somebody,\nlet me get out of this.\n\n501\n00:25:39.230 --> 00:25:44.480\nIf I do a ping to a host that's out\nin the network like 4.2.2.1, right?\n\n502\n00:25:44.480 --> 00:25:45.070\nIt's gonna run it.\n\n503\n00:25:45.070 --> 00:25:48.655\nIt's gonna keep running this\ncommand forever until I stop it.\n\n504\n00:25:48.655 --> 00:25:50.685\nAnd I stop it by hitting Ctrl+C, right?\n\n505\n00:25:50.685 --> 00:25:53.425\nSo it's looping and\npinging over and over and\n\n506\n00:25:53.425 --> 00:25:56.725\nover again until I provide\nit some kind of input.\n\n507\n00:25:56.725 --> 00:25:58.279\nOr I could tell it a limit.\n\n508\n00:25:58.279 --> 00:25:58.962\nWhat is it,- n?\n\n509\n00:25:58.962 --> 00:26:02.395\nWhoops, that's not gonna help it.\n\n510\n00:26:03.810 --> 00:26:06.954\nNow it's got a command line\nargument I can't remember off hand,\n\n511\n00:26:06.954 --> 00:26:09.077\nwhere you can tell it\nhow many pings to send.\n\n512\n00:26:09.077 --> 00:26:12.330\nSo we could be inputting\nhow many we want it to run.\n\n513\n00:26:12.330 --> 00:26:15.500\nAnd that would be another one, where it's\ngoing to run until it runs a certain\n\n514\n00:26:15.500 --> 00:26:17.960\namount of time, so\nwe can create conditions like that.\n\n515\n00:26:17.960 --> 00:26:23.040\nIn the Linux world, we normally achieve\nthat with what are called until loops.\n\n516\n00:26:23.040 --> 00:26:27.310\nAnd until loops, or while loops,\nthey're actually very, very similar.\n\n517\n00:26:27.310 --> 00:26:28.770\nSo while and until.\n\n518\n00:26:28.770 --> 00:26:29.858\nLet me explain the difference there.\n\n519\n00:26:29.858 --> 00:26:35.930\nA while loop will run while\na certain test is true.\n\n520\n00:26:35.930 --> 00:26:39.730\nAnd the moment a test becomes false,\nthen it'll stop.\n\n521\n00:26:39.730 --> 00:26:44.230\nAn until loop will run as\nlong as a test is false.\n\n522\n00:26:44.230 --> 00:26:46.760\nAnd as soon as the test becomes true,\nit stops.\n\n523\n00:26:46.760 --> 00:26:49.700\nSo while and\nuntil loops actually work the same.\n\n524\n00:26:49.700 --> 00:26:52.500\nIt's just whether or not they're testing\nfor something to be true or false.\n\n525\n00:26:52.500 --> 00:26:54.887\nSo depending on the test\nthat you're going to write,\n\n526\n00:26:54.887 --> 00:26:57.700\nthat's gonna determine whether\nyou use a while or until.\n\n527\n00:26:57.700 --> 00:26:59.070\nThe syntax is identical.\n\n528\n00:26:59.070 --> 00:27:00.500\nYou write them the same way.\n\n529\n00:27:00.500 --> 00:27:02.180\nIt's just the test that\nreally makes the difference.\n\n530\n00:27:02.180 --> 00:27:04.370\nAnd oftentimes you have find\nwhere you can use either one and\n\n531\n00:27:04.370 --> 00:27:05.610\nthey both work the same.\n\n532\n00:27:05.610 --> 00:27:12.501\nSo let me show a couple of simple examples\nhere just to kind of show you guys.\n\n533\n00:27:12.501 --> 00:27:17.979\nLet me create a loop.sh file.\n\n534\n00:27:17.979 --> 00:27:22.670\nAnd we'll create our last\nscript of the show here.\n\n535\n00:27:22.670 --> 00:27:24.080\nSo /bin/bash.\n\n536\n00:27:24.080 --> 00:27:29.813\nAnd I want a script that's gonna run\na certain command ten times, right?\n\n537\n00:27:29.813 --> 00:27:32.380\nSo I wanna run something ten times.\n\n538\n00:27:32.380 --> 00:27:36.394\nSo I'll create a variable that's gonna\nstore how many times I've run it.\n\n539\n00:27:36.394 --> 00:27:39.130\nI'm gonna start it at zero, right?\n\n540\n00:27:39.130 --> 00:27:42.860\nWhen I first run the script,\nthe script is run zero times, okay?\n\n541\n00:27:42.860 --> 00:27:46.640\nAnd then I come in and\nI create a while loop.\n\n542\n00:27:46.640 --> 00:27:51.970\nAnd I'm gonna say, while $N is less than.\n\n543\n00:27:51.970 --> 00:27:53.088\nSo I'm doing -lt.\n\n544\n00:27:53.088 --> 00:27:55.630\nI could also do a less than and\nequal sign would do the same thing.\n\n545\n00:27:55.630 --> 00:27:57.783\nBut I'll do -lt 10.\n\n546\n00:27:57.783 --> 00:28:02.167\nSo while the N variable is less than 10,\n\n547\n00:28:02.167 --> 00:28:05.560\nI want to do something, right?\n\n548\n00:28:05.560 --> 00:28:11.934\nSo the semicolon says it's the end of the\ntest, and then do, I want to do something.\n\n549\n00:28:11.934 --> 00:28:13.353\nWhat do I wanna do?\n\n550\n00:28:13.353 --> 00:28:16.060\nWell, I'll just echo the number\nthat's stored in the variable.\n\n551\n00:28:16.060 --> 00:28:17.760\nSo I'll be able to see\nhow many times I run it.\n\n552\n00:28:17.760 --> 00:28:19.870\nSo I'm just going to echo\nsomething on the screen.\n\n553\n00:28:19.870 --> 00:28:24.932\nAnd then once that's done,\nI'll say let N=$N+1.\n\n554\n00:28:24.932 --> 00:28:30.313\nIf you remember from\nthe introduction to scripting shell,\n\n555\n00:28:30.313 --> 00:28:36.120\nthe let command lets us modify\na variable and do arithmetic.\n\n556\n00:28:36.120 --> 00:28:36.910\nAnd so I'm doing math.\n\n557\n00:28:36.910 --> 00:28:38.937\nI'm saying, whatever's in N right now,\njust add 1 to it.\n\n558\n00:28:38.937 --> 00:28:43.640\nSo if it's 0, add a 1 to it,\nbecause we just ran this one time.\n\n559\n00:28:43.640 --> 00:28:44.632\nAnd the next time a loop runs, it'll be 1.\n\n560\n00:28:44.632 --> 00:28:49.331\nNow, add another 1, so now it's 2 times\nand then 3, and so here's my counter,\n\n561\n00:28:49.331 --> 00:28:51.700\nso I can keep track of how far it's going.\n\n562\n00:28:51.700 --> 00:28:56.175\nNow, N is gonna be less than\n10 the first 10 times it runs,\n\n563\n00:28:56.175 --> 00:28:59.770\nbecause it goes 0 all the way through 9.\n\n564\n00:28:59.770 --> 00:29:05.000\nAnd then on the tenth time $N\nis no longer less than 10.\n\n565\n00:29:05.000 --> 00:29:09.610\nNow it's equal to 10 and it will skip\nthis, and it will move to the end.\n\n566\n00:29:09.610 --> 00:29:13.260\nAll right,\nthat's testing until this thing is false.\n\n567\n00:29:13.260 --> 00:29:15.833\nIf I said until $N is less than 10,\n\n568\n00:29:15.833 --> 00:29:19.499\nnow I would be testing\nthe other way around, right?\n\n569\n00:29:19.499 --> 00:29:23.270\nSo while and until are really just\nkinda opposites to each other.\n\n570\n00:29:23.270 --> 00:29:26.355\nSo in this case, though, I'm gonna leave\nit this way and I'm gonna say done, and\n\n571\n00:29:26.355 --> 00:29:27.900\nthat's what it's going to run.\n\n572\n00:29:27.900 --> 00:29:30.670\nIt should run 10 times and then stop.\n\n573\n00:29:30.670 --> 00:29:32.469\nSo let me get out.\n\n574\n00:29:32.469 --> 00:29:36.555\nI'll make that executable,\nand then we'll run it.\n\n575\n00:29:36.555 --> 00:29:40.270\nAnd it should run 10 times,\nand there it is.\n\n576\n00:29:40.270 --> 00:29:45.121\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, and\nthen it stopped as soon as it got to 10,\n\n577\n00:29:45.121 --> 00:29:49.405\nwhich technically would have been the 11th\nrun cuz we started numbering at 0,\n\n578\n00:29:49.405 --> 00:29:50.361\nthen it stopped.\n\n579\n00:29:50.361 --> 00:29:52.870\nAll right, so the loop worked perfectly.\n\n580\n00:29:52.870 --> 00:29:58.050\nIt just performed that command 10\ntimes until that value showed as true.\n\n581\n00:29:58.050 --> 00:30:01.640\nAnd if I wanted to modify\nthat to be until instead,\n\n582\n00:30:01.640 --> 00:30:06.670\nlet me show you that same\nkind of example here,\n\n583\n00:30:06.670 --> 00:30:11.160\nis if I said N=0 and\nstarted it like that and\n\n584\n00:30:11.160 --> 00:30:19.520\nthen said until $N is equal to 10,\nall right?\n\n585\n00:30:19.520 --> 00:30:24.100\nSo up here I was saying that as long\nas $N is less than 10, keep doing work.\n\n586\n00:30:24.100 --> 00:30:29.410\nBut here we're just gonna\nsay until $N's equal to 10.\n\n587\n00:30:29.410 --> 00:30:33.120\nSo same kind of check just\nwritten a slightly different way.\n\n588\n00:30:33.120 --> 00:30:34.750\nAnd depending on what you're testing,\n\n589\n00:30:34.750 --> 00:30:39.040\nyou may find that one way\nworks better than another.\n\n590\n00:30:39.040 --> 00:30:43.200\nBut after that,\nit's really identical to what we just did.\n\n591\n00:30:43.200 --> 00:30:46.080\nEverything else performs the same.\n\n592\n00:30:46.080 --> 00:30:49.990\nWe increment the counter the same way,\nand so\n\n593\n00:30:49.990 --> 00:30:52.650\nI'll bump that up and\nthen we'll say, done.\n\n594\n00:30:52.650 --> 00:30:55.810\nAnd that's basically gonna be doing the\nexact same thing that we just saw before.\n\n595\n00:30:55.810 --> 00:31:01.013\nIn fact, let me get rid of these lines,\nso that's gonna be 3 through 7.\n\n596\n00:31:01.013 --> 00:31:04.950\nWe'll delete those out of there,\nwhoops, left a line behind, there.\n\n597\n00:31:04.950 --> 00:31:08.540\nAnd so now I'm running that same thing,\njust a different way.\n\n598\n00:31:08.540 --> 00:31:12.600\nAnd so when I run that loop,\nthere I get 0 through 9.\n\n599\n00:31:12.600 --> 00:31:15.460\nSo while and until are interchangeable.\n\n600\n00:31:15.460 --> 00:31:19.120\nThe only thing that changes is\nthe test that you run, okay?\n\n601\n00:31:19.120 --> 00:31:22.570\nOne is testing to see if a value is\ntrue and then performing a command, and\n\n602\n00:31:22.570 --> 00:31:23.880\nthen stopping when it becomes false.\n\n603\n00:31:23.880 --> 00:31:25.030\nThe other one is the other way around.\n\n604\n00:31:25.030 --> 00:31:27.110\nIt's testing as long as\nsomething is false, and\n\n605\n00:31:27.110 --> 00:31:29.240\nas soon as it becomes true, it stops.\n\n606\n00:31:29.240 --> 00:31:34.890\nAnd I mentioned all the tests that\nare available in the first episode.\n\n607\n00:31:34.890 --> 00:31:36.530\nSo any of those tests can be used.\n\n608\n00:31:36.530 --> 00:31:40.710\nAnd you'll find sometimes while works\nbest and other times until works best.\n\n609\n00:31:40.710 --> 00:31:44.190\nYou just have to choose the right one for\nthe scenario that you're working on.\n\n610\n00:31:44.190 --> 00:31:46.040\n&gt;&gt; Once again, fantastic information.\n\n611\n00:31:46.040 --> 00:31:50.380\nAnd I was just thinking how fortunate we\nall are that the entire becoming a Linux\n\n612\n00:31:50.380 --> 00:31:52.900\npower user is available on tape.\n\n613\n00:31:52.900 --> 00:31:53.870\nIts been videoed.\n\n614\n00:31:53.870 --> 00:31:55.875\nI mean, you can watch the videos\nas much as you'd like.\n\n615\n00:31:55.875 --> 00:31:57.280\n&gt;&gt; [LAUGH] Yeah.\n&gt;&gt; Isn't that wonderful?\n\n616\n00:31:57.280 --> 00:32:00.550\n&gt;&gt; Yeah, some of these things you'll\nfind that you can't just see it once and\n\n617\n00:32:00.550 --> 00:32:01.120\nuse it.\n\n618\n00:32:01.120 --> 00:32:04.750\nIt takes a bit of practice and\nmessing with it to learn and memorize.\n\n619\n00:32:04.750 --> 00:32:07.880\nSo you may need to watch these\nmore than once to get it.\n\n620\n00:32:07.880 --> 00:32:10.690\nAnd there are tons of great examples\nout there on the Internet, too.\n\n621\n00:32:10.690 --> 00:32:13.740\nBe sure to check out sites like Stack\nOverflow where they can give you tons of\n\n622\n00:32:13.740 --> 00:32:16.860\ngreat examples and hear other people\nasking questions like how can I do this?\n\n623\n00:32:16.860 --> 00:32:20.820\nAnd you'll see there's multiple answers\nthat come back because there are several\n\n624\n00:32:20.820 --> 00:32:21.960\ndifferent ways to do things.\n\n625\n00:32:21.960 --> 00:32:23.600\nThat's the power of scripting.\n\n626\n00:32:23.600 --> 00:32:26.020\n&gt;&gt; So once again, thank you for watching.\n\n627\n00:32:26.020 --> 00:32:29.600\nBecoming a Linux power user,\nprogramming constructs was episode two.\n\n628\n00:32:29.600 --> 00:32:31.508\nThere is episode one, don't forget.\n\n629\n00:32:31.508 --> 00:32:34.520\nAnd thank you for watching ITProTV.\n\n630\n00:32:34.520 --> 00:32:38.370\nRemember, a good IT pro is always\nlearning, and you're awesome.\n\n631\n00:32:38.370 --> 00:32:39.560\nI'm Zach Memos.\n\n632\n00:32:39.560 --> 00:32:40.280\n&gt;&gt; I'm Don Pezet.\n\n633\n00:32:40.280 --> 00:32:41.350\n&gt;&gt; And we will see you very soon.\n\n634\n00:32:41.350 --> 00:32:48.822\n[MUSIC]\n\n635\n00:32:48.822 --> 00:32:51.276\nThank you for watching ITProTV.\n\n",
          "vimeoId": "222836674"
        }
      ],
      "title": "Writing Simple Shell Scripts"
    }
  ],
  "url": "becominglinux-power-user",
  "vLab": false
}
