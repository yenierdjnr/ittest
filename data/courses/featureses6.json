{
  "description": "JavaScript is going through some growing pains. In this series, we are going to take a look at some of the recent advances in JavaScript. These changes are endearingly known as ECMAScript 6 (ES6) for short. These new features bring cleaner syntax as well as additional functionality to the JavaScript language. If you want to know all about fat arrow functions, JavaScript classes, enhancements to JavaScript objects, string enhancements, the coming of iterators and generators, promises and proxies then join us to power up your JavaScript repertoire!",
  "descriptionMD": "JavaScript is going through some growing pains. In this series, we are going to take a look at some of the recent advances in JavaScript. These changes are endearingly known as ECMAScript 6 (ES6) for short. These new features bring cleaner syntax as well as additional functionality to the JavaScript language. If you want to know all about fat arrow functions, JavaScript classes, enhancements to JavaScript objects, string enhancements, the coming of iterators and generators, promises and proxies then join us to power up your JavaScript repertoire!",
  "length": "29122",
  "name": "New Features in ES6",
  "practiceExam": false,
  "subtitle": "What's new in the ECMAScript 6 language",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin give a general overview of what to expect in the upcoming ES6 series. They cover topics like who is the intended audience, what the scope of the series will cover, and what are some specific topics that will be addressed.",
          "length": "143",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-0-0-overview-021517-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-0-0-overview-021517-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-0-0-overview-021517-1-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:04.991\n[SOUND] In this segment,\nwe're gonna take a brief look at what you\n\n2\n00:00:04.991 --> 00:00:08.141\ncan expect in our upcoming ES6 series.\n\n3\n00:00:08.141 --> 00:00:11.604\nJustin, can you give us a brief overview\nof the topics that we're gonna cover?\n\n4\n00:00:11.604 --> 00:00:13.150\n&gt;&gt; So yeah, Daniel.\n\n5\n00:00:13.150 --> 00:00:16.790\nAnd ES6 which is actually\njust JavaScript newer, right?\n\n6\n00:00:16.790 --> 00:00:19.060\nJavaScript new is how I\nlike to think about it.\n\n7\n00:00:19.060 --> 00:00:21.390\nWe're gonna cover some new syntax,\nsuch as classes.\n\n8\n00:00:21.390 --> 00:00:22.280\nWhat are classes?\n\n9\n00:00:22.280 --> 00:00:24.315\nIf you know about classes\nfrom other languages,\n\n10\n00:00:24.315 --> 00:00:27.520\nwell they're finally coming\nto the JavaScript landscape.\n\n11\n00:00:27.520 --> 00:00:31.850\nAs well as additional syntax for objects\nthat make things just a little bit easier,\n\n12\n00:00:31.850 --> 00:00:33.356\na little nicer to read and write.\n\n13\n00:00:33.356 --> 00:00:37.241\nIn addition to, there's been some\nchanges to the fundamental data types,\n\n14\n00:00:37.241 --> 00:00:38.585\nlike strings and arrays.\n\n15\n00:00:38.585 --> 00:00:41.090\nStrings are definitely growing up.\n\n16\n00:00:41.090 --> 00:00:43.890\nI don't have to add all these plus signs.\n\n17\n00:00:43.890 --> 00:00:47.330\nAnd arrays are finally offering us\nsome ways to construct them from\n\n18\n00:00:47.330 --> 00:00:51.110\nother iterables, that are just\nreally nice to play around with.\n\n19\n00:00:51.110 --> 00:00:55.984\nIn addition to, there are a few new data\ntypes, such as sets, weak sets, maps,\n\n20\n00:00:55.984 --> 00:00:58.075\nweak maps, and the proxy object.\n\n21\n00:00:58.075 --> 00:01:02.870\nAnd those definitely come into play, and\nend up having some incredible power.\n\n22\n00:01:02.870 --> 00:01:06.680\nBut those are definitely just\na glimpse into what we will cover.\n\n23\n00:01:06.680 --> 00:01:10.180\n&gt;&gt; Awesome stuff, so\nyou're throwing around a lot of big words,\n\n24\n00:01:10.180 --> 00:01:12.880\nare definitely programming type language.\n\n25\n00:01:12.880 --> 00:01:15.620\nWho is the intended audience for\nthis series?\n\n26\n00:01:15.620 --> 00:01:19.010\n&gt;&gt; So Daniel, the intended audience\nis someone who has a familiarity with\n\n27\n00:01:19.010 --> 00:01:22.630\nJavaScript, and has started dabbling\naround on the ES6 landscape.\n\n28\n00:01:22.630 --> 00:01:26.700\nSo that's ECMAScript 6, which is just\nthe newer version of JavaScript.\n\n29\n00:01:26.700 --> 00:01:29.870\nJavaScript is an implementation\nof this standard.\n\n30\n00:01:29.870 --> 00:01:34.210\nSo if you wanna know what new features\nare abound in the JavaScript landscape,\n\n31\n00:01:34.210 --> 00:01:36.100\nwhat's coming on board in browsers,\n\n32\n00:01:36.100 --> 00:01:39.220\nand possibly even some future\nthings that are available.\n\n33\n00:01:39.220 --> 00:01:43.620\nThen definitely tune in, but you have to\nhave some previous JavaScript experience,\n\n34\n00:01:43.620 --> 00:01:45.700\nor otherwise you may be a little lost.\n\n35\n00:01:45.700 --> 00:01:49.753\n&gt;&gt; Awesome, well a lot of our series are\ngeared toward a certification, or an exam,\n\n36\n00:01:49.753 --> 00:01:52.954\nor sort of trying to gain some\nsort of credibility in that field.\n\n37\n00:01:52.954 --> 00:01:56.535\nIs this one of those types of series?\n\n38\n00:01:56.535 --> 00:02:01.029\n&gt;&gt; Daniel, sadly there's not really a\ncertification involved with learning ES6.\n\n39\n00:02:01.029 --> 00:02:03.120\nIt's more of a technical skill.\n\n40\n00:02:03.120 --> 00:02:07.695\nI wanna power up my knowledge in the\nJavaScript landscape which, in addition,\n\n41\n00:02:07.695 --> 00:02:11.685\nwill make your code cleaner, easier to\nread, and a little more maintainable.\n\n42\n00:02:11.685 --> 00:02:14.947\n&gt;&gt; Awesome stuff, well, if that sounds\nlike something that might be interesting\n\n43\n00:02:14.947 --> 00:02:17.492\nto you, we look forward to seeing\nyou in the upcoming series.\n\n44\n00:02:19.535 --> 00:02:22.665\n[SOUND] And done, boom.\n\n",
          "vimeoId": "204896095"
        },
        {
          "description": "In this episode, Justin and Mike look at two new keywords for working with variables. They demonstrate using the 'const' keyword and highlight how it is used. They also look at the 'let' keyword and demonstrate its usage.",
          "length": "1135",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-1-1-new_to_varibles-020617-PGM.00_18_40_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-1-1-new_to_varibles-020617-PGM.00_18_40_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-1-1-new_to_varibles-020617-PGM.00_18_40_09.Still001-sm.jpg",
          "title": "Changes to Variables",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:01.232\nWelcome live ITPRO.TV.\n\n2\n00:00:01.232 --> 00:00:07.065\nI'm your host [CROSSTALK]\n\n3\n00:00:07.065 --> 00:00:08.233\n[MUSIC]\n\n4\n00:00:08.233 --> 00:00:12.470\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.470 --> 00:00:12.970\n&gt;&gt; Hello.\n\n6\n00:00:12.970 --> 00:00:17.872\nWelcome to another exciting episode here\nat ITPRO.TV I'm your host Mike Rodrick and\n\n7\n00:00:17.872 --> 00:00:20.469\ntoday we're doing our new features in ES6.\n\n8\n00:00:20.469 --> 00:00:25.960\nAnd we're gonna start off by looking\nat changes to variables within ES6.\n\n9\n00:00:25.960 --> 00:00:27.910\nHere to help us with that is Mr.\nJustin Dennison.\n\n10\n00:00:27.910 --> 00:00:28.750\nWelcome, Justin.\n\n11\n00:00:28.750 --> 00:00:29.910\n&gt;&gt; Thanks for having me back, Mike.\n\n12\n00:00:29.910 --> 00:00:31.510\nI'm excited.\n\n13\n00:00:31.510 --> 00:00:33.730\nES6, what does does that stand for?\n\n14\n00:00:33.730 --> 00:00:36.036\nECMAScript 6, that's a mouthful.\n\n15\n00:00:36.036 --> 00:00:41.370\nEcmascript, Ecma is the standards body for\n\n16\n00:00:41.370 --> 00:00:45.990\nJavaScript and Ecmascripts are changes\nthat have been proposed and implemented,\n\n17\n00:00:45.990 --> 00:00:49.650\nfor the most part, for\nthe new version for JavaScript.\n\n18\n00:00:49.650 --> 00:00:52.840\nNow, within this,\nthere are some assumptions.\n\n19\n00:00:52.840 --> 00:00:57.650\nThat you have a reasonable understanding\nof basic level JavaScript, the old\n\n20\n00:00:57.650 --> 00:01:02.350\nversion, also known as ES5, as well as\nyou’re using an up to date browser.\n\n21\n00:01:03.690 --> 00:01:07.930\nI’m gonna show most of these in a Chrome\nbrowser, because Chrome has roughly\n\n22\n00:01:07.930 --> 00:01:12.940\na 97% implementation rate,\nmost of the features are all good to go.\n\n23\n00:01:12.940 --> 00:01:17.220\nIf you’re using an older browser though,\nit could break and it’ll just say,\n\n24\n00:01:17.220 --> 00:01:22.510\nno, that doesn’t work, so\njust keep that in mind, but variables.\n\n25\n00:01:22.510 --> 00:01:23.651\nWhat are changed to variables?\n\n26\n00:01:23.651 --> 00:01:27.934\nIn our old JavaScript,\nwe just said var x equals or var x, or\n\n27\n00:01:27.934 --> 00:01:32.430\nvar carrots, and\nyou just went on about your business.\n\n28\n00:01:32.430 --> 00:01:36.690\nBut there were a few issues that came\nto light that were a little weird.\n\n29\n00:01:36.690 --> 00:01:42.130\nLike I can reassign variables to\ndifferent types willy nilly or one\n\n30\n00:01:42.130 --> 00:01:46.660\nof my partners can as we're working on a\nproject and that causes some weird issues.\n\n31\n00:01:46.660 --> 00:01:48.938\nLike, hey,\nthis is supposed to be a string.\n\n32\n00:01:48.938 --> 00:01:50.588\nI made an array, sorry about that.\n\n33\n00:01:50.588 --> 00:01:52.558\n&gt;&gt; [LAUGH]\n&gt;&gt; And so that's an issue, but\n\n34\n00:01:52.558 --> 00:01:57.000\nalso the fact that these variables were\nsometimes hoisted outside of these scopes.\n\n35\n00:01:57.000 --> 00:01:58.610\nLike in for loops and if loops,\n\n36\n00:01:58.610 --> 00:02:03.830\nI only want variables to exist\nwithin those constructs.\n\n37\n00:02:03.830 --> 00:02:07.320\nBut in a for loop,\nif I said for var i equals,\n\n38\n00:02:07.320 --> 00:02:12.810\nthen I actually persisted after the loop\nand that could cause additional issues.\n\n39\n00:02:12.810 --> 00:02:17.280\nSo, they started thinking about that and\nhow can we fix that?\n\n40\n00:02:17.280 --> 00:02:21.279\nIn fact, they've added two new keywords,\nconst and lead.\n\n41\n00:02:21.279 --> 00:02:25.330\nThey have different usages, but there are\nsome things that we need to keep in mind.\n\n42\n00:02:25.330 --> 00:02:30.291\nSo I think the best way is to take\na look at how we use those and\n\n43\n00:02:30.291 --> 00:02:33.549\nsee those minor nuance differences.\n\n44\n00:02:33.549 --> 00:02:38.397\nHere we are in Chrome, the best way is to\nget our enviroment up and started, but\n\n45\n00:02:38.397 --> 00:02:41.100\nwe need to check something out first.\n\n46\n00:02:41.100 --> 00:02:45.141\nJust in case you're using a browser\nthat may have some issues.\n\n47\n00:02:45.141 --> 00:02:48.220\nThere is a couple of\nquick checks you can do.\n\n48\n00:02:48.220 --> 00:02:52.150\nIf we type const x = 10, and\n\n49\n00:02:52.150 --> 00:02:56.670\nhere I'm inside my developer tools,\nwhich I got from, more tools,\n\n50\n00:02:56.670 --> 00:03:00.690\ndeveloper tools, or sometimes I use\nthe shortcut, just keep that in mind.\n\n51\n00:03:00.690 --> 00:03:03.999\nThis is where all of our\nJavaScript's gonna happen,\n\n52\n00:03:03.999 --> 00:03:08.115\nif I can say it const x = 10,\nthat means that my Chrome is probably\n\n53\n00:03:08.115 --> 00:03:13.208\nan up-to-date version that has most all\nof these ES6 features available to me.\n\n54\n00:03:13.208 --> 00:03:17.894\nNow it's really awkward to type inside of\nthe console, so the best way is to get\n\n55\n00:03:17.894 --> 00:03:22.793\nthis pairing this environment setup so I\ndon't have to type inside the console but\n\n56\n00:03:22.793 --> 00:03:26.400\nI can just refresh and\nsee output inside the console.\n\n57\n00:03:26.400 --> 00:03:27.830\nSo, how am I gonna do that?\n\n58\n00:03:27.830 --> 00:03:31.750\nWell first,\nI'm gonna open an HTML file in Chrome, and\n\n59\n00:03:31.750 --> 00:03:37.680\nall this is doing is serving as\na gateway for my JavaScript interpreter.\n\n60\n00:03:37.680 --> 00:03:39.770\nAnd we'll take a look at\nthis file in just a moment.\n\n61\n00:03:39.770 --> 00:03:44.280\nBut, it's just a plain file, I've added a\nlittle text, so I know what file is open.\n\n62\n00:03:45.590 --> 00:03:50.600\nAnd, this will provide us a gateway for\nour console to log and interact with.\n\n63\n00:03:51.990 --> 00:03:55.370\nIf I hop over into my text editor,\nand I'm using Adam.\n\n64\n00:03:57.080 --> 00:04:02.640\nI can add a project folder,\nif we look at this file structure.\n\n65\n00:04:02.640 --> 00:04:04.910\nThis is the project that\nI'm playing around with.\n\n66\n00:04:04.910 --> 00:04:08.208\nI have an at.js which is currently empty,\nthen I have and\n\n67\n00:04:08.208 --> 00:04:11.027\nindex.html and\nI'm gonna add this folder, and\n\n68\n00:04:11.027 --> 00:04:15.100\nlet's take a look at these two files\nreal quick before we get started.\n\n69\n00:04:15.100 --> 00:04:19.265\nOur index .html is just\nsome boilerplate HTML and\n\n70\n00:04:19.265 --> 00:04:23.972\nI have this script SRT tag\nwhich references my app.js.\n\n71\n00:04:23.972 --> 00:04:27.600\nThat's gonna allow me to run\nanything that I type in app.js and\n\n72\n00:04:27.600 --> 00:04:28.440\nnot have to worry about it.\n\n73\n00:04:29.910 --> 00:04:33.660\nNow, let's take a look at Ab.Js,\nthere is nothing there.\n\n74\n00:04:33.660 --> 00:04:38.015\nBut there's about to be and we're about\nto see some of those handy new features.\n\n75\n00:04:38.015 --> 00:04:41.080\nLet's do a quick reminder\nof what is a variable.\n\n76\n00:04:41.080 --> 00:04:45.220\nSo I could say var x = 10, but\nthen I could do some stuff.\n\n77\n00:04:49.140 --> 00:04:50.425\nSee, comments are important.\n\n78\n00:04:50.425 --> 00:04:55.152\n&gt;&gt; [LAUGH]\n&gt;&gt; I can say x = i am hungry'; notice\n\n79\n00:04:55.152 --> 00:05:02.190\nthose types have changed,\nwell that cause a lot of errors and\n\n80\n00:05:02.190 --> 00:05:08.400\nas a matter of fact,\nthey can cause some weird stuff,\n\n81\n00:05:08.400 --> 00:05:12.540\nweird operations such as x plus 3.\n\n82\n00:05:12.540 --> 00:05:16.740\nAnd let's do this exact\nsame one down here.\n\n83\n00:05:16.740 --> 00:05:18.342\nAnd if I get at the highlight.\n\n84\n00:05:20.187 --> 00:05:25.450\nSo, I have the same exact operation,\n(x+3), (x+3).\n\n85\n00:05:25.450 --> 00:05:28.160\nIdeally, I want that to be deterministic,\n\n86\n00:05:28.160 --> 00:05:31.620\nI don't want that to change\nin how it evaluates.\n\n87\n00:05:31.620 --> 00:05:33.920\nBecause, if I'm assuming\nthis is a number and\n\n88\n00:05:33.920 --> 00:05:38.780\nI'm doing numerical operations\nwithin my application if it doesnt'\n\n89\n00:05:38.780 --> 00:05:41.870\nbehave as a number I have a problem and\nwe'll get some weird runtime errors.\n\n90\n00:05:41.870 --> 00:05:46.640\nSo let's just take a quick look and\nall I did was refresh with command R.\n\n91\n00:05:46.640 --> 00:05:48.350\nI can actually refresh here.\n\n92\n00:05:48.350 --> 00:05:52.240\nGotta be careful, those shortcuts,\nI'm used to them, so I try to be.\n\n93\n00:05:52.240 --> 00:05:56.063\nBut notice I have 13, but\nthen I say I am hungry3.\n\n94\n00:05:56.063 --> 00:05:58.050\nSo that's kinda weird.\n\n95\n00:05:58.050 --> 00:05:59.710\nI don't want that ability.\n\n96\n00:05:59.710 --> 00:06:02.480\nThere are a great number of times\nthat I don't want that ability.\n\n97\n00:06:02.480 --> 00:06:03.430\nAs a matter of fact,\n\n98\n00:06:04.950 --> 00:06:09.985\nI think of one in my personal life that\nreally goes through, my mortgage rate.\n\n99\n00:06:09.985 --> 00:06:12.600\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't want my mortgage rate just\n\n100\n00:06:12.600 --> 00:06:13.840\nwilly nilly changing.\n\n101\n00:06:13.840 --> 00:06:18.950\nI kind of want that to be locked in and\nthat's because I have this reproducible,\n\n102\n00:06:18.950 --> 00:06:21.800\nunderstandable set of\noperations that will occur.\n\n103\n00:06:21.800 --> 00:06:25.200\nSo, how has that changed in ES6?\n\n104\n00:06:25.200 --> 00:06:29.500\nSo, EA6 provided two new\nvariable decorations.\n\n105\n00:06:29.500 --> 00:06:33.460\nThat was const and let, and\nwe're gonna look at these individually.\n\n106\n00:06:34.540 --> 00:06:36.140\nSo, what is const?\n\n107\n00:06:36.140 --> 00:06:38.620\nConst is short for constant.\n\n108\n00:06:38.620 --> 00:06:44.320\nConstant sets the value, the assignment,\nand keeps it just so, and\n\n109\n00:06:44.320 --> 00:06:48.810\nI'm gonna highlight some issues in just a\nmoment, that you have to be careful about.\n\n110\n00:06:48.810 --> 00:06:53.916\nSo if I say const, and\nI'm gonna say mortgage rate\n\n111\n00:06:53.916 --> 00:06:58.792\nequals 0.05, so my mortgage rate is 5%.\n\n112\n00:06:58.792 --> 00:07:04.275\nAnd let's add a comment down here so\nI can not have that over-scroll issue.\n\n113\n00:07:04.275 --> 00:07:05.875\nIn the console.log.\n\n114\n00:07:08.678 --> 00:07:11.837\nAnd I got mortgage right here.\n\n115\n00:07:11.837 --> 00:07:15.430\nAnd I refresh, 0.05, or 5%, okay.\n\n116\n00:07:15.430 --> 00:07:18.890\nWell, that behaves just like a variable,\nor var did.\n\n117\n00:07:18.890 --> 00:07:19.950\nSo, what's the difference?\n\n118\n00:07:21.290 --> 00:07:26.071\nIf I instead try to do some\ncrazy shenanigans like,\n\n119\n00:07:26.071 --> 00:07:30.441\nwell let me just turn that\nmortgage rate back up to\n\n120\n00:07:32.874 --> 00:07:38.070\n7, I actually get a thrown error.\n\n121\n00:07:38.070 --> 00:07:41.100\nMy JavaScript app will break\nbefore it ever starts running,\n\n122\n00:07:41.100 --> 00:07:45.150\nit's no longer a runtime error,\nit's called a type error.\n\n123\n00:07:45.150 --> 00:07:50.830\nI cannot assign values, to a const,\nonce it is defined it is locked and\n\n124\n00:07:50.830 --> 00:07:54.450\nplaces as long as the application\nis running which is very hand,\n\n125\n00:07:54.450 --> 00:08:00.380\nbecause now I don't have to worry about\ndata types changing, values changing,\n\n126\n00:08:00.380 --> 00:08:04.740\nunbeknownst to me because of either my\nactions or to someone else's actions.\n\n127\n00:08:05.760 --> 00:08:10.520\nBut as a byproduct of that, I used to\nbe able to say var MORTGAGE_RATE and\n\n128\n00:08:10.520 --> 00:08:11.130\njust leave it be.\n\n129\n00:08:12.330 --> 00:08:16.654\nWell, if I try to do that now and\nI actually have to save,\n\n130\n00:08:16.654 --> 00:08:18.499\ndon't forget to save.\n\n131\n00:08:18.499 --> 00:08:23.250\nI get a syntax error because\nconst has to be assigned a value,\n\n132\n00:08:23.250 --> 00:08:28.839\nhas to be bound to a value, I can't\ndeclare the variable as constant and\n\n133\n00:08:28.839 --> 00:08:31.000\nthen evaluate to it later.\n\n134\n00:08:31.000 --> 00:08:32.860\nI can't set it equal to something.\n\n135\n00:08:32.860 --> 00:08:36.030\nLater, I have to do it upon\ndeclaration of the variable.\n\n136\n00:08:36.030 --> 00:08:39.070\nSo those are two things that\nyou have to keep in mind.\n\n137\n00:08:39.070 --> 00:08:42.690\nNow, if you'll notice\nI've used a naming syntax\n\n138\n00:08:42.690 --> 00:08:45.640\nthat's a little than you may have seen,\nand this is just a personal preference.\n\n139\n00:08:45.640 --> 00:08:50.690\nWhen I use const as a constant and\nI know it's gonna be some top level value,\n\n140\n00:08:50.690 --> 00:08:53.590\nI'll name it in all caps\nwith underscores like this.\n\n141\n00:08:53.590 --> 00:08:57.910\nThat's a little bit of my other\nprogramming languages flowing through.\n\n142\n00:08:57.910 --> 00:08:59.912\nBut I like to see them\ncuz it jumps out at me.\n\n143\n00:08:59.912 --> 00:09:03.630\nI know that it is a constant\njust by the naming convention.\n\n144\n00:09:03.630 --> 00:09:08.020\nYou can employ that or you may not,\nIt's completely up to you.\n\n145\n00:09:08.020 --> 00:09:12.200\nThere are times when const will not\nhave capital letters all over the place.\n\n146\n00:09:12.200 --> 00:09:15.030\nSo I have to set this equal to a value.\n\n147\n00:09:15.030 --> 00:09:19.710\nBut there's a couple of gotchas\nyou gotta watch out for for const.\n\n148\n00:09:19.710 --> 00:09:24.232\nLet's actually say,\ninstead of mortgage rate, and\n\n149\n00:09:24.232 --> 00:09:31.270\nI'm going to,\nJust keep this as a regular variable here.\n\n150\n00:09:31.270 --> 00:09:34.570\nWe're gonna say,\nbills I have to pay is constant.\n\n151\n00:09:34.570 --> 00:09:36.611\nI would like for it to be constant,\nsometimes it's not.\n\n152\n00:09:36.611 --> 00:09:41.176\n&gt;&gt; [LAUGH]\n&gt;&gt; Hopefully you don't have that issue,\n\n153\n00:09:41.176 --> 00:09:44.960\nmortgage and electric, okay.\n\n154\n00:09:44.960 --> 00:09:48.630\nSo this is now a collection of\nthe bills I have to pay, and\n\n155\n00:09:48.630 --> 00:09:53.450\nI'm like, this is constant, it's never\ngonna change But this is an array.\n\n156\n00:09:54.810 --> 00:09:59.150\nOkay, so I have billsIHavePay\nthat is assigned to the array.\n\n157\n00:09:59.150 --> 00:10:00.430\nIt is constantly bound.\n\n158\n00:10:00.430 --> 00:10:04.570\nI can't re-assign it but\nwe have to be careful because,\n\n159\n00:10:10.421 --> 00:10:17.150\nI can actually mutate,\nThe value that it's bound to.\n\n160\n00:10:18.590 --> 00:10:21.770\nAnd that does not violate\nthe constant binding.\n\n161\n00:10:21.770 --> 00:10:26.120\nNow, what I mean by binding is I can't\nset it equal to something new, but\n\n162\n00:10:26.120 --> 00:10:31.200\nI can change the internal structure\nof these complex data types\n\n163\n00:10:31.200 --> 00:10:32.330\nif those things are allowed.\n\n164\n00:10:32.330 --> 00:10:36.440\nLike arrays and\nobjects allow me to do that, and\n\n165\n00:10:36.440 --> 00:10:40.360\nthat's a little off puting, but otherwise,\nit would break a bunch of things,\n\n166\n00:10:41.940 --> 00:10:45.840\nlegacy code that needs\nthat ability to mutate.\n\n167\n00:10:45.840 --> 00:10:49.490\nNow, there are ways to keep\nthings from being mutated, but\n\n168\n00:10:49.490 --> 00:10:52.269\nthose are not necessarily specific to ES6.\n\n169\n00:10:52.269 --> 00:10:55.689\nDo keep that in mind and\n\n170\n00:10:55.689 --> 00:11:01.269\njust as a additional example, wow,\n\n171\n00:11:01.269 --> 00:11:07.569\nthe words were at a lose to me for\na moment.\n\n172\n00:11:07.569 --> 00:11:09.090\n&gt;&gt; You could see them forming there-\n&gt;&gt; Yeah.\n\n173\n00:11:09.090 --> 00:11:11.737\nI was like they're on\nthe tip of my tongue.\n\n174\n00:11:11.737 --> 00:11:14.990\nAnd so I have a const object.\n\n175\n00:11:14.990 --> 00:11:18.684\nAn object that is representative of,\nwe'll say me,\n\n176\n00:11:18.684 --> 00:11:21.893\nwe won't talk about what that 130 unit is.\n\n177\n00:11:21.893 --> 00:11:23.780\n&gt;&gt; [LAUGH]\n&gt;&gt; We'll just leave that be.\n\n178\n00:11:23.780 --> 00:11:25.925\nAnd I'm like cool, I am locked in.\n\n179\n00:11:25.925 --> 00:11:30.049\nI'm 72 inches tall, and\nI weigh 130, that's great.\n\n180\n00:11:30.049 --> 00:11:36.130\nBut, just like with arrays, I can\nmutate the properties within an object.\n\n181\n00:11:36.130 --> 00:11:42.170\nSo if I say ME.weight\n\n182\n00:11:42.170 --> 00:11:47.950\n= 180, and\n\n183\n00:11:47.950 --> 00:11:52.550\nI print out ME, I can actually\nmutate the object properties.\n\n184\n00:11:52.550 --> 00:11:58.750\nSo const does not keep the internal value\nof complex data structures constant.\n\n185\n00:11:58.750 --> 00:12:01.444\nThey just keep the binding so\n\n186\n00:12:01.444 --> 00:12:06.279\nI can't reassign ME to a new object and\nstart over.\n\n187\n00:12:06.279 --> 00:12:10.150\nI would actually get a type error for\nthe const value.\n\n188\n00:12:10.150 --> 00:12:12.455\nNow, in addition to const and\n\n189\n00:12:12.455 --> 00:12:16.440\nwe'll talk about let as well,\nthey're both block scoped.\n\n190\n00:12:16.440 --> 00:12:20.640\nSo, if I use const inside of a function or\nI use const\n\n191\n00:12:20.640 --> 00:12:25.930\nin between any set of a curly braces it is\nonly scope to that set of curly braces.\n\n192\n00:12:25.930 --> 00:12:30.010\nI don't have to worry about leaking\noutside of these curly braces,\n\n193\n00:12:30.010 --> 00:12:33.870\nwhich is great because\nsometimes those variables\n\n194\n00:12:33.870 --> 00:12:37.270\nwould leak into the more outer scope,\nand then you'll be like, well,\n\n195\n00:12:37.270 --> 00:12:42.480\nI don't remember defining I or me or\nanything else in this context,\n\n196\n00:12:42.480 --> 00:12:48.190\nand what you found is we have this weird\npersistence that is not intuitive always.\n\n197\n00:12:48.190 --> 00:12:53.034\nSo let's take a look at\nhow this block scoping\n\n198\n00:12:53.034 --> 00:12:56.994\noccurs with these const variables.\n\n199\n00:12:56.994 --> 00:13:01.341\nSo if I look, I'm actually just going\nto set up curly braces and for var,\n\n200\n00:13:01.341 --> 00:13:05.210\nthis would create them and\nthey would be available everywhere.\n\n201\n00:13:05.210 --> 00:13:10.314\nSo if I say var and I just say 9.\n\n202\n00:13:10.314 --> 00:13:15.296\nIf I say const, x= 10, so if I say i, and\n\n203\n00:13:15.296 --> 00:13:20.694\nI print out x,\nI have two sets of curly braces,\n\n204\n00:13:20.694 --> 00:13:25.816\nand if I hit refresh,\nI have to get rid of this\n\n205\n00:13:25.816 --> 00:13:32.090\ntype here that I\nintentionally created here.\n\n206\n00:13:32.090 --> 00:13:34.000\nSo x is not defined.\n\n207\n00:13:35.120 --> 00:13:36.290\nWell, that's interesting.\n\n208\n00:13:36.290 --> 00:13:39.530\nSo notice in between these\nset of curly braces var i,\n\n209\n00:13:39.530 --> 00:13:43.430\nit was consistent,\nit stayed there afterwards.\n\n210\n00:13:43.430 --> 00:13:47.880\nBut when I said const x = 0,\nthe declaration didn't even hold.\n\n211\n00:13:47.880 --> 00:13:50.470\nX is unknown to the rest\nof the interpreter.\n\n212\n00:13:50.470 --> 00:13:54.580\nSo if I only needed to use x in this quick\nlittle setup like a temporary variable,\n\n213\n00:13:54.580 --> 00:13:59.705\nI could use it in that curly brace block\nscope, which also holds for if and\n\n214\n00:13:59.705 --> 00:14:06.040\nfor-loops and functions that are part\nof a more complex expression.\n\n215\n00:14:06.040 --> 00:14:11.486\nWhich is handy because then I can reuse\nvariable names without having to think\n\n216\n00:14:11.486 --> 00:14:17.456\nup a great deal of naming conventions and\nalso I've seen this x one, x two, x three.\n\n217\n00:14:17.456 --> 00:14:18.784\n&gt;&gt; [LAUGH]\n&gt;&gt; X four, and\n\n218\n00:14:18.784 --> 00:14:22.950\nnow I have all these variables\ndancing around with similar names.\n\n219\n00:14:22.950 --> 00:14:24.407\nJust with a number after them.\n\n220\n00:14:24.407 --> 00:14:25.607\n&gt;&gt; And that's intuitive, isn't it?\n\n221\n00:14:25.607 --> 00:14:26.360\n&gt;&gt; Yeah, it's real intuitive.\n\n222\n00:14:26.360 --> 00:14:30.216\n&gt;&gt; [LAUGH]\n&gt;&gt; You go yeah x two, that affects x one.\n\n223\n00:14:30.216 --> 00:14:31.140\n&gt;&gt; Yeah.\n\n224\n00:14:31.140 --> 00:14:31.960\n&gt;&gt; How so?\n\n225\n00:14:31.960 --> 00:14:32.870\nI don't know.\n\n226\n00:14:32.870 --> 00:14:34.980\nI don't know,\nI just they have a one interior abstract.\n\n227\n00:14:34.980 --> 00:14:36.650\nSo be very careful there.\n\n228\n00:14:36.650 --> 00:14:40.570\nSo these are blocks scope and\nthat is quite handy.\n\n229\n00:14:41.630 --> 00:14:43.420\nI can not reassign conts, but\n\n230\n00:14:43.420 --> 00:14:49.000\nthere are times where i need\nto reassigned these variables.\n\n231\n00:14:49.000 --> 00:14:53.680\nAnd let's take a quick look and\nI'm gonna start with const.\n\n232\n00:14:53.680 --> 00:14:57.606\nBecause I tend to like const because\nit keeps me from making these weird\n\n233\n00:14:57.606 --> 00:15:01.146\nreassignment errors but\nsometimes it just doesn't work out.\n\n234\n00:15:01.146 --> 00:15:03.770\nLet's see a time where\nit doesn't work out.\n\n235\n00:15:03.770 --> 00:15:08.210\nSo I'm gonna say names and\n\n236\n00:15:10.810 --> 00:15:15.510\nI have an array of, a,\nthese are wonderful names.\n\n237\n00:15:15.510 --> 00:15:19.446\nI actually am gonna go\nchange that variable name,\n\n238\n00:15:19.446 --> 00:15:22.173\nto not names but instead letters.\n\n239\n00:15:22.173 --> 00:15:24.797\n&gt;&gt; [LAUGH]\n&gt;&gt; That's a better variable.\n\n240\n00:15:24.797 --> 00:15:28.850\nBut if I wanted to run through and do\nsomething with those I could use a loop.\n\n241\n00:15:30.230 --> 00:15:34.994\nSo I could say var const, i = 0,\n\n242\n00:15:34.994 --> 00:15:41.133\ni is less than letter.length, i += 1.\n\n243\n00:15:41.133 --> 00:15:45.925\nNow, if I look at this, my gut instinct\n\n244\n00:15:45.925 --> 00:15:51.280\nsays there might be some issues here.\n\n245\n00:15:51.280 --> 00:15:52.650\nBut I'm gonna go with it anyway.\n\n246\n00:15:54.430 --> 00:15:57.370\nRight now,\nall I want to do is print those out.\n\n247\n00:15:57.370 --> 00:16:01.780\nSo I'm gonna say letters[i].\n\n248\n00:16:01.780 --> 00:16:02.933\nLet's see what happens.\n\n249\n00:16:04.793 --> 00:16:05.944\n&gt;&gt; You might have left\nan s off of letters.\n\n250\n00:16:05.944 --> 00:16:08.447\n&gt;&gt; I did leave an s off there.\n\n251\n00:16:11.499 --> 00:16:13.520\nAssignment to constant variable.\n\n252\n00:16:13.520 --> 00:16:17.510\nI get through one time but, in\n\n253\n00:16:18.580 --> 00:16:24.220\nthe block of the four loop I said, const\ni=0, it is 0 for the rest of the time.\n\n254\n00:16:24.220 --> 00:16:26.067\n&gt;&gt; You can't increment through\nyour loop or anything like that.\n\n255\n00:16:26.067 --> 00:16:29.660\n&gt;&gt; You cannot increment through\nthe loop and that provides a problem.\n\n256\n00:16:29.660 --> 00:16:31.860\nSo const does not solve\nall of our problem.\n\n257\n00:16:32.870 --> 00:16:34.140\nI still want that block scope.\n\n258\n00:16:34.140 --> 00:16:38.280\nI don't want this i variable\nto persist after the loop.\n\n259\n00:16:38.280 --> 00:16:41.330\nBut I do want to be able to mutate it.\n\n260\n00:16:41.330 --> 00:16:42.500\nSo, what happens?\n\n261\n00:16:43.840 --> 00:16:46.540\nI have a new declaration called let.\n\n262\n00:16:46.540 --> 00:16:51.480\nSo let is used if i need mutation or\nreassignment.\n\n263\n00:16:51.480 --> 00:16:56.030\nAnd there are times or\nthat's needed, such as a for loop.\n\n264\n00:16:56.030 --> 00:16:58.820\nHere, with let, it's gonna start at i, but\n\n265\n00:16:58.820 --> 00:17:02.133\nwhen I come over here,\nI'm gonna increment it by 1.\n\n266\n00:17:02.133 --> 00:17:06.090\nAnd because it is now a let variable,\nI can still use it.\n\n267\n00:17:06.090 --> 00:17:10.294\nBut, it really comes in handy if I want to\n\n268\n00:17:10.294 --> 00:17:16.210\nconsole.log(i) Uncaught ReferenceError,\ni is not defined.\n\n269\n00:17:16.210 --> 00:17:18.694\nThat's because i doesn't stick\naround after the for loop.\n\n270\n00:17:18.694 --> 00:17:20.730\nAnd that's incredibly handy.\n\n271\n00:17:20.730 --> 00:17:23.890\nAnd just to compare that,\nI'm going to change this back to var.\n\n272\n00:17:23.890 --> 00:17:25.490\nThat's the old way of doing it.\n\n273\n00:17:25.490 --> 00:17:28.960\nAnd in fact,\ni is 3 after that for loop runs.\n\n274\n00:17:28.960 --> 00:17:30.148\nAnd now if I wanna reuse i,\n\n275\n00:17:30.148 --> 00:17:35.260\ni may have weird values hanging\naround that could be a problem.\n\n276\n00:17:35.260 --> 00:17:38.040\nSo let is very important.\n\n277\n00:17:38.040 --> 00:17:43.270\nA general rule of thumb for\nusing these, const, when available,\n\n278\n00:17:43.270 --> 00:17:46.130\nwhen it works for you,\nI recommend const because it will keep you\n\n279\n00:17:46.130 --> 00:17:50.430\nfrom doing these weird reassignments\nWhere you have data type issues.\n\n280\n00:17:50.430 --> 00:17:55.370\nLet is great for for loops or\nif you need some kind of mutative\n\n281\n00:17:55.370 --> 00:18:00.880\nvariable like user interactions are going\nto mutate something about the page but\n\n282\n00:18:00.880 --> 00:18:05.170\nyou still need to store that,\nmaybe const isn't the best way.\n\n283\n00:18:05.170 --> 00:18:07.470\nLet provides a way to do that.\n\n284\n00:18:07.470 --> 00:18:11.940\nBut, if it is within a block,\nwithin a function, it will only persist\n\n285\n00:18:11.940 --> 00:18:16.430\ninside of that block, which are curly\nbraces or that function scope.\n\n286\n00:18:16.430 --> 00:18:20.820\nSo, there's our new creation variables,\n\n287\n00:18:20.820 --> 00:18:25.260\nhow to mess with them const and\nlet, they are your friends.\n\n288\n00:18:25.260 --> 00:18:26.440\nUse them.\n\n289\n00:18:26.440 --> 00:18:27.250\n&gt;&gt; All right, Justin.\n\n290\n00:18:27.250 --> 00:18:30.310\nThanks for that great looking\nfantastic demonstrations.\n\n291\n00:18:30.310 --> 00:18:33.130\nOn a couple of the new\nfeatures we can find in ES6.\n\n292\n00:18:33.130 --> 00:18:34.590\nWe appreciate that.\n\n293\n00:18:34.590 --> 00:18:36.870\nWe hope everybody out there\nenjoyed watching this one.\n\n294\n00:18:36.870 --> 00:18:38.318\nSigning off for ITPRO.TV.\n\n295\n00:18:38.318 --> 00:18:39.678\nI've been your host Mike Rodrick.\n\n296\n00:18:39.678 --> 00:18:40.618\n&gt;&gt; And I'm Justin Dennison.\n\n297\n00:18:40.618 --> 00:18:43.238\n&gt;&gt; And we'll see you next time.\n\n298\n00:18:43.238 --> 00:18:49.236\n[MUSIC]\n\n299\n00:18:49.236 --> 00:18:54.569\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "203119893"
        },
        {
          "description": "In this episode, Justin and Mike cover the changes to object literals. They demonstrate the new property value shorthand. They also look at the new method value shorthand, and computed properties.",
          "length": "851",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-2-1-enhaned_object_literals-020617-PGM.00_13_56_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-2-1-enhaned_object_literals-020617-PGM.00_13_56_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-2-1-enhaned_object_literals-020617-PGM.00_13_56_05.Still001-sm.jpg",
          "title": "Enhanced Object Literals",
          "transcript": "WEBVTT\n\n1\n00:00:00.190 --> 00:00:02.863\nWelcome to ITProTV,\nI'm your host, Don Pizet.\n\n2\n00:00:02.863 --> 00:00:06.425\n[CROSSTALK]\n\n3\n00:00:06.425 --> 00:00:08.088\n[MUSIC]\n\n4\n00:00:08.088 --> 00:00:10.422\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.422 --> 00:00:15.310\n&gt;&gt; Hello, welcome to another\nexciting episode, here at ITProTV.\n\n6\n00:00:15.310 --> 00:00:20.340\nI'm your host Mike Rodrick, and\ntoday we're doing new features in ES6.\n\n7\n00:00:20.340 --> 00:00:24.432\nAnd in this episode we're gonna be\nfocusing in on enhanced object.\n\n8\n00:00:24.432 --> 00:00:29.340\nAnd here to explain what that is and\nhow it affects us is Mr. Justin Dennison.\n\n9\n00:00:29.340 --> 00:00:30.220\nWelcome back Justin.\n\n10\n00:00:30.220 --> 00:00:31.780\n&gt;&gt; Thanks for having me back Mike.\n\n11\n00:00:31.780 --> 00:00:35.360\nYeah, objects the mainstay of JavaScript.\n\n12\n00:00:35.360 --> 00:00:38.910\nThey're very important but\nsometimes they're a little finicky.\n\n13\n00:00:38.910 --> 00:00:40.680\nAnd how we constructed them.\n\n14\n00:00:40.680 --> 00:00:43.890\nAnd just a lot of ceremony, lot of syntax.\n\n15\n00:00:43.890 --> 00:00:46.830\nIn ES6, they have actually reduced\nthe amount of ceremony and\n\n16\n00:00:46.830 --> 00:00:49.430\nsyntax in order to get an object up and\nrunning.\n\n17\n00:00:49.430 --> 00:00:53.760\nAnd for me, I use them in like a factory\npattern by creating a bunch of objects\n\n18\n00:00:53.760 --> 00:00:58.440\nthat represent some physical constraint\ndigitally within my applications.\n\n19\n00:00:58.440 --> 00:01:02.190\nThe enhanced objects\nliteral patterns excuse me.\n\n20\n00:01:02.190 --> 00:01:07.760\nFeatures allow me to do that quickly\nwith a little less typing and\n\n21\n00:01:07.760 --> 00:01:10.870\nI think its actually a little\nclearer when you see.\n\n22\n00:01:10.870 --> 00:01:15.160\nI think the best way to\ncompare these new features or\n\n23\n00:01:15.160 --> 00:01:18.830\nthe new sets of features to the old\nis let's just take a look at them.\n\n24\n00:01:18.830 --> 00:01:22.400\nSo, here we are in Chrome, and we need to\nmake sure we have our project set up so\n\n25\n00:01:22.400 --> 00:01:24.430\nwe can start our exploration.\n\n26\n00:01:24.430 --> 00:01:28.240\nThe first thing I like to do, or\nit's not always the first thing, but\n\n27\n00:01:28.240 --> 00:01:32.560\ndefinitely one of the first things that I\ndo, is make sure my Chrome Developer Tools\n\n28\n00:01:32.560 --> 00:01:36.349\nare open and so I can see that\ninteraction, those printouts.\n\n29\n00:01:37.590 --> 00:01:40.560\nIn addition to, I want to open an index.\n\n30\n00:01:40.560 --> 00:01:42.730\nHTML file, for the project.\n\n31\n00:01:42.730 --> 00:01:47.646\nThis is gonna allow me to\ninteract with the app.JS,\n\n32\n00:01:47.646 --> 00:01:51.230\nand that's always going\nto serve our purpose for.\n\n33\n00:01:51.230 --> 00:01:53.130\nSo, I'm making sure\nthat I open that index.\n\n34\n00:01:53.130 --> 00:01:58.000\nHTML correct for\nthe project that I'm working in Now,\n\n35\n00:01:58.000 --> 00:02:03.298\nI want to hop over to Adam which is my\ntext editor and open that project file.\n\n36\n00:02:03.298 --> 00:02:07.050\nSo, I'm gonna add the project file and\n\n37\n00:02:07.050 --> 00:02:09.550\nmake sure that I go to\nthe correct project.\n\n38\n00:02:09.550 --> 00:02:13.110\nYou get out a sink on this it's\nincredibly frustrating because you like,\n\n39\n00:02:13.110 --> 00:02:16.470\nWhy is may changes but\ntheir not showing up on the browser.\n\n40\n00:02:16.470 --> 00:02:17.490\nAnd I can't tell you.\n\n41\n00:02:17.490 --> 00:02:22.090\nI'm not saying I have, but I know some\npeople that have definitely spent a couple\n\n42\n00:02:22.090 --> 00:02:25.220\nhours trying to figure that out and\nthen you feel silly.\n\n43\n00:02:25.220 --> 00:02:27.300\nSo, be very, very careful of that.\n\n44\n00:02:27.300 --> 00:02:33.230\nSo my index of html is just that boiler\nplate that brings in my app,js just for\n\n45\n00:02:33.230 --> 00:02:34.770\nexecution purposes.\n\n46\n00:02:34.770 --> 00:02:38.320\nAnd then my app.js is\nwhere all the fun time is.\n\n47\n00:02:38.320 --> 00:02:41.020\nSo, let's do a quick review\nof old object literals.\n\n48\n00:02:41.020 --> 00:02:44.760\nNow, what I mean by old, it's kind of\nthe classic style of object literals.\n\n49\n00:02:44.760 --> 00:02:47.600\nWhere I have everything\nspelled out to the T.\n\n50\n00:02:47.600 --> 00:02:51.020\nI have that key value pair,\neverything's there.\n\n51\n00:02:51.020 --> 00:02:52.530\nAnd I may even wanna use VAR.\n\n52\n00:02:52.530 --> 00:02:55.200\nBut when we create our new object\nliterals, we need to go ahead and start\n\n53\n00:02:55.200 --> 00:03:01.090\nusing some of those new ES6 syntax and\nniceties that have started to come online.\n\n54\n00:03:01.090 --> 00:03:06.080\nSo you will see some things possibly\nthat may come up later on in more depth.\n\n55\n00:03:06.080 --> 00:03:08.430\nLet's take a look at a old object literal.\n\n56\n00:03:09.660 --> 00:03:11.660\nI have var cat.\n\n57\n00:03:12.890 --> 00:03:14.790\nAnd what are we gonna represent a cat?\n\n58\n00:03:14.790 --> 00:03:15.830\nWell, we need a color.\n\n59\n00:03:17.130 --> 00:03:19.100\nAnd I wanna say it's white.\n\n60\n00:03:19.100 --> 00:03:25.090\nNotice I have a key-value pair\nwith a colon between a comma here.\n\n61\n00:03:25.090 --> 00:03:27.065\nDon't put a semicolon there,\nit'll wreck your day.\n\n62\n00:03:27.065 --> 00:03:31.830\n&gt;&gt; [LAUGH]\n&gt;&gt; So then I have a color, a height.\n\n63\n00:03:31.830 --> 00:03:39.220\nLet's just go with 13 inches at\nthe shoulder, a weight and that's 20.\n\n64\n00:03:39.220 --> 00:03:43.290\nAnd then let's just say a meow,\ncat's can meow.\n\n65\n00:03:44.360 --> 00:03:46.850\nAnd that is just, in fact, a function.\n\n66\n00:03:46.850 --> 00:03:50.350\nNow I'm not gonna fill in that function,\nthis is just to compare the structure\n\n67\n00:03:50.350 --> 00:03:54.680\nof the new enhanced object literals,\nas well as the old ones.\n\n68\n00:03:54.680 --> 00:03:57.490\nNow, I have my key value pairs.\n\n69\n00:03:57.490 --> 00:04:00.340\nHere's my properties, here are my methods.\n\n70\n00:04:00.340 --> 00:04:02.870\nAnd notice I have to write out function.\n\n71\n00:04:02.870 --> 00:04:05.680\nI have to have everything written out.\n\n72\n00:04:05.680 --> 00:04:09.690\nNow, let's change this up a little bit.\n\n73\n00:04:09.690 --> 00:04:12.800\nI know that this is\nthrough an input system.\n\n74\n00:04:12.800 --> 00:04:18.720\nSo this color is actually going\nto be an input variable as such.\n\n75\n00:04:20.190 --> 00:04:22.120\nSo someone has selected a color,\n\n76\n00:04:22.120 --> 00:04:26.640\nthey're registering their cat\nin this registration system and\n\n77\n00:04:26.640 --> 00:04:31.890\nif I want to map those,\nI would say the color maps to the color.\n\n78\n00:04:31.890 --> 00:04:35.330\nThis is a variable which\ncontains the value white.\n\n79\n00:04:36.420 --> 00:04:38.857\nIf I wanted to do the same thing for\nheight,\n\n80\n00:04:38.857 --> 00:04:41.315\nI would have to extract\nthat to a variable.\n\n81\n00:04:45.010 --> 00:04:50.070\nAnd, let's just go ahead and\ndo weight, As well.\n\n82\n00:04:50.070 --> 00:04:53.150\nSo, if I wanted to keep\nthat key value pairs,\n\n83\n00:04:53.150 --> 00:04:55.750\njust like I had them when I\nhad everything typed in, but\n\n84\n00:04:55.750 --> 00:04:59.540\nthese are coming from outside variables,\nbecause these are some kind of selection\n\n85\n00:04:59.540 --> 00:05:05.090\nor some kind of input, then I would\nneed to do a lot of repetitive typing.\n\n86\n00:05:05.090 --> 00:05:09.680\nSo weight would go to weight, height would\ngo to height, color would go to color.\n\n87\n00:05:09.680 --> 00:05:14.810\nAnd let's just see how that\nplays out in the browser.\n\n88\n00:05:14.810 --> 00:05:18.500\nSo, I'm gonna print out this cat object,\nand I refresh.\n\n89\n00:05:18.500 --> 00:05:22.300\nAnd notice those variables have\nactually been replaced by the values\n\n90\n00:05:22.300 --> 00:05:23.780\nthat they contain.\n\n91\n00:05:23.780 --> 00:05:29.000\nWell in ES6, and you're like I have to\ntype a lot just to get this pairing.\n\n92\n00:05:29.000 --> 00:05:34.080\nI always want this to be color to color,\nheight to height, weight to weight.\n\n93\n00:05:34.080 --> 00:05:39.140\nSo on so forth, is there any way that I\ncan make that a little simpler in nature,\n\n94\n00:05:39.140 --> 00:05:44.590\nand in fact yes it provides the shorthand\nproperty syntax what object literals.\n\n95\n00:05:44.590 --> 00:05:49.320\nSo, let's see how we can change\nthis object literal to that\n\n96\n00:05:49.320 --> 00:05:51.320\nproperty syntax shorten.\n\n97\n00:05:51.320 --> 00:05:55.040\nOkay, so\nI'm gonna comment out this cat but\n\n98\n00:05:55.040 --> 00:05:56.950\nI'm gonna leave it here just for\nreference.\n\n99\n00:05:58.550 --> 00:06:01.900\nAdd a comment down here so\nwe don't have over scroll.\n\n100\n00:06:01.900 --> 00:06:04.270\nAnd I'm gonna create a new cat.\n\n101\n00:06:04.270 --> 00:06:09.192\nBut it's a cuz this is\ngoing to be our ES6 object\n\n102\n00:06:09.192 --> 00:06:14.000\nliteral I'm gonna keep\nthese variables up here.\n\n103\n00:06:14.000 --> 00:06:15.100\nWe can keep them as vars.\n\n104\n00:06:15.100 --> 00:06:18.800\nThis is an integration between\nold version and new version, so\n\n105\n00:06:18.800 --> 00:06:20.060\nwe're gonna keep those.\n\n106\n00:06:20.060 --> 00:06:23.670\nBut if I wanted to make\nthis cat have a color,\n\n107\n00:06:25.060 --> 00:06:31.110\na height, and a weight notice I'm\ntyping just the variable names.\n\n108\n00:06:31.110 --> 00:06:32.930\nFollowed by commas.\n\n109\n00:06:32.930 --> 00:06:35.710\nWell, let's see how this\nplays out in the browser.\n\n110\n00:06:35.710 --> 00:06:39.570\n&gt;&gt; I think we got a car\ninstead of a cat on that one.\n\n111\n00:06:39.570 --> 00:06:41.760\n&gt;&gt; Car, car, thanks Mike.\n\n112\n00:06:41.760 --> 00:06:44.575\nMaybe I should just have Mike\nstay around when I'm programming.\n\n113\n00:06:44.575 --> 00:06:47.120\n&gt;&gt; [LAUGH].\n&gt;&gt; Because he would help me\n\n114\n00:06:47.120 --> 00:06:49.060\na great deal with typos.\n\n115\n00:06:49.060 --> 00:06:51.875\nNow, Justin, we know cars and\ncats are not the same thing.\n\n116\n00:06:51.875 --> 00:06:54.221\n&gt;&gt; [LAUGH].\n&gt;&gt; You're correct, Mike, thank you.\n\n117\n00:06:54.221 --> 00:06:56.885\n[SOUND] Big egg on my face.\n\n118\n00:06:56.885 --> 00:07:02.027\nNow, [COUGH] if we see I printed out\nthe actual cat object that I had named,\n\n119\n00:07:02.027 --> 00:07:06.850\nand color goes to white,\nheight goes to 13, weight goes to 20.\n\n120\n00:07:06.850 --> 00:07:14.269\nAnd notice I had considerably,\n[SOUND] Careful.\n\n121\n00:07:14.269 --> 00:07:17.070\nYeah, we did some weird deletes there.\n\n122\n00:07:17.070 --> 00:07:19.440\nI have considerably less typing.\n\n123\n00:07:19.440 --> 00:07:23.040\nIf I want the property to have\nthe same name as the variable,\n\n124\n00:07:24.220 --> 00:07:30.610\nthat contains the value, so height has 13,\nif I want it to be height colon 13.\n\n125\n00:07:30.610 --> 00:07:32.630\nThen, I can just use the variable name,\nand\n\n126\n00:07:32.630 --> 00:07:37.835\nJavaScript will now kind of nicely make\nthat happen instead of this color,\n\n127\n00:07:37.835 --> 00:07:42.670\ncolor: color, or height: height.\n\n128\n00:07:42.670 --> 00:07:45.530\nSo I don't have to type nearly as much and\n\n129\n00:07:45.530 --> 00:07:49.930\nit's a little nicer of\na syntax in my regards.\n\n130\n00:07:49.930 --> 00:07:51.982\nNow, if you do want to have.\n\n131\n00:07:51.982 --> 00:07:55.910\nSo, weigthInLbs.\n\n132\n00:07:59.121 --> 00:08:04.393\nIf I do want to rename it,\nthen I can still use that exact same\n\n133\n00:08:04.393 --> 00:08:11.170\nsyntax from ES5 or kind of what you\nknow in the browser that you use.\n\n134\n00:08:11.170 --> 00:08:16.290\nSo I have weight, weightInLbs, but\nthey're both actual weight variables.\n\n135\n00:08:16.290 --> 00:08:18.250\nSo those are really nice.\n\n136\n00:08:18.250 --> 00:08:22.330\nNow, [COUGH] if we come back and look at\nthis cat, add a meow, which was a method.\n\n137\n00:08:22.330 --> 00:08:24.630\nA cat can meow.\n\n138\n00:08:24.630 --> 00:08:28.630\nBut it was a function and\nall this ceremony, and\n\n139\n00:08:28.630 --> 00:08:36.030\nif I had a bunch of functions like\nmeow and eat and run as such.\n\n140\n00:08:36.030 --> 00:08:39.940\nAnd I'm just keeping this commented\nout because we're gonna rewrite this.\n\n141\n00:08:39.940 --> 00:08:42.910\nThen I would have function ({comment}).\n\n142\n00:08:42.910 --> 00:08:47.180\nThat's a lot to write, and\n\n143\n00:08:47.180 --> 00:08:52.460\nreally I would just like to name these and\nbe done with them.\n\n144\n00:08:52.460 --> 00:08:59.030\nAnd in preparation for this change we\nnow have a method short hand syntax.\n\n145\n00:08:59.030 --> 00:09:05.470\nIf I wanted to meow I actually just give\nit a name parenthesis and curly braces.\n\n146\n00:09:05.470 --> 00:09:08.710\nNow, notice all I've taken out\nis the colon and the function.\n\n147\n00:09:08.710 --> 00:09:11.710\nBut that's a series of letters that\nI have to type over and over and\n\n148\n00:09:11.710 --> 00:09:14.350\nover again, and\nthat does save me a great deal of time.\n\n149\n00:09:14.350 --> 00:09:21.640\nIn addition, to me, this reads\na little nicer here in my properties,\n\n150\n00:09:21.640 --> 00:09:25.510\nand then when I see parentheses\nnext to a name, that's a method.\n\n151\n00:09:25.510 --> 00:09:28.770\nI don't have to see what it maps to.\n\n152\n00:09:28.770 --> 00:09:32.450\nAs a matter of fact If you refresh,\nactually I need to save.\n\n153\n00:09:32.450 --> 00:09:38.000\nIf you refresh, break this down, those\n\n154\n00:09:38.000 --> 00:09:43.780\nparenthesis are reflected in Chrome and\nnewer browsers that are implementing ES6.\n\n155\n00:09:43.780 --> 00:09:46.670\nThose may have persisted\nfrom previous versions, but\n\n156\n00:09:46.670 --> 00:09:51.340\nI didn't really notice it, until I started\nusing this enhanced object literal syntax.\n\n157\n00:09:51.340 --> 00:09:55.328\nSo, these are handy, and\nthen I can just program as necessary.\n\n158\n00:09:58.093 --> 00:10:04.700\nSo console.log ('Meowww!!!')\nI can't spell meow.\n\n159\n00:10:04.700 --> 00:10:08.380\nAnd then, if I want to use that.\n\n160\n00:10:09.630 --> 00:10:13.410\nI can use it as I always have,\nwith methods.\n\n161\n00:10:13.410 --> 00:10:15.410\nSo, let's see if that works,\nand in fact, it does.\n\n162\n00:10:15.410 --> 00:10:19.480\nBut it's a shorter syntax, it's a little\nquicker to get through, it's nicer.\n\n163\n00:10:21.070 --> 00:10:23.420\nSo there's our two shorthand methods.\n\n164\n00:10:23.420 --> 00:10:24.790\nNow here's one,\n\n165\n00:10:24.790 --> 00:10:30.080\nthere's a final change to these object\nliterals that are, I don't know.\n\n166\n00:10:30.080 --> 00:10:33.840\nThere's a limited use case, but,\nin the effort for completeness,\n\n167\n00:10:33.840 --> 00:10:35.754\nit's definitely something you should know.\n\n168\n00:10:35.754 --> 00:10:40.190\nI have my short hand properties,\nI have my short hand methods, but\n\n169\n00:10:40.190 --> 00:10:44.100\nI can now have what are called\ncomputed properties.\n\n170\n00:10:44.100 --> 00:10:50.660\nAnd computed properties are ways\nto dynamically generate the name.\n\n171\n00:10:50.660 --> 00:10:54.300\nSo, that the key from some variable.\n\n172\n00:10:55.360 --> 00:11:02.180\nSo, if I look at color and\na cat, I may have major color.\n\n173\n00:11:02.180 --> 00:11:05.430\nSo, when someone picks like color for\na cat when they are registering them,\n\n174\n00:11:05.430 --> 00:11:09.990\nif you have the modelled cat killer and\nyou go, they are predominantly orange.\n\n175\n00:11:09.990 --> 00:11:11.630\nSo, I'm going to pick orange.\n\n176\n00:11:11.630 --> 00:11:17.340\nSo, it would be nice to append that\npredominately to the color name.\n\n177\n00:11:17.340 --> 00:11:20.180\nNow here's where it gets a little weird.\n\n178\n00:11:20.180 --> 00:11:28.520\nIt's an odd thought process,\nbut if I say colorName and\n\n179\n00:11:28.520 --> 00:11:31.920\nwhat I mean by colorName is the property\nname, I'm going to call that color.\n\n180\n00:11:33.930 --> 00:11:36.410\nIf I wanted to change this cat,\n\n181\n00:11:36.410 --> 00:11:42.120\nand I'll actually have to move this\nup because I have a cons there.\n\n182\n00:11:42.120 --> 00:11:46.180\nSo I'm gonna move this up for\ncomputed properties.\n\n183\n00:11:46.180 --> 00:11:53.690\nIf I wanted a color name,\nI can now compute this name dynamically.\n\n184\n00:11:53.690 --> 00:11:59.941\nI can say a color name, plus predominate.\n\n185\n00:11:59.941 --> 00:12:04.490\nAnd then map that to color.\n\n186\n00:12:05.620 --> 00:12:10.200\nSo, color predominate\nnow this is great for\n\n187\n00:12:10.200 --> 00:12:14.460\ndynamic creation of objects or\nyou may need to change these.\n\n188\n00:12:14.460 --> 00:12:18.340\nAnd typically when I program,\nI don't use this pattern as much.\n\n189\n00:12:18.340 --> 00:12:22.260\nBut there are times when this calls for\nit, where you need to\n\n190\n00:12:22.260 --> 00:12:25.710\nchange property names based on some\nkind of selection from a user.\n\n191\n00:12:25.710 --> 00:12:31.920\nSo let's see how this actually plays out,\nor if it plays out And it in fact does.\n\n192\n00:12:31.920 --> 00:12:36.770\nThis variable in between the square\nbrackets is now replaced by its value.\n\n193\n00:12:36.770 --> 00:12:41.730\nThis JavaScript expression is computed,\nand that's what becomes the variable name.\n\n194\n00:12:41.730 --> 00:12:44.610\nColorpredominate is white.\n\n195\n00:12:44.610 --> 00:12:49.840\nNow another way I can think of this is\nif this is kind of a setting within my\n\n196\n00:12:49.840 --> 00:12:54.870\napplication, maybe I wanna change\nthis depending on trial and\n\n197\n00:12:54.870 --> 00:12:57.490\nerror of focus groups or user groups.\n\n198\n00:12:57.490 --> 00:13:02.410\nI may have all of these names\nat the top of my file so\n\n199\n00:13:02.410 --> 00:13:07.240\nI can just change them and then create\nobjects based on this naming pattern.\n\n200\n00:13:07.240 --> 00:13:11.820\nAnd now I have a settings\nportion that just works.\n\n201\n00:13:11.820 --> 00:13:14.980\nAnd I don't have to go and\nreplace every time I create the object.\n\n202\n00:13:14.980 --> 00:13:18.750\nSo, those are our enhanced\nobjects literals.\n\n203\n00:13:18.750 --> 00:13:22.810\nThere's not a lot of changes but\nthey do make for nice usage.\n\n204\n00:13:22.810 --> 00:13:24.950\nThey do make for nicer syntax.\n\n205\n00:13:24.950 --> 00:13:27.170\nI think the readability has increased.\n\n206\n00:13:27.170 --> 00:13:30.950\nAnd in combination with some\nadditional ES6 features\n\n207\n00:13:30.950 --> 00:13:32.270\nMake them incredibly powerful.\n\n208\n00:13:32.270 --> 00:13:33.070\nLike they all.\n\n209\n00:13:33.070 --> 00:13:34.670\nLike they already were.\n\n210\n00:13:34.670 --> 00:13:36.320\nBut even more so.\n\n211\n00:13:36.320 --> 00:13:38.040\n&gt;&gt; All right, fantastic Justin.\n\n212\n00:13:38.040 --> 00:13:39.760\nAny time you can save me.\n\n213\n00:13:39.760 --> 00:13:41.630\nTyping a few characters.\n\n214\n00:13:41.630 --> 00:13:42.590\nI think it's a good thing.\n\n215\n00:13:42.590 --> 00:13:44.490\nAnd if it makes it easier to read.\n\n216\n00:13:44.490 --> 00:13:45.630\nAnother great benefit.\n\n217\n00:13:45.630 --> 00:13:46.330\nWe thank you for that.\n\n218\n00:13:46.330 --> 00:13:47.190\nGreat explanations.\n\n219\n00:13:47.190 --> 00:13:48.460\nGreat demonstrations.\n\n220\n00:13:48.460 --> 00:13:50.860\nWe hope everybody out there\nenjoyed watching this one.\n\n221\n00:13:50.860 --> 00:13:54.330\nSigning off for IT Pro TV,\nI've been your host Mike Rodrick.\n\n222\n00:13:54.330 --> 00:13:57.913\n&gt;&gt; And I'm Justin Wilson.\n&gt;&gt; And we'll see you next time.\n\n223\n00:13:57.913 --> 00:14:03.824\n&gt;&gt; [MUSIC]\n\n224\n00:14:03.824 --> 00:14:06.937\nThank you for watching ITProTV.\n\n",
          "vimeoId": "203120214"
        },
        {
          "description": "In this episode, Justin and Mike begin their discussion on classes in JavaScript. They start by reviewing the constructor/prototype pattern. Then they demonstrate how to factor the constructor into a class.",
          "length": "1636",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-classes_come_to_javascript-020717-PGM.00_27_01_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-classes_come_to_javascript-020717-PGM.00_27_01_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-classes_come_to_javascript-020717-PGM.00_27_01_07.Still001-sm.jpg",
          "title": "Classes Come to JavaScript",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:03.862\nWelcome to ITProTV.\n\n2\n00:00:03.862 --> 00:00:05.157\nI'm your host, Don Pezet.\n\n3\n00:00:05.157 --> 00:00:08.499\n[CROSSTALK].\n\n4\n00:00:08.499 --> 00:00:12.534\n&gt;&gt; You're watching ITProTV\n&gt;&gt; Hello,\n\n5\n00:00:12.534 --> 00:00:15.493\nwelcome to another exciting\nepisode here at ITProTV.\n\n6\n00:00:15.493 --> 00:00:20.053\nI'm your host, Mike Rodrick, and\ntoday we're doing new features in ES6.\n\n7\n00:00:20.053 --> 00:00:23.860\nAnd in this episode, well,\nwe've got an interesting one for you.\n\n8\n00:00:23.860 --> 00:00:26.450\nClasses come to JavaScript.\n\n9\n00:00:26.450 --> 00:00:29.920\nHere to explain what the heck\nthat means is Mr Justin Dennison.\n\n10\n00:00:29.920 --> 00:00:30.730\nWelcome back, Justin.\n\n11\n00:00:30.730 --> 00:00:31.910\n&gt;&gt; Thanks for having me back, Mike.\n\n12\n00:00:31.910 --> 00:00:34.450\nYeah, classes, classy.\n\n13\n00:00:34.450 --> 00:00:36.370\nClassy, classy JavaScript.\n\n14\n00:00:36.370 --> 00:00:39.440\nSo within JavaScript,\nwe've never actually had classes.\n\n15\n00:00:39.440 --> 00:00:42.390\nWe've always had to mimic\nclass inherited structure.\n\n16\n00:00:42.390 --> 00:00:43.694\n&gt;&gt; My bad that's me.\n\n17\n00:00:43.694 --> 00:00:44.530\n&gt;&gt; What happened?\n\n18\n00:00:44.530 --> 00:00:49.902\n&gt;&gt; Yeah, I put up your title third\n\n19\n00:00:49.902 --> 00:00:57.160\ninstead of your adjusting lower third.\n\n20\n00:00:57.160 --> 00:00:58.110\n&gt;&gt; Stuff happens.\n\n21\n00:00:58.110 --> 00:01:03.769\n&gt;&gt; You was talking about being classy and\nalso like Justin, it threw me off.\n\n22\n00:01:03.769 --> 00:01:06.936\n&gt;&gt; [LAUGH] Hello, good sir.\n\n23\n00:01:06.936 --> 00:01:09.853\n&gt;&gt; All right, stand by.\n\n24\n00:01:09.853 --> 00:01:12.273\n&gt;&gt; Starting over or.\n\n25\n00:01:12.273 --> 00:01:13.288\n&gt;&gt; Yes, over.\n\n26\n00:01:13.288 --> 00:01:17.438\n&gt;&gt; Okay, don't let it happen again.\n\n27\n00:01:17.438 --> 00:01:20.220\n&gt;&gt; Welcome to ITProTV.\n\n28\n00:01:20.220 --> 00:01:22.595\nI'm your host, Don Pezet.\n\n29\n00:01:22.595 --> 00:01:29.750\n[CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n30\n00:01:29.750 --> 00:01:32.916\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n31\n00:01:32.916 --> 00:01:37.286\nI'm your host Mike Rodrick, and\ntoday we're doing new features in ES6.\n\n32\n00:01:37.286 --> 00:01:40.490\nIn this episode,\nwell we got an interesting one for you.\n\n33\n00:01:40.490 --> 00:01:42.920\nClasses come to JavaScript.\n\n34\n00:01:42.920 --> 00:01:46.250\nAnd here to tell us what the heck\nthat means is Mr Justin Dennison.\n\n35\n00:01:46.250 --> 00:01:47.330\nWelcome, Justin.\n\n36\n00:01:47.330 --> 00:01:48.640\n&gt;&gt; Thanks for having me back, Mike.\n\n37\n00:01:48.640 --> 00:01:51.360\nYeah, I've always thought that\nJavaScript has been classy.\n\n38\n00:01:51.360 --> 00:01:53.960\nHowever, not everyone\nhas thought that way.\n\n39\n00:01:53.960 --> 00:01:58.440\nIn JavaScript though, we've always had to\nemulate the class inherited structure.\n\n40\n00:01:58.440 --> 00:02:04.840\nHow we use classes from other languages\nsuch as Java, Python, to some extent Ruby.\n\n41\n00:02:04.840 --> 00:02:06.370\nHow those things work,\n\n42\n00:02:06.370 --> 00:02:11.340\nwe've had to kinda do some wavy\nhands about it and make it happen.\n\n43\n00:02:11.340 --> 00:02:13.920\nBecause JavaScript uses\nwhat is called a prototype,\n\n44\n00:02:13.920 --> 00:02:16.660\nor prototypical inheritance pattern.\n\n45\n00:02:16.660 --> 00:02:20.280\nNow there's some arguments whether it's\ntruly called prototype or prototypical.\n\n46\n00:02:20.280 --> 00:02:24.710\nJust remember there is a prototype\nthat talks about the structure of\n\n47\n00:02:24.710 --> 00:02:26.970\nthe JavaScript objects.\n\n48\n00:02:26.970 --> 00:02:30.070\nNow we're going to start actually\n\n49\n00:02:30.070 --> 00:02:34.520\nlooking at that prototype-based pattern\nthat emulates java script classes.\n\n50\n00:02:34.520 --> 00:02:36.630\nAnd then we're going to move on and\nsee these new features.\n\n51\n00:02:36.630 --> 00:02:39.310\nHow they make things\nare a little nicer to look at.\n\n52\n00:02:39.310 --> 00:02:42.840\nA little nicer to extend and move around.\n\n53\n00:02:42.840 --> 00:02:46.750\nAnd this is very important because some\nof the newer technologies in JavaScript\n\n54\n00:02:46.750 --> 00:02:50.110\nare relying on this class-based structure.\n\n55\n00:02:50.110 --> 00:02:53.840\nNow, you could always go back\nto the standard JavaScript ways.\n\n56\n00:02:53.840 --> 00:02:55.940\nBut if you start reading around,\n\n57\n00:02:55.940 --> 00:03:00.760\nyou'll know that there's a lot of dissent\nabout which way is the right way.\n\n58\n00:03:00.760 --> 00:03:03.060\nSo let's just stick with classes for now.\n\n59\n00:03:03.060 --> 00:03:06.900\nSo let's go ahead and take a look at\nour browser, get our project set up.\n\n60\n00:03:06.900 --> 00:03:12.664\nAnd here I am in Chrome, I'm gonna go\nahead and open my Chrome developer tools.\n\n61\n00:03:12.664 --> 00:03:15.420\nYou know, we always wanna\nhave those developer tools.\n\n62\n00:03:15.420 --> 00:03:19.970\nI find myself sometimes just\nopening them up on random websites,\n\n63\n00:03:19.970 --> 00:03:22.190\njust because I feel\ncomfortable having them.\n\n64\n00:03:22.190 --> 00:03:25.542\nSo if you do this long enough,\nyou're like I gotta have dev tools open.\n\n65\n00:03:25.542 --> 00:03:30.020\nAnd then I'm gonna go ahead and\nopen my index.html.\n\n66\n00:03:30.020 --> 00:03:35.330\nWhich is our portal into our app.js so\nwe can actually mess around with those.\n\n67\n00:03:35.330 --> 00:03:39.020\nMake sure you open that\ncorrect index.html.\n\n68\n00:03:39.020 --> 00:03:44.260\nAnd if you don't, you have a mismatch and\nit's rough going.\n\n69\n00:03:44.260 --> 00:03:47.705\nSo I have my index.html,\nI have my dev tools open.\n\n70\n00:03:47.705 --> 00:03:53.270\nNow I'm gonna hop over into my editor and\nopen my actual project folder.\n\n71\n00:03:54.290 --> 00:03:56.560\nSo add project folder, I'm in add them.\n\n72\n00:03:57.960 --> 00:04:01.120\nDesktop, and here's my ES6 classes.\n\n73\n00:04:01.120 --> 00:04:02.860\nLet's see if we can, there we go.\n\n74\n00:04:02.860 --> 00:04:04.640\nThat is tiny even for me.\n\n75\n00:04:04.640 --> 00:04:07.530\nSo I'm sure you're having\na hard time seeing that.\n\n76\n00:04:07.530 --> 00:04:09.320\nSo I have my ES6 classes.\n\n77\n00:04:09.320 --> 00:04:11.387\nMy index.html is just boilerplate.\n\n78\n00:04:11.387 --> 00:04:15.180\nMy app.js is where the fun\nis going to begin.\n\n79\n00:04:15.180 --> 00:04:17.160\nSo let's start with this,\n\n80\n00:04:17.160 --> 00:04:22.490\nhow do we emulate this pattern\nfrom Java Python to some extent.\n\n81\n00:04:22.490 --> 00:04:25.090\nThose are a little bit different,\njust so we're clear.\n\n82\n00:04:25.090 --> 00:04:28.080\nHow do we emulate that in JavaScript?\n\n83\n00:04:28.080 --> 00:04:31.270\nWell we can use something\ncalled a constructor function.\n\n84\n00:04:32.430 --> 00:04:33.540\nAnd let's start with,\n\n85\n00:04:33.540 --> 00:04:36.714\nnow these are contrived examples\nbecause it's about the concept.\n\n86\n00:04:36.714 --> 00:04:40.470\nI don't know if I would necessarily use\nthese in a full-blown application, but\n\n87\n00:04:40.470 --> 00:04:42.360\nhey, you never know.\n\n88\n00:04:42.360 --> 00:04:44.680\nSo I'm gonna start with\njust creating a function.\n\n89\n00:04:44.680 --> 00:04:47.188\nYou gotta spell function right,\nthat's important.\n\n90\n00:04:47.188 --> 00:04:48.230\n&gt;&gt; It helps.\n\n91\n00:04:48.230 --> 00:04:49.740\n&gt;&gt; And I'm just gonna call in an animal.\n\n92\n00:04:49.740 --> 00:04:54.810\nAnd I'm gonna say an animal is created\nbased on its height and weight, right?\n\n93\n00:04:54.810 --> 00:04:58.840\nIf I think about an animal, okay,\nan animal has a height and a weight.\n\n94\n00:04:58.840 --> 00:05:00.840\nNow an animal could have\na bunch of other things.\n\n95\n00:05:00.840 --> 00:05:02.660\nBut those are specific animals.\n\n96\n00:05:02.660 --> 00:05:05.200\nAll animals have heights and weights.\n\n97\n00:05:05.200 --> 00:05:08.110\nSo this is a very general treatment.\n\n98\n00:05:08.110 --> 00:05:12.490\nAnd I'm gonna say this animal,\nwhatever animal I'm constructing.\n\n99\n00:05:12.490 --> 00:05:16.600\nIts weight is going to be equal\nto the weight that is passed in.\n\n100\n00:05:16.600 --> 00:05:19.340\nNow keep in mind that's not bad.\n\n101\n00:05:20.440 --> 00:05:22.760\nIf I called this function with a 9,\n\n102\n00:05:22.760 --> 00:05:26.570\nthe 9 would actually replace the second,\nthe right-hand argument.\n\n103\n00:05:26.570 --> 00:05:30.550\nNot the this dot, but\ninstead the one without the this.\n\n104\n00:05:30.550 --> 00:05:32.200\nThat's an important distinction.\n\n105\n00:05:32.200 --> 00:05:35.310\nNow I find that I always name\nthose variables the same.\n\n106\n00:05:35.310 --> 00:05:37.670\nBecause it actually makes sense to me.\n\n107\n00:05:37.670 --> 00:05:42.238\nThere's nothing wrong with\nsaying something like this,\n\n108\n00:05:42.238 --> 00:05:49.080\nanimalWeight and animalWeight.\n\n109\n00:05:49.080 --> 00:05:52.190\nAnd then I can actually set the property,\ngiven the variable name.\n\n110\n00:05:53.790 --> 00:05:55.810\nSo I'm going to go back to my weight.\n\n111\n00:05:55.810 --> 00:05:59.310\nJust because those long variable names,\nthough descriptive,\n\n112\n00:05:59.310 --> 00:06:01.979\ncan make it very difficult\nto follow along here.\n\n113\n00:06:01.979 --> 00:06:06.490\nI'm going to say this.height is equal\nto the height that is passed in.\n\n114\n00:06:06.490 --> 00:06:10.470\nAnd then I'm actually going to have\nsome default kind of properties.\n\n115\n00:06:10.470 --> 00:06:12.410\nSo I'm gonna say it is position 0.\n\n116\n00:06:12.410 --> 00:06:14.350\nNow this is a one dimensional animal.\n\n117\n00:06:14.350 --> 00:06:16.984\nIt only moves along a line,\nnot up, down, left.\n\n118\n00:06:16.984 --> 00:06:20.930\nIt's just forward and\nback, that's all it can do.\n\n119\n00:06:20.930 --> 00:06:25.300\nAnd then I'm gonna say that\nit has a belly that is empty.\n\n120\n00:06:25.300 --> 00:06:26.500\nIt's an empty array, right?\n\n121\n00:06:26.500 --> 00:06:31.810\nWe can think of our guts as a collection\nof food that we put into our mouth,\n\n122\n00:06:31.810 --> 00:06:33.640\nwe chew up and swallow.\n\n123\n00:06:33.640 --> 00:06:38.020\nThat was maybe a little more than you\nwanted to know, but that's how it works.\n\n124\n00:06:38.020 --> 00:06:39.490\nSo I have my animal.\n\n125\n00:06:39.490 --> 00:06:41.100\nAnd I can actually go ahead and\n\n126\n00:06:41.100 --> 00:06:45.300\nconstruct new animals from\nthis constructor function.\n\n127\n00:06:45.300 --> 00:06:47.290\nAnd let's just see how that works.\n\n128\n00:06:47.290 --> 00:06:51.570\nWe'll keep with those ES6 fun times.\n\n129\n00:06:51.570 --> 00:06:54.960\nSo I'm gonna say, not car,\ncar is not an animal.\n\n130\n00:06:54.960 --> 00:06:57.260\nI'm gonna say a cat is a new animal.\n\n131\n00:06:57.260 --> 00:07:02.380\nAnd roughly 10 pounds and\n12 inches at the shoulder.\n\n132\n00:07:02.380 --> 00:07:03.350\nI'm also gonna make a dog.\n\n133\n00:07:03.350 --> 00:07:11.250\nAnd they're gonna be about 100 pounds and\n30 inches at the shoulder.\n\n134\n00:07:11.250 --> 00:07:14.480\nDog is a lot larger, however,\nnotice that a cat and\n\n135\n00:07:14.480 --> 00:07:18.720\na dog both have weight and\nheight associated with them.\n\n136\n00:07:18.720 --> 00:07:20.600\nSo they're both animals.\n\n137\n00:07:20.600 --> 00:07:23.320\nSo, let's see what this\nprints out in our console.\n\n138\n00:07:24.698 --> 00:07:28.810\nAnd we're gonna print out the cat and\nthe dog.\n\n139\n00:07:30.350 --> 00:07:35.180\nSo if I hop over and I refresh,\nnotice I now have JavaScript objects.\n\n140\n00:07:35.180 --> 00:07:37.900\nBut because I've used\na constructor function,\n\n141\n00:07:37.900 --> 00:07:42.520\nmy dev tools do not call this an object.\n\n142\n00:07:42.520 --> 00:07:45.760\nThey call it, instead, an animal because\nthat's the function that was used.\n\n143\n00:07:46.860 --> 00:07:49.540\nI have all of my properties that I've set.\n\n144\n00:07:49.540 --> 00:07:52.876\nBut I also have this __proto thing,\nwhat is that?\n\n145\n00:07:52.876 --> 00:07:55.325\nWell that's actually the prototype.\n\n146\n00:07:55.325 --> 00:08:00.675\nThis is saying that the standard\nJavaScript object is the prototype for\n\n147\n00:08:00.675 --> 00:08:01.752\nthis animal.\n\n148\n00:08:01.752 --> 00:08:05.590\nAnd there's nothing really to it, okay?\n\n149\n00:08:05.590 --> 00:08:09.840\n&gt;&gt; So just at this point, can I tell\nthe difference between a dog and a cat?\n\n150\n00:08:09.840 --> 00:08:10.870\n&gt;&gt; Absolutely not.\n\n151\n00:08:10.870 --> 00:08:12.590\nThey are both, in general, animals.\n\n152\n00:08:12.590 --> 00:08:17.510\nThey're only different because of\nthe context of your program at this point.\n\n153\n00:08:17.510 --> 00:08:21.800\nBut, we're just building what's\nknown as like a base class\n\n154\n00:08:21.800 --> 00:08:26.010\nas a way of building towards\nthese specific implementations.\n\n155\n00:08:26.010 --> 00:08:30.150\nSeeing the power of these class\nbased inherited structures.\n\n156\n00:08:30.150 --> 00:08:33.960\nBut, as Uncle Ben said, with great\npower comes great responsibility, so\n\n157\n00:08:33.960 --> 00:08:35.075\nbe very very careful there.\n\n158\n00:08:35.075 --> 00:08:37.460\n&gt;&gt; [LAUGH]\n&gt;&gt; So we're gonna keep this, but\n\n159\n00:08:37.460 --> 00:08:43.420\nI do know that all animals have a specific\nset of things that they can do.\n\n160\n00:08:43.420 --> 00:08:45.970\nAll animals can do these and\nI wanna share these.\n\n161\n00:08:45.970 --> 00:08:49.870\nI could put these inside the constructors,\nbut from a performance standpoint,\n\n162\n00:08:49.870 --> 00:08:51.980\nthey're a little heavier weight.\n\n163\n00:08:51.980 --> 00:08:55.704\nIf I start adding functions in like this,\nand\n\n164\n00:08:55.704 --> 00:09:01.098\nthe reason being is I make a copy\nof that function for everything.\n\n165\n00:09:01.098 --> 00:09:04.797\nAlso I dont have the ability\nto change that runtime,\n\n166\n00:09:04.797 --> 00:09:07.922\nif animals are already in existence right.\n\n167\n00:09:07.922 --> 00:09:10.711\nI can't, I have to make\na tweet theres a bug there I\n\n168\n00:09:10.711 --> 00:09:13.513\ngotta actually restart\nthe entire application.\n\n169\n00:09:13.513 --> 00:09:17.116\nSo, there's couple of reason\nI dont want to do that.\n\n170\n00:09:17.116 --> 00:09:22.702\nBut instead, I can say\n\n171\n00:09:22.702 --> 00:09:29.762\nAnimal.prototype.eat.\n\n172\n00:09:29.762 --> 00:09:30.935\nAnd, well, when we eat,\nwe need food to eat, right.\n\n173\n00:09:30.935 --> 00:09:33.594\nAnd I'll fill these in.\n\n174\n00:09:33.594 --> 00:09:35.222\nSo, that is animal.prototype.eat.\n\n175\n00:09:35.222 --> 00:09:35.950\nOkay, I'm gonna leave that empty.\n\n176\n00:09:35.950 --> 00:09:37.610\nAnd eating requires food.\n\n177\n00:09:37.610 --> 00:09:40.765\nSo, okay,\n\n178\n00:09:40.765 --> 00:09:45.813\nthat makes sense.\n\n179\n00:09:45.813 --> 00:09:46.313\nAnd then, Animal.prototype.move.\n\n180\n00:09:47.876 --> 00:09:52.757\nAnd, in order to move,\nI need to know what distance to move.\n\n181\n00:09:52.757 --> 00:09:58.004\nAnd then, Animal.prototype, not speak.\n\n182\n00:10:00.196 --> 00:10:05.620\nNow, there's no way around typing all\nof this information, as we see it here.\n\n183\n00:10:06.850 --> 00:10:08.560\nBut, I'm gonna leave these empty for now.\n\n184\n00:10:08.560 --> 00:10:12.210\nLet's go back and see how that cat and\ndog have changed, upon refresh.\n\n185\n00:10:12.210 --> 00:10:16.490\nSo, when I refresh the page,\nit's gonna rerun this entire file,\n\n186\n00:10:16.490 --> 00:10:21.690\nreconstruct those animals and then\nwe'll see those differences propagate.\n\n187\n00:10:21.690 --> 00:10:25.380\nSo if I refresh, it doesn't look\nlike anything has changed but\n\n188\n00:10:25.380 --> 00:10:29.990\nif I actually go to this __proto,\nnotice I have eat move and speak.\n\n189\n00:10:31.040 --> 00:10:36.620\nIf I look at the dog,\nI also have eat, move, and speak.\n\n190\n00:10:36.620 --> 00:10:39.410\nAnd those are actually shared\nbetween those two animals.\n\n191\n00:10:39.410 --> 00:10:42.590\nThey eat the same, they move the same,\nthey speak the same.\n\n192\n00:10:42.590 --> 00:10:46.247\nThat doesn't really jive\ntoo well at this point but\n\n193\n00:10:46.247 --> 00:10:49.233\nthat's where classes are gonna help us.\n\n194\n00:10:49.233 --> 00:10:51.449\nThey're gonna come into play there.\n\n195\n00:10:51.449 --> 00:10:52.698\nSo, let's just fill these in.\n\n196\n00:10:52.698 --> 00:11:00.090\nSo, I'm gonna say this.belly .push(food);\nSo, if I eat I put food in my belly.\n\n197\n00:11:00.090 --> 00:11:08.600\nIf I move, then I'm gonna change\nmy position, By some distance.\n\n198\n00:11:08.600 --> 00:11:11.670\nAnd I can move backwards by\nproviding a negative distance.\n\n199\n00:11:11.670 --> 00:11:13.250\nAnd then,\nhere's where the weird one comes in.\n\n200\n00:11:13.250 --> 00:11:18.790\nI'm just gonna keep this general and\nsay Animal Speaking.\n\n201\n00:11:20.030 --> 00:11:24.155\nIf you ever actually hear that in real\nlife, you should probably tell someone.\n\n202\n00:11:24.155 --> 00:11:25.140\n&gt;&gt; [LAUGH]\n&gt;&gt; That's important.\n\n203\n00:11:25.140 --> 00:11:27.529\n&gt;&gt; If an animal just goes,\nhello, I'm speaking.\n\n204\n00:11:27.529 --> 00:11:30.034\nYou go, okay,\nI'm gonna go somewhere else now.\n\n205\n00:11:30.034 --> 00:11:32.280\n&gt;&gt; [LAUGH]\n&gt;&gt; So, keep that in mind.\n\n206\n00:11:32.280 --> 00:11:36.310\nSo, we actually have what\nis kinda mimic of a class.\n\n207\n00:11:36.310 --> 00:11:38.080\nI have the constructor, and\n\n208\n00:11:38.080 --> 00:11:42.840\nI have the various object's methods\navailable for every animal that I create.\n\n209\n00:11:42.840 --> 00:11:44.410\nI could create a bunch of animals.\n\n210\n00:11:44.410 --> 00:11:47.650\nI could write a four-loop to create\na 1000 animals, and they would all have\n\n211\n00:11:47.650 --> 00:11:51.200\nthese methods, and they would all\nrequire a height and a weight.\n\n212\n00:11:52.310 --> 00:11:57.400\nWell, that's nice, this is how we've\ncreated this class-based pattern before,\n\n213\n00:11:57.400 --> 00:12:01.070\nbut how does this look in ES6?\n\n214\n00:12:01.070 --> 00:12:05.470\nSo, I'm gonna leave this here, but instead\nI'm just gonna comment this out, and\n\n215\n00:12:05.470 --> 00:12:10.220\nreproduce this as an ES6 class,\nhighlighting the differences and\n\n216\n00:12:10.220 --> 00:12:11.380\nsimilarities as we go.\n\n217\n00:12:12.670 --> 00:12:16.330\nNow on ES6 we have those\nenhanced object literals,\n\n218\n00:12:16.330 --> 00:12:20.570\nwe had another show about that,\nso if you're like what are those?\n\n219\n00:12:20.570 --> 00:12:22.800\nI would definitely say check that out.\n\n220\n00:12:22.800 --> 00:12:26.300\nBut, you'll see some similarities here and\nI'll highlight those as well.\n\n221\n00:12:26.300 --> 00:12:30.510\nSo, within JavaScript,\nlet me add a comment here so\n\n222\n00:12:30.510 --> 00:12:32.020\nwe don't have this weird over scroll.\n\n223\n00:12:33.770 --> 00:12:36.550\nWithin JavaScript,\nclass has become a key word.\n\n224\n00:12:36.550 --> 00:12:38.100\nI think it's always been a reserved word.\n\n225\n00:12:38.100 --> 00:12:41.010\nI can't say const class =.\n\n226\n00:12:41.010 --> 00:12:43.140\nAnd I can now just say animal.\n\n227\n00:12:43.140 --> 00:12:43.900\nSo, class animal.\n\n228\n00:12:45.060 --> 00:12:49.410\nHowever, within a class I need to\ndefine how is an animal constructed,\n\n229\n00:12:49.410 --> 00:12:51.235\nhow is it made digitall?.\n\n230\n00:12:52.760 --> 00:12:57.430\nConstructor that's important, constructor.\n\n231\n00:12:57.430 --> 00:12:59.380\nThat takes a height and a weight.\n\n232\n00:13:00.590 --> 00:13:03.040\nAnd notice that is very,\n\n233\n00:13:03.040 --> 00:13:06.400\nI changed the order let me keep\nthe same order just for clarity.\n\n234\n00:13:08.660 --> 00:13:09.500\nA weight and a height,\n\n235\n00:13:09.500 --> 00:13:13.350\nnotice this has already started to\nlook like this function definition.\n\n236\n00:13:13.350 --> 00:13:16.090\nAnd that's why this is called\na constructor function,\n\n237\n00:13:16.090 --> 00:13:18.420\nbecause it actually\nemulates this constructor.\n\n238\n00:13:18.420 --> 00:13:19.060\nHow's it made?\n\n239\n00:13:19.060 --> 00:13:20.680\nHow's it manufactured?\n\n240\n00:13:20.680 --> 00:13:23.320\nSo, we don't think of animals\nbeing manufactured, but\n\n241\n00:13:23.320 --> 00:13:26.589\nif this was like a shoe,\nhow's a shoe manufactured?\n\n242\n00:13:27.980 --> 00:13:31.026\nAnd what's interesting is\ninside of this constructor,\n\n243\n00:13:31.026 --> 00:13:35.033\nit's gonna be exactly the same thing\nthat is in our constructor function.\n\n244\n00:13:40.724 --> 00:13:42.089\nI'm getting a little carried away here,\nMike.\n\n245\n00:13:42.089 --> 00:13:43.465\nI'm typing up a storm.\n\n246\n00:13:43.465 --> 00:13:45.825\n&gt;&gt; Yeah, I'm telling you, and\ntyping well, I might add.\n\n247\n00:13:45.825 --> 00:13:47.248\n&gt;&gt; Yeah, yeah, it's crazy.\n\n248\n00:13:47.248 --> 00:13:51.055\nI was kinda scared my keyboard was\ngonna catch on fire there for a moment.\n\n249\n00:13:51.055 --> 00:13:54.280\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm being facetious.\n\n250\n00:13:56.190 --> 00:14:00.950\nSo now, but notice,\nI'm not coming outside of the class.\n\n251\n00:14:00.950 --> 00:14:04.970\nI want to define methods that this animal\ncan do, things that this animal can do.\n\n252\n00:14:07.420 --> 00:14:11.159\nAlso notice, unlike objects,\nthere is no comma there.\n\n253\n00:14:12.200 --> 00:14:14.170\nComma will wreck your life.\n\n254\n00:14:14.170 --> 00:14:14.670\nDon't do it.\n\n255\n00:14:16.110 --> 00:14:19.930\nBut, I can eat, I can move,\n\n256\n00:14:21.550 --> 00:14:25.360\nand I can speak as an animal.\n\n257\n00:14:25.360 --> 00:14:27.410\nNotice, no commas.\n\n258\n00:14:27.410 --> 00:14:29.700\nJust the name of the method itself.\n\n259\n00:14:31.370 --> 00:14:34.493\nNow, eating requires food.\n\n260\n00:14:36.489 --> 00:14:37.650\nMoving requires distance.\n\n261\n00:14:37.650 --> 00:14:42.679\nAnd speaking requires nothing.\n\n262\n00:14:42.679 --> 00:14:46.263\nLet's go ahead and\nfill these in, this.belly.push.\n\n263\n00:14:46.263 --> 00:14:48.665\nFood.\n\n264\n00:14:50.256 --> 00:14:53.172\nThis.position.\n[SOUND] Well, we jinxed it Mike,\n\n265\n00:14:53.172 --> 00:14:54.451\nwe jinxed it.\n\n266\n00:14:54.451 --> 00:14:59.883\n&gt;&gt; [LAUGH]\n&gt;&gt; And then, speak is this, nope.\n\n267\n00:14:59.883 --> 00:15:03.793\n&gt;&gt; That's it.\n\n268\n00:15:03.793 --> 00:15:04.660\n&gt;&gt; Console.log('Animal Speaking).\n\n269\n00:15:04.660 --> 00:15:07.540\n&gt;&gt; It's interesting Justin, because\nit really does look exactly like your\n\n270\n00:15:07.540 --> 00:15:09.460\nconstructor function, you've taken those.\n\n271\n00:15:09.460 --> 00:15:14.350\nThe methods are outside of the function\nanimal that we did earlier, so\n\n272\n00:15:14.350 --> 00:15:16.880\nit's almost like you've taken\neverything we did earlier and\n\n273\n00:15:16.880 --> 00:15:20.280\njust encapsulated that\nwhole process in a class.\n\n274\n00:15:20.280 --> 00:15:21.724\n&gt;&gt; That's exactly what we've done.\n\n275\n00:15:21.724 --> 00:15:26.717\nAnd Mike, it makes me really happy\nthat you've seen that distinction.\n\n276\n00:15:26.717 --> 00:15:30.413\nSo effectively,\nI have rewritten this prototype,\n\n277\n00:15:30.413 --> 00:15:34.780\nthis constructor and\nprototype extension, as a class.\n\n278\n00:15:34.780 --> 00:15:38.610\nAnd to prove that,\nI have not changed this at all.\n\n279\n00:15:38.610 --> 00:15:41.430\nLet's see what has changed.\n\n280\n00:15:41.430 --> 00:15:46.330\nAnd in fact, absolutely nothing\nhas changed, except notice.\n\n281\n00:15:46.330 --> 00:15:47.750\nThis was a little bit different.\n\n282\n00:15:47.750 --> 00:15:49.010\nThis actually said animal.\n\n283\n00:15:49.010 --> 00:15:51.418\nThe constructor matched\nup a little differently.\n\n284\n00:15:51.418 --> 00:15:54.651\nThere are some small\nimplementation details,\n\n285\n00:15:54.651 --> 00:15:59.191\ncuz we are now using a class, but\nfrom a macroscopic point of view.\n\n286\n00:15:59.191 --> 00:16:02.709\nThey are pretty much exactly the same.\n\n287\n00:16:02.709 --> 00:16:05.047\nSo I have eat, move, and speak.\n\n288\n00:16:05.047 --> 00:16:10.059\nAnd just to show you,\nif the cat eats tuna,\n\n289\n00:16:10.059 --> 00:16:16.480\nI hear cats love tuna,\nI'm not entirely sure.\n\n290\n00:16:16.480 --> 00:16:23.290\nSo if I refresh, and I look inside the\nbelly, this cat now has tuna in the belly.\n\n291\n00:16:23.290 --> 00:16:24.210\n&gt;&gt; That's a happy cat.\n\n292\n00:16:24.210 --> 00:16:25.210\n&gt;&gt; It is a happy cat.\n\n293\n00:16:25.210 --> 00:16:30.099\nAnd likewise, if the dog moves 10 feet,\n\n294\n00:16:30.099 --> 00:16:34.940\nor 10 miles, or\nwhatever unit you want to pin to that,\n\n295\n00:16:34.940 --> 00:16:39.090\nthen my position has changed from\nits original constructed value.\n\n296\n00:16:39.090 --> 00:16:44.864\nSo now I have this class that emulates\nthis constructor function and\n\n297\n00:16:44.864 --> 00:16:49.127\nemulates all of the prototype\nmethods within it.\n\n298\n00:16:49.127 --> 00:16:55.855\nSo that's how we start changing\nto the class-based architecture.\n\n299\n00:16:55.855 --> 00:17:01.433\nDo keep in mind, behind the scenes,\nthis is still very much that prototype.\n\n300\n00:17:01.433 --> 00:17:06.192\nThis is what is called syntactic\nsugar just to help you realize,\n\n301\n00:17:06.192 --> 00:17:08.089\nthese are kind of the same.\n\n302\n00:17:08.089 --> 00:17:12.014\nAnd I do like it for that fact, because it\nhas brought clarity to me about how these\n\n303\n00:17:12.014 --> 00:17:14.060\ninner workings are mapped to each other.\n\n304\n00:17:14.060 --> 00:17:17.920\nI'm like,\nhow are classes going to fit into this?\n\n305\n00:17:17.920 --> 00:17:22.280\nAnd in fact you can just emulate the class\npattern with the prototype pattern\n\n306\n00:17:23.360 --> 00:17:26.450\nfrom JavaScript that already\nexists within JavaScript.\n\n307\n00:17:27.950 --> 00:17:30.920\nNow, there's a couple of new\nthings within classes, though.\n\n308\n00:17:30.920 --> 00:17:33.290\nWe can have what\nare called static methods.\n\n309\n00:17:33.290 --> 00:17:37.810\nSo those are no longer linked to\ninstances like the cat or dog, but\n\n310\n00:17:37.810 --> 00:17:39.770\ninstead to the class.\n\n311\n00:17:39.770 --> 00:17:44.582\nAnd I can use those as a way of comparing,\nbut also bundling functions together.\n\n312\n00:17:44.582 --> 00:17:48.829\nThey're very much like the static methods\nthat you would find in other languages\n\n313\n00:17:48.829 --> 00:17:51.951\nsuch as Java, where they're now\nbound to the class name but\n\n314\n00:17:51.951 --> 00:17:53.940\nnot individual instances.\n\n315\n00:17:53.940 --> 00:17:55.201\nI'm talking, kind of hand wavy,\n\n316\n00:17:55.201 --> 00:17:57.599\nI think it's easier to see that\nin a legitimate implementation.\n\n317\n00:17:57.599 --> 00:18:00.986\n&gt;&gt; [LAUGH]\n&gt;&gt; So let's go ahead and\n\n318\n00:18:00.986 --> 00:18:05.380\ntake a look at how these\nstatic methods would work.\n\n319\n00:18:05.380 --> 00:18:10.140\nI know that well,\nif I was unable to look at an animal,\n\n320\n00:18:10.140 --> 00:18:15.150\nthere are ways that I could tell if\nthe animal was exactly the same, right,\n\n321\n00:18:15.150 --> 00:18:18.580\nor a way to compare said animal.\n\n322\n00:18:18.580 --> 00:18:22.119\nIf someone was like, does that cat or\nthat dog, which one weighs more?\n\n323\n00:18:22.119 --> 00:18:25.964\nI would go, well, probably the dog\nby sight, but if I couldn't,\n\n324\n00:18:25.964 --> 00:18:27.693\nI could compare properties.\n\n325\n00:18:27.693 --> 00:18:29.705\nNamely, I could compare their weight.\n\n326\n00:18:29.705 --> 00:18:33.692\nIf someone handed me a sheet of\npaper with vet records and said,\n\n327\n00:18:33.692 --> 00:18:36.260\nwhich one of these animals weighs more?\n\n328\n00:18:36.260 --> 00:18:37.782\nYou go, well, obviously that one.\n\n329\n00:18:37.782 --> 00:18:41.320\nBut the computer only\nknows what you tell it.\n\n330\n00:18:41.320 --> 00:18:44.160\nSo you have to be very,\nvery careful there.\n\n331\n00:18:44.160 --> 00:18:47.320\nSo let's go ahead and\nmake it what is called a static method.\n\n332\n00:18:47.320 --> 00:18:49.680\nNow, this is new to the class syntax.\n\n333\n00:18:49.680 --> 00:18:52.530\nI've actually tried to play around and see\nif I can get this to work in other places.\n\n334\n00:18:53.640 --> 00:18:56.890\nThere might be other places you can\nget the keyword static to work.\n\n335\n00:18:56.890 --> 00:18:58.980\nI haven't found them yet,\nand I've been searching.\n\n336\n00:19:00.370 --> 00:19:03.292\nSo I just want to see.\n\n337\n00:19:05.327 --> 00:19:10.277\nWhich is heavier, so\nit is a static method called isHeavier.\n\n338\n00:19:10.277 --> 00:19:13.679\nAnd first, second.\n\n339\n00:19:13.679 --> 00:19:16.640\nAnd I can think of this as,\nin my left hand, I have a cat,\n\n340\n00:19:16.640 --> 00:19:18.165\nin my right hand I have a dog.\n\n341\n00:19:18.165 --> 00:19:22.629\nAnd if I'm holding a 100 pound dog in my\nright hand, then I'm incredibly strong.\n\n342\n00:19:22.629 --> 00:19:25.672\n&gt;&gt; [LAUGH]\n&gt;&gt; So be very careful, just keep that,\n\n343\n00:19:25.672 --> 00:19:29.635\nyou're comparing kind of like\nthe scales that you would see.\n\n344\n00:19:29.635 --> 00:19:35.280\nSo, and all I want to return\n\n345\n00:19:35.280 --> 00:19:40.437\nis first.weight is less\n\n346\n00:19:40.437 --> 00:19:45.357\nthan second.weight.\n\n347\n00:19:45.357 --> 00:19:50.020\nBecause effectively, this method,\nthis static method is asking a question.\n\n348\n00:19:50.020 --> 00:19:52.870\nIs the first one heavier\nthan the second one?\n\n349\n00:19:52.870 --> 00:19:53.940\nSo that's how I read that.\n\n350\n00:19:53.940 --> 00:19:58.300\nI rearranged these so,\nis first heavier then second?\n\n351\n00:19:58.300 --> 00:20:00.704\nSo let's see how we\nwould actually use this.\n\n352\n00:20:00.704 --> 00:20:04.787\nAnd again, I have instances,\nthese are actual objects,\n\n353\n00:20:04.787 --> 00:20:07.634\ninstantiations, of the Animal class.\n\n354\n00:20:07.634 --> 00:20:11.098\nThis is not how I would\nuse the static method.\n\n355\n00:20:11.098 --> 00:20:18.247\nI would instead say Animal,\nlet's create a var, or\n\n356\n00:20:18.247 --> 00:20:23.456\nexcuse me, a const, isCatHeavier.\n\n357\n00:20:23.456 --> 00:20:30.772\nAnd that would be Animal.isHeavier and\nthen cat, dog.\n\n358\n00:20:30.772 --> 00:20:35.763\nSo, I'm passing an Animal class,\nor, excuse me, objects instantiated\n\n359\n00:20:35.763 --> 00:20:40.379\nfrom the Animal class to this method\nthat is part of the Animal class.\n\n360\n00:20:40.379 --> 00:20:43.420\nNow, that's important,\nthat's why I like this static method.\n\n361\n00:20:43.420 --> 00:20:46.210\nBecause now I know that\nI am comparing animals.\n\n362\n00:20:47.238 --> 00:20:51.120\nAlso, if I'm passing things that\ndo not fulfill the Animal kind\n\n363\n00:20:51.120 --> 00:20:54.460\nof set of attributes,\nthings aren't gonna quite work.\n\n364\n00:20:54.460 --> 00:20:56.580\nSo I'm now getting into the, okay,\n\n365\n00:20:56.580 --> 00:20:59.070\nI should be comparing animals\nusing the Animal class.\n\n366\n00:20:59.070 --> 00:21:02.467\nThey have to be animals for\nme to make those comparisons.\n\n367\n00:21:02.467 --> 00:21:05.150\nSo are they heavy,\n\n368\n00:21:05.150 --> 00:21:10.540\nis the cat heavier and isCatHeavier?\n\n369\n00:21:10.540 --> 00:21:12.380\nJust so we can get some readability here.\n\n370\n00:21:15.270 --> 00:21:19.460\nAnd let's take a look, isCatHeavier, true.\n\n371\n00:21:19.460 --> 00:21:20.833\nI got a runtime error.\n\n372\n00:21:20.833 --> 00:21:24.502\n&gt;&gt; I think it's that greater than\nsymbol needs to be the other way.\n\n373\n00:21:24.502 --> 00:21:28.604\nfirst.weight is greater-\n&gt;&gt; Yeah, there we go, there we go.\n\n374\n00:21:28.604 --> 00:21:31.810\nYeah, logic errors,\nthey'll get you every time.\n\n375\n00:21:31.810 --> 00:21:34.450\nBut this is why I liked\nwriting these methods with\n\n376\n00:21:34.450 --> 00:21:38.110\nsomething that I can reason\nabout as a concrete example.\n\n377\n00:21:38.110 --> 00:21:42.450\nBecause otherwise I'm like,\nI guess that works, I don't know.\n\n378\n00:21:42.450 --> 00:21:46.030\nBut if a 10 pound cat is\nheavier than a 100 pound dog,\n\n379\n00:21:46.030 --> 00:21:49.880\nyou go, I don't think your scale's right,\nI don't think your scale's right.\n\n380\n00:21:49.880 --> 00:21:54.030\nSo now we have it, now we have it.\n\n381\n00:21:54.030 --> 00:21:56.110\nCommon, common runtime error,\ngotta be careful.\n\n382\n00:21:57.180 --> 00:21:59.310\nBut there are my static methods.\n\n383\n00:21:59.310 --> 00:22:01.960\nNow, I could create a great\ndeal of static methods there.\n\n384\n00:22:03.680 --> 00:22:07.750\nBut I mean,\nyou're just recreating the same thing.\n\n385\n00:22:07.750 --> 00:22:12.272\nIf you wanted kind of an extension,\nisTaller.\n\n386\n00:22:17.761 --> 00:22:22.546\nAnd then I could just return\nfirst.height is greater, is greater,\n\n387\n00:22:22.546 --> 00:22:24.698\nI got to redeem myself, Mike.\n\n388\n00:22:24.698 --> 00:22:25.899\n&gt;&gt; You're doing good.\n\n389\n00:22:25.899 --> 00:22:30.323\n&gt;&gt; Thank you,\nyour vote of confidence makes me happy.\n\n390\n00:22:30.323 --> 00:22:36.972\nisCatTaller, and\nthen change this to isTaller.\n\n391\n00:22:39.747 --> 00:22:40.936\nTaller.\n\n392\n00:22:40.936 --> 00:22:43.031\nJust doing some replacements here.\n\n393\n00:22:46.607 --> 00:22:50.490\nLet's see if our runtime\nerror is not there.\n\n394\n00:22:50.490 --> 00:22:52.460\nAnd no, the cat is not taller,\n\n395\n00:22:52.460 --> 00:22:56.120\nbecause the cat is only 12 inches at\nthe shoulder whereas the dog is 30 inches.\n\n396\n00:22:56.120 --> 00:23:01.030\nSo I can now bundle up all of these\nfunctions that I'm using to compare two\n\n397\n00:23:01.030 --> 00:23:02.660\nanimals, right.\n\n398\n00:23:02.660 --> 00:23:06.050\nIndividual animal objects on Animal class,\n\n399\n00:23:06.050 --> 00:23:10.120\nand that helps me reason about,\nwell, what is this supposed to do?\n\n400\n00:23:10.120 --> 00:23:12.740\nLike, what am I comparing?\n\n401\n00:23:12.740 --> 00:23:15.840\nAnd just to show you,\nI'm gonna create a third object, and\n\n402\n00:23:15.840 --> 00:23:18.265\nI'm gonna give it a name,\nwhich is a bad name.\n\n403\n00:23:18.265 --> 00:23:22.123\nLet's call it a squirrel.\n\n404\n00:23:22.123 --> 00:23:23.997\nA squirrel should be an animal.\n\n405\n00:23:26.400 --> 00:23:28.982\nBut I'm just gonna say it's a new object,\n\n406\n00:23:28.982 --> 00:23:31.800\nit is not instantiated\nfrom the Animal class.\n\n407\n00:23:31.800 --> 00:23:35.950\nSo what's gonna happen\nif I use these methods?\n\n408\n00:23:35.950 --> 00:23:37.866\nThat's a great question.\n\n409\n00:23:37.866 --> 00:23:39.948\nisSquirrel.\n\n410\n00:23:42.719 --> 00:23:45.038\nMaybe I should have picked\nan animal with a shorter name.\n\n411\n00:23:45.038 --> 00:23:52.436\n&gt;&gt; [LAUGH] So isHeavier,\nis the squirrel heavier than the dog?\n\n412\n00:23:52.436 --> 00:23:54.980\nAnd we know that it should not be.\n\n413\n00:23:54.980 --> 00:24:00.364\nHowever, what's important is\nthese were both new animals.\n\n414\n00:24:00.364 --> 00:24:02.305\nThis was just a new object.\n\n415\n00:24:02.305 --> 00:24:05.997\nI'm using a static method\non the animal class.\n\n416\n00:24:05.997 --> 00:24:08.640\nI wonder if this is gonna work?\n\n417\n00:24:08.640 --> 00:24:10.390\nWell, we should probably print it out and\nsee.\n\n418\n00:24:12.480 --> 00:24:17.160\nSo, here we go, is scroll heavier?\n\n419\n00:24:17.160 --> 00:24:21.289\nAnd if we refresh, false.\n\n420\n00:24:22.500 --> 00:24:24.590\nOkay, well that make sense.\n\n421\n00:24:24.590 --> 00:24:27.660\nBut, should that always work?\n\n422\n00:24:27.660 --> 00:24:29.010\nIs that always gonna work?\n\n423\n00:24:30.190 --> 00:24:30.760\nI don't know.\n\n424\n00:24:30.760 --> 00:24:35.120\nLet's see if we can break it and this is\nan important concept that you should know.\n\n425\n00:24:36.410 --> 00:24:38.647\nLet's actually just console log.\n\n426\n00:24:44.983 --> 00:24:48.530\nConsole log first.weight.\n\n427\n00:24:51.151 --> 00:24:55.500\nNotice it says undefined, okay?\n\n428\n00:24:55.500 --> 00:24:56.430\nWell, that's kinda weird.\n\n429\n00:24:56.430 --> 00:24:58.390\nLet me make sure I'm.\n\n430\n00:24:59.700 --> 00:25:02.150\nHow is undefined great than a number?\n\n431\n00:25:02.150 --> 00:25:03.620\nAll right.\n\n432\n00:25:03.620 --> 00:25:05.080\nSo that doesn't make any sense.\n\n433\n00:25:05.080 --> 00:25:08.900\nAnd in fact, that's where those\nweird typings come into play.\n\n434\n00:25:08.900 --> 00:25:10.270\nIs undefined greater than 100?\n\n435\n00:25:10.270 --> 00:25:16.590\nNo, and now you have a really horrible\nbug that it's hard to track down.\n\n436\n00:25:16.590 --> 00:25:20.214\nAnd let's change the order of these.\n\n437\n00:25:21.858 --> 00:25:25.510\nJust to make sure we're getting\nthe same thought process.\n\n438\n00:25:25.510 --> 00:25:28.010\nNow it's the same.\n\n439\n00:25:28.010 --> 00:25:29.230\nIt also returns false.\n\n440\n00:25:29.230 --> 00:25:30.060\nHm.\n\n441\n00:25:30.060 --> 00:25:31.040\nHm.\n\n442\n00:25:31.040 --> 00:25:32.310\nSo it's false both times,\n\n443\n00:25:32.310 --> 00:25:36.030\nand that's because undefined is\nnot a valid comparable type.\n\n444\n00:25:36.030 --> 00:25:39.010\nIt's not a number that\nrepresents a weight.\n\n445\n00:25:39.010 --> 00:25:41.330\nBut if you're not careful.\n\n446\n00:25:41.330 --> 00:25:44.030\nIf you're not obeying by\nwhat's called this interface.\n\n447\n00:25:45.050 --> 00:25:47.230\nI am comparing animals.\n\n448\n00:25:47.230 --> 00:25:49.820\nIf I have an animal object,\nI can compare them.\n\n449\n00:25:49.820 --> 00:25:51.790\nBut if I have a different object,\n\n450\n00:25:51.790 --> 00:25:57.420\nif they're not of animal like\ncharacteristics, I may get weird results.\n\n451\n00:25:57.420 --> 00:26:02.270\nAnd as we've just seen,\nanimal dot is heavier, since false for\n\n452\n00:26:02.270 --> 00:26:05.620\ndog is heavier than squirrel,\nand squirrel is heavier than dog.\n\n453\n00:26:05.620 --> 00:26:06.940\nAnd that's really weird.\n\n454\n00:26:06.940 --> 00:26:08.330\n&gt;&gt; Yeah, something's not right there.\n\n455\n00:26:08.330 --> 00:26:10.810\n&gt;&gt; Yeah, so\nyou see these unexpected outputs,\n\n456\n00:26:10.810 --> 00:26:15.410\nyou should go,\nthat is not what I anticipated.\n\n457\n00:26:15.410 --> 00:26:17.780\nAnd in fact you have to be really careful.\n\n458\n00:26:17.780 --> 00:26:20.060\nBut that's what I like\nabout the static methods,\n\n459\n00:26:20.060 --> 00:26:23.110\nis they help you enforce\nthat thought process.\n\n460\n00:26:23.110 --> 00:26:27.500\nI should be using the animal\nstatic methods on animal types or\n\n461\n00:26:27.500 --> 00:26:29.330\nof appropriate types.\n\n462\n00:26:29.330 --> 00:26:35.440\nIf I know animal.changeSpeak\nis taking a function and\n\n463\n00:26:35.440 --> 00:26:40.440\ndoing some changes then as long as\nit has a function then I'm good.\n\n464\n00:26:40.440 --> 00:26:41.240\nSo I'm obeying those.\n\n465\n00:26:43.110 --> 00:26:46.890\nSo you know Mike we have a lot\nmore to cover in classes, but\n\n466\n00:26:46.890 --> 00:26:48.446\nI just don't know if we have enough time.\n\n467\n00:26:48.446 --> 00:26:51.470\n&gt;&gt; All right Justin sounds like a plan\nwe'll stop there we'll come back for\n\n468\n00:26:51.470 --> 00:26:54.910\nthe part two on classes\ncome to JavaScript.\n\n469\n00:26:54.910 --> 00:26:56.980\nSo hope everybody out there\nenjoyed watching this one.\n\n470\n00:26:56.980 --> 00:26:59.587\nSigning off for\nIT ProTV I've been your host Mike Rodrick.\n\n471\n00:26:59.587 --> 00:27:01.905\nAnd I'm Justin Dennison\n&gt;&gt; And we'll see you next time.\n\n472\n00:27:01.905 --> 00:27:09.541\n[MUSIC]\n\n473\n00:27:09.541 --> 00:27:11.560\n&gt;&gt; Thank you for watching ITProTV\n\n",
          "vimeoId": "204911370"
        },
        {
          "description": "In this episode, Justin and Mike continue their look at classes in JavaScript. They look at using static methods, and calling them from other static methods and instance methods. They also show how to to override the standard behavior in the prototype.",
          "length": "1150",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-2-classes_come_to_javascript_pt.2-020717-PGM.00_18_56_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-2-classes_come_to_javascript_pt.2-020717-PGM.00_18_56_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-3-1-2-classes_come_to_javascript_pt.2-020717-PGM.00_18_56_16.Still001-sm.jpg",
          "title": "Classes Come to JavaScript Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.220 --> 00:00:02.988\nWelcome to IT Pro TV I'm\nyour host Don Pizzet.\n\n2\n00:00:02.988 --> 00:00:06.237\n[CROSSTALK]\n\n3\n00:00:06.237 --> 00:00:08.427\n[MUSIC]\n\n4\n00:00:08.427 --> 00:00:10.460\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.570 --> 00:00:15.710\n&gt;&gt; Hello welcome to another\nexciting episode here at ITProTV.\n\n6\n00:00:15.710 --> 00:00:20.403\nI'm your host Mike Rodrick and\ntoday we're doing our new features in ES6,\n\n7\n00:00:20.403 --> 00:00:24.030\nand in this episode we're actually\ncontinuing our thought process\n\n8\n00:00:24.030 --> 00:00:26.460\non classes come to JavaScript.\n\n9\n00:00:26.460 --> 00:00:28.500\nSeen some really good demonstrations and\n\n10\n00:00:28.500 --> 00:00:32.070\nexamples already from Justin but\nhe's got a little more to show us.\n\n11\n00:00:32.070 --> 00:00:33.470\nSo welcome back Justin.\n\n12\n00:00:33.470 --> 00:00:34.640\n&gt;&gt; Thanks for having me back.\n\n13\n00:00:34.640 --> 00:00:37.320\nYeah, we haven't quite\nfinished up classes,\n\n14\n00:00:37.320 --> 00:00:39.390\nwe need a few more tools\nin our repertoire.\n\n15\n00:00:40.460 --> 00:00:42.140\nThat's a hard word to say Mike.\n\n16\n00:00:42.140 --> 00:00:42.690\n&gt;&gt; It is.\n\n17\n00:00:42.690 --> 00:00:43.830\nIt sounds so fancy.\n\n18\n00:00:43.830 --> 00:00:44.730\n&gt;&gt; Yeah, it does, it does.\n\n19\n00:00:44.730 --> 00:00:45.480\n&gt;&gt; Classy, even.\n\n20\n00:00:45.480 --> 00:00:46.630\n&gt;&gt; Yeah, classy.\n\n21\n00:00:46.630 --> 00:00:47.920\nSee what we did there?\n\n22\n00:00:47.920 --> 00:00:51.990\nSo, we need a few more tools in\norder to fully utilize classes.\n\n23\n00:00:51.990 --> 00:00:56.290\nNow, you may find that there are some\nnuance differences that you'll see, but\n\n24\n00:00:56.290 --> 00:01:01.950\nthis is a great high level overview, and\ngives you a wonderful starting place and\n\n25\n00:01:01.950 --> 00:01:06.400\na little more than just a start for\nES6 classes.\n\n26\n00:01:06.400 --> 00:01:08.510\nSo if we remind ourselves.\n\n27\n00:01:08.510 --> 00:01:11.090\nWe started by implementing a class for\nanimal.\n\n28\n00:01:11.090 --> 00:01:14.350\nNow, I've had that back up on my screen.\n\n29\n00:01:14.350 --> 00:01:17.680\nWe need to change that because we\nhave some things that are going on\n\n30\n00:01:17.680 --> 00:01:22.000\nthat are a little weird, and as a matter\nof fact, I'm wanna comment it out.\n\n31\n00:01:22.000 --> 00:01:26.760\nLeave this available, just as a reminder,\njust in case we need a reference here, and\n\n32\n00:01:26.760 --> 00:01:29.720\nI'm gonna comment out squirrel,\nreal quick.\n\n33\n00:01:29.720 --> 00:01:31.590\nSo, I have a cat and a dog,\nthey're both an animal,\n\n34\n00:01:31.590 --> 00:01:35.407\nbut, let's see what happens,when,\n\n35\n00:01:35.407 --> 00:01:40.300\ncat speaks and dog speaks.\n\n36\n00:01:40.300 --> 00:01:43.080\nSo if I refresh, animal speaking,\nanimal speaking.\n\n37\n00:01:43.080 --> 00:01:47.040\nWell that's kind of weird,\nnow catching dogs they might eat the same,\n\n38\n00:01:47.040 --> 00:01:52.790\nthey may move the same, but they both\ndefinitely do not say animal speaking.\n\n39\n00:01:52.790 --> 00:01:59.580\nSo this is where we start into this\nwell add this base class of animal.\n\n40\n00:01:59.580 --> 00:02:02.505\nIt dictates all these\nproperties that I need for\n\n41\n00:02:02.505 --> 00:02:06.500\na basic level of understanding\nof what an animal is but\n\n42\n00:02:06.500 --> 00:02:12.660\nI need specific changes or\noverrides for other animals, right.\n\n43\n00:02:12.660 --> 00:02:14.450\nA cat, what would a cat say?\n\n44\n00:02:14.450 --> 00:02:17.210\nMeow and a dog would say well\n\n45\n00:02:17.210 --> 00:02:19.440\npeople are a little on the edge about-\n&gt;&gt; [LAUGH]\n\n46\n00:02:19.440 --> 00:02:21.840\n&gt;&gt; But we're gonna go with woof, or roof,\n\n47\n00:02:21.840 --> 00:02:25.090\nor any noise you want it to make.\n\n48\n00:02:25.090 --> 00:02:28.680\nBut we can agree that the speak\nshould be a little bit different for\n\n49\n00:02:28.680 --> 00:02:29.870\na cat and a dog.\n\n50\n00:02:31.340 --> 00:02:37.170\nSo in most other class based systems what\nwe'll find is there is an ability to\n\n51\n00:02:37.170 --> 00:02:42.450\nextend a class, and that means take\na base class, change it a little bit,\n\n52\n00:02:42.450 --> 00:02:46.970\nexpand it a little bit, and\nnow we have a specific implementation.\n\n53\n00:02:46.970 --> 00:02:50.740\nSo let's see how that works for a cat and\na dog, because I want a specific class for\n\n54\n00:02:50.740 --> 00:02:57.220\na cat, a specific class for a dog,\nand those are gonna be also wonderful.\n\n55\n00:02:57.220 --> 00:03:02.190\nNow I'm using this extends keyword, and\nnotice it turns purple in my editor, and\n\n56\n00:03:02.190 --> 00:03:07.590\nextends is going to take this\ninitial class of dog, and\n\n57\n00:03:07.590 --> 00:03:10.940\nthen build on top of the class animal.\n\n58\n00:03:10.940 --> 00:03:16.700\nSo, I am extending out animal and possibly\nchanging some of the default behavior.\n\n59\n00:03:16.700 --> 00:03:19.350\nAdditionally, I'm going to\ndo the same thing with cat.\n\n60\n00:03:19.350 --> 00:03:22.170\nSo, dog and cat both extends animal.\n\n61\n00:03:23.360 --> 00:03:26.500\nNow, something to keep in mind,\nwhen you see extends,\n\n62\n00:03:26.500 --> 00:03:32.290\nthis establishes what is called\nan is-a relationship, or an is-an.\n\n63\n00:03:32.290 --> 00:03:36.751\nSo, you can think a Dog is-an Animal.\n\n64\n00:03:36.751 --> 00:03:42.038\nLikewise, A Cat\n\n65\n00:03:42.038 --> 00:03:47.278\nis-an Animal And what\n\n66\n00:03:47.278 --> 00:03:52.230\nthat means is that anything that an animal\ncan do, a dog and a cat can do, okay?\n\n67\n00:03:52.230 --> 00:03:55.730\nSo we're, we're keeping that interface but\nit is possible that a dog and\n\n68\n00:03:55.730 --> 00:04:00.390\na cat can do a little more than an animal\nand that's specific to a dog or a cat.\n\n69\n00:04:01.770 --> 00:04:06.500\nWe're actually going to leave these here\nand I'm just gonna change, notice I just\n\n70\n00:04:06.500 --> 00:04:09.800\nhave empty classes, I haven't actually\ndone anything other than write extends.\n\n71\n00:04:11.060 --> 00:04:16.190\nBut I'm gonna change const cat to new Cat,\nand const dog to new Dog, and\n\n72\n00:04:16.190 --> 00:04:20.640\nlet's see how that changes\nour console output.\n\n73\n00:04:20.640 --> 00:04:26.160\nSo let's output cat and dog, not capital,\nwow, gotta take that caps lock off,\n\n74\n00:04:28.230 --> 00:04:32.720\nand dog, and we'll see that it\nstill says animal speaking.\n\n75\n00:04:32.720 --> 00:04:37.470\nThat's because it's using the method\nfrom animal in order to speak.\n\n76\n00:04:37.470 --> 00:04:42.050\nBut now, look instead of it saying\nanimal this is a cat object.\n\n77\n00:04:42.050 --> 00:04:47.780\nIt is a specific implementation and\nthis is a dog object however\n\n78\n00:04:47.780 --> 00:04:53.250\nif we look at the proto what is\nthis double underscore proto?\n\n79\n00:04:53.250 --> 00:04:54.380\nWhere is it derived from?\n\n80\n00:04:54.380 --> 00:04:58.450\nIt is actually derived\nfrom the animal class so\n\n81\n00:04:58.450 --> 00:05:03.280\nif we look at prototype there is\nthe constructor but if we go and\n\n82\n00:05:03.280 --> 00:05:07.060\nlook at the prototype of that,\nI'm actually looking at animal.\n\n83\n00:05:08.350 --> 00:05:10.420\nThen I have eat, move, and speak.\n\n84\n00:05:10.420 --> 00:05:15.490\nSo within my dunder proto, if I have\nanything on it's dunder proto, so\n\n85\n00:05:15.490 --> 00:05:21.420\ndouble underscore proto, then I can\nstill use those with the extend class,\n\n86\n00:05:21.420 --> 00:05:23.480\nbut not I have a level of specificity.\n\n87\n00:05:23.480 --> 00:05:26.030\nBut I also have the ability\nto make a switch,\n\n88\n00:05:26.030 --> 00:05:31.140\nto change up some things, as well as\nduring construction or just methods.\n\n89\n00:05:31.140 --> 00:05:34.920\nSo we're gonna look at dog and cat and\nsee, we know they should speak\n\n90\n00:05:34.920 --> 00:05:38.470\ndifferently, but right now,\nthey're both just saying animal speaking.\n\n91\n00:05:38.470 --> 00:05:43.540\nAgain, if your cat says that, you should\nprobably figure out how to get on TV or\n\n92\n00:05:43.540 --> 00:05:46.250\nsomething, cuz that would be amazing.\n\n93\n00:05:46.250 --> 00:05:49.108\nAs well as-\n&gt;&gt; Get your doctor to change your meds.\n\n94\n00:05:49.108 --> 00:05:49.618\n&gt;&gt; Yeah, yeah,-\n&gt;&gt; [LAUGH]\n\n95\n00:05:49.618 --> 00:05:52.240\n&gt;&gt; Or be like, I should probably not tell\n\n96\n00:05:52.240 --> 00:05:57.400\nanybody that my cat's doing that so within\ndog, what we're actually just gonna do.\n\n97\n00:05:57.400 --> 00:06:02.640\nLet's say speak and within cat,\nwe're gonna do the same thing.\n\n98\n00:06:02.640 --> 00:06:08.290\nNotice this method name matches\nthis method name exactly.\n\n99\n00:06:08.290 --> 00:06:13.500\nThe signatures the same, but what this\nis gonna allow me to do is implement\n\n100\n00:06:13.500 --> 00:06:19.130\nspeak for a dog instead of just\nusing the generic animal speak.\n\n101\n00:06:19.130 --> 00:06:20.050\nSo what does a dog say?\n\n102\n00:06:21.130 --> 00:06:22.910\nAs I said, we're gonna go with Woof!\n\n103\n00:06:24.310 --> 00:06:28.232\nSometimes it's a how,\nsometimes it's a weird yap, yap, yap, but\n\n104\n00:06:28.232 --> 00:06:31.690\nwe're just gonna just go with woof,\njust bear with me here.\n\n105\n00:06:31.690 --> 00:06:32.479\nAnd then for cat.\n\n106\n00:06:35.080 --> 00:06:37.950\nWe're gonna say meow.\n\n107\n00:06:37.950 --> 00:06:38.500\nIs that?\n\n108\n00:06:38.500 --> 00:06:40.960\nYeah, I spelled that right.\n\n109\n00:06:40.960 --> 00:06:42.510\nSometimes meow looks weird to me.\n\n110\n00:06:42.510 --> 00:06:43.240\n&gt;&gt; It does me.\n\n111\n00:06:43.240 --> 00:06:46.779\n&gt;&gt; Yeah, so-\n&gt;&gt; So and this gonna cross the conflict,\n\n112\n00:06:46.779 --> 00:06:49.677\nbecause we've got this defined twice now?\n\n113\n00:06:49.677 --> 00:06:51.729\n&gt;&gt; Yeah, so it's weird, you would\nthink well which one is it gonna use?\n\n114\n00:06:51.729 --> 00:06:52.619\nHow's it gonna know?\n\n115\n00:06:52.619 --> 00:06:53.509\nWhat's gonna happen?\n\n116\n00:06:53.509 --> 00:06:56.181\n&gt;&gt; For both?\n&gt;&gt; Or we gonna run both, or and\n\n117\n00:06:56.181 --> 00:07:02.106\nthen you're going to analysis paralysis\nmy biggest push is try it and\n\n118\n00:07:02.106 --> 00:07:05.680\nsee, if it breaks just Ctrl+Z.\n\n119\n00:07:05.680 --> 00:07:07.435\nWell, I didn't mean for\nthat to rhyme but it did.\n\n120\n00:07:07.435 --> 00:07:10.973\n&gt;&gt; [LAUGH]\n&gt;&gt; Try it and see, if it breaks, Ctrl+Z.\n\n121\n00:07:10.973 --> 00:07:13.760\n&gt;&gt; [LAUGH]\n&gt;&gt; So, that was handy.\n\n122\n00:07:13.760 --> 00:07:15.490\nLet's see what happens.\n\n123\n00:07:15.490 --> 00:07:16.610\nMeow!\n\n124\n00:07:16.610 --> 00:07:18.220\nWoof!\nNow, I have a specific\n\n125\n00:07:18.220 --> 00:07:23.880\nspeak implementation for a cat and a dog\nand it's different from the animal one.\n\n126\n00:07:23.880 --> 00:07:26.310\nI have overridden the default behavior.\n\n127\n00:07:27.380 --> 00:07:30.920\nSo we can think of this in real life,\nanimals are like this.\n\n128\n00:07:32.050 --> 00:07:34.390\nA cheetah is way faster than me.\n\n129\n00:07:34.390 --> 00:07:36.410\nWe are both animals, though.\n\n130\n00:07:36.410 --> 00:07:41.480\nA cheetah's actually faster than\na house cat, but they're both cats.\n\n131\n00:07:41.480 --> 00:07:45.180\nSo that also leads us to another thing,\na cheetah is a cat,\n\n132\n00:07:45.180 --> 00:07:50.900\na house cat is a cat, should I just\nextend cat and get specific cats?\n\n133\n00:07:50.900 --> 00:07:53.050\nThat's where it gets a little iffy.\n\n134\n00:07:53.050 --> 00:07:56.100\nThe general rule of thumb that I've heard,\nthat I've seen,\n\n135\n00:07:56.100 --> 00:08:00.340\nthat I've used is you shouldn't\ngo crazy with this extends.\n\n136\n00:08:01.590 --> 00:08:04.340\nAnd that's because you can\nget into some trouble,\n\n137\n00:08:04.340 --> 00:08:08.940\ncuz now you've added an unreasonable\namount of complexity and\n\n138\n00:08:08.940 --> 00:08:13.300\nyou're like, all right, so\nwhich speak is this house cat gonna use?\n\n139\n00:08:13.300 --> 00:08:17.770\nBecause it was a cat, but\nthat was an animal, but\n\n140\n00:08:17.770 --> 00:08:21.890\nthen I did some crazy stuff and\nnow I have, I've broken things.\n\n141\n00:08:21.890 --> 00:08:25.900\nSo keep this within reason and\ntry to keep it as\n\n142\n00:08:25.900 --> 00:08:31.060\na general category that you can change the\nspecific implementation upon construction.\n\n143\n00:08:31.060 --> 00:08:36.000\n&gt;&gt; So would you end up leaving speak\nin the original animal class definition\n\n144\n00:08:36.000 --> 00:08:41.210\nto cover like, almost like a default or a\nfall back if you didn't extend say, horse?\n\n145\n00:08:41.210 --> 00:08:42.618\nIt still has a speak connected?\n\n146\n00:08:42.618 --> 00:08:46.540\n&gt;&gt; Exactly, so, if I want to make sure\nthat the animal interface right, and\n\n147\n00:08:46.540 --> 00:08:50.690\nwhat I mean by interface is,\nI'm expecting a set of methods and\n\n148\n00:08:50.690 --> 00:08:52.780\nproperties for an animal.\n\n149\n00:08:52.780 --> 00:08:55.670\nThey have to be there for\nme to consider it to be an animal.\n\n150\n00:08:55.670 --> 00:08:56.620\nThink of it this way.\n\n151\n00:08:56.620 --> 00:09:01.730\nIf I gave you a list of things that,\nor how something looks and\n\n152\n00:09:01.730 --> 00:09:06.230\nthe things that it can do, you can\nprobably come up with a category, right?\n\n153\n00:09:06.230 --> 00:09:11.125\nSo if it can eat, run, speak, and\nit has a weight, a height, and\n\n154\n00:09:11.125 --> 00:09:15.219\nmaybe a hair color you would go,\nwell that's a human,\n\n155\n00:09:15.219 --> 00:09:21.070\npossibly a cat, maybe an animal,\nthis is kind of that abstraction.\n\n156\n00:09:21.070 --> 00:09:22.140\nI'm gonna leave that there,\n\n157\n00:09:22.140 --> 00:09:26.550\nbecause I anticipate that all\nanimals should be able to speak, and\n\n158\n00:09:26.550 --> 00:09:31.280\nwhat if I do not have a specific\nimplementation for a horse, like you said?\n\n159\n00:09:31.280 --> 00:09:36.330\nSo then it would fall back to that animal\nspeak, instead of getting an error, right?\n\n160\n00:09:36.330 --> 00:09:41.490\nIf speak was not defined on the horse,\nand I took it out of animal and\n\n161\n00:09:41.490 --> 00:09:49.020\nI said horse.speak you would expect\nit do something not, well funny story\n\n162\n00:09:49.020 --> 00:09:53.560\nthat's not defined, or I'm broke, or\nit would be a really wierd behavior.\n\n163\n00:09:53.560 --> 00:09:59.370\nSo think of it as the base class, this\ncase animal, is defining your template.\n\n164\n00:09:59.370 --> 00:10:04.030\nWhat you think all of these general\ncategories should behave or look like,\n\n165\n00:10:05.580 --> 00:10:10.510\nand then the extended classes\nare specific implementations,\n\n166\n00:10:10.510 --> 00:10:14.050\nstill fairly broad within\ntheir respective domains.\n\n167\n00:10:14.050 --> 00:10:20.070\nNot like we didn't make house cat extends\nanimal or sheep dog extends animal.\n\n168\n00:10:20.070 --> 00:10:22.970\nWe just made cat and dog,\nand we can implement or\n\n169\n00:10:22.970 --> 00:10:28.630\nconstruct a great deal of cats and\ndogs from those respective classes.\n\n170\n00:10:28.630 --> 00:10:33.608\nBut we can all agree cats and\ndogs, they still have that meow,\n\n171\n00:10:33.608 --> 00:10:37.120\nwoof kind of behavior, even though it\ncan be a little bit different than that,\n\n172\n00:10:37.120 --> 00:10:39.810\nand there's a way to refactor to\nwhere that would be different.\n\n173\n00:10:41.280 --> 00:10:44.310\nNow I've shown you method overrides, but\n\n174\n00:10:44.310 --> 00:10:46.910\nwhat if I wanted to change\nhow it was constructed?\n\n175\n00:10:46.910 --> 00:10:52.620\nI still wanted to have an animal, all of\nthat eat, move, speak, I could copy and\n\n176\n00:10:52.620 --> 00:10:57.790\npaste, copy paste is bad, you can\npropagate errors and you shouldn't be,\n\n177\n00:10:57.790 --> 00:11:03.100\nif you find yourself copy pasting you\nshould probably rethink how your coding.\n\n178\n00:11:03.100 --> 00:11:06.220\nMaybe it's something you just wanna\ntry out real quick that's fine, but\n\n179\n00:11:06.220 --> 00:11:10.690\nin the broad spectrum of things,\nyou should be wary about copy and pasting.\n\n180\n00:11:10.690 --> 00:11:16.080\nBut let's say I had another animal that\nI wanted to name, maybe cats and dogs,\n\n181\n00:11:16.080 --> 00:11:20.750\nbut let's take a little bit\ndivergence from cat and dog.\n\n182\n00:11:22.260 --> 00:11:25.340\nAnd, instead,\nimplement a new class, squirrel,\n\n183\n00:11:25.340 --> 00:11:29.350\nthat is gonna be constructed a little bit\ndifferently, and notice that's specific,\n\n184\n00:11:29.350 --> 00:11:33.190\nthere are a bunch of squirrels, that's a\nlittle more specific than cat or dog, but\n\n185\n00:11:33.190 --> 00:11:35.780\nthis is for illustrative purposes only.\n\n186\n00:11:36.960 --> 00:11:38.750\nSo if we take a look at our editor here,\n\n187\n00:11:38.750 --> 00:11:44.480\nwe still have our cat and our dog,\nbut I really want that squirrel class.\n\n188\n00:11:44.480 --> 00:11:46.560\nI wanna be able to create squirrels but\n\n189\n00:11:46.560 --> 00:11:50.085\nI know several people who raise\nsquirrels and they name them.\n\n190\n00:11:50.085 --> 00:11:50.990\n&gt;&gt; Mm-hm.\n\n191\n00:11:50.990 --> 00:11:55.250\n&gt;&gt; And so I wanna be able to give\na specific squirrel instance a name.\n\n192\n00:11:55.250 --> 00:11:57.940\nWhen you construct a squirrel\ngive it a name, but\n\n193\n00:11:57.940 --> 00:11:59.690\nit still should have a weight and height.\n\n194\n00:11:59.690 --> 00:12:03.620\nA squirrel is an animal so\nI wanna maintain that relationship.\n\n195\n00:12:03.620 --> 00:12:08.422\nSo just as a reminder,\nI'm gonna say //Squirrel is-an Animal,\n\n196\n00:12:08.422 --> 00:12:13.345\nalso I like that little squirrel\nlike creature on the Ice Age movies.\n\n197\n00:12:13.345 --> 00:12:15.130\n&gt;&gt; [LAUGH]\n&gt;&gt; What is his name, Scratch?\n\n198\n00:12:15.130 --> 00:12:19.260\nYeah, he's hilarious he makes it fun for\nme.\n\n199\n00:12:19.260 --> 00:12:25.940\nSo if I say class Squirrel extends Animal.\n\n200\n00:12:25.940 --> 00:12:29.400\nNow we know that this will work\nright off hand based on our previous\n\n201\n00:12:29.400 --> 00:12:31.910\nexperience with cat and dog.\n\n202\n00:12:31.910 --> 00:12:36.170\nBut I want to keep speak, and move,\nI wanna keep all those the same, but\n\n203\n00:12:36.170 --> 00:12:40.020\nI now want to have a property for\na name and\n\n204\n00:12:40.020 --> 00:12:44.440\nI could say a constructor,\nand I'm gonna give it a name,\n\n205\n00:12:44.440 --> 00:12:49.696\na weight and a height, and\nthis is the first thing that people do.\n\n206\n00:12:49.696 --> 00:12:57.165\nOkay then I'm gonna say this.name\n= name; this.weight = weight.\n\n207\n00:12:59.117 --> 00:13:06.551\nThis.height, gotta spell height correctly,\nHeight, and this makes sense but\n\n208\n00:13:06.551 --> 00:13:10.840\ndoesn't this look a great deal like the\nconstructor that we had before for animal?\n\n209\n00:13:10.840 --> 00:13:14.770\nIf we scroll up here,\nthis constructor is very similar and\n\n210\n00:13:14.770 --> 00:13:17.550\nI've forgotten some things.\n\n211\n00:13:17.550 --> 00:13:20.730\nWell, that could be problematic\nbecause if I still wanna maintain eat,\n\n212\n00:13:20.730 --> 00:13:22.460\nI have to have the belly attribute.\n\n213\n00:13:23.470 --> 00:13:26.370\nIf I wanna move I still\nhave to have position,\n\n214\n00:13:26.370 --> 00:13:28.826\nso I have to be really careful about that.\n\n215\n00:13:28.826 --> 00:13:32.263\nIf I'm implementing everything from\nscratch, I'm essentially copying and\n\n216\n00:13:32.263 --> 00:13:35.700\npasting even though I\ntyped it I can lead myself\n\n217\n00:13:35.700 --> 00:13:38.973\nto where,there's no way I can\nfulfil the animal interface,\n\n218\n00:13:38.973 --> 00:13:43.840\nthere's no way that the squirrel could\neither move, and as far as I'm concerned,\n\n219\n00:13:43.840 --> 00:13:46.580\nthat's not a squirrel,\nthat's not really an animal at all.\n\n220\n00:13:48.280 --> 00:13:52.710\nAnd in addition to, let's see what\nhappens when I try to use this.\n\n221\n00:13:52.710 --> 00:14:01.910\nSo const let's just call it sq\njust to keep character countdown.\n\n222\n00:14:01.910 --> 00:14:07.360\nSo, I'm gonna have Squirrel and\nI'm gonna say his name is\n\n223\n00:14:08.430 --> 00:14:13.000\nTwitchy, and the weight is a pound, and\n\n224\n00:14:13.000 --> 00:14:18.540\nthe height is 10, no, no, 3 inches.\n\n225\n00:14:19.860 --> 00:14:24.101\nSo let's see, console.log and execute.\n\n226\n00:14:26.100 --> 00:14:28.280\nSo if I refresh, uh-oh.\n\n227\n00:14:28.280 --> 00:14:30.070\n&gt;&gt; Mm-hm.\n\n228\n00:14:30.070 --> 00:14:31.440\n&gt;&gt; Well that's weird.\n\n229\n00:14:31.440 --> 00:14:35.490\nThis is not defined, and if I come\nback and look at this constructor,\n\n230\n00:14:35.490 --> 00:14:38.430\nthis looks very similar to the animal\nconstructor that I had before, and\n\n231\n00:14:38.430 --> 00:14:42.160\nthis was defined,\nI didn't get that same error there.\n\n232\n00:14:42.160 --> 00:14:44.300\nI wonder why this is the case?\n\n233\n00:14:44.300 --> 00:14:47.320\nWell if you start diving\ninto the documentation\n\n234\n00:14:47.320 --> 00:14:50.800\non Mozilla Developer Networks\njust as a quick reminder.\n\n235\n00:14:50.800 --> 00:14:56.767\nSo if I go class javascript\nmozilla developer network, and\n\n236\n00:14:56.767 --> 00:15:02.030\nlet me zoom in on that a little\nbit just so you can see.\n\n237\n00:15:03.106 --> 00:15:07.390\nClass Mozilla developer network you\ncan actually read about classes, but\n\n238\n00:15:07.390 --> 00:15:14.220\nI'm gonna save you some time, save us some\ntime and in fact if I extend a class,\n\n239\n00:15:14.220 --> 00:15:19.030\nif I change the constructor, if I run\nthe constructor function this is special\n\n240\n00:15:19.030 --> 00:15:23.400\nI have to do something called super and\nwhat super does\n\n241\n00:15:23.400 --> 00:15:28.810\nis it calls to the parent, in this\ncase animal, to construct the object.\n\n242\n00:15:28.810 --> 00:15:30.510\nAnd then I can extend beyond.\n\n243\n00:15:30.510 --> 00:15:36.020\nSo, essentially, what super is saying is,\ngrab the parent, and\n\n244\n00:15:36.020 --> 00:15:38.120\nnow add on additional properties.\n\n245\n00:15:38.120 --> 00:15:44.217\nSo, if I go back and look at animal,\nanimal takes a weight and a height.\n\n246\n00:15:44.217 --> 00:15:48.164\nWell I can call super with weight and\nheight, and\n\n247\n00:15:48.164 --> 00:15:52.610\nnow I can just remove this.weight and\nthis.height.\n\n248\n00:15:52.610 --> 00:15:56.984\nBecause the super does\nthe this.weight = weight for me,\n\n249\n00:15:56.984 --> 00:16:00.358\nthis.height = height for me.\n\n250\n00:16:00.358 --> 00:16:03.315\nAnd now let's see what happens.\n\n251\n00:16:05.520 --> 00:16:08.220\nSo I still have my scroll,\nand everything looks good.\n\n252\n00:16:08.220 --> 00:16:10.600\nBut now notice I have a new attribute but\n\n253\n00:16:10.600 --> 00:16:14.880\nI still have all the default animal\nattributes that I anticipate.\n\n254\n00:16:14.880 --> 00:16:18.820\nIf I look at the prototype I\nstill have eat, move, and speak.\n\n255\n00:16:20.720 --> 00:16:25.450\nHowever, just like in our other one.\n\n256\n00:16:25.450 --> 00:16:30.320\nI want to override this speak, and is this\nallowed if I construct it a different way?\n\n257\n00:16:30.320 --> 00:16:31.770\nThere's only one way to find out.\n\n258\n00:16:34.510 --> 00:16:35.770\nWhat sound does a squirrel make?\n\n259\n00:16:35.770 --> 00:16:37.935\n&gt;&gt; [LAUGH] Yeah,\nI was just trying to figure that out.\n\n260\n00:16:37.935 --> 00:16:40.159\n&gt;&gt; [SOUND]\n&gt;&gt; Bullwinkle?\n\n261\n00:16:40.159 --> 00:16:42.267\n&gt;&gt; [SOUND]\n&gt;&gt; [LAUGH]\n\n262\n00:16:42.267 --> 00:16:44.996\n&gt;&gt; That looks good enough to me, [SOUND].\n\n263\n00:16:44.996 --> 00:16:48.989\nI don't know if that's really\nrelating through the mic there, but\n\n264\n00:16:48.989 --> 00:16:53.260\nit's kinda like a chirp, squeal,-\n&gt;&gt; I like it.\n\n265\n00:16:53.260 --> 00:16:54.670\n&gt;&gt; Yeah, it works for me.\n\n266\n00:16:54.670 --> 00:16:56.910\nSo, meow, woof.\n\n267\n00:16:56.910 --> 00:16:58.821\nWhat happens when a squirrel speaks?\n\n268\n00:17:05.004 --> 00:17:06.840\nCHHCHCHHCHHCHHC.\n\n269\n00:17:06.840 --> 00:17:07.410\n&gt;&gt; Nice.\n&gt;&gt; And there it is.\n\n270\n00:17:07.410 --> 00:17:10.440\nSo I now have a different speak method for\na squirrel.\n\n271\n00:17:10.440 --> 00:17:12.310\nI have an actual name property for\nthe squirrel.\n\n272\n00:17:12.310 --> 00:17:15.385\nThis squirrel's named Twitchy,\nand we're all good to go.\n\n273\n00:17:15.385 --> 00:17:16.780\nNow there is one final thought.\n\n274\n00:17:17.940 --> 00:17:22.280\nIs this super specific\nto just these methods?\n\n275\n00:17:22.280 --> 00:17:23.870\nThere's only one way to find out.\n\n276\n00:17:23.870 --> 00:17:26.380\nI'm a big proponent of trying things.\n\n277\n00:17:26.380 --> 00:17:30.420\nIf it takes very little time to try,\nlet's see what happens.\n\n278\n00:17:30.420 --> 00:17:33.671\nSo I'm gonna try just inside of speak,\nwhat does super do?\n\n279\n00:17:36.297 --> 00:17:38.156\nUnexpected.\n\n280\n00:17:38.156 --> 00:17:42.730\nSo if you're from a class\nbased language such as Java,\n\n281\n00:17:42.730 --> 00:17:46.180\nyou're used to maybe using\nsuper in different context.\n\n282\n00:17:46.180 --> 00:17:48.050\nSuper is typically reserved,\n\n283\n00:17:48.050 --> 00:17:51.270\nnow again, there may be some edge\ncases that I haven't figured out yet.\n\n284\n00:17:52.650 --> 00:17:56.830\nSuper is typically reserved for\nconstruction of the object in JavaScript\n\n285\n00:17:56.830 --> 00:17:59.680\nand not really for\ncalling additional methods.\n\n286\n00:17:59.680 --> 00:18:05.214\nSo what if I try super.speak()?\n\n287\n00:18:08.087 --> 00:18:11.477\nAnd in fact I'm not calling\nsuper as a function, but\n\n288\n00:18:11.477 --> 00:18:15.780\nI'm using super as a key word\nto reference the animal.\n\n289\n00:18:15.780 --> 00:18:17.940\nSo, be very careful of that.\n\n290\n00:18:17.940 --> 00:18:19.250\nHere it's a function,\n\n291\n00:18:19.250 --> 00:18:23.980\nhere I'm saying super as a reference\nto the parent class which is animal.\n\n292\n00:18:23.980 --> 00:18:26.420\nNow, I can pull in that functionality and\n\n293\n00:18:26.420 --> 00:18:29.290\nthen extend it beyond it's\nnormal functionality.\n\n294\n00:18:29.290 --> 00:18:31.772\nSo, if I wanted a squirrel to go,\n\n295\n00:18:31.772 --> 00:18:37.097\nanimal speaking [SOUND] I can then get\nthat done, so be very careful about\n\n296\n00:18:37.097 --> 00:18:42.370\nhow you use super as a function versus\nhow you use super as a reference.\n\n297\n00:18:42.370 --> 00:18:44.700\n&gt;&gt; All right, Justin,\nfantastic stuff there.\n\n298\n00:18:44.700 --> 00:18:48.695\nReally good look at how JavaScript\ncan now implement classes.\n\n299\n00:18:48.695 --> 00:18:50.445\nSo we appreciate that.\n\n300\n00:18:50.445 --> 00:18:52.615\nHope everybody out there\nenjoyed watching this one.\n\n301\n00:18:52.615 --> 00:18:55.635\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n302\n00:18:55.635 --> 00:18:57.175\n&gt;&gt; And I'm Justin Dennison.\n\n303\n00:18:57.175 --> 00:18:58.472\n&gt;&gt; And we'll see you next time.\n\n304\n00:18:58.472 --> 00:19:04.025\n[MUSIC]\n\n305\n00:19:04.025 --> 00:19:07.706\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204897840"
        },
        {
          "description": "In this episode, Justin and Mike look at changes to functions in ES6. They start by looking at problems faced when declaring functions, and the new arrow method for declaring functions in ES6. Then they demonstrate using default values in functions.",
          "length": "1802",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-4-1-changes_to_functions-020717-PGM.00_29_47_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-4-1-changes_to_functions-020717-PGM.00_29_47_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-4-1-changes_to_functions-020717-PGM.00_29_47_18.Still001-sm.jpg",
          "title": "Changes to Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.030\nWelcome to ITProTV.\n\n2\n00:00:01.030 --> 00:00:03.808\nI'm your host Don Pezet-\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:03.808 --> 00:00:04.782\n&gt;&gt; Coming at you live from San Francisco-\n\n4\n00:00:04.782 --> 00:00:06.351\n&gt;&gt; [CROSSTALK]\n\n5\n00:00:06.351 --> 00:00:09.084\n[MUSIC]\n\n6\n00:00:09.084 --> 00:00:10.481\n&gt;&gt; You're watching ITProTV.\n\n7\n00:00:10.481 --> 00:00:15.570\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n8\n00:00:15.570 --> 00:00:20.160\nI'm your host Mike Rodrick, and\ntoday we're doing new features in ES6.\n\n9\n00:00:20.160 --> 00:00:24.053\nIn this episode, we're gonna be\ntaking a look at functions and\n\n10\n00:00:24.053 --> 00:00:26.779\nwhat changes ES6 brings to our functions.\n\n11\n00:00:26.779 --> 00:00:30.156\nAnd here to guide us through this is Mr.\nJustin Dennison.\n\n12\n00:00:30.156 --> 00:00:30.939\nWelcome back, Justin.\n\n13\n00:00:30.939 --> 00:00:32.650\n&gt;&gt; Thanks for having me back, Mike.\n\n14\n00:00:32.650 --> 00:00:35.015\nYeah, emphasis on fun in functions.\n\n15\n00:00:35.015 --> 00:00:36.788\n&gt;&gt; [LAUGH]\n&gt;&gt; As I've said before,\n\n16\n00:00:36.788 --> 00:00:39.759\nfunctions are the end-all-be-all\nof JavaScript.\n\n17\n00:00:39.759 --> 00:00:41.292\nThey're everywhere in JavaScript.\n\n18\n00:00:41.292 --> 00:00:45.468\nBut there were times where they were,\nthey're a little difficult to handle.\n\n19\n00:00:45.468 --> 00:00:50.193\nIt had some weird syntax, especially\nif you're doing web applications or\n\n20\n00:00:50.193 --> 00:00:52.845\nany kind of data manipulation.\n\n21\n00:00:52.845 --> 00:00:54.929\nYou're like, I gotta write function and\nfunction and function.\n\n22\n00:00:54.929 --> 00:00:57.721\nAnd sometimes your function\nwas only a one-liner.\n\n23\n00:00:57.721 --> 00:01:00.117\nFunction, and\nthen a single return statement.\n\n24\n00:01:00.117 --> 00:01:01.468\nAnd you're like well,\n\n25\n00:01:01.468 --> 00:01:05.870\nthat's a lot of writing just to have\na single return within those functions.\n\n26\n00:01:05.870 --> 00:01:09.324\nIn addition too,\nthere were times where I didn't\n\n27\n00:01:09.324 --> 00:01:13.532\nreally want a function to always\nneed that third parameter.\n\n28\n00:01:13.532 --> 00:01:17.039\nI wanted it to default and\nyou had to do a lot of if, else and\n\n29\n00:01:17.039 --> 00:01:19.028\nhandling inside the function.\n\n30\n00:01:19.028 --> 00:01:22.463\nSo, those have been solved,\nto some extent, in ES6, but\n\n31\n00:01:22.463 --> 00:01:25.557\nwe have to be careful because\nit has brought along some\n\n32\n00:01:25.557 --> 00:01:28.336\ndifferent problems that\nwe have to be aware of.\n\n33\n00:01:28.336 --> 00:01:30.066\n&gt;&gt; Hm.\n\n34\n00:01:30.066 --> 00:01:33.754\n&gt;&gt; So, within,\nES6 we now have a new function syntax.\n\n35\n00:01:33.754 --> 00:01:37.340\nIt's called the fat arrow syntax,\nor the arrow syntax, and\n\n36\n00:01:37.340 --> 00:01:39.105\nI find those incredibly fun.\n\n37\n00:01:39.105 --> 00:01:41.930\nI actually just write them just for\nthe fun of it.\n\n38\n00:01:41.930 --> 00:01:44.803\n&gt;&gt; [LAUGH]\n&gt;&gt; And wow, when I say that out loud,\n\n39\n00:01:44.803 --> 00:01:46.918\nit gets a little interesting.\n\n40\n00:01:46.918 --> 00:01:52.360\nBut, I hope that you find them very\ninteresting, maybe even fun, like I do.\n\n41\n00:01:52.360 --> 00:01:54.210\nBut, I've been talking a lot.\n\n42\n00:01:54.210 --> 00:01:57.156\nMaybe we should just see\nwhat I'm talking about.\n\n43\n00:01:57.156 --> 00:02:01.021\nSo I'm here in my Chrome browser,\nI'm gonna go ahead and\n\n44\n00:02:01.021 --> 00:02:06.185\nopen that index.html that is going to\nallow me to interact with my app.js.\n\n45\n00:02:06.185 --> 00:02:11.492\nAnd as always, make sure you got\nthat correct index of the HTML.\n\n46\n00:02:11.492 --> 00:02:13.931\nAnd I know I've seem like\nI'm harping on that, but\n\n47\n00:02:13.931 --> 00:02:17.390\nI can't tell you how many times\nsomeone's come to me at midnight, hey,\n\n48\n00:02:17.390 --> 00:02:21.045\nI've been trying to work on this for\nsix hours now and nothing's changing.\n\n49\n00:02:21.045 --> 00:02:23.391\nI'm not saying it's\nbeen from time to time.\n\n50\n00:02:23.391 --> 00:02:26.166\nBut I'll go, that's not the right file.\n\n51\n00:02:26.166 --> 00:02:27.778\nAnd that's incredibly deflating,\n\n52\n00:02:27.778 --> 00:02:30.747\nespecially after you know you're\nnot getting that six hours back.\n\n53\n00:02:30.747 --> 00:02:32.710\n&gt;&gt; [LAUGH]\n&gt;&gt; So it's very important.\n\n54\n00:02:32.710 --> 00:02:36.772\nAnd then I'm gonna go ahead and open my\ndev tools, I love the dev tools in Chrome.\n\n55\n00:02:36.772 --> 00:02:39.119\nSafari does have these.\n\n56\n00:02:39.119 --> 00:02:40.946\nFirefox has these.\n\n57\n00:02:40.946 --> 00:02:44.957\nI like Chrome because Chrome\nis kind of where I grew up, so\n\n58\n00:02:44.957 --> 00:02:46.890\nto speak, as a developer.\n\n59\n00:02:48.260 --> 00:02:51.499\nThen I'm gonna hop over to my editor and\n\n60\n00:02:51.499 --> 00:02:56.028\nopen my project folder for\nmy function interactions.\n\n61\n00:02:56.028 --> 00:03:02.081\nAnd here is Functions and my index.html\njust a way to interpret this app.js.\n\n62\n00:03:02.081 --> 00:03:05.311\nI can quickly refresh and\nmy app.js is empty.\n\n63\n00:03:05.311 --> 00:03:10.380\nSo let's look at a comparison at these\ndifferent function definitions and\n\n64\n00:03:10.380 --> 00:03:15.206\nI'm actually gonna use function\nexpressions for these which is where I\n\n65\n00:03:15.206 --> 00:03:19.727\nhave a variable equal to something and\nsee how these have changed.\n\n66\n00:03:19.727 --> 00:03:25.974\nSo I'm gonna start, a little bit\nof ES6 syntax right off the bat.\n\n67\n00:03:25.974 --> 00:03:30.000\nActually, let's do ES5 to ES6\nwith some of the new changes.\n\n68\n00:03:30.000 --> 00:03:37.618\nSo if I wanted to double, doubler, so\nthis is a function that doubles a number.\n\n69\n00:03:37.618 --> 00:03:41.630\nAnd in ES5,\nI could have something like this.\n\n70\n00:03:41.630 --> 00:03:44.771\nIt's a named expression.\n\n71\n00:03:44.771 --> 00:03:50.710\nt takes a number and just returns num * 2.\n\n72\n00:03:50.710 --> 00:03:52.747\nNow you may have seen things like this,\n\n73\n00:03:52.747 --> 00:03:55.290\nit's just a simple\ntransformation on a number.\n\n74\n00:03:55.290 --> 00:04:00.552\nAnd if I use it, I'm gonna actually see\n\n75\n00:04:00.552 --> 00:04:07.000\nthat doubler of 4 Behaves as\nI anticipated, gives me 8.\n\n76\n00:04:07.000 --> 00:04:09.882\nOkay, well, that's fine, but\nnotice how much ceremony,\n\n77\n00:04:09.882 --> 00:04:12.041\nhow much I went through\njust to get that done.\n\n78\n00:04:12.041 --> 00:04:16.817\nNow, I could get rid of this,\nshortened a little bit, but it's still,\n\n79\n00:04:16.817 --> 00:04:19.964\nI gotta type that function name,\nit's crazy.\n\n80\n00:04:19.964 --> 00:04:22.383\nWell, in ES6, I now have a way for\n\n81\n00:04:22.383 --> 00:04:26.655\nthese simple functions to just more or\nless be one-liners.\n\n82\n00:04:26.655 --> 00:04:30.347\nBut there are some things you have\nto be very, very careful about.\n\n83\n00:04:30.347 --> 00:04:34.119\nI'm gonna use doubler6 for ES6, and\n\n84\n00:04:34.119 --> 00:04:39.387\nthat's just because I need\ndifferent names for them.\n\n85\n00:04:39.387 --> 00:04:42.520\nNormally I would comment this one out, but\n\n86\n00:04:42.520 --> 00:04:46.532\nI wanna be able to make sure\nI get the exact same output.\n\n87\n00:04:46.532 --> 00:04:50.860\nAnd now I'm gonna set this equal, and I'm\ngonna just open up a set of parentheses.\n\n88\n00:04:52.090 --> 00:04:55.552\nAnd those parentheses are going\nto be my function argument.\n\n89\n00:04:55.552 --> 00:04:58.153\nWhat was here is now in\na set of parentheses.\n\n90\n00:04:58.153 --> 00:05:00.524\nAnd then an equal sign and\na greater than sign.\n\n91\n00:05:00.524 --> 00:05:03.223\nThat arrow maps to, points to.\n\n92\n00:05:03.223 --> 00:05:07.132\nAnd then an open set of curly braces.\n\n93\n00:05:07.132 --> 00:05:11.880\nAnd then I can say return num * 2.\n\n94\n00:05:11.880 --> 00:05:16.401\nNow I've already cut down on the amount\nof typing that I've done, okay?\n\n95\n00:05:16.401 --> 00:05:19.431\nBut we're not done here yet,\nbut we wanna start and\n\n96\n00:05:19.431 --> 00:05:21.770\nbuild toward this simplified syntax.\n\n97\n00:05:23.340 --> 00:05:25.522\nAlready simplified but\nnotice there's our fat arrow.\n\n98\n00:05:25.522 --> 00:05:26.683\nIt looks like a fat arrow.\n\n99\n00:05:26.683 --> 00:05:27.716\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n100\n00:05:27.716 --> 00:05:32.662\nall it's saying is I'm taking num\nto the return statement num * 2.\n\n101\n00:05:32.662 --> 00:05:35.330\nSo these are my arguments,\nthis is my function body.\n\n102\n00:05:35.330 --> 00:05:41.305\nSo if I console.log(doubler6).\n\n103\n00:05:41.305 --> 00:05:46.304\nA four, And\n\n104\n00:05:46.304 --> 00:05:49.830\nscroll up, I still get eight,\nit still works.\n\n105\n00:05:49.830 --> 00:05:51.232\nBut we are not done, there's more.\n\n106\n00:05:51.232 --> 00:05:53.789\nI feel like a late night informercial.\n\n107\n00:05:53.789 --> 00:05:55.624\n&gt;&gt; [LAUGH]\n&gt;&gt; I actually, for\n\n108\n00:05:55.624 --> 00:05:59.905\na single argument I don't\nneed these parenthesis.\n\n109\n00:05:59.905 --> 00:06:01.080\nOkay?\n\n110\n00:06:01.080 --> 00:06:01.787\nLet's see if it still works.\n\n111\n00:06:01.787 --> 00:06:03.577\nAnd it does.\n\n112\n00:06:03.577 --> 00:06:08.550\nAs a matter of fact, if the only thing\nin your function is a single return,\n\n113\n00:06:08.550 --> 00:06:16.307\nI don't actually need- The return or,\nthose curly braces.\n\n114\n00:06:16.307 --> 00:06:19.376\nSo now I have defined this function.\n\n115\n00:06:19.376 --> 00:06:24.350\nIt takes, so\nit just doubles the num provided.\n\n116\n00:06:26.170 --> 00:06:30.680\nNow, let's make sure this works,\nand it does.\n\n117\n00:06:31.690 --> 00:06:33.690\nHere's where you gotta be really careful.\n\n118\n00:06:33.690 --> 00:06:37.607\nI can read this and\nkind of quickly reason about what it is.\n\n119\n00:06:37.607 --> 00:06:41.813\nIf I choose a name that is appropriate,\na variable name that's appropriate,\n\n120\n00:06:41.813 --> 00:06:44.440\nI'm like That's what that function does.\n\n121\n00:06:44.440 --> 00:06:49.107\nI'll be very careful about trying to get\nreally flashy with these one-liners.\n\n122\n00:06:49.107 --> 00:06:54.216\nThey should be incredibly simple because\nI've seen people kind of chain a bunch\n\n123\n00:06:54.216 --> 00:06:59.520\nof ternary statements or these complex\nother function calls and get fancy.\n\n124\n00:06:59.520 --> 00:07:02.323\nBut then that actually\nremoves the readability,\n\n125\n00:07:02.323 --> 00:07:05.801\nit removes the usage of these,\nso be very careful about that.\n\n126\n00:07:05.801 --> 00:07:09.120\nBut those are the two ways\nto defining arrow functions.\n\n127\n00:07:10.190 --> 00:07:12.187\nI can have a single line\nif I have a return,\n\n128\n00:07:12.187 --> 00:07:15.899\nthis is called in an implicit return,\nbut I have a single statement in there,\n\n129\n00:07:15.899 --> 00:07:18.318\nit's going to implicitly\nreturn the last thing.\n\n130\n00:07:18.318 --> 00:07:23.480\nHowever, if I have multiple\nthings that I need to do,\n\n131\n00:07:23.480 --> 00:07:28.070\nand let's just say this is called Collatz,\nand\n\n132\n00:07:28.070 --> 00:07:34.181\nI got some math background on me,\nso you'll have to excuse me.\n\n133\n00:07:34.181 --> 00:07:34.905\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n134\n00:07:34.905 --> 00:07:37.455\nCollatz is just a function\nI'm gonna write, but\n\n135\n00:07:37.455 --> 00:07:39.766\nI need to do some additional manipulation.\n\n136\n00:07:39.766 --> 00:07:43.464\nI need to create an intermediate\nvariable that is my,\n\n137\n00:07:43.464 --> 00:07:46.390\nI'm just gonna call it temporary.\n\n138\n00:07:46.390 --> 00:07:51.000\nAnd it's gonna be 3 * num + 1.\n\n139\n00:07:51.000 --> 00:07:54.281\nAnd then I'm gonna return temp.\n\n140\n00:07:54.281 --> 00:07:56.676\nNow, for\nthose of you who have a math background,\n\n141\n00:07:56.676 --> 00:07:58.911\nknow this is not a complete\nCollatz function.\n\n142\n00:07:58.911 --> 00:08:01.220\nBut that's not what we're here for,\njust keep in mind.\n\n143\n00:08:01.220 --> 00:08:04.354\nSo but notice I had to do several steps.\n\n144\n00:08:04.354 --> 00:08:07.710\nI no longer have the ability\nto do the implicit return.\n\n145\n00:08:07.710 --> 00:08:09.697\nI can't just one line this.\n\n146\n00:08:09.697 --> 00:08:14.240\nI can, for a single argument,\nI still can remove these, and that's fine.\n\n147\n00:08:14.240 --> 00:08:18.402\nBut be very, very careful of,\n\n148\n00:08:21.976 --> 00:08:25.808\ncollatz of 4.\n\n149\n00:08:25.808 --> 00:08:30.354\nAnd that's just gonna multiply by 3,\nadd 1, I should get 13.\n\n150\n00:08:30.354 --> 00:08:32.180\nAnd I in fact do get 13.\n\n151\n00:08:32.180 --> 00:08:34.960\nBut I can't one line this.\n\n152\n00:08:34.960 --> 00:08:37.291\nI have multiple sets of logic that I need.\n\n153\n00:08:37.291 --> 00:08:41.098\nNow, where else would these\narrow functions come in handy?\n\n154\n00:08:41.098 --> 00:08:44.180\nWell, if I'm manipulating the dom, right?\n\n155\n00:08:44.180 --> 00:08:45.740\nI'm doing small little click events.\n\n156\n00:08:45.740 --> 00:08:48.910\nIf I don't need specific context,\n\n157\n00:08:48.910 --> 00:08:53.370\nI can also use it as very simplified\nfunctions, as we've seen here.\n\n158\n00:08:54.820 --> 00:08:58.270\nHowever, there are times you do not\nwant to use the arrow function.\n\n159\n00:08:59.580 --> 00:09:07.300\nThese are fine, but let's take a look at,\nI don't know, let's make a greeter object.\n\n160\n00:09:07.300 --> 00:09:11.130\nSo we're just gonna make one\nof these fun object literals.\n\n161\n00:09:11.130 --> 00:09:19.892\nAnd what if I said greet, And\nI'm just gonna console.log.\n\n162\n00:09:23.258 --> 00:09:28.494\nHello, Nope, gonna get that right.\n\n163\n00:09:31.658 --> 00:09:35.272\nAll right, sometimes in you're editor,\nwhen you see this,\n\n164\n00:09:35.272 --> 00:09:39.386\nsee how it's autocompleting both\nsets when I actually only need one?\n\n165\n00:09:39.386 --> 00:09:42.950\nThat is a little iffy about editors.\n\n166\n00:09:42.950 --> 00:09:49.245\nBut I do want these and\nI'm just gonna say this.greetee.\n\n167\n00:09:49.245 --> 00:09:50.781\nI dont have a greetee yet.\n\n168\n00:09:54.796 --> 00:10:01.217\nBut I'm gonna set one here, and let's just\nsay I'm going with Mike, so there we go.\n\n169\n00:10:01.217 --> 00:10:03.882\nSo the greetee, and then I'm gonna greet.\n\n170\n00:10:03.882 --> 00:10:11.117\nSo, normally, I would be able to\nsay greeter.greet, just like that.\n\n171\n00:10:11.117 --> 00:10:15.724\nAnd I'm gonna comment this out just for\nreadability.\n\n172\n00:10:15.724 --> 00:10:18.010\nHello undefined!\n\n173\n00:10:18.010 --> 00:10:19.980\nWell, that is unexpected.\n\n174\n00:10:19.980 --> 00:10:22.090\nBecause if I actually changed\n\n175\n00:10:25.150 --> 00:10:30.250\nthis to a standard function definition,\nI get Hello Mike!\n\n176\n00:10:31.270 --> 00:10:32.960\nSo why is that the case?\n\n177\n00:10:32.960 --> 00:10:37.080\nAnd that's because the way arrow functions\n\n178\n00:10:37.080 --> 00:10:41.680\nhandle the context is a little different\nthan standard function expressions.\n\n179\n00:10:41.680 --> 00:10:46.420\nIf I need access to the keyword this,\nsee this this?\n\n180\n00:10:46.420 --> 00:10:49.550\nWhat I mean is this greeter's greetee.\n\n181\n00:10:49.550 --> 00:10:53.640\nIf I need access to the keyword this,\nin a reproducible fashion,\n\n182\n00:10:53.640 --> 00:10:57.780\nin a way to think about, I should\nprobably stay away from arrow functions.\n\n183\n00:10:57.780 --> 00:11:01.120\nI should also not use arrow functions for\nconstructor functions.\n\n184\n00:11:01.120 --> 00:11:05.140\nI should be careful about when\nhandling DOM events with them.\n\n185\n00:11:05.140 --> 00:11:10.610\nIn addition to any type of object\nprototypes and we've seen object literals.\n\n186\n00:11:10.610 --> 00:11:15.160\nAnd then also as I've said before, be very\ncareful about getting overly simplistic\n\n187\n00:11:15.160 --> 00:11:19.600\nwith the arrow function, getting fancy and\ngo and look, I can write this in one line.\n\n188\n00:11:19.600 --> 00:11:23.330\nYou could but just because you can,\ndoesn't mean you should.\n\n189\n00:11:23.330 --> 00:11:24.807\nAnd that's a very important distinction.\n\n190\n00:11:24.807 --> 00:11:29.729\nSo remember within these objects,\nobject literal classes,\n\n191\n00:11:29.729 --> 00:11:32.860\nbe very careful with arrow functions.\n\n192\n00:11:32.860 --> 00:11:35.330\nI would even say,\njust stay away from them.\n\n193\n00:11:35.330 --> 00:11:40.100\nUse that shorthand syntax that\nhas come along, or ES6 classes.\n\n194\n00:11:40.100 --> 00:11:44.189\nThey're shortened syntax for\nthe method, not arrow functions, so\n\n195\n00:11:44.189 --> 00:11:46.500\nbe very careful with that.\n\n196\n00:11:46.500 --> 00:11:50.290\nNow, [COUGH] what I do like\nabout arrow functions is it\n\n197\n00:11:50.290 --> 00:11:53.680\nallows us some of these\narray manipulation methods.\n\n198\n00:11:53.680 --> 00:11:57.620\nWe can just inline those,\nwe can create a data pipeline and\n\n199\n00:11:57.620 --> 00:12:00.769\ndo some manipulations that,\nI think, are very readable.\n\n200\n00:12:01.810 --> 00:12:04.050\nWith name functions they would\nbe even more readable but\n\n201\n00:12:04.050 --> 00:12:05.050\nmaybe I just need them one time.\n\n202\n00:12:06.190 --> 00:12:08.090\nNow again, I'm doing some hand waving.\n\n203\n00:12:08.090 --> 00:12:13.580\nLet's just see again, a contrived\nexample but does it illustrate my point?\n\n204\n00:12:13.580 --> 00:12:18.540\nSo we're gonna scroll down here, get\nthis out of sight, out of mind for now.\n\n205\n00:12:18.540 --> 00:12:21.450\nAnd I'm actually gonna comment out greet,\ncuz otherwise\n\n206\n00:12:21.450 --> 00:12:25.140\nwe'll just have everything else and then\nhello Mike at the top of it all the time.\n\n207\n00:12:25.140 --> 00:12:28.780\nSo we'll keep this down here and\ngotta get rid of that.\n\n208\n00:12:29.790 --> 00:12:31.020\nSo there's our end.\n\n209\n00:12:32.110 --> 00:12:35.320\nSo let's start with a phone number.\n\n210\n00:12:35.320 --> 00:12:39.844\nNow this would be something that\nI would maybe get out a form for\n\n211\n00:12:39.844 --> 00:12:44.542\na web app or maybe this is coming\nfrom same kind of data service and\n\n212\n00:12:44.542 --> 00:12:49.765\nwe go with the ubiquitous 555,\nis that a correct number of numbers?\n\n213\n00:12:49.765 --> 00:12:50.788\nThere is one-\n&gt;&gt; Yes.\n\n214\n00:12:50.788 --> 00:12:53.590\n&gt;&gt; Yeah yeah so,\ngo with that 555 number but\n\n215\n00:12:53.590 --> 00:12:57.908\nlet's say that I needed to do some\nmanipulations, I was looking for\n\n216\n00:12:57.908 --> 00:13:02.635\npatterns for phone numbers,\nI'm trying to make some kind of assertion.\n\n217\n00:13:02.635 --> 00:13:06.357\nI want to actually double\nindividual digits, and\n\n218\n00:13:06.357 --> 00:13:10.799\nput them back together to see\nkind of what results I can get.\n\n219\n00:13:10.799 --> 00:13:15.838\nNow again contrived, so I wanna\ndouble the phone and what can I do?\n\n220\n00:13:15.838 --> 00:13:21.319\nI can actually say, phoneNumber.split.\n\n221\n00:13:21.319 --> 00:13:23.171\nAnd what is this going to give me?\n\n222\n00:13:23.171 --> 00:13:28.675\nLet's just console.log doublePhone.\n\n223\n00:13:28.675 --> 00:13:31.136\nAnd we haven't quite got back\nto the arrow functions there but\n\n224\n00:13:31.136 --> 00:13:33.130\nwe're doing an appropriate set up.\n\n225\n00:13:33.130 --> 00:13:37.210\nAnd notice my split just pulled\nall those numbers apart, but\n\n226\n00:13:37.210 --> 00:13:38.830\nhere's where it gets fun.\n\n227\n00:13:38.830 --> 00:13:41.560\nI actually need these,\nin order to do the math,\n\n228\n00:13:41.560 --> 00:13:45.210\nI need these individual things\nto be numbers, not strings.\n\n229\n00:13:45.210 --> 00:13:48.550\nIf I do 2 times this,\nI'm just gonna get bunch of NaNs.\n\n230\n00:13:48.550 --> 00:13:49.750\nSo, what can I do?\n\n231\n00:13:49.750 --> 00:13:54.000\nI can employ what's\ncalled method chaining.\n\n232\n00:13:54.000 --> 00:13:56.861\nSo since phoneNumber.split\ngives me an array,\n\n233\n00:13:56.861 --> 00:13:59.300\nI can now use array methods as such, now,\n\n234\n00:13:59.300 --> 00:14:04.550\nI'm showing you this because this is where\nI've seen arrow function's a great deal.\n\n235\n00:14:04.550 --> 00:14:06.731\nYou'll see arrow functions\nused in this context.\n\n236\n00:14:06.731 --> 00:14:10.030\nAnd what it's gonna do\nis gonna take a char.\n\n237\n00:14:11.640 --> 00:14:17.487\nAnd I want to return the number\nversion of char, okay.\n\n238\n00:14:17.487 --> 00:14:22.750\nSo I'm applying a transformation for\neach character in this split array.\n\n239\n00:14:23.880 --> 00:14:25.510\nI'm going to transform it to a number.\n\n240\n00:14:25.510 --> 00:14:29.150\nLet's see what the results of that are.\n\n241\n00:14:29.150 --> 00:14:30.230\nYou gotta save.\n\n242\n00:14:30.230 --> 00:14:32.019\nDon't forget to save, that's important.\n\n243\n00:14:33.370 --> 00:14:38.130\nAnd, in fact,\nI now have numbers instead of strings.\n\n244\n00:14:39.200 --> 00:14:41.700\nNow, if I wanted to do another step,\n\n245\n00:14:41.700 --> 00:14:46.660\nI wanted to transform this data again,\nI can map.\n\n246\n00:14:46.660 --> 00:14:53.140\nAnd I'm gonna take this num, and\nI'm just gonna say 2 times number.\n\n247\n00:14:53.140 --> 00:14:55.900\nCuz I'm doubling the phone number, okay?\n\n248\n00:14:55.900 --> 00:14:57.302\nLet's see what happens there.\n\n249\n00:14:59.676 --> 00:15:03.320\nGot to make sure you use the correct one.\n\n250\n00:15:03.320 --> 00:15:04.610\nI have now doubled the numbers.\n\n251\n00:15:04.610 --> 00:15:08.360\nAnd then finally I wanna squish them\nback into the text representation.\n\n252\n00:15:10.700 --> 00:15:15.370\nSo, I can join,\nnotice that I split on empty.\n\n253\n00:15:15.370 --> 00:15:17.170\nAnd I'm going to join\nback together on empty.\n\n254\n00:15:18.810 --> 00:15:19.380\nAnd finally,\n\n255\n00:15:19.380 --> 00:15:23.280\nI have the string representation where\nI've split the number apart, doubled\n\n256\n00:15:23.280 --> 00:15:27.590\nall the pieces after turning them into\nnumbers and squishing them back together.\n\n257\n00:15:27.590 --> 00:15:30.660\nBut notice these arrow\nfunctions are one liners.\n\n258\n00:15:30.660 --> 00:15:32.400\nThey're very simple.\n\n259\n00:15:32.400 --> 00:15:34.100\nAnd they're easy to reason about.\n\n260\n00:15:34.100 --> 00:15:36.680\nI'm taking a character, and\nI'm making it a number.\n\n261\n00:15:36.680 --> 00:15:39.090\nI'm taking a number, and\nmultiplying it by two.\n\n262\n00:15:40.220 --> 00:15:44.450\nSo, this is where you will see arrow\nfunctions, and become very handy\n\n263\n00:15:44.450 --> 00:15:47.500\nwhen you're doing this data pipelining,\nthese data visualizations, if you will.\n\n264\n00:15:49.350 --> 00:15:51.157\nNow, in addition to arrow functions,\n\n265\n00:15:51.157 --> 00:15:54.352\nthese fat arrow functions which again,\ndo have their limitations.\n\n266\n00:15:54.352 --> 00:15:56.860\nThere were times where I had,\n\n267\n00:15:56.860 --> 00:16:01.576\nI really need these first two\narguments of a function But\n\n268\n00:16:01.576 --> 00:16:06.910\nthis last one is kind of optional,\nlike an optional argument.\n\n269\n00:16:08.140 --> 00:16:13.050\nLet's go back to that greet example and\nwe're gonna talk about defaults.\n\n270\n00:16:14.490 --> 00:16:17.310\nSo these are additional changes in ES6.\n\n271\n00:16:17.310 --> 00:16:21.490\nAnd let's just use those\narrow functions so\n\n272\n00:16:21.490 --> 00:16:26.360\nyou can see multiple parameters\ninside of an arrow function.\n\n273\n00:16:26.360 --> 00:16:31.620\nSo we're gonna say the person who's\nbeing greeted and then the salutation.\n\n274\n00:16:33.010 --> 00:16:37.150\nThere I go with those long\nvariable names again.\n\n275\n00:16:37.150 --> 00:16:40.672\nBut notice inside of\nthis set of parameters,\n\n276\n00:16:40.672 --> 00:16:45.131\nI'm actually setting equal\nsalutation equal to hello.\n\n277\n00:16:45.131 --> 00:16:48.980\nAnd what that means is I'm gonna\nhave a default value for salutation.\n\n278\n00:16:48.980 --> 00:16:54.780\nSalutation is already gonna be hello,\nunless I pass in a new one.\n\n279\n00:16:54.780 --> 00:17:00.524\nSo if I take that along,\nthere's my arrow function.\n\n280\n00:17:00.524 --> 00:17:04.840\nAnd notice all I did was wrap it in\nparentheses and put a comma between it.\n\n281\n00:17:04.840 --> 00:17:09.307\nI can just console.log, salutation and\n\n282\n00:17:09.307 --> 00:17:15.568\nI'm making some assumptions\nhere about the salutation.\n\n283\n00:17:18.020 --> 00:17:25.176\nSo, I'm just gonna, console.log,\nsalutation, space, person and let's greet.\n\n284\n00:17:26.717 --> 00:17:27.315\nLet's see.\n\n285\n00:17:27.315 --> 00:17:29.981\nWe'll just stay with Mike\nto keep things consistent.\n\n286\n00:17:29.981 --> 00:17:31.280\nAnd I'm just gonna say greet Mike.\n\n287\n00:17:32.820 --> 00:17:34.741\nAll right, how does that play out?\n\n288\n00:17:34.741 --> 00:17:36.040\nHello Mike.\n\n289\n00:17:36.040 --> 00:17:40.990\nOkay, that's because salutation no\nlonger has an undefined value, but\n\n290\n00:17:40.990 --> 00:17:42.790\ninstead has a default value.\n\n291\n00:17:42.790 --> 00:17:47.234\nLet's compare that with the old style\nwhere if I wanted to be able to pass in\n\n292\n00:17:47.234 --> 00:17:51.984\nlike a beginning of salutation, and\nI didn't have these default arguments.\n\n293\n00:17:51.984 --> 00:17:55.068\nAnd I just wanna greet Mike.\n\n294\n00:17:55.068 --> 00:17:58.733\nI don't wanna worry about what\nam I going to say to him.\n\n295\n00:17:58.733 --> 00:17:59.960\nundefined Mike.\n\n296\n00:17:59.960 --> 00:18:02.170\nWell, I'm here to tell you,\nMike's right here.\n\n297\n00:18:02.170 --> 00:18:03.600\nHe's not undefined.\n\n298\n00:18:03.600 --> 00:18:05.754\nSo that's incredibly helpful.\n\n299\n00:18:07.874 --> 00:18:09.380\nWe'll just put that hello back.\n\n300\n00:18:11.050 --> 00:18:14.230\nBut it also allows the override.\n\n301\n00:18:14.230 --> 00:18:19.198\nHow could I change this so\n\n302\n00:18:19.198 --> 00:18:24.402\nif I keep the greet Mike but\n\n303\n00:18:24.402 --> 00:18:27.820\nwith, Caio.\n\n304\n00:18:27.820 --> 00:18:32.698\nI don't know how to spell Caio, Caio.\n\n305\n00:18:32.698 --> 00:18:33.940\nCaio Mike.\n\n306\n00:18:33.940 --> 00:18:37.493\nSo now I have the ability,\nI kind of have this polymorphism,\n\n307\n00:18:37.493 --> 00:18:41.675\nthis change, this function can take\nmany forms because I have a default\n\n308\n00:18:41.675 --> 00:18:43.852\nargument that I can not use, right?\n\n309\n00:18:43.852 --> 00:18:46.696\nI don't have to give it a salutation, but\n\n310\n00:18:46.696 --> 00:18:52.220\nthen I can also pass it a salutation\nwhich will override the value here.\n\n311\n00:18:52.220 --> 00:18:54.500\nNow where else would\nthis be available to you?\n\n312\n00:18:54.500 --> 00:19:00.210\nActually anytime in a class, in a ES6\nclass, such as the constructor, right?\n\n313\n00:19:00.210 --> 00:19:01.885\nLet's take a quick look here.\n\n314\n00:19:01.885 --> 00:19:04.059\nIf I have a person.\n\n315\n00:19:07.438 --> 00:19:09.300\nAnd I have a constructor function.\n\n316\n00:19:09.300 --> 00:19:11.240\nThese are actually functions.\n\n317\n00:19:11.240 --> 00:19:17.830\nAnd a person is gonna be determined\nby their name and location, okay?\n\n318\n00:19:17.830 --> 00:19:21.020\nNotice that my constructor\nhas location=\"USA\".\n\n319\n00:19:21.020 --> 00:19:22.270\nI'm making an assumption.\n\n320\n00:19:22.270 --> 00:19:25.140\nMaybe I'm building this as an application\n\n321\n00:19:25.140 --> 00:19:28.310\nin JavaScript that most of my userbase,\nright?\n\n322\n00:19:28.310 --> 00:19:30.120\nI have this person\nobject that I'm storing.\n\n323\n00:19:31.620 --> 00:19:33.950\nMost of my userbase is\nin the United States.\n\n324\n00:19:33.950 --> 00:19:35.870\nSo then I don't actually\nhave to worry about\n\n325\n00:19:37.160 --> 00:19:41.660\nmanaging all of that information if\nmost everybody is in the United States.\n\n326\n00:19:41.660 --> 00:19:44.450\nI only have to handle when\nthey're not in the United States.\n\n327\n00:19:44.450 --> 00:19:50.000\nSo I get those default arguments so\nI can then say this name = name and\n\n328\n00:19:50.000 --> 00:19:54.950\nthis location = location.\n\n329\n00:19:54.950 --> 00:20:01.504\nAnd if I wanted a new person, And\n\n330\n00:20:01.504 --> 00:20:04.547\nso, I need to give a name, Sally.\n\n331\n00:20:07.779 --> 00:20:09.640\nAnd then I'm gonna create another person.\n\n332\n00:20:13.455 --> 00:20:15.293\nI'm really typing away again, Mike.\n\n333\n00:20:15.293 --> 00:20:19.379\n&gt;&gt; [LAUGH]\n&gt;&gt; Ted, but\n\n334\n00:20:19.379 --> 00:20:28.157\nhe lives in the UK, okay?\n\n335\n00:20:28.157 --> 00:20:29.800\nAnd there's another person.\n\n336\n00:20:29.800 --> 00:20:32.138\nLet's go see the results of those.\n\n337\n00:20:32.138 --> 00:20:36.420\nAnd notice they both still have\nlocation and name as I need them to.\n\n338\n00:20:36.420 --> 00:20:38.330\nThey're fulfilling their role.\n\n339\n00:20:38.330 --> 00:20:43.050\nBut when I constructed Sally,\nI didn't have to worry about passing in\n\n340\n00:20:43.050 --> 00:20:48.171\na location and handling if she lives in\nthe US because I have a default value.\n\n341\n00:20:48.171 --> 00:20:51.453\nSo that's incredibly powerful.\n\n342\n00:20:51.453 --> 00:20:55.472\nBut there's even times where I don't even\nknow how many arguments a function's\n\n343\n00:20:55.472 --> 00:20:56.580\ngonna take.\n\n344\n00:20:56.580 --> 00:21:00.330\nSo I have that new fat arrow function,\nI have those defaults.\n\n345\n00:21:00.330 --> 00:21:04.970\nBut what if I need to have\na function that takes not one,\n\n346\n00:21:04.970 --> 00:21:10.290\ntwo, but maybe even hundreds of arguments\nand it has some default behavior?\n\n347\n00:21:10.290 --> 00:21:15.075\nWell, we used to have to use this\nweird arguments object that acted like\n\n348\n00:21:15.075 --> 00:21:17.640\nan array but wasn't really an array.\n\n349\n00:21:17.640 --> 00:21:19.215\nAnd then I had to do some manipulation.\n\n350\n00:21:19.215 --> 00:21:22.590\nBut in ES6, they've actually\nmade that incredibly easy.\n\n351\n00:21:22.590 --> 00:21:25.550\nAnd that's using the rest operator.\n\n352\n00:21:25.550 --> 00:21:26.900\nIt looks like an ellipsis.\n\n353\n00:21:26.900 --> 00:21:32.845\nIt's kind of like and, dot, dot,\ndot, the rest of the story, right?\n\n354\n00:21:32.845 --> 00:21:37.554\nSo we're gonna write functions using this\noperator that will help us collect data\n\n355\n00:21:37.554 --> 00:21:41.784\ninto a more user friendly, or\nactually developer friendly in this case,\n\n356\n00:21:41.784 --> 00:21:45.540\nstructure that we can use to\ncreate additional functions.\n\n357\n00:21:45.540 --> 00:21:50.840\nSo if we go back to our editor, and\n\n358\n00:21:50.840 --> 00:21:55.065\nwe're gonna look at the Rest,\nthis is also known as Rest Parans.\n\n359\n00:21:55.065 --> 00:21:58.870\nIt's a way of getting the rest of\nthe parameters within a function.\n\n360\n00:21:58.870 --> 00:22:04.044\nSo I'm just gonna start with a very\nsimple one, function logger.\n\n361\n00:22:04.044 --> 00:22:07.500\nAnd notice I don't have to use\nthe fat arrow just because it's there.\n\n362\n00:22:07.500 --> 00:22:09.765\nI still have everything\nelse available to me.\n\n363\n00:22:09.765 --> 00:22:12.216\nAnd then I can mix and match as I see fit.\n\n364\n00:22:12.216 --> 00:22:16.805\nI can say message and\nthen dot, dot, dot, data.\n\n365\n00:22:16.805 --> 00:22:19.060\nNow what does that mean,\nthat dot, dot, dot?\n\n366\n00:22:19.060 --> 00:22:21.760\nWell, that's actually our rest operator.\n\n367\n00:22:21.760 --> 00:22:23.650\nAnd we'll see this in just a moment.\n\n368\n00:22:23.650 --> 00:22:28.090\nSo I'm gonna console.log (msg).\n\n369\n00:22:28.090 --> 00:22:30.473\nHow appropriate,\nthe logger function just logs.\n\n370\n00:22:30.473 --> 00:22:33.515\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n371\n00:22:33.515 --> 00:22:35.960\nthen I'm just gonna console.log (data).\n\n372\n00:22:35.960 --> 00:22:37.250\nSo let's see this in action.\n\n373\n00:22:38.540 --> 00:22:44.155\nSo I'm gonna logger('Hey') and then 1, 2.\n\n374\n00:22:44.155 --> 00:22:49.058\nSo notice this has a single comma but\nI have two commas here.\n\n375\n00:22:49.058 --> 00:22:51.315\nI wonder how this is gonna play out?\n\n376\n00:22:51.315 --> 00:22:53.350\nYou got any thoughts,\nMike, what do you think?\n\n377\n00:22:53.350 --> 00:22:54.897\n&gt;&gt; I'm thinking it can't be good.\n\n378\n00:22:54.897 --> 00:22:57.040\nA mismatched number of\ncommas doesn't sound right.\n\n379\n00:22:57.040 --> 00:23:01.794\n&gt;&gt; Yeah, yeah, and for\nthe most part in JavaScript that's bad.\n\n380\n00:23:01.794 --> 00:23:02.614\nYou shouldn't do that.\n\n381\n00:23:02.614 --> 00:23:05.550\n&gt;&gt; [LAUGH]\n&gt;&gt; There were ways to handle that, but\n\n382\n00:23:05.550 --> 00:23:06.790\nthey were really laborious.\n\n383\n00:23:06.790 --> 00:23:11.970\nI found them laborious, maybe you\ndidn't if you've done that before.\n\n384\n00:23:11.970 --> 00:23:18.340\nSo let me comment out these other console\nlogs here just to bring some clarity.\n\n385\n00:23:20.220 --> 00:23:21.960\nThere's my message.\n\n386\n00:23:21.960 --> 00:23:23.310\nAnd there's my data.\n\n387\n00:23:23.310 --> 00:23:28.310\nNotice, what is data now?\n\n388\n00:23:28.310 --> 00:23:31.180\nWell, data is a full blown array, and\n\n389\n00:23:31.180 --> 00:23:35.530\nnow I can just manipulate\neverything else together.\n\n390\n00:23:35.530 --> 00:23:40.360\nWell, that's pretty cool, so am I only\nlimited to a single argument, and\n\n391\n00:23:40.360 --> 00:23:41.860\nthen dot dot dot?\n\n392\n00:23:41.860 --> 00:23:45.550\nWell, actually, if I make a copy of this,\njust so we can compare.\n\n393\n00:23:45.550 --> 00:23:49.628\nI'm gonna comment this out,\ncuz otherwise we'll get craziness.\n\n394\n00:23:49.628 --> 00:23:56.198\nAnd what if I say first and\nthen dot, dot, dot data?\n\n395\n00:23:56.198 --> 00:24:02.342\nI do have to add, A console.log first.\n\n396\n00:24:02.342 --> 00:24:03.888\nBut I wanna keep the same arguments.\n\n397\n00:24:03.888 --> 00:24:05.600\nLet's just see how plays out.\n\n398\n00:24:07.100 --> 00:24:12.888\nWell hey, first is now assigned to the\nfirst parameter after message, all right?\n\n399\n00:24:12.888 --> 00:24:16.880\nSo, message is the first thing, and\n\n400\n00:24:16.880 --> 00:24:21.320\nthen first would be,\nwhat's the first of the original data?\n\n401\n00:24:21.320 --> 00:24:24.730\nFirst was originally bound\nup into this ...data.\n\n402\n00:24:24.730 --> 00:24:27.300\nBut now I said, I want the first one,\nand then everything else.\n\n403\n00:24:28.500 --> 00:24:30.293\nWell, it gave me everything else,\nbut notice,\n\n404\n00:24:30.293 --> 00:24:33.010\neven though this was a single element,\nI still get it in array.\n\n405\n00:24:33.010 --> 00:24:36.770\nSo the dot dot dot collects\neverything into an array, and\n\n406\n00:24:36.770 --> 00:24:41.160\nnow I can use my for loops,\nmy map, my filter within that.\n\n407\n00:24:42.280 --> 00:24:43.630\nNow how would this actually be used?\n\n408\n00:24:43.630 --> 00:24:45.800\nThis is kind of a weird example.\n\n409\n00:24:45.800 --> 00:24:49.576\nWhat if you had a function that\nyou wanted to operate, but\n\n410\n00:24:49.576 --> 00:24:52.889\nyou didn't know how many\npieces of information?\n\n411\n00:24:52.889 --> 00:24:56.660\nYou know you're gonna get the first one,\nand something else, right?\n\n412\n00:24:56.660 --> 00:25:01.310\nAnd you can almost think of function\narguments as a collection of information.\n\n413\n00:25:01.310 --> 00:25:03.610\nSo how would you use that?\n\n414\n00:25:03.610 --> 00:25:05.030\nHow is this advantageous to you?\n\n415\n00:25:06.120 --> 00:25:07.950\nThat is a great question.\n\n416\n00:25:07.950 --> 00:25:10.360\nSo let's answer said question.\n\n417\n00:25:10.360 --> 00:25:14.351\nNow, I know personally I\nlove paying sales tax.\n\n418\n00:25:14.351 --> 00:25:15.350\n&gt;&gt; [LAUGH]\n\n419\n00:25:15.350 --> 00:25:16.850\n&gt;&gt; And-\n&gt;&gt; Who doesn't?\n\n420\n00:25:16.850 --> 00:25:17.373\n&gt;&gt; Who doesn't?\n\n421\n00:25:17.373 --> 00:25:21.643\nIt's a necessary evil, it's there,\nor maybe it's a necessary good,\n\n422\n00:25:21.643 --> 00:25:25.000\nthat's a matter of perspective But\n\n423\n00:25:25.000 --> 00:25:30.740\nif I wanted to calculate sales tax,\nif I had a list of purchases, I could.\n\n424\n00:25:30.740 --> 00:25:32.940\nI could put those into an array.\n\n425\n00:25:32.940 --> 00:25:37.160\nBut what if I just had a function that\ntook the tax rate, and then whatever else\n\n426\n00:25:37.160 --> 00:25:42.910\nI put in there, and I could just\nget out the responding amounts?\n\n427\n00:25:42.910 --> 00:25:44.521\nOkay, well, let's see how that works.\n\n428\n00:25:44.521 --> 00:25:46.198\nSo this is the tax rate.\n\n429\n00:25:46.198 --> 00:25:50.680\nAnd then amounts.\n\n430\n00:25:50.680 --> 00:25:53.120\nNotice there's nothing\nspecial about that data name.\n\n431\n00:25:53.120 --> 00:25:56.040\nI can say dot, dot, dot, anything,\nI also could have put dot, dot,\n\n432\n00:25:56.040 --> 00:25:57.970\ndot, cheeseburger, and\n\n433\n00:25:57.970 --> 00:26:01.360\nas long I use that variable name\nconsistently, I still have it.\n\n434\n00:26:02.480 --> 00:26:06.609\nAnd all this gonna do is amounts.map.\n\n435\n00:26:08.910 --> 00:26:16.010\nNum 2 tax rate times num.\n\n436\n00:26:16.010 --> 00:26:17.530\nNotice I'm using an arrow function.\n\n437\n00:26:17.530 --> 00:26:19.360\nI'm using my array methods.\n\n438\n00:26:19.360 --> 00:26:25.060\nI now have collected everything into\nan array, and how would we work with this?\n\n439\n00:26:25.060 --> 00:26:27.670\nWell, I wanna make up\nan artificial tax rate, because\n\n440\n00:26:28.900 --> 00:26:31.446\ndoing math with tiny little numbers is-\n&gt;&gt; [LAUGH]\n\n441\n00:26:31.446 --> 00:26:32.870\n&gt;&gt; Sometimes laborious.\n\n442\n00:26:32.870 --> 00:26:35.501\nLet's just say the tax rate is 50%.\n\n443\n00:26:35.501 --> 00:26:40.143\n50%, that's a pretty steep tax,\nbut it's there.\n\n444\n00:26:40.143 --> 00:26:42.424\nAnd go 2, 4, 6, 8.\n\n445\n00:26:42.424 --> 00:26:48.784\nWell, I skipped around my [SOUND].\n\n446\n00:26:48.784 --> 00:26:50.700\nSo let's just say taxes.\n\n447\n00:26:52.240 --> 00:26:54.180\nThere we go.\n\n448\n00:26:54.180 --> 00:26:55.613\nLet taxes equals, and\n\n449\n00:26:55.613 --> 00:27:00.301\nI'm using let there because I know I'm\ngonna change this up a little bit.\n\n450\n00:27:04.483 --> 00:27:08.300\nAnd if I refresh, well what is 50% of 2?\n\n451\n00:27:08.300 --> 00:27:12.150\nThat is in fact, 1, 2, 3, and 4.\n\n452\n00:27:12.150 --> 00:27:16.770\nNow, that's how much taxes I've paid for\neach purchase.\n\n453\n00:27:16.770 --> 00:27:20.750\nWell, I could also make a change to this.\n\n454\n00:27:20.750 --> 00:27:24.169\nAnd actually just find out, how much\nhave I paid in taxes for the year?\n\n455\n00:27:24.169 --> 00:27:27.685\nAnd you could see this could be something\nmaybe a web based accounting software\n\n456\n00:27:27.685 --> 00:27:29.080\nwould need.\n\n457\n00:27:29.080 --> 00:27:32.270\nThese are small,\nlittle tweaks that you would need.\n\n458\n00:27:32.270 --> 00:27:37.440\nSo let's change this not from sales tax,\nlet's not call it sales tax.\n\n459\n00:27:37.440 --> 00:27:41.170\nBut instead of that,\nlet's call it sales tax total.\n\n460\n00:27:41.170 --> 00:27:46.480\nAnd I like this ...amounts, because maybe\nI've only made three purchases this year,\n\n461\n00:27:46.480 --> 00:27:48.550\nor maybe I've made 5,000.\n\n462\n00:27:48.550 --> 00:27:53.319\nI have no way of knowing, but if I do dot,\ndot, dot, I can do whatever I want to.\n\n463\n00:27:53.319 --> 00:27:56.707\nI gotta make one little\nchange here though.\n\n464\n00:27:56.707 --> 00:28:00.170\nAnd this is, maybe you've seen\nthis before, may be you haven't.\n\n465\n00:28:00.170 --> 00:28:02.690\nBut this is your little extra for the day.\n\n466\n00:28:02.690 --> 00:28:05.550\nThere's a new method called reduce.\n\n467\n00:28:05.550 --> 00:28:07.600\nAnd it can actually\ntake an arrow function.\n\n468\n00:28:09.240 --> 00:28:11.880\nAnd it's asking how do I combine these?\n\n469\n00:28:11.880 --> 00:28:14.100\nYou can think of reduces,\nhow do I combine these?\n\n470\n00:28:14.100 --> 00:28:17.890\nReduce, take a collection,\nmake a single number, and\n\n471\n00:28:17.890 --> 00:28:20.740\nthen the second argument is,\nwhere do I start?\n\n472\n00:28:20.740 --> 00:28:22.620\nWell I know I want to add these.\n\n473\n00:28:22.620 --> 00:28:24.231\nNotice I'm taking x and y, so\n\n474\n00:28:24.231 --> 00:28:26.944\nif I'm looking at these I\ncould take two and four.\n\n475\n00:28:26.944 --> 00:28:28.628\nHow do I wanna add those?\n\n476\n00:28:28.628 --> 00:28:30.376\nOr how do I wanna combine those?\n\n477\n00:28:30.376 --> 00:28:31.724\nOr reduce those?\n\n478\n00:28:31.724 --> 00:28:35.102\nI wanna add them, and\nthat's all this arrow function reflects.\n\n479\n00:28:35.102 --> 00:28:36.197\nSo I wanna add them.\n\n480\n00:28:36.197 --> 00:28:37.483\nAnd where do I wanna start?\n\n481\n00:28:37.483 --> 00:28:40.630\nBecause for this first one I have\nto have something to start with,\n\n482\n00:28:40.630 --> 00:28:43.981\nand I don't have anything before it,\nso I start at zero, right?\n\n483\n00:28:43.981 --> 00:28:45.990\nSo I just start counting.\n\n484\n00:28:45.990 --> 00:28:48.612\nAnd now,\nif I change this to salesTaxTotal,\n\n485\n00:28:51.956 --> 00:28:55.830\nI've paid $10 in taxes in\nall of my purchases today.\n\n486\n00:28:55.830 --> 00:29:00.261\nAnd this is a pretty succinct function,\nbut it reads very nicely.\n\n487\n00:29:00.261 --> 00:29:02.650\nTakes the tax rates and the amounts.\n\n488\n00:29:02.650 --> 00:29:05.860\nThe amounts get calculated for taxes.\n\n489\n00:29:05.860 --> 00:29:10.036\nAnd get added together starting at zero,\nand there you go.\n\n490\n00:29:10.036 --> 00:29:11.704\nIt's a very powerful tool,\n\n491\n00:29:11.704 --> 00:29:16.940\nand something that's really nice based\non what are called variadic functions.\n\n492\n00:29:16.940 --> 00:29:21.310\nVariadic meaning, they can pick\na varying number of arguments.\n\n493\n00:29:21.310 --> 00:29:23.978\nI like the Resp Prems operator.\n\n494\n00:29:23.978 --> 00:29:27.340\nThe fat arrow is really nice,\nbe careful when you you use it.\n\n495\n00:29:27.340 --> 00:29:31.940\nAs well as the default values, it's made\nmy development life a great deal easier.\n\n496\n00:29:31.940 --> 00:29:33.880\n&gt;&gt; All right Justin, fantastic.\n\n497\n00:29:33.880 --> 00:29:36.330\nGreat explanations and demonstrations of\n\n498\n00:29:36.330 --> 00:29:41.380\nwhat ES6 has brought to functions within\nJavaScript, so we appreciate that.\n\n499\n00:29:41.380 --> 00:29:43.540\nWe hope everybody out there\nenjoyed watching this one.\n\n500\n00:29:43.540 --> 00:29:45.000\nSigning off for IT Pro TV.\n\n501\n00:29:45.000 --> 00:29:46.660\nI've been your host, Mike Rodrick.\n\n502\n00:29:46.660 --> 00:29:47.600\n&gt;&gt; And I'm Justin Dennison.\n\n503\n00:29:47.600 --> 00:29:49.240\n&gt;&gt; And we'll see you next time.\n\n504\n00:29:49.240 --> 00:29:55.840\n[MUSIC]\n\n505\n00:29:55.840 --> 00:29:59.018\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "204913141"
        },
        {
          "description": "In this episode, Justin and Mike begin their look into changes to strings. They demonstrate several new methods for working with strings. Specifically, they look at startsWith, endsWith, includes, and repeat.",
          "length": "1468",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-5-1-1-changes_to_strings-020817-PGM.00_24_14_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-5-1-1-changes_to_strings-020817-PGM.00_24_14_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-5-1-1-changes_to_strings-020817-PGM.00_24_14_05.Still001-sm.jpg",
          "title": "Changes to Strings",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:01.735\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:01.735 --> 00:00:06.551\n[CROSSTALK]\n\n3\n00:00:06.551 --> 00:00:08.376\n[MUSIC]\n\n4\n00:00:08.376 --> 00:00:12.365\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.365 --> 00:00:15.815\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n6\n00:00:15.815 --> 00:00:17.650\nI'm your host, Mike Rodrick.\n\n7\n00:00:17.650 --> 00:00:20.396\nAnd today,\nwe're doing new features in ES6.\n\n8\n00:00:20.396 --> 00:00:21.297\nIn this episode,\n\n9\n00:00:21.297 --> 00:00:25.430\nwe're gonna be looking at some of\nthe changes they've made to strings.\n\n10\n00:00:25.430 --> 00:00:28.763\nAnd here to show us what they've done and\nhow we can take advantage of that, is Mr.\n\n11\n00:00:28.763 --> 00:00:29.330\nJustin Dennison.\n\n12\n00:00:29.330 --> 00:00:30.310\nWelcome back, Justin.\n\n13\n00:00:30.310 --> 00:00:31.830\n&gt;&gt; Thanks for having me back, Mike.\n\n14\n00:00:31.830 --> 00:00:34.580\nStrings are actually starting to grow up,\nI can tell you.\n\n15\n00:00:34.580 --> 00:00:37.550\nIn previous versions of JavaScript,\n\n16\n00:00:37.550 --> 00:00:40.870\nstrings were not always\nthe nicest thing to deal with.\n\n17\n00:00:40.870 --> 00:00:45.210\nA lot of plus signs,\na lot of almost magic can occur.\n\n18\n00:00:45.210 --> 00:00:49.520\nSo if you've ever played\nwith JavaScript strings,\n\n19\n00:00:49.520 --> 00:00:54.470\nI need to build a URL or a series of\nuser inputs, build up a response.\n\n20\n00:00:54.470 --> 00:00:57.970\nAnd that usually involves either\nputting things in an array and\n\n21\n00:00:57.970 --> 00:01:02.640\ncalling join on them and hoping,\nhoping that the user response\n\n22\n00:01:02.640 --> 00:01:07.640\nworked out with spacing and such, and\nthe same thing happened with plus signs.\n\n23\n00:01:07.640 --> 00:01:11.826\nIn addition to manipulation\nof strings with functions,\n\n24\n00:01:11.826 --> 00:01:15.237\nyou had to split and\nslice, and I don't know.\n\n25\n00:01:15.237 --> 00:01:18.724\nAnd not only that I just want to check to\nsee if I have a series of questions or\n\n26\n00:01:18.724 --> 00:01:20.260\nif something is commented out.\n\n27\n00:01:21.320 --> 00:01:24.428\nI had to run through\nindividual characters,\n\n28\n00:01:24.428 --> 00:01:26.811\ndo lots of loops on loops on loops.\n\n29\n00:01:26.811 --> 00:01:30.355\nAnd if you've ever done loops, and\nloops, and loops, well, I get dizzy.\n\n30\n00:01:30.355 --> 00:01:31.760\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n31\n00:01:31.760 --> 00:01:34.660\nthat's pretty much how I felt when I\nwas playing around with JavaScript.\n\n32\n00:01:34.660 --> 00:01:39.750\nHowever, ES6 has added some wonderful\nfeatures to the string data type.\n\n33\n00:01:40.860 --> 00:01:44.650\nWe have new prototype methods\nthat allow me to quickly test for\n\n34\n00:01:44.650 --> 00:01:46.720\ncertain aspects of the string.\n\n35\n00:01:46.720 --> 00:01:49.600\nAnd not only that, but\nwe have template strings.\n\n36\n00:01:49.600 --> 00:01:54.360\nAnd template strings allow me\nto write a patterned-like string\n\n37\n00:01:54.360 --> 00:01:59.210\nto where replacement occurs with variable\nnames instead of all those plus signs,\n\n38\n00:01:59.210 --> 00:02:03.910\nwhere I would constantly mess up\nthe spacing or various other punctuation.\n\n39\n00:02:03.910 --> 00:02:09.490\nIn addition to, multiline is no longer\neither a bunch of escape characters or\n\n40\n00:02:09.490 --> 00:02:13.170\nplus signs, and hoping that you\ndon't get an interpreter error.\n\n41\n00:02:13.170 --> 00:02:15.040\nSyntax not allowed.\n\n42\n00:02:15.040 --> 00:02:19.610\nAgain, those template strings allow you\nfor multiline strings with just one or\n\n43\n00:02:19.610 --> 00:02:20.870\ntwo tweeks.\n\n44\n00:02:20.870 --> 00:02:21.730\nIt's wonderful.\n\n45\n00:02:21.730 --> 00:02:23.380\nIt makes me incredibly happy.\n\n46\n00:02:23.380 --> 00:02:27.770\nIt's actually one of the features that,\nI'm taking a little bit of a chance but\n\n47\n00:02:27.770 --> 00:02:30.730\nI can already go ahead and\nuse these in some of\n\n48\n00:02:30.730 --> 00:02:34.760\nmy newer projects because I'm like, it's\ngoing to make my life a little easier.\n\n49\n00:02:34.760 --> 00:02:35.860\nI'll deal with it on the back end.\n\n50\n00:02:35.860 --> 00:02:37.550\nMaybe it's not the best idea to take,\n\n51\n00:02:37.550 --> 00:02:41.600\nbut I'm willing to take that\nrisk because it is so awesome.\n\n52\n00:02:41.600 --> 00:02:42.770\n&gt;&gt; Live on the edge, Justin.\n\n53\n00:02:42.770 --> 00:02:45.278\n&gt;&gt; Yeah, I do like to live on the edge.\n\n54\n00:02:45.278 --> 00:02:48.330\nI hear there's a great song that has\nsomething to do with living on the edge.\n\n55\n00:02:48.330 --> 00:02:49.040\n&gt;&gt; I believe so.\n\n56\n00:02:49.040 --> 00:02:49.870\n&gt;&gt; Yeah, yeah.\n\n57\n00:02:49.870 --> 00:02:53.720\nSo I think the best way to\nsee strings in action is\n\n58\n00:02:53.720 --> 00:02:57.980\nstart with some of those new methods\nthat make our lives a little bit easier.\n\n59\n00:02:57.980 --> 00:02:59.738\nSee how I use them, and\n\n60\n00:02:59.738 --> 00:03:04.820\nwe'll sprinkle in some of those ES6\nfeatures that make life also easy.\n\n61\n00:03:05.980 --> 00:03:07.210\nSo let's go ahead and take a look.\n\n62\n00:03:07.210 --> 00:03:10.610\nI have my Chrome browser open here and\nI'm gonna open\n\n63\n00:03:10.610 --> 00:03:15.290\nan index.HTML which is just my doorway to\nall the fun JavaScript that I'm writing.\n\n64\n00:03:16.690 --> 00:03:21.352\nAnd I'm gonna make sure that I'm\nopening the correct index.HTML because\n\n65\n00:03:21.352 --> 00:03:23.799\notherwise it's going to be a bad time.\n\n66\n00:03:23.799 --> 00:03:26.720\nAnd then I'm going to make sure\nthat my Chrome dev tools are open.\n\n67\n00:03:28.530 --> 00:03:31.224\nAnd make sure that you are on the console.\n\n68\n00:03:31.224 --> 00:03:36.727\nWe'll zoom that in a little bit.\n\n69\n00:03:36.727 --> 00:03:37.262\nThe Chrome dev tools by default,\neven if I'm just\n\n70\n00:03:37.262 --> 00:03:37.806\nprogramming, I tend to have\nto zoom that in. It's.\n\n71\n00:03:37.806 --> 00:03:40.470\n&gt;&gt; [LAUGH]\n&gt;&gt; Tiny, tiny, tiny text.\n\n72\n00:03:40.470 --> 00:03:44.850\nAnd then I'm going to hop over into my\nAtom text editor and add a project file.\n\n73\n00:03:46.200 --> 00:03:53.266\nAnd it's gonna be the same project folder,\nexcuse me, not file, as my index.html.\n\n74\n00:03:53.266 --> 00:03:55.578\nSo my index.html is just boilerplate.\n\n75\n00:03:55.578 --> 00:04:01.745\nThere's my app.js file, and then my\napp.js is where all the fun begins.\n\n76\n00:04:01.745 --> 00:04:05.676\nSo let's look back at how I\nwould do this like old style,\n\n77\n00:04:05.676 --> 00:04:10.455\nsome of these string operations,\njust so we can kind of cringe and-\n\n78\n00:04:10.455 --> 00:04:11.434\n&gt;&gt; [LAUGH]\n\n79\n00:04:11.434 --> 00:04:12.975\n&gt;&gt; Grit our teeth and go yeah,\n\n80\n00:04:12.975 --> 00:04:15.625\nthat's how it should be done.\n\n81\n00:04:15.625 --> 00:04:17.970\n&gt;&gt; We'll better appreciate\nthe new features then, right?\n\n82\n00:04:17.970 --> 00:04:20.800\n&gt;&gt; Exactly, I'm a full proponent of\n\n83\n00:04:20.800 --> 00:04:25.034\nyou can't appreciate some of the new stuff\nuntil you've suffered through the old, so.\n\n84\n00:04:26.320 --> 00:04:27.460\nSo the old ways.\n\n85\n00:04:27.460 --> 00:04:29.220\nJust really quick here.\n\n86\n00:04:29.220 --> 00:04:33.100\nSo if I wanted to,\nI don't use var cuz it is old.\n\n87\n00:04:33.100 --> 00:04:38.560\nIf I wanted to have a response,\nlike responding to a user.\n\n88\n00:04:40.340 --> 00:04:43.932\nAnd I wanna say,\n\n89\n00:04:43.932 --> 00:04:48.820\n'Hello' + user +.\n\n90\n00:04:48.820 --> 00:04:50.850\nI just wanna create a greeting, right?\n\n91\n00:04:50.850 --> 00:04:53.250\nAnd you log in, Hello,\nwhoever just logged in.\n\n92\n00:04:53.250 --> 00:05:00.190\nThat would be typically from some other\nsystem, and we'll just go with Tony.\n\n93\n00:05:00.190 --> 00:05:02.595\nSo if I actually have that response,\n\n94\n00:05:02.595 --> 00:05:05.350\nthat's how I would put all\nof my strings together.\n\n95\n00:05:05.350 --> 00:05:06.660\nWell, that's one way.\n\n96\n00:05:06.660 --> 00:05:09.180\nThat's a very common\npattern you would see.\n\n97\n00:05:09.180 --> 00:05:10.810\nAnd let's see what that\nresponse looks like.\n\n98\n00:05:11.940 --> 00:05:15.510\nAnd there's one of the issues\nthat I always have.\n\n99\n00:05:15.510 --> 00:05:16.604\nIt just goes HelloTony!\n\n100\n00:05:16.604 --> 00:05:19.839\n&gt;&gt; [LAUGH]\n&gt;&gt; It's all together, no spacing or\n\n101\n00:05:19.839 --> 00:05:22.207\nwho knows what people are like.\n\n102\n00:05:22.207 --> 00:05:24.552\nIs that a place, hellotony, I don't know.\n\n103\n00:05:24.552 --> 00:05:25.180\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n104\n00:05:25.180 --> 00:05:29.230\nyou always had to make sure you had\nappropriate spaces within each string,\n\n105\n00:05:29.230 --> 00:05:32.050\nand it was not fun.\n\n106\n00:05:32.050 --> 00:05:38.317\nThe alternative to that was\nmaking things into an array.\n\n107\n00:05:38.317 --> 00:05:46.037\nAnd that would be so if I replaced\nthat response I could say Hello ',\n\n108\n00:05:46.037 --> 00:05:50.520\nuser, '!', and then call.join.\n\n109\n00:05:53.305 --> 00:05:56.670\nAnd let's see what that response,\nand that would actually output.\n\n110\n00:05:56.670 --> 00:05:57.630\nThen that's kind of weird.\n\n111\n00:05:57.630 --> 00:06:00.100\nAnd now I have to make an array,\njoin them together, and\n\n112\n00:06:00.100 --> 00:06:02.500\nit's still prone to\nthose same type issues.\n\n113\n00:06:02.500 --> 00:06:05.190\n&gt;&gt; Yeah, especially if any of those\nvalues are input from a user.\n\n114\n00:06:05.190 --> 00:06:06.500\nIs there a space on the end of it?\n\n115\n00:06:06.500 --> 00:06:07.590\nHow is it gonna plug it together?\n\n116\n00:06:07.590 --> 00:06:10.770\n&gt;&gt; Yeah, so\nI didn't particularly enjoy this.\n\n117\n00:06:10.770 --> 00:06:14.095\nBut this was the way we had to work for\na long time.\n\n118\n00:06:14.095 --> 00:06:18.415\nIn addition to,\nwhat if I wanted to have hello,\n\n119\n00:06:18.415 --> 00:06:22.850\ncome to the next line, Tony, how are you?\n\n120\n00:06:22.850 --> 00:06:26.780\nSo that would be kind of a weird response,\nor better yet,\n\n121\n00:06:26.780 --> 00:06:29.230\nit would be like hello Tony, how are you?\n\n122\n00:06:29.230 --> 00:06:34.290\nIf I wanted a multiline response,\nthen okay, well, Hello.\n\n123\n00:06:35.540 --> 00:06:39.558\nThen I would do the user and\n\n124\n00:06:39.558 --> 00:06:44.495\nthen I want to have a multiline.\n\n125\n00:06:44.495 --> 00:06:47.852\nI'd have to come down here,\nand is that reserved?\n\n126\n00:06:47.852 --> 00:06:49.746\nHow are you?\n\n127\n00:06:49.746 --> 00:06:53.009\nLet's see if that works.\n\n128\n00:06:53.009 --> 00:06:56.120\nOkay, you gotta change\nout the variable name.\n\n129\n00:06:59.540 --> 00:07:02.239\nWell, that didn't actually\nbreak to the new line.\n\n130\n00:07:02.239 --> 00:07:07.331\nAnd having multilines, well,\nlet me just try to see if I can say,\n\n131\n00:07:07.331 --> 00:07:09.840\nHello, and hard code the user.\n\n132\n00:07:11.980 --> 00:07:12.480\nHow are you?\n\n133\n00:07:14.946 --> 00:07:18.091\nInvalid token, and that's because\nwhen I would break to a new line,\n\n134\n00:07:18.091 --> 00:07:19.940\nthere would be a parse error.\n\n135\n00:07:19.940 --> 00:07:23.460\nSo one of the ways is\nI could put this set.\n\n136\n00:07:23.460 --> 00:07:25.670\nI always get those mixed up,\nforward or backslash.\n\n137\n00:07:25.670 --> 00:07:26.985\nIt's the one right above your Enter key.\n\n138\n00:07:26.985 --> 00:07:30.055\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm more about keyboard positions than\n\n139\n00:07:30.055 --> 00:07:31.389\nI am remembering names in those.\n\n140\n00:07:32.670 --> 00:07:35.940\nSo that still doesn't\nbreak to the new line.\n\n141\n00:07:35.940 --> 00:07:39.784\nThen I had to go look up that if I\nactually wanted to break to a new line I\n\n142\n00:07:39.784 --> 00:07:42.492\nhad to put in an escape character for\na new line.\n\n143\n00:07:42.492 --> 00:07:46.050\nAnd then it breaks again\nbecause I haven't escaped that.\n\n144\n00:07:46.050 --> 00:07:48.990\nIt was just a giant pain.\n\n145\n00:07:48.990 --> 00:07:52.171\nAnd I didn't particularly enjoy this, and\nI know a lot of people didn't enjoy this.\n\n146\n00:07:52.171 --> 00:07:57.278\nSo if you had multiline responses or\nstrings in JavaScript,\n\n147\n00:07:57.278 --> 00:08:00.991\nit was a giant headache,\nbut that has been.\n\n148\n00:08:00.991 --> 00:08:01.871\nRelieved for us.\n\n149\n00:08:01.871 --> 00:08:05.905\nSo, let's just get rid of those and\nact like they never happened.\n\n150\n00:08:05.905 --> 00:08:08.591\nJust gonna leave those in the past.\n\n151\n00:08:08.591 --> 00:08:10.496\nSo, that's one way.\n\n152\n00:08:10.496 --> 00:08:14.497\nNow, I'm not gonna go through the loops,\non loops, on loops, to find out whether it\n\n153\n00:08:14.497 --> 00:08:18.250\nstarts with a character, includes\na character, ends with a character.\n\n154\n00:08:18.250 --> 00:08:20.814\nWe're just gonna see\nhow those work in Situ.\n\n155\n00:08:20.814 --> 00:08:24.806\nAnd then we're gonna come back\nto redoing these response and\n\n156\n00:08:24.806 --> 00:08:29.390\nmultilines with the new templates\nthat is provided by ES6.\n\n157\n00:08:29.390 --> 00:08:35.739\nSo here are the new\nstring methods we have.\n\n158\n00:08:35.739 --> 00:08:40.158\nIncludes, starts with, ends with, and\n\n159\n00:08:40.158 --> 00:08:46.860\nthese are pretty self-evident\nof what these do, and repeat.\n\n160\n00:08:46.860 --> 00:08:49.077\nNow repeat's kind of a weird one.\n\n161\n00:08:49.077 --> 00:08:51.497\nIt has some limited use cases.\n\n162\n00:08:51.497 --> 00:08:53.988\nBut it is handy especially,\nif I want, say,\n\n163\n00:08:53.988 --> 00:08:57.013\nhas a lot of spaces at the beginning or\nthe end of a word.\n\n164\n00:08:57.013 --> 00:09:01.410\nOr I wanna repeat a character for\na line break or something.\n\n165\n00:09:01.410 --> 00:09:02.970\nSo what does includes do?\n\n166\n00:09:04.180 --> 00:09:12.200\nSo let's just start with some veggies and\nI'm gonna start with carrot.\n\n167\n00:09:12.200 --> 00:09:17.450\nAnd I'm actually gonna put that backslash\nin, which is a new line character.\n\n168\n00:09:17.450 --> 00:09:19.630\nIt should be able to split on that.\n\n169\n00:09:20.660 --> 00:09:26.150\nAnd better yet, let me just change\nthat to a comma, just for clarity.\n\n170\n00:09:26.150 --> 00:09:30.990\nSo carrot, tomatoes, even though tomato\nis not typically considered a veggie,\n\n171\n00:09:30.990 --> 00:09:35.831\nwe'll call it a veggie today, potato, and\n\n172\n00:09:35.831 --> 00:09:38.780\nbroccoli.\n\n173\n00:09:38.780 --> 00:09:41.439\nSo, there are my veggies,\nI have a comma separated list.\n\n174\n00:09:43.180 --> 00:09:50.104\nAnd I want to see, well,\ndoes it include the letter a?\n\n175\n00:09:50.104 --> 00:09:54.036\nI just wanna run through and\nsee if it includes the letter a.\n\n176\n00:09:54.036 --> 00:10:00.142\nSo, I'm gonna start by\nsplitting includesA.\n\n177\n00:10:00.142 --> 00:10:02.099\nSo I'm gonna split\nthe veggies into an array.\n\n178\n00:10:03.900 --> 00:10:07.790\nAnd this would be a common pattern for\nprocessing strings.\n\n179\n00:10:07.790 --> 00:10:10.310\nAnd after I split, I want to map.\n\n180\n00:10:10.310 --> 00:10:15.818\nAnd for each string, I'm gonna say\n\n181\n00:10:15.818 --> 00:10:20.778\nstr.includes[\"a\")] and\n\n182\n00:10:20.778 --> 00:10:26.112\nlet's just what that prints out.\n\n183\n00:10:26.112 --> 00:10:33.710\nSo, print out, Veggies.\n\n184\n00:10:33.710 --> 00:10:37.640\nVeggies, reference error,\ntrue, true, true, false.\n\n185\n00:10:37.640 --> 00:10:41.870\nSo now I can quickly see,\ndo I include a letter?\n\n186\n00:10:41.870 --> 00:10:43.651\nWell, this is kind of a contrived example.\n\n187\n00:10:43.651 --> 00:10:47.746\nBut if you've ever had to run through and\nlook through maybe logs or\n\n188\n00:10:47.746 --> 00:10:51.846\nsome kind of user input where\nthere's a character that determines\n\n189\n00:10:51.846 --> 00:10:54.712\nwhether something should be included or\nnot.\n\n190\n00:10:54.712 --> 00:10:58.651\nLike a comment character such as,\nwell, I'm on the list and\n\n191\n00:10:58.651 --> 00:11:04.320\nthese two veggies, I've looked\nthrough my cabinet and I already have.\n\n192\n00:11:04.320 --> 00:11:07.520\nSo, I've kind of made a list digitally and\n\n193\n00:11:07.520 --> 00:11:09.800\nI just wanna see what\nare the things I still need to get.\n\n194\n00:11:11.100 --> 00:11:15.668\nSo, if I look and I say still need,\n\n195\n00:11:15.668 --> 00:11:20.396\nthen I say veggies.split again and\n\n196\n00:11:20.396 --> 00:11:25.292\nI'm just leaving the string a lone.\n\n197\n00:11:25.292 --> 00:11:29.154\nAnd I'm gonna map,\nString to string, includes.\n\n198\n00:11:32.798 --> 00:11:35.740\nAnd actually I'm going to say\nit does not include that.\n\n199\n00:11:35.740 --> 00:11:38.010\nBecause those are the ones\nthat I still need.\n\n200\n00:11:38.010 --> 00:11:41.480\nSo I'm gonna filter through and get those.\n\n201\n00:11:41.480 --> 00:11:43.340\nAnd notice I used map, and\n\n202\n00:11:43.340 --> 00:11:46.815\nmap's gonna give us a very\nsimilar output as includesA.\n\n203\n00:11:47.840 --> 00:11:51.130\nAnd I'm just gonna change\nthis includesA to stillNeed.\n\n204\n00:11:53.400 --> 00:11:56.970\nAnd that's false, true, false, true,\nso that's actually what I want.\n\n205\n00:11:56.970 --> 00:12:03.590\nBut what I want in the ultimate end is\nthe list of veggies that I still need.\n\n206\n00:12:03.590 --> 00:12:06.670\nSo I'm gonna change this map to a filter.\n\n207\n00:12:07.740 --> 00:12:09.610\nAnd I still need tomato and broccoli.\n\n208\n00:12:10.900 --> 00:12:13.720\nAnd I already have carrot and potato.\n\n209\n00:12:13.720 --> 00:12:16.135\nSo that's really nice.\n\n210\n00:12:16.135 --> 00:12:22.050\nWell, it includes that hashtag,\nbut this is not very robust.\n\n211\n00:12:22.050 --> 00:12:26.110\nActually, I could do something\nlike this and break this logic.\n\n212\n00:12:26.110 --> 00:12:27.182\nWell, that's not what I want.\n\n213\n00:12:27.182 --> 00:12:30.080\nI actually want to see if\nit's at the beginning.\n\n214\n00:12:30.080 --> 00:12:31.020\nSo that's my convention.\n\n215\n00:12:32.060 --> 00:12:36.010\nAnd if I go, well, I actually need tomato,\n\n216\n00:12:36.010 --> 00:12:39.410\nsomeone just made a oopsy\ndaisy when creating the list.\n\n217\n00:12:39.410 --> 00:12:41.950\nSo how do I manage that?\n\n218\n00:12:41.950 --> 00:12:47.980\nWell, there is actually a wonderful\nadditional method called starts with.\n\n219\n00:12:47.980 --> 00:12:50.110\nIt's fairly self-explanatory.\n\n220\n00:12:50.110 --> 00:12:54.150\nYou're testing to see what is\nat the beginning of a line.\n\n221\n00:12:54.150 --> 00:12:56.320\nNow, here's something to keep in mind.\n\n222\n00:12:56.320 --> 00:12:58.020\nIf this is user input, and\n\n223\n00:12:58.020 --> 00:13:01.950\nyou're wanting to see if it starts with\na certain letter or a special character,\n\n224\n00:13:03.050 --> 00:13:08.470\nbe careful about errant whitespace\nthat may lead into that.\n\n225\n00:13:08.470 --> 00:13:10.990\nSo I would always trim\nthose strings down and\n\n226\n00:13:10.990 --> 00:13:14.199\nmake sure that I'm getting\njust standard characters.\n\n227\n00:13:14.199 --> 00:13:19.790\nAnd not whitespace characters, before\nusing the starts with, and even ends with.\n\n228\n00:13:19.790 --> 00:13:21.340\nBecause it'll give it weird results.\n\n229\n00:13:21.340 --> 00:13:22.753\nYou're like, does this start with an A?\n\n230\n00:13:22.753 --> 00:13:24.873\nAnd it says, no, and it says apples.\n\n231\n00:13:24.873 --> 00:13:28.936\nBut what you can't see is there's\nspace space space apples and\n\n232\n00:13:28.936 --> 00:13:31.320\nthat's something that I've done.\n\n233\n00:13:31.320 --> 00:13:35.880\nI've typed passwords and usernames and\nbeen told they're wrong and\n\n234\n00:13:35.880 --> 00:13:37.210\nwent, I'm pretty sure they're right.\n\n235\n00:13:37.210 --> 00:13:40.370\nI use a password manager,\nI've just had to copy and\n\n236\n00:13:40.370 --> 00:13:44.278\npaste cuz the password manager\nwas acting a little flaky on me.\n\n237\n00:13:44.278 --> 00:13:48.886\nAnd what I'd accidentally done is I\ncopied an extra character and pasted it.\n\n238\n00:13:48.886 --> 00:13:55.060\nSo it was like my email and three spaces\nand it was like, that's not correct.\n\n239\n00:13:55.060 --> 00:13:57.669\nBe very careful about that\nwhen you're handling strings.\n\n240\n00:13:58.890 --> 00:14:04.050\nSo if I instead wanna see if they\nstart with the special character,\n\n241\n00:14:04.050 --> 00:14:13.180\nand let's get rid of this over scroll\nshenanigans here, there we go.\n\n242\n00:14:13.180 --> 00:14:15.947\nNow I have carrot,\ntomato, potato, broccoli.\n\n243\n00:14:15.947 --> 00:14:17.400\nThis is already pre-made.\n\n244\n00:14:17.400 --> 00:14:19.810\nLet's assume I can't change that.\n\n245\n00:14:19.810 --> 00:14:20.970\nHow would I go about\n\n246\n00:14:22.190 --> 00:14:27.140\nseeing what are the things that do not\nstart with a hash sign or the pound sign?\n\n247\n00:14:28.830 --> 00:14:34.919\nVery similarly, I can say,\nconst stillNeed.\n\n248\n00:14:34.919 --> 00:14:37.658\nAnd this is kind of a better method.\n\n249\n00:14:37.658 --> 00:14:43.228\nI can say, veggies.split on the comma and\n\n250\n00:14:43.228 --> 00:14:48.400\nthen hit the Enter key a great deal.\n\n251\n00:14:48.400 --> 00:14:49.664\nAnd then I'm gonna map over those.\n\n252\n00:14:49.664 --> 00:14:53.362\nAnd I'm actually gonna employ\nexactly what I just told you.\n\n253\n00:14:53.362 --> 00:14:54.322\nI'm gonna take the string.\n\n254\n00:14:54.322 --> 00:15:02.224\nAnd for each string, I'm going to trim it\nwhich will remove whitespace characters.\n\n255\n00:15:02.224 --> 00:15:07.494\nAnd then I'm going to filter and for\neach one of those strings, the result\n\n256\n00:15:07.494 --> 00:15:13.190\nbeing I've trimmed the whitespace\ncharacters from the beginning and the end.\n\n257\n00:15:13.190 --> 00:15:22.508\nI'm gonna say string.startsWith #.\n\n258\n00:15:22.508 --> 00:15:28.360\nBut in fact, I want to find the ones\nthat do not start with the hash sign.\n\n259\n00:15:28.360 --> 00:15:32.220\nSo I just want the ones that do\nnot start with the hash symbol.\n\n260\n00:15:32.220 --> 00:15:34.370\nAnd that will give me\nthe things that I still need.\n\n261\n00:15:37.000 --> 00:15:40.486\nAnd let's just\nconsole.log(still/Need/Better).\n\n262\n00:15:42.928 --> 00:15:46.241\nAnd it still has the tomato output,\nwhich is exactly\n\n263\n00:15:46.241 --> 00:15:50.890\nwhat I expect because that hash sign\nis just woopsy daisy user input.\n\n264\n00:15:50.890 --> 00:15:53.311\nI have a little more robust of a method.\n\n265\n00:15:53.311 --> 00:15:58.254\nBut originally when I did this in old\nJavaScript, what I would have to do is\n\n266\n00:15:58.254 --> 00:16:03.060\nloop through every single letter or\ngrab the first letter using slice.\n\n267\n00:16:03.060 --> 00:16:06.122\nWhich is a method that's been around for\na while.\n\n268\n00:16:06.122 --> 00:16:10.270\nCheck to see if it is the hash symbol,\nand then give it a yes or no.\n\n269\n00:16:10.270 --> 00:16:11.510\nSo it was a little more involved.\n\n270\n00:16:11.510 --> 00:16:12.900\nThis is a little sleeker.\n\n271\n00:16:12.900 --> 00:16:14.730\nAnd it's a little easier to read.\n\n272\n00:16:14.730 --> 00:16:16.702\nStarts with, I wonder what that does?\n\n273\n00:16:16.702 --> 00:16:17.249\n&gt;&gt; [LAUGH].\n\n274\n00:16:17.249 --> 00:16:19.560\n&gt;&gt; Well, does it start with a character?\n\n275\n00:16:19.560 --> 00:16:20.510\nYeah, that's right.\n\n276\n00:16:20.510 --> 00:16:22.060\nSo now it ends with.\n\n277\n00:16:23.190 --> 00:16:25.850\nI'm actually gonna need\nan additional resource,\n\n278\n00:16:25.850 --> 00:16:28.130\nsomething that, well that make sense.\n\n279\n00:16:29.300 --> 00:16:33.840\nSo, I went to an online just\nrandom sentence generator and\n\n280\n00:16:33.840 --> 00:16:35.490\ngot a great number of sentences.\n\n281\n00:16:35.490 --> 00:16:37.900\nNow you can't see that at this moment but\n\n282\n00:16:37.900 --> 00:16:40.420\nyou'll see in just a moment,\nso I have sentences.\n\n283\n00:16:42.520 --> 00:16:44.445\nI have sentences, there we go.\n\n284\n00:16:44.445 --> 00:16:45.820\n&gt;&gt; [LAUGH]\n&gt;&gt; And you'll notice,\n\n285\n00:16:45.820 --> 00:16:48.560\nyou know how I said multilines?\n\n286\n00:16:48.560 --> 00:16:52.800\nWell, this is a preview to some of those\n\n287\n00:16:52.800 --> 00:16:54.900\ntemplate strings that we're\ngetting ready to get into.\n\n288\n00:16:54.900 --> 00:16:59.600\nNotice this is not a standard quote and\nneither is this.\n\n289\n00:16:59.600 --> 00:17:04.260\nBut, as we saw earlier,\nthis could possibly break my program.\n\n290\n00:17:05.310 --> 00:17:07.420\nAnd it's kind of hard to scroll over,\n\n291\n00:17:07.420 --> 00:17:09.850\nbut these are just a bunch\nof random sentences.\n\n292\n00:17:09.850 --> 00:17:12.470\nSome of them are questions,\nsome of them are not.\n\n293\n00:17:12.470 --> 00:17:14.160\nLet's see if it breaks.\n\n294\n00:17:14.160 --> 00:17:19.820\nIt actually doesn't break unlike that\noriginal multiline response that we tried\n\n295\n00:17:19.820 --> 00:17:24.120\nto put together up here that was just\na pain and we never could get to work.\n\n296\n00:17:24.120 --> 00:17:28.760\nI'm actually gonna fold that up just for\nsome real estate and to remove the noise.\n\n297\n00:17:28.760 --> 00:17:34.800\nBut let's say that I have user input\nsuch as Twitter or other social media,\n\n298\n00:17:34.800 --> 00:17:38.550\nand I just wanna see are people asking\nquestions about a topic, right?\n\n299\n00:17:38.550 --> 00:17:42.350\nSo I have all this sentences\naggregated about these questions, or\n\n300\n00:17:42.350 --> 00:17:43.440\nabout a certain topic.\n\n301\n00:17:43.440 --> 00:17:46.870\nAnd I wanna see, what\nare the questions that they're asking.\n\n302\n00:17:46.870 --> 00:17:53.770\nSo, how can I find the questions\nwithin these series of sentences?\n\n303\n00:17:53.770 --> 00:18:01.060\nWell, I can say sentences.split, and\nhere's where it gets a little iffy.\n\n304\n00:18:01.060 --> 00:18:04.020\nWithin this multiline character,\nwhen I come to a new line,\n\n305\n00:18:04.020 --> 00:18:09.590\nthere's a new line character\nthat is represented by that \\n.\n\n306\n00:18:09.590 --> 00:18:14.100\nSo \\n is, if I remember correctly,\nis that right, Mike?\n\n307\n00:18:14.100 --> 00:18:14.920\n&gt;&gt; It is.\n[LAUGH]\n\n308\n00:18:14.920 --> 00:18:15.863\n&gt;&gt; Thank you, Mike.\n\n309\n00:18:15.863 --> 00:18:18.230\n&gt;&gt; [LAUGH]\n&gt;&gt; Mike is a lifesaver.\n\n310\n00:18:18.230 --> 00:18:24.390\nSo that \\n, it will actually split on a\nnew line so I'll get individual sentences.\n\n311\n00:18:24.390 --> 00:18:32.120\nAnd I want to map through, and for\neach sentence I want to trend.\n\n312\n00:18:32.120 --> 00:18:37.190\nNow we're using those arrow functions\ncuz this makes this tidy and neat,\n\n313\n00:18:37.190 --> 00:18:42.041\nand then I want to filter and say,\nfor each sentence, I want the ones,\n\n314\n00:18:46.114 --> 00:18:52.360\nThat ends with question marks.\n\n315\n00:18:52.360 --> 00:18:57.300\nSo now I've created, essentially,\na data pipeline using these string\n\n316\n00:18:57.300 --> 00:19:02.230\nmethods that allow me to\naggregate all of the questions.\n\n317\n00:19:02.230 --> 00:19:06.110\nAnd again this would be in a use case of\nan aggregating questions about a certain\n\n318\n00:19:06.110 --> 00:19:08.190\ntopic from a site.\n\n319\n00:19:08.190 --> 00:19:09.510\nAnd if I actually drop this down,\n\n320\n00:19:10.640 --> 00:19:16.360\nyou'll notice that I have all of the\nquestions that end with a question mark.\n\n321\n00:19:16.360 --> 00:19:18.720\nNow just like begin,\nyou have to be careful.\n\n322\n00:19:18.720 --> 00:19:23.960\nAnd this is a perfect illustration here,\nlet me move this over just a touch.\n\n323\n00:19:25.080 --> 00:19:27.935\nSo notice there's an exclamation point and\na question mark.\n\n324\n00:19:27.935 --> 00:19:32.140\nI'm actually seen those reversed\nwhere it's a question mark and\n\n325\n00:19:32.140 --> 00:19:33.760\nan exclamation point.\n\n326\n00:19:33.760 --> 00:19:38.420\nEnds with is looking for that final\ncharacter or series of characters.\n\n327\n00:19:38.420 --> 00:19:43.180\nSo if I wanted to also include those,\nI could put\n\n328\n00:19:44.890 --> 00:19:49.260\nexclamation point question mark, and\nit would search to see if the last\n\n329\n00:19:49.260 --> 00:19:53.010\nset of characters matched that exactly,\nthose last two characters.\n\n330\n00:19:53.010 --> 00:19:56.320\nSo let's see how that changes\nour question response.\n\n331\n00:19:56.320 --> 00:20:00.400\nAnd notice I no longer get the things that\njust have a single question mark, but\n\n332\n00:20:00.400 --> 00:20:03.700\nonly those that have an exclamation\npoint and a question mark.\n\n333\n00:20:03.700 --> 00:20:04.720\nSo both startsWIth and\n\n334\n00:20:04.720 --> 00:20:08.270\nendsWith are not limited to\na single search for a character.\n\n335\n00:20:08.270 --> 00:20:11.180\nI can look for, does it start with ABC?\n\n336\n00:20:11.180 --> 00:20:15.490\nDoes it end with an exclamation point\nquestion mark, or three periods?\n\n337\n00:20:15.490 --> 00:20:20.730\nSo I can give it larger strings to\nsearch within the parent string.\n\n338\n00:20:20.730 --> 00:20:25.490\nSo, something to keep in mind because\nit can change how your output behaves.\n\n339\n00:20:26.870 --> 00:20:29.620\nNow, finally, within these,\n\n340\n00:20:29.620 --> 00:20:34.370\nlet's say I wanted to make sure they're\nall kind of right justified or tabbed in.\n\n341\n00:20:34.370 --> 00:20:36.283\nSo I wanted to make sure\nall of these questions, and\n\n342\n00:20:36.283 --> 00:20:43.310\nI'm going to remove this exclamation\npoint, Have ten spaces before the string.\n\n343\n00:20:43.310 --> 00:20:48.010\nSo I wanna actually add whitespace, not\ntrim but the reverse of trim, I wanna pad.\n\n344\n00:20:48.010 --> 00:20:52.699\nSo I'm gonna quickly make a function here,\nCalled pad.\n\n345\n00:20:52.699 --> 00:20:57.571\nAnd all it does is take the string\n\n346\n00:20:57.571 --> 00:21:02.425\nand, Let's say amount of whiteSpace.\n\n347\n00:21:09.093 --> 00:21:10.554\nThere I go with those\ngiant variable names.\n\n348\n00:21:10.554 --> 00:21:12.830\n&gt;&gt; [LAUGH]\n&gt;&gt; I like being descriptive but\n\n349\n00:21:12.830 --> 00:21:16.485\nthey make for, wow, he's typing a lot but\nI don't know if he's getting a lot done.\n\n350\n00:21:16.485 --> 00:21:19.900\n&gt;&gt; [LAUGH]\n&gt;&gt; So all this is gonna do is return,\n\n351\n00:21:19.900 --> 00:21:25.390\nnow this is where I'm going to use\nthe repeat function, or the repeat method.\n\n352\n00:21:25.390 --> 00:21:29.956\nSo if I'm gonna move this up\njust to keep things consistent,\n\n353\n00:21:29.956 --> 00:21:36.494\nthis repeat is going to take a space, and\nI'm gonna repeat(amountOfWhiteSpace) so\n\n354\n00:21:36.494 --> 00:21:41.976\nif I put a ten in there, I'll get ten\nwhite space characters as a string.\n\n355\n00:21:41.976 --> 00:21:47.870\nAnd then I'm just going to prepend to\nit the other string that's passed in.\n\n356\n00:21:47.870 --> 00:21:53.090\nSo let's see how that works if\nI look at padded questions.\n\n357\n00:21:54.160 --> 00:21:58.990\nThen I will take questions,\nwhich is already an array,\n\n358\n00:22:00.730 --> 00:22:05.980\nand I'm going to map(pad) over them.\n\n359\n00:22:05.980 --> 00:22:09.810\nAnd this is a little\ndifficult to see here, so\n\n360\n00:22:09.810 --> 00:22:15.480\nI think we can join on\nnew line characters.\n\n361\n00:22:15.480 --> 00:22:18.970\nSo I should get breaks as a new line.\n\n362\n00:22:18.970 --> 00:22:21.870\nAnd let's see what those result in.\n\n363\n00:22:21.870 --> 00:22:23.242\nI actually gotta print it out to see it.\n\n364\n00:22:28.144 --> 00:22:30.265\nAnd it's kind of hard to see there but\n\n365\n00:22:30.265 --> 00:22:34.190\nyou'll notice I have some\nspace that is pushed over.\n\n366\n00:22:34.190 --> 00:22:36.575\nLet me remove the join to see\nif I can provide clarity there.\n\n367\n00:22:40.879 --> 00:22:44.070\nAnd, yes.\n\n368\n00:22:44.070 --> 00:22:47.140\nYou can see it right here,\nI have a little bit of space.\n\n369\n00:22:47.140 --> 00:22:48.930\nAnd why is that?\n\n370\n00:22:48.930 --> 00:22:53.094\nWell you'll notice that I just mapped\nover pad, when in fact I should map for\n\n371\n00:22:53.094 --> 00:23:01.920\neach string, String, and\nlet's say 30 characters.\n\n372\n00:23:01.920 --> 00:23:07.220\nSo that's a common error that people will\nmake is, well this takes two arguments.\n\n373\n00:23:07.220 --> 00:23:11.730\nAnd then I just place it in a map or\na filter, and it doesn't provide all\n\n374\n00:23:11.730 --> 00:23:15.640\nthe information that I need in order to\nhave that map or filter behave correctly.\n\n375\n00:23:15.640 --> 00:23:17.580\nSo we'll see if that fixed that up, and\n\n376\n00:23:17.580 --> 00:23:21.230\nyou'll notice that I in fact\nget the expected behavior where\n\n377\n00:23:21.230 --> 00:23:25.580\nI've pushed over 30 characters and\nthen I have the string.\n\n378\n00:23:25.580 --> 00:23:30.600\nSo this is nice for\nsome string based formatting or\n\n379\n00:23:30.600 --> 00:23:35.160\nif I wanna have a great deal of comment\nlines that are breaking up the page.\n\n380\n00:23:35.160 --> 00:23:37.070\nSo those are the new methods.\n\n381\n00:23:37.070 --> 00:23:37.730\nBut you know Mike,\n\n382\n00:23:37.730 --> 00:23:41.850\nI was looking, there's a great deal to\ntalk about with template strings and\n\n383\n00:23:41.850 --> 00:23:47.120\nall the fun were gonna have with string\ninterpolation that’s a, that’s a big word.\n\n384\n00:23:47.120 --> 00:23:48.480\nI don't know if we have enough time.\n\n385\n00:23:48.480 --> 00:23:50.630\n&gt;&gt; With a word like that I'm pretty\nsure we're going to have to put\n\n386\n00:23:50.630 --> 00:23:51.950\nit in its own episode.\n\n387\n00:23:51.950 --> 00:23:54.370\nString interpolation, I like it.\n\n388\n00:23:54.370 --> 00:23:55.430\nAll right Justin, sounds good.\n\n389\n00:23:55.430 --> 00:24:00.590\nReally good look there at what has changed\nand how they've given us the ability,\n\n390\n00:24:00.590 --> 00:24:03.350\nthese new methods that we\ncan work the strings with.\n\n391\n00:24:03.350 --> 00:24:06.300\nIt makes it a little bit easier when\nwe're working with those strings.\n\n392\n00:24:06.300 --> 00:24:08.060\nSo we appreciate those examples.\n\n393\n00:24:08.060 --> 00:24:09.590\nWe look forward to the next part, but for\n\n394\n00:24:09.590 --> 00:24:12.880\nnow signing off for ITPRO.TV,\nI've been your host, Mike Rodrick.\n\n395\n00:24:12.880 --> 00:24:13.870\n&gt;&gt; And I'm Justin Dennison.\n\n396\n00:24:13.870 --> 00:24:14.397\n&gt;&gt; And we'll see you next time.\n\n397\n00:24:14.397 --> 00:24:22.217\n[MUSIC]\n\n398\n00:24:22.217 --> 00:24:25.029\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "204901646"
        },
        {
          "description": "In this episode, Justin and Mike continue their look into changes to strings in ES6. They demonstrate using template strings and template literals. They also look at tagged templates.",
          "length": "1098",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-5-1-2-changes_to_strings-020817-PGM.00_18_05_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-5-1-2-changes_to_strings-020817-PGM.00_18_05_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-5-1-2-changes_to_strings-020817-PGM.00_18_05_09.Still001-sm.jpg",
          "title": "Changes to Strings Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.160\nWelcome to ITProTV.\n\n2\n00:00:01.160 --> 00:00:06.805\nI'm your host Don Pezet [CROSSTALK]\n\n3\n00:00:06.805 --> 00:00:08.200\n[MUSIC]\n\n4\n00:00:08.200 --> 00:00:12.650\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.650 --> 00:00:15.790\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n6\n00:00:15.790 --> 00:00:17.700\nI'm your host Mike Rodrick.\n\n7\n00:00:17.700 --> 00:00:19.830\nToday, we're doing our\nnew features in ES6.\n\n8\n00:00:19.830 --> 00:00:23.660\nIn this episode we're actually\ncontinuing our thought process\n\n9\n00:00:23.660 --> 00:00:27.030\non changes with strings, so if you missed\nthe first part, make sure you go back and\n\n10\n00:00:27.030 --> 00:00:29.360\nwatch that and we're just going\nto dive right back into it.\n\n11\n00:00:29.360 --> 00:00:31.750\nAnd of course here with me is Mr.\nJustin Dennison.\n\n12\n00:00:31.750 --> 00:00:32.580\nWelcome back Justin.\n\n13\n00:00:32.580 --> 00:00:33.700\n&gt;&gt; Thanks for having me back, Mike.\n\n14\n00:00:33.700 --> 00:00:37.130\nYeah the last episode we definitely\nlooked at some of those growing\n\n15\n00:00:37.130 --> 00:00:40.280\npains that we went through\nusing strings and JavaScript.\n\n16\n00:00:40.280 --> 00:00:42.750\nHowever, the time is now.\n\n17\n00:00:42.750 --> 00:00:45.360\nStrings have started to come of age.\n\n18\n00:00:45.360 --> 00:00:48.350\nAnd to really show you that power,\nI think you're right, Mike.\n\n19\n00:00:48.350 --> 00:00:50.270\nI we should just go ahead and\ndive right back in.\n\n20\n00:00:50.270 --> 00:00:53.260\nSo if we take a look I\nhad my project open here.\n\n21\n00:00:53.260 --> 00:00:56.630\nAnd this is a continuation\nfrom the first episode.\n\n22\n00:00:56.630 --> 00:00:58.490\nIf we scroll up, all that is there.\n\n23\n00:00:58.490 --> 00:01:02.258\nExcept I commented out all this console\nlog, so we can remove the noise.\n\n24\n00:01:02.258 --> 00:01:04.523\nBut templates.\n\n25\n00:01:04.523 --> 00:01:09.440\nSquishing those strings together,\nlike, during a response.\n\n26\n00:01:09.440 --> 00:01:13.860\nOr creating some formatter string\nfrom a variety of sources.\n\n27\n00:01:13.860 --> 00:01:15.740\nEither a data source or a user source.\n\n28\n00:01:16.830 --> 00:01:19.170\nWe've seen those can be very problematic.\n\n29\n00:01:19.170 --> 00:01:22.490\nHowever, let's say we have year.\n\n30\n00:01:22.490 --> 00:01:26.650\nAll right, I'm asking people\nabout their birth date or\n\n31\n00:01:26.650 --> 00:01:29.630\njust a time of significance in their life.\n\n32\n00:01:31.710 --> 00:01:32.510\nSo I have month,\n&gt;&gt; [LAUGH]\n\n33\n00:01:32.510 --> 00:01:33.200\n&gt;&gt; I don't know, Mike.\n\n34\n00:01:33.200 --> 00:01:36.340\n&gt;&gt; I giggle because you put 1987 and\nthink about the year you were born.\n\n35\n00:01:36.340 --> 00:01:39.125\nAnd I think about when I\ngraduated from high school.\n\n36\n00:01:39.125 --> 00:01:41.030\n[LAUGH]\n&gt;&gt; Well, Mike,\n\n37\n00:01:41.030 --> 00:01:42.590\nwe're not here to split hairs.\n\n38\n00:01:42.590 --> 00:01:45.605\nSo we'll just act like\nnothing I know nothing.\n\n39\n00:01:45.605 --> 00:01:48.390\n&gt;&gt; [LAUGH]\n&gt;&gt; So, now I have year, month,\n\n40\n00:01:48.390 --> 00:01:53.030\nday, all right, so 4, 1, 1987.\n\n41\n00:01:53.030 --> 00:01:58.020\nBut if I wanted to create like a response\nor some kind of assertion about that,\n\n42\n00:01:58.020 --> 00:02:01.060\nusing strings I would\nnormally have to make pluses.\n\n43\n00:02:01.060 --> 00:02:07.570\nHowever, if I want a new response, right\nbelow your escape key, where the tilde is,\n\n44\n00:02:07.570 --> 00:02:11.540\nthere's this thing called a back tick and\nit's kinda hard to see.\n\n45\n00:02:11.540 --> 00:02:13.860\nLet's temporarily zoom in there.\n\n46\n00:02:13.860 --> 00:02:18.240\nNotice, just for comparison,\nnormal quote are straight up and\n\n47\n00:02:18.240 --> 00:02:21.520\ndown, back ticks, well they're back ticks.\n\n48\n00:02:21.520 --> 00:02:27.250\nSo when we use back ticks we\nare using new ES6 string features.\n\n49\n00:02:27.250 --> 00:02:30.170\nIf you're on an older browser\nyou may get some weird results.\n\n50\n00:02:30.170 --> 00:02:32.560\nSo do keep in mind these are new features.\n\n51\n00:02:32.560 --> 00:02:35.300\nBe very careful, aware at least.\n\n52\n00:02:35.300 --> 00:02:36.980\nAs I've said I use them.\n\n53\n00:02:36.980 --> 00:02:39.270\nWith kind of caution\nto the wind sometimes.\n\n54\n00:02:40.460 --> 00:02:46.240\nNow, within this response I'm gonna start\ntyping, so let's just say today is,\n\n55\n00:02:46.240 --> 00:02:51.680\nand then if I add a dollar sign and\nan open-closed curly brace, you're\n\n56\n00:02:51.680 --> 00:02:57.050\nlike wait a minute, that kinda looks like\nsome JavaScript code and, in fact, it is.\n\n57\n00:02:57.050 --> 00:02:59.590\nNotice my editor made it red.\n\n58\n00:02:59.590 --> 00:03:02.240\nThis is kind of an outlet for a variable.\n\n59\n00:03:03.260 --> 00:03:09.580\nSo I can say month slash another\nset of dollar sign curly braces\n\n60\n00:03:09.580 --> 00:03:16.320\nday s;ash year, and exclamation point.\n\n61\n00:03:16.320 --> 00:03:18.820\nAnd that actually is our string template.\n\n62\n00:03:18.820 --> 00:03:22.870\nNow if I look at this, I like this because\nthis allows me to see the pattern.\n\n63\n00:03:22.870 --> 00:03:26.660\nI can use appropriate variable names and\nI can see how they fit together.\n\n64\n00:03:26.660 --> 00:03:31.340\nTo compare that, I would have to have a\nplus sign here, a plus sign here and here.\n\n65\n00:03:31.340 --> 00:03:35.330\nA plus sign here, here, here, and I don't\nhave to worry about all that spacing.\n\n66\n00:03:35.330 --> 00:03:37.300\nLots of pluses, a lot of concatenation.\n\n67\n00:03:39.160 --> 00:03:41.470\nI truly do adore template strings.\n\n68\n00:03:41.470 --> 00:03:44.560\nBut, I've been saying that this works.\n\n69\n00:03:44.560 --> 00:03:46.655\nMaybe I'm completely wrong.\n\n70\n00:03:46.655 --> 00:03:49.100\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's find out, and\n\n71\n00:03:49.100 --> 00:03:53.280\nresponse is,\nyou gotta spell response correctly.\n\n72\n00:03:53.280 --> 00:03:59.740\nThat's what happens when you\ntype in 37,000 words a minute.\n\n73\n00:03:59.740 --> 00:04:02.650\nI am being hyperbolic there just\nin case someone is going he\n\n74\n00:04:02.650 --> 00:04:05.030\nis not really typing\nthat many words a minute.\n\n75\n00:04:05.030 --> 00:04:08.400\nIt is good, so today is 4/1/1987,\n\n76\n00:04:08.400 --> 00:04:14.650\nwell that pattern that just kind of works,\nwhen I used template strings,\n\n77\n00:04:14.650 --> 00:04:18.370\nthis variable name will replace\nthis entire expression.\n\n78\n00:04:19.650 --> 00:04:22.240\nSo now I can just use\nthe variable name and\n\n79\n00:04:22.240 --> 00:04:26.370\nthis is actually string interpolation,\nthese strings are interpolated, I get\n\n80\n00:04:26.370 --> 00:04:30.950\nthe in between values using the variables\nin these operators to be replaced.\n\n81\n00:04:30.950 --> 00:04:34.150\nSo all JavaScript does is\ngo okay I need to look for\n\n82\n00:04:34.150 --> 00:04:37.220\nyear, and copy paste effectively.\n\n83\n00:04:37.220 --> 00:04:40.530\nSo awesome, big word for a simple process.\n\n84\n00:04:41.690 --> 00:04:46.908\nBut what's additionally\namazing is if I hit Enter,\n\n85\n00:04:46.908 --> 00:04:50.347\nwe've already seen a little bit,\n\n86\n00:04:50.347 --> 00:04:55.801\nI can do multi line strings\ninside of these back ticks,\n\n87\n00:04:55.801 --> 00:05:00.189\nI don't have to worry\nabout all those syntax\n\n88\n00:05:00.189 --> 00:05:04.933\nerrors that would normally occur and\nthirdly,\n\n89\n00:05:04.933 --> 00:05:10.149\nthis is kind of interesting\nto me if I go dollar sign,\n\n90\n00:05:10.149 --> 00:05:15.011\nmonth, plus three slash\ndollar sign day plus ten\n\n91\n00:05:15.011 --> 00:05:19.558\nslash dollar sign year\nplus 10 is far away.\n\n92\n00:05:19.558 --> 00:05:21.178\nExclamation point, there we go.\n\n93\n00:05:21.178 --> 00:05:26.280\nIf I refresh,\nnotice the white space is preserved,\n\n94\n00:05:26.280 --> 00:05:31.780\nthe new line is preserved in\naddition to 4 plus 3 is 7,\n\n95\n00:05:31.780 --> 00:05:37.560\n1 plus 10 is 11, and 1987 plus 10 is 1997.\n\n96\n00:05:37.560 --> 00:05:39.140\nWithin these curly braces,\n\n97\n00:05:39.140 --> 00:05:44.090\nI can actually use valid JavaScript\nexpressions to get dynamic values.\n\n98\n00:05:44.090 --> 00:05:49.050\nSo this template can change depending on\nwhat these variables are at the time.\n\n99\n00:05:49.050 --> 00:05:50.810\nThat's incredibly powerful.\n\n100\n00:05:50.810 --> 00:05:54.870\nSo matter of fact, I've started using\nthese in a few smaller projects that\n\n101\n00:05:54.870 --> 00:05:57.880\nI've been doing for\ndynamic web applications.\n\n102\n00:05:57.880 --> 00:06:01.730\nSo we're going to take a step back,\nwe're not here to learn about building\n\n103\n00:06:01.730 --> 00:06:04.810\nweb applications from\nthe ground up at the moment.\n\n104\n00:06:04.810 --> 00:06:07.990\nThere are some wonderful things in\nthe library that you can check out\n\n105\n00:06:07.990 --> 00:06:08.590\ninvolving them.\n\n106\n00:06:09.620 --> 00:06:12.300\nBut I do have kind of a set up,\nI've been hiding,\n\n107\n00:06:12.300 --> 00:06:16.635\nMike, down here if I scroll down,\nI am a trickster.\n\n108\n00:06:16.635 --> 00:06:20.160\n&gt;&gt; [LAUGH]\n&gt;&gt; I have some JavaScript\n\n109\n00:06:20.160 --> 00:06:24.220\nthat will provide us with\nsome basic functionality.\n\n110\n00:06:24.220 --> 00:06:27.860\nNow as far as organization and\nsuch, maybe it's not the best.\n\n111\n00:06:27.860 --> 00:06:31.010\nBut here is a very basic to do list.\n\n112\n00:06:31.010 --> 00:06:32.910\nIt's just making a list dynamically.\n\n113\n00:06:32.910 --> 00:06:36.180\nAs a matter of fact,\nit doesn't actually work at current time.\n\n114\n00:06:36.180 --> 00:06:37.960\nWe're gonna build that\nusing template strings.\n\n115\n00:06:37.960 --> 00:06:41.120\nWe're gonna finish that\nlast little bit of process.\n\n116\n00:06:41.120 --> 00:06:44.869\nBut just a quick review,\nI have comments or the to dos.\n\n117\n00:06:46.360 --> 00:06:49.190\nIt's just an empty array,\nthat's my data storage.\n\n118\n00:06:49.190 --> 00:06:52.410\nI have some things that I can\ninteract within in the web page,\n\n119\n00:06:52.410 --> 00:06:56.520\nlike input elements for\ntaking user input and interactions.\n\n120\n00:06:56.520 --> 00:07:00.050\nAnd then I have a function that will\nactually put those in the list and\n\n121\n00:07:00.050 --> 00:07:00.950\ncall this a render.\n\n122\n00:07:00.950 --> 00:07:03.020\nThe real magic is in render.\n\n123\n00:07:03.020 --> 00:07:04.480\nWhat is render going to do?\n\n124\n00:07:04.480 --> 00:07:08.920\nIt's going to create new HTML and\nput it in the page.\n\n125\n00:07:08.920 --> 00:07:15.690\nNow this isn't gonna work if\nI do not have valid HTML.\n\n126\n00:07:15.690 --> 00:07:19.830\nWell I've also been hiding\nthat a little bit also, Mike.\n\n127\n00:07:19.830 --> 00:07:20.590\n&gt;&gt; Sneaky sneaky.\n\n128\n00:07:20.590 --> 00:07:21.700\n&gt;&gt; I am a sneaky guy.\n\n129\n00:07:24.710 --> 00:07:28.920\nI'm like, some of those characters\nyou see, so, be very careful.\n\n130\n00:07:28.920 --> 00:07:31.700\nI have some HTML.\n\n131\n00:07:31.700 --> 00:07:34.160\nAgain, we're not worried about,\nultimately what these do.\n\n132\n00:07:34.160 --> 00:07:38.200\nWe're looking at using templating\nstrings to get things done.\n\n133\n00:07:38.200 --> 00:07:38.880\nSo if I look.\n\n134\n00:07:40.390 --> 00:07:43.180\nI have, wow, that is tiny, tiny, tiny.\n\n135\n00:07:43.180 --> 00:07:47.240\nLet's actually make that, there we go.\n\n136\n00:07:47.240 --> 00:07:50.450\nSo all I have is an input field and\na button and when I clicked the button\n\n137\n00:07:51.660 --> 00:07:55.820\nright now is just adding that\ncomment lists and just printing out.\n\n138\n00:07:55.820 --> 00:08:01.230\nSo anytime I would print out something,\nthat would be a new comment within a list.\n\n139\n00:08:01.230 --> 00:08:04.390\nSo if I want to render.\n\n140\n00:08:05.440 --> 00:08:06.910\nWhat do I want to do?\n\n141\n00:08:06.910 --> 00:08:11.390\nWell, I want to create new HTML from\nthe comments that are there and\n\n142\n00:08:11.390 --> 00:08:13.690\njust put them in the DOM.\n\n143\n00:08:13.690 --> 00:08:14.560\nAnd what do i mean by DOM?\n\n144\n00:08:14.560 --> 00:08:15.730\nThe actual HTML page.\n\n145\n00:08:15.730 --> 00:08:17.340\nI have to catch myself, Mike,\n\n146\n00:08:17.340 --> 00:08:23.066\nsometimes I start using terminology when\nI get in the flow and I forget, I forget.\n\n147\n00:08:23.066 --> 00:08:24.213\n&gt;&gt; We forgive you.\n\n148\n00:08:24.213 --> 00:08:28.810\nSo, I'm actually just going\nto create some comment items.\n\n149\n00:08:28.810 --> 00:08:34.070\nAnd I'm gonna use the map function,\nso comments.map and what I mean is,\n\n150\n00:08:34.070 --> 00:08:38.700\nfor each one of these elements in\nthe array, I'm gonna create a new\n\n151\n00:08:38.700 --> 00:08:42.960\nset of HTML to plug into the web page.\n\n152\n00:08:42.960 --> 00:08:44.650\nAnd I'm gonna do that by saying,\nfor each comment.\n\n153\n00:08:45.780 --> 00:08:51.960\nI want to return,\nI'm using the implicit return some HTML.\n\n154\n00:08:51.960 --> 00:08:58.550\nAnd in particular,\nI want to return HTML nope,\n\n155\n00:08:58.550 --> 00:09:04.870\nnope, nope, nope, there we go, that is\nreflective of what I want in the page.\n\n156\n00:09:04.870 --> 00:09:08.960\nSo, this is just for a list,\nfor a bulleted list, and\n\n157\n00:09:08.960 --> 00:09:11.180\nI'm gonna take whatever\nis in the array and\n\n158\n00:09:11.180 --> 00:09:15.030\nput those two things on either side of\nit and then that's gonna be returned.\n\n159\n00:09:15.030 --> 00:09:17.080\nNow in addition to, I'm going to join,\n\n160\n00:09:17.080 --> 00:09:21.930\nbecause I just want these to be\na full-blown string, no longer an array.\n\n161\n00:09:21.930 --> 00:09:24.920\nSo I'm gonna join these\non the empty string.\n\n162\n00:09:24.920 --> 00:09:29.810\nAnd let's just see what\nthat looks like as I click.\n\n163\n00:09:29.810 --> 00:09:32.750\nSo, I'm going to console.log,\ncomment item,\n\n164\n00:09:32.750 --> 00:09:36.770\nand that should really be items,\ncuz it could be plural.\n\n165\n00:09:38.390 --> 00:09:41.600\nSo, if I refresh, and I just type, so\n\n166\n00:09:41.600 --> 00:09:45.480\nthis is a very effective testing practice,\nit's just leaning on the keyboard.\n\n167\n00:09:45.480 --> 00:09:47.165\nFor user input, I like it.\n\n168\n00:09:47.165 --> 00:09:49.980\n&gt;&gt; [LAUGH]\n&gt;&gt; But every time that I type something in\n\n169\n00:09:49.980 --> 00:09:53.680\nthere, and\nnotice I get this weird looking syntax.\n\n170\n00:09:53.680 --> 00:09:57.150\nBut the first time I had one,\nthe next time it regenerated and\n\n171\n00:09:57.150 --> 00:10:01.270\nhad both list items, and the third time,\nlet's type something sensible.\n\n172\n00:10:02.270 --> 00:10:04.810\nI'll have a third list item.\n\n173\n00:10:04.810 --> 00:10:07.930\nThat now I can put into the HTML.\n\n174\n00:10:07.930 --> 00:10:08.960\nThat's pretty handy.\n\n175\n00:10:08.960 --> 00:10:11.612\nLet's see how that works.\n\n176\n00:10:11.612 --> 00:10:17.470\nWell, I can actually say\ntarget.innerhtml=commentItems.\n\n177\n00:10:17.470 --> 00:10:23.310\nSo, I'm going to just take that HTML and\nreplace it.\n\n178\n00:10:23.310 --> 00:10:28.650\nAnd, now I have a dynamic web application\nthat takes user input with a button click,\n\n179\n00:10:28.650 --> 00:10:30.590\nbut I'm using template strings.\n\n180\n00:10:30.590 --> 00:10:35.930\nAnd this is a great replacement for\nall of that string concatenation pluses.\n\n181\n00:10:35.930 --> 00:10:41.840\nBecause now, if I know HTML I can see this\nis exactly what this is gonna generate,\n\n182\n00:10:41.840 --> 00:10:44.940\nexactly what this is gonna look like,\nand that's incredibly powerful.\n\n183\n00:10:44.940 --> 00:10:45.980\n&gt;&gt; That's very cool.\n\n184\n00:10:45.980 --> 00:10:49.470\n&gt;&gt; So now there is a third\nnew feature of strings.\n\n185\n00:10:49.470 --> 00:10:53.830\nBecause some of you who are maybe a little\nmore security minded are like, well,\n\n186\n00:10:53.830 --> 00:10:54.750\nwait a minute, Justin,\n\n187\n00:10:54.750 --> 00:11:00.080\nyou're actually opening that web\napplication to cross site scripting.\n\n188\n00:11:00.080 --> 00:11:02.340\nSo I could have a client side attack.\n\n189\n00:11:02.340 --> 00:11:05.510\nAnd you would be absolutely correct.\n\n190\n00:11:05.510 --> 00:11:10.470\nThis is definitely not a very\nsecure application as it stands,\n\n191\n00:11:10.470 --> 00:11:15.190\nbut there's a new feature of these\ntemplates strings that we can leverage\n\n192\n00:11:15.190 --> 00:11:16.790\nto maybe make it a little more secure.\n\n193\n00:11:16.790 --> 00:11:22.275\nAnd that's through like a sanitization\nprocess, again, just to be clear\n\n194\n00:11:22.275 --> 00:11:26.855\nthis is not a very robust sanitization,\nthis is for a learning purposes only.\n\n195\n00:11:26.855 --> 00:11:29.125\nSo don't go implement this\nin a production app and\n\n196\n00:11:29.125 --> 00:11:33.075\nbe like it's still open to cross site\nscripting, just keep that in mind.\n\n197\n00:11:33.075 --> 00:11:37.445\nAnd just to show you what that would look\nlike, if I actually type valid HTML,\n\n198\n00:11:37.445 --> 00:11:40.685\nI'll see if I can get this to work.\n\n199\n00:11:40.685 --> 00:11:46.650\nSometimes there's a little, notice, when\nI embed HTML inside of that it renders,\n\n200\n00:11:46.650 --> 00:11:50.780\nwell I can then put script tags\nthat will run arbitrary JavaScript,\n\n201\n00:11:51.900 --> 00:11:57.540\nthat's bad cuz I can redirect and hijack\nyour browser, and all kinds of staff.\n\n202\n00:11:57.540 --> 00:11:59.540\nSo, we dont like that, that's bad.\n\n203\n00:11:59.540 --> 00:12:03.595\nNow, you'll have to bear with me,\nI have to remind myself about all these\n\n204\n00:12:03.595 --> 00:12:07.600\nsanitization things from time to time,\nso, what does this look like?\n\n205\n00:12:08.948 --> 00:12:15.770\nWell within this web app, I'm going to\nwrite a couple of other functions for use.\n\n206\n00:12:15.770 --> 00:12:17.640\nSo, I'm going to write\na function called sanitize and\n\n207\n00:12:18.920 --> 00:12:21.330\nthat's going to be taking a string and\n\n208\n00:12:21.330 --> 00:12:25.990\nthis is going to sanitize that string for\nputting inside of a web page.\n\n209\n00:12:25.990 --> 00:12:31.170\nAnd that's going to return the string and\n.replace.\n\n210\n00:12:31.170 --> 00:12:32.050\nAnd we'll just do a few.\n\n211\n00:12:32.050 --> 00:12:34.290\nAgain, it's not gonna\nbe incredibly robust.\n\n212\n00:12:34.290 --> 00:12:38.635\nI'm gonna replace and Mike, I've said\nthings about regular expressions before.\n\n213\n00:12:38.635 --> 00:12:39.240\n&gt;&gt; Uh-huh.\n\n214\n00:12:39.240 --> 00:12:41.185\n&gt;&gt; We are gonna use a few\nregular expressions here.\n\n215\n00:12:41.185 --> 00:12:44.320\n&gt;&gt; [LAUGH]\n&gt;&gt; So to suspend your disbelief they do\n\n216\n00:12:44.320 --> 00:12:45.845\nlike magic to me also.\n\n217\n00:12:45.845 --> 00:12:46.740\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n218\n00:12:46.740 --> 00:12:49.450\nI'll try to explain in\nthe context of what they do.\n\n219\n00:12:49.450 --> 00:12:53.840\nSo I'm gonna be looking for the less\nthan symbol which would be part of HTML.\n\n220\n00:12:53.840 --> 00:12:57.720\nAnd I'm gonna look globally\ninside of that string.\n\n221\n00:12:57.720 --> 00:13:04.860\nAnd I'm gonna replace that with the escape\nwhich is ampersand, less than, semicolon.\n\n222\n00:13:04.860 --> 00:13:08.650\nSo that would actually escape that,\nand remove it.\n\n223\n00:13:08.650 --> 00:13:11.680\nAnd replace it with this escape character.\n\n224\n00:13:11.680 --> 00:13:14.700\nAnd I'm also going to\nreplace the greater than.\n\n225\n00:13:16.430 --> 00:13:20.780\nAnd I'm gonna use a similar\nregular expression, to do that.\n\n226\n00:13:23.100 --> 00:13:24.990\nMike, do you ever use regular expressions?\n\n227\n00:13:24.990 --> 00:13:27.145\n&gt;&gt; I do, I do and they are fun.\n\n228\n00:13:27.145 --> 00:13:28.780\n[LAUGH]\n&gt;&gt; They are fun, but\n\n229\n00:13:28.780 --> 00:13:32.060\nthey can also be incredibly, you're like,\nI don't really know what that's doing.\n\n230\n00:13:32.060 --> 00:13:32.620\nSo.\n\n231\n00:13:32.620 --> 00:13:33.730\n&gt;&gt; Yeah.\nI typically have to go back and\n\n232\n00:13:33.730 --> 00:13:35.270\nresearch to read my own.\n\n233\n00:13:35.270 --> 00:13:36.050\n&gt;&gt; Yeah, yeah.\n\n234\n00:13:36.050 --> 00:13:36.754\n&gt;&gt; Yeah.\n[LAUGH]\n\n235\n00:13:36.754 --> 00:13:37.597\n&gt;&gt; So be careful about\n\n236\n00:13:37.597 --> 00:13:38.543\nregular expressions.\n\n237\n00:13:38.543 --> 00:13:40.124\nThey are handy in a context like this.\n\n238\n00:13:40.124 --> 00:13:45.090\nNow if I was going to make this incredibly\nrobust, I would spend a lot more time\n\n239\n00:13:45.090 --> 00:13:49.730\nmaybe even pulling like someone else's\nlibrary to do the sanitization.\n\n240\n00:13:49.730 --> 00:13:51.580\nAgain, this is just for\ndemonstration purposes.\n\n241\n00:13:52.840 --> 00:13:56.540\nSo I have the sanitized function,\nnow what do I want to do?\n\n242\n00:13:56.540 --> 00:14:02.280\nI'm going to create what's\ncalled a tag template and\n\n243\n00:14:02.280 --> 00:14:07.640\nthis is actually a function that will\ntake a template string but the function\n\n244\n00:14:07.640 --> 00:14:12.770\nhas a certain kind of set of parameters,\na certain what is called a interface.\n\n245\n00:14:12.770 --> 00:14:16.270\nSo, the arguments have to\nbe in a certain order and\n\n246\n00:14:16.270 --> 00:14:19.580\nthe return has to be a similar type.\n\n247\n00:14:19.580 --> 00:14:22.380\nKeep this in mind,\nthese are a little wonky.\n\n248\n00:14:22.380 --> 00:14:27.440\nThese actually took me a little bit to\nget down, so, be very careful of there.\n\n249\n00:14:27.440 --> 00:14:31.550\nSo, I'm gonna say safe HTML.\n\n250\n00:14:31.550 --> 00:14:34.330\nAnd that is we'll use an arrow function.\n\n251\n00:14:34.330 --> 00:14:37.336\nSo, the template is gonna\nbe the template string.\n\n252\n00:14:37.336 --> 00:14:41.328\nAnd then these expressions are going to be\n\n253\n00:14:41.328 --> 00:14:45.940\nlike the expressions\ninside of the templates.\n\n254\n00:14:45.940 --> 00:14:49.940\nSo look here,\nthese would be expressions and\n\n255\n00:14:49.940 --> 00:14:54.650\nthen the template would\nbe this actual thing.\n\n256\n00:14:54.650 --> 00:14:57.400\nSo what I'm gonna get through\nthis dot dot dot expressions.\n\n257\n00:14:57.400 --> 00:14:59.490\nIf we remember, that's the rest operator.\n\n258\n00:14:59.490 --> 00:15:01.760\nI'm gonna get an array of all of those.\n\n259\n00:15:01.760 --> 00:15:06.210\nI'm gonna get these one at a time,\nand then I'm gonna sanitize those.\n\n260\n00:15:06.210 --> 00:15:11.210\nBecause, in our render function,\nthat's actually what is being spit out.\n\n261\n00:15:11.210 --> 00:15:14.950\nI'm gonna get the li,\nthis entire template, and\n\n262\n00:15:14.950 --> 00:15:17.970\nthen get the comment one at a time.\n\n263\n00:15:17.970 --> 00:15:20.650\nSo let's just, let's see how that works.\n\n264\n00:15:20.650 --> 00:15:23.900\nThat's a mouthful,\na little bit of hand waving.\n\n265\n00:15:23.900 --> 00:15:24.990\nBut let's see.\n\n266\n00:15:24.990 --> 00:15:27.920\nSo I'm gonna return the template.\n\n267\n00:15:27.920 --> 00:15:30.910\nAnd the template's gonna behave\na little bit like an array.\n\n268\n00:15:30.910 --> 00:15:32.880\nAnd I'm going to reduce.\n\n269\n00:15:32.880 --> 00:15:35.780\nNow, reduce kind of means make it simpler.\n\n270\n00:15:35.780 --> 00:15:36.630\nMake it smaller.\n\n271\n00:15:36.630 --> 00:15:38.700\nBring it down to kind of a core value.\n\n272\n00:15:40.000 --> 00:15:44.980\nAnd this reduce is going to take\nthe first part and the second part,\n\n273\n00:15:46.590 --> 00:15:51.350\nand it is going to\noperate on those as such.\n\n274\n00:15:51.350 --> 00:15:53.180\nNotice there's another arrow function.\n\n275\n00:15:53.180 --> 00:15:57.830\nSo reduce takes a function to\ntake the pieces of an array or\n\n276\n00:15:57.830 --> 00:16:00.100\narray like thing and\nkind of squish them down.\n\n277\n00:16:01.460 --> 00:16:06.085\nAnd what are we gonna do here,\nwe are going to\n\n278\n00:16:06.085 --> 00:16:11.570\nreturn the first plus\nsanitize of expressions.\n\n279\n00:16:11.570 --> 00:16:16.444\nI forgot a parameter here, Mike,\nthis third parameter is i, so\n\n280\n00:16:16.444 --> 00:16:21.590\ngoing through 0, 1, 2, 3.\n\n281\n00:16:21.590 --> 00:16:27.430\nI'm going to go expressions\ni-1 because this\n\n282\n00:16:27.430 --> 00:16:31.870\nis actually going to lag behind because\nwe have an offset on the first part.\n\n283\n00:16:31.870 --> 00:16:35.260\nSo I'm going to sanitize the expression,\nand again,\n\n284\n00:16:35.260 --> 00:16:38.210\nand that would be like our list\nitem that we're generating and\n\n285\n00:16:38.210 --> 00:16:43.650\nthen plus the second, yes.\n\n286\n00:16:43.650 --> 00:16:45.400\nPlus the second, there we go.\n\n287\n00:16:45.400 --> 00:16:48.960\nIt should work, if it doesn't work,\nwe'll make it work.\n\n288\n00:16:48.960 --> 00:16:50.610\nWe'll get a bigger hammer.\n\n289\n00:16:50.610 --> 00:16:53.510\nSo, if I want this how do I use this?\n\n290\n00:16:53.510 --> 00:16:56.750\nThis tag templates behave\nlike a function but\n\n291\n00:16:56.750 --> 00:17:01.830\nthey become effectively a modifier for\ntemplate strings.\n\n292\n00:17:01.830 --> 00:17:05.835\nNotice there's no parenthesis I'm just\nputting this right next to this template,\n\n293\n00:17:05.835 --> 00:17:09.350\nand now this is going to\nmake sure this is safe HTML,\n\n294\n00:17:09.350 --> 00:17:14.940\nsanitized using this tag\ntemplate operations.\n\n295\n00:17:14.940 --> 00:17:20.080\nSo, let's see if that works out, I'm\ngonna refresh, cross your fingers Mike.\n\n296\n00:17:20.080 --> 00:17:20.887\n&gt;&gt; I'm crossed.\n\n297\n00:17:23.870 --> 00:17:28.548\n&gt;&gt; And you gotta click the button and\nnotice that it no longer renders as\n\n298\n00:17:28.548 --> 00:17:33.440\nvalid HTML, but has been sanitized and\nrenders as plain text.\n\n299\n00:17:33.440 --> 00:17:38.700\nSo we've seen tag templates, we've seen\ntemplate literals, incredibly powerful\n\n300\n00:17:38.700 --> 00:17:43.815\nextensions to the string objects within\nJavaScript, that made me very, very happy.\n\n301\n00:17:43.815 --> 00:17:44.670\n&gt;&gt; [LAUGH] I'm glad.\n\n302\n00:17:44.670 --> 00:17:45.560\nThey make me happy too.\n\n303\n00:17:45.560 --> 00:17:48.380\nI mean working with strings is\nalways been a bit of a challenge,\n\n304\n00:17:48.380 --> 00:17:50.680\nit can get a little complex\nwhen you're doing all the,\n\n305\n00:17:50.680 --> 00:17:54.280\nlike you said concatenation, looking for\nspaces and things like that.\n\n306\n00:17:54.280 --> 00:17:56.400\nFantastic look there, great demonstration.\n\n307\n00:17:56.400 --> 00:17:58.040\nJustin we appreciate that.\n\n308\n00:17:58.040 --> 00:18:00.250\nHope everybody out there\nenjoyed watching this one.\n\n309\n00:18:00.250 --> 00:18:03.280\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n310\n00:18:03.280 --> 00:18:04.130\n&gt;&gt; And I'm Justin Dennison.\n\n311\n00:18:04.130 --> 00:18:05.294\n&gt;&gt; And we'll see you next time.\n\n312\n00:18:05.294 --> 00:18:12.461\n[MUSIC]\n\n313\n00:18:12.461 --> 00:18:15.915\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204900039"
        },
        {
          "description": "In this episode, Daniel and Justin discuss some of the new Array specific features found in ES6. They start by showing you the new Array methods including Array.of and Away.from. Then they review the new search methods including Array.prototype.find and Array.prototype.findIndex.",
          "length": "1655",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-1-changes_to_arrays-020917-PGM.00_27_20_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-1-changes_to_arrays-020917-PGM.00_27_20_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-1-changes_to_arrays-020917-PGM.00_27_20_26.Still001-sm.jpg",
          "title": "Changes to Arrays",
          "transcript": "WEBVTT\n\n1\n00:00:00.113 --> 00:00:01.209\nWelcome to ITProTV.\n\n2\n00:00:01.209 --> 00:00:02.252\nI'm your host, Don Pezet.\n\n3\n00:00:02.252 --> 00:00:06.673\n[CROSSTALK]\n\n4\n00:00:06.673 --> 00:00:08.377\n[MUSIC]\n\n5\n00:00:08.377 --> 00:00:12.062\nYou're watching ITProTV.\n\n6\n00:00:12.062 --> 00:00:16.197\nAll right, greetings everyone, and welcome\nto another exciting episode of ITProTV.\n\n7\n00:00:16.197 --> 00:00:17.877\nI'm your host, Daniel Lowrie.\n\n8\n00:00:17.877 --> 00:00:22.367\nAnd in today's episode, we're continuing\nto look at what's new in ES6.\n\n9\n00:00:22.367 --> 00:00:25.700\nAnd of course joining us back in the\nstudio is our resident expert on that very\n\n10\n00:00:25.700 --> 00:00:27.800\ntopic, our good friend,\nMr Justin Dennison.\n\n11\n00:00:27.800 --> 00:00:29.972\nJustin, welcome back to the studio my man,\nhow is it going today?\n\n12\n00:00:29.972 --> 00:00:31.807\nGoing fairly well, thanks for\nhaving me back,Daniel.\n\n13\n00:00:31.807 --> 00:00:33.113\nI'm excited.\n\n14\n00:00:33.113 --> 00:00:38.426\nWe're talking about arrays today,\nnew features and arrays in ES6.\n\n15\n00:00:38.426 --> 00:00:42.645\nSo arrays have always been very\nclose to my heart, very dear.\n\n16\n00:00:42.645 --> 00:00:46.189\nBecause whether I have one thing or\na million things,\n\n17\n00:00:46.189 --> 00:00:50.780\nthey always behave the same I think\nof arrays as just like my pockets.\n\n18\n00:00:50.780 --> 00:00:52.755\nThey are used to put things in and\n\n19\n00:00:52.755 --> 00:00:56.040\nthen I can just kinda rifle around and\nproduce the thing that I need.\n\n20\n00:00:56.040 --> 00:00:59.890\nOr I can grab a handful of\nthings out of my pockets.\n\n21\n00:00:59.890 --> 00:01:03.260\nSo arrays, if we think back,\narrays are collections.\n\n22\n00:01:03.260 --> 00:01:07.194\nAnd they can be collections of strings,\nother arrays, which gets kind of weird.\n\n23\n00:01:07.194 --> 00:01:09.262\nI've got arrays and arrays and arrays.\n\n24\n00:01:09.262 --> 00:01:13.484\nI would be very careful if you're\ndoing that cuz sometimes it kind\n\n25\n00:01:13.484 --> 00:01:14.651\nof blows my mind.\n\n26\n00:01:14.651 --> 00:01:17.385\nBut I'm gonna have arrays of objects,\narrays of numbers.\n\n27\n00:01:17.385 --> 00:01:22.241\nArrays can contain any other thing and\njust kind of bundle them up in a nice,\n\n28\n00:01:22.241 --> 00:01:23.254\ntidy package.\n\n29\n00:01:23.254 --> 00:01:26.219\nWe do have to remember though,\narrays are zero indexed.\n\n30\n00:01:26.219 --> 00:01:27.550\nSo we start counting at zero.\n\n31\n00:01:27.550 --> 00:01:31.495\nSo the first element is not the first\nelement with the number one but\n\n32\n00:01:31.495 --> 00:01:34.255\nthe first element is\nactually numbered zero.\n\n33\n00:01:34.255 --> 00:01:39.159\nIt's kind of weird to think of it that\nway because humans don't typically go,\n\n34\n00:01:39.159 --> 00:01:40.661\nI have zero candy bars.\n\n35\n00:01:40.661 --> 00:01:44.119\nI have one candy bar and\nthen have two candy bars in your hands.\n\n36\n00:01:44.119 --> 00:01:45.867\nSo be very aware of that.\n\n37\n00:01:45.867 --> 00:01:48.686\nSo we have the zero base collections.\n\n38\n00:01:48.686 --> 00:01:54.886\nThey are pretty well thought out\nin the original ES5 JavaScript.\n\n39\n00:01:54.886 --> 00:01:58.613\nES5's come around now that\nES6 is a prominent name.\n\n40\n00:01:58.613 --> 00:02:02.017\nSo the JavaScript has been around for\na while.\n\n41\n00:02:02.017 --> 00:02:05.135\nArrays have always been there,\nfairly nice.\n\n42\n00:02:05.135 --> 00:02:08.116\nBut there have always been\na couple of pain points.\n\n43\n00:02:08.116 --> 00:02:11.220\nAnd those pain points\nare starting to get solved.\n\n44\n00:02:11.220 --> 00:02:13.999\nSo that growing up\nprocedure has been nice.\n\n45\n00:02:13.999 --> 00:02:15.807\nBut let's just go ahead and\n\n46\n00:02:15.807 --> 00:02:20.950\nstart taking a look at these wonderful\nnew features that have come to arrays.\n\n47\n00:02:20.950 --> 00:02:23.360\nSo I'm in my browser,\nI need to get my project set up.\n\n48\n00:02:23.360 --> 00:02:28.620\nSo I'm gonna open my index.HTML,\njust kind of my playground here.\n\n49\n00:02:28.620 --> 00:02:35.020\nAnd that's gonna allow me just to refresh\nthe page, and have my JavaScript run.\n\n50\n00:02:35.020 --> 00:02:39.090\nAnd then I'm gonna open Chrome Dev Tools,\ncuz that's where all the fun is.\n\n51\n00:02:39.090 --> 00:02:44.300\nCurrently this HTML page is just for\nfiller and an entry point.\n\n52\n00:02:44.300 --> 00:02:46.070\nBut, I don't know, kind of a lead ahead.\n\n53\n00:02:46.070 --> 00:02:50.550\nThere might be some interesting things\nthat occur with the HTML later.\n\n54\n00:02:50.550 --> 00:02:54.171\nAnd then I have my Chrome Dev Tools,\nmy JavaScript tool produced here.\n\n55\n00:02:54.171 --> 00:02:58.605\nAnd then I'm gonna hop over into my\neditor and get my project set up here.\n\n56\n00:02:58.605 --> 00:03:00.827\nSo add my project folder.\n\n57\n00:03:00.827 --> 00:03:03.689\nAnd lookie there,\n[LAUGH] I'm already ready to go.\n\n58\n00:03:03.689 --> 00:03:08.393\nMy index.html, uh-oh,\nI kinda showed my hand there a little bit.\n\n59\n00:03:08.393 --> 00:03:13.620\nIt is mostly standard boilerplate but\nwe'll come back and look at this later.\n\n60\n00:03:13.620 --> 00:03:19.340\nAnd then my app.js is where I'm going to\nstart looking and diving into arrays.\n\n61\n00:03:19.340 --> 00:03:25.140\nSo arrays, usually when people\ndid this the old school way,\n\n62\n00:03:25.140 --> 00:03:28.500\nand I still do this,\na lot of people still do this.\n\n63\n00:03:28.500 --> 00:03:31.480\nBut you had a couple of\nways of making arrays.\n\n64\n00:03:31.480 --> 00:03:36.873\nSo I'm gonna stay with const,\njust keep everything a constant with ES6.\n\n65\n00:03:36.873 --> 00:03:41.242\nI'm gonna start with a, and\nthat's just gonna be 1, 2, 3.\n\n66\n00:03:41.242 --> 00:03:43.573\nAnd then a const b.\n\n67\n00:03:43.573 --> 00:03:46.200\nThese are just single-letter variables,\njust for funsies.\n\n68\n00:03:46.200 --> 00:03:47.390\nLet's zoom that in a little bit.\n\n69\n00:03:47.390 --> 00:03:49.170\nI'm having trouble reading that myself.\n\n70\n00:03:49.170 --> 00:03:54.561\nI could start with new Array[1, 2.\n\n71\n00:03:54.561 --> 00:03:58.550\nAnd let's see how those compare, so\n\n72\n00:03:58.550 --> 00:04:02.805\nlog those out, a, b, and there we go.\n\n73\n00:04:02.805 --> 00:04:05.078\nSo, I have a couple of ways\nof constructing arrays.\n\n74\n00:04:05.078 --> 00:04:08.223\nNow there are several\nother ways to do that.\n\n75\n00:04:08.223 --> 00:04:11.877\nHowever, notice this is\nkind of a weird syntax.\n\n76\n00:04:11.877 --> 00:04:14.810\nAnd this is where we started\nrunning into problems.\n\n77\n00:04:14.810 --> 00:04:20.278\nLet's further explore this\nnew array parentheses syntax.\n\n78\n00:04:20.278 --> 00:04:24.005\nI'm gonna comment these out\njust to take away the noise.\n\n79\n00:04:24.005 --> 00:04:27.950\nSo when we're constructing arrays,\n\n80\n00:04:27.950 --> 00:04:33.261\nas we just saw,\nwe can use the new array built-in.\n\n81\n00:04:33.261 --> 00:04:38.040\nAnd so if I start back with a and since\nI've commented out the previous variable.\n\n82\n00:04:38.040 --> 00:04:40.900\nI can still use a otherwise I would get\n\n83\n00:04:40.900 --> 00:04:43.680\na reference error I can't\nreassign to a constant.\n\n84\n00:04:43.680 --> 00:04:48.180\nSo if I start with new and just say array.\n\n85\n00:04:48.180 --> 00:04:49.340\nI got to spell it right.\n\n86\n00:04:49.340 --> 00:04:50.253\nThat's a very important point.\n\n87\n00:04:50.253 --> 00:04:51.417\n[LAUGH] Always helps for\n\n88\n00:04:51.417 --> 00:04:55.410\nthe computer because it doesn't just\nassume it knows what you mean, right?\n\n89\n00:04:55.410 --> 00:04:59.577\nNo, no, no, and that's a huge pain point,\nit should know.\n\n90\n00:04:59.577 --> 00:05:02.025\nComputers only know what\nyou tell them to know.\n\n91\n00:05:02.025 --> 00:05:07.920\nSo if something goes wrong it's actually\nmore so operator error than anything else.\n\n92\n00:05:07.920 --> 00:05:10.100\nProblem exists between keyboard and\nchair, right?\n\n93\n00:05:10.100 --> 00:05:14.050\nYeah, problem exists between keyboard and\nchair, that's [LAUGH] a great point.\n\n94\n00:05:14.050 --> 00:05:17.690\nSometimes I don't like to feel that\nway but it is a realistic point.\n\n95\n00:05:17.690 --> 00:05:20.821\nAnd notice if I leave things out,\nI get just an empty array.\n\n96\n00:05:20.821 --> 00:05:26.331\nWell, okay that's kind of anticipated, but\nwhat if I start doing things like this.\n\n97\n00:05:26.331 --> 00:05:31.525\nAnd this may happen on the fly.\n\n98\n00:05:31.525 --> 00:05:35.188\nSo new array of undefined.\n\n99\n00:05:35.188 --> 00:05:43.439\nBy passing this type of undefined you\nactually have to console log that out.\n\n100\n00:05:43.439 --> 00:05:46.793\nI think it's funny that my\neditor has a shortcut for bug.\n\n101\n00:05:46.793 --> 00:05:51.658\nNotice, it's an array that has\na single element that is undefined.\n\n102\n00:05:51.658 --> 00:05:53.203\nWell, that could be problematic.\n\n103\n00:05:53.203 --> 00:05:55.955\nBut, it still works kind of as expected.\n\n104\n00:05:55.955 --> 00:06:03.583\nBut, what happens if I put a single\nnumber in here, like three?\n\n105\n00:06:03.583 --> 00:06:06.973\nAll right, so,\nDaniel I just wanna pick your brain.\n\n106\n00:06:06.973 --> 00:06:09.925\nWhat do you think is gonna happen\nbased on what we've just seen?\n\n107\n00:06:09.925 --> 00:06:12.109\nI'm guessing it's gonna count.\n\n108\n00:06:12.109 --> 00:06:13.422\nIt's gonna count, okay.\n\n109\n00:06:13.422 --> 00:06:17.023\nSo I'm gonna get three, one,\ntwo, three something like that.\n\n110\n00:06:17.023 --> 00:06:19.861\nWell- Or maybe it's just gonna put three.\n\n111\n00:06:19.861 --> 00:06:21.407\nMaybe it's just gonna put three.\n\n112\n00:06:21.407 --> 00:06:23.900\nThose are both valid thoughts.\n\n113\n00:06:23.900 --> 00:06:28.154\nExcept no,\nit actually takes a single number and\n\n114\n00:06:28.154 --> 00:06:33.480\nmakes an array that has a length but\nno elements in it.\n\n115\n00:06:33.480 --> 00:06:36.140\nAnd now we get into the, hold on a second.\n\n116\n00:06:37.460 --> 00:06:42.550\nThat behaves differently if I give it\nmore than one number as we've seen here.\n\n117\n00:06:42.550 --> 00:06:45.720\nIf I get a single number\nit's the length operator.\n\n118\n00:06:45.720 --> 00:06:49.124\nWell I don't like that\ndifference in behavior,\n\n119\n00:06:49.124 --> 00:06:52.285\nthat's kind of weird and\ncan lead to issues.\n\n120\n00:06:52.285 --> 00:06:56.160\nAnd this is something that is\ncalled having holes in the array.\n\n121\n00:06:56.160 --> 00:07:01.240\nThere's nothing there, it's just empty,\nbut it has a predefined length.\n\n122\n00:07:01.240 --> 00:07:04.750\nWhich is valid, maybe you need to\npopulate this in a particular order so\n\n123\n00:07:04.750 --> 00:07:06.820\nyou need to find the length.\n\n124\n00:07:06.820 --> 00:07:10.907\nBut if I'm just trying to construct\nan array with the number three in it,\n\n125\n00:07:10.907 --> 00:07:12.858\nthis is not the assumed behavior.\n\n126\n00:07:12.858 --> 00:07:18.436\nSo with this said [BLANK\nAUDIO] what if I wanna [BLANK\n\n127\n00:07:18.436 --> 00:07:23.190\nAUDIO] put a negative number in there,\nokay?\n\n128\n00:07:23.190 --> 00:07:28.830\nWell, what we've just seen, that's\ngonna try to assign a negative length.\n\n129\n00:07:28.830 --> 00:07:31.419\nWell, negative lengths-\nDoesn't really make sense.\n\n130\n00:07:31.419 --> 00:07:33.834\nDoesn't really make sense,\nso now I have an error.\n\n131\n00:07:33.834 --> 00:07:38.270\nWell, I really wanted an array,\njust with negative one in it.\n\n132\n00:07:38.270 --> 00:07:39.681\nWell, that's a problem.\n\n133\n00:07:39.681 --> 00:07:44.598\nSo, to help us out, ES6 has brought\nalong some new array operations for\n\n134\n00:07:44.598 --> 00:07:48.722\nconstructing arrays that helps\nalleviate these problems.\n\n135\n00:07:48.722 --> 00:07:51.705\nSo now that we've felt the pain\npoint how do we fix them?\n\n136\n00:07:51.705 --> 00:07:54.765\nHow do we free ourselves from them?\n\n137\n00:07:54.765 --> 00:07:57.326\nAs always I'm in Chrome.\n\n138\n00:07:57.326 --> 00:08:01.270\nBe very very careful, some of these may\nhave some weirdness in other browsers and\n\n139\n00:08:01.270 --> 00:08:03.310\nsome other may have weirdness in Chrome.\n\n140\n00:08:03.310 --> 00:08:09.340\nChrome is updated fairly regularly, things\nare possibly broken from time to time.\n\n141\n00:08:09.340 --> 00:08:12.720\nSo, if I keep that, I can,\n\n142\n00:08:12.720 --> 00:08:17.030\nlet's start with the negative one.\n\n143\n00:08:17.030 --> 00:08:19.060\nI want an array with just\nnegative one in there.\n\n144\n00:08:20.640 --> 00:08:24.840\nSo I can say Array.of, so\n\n145\n00:08:24.840 --> 00:08:29.960\nan array of, and then I can just\ngive it the elements, okay?\n\n146\n00:08:29.960 --> 00:08:30.633\nSo if I do that.\n\n147\n00:08:32.047 --> 00:08:33.331\nI actually have to change the variable.\n\n148\n00:08:33.331 --> 00:08:37.850\nYep, if I do that I get\nthe expected behavior.\n\n149\n00:08:37.850 --> 00:08:41.780\nSo I have an array of something.\n\n150\n00:08:41.780 --> 00:08:46.340\nAnd then I wonder what\nhappens if now I continue\n\n151\n00:08:46.340 --> 00:08:49.810\njust like I did up on line three of\njust putting multiple elements in there.\n\n152\n00:08:51.220 --> 00:08:53.310\nAnd it still behaves as I anticipated.\n\n153\n00:08:53.310 --> 00:08:55.331\nSo, array of, is very, very nice.\n\n154\n00:08:55.331 --> 00:08:57.979\n&gt;&gt; So, Justin,\nif we try to do it the old school way,\n\n155\n00:08:57.979 --> 00:09:02.294\nit's basically just gonna define a length\nof undefined characters or strings.\n\n156\n00:09:02.294 --> 00:09:05.619\nOr whatever that you would want in there,\nthat aren't actually there.\n\n157\n00:09:05.619 --> 00:09:06.813\nSo, it's just saying,\nit's gonna be that length.\n\n158\n00:09:06.813 --> 00:09:09.929\nIf we wanted to actually put\ncharacters into our array,\n\n159\n00:09:09.929 --> 00:09:11.620\nwe have to use the array.of?\n\n160\n00:09:11.620 --> 00:09:13.240\n&gt;&gt; Yes, absolutely.\n\n161\n00:09:13.240 --> 00:09:19.360\nAnd, for me, typically I do not use this\nnew array syntax because of that issue.\n\n162\n00:09:19.360 --> 00:09:23.748\nI will either use the literal syntax,\nwhich is the square brackets, so\n\n163\n00:09:23.748 --> 00:09:26.027\nI can say this is exactly what I want.\n\n164\n00:09:26.027 --> 00:09:30.808\nOr with this Array.of maybe you have\nsomething that's dynamically being pulled\n\n165\n00:09:30.808 --> 00:09:31.993\nfrom a data source.\n\n166\n00:09:31.993 --> 00:09:35.641\nThat you can't just surround\nwith square brackets.\n\n167\n00:09:35.641 --> 00:09:39.528\nAnd you just say, well I need\nthese things to go in the array.\n\n168\n00:09:39.528 --> 00:09:43.850\nSo this Array.of helps alleviate\nsome of those problems.\n\n169\n00:09:43.850 --> 00:09:47.420\nAnd doesn't get that weird\nvariable length to start out.\n\n170\n00:09:47.420 --> 00:09:53.810\nNow in addition to Array.of is gonna take\nindividual elements separated by commas.\n\n171\n00:09:53.810 --> 00:09:58.750\nBut what if I already have a collection,\nlike a collection of other things?\n\n172\n00:09:58.750 --> 00:10:01.270\nNow typically I use arrays a lot.\n\n173\n00:10:01.270 --> 00:10:03.270\nYou may use arrays a great deal.\n\n174\n00:10:03.270 --> 00:10:08.820\nBut there are other types of collections,\narray-ish I like to think type things.\n\n175\n00:10:08.820 --> 00:10:11.120\nBut I want to convert those to an array,\nbecause arrays are so\n\n176\n00:10:11.120 --> 00:10:12.960\npowerful in JavaScript.\n\n177\n00:10:12.960 --> 00:10:13.740\nI find them powerful.\n\n178\n00:10:13.740 --> 00:10:17.410\nThere may be a difference of\nopinion there for other people.\n\n179\n00:10:17.410 --> 00:10:20.510\nBut let's take a look at an example.\n\n180\n00:10:20.510 --> 00:10:22.050\nI like to build Web applications.\n\n181\n00:10:22.050 --> 00:10:23.850\nThis is not about building\nWeb applications.\n\n182\n00:10:23.850 --> 00:10:26.850\nBut we're gonna use one\nof these examples to see\n\n183\n00:10:26.850 --> 00:10:30.522\nhow can I use this new array iterator?\n\n184\n00:10:30.522 --> 00:10:37.680\nAnd Array.from is going to allow us to\npass an iterable and get a new array.\n\n185\n00:10:37.680 --> 00:10:41.890\n&gt;&gt; Now Justin,\nhow is iterables defined in this context?\n\n186\n00:10:41.890 --> 00:10:43.318\n&gt;&gt; So that's a great question, Daniel.\n\n187\n00:10:43.318 --> 00:10:47.045\nSometimes people like to\nuse big words to make them-\n\n188\n00:10:47.045 --> 00:10:47.582\n&gt;&gt; [LAUGH]\n\n189\n00:10:47.582 --> 00:10:48.566\n&gt;&gt; Feel good about themselves.\n\n190\n00:10:48.566 --> 00:10:49.796\nBut iterable, I like to think of it.\n\n191\n00:10:49.796 --> 00:10:51.098\nThis is not the strictest definition.\n\n192\n00:10:51.098 --> 00:10:57.980\nAnything that I can use with a for loop,\nthat I can iterate through, is iterable.\n\n193\n00:10:57.980 --> 00:11:02.655\nNow there's a stricter definition\nthat we'll get into in a later topic.\n\n194\n00:11:02.655 --> 00:11:05.721\nBut for now what serves our purpose,\nif I can write a for\n\n195\n00:11:05.721 --> 00:11:08.468\nloop to move through\nthe elements of this thing.\n\n196\n00:11:08.468 --> 00:11:12.452\nWhether you want to call it a collection\nor not, then it is iterable.\n\n197\n00:11:12.452 --> 00:11:15.460\n&gt;&gt; So at this point in time,\nwe're not getting fancy with anything.\n\n198\n00:11:15.460 --> 00:11:17.729\nAs we know the word iteration,\nthat is an iterable,\n\n199\n00:11:17.729 --> 00:11:19.550\nanything that we can iterate through.\n\n200\n00:11:19.550 --> 00:11:20.640\n&gt;&gt; Yes, absolutely.\n\n201\n00:11:20.640 --> 00:11:21.310\nYou got it, Daniel.\n\n202\n00:11:21.310 --> 00:11:21.810\nMakes me happy.\n&gt;&gt; [LAUGH]\n\n203\n00:11:21.810 --> 00:11:23.157\n&gt;&gt; That Daniel's like, I got it.\n\n204\n00:11:23.157 --> 00:11:25.012\nI got it.\n\n205\n00:11:25.012 --> 00:11:26.560\nSo how do I go about doing this?\n\n206\n00:11:26.560 --> 00:11:29.236\nWell, you saw my hand a little bit\n\n207\n00:11:29.236 --> 00:11:33.694\nover my index.html.\nI had some commented out HTML here.\n\n208\n00:11:33.694 --> 00:11:36.004\nAnd don't worry if you're like,\n\n209\n00:11:36.004 --> 00:11:38.010\nwhat is that?\nDon't worry about it.\n\n210\n00:11:38.010 --> 00:11:39.180\nIt's fine.\nWe're just using it for\n\n211\n00:11:39.180 --> 00:11:40.840\ndemonstration purposes.\n\n212\n00:11:40.840 --> 00:11:44.740\nThere are some wonderful resources\nin our library about building Web\n\n213\n00:11:44.740 --> 00:11:47.140\napplications and\nwhat this is actually doing.\n\n214\n00:11:47.140 --> 00:11:48.508\nSo definitely check those out.\n\n215\n00:11:48.508 --> 00:11:55.870\nBut this array.from, and I've used this\nseveral times in this exact context.\n\n216\n00:11:55.870 --> 00:11:57.550\nIf I scroll down here,\n\n217\n00:11:57.550 --> 00:12:02.530\nI had a little hidden piece of\ncode down here to help us out.\n\n218\n00:12:02.530 --> 00:12:03.320\nI'm very sneaky.\n\n219\n00:12:04.560 --> 00:12:07.940\nSo, const cards, and\nthen there's all this craziness.\n\n220\n00:12:07.940 --> 00:12:09.080\nLet's just see what's in here.\n\n221\n00:12:12.021 --> 00:12:16.921\nSo if I refresh, see how there are square\nbrackets in that thing that's printed out\n\n222\n00:12:16.921 --> 00:12:19.092\nand it says div.card, div.card?\n\n223\n00:12:19.092 --> 00:12:23.371\nOkay, well, that's just these\nthings in the HTML page and\n\n224\n00:12:23.371 --> 00:12:26.122\nthis looks a great deal like an array.\n\n225\n00:12:26.122 --> 00:12:30.548\nAny time you see those square brackets,\nwhen I first started this I was like,\n\n226\n00:12:30.548 --> 00:12:33.063\nthat's an array,\nI can do array type things.\n\n227\n00:12:33.063 --> 00:12:38.304\nWell, if I drop this down and I scroll\ndown here to this, see this __proto__?\n\n228\n00:12:38.304 --> 00:12:42.340\nThis does not say an array.\n\n229\n00:12:42.340 --> 00:12:45.262\nIf I miss this, if I overlook this part,\n\n230\n00:12:45.262 --> 00:12:50.670\nI would go well this part looks like an\narray, and it has a length like an array.\n\n231\n00:12:50.670 --> 00:12:55.171\nIt is an iterable but\nit is not specifically an array.\n\n232\n00:12:55.171 --> 00:12:56.469\nWell, okay.\n\n233\n00:12:56.469 --> 00:13:01.398\nAnd then I would do something\ncrazy like I wanna map\n\n234\n00:13:01.398 --> 00:13:06.236\nover these and\nget the letters inside of these cards.\n\n235\n00:13:06.236 --> 00:13:10.032\nSo if I look, there are these letters\nover here that I just wanna pull out.\n\n236\n00:13:10.032 --> 00:13:12.760\nAnd I'm pulling data out of a web page.\n\n237\n00:13:12.760 --> 00:13:19.331\nSo I can say, cards.map,\nand let's just say for\n\n238\n00:13:19.331 --> 00:13:25.300\neach card I want to do\nconsole.log the card.\n\n239\n00:13:25.300 --> 00:13:30.400\nAnd what we're gonna find is no,\nI use map all the time on arrays.\n\n240\n00:13:30.400 --> 00:13:31.868\nI like map, map's fun.\n\n241\n00:13:31.868 --> 00:13:36.379\nIt saves me a lot of trouble,\nbut cards.map is not defined.\n\n242\n00:13:36.379 --> 00:13:41.842\nIf I go back, comment this out and\nactually say console.log(cards) and\n\n243\n00:13:41.842 --> 00:13:44.800\ngo back and look at this cards variable.\n\n244\n00:13:44.800 --> 00:13:50.098\nThen, in fact, I have to come\ndown here to this __proto__.\n\n245\n00:13:50.098 --> 00:13:54.448\nAnd it is a node list which is\nspecific to HTML interactions.\n\n246\n00:13:54.448 --> 00:13:56.636\nWell, I've never seen\nthis data type before.\n\n247\n00:13:56.636 --> 00:14:01.636\nI don't know how to use it, I'm scared,\nI'm kinda getting sweaty just seeing,\n\n248\n00:14:01.636 --> 00:14:04.249\nI can't use these normal things that I do.\n\n249\n00:14:04.249 --> 00:14:07.556\nIt would be really nice\nif it was an array.\n\n250\n00:14:07.556 --> 00:14:10.408\nWell, we have a new method\nthat's coming to our rescue.\n\n251\n00:14:10.408 --> 00:14:16.177\nAnd in fact, I can make this\nan array very, very easily.\n\n252\n00:14:16.177 --> 00:14:21.163\nSo I'm gonna take this away,\ntake this away, and\n\n253\n00:14:21.163 --> 00:14:26.528\nI'm just gonna say const\ncardArray = Array.from.\n\n254\n00:14:26.528 --> 00:14:32.114\nNow the from is going to take an iterable.\n\n255\n00:14:32.114 --> 00:14:35.724\nSo anything that can be used with a for\nloop And cards.\n\n256\n00:14:35.724 --> 00:14:39.677\nI'm passing this iterable\ninside of array.from.\n\n257\n00:14:39.677 --> 00:14:41.157\nLet's see how that plays out.\n\n258\n00:14:45.266 --> 00:14:46.466\nIf I can type this correctly here.\n\n259\n00:14:46.466 --> 00:14:52.630\nWell, it looks kind of the same.\n\n260\n00:14:52.630 --> 00:14:56.545\nBut if we inspect further, aha,\nI now have an array at my disposal and\n\n261\n00:14:56.545 --> 00:15:00.478\nnot that weird node-less thing\nthat's just charading as an array.\n\n262\n00:15:00.478 --> 00:15:04.598\nSo now I have all of my array methods.\n\n263\n00:15:04.598 --> 00:15:07.950\nOkay, well let's see if I can go back and\n\n264\n00:15:07.950 --> 00:15:10.710\nactually get those letters\nusing the normal array methods.\n\n265\n00:15:10.710 --> 00:15:13.524\nMaybe it's just pretending\nto be an array still.\n\n266\n00:15:13.524 --> 00:15:14.816\nI should be able to map.\n\n267\n00:15:14.816 --> 00:15:23.283\nSo const letters = cardArray.map.\n\n268\n00:15:23.283 --> 00:15:30.224\nAnd for\neach card give me the card.innerText.\n\n269\n00:15:30.224 --> 00:15:32.998\nNow again,\nyou don't necessarily have to know these.\n\n270\n00:15:32.998 --> 00:15:37.657\nThis is a little beyond the scope, so\nsuspension of disbelief here for a moment.\n\n271\n00:15:37.657 --> 00:15:39.770\nTrust me.\n\n272\n00:15:39.770 --> 00:15:41.377\nThis should work.\n\n273\n00:15:41.377 --> 00:15:43.766\nNotice there's a strong should in there.\n\n274\n00:15:43.766 --> 00:15:49.376\nSo console.log And letters.\n\n275\n00:15:49.376 --> 00:15:50.756\nThat is not how you spell letters.\n\n276\n00:15:50.756 --> 00:15:51.364\n&gt;&gt; Letteers.\n\n277\n00:15:51.364 --> 00:15:56.366\n&gt;&gt; [LAUGH] And now I have actually\npulled the letter information\n\n278\n00:15:56.366 --> 00:16:02.050\nout of those HTML files,\nwhatever you wanna call these elements.\n\n279\n00:16:02.050 --> 00:16:08.020\nIf we come back here and look, notice\nbetween these two div things is a letter.\n\n280\n00:16:08.020 --> 00:16:09.950\nLetter A, B, C, D.\n\n281\n00:16:09.950 --> 00:16:14.670\nAnd now, I'm able to use my\narray methods to pull those out.\n\n282\n00:16:14.670 --> 00:16:19.570\nNow this is such a common\noperation that the .from method\n\n283\n00:16:19.570 --> 00:16:23.160\nprovides this as a second option.\n\n284\n00:16:23.160 --> 00:16:26.160\nSo I've written this JavaScript\n\n285\n00:16:26.160 --> 00:16:29.420\nto grab the information out\nof those HTML elements.\n\n286\n00:16:30.820 --> 00:16:35.672\nThis is so common that array.from\nwill actually take a function.\n\n287\n00:16:38.492 --> 00:16:44.610\nActually, it will take this function,\nand does the map for you.\n\n288\n00:16:46.440 --> 00:16:47.310\nVery careful.\n\n289\n00:16:47.310 --> 00:16:49.780\nDon't skip down to the bottom\nof the screen there.\n\n290\n00:16:49.780 --> 00:16:54.984\nSo I'm just gonna comment this out,\ncomment this out, and console.log\n\n291\n00:16:57.262 --> 00:17:00.590\nThe card array, and\nnow I have to be careful.\n\n292\n00:17:00.590 --> 00:17:04.347\nMy variable names are a little mismatched,\nI really should name this to letters.\n\n293\n00:17:04.347 --> 00:17:10.810\nBecause as I'm building the array, I am\ntransforming the array as I'm building it.\n\n294\n00:17:10.810 --> 00:17:13.220\nLet's see if that works and it does.\n\n295\n00:17:13.220 --> 00:17:17.960\nSo, you get a map for free as a second\nargument of the .from method.\n\n296\n00:17:17.960 --> 00:17:18.630\n&gt;&gt; That's kinda cool.\n\n297\n00:17:18.630 --> 00:17:22.170\nIt's like you're taking the couple\nlittle lines of code there and\n\n298\n00:17:22.170 --> 00:17:23.380\nmaking it a big one liner.\n\n299\n00:17:23.380 --> 00:17:24.520\n&gt;&gt; Yep, a big one liner.\n\n300\n00:17:24.520 --> 00:17:30.050\nBut what's important is I think it's\nstill a very transparent one liner.\n\n301\n00:17:30.050 --> 00:17:34.130\nIt's not something where I'm like, all\nright, I got to spend the next 20 minutes\n\n302\n00:17:34.130 --> 00:17:37.110\nfiguring out what's going on\nbecause someone got fancy.\n\n303\n00:17:37.110 --> 00:17:38.200\nDon't do that.\n\n304\n00:17:38.200 --> 00:17:41.980\nIf you can get clarity and\nshorten your code that's fine.\n\n305\n00:17:41.980 --> 00:17:47.230\nDon't try to chain a bunch of things\ntogether and go yeah, it's one line now.\n\n306\n00:17:47.230 --> 00:17:48.000\nLook at my one liner.\n\n307\n00:17:48.000 --> 00:17:49.140\n&gt;&gt; What does it do?\n\n308\n00:17:49.140 --> 00:17:50.080\n&gt;&gt; It prints Shakespeare.\n\n309\n00:17:50.080 --> 00:17:51.520\n&gt;&gt; How does it do that?\n\n310\n00:17:51.520 --> 00:17:52.360\n&gt;&gt; Not real sure.\n\n311\n00:17:52.360 --> 00:17:54.410\nSo don't do things like that.\n\n312\n00:17:54.410 --> 00:17:55.430\nBut those do come for free.\n\n313\n00:17:55.430 --> 00:17:59.400\nThose are the two new construction\nmethods that are on arrays.\n\n314\n00:18:00.730 --> 00:18:01.580\nThey are very handy.\n\n315\n00:18:01.580 --> 00:18:03.360\nI like them a lot.\n\n316\n00:18:03.360 --> 00:18:05.020\nI've used them several times.\n\n317\n00:18:05.020 --> 00:18:09.135\nAnd actually, a great deal in\nthe context of what you just saw.\n\n318\n00:18:10.660 --> 00:18:15.100\nNow, within arrays, there are times\nwhere I need to search and move around,\n\n319\n00:18:15.100 --> 00:18:18.660\nI wanna find,\nis a specific element in the array?\n\n320\n00:18:18.660 --> 00:18:20.630\n&gt;&gt; So this is you digging\nthrough your pockets going,\n\n321\n00:18:20.630 --> 00:18:22.630\nokay what did I do with my wallet,\nwhere's that?\n\n322\n00:18:22.630 --> 00:18:23.204\n&gt;&gt; Right.\n\n323\n00:18:23.204 --> 00:18:24.214\n&gt;&gt; You got a bunch of stuff in there,\ntrying to find that.\n\n324\n00:18:24.214 --> 00:18:24.844\n&gt;&gt; Right.\n\n325\n00:18:24.844 --> 00:18:29.090\nAnd typically how we do it is just like\nwe would dig around in our pocket.\n\n326\n00:18:29.090 --> 00:18:31.340\nMan I need a quarter,\ngot a pocket full of change,\n\n327\n00:18:31.340 --> 00:18:33.845\nyou're digging around, you pull out.\n\n328\n00:18:33.845 --> 00:18:35.045\nNo, that's a bunch of pennies.\n\n329\n00:18:35.045 --> 00:18:38.810\nAnd what's really weird, is we do\nthe exact same thing that arrays would do.\n\n330\n00:18:38.810 --> 00:18:43.405\nWe don't put the change that we just\npulled out of our pockets and discard it.\n\n331\n00:18:43.405 --> 00:18:45.869\nA lot of times I'll just put\nit right back in my pocket and\n\n332\n00:18:45.869 --> 00:18:48.010\nstart digging around again.\n\n333\n00:18:48.010 --> 00:18:49.300\nAnd I'm like, still the same pennies.\n\n334\n00:18:49.300 --> 00:18:54.220\nAnd then you do that three or\nfour times, which is an iteration.\n\n335\n00:18:54.220 --> 00:18:55.519\nI'm iterating through the search.\n\n336\n00:18:55.519 --> 00:18:58.570\nAnd that's still the way how we\nwould iterate through arrays.\n\n337\n00:18:58.570 --> 00:18:59.260\nIs this the one I want?\n\n338\n00:18:59.260 --> 00:18:59.850\nNo.\n\n339\n00:18:59.850 --> 00:19:00.470\nOkay, next.\n\n340\n00:19:00.470 --> 00:19:01.618\nIs this the one I want?\n\n341\n00:19:01.618 --> 00:19:02.314\nNo, next.\n\n342\n00:19:02.314 --> 00:19:07.460\nAnd then finally, but there's\nthe nickel I needed or the quarter.\n\n343\n00:19:07.460 --> 00:19:11.380\nSo, that was such a common\nthing that I need to find or\n\n344\n00:19:11.380 --> 00:19:13.650\nI need to find where it is in the array.\n\n345\n00:19:13.650 --> 00:19:15.865\nWhat house it's living in in the array.\n\n346\n00:19:15.865 --> 00:19:20.024\nThat those have kind of come on board for\nES6.\n\n347\n00:19:20.024 --> 00:19:22.920\nNow, we're gonna change\nthese up a little bit.\n\n348\n00:19:25.710 --> 00:19:31.139\nIf you'll bear with me here I'm going\nto have to make a couple of new arrays.\n\n349\n00:19:32.940 --> 00:19:39.100\nSo I'm going to create some numbers\nto research the find and find,\n\n350\n00:19:39.100 --> 00:19:44.880\nor find index as these new methods.\n\n351\n00:19:44.880 --> 00:19:47.310\nSo I have numbers, and\nI'm going to create users.\n\n352\n00:19:47.310 --> 00:19:50.560\nAnd just to show you that I don't\nalways have to have arrays of\n\n353\n00:19:50.560 --> 00:19:54.870\nvery simple data types,\nright, numbers, strings.\n\n354\n00:19:54.870 --> 00:19:58.212\nWe're gonna build an object and\n\n355\n00:19:58.212 --> 00:20:03.917\nwe're gonna have Tony and\nlet's copy Tony over here.\n\n356\n00:20:06.747 --> 00:20:11.280\nAnd we're gonna have Sally.\n\n357\n00:20:11.280 --> 00:20:12.626\nSo I have two users.\n\n358\n00:20:12.626 --> 00:20:14.719\nThis would be like a database call,\nsomething of that nature.\n\n359\n00:20:14.719 --> 00:20:21.340\nWhere I'm getting a list of users back,\nand now I need to search through them.\n\n360\n00:20:21.340 --> 00:20:25.500\nSo how could I first find the elements?\n\n361\n00:20:25.500 --> 00:20:30.130\nSo find is a new array method\nthat allows me to find and\n\n362\n00:20:30.130 --> 00:20:33.150\nretrieve, like the nickel\nout of my pocket.\n\n363\n00:20:33.150 --> 00:20:37.410\nSo let's see that in use with\na very simple, numbers, and\n\n364\n00:20:37.410 --> 00:20:43.150\nthen let's see that in use with\na more complex collection of types.\n\n365\n00:20:43.150 --> 00:20:48.767\nSo, I want to find, of those numbers,\nDaniel, which one is your favorite?\n\n366\n00:20:48.767 --> 00:20:52.637\n&gt;&gt; I like, let's go dead in the middle,\nnumber three.\n\n367\n00:20:52.637 --> 00:20:56.914\n&gt;&gt; Number three so\nlet's say we're gonna find number three.\n\n368\n00:20:56.914 --> 00:20:58.555\nAnd that is numbers.find.\n\n369\n00:20:58.555 --> 00:21:03.400\nAnd find is actually going to take\na function that determines what\n\n370\n00:21:03.400 --> 00:21:06.020\nyou're trying to find.\n\n371\n00:21:06.020 --> 00:21:10.970\nOkay, so this map thing, notice our fat\narrow functions, those are handy for\n\n372\n00:21:10.970 --> 00:21:12.120\nshortening this.\n\n373\n00:21:12.120 --> 00:21:14.580\nWe're gonna have something very similar.\n\n374\n00:21:14.580 --> 00:21:21.765\nI want to find the number, That is\nequal to, and you said three, correct?\n\n375\n00:21:21.765 --> 00:21:22.682\n&gt;&gt; Mm-hm, yep.\n\n376\n00:21:22.682 --> 00:21:24.440\n&gt;&gt; Number three,\nI should just look at the variable name.\n\n377\n00:21:26.030 --> 00:21:28.420\nWell, okay, let's see if it worked.\n\n378\n00:21:30.040 --> 00:21:31.730\nI gotta put that inside parentheses.\n\n379\n00:21:35.120 --> 00:21:38.240\nAnd in fact it did retrieve\nthe number three for me.\n\n380\n00:21:38.240 --> 00:21:41.910\nNow it's kind of weird cuz\nin these simple examples,\n\n381\n00:21:41.910 --> 00:21:45.410\nyou're like, it did exactly what it.\n\n382\n00:21:45.410 --> 00:21:46.310\nYeah you said three.\n\n383\n00:21:46.310 --> 00:21:48.610\nThat's cool, who cares?\n\n384\n00:21:48.610 --> 00:21:51.920\nWell now let's see something a little\n\n385\n00:21:53.360 --> 00:21:56.880\nmore complex where we can start\nto see the power of this method.\n\n386\n00:21:56.880 --> 00:21:59.045\nSo if I make a database call or\n\n387\n00:21:59.045 --> 00:22:04.295\nI just have a list of users that has\ncome into my application some way.\n\n388\n00:22:04.295 --> 00:22:06.189\nAnd I wanna find\na particular user by name.\n\n389\n00:22:06.189 --> 00:22:10.490\nI actually wanna find\nthe user with the name Sally.\n\n390\n00:22:10.490 --> 00:22:12.970\nThis object would typically\nhave a lot more properties.\n\n391\n00:22:12.970 --> 00:22:17.310\nMaybe something about Sally, their\npassword hash, things of that nature.\n\n392\n00:22:17.310 --> 00:22:20.660\nBut I'm gonna search by name, so\nI'm going to do essentially a query.\n\n393\n00:22:21.750 --> 00:22:23.540\nHow could I do that?\n\n394\n00:22:23.540 --> 00:22:26.150\nWell, let's find Sally.\n\n395\n00:22:26.150 --> 00:22:31.349\nAnd I'm gonna say users.find and then for\n\n396\n00:22:31.349 --> 00:22:39.878\neach user I want to find a user whose\nname is equal to Sally, all right?\n\n397\n00:22:39.878 --> 00:22:43.689\nSo I did that up here and it just gave me\nthree cuz it gives me the object back.\n\n398\n00:22:44.920 --> 00:22:48.348\nBut here, we're gonna see a little\nbit different of a result.\n\n399\n00:22:48.348 --> 00:22:53.420\nSo console.log Sally.\n\n400\n00:22:53.420 --> 00:22:55.830\nAnd whoa too much swiping.\n\n401\n00:22:55.830 --> 00:22:59.580\nUsers Is not.\n\n402\n00:23:00.775 --> 00:23:01.732\nMissing an S there.\n\n403\n00:23:01.732 --> 00:23:04.165\nBe careful, typos-\n&gt;&gt; They'll get you every time.\n\n404\n00:23:04.165 --> 00:23:05.780\n&gt;&gt; They'll wreck your day.\n\n405\n00:23:05.780 --> 00:23:07.370\nThey'll wreck your day.\n\n406\n00:23:07.370 --> 00:23:11.690\nAnd if I refresh notice it did not\njust give me the string Sally but\n\n407\n00:23:11.690 --> 00:23:13.613\ninstead the entire object.\n\n408\n00:23:13.613 --> 00:23:16.853\nSo this is a wonderful helper method for\nmaking a quick search and\n\n409\n00:23:16.853 --> 00:23:19.520\nretrieving something out of a collection.\n\n410\n00:23:19.520 --> 00:23:24.432\nEspecially if that collection is\nmore complex in nature, right?\n\n411\n00:23:24.432 --> 00:23:28.271\nThe numbers, okay, I could probably\njust iterate through real quick.\n\n412\n00:23:28.271 --> 00:23:34.190\nBut for these objects I would\nhave to iterate through, check.\n\n413\n00:23:34.190 --> 00:23:36.630\nMake sure that there are no other ones.\n\n414\n00:23:36.630 --> 00:23:37.980\nBut that brings up a great point.\n\n415\n00:23:37.980 --> 00:23:40.440\nWhat if I had two users\nwith the name Sally?\n\n416\n00:23:41.620 --> 00:23:42.930\nBe very, very careful.\n\n417\n00:23:42.930 --> 00:23:45.680\nIt will give you the first one.\n\n418\n00:23:45.680 --> 00:23:48.228\nAs soon as it finds one it returns, okay.\n\n419\n00:23:48.228 --> 00:23:51.802\nSo it spits out the first one,\nit will not give you all of them.\n\n420\n00:23:51.802 --> 00:23:56.526\nOr, one from the back end, so\nbe very careful about that.\n\n421\n00:23:56.526 --> 00:23:59.222\nNow, there are times where\nI just need to look up and\n\n422\n00:23:59.222 --> 00:24:01.180\nsee where it is in position, right?\n\n423\n00:24:01.180 --> 00:24:03.580\nIt's kind of in line in a queue.\n\n424\n00:24:03.580 --> 00:24:06.990\nSo, I'm third in line at the DMV,\nand I'm having a blast.\n\n425\n00:24:06.990 --> 00:24:09.876\nSo, and as I move up,\nI just keep track of my position.\n\n426\n00:24:09.876 --> 00:24:12.010\nIf you've ever been in line for\na long time,\n\n427\n00:24:12.010 --> 00:24:15.090\nyou definitely have kept\ntrack of your position.\n\n428\n00:24:15.090 --> 00:24:18.730\nI've been here three hours and\nI'm still five people back.\n\n429\n00:24:18.730 --> 00:24:20.070\nSo that's fun.\n\n430\n00:24:20.070 --> 00:24:20.808\n&gt;&gt; Welcome to Disney Land.\n\n431\n00:24:20.808 --> 00:24:21.384\n&gt;&gt; Yeah, welcome.\n\n432\n00:24:21.384 --> 00:24:24.536\n&gt;&gt; [LAUGH]\n&gt;&gt; So if I do that,\n\n433\n00:24:24.536 --> 00:24:30.452\nthere is a very similar\nmethod called find index and\n\n434\n00:24:30.452 --> 00:24:35.828\nthat is gonna behave\nalmost exactly the same.\n\n435\n00:24:35.828 --> 00:24:38.906\nAs a matter of fact, I'm gonna do\nsomething a little brazen here, Daniel.\n\n436\n00:24:41.370 --> 00:24:45.515\n&gt;&gt; I'm gonna do this uncomment and\n\n437\n00:24:45.515 --> 00:24:53.048\nI'm gonna say numberThreePosition and\nsallyPosition.\n\n438\n00:24:53.048 --> 00:24:55.076\nAnd I'm actually gonna say findIndex.\n\n439\n00:24:55.076 --> 00:24:59.788\nSo now instead of getting\nthe actual object,\n\n440\n00:24:59.788 --> 00:25:04.360\nI should get where it is within the array.\n\n441\n00:25:04.360 --> 00:25:06.710\n&gt;&gt; So that way if you have multiple,\nsay we had two Sallys,\n\n442\n00:25:06.710 --> 00:25:09.915\nyou could say choose the first Sally or\nchoose the second Sally, whatever.\n\n443\n00:25:09.915 --> 00:25:14.305\n&gt;&gt; Right, so we'll see,\nI'm gonna get the position for\n\n444\n00:25:14.305 --> 00:25:17.560\nthis object or this number or this data.\n\n445\n00:25:18.740 --> 00:25:23.790\nLet's see if this returns the first one,\nall of them, I don't know.\n\n446\n00:25:23.790 --> 00:25:29.134\nIt would be nice if it\nreturned everything, but\n\n447\n00:25:29.134 --> 00:25:34.891\nknowing that it's fast,\nI suspect that it is not.\n\n448\n00:25:34.891 --> 00:25:40.209\nSo, if I, oop, and I get the instance\nof where they are, right?\n\n449\n00:25:40.209 --> 00:25:44.135\n&gt;&gt; So, it tells you what position they're\nin, instead of what is in that position.\n\n450\n00:25:44.135 --> 00:25:44.961\n&gt;&gt; Right, right.\n\n451\n00:25:44.961 --> 00:25:50.146\nInstead of finding by attribute, right,\nI found Sally, here's the Sally object.\n\n452\n00:25:50.146 --> 00:25:54.660\nIt's gonna say, hey, that thing that\nhas the name Sally, the object,\n\n453\n00:25:54.660 --> 00:25:56.141\nit's in position one.\n\n454\n00:25:56.141 --> 00:25:59.399\nNow keep in mind some people position one,\n\n455\n00:25:59.399 --> 00:26:05.090\nactually this is position,\nremember arrays are zero indexed.\n\n456\n00:26:05.090 --> 00:26:07.825\nIf you forget,\nyou'll get an off by one error.\n\n457\n00:26:07.825 --> 00:26:10.260\nOff by one errors are really\nhard to track down sometimes.\n\n458\n00:26:10.260 --> 00:26:15.330\nNow I kinda want to test this out.\n\n459\n00:26:18.202 --> 00:26:20.640\nI got three, three, three, three, three.\n\n460\n00:26:20.640 --> 00:26:22.802\nMaybe I found a hidden feature, right?\n\n461\n00:26:22.802 --> 00:26:26.834\nI could go look at the documentation,\nbut if I wanna know something,\n\n462\n00:26:26.834 --> 00:26:31.170\nsometimes just trying it out real\nquick is an effective method.\n\n463\n00:26:31.170 --> 00:26:37.110\nAnd you will see that, in fact, I get\nthe position of the first three only.\n\n464\n00:26:37.110 --> 00:26:38.264\nSo keep that in mind.\n\n465\n00:26:38.264 --> 00:26:41.960\nYou get the first instance,\nthe first index, not all of them.\n\n466\n00:26:43.420 --> 00:26:48.000\nSo in order to find those values,\nwhether it's the actual value or\n\n467\n00:26:48.000 --> 00:26:49.630\nwhere it is in the array.\n\n468\n00:26:49.630 --> 00:26:52.270\nWe now have some wonderful\nhelper methods for us.\n\n469\n00:26:52.270 --> 00:26:55.470\nAnd you know, Daniel, we have a lot\nmore to cover with arrays but\n\n470\n00:26:55.470 --> 00:26:58.158\nI'm not sure we're gonna\nhave time in this episode.\n\n471\n00:26:58.158 --> 00:26:58.956\n&gt;&gt; All right, well, that sounds good.\n\n472\n00:26:58.956 --> 00:27:02.000\nThat's a good stopping spot for us then.\n\n473\n00:27:02.000 --> 00:27:03.119\nJustin, this is interesting stuff so far.\n\n474\n00:27:03.119 --> 00:27:06.030\nWe're really hanging on the edge of\nour seats to be honest with you.\n\n475\n00:27:06.030 --> 00:27:10.677\nI wanna see what next we can do, so\nI guess I'll have to join you in part two.\n\n476\n00:27:10.677 --> 00:27:11.423\nHope to see you there.\n\n477\n00:27:11.423 --> 00:27:12.472\nHope to see you there as well.\n\n478\n00:27:12.472 --> 00:27:15.347\nWe do thank you guys for joining us\ntoday but it looks like it's time for\n\n479\n00:27:15.347 --> 00:27:15.994\nus to sign off.\n\n480\n00:27:15.994 --> 00:27:18.669\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n481\n00:27:18.669 --> 00:27:21.254\n&gt;&gt; And I'm Justin Dennison,\nand we'll see you next time.\n\n482\n00:27:21.254 --> 00:27:29.586\n[MUSIC]\n\n483\n00:27:29.586 --> 00:27:32.044\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "204912320"
        },
        {
          "description": "In this episode, Daniel and Justin continue to discuss some of the new Array specific features found in ES6. They jump back in the conversation by discussing the additional utility methods, specifically array.prototype.fill as well as array.prototype.copyWithin. Then they conclude by looking at Iterator Protocol methods such as array.prototype.keys, array.prototype.entries, and array.prototype.values.",
          "length": "1380",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-2-changes_to_arrays_pt._2-020917-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-2-changes_to_arrays_pt._2-020917-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeatureses6-6-1-2-changes_to_arrays_pt._2-020917-1-sm.jpg",
          "title": "Changes to Arrays Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.190\nWelcome to ITProTV.\n\n2\n00:00:01.190 --> 00:00:06.353\nI'm your host, Don Pezet\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.353 --> 00:00:08.391\n[MUSIC]\n\n4\n00:00:08.391 --> 00:00:12.280\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.280 --> 00:00:13.640\n&gt;&gt; All right, greetings, everyone.\n\n6\n00:00:13.640 --> 00:00:16.900\nAnd welcome to another\nexciting episode of ITProTV.\n\n7\n00:00:16.900 --> 00:00:18.290\nI'm your host, Daniel Lowrie.\n\n8\n00:00:18.290 --> 00:00:21.930\nAnd in today's episode we continue\non with more on what's new in\n\n9\n00:00:21.930 --> 00:00:26.060\nES6 Coming back with a part two on arrays,\nour good friend, Mr.\n\n10\n00:00:26.060 --> 00:00:28.900\nJustin Dennison, Justin welcome back sir,\nglad to have you again.\n\n11\n00:00:28.900 --> 00:00:31.570\n&gt;&gt; I'm glad to be back,\nit's wonderful to be here and you know,\n\n12\n00:00:31.570 --> 00:00:36.610\nwe just tipped the very tip of the iceberg\nwith arrays in the last episode.\n\n13\n00:00:36.610 --> 00:00:41.100\nThere is all so much more, and some of\nthe most exciting features are upcoming.\n\n14\n00:00:41.100 --> 00:00:45.550\nSo last time when we looked at find,\nfind index, new ways to create arrays,\n\n15\n00:00:45.550 --> 00:00:50.790\nthere are a few other methods\nthat provide us with wonderful\n\n16\n00:00:50.790 --> 00:00:55.110\ntools to make our code a little more\nreadable, a little easier to get started,\n\n17\n00:00:55.110 --> 00:00:58.320\nbut let's go ahead and\ntake a look at those new methods.\n\n18\n00:00:58.320 --> 00:01:00.550\nSo I have my Chrome window open here.\n\n19\n00:01:01.970 --> 00:01:05.300\nAnd this our old project from episode one,\nif you haven't checked that out,\n\n20\n00:01:05.300 --> 00:01:07.410\nI definitely say, go check that out.\n\n21\n00:01:07.410 --> 00:01:09.900\nAnd we have all of our\nvariables up in here.\n\n22\n00:01:09.900 --> 00:01:12.970\nAnd just to kind of clean up\nthis up a little bit, Daniel.\n\n23\n00:01:14.030 --> 00:01:18.490\nI like the keyboard shortcut for\ncommenting out in my rich text editor,\n\n24\n00:01:19.500 --> 00:01:22.409\nand that's because, well,\nit just makes life easy.\n\n25\n00:01:23.500 --> 00:01:27.520\nSo let's take a look at\na couple of new array methods.\n\n26\n00:01:27.520 --> 00:01:31.690\nAnd I'm gonna start,\nI know I had numbers here before but\n\n27\n00:01:31.690 --> 00:01:33.600\nwe're gonna keep this very simple.\n\n28\n00:01:34.740 --> 00:01:38.450\nAnd then let's just say people.\n\n29\n00:01:38.450 --> 00:01:42.370\nAnd these are not going to be objects but\ninstead just names.\n\n30\n00:01:42.370 --> 00:01:46.880\nSo we still have Tony and Sally but I\nhave no, that is not how you spell Sally.\n\n31\n00:01:46.880 --> 00:01:52.030\n&gt;&gt; Tony and Sony\n&gt;&gt; Yeah, Tony with an S.\n\n32\n00:01:52.030 --> 00:01:55.680\nSo be very careful there\n&gt;&gt; They're pronounced differently.\n\n33\n00:01:55.680 --> 00:01:56.870\n&gt;&gt; Yeah that is weird.\n\n34\n00:01:56.870 --> 00:01:57.660\n&gt;&gt; It's not Sony.\n\n35\n00:01:57.660 --> 00:02:02.170\n&gt;&gt; Well I guess there is Sony\n&gt;&gt; Yeah I don't know this language is fun.\n\n36\n00:02:02.170 --> 00:02:03.475\n&gt;&gt; Yeah, yay.\n\n37\n00:02:03.475 --> 00:02:07.560\nSo, now I have numbers and people.\n\n38\n00:02:07.560 --> 00:02:09.140\nSo there's two new methods.\n\n39\n00:02:09.140 --> 00:02:13.400\nNow, I will forewarn you, there's a very\nparticular use cases for these methods.\n\n40\n00:02:13.400 --> 00:02:15.910\nI've used them here and there.\n\n41\n00:02:15.910 --> 00:02:20.850\nWe will take a look at the documentation\nso you can see some of the nuances because\n\n42\n00:02:20.850 --> 00:02:26.250\nagain, unless you're doing a very specific\nset of things, maybe these are not useful.\n\n43\n00:02:26.250 --> 00:02:31.220\nHowever, in case you are, we need to make\nsure that you know that they're there and\n\n44\n00:02:31.220 --> 00:02:33.070\nthese are new within ES6.\n\n45\n00:02:33.070 --> 00:02:36.670\nThese may be for optimization purposes,\nmaybe numerical calculations or\n\n46\n00:02:36.670 --> 00:02:40.130\nvisualizations that require\nkind of filling and\n\n47\n00:02:40.130 --> 00:02:42.660\nmoving and creating and copying.\n\n48\n00:02:42.660 --> 00:02:48.560\nOr maybe used as a buffer just in case\nyou're testing some security code.\n\n49\n00:02:48.560 --> 00:02:49.560\nWithin the front end.\n\n50\n00:02:49.560 --> 00:02:51.000\nAnd you need to use an array as a buffer.\n\n51\n00:02:52.880 --> 00:02:55.770\nOr some way to store executable code.\n\n52\n00:02:55.770 --> 00:02:57.600\nSo I have numbers and people.\n\n53\n00:02:57.600 --> 00:03:00.430\nSo the first one is fill.\n\n54\n00:03:00.430 --> 00:03:01.590\nNow, I'm going to forewarn you.\n\n55\n00:03:01.590 --> 00:03:03.700\nWe're going to see some\nweird behavior here.\n\n56\n00:03:03.700 --> 00:03:05.520\nBut if I say numbers.fill.\n\n57\n00:03:05.520 --> 00:03:08.250\nWell, this one is names fairly well.\n\n58\n00:03:08.250 --> 00:03:10.010\nIf I say, fill 4.\n\n59\n00:03:10.010 --> 00:03:11.910\nOkay, fill.\n\n60\n00:03:11.910 --> 00:03:17.390\nThe only like weirdness is it\nfilling to full end length or\n\n61\n00:03:17.390 --> 00:03:19.430\nis it doing something else.\n\n62\n00:03:19.430 --> 00:03:26.170\nSo okay, but there is no ambiguity there,\nit's not like well, I better delete it.\n\n63\n00:03:26.170 --> 00:03:29.729\nIt's fairly intuitive but\nit could be a number of things.\n\n64\n00:03:30.770 --> 00:03:32.700\n&gt;&gt; It deletes it, doesn't it?\n\n65\n00:03:32.700 --> 00:03:33.850\n&gt;&gt; No, it doesn't delete it.\n\n66\n00:03:33.850 --> 00:03:40.653\nBut in fact it just fills the entire\narray with a predefined value.\n\n67\n00:03:40.653 --> 00:03:46.450\nAnd what's really odd is notice\nI did not reassign numbers.\n\n68\n00:03:46.450 --> 00:03:47.880\nThis is a const.\n\n69\n00:03:47.880 --> 00:03:54.070\nI didn't change the assignment, I can't,\ninstead this mutates the array.\n\n70\n00:03:54.070 --> 00:03:59.540\nSo anywhere after line 29, numbers is\ngoing to be filled with the number four.\n\n71\n00:03:59.540 --> 00:04:02.390\nIt mutates, so be very careful about that.\n\n72\n00:04:02.390 --> 00:04:05.120\nI changes the internal data of the array,\n\n73\n00:04:05.120 --> 00:04:07.890\nwhich is not disallowed\nby the const assignment.\n\n74\n00:04:07.890 --> 00:04:10.820\nBut it can cause you some\nproblems especially if I do\n\n75\n00:04:10.820 --> 00:04:12.810\nsome crazy stuff like this.\n\n76\n00:04:12.810 --> 00:04:15.120\nAnd I'm just gonna copy this and\ncomment this.\n\n77\n00:04:16.240 --> 00:04:18.160\nI'm just gonna put curly braces in there.\n\n78\n00:04:18.160 --> 00:04:18.670\nOkay?\n\n79\n00:04:18.670 --> 00:04:19.730\nWell, is this allowed?\n\n80\n00:04:21.440 --> 00:04:24.470\nIt is.\nIt actually fills them with empty objects.\n\n81\n00:04:24.470 --> 00:04:26.310\nOkay, well that, all right.\n\n82\n00:04:26.310 --> 00:04:27.799\nI can see where I might need this.\n\n83\n00:04:29.240 --> 00:04:35.080\nBut, here comes the the wonderfulness.\n\n84\n00:04:35.080 --> 00:04:38.690\nIf I instead just say function,\nempty function,\n\n85\n00:04:41.510 --> 00:04:46.170\nit will actually fill in empty\nfunctions that do nothing in the array.\n\n86\n00:04:46.170 --> 00:04:49.790\nAnd maybe that's not\nthe behavior you're expecting,\n\n87\n00:04:49.790 --> 00:04:54.800\nmaybe should you be able to do that, what\nis the purpose of an array of functions,\n\n88\n00:04:54.800 --> 00:04:59.940\nso just be careful with the fill array,\nwith the array.fill and it will overwrite.\n\n89\n00:04:59.940 --> 00:05:02.060\nIt will change data types and\n\n90\n00:05:02.060 --> 00:05:05.490\nthat makes the predictability of how\nyou use this, sometimes difficult.\n\n91\n00:05:05.490 --> 00:05:09.570\n&gt;&gt; So simplistic in it's use but\napparently very powerful.\n\n92\n00:05:09.570 --> 00:05:14.280\n&gt;&gt; Yes, incredibly powerful, because now\nif I need to do a sweeping overwrite,\n\n93\n00:05:14.280 --> 00:05:18.610\nI need to do a sweeping kind of\nI need an array of length 30 and\n\n94\n00:05:18.610 --> 00:05:22.460\nit needs to be full of empty objects,\nbecause I'm gonna use it as a sort.\n\n95\n00:05:22.460 --> 00:05:26.960\nI now have a way to create those\nvery quickly instead of, okay I have\n\n96\n00:05:26.960 --> 00:05:31.660\nan empty array, I'm gonna write a loop\nthat runs some number of times.\n\n97\n00:05:31.660 --> 00:05:33.350\nAnd then push it up to the top.\n\n98\n00:05:33.350 --> 00:05:37.370\nSo fill can be powerful,\njust be very careful.\n\n99\n00:05:37.370 --> 00:05:42.220\nNow the second one, this is one of\nthose where if you're into math,\n\n100\n00:05:42.220 --> 00:05:45.870\nI know that's a scary word, or\nyou have to do a numerical calculations,\n\n101\n00:05:45.870 --> 00:05:46.780\nyou're building a game.\n\n102\n00:05:46.780 --> 00:05:48.230\n&gt;&gt; Is the flop sweat visible?\n\n103\n00:05:48.230 --> 00:05:49.575\n&gt;&gt; Yes, math.\n\n104\n00:05:49.575 --> 00:05:51.016\n[CROSSTALK]\n&gt;&gt; [LAUGH]\n\n105\n00:05:51.016 --> 00:05:52.170\n&gt;&gt; Did you say math?\n\n106\n00:05:52.170 --> 00:05:53.890\nI did.\nI gotta go.\n\n107\n00:05:55.280 --> 00:06:00.650\nBut if you're doing any\nkind of matrix operations,\n\n108\n00:06:00.650 --> 00:06:04.110\nnumerical calculations,\nyou may need a use for this copy within.\n\n109\n00:06:04.110 --> 00:06:07.120\nOr as I said if you're using\nthis as like a buffer or\n\n110\n00:06:07.120 --> 00:06:10.640\na queue that you're using as\na more abstract data type.\n\n111\n00:06:11.770 --> 00:06:18.730\nSo if I still have people and numbers, and\nlet's actually add one more person here.\n\n112\n00:06:18.730 --> 00:06:20.190\nLet's just say Alice.\n\n113\n00:06:20.190 --> 00:06:26.033\nSo I have three people,\nif I say numbers.copy,\n\n114\n00:06:26.033 --> 00:06:28.670\ncopy, within.\n\n115\n00:06:28.670 --> 00:06:31.840\nWell this is the new method, but\nwe're actually gonna take a,\n\n116\n00:06:31.840 --> 00:06:36.650\njust a quick detour as we\nlook into the documentation\n\n117\n00:06:36.650 --> 00:06:41.290\npages that way we can make sure\nwe're getting this method correct.\n\n118\n00:06:41.290 --> 00:06:44.520\nAnd as a reminder of how to\nfind documentation pages.\n\n119\n00:06:44.520 --> 00:06:50.190\nSo I type Java Script array and then the\nletters MDN, Mozilla Developer Network.\n\n120\n00:06:50.190 --> 00:06:54.380\nVery, very wonderful documentation.\n\n121\n00:06:54.380 --> 00:06:56.640\nVery complete documentation.\n\n122\n00:06:56.640 --> 00:07:00.410\n&gt;&gt; So I look at an array and\nI'm inside of here and\n\n123\n00:07:00.410 --> 00:07:02.210\nI see this copy within on the left.\n\n124\n00:07:02.210 --> 00:07:07.860\nMan, I need to figure out,\nwoah, careful now.\n\n125\n00:07:07.860 --> 00:07:11.910\nOn a Mac, if you swipe with\ntoo many fingers it's back and\n\n126\n00:07:11.910 --> 00:07:15.180\nforth, not left and\nright so be careful there.\n\n127\n00:07:15.180 --> 00:07:18.960\nI clicked on copy within and\nit gives me a quick example.\n\n128\n00:07:18.960 --> 00:07:22.730\nBut what I'm really\ninterested in is the syntax.\n\n129\n00:07:22.730 --> 00:07:26.180\nAnd so I can read about what parameters,\nwhat things do I have to supply?\n\n130\n00:07:26.180 --> 00:07:29.160\nWhat is necessary in order\nto get this to work?\n\n131\n00:07:29.160 --> 00:07:33.450\nSo I have a target a start and\na possible end.\n\n132\n00:07:33.450 --> 00:07:39.160\nWhenever you see this, these three method\nsignatures inside of a documentation page,\n\n133\n00:07:39.160 --> 00:07:41.790\nanything that is in all\nof them is required.\n\n134\n00:07:41.790 --> 00:07:45.080\nAnything that is not in all of\nthem is an optional argument.\n\n135\n00:07:45.080 --> 00:07:50.460\nSo target has to be given it takes at\nleast one argument in the first position.\n\n136\n00:07:50.460 --> 00:07:54.652\nStart is optional as is end.\n\n137\n00:07:54.652 --> 00:07:59.113\nSo if we go and read about target zero\nbased index in which to copy the sequence\n\n138\n00:07:59.113 --> 00:08:02.193\nto If negative target would\nbe counted from the end.\n\n139\n00:08:02.193 --> 00:08:05.420\nI actually can count from\nthe back which can be handy.\n\n140\n00:08:06.970 --> 00:08:10.760\nStart is the zero based index in\nwhich to start copying elements from.\n\n141\n00:08:12.220 --> 00:08:16.660\nAnd then end is where to end that count.\n\n142\n00:08:16.660 --> 00:08:20.830\nSo I can slice a block,\nmove it and override.\n\n143\n00:08:20.830 --> 00:08:22.180\nSo let's take a look here.\n\n144\n00:08:23.280 --> 00:08:26.610\nIf I'm using this as a line,\nright, someone's getting in line.\n\n145\n00:08:26.610 --> 00:08:28.620\nI have three people in line,\nTony, Sally and Alice.\n\n146\n00:08:30.160 --> 00:08:31.700\nBut, you know, Tony gets out of line.\n\n147\n00:08:33.730 --> 00:08:36.770\nWell he's still got that place\nthat's kind of reserved but\n\n148\n00:08:36.770 --> 00:08:40.820\nhe goes to the back and then Alice\nqueues up, Alice gets out of line.\n\n149\n00:08:40.820 --> 00:08:42.480\nThe line gets crazy.\n\n150\n00:08:42.480 --> 00:08:44.240\nThis is one of those weird use cases.\n\n151\n00:08:44.240 --> 00:08:47.760\nI just wanna copy Tony from Tony's\nposition to Alice's position.\n\n152\n00:08:47.760 --> 00:08:50.370\nWe're gonna try to do that\nwith the copy within.\n\n153\n00:08:50.370 --> 00:08:53.140\nSo, what is the target for Tony?\n\n154\n00:08:53.140 --> 00:08:57.530\nTony is at the zeroth position, right?\n\n155\n00:08:57.530 --> 00:09:00.160\nNow, wait a minute,\nI'm about to get this backwards Daniel.\n\n156\n00:09:00.160 --> 00:09:03.140\nSo, your base index that wish\nto copy the sequence to.\n\n157\n00:09:03.140 --> 00:09:04.470\nSo where do I want to copy to?\n\n158\n00:09:04.470 --> 00:09:07.070\nI wanna copy to the second position.\n\n159\n00:09:07.070 --> 00:09:09.250\nI was about to get crazy there.\n\n160\n00:09:10.490 --> 00:09:12.080\nAnd then where is the start?\n\n161\n00:09:12.080 --> 00:09:13.010\nI wanna start at zero.\n\n162\n00:09:13.010 --> 00:09:19.010\nOkay, so I wanna start here and\nlet's see if I'm getting this right.\n\n163\n00:09:20.530 --> 00:09:24.040\nThis is one of those multi tools\nthat you gotta be careful.\n\n164\n00:09:24.040 --> 00:09:25.040\nI need a can opener.\n\n165\n00:09:25.040 --> 00:09:26.690\nWhat's that, a toothpick.\n\n166\n00:09:26.690 --> 00:09:28.130\nNope, that's not what I need.\n\n167\n00:09:28.130 --> 00:09:29.770\nSo be careful there.\n\n168\n00:09:29.770 --> 00:09:32.470\nAnd if we hop back over here, okay.\n\n169\n00:09:32.470 --> 00:09:38.070\nI definitely need to use\nthe correct people variable.\n\n170\n00:09:39.760 --> 00:09:41.960\nCuz otherwise Tony has\nbecome the number one.\n\n171\n00:09:43.080 --> 00:09:50.450\nSo Tony has been copied from the zeroth\nposition to the second position, okay?\n\n172\n00:09:50.450 --> 00:09:55.020\nOkay, well that's ultimately\nwhat copy within does.\n\n173\n00:09:55.020 --> 00:09:58.220\nI can copy from to another position.\n\n174\n00:09:58.220 --> 00:10:05.680\nNow what happens if I instead I\nactually need more things here.\n\n175\n00:10:05.680 --> 00:10:11.630\nSo let's add another name like John.\n\n176\n00:10:11.630 --> 00:10:14.150\nVery, very nice name there.\n\n177\n00:10:14.150 --> 00:10:17.350\nSo let's say I want to copy Alice and\nJohn,\n\n178\n00:10:17.350 --> 00:10:21.230\nall right, to these first two positions.\n\n179\n00:10:22.820 --> 00:10:29.108\nLet see if I can get that to work,\nit may just be Alice so I wanna start,\n\n180\n00:10:29.108 --> 00:10:35.195\nthe target is where I wanna go, so\nI wanna send here these last two.\n\n181\n00:10:35.195 --> 00:10:42.050\nSo I wanna go to the zero, I wanna\nstart at two and the end is two three.\n\n182\n00:10:42.050 --> 00:10:44.920\nSo let's see how that plays out.\n\n183\n00:10:44.920 --> 00:10:47.900\nSo instead it just copies to here,\nit does not include that index.\n\n184\n00:10:47.900 --> 00:10:53.120\nI wonder what happens when this\nchanges to four, and notice since I've\n\n185\n00:10:53.120 --> 00:10:57.960\noverrun one it includes that last one and\ncopies that whole chunk over.\n\n186\n00:10:57.960 --> 00:11:01.460\nNow this is one of those methods\nthat because I don't have a great\n\n187\n00:11:01.460 --> 00:11:05.190\nuse case that I use every day\nit's kind of an awkward thing.\n\n188\n00:11:05.190 --> 00:11:09.310\nBut it is available within ES6 and\nyou may need it for a particular instance.\n\n189\n00:11:09.310 --> 00:11:13.850\nLike I need to copy huge chunks of numbers\nlike hex code or something like that\n\n190\n00:11:13.850 --> 00:11:18.190\nto a different position this would\nbe very applicable in that nature.\n\n191\n00:11:18.190 --> 00:11:21.830\n&gt;&gt; Definitely that gets you twisted around\na little backwards the way they structure\n\n192\n00:11:21.830 --> 00:11:26.127\nthat syntax there is a little bit screwy\nto at least my human mind [LAUGH].\n\n193\n00:11:26.127 --> 00:11:27.387\n&gt;&gt; Yeah I think there's so\n\n194\n00:11:27.387 --> 00:11:31.734\nmuch complexity within the method of like\nwait a minute what's the first argument.\n\n195\n00:11:31.734 --> 00:11:35.902\nThat's where I wanna go to, and\nthen where do I wanna start from and\n\n196\n00:11:35.902 --> 00:11:40.442\nwhere do I want that count to end at and\nthere's just a lot going on there so\n\n197\n00:11:40.442 --> 00:11:43.220\nit would take a little\nbit to get that right.\n\n198\n00:11:43.220 --> 00:11:45.820\nThis would be one of those\nmethods that I would think is\n\n199\n00:11:45.820 --> 00:11:48.110\nvery error prone until you've used it for\na while.\n\n200\n00:11:48.110 --> 00:11:51.360\nAnd then you're like, okay, I've got it.\n\n201\n00:11:51.360 --> 00:11:54.850\nI've kind of cemented it in\nmy mind about how it works.\n\n202\n00:11:54.850 --> 00:11:59.250\nSo those are the two mutator methods\nthat have kind of cropped up for, again,\n\n203\n00:11:59.250 --> 00:12:01.090\nvery particular use cases.\n\n204\n00:12:01.090 --> 00:12:03.260\nBut now comes the fun part.\n\n205\n00:12:03.260 --> 00:12:06.300\nDaniel, we talked about\nthose iterable things.\n\n206\n00:12:06.300 --> 00:12:11.060\nWell, coming to ES6 is the concept of\nan iterator, something that allows you to\n\n207\n00:12:11.060 --> 00:12:15.490\niterate through as we we're\ncovering in future topics.\n\n208\n00:12:15.490 --> 00:12:16.610\nBut on arrays,\n\n209\n00:12:16.610 --> 00:12:22.200\nwe have new methods that provide us\nwith these iterator type things.\n\n210\n00:12:22.200 --> 00:12:29.590\nSo, if I go here, and\nI'm just gonna keep numbers and people.\n\n211\n00:12:29.590 --> 00:12:30.620\nThere are three new methods.\n\n212\n00:12:30.620 --> 00:12:36.796\nThere are entries, there are keys,\nand there are values.\n\n213\n00:12:36.796 --> 00:12:46.270\nSo, let's look at what\nnumbers.entries() provides to us, okay?\n\n214\n00:12:46.270 --> 00:12:52.660\nSo if I refresh you'll notice if I print\nout just entries that says array iterator.\n\n215\n00:12:52.660 --> 00:12:54.380\nWell, that's kinda weird.\n\n216\n00:12:54.380 --> 00:12:59.950\nIf I drop this down and inspect,\nthat's well, what do I do with it?\n\n217\n00:12:59.950 --> 00:13:03.350\nYou're gonna actually use it in a for\nloop and you have to suspend,\n\n218\n00:13:03.350 --> 00:13:05.480\nwe'll go in depth in this a little more.\n\n219\n00:13:05.480 --> 00:13:06.390\nBut we're gonna use that for\n\n220\n00:13:06.390 --> 00:13:10.180\nloop to see what's inside of this\niterator, how this iterator works.\n\n221\n00:13:10.180 --> 00:13:14.040\nSo, this is new syntax,\nsuspension of disbelief,\n\n222\n00:13:14.040 --> 00:13:17.802\njust because it makes things\na little easier to inspect.\n\n223\n00:13:17.802 --> 00:13:27.131\nSo for\nlet number of numbers.entries, Okay?\n\n224\n00:13:27.131 --> 00:13:29.470\nAgain, new syntax.\n\n225\n00:13:29.470 --> 00:13:31.479\nWe'll cover it, just bear with me here.\n\n226\n00:13:33.411 --> 00:13:36.050\nOur focus is this new array method.\n\n227\n00:13:37.670 --> 00:13:42.010\nSo if I do that, that may not have\nbeen what you were expecting.\n\n228\n00:13:42.010 --> 00:13:47.900\nI actually get arrays out\nof an iterator of an array.\n\n229\n00:13:47.900 --> 00:13:53.610\nAnd that's because an entry actually\ngives you a two part array for an array.\n\n230\n00:13:53.610 --> 00:13:54.420\nThis is the index.\n\n231\n00:13:54.420 --> 00:13:55.270\nRight?\n\n232\n00:13:55.270 --> 00:13:58.683\nAnd that's just for\ncomparison print out the numbers here\n\n233\n00:14:03.479 --> 00:14:08.166\nSo I have 1, which is right there,\n2, which is right there,\n\n234\n00:14:08.166 --> 00:14:10.465\n3, which is right there, but\n\n235\n00:14:10.465 --> 00:14:16.260\nthis first number is actually it's\nposition within the array itself.\n\n236\n00:14:16.260 --> 00:14:20.750\nSo .entries will give me a pairing\nof index, or position, and\n\n237\n00:14:20.750 --> 00:14:23.540\nthe actual value so\nI get a key value pair.\n\n238\n00:14:23.540 --> 00:14:28.160\nAnd we'll see with these new syntaxes\nthat this becomes an incredibly\n\n239\n00:14:28.160 --> 00:14:31.860\npowerful tool that keeps me\nfrom having to write manual for\n\n240\n00:14:31.860 --> 00:14:35.710\nloops and\njust lets me zip through some things okay.\n\n241\n00:14:35.710 --> 00:14:41.460\nSo entries give me key value pairs where\nthe key is the array index position and\n\n242\n00:14:41.460 --> 00:14:46.470\nthe value is, well the actual value,\nso that's nice.\n\n243\n00:14:46.470 --> 00:14:50.890\nSo that is entries, so now that I've\nsaid the word, key values, Daniel,\n\n244\n00:14:50.890 --> 00:14:52.840\ndo you have a guess of what .keys does?\n\n245\n00:14:52.840 --> 00:14:54.430\n&gt;&gt; It shows you key values.\n\n246\n00:14:54.430 --> 00:14:57.170\n&gt;&gt; It shows you key\nvalues from the entries.\n\n247\n00:14:57.170 --> 00:15:00.020\nSo let's see how those work out.\n\n248\n00:15:00.020 --> 00:15:04.934\nAnd I'm gonna keep this\nuncommented just for\n\n249\n00:15:04.934 --> 00:15:10.235\nreference and I say, for\nlet number of numbers,\n\n250\n00:15:10.235 --> 00:15:16.459\nactually this is the key,\nfor let key of numbers.keys.\n\n251\n00:15:20.265 --> 00:15:24.944\nThen console.log the key.\n\n252\n00:15:25.970 --> 00:15:33.130\nRefresh, and I get the 0, 1, 2 and\nthat's just the index of an array.\n\n253\n00:15:33.130 --> 00:15:33.750\nNow, keep in mind,\n\n254\n00:15:33.750 --> 00:15:37.320\nas we go into further topics we're\ngonna cover there iterators and\n\n255\n00:15:37.320 --> 00:15:41.300\nthese iteratables a little more in depth\nbecause arrays are not the only ones,\n\n256\n00:15:41.300 --> 00:15:46.160\nand these keys will not\nalways be numerical indexes.\n\n257\n00:15:46.160 --> 00:15:48.981\nSo keep that in mind.\n\n258\n00:15:48.981 --> 00:15:53.187\nSo there's the keys, well the entries\ngave us the key value pairs.\n\n259\n00:15:53.187 --> 00:15:56.090\nI wonder what values does?\n\n260\n00:15:56.090 --> 00:16:00.195\nWell, if you're thinking it does\nthe other part of the entries already.\n\n261\n00:16:00.195 --> 00:16:02.180\n&gt;&gt; It controls the heat of the sun.\n\n262\n00:16:02.180 --> 00:16:03.440\n&gt;&gt; Yes, yes.\n\n263\n00:16:03.440 --> 00:16:05.720\nIt's the thermostat on\nthe giant star in the sky.\n\n264\n00:16:06.900 --> 00:16:09.090\nSo, well there's only one way to find out.\n\n265\n00:16:09.090 --> 00:16:12.270\nI'm a giant proponent of try it,\nif it breaks, try harder.\n\n266\n00:16:14.010 --> 00:16:21.654\nSo, if I say for\n(let value of numbers.values).\n\n267\n00:16:24.114 --> 00:16:29.795\nConsole.log(value).\n\n268\n00:16:29.795 --> 00:16:31.340\nIf I refresh.\n\n269\n00:16:31.340 --> 00:16:32.050\n&gt;&gt; You get an error.\n\n270\n00:16:32.050 --> 00:16:32.570\n&gt;&gt; I get an error.\n\n271\n00:16:32.570 --> 00:16:35.270\n&gt;&gt; Cuz it's values, not value.\n\n272\n00:16:35.270 --> 00:16:35.770\n&gt;&gt; Value.\nWell\n\n273\n00:16:36.970 --> 00:16:37.670\n&gt;&gt; That would make sense.\n\n274\n00:16:37.670 --> 00:16:39.750\nThis is why you should\nalways code in pairs.\n\n275\n00:16:39.750 --> 00:16:42.566\n&gt;&gt; Yeah, yeah.\n&gt;&gt; You never code alone [LAUGH].\n\n276\n00:16:42.566 --> 00:16:43.910\n&gt;&gt; And.\n&gt;&gt; The buddy system.\n\n277\n00:16:43.910 --> 00:16:45.033\n&gt;&gt; So, let's try that.\n\n278\n00:16:45.033 --> 00:16:47.280\nDaniel's like, I think it's that well.\n\n279\n00:16:47.280 --> 00:16:52.680\n&gt;&gt; But you have it down in the where\nis says console.log is value.\n\n280\n00:16:52.680 --> 00:16:53.550\n&gt;&gt; So that's actually.\n\n281\n00:16:53.550 --> 00:16:54.140\n&gt;&gt; Let value.\n\n282\n00:16:54.140 --> 00:16:54.920\n&gt;&gt; Yeah, let value.\n\n283\n00:16:54.920 --> 00:16:57.570\nSo that's actually\nthe individual elements.\n\n284\n00:16:57.570 --> 00:17:01.880\nAnd let's go look, right.\n\n285\n00:17:01.880 --> 00:17:07.690\nSo .values this is the fine art of\nsearching the Internet for the answer.\n\n286\n00:17:07.690 --> 00:17:08.238\n&gt;&gt; Debugging.\n\n287\n00:17:08.238 --> 00:17:10.210\n[LAUGH]\n&gt;&gt; Yeah, debugging.\n\n288\n00:17:10.210 --> 00:17:15.979\nSo, .values not working in Google Chrome.\n\n289\n00:17:17.670 --> 00:17:19.890\nSo this is hard, this is hard.\n\n290\n00:17:19.890 --> 00:17:22.530\nAnd I don't, Google.sites.\n\n291\n00:17:22.530 --> 00:17:28.609\nSo let's say array.values not\nworking in Google Chrome.\n\n292\n00:17:28.609 --> 00:17:32.410\nNot working, not working,\nnot working, could not be found.\n\n293\n00:17:33.490 --> 00:17:35.940\nThat kinda looks like what we want.\n\n294\n00:17:39.040 --> 00:17:40.350\nAnd it is not.\n\n295\n00:17:40.350 --> 00:17:42.750\nNow I'm gonna save us some effort here.\n\n296\n00:17:42.750 --> 00:17:48.480\nI've actually already looked this up and\nthere's a bug in Google Chrome.\n\n297\n00:17:48.480 --> 00:17:50.940\nSo in the current version that\nI'm using in Google Chrome and\n\n298\n00:17:50.940 --> 00:17:54.729\nseveral other versions around it,\nthere is a bug, .values does not exist.\n\n299\n00:17:56.350 --> 00:17:58.790\nWell that would have been nice to know,\nbut\n\n300\n00:17:58.790 --> 00:18:03.950\nthere is a way to get it at the exact same\nfunction, it's just a weird look up bug.\n\n301\n00:18:03.950 --> 00:18:06.460\nSo how are we going to do that?\n\n302\n00:18:06.460 --> 00:18:10.952\nSo this is the exact same thing,\nthis will be covered in further detail for\n\n303\n00:18:10.952 --> 00:18:17.050\niterators, I'm gonna copy this but instead\nof numbers.values I'm going to look for\n\n304\n00:18:17.050 --> 00:18:22.100\nthis special symbol.iterator which is\n\n305\n00:18:22.100 --> 00:18:25.120\ncraziness right now and\nthen put parentheses.\n\n306\n00:18:25.120 --> 00:18:30.160\nSo the values.values actually just becomes\nthe square bracket symbol.iterator.\n\n307\n00:18:30.160 --> 00:18:34.690\nSo craziness there, how would I know that,\nand I'm actually gonna show you in just\n\n308\n00:18:34.690 --> 00:18:38.460\na moment how I could inspect and\nlook around and find that out.\n\n309\n00:18:38.460 --> 00:18:41.460\nSo, let's see if this\nactually works Daniel.\n\n310\n00:18:41.460 --> 00:18:43.478\nMaybe, maybe I'm still wrong.\n\n311\n00:18:43.478 --> 00:18:44.734\n&gt;&gt; You're not wrong.\n\n312\n00:18:44.734 --> 00:18:45.940\n&gt;&gt; But I'm not.\n\n313\n00:18:45.940 --> 00:18:46.640\nBut I'm not.\n\n314\n00:18:46.640 --> 00:18:53.170\nSo, I actually had to spend about 20\nminutes finding this one little ticket bug\n\n315\n00:18:53.170 --> 00:18:56.670\nin the Google Chrome development branch\nthat says, hey this has a bug in it.\n\n316\n00:18:57.690 --> 00:19:03.470\nBut then later on, when I went\nback to Mozilla Developer Networks\n\n317\n00:19:04.930 --> 00:19:09.420\nfor JavaScript arrays and\nI go look at that and\n\n318\n00:19:09.420 --> 00:19:12.730\nI'm like well, wait a minute, it's in\nthe documentation, it's right there.\n\n319\n00:19:14.350 --> 00:19:15.860\nIf you scroll all the way to the bottom.\n\n320\n00:19:18.250 --> 00:19:22.590\nThis tells you your browser compatibility,\nit says, Chrome, no support, and\n\n321\n00:19:22.590 --> 00:19:26.210\nthen it has this footnote and\nit says, bug, and\n\n322\n00:19:26.210 --> 00:19:30.490\nthen it takes you directly to the page\nthat I spent 20 minutes looking for.\n\n323\n00:19:30.490 --> 00:19:33.820\nSo it was really deflating,\n&gt;&gt; [LAUGH]\n\n324\n00:19:33.820 --> 00:19:36.330\n&gt;&gt; But it's important to know that these\n\n325\n00:19:36.330 --> 00:19:42.270\ndocuments the Mozilla developer network\ndocumentation is fairly robust.\n\n326\n00:19:42.270 --> 00:19:44.790\nSo always check at the very\nbottom of those screens what\n\n327\n00:19:44.790 --> 00:19:47.180\nthe browser compatibility is.\n\n328\n00:19:47.180 --> 00:19:49.870\nBut what if I didn't have,\nif I just have the browser,\n\n329\n00:19:49.870 --> 00:19:52.990\nmaybe I can run things locally but\nI don't have internet connection,\n\n330\n00:19:52.990 --> 00:19:56.820\npower's out I got a little bit\nof juice left in my laptop.\n\n331\n00:19:56.820 --> 00:19:59.220\nI'm just playing around,\nkinda passing the time.\n\n332\n00:19:59.220 --> 00:20:03.340\nSo let's see how I can inspect and\ntry to reason through that,\n\n333\n00:20:03.340 --> 00:20:06.440\nwhich is a very important\naspect of being a developer.\n\n334\n00:20:07.600 --> 00:20:11.520\nSo instead of printing\nout all those things,\n\n335\n00:20:11.520 --> 00:20:14.380\nI'm just gonna have console.log(numbers).\n\n336\n00:20:14.380 --> 00:20:17.600\nAnd there's my array.\n\n337\n00:20:17.600 --> 00:20:20.360\nBut this double underscore proto,\n\n338\n00:20:20.360 --> 00:20:24.830\nthat kinda gives us a deeper glimpse\ninto what's going on behind the scenes.\n\n339\n00:20:24.830 --> 00:20:26.170\nIf I drop that down, wow.\n\n340\n00:20:26.170 --> 00:20:27.700\n&gt;&gt; Lot of stuff.\n\n341\n00:20:27.700 --> 00:20:28.660\n&gt;&gt; Lot of stuff.\n\n342\n00:20:28.660 --> 00:20:30.900\nActually everything that's\nin the developer network\n\n343\n00:20:32.200 --> 00:20:34.060\ndocumentation is listed here.\n\n344\n00:20:34.060 --> 00:20:36.980\nThere's fill, there's filter,\nthere's find, find index.\n\n345\n00:20:36.980 --> 00:20:41.940\nIf you drop these down, it'll tell you,\nit doesn't tell you a lot,\n\n346\n00:20:41.940 --> 00:20:46.240\nit gives you the method name and\nthen some additional stuff.\n\n347\n00:20:46.240 --> 00:20:51.679\nAnytime you see a function length that'll\nsay that's how many arguments it can take,\n\n348\n00:20:51.679 --> 00:20:52.885\nup to that number.\n\n349\n00:20:52.885 --> 00:20:56.673\nWell if I keep scrolling down,\n\n350\n00:20:56.673 --> 00:21:01.640\nI do not see .values except right here.\n\n351\n00:21:01.640 --> 00:21:07.866\nValues, and I come over here and\nit says symbol.iterator.\n\n352\n00:21:07.866 --> 00:21:11.874\nSo, JavaScript array, symbol,\n\n353\n00:21:11.874 --> 00:21:17.127\nthe iterator I start searching and\nif I look,\n\n354\n00:21:17.127 --> 00:21:21.827\nthis shows me I can actually call this and\n\n355\n00:21:21.827 --> 00:21:28.290\nI get the exact same thing\nas values parenthesis.\n\n356\n00:21:28.290 --> 00:21:30.930\nSo it takes a little bit\nof tracking around, but\n\n357\n00:21:30.930 --> 00:21:34.930\nwith a little bit of persistence, a little\nbit of ingenuity, and you can typically\n\n358\n00:21:34.930 --> 00:21:37.690\nfigure out what's going on, and that's\nthe wonderful thing about computers,\n\n359\n00:21:37.690 --> 00:21:39.580\nonly doing what you tell them to.\n\n360\n00:21:39.580 --> 00:21:40.890\nThere's no surprises.\n\n361\n00:21:40.890 --> 00:21:45.480\nSo Daniel we've covered iterations,\nsome of those new iteration tools,\n\n362\n00:21:45.480 --> 00:21:49.720\na little bit of the feel and copy within,\ncopy within is still a bear to me.\n\n363\n00:21:49.720 --> 00:21:53.520\nBut, you know, I think that's all\nwe got new in ES 6 for arrays.\n\n364\n00:21:53.520 --> 00:21:54.590\n&gt;&gt; Well that's some very cool stuff.\n\n365\n00:21:54.590 --> 00:21:58.080\nThey've got a lot interesting new\nfeatures coming out with ES 6.\n\n366\n00:21:58.080 --> 00:22:01.900\nEspecially here, you're playing\nwith JavaScript, very nice stuff.\n\n367\n00:22:01.900 --> 00:22:04.200\nAnd a lot of not so cool bugs in Chrome.\n\n368\n00:22:04.200 --> 00:22:05.001\n[LAUGH]\n&gt;&gt; Yeah.\n\n369\n00:22:05.001 --> 00:22:07.377\n&gt;&gt; Got that to look forward to,\nso, like Justin said,\n\n370\n00:22:07.377 --> 00:22:10.239\na lot of times it just comes down\nto you having to get out there and\n\n371\n00:22:10.239 --> 00:22:12.510\nfigure out, okay,\nI'm gonna look at this code.\n\n372\n00:22:12.510 --> 00:22:13.630\nWhat the heck is going on?\n\n373\n00:22:13.630 --> 00:22:17.240\nA lot of searching the oracle of\nthe Internet that we call Google and\n\n374\n00:22:17.240 --> 00:22:21.020\ngoing [SOUND] I gotta find somebody else\nthat's had this exact same problem and\n\n375\n00:22:21.020 --> 00:22:22.110\nmaybe they've got a solution.\n\n376\n00:22:22.110 --> 00:22:23.900\nThat's just part of the job.\n\n377\n00:22:23.900 --> 00:22:28.310\nBut it can be very rewarding once you\ndo find that answer, implement it and\n\n378\n00:22:28.310 --> 00:22:30.130\nsee your codes start to work correctly.\n\n379\n00:22:30.130 --> 00:22:31.650\nThat's always a fun time.\n\n380\n00:22:31.650 --> 00:22:33.655\n&gt;&gt; That's actually one of\nthe few times that I dance.\n\n381\n00:22:33.655 --> 00:22:34.900\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm like yeah!.\n\n382\n00:22:34.900 --> 00:22:35.480\n&gt;&gt; Yeah, yeah.\n\n383\n00:22:35.480 --> 00:22:36.620\nAnd he breaks it down hard.\n\n384\n00:22:36.620 --> 00:22:37.440\nI've seen it.\n\n385\n00:22:37.440 --> 00:22:38.190\n&gt;&gt; It's crazy.\n\n386\n00:22:38.190 --> 00:22:38.745\n&gt;&gt; It's not pretty.\n\n387\n00:22:38.745 --> 00:22:39.800\n&gt;&gt; [LAUGH]\n&gt;&gt; And that being said,\n\n388\n00:22:39.800 --> 00:22:41.720\nit looks like we've come\nto the end of this episode.\n\n389\n00:22:41.720 --> 00:22:43.060\nWe do thank you guys for watching.\n\n390\n00:22:43.060 --> 00:22:46.580\nBut signing off for ITPro.TV,\nI've been your host Daniel Lowrie.\n\n391\n00:22:46.580 --> 00:22:47.670\n&gt;&gt; And I'm Justin Nimson.\n\n392\n00:22:47.670 --> 00:22:48.700\n&gt;&gt; And we'll see you next time.\n\n393\n00:22:48.700 --> 00:22:52.460\n[MUSIC]\n\n394\n00:22:52.460 --> 00:22:57.785\nThank you for watching ITPro.TV.\n\n",
          "vimeoId": "204900991"
        },
        {
          "description": "In this episode, Daniel and Justin explore methods of De-structuring data now available in ES6. They begin by comparing traditional ways of retrieving info from an array with using new de-structuring methods. Then they repeat the de-structuring process with Objects and inside Function Arguments.",
          "length": "1849",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-7-1-destucturing_data-020917-PGM.00_30_34_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-7-1-destucturing_data-020917-PGM.00_30_34_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-7-1-destucturing_data-020917-PGM.00_30_34_22.Still001-sm.jpg",
          "title": "Destructing Data",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.582\nWelcome to ITProTV.\n\n2\n00:00:01.582 --> 00:00:08.501\nI'm your host Don [CROSSTALK]\n\n3\n00:00:08.501 --> 00:00:12.360\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.360 --> 00:00:13.810\n&gt;&gt; All right, greetings everyone and\n\n5\n00:00:13.810 --> 00:00:16.770\nwelcome to another great\nepisode of ITProTV.\n\n6\n00:00:16.770 --> 00:00:18.260\nI'm your host, Daniel Lowrie, and\n\n7\n00:00:18.260 --> 00:00:22.880\nin today's episode we are continuing on\nwith our series on what's new in ES6.\n\n8\n00:00:22.880 --> 00:00:26.100\nAnd, of course, joining us back in the\nstudio is the man that's gonna lend his\n\n9\n00:00:26.100 --> 00:00:29.840\nvery expertise on that topic,\nour good friend Mr. Justin Dennison.\n\n10\n00:00:29.840 --> 00:00:31.560\nJustin, welcome back my man,\nhow's it going?\n\n11\n00:00:31.560 --> 00:00:33.780\n&gt;&gt; It's going well,\nthanks for having me back.\n\n12\n00:00:33.780 --> 00:00:38.240\nES6 it just keeps on giving it's the gift,\nit's just keep on giving.\n\n13\n00:00:38.240 --> 00:00:43.204\nAnd in this set of features we're actually\ngonna see things that are brand new to\n\n14\n00:00:43.204 --> 00:00:44.102\nJavaScript.\n\n15\n00:00:44.102 --> 00:00:48.527\nAnd now, they are not necessarily need a\nprogramming in general the idea is that I\n\n16\n00:00:48.527 --> 00:00:52.498\nmean, but in JavaScript they provided\nus with a wonderful set of tools,\n\n17\n00:00:52.498 --> 00:00:56.050\nthat makes my development\nprocess a great deal quicker.\n\n18\n00:00:56.050 --> 00:00:59.900\nNow typically, I'm in JavaScript land, but\n\n19\n00:00:59.900 --> 00:01:03.000\nI do dabble around in some Python and\nsome other languages.\n\n20\n00:01:03.000 --> 00:01:07.110\nAnd I've seen these come from\nother languages, these ideas and\n\n21\n00:01:07.110 --> 00:01:09.150\nthey're just all so wonderful.\n\n22\n00:01:09.150 --> 00:01:12.473\nBut, we're gonna talk\nabout destructuring data.\n\n23\n00:01:12.473 --> 00:01:14.860\nWhat do I mean by destructuring data?\n\n24\n00:01:14.860 --> 00:01:17.440\nWell, number one, destructuring.\n\n25\n00:01:17.440 --> 00:01:20.890\nI'm not even sure what that\nmeans out of context of ES6.\n\n26\n00:01:20.890 --> 00:01:23.600\nDestructuring, I take it apart.\n\n27\n00:01:23.600 --> 00:01:25.480\nWell, I'm just guessing there.\n\n28\n00:01:25.480 --> 00:01:26.100\nBut in fact,\n\n29\n00:01:26.100 --> 00:01:31.500\nin ES6, destructuring data does mean\nto kinda tease apart, pull apart.\n\n30\n00:01:31.500 --> 00:01:34.620\nAnd in particular for\ntwo very common data types.\n\n31\n00:01:35.820 --> 00:01:38.390\nAnd that is an array and an object.\n\n32\n00:01:38.390 --> 00:01:42.820\nNow, if I wanna to grab information\nout of an array or an object.\n\n33\n00:01:42.820 --> 00:01:46.360\nThe old way of doing it was\na little more laborious.\n\n34\n00:01:46.360 --> 00:01:49.390\nAnd actually,\nI think that's a great point to set up.\n\n35\n00:01:49.390 --> 00:01:51.850\nLet's see those pain points.\n\n36\n00:01:51.850 --> 00:01:56.670\nAnd remind ourselves of those pain points,\nbefore we see the solution to the problem.\n\n37\n00:01:56.670 --> 00:01:58.860\nSo, let's go ahead and\nhop into our browser here.\n\n38\n00:01:58.860 --> 00:02:03.390\nAnd in my browser open, I'm gonna get\nmy project set up and ready to go.\n\n39\n00:02:03.390 --> 00:02:05.450\nOpen my index.html file.\n\n40\n00:02:05.450 --> 00:02:08.420\nMake sure you're opening\nthe correct index.html file,\n\n41\n00:02:08.420 --> 00:02:12.090\ncuz if you're not, you'll refresh all day,\nand nothing will change.\n\n42\n00:02:12.090 --> 00:02:14.170\nIt's a bad time, bad time.\n\n43\n00:02:14.170 --> 00:02:18.660\nSo, then I'm gonna open up my chrome\ndev tools, more tools, developer tools,\n\n44\n00:02:18.660 --> 00:02:23.599\nalways which you do this in enough times\nyou remember the keyboard shortcuts done,\n\n45\n00:02:23.599 --> 00:02:26.710\nand we are all set up on chrome.\n\n46\n00:02:27.790 --> 00:02:32.640\nInside of item, I'm wanna open a project\nfolder for destructuring data.\n\n47\n00:02:34.220 --> 00:02:36.040\nDestructuring, that's a weird word.\n\n48\n00:02:36.040 --> 00:02:36.760\nStill a weird word.\n\n49\n00:02:36.760 --> 00:02:39.820\nIt doesn't quite roll off the tongue\nlike I would like for it to.\n\n50\n00:02:39.820 --> 00:02:41.100\n&gt;&gt; But, I like the idea of it.\n\n51\n00:02:41.100 --> 00:02:42.910\nThat we're pulling apart things cuz,\n&gt;&gt; Yeah.\n\n52\n00:02:42.910 --> 00:02:44.100\n&gt;&gt; I like to pull things apart.\n\n53\n00:02:44.100 --> 00:02:44.860\n&gt;&gt; Yeah.\n&gt;&gt; Yeah,\n\n54\n00:02:44.860 --> 00:02:47.664\nI'm Hey, what's inside that toaster?\n\n55\n00:02:47.664 --> 00:02:48.692\nI don't know, let's take it apart.\n\n56\n00:02:48.692 --> 00:02:49.675\n&gt;&gt; Better find out?\n\n57\n00:02:49.675 --> 00:02:50.175\n&gt;&gt; Yeah-\n&gt;&gt; [LAUGH]\n\n58\n00:02:50.175 --> 00:02:52.930\n&gt;&gt; So, I'm very much like that way as\n\n59\n00:02:52.930 --> 00:02:55.474\nwell, Daniel.\nNow, my index html,\n\n60\n00:02:55.474 --> 00:02:57.360\nthere's nothing special about this one.\n\n61\n00:02:57.360 --> 00:03:00.550\nI'm not hiding anything,\nas I sometimes do.\n\n62\n00:03:00.550 --> 00:03:05.320\nAnd our app.js is where we're gonna\nhave all the fun of destructuring data.\n\n63\n00:03:05.320 --> 00:03:08.750\nSo, let's take a quick look,\njust go back in time a little bit.\n\n64\n00:03:08.750 --> 00:03:13.610\nWe will have some ES6 in here,\nas far as variable decorations.\n\n65\n00:03:13.610 --> 00:03:17.910\nBut we're gonna look at, how would I\nget this information out of an array,\n\n66\n00:03:17.910 --> 00:03:21.690\nas well as an object for\nvery small examples.\n\n67\n00:03:21.690 --> 00:03:24.000\nSo, let's start with the old way.\n\n68\n00:03:25.160 --> 00:03:30.550\nThat sounds so Prama the old way, but\nthis is how people typically did it.\n\n69\n00:03:30.550 --> 00:03:35.140\nAnd let's starts with games, and\nlet's start with a few games.\n\n70\n00:03:35.140 --> 00:03:41.240\nTic tac toe, not tic tac tac,\nand connect for.\n\n71\n00:03:43.220 --> 00:03:45.570\nThese are always games that seem so\nsimple, but\n\n72\n00:03:45.570 --> 00:03:47.395\nsomehow amazingly frustrate me.\n\n73\n00:03:47.395 --> 00:03:48.850\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n74\n00:03:48.850 --> 00:03:51.970\nsudoku, not quite as\nsimple as the first two.\n\n75\n00:03:51.970 --> 00:03:54.459\nAnd then, let's just go ahead and\ncreate a user.\n\n76\n00:03:56.723 --> 00:03:59.720\nAnd the user's name is Tony.\n\n77\n00:03:59.720 --> 00:04:03.650\nSo, I'm setting up this data because\nthat's what we're trying to do.\n\n78\n00:04:03.650 --> 00:04:07.020\nWe're looking at data and how we can\nkinda pull it into its individual pieces.\n\n79\n00:04:08.490 --> 00:04:14.480\nAnd Tony's gonna have an age,\nhe is 13 and his height is 72.\n\n80\n00:04:14.480 --> 00:04:16.740\nNow, you can add any unit\nthat you want on there.\n\n81\n00:04:16.740 --> 00:04:20.390\nProbably, the one that makes the most\nsense is inches, but you never know.\n\n82\n00:04:21.890 --> 00:04:23.290\nSo, I have a user in games.\n\n83\n00:04:23.290 --> 00:04:28.690\nNow, the old way even though I'm\nusing const here, if I wanted to in\n\n84\n00:04:28.690 --> 00:04:32.650\nthis collection, well, connect for\nis my favorite game out of those.\n\n85\n00:04:32.650 --> 00:04:40.730\nSo, I could create a new variable called\nfavoriteGame and, how would I grab that?\n\n86\n00:04:40.730 --> 00:04:45.030\nI would say, games, and\nthen I would have to go 0, 1.\n\n87\n00:04:45.030 --> 00:04:48.550\nAnd then, I also wanna keep,\ndon't forget semicolon.\n\n88\n00:04:48.550 --> 00:04:53.080\nI wanna keep track of\nmy secondFavoriteGame.\n\n89\n00:04:54.550 --> 00:04:57.270\nLong variable names\njust to be descriptive.\n\n90\n00:04:57.270 --> 00:05:00.470\nUse a rich text editor that\nwill help you manage those,\n\n91\n00:05:00.470 --> 00:05:03.590\ncuz otherwise if you're in\nnotepad header or TextEdit.\n\n92\n00:05:04.690 --> 00:05:08.780\nLots of issues,\nI've gotta type all these things.\n\n93\n00:05:08.780 --> 00:05:11.640\nMy second favorite game\nis actually sudoku.\n\n94\n00:05:11.640 --> 00:05:16.050\nSo if I have these two,\nnotice if I wanna pull these apart,\n\n95\n00:05:16.050 --> 00:05:17.180\nI have to go through, for\n\n96\n00:05:17.180 --> 00:05:22.060\neverything I wanna get out of that array,\nmake sure I know its actual position.\n\n97\n00:05:22.060 --> 00:05:24.620\nAnd pull that out of the array itself.\n\n98\n00:05:24.620 --> 00:05:30.560\nAnd, let's make sure that\nI'm not messing this up.\n\n99\n00:05:32.120 --> 00:05:39.420\nAnd, secondfavoriteGame, so\nlet's refresh and connect four and sudoku.\n\n100\n00:05:39.420 --> 00:05:43.090\nSo, this is typically how you\nextracted things from arrays.\n\n101\n00:05:43.090 --> 00:05:44.370\nWhenever you needed it too.\n\n102\n00:05:44.370 --> 00:05:45.390\nBut, what about objects?\n\n103\n00:05:45.390 --> 00:05:47.520\nWell, objects follow\na very similar pattern.\n\n104\n00:05:49.140 --> 00:05:54.040\nLet's say that a user is trying to\nlog in or trying to make request or\n\n105\n00:05:54.040 --> 00:05:59.350\nI'm just processing some information\nabout users, like voting or twitter data\n\n106\n00:05:59.350 --> 00:06:05.140\nand I want to pull out the username and\ntheir age, so I can make comparisons.\n\n107\n00:06:05.140 --> 00:06:07.466\nWell, how would I get that?\n\n108\n00:06:07.466 --> 00:06:13.643\nI would say userName = user.name.\n\n109\n00:06:13.643 --> 00:06:19.702\nNow, just FYI, I could say the longhand\nsyntax ,that looks very similar to arrays,\n\n110\n00:06:19.702 --> 00:06:22.160\nbut I use a string inside of there.\n\n111\n00:06:23.860 --> 00:06:26.870\nLet's overflow this,\nuse a string inside of there and\n\n112\n00:06:26.870 --> 00:06:29.390\nI can pull those out of\nobjects that way as well.\n\n113\n00:06:29.390 --> 00:06:32.490\nTypically, you will see me, and\na great deal of other people,\n\n114\n00:06:32.490 --> 00:06:33.810\nunless there's a time that calls for it,\n\n115\n00:06:33.810 --> 00:06:37.850\nusing the shorthand syntax for\nthe sake dot and the property name.\n\n116\n00:06:37.850 --> 00:06:39.390\nAnd then, let's say I need the age.\n\n117\n00:06:40.580 --> 00:06:42.423\nSo, user age.\n\n118\n00:06:42.423 --> 00:06:44.430\nAnd that would be user.age.\n\n119\n00:06:44.430 --> 00:06:46.483\nAnd let's see what that prints out.\n\n120\n00:06:48.751 --> 00:06:51.460\nHave to be careful here, Daniel.\n\n121\n00:06:51.460 --> 00:06:54.070\nSometimes I'm worried I'm gonna\nlight my keyboard on fire.\n\n122\n00:06:55.720 --> 00:06:57.228\nSo, there's-\n&gt;&gt; Like Jimi Hendrix.\n\n123\n00:06:57.228 --> 00:06:59.957\n&gt;&gt; Yeah, maybe.\n\n124\n00:06:59.957 --> 00:07:03.410\n&gt;&gt; [INAUDIBLE] [LAUGH]\n&gt;&gt; So,\n\n125\n00:07:03.410 --> 00:07:08.150\nnotice I do have my user name and\nmy user age, pulled out of those.\n\n126\n00:07:08.150 --> 00:07:11.840\nBut, again, it's a very similar\npattern that I had with the arrays.\n\n127\n00:07:11.840 --> 00:07:15.200\nI need to know what the property name is,\nwhat to pull them out of?\n\n128\n00:07:15.200 --> 00:07:21.190\nNow, there's no way of getting\naround the array position, right?\n\n129\n00:07:21.190 --> 00:07:24.330\nIs it the first element, the second\nelement, or the third element or\n\n130\n00:07:24.330 --> 00:07:28.330\nthere's no way to really get around to\nknowing what the property is named.\n\n131\n00:07:28.330 --> 00:07:29.750\nI can't say, well,\n\n132\n00:07:29.750 --> 00:07:34.750\nI need that thing that you call\nthe user by that people respond to.\n\n133\n00:07:34.750 --> 00:07:36.190\nThat's their name.\n\n134\n00:07:36.190 --> 00:07:38.710\nI need to know what that's called.\n\n135\n00:07:38.710 --> 00:07:43.350\nAnd I need to know how it's spelled in\nparticularly, capitalization does matter.\n\n136\n00:07:43.350 --> 00:07:47.780\nSo, how can I go about making this\na little easier for ourselves in ES6?\n\n137\n00:07:49.210 --> 00:07:52.783\nWell, this is where I get really excited,\nDaniel.\n\n138\n00:07:52.783 --> 00:07:56.125\nI get to play around\nwith the destructuring.\n\n139\n00:07:56.125 --> 00:07:59.910\nActually, get to pull apart\nin a shortened syntax.\n\n140\n00:07:59.910 --> 00:08:05.390\nSo I've commented out all these\nother ones, this is the old way.\n\n141\n00:08:05.390 --> 00:08:07.160\nI don't do it like this anymore.\n\n142\n00:08:07.160 --> 00:08:11.350\nBut instead, if I wanna pull my favorite\ngame and my second favorite game,\n\n143\n00:08:11.350 --> 00:08:13.250\nI can do that all in one shot.\n\n144\n00:08:13.250 --> 00:08:15.690\nBut let's see this new syntax.\n\n145\n00:08:15.690 --> 00:08:18.400\nI'm actually going to declare a variable,\nbut\n\n146\n00:08:18.400 --> 00:08:23.170\nnotice I have this array\nsyntax on the left-hand side.\n\n147\n00:08:23.170 --> 00:08:25.040\nThis is one of your first hints.\n\n148\n00:08:25.040 --> 00:08:31.000\nI'm gonna be pulling information out\nof an array or an array-like thing.\n\n149\n00:08:31.000 --> 00:08:34.570\nAgain, come back to that\nterm array-like thing.\n\n150\n00:08:34.570 --> 00:08:38.549\nSo this does work on other\nthings other than arrays, but\n\n151\n00:08:38.549 --> 00:08:40.588\nwe'll see that in due time.\n\n152\n00:08:40.588 --> 00:08:46.440\nSo if I want just the first one,\nif I say first, and I now say games.\n\n153\n00:08:46.440 --> 00:08:50.637\nAnd remember games is an array with one,\ntwo, three elements and\n\n154\n00:08:50.637 --> 00:08:54.160\nnotice I have brackets,\nbrackets and the word first.\n\n155\n00:08:54.160 --> 00:08:57.763\nLet's see what is now stored in first.\n\n156\n00:09:01.948 --> 00:09:06.324\nSo since I have written first here\nI can pull the first element out.\n\n157\n00:09:06.324 --> 00:09:10.840\nNow the variable name is not important,\nI could have called this cheeseburger.\n\n158\n00:09:10.840 --> 00:09:14.650\nAnd just to prove that,\nI just made myself hungry.\n\n159\n00:09:14.650 --> 00:09:16.770\n&gt;&gt; Yeah, [LAUGH] when's lunch again?\n\n160\n00:09:16.770 --> 00:09:19.940\n&gt;&gt; Yeah, I don't know,\nbut it needs to come soon.\n\n161\n00:09:19.940 --> 00:09:22.790\nBut I call that cheeseburger and\nI actually get the same result.\n\n162\n00:09:22.790 --> 00:09:27.500\nIn case you can't tell, I'm gonna Refresh,\nrefresh, it's still the same thing.\n\n163\n00:09:27.500 --> 00:09:30.150\nSo there's nothing special\nabout the variable name first,\n\n164\n00:09:30.150 --> 00:09:31.930\njust to bring emphasis to that.\n\n165\n00:09:31.930 --> 00:09:35.390\n&gt;&gt; Is it doing that because it's\nautomatically designed to do that?\n\n166\n00:09:35.390 --> 00:09:40.390\nBasically if you don't declare\nanother position in the array,\n\n167\n00:09:40.390 --> 00:09:42.100\nto just call the first position?\n\n168\n00:09:42.100 --> 00:09:43.790\n&gt;&gt; Yep.\nAnd you bring up a good point Daniel.\n\n169\n00:09:43.790 --> 00:09:46.080\nWhat about the other positions, right?\n\n170\n00:09:46.080 --> 00:09:48.040\nHow do I get those things?\n\n171\n00:09:48.040 --> 00:09:50.840\nI want now the second one.\n\n172\n00:09:50.840 --> 00:09:52.820\nAnd I'm gonna leave my\nmultiple cursors here.\n\n173\n00:09:52.820 --> 00:09:53.910\nAnd I say second.\n\n174\n00:09:53.910 --> 00:09:55.550\nNotice I have a comma.\n\n175\n00:09:55.550 --> 00:10:01.350\nIt is effectively mapping this\nvariable name to this object,\n\n176\n00:10:01.350 --> 00:10:03.640\nor string in this case, to this element.\n\n177\n00:10:04.920 --> 00:10:05.990\nThere's a comma.\n\n178\n00:10:05.990 --> 00:10:07.120\nThere's a comma.\n\n179\n00:10:07.120 --> 00:10:11.316\nIt is now mapping this to this element.\n\n180\n00:10:11.316 --> 00:10:15.505\nSo, second if my assertion is correct,\nshould be Connect Four.\n\n181\n00:10:15.505 --> 00:10:19.945\nNow I had multiple cursors going on there,\nDaniel, but I messed up.\n\n182\n00:10:19.945 --> 00:10:25.176\n&gt;&gt; [LAUGH]\n&gt;&gt; So, there's second.\n\n183\n00:10:25.176 --> 00:10:27.344\nAnd in fact, I do have Connect Four.\n\n184\n00:10:27.344 --> 00:10:30.120\nNow this is pulling information out.\n\n185\n00:10:30.120 --> 00:10:33.344\nLet's see what's in games\nafter doing all of this.\n\n186\n00:10:35.810 --> 00:10:39.650\nI am not changing the original array,\nand that's something to remember.\n\n187\n00:10:39.650 --> 00:10:40.614\nI'm pulling information out.\n\n188\n00:10:40.614 --> 00:10:43.278\nI'm not making a change\nto the original data.\n\n189\n00:10:43.278 --> 00:10:47.672\nWhich as it happens,\nturns out that's a really good idea.\n\n190\n00:10:47.672 --> 00:10:51.911\nNot changing your data, kind of\nkeeping it immutable, unchangeable.\n\n191\n00:10:51.911 --> 00:10:55.716\nAs it kinda flows through your\napplication is a great idea.\n\n192\n00:10:55.716 --> 00:11:00.246\nDoesn't seem like it but it does make\nthings a little easier to reason about.\n\n193\n00:11:00.246 --> 00:11:04.373\nNow, what's crazy is if I want to\nreproduce this favorite game and\n\n194\n00:11:04.373 --> 00:11:05.859\nsecond favorite game.\n\n195\n00:11:05.859 --> 00:11:10.940\nNotice my favorite game started\nwith actually the second element.\n\n196\n00:11:10.940 --> 00:11:12.330\nWell how do I grab that?\n\n197\n00:11:12.330 --> 00:11:15.820\nAnd I'm going to change\nfirst to favorite game.\n\n198\n00:11:17.310 --> 00:11:18.963\nAgain, Connect Four.\n\n199\n00:11:18.963 --> 00:11:23.299\nAnd I'm going to change second\nto my second favorite game.\n\n200\n00:11:26.438 --> 00:11:28.770\nSo I'm just changing the variable names.\n\n201\n00:11:28.770 --> 00:11:32.380\nBut, favorite game right now as\nit stands is going to provide,\n\n202\n00:11:32.380 --> 00:11:34.830\nit's going to be assigned\nthe value of tic tac toe.\n\n203\n00:11:34.830 --> 00:11:36.920\nIt actually needs to go to Connect Four.\n\n204\n00:11:36.920 --> 00:11:38.970\nHow do I get that information?\n\n205\n00:11:38.970 --> 00:11:42.310\nWell, I can just say comma.\n\n206\n00:11:42.310 --> 00:11:44.400\nI'm now mapping element to element.\n\n207\n00:11:44.400 --> 00:11:51.750\nSo I now have Connect Four and Sudoku\nstored in their respective variable names.\n\n208\n00:11:51.750 --> 00:11:53.250\nIt's a one-liner.\n\n209\n00:11:53.250 --> 00:11:56.260\nBut it's still clear as long\nas you understand the syntax.\n\n210\n00:11:57.870 --> 00:12:03.820\nNow, what's amazing about this is\nwhat if I want the first element and\n\n211\n00:12:03.820 --> 00:12:05.490\nthen everything else?\n\n212\n00:12:05.490 --> 00:12:08.850\nSo there's actually a way to do that.\n\n213\n00:12:08.850 --> 00:12:11.470\nBut it's a little more in depth\nthan our current situation, so\n\n214\n00:12:11.470 --> 00:12:12.940\nwe're gonna suspend that for a moment.\n\n215\n00:12:12.940 --> 00:12:16.730\nWe will come back to this destructuring\nin a more specific context\n\n216\n00:12:16.730 --> 00:12:19.840\ncuz we need to learn a little\nmore to bring this up to speed.\n\n217\n00:12:19.840 --> 00:12:23.140\nSo I can de-structure based\non position with arrays.\n\n218\n00:12:24.220 --> 00:12:26.390\nNow, what about those objects, right?\n\n219\n00:12:26.390 --> 00:12:29.220\nI pulled out the user name, the user\n\n220\n00:12:31.170 --> 00:12:35.720\nage out of the user object,\nhow would I do that de-structuring wise?\n\n221\n00:12:37.000 --> 00:12:39.370\nWell, I have my user,\nI have a name, age, and height.\n\n222\n00:12:40.480 --> 00:12:43.300\nI'm gonna comment these out.\n\n223\n00:12:43.300 --> 00:12:46.630\nI'm gonna leave the favoriteGame, and the\nsecondfavoriteGame, just as a reminder.\n\n224\n00:12:48.450 --> 00:12:50.272\nAs we saw, I have to do that individually.\n\n225\n00:12:50.272 --> 00:12:56.850\nBut, let's say that I just want the name,\nand I'm gonna assign it to, just name.\n\n226\n00:12:56.850 --> 00:12:59.079\nAll right,\nI'm not gonna call it user name yet.\n\n227\n00:12:59.079 --> 00:13:02.450\nBut notice I have curly braces here.\n\n228\n00:13:02.450 --> 00:13:06.700\nIf I see curly braces on the left-hand\nside of a variable declaration,\n\n229\n00:13:06.700 --> 00:13:11.360\nthat means I'm pulling information\nout of an object-like thing.\n\n230\n00:13:11.360 --> 00:13:15.727\nOkay, it has key value pairs,\na name associated with a value.\n\n231\n00:13:15.727 --> 00:13:20.882\nSo I have name and age.\n\n232\n00:13:20.882 --> 00:13:23.194\nAnd that is equal to user.\n\n233\n00:13:23.194 --> 00:13:25.957\nNow, I'm saying this works.\n\n234\n00:13:25.957 --> 00:13:27.614\nLet's find out if it does.\n\n235\n00:13:29.478 --> 00:13:32.223\nAnd there's our name.\n\n236\n00:13:32.223 --> 00:13:33.781\nAnd there's our age.\n\n237\n00:13:35.726 --> 00:13:38.568\nAnd it in fact just pulled all that out,\n\n238\n00:13:38.568 --> 00:13:42.542\nassigned them to the user to\nthe variable name and age.\n\n239\n00:13:42.542 --> 00:13:44.444\nBut here's the weird thing.\n\n240\n00:13:44.444 --> 00:13:46.938\nSometimes I wanna pull\nthat information out and\n\n241\n00:13:46.938 --> 00:13:50.270\ncall it by something\na little bit differently.\n\n242\n00:13:50.270 --> 00:13:56.430\nIf I look at line 21 here, uncomment that\nout, I actually said userName = user.name.\n\n243\n00:13:56.430 --> 00:13:59.630\nI wanna maintain that naming\nconvention cuz maybe I'm\n\n244\n00:13:59.630 --> 00:14:03.840\nusing this later in an application and\nI wanna keep that very consistent.\n\n245\n00:14:03.840 --> 00:14:05.380\nSo how would I do that?\n\n246\n00:14:05.380 --> 00:14:09.280\nWell this object destructuring, so\nwe have array destructuring here.\n\n247\n00:14:11.170 --> 00:14:13.932\nDestructuring is actually a kind\nof a tricky word to spell.\n\n248\n00:14:13.932 --> 00:14:15.380\nThere are so many Ts and Rs in there.\n\n249\n00:14:16.810 --> 00:14:22.058\nAnd then I have object\ndestructuring there.\n\n250\n00:14:22.058 --> 00:14:26.794\nSo there are arrays and objects,\nI want to rename name to username.\n\n251\n00:14:26.794 --> 00:14:32.850\nIf I put a colon, and I give the new\nvariable name that I want to declare.\n\n252\n00:14:32.850 --> 00:14:39.290\nThat will take the name property out of\nthe object and assign it to userName.\n\n253\n00:14:39.290 --> 00:14:44.240\nIf I wanted to do the same thing with age,\nI could get userAge.\n\n254\n00:14:44.240 --> 00:14:48.500\nSo now I need to change these\nvariables because those old ones have\n\n255\n00:14:48.500 --> 00:14:53.820\nno context anymore and\nyou need to not type crazy stuff.\n\n256\n00:14:53.820 --> 00:14:54.500\nThere we go.\n\n257\n00:14:56.690 --> 00:14:57.960\nAnd I'm refreshing.\n\n258\n00:14:57.960 --> 00:14:59.040\nIt's the exact same thing.\n\n259\n00:15:00.050 --> 00:15:03.010\nAnd that's because I've now\nrenamed the name property, and\n\n260\n00:15:03.010 --> 00:15:04.960\nstored it in a variable called userName.\n\n261\n00:15:04.960 --> 00:15:07.090\n&gt;&gt; And what's the advantage of doing that?\n\n262\n00:15:07.090 --> 00:15:11.530\n&gt;&gt; So, the advantage is I need to\nhave this named a particular thing,\n\n263\n00:15:11.530 --> 00:15:14.718\nI need this variable to\nhave a particular name.\n\n264\n00:15:14.718 --> 00:15:18.902\nOr sometimes I've called I've\nmade calls to databases, or\n\n265\n00:15:18.902 --> 00:15:21.864\nto data APIs, or data services on the web.\n\n266\n00:15:21.864 --> 00:15:25.117\nAnd I get them back and the name's like x.\n\n267\n00:15:25.117 --> 00:15:29.651\nBut I know it's a user name so I'm gonna\npull out the property x and rename it.\n\n268\n00:15:29.651 --> 00:15:34.929\nSo my code reads nicer and\nI've reduced the cognitive load.\n\n269\n00:15:34.929 --> 00:15:37.460\nI don't have to go,\nwhat does x represent again?\n\n270\n00:15:37.460 --> 00:15:38.210\nYeah, that's user name.\n\n271\n00:15:38.210 --> 00:15:41.530\n&gt;&gt; Yeah, that's always fun to go i\nequals such and such and you're like,\n\n272\n00:15:41.530 --> 00:15:42.030\nwhat the heck is i?\n\n273\n00:15:42.030 --> 00:15:43.690\nWhere's i coming from?\n\n274\n00:15:43.690 --> 00:15:48.050\n&gt;&gt; Yeah, so definitely pick variable\nnames that make sense in the context.\n\n275\n00:15:48.050 --> 00:15:51.823\nThey should be descriptive, but\ndon't write paragraph variable names.\n\n276\n00:15:51.823 --> 00:15:55.553\nBut a common use case is I'm renaming\na variable that doesn't make any sense.\n\n277\n00:15:55.553 --> 00:15:58.768\nBut it's stored in an object that\nI don't have any control over so\n\n278\n00:15:58.768 --> 00:16:00.707\nI'll just pull that out and rename it.\n\n279\n00:16:00.707 --> 00:16:05.117\nNow, what happens though if\nI try to pull out a piece of\n\n280\n00:16:05.117 --> 00:16:08.650\ninformation that's actually not there?\n\n281\n00:16:09.880 --> 00:16:14.080\nLike currently, if we look at our user,\nwe have age, height, and name.\n\n282\n00:16:14.080 --> 00:16:19.020\nWhat if I'm like well, I want weight,\nI wanna pull the weight out, right?\n\n283\n00:16:19.020 --> 00:16:23.610\nSo if I do that, I can say wait and\n\n284\n00:16:23.610 --> 00:16:27.570\nnotice I'm not renaming it,\nI gonna keep it as wait.\n\n285\n00:16:27.570 --> 00:16:32.720\nIf I now say print out wait and\nrefresh, it is undefined, so\n\n286\n00:16:32.720 --> 00:16:39.118\nit doesn't throw an error, it actually\njust says [SOUND] it's not there.\n\n287\n00:16:39.118 --> 00:16:43.290\n&gt;&gt; It doesn't do like the guy at the fair\nwho says I can guess your weight within?\n\n288\n00:16:43.290 --> 00:16:44.321\n&gt;&gt; Yeah, it doesn't do that.\n\n289\n00:16:44.321 --> 00:16:46.052\n&gt;&gt; [INAUDIBLE] He just\nsays you haven't told me.\n\n290\n00:16:46.052 --> 00:16:47.263\n&gt;&gt; Yeah, actually that would be worse.\n\n291\n00:16:47.263 --> 00:16:48.310\n&gt;&gt; [LAUGH] Yeah.\n\n292\n00:16:48.310 --> 00:16:53.270\n&gt;&gt; I prefer undefined other than\nit's not there, I'm gonna say seven.\n\n293\n00:16:53.270 --> 00:16:58.160\nSo that's kinda weird, it would\nalmost be nice if I had a fallback,\n\n294\n00:16:58.160 --> 00:17:01.160\na way to have like a default, right?\n\n295\n00:17:01.160 --> 00:17:05.330\nSo if weight's not there\nthen assign this value.\n\n296\n00:17:05.330 --> 00:17:06.360\nOkay, well,\n\n297\n00:17:06.360 --> 00:17:11.880\nwe could do a lot of conditionals like\nif wait do this, otherwise do this.\n\n298\n00:17:11.880 --> 00:17:15.610\nBut it would also be nice if\njust saying right there just\n\n299\n00:17:15.610 --> 00:17:18.630\na couple of little tweaks and\nit would be available to us.\n\n300\n00:17:18.630 --> 00:17:19.880\nWell you're in luck,\n\n301\n00:17:19.880 --> 00:17:23.110\nthere's actually a way to set default\narguments during the structuring.\n\n302\n00:17:24.880 --> 00:17:30.780\nSuch as weight equals 100,\nso what is this doing?\n\n303\n00:17:30.780 --> 00:17:34.570\nWe've typically only used the equal sign,\na single equal sign for\n\n304\n00:17:34.570 --> 00:17:39.450\nassignment, this is still assigning but\nit is a conditional assignment.\n\n305\n00:17:39.450 --> 00:17:43.230\nRight, it only happens\nif weight is not defined\n\n306\n00:17:43.230 --> 00:17:45.940\ninside of the object that\nwe're trying to pull out of.\n\n307\n00:17:45.940 --> 00:17:46.700\nSo if I go back and\n\n308\n00:17:46.700 --> 00:17:51.770\nrefresh, since it is not there,\nweight gets the default value of 100.\n\n309\n00:17:51.770 --> 00:17:57.540\nWhich is incredibly powerful if I wanna\nmake sure weight is a number type or\n\n310\n00:17:57.540 --> 00:18:01.560\na string type and not an undefined type,\nwhich can break our application.\n\n311\n00:18:02.840 --> 00:18:08.570\nAlso do the exact same thing for\nan array but, here's the hiccup.\n\n312\n00:18:08.570 --> 00:18:13.280\nI kind of have to do it on the tail end,\n\n313\n00:18:13.280 --> 00:18:17.800\nif I put comma x,\nhorrible variable name by the way.\n\n314\n00:18:19.440 --> 00:18:25.220\nSo ,favoriteGame, which is connect four,\nsecondFavoriteGame, which is sudoku, X.\n\n315\n00:18:25.220 --> 00:18:27.490\nWell, what is x applied to?\n\n316\n00:18:27.490 --> 00:18:32.180\nThere is no fourth position,\nor in this case, index of 3,\n\n317\n00:18:32.180 --> 00:18:37.590\nso let's see what happens\nwhen I try to console.log X.\n\n318\n00:18:37.590 --> 00:18:38.500\nAnd just for\n\n319\n00:18:38.500 --> 00:18:44.120\nclarity I'm gonna give it a label inside\nof the console and X is undefined.\n\n320\n00:18:44.120 --> 00:18:46.800\nIt does a similar behavior as the object.\n\n321\n00:18:46.800 --> 00:18:50.880\nWell I wonder if what we just learned\nin the object we can apply to an array,\n\n322\n00:18:52.440 --> 00:18:55.360\nI'm a big proponent of,\nlet's see what happens.\n\n323\n00:18:55.360 --> 00:18:57.580\n&gt;&gt; Throw it against the wall and\nsee where it sticks, right?\n\n324\n00:18:57.580 --> 00:19:00.240\n&gt;&gt; So break things, see what happens,\ntry to reason about it.\n\n325\n00:19:00.240 --> 00:19:03.670\n&gt;&gt; That's the great thing about coding\nright is I've been there you're looking at\n\n326\n00:19:03.670 --> 00:19:06.280\nthe code and you're going,\nI wonder if I did this would it do that?\n\n327\n00:19:06.280 --> 00:19:10.920\nOr maybe if I did this it would do that,\nyou can actually try those things and\n\n328\n00:19:10.920 --> 00:19:13.600\nthen if it doesn't work you go\nback you try the other thing.\n\n329\n00:19:13.600 --> 00:19:18.600\nAnd continue on, you gotta get\nyourself past the being afraid\n\n330\n00:19:18.600 --> 00:19:20.980\nto just try and see what it does.\n\n331\n00:19:20.980 --> 00:19:25.150\n&gt;&gt; Yep, and it's really hard to convey\nthat, I can't emphasize that enough.\n\n332\n00:19:25.150 --> 00:19:29.550\nDaniel's seen it, I've seen it,\ndon't be afraid of breaking anything.\n\n333\n00:19:29.550 --> 00:19:33.380\nTypically in environments like this\nyou're gonna have a hard time actually\n\n334\n00:19:33.380 --> 00:19:35.500\ntruly breaking your computer.\n\n335\n00:19:35.500 --> 00:19:36.790\nCould it lock up?\n\n336\n00:19:36.790 --> 00:19:41.770\nMaybe, but to cycle power,\ndon't be afraid to break things.\n\n337\n00:19:41.770 --> 00:19:44.579\nI could go search the internet for\nthe next twenty minutes to see if this\n\n338\n00:19:44.579 --> 00:19:46.781\nwould work or I can take ten seconds and\nsee if it works.\n\n339\n00:19:46.781 --> 00:19:51.380\nIf it doesn't, then I have a more specific\nquestion to search the internet for\n\n340\n00:19:51.380 --> 00:19:53.761\nwhich is going to reduce my search time.\n\n341\n00:19:53.761 --> 00:20:00.110\nSo breaking things, trying things is\na very important concept to just go with.\n\n342\n00:20:00.110 --> 00:20:01.370\n&gt;&gt; Was it Thomas Edison,\n\n343\n00:20:01.370 --> 00:20:06.350\nhe tried a hundred times to create\na longer lasting incandescent light bulb.\n\n344\n00:20:06.350 --> 00:20:08.420\nAnd he finally got it on\nthe hundredth try and\n\n345\n00:20:08.420 --> 00:20:10.650\nthey said,\nwhat do you think about your failures?\n\n346\n00:20:10.650 --> 00:20:14.570\nHe said, I didn't fail, I found 99\nways not to create a light bulb.\n\n347\n00:20:14.570 --> 00:20:16.265\n&gt;&gt; Yeah.\n&gt;&gt; And that's basically the idea.\n\n348\n00:20:16.265 --> 00:20:19.820\n&gt;&gt; Yeah, and it does seem like it\nwould take a long time to learn some\n\n349\n00:20:19.820 --> 00:20:21.860\nof these new features, how they work.\n\n350\n00:20:21.860 --> 00:20:25.590\nBut it actually takes less time I find,\njust to try things and\n\n351\n00:20:25.590 --> 00:20:28.060\ntry to build an understanding for\n\n352\n00:20:28.060 --> 00:20:31.280\nyourself instead of someone telling\nyou how it works all the time.\n\n353\n00:20:31.280 --> 00:20:35.820\nSo I'm emulating then, because that's\nhow I learn some of these new things,\n\n354\n00:20:35.820 --> 00:20:36.840\nI'm like, let me try this.\n\n355\n00:20:38.170 --> 00:20:40.060\nBroke that, yeah, don't do that.\n\n356\n00:20:40.060 --> 00:20:44.370\nAll right, and sometimes I actually\nmake a list of don't do these things.\n\n357\n00:20:44.370 --> 00:20:46.665\n&gt;&gt; Yeah, [LAUGH] does not work.\n\n358\n00:20:46.665 --> 00:20:49.929\n&gt;&gt; For instance, if you accidentally have\nan infinite loop Chrome will ask you hey,\n\n359\n00:20:49.929 --> 00:20:51.520\nis this an infinite loop?\n\n360\n00:20:51.520 --> 00:20:53.080\nDo you wanna run?\n\n361\n00:20:53.080 --> 00:20:56.440\nIf you click yes Chrome will lock up.\n\n362\n00:20:56.440 --> 00:21:02.110\nIt will cause you to Ctrl+Alt+Delete or\nforce quit, so let's keep that in mind.\n\n363\n00:21:02.110 --> 00:21:07.350\nBut it was kinda fun knowing, you can do\nthat, that's nice but don't do that again.\n\n364\n00:21:07.350 --> 00:21:11.460\nSo, with that said,\nlet's just now try this default argument\n\n365\n00:21:11.460 --> 00:21:15.590\ninside the array syntax or destructuring\nthis arrays, let see what happens.\n\n366\n00:21:17.050 --> 00:21:23.070\nWell, if I say X,\nwhat is a good default, game, Clue.\n\n367\n00:21:24.320 --> 00:21:25.040\n&gt;&gt; Good one.\n\n368\n00:21:25.040 --> 00:21:30.950\n&gt;&gt; If there's not anything there,\nthen Clue should be in your rack of games.\n\n369\n00:21:30.950 --> 00:21:35.060\nSo let's see what now x is and\nit is in fact Clue, so\n\n370\n00:21:35.060 --> 00:21:39.350\nI get default arguments for\nboth arrays and objects.\n\n371\n00:21:39.350 --> 00:21:44.630\nAnd I get rename for\nobjects using this colon syntax but\n\n372\n00:21:44.630 --> 00:21:48.010\nwhat's really crazy is in objects\nI can combine all of these.\n\n373\n00:21:48.010 --> 00:21:53.890\nFor instance if I want weight,\nbut I wanna call it user weight.\n\n374\n00:21:55.450 --> 00:21:59.570\nI can say pull out the value weight,\nassign it to the variable user weight,\n\n375\n00:21:59.570 --> 00:22:03.360\nif it's not there give\nuserWeight the value of 100.\n\n376\n00:22:03.360 --> 00:22:10.300\nNow, don't go crazy with these,\nit's like salt, a little bit goes far.\n\n377\n00:22:10.300 --> 00:22:16.600\nSo, don't have giant one-liners that\nare 5,000 characters long horizontally,\n\n378\n00:22:16.600 --> 00:22:18.240\nkeep these within reason.\n\n379\n00:22:18.240 --> 00:22:21.980\nBut this is a nice way to get consistent\n\n380\n00:22:21.980 --> 00:22:25.790\ndestructed data I am pulling information\nout of an originating data type, so\n\n381\n00:22:25.790 --> 00:22:29.300\nlet's change this name and\nsee if it does in fact work.\n\n382\n00:22:31.270 --> 00:22:35.760\nAnd, it still persists there,\nso I have abilities to\n\n383\n00:22:35.760 --> 00:22:41.000\nrestructure data and arrays and\nobjects, when would I use these?\n\n384\n00:22:41.000 --> 00:22:42.440\nWell, for arrays,\n\n385\n00:22:42.440 --> 00:22:46.940\nthere's a common task that I would\nneed to switch variables, right?\n\n386\n00:22:46.940 --> 00:22:48.850\nAnd actually,\nI wouldn't even need them in arrays,\n\n387\n00:22:48.850 --> 00:22:51.080\nI just need to switch\nthe values of two variables.\n\n388\n00:22:52.600 --> 00:22:56.430\nAnd some of these are in algorithmic\napproaches to solving problems.\n\n389\n00:22:56.430 --> 00:23:02.980\nAgain, I'm not gonna go in depth with that\nbecause Math, and flop sweats as we say.\n\n390\n00:23:02.980 --> 00:23:08.040\nBut, if I did have something very simple,\nsuch as, and\n\n391\n00:23:08.040 --> 00:23:12.750\nbecause I'm reassigning, I cannot\nuse const here, I cannot use const.\n\n392\n00:23:12.750 --> 00:23:18.954\nI can actually make the assignment like so\n\n393\n00:23:18.954 --> 00:23:22.860\nA maps to 1, B maps to 2.\n\n394\n00:23:22.860 --> 00:23:26.440\nSo I now have these two variables\ndeclared on a single line,\n\n395\n00:23:26.440 --> 00:23:30.760\nand sometimes this is kind of\nnice to just shorten this.\n\n396\n00:23:30.760 --> 00:23:33.846\nEspecially if I don't\nneed very much declared,\n\n397\n00:23:33.846 --> 00:23:38.170\nso let's consol.log(a) and let's log B.\n\n398\n00:23:39.190 --> 00:23:44.410\nAnd C does that in fact work and\nit does but you know later on on my\n\n399\n00:23:44.410 --> 00:23:48.830\napp I was thinking during this algorithm\nI actually need to switch those values.\n\n400\n00:23:48.830 --> 00:23:53.065\nJust need to reverse them,\nA and B need to switch values.\n\n401\n00:23:53.065 --> 00:23:55.513\nA needs to become 2, B needs to become 1.\n\n402\n00:23:55.513 --> 00:23:59.959\nWell this structuring is\na great way to use them.\n\n403\n00:23:59.959 --> 00:24:04.920\nIn addition to pulling\ninformation from outside\n\n404\n00:24:04.920 --> 00:24:09.764\ndata sources then I wanna\nleave that a in that b.\n\n405\n00:24:09.764 --> 00:24:13.254\nBut here, I'm gonna say a, b = b, a.\n\n406\n00:24:13.254 --> 00:24:15.815\nBut what I really like about this is,\nvisually,\n\n407\n00:24:15.815 --> 00:24:18.760\nthis is really telling about\nwhat you're trying to do.\n\n408\n00:24:18.760 --> 00:24:22.711\nTypically, you had to create a new\nvariable to hold one of the old values as\n\n409\n00:24:22.711 --> 00:24:24.519\nyou switch the other two values.\n\n410\n00:24:24.519 --> 00:24:28.524\nAnd then grab that from the third\nvariable is actually really hard to go\n\n411\n00:24:28.524 --> 00:24:30.700\nthose are just switching a and b values.\n\n412\n00:24:31.840 --> 00:24:37.090\nBut here, I look at it and I go hey,\nthat's just flip-flopping things.\n\n413\n00:24:37.090 --> 00:24:42.576\nLet's, in fact,\nsee if I can get this copied here,\n\n414\n00:24:42.576 --> 00:24:47.540\nand- There we go.\n\n415\n00:24:47.540 --> 00:24:50.640\nKeyword shortcut, just to move\nthings down, always messes up.\n\n416\n00:24:50.640 --> 00:24:55.290\nAnd in fact,\nyou can see that I'm still printing a, b.\n\n417\n00:24:55.290 --> 00:25:00.950\nToo much finger action but I am,\nin fact, have things switched around.\n\n418\n00:25:00.950 --> 00:25:06.570\nSo that's incredibly nice,\nbut the one final thing that\n\n419\n00:25:06.570 --> 00:25:12.490\nthis destructuring comes in handy for\nis, in fact, during a function.\n\n420\n00:25:12.490 --> 00:25:17.136\nSo I can use these during functions\nto pull out object information as you\n\n421\n00:25:17.136 --> 00:25:21.950\ntypically used with objects, and\nlet's just see this in action, okay?\n\n422\n00:25:21.950 --> 00:25:28.220\nSo I still am going to use my\nuser up here, so there's Tony.\n\n423\n00:25:28.220 --> 00:25:30.360\nAnd what am I gonna do with my user?\n\n424\n00:25:30.360 --> 00:25:34.540\nI want to implement just\nkinda like a pluck, right?\n\n425\n00:25:34.540 --> 00:25:38.583\nI'm gonna pluck out something and\nI would use this to map over.\n\n426\n00:25:38.583 --> 00:25:41.600\nSo let's create a function.\n\n427\n00:25:41.600 --> 00:25:47.540\nAnd pluck is a common term for, I'm going\nto reach into an object and just extract.\n\n428\n00:25:47.540 --> 00:25:49.045\nNow, I'm writing a function for this,\n\n429\n00:25:49.045 --> 00:25:51.448\neven though this is the same thing\nas destructuring in general.\n\n430\n00:25:51.448 --> 00:25:55.664\nBecause I can now use this function\nto go over arrays of things and\n\n431\n00:25:55.664 --> 00:25:57.850\nextract very easily.\n\n432\n00:25:57.850 --> 00:26:06.223\nSo, notice that I put curly braces inside\nthe function argument and I say name.\n\n433\n00:26:06.223 --> 00:26:11.948\nThat is telling me a couple of things,\nthat the function pluck is looking for\n\n434\n00:26:11.948 --> 00:26:16.517\nan object and it's looking for\nthe name parameter, right?\n\n435\n00:26:16.517 --> 00:26:21.860\nIt has to have a name parameter,\nso I'm just gonna return name.\n\n436\n00:26:21.860 --> 00:26:23.540\nSo it's a very simple function.\n\n437\n00:26:23.540 --> 00:26:28.043\nBut because of this destructuring argument\ninside of the function declaration,\n\n438\n00:26:28.043 --> 00:26:33.000\nI now have something very simple that I\ncan just return that directly back out.\n\n439\n00:26:33.000 --> 00:26:40.638\nSo let's see how this works,\nI'm going to say const, Maybe.\n\n440\n00:26:40.638 --> 00:26:44.350\n&gt;&gt; [LAUGH]\n&gt;&gt; tonyName, right?\n\n441\n00:26:44.350 --> 00:26:47.140\nJust to see it on a single object, and\n\n442\n00:26:47.140 --> 00:26:52.800\nthat is pluck from the user.\n\n443\n00:26:52.800 --> 00:26:55.320\nAnd what we should see is the name Tony.\n\n444\n00:27:01.393 --> 00:27:05.740\nOkay, so if I refresh I,\nin fact, have pulled out Tony.\n\n445\n00:27:06.845 --> 00:27:08.620\nBut my function is really simple.\n\n446\n00:27:08.620 --> 00:27:14.150\nNow, why is this powerful,\nbecause I've named this function as this?\n\n447\n00:27:14.150 --> 00:27:19.220\nWhat if I now have a series of users that\nI wanna just grab all the usernames,\n\n448\n00:27:19.220 --> 00:27:19.793\nright?\n\n449\n00:27:19.793 --> 00:27:21.720\nI have an array of users.\n\n450\n00:27:23.130 --> 00:27:25.573\nSo let's look at that real quick,\n\n451\n00:27:25.573 --> 00:27:31.990\njust as our final ta-da of the power\nof this destructuring within functions.\n\n452\n00:27:31.990 --> 00:27:38.821\nAnd I have Tony, let me grab the Tony\nuser here, just as my template.\n\n453\n00:27:41.767 --> 00:27:47.057\nSo there's Tony, and\nlet's just change the name to John and\n\n454\n00:27:47.057 --> 00:27:50.283\neverything else is the same, okay?\n\n455\n00:27:50.283 --> 00:27:51.620\nSo I have two users.\n\n456\n00:27:51.620 --> 00:27:56.015\nImagine that this collection or\nthis array is 10,000 users, but\n\n457\n00:27:56.015 --> 00:27:57.857\nI just need all my usernames.\n\n458\n00:27:57.857 --> 00:28:01.621\nI don't care about their weight or\ntheir height or their age at that point,\n\n459\n00:28:01.621 --> 00:28:05.390\nI just wanna iterate through,\ngrab all of that information.\n\n460\n00:28:05.390 --> 00:28:09.270\nSo now that I still have this pluck,\nwhich is using destructuring,\n\n461\n00:28:09.270 --> 00:28:12.845\nI can map over this array and\nget an array of usernames.\n\n462\n00:28:14.080 --> 00:28:18.280\nSo if I say const userNames,\n\n463\n00:28:18.280 --> 00:28:24.070\nI can say users.map(pluck).\n\n464\n00:28:24.070 --> 00:28:28.424\nThere is some implied assumptions here.\n\n465\n00:28:28.424 --> 00:28:31.170\nWhen I use destructuing inside of pluck,\n\n466\n00:28:31.170 --> 00:28:35.320\nI'm expecting the argument to\nit to be an object, right?\n\n467\n00:28:35.320 --> 00:28:38.167\nCurly braces means that I should\nhave curly braces to match it.\n\n468\n00:28:38.167 --> 00:28:43.010\nIf these were not objects,\nthen this kinda does some weird stuff.\n\n469\n00:28:43.010 --> 00:28:44.460\nIt might work, it might not.\n\n470\n00:28:45.610 --> 00:28:49.040\nIt's not fully deterministic,\nso be very careful.\n\n471\n00:28:49.040 --> 00:28:51.160\nIf you're using destructuring and\nfunction arguments,\n\n472\n00:28:51.160 --> 00:28:53.360\nyou need to make sure that\nyou keep that consistent.\n\n473\n00:28:53.360 --> 00:28:58.750\nYou should do that anyway, it relieves\nyou of a great deal of pain points.\n\n474\n00:28:58.750 --> 00:29:03.540\nSo let's see, Daniel,\nI think it's time for our drum roll.\n\n475\n00:29:03.540 --> 00:29:06.160\n&gt;&gt; That's right,\nI'll start beating on the desk here.\n\n476\n00:29:06.160 --> 00:29:07.234\n&gt;&gt; All right.\n&gt;&gt; [CROSSTALK]\n\n477\n00:29:07.234 --> 00:29:09.085\n&gt;&gt; Yeah, we'll just, no,\n\n478\n00:29:09.085 --> 00:29:13.730\nwe won't really do that but\nimagine that you hear drum beats so.\n\n479\n00:29:13.730 --> 00:29:15.572\n&gt;&gt; And\nnot like Lord of the Ring drumbeats.\n\n480\n00:29:15.572 --> 00:29:16.272\n&gt;&gt; Yeah, no.\n\n481\n00:29:16.272 --> 00:29:18.300\n&gt;&gt; [LAUGH]\n&gt;&gt; But crazy ones.\n\n482\n00:29:18.300 --> 00:29:20.930\nBut in fact, you'll see that our usernames\n\n483\n00:29:20.930 --> 00:29:24.610\nhave all been plucked out\nof that series of objects.\n\n484\n00:29:24.610 --> 00:29:30.680\nAnd I've done that with very simple\nfunctions using this destructuring syntax.\n\n485\n00:29:30.680 --> 00:29:33.650\nSo this destructuring idea\nwill continue to crop up.\n\n486\n00:29:33.650 --> 00:29:38.180\nWe actually have other things that\nkinda look like destructuring but\n\n487\n00:29:38.180 --> 00:29:40.100\nare called something else.\n\n488\n00:29:40.100 --> 00:29:42.070\nBut for now, arrays and\n\n489\n00:29:42.070 --> 00:29:45.810\nobjects, we can pull information out of\nthose lickety-splits, it's wonderful.\n\n490\n00:29:45.810 --> 00:29:46.368\n&gt;&gt; I like this.\n\n491\n00:29:46.368 --> 00:29:51.080\nThis whole destructuring idea is very cool\nand I can see where this could be useful\n\n492\n00:29:51.080 --> 00:29:54.060\nas you start creating different programs,\nAPIs and things of that nature.\n\n493\n00:29:54.060 --> 00:29:57.530\nYou start to work on stuff, you might need\nto I just need that data right from here\n\n494\n00:29:57.530 --> 00:30:00.978\nand I don't wanna have to go through the-\n&gt;&gt; Is it painfully?\n\n495\n00:30:00.978 --> 00:30:01.636\n&gt;&gt; Uh-huh.\n\n496\n00:30:01.636 --> 00:30:05.264\n&gt;&gt; Is it the, wait a minute,\nI need to do that bracket syntax,\n\n497\n00:30:05.264 --> 00:30:08.590\nor if it's an object that's even better.\n\n498\n00:30:08.590 --> 00:30:12.161\nWell, I need to grab it by name,\nassign it to a new variable,\n\n499\n00:30:12.161 --> 00:30:14.133\nI can just pull it out all at once.\n\n500\n00:30:14.133 --> 00:30:17.030\n&gt;&gt; Yeah,\nit makes our lives a whole lot easier.\n\n501\n00:30:17.030 --> 00:30:19.750\nThat being said, it's looks like we've\nrun out of time for this episode.\n\n502\n00:30:19.750 --> 00:30:23.310\nAnd just in time, because I know that was\nthe last topic on your list of things\n\n503\n00:30:23.310 --> 00:30:24.780\ntalk about for this episode.\n\n504\n00:30:24.780 --> 00:30:26.773\nSo we do thank you for\njoining us today, Justin.\n\n505\n00:30:26.773 --> 00:30:29.490\nWe thank our lovely viewers out there for\nwatching.\n\n506\n00:30:29.490 --> 00:30:30.420\nWe're gonna go ahead and\n\n507\n00:30:30.420 --> 00:30:33.670\nsign off for ITPRO.TV,\nI've been your host Daniel Lowrie.\n\n508\n00:30:33.670 --> 00:30:34.900\n&gt;&gt; And I'm Justin Dennison.\n\n509\n00:30:34.900 --> 00:30:36.250\n&gt;&gt; And we'll see you next time.\n\n510\n00:30:36.250 --> 00:30:43.566\n[MUSIC]\n\n511\n00:30:43.566 --> 00:30:48.879\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "204915306"
        },
        {
          "description": "In this episode, Daniel and Justin explore the interesting new features called Spread and Rest. They begin with a review of the rest params operator and then look at the concatenation of 2 arrays. Next they look at adding elements from one list to another, then using the Spread function to pass params into a function.",
          "length": "1790",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-8-1-spread_and_rest-021017-PGM.00_29_36_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-8-1-spread_and_rest-021017-PGM.00_29_36_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-8-1-spread_and_rest-021017-PGM.00_29_36_00.Still001-sm.jpg",
          "title": "Spread and Rest",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.190\nWelcome to IT PRO TV.\n\n2\n00:00:01.190 --> 00:00:08.202\nI'm your host [CROSSTALK].\n\n3\n00:00:08.202 --> 00:00:10.500\n&gt;&gt; You're watching IT PRO TV.\n\n4\n00:00:12.370 --> 00:00:15.920\n&gt;&gt; Alright greetings everyone and welcome\nto another great episode of IT PRO TV.\n\n5\n00:00:15.920 --> 00:00:19.190\nI'm your host Daniel Lowrie,\nand in today's episode,\n\n6\n00:00:19.190 --> 00:00:22.250\nwe are back with more on our\nwhat's new in the ESX series.\n\n7\n00:00:22.250 --> 00:00:25.770\nOf course joining me back in the studio\nis our mentor in that very endeavor,\n\n8\n00:00:25.770 --> 00:00:27.500\nour good friend, Mr. Justin Dennison.\n\n9\n00:00:27.500 --> 00:00:28.800\nJustin, welcome back, sir.\n\n10\n00:00:28.800 --> 00:00:29.820\nHow goes it today?\n\n11\n00:00:29.820 --> 00:00:31.540\n&gt;&gt; It's going well, Daniel,\nand how are you doing today?\n\n12\n00:00:31.540 --> 00:00:32.920\n&gt;&gt; Well, thanks for asking, I'm fine.\n\n13\n00:00:32.920 --> 00:00:35.170\n&gt;&gt; Well, all right, that's great to hear.\n\n14\n00:00:35.170 --> 00:00:37.320\nWe'll see if that\ncontinues to be the case,\n\n15\n00:00:37.320 --> 00:00:41.080\nas we dive deeper into\nnew features in ES6.\n\n16\n00:00:41.080 --> 00:00:46.730\nSo, JavaScript is starting to grow up and\ntoday we're actually going to look at\n\n17\n00:00:46.730 --> 00:00:50.110\nan expansion of an operator\nwe've seen before in functions.\n\n18\n00:00:50.110 --> 00:00:53.170\nAnd sadly,\nthey have some pretty odd names.\n\n19\n00:00:53.170 --> 00:00:55.200\nSpread and rest.\n\n20\n00:00:55.200 --> 00:00:57.520\nI don't know why they\nwould pick those names.\n\n21\n00:00:57.520 --> 00:01:01.320\nI mean it makes sense after you see it,\nbut if I'm just reading about it.\n\n22\n00:01:01.320 --> 00:01:02.390\nWhat is spread and rest?\n\n23\n00:01:03.540 --> 00:01:07.360\nSpread it out and\ngrab the rest maybe or taking a rest?\n\n24\n00:01:07.360 --> 00:01:08.100\nWho knows.\n\n25\n00:01:08.100 --> 00:01:09.780\n&gt;&gt; I thought it was a football play.\n\n26\n00:01:09.780 --> 00:01:13.090\n&gt;&gt; It could have very well\nbeen a football play.\n\n27\n00:01:13.090 --> 00:01:16.110\nI've heard those before,\non three, on three.\n\n28\n00:01:16.110 --> 00:01:23.050\nNow spread and rest actually become really\nvaluable in your arsenal of new job script\n\n29\n00:01:23.050 --> 00:01:27.080\nfeatures, but\nthey do take a little bit to think about.\n\n30\n00:01:27.080 --> 00:01:31.570\nA little bit to get used to, and I think\nthe best way to actually see those is to\n\n31\n00:01:31.570 --> 00:01:37.080\nstart in our browser, take a look at an\nold operator, and then expand upon that.\n\n32\n00:01:37.080 --> 00:01:39.140\nSo, here I am in Chrome.\n\n33\n00:01:39.140 --> 00:01:46.730\nI'm gonna open my index.html for\nthis very deep dive of spread and rest.\n\n34\n00:01:46.730 --> 00:01:51.390\nAnd I'm gonna make sure that's\nthe appropriate .html because if I don't,\n\n35\n00:01:51.390 --> 00:01:56.400\nas always I'll have some crazy\nshenanigans not actually happening.\n\n36\n00:01:57.490 --> 00:02:01.700\nSo here I've opened my Chrome dev tools,\nI used the keyboard shortcut that time.\n\n37\n00:02:01.700 --> 00:02:06.680\nBut remember,\nit's under More Tools Developer tools, and\n\n38\n00:02:06.680 --> 00:02:09.670\nwe're good to go at this\npoint in the browser.\n\n39\n00:02:09.670 --> 00:02:13.882\nHowever, if I hop over into Atom,\nI still need to get things up and rolling.\n\n40\n00:02:13.882 --> 00:02:17.479\nSo, I'm going to add my project folder,\nfor Spread and Rest, and\n\n41\n00:02:17.479 --> 00:02:21.716\nI'm going to open, and I am going to\nillustrate that in my index studies HTML,\n\n42\n00:02:21.716 --> 00:02:24.309\nI have a few things set up for\na little bit later.\n\n43\n00:02:24.309 --> 00:02:29.191\nThese are just some HTML elements as\na preview into use cases but these\n\n44\n00:02:29.191 --> 00:02:35.300\nare absolutely not necessary if you just\nwanna play around with these operators.\n\n45\n00:02:35.300 --> 00:02:38.490\nAnd then in app.js I'm just empty and\nready to go.\n\n46\n00:02:38.490 --> 00:02:41.016\nSo let's take a step back and\n\n47\n00:02:41.016 --> 00:02:45.660\ntry to remember the function\nrest params operator.\n\n48\n00:02:45.660 --> 00:02:49.790\nSo rest params,\nit was kind of an allusion to rest.\n\n49\n00:02:49.790 --> 00:02:50.540\nAnd let's see,\n\n50\n00:02:50.540 --> 00:02:55.850\nI'm gonna write a function just to\nremind ourselves of how that works.\n\n51\n00:02:55.850 --> 00:03:00.020\nSo divider,\nif I can actually spell divider.\n\n52\n00:03:00.020 --> 00:03:08.160\nAnd then what am I gonna divide by and\nthe rest of the numbers.\n\n53\n00:03:08.160 --> 00:03:11.570\nSo notice I've put these\nthree dot dot dots.\n\n54\n00:03:11.570 --> 00:03:15.820\nNow, what that actually does is\ngather all of the other arguments\n\n55\n00:03:15.820 --> 00:03:18.240\nafter the first one into an array.\n\n56\n00:03:18.240 --> 00:03:21.600\nSo I'm gathering the rest\nof the parameters\n\n57\n00:03:21.600 --> 00:03:23.870\ninto an array that I can then operate on.\n\n58\n00:03:23.870 --> 00:03:28.180\nAnd that's a lot easier to\nmess with then the other way,\n\n59\n00:03:28.180 --> 00:03:32.590\nwhich was there's this weird arguments\nobject that's not really an array, and\n\n60\n00:03:32.590 --> 00:03:36.960\nthen you had to pull it apart and\nrun for loops, and it was crazy.\n\n61\n00:03:36.960 --> 00:03:41.510\nSo I now have a first argument and\nthe rest of everything and\n\n62\n00:03:41.510 --> 00:03:42.310\nwe'll see how that works.\n\n63\n00:03:42.310 --> 00:03:46.150\nLet's just log what each one of these are,\nfor now.\n\n64\n00:03:47.790 --> 00:03:52.580\nAnd then I'm just going to log numbers,\nnotice that I'm not putting the dot,\n\n65\n00:03:52.580 --> 00:03:57.060\ndot, dot, in front of numbers,\nthat's only here in order to gather.\n\n66\n00:03:57.060 --> 00:03:59.242\nSo this is an example\nof a variadic function.\n\n67\n00:03:59.242 --> 00:04:03.797\nVariadic meaning I can give it 2 params,\n5 params,\n\n68\n00:04:03.797 --> 00:04:09.770\n700 params, but notice I do need to\ngive it at least 1 parameter and\n\n69\n00:04:09.770 --> 00:04:12.520\nhopefully at least 1 other 1.\n\n70\n00:04:12.520 --> 00:04:16.110\nSo let's see how this plays out.\n\n71\n00:04:16.110 --> 00:04:20.960\nConst let's just call it results and\nthat's divider\n\n72\n00:04:22.170 --> 00:04:26.170\nand we're gonna divide by four and\none, two, three.\n\n73\n00:04:26.170 --> 00:04:32.530\nGot to make sure you put commas there,\nin appropriate spacing.\n\n74\n00:04:33.660 --> 00:04:39.670\nAll right so there's our 1, 2,\n3, 4 so at this point 4 would\n\n75\n00:04:39.670 --> 00:04:44.900\nbe assigned to divide by and then 1,\n2, 3 would kind of be collected.\n\n76\n00:04:44.900 --> 00:04:47.355\nAnd let's see what the ultimate\nresult of that is.\n\n77\n00:04:51.812 --> 00:04:58.850\nAnd if we hop back over and we refresh,\nThen I have 4 and then 1, 2, 3.\n\n78\n00:04:58.850 --> 00:05:03.880\nAnd I'm kind of interested to where,\nI know where this is.\n\n79\n00:05:03.880 --> 00:05:09.020\nI'm just gonna be up front, I'm being\na little tricky about some other stuff.\n\n80\n00:05:09.020 --> 00:05:10.920\nSo, just keep that in mind.\n\n81\n00:05:10.920 --> 00:05:13.310\nThe undefined will kinda show up here and\nthere.\n\n82\n00:05:13.310 --> 00:05:17.071\n&gt;&gt; Let's see, you apparently didn't\ndefine something there [LAUGH].\n\n83\n00:05:17.071 --> 00:05:21.108\n&gt;&gt; Yeah, so\nwe'll have to leave that be for now.\n\n84\n00:05:21.108 --> 00:05:23.730\nSo, I have const results = divider,\n\n85\n00:05:23.730 --> 00:05:29.340\ndivide by is four, and then the rest of\nthem are gathered into one, two, three.\n\n86\n00:05:29.340 --> 00:05:32.320\nSo we've seen that,\nhow can I actually use that?\n\n87\n00:05:32.320 --> 00:05:37.088\nWell now since this is an array,\nI can just say\n\n88\n00:05:37.088 --> 00:05:42.119\nreturn numbers map, and\nthen for each number,\n\n89\n00:05:43.548 --> 00:05:47.963\nGive me the number, divided by\nwhatever you're going to divide by.\n\n90\n00:05:50.084 --> 00:05:56.380\nNow if we do that we will\nactually get 0.25, 0.5 and 0.75.\n\n91\n00:05:56.380 --> 00:06:01.190\nBut the real strength of this is I\ncan just continue adding arguments\n\n92\n00:06:01.190 --> 00:06:02.320\nas long as I want.\n\n93\n00:06:04.360 --> 00:06:09.230\nAnd it will continue to gather the rest\nafter the first argument, all together.\n\n94\n00:06:09.230 --> 00:06:13.980\nNow, if I did do something like this,\njust added another argument called x.\n\n95\n00:06:13.980 --> 00:06:19.710\nWhat we will find, I'm gonna\nreduce these number of arguments.\n\n96\n00:06:19.710 --> 00:06:23.069\nWhat we will find is,\nthat affects how these are collected.\n\n97\n00:06:24.170 --> 00:06:30.715\nSo, if I refresh, and you need to add,\nget rid of that last comma there.\n\n98\n00:06:30.715 --> 00:06:31.840\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n99\n00:06:31.840 --> 00:06:36.040\nyou'll notice that even though I gave\nit three after the first one, right?\n\n100\n00:06:36.040 --> 00:06:37.460\nFour in total.\n\n101\n00:06:37.460 --> 00:06:40.990\nNormally, I would have gotten this but\nsince I've added this extra x parameter\n\n102\n00:06:42.100 --> 00:06:44.830\nthis one gets mapped to x.\n\n103\n00:06:44.830 --> 00:06:49.368\nAnd now the dot dot dot numbers collects\n2 and 3 only, and I even ignore this one.\n\n104\n00:06:49.368 --> 00:06:54.510\nSo this kind of looks like\ndestructuring a little bit,\n\n105\n00:06:54.510 --> 00:07:00.860\nkind of pulling those apart an array, and\nin fact, that's the other use case for\n\n106\n00:07:00.860 --> 00:07:05.660\nthis dot dot dot parameter,\nthis is the rest parameter.\n\n107\n00:07:05.660 --> 00:07:07.510\nThe rest operator if you will.\n\n108\n00:07:08.580 --> 00:07:10.280\nSo, this comment that out and\n\n109\n00:07:10.280 --> 00:07:14.860\nlet's take a look at how can this be use\nduring a array destructuring process.\n\n110\n00:07:14.860 --> 00:07:18.290\nNow, I'm not gonna cover\ndestructuring in this case that\n\n111\n00:07:18.290 --> 00:07:23.110\nwe do have another video in the library\nall about the structuring In general.\n\n112\n00:07:23.110 --> 00:07:25.450\nSo do take a look at that if you need to.\n\n113\n00:07:25.450 --> 00:07:28.720\nBut let's see how this works for arrays.\n\n114\n00:07:28.720 --> 00:07:33.910\nLet's get a couple of arrays,\nodds and those are not odds.\n\n115\n00:07:33.910 --> 00:07:34.682\nThere we go.\n\n116\n00:07:37.810 --> 00:07:39.171\nI'm off my game today, Daniel.\n\n117\n00:07:39.171 --> 00:07:42.795\n&gt;&gt; Yes.\n&gt;&gt; Yeah and then I have evens and\n\n118\n00:07:42.795 --> 00:07:46.790\nthat would be 2, 4, 6, and 8.\n\n119\n00:07:46.790 --> 00:07:50.878\nSo here I have odds and evens.\n\n120\n00:07:50.878 --> 00:07:54.674\nNow what if I just wanted\nthe first one out of odds and\n\n121\n00:07:54.674 --> 00:07:58.928\nthen keep all the rest of them\nin something else, right?\n\n122\n00:07:58.928 --> 00:08:03.230\nSo I can say first0dd, and\n\n123\n00:08:03.230 --> 00:08:06.977\nthen, the rest0dds.\n\n124\n00:08:09.058 --> 00:08:14.202\nAnd if I say odds, well,\nthat would almost work\n\n125\n00:08:16.967 --> 00:08:22.317\nExcept, forgot a semicolon there.\n\n126\n00:08:24.591 --> 00:08:27.590\nExcept it's not going to\ngather like we hope to.\n\n127\n00:08:27.590 --> 00:08:29.710\nIt actually describes the first two.\n\n128\n00:08:29.710 --> 00:08:34.400\nBut if I take this dot, dot,\ndot, and I put it right there.\n\n129\n00:08:34.400 --> 00:08:36.080\nI've made a small modification.\n\n130\n00:08:37.080 --> 00:08:38.940\nLet's see what happens,\nwhat the result is.\n\n131\n00:08:38.940 --> 00:08:40.390\nNow, I get the first one.\n\n132\n00:08:40.390 --> 00:08:43.390\nAnd then, the rest of them\nare collected into an additional array.\n\n133\n00:08:43.390 --> 00:08:47.450\nIf I drop down, these are, in fact,\nstill in an another array.\n\n134\n00:08:47.450 --> 00:08:49.975\nThey have not changed the odds array.\n\n135\n00:08:49.975 --> 00:08:53.610\nIt has been collected into\nthe variable name, restOdds.\n\n136\n00:08:53.610 --> 00:08:56.280\n&gt;&gt; So, actually,\nlike creates a whole new array and\n\n137\n00:08:56.280 --> 00:09:00.490\nkind of in limbo out there,\nso, it can use it?\n\n138\n00:09:00.490 --> 00:09:01.740\n&gt;&gt; Yeah, yep, yep.\n\n139\n00:09:01.740 --> 00:09:06.120\nIt seems kinda weird, you're just\ncreating arrays upon arrays upon arrays.\n\n140\n00:09:06.120 --> 00:09:08.970\nBut it's really nice because\nif I don't have to worry about\n\n141\n00:09:08.970 --> 00:09:11.310\nthe original array changing on me,\n\n142\n00:09:11.310 --> 00:09:16.130\nI can slice and dice without, kind of\nthrowing caution to the wind, if you will.\n\n143\n00:09:16.130 --> 00:09:19.000\nSo ,I do like this, this is very handy.\n\n144\n00:09:19.000 --> 00:09:21.656\nBut this is-\n&gt;&gt; Are you saying that this will allow us\n\n145\n00:09:21.656 --> 00:09:24.950\nto basically, we create an array,\nit allows us to maintain that array,\n\n146\n00:09:24.950 --> 00:09:26.110\ndoesn't change.\n\n147\n00:09:26.110 --> 00:09:29.420\nAnd then, create new arrays from\nthat array on the fly as necessary.\n\n148\n00:09:29.420 --> 00:09:33.450\n&gt;&gt; Yes, so, and\nlet's just make sure we're good.\n\n149\n00:09:33.450 --> 00:09:35.980\nLet's look at the original odds array.\n\n150\n00:09:35.980 --> 00:09:38.780\nSo, if I, here's my first odd,\n\n151\n00:09:38.780 --> 00:09:41.460\nhere's the rest of the odds\nafter taking the first out.\n\n152\n00:09:41.460 --> 00:09:46.780\nBut notice, if I print odds again after\nthose operations, it is still 1, 3, 5, 7.\n\n153\n00:09:46.780 --> 00:09:50.380\nAnd that's because odds has not changed.\n\n154\n00:09:50.380 --> 00:09:54.976\nAnd I'm not reassigning odds to a new\narray because const would actually\n\n155\n00:09:54.976 --> 00:09:56.868\ndisallow me from doing that.\n\n156\n00:09:56.868 --> 00:10:00.225\nSo, that's another reason I like\nto use const wherever I can cuz\n\n157\n00:10:00.225 --> 00:10:03.644\nI don't accidentally reassign,\nthis is an array and then,\n\n158\n00:10:03.644 --> 00:10:05.839\nends up being a single number or a string.\n\n159\n00:10:06.950 --> 00:10:08.886\nSo, this is a way of slicing and dicing.\n\n160\n00:10:08.886 --> 00:10:12.357\nAnd you'll see this pattern where\nI just need the first one and\n\n161\n00:10:12.357 --> 00:10:14.240\nthen the rest of them are just so.\n\n162\n00:10:15.470 --> 00:10:22.710\nNow, how does this work out if I have\nsomething else other than numbers, right?\n\n163\n00:10:23.930 --> 00:10:26.440\nSo, if I temporarily comment these out.\n\n164\n00:10:27.470 --> 00:10:29.310\nAnd let's add this at the end here.\n\n165\n00:10:30.880 --> 00:10:35.779\nAnd this is really handy if you have\nlike an array as a structure of\n\n166\n00:10:35.779 --> 00:10:39.151\nmaintaining data, such as a team, right?\n\n167\n00:10:39.151 --> 00:10:44.642\nAnd then, you always know that they very\nfirst element, element at index zero,\n\n168\n00:10:44.642 --> 00:10:49.420\nis the team captain, and then,\neverybody else is the players.\n\n169\n00:10:49.420 --> 00:10:56.496\nSo, this would be Tony, Sally, and-\n&gt;&gt; John.\n\n170\n00:10:56.496 --> 00:10:57.650\n&gt;&gt; John, there we go.\n\n171\n00:10:59.330 --> 00:11:03.690\nSo, if I know that the first\none is the captain and\n\n172\n00:11:03.690 --> 00:11:07.810\nthe rest of them are the team,\nnow, I can pull these apart.\n\n173\n00:11:07.810 --> 00:11:10.920\nBy saying, okay, well,\nhere's the captain and\n\n174\n00:11:10.920 --> 00:11:15.368\nall the other team players are still\nin an array by saying, captain,\n\n175\n00:11:15.368 --> 00:11:21.920\n...team=, nope not team,\n\n176\n00:11:21.920 --> 00:11:26.530\nthere we go, players Is equal to the team.\n\n177\n00:11:26.530 --> 00:11:29.400\nSo, now, I'm pulling\nthe captain off from the front.\n\n178\n00:11:29.400 --> 00:11:30.650\nAnd everybody else is collected.\n\n179\n00:11:30.650 --> 00:11:33.408\nI'm partitioning this array.\n\n180\n00:11:33.408 --> 00:11:35.690\nWell, I'm getting a number and\nanother array.\n\n181\n00:11:37.290 --> 00:11:42.260\nAnd that allows me to quickly\npull this information out, but\n\n182\n00:11:42.260 --> 00:11:45.740\nkeep things In a logical order, right?\n\n183\n00:11:45.740 --> 00:11:48.090\nSo, I don't have to pull\nthese out one by one.\n\n184\n00:11:48.090 --> 00:11:53.640\nInstead, I have the one, the captain,\nand then I have everybody else.\n\n185\n00:11:53.640 --> 00:11:57.860\nSo, it's a different partitioning\nmechanism than just destructuring itself.\n\n186\n00:11:57.860 --> 00:12:01.120\nSo, if I look,\nyou will see that Alice is the captain and\n\n187\n00:12:01.120 --> 00:12:04.730\nthen all the other players are Tony,\nSally and John.\n\n188\n00:12:04.730 --> 00:12:06.030\nSo, that's very handy.\n\n189\n00:12:07.530 --> 00:12:11.720\nBut along with this REST operator,\nthere is a way to kind of,\n\n190\n00:12:11.720 --> 00:12:14.100\nwhat if I wanna blow these apart, right?\n\n191\n00:12:14.100 --> 00:12:19.910\nI just wanna get these out of an array,\nand use them other places.\n\n192\n00:12:19.910 --> 00:12:21.880\nWell, this array,\n\n193\n00:12:21.880 --> 00:12:26.510\nthis operator, this rest operator does\nhave an analog called the spread operator.\n\n194\n00:12:27.510 --> 00:12:31.450\nAnd I'm gonna keep this team and\ncaptains so\n\n195\n00:12:31.450 --> 00:12:35.758\nthe team can be subdivided\ninto red team and blue team.\n\n196\n00:12:35.758 --> 00:12:41.850\nOkay, so, I'm gonna use this,\n\n197\n00:12:41.850 --> 00:12:46.490\nconst ReadTeam is equal and\n\n198\n00:12:46.490 --> 00:12:50.620\njust gonna copy paste this real quick,\nmaybe.\n\n199\n00:12:53.330 --> 00:12:56.890\nThe new force touch sometimes\nthrows me off Daniel,\n\n200\n00:12:56.890 --> 00:12:58.310\n&gt;&gt; Yeah, I'm not a huge fan.\n\n201\n00:12:58.310 --> 00:13:01.266\n&gt;&gt; Yeah, unlike, where am I clicking?\n\n202\n00:13:01.266 --> 00:13:02.514\nI'm clicking craziness.\n\n203\n00:13:02.514 --> 00:13:07.467\nAnd then, I have Blue team.\n\n204\n00:13:07.467 --> 00:13:09.660\nAnd, here we go.\n\n205\n00:13:09.660 --> 00:13:13.290\nSo, I've split my team,\nmy team has already been split up, but\n\n206\n00:13:13.290 --> 00:13:16.720\nnow I need to unify that team,\nwell I could just rewrite these.\n\n207\n00:13:16.720 --> 00:13:21.200\nBut, let's say, that these have\ncome in from a data service,\n\n208\n00:13:21.200 --> 00:13:26.200\nthis is a lookup on a roster And\nI need to unify these.\n\n209\n00:13:26.200 --> 00:13:31.640\nSo I could say, const team =,\nand do crazy things like,\n\n210\n00:13:31.640 --> 00:13:37.000\nI need to push all of these together,\ngrab each one, but I can actually spread,\n\n211\n00:13:37.000 --> 00:13:41.920\nand that's pull all of these apart,\ninside another array.\n\n212\n00:13:41.920 --> 00:13:46.250\nSo, if I just type empty square brackets,\nokay, well, that's an empty array.\n\n213\n00:13:46.250 --> 00:13:50.681\nAnd I say ...red team, ...blue team,\n\n214\n00:13:50.681 --> 00:13:55.460\nwell, I'm now gonna blow those apart and\nthen,\n\n215\n00:13:55.460 --> 00:13:59.908\nthey're gonna become part of the variable.\n\n216\n00:13:59.908 --> 00:14:01.909\nPart of this array, as a matter of fact.\n\n217\n00:14:01.909 --> 00:14:04.957\nAnd let's just do a quick log of the team.\n\n218\n00:14:08.605 --> 00:14:14.940\nSo, now, I've taken red team and blue team\nand combine them into a single array.\n\n219\n00:14:14.940 --> 00:14:19.640\nAnd okay, well, this is, that's nice,\nwhy would this be helpful to me?\n\n220\n00:14:19.640 --> 00:14:25.100\nWhy would this, well, I'm creating a new\narray without affecting the red and blue.\n\n221\n00:14:25.100 --> 00:14:31.110\nThat's one but also, this spread\noperator works for any type of iterable.\n\n222\n00:14:31.110 --> 00:14:32.720\nIt doesn't have to be just array.\n\n223\n00:14:32.720 --> 00:14:36.220\nIf you can iterate it,\nthen you can kind of spread it apart.\n\n224\n00:14:36.220 --> 00:14:39.600\nSo, as an additional example,\n\n225\n00:14:39.600 --> 00:14:46.370\nlet's look at some names, or\nactually, let's just look at letters.\n\n226\n00:14:46.370 --> 00:14:51.730\nSo, abcdefgh, not all the letters.\n\n227\n00:14:51.730 --> 00:14:58.549\nBut if I wanted to have those in an array,\nI could call split as I normally do.\n\n228\n00:14:58.549 --> 00:15:03.443\nBut with this new operator,\nI can go ...letters,\n\n229\n00:15:03.443 --> 00:15:07.139\nand notice, this is no longer an array,\n\n230\n00:15:07.139 --> 00:15:11.430\ninside of this, all right, ...letters.\n\n231\n00:15:11.430 --> 00:15:14.960\nLetters is a string, but\nstrings can be iterated over.\n\n232\n00:15:14.960 --> 00:15:20.140\nAnd in fact, what happens is everything\nkinda gets blown apart element by element.\n\n233\n00:15:22.130 --> 00:15:26.490\nAnd I have letterArrays,\nit should be lettersArray.\n\n234\n00:15:27.820 --> 00:15:29.850\nBut I kinda pull those apart,\n\n235\n00:15:29.850 --> 00:15:34.200\nnow where would I use this in\na more actual application?\n\n236\n00:15:34.200 --> 00:15:36.070\nWell, that's where we go back to.\n\n237\n00:15:36.070 --> 00:15:39.060\nThose hidden html elements\nthat I had in that other page.\n\n238\n00:15:39.060 --> 00:15:43.359\nLet's just take a look at those and\nsee how I would use those.\n\n239\n00:15:43.359 --> 00:15:47.386\nSo, I have some crazy writing\nhere if you know what these are,\n\n240\n00:15:47.386 --> 00:15:52.039\nI have a div with a class of card,\nI have an anchor tag with nothing in it.\n\n241\n00:15:52.039 --> 00:15:54.128\nI'm just using these as an example.\n\n242\n00:15:54.128 --> 00:15:56.320\nSo, these would normally\nhave content in them.\n\n243\n00:15:56.320 --> 00:15:58.956\nThey don't actually display on the page,\nbut\n\n244\n00:15:58.956 --> 00:16:02.807\nwhat if I want to dynamically change\nthem or collect them together or\n\n245\n00:16:02.807 --> 00:16:06.070\nGrab information from them inside or\nall their classes.\n\n246\n00:16:07.450 --> 00:16:09.740\nAgain, this is not about\nbuilding web applications,\n\n247\n00:16:09.740 --> 00:16:12.150\nthis is a very common use case.\n\n248\n00:16:12.150 --> 00:16:12.872\nSo what would I do?\n\n249\n00:16:12.872 --> 00:16:19.800\nWell, if I wanted to grab all of those,\nlet's just get out of the way here.\n\n250\n00:16:23.682 --> 00:16:29.835\nThen I could say const and\nI'm gonna call the divs cards and\n\n251\n00:16:29.835 --> 00:16:37.133\nI'm gonna type this craziness\nhere querySelectorAll div.cards.\n\n252\n00:16:37.133 --> 00:16:40.689\nAnd then, a-tags are actually links.\n\n253\n00:16:43.712 --> 00:16:47.700\nQuerySelectorAll, and then I'm just\ngonna grab all the anchor tags.\n\n254\n00:16:47.700 --> 00:16:52.590\nSo now, this is a way that I can grab\ninformation out of the HTML page, so\n\n255\n00:16:52.590 --> 00:16:53.970\nI can interact with it.\n\n256\n00:16:53.970 --> 00:16:57.900\nBut let's just take a look at cards,\ncuz links are gonna be very similar.\n\n257\n00:17:01.085 --> 00:17:05.319\nWait a minute, card.\n\n258\n00:17:05.319 --> 00:17:07.345\nIf you misspell the selector,\nit'll give you nothing.\n\n259\n00:17:07.345 --> 00:17:08.232\n&gt;&gt; [LAUGH]\n&gt;&gt; That's a very-\n\n260\n00:17:08.232 --> 00:17:09.351\n&gt;&gt; Important safety tip.\n\n261\n00:17:09.351 --> 00:17:09.882\n&gt;&gt; Yep.\n\n262\n00:17:09.882 --> 00:17:11.052\n&gt;&gt; [LAUGH]\n&gt;&gt; Be very careful,\n\n263\n00:17:11.052 --> 00:17:13.475\nmisspellings will wreck your day.\n\n264\n00:17:13.475 --> 00:17:14.050\n&gt;&gt; Yeah.\n\n265\n00:17:14.050 --> 00:17:18.380\n&gt;&gt; So if I refresh, I now have a collect,\nyou see those square brackets?\n\n266\n00:17:18.380 --> 00:17:20.900\nHere's a common thing that will happen.\n\n267\n00:17:20.900 --> 00:17:23.980\nWell, that's an array of HTML elements.\n\n268\n00:17:23.980 --> 00:17:28.350\nBut if I drop down and I always recommend\nto do this, this is a node list.\n\n269\n00:17:29.410 --> 00:17:32.020\nHm, that's kinda weird.\n\n270\n00:17:32.020 --> 00:17:34.750\nI actually don't get all of\nthe wonderful array methods that are so\n\n271\n00:17:34.750 --> 00:17:38.280\npowerful like map,\nfilter, reduce, for-each.\n\n272\n00:17:38.280 --> 00:17:39.225\nWell, I actually get for-each.\n\n273\n00:17:39.225 --> 00:17:43.430\nIf I look, I get for-each here and\nI get a few others.\n\n274\n00:17:43.430 --> 00:17:47.866\nBut it doesn't quite behave like an array,\nI don't get all of the power of the array.\n\n275\n00:17:47.866 --> 00:17:51.460\nIt would be really nice if\nthese were just in an array.\n\n276\n00:17:51.460 --> 00:17:56.450\nWell now that I have those,\nI can actually spread those into an array\n\n277\n00:17:56.450 --> 00:18:00.810\nbecause if I see 0, 1, 2,\n3, 4 with a length, right?\n\n278\n00:18:00.810 --> 00:18:04.526\nAnd if I come down here\ninside the __proto__ see this\n\n279\n00:18:04.526 --> 00:18:07.210\nSymbol(Symbol.iterator)?\n\n280\n00:18:07.210 --> 00:18:09.637\nIf you see that, it is iterable and\n\n281\n00:18:09.637 --> 00:18:14.008\nwe will talk more about iteraters\nin depth in a later episode.\n\n282\n00:18:14.008 --> 00:18:19.625\nBut what we have here is\nthe ability to be iterated upon,\n\n283\n00:18:19.625 --> 00:18:26.210\nthus the spread operator behaves\nexactly like it does on arrays.\n\n284\n00:18:26.210 --> 00:18:29.622\nI can actually spread it out into\nan array and then get all the power back.\n\n285\n00:18:29.622 --> 00:18:32.240\nAnd let's just see that in action.\n\n286\n00:18:32.240 --> 00:18:40.562\nSo a cardArray, = [...cards].\n\n287\n00:18:43.072 --> 00:18:45.150\nSo there's my cardArray.\n\n288\n00:18:46.845 --> 00:18:48.990\nWhoa, I got a little carried away there.\n\n289\n00:18:48.990 --> 00:18:52.530\nNow, it looks very similar on the surface,\nright?\n\n290\n00:18:52.530 --> 00:18:55.033\nIt looks exactly like the display\nwas just a little while ago.\n\n291\n00:18:55.033 --> 00:18:58.272\nBut if I drop this down,\nyou will notice this has become an array.\n\n292\n00:18:58.272 --> 00:19:03.750\nAnd now, these are all the things that\nI can do with that data structure.\n\n293\n00:19:03.750 --> 00:19:08.630\nSo this makes it handy,\nI can now take anything that is iterable,\n\n294\n00:19:08.630 --> 00:19:10.512\nchange it into an array.\n\n295\n00:19:10.512 --> 00:19:12.342\nAnd if I know how to use arrays well,\n\n296\n00:19:12.342 --> 00:19:17.000\nthen I can just keep leveraging the same\ntools over, and over, and over again.\n\n297\n00:19:17.000 --> 00:19:20.535\nIn addition to,\nif I have made these selections but\n\n298\n00:19:20.535 --> 00:19:22.970\nthere's somewhere later on in\nmy decision-making process.\n\n299\n00:19:22.970 --> 00:19:27.548\nOr my application development that I kinda\njust need to squish all of these things\n\n300\n00:19:27.548 --> 00:19:28.705\ntogether, right?\n\n301\n00:19:28.705 --> 00:19:31.670\nAll the elements on a page.\n\n302\n00:19:31.670 --> 00:19:36.140\nThen I can do something like\nthis with the spread, and\n\n303\n00:19:36.140 --> 00:19:41.120\nthat's [...cards, ...links].\n\n304\n00:19:41.120 --> 00:19:45.559\nNow, notice this is a little bit\ndifferent color but you gotta be careful.\n\n305\n00:19:45.559 --> 00:19:49.940\nThis is telling you, that might be a\nreserve words somewhere, it's not purple.\n\n306\n00:19:49.940 --> 00:19:52.653\nSo I should be fine, but\nit may have other significance.\n\n307\n00:19:52.653 --> 00:19:57.860\nSo be very careful then and\nlet's see how elements looks now.\n\n308\n00:20:01.409 --> 00:20:06.386\nAnd I now have an array that has taken all\nof these div things, whatever those are,\n\n309\n00:20:06.386 --> 00:20:11.075\nand all the a's, which are representative\nof the little hyperlinks that you\n\n310\n00:20:11.075 --> 00:20:13.334\nclick and squish them into an array.\n\n311\n00:20:13.334 --> 00:20:18.015\nAnd now, I have a larger data structure\nfor all the elements on the page.\n\n312\n00:20:18.015 --> 00:20:19.575\nSo that's incredibly powerful.\n\n313\n00:20:19.575 --> 00:20:23.380\nThat's one of the main use\ncases that I use arrays for,\n\n314\n00:20:23.380 --> 00:20:26.209\nor excuse me, the spread operator for.\n\n315\n00:20:26.209 --> 00:20:32.270\nNow finally, where else would\nI use this spread operator?\n\n316\n00:20:32.270 --> 00:20:36.060\nWell, there are times where I\nwanna bundle up things in order\n\n317\n00:20:36.060 --> 00:20:38.050\nas a data structure, right?\n\n318\n00:20:38.050 --> 00:20:42.300\nSo if I think about it,\nI need three numbers and I always need\n\n319\n00:20:42.300 --> 00:20:47.020\nthis one number to be first but one to be\nsecond, and the other one to be third.\n\n320\n00:20:47.020 --> 00:20:48.562\nI can use an array to maintain that order.\n\n321\n00:20:48.562 --> 00:20:52.604\nBut now, if I wanna call\na function with those numbers,\n\n322\n00:20:52.604 --> 00:20:55.350\nthen I have to pull those out.\n\n323\n00:20:55.350 --> 00:21:00.920\nIn addition to, there's things like\nthe date object where I need the year,\n\n324\n00:21:00.920 --> 00:21:04.010\nthe month, and\nthe day as a number in those particular\n\n325\n00:21:04.010 --> 00:21:06.870\norders in order to construct\na new JavaScript date.\n\n326\n00:21:06.870 --> 00:21:10.250\nWell, how does the spread operator\nhelp us in those contexts?\n\n327\n00:21:10.250 --> 00:21:12.800\nWell, I think it's best if\nwe just take a look and\n\n328\n00:21:12.800 --> 00:21:14.990\nsee how that,\nyou're like that's a lot nicer.\n\n329\n00:21:14.990 --> 00:21:19.590\nThat's actually a little\neasier to organize and\n\n330\n00:21:19.590 --> 00:21:23.450\nwe will compare that with kind\nof the old way of doing it.\n\n331\n00:21:23.450 --> 00:21:27.300\nSo let's write a function,\nit's a very simple one called sum.\n\n332\n00:21:27.300 --> 00:21:30.060\nAnd it takes three numbers, x, y, z.\n\n333\n00:21:30.060 --> 00:21:35.257\nAnd all it does is return x + y + z.\n\n334\n00:21:35.257 --> 00:21:37.870\nAll right, so that's fine.\n\n335\n00:21:37.870 --> 00:21:41.050\nBut now, if I have my numbers,\n\n336\n00:21:43.036 --> 00:21:47.363\nIn array as such 1, 2, 3, all right?\n\n337\n00:21:47.363 --> 00:21:50.710\nHow would I do this normally?\n\n338\n00:21:50.710 --> 00:21:52.460\nLet's move this up a little bit here.\n\n339\n00:21:53.860 --> 00:21:56.210\nWell, the old way I would actually call,\n\n340\n00:21:58.604 --> 00:22:04.733\nThe result of sum as (numbers [0],\n\n341\n00:22:04.733 --> 00:22:10.685\nnumbers [1], numbers [2]).\n\n342\n00:22:10.685 --> 00:22:12.410\nNow, I don't know about you, Daniel.\n\n343\n00:22:12.410 --> 00:22:15.670\nBut I don't particularly like typing all\nof that and it's really hard to read.\n\n344\n00:22:15.670 --> 00:22:18.180\nI don't understand why I\nwould need to do that.\n\n345\n00:22:18.180 --> 00:22:21.320\nI just have the three numbers,\nI need to take the sum, right?\n\n346\n00:22:21.320 --> 00:22:26.680\nSo, I don't like this,\nhow can we make this better?\n\n347\n00:22:26.680 --> 00:22:29.329\nWell, let's make sure that\nit's actually correct first.\n\n348\n00:22:30.340 --> 00:22:32.220\nThat's a very important distinction.\n\n349\n00:22:32.220 --> 00:22:34.303\nWell, 1 + 2 + 3 is, in fact, 6.\n\n350\n00:22:34.303 --> 00:22:40.240\nSo it does work, but if there was only\na better way and the spread provides that.\n\n351\n00:22:40.240 --> 00:22:41.690\nThe spread operator provides that.\n\n352\n00:22:43.745 --> 00:22:48.700\nAnd I like to think of spread as\nspreading something on a piece of bread-\n\n353\n00:22:48.700 --> 00:22:49.368\n&gt;&gt; Butter over toast.\n\n354\n00:22:49.368 --> 00:22:52.558\n&gt;&gt; Yeah, butter over toast or\njam, raspberry jam.\n\n355\n00:22:52.558 --> 00:22:53.342\nMm, raspberry.\n\n356\n00:22:53.342 --> 00:22:54.871\n&gt;&gt; Is it lunch time yet?\n\n357\n00:22:54.871 --> 00:22:55.818\n&gt;&gt; Yeah, I just got hungry.\n\n358\n00:22:55.818 --> 00:22:56.870\n&gt;&gt; [LAUGH]\n&gt;&gt; It's so crazy.\n\n359\n00:22:56.870 --> 00:23:03.340\n&gt;&gt; So what if want to call const results\n= sum, then I just wanna split those out.\n\n360\n00:23:03.340 --> 00:23:05.410\nI know this array has three elements and\n\n361\n00:23:05.410 --> 00:23:09.045\nthey are representative of the three\nelements for this function.\n\n362\n00:23:09.045 --> 00:23:12.862\nI can go ...numbers.\n\n363\n00:23:14.910 --> 00:23:16.260\nBe very, very careful,\n\n364\n00:23:16.260 --> 00:23:22.170\nthis is not the same as collecting\nthings inside of a function argument.\n\n365\n00:23:22.170 --> 00:23:27.512\nI'm actually going to split all\nof these pieces apart, right?\n\n366\n00:23:27.512 --> 00:23:31.446\nI'm gonna take 1 and send it to x,\n\n367\n00:23:31.446 --> 00:23:35.390\n2 send it to y, 3 and send it to z.\n\n368\n00:23:36.670 --> 00:23:39.360\nSo let's see if this is a little nicer.\n\n369\n00:23:39.360 --> 00:23:45.090\nOkay, let's see if it actually holds up,\nand I'm refreshing and it's still at 6.\n\n370\n00:23:45.090 --> 00:23:46.176\nSo that's incredibly handy.\n\n371\n00:23:46.176 --> 00:23:49.920\n&gt;&gt; Now, Justin, is this meant to basically\nreplace the old way of doing it?\n\n372\n00:23:49.920 --> 00:23:52.741\nYou showed a lot more long drawn-out\nprocess of trying to figure out all\n\n373\n00:23:52.741 --> 00:23:53.267\nthat stuff.\n\n374\n00:23:53.267 --> 00:23:56.157\nAnd now, we have the spread\nfunction was a whole lot easier,\n\n375\n00:23:56.157 --> 00:23:59.470\na lot shorter as far as the code goes,\na little easier to read.\n\n376\n00:23:59.470 --> 00:24:01.054\nIs that what that's meant to do?\n\n377\n00:24:01.054 --> 00:24:05.952\n&gt;&gt; So I think a common pattern that a lot\nof people have is just like the teams,\n\n378\n00:24:05.952 --> 00:24:10.060\nwe have An array which maintains\norder as a list of arguments or\n\n379\n00:24:10.060 --> 00:24:12.830\na way to pass around multiple arguments.\n\n380\n00:24:12.830 --> 00:24:18.970\nI can have the number one, an object, and\nthen a name and I can pass those around.\n\n381\n00:24:18.970 --> 00:24:23.190\nBut as I pass those around, if I need\nto pass any one of those things, or\n\n382\n00:24:23.190 --> 00:24:28.670\nall three of them, into a function,\nthen how i have to go back and use\n\n383\n00:24:28.670 --> 00:24:32.230\nthat old way where I grab,oh, I need the\nfirst one here and the second one here.\n\n384\n00:24:32.230 --> 00:24:36.940\nAnd as long as they're ordered correctly,\nspread makes this a lot more readable,\n\n385\n00:24:36.940 --> 00:24:39.660\na lot faster to actually implement upon,\nbut\n\n386\n00:24:39.660 --> 00:24:44.340\ndo keep in mind that your mileage may vary\ndepending on your browser version, right?\n\n387\n00:24:44.340 --> 00:24:48.460\nIf you're an IE 8-\n&gt;&gt; And I know you are.\n\n388\n00:24:48.460 --> 00:24:54.860\n&gt;&gt; Yeah, yeah, I am a faithful\nuser of Internet Explorer 8.\n\n389\n00:24:54.860 --> 00:24:56.630\nThen this will not work.\n\n390\n00:24:56.630 --> 00:25:02.320\nThere are ways to dive into the internet\nand patch and and extend and\n\n391\n00:25:02.320 --> 00:25:07.990\ntry to get it work, but that's a lot\nof doing just to get a simple operator.\n\n392\n00:25:07.990 --> 00:25:13.070\n&gt;&gt; So if you're having to support legacy\nsystems you might have to use both ways?\n\n393\n00:25:13.070 --> 00:25:17.720\n&gt;&gt; Yes, yes and you need to know that as\nyou're developing any type of application.\n\n394\n00:25:17.720 --> 00:25:19.940\nWhat is my target, right?\n\n395\n00:25:19.940 --> 00:25:22.610\nIf my target's IE 6 you\nshould not do this.\n\n396\n00:25:23.860 --> 00:25:25.140\nSo you keep that in mind.\n\n397\n00:25:25.140 --> 00:25:27.000\nThese are newer browser implementations.\n\n398\n00:25:27.000 --> 00:25:29.900\nAs a matter of fact,\nnow that I've said that I'm pretty sure\n\n399\n00:25:29.900 --> 00:25:33.130\noperators like his cannot\nbe extended very easily.\n\n400\n00:25:33.130 --> 00:25:37.910\nYou'll have to have something that takes\nin your code and munches it up and\n\n401\n00:25:37.910 --> 00:25:41.680\nthen spits out old code that\ndoes the exact same thing.\n\n402\n00:25:41.680 --> 00:25:43.250\nAnd maybe that's a valid use case.\n\n403\n00:25:43.250 --> 00:25:48.590\nSo wow with that,\nI made a mention of about dates.\n\n404\n00:25:48.590 --> 00:25:51.800\nDates are a very common thing,\nwhere I have a year, month, and a day.\n\n405\n00:25:51.800 --> 00:25:54.560\nAnd I would need to pass those\nnumbers around kind of, but\n\n406\n00:25:54.560 --> 00:25:58.070\nthere's times where I need to\ndo like math on them, right.\n\n407\n00:25:58.070 --> 00:25:59.896\nI need to, I'll go one day.\n\n408\n00:25:59.896 --> 00:26:01.169\n[CROSSTALK]\n&gt;&gt; In the future, yeah, or whatever.\n\n409\n00:26:01.169 --> 00:26:05.190\n&gt;&gt; Right and there are ways to\ndo that with the date object.\n\n410\n00:26:05.190 --> 00:26:07.530\nBut they're not so friendly right?\n\n411\n00:26:07.530 --> 00:26:08.350\nI got to get the month.\n\n412\n00:26:08.350 --> 00:26:11.610\nI got to get the full year and\nthen I have to, it's a lot of work.\n\n413\n00:26:11.610 --> 00:26:16.220\nIt would almost be nice if I could have\nan array for those three arguments\n\n414\n00:26:16.220 --> 00:26:20.690\ndo what I need to and\nthen make a date on the fly as I need it.\n\n415\n00:26:20.690 --> 00:26:24.050\nAnd that's actually,\nlet's take a quick look at that and\n\n416\n00:26:24.050 --> 00:26:27.380\nsee how nice that makes the results so.\n\n417\n00:26:27.380 --> 00:26:35.070\nIf I say here's my date, and\nI'm not making a date object in this case.\n\n418\n00:26:35.070 --> 00:26:42.220\nI'm gonna say it is 2014,\nand four, and one, right.\n\n419\n00:26:42.220 --> 00:26:44.600\nSo that should be April 1st, 2014.\n\n420\n00:26:44.600 --> 00:26:46.830\nActually, we have to be careful here.\n\n421\n00:26:46.830 --> 00:26:51.180\nThat's the one caveat, gotta be careful\nabout those month and day things and\n\n422\n00:26:51.180 --> 00:26:55.060\nthe years because they have weird\nreferences but let's check it out.\n\n423\n00:26:55.060 --> 00:27:01.960\nIf I wanted to make a date object\nthen I could say new Date and\n\n424\n00:27:01.960 --> 00:27:08.390\nthis will take a year, month,\nday as arguments, dot dot dot date.\n\n425\n00:27:08.390 --> 00:27:12.790\nWow, well, that's a lot nicer than saying,\nwell, date, bracket,\n\n426\n00:27:12.790 --> 00:27:15.390\nzero, date, bracket,\none, date, bracket, two.\n\n427\n00:27:17.040 --> 00:27:20.480\nAnd let's see what results of that.\n\n428\n00:27:20.480 --> 00:27:22.140\nSo I'm gonna print out the date object.\n\n429\n00:27:22.140 --> 00:27:24.850\nBut I'm also gonna print\nout the date array.\n\n430\n00:27:25.910 --> 00:27:29.130\nAnd if we refresh notice\nthis says May 1st,\n\n431\n00:27:29.130 --> 00:27:32.960\nand that's because those\nmonths are offset, right?\n\n432\n00:27:32.960 --> 00:27:36.420\nThe month January is\nactually the zero month, so\n\n433\n00:27:36.420 --> 00:27:41.820\nfour would be May instead of April but\nhere we go.\n\n434\n00:27:41.820 --> 00:27:43.180\nThis is a lot nicer to read.\n\n435\n00:27:43.180 --> 00:27:45.410\nOkay, if I know the structure is year,\nmonth,\n\n436\n00:27:45.410 --> 00:27:49.910\nday, as long as I keep in mind\nthat the month is off by one.\n\n437\n00:27:49.910 --> 00:27:53.770\nThen any time I need to make a date,\nI can just quickly spread into the new\n\n438\n00:27:53.770 --> 00:27:58.360\ndate operation, create a new date\nobject for that instance, and I'm done.\n\n439\n00:27:58.360 --> 00:28:02.780\nBut I don't have to carry around this,\nand remember all of those date methods.\n\n440\n00:28:02.780 --> 00:28:07.410\nGet year gives you the number of\nyears that have passed since 1900,\n\n441\n00:28:07.410 --> 00:28:10.250\nget full year actually gives you 2014.\n\n442\n00:28:10.250 --> 00:28:12.870\nSo you go what?\n\n443\n00:28:12.870 --> 00:28:15.720\nSo I recommend looking\ninto things like this.\n\n444\n00:28:15.720 --> 00:28:16.800\nIt's incredibly powerful.\n\n445\n00:28:18.030 --> 00:28:23.330\nSo Daniel, those are typically our two\nuse cases for the rest and the spread.\n\n446\n00:28:23.330 --> 00:28:24.640\nI can pull things and\n\n447\n00:28:24.640 --> 00:28:29.270\nkeep things kind of gathered together\nusing the rest during array destructuring.\n\n448\n00:28:30.680 --> 00:28:33.590\nAnd then I can spread things\nout into functions or\n\n449\n00:28:33.590 --> 00:28:39.110\ninto a destructuring operator for\ncreating new arrays.\n\n450\n00:28:39.110 --> 00:28:42.410\nBut there's one other thing\nthat I want to mention.\n\n451\n00:28:42.410 --> 00:28:43.850\nIn Mozilla Firefox,\n\n452\n00:28:43.850 --> 00:28:47.620\nthere are certain versions that\nallow you to do this with objects.\n\n453\n00:28:47.620 --> 00:28:50.430\nAnd do weird things with objects\nwith the spread operator.\n\n454\n00:28:50.430 --> 00:28:54.630\nThose are not universally supported,\nso if you see code that uses those.\n\n455\n00:28:54.630 --> 00:29:00.140\nJust be aware that that is definitely\na mileage may vary kind of issue.\n\n456\n00:29:00.140 --> 00:29:01.430\n&gt;&gt; All right well Justin,\n\n457\n00:29:01.430 --> 00:29:04.950\ninteresting little operations that we\ngot going on here with spread and rest.\n\n458\n00:29:04.950 --> 00:29:09.550\nI like the way you showed us how\nwe could take the old way and\n\n459\n00:29:09.550 --> 00:29:11.010\nuse these as the new way.\n\n460\n00:29:11.010 --> 00:29:14.220\nAnd if you have to possibly go back and\nsupport an older browser or\n\n461\n00:29:14.220 --> 00:29:18.750\nwhatever, you still have the good\nold system of methodology.\n\n462\n00:29:18.750 --> 00:29:21.700\nBut here we now have a much easier\nto read, much easier to use,\n\n463\n00:29:21.700 --> 00:29:24.650\nmuch easier to implement way to\ndo that using spread and rest.\n\n464\n00:29:24.650 --> 00:29:25.890\nSo we thank you for that.\n\n465\n00:29:25.890 --> 00:29:29.300\nWe thank you guys for watching but it does\nlook like our time for today has allotted,\n\n466\n00:29:29.300 --> 00:29:32.150\nor at least for this episode, so\nwe're gonna go ahead and sign off.\n\n467\n00:29:32.150 --> 00:29:34.580\nFor ITProTV I've been\nyour host Daniel Lowry.\n\n468\n00:29:34.580 --> 00:29:35.400\n&gt;&gt; And I'm Justin Dennison.\n\n469\n00:29:35.400 --> 00:29:40.946\n&gt;&gt; And we'll see you next time.\n\n470\n00:29:40.946 --> 00:29:44.100\n[MUSIC].\n\n471\n00:29:44.100 --> 00:29:46.125\n&gt;&gt; Thank you for watching IT Pro TV.\n\n",
          "vimeoId": "204916111"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at Iterators and the new For...Of loop function in ES6. They start by defining an Iterator and reviewing the different types of Iterators found in ES6. Then they show you how to employ the new For...Of function to loop through Iterables.",
          "length": "2200",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-9-1-iterators_and_the_for...of_loops-021017-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-9-1-iterators_and_the_for...of_loops-021017-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-9-1-iterators_and_the_for...of_loops-021017-1-sm.jpg",
          "title": "Iterators and the for...of Loop",
          "transcript": "WEBVTT\n\n1\n00:00:01.190 --> 00:00:02.686\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.686 --> 00:00:06.786\n[CROSSTALK]\n\n3\n00:00:06.786 --> 00:00:08.542\n[MUSIC]\n\n4\n00:00:08.542 --> 00:00:12.360\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.360 --> 00:00:13.810\n&gt;&gt; All right, greetings, everyone.\n\n6\n00:00:13.810 --> 00:00:16.880\nAnd welcome to another\ngreat episode of ITProTV.\n\n7\n00:00:16.880 --> 00:00:19.520\nI'm your host Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.520 --> 00:00:24.440\nwe are coming back at you with more\non our what's new in ESX6, or ESX,\n\n9\n00:00:24.440 --> 00:00:29.350\nES6, I'm getting my virtualization and\nmy coding all slammed across each other.\n\n10\n00:00:29.350 --> 00:00:32.162\nAnd of course, joining me back in\nthe studio to help straighten me\n\n11\n00:00:32.162 --> 00:00:32.690\nout-\n&gt;&gt; [LAUGH]\n\n12\n00:00:32.690 --> 00:00:35.080\n&gt;&gt; Our good friend, Mr. Justin Dennison.\n\n13\n00:00:35.080 --> 00:00:35.648\nJustin, how's it going?\n\n14\n00:00:35.648 --> 00:00:37.080\n&gt;&gt; [LAUGH] It's going fairly well.\n\n15\n00:00:37.080 --> 00:00:37.850\nYou all right?\n\n16\n00:00:37.850 --> 00:00:38.606\n&gt;&gt; I'm gonna make it.\n\n17\n00:00:38.606 --> 00:00:39.771\n[LAUGH]\n&gt;&gt; All right.\n\n18\n00:00:39.771 --> 00:00:41.209\nSo yeah, ES6.\n\n19\n00:00:41.209 --> 00:00:42.887\nWe've seen some wonderful new features.\n\n20\n00:00:42.887 --> 00:00:50.270\nBut along with ES6, we had this spread and\nall these new dot values on arrays.\n\n21\n00:00:50.270 --> 00:00:51.920\nAnd actually what these are,\n\n22\n00:00:51.920 --> 00:00:56.040\nare the iterator protocol,\na new set of things called iterables\n\n23\n00:00:56.040 --> 00:00:59.820\nthat have kind of expanded to anything\nthat you could use on a for loop.\n\n24\n00:00:59.820 --> 00:01:01.670\nSo what is an iterable?\n\n25\n00:01:01.670 --> 00:01:05.770\nWell, for the most part, if you can\nuse a for loop on it, it is iterable.\n\n26\n00:01:05.770 --> 00:01:06.930\nAnd now it's a little more specific,\n\n27\n00:01:06.930 --> 00:01:09.780\nas we'll see in just a moment,\nbut what are some examples?\n\n28\n00:01:09.780 --> 00:01:14.700\nWell, node list from grabbing things\nout of HTML files, arrays, strings,\n\n29\n00:01:14.700 --> 00:01:19.242\nthese new things called sets,\nthese other new things called maps, and\n\n30\n00:01:19.242 --> 00:01:21.758\nwe'll talk more in depth about those.\n\n31\n00:01:21.758 --> 00:01:24.160\n&gt;&gt; What about objects,\nare they iterables as well?\n\n32\n00:01:24.160 --> 00:01:27.620\n&gt;&gt; Yeah, so objects,\nit would seem like they're iterable.\n\n33\n00:01:27.620 --> 00:01:33.680\nBut there's like this special for\nloop, as we'll see, that works kinda.\n\n34\n00:01:33.680 --> 00:01:37.520\nBut how can we see if things\nactually are iterable?\n\n35\n00:01:37.520 --> 00:01:42.010\nAnd I think the best way is to do\na little bit of inspection in Chrome, and\n\n36\n00:01:42.010 --> 00:01:47.540\nlearn how to find those iterable things\nusing this new iterator protocol.\n\n37\n00:01:47.540 --> 00:01:49.710\nSo let's go ahead and\nhop into our browser,\n\n38\n00:01:49.710 --> 00:01:52.141\nget things kind of squared away,\nset up here.\n\n39\n00:01:53.170 --> 00:01:57.880\nSo I'm gonna open my index.html,\nas I love to do.\n\n40\n00:01:57.880 --> 00:02:00.392\nAnd I have these iterables.\n\n41\n00:02:02.423 --> 00:02:05.840\nAnd there's my index.html, and\nI'm opening the dev tools.\n\n42\n00:02:05.840 --> 00:02:09.150\nAgain, as a reminder,\nmore tools, developer tools,\n\n43\n00:02:09.150 --> 00:02:12.360\nI like the keyboard shortcut,\nI live in dev tools.\n\n44\n00:02:12.360 --> 00:02:15.072\nChrome dev tools are like\na second home to me.\n\n45\n00:02:15.072 --> 00:02:16.350\nI like them.\n\n46\n00:02:16.350 --> 00:02:17.720\nThey're handy.\n\n47\n00:02:17.720 --> 00:02:23.784\nThen I'm gonna hop into\nmy Atom text editor and\n\n48\n00:02:23.784 --> 00:02:29.090\nopen my project folder, index.html.\n\n49\n00:02:29.090 --> 00:02:31.950\nThere's some hidden stuff here\nwe will play around with later.\n\n50\n00:02:33.720 --> 00:02:36.455\nAnd then in my app.js, we're ready to go.\n\n51\n00:02:36.455 --> 00:02:41.410\nSo how do I know if something's\nan iterator or an iterable?\n\n52\n00:02:41.410 --> 00:02:46.660\nAnd what is the difference between being\niterable and being an actual iterator?\n\n53\n00:02:46.660 --> 00:02:52.870\nWell, an iterator is a protocol,\na way to iterate or become iterable.\n\n54\n00:02:52.870 --> 00:02:57.750\nSo let's just look at a very\nsimple iterable, namely an array.\n\n55\n00:02:57.750 --> 00:03:00.390\nSo let's look at an example.\n\n56\n00:03:00.390 --> 00:03:02.405\nAnd this is just an array.\n\n57\n00:03:02.405 --> 00:03:07.920\nAnd I'm just gonna use this for a little\nbit of investigative purposes here.\n\n58\n00:03:07.920 --> 00:03:10.080\nWe're gonna go investigate.\n\n59\n00:03:11.270 --> 00:03:13.130\nSo if I refresh, it's just an empty array.\n\n60\n00:03:13.130 --> 00:03:16.630\nIt looks like some of the other\narrays you may have seen before.\n\n61\n00:03:16.630 --> 00:03:21.620\nAnd if I drop it down, okay, but\nthen if you drop this down, okay,\n\n62\n00:03:22.630 --> 00:03:28.325\nif I scroll down, right down here,\nany time you see this\n\n63\n00:03:28.325 --> 00:03:34.560\n.iterater thing, then it is\nadhering to the iterator protocol.\n\n64\n00:03:34.560 --> 00:03:37.610\nAnd that means that I can iterate\nover it using a for loop.\n\n65\n00:03:37.610 --> 00:03:39.100\nI can also use the spread and\n\n66\n00:03:39.100 --> 00:03:44.660\nrest operators to kind of pull\nit apart and put it in an array.\n\n67\n00:03:44.660 --> 00:03:47.820\n&gt;&gt; We saw that symbol down at iterator\nback when we were taking a look at that\n\n68\n00:03:47.820 --> 00:03:50.680\nweird bug in Chrome, right?\n\n69\n00:03:50.680 --> 00:03:54.942\n&gt;&gt; Yeah, yeah.\nSo the symbol is actually new to ES6, and\n\n70\n00:03:54.942 --> 00:04:00.613\nit was a way to provide absolute\nuniqueness to something.\n\n71\n00:04:00.613 --> 00:04:03.890\nLike the symbol.iterator\nis absolutely unique.\n\n72\n00:04:03.890 --> 00:04:08.307\nI could call symbol.iterator and create\na new thing called symbol.iterator, and\n\n73\n00:04:08.307 --> 00:04:09.749\nthey would not be the same.\n\n74\n00:04:09.749 --> 00:04:12.670\nIt is an absolute unique look up key.\n\n75\n00:04:12.670 --> 00:04:16.860\nIt's kind of like if you have a hash\nin a file, or the hash of a file.\n\n76\n00:04:16.860 --> 00:04:18.310\nIt is absolutely unique, and\n\n77\n00:04:18.310 --> 00:04:21.490\nif you change anything about the file,\nthen that hash changes.\n\n78\n00:04:21.490 --> 00:04:25.750\nSo it's a great way to get uniqueness,\nand you can actually create symbols.\n\n79\n00:04:25.750 --> 00:04:26.899\nI should probably clear this.\n\n80\n00:04:26.899 --> 00:04:28.800\nLet's just refresh.\n\n81\n00:04:29.980 --> 00:04:36.327\nClear, and if I type symbol, symbol\nis implemented in most new browsers.\n\n82\n00:04:36.327 --> 00:04:39.920\nBut it's kinda weird because\nthey just make a symbol.\n\n83\n00:04:39.920 --> 00:04:42.380\nAnd a symbol is great for\na unique look up.\n\n84\n00:04:42.380 --> 00:04:46.210\nIf I type Symbol a, but\nI'm just giving it a name.\n\n85\n00:04:46.210 --> 00:04:49.881\nEquals Symbol a.\n\n86\n00:04:54.522 --> 00:04:57.533\nThese look to be the same but\nin fact they are not,\n\n87\n00:04:57.533 --> 00:05:00.324\nbecause behind the scenes what it's doing,\n\n88\n00:05:00.324 --> 00:05:05.440\nis it's effectively generating a new\nhash that is guaranteed to be unique.\n\n89\n00:05:05.440 --> 00:05:09.089\nThe a is just a name for you to do it.\n\n90\n00:05:09.089 --> 00:05:09.642\n&gt;&gt; Remember it by.\n\n91\n00:05:09.642 --> 00:05:11.511\n&gt;&gt; Yeah, it's Symbol a, what is it?\n\n92\n00:05:11.511 --> 00:05:15.927\nIt's actually 487Q8492!777.\n\n93\n00:05:15.927 --> 00:05:18.510\nYou're like, I'm gonna call it A.\n\n94\n00:05:18.510 --> 00:05:19.592\nI'm gonna go with A.\n\n95\n00:05:19.592 --> 00:05:24.640\nSo symbol.iterator is very much a way,\nlike it can look up the symbol.iterator\n\n96\n00:05:24.640 --> 00:05:28.800\nproperty, and by doing so\nit is adhering to the iterator protocol.\n\n97\n00:05:28.800 --> 00:05:29.925\nNow what does that mean?\n\n98\n00:05:31.165 --> 00:05:36.625\nWell, I think it's best to just take a\nlook at a couple of iterables that conform\n\n99\n00:05:36.625 --> 00:05:41.255\nto this iterator protocol and talk about\nwhat's actually being provided to us.\n\n100\n00:05:41.255 --> 00:05:47.437\nSo using this array example,\nI'm gonna go 1, 2, 3, 4.\n\n101\n00:05:47.437 --> 00:05:53.000\nAnd I'm actually gonna create\na string just called letters.\n\n102\n00:05:53.000 --> 00:05:54.675\nOur good old letters string.\n\n103\n00:05:54.675 --> 00:05:55.930\n&gt;&gt; It's the best string, ever.\n\n104\n00:05:55.930 --> 00:05:59.020\n&gt;&gt; I know,\nit's an incredibly original example.\n\n105\n00:05:59.020 --> 00:06:01.353\nI mean, it took me a lot of\ntime to think about this one.\n\n106\n00:06:01.353 --> 00:06:02.360\n&gt;&gt; And it's so practical.\n\n107\n00:06:02.360 --> 00:06:04.170\n&gt;&gt; Yeah, it is, it is, but I do like that.\n\n108\n00:06:04.170 --> 00:06:05.590\nThat is one of the reasons that I pick it.\n\n109\n00:06:05.590 --> 00:06:09.320\nBecause they're like, a,\nb, c, d, e, f, got it.\n\n110\n00:06:09.320 --> 00:06:11.760\nGot it, one, two, three,\nfour, five, got it.\n\n111\n00:06:11.760 --> 00:06:16.120\nSo I could just print those out, but\nwhat I like to do is take a look.\n\n112\n00:06:16.120 --> 00:06:18.770\nLet's take a look at\nthis example array first.\n\n113\n00:06:20.080 --> 00:06:26.810\nAnd I'm gonna create what's called\nan iterator, and I call it Iter.\n\n114\n00:06:26.810 --> 00:06:29.510\nThat is a common term I will tell you that\n\n115\n00:06:29.510 --> 00:06:33.660\nnaming convention has come over\nfrom some of my Python days.\n\n116\n00:06:33.660 --> 00:06:36.640\nSo Iter is all over the place there.\n\n117\n00:06:36.640 --> 00:06:38.000\nAnd I'm gonna say example.\n\n118\n00:06:39.200 --> 00:06:46.180\nAnd when we looked at that\nweird bug in Chrome, Right?\n\n119\n00:06:46.180 --> 00:06:52.200\nAnd just as a reminder that was another\nepisode about new array values and\n\n120\n00:06:52.200 --> 00:06:54.650\nnew array methods in ES6.\n\n121\n00:06:54.650 --> 00:06:56.520\nSo definitely check that\nout if you haven't seen it.\n\n122\n00:06:57.680 --> 00:06:59.540\nI can use the symbol.iterator and\n\n123\n00:06:59.540 --> 00:07:03.640\nthen parentheses because this actually\nlooks up a function that I need to run.\n\n124\n00:07:03.640 --> 00:07:07.250\nSo this is going to return a function.\n\n125\n00:07:07.250 --> 00:07:08.660\nAnd when I put parentheses after it,\n\n126\n00:07:08.660 --> 00:07:13.040\nit's gonna run the function which\nspits out this iterator thing.\n\n127\n00:07:13.040 --> 00:07:16.358\nOkay, so let's look at what this is.\n\n128\n00:07:20.917 --> 00:07:25.880\nAnd if I refreshed, I actually see\nthat it's called an Array Iterator.\n\n129\n00:07:25.880 --> 00:07:32.140\nIf I inspect it, well, okay,\nit doesn't have a lot to it.\n\n130\n00:07:32.140 --> 00:07:33.636\nSo an array iterator.\n\n131\n00:07:33.636 --> 00:07:37.910\nThe __proto is like what\nit prototypically is.\n\n132\n00:07:37.910 --> 00:07:40.820\nIf it has a different name,\nthis is what it behaves like.\n\n133\n00:07:40.820 --> 00:07:45.830\nWell, at top level it's an array iterator\nand its prototype is an array iterator.\n\n134\n00:07:45.830 --> 00:07:53.055\nIt has a next method, and\nit has a symbol.toString tag.\n\n135\n00:07:53.055 --> 00:07:54.982\nThis is not actually necessary.\n\n136\n00:07:54.982 --> 00:07:57.974\nThe only thing necessary in order to have\n\n137\n00:07:57.974 --> 00:08:03.380\nan iterator Is a next method that\nprovides some way to iterate.\n\n138\n00:08:03.380 --> 00:08:05.310\nNow next shouldn't be certain things and\n\n139\n00:08:05.310 --> 00:08:09.200\nwe'll actually develop an iterator from\nscratch to see how these kinda work.\n\n140\n00:08:10.670 --> 00:08:14.650\nBut I have this iterator and that means\nthat I should be able to call next on it.\n\n141\n00:08:14.650 --> 00:08:19.330\nSo we're actually gonna do that and\nI'm gonna call next and\n\n142\n00:08:19.330 --> 00:08:22.350\nI refresh and I will get an object back.\n\n143\n00:08:22.350 --> 00:08:29.070\nThe object contains two things,\na value and this done tag, done false.\n\n144\n00:08:29.070 --> 00:08:33.080\nIf I go back and look at my example,\nnotice this is one,\n\n145\n00:08:33.080 --> 00:08:37.810\nwell value one,\nam I done iterating over the array?\n\n146\n00:08:37.810 --> 00:08:41.200\nNo, well, if that's the case,\nwhat happens if I go whee!\n\n147\n00:08:42.490 --> 00:08:46.225\nAnd just duplicate,\nwell that's Cmd+Shift+D, or\n\n148\n00:08:46.225 --> 00:08:49.290\nCtrl+Shift+D for you Windows users.\n\n149\n00:08:49.290 --> 00:08:53.350\nIt's a really handy, it just duplicates\nthat block, next line, so I'm just gonna\n\n150\n00:08:53.350 --> 00:08:58.560\ngo through this a bunch of times, and\nnow that iterator has called next.\n\n151\n00:08:58.560 --> 00:09:00.070\nSo, one am I done?\n\n152\n00:09:00.070 --> 00:09:01.630\nNope, two am I done?\n\n153\n00:09:01.630 --> 00:09:03.400\nNope, three am I done?\n\n154\n00:09:03.400 --> 00:09:05.000\nNope, four am I done?\n\n155\n00:09:05.000 --> 00:09:07.600\nNope, and then value undefined.\n\n156\n00:09:07.600 --> 00:09:11.860\nIs there anything left after\nfour in the example array?\n\n157\n00:09:11.860 --> 00:09:14.170\n&gt;&gt; It's like an interesting, weird loop.\n\n158\n00:09:14.170 --> 00:09:17.160\n&gt;&gt; Yeah, yeah it's, Daniel,\n\n159\n00:09:17.160 --> 00:09:20.585\nDaniel, it's like you're seeing\nthe future and it's kinda scary.\n\n160\n00:09:20.585 --> 00:09:23.390\n&gt;&gt; [LAUGH]\n&gt;&gt; So if I call next a bunch of times,\n\n161\n00:09:23.390 --> 00:09:29.470\nI will eventually exhaust the iterator\nwhen I get done true, that's a flag to me.\n\n162\n00:09:29.470 --> 00:09:31.040\nHey, there's nothing else to iterate.\n\n163\n00:09:31.040 --> 00:09:35.450\nI'll continue giving you these\nobjects that have value and\n\n164\n00:09:35.450 --> 00:09:40.070\ndone But there is nothing else\nto talk about coz I'm done.\n\n165\n00:09:40.070 --> 00:09:42.450\nNow if you notice if we\nlook at this example\n\n166\n00:09:43.730 --> 00:09:48.830\nvalue then becomes undefined because\nit's like a word done we don't need.\n\n167\n00:09:48.830 --> 00:09:49.780\n&gt;&gt; We don't need any more values.\n\n168\n00:09:49.780 --> 00:09:54.526\n&gt;&gt; No more, so that's hardy well\narrays I can use a loop I can iterate\n\n169\n00:09:54.526 --> 00:09:56.695\nyeah that kind of make sense.\n\n170\n00:09:56.695 --> 00:10:02.125\nBut if I look at letters, let just\nput this out if sight out of mind for\n\n171\n00:10:02.125 --> 00:10:05.284\na moment, and let's look at letters.\n\n172\n00:10:05.284 --> 00:10:10.333\nConsole.log, and\nhere it's where it gets a little weird,\n\n173\n00:10:10.333 --> 00:10:13.204\nletters because this is a string,\n\n174\n00:10:13.204 --> 00:10:19.150\nthat's all it prints out notice there\nis no drop down I can't inspect.\n\n175\n00:10:19.150 --> 00:10:25.314\nHow would I possibly know if this adheres\nto the iterator protocol, I don't know,\n\n176\n00:10:25.314 --> 00:10:31.051\nwhat if change this to console.dir which\nyou may or may not have seen before.\n\n177\n00:10:31.051 --> 00:10:34.910\nAnd sometimes this provides\na little bit extra information and\n\n178\n00:10:34.910 --> 00:10:39.444\nif we take a look in our console,\nby changing that to console.dir, dir.\n\n179\n00:10:39.444 --> 00:10:44.182\nI typically think of that as being\ndirectory, in this case it's kind of like\n\n180\n00:10:44.182 --> 00:10:47.600\nwhat is the expanded view\nthe tree view of this object.\n\n181\n00:10:48.850 --> 00:10:53.540\nNotice that that provides me now with\nthat drop down that I'm used to but\n\n182\n00:10:53.540 --> 00:10:55.430\nit doesn't give me anything else.\n\n183\n00:10:55.430 --> 00:10:59.020\nAnd that's because string is one of those\nspecial types that kind of just outputs\n\n184\n00:10:59.020 --> 00:11:04.780\nits own value, so, how would I know if\nthis adheres to the iterator protocol?\n\n185\n00:11:04.780 --> 00:11:09.520\nWell, I always check\nthe documentation using MDN and\n\n186\n00:11:10.800 --> 00:11:15.119\nI look at Javascript MDN string and\nthis will actually bring me to the string\n\n187\n00:11:17.600 --> 00:11:22.250\nobject page, and I click, and wait for it.\n\n188\n00:11:22.250 --> 00:11:26.072\n&gt;&gt; It's swears it's gonna do it.\n\n189\n00:11:26.072 --> 00:11:30.563\n&gt;&gt; Yeah, it is, well we got some\n\n190\n00:11:30.563 --> 00:11:34.878\nweird formatting stuff, so\n\n191\n00:11:34.878 --> 00:11:40.630\nlet's just search anyway if I look for\n\n192\n00:11:40.630 --> 00:11:47.102\nmethods and scroll down to the prototype,\n\n193\n00:11:47.102 --> 00:11:51.980\nlet me zoom in here a little bit.\n\n194\n00:11:56.605 --> 00:12:00.106\n[SOUND] See this string\nprototype at at iterator?\n\n195\n00:12:00.106 --> 00:12:03.759\nThat's actually a representation\nof symbol.iterator, so\n\n196\n00:12:03.759 --> 00:12:07.430\nsymbol.iterator is\nthe representation of that thing.\n\n197\n00:12:07.430 --> 00:12:13.370\nThat means that string adheres to\nthe iterator protocol, so can we use it?\n\n198\n00:12:13.370 --> 00:12:16.990\n&gt;&gt; Now usually the MDN pages\nare lot nicer to style and\n\n199\n00:12:16.990 --> 00:12:19.910\neasier to navigate but\nyou have to be resourceful.\n\n200\n00:12:19.910 --> 00:12:23.550\nThat's part of programming you\ngotta roll with the punches.\n\n201\n00:12:23.550 --> 00:12:28.960\nSo, let's hop over and see if strings\nhave that symbol dot ieterator just like\n\n202\n00:12:28.960 --> 00:12:34.550\nwe expected with or\njust as we've seen with example.\n\n203\n00:12:34.550 --> 00:12:40.160\nSo I'm gonna create a strIter and that's\n\n204\n00:12:41.460 --> 00:12:47.110\ngoing to be letters[Symbol.Iterator]\n\n205\n00:12:47.110 --> 00:12:49.659\njust as we used before and\nagain it's parenthesis.\n\n206\n00:12:51.150 --> 00:12:55.680\nThere we go, parentheses because\nI'm calling a function which\n\n207\n00:12:55.680 --> 00:12:57.190\nwill return the new iterator.\n\n208\n00:12:58.630 --> 00:13:04.600\nAnd then, just like we did before, let's\nconsole dot log string iter dot next.\n\n209\n00:13:06.440 --> 00:13:09.830\nNow Daniel, if, if you will\n\n210\n00:13:09.830 --> 00:13:13.450\nwhat do you think's actually gonna be\nprinted out based on what we've just seen?\n\n211\n00:13:13.450 --> 00:13:14.701\nYou have any ideas?\n\n212\n00:13:14.701 --> 00:13:18.884\n&gt;&gt; I'm guessing it's going to give me\na list of each letter in the string of\n\n213\n00:13:18.884 --> 00:13:21.390\nletters you've given us.\n\n214\n00:13:21.390 --> 00:13:24.572\n&gt;&gt; I think that's a very reasonable\nassertion but it's wrong, isn't it?\n\n215\n00:13:24.572 --> 00:13:25.571\n&gt;&gt; I don't know, we'll see.\n\n216\n00:13:25.571 --> 00:13:28.162\n&gt;&gt; [LAUGH]\n&gt;&gt; We'll see, I'm a big proponent of,\n\n217\n00:13:28.162 --> 00:13:28.910\nlet's find out.\n\n218\n00:13:28.910 --> 00:13:29.640\n&gt;&gt; Let's give it a shot.\n\n219\n00:13:29.640 --> 00:13:32.580\n&gt;&gt; Well, you're absolutely correct.\n\n220\n00:13:32.580 --> 00:13:35.260\nYou said, and it's gonna give\nme each letter at a time and\n\n221\n00:13:35.260 --> 00:13:36.840\nit in fact, is going to give me that.\n\n222\n00:13:36.840 --> 00:13:41.560\nAnd if I continue duplicating\nthat call to .next, and\n\n223\n00:13:41.560 --> 00:13:47.800\nI actually save, then I can refresh and\nwe see, this is very reproducible.\n\n224\n00:13:47.800 --> 00:13:52.060\nIt behaves the same regardless\nof whatever iterable it is.\n\n225\n00:13:52.060 --> 00:13:57.940\nThe value is first a, well that's\nthe first letter in the string, am I done?\n\n226\n00:13:57.940 --> 00:14:02.650\nNo, b, no, c, no, all the way down,\n\n227\n00:14:02.650 --> 00:14:06.860\nand then notice I get undefined,\nso I can exhaust this iterator.\n\n228\n00:14:06.860 --> 00:14:10.790\nNow you may be thinking to yourself,\nwell, why would I call next?\n\n229\n00:14:12.700 --> 00:14:14.261\nThat's a good question.\n\n230\n00:14:14.261 --> 00:14:19.159\nOne way that I think of this is if I wanna\ncall next, if I wanna use an array or\n\n231\n00:14:19.159 --> 00:14:20.674\na string like a queue.\n\n232\n00:14:20.674 --> 00:14:22.748\nIf I wanna pull off the front, and\n\n233\n00:14:22.748 --> 00:14:25.840\nactually an array would be better for\na cue.\n\n234\n00:14:25.840 --> 00:14:29.010\nA string would be a fixed cue,\nthere's no way to push from the back.\n\n235\n00:14:29.010 --> 00:14:32.810\nBut if I just wanna pull from\nthe front a little chunk at a time,\n\n236\n00:14:32.810 --> 00:14:35.525\nthen I can call next,\nand as I consume that.\n\n237\n00:14:35.525 --> 00:14:38.406\nI can use that as a, a,\na cue data structure, or\n\n238\n00:14:38.406 --> 00:14:41.950\nI'm just pulling one object at a time and\nputting them in.\n\n239\n00:14:41.950 --> 00:14:45.240\nNow with an array,\nI can actually push on the, the end and\n\n240\n00:14:45.240 --> 00:14:48.260\nkeep popping off and\njust use that as kind of like a channel.\n\n241\n00:14:48.260 --> 00:14:50.215\nLike, I think of it as Mario pipes, right?\n\n242\n00:14:50.215 --> 00:14:55.490\n[SOUND] So, think of it that way,\nstrings are gonna be fixed.\n\n243\n00:14:55.490 --> 00:15:01.080\nBut in general, I'm not gonna be calling\nnext a great deal and copying and pasting.\n\n244\n00:15:01.080 --> 00:15:01.585\nCopying and pasting?\n\n245\n00:15:01.585 --> 00:15:04.696\nMm-hm, should always feel iffy about that,\n\n246\n00:15:04.696 --> 00:15:09.090\nit's like I should be able to\niterate over and iterater, right?\n\n247\n00:15:09.090 --> 00:15:13.289\nI should be able to iterate a loop\nlike consumes this iterater and\n\n248\n00:15:13.289 --> 00:15:17.277\nin fact in AS6, there's a new\nloop called the for off loop.\n\n249\n00:15:17.277 --> 00:15:21.774\nAnd it's kind of a weird syntax but\nI think it's better to take a step back\n\n250\n00:15:21.774 --> 00:15:27.031\nbecause there's another loop that says for\nin Inverses of very subtle difference.\n\n251\n00:15:27.031 --> 00:15:31.966\nBut doesn't always behave\nin the nicest way and\n\n252\n00:15:31.966 --> 00:15:36.700\nactually was made for\nlooping over objects.\n\n253\n00:15:36.700 --> 00:15:39.440\nBut I said,\nobjects weren't iteratable, well,\n\n254\n00:15:39.440 --> 00:15:44.650\nit was actually looping over the keys of\nthe objects, so just the property names.\n\n255\n00:15:44.650 --> 00:15:48.506\nBut as a result, if you use it on other\ndata structures, it does some weird stuff.\n\n256\n00:15:48.506 --> 00:15:52.927\nSo let's go ahead and\ntake a look at how that behaves, so\n\n257\n00:15:52.927 --> 00:15:58.115\nwe can see what kind of pain point the for\nof loop is solving for us.\n\n258\n00:15:58.115 --> 00:16:02.408\nSo I'm going to keep these just\nout of sight, out of mind.\n\n259\n00:16:02.408 --> 00:16:08.388\nHop back up here and\nlook at this example array, okay.\n\n260\n00:16:08.388 --> 00:16:09.386\nSo if I say for, and\n\n261\n00:16:09.386 --> 00:16:12.702\nI'm gonna use let because I need\nthis to be able to be resigned.\n\n262\n00:16:12.702 --> 00:16:17.300\nI can't use constal, lock it in place and\nthen I'll get an error.\n\n263\n00:16:17.300 --> 00:16:22.568\nSo if I say element in example,\n\n264\n00:16:22.568 --> 00:16:26.920\nso for [let element in.\n\n265\n00:16:26.920 --> 00:16:27.840\nNotice this is an in.\n\n266\n00:16:27.840 --> 00:16:33.089\nThis is doing something weird\n\n267\n00:16:36.704 --> 00:16:39.160\nOr you can think of it as I\nshouldn't do this with arrays.\n\n268\n00:16:39.160 --> 00:16:42.250\nThe actual recommendation is do\nnot use this loop on arrays.\n\n269\n00:16:43.572 --> 00:16:46.520\nSo let's take a look at\nwhat this prints out.\n\n270\n00:16:50.456 --> 00:16:55.450\nWell, hm, that's weird.\n\n271\n00:16:55.450 --> 00:17:01.480\n1, 2, 3, 4,\nwhy's it printing out 0, 1, 2, 3?\n\n272\n00:17:01.480 --> 00:17:03.990\n&gt;&gt; Is it the indexing?\n\n273\n00:17:03.990 --> 00:17:06.350\n&gt;&gt; There you go Daniel.\n\n274\n00:17:06.350 --> 00:17:10.070\nDaniel's thinking,\nhe's processing this and makes me happy.\n\n275\n00:17:10.070 --> 00:17:15.210\nActually, behind the scenes, the index,\nthe zero, one, two, three, right?\n\n276\n00:17:15.210 --> 00:17:20.350\nZero, one, two, three is considered\nthe key for that element.\n\n277\n00:17:20.350 --> 00:17:22.370\nIt kind of makes it behave like an object.\n\n278\n00:17:23.680 --> 00:17:26.190\nSo this is still looping over the keys.\n\n279\n00:17:26.190 --> 00:17:31.240\nSo it's not actually the element,\nit is the key within that.\n\n280\n00:17:31.240 --> 00:17:34.545\nNow, if I use this with an object,\nlike a user object, as such.\n\n281\n00:17:34.545 --> 00:17:39.781\nSo name, Tony,\n\n282\n00:17:39.781 --> 00:17:45.018\nand age, 31.\n\n283\n00:17:45.018 --> 00:17:49.748\nIf I change this now to user\nI would get name and age, so\n\n284\n00:17:49.748 --> 00:17:54.035\nit would actually iterate\nthrough the keys.\n\n285\n00:17:54.035 --> 00:17:56.130\nBut that's kind of weird.\n\n286\n00:17:56.130 --> 00:17:58.590\nMaybe there's a valid use case for that.\n\n287\n00:17:58.590 --> 00:18:02.165\nAs I said,\nthe recommendation is don't do that.\n\n288\n00:18:02.165 --> 00:18:05.159\nBut I can actually do some pretty\ncrazy stuff in JavaScript.\n\n289\n00:18:05.159 --> 00:18:11.575\nI can say example.name =- Tony.\n\n290\n00:18:11.575 --> 00:18:19.240\nWell I just attached a new property to\nan array, which is not anticipated.\n\n291\n00:18:19.240 --> 00:18:24.562\nAnd if I take this exact same loop, And\n\n292\n00:18:24.562 --> 00:18:26.919\nI run it again right after\nI attach that property.\n\n293\n00:18:27.980 --> 00:18:30.460\nWe'll see, okay, there's the first loop.\n\n294\n00:18:30.460 --> 00:18:32.020\nThere's the, well,\n\n295\n00:18:32.020 --> 00:18:35.670\nthat's got a name property now and\nI didn't actually anticipate that.\n\n296\n00:18:35.670 --> 00:18:38.230\nAnd somehow my app just broke.\n\n297\n00:18:38.230 --> 00:18:41.980\nSo that's why you shouldn't use the for\n\n298\n00:18:41.980 --> 00:18:46.190\nin loop on arrays, not to mention that\nyou're actually getting the indexes.\n\n299\n00:18:47.360 --> 00:18:53.288\nWhat would be better is if I could get\nthe individual elements out of the array.\n\n300\n00:18:53.288 --> 00:18:57.670\nAnd I didn't have to worry about\nthose possible added on properties.\n\n301\n00:18:57.670 --> 00:19:01.230\nSo if I simply change\nthis second loop to of,\n\n302\n00:19:01.230 --> 00:19:05.345\nand I'm going to change\nthis back to element.\n\n303\n00:19:09.688 --> 00:19:14.577\nSo for let element of, minor,\nminor differences, inverses of.\n\n304\n00:19:15.890 --> 00:19:19.238\nIf I refresh notice I\nnow get the elements.\n\n305\n00:19:19.238 --> 00:19:23.030\nAnd I no longer have to worry about\nsomeone else working on an app.\n\n306\n00:19:23.030 --> 00:19:26.454\nOr maybe I'm using this\nfrom an outside package.\n\n307\n00:19:26.454 --> 00:19:28.397\nI don't have to worry about whoops,\n\n308\n00:19:28.397 --> 00:19:31.290\nI just got a weird property\nthat broke my application.\n\n309\n00:19:31.290 --> 00:19:33.270\nI don't have to do all\nthese manual checks.\n\n310\n00:19:33.270 --> 00:19:36.970\nSo this for let of is incredibly useful.\n\n311\n00:19:36.970 --> 00:19:39.360\nNow how does that help us on iterators?\n\n312\n00:19:40.790 --> 00:19:46.030\nWell, let's just come back,\nand uncomment that iterator.\n\n313\n00:19:46.030 --> 00:19:48.332\nSo this should give me\nall of my iterators.\n\n314\n00:19:48.332 --> 00:19:51.585\nOr excuse me, the iterator for\nmy example's array.\n\n315\n00:19:51.585 --> 00:19:56.975\nAnd for(let) this should\n\n316\n00:19:56.975 --> 00:20:01.430\nbe a number of exiter.\n\n317\n00:20:02.950 --> 00:20:07.890\nAl right so console.log(number).\n\n318\n00:20:07.890 --> 00:20:11.120\nAll right, so if I refresh.\n\n319\n00:20:11.120 --> 00:20:16.270\nThat actually looks very similar\nto just using the array itself.\n\n320\n00:20:16.270 --> 00:20:20.780\nAnd that's because, behind the scenes,\nfor (let of) is using that iterator.\n\n321\n00:20:20.780 --> 00:20:22.481\nSo it does some packaging up.\n\n322\n00:20:22.481 --> 00:20:27.458\nBut also notice, that normally what I\ngot out of this iterator was, in fact,\n\n323\n00:20:27.458 --> 00:20:29.540\nthis object that had the value.\n\n324\n00:20:33.317 --> 00:20:36.480\nAnd the done tag.\n\n325\n00:20:36.480 --> 00:20:38.070\nNow, this says undefined.\n\n326\n00:20:38.070 --> 00:20:41.030\nAnd that's because an iterator\nis consumable one time.\n\n327\n00:20:41.030 --> 00:20:44.200\nYou get one pass through it,\nand then it's exhausted.\n\n328\n00:20:44.200 --> 00:20:46.080\nYou have to recreate a new one.\n\n329\n00:20:46.080 --> 00:20:47.790\nThat's a gotcha.\n\n330\n00:20:47.790 --> 00:20:50.310\nSo because this loop has\nrun on this iterator,\n\n331\n00:20:50.310 --> 00:20:54.790\nit's at the end,\nit hit the done is true, it stopped.\n\n332\n00:20:54.790 --> 00:20:58.290\nIt's only outputting the value,\nnot this entire object.\n\n333\n00:21:00.230 --> 00:21:04.562\nBut because of that, if I call next on it,\nit will return an object, but\n\n334\n00:21:04.562 --> 00:21:06.370\nthere are no other values in there.\n\n335\n00:21:06.370 --> 00:21:08.400\nThey're exhausted, they're all gone.\n\n336\n00:21:08.400 --> 00:21:13.600\nRight, so this for of helps us\neliminate some of those pain points.\n\n337\n00:21:15.460 --> 00:21:21.310\nNow what are some other things that\nare iterable, that provide this iterator?\n\n338\n00:21:21.310 --> 00:21:25.275\nYou have to be careful, they don't\nalways produce exactly what you expect.\n\n339\n00:21:25.275 --> 00:21:27.044\nNow, we're gonna take a moment, and\n\n340\n00:21:27.044 --> 00:21:29.933\nlook at one of these new structures\nthat are provided in ES6.\n\n341\n00:21:29.933 --> 00:21:34.010\nJust kind of turn a blind\neye to the shenanigans.\n\n342\n00:21:34.010 --> 00:21:36.880\nOther than a couple of things that may.\n\n343\n00:21:36.880 --> 00:21:38.000\nOkay, I see how that works.\n\n344\n00:21:38.000 --> 00:21:39.130\nTry to reason about it.\n\n345\n00:21:39.130 --> 00:21:42.100\nWe'll go in depth in\nthese at a later time.\n\n346\n00:21:42.100 --> 00:21:43.280\nBut for now, we're just seeing.\n\n347\n00:21:43.280 --> 00:21:44.440\nWe've got to be careful.\n\n348\n00:21:44.440 --> 00:21:47.620\nThey don't always produce\nexactly what you anticipate.\n\n349\n00:21:47.620 --> 00:21:53.770\nSo let's hop back into our editor here and\nman, I got a lot of commented out code.\n\n350\n00:21:55.230 --> 00:21:58.110\nIn general, don't do this,\njust so we're clear.\n\n351\n00:21:58.110 --> 00:22:00.975\nI'm doing this just so\nwe can reference back to it.\n\n352\n00:22:00.975 --> 00:22:04.395\nIf I know I don't need code,\nI actually get rid of it.\n\n353\n00:22:04.395 --> 00:22:06.145\nThere's too much noise.\n\n354\n00:22:06.145 --> 00:22:09.105\n&gt;&gt; You don't like 273 lines\nof commented out code?\n\n355\n00:22:09.105 --> 00:22:12.245\n&gt;&gt; No, I didn't know that's\nwhat you were supposed to do.\n\n356\n00:22:12.245 --> 00:22:14.945\nI recommend strongly not to do that.\n\n357\n00:22:14.945 --> 00:22:18.220\nI have seen people's projects\nwhere they're like, yeah, so\n\n358\n00:22:18.220 --> 00:22:22.090\nthis first 600 lines,\nI just commented it out for reference.\n\n359\n00:22:22.090 --> 00:22:25.615\nI'm like, put it in another file,\nmake a new file, do something.\n\n360\n00:22:25.615 --> 00:22:26.154\nDon't do that.\n\n361\n00:22:26.154 --> 00:22:27.080\n&gt;&gt; Don't they make man pages?\n\n362\n00:22:27.080 --> 00:22:29.520\n&gt;&gt; [LAUGH] Yeah.\n\n363\n00:22:29.520 --> 00:22:30.580\nSo be careful there.\n\n364\n00:22:30.580 --> 00:22:33.920\nNow I'm going to create one\nof these structures, and\n\n365\n00:22:33.920 --> 00:22:34.680\nI'm just going to call it m.\n\n366\n00:22:36.070 --> 00:22:37.740\nAnd it's a map, right?\n\n367\n00:22:37.740 --> 00:22:42.770\nAnd we're not talking,\nwe live here on the map.\n\n368\n00:22:42.770 --> 00:22:43.950\nIt's not one of those maps.\n\n369\n00:22:43.950 --> 00:22:45.290\nIt's a little different map.\n\n370\n00:22:45.290 --> 00:22:50.240\nIt's albeit a scary mathy map so\nbe careful.\n\n371\n00:22:50.240 --> 00:22:53.049\nSo I gotta type some weirdness in here.\n\n372\n00:22:56.703 --> 00:23:00.470\nAnd here's b, 2.\n\n373\n00:23:00.470 --> 00:23:05.000\n&gt;&gt; If I'm not mistaken, if I'm looking at\nthis correctly, you've made an array, and\n\n374\n00:23:05.000 --> 00:23:08.570\nthen you've made two other\narrays inside of that array.\n\n375\n00:23:08.570 --> 00:23:09.420\n&gt;&gt; Yes, Daniel.\n\n376\n00:23:09.420 --> 00:23:10.750\nYeah, that's-\n&gt;&gt; [LAUGH]\n\n377\n00:23:10.750 --> 00:23:13.510\n&gt;&gt; This math thing is a little weird.\n\n378\n00:23:13.510 --> 00:23:17.590\nAnd well I say we just print it out so\n\n379\n00:23:17.590 --> 00:23:19.450\nwe can take a closer look\nat what this produces.\n\n380\n00:23:19.450 --> 00:23:20.780\nBut you're absolutely correct Daniel.\n\n381\n00:23:20.780 --> 00:23:24.250\nI have an array inside of an array\ninside of a new function.\n\n382\n00:23:25.540 --> 00:23:28.573\nI got tired just saying that.\n\n383\n00:23:28.573 --> 00:23:30.150\nSo I know, I'm winded.\n\n384\n00:23:31.190 --> 00:23:32.600\nSo let's take a look at it.\n\n385\n00:23:33.970 --> 00:23:38.540\nAnd refresh, and actually what those\narrays and arrays are producing is\n\n386\n00:23:38.540 --> 00:23:44.250\na mapping from here,\nis from this key, to this value.\n\n387\n00:23:44.250 --> 00:23:48.748\nI'm able to retrieve,\nit's kind of like an object, but\n\n388\n00:23:48.748 --> 00:23:53.448\nthere are additional use cases for\nthe map data structure.\n\n389\n00:23:53.448 --> 00:23:58.347\nIt is this first element in the array is\nthe key, the second element is the value.\n\n390\n00:23:58.347 --> 00:24:00.159\nSo key Value.\n\n391\n00:24:00.159 --> 00:24:01.384\nKey, value.\n\n392\n00:24:01.384 --> 00:24:06.092\nIt's a kind of a weird syntax, but\nyou'll actually see, in ES6, you'll start\n\n393\n00:24:06.092 --> 00:24:10.664\nseeing arrays being used to kind of bundle\nup, like these are related objects,\n\n394\n00:24:10.664 --> 00:24:14.726\nor there's related amounts of data\nin some structure just like this.\n\n395\n00:24:14.726 --> 00:24:17.610\n&gt;&gt; Is that so that when you're looping\nthrough it it actually looks at the value\n\n396\n00:24:17.610 --> 00:24:18.940\ninstead of the key?\n\n397\n00:24:18.940 --> 00:24:22.813\n&gt;&gt; You know, Daniel, again, I'm pretty\nsure you're seeing into the future.\n\n398\n00:24:22.813 --> 00:24:23.917\n&gt;&gt; [LAUGH]\n&gt;&gt; It's kind of scaring me.\n\n399\n00:24:23.917 --> 00:24:28.312\nSo let's actually see what\nhappens using that for let of.\n\n400\n00:24:28.312 --> 00:24:33.670\nSo I could create an iterator, but\nlet's just see what happens with for\n\n401\n00:24:33.670 --> 00:24:37.040\nlet of, cuz that will give me a glimmer.\n\n402\n00:24:37.040 --> 00:24:41.840\nSo I don't know what this is gonna be,\nso for let something of m,\n\n403\n00:24:41.840 --> 00:24:46.933\nwhich is our map, and\nthen console.log(something).\n\n404\n00:24:46.933 --> 00:24:51.468\nSo if I refresh,\neach something is actually\n\n405\n00:24:51.468 --> 00:24:55.520\ngoing to go, so what am I getting?\n\n406\n00:24:55.520 --> 00:24:58.770\nI'm getting actually\nthat two element array.\n\n407\n00:24:59.920 --> 00:25:01.480\nI'm getting the key and the value.\n\n408\n00:25:01.480 --> 00:25:06.263\nNow, this almost seems like a great\ntime that I could use destructuring\n\n409\n00:25:06.263 --> 00:25:09.301\nto actually kind of pull\nthose values apart.\n\n410\n00:25:09.301 --> 00:25:13.400\nBecause in a map, I'm always going to\nhave a two element array fed to me.\n\n411\n00:25:13.400 --> 00:25:19.867\nSo I can do something like this,\n[key, value].\n\n412\n00:25:19.867 --> 00:25:21.510\nThere's my two elements.\n\n413\n00:25:21.510 --> 00:25:30.036\nAnd now I can say key and\nconsole.log(value).\n\n414\n00:25:30.036 --> 00:25:32.780\nSo if I refresh,\nI get the key and the value.\n\n415\n00:25:32.780 --> 00:25:35.210\nOoh, destructuring, aw yeah.\n\n416\n00:25:35.210 --> 00:25:37.215\nThis is one of those times\nthat I almost dance.\n\n417\n00:25:37.215 --> 00:25:38.313\n&gt;&gt; It's all coming together now [LAUGH].\n\n418\n00:25:38.313 --> 00:25:40.875\n&gt;&gt; Yeah, you're like, yeah!\n\n419\n00:25:40.875 --> 00:25:41.762\n&gt;&gt; [LAUGH]\n&gt;&gt; It's way better!\n\n420\n00:25:41.762 --> 00:25:43.990\nBecause what's the alternative?\n\n421\n00:25:43.990 --> 00:25:49.710\nWell, let's actually back this up a little\nbit and see what the alternative is.\n\n422\n00:25:49.710 --> 00:25:52.320\nThose destructuring things are really,\nreally handy.\n\n423\n00:25:52.320 --> 00:25:56.733\nSo if I change this back to something and\nI say const key, well,\n\n424\n00:25:56.733 --> 00:25:59.497\nthat is the 0th element of something.\n\n425\n00:25:59.497 --> 00:26:04.130\nAnd const value equals\nthe first element of something.\n\n426\n00:26:04.130 --> 00:26:09.054\nAnd then I can console.log(key) and\nconsole.log(value).\n\n427\n00:26:09.054 --> 00:26:13.050\nShould have just kept those\noriginal console.logs there.\n\n428\n00:26:13.050 --> 00:26:13.590\nWasn't thinking.\n\n429\n00:26:14.770 --> 00:26:18.970\nBut if we go back, we'll actually see\nthat the output is exactly the same.\n\n430\n00:26:18.970 --> 00:26:20.060\nSo, but I don't like that.\n\n431\n00:26:20.060 --> 00:26:22.350\nThat destructuring thing,\nI like that better.\n\n432\n00:26:22.350 --> 00:26:27.353\nSo that's handy whenever I have\nthese key-value pairs, and I can\n\n433\n00:26:27.353 --> 00:26:33.350\ndestructure inside of a for let of loop,\nor a for of loop, let is not necessary.\n\n434\n00:26:33.350 --> 00:26:35.430\nYou can actually say var,\njust can't use const.\n\n435\n00:26:36.690 --> 00:26:40.590\nSo I can iterate through these things,\nand that's incredibly handy.\n\n436\n00:26:40.590 --> 00:26:42.670\nNow, where else would I see this?\n\n437\n00:26:42.670 --> 00:26:45.490\nThe .entries from an array?\n\n438\n00:26:45.490 --> 00:26:48.460\nAny time I have these key-value\npairs that are gonna come up,\n\n439\n00:26:48.460 --> 00:26:51.530\nyou have to be aware of what\nthe iterator's gonna provide to you.\n\n440\n00:26:52.570 --> 00:26:56.524\nBut this doesn't really tell us\nhow this iterator thing's working.\n\n441\n00:26:56.524 --> 00:26:58.569\nLike, how is this actually working?\n\n442\n00:26:59.700 --> 00:27:02.230\nAnd I think the best way\nto see how an iterator\n\n443\n00:27:02.230 --> 00:27:06.220\nbehaves is actually let's\nbuild a custom iterator.\n\n444\n00:27:06.220 --> 00:27:07.525\nWe can create a class or\n\n445\n00:27:07.525 --> 00:27:11.182\neven an object literal that\nadheres to the iterator protocol.\n\n446\n00:27:11.182 --> 00:27:14.760\nAnd as long as it does that,\nI can now iterate through things.\n\n447\n00:27:14.760 --> 00:27:15.960\nBe forewarned, though.\n\n448\n00:27:15.960 --> 00:27:21.546\nIf you're not careful, you can end up with\nan infinite loop when you do a for let of.\n\n449\n00:27:21.546 --> 00:27:24.245\nAnd then Chrome goes, well,\nI'm gonna take a nap now.\n\n450\n00:27:24.245 --> 00:27:26.936\n&gt;&gt; [LAUGH]\n&gt;&gt; And then you have to do some things.\n\n451\n00:27:26.936 --> 00:27:32.821\nSo let's go ahead and see what's happening\nbehind the scenes in an iterator.\n\n452\n00:27:34.800 --> 00:27:36.440\nWell, let's see here.\n\n453\n00:27:37.840 --> 00:27:39.540\nI have a class.\n\n454\n00:27:39.540 --> 00:27:41.657\nAnd let's call that class NumbersUntil.\n\n455\n00:27:41.657 --> 00:27:45.038\nAnd I do have to reference\na couple of things here, and\n\n456\n00:27:45.038 --> 00:27:49.620\nthat's just because I need to make\nsure I got all my ducks in a row.\n\n457\n00:27:49.620 --> 00:27:51.220\nBut a class is going\nto have a constructor.\n\n458\n00:27:53.490 --> 00:27:56.610\nAnd this constructor is going\nto take a stop argument.\n\n459\n00:27:56.610 --> 00:28:01.538\nNow, stop is the numbers until I'm\ngoing to start at a particular number,\n\n460\n00:28:01.538 --> 00:28:03.114\nnamely either 0 or 1.\n\n461\n00:28:03.114 --> 00:28:05.460\nAnd we'll make that\ndecision in just a moment.\n\n462\n00:28:05.460 --> 00:28:09.400\nAnd then I'm going to go until I stop,\nokay.\n\n463\n00:28:09.400 --> 00:28:11.930\nSo let's go ahead and make that,\nwhere am I starting from?\n\n464\n00:28:11.930 --> 00:28:13.171\nAm I gonna start at 0 or 1?\n\n465\n00:28:13.171 --> 00:28:15.377\nWell, I'm gonna start at 0, but\n\n466\n00:28:15.377 --> 00:28:19.269\nyou'll see that we may have to\nmodify that just a little bit.\n\n467\n00:28:20.710 --> 00:28:22.150\nSo, and then this.stop.\n\n468\n00:28:22.150 --> 00:28:25.960\nSo when I construct this object,\nlet's go ahead and create one.\n\n469\n00:28:25.960 --> 00:28:28.209\nSo const.\nAnd I know this is gonna be an iter, so\n\n470\n00:28:28.209 --> 00:28:30.510\nI'm gonna go ahead and name this iter.\n\n471\n00:28:32.340 --> 00:28:34.520\nNumbersUntil.\n\n472\n00:28:34.520 --> 00:28:39.358\nAnd then we have to give it\na number to get out, okay.\n\n473\n00:28:39.358 --> 00:28:42.270\nSo if I, 1, well, that'll be kinda weird.\n\n474\n00:28:42.270 --> 00:28:45.847\nLet's do something interesting like 10.\n\n475\n00:28:45.847 --> 00:28:47.598\nI don't know if 10 is any\nmore interesting than 1.\n\n476\n00:28:47.598 --> 00:28:49.226\n&gt;&gt; [LAUGH]\n&gt;&gt; But in this context,\n\n477\n00:28:49.226 --> 00:28:50.989\nit's gonna provide\nsomething else to click in.\n\n478\n00:28:50.989 --> 00:28:52.123\n&gt;&gt; At least a little more substance,\nright?\n\n479\n00:28:52.123 --> 00:28:54.912\n[LAUGH]\n&gt;&gt; Yeah, that's a one.\n\n480\n00:28:54.912 --> 00:28:56.448\n&gt;&gt; Good job.\n\n481\n00:28:56.448 --> 00:28:57.374\n&gt;&gt; All right!\n\n482\n00:28:57.374 --> 00:28:58.717\n&gt;&gt; I'm blown away.\n\n483\n00:28:58.717 --> 00:29:00.294\n&gt;&gt; I forgot the new.\n\n484\n00:29:00.294 --> 00:29:03.028\nSo you cannot invoke a class without new.\n\n485\n00:29:03.028 --> 00:29:04.831\nYou have to create a new\nobject from a class.\n\n486\n00:29:04.831 --> 00:29:07.750\nSo be very careful of that.\n\n487\n00:29:07.750 --> 00:29:10.110\nAnd now notice I have a NumbersUntil.\n\n488\n00:29:10.110 --> 00:29:11.380\nIt's just a plain object.\n\n489\n00:29:11.380 --> 00:29:12.760\nI can make a bunch of these.\n\n490\n00:29:12.760 --> 00:29:18.170\nBut now I wanna change this to where this\nis conforming to the iterator protocol.\n\n491\n00:29:18.170 --> 00:29:23.255\nAs long as I have that next method, I\nshould be able to use this as an iterator.\n\n492\n00:29:23.255 --> 00:29:27.090\nBut I'm actually gonna add,\nyou know that Symbol.iterator.\n\n493\n00:29:27.090 --> 00:29:29.410\nI'm gonna make sure that's available also.\n\n494\n00:29:29.410 --> 00:29:33.200\nCuz people are gonna see that and\ngo, this is an iterator.\n\n495\n00:29:33.200 --> 00:29:36.850\n&gt;&gt; Justin, why would we create\na custom iterator if we already have\n\n496\n00:29:36.850 --> 00:29:39.120\nvery functional iterators built in?\n\n497\n00:29:39.120 --> 00:29:42.807\n&gt;&gt; So,\nthis is actually a common use case for me.\n\n498\n00:29:42.807 --> 00:29:46.590\nI need to generate, I just need a list\nof numbers, an array of numbers,\n\n499\n00:29:46.590 --> 00:29:48.290\nup to a certain number.\n\n500\n00:29:48.290 --> 00:29:52.690\nOr I can modify this to start,\nstop, step, right?\n\n501\n00:29:52.690 --> 00:29:53.860\nSo I need to generate this.\n\n502\n00:29:53.860 --> 00:29:54.750\nNow, there is one way,\n\n503\n00:29:54.750 --> 00:29:57.050\nyou could just write a function\nthat builds an array and does that.\n\n504\n00:29:58.120 --> 00:30:02.809\nBut if I build the actual array,\nif it's a lot of numbers, well,\n\n505\n00:30:02.809 --> 00:30:05.550\nthat could also cause memory issues.\n\n506\n00:30:05.550 --> 00:30:09.460\nIn addition to having the ability\nto create a custom iterator,\n\n507\n00:30:09.460 --> 00:30:12.720\nI can technically have\nan infinite iterator.\n\n508\n00:30:12.720 --> 00:30:16.733\nSo I can say, I want all of\nthe integers that are positive.\n\n509\n00:30:16.733 --> 00:30:21.140\nAny number that is positive and\na whole number, give me that.\n\n510\n00:30:21.140 --> 00:30:22.860\nIf I was to try to build\nthat with an array,\n\n511\n00:30:22.860 --> 00:30:24.640\nit would surely lock up your computer.\n\n512\n00:30:25.920 --> 00:30:30.344\nBut if I have an iterator,\nI'd get them a single element at a time,\n\n513\n00:30:30.344 --> 00:30:32.011\na single value at a time.\n\n514\n00:30:32.011 --> 00:30:34.710\nAnd then I can consume what I need to.\n\n515\n00:30:34.710 --> 00:30:36.771\nAnd then the rest of it\nis just hanging out.\n\n516\n00:30:36.771 --> 00:30:42.340\nSo it's really lightweight for\nthings that may end up being infinite.\n\n517\n00:30:42.340 --> 00:30:45.990\nAnd this is one of the first times,\nI'm pretty sure in JavaScript,\n\n518\n00:30:45.990 --> 00:30:50.087\nthere may be some minor use cases here and\nthere that I have the ability to have\n\n519\n00:30:50.087 --> 00:30:54.580\nessentially an unlimited number of\nvalues in some kind of data structure.\n\n520\n00:30:54.580 --> 00:30:55.790\nBut great question, Daniel.\n\n521\n00:30:56.940 --> 00:31:03.426\nSo there's two modifications that I wanna\nmake, are, using like a computed property.\n\n522\n00:31:03.426 --> 00:31:06.207\nSo I'm gonna say [Symbol.iterator] so\n\n523\n00:31:06.207 --> 00:31:10.590\nthis will actually look up the value for\nthat symbol.\n\n524\n00:31:10.590 --> 00:31:12.959\nAnd I'm gonna make this a class method.\n\n525\n00:31:14.100 --> 00:31:15.730\nSo this will be a lookup on there.\n\n526\n00:31:15.730 --> 00:31:19.470\nAnd then I'm going to\ncreate the next method.\n\n527\n00:31:19.470 --> 00:31:23.731\nSo our object will have a next and\na have a Symbol.iterator.\n\n528\n00:31:23.731 --> 00:31:25.271\nSo let's go see how that has changed.\n\n529\n00:31:25.271 --> 00:31:28.940\nAnd if we look, aha.\n\n530\n00:31:29.990 --> 00:31:32.238\nSo I have a next, and a Symbol.iterator.\n\n531\n00:31:32.238 --> 00:31:36.770\nThat means that, this is getting closer\nto adhering to that iterator protocol.\n\n532\n00:31:38.500 --> 00:31:43.512\nSo let's, what do we wanna do when\nsomeone calls Symbol.iterator?\n\n533\n00:31:43.512 --> 00:31:47.580\nWell, we're building this up\nto already be the iterator.\n\n534\n00:31:47.580 --> 00:31:52.303\nSo it's not returning something new,\nit's gonna return itself.\n\n535\n00:31:52.303 --> 00:31:57.691\nSo I want to return this thing right here,\nwhatever object it is.\n\n536\n00:31:57.691 --> 00:32:02.482\nSo I'm gonna return this actual object\nBecause then that's what has the next\n\n537\n00:32:02.482 --> 00:32:03.375\nmethod on it.\n\n538\n00:32:03.375 --> 00:32:06.450\nNow the next method gets\na little hairy here.\n\n539\n00:32:08.010 --> 00:32:10.530\nSo the first thing I'm gonna do is\n\n540\n00:32:10.530 --> 00:32:14.750\nI started this start at zero because I\nactually wanna start counting at one.\n\n541\n00:32:14.750 --> 00:32:19.200\nBut the way iterators work is\nevery time this next is called,\n\n542\n00:32:19.200 --> 00:32:23.600\nthe state, the internal information,\nthis going to get updated.\n\n543\n00:32:23.600 --> 00:32:27.190\nSo I'm going to go ahead and\nupdate that by one.\n\n544\n00:32:27.190 --> 00:32:31.080\nSo now I'm actually starting at one so I\nhad to back trace a little bit right here.\n\n545\n00:32:32.900 --> 00:32:35.290\nAnd then,\nI'm gonna make a couple of decisions.\n\n546\n00:32:35.290 --> 00:32:40.650\nSo if the start is greater than this.stop.\n\n547\n00:32:40.650 --> 00:32:44.070\nRight, if start has surpassed stop,\n\n548\n00:32:44.070 --> 00:32:49.530\nthen I want to return\nthe value of this start.\n\n549\n00:32:49.530 --> 00:32:54.840\nNotice I'm creating an object on the fly\nkind of in line that follows that pattern.\n\n550\n00:32:54.840 --> 00:32:59.110\nWhen I called next I got a value and\na done field.\n\n551\n00:32:59.110 --> 00:33:03.310\nSo I need done and done in this\ncase is going to be true, right?\n\n552\n00:33:03.310 --> 00:33:08.771\nOnce I have surpassed stop\nI'm gonna get a done of true,\n\n553\n00:33:08.771 --> 00:33:11.913\notherwise I am going to return.\n\n554\n00:33:13.936 --> 00:33:18.480\nValue this.start and done: false.\n\n555\n00:33:18.480 --> 00:33:24.490\nAnd that's because if start is not\nalready overcome or exceeded stop.\n\n556\n00:33:24.490 --> 00:33:30.070\nI still want to produce new values,\nand this flag is mostly for\n\n557\n00:33:30.070 --> 00:33:33.900\nyour for let of,\nas soon as it sees a done true, it stops.\n\n558\n00:33:35.320 --> 00:33:37.400\nNow, if you did want an infinite iterator,\n\n559\n00:33:37.400 --> 00:33:39.060\nsomething that just\nkeeps producing values.\n\n560\n00:33:39.060 --> 00:33:41.810\nYou would never produce done true, right?\n\n561\n00:33:41.810 --> 00:33:43.307\nIt would just [SOUND].\n\n562\n00:33:43.307 --> 00:33:44.280\nOut, out, out.\n\n563\n00:33:44.280 --> 00:33:51.470\nSo let's see what that actually,\nokay, it looks good, all right.\n\n564\n00:33:51.470 --> 00:33:57.313\nBut what if I instead say for\n\n565\n00:33:57.313 --> 00:34:03.673\nlet of, no, number of iter.\n\n566\n00:34:05.517 --> 00:34:07.630\nAnd we're gonna cross our fingers Daniel.\n\n567\n00:34:07.630 --> 00:34:09.210\nCuz if I have made a typo,\n\n568\n00:34:09.210 --> 00:34:12.650\nyou may actually get to see my Chrome\nbrowser lock up just a little bit.\n\n569\n00:34:12.650 --> 00:34:13.640\n&gt;&gt; Here's hoping.\n\n570\n00:34:13.640 --> 00:34:15.570\n&gt;&gt; Woo. [LAUGH] &gt;&gt; Do you promise.\n\n571\n00:34:15.570 --> 00:34:19.600\nAll right, so in fact, okay.\n\n572\n00:34:19.600 --> 00:34:25.290\nOne, two, three, four, five, six,\nseven, eight, nine numbers until?\n\n573\n00:34:25.290 --> 00:34:29.721\nDoes that count for numbers until ten,\ndoes ten go in there?\n\n574\n00:34:29.721 --> 00:34:32.640\nAnd that's where you have to do some\ntweaking if you wanted to change that.\n\n575\n00:34:32.640 --> 00:34:36.158\nIt would be part of this logic here.\n\n576\n00:34:41.204 --> 00:34:45.549\nI could just offset this by 1 and\nget different behaviors as such,\n\n577\n00:34:45.549 --> 00:34:46.980\nso I can include ten.\n\n578\n00:34:46.980 --> 00:34:52.025\nNow that's really handy,\nbut also because this is\n\n579\n00:34:52.025 --> 00:34:57.420\nan iterator it is also iterable and\nif it's iterable,\n\n580\n00:34:57.420 --> 00:35:03.310\nI can use this to create an array\nusing the spread operator.\n\n581\n00:35:03.310 --> 00:35:09.996\nSo now, I can say const numbers\nequals dot dot dot, iter.\n\n582\n00:35:17.101 --> 00:35:20.670\nAnd I, in fact, now have an array\nfilled with those numbers.\n\n583\n00:35:20.670 --> 00:35:23.740\nBut because I've built\nthis custom iterator\n\n584\n00:35:23.740 --> 00:35:26.050\nthat has this predefined function.\n\n585\n00:35:26.050 --> 00:35:29.280\nI can say, I want the numbers until ten,\nspread it into an array, and\n\n586\n00:35:29.280 --> 00:35:30.540\nI'll have an array.\n\n587\n00:35:30.540 --> 00:35:31.920\nThat is incredibly handy.\n\n588\n00:35:32.930 --> 00:35:37.170\nBe very, very careful spreading iterator\nbecause if they are an infinite iterator,\n\n589\n00:35:37.170 --> 00:35:39.550\nagain, you're locking up your browser.\n\n590\n00:35:39.550 --> 00:35:43.680\nSo iterators are incredibly powerful and\nwill start to come into play more and\n\n591\n00:35:43.680 --> 00:35:47.070\nmore as we get into\nadditional features in ES6.\n\n592\n00:35:47.070 --> 00:35:50.610\nBut this makes me really happy,\nalmost dancing happy.\n\n593\n00:35:50.610 --> 00:35:53.320\n&gt;&gt; I can tell.\nIt's like he's wiggling in his\n\n594\n00:35:53.320 --> 00:35:54.340\nseat over there.\n\n595\n00:35:54.340 --> 00:35:59.370\nBut very cool stuff, Ryan, I love that\nfull loop of really interesting way into.\n\n596\n00:35:59.370 --> 00:36:00.760\n&gt;&gt; To loop through different things,\n\n597\n00:36:00.760 --> 00:36:03.400\nand of course iterations,\nthey're a lot of fun.\n\n598\n00:36:03.400 --> 00:36:06.150\nWe can play with those any time we can,\nso very cool stuff.\n\n599\n00:36:06.150 --> 00:36:06.930\nWe thank you, Justin.\n\n600\n00:36:06.930 --> 00:36:09.160\nIs there anything else we need to know for\nthis episode?\n\n601\n00:36:09.160 --> 00:36:10.460\n&gt;&gt; No, I think that'll tie it up.\n\n602\n00:36:10.460 --> 00:36:12.030\nYou'll start to see these come back.\n\n603\n00:36:12.030 --> 00:36:14.183\nBut for now, we'll let that kind of.\n\n604\n00:36:14.183 --> 00:36:17.020\n&gt;&gt; We'll just simmer on that for\na while, everyone.\n\n605\n00:36:17.020 --> 00:36:20.220\nThat being so, looking at the clock we're\nwell out of this time for this episode.\n\n606\n00:36:20.220 --> 00:36:23.780\nWe do thank you for joining us today but\nsigning off for ITProTV.\n\n607\n00:36:23.780 --> 00:36:25.620\nI've been your host Daniel Lowrie.\n\n608\n00:36:25.620 --> 00:36:26.940\n&gt;&gt; And I'm Justin Dennison.\n\n609\n00:36:26.940 --> 00:36:28.318\n&gt;&gt; And we'll see you next time.\n\n610\n00:36:28.318 --> 00:36:35.532\n[MUSIC]\n\n611\n00:36:35.532 --> 00:36:37.210\n&gt;&gt; Thank you for watching ITPROTV\n\n",
          "vimeoId": "204916987"
        },
        {
          "description": "In this episode, Daniel and Justin explain the use of Promises in ES6 using JavaScript. They begin by explaining what a Promise is, why you need them, and how they're used. They also show you how to implement Promises with some simple demonstrations.",
          "length": "1389",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-1-promises_and_fetch-021317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-1-promises_and_fetch-021317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-1-promises_and_fetch-021317-1-sm.jpg",
          "title": "Promises and Fetch",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.190\nWelcome to ITProTV.\n\n2\n00:00:01.190 --> 00:00:02.383\nI'm your host, Don.\n\n3\n00:00:02.383 --> 00:00:06.310\n[CROSSTALK]\n\n4\n00:00:06.310 --> 00:00:08.408\n[MUSIC]\n\n5\n00:00:08.408 --> 00:00:12.428\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.428 --> 00:00:14.100\n&gt;&gt; All right, greetings everyone and\n\n7\n00:00:14.100 --> 00:00:16.970\nwelcome to another exciting\nepisode of ITProTV.\n\n8\n00:00:16.970 --> 00:00:18.430\nI'm your host, Daniel Lowrie, and\n\n9\n00:00:18.430 --> 00:00:23.320\nin today's episode we are continuing on\nwith more on our what's new in ES6 Series.\n\n10\n00:00:23.320 --> 00:00:26.900\nAnd joining me back in the studio again is\nour resident expert on that very topic,\n\n11\n00:00:26.900 --> 00:00:28.970\nour good friend, Mr. Justin Dennison.\n\n12\n00:00:28.970 --> 00:00:30.420\nJustin, welcome back, my man.\n\n13\n00:00:30.420 --> 00:00:31.790\n&gt;&gt; How are you doing today, Daniel?\n\n14\n00:00:31.790 --> 00:00:33.890\n&gt;&gt; I can't complain, but\nsometimes I still do.\n\n15\n00:00:33.890 --> 00:00:38.580\n&gt;&gt; Yeah, yeah that is a fun time cuz at\nthe very least it's annoying to people and\n\n16\n00:00:38.580 --> 00:00:39.560\nI like to get people riled up.\n\n17\n00:00:39.560 --> 00:00:40.731\n&gt;&gt; There's nothing wrong with that.\n\n18\n00:00:40.731 --> 00:00:41.491\n[LAUGH]\n&gt;&gt; Yeah so\n\n19\n00:00:41.491 --> 00:00:43.567\ntoday we're actually gonna\ntalk about promises.\n\n20\n00:00:43.567 --> 00:00:45.640\nNow, promises are kind\nof an interesting topic.\n\n21\n00:00:45.640 --> 00:00:50.220\nBut before we dive into what is\na promise in JavaScript in programming,\n\n22\n00:00:50.220 --> 00:00:53.380\nI like to think of promise\nin the context of how we use\n\n23\n00:00:53.380 --> 00:00:55.660\nthe word promise in an everyday context.\n\n24\n00:00:55.660 --> 00:01:00.980\nSo you're driving along and someone's\ncalling you, hey, I need your help.\n\n25\n00:01:00.980 --> 00:01:02.920\nAnd you're like, well,\nI'm going to work right now.\n\n26\n00:01:02.920 --> 00:01:04.170\nThey're like, but\nI need your help right now.\n\n27\n00:01:04.170 --> 00:01:06.970\nAnd you're like, well,\nI promise I will help you.\n\n28\n00:01:06.970 --> 00:01:11.510\nNow, Daniel, if someone said that to you,\nwhat does that mean to you\n\n29\n00:01:11.510 --> 00:01:14.590\nif someone promises to help you or\nto give you aid at some point?\n\n30\n00:01:14.590 --> 00:01:17.460\n&gt;&gt; Well it just means that they've\ngiven me their word that when\n\n31\n00:01:17.460 --> 00:01:19.080\nthey are able to help, they will.\n\n32\n00:01:19.080 --> 00:01:23.250\n&gt;&gt; So there is some kind of delay, there\nis an implied or implicit, I'm not gonna\n\n33\n00:01:23.250 --> 00:01:27.350\nget there right now, but at some point\nlater down the road I will come help you.\n\n34\n00:01:27.350 --> 00:01:31.580\nNow hopefully,\ndepending on who you talk to,\n\n35\n00:01:31.580 --> 00:01:36.590\nthose promises aren't broken and\nare actually fulfilled.\n\n36\n00:01:36.590 --> 00:01:40.590\nBut in JavaScript, those promises\nbehave in a very similar way.\n\n37\n00:01:40.590 --> 00:01:43.800\nNow why do we need promises in JavaScript?\n\n38\n00:01:43.800 --> 00:01:47.200\nWell Java Script has some\ninteresting runtime characteristics.\n\n39\n00:01:47.200 --> 00:01:50.840\nIt is asynchronous as far as\nJavaScript within the browser,\n\n40\n00:01:50.840 --> 00:01:53.850\nwhich means if something's\ngonna take a long time,\n\n41\n00:01:53.850 --> 00:01:58.890\nit's kind of shoved off into the ether and\nit comes back later to check in.\n\n42\n00:01:58.890 --> 00:02:01.330\nNow how can we conceptualize this?\n\n43\n00:02:01.330 --> 00:02:04.580\nRight, if you haven't really thought\nabout this in terms of JavaScript,\n\n44\n00:02:04.580 --> 00:02:07.560\nlet's just think about it in\nterms of we're going out to eat.\n\n45\n00:02:07.560 --> 00:02:12.320\nSo we go out to eat, we sit down, someone\ncomes over to our table, the server says,\n\n46\n00:02:12.320 --> 00:02:13.770\nwhat would you like to eat?\n\n47\n00:02:13.770 --> 00:02:16.880\nLet's assume that you've already\nfigured out what you want to eat.\n\n48\n00:02:16.880 --> 00:02:18.840\nYou make your order, right.\n\n49\n00:02:18.840 --> 00:02:22.440\nNow it would be a horrible experience for\neverybody else,\n\n50\n00:02:22.440 --> 00:02:26.430\nif your server went directly back to\nthe kitchen, put in your order, and\n\n51\n00:02:26.430 --> 00:02:30.350\nthen just waited for\nyour order to fulfill, right.\n\n52\n00:02:30.350 --> 00:02:33.880\nThat might be good for you, but\nit isn't good for everybody else.\n\n53\n00:02:33.880 --> 00:02:35.600\nAnd what are those other customers?\n\n54\n00:02:35.600 --> 00:02:38.860\nThat can be the little clicky\nevents in your browser, right.\n\n55\n00:02:38.860 --> 00:02:41.830\nI wanna click on a button,\nwhile something else is happening.\n\n56\n00:02:41.830 --> 00:02:45.220\nIf the server, in this case,\nthe server waiting on my food,\n\n57\n00:02:45.220 --> 00:02:50.180\nis not attending to all of those other\nneeds, then everything kind of locks up.\n\n58\n00:02:50.180 --> 00:02:51.790\nSo how does a server actually work?\n\n59\n00:02:53.080 --> 00:02:57.000\nThey take your order, they walk back to\nthe kitchen, and they hand them the order,\n\n60\n00:02:57.000 --> 00:02:59.570\nand then they go take another\norder while they're waiting for\n\n61\n00:02:59.570 --> 00:03:01.350\nthat order to be fulfilled, right.\n\n62\n00:03:01.350 --> 00:03:04.280\nIf I order a nice big juicy steak,\nthey're not gonna wait for\n\n63\n00:03:04.280 --> 00:03:07.730\nthat steak to be cooked and bring it back\nto me before tending to other people.\n\n64\n00:03:07.730 --> 00:03:10.270\nIt's not good for the other customers,\nit's not good for the server,\n\n65\n00:03:10.270 --> 00:03:13.870\nand in general, that would make\nthe restaurant run really slowly.\n\n66\n00:03:13.870 --> 00:03:16.850\nAnd that's kind of how\nit works in the browser.\n\n67\n00:03:16.850 --> 00:03:20.320\nSo if I take an order,\nI go put it into the kitchen, and\n\n68\n00:03:20.320 --> 00:03:24.340\nI go take more orders, and\nI'm putting it kinda in a queue, right.\n\n69\n00:03:24.340 --> 00:03:27.000\nAnd as they come to them,\nthey're getting taken care of.\n\n70\n00:03:27.000 --> 00:03:31.150\nAnd what that means is I have\nthis asynchronous nature.\n\n71\n00:03:31.150 --> 00:03:34.510\nSome things will fulfill quickly,\nsome will take longer.\n\n72\n00:03:34.510 --> 00:03:39.170\nBut, what's happening is, periodically\nJavaScript is looping back through.\n\n73\n00:03:39.170 --> 00:03:40.080\nAre you done yet?\n\n74\n00:03:40.080 --> 00:03:40.880\nAre you done yet?\n\n75\n00:03:40.880 --> 00:03:43.260\nYou're done, okay, let's send that back.\n\n76\n00:03:43.260 --> 00:03:46.640\nSo when your steak gets properly cooked,\nthe server comes and gets it and\n\n77\n00:03:46.640 --> 00:03:50.430\nthen takes it to your table along\nwith whatever else you ordered.\n\n78\n00:03:50.430 --> 00:03:53.290\nBut it's not waiting,\nit's not synchronous, it's not blocking,\n\n79\n00:03:53.290 --> 00:03:55.450\nand that's very important.\n\n80\n00:03:55.450 --> 00:04:01.170\nBut on retrospect, in programming, that\nmakes it very difficult to reason about.\n\n81\n00:04:01.170 --> 00:04:04.850\nI'm like, okay, I wanna do this\nstep first, this step next, and\n\n82\n00:04:04.850 --> 00:04:06.040\nthen the third step.\n\n83\n00:04:06.040 --> 00:04:10.370\nWell, on JavaScript if the first step\ntakes a while, it will actually queue up\n\n84\n00:04:10.370 --> 00:04:13.830\nand say, I'll get back to that later,\nand the other things will execute.\n\n85\n00:04:13.830 --> 00:04:14.360\nAnd then you're like,\n\n86\n00:04:14.360 --> 00:04:19.430\nwell I was kind of depending on step one\nbeing done before the other two steps.\n\n87\n00:04:19.430 --> 00:04:23.300\nAnd this is a common problem for\nthose new to JavaScript.\n\n88\n00:04:23.300 --> 00:04:27.240\nNow we're talking about new features\nin ES6, this has been a problem\n\n89\n00:04:27.240 --> 00:04:30.730\nnot just necessarily in ES6 but\njust in JavaScript in general.\n\n90\n00:04:30.730 --> 00:04:33.493\nIt's an incredibly powerful paradigm but\n\n91\n00:04:33.493 --> 00:04:36.955\nis not always easily kind\nof grasped within the mind.\n\n92\n00:04:36.955 --> 00:04:41.697\nIt's [SOUND] that's really, I've been\nused to programming in Python, C, Java,\n\n93\n00:04:41.697 --> 00:04:46.168\nall these other things where when I come\ninto a line, it's done before the next\n\n94\n00:04:46.168 --> 00:04:50.393\nline happens, unless you go out of\nyour way to actually make this happen.\n\n95\n00:04:50.393 --> 00:04:55.155\nThere are some various actor model\ncraziness where I can shoot things off and\n\n96\n00:04:55.155 --> 00:04:58.830\nlet it execute and\nthen get a response back.\n\n97\n00:04:58.830 --> 00:05:02.500\nNow if we use this,\nhow can we simulate this in programming?\n\n98\n00:05:02.500 --> 00:05:05.460\nWhat we're actually gonna do is\nlook at the original solution\n\n99\n00:05:05.460 --> 00:05:08.390\nto see what problem promises solves.\n\n100\n00:05:08.390 --> 00:05:11.740\nBecause originally what would happen is\nyou would attach what is called a call\n\n101\n00:05:11.740 --> 00:05:16.640\nback, something to do after\nthis execution has finished.\n\n102\n00:05:16.640 --> 00:05:22.080\nSo, hey, go put in my order and\nthen after that run this other function,\n\n103\n00:05:22.080 --> 00:05:23.840\nright, give me a drink or\nsomething of that nature.\n\n104\n00:05:25.150 --> 00:05:28.333\nAnd we're gonna see that in\nthe context of a day to day situation.\n\n105\n00:05:28.333 --> 00:05:31.806\nThis is not something that I\nwould necessarily code as part of\n\n106\n00:05:31.806 --> 00:05:36.180\nan application, but instead as something\njust to wrap our minds around it.\n\n107\n00:05:36.180 --> 00:05:38.580\nSo let's go ahead and\nhop down in to our project,\n\n108\n00:05:38.580 --> 00:05:41.560\nlook in our browser, and\nsee how this plays out.\n\n109\n00:05:41.560 --> 00:05:43.320\nSo here we are in our Chrome browser.\n\n110\n00:05:43.320 --> 00:05:44.830\nLet's go ahead and get our project setup.\n\n111\n00:05:44.830 --> 00:05:46.830\nI'm gonna open that index.html file,\n\n112\n00:05:46.830 --> 00:05:50.409\nwhere all the fun's gonna be piped in for\nour JavaScript.\n\n113\n00:05:51.450 --> 00:05:55.190\nMake sure you have the correct index.html\nbecause if you don't it's going to be\n\n114\n00:05:55.190 --> 00:05:59.600\na rough day, just a lot of refreshing and\nnothing else really happening.\n\n115\n00:05:59.600 --> 00:06:03.120\nSo I open my Chrome Dev Tools,\nnow I use the keyboard shortcut.\n\n116\n00:06:03.120 --> 00:06:05.620\nBut I can go to More Tools,\nDeveloper Tools,\n\n117\n00:06:05.620 --> 00:06:07.970\nand there's actually like\nfive other ways to get there.\n\n118\n00:06:07.970 --> 00:06:10.740\nSo, if you're like,\nwell I know how to do it this way.\n\n119\n00:06:10.740 --> 00:06:12.490\nAs long as you can get there,\nthat’s all that matters.\n\n120\n00:06:13.790 --> 00:06:17.515\nSo, then let’s go ahead and\npop into Adam, get our project set up.\n\n121\n00:06:17.515 --> 00:06:23.035\nGonna add my project folder, and\nlet’s hop into the actual appropriate,\n\n122\n00:06:23.035 --> 00:06:26.400\nwhoa, don't do that.\n\n123\n00:06:27.440 --> 00:06:28.710\nSo not a problem,\n\n124\n00:06:28.710 --> 00:06:31.810\njust remove the project folder if you\naccidentally double click as I did.\n\n125\n00:06:33.180 --> 00:06:38.710\nAnd then I have this on my desktop like\nreally good computer individuals do,\n\n126\n00:06:38.710 --> 00:06:39.980\nput everything on your desktop.\n\n127\n00:06:39.980 --> 00:06:40.510\nI'm joking.\n\n128\n00:06:40.510 --> 00:06:43.990\n&gt;&gt; I love going to somebody's desk and\nthere's like 6,000 icons on there.\n\n129\n00:06:43.990 --> 00:06:45.170\n&gt;&gt; Yeah, when they start stacking.\n\n130\n00:06:45.170 --> 00:06:47.402\n&gt;&gt; Well,\nthat's easy to look at right there.\n\n131\n00:06:47.402 --> 00:06:49.935\n[LAUGH]\n&gt;&gt; Yeah, yeah well I turned the desktop\n\n132\n00:06:49.935 --> 00:06:53.695\nicon size down so they're really tiny,\nbut they don't stack anymore.\n\n133\n00:06:53.695 --> 00:06:55.710\n&gt;&gt; [LAUGH]\n&gt;&gt; Okay, so\n\n134\n00:06:55.710 --> 00:06:59.780\nthen if I look at my index.html,\nit's very similar, just nothing there,\n\n135\n00:06:59.780 --> 00:07:04.280\nit's just bringing in that app.js and\nthat allows me to do some fun stuff.\n\n136\n00:07:04.280 --> 00:07:06.690\nNow, I have pre-prepared the callback,\n\n137\n00:07:06.690 --> 00:07:09.180\nbecause there's a lot\nof craziness going on.\n\n138\n00:07:09.180 --> 00:07:12.450\nI'm actually gonna walk you through it\njust so we can see what's going on,\n\n139\n00:07:12.450 --> 00:07:15.630\ninstead of typing it and\nwalking you through it at the same time.\n\n140\n00:07:15.630 --> 00:07:21.000\nSo down here at the bottom, I'm actually\njust gonna grab all of this fun stuff.\n\n141\n00:07:21.000 --> 00:07:26.710\nAnd let's take a look, and yes, you did\nsee some additional things down there.\n\n142\n00:07:26.710 --> 00:07:29.890\nBut don't worry,\nthose are coming in good time.\n\n143\n00:07:29.890 --> 00:07:31.620\nSo here are my call backs.\n\n144\n00:07:33.280 --> 00:07:37.950\nAnd I need to not uncomment\nall of that stuff.\n\n145\n00:07:37.950 --> 00:07:39.180\nHere we go.\n\n146\n00:07:39.180 --> 00:07:40.810\nSo, let's take a look at these functions.\n\n147\n00:07:40.810 --> 00:07:44.615\nThis is typically how asynchronicity\nwas handled prior too.\n\n148\n00:07:45.870 --> 00:07:47.179\nBut let's set the stage, right.\n\n149\n00:07:47.179 --> 00:07:51.982\nIf someone comes in your house or you're\nmeeting them, typically what will happen\n\n150\n00:07:51.982 --> 00:07:56.322\nis you'll greet them and then shake\nhands or whatever your salutation is.\n\n151\n00:07:56.322 --> 00:07:57.789\nI'm going to use shake hands.\n\n152\n00:07:57.789 --> 00:08:00.113\nAnd then you may offer them a drink.\n\n153\n00:08:00.113 --> 00:08:06.010\nNow this is a very specific possibility,\nbut I want these to happen in order.\n\n154\n00:08:06.010 --> 00:08:08.710\nWell, I can't do that in JavaScript\nwith standard functions,\n\n155\n00:08:08.710 --> 00:08:11.870\nbecause let's say that greeting\ntakes a little bit longer.\n\n156\n00:08:11.870 --> 00:08:15.860\nWell, that may skip and shake hands or\noffer a drink first, and\n\n157\n00:08:15.860 --> 00:08:17.090\nthat would be kinda weird.\n\n158\n00:08:17.090 --> 00:08:19.660\nIf someone just walked into your house and\nyou're like here's something to drink.\n\n159\n00:08:19.660 --> 00:08:24.910\nThen that would be I want these to happen\nin order, I need these to happen in order.\n\n160\n00:08:24.910 --> 00:08:30.230\nI need that synchronous behavior but\nwith this asynchronously that\n\n161\n00:08:30.230 --> 00:08:35.470\nhappens in JavaScript I can't guarantee if\nI just put them one right after the other.\n\n162\n00:08:35.470 --> 00:08:37.190\nSo how is that handled?\n\n163\n00:08:37.190 --> 00:08:41.000\nSo let's take a look at these greet,\nshakeHands, and offerDrink function.\n\n164\n00:08:41.000 --> 00:08:46.160\nAnd then let's see what happens here,\nso with greet, I'm gonna give it a name,\n\n165\n00:08:46.160 --> 00:08:48.160\nand then this nextAction.\n\n166\n00:08:48.160 --> 00:08:50.220\nNextAction, even though\nit's not shown here,\n\n167\n00:08:50.220 --> 00:08:54.920\nis actually a function to\nexecute on the next time around.\n\n168\n00:08:54.920 --> 00:08:59.490\nSo what'll happen is, whatever's\nabove nextAction will execute and\n\n169\n00:08:59.490 --> 00:09:02.740\nhere it's just console.logging the name.\n\n170\n00:09:02.740 --> 00:09:07.030\nHey, name, nice to see you again, and\nthen it's gonna call next action and\n\n171\n00:09:07.030 --> 00:09:09.750\nactually pass that information through.\n\n172\n00:09:09.750 --> 00:09:12.620\nOkay, then function, shake hands,\n\n173\n00:09:12.620 --> 00:09:16.700\nis going to do very similar things,\nit's gonna take a name and next action.\n\n174\n00:09:16.700 --> 00:09:21.298\nAgain, next action is a function that\nwill run on the next time around.\n\n175\n00:09:21.298 --> 00:09:27.290\nAnd then console.log shaking hands\nwith name and then calls next action.\n\n176\n00:09:27.290 --> 00:09:32.500\nSo notice this next action is at\nthe very bottom of what's going on,\n\n177\n00:09:32.500 --> 00:09:33.920\nit's the call back.\n\n178\n00:09:33.920 --> 00:09:39.040\nIt's what's gonna be called when the main\nportion of the function is complete.\n\n179\n00:09:39.040 --> 00:09:40.320\nOfferDrink is very similar.\n\n180\n00:09:40.320 --> 00:09:46.370\nNow you'll notice if I,\nreally more robustly, I should check\n\n181\n00:09:46.370 --> 00:09:50.660\nto see if next action is defined because\nit is possible just to leave that out.\n\n182\n00:09:50.660 --> 00:09:55.290\nAnd if I leave that out,\nthen if I try to call a function and\n\n183\n00:09:55.290 --> 00:09:59.760\nit's not defined, then my app breaks,\nso this is a little different than this.\n\n184\n00:09:59.760 --> 00:10:02.300\nBut I've made this,\nit's not a robust example.\n\n185\n00:10:02.300 --> 00:10:03.920\nI've made these just to illustrate\n\n186\n00:10:04.950 --> 00:10:08.010\nthe issues that come up with\nthese asynchronous behavior.\n\n187\n00:10:08.010 --> 00:10:10.450\nNow if I wanted to greet someone, right?\n\n188\n00:10:10.450 --> 00:10:11.950\nI have a name here, Tim.\n\n189\n00:10:11.950 --> 00:10:16.440\nI'm gonna greet time, but\nnotice I then have to pass a function and\n\n190\n00:10:16.440 --> 00:10:19.090\nI'm getting data from greet.\n\n191\n00:10:19.090 --> 00:10:20.680\nWhere's that coming from?\n\n192\n00:10:20.680 --> 00:10:25.168\nThat's the name, so that's the name\nthat's being piped through, and\n\n193\n00:10:25.168 --> 00:10:28.857\nthen I'm gonna shake hands and\ngive it the name fromGreet.\n\n194\n00:10:28.857 --> 00:10:33.090\nAnd then I'm gonna run another\ncallback function that takes\n\n195\n00:10:33.090 --> 00:10:36.583\nfromShakeHands data and\nthen calls offerDrink.\n\n196\n00:10:36.583 --> 00:10:40.100\nAnd then fromShakeHands call\nanother callback function.\n\n197\n00:10:40.100 --> 00:10:43.260\nThis is what we call\nthe pyramid of doom or\n\n198\n00:10:43.260 --> 00:10:48.340\nthe pyramid of hell or\nall kinds of things it just kinda stacked.\n\n199\n00:10:48.340 --> 00:10:51.850\nCurley braise function blah,blah,blah,\n\n200\n00:10:51.850 --> 00:10:57.360\nit is rough goings because what if I,\nwhoops, I forgot that.\n\n201\n00:10:57.360 --> 00:11:00.700\nIf I have a bunch of these\nit's really hard to debug.\n\n202\n00:11:00.700 --> 00:11:05.690\nIt's really hard to maintain but it is\nnecessary in order to get that synchronize\n\n203\n00:11:05.690 --> 00:11:09.890\ntype behavior and\njust to show you, there we go.\n\n204\n00:11:09.890 --> 00:11:12.660\nWe get, hey Tim nice to see you again.\n\n205\n00:11:12.660 --> 00:11:16.370\nShaking hands with Tim offering Tim\nsomething to drink and I'm done.\n\n206\n00:11:16.370 --> 00:11:18.910\nIt happens one right after the other but\n\n207\n00:11:18.910 --> 00:11:23.100\nthat would happen regardless of\nwhether greet took ten seconds or\n\n208\n00:11:23.100 --> 00:11:28.329\nhalf a second because I have\nthis nested callback creation.\n\n209\n00:11:28.329 --> 00:11:32.560\nNow callback,\nthis is typically how a synchronicity\n\n210\n00:11:32.560 --> 00:11:37.170\nwas handled with functions\nbefore in JavaScript.\n\n211\n00:11:37.170 --> 00:11:41.670\nI called a function and then I passed\nit the next function to run but\n\n212\n00:11:41.670 --> 00:11:43.090\nthis is a lot of syntax.\n\n213\n00:11:43.090 --> 00:11:48.590\nThis is a lot of typing and there's an\nadditional reason I've pre-prepared this,\n\n214\n00:11:48.590 --> 00:11:50.890\nand that was because these\nwere very prone to errors.\n\n215\n00:11:52.060 --> 00:11:58.260\nSomething I see people do is they'll\nactually stack these like so.\n\n216\n00:12:00.050 --> 00:12:04.817\nAt the very end, and\nnow, we gotta be careful\n\n217\n00:12:04.817 --> 00:12:09.845\ncuz whoops Daisy and\nnow everything's broke.\n\n218\n00:12:09.845 --> 00:12:14.330\nAnd now I gotta go find all right which\none of those functions did I just break?\n\n219\n00:12:16.030 --> 00:12:20.280\nOr they'll get these out of order And\nit's just not intuitive,\n\n220\n00:12:20.280 --> 00:12:23.970\nit's not something that I can\neasily debug, reason about.\n\n221\n00:12:25.170 --> 00:12:28.400\nI have to maintain strong\ndiscipline with formatting,\n\n222\n00:12:28.400 --> 00:12:32.350\nit's not fun but how do promises fix this?\n\n223\n00:12:32.350 --> 00:12:35.780\nWell, originally, promises were part of\nexternal libraries that were available\n\n224\n00:12:35.780 --> 00:12:37.600\nthat kind of handled this but\n\n225\n00:12:37.600 --> 00:12:41.920\nin ES6, promises have kind of\ncome to the language itself.\n\n226\n00:12:41.920 --> 00:12:47.420\nThey are native implementations of\na promise and just like here I have,\n\n227\n00:12:47.420 --> 00:12:51.220\nI'm gonna do this, and then I'm gonna\ndo this, and then I'm gonna do this.\n\n228\n00:12:51.220 --> 00:12:55.540\nAnd that and then is where\nthe promise comes into play and\n\n229\n00:12:55.540 --> 00:12:58.860\nthen the later right, and\nI could shake hands later.\n\n230\n00:12:58.860 --> 00:13:00.770\nI might talk to them for\n\n231\n00:13:00.770 --> 00:13:06.490\na while after I greet them, before I shake\nhands, before this all kinda takes place.\n\n232\n00:13:06.490 --> 00:13:10.490\nSo here is the standard kind of\ncall back handling of this and\n\n233\n00:13:10.490 --> 00:13:12.220\nthis still exists, don't get me wrong.\n\n234\n00:13:12.220 --> 00:13:16.920\nThis is still around but\nhow would this look as far as promises go?\n\n235\n00:13:18.550 --> 00:13:23.770\nWell, before we get to that, let's\njust take a look at what promises are,\n\n236\n00:13:23.770 --> 00:13:25.740\nvery simple promises, how they behave.\n\n237\n00:13:25.740 --> 00:13:30.690\nAnd then we're going to refactor or change\nthis to use promises, so for now, I'm\n\n238\n00:13:30.690 --> 00:13:34.510\njust going to comment this back out and\nthen we'll come back and make this better.\n\n239\n00:13:34.510 --> 00:13:38.360\nWell, that's definitely an opinion\nof whether it's better or\n\n240\n00:13:38.360 --> 00:13:43.320\nnot, so\nlet's take a look at some promises.\n\n241\n00:13:43.320 --> 00:13:48.820\nNow, promises in ES6 are essentially\nthis bundled up package\n\n242\n00:13:48.820 --> 00:13:54.720\nthat you can call .then which means and\nthen or you can catch errors that occur.\n\n243\n00:13:54.720 --> 00:13:55.530\nAnd when you call,\n\n244\n00:13:55.530 --> 00:13:59.020\nwhen you create a new promise, you have\nto give it a function, which is funny.\n\n245\n00:13:59.020 --> 00:14:01.710\nA promise takes a callback function,\n\n246\n00:14:01.710 --> 00:14:05.550\nas you'll see that has to run\nas the promise completes.\n\n247\n00:14:05.550 --> 00:14:07.660\nBut if it's something\nthat takes a long time,\n\n248\n00:14:07.660 --> 00:14:11.190\nJavaScript can then schedule\nit to resolve later.\n\n249\n00:14:11.190 --> 00:14:13.890\nWe're just gonna do very simply ones and\nsee how they work, so.\n\n250\n00:14:15.480 --> 00:14:20.393\nLet's start with a very simple Promise,\nand\n\n251\n00:14:20.393 --> 00:14:25.564\nconst P = new Promise,\nand then typically they\n\n252\n00:14:25.564 --> 00:14:31.560\ntake two arguments,\nresolve and reject, right?\n\n253\n00:14:31.560 --> 00:14:36.280\nOr success and error, so if something\ngood happens then I'm going to\n\n254\n00:14:36.280 --> 00:14:41.960\nresolve this promise, so I'm building\nmy own promise to have this work.\n\n255\n00:14:41.960 --> 00:14:46.500\nSo I'm going to console that log yay,\n\n256\n00:14:47.670 --> 00:14:53.870\nit's a very technical piece of code and\nthen I'm going to resolve immediately.\n\n257\n00:14:53.870 --> 00:14:59.780\nNow this process doesn't,\nokay it's fine but\n\n258\n00:14:59.780 --> 00:15:04.420\nI'm actually gonna pass something\ninto this and say I just resolved.\n\n259\n00:15:07.540 --> 00:15:15.010\nSo what would happen\nif I console.log(p) so\n\n260\n00:15:15.010 --> 00:15:20.970\nI refresh and I think I still have\none of those whoopsie daisies.\n\n261\n00:15:20.970 --> 00:15:24.530\nHere we go,\nthis is actually a fat arrow function,\n\n262\n00:15:24.530 --> 00:15:27.190\nyou gotta make sure you put the fat\narrow in there for it to make sense.\n\n263\n00:15:28.900 --> 00:15:33.509\nSo, [SOUND] notice that happens\nas the promise is executing but\n\n264\n00:15:33.509 --> 00:15:36.885\nif I drop this down,\nthis is still I promise.\n\n265\n00:15:36.885 --> 00:15:40.408\nI don't have a value out of it yet,\nI haven't,\n\n266\n00:15:40.408 --> 00:15:45.619\nnothing has occurred, how do I get\nthen that value out after results?\n\n267\n00:15:45.619 --> 00:15:51.095\nWell, promises allow you to,\nthen them, they are then-able,\n\n268\n00:15:51.095 --> 00:15:57.878\nso I can say give me this promise and when\nit's done then do this next step, okay?\n\n269\n00:15:57.878 --> 00:16:01.680\nSo let's look at this p and the .then\nactually returns another promise.\n\n270\n00:16:01.680 --> 00:16:07.680\nSo if I say,\nconst next = p.then, then takes\n\n271\n00:16:07.680 --> 00:16:13.170\na function that will run when that\npromise has resolved at that point, okay?\n\n272\n00:16:14.400 --> 00:16:17.720\nSo there's gonna be some data here and\n\n273\n00:16:17.720 --> 00:16:23.510\nI'm just gonna console.log the data so\nwe'll see how that works out.\n\n274\n00:16:23.510 --> 00:16:26.660\nNow this is still a lot of call back\nfunctions, functions and functions and\n\n275\n00:16:26.660 --> 00:16:31.698\nfunctions but you'll see the power when\nthis comes to fruition at the very end.\n\n276\n00:16:31.698 --> 00:16:38.580\nSo let's console.log(next) and\nwhat we may see is some craziness.\n\n277\n00:16:38.580 --> 00:16:44.310\nSo yea, promise, I just resolved and\n\n278\n00:16:44.310 --> 00:16:48.020\nthen notice that next,\nwell where did next go?\n\n279\n00:16:49.810 --> 00:16:54.290\nWell, next is actually this promise, so\nthe promise there's nothing to resolve\n\n280\n00:16:54.290 --> 00:16:56.170\nbecause the promise\ndidn't return anything.\n\n281\n00:16:56.170 --> 00:17:01.330\nThis .then did not return\nan additional thing to go through,\n\n282\n00:17:01.330 --> 00:17:04.890\nso I have .next, right?\n\n283\n00:17:04.890 --> 00:17:08.607\nSo I have this original promise,\nit lots [SOUND] and then it resolve,\n\n284\n00:17:08.607 --> 00:17:09.596\nI just resolved.\n\n285\n00:17:09.596 --> 00:17:15.629\nThat's the value that gets passed back and\nthen when I say const next = p.then,\n\n286\n00:17:15.629 --> 00:17:20.880\nthat data from the resolve gets\npassed into this next then statement.\n\n287\n00:17:21.990 --> 00:17:25.380\nAnd then when it .then, this is run and\n\n288\n00:17:25.380 --> 00:17:31.110\nif I return an additional set of data\nthat gets piped into this next promise.\n\n289\n00:17:31.110 --> 00:17:35.233\nAnd just to show you,\ninstead of logging data auto say data and\n\n290\n00:17:35.233 --> 00:17:40.724\nagain federal functions have an implicit\nreturn when they're simple like this.\n\n291\n00:17:40.724 --> 00:17:45.340\nAnd this is gonna take that data and pipe\nit back into our this promise called next.\n\n292\n00:17:47.830 --> 00:17:50.270\nAnd it still hasn't resolved and\nthere it is,\n\n293\n00:17:50.270 --> 00:17:51.790\nit actually resolved\nin front of your eyes.\n\n294\n00:17:51.790 --> 00:17:53.820\nSee how it takes a little bit but\n\n295\n00:17:53.820 --> 00:17:58.920\nthen when resolved that datas\nkind of waterfall through.\n\n296\n00:17:58.920 --> 00:18:02.100\nNow promises,\nthis is still a little trippy, but\n\n297\n00:18:02.100 --> 00:18:07.670\nthey're incredibly powerful, so\nthis is just immediately resolving them.\n\n298\n00:18:07.670 --> 00:18:10.960\nWhat happens if this takes a little while?\n\n299\n00:18:10.960 --> 00:18:14.910\nSo instead of counsel\nlogging the actual promise\n\n300\n00:18:14.910 --> 00:18:17.980\nHow are people actually\ngoing to manage this?\n\n301\n00:18:17.980 --> 00:18:22.450\nThis is gonna take data and et's just say\n\n302\n00:18:23.520 --> 00:18:28.910\nI'm anticipating that I might need\nadditional things to happen in this body.\n\n303\n00:18:28.910 --> 00:18:33.910\nSo I'm just gonna go console.log,\nI'm gonna take out this console.log, yey.\n\n304\n00:18:35.010 --> 00:18:39.810\nAnd inside of this promise we're\ngonna simulate a network request or\n\n305\n00:18:39.810 --> 00:18:43.110\nsimulate a calculation that\ntakes a little bit longer.\n\n306\n00:18:43.110 --> 00:18:46.680\nAnd we're gonna do that\nby saying setTimeout,\n\n307\n00:18:46.680 --> 00:18:49.120\nwhich is a wonderful\nfunction in JavaScript.\n\n308\n00:18:49.120 --> 00:18:52.640\nAll it does is allow you to run\na function after so many seconds or\n\n309\n00:18:52.640 --> 00:18:54.680\nactually so many milliseconds.\n\n310\n00:18:54.680 --> 00:19:00.590\nSo I'm going to run this\nfunction after two seconds and\n\n311\n00:19:00.590 --> 00:19:03.970\nwhat's going to happen in that function\nis I'm actually going to resolve.\n\n312\n00:19:06.010 --> 00:19:08.520\nSo only after two seconds will I resolve.\n\n313\n00:19:09.720 --> 00:19:16.030\nOkay, so let's go see what happens,\none and two, there it is.\n\n314\n00:19:16.030 --> 00:19:18.820\nNow that is a simulated network request,\nright?\n\n315\n00:19:18.820 --> 00:19:23.830\nI grew up with 56k Internet, and\nif you've grown up with 56k Internet this\n\n316\n00:19:23.830 --> 00:19:26.660\nis kind of your Internet experience but\neven faster.\n\n317\n00:19:27.790 --> 00:19:30.900\nNow promises have that resolve but\nthey also have a reject.\n\n318\n00:19:30.900 --> 00:19:32.770\nWhat happens when things go wrong?\n\n319\n00:19:32.770 --> 00:19:36.300\nAnd that's an additional part\nof having this promise chain,\n\n320\n00:19:36.300 --> 00:19:39.250\nI don't have to error\ncheck all over the place.\n\n321\n00:19:39.250 --> 00:19:44.100\nThere errors kinda get caught by\nlast .catch, so I have a .then and\n\n322\n00:19:44.100 --> 00:19:45.890\nthen I have a .catch.\n\n323\n00:19:45.890 --> 00:19:47.850\nAnd we've seen the result but\nlet's go ahead and\n\n324\n00:19:47.850 --> 00:19:50.250\nsee what happens when\nthings go horribly array.\n\n325\n00:19:51.590 --> 00:19:55.000\nSo this is gonna two\nseconds to resolve but\n\n326\n00:19:55.000 --> 00:20:00.690\nnow let's just say it takes two seconds\nto error out, so I'm gonna say reject.\n\n327\n00:20:01.850 --> 00:20:08.776\nWe should probably change this message\nbecause it doesn't make any sense.\n\n328\n00:20:08.776 --> 00:20:09.620\n&gt;&gt; Spaghettios.\n\n329\n00:20:09.620 --> 00:20:10.426\n&gt;&gt; [SOUND] Spaghettios.\n\n330\n00:20:10.426 --> 00:20:13.656\n&gt;&gt; [LAUGH]\n&gt;&gt; Now let's see what happens, Daniel,\n\n331\n00:20:13.656 --> 00:20:15.175\nyou're killing me.\n\n332\n00:20:15.175 --> 00:20:18.430\n&gt;&gt; [LAUGH]\n&gt;&gt; Spagettio's, so let's see what happens.\n\n333\n00:20:18.430 --> 00:20:22.830\nThere I'm gonna console.log that data but\nnotice I change this to reject.\n\n334\n00:20:22.830 --> 00:20:23.760\nHow does that change?\n\n335\n00:20:23.760 --> 00:20:29.230\n1 and 2, notice it says an uncall error.\n\n336\n00:20:29.230 --> 00:20:32.050\nThis can actually cause problems\nin your application if you're not\n\n337\n00:20:32.050 --> 00:20:33.810\nhandling them appropriately.\n\n338\n00:20:33.810 --> 00:20:36.880\nNow in JavaScript,\nwe have all kinds of error handling.\n\n339\n00:20:36.880 --> 00:20:41.520\nWe can check to see if the error exists,\nthen handle it, we can try and catch it.\n\n340\n00:20:41.520 --> 00:20:45.580\nWe can do all kind but, but what happens\nif this happens during a network request?\n\n341\n00:20:45.580 --> 00:20:47.020\nThat's really hard to do.\n\n342\n00:20:47.020 --> 00:20:52.037\nWell, with promises,\nthat error is kind of thrown into\n\n343\n00:20:52.037 --> 00:20:57.182\nthe promise chain, so\nif I say .then, I can actually say\n\n344\n00:20:59.025 --> 00:21:03.535\n.catch and that takes the error and\n\n345\n00:21:03.535 --> 00:21:08.350\nlet's just console.log the error.\n\n346\n00:21:10.766 --> 00:21:11.610\nOkay?\n\n347\n00:21:11.610 --> 00:21:16.700\nSo let's see if that plays\nout as we expect and\n\n348\n00:21:16.700 --> 00:21:21.150\nnotice, all it does is console.log\nthe error that is thrown out.\n\n349\n00:21:21.150 --> 00:21:26.150\nNow this is a very simplified example,\nright, I am rejecting but\n\n350\n00:21:26.150 --> 00:21:30.370\nthis is a way of saying if\nit goes one way, do this.\n\n351\n00:21:30.370 --> 00:21:33.940\nIf it goes the other way I want to\nreject that, I don't that's not good.\n\n352\n00:21:33.940 --> 00:21:36.355\nWhat are some common use cases for\nthis reject?\n\n353\n00:21:36.355 --> 00:21:38.780\nMy network request takes too long, right?\n\n354\n00:21:38.780 --> 00:21:42.684\nIf you're building an application that\nhas to call out to all these places on\n\n355\n00:21:42.684 --> 00:21:45.796\nthe Internet to get this information for\nyour app to render.\n\n356\n00:21:45.796 --> 00:21:50.141\nWell, you don't wanna wait forever\nmaybe you want to actually kill it or\n\n357\n00:21:50.141 --> 00:21:51.860\nif it times out, try again.\n\n358\n00:21:52.960 --> 00:21:56.090\nThis is a very common use case for\n\n359\n00:21:56.090 --> 00:21:59.200\npromises, and\nis a little easier to handle.\n\n360\n00:21:59.200 --> 00:22:02.440\nI know it doesn't seem like it now,\nthan call backs, and\n\n361\n00:22:02.440 --> 00:22:07.870\nwe'll actually see a wonderful kind of,\nthat works beautifully but\n\n362\n00:22:07.870 --> 00:22:11.610\nyou know, Daniel,\nI know we have to do some refactoring.\n\n363\n00:22:11.610 --> 00:22:15.250\nI'm not sure we have the time in this\nepisode to do that refactoring at\n\n364\n00:22:15.250 --> 00:22:16.090\nthis point in time.\n\n365\n00:22:16.090 --> 00:22:17.720\n&gt;&gt; Well, you're a man who\nknows your limitations and\n\n366\n00:22:17.720 --> 00:22:19.190\nthat's always a good thing, right?\n\n367\n00:22:19.190 --> 00:22:23.946\nSo looks like we're headed into one of\nour famous part two episodes where all\n\n368\n00:22:23.946 --> 00:22:28.476\nof this is culminating into a wonderful\nlittle package with a bow on top of\n\n369\n00:22:28.476 --> 00:22:30.500\nit that Justin has set up for us.\n\n370\n00:22:30.500 --> 00:22:33.033\nI saw JSON files [LAUGH]\n&gt;&gt; [LAUGH] [SOUND] JSON.\n\n371\n00:22:33.033 --> 00:22:35.740\n&gt;&gt; JSON,\nhe's serious right here in the studio.\n\n372\n00:22:35.740 --> 00:22:39.230\nJustin, thank you so much,\nwe do appreciate you getting us thus far.\n\n373\n00:22:39.230 --> 00:22:43.970\nLooking forward to the climactic\nresolution of promises.\n\n374\n00:22:43.970 --> 00:22:47.740\nPart two, the promising that being said,\nthanks for joining us, again.\n\n375\n00:22:47.740 --> 00:22:50.540\nWe thank you guys for watching,\nwe'll see you next time.\n\n376\n00:22:50.540 --> 00:22:53.720\nSigning off for ITProTV,\nI've been your host, Daniel Lowrie.\n\n377\n00:22:53.720 --> 00:22:56.810\n&gt;&gt; And I'm Justin Dennison and\nwe'll see you next time.\n\n378\n00:22:56.810 --> 00:23:03.285\n[MUSIC]\n\n379\n00:23:03.285 --> 00:23:04.180\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204902482"
        },
        {
          "description": "In this episode, Daniel and Justin continue looking at the use of Promises using Javascript to demonstrate. Also they introduce you to the Fetch utility which will expand the use of our Promise function.",
          "length": "1743",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-2-promises_and_fetch_pt_2-021317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-2-promises_and_fetch_pt_2-021317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-10-1-2-promises_and_fetch_pt_2-021317-1-sm.jpg",
          "title": "Promises and Fetch Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.960 --> 00:00:04.130\nWelcome to IT Pro TV.\n\n2\n00:00:04.130 --> 00:00:05.812\nI'm your host for IT Pro TV.\n\n3\n00:00:05.812 --> 00:00:08.181\n&gt;&gt; [CROSSTALK].\n\n4\n00:00:08.181 --> 00:00:10.610\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:12.880 --> 00:00:16.410\n&gt;&gt; All right, greetings everyone, and\nwelcome to another episode of ITProTV!\n\n6\n00:00:16.410 --> 00:00:18.340\nI'm your host, Dana Lowry, and\n\n7\n00:00:18.340 --> 00:00:22.840\nin today's episode we are continuing on\nwith more on our What's New in ES6 series.\n\n8\n00:00:22.840 --> 00:00:26.540\nAnd, of course, joining us on our part\ntwo on Promises, our good friend, Mr.\n\n9\n00:00:26.540 --> 00:00:27.190\nJustin Dennis.\n\n10\n00:00:27.190 --> 00:00:28.270\nAnd, Justin, welcome back, my man.\n\n11\n00:00:28.270 --> 00:00:28.900\nHow's it going?\n\n12\n00:00:28.900 --> 00:00:29.920\n&gt;&gt; It's going well, Daniel.\n\n13\n00:00:29.920 --> 00:00:31.400\nHopefully you're doing well.\n\n14\n00:00:31.400 --> 00:00:34.620\nPromises, they tend to be a little\nlengthier of a subject than\n\n15\n00:00:34.620 --> 00:00:35.510\ninitially thought.\n\n16\n00:00:35.510 --> 00:00:39.390\nBut that's okay, because we're making sure\nthat we have all this nuanced behaviors\n\n17\n00:00:39.390 --> 00:00:41.210\nwith Promises kinda squared away.\n\n18\n00:00:41.210 --> 00:00:43.900\nWhen we left off last time,\nwe had just seen\n\n19\n00:00:43.900 --> 00:00:47.240\nhow Promises were starting to\nwork with that .them and .catch.\n\n20\n00:00:47.240 --> 00:00:52.200\nBut we had an original example that used\ncallback functions to get the synchronous\n\n21\n00:00:52.200 --> 00:00:53.250\nbehavior.\n\n22\n00:00:53.250 --> 00:00:58.400\nLet's actually spend sometime now that\nwe've sen how promises are constructed and\n\n23\n00:00:58.400 --> 00:01:00.780\nrefactor that to use promises.\n\n24\n00:01:00.780 --> 00:01:04.420\nNow, keep in mind when we do this,\nwe're actually not gonna use the reject\n\n25\n00:01:04.420 --> 00:01:07.050\nbecause hopefully we\nwouldn't have any problems.\n\n26\n00:01:07.050 --> 00:01:09.630\nSo this is not a robust, again,\nnot a robust example but\n\n27\n00:01:09.630 --> 00:01:14.200\nit's a manner of comparison between\nthe two ways to call these functions.\n\n28\n00:01:14.200 --> 00:01:16.250\nSo let's go ahead and\nhop into our editor here.\n\n29\n00:01:17.560 --> 00:01:19.630\nAnd just a reminder,\nwe had this from last time.\n\n30\n00:01:19.630 --> 00:01:21.550\nWe're just gonna comment that out.\n\n31\n00:01:21.550 --> 00:01:23.580\nNow notice, before I do, though,\n\n32\n00:01:23.580 --> 00:01:27.490\nI use the thing called method chaining\nwhere I have this single promise and\n\n33\n00:01:27.490 --> 00:01:31.500\nI can chain a bunch of stuff together by\nnot terminating the line with a semicolon.\n\n34\n00:01:31.500 --> 00:01:35.740\nIf you haven't seen it before,\nit's a very common pattern with promises,\n\n35\n00:01:35.740 --> 00:01:38.320\nyou'll see it more and\nmore as we go through here.\n\n36\n00:01:38.320 --> 00:01:41.990\nSo I wanna get rid of that, and\nthen I'm just actually gonna\n\n37\n00:01:41.990 --> 00:01:46.060\nhop up here to these three functions and\nchange them a little bit.\n\n38\n00:01:47.780 --> 00:01:52.380\nI'm actually going to remove\nthis nextAction portion,\n\n39\n00:01:54.030 --> 00:01:58.990\nnextAction, get rid of that.\n\n40\n00:01:58.990 --> 00:02:04.020\nAnd notice I'm removing the call back,\nright?\n\n41\n00:02:04.020 --> 00:02:07.840\nThat asynchronous call back that has\nto happen next and next and next.\n\n42\n00:02:07.840 --> 00:02:12.339\nAnd instead I'm going to\nreplace that action with\n\n43\n00:02:12.339 --> 00:02:17.750\nthe return of a new promise object.\n\n44\n00:02:17.750 --> 00:02:22.330\nAnd that way I can then kind of embed\nthat behavior through that promise.\n\n45\n00:02:22.330 --> 00:02:27.580\nSo what I'm gonna do I\ngonna have a resolve and\n\n46\n00:02:27.580 --> 00:02:33.530\na reject just to remind ourselves\nthat reject is an option and\n\n47\n00:02:33.530 --> 00:02:37.540\nif I had an additional error handling like\nthe greetings goes wrong I say something\n\n48\n00:02:37.540 --> 00:02:41.760\nreally awkward and I'm like abandon\nthen I can reject at that point.\n\n49\n00:02:41.760 --> 00:02:45.290\nOr if I am like I don't want to greet\nthis person with a particular name,\n\n50\n00:02:45.290 --> 00:02:46.490\nthen I can reject at that point.\n\n51\n00:02:46.490 --> 00:02:50.960\nMaybe we will make those changes, but\nI am going to return this promise and\n\n52\n00:02:50.960 --> 00:02:55.890\nI am immediately going to resolve with the\nname, and the name is coming from here so\n\n53\n00:02:55.890 --> 00:03:03.040\nthat way when I call it\ninto the promise chain.\n\n54\n00:03:03.040 --> 00:03:07.510\nSo when I call .then, I will get\nthe name into the next .then statement.\n\n55\n00:03:07.510 --> 00:03:10.540\nI'm going to do something\nsimilar with shake hands.\n\n56\n00:03:10.540 --> 00:03:16.920\nI wanna return a new Promise and\nit's gonna take a resolve and a reject.\n\n57\n00:03:16.920 --> 00:03:22.080\nI do love these fat arrow functions,\nthey are real handy.\n\n58\n00:03:22.080 --> 00:03:28.090\nand then I am just going to immediately\nresolve with the name again.\n\n59\n00:03:28.090 --> 00:03:31.730\nNotice these promises are very\nsimilar as was the next action\n\n60\n00:03:31.730 --> 00:03:33.770\ncallback that existed there prior to.\n\n61\n00:03:35.520 --> 00:03:40.183\nThen I am going to say,\nyou guessed it, return a new promise.\n\n62\n00:03:42.213 --> 00:03:43.450\nHopefully you guessed it.\n\n63\n00:03:43.450 --> 00:03:44.880\nIf you didn't, no worries.\n\n64\n00:03:46.520 --> 00:03:52.680\nAnd I'm gonna resolve\nimmediately with the (name).\n\n65\n00:03:52.680 --> 00:03:56.090\nAnd we'll tweak this a little bit,\njust to get an idea of how promises work.\n\n66\n00:03:56.090 --> 00:03:59.510\nNow as a reminder, I'm gonna\nun-comment this just for a moment.\n\n67\n00:03:59.510 --> 00:04:01.150\nRight now this would no longer work.\n\n68\n00:04:01.150 --> 00:04:04.850\nI have re-factored it to keep\nfrom using these call backs and\n\n69\n00:04:04.850 --> 00:04:06.400\nend up in this pyramid of doom.\n\n70\n00:04:06.400 --> 00:04:07.840\nThese are three functions deep.\n\n71\n00:04:07.840 --> 00:04:12.100\nI've actually seen these like six, seven\ndeep, and they kinda just cascade and\n\n72\n00:04:12.100 --> 00:04:13.160\ncreep over.\n\n73\n00:04:13.160 --> 00:04:16.680\nIt's like a bad typewriter with\na horrible carriage return with this\n\n74\n00:04:16.680 --> 00:04:18.600\nIt kind of creeps your text off the page.\n\n75\n00:04:18.600 --> 00:04:19.518\n&gt;&gt; It's the pit of Sarlac.\n\n76\n00:04:19.518 --> 00:04:21.046\n&gt;&gt; Yeah.\n[CROSSTALK] You'll be digesting for\n\n77\n00:04:21.046 --> 00:04:21.835\n1,000 years.\n\n78\n00:04:21.835 --> 00:04:26.098\n&gt;&gt; [NOISE] So just a reminder that\nthat's how it originally looked.\n\n79\n00:04:26.098 --> 00:04:29.240\nBut now how's it gonna\nlook using these promises?\n\n80\n00:04:29.240 --> 00:04:31.050\nWell let's see.\n\n81\n00:04:31.050 --> 00:04:34.843\nI'm going to greet, Tim, and\n\n82\n00:04:34.843 --> 00:04:39.280\nactually let's change that name, just\nbecause we've changed how this is working.\n\n83\n00:04:39.280 --> 00:04:40.730\nLet's call this John.\n\n84\n00:04:42.700 --> 00:04:46.090\nSo and then what am I gonna do?\n\n85\n00:04:46.090 --> 00:04:51.800\nWell if I can return a promise from my\nfunction and it follows the signature,\n\n86\n00:04:51.800 --> 00:04:56.770\nI'm resolving with a name,\nwhat has to be fed in to shake hands?\n\n87\n00:04:56.770 --> 00:05:01.010\nWell a name, in order to be used, so\nthat means that I can just .lin and\n\n88\n00:05:01.010 --> 00:05:02.330\ncall that function.\n\n89\n00:05:02.330 --> 00:05:06.110\nIt's gonna return another promise and\njust keep on the waterfall method.\n\n90\n00:05:07.520 --> 00:05:09.870\nAnd we'll go through that one at a time.\n\n91\n00:05:09.870 --> 00:05:13.689\nSo I greet John and\nthen I shake hands, and\n\n92\n00:05:13.689 --> 00:05:19.720\nthen I offer drink and then finally,\n\n93\n00:05:19.720 --> 00:05:25.230\nI'm just gonna write a last\nfunction here that says I am done.\n\n94\n00:05:28.930 --> 00:05:34.410\nNow compare that with that kind of\npyramid of dune craziness, right?\n\n95\n00:05:34.410 --> 00:05:36.340\nI can read this from top to bottom.\n\n96\n00:05:36.340 --> 00:05:41.140\nIt still executes a asynchronously and\nstill make take time to get through.\n\n97\n00:05:41.140 --> 00:05:43.380\nBut I greet John,\nthen I'm gonna shake hands.\n\n98\n00:05:43.380 --> 00:05:46.000\nThen I'm gonna offer him a drink and\nthen I'm done.\n\n99\n00:05:46.000 --> 00:05:49.290\nThat's kind of how we would read that or\nreason about that normally so\n\n100\n00:05:49.290 --> 00:05:52.360\nit's nice to see this\nkind of waterfall method.\n\n101\n00:05:52.360 --> 00:05:54.150\nI'm gonna, and then and then and then.\n\n102\n00:05:55.670 --> 00:05:59.830\nSo let's see how this works out and\nI refresh hi John nice to see you again\n\n103\n00:05:59.830 --> 00:06:03.190\nshaking hands with John, offering\nJohn something to drink, and done.\n\n104\n00:06:03.190 --> 00:06:05.055\nNow these are almost\nhappening immediately,\n\n105\n00:06:05.055 --> 00:06:07.170\nright,that's not how real promises,\n\n106\n00:06:07.170 --> 00:06:11.820\nthat's not the purpose of promises\nthese are long running kind of actions.\n\n107\n00:06:11.820 --> 00:06:16.400\nSo let's go back and\nstir it up a little bit.\n\n108\n00:06:16.400 --> 00:06:21.870\nNotice that this resolve, right,\nthis is immediate, that's fine.\n\n109\n00:06:21.870 --> 00:06:22.520\nHey John, how are you?\n\n110\n00:06:23.600 --> 00:06:24.430\nBut shaking hands,\n\n111\n00:06:24.430 --> 00:06:28.820\nmaybe that takes a little bit\nlonger to kind of get to, right?\n\n112\n00:06:28.820 --> 00:06:33.730\nSo let's simulate this delay,\nthis asynchronocity by again,\n\n113\n00:06:33.730 --> 00:06:34.930\nusing that set time out.\n\n114\n00:06:39.150 --> 00:06:45.930\nAnd boom, and\nthen we do need to wait for a,\n\n115\n00:06:45.930 --> 00:06:51.390\nI need to wrap this in actually a function\nbody so I can keep things straight here.\n\n116\n00:06:52.690 --> 00:06:56.640\nLet's say after two seconds after you've\ngreeted them, then you shake their hands.\n\n117\n00:06:56.640 --> 00:07:02.408\nLet's see how it changes Okay,\n\n118\n00:07:02.408 --> 00:07:06.420\nyou shake their hands and then two\nseconds later you offer them a drink.\n\n119\n00:07:06.420 --> 00:07:12.220\nSo notice that this is kind of odd and\nwhy does it say shaking hands?\n\n120\n00:07:12.220 --> 00:07:14.040\nBecause that's the first\nthing in the function.\n\n121\n00:07:14.040 --> 00:07:15.780\nSo that executes immediately.\n\n122\n00:07:15.780 --> 00:07:18.800\nBut notice all of them still\nhappen in the appropriate order\n\n123\n00:07:18.800 --> 00:07:21.090\nregardless of how long each one took.\n\n124\n00:07:21.090 --> 00:07:23.770\nSo this one, in order to resolve,\ntook two seconds.\n\n125\n00:07:23.770 --> 00:07:27.640\n&gt;&gt; And that's just to simulate the fact\nthat something may be happening that's\n\n126\n00:07:27.640 --> 00:07:32.140\ntaking more time than the CPU can\nprocess in immediate type fashion.\n\n127\n00:07:32.140 --> 00:07:35.890\n&gt;&gt; Right, and\ntypically when I say calculation,\n\n128\n00:07:35.890 --> 00:07:40.150\nJava Script is not known to be\na number crunching machine.\n\n129\n00:07:40.150 --> 00:07:44.551\nIt is possible with visualizations\nin the browser that these numerical\n\n130\n00:07:44.551 --> 00:07:46.834\ncalculations could take some time.\n\n131\n00:07:46.834 --> 00:07:50.629\nBut typically what you'll see\nin the JavaScript environment,\n\n132\n00:07:50.629 --> 00:07:54.913\nin the web environment, is these\npromises are great for either file IO,\n\n133\n00:07:54.913 --> 00:07:58.090\nlike I'm reading files from\neither a network drive.\n\n134\n00:07:58.090 --> 00:08:02.217\nOr on your hard disk if you're using\na different JavaScript environment And\n\n135\n00:08:02.217 --> 00:08:04.547\nthose can take some time to occur, right?\n\n136\n00:08:04.547 --> 00:08:08.090\nI'm reading a really large file,\nyou've gotta read it off a disk.\n\n137\n00:08:08.090 --> 00:08:08.750\nIn addition to,\n\n138\n00:08:08.750 --> 00:08:13.700\nif I'm making a network request to\nanother place in the world, right?\n\n139\n00:08:13.700 --> 00:08:17.600\nSome place on the internet, that network\nrequest can have some variability.\n\n140\n00:08:17.600 --> 00:08:19.430\nIs it going to come\nback a second from now,\n\n141\n00:08:19.430 --> 00:08:22.840\nhalf a second from now,\nten seconds from now?\n\n142\n00:08:22.840 --> 00:08:24.390\nObviously within limits,\n\n143\n00:08:24.390 --> 00:08:28.440\na promise is a really great way of\nbuilding up this is what I want to happen.\n\n144\n00:08:28.440 --> 00:08:30.900\nI recognize though that it may take,\n\n145\n00:08:32.120 --> 00:08:36.690\nthis might be a little out of order,\nit might take a little bit longer.\n\n146\n00:08:36.690 --> 00:08:40.310\nNot out of order but it might take\na little bit longer than I anticipated.\n\n147\n00:08:40.310 --> 00:08:42.580\nSo these are really great\nways of handling that.\n\n148\n00:08:42.580 --> 00:08:44.870\n&gt;&gt; Justin, you bring up\na question at least in my mind.\n\n149\n00:08:44.870 --> 00:08:47.500\nI'm hoping everybody else has\na question similar to this as well.\n\n150\n00:08:48.640 --> 00:08:52.900\nWith the promise, we're saying that,\nokay, it's promising to do something for\n\n151\n00:08:52.900 --> 00:08:54.440\nus, it might not be able\nto do it right this second,\n\n152\n00:08:54.440 --> 00:08:57.380\nbut it promises to do it\nat some point in time.\n\n153\n00:08:57.380 --> 00:09:01.420\nDo the other functions or things that\nit supposed to be going through,\n\n154\n00:09:01.420 --> 00:09:03.790\ndoes it wait for\nthat promise to be fulfilled?\n\n155\n00:09:03.790 --> 00:09:08.120\nOr does it go do them at that time and\nreturn those, that input or\n\n156\n00:09:08.120 --> 00:09:09.250\noutput, or whatever?\n\n157\n00:09:09.250 --> 00:09:13.969\nAnd then when it can't get to the other,\nthe promise thing, then it doesn't.\n\n158\n00:09:13.969 --> 00:09:16.860\n&gt;&gt; So, let's take a look in the context\nof this promise chain, right?\n\n159\n00:09:16.860 --> 00:09:19.990\nIf we look at the greet, and\nthen shake hands and offer drink.\n\n160\n00:09:19.990 --> 00:09:22.670\nSo, greet is gonna return a new promise.\n\n161\n00:09:22.670 --> 00:09:26.280\nWhen that promise resolves,\nthen it's going to run shake hands,\n\n162\n00:09:26.280 --> 00:09:31.090\nwhich returns another promise, and\nthen when that promise resolves,\n\n163\n00:09:31.090 --> 00:09:36.110\nso upon resolution of the previous\npromise, the next dot then will run.\n\n164\n00:09:36.110 --> 00:09:37.851\nSo I don't know if that\nanswers your question, Daniel.\n\n165\n00:09:37.851 --> 00:09:38.751\n&gt;&gt; So it does wait for\n\n166\n00:09:38.751 --> 00:09:42.120\nthe first promise to resolve before\nit goes into the next promise.\n\n167\n00:09:43.390 --> 00:09:47.660\nIf it's not in the promise,\nwhat it sounds like to me is\n\n168\n00:09:47.660 --> 00:09:51.080\nit's saying I'm promising to do something,\nbut\n\n169\n00:09:51.080 --> 00:09:54.130\nI'm gonna do these other things because\nthat promise has yet to be resolved.\n\n170\n00:09:54.130 --> 00:09:54.799\nIs that what's happening?\n\n171\n00:09:54.799 --> 00:09:55.962\n&gt;&gt; Yes, yep.\n\n172\n00:09:55.962 --> 00:09:59.934\nAnd let's just add a couple log statements\nhere, before and after this greeting,\n\n173\n00:09:59.934 --> 00:10:02.884\njust to see that things are kind\nof getting pushed to the side,\n\n174\n00:10:02.884 --> 00:10:05.710\nbecause these may take a little\nwhile to actually happen.\n\n175\n00:10:05.710 --> 00:10:12.041\nSo, let's see here, console.log,\nGoing to a meeting.\n\n176\n00:10:16.062 --> 00:10:19.040\nAnd there's before the promise chain.\n\n177\n00:10:19.040 --> 00:10:27.310\nAnd then if we look at console.log\nDone with the meeting, all right.\n\n178\n00:10:27.310 --> 00:10:29.935\nSo I'm going to say,\nI'm going to the meeting and\n\n179\n00:10:29.935 --> 00:10:33.570\nI'm going through this process right,\nthis acing on this process.\n\n180\n00:10:33.570 --> 00:10:36.364\nNow because these are promises,\nit may take a while to execute.\n\n181\n00:10:36.364 --> 00:10:40.440\nWhat we're gonna see is that\nbehavior that's hard to\n\n182\n00:10:40.440 --> 00:10:45.365\nkind of wrap your mind around and\nlet's just Going to a meeting.\n\n183\n00:10:45.365 --> 00:10:46.015\nHey, John, nice to see you again.\n\n184\n00:10:46.015 --> 00:10:47.037\nDone with a meeting.\n\n185\n00:10:47.037 --> 00:10:48.770\nShaking hands with John.\n\n186\n00:10:48.770 --> 00:10:51.872\nSo, that promise chain's waiting for\n\n187\n00:10:51.872 --> 00:10:55.460\nthose promises to execute in order\neven though they are asynchronous.\n\n188\n00:10:55.460 --> 00:10:58.280\nSo, I get that in order but,\nwhat that means is,\n\n189\n00:10:58.280 --> 00:11:02.970\nI can actually skip this block as\nthose promises are waiting to resolve.\n\n190\n00:11:02.970 --> 00:11:03.830\nI printed this.\n\n191\n00:11:03.830 --> 00:11:08.170\nThese two immediately came back and\ndid the reaction, right?\n\n192\n00:11:08.170 --> 00:11:11.490\nSo actually the promise return here\ntakes a little while to resolve.\n\n193\n00:11:11.490 --> 00:11:14.000\nBut the action that occurred\nhappened immediately.\n\n194\n00:11:14.000 --> 00:11:16.290\nAnd while this is waiting,\nit skips over and says hey,\n\n195\n00:11:16.290 --> 00:11:18.720\nI'm done with the meeting,\nwhen in fact you're not done.\n\n196\n00:11:18.720 --> 00:11:21.240\nAnd that's where you need to\nbe careful about promises\n\n197\n00:11:21.240 --> 00:11:25.920\nif you're like I need all these\npromises to resolve and then do this.\n\n198\n00:11:25.920 --> 00:11:27.340\nIf you say and then,\n\n199\n00:11:27.340 --> 00:11:32.300\nthat should be part of your promise chain\nthat has to occur as part of the .then\n\n200\n00:11:32.300 --> 00:11:38.050\nchain of events cuz otherwise you'll\nget stuff that's crazy, right?\n\n201\n00:11:38.050 --> 00:11:42.849\nSo now how does this work\nwith these error handling?\n\n202\n00:11:44.030 --> 00:11:48.000\nIf I have a .then, .then, .then,\nI showed you originally just a .then and\n\n203\n00:11:48.000 --> 00:11:49.808\na catch right?\n\n204\n00:11:49.808 --> 00:11:51.780\nHow does error handling\nhappen within promises,\n\n205\n00:11:51.780 --> 00:11:53.920\nwhat if a network request fails right?\n\n206\n00:11:53.920 --> 00:11:57.902\nI don't know if you've ever been on the\nInternet when you're like click, let's do\n\n207\n00:11:57.902 --> 00:12:01.626\nthis, you wait a little bit, somehow\nthe Internet goes out, power goes out.\n\n208\n00:12:01.626 --> 00:12:05.823\nBack in my 56k days you heard\nthe [SOUND] of the call waiting and\n\n209\n00:12:05.823 --> 00:12:09.950\nyou knew the disconnect of doom\nwas getting ready to happen.\n\n210\n00:12:09.950 --> 00:12:15.370\nSo how do promises handle those if they're\nwaiting for these requests to occur?\n\n211\n00:12:15.370 --> 00:12:17.020\nWell, I'm gonna take these out.\n\n212\n00:12:17.020 --> 00:12:17.840\nBut great question,\n\n213\n00:12:17.840 --> 00:12:23.060\nDaniel, it does illustrate some of\nthe nuances of these promise handling.\n\n214\n00:12:23.060 --> 00:12:28.006\nLet's create a new function and\nlet's just call it errorHandler,\n\n215\n00:12:28.006 --> 00:12:30.011\nit's very original name.\n\n216\n00:12:30.011 --> 00:12:31.796\n&gt;&gt; I wonder what it does.\n\n217\n00:12:31.796 --> 00:12:34.670\n&gt;&gt; I think it makes ice cream,\nit's crazy, it's crazy.\n\n218\n00:12:34.670 --> 00:12:38.870\nSo it's just an alias for\nconsole.log of the error.\n\n219\n00:12:38.870 --> 00:12:41.630\nNow, again, this is not how you\nwould actually handle errors.\n\n220\n00:12:41.630 --> 00:12:44.410\nThis is just for\nillustration purposes only.\n\n221\n00:12:44.410 --> 00:12:47.670\nIf you handle errors like this\nall the time, could be a bad day.\n\n222\n00:12:47.670 --> 00:12:48.648\nCould be a bad day.\n\n223\n00:12:48.648 --> 00:12:52.826\nSo I have these promise chains and\nat the very end,\n\n224\n00:12:52.826 --> 00:12:56.420\nI'm gonna .catch and run error handler.\n\n225\n00:12:56.420 --> 00:13:00.760\nSo if there's an error, it should be\nthrown into that .catch kind of chain.\n\n226\n00:13:02.110 --> 00:13:07.190\nSo let's say this happen, let's\nintentionally break something, right.\n\n227\n00:13:07.190 --> 00:13:11.292\nSo, I'm actually going to first,\nreject here, and\n\n228\n00:13:11.292 --> 00:13:14.405\nall that's gonna do is reject the name.\n\n229\n00:13:14.405 --> 00:13:19.110\nI'm gonna leave name there just so\nwe can kinda be expeditious about this.\n\n230\n00:13:19.110 --> 00:13:21.340\nObviously this reject\nstatement will not to say,\n\n231\n00:13:21.340 --> 00:13:24.110\nJohn the reject would handle the error.\n\n232\n00:13:24.110 --> 00:13:27.984\nIt would give you back the error that\noccurred, like a time out error or\n\n233\n00:13:27.984 --> 00:13:30.883\na file IO error or\nsome kind of computational error.\n\n234\n00:13:30.883 --> 00:13:33.310\nSo let's go see how this works.\n\n235\n00:13:33.310 --> 00:13:36.610\nNow this John here, why did that occur?\n\n236\n00:13:36.610 --> 00:13:38.320\nWhen did that occur?\n\n237\n00:13:38.320 --> 00:13:40.600\nWell, this reject\nhappened in this promise.\n\n238\n00:13:40.600 --> 00:13:42.320\nSo it said, hey, John,\nnice to meet you, and\n\n239\n00:13:42.320 --> 00:13:46.180\nthen I immediately rejected,\nwith this new promise that's sent back.\n\n240\n00:13:46.180 --> 00:13:51.220\nWe'll notice that part was the very\nfirst in the promise chain, but\n\n241\n00:13:51.220 --> 00:13:55.320\nit got handled by the .catch at\nthe very end of the promise chain.\n\n242\n00:13:55.320 --> 00:13:59.612\nWell, that's handy because then,\nif any of these throw an error,\n\n243\n00:13:59.612 --> 00:14:02.610\nthis .catch will always grab them.\n\n244\n00:14:02.610 --> 00:14:06.640\nBecause one of the worst things in\nprograming that can happen for me, for\n\n245\n00:14:06.640 --> 00:14:11.198\nyou or for anybody else, if you can find\nsomebody that talks about silent errors or\n\n246\n00:14:11.198 --> 00:14:12.870\nthings that are going wrong.\n\n247\n00:14:12.870 --> 00:14:19.747\nBut they're kind of being swallowed up,\nthat is rough times cuz you're like,\n\n248\n00:14:19.747 --> 00:14:25.510\nit's broke but I have no visible\noutput about why it's broke.\n\n249\n00:14:25.510 --> 00:14:30.230\nSo then you spend the next four hours\nkind of going, wonder why it's broke?\n\n250\n00:14:30.230 --> 00:14:35.760\nBut if you always .catch, at the very\nleast .catch and have this console.log.\n\n251\n00:14:35.760 --> 00:14:38.800\nMaybe you don't know what\nkind of errors may occur.\n\n252\n00:14:38.800 --> 00:14:41.630\nGet an idea of always\ncatching those errors,\n\n253\n00:14:41.630 --> 00:14:43.430\nbecause otherwise you may\nget some weird stuff.\n\n254\n00:14:43.430 --> 00:14:45.970\nIt'll either break or maybe you're not\n\n255\n00:14:45.970 --> 00:14:49.330\nresolve rejecting appropriately if\nyou're building your own promises, and\n\n256\n00:14:49.330 --> 00:14:53.200\nthe error kind of just gets swallowed\nup and disappears into the ether.\n\n257\n00:14:53.200 --> 00:14:54.440\nThat would be a horrible thing.\n\n258\n00:14:55.780 --> 00:15:00.930\nNow just to show you that it does handle\nthose regardless of where they occur,\n\n259\n00:15:00.930 --> 00:15:03.340\nif I come here and change this to reject.\n\n260\n00:15:03.340 --> 00:15:09.800\nRight, we had Hey John, nice to see you\nagain, and then I rejected the name.\n\n261\n00:15:11.090 --> 00:15:15.340\nShaking hands with John, and then it calls\nJohn again, well that's because that\n\n262\n00:15:15.340 --> 00:15:19.820\nerror, that .catch still called that\nerror upon the reject statement.\n\n263\n00:15:19.820 --> 00:15:24.396\nSo promises are incredibly powerful\nof handling this asynchronous\n\n264\n00:15:24.396 --> 00:15:27.595\nlike flow when there's asynchronous\nprocess is going on, right.\n\n265\n00:15:27.595 --> 00:15:29.569\nThese take a little bit of time.\n\n266\n00:15:29.569 --> 00:15:32.670\nNow, I'm sure you're wondering,\nwell this is all fun and good.\n\n267\n00:15:32.670 --> 00:15:34.710\nWhen would I actually used this?\n\n268\n00:15:34.710 --> 00:15:35.639\nWell, I'm glad you asked.\n\n269\n00:15:36.860 --> 00:15:40.520\nTypically, I use these\nduring network requests,\n\n270\n00:15:40.520 --> 00:15:42.490\nwhen I make a call out\nto some kind of service.\n\n271\n00:15:42.490 --> 00:15:46.740\nAnd we're actually gonna do that\nbecause there's a new tool kind of\n\n272\n00:15:46.740 --> 00:15:47.820\ncoming into play.\n\n273\n00:15:47.820 --> 00:15:51.210\nNot necessarily part of ES6,\nit's a browser tool.\n\n274\n00:15:51.210 --> 00:15:55.237\nIt's called Fetch, and\nit's made for making HTTP request,\n\n275\n00:15:55.237 --> 00:15:57.100\nlike I'm making a request.\n\n276\n00:15:57.100 --> 00:16:00.533\nNow there are a bunch of ways\nthat this happened originally,\n\n277\n00:16:00.533 --> 00:16:04.498\nand actually one of the huge issues,\nit was browser specific.\n\n278\n00:16:04.498 --> 00:16:08.218\nOkay, if this is I8,\nI need to do it this way.\n\n279\n00:16:08.218 --> 00:16:11.050\nIf it's I9, I need to do it this way.\n\n280\n00:16:11.050 --> 00:16:13.590\nIf it's these other ones,\nI need to do it this other way.\n\n281\n00:16:13.590 --> 00:16:15.600\nSo I had to handle all of these and\n\n282\n00:16:15.600 --> 00:16:20.820\nthen I had to make sure I had all my\non listening on change event handlers.\n\n283\n00:16:20.820 --> 00:16:23.380\nFetch uses ES6 promises.\n\n284\n00:16:23.380 --> 00:16:24.750\nAnd unifies that.\n\n285\n00:16:24.750 --> 00:16:27.130\nNow, we're gonna take a look at\nthe documentation for prefetch.\n\n286\n00:16:27.130 --> 00:16:32.750\nJust to emphasize, this is\nexperimental and may change in time.\n\n287\n00:16:32.750 --> 00:16:36.650\nBut currently, it is one of the things\nthat uses promises by default.\n\n288\n00:16:36.650 --> 00:16:40.150\nSo, let's go ahead and\nhop over into our documentation.\n\n289\n00:16:40.150 --> 00:16:44.444\nAnd one of my favorite documentation\nsources is the Mozilla Developer Network.\n\n290\n00:16:47.220 --> 00:16:50.420\nSo if I type in fetch,\nif I look at the fetch API,\n\n291\n00:16:50.420 --> 00:16:56.100\nyou'll notice at the very top it says\nthis is an experimental technology.\n\n292\n00:16:56.100 --> 00:16:59.340\nBecause this technology\nspecification is not stabilized,\n\n293\n00:16:59.340 --> 00:17:01.230\nyou do need to be careful, right?\n\n294\n00:17:01.230 --> 00:17:05.046\nSo I'll show you how to use\nat a very simplistic level.\n\n295\n00:17:05.046 --> 00:17:12.360\nBut notice Chrome streaming body response,\nso you can actually create an open stream.\n\n296\n00:17:12.360 --> 00:17:17.860\nHave a buffered stream for Chrome,\nEdge, Firefox depending on the version.\n\n297\n00:17:17.860 --> 00:17:19.640\nIE, no support.\n\n298\n00:17:19.640 --> 00:17:21.790\nOkay, well, that's a problem.\n\n299\n00:17:21.790 --> 00:17:27.101\nOpera and then Safari but notice Safari\ndoes not have streaming support.\n\n300\n00:17:27.101 --> 00:17:31.504\nNow, if you have one of these browsers and\nyou really want to try this out,\n\n301\n00:17:31.504 --> 00:17:34.570\nthere are several,\nwhat are called, polyfills.\n\n302\n00:17:34.570 --> 00:17:37.920\nAre kind of patches to help with this.\n\n303\n00:17:37.920 --> 00:17:43.600\nIf I look for 'fetch polyfill',\n\n304\n00:17:43.600 --> 00:17:48.170\nthere is one created actually by\nGitHub and show you how to use it.\n\n305\n00:17:48.170 --> 00:17:51.675\nIt will create this fetch object that\nmimics this behavior without having one of\n\n306\n00:17:51.675 --> 00:17:52.474\nthose browsers.\n\n307\n00:17:52.474 --> 00:17:54.509\nNow, it does take a little bit of setup.\n\n308\n00:17:54.509 --> 00:17:56.973\nWe're not gonna spend time on that,\nat this current time.\n\n309\n00:17:56.973 --> 00:18:00.880\nBut it does have pretty good\ninstallation instructions.\n\n310\n00:18:00.880 --> 00:18:06.943\nNow, what I mean is, it uses these,\nbut if you continue to search around.\n\n311\n00:18:06.943 --> 00:18:11.120\nIt'll show you, hey, you can just\ninclude these like your script.app, so\n\n312\n00:18:11.120 --> 00:18:12.609\nscriptsource.app.js.\n\n313\n00:18:12.609 --> 00:18:14.262\nSo keep those in mind.\n\n314\n00:18:14.262 --> 00:18:17.126\nThis will give you the same power if\nyou're in a browser that is not currently\n\n315\n00:18:17.126 --> 00:18:18.090\nsupported.\n\n316\n00:18:18.090 --> 00:18:20.440\nWith minor nuanced differences.\n\n317\n00:18:20.440 --> 00:18:23.159\nFor our purposes,\nthe differences should be none.\n\n318\n00:18:23.159 --> 00:18:25.751\nShould be,\nthat's a very important key word there.\n\n319\n00:18:25.751 --> 00:18:28.081\nSo here's fetch.\n\n320\n00:18:28.081 --> 00:18:30.270\nWhat is fetch gonna allow us to do?\n\n321\n00:18:30.270 --> 00:18:32.450\nMake those HTTP requests do other things.\n\n322\n00:18:32.450 --> 00:18:35.350\nNow, what I've actually\ndone is just some very\n\n323\n00:18:37.620 --> 00:18:42.420\ncontrived examples of making\na request to a fake web based API.\n\n324\n00:18:42.420 --> 00:18:47.580\nPromises are very common in this and we'll\ntake a look at those and how it's used.\n\n325\n00:18:47.580 --> 00:18:49.507\nSo let's go ahead and comment this out.\n\n326\n00:18:52.712 --> 00:18:56.408\nIf you've never seen HTTP requests before,\nthis is a fairly easy way to get\n\n327\n00:18:56.408 --> 00:18:59.471\nintroduced as long as you can\nwrap your mind around promises.\n\n328\n00:18:59.471 --> 00:19:01.657\nSo do bear with me.\n\n329\n00:19:01.657 --> 00:19:04.300\nJust trying to show some of the power and\nactual,\n\n330\n00:19:04.300 --> 00:19:07.987\nhow would you use this instead of\ncreating a meeting promise chain.\n\n331\n00:19:07.987 --> 00:19:11.170\nIf I scroll down here,\nthere's some more hidden stuff there.\n\n332\n00:19:11.170 --> 00:19:13.185\nI know, very, very sneaky of me.\n\n333\n00:19:13.185 --> 00:19:19.610\nAnd I'm just gonna cut and\npaste these up here and uncomment.\n\n334\n00:19:19.610 --> 00:19:23.794\nNow, notice I've named these with\nall capital letters with consts.\n\n335\n00:19:23.794 --> 00:19:26.007\nThese are kinda like my base URLs.\n\n336\n00:19:26.007 --> 00:19:31.757\nIf I go this random user.me API,\nwhat does that do?\n\n337\n00:19:31.757 --> 00:19:35.948\nRandom user.me/api.\n\n338\n00:19:35.948 --> 00:19:40.740\nAnd it's kinda hard to see,\nlet's zoom in here.\n\n339\n00:19:42.280 --> 00:19:46.230\nBut what this provides to me is\nwhat's called a JSON response.\n\n340\n00:19:46.230 --> 00:19:49.788\nIt is a string representation\nof a JavaScript object.\n\n341\n00:19:49.788 --> 00:19:54.940\nAnd when I slurp it in,\nit will actually kind of manipulate,\n\n342\n00:19:54.940 --> 00:19:59.770\nserialize and parse and create\nan actual JavaScript data structure.\n\n343\n00:19:59.770 --> 00:20:02.390\nJust as you see it here and\nwe'll take a look at that.\n\n344\n00:20:02.390 --> 00:20:05.980\nIf I also go to the type\nof code JSON placeholder,\n\n345\n00:20:05.980 --> 00:20:09.410\nit will simulate blog post entries.\n\n346\n00:20:09.410 --> 00:20:10.830\nSo we'll take a look at both of those.\n\n347\n00:20:10.830 --> 00:20:13.300\nNow how do I use this fetch API?\n\n348\n00:20:13.300 --> 00:20:15.490\nWell, let's see here.\n\n349\n00:20:15.490 --> 00:20:20.270\nSo const, and let's just say users,\nand I'm gonna say fetch.\n\n350\n00:20:20.270 --> 00:20:23.592\nAnd then I'm just gonna say user_API.\n\n351\n00:20:23.592 --> 00:20:26.185\nNow before we go any further,\n\n352\n00:20:26.185 --> 00:20:31.599\nlet's see what's in that user API so\nusers so I called Fetch.\n\n353\n00:20:31.599 --> 00:20:34.761\nAnd just gonna close this out here.\n\n354\n00:20:34.761 --> 00:20:36.670\nAnd I refresh, aha.\n\n355\n00:20:36.670 --> 00:20:40.321\nWe have some of those ES6\npromises as we've just seen.\n\n356\n00:20:40.321 --> 00:20:42.488\nIt's unresolved.\n\n357\n00:20:42.488 --> 00:20:45.100\nIt's finally resolved, there we go.\n\n358\n00:20:45.100 --> 00:20:47.980\nAnd then I have a response.\n\n359\n00:20:47.980 --> 00:20:49.440\nWell, what is that?\n\n360\n00:20:49.440 --> 00:20:51.049\nWell, it's actually this thing\nwith additional methods.\n\n361\n00:20:51.049 --> 00:20:54.916\nSo I get this weird response object, so\nthere's some tweaking that I have to do.\n\n362\n00:20:54.916 --> 00:20:58.570\nBut I have this ability to come back.\n\n363\n00:20:58.570 --> 00:21:02.454\nNow keep in mind when I'm making\nfetch requests, there are websites or\n\n364\n00:21:02.454 --> 00:21:05.767\nservers that I'm just running\nthis in an index.html file.\n\n365\n00:21:05.767 --> 00:21:07.928\nYou can block that behavior.\n\n366\n00:21:07.928 --> 00:21:11.875\nSo if you're not running this through\na server, this may get blocked on like\n\n367\n00:21:11.875 --> 00:21:15.648\nmaking a request to Twitter or\nFacebook through some of their open APIs.\n\n368\n00:21:15.648 --> 00:21:19.930\nSo you would actually have to have this\nrunning from a server in order to do this.\n\n369\n00:21:19.930 --> 00:21:22.616\nBut these, just for instructor purposes,\n\n370\n00:21:22.616 --> 00:21:25.964\ndo allow us to make a request\nfrom an index.html file.\n\n371\n00:21:25.964 --> 00:21:28.905\nSo I have these, Well,\nhow do I get access to those?\n\n372\n00:21:28.905 --> 00:21:32.557\nBut I saw that that's a promise and\nif it's a promise, what can I do?\n\n373\n00:21:32.557 --> 00:21:36.012\nWell, I can actually say users.then and\n\n374\n00:21:36.012 --> 00:21:41.752\nwe saw this syntax originally when\nI saved the promise to a variable.\n\n375\n00:21:41.752 --> 00:21:48.476\nSo I'm gonna get the response and\nlet's just console.log a response.\n\n376\n00:21:48.476 --> 00:21:54.069\nSo users.then,\nconsole.log(response), nope.\n\n377\n00:21:54.069 --> 00:21:54.650\nDid I miss?\n\n378\n00:21:54.650 --> 00:21:55.674\n&gt;&gt; Response is not working for you.\n\n379\n00:21:55.674 --> 00:21:58.940\n&gt;&gt; Repsonse, repsonse, response.\n\n380\n00:22:01.050 --> 00:22:05.540\nSo now I have this response,\nI have started to extract that data.\n\n381\n00:22:05.540 --> 00:22:08.100\nWell if I look, well,\nI don't see the data.\n\n382\n00:22:08.100 --> 00:22:13.575\nI saw that I have that JSON string,\nJavaScript object that I should have.\n\n383\n00:22:13.575 --> 00:22:17.531\nBut if I look at the [INAUDIBLE] proto,\nI have these additional methods.\n\n384\n00:22:17.531 --> 00:22:19.918\nOo, JSON, I wonder what that does.\n\n385\n00:22:19.918 --> 00:22:22.234\nWel, I'm a big proponent of trying it.\n\n386\n00:22:22.234 --> 00:22:29.074\nSo in this promise, if I response.json,\nit's all in the response object,\n\n387\n00:22:29.074 --> 00:22:33.912\nwhich is built in as this fetch API,\nthis fetch usage,\n\n388\n00:22:33.912 --> 00:22:40.020\nresponse.JSON is now going to\nbe returned as the next promise.\n\n389\n00:22:40.020 --> 00:22:46.741\nSo I have to call .then, and\nI'm gonna get some data and\n\n390\n00:22:46.741 --> 00:22:50.757\nlet's console.log data here.\n\n391\n00:22:50.757 --> 00:22:57.282\nAnd I refresh and now I have an object\nwith information and results.\n\n392\n00:22:57.282 --> 00:23:01.780\nAnd results has a fake user.\n\n393\n00:23:01.780 --> 00:23:06.950\nThis would be like I have a website that\nI have built that has user information,\n\n394\n00:23:06.950 --> 00:23:08.130\nlike a social media site.\n\n395\n00:23:08.130 --> 00:23:11.815\nSo if I'm building this,\nI would have an API that serves this up,\n\n396\n00:23:11.815 --> 00:23:15.033\na web-based route that gives\nme this information back.\n\n397\n00:23:15.033 --> 00:23:20.562\nSo I have all of this information\nas part of this object results, so\n\n398\n00:23:20.562 --> 00:23:26.705\nlet's look at data.results and\nstart peeling away all of those layers.\n\n399\n00:23:26.705 --> 00:23:32.645\nSo I refresh and there's my zero, okay?\n\n400\n00:23:32.645 --> 00:23:34.845\nSo that's an array,\nI want the zeroeth one.\n\n401\n00:23:36.782 --> 00:23:40.420\nAnd now I actually have\naccess to my full user.\n\n402\n00:23:40.420 --> 00:23:42.800\nSo, that's how that works.\n\n403\n00:23:42.800 --> 00:23:44.990\nLet's look at a different end point,\n\n404\n00:23:44.990 --> 00:23:48.000\nthis different URL because\nthis is the forewarning.\n\n405\n00:23:48.000 --> 00:23:52.190\nNot all of these response objects come\nback with the exact same structure.\n\n406\n00:23:52.190 --> 00:23:53.994\nThe response does but\nthe data associated with them.\n\n407\n00:23:53.994 --> 00:23:56.238\nSo here's my promise.\n\n408\n00:23:56.238 --> 00:23:58.588\nNow I've stored this to a variable.\n\n409\n00:23:58.588 --> 00:24:03.345\nUsually what you'll see is people\nfetch.then.then just right in\n\n410\n00:24:03.345 --> 00:24:05.185\nline because you have to.\n\n411\n00:24:05.185 --> 00:24:08.690\nOne of your .thens is going to\ncreate the results that you want.\n\n412\n00:24:08.690 --> 00:24:12.946\nYou can't necessarily store that in\na user's variable at the very end, and\n\n413\n00:24:12.946 --> 00:24:15.560\nthen just go on about your business.\n\n414\n00:24:15.560 --> 00:24:18.010\nSo, how would that work?\n\n415\n00:24:19.480 --> 00:24:24.320\nSo if I fetch, and\nI'm gonna fetch from the POSTS_API,\n\n416\n00:24:24.320 --> 00:24:28.270\nand then, not all caps,\nI'm gonna get a response.\n\n417\n00:24:29.510 --> 00:24:33.060\nDon't actually need those parenthesis\nbecause this is a single argument, and\n\n418\n00:24:33.060 --> 00:24:36.670\nI'm gonna say response.json.\n\n419\n00:24:36.670 --> 00:24:39.370\nAnd then I'm gonna get the data,\n\n420\n00:24:39.370 --> 00:24:44.189\nor the json data in this case, and I'm\njust gonna see what that data looks like.\n\n421\n00:24:45.240 --> 00:24:47.666\nSo if I refresh, wow.\n\n422\n00:24:47.666 --> 00:24:51.600\nThat is a lot of data.\n\n423\n00:24:51.600 --> 00:24:57.370\nSo notice that, here,\nI had this additional results portion.\n\n424\n00:24:57.370 --> 00:25:01.130\nBut here,\nthe data is just a giant array of objects.\n\n425\n00:25:01.130 --> 00:25:05.700\nAnd each one of these objects has a body,\nan ID, a title, and a user ID.\n\n426\n00:25:05.700 --> 00:25:08.740\nSo this would be like\na database table of posts\n\n427\n00:25:08.740 --> 00:25:11.850\nif you're maintaining a blog\nsite that you have built.\n\n428\n00:25:11.850 --> 00:25:13.680\nSo, these do have different structures.\n\n429\n00:25:13.680 --> 00:25:15.740\nBut where could I use these?\n\n430\n00:25:15.740 --> 00:25:20.090\nWell, finally, this is a great place\nto see, I can take this data and\n\n431\n00:25:20.090 --> 00:25:24.510\ntransform at the end of a promise, and\nkind of get this update asynchronously.\n\n432\n00:25:25.830 --> 00:25:27.660\nNow I'm gonna keep this very simple,\nDaniel.\n\n433\n00:25:27.660 --> 00:25:33.228\nJust because building web apps is\nnot the ultimate goal here but\n\n434\n00:25:33.228 --> 00:25:36.079\nif I wanted a userOutput right?\n\n435\n00:25:36.079 --> 00:25:38.720\nAnd that takes a userObject.\n\n436\n00:25:42.312 --> 00:25:44.550\nAnd all I want to do is return,\n\n437\n00:25:48.540 --> 00:25:53.120\nA section which is an HTML tag again if\nyou are unfamiliar with HTML we do have\n\n438\n00:25:53.120 --> 00:25:57.520\nsome HTML in our course library,\ndefinitely check those out.\n\n439\n00:25:57.520 --> 00:26:01.919\nAnd then I'm just gonna say h1 and\n\n440\n00:26:01.919 --> 00:26:07.689\nthen end the h1 and\nuse this interpolation.\n\n441\n00:26:07.689 --> 00:26:10.290\nNow this user object,\nI need to go inspect and\n\n442\n00:26:10.290 --> 00:26:13.320\nsee what information am I gonna put here.\n\n443\n00:26:13.320 --> 00:26:16.548\nSo if I look, okay, login name.\n\n444\n00:26:16.548 --> 00:26:21.421\nName, so if I have the name, I can\nactually just put the name as part of\n\n445\n00:26:21.421 --> 00:26:25.050\nthis user, so\nit this would be like a profile view.\n\n446\n00:26:26.575 --> 00:26:32.460\nSo I can say userObject.name.first.\n\n447\n00:26:32.460 --> 00:26:38.060\nNow I can call object like actual\nJavaScript inside of these interpolation.\n\n448\n00:26:38.060 --> 00:26:42.550\nSo let's see what happens here if\ninstead of console logging the results\n\n449\n00:26:43.880 --> 00:26:50.110\nI instead say userOutput,\nParens, lots of parens.\n\n450\n00:26:51.740 --> 00:26:55.320\nSo now I'm logging what is\nthe result of that user output and\n\n451\n00:26:55.320 --> 00:26:59.580\nthis is something that you could\ndynamically put into a webpage,\n\n452\n00:26:59.580 --> 00:27:03.370\nmanipulate further, but\nlet's see here now.\n\n453\n00:27:04.830 --> 00:27:05.560\nWait for it.\n\n454\n00:27:07.383 --> 00:27:08.580\nSo I'm debugging here.\n\n455\n00:27:12.747 --> 00:27:15.610\nUser output.\n\n456\n00:27:15.610 --> 00:27:20.420\nSo user out, ah-ha.\n\n457\n00:27:20.420 --> 00:27:25.050\nYou actually have to use the appropriate\nvariable name in there otherwise,\n\n458\n00:27:25.050 --> 00:27:27.150\nyou just get a bunch of undefined stuff.\n\n459\n00:27:27.150 --> 00:27:32.420\nSo notice that I now have the name\nof the person, Jenn, as my user.\n\n460\n00:27:33.550 --> 00:27:37.120\nKeep in mind, though, upon refresh,\nthis is just replaying,\n\n461\n00:27:37.120 --> 00:27:38.960\nI will get new user information.\n\n462\n00:27:38.960 --> 00:27:41.547\nSo just keep that in mind.\n\n463\n00:27:41.547 --> 00:27:46.970\nSo fetch is a number one, kinda the way\nthat ES6 promises are very prevalent.\n\n464\n00:27:46.970 --> 00:27:47.930\nThat is not the only way.\n\n465\n00:27:49.490 --> 00:27:51.040\nTake some research, take a look at it.\n\n466\n00:27:51.040 --> 00:27:52.560\nPromises are incredibly powerful.\n\n467\n00:27:52.560 --> 00:27:56.280\nThey make your life a lot easier than all\nthose call backs into the pyramid of doom.\n\n468\n00:27:56.280 --> 00:27:57.750\nOr what was the thing?\n\n469\n00:27:57.750 --> 00:27:58.263\n&gt;&gt; The pit of Sarlac.\n\n470\n00:27:58.263 --> 00:27:58.807\n&gt;&gt; The pit of Sarlac.\n\n471\n00:27:58.807 --> 00:28:01.362\n&gt;&gt; [LAUGH]\n&gt;&gt; The Sarlac,\n\n472\n00:28:01.362 --> 00:28:04.840\ndoesn't roll off the tongue,\ndoesn't roll off the tongue.\n\n473\n00:28:04.840 --> 00:28:09.469\nBut Daniel, we've seen a great\ndeal of power within promises but\n\n474\n00:28:09.469 --> 00:28:13.771\nI think that kind of wraps this up for\nthese promises things.\n\n475\n00:28:13.771 --> 00:28:14.641\n&gt;&gt; Awesome, do you promise?\n\n476\n00:28:14.641 --> 00:28:16.092\n&gt;&gt; I promise.\n&gt;&gt; Okay, well, I'm.\n\n477\n00:28:16.092 --> 00:28:17.822\n&gt;&gt; All right, excellent.\n\n478\n00:28:17.822 --> 00:28:21.817\nWell yes, obviously promises,\nyou've made a good case for use of them.\n\n479\n00:28:21.817 --> 00:28:24.180\nHow to use them, why we should use them,\nwhen we should use them.\n\n480\n00:28:24.180 --> 00:28:27.202\nAnd then of course, the nice,\nnew fetch feature, as well,\n\n481\n00:28:27.202 --> 00:28:30.722\nto kinda put those two together and\nmake a very powerful combination.\n\n482\n00:28:30.722 --> 00:28:35.815\nThe one-two-punch, that might be in your\nweb API, or whatever you're creating.\n\n483\n00:28:35.815 --> 00:28:37.930\nJustin, we do thank you for stopping by.\n\n484\n00:28:37.930 --> 00:28:40.200\nBut you're right,\nI'm looking at the clock over there and\n\n485\n00:28:40.200 --> 00:28:43.200\nshe's screaming at us saying,\nit is time for us to go.\n\n486\n00:28:43.200 --> 00:28:45.170\nSo we do thank you for joining us today.\n\n487\n00:28:45.170 --> 00:28:48.540\nSigning off for ITProTV,\nI've been your host, Daniel Lowrie.\n\n488\n00:28:48.540 --> 00:28:49.860\n&gt;&gt; And I'm Justin Dennison.\n\n489\n00:28:49.860 --> 00:28:50.850\n&gt;&gt; And we'll see you next time.\n\n490\n00:28:50.850 --> 00:28:58.350\n[MUSIC]\n\n491\n00:28:58.350 --> 00:29:02.744\n&gt;&gt; Thank you for watching IT PRO.TV\n\n",
          "vimeoId": "204910631"
        },
        {
          "description": "In this episode, Daniel and Justin begin their look into Generators as a new feature in ES6, as iterators. They begin by explaining the use of the new Yield keyword to create Generators output finite and infinite sequences of values.",
          "length": "1281",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-generators-021317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-generators-021317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-generators-021317-1-sm.jpg",
          "title": "Generators",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:03.182\nWelcome to ITPRO.TV, I'm your host, Don.\n\n2\n00:00:03.182 --> 00:00:04.065\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:04.065 --> 00:00:08.319\n[MUSIC]\n\n4\n00:00:08.319 --> 00:00:09.763\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:09.763 --> 00:00:12.524\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:12.524 --> 00:00:16.070\nwelcome to another great\nepisode of ITPRO.TV.\n\n7\n00:00:16.070 --> 00:00:17.850\nI'm your host, Daniel Lowrie, and\n\n8\n00:00:17.850 --> 00:00:22.160\nin today's episode we are continuing\non with our What's New in ES6 series.\n\n9\n00:00:22.160 --> 00:00:24.710\nAnd joining me in the studio yet\nagain, our good friend and mentor,\n\n10\n00:00:24.710 --> 00:00:25.850\nMr Justin Dennison.\n\n11\n00:00:25.850 --> 00:00:27.510\nJustin, my man, how's it going today?\n\n12\n00:00:27.510 --> 00:00:28.460\n&gt;&gt; It's going fairly well.\n\n13\n00:00:28.460 --> 00:00:29.220\nHow are you today, Daniel?\n\n14\n00:00:29.220 --> 00:00:32.046\n&gt;&gt; I'm doing very well, thank you.\n\n15\n00:00:32.046 --> 00:00:33.580\n&gt;&gt; All right.\n[LAUGH] We're doing well.\n\n16\n00:00:33.580 --> 00:00:35.050\n&gt;&gt; We've established that then.\n\n17\n00:00:35.050 --> 00:00:37.090\n[LAUGH]\n&gt;&gt; We should probably carry on with some\n\n18\n00:00:37.090 --> 00:00:38.240\nES6 JavaScript stuff.\n\n19\n00:00:38.240 --> 00:00:39.400\n&gt;&gt; If we must.\n\n20\n00:00:39.400 --> 00:00:40.510\n&gt;&gt; I guess we must.\n\n21\n00:00:40.510 --> 00:00:44.560\nSo, we've covered several\nthings in ES6 JavaScript, but\n\n22\n00:00:44.560 --> 00:00:50.760\nnow comes along some of these really new\nthat's crazy, shiny object features.\n\n23\n00:00:50.760 --> 00:00:52.900\nAnd we're gonna talk\nabout generators today.\n\n24\n00:00:52.900 --> 00:00:55.130\nBut before I talk about generators,\nand just so\n\n25\n00:00:55.130 --> 00:00:58.170\nwe know I'm not talking about\nthe thing that generates electricity\n\n26\n00:00:58.170 --> 00:01:01.730\nif your power goes out, but\nit might be misconstrued as that.\n\n27\n00:01:01.730 --> 00:01:04.752\n&gt;&gt; That would be cool if\nyou could do that in Java.\n\n28\n00:01:04.752 --> 00:01:05.500\n&gt;&gt; [LAUGH]\n&gt;&gt; Yeah, well,\n\n29\n00:01:05.500 --> 00:01:08.940\nI just coded up this web app and\nnow I have free electricity.\n\n30\n00:01:08.940 --> 00:01:12.210\nOkay, yeah, it's not that, but\nlet's take a step back and\n\n31\n00:01:12.210 --> 00:01:14.030\ntalk about those iterator things.\n\n32\n00:01:14.030 --> 00:01:16.910\nWe saw some iterators before,\nif you haven't seen that episode,\n\n33\n00:01:16.910 --> 00:01:21.480\nI definitely recommend going and\nwatching iterators, and new for of loop,\n\n34\n00:01:21.480 --> 00:01:26.000\nbecause generators are a way of creating\nthese new, kind of iterative practices.\n\n35\n00:01:26.000 --> 00:01:31.926\nBut they also provide us a way to\nhandle this asynchronous control flow.\n\n36\n00:01:31.926 --> 00:01:35.350\nSo, iterators, what do we have to\nhave in order to have an iterator?\n\n37\n00:01:35.350 --> 00:01:37.260\nWe needed that next function and\ntypically,\n\n38\n00:01:37.260 --> 00:01:40.300\nwe needed that symbol.iterator property.\n\n39\n00:01:40.300 --> 00:01:44.230\nAnd that allowed us to slowly\njust produce these values, or\n\n40\n00:01:44.230 --> 00:01:47.930\nexecute these series of codes,\nevery time I called next.\n\n41\n00:01:47.930 --> 00:01:53.070\nNow once that got exhausted, I was done\nwith the iterator and that's all I had.\n\n42\n00:01:53.070 --> 00:01:53.770\nI had to create a new one.\n\n43\n00:01:53.770 --> 00:01:58.050\nWell generators behave very similar to\nthat, and when we look at some common use\n\n44\n00:01:58.050 --> 00:02:01.850\ncases, but this isn't one of those\nfeatures that this started to come online\n\n45\n00:02:01.850 --> 00:02:06.110\nbecause of other languages and\nuse cases in those other languages.\n\n46\n00:02:06.110 --> 00:02:08.030\nNamely, I've used them\na great deal in Python,\n\n47\n00:02:08.030 --> 00:02:10.230\nso there's a concept of a generator.\n\n48\n00:02:11.420 --> 00:02:15.910\nBut in addition to that, well these\nare great for async control flow but\n\n49\n00:02:15.910 --> 00:02:18.650\nthey are probably gonna do\nsome additional growing up.\n\n50\n00:02:18.650 --> 00:02:22.800\nBut let's go ahead and take a look at what\na generator is, look at it in the context\n\n51\n00:02:22.800 --> 00:02:27.800\nof an iterator, and then see it in\nthose async control flow situations.\n\n52\n00:02:27.800 --> 00:02:29.580\nSo here I am in my browser.\n\n53\n00:02:29.580 --> 00:02:32.990\nLet's go ahead and\nopen that index.html file up.\n\n54\n00:02:32.990 --> 00:02:36.660\nSo I'm gonna open my file, and\nmake sure you're in the right one.\n\n55\n00:02:36.660 --> 00:02:40.190\nJust be a lot of generating nothing,\nif we're in the wrong one.\n\n56\n00:02:40.190 --> 00:02:44.530\nSo here's my playground and\nthat is just running my app.js.\n\n57\n00:02:44.530 --> 00:02:48.630\nI'm gonna go into more tools,\nopen my developer tools and\n\n58\n00:02:48.630 --> 00:02:51.290\nwe should see everything's\ngood to go here.\n\n59\n00:02:51.290 --> 00:02:58.830\nAnd then I'm gonna hop over into Adam, and\nadd my project folder for ES6 generators.\n\n60\n00:02:58.830 --> 00:03:01.369\nHere's my project folder.\n\n61\n00:03:01.369 --> 00:03:06.139\nAnd there we go, if we take a look at\nindex.html it's plain old HTML file,\n\n62\n00:03:06.139 --> 00:03:10.834\nI just put a little bit of text there so\nI know that it's actually loaded and\n\n63\n00:03:10.834 --> 00:03:12.310\nthen an app.js file.\n\n64\n00:03:12.310 --> 00:03:14.680\nAnd that's where all\nthe fun stuff's happening.\n\n65\n00:03:14.680 --> 00:03:17.490\nSo in my app.js, we're gonna go ahead and\n\n66\n00:03:17.490 --> 00:03:23.220\nstart looking at generators as kind of\nan extension of those iterator protocols.\n\n67\n00:03:23.220 --> 00:03:27.800\nThere are some new syntax things\nthat we need to take care of.\n\n68\n00:03:27.800 --> 00:03:29.450\nSo, let's go ahead and\nget started on them.\n\n69\n00:03:30.900 --> 00:03:35.960\nSo, here are generators and as a matter\nof fact, let's say as iterators.\n\n70\n00:03:35.960 --> 00:03:38.570\nNow what I like about generators\nis they're very light weight.\n\n71\n00:03:38.570 --> 00:03:40.857\nThey behave like those iterators.\n\n72\n00:03:40.857 --> 00:03:43.360\nI can get infinite value production.\n\n73\n00:03:43.360 --> 00:03:49.050\nI can get these non list productions and\nwe'll see those in context here.\n\n74\n00:03:50.760 --> 00:03:51.952\nSo here we go.\n\n75\n00:03:51.952 --> 00:03:56.620\nI'm gonna make a function, but\nnow here's where the new syntax come in.\n\n76\n00:03:56.620 --> 00:04:00.280\nI'm gonna add an asterisk, and\nthat's where it gets a little weird.\n\n77\n00:04:00.280 --> 00:04:01.300\nAsterisk, what does that mean?\n\n78\n00:04:01.300 --> 00:04:03.802\nThat actually means that this\nis a generator function.\n\n79\n00:04:03.802 --> 00:04:09.200\nIt is gonna create a generator that\nI can then use to create new values,\n\n80\n00:04:09.200 --> 00:04:11.240\nor handle this kind of control flow.\n\n81\n00:04:11.240 --> 00:04:13.530\nAnd let's just call it numbers.\n\n82\n00:04:13.530 --> 00:04:14.690\nAnd it takes no arguments.\n\n83\n00:04:14.690 --> 00:04:17.790\nNow generators can take\narguments as we'll see later but\n\n84\n00:04:17.790 --> 00:04:19.500\nwe have none as of right now.\n\n85\n00:04:20.700 --> 00:04:23.550\nAnd we're gonna use this\nnew word called yield.\n\n86\n00:04:23.550 --> 00:04:27.300\nNow yield, here's the really\ncrazy part about generators.\n\n87\n00:04:27.300 --> 00:04:30.170\nYield will stop the function execution.\n\n88\n00:04:30.170 --> 00:04:33.000\nIt will spit out a value and\nstop at that line.\n\n89\n00:04:33.000 --> 00:04:37.990\nAnd we'll see that in just a moment,\nbut let's just yield a couple of\n\n90\n00:04:37.990 --> 00:04:42.860\nthree numbers here and so\nI have yield 1, yield 2, and yield 3.\n\n91\n00:04:42.860 --> 00:04:46.770\nNow that I have these yielded,\nhow do I use this generator?\n\n92\n00:04:46.770 --> 00:04:49.420\nWell, this is almost like\na generator constructor.\n\n93\n00:04:49.420 --> 00:04:52.704\nThis is how I'm gonna\nmake a new generator.\n\n94\n00:04:52.704 --> 00:04:58.600\nSo let's say a num,\nwow that is not how you spell num.\n\n95\n00:04:58.600 --> 00:05:01.900\nSo numGen is numbers.\n\n96\n00:05:01.900 --> 00:05:03.970\nI'm calling it like a normal function.\n\n97\n00:05:03.970 --> 00:05:08.280\nThe new syntax is this asterisk here and\nyield, yield, yield.\n\n98\n00:05:08.280 --> 00:05:10.028\nOkay, well let's see this.\n\n99\n00:05:10.028 --> 00:05:13.767\nIf I console.log(numGen),\n\n100\n00:05:13.767 --> 00:05:18.063\nthat's an odd word to say, numGen.\n\n101\n00:05:18.063 --> 00:05:22.270\nSo notice here's something\nI have seen in Chrome.\n\n102\n00:05:22.270 --> 00:05:26.340\nIf you actually try to print\nout the generator, see how it\n\n103\n00:05:26.340 --> 00:05:31.030\nkinda flickered a little bit and my little\ncursor has gone away, that's weird.\n\n104\n00:05:31.030 --> 00:05:34.210\nSo when I try to print out the generator,\nthis is something I've notice in Chrome,\n\n105\n00:05:34.210 --> 00:05:36.350\nI've seen it in a couple other browsers,\n\n106\n00:05:36.350 --> 00:05:39.230\nhaven't figured out a way\nto make this not happen.\n\n107\n00:05:39.230 --> 00:05:43.090\nSo really maybe we should just see\nwhat is stored in the generator.\n\n108\n00:05:43.090 --> 00:05:49.010\nSo if you call .next, we've seen\nthis syntax before on iterators.\n\n109\n00:05:49.010 --> 00:05:52.120\nIf I call next I'm gonna\nget this initial yield.\n\n110\n00:05:52.120 --> 00:05:53.640\nSo I'm gonna refresh.\n\n111\n00:05:53.640 --> 00:05:57.153\nAnd notice that's come back,\neverything's good to go.\n\n112\n00:05:57.153 --> 00:06:00.082\nSo I got the value 1 and\nit says done false.\n\n113\n00:06:00.082 --> 00:06:02.639\nWell where did that value 1 come from?\n\n114\n00:06:02.639 --> 00:06:04.151\nAnd that's right here.\n\n115\n00:06:04.151 --> 00:06:06.213\nWhat if I call him next again?\n\n116\n00:06:06.213 --> 00:06:10.944\nAnd maybe even three more times,\nI can refresh actually you have to save,\n\n117\n00:06:10.944 --> 00:06:13.310\nthat's important.\n\n118\n00:06:13.310 --> 00:06:15.850\nAnd I refresh and I get value1, 2, 3.\n\n119\n00:06:15.850 --> 00:06:21.542\nSo, the u is actually spitting out kind\nof that iterator-esque value system.\n\n120\n00:06:21.542 --> 00:06:23.280\nWhat if I call it one more time?\n\n121\n00:06:24.960 --> 00:06:25.810\nWell, that's handy.\n\n122\n00:06:27.180 --> 00:06:29.130\nIt's undefined and done is true.\n\n123\n00:06:29.130 --> 00:06:30.302\nWell, that makes sense,\n\n124\n00:06:30.302 --> 00:06:33.244\nthat kind of looks like those\niterators that we've seen before.\n\n125\n00:06:33.244 --> 00:06:35.220\nHow are these different?\n\n126\n00:06:35.220 --> 00:06:39.608\nWell before we go onto that,\nlet me just, some nuanced behaviors.\n\n127\n00:06:39.608 --> 00:06:44.790\nSo I can actually move this over here and\nit's matter of preference.\n\n128\n00:06:44.790 --> 00:06:47.570\nI've seen a great deal of people\nput it right before the name,\n\n129\n00:06:47.570 --> 00:06:52.570\nI've seen just as equal a number of\npeople use it right after the function.\n\n130\n00:06:52.570 --> 00:06:57.740\nBut just to show you that it does,\nin fact, work, let's refresh here and\n\n131\n00:06:57.740 --> 00:07:01.190\nit's still the same thing, so\nthis is a matter of preference.\n\n132\n00:07:01.190 --> 00:07:04.670\nI tend to like it right after the\nfunction, because I don't have to worry\n\n133\n00:07:04.670 --> 00:07:08.440\nabout, did somebody accidentally\nput that in the name.\n\n134\n00:07:08.440 --> 00:07:11.412\nI like to see it right after the function\nas a personal preference because I know\n\n135\n00:07:11.412 --> 00:07:12.519\nthis is a generator function.\n\n136\n00:07:13.720 --> 00:07:17.070\nAnd when I use a generator function,\nI get a new generator.\n\n137\n00:07:17.070 --> 00:07:21.100\nAt this point, at line 13,\nmy generator is exhausted.\n\n138\n00:07:21.100 --> 00:07:24.810\nI can call next on it as many times\nas I want, and it'll just say,\n\n139\n00:07:24.810 --> 00:07:27.610\n\" I don't know what you want.\"\nIt just keeps spitting out.\n\n140\n00:07:28.630 --> 00:07:31.256\nNow, how does this work?\n\n141\n00:07:31.256 --> 00:07:35.710\nOkay, well typically, in a function,\n\n142\n00:07:35.710 --> 00:07:40.690\nit runs complete, all the way through,\nbut generators will actually pause.\n\n143\n00:07:41.780 --> 00:07:46.676\nAnd just to show you, I'm going to say,\n\n144\n00:07:46.676 --> 00:07:51.150\nStep 1, and let me move these here.\n\n145\n00:07:55.423 --> 00:07:56.732\nWow, I just copied a bunch of typos.\n\n146\n00:07:56.732 --> 00:07:57.875\nThere we go.\n\n147\n00:07:57.875 --> 00:08:00.241\nGotta watch out for those typos.\n\n148\n00:08:02.183 --> 00:08:10.020\nSo I'm gonna cut this, move this, and\ncut this, and get rid of these spaces.\n\n149\n00:08:10.020 --> 00:08:13.930\nSo we're actually gonna see something\nvery interesting about the generator,\n\n150\n00:08:13.930 --> 00:08:17.670\nin that it will pause execution\nat a yield statement.\n\n151\n00:08:17.670 --> 00:08:20.610\nWhich allows us to do some tricky things.\n\n152\n00:08:20.610 --> 00:08:25.963\nSo I'm actually going to call next,\nnot through the at.js file,\n\n153\n00:08:25.963 --> 00:08:31.331\nbut instead within the console so\nwe can see kind of that behavior.\n\n154\n00:08:31.331 --> 00:08:37.530\nSo I refresh and I say numGen.next.\n\n155\n00:08:37.530 --> 00:08:41.590\nNotice, okay,\nit prints out the value, right?\n\n156\n00:08:41.590 --> 00:08:44.995\nSo yield 1, but\nthis console.log nor this one, nor\n\n157\n00:08:44.995 --> 00:08:48.110\nthis one has actually printed out yet.\n\n158\n00:08:48.110 --> 00:08:51.980\nIf I call numGen.next again,\nI have Step 1, and\n\n159\n00:08:51.980 --> 00:08:56.400\nthat's because it resumed from this yield\nstatement and went to the next yield.\n\n160\n00:08:57.590 --> 00:09:02.130\nAnd if I call next again,\nit resumed at this yield statement and\n\n161\n00:09:02.130 --> 00:09:03.840\nwent to the next yield statement.\n\n162\n00:09:03.840 --> 00:09:09.410\nBut notice this offlet, when I call\nthis it prints this out it yields three.\n\n163\n00:09:09.410 --> 00:09:15.230\nIf I call this one more time, I should\nget Step 3 and then a yield of nothing.\n\n164\n00:09:15.230 --> 00:09:19.440\nSo I can pause that execution,\nwhich is incredibly handy.\n\n165\n00:09:19.440 --> 00:09:23.936\nBut because I can pause that execution, I\ncan use this as a way of going, all right,\n\n166\n00:09:23.936 --> 00:09:26.247\nI need to go up to this point and\nthen wait for\n\n167\n00:09:26.247 --> 00:09:28.970\nsomething else to pipe\nsome information back in.\n\n168\n00:09:28.970 --> 00:09:33.859\nI can actually send information back\nin to the generator using the .next,\n\n169\n00:09:33.859 --> 00:09:35.340\nwhich is kinda weird.\n\n170\n00:09:36.470 --> 00:09:38.640\nSo let's change this a little bit.\n\n171\n00:09:38.640 --> 00:09:43.372\nI'm going to say const x and = and\n\n172\n00:09:43.372 --> 00:09:48.442\nthen I'm gonna change this x to a y,\n\n173\n00:09:48.442 --> 00:09:52.680\nand this y to a z and finally x,\n\n174\n00:09:54.195 --> 00:09:58.293\ny and z.\n\n175\n00:09:58.293 --> 00:10:00.527\nSo okay, well, this is kind of weird.\n\n176\n00:10:00.527 --> 00:10:03.910\nWhy would I yield 1,\nwhat is this gonna do?\n\n177\n00:10:05.370 --> 00:10:09.161\nAgain, I'm going to use\nthe console to illustrate this.\n\n178\n00:10:09.161 --> 00:10:13.615\nSo if I refresh and I call numGen.next,\n\n179\n00:10:15.577 --> 00:10:20.773\nOkay, value of 1,\nit is stopped at this line.\n\n180\n00:10:20.773 --> 00:10:23.730\nNotice my console.log has not printed out.\n\n181\n00:10:23.730 --> 00:10:30.440\nIf I call next again and I pass this\nnext method any type of information,\n\n182\n00:10:30.440 --> 00:10:37.460\nlike a, then I can pass that information\nback into the paused function.\n\n183\n00:10:37.460 --> 00:10:42.164\nAnd then do further manipulations,\nyield another value.\n\n184\n00:10:42.164 --> 00:10:45.412\nAnd let's call this with blah,\nblah, blah, blah,\n\n185\n00:10:45.412 --> 00:10:49.090\nblah just to show you that\nit is no trickery here.\n\n186\n00:10:49.090 --> 00:10:53.927\nAnd now Step 2 has received that\ninformation from this yield.\n\n187\n00:10:53.927 --> 00:10:56.999\nSo when I yield and\nI pipe that information back in,\n\n188\n00:10:56.999 --> 00:10:59.510\nit is assigned to the result.\n\n189\n00:10:59.510 --> 00:11:03.411\nSo now I can get this asynchronous\ncontrol flow cuz when I pause here,\n\n190\n00:11:03.411 --> 00:11:06.452\nwhatever I call next and\npipe back in is assigned to x.\n\n191\n00:11:06.452 --> 00:11:10.890\nSo then I can use x for\ncalculations or additional calls.\n\n192\n00:11:10.890 --> 00:11:14.940\nCrazy stuff, this is, again, one of those\nconcepts that are really hard to wrap your\n\n193\n00:11:14.940 --> 00:11:18.240\nmind around, but\ncan become incredibly powerful.\n\n194\n00:11:18.240 --> 00:11:20.451\nSo this is the use as an iterator.\n\n195\n00:11:20.451 --> 00:11:23.931\nWell, show me a more meaningful example,\n\n196\n00:11:23.931 --> 00:11:28.910\nother than this yield 1,\nyield 2, yield 3 thing.\n\n197\n00:11:28.910 --> 00:11:30.740\nSo let's see here.\n\n198\n00:11:30.740 --> 00:11:33.690\nIf I wanted to instead\nget a range of numbers,\n\n199\n00:11:33.690 --> 00:11:38.000\nI do a lot of data crunching kind\nof calculations, visualizations.\n\n200\n00:11:38.000 --> 00:11:41.378\nIf I wanted to have something like that,\nI could make an array.\n\n201\n00:11:41.378 --> 00:11:43.740\nBut let's say I wanted\nthe numbers 1 through a million.\n\n202\n00:11:43.740 --> 00:11:48.670\nI would need an array that is a million\nelements long, which is kind of heavy.\n\n203\n00:11:48.670 --> 00:11:54.047\nBut if I wanted to just sum those,\ntake the average of those, I don't\n\n204\n00:11:54.047 --> 00:11:59.824\nreally need that heavy array construct\nin order to get those numbers out.\n\n205\n00:11:59.824 --> 00:12:05.917\nI can instead,\nmake a generator function called range and\n\n206\n00:12:05.917 --> 00:12:11.160\nlet's take a start, a stop, and a step.\n\n207\n00:12:11.160 --> 00:12:13.990\nSo now this generator is\ntaking a set of arguments and\n\n208\n00:12:13.990 --> 00:12:17.030\nit's constructing this based\non a set of arguments.\n\n209\n00:12:17.030 --> 00:12:19.731\nI can say while[step &lt; stop], so\n\n210\n00:12:19.731 --> 00:12:25.491\nwhile the first number is less than\nthe second number, you should see,\n\n211\n00:12:25.491 --> 00:12:29.469\nwell, he's probably gonna\nchange that first one.\n\n212\n00:12:29.469 --> 00:12:35.461\nI am, I'm going to yield, not step, start.\n\n213\n00:12:35.461 --> 00:12:38.338\nSo when start is less than stop, so\n\n214\n00:12:38.338 --> 00:12:42.620\nI'm going to yield start and\nthen start += step.\n\n215\n00:12:45.100 --> 00:12:48.942\nSo step can let me go up by 1,\nby 2, by 3, by 4.\n\n216\n00:12:48.942 --> 00:12:53.222\nNow because I own this generator,\nif I create a new generator like this,\n\n217\n00:12:53.222 --> 00:12:55.690\nI can iterate through using a for of loop.\n\n218\n00:12:56.740 --> 00:12:59.804\nSo this can behave just like\nall those other iterators.\n\n219\n00:12:59.804 --> 00:13:04.057\nBut notice this is a little cleaner\nbecause of this yield statement.\n\n220\n00:13:04.057 --> 00:13:08.785\nI can pause, and then when someone asks\nfor the next number I come back around and\n\n221\n00:13:08.785 --> 00:13:10.350\nI create the next number.\n\n222\n00:13:11.610 --> 00:13:15.640\nDo keep in mind this is a while statement,\nif you forget this line 20,\n\n223\n00:13:15.640 --> 00:13:18.270\nyou may accidentally\nhave an infinite loop.\n\n224\n00:13:18.270 --> 00:13:21.868\nEspecially if you just go for\nlet of and bada bing, bada boom.\n\n225\n00:13:21.868 --> 00:13:26.264\nSo let's see untilTen, so\n\n226\n00:13:26.264 --> 00:13:33.156\nI'm gonna get a range from 1 to 10 by 1.\n\n227\n00:13:35.657 --> 00:13:40.741\nAnd then I can use my new for(let number\n\n228\n00:13:40.741 --> 00:13:45.990\nof untilTen){ and just log those out.\n\n229\n00:13:47.072 --> 00:13:51.790\nNow Daniel, we should probably cross our\nfingers because if I've done this wrong,\n\n230\n00:13:51.790 --> 00:13:53.620\nyou may get to see my\nbrowser lock up a little bit.\n\n231\n00:13:53.620 --> 00:13:54.720\n&gt;&gt; That'll be fun.\n\n232\n00:13:54.720 --> 00:13:56.650\n&gt;&gt; That will be fun, well,\nit would be fun for you but\n\n233\n00:13:56.650 --> 00:13:57.980\nI don't know if it would be fun for me.\n\n234\n00:13:57.980 --> 00:13:58.805\n&gt;&gt; Well, that's all that matters.\n\n235\n00:13:58.805 --> 00:14:00.762\n&gt;&gt; Well, this is true, this is true.\n\n236\n00:14:00.762 --> 00:14:03.557\nSo if I refresh,\nI now have those numbers and\n\n237\n00:14:03.557 --> 00:14:07.648\nnotice, once the generator is exhausted,\nmy for let of stops.\n\n238\n00:14:07.648 --> 00:14:10.850\nThis is very succinct syntax for that.\n\n239\n00:14:10.850 --> 00:14:13.499\nNow, notice I didn't quite get 10.\n\n240\n00:14:13.499 --> 00:14:15.789\nAll right, I actually got 1 through 9.\n\n241\n00:14:15.789 --> 00:14:18.090\nWell, that's a runtime error and\n\n242\n00:14:18.090 --> 00:14:22.546\nI actually just need to change that\ncondition for when it cuts off.\n\n243\n00:14:22.546 --> 00:14:25.604\nAnd if I refresh,\nI actually get 1 through 10 now.\n\n244\n00:14:25.604 --> 00:14:30.052\nAnd that's completely up to you as\nfar as implementation details but\n\n245\n00:14:30.052 --> 00:14:31.440\nthis is a great time.\n\n246\n00:14:32.710 --> 00:14:36.680\nNow, what if I have one of\nthese infinite generators and\n\n247\n00:14:36.680 --> 00:14:39.330\nI need to mess around with those, right?\n\n248\n00:14:39.330 --> 00:14:43.642\nIt's just producing numbers but\nI only want the first 30 of them.\n\n249\n00:14:43.642 --> 00:14:48.926\nI can actually write an additional\ngenerator to consume another generator and\n\n250\n00:14:48.926 --> 00:14:51.254\nthen produce those values for me.\n\n251\n00:14:51.254 --> 00:14:54.054\nAnd this is another one of those\nuse cases where it kind of\n\n252\n00:14:54.054 --> 00:14:58.730\ncomes into the data sciencey type\ncommunity, like the data visualizations.\n\n253\n00:14:58.730 --> 00:15:02.510\nAnd then we'll see how this may be\nused by other application developers.\n\n254\n00:15:03.810 --> 00:15:09.110\nSo this range, well, let's just say we're\ngonna use this range, re-use this range.\n\n255\n00:15:09.110 --> 00:15:14.257\nBut now we're gonna say up to\nsome arbitrarily large number.\n\n256\n00:15:14.257 --> 00:15:20.032\nIf I wanted, and\nlet's call this numericStuff,\n\n257\n00:15:20.032 --> 00:15:25.270\nvery long, very purposeful variable name.\n\n258\n00:15:25.270 --> 00:15:28.250\nSo if I wanted to just\ngrab parts of those,\n\n259\n00:15:28.250 --> 00:15:32.560\nI could create a generator\nfunction called take.\n\n260\n00:15:32.560 --> 00:15:34.020\nAnd what does take do?\n\n261\n00:15:34.020 --> 00:15:36.477\nWell, it takes the iterable, and\n\n262\n00:15:36.477 --> 00:15:41.817\ntechnically generators are iterables\nbecause I can use a for loop on them,\n\n263\n00:15:41.817 --> 00:15:46.416\nand some number of elements to\ngrab from that iterable, right?\n\n264\n00:15:46.416 --> 00:15:51.421\nIf range was an infinite generator, and I\ncalled for let of, well, it would actually\n\n265\n00:15:51.421 --> 00:15:55.888\njust print forever, and ever, and\never, and actually lock up my browser.\n\n266\n00:15:55.888 --> 00:15:59.694\nSo this would be a kind of a helper\nfunction That would be useful to me.\n\n267\n00:15:59.694 --> 00:16:01.591\nWell, how can I actually get this?\n\n268\n00:16:01.591 --> 00:16:04.241\nWell, let's just say count = 0.\n\n269\n00:16:04.241 --> 00:16:09.630\nSo I'm going to start counting how\nmany elements I've produced from this.\n\n270\n00:16:09.630 --> 00:16:12.643\nAnd this was something\nyou won't see very often.\n\n271\n00:16:12.643 --> 00:16:16.847\nSo while(true){} danger.\n\n272\n00:16:16.847 --> 00:16:18.736\nDanger, danger, danger.\n\n273\n00:16:18.736 --> 00:16:20.330\nWhile(true).\n\n274\n00:16:20.330 --> 00:16:23.395\n&gt;&gt; So if we never make that not true, this\nis just gonna continue on for infinity.\n\n275\n00:16:23.395 --> 00:16:28.410\n&gt;&gt; Yeah, forever, and I will also\ntell you this while(true) stuff\n\n276\n00:16:28.410 --> 00:16:33.680\nonly works really well inside\nof a generator for JavaScript.\n\n277\n00:16:33.680 --> 00:16:38.010\nI'm not saying I have, but I might have\ntried it in a different context, and\n\n278\n00:16:38.010 --> 00:16:41.862\nreally locked up Chrome really,\nreally badly.\n\n279\n00:16:41.862 --> 00:16:45.280\nSo while(true) works in this\ncontext because I'm able\n\n280\n00:16:45.280 --> 00:16:49.550\nto pause execution instead of it just\nkind of taking off and running up and\n\n281\n00:16:49.550 --> 00:16:51.920\nconsuming a bunch of computer resources.\n\n282\n00:16:51.920 --> 00:16:54.667\nSo while(true), what do I want to do?\n\n283\n00:16:54.667 --> 00:16:58.033\nWell, if, wait a minute.\n\n284\n00:16:58.033 --> 00:17:02.220\nI want to deconstruct the next\nvalue from this iterable.\n\n285\n00:17:02.220 --> 00:17:03.789\nNow I'm calling this an iterable but\n\n286\n00:17:03.789 --> 00:17:05.973\nI'm making an assumption\nthat it's a generator.\n\n287\n00:17:05.973 --> 00:17:10.804\nI'm gonna use this deconstruct\nportion to say iterable, so\n\n288\n00:17:10.804 --> 00:17:14.130\nI'm gonna get whether it's done or not.\n\n289\n00:17:15.370 --> 00:17:17.950\nAnd then I'm going to yield the value.\n\n290\n00:17:19.630 --> 00:17:20.390\nAnd then I'm gonna say,\n\n291\n00:17:20.390 --> 00:17:23.860\nwell, I've just yielded a value,\nI'm going to increase count by 1.\n\n292\n00:17:23.860 --> 00:17:25.756\nSo if I want 10 of these,\n\n293\n00:17:25.756 --> 00:17:31.032\nI'm just gonna start counting how many\nhave I yielded up til this point?\n\n294\n00:17:31.032 --> 00:17:35.682\nAnd then, finally, if(count &gt;= n),\n\n295\n00:17:35.682 --> 00:17:42.950\nhow many I've requested,\nI'm going to break out of that loop.\n\n296\n00:17:42.950 --> 00:17:46.400\nThat's important because this\nwill just always be running.\n\n297\n00:17:46.400 --> 00:17:50.932\nNow because of this yield statement,\nif I never called next on it, or I'm not\n\n298\n00:17:50.932 --> 00:17:55.954\nrunning it in another loop, like this wild\nloop is not truly running the entire time,\n\n299\n00:17:55.954 --> 00:18:02.086\nbut if I put this without this break here,\nInto a for or let of loop.\n\n300\n00:18:02.086 --> 00:18:05.542\nIt'll just run and run and\nrun and just scamper around and\n\n301\n00:18:05.542 --> 00:18:07.128\nyour Chrome will lock up.\n\n302\n00:18:07.128 --> 00:18:10.800\nAnd then you'll have to open the Task\nManager and kill it, and there you go.\n\n303\n00:18:10.800 --> 00:18:12.750\nSo this is not a robust one,\n\n304\n00:18:12.750 --> 00:18:16.620\nbut this is something to wrap our minds\naround some of the power of generators.\n\n305\n00:18:16.620 --> 00:18:18.820\nNotice again, asterisk,\n\n306\n00:18:18.820 --> 00:18:22.880\nthat is the single difference,\nother than the yield statement.\n\n307\n00:18:22.880 --> 00:18:28.880\nYield works inside of generators,\nwhat happens if I take that asterisk off?\n\n308\n00:18:28.880 --> 00:18:31.600\nNo, uncalled identifier.\n\n309\n00:18:31.600 --> 00:18:36.800\nWell, yield no longer makes sense in the\ncontext of it not being in a generator.\n\n310\n00:18:36.800 --> 00:18:38.690\nSo that's important.\n\n311\n00:18:38.690 --> 00:18:41.209\nSo if I put this back.\n\n312\n00:18:41.209 --> 00:18:45.807\nSo I'm gonna run and run and run and\nrun and let's see this in actual,\n\n313\n00:18:45.807 --> 00:18:49.145\nwait, let's see this in action,\nnot in actual.\n\n314\n00:18:49.145 --> 00:18:50.406\nThat doesn't make any sense.\n\n315\n00:18:50.406 --> 00:18:53.742\nSo if I want the first 10 and\n\n316\n00:18:53.742 --> 00:18:58.980\nI'm gonna take from numeric stuff.\n\n317\n00:18:58.980 --> 00:19:02.420\nNotice numeric actually\nis 100,000 numbers long.\n\n318\n00:19:02.420 --> 00:19:04.530\nIt could be forever.\n\n319\n00:19:04.530 --> 00:19:07.596\nI want the first 10.\n\n320\n00:19:07.596 --> 00:19:11.160\nI'm gonna take the first 10 elements and\nthen let's just print those out.\n\n321\n00:19:11.160 --> 00:19:17.780\nAgain Daniel, we should probably cross out\nfingers because otherwise, could be crazy.\n\n322\n00:19:17.780 --> 00:19:18.999\n&gt;&gt; Here's hoping you\nlock up Chrome hardcore.\n\n323\n00:19:18.999 --> 00:19:23.315\n[LAUGH]\n&gt;&gt; Daniel is wanting me to crash and burn.\n\n324\n00:19:23.315 --> 00:19:25.028\n&gt;&gt; Well, there's nothing like\nseeing somebody fall from grace.\n\n325\n00:19:25.028 --> 00:19:27.508\n[LAUGH]\n&gt;&gt; I will say, it is fun.\n\n326\n00:19:27.508 --> 00:19:29.748\nIt's kind of that rubber, you're like,\n\n327\n00:19:29.748 --> 00:19:33.933\nI should probably not be looking at\nthe car over there but I will anyway.\n\n328\n00:19:33.933 --> 00:19:37.880\nSo if I refresh, undefined,\nundefined, undefined, hm.\n\n329\n00:19:39.730 --> 00:19:41.360\n&gt;&gt; You make a mistake-y?\n\n330\n00:19:41.360 --> 00:19:42.810\n&gt;&gt; I did, I did make a mistake.\n\n331\n00:19:42.810 --> 00:19:47.897\nLet's see if we can run through it here,\nwhere did my mistake go?\n\n332\n00:19:47.897 --> 00:19:51.492\nCost value, ah-ha!\n\n333\n00:19:54.070 --> 00:19:58.810\nI actually forgot to call next on\nthe generator or the iterator.\n\n334\n00:19:58.810 --> 00:20:00.530\nIf I don't call next,\nI don't get a value out.\n\n335\n00:20:00.530 --> 00:20:02.800\nIt doesn't make any sense to deconstruct,\nall right?\n\n336\n00:20:02.800 --> 00:20:06.270\nCuz calling next gives me that object\nwith a value and a done statement.\n\n337\n00:20:06.270 --> 00:20:09.280\nSo common, whoopsy daisy, but notice,\n\n338\n00:20:09.280 --> 00:20:12.670\nI did take the first 10 of those\n100,000 elements in range.\n\n339\n00:20:14.190 --> 00:20:19.400\nSo generators are wonderful for\nthese iterative purposes.\n\n340\n00:20:19.400 --> 00:20:20.040\nYou know, Daniel,\n\n341\n00:20:20.040 --> 00:20:24.500\nI know we have some other things that we\ncould show with generators, but I'm kind\n\n342\n00:20:24.500 --> 00:20:27.960\nof afraid that we're on the precipice of\nnot having enough time to show those.\n\n343\n00:20:27.960 --> 00:20:28.930\n&gt;&gt; Well, that's not a problem.\n\n344\n00:20:28.930 --> 00:20:33.140\nThe good news is I am the controller of\nall things show around this here place.\n\n345\n00:20:33.140 --> 00:20:37.730\nAnd I can easily conjure up, I could\ngenerate a new show called a part two.\n\n346\n00:20:37.730 --> 00:20:40.660\nAnd hopefully the good folks\nout there will appreciate that,\n\n347\n00:20:40.660 --> 00:20:42.530\nbecause we don't like to rush things.\n\n348\n00:20:42.530 --> 00:20:44.250\nWe like to make sure\nthat it's all nice and\n\n349\n00:20:44.250 --> 00:20:47.800\nneat and put in a way that you're\neasily digestible for you out there.\n\n350\n00:20:47.800 --> 00:20:49.850\nSo Justin's gonna call audible on this,\nand\n\n351\n00:20:49.850 --> 00:20:53.220\nwe appreciate that because we know that he\nknows what the heck he's talking about.\n\n352\n00:20:53.220 --> 00:20:55.420\nThat being said, thanks,\nJustin, for this part one,\n\n353\n00:20:55.420 --> 00:20:58.670\nthis primer,\ngetting us to where we're wanting to go.\n\n354\n00:20:58.670 --> 00:21:00.318\nIt looks like we're gonna have\nto do that part two though.\n\n355\n00:21:00.318 --> 00:21:01.497\nSo thanks for stopping by.\n\n356\n00:21:01.497 --> 00:21:02.755\nWe do thank you guys for watching.\n\n357\n00:21:02.755 --> 00:21:04.140\nHopefully we'll see you there.\n\n358\n00:21:04.140 --> 00:21:07.210\nSigning off for ITPRO.TV,\nI've been your host, Daniel Lowrie.\n\n359\n00:21:07.210 --> 00:21:08.073\n&gt;&gt; And I'm Justin Dennison.\n\n360\n00:21:08.073 --> 00:21:10.519\n&gt;&gt; And we'll see you next time.\n\n361\n00:21:10.519 --> 00:21:16.916\n[MUSIC]\n\n362\n00:21:16.916 --> 00:21:18.665\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "204898915"
        },
        {
          "description": "In this episode, Daniel and Justin continue their look into Generators as a new feature in ES6. They pick back up by using Generators to handle HTTP requests to demonstrate the synchronous appearance of asynchronous code.",
          "length": "1030",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-2-generators_pt_2-021317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-2-generators_pt_2-021317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-11-1-2-generators_pt_2-021317-1-sm.jpg",
          "title": "Generators Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:00.971\nWelcome to ITPRO.TV,\n\n2\n00:00:00.971 --> 00:00:04.111\nI'm your host Don Pezet coming at you\nlive from San Francisco, California.\n\n3\n00:00:04.111 --> 00:00:08.392\n&gt;&gt; [CROSSTALK]\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.392 --> 00:00:12.008\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.008 --> 00:00:13.644\n&gt;&gt; All right, greetings everyone and\n\n6\n00:00:13.644 --> 00:00:15.888\nwelcome to another great\nepisode of ITPRO.TV.\n\n7\n00:00:15.888 --> 00:00:19.219\nI'm your host Daniel Lowrie, and\nin today's episode that's right,\n\n8\n00:00:19.219 --> 00:00:22.210\nwe're back with more on our\nwhat's new in ES6 series.\n\n9\n00:00:22.210 --> 00:00:23.800\nAnd of course joining us in the studio,\n\n10\n00:00:23.800 --> 00:00:27.090\nour resident expert on that very topic,\nour good friend Mr. Justin Dennison.\n\n11\n00:00:27.090 --> 00:00:29.340\nJustin, man, welcome back and\nhow's it going today?\n\n12\n00:00:29.340 --> 00:00:29.940\n&gt;&gt; It's going well.\n\n13\n00:00:29.940 --> 00:00:30.760\nHow are you today, Dan?\n\n14\n00:00:30.760 --> 00:00:32.935\n&gt;&gt; I can't complain, but\nsometimes I still do.\n\n15\n00:00:32.935 --> 00:00:33.886\n&gt;&gt; Yeah, well, we all do.\n\n16\n00:00:33.886 --> 00:00:35.931\n&gt;&gt; Life's been pretty good to me so far.\n\n17\n00:00:35.931 --> 00:00:37.430\n[LAUGH] Do we have to pay a royalty now?\n\n18\n00:00:37.430 --> 00:00:38.564\n&gt;&gt; Is that a song?\n\n19\n00:00:38.564 --> 00:00:40.010\n&gt;&gt; I don't know.\n&gt;&gt; Life's been good.\n\n20\n00:00:40.010 --> 00:00:40.902\n&gt;&gt; Shh.\n&gt;&gt; Anyway, so\n\n21\n00:00:40.902 --> 00:00:42.974\nyou gotta be careful\ngetting meandering there.\n\n22\n00:00:42.974 --> 00:00:44.320\n&gt;&gt; That's right.\n\n23\n00:00:44.320 --> 00:00:47.690\n&gt;&gt; So we are back for\nour second part in JavaScript generators.\n\n24\n00:00:47.690 --> 00:00:49.760\nAs I mentioned in part one,\nif you haven't seen that,\n\n25\n00:00:49.760 --> 00:00:51.220\ndefinitely go back and watch that.\n\n26\n00:00:51.220 --> 00:00:54.550\nWe can use these as a proxy for iterators.\n\n27\n00:00:54.550 --> 00:00:57.490\nBut it's nice to be able to\npause those functions cuz then I\n\n28\n00:00:57.490 --> 00:01:00.160\ncan get more reproducible results so\nI don't have to do some handling.\n\n29\n00:01:00.160 --> 00:01:03.490\nIt does make some things cleaner,\na little nicer to reason about.\n\n30\n00:01:03.490 --> 00:01:06.070\nBut I also said these kind of came from\n\n31\n00:01:06.070 --> 00:01:07.720\nsome other languages\nfrom my understanding.\n\n32\n00:01:07.720 --> 00:01:09.310\nI have seen them in other languages.\n\n33\n00:01:09.310 --> 00:01:12.420\nI don't know if that was the impetus for\ntheir creation.\n\n34\n00:01:12.420 --> 00:01:15.050\nAnd they do help you out.\n\n35\n00:01:15.050 --> 00:01:18.570\nThey do keep things lightweight,\na little easier to reason about, but\n\n36\n00:01:18.570 --> 00:01:22.329\ncreating iterators are not the only\nthings that generators can do, right?\n\n37\n00:01:22.329 --> 00:01:24.450\nThey're generating values, but\n\n38\n00:01:24.450 --> 00:01:28.300\nwhat if those values were something\nthat required some time, right?\n\n39\n00:01:28.300 --> 00:01:32.320\nWe saw that those generators can\npause at a certain line, and\n\n40\n00:01:32.320 --> 00:01:34.500\nI feel like there's something\nelse that may take some time.\n\n41\n00:01:34.500 --> 00:01:38.480\nThat it would be nice to pause and\nwait, but not lock up our browser,\n\n42\n00:01:38.480 --> 00:01:43.330\nnot wait for the UI thread, that user\ninterface thread that's generating our\n\n43\n00:01:43.330 --> 00:01:47.860\nweb page to lock up and just go, well,\nI'm waiting on that network request and\n\n44\n00:01:47.860 --> 00:01:50.220\nI wanna make sure that\nthe user can do nothing else.\n\n45\n00:01:50.220 --> 00:01:51.930\nThat's a bad user experience.\n\n46\n00:01:51.930 --> 00:01:53.900\nGenerators allow the scheduler\n\n47\n00:01:54.990 --> 00:01:57.660\nin JavaScript to wait on\nthose network requests.\n\n48\n00:01:57.660 --> 00:01:59.700\nBut it does take a little bit of setup.\n\n49\n00:01:59.700 --> 00:02:01.480\nIt does take a little bit of nuance.\n\n50\n00:02:01.480 --> 00:02:03.914\nIt's weird pattern but\nincredibly powerful.\n\n51\n00:02:03.914 --> 00:02:07.370\nIt just make for\na little bit more readable code I've seen.\n\n52\n00:02:08.630 --> 00:02:11.910\nBut we do have to be careful,\nbecause you get things out of sync,\n\n53\n00:02:11.910 --> 00:02:12.800\nand they don't quite work.\n\n54\n00:02:12.800 --> 00:02:16.530\nSo we're gonna take some of those\niterator protocols and use them for\n\n55\n00:02:16.530 --> 00:02:18.050\nan HTTP request.\n\n56\n00:02:18.050 --> 00:02:21.530\nWe're gonna use some of those\nthings that we learned with Fetch.\n\n57\n00:02:21.530 --> 00:02:24.440\nIf you haven't seen that show,\ndefinitely go back and watch that.\n\n58\n00:02:24.440 --> 00:02:28.050\nAnd use that with generators\ninstead of the strict promises.\n\n59\n00:02:28.050 --> 00:02:33.420\nNow promises are still within this\npurview, but this using generators allows\n\n60\n00:02:33.420 --> 00:02:37.620\nit to be a little bit more readable,\na little bit more sequential in nature.\n\n61\n00:02:37.620 --> 00:02:41.130\nSo let's go ahead and\nhop back into our project and\n\n62\n00:02:41.130 --> 00:02:44.280\nif we review we had range and\nnumeric stuff and take.\n\n63\n00:02:44.280 --> 00:02:49.670\nAnd our generator is just this\nasterisk and the ability to yield.\n\n64\n00:02:49.670 --> 00:02:53.120\nTo remind you if I take this away,\nyield will definitely break stuff.\n\n65\n00:02:53.120 --> 00:02:55.880\nNow there are some new features\ncoming down the pipeline.\n\n66\n00:02:55.880 --> 00:02:57.830\nI don't know when will they happen,\n\n67\n00:02:57.830 --> 00:03:02.090\nusing new keywords that will simplify\nthis little bit, change how this works.\n\n68\n00:03:02.090 --> 00:03:06.800\nBut for now in ES6, we need the asterisk,\nwe need to create the generator, and\n\n69\n00:03:06.800 --> 00:03:08.830\nwe need yield statements.\n\n70\n00:03:08.830 --> 00:03:12.750\nOtherwise, they don't quite\nwork how you would anticipate.\n\n71\n00:03:12.750 --> 00:03:13.770\nBut what are we gonna do?\n\n72\n00:03:13.770 --> 00:03:15.730\nLet's set the stage.\n\n73\n00:03:15.730 --> 00:03:17.110\nI've created a blog.\n\n74\n00:03:17.110 --> 00:03:20.650\nI need the ability to retrieve user\ninformation to display to a user.\n\n75\n00:03:20.650 --> 00:03:25.970\nI need the ability to grab posts from\nfrom a web server and show to the user.\n\n76\n00:03:25.970 --> 00:03:29.370\nWell, I could normally do that\nwith Fetch and Promises but\n\n77\n00:03:29.370 --> 00:03:32.170\nsometimes that gets really hard to read.\n\n78\n00:03:32.170 --> 00:03:34.830\nInstead, I would like to simplify\nthat just for readability.\n\n79\n00:03:34.830 --> 00:03:39.740\nSo I'm gonna build this up using\ngenerators and some ancillary functions.\n\n80\n00:03:39.740 --> 00:03:45.810\nSo let's use generators\nas async flow control.\n\n81\n00:03:45.810 --> 00:03:47.650\nNow what do I mean by async?\n\n82\n00:03:47.650 --> 00:03:49.940\nAsynchronous, something\nthat may take some time,\n\n83\n00:03:49.940 --> 00:03:53.580\nthat JavaScript's gonna go, okay,\nyou need time to complete this.\n\n84\n00:03:53.580 --> 00:03:56.064\nI'm gonna go do some other things,\nI'll come back and\n\n85\n00:03:56.064 --> 00:03:57.588\ncheck with you in a little while.\n\n86\n00:03:57.588 --> 00:03:59.070\nSo how am I gonna do this?\n\n87\n00:03:59.070 --> 00:04:06.617\nWell, let's go ahead and set up some\nof our API, our user and post API URLs.\n\n88\n00:04:06.617 --> 00:04:11.838\nAnd that's\n'https://randomuser.me/api'; and\n\n89\n00:04:11.838 --> 00:04:17.530\nthat's just gonna produce\na random user when I make a call.\n\n90\n00:04:17.530 --> 00:04:20.600\nAnd let's just remind ourselves\nof what that looks like.\n\n91\n00:04:20.600 --> 00:04:21.540\nIf I open this up.\n\n92\n00:04:23.284 --> 00:04:25.738\nThat's randomuser.me/api.\n\n93\n00:04:25.738 --> 00:04:29.350\nAnd I have results.\n\n94\n00:04:29.350 --> 00:04:33.180\nAnd that'll give me a user that\nis randomly generated, randomly.\n\n95\n00:04:33.180 --> 00:04:35.850\nAnd I don't know about you, but sometimes,\n\n96\n00:04:35.850 --> 00:04:39.590\nwhen people say, it's random,\nI go, eh, it's not super random.\n\n97\n00:04:39.590 --> 00:04:42.382\nYou gotta be careful there when you\nuse the word random in the context of\n\n98\n00:04:42.382 --> 00:04:43.220\ncomputing.\n\n99\n00:04:43.220 --> 00:04:45.780\nBut it does give us a different\nuser every time we make a call.\n\n100\n00:04:45.780 --> 00:04:49.800\nIf I refresh you'll\nnotice this is Kim Henry.\n\n101\n00:04:49.800 --> 00:04:53.420\nI refresh again, Victoria Clark, so\nthose will just keep working and\n\n102\n00:04:53.420 --> 00:04:54.210\nworking and working.\n\n103\n00:04:54.210 --> 00:04:59.050\nAnd then likewise the post URL that we\nare gonna use, we'll do something similar.\n\n104\n00:05:00.370 --> 00:05:08.205\nAnd so that's POSTS_API.\n\n105\n00:05:08.205 --> 00:05:10.691\nAnd then it's\n\n106\n00:05:10.691 --> 00:05:21.469\n'https//jsonplaceholder.typecode.com/pos-\nts';\n\n107\n00:05:21.469 --> 00:05:22.710\n&gt;&gt; That's the guitar player from Guns and\n\n108\n00:05:22.710 --> 00:05:23.290\nRoses, right?\n\n109\n00:05:23.290 --> 00:05:25.505\n&gt;&gt; Yeah, yeah, Slash,\nSlash, he's real good.\n\n110\n00:05:25.505 --> 00:05:27.110\n&gt;&gt; [LAUGH]\n&gt;&gt; Spelling his name though,\n\n111\n00:05:27.110 --> 00:05:28.353\nis apparently really difficult for me.\n\n112\n00:05:28.353 --> 00:05:30.435\n&gt;&gt; [LAUGH]\n&gt;&gt; Well, how do you even spell it?\n\n113\n00:05:30.435 --> 00:05:31.655\n&gt;&gt; Even in symbolic fashion.\n\n114\n00:05:31.655 --> 00:05:32.892\n&gt;&gt; [SOUND]\n&gt;&gt; It's just a line.\n\n115\n00:05:32.892 --> 00:05:34.190\n&gt;&gt; Just bang it on the keyboard.\n\n116\n00:05:34.190 --> 00:05:35.255\nI'm like, I'll get it in a minute.\n\n117\n00:05:35.255 --> 00:05:36.910\n&gt;&gt; [LAUGH]\n&gt;&gt; Now do keep in mind\n\n118\n00:05:36.910 --> 00:05:41.160\nwe're making these requests using Fetch,\nwhich is experimental.\n\n119\n00:05:41.160 --> 00:05:43.570\nIt may change in future times.\n\n120\n00:05:43.570 --> 00:05:46.590\nBut it is a really easy way to get up and\ngoing.\n\n121\n00:05:46.590 --> 00:05:50.480\nAlso keep in mind that if Fetch goes away,\nGitHub has that polyfill.\n\n122\n00:05:50.480 --> 00:05:52.740\nIf you've seen the other episode.\n\n123\n00:05:52.740 --> 00:05:56.450\nIf not, I can just say fetch polyfill.\n\n124\n00:05:56.450 --> 00:05:59.675\nI do recommend you go look at\nthe episode on promises and\n\n125\n00:05:59.675 --> 00:06:02.370\npoly and Fetch if you haven't, but\n\n126\n00:06:02.370 --> 00:06:07.360\nwe can get this same functionality without\nhaving our browser or maybe it's changed.\n\n127\n00:06:07.360 --> 00:06:13.600\nSo keep that in mind, but I'm going\nto use Fetch to write a new function.\n\n128\n00:06:13.600 --> 00:06:17.740\nI'm gonna call it getJSON.\n\n129\n00:06:17.740 --> 00:06:24.103\nThat string representation that\nI have from these URL requests.\n\n130\n00:06:24.103 --> 00:06:29.650\nAnd all this function's\ngonna take is the URL, okay?\n\n131\n00:06:29.650 --> 00:06:31.599\nNow what am I gonna do?\n\n132\n00:06:31.599 --> 00:06:36.508\nI'm gonna say fetch.,\nnot dot, fetch the URL.\n\n133\n00:06:36.508 --> 00:06:41.175\nAnd then .then(response\nis going through it and\n\n134\n00:06:41.175 --> 00:06:47.560\nresponse.json that's going to\npull that JSON information out.\n\n135\n00:06:47.560 --> 00:06:51.840\nAnd then .then, the data,\nwhat am I going to do with the data?\n\n136\n00:06:51.840 --> 00:06:53.942\nAnd this is where the generators\nstart to come into play.\n\n137\n00:06:53.942 --> 00:06:58.477\nI'm just going to console.log for now cuz\nthis last line's gonna change when we\n\n138\n00:06:58.477 --> 00:07:01.420\nstart using generators to\nhandle this flow, okay?\n\n139\n00:07:01.420 --> 00:07:02.846\nSo here's my getJSON.\n\n140\n00:07:02.846 --> 00:07:06.037\nAnd just to show you that it works,\nwell, hopefully it works,\n\n141\n00:07:06.037 --> 00:07:09.960\nif it doesn't work we'll grit\nour teeth and make it work.\n\n142\n00:07:09.960 --> 00:07:15.094\nSo if I say getJSON of the (USER_API); and\n\n143\n00:07:15.094 --> 00:07:19.831\nI refresh my page I should see, ah-hah.\n\n144\n00:07:19.831 --> 00:07:24.175\nI have this results,\nthe data from the user API.\n\n145\n00:07:24.175 --> 00:07:27.050\nNow keep in mind,\nthis is promise based, and\n\n146\n00:07:27.050 --> 00:07:32.420\nit looks like it happens really fast but\nyour mileage may vary depending on server,\n\n147\n00:07:32.420 --> 00:07:36.550\nInternet traffic, what Internet connection\nyou have, that's why we need promises.\n\n148\n00:07:36.550 --> 00:07:38.980\nBecause if you're like it's fast,\nI'm gonna make it happen like that.\n\n149\n00:07:38.980 --> 00:07:42.790\nAnd then it takes three,\nfour, five seconds.\n\n150\n00:07:42.790 --> 00:07:46.373\nWell, if you've made assumptions, but\nyou've already built it on promises,\n\n151\n00:07:46.373 --> 00:07:47.068\nyou're good.\n\n152\n00:07:47.068 --> 00:07:51.020\nIf you haven't,\nthings may get a little weird.\n\n153\n00:07:51.020 --> 00:07:54.280\nSo my getJSON works, awesome.\n\n154\n00:07:54.280 --> 00:07:55.720\nWe will make some changes.\n\n155\n00:07:55.720 --> 00:07:57.070\nNow what am I going to do?\n\n156\n00:07:57.070 --> 00:08:04.024\nI'm actually going to use a generator\nas my main function, like my runner.\n\n157\n00:08:04.024 --> 00:08:07.370\nAnd you will see this a great deal.\n\n158\n00:08:07.370 --> 00:08:11.340\nSo my generator will be\nmy main kinda runner.\n\n159\n00:08:11.340 --> 00:08:13.350\nThis is the execution of my program.\n\n160\n00:08:14.400 --> 00:08:14.998\nAnd what am I gonna do?\n\n161\n00:08:14.998 --> 00:08:16.660\nI'm gonna say okay.\n\n162\n00:08:19.560 --> 00:08:26.450\nGetting users!'); and\ndon't forget your semicolon there.\n\n163\n00:08:26.450 --> 00:08:30.098\nChrome is pretty good about allowing you\nto be a little lackadaisical about that.\n\n164\n00:08:30.098 --> 00:08:32.424\nTry to be very specific and\n\n165\n00:08:32.424 --> 00:08:38.357\nminutiae-detailed on that cuz\nit'll wreck your day sometimes.\n\n166\n00:08:38.357 --> 00:08:39.837\nYou're like, why is it not working?\n\n167\n00:08:39.837 --> 00:08:40.935\nI forgot a semicolon.\n\n168\n00:08:40.935 --> 00:08:43.239\nProbably one of the most deflating\nexperiences in JavaScript you'll have.\n\n169\n00:08:43.239 --> 00:08:46.103\nSo when you've been working on\na problem for like 10 minutes, and\n\n170\n00:08:46.103 --> 00:08:48.545\nsomeone goes,\nyou're missing a comma there.\n\n171\n00:08:48.545 --> 00:08:50.860\nAnd you go, man.\n\n172\n00:08:50.860 --> 00:08:52.130\nSo you keep that in mind.\n\n173\n00:08:52.130 --> 00:08:53.709\nAnd then what am I gonna do?\nI'm looking for\n\n174\n00:08:53.709 --> 00:08:57.120\na user to be returned to me, right?\n\n175\n00:08:57.120 --> 00:09:03.596\nAnd I'm gonna say yield getJSON,\nand make a call to the (USER_API);.\n\n176\n00:09:03.596 --> 00:09:05.980\nNow this is kind of weird, right?\n\n177\n00:09:05.980 --> 00:09:09.420\nI'm calling getJSON and\nI'm yielding to it.\n\n178\n00:09:10.450 --> 00:09:15.110\nOkay, well, that's kind of interesting,\nhow am I going to use that?\n\n179\n00:09:15.110 --> 00:09:21.750\nI'm gonna leave my main like this for now\nand finish out my running script, okay?\n\n180\n00:09:21.750 --> 00:09:25.013\nSo I'm gonna come to the top, and because\nthis is a named function decoration,\n\n181\n00:09:25.013 --> 00:09:26.630\nI can use them a little bit out of order.\n\n182\n00:09:26.630 --> 00:09:33.190\nI'm gonna say, const runner = main.\n\n183\n00:09:33.190 --> 00:09:34.980\nAnd that is a generator.\n\n184\n00:09:34.980 --> 00:09:39.120\nAnd then just to kick it off,\nI'm gonna say runner.next();.\n\n185\n00:09:39.120 --> 00:09:44.020\nYou can almost think next in this\ncontext is runner.start, right?\n\n186\n00:09:44.020 --> 00:09:47.030\nRunner, and then you hear the gun\ngo off and you start running.\n\n187\n00:09:47.030 --> 00:09:48.710\nWell, I don't start running, I just,\n\n188\n00:09:48.710 --> 00:09:53.425\nI got winded thinking about running,\nso this will start things a-going.\n\n189\n00:09:56.080 --> 00:09:57.098\nIs a-going a word, Daniel?\n\n190\n00:09:57.098 --> 00:09:59.925\n&gt;&gt; I don't know, but it is this context.\n\n191\n00:09:59.925 --> 00:10:00.960\n&gt;&gt; Yeah, we'll allow it.\n\n192\n00:10:00.960 --> 00:10:01.760\n&gt;&gt; That's right.\n\n193\n00:10:01.760 --> 00:10:02.530\n&gt;&gt; I'll allow it.\n\n194\n00:10:02.530 --> 00:10:04.530\nSo let's see how that works out.\n\n195\n00:10:05.760 --> 00:10:09.430\nNow if I refresh you'll notice\nit says Getting users, and\n\n196\n00:10:09.430 --> 00:10:12.550\nit runs that get JSON function, right?\n\n197\n00:10:12.550 --> 00:10:14.740\nAnd it just prints out that information.\n\n198\n00:10:14.740 --> 00:10:19.580\nBut if I come back to this main,\nwell, I really want user,\n\n199\n00:10:19.580 --> 00:10:25.090\nI need user stored in that variable so\nI can do other stuff with it, right?\n\n200\n00:10:25.090 --> 00:10:27.490\nLet's pretend that these\ntwo APIs are connected.\n\n201\n00:10:27.490 --> 00:10:32.240\nI need to know the user before I can\nmake requests for all the user's posts.\n\n202\n00:10:32.240 --> 00:10:36.110\nSo if I'm logging into\nmy blogging platform,\n\n203\n00:10:36.110 --> 00:10:39.350\nI don't get access to everybody's posts,\nI get access to mine.\n\n204\n00:10:39.350 --> 00:10:44.278\nSo I need to know the user before\nI can make an additional call.\n\n205\n00:10:44.278 --> 00:10:47.440\nLet's see what's inside of user.\n\n206\n00:10:47.440 --> 00:10:52.782\nIf I refresh, hm, that's kinda weird,\nand notice it actually never gets there.\n\n207\n00:10:52.782 --> 00:10:54.160\nWhy does it never get there?\n\n208\n00:10:54.160 --> 00:10:56.960\nBecause once I hit a yield statement,\n\n209\n00:10:56.960 --> 00:11:00.040\nuntil I call next again,\nnothing's gonna run.\n\n210\n00:11:00.040 --> 00:11:01.920\nThis main function's frozen.\n\n211\n00:11:03.470 --> 00:11:05.750\nWell, where am I gonna call next?\n\n212\n00:11:05.750 --> 00:11:08.050\nInside of this getJson function,\n\n213\n00:11:08.050 --> 00:11:10.790\nnow this is where there's\nsome weird coupling going on.\n\n214\n00:11:10.790 --> 00:11:16.206\nInstead of console logging this,\nI actually wanna say runner.next.\n\n215\n00:11:16.206 --> 00:11:20.550\nAnd I'm gonna take the data\nthat has just returned and\n\n216\n00:11:20.550 --> 00:11:24.270\npipe it back in to the runner\nas we did with the iterator.\n\n217\n00:11:24.270 --> 00:11:28.140\nWell, when I call getJSON,\nthis data is the user data and\n\n218\n00:11:28.140 --> 00:11:31.920\nwill be assigned to user and\nwill keep it running.\n\n219\n00:11:31.920 --> 00:11:36.820\nSo let's see how that has changed now.\n\n220\n00:11:36.820 --> 00:11:37.740\nEverything looks good.\n\n221\n00:11:37.740 --> 00:11:41.800\nOkay, well, how does that work?\n\n222\n00:11:41.800 --> 00:11:42.630\nThere's nothing going on.\n\n223\n00:11:42.630 --> 00:11:43.600\nWell, let's see.\n\n224\n00:11:47.240 --> 00:11:48.780\nLet's see how this is.\n\n225\n00:11:48.780 --> 00:11:51.112\nI'm going to get some posts.\n\n226\n00:11:51.112 --> 00:11:56.760\nI wanna make sure that maybe users is\nstill not defined, it's just not working.\n\n227\n00:11:57.940 --> 00:12:00.710\nSo I'm gonna add something after this\nyield statement to make sure that\n\n228\n00:12:00.710 --> 00:12:01.740\nnext is being called.\n\n229\n00:12:03.210 --> 00:12:05.919\nSo I refresh, Getting posts.\n\n230\n00:12:07.020 --> 00:12:09.710\nAh-hah, well, I have to be careful.\n\n231\n00:12:09.710 --> 00:12:11.260\nI changed this from a console.log,\n\n232\n00:12:11.260 --> 00:12:15.130\nand then I was like,\nwell it's still logging from up there.\n\n233\n00:12:15.130 --> 00:12:17.960\nActually, the user's being logged here,\nand\n\n234\n00:12:17.960 --> 00:12:20.080\nnotice it's the last thing that's logged.\n\n235\n00:12:20.080 --> 00:12:23.239\nIt is in order based on\nthose yield statements.\n\n236\n00:12:24.354 --> 00:12:28.050\nNow, I have this synchronize,\ndo this line, do this line, do this line,\n\n237\n00:12:28.050 --> 00:12:30.730\neven though it is promise-based.\n\n238\n00:12:30.730 --> 00:12:33.890\nSo now I get this\nsequential synchronous flow\n\n239\n00:12:33.890 --> 00:12:37.550\neven though this might take a while\nto resolve because of network.\n\n240\n00:12:37.550 --> 00:12:44.150\nOkay, so I'm gonna get the post,\nand I can say, yield getJSON.\n\n241\n00:12:45.550 --> 00:12:48.640\nAnd make a call to the post API.\n\n242\n00:12:48.640 --> 00:12:51.120\nSo going from the top,\nI'm getting the users.\n\n243\n00:12:51.120 --> 00:12:53.790\nI call getJSON, and I yield.\n\n244\n00:12:53.790 --> 00:12:58.320\nBecause getJSON is calling runner.next,\nwhich is defined before it,\n\n245\n00:12:58.320 --> 00:13:03.490\nit is available because it is outside\nof its scope, I can pipe in data\n\n246\n00:13:03.490 --> 00:13:07.720\nthat comes from this getJSON\ncall back into that call line.\n\n247\n00:13:07.720 --> 00:13:11.663\nSo when it calls next,\nwhatever comes back from getJSON of\n\n248\n00:13:11.663 --> 00:13:15.950\nthe user is then put into the user,\nand then I move on.\n\n249\n00:13:15.950 --> 00:13:20.860\nAnd it calls getJSON to the POSTS_API,\nso I'm getting all these posts, and\n\n250\n00:13:20.860 --> 00:13:25.520\nthen when I call next again, it's gonna\npipe that data and get put into the posts.\n\n251\n00:13:25.520 --> 00:13:32.243\nSo if I console.log, not console.loglog.\n\n252\n00:13:33.928 --> 00:13:38.630\nUser and posts, not ports.\n\n253\n00:13:40.880 --> 00:13:45.360\nWhat I'm gonna get is at the very end\nI'm gonna have both of these available.\n\n254\n00:13:45.360 --> 00:13:52.080\nNow I have the user and the post and now\nI can do this kind of synchronous action.\n\n255\n00:13:52.080 --> 00:13:55.460\nPreviously in Promises I had to wait for\nthe .then, the .then and\n\n256\n00:13:55.460 --> 00:13:58.200\nI had to arrange those just so.\n\n257\n00:13:58.200 --> 00:14:02.860\nThis looks more like I'm used to in those\nblocking languages, maybe like Python or\n\n258\n00:14:02.860 --> 00:14:08.460\nJava or C++, where something has to be\ndone on that line before proceeding.\n\n259\n00:14:08.460 --> 00:14:12.190\nSo now I get asynchronous behavior still.\n\n260\n00:14:12.190 --> 00:14:15.510\nBut it reads like synchronous code,\nwhich is incredibly powerful.\n\n261\n00:14:15.510 --> 00:14:17.636\nAnd let's see what happens.\n\n262\n00:14:17.636 --> 00:14:23.129\nIt must be HTTP, or HTTPS, what did I?\n\n263\n00:14:23.129 --> 00:14:25.000\nYou gotta spell it right.\n\n264\n00:14:25.000 --> 00:14:27.110\nThat's important, don't forget the colon.\n\n265\n00:14:27.110 --> 00:14:27.960\n&gt;&gt; Syntax matters.\n\n266\n00:14:27.960 --> 00:14:31.980\n&gt;&gt; Syntax does matter and\neven the best of us still mess it up.\n\n267\n00:14:31.980 --> 00:14:34.720\nBut knowing where to go\nfind those is important.\n\n268\n00:14:34.720 --> 00:14:40.600\nAnd notice at the very end I get the user\nobject and I get all these user posts.\n\n269\n00:14:40.600 --> 00:14:43.770\nNow in this example I'm\ncalling these separately.\n\n270\n00:14:43.770 --> 00:14:48.560\nBut in a real life web app, what I may\nneed to do is make a call to a user\n\n271\n00:14:48.560 --> 00:14:53.350\nto find the user ID to make\na call back to the back end,\n\n272\n00:14:53.350 --> 00:14:58.030\nlike a database to find all of\nthe posts associated with that user.\n\n273\n00:14:58.030 --> 00:15:01.520\nUsing this method, I get this very\nsynchronous I wanna do this first and\n\n274\n00:15:01.520 --> 00:15:03.200\nthis next and this next.\n\n275\n00:15:03.200 --> 00:15:07.460\nUsing Promises, I gotta make sure that\nI have those chained appropriately.\n\n276\n00:15:07.460 --> 00:15:08.390\nAnd it gets a little weird.\n\n277\n00:15:08.390 --> 00:15:10.630\nNow notice promises are still in here.\n\n278\n00:15:10.630 --> 00:15:12.342\nIt's still promise-based, but\n\n279\n00:15:12.342 --> 00:15:16.100\nI am calling.next in order to\ncreate that execution of flow.\n\n280\n00:15:16.100 --> 00:15:19.390\nSo we've seen generators be\nused as just iterators, but\n\n281\n00:15:19.390 --> 00:15:23.690\ngenerators can also be a way of\ncontrolling the flow of information\n\n282\n00:15:23.690 --> 00:15:27.540\nthrough these asynchronous methods, but\nmake it read like it is synchronous.\n\n283\n00:15:27.540 --> 00:15:31.600\nAnd by synchronous I mean that line\nhas to be finished before moving on to\n\n284\n00:15:31.600 --> 00:15:32.590\nthe next line.\n\n285\n00:15:32.590 --> 00:15:37.590\nWhich is incredibly powerful, and I'm kind\nof interested to see how Promises and\n\n286\n00:15:37.590 --> 00:15:41.350\ngenerators kind of come\ninto to the foray for ES6.\n\n287\n00:15:41.350 --> 00:15:44.935\n&gt;&gt; So these are so new that they're\nnot even really being implemented\n\n288\n00:15:44.935 --> 00:15:46.862\non a regular basis, would you say?\n\n289\n00:15:46.862 --> 00:15:50.100\n&gt;&gt; So promises have been around for\nawhile in various other libraries.\n\n290\n00:15:50.100 --> 00:15:54.820\nGenerators I've seen here and there,\nbut I haven't seen a huge project.\n\n291\n00:15:54.820 --> 00:15:57.840\nMaybe you've seen one, but I've searched.\n\n292\n00:15:57.840 --> 00:16:00.460\nI haven't seen something huge,\nand what I mean by huge,\n\n293\n00:16:00.460 --> 00:16:04.910\nsomething that's substantial size,\nusing generators exclusively.\n\n294\n00:16:04.910 --> 00:16:06.180\nBut they are incredibly powerful.\n\n295\n00:16:06.180 --> 00:16:09.722\nAnd they are used in other\nlanguages to a great deal.\n\n296\n00:16:09.722 --> 00:16:11.530\n&gt;&gt; Well, you know what?\nMaybe some of our viewers watching\n\n297\n00:16:11.530 --> 00:16:13.525\ntoday will be one of\nthe first to implement that.\n\n298\n00:16:13.525 --> 00:16:15.870\n&gt;&gt; [LAUGH]\n&gt;&gt; In a very large way on a large scale.\n\n299\n00:16:15.870 --> 00:16:16.860\nSo that would be cool.\n\n300\n00:16:16.860 --> 00:16:17.670\nSo get out there and\n\n301\n00:16:17.670 --> 00:16:21.490\nlearn how to use these generators\nas Justin has laid out before you.\n\n302\n00:16:21.490 --> 00:16:24.280\nAnd you never know what way in\nwhich you can go, you know that?\n\n303\n00:16:24.280 --> 00:16:27.520\nWhat would be perfect here, generators,\nthat's what would be perfect.\n\n304\n00:16:27.520 --> 00:16:30.010\nAnd thanks Justin for\nteaching us how to use them so\n\n305\n00:16:30.010 --> 00:16:31.610\nthat that might happen one day.\n\n306\n00:16:31.610 --> 00:16:36.282\nJustin, like I said we do thank you for\nstopping by, but it looks like we've come\n\n307\n00:16:36.282 --> 00:16:40.352\nto the end of generators here in\nwhat's new in IE 6 or not IE 6, ES 6.\n\n308\n00:16:40.352 --> 00:16:41.637\n&gt;&gt; It's not IE 6 very important.\n\n309\n00:16:41.637 --> 00:16:42.470\n&gt;&gt; It's not IE 6.\n\n310\n00:16:42.470 --> 00:16:43.538\nIf you're using that browser.\n\n311\n00:16:43.538 --> 00:16:46.600\n&gt;&gt; That was-\n&gt;&gt; You gonna have rough times.\n\n312\n00:16:46.600 --> 00:16:48.150\n&gt;&gt; You gonna have a problem.\n\n313\n00:16:48.150 --> 00:16:49.915\nAll right, so\n[LAUGH] let's move away from IE 6.\n\n314\n00:16:49.915 --> 00:16:51.840\nLet's move into the ES 6.\n\n315\n00:16:51.840 --> 00:16:53.030\nWe do thank you for stopping by.\n\n316\n00:16:53.030 --> 00:16:56.320\nSigning off for ITPRO.TV,\nI've been your host Daniel Lowrie.\n\n317\n00:16:56.320 --> 00:16:57.476\n&gt;&gt; And I'm Justin Dennison.\n\n318\n00:16:57.476 --> 00:17:02.426\n&gt;&gt; And we'll see you next time.\n\n319\n00:17:02.426 --> 00:17:06.436\n&gt;&gt; [MUSIC]\n\n320\n00:17:06.436 --> 00:17:10.219\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "204896181"
        },
        {
          "description": "In this episode, Daniel and Justin explore Proxies in ES6. They begin by defining what a Proxy is and how they are related to JavaScript. They also discuss how proxies can be used in ES6. Finally they demonstrate the implementation of proxies in a web app using JavaScript.",
          "length": "1672",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-12-1-proxies-021417-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-12-1-proxies-021417-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-12-1-proxies-021417-1-sm.jpg",
          "title": "Proxies",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:02.315\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.315 --> 00:00:04.867\n[CROSSTALK]\n\n3\n00:00:04.867 --> 00:00:08.360\n[MUSIC]\n\n4\n00:00:08.360 --> 00:00:12.009\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.009 --> 00:00:14.036\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:14.036 --> 00:00:16.515\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.515 --> 00:00:17.973\nI'm your host Daniel Lowrie.\n\n8\n00:00:17.973 --> 00:00:22.070\nAnd in today's episode, we are continuing\non with our what's new in the ES6 series.\n\n9\n00:00:22.070 --> 00:00:25.419\nAnd of course joining me in the studio\nis the man helping us through that very\n\n10\n00:00:25.419 --> 00:00:27.730\nendeavor, our good friend Mr.\nJustin Dennison.\n\n11\n00:00:27.730 --> 00:00:29.050\nJustin, welcome back sir.\n\n12\n00:00:29.050 --> 00:00:29.777\nSo glad to you have you today.\n\n13\n00:00:29.777 --> 00:00:31.950\n&gt;&gt; Thanks for having me back Daniel.\n\n14\n00:00:31.950 --> 00:00:33.080\nHow are you today?\n\n15\n00:00:33.080 --> 00:00:34.555\n&gt;&gt; I am not unwell thank you.\n\n16\n00:00:34.555 --> 00:00:35.885\n&gt;&gt; That's always good to know.\n\n17\n00:00:35.885 --> 00:00:38.255\nNow, Daniel let me ask you a question,\n\n18\n00:00:38.255 --> 00:00:41.038\nwhen I say the word proxy,\ndoes it mean anything to you?\n\n19\n00:00:41.038 --> 00:00:44.105\n&gt;&gt; Well it does, cuz I've worked in\ncomputers for a little while and\n\n20\n00:00:44.105 --> 00:00:48.095\ntypically when I hear proxy I\nthink of a machine that I contact,\n\n21\n00:00:48.095 --> 00:00:50.025\nthat contacts machines for me.\n\n22\n00:00:50.025 --> 00:00:54.067\nThat information goes back to that machine\nand then sends it back to me, usually for\n\n23\n00:00:54.067 --> 00:00:57.204\nsome sort of filtering reasons,\nor either one way or the other.\n\n24\n00:00:57.204 --> 00:00:58.298\n&gt;&gt; Yes.\n&gt;&gt; [LAUGH]\n\n25\n00:00:58.298 --> 00:01:00.239\n&gt;&gt; There's sometimes some [SOUND].\n\n26\n00:01:00.239 --> 00:01:03.154\n&gt;&gt; [LAUGH]\n&gt;&gt; Less than the up and up.\n\n27\n00:01:03.154 --> 00:01:07.288\n&gt;&gt; Yeah so we're actually gonna talk\nabout proxies in the context of ES6 or\n\n28\n00:01:07.288 --> 00:01:08.720\nJavaScript today.\n\n29\n00:01:08.720 --> 00:01:10.550\nIt's a new feature that has come along.\n\n30\n00:01:10.550 --> 00:01:14.471\nAnd it behaves very much like the proxies\nthat actually before I started messing\n\n31\n00:01:14.471 --> 00:01:16.298\naround with these I was like Daniel.\n\n32\n00:01:16.298 --> 00:01:19.654\nI used proxies for\nfiltering messages or for\n\n33\n00:01:19.654 --> 00:01:23.280\nconnecting to some other remote service.\n\n34\n00:01:23.280 --> 00:01:28.280\nAnd, I always think about these,\nthey're the middleman, right?\n\n35\n00:01:28.280 --> 00:01:31.390\nThey're conveying the messages between.\n\n36\n00:01:31.390 --> 00:01:35.880\nIt's almost like if you're,\nthe three parties, the three friends, and\n\n37\n00:01:35.880 --> 00:01:37.690\ntwo of them are mad at each other, and\n\n38\n00:01:37.690 --> 00:01:40.160\nthe one friend has to convey\nthe messages back and forth.\n\n39\n00:01:40.160 --> 00:01:42.340\nThat's kind of how I think of a proxy.\n\n40\n00:01:42.340 --> 00:01:45.410\nAnd for our purposes it's\npretty much how it's gonna be.\n\n41\n00:01:45.410 --> 00:01:47.850\nA proxy is gonna be kinda\nlike the gatekeeper.\n\n42\n00:01:47.850 --> 00:01:50.960\nNow, if you think about\nit in that context,\n\n43\n00:01:50.960 --> 00:01:54.540\nare there times that the messages\nwill be kind of changed or\n\n44\n00:01:54.540 --> 00:02:00.880\nmaybe the tone will be altered to appease\nor placate one party or the other?\n\n45\n00:02:00.880 --> 00:02:02.740\nWell, when we use proxies in ES6,\n\n46\n00:02:02.740 --> 00:02:06.000\nwe're gonna do something\nvery similar in that manner.\n\n47\n00:02:06.000 --> 00:02:10.890\nSo how could I use proxies in\nES6 with this new proxy feature?\n\n48\n00:02:10.890 --> 00:02:14.620\nWell, we can actually institute\na basic type safety mechanism.\n\n49\n00:02:14.620 --> 00:02:19.520\nAnd one of the most difficult\nissues I see with beginners,\n\n50\n00:02:19.520 --> 00:02:22.000\nis, well, I had this as a string.\n\n51\n00:02:22.000 --> 00:02:25.330\nI made it a number, and\nthen things kind of broke.\n\n52\n00:02:25.330 --> 00:02:27.630\nWell with proxies, we can fix that.\n\n53\n00:02:27.630 --> 00:02:31.020\nIn addition to we can have\na validation mechanism.\n\n54\n00:02:31.020 --> 00:02:33.380\nSo, I can't have a negative age,\n\n55\n00:02:33.380 --> 00:02:37.280\nI can't have my name can't\nbe the color almond, right?\n\n56\n00:02:37.280 --> 00:02:38.310\nThat doesn't even make sense.\n\n57\n00:02:38.310 --> 00:02:42.650\nThat was nonsensical, but\nproxies would help us guard against those.\n\n58\n00:02:42.650 --> 00:02:48.600\nSo, we're actually gonna use proxies\nto make those available to ourselves.\n\n59\n00:02:48.600 --> 00:02:51.730\nBut before we actually implement,\nI think it's good to take a dive and\n\n60\n00:02:51.730 --> 00:02:55.700\nsee what is available in\nthe realm of ES6 proxies?\n\n61\n00:02:55.700 --> 00:02:57.150\nAnd let's look at the documentation.\n\n62\n00:02:57.150 --> 00:03:01.030\nSo, if I hop over into my browser,\nso here we are in Chrome.\n\n63\n00:03:01.030 --> 00:03:03.680\nLet's go ahead and\ntake a look at ES6 proxies.\n\n64\n00:03:03.680 --> 00:03:05.990\nNow how do I get to some\ninformation about those?\n\n65\n00:03:05.990 --> 00:03:10.380\nI can type JavaScript proxies, and\n\n66\n00:03:10.380 --> 00:03:13.650\nI like to always add that MDN,\nMozilla Developer Network,\n\n67\n00:03:13.650 --> 00:03:16.430\nbecause it pretty much takes me\nto exactly where I want to be.\n\n68\n00:03:17.600 --> 00:03:20.740\nSo if I look at proxies,\nwell what is a proxy?\n\n69\n00:03:20.740 --> 00:03:25.125\nIs an object of defined custom behavior\non fundamental operations like property\n\n70\n00:03:25.125 --> 00:03:28.130\nlookup, assignment, function invocation.\n\n71\n00:03:28.130 --> 00:03:31.968\nAnd you'll notice it has a handler,\ntraps, and a target.\n\n72\n00:03:31.968 --> 00:03:34.630\nAnd the syntax looks very simple.\n\n73\n00:03:34.630 --> 00:03:35.800\nI have a target and a handler.\n\n74\n00:03:35.800 --> 00:03:36.930\nNow what do I mean by target?\n\n75\n00:03:36.930 --> 00:03:39.160\nWell who you're actually\nsending the message to, right?\n\n76\n00:03:39.160 --> 00:03:42.040\nThe JavaScript object that you're\ntrying to communicate with.\n\n77\n00:03:42.040 --> 00:03:44.450\nAnd the handler is the intermediate.\n\n78\n00:03:44.450 --> 00:03:48.280\nIt's what's handling those messages,\nthe in between, the middle man.\n\n79\n00:03:49.510 --> 00:03:51.660\nWell, there's not a lot to this,\n\n80\n00:03:51.660 --> 00:03:55.360\nbut where the real magic comes\nin is this handler object.\n\n81\n00:03:55.360 --> 00:03:59.650\nThe proxy's handler object is just\na placeholder, it provides all of those\n\n82\n00:03:59.650 --> 00:04:03.930\ntraps, what we call traps for\nobject assignment, object get.\n\n83\n00:04:03.930 --> 00:04:10.330\nIn addition to other validation or\nhandling mechanisms.\n\n84\n00:04:10.330 --> 00:04:13.080\nSo, for instance, I have a has get and\n\n85\n00:04:13.080 --> 00:04:17.200\na set, and that's where we will spend most\nof our time because those are very common\n\n86\n00:04:17.200 --> 00:04:21.600\nuse cases for validation or\neven providing type safety.\n\n87\n00:04:22.960 --> 00:04:27.650\nSo If I can create a handler object,\nmy proxy's more or less done.\n\n88\n00:04:27.650 --> 00:04:31.250\nThe new proxy syntax is just\na way to get that up and started.\n\n89\n00:04:31.250 --> 00:04:34.850\nAnd I don't have to handle it because\nthe behind the scenes magic is handled for\n\n90\n00:04:34.850 --> 00:04:36.220\nme in ES6.\n\n91\n00:04:36.220 --> 00:04:39.180\nSo let's go ahead and\nget our projects started up here.\n\n92\n00:04:39.180 --> 00:04:41.440\nSo I'm gonna open a new browser window.\n\n93\n00:04:41.440 --> 00:04:43.360\nKeep that open in the background.\n\n94\n00:04:43.360 --> 00:04:48.020\nAnd open an index.html file for proxys.\n\n95\n00:04:48.020 --> 00:04:52.580\nAgain, always make sure you have\nthe appropriate index.html otherwise\n\n96\n00:04:52.580 --> 00:04:53.540\nrough days.\n\n97\n00:04:53.540 --> 00:04:58.960\nAnd I'm gonna open Chrome Dev Tools, and\nthis allows me to evaluate that app.js.\n\n98\n00:04:58.960 --> 00:05:03.290\nSo I used a keyboard shortcut, but\nas always, more tools, developer tools.\n\n99\n00:05:04.880 --> 00:05:07.160\nNow if I hop over into Atom,\n\n100\n00:05:07.160 --> 00:05:11.290\nI can open, or add a project folder,\nfor the exact same project.\n\n101\n00:05:12.440 --> 00:05:20.008\nSo ES6 proxies, open and our index\nat HTML is just evaluating app.js.\n\n102\n00:05:20.008 --> 00:05:23.470\nAnd then app.js is where\nall the fun's gonna happen.\n\n103\n00:05:23.470 --> 00:05:29.080\nSo let's look at two actually real world\nexamples cuz we could be a little wishy\n\n104\n00:05:29.080 --> 00:05:33.580\nwashy and contrive about it, but this is\none of those things where I'm like, well,\n\n105\n00:05:33.580 --> 00:05:35.510\nthis actually makes a lost of sense.\n\n106\n00:05:35.510 --> 00:05:36.900\nIt will take a little bit,\n\n107\n00:05:36.900 --> 00:05:40.110\nthey're a little more involved\nto see that this use case.\n\n108\n00:05:40.110 --> 00:05:43.180\nBut, stay with me, and you'll be like,\n\n109\n00:05:43.180 --> 00:05:47.670\nyeah I could probably use those, and\nI got really excited about these.\n\n110\n00:05:47.670 --> 00:05:53.720\nSo, let's go ahead and start by making the\nactual object that we're going to watch.\n\n111\n00:05:53.720 --> 00:05:57.310\nSo, I'm gonna create a person, and\nthat person is gonna have a name.\n\n112\n00:05:58.780 --> 00:06:04.560\nAnd they're gonna be named John,\nand they're gonna have an age,\n\n113\n00:06:04.560 --> 00:06:06.970\n34 and a height of 72.\n\n114\n00:06:06.970 --> 00:06:11.270\nNow, I'm creating this as our\ntarget in our proxy documentation.\n\n115\n00:06:11.270 --> 00:06:14.760\nThis is what's gonna be modified,\nget, set,\n\n116\n00:06:14.760 --> 00:06:17.189\nsee if it has an age,\na height or a weight.\n\n117\n00:06:18.270 --> 00:06:22.010\nSo now I need to create my watcher,\nwhat I'm gonna call a watcher but\n\n118\n00:06:22.010 --> 00:06:24.966\nit's really, more or less,\na validation scheme.\n\n119\n00:06:24.966 --> 00:06:32.220\nSo, I like watcher, and\nthen we're gonna add to this as we go.\n\n120\n00:06:32.220 --> 00:06:37.250\nThe three traps that we're gonna focus on,\nare set, and\n\n121\n00:06:37.250 --> 00:06:42.106\nI'm using that short hand\nobject literal syntax,\n\n122\n00:06:42.106 --> 00:06:45.610\nget and has.\n\n123\n00:06:45.610 --> 00:06:49.900\nNow each one of these methods have\na specific signature to them.\n\n124\n00:06:49.900 --> 00:06:51.840\nSo set, what does set take?\n\n125\n00:06:51.840 --> 00:06:56.380\nWell set actually gives you the object\nthat you're watching as a value.\n\n126\n00:06:56.380 --> 00:07:02.080\nIt gives you the property that you've\nrequested and the value that you\n\n127\n00:07:02.080 --> 00:07:06.530\nare trying to set that property to, and\nwe'll see how that works in just a moment.\n\n128\n00:07:06.530 --> 00:07:11.540\nWhat about get, so get has a couple of\nthings you can do it will also give\n\n129\n00:07:11.540 --> 00:07:18.890\nyou the object, the property, and\nthe actual proxy object back to you.\n\n130\n00:07:20.250 --> 00:07:22.930\nAnd then has, what does that give?\n\n131\n00:07:22.930 --> 00:07:24.680\nThat gives you the object\nthat you're watching,\n\n132\n00:07:24.680 --> 00:07:30.100\nit actually gives you direct access inside\nof this watcher function and the property.\n\n133\n00:07:30.100 --> 00:07:32.260\nNow, I've used these kind of shortened.\n\n134\n00:07:32.260 --> 00:07:37.310\nIf I wanted to go look absolutely\nall the minutiae of details,\n\n135\n00:07:37.310 --> 00:07:39.770\nI could actually come here and go to set.\n\n136\n00:07:39.770 --> 00:07:41.140\nAnd what does set require?\n\n137\n00:07:41.140 --> 00:07:44.850\nI actually get target, property,\nvalue and receiver, right?\n\n138\n00:07:44.850 --> 00:07:46.300\nSo what is receiver?\n\n139\n00:07:46.300 --> 00:07:50.270\nThe object in which the assignment\noriginally directed, the target object.\n\n140\n00:07:50.270 --> 00:07:51.660\nWell how are these different?\n\n141\n00:07:51.660 --> 00:07:53.150\nThis is usually the proxy itself.\n\n142\n00:07:53.150 --> 00:07:55.315\nSo the last argument is\ntypically the proxy itself.\n\n143\n00:07:55.315 --> 00:07:59.386\nSo you get the original object,\nin this case person.\n\n144\n00:07:59.386 --> 00:08:02.564\nYou will also get the proxy object And\nthe property and\n\n145\n00:08:02.564 --> 00:08:06.780\nvalue that you're trying to\nset on the target object.\n\n146\n00:08:06.780 --> 00:08:11.380\nSo I'm using kind of a reduced syntax\njust so we can see how these work.\n\n147\n00:08:12.710 --> 00:08:17.640\nSo now that I have these set up,\nlet's see, I've thought about this and\n\n148\n00:08:17.640 --> 00:08:21.350\nif I want to set any of these properties.\n\n149\n00:08:21.350 --> 00:08:22.640\nFor a person,\n\n150\n00:08:22.640 --> 00:08:26.560\nI wouldn't typically be able to change\nsomeone's name Willy Nelly, right?\n\n151\n00:08:26.560 --> 00:08:28.490\nThis person is John.\n\n152\n00:08:28.490 --> 00:08:34.389\nSo, if I wanted to handle that, I wanted\nto validate that that is the case,\n\n153\n00:08:34.389 --> 00:08:38.885\nthen I could say,\nthis could be a good time for a switch and\n\n154\n00:08:38.885 --> 00:08:43.124\nI'm gonna switch on the prop,\nand for the case name.\n\n155\n00:08:43.124 --> 00:08:49.630\nLet see I want to make some decision for\nthe case name.\n\n156\n00:08:49.630 --> 00:08:51.860\nIf someone tries to set the name.\n\n157\n00:08:53.650 --> 00:08:55.260\nThen what do I wanna do?\n\n158\n00:08:55.260 --> 00:08:58.707\nWell I actually just want to let\nthem know, you can't change my name.\n\n159\n00:09:02.863 --> 00:09:06.510\nAnd I'm gonna immediately return false.\n\n160\n00:09:06.510 --> 00:09:11.470\nNow I'm returning false to let them know,\nhey the set property has not been changed.\n\n161\n00:09:11.470 --> 00:09:12.540\nYou haven't changed the name,\n\n162\n00:09:12.540 --> 00:09:17.040\nand this is a good way to see\nis this succeeding or is it not.\n\n163\n00:09:17.040 --> 00:09:21.140\nNow I'm also gonna add a default for\nnow, a default case.\n\n164\n00:09:21.140 --> 00:09:24.810\nAnd that is going to take the object,\ntake the property and\n\n165\n00:09:25.890 --> 00:09:27.840\nset it equal to the value.\n\n166\n00:09:27.840 --> 00:09:32.030\nSo I'm kind of just sending that\nalong to the target object, and\n\n167\n00:09:32.030 --> 00:09:34.840\nI'm gonna return true at this point.\n\n168\n00:09:34.840 --> 00:09:36.770\nNow you notice in the switch statement,\n\n169\n00:09:36.770 --> 00:09:40.890\nI'm not using breaks because I'm\nactually returning out of the object.\n\n170\n00:09:40.890 --> 00:09:44.170\nSo typically you would need breaks here,\ndo keep that in mind.\n\n171\n00:09:44.170 --> 00:09:48.880\nSo let's go see how this actually works,\nbefore I start with the other get and has.\n\n172\n00:09:48.880 --> 00:09:53.430\nSo if I wanted to use this,\nlet's add this little bit here.\n\n173\n00:09:54.650 --> 00:10:00.410\nThen I could say, const proxied person.\n\n174\n00:10:00.410 --> 00:10:05.550\nAnd that is going to be a new proxy,\nfor, what is the target?\n\n175\n00:10:05.550 --> 00:10:10.300\nWell, that is the person object and\nwhat is the handler?\n\n176\n00:10:10.300 --> 00:10:12.010\nWell that is our watcher object.\n\n177\n00:10:12.010 --> 00:10:15.660\nWe're just gonna have that get set and\nhas methods upon it.\n\n178\n00:10:17.110 --> 00:10:24.030\nSo at this point instead of using\nthe person object itself to modify.\n\n179\n00:10:24.030 --> 00:10:28.290\nI would pass around this proxy person,\nthese are supposed to be transparent.\n\n180\n00:10:28.290 --> 00:10:30.770\nI should be able to inspect this and\n\n181\n00:10:30.770 --> 00:10:34.310\nit appear to be exactly\nas the original person.\n\n182\n00:10:34.310 --> 00:10:35.930\nSo let's see the difference.\n\n183\n00:10:35.930 --> 00:10:41.700\nThere's proxied person and right above\nthat I'm just gonna console.log person.\n\n184\n00:10:44.170 --> 00:10:50.570\nAnd here we go, if I refresh you'll notice\nthat these almost look exactly the same.\n\n185\n00:10:50.570 --> 00:10:53.240\nThey've gotta have name, age and height.\n\n186\n00:10:53.240 --> 00:11:00.010\nBut the original one is an object,\nthe proxied one is well, it's a proxy.\n\n187\n00:11:00.010 --> 00:11:03.430\nAnd it will tell you the handler and\nthe target option.\n\n188\n00:11:03.430 --> 00:11:07.800\nAnd notice when I have it folded up it\nlooks exactly like the original object.\n\n189\n00:11:07.800 --> 00:11:10.640\nAnd that's because these are again\nsupposed to be transparent.\n\n190\n00:11:10.640 --> 00:11:14.510\nI shouldn't be hiding away\nanything when I'm proxying around.\n\n191\n00:11:14.510 --> 00:11:17.380\nI should just be kind of\nhandling these edge cases, or\n\n192\n00:11:17.380 --> 00:11:21.050\nI wanna enforce some kind of interface or\nprotocol.\n\n193\n00:11:22.250 --> 00:11:26.300\nSo, if I were to say person.net equals,\n\n194\n00:11:26.300 --> 00:11:29.640\nI could actually set this\nto anything I want to.\n\n195\n00:11:29.640 --> 00:11:34.878\nBut I want to use the proxied person.name,\n\n196\n00:11:34.878 --> 00:11:37.970\nand I'm gonna try to set it to Mike.\n\n197\n00:11:38.980 --> 00:11:44.430\nYou cannot change my name, okay,\nwell that's what we expect.\n\n198\n00:11:44.430 --> 00:11:51.160\nLet's just see if I type out the person,\nnotice it's still John.\n\n199\n00:11:51.160 --> 00:11:54.920\nIf I type out the proxy person,\nso I have this printed out here.\n\n200\n00:11:54.920 --> 00:11:58.050\nI'll auto complete for the fail.\n\n201\n00:11:59.150 --> 00:12:04.200\nProxied, that is a very important\ndistinction, parts of speech.\n\n202\n00:12:04.200 --> 00:12:08.270\nSo you'll notice that I have now\ndisallowed someone changing the name\n\n203\n00:12:08.270 --> 00:12:09.720\nproperty on this object.\n\n204\n00:12:09.720 --> 00:12:12.690\nWell this provides\nan additional level of safety\n\n205\n00:12:12.690 --> 00:12:14.550\nwhen I'm messing around with JavaScript.\n\n206\n00:12:14.550 --> 00:12:16.710\nSo I could pass this around and\n\n207\n00:12:16.710 --> 00:12:20.320\nkeep people from making modification\nall willy nilly, right?\n\n208\n00:12:20.320 --> 00:12:23.240\nAnother common use case changing the age.\n\n209\n00:12:23.240 --> 00:12:25.920\nWell, what are some valid things for\nthe age?\n\n210\n00:12:25.920 --> 00:12:28.280\nIt shouldn't be a string,\n\n211\n00:12:28.280 --> 00:12:31.160\nand we'll actually talking\nabout types in just a moment.\n\n212\n00:12:31.160 --> 00:12:35.200\nBut also, I've seen people go hey,\nthis isn't working, or what are you doing?\n\n213\n00:12:35.200 --> 00:12:37.800\nWell, I'm trying to set\nthe age to negative seven.\n\n214\n00:12:37.800 --> 00:12:40.700\nWell, Age should never be\na negative number, right?\n\n215\n00:12:40.700 --> 00:12:43.970\nWithin the context of most things,\nage could not be negative.\n\n216\n00:12:43.970 --> 00:12:47.220\nNow, could you make the argument that\nyou're just travelling back in time,\n\n217\n00:12:47.220 --> 00:12:53.320\nsure Sure, you could, but let's keep it\ngrounded in reality for this example.\n\n218\n00:12:53.320 --> 00:12:54.610\n&gt;&gt; But fiction is so much fun!\n\n219\n00:12:54.610 --> 00:12:57.269\n&gt;&gt; But, fiction is fun,\nI do agree, I do agree.\n\n220\n00:12:58.580 --> 00:13:00.240\nSo, I could switch.\n\n221\n00:13:00.240 --> 00:13:07.269\nI have case name, but\nI could also look for case age, and.\n\n222\n00:13:10.804 --> 00:13:15.544\nIf the value is less than\n\n223\n00:13:15.544 --> 00:13:19.848\n0 what do I wanna do?\n\n224\n00:13:19.848 --> 00:13:23.938\nConsole.log, You can't\nhave a negative age,\n\n225\n00:13:29.737 --> 00:13:33.270\nAnd immediately return false.\n\n226\n00:13:33.270 --> 00:13:36.590\nOtherwise, now this is a lot\nof decision making here.\n\n227\n00:13:36.590 --> 00:13:40.860\nI gotta switch if elses and\ndecisions, on decision, on decisions.\n\n228\n00:13:42.680 --> 00:13:43.920\nOtherwise, what do I wanna do?\n\n229\n00:13:43.920 --> 00:13:48.070\nI wanna take the object, grab the\nproperty, and set it equal to the value.\n\n230\n00:13:48.070 --> 00:13:50.130\nJust like I did in the default case,\nright?\n\n231\n00:13:51.520 --> 00:13:57.290\nAnd then return true,\nnow notice I'm handling this step-by-step.\n\n232\n00:13:57.290 --> 00:14:01.400\nI could arrange the switch, if else,\nto actually kind of cascade down and\n\n233\n00:14:01.400 --> 00:14:04.110\nalways return true if it succeeds.\n\n234\n00:14:04.110 --> 00:14:07.751\nWe are just trying to be very transparent\nabout where things are stopping, and\n\n235\n00:14:07.751 --> 00:14:09.197\nhow those decisions are made.\n\n236\n00:14:10.868 --> 00:14:17.050\nSo now, if I come back and I refresh,\nand I go back to proxied person.\n\n237\n00:14:17.050 --> 00:14:21.690\nAnd I say age equals 25, okay.\n\n238\n00:14:21.690 --> 00:14:25.500\nWell, if I look at person,\nthe age has been changed to 25.\n\n239\n00:14:25.500 --> 00:14:30.830\nBut if instead, I say negative 11,\nyou can't have a negative age.\n\n240\n00:14:32.550 --> 00:14:36.150\nAnd the change is not\nactually sent through.\n\n241\n00:14:36.150 --> 00:14:41.810\nSo the proxy is kind of this mediator,\nthis watcher, this guardian if you will.\n\n242\n00:14:41.810 --> 00:14:45.280\nThen, we'll keep you from\ndoing crazy things in the set.\n\n243\n00:14:45.280 --> 00:14:48.009\nNow, what about this get property?\n\n244\n00:14:48.009 --> 00:14:52.500\nFor now, what do I wanna do if I'm just\ntrying to make sure that this person\n\n245\n00:14:52.500 --> 00:14:56.360\nobject is not getting their\nattributes set in weird ways.\n\n246\n00:14:56.360 --> 00:15:01.600\nI could just say return object.prop,\nright?\n\n247\n00:15:01.600 --> 00:15:04.290\nJust give me back whatever I ask for.\n\n248\n00:15:04.290 --> 00:15:07.020\nSo if I do that, and\n\n249\n00:15:07.020 --> 00:15:11.370\nthis is essentially the same as leaving\nthis blank, nothing new is happening.\n\n250\n00:15:11.370 --> 00:15:14.500\nWe're just being very transparent\nabout what's going on.\n\n251\n00:15:14.500 --> 00:15:16.230\n&gt;&gt; And just in implementing these proxies,\n\n252\n00:15:16.230 --> 00:15:20.860\nit really seems like this is all about,\nbasically input or data sanitization.\n\n253\n00:15:20.860 --> 00:15:26.650\nMaking sure that, cuz we might not expect\nsomeone to put a negative 11 as their age.\n\n254\n00:15:26.650 --> 00:15:30.220\nAnd if we assume that they're not gonna\ndo that, Somebody might do that and\n\n255\n00:15:30.220 --> 00:15:31.740\nit could cause weird issues, right?\n\n256\n00:15:31.740 --> 00:15:36.080\n&gt;&gt; Exactly, you brought up data\nsanitization or just validation.\n\n257\n00:15:36.080 --> 00:15:38.890\nBoth of those are great use cases for\nproxies, right?\n\n258\n00:15:38.890 --> 00:15:41.960\nIf you hand them back a proxied\nobject to interact with\n\n259\n00:15:41.960 --> 00:15:45.440\nprogrammatically you can ensure\nthat certain things are satisfied.\n\n260\n00:15:45.440 --> 00:15:49.570\nYou can't have a negative age,\nyou can't have an age that is a string.\n\n261\n00:15:49.570 --> 00:15:53.550\nYou can't have a name that is a number,\nthings of that nature.\n\n262\n00:15:53.550 --> 00:15:57.690\nAnd that's always good because now you\nhave consistency throughout the rest of\n\n263\n00:15:57.690 --> 00:15:58.688\nthe application.\n\n264\n00:15:58.688 --> 00:16:04.185\nSo if I do this get, well, that works.\n\n265\n00:16:04.185 --> 00:16:06.468\nSo I'm just returning\nthis object property.\n\n266\n00:16:06.468 --> 00:16:08.450\nBut now where does this has trap.\n\n267\n00:16:08.450 --> 00:16:10.760\nAnd we'll see a little more\nabout this get in just a moment.\n\n268\n00:16:12.050 --> 00:16:17.350\nSo if we have this has property,\nthat's actually a trap for the n keywords.\n\n269\n00:16:17.350 --> 00:16:21.470\nSo if I say, is age n an object,\nI should get a true or false.\n\n270\n00:16:21.470 --> 00:16:24.150\nAnd it's just telling me\nis that a valid property?\n\n271\n00:16:24.150 --> 00:16:26.820\nSo let's say switch, and\n\n272\n00:16:26.820 --> 00:16:31.550\nthis a little bit contrived here\njust to illustrate the point.\n\n273\n00:16:31.550 --> 00:16:35.060\nOn the case age, right?\n\n274\n00:16:35.060 --> 00:16:37.312\nIf you ask someone their age,\n\n275\n00:16:37.312 --> 00:16:41.647\nthere are several people who\nwill go I'm never telling.\n\n276\n00:16:41.647 --> 00:16:44.848\n&gt;&gt; [LAUGH]\n&gt;&gt; So we're gonna simulate that by saying,\n\n277\n00:16:44.848 --> 00:16:46.458\nhey, what's your age?\n\n278\n00:16:46.458 --> 00:16:48.900\nOr is age a valid property?\n\n279\n00:16:48.900 --> 00:16:51.911\nI'm just gonna say, I will never tell.\n\n280\n00:16:55.175 --> 00:17:00.330\nAnd then return false and\nthen the default,\n\n281\n00:17:03.663 --> 00:17:08.457\nIs return, prop in object, right,\n\n282\n00:17:08.457 --> 00:17:15.480\nI'm just putting through\nthe normal behavior.\n\n283\n00:17:15.480 --> 00:17:18.060\nSo let’s go see how that works out.\n\n284\n00:17:18.060 --> 00:17:25.215\nIf I say is name in proxiedPerson, true.\n\n285\n00:17:25.215 --> 00:17:28.040\nIs age, in proxiedPerson.\n\n286\n00:17:31.170 --> 00:17:33.420\nI'll never tell, false.\n\n287\n00:17:33.420 --> 00:17:38.426\nSo this is a way, now again,\nthis is a way to modify this trap.\n\n288\n00:17:38.426 --> 00:17:42.777\nBecause if someone just prints\nout proxiedPerson in real,\n\n289\n00:17:42.777 --> 00:17:47.919\nin a natural programmatic sense,\nthey can just read the age, right?\n\n290\n00:17:47.919 --> 00:17:52.951\nSo this would not be a great\nthing to do for a user.\n\n291\n00:17:52.951 --> 00:17:55.590\nBut it does illustrate\nthat this is the n trap.\n\n292\n00:17:57.110 --> 00:17:59.400\nBut if I wanted the get,\nif I wanted to modify the get,\n\n293\n00:17:59.400 --> 00:18:02.020\nI could actually disallow\ngetting the age as well.\n\n294\n00:18:02.020 --> 00:18:06.070\nSo I can use this to semi-privatize data,\n\n295\n00:18:06.070 --> 00:18:08.120\nthat is not the greatest use case for\na proxy.\n\n296\n00:18:08.120 --> 00:18:13.090\nIt's more about being the intermediate\nbetween this get, set, and has methods.\n\n297\n00:18:13.090 --> 00:18:18.066\nAs well as a variety of other traps, and\nI mean traps of they are waiting for\n\n298\n00:18:18.066 --> 00:18:22.178\na certain method to be called or\na certain action to be taken.\n\n299\n00:18:22.178 --> 00:18:24.490\nRight, I can listen for the delete.\n\n300\n00:18:24.490 --> 00:18:25.775\nDo I wanna delete a property?\n\n301\n00:18:25.775 --> 00:18:29.050\nWell I can actually disallow\nthe deleting of a property\n\n302\n00:18:29.050 --> 00:18:31.480\nwhich may be something that you want.\n\n303\n00:18:31.480 --> 00:18:36.320\nBut also getting the keys or\nall of the properties in one go.\n\n304\n00:18:36.320 --> 00:18:39.850\nSo these are all the traps\nthat you can set up.\n\n305\n00:18:39.850 --> 00:18:43.430\nSet prototype of, is extensible,\nand these are great for\n\n306\n00:18:43.430 --> 00:18:49.200\nthis intermediate behavior making sure you\nhave consistency within this application.\n\n307\n00:18:49.200 --> 00:18:51.660\nSo this is a basic validater.\n\n308\n00:18:51.660 --> 00:18:54.570\nIt is not the most robust one\n\n309\n00:18:54.570 --> 00:18:57.180\nit's not something I would\nput in a true application.\n\n310\n00:18:57.180 --> 00:19:00.900\nBut it does illustrate the very\nbasics of using a proxy.\n\n311\n00:19:00.900 --> 00:19:06.640\nBut another thing that I think is\nincredible is I can ensure types.\n\n312\n00:19:06.640 --> 00:19:11.590\nI can make sure that types\nare accounted for within a proxy.\n\n313\n00:19:11.590 --> 00:19:12.920\nNow, how would I do that?\n\n314\n00:19:12.920 --> 00:19:18.970\nWell, this is gonna take a little bit of,\na little bit of work, so do bear with me.\n\n315\n00:19:18.970 --> 00:19:23.570\nWhat we're actually gonna do is hop back\nover and we're gonna pretend that John and\n\n316\n00:19:23.570 --> 00:19:26.890\nthe person and the watcher, those\nare out of sight, out of mind for now.\n\n317\n00:19:28.060 --> 00:19:34.758\nSo, I'm actually going to\ncreate a class for a car.\n\n318\n00:19:34.758 --> 00:19:36.790\nAnd all thatt's gonna do is\n\n319\n00:19:37.990 --> 00:19:40.370\nhave a constructor function\nthat will make a new object.\n\n320\n00:19:40.370 --> 00:19:42.880\nNow I'm doing this to show you\nthat you can also use this\n\n321\n00:19:44.660 --> 00:19:46.540\nas a way to modify a class.\n\n322\n00:19:47.540 --> 00:19:52.960\nAnd I'm gonna take a color,\na make and the amount of fuel, right?\n\n323\n00:19:52.960 --> 00:19:57.510\nSo if we talk about the types that would\nbe required in order to construct this\n\n324\n00:19:57.510 --> 00:20:00.800\ncar object, a color is typically\ngonna be a string, right?\n\n325\n00:20:00.800 --> 00:20:02.820\nRed, green, blue, yellow.\n\n326\n00:20:02.820 --> 00:20:05.210\nThe make is going to also be a string.\n\n327\n00:20:05.210 --> 00:20:08.390\nBut the fuel would,\nin fact, be a number, right?\n\n328\n00:20:08.390 --> 00:20:11.800\nI have ten gallons of fuel\ninside of the vehicle.\n\n329\n00:20:11.800 --> 00:20:16.460\nSo if I say this.color = color,\n\n330\n00:20:16.460 --> 00:20:22.957\nthis.make = make, and this.fuel = fuel.\n\n331\n00:20:22.957 --> 00:20:26.260\nI could stop there.\n\n332\n00:20:26.260 --> 00:20:30.370\nNow, what I'm actually gonna do is make\nsure this constructor function, there's\n\n333\n00:20:30.370 --> 00:20:35.140\nan implicit return when I construct\nan object that's gonna return this.\n\n334\n00:20:35.140 --> 00:20:38.470\nI actually want to return something else.\n\n335\n00:20:38.470 --> 00:20:46.310\nI want to return a createTypeSafeObject\nand I wanna pass it this.\n\n336\n00:20:46.310 --> 00:20:50.760\nSo it's gonna take this car,\npass it to an external function,\n\n337\n00:20:50.760 --> 00:20:53.580\nwhich is gonna actually create a proxy.\n\n338\n00:20:53.580 --> 00:20:55.850\nThat will then be returned\nupon car construction.\n\n339\n00:20:55.850 --> 00:20:58.840\nSo I'm kinda doing\nthe whole look at this hand\n\n340\n00:20:58.840 --> 00:21:01.980\nwhile I'm doing something with this\nhand and then the old switcheroo, right?\n\n341\n00:21:01.980 --> 00:21:02.707\nFind the queen.\n\n342\n00:21:02.707 --> 00:21:06.760\nI don't know if you've ever played that\ngame Daniel, but typically you lose.\n\n343\n00:21:06.760 --> 00:21:09.170\n&gt;&gt; Yeah.\n&gt;&gt; So we're not gonna lose here,\n\n344\n00:21:09.170 --> 00:21:11.870\nthis is actually gonna be pretty\ncool once we get it all set up.\n\n345\n00:21:11.870 --> 00:21:14.510\nWell I think it's pretty cool,\nhopefully you do as well.\n\n346\n00:21:14.510 --> 00:21:17.197\n&gt;&gt; Justin's three card monte game\nis a little more fair than the guy\n\n347\n00:21:17.197 --> 00:21:18.255\non the street probably.\n\n348\n00:21:18.255 --> 00:21:19.252\n&gt;&gt; Yeah.\n&gt;&gt; [LAUGH]\n\n349\n00:21:19.252 --> 00:21:19.752\n&gt;&gt; Yeah, yeah.\n\n350\n00:21:19.752 --> 00:21:20.866\nSo I've called a function.\n\n351\n00:21:20.866 --> 00:21:22.510\nI don't have that function defined.\n\n352\n00:21:22.510 --> 00:21:25.390\nIf I try to use it now,\nthis will actually break.\n\n353\n00:21:25.390 --> 00:21:26.902\nSo I'm gonna create that function.\n\n354\n00:21:26.902 --> 00:21:30.821\nCreate typeSafeObject, and\nit takes an object, and\n\n355\n00:21:30.821 --> 00:21:34.050\nall this is going to do\nis return a new proxy.\n\n356\n00:21:36.350 --> 00:21:41.739\nThat takes the object and\nwires it up with a handle for\n\n357\n00:21:41.739 --> 00:21:45.180\na typeSafeWatcher, right?\n\n358\n00:21:45.180 --> 00:21:49.016\nThat is going to handle all\nof these type safety issues.\n\n359\n00:21:49.016 --> 00:21:52.340\nNow this typeSafeWatcher\ndoes not exist right now.\n\n360\n00:21:52.340 --> 00:21:54.108\nSo we probably need to make that.\n\n361\n00:21:54.108 --> 00:21:54.817\nSo typeSafeWatcher.\n\n362\n00:21:57.086 --> 00:21:58.135\nAnd here we go.\n\n363\n00:21:58.135 --> 00:21:58.832\nAre you ready, Daniel?\n\n364\n00:21:58.832 --> 00:21:59.675\n&gt;&gt; I'm ready.\n\n365\n00:21:59.675 --> 00:22:00.730\n&gt;&gt; It's-\n&gt;&gt; Dazzle me.\n\n366\n00:22:00.730 --> 00:22:02.950\n&gt;&gt; It's about to get crazy in here.\n\n367\n00:22:02.950 --> 00:22:05.530\nSo I'm gonna create a set method on this.\n\n368\n00:22:06.590 --> 00:22:11.110\nAnd what this is gonna allow me to do is\nmonitor when people change the properties\n\n369\n00:22:11.110 --> 00:22:12.630\nof a car, right?\n\n370\n00:22:12.630 --> 00:22:14.779\nI can't say the color\nof this car is seven.\n\n371\n00:22:15.910 --> 00:22:19.500\nLike, well,\nthat must be a very luxurious color.\n\n372\n00:22:19.500 --> 00:22:21.310\nBecause I don't know what that means.\n\n373\n00:22:21.310 --> 00:22:24.810\nSo I'm actually going\nto only handle the set.\n\n374\n00:22:24.810 --> 00:22:30.416\nAnd the set is going to take the object,\nthe property,\n\n375\n00:22:30.416 --> 00:22:33.690\nand the value that it\nis trying to be set to.\n\n376\n00:22:35.500 --> 00:22:42.856\nOkay, so I'm gonna grab the current\ntype of the object property.\n\n377\n00:22:42.856 --> 00:22:46.590\nSo, I'm gonna go reach in and\ngrab the current car's color,\n\n378\n00:22:46.590 --> 00:22:49.400\nthe current car's fuel,\nand see what type it is.\n\n379\n00:22:49.400 --> 00:22:52.640\nIs it a string, a number,\nan object, so on and so forth.\n\n380\n00:22:52.640 --> 00:22:57.240\nNow I don't get incredibly strict type\nsafety here, right, I can't discern\n\n381\n00:22:57.240 --> 00:23:01.460\nbetween an array and an actual object\nbecause those will both return object.\n\n382\n00:23:02.490 --> 00:23:07.480\nBut I can get things where I can't change\na string to a number and vice versa, or\n\n383\n00:23:07.480 --> 00:23:09.140\nan object to a string.\n\n384\n00:23:09.140 --> 00:23:13.423\nSo I'm gonna say typeof obj[property] so\n\n385\n00:23:13.423 --> 00:23:17.980\nthere's the current type on the object.\n\n386\n00:23:17.980 --> 00:23:19.490\nAnd then, what is the next type?\n\n387\n00:23:21.520 --> 00:23:24.230\nWell, that is the value\nbeing type sent in.\n\n388\n00:23:26.410 --> 00:23:32.740\nAnd then, if (obj.hasOwnProperty,\n\n389\n00:23:32.740 --> 00:23:39.160\nso if it has this property of property,\nif it is already on that object, right?\n\n390\n00:23:39.160 --> 00:23:41.389\nIf I already have a name or\na color or a make.\n\n391\n00:23:43.545 --> 00:23:49.372\nAnd the currentType = nextType,\n\n392\n00:23:52.493 --> 00:23:59.468\nThen I can say obj[property] = value.\n\n393\n00:23:59.468 --> 00:24:01.079\nSo I can go ahead and set that, right?\n\n394\n00:24:01.079 --> 00:24:05.368\nIf the types match and\nit's already there Then set it.\n\n395\n00:24:05.368 --> 00:24:11.375\nOtherwise, console.log.\n\n396\n00:24:11.375 --> 00:24:12.730\nTypes are wrong,\n\n397\n00:24:12.730 --> 00:24:17.040\nright, you should probably create\na better user message than that.\n\n398\n00:24:17.040 --> 00:24:18.370\nTypes are wrong.\n\n399\n00:24:18.370 --> 00:24:19.520\nBad.\n\n400\n00:24:19.520 --> 00:24:23.480\nSo return false.\n\n401\n00:24:23.480 --> 00:24:25.097\nRight?\n&gt;&gt; Love your caveman errors in\n\n402\n00:24:25.097 --> 00:24:25.796\nyour console.\n\n403\n00:24:25.796 --> 00:24:26.328\n&gt;&gt; Yeah.\n\n404\n00:24:26.328 --> 00:24:27.072\n&gt;&gt; Types wrong.\n\n405\n00:24:27.072 --> 00:24:30.222\n&gt;&gt; [LAUGHS]\n&gt;&gt; And then I can actually return true\n\n406\n00:24:30.222 --> 00:24:34.590\nhere just to be consistent\nwith how I'm handling these.\n\n407\n00:24:34.590 --> 00:24:37.000\nSo, now, what does this ultimately do?\n\n408\n00:24:37.000 --> 00:24:41.100\nThis type save watcher is going to be\nthe handler for this type save object.\n\n409\n00:24:41.100 --> 00:24:45.070\nSo I'm going to pass an object to this\nfunction, it's going to spit out a proxy.\n\n410\n00:24:45.070 --> 00:24:48.480\nWell at the very end of this constructor,\nI actually call this function and\n\n411\n00:24:48.480 --> 00:24:50.360\nmake the constructor return that.\n\n412\n00:24:50.360 --> 00:24:54.220\nSo if I create a new car,\nI should get a type safe car and\n\n413\n00:24:54.220 --> 00:24:56.470\nshouldn't be able to change\nthe color to like a number.\n\n414\n00:24:57.500 --> 00:24:59.560\nWell, let's see if that is the case.\n\n415\n00:24:59.560 --> 00:25:04.459\nSo I'm going to const car = new Car and\n\n416\n00:25:04.459 --> 00:25:10.585\nnew car requires well say yellow,\nmake dodge,\n\n417\n00:25:10.585 --> 00:25:15.500\nand fuel let's go with 10 gallons.\n\n418\n00:25:15.500 --> 00:25:19.210\nA 100 might be a little out\nof realm of possibility.\n\n419\n00:25:19.210 --> 00:25:23.690\nSo I'm gonna now play well on the console,\njust so we can see this at work.\n\n420\n00:25:25.400 --> 00:25:30.220\nSo if I refresh and I look at car,\nnotice the car I constructed\n\n421\n00:25:30.220 --> 00:25:34.460\nis actually a proxy, because I don't\nhave access to the original object.\n\n422\n00:25:34.460 --> 00:25:35.740\nIt's kind of hanging out in the ether,\n\n423\n00:25:35.740 --> 00:25:40.490\nand this is where this separation\nis nice because now I more or\n\n424\n00:25:40.490 --> 00:25:45.070\nless have to ask permission through\nthe proxy to modify the original object.\n\n425\n00:25:45.070 --> 00:25:48.940\nSo if I say car.color = 2.\n\n426\n00:25:48.940 --> 00:25:53.340\nWell, originally,\nupon construction, it was a string.\n\n427\n00:25:54.400 --> 00:25:55.890\nTypes are wrong, too.\n\n428\n00:25:55.890 --> 00:26:02.535\nWell, I can't change that, but if I say\ncar.color = 'red', someone painted it.\n\n429\n00:26:02.535 --> 00:26:05.660\nUh-oh, and\n\n430\n00:26:05.660 --> 00:26:10.080\nnotice it has actually been piped through\nto the original object and modified that.\n\n431\n00:26:10.080 --> 00:26:16.960\nLikewise, I can't say fuel = 'empty',\nright?\n\n432\n00:26:16.960 --> 00:26:18.282\nWell it should be zero.\n\n433\n00:26:18.282 --> 00:26:19.810\nI wanna make sure it's always a number,\n\n434\n00:26:19.810 --> 00:26:22.240\nbecause I'm always gonna treat\nit as a number in my program.\n\n435\n00:26:23.480 --> 00:26:27.530\nWell types are wrong, can't do that,\nand notice that the car hasn't changed.\n\n436\n00:26:27.530 --> 00:26:32.110\nBut if I say car.fuel = 3,\nthen that actually does go through.\n\n437\n00:26:32.110 --> 00:26:40.670\nSo I have this semblance of type safety,\nwhich is incredibly powerful.\n\n438\n00:26:40.670 --> 00:26:45.570\nSo I have get, has and set are kind of\nthe ones that I use a great deal but\n\n439\n00:26:45.570 --> 00:26:49.970\nsome of those other ones can provide you\nwith so much power and you can actually,\n\n440\n00:26:49.970 --> 00:26:54.620\nessentially I've seen a few web frameworks\nbuilt on entirely on top of this.\n\n441\n00:26:54.620 --> 00:26:57.070\nSo it makes me real, real excited Daniel.\n\n442\n00:26:57.070 --> 00:26:58.030\nBut you know?\n\n443\n00:26:58.030 --> 00:27:01.950\nI think that provides all we need to\nknow to get started with proxies.\n\n444\n00:27:01.950 --> 00:27:02.490\n&gt;&gt; Well, there are very,\n\n445\n00:27:02.490 --> 00:27:06.289\nvery cool functions that we\nhave inside of ES6 JavaScript.\n\n446\n00:27:07.520 --> 00:27:11.100\nA good way for us to, like you said,\nvalidate our data types, or\n\n447\n00:27:11.100 --> 00:27:12.750\nsanitize the data as well.\n\n448\n00:27:12.750 --> 00:27:15.770\nKeep some security going\non inside of our programs.\n\n449\n00:27:15.770 --> 00:27:16.900\nCause that's, that's what we like.\n\n450\n00:27:16.900 --> 00:27:21.190\nWe don't like people breaking stuff\npurposefully for malfeasant purposes.\n\n451\n00:27:21.190 --> 00:27:22.430\n&gt;&gt; Malfeasant, that's a good word.\n\n452\n00:27:22.430 --> 00:27:23.110\n&gt;&gt; Yeah.\nI, I like it.\n\n453\n00:27:23.110 --> 00:27:24.240\nIt's on my word of the day calendar.\n\n454\n00:27:24.240 --> 00:27:25.250\nIt's kicking in.\n\n455\n00:27:25.250 --> 00:27:25.790\nThat being said.\n\n456\n00:27:25.790 --> 00:27:28.560\nJustin, thanks so much for stopping\nby today, teaching us about proxies.\n\n457\n00:27:28.560 --> 00:27:32.090\nHopefully you guys got a lot out of this\nepisode but it looks like it is time for\n\n458\n00:27:32.090 --> 00:27:33.320\nus to sign off.\n\n459\n00:27:33.320 --> 00:27:35.790\nFor ITProTV I've been\nyour host Daniel Lowery.\n\n460\n00:27:35.790 --> 00:27:36.640\n&gt;&gt; And I am Justin Dennison.\n\n461\n00:27:36.640 --> 00:27:37.745\n&gt;&gt; And we will see you next time.\n\n462\n00:27:37.745 --> 00:27:45.404\n[MUSIC]\n\n463\n00:27:45.404 --> 00:27:52.139\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204913771"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at using Sets and WeakSets in ES6. They start by explaining what Sets are and showing you their basic use and attributes. Then they define and demonstrate the use of WeakSets which are very similar to regular Sets, but with some important distinctions.",
          "length": "2076",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-13-1-sets_and_weaksets-021417-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-13-1-sets_and_weaksets-021417-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-13-1-sets_and_weaksets-021417-1-sm.jpg",
          "title": "Sets and WeakSets",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:06.359\nWelcome to ITProTV, I'm your host, Don-\n&gt;&gt; [CROSSTALK]\n\n2\n00:00:06.359 --> 00:00:08.228\n[MUSIC]\n\n3\n00:00:08.228 --> 00:00:12.711\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.711 --> 00:00:14.050\n&gt;&gt; All right, greetings, everyone, and\n\n5\n00:00:14.050 --> 00:00:17.250\nwelcome to another exciting\nepisode of ITProTV.\n\n6\n00:00:17.250 --> 00:00:20.962\nI'm you host, Daniel Lowrie,\nand in today's episode, well,\n\n7\n00:00:20.962 --> 00:00:24.144\nwe're back with more on our\nwhat's new in ES6 series.\n\n8\n00:00:24.144 --> 00:00:26.410\nThat's difficult to say, you should\ntry it sometime, it's a lot of fun.\n\n9\n00:00:26.410 --> 00:00:30.114\nThat being said, joining us back in\nthe studio, yet again, our good friend and\n\n10\n00:00:30.114 --> 00:00:31.680\nmentor, Mr. Justin Dennison.\n\n11\n00:00:31.680 --> 00:00:33.640\nJustin, welcome back,\nsir, how goes it today?\n\n12\n00:00:33.640 --> 00:00:34.630\n&gt;&gt; It goes well, it goes well.\n\n13\n00:00:34.630 --> 00:00:38.720\nI will agree with you,\nES6, there's this ES6.\n\n14\n00:00:38.720 --> 00:00:42.070\nYou want to string it all together,\nwhich leaves just that X part.\n\n15\n00:00:42.070 --> 00:00:46.300\nAnd then you're just like, I'm sorry,\nthe words are like no, [NOISE].\n\n16\n00:00:46.300 --> 00:00:51.960\nSo, yeah, so ES6, there's new data types\nkinda coming into their own fruition.\n\n17\n00:00:53.150 --> 00:00:56.760\nThis episode, we're actually gonna\ntalk about Sets and WeakSets.\n\n18\n00:00:56.760 --> 00:00:58.770\nWhat are Sets and WeakSets?\n\n19\n00:00:58.770 --> 00:01:02.273\nI don't know, I hear those words and\nI just kinda glaze over and go.\n\n20\n00:01:02.273 --> 00:01:05.454\n&gt;&gt; I'm in a band, so we play sets, and\nthen when you don't do really well,\n\n21\n00:01:05.454 --> 00:01:06.658\nthat's a weak set.\n\n22\n00:01:06.658 --> 00:01:08.840\n&gt;&gt; Yeah, that would make sense,\nthat would make sense.\n\n23\n00:01:08.840 --> 00:01:10.739\nSadly, that's not what\nwe're talking about.\n\n24\n00:01:10.739 --> 00:01:11.996\n&gt;&gt; Wrong context.\n\n25\n00:01:11.996 --> 00:01:13.220\n&gt;&gt; Yeah, it sucks, yep.\n\n26\n00:01:13.220 --> 00:01:15.790\nSo Sets, we're actually going\nto talk about mathematical sets.\n\n27\n00:01:15.790 --> 00:01:18.680\nThat's the last time I'm gonna\nuse the word mathematical,\n\n28\n00:01:18.680 --> 00:01:23.430\nother than a set is\na collection of unique items.\n\n29\n00:01:23.430 --> 00:01:28.030\nIf I had a set with the number 1 in it\na bunch of times, when I actually made it\n\n30\n00:01:28.030 --> 00:01:33.030\na Set, by data structure terms,\nI would have the number 1 one time.\n\n31\n00:01:33.030 --> 00:01:36.790\nI can't have duplicates,\nI don't really have a defined order.\n\n32\n00:01:36.790 --> 00:01:40.743\nIn JavaScript, it seems that you get a\nlittle bit of order there, but they don't\n\n33\n00:01:40.743 --> 00:01:44.310\nhave to have any order like this is\nthe first one, this is the second one.\n\n34\n00:01:44.310 --> 00:01:47.040\nAs a result, Sets are not indexable.\n\n35\n00:01:47.040 --> 00:01:50.900\nI can't use that bracket notation like\narrays in order to grab the first element,\n\n36\n00:01:50.900 --> 00:01:52.040\nthe second element.\n\n37\n00:01:52.040 --> 00:01:57.776\nBut with standard Sets, I can iterate\nover them, and I have nonduplicate ones.\n\n38\n00:01:57.776 --> 00:01:59.753\nThere's a kind of a weird data structure,\nand\n\n39\n00:01:59.753 --> 00:02:03.130\nwe'll actually see a couple of use\ncases where this may come in handy.\n\n40\n00:02:03.130 --> 00:02:04.470\nBut, I will forewarn you,\n\n41\n00:02:04.470 --> 00:02:08.400\nthere's sometimes very small niche\ncases at this point in time.\n\n42\n00:02:08.400 --> 00:02:10.740\nHowever, if you find one that you're like,\n\n43\n00:02:10.740 --> 00:02:14.272\nthis is a perfect fit,\nthen definitely use a Set.\n\n44\n00:02:14.272 --> 00:02:16.736\nIt's kinda knowing the right tool to use,\nright?\n\n45\n00:02:16.736 --> 00:02:20.530\nWe're like, I need to hammer this nail,\nand there's a pair of pliers.\n\n46\n00:02:20.530 --> 00:02:21.470\nIt doesn't work real well.\n\n47\n00:02:21.470 --> 00:02:24.590\nSo make sure you're using\nthe appropriate tools for what you need.\n\n48\n00:02:24.590 --> 00:02:27.300\nSo, let's go ahead and\ndive in and see what a Set is and\n\n49\n00:02:27.300 --> 00:02:31.240\nthen what is meant by a WeakSet,\nthat's kinda weird.\n\n50\n00:02:31.240 --> 00:02:34.320\nWell, let's start with Sets and\nsee where this takes us.\n\n51\n00:02:34.320 --> 00:02:38.560\nSo I'm gonna go ahead and hop onto my\nbrowser here and get my project set up.\n\n52\n00:02:38.560 --> 00:02:43.034\nI'm gonna open my index.html file for\nmy Sets and WeakSets.\n\n53\n00:02:43.034 --> 00:02:47.120\nI just like saying Sets and WeakSets,\nI don't know, but I agree with you.\n\n54\n00:02:47.120 --> 00:02:50.690\nWeakness does have some\ninteresting implications there.\n\n55\n00:02:50.690 --> 00:02:55.836\nAnd I'm gonna open my Chrome DevTools,\nand Developer Tools there,\n\n56\n00:02:55.836 --> 00:02:59.570\nand I'm ready to go,\njust running this app.js.\n\n57\n00:02:59.570 --> 00:03:04.002\nI'm gonna hop over into Atom and\nadd a project folder, and\n\n58\n00:03:04.002 --> 00:03:06.660\nthis is going to be for my WeakSet.\n\n59\n00:03:06.660 --> 00:03:11.635\nI can never can get my drop-down dialogs\nto remember the exact folder that I need,\n\n60\n00:03:11.635 --> 00:03:15.680\nI always have to go searching for\nit, never fails.\n\n61\n00:03:15.680 --> 00:03:20.325\nSo index.html, not a lot going on\nin there, just running that app.js.\n\n62\n00:03:20.325 --> 00:03:24.500\nAnd then app.js, this is where\nall the fun's about to happen.\n\n63\n00:03:24.500 --> 00:03:27.390\nSo what is a Set, and\nhow do we make a Set?\n\n64\n00:03:27.390 --> 00:03:28.360\nHow are they used?\n\n65\n00:03:28.360 --> 00:03:29.700\nWhat can we do with them?\n\n66\n00:03:29.700 --> 00:03:33.450\nWell, I think the best way\nis just to start using them.\n\n67\n00:03:33.450 --> 00:03:34.170\nLet's look at a Set.\n\n68\n00:03:35.170 --> 00:03:38.690\nIf I wanted to make a Set,\nI could say Set and\n\n69\n00:03:38.690 --> 00:03:43.270\nthat would actually create an empty Set.\n\n70\n00:03:43.270 --> 00:03:44.380\nThere is nothing in there.\n\n71\n00:03:44.380 --> 00:03:47.270\nLet's go and\nlook at what that is, empty Set.\n\n72\n00:03:47.270 --> 00:03:50.910\nBut the only reason I wanna print this out\ncuz I have an example that'll help you\n\n73\n00:03:50.910 --> 00:03:55.850\nthink about hopefully, hopefully,\nhelp you think about what a Set would be.\n\n74\n00:03:55.850 --> 00:03:59.250\nSo I look at a Set and\nnotice the Set has a size and\n\n75\n00:03:59.250 --> 00:04:02.870\nthen it has this __proto__ and\nthen [[Entries]].\n\n76\n00:04:02.870 --> 00:04:04.255\nWell, this says array.\n\n77\n00:04:04.255 --> 00:04:06.105\nWell, that's because behind the scenes,\n\n78\n00:04:06.105 --> 00:04:08.410\nthere's probably some array\naction going on in here.\n\n79\n00:04:08.410 --> 00:04:14.180\nBut they're abstracting away some of this\nuniqueness and nonordered stuff for you.\n\n80\n00:04:14.180 --> 00:04:19.625\nSo if we look at __proto__,\nI can add, clear, delete entries.\n\n81\n00:04:19.625 --> 00:04:22.880\nOoh, I see entries,\nI see keys, I see values.\n\n82\n00:04:22.880 --> 00:04:26.540\nI see Symbol.iterator,\nthat means that this is an iterable.\n\n83\n00:04:26.540 --> 00:04:31.501\nI can iterate over it and use for\nlet of, I have a for each and\n\n84\n00:04:31.501 --> 00:04:37.300\nI can use these iterator values,\n.values, .keys, .entries.\n\n85\n00:04:37.300 --> 00:04:39.080\nBut some of them don't\nmake a lot of sense.\n\n86\n00:04:39.080 --> 00:04:42.920\nYou'll notice in the iterators, anything\nthat adheres to the iterator protocol will\n\n87\n00:04:42.920 --> 00:04:44.720\nalways have entries, values and keys.\n\n88\n00:04:45.820 --> 00:04:50.210\nBut in certain contexts, entries doesn't\nmake sense and keys doesn't make sense.\n\n89\n00:04:50.210 --> 00:04:54.640\nBut they're trying to unify this\nAPI how you use these iterators.\n\n90\n00:04:54.640 --> 00:04:56.442\nSo they're always available to you,\n\n91\n00:04:56.442 --> 00:04:58.990\njust you have to know which\none to use appropriately.\n\n92\n00:04:58.990 --> 00:05:01.069\nSo this Set is empty.\n\n93\n00:05:01.069 --> 00:05:04.464\nIf I wanted to know whether\nthe Set was empty, I could say,\n\n94\n00:05:04.464 --> 00:05:06.070\nhey, what is the Set size?\n\n95\n00:05:07.140 --> 00:05:09.300\nWell if I refresh, it is 0.\n\n96\n00:05:09.300 --> 00:05:13.186\nNow, unlike arrays or strings,\nit's not .length because there's no order,\n\n97\n00:05:13.186 --> 00:05:15.720\nit's just how many things are in the bag.\n\n98\n00:05:15.720 --> 00:05:17.490\nIf I hold up a bag, how many are in that?\n\n99\n00:05:17.490 --> 00:05:19.490\nIt doesn't matter if I put them\nin a straight line or not,\n\n100\n00:05:19.490 --> 00:05:21.240\nI just wanna know how many's in there.\n\n101\n00:05:21.240 --> 00:05:22.570\nSo, what is the size?\n\n102\n00:05:22.570 --> 00:05:26.769\nAnd that's where it varies\na little bit from our normal,\n\n103\n00:05:26.769 --> 00:05:29.930\nhow do I get how many\nelements are in there?\n\n104\n00:05:29.930 --> 00:05:35.020\nEmpty Set, that's nice, but\nlet's actually look at an example.\n\n105\n00:05:35.020 --> 00:05:39.115\nSo, I remember having these collections\nof crayons and colored pencils, so\n\n106\n00:05:39.115 --> 00:05:41.120\nlet's go with colored pencils.\n\n107\n00:05:41.120 --> 00:05:43.934\nAnd I would open up the box\nof colored pencils, and\n\n108\n00:05:43.934 --> 00:05:48.500\nI would go, ooh, there's a green, and\nthere's a red, and a yellow and a blue.\n\n109\n00:05:48.500 --> 00:05:50.160\nBut I never had the same color.\n\n110\n00:05:50.160 --> 00:05:53.620\nI had a unique color for\nevery pencil in the box.\n\n111\n00:05:53.620 --> 00:05:57.330\nThat is, until you got a bunch of colored\npencils boxes and you dumped them all out,\n\n112\n00:05:57.330 --> 00:06:00.770\nand then somehow you ended up with\na package just with red in it.\n\n113\n00:06:00.770 --> 00:06:03.180\nBut we're gonna act like\nthat's never gonna happen.\n\n114\n00:06:03.180 --> 00:06:06.230\nInstead, we just open a new\nbox of colored pencils.\n\n115\n00:06:06.230 --> 00:06:11.720\nThis is actually a Set, I have a unique\ncolor for each element in the Set.\n\n116\n00:06:11.720 --> 00:06:16.490\nSo let's call this cPencils,\nfor colored pencils.\n\n117\n00:06:16.490 --> 00:06:20.160\nAnd that is a new Set.\n\n118\n00:06:20.160 --> 00:06:24.180\nNow, there's a couple of ways that\nI can kind of build up a Set.\n\n119\n00:06:24.180 --> 00:06:31.460\nI can pass in an iterable, an array, with\nthe elements that I wanna put in there.\n\n120\n00:06:31.460 --> 00:06:36.920\nSo I have a red colored pencil,\na yellow and a green.\n\n121\n00:06:36.920 --> 00:06:40.040\nNow, notice this is not all\nof the colors that I have.\n\n122\n00:06:40.040 --> 00:06:43.613\nBut let's go ahead and see what\nwould happen if I put in red twice.\n\n123\n00:06:43.613 --> 00:06:47.784\nSo let's console.log out colored pencils.\n\n124\n00:06:50.325 --> 00:06:51.863\nSo, cPencils.\n\n125\n00:06:53.370 --> 00:06:56.595\nAnd as I refresh, notice in my Set, 'red',\n\n126\n00:06:56.595 --> 00:07:01.310\nwell, it's only in there once,\nbecause 'red' has to be unique.\n\n127\n00:07:01.310 --> 00:07:05.660\nI put in this same string twice,\nbut those are no longer unique,\n\n128\n00:07:05.660 --> 00:07:09.240\nthey are strictly equal to each other,\nso I only add one to the set.\n\n129\n00:07:10.390 --> 00:07:14.211\nNow, what if I, later on, I'm like,\nI actually have a blue and\n\n130\n00:07:14.211 --> 00:07:17.600\na black colored pencil that I need to add?\n\n131\n00:07:17.600 --> 00:07:24.170\nSo I can also build up the set by\ndoing what's called method chaining.\n\n132\n00:07:24.170 --> 00:07:26.630\nSo I can add blue.\n\n133\n00:07:26.630 --> 00:07:28.940\nAnd I can also add, and typically,\n\n134\n00:07:28.940 --> 00:07:33.310\nyou will see this kind of chained top to\nbottom on the next line, just so you can\n\n135\n00:07:33.310 --> 00:07:36.960\nread it as a list instead of straight\nacross, cuz it's a little harder to read.\n\n136\n00:07:36.960 --> 00:07:40.610\nAnd then let's add black.\n\n137\n00:07:40.610 --> 00:07:42.320\nSo, there's my colored pencils.\n\n138\n00:07:42.320 --> 00:07:46.370\nAre there probably a lot more colored\npencils in this set of colored pencils?\n\n139\n00:07:46.370 --> 00:07:50.450\nSure, but I think that doesn't\nreally add to the understanding.\n\n140\n00:07:50.450 --> 00:07:51.870\nSo let's go back and see.\n\n141\n00:07:51.870 --> 00:07:54.960\nI always get a little carried away\nwith that swipe all the time.\n\n142\n00:07:54.960 --> 00:07:58.043\nSo I have 'red', 'yellow',\n'green', 'blue', 'black'.\n\n143\n00:07:58.043 --> 00:07:59.813\nNow, notice these are strings.\n\n144\n00:07:59.813 --> 00:08:02.852\nThese are easy to compare to.\n\n145\n00:08:02.852 --> 00:08:08.250\nFor now, let's add a couple of objects in\nhere, so these are more complex types.\n\n146\n00:08:08.250 --> 00:08:13.420\nWe're comparing equality as\nsometimes a little bit ambiguous.\n\n147\n00:08:13.420 --> 00:08:20.027\nSo, as a quick aside,\nlet's go cPencils.add,\n\n148\n00:08:20.027 --> 00:08:25.740\njust an empty object and\nlet's add another empty object.\n\n149\n00:08:25.740 --> 00:08:29.390\nNow, based on what I previously said,\nI should only have one object in this set.\n\n150\n00:08:30.450 --> 00:08:36.570\nWell, we're actually gonna see that if\nI drop this down, I have Object Object.\n\n151\n00:08:36.570 --> 00:08:38.550\nI actually have the object twice, and\n\n152\n00:08:38.550 --> 00:08:43.760\nthat's because comparing object equality\nto object equality is not quite\n\n153\n00:08:43.760 --> 00:08:48.980\nas easy as comparing letter by letter\nin a string or by a number by number.\n\n154\n00:08:48.980 --> 00:08:53.640\nObjective equality actually has to deal\nwith are they the same object in memory?\n\n155\n00:08:53.640 --> 00:08:55.454\nAre do they have the same\nmemory address space?\n\n156\n00:08:55.454 --> 00:08:59.596\nIf they do then they can compare\nuniqueness if I'm adding\n\n157\n00:08:59.596 --> 00:09:03.307\nobject literals to the set\nthough there is no way for\n\n158\n00:09:03.307 --> 00:09:06.604\nthose two things to be\nthe exact same object.\n\n159\n00:09:06.604 --> 00:09:12.460\nAnd to compare that with instead\nhaving an object set to a variable,\n\n160\n00:09:12.460 --> 00:09:14.524\nright, so something.\n\n161\n00:09:16.724 --> 00:09:23.694\nAnd now if I add this as something, Right,\n\n162\n00:09:23.694 --> 00:09:28.556\nI added it twice but if we look, you will\nnotice the object is only in there once,\n\n163\n00:09:28.556 --> 00:09:30.600\nbecause since it is by variable.\n\n164\n00:09:30.600 --> 00:09:34.552\nThat is the exact same object in\nmemory trying to be added, and\n\n165\n00:09:34.552 --> 00:09:38.230\nthose are equal, so\nduplication is not allowed.\n\n166\n00:09:38.230 --> 00:09:44.630\nSo that's a catchy little gotcha that'll\nkind of crop up if you're not careful.\n\n167\n00:09:44.630 --> 00:09:45.940\nFor the most part,\n\n168\n00:09:45.940 --> 00:09:50.370\nadding object literals to a set\ndoesn't make a lot of sense, right?\n\n169\n00:09:50.370 --> 00:09:55.600\nI, I either need a collection or,\nthat'll come back, or I'm adding these as,\n\n170\n00:09:56.760 --> 00:10:00.900\nusing variables or strings or\nnumbers as, as my type.\n\n171\n00:10:00.900 --> 00:10:04.810\nSo that's a quick little aside\nabout a gotcha that'll you're like,\n\n172\n00:10:04.810 --> 00:10:07.160\nhey, he said they had to be unique.\n\n173\n00:10:07.160 --> 00:10:11.480\nBut I found a way to add 37 objects and\nthey look unique.\n\n174\n00:10:11.480 --> 00:10:15.540\nBut they're all there, so\nbe very careful about that, so\n\n175\n00:10:15.540 --> 00:10:16.900\nI have my colored pencils, right?\n\n176\n00:10:18.240 --> 00:10:21.320\nSometimes I like to look inside my,\nmy box of colored pencils and\n\n177\n00:10:21.320 --> 00:10:23.540\njust sift through and\nsee what colors I have.\n\n178\n00:10:23.540 --> 00:10:26.730\nWell, that's an iterative method, right?\n\n179\n00:10:26.730 --> 00:10:30.860\nThat's a way to iterate, so\nwhat are some ways that I can do that?\n\n180\n00:10:30.860 --> 00:10:35.560\nI can use the for of lieu, and\n\n181\n00:10:35.560 --> 00:10:41.486\nsay for let pencil of cPencils and\n\n182\n00:10:41.486 --> 00:10:48.782\nthen console.log pencils, so I'm just\nsifting through, seeing what I have, here.\n\n183\n00:10:48.782 --> 00:10:53.720\nAll right, so, if I refresh,\n\n184\n00:10:53.720 --> 00:10:57.540\nred, yellow, green, blue, black,\nawesome, so that iterates through.\n\n185\n00:10:57.540 --> 00:11:00.820\nAny time I see dot values,\ndot entries, dot keys, or\n\n186\n00:11:00.820 --> 00:11:05.660\nthat symbol about iterator for\nlet or for of should work.\n\n187\n00:11:05.660 --> 00:11:08.967\nAll right, should work you\nmight find some or bugs but\n\n188\n00:11:08.967 --> 00:11:11.478\nthat is how the protocol is missed with.\n\n189\n00:11:11.478 --> 00:11:14.799\nNow this is handy so, if I have four of,\n\n190\n00:11:14.799 --> 00:11:18.525\nactually on set I have\nthe ability to run a for\n\n191\n00:11:18.525 --> 00:11:23.695\neach which more or less are equivalent and\nif truth be known.\n\n192\n00:11:23.695 --> 00:11:27.784\nThere's probably some behind the scenes,\nwell, technically,\n\n193\n00:11:27.784 --> 00:11:32.030\nthis is the same thing, I can't say for\ncertain that it's the case.\n\n194\n00:11:32.030 --> 00:11:37.300\nBut you ever have those\ngut feelings where you're,\n\n195\n00:11:37.300 --> 00:11:41.660\nthis is very similar, so,\nif I say cPencils.forEach.\n\n196\n00:11:41.660 --> 00:11:45.780\nAnd for each pencil I'm gonna use\nthose feather or functions here,\n\n197\n00:11:45.780 --> 00:11:51.020\nI wanna print out the pencil and\nwill notice that I actually\n\n198\n00:11:51.020 --> 00:11:55.140\nget exact same output right so I'm\nrunning though every element of the set.\n\n199\n00:11:56.140 --> 00:11:59.590\nthat does not mean I havent\norder to it right and I set\n\n200\n00:12:01.030 --> 00:12:05.790\ndoes not have to be ordered in JavaScript\nthough as we've have seen there's array.\n\n201\n00:12:05.790 --> 00:12:11.187\nStuff happening behind the scenes so\nthere probably is and order, but do not\n\n202\n00:12:11.187 --> 00:12:16.769\nguarantee on order, with that said what\nif I wanted to grab the first element.\n\n203\n00:12:16.769 --> 00:12:19.313\nWell if I say cPencils bracket 0,\n\n204\n00:12:19.313 --> 00:12:23.099\nthat's the first element that should or\nred, right?\n\n205\n00:12:23.099 --> 00:12:28.860\nSo if I refresh that's undefined,\nsets are not indexable by position.\n\n206\n00:12:28.860 --> 00:12:33.510\nSets are about having something or\nlooking through something, it's an all or\n\n207\n00:12:33.510 --> 00:12:35.650\nnothing type deal, right?\n\n208\n00:12:35.650 --> 00:12:39.950\nIs red in the set, or\nis it not in the set?\n\n209\n00:12:39.950 --> 00:12:42.500\nOr can I go through the entire collection?\n\n210\n00:12:42.500 --> 00:12:47.780\nSo I can iterate through those,\nwe've seen add, but you know what?\n\n211\n00:12:47.780 --> 00:12:50.914\nI've been really using this\nblue-colored pencil and\n\n212\n00:12:50.914 --> 00:12:54.806\nit's all gone, so I should actually\nremove it from the sets [SOUND].\n\n213\n00:12:54.806 --> 00:13:01.640\nSo I'm going to temporarily comment out\nthese, so just as are reminder, note.\n\n214\n00:13:03.250 --> 00:13:07.605\nSo if I want to remove,\nI do have a delete method, I can say,\n\n215\n00:13:07.605 --> 00:13:12.030\ncPencils.delete and\nI just delete the element.\n\n216\n00:13:12.030 --> 00:13:16.839\nSo, blue, and then console.log,\n\n217\n00:13:16.839 --> 00:13:22.170\ncPencils and here we go, so\nnotice I have blue there.\n\n218\n00:13:22.170 --> 00:13:25.850\nI've deleted the element and all it did\nwas just kind of pluck it out, right?\n\n219\n00:13:25.850 --> 00:13:28.430\nSo it's good to know,\nwhat those things are.\n\n220\n00:13:28.430 --> 00:13:29.520\nIf I had an object literal,\n\n221\n00:13:29.520 --> 00:13:32.530\nit would be very difficult to do that\ncuz I don't have a reference to it.\n\n222\n00:13:32.530 --> 00:13:36.320\nThere's no way I can say,\ndelete this particular object literal.\n\n223\n00:13:36.320 --> 00:13:39.300\nSo don't put empty objects that\nare not assigned to another variable\n\n224\n00:13:39.300 --> 00:13:40.520\ninside of a set.\n\n225\n00:13:40.520 --> 00:13:43.660\nYou'll end up with a memory leak and\nyour set just kinda hangs out for\n\n226\n00:13:43.660 --> 00:13:45.300\nthe entire duration of your application.\n\n227\n00:13:45.300 --> 00:13:47.500\nAnd then, it might cause you to crash.\n\n228\n00:13:47.500 --> 00:13:48.910\n&gt;&gt; That's a bad thing, right?\n\n229\n00:13:48.910 --> 00:13:49.470\n&gt;&gt; That's bad.\n\n230\n00:13:49.470 --> 00:13:50.110\n&gt;&gt; Okay.\n&gt;&gt; That's bad, yeah, it's really bad.\n\n231\n00:13:50.110 --> 00:13:56.233\n&gt;&gt; Making sure, yeah, now,\nI use all these colored pencils,\n\n232\n00:13:56.233 --> 00:14:00.084\nI really just need to throw them away.\n\n233\n00:14:00.084 --> 00:14:04.919\nWell, set does have the ability\nto clear the entire set,\n\n234\n00:14:04.919 --> 00:14:09.170\nI just wanna get rid of all of them,\nright, boom.\n\n235\n00:14:10.360 --> 00:14:16.670\nAnd you actually have to not hit\nrefresh on Adam but instead in Chrome,\n\n236\n00:14:16.670 --> 00:14:21.360\nso let's move this over here and\nI refresh and now the set is empty.\n\n237\n00:14:21.360 --> 00:14:24.000\nSo, that's handy I can clear all of it,\nand\n\n238\n00:14:24.000 --> 00:14:29.400\nthat's because maybe your set is only used\nfor checking to see if you've already seen\n\n239\n00:14:29.400 --> 00:14:32.590\nthe colored pencil right,\nif I'm searching for something.\n\n240\n00:14:32.590 --> 00:14:35.610\nWell, there's the blue one, there's\nthe red one, there's the green one,\n\n241\n00:14:35.610 --> 00:14:39.420\nI'm putting them in a pile of things\nthat are already seen, right?\n\n242\n00:14:39.420 --> 00:14:45.350\nA set is a great way to use that because I\ndon't have to then loop through everything\n\n243\n00:14:45.350 --> 00:14:50.140\nover and over and over cuz as soon as\nI find it, I know it's the unique one.\n\n244\n00:14:50.140 --> 00:14:55.200\nSo how would I check to see if it\nis If there's something in there,\n\n245\n00:14:55.200 --> 00:14:58.860\nso if I say console.log(cPencils.has.\n\n246\n00:14:58.860 --> 00:15:04.960\nSo I can ask the set,\ndo you have this element?\n\n247\n00:15:04.960 --> 00:15:07.350\nDo you have yellow?\n\n248\n00:15:09.430 --> 00:15:11.190\nAnd in fact, it does.\n\n249\n00:15:11.190 --> 00:15:13.230\nYes, yellow's in the set, so\n\n250\n00:15:13.230 --> 00:15:16.480\nI can now create a pile of\nthings that I'm searching for.\n\n251\n00:15:16.480 --> 00:15:18.620\nI've already looked at these,\nI've already looked at these,\n\n252\n00:15:18.620 --> 00:15:23.040\nI've already looked at these, until\nI've kind of sifted out and partitioned.\n\n253\n00:15:23.040 --> 00:15:24.820\nSo, sets are really great for that.\n\n254\n00:15:24.820 --> 00:15:29.470\nNow, what's very interesting is,\nlet's take a look at that\n\n255\n00:15:29.470 --> 00:15:35.150\nvalues interators, the keys iterator and\nthe entries iterator.\n\n256\n00:15:35.150 --> 00:15:37.100\nReal quick, so\nwe've done a little bit of iteration,\n\n257\n00:15:37.100 --> 00:15:38.980\nthis is typically how I\nwould iterate through a set.\n\n258\n00:15:40.270 --> 00:15:44.670\nBut if we move down here, wow,\nthat's a lot of comment marks,\n\n259\n00:15:46.080 --> 00:15:50.170\nso let's remove those and put this so\nwe don't have this going on.\n\n260\n00:15:50.170 --> 00:15:55.921\nAnd if I say iter and So cPencils and\nI'm just going to set this up and\n\n261\n00:15:55.921 --> 00:15:59.328\nlook at the differences between them.\n\n262\n00:15:59.328 --> 00:16:03.089\nSo there's my entries so\nthis is going to what is entries?\n\n263\n00:16:03.089 --> 00:16:06.882\nUsually in an array it gives me\nKind of the index and the value.\n\n264\n00:16:06.882 --> 00:16:10.965\nAnd in some other stuff,\nit might give me a key-value pair.\n\n265\n00:16:10.965 --> 00:16:16.649\nSo for let element of iter.\n\n266\n00:16:20.946 --> 00:16:22.240\nAnd there's my element.\n\n267\n00:16:22.240 --> 00:16:23.690\nLet's go see what this prints out.\n\n268\n00:16:23.690 --> 00:16:26.782\nRed, red, yellow, yellow, green,\ngreen, blue, blue, black, black.\n\n269\n00:16:26.782 --> 00:16:31.450\nWell, it'll give you these pairs,\nbut they're the exact same pairs.\n\n270\n00:16:31.450 --> 00:16:35.530\nSo entries is not really useful in\nthe case of a set, cuz there's no order.\n\n271\n00:16:35.530 --> 00:16:39.570\nThere's nothing to put as the index,\nit is the element.\n\n272\n00:16:39.570 --> 00:16:41.350\nWell, what about values?\n\n273\n00:16:44.107 --> 00:16:45.790\nWell, red, yellow, green.\n\n274\n00:16:45.790 --> 00:16:49.406\nOkay, that makes sense, what about keys?\n\n275\n00:16:52.948 --> 00:16:53.785\nIt's actually the same thing.\n\n276\n00:16:53.785 --> 00:16:56.974\nSo keys and values are the same,\nentries actually takes keys and values and\n\n277\n00:16:56.974 --> 00:16:59.745\nsmashes them together so\nyou get duplicates.\n\n278\n00:16:59.745 --> 00:17:04.270\nNow, these iterators come in handy\nin a little bit different context.\n\n279\n00:17:04.270 --> 00:17:07.390\nSo I'm actually going to grab just\nthe values because that makes\n\n280\n00:17:07.390 --> 00:17:08.370\nthe most sense, right?\n\n281\n00:17:08.370 --> 00:17:10.136\nI'm getting the values out of the set.\n\n282\n00:17:10.136 --> 00:17:13.566\nBut instead of iterating through them,\nI'm gonna hop over in the console and\n\n283\n00:17:13.566 --> 00:17:15.110\njust play around for a little bit.\n\n284\n00:17:15.110 --> 00:17:18.904\nSo if I look at this set,\nlet's look at iter.\n\n285\n00:17:18.904 --> 00:17:21.889\nSo the iter has the same\nnumber of elements.\n\n286\n00:17:21.889 --> 00:17:27.805\nIf I call iter.next, okay, so I'm getting\nthe first value, which is red, am I done?\n\n287\n00:17:27.805 --> 00:17:28.464\nNo.\n\n288\n00:17:28.464 --> 00:17:29.910\nSo then iter.\n\n289\n00:17:31.390 --> 00:17:34.688\nWell, I've actually peeled that off,\nit's been consumed.\n\n290\n00:17:34.688 --> 00:17:35.989\nBut I forgot.\n\n291\n00:17:35.989 --> 00:17:40.987\nI actually need to go back and\nadd a chartreuse pencil,\n\n292\n00:17:40.987 --> 00:17:44.257\nwhich is a lovely green, to my set.\n\n293\n00:17:44.257 --> 00:17:50.735\nSo if I go cPencils.add('chartreuse').\n\n294\n00:17:52.938 --> 00:17:55.312\nOkay, so if I look at cPencils.\n\n295\n00:17:57.134 --> 00:18:00.950\nThat has added chartreuse to the set.\n\n296\n00:18:00.950 --> 00:18:06.360\nBut I'd already started iterating over all\nthe pencils that I'm searching through.\n\n297\n00:18:06.360 --> 00:18:09.933\nWell, if I look at the iter,\nit actually go ahead and\n\n298\n00:18:09.933 --> 00:18:12.708\nputs that on the end of the set iterator.\n\n299\n00:18:12.708 --> 00:18:15.890\nSo I can use this kind of\nlike a consumption queue.\n\n300\n00:18:15.890 --> 00:18:18.270\nAll right.\nHere's the set of things I need to do.\n\n301\n00:18:18.270 --> 00:18:20.190\nThere's one, there's two, there's three.\n\n302\n00:18:20.190 --> 00:18:23.870\nAnd then if I go ahead and\nput the other stuff in the set,\n\n303\n00:18:23.870 --> 00:18:27.567\nit will propagate through to\nthe iterator for the set.\n\n304\n00:18:27.567 --> 00:18:31.770\nWhich is a great way to\njump up one at a time.\n\n305\n00:18:31.770 --> 00:18:33.810\nThis is the first thing,\nthis is the next thing.\n\n306\n00:18:33.810 --> 00:18:38.519\nNow, again,\norder is not guaranteed in any way.\n\n307\n00:18:38.519 --> 00:18:43.366\nBut it is handy to know that those will\nupdate without you doing a great deal of\n\n308\n00:18:43.366 --> 00:18:44.370\nthings.\n\n309\n00:18:44.370 --> 00:18:46.890\nNow, we've talked about\nthis really contrived,\n\n310\n00:18:46.890 --> 00:18:48.470\nkind of interesting example, right?\n\n311\n00:18:49.590 --> 00:18:53.368\nWell, let's see it actually,\nhow I would use it.\n\n312\n00:18:53.368 --> 00:18:58.132\nNow, this will require you to suspend\nyour disbelief just for a moment.\n\n313\n00:18:58.132 --> 00:19:03.800\nBecause we are gonna hop over into the\nindex.html and add a few elements here.\n\n314\n00:19:03.800 --> 00:19:08.800\nSo I'm just going to create some\nof these things called cards.\n\n315\n00:19:08.800 --> 00:19:13.209\nI'm going to say cards and\nA and B and C, D,\n\n316\n00:19:13.209 --> 00:19:17.810\nand E.\n\n317\n00:19:17.810 --> 00:19:19.439\nNow, if you don't know what these are,\nthat's fine.\n\n318\n00:19:19.439 --> 00:19:21.920\nWe're just gonna use them\nas a way of interacting.\n\n319\n00:19:21.920 --> 00:19:25.360\nRight, I'm building a web application\nthat requires these to be on the page,\n\n320\n00:19:25.360 --> 00:19:28.600\nbut I'm gonna use JavaScript\nto interact with these.\n\n321\n00:19:28.600 --> 00:19:33.046\nSo if I hop back in my app.js,\nhow would I grab these?\n\n322\n00:19:33.046 --> 00:19:38.752\nconst cards = document.querySelectorAll,\n\n323\n00:19:38.752 --> 00:19:42.037\nbecause I want all of them.\n\n324\n00:19:42.037 --> 00:19:44.940\nAnd I want all of the card, right?\n\n325\n00:19:46.430 --> 00:19:52.350\nNow, on this one card, it's a very\nspecial one, it's the first one.\n\n326\n00:19:52.350 --> 00:19:54.680\nIt is actually the main one.\n\n327\n00:19:54.680 --> 00:19:57.350\nSo notice, this card's a little bit\ndifferent than all of these, but\n\n328\n00:19:57.350 --> 00:19:58.740\nthey are all cards.\n\n329\n00:19:58.740 --> 00:20:00.480\n&gt;&gt; One of these cards\nis not like the others.\n\n330\n00:20:00.480 --> 00:20:02.620\n&gt;&gt; Yeah,\nwhich one of these is not like the others?\n\n331\n00:20:02.620 --> 00:20:03.710\nThat is correct.\n\n332\n00:20:03.710 --> 00:20:05.742\nSo, and then I'm gonna make a set.\n\n333\n00:20:05.742 --> 00:20:08.720\nSo, okay, cardSet.\n\n334\n00:20:08.720 --> 00:20:12.890\nAnd all that's gonna be is a new\nset created from the cards.\n\n335\n00:20:12.890 --> 00:20:17.040\nNow, this is not an array,\nit's array-ish, it's array-like.\n\n336\n00:20:17.040 --> 00:20:20.180\nIt's actually a NodeList,\nbut it is iterable.\n\n337\n00:20:20.180 --> 00:20:24.985\nSo as long as it's iterable,\nI can feed it to the new set operator.\n\n338\n00:20:24.985 --> 00:20:27.700\nSo, what do I wanna do?\n\n339\n00:20:27.700 --> 00:20:31.806\nWell, I want to grab that main card.\n\n340\n00:20:38.176 --> 00:20:39.580\nAnd I'm going to do that with the ID.\n\n341\n00:20:40.750 --> 00:20:43.635\nSo I'm grabbing that one special card.\n\n342\n00:20:43.635 --> 00:20:48.457\nAnd then I'm actually going to\ndo some crazy stuff on here.\n\n343\n00:20:48.457 --> 00:20:52.067\nSo main.addEventListener.\n\n344\n00:20:55.888 --> 00:21:00.301\nAnd this is going to changeColor.\n\n345\n00:21:00.301 --> 00:21:02.386\nAnd that's gonna be a function.\n\n346\n00:21:02.386 --> 00:21:05.127\nAgain, a little bit of disbelief here, but\n\n347\n00:21:05.127 --> 00:21:07.951\nyou'll see how sets end\nup coming in to play.\n\n348\n00:21:07.951 --> 00:21:12.835\nSo if cardSet, has this, whatever's\n\n349\n00:21:12.835 --> 00:21:18.517\nclicked, then, what do you want to do?\n\n350\n00:21:18.517 --> 00:21:22.417\nAbout messed that up there.\n\n351\n00:21:22.417 --> 00:21:30.288\nI want to say,\nthis.style.color equals color.\n\n352\n00:21:30.288 --> 00:21:31.514\nOtherwise.\n\n353\n00:21:33.684 --> 00:21:35.077\nNothing has changed.\n\n354\n00:21:41.646 --> 00:21:42.371\nOkay?\n\n355\n00:21:42.371 --> 00:21:44.808\nSo there we go.\n\n356\n00:21:44.808 --> 00:21:48.259\nI have this changeColor,\nI have my cards, my cardSet.\n\n357\n00:21:48.259 --> 00:21:51.183\nSo, if it's in the cardSet,\nI'm going to change it.\n\n358\n00:21:51.183 --> 00:21:52.517\nAll right.\n\n359\n00:21:52.517 --> 00:21:56.330\nOkay, well, let's refresh.\n\n360\n00:21:56.330 --> 00:22:01.283\naddEventListener main, add, main,\n\n361\n00:22:01.283 --> 00:22:03.992\naddEventListener.\n\n362\n00:22:03.992 --> 00:22:06.888\nDid I misspell something here?\n\n363\n00:22:06.888 --> 00:22:08.609\nAha.\n\n364\n00:22:08.609 --> 00:22:10.400\nThere we go, gotta be careful.\n\n365\n00:22:10.400 --> 00:22:11.570\nThere's not a bunch of mains.\n\n366\n00:22:11.570 --> 00:22:13.070\nThere's actually one main.\n\n367\n00:22:13.070 --> 00:22:14.275\nDon't mess that up.\n\n368\n00:22:14.275 --> 00:22:15.490\nSo refresh.\n\n369\n00:22:15.490 --> 00:22:19.982\nAll right, so boop, color is not defined.\n\n370\n00:22:19.982 --> 00:22:23.327\nI actually have to give it a color.\n\n371\n00:22:23.327 --> 00:22:25.600\nAnd let me zoom in here.\n\n372\n00:22:25.600 --> 00:22:27.748\nSo boop.\n\n373\n00:22:27.748 --> 00:22:32.370\nBut notice,\nnothing else is happening here, okay?\n\n374\n00:22:32.370 --> 00:22:37.400\nSo this is saying, if main is in the card\nset, then it actually changes color.\n\n375\n00:22:37.400 --> 00:22:41.030\nBut if for\nsome reason it's been removed, as such,\n\n376\n00:22:41.030 --> 00:22:47.200\nif I take out this property of card, you\njust saw it turn to red when I clicked it.\n\n377\n00:22:47.200 --> 00:22:51.362\nIf I refresh it,\nit is no longer part of that grouping,\n\n378\n00:22:51.362 --> 00:22:56.162\nthat partition that I've made,\nso nothing's gonna happen.\n\n379\n00:22:56.162 --> 00:23:00.817\nSo adding to the set or\nremoving from the set can change behavior.\n\n380\n00:23:00.817 --> 00:23:03.893\nSo this is kind of a smaller use case, but\n\n381\n00:23:03.893 --> 00:23:09.220\nthis is removing or\nadding machinations on our web page.\n\n382\n00:23:09.220 --> 00:23:11.890\n&gt;&gt; Now, Justin,\nwe've been walking through sets here.\n\n383\n00:23:11.890 --> 00:23:15.450\nYou did say something at the beginning\nof this show about weak sets.\n\n384\n00:23:15.450 --> 00:23:18.910\nIs there a big difference, or\nare they just ones, just weaker,\n\n385\n00:23:18.910 --> 00:23:20.590\ncan't lift as much weight as the others?\n\n386\n00:23:20.590 --> 00:23:23.077\n&gt;&gt; Yeah, yeah, the one has not\nbeen eating appropriately and\n\n387\n00:23:23.077 --> 00:23:25.180\nhas not been sticking to\ntheir training regimen.\n\n388\n00:23:25.180 --> 00:23:27.878\n&gt;&gt; [LAUGH]\n&gt;&gt; You know, It's very interesting.\n\n389\n00:23:27.878 --> 00:23:31.663\nBecause I've read several things that say,\nwell, they're very similar to sets,\n\n390\n00:23:31.663 --> 00:23:33.620\nexcept they're not.\n\n391\n00:23:33.620 --> 00:23:39.380\nAnd so the craziest thing, weak sets,\nthe only thing they provide is uniqueness.\n\n392\n00:23:41.090 --> 00:23:43.580\nYou can't iterate over them,\nthey have no size.\n\n393\n00:23:44.830 --> 00:23:48.225\nOkay, well, that was all [CROSSTALK]\n&gt;&gt; We knew that,\n\n394\n00:23:48.225 --> 00:23:50.399\nbecause they're weak sets that hadn't\nbeen training right and [CROSSTALK]\n\n395\n00:23:50.399 --> 00:23:52.287\n&gt;&gt; They haven't been training right, so\n\n396\n00:23:52.287 --> 00:23:54.300\nthey're missing some of those methods.\n\n397\n00:23:54.300 --> 00:23:56.852\nAlso, the reason they're there is,\nperiodically,\n\n398\n00:23:56.852 --> 00:23:59.191\nthings will just kinda\ndisappear from a weak set.\n\n399\n00:23:59.191 --> 00:24:02.050\nIt can't hold on to things so\nstrongly, again,\n\n400\n00:24:02.050 --> 00:24:04.714\ncuz it's not been training appropriately.\n\n401\n00:24:04.714 --> 00:24:08.065\nIt actually allows for something to\noccur called garbage collection.\n\n402\n00:24:08.065 --> 00:24:13.416\nSo if I have various variables pointing\nto objects and I add them to a set,\n\n403\n00:24:13.416 --> 00:24:18.618\nif I dereference those, then\nthe garbage collector will come along.\n\n404\n00:24:18.618 --> 00:24:21.032\nWhich is something that's like a cleanup,\n\n405\n00:24:21.032 --> 00:24:25.260\nthose giant machines that drive around\non the road and kinda sweep up.\n\n406\n00:24:25.260 --> 00:24:29.330\nThat's what's occurring in your\nJavaScript runtime and that's to keep you\n\n407\n00:24:29.330 --> 00:24:33.950\nfrom just keep adding objects and object\nand objects and consuming all the memory.\n\n408\n00:24:33.950 --> 00:24:37.832\nSo WeakSets are holding weak references.\n\n409\n00:24:37.832 --> 00:24:42.167\nThey cannot iterate, the reason they\ncan not iterate and do not have a size,\n\n410\n00:24:42.167 --> 00:24:46.189\nis because their size and their\ncollections may change at any moment.\n\n411\n00:24:46.189 --> 00:24:49.800\nThere's no consistency and\nyou would get weird behavior.\n\n412\n00:24:49.800 --> 00:24:51.980\nBut where could we actually use these?\n\n413\n00:24:51.980 --> 00:24:53.410\nWhy, like?\n\n414\n00:24:53.410 --> 00:24:55.560\nOkay.\nWell, let's look at a very small example\n\n415\n00:24:55.560 --> 00:24:56.130\nof a WeakSet.\n\n416\n00:24:56.130 --> 00:24:59.000\nAnd then let's see it in\nan actual use case here.\n\n417\n00:25:00.390 --> 00:25:03.530\nSo I'm back in my app-dot-JS.\n\n418\n00:25:03.530 --> 00:25:06.220\nI'm gonna comment these out here.\n\n419\n00:25:06.220 --> 00:25:07.170\nAll right.\n\n420\n00:25:07.170 --> 00:25:11.800\nAnd then we're back to figuring\nout what is a WeakSet.\n\n421\n00:25:13.210 --> 00:25:16.780\nWell, let's just start with, let first.\n\n422\n00:25:16.780 --> 00:25:20.700\nNow notice I'm using let here\nbecause I need to be able to\n\n423\n00:25:20.700 --> 00:25:22.395\ndereference this variable.\n\n424\n00:25:22.395 --> 00:25:24.870\nWeakSets kind of rely on this property.\n\n425\n00:25:26.080 --> 00:25:28.930\nSo the first is the name and\nlet's just say John.\n\n426\n00:25:30.400 --> 00:25:35.185\nAnd the second is the name,\n\n427\n00:25:38.291 --> 00:25:40.725\n[SOUND] Tina not tine.\n\n428\n00:25:40.725 --> 00:25:42.270\nThat doesn't make any sense then.\n\n429\n00:25:42.270 --> 00:25:45.070\nAnd then let's just say\nthis is the patrons\n\n430\n00:25:45.070 --> 00:25:46.970\nkind of like queued up in a restaurant,\nright?\n\n431\n00:25:48.380 --> 00:25:52.320\nThey've gotten in line, they're getting\nready to make an order or a coffee shop,\n\n432\n00:25:52.320 --> 00:25:53.461\nand they're waiting.\n\n433\n00:25:53.461 --> 00:25:57.732\nAnd as they come to,\nif I serve the first one, once I'm done,\n\n434\n00:25:57.732 --> 00:25:59.630\nthen I'm done with them.\n\n435\n00:25:59.630 --> 00:26:01.840\nI don't actually need that object anymore.\n\n436\n00:26:01.840 --> 00:26:07.300\nWell, if I dereference first, what I\nmean is set first to a different value.\n\n437\n00:26:07.300 --> 00:26:10.130\nThen John can kind of go\non about his business.\n\n438\n00:26:10.130 --> 00:26:13.670\nOtherwise, John is locked\ninto that coffee line for\n\n439\n00:26:13.670 --> 00:26:16.970\nall eternity, or until Chrome shuts down.\n\n440\n00:26:16.970 --> 00:26:21.462\nSo the patrons are actually a new WeakSet.\n\n441\n00:26:21.462 --> 00:26:26.191\nAnd I'm just gonna give it an iterable\nwith these two variable names.\n\n442\n00:26:26.191 --> 00:26:29.620\nSo I have an array with variable names and\nthen I'm gonna create a WeakSet.\n\n443\n00:26:29.620 --> 00:26:31.340\nSo, let's talk about\nthis WeakSet real quick.\n\n444\n00:26:32.400 --> 00:26:34.370\nAnd we're gonna call\nthis patrons as I said.\n\n445\n00:26:35.610 --> 00:26:39.620\nSo refresh and there we go,\nthere's our WeakSet.\n\n446\n00:26:39.620 --> 00:26:44.390\nNow notice it says the arrays, or\nexcuse me the entries are objects.\n\n447\n00:26:44.390 --> 00:26:45.450\nOkay.\n\n448\n00:26:45.450 --> 00:26:47.230\nWell, why objects?\n\n449\n00:26:47.230 --> 00:26:48.940\nWhy can you just put John?\n\n450\n00:26:48.940 --> 00:26:52.570\nAnd here's where get's a little\nweird let's try to put John.\n\n451\n00:26:52.570 --> 00:26:57.580\nLet's just temporarily change\nthis to the string John and\n\n452\n00:26:57.580 --> 00:27:00.270\nif I refresh it's broke.\n\n453\n00:27:01.410 --> 00:27:05.426\nAnd that's because objects are the only\nthings that can be put inside of WeakSets.\n\n454\n00:27:05.426 --> 00:27:08.639\nI can't put primitive types\nlike numbers and strings.\n\n455\n00:27:08.639 --> 00:27:12.820\nYou're like, well this set is\njust not playing out for me.\n\n456\n00:27:12.820 --> 00:27:16.650\nI'm not enjoying any of this,\nwell trust me it'll come back around.\n\n457\n00:27:17.870 --> 00:27:19.490\nSo let's undo that.\n\n458\n00:27:19.490 --> 00:27:20.830\nI'm glad my undo worked that time.\n\n459\n00:27:20.830 --> 00:27:21.710\n&gt;&gt; That was special.\n\n460\n00:27:21.710 --> 00:27:22.990\n&gt;&gt; Yeah.\n\n461\n00:27:22.990 --> 00:27:25.040\nSo I have this here, right.\n\n462\n00:27:25.040 --> 00:27:27.740\nNot now John has been served, he's done.\n\n463\n00:27:27.740 --> 00:27:34.210\nSo the first variable is going to\nbe set to not john, john's done.\n\n464\n00:27:34.210 --> 00:27:35.540\nAnd we have to be careful.\n\n465\n00:27:39.694 --> 00:27:43.280\nCuz if I, okay, as I said.\n\n466\n00:27:43.280 --> 00:27:44.830\nSometimes this takes a little bit.\n\n467\n00:27:47.380 --> 00:27:48.400\nIt's gonna make a liar of me.\n\n468\n00:27:48.400 --> 00:27:50.040\n&gt;&gt; Of course it will.\n\n469\n00:27:50.040 --> 00:27:51.270\n&gt;&gt; There we go, there we go.\n\n470\n00:27:51.270 --> 00:27:53.700\nAs you see, the WeakSet actually updated.\n\n471\n00:27:53.700 --> 00:27:55.040\nSometimes it takes awhile.\n\n472\n00:27:55.040 --> 00:27:57.830\nAnd what happened is that\nstreet sweeper truck came and\n\n473\n00:27:57.830 --> 00:28:01.240\ngrabbed that object that was no longer\nin use and kinda got rid of it.\n\n474\n00:28:01.240 --> 00:28:03.140\nThis freed up memory space.\n\n475\n00:28:03.140 --> 00:28:06.030\nNow how is that important to me?\n\n476\n00:28:07.260 --> 00:28:10.180\nLet's say,\ninstead of being a WeakSet this was a set.\n\n477\n00:28:11.810 --> 00:28:15.840\nI got to actually test patrons forever and\never and ever and\n\n478\n00:28:15.840 --> 00:28:17.590\nJohn would always be in there.\n\n479\n00:28:17.590 --> 00:28:22.240\nThere's now no way to delete John\nbecause I've set first to null.\n\n480\n00:28:22.240 --> 00:28:26.310\nSo I can't point to the object John\nanymore and say get rid of him.\n\n481\n00:28:26.310 --> 00:28:27.400\nI now have a memory leak.\n\n482\n00:28:28.870 --> 00:28:32.620\nI should have deleted John\nbefore setting first to null.\n\n483\n00:28:32.620 --> 00:28:35.630\nAnd if I keep doing this as my\napp runs and runs and runs.\n\n484\n00:28:35.630 --> 00:28:38.930\nThis set of patrons will just get\nbigger and bigger and bigger and\n\n485\n00:28:38.930 --> 00:28:43.280\nslowly consume memory until\nthings come to a grinding halt.\n\n486\n00:28:43.280 --> 00:28:47.280\nIf you don't want to manage this\nkind of memory cleanup by yourself,\n\n487\n00:28:47.280 --> 00:28:50.120\nthen WeakSets are a great use case for\nthat.\n\n488\n00:28:51.260 --> 00:28:54.010\nNow, this is talking about a coffee line.\n\n489\n00:28:54.010 --> 00:28:55.570\nWould this really happen?\n\n490\n00:28:55.570 --> 00:29:00.540\nWell no, but we can use this,\nlet's take a step out.\n\n491\n00:29:00.540 --> 00:29:05.450\nWe could use this to talk about characters\nin a game that are still in play.\n\n492\n00:29:05.450 --> 00:29:08.110\nOnce the character loses\nthey're no longer in play and\n\n493\n00:29:08.110 --> 00:29:11.150\nit would be nice if their\nobject kind of disappeared.\n\n494\n00:29:11.150 --> 00:29:14.500\nSo let's actually see that in practice.\n\n495\n00:29:14.500 --> 00:29:20.090\nAnd I'm getting a little low on the screen\nhere, so let's just move all that up.\n\n496\n00:29:20.090 --> 00:29:21.920\nSo I'm gonna create a character.\n\n497\n00:29:21.920 --> 00:29:25.090\nNow this is maybe a design\npattern you've seen before.\n\n498\n00:29:25.090 --> 00:29:25.720\nMaybe you have not.\n\n499\n00:29:25.720 --> 00:29:29.239\nIf you haven't,\nI'll take you through it in just a moment.\n\n500\n00:29:31.210 --> 00:29:32.370\nShenanigans.\n\n501\n00:29:32.370 --> 00:29:35.680\nSo, this is gonna take a name and\nit's gonna take a name here.\n\n502\n00:29:35.680 --> 00:29:40.410\nAnd that's because I'm causing this\nfunction to run immediately and\n\n503\n00:29:40.410 --> 00:29:43.670\nthen give me some other statics,\nit's crazy staff.\n\n504\n00:29:45.400 --> 00:29:52.310\nSo, inside I'm gonna create\na WeakSet called inPlay.\n\n505\n00:29:52.310 --> 00:29:56.500\nSo these are all the characters\nthat are still in play in the game.\n\n506\n00:29:56.500 --> 00:30:00.200\nSo every time I create a character,\nit's gonna go into the WeakSet.\n\n507\n00:30:00.200 --> 00:30:03.490\nThe reason I wrap it in this\nfunction is this inPlay can now\n\n508\n00:30:03.490 --> 00:30:08.220\nnot be modified by any other place in my\napplication on accident, it is private.\n\n509\n00:30:08.220 --> 00:30:11.200\nThis is the concept of having\nprivate data in JavaScript.\n\n510\n00:30:12.560 --> 00:30:14.700\nSo I'm gonna create a constructor.\n\n511\n00:30:15.970 --> 00:30:17.450\nNotice the underscore there.\n\n512\n00:30:17.450 --> 00:30:22.480\nThis is not the special constructor\nfunction inside of a class.\n\n513\n00:30:22.480 --> 00:30:23.820\nBut it behaves very similar.\n\n514\n00:30:24.880 --> 00:30:26.020\nSo name equals name.\n\n515\n00:30:26.020 --> 00:30:28.456\nAnd I'm going to say, inPlay.\n\n516\n00:30:30.351 --> 00:30:33.310\nI'm wanna add this character to inPlay.\n\n517\n00:30:33.310 --> 00:30:36.627\nSo when I construct the object\nI'm gonna get that in character.\n\n518\n00:30:38.150 --> 00:30:40.520\nSo when would I use this?\n\n519\n00:30:40.520 --> 00:30:48.568\nWell, let's say _constructor and\nadd a method to this object.\n\n520\n00:30:48.568 --> 00:30:51.392\nFor stillAlive.\n\n521\n00:30:51.392 --> 00:30:55.890\n[SOUND] And what is that gonna do?\n\n522\n00:30:55.890 --> 00:31:02.170\nThat is actually gonna\nreturn inPlay.has(this).\n\n523\n00:31:02.170 --> 00:31:05.130\nNow the reason I can use this is\nbecause I'm gonna call this on\n\n524\n00:31:05.130 --> 00:31:06.630\na particular character.\n\n525\n00:31:06.630 --> 00:31:09.310\nSo it's gonna check to see,\nhey, am I still playing?\n\n526\n00:31:09.310 --> 00:31:09.890\nOr am I not?\n\n527\n00:31:11.680 --> 00:31:19.593\nAnd whenever I lose [SOUND]\nWhat is that gonna do?\n\n528\n00:31:19.593 --> 00:31:23.253\n[SOUND] That's actually going to\nremove the character from inPlay.\n\n529\n00:31:23.253 --> 00:31:28.324\n[SOUND] Nope miss\n\n530\n00:31:28.324 --> 00:31:32.618\ntype there.\n\n531\n00:31:32.618 --> 00:31:36.693\nAnd just so we can see this print out,\n\n532\n00:31:36.693 --> 00:31:43.137\nI'm gonna add a method that I\nnormally wouldn't [SOUND] and\n\n533\n00:31:43.137 --> 00:31:47.889\nthat's constructor prototype.print.\n\n534\n00:31:47.889 --> 00:31:50.921\nAnd all that's going to\ndo is cancel that log.\n\n535\n00:31:52.800 --> 00:31:54.019\nThe inPlay WeakSet.\n\n536\n00:31:54.019 --> 00:31:59.821\n[SOUND] And then lastly I'm\ngoing to return the constructor.\n\n537\n00:31:59.821 --> 00:32:04.763\n[SOUND] There we go.\n\n538\n00:32:04.763 --> 00:32:07.400\nNow, I did a lot of setup there,\na lot of magic.\n\n539\n00:32:08.400 --> 00:32:09.050\nIt was crazy.\n\n540\n00:32:10.100 --> 00:32:12.960\nJust disregard,\nthis is a set up for a use case.\n\n541\n00:32:12.960 --> 00:32:15.980\nI know this may look very intimidating,\ndon't worry I'm\n\n542\n00:32:15.980 --> 00:32:19.105\ngonna show you the important parts\nin the context of a WeakSet.\n\n543\n00:32:20.940 --> 00:32:22.230\nSo what would I wanna do?\n\n544\n00:32:22.230 --> 00:32:28.790\nLet's say I'm playing Mario,\nwhich is a new character called Mario.\n\n545\n00:32:28.790 --> 00:32:31.667\nI start the game [SOUND].\n\n546\n00:32:31.667 --> 00:32:34.475\nAnd let's just console.log.\n\n547\n00:32:34.475 --> 00:32:39.758\n[SOUND] Mario, and\nsee what he looks like here.\n\n548\n00:32:39.758 --> 00:32:42.450\nSo, I have this Mario thing.\n\n549\n00:32:44.590 --> 00:32:46.780\nAnd let's just say, is Mario still alive?\n\n550\n00:32:46.780 --> 00:32:52.208\n[SOUND]\nTrue.\n\n551\n00:32:52.208 --> 00:32:54.260\nSo that means he's still in the WeakSet.\n\n552\n00:32:54.260 --> 00:32:59.100\nAnd let's actually just\nsay that Mario print.\n\n553\n00:33:00.850 --> 00:33:01.760\nNot Marion.\n\n554\n00:33:01.760 --> 00:33:03.570\nThat is, not Mario.\n\n555\n00:33:03.570 --> 00:33:04.660\nMario print.\n\n556\n00:33:04.660 --> 00:33:07.210\nNotice, that's the WeakSet.\n\n557\n00:33:07.210 --> 00:33:09.142\nThat has that function in it, right?\n\n558\n00:33:10.449 --> 00:33:13.120\nLet's say Mario, fell down a hole.\n\n559\n00:33:13.120 --> 00:33:16.430\nI lose and then if I print again I\n\n560\n00:33:17.650 --> 00:33:20.570\nhave now been garbage collected and\nit's kinda been taken care of for me.\n\n561\n00:33:20.570 --> 00:33:24.290\nSo I don't have to do all this memory\nmanagement every time a character loses\n\n562\n00:33:24.290 --> 00:33:27.370\nI gotta make sure I remove them\nfrom everywhere in the game.\n\n563\n00:33:27.370 --> 00:33:31.045\nAnd that'll keep my game\na little memory nice.\n\n564\n00:33:31.045 --> 00:33:37.020\nSo that is a very convoluted,\nin this context use case.\n\n565\n00:33:37.020 --> 00:33:39.750\nBut it is a very realistic use case.\n\n566\n00:33:39.750 --> 00:33:42.130\nA lot of magic here Daniel.\n\n567\n00:33:42.130 --> 00:33:45.520\n&gt;&gt; Justin, definitely a lot of\nmagic going on on that screen cuz\n\n568\n00:33:45.520 --> 00:33:49.610\nI'm watching I'm just mesmerized going\nwow he is going to town on this.\n\n569\n00:33:49.610 --> 00:33:54.250\nBut I understand now why we use\nWeakSets versus regular sets and\n\n570\n00:33:54.250 --> 00:33:56.180\nthe differences and thereof.\n\n571\n00:33:56.180 --> 00:33:57.510\nAnd that's the important part, right?\n\n572\n00:33:57.510 --> 00:34:01.010\nThat we understand what sets\nare versus WeakSets are and\n\n573\n00:34:01.010 --> 00:34:03.950\nwhy we'd use one versus\nthe other in our context.\n\n574\n00:34:03.950 --> 00:34:06.927\nThat being said Justin I'm looking\nat the clock we're well out of time.\n\n575\n00:34:06.927 --> 00:34:09.270\nIt was a great episode, I really dug it.\n\n576\n00:34:09.270 --> 00:34:10.610\nI hope you did as well.\n\n577\n00:34:10.610 --> 00:34:14.100\nI appreciate you dropping by and\nexplaining sets and WeakSets to us.\n\n578\n00:34:14.100 --> 00:34:17.110\nHopefully you got a lot\nout of this episode, but\n\n579\n00:34:17.110 --> 00:34:19.210\nlike I said it is that time for\nus to sign off.\n\n580\n00:34:19.210 --> 00:34:21.880\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n581\n00:34:21.880 --> 00:34:24.898\n&gt;&gt; And I'm Justin Dennison and\nwe'll see you next time.\n\n582\n00:34:24.898 --> 00:34:31.652\n[MUSIC]\n\n583\n00:34:31.652 --> 00:34:33.450\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204914519"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at using Maps and WeakMaps in ES6. They start by explaining what Maps are and showing you their basic use and attributes. Then they define and demonstrate the use of WeakMaps which are very similar to regular Maps, but with some important distinctions.",
          "length": "1774",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-14-1-maps_and_weakmaps-021417-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-14-1-maps_and_weakmaps-021417-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-newfeaturesines6/techskills-newfeaturesines6-14-1-maps_and_weakmaps-021417-1-sm.jpg",
          "title": "Maps and WeakMaps",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.190\nWelcome to ITProTV.\n\n2\n00:00:01.190 --> 00:00:06.343\nI'm your host Don [CROSSTALK]\n\n3\n00:00:06.343 --> 00:00:08.414\n[MUSIC]\n\n4\n00:00:08.414 --> 00:00:12.231\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.231 --> 00:00:13.777\n&gt;&gt; All right, greetings everyone,\n\n6\n00:00:13.777 --> 00:00:16.735\nand welcome to another\nexciting episode of ITProTV.\n\n7\n00:00:16.735 --> 00:00:17.925\nI'm your host Daniel Lowrie.\n\n8\n00:00:17.925 --> 00:00:19.095\nAnd in today's episode,\n\n9\n00:00:19.095 --> 00:00:23.395\nwe are coming back at you with more\non our what's new in ES6 series.\n\n10\n00:00:23.395 --> 00:00:26.900\nAnd of course, joining me in the studio\nis our mentor in that endeavor,\n\n11\n00:00:26.900 --> 00:00:28.370\nour good friend Mr. Justin Dennison.\n\n12\n00:00:28.370 --> 00:00:30.930\nJustin welcome back, my man,\nand how are you today?\n\n13\n00:00:30.930 --> 00:00:32.280\n&gt;&gt; I'm doing well.\nHow are you Daniel?\n\n14\n00:00:32.280 --> 00:00:33.460\n&gt;&gt; I am not unwell, sir.\n\n15\n00:00:33.460 --> 00:00:35.090\n&gt;&gt; Well that's always good.\n\n16\n00:00:35.090 --> 00:00:36.441\nNot well, but you're not unwell.\n\n17\n00:00:36.441 --> 00:00:37.404\nAnd that's what's important.\n&gt;&gt; Exactly.\n\n18\n00:00:37.404 --> 00:00:39.924\nThe proper use of a double\nnegative if that's a thing.\n\n19\n00:00:39.924 --> 00:00:41.040\n[LAUGH]\n&gt;&gt; Yeah.\n\n20\n00:00:41.040 --> 00:00:44.080\nSome languages do have double\nnegatives and are used for emphasis.\n\n21\n00:00:44.080 --> 00:00:45.137\n&gt;&gt; How about Java?\n\n22\n00:00:45.137 --> 00:00:47.817\n[LAUGH]\n&gt;&gt; JavaScript, [SOUND]?\n\n23\n00:00:47.817 --> 00:00:52.352\nSo, yeah we should probably go ahead and\nget into our topic here, which is maps and\n\n24\n00:00:52.352 --> 00:00:53.090\nWheat maps.\n\n25\n00:00:53.090 --> 00:00:57.560\nAnd what's interesting is this is a new\ndata structure that's come along in ES6\n\n26\n00:00:57.560 --> 00:01:02.610\nthat very closely looks like\na data structure we already have.\n\n27\n00:01:02.610 --> 00:01:06.170\nSo maps are a great way\nto store metadata but\n\n28\n00:01:06.170 --> 00:01:10.370\nwhat's interesting there,\nmaps behave very similarly to an object.\n\n29\n00:01:10.370 --> 00:01:15.980\nHowever objects can only relate\nstring keys to some value, right?\n\n30\n00:01:15.980 --> 00:01:20.780\nI can say name to some other name,\nright, like John.\n\n31\n00:01:20.780 --> 00:01:26.230\nBut I can't say the array is\nmapped to some other object.\n\n32\n00:01:26.230 --> 00:01:32.180\nSo maps were introduced to allow us to\nuse different types as lookup values\n\n33\n00:01:32.180 --> 00:01:34.300\nfor various other lookup data.\n\n34\n00:01:34.300 --> 00:01:38.350\nNow that was very handwavy,\nkind of interesting aside there.\n\n35\n00:01:38.350 --> 00:01:41.330\nI think it's best to actually\nsee these in action to\n\n36\n00:01:41.330 --> 00:01:43.620\nget a full grasp of what's going on.\n\n37\n00:01:43.620 --> 00:01:47.480\nAnd what we'll see is I can technically\nuse these very similar to objects.\n\n38\n00:01:47.480 --> 00:01:50.420\nThey have a little bit different API,\ndifferent method set.\n\n39\n00:01:50.420 --> 00:01:56.060\nBut I still get the power as well\nas additional power from them.\n\n40\n00:01:56.060 --> 00:01:59.150\nSo let's go ahead and hop into our\nbrowser here, get our project set up.\n\n41\n00:02:00.180 --> 00:02:05.010\nSo I'm going to open my file, and\nI'm looking for that index.HTML.\n\n42\n00:02:05.010 --> 00:02:07.620\nThe correct one, that's important.\n\n43\n00:02:07.620 --> 00:02:12.490\nSo index.HTML, and I'm gonna go ahead and\nopen up dev tools.\n\n44\n00:02:12.490 --> 00:02:13.970\nSo here's my developer tools.\n\n45\n00:02:13.970 --> 00:02:18.940\nWe are all good to go,\njust running that app.JS.\n\n46\n00:02:18.940 --> 00:02:22.129\nSo if I hop over into atom,\nlet's get that project open.\n\n47\n00:02:23.180 --> 00:02:24.060\nReady to go here.\n\n48\n00:02:25.210 --> 00:02:28.470\nSo, I gotta always look for it,\nnever can get that to remember.\n\n49\n00:02:29.510 --> 00:02:32.345\nIf you know, let me know, anybody.\n\n50\n00:02:32.345 --> 00:02:33.750\n&gt;&gt; [LAUGH]\n&gt;&gt; Like, this is how you set it to\n\n51\n00:02:33.750 --> 00:02:35.750\nwhere it will remember for the next time.\n\n52\n00:02:35.750 --> 00:02:40.160\nSo, in my index.html,\nnothing special about it.\n\n53\n00:02:40.160 --> 00:02:43.990\nWe may change that later,\nyou never know, I'm very sneaky,\n\n54\n00:02:43.990 --> 00:02:47.170\nso let's go ahead and look at,\nlet's look at original object.\n\n55\n00:02:47.170 --> 00:02:50.840\nLet's see,\nlet's call this a health object.\n\n56\n00:02:52.740 --> 00:02:55.736\nSo if I have a health object,\nwhat is that going to be?\n\n57\n00:02:55.736 --> 00:02:59.511\nWell that's going to say I have mario and\n\n58\n00:02:59.511 --> 00:03:03.740\nit's mapped to some health object, right?\n\n59\n00:03:03.740 --> 00:03:05.990\nSo within health,\n\n60\n00:03:05.990 --> 00:03:09.820\nI have all the characters listed\nwith their associated healths.\n\n61\n00:03:09.820 --> 00:03:14.940\nSo maybe we'll change this just for\nclarity, so character health.\n\n62\n00:03:14.940 --> 00:03:16.445\nThere's actually an Ellen health.\n\n63\n00:03:16.445 --> 00:03:18.440\n&gt;&gt; [LAUGH]\n&gt;&gt; And that's important.\n\n64\n00:03:18.440 --> 00:03:24.340\nSo for this character,\nI can see health of 100.\n\n65\n00:03:24.340 --> 00:03:26.230\nSome arbitrary number, right?\n\n66\n00:03:26.230 --> 00:03:31.680\nNow in this object I can only\nhave a look up as a string.\n\n67\n00:03:31.680 --> 00:03:34.978\nNow typically you don't see\npeople put quotes over here,\n\n68\n00:03:34.978 --> 00:03:39.637\nbut behind the scenes JavaScript changes\nthose to strings and just approve that.\n\n69\n00:03:41.243 --> 00:03:44.020\nLet's print out charHealth.\n\n70\n00:03:44.020 --> 00:03:49.020\nSo here we go, and I refresh,\nand there we go, see,\n\n71\n00:03:49.020 --> 00:03:54.170\nI have Mario as a string,\nand the associated object.\n\n72\n00:03:54.170 --> 00:03:59.810\nNow, what if I had instead Mario is\nan instance of a character class.\n\n73\n00:03:59.810 --> 00:04:01.810\nNow I'm not gonna write\nout the whole class.\n\n74\n00:04:01.810 --> 00:04:08.160\nIt's just going to be kind of\nhand wavy here for just a moment.\n\n75\n00:04:08.160 --> 00:04:13.960\nSo I'm gonna create an empty class and\nsay mario = new Character.\n\n76\n00:04:16.260 --> 00:04:19.405\nSo that I'll actually create an object,\nand it's associated with Mario.\n\n77\n00:04:19.405 --> 00:04:21.863\nNow I could fill this out and\nhave Mario have a name.\n\n78\n00:04:21.863 --> 00:04:26.979\nBut if I wanted to have a look up for\nall the characters health, let's say I'm\n\n79\n00:04:26.979 --> 00:04:33.520\nbuilding and actual game in the browser,\nand I want to reference Mario, well okay.\n\n80\n00:04:33.520 --> 00:04:35.500\nIt actually just changes\nit to the string again.\n\n81\n00:04:35.500 --> 00:04:38.230\nI can't put anything else\nother than strings in there.\n\n82\n00:04:38.230 --> 00:04:41.570\nSo if I want to look up for\nthis particular object, right,\n\n83\n00:04:41.570 --> 00:04:46.130\nand this helps if I have a collection\nof objects, an array of characters.\n\n84\n00:04:46.130 --> 00:04:49.590\nThen there's no way to do this lookup\nother than handling strings and\n\n85\n00:04:49.590 --> 00:04:51.260\nobjects and all this other stuff.\n\n86\n00:04:52.480 --> 00:04:57.200\nWell with maps which are very similar\nobjects, I have the ability to\n\n87\n00:04:57.200 --> 00:05:02.630\nset this look up as an actual object,\nas this Mario character object.\n\n88\n00:05:02.630 --> 00:05:06.470\nSo let's see, let's mimic this and\n\n89\n00:05:06.470 --> 00:05:10.470\nthen change it to use this\ncharacter class in just a moment.\n\n90\n00:05:10.470 --> 00:05:15.560\nSo I'm going to comment this out,\nand let's construct a new map.\n\n91\n00:05:15.560 --> 00:05:20.530\nSo, a map takes a key and maps it to\na value very much as an object does.\n\n92\n00:05:20.530 --> 00:05:23.070\nWhen I request a key,\nI get the corresponding value.\n\n93\n00:05:24.540 --> 00:05:28.300\nBut I do want to create\na little bit different one.\n\n94\n00:05:28.300 --> 00:05:31.710\nI'm gonna keep this as charHealth.\n\n95\n00:05:31.710 --> 00:05:37.420\nAnd this is going to be a new map,\nso they map keys to values.\n\n96\n00:05:37.420 --> 00:05:42.790\nIf I ask for one, then it'll go look up\none and find the corresponding value.\n\n97\n00:05:42.790 --> 00:05:50.230\nAnd I want to set,\nthe key comes first in this, as mario.\n\n98\n00:05:51.580 --> 00:05:55.580\nAnd the associated object is health.\n\n99\n00:05:55.580 --> 00:05:58.890\nI don't know why health is so\nhard for me to spell.\n\n100\n00:05:58.890 --> 00:06:01.390\nIt wasn't like this just a few days ago.\n\n101\n00:06:02.930 --> 00:06:08.920\nBut if I console.log this charHealth now,\nfor\n\n102\n00:06:08.920 --> 00:06:12.240\nnow, this looks very\nsimilar to the object.\n\n103\n00:06:12.240 --> 00:06:17.920\nThe syntax is a little different, but\nif I drop this down mario goes to object.\n\n104\n00:06:17.920 --> 00:06:20.420\nBut now what if I don't want, in fact,\n\n105\n00:06:20.420 --> 00:06:25.670\nthe string mario as the lookup but\ninstead, the character object, itself?\n\n106\n00:06:25.670 --> 00:06:27.930\nThis thing that I've made up here.\n\n107\n00:06:27.930 --> 00:06:31.620\nSo instead of 'mario' I can say mario.\n\n108\n00:06:32.640 --> 00:06:35.420\nNow that's a variable that's\ngonna put that into place.\n\n109\n00:06:35.420 --> 00:06:38.170\nNow let's go see how\nthat has changed things,\n\n110\n00:06:38.170 --> 00:06:41.650\nyou actually have to uncomment\nthe class that you're instantiating.\n\n111\n00:06:41.650 --> 00:06:43.670\nThat's important thing to remember, but\n\n112\n00:06:43.670 --> 00:06:47.050\nnotice it is now mapping\ncharacters to health.\n\n113\n00:06:47.050 --> 00:06:50.980\nSo I can look up by the actual character\nobject that I'm using in the game\n\n114\n00:06:50.980 --> 00:06:53.850\ninstead of trying to remember,\nwhat is that character's name again?\n\n115\n00:06:53.850 --> 00:06:57.990\nI can just pass the actual object to it,\nwhich is incredibly powerful.\n\n116\n00:06:57.990 --> 00:07:01.180\nAnd actually reduces the amount\nof code that you have to write.\n\n117\n00:07:01.180 --> 00:07:04.780\nEspecially since objects tend\nto be really unique, right?\n\n118\n00:07:04.780 --> 00:07:09.220\nIf I have two Marios, well the two string\nMarios, one of them is gonna override.\n\n119\n00:07:10.580 --> 00:07:14.610\nBut I have two Marios and\nthey are both character objects,\n\n120\n00:07:14.610 --> 00:07:18.860\nthey are more or less different, because\nthey are in different memory basis.\n\n121\n00:07:18.860 --> 00:07:21.300\nSo I can have both of\nthose at the same time.\n\n122\n00:07:21.300 --> 00:07:22.700\nThat's incredibly handy.\n\n123\n00:07:22.700 --> 00:07:27.920\nSo we've seen a little bit about maps,\nwhat else can we do with maps?\n\n124\n00:07:27.920 --> 00:07:32.450\nWe'll I am always a big fan of making sure\nwe know where to find the documentation.\n\n125\n00:07:32.450 --> 00:07:39.231\nSo if I JavaScript map MDN and\nthere it is.\n\n126\n00:07:39.231 --> 00:07:42.524\nAnd here we have map and\nit has a size so, okay,\n\n127\n00:07:42.524 --> 00:07:47.591\nwe'll look at that in just a moment,\nbut I have a clear delete entries,\n\n128\n00:07:47.591 --> 00:07:50.810\nget has, so\nI have a very similar API of a set.\n\n129\n00:07:50.810 --> 00:07:55.310\nIf you haven't seen sets in our course\nlibrary, definitely go back and\n\n130\n00:07:55.310 --> 00:07:56.141\nwatch that.\n\n131\n00:07:56.141 --> 00:07:58.150\nBut also notice I have keys,\nvalues and entries.\n\n132\n00:07:58.150 --> 00:07:59.986\nThat means, this is iterable.\n\n133\n00:07:59.986 --> 00:08:02.938\nSo I can iterate over this with that for\n\n134\n00:08:02.938 --> 00:08:07.440\nof loop as well as get the entries,\nvalues, and keys.\n\n135\n00:08:07.440 --> 00:08:11.860\nNow entries, values, and keys actually\nmake a little more sense in this context.\n\n136\n00:08:11.860 --> 00:08:15.840\nSo let's just see a map,\nkinda a contrived map, and\n\n137\n00:08:15.840 --> 00:08:18.580\nthen we'll see one that\nI would actually use.\n\n138\n00:08:19.740 --> 00:08:22.750\nSo let's just comment this out just for\na moment.\n\n139\n00:08:22.750 --> 00:08:25.360\nThis was a nice little teaching method.\n\n140\n00:08:25.360 --> 00:08:30.510\nSo let's create a map of,\n\n141\n00:08:30.510 --> 00:08:33.560\nactually I'm gonna keep\nthese two lines here.\n\n142\n00:08:34.560 --> 00:08:39.020\nAnd I'm gonna add, just gonna move these.\n\n143\n00:08:39.020 --> 00:08:42.450\nSo I've created the map, and\nI'm gonna add another character.\n\n144\n00:08:43.760 --> 00:08:46.450\nDaniel, can you guess what\ncharacter I'm going to add?\n\n145\n00:08:46.450 --> 00:08:47.540\n&gt;&gt; Sonic.\n[LAUGH]\n\n146\n00:08:47.540 --> 00:08:49.140\n&gt;&gt; You were close.\n\n147\n00:08:49.140 --> 00:08:52.118\nBut in fact I'm going to add Luigi.\n\n148\n00:08:52.118 --> 00:08:54.400\nI could have added Sonic.\n\n149\n00:08:56.220 --> 00:08:58.650\nSo there's my health.\n\n150\n00:08:58.650 --> 00:09:03.180\nSo there's my characters right, I'm\nadding to this by using the set method.\n\n151\n00:09:03.180 --> 00:09:08.123\nNow at this point I could\ncheck to see if this map has\n\n152\n00:09:08.123 --> 00:09:12.737\nthese elements,\nif I can do a look up, right.\n\n153\n00:09:12.737 --> 00:09:17.820\nSo if I do, charHealth_has(Mario).\n\n154\n00:09:17.820 --> 00:09:19.555\n&gt;&gt; You want to call him Marian so bad.\n\n155\n00:09:19.555 --> 00:09:21.825\n[CROSSTALK] [LAUGH]\n&gt;&gt; I do, I want to add an n on that just,\n\n156\n00:09:21.825 --> 00:09:26.563\nand I'm actually gonna make these\nstrings just because I've commented out\n\n157\n00:09:26.563 --> 00:09:28.500\nsome of this other stuff here.\n\n158\n00:09:28.500 --> 00:09:36.099\nI wanna see does this character health\nmap have Mario defined within it?\n\n159\n00:09:37.130 --> 00:09:39.390\nAnd here we go.\n\n160\n00:09:39.390 --> 00:09:40.530\nDo you have Mario?\n\n161\n00:09:41.600 --> 00:09:42.870\nAnd I in fact do, so\n\n162\n00:09:42.870 --> 00:09:47.530\nnow I can do, well if you have\nMario I wanna know what his health is.\n\n163\n00:09:47.530 --> 00:09:49.100\nTell me what the health is.\n\n164\n00:09:49.100 --> 00:09:50.610\nSo I can do a get.\n\n165\n00:09:51.710 --> 00:09:55.040\nI can get Mario but\nthat's gonna go look up the key and\n\n166\n00:09:55.040 --> 00:09:56.570\nget the corresponding value.\n\n167\n00:09:56.570 --> 00:10:00.570\nAnd we'll see that that actually\nreturns the health object.\n\n168\n00:10:00.570 --> 00:10:04.000\nSo these behave very similar to objects,\nbut now I have this latitude\n\n169\n00:10:04.000 --> 00:10:08.320\nof storing not just strings as the keys,\nbut unique objects and\n\n170\n00:10:08.320 --> 00:10:11.690\nmore complex data types which is\nincredibly powerful as I've stated.\n\n171\n00:10:13.180 --> 00:10:15.830\nBut what if I wanted to\niterate over this map?\n\n172\n00:10:15.830 --> 00:10:18.260\nAnd lets move this up a little bit here.\n\n173\n00:10:20.020 --> 00:10:24.951\nSo if I wanted to iterate over this,\nwell let's just\n\n174\n00:10:24.951 --> 00:10:30.850\nconsole.log the map out,\ntake a gander around here.\n\n175\n00:10:30.850 --> 00:10:34.900\nAnd if I look at this proto,\nI have entries for\n\n176\n00:10:34.900 --> 00:10:37.840\neach key's value in this symbol.iterator.\n\n177\n00:10:37.840 --> 00:10:39.440\nWell I see symbol.iterator,\n\n178\n00:10:39.440 --> 00:10:44.150\nI can use the for of loop, so let's see\nwhat that actually prints out for us.\n\n179\n00:10:44.150 --> 00:10:47.380\nWe only have two elements in here, this\nshould be fairly simple to reason about.\n\n180\n00:10:47.380 --> 00:10:50.620\nSo for(let element character.\n\n181\n00:10:50.620 --> 00:10:53.787\nGotta be careful, in charHealth.\n\n182\n00:10:56.475 --> 00:10:59.760\nI wanna add an n to Mario and\nI wanna leave the l out of health.\n\n183\n00:10:59.760 --> 00:11:00.860\nI don't understand.\n\n184\n00:11:00.860 --> 00:11:03.130\n&gt;&gt; [LAUGH]\n&gt;&gt; So let's just see.\n\n185\n00:11:03.130 --> 00:11:03.770\nCharacter.\nNow,\n\n186\n00:11:03.770 --> 00:11:07.280\nI'm making a guess about what it's\nactually going to print out here.\n\n187\n00:11:07.280 --> 00:11:07.780\nI don't know.\n\n188\n00:11:09.460 --> 00:11:10.160\nDid I save that?\n\n189\n00:11:10.160 --> 00:11:11.220\nI did.\n\n190\n00:11:11.220 --> 00:11:17.000\nAnd okay, well that is not quite\nwhat I anticipated, right.\n\n191\n00:11:18.450 --> 00:11:19.400\nWhat did it print out?\n\n192\n00:11:19.400 --> 00:11:21.570\nWell, that's kinda hard to reason about.\n\n193\n00:11:21.570 --> 00:11:28.040\nMaybe I should go read has, get,\nlet's go read about the iterator.\n\n194\n00:11:29.350 --> 00:11:33.660\nSo I can read about this for let of value.\n\n195\n00:11:33.660 --> 00:11:36.460\nIt gives me just the values of the map.\n\n196\n00:11:36.460 --> 00:11:39.940\nAnd if you see,\nsee how these are not unique?\n\n197\n00:11:39.940 --> 00:11:42.760\nI'm kinda getting the same\nthing printed out twice so\n\n198\n00:11:42.760 --> 00:11:44.600\nit looks like I'm only getting one thing.\n\n199\n00:11:44.600 --> 00:11:46.870\nThere's only one thing in there,\n\n200\n00:11:46.870 --> 00:11:50.180\nso I don't really get that\noutput that I'm expecting.\n\n201\n00:11:50.180 --> 00:11:57.179\nBut what if I instead call this entries,\nright, I'm using that entries method.\n\n202\n00:11:57.179 --> 00:11:58.024\nAnd let's see what that prints out here.\n\n203\n00:12:00.615 --> 00:12:04.446\nDaniel, I can tell you for\na fact that that should be different.\n\n204\n00:12:05.566 --> 00:12:07.490\nSo charHealth.entries.\n\n205\n00:12:11.457 --> 00:12:12.277\nRemove that.\n\n206\n00:12:12.277 --> 00:12:13.264\nSo I set, set.\n\n207\n00:12:17.065 --> 00:12:21.220\nHm, gotta do a little bit\nof debugging here Daniel.\n\n208\n00:12:21.220 --> 00:12:22.730\nSo let's run through it.\n\n209\n00:12:22.730 --> 00:12:25.010\nI have a new map,\nI set the two characters.\n\n210\n00:12:27.800 --> 00:12:29.850\nLet me just comment this out here.\n\n211\n00:12:33.883 --> 00:12:35.236\nAnd charHealth.\n\n212\n00:12:39.147 --> 00:12:41.400\nAnd refresh, and there they are.\n\n213\n00:12:43.390 --> 00:12:46.750\nAnd let's play around in the console, too.\n\n214\n00:12:46.750 --> 00:12:49.508\nSo charHealth.entries.\n\n215\n00:12:53.220 --> 00:12:56.311\nThat's what I anticipated.\n\n216\n00:12:56.311 --> 00:12:59.670\nBut this is not running\nlike I anticipated.\n\n217\n00:13:01.550 --> 00:13:02.540\nThat's interesting.\n\n218\n00:13:02.540 --> 00:13:04.230\nDo I have a typo here?\n\n219\n00:13:05.300 --> 00:13:06.457\nEntries.\n\n220\n00:13:09.139 --> 00:13:11.650\nSo, notice in Entries I\nget the key value pairs.\n\n221\n00:13:11.650 --> 00:13:17.210\nLet's actually destructure that to\nsee if I can, Mess around with that.\n\n222\n00:13:17.210 --> 00:13:21.210\nSo, let's console.log just the keys.\n\n223\n00:13:25.951 --> 00:13:26.510\nHm.\n\n224\n00:13:29.390 --> 00:13:33.725\nWell, shame on me, wrong preposition.\n\n225\n00:13:33.725 --> 00:13:35.680\n&gt;&gt; [LAUGH] You figured it out.\n\n226\n00:13:35.680 --> 00:13:37.705\n&gt;&gt; Yep, yep,\nthat will mess you up every time.\n\n227\n00:13:37.705 --> 00:13:41.880\nSo there is a for in loop,\nthis is not where that is used.\n\n228\n00:13:41.880 --> 00:13:44.080\nSo for in doesn't do this.\n\n229\n00:13:44.080 --> 00:13:49.600\nFor of actually iterates over iterables\nthat adhere to the iterator protocol.\n\n230\n00:13:49.600 --> 00:13:51.740\nBut that's an important thing to see,\nright.\n\n231\n00:13:51.740 --> 00:13:53.640\nIt's not all magic and unicorns.\n\n232\n00:13:53.640 --> 00:13:56.340\nThere are times where we all have trouble.\n\n233\n00:13:56.340 --> 00:13:59.560\nIt's about being persistent and\nknowing, where do I go look?\n\n234\n00:13:59.560 --> 00:14:00.960\nHow do I figure this out?\n\n235\n00:14:00.960 --> 00:14:04.540\n&gt;&gt; I like how you started with just the\nbasics of what you wanted to do, make sure\n\n236\n00:14:04.540 --> 00:14:07.990\nthat everything was working correctly,\nand then started to re-add things.\n\n237\n00:14:07.990 --> 00:14:10.950\nMaybe drawing it out a little bit further\nso that you could verify that everything\n\n238\n00:14:10.950 --> 00:14:14.120\nwas working as expected and\nthen when you found your problem.\n\n239\n00:14:14.120 --> 00:14:16.340\n&gt;&gt; Yep, and\nsometimes it takes a little while.\n\n240\n00:14:16.340 --> 00:14:20.290\nI mean I'm not gonna lie, there's been\ntimes when it's taken me three, four,\n\n241\n00:14:20.290 --> 00:14:22.265\nfive hours to figure out something, and\n\n242\n00:14:22.265 --> 00:14:26.003\nthere are times where it's just a simple\n[SOUND], I forgot a semicolon here.\n\n243\n00:14:26.003 --> 00:14:28.150\nOr I used in instead of of.\n\n244\n00:14:28.150 --> 00:14:32.220\nSo it's a for of loop,\notherwise the in doesn't work.\n\n245\n00:14:32.220 --> 00:14:35.300\nIn is for objects,\njust the properties on an object.\n\n246\n00:14:35.300 --> 00:14:37.690\nSo they only work for\nthose special data types.\n\n247\n00:14:37.690 --> 00:14:42.000\nSo, with that said, let's go ahead and\njump back in and pick up where we left off\n\n248\n00:14:42.000 --> 00:14:44.990\nso we can actually get an idea of\nwhat's going on in these maps.\n\n249\n00:14:44.990 --> 00:14:50.150\nSo my key value pair,\nI can actually get that out from entries.\n\n250\n00:14:50.150 --> 00:14:55.130\nSo if I print out my value, so\nokay, there's my key value pair.\n\n251\n00:14:56.200 --> 00:14:58.276\nWhat does a values give me?\n\n252\n00:15:01.006 --> 00:15:04.820\nYou should not call this plural cuz these\nare going to be one thing at at a time.\n\n253\n00:15:04.820 --> 00:15:06.580\nI'm gonna remove that.\n\n254\n00:15:07.810 --> 00:15:12.140\nSo the value gives me the right hand side,\nwhat they're actually mapped to.\n\n255\n00:15:12.140 --> 00:15:19.970\nAnd if I give this the key, And that's not\ngonna work cuz this also has to be key.\n\n256\n00:15:19.970 --> 00:15:22.930\nSo if I refresh, that is the label, right.\n\n257\n00:15:22.930 --> 00:15:25.820\nNow I'm using strings here, but\nI don't have to use strings.\n\n258\n00:15:25.820 --> 00:15:31.100\nI can actually put in more complex objects\nlike this Mario object that I built\n\n259\n00:15:31.100 --> 00:15:34.390\nat the top here that was\nan instantiation of the character class.\n\n260\n00:15:34.390 --> 00:15:37.410\nSo I can use that as a lookup,\nwhich is incredibly handy.\n\n261\n00:15:37.410 --> 00:15:39.800\nNow on top of these standard iterators,\n\n262\n00:15:39.800 --> 00:15:44.810\nI have a 4H loop which is gonna\nbehave very similar to the 4of loop.\n\n263\n00:15:45.880 --> 00:15:52.827\nAnd just to show you that console,\nactually not console, charhealth.forEach.\n\n264\n00:15:52.827 --> 00:15:57.030\nThe question is what is\nit actually giving to me?\n\n265\n00:15:57.030 --> 00:16:03.497\nI'm just gonna guess and say something And\nconsole.log(something), okay.\n\n266\n00:16:03.497 --> 00:16:06.407\nSo I don't know if it's\ngonna give me the entries,\n\n267\n00:16:06.407 --> 00:16:09.580\nif it's gonna give me the keys,\nthe values only.\n\n268\n00:16:09.580 --> 00:16:11.850\nSo I'm just gonna give it up, and\n\n269\n00:16:11.850 --> 00:16:16.660\nyou'll notice when I iterate it actually\njust iterates over the values instead.\n\n270\n00:16:16.660 --> 00:16:18.680\nAnd just to make sure that is the case,\n\n271\n00:16:18.680 --> 00:16:21.165\nI'm gonna comment out\nthe remainder of these here.\n\n272\n00:16:21.165 --> 00:16:25.640\nRe run it, and\nI'm getting just the values of the map.\n\n273\n00:16:25.640 --> 00:16:28.500\nSo four each is going to\niterate through the values.\n\n274\n00:16:28.500 --> 00:16:30.880\nBut if I go and read about the four each\n\n275\n00:16:32.360 --> 00:16:37.530\non the map this is a great place\nto make sure that is the case.\n\n276\n00:16:37.530 --> 00:16:39.820\nThe callback, function execute for\neach element.\n\n277\n00:16:40.990 --> 00:16:44.950\nCallback invokes these three arguments,\nthe element value, the element key.\n\n278\n00:16:46.360 --> 00:16:49.390\nSo because I've passed\nthis a single value or\n\n279\n00:16:49.390 --> 00:16:52.290\nthe single variable name\nI'm only getting the value.\n\n280\n00:16:52.290 --> 00:16:56.080\nThere is a way to modify\nthis to ragged value and\n\n281\n00:16:56.080 --> 00:16:59.270\nkey just like I would for entries.\n\n282\n00:16:59.270 --> 00:17:04.137\nSo if I wanted to print out the key\nvalue pairs, or use them to iterate,\n\n283\n00:17:04.137 --> 00:17:05.880\nand make calculations.\n\n284\n00:17:05.880 --> 00:17:10.741\nI can actually get the key value pairs by\nmodifying the fat arrow function signature\n\n285\n00:17:10.741 --> 00:17:12.140\nthat I pass to for each.\n\n286\n00:17:13.210 --> 00:17:17.820\nNow the last thing is this property,\nright.\n\n287\n00:17:17.820 --> 00:17:21.280\nWith sets we had size not length.\n\n288\n00:17:21.280 --> 00:17:26.790\nWell I wonder if map has the ability to\ntell me how many things are in there.\n\n289\n00:17:27.840 --> 00:17:29.003\nWhat is, right.\n\n290\n00:17:29.003 --> 00:17:31.780\nHow many characters am I\nlooking up the health for?\n\n291\n00:17:31.780 --> 00:17:37.170\nSo health.size and\nI can see that I have two entries.\n\n292\n00:17:37.170 --> 00:17:41.510\nSo if I have two look ups that's\nwhat size it's gonna give me.\n\n293\n00:17:41.510 --> 00:17:43.310\nI can see if it has something.\n\n294\n00:17:43.310 --> 00:17:47.550\nI can get it,\nI can see how many are in there.\n\n295\n00:17:47.550 --> 00:17:49.460\nAnd I can set them, right.\n\n296\n00:17:49.460 --> 00:17:51.111\nSo I can set, I can get.\n\n297\n00:17:51.111 --> 00:17:53.050\nLet me see if they're in there.\n\n298\n00:17:53.050 --> 00:17:54.539\nIt works very similar to an object.\n\n299\n00:17:55.970 --> 00:17:58.580\nOther then I don't have to\nuse strings as the keys.\n\n300\n00:17:58.580 --> 00:18:02.820\nBut where would I actually use\nthis inside of an application?\n\n301\n00:18:02.820 --> 00:18:08.566\nWell if you'll bear with me let's\ntake a quick aside here and\n\n302\n00:18:08.566 --> 00:18:12.181\nsee a very basic kind of application.\n\n303\n00:18:12.181 --> 00:18:14.966\nSo if I had an up button and\n\n304\n00:18:14.966 --> 00:18:20.660\nlet's just call this up,\nand I had a down button.\n\n305\n00:18:20.660 --> 00:18:23.110\nAgain this is not about\nbuilding web applications but\n\n306\n00:18:23.110 --> 00:18:25.571\nthis is something a use case\nthat I would use for a map.\n\n307\n00:18:25.571 --> 00:18:30.270\nSo focus on how is the map being used and\nnot so much how this is being built.\n\n308\n00:18:32.320 --> 00:18:37.420\nAnd I'm going to comment this out just so\nwe can keep everything clear.\n\n309\n00:18:37.420 --> 00:18:39.387\nWell as clear as I can be.\n\n310\n00:18:39.387 --> 00:18:44.368\nSo if I let up equal\ndocument.cruiseselector,\n\n311\n00:18:44.368 --> 00:18:48.140\nand I'm looking for that up button.\n\n312\n00:18:49.650 --> 00:18:52.349\nAnd let me raise this up here.\n\n313\n00:18:52.349 --> 00:18:57.620\nAnd let down equal\ndocument.cruiseselector.\n\n314\n00:18:57.620 --> 00:18:59.720\nAnd I'm looking for that down button.\n\n315\n00:18:59.720 --> 00:19:04.186\nWell I can use a map to store information\nlike interactions that have occurred\n\n316\n00:19:04.186 --> 00:19:04.950\non the page.\n\n317\n00:19:07.080 --> 00:19:09.710\nNow this would be kind of like\na tracking like an analytics.\n\n318\n00:19:09.710 --> 00:19:11.460\nAnd not a robust analytics.\n\n319\n00:19:11.460 --> 00:19:14.870\nBut this might be something that as people\nare moving around in your web application\n\n320\n00:19:14.870 --> 00:19:17.860\nyou can gather this information and\nsend it to an email, right?\n\n321\n00:19:17.860 --> 00:19:21.292\nOr putting it in a database\nperiodically after you've gathered it.\n\n322\n00:19:21.292 --> 00:19:23.749\nOr they've tried to navigate\naway from the page.\n\n323\n00:19:23.749 --> 00:19:27.374\nThis is a great thing to know if you're\nbuilding web applications cuz if someone\n\n324\n00:19:27.374 --> 00:19:28.954\nis going look at this button.\n\n325\n00:19:28.954 --> 00:19:31.579\nAnd that's the only thing that they\ninteract with you on your page.\n\n326\n00:19:31.579 --> 00:19:36.085\nBut that's not providing any additional\nlike staying power that would be good\n\n327\n00:19:36.085 --> 00:19:36.639\nto know.\n\n328\n00:19:36.639 --> 00:19:42.370\nSo I'm just gonna keep logs of\nthese interactions in a map.\n\n329\n00:19:42.370 --> 00:19:43.640\nAnd how am I going to map those?\n\n330\n00:19:45.170 --> 00:19:48.570\nWell the interactions I'm gonna\nworry about are hover over, right?\n\n331\n00:19:48.570 --> 00:19:51.311\nThe mouse has actually touched\nit with the pointer, so\n\n332\n00:19:51.311 --> 00:19:53.344\npeople are tracking around on the page.\n\n333\n00:19:53.344 --> 00:19:58.170\nLet me say interactions.set(up.\n\n334\n00:19:58.170 --> 00:20:00.880\nAnd I'm gonna say zero,\ncuz I'm just keeping a count.\n\n335\n00:20:00.880 --> 00:20:02.747\nAnd I'm gonna do the same thing for down.\n\n336\n00:20:05.590 --> 00:20:09.880\nAnd notice I'm not using the words up and\ndown, I'm actually using this thing.\n\n337\n00:20:09.880 --> 00:20:11.810\nWhatever this thing is,\nit's a complex object.\n\n338\n00:20:12.820 --> 00:20:13.800\nI don't even know what this is,\n\n339\n00:20:13.800 --> 00:20:17.010\nI just know that it's\nan object of some type, right?\n\n340\n00:20:17.010 --> 00:20:18.959\nNot a base object, but something.\n\n341\n00:20:20.870 --> 00:20:23.570\nAnd then I'm gonna add\na couple of event listeners.\n\n342\n00:20:23.570 --> 00:20:27.650\nNow event listeners are gonna allow\nme to run functions based on these\n\n343\n00:20:29.580 --> 00:20:30.760\ninteractions that are occurring.\n\n344\n00:20:30.760 --> 00:20:35.390\nSo I'm gonna say mouseenter and\nhoverCount.\n\n345\n00:20:39.450 --> 00:20:40.950\nAnd do the same thing for down.\n\n346\n00:20:45.150 --> 00:20:50.224\nMaybe there was Mariann and then there\nwas health check without an l and\n\n347\n00:20:50.224 --> 00:20:53.074\nnow it's down with 17 letters that.\n\n348\n00:20:53.074 --> 00:20:54.733\n&gt;&gt; [LAUGH]\n&gt;&gt; Go.\n\n349\n00:20:54.733 --> 00:20:56.326\n&gt;&gt; No down spelt with the p.\n\n350\n00:20:56.326 --> 00:20:57.503\n&gt;&gt; Yeah on next.\n\n351\n00:20:57.503 --> 00:20:58.148\n&gt;&gt; Yeah.\n\n352\n00:20:58.148 --> 00:20:59.549\n&gt;&gt; It's the weirdest thing.\n\n353\n00:20:59.549 --> 00:21:04.829\nSo here's my function and\nall I'm gonna do with this function\n\n354\n00:21:04.829 --> 00:21:10.222\nis grab how many hovers have occurred for\nthat button,right.\n\n355\n00:21:10.222 --> 00:21:12.362\nThis hover count will run for each button.\n\n356\n00:21:12.362 --> 00:21:18.693\nBut I'm gonna look out for that particular\nbutton, interactions.get(this).\n\n357\n00:21:18.693 --> 00:21:24.156\nAnd I'm just gonna console.log hovers,\njust for hour.\n\n358\n00:21:24.156 --> 00:21:27.168\nJust to see how this is running for now.\n\n359\n00:21:27.168 --> 00:21:31.353\nAnd then I'm gonna say\ninteractions dot set for\n\n360\n00:21:31.353 --> 00:21:35.800\nthis whatever the amount\nof hovers was plus one.\n\n361\n00:21:35.800 --> 00:21:37.930\nSo I'm gonna add one to the hovers.\n\n362\n00:21:37.930 --> 00:21:41.200\nSo let's see how this works, refresh.\n\n363\n00:21:41.200 --> 00:21:43.940\nNotice I have these buttons and\n\n364\n00:21:43.940 --> 00:21:48.054\nnotice this is printing out\na bunch of stuff, right?\n\n365\n00:21:48.054 --> 00:21:49.789\nThat's kind of cool.\n\n366\n00:21:49.789 --> 00:21:56.560\nExpect I want it to print out\nthe interactions, which is this map.\n\n367\n00:21:57.600 --> 00:22:01.227\nSo if I refresh and I hover.\n\n368\n00:22:02.410 --> 00:22:07.195\nI now have a number of counts for\neach button interactions.\n\n369\n00:22:07.195 --> 00:22:12.119\nAnd I can wire up a bunch of these and\nmake this not just a single number but\n\n370\n00:22:12.119 --> 00:22:13.855\nfor a particular event.\n\n371\n00:22:13.855 --> 00:22:18.477\nLike a mouse click, a mouse enter,\na mouse leave, a drag, a drop.\n\n372\n00:22:18.477 --> 00:22:22.600\nAll these things I can listen to I\ncan keep a running tally in this map\n\n373\n00:22:22.600 --> 00:22:24.221\nwithout worrying about,\n\n374\n00:22:24.221 --> 00:22:28.289\nokay how do I name that button in\nthe object again to do the look up?\n\n375\n00:22:28.289 --> 00:22:30.301\nI'm just using the button as the look up.\n\n376\n00:22:30.301 --> 00:22:36.230\nSo if I hover over this you'll see that\nit actually highlights the up button.\n\n377\n00:22:36.230 --> 00:22:39.810\nSo let's see if I can zoom\nin an illustrate this.\n\n378\n00:22:39.810 --> 00:22:43.110\nSee that if I hover over\nthat it's actually saying\n\n379\n00:22:43.110 --> 00:22:46.020\nthat is the up button there,\nand that's all I need to know.\n\n380\n00:22:46.020 --> 00:22:49.740\nSo this is,\nyou can keep meta data about this.\n\n381\n00:22:49.740 --> 00:22:56.790\nBut for now if I ever de reference these,\nwell I now have another memory leak.\n\n382\n00:22:56.790 --> 00:23:00.010\nIf I get rid of this up variable and\n\n383\n00:23:00.010 --> 00:23:02.980\nI haven't taken it out of the map,\nit's there forever.\n\n384\n00:23:02.980 --> 00:23:07.150\nAnd maybe those just keep piling up and\neventually your things crash.\n\n385\n00:23:07.150 --> 00:23:10.330\nI actually need something with\nnot quite as much strength,\n\n386\n00:23:10.330 --> 00:23:12.560\nnot quite as much staying power.\n\n387\n00:23:12.560 --> 00:23:15.200\nAnd just like we have WeakSets,\nwe have WeakMaps.\n\n388\n00:23:17.130 --> 00:23:19.517\nWeakMaps are kind of like WeakSets or\n\n389\n00:23:19.517 --> 00:23:23.137\nWeakSets are to sets as we'll\nthey have a similar name.\n\n390\n00:23:23.137 --> 00:23:25.885\nAnd they got little bit in common but\nnot a lot and\n\n391\n00:23:25.885 --> 00:23:28.700\nWeakMaps are very much the same way,\nright?\n\n392\n00:23:28.700 --> 00:23:33.280\nWeakMaps you can't clear them,\nyou can't get rid of them there's no size,\n\n393\n00:23:33.280 --> 00:23:34.810\nthere's no iterator.\n\n394\n00:23:34.810 --> 00:23:36.073\nAnd here's whats important.\n\n395\n00:23:36.073 --> 00:23:40.380\nNotice how use strings in\na standard map in a weak map\n\n396\n00:23:40.380 --> 00:23:43.090\nthe keys actually have to be an object.\n\n397\n00:23:43.090 --> 00:23:47.040\nThere's no if ands or buts, I have to use\nan object, I don't have any other goals.\n\n398\n00:23:48.640 --> 00:23:52.841\nSo I think it would be best to see\nwhere would I use this WeakMap lookup.\n\n399\n00:23:52.841 --> 00:23:53.717\nI've kind of been alluding to this.\n\n400\n00:23:53.717 --> 00:23:58.490\nSo lets see WeakMaps\nthey have a similar API.\n\n401\n00:23:58.490 --> 00:23:59.335\nAs maps, so I can add.\n\n402\n00:23:59.335 --> 00:24:05.190\nI can't clear, but I can get,\nI can do add set and lookup.\n\n403\n00:24:05.190 --> 00:24:07.555\nSo let's create a game, right?\n\n404\n00:24:07.555 --> 00:24:11.270\nAnd we're gonna see a similar\npattern that we had before.\n\n405\n00:24:13.040 --> 00:24:14.390\nAnd there's my game.\n\n406\n00:24:14.390 --> 00:24:17.170\nLots of semicolons, curly braces,\nand parentheses there.\n\n407\n00:24:18.580 --> 00:24:21.110\nSometimes it makes me scared too,\nand I'm the one typing them.\n\n408\n00:24:21.110 --> 00:24:24.905\nSo, don't worry about the game part other\nthan, we're building a larger scale game.\n\n409\n00:24:24.905 --> 00:24:29.292\nAnd we need to keep track of some\ninformation about stuff, right.\n\n410\n00:24:29.292 --> 00:24:30.396\nSo I have health.\n\n411\n00:24:30.396 --> 00:24:33.285\nAnd we've seen this a little bit before.\n\n412\n00:24:33.285 --> 00:24:36.465\nAnd that's a new WeakMap.\n\n413\n00:24:36.465 --> 00:24:40.463\nAnd I have the characters.\n\n414\n00:24:43.389 --> 00:24:46.053\nSo I can use a WeakMap to keep\ntrack of what are characters and\n\n415\n00:24:46.053 --> 00:24:48.036\nwhat are their associated health, right?\n\n416\n00:24:48.036 --> 00:24:53.523\nSo, let's create a function\ncalled createCharacter.\n\n417\n00:24:57.175 --> 00:24:59.510\nAnd it takes a name.\n\n418\n00:24:59.510 --> 00:25:06.760\nAnd all it's gonna do is\ncreate char = {name}.\n\n419\n00:25:06.760 --> 00:25:09.430\nI'm using a shorthand syntax for\nobject literals.\n\n420\n00:25:09.430 --> 00:25:12.050\nThis will be name and\nthen whatever the value of name\n\n421\n00:25:12.050 --> 00:25:15.320\nis will be its associated value,\na very simple object.\n\n422\n00:25:15.320 --> 00:25:21.072\nAnd then I'm going to say\nhealth.set this character to 100.\n\n423\n00:25:21.072 --> 00:25:28.116\nAnd I'm gonna say, chars.set this\ncharacter to the actual name.\n\n424\n00:25:28.116 --> 00:25:32.334\nSo if I wanted to look up this\ncharacter's name without going into\n\n425\n00:25:32.334 --> 00:25:35.799\nthe character itself,\nI can do a lookup on the chars.\n\n426\n00:25:37.180 --> 00:25:39.602\nAnd then I'm going to return the char.\n\n427\n00:25:39.602 --> 00:25:42.730\nSo I'm gonna spit out the new\ncharacter that I've created.\n\n428\n00:25:42.730 --> 00:25:47.310\nNow, this mimics this character\nclass at the top that we used\n\n429\n00:25:47.310 --> 00:25:47.980\nat the very beginning.\n\n430\n00:25:49.370 --> 00:25:50.047\nSo I had this game.\n\n431\n00:25:50.047 --> 00:25:53.370\nOkay, well, this is the game object.\n\n432\n00:25:53.370 --> 00:25:56.827\nI'm going to finally put a print here.\n\n433\n00:25:56.827 --> 00:26:01.792\nAnd this is just to see\nthe individual WeakMaps.\n\n434\n00:26:01.792 --> 00:26:04.444\nAnd health.\n\n435\n00:26:04.444 --> 00:26:09.429\nAnd here are our characters.\n\n436\n00:26:13.702 --> 00:26:14.862\nI think I'm hitting my stride, Daniel.\n\n437\n00:26:14.862 --> 00:26:16.119\nI think I'm hitting my stride.\n\n438\n00:26:18.198 --> 00:26:23.690\nAnd then I'm going to return,\ncreateCharacter, and print.\n\n439\n00:26:23.690 --> 00:26:27.550\nAgain, shorthand syntax for\nobject literal, and\n\n440\n00:26:27.550 --> 00:26:30.340\nwe'll actually use this\nto create a character.\n\n441\n00:26:30.340 --> 00:26:37.200\nAnd let's do this,\nlet peach = Game.createCharacter.\n\n442\n00:26:37.200 --> 00:26:42.280\nSo Princess Peach is very\nmuch a Mario universe.\n\n443\n00:26:42.280 --> 00:26:43.740\nI like Princess Peach.\n\n444\n00:26:43.740 --> 00:26:44.622\nSo Peach.\n\n445\n00:26:44.622 --> 00:26:50.340\nAnd then if I say game.print maps,\nor print, rather.\n\n446\n00:26:51.510 --> 00:26:52.900\nLet's just see what that does.\n\n447\n00:26:52.900 --> 00:26:56.462\nSo if I refresh, notice I have\na health that has Peach in it,\n\n448\n00:26:56.462 --> 00:26:59.250\nand a characters that has Peach in it.\n\n449\n00:26:59.250 --> 00:27:02.930\nSo I can look up both of these\nusing the WeakMaps there.\n\n450\n00:27:02.930 --> 00:27:06.970\nBut I have a reference to the object\noutside of the game context.\n\n451\n00:27:06.970 --> 00:27:14.770\nWhat if Peach, she jumped on the wrong\ngoomba and kind of fell to her demise?\n\n452\n00:27:14.770 --> 00:27:17.721\nWell, Peach would then go out of play.\n\n453\n00:27:17.721 --> 00:27:20.710\nI would no longer have\na reference to Peach.\n\n454\n00:27:20.710 --> 00:27:24.205\nWell, what does that mean?\n\n455\n00:27:24.205 --> 00:27:27.575\nThat means that the game, I gotta keep.\n\n456\n00:27:27.575 --> 00:27:31.840\nThis is where the garbage\ncollection is not so predictable.\n\n457\n00:27:31.840 --> 00:27:34.510\nThere we go.\n\n458\n00:27:34.510 --> 00:27:38.560\nYou will notice that the game kinda cleans\nup after itself if you use WeakMaps.\n\n459\n00:27:38.560 --> 00:27:43.880\nAnd now I don't have to write additional\nmethods in this game object to manage,\n\n460\n00:27:43.880 --> 00:27:47.909\nwell, when the character's dereferenced,\nI actually need you to go delete it from\n\n461\n00:27:47.909 --> 00:27:51.540\nthe object lookup for health and\nthe object lookup for characters.\n\n462\n00:27:51.540 --> 00:27:56.190\nSo this is handy, incredibly handy for,\nI don't have to clean up after myself.\n\n463\n00:27:56.190 --> 00:27:57.730\nI can just make a mess and\n\n464\n00:27:57.730 --> 00:28:01.760\nthings are kinda taken care of if\nI follow the rules appropriately.\n\n465\n00:28:01.760 --> 00:28:06.330\nSo WeakMap and Map do have their place,\nand they kind of make me happy.\n\n466\n00:28:06.330 --> 00:28:07.860\n&gt;&gt; Well, Justin,\nI'm glad they make you happy.\n\n467\n00:28:07.860 --> 00:28:09.221\nThey should make our viewers happy,\nas well.\n\n468\n00:28:09.221 --> 00:28:12.493\nYou guys are now learning to figure out,\nhow can we use these maps,\n\n469\n00:28:12.493 --> 00:28:15.190\nthat's the whole purpose\nof our demonstration here.\n\n470\n00:28:15.190 --> 00:28:19.670\nAgain, kind of like back in sets\nwhere we kind of built this giant\n\n471\n00:28:19.670 --> 00:28:21.810\ncode block to make things happen.\n\n472\n00:28:21.810 --> 00:28:25.400\nIt's all about making that context so\nthat you can see how these things work.\n\n473\n00:28:25.400 --> 00:28:29.361\nWe want you to understand maps, therefore,\nJustin creates this cool little game for\n\n474\n00:28:29.361 --> 00:28:32.663\nus so that we have a context in which\nto understand maps and to understand\n\n475\n00:28:32.663 --> 00:28:36.450\nWeakMaps for that whole garbage\ncollection that he's been talking about.\n\n476\n00:28:36.450 --> 00:28:37.014\nJustin, we do thank you.\n\n477\n00:28:37.014 --> 00:28:38.667\nIs there anything else about maps or\n\n478\n00:28:38.667 --> 00:28:41.433\nWeakMaps that we need to know\nbefore we round this show out?\n\n479\n00:28:41.433 --> 00:28:43.370\n&gt;&gt; You know, I'm glad you brought it up.\n\n480\n00:28:43.370 --> 00:28:48.730\nThere is a final way to construct maps,\nand that is using arrays inside arrays.\n\n481\n00:28:48.730 --> 00:28:51.720\nI didn't show those, because that's\nnot a very common use case, but\n\n482\n00:28:51.720 --> 00:28:54.450\njust to let you know, you can do that.\n\n483\n00:28:54.450 --> 00:28:58.090\nIt's really hard for me to type out, and\nprobably for most people to type out, so\n\n484\n00:28:58.090 --> 00:28:59.160\nkeep that in mind.\n\n485\n00:28:59.160 --> 00:29:00.629\n&gt;&gt; All right.\nWell now it's a little icing on\n\n486\n00:29:00.629 --> 00:29:04.760\nthe cake for you good folks out there\nto go figure out how you can do that.\n\n487\n00:29:04.760 --> 00:29:07.900\nAs Justin says, maybe a little\nbeyond the scope of this episode.\n\n488\n00:29:07.900 --> 00:29:09.690\nThat being said, Justin,\nthanks for joining us today.\n\n489\n00:29:09.690 --> 00:29:12.280\nWe do thank our audience for\njoining us as well.\n\n490\n00:29:12.280 --> 00:29:15.300\nBut it is that time for\nus to bid you a fond farewell.\n\n491\n00:29:15.300 --> 00:29:18.290\nSo signing off for ITProTV,\nI've been your host Daniel Lowrie.\n\n492\n00:29:18.290 --> 00:29:19.906\n&gt;&gt; And I'm Justin Dennison.\n\n493\n00:29:19.906 --> 00:29:21.534\n&gt;&gt; And we'll see you next time.\n\n494\n00:29:21.534 --> 00:29:29.118\n[MUSIC]\n\n495\n00:29:29.118 --> 00:29:33.529\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "204909801"
        }
      ],
      "title": "New Features in ES6"
    }
  ],
  "url": "featureses6",
  "vLab": false
}
