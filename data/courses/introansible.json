{
  "description": "Administering and configuring infrastructure is a necessary but sometimes very difficult undertaking. Manual configuration of infrastructure is a full time job that takes away from other valuable activities that is prone to errors and difficulties in reproducing system state. Ansible allows one to create plans for managing infrastructure using an agentless (no outside system required) approach. During this show we will cover what Ansible is, how to set up Ansible, and use Ansible to create reproducible server configurations.",
  "descriptionMD": "Administering and configuring infrastructure is a necessary but sometimes very difficult undertaking. Manual configuration of infrastructure is a full time job that takes away from other valuable activities that is prone to errors and difficulties in reproducing system state. Ansible allows one to create plans for managing infrastructure using an agentless (no outside system required) approach. During this show we will cover what Ansible is, how to set up Ansible, and use Ansible to create reproducible server configurations.",
  "length": "49542",
  "name": "Intro to Ansible",
  "practiceExam": false,
  "subtitle": "Agentless infrastructure management planning",
  "tagUrl": "devprotv",
  "topics": [
    {
      "episodes": [
        {
          "description": "Description: Administering and configuring infrastructure is a necessary but sometimes very difficult undertaking. Manual configuration of infrastructure is a full time job that takes away from other valuable activities that is prone to errors and difficulties in reproducing system state. Ansible allows one to create plans for managing infrastructure using an agentless (no outside system required) approach. During this show we will cover what Ansible is, how to set up Ansible, and use Ansible to create reproducible server configurations.",
          "length": "231",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-0-0-0-overview-121517-PGM.00_00_12_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-0-0-0-overview-121517-PGM.00_00_12_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-0-0-0-overview-121517-PGM.00_00_12_20.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "247803444"
        },
        {
          "description": "In this episode, Daniel and Justin explore the configuration management tool Ansible. Moreover, Justin demonstrates how to setup Vagrant and Virtualbox in order to simulate collections of servers to be administered by Ansible.",
          "length": "1594",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-1-1-creating_the_environment-110617-PGM.00_26_25_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-1-1-creating_the_environment-110617-PGM.00_26_25_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-1-1-creating_the_environment-110617-PGM.00_26_25_07.Still001-sm.jpg",
          "title": "Creating the Environment",
          "transcript": "",
          "vimeoId": "241889156"
        },
        {
          "description": "In this episode, Daniel and Justin work to install and set up Ansible on a control machine. Justin further discusses the requirements of Ansible in order appropriately control the other machines which includes setting up ssh access to other machines, copying identities, and ensuring that Python is available on the other machines.",
          "length": "1859",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-2-1-setting_up_ansible-110617-PGM.00_30_50_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-2-1-setting_up_ansible-110617-PGM.00_30_50_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-2-1-setting_up_ansible-110617-PGM.00_30_50_09.Still001-sm.jpg",
          "title": "Setting Up Ansible",
          "transcript": "",
          "vimeoId": "241884713"
        },
        {
          "description": "In this episode, Daniel and Justin demonstrate the use of Ansible to run some simple ad-hoc commands against other servers. Moreover, Justin demonstrates the use of a hosts file and modifying some of the Ansible configuration to manage multiple environments from the same control machine.",
          "length": "1792",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-3-1-simple_commands_using_ansible-110617-PGM.00_29_43_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-3-1-simple_commands_using_ansible-110617-PGM.00_29_43_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-1-3-1-simple_commands_using_ansible-110617-PGM.00_29_43_12.Still001-sm.jpg",
          "title": "Simple Commands Using Ansible",
          "transcript": "",
          "vimeoId": "241887146"
        },
        {
          "description": "In this episode,Daniel and Justin demonstrate installing packages through the ansible command line interface. Justin highlights some of the modules that may be necessary in order to manage packages for a given host.",
          "length": "1537",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-1-installing_packages-111017-PGM.00_25_27_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-1-installing_packages-111017-PGM.00_25_27_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-1-installing_packages-111017-PGM.00_25_27_21.Still001-sm.jpg",
          "title": "Installing Packages",
          "transcript": "",
          "vimeoId": "242603577"
        },
        {
          "description": "In this episode,Daniel and Justin return to further explore installing packages as well as highlighting some of the \"gotchas\" that can crop up when installing packages using Ansible.",
          "length": "1286",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-2-installing_packages_pt2-111017-PGM.00_23_13_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-2-installing_packages_pt2-111017-PGM.00_23_13_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-1-2-installing_packages_pt2-111017-PGM.00_23_13_05.Still001-sm.jpg",
          "title": "Installing Packages Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.671 --> 00:00:16.681\nAll right, greetings everyone and welcome\nback to another great episode of DevProTV.\n\n3\n00:00:16.681 --> 00:00:18.686\nI'm your host Daniel Lowrie and\n\n4\n00:00:18.686 --> 00:00:21.960\nin today's episode we are back\nwith more intro to Ansible series.\n\n5\n00:00:21.960 --> 00:00:26.750\nAnd joining us in the studio yet again,\nlooking into doing some more of our ad hoc\n\n6\n00:00:26.750 --> 00:00:31.090\nstuff, specifically,\ninto installation type of commands.\n\n7\n00:00:31.090 --> 00:00:33.881\nAnd our good friend, Justin Dennison,\nis gonna show us how to work with that.\n\n8\n00:00:33.881 --> 00:00:34.949\nJustin, welcome back to the show.\n\n9\n00:00:34.949 --> 00:00:35.734\nWe're glad to have you here again.\n\n10\n00:00:35.734 --> 00:00:37.780\nHow's it going?\n&gt;&gt; It is good to be back.\n\n11\n00:00:37.780 --> 00:00:39.330\nIt is going well.\nAnd how are you today Daniel?\n\n12\n00:00:39.330 --> 00:00:40.170\n&gt;&gt; I'm fantastic.\n\n13\n00:00:40.170 --> 00:00:41.830\nI'm actually kind of on a little high,\n\n14\n00:00:41.830 --> 00:00:45.920\nthat you've left us off\nfrom that previous episode.\n\n15\n00:00:45.920 --> 00:00:46.570\nI mean it was so\n\n16\n00:00:46.570 --> 00:00:51.540\ncool to be able to see I can throw\ncommands at all of my web servers.\n\n17\n00:00:51.540 --> 00:00:55.600\nI can throw commands at all of my database\nservers, or I can throw commands at all of\n\n18\n00:00:55.600 --> 00:01:00.440\nmy servers by using the grouping\nfunctionality that Ansible allows us and\n\n19\n00:01:00.440 --> 00:01:05.290\nthen we're really diving into that,\nlooking at installing, updating, doing all\n\n20\n00:01:05.290 --> 00:01:10.920\nthis command stuff from the Ansible\nworld from our command node, very very\n\n21\n00:01:10.920 --> 00:01:14.700\ncool you kind of left us with a little\nbit of a cliff hanger though didn't you?\n\n22\n00:01:14.700 --> 00:01:17.450\n&gt;&gt; Yeah let's remind ourselves\nwhere we left off in part one.\n\n23\n00:01:17.450 --> 00:01:21.990\nSo I installed a new VIM and part of\nthat was adding a PPA in order to keep\n\n24\n00:01:21.990 --> 00:01:25.300\nnew VIM kind up to date and\neverything, and then we installed it.\n\n25\n00:01:25.300 --> 00:01:27.180\nHowever if we go to one of the nodes,\n\n26\n00:01:27.180 --> 00:01:30.760\nlet's say you know what I need to go check\non some things in the database server.\n\n27\n00:01:30.760 --> 00:01:33.820\nI need to change a configuration,\nI really shouldn't be using Ansible for\n\n28\n00:01:33.820 --> 00:01:35.890\nthat but maybe it's an emergency.\n\n29\n00:01:35.890 --> 00:01:39.250\nI need to hop over there,\nfigure some things out, and\n\n30\n00:01:39.250 --> 00:01:44.920\nwell I type vim because that's how I,\nwell I but I don't get vim.\n\n31\n00:01:44.920 --> 00:01:49.345\nAnd if I'm expecting some of the features\nthat are out of the box of vim,\n\n32\n00:01:49.345 --> 00:01:53.786\nmaybe some of the speed, maybe some of\nthe differences, it's not available.\n\n33\n00:01:53.786 --> 00:01:57.240\nWell that's because if you look I\nreally need to update alternatives.\n\n34\n00:01:57.240 --> 00:02:00.069\nAnd essentially I need\nto say when I type VI or\n\n35\n00:02:00.069 --> 00:02:04.290\nvim, I actually want you to look at vim,\nuserbin in vim.\n\n36\n00:02:05.780 --> 00:02:07.500\nWell you can run this\nfrom the command line.\n\n37\n00:02:07.500 --> 00:02:09.330\nActually those commands are kind\nof long on the command line.\n\n38\n00:02:09.330 --> 00:02:11.800\nYou're like pseudo update alternatives.\n\n39\n00:02:11.800 --> 00:02:17.850\nI think you have to give it like where\nthe path of, or what you want to call\n\n40\n00:02:17.850 --> 00:02:23.910\nuser bin vi and then what's the thing\nyou want to push or like point to?\n\n41\n00:02:23.910 --> 00:02:26.460\nAnd then you can give it a priority.\n\n42\n00:02:26.460 --> 00:02:29.000\nSo in order to determine\nwhich one do I use.\n\n43\n00:02:30.500 --> 00:02:32.580\nSo that's where we left off.\n\n44\n00:02:33.940 --> 00:02:36.710\nI really want to do all those\nupdates cuz I like using neo vim.\n\n45\n00:02:36.710 --> 00:02:39.880\nNow I'm setting up an artificial kind\nof contrived example in order to\n\n46\n00:02:39.880 --> 00:02:43.820\ndemonstrate this so ultimately ad\nhoc is not where you wanna be.\n\n47\n00:02:43.820 --> 00:02:46.904\nSo I don't wanna do\nsomething too powerful,\n\n48\n00:02:46.904 --> 00:02:51.130\ntoo crazy in order to lull you\ninto a falsehood of security.\n\n49\n00:02:51.130 --> 00:02:52.310\nThere's actually better ways.\n\n50\n00:02:52.310 --> 00:02:55.170\nBut let's hop back into my screen here.\n\n51\n00:02:55.170 --> 00:02:58.930\nAnd I haven't actually touched\nanything since we've left off.\n\n52\n00:03:00.110 --> 00:03:05.260\nWe have SSH node one and\njust to show you if I type IM\n\n53\n00:03:05.260 --> 00:03:10.890\nthen it says command not found but if I\ntype VIM there's VIM, and then if I type\n\n54\n00:03:10.890 --> 00:03:16.800\nVI you get the exact same thing,\nold busted one, and then if I type InVIM\n\n55\n00:03:16.800 --> 00:03:21.290\nwell I get neo VIM but really what I want,\nI wanna type vim and get neovim.\n\n56\n00:03:21.290 --> 00:03:24.320\nI wanna type vi and get neovim.\n\n57\n00:03:24.320 --> 00:03:25.870\nEssentially, I want to\npull the old switcheroo.\n\n58\n00:03:25.870 --> 00:03:29.420\nNow, I could uninstall vim, and, but\n\n59\n00:03:29.420 --> 00:03:32.190\nif it was already there\nI've had trouble with that.\n\n60\n00:03:32.190 --> 00:03:34.980\nLike, well let's just take vim away.\n\n61\n00:03:34.980 --> 00:03:39.978\nAnd then there's weirdness maybe there\nwere configurations that pointed to vim\n\n62\n00:03:39.978 --> 00:03:43.002\nand, but\nthen I would have to reinstall neo vim.\n\n63\n00:03:43.002 --> 00:03:47.370\nYou know what I'm just gonna\nupdate the alternatives.\n\n64\n00:03:47.370 --> 00:03:49.190\nMan it's like I can't talk Daniel.\n\n65\n00:03:49.190 --> 00:03:52.650\nAnd then just leave vim there because\nit's not a very large package.\n\n66\n00:03:52.650 --> 00:03:54.650\nSo let's go ahead and get out of here and\n\n67\n00:03:54.650 --> 00:03:57.240\nwe're gonna get it back\nto our control node.\n\n68\n00:03:57.240 --> 00:03:59.610\nSo let's exit and there's a controller.\n\n69\n00:03:59.610 --> 00:04:01.310\nAnd then, how am I gonna do that?\n\n70\n00:04:01.310 --> 00:04:04.120\nWell normally I would pseudo\nupdate alternatives and\n\n71\n00:04:04.120 --> 00:04:05.830\nthen this kind of lengthy command.\n\n72\n00:04:07.640 --> 00:04:12.060\nWell, [SOUND] there's\nactually a module in Ansible\n\n73\n00:04:12.060 --> 00:04:16.284\ncalled alternatives that\nwill do exactly that.\n\n74\n00:04:16.284 --> 00:04:17.516\n&gt;&gt; Who would have thought?\n\n75\n00:04:17.516 --> 00:04:18.230\n&gt;&gt; [LAUGH] I know, right?\n\n76\n00:04:18.230 --> 00:04:19.460\n&gt;&gt; Who would have thought?\n\n77\n00:04:19.460 --> 00:04:23.960\n&gt;&gt; So, we're gonna use the alternatives\nmodule to actually update neovim for VI\n\n78\n00:04:23.960 --> 00:04:29.890\nand vim, and it's kind of repetitive, and\nultimately there are shorter ways, but I\n\n79\n00:04:29.890 --> 00:04:33.700\nwanted to show you this cuz it is a little\nlengthier than a couple of the other ones.\n\n80\n00:04:33.700 --> 00:04:37.550\nAnd it's something that you might\nhave to do repetitively and\n\n81\n00:04:37.550 --> 00:04:40.920\nthis illustrates though you\ncan do it in an ad hoc way,\n\n82\n00:04:40.920 --> 00:04:44.430\nmaybe you shouldn't do it\nin an ad hoc way all right?\n\n83\n00:04:44.430 --> 00:04:50.420\nSo ansible -m, actually I've gotta\ntell it what host, all, all hosts.\n\n84\n00:04:51.680 --> 00:04:55.605\nSo all dash m and alternatives.\n\n85\n00:04:55.605 --> 00:04:59.360\n-a, and then what do I want?\n\n86\n00:04:59.360 --> 00:05:04.190\nI want to use the name vi,\nso when I type vi,\n\n87\n00:05:04.190 --> 00:05:08.159\nI want it to point to user/bin/nvim.\n\n88\n00:05:08.159 --> 00:05:14.520\nAnd I want the priority to be, now this\nis just, I'm just showing you priority.\n\n89\n00:05:14.520 --> 00:05:18.380\nThere's nothing really important\nabout the priority here for me.\n\n90\n00:05:18.380 --> 00:05:26.330\nSo here we're good to go and if I run as\nbecome, it has now changed all of those.\n\n91\n00:05:26.330 --> 00:05:30.810\nWell, just to show you let's say you're\nlike the next day you rebooted your\n\n92\n00:05:30.810 --> 00:05:35.060\ncomputer maybe you're batch\nhistory is gone, who knows.\n\n93\n00:05:35.060 --> 00:05:37.980\nLet's put you in the context to where\nI can't scroll up through history.\n\n94\n00:05:39.180 --> 00:05:41.060\nYou know what,\nI forgot to do the VIN one someone,\n\n95\n00:05:41.060 --> 00:05:43.468\ntold me and\nyou know I probably need to do this.\n\n96\n00:05:43.468 --> 00:05:48.870\nSo ansible all dash m\n\n97\n00:05:48.870 --> 00:05:57.210\nalternatives dash a Name equals\nvim path equals user vim in vim.\n\n98\n00:05:57.210 --> 00:05:58.890\nAnd sometimes it's not about speed.\n\n99\n00:06:01.520 --> 00:06:04.740\nSometimes I can type very fast and\nsometimes I'm very error prone.\n\n100\n00:06:04.740 --> 00:06:07.890\nSo even if I'm typing a lot\nof characters a minute,\n\n101\n00:06:07.890 --> 00:06:12.170\nit really doesn't matter cuz I'm\ntyping a bunch of wrong stuff.\n\n102\n00:06:12.170 --> 00:06:15.070\nAnd this is one of those\nfurther issues with ad hock\n\n103\n00:06:15.070 --> 00:06:15.960\ncommands, they're error prone.\n\n104\n00:06:15.960 --> 00:06:19.048\nAnd then you have to cycle up and\ngo through.\n\n105\n00:06:19.048 --> 00:06:24.360\nSo there's VIM,\nlet's see if I go to node three this time.\n\n106\n00:06:24.360 --> 00:06:27.110\nIf I say VI, it brings up MVEM.\n\n107\n00:06:28.270 --> 00:06:31.440\nIf I say VIM, it brings up MVIM.\n\n108\n00:06:31.440 --> 00:06:37.720\nSo I've now uploaded the alternatives\non all of my nodes and\n\n109\n00:06:37.720 --> 00:06:42.148\nI just did that using the alternatives\nmodule kind of ad hoc command.\n\n110\n00:06:42.148 --> 00:06:50.000\nNow, what's interesting is if I come here,\nI'm on my controller node.\n\n111\n00:06:50.000 --> 00:06:53.760\nLet's say that my controller node\nlives with my cluster of computers and\n\n112\n00:06:53.760 --> 00:06:57.300\nit's entire purpose is well to control and\n\n113\n00:06:57.300 --> 00:07:00.400\norchestrate and, or\nmaybe it's my environment.\n\n114\n00:07:00.400 --> 00:07:04.040\nMaybe it's my remote environment\nthat I'm always in, right?\n\n115\n00:07:04.040 --> 00:07:06.651\nI'm talking about them actually do this,\n\n116\n00:07:06.651 --> 00:07:10.420\nI'll set up servers on some cloud\nplatform, and I just SSH and\n\n117\n00:07:10.420 --> 00:07:14.720\nI just have everything there,\ntake snapshots of my projects.\n\n118\n00:07:14.720 --> 00:07:19.330\nAnd they'll automatically push so I don't\nhave to keep a local environment and\n\n119\n00:07:19.330 --> 00:07:20.670\ncan kind of keep those separate.\n\n120\n00:07:20.670 --> 00:07:24.390\nNow part of that is faster Internet\nif I have to download things,\n\n121\n00:07:24.390 --> 00:07:25.870\na bunch of other things.\n\n122\n00:07:25.870 --> 00:07:27.390\nBut let's say the controller is there and\n\n123\n00:07:27.390 --> 00:07:29.640\nI'm like all of the things\nin that cluster.\n\n124\n00:07:29.640 --> 00:07:32.556\nThey have [INAUDIBLE] of them right?\n\n125\n00:07:32.556 --> 00:07:33.930\nOops.\n&gt;&gt; No they don't.\n\n126\n00:07:33.930 --> 00:07:34.890\n&gt;&gt; Man.\n\n127\n00:07:34.890 --> 00:07:35.580\nThey do not.\n\n128\n00:07:35.580 --> 00:07:36.710\n&gt;&gt; Did you need that?\n\n129\n00:07:36.710 --> 00:07:38.080\nIs that important at all?\n\n130\n00:07:38.080 --> 00:07:39.163\n&gt;&gt; Well I was hoping,\n&gt;&gt; [LAUGH]\n\n131\n00:07:39.163 --> 00:07:40.280\n&gt;&gt; I was hoping it was there.\n\n132\n00:07:40.280 --> 00:07:41.460\nI was hoping it was there.\n\n133\n00:07:41.460 --> 00:07:44.742\nBut the controller node,\nactually, is a part of this list.\n\n134\n00:07:44.742 --> 00:07:46.843\nAnd you're like well, I can probably\njust put local host in there.\n\n135\n00:07:46.843 --> 00:07:50.010\nLet's try it out.\n\n136\n00:07:51.190 --> 00:07:52.242\n&gt;&gt; It seems logical.\n&gt;&gt; Warning,\n\n137\n00:07:52.242 --> 00:07:56.984\nit's gonna cause some shenanigans,\nbut logically speaking you're like I\n\n138\n00:07:56.984 --> 00:08:01.951\ncould just put 127.0.0.1, or local host or\nsomething and it should work.\n\n139\n00:08:01.951 --> 00:08:02.958\n&gt;&gt; Right.\n\n140\n00:08:02.958 --> 00:08:03.923\nLet's try it out.\n\n141\n00:08:03.923 --> 00:08:05.270\nWe're going to add that to the host file.\n\n142\n00:08:07.630 --> 00:08:08.900\nAnd you know what?\n\n143\n00:08:08.900 --> 00:08:15.710\nLet's just call it local and local host.\n\n144\n00:08:15.710 --> 00:08:18.370\nJust in case,\nI want to call a local group.\n\n145\n00:08:18.370 --> 00:08:24.360\nNow, I could do this inline and\nI tend not to do an inline host.\n\n146\n00:08:24.360 --> 00:08:28.170\nSo I could do or in line inventory just\nbecause the command's going to get really\n\n147\n00:08:28.170 --> 00:08:30.650\nlong and\nit becomes a little bit of an issue.\n\n148\n00:08:30.650 --> 00:08:33.160\nNow, let's see here.\n\n149\n00:08:33.160 --> 00:08:34.500\nI have that, that's all good to go.\n\n150\n00:08:36.090 --> 00:08:41.180\nAnd you know what, let's just try it\nout with ping before we get too crazy.\n\n151\n00:08:41.180 --> 00:08:46.720\nSo if we ping and That was weird.\n\n152\n00:08:47.720 --> 00:08:48.220\n&gt;&gt; Yeah.\n\n153\n00:08:49.550 --> 00:08:51.390\n&gt;&gt; It's still trying to do something.\n\n154\n00:08:51.390 --> 00:08:53.380\n&gt;&gt; Yeah,\nit looks like it's trying to do something.\n\n155\n00:08:54.700 --> 00:08:56.930\nSo okay, it's asking for a fingerprint.\n\n156\n00:08:56.930 --> 00:08:58.750\nIt's trying to SSH.\n\n157\n00:09:00.540 --> 00:09:03.080\nRight, okay,\nwell let's try it another time.\n\n158\n00:09:03.080 --> 00:09:04.470\nLet's try it another time.\n\n159\n00:09:05.710 --> 00:09:08.450\nAnd it's still kinda doing that.\n\n160\n00:09:08.450 --> 00:09:12.660\nNow, this is the first thing you\nencounter and you may be tempted,\n\n161\n00:09:12.660 --> 00:09:16.930\nwell let me just do an SSH localhost.\n\n162\n00:09:18.370 --> 00:09:18.870\nSure.\n\n163\n00:09:20.930 --> 00:09:25.610\n&gt;&gt; Is the ping module actually\nSSH'ing into these machines?\n\n164\n00:09:25.610 --> 00:09:27.739\nAnd that's what the problem is and\n\n165\n00:09:27.739 --> 00:09:33.430\nsince it's the first time you into\nyourself, it's asking for the key thing.\n\n166\n00:09:33.430 --> 00:09:34.200\n&gt;&gt; Yep, exactly.\n\n167\n00:09:34.200 --> 00:09:38.482\nAnd also,\nI make sure that that was part of the.\n\n168\n00:09:38.482 --> 00:09:43.086\nBy doing the SSH, obviously,\nyou're like, I would never do that.\n\n169\n00:09:43.086 --> 00:09:45.160\nAnd you're right,\nI would also never do that, right?\n\n170\n00:09:45.160 --> 00:09:45.880\nWhat did you do?\n\n171\n00:09:45.880 --> 00:09:49.500\nI just SSH's in myself a bunch of time,\nit was weird.\n\n172\n00:09:49.500 --> 00:09:54.683\nIt was like SS inception or something,\nI don't know, or is that a boat?\n\n173\n00:09:54.683 --> 00:09:58.987\nSo I came here and, all right,\nso that key is there.\n\n174\n00:09:58.987 --> 00:10:04.299\nLet's run ansible all- m png and,\n\n175\n00:10:04.299 --> 00:10:07.900\nfailed to connect via SSH.\n\n176\n00:10:09.090 --> 00:10:15.460\nSo now we run into that problem with,\nI need to have a passwordless access.\n\n177\n00:10:15.460 --> 00:10:19.208\nOr there are ways to queue for\npassword, that's fine.\n\n178\n00:10:19.208 --> 00:10:23.260\nBut for the sake of this,\nit's probably best to have a key.\n\n179\n00:10:24.420 --> 00:10:26.340\nThat's my recommendation.\n\n180\n00:10:26.340 --> 00:10:27.440\nMakes this a lot easier.\n\n181\n00:10:27.440 --> 00:10:30.610\nI don't have to remember passwords\nas long as you keep the key safe.\n\n182\n00:10:30.610 --> 00:10:31.730\n&gt;&gt; Yeah.\n&gt;&gt; That's good.\n\n183\n00:10:33.040 --> 00:10:34.570\nBut my key's already here.\n\n184\n00:10:34.570 --> 00:10:37.600\nHow am I gong to copy\nthe identity of the key?\n\n185\n00:10:37.600 --> 00:10:40.080\nI mean, probably could get it to work.\n\n186\n00:10:40.080 --> 00:10:41.270\nThat seems a little weird.\n\n187\n00:10:41.270 --> 00:10:44.630\nNow, I'm starting to go,\nI don't think this is right.\n\n188\n00:10:44.630 --> 00:10:46.185\nI don't think I should be doing this.\n\n189\n00:10:46.185 --> 00:10:50.529\nI don't think I should be using SSH to\nadminister the machine that I'm on.\n\n190\n00:10:50.529 --> 00:10:52.144\n&gt;&gt; That would make sense\n&gt;&gt; Right.\n\n191\n00:10:52.144 --> 00:10:57.812\n&gt;&gt; I mean, you're on the machine, SSH\nis for remote access, not local access.\n\n192\n00:10:57.812 --> 00:11:00.250\nIt just doesn't make\nsense to use that tool.\n\n193\n00:11:00.250 --> 00:11:05.446\n&gt;&gt; Right, so maybe Ansible has\nsome way of getting around this-\n\n194\n00:11:05.446 --> 00:11:07.078\n&gt;&gt; No, they've never thought of that.\n\n195\n00:11:07.078 --> 00:11:07.989\n[LAUGH]\n&gt;&gt; Well,\n\n196\n00:11:07.989 --> 00:11:12.172\nDaniel, I hate to be the bearer\nof bad news but they did.\n\n197\n00:11:12.172 --> 00:11:15.475\n&gt;&gt; [LAUGH]\n&gt;&gt; So there's a few ways to do this.\n\n198\n00:11:15.475 --> 00:11:19.806\nI think the easiest way, inside of\nthe host file, interestingly enough,\n\n199\n00:11:19.806 --> 00:11:24.436\nkind of like Etsy host, we can have other\nthings other than just a list of stuff.\n\n200\n00:11:24.436 --> 00:11:31.750\nYou can say Ansible, you can do by\nconnection, or by host kinda settings.\n\n201\n00:11:31.750 --> 00:11:36.500\nI wouldn't put a lot in here,\nreally worry about the configuration and\n\n202\n00:11:36.500 --> 00:11:37.440\nkeep that around.\n\n203\n00:11:37.440 --> 00:11:41.150\nKeep most of your confirmation\nin the ansible.cfg,\n\n204\n00:11:41.150 --> 00:11:43.870\nthe configuration file, obviously.\n\n205\n00:11:43.870 --> 00:11:46.930\nBut here, I think it makes the most sense.\n\n206\n00:11:46.930 --> 00:11:49.540\nAll of these other ones are SSH access.\n\n207\n00:11:49.540 --> 00:11:53.520\nBy saying ansible connection equals local,\nit goes cool, I won't use SSH.\n\n208\n00:11:53.520 --> 00:12:00.030\nI'll actually use the local system\nto modify this machine if I need to.\n\n209\n00:12:00.030 --> 00:12:02.530\n&gt;&gt; I can see an Ansible\ndeveloper sitting at their desk.\n\n210\n00:12:02.530 --> 00:12:05.380\nThey get done with the ping module and\nthey're like, this is amazing, and\n\n211\n00:12:05.380 --> 00:12:08.940\nsomeone's like, Mm,\nI think there's a problem.\n\n212\n00:12:08.940 --> 00:12:10.596\nNo, no, it's all awesome.\n\n213\n00:12:10.596 --> 00:12:13.445\nWhy dont you go ahead and\nrun that against the local machine?\n\n214\n00:12:13.445 --> 00:12:14.403\nI dont think so.\n\n215\n00:12:14.403 --> 00:12:15.483\n&gt;&gt; Man, man.\n\n216\n00:12:15.483 --> 00:12:17.746\nYeah, so\nthis is one of those problems where,\n\n217\n00:12:17.746 --> 00:12:20.541\nI don't know how this came about but\nI can perceive that.\n\n218\n00:12:20.541 --> 00:12:22.562\nAnd as for a new one, you know what?\n\n219\n00:12:22.562 --> 00:12:24.115\nI'm going home for today.\n\n220\n00:12:24.115 --> 00:12:27.360\n&gt;&gt; [LAUGH]\n&gt;&gt; So, we saw that it failed.\n\n221\n00:12:27.360 --> 00:12:28.600\nLet's see if it works now.\n\n222\n00:12:28.600 --> 00:12:31.848\nLet's see if that developer actually went,\nyou're right, I'm gonna fix that.\n\n223\n00:12:31.848 --> 00:12:37.500\nSo if I re-run ansible or\nall-mp, that is a 0.\n\n224\n00:12:37.500 --> 00:12:41.690\nSo apparently,\nmy hands were on the wrong keys.\n\n225\n00:12:41.690 --> 00:12:45.270\nSo ansible, and\nmake sure you spell ansible correctly.\n\n226\n00:12:45.270 --> 00:12:49.376\nAnsible all-m ping, and\nnow I'm going to run this.\n\n227\n00:12:49.376 --> 00:12:54.900\nAnd look, it actually,\nit did a ping pong on local host.\n\n228\n00:12:54.900 --> 00:12:59.180\nIt didn't talk about public keys,\nno, it's using a local connection.\n\n229\n00:12:59.180 --> 00:13:03.066\nWhat that also means is I can\nscroll up through my history, and\n\n230\n00:13:03.066 --> 00:13:06.748\nI'm doing this for\nkind of a brevity's sake, all right?\n\n231\n00:13:06.748 --> 00:13:10.275\nI'm gonna rerun this apt repository -a.\n\n232\n00:13:10.275 --> 00:13:13.270\nNow we've already run this on nodes one,\ntwo, and three.\n\n233\n00:13:13.270 --> 00:13:15.560\n&gt;&gt; We have.\n&gt;&gt; But I'm going to rerun this.\n\n234\n00:13:15.560 --> 00:13:17.610\n&gt;&gt; Because you're on the local as well.\n\n235\n00:13:17.610 --> 00:13:19.360\n&gt;&gt; I want on the local machine.\n\n236\n00:13:19.360 --> 00:13:21.960\nBut this is really illustrating one\nof the subtle points of Ansible.\n\n237\n00:13:23.290 --> 00:13:25.470\nI'm re-running a command that I'm like,\n\n238\n00:13:25.470 --> 00:13:28.590\nI can't remember if I already\ndid that on those other nodes.\n\n239\n00:13:28.590 --> 00:13:32.250\nI don't care cuz Ansible is doing that for\nme, it's like, hey, I'll check that out.\n\n240\n00:13:32.250 --> 00:13:33.460\nAnd you just see node one, two and\n\n241\n00:13:33.460 --> 00:13:35.250\nthree already come up it's like,\nthat's already done.\n\n242\n00:13:35.250 --> 00:13:39.240\n&gt;&gt; It's like having a subordinate worker\nhe was like, man, I really gotta check all\n\n243\n00:13:39.240 --> 00:13:42.370\nthese servers to make sure that\nthat neither of them is install.\n\n244\n00:13:42.370 --> 00:13:44.720\nHey Bob, you're gonna do that,\nthat's your project for today.\n\n245\n00:13:44.720 --> 00:13:46.010\n&gt;&gt; Yeah.\n&gt;&gt; And he does it for you.\n\n246\n00:13:46.010 --> 00:13:48.235\n&gt;&gt; Yeah, and he's like, well,\nI already did node one, two and\n\n247\n00:13:48.235 --> 00:13:52.810\nthree but I found this one that I didn't,\nand that's actually what's happening now.\n\n248\n00:13:52.810 --> 00:13:56.840\nAnd that's incredibly important,\nthat's a concept of idempotence.\n\n249\n00:13:56.840 --> 00:14:00.950\nIf I rerun the command multiple times,\nI get the same output.\n\n250\n00:14:00.950 --> 00:14:03.585\nNow, there are ways to break idempotence.\n\n251\n00:14:05.380 --> 00:14:07.200\nThat's a big word, I like saying it.\n\n252\n00:14:07.200 --> 00:14:09.230\n&gt;&gt; Potent potables.\n\n253\n00:14:09.230 --> 00:14:10.040\n&gt;&gt; Potent potables.\n\n254\n00:14:10.040 --> 00:14:13.930\nIf I do the same command again and\nagain, I get,\n\n255\n00:14:13.930 --> 00:14:18.030\nit's kind of like I'm not getting\na different result, right?\n\n256\n00:14:19.350 --> 00:14:21.830\nI'm a math person by nature.\n\n257\n00:14:21.830 --> 00:14:22.900\nI get the same return.\n\n258\n00:14:22.900 --> 00:14:27.730\nThree plus three is six,\nalways, not tomorrow three plus\n\n259\n00:14:27.730 --> 00:14:31.690\nthree is eight you're like hold up,\nthat don't make no sense, right?\n\n260\n00:14:31.690 --> 00:14:36.080\nSo idempotence is that concept\nin the terms of computers.\n\n261\n00:14:36.080 --> 00:14:38.580\nNow, this does take a little while.\n\n262\n00:14:38.580 --> 00:14:45.390\nRemember the after repository module is\nupdating the cache while it's doing that.\n\n263\n00:14:45.390 --> 00:14:46.590\nThat's the default behavior.\n\n264\n00:14:46.590 --> 00:14:47.870\nNow, we could turn that\noff to speed it up,\n\n265\n00:14:47.870 --> 00:14:51.360\nbut we're gonna have to update the cache\nbefore we can install, all right?\n\n266\n00:14:51.360 --> 00:14:52.780\nSo this is running.\n\n267\n00:14:54.290 --> 00:15:00.090\nNow, one final thing that I want to\ntalk about while this is running\n\n268\n00:15:00.090 --> 00:15:05.240\nis if we come back,\nlet's look at that alternatives module,\n\n269\n00:15:05.240 --> 00:15:07.660\nI always want to make sure we\ntake look at the documentation.\n\n270\n00:15:07.660 --> 00:15:10.040\n[SOUND] Sometimes, I go to all modules,\n\n271\n00:15:10.040 --> 00:15:14.585\nwhich is the list of modules that we've\nseen before and I can just scroll and\n\n272\n00:15:14.585 --> 00:15:18.680\nscroll, but Ctrl+F or Cmd+F-\n&gt;&gt; [INAUDIBLE] is your friend.\n\n273\n00:15:18.680 --> 00:15:20.270\n&gt;&gt; Alternatives, there it is.\n\n274\n00:15:21.600 --> 00:15:25.150\nAlso want to reiterate apt is things.\n\n275\n00:15:25.150 --> 00:15:31.300\nIf you're on a Red Hat or sent,\nthere is a yum corollary.\n\n276\n00:15:31.300 --> 00:15:35.742\nAll the things that we're doing\nwith apt are also available as yum.\n\n277\n00:15:35.742 --> 00:15:38.413\nI'm not sure about some of\nother ones like Pac-Man and\n\n278\n00:15:38.413 --> 00:15:40.458\nsome of the alternative distributions.\n\n279\n00:15:40.458 --> 00:15:43.621\nI don't interact with those a great\ndeal so it's really hard for\n\n280\n00:15:43.621 --> 00:15:46.530\nme to comment on how\nwell those are supported.\n\n281\n00:15:46.530 --> 00:15:50.540\nBut if we come in to the alternatives, we\nalways get the grid, what are the options?\n\n282\n00:15:50.540 --> 00:15:54.413\nI actually like this action grid,\nso it's like,\n\n283\n00:15:54.413 --> 00:15:58.468\nwell here are the things you\ncan list in that -a portion.\n\n284\n00:15:58.468 --> 00:16:01.140\nLink, no, it's not required.\n\n285\n00:16:01.140 --> 00:16:02.590\nThere is no default.\n\n286\n00:16:02.590 --> 00:16:07.580\nAnd essentially the path is symbolic link\nthat should point to the re-execute.\n\n287\n00:16:07.580 --> 00:16:10.470\nThat's kind of like a look here but\n\n288\n00:16:10.470 --> 00:16:12.720\nthat's actually going to tell you\nto go somewhere else type thing.\n\n289\n00:16:12.720 --> 00:16:15.320\nOkay you do need a name and a path.\n\n290\n00:16:15.320 --> 00:16:16.470\nThat is at the minimum.\n\n291\n00:16:16.470 --> 00:16:20.650\nIf we did not set the priority and this\nis in newer versions 2.2 and above for\n\n292\n00:16:20.650 --> 00:16:21.240\nAnsible.\n\n293\n00:16:22.440 --> 00:16:26.680\nThen the default is 50, all right, so\nit sets the default priority for you.\n\n294\n00:16:26.680 --> 00:16:29.130\nSo in the command we ran we\ndidn't actually need priority,\n\n295\n00:16:29.130 --> 00:16:31.830\nI just wanted to show you that,\nyeah, you can set priorities for\n\n296\n00:16:31.830 --> 00:16:36.160\nthe alternatives, but the name and\nthe path are required.\n\n297\n00:16:36.160 --> 00:16:40.680\nWhen I type blah blah blah\nthis is what I expect and\n\n298\n00:16:40.680 --> 00:16:42.750\nI'm kind of coordinating\nthat with Ansible.\n\n299\n00:16:42.750 --> 00:16:44.750\nBut if I come back, look at that!\n\n300\n00:16:44.750 --> 00:16:47.180\nAs added the PPA, has updated the cache.\n\n301\n00:16:47.180 --> 00:16:53.950\nI should be able to run back through and\nwait for it, wait for it.\n\n302\n00:16:53.950 --> 00:16:57.710\nI should be able to install\nNeo VIM to the latest.\n\n303\n00:16:57.710 --> 00:17:01.020\nAnd again I wanted to reiterate\nthis is taken care of.\n\n304\n00:17:01.020 --> 00:17:03.660\nHey those other three nodes,\nyeah that's already done.\n\n305\n00:17:03.660 --> 00:17:06.810\nI'm only gonna do it for\nthis other one, okay?\n\n306\n00:17:06.810 --> 00:17:10.866\nNow, again,\nthere are times where DAD may break.\n\n307\n00:17:10.866 --> 00:17:15.960\nEspecially, depending on\nthe steps that you take, but\n\n308\n00:17:15.960 --> 00:17:18.169\nit's only doing that for localhost.\n\n309\n00:17:19.420 --> 00:17:23.520\nSo that's all happening here, all right?\n\n310\n00:17:23.520 --> 00:17:29.140\nNow Daniel, it's already installed,\nlet's see, nvim, there we go.\n\n311\n00:17:29.140 --> 00:17:33.940\nAnd I don't think there's any good things\n\n312\n00:17:35.360 --> 00:17:39.910\nthat come from rerunning the update\nalternatives that we've seen, right?\n\n313\n00:17:39.910 --> 00:17:41.140\nThere's no added value there.\n\n314\n00:17:41.140 --> 00:17:44.970\nSo we could rerun update alternatives,\nthe alternatives module and\n\n315\n00:17:44.970 --> 00:17:47.240\nthe exact same thing would happen.\n\n316\n00:17:47.240 --> 00:17:51.950\nBut keep that in mind because\nAnsible is actually gathering facts,\n\n317\n00:17:51.950 --> 00:17:53.770\nit's actually called gathering facts.\n\n318\n00:17:53.770 --> 00:17:57.750\nLet me find out about this node and\nokay that's there, and\n\n319\n00:17:57.750 --> 00:17:59.150\nI've updated the cache this time.\n\n320\n00:17:59.150 --> 00:18:03.010\nAnd yeah I need to upgrade, and this\nis the latest, is there a new version?\n\n321\n00:18:03.010 --> 00:18:05.590\nYeah and it's deciding for you.\n\n322\n00:18:05.590 --> 00:18:10.350\nIt keeps things faster because it only\nmakes changes that needs to occur,\n\n323\n00:18:10.350 --> 00:18:12.340\nthat it determines the need to occur.\n\n324\n00:18:12.340 --> 00:18:15.900\nThere are ways to force\nthat to not be the case.\n\n325\n00:18:15.900 --> 00:18:21.140\nLike I can say, always install, blah.\n\n326\n00:18:21.140 --> 00:18:25.584\nOr always upgrade, even if\nthe upgrade was done 3 minutes ago.\n\n327\n00:18:25.584 --> 00:18:31.380\nI'm talking about apt-get upgrade-y.\n\n328\n00:18:31.380 --> 00:18:34.970\nI recommend not doing that because\nif you keep everything just so,\n\n329\n00:18:34.970 --> 00:18:40.530\nyou're only going to be able to\nsee the things that are occurring\n\n330\n00:18:40.530 --> 00:18:44.200\noutside of the norm and that's gonna\ngive you a little better information,\n\n331\n00:18:44.200 --> 00:18:48.630\nalso it's always going to be faster cuz\nthen it's not well I'm gonna sort or\n\n332\n00:18:48.630 --> 00:18:55.450\nupdate sort of upgrade every time it's\ngonna say, I just did that recently.\n\n333\n00:18:55.450 --> 00:18:56.480\nThere's nothing new.\n\n334\n00:18:56.480 --> 00:18:59.650\nI'm not gonna do it again so I'm gonna\ngo ahead and go to the next step and\n\n335\n00:18:59.650 --> 00:19:03.100\nthat's gonna be expeditious as we're\nadministrating these servers so\n\n336\n00:19:03.100 --> 00:19:03.600\nkeep that in mind.\n\n337\n00:19:03.600 --> 00:19:08.075\n&gt;&gt; And so it's sounds like what you're\nsaying is if speed is the is the thing of\n\n338\n00:19:08.075 --> 00:19:10.540\nthe day,\nyou're gonna definitely want to go with\n\n339\n00:19:10.540 --> 00:19:12.390\ndon't redo these things over and\nover again.\n\n340\n00:19:12.390 --> 00:19:14.260\nOnly do the thing that I need you to do.\n\n341\n00:19:14.260 --> 00:19:18.480\nBut if being thorough is more\nwhat you're worried about,\n\n342\n00:19:18.480 --> 00:19:23.930\nbeing complete, making sure every\nlittle i is dotted and t is crossed.\n\n343\n00:19:23.930 --> 00:19:26.820\nThen you want to go with that more\nthorough option of letting it do its\n\n344\n00:19:26.820 --> 00:19:28.180\ndefaults.\n\n345\n00:19:28.180 --> 00:19:32.770\n&gt;&gt; Right.\nSo I would say never try to break out of\n\n346\n00:19:32.770 --> 00:19:35.380\nthe Ansible model where it's\ngathering facts and making sure.\n\n347\n00:19:35.380 --> 00:19:40.000\nCuz it is gonna be faster but I think\nme personally I think the thoroughness\n\n348\n00:19:40.000 --> 00:19:44.530\ncomes from Ansible checking on\nthose things for you right?\n\n349\n00:19:44.530 --> 00:19:48.860\nIf I were to say Ansible I'm\nforcing you to get apt get update,\n\n350\n00:19:48.860 --> 00:19:52.230\napt get upgrade it's going\nto look like a change.\n\n351\n00:19:52.230 --> 00:19:55.220\nBut all the change is from Ansible's\npoint of view is it's like,\n\n352\n00:19:55.220 --> 00:19:56.950\nokay you told me to run that command.\n\n353\n00:19:56.950 --> 00:19:59.460\nI did.\nI don't know if a system stake changed\n\n354\n00:19:59.460 --> 00:20:00.047\nor not.\n\n355\n00:20:00.047 --> 00:20:04.110\nSo keep Ansible for default.\n\n356\n00:20:04.110 --> 00:20:08.390\nThere are times where I actually\nneed to force this to happen,\n\n357\n00:20:08.390 --> 00:20:09.960\nI know it needs to happen.\n\n358\n00:20:09.960 --> 00:20:11.650\nSo there's those edge cases.\n\n359\n00:20:11.650 --> 00:20:16.540\nBy and large though I'm not gonna talk\nabout those because Ansible should be for\n\n360\n00:20:16.540 --> 00:20:19.620\nentire purposes configuration management.\n\n361\n00:20:19.620 --> 00:20:21.000\nIt is managing these things for\n\n362\n00:20:21.000 --> 00:20:26.780\nyou and just to reiterate we've seen ad\nhoc commands in part one and part two.\n\n363\n00:20:26.780 --> 00:20:29.200\nWe'll see a few more of some common tasks.\n\n364\n00:20:29.200 --> 00:20:34.160\nBut by and large, we're out of\nthat game as much as possible.\n\n365\n00:20:34.160 --> 00:20:37.690\n&gt;&gt; Yeah, let Ansible do its thing, and\njust take your hands off the wheel, and\n\n366\n00:20:37.690 --> 00:20:38.560\ndrive and read a book.\n\n367\n00:20:38.560 --> 00:20:40.760\nIt's the new self-driving car, right?\n\n368\n00:20:40.760 --> 00:20:42.340\nAnd that's what we all like.\n\n369\n00:20:42.340 --> 00:20:44.250\nAutomation, that's why we have computers.\n\n370\n00:20:44.250 --> 00:20:45.630\nLet them do things for\n\n371\n00:20:45.630 --> 00:20:48.650\nus so that we don't have to continue\nto do them over and over again.\n\n372\n00:20:48.650 --> 00:20:49.210\nJustin, thanks for\n\n373\n00:20:49.210 --> 00:20:52.610\nshowing us how we can do installations\nof packages inside of Ansible.\n\n374\n00:20:52.610 --> 00:20:56.980\nVery cool stuff, giving us the quick and\ndirty and the straightforwardness of it.\n\n375\n00:20:56.980 --> 00:21:01.570\nAlso, some things that we might want to be\naware of after performing those actions.\n\n376\n00:21:01.570 --> 00:21:04.270\nFantastic job,\nwe appreciate your time on that.\n\n377\n00:21:04.270 --> 00:21:06.950\nWe also appreciate you good\nfolks out there for watching.\n\n378\n00:21:06.950 --> 00:21:10.240\nBut it does look like we've come to\nthe end of yet another fantastic episode.\n\n379\n00:21:10.240 --> 00:21:11.130\nHopefully you've enjoyed it.\n\n380\n00:21:11.130 --> 00:21:14.290\nBut signing off for DevProTV I've\nbeen your host Daniel Lowrie.\n\n381\n00:21:14.290 --> 00:21:15.170\n&gt;&gt; And I'm Justin Dennison.\n\n382\n00:21:15.170 --> 00:21:16.202\n&gt;&gt; And we'll see you next time.\n\n383\n00:21:16.202 --> 00:21:22.394\n[SOUND]\n\n",
          "vimeoId": "242603214"
        },
        {
          "description": "In this episode, Daniel and Justin start working with users on remote nodes using Ansible. Justin demonstrates creating users, creating groups, and adding users to groups.",
          "length": "1664",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-2-1-managing_users-111017-PGM.00_27_34_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-2-1-managing_users-111017-PGM.00_27_34_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-2-1-managing_users-111017-PGM.00_27_34_25.Still001-sm.jpg",
          "title": "Managing Users",
          "transcript": "",
          "vimeoId": "242602686"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at managing system services. Justin demonstrates how to enable and disable a service as well as start, restart, reload, and stop a services as well as describe the nuanced differences among those actions.",
          "length": "1490",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-3-1-managing_services-112217-PGM.00_27_12_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-3-1-managing_services-112217-PGM.00_27_12_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-3-1-managing_services-112217-PGM.00_27_12_15.Still001-sm.jpg",
          "title": "Managing Services",
          "transcript": "",
          "vimeoId": "244655830"
        },
        {
          "description": "In this episode, Ronnie and Justin dive into more command line commands such as uptime, preparing systems for administration, or querying aspects of a system. Justin highlights the nuances among the raw, command, and shell modules when using each one.",
          "length": "1896",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-4-1-running_commands-113017-PGM.00_32_51_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-4-1-running_commands-113017-PGM.00_32_51_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-2-4-1-running_commands-113017-PGM.00_32_51_29.Still001-sm.jpg",
          "title": "Running Commands",
          "transcript": "",
          "vimeoId": "245434730"
        },
        {
          "description": "In this episode, Ronnie and Justin start creating Ansible playbooks that allow clearer and more reproducible configurations when managing resources with Ansible. Particularly, Justin takes a look some of the basic organization of a playbook based",
          "length": "1421",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-1-1-hosts-113017-PGM.00_23_34_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-1-1-hosts-113017-PGM.00_23_34_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-1-1-hosts-113017-PGM.00_23_34_23.Still001-sm.jpg",
          "title": "Hosts",
          "transcript": "",
          "vimeoId": "245434371"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at creating alist of actions to take when creating a playbook called tasks. Justin further explains how to add tasks as well as considerations when creating a list of tasks.",
          "length": "1528",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-2-1-tasks-120117-PGM.00_26_29_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-2-1-tasks-120117-PGM.00_26_29_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-2-1-tasks-120117-PGM.00_26_29_03.Still001-sm.jpg",
          "title": "Tasks",
          "transcript": "",
          "vimeoId": "245434077"
        },
        {
          "description": "In this episode, Ronnie and Justin continue building out Ansible playbooks using some configuration settings or additional information that is necessary to configure a respective node, otherwise known as variables. Justin demonstrates several ways to provide variables to the Ansible playbook.",
          "length": "1387",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-1-variables-120117-PGM.00_22_59_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-1-variables-120117-PGM.00_22_59_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-1-variables-120117-PGM.00_22_59_00.Still001-sm.jpg",
          "title": "Variables",
          "transcript": "",
          "vimeoId": "245433796"
        },
        {
          "description": "In this episode, Zach and Justin continue building out Ansible playbooks using some configuration settings or additional information that is necessary to configure a respective node, otherwise known as variables. Justin demonstrates the usage of variable files, interactive prompts, and passing variables through the command line interface.",
          "length": "1750",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-2-variables_pt2-120117-PGM.00_29_01_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-2-variables_pt2-120117-PGM.00_29_01_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-3-2-variables_pt2-120117-PGM.00_29_01_16.Still001-sm.jpg",
          "title": "Variables Part 2",
          "transcript": "",
          "vimeoId": "245946321"
        },
        {
          "description": "In this episode, Zach and Justin dive into the use of handlers for reacting to events during the processing of an Ansible playbook. Justin  demonstrates the creation of handlers as a response to tasks throughout the playbook such as installing an application that needs to be started or reloaded because configuration has changed.",
          "length": "1865",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-4-1-handlers-120517-PGM.00_31_44_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-4-1-handlers-120517-PGM.00_31_44_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-4-1-handlers-120517-PGM.00_31_44_08.Still001-sm.jpg",
          "title": "Handlers",
          "transcript": "",
          "vimeoId": "246269926"
        },
        {
          "description": "In this episode, Zach and Justin explore using templated files to configure services that are part of your configuration.  Justin epxlores the use of output of variables as a way to template files for configuration purpose using the basic of the Jinja2 templating language.",
          "length": "1348",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-1-templating-120417.00_22_22_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-1-templating-120417.00_22_22_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-1-templating-120417.00_22_22_10.Still001-sm.jpg",
          "title": "Templating",
          "transcript": "",
          "vimeoId": "245944846"
        },
        {
          "description": "In this episode, Zach and Justin continue their exploration of the Jinja2 templating language as a way to template configurations using Ansible. Specifically, Justin demonstrates the use of iteration, if-else conditions, as well as utilizing the templating tools with different data structures available in Ansible.",
          "length": "1690",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-2-templating_pt_2-120417-PGM.00_28_01_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-2-templating_pt_2-120417-PGM.00_28_01_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-5-2-templating_pt_2-120417-PGM.00_28_01_23.Still001-sm.jpg",
          "title": "Templating Part 2",
          "transcript": "",
          "vimeoId": "246268796"
        },
        {
          "description": "In this episode, Zach and Justin take a look at iteration in the context of a playbook. Justin demonstrates the use of iteration in completing tasks such as installing a set of packages as well as illustrates edge cases when using loops and variables in the context of a playbook.",
          "length": "1320",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-6-1-loops-120517-PGM.00_22_41_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-6-1-loops-120517-PGM.00_22_41_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-6-1-loops-120517-PGM.00_22_41_02.Still001-sm.jpg",
          "title": "Loops",
          "transcript": "",
          "vimeoId": "246268635"
        },
        {
          "description": "In this episode, Cherokee and Justin look at adding some decision making capabilities within an Ansible playbook. Justin demonstrates the use of decisions to apply changes using the when attribute based on conditions of the different nodes (i.e. Debian vs RedHat).",
          "length": "2281",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-7-1-control_flow-120617-PGM.00_51_55_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-7-1-control_flow-120617-PGM.00_51_55_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-3-7-1-control_flow-120617-PGM.00_51_55_27.Still001-sm.jpg",
          "title": "Control Flow",
          "transcript": "",
          "vimeoId": "246325551"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at organization of playbooks into a role based arrangement. Justin explains the use of roles as a way of segmenting the individual pieces of a configuration in order to be reused.",
          "length": "1510",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-1-1-getting_started_with_roles-121217.00_35_28_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-1-1-getting_started_with_roles-121217.00_35_28_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-1-1-getting_started_with_roles-121217.00_35_28_07.Still001-sm.jpg",
          "title": "Getting Started with Roles",
          "transcript": "",
          "vimeoId": "247014882"
        },
        {
          "description": "In this episode, Daniel and Justin explore the creation of tasks using a role based arrangement. Justin further clarifies how Ansible determines what tasks to run when including a role.",
          "length": "1384",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-2-1-roles_and_tasks-121217-PGM.00_23_20_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-2-1-roles_and_tasks-121217-PGM.00_23_20_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-2-1-roles_and_tasks-121217-PGM.00_23_20_00.Still001-sm.jpg",
          "title": "Roles and Tasks",
          "transcript": "",
          "vimeoId": "247017831"
        },
        {
          "description": "In this episode, Daniel and Justin explore the use of handlers when creating roles. Justin demonstrates the use of handlers within a role.",
          "length": "1498",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-4-1-roles_and_handlers-121317-PGM.00_26_34_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-4-1-roles_and_handlers-121317-PGM.00_26_34_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-4-1-roles_and_handlers-121317-PGM.00_26_34_25.Still001-sm.jpg",
          "title": "Roles and Handlers",
          "transcript": "",
          "vimeoId": "247375088"
        },
        {
          "description": "In this episode, Daniel and Justin explore the use of the when statement during the use of roles. Justin illustrates the differences in roles when the individual systems have differing requirements.",
          "length": "1616",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-5-1-roles_and_control_flow-121317-PGM.00_27_58_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-5-1-roles_and_control_flow-121317-PGM.00_27_58_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-5-1-roles_and_control_flow-121317-PGM.00_27_58_10.Still001-sm.jpg",
          "title": "Roles and Control Flow",
          "transcript": "",
          "vimeoId": "247373880"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at using templates with roles. Justin demonstrates the use of templates in roles by templating an NGINX configuration.",
          "length": "1424",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-6-1-roles_and_templating-121517.00_23_37_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-6-1-roles_and_templating-121517.00_23_37_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-6-1-roles_and_templating-121517.00_23_37_27.Still001-sm.jpg",
          "title": "Roles and Templating",
          "transcript": "",
          "vimeoId": "247803475"
        },
        {
          "description": "In this episode, Daniel and Justin  continue seeing their exploration of NGINX using static files. Justin explores the use of files internal to an Ansible role as well as external to the role and provides a comparison between the two approaches.",
          "length": "1697",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-7-1-roles_and_files-121517.00_28_11_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-7-1-roles_and_files-121517.00_28_11_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-4-7-1-roles_and_files-121517.00_28_11_02.Still001-sm.jpg",
          "title": "Roles and Files",
          "transcript": "",
          "vimeoId": "247803668"
        },
        {
          "description": "In this episode, Vonne and Justin review the requirements that have been set forth for a deployment. Justin discusses the thought process for creating a plan for deployment and describes why one should use configuration management\nand version control instead of manual configuration.",
          "length": "1234",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-1-1-requirements_for_static_site_deployment-041218-PGM.00_37_01_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-1-1-requirements_for_static_site_deployment-041218-PGM.00_37_01_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-1-1-requirements_for_static_site_deployment-041218-PGM.00_37_01_09.Still001-sm.jpg",
          "title": "Requirements for Static Site Deployment",
          "transcript": "",
          "vimeoId": "264661705"
        },
        {
          "description": "In this episode, Zach and Justin set up the Ansible project that will manage the static site deployment. Additionally, Justin gets nginx up and running on the server utilizing ansible playbooks.",
          "length": "1693",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-2-1-setting_up_nginx-120817-PGM.00_29_51_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-2-1-setting_up_nginx-120817-PGM.00_29_51_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-2-1-setting_up_nginx-120817-PGM.00_29_51_19.Still001-sm.jpg",
          "title": "Setting Up NGINX",
          "transcript": "",
          "vimeoId": "246844073"
        },
        {
          "description": "In this episode, Daniel and Justin use templating to manage the configuration for serving a site using NGINX.",
          "length": "1404",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-3-1-templating_the_nginx_configuration-121117-PGM.00_23_40_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-3-1-templating_the_nginx_configuration-121117-PGM.00_23_40_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-3-1-templating_the_nginx_configuration-121117-PGM.00_23_40_28.Still001-sm.jpg",
          "title": "Templating the NGINX Configuration",
          "transcript": "",
          "vimeoId": "247017046"
        },
        {
          "description": "In this episode, Daniel and Justin reorganize the previous playbook as a role in order to provide reuse. Justin demonstrates the use of the dynamic aspects of Ansible in order to make a static site deployment tool.",
          "length": "1366",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-4-1-creating_a_static_site_role-121117-PGM.00_22_37_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-4-1-creating_a_static_site_role-121117-PGM.00_22_37_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-5-4-1-creating_a_static_site_role-121117-PGM.00_22_37_07.Still001-sm.jpg",
          "title": "Creating a Static Site Role",
          "transcript": "",
          "vimeoId": "247015835"
        },
        {
          "description": "In this episode, Cherokee and Justin explore the architecture for creating an NFS server and associated clients. Justin diagrams and discusses some of the hidden complexities that can crop up when creating Ansible playbooks.",
          "length": "984",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-1-1-planning_the_nfs_architecture-120617-PGM.00_22_15_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-1-1-planning_the_nfs_architecture-120617-PGM.00_22_15_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-1-1-planning_the_nfs_architecture-120617-PGM.00_22_15_00.Still001-sm.jpg",
          "title": "Planning the NFS Architecture",
          "transcript": "",
          "vimeoId": "246325013"
        },
        {
          "description": "In this episode, Cherokee and Justin create the playbook responsible for creating the NFS server. Additionally, Justin discusses some of the shortcomings of need client information during the configuration of another host.",
          "length": "1958",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-2-1-setting_up_the_nfs_server-120617-PGM.00_33_28_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-2-1-setting_up_the_nfs_server-120617-PGM.00_33_28_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-2-1-setting_up_the_nfs_server-120617-PGM.00_33_28_24.Still001-sm.jpg",
          "title": "Setting up the NFS Server",
          "transcript": "",
          "vimeoId": "268636163"
        },
        {
          "description": "In this episode, Cherokee and Justin create the playbook responsible for creating the NFS clients.",
          "length": "1556",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-3-1-setting_up_the_nfs_clients-120717-PGM.00_28_30_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-3-1-setting_up_the_nfs_clients-120717-PGM.00_28_30_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-3-1-setting_up_the_nfs_clients-120717-PGM.00_28_30_11.Still001-sm.jpg",
          "title": "Setting up the NFS Clients",
          "transcript": "",
          "vimeoId": "246492976"
        },
        {
          "description": "In this episode, Cherokee and Justin revisit the playbook that set up the nfs server in order to extract that into a role based solution. Justin demonstrates the picking apart of the originally created playbook to create the nfs-server role.",
          "length": "1300",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-4-1-restructuring_to_roles_server-120717-PGM.00_32_20_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-4-1-restructuring_to_roles_server-120717-PGM.00_32_20_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-4-1-restructuring_to_roles_server-120717-PGM.00_32_20_17.Still001-sm.jpg",
          "title": "Restructuring to Roles: Server",
          "transcript": "",
          "vimeoId": "246457689"
        },
        {
          "description": "In this episode, Cherokee and Justin revisit the nfs client playbook in order to extract that playbook into a role based solution.",
          "length": "979",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-5-1-restructuring_to_roles_clients-120717.00_16_11_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-5-1-restructuring_to_roles_clients-120717.00_16_11_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtoansible/techskills-introtoansible-6-5-1-restructuring_to_roles_clients-120717.00_16_11_28.Still001-sm.jpg",
          "title": "Restructuring to Roles: Clients",
          "transcript": "",
          "vimeoId": "246458567"
        }
      ],
      "title": "Fundamentals"
    }
  ],
  "url": "introansible",
  "vLab": false
}
