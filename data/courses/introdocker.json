{
  "description": "Docker is a set of tools that provide a runtime for creating, managing and orchestrating containers. Docker provides the ability for developers, system admins, or hobbyists to provision a container that can be configured as similarly to a virtual machine without all of the resource intensity. This series introduces the usage of the Docker client to run containers, managing the Docker daemon, using Docker Machine for provisioning runtime environments for the Docker toolset, Docker Compose for orchestrating and managing multi-container applications, as well as Docker Swarm for distributing those containers across multiple nodes in a cluster of machines. Stay tuned to get started with Docker!",
  "descriptionMD": "Docker is a set of tools that provide a runtime for creating, managing and orchestrating containers. Docker provides the ability for developers, system admins, or hobbyists to provision a container that can be configured as similarly to a virtual machine without all of the resource intensity. This series introduces the usage of the Docker client to run containers, managing the Docker daemon, using Docker Machine for provisioning runtime environments for the Docker toolset, Docker Compose for orchestrating and managing multi-container applications, as well as Docker Swarm for distributing those containers across multiple nodes in a cluster of machines. Stay tuned to get started with Docker!",
  "length": "34745",
  "name": "Intro to Docker",
  "practiceExam": false,
  "subtitle": "Getting down with Docker",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin give a general overview of what to expect in the upcoming Intro to Docker series. They cover topics like who is the intended audience, what the scope of the series will cover, and what are some specific topics that will be addressed.",
          "length": "258",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-0-0-overview-040717-PGM.00_04_13_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-0-0-overview-040717-PGM.00_04_13_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-0-0-overview-040717-PGM.00_04_13_06.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.132\n[SOUND].\n\n2\n00:00:02.132 --> 00:00:06.022\nIn this segment we're gonna take\na quick look at what you can expect\n\n3\n00:00:06.022 --> 00:00:09.480\nfrom our upcoming Introduction\nto Docker series.\n\n4\n00:00:09.480 --> 00:00:12.914\nJustin, could you do us\nthe immense favor of giving us at\n\n5\n00:00:12.914 --> 00:00:16.358\nleast a general overview of\nwhat we can look forward to?\n\n6\n00:00:16.358 --> 00:00:19.341\n&gt;&gt; So Docker is a new tool on\nthe scene that has made, well,\n\n7\n00:00:19.341 --> 00:00:23.471\nprovisioning these environments that\nwe need to use reproducibly, over and\n\n8\n00:00:23.471 --> 00:00:24.630\nover and over again.\n\n9\n00:00:24.630 --> 00:00:29.390\nWhether it be Red Hat, Linux,\nand it is standardized to Linux,\n\n10\n00:00:29.390 --> 00:00:34.020\nbut also applications contained\nwithin those environments.\n\n11\n00:00:34.020 --> 00:00:38.050\nIt just makes it really easy,\nmakes it fast, makes it reproducible, and\n\n12\n00:00:38.050 --> 00:00:41.890\nhas an entire tool set that allows us\nto manage all of those differences\n\n13\n00:00:41.890 --> 00:00:42.819\n&gt;&gt; Excellent,\n\n14\n00:00:42.819 --> 00:00:47.350\nnow obviously this is a type\nof cloud service I do believe.\n\n15\n00:00:47.350 --> 00:00:51.107\nAnd we're gonna have different people\nwanting to come in take a look at,\n\n16\n00:00:51.107 --> 00:00:54.534\nDocker that's very interesting, maybe\nthat's applicable for what I'm doing.\n\n17\n00:00:54.534 --> 00:00:58.019\nWhich lends us to the question of\nwho is the intended audience for\n\n18\n00:00:58.019 --> 00:01:00.932\nthis because it can't cover a wide scope,\ncorrect?\n\n19\n00:01:00.932 --> 00:01:04.930\n&gt;&gt; So the intended audience,\nlet me back up just for a moment.\n\n20\n00:01:04.930 --> 00:01:07.007\nThere are cloud components and\nit is used for\n\n21\n00:01:07.007 --> 00:01:09.655\nprovisioning cloud services\nthat's kind of the push.\n\n22\n00:01:09.655 --> 00:01:13.330\nBut the actual Docker tool will\nreside on your local machines.\n\n23\n00:01:13.330 --> 00:01:16.440\nso there's kind of a playoff there.\n\n24\n00:01:16.440 --> 00:01:20.270\nNow, as far as intended audience,\nthere is an assumption that you have basic\n\n25\n00:01:20.270 --> 00:01:24.840\nknowledge of Bash or\ncommand line type interactions, and\n\n26\n00:01:24.840 --> 00:01:28.070\nmost of our focus will be\nin a Bash-like environment.\n\n27\n00:01:28.070 --> 00:01:29.990\nAnd being able to install,\n\n28\n00:01:29.990 --> 00:01:35.050\ndownload, and some understanding of\nbasic Operating System configuration.\n\n29\n00:01:35.050 --> 00:01:39.572\nBecause that's the entire purpose of\ndockers, creating what's called a docker\n\n30\n00:01:39.572 --> 00:01:43.962\nimage that will then spin up containers\nthat behave like very light weight VMs,\n\n31\n00:01:43.962 --> 00:01:46.274\ninstead of provisioning full scale VMs.\n\n32\n00:01:46.274 --> 00:01:49.863\nSo, you need to have a little\nbit of experience there,\n\n33\n00:01:49.863 --> 00:01:54.790\nas far as Linux understanding and\ncommand line understanding.\n\n34\n00:01:54.790 --> 00:01:56.200\nBut that's about it.\n\n35\n00:01:56.200 --> 00:01:59.150\n&gt;&gt; All right,\nwell I guess that lands us to\n\n36\n00:01:59.150 --> 00:02:01.440\nwhat are some of the specific\ntopics that we'll cover.\n\n37\n00:02:01.440 --> 00:02:05.030\nJust give our good audience\nthere a taste of what's to come.\n\n38\n00:02:05.030 --> 00:02:07.350\n&gt;&gt; Well a taste, it does vary.\n\n39\n00:02:07.350 --> 00:02:10.760\nAnd sadly, Docker is one of those\nthings where like this is pretty easy,\n\n40\n00:02:10.760 --> 00:02:15.290\nthis is pretty easy, and then it can\nreally crank up at certain points.\n\n41\n00:02:15.290 --> 00:02:16.470\nSo what are we gonna cover?\n\n42\n00:02:16.470 --> 00:02:18.550\nWell, how do I run a container?\n\n43\n00:02:18.550 --> 00:02:20.850\nAnd this is assuming I've all\nready got Docker installed.\n\n44\n00:02:20.850 --> 00:02:24.720\nWe're actually gonna talk about installing\nDocker on all three major Operation System\n\n45\n00:02:24.720 --> 00:02:29.680\nenvironments, which has gotten a great\ndeal easier in the recent times.\n\n46\n00:02:29.680 --> 00:02:31.160\nBut how do I run a container?\n\n47\n00:02:31.160 --> 00:02:32.430\nHow do I get an image?\n\n48\n00:02:32.430 --> 00:02:33.280\nWhat is an image?\n\n49\n00:02:33.280 --> 00:02:35.450\nAnd how is that related to a container?\n\n50\n00:02:35.450 --> 00:02:38.310\nHow can I build a custom image?\n\n51\n00:02:38.310 --> 00:02:40.850\nWhen I build a custom image,\nhow do I distribute that?\n\n52\n00:02:40.850 --> 00:02:43.270\nIf I want to deploy to a cloud service, or\n\n53\n00:02:43.270 --> 00:02:46.620\nI want to save it somewhere,\nwhat do I do then?\n\n54\n00:02:46.620 --> 00:02:53.296\nHow can I use this to make very large\nkind of architectural decisions?\n\n55\n00:02:53.296 --> 00:02:58.202\nI focus mostly on application development,\nbecause well, that's what I do.\n\n56\n00:02:58.202 --> 00:03:02.557\nBut there are other use cases, and then we\ntake a look at some of the more advanced\n\n57\n00:03:02.557 --> 00:03:05.400\ntools, such as machine compose and swarm.\n\n58\n00:03:05.400 --> 00:03:09.830\nThen, they add on to the standard\ndocker tool set to allow for\n\n59\n00:03:09.830 --> 00:03:12.620\na really scaling up and out.\n\n60\n00:03:12.620 --> 00:03:13.520\n&gt;&gt; Awesome stuff.\n\n61\n00:03:13.520 --> 00:03:17.670\nNow a lot of the series that we do here at\nITProTV lend themselves to either being\n\n62\n00:03:17.670 --> 00:03:22.390\na technical skill, or a certification,\nor exam-based type of series.\n\n63\n00:03:22.390 --> 00:03:24.810\nWhich one of those categories\nwould you say this falls under?\n\n64\n00:03:24.810 --> 00:03:26.890\n&gt;&gt; So\nthis is definitely a technical skill.\n\n65\n00:03:26.890 --> 00:03:30.340\nThis is for someone who wants to know,\nwell I know a little bit about computers.\n\n66\n00:03:30.340 --> 00:03:34.690\nI've been diving into some development,\nor even infrastructure management right?\n\n67\n00:03:34.690 --> 00:03:36.660\nMaybe you're working with developers and\n\n68\n00:03:36.660 --> 00:03:40.300\nthey're like hey, I need this, maybe this\nis something you can pass off to them.\n\n69\n00:03:40.300 --> 00:03:43.070\nHey, if you need to simulate\nan Ubuntu environment for\n\n70\n00:03:43.070 --> 00:03:46.160\nyour application to run in,\nhere's how you get this set up.\n\n71\n00:03:46.160 --> 00:03:50.930\nIt is definitely just about learning\nthe basics there, getting things up and\n\n72\n00:03:50.930 --> 00:03:54.610\nrunning and\nnot about obtaining a certification.\n\n73\n00:03:54.610 --> 00:03:58.935\nWe do not cover the entire\nbreadth of the Docker ecosphere.\n\n74\n00:03:58.935 --> 00:04:00.810\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n75\n00:04:00.810 --> 00:04:03.290\ndefinitely, just an introduction there.\n\n76\n00:04:03.290 --> 00:04:05.050\n&gt;&gt; All right,\nwell Justin that sounds awesome.\n\n77\n00:04:05.050 --> 00:04:07.360\nWe do appreciate your input on this topic.\n\n78\n00:04:07.360 --> 00:04:08.360\nWe appreciate you guys.\n\n79\n00:04:08.360 --> 00:04:10.990\nHopefully if it sounds like\nsomething you're interested in,\n\n80\n00:04:10.990 --> 00:04:13.050\nwe'll see you in the upcoming series.\n\n81\n00:04:13.050 --> 00:04:17.789\n[SOUND]\n\n",
          "vimeoId": "213142663"
        },
        {
          "description": "In this episode, Ronnie and Justin introduce the concepts and ideas surrounding Docker.  They discuss the  benefits of the technology and Justin gives a real world scenario as to when you might use it and the basics of how it works.",
          "length": "1369",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-1-1-what_is_docker-032117.00_24_16_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-1-1-what_is_docker-032117.00_24_16_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-1-1-what_is_docker-032117.00_24_16_02.Still001-sm.jpg",
          "title": "What is Docker",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.277\nWelcome to ITProTV.\n\n2\n00:00:01.277 --> 00:00:02.913\nI'm your host Don Pezet.\n\n3\n00:00:02.913 --> 00:00:06.323\n[CROSSTALK]\n\n4\n00:00:06.323 --> 00:00:08.261\n[MUSIC]\n\n5\n00:00:08.261 --> 00:00:12.774\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.774 --> 00:00:16.170\n&gt;&gt; Welcome to another great\nepisode right here on ITProTV.\n\n7\n00:00:16.170 --> 00:00:20.565\nI'm your host Ronnie Wong, and today\nyou're watching Introduction to Docker.\n\n8\n00:00:20.565 --> 00:00:23.548\nWe're here to make sure that you\nhave a good solid understanding of\n\n9\n00:00:23.548 --> 00:00:24.302\nwhat Docker is.\n\n10\n00:00:24.302 --> 00:00:28.850\nAnd here to help us out is gonna be our\nsubject matter expert Mr. Justin Dennison.\n\n11\n00:00:28.850 --> 00:00:31.490\nJustin welcome back to\nthe ITProTV studios.\n\n12\n00:00:31.490 --> 00:00:32.390\nHow are you doing today?\n\n13\n00:00:32.390 --> 00:00:34.348\n&gt;&gt; I am doing well Ronnie,\nI'm excited to be back here.\n\n14\n00:00:34.348 --> 00:00:35.174\nHow are you today?\n\n15\n00:00:35.174 --> 00:00:38.116\n&gt;&gt; I am doing okay and\nready to get started.\n\n16\n00:00:38.116 --> 00:00:42.012\nBecause we're taking a look\nat the idea of Docker.\n\n17\n00:00:42.012 --> 00:00:43.348\nAnd so let's go ahead and\n\n18\n00:00:43.348 --> 00:00:47.365\nmake sure that everybody understands\nof course right away what is Docker?\n\n19\n00:00:47.365 --> 00:00:50.534\nSo Justin,\nwe hear terms thrown around all the time.\n\n20\n00:00:50.534 --> 00:00:53.976\nAnd one of those terms that keeps\npopping up more and more is Docker.\n\n21\n00:00:53.976 --> 00:00:57.210\nAnd I hear it in conversations almost\ndaily around the office because we do work\n\n22\n00:00:57.210 --> 00:00:58.450\nwith developers.\n\n23\n00:00:58.450 --> 00:01:01.870\nBut let's say that I don't really\nknow what it is but I'm like, yeah.\n\n24\n00:01:01.870 --> 00:01:04.040\nI'm still gonna roll with it,\nbut so, help us out here.\n\n25\n00:01:04.040 --> 00:01:05.050\nWhy won't we take a look at it?\n\n26\n00:01:05.050 --> 00:01:07.698\n&gt;&gt; All right, Ronnie,\nwell first off, I wanna say,\n\n27\n00:01:07.698 --> 00:01:11.430\nwe're gonna start it at a very high\nlevel and a very abstract way.\n\n28\n00:01:11.430 --> 00:01:13.920\nNot down in the nitty gritty details.\n\n29\n00:01:13.920 --> 00:01:17.499\nMaybe a little bit of history and\njust in general what is Docker?\n\n30\n00:01:17.499 --> 00:01:20.958\nI think we'll see more of that come\nto fruition in future episodes.\n\n31\n00:01:20.958 --> 00:01:23.420\nHow does this work,\nhow does this actually run?\n\n32\n00:01:23.420 --> 00:01:25.810\nBut you ask a very great question.\n\n33\n00:01:25.810 --> 00:01:26.680\nWhat is Docker?\n\n34\n00:01:26.680 --> 00:01:27.590\nIn fact, it was so\n\n35\n00:01:27.590 --> 00:01:31.535\ngreat of a question that it's\nmagically here on my screen, Ronnie.\n\n36\n00:01:31.535 --> 00:01:33.170\n&gt;&gt; [LAUGH]\n&gt;&gt; What is Docker?\n\n37\n00:01:33.170 --> 00:01:36.510\nAnd I think the best thing to do is well,\n\n38\n00:01:37.650 --> 00:01:41.100\nyou hear that it's a container system,\ncontainer runtime.\n\n39\n00:01:41.100 --> 00:01:42.470\nWhat is a container?\n\n40\n00:01:42.470 --> 00:01:46.340\nAnd I like to think of a container\nas this abstraction, right?\n\n41\n00:01:46.340 --> 00:01:49.130\nWe've used virtual machines,\nI know you've used virtual machines.\n\n42\n00:01:49.130 --> 00:01:53.490\nI've used virtual box and things of that\nnature during my development workflow\n\n43\n00:01:53.490 --> 00:01:55.550\nto get an environment up and running.\n\n44\n00:01:55.550 --> 00:01:59.610\nMaybe I didn't have it accessible to me,\nand I needed a particular environment.\n\n45\n00:01:59.610 --> 00:02:03.100\nBut it takes a while,\nit's actually a virtualization,\n\n46\n00:02:03.100 --> 00:02:05.364\nyou have the virtualization layer.\n\n47\n00:02:05.364 --> 00:02:07.332\nBut then in Docker, you have a container.\n\n48\n00:02:07.332 --> 00:02:10.812\nAnd the whole goal is to segment,\nsegregate but\n\n49\n00:02:10.812 --> 00:02:14.381\nprovide a similar run time\nas a virtual machine.\n\n50\n00:02:14.381 --> 00:02:20.233\nBut it's a little special,\nthat's It's pretty easy to get up and\n\n51\n00:02:20.233 --> 00:02:23.275\nrunning once we get it installed.\n\n52\n00:02:23.275 --> 00:02:26.130\nBut it doesn't take as much\nwork as a virtual machine.\n\n53\n00:02:26.130 --> 00:02:27.480\n&gt;&gt; Justin, you make a very good point,\n\n54\n00:02:27.480 --> 00:02:29.740\nespecially about the virtual\nmachine environment.\n\n55\n00:02:29.740 --> 00:02:33.388\nIf you're not used to the virtual machine\nenvironment, it doesn't really make sense.\n\n56\n00:02:33.388 --> 00:02:35.439\nBut in a virtual machine environment,\nyou are.\n\n57\n00:02:35.439 --> 00:02:39.350\nIf you need a server to get set up,\nlet's say a Server 2012 machine,\n\n58\n00:02:39.350 --> 00:02:41.930\nyou have to get your\nvirtualization platform.\n\n59\n00:02:41.930 --> 00:02:46.790\nThen, you have to get the software\ninstall, right, the ISO that you need.\n\n60\n00:02:46.790 --> 00:02:49.390\nAnd then install that, and\nthen once you get that there\n\n61\n00:02:49.390 --> 00:02:52.520\nto the point where you need it,\nyou still have to do some configuration.\n\n62\n00:02:52.520 --> 00:02:56.669\nThere's a lot to be done, even when you\nhave your virtualization environment up.\n\n63\n00:02:56.669 --> 00:03:00.636\nAnd depending on what you're running it\non, you might find yourself in that point\n\n64\n00:03:00.636 --> 00:03:02.889\nwhere it's so\nintensive at what it's doing.\n\n65\n00:03:02.889 --> 00:03:05.389\nThat it bogs down your machine as well.\n\n66\n00:03:05.389 --> 00:03:07.522\nSo taking a look at the idea of Docker.\n\n67\n00:03:07.522 --> 00:03:09.830\nAnd you're saying it segments\nit a little bit more.\n\n68\n00:03:09.830 --> 00:03:12.932\nAnd may actually be much more helpful\nin the environment that we're going\n\n69\n00:03:12.932 --> 00:03:13.890\nto be using.\n\n70\n00:03:13.890 --> 00:03:18.640\nSo Justin why in the world would we\ncare about getting this here and\n\n71\n00:03:18.640 --> 00:03:19.550\nwhere did it actually start?\n\n72\n00:03:19.550 --> 00:03:23.900\n&gt;&gt; So Ronnie I'm going to speak\nfrom a developer point of view.\n\n73\n00:03:23.900 --> 00:03:26.470\nI know I use it in my\ndevelopment processes.\n\n74\n00:03:26.470 --> 00:03:28.740\nIt makes my life very easy.\n\n75\n00:03:28.740 --> 00:03:32.390\nLet's say that I'm developing on my Mac,\nright?\n\n76\n00:03:32.390 --> 00:03:35.730\nAnd I need, for some reason,\na particular package or\n\n77\n00:03:35.730 --> 00:03:39.980\nI know I'm going to be setting up\nthis web application on a Linux box.\n\n78\n00:03:39.980 --> 00:03:44.730\nNow I could provision a virtual machine\nthat's running some flavor of Linux,\n\n79\n00:03:44.730 --> 00:03:49.500\nwhether it be CentOS or Ubuntu or\nsomething of that nature.\n\n80\n00:03:49.500 --> 00:03:52.336\nBut, as you said,\nconfiguration takes a lot.\n\n81\n00:03:52.336 --> 00:03:55.098\nAlso, when I set up\nthese virtual machines,\n\n82\n00:03:55.098 --> 00:03:58.893\nwhat I found is I had to rerun\nthat configuration all the time.\n\n83\n00:03:58.893 --> 00:04:02.870\nEven if when I finally got it dialed in,\nit took a little while, right?\n\n84\n00:04:02.870 --> 00:04:07.014\nI got it dialed in, but then all I\nhad were those configuration files,\n\n85\n00:04:07.014 --> 00:04:10.678\nusing some kind of puppet or\nchef, or even just bash scripts.\n\n86\n00:04:10.678 --> 00:04:14.060\nAnd it still took a long while\nto get that up and running.\n\n87\n00:04:14.060 --> 00:04:16.290\nSo what I found in my\ndevelopment workflow,\n\n88\n00:04:16.290 --> 00:04:21.910\nis I could pre-build all of these\nDocker things, these docker containers.\n\n89\n00:04:21.910 --> 00:04:24.500\nAnd save those,\nwith that exact configuration.\n\n90\n00:04:24.500 --> 00:04:29.650\nLet's say I needed Apache to serve up\nsome static HTML files JavaScript.\n\n91\n00:04:29.650 --> 00:04:34.540\nThen I can build an Apache Docker\ncontainer that works for me.\n\n92\n00:04:34.540 --> 00:04:36.450\nAnd it's, boom, it's real quick.\n\n93\n00:04:36.450 --> 00:04:38.930\nNow, I'm speaking from\na developer point of view.\n\n94\n00:04:38.930 --> 00:04:43.830\nIt also provides easy ways to spin\nup a lot of containers, right?\n\n95\n00:04:43.830 --> 00:04:47.040\nInstead of having,\nI need to spin up this virtual machine and\n\n96\n00:04:47.040 --> 00:04:50.060\nI need another virtual machine and\nI need them to talk to each other.\n\n97\n00:04:50.060 --> 00:04:53.367\nI'm no expert in networking, Ronnie.\n\n98\n00:04:53.367 --> 00:04:54.500\nI know enough to get by.\n\n99\n00:04:54.500 --> 00:04:58.601\nBut with Docker there are tools that\nprovide the ability to link those two,\n\n100\n00:04:58.601 --> 00:05:01.349\nlet's say,\ntwo separate containers together.\n\n101\n00:05:01.349 --> 00:05:06.318\nAnd that's really powerful,\nespecially with the advent of big data and\n\n102\n00:05:06.318 --> 00:05:10.076\nthese multi container, or\nmulti node applications.\n\n103\n00:05:10.076 --> 00:05:13.553\nThat are distributed, not only just\nnecessarily on a single machine but\n\n104\n00:05:13.553 --> 00:05:15.120\non multiple machines.\n\n105\n00:05:15.120 --> 00:05:17.911\nSo it's bringing some\npower to the developer.\n\n106\n00:05:17.911 --> 00:05:22.003\nBut what I also like, and\nwhat I've heard is it's removing some fo\n\n107\n00:05:22.003 --> 00:05:25.894\nthe responsibility for\nthe IT professionals like sys admins.\n\n108\n00:05:25.894 --> 00:05:32.520\nWhere, hey, I really need you to provision\nan Ubuntu machine so I can do this thing.\n\n109\n00:05:32.520 --> 00:05:34.270\nIs typically how the interchange went.\n\n110\n00:05:34.270 --> 00:05:37.520\nYou had to wait for it depending on your\ncompany and it just took a while and\n\n111\n00:05:37.520 --> 00:05:39.590\nit really slowed down\nthe development process.\n\n112\n00:05:39.590 --> 00:05:44.180\nAnd for\nme I was kind of hesitant to innovate or\n\n113\n00:05:44.180 --> 00:05:47.460\ntry things so it bogged me down.\n\n114\n00:05:47.460 --> 00:05:53.220\nBut now with Docker I can pretty much try\nany incarnation of things that I want.\n\n115\n00:05:53.220 --> 00:05:56.530\nGet it up and\nrunning fairly quickly in comparison.\n\n116\n00:05:56.530 --> 00:05:59.750\nI still have that configuration\nthat I may have to do but\n\n117\n00:05:59.750 --> 00:06:01.780\nit helped me get started quicker.\n\n118\n00:06:01.780 --> 00:06:06.097\nAlso it freed up my IT professionals\nto actually focus on things that were\n\n119\n00:06:06.097 --> 00:06:08.806\nimportant to either\nthe business we were in.\n\n120\n00:06:08.806 --> 00:06:11.527\nOr something that they needed\nto get done themselves.\n\n121\n00:06:11.527 --> 00:06:14.925\nSuch as managing networks,\nmanaging user accounts.\n\n122\n00:06:14.925 --> 00:06:19.507\nAlso managing possibly physical\nservers on premises without\n\n123\n00:06:19.507 --> 00:06:22.420\nhaving to get requests for update.\n\n124\n00:06:22.420 --> 00:06:24.630\nNow, where did Docker come from?\n\n125\n00:06:24.630 --> 00:06:29.950\nIt's kind of rooted in some ideas\nif you've ever messed with BSD,\n\n126\n00:06:29.950 --> 00:06:32.590\nBSD gels, jails.\n\n127\n00:06:32.590 --> 00:06:33.980\nWow I messed that word up Ronnie.\n\n128\n00:06:35.160 --> 00:06:40.190\nBeing able to segment and segregate\nthese individual pieces and then okay.\n\n129\n00:06:40.190 --> 00:06:42.260\nWe're gonna treat these\nlike different things.\n\n130\n00:06:43.290 --> 00:06:46.860\nWell it's not a full virtual machine,\nit actually runs on OS layer.\n\n131\n00:06:46.860 --> 00:06:52.480\nAnd it's there,\nI'm poorly pronouncing it CH root or\n\n132\n00:06:52.480 --> 00:06:55.350\nor I've heard it pronounced\na couple of different ways.\n\n133\n00:06:55.350 --> 00:06:57.190\nThat's a similar idea to Docker.\n\n134\n00:06:57.190 --> 00:07:00.028\nThere were also Linux Containers, or LXC.\n\n135\n00:07:00.028 --> 00:07:04.454\nAnd believe it or not, Docker kind\nof started with that technology.\n\n136\n00:07:04.454 --> 00:07:07.853\nAnd started in a company\ncalled Docker Cloud.\n\n137\n00:07:07.853 --> 00:07:11.975\nAnd the whole goal was it was\na proprietary set of tools.\n\n138\n00:07:11.975 --> 00:07:15.290\nTo help people provision workspaces and\n\n139\n00:07:15.290 --> 00:07:19.000\nvarious things in a cloud\nlike environment.\n\n140\n00:07:19.000 --> 00:07:21.633\nSome distributed off premises environment.\n\n141\n00:07:21.633 --> 00:07:23.215\nThat didn't quite work out.\n\n142\n00:07:23.215 --> 00:07:25.741\nAnd it was released to the open source and\n\n143\n00:07:25.741 --> 00:07:29.542\nhas since moved away from\nstrictly being Linux containers.\n\n144\n00:07:29.542 --> 00:07:33.040\nAnd opened up into a variety of spaces.\n\n145\n00:07:33.040 --> 00:07:36.411\n&gt;&gt; All right, so Justin me not being\non the development side here and\n\n146\n00:07:36.411 --> 00:07:39.183\nyou're going to address it\nin terms of development.\n\n147\n00:07:39.183 --> 00:07:44.041\nCan you just give us a possibility\nof a real world scenario.\n\n148\n00:07:44.041 --> 00:07:48.938\nOn where you have actually created\nDocker and how that actually helped you?\n\n149\n00:07:48.938 --> 00:07:53.274\nI understand the idea of separation but\none thing I'm not getting right away is,\n\n150\n00:07:53.274 --> 00:07:56.734\nwhy is it important that it's\nseparate on these little things?\n\n151\n00:07:56.734 --> 00:07:58.265\nIs it just a performance thing?\n\n152\n00:07:58.265 --> 00:08:01.417\nBut if you'll give us a rule or\nan example, that might kind of set in.\n\n153\n00:08:01.417 --> 00:08:03.019\nLike as you were doing something,\n\n154\n00:08:03.019 --> 00:08:05.460\nhere's where I realized\nthat it really did help me.\n\n155\n00:08:05.460 --> 00:08:08.865\n&gt;&gt; All right, so a perfect example\nis periodically I'll build\n\n156\n00:08:08.865 --> 00:08:11.570\nweb applications that may use a database.\n\n157\n00:08:11.570 --> 00:08:12.910\nMaybe some kind of caching layer.\n\n158\n00:08:12.910 --> 00:08:17.330\nAnd let's say for instance,\nin this instance it's MongoDB.\n\n159\n00:08:17.330 --> 00:08:21.170\nI can actually spin up MongoDB in\na separate Docker container and\n\n160\n00:08:21.170 --> 00:08:23.810\ntreat it like a separate DB instance\n\n161\n00:08:23.810 --> 00:08:26.510\nlike I would somewhere where I'm\nprovisioning a virtual machine.\n\n162\n00:08:26.510 --> 00:08:31.800\nI can also spin up let's say the caching\nlayer is Redis for quick recall.\n\n163\n00:08:31.800 --> 00:08:36.170\nI can spin that up and\nthen I can actually spin up a server and\n\n164\n00:08:36.170 --> 00:08:37.580\nhave those linked together.\n\n165\n00:08:37.580 --> 00:08:39.750\nAnd I can treat them,\neven though they're on my machine,\n\n166\n00:08:39.750 --> 00:08:45.070\nI can treat them as separate nodes and\nmake sure that my development work flow\n\n167\n00:08:45.070 --> 00:08:48.840\nkind of mirrors what would\nhappen in real life.\n\n168\n00:08:48.840 --> 00:08:50.440\nSo I don't have any unexpected things.\n\n169\n00:08:50.440 --> 00:08:55.220\nI know, for instance,\nI've tried early on I would try to set up\n\n170\n00:08:55.220 --> 00:08:59.780\neverything natively on my one machine,\nand then we ended up with that what\n\n171\n00:08:59.780 --> 00:09:04.240\nworks on my machine stamp, and\nit didn't work in production.\n\n172\n00:09:04.240 --> 00:09:07.290\nIn addition, too, when you have\nseparate containers like that,\n\n173\n00:09:07.290 --> 00:09:11.470\nyou can easily follow what's known as\nlike a single responsibility principle.\n\n174\n00:09:11.470 --> 00:09:15.250\nThis one Docker container\nis my Mongo instance.\n\n175\n00:09:15.250 --> 00:09:18.200\nThis Docker container\nis my Redis instance.\n\n176\n00:09:18.200 --> 00:09:20.850\nThis Docker container is my,\nlet's say Apache or\n\n177\n00:09:20.850 --> 00:09:23.770\nnginX, serving up my web application.\n\n178\n00:09:23.770 --> 00:09:28.950\nAnd then now, when certain layers break,\nI don't have to go, well this Docker\n\n179\n00:09:28.950 --> 00:09:34.816\ncontainer, or my computer has 30 things\nrunning, I wonder what actually broke.\n\n180\n00:09:34.816 --> 00:09:38.139\nIt's easier to debug,\nit's easier to restart.\n\n181\n00:09:38.139 --> 00:09:44.150\nAnd also I don't have to have as\nmuch kind of oomph on my computer\n\n182\n00:09:44.150 --> 00:09:48.070\nbecause they're very lightweight in\ncomparison to full-blown virtual machines.\n\n183\n00:09:48.070 --> 00:09:52.990\nSo hopefully that clarifies why I\nwould want to quickly spin up and\n\n184\n00:09:52.990 --> 00:09:57.390\nget rid of, and mirror what I would\nactually expect when I'm deploying\n\n185\n00:09:57.390 --> 00:09:59.280\nsome large scale application.\n\n186\n00:09:59.280 --> 00:10:03.260\n&gt;&gt; Yeah, I think the key for me in how you\ndescribed it, was the very fact that I\n\n187\n00:10:03.260 --> 00:10:06.890\ncan almost mirror the environment\nthat I think we're going to require.\n\n188\n00:10:06.890 --> 00:10:09.630\nIf somebody has where we're\ngonna have the separate Redis,\n\n189\n00:10:09.630 --> 00:10:14.840\nwe're gonna have the separate Mongo\ndatabase that even though I might go, I\n\n190\n00:10:14.840 --> 00:10:18.370\ncan run everything on one machine, that's\nnot really producing that same mirror.\n\n191\n00:10:18.370 --> 00:10:22.210\nBut by doing this, we're almost\nmimicking exactly what we need to do.\n\n192\n00:10:22.210 --> 00:10:24.360\nAnd so, we make the connections that way.\n\n193\n00:10:24.360 --> 00:10:27.340\nThen whatever works in my lab\nenvironment should also work\n\n194\n00:10:27.340 --> 00:10:30.070\nin terms of the real environment as well.\n\n195\n00:10:30.070 --> 00:10:32.560\nSo I do thank you for\nhelping me out with that.\n\n196\n00:10:32.560 --> 00:10:37.920\nNow you mentioned something here that it's\nnot a full virtual machine environment but\n\n197\n00:10:37.920 --> 00:10:41.530\nis it just another virtual machine type\n\n198\n00:10:41.530 --> 00:10:43.930\nof technology that we're\nreally talking about?\n\n199\n00:10:43.930 --> 00:10:48.870\n&gt;&gt; So I've heard it put containerization\nis the next virtualization.\n\n200\n00:10:48.870 --> 00:10:52.390\nAnd I have a very high level\n\n201\n00:10:54.370 --> 00:10:57.470\nkind of reduced in complexity\ndiagram that will help us.\n\n202\n00:10:57.470 --> 00:11:01.560\nSo let's go ahead and take a look\nat a diagram here, and here we go.\n\n203\n00:11:01.560 --> 00:11:04.140\nHere's our virtual machine architecture.\n\n204\n00:11:04.140 --> 00:11:06.840\nLet's say that I needed some\nscalable app architecture.\n\n205\n00:11:06.840 --> 00:11:10.550\nI wanted to run multiple\ninstances of an application.\n\n206\n00:11:10.550 --> 00:11:15.170\nIf I had whatever hardware it is, let's\nsay it's EC2 or some Azure machine or\n\n207\n00:11:15.170 --> 00:11:16.352\nsomething like that.\n\n208\n00:11:16.352 --> 00:11:20.760\nI could then provision it create\nsome kind of virtualized layer\n\n209\n00:11:20.760 --> 00:11:25.430\nspin up VMs that have their own guest\nOS and put the apps on top of those.\n\n210\n00:11:25.430 --> 00:11:29.310\nBut notice this layer here well\n\n211\n00:11:29.310 --> 00:11:33.050\nthey each have their own processes they\nhave to take up some amount of memory and\n\n212\n00:11:33.050 --> 00:11:38.050\nas provision and we run into problems\nlike we would in the normal compute node.\n\n213\n00:11:38.050 --> 00:11:42.600\nWe may not have full utilization,\nwe may have over utilization, and\n\n214\n00:11:42.600 --> 00:11:47.090\nwell as we've already spoken about Ronnie,\nit takes a while to provision these.\n\n215\n00:11:47.090 --> 00:11:49.600\nIt takes a little while to\nget these up and running.\n\n216\n00:11:49.600 --> 00:11:51.310\nAnd this is a lot of set up.\n\n217\n00:11:51.310 --> 00:11:55.500\nI know for me, I mean, for\nyou it may be easy as pie, but for\n\n218\n00:11:55.500 --> 00:11:58.380\nme it takes a little more\nset up than running Docker.\n\n219\n00:11:58.380 --> 00:12:03.780\nNow compare that with Docker, so we have\nour Docker instance here, all right?\n\n220\n00:12:03.780 --> 00:12:07.970\nSo Docker is this secondary\nthing that's running beside and\n\n221\n00:12:07.970 --> 00:12:09.590\nwe're gonna talk about that a little more.\n\n222\n00:12:09.590 --> 00:12:11.480\nAnd I have my host operating system.\n\n223\n00:12:11.480 --> 00:12:12.730\nNow what I've taken away,\n\n224\n00:12:12.730 --> 00:12:15.700\nyou'll see some other diagrams that\nlet break this own a little more.\n\n225\n00:12:15.700 --> 00:12:21.070\nWhat I'm taking away is, these\napplications are running on top of, well,\n\n226\n00:12:21.070 --> 00:12:25.700\nthey're kind of like virtualized OSs,\nbut they're not quite full VMs.\n\n227\n00:12:25.700 --> 00:12:28.210\nThey're not a full virtualized platform.\n\n228\n00:12:28.210 --> 00:12:30.160\nWhat's happening is that\nthe lower level of this,\n\n229\n00:12:30.160 --> 00:12:35.240\nthe host operating system,\nis sharing with the docker containers,\n\n230\n00:12:35.240 --> 00:12:39.320\nthe individual libraries and things that\nare needed for that container to run.\n\n231\n00:12:39.320 --> 00:12:45.200\nSo if I spun up three Ubuntu containers,\non Ubuntu there may be only\n\n232\n00:12:45.200 --> 00:12:48.190\nonce instance of certain system\nprocesses that are running and\n\n233\n00:12:48.190 --> 00:12:50.130\nthose containers are utilizing that.\n\n234\n00:12:50.130 --> 00:12:54.720\nAnd by sharing those resources,\nwell they spin up a lot faster,\n\n235\n00:12:55.840 --> 00:13:00.140\nthey're easier to kill, and\nthey don't take as much resources.\n\n236\n00:13:00.140 --> 00:13:04.660\nAnd notice I have five instances of\nthe application that are running.\n\n237\n00:13:04.660 --> 00:13:06.560\nIf I keep my doctor container small and\n\n238\n00:13:06.560 --> 00:13:11.100\nvery focused, I may be able to\nutilize certain hardware platforms\n\n239\n00:13:11.100 --> 00:13:15.140\nto a fuller extent than maybe\nI would on virtual machines.\n\n240\n00:13:15.140 --> 00:13:18.931\nNow that's on my experience, there may\nbe additional methods that you can use\n\n241\n00:13:18.931 --> 00:13:22.680\nstandard virtual machine technology in\norder to get that full utilization.\n\n242\n00:13:23.800 --> 00:13:26.930\nAnd Docker comes with\na tool set that says,\n\n243\n00:13:26.930 --> 00:13:32.100\nwell I'm only utilizing 13%\nof this available hardware.\n\n244\n00:13:32.100 --> 00:13:34.750\nWe could probably spin up\na few more containers and\n\n245\n00:13:34.750 --> 00:13:38.540\nthen have this run at a higher rate.\n\n246\n00:13:38.540 --> 00:13:42.320\n&gt;&gt; Now Justin if we take a look at that\nwhat you presented, which also tells us\n\n247\n00:13:42.320 --> 00:13:46.780\nabout the advantage of running Docker on\nyour environment, on a single machine.\n\n248\n00:13:46.780 --> 00:13:50.760\nBut is there a point in which you might go\n\n249\n00:13:50.760 --> 00:13:54.450\nI need to run this inside of that\ntraditional virtual machine environment\n\n250\n00:13:54.450 --> 00:13:57.920\ninstead of Docker is there a chance\nthat you might think of that?\n\n251\n00:13:57.920 --> 00:13:59.020\nOr do you go no,\n\n252\n00:13:59.020 --> 00:14:02.480\nif I'm gonna do this especially in the\ndevelopment world Docker's the way to go?\n\n253\n00:14:02.480 --> 00:14:06.760\n&gt;&gt; So because there's so much iteration\nthat occurs in the development world\n\n254\n00:14:06.760 --> 00:14:10.630\nespecially with Agile and Scrum and\nsome of these development processes.\n\n255\n00:14:10.630 --> 00:14:13.370\nI have found that virtual\nmachine technologies\n\n256\n00:14:13.370 --> 00:14:16.505\nare in fact a hindrance to\nthe speed of development.\n\n257\n00:14:16.505 --> 00:14:21.740\nAnd I'm just putting that out there,\nthat is my opinion and my experience.\n\n258\n00:14:21.740 --> 00:14:25.730\nWhat I like about Docker is once I have\neverything kind of configured, I may be\n\n259\n00:14:25.730 --> 00:14:30.930\nable to kill a Docker container and spin\nit back up in a matter of ten seconds.\n\n260\n00:14:30.930 --> 00:14:35.450\nAnd then when I was using virtual machines\nthat might be two, three, four minutes.\n\n261\n00:14:35.450 --> 00:14:39.230\nAnd especially if I wanna make a change,\nto the environment,\n\n262\n00:14:39.230 --> 00:14:42.900\nwell that's another okay,\nI made the change, let me save the change.\n\n263\n00:14:42.900 --> 00:14:44.820\nLet me kill the virtual machine.\n\n264\n00:14:44.820 --> 00:14:46.540\nLet me reprovision the virtual machine.\n\n265\n00:14:47.630 --> 00:14:49.160\nSo that's my experience.\n\n266\n00:14:49.160 --> 00:14:54.360\nNow if you want some there are times like,\nfor instance, in network and\n\n267\n00:14:54.360 --> 00:15:00.195\nDocker provides us all set of tools to\nprovide networking link services and\n\n268\n00:15:00.195 --> 00:15:03.200\nthey kind of abstract the way\nthat the low level design.\n\n269\n00:15:03.200 --> 00:15:07.660\nIt may be if you need that level control,\nit might be better or\n\n270\n00:15:07.660 --> 00:15:12.870\nmore familiar for you to provision virtual\nmachines for that particular instance.\n\n271\n00:15:12.870 --> 00:15:16.830\nBut for me, I like the speed, the ease,\n\n272\n00:15:16.830 --> 00:15:20.690\nand really I just feel\nmore comfortable with it.\n\n273\n00:15:20.690 --> 00:15:26.510\nIt just seems more intuitive for\nme when I'm building applications.\n\n274\n00:15:26.510 --> 00:15:28.600\n&gt;&gt; And\nwhat you're saying even makes sense to me.\n\n275\n00:15:28.600 --> 00:15:32.260\nThe very fact that, if you don't need\nthe full virtualization technology,\n\n276\n00:15:32.260 --> 00:15:33.520\nwhy use it?\n\n277\n00:15:33.520 --> 00:15:34.760\nAnd at the same time,\n\n278\n00:15:34.760 --> 00:15:39.360\nit is a hindrance if you have to learn how\nto do the virtualization technology so\n\n279\n00:15:39.360 --> 00:15:41.960\nthat you can do the job that\nyou're really called to do.\n\n280\n00:15:41.960 --> 00:15:44.420\nSo you're really having to learn\ntwo technologies to do one job,\n\n281\n00:15:44.420 --> 00:15:47.810\nwhen you could really be\nfiguring out how Docker works.\n\n282\n00:15:47.810 --> 00:15:49.464\nAnd then once you\nactually figure that out,\n\n283\n00:15:49.464 --> 00:15:51.306\nbe able to spin up\nthe instances that you need to.\n\n284\n00:15:51.306 --> 00:15:55.941\nIt sounds like a great advantage and a\ngreat tool that anybody in the development\n\n285\n00:15:55.941 --> 00:15:59.121\nworld should at least have\nthe basics to know how to do So\n\n286\n00:15:59.121 --> 00:16:02.045\nin that sense then where\nare we gonna get started?\n\n287\n00:16:02.045 --> 00:16:06.760\nHow do we actually make Docker\nwork the way that we want it to?\n\n288\n00:16:06.760 --> 00:16:10.040\n&gt;&gt; So we're definitely\ngonna undress the install.\n\n289\n00:16:10.040 --> 00:16:14.080\nBut I think it's important to\nknow how Docker works for us,\n\n290\n00:16:14.080 --> 00:16:18.462\nhow we're gonna interact with Docker\nbecause we're going a little bit deeper.\n\n291\n00:16:18.462 --> 00:16:21.950\nIt's gonna remove some of that magic,\nthough Ronnie it still is magic sometimes.\n\n292\n00:16:21.950 --> 00:16:24.430\nLike, wow it just worked it was amazing.\n\n293\n00:16:24.430 --> 00:16:28.820\nJust the other day I actually\ncreated like a several\n\n294\n00:16:28.820 --> 00:16:34.360\ninstance orchestrated container system\nthat just created like Spark environment\n\n295\n00:16:34.360 --> 00:16:36.120\nin order to do big data processing.\n\n296\n00:16:36.120 --> 00:16:40.110\nWell, when I say I created it,\nI ran like three commands and it happened.\n\n297\n00:16:40.110 --> 00:16:44.800\nI didn't really know how it worked but\nwhat I liked is you can get started\n\n298\n00:16:44.800 --> 00:16:49.260\nquickly, and then you can figure out,\nhow do these pieces fit together?\n\n299\n00:16:49.260 --> 00:16:54.430\nSo let's go and look at a more, well,\nit's still a simplified diagram.\n\n300\n00:16:55.950 --> 00:17:00.390\nThis Docker portion here,\nthat is actually the Docker Daemon.\n\n301\n00:17:00.390 --> 00:17:03.550\nAnd what the Docker Daemon does is\nthat it manages your containers,\n\n302\n00:17:03.550 --> 00:17:08.700\nit manages your system and it manages kind\nof what's going on behind the scenes.\n\n303\n00:17:08.700 --> 00:17:12.240\nWell, the Docker Daemon is\nkind of like a server and\n\n304\n00:17:12.240 --> 00:17:14.480\nyou're gonna make request to the Daemon.\n\n305\n00:17:14.480 --> 00:17:17.940\nWell, using the client, and\nthe client is, in fact, us.\n\n306\n00:17:17.940 --> 00:17:21.520\nTypically, you're not gonna interact\nwith the Docker Daemon itself\n\n307\n00:17:21.520 --> 00:17:23.810\nexcept through certain APIs.\n\n308\n00:17:23.810 --> 00:17:25.750\nI use the Docker client\nalmost exclusively.\n\n309\n00:17:25.750 --> 00:17:30.560\nThere are ways to make actual HTTP\nrequests to the Docker Daemon and\n\n310\n00:17:30.560 --> 00:17:32.080\nget information back.\n\n311\n00:17:32.080 --> 00:17:34.660\nBut that's outside of my use case.\n\n312\n00:17:34.660 --> 00:17:39.450\nMaybe at some point, it's not but\nhere the Docker Client is very easy.\n\n313\n00:17:39.450 --> 00:17:45.620\nIn addition to these clients in a most\nrecent iterations of Docker have become,\n\n314\n00:17:45.620 --> 00:17:47.430\nwell they're GUIs now.\n\n315\n00:17:47.430 --> 00:17:51.595\nThey used to be all command line and\nthat's still where I like to hang out.\n\n316\n00:17:51.595 --> 00:17:54.058\nBut it's like point and click.\n\n317\n00:17:54.058 --> 00:17:57.670\nAt the other day, I was playing with\nsome of the GUIs and it still amazes me.\n\n318\n00:17:57.670 --> 00:18:00.170\nI can point and click and\nget MongoDB up and\n\n319\n00:18:00.170 --> 00:18:05.250\nrunning, with an exposed port,\nlike a single click, done.\n\n320\n00:18:05.250 --> 00:18:09.380\nI can get 30 MongoDBs up and\nrunning, boom, done.\n\n321\n00:18:09.380 --> 00:18:14.640\nWell, that's because I'm issuing request\nthrough the client to the Docker Daemon.\n\n322\n00:18:14.640 --> 00:18:18.470\nThe Docker Daemon's figuring out,\nokay, how do I manage these resources?\n\n323\n00:18:18.470 --> 00:18:20.520\nYeah, it also does\nprovide some monitoring,\n\n324\n00:18:20.520 --> 00:18:23.560\nsuch as, well is this app\nrunning more than this app?\n\n325\n00:18:23.560 --> 00:18:25.940\nIs it taking up more resources?\n\n326\n00:18:25.940 --> 00:18:30.260\nCuz that's important information to\nknow if you're building a multi-instance\n\n327\n00:18:30.260 --> 00:18:32.760\napplication or\nyou want some kind of skill.\n\n328\n00:18:32.760 --> 00:18:35.990\nIf you have hotspots,\nthat may be an issue.\n\n329\n00:18:35.990 --> 00:18:40.830\nOr, if your database isn't providing\nenough throughput, is it disk?\n\n330\n00:18:40.830 --> 00:18:42.130\nIs it the actual database?\n\n331\n00:18:42.130 --> 00:18:44.310\nIs it because your architecture is wrong?\n\n332\n00:18:44.310 --> 00:18:47.540\nAnd this allows you to try\nthose things very quickly.\n\n333\n00:18:47.540 --> 00:18:51.820\nSo, we will typically, when I say Docker,\nwe will be interacting with the Docker\n\n334\n00:18:51.820 --> 00:18:56.050\nclient to make\nthe Docker Daemon do things.\n\n335\n00:18:56.050 --> 00:18:57.600\nSo that's how we're gonna get to work.\n\n336\n00:18:57.600 --> 00:19:00.370\nNow well, that doesn't help us, right?\n\n337\n00:19:00.370 --> 00:19:04.090\nWe're not done, we don't actually\nhave anything up and running yet.\n\n338\n00:19:05.140 --> 00:19:07.350\nBut Ronnie, we have some set up to do, but\n\n339\n00:19:07.350 --> 00:19:10.470\nI just don't know if we have it,\nhave the time to do it right now.\n\n340\n00:19:10.470 --> 00:19:13.940\n&gt;&gt; And that’s understandable,\nas we get started now.\n\n341\n00:19:13.940 --> 00:19:17.420\nI do have one more question that I\nthink can help us out a little bit.\n\n342\n00:19:17.420 --> 00:19:19.907\nAs people are thinking about this and\ngetting started.\n\n343\n00:19:19.907 --> 00:19:25.090\nIs this a download, is it a free product,\nis it something I have to pay for?\n\n344\n00:19:25.090 --> 00:19:29.950\nWhat are some of the general things,\nthat if I want to begin here,\n\n345\n00:19:29.950 --> 00:19:34.850\nas far as that is just something that\nwe're gonna take a look in the series.\n\n346\n00:19:34.850 --> 00:19:37.530\nBut is this something, if I go,\nI wanna try this right away,\n\n347\n00:19:37.530 --> 00:19:39.900\nthat I'm gonna get this up and\nrunning very quickly?\n\n348\n00:19:39.900 --> 00:19:44.095\n&gt;&gt; Well, Ronnie, I will say there\nare varying degrees of difficulty.\n\n349\n00:19:44.095 --> 00:19:47.880\nAnd it's actually become a great\ndeal easier in recent years.\n\n350\n00:19:47.880 --> 00:19:52.015\nBut let's address the free\nversus non free portion.\n\n351\n00:19:52.015 --> 00:19:56.295\nSo Docker has kind of been, it's free for\neverybody for the longest time.\n\n352\n00:19:56.295 --> 00:19:57.225\nRecently though,\n\n353\n00:19:57.225 --> 00:20:02.805\nupon their new release they're trying\nsome different monetization schemes.\n\n354\n00:20:02.805 --> 00:20:05.075\nWhere we have\nthe Docker Community edition,\n\n355\n00:20:05.075 --> 00:20:07.830\nwhich we will be using,\nwhich is free, it's a download.\n\n356\n00:20:07.830 --> 00:20:11.310\nAnd we'll see how its install goes\non a couple of different systems,\n\n357\n00:20:11.310 --> 00:20:14.400\nactually three different\nsystems to be specific and\n\n358\n00:20:14.400 --> 00:20:16.595\nthat will give you an idea\nof how difficult that is.\n\n359\n00:20:16.595 --> 00:20:22.160\nBut there's also enterprise editions\nwhere the Docker, there's official Docker\n\n360\n00:20:22.160 --> 00:20:27.740\ntool sets to help with well here's\nDocker deployed on an EC2 instance,\n\n361\n00:20:27.740 --> 00:20:32.500\nor Docker deployed on an Azure instance,\nthings of that nature.\n\n362\n00:20:32.500 --> 00:20:35.810\nSo they're trying some\nenterprise level things.\n\n363\n00:20:35.810 --> 00:20:41.750\nAnd that includes Docker for\nthe Data Center, Docker for the cloud\n\n364\n00:20:41.750 --> 00:20:46.980\ninstance which, is for\nme it seems very specific to developers.\n\n365\n00:20:46.980 --> 00:20:51.790\nThey may wanna have to manage\nmulti-nodes with containers\n\n366\n00:20:51.790 --> 00:20:53.800\ndistributed over those nodes.\n\n367\n00:20:53.800 --> 00:20:58.260\nAnd they're really pushing that hey, we're\nproviding new technology to do things such\n\n368\n00:20:58.260 --> 00:21:02.480\nas, I have some Azure instances,\nI have some Google Cloud instances,\n\n369\n00:21:02.480 --> 00:21:06.630\nI have some EC2 instances, well, your\ndocker containers can be spread all over\n\n370\n00:21:06.630 --> 00:21:09.710\nthose which provides\na level of robustness.\n\n371\n00:21:09.710 --> 00:21:10.900\nAnd kind of it, I don't have\n\n372\n00:21:12.210 --> 00:21:16.245\nto worry about a one particular provider\nbeing the only place that I can be.\n\n373\n00:21:16.245 --> 00:21:20.810\nSo it's easy to download,\nit's fairly easy to get started but\n\n374\n00:21:20.810 --> 00:21:24.650\ndo you keep in mind there is still\na little bit of flex at this current time\n\n375\n00:21:24.650 --> 00:21:28.560\nabout is it how's this\nmonetization gonna play out.\n\n376\n00:21:28.560 --> 00:21:33.170\nAnd as, it's far as I know only\nthe Docker Iidividuals will know that.\n\n377\n00:21:33.170 --> 00:21:36.940\n&gt;&gt; No doubt well thank you Justin for\nat least helping us to get started.\n\n378\n00:21:36.940 --> 00:21:39.670\nAnd I know that there's a lot\nmore configuration to go and\n\n379\n00:21:39.670 --> 00:21:43.460\na lot more details that we're gonna\ngo into during this particular series\n\n380\n00:21:43.460 --> 00:21:44.810\non the introduction to Docker.\n\n381\n00:21:44.810 --> 00:21:48.340\nSo remember that what you saw\nhere in this particular episode.\n\n382\n00:21:48.340 --> 00:21:51.790\nAs that of course we talked\nabout what docker actually is.\n\n383\n00:21:51.790 --> 00:21:54.670\nAlso Justin introduced us to\nlittle bit of the history and\n\n384\n00:21:54.670 --> 00:21:57.690\nthen we kinda just discussed about\n\n385\n00:21:57.690 --> 00:22:01.590\nreal world scenarios that Justin has\nactually been on when he used Docker and\n\n386\n00:22:01.590 --> 00:22:06.330\nhow about that actually benefited the\nusers out there and as well as himself.\n\n387\n00:22:06.330 --> 00:22:11.180\nSo if you are a person that is starting\nto get into that realm of development and\n\n388\n00:22:11.180 --> 00:22:14.490\nyou're wondering how are they actually\nbeing able to mimic an environment that\n\n389\n00:22:14.490 --> 00:22:16.650\nthey're really gonna be developing for.\n\n390\n00:22:16.650 --> 00:22:18.650\nWell Docker is probably one of\nthe most popular ways that you've\n\n391\n00:22:18.650 --> 00:22:19.230\nactually seen today.\n\n392\n00:22:19.230 --> 00:22:22.390\nAnd so that's why it's a great\ntechnology for us to get started.\n\n393\n00:22:22.390 --> 00:22:25.030\nSo since there is actually a lot\nmore to go, it's a great place for\n\n394\n00:22:25.030 --> 00:22:28.040\nus to also sign off for this episode.\n\n395\n00:22:28.040 --> 00:22:31.210\nSo for ITProTV,\nI've been your host, Ronnie Wong.\n\n396\n00:22:31.210 --> 00:22:32.700\n&gt;&gt; And I'm Justin Dennison.\n\n397\n00:22:32.700 --> 00:22:36.572\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n398\n00:22:36.572 --> 00:22:42.376\n[MUSIC]\n\n399\n00:22:42.376 --> 00:22:45.537\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "209758710"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at installing docker on MacOS and Windows.  They show where to get the install file for Docker for MacOS and Docker for Windows.  Justin walks us through the process and shows us how to verify docker installation succeeded",
          "length": "1636",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-installing_docker-032117.00_27_29_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-installing_docker-032117.00_27_29_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-installing_docker-032117.00_27_29_27.Still001-sm.jpg",
          "title": "Installing Docker",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:06.464\nWelcome to ITProTV, I'm your host,\nDon Pizet, [CROSSTALK]\n\n2\n00:00:06.464 --> 00:00:06.995\n[MUSIC]\n\n3\n00:00:06.995 --> 00:00:11.935\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.935 --> 00:00:15.840\n&gt;&gt; Welcome to another great\nepisode right here on ITProTV.\n\n5\n00:00:15.840 --> 00:00:20.274\nI'm your host, Ronnie Wong, and today,\nyou're watching introduction to Docker,\n\n6\n00:00:20.274 --> 00:00:24.588\nwe're gonna be diving into, of course,\ninstalling Docker on different operating\n\n7\n00:00:24.588 --> 00:00:28.923\nsystems and here to help us out today, of\ncourse, is gonna be Mr. Justin Dennison.\n\n8\n00:00:28.923 --> 00:00:31.950\nJustin, how are you doing today,\nand welcome back to our studios.\n\n9\n00:00:31.950 --> 00:00:34.970\n&gt;&gt; Thanks for having me back, Ronnie,\nI'm doing well, and yourself?\n\n10\n00:00:34.970 --> 00:00:38.200\n&gt;&gt; I am doing pretty good, and\nready to get started because\n\n11\n00:00:38.200 --> 00:00:41.770\nthis is one of the incredibly\ninteresting topics that we have.\n\n12\n00:00:41.770 --> 00:00:45.470\nIs not only did we talk about it in the\nlast episode, where we talked about why\n\n13\n00:00:45.470 --> 00:00:49.430\nwould use it, but now, we get to\nsee how it is actually installed.\n\n14\n00:00:49.430 --> 00:00:52.070\nAnd Justin, you didn't just\npick kind of the wimp way out\n\n15\n00:00:52.070 --> 00:00:55.485\nwhich I probably would have done,\npick one operating system and do this.\n\n16\n00:00:55.485 --> 00:00:58.415\nWe're actually gonna take a look at\nleast a couple of different ways to\n\n17\n00:00:58.415 --> 00:00:59.570\nget it started.\n\n18\n00:00:59.570 --> 00:01:03.440\nAnd you gonna show us just some of\nthe pitfalls and show us how to verify and\n\n19\n00:01:03.440 --> 00:01:06.850\nmake sure everything is gonna be\nworking the way that we needed\n\n20\n00:01:06.850 --> 00:01:08.380\nas we get started here.\n\n21\n00:01:08.380 --> 00:01:10.750\nSo Justin, as we start to take a look,\n\n22\n00:01:10.750 --> 00:01:13.150\nthe two operating systems we\ngonna be covering are what?\n\n23\n00:01:13.150 --> 00:01:14.600\nWhat are we taking a look at?\n\n24\n00:01:14.600 --> 00:01:16.919\n&gt;&gt; Well Ronnie,\nI'm actually gonna turn it up a notch,\n\n25\n00:01:16.919 --> 00:01:19.952\nwe're eventually going to get\nto three operating systems.\n\n26\n00:01:19.952 --> 00:01:21.280\n&gt;&gt; Nice.\n\n27\n00:01:21.280 --> 00:01:22.720\n&gt;&gt; We're actually gonna start with Mac OS,\n\n28\n00:01:22.720 --> 00:01:24.283\nI gotta get out of\nthe habit of saying OSX.\n\n29\n00:01:24.283 --> 00:01:26.382\n&gt;&gt; Yeah, that's true.\n&gt;&gt; Cuz that's officially rebranded\n\n30\n00:01:26.382 --> 00:01:26.966\nas Mac OS.\n\n31\n00:01:26.966 --> 00:01:29.308\nThen we're gonna take a look\nat the Windows Store,\n\n32\n00:01:29.308 --> 00:01:32.251\nparticularly on Windows 10,\nnow, your knowledge may vary,\n\n33\n00:01:32.251 --> 00:01:35.534\ndepending on some things and\nI'll point those out when we come to them.\n\n34\n00:01:35.534 --> 00:01:39.538\nAnd then lastly, we're going to take\na look at the Linux environment,\n\n35\n00:01:39.538 --> 00:01:42.835\nwhich Docker was originally,\nit ran wonderfully there.\n\n36\n00:01:42.835 --> 00:01:46.945\nBut there are some nuanced differences\nbetween those three environments, and\n\n37\n00:01:46.945 --> 00:01:51.515\nyou have to be able to balance those,\naccordingly.\n\n38\n00:01:51.515 --> 00:01:53.955\n&gt;&gt; We've also been mentioning,\nlike I said in a previous episode,\n\n39\n00:01:53.955 --> 00:01:58.520\nwhere this particular type of development\nespecially in the container world\n\n40\n00:01:58.520 --> 00:02:01.840\nthat is advancing very rapidly and\nwhat we've ended up seeing,\n\n41\n00:02:01.840 --> 00:02:05.710\nis that now there's kind of a couple of\nways to do what you're actually gonna do,\n\n42\n00:02:05.710 --> 00:02:10.090\nthere is usually old ways and new ways and\nthey can get a little bit confusing.\n\n43\n00:02:10.090 --> 00:02:13.990\nSo, Justin has actually taken the bold\nstep to kinda show us both but let's\n\n44\n00:02:13.990 --> 00:02:18.450\nstart off, and we're gonna take a look\nat Mac OS first, so, what is the story\n\n45\n00:02:18.450 --> 00:02:23.490\nwith this idea of the old way of Mac OS,\nand what do we need to take a look at?\n\n46\n00:02:23.490 --> 00:02:27.548\n&gt;&gt; All right, so, let's talk about the old\nways, I don't know if I quite get to\n\n47\n00:02:27.548 --> 00:02:30.687\ninstalling the old ways,\ncuz we have some mismatch there.\n\n48\n00:02:30.687 --> 00:02:35.620\nBut originally, whenever we run Docker on\nMac OS, we had to use virtual box to spin\n\n49\n00:02:35.620 --> 00:02:40.000\nup a small, I think it was called\na dizzy box or something of that nature.\n\n50\n00:02:41.330 --> 00:02:45.080\nLinux VM and then on top of that,\nthat's where those system processes for\n\n51\n00:02:45.080 --> 00:02:47.350\nthe Docker daemon were provided to us.\n\n52\n00:02:47.350 --> 00:02:50.370\n&gt;&gt; So, you had to install that and\nyou had to make sure that was all, and\n\n53\n00:02:50.370 --> 00:02:51.770\ntypically in the Mac environment,\n\n54\n00:02:51.770 --> 00:02:57.540\nit was fairly robust it installed all of\nthose in a nice little package for you.\n\n55\n00:02:57.540 --> 00:03:01.610\nSo, it abstracted a little\nbit away from you but\n\n56\n00:03:01.610 --> 00:03:05.620\nyou had to be careful, I know,\nI struggled a couple of times with.\n\n57\n00:03:05.620 --> 00:03:09.859\nI already had VirtualBox, but I had\nthe wrong version, and then things started\n\n58\n00:03:09.859 --> 00:03:13.653\nbreaking, so, they started moving\naway from that and in particular,\n\n59\n00:03:13.653 --> 00:03:17.597\nDocker comes with a set of tools,\nlike Docker Compose, Docker Machine.\n\n60\n00:03:17.597 --> 00:03:23.700\nAnd Docker Machine was originally created\nto manage those virtual environments.\n\n61\n00:03:23.700 --> 00:03:27.450\nSo, it's really weird, you may still\nhave VMs and has some other uses also,\n\n62\n00:03:27.450 --> 00:03:28.330\nwe'll get to that later.\n\n63\n00:03:29.390 --> 00:03:35.010\nWith Docker, and then Docker composes, I\nwant to kinda meld all of these containers\n\n64\n00:03:35.010 --> 00:03:40.370\ntogether and build this large scale app,\nmaybe have a database, a web app, a maybe\n\n65\n00:03:40.370 --> 00:03:44.860\nactually a static server, like engine\nX that handles all your static files.\n\n66\n00:03:44.860 --> 00:03:48.760\nBut you can put all of that together and\nlet Docker handle the linking,\n\n67\n00:03:48.760 --> 00:03:51.100\nthe networking, all of those things.\n\n68\n00:03:51.100 --> 00:03:55.950\nSo, the original story was VirtualBox,\nboom and that was it,\n\n69\n00:03:55.950 --> 00:03:59.000\nyou got Docker engine only,\nlike the standard Docker.\n\n70\n00:03:59.000 --> 00:04:01.590\nIf you wanted Docker Compose or\nDocker Machine,\n\n71\n00:04:01.590 --> 00:04:04.330\nyou had to do some additional installs.\n\n72\n00:04:04.330 --> 00:04:08.140\nHowever, they're sort of\nfinding that as this caught on,\n\n73\n00:04:08.140 --> 00:04:11.080\nthey added a new way\ncalled Docker toolbox.\n\n74\n00:04:11.080 --> 00:04:15.774\nAnd actually, let's hop down\ninto my Chrome browser here and\n\n75\n00:04:15.774 --> 00:04:22.464\nsee Docker toolbox, and so, we go to talk\nDocker toolbox, and it's still available.\n\n76\n00:04:22.464 --> 00:04:26.718\nAnd the reason being, is there's\nsome version limitations here and\n\n77\n00:04:26.718 --> 00:04:31.264\nDocker Toolbox provides us with\nDocker engine, compose, machine, and\n\n78\n00:04:31.264 --> 00:04:34.712\nktematic, kitematic is\nactually the GUI interface for\n\n79\n00:04:34.712 --> 00:04:38.400\nsome of these commands to\nbe able to select and pick.\n\n80\n00:04:38.400 --> 00:04:42.040\nNow, when you actually download this\nkitematic, we'll still have a beta\n\n81\n00:04:42.040 --> 00:04:45.292\ndesignation, so, it's in flux and\nyou brought up a great point.\n\n82\n00:04:45.292 --> 00:04:50.180\nDocker still relatively young,\nin the terms of technologies, right.\n\n83\n00:04:50.180 --> 00:04:53.850\nOver the last few years, it went it from,\nwell here's how you install it now or\n\n84\n00:04:53.850 --> 00:04:56.000\nwell, here's how you install it now.\n\n85\n00:04:56.000 --> 00:05:01.280\nAnd docker toolbox was the latest\niteration, until recently, whether\n\n86\n00:05:01.280 --> 00:05:06.100\nthe installation storage changed a little\nbit and we'll see then in just a moment.\n\n87\n00:05:06.100 --> 00:05:10.750\nBut until fairly recently,\nyou used Docker Toolbox.\n\n88\n00:05:10.750 --> 00:05:13.700\nBoth for Windows and Mac and\n\n89\n00:05:13.700 --> 00:05:17.760\nit install the Docker client machine,\ncompose and kitematic.\n\n90\n00:05:17.760 --> 00:05:21.980\nAnd what's interesting is they talked\nabout the docker client here, but\n\n91\n00:05:21.980 --> 00:05:24.010\nthen let's talk about the Docker engine.\n\n92\n00:05:24.010 --> 00:05:26.760\nSo, sometimes those terms\nare used interchangeably,\n\n93\n00:05:26.760 --> 00:05:30.810\ntypically what I think of, when I hear\na Docker engine or Docker client, well,\n\n94\n00:05:30.810 --> 00:05:35.930\nthe client doesn't make any sense without\nthe daemon or the server so to speak.\n\n95\n00:05:35.930 --> 00:05:37.339\nSo, they have to come as a pair,\n\n96\n00:05:37.339 --> 00:05:41.100\nright, your left shoe's not worth\nanything without your right shoe,\n\n97\n00:05:41.100 --> 00:05:45.165\nyou'll get weird looks, you'll get\nsome hip pain, and it'll be all weird.\n\n98\n00:05:45.165 --> 00:05:49.470\n[COUGH] When you see Docker engine,\nthat's typically, kinda all together.\n\n99\n00:05:49.470 --> 00:05:53.190\nNow, that's how I think about it, that\nmay be an oversimplification, Ronnie, but\n\n100\n00:05:53.190 --> 00:05:56.170\nthat's a good way to keep things in order.\n\n101\n00:05:56.170 --> 00:05:59.760\nNow also,\nthey had fairly good documentation.\n\n102\n00:06:01.060 --> 00:06:06.217\nOkay, this is how you install Docker\nToolbox and if we look, those are still\n\n103\n00:06:06.217 --> 00:06:11.712\navailable and the reason being is, you\nmay have a reason to have Docker toolbox.\n\n104\n00:06:11.712 --> 00:06:15.306\nMaybe you have an old version of Mac OS,\nor at the time it was OS X,\n\n105\n00:06:15.306 --> 00:06:19.150\nthat doesn't support some\nof the newer technologies.\n\n106\n00:06:19.150 --> 00:06:24.834\nMaybe, you have some previous development\nthat was created with Docker toolbox and\n\n107\n00:06:24.834 --> 00:06:28.048\nyou don't wanna move to\nthe new installation.\n\n108\n00:06:28.048 --> 00:06:32.551\nOkay, so, they're still making\nthese available, but be aware,\n\n109\n00:06:32.551 --> 00:06:37.301\nthese are different things,\nhow are we going to install Docker on Mac?\n\n110\n00:06:37.301 --> 00:06:39.432\nWell, in the latest iteration,\n\n111\n00:06:39.432 --> 00:06:43.399\nthey've actually created\nsomething called Docker for Mac.\n\n112\n00:06:45.040 --> 00:06:51.340\nAnd right here, we have the docs,\nDocker for Mac,\n\n113\n00:06:51.340 --> 00:06:57.100\nlet's go here and well, this is\nthe introduction, the feature list.\n\n114\n00:06:57.100 --> 00:07:00.300\nSo, features and benefits,\nthat's nice, we'll get into that.\n\n115\n00:07:00.300 --> 00:07:05.420\nBut then, if we click download from\nthe Docker store, in the newest iteration,\n\n116\n00:07:05.420 --> 00:07:10.244\nDocker's created this Docker store\nbecause we have a community edition and\n\n117\n00:07:10.244 --> 00:07:11.844\nan enterprise edition.\n\n118\n00:07:11.844 --> 00:07:17.111\nFor Mac, you have community edition only,\nas far as I know,\n\n119\n00:07:17.111 --> 00:07:21.340\nbecause you don't really run OSX servers.\n\n120\n00:07:21.340 --> 00:07:24.810\nI mean, you might,\nthere are use cases for that,\n\n121\n00:07:24.810 --> 00:07:30.740\nat least at some point but\nhere you have two installations.\n\n122\n00:07:30.740 --> 00:07:34.731\nSo, let's see how we can\ninstall Docker on Mac.\n\n123\n00:07:34.731 --> 00:07:39.060\nIf you wanna live on the edge and\nget some experimental features,\n\n124\n00:07:39.060 --> 00:07:42.060\nyou can do Docker community edition for\nMac.\n\n125\n00:07:42.060 --> 00:07:46.773\nLet's see what some of those experimental\nfeatures are, and if you wanna read,\n\n126\n00:07:46.773 --> 00:07:51.212\nexternal graphics driver plugins,\nsome additional network drivers, and\n\n127\n00:07:51.212 --> 00:07:52.480\nthen Docker Stacks.\n\n128\n00:07:52.480 --> 00:07:56.752\nSee, these are things that,\nwow, this is new to me.\n\n129\n00:07:56.752 --> 00:08:00.034\nFor now, we're gonna stay away\nfrom some of these newer features,\n\n130\n00:08:00.034 --> 00:08:01.948\nsome of these experimental features.\n\n131\n00:08:01.948 --> 00:08:05.787\nAnd focus on the things that have\nbeen around for a while, right?\n\n132\n00:08:05.787 --> 00:08:08.650\nThat haven't really changed\nof these incarnations.\n\n133\n00:08:08.650 --> 00:08:12.520\nSo, let's click,\nGet Docker community edition for Mac and\n\n134\n00:08:12.520 --> 00:08:14.160\nit's a fairly large download.\n\n135\n00:08:14.160 --> 00:08:16.846\nWell, because it has all of these tools.\n\n136\n00:08:16.846 --> 00:08:19.200\nWhat comes in Docker for Mac?\n\n137\n00:08:19.200 --> 00:08:23.810\nAnd just like the Docker toolbox,\nwe get several tools available to us.\n\n138\n00:08:23.810 --> 00:08:27.970\nWe get Docker, the Docker client in\nparticularly with the Docker engine.\n\n139\n00:08:27.970 --> 00:08:32.287\nWe also get access to compose and\nDocker machine.\n\n140\n00:08:32.287 --> 00:08:34.735\nSo it's all bundled like Docker toolbox,\nbut\n\n141\n00:08:34.735 --> 00:08:39.290\nwith Docker toolbox you would install,\nyou had some additional setup.\n\n142\n00:08:39.290 --> 00:08:44.640\nAnd here it is a DMG,\nlike an installation for Mac OS.\n\n143\n00:08:44.640 --> 00:08:51.426\nAnd actually, the installation is drop,\nand I already have it, secret.\n\n144\n00:08:51.426 --> 00:08:56.780\nI'm going to replace, just to see,\nit's a simple drag and drop here.\n\n145\n00:08:58.210 --> 00:09:03.930\nSo that's a typical story for\na great deal of Mac OS applications.\n\n146\n00:09:03.930 --> 00:09:08.010\nBut now let's actually run Docker.\n\n147\n00:09:08.010 --> 00:09:12.580\nAnd they will ask you, are you sure\nthis is your new security features here?\n\n148\n00:09:12.580 --> 00:09:14.020\nYou download it from the Internet.\n\n149\n00:09:14.020 --> 00:09:16.980\nDo you wanna open it up, run it?\n\n150\n00:09:16.980 --> 00:09:20.030\nSure, I'm ready to go.\n\n151\n00:09:20.030 --> 00:09:25.720\nAnd then,\nif we look right up here on your task bar,\n\n152\n00:09:25.720 --> 00:09:29.670\non your tool bar, there ends up\nbeing the little Docker whale.\n\n153\n00:09:29.670 --> 00:09:33.493\nAnd the Docker whale will come up and\nthis lets you know that Docker is running.\n\n154\n00:09:33.493 --> 00:09:35.751\nIn addition to it gives you some,\n\n155\n00:09:35.751 --> 00:09:39.470\nstart our commands to run to\nsee if things are working.\n\n156\n00:09:39.470 --> 00:09:43.650\nIt will also tell you more\nabout Docker services.\n\n157\n00:09:43.650 --> 00:09:47.534\nBut I'm gonna click off this, and\nhave the default menu come up.\n\n158\n00:09:47.534 --> 00:09:53.410\nAnd if we, move this like so,\nup up let me get this right, here we go.\n\n159\n00:09:54.610 --> 00:09:59.000\nSo Docker is running, I can restart\nthe daemon from this GUI now.\n\n160\n00:09:59.000 --> 00:10:06.250\nUsed to, I had to either use like\nSystem CTL in Linux or service,\n\n161\n00:10:06.250 --> 00:10:10.310\npseudo service restart Docker, Docker\nrestart, I always get this mixed up.\n\n162\n00:10:10.310 --> 00:10:11.420\nI always got to try both of them.\n\n163\n00:10:11.420 --> 00:10:13.610\nI always got the order wrong.\n\n164\n00:10:13.610 --> 00:10:17.454\nBut I can just click Restart and\nit will restart the daemon for me.\n\n165\n00:10:17.454 --> 00:10:19.979\nAnd sometimes the daemon goes down,\nsometimes it breaks.\n\n166\n00:10:21.010 --> 00:10:24.640\nIt's not necessarily anything you did,\nit's just the nature of technology.\n\n167\n00:10:26.028 --> 00:10:29.550\nYou can get something about, it will also\ntell you about the enterprise edition.\n\n168\n00:10:29.550 --> 00:10:35.149\nNow the enterprise edition is\nwhere Docker for AWS, Docker for\n\n169\n00:10:35.149 --> 00:10:42.447\nAzure, and managing some of these more\nenterprise level environments, right?\n\n170\n00:10:42.447 --> 00:10:45.813\nAnd including,\nI believe like Windows Server,\n\n171\n00:10:45.813 --> 00:10:51.850\nwhich has up until now its not been a good\nstory for Windows but we'll get into that.\n\n172\n00:10:51.850 --> 00:10:52.930\nAnd then I have some preferences.\n\n173\n00:10:52.930 --> 00:10:55.020\nLet's go ahead and\nlook at the preferences here.\n\n174\n00:10:55.020 --> 00:10:57.900\nAnd I'm going to zoom back out.\n\n175\n00:10:57.900 --> 00:11:00.546\nFrom the Preferences, I can say,\nstart Docker when you login.\n\n176\n00:11:00.546 --> 00:11:03.280\nTypically that's where I leave it,\nbut maybe that's not what you want.\n\n177\n00:11:03.280 --> 00:11:05.800\nAnd we'll zoom in here.\n\n178\n00:11:05.800 --> 00:11:07.540\nAutomatically check for updates.\n\n179\n00:11:07.540 --> 00:11:10.340\nAnd here is what I like\nabout this install.\n\n180\n00:11:10.340 --> 00:11:14.640\nIt used to be,\nI had to go seek out new versions,\n\n181\n00:11:14.640 --> 00:11:17.690\nmake installs, updates, make any fixes.\n\n182\n00:11:17.690 --> 00:11:20.860\nBut now there's some automatically\nchecked for updates.\n\n183\n00:11:22.460 --> 00:11:27.246\nAnd I'm gonna leave since users\nstatistics or anything that goes wrong,\n\n184\n00:11:27.246 --> 00:11:29.290\nhow you're using it.\n\n185\n00:11:29.290 --> 00:11:31.210\nMainly because I want\nthis tool to be better.\n\n186\n00:11:31.210 --> 00:11:32.990\nThat's completely up to you.\n\n187\n00:11:32.990 --> 00:11:35.830\nFor file sharing,\nI typically don't mess with that except\n\n188\n00:11:37.470 --> 00:11:41.760\nthey need to have aces to some of thee\nbase level files like users and volumes.\n\n189\n00:11:41.760 --> 00:11:46.320\nBecause some of the tools will create\ntemporary files and folders there.\n\n190\n00:11:46.320 --> 00:11:49.574\nAdvanced, you can actually\nset the limitation that your\n\n191\n00:11:49.574 --> 00:11:52.090\ndocker Damien can pick up right now.\n\n192\n00:11:52.090 --> 00:11:56.720\nYou can get a maximum of four\nof my course on my machine.\n\n193\n00:11:56.720 --> 00:11:59.870\nAnd up to two gigabytes of RAM.\n\n194\n00:11:59.870 --> 00:12:04.040\nAnd, okay, it used to be,\nyou had the changes in command lines and\n\n195\n00:12:04.040 --> 00:12:09.570\nsome configuration files and now it's just\na slider of definite better experience.\n\n196\n00:12:09.570 --> 00:12:13.420\nAnd then, I could do system proxies.\n\n197\n00:12:13.420 --> 00:12:15.979\nI have never used a proxy ever,\nfor any reason.\n\n198\n00:12:17.140 --> 00:12:22.980\nBut it is now available as I can set\nup my proxy servers and my settings.\n\n199\n00:12:22.980 --> 00:12:27.270\nNow, what I mean by I haven't used one,\nI haven't configured one.\n\n200\n00:12:27.270 --> 00:12:31.110\nI haven't went in and\nsaid I wanna use this proxy.\n\n201\n00:12:31.110 --> 00:12:35.890\nAnd then the daemon,\nwell I have experimental features checked.\n\n202\n00:12:35.890 --> 00:12:38.956\nThis is not something you necessarily\nwant to use in production.\n\n203\n00:12:38.956 --> 00:12:41.790\nAnd you need to be aware\nwhat is experimental.\n\n204\n00:12:41.790 --> 00:12:45.340\nAnd you can uncheck it, and plan restart.\n\n205\n00:12:45.340 --> 00:12:49.190\nI'm not gonna restart, so I'm gonna leave\nit be, so let's just close out of that.\n\n206\n00:12:50.220 --> 00:12:51.410\nDon't apply.\n\n207\n00:12:51.410 --> 00:12:56.210\nAnd then how do I know if Docker,\nactually, everything's up and going?\n\n208\n00:12:56.210 --> 00:12:59.850\nMaybe this GUI tool is not for me.\n\n209\n00:12:59.850 --> 00:13:02.220\nI can check for updates, I can diagnose.\n\n210\n00:13:02.220 --> 00:13:04.010\nIt will take me to the Docker store.\n\n211\n00:13:04.010 --> 00:13:05.290\nThat's something fairly new.\n\n212\n00:13:05.290 --> 00:13:10.430\nAnd then let's take one last\nlook at GUI Tools Kitematic.\n\n213\n00:13:10.430 --> 00:13:13.460\nNow initially,\nwhen you install Docker, Docker for\n\n214\n00:13:13.460 --> 00:13:16.880\nMac particularly,\nKitematic will not be available to you.\n\n215\n00:13:16.880 --> 00:13:20.090\nYou'll click on that,\nit'll give you a link to go download this.\n\n216\n00:13:20.090 --> 00:13:25.160\nNotice, up here in the left hand corner,\nKitematic is designated as beta.\n\n217\n00:13:26.800 --> 00:13:29.340\nAnd that's because it might work,\nit might not, and\n\n218\n00:13:29.340 --> 00:13:34.870\nI will tell you some of these\nrecommended images, they're old.\n\n219\n00:13:34.870 --> 00:13:35.780\nThey're out of date.\n\n220\n00:13:35.780 --> 00:13:38.410\nThey're not quite what they should be.\n\n221\n00:13:39.660 --> 00:13:41.650\nLike, for instance, RethinkDB?\n\n222\n00:13:41.650 --> 00:13:43.820\nActually, they just shut\ndown as a corporation.\n\n223\n00:13:43.820 --> 00:13:46.320\n&gt;&gt; [LAUGH]\n&gt;&gt; I think it's moving to Open Source.\n\n224\n00:13:46.320 --> 00:13:49.650\nIf I'm not mistaken, and\nI'm thinking the correct one.\n\n225\n00:13:49.650 --> 00:13:50.318\nPretty sure I am.\n\n226\n00:13:50.318 --> 00:13:55.100\nBut okay, so\nbe careful about using Kitematic.\n\n227\n00:13:55.100 --> 00:14:00.040\nHowever, it is a good way you can search\nthrough a repository of other things and\n\n228\n00:14:00.040 --> 00:14:01.440\nthen just point and click.\n\n229\n00:14:01.440 --> 00:14:03.570\nEasy way to poke around and\nsee how things go.\n\n230\n00:14:05.020 --> 00:14:07.710\nI'm not a big fan of Kitematic\njust because I like to\n\n231\n00:14:07.710 --> 00:14:08.590\nlive in the command line.\n\n232\n00:14:08.590 --> 00:14:12.810\nI like to get, nitty gritty,\nget my hands dirty.\n\n233\n00:14:12.810 --> 00:14:15.410\nSo how does that story play out.\n\n234\n00:14:15.410 --> 00:14:16.220\nIf I have Docker for\n\n235\n00:14:16.220 --> 00:14:21.070\nMac installed, now I use iTerm,\nwhich is a terminal replacement.\n\n236\n00:14:21.070 --> 00:14:25.890\nBut you could easily use Terminal,\nwhich comes by default in Mac.\n\n237\n00:14:25.890 --> 00:14:27.370\nAnd lets make this a little bit bigger.\n\n238\n00:14:29.220 --> 00:14:32.752\nAnd by a little bit bigger,\nI mean a lot bigger.\n\n239\n00:14:32.752 --> 00:14:33.673\n&gt;&gt; [LAUGH]\n&gt;&gt; Hey, Ronnie.\n\n240\n00:14:33.673 --> 00:14:35.630\nAnd then, what's the story here?\n\n241\n00:14:35.630 --> 00:14:39.432\nSo that I say docker and\njust type version.\n\n242\n00:14:39.432 --> 00:14:45.346\nIf you run docker space version and\nyou get this printout,\n\n243\n00:14:45.346 --> 00:14:50.310\nyou are good to go, all right, great.\n\n244\n00:14:50.310 --> 00:14:53.910\nAnd notice when it lists,\nit lists two things.\n\n245\n00:14:53.910 --> 00:14:56.640\nNow I show you this because\nhere's what'll happen.\n\n246\n00:14:56.640 --> 00:14:59.720\nThe docker client will always\nprint out its version.\n\n247\n00:14:59.720 --> 00:15:04.960\nHowever, sometimes you'll get an error\nmessage or weird shenanigans here.\n\n248\n00:15:04.960 --> 00:15:09.060\nAnd that means that your docker daemon,\nor your docker server, is down.\n\n249\n00:15:09.060 --> 00:15:10.590\nIt went down for some reason.\n\n250\n00:15:10.590 --> 00:15:13.990\nYou can try to launch containers and\nuse docker all you want, but it's down,\n\n251\n00:15:13.990 --> 00:15:15.130\nyou gotta go fix it.\n\n252\n00:15:15.130 --> 00:15:16.690\nAnd it may just be as simple as a restart.\n\n253\n00:15:16.690 --> 00:15:20.760\nTypically that's what happens with me\nis I just need to restart my daemon and\n\n254\n00:15:20.760 --> 00:15:22.050\nwe're good to go.\n\n255\n00:15:22.050 --> 00:15:26.905\nSo you need to make sure that you have\nboth of these on a page, printed out, and\n\n256\n00:15:26.905 --> 00:15:28.193\nyou're good to go.\n\n257\n00:15:28.193 --> 00:15:30.765\nWe also wanna check for Docker for Mac.\n\n258\n00:15:30.765 --> 00:15:35.930\nThe two other tools that we'll use later\nin the series are available to us,\n\n259\n00:15:35.930 --> 00:15:38.760\nso we don't have to worry about it.\n\n260\n00:15:38.760 --> 00:15:41.960\nSo docker-compose, and boom.\n\n261\n00:15:41.960 --> 00:15:46.173\nAs long as you get a print out by\ntyping docker-compose, you're good.\n\n262\n00:15:46.173 --> 00:15:48.840\nOriginally, this was called Fig,\nwhen it first came out.\n\n263\n00:15:48.840 --> 00:15:51.924\nSo if you see anything,\nseeing people say use fig,\n\n264\n00:15:51.924 --> 00:15:55.874\nyou should probably find newer\ndocumentation because this maybe\n\n265\n00:15:55.874 --> 00:15:58.904\nold features composes also\nchanged a great deal.\n\n266\n00:15:58.904 --> 00:16:02.221\nAnd then docker, Machine and actually,\n\n267\n00:16:02.221 --> 00:16:07.320\nI think all of these have\nversions of messed up back there.\n\n268\n00:16:07.320 --> 00:16:09.860\nMy bad, and\nthen as long as we see a version for\n\n269\n00:16:09.860 --> 00:16:12.740\nDocker machine,\nDocker machine allows us to manage,\n\n270\n00:16:12.740 --> 00:16:19.110\nnot only local VMs that we may use to\nsimulate a distributed environment.\n\n271\n00:16:19.110 --> 00:16:23.650\nBut Docker machine now has the ability\nto deploy instances on AWS,\n\n272\n00:16:23.650 --> 00:16:27.200\ndigital ocean, Azure.\n\n273\n00:16:27.200 --> 00:16:33.040\nSo right from this command line, I can\ncreate EC2 instances, Azure instances,\n\n274\n00:16:33.040 --> 00:16:37.880\nsome digital ocean instances, and\nthen create containers on all those.\n\n275\n00:16:37.880 --> 00:16:41.170\nAnd for me,\nI'm like ooh this is like a super power.\n\n276\n00:16:42.400 --> 00:16:47.320\nSo if you have all of those,\nyou're probably good to go on Mac OS.\n\n277\n00:16:47.320 --> 00:16:50.720\n&gt;&gt; All right, Justin,\nlet me ask a question here.\n\n278\n00:16:50.720 --> 00:16:53.860\nLet's say that, like you sent you,\nyou started off and\n\n279\n00:16:53.860 --> 00:16:59.380\nyou kind of started the older version\nway of getting this installed and\n\n280\n00:16:59.380 --> 00:17:03.730\nnow, you know that there's new tools,\nis there an absolute reason to switch to\n\n281\n00:17:03.730 --> 00:17:08.140\nthe new one, or if I go, I'm just\nstubborn, I wanna stick with the old way?\n\n282\n00:17:08.140 --> 00:17:09.420\nWill it still work?\n\n283\n00:17:09.420 --> 00:17:11.080\n&gt;&gt; So that's a great question, and\n\n284\n00:17:11.080 --> 00:17:13.280\nlet's talk about the Docker\ndevelopment work flow.\n\n285\n00:17:13.280 --> 00:17:19.421\nSo recently, in Docker 1.12, the swarm\nservice, which we didn't look at,\n\n286\n00:17:19.421 --> 00:17:25.213\nwhich was to help create containers on\nvarious VMs that across multiple VMs.\n\n287\n00:17:25.213 --> 00:17:28.240\nIt was originally a separate\nservice that you could opt in to.\n\n288\n00:17:28.240 --> 00:17:32.060\nNow, Swarm comes in the docker\ninstall by default.\n\n289\n00:17:32.060 --> 00:17:35.510\nWell, the docker that we\njust installed is 1.17.\n\n290\n00:17:35.510 --> 00:17:39.830\nIt's in fairly fast iteration cycle, and\nif you used docker before version 1,\n\n291\n00:17:39.830 --> 00:17:42.660\nyou definitely need to upgrade.\n\n292\n00:17:42.660 --> 00:17:45.920\nIf you're after version one,\nyou're using that for tool box.\n\n293\n00:17:45.920 --> 00:17:49.490\nIf you have existing work flows that use\nthose versions as long as there's no\n\n294\n00:17:49.490 --> 00:17:53.790\nsecurity concerns except, you may,\nyou can probably still get away for\n\n295\n00:17:53.790 --> 00:17:57.780\na little bit but\nsecurities are very realistic issue\n\n296\n00:17:57.780 --> 00:18:02.140\nthat we won't always address and something\nthat I recommend as soon as you can.\n\n297\n00:18:02.140 --> 00:18:03.720\nYou need to upgrade to the newest version.\n\n298\n00:18:03.720 --> 00:18:04.620\nThey're fixing bugs.\n\n299\n00:18:04.620 --> 00:18:09.800\nThey're finding security holes, security\nvulnerabilities and they're fixing them.\n\n300\n00:18:09.800 --> 00:18:11.440\nAnd you need to be aware of that,\n\n301\n00:18:11.440 --> 00:18:13.750\nespecially if you're using this\nin a production environment.\n\n302\n00:18:13.750 --> 00:18:17.050\nSo I recommend keeping\nyour Docker up to date and\n\n303\n00:18:17.050 --> 00:18:22.530\nthere's actually migration\ndocumentation in the Docker docs.\n\n304\n00:18:22.530 --> 00:18:28.620\nWhich if I remember correctly for Mac,\nit says uninstall Docker toolbox and\n\n305\n00:18:28.620 --> 00:18:35.250\ninstall Docker for Mac but\nalso the Docker engine itself,\n\n306\n00:18:35.250 --> 00:18:39.820\nyou can probably keep that updated\nwithout changing out those tools.\n\n307\n00:18:39.820 --> 00:18:41.400\nThat's the real crook.\n\n308\n00:18:41.400 --> 00:18:44.310\nMake sure that the individual\ntools are updated\n\n309\n00:18:44.310 --> 00:18:45.630\neven if you don't change your system.\n\n310\n00:18:45.630 --> 00:18:50.200\nSo if you like Docker toolbox and\neverything works well for you and you just\n\n311\n00:18:50.200 --> 00:18:56.380\nwant to make sure that Docker itself is\nupdated, that's my strong recommendation.\n\n312\n00:18:56.380 --> 00:18:59.550\n&gt;&gt; All right, it sounds good and\nhelping us to understand this and\n\n313\n00:18:59.550 --> 00:19:03.460\nthe installation part on Mac OS\nis really gonna helpful for\n\n314\n00:19:03.460 --> 00:19:07.280\nmost of us who are on that\n&gt;&gt; But the reality though, Justin,\n\n315\n00:19:07.280 --> 00:19:11.300\nare a lot of people are gonna be on\nWindows so what's the story with Windows?\n\n316\n00:19:11.300 --> 00:19:13.260\nYou had alluded to it\na little bit earlier.\n\n317\n00:19:13.260 --> 00:19:14.190\n&gt;&gt; Well, I will tell you.\n\n318\n00:19:14.190 --> 00:19:20.964\nThe first time I tried it on a Windows,\nwell, it was like taking a curve too fast.\n\n319\n00:19:20.964 --> 00:19:22.823\n&gt;&gt; [LAUGH]\n&gt;&gt; On the side of a mountain.\n\n320\n00:19:22.823 --> 00:19:26.631\nYou're like I'm gonna make it,\nI'm gonna make it, and then,\n\n321\n00:19:26.631 --> 00:19:29.850\nit ends up guard rail scrape and\nyou're shaky.\n\n322\n00:19:29.850 --> 00:19:31.970\nIt was not a fun time for me.\n\n323\n00:19:31.970 --> 00:19:33.670\nNow, the story has gotten\nconsiderably better.\n\n324\n00:19:33.670 --> 00:19:37.240\nOriginally, in Windows you had to do\nsomething similar that you did on Mac and\n\n325\n00:19:37.240 --> 00:19:42.460\nthat was using Virtual Box to run\na Linux layer that Docker ran on top of.\n\n326\n00:19:42.460 --> 00:19:46.560\nBut slowly, they've started\nmoving similarly to Mac, they\n\n327\n00:19:46.560 --> 00:19:50.740\nhad the Docker toolbox for Windows, so\nwe almost have the same environment there.\n\n328\n00:19:50.740 --> 00:19:54.750\nIt still used the virtual machine layer,\nif I'm not mistaken.\n\n329\n00:19:54.750 --> 00:19:57.800\nAnd then most recently,\nwe get a docker for\n\n330\n00:19:57.800 --> 00:20:01.850\nWindows, very similar that\nwe did to docker for Mac.\n\n331\n00:20:01.850 --> 00:20:05.250\nAnd actually, let's check out\nthis docker for Windows thing.\n\n332\n00:20:05.250 --> 00:20:07.930\nSo if I look at my browser here,\nand Ronnie,\n\n333\n00:20:07.930 --> 00:20:12.710\nI'm in Microsoft Edge,\nwe're gonna have a great time.\n\n334\n00:20:12.710 --> 00:20:14.060\nActually, I do like Edge.\n\n335\n00:20:14.060 --> 00:20:15.470\nI do like Edge.\n\n336\n00:20:15.470 --> 00:20:16.970\nSo Docker for Windows.\n\n337\n00:20:16.970 --> 00:20:21.430\nAnd particularly, I'm gonna talk about\nDocker for Windows for Windows 10.\n\n338\n00:20:21.430 --> 00:20:27.660\nSo I think Windows 8 has updates that\nare still running, Windows 7 still\n\n339\n00:20:27.660 --> 00:20:32.430\nhas some updates if I'm not past that\nnumber one you need to update your\n\n340\n00:20:32.430 --> 00:20:37.810\nOS but your mileage may vary on\nwhat I'm getting ready to show you.\n\n341\n00:20:37.810 --> 00:20:41.170\nIn particular, when I installed\nWindows 10 on my virtual machine\n\n342\n00:20:42.650 --> 00:20:45.652\nI didn't have the appropriate amount\nof updates to use Docker for Windows.\n\n343\n00:20:45.652 --> 00:20:46.650\n&gt;&gt; Hm.\n\n344\n00:20:46.650 --> 00:20:49.595\n&gt;&gt; So it will give you a warning such as!\n\n345\n00:20:49.595 --> 00:20:55.222\nWell, you need build version 107\nsomething in that nature and\n\n346\n00:20:55.222 --> 00:20:58.097\nyou only have build 10240.\n\n347\n00:20:58.097 --> 00:21:00.930\nThen, you have to update.\n\n348\n00:21:00.930 --> 00:21:04.670\nAnd I actually, just to make sure\neverything was up to date, I signed up for\n\n349\n00:21:04.670 --> 00:21:09.270\ninsider preview build which made sure that\nmy Windows updated to the most recent\n\n350\n00:21:09.270 --> 00:21:13.240\nbuild that is available even with some of\nthose experimental feature in Windows.\n\n351\n00:21:13.240 --> 00:21:16.060\nSo be very careful of that.\n\n352\n00:21:16.060 --> 00:21:21.880\nIn addition to, I'm running this inside\nof a VM itself that's running Windows.\n\n353\n00:21:22.890 --> 00:21:24.980\nBy default, it doesn't work.\n\n354\n00:21:24.980 --> 00:21:28.710\nSo I had to manipulate some of\nthe hyper visor settings in my\n\n355\n00:21:28.710 --> 00:21:30.710\nvirtualization platform.\n\n356\n00:21:30.710 --> 00:21:33.440\nI had to do some other tweaks\njust to get it to work.\n\n357\n00:21:33.440 --> 00:21:37.150\nI'm not gonna tell you to do that because\nthis is not the standard use case.\n\n358\n00:21:38.480 --> 00:21:41.143\nThe goal is not to run a VM\nto run Docker inside of it.\n\n359\n00:21:41.143 --> 00:21:44.370\n&gt;&gt; [LAUGH]\n&gt;&gt; In order to get containers running.\n\n360\n00:21:44.370 --> 00:21:49.930\nThe goal is I could easily show you both\nenvironments, so if we come to Docker for\n\n361\n00:21:49.930 --> 00:21:54.400\nWindows it says, Get Docker for\nthe Docker store, that's great!\n\n362\n00:21:54.400 --> 00:21:56.250\nAnd here's the Docker Community Edition,\nand\n\n363\n00:21:56.250 --> 00:21:59.070\nit's almost the exact same install,\nall right?\n\n364\n00:21:59.070 --> 00:22:02.570\nSo, I'm gonna click Get Docker CE for\nWindows and\n\n365\n00:22:02.570 --> 00:22:07.510\nI'm going to save, and well,\nit will take a little bit to download.\n\n366\n00:22:07.510 --> 00:22:10.880\nBut just as a reminder\nthis is the newest one.\n\n367\n00:22:10.880 --> 00:22:13.060\nYou have to have an appropriate build.\n\n368\n00:22:13.060 --> 00:22:18.120\nYou have to have everything up to date,\nand this is all Windows 10, Windows 7,\n\n369\n00:22:18.120 --> 00:22:25.580\nWindows 8 you may get some differences\nhere, but let's see how it plays out.\n\n370\n00:22:25.580 --> 00:22:27.386\nOkay, so there's our installer.\n\n371\n00:22:27.386 --> 00:22:33.213\nI accept, I install and so\nI want to run it as, looks good and\n\n372\n00:22:33.213 --> 00:22:40.110\nunblindly clicking through\nthings hoping that it's okay.\n\n373\n00:22:40.110 --> 00:22:42.300\nSo and guess what, Ronnie?\n\n374\n00:22:42.300 --> 00:22:42.930\n&gt;&gt; That's good.\n\n375\n00:22:42.930 --> 00:22:44.000\n&gt;&gt; We're done.\n\n376\n00:22:44.000 --> 00:22:48.310\nNow, it will take a few seconds that\nactually gives you a little pop up\n\n377\n00:22:48.310 --> 00:22:50.190\nhere matching my heads and\nright there we're.\n\n378\n00:22:50.190 --> 00:22:53.050\nIt will tell you that it's running and\nvery similar to Mac,\n\n379\n00:22:54.770 --> 00:22:59.360\nit has a little Docker well telling\nme what things are happening.\n\n380\n00:22:59.360 --> 00:23:00.530\nAnd then it disappears,\n\n381\n00:23:00.530 --> 00:23:04.070\nthen that's because the system\ntray is a little different and\n\n382\n00:23:04.070 --> 00:23:09.310\nthen I click and it's not quite started\nup so it's going to take a little bit.\n\n383\n00:23:10.370 --> 00:23:14.840\nNow, originally when I did this,\nbecause I'm in a VM, it said hey,\n\n384\n00:23:14.840 --> 00:23:19.430\nyou don't have Hyper-V installed which\nis part of the Windows virtualization.\n\n385\n00:23:20.840 --> 00:23:23.300\nThe new docker for Windows relies on that.\n\n386\n00:23:24.450 --> 00:23:27.410\nSo I had to have that installed,\nI had to go back and fix that.\n\n387\n00:23:27.410 --> 00:23:33.790\nAnd if we look at the documentation here,\nit doesn't mention that a great deal.\n\n388\n00:23:33.790 --> 00:23:36.188\nAnd the reason it doesn't is\nby default a new docker for\n\n389\n00:23:36.188 --> 00:23:37.869\nWindows when you start up the daemon.\n\n390\n00:23:37.869 --> 00:23:40.623\nif you do have it it says, hey,\ndo you want us to go and get that and\n\n391\n00:23:40.623 --> 00:23:41.493\ninstall it for you?\n\n392\n00:23:41.493 --> 00:23:43.050\nAnd I do.\n\n393\n00:23:43.050 --> 00:23:46.127\nAnd then it kinda worked,\nbut because I was in a VM,\n\n394\n00:23:46.127 --> 00:23:49.429\nI had like virtualization\ninside of virtualization.\n\n395\n00:23:49.429 --> 00:23:55.924\nIt was crazy so here we go,\nI got it, looks good.\n\n396\n00:23:55.924 --> 00:24:01.225\nWell, you know what, I think we're done.\n\n397\n00:24:01.225 --> 00:24:07.230\nLet's take a look at that gooey client and\nI click and here we go.\n\n398\n00:24:07.230 --> 00:24:11.880\nI actually had to hold control and\nclick to right click because otherwise,\n\n399\n00:24:11.880 --> 00:24:14.110\nit doesn't throw out\nthe dominion by default.\n\n400\n00:24:14.110 --> 00:24:16.710\nAll of these are the same\nthing that we had in Windows.\n\n401\n00:24:16.710 --> 00:24:19.210\nLook, some of the menus\nmay be a little different.\n\n402\n00:24:19.210 --> 00:24:23.550\nGot Kitematic list, but notice there\nis this switch to Windows Containers.\n\n403\n00:24:25.100 --> 00:24:28.690\nWell, because I'm using the underlying\nlayer now for Docker for\n\n404\n00:24:28.690 --> 00:24:34.690\nWindows is the Windows Default\nVirtualization layer, but guess what?\n\n405\n00:24:34.690 --> 00:24:37.720\nI can run Windows Containers\non part of Windows, so\n\n406\n00:24:37.720 --> 00:24:40.900\nI can actually run like\nWindows Server Containers.\n\n407\n00:24:40.900 --> 00:24:44.810\nThe installation is very large,\nwe're not necessarily gonna do that now,\n\n408\n00:24:44.810 --> 00:24:47.730\nmaybe we'll dive into that\nin a previous episode.\n\n409\n00:24:47.730 --> 00:24:51.620\nBut if you click that what'll\nhappen is your daemon will go down.\n\n410\n00:24:51.620 --> 00:24:55.040\nIt'll make a switch, your daemon will come\nback up and now it's ready for Windows.\n\n411\n00:24:55.040 --> 00:24:56.630\nAnd then, you can switch back.\n\n412\n00:24:56.630 --> 00:25:01.970\nBut be very careful,\nthis is fairly new so.\n\n413\n00:25:01.970 --> 00:25:05.968\nMileage may very, buyer beware.\n\n414\n00:25:05.968 --> 00:25:09.900\nSo, I think we should probably just\ngo ahead and see how things play out.\n\n415\n00:25:09.900 --> 00:25:13.700\nI'm gonna open up PowerShell,\nand there we go.\n\n416\n00:25:13.700 --> 00:25:17.890\nOkay, let's see here.\n\n417\n00:25:17.890 --> 00:25:22.065\nDocker, you gotta spell version right,\nRonnie.\n\n418\n00:25:22.065 --> 00:25:24.480\n&gt;&gt; [LAUGH]\n&gt;&gt; That's an important distinction.\n\n419\n00:25:24.480 --> 00:25:27.150\nDocker version, hey, look at that.\n\n420\n00:25:27.150 --> 00:25:28.410\nI have client, and server.\n\n421\n00:25:28.410 --> 00:25:31.390\nThat means my daemons up,\nmy client is available.\n\n422\n00:25:31.390 --> 00:25:35.735\nLet's see Docker compose version.\n\n423\n00:25:35.735 --> 00:25:43.056\nBoom, and docker composes actually\na Python executable, but it's available.\n\n424\n00:25:43.056 --> 00:25:49.370\nAnd Docker machine version.\n\n425\n00:25:49.370 --> 00:25:50.780\nHey, they all work.\n\n426\n00:25:50.780 --> 00:25:54.630\nNow, what I like about this is now\nall of the commands that we've seen\n\n427\n00:25:54.630 --> 00:25:59.080\nthus far are the same on Mac OS and\non Windows.\n\n428\n00:25:59.080 --> 00:26:03.570\nDocker has now unified and kind of\nmade a label level playing field and\n\n429\n00:26:03.570 --> 00:26:05.430\nthat was actually really easy install.\n\n430\n00:26:05.430 --> 00:26:09.300\nI downloaded executable, I clicked it,\nI waited for it, and boom, I was done.\n\n431\n00:26:10.440 --> 00:26:14.060\nSo, Ronnie, I think I know\nwe wanted to get into Linux,\n\n432\n00:26:14.060 --> 00:26:16.750\nbut I'm not sure if we\nhave time in this episode.\n\n433\n00:26:16.750 --> 00:26:19.820\n&gt;&gt; It sounds like that Linux may be\na little more involved than what we saw\n\n434\n00:26:19.820 --> 00:26:21.890\nhere, but\nit was really good information for\n\n435\n00:26:21.890 --> 00:26:23.480\nat least those of us\n&gt;&gt; One,\n\n436\n00:26:23.480 --> 00:26:25.230\nto get started on\nthe machine that we’re on.\n\n437\n00:26:25.230 --> 00:26:29.790\nMost of us are probably gonna be running\neither the MAC OS or running Windows.\n\n438\n00:26:29.790 --> 00:26:32.720\nAnd just remember some of\ntheir prerequisite sets that\n\n439\n00:26:32.720 --> 00:26:34.660\nJustin also talked about here too.\n\n440\n00:26:34.660 --> 00:26:37.210\nAs we got started,\nas we took a look at that.\n\n441\n00:26:37.210 --> 00:26:38.470\nSo, thank you again, Justin, for\n\n442\n00:26:38.470 --> 00:26:41.980\nsharing that information and\nhelping us at least get to this point.\n\n443\n00:26:41.980 --> 00:26:45.530\nWe know that we want to take a look,\nof course, at installing in on Linux.\n\n444\n00:26:45.530 --> 00:26:47.740\nWe're gonna have to save that for\npart two.\n\n445\n00:26:47.740 --> 00:26:50.070\nSo, do come back and join us for that.\n\n446\n00:26:50.070 --> 00:26:52.960\nBut until that point, this is a great\nplace for us to also sign off for\n\n447\n00:26:52.960 --> 00:26:54.270\nthis episode.\n\n448\n00:26:54.270 --> 00:26:57.550\nFor ITProTV, I've been your host,\nRonnie Wong.\n\n449\n00:26:57.550 --> 00:26:58.770\n&gt;&gt; And I'm Justin Dennison.\n\n450\n00:26:58.770 --> 00:27:02.430\n&gt;&gt; Stay tuned right here for more,\nIntroduction to Docker shows.\n\n451\n00:27:02.430 --> 00:27:08.582\n[MUSIC]\n\n452\n00:27:08.582 --> 00:27:11.473\n&gt;&gt; Thank you for watching ITProTV\n\n",
          "vimeoId": "209763039"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at installing docker on Ubuntu.  They show where to get the install instructions from Docker since there is no real Docker for Ubuntu. Justin walks us through the process and shows us how to verify docker installation succeeded using the official Docker Documentation.",
          "length": "1436",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-2-installing_docker_pt2-032117.00_24_04_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-2-installing_docker_pt2-032117.00_24_04_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-2-1-2-installing_docker_pt2-032117.00_24_04_17.Still001-sm.jpg",
          "title": "Installing Docker Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.044 --> 00:00:01.270\nWelcome to ITPRO.TV.\n\n2\n00:00:01.270 --> 00:00:05.925\nI'm your host [CROSSTALK]\n\n3\n00:00:05.925 --> 00:00:08.329\n[MUSIC]\n\n4\n00:00:08.329 --> 00:00:12.146\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.146 --> 00:00:15.248\n&gt;&gt; Welcome back to another great\nepisode right here on ITPRO.TV.\n\n6\n00:00:15.248 --> 00:00:20.220\nI'm your host Ronnie Wong, and\ntoday you're watching Introduction Docker.\n\n7\n00:00:20.220 --> 00:00:24.130\nYou're actually gonna be watching\nPart Two on installing Docker onto,\n\n8\n00:00:24.130 --> 00:00:25.130\nthis time Linux.\n\n9\n00:00:25.130 --> 00:00:28.510\nWe already went through taking a look at\nthe installation process of course in\n\n10\n00:00:28.510 --> 00:00:32.640\nMac OS as well as in Windows,\nwhich Justin showed us how to do.\n\n11\n00:00:32.640 --> 00:00:36.330\nAnd today Justin is actually gonna be with\nus to show us of course the installation\n\n12\n00:00:36.330 --> 00:00:38.490\non Linux as well.\n\n13\n00:00:38.490 --> 00:00:42.220\nJustin, welcome back to our studios\nhere and how are you doing today?\n\n14\n00:00:42.220 --> 00:00:43.760\n&gt;&gt; I'm doing well, I'm excited to be back.\n\n15\n00:00:43.760 --> 00:00:45.040\nAnd how are you doing today, Ronnie?\n\n16\n00:00:45.040 --> 00:00:49.822\n&gt;&gt; Today, I am doing great and ready to\nget started here in terms of taking a look\n\n17\n00:00:49.822 --> 00:00:52.013\nat installing Docker into Linux.\n\n18\n00:00:52.013 --> 00:00:56.408\nSo in the last episode when we or in\nthe previous episode when we took a look\n\n19\n00:00:56.408 --> 00:00:59.434\nat installing it on Mac OS,\nas well as in Windows,\n\n20\n00:00:59.434 --> 00:01:04.170\nwe heard about a couple of stories and\nkind of the old way of doing things.\n\n21\n00:01:04.170 --> 00:01:07.330\nIs there are similar story\nin terms of Linux that\n\n22\n00:01:07.330 --> 00:01:09.030\nwe need to actually think about?\n\n23\n00:01:09.030 --> 00:01:10.110\n&gt;&gt; So that's a great question.\n\n24\n00:01:10.110 --> 00:01:14.630\nLet's take a step back and think about\nhow Docker was originally implemented.\n\n25\n00:01:14.630 --> 00:01:19.077\nThe ultimate goal for\nDocker was to run on a Linux run time.\n\n26\n00:01:19.077 --> 00:01:21.342\nIt was to share some of\nthose kernel processes,\n\n27\n00:01:21.342 --> 00:01:24.890\nsome of those system level processes\namong the various containers.\n\n28\n00:01:24.890 --> 00:01:26.362\nSo you could actually install Docker.\n\n29\n00:01:26.362 --> 00:01:29.777\nInitially, the Docker install\nwas really nice for Linux,\n\n30\n00:01:29.777 --> 00:01:32.040\nother than a few tweaks here and there.\n\n31\n00:01:32.040 --> 00:01:36.050\nBut if you're a Linux individual,\nyou're kinda used to those things anyway.\n\n32\n00:01:36.050 --> 00:01:40.470\nBut the underlying system processes, well\nI didn't need that virtualization layer,\n\n33\n00:01:40.470 --> 00:01:42.092\nI didn't need the VirtualBox.\n\n34\n00:01:42.092 --> 00:01:46.063\nIf I wanted to make sure that\neverything was always the same between,\n\n35\n00:01:46.063 --> 00:01:51.240\nI still have the option of doing a similar\ninstall that I did for Windows and Mac.\n\n36\n00:01:51.240 --> 00:01:55.000\nWhere I used VirtualBox, used BusyBox,\nand then shared all of those processes.\n\n37\n00:01:56.180 --> 00:01:58.750\nSome people are like, I wanna make\nsure everything's exactly the same,\n\n38\n00:01:58.750 --> 00:02:00.250\nand that's fine.\n\n39\n00:02:00.250 --> 00:02:03.431\nBut initially, when I started\nusing Docker, I used it on Linux.\n\n40\n00:02:03.431 --> 00:02:05.190\nThat was my first install.\n\n41\n00:02:05.190 --> 00:02:08.833\nAnd it was, okay I got to get this and\nuse the package manager,\n\n42\n00:02:08.833 --> 00:02:13.010\nupdate the package manager, files okay.\n\n43\n00:02:13.010 --> 00:02:20.560\nLooks good, it works and it's just\nusing my base level Linux install.\n\n44\n00:02:20.560 --> 00:02:23.962\nSo, really the story hasn't\nchange a great deal,\n\n45\n00:02:23.962 --> 00:02:26.899\nother than some other tools coming online.\n\n46\n00:02:26.899 --> 00:02:30.565\n&gt;&gt; All right, so\nJustin is it gonna be fairly similar where\n\n47\n00:02:30.565 --> 00:02:34.231\nwe go to the Docker side and\nthere was a Docker for Mac OS,\n\n48\n00:02:34.231 --> 00:02:38.620\nthere was a Docker for Windows,\nis there a Docker just for Linux?\n\n49\n00:02:38.620 --> 00:02:39.826\nLike the same way?\n\n50\n00:02:39.826 --> 00:02:43.095\n&gt;&gt; We'll you know Ronnie that would,\nthat would seem to make a lot of sense.\n\n51\n00:02:43.095 --> 00:02:44.784\n&gt;&gt; [LAUGH]\n&gt;&gt; And let's take a look because\n\n52\n00:02:44.784 --> 00:02:48.370\nthere is something touted as kind\nof Docker for a Linux flavor.\n\n53\n00:02:48.370 --> 00:02:52.770\nNow when I say Linux,\nI'm using in a virtual machine,\n\n54\n00:02:52.770 --> 00:02:55.260\neverything should proceed accordingly.\n\n55\n00:02:55.260 --> 00:03:00.050\nBut keep in mind, this may vary a little\nbit depending on your Linux distribution\n\n56\n00:03:00.050 --> 00:03:01.130\nand what you've done.\n\n57\n00:03:01.130 --> 00:03:05.963\nSo in general, is the same but\nthere maybe some differences.\n\n58\n00:03:05.963 --> 00:03:08.476\nSo let's go ahead take\na look in my browser here.\n\n59\n00:03:08.476 --> 00:03:13.200\nAnd Ronnie, you ask about Linux,\nexcuse me, Docker for Linux.\n\n60\n00:03:13.200 --> 00:03:16.410\nAll right, Docker for Linux, here we go.\n\n61\n00:03:16.410 --> 00:03:21.080\nAnd Docker for Linux and okay,\nnow I know that Docker for Windows and\n\n62\n00:03:21.080 --> 00:03:22.900\nDocker for Mac.\n\n63\n00:03:22.900 --> 00:03:27.442\nWe're on the Docker Store, and\nI don't see anything there, so\n\n64\n00:03:27.442 --> 00:03:31.152\nmaybe I'll just go to\nDocker Store here real quick.\n\n65\n00:03:31.152 --> 00:03:38.097\nAnd so store.docker.com, and\nif I look for Docker for Linux.\n\n66\n00:03:41.514 --> 00:03:42.743\nMaybe.\n\n67\n00:03:44.221 --> 00:03:47.821\nAnd I wanted to show you this, because\nwhen you search in the Docker Store,\n\n68\n00:03:47.821 --> 00:03:51.596\nyou actually get containers, plugins,\nenterprise level Docker stuff, and\n\n69\n00:03:51.596 --> 00:03:52.990\ncommunity edition Docker.\n\n70\n00:03:52.990 --> 00:03:55.270\nSo we haven't looked at this before,\n\n71\n00:03:55.270 --> 00:03:57.490\nmainly because it's come out\nthrough our search engine.\n\n72\n00:03:57.490 --> 00:03:59.397\nBut you can search for the Docker Store.\n\n73\n00:03:59.397 --> 00:04:03.910\nNotice, I'm looking for the official\nstore, and not in the community.\n\n74\n00:04:03.910 --> 00:04:06.724\nIf I go to Docker Community Edition,\nI can start seeing, well,\n\n75\n00:04:06.724 --> 00:04:08.600\nhere's Docker Community Edition for AWS.\n\n76\n00:04:08.600 --> 00:04:13.598\nHere's Docker Community Edition for\nFedora, for CentOS,\n\n77\n00:04:13.598 --> 00:04:16.740\nfor Azure, for Ubuntu, for Debian.\n\n78\n00:04:16.740 --> 00:04:20.160\nAnd then there's our Mac and\nWindows as we've previously seen.\n\n79\n00:04:20.160 --> 00:04:24.069\nSo this is Ubuntu in a virtual machine,\nas I said.\n\n80\n00:04:24.069 --> 00:04:28.416\nNow, it may not look like Ubuntu,\ncuz I like customization,\n\n81\n00:04:28.416 --> 00:04:30.670\nI like tweaking on things.\n\n82\n00:04:30.670 --> 00:04:33.760\nI haven't messed around low level,\njust with the looks.\n\n83\n00:04:33.760 --> 00:04:36.928\nSo let's take a look at\nDocker Community Edition for Ubuntu.\n\n84\n00:04:36.928 --> 00:04:40.324\nYou're like, cool, I'm gonna have\na download, it's all gonna be good.\n\n85\n00:04:40.324 --> 00:04:41.039\nAnd in fact,\n\n86\n00:04:41.039 --> 00:04:45.330\nit's actually just the install\ninstructions from the other documentation.\n\n87\n00:04:46.910 --> 00:04:47.499\nWell, that's good to know.\n\n88\n00:04:47.499 --> 00:04:54.554\nSo to install Docker CE, you need a 64-bit\nversion of one of these Ubuntu versions.\n\n89\n00:04:54.554 --> 00:04:56.639\nYakety, Zinnial or Trusty.\n\n90\n00:04:56.639 --> 00:05:01.689\nThat's 1404, 1604,\nwhich were the last two long\n\n91\n00:05:01.689 --> 00:05:07.449\nterm stable releases and\nthen 1610 is the most recent release.\n\n92\n00:05:07.449 --> 00:05:10.647\nNow to set up,\nwhat's happening is in Linux,\n\n93\n00:05:10.647 --> 00:05:16.860\nyou're gonna use your Package Manager,\nwhether it be Aptitude or Yam or DNF.\n\n94\n00:05:16.860 --> 00:05:20.430\nDepending on what version you're using,\nyou're gonna use your package manager to\n\n95\n00:05:20.430 --> 00:05:22.650\nmanage your Docker version\nincluding updates and things.\n\n96\n00:05:22.650 --> 00:05:25.610\nAnd that's what I like about Linux is\n\n97\n00:05:25.610 --> 00:05:29.370\noriginally when I had to update on other\nplatforms I had to go seek those out.\n\n98\n00:05:29.370 --> 00:05:34.170\nWell if I set up through my package\nmanager on Linux it kinda just updated\n\n99\n00:05:34.170 --> 00:05:37.773\nwhen I ran my pseudo app update,\npseudo app upgrade.\n\n100\n00:05:37.773 --> 00:05:39.750\nAll right, so\nlet’s go ahead and get started.\n\n101\n00:05:39.750 --> 00:05:41.596\nNow, these are long lines.\n\n102\n00:05:41.596 --> 00:05:47.407\nSo, what will happen is,\nI will set this to the side here and\n\n103\n00:05:47.407 --> 00:05:50.110\nI will open a command line.\n\n104\n00:05:50.110 --> 00:05:51.620\nSo, here’s my terminal.\n\n105\n00:05:51.620 --> 00:05:54.210\nAnd again,\nit’s some customization that I made.\n\n106\n00:05:54.210 --> 00:05:57.984\nIt's just looks, it's nothing else,\nso everything looks good.\n\n107\n00:05:57.984 --> 00:06:03.070\nAnd it says if you're in Xenial or\nTrusty, do these steps.\n\n108\n00:06:03.070 --> 00:06:07.898\nOkay, so let's do these one at a time and\nfigure out what's going on here.\n\n109\n00:06:07.898 --> 00:06:14.780\nSo this, I have to right-click cuz my\nkey bindings are little different.\n\n110\n00:06:14.780 --> 00:06:17.610\nAnd there I go with my key binding,\nthere we go.\n\n111\n00:06:17.610 --> 00:06:23.230\nSo I'm using app to install\nthe app transport HTTPS package,\n\n112\n00:06:23.230 --> 00:06:25.150\nthe CA certificates, and curl.\n\n113\n00:06:25.150 --> 00:06:27.850\nCuz Curl's gonna be used and\nthe certificates are gonna be checked and\n\n114\n00:06:27.850 --> 00:06:28.776\nthings of that nature.\n\n115\n00:06:28.776 --> 00:06:31.500\nSo, I'm going to install.\n\n116\n00:06:31.500 --> 00:06:35.750\nAnd if you've never used Linux before,\nyou have to elevate your permissions,\n\n117\n00:06:35.750 --> 00:06:38.630\nyou have to be on the suite\nowners list to modify the system.\n\n118\n00:06:38.630 --> 00:06:43.780\nSo luckily for you, I've already installed\nit, so it doesn't take that long.\n\n119\n00:06:43.780 --> 00:06:48.730\nBut that's the first command, you need\nto let that run before the next portions\n\n120\n00:06:48.730 --> 00:06:51.980\nare available to you because\nnow we're gonna run curl.\n\n121\n00:06:51.980 --> 00:06:53.388\nSo what does Curl do?\n\n122\n00:06:53.388 --> 00:06:58.988\nCurl is an HTTP client among other things,\nit can be used for a bunch of things.\n\n123\n00:06:58.988 --> 00:07:00.578\nAnd then I'm gonna paste.\n\n124\n00:07:00.578 --> 00:07:04.928\nAnd what's happening is,\nit is fetching a GPG key and\n\n125\n00:07:04.928 --> 00:07:08.498\nadding that to your package manager.\n\n126\n00:07:08.498 --> 00:07:14.070\nSo I'm packing the results of\nCurl into apt key add and boom.\n\n127\n00:07:14.070 --> 00:07:15.900\nI got an okay if you're good there.\n\n128\n00:07:15.900 --> 00:07:17.670\nYou're good to move Next.\n\n129\n00:07:17.670 --> 00:07:20.332\nAnd then this last step\nhere during the setup,\n\n130\n00:07:20.332 --> 00:07:23.268\nbecause all we're doing is\nmodifying our system so\n\n131\n00:07:23.268 --> 00:07:27.790\nthat our package manager can maintain\nour Docker version, what's going on.\n\n132\n00:07:29.130 --> 00:07:32.650\nSo I'm gonna copy, and\nthen I'm gonna paste.\n\n133\n00:07:32.650 --> 00:07:39.000\nAnd I'm adding a repository listing to\nmy Debian list, to my aptitude list.\n\n134\n00:07:39.000 --> 00:07:45.640\nAnd there's a lot in here, does some\nevaluations for your particular version.\n\n135\n00:07:45.640 --> 00:07:49.738\nAnd well, I'll just hit Enter, and I'll\nmake sure that I don't get any errors.\n\n136\n00:07:49.738 --> 00:07:53.024\nAnd typically what I found is,\nsince Docker's been around for\n\n137\n00:07:53.024 --> 00:07:55.760\nawhile in Linux,\nthese are fairly well developed.\n\n138\n00:07:55.760 --> 00:07:59.591\nI don't have to worry about shenanigans,\nif you will.\n\n139\n00:07:59.591 --> 00:08:02.650\nBut now my system's set\nup to install Docker and\n\n140\n00:08:02.650 --> 00:08:06.410\nto keep track of version\nchanges within this repository.\n\n141\n00:08:06.410 --> 00:08:10.889\nSo I'm gonna clear it out here,\nso we can keep, let me zoom in.\n\n142\n00:08:10.889 --> 00:08:12.980\nNot there, over here.\n\n143\n00:08:12.980 --> 00:08:16.040\nAnd then I'm going to maybe zoom in.\n\n144\n00:08:16.040 --> 00:08:17.707\nNo, too far.\n\n145\n00:08:17.707 --> 00:08:22.670\nWell, guess,\nI'm gonna zoom in on my Firefox here.\n\n146\n00:08:22.670 --> 00:08:26.570\nI wanna run sudo apt-get\ninstall docker-ce.\n\n147\n00:08:26.570 --> 00:08:29.200\nNow, here's the first gotcha.\n\n148\n00:08:30.540 --> 00:08:33.215\nThis package name has changed.\n\n149\n00:08:33.215 --> 00:08:37.922\n[LAUGH] In aptitude and\nin yum over last few years.\n\n150\n00:08:37.922 --> 00:08:44.140\nActually, I just read an article that in\nFedora 20 it was called Docker Engine.\n\n151\n00:08:45.200 --> 00:08:47.200\nIn 21 it was called Docker.\n\n152\n00:08:47.200 --> 00:08:51.410\nAnd in 22,\nthey went back to Docker Engine.\n\n153\n00:08:51.410 --> 00:08:53.510\nIf I get my versions right, it was weird,\n\n154\n00:08:53.510 --> 00:08:56.440\nthere was one version of Fedora\nthat they changed the name.\n\n155\n00:08:56.440 --> 00:08:58.570\nAnd it was sandwiched between\ntwo different versions.\n\n156\n00:08:58.570 --> 00:09:03.320\nSo you definitely look this up for\nyour particular Linux install,\n\n157\n00:09:03.320 --> 00:09:07.610\nwhether it be a Debian-based system or\na RedHat-based system.\n\n158\n00:09:07.610 --> 00:09:14.105\nSo I'm gonna sudo apt-get\ninstall docker-ce.\n\n159\n00:09:14.105 --> 00:09:19.717\nAnd I'm not gonna put the -y there because\nI want to, well, it did it anyway.\n\n160\n00:09:19.717 --> 00:09:22.298\n&gt;&gt; [LAUGH]\n&gt;&gt; Now, well, I wanted it to stop,\n\n161\n00:09:22.298 --> 00:09:27.022\nbecause there's actually some additional\ndependencies that you will see that I\n\n162\n00:09:27.022 --> 00:09:30.880\ndid not, because I had already installed,\nuninstalled.\n\n163\n00:09:30.880 --> 00:09:35.173\nThere should be two other dependencies\nthat have to do with AUFS,\n\n164\n00:09:35.173 --> 00:09:39.323\nwhich is a file system type that\nDocker actually runs on top of.\n\n165\n00:09:39.323 --> 00:09:42.605\nSo the container,\nthe actual Docker container,\n\n166\n00:09:42.605 --> 00:09:47.528\nit's kinda just a glorified file system\nthat allows sequestering of these\n\n167\n00:09:47.528 --> 00:09:51.450\nrun times in the separate files,\nif you will, or folders.\n\n168\n00:09:51.450 --> 00:09:53.830\nIt's a little more complex than that.\n\n169\n00:09:53.830 --> 00:09:57.206\nBut you will have additional dependencies\nthat you have to install when you\n\n170\n00:09:57.206 --> 00:09:58.016\ninstall Docker.\n\n171\n00:09:58.016 --> 00:10:02.920\nNow, if I clear, well,\nit looks like I have an install.\n\n172\n00:10:02.920 --> 00:10:08.606\nAll right, so I'm gonna make sure\nthat I have Docker version and\n\n173\n00:10:08.606 --> 00:10:11.359\nI have my client and my server.\n\n174\n00:10:11.359 --> 00:10:13.227\nNow since I have already run this.\n\n175\n00:10:15.781 --> 00:10:18.200\nNotice I was able to write Docker version.\n\n176\n00:10:19.210 --> 00:10:23.800\nIf you look at the the actual\ninstallation instructions, like here,\n\n177\n00:10:23.800 --> 00:10:27.130\nit says run sudo Docker.\n\n178\n00:10:27.130 --> 00:10:31.140\nAnd that's because they're post\ninstallation steps that I recommend\n\n179\n00:10:31.140 --> 00:10:34.695\nundertaking, otherwise,\nyou're gonna have to write sudo.\n\n180\n00:10:34.695 --> 00:10:39.317\nAnd actually, depending on how you\nwrite your containers and manage those,\n\n181\n00:10:39.317 --> 00:10:43.780\nyou may run into some weird errors\nthat don't bubble to the top.\n\n182\n00:10:43.780 --> 00:10:45.400\nLike things just fail and\nyou don't know why,\n\n183\n00:10:45.400 --> 00:10:50.140\nand that's because Docker,\nwell it's running in a weird play.\n\n184\n00:10:50.140 --> 00:10:54.773\nLike if you wanna automate something,\nwell sudo, it's gonna ask you for\n\n185\n00:10:54.773 --> 00:10:57.770\nyour password unless you\nchange the settings.\n\n186\n00:10:57.770 --> 00:11:01.640\nAnd well, I just don't like\nhaving the right sudo or sudo.\n\n187\n00:11:02.770 --> 00:11:05.940\nSo I'm gonna click on\nOptional Post-installation Steps.\n\n188\n00:11:05.940 --> 00:11:08.890\nAnd ultimately what it comes down\nto is you have to add a group.\n\n189\n00:11:10.310 --> 00:11:13.020\nYou have to modify the Docker user.\n\n190\n00:11:13.020 --> 00:11:16.110\nAnd then, you actually have to log out and\nlog back in.\n\n191\n00:11:16.110 --> 00:11:17.320\nAnd that's it.\n\n192\n00:11:17.320 --> 00:11:21.240\nI recommend doing this, because having\nto type sudo in your password every time\n\n193\n00:11:21.240 --> 00:11:24.280\nyou wanna mess with Docker,\nbecomes a little annoying, and\n\n194\n00:11:24.280 --> 00:11:27.590\ncan actually cause silent failure\nin certain build processes.\n\n195\n00:11:29.130 --> 00:11:31.538\nSo, Docker version works.\n\n196\n00:11:31.538 --> 00:11:34.240\nNow we have to check for our install.\n\n197\n00:11:36.420 --> 00:11:40.340\nDocker Compose version,\nDocker Compose is not found.\n\n198\n00:11:41.970 --> 00:11:43.260\nWell, hold on a second.\n\n199\n00:11:43.260 --> 00:11:47.410\nIn Windows and in Mac,\neverything was installed all in one.\n\n200\n00:11:47.410 --> 00:11:53.190\nThis is kind of a different scenario,\ncuz maybe I just need the Docker engine.\n\n201\n00:11:53.190 --> 00:11:58.860\nI don't necessarily need all of\nthose tools, cuz this Linux,\n\n202\n00:11:58.860 --> 00:12:03.790\nthis Linux VM or this Linux container or\n\n203\n00:12:03.790 --> 00:12:09.000\nthis Linux instance may actually be\nthe base level runtime that is just\n\n204\n00:12:09.000 --> 00:12:12.860\nrunning a bunch of containers that doesn't\nneed all the tools for development.\n\n205\n00:12:12.860 --> 00:12:17.500\nBut I know this is on mine, so\nwe want Compose and Machine,\n\n206\n00:12:17.500 --> 00:12:20.260\nas we'll see how to use\nthose in later episodes.\n\n207\n00:12:20.260 --> 00:12:22.086\nBefore we move on though,\n\n208\n00:12:22.086 --> 00:12:26.905\nI do wanna let you know there are some\nother things that you can tweak.\n\n209\n00:12:26.905 --> 00:12:31.785\nWhat I typically recommend on Linux\nis don't go start tweaking a bunch of\n\n210\n00:12:31.785 --> 00:12:32.791\nthings-\n&gt;&gt; [LAUGH]\n\n211\n00:12:32.791 --> 00:12:34.851\n&gt;&gt; Until you know you need to tweak them.\n\n212\n00:12:34.851 --> 00:12:38.624\nAll right, I could go through\nall of these other things,\n\n213\n00:12:38.624 --> 00:12:42.210\nlike on system start up,\nthings of that nature.\n\n214\n00:12:42.210 --> 00:12:45.057\nMaybe that one's a little better, but\n\n215\n00:12:45.057 --> 00:12:49.980\nthat's usually either System CTL or\nsomething of similar nature.\n\n216\n00:12:49.980 --> 00:12:51.312\nWhen your computer starts up,\n\n217\n00:12:51.312 --> 00:12:53.730\nit just starts up like we would\nsee in any other dockers.\n\n218\n00:12:53.730 --> 00:12:58.052\nBut some of the other configurations,\nI would stay away from them until you have\n\n219\n00:12:58.052 --> 00:13:01.710\na particular use case and\njust go with default settings.\n\n220\n00:13:01.710 --> 00:13:04.718\nCuz then if things break,\nyou know that they're broken not because\n\n221\n00:13:04.718 --> 00:13:07.220\nyou've been tweaking, but\nbecause of other reasons.\n\n222\n00:13:07.220 --> 00:13:11.534\nAnd it just helps with\nwrapping your mind around it.\n\n223\n00:13:11.534 --> 00:13:16.215\nSo, how do I need Docker Compose?\n\n224\n00:13:16.215 --> 00:13:21.327\nAnd then I'm just gonna say\nDocker Compose install Linux.\n\n225\n00:13:21.327 --> 00:13:23.300\nAnd install Docker Compose.\n\n226\n00:13:23.300 --> 00:13:29.030\nNow, the docks have gotten\na great deal better.\n\n227\n00:13:29.030 --> 00:13:30.540\nThey used to be kind of sparse,\n\n228\n00:13:30.540 --> 00:13:34.438\nbut the official Docker docks,\nthat's kind of an odd thing to say.\n\n229\n00:13:34.438 --> 00:13:37.597\n&gt;&gt; [LAUGH]\n&gt;&gt; Docker docs have gotten better, and\n\n230\n00:13:37.597 --> 00:13:42.638\nyou can follow the same installation\npretty much for Mac OS, Windows,\n\n231\n00:13:42.638 --> 00:13:48.060\nand for Linux, and only have Docker\nengine and not all the other tools.\n\n232\n00:13:48.060 --> 00:13:49.152\nI know I wanna use the other tools.\n\n233\n00:13:49.152 --> 00:13:55.410\nBut in Linux, there's other things that\nI need to do to have Docker Compose.\n\n234\n00:13:56.730 --> 00:14:00.085\nAnd the following is an example\ncommand illustrating the format.\n\n235\n00:14:00.085 --> 00:14:02.840\nOkay so let's see, let's read this.\n\n236\n00:14:04.340 --> 00:14:08.903\nIf you use Docker toolbox,\nthis is already done, but for\n\n237\n00:14:08.903 --> 00:14:13.087\nLinux, we need to actually\ndownload the compose for\n\n238\n00:14:13.087 --> 00:14:16.621\na particular version of Linux and\ndo stuff.\n\n239\n00:14:16.621 --> 00:14:18.740\nSo I'm going to copy this.\n\n240\n00:14:21.704 --> 00:14:24.800\nAnd paste this, as such, maybe.\n\n241\n00:14:26.330 --> 00:14:27.261\nThere we go.\n\n242\n00:14:27.261 --> 00:14:29.981\nAnd then, this will run a curl command.\n\n243\n00:14:29.981 --> 00:14:32.340\nIt will download.\n\n244\n00:14:32.340 --> 00:14:36.800\nAnd this usually goes fairly quickly,\npermission denied.\n\n245\n00:14:36.800 --> 00:14:39.690\nNow, this was good that we’ve seen this.\n\n246\n00:14:39.690 --> 00:14:43.686\nBecause I was trying to\nput it in user local bin.\n\n247\n00:14:43.686 --> 00:14:46.290\nI don't necessarily have access.\n\n248\n00:14:46.290 --> 00:14:50.150\nIf you get a permission denied error, your\nuser local bin directory probably isn't\n\n249\n00:14:50.150 --> 00:14:53.840\nwritable, you need to install Docker\ncompose as a super user, sudo-i,\n\n250\n00:14:53.840 --> 00:14:56.810\nthen the commands, and then exit.\n\n251\n00:14:56.810 --> 00:14:59.990\nSo we're gonna interactively\nelevate our permissions so\n\n252\n00:14:59.990 --> 00:15:02.170\nwe can do these two commands.\n\n253\n00:15:02.170 --> 00:15:04.914\nBut then we're gonna back out\nto our standard user level so\n\n254\n00:15:04.914 --> 00:15:07.725\nwe don't accidentally do\nsomething like rm dash rm slash.\n\n255\n00:15:07.725 --> 00:15:12.480\n&gt;&gt; [LAUGH]\n&gt;&gt; Which I've seen people, whoopsie daisy.\n\n256\n00:15:12.480 --> 00:15:16.010\nSo sudo-i, and now I'm the root.\n\n257\n00:15:16.010 --> 00:15:18.610\nI'm gonna paste that command again.\n\n258\n00:15:18.610 --> 00:15:24.681\nAnd now, okay, that works and then apply\nexecutable permissions to the binary.\n\n259\n00:15:24.681 --> 00:15:30.320\nSo chmod\n/user/local/bin/docker-compose and\n\n260\n00:15:30.320 --> 00:15:39.150\nthen here's something I recommend you\ntaking a look at when you have time.\n\n261\n00:15:39.150 --> 00:15:44.540\nYou can find Bash and\nZ shell completions, like autocomplete.\n\n262\n00:15:44.540 --> 00:15:46.960\nSo when you hit Tab,\nthe commands will be recognized.\n\n263\n00:15:46.960 --> 00:15:50.490\nDefinitely check those out, that is\none tweak that I recommend, Ronnie.\n\n264\n00:15:50.490 --> 00:15:52.485\nBut I think it's a little beyond scope for\n\n265\n00:15:52.485 --> 00:15:54.766\nthe things we're gonna\nbe using it initially.\n\n266\n00:15:54.766 --> 00:15:56.970\nAnd now, let's try,\nwell, we've gotta exit.\n\n267\n00:15:56.970 --> 00:16:02.284\nLet's say, docker-compose Version.\n\n268\n00:16:02.284 --> 00:16:06.120\nAnd now we have Docker Compose\nwith executable permissions.\n\n269\n00:16:06.120 --> 00:16:07.163\nEverything's good to go.\n\n270\n00:16:07.163 --> 00:16:14.622\nNow, finally we have the last tool,\nand that's Docker Machine.\n\n271\n00:16:16.638 --> 00:16:18.200\nDocker Machine's not found.\n\n272\n00:16:18.200 --> 00:16:19.936\nRonnie, I'm gonna have to ask you,\n\n273\n00:16:19.936 --> 00:16:22.571\nwhat do you think has happened\nwith the Docker Machine?\n\n274\n00:16:22.571 --> 00:16:27.950\n&gt;&gt; I'm assuming it just didn't get\nadded in in the package that we needed.\n\n275\n00:16:27.950 --> 00:16:31.830\n&gt;&gt; Ronnie has been listening, it makes me\nhappy, it makes me giddy on the inside.\n\n276\n00:16:31.830 --> 00:16:34.490\nSo thank you, Ronnie, you've made my day.\n\n277\n00:16:34.490 --> 00:16:35.700\nBut you're absolutely correct.\n\n278\n00:16:35.700 --> 00:16:38.850\nJust like we've seen\nDocker Compose is not part of that\n\n279\n00:16:38.850 --> 00:16:42.250\nAptitude repository Docker\nengine is not as well.\n\n280\n00:16:42.250 --> 00:16:47.110\nSo I suspect a little quick\nsearch engine incantation.\n\n281\n00:16:47.110 --> 00:16:51.420\nSo Docker Machine, Linux\n\n282\n00:16:52.570 --> 00:16:56.570\ninstall and\nhere we go to install Docker Machine.\n\n283\n00:16:56.570 --> 00:16:58.140\nNotice it's official docs again.\n\n284\n00:16:59.620 --> 00:17:02.060\nI would recommend, because of\nthe development cycle of Docker,\n\n285\n00:17:02.060 --> 00:17:06.110\nto stay with the official docks until you\nget fairly comfortable, cuz you will find\n\n286\n00:17:06.110 --> 00:17:10.370\nold versions that no longer apply, or\npeople are using experimental things.\n\n287\n00:17:11.570 --> 00:17:14.210\nStay with the official docks initially,\nall right?\n\n288\n00:17:14.210 --> 00:17:17.730\nSo if we want to install Docker Machine,\ninstall the Docker Binary.\n\n289\n00:17:17.730 --> 00:17:18.636\nWe've already done that.\n\n290\n00:17:18.636 --> 00:17:22.360\nNotice this giant command right here, and\n\n291\n00:17:22.360 --> 00:17:28.740\nnotice I'm going in to, but\nit's coupled with a sudo anyway.\n\n292\n00:17:28.740 --> 00:17:33.140\nSo let's copy this over here,\ncuz it's kinda hard to read in there.\n\n293\n00:17:33.140 --> 00:17:38.610\nSo copy, and then I'm going to clear and\nthen let's paste.\n\n294\n00:17:38.610 --> 00:17:44.250\nSo I have a curl and that's gonna\nbe put into a temporary file, and\n\n295\n00:17:44.250 --> 00:17:46.500\nit's format particular Linux distribution.\n\n296\n00:17:48.180 --> 00:17:51.910\nAnd I'm gonna change its\nexecutable permissions, or\n\n297\n00:17:51.910 --> 00:17:56.140\nits executable, Ronnie, help me, help me.\n\n298\n00:17:56.140 --> 00:17:59.762\nIts executable,\nwe're gonna add executable ability.\n\n299\n00:17:59.762 --> 00:18:00.311\n&gt;&gt; Depressions.\n\n300\n00:18:00.311 --> 00:18:01.183\n&gt;&gt; Yeah, yeah.\n\n301\n00:18:01.183 --> 00:18:03.821\n&gt;&gt; [LAUGH]\n&gt;&gt; To the Docker Machine file and\n\n302\n00:18:03.821 --> 00:18:08.430\nthen we're going to copy it to\nuser local bin docker machine.\n\n303\n00:18:08.430 --> 00:18:11.240\nThese are the same three\nsteps that we did with,\n\n304\n00:18:12.250 --> 00:18:15.300\nwell that we did with our Docker Compose.\n\n305\n00:18:15.300 --> 00:18:20.220\nWe just did them individually and we put\nDocker Compose directly in user local bin,\n\n306\n00:18:20.220 --> 00:18:23.500\nso they've probably learned a little\nsomething that people had issues with that\n\n307\n00:18:23.500 --> 00:18:26.850\nand have changed Docker Machine or\nmaybe someone else wrote these docs.\n\n308\n00:18:26.850 --> 00:18:32.380\nSo let's hit Enter and wait for\nit, wait for it, wait for it.\n\n309\n00:18:32.380 --> 00:18:35.920\nNow Docker Machine is a little\nlarger because it's managing some\n\n310\n00:18:35.920 --> 00:18:39.240\nunderlying virtualization layers and\nthings like that.\n\n311\n00:18:39.240 --> 00:18:43.990\nHas drivers for AWS, Azure,\nVirtual Box and such.\n\n312\n00:18:43.990 --> 00:18:50.409\nSo now if I say, Docker Machine and\nwait for it, it's kind of hard to read.\n\n313\n00:18:50.409 --> 00:18:56.780\nDocker Machine version,\nI now have the version output.\n\n314\n00:18:56.780 --> 00:19:00.360\nAll of our environments, Ronnie,\nare now on equal footing.\n\n315\n00:19:00.360 --> 00:19:04.230\nAgain, we have unified this development\nworkflow to where I don't have to go,\n\n316\n00:19:04.230 --> 00:19:07.870\nwell are you on Mac or are you,\nif we're all using Docker for\n\n317\n00:19:07.870 --> 00:19:09.800\nour development we're good.\n\n318\n00:19:09.800 --> 00:19:13.440\nAnd I know that there are some\nother IT professionals that, well,\n\n319\n00:19:13.440 --> 00:19:19.710\nwe don't have to worry if we're playing\naround on Windows or Linux or Mac OS,\n\n320\n00:19:19.710 --> 00:19:23.900\nI can simulate these environments with\nDocker or some other container runtime.\n\n321\n00:19:23.900 --> 00:19:27.637\nBut Docker is the bees knees if it will.\n\n322\n00:19:27.637 --> 00:19:31.452\n&gt;&gt; [LAUGH] All right Justin, now let\nme ask you a question since you just\n\n323\n00:19:31.452 --> 00:19:34.220\nmentioned this and\nit just came to my head here.\n\n324\n00:19:34.220 --> 00:19:38.000\nSo regardless of what operating system\nthat I may be using or you may be using,\n\n325\n00:19:38.000 --> 00:19:41.720\nit gives us a unified environment that we\nare all pretty much work on same thing.\n\n326\n00:19:41.720 --> 00:19:45.445\nBut are there any limitations that you\nknow about if I happen to be running,\n\n327\n00:19:45.445 --> 00:19:48.050\nlet's say that, I'm on Windows but\nyou are on Linux,\n\n328\n00:19:48.050 --> 00:19:52.930\ndoes one OS give us a fuller functionality\nor anything that I might have to consider?\n\n329\n00:19:52.930 --> 00:19:56.280\nSo Ron, I have heard individuals talk\nabout even different versions of Linux,\n\n330\n00:19:56.280 --> 00:19:59.870\nwhether it be a RedHat or\na Debian distribution or\n\n331\n00:19:59.870 --> 00:20:03.170\nsome other distribution,\nwhere there's little bugs and quirks.\n\n332\n00:20:03.170 --> 00:20:05.174\nSo definitely keep a look out on those.\n\n333\n00:20:05.174 --> 00:20:09.178\nIn my typical practice, because I'm\nusing this in development workflow,\n\n334\n00:20:09.178 --> 00:20:10.650\nit doesn't crop up.\n\n335\n00:20:10.650 --> 00:20:15.490\nBut if you're really trying to dig into\nsome low level functionality, it very well\n\n336\n00:20:15.490 --> 00:20:20.370\nmay be a possibility that\nthose things come up.\n\n337\n00:20:20.370 --> 00:20:21.037\n&gt;&gt; All right, Justin.\n\n338\n00:20:21.037 --> 00:20:24.605\nNow anything else to consider when\nhaving to install inside of Linux?\n\n339\n00:20:24.605 --> 00:20:26.290\nYou showed us quite a bit here.\n\n340\n00:20:26.290 --> 00:20:28.080\nIt's actually a little bit over my head.\n\n341\n00:20:28.080 --> 00:20:33.100\nBut overall though, it was actually\nneat to see that ability to get it\n\n342\n00:20:33.100 --> 00:20:38.110\nrunning on Linux, as well as in a previous\nepisode, on Mac and Windows as well.\n\n343\n00:20:38.110 --> 00:20:42.418\nSo any last minute things that you would\nrecommend if somebody's saying, all right,\n\n344\n00:20:42.418 --> 00:20:46.148\nI'm ready to get started on Linux,\nany tips that you can provide for them?\n\n345\n00:20:46.148 --> 00:20:50.190\n&gt;&gt; Well, I think you brought\nup a great point, right.\n\n346\n00:20:50.190 --> 00:20:51.150\nI moved a little fast.\n\n347\n00:20:51.150 --> 00:20:52.980\nThere's a lot going on there.\n\n348\n00:20:52.980 --> 00:20:56.680\nTypically what I, my mantra as\na developer is get it working.\n\n349\n00:20:56.680 --> 00:20:57.949\nSo I go to the docks, and\n\n350\n00:20:57.949 --> 00:21:01.897\nI do exactly what they tell me to do,\neven if maybe I don't understand it.\n\n351\n00:21:01.897 --> 00:21:04.471\nNow that's one of the bright sides of,\n\n352\n00:21:04.471 --> 00:21:07.828\nyou know I'm not necessarily\ncommitting to this.\n\n353\n00:21:07.828 --> 00:21:10.378\nThe documentation is\nfairly well-developed so\n\n354\n00:21:10.378 --> 00:21:13.540\nyou don't have to worry about shenanigans.\n\n355\n00:21:13.540 --> 00:21:17.130\nWhen in doubt,\ndefinitely try to break it down and say,\n\n356\n00:21:17.130 --> 00:21:20.840\nis this going to do,\nis that what I expect it to do?\n\n357\n00:21:20.840 --> 00:21:21.960\nWhat is curl, right?\n\n358\n00:21:21.960 --> 00:21:23.410\nI don't know what curl is.\n\n359\n00:21:23.410 --> 00:21:28.790\nSo maybe I do a quick aside,\nwhat is curl, so I don't worry myself.\n\n360\n00:21:28.790 --> 00:21:33.130\nBut most of the time when I first install,\nit's just copy and paste those commands.\n\n361\n00:21:33.130 --> 00:21:37.830\nBecause I know that these are as\npopular as Docker is people be like,\n\n362\n00:21:37.830 --> 00:21:40.978\nhey that's bad, so-\n&gt;&gt; I was just coming\n\n363\n00:21:40.978 --> 00:21:42.062\nup with one more question.\n\n364\n00:21:42.062 --> 00:21:45.763\nI don't mean to throw you off on this but\nlet's think about this,\n\n365\n00:21:45.763 --> 00:21:49.332\nbecause of the way that we're\ntalking about uninstalling is,\n\n366\n00:21:49.332 --> 00:21:53.070\ndoes it matter if my machine is 64-bit or\n32-bit in Docker?\n\n367\n00:21:53.070 --> 00:21:55.680\n&gt;&gt; That is a great question,\nand actually, what I recommend,\n\n368\n00:21:55.680 --> 00:21:58.320\nI think there's a way to do 32-bit Linux.\n\n369\n00:21:59.730 --> 00:22:03.927\nDon't quote me on that, because Docker\nhas been shown to run on different\n\n370\n00:22:03.927 --> 00:22:07.122\narchitectures other than x86,\nor x86 64-bit.\n\n371\n00:22:07.122 --> 00:22:07.926\n&gt;&gt; Mm-hm.\n\n372\n00:22:07.926 --> 00:22:12.221\n&gt;&gt; But the recommendation, and\nyou will have trouble in Windows and\n\n373\n00:22:12.221 --> 00:22:14.970\nMac if you have a 32-bit system.\n\n374\n00:22:14.970 --> 00:22:20.130\nIt'll actually just disallow to keep\neverything just so, because it's written\n\n375\n00:22:21.240 --> 00:22:25.840\nfairly ubiquitously, make sure you\nhave 64-bit if at all possible.\n\n376\n00:22:25.840 --> 00:22:29.110\n&gt;&gt; Sounds like a great hint to get\nstarted, especially if you're brand new to\n\n377\n00:22:29.110 --> 00:22:31.740\nthis and you run into that every\ntime that you go install it.\n\n378\n00:22:31.740 --> 00:22:32.650\nWhy isn't it working?\n\n379\n00:22:32.650 --> 00:22:35.442\nAnd maybe something just as\nsimple as what we just mentioned.\n\n380\n00:22:35.442 --> 00:22:36.090\n&gt;&gt; Mm-hm.\n\n381\n00:22:36.090 --> 00:22:37.990\n&gt;&gt; All right, Justin, again thank you for\n\n382\n00:22:37.990 --> 00:22:41.440\nshowing us how to get\nDocker installed on Linux.\n\n383\n00:22:41.440 --> 00:22:44.420\nRemember, that's what you saw in this\nepisode and the different commands that we\n\n384\n00:22:44.420 --> 00:22:48.360\nneed to think about when getting\nthe installation ready, or\n\n385\n00:22:48.360 --> 00:22:53.740\nthe Docker installation,\nto get it working on inside of Linux.\n\n386\n00:22:53.740 --> 00:22:58.464\nIt's not as, I'm gonna say easy,\nas what you tended to see inside of\n\n387\n00:22:58.464 --> 00:23:03.678\nthe Mac OS install, or the Windows OS\ninstall but it is a great time at least,\n\n388\n00:23:03.678 --> 00:23:08.016\nfor you to get a little bit deeper\ninto the way that Linux works.\n\n389\n00:23:08.016 --> 00:23:10.570\nAnd some of the permissions\nthat you have to assign,\n\n390\n00:23:10.570 --> 00:23:14.690\nas well as getting all those other\npackages working the way that we need to.\n\n391\n00:23:14.690 --> 00:23:17.060\nSo don't bypass it just\nbecause it's difficult.\n\n392\n00:23:17.060 --> 00:23:20.470\nIt is something that if you're going into\ndevelopmental world, you definitely need\n\n393\n00:23:20.470 --> 00:23:24.380\nto have at least a basic grasp on and\nyou wanna develop those skills.\n\n394\n00:23:24.380 --> 00:23:25.400\nAnd so Justin,\n\n395\n00:23:25.400 --> 00:23:29.440\nduring these past couple of episodes\nhas helped us to be able to do that.\n\n396\n00:23:29.440 --> 00:23:33.250\nSo that's a great place for\nus also to end this episode then.\n\n397\n00:23:33.250 --> 00:23:36.900\nSigning off for ITProTV,\nI've been your host, Ronnie Wong.\n\n398\n00:23:36.900 --> 00:23:38.090\n&gt;&gt; And I'm Justin Dennison.\n\n399\n00:23:38.090 --> 00:23:42.053\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n400\n00:23:42.053 --> 00:23:49.157\n[MUSIC]\n\n401\n00:23:49.157 --> 00:23:52.164\nThank you for watching ITProTV.\n\n",
          "vimeoId": "209766200"
        },
        {
          "description": "In this episode, Ronnie and Justin take through how to get your first docker container running. They look at starting and stop containers.  Justin helps us to understand the relationship between images and containers too and how to get images.  They also discuss how to make sure a container doesn’t hijack your stdout and see them running!",
          "length": "1736",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-3-1-running_your_first_docker_container-032217.00_33_17_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-3-1-running_your_first_docker_container-032217.00_33_17_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-3-1-running_your_first_docker_container-032217.00_33_17_07.Still001-sm.jpg",
          "title": "Running Your First Docker Container",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:01.107\nWelcome to ITProTV.\n\n2\n00:00:01.107 --> 00:00:08.261\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:08.261 --> 00:00:11.964\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.964 --> 00:00:15.580\n&gt;&gt; Welcome to another\ngreat episode of ITProTV.\n\n5\n00:00:15.580 --> 00:00:17.020\nI'm your host, Ronnie Wong.\n\n6\n00:00:17.020 --> 00:00:19.180\nAnd today,\nyou're watching Introduction to Docker.\n\n7\n00:00:19.180 --> 00:00:23.300\nwe're going to be specifically diving\ninto, of course, how to get Docker up and\n\n8\n00:00:23.300 --> 00:00:27.217\nrunning on your own computer right\naway and here to help us out is Mr.\n\n9\n00:00:27.217 --> 00:00:27.800\nJustin Dennison.\n\n10\n00:00:27.800 --> 00:00:29.840\nJustin, how is it going?\n\n11\n00:00:29.840 --> 00:00:32.090\n&gt;&gt; It is going fairly well\nRonnie how are you today?\n\n12\n00:00:32.090 --> 00:00:33.480\n&gt;&gt; I am doing great.\n\n13\n00:00:33.480 --> 00:00:37.010\nReady for another exciting day\nin taking a look at Docker, and\n\n14\n00:00:37.010 --> 00:00:41.710\nactually getting the, everything we need\nup and running, and doing what we need to.\n\n15\n00:00:41.710 --> 00:00:43.120\nSo Justin, where are we going to begin?\n\n16\n00:00:43.120 --> 00:00:45.580\n&gt;&gt; Well, the, you know, in the previous\nepisode, you can go back and\n\n17\n00:00:45.580 --> 00:00:48.460\ncheck those out, we went through\nthe installation process of Docker.\n\n18\n00:00:48.460 --> 00:00:53.300\nMake sure everything was set up, so now we\ncan, what's the ultimate goal of Docker?\n\n19\n00:00:53.300 --> 00:00:56.900\nTo be able to spin up these containers,\nif you will.\n\n20\n00:00:56.900 --> 00:00:59.070\nVery quickly using the Docker client.\n\n21\n00:00:59.070 --> 00:01:00.760\nNow, in this episode,\n\n22\n00:01:00.760 --> 00:01:06.530\nI'm gonna focus predominantly on the\nDocker client, the command line interface.\n\n23\n00:01:06.530 --> 00:01:11.230\nBut, I may switch here and there, and show\nyou through the Windows, so in Mac and\n\n24\n00:01:11.230 --> 00:01:15.260\nWindows, there are similar GUI\ninterfaces for launching containers.\n\n25\n00:01:15.260 --> 00:01:19.030\nJust to show you they're there, but\nthe command line interface is the same on\n\n26\n00:01:19.030 --> 00:01:24.000\nLinux, Windows, and Mac, so we're going\nto try to keep that fairly uniform.\n\n27\n00:01:24.000 --> 00:01:27.750\nSo the first you want to do is,\nwell, launch a container.\n\n28\n00:01:27.750 --> 00:01:31.510\nHow do I actually run something, and\nin the command line interface one\n\n29\n00:01:31.510 --> 00:01:36.420\nof the most daunting things is all of\nthe sub commands and all of the flags.\n\n30\n00:01:36.420 --> 00:01:38.470\nRight, like -D, -P.\n\n31\n00:01:38.470 --> 00:01:40.610\nWhat do these things do?\n\n32\n00:01:40.610 --> 00:01:43.280\nWell, we take it one step at a time and\n\n33\n00:01:43.280 --> 00:01:48.840\nhopefully we'll navigate ourselves through\nthese milky waters and into clear waters.\n\n34\n00:01:48.840 --> 00:01:52.710\nSo let's go and take a look at my screen\nhere and one of the first things I always\n\n35\n00:01:52.710 --> 00:01:57.670\ndo when I launch even though my\nDocker daemon is registered start on\n\n36\n00:01:57.670 --> 00:02:00.840\nstartup of my computer,\nI like to make sure it is running.\n\n37\n00:02:01.910 --> 00:02:05.540\nOn a Mac or Windows I can just\nclick a little Docker well and\n\n38\n00:02:05.540 --> 00:02:07.660\nit will say hey the Docker is running.\n\n39\n00:02:07.660 --> 00:02:13.590\nHowever, how do I do that if I don't\nhave that little task bar icon?\n\n40\n00:02:14.780 --> 00:02:17.710\nYou can always say Docker version and\n\n41\n00:02:17.710 --> 00:02:22.550\nas long as you get the client and\nthe server output you're good to go, okay?\n\n42\n00:02:22.550 --> 00:02:25.870\nSo Docker server client,\nwe should be good to go.\n\n43\n00:02:25.870 --> 00:02:29.910\nLet's see how easy it is to actually\nget a container up and running.\n\n44\n00:02:29.910 --> 00:02:33.530\nNow, I'm going to use\na container called busy box.\n\n45\n00:02:33.530 --> 00:02:37.620\nIt's a tiny, tiny little container and\nI'm doing this just because.\n\n46\n00:02:37.620 --> 00:02:43.050\nWell, sometimes these Docker things\ntake awhile to actually download.\n\n47\n00:02:43.050 --> 00:02:48.870\nSo just for expeditious, keeping time\nshort, we're going to use a smaller one.\n\n48\n00:02:48.870 --> 00:02:52.260\nSo I'm going to say Docker,\nand then Docker run.\n\n49\n00:02:52.260 --> 00:02:57.030\nNow run is a subcommand of Docker,\nand that's going to allow us to, well,\n\n50\n00:02:57.030 --> 00:02:57.730\nrun a container.\n\n51\n00:02:57.730 --> 00:03:02.030\nIt'll actually create a container and\nI'm gonna give it a container name.\n\n52\n00:03:02.030 --> 00:03:06.570\nAnd I'm using busybox which is\na tiny implementation of Linux.\n\n53\n00:03:06.570 --> 00:03:09.230\nI think it's something like\nseven megabytes in size, but\n\n54\n00:03:09.230 --> 00:03:11.640\nit gives you a full Linux runtime.\n\n55\n00:03:11.640 --> 00:03:15.530\nAnd this is nice if you just\nneed tiny little pieces for\n\n56\n00:03:15.530 --> 00:03:17.080\nthe underlying Linux runtime.\n\n57\n00:03:17.080 --> 00:03:18.810\nSo I'm gonna run busybox.\n\n58\n00:03:18.810 --> 00:03:24.180\nAnd notice it says, unable to find\nimage 'busybox:latest' locally.\n\n59\n00:03:25.570 --> 00:03:27.820\nThat means it's not on my machine.\n\n60\n00:03:27.820 --> 00:03:29.680\nNow in preparation for this I went and\n\n61\n00:03:29.680 --> 00:03:35.260\nwiped everything like a brand new install\nso you can see what you're going to see.\n\n62\n00:03:35.260 --> 00:03:36.920\nWhen you first do this.\n\n63\n00:03:36.920 --> 00:03:43.200\nCannot find it locally pulling from\nlibrary/busybox, and there we go.\n\n64\n00:03:43.200 --> 00:03:45.025\nI like how it jumps down when I zoom in.\n\n65\n00:03:45.025 --> 00:03:46.510\nlibrary/busybox.\n\n66\n00:03:46.510 --> 00:03:49.340\nWell we'll talk about where that's\ncoming from in just a moment.\n\n67\n00:03:49.340 --> 00:03:51.770\nAnd then this digest.\n\n68\n00:03:51.770 --> 00:03:56.540\nDocker always keeps tabs\nof things using sha256\n\n69\n00:03:58.140 --> 00:04:02.500\nhashes and that way we don't have\nany issues with hash collision and\n\n70\n00:04:02.500 --> 00:04:07.240\nyou can use it for verification purposes,\nso I know when things have changed.\n\n71\n00:04:07.240 --> 00:04:09.210\nAnd we'll talk about how that's utilized.\n\n72\n00:04:09.210 --> 00:04:10.400\nDownloaded newer image.\n\n73\n00:04:10.400 --> 00:04:16.320\nNow it happened so quickly that it\ndidn't look like it did anything.\n\n74\n00:04:16.320 --> 00:04:21.090\nHow do I know if a container's running?\n\n75\n00:04:21.090 --> 00:04:26.498\nI'm gonna actually say Docker,\nyou got to actually spell it right Ronnie,\n\n76\n00:04:26.498 --> 00:04:28.640\nthat's important, ps.\n\n77\n00:04:28.640 --> 00:04:30.310\nAnd that's the process output.\n\n78\n00:04:30.310 --> 00:04:32.120\nThose are things that are running.\n\n79\n00:04:32.120 --> 00:04:34.270\nBut notice it says containers.\n\n80\n00:04:34.270 --> 00:04:38.170\nAnd I have this zoomed in so let's look at\nit how it would actually look if I had it\n\n81\n00:04:38.170 --> 00:04:41.030\nzoomed out here to a normal font screen.\n\n82\n00:04:41.030 --> 00:04:45.580\nThis is just rows and columns and\nthere's nothing listed.\n\n83\n00:04:45.580 --> 00:04:50.330\nWell that's odd I thought I ran something.\n\n84\n00:04:50.330 --> 00:04:53.840\nAnd here's the first big hiccup\nwhen you're running containers.\n\n85\n00:04:53.840 --> 00:04:56.840\nContainers do not stay running unless\n\n86\n00:04:56.840 --> 00:05:00.670\ninside of them they have a running\nprocess in the foreground.\n\n87\n00:05:00.670 --> 00:05:04.370\nIf you have nothing that's running inside\nof the container, such as a web server or\n\n88\n00:05:04.370 --> 00:05:09.070\nsomething like that, that's always on so\nto speak, then Docker\n\n89\n00:05:10.120 --> 00:05:14.530\nstarts it, sees that nothing needs to\ncontinue running and shuts it down.\n\n90\n00:05:14.530 --> 00:05:16.380\nWell that's not very helpful.\n\n91\n00:05:16.380 --> 00:05:20.070\nHow can I get that to\nactually stay on pace?\n\n92\n00:05:20.070 --> 00:05:23.830\nSo let's modify this run.\n\n93\n00:05:23.830 --> 00:05:31.510\nSo run busybox and I'm gonna say /bin/sh,\nso just a standard shell.\n\n94\n00:05:31.510 --> 00:05:35.280\nBusybox doesn't come with bash,\nit's very small.\n\n95\n00:05:35.280 --> 00:05:40.500\nSo if we run, notice it didn't\nprint out getting, it couldn't\n\n96\n00:05:40.500 --> 00:05:45.010\nfind it locally because, well, Docker's\nalready downloaded everything it needs.\n\n97\n00:05:45.010 --> 00:05:48.850\nAnd those are called images to\nactually create this container.\n\n98\n00:05:48.850 --> 00:05:53.700\nLet's look at Docker ps here,\nwell that was kind of odd.\n\n99\n00:05:53.700 --> 00:05:59.070\nWhy is that, why is that not running?\n\n100\n00:05:59.070 --> 00:06:04.460\nWell, the shell,\nit actually finishes unless you tell\n\n101\n00:06:04.460 --> 00:06:09.530\nDocker to, I wanna keep this interactive,\nI wanna keep this up and running.\n\n102\n00:06:09.530 --> 00:06:16.730\nSo we're gonna explore one of these\nfirst flags by saying Docker run -i.\n\n103\n00:06:16.730 --> 00:06:22.900\nAnd actually we have to explore\ntwo cuz they kinda go in tandem.\n\n104\n00:06:22.900 --> 00:06:28.490\nAnd -i stands for interactive and\n-t means create a teletype device.\n\n105\n00:06:29.770 --> 00:06:33.180\nSo I like to think of it as an interactive\nterminal that's how I remember the i and\n\n106\n00:06:33.180 --> 00:06:34.040\nthe t.\n\n107\n00:06:34.040 --> 00:06:41.579\nAnd most of the time I would just put\nthese as -it together, busybox/bin/sh.\n\n108\n00:06:41.579 --> 00:06:45.160\nAnd now notice my prompt has changed.\n\n109\n00:06:47.120 --> 00:06:51.090\nI now have BusyBox running interactively,\nand\n\n110\n00:06:51.090 --> 00:06:55.600\nthe shell has kind of come alive.\n\n111\n00:06:55.600 --> 00:06:59.460\nSo, how does that change my PS output?\n\n112\n00:06:59.460 --> 00:07:01.960\nSo I'm gonna open another terminal tab.\n\n113\n00:07:01.960 --> 00:07:08.960\nIf you'll notice, BusyBox is still there,\nand let's see what Docker ps tells me now.\n\n114\n00:07:10.980 --> 00:07:16.060\nAnd it says, container ID is a giant\nnumber that I can't remember.\n\n115\n00:07:16.060 --> 00:07:20.190\nThe image, the command,\nwhen it was created.\n\n116\n00:07:21.750 --> 00:07:25.670\nIts, what its status is,\nand then what its name is.\n\n117\n00:07:25.670 --> 00:07:29.370\nThese names are very interesting names,\nwe'll get to those more later.\n\n118\n00:07:30.380 --> 00:07:35.060\nBut as long as I'm in this,\nwe're good to go, and\n\n119\n00:07:35.060 --> 00:07:37.690\nactually I have access\nto a Linux container.\n\n120\n00:07:38.840 --> 00:07:44.410\nIt's like I have a Linus runtime\ninstalled on my computer,\n\n121\n00:07:44.410 --> 00:07:46.140\nand I can do Linux type things.\n\n122\n00:07:46.140 --> 00:07:49.544\nNow, I'm not going to because I think\nthat's a little outside of scope now, but\n\n123\n00:07:49.544 --> 00:07:51.660\nthat's how we run our first container,\nRonnie.\n\n124\n00:07:51.660 --> 00:07:53.518\nIt's actually really easy.\n\n125\n00:07:53.518 --> 00:07:55.921\nBut there are some gotchas.\n\n126\n00:07:55.921 --> 00:07:58.066\n&gt;&gt; So in terms of the gotchas here,\n\n127\n00:07:58.066 --> 00:08:01.410\nwhat are we really taking\na look at in the gotchas?\n\n128\n00:08:01.410 --> 00:08:05.315\nI'm gonna ask another question in a\nmoment, I know that we can get it started.\n\n129\n00:08:05.315 --> 00:08:06.778\nBut we definitely need to stop it, but\n\n130\n00:08:06.778 --> 00:08:09.310\nwhat are some of those other\ngotchas that you're talking about?\n\n131\n00:08:09.310 --> 00:08:12.510\n&gt;&gt; So those gotchas,\njust to remind ourselves, if you don't\n\n132\n00:08:12.510 --> 00:08:16.970\nhave an active process running, your\ncontainer starts up and dies immediately.\n\n133\n00:08:18.130 --> 00:08:18.938\nThat's number one.\n\n134\n00:08:18.938 --> 00:08:22.986\nNumber two,\nif you don't have Internet connection, and\n\n135\n00:08:22.986 --> 00:08:28.530\nyou don't have the image, locally,\nyou will not be able to start a container.\n\n136\n00:08:28.530 --> 00:08:31.470\nSo if I didn't have busybox, and\nI disconnect myself from the Internet,\n\n137\n00:08:31.470 --> 00:08:35.740\nand when I tried to run,\nwell, it would just fail.\n\n138\n00:08:35.740 --> 00:08:40.864\nSo keep those two things in mind,\nInternet connectivity is kind of assumed.\n\n139\n00:08:40.864 --> 00:08:45.335\n&gt;&gt; Yeah, that's definitely one, especially\nif it's downloading from somewhere, So\n\n140\n00:08:45.335 --> 00:08:49.745\nwhat's it's doing, Justin, is taking\nwhatever we're running on our host machine\n\n141\n00:08:49.745 --> 00:08:53.750\nand allowing it to make a connection to\nsome of those repositories out there.\n\n142\n00:08:53.750 --> 00:08:57.051\nAnd then, pulling down what we want\nwithout us having to set up networking\n\n143\n00:08:57.051 --> 00:08:59.170\ninside of that container, right?\n\n144\n00:08:59.170 --> 00:09:01.660\n&gt;&gt; So, Ronnie, you bring up a good point.\n\n145\n00:09:01.660 --> 00:09:05.397\nDocker is kind of managing a great deal\nof things, including those network\n\n146\n00:09:05.397 --> 00:09:08.960\ninterfaces, manning the drives\ncuz there's not really drives.\n\n147\n00:09:08.960 --> 00:09:11.970\nWe'll talk more about how that's emulated.\n\n148\n00:09:11.970 --> 00:09:17.750\nBut also the Internet connectivity\nis necessary to pull those images.\n\n149\n00:09:17.750 --> 00:09:19.971\nIf I don't have busybox locally,\nlike I said,\n\n150\n00:09:19.971 --> 00:09:21.870\nI need to be able to pull this somewhere.\n\n151\n00:09:21.870 --> 00:09:27.240\nNow pipe docker run is actually saying,\nhey, do you have this?\n\n152\n00:09:27.240 --> 00:09:30.600\nNo, well, let me go find it,\nwhere is it going to find it?\n\n153\n00:09:30.600 --> 00:09:35.220\nLet's take a quick look, I have\nGoogle Chrome open here on the next page.\n\n154\n00:09:35.220 --> 00:09:38.770\nAnd let's take a look at where that is,\nso Docker,\n\n155\n00:09:38.770 --> 00:09:42.250\nand some of this may change,\nso keep that in mind.\n\n156\n00:09:42.250 --> 00:09:46.460\nThere's the Docker store,\nwhich you can look for similar things.\n\n157\n00:09:46.460 --> 00:09:49.970\nBut hub.docker.com, and\nif we can take a look here,\n\n158\n00:09:51.080 --> 00:09:53.980\nis kind of where these images reside.\n\n159\n00:09:55.440 --> 00:09:56.550\nOkay, well, what does that?\n\n160\n00:09:56.550 --> 00:09:58.292\nLet's looks up busybox.\n\n161\n00:09:58.292 --> 00:10:03.820\nSo busybox, and there's busybox, and\nit is official and we click on it.\n\n162\n00:10:03.820 --> 00:10:07.910\nWell, it actually tells you the command\nhere, how to pull that locally.\n\n163\n00:10:07.910 --> 00:10:09.090\nBut you didn't see me type that.\n\n164\n00:10:10.150 --> 00:10:12.970\nWell, why didn't I type that?\n\n165\n00:10:12.970 --> 00:10:17.640\nBecause if I try to run, it will check\nto see if I have the image locally.\n\n166\n00:10:17.640 --> 00:10:23.896\nAnd then do a poll, which means go out and\nfetch it and bring it to me, and then run.\n\n167\n00:10:23.896 --> 00:10:27.434\nSo it's helping you as much as you can,\nbut you need to realize that,\n\n168\n00:10:27.434 --> 00:10:31.338\nbecause if you don't have Internet\nconnection when you're trying to run,\n\n169\n00:10:31.338 --> 00:10:35.730\nI don't know, like Ubuntu, and you don't\nhave it locally, well it's gonna fail.\n\n170\n00:10:35.730 --> 00:10:40.720\nAnd you're kind of out of luck\nuntil you get that all figured out.\n\n171\n00:10:40.720 --> 00:10:43.500\n&gt;&gt; All right, Justin, so when we\nstart taking a look then at Docker,\n\n172\n00:10:43.500 --> 00:10:46.440\nwe now have our container, and\nnow you're talking about images.\n\n173\n00:10:46.440 --> 00:10:50.430\nWhat is that relationship between\nthe images and the containers, and\n\n174\n00:10:50.430 --> 00:10:54.030\nwill we always need both to make\nDocker do what we need it to do?\n\n175\n00:10:54.030 --> 00:10:55.320\n&gt;&gt; Well, Ronnie, you're keeping me honest.\n\n176\n00:10:55.320 --> 00:10:59.680\nSometimes I get mixed up in jargon,\nand I just start spouting off words.\n\n177\n00:10:59.680 --> 00:11:03.400\nAnd I'm gonna need you\nto keep me in my place.\n\n178\n00:11:03.400 --> 00:11:07.708\nSo when I say Docker image, I like\nto think of it as the cookie cutter,\n\n179\n00:11:07.708 --> 00:11:10.500\nthe blueprint, right?\n\n180\n00:11:10.500 --> 00:11:11.790\nWhat is busybox?\n\n181\n00:11:11.790 --> 00:11:15.570\nWell, the Docker image defines\nwhat that is, how it looks,\n\n182\n00:11:15.570 --> 00:11:19.220\nhow it behaves,\nany files that are within it.\n\n183\n00:11:19.220 --> 00:11:23.430\nAnd the container is an actual\ncookie stamped out of that.\n\n184\n00:11:23.430 --> 00:11:25.040\nSo the image is a cookie cutter.\n\n185\n00:11:25.040 --> 00:11:27.090\nThe container is stamped out of that.\n\n186\n00:11:27.090 --> 00:11:28.570\nAnd that's the great thing about Docker.\n\n187\n00:11:28.570 --> 00:11:31.550\nThat's why people like\nthis container thing.\n\n188\n00:11:31.550 --> 00:11:36.390\nI do the setup once, I make an image,\nwhich is my cookie cutter, and\n\n189\n00:11:36.390 --> 00:11:39.500\nthen I just stamp out a bunch\nof cookies really fast, right?\n\n190\n00:11:39.500 --> 00:11:41.330\nSo that's our two relationships.\n\n191\n00:11:41.330 --> 00:11:45.990\nSo to further answer your question,\ndo we need both?\n\n192\n00:11:45.990 --> 00:11:50.640\nWell in order to have a container, you\nare more than likely gonna have an image.\n\n193\n00:11:50.640 --> 00:11:54.940\nNow there's a couple of ways around that,\nbut typically, when we first get started,\n\n194\n00:11:54.940 --> 00:11:59.540\nthey're almost inexplicably\nbound together.\n\n195\n00:11:59.540 --> 00:12:02.420\nI need an image to create\ncontainers because\n\n196\n00:12:02.420 --> 00:12:05.300\nI'm just trying to figure\nout how this works.\n\n197\n00:12:05.300 --> 00:12:05.990\nBut as I said,\n\n198\n00:12:05.990 --> 00:12:11.560\nthere are a couple of edge cases where you\nmight get away with some other things.\n\n199\n00:12:11.560 --> 00:12:16.680\nBut keep in mind behind the scenes,\nDocker's probably building an image for\n\n200\n00:12:16.680 --> 00:12:18.800\nyou, even if you can't see it.\n\n201\n00:12:18.800 --> 00:12:22.310\n&gt;&gt; All right, Justin,\nif we talk about this idea of images,\n\n202\n00:12:22.310 --> 00:12:25.970\nyou showed us hub.docker.com, where we\ncan go and get some of those images.\n\n203\n00:12:25.970 --> 00:12:27.170\nAre there other places, or\n\n204\n00:12:27.170 --> 00:12:30.010\nis that pretty much the only\nlocation we're gonna get them from?\n\n205\n00:12:30.010 --> 00:12:34.880\n&gt;&gt; So it is possible to set up a registry\nlocally, so if you wanna manage all of\n\n206\n00:12:34.880 --> 00:12:38.830\nyour images internally, let's say you\nhave something that's of business\n\n207\n00:12:38.830 --> 00:12:42.020\nvalue that you wanna keep secret\nYou can manage those internally.\n\n208\n00:12:43.090 --> 00:12:46.130\nThat is a precarious situation,\nthe stories change.\n\n209\n00:12:46.130 --> 00:12:47.910\nThere are some managed services.\n\n210\n00:12:47.910 --> 00:12:51.839\nThere's another one that is out and\nabout, so let's go ahead and\n\n211\n00:12:51.839 --> 00:12:53.840\ntake a look in Chrome here.\n\n212\n00:12:53.840 --> 00:12:57.800\nAnd that is cry.io.\n\n213\n00:12:57.800 --> 00:13:01.890\nAnd notice it says try for free on\npremises, try for free in the cloud.\n\n214\n00:13:01.890 --> 00:13:05.138\nSo they have an on premises solution\nthat you can deploy locally, and\n\n215\n00:13:05.138 --> 00:13:07.330\nit will manage all of\nyour images internally.\n\n216\n00:13:07.330 --> 00:13:12.250\nBut they also have something like\nDocker Hub, and it works just like Docker,\n\n217\n00:13:12.250 --> 00:13:16.350\nbut you do have to sign up for\nan account and do some other things.\n\n218\n00:13:16.350 --> 00:13:20.150\nSo I typically stay with Docker Hub\nwhen I'm just messing around,\n\n219\n00:13:20.150 --> 00:13:21.430\nfiguring things out.\n\n220\n00:13:21.430 --> 00:13:25.190\nAnd Docker Hub is fairly robust.\n\n221\n00:13:25.190 --> 00:13:27.770\nCase in point,\nwe've been using busybox, right?\n\n222\n00:13:29.010 --> 00:13:32.868\nLet's see,\nI like this web server nginx, right,\n\n223\n00:13:32.868 --> 00:13:37.640\nI search for nginx, and\nnotice I have an official nginx image.\n\n224\n00:13:37.640 --> 00:13:43.530\nBut I also have a bunch of other nginx\nimages, where do these come from?\n\n225\n00:13:43.530 --> 00:13:46.680\nWell, these are actually people\nwho have made their own, and\n\n226\n00:13:46.680 --> 00:13:50.450\nwe'll find out how to do that and\nput them on Docker Hub.\n\n227\n00:13:50.450 --> 00:13:55.905\nNotice I have 5,600 stars and over 10\nmillion pulls for this official one.\n\n228\n00:13:55.905 --> 00:13:59.450\nnginx is very popular,\nI like the configuration of it.\n\n229\n00:13:59.450 --> 00:14:04.780\nIt's very simple to me, but\nyou never know, be careful.\n\n230\n00:14:04.780 --> 00:14:08.782\nBut if it's your image, you may have one\nstar, which is yours, and three pulls,\n\n231\n00:14:08.782 --> 00:14:10.422\nwhich were also all three yours.\n\n232\n00:14:10.422 --> 00:14:12.650\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n233\n00:14:12.650 --> 00:14:16.630\nI talked about that pull is\nhappening behind the scenes.\n\n234\n00:14:16.630 --> 00:14:19.286\nLet's actually do that with nginx,\n\n235\n00:14:19.286 --> 00:14:22.890\nsee how then the run changes\nif we do a manual pull.\n\n236\n00:14:22.890 --> 00:14:26.435\nBecause if I know I'm not gonna have\nInternet connectivity, I may go ahead and\n\n237\n00:14:26.435 --> 00:14:28.920\npull all of the images that I need,\nand I'm good to go.\n\n238\n00:14:28.920 --> 00:14:34.190\nSo let's go ahead, and Docker pull nginx,\n\n239\n00:14:34.190 --> 00:14:37.325\nbut real quick, we've gotta get out of,\nlet me zoom out of here.\n\n240\n00:14:37.325 --> 00:14:38.636\nWe've gotta get out of busybox.\n\n241\n00:14:38.636 --> 00:14:45.060\nIf I Ctrl+C, that's kind of weird,\nCtrl+D, that's kind of my go to in Linux.\n\n242\n00:14:45.060 --> 00:14:47.240\nRun a Ctrl+C,\nif that doesn't work, Ctrl+D.\n\n243\n00:14:47.240 --> 00:14:54.260\nIf that doesn't work, throw your hands up\nand run away, I guess, or sometimes, exit.\n\n244\n00:14:54.260 --> 00:14:59.100\n&gt;&gt; So, at this point, Justin, this\nparticular container then is shut down,\n\n245\n00:14:59.100 --> 00:15:00.830\nor are we stopped completely?\n\n246\n00:15:00.830 --> 00:15:04.814\n&gt;&gt; So you're in my head, Ronnie,\nit's kind of freaking me out.\n\n247\n00:15:04.814 --> 00:15:09.188\nSo when I Ctrl+C or Ctrl+D or actually\ntype exit, so if I hit up again and\n\n248\n00:15:09.188 --> 00:15:14.440\nI'm back in here and I type exit, that\nwill actually exit out of the container.\n\n249\n00:15:14.440 --> 00:15:16.770\nNow what does that do?\n\n250\n00:15:16.770 --> 00:15:18.040\nWell, the container stops running.\n\n251\n00:15:18.040 --> 00:15:21.910\nThere's no longer an active process, so\nthat interactive teletype terminal thing\n\n252\n00:15:23.200 --> 00:15:25.310\nis no longer running, so\nthe container shuts down.\n\n253\n00:15:26.330 --> 00:15:29.070\nKeep in mind though that doesn't mean\nthat the container has been deleted,\n\n254\n00:15:29.070 --> 00:15:32.040\nthat just means that it\nis not actively running.\n\n255\n00:15:32.040 --> 00:15:35.280\nAnd we'll talk more about managing\ncontainers and where to find those.\n\n256\n00:15:35.280 --> 00:15:38.570\nBut that does bring up a great point.\n\n257\n00:15:38.570 --> 00:15:44.363\nIf you do not want that behavior though,\nyou can say Ctrl+P, Ctrl+Q.\n\n258\n00:15:44.363 --> 00:15:47.835\nAnd notice I still exited out, but\n\n259\n00:15:47.835 --> 00:15:52.873\nnow if I docker ps,\nthe container stays running.\n\n260\n00:15:52.873 --> 00:15:57.323\nAnd that's because all I've done is\ndetached from that running process Instead\n\n261\n00:15:57.323 --> 00:16:00.138\nof actually killing the process,\nso typing exit,\n\n262\n00:16:00.138 --> 00:16:04.325\nhow that exits out of the container is\nit kills the active running process and\n\n263\n00:16:04.325 --> 00:16:07.930\nthen docker shuts down the container and\nexits for you.\n\n264\n00:16:07.930 --> 00:16:10.470\nSo those are a mild distinction and\n\n265\n00:16:10.470 --> 00:16:14.520\nsomething that actually gave me a great\ndeal of trouble initially, cuz I would be\n\n266\n00:16:14.520 --> 00:16:18.390\ncool I'm gonna leave this running and\nI would control + C or control + D or\n\n267\n00:16:18.390 --> 00:16:23.340\neven type exit and then it would shut\ndown, and I'm like that's not what I want.\n\n268\n00:16:23.340 --> 00:16:26.338\nSo originally I would just close\nout of the terminal window and\n\n269\n00:16:26.338 --> 00:16:30.202\nopen another terminal window, and that\nwould keep it running, but control + P\n\n270\n00:16:30.202 --> 00:16:33.799\ncontrol + Q will actually detach you\nfrom that, so that's hard to know.\n\n271\n00:16:33.799 --> 00:16:36.423\n&gt;&gt; So let me ask a follow up question\nas we're starting to learn a little bit\n\n272\n00:16:36.423 --> 00:16:37.090\nmore about this.\n\n273\n00:16:37.090 --> 00:16:40.560\nThis may be a little bit too advanced at\nthis point, but let me know if it is.\n\n274\n00:16:40.560 --> 00:16:43.299\nIf you're already working\nin your container and\n\n275\n00:16:43.299 --> 00:16:48.039\nyou've already got stuff saved, if you do\nthis is that information gonna be saved or\n\n276\n00:16:48.039 --> 00:16:51.416\ndid we just say all right,\nwe're starting all over?\n\n277\n00:16:51.416 --> 00:16:56.670\n&gt;&gt; Ronnie, so let me reiterate the\nquestion and make sure I understand you.\n\n278\n00:16:56.670 --> 00:16:59.940\nIf I've made changes to the container\nthat I'm currently in, and\n\n279\n00:16:59.940 --> 00:17:05.500\nI accidentally exit using Exit or Ctrl + D\nwhat happens to my stuff in my container?\n\n280\n00:17:05.500 --> 00:17:06.069\n&gt;&gt; That's it?\n[LAUGH].\n\n281\n00:17:06.069 --> 00:17:06.853\n&gt;&gt; It is gone.\n\n282\n00:17:06.853 --> 00:17:09.189\n[LAUGH]\n&gt;&gt; Actually,\n\n283\n00:17:09.189 --> 00:17:11.590\nthere are ways until you delete it.\n\n284\n00:17:11.590 --> 00:17:14.260\nThere are ways to go retrieve that\ncontainer and start it back up.\n\n285\n00:17:14.260 --> 00:17:17.760\nBut you should treat it,\nand here's the distinction.\n\n286\n00:17:17.760 --> 00:17:19.750\nIt doesn't actually,\nthere's ways to retrieve it.\n\n287\n00:17:19.750 --> 00:17:22.160\nYou should treat containers\nthough as a femroll.\n\n288\n00:17:22.160 --> 00:17:25.600\nThey go away all the data\ninside of them go away\n\n289\n00:17:25.600 --> 00:17:28.370\nuntil you build an image from them.\n\n290\n00:17:28.370 --> 00:17:33.471\nWhich is kind of the stone stamp, or\nthe cookie cutter that you cut out.\n\n291\n00:17:33.471 --> 00:17:35.360\nBut that is a great distinction.\n\n292\n00:17:35.360 --> 00:17:39.210\nAnd we'll see more about that,\nhow to manage those, in later episodes.\n\n293\n00:17:39.210 --> 00:17:43.680\nSo we had a nice little aside there,\nRonnie is keeping me honest.\n\n294\n00:17:43.680 --> 00:17:46.380\nLet's take a look at that nginx pulls.\n\n295\n00:17:46.380 --> 00:17:50.072\nSo docker pull nginx,\nand I'm gonna pull and\n\n296\n00:17:50.072 --> 00:17:53.483\nnotice it says using default tag latest.\n\n297\n00:17:53.483 --> 00:17:57.820\nAnd we're gonna come back to docker\nhub and look at that in just a moment.\n\n298\n00:17:57.820 --> 00:18:02.508\nAnd actually while this is downloading,\nwell, never mind.\n\n299\n00:18:02.508 --> 00:18:05.160\nI was gonna move on and\nshow you something, but\n\n300\n00:18:05.160 --> 00:18:06.520\nwe'll get to that in just a moment.\n\n301\n00:18:06.520 --> 00:18:14.248\nSo if I docker run nginx,\nWell, it does stuff.\n\n302\n00:18:14.248 --> 00:18:17.810\n&gt;&gt; [LAUGH]\n&gt;&gt; It looks like it's frozen, so\n\n303\n00:18:17.810 --> 00:18:24.840\nwhat happens when this, I like to hop\nover and see, nginx is actually running.\n\n304\n00:18:27.083 --> 00:18:28.900\nSo what happened here?\n\n305\n00:18:28.900 --> 00:18:30.330\nWhat's going on?\n\n306\n00:18:30.330 --> 00:18:34.020\nWell, it just kinda took\nover my terminal window.\n\n307\n00:18:34.020 --> 00:18:36.820\nI started the container and it's running.\n\n308\n00:18:36.820 --> 00:18:38.510\nAnd it doesn't have any output.\n\n309\n00:18:38.510 --> 00:18:40.220\nThere's no way around it.\n\n310\n00:18:40.220 --> 00:18:41.678\nI'm just gonna go ahead and kill it.\n\n311\n00:18:41.678 --> 00:18:45.050\nAnd that's kinda weird.\n\n312\n00:18:45.050 --> 00:18:49.480\nBut before we address that,\nlet's pull back just a little bit and\n\n313\n00:18:49.480 --> 00:18:51.200\nlook at this latest tag.\n\n314\n00:18:52.220 --> 00:18:54.620\nSo I can run, I pulled I run.\n\n315\n00:18:54.620 --> 00:18:59.140\nIt doesn't say anything when I run and\nnot able to find locally, just runs it.\n\n316\n00:18:59.140 --> 00:19:03.330\nSo I have an nginx, but\nI had the latest version of nginx.\n\n317\n00:19:03.330 --> 00:19:07.158\nAnd if I look inside of\n\n318\n00:19:07.158 --> 00:19:12.510\nthe nginx repo of docker hub.\n\n319\n00:19:12.510 --> 00:19:18.480\n1.11.10 also, mainline also 1 also,\n1.11 also, latest.\n\n320\n00:19:19.640 --> 00:19:21.340\n1.11.10-alpine.\n\n321\n00:19:22.630 --> 00:19:27.430\nAlpine is a small distribution of Linux\nthat uses an alternative C compiler\n\n322\n00:19:27.430 --> 00:19:30.310\nI think you can actually\nuse new C in it as well.\n\n323\n00:19:30.310 --> 00:19:34.907\nBut these images tend to be very small\ncomparatively to like Debian and Ubuntu or\n\n324\n00:19:34.907 --> 00:19:37.180\nRedhat based images.\n\n325\n00:19:37.180 --> 00:19:38.820\nThese are all available.\n\n326\n00:19:38.820 --> 00:19:42.460\nSo what if I wanted 1.10.3?\n\n327\n00:19:42.460 --> 00:19:44.950\nCuz currently latest, I have 1.11.10.\n\n328\n00:19:45.950 --> 00:19:47.438\nIt just so happens that I found a bug or\n\n329\n00:19:47.438 --> 00:19:49.605\nthere is a plugin that is\njust not working with Nginx.\n\n330\n00:19:49.605 --> 00:19:53.510\nHow do I grab this version?\n\n331\n00:19:53.510 --> 00:19:56.747\nWell, let's hop over and\n\n332\n00:19:56.747 --> 00:20:01.760\nsay docker pull nginx:1.10.3.\n\n333\n00:20:01.760 --> 00:20:08.540\nAnd now I'm pulling that particular tag,\nand a tag's kinda like a version.\n\n334\n00:20:08.540 --> 00:20:12.570\nIt's not kinda like a version,\nit is a versioning system.\n\n335\n00:20:12.570 --> 00:20:16.270\nAnd notice,\nit says that 693502eb7dfb already exists.\n\n336\n00:20:16.270 --> 00:20:21.312\nAnd that's because of the way that\nthe cookie cutters are built,\n\n337\n00:20:21.312 --> 00:20:25.345\ndocker is able to share some\nof that information, so\n\n338\n00:20:25.345 --> 00:20:29.482\nyou don't always have to\nre-download everything.\n\n339\n00:20:29.482 --> 00:20:34.469\nBut, that's good to know about versioning,\nbut\n\n340\n00:20:34.469 --> 00:20:38.280\nwe still have that issue of run nginx.\n\n341\n00:20:38.280 --> 00:20:41.540\nWhat do you think's happening here,\nRonnie?\n\n342\n00:20:41.540 --> 00:20:46.390\n&gt;&gt; It seems that something is hijacking\nwhat you're taking a look at here.\n\n343\n00:20:46.390 --> 00:20:50.942\nSo I've noticed that happening\nin other applications before,\n\n344\n00:20:50.942 --> 00:20:53.902\ntoo, when a standard out gets hijacked.\n\n345\n00:20:53.902 --> 00:20:55.200\nWhat do we need to do about this?\n\n346\n00:20:55.200 --> 00:20:56.380\n&gt;&gt; Well, that's a great question.\n\n347\n00:20:56.380 --> 00:21:01.140\nCurrently when we're running,\nrun by default says hey,\n\n348\n00:21:01.140 --> 00:21:04.150\nwe're gonna leave it at\nthis it's very high level.\n\n349\n00:21:04.150 --> 00:21:08.610\nYou can hijack standard out if that's\nhow the container is built, right?\n\n350\n00:21:08.610 --> 00:21:12.640\nSo it has to have some kind of system\nprocess running Nginx is a web server,\n\n351\n00:21:12.640 --> 00:21:14.145\nit always needs to stay on.\n\n352\n00:21:14.145 --> 00:21:19.236\nAnd if you actually come and\nlook at Docker Hub,\n\n353\n00:21:19.236 --> 00:21:25.320\nwait for it, here we go,\nwe'll get to Docker files.\n\n354\n00:21:25.320 --> 00:21:29.430\nBut I wanna show you,\nthis bottom right here, nginx, daemon off.\n\n355\n00:21:29.430 --> 00:21:32.900\nAnd what that means is there is no\nlonger a background process but\n\n356\n00:21:32.900 --> 00:21:35.950\na foreground process so\nthe container doesn't die.\n\n357\n00:21:35.950 --> 00:21:39.740\nSo that's good to know, but\nwhat do we do about it?\n\n358\n00:21:39.740 --> 00:21:40.495\nHow do we fix it?\n\n359\n00:21:40.495 --> 00:21:43.012\nThis is not how I wanna\na web container to run,\n\n360\n00:21:43.012 --> 00:21:45.406\nI wanna be able to run\nit on the background.\n\n361\n00:21:45.406 --> 00:21:50.184\nSo we've already seen -i for\ninteractive -t for the teller type.\n\n362\n00:21:50.184 --> 00:21:53.703\nThere's actually a -d which stands for\ndaemon so\n\n363\n00:21:53.703 --> 00:21:59.732\nthe docker process itself if it has inside\nof it, if it has a process that's running,\n\n364\n00:21:59.732 --> 00:22:04.840\nit'll stay running, but we can push it and\ndetach it from standard out or\n\n365\n00:22:04.840 --> 00:22:09.145\nstandard, there's some ways\nto inject standard in stuff.\n\n366\n00:22:09.145 --> 00:22:13.759\nSo I'm gonna -d nginx and\nit prints out the SHA value,\n\n367\n00:22:13.759 --> 00:22:17.780\nthe SHA-256, for the container.\n\n368\n00:22:17.780 --> 00:22:20.520\nAnd then it gives you back the terminal.\n\n369\n00:22:20.520 --> 00:22:24.770\nWell, we've seen something\nsimilar with busybox, it died.\n\n370\n00:22:24.770 --> 00:22:26.930\nNo, what am I gonna do?\n\n371\n00:22:26.930 --> 00:22:32.230\nWell, you should always\nmake sure docker ps and\n\n372\n00:22:32.230 --> 00:22:39.050\nactually it's running,\nit's right here notice that bc09, bc09.\n\n373\n00:22:39.050 --> 00:22:41.240\nSo there's our container ID.\n\n374\n00:22:41.240 --> 00:22:43.177\nAnd here it is running in the background.\n\n375\n00:22:43.177 --> 00:22:46.370\nWell, let's go a little bit further.\n\n376\n00:22:46.370 --> 00:22:47.355\nThis is a web server.\n\n377\n00:22:47.355 --> 00:22:50.926\nBy default when you install nginx\nyou have that default splash page,\n\n378\n00:22:50.926 --> 00:22:52.840\nwelcome to nginx.\n\n379\n00:22:52.840 --> 00:22:55.046\nWe should be able to navigate to that.\n\n380\n00:22:55.046 --> 00:22:59.140\nOkay well let's see if\nwe can navigate to that.\n\n381\n00:22:59.140 --> 00:23:04.737\nWhen I install Nginx locally\nit usually local host port 80.\n\n382\n00:23:04.737 --> 00:23:11.590\nNot 8080 and no it's broke.\n\n383\n00:23:12.710 --> 00:23:13.760\nWhy is it?\n\n384\n00:23:13.760 --> 00:23:15.900\nIt's running, but\nthere's no way to get to.\n\n385\n00:23:15.900 --> 00:23:19.210\nIt says it's on port 80 right here,\nTCP port 80.\n\n386\n00:23:19.210 --> 00:23:21.280\nWhy can't I gain access to it?\n\n387\n00:23:21.280 --> 00:23:24.960\nWell, one of the ideas of containers\nis everything is sequestered\n\n388\n00:23:24.960 --> 00:23:28.930\nin that container unless you\nmake provisions for it not to.\n\n389\n00:23:28.930 --> 00:23:30.900\nSo let's fix that.\n\n390\n00:23:30.900 --> 00:23:33.670\nHow do we make that final provision?\n\n391\n00:23:33.670 --> 00:23:37.739\nAll right to break open those ports.\n\n392\n00:23:37.739 --> 00:23:42.270\nSo let's actually say docker.\n\n393\n00:23:42.270 --> 00:23:45.110\nLet me clear so\nwe're at the top of the screen here.\n\n394\n00:23:45.110 --> 00:23:50.460\ndocker run and then a -p and\nthere's two other things that can follow.\n\n395\n00:23:50.460 --> 00:23:55.371\nSo as it stands -i, -t, and\n-d just are like a true false flag.\n\n396\n00:23:55.371 --> 00:23:57.728\nThey either turn something off,\nor turn something on.\n\n397\n00:23:57.728 --> 00:24:05.360\nSo, -d makes it a daemon, -i is\ninteractive, -t sets up a TTY interface.\n\n398\n00:24:05.360 --> 00:24:10.070\nWell, -p requires arguments and\nit's a port mapping.\n\n399\n00:24:10.070 --> 00:24:13.160\nFor now, we'll talk more about this.\n\n400\n00:24:13.160 --> 00:24:15.040\nI'm gonna say 80:80.\n\n401\n00:24:15.040 --> 00:24:19.285\nSo, what I'm doing is I'm saying what's\ninside the container, running at port 80.\n\n402\n00:24:19.285 --> 00:24:25.610\nI wanna grab and map that, kinda bind\nthose two together, on my port 80.\n\n403\n00:24:25.610 --> 00:24:29.510\nSo, 80:80, and then I'm gonna run nginx.\n\n404\n00:24:29.510 --> 00:24:32.190\nAnd almost messed up.\n\n405\n00:24:32.190 --> 00:24:38.120\nLet's do a -d here, -d, and\nthis Docker ps, make sure it's running.\n\n406\n00:24:38.120 --> 00:24:41.260\nAnd I'm gonna zoom out cuz\nthat's crowding things.\n\n407\n00:24:41.260 --> 00:24:46.240\nOkay, well, notice here and zoom in.\n\n408\n00:24:47.250 --> 00:24:51.145\nThis nginx,\nwhich I just started says 0.0.0.0 port 80.\n\n409\n00:24:51.145 --> 00:24:54.390\nAnd then, this one is just port 80.\n\n410\n00:24:54.390 --> 00:24:57.140\nInternally, this is running on\nport 80 inside the container.\n\n411\n00:24:58.330 --> 00:25:02.270\nThis one is saying the port 80 on\nyour computer is being mapped to\n\n412\n00:25:02.270 --> 00:25:04.170\nthe container's port 80.\n\n413\n00:25:04.170 --> 00:25:08.660\nSo, that tells you, that's how that works.\n\n414\n00:25:08.660 --> 00:25:11.880\nAnd we'll see how that changes\nthings in just a moment.\n\n415\n00:25:11.880 --> 00:25:16.240\nBut now if I go to local host,\nhaha, I have nginx.\n\n416\n00:25:16.240 --> 00:25:17.590\nAnd what I really like about this,\n\n417\n00:25:17.590 --> 00:25:22.280\nRonnie, is I haven't had to change\nmy computer's configuration at all.\n\n418\n00:25:22.280 --> 00:25:27.020\nAnd if I really mess up this nginx trying\nout some new things, well that's okay.\n\n419\n00:25:27.020 --> 00:25:32.580\nI can just shut it down, bring up\na new one, boom, we're good to go.\n\n420\n00:25:32.580 --> 00:25:35.250\n&gt;&gt; All right, so that sounds great that\nwe can actually get all this stuff\n\n421\n00:25:35.250 --> 00:25:37.010\nrunning the way that you want it to.\n\n422\n00:25:37.010 --> 00:25:40.160\nAnd that we can run processes in the\nbackground like you just showed us with\n\n423\n00:25:40.160 --> 00:25:41.160\nNginx.\n\n424\n00:25:41.160 --> 00:25:45.180\nBut it does seem to bring up an issue\nabout how do we know where a container, or\n\n425\n00:25:45.180 --> 00:25:47.150\nwhat container is actually running now.\n\n426\n00:25:47.150 --> 00:25:50.160\nSo, is that just from what we saw there,\nby using the ps command?\n\n427\n00:25:50.160 --> 00:25:51.050\n&gt;&gt; So typically,\n\n428\n00:25:51.050 --> 00:25:56.930\nwhere I start is using just ps to see\nwhat containers are currently running.\n\n429\n00:25:56.930 --> 00:26:00.030\nIf they're not in that list,\nthen they're not running.\n\n430\n00:26:00.030 --> 00:26:02.650\nThat does not mean that they\nwill not be on your system.\n\n431\n00:26:02.650 --> 00:26:07.750\nIt may still be there and we'll see how\nto manage those in a future episode.\n\n432\n00:26:07.750 --> 00:26:12.280\nBut if they're not on Docker ps,\nwhich is standard process that's running,\n\n433\n00:26:12.280 --> 00:26:15.240\nthen they are not up and you can just\ntreat them like they're not there.\n\n434\n00:26:15.240 --> 00:26:17.144\nSo, you have to keep that in mind,\n\n435\n00:26:17.144 --> 00:26:21.295\nthere's a few commands on the command\nline that I kind of spam all the time.\n\n436\n00:26:21.295 --> 00:26:26.340\nls, ls-la, pwd and I'm always using those,\n\n437\n00:26:26.340 --> 00:26:32.016\nand Docker,\nI almost find myself running a command,\n\n438\n00:26:32.016 --> 00:26:39.180\nDocker space ps, to see if that\nis actually continuing to run.\n\n439\n00:26:39.180 --> 00:26:41.588\nBecause if you don't check that,\nwhat will happen is,\n\n440\n00:26:41.588 --> 00:26:45.274\nyou'll spin up nginx, this is gonna be\ngreat, you're here with a web browser,\n\n441\n00:26:45.274 --> 00:26:48.174\nyou check it out, it's broke and\nmay lead you down the wrong path.\n\n442\n00:26:48.174 --> 00:26:51.072\nSo definitely,\nmake sure those are running and\n\n443\n00:26:51.072 --> 00:26:54.775\nthe ps command is the simplest\nway to get started doing that.\n\n444\n00:26:54.775 --> 00:26:57.975\n&gt;&gt; All right, Justin,\nthat's a lot of information but\n\n445\n00:26:57.975 --> 00:27:00.960\nit's a great amount of information for us.\n\n446\n00:27:00.960 --> 00:27:04.340\nBecause if we're actually going to be\nworking this developer environment\n\n447\n00:27:04.340 --> 00:27:07.580\nwhere we are expected to try at least\nmirror the environment that we're going to\n\n448\n00:27:07.580 --> 00:27:08.910\nsee in production.\n\n449\n00:27:08.910 --> 00:27:11.590\nThis is one way that Justin is showing us,\n\n450\n00:27:11.590 --> 00:27:13.970\nby being able to not only\nbring up the container but\n\n451\n00:27:13.970 --> 00:27:18.200\nalso of course to get that image into\nthat container and to get it running.\n\n452\n00:27:18.200 --> 00:27:19.580\nNot only is that important of course,\n\n453\n00:27:19.580 --> 00:27:22.390\nsometimes you'll actually see\nlike what Justin show us here.\n\n454\n00:27:22.390 --> 00:27:24.630\nThe ability to not only\nget that running but\n\n455\n00:27:24.630 --> 00:27:28.430\nalso to run it in the background\nby adding in that -d command.\n\n456\n00:27:28.430 --> 00:27:32.230\nThat really does help us out, and then\nhe shows us of course how we can check\n\n457\n00:27:32.230 --> 00:27:37.250\nwhether or not we are also running\nmultiple containers at the same time.\n\n458\n00:27:37.250 --> 00:27:40.552\nAnd he even told us how we can get\nthat to turn off when we need to.\n\n459\n00:27:40.552 --> 00:27:43.227\nRemember, it's the control-D?\n\n460\n00:27:43.227 --> 00:27:45.582\n&gt;&gt; No control-D-\n&gt;&gt; D.\n\n461\n00:27:45.582 --> 00:27:47.149\n&gt;&gt; Will actually execute it, like exit.\n\n462\n00:27:47.149 --> 00:27:47.661\n&gt;&gt; Yeah.\n\n463\n00:27:47.661 --> 00:27:48.450\n&gt;&gt; The container.\n\n464\n00:27:48.450 --> 00:27:50.160\nIt'll kill the process.\n\n465\n00:27:50.160 --> 00:27:52.320\nIf you want to exit out\nof the command line, but\n\n466\n00:27:52.320 --> 00:27:55.380\nleave the container running,\nCtrl+P, Ctrl+Q.\n\n467\n00:27:55.380 --> 00:27:58.770\n&gt;&gt; All right, and one more thing,\nsince Justin actually did bring up.\n\n468\n00:27:58.770 --> 00:28:02.170\nAnd I remember this strange word that\nhe used was treat these as ephemeral,\n\n469\n00:28:02.170 --> 00:28:03.250\nwhich means dynamic.\n\n470\n00:28:03.250 --> 00:28:06.120\nThat, if you're gonna shut them off,\nremember that work that you've\n\n471\n00:28:06.120 --> 00:28:09.650\nput in there can end up\ngetting lost very quickly.\n\n472\n00:28:09.650 --> 00:28:12.754\nSo, be very careful when you decide\nthat you're gonna try and just go,\n\n473\n00:28:12.754 --> 00:28:16.291\nI think I'm going to pause this in the\nbackground and I'll just do this Ctrl+D.\n\n474\n00:28:16.291 --> 00:28:18.842\nYou might get more than you bargained for.\n\n475\n00:28:18.842 --> 00:28:21.150\nThat does it gonna be more\nthan you want to do, but\n\n476\n00:28:21.150 --> 00:28:22.550\nthere's a lot of information in this.\n\n477\n00:28:22.550 --> 00:28:24.710\nMake sure you watch this episode again and\n\n478\n00:28:24.710 --> 00:28:28.540\nlet it all soak in as you begin to\nwork a little bit more with Docker.\n\n479\n00:28:28.540 --> 00:28:32.250\nBut there's a lot more coming up, but\nwe'll be saving that for another episode.\n\n480\n00:28:32.250 --> 00:28:34.610\nSo, this is a great place for\nus to sign off.\n\n481\n00:28:34.610 --> 00:28:37.530\nFor ITPro.TV I've been your host,\nRonnie Wong.\n\n482\n00:28:37.530 --> 00:28:38.072\n&gt;&gt; And I'm Justin Dennison.\n\n483\n00:28:38.072 --> 00:28:41.199\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n484\n00:28:41.199 --> 00:28:48.615\n[MUSIC]\n\n485\n00:28:48.615 --> 00:28:51.312\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "210316160"
        },
        {
          "description": "In this episode, Ronnie and Justin show how to start managing multiple containers.  Justin demonstrates the unusual naming convention for the containers and how to change it to something meaningful.  He also demonstrates how to kill a container and what happens when you accidentally stop a container.  The guys discuss how to consider a restart when a system is rebooted or power is lost.  Justin also shows how set a restart policy for containers",
          "length": "1520",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-4-1-managing_containers-032217.00_25_04_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-4-1-managing_containers-032217.00_25_04_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-4-1-managing_containers-032217.00_25_04_01.Still001-sm.jpg",
          "title": "Managing Containers",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:03.456\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:03.456 --> 00:00:08.322\n[CROSSTALK]\n\n3\n00:00:08.322 --> 00:00:11.801\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.801 --> 00:00:15.630\n&gt;&gt; Welcome back to another great\nepisode right here on ITProTV.\n\n5\n00:00:15.630 --> 00:00:16.252\nI'm your host, Ronnie Wong.\n\n6\n00:00:16.252 --> 00:00:19.616\nAnd today,\nyou're watching Introduction to Docker.\n\n7\n00:00:19.616 --> 00:00:23.740\nWe're specifically gonna be\ndiving in on managing containers.\n\n8\n00:00:23.740 --> 00:00:28.035\nJustin in previous episode has just really\nshowed us how to actually get our first\n\n9\n00:00:28.035 --> 00:00:29.502\ncontainer up and running.\n\n10\n00:00:29.502 --> 00:00:31.693\nAnd make sure that we\nunderstand the basics of that.\n\n11\n00:00:31.693 --> 00:00:35.486\nBut now that we have multiple containers,\nhow do we actually manage them better, and\n\n12\n00:00:35.486 --> 00:00:37.680\nthat's why we have Justin Dunsen with us.\n\n13\n00:00:37.680 --> 00:00:39.075\nJustin welcome back to the studio,\nand how are you doing?\n\n14\n00:00:39.075 --> 00:00:40.230\n&gt;&gt; I'm doing well.\n\n15\n00:00:40.230 --> 00:00:42.935\nI'm excited to be here again Ronnie,\nand how are you today?\n\n16\n00:00:42.935 --> 00:00:46.896\nI am doing great and ready for us to\ntake a look now a little bit more about\n\n17\n00:00:46.896 --> 00:00:50.390\nthe fact that I've got multiple\ncontainers up and running and\n\n18\n00:00:50.390 --> 00:00:54.893\nthat I need to understand that there may\nbe a little bit more management than just\n\n19\n00:00:54.893 --> 00:00:57.675\nsaying okay I've got them all up,\nbig deal.\n\n20\n00:00:57.675 --> 00:00:59.806\nOkay, so, Justin,\nwhere are we gonna begin?\n\n21\n00:00:59.806 --> 00:01:02.761\n&gt;&gt; Well, we do not have to set it and\nforget it.\n\n22\n00:01:02.761 --> 00:01:07.117\nWe have a longstanding application that\nyou need to run with a database and\n\n23\n00:01:07.117 --> 00:01:08.319\nmulti containers.\n\n24\n00:01:08.319 --> 00:01:11.405\nYou may want those to run\nover long periods of time.\n\n25\n00:01:11.405 --> 00:01:14.524\nBut, we need some way to manage,\nyou know, what if something bad happens?\n\n26\n00:01:14.524 --> 00:01:16.666\nWhat if there's an electrical outage or\n\n27\n00:01:16.666 --> 00:01:20.446\nyou need to do a reboot because there's\nsome kind of security update for\n\n28\n00:01:20.446 --> 00:01:22.970\nyour underlying OS we need\nto be aware of those.\n\n29\n00:01:22.970 --> 00:01:25.579\nOr if I just continue\nto run up containers,\n\n30\n00:01:25.579 --> 00:01:29.639\neven though they're incredibly\nlightweight as compared to VMs,\n\n31\n00:01:29.639 --> 00:01:33.349\nit is possible that maybe I just\nrun our of system resources.\n\n32\n00:01:33.349 --> 00:01:36.416\nI just slow to a crawl and\nmy computer locks up, and\n\n33\n00:01:36.416 --> 00:01:39.920\nwe've started down that\npath a little bit already.\n\n34\n00:01:39.920 --> 00:01:43.002\nSo let's go ahead and\ntake a look at my terminal here and\n\n35\n00:01:43.002 --> 00:01:45.014\nwe have these containers running.\n\n36\n00:01:45.014 --> 00:01:47.584\nWe've got a couple of NGINX and\na busy box here.\n\n37\n00:01:47.584 --> 00:01:51.328\nAnd currently,\nthey're running in the background.\n\n38\n00:01:51.328 --> 00:01:55.620\nThey are what as known as a daemon\nprocess now, they're just chilling.\n\n39\n00:01:55.620 --> 00:01:59.136\nWell, if we were attached to them, if we\nwere in the terminal, we'd know how to\n\n40\n00:01:59.136 --> 00:02:02.510\nkill those from a previous episode,\nand that'll shut down the container.\n\n41\n00:02:03.520 --> 00:02:04.771\nBut how do I manage these?\n\n42\n00:02:04.771 --> 00:02:08.339\nHow do I make these stop?\n\n43\n00:02:08.339 --> 00:02:10.836\nWell there's a couple\nof different commands.\n\n44\n00:02:10.836 --> 00:02:18.180\nAnd there is Docker kill and there's a\ncouple of ways I can identify a container.\n\n45\n00:02:18.180 --> 00:02:22.920\nI can either use the container\nID like 88971bf81410.\n\n46\n00:02:22.920 --> 00:02:24.631\n&gt;&gt; [LAUGH] Easy to remember.\n\n47\n00:02:24.631 --> 00:02:27.883\n&gt;&gt; I've already memorized it myself,\nRonnie.\n\n48\n00:02:27.883 --> 00:02:31.628\nToo bad they change every time.\n\n49\n00:02:31.628 --> 00:02:35.003\nOr I can use a name like agitated_cray.\n\n50\n00:02:35.003 --> 00:02:38.704\nA nice little throwaway\nto the super computers.\n\n51\n00:02:38.704 --> 00:02:42.109\nWell, I can use either one of those.\n\n52\n00:02:42.109 --> 00:02:45.112\nI tend to go with names, and\nyou'll see why in just a bit.\n\n53\n00:02:45.112 --> 00:02:52.570\nSo if I kill agitated.cray and\nit repeats the name back to me, okay.\n\n54\n00:02:53.840 --> 00:02:55.679\nAnd now, if I run doctorps,\n\n55\n00:02:55.679 --> 00:03:00.290\nyou'll notice that agitated.cray\nis no longer a running container.\n\n56\n00:03:00.290 --> 00:03:06.610\nWell all right, we can kill,\nbut there's another way.\n\n57\n00:03:06.610 --> 00:03:08.050\nAnd that is Docker,\n\n58\n00:03:08.050 --> 00:03:12.898\nwell I can't remember those names\nRonnie despite what I just said.\n\n59\n00:03:12.898 --> 00:03:17.880\nI can Docker stop inspiring_hypatia.\n\n60\n00:03:17.880 --> 00:03:23.409\nI guess the names are fun, not gonna lie.\n\n61\n00:03:23.409 --> 00:03:27.288\nAnd then if I stop inspiring_hypatia,\nand if I Docker PS,\n\n62\n00:03:27.288 --> 00:03:29.092\nnotice it is now gone also.\n\n63\n00:03:29.092 --> 00:03:30.944\n[INAUDIBLE].\n\n64\n00:03:30.944 --> 00:03:34.112\n&gt;&gt; [LAUGH]\n&gt;&gt; There's two commands,\n\n65\n00:03:34.112 --> 00:03:36.767\nto what seems to do the same thing.\n\n66\n00:03:36.767 --> 00:03:38.180\nHow could I go find that out?\n\n67\n00:03:38.180 --> 00:03:41.205\nWe could hop on the internet and\ngo read the docs.\n\n68\n00:03:41.205 --> 00:03:48.680\nBut within command line of Docker if I say\nstop, help, it will tell me the general.\n\n69\n00:03:48.680 --> 00:03:51.425\nIs kinda like a man page if\nyou ever used on of those.\n\n70\n00:03:51.425 --> 00:03:53.713\nA general like this is how you use it.\n\n71\n00:03:53.713 --> 00:03:58.321\nSo stop one or more containers,\nso stop options.\n\n72\n00:03:58.321 --> 00:03:59.687\nWhat are possible options?\n\n73\n00:03:59.687 --> 00:04:03.930\nWell I can use a -t flag and\nthat's the seconds to wait.\n\n74\n00:04:03.930 --> 00:04:08.818\nSo I can actually schedule\nto later to wait, okay.\n\n75\n00:04:08.818 --> 00:04:12.323\nAnd then that takes an integer, okay.\n\n76\n00:04:12.323 --> 00:04:15.603\nSo I can schedule something to run for\na certain amount of time and\n\n77\n00:04:15.603 --> 00:04:19.330\nthen kill it, and then maybe that's\nsome way you use to limit a process.\n\n78\n00:04:19.330 --> 00:04:22.264\nYou wanna speed up process that's\ndoing some data crunching or\n\n79\n00:04:22.264 --> 00:04:25.416\nsomething like that and you want to\nlimit it to a run time just because\n\n80\n00:04:25.416 --> 00:04:28.257\nyou know this is going to happen over and\nover and over again.\n\n81\n00:04:28.257 --> 00:04:31.015\nThink cron job or\na scheduled job like that.\n\n82\n00:04:31.015 --> 00:04:35.916\nSo you can limit that with stop by setting\na delay of when it was actually going\n\n83\n00:04:35.916 --> 00:04:36.540\nto stop.\n\n84\n00:04:36.540 --> 00:04:40.035\nNow keep in mind stop is,\nwell it stops it, it's done.\n\n85\n00:04:40.035 --> 00:04:42.060\nWhat about if we look at Docker kill?\n\n86\n00:04:43.906 --> 00:04:48.341\nAnd --help, kill one or\nmore running containers.\n\n87\n00:04:48.341 --> 00:04:56.460\nAnd it does that by sending a signal, like\na stop-process signal like SIGTERM, boom.\n\n88\n00:04:56.460 --> 00:05:00.266\nThey achieve the same goal\nat this early stage, but\n\n89\n00:05:00.266 --> 00:05:04.526\nnotice kill provides the ability\nto add a signal string.\n\n90\n00:05:04.526 --> 00:05:09.681\nAnd what you may have is an application\nthat's listening for these signals and\n\n91\n00:05:09.681 --> 00:05:14.756\nmay shut down based on this kill depending\non what the kill string or the signal\n\n92\n00:05:14.756 --> 00:05:20.700\nthat is sent, not the kill string, but the\nsignal that is sent to kill the process.\n\n93\n00:05:20.700 --> 00:05:25.161\nSo you want to gracefully shut down versus\nstop or you can schedule it for later.\n\n94\n00:05:25.161 --> 00:05:26.903\nSo those are the two things there.\n\n95\n00:05:26.903 --> 00:05:30.691\nRight now, they're almost the same.\n\n96\n00:05:30.691 --> 00:05:35.111\n&gt;&gt; Now just that the commands\nactually seem pretty easy, kill,\n\n97\n00:05:35.111 --> 00:05:40.900\nI think I can remember, but those names,\nis there a particular reason for them?\n\n98\n00:05:40.900 --> 00:05:42.944\nBut even there is,\nit doesn't really matter,\n\n99\n00:05:42.944 --> 00:05:46.636\nbecause the names really don't match up to\nthe function either that I'm expecting.\n\n100\n00:05:46.636 --> 00:05:52.150\nNGINX, if you tell me web server one,\nI can understand that makes sense.\n\n101\n00:05:52.150 --> 00:05:54.356\nIf you tell me that I'm running Busy Box,\n\n102\n00:05:54.356 --> 00:05:56.953\nI would think that name\nwould be called Busy Box.\n\n103\n00:05:56.953 --> 00:05:57.905\n&gt;&gt; Mm-hm.\n\n104\n00:05:57.905 --> 00:06:00.345\n&gt;&gt; But what we're seeing though,\nit's kinda weird names.\n\n105\n00:06:00.345 --> 00:06:03.822\nIs there a way that we can\nchange that to make a matchup?\n\n106\n00:06:03.822 --> 00:06:05.896\nSo, instead of me killing whatever it was.\n\n107\n00:06:05.896 --> 00:06:07.227\n&gt;&gt; Inspiring cray.\n\n108\n00:06:07.227 --> 00:06:10.138\n&gt;&gt; Inspiring Cray or\nwhatever the other one.\n\n109\n00:06:10.138 --> 00:06:11.923\nAgain, I can't remember the other two.\n\n110\n00:06:11.923 --> 00:06:14.533\nBut, whatever it is,\nis there a way for us to change this?\n\n111\n00:06:14.533 --> 00:06:16.820\n&gt;&gt; Well, so there's a couple\nof ways we can manage names.\n\n112\n00:06:16.820 --> 00:06:18.584\nNow, I want to address\nyour first question.\n\n113\n00:06:18.584 --> 00:06:24.230\nWhy not just say NGINX, or\nweb server 1, or default to those?\n\n114\n00:06:24.230 --> 00:06:28.592\nWell, if it's Busy Box,\nit could be Busy Box or Busy Box One.\n\n115\n00:06:28.592 --> 00:06:32.926\nBut maybe that Busy Box is actually\nrunning a very particular application and,\n\n116\n00:06:32.926 --> 00:06:34.420\nand it needs to have a name.\n\n117\n00:06:35.970 --> 00:06:37.709\nBut we're not deciding\nthe names right now.\n\n118\n00:06:37.709 --> 00:06:40.539\nWe're getting a container ID,\nwhich is guaranteed to be unique,\n\n119\n00:06:40.539 --> 00:06:43.400\nbecause we're using SHA-256 hashing.\n\n120\n00:06:43.400 --> 00:06:47.783\nBut also, it's generating a unique name\nfrom the containers that are currently\n\n121\n00:06:47.783 --> 00:06:50.619\nrunning through a word list\nin creation of that, and\n\n122\n00:06:50.619 --> 00:06:52.691\nthey're funny, they make me laugh.\n\n123\n00:06:52.691 --> 00:06:55.844\nAnd that's because there needs\nto be a unique identifier.\n\n124\n00:06:55.844 --> 00:06:59.542\nI need to be able to shut\ndown that particular one.\n\n125\n00:06:59.542 --> 00:07:03.359\nAnd they recognize the container ID,\nis the shaws or\n\n126\n00:07:03.359 --> 00:07:07.278\nthe hashes rather,\nwell they're not too friendly.\n\n127\n00:07:07.278 --> 00:07:11.025\nI have to remember up to the difference\nbetween all the other hashes that\n\n128\n00:07:11.025 --> 00:07:13.530\nare currently running,\nor I can assign a name.\n\n129\n00:07:13.530 --> 00:07:15.066\nBut you brought up a great point.\n\n130\n00:07:15.066 --> 00:07:18.555\nAre there ways to better name these?\n\n131\n00:07:18.555 --> 00:07:23.010\nSomething that is meaningful to me, but\nis also the entire purpose of name.\n\n132\n00:07:23.010 --> 00:07:25.543\nWell, that's so\npeople can reason about them and\n\n133\n00:07:25.543 --> 00:07:28.147\nlet's take a look at a couple\nof ways we can do that.\n\n134\n00:07:28.147 --> 00:07:32.766\nSo if clear out here and currently\nI only have one container running.\n\n135\n00:07:32.766 --> 00:07:35.922\nAnd that's eloquent_pearlman.\n\n136\n00:07:35.922 --> 00:07:38.324\n&gt;&gt; [LAUGH]\n&gt;&gt; It is a fun name, and\n\n137\n00:07:38.324 --> 00:07:40.084\nthat's my web server.\n\n138\n00:07:40.084 --> 00:07:43.527\nWell, it would be better if I had it,\nlike, web server.\n\n139\n00:07:43.527 --> 00:07:45.187\nRight, maybe that would be a good name.\n\n140\n00:07:45.187 --> 00:07:49.338\nAnd Docker actually provides\na rename subcommand.\n\n141\n00:07:49.338 --> 00:07:54.314\nSo if you have an existing container and\nyou're, I forgot to give it a name.\n\n142\n00:07:54.314 --> 00:07:57.849\nAnd we'll see how that name\nknows in just a moment.\n\n143\n00:07:57.849 --> 00:08:01.650\nI need to change it but I don't wanna stop\nthe container cuz there's people already\n\n144\n00:08:01.650 --> 00:08:04.510\ncoming to my website I need\nto keep this up and running.\n\n145\n00:08:04.510 --> 00:08:07.916\nNow there are ways that you can spin\noff another container and use different\n\n146\n00:08:07.916 --> 00:08:11.324\ntechnologies to change the routing to\nwhere you can stop that container and\n\n147\n00:08:11.324 --> 00:08:14.646\njust keep it going, but this is a small\nproject let's see how this goes.\n\n148\n00:08:14.646 --> 00:08:23.000\nI want to rename\neloquent_perlman to webserver.\n\n149\n00:08:23.000 --> 00:08:24.800\nI get no errors.\n\n150\n00:08:24.800 --> 00:08:26.190\nLet's look at docker ps.\n\n151\n00:08:26.190 --> 00:08:28.291\nAnd now the names start\nto make more sense.\n\n152\n00:08:28.291 --> 00:08:32.992\nAnd when you create multi container\napplications, which we will,\n\n153\n00:08:32.992 --> 00:08:35.960\nthese are really important, right?\n\n154\n00:08:35.960 --> 00:08:39.414\nCuz all of these base images\nmaybe BusyBox or Ubuntu or\n\n155\n00:08:39.414 --> 00:08:43.269\nDebian or Fedora or CentOS,\nand you can't go by the image.\n\n156\n00:08:43.269 --> 00:08:47.270\nI don't really know what the hash is,\nhow they're even generated, right.\n\n157\n00:08:47.270 --> 00:08:51.890\nI know the hashing is in SHA-256,\nwhat information are they inputting\n\n158\n00:08:51.890 --> 00:08:54.680\ninto the hashing function\nto get the hashes out.\n\n159\n00:08:54.680 --> 00:08:59.475\nBut if I see, names, web server, I'm like,\nI bet that container's the web server.\n\n160\n00:08:59.475 --> 00:09:01.150\n&gt;&gt; [LAUGH]\n&gt;&gt; So that's one way,\n\n161\n00:09:01.150 --> 00:09:05.230\nif i already have a container running and\nit's good to go, awesome.\n\n162\n00:09:05.230 --> 00:09:09.498\nHowever, let's say that we\nwanted to start up a BusyBox and\n\n163\n00:09:09.498 --> 00:09:13.270\nwell this BusyBox is just\ngonna be like a worker.\n\n164\n00:09:13.270 --> 00:09:14.380\nLike as a data cruncher and\n\n165\n00:09:14.380 --> 00:09:18.120\nour web server's going to\nsend our work to data crunch.\n\n166\n00:09:18.120 --> 00:09:22.980\nNow we only need very limited run time but\nwe need, we're utilizing compute power so\n\n167\n00:09:22.980 --> 00:09:27.470\nwe don't wanna take up memory and all of\nthese with underlying system processes so\n\n168\n00:09:27.470 --> 00:09:29.990\nBusyBox would be a good time for this.\n\n169\n00:09:29.990 --> 00:09:35.230\nSo if I type run we're still on that run\ncommand with have another set of options.\n\n170\n00:09:35.230 --> 00:09:37.356\nWe're gonna actually say --name, and\n\n171\n00:09:37.356 --> 00:09:39.975\nI think there's a shortened version -n for\nthis.\n\n172\n00:09:39.975 --> 00:09:45.765\nI typically go with --name because it\nreminds me I have to provide a name.\n\n173\n00:09:45.765 --> 00:09:51.401\nSo if I say --name and let's say worker,\nand that is busybox and\n\n174\n00:09:51.401 --> 00:09:56.322\nwell, I have to remember that\nI'm gonna put -itd just to\n\n175\n00:09:56.322 --> 00:10:01.243\nmake sure that that system\nprocess stays in the front, so\n\n176\n00:10:01.243 --> 00:10:04.960\nit stays running so\nwe can actually see it.\n\n177\n00:10:06.320 --> 00:10:08.750\nAnd okay, that's good.\n\n178\n00:10:08.750 --> 00:10:13.557\nAnd then if I docker ps, notice this\nis busybox but it is now called worker.\n\n179\n00:10:13.557 --> 00:10:18.855\nSo when we're creating containers,\nif they had a particular purpose hey,\n\n180\n00:10:18.855 --> 00:10:23.013\nmaybe I should name it so\nI can remember and keep that going.\n\n181\n00:10:23.013 --> 00:10:27.758\n&gt;&gt; Now, there's no doubt that these are\na fairly useful commands that really do\n\n182\n00:10:27.758 --> 00:10:31.408\nhelp us especially on,\nwe talk about killing the process or\n\n183\n00:10:31.408 --> 00:10:33.456\nstopping it in a way they want to.\n\n184\n00:10:33.456 --> 00:10:38.369\nBut I know that other virtualization\ntechnologies adjust and allow me\n\n185\n00:10:38.369 --> 00:10:43.362\nnot only to stop it and start it but\nalso give me the ability to pause it and\n\n186\n00:10:43.362 --> 00:10:46.542\nkinda suspend it so\nthat nothing is working.\n\n187\n00:10:46.542 --> 00:10:48.553\nDo we have something like\nthat inside of Docker?\n\n188\n00:10:48.553 --> 00:10:53.296\n&gt;&gt; So based on our install,\nwe're running the Docker engine 1.17.\n\n189\n00:10:53.296 --> 00:10:58.100\nI think there's like a minor release\nversion or a patched version there.\n\n190\n00:10:58.100 --> 00:11:00.870\nBut in these more recent versions,\n\n191\n00:11:00.870 --> 00:11:04.970\nwe started to gain some additional\ncommands and I think it's good to take\n\n192\n00:11:04.970 --> 00:11:10.100\na look at those because even though we've\nstopped or the process has died and\n\n193\n00:11:10.100 --> 00:11:15.630\nthe container has stopped,\nthat does not mean the container's gone.\n\n194\n00:11:15.630 --> 00:11:21.580\nAnd as a matter of fact if I stop and\nrestart with the same name,\n\n195\n00:11:21.580 --> 00:11:24.250\nI no longer have a unique\nidentifier now I get an error.\n\n196\n00:11:24.250 --> 00:11:29.039\nActually, let's take a look at that, we'll\nstop one of these that we've named, so\n\n197\n00:11:29.039 --> 00:11:31.340\nI am gonna say docker stop worker.\n\n198\n00:11:31.340 --> 00:11:33.181\nThat's a lot easier to remember\nthan eloquent_pearlman.\n\n199\n00:11:33.181 --> 00:11:38.309\nAnd actually I think I have to\nkill cuz I'm using interactive so\n\n200\n00:11:38.309 --> 00:11:42.664\nthat's important I have to\nsend the actual signal and\n\n201\n00:11:42.664 --> 00:11:46.073\ncannot kill, it actually did stop.\n\n202\n00:11:46.073 --> 00:11:48.628\nSo whoopsy daisy, there you go.\n\n203\n00:11:48.628 --> 00:11:53.080\nIt looks like it just, kinda, hung there\nfor a little bit might be my computer.\n\n204\n00:11:53.080 --> 00:11:57.455\nSo if I go to docker ps,\nwell it's gone if I cycle back through,\n\n205\n00:11:57.455 --> 00:11:59.780\nlet me clear so we can get up here.\n\n206\n00:11:59.780 --> 00:12:02.718\nAnd I run dash dash name, busybox.\n\n207\n00:12:02.718 --> 00:12:06.712\nError response from docker daemon,\nthe container named slash worker,\n\n208\n00:12:06.712 --> 00:12:08.218\nslash worker that's odd,\n\n209\n00:12:08.218 --> 00:12:12.293\ntheat's because there's actually\na file system associated with this.\n\n210\n00:12:12.293 --> 00:12:16.375\nIs already used by container,\nand then it gives you the hash,\n\n211\n00:12:16.375 --> 00:12:20.710\nyou have move or rename that container\nto be able to use that name.\n\n212\n00:12:22.382 --> 00:12:26.489\nWell, I thought if I killed or stopped it,\nit was gone, right, ephemeral?\n\n213\n00:12:26.489 --> 00:12:31.587\nWe should treat them as ephemeral, but\nuntil we remove them, they're still there.\n\n214\n00:12:31.587 --> 00:12:35.519\nSo in the more recent editions of Docker,\nand\n\n215\n00:12:35.519 --> 00:12:40.110\nwhen I say recent I'm\nsaying post version one.\n\n216\n00:12:40.110 --> 00:12:43.512\nSome of this may have been\naround before version 1 and\n\n217\n00:12:43.512 --> 00:12:46.622\nnot all of it is around\nin like version 1.08.\n\n218\n00:12:46.622 --> 00:12:49.540\nSo definitely take a look\nat the documentation.\n\n219\n00:12:49.540 --> 00:12:51.400\nBut we have docker container.\n\n220\n00:12:52.600 --> 00:12:54.751\nAnd well, let's just say help.\n\n221\n00:12:54.751 --> 00:13:00.819\nAnd notice --help, this is where\nit gets a little odd typically,\n\n222\n00:13:00.819 --> 00:13:07.535\nI have like docker stop -- help and\nthen it just gives me a couple of flags.\n\n223\n00:13:07.535 --> 00:13:10.894\nDocker container is what's\nknown as a management command.\n\n224\n00:13:10.894 --> 00:13:15.743\nIt actually provides a bunch of other\ncommands that are associated with Docker\n\n225\n00:13:15.743 --> 00:13:18.030\ncontainer and then those commands.\n\n226\n00:13:18.030 --> 00:13:20.400\nAnd we may use some of these.\n\n227\n00:13:20.400 --> 00:13:26.537\nSome of them are aliases for upper level\ncommands like stop, so docker stop, and\n\n228\n00:13:26.537 --> 00:13:32.756\ndocker commander stop are very similar\nin nature, but there's this ls.\n\n229\n00:13:32.756 --> 00:13:39.140\nSo let's actually see docker container ls.\n\n230\n00:13:39.140 --> 00:13:41.591\nOkay, well that's mm-hm.\n\n231\n00:13:41.591 --> 00:13:46.804\nIf I type --help,\nnotice there's a -a flag there.\n\n232\n00:13:46.804 --> 00:13:51.140\nBecause by default,\nit's only showing you running containers.\n\n233\n00:13:51.140 --> 00:13:54.349\nHowever, if I change this to -a or --all,\n\n234\n00:13:54.349 --> 00:13:58.485\nI get every container that\nI've started and stopped, and\n\n235\n00:13:58.485 --> 00:14:02.808\nyou'll notice that I've been\nplaying around a little bit.\n\n236\n00:14:02.808 --> 00:14:07.020\nAnd in particular,\nI have this worker one right here.\n\n237\n00:14:08.980 --> 00:14:11.930\nAnd actually the one that's still up,\nnginx, is in this list.\n\n238\n00:14:11.930 --> 00:14:14.519\nSo it lists all of them,\nwhether they're stopped or started.\n\n239\n00:14:14.519 --> 00:14:17.615\nAnd you need to keep check on the status.\n\n240\n00:14:17.615 --> 00:14:21.413\nNow I'm gonna zoom out just\nto show you this is actually\n\n241\n00:14:21.413 --> 00:14:25.060\nformatted a little nicer\nwhen you have it in a stand.\n\n242\n00:14:25.060 --> 00:14:29.704\nI'm reading this, I don't actually\nkeep my font size this small,\n\n243\n00:14:29.704 --> 00:14:33.948\nbut it keeps ID, image,\nshow created and what its status is.\n\n244\n00:14:33.948 --> 00:14:38.096\nNotice all of these other\nones have exited except for\n\n245\n00:14:38.096 --> 00:14:41.306\nthe Nginx web server that I'm running.\n\n246\n00:14:41.306 --> 00:14:44.897\nSo if I've exited, even though\nI've stopped them or killed them,\n\n247\n00:14:44.897 --> 00:14:46.780\nthey're still there.\n\n248\n00:14:46.780 --> 00:14:50.587\nSo how do I get rid of those?\n\n249\n00:14:50.587 --> 00:14:52.799\nSo I wanna restart that worker but\n\n250\n00:14:52.799 --> 00:14:57.627\nI can't reuse the name worker until\nI get rid of the original container.\n\n251\n00:14:57.627 --> 00:15:01.254\nSo I can type docker remove and\n\n252\n00:15:01.254 --> 00:15:07.637\nthat was called worker,\nand now, I can say docker,\n\n253\n00:15:07.637 --> 00:15:13.589\ngotta spell docker right,\nthat's important,\n\n254\n00:15:13.589 --> 00:15:18.250\nrunn -itd --name worker busybox.\n\n255\n00:15:20.300 --> 00:15:21.596\nAnd I no longer have that conflict.\n\n256\n00:15:21.596 --> 00:15:24.660\nSo we have to be careful.\n\n257\n00:15:24.660 --> 00:15:29.610\nWe have to use that container\nsub-modules sometimes or sub-command.\n\n258\n00:15:29.610 --> 00:15:30.830\nManagement command,\n\n259\n00:15:30.830 --> 00:15:36.310\nin order to keep our finger on the pulse\nof what's available and what's not.\n\n260\n00:15:37.630 --> 00:15:42.610\n&gt;&gt; All right, is there any way for docker\nto really help us, in terms of both the.\n\n261\n00:15:42.610 --> 00:15:46.117\nSo instead of just manually typing\ncommands, is there some process that's\n\n262\n00:15:46.117 --> 00:15:49.703\nthere that docker can help me to manage\nthe start and the stop of these things?\n\n263\n00:15:49.703 --> 00:15:53.568\n&gt;&gt; So Ronney, let me clarify,\nlet me make sure.\n\n264\n00:15:53.568 --> 00:15:57.938\nDo you mean if the power flickers off,\nand it comes back on by default,\n\n265\n00:15:57.938 --> 00:16:00.250\nAre my containers gonna be running?\n\n266\n00:16:01.620 --> 00:16:03.054\nWell, I don't know, right?\n\n267\n00:16:03.054 --> 00:16:07.539\nWe actually need to find that out, because\nif you're using containers to service\n\n268\n00:16:07.539 --> 00:16:10.340\nsome business aspect or\neven if it's a web server.\n\n269\n00:16:11.470 --> 00:16:14.635\nThe only time I want that to be off\nis when the computer is off, right?\n\n270\n00:16:14.635 --> 00:16:16.668\nOr when the server's off.\n\n271\n00:16:16.668 --> 00:16:22.356\nSo okay,\nis there any way that I can manage those?\n\n272\n00:16:22.356 --> 00:16:27.268\nWell let's see here,\nI know that I can run and\n\n273\n00:16:27.268 --> 00:16:34.134\nthere's actually a dash dash,\nwell let's look at --help.\n\n274\n00:16:35.610 --> 00:16:40.160\nIf we look at docker run --help,\n\n275\n00:16:40.160 --> 00:16:44.080\nthere's a bunch of these flags, and\nwe won't get into all of these.\n\n276\n00:16:44.080 --> 00:16:51.230\nBut notice there is a --restart,\nand it says default \"no\".\n\n277\n00:16:51.230 --> 00:16:53.490\nSo what would happen is if\nmy computer turned off and\n\n278\n00:16:53.490 --> 00:16:56.280\nturned back on,\nall my docker containers would be stopped.\n\n279\n00:16:58.270 --> 00:17:03.860\nWell that's a problem, so\nhow do we manage that?\n\n280\n00:17:03.860 --> 00:17:10.515\nWell let's take a look here,\nlet's say docker run and\n\n281\n00:17:10.515 --> 00:17:14.431\nthen -itd --name worker2.\n\n282\n00:17:14.431 --> 00:17:19.481\nAnd I'm wanna say --restart equals and\nI know from experience and\n\n283\n00:17:19.481 --> 00:17:22.750\ndoing this that always is a valid string.\n\n284\n00:17:22.750 --> 00:17:25.435\nSo it actually takes a string\nbased on a restart policy.\n\n285\n00:17:25.435 --> 00:17:29.810\nSo --restart always busybox.\n\n286\n00:17:29.810 --> 00:17:33.060\nSo what this is gonna do\nis now the docker daemon.\n\n287\n00:17:33.060 --> 00:17:37.192\nIf this container dies for any reason,\nas soon as it has a chance,\n\n288\n00:17:37.192 --> 00:17:39.530\nit's gonna try to restart it.\n\n289\n00:17:39.530 --> 00:17:43.288\nNow, if there's an issue inside\nthe container like your application,\n\n290\n00:17:43.288 --> 00:17:46.100\nit constantly just kills it over and\nover again.\n\n291\n00:17:46.100 --> 00:17:48.936\nYou may not see a difference,\nbut if I type docker ps,\n\n292\n00:17:48.936 --> 00:17:51.338\nit doesn't look any different than worker.\n\n293\n00:17:51.338 --> 00:17:55.068\nAnd that's because these are kind\nof hidden configurations, and\n\n294\n00:17:55.068 --> 00:17:58.540\nmaybe where there's ways\nwe can figure out those.\n\n295\n00:17:58.540 --> 00:18:03.050\nBut it's always the only possible thing,\n\n296\n00:18:03.050 --> 00:18:07.310\nwhere would I go to find\nother restart policies?\n\n297\n00:18:07.310 --> 00:18:10.288\nAnd this is where I refer\nto the docker docs.\n\n298\n00:18:10.288 --> 00:18:15.470\nSo docker run --restart, and okay,\n\n299\n00:18:15.470 --> 00:18:21.170\nso let me zoom in here, got that tiny.\n\n300\n00:18:21.170 --> 00:18:25.543\nSo docker run reference, so\nthis is for the Docker engine.\n\n301\n00:18:25.543 --> 00:18:29.105\nAnd I'm gonna zoom in a little more,\nand if I scroll down,\n\n302\n00:18:29.105 --> 00:18:30.648\nit tells me a little bit.\n\n303\n00:18:30.648 --> 00:18:34.888\nBut over here on the right,\nokay, running constraints.\n\n304\n00:18:34.888 --> 00:18:41.310\nWell I have to do a lot of reading,\nI actually want just a look up.\n\n305\n00:18:41.310 --> 00:18:45.220\nRun docker run, aha, here we go.\n\n306\n00:18:45.220 --> 00:18:50.040\nThis is actually that same print out that\nyou see when you time docker run -help.\n\n307\n00:18:50.040 --> 00:18:54.200\nAnd most everything in Docker\nhas these for the --help, so\n\n308\n00:18:54.200 --> 00:18:55.560\nyou can go look on the web.\n\n309\n00:18:55.560 --> 00:19:00.238\nWhat I like is if I go\ndown to docker --restart,\n\n310\n00:19:00.238 --> 00:19:05.310\nit tells me, restart policy to apply on\nthe container exits, the default is no.\n\n311\n00:19:05.310 --> 00:19:06.300\nThat means do not restart.\n\n312\n00:19:08.110 --> 00:19:14.780\nHowever if I search on the page,\nI can look up the restart policies.\n\n313\n00:19:15.870 --> 00:19:21.824\nDocker supports the following restart\npolicies, No, On Failure and Always.\n\n314\n00:19:21.824 --> 00:19:27.713\nSo what On Failure means is if the\ncontainer exits with a non zero status.\n\n315\n00:19:27.713 --> 00:19:32.117\nWell we saw just a little while ago,\nwhen we were looking at those containers,\n\n316\n00:19:32.117 --> 00:19:36.970\nexit 137, status equals 137,\nthat's because we killed the process.\n\n317\n00:19:36.970 --> 00:19:41.998\nSo since it didn't gracefully shut down\nand my restart policy was on failure.\n\n318\n00:19:41.998 --> 00:19:47.906\nSo --restart equals failure,\nI would get a restart on those containers.\n\n319\n00:19:47.906 --> 00:19:51.889\nAnd then Always,\nrestart the container regardless.\n\n320\n00:19:52.930 --> 00:19:55.350\nSo it will try a bunch of times and\n\n321\n00:19:55.350 --> 00:19:58.460\nthen it will also start on\nDocker daemon start up.\n\n322\n00:19:58.460 --> 00:20:02.117\nSo those are things to keep in mind.\n\n323\n00:20:02.117 --> 00:20:04.612\n&gt;&gt; Now Justin, as I'm listening to you.\n\n324\n00:20:04.612 --> 00:20:08.140\nSome different questions\nare popping up in my head.\n\n325\n00:20:08.140 --> 00:20:13.028\nIs it important for Docker containers\nif we use something like this,\n\n326\n00:20:13.028 --> 00:20:15.063\nthat we set a restart order.\n\n327\n00:20:15.063 --> 00:20:17.978\nSo is there a precedence to some\nof the things like for example,\n\n328\n00:20:17.978 --> 00:20:19.460\nwhat you're working on.\n\n329\n00:20:19.460 --> 00:20:22.610\nDoes the web server have to come\nup before something else or\n\n330\n00:20:22.610 --> 00:20:24.619\ndoes we were talking about MongoDB?\n\n331\n00:20:24.619 --> 00:20:27.090\nDoes that have to come up\nbefore the web server?\n\n332\n00:20:27.090 --> 00:20:30.110\nAnd if it is, is that something we\ncan set using something like this?\n\n333\n00:20:30.110 --> 00:20:33.700\n&gt;&gt; So by default, the restart is not\ngonna allow you to modify the order.\n\n334\n00:20:33.700 --> 00:20:34.650\n&gt;&gt; Okay.\n\n335\n00:20:34.650 --> 00:20:39.578\n&gt;&gt; We'll see actually, there are\nadditional tools that allow us to manage\n\n336\n00:20:39.578 --> 00:20:44.102\nkind of how these services that\nkind of interdependent, linked,\n\n337\n00:20:44.102 --> 00:20:48.595\nif you will, how they will come\nup in order, the basic commands.\n\n338\n00:20:48.595 --> 00:20:50.408\nI'm not saying it's incapable.\n\n339\n00:20:50.408 --> 00:20:51.113\n&gt;&gt; Right.\n\n340\n00:20:51.113 --> 00:20:53.778\n&gt;&gt; There are better tools that\nare available to us to do that.\n\n341\n00:20:53.778 --> 00:20:57.163\n&gt;&gt; Now, the other thing Justin, cuz this\nis where I may be getting confused in\n\n342\n00:20:57.163 --> 00:20:58.740\nsomething that you said earlier.\n\n343\n00:20:58.740 --> 00:21:02.758\nThat if we stop that service, we can't\nbring it up with the same name again.\n\n344\n00:21:02.758 --> 00:21:05.919\nCuz it kind of box it us,\nas says we are not gonna do that.\n\n345\n00:21:05.919 --> 00:21:10.220\nSo if the machine restarts,\nisn't it restarting with the same name?\n\n346\n00:21:10.220 --> 00:21:13.883\n&gt;&gt; Well Ronnie,\nyou are keeping me honest yet again, and\n\n347\n00:21:13.883 --> 00:21:16.519\nmaybe it was a woopsie daisy on my part.\n\n348\n00:21:16.519 --> 00:21:19.726\nWe can't create a new\ncontainer with the same name.\n\n349\n00:21:19.726 --> 00:21:20.399\n&gt;&gt; Okay.\n&gt;&gt; But\n\n350\n00:21:20.399 --> 00:21:24.400\nthere's nothing to prevent us from\nrestarting the existing container.\n\n351\n00:21:24.400 --> 00:21:26.832\nAnd actually let's go try that right now.\n\n352\n00:21:26.832 --> 00:21:29.070\n&gt;&gt; All right.\n&gt;&gt; So let's hop down in here.\n\n353\n00:21:29.070 --> 00:21:32.200\nI'm gonna use that docker container ls- a.\n\n354\n00:21:32.200 --> 00:21:38.095\nAnd let's just pick one\nof these smaller ones.\n\n355\n00:21:38.095 --> 00:21:42.889\nSo let's pick this\nbusybox agitated_jepsen.\n\n356\n00:21:42.889 --> 00:21:44.660\n&gt;&gt; [LAUGH]\n&gt;&gt; That's a fun word.\n\n357\n00:21:44.660 --> 00:21:47.904\nSo I'm gonna copy and\nI've exited with a 0 status,\n\n358\n00:21:47.904 --> 00:21:50.945\nthat means that it gracefully shut down,\nokay.\n\n359\n00:21:50.945 --> 00:21:56.410\nSo I'm gonna clear, and\nI'm gonna say docker start.\n\n360\n00:21:56.410 --> 00:21:58.460\nSo start is a little\nbit different than run.\n\n361\n00:21:58.460 --> 00:21:59.707\nRun is creating a container.\n\n362\n00:21:59.707 --> 00:22:00.332\n&gt;&gt; Okay.\n\n363\n00:22:00.332 --> 00:22:01.161\n&gt;&gt; Then actually starting it up.\n\n364\n00:22:01.161 --> 00:22:02.028\n&gt;&gt; All right.\n\n365\n00:22:02.028 --> 00:22:06.977\n&gt;&gt; Start should now notice I said should,\nyou never know sometimes you gotta be\n\n366\n00:22:06.977 --> 00:22:10.950\ncareful there, and\nnotice it spits it back to me.\n\n367\n00:22:10.950 --> 00:22:16.430\nNow, if I type docker ps, well I have\nagitated jepson back up and running.\n\n368\n00:22:16.430 --> 00:22:20.160\nAnd that's because I'm able to\nstart the same container and\n\n369\n00:22:20.160 --> 00:22:23.761\nit's almost like a pause, but not quite.\n\n370\n00:22:23.761 --> 00:22:26.336\n&gt;&gt; Okay.\n&gt;&gt; So hopefully that clarifies a little\n\n371\n00:22:26.336 --> 00:22:27.699\nbit there, Ronnie.\n\n372\n00:22:27.699 --> 00:22:31.512\n&gt;&gt; Yeah, well I guess I might have just\nmisheard it because my experience with\n\n373\n00:22:31.512 --> 00:22:35.020\nDockers is not great,\nnot the best experience in the world.\n\n374\n00:22:35.020 --> 00:22:37.641\nBecause I've started to try and\nget it up and running, but\n\n375\n00:22:37.641 --> 00:22:39.312\nthen I ran into some of those issues.\n\n376\n00:22:39.312 --> 00:22:42.894\nAnd instead of pressing through, I just\nsaid all right, that's enough for now and\n\n377\n00:22:42.894 --> 00:22:44.340\nnever came back to it.\n\n378\n00:22:44.340 --> 00:22:46.940\nBut overall though,\nthis is actually a great place for\n\n379\n00:22:46.940 --> 00:22:50.250\nus to think about all the stuff\nthat we're talking about,\n\n380\n00:22:50.250 --> 00:22:53.150\nespecially when managing\nmultiple containers.\n\n381\n00:22:53.150 --> 00:22:55.905\nIt can be a little bit challenging\nas Justin has been showing us in\n\n382\n00:22:55.905 --> 00:22:56.575\nthis episode.\n\n383\n00:22:56.575 --> 00:22:59.088\nEspecially with the different\nnames that are in place, and\n\n384\n00:22:59.088 --> 00:23:01.860\nsome of the different things\nthat we have to keep in mind.\n\n385\n00:23:01.860 --> 00:23:04.810\nBut remember all of this is a part of\nwhat we have to learn about in terms of\n\n386\n00:23:04.810 --> 00:23:06.230\nmanaging containers.\n\n387\n00:23:06.230 --> 00:23:09.120\nMultiple containers will have different\nnames and they have to be uniquely\n\n388\n00:23:09.120 --> 00:23:12.615\nidentified in our systems, and\nthat's where we saw those different names.\n\n389\n00:23:12.615 --> 00:23:15.555\nBut if you're trying to set up\nan environment that's very close to\n\n390\n00:23:15.555 --> 00:23:18.768\nwhat you're seeing in reality that\nyour company is trying to set up for.\n\n391\n00:23:18.768 --> 00:23:22.333\nWell, and mirror that environment,\nwell you can change those names to help\n\n392\n00:23:22.333 --> 00:23:26.300\nyou out, so that it does match up to\nwhat you're normally seeing as well.\n\n393\n00:23:26.300 --> 00:23:30.750\nAlso of course, he showed us how we can\ncreate new containers as well as well as,\n\n394\n00:23:30.750 --> 00:23:33.360\nrestart and\nusing those different restart policies.\n\n395\n00:23:33.360 --> 00:23:34.810\nJustin any last hints?\n\n396\n00:23:34.810 --> 00:23:38.023\nIf somebody was getting started and here\nit is, they're starting to manage multiple\n\n397\n00:23:38.023 --> 00:23:40.627\ncontainers, any other tips that you\nwould provide out there for us?\n\n398\n00:23:40.627 --> 00:23:41.829\n&gt;&gt; So that's a great question.\n\n399\n00:23:41.829 --> 00:23:46.290\nSo the start and stop thing is\ndefinitely kind of murky water.\n\n400\n00:23:46.290 --> 00:23:48.930\nWhen do I use kill, when do I use stop?\n\n401\n00:23:48.930 --> 00:23:53.408\nKill means I got some kind of run away\nprocess, I want to stop it right now.\n\n402\n00:23:53.408 --> 00:23:58.271\nAnd maybe that kill has different kill\nsignals, and my application whatever's\n\n403\n00:23:58.271 --> 00:24:03.930\nrunning inside of docker, can manage\nthose different signals appropriately.\n\n404\n00:24:03.930 --> 00:24:08.070\nStop is meant to gracefully shut down,\nit's the difference between hitting\n\n405\n00:24:08.070 --> 00:24:08.876\nyour power button-\n&gt;&gt; [LAUGH]\n\n406\n00:24:08.876 --> 00:24:10.328\n&gt;&gt; On your computer,\n\n407\n00:24:10.328 --> 00:24:15.130\nand actually selecting shut\ndown on your computer.\n\n408\n00:24:15.130 --> 00:24:18.768\nWith that said, there are other\nways to get to a similar state.\n\n409\n00:24:18.768 --> 00:24:20.163\nI haven't shown them, but\n\n410\n00:24:20.163 --> 00:24:24.360\nkeep in mind, if you start looking through\nthe docs you may see pause and unpause.\n\n411\n00:24:25.370 --> 00:24:29.270\nAnd those provide a similar\nexperience to stop and star,t but\n\n412\n00:24:29.270 --> 00:24:31.090\nthere are nuanced differences.\n\n413\n00:24:31.090 --> 00:24:33.776\nWhat I recommend is stay with start,\n\n414\n00:24:33.776 --> 00:24:37.684\nstop because it's easier\nto conceptualize or kill.\n\n415\n00:24:37.684 --> 00:24:38.823\nOops, my computer froze up,\n\n416\n00:24:38.823 --> 00:24:41.480\nhold the power button down because\neverything is kind of locked out.\n\n417\n00:24:42.480 --> 00:24:46.451\nAnd know there's more than one way\nto achieve a similar goal there.\n\n418\n00:24:46.451 --> 00:24:50.543\n&gt;&gt; All right, Justin well thank you for\nthat last little tip there, as well as for\n\n419\n00:24:50.543 --> 00:24:53.800\nwhat we've learned about in\nthis entire show as well.\n\n420\n00:24:53.800 --> 00:24:57.720\nAnd also that you for watching, that's\na great place for us to sign off here to.\n\n421\n00:24:57.720 --> 00:25:00.179\nSo for ITProTV,\nI've been your host Ronnie Wong.\n\n422\n00:25:00.179 --> 00:25:01.801\n&gt;&gt; And I'm Justin Dennison.\n\n423\n00:25:01.801 --> 00:25:05.924\n&gt;&gt; Stay tuned right here for\nmore introduction to Docker shows.\n\n424\n00:25:05.924 --> 00:25:11.986\n[MUSIC]\n\n425\n00:25:11.986 --> 00:25:14.728\n&gt;&gt; Thank you for watching ITProTV\n\n",
          "vimeoId": "210317057"
        },
        {
          "description": "In this episode, Ronnie and Justin inspect images and containers. They begin with a review of images and containers to help us remember. Then they show how to see different details about containers and interact with them from outside of the container.",
          "length": "1728",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-5-1-inspecting_docker_images_and_containers-032217.00_28_32_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-5-1-inspecting_docker_images_and_containers-032217.00_28_32_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-5-1-inspecting_docker_images_and_containers-032217.00_28_32_14.Still001-sm.jpg",
          "title": "Inspecting Docker Images and Containers",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.224\nWelcome to ITPRO.TV.\n\n2\n00:00:01.224 --> 00:00:02.500\nI'm your host, Don Pezet.\n\n3\n00:00:02.500 --> 00:00:08.261\n[CROSSTALK]\n\n4\n00:00:08.261 --> 00:00:12.267\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.267 --> 00:00:15.083\nWelcome to another great\nepisode right here on ITPRO.TV.\n\n6\n00:00:15.083 --> 00:00:19.410\nI'm your host Ronnie Wong, and today you\nare watching Introduction to Docker.\n\n7\n00:00:19.410 --> 00:00:23.540\nWe're specifically gonna be diving into,\ntaking a look at the images and\n\n8\n00:00:23.540 --> 00:00:26.130\ncontainers that we already\nhave on our computers.\n\n9\n00:00:26.130 --> 00:00:28.980\nAnd here to help us out is\ngonna be mr Justin Dustin.\n\n10\n00:00:28.980 --> 00:00:31.940\nHe's coming back of course to help us\nunderstand this a little bit better.\n\n11\n00:00:31.940 --> 00:00:34.280\nJustin, welcome back to the show and\nhow are you doing?\n\n12\n00:00:34.280 --> 00:00:36.040\n&gt;&gt; I'm doing well Ronnie and\nI'm excited to be back.\n\n13\n00:00:36.040 --> 00:00:37.170\n&gt;&gt; And how are you today?\n\n14\n00:00:37.170 --> 00:00:39.960\n&gt;&gt; I am almost doing just about okay,\n\n15\n00:00:39.960 --> 00:00:41.613\nsince I don't seem to\nremember what I'm saying.\n\n16\n00:00:41.613 --> 00:00:44.380\n&gt;&gt; [LAUGH]\n&gt;&gt; But overall though, the very fact is,\n\n17\n00:00:44.380 --> 00:00:47.910\nwe do need to get started\ntaking a look at more details,\n\n18\n00:00:47.910 --> 00:00:51.930\nin terms of our images,\nas well as our containers.\n\n19\n00:00:51.930 --> 00:00:55.640\nAnd that's what you're here to help us to\ndo, is to help us to get a little bit more\n\n20\n00:00:55.640 --> 00:00:58.630\nof a handle on what we're managing and\nwhat we're taking a look at.\n\n21\n00:00:58.630 --> 00:01:01.170\nSo as we begin since we're\ntalking about images and\n\n22\n00:01:01.170 --> 00:01:05.110\ncontainers, we're gonna be\ntalking about images again.\n\n23\n00:01:05.110 --> 00:01:08.280\nSo even though we've already\nmentioned images and what they are,\n\n24\n00:01:08.280 --> 00:01:11.970\ntake this on a little bit of review and\nhelp us understand this again.\n\n25\n00:01:11.970 --> 00:01:17.220\n&gt;&gt; So Ronnie, that's one of the things\nwhere it's hard to conceptualize and\n\n26\n00:01:17.220 --> 00:01:19.190\njust keep beating it into your head.\n\n27\n00:01:19.190 --> 00:01:23.660\nAn image is the template,\nthe blueprint, the press,\n\n28\n00:01:23.660 --> 00:01:28.320\nthe mold, the cookie cutter that\nall containers are made from.\n\n29\n00:01:28.320 --> 00:01:32.240\nSo if you have a muffin tin your\nimage would be the muffin tin and\n\n30\n00:01:32.240 --> 00:01:35.260\nthen the muffins would be containers or\na cookie cutter and\n\n31\n00:01:35.260 --> 00:01:37.090\nthe containers would be the cookies.\n\n32\n00:01:37.090 --> 00:01:40.280\nNow I like those abstractions,\nthose analogies,\n\n33\n00:01:40.280 --> 00:01:45.560\nbecause they help me think about\nhow does this relationship exist.\n\n34\n00:01:45.560 --> 00:01:48.860\nI'm creating an image in order\nto run a bunch of containers.\n\n35\n00:01:50.020 --> 00:01:54.490\nThe image is going to be what I want,\nall of my configuration, everything.\n\n36\n00:01:54.490 --> 00:01:56.590\nAnd the containers are just going\nto be reproductions of that.\n\n37\n00:01:56.590 --> 00:01:59.760\nI like to think of it also\nas you can almost think,\n\n38\n00:01:59.760 --> 00:02:04.750\nif you've ever used a photo copier,\nyou know I have that nice little master.\n\n39\n00:02:04.750 --> 00:02:08.970\nAnd I put it into the photo copier and\nI hit copy, and I get exact reproduction.\n\n40\n00:02:08.970 --> 00:02:13.470\nWell assuming that your photo copier is\nactually working that day and working\n\n41\n00:02:13.470 --> 00:02:17.030\nwell, you'll get exact reproduction\nwhich will be your containers.\n\n42\n00:02:17.030 --> 00:02:21.740\nSo you have to be careful, remember that\nrelationship because if you mix those up.\n\n43\n00:02:21.740 --> 00:02:23.800\nYou start trying to do things\nto images that are meant for\n\n44\n00:02:23.800 --> 00:02:25.970\ncontainers and vice versa.\n\n45\n00:02:25.970 --> 00:02:30.170\n&gt;&gt; All right, so how can I know\nwhat images that I have available\n\n46\n00:02:30.170 --> 00:02:33.580\nto me then Justin, whether we're talking\nabout locally or any place else.\n\n47\n00:02:33.580 --> 00:02:37.960\n&gt;&gt; So that's a good story, we've touched\non that in a previous episode before, so\n\n48\n00:02:37.960 --> 00:02:42.090\nwe can always go to Docker hub and\nactually let's remind ourselves so\n\n49\n00:02:42.090 --> 00:02:43.630\nwe can have some comparison.\n\n50\n00:02:43.630 --> 00:02:47.800\nLet's take a look at my screen here,\nand I have Chrome open and\n\n51\n00:02:47.800 --> 00:02:49.870\nI'm just going to go to hub.Docker.com,\n\n52\n00:02:49.870 --> 00:02:55.120\nand before I go, let's just zoom in there\nso we can make sure everybody's got that.\n\n53\n00:02:55.120 --> 00:02:57.870\nSo hub.Docker.com and\nI'm going to look for\n\n54\n00:02:57.870 --> 00:03:00.610\nNGINX, I do have an affinity for\nNGINX running.\n\n55\n00:03:02.050 --> 00:03:04.010\nIt works well for me.\n\n56\n00:03:04.010 --> 00:03:09.280\nSo notice when I search for\nNGINX I get all of these lists of things,\n\n57\n00:03:09.280 --> 00:03:12.620\nthese are images, these are templates.\n\n58\n00:03:12.620 --> 00:03:16.886\nThat are provided,\nnot only by the official NGINX team, but\n\n59\n00:03:16.886 --> 00:03:22.840\nalso from jwilder, or web DevOps,\nor all of these other users,\n\n60\n00:03:22.840 --> 00:03:28.030\nand these may change as images\nare made and popularity increases,\n\n61\n00:03:28.030 --> 00:03:32.450\nbecause these are ranked,\nif I'm not mistaken, well actually, no.\n\n62\n00:03:33.760 --> 00:03:36.480\nI was wrong,\nI thought they were ranked based on pulls.\n\n63\n00:03:36.480 --> 00:03:39.730\nBut then I saw something that,\nno, I'm right.\n\n64\n00:03:39.730 --> 00:03:40.585\nNo, nope, there's one.\n\n65\n00:03:40.585 --> 00:03:44.890\n1 million pulls, boom, it's out of order.\n\n66\n00:03:44.890 --> 00:03:47.430\nThere's some ranking system based on that.\n\n67\n00:03:47.430 --> 00:03:50.834\nI'm not entirely sure what\nit is I just go look and\n\n68\n00:03:50.834 --> 00:03:55.566\nwhat I like to think about is there\nan official image right, NGINX,\n\n69\n00:03:55.566 --> 00:04:00.135\nis there something that may be put\nup by someone really intimately\n\n70\n00:04:00.135 --> 00:04:05.285\nreversed in that technology, those\nare probably gonna be really good but\n\n71\n00:04:05.285 --> 00:04:09.220\nthat is not to diminished\nthe community provided ones.\n\n72\n00:04:09.220 --> 00:04:13.987\nBecause there are use cases where I need\nto bring kind of these amalgamation of\n\n73\n00:04:13.987 --> 00:04:17.700\ntechnology together to\nachieve a single goal.\n\n74\n00:04:17.700 --> 00:04:22.130\nWell, that's probably not something\nthat a company is gonna put out.\n\n75\n00:04:22.130 --> 00:04:27.810\nBut maybe you'll find someone else on\nDocker Hub that has provided that to us.\n\n76\n00:04:27.810 --> 00:04:33.100\nIf you're in a EC2 instance or\nan Azure instance or something like that,\n\n77\n00:04:33.100 --> 00:04:38.350\nyou may not always have the ability to\nsearch Docker Hub and move back and\n\n78\n00:04:38.350 --> 00:04:40.450\nforth kind of like I'm swiping.\n\n79\n00:04:40.450 --> 00:04:42.350\nMaybe you have just\na command line interface.\n\n80\n00:04:43.470 --> 00:04:44.850\nWell, how does that help me?\n\n81\n00:04:45.930 --> 00:04:48.890\nI actually can get this information\nusing the Docker client.\n\n82\n00:04:48.890 --> 00:04:53.170\nSo let's, let's take a look at how that,\nhow that story plays out.\n\n83\n00:04:53.170 --> 00:04:58.190\nSo Docker, the client,\nprovides a search command and this is\n\n84\n00:04:58.190 --> 00:05:03.730\nnot actually interacting with containers\nbut pulls information based on images.\n\n85\n00:05:03.730 --> 00:05:05.910\nAnd I'm gonna search for NGINX again.\n\n86\n00:05:05.910 --> 00:05:08.220\nIt reaches out to Docker Hub.\n\n87\n00:05:08.220 --> 00:05:12.602\nAnd you'll notice if I scroll up,\n\n88\n00:05:12.602 --> 00:05:17.600\nNGINX official 5,604 stars.\n\n89\n00:05:17.600 --> 00:05:19.110\nJwilder NGINX proxy.\n\n90\n00:05:20.430 --> 00:05:22.709\nHey that's this exact list,\n\n91\n00:05:23.920 --> 00:05:26.700\nwell that's good to know I can\nactually get that pretty quickly.\n\n92\n00:05:26.700 --> 00:05:31.720\nAnd it's a little nicer so\nthere you go just to look.\n\n93\n00:05:31.720 --> 00:05:35.170\nSo I get the name, the description,\nhow many stars, and\n\n94\n00:05:35.170 --> 00:05:37.490\nwhether it's official or automated.\n\n95\n00:05:37.490 --> 00:05:38.440\nNow what is automated?\n\n96\n00:05:38.440 --> 00:05:40.990\nThere's actually a set of tools\nthat will build a Docker image and\n\n97\n00:05:40.990 --> 00:05:45.060\npublish it to Docker Hub on an automated\nbasis to be used by other systems that\n\n98\n00:05:45.060 --> 00:05:47.430\nthese people are using.\n\n99\n00:05:47.430 --> 00:05:48.350\nSo, keep that in mind.\n\n100\n00:05:48.350 --> 00:05:51.920\nI tend to start with looking for\nofficials.\n\n101\n00:05:51.920 --> 00:05:57.410\nIf I can't find those, this may not\nbe the best place to start searching.\n\n102\n00:05:57.410 --> 00:06:01.040\nI'm probably gonna come over here so\nI can click in.\n\n103\n00:06:01.040 --> 00:06:02.760\nI'm gonna go to the official and\n\n104\n00:06:02.760 --> 00:06:06.210\nread a little more about it to\nsee if it fits my use case.\n\n105\n00:06:06.210 --> 00:06:09.190\nBut if I'm on another system\nthat has the Docker engine, and\n\n106\n00:06:09.190 --> 00:06:13.700\nI'm like I can't exactly remember\nthat name, and I search, or\n\n107\n00:06:13.700 --> 00:06:16.650\nI can remember part of it,\nlike NGINX proxy.\n\n108\n00:06:16.650 --> 00:06:20.260\nI'm like I know it's like NGINX, or proxy,\n\n109\n00:06:20.260 --> 00:06:24.540\nI can do quick searches through that\ninterface, and see what's on Docker Hub.\n\n110\n00:06:25.710 --> 00:06:26.860\nThat doesn't help us.\n\n111\n00:06:26.860 --> 00:06:28.850\nWhat if I already have those?\n\n112\n00:06:28.850 --> 00:06:32.120\nHow can I see what images\nare available to me locally?\n\n113\n00:06:33.820 --> 00:06:35.910\nSo if I say Docker image.\n\n114\n00:06:38.030 --> 00:06:41.370\nOkay, well this is one of those got ya's.\n\n115\n00:06:41.370 --> 00:06:45.220\nIn recent releases of Docker, I get\nanother one of those management commands.\n\n116\n00:06:45.220 --> 00:06:51.040\nSo image actually gives me a set of\nadditional commands that I can run,\n\n117\n00:06:51.040 --> 00:06:54.460\nsuch as build and\nwe'll talk about that later.\n\n118\n00:06:54.460 --> 00:06:59.580\nLS, pull, push, okay well, there's also,\n\n119\n00:06:59.580 --> 00:07:03.950\nlet me clear this out here, Docker Images.\n\n120\n00:07:03.950 --> 00:07:06.550\nAnd that actually just lists\nout all of the images that\n\n121\n00:07:06.550 --> 00:07:08.070\nare currently on my system.\n\n122\n00:07:09.310 --> 00:07:12.110\nThat is an alias, or vice versa.\n\n123\n00:07:12.110 --> 00:07:14.510\nThis is an alias for images, so\n\n124\n00:07:14.510 --> 00:07:18.910\nif I say image ls,\nnotice it's the exact same output.\n\n125\n00:07:18.910 --> 00:07:24.870\nSo this management command has been put\nin the Docker client to be helpful to us.\n\n126\n00:07:24.870 --> 00:07:29.560\nYou will typically find me use Docker\nimages, because I've been using Docker for\n\n127\n00:07:29.560 --> 00:07:31.300\na little while.\n\n128\n00:07:31.300 --> 00:07:35.090\nAnd this Docker image ls wasn't\nalways part of the interface,\n\n129\n00:07:35.090 --> 00:07:38.310\nor I just didn't know about it and\ngot used to images.\n\n130\n00:07:38.310 --> 00:07:41.150\nBut do keep in mind that\nthose are both available.\n\n131\n00:07:41.150 --> 00:07:43.130\nAnd let's take a look at these images.\n\n132\n00:07:44.340 --> 00:07:49.960\nIt tells you the repository,\nnotice I have NGINX 1.10.3 and the latest.\n\n133\n00:07:49.960 --> 00:07:55.320\nSo I have two different versions, and\nit was created roughly three weeks ago.\n\n134\n00:07:55.320 --> 00:07:57.415\nNotice I have an image ID and\n\n135\n00:07:57.415 --> 00:08:01.796\nthis is something that Docker uses for\nthat uniqueness.\n\n136\n00:08:01.796 --> 00:08:02.486\nRight?\n\n137\n00:08:02.486 --> 00:08:07.550\nSo with this name and tag,\nthat would give me unique identifiers.\n\n138\n00:08:07.550 --> 00:08:11.740\nBut Docker needs some quick way to\nsearch and keep things organized.\n\n139\n00:08:11.740 --> 00:08:16.010\nSo this idea is a SHA hash again,\nactually a part of a SHA hash.\n\n140\n00:08:16.010 --> 00:08:18.720\nAnd, that's how you get that uniqueness.\n\n141\n00:08:18.720 --> 00:08:21.807\nAnd these are fairly\nquick to search through,\n\n142\n00:08:21.807 --> 00:08:25.302\nas an index in some kind\nof database-like utility.\n\n143\n00:08:25.302 --> 00:08:31.500\nBut it also tells me the size in addition\nto these unique identifying attributes.\n\n144\n00:08:31.500 --> 00:08:32.720\nNow what is the size?\n\n145\n00:08:32.720 --> 00:08:37.190\nThat means that nginx is about\n180 megabytes as an image.\n\n146\n00:08:37.190 --> 00:08:39.940\nThat does not mean my container is that.\n\n147\n00:08:39.940 --> 00:08:43.130\nMy container is actually sharing\na bunch of those resources, so\n\n148\n00:08:43.130 --> 00:08:45.130\nall the configuration and stuff.\n\n149\n00:08:45.130 --> 00:08:48.740\nAll the changes,\nall the data is 180 megabytes.\n\n150\n00:08:48.740 --> 00:08:51.780\nAnd my container's not\nnecessarily that heavyweight.\n\n151\n00:08:51.780 --> 00:08:56.720\nBut even if it was, it's still\nfairly small in comparison to some\n\n152\n00:08:56.720 --> 00:09:00.410\nother VM images that I've seen before.\n\n153\n00:09:00.410 --> 00:09:05.270\nSo that's kinda the story for\nwhere can I find new images.\n\n154\n00:09:05.270 --> 00:09:07.347\nWhere can I see what I have locally?\n\n155\n00:09:07.347 --> 00:09:11.769\nAnd we're not gonna dive into it yet but\nthere is a way to make our own images, and\n\n156\n00:09:11.769 --> 00:09:14.360\nthat's where the fun\nreally starts to dig in.\n\n157\n00:09:14.360 --> 00:09:17.360\nBut we're gonna have to hold off\non that for a little bit Ronnie.\n\n158\n00:09:17.360 --> 00:09:20.490\n&gt;&gt; All right so let's talk about\nthe container side for just a moment.\n\n159\n00:09:20.490 --> 00:09:24.839\nYou've already shown us how we can view\ncontainers that we've created before.\n\n160\n00:09:24.839 --> 00:09:28.539\nBut is there a way that we can see\neven more details about the containers\n\n161\n00:09:28.539 --> 00:09:31.376\nthemselves, and\nlearn a little bit more about them?\n\n162\n00:09:31.376 --> 00:09:32.750\n&gt;&gt; So that's a great question.\n\n163\n00:09:32.750 --> 00:09:37.090\nCurrently, in previous episodes,\nall we've done is start, stop.\n\n164\n00:09:37.090 --> 00:09:40.190\nWe've either started in the container and\n\n165\n00:09:40.190 --> 00:09:43.810\nhopped out of it, and\nwe've just lifted them.\n\n166\n00:09:43.810 --> 00:09:45.690\nThat's about all we've seen, right?\n\n167\n00:09:45.690 --> 00:09:48.330\nSo let's go ahead and\nsee how that changes,\n\n168\n00:09:48.330 --> 00:09:51.580\nbecause there are times I need to know\nwhat's going on with my containers.\n\n169\n00:09:51.580 --> 00:09:57.730\nI'm gonna treat them as a full-fledged\ncompute resource or database resource.\n\n170\n00:09:57.730 --> 00:09:59.380\nI need to know about them.\n\n171\n00:09:59.380 --> 00:10:01.340\nHow do I do that?\n\n172\n00:10:01.340 --> 00:10:02.880\nWell, let's take a look here.\n\n173\n00:10:02.880 --> 00:10:05.569\nSo I have my terminal open,\nand if I type docker ps,\n\n174\n00:10:05.569 --> 00:10:07.960\nI've actually done\na little bit of cleanup.\n\n175\n00:10:07.960 --> 00:10:09.890\nI have no containers running.\n\n176\n00:10:09.890 --> 00:10:15.449\nAnd let's do a run -itd --name and\n\n177\n00:10:15.449 --> 00:10:21.557\nlet's just call it worker and busybox.\n\n178\n00:10:21.557 --> 00:10:24.063\nAnd I just use that,\nthere's nothing special about it.\n\n179\n00:10:24.063 --> 00:10:27.024\nI've used it because it's small and\nI know it starts up really quickly and\n\n180\n00:10:27.024 --> 00:10:28.520\nit's very minimum.\n\n181\n00:10:28.520 --> 00:10:31.177\nBut this could easily.\n\n182\n00:10:31.177 --> 00:10:35.276\nI run into an issue Ronnie,\nI need to remove the container worker, and\n\n183\n00:10:35.276 --> 00:10:36.330\nthen rerun that.\n\n184\n00:10:36.330 --> 00:10:40.180\nBecause I was trying to reuse a name,\nit has to be unique, quick reminder.\n\n185\n00:10:40.180 --> 00:10:42.610\nSo don't worry if you see\nthose error conflicts.\n\n186\n00:10:42.610 --> 00:10:43.811\nIt's an easy fix,\n\n187\n00:10:43.811 --> 00:10:48.101\njust be aware that you should read\nwhatever this error response is.\n\n188\n00:10:48.101 --> 00:10:51.540\nNotice it says conflict,\nthe container name is already taken.\n\n189\n00:10:51.540 --> 00:10:53.150\nOkay that's not a big deal.\n\n190\n00:10:53.150 --> 00:10:56.870\nIf it tells you other things you\ndefinitely wanna research and\n\n191\n00:10:56.870 --> 00:10:59.180\nsee what's going on with my Docker daemon.\n\n192\n00:11:00.690 --> 00:11:02.620\nSo do I have BusyBox up and running?\n\n193\n00:11:03.930 --> 00:11:07.141\nI do, and I have a worker node, all right.\n\n194\n00:11:07.141 --> 00:11:11.010\nNow I just wanna know what's\ngoing on inside the container.\n\n195\n00:11:11.010 --> 00:11:16.610\nIf you've ever used Linux, there's\na handy command line utility called TOP.\n\n196\n00:11:16.610 --> 00:11:18.944\nIt'll actually show you\nrunning system processes.\n\n197\n00:11:18.944 --> 00:11:25.210\nAnd kind of how much CPU percentage, how\nmuch memory and some other information.\n\n198\n00:11:25.210 --> 00:11:26.550\n&gt;&gt; Yeah, performance information.\n\n199\n00:11:26.550 --> 00:11:30.984\n&gt;&gt; Yep, so if I say docker top\n\n200\n00:11:30.984 --> 00:11:36.030\nworker, I actually get\na snapshot of that performance.\n\n201\n00:11:36.030 --> 00:11:38.610\nOr excuse me, of what's going on.\n\n202\n00:11:38.610 --> 00:11:41.900\nNow, I don't get all\nthe performance information.\n\n203\n00:11:41.900 --> 00:11:43.210\nSo I misspoke there.\n\n204\n00:11:43.210 --> 00:11:46.990\nNot performance, but\nI get what is currently running.\n\n205\n00:11:46.990 --> 00:11:50.780\nAnd notice it is the shell, right.\n\n206\n00:11:50.780 --> 00:11:52.970\nAnd it has a pit ID.\n\n207\n00:11:52.970 --> 00:11:56.674\nSo we have to be careful it's not quite\nthe same as the top we're used to.\n\n208\n00:11:56.674 --> 00:12:00.360\nBecause I like to play around in top,\nI think it's fun just to watch it update.\n\n209\n00:12:02.000 --> 00:12:05.970\nBut it does give you a snapshot\nof what processes are running,\n\n210\n00:12:05.970 --> 00:12:08.870\nwhat user started them and the time.\n\n211\n00:12:08.870 --> 00:12:13.570\nIf we keep hitting this eventually\nthis time will update but\n\n212\n00:12:13.570 --> 00:12:16.320\nwe shouldn't wait around that's not fun.\n\n213\n00:12:17.350 --> 00:12:19.392\nSo this gives us a quick snapshot but\n\n214\n00:12:19.392 --> 00:12:22.710\nthere are other ways too figure out\nwhat's going on inside the container.\n\n215\n00:12:24.260 --> 00:12:28.620\nSo if I clear I can say docker inspect and\nworker.\n\n216\n00:12:29.780 --> 00:12:33.880\nAnd now,\nI get a giant spit out of json data.\n\n217\n00:12:35.080 --> 00:12:37.067\nAnd let's start from the top here and\njust see.\n\n218\n00:12:37.067 --> 00:12:40.470\nWhew, that was a lot of scrolling,\nall right?\n\n219\n00:12:40.470 --> 00:12:41.815\nI almost got winded scrolling.\n\n220\n00:12:41.815 --> 00:12:43.678\n&gt;&gt; [LAUGH]\n&gt;&gt; So it gives me an ID,\n\n221\n00:12:43.678 --> 00:12:46.924\nwhen it was created, the path SH,\nwhat kind of arguments.\n\n222\n00:12:46.924 --> 00:12:50.190\nSo that I can actually pass these\narguments when I start them up.\n\n223\n00:12:50.190 --> 00:12:53.610\n&gt;&gt; And it will give me\nthe current state it is running.\n\n224\n00:12:53.610 --> 00:12:54.610\nIs it running?\n\n225\n00:12:54.610 --> 00:12:55.760\nYes.\nIs it paused?\n\n226\n00:12:55.760 --> 00:12:56.860\nNo.\nIs it restarting?\n\n227\n00:12:58.480 --> 00:13:03.030\nOOMKilled, I'm not entirely sure what\nOOM is, Killed, no it hasn't been.\n\n228\n00:13:03.030 --> 00:13:03.530\nIs it dead?\n\n229\n00:13:03.530 --> 00:13:04.100\nNo.\n\n230\n00:13:04.100 --> 00:13:08.090\nThese seem kind of redundant but they\nprobably exist for a multitude or reasons.\n\n231\n00:13:08.090 --> 00:13:09.920\nThese are various status checks.\n\n232\n00:13:09.920 --> 00:13:13.550\nIs it dead, has it been killed,\nis it restarting, has it been paused.\n\n233\n00:13:13.550 --> 00:13:16.050\nIs it running, what is its status?\n\n234\n00:13:16.050 --> 00:13:17.900\nJust as quick interactions.\n\n235\n00:13:17.900 --> 00:13:20.868\nAnd this is because the Docker\ndaemon is actually a server.\n\n236\n00:13:20.868 --> 00:13:23.738\nAnd all it did was send\nback kind of a server\n\n237\n00:13:23.738 --> 00:13:26.940\noutput like you would see\nfrom a web based API.\n\n238\n00:13:28.640 --> 00:13:32.270\nIt also tells you the image\nthat was used to create it.\n\n239\n00:13:32.270 --> 00:13:35.900\nBut notice, it doesn't give\nme the standard image name.\n\n240\n00:13:35.900 --> 00:13:38.820\nIt's SHA-256, and then the image hash.\n\n241\n00:13:40.050 --> 00:13:42.270\nWell, we'll hop back to that later.\n\n242\n00:13:42.270 --> 00:13:46.290\nAnd then it tells me where\nsome of this file information\n\n243\n00:13:46.290 --> 00:13:51.020\nis being stored for\nmy Docker installation.\n\n244\n00:13:51.020 --> 00:13:56.495\nSo I can go and look at host name\ninformation, host paths, like Etsy host.\n\n245\n00:13:56.495 --> 00:14:01.332\nFor this Docker container that is\nrunning on my local Docker Damon system\n\n246\n00:14:01.332 --> 00:14:02.530\nconfiguration.\n\n247\n00:14:03.646 --> 00:14:08.420\nI'd recommend strongly,\ndon't start poking around\n\n248\n00:14:08.420 --> 00:14:11.050\nunless you're incredibly brave or\nyou know what you're doing.\n\n249\n00:14:11.050 --> 00:14:13.160\nUse the Docker client\nto interact with these.\n\n250\n00:14:13.160 --> 00:14:18.880\nIt will also tell you the name and what\nis some more important information here?\n\n251\n00:14:20.600 --> 00:14:23.210\nHere's one that's not always, right?\n\n252\n00:14:23.210 --> 00:14:25.890\nI wanna know, what is my restart policy?\n\n253\n00:14:25.890 --> 00:14:27.520\nI forgot to set it.\n\n254\n00:14:27.520 --> 00:14:28.400\nI tried to update it.\n\n255\n00:14:28.400 --> 00:14:29.720\nDid it update?\n\n256\n00:14:29.720 --> 00:14:34.670\nWell, if I inspect, I can actually\nlook for the restart policy and no,\n\n257\n00:14:34.670 --> 00:14:37.830\nI can also set a maximum retry count.\n\n258\n00:14:37.830 --> 00:14:40.900\nAnd it will tell you, well,\nif you're never gonna restart it,\n\n259\n00:14:40.900 --> 00:14:42.310\nI'm never gonna retry.\n\n260\n00:14:42.310 --> 00:14:46.370\nBut if I set that to always,\nit'll be some arbitrarily large number and\n\n261\n00:14:46.370 --> 00:14:47.499\nthat will be always.\n\n262\n00:14:49.250 --> 00:14:55.117\nAnd then the last thing\nI wanted to touch on is,\n\n263\n00:14:55.117 --> 00:14:58.135\nwait for it, network.\n\n264\n00:14:58.135 --> 00:15:04.040\nSo it kind of gives you a network for\nthe container, a network interface.\n\n265\n00:15:04.040 --> 00:15:06.910\nAnd you can get some\ninformation here about that.\n\n266\n00:15:08.650 --> 00:15:13.170\nSuch as the ports that are available was\nthe gateway, the IP address and so on.\n\n267\n00:15:13.170 --> 00:15:17.615\nSo, Inspect actually\ngives a giant spit out.\n\n268\n00:15:17.615 --> 00:15:21.882\nAnd some of them, the services that\nyou can use to manage your containers,\n\n269\n00:15:21.882 --> 00:15:25.610\nutilize this information for\nthat management service.\n\n270\n00:15:25.610 --> 00:15:31.791\nSo I could actually write some consumer\nof JSON data and build a user interface.\n\n271\n00:15:31.791 --> 00:15:35.120\nAnd have a point and click interface\nthat would manage all that containers.\n\n272\n00:15:35.120 --> 00:15:36.760\nI don't recommend doing that.\n\n273\n00:15:36.760 --> 00:15:37.405\nIt's a lot of work.\n\n274\n00:15:37.405 --> 00:15:39.730\n&gt;&gt; [LAUGH]\n&gt;&gt; Other people are good at that work.\n\n275\n00:15:41.130 --> 00:15:43.783\nSo there's inspect, okay, well,\n\n276\n00:15:43.783 --> 00:15:48.245\nnow I have an overwhelming amount\nof information versus top.\n\n277\n00:15:48.245 --> 00:15:51.490\nAre there other things that I can see?\n\n278\n00:15:51.490 --> 00:15:55.589\nWell, there is a stats for the worker.\n\n279\n00:15:55.589 --> 00:16:02.111\nAnd if I run, now I actually get kind\nof that top Feel that I'm used to,\n\n280\n00:16:02.111 --> 00:16:08.656\nand that's one of those weird, and\nlet me zoom out so you can see here.\n\n281\n00:16:08.656 --> 00:16:11.810\nIt's one of those,\nit's kind of hard to see.\n\n282\n00:16:11.810 --> 00:16:15.950\nI'll zoom in using various other controls.\n\n283\n00:16:15.950 --> 00:16:19.590\nBut it gives me a top feel for\nthe individual containers.\n\n284\n00:16:19.590 --> 00:16:22.160\nSo what is the container that's running?\n\n285\n00:16:22.160 --> 00:16:26.180\nAnd the edge of the screen is not\nwanting to play nice with me, Ronnie.\n\n286\n00:16:26.180 --> 00:16:30.220\nHow much CPU usage does it have?\n\n287\n00:16:30.220 --> 00:16:33.150\nWhat is its memory usage\nbased on its limit?\n\n288\n00:16:33.150 --> 00:16:35.990\nSo I have limited mine\nto roughly 2 gigabytes.\n\n289\n00:16:35.990 --> 00:16:37.450\nIt is currently using 280 kilobytes.\n\n290\n00:16:41.120 --> 00:16:46.860\nAnd then what is my network and\nthen what is my blocker or my volume read\n\n291\n00:16:46.860 --> 00:16:52.980\nwrite IO and how many PIDS or processes\nare currently running in the container.\n\n292\n00:16:52.980 --> 00:16:55.610\nOkay, this gives me a little\nmore information on top but\n\n293\n00:16:55.610 --> 00:16:59.379\nnot necessarily the information\noverload of well,\n\n294\n00:16:59.379 --> 00:17:03.810\nthat inspect, right?\n\n295\n00:17:03.810 --> 00:17:08.540\nSo, there's actually a final one and this\nworks very well if you have an existing\n\n296\n00:17:08.540 --> 00:17:13.790\nprocess that's maybe spitting out\nlog files to various known log,\n\n297\n00:17:14.830 --> 00:17:18.530\nlike /var/logs for certain things.\n\n298\n00:17:18.530 --> 00:17:20.250\nAnd let me zoom back in here.\n\n299\n00:17:21.990 --> 00:17:27.987\nSo we may not see something\nin this BusyBox worker, But\n\n300\n00:17:27.987 --> 00:17:31.011\nI think, there's another one, logs.\n\n301\n00:17:31.011 --> 00:17:35.120\nNope, nothing, and that's because\nthe shell's not actually creating logs.\n\n302\n00:17:35.120 --> 00:17:36.600\nAll right,\n\n303\n00:17:36.600 --> 00:17:41.680\nwell, what happens if, maybe I start up\nNGINX, cause NGINX actually has a log.\n\n304\n00:17:41.680 --> 00:17:47.830\nAll right, so let's say docker\nrun -d NGINX and Docker ps.\n\n305\n00:17:47.830 --> 00:17:51.710\nThere it is, and I forgot to name it.\n\n306\n00:17:51.710 --> 00:17:56.178\nI forgot, so we're gonna have to\ncall it by serene_kare, there we go.\n\n307\n00:17:56.178 --> 00:17:58.740\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't know, I don't know, Ronnie.\n\n308\n00:17:58.740 --> 00:18:00.790\n&gt;&gt; I can't pronounce it, so-\n&gt;&gt; Docker logs, and\n\n309\n00:18:00.790 --> 00:18:02.350\nthen I'm just gonna paste.\n\n310\n00:18:02.350 --> 00:18:03.570\nAnd there's nothing there.\n\n311\n00:18:04.580 --> 00:18:07.050\nSo this is one of those other gotchas.\n\n312\n00:18:07.050 --> 00:18:10.980\nThe logs, there's some other\nsetup that you have to do.\n\n313\n00:18:10.980 --> 00:18:12.230\nSo let's look at logs --help.\n\n314\n00:18:12.230 --> 00:18:16.940\nFetch the logs of a container.\n\n315\n00:18:16.940 --> 00:18:21.350\nBut it has to know where those logs are.\n\n316\n00:18:21.350 --> 00:18:25.551\nHow those logs are, whether stored or\n\n317\n00:18:25.551 --> 00:18:30.934\nwhat's going on and\nactually,let me see here,\n\n318\n00:18:30.934 --> 00:18:35.530\nif I doctor run -d -p 80:80 NGINX,\n\n319\n00:18:35.530 --> 00:18:38.944\nthat should expose NGINX, and\n\n320\n00:18:38.944 --> 00:18:45.550\nI should get at least an access log,\nwhen I go there.\n\n321\n00:18:45.550 --> 00:18:50.930\nAnd so, I go to Localhost and\nit says welcome to Engine X.\n\n322\n00:18:53.220 --> 00:18:55.861\nAnd I started it without a name again,\nRonnie.\n\n323\n00:18:55.861 --> 00:18:57.180\n&gt;&gt; [LAUGH]\n&gt;&gt; Ronnie, you're gonna\n\n324\n00:18:57.180 --> 00:18:58.600\nhave to help me remember that.\n\n325\n00:18:58.600 --> 00:19:00.270\n&gt;&gt; Serene_kare.\n\n326\n00:19:00.270 --> 00:19:01.830\n&gt;&gt; Well, let's see what it's called.\n\n327\n00:19:01.830 --> 00:19:04.700\nSo Clever_hopper.\n\n328\n00:19:04.700 --> 00:19:10.060\nYeah, so I had to create a new one\ninstead of remapping the port.\n\n329\n00:19:10.060 --> 00:19:13.270\nSo clever_hopper, and\nthere's still nothing there, and\n\n330\n00:19:13.270 --> 00:19:16.850\nthat's because the nginx logs\nare actually inside of nginx.config.\n\n331\n00:19:16.850 --> 00:19:19.670\nSo there is a little bit of set\nup that you have to do with logs.\n\n332\n00:19:19.670 --> 00:19:24.110\nI know that Apache actually spits\nout a long when you anticipate it.\n\n333\n00:19:24.110 --> 00:19:29.310\nSo maybe we can do a quick pull for\napache.\n\n334\n00:19:31.370 --> 00:19:34.730\nNope docker pull apache2.\n\n335\n00:19:36.800 --> 00:19:44.080\nAnd nope, this is a good time for\nDocker search and here we go.\n\n336\n00:19:45.940 --> 00:19:51.610\nAnd notice there is not an official repo.\n\n337\n00:19:51.610 --> 00:19:54.540\nSo I have to give the full name here.\n\n338\n00:19:55.540 --> 00:20:00.590\nAnd I'm going to copy and\nDocker pull, paste that, and\n\n339\n00:20:00.590 --> 00:20:03.220\nnow it's going through\ngrab that down forming.\n\n340\n00:20:04.640 --> 00:20:05.740\nAnd this will take a little while.\n\n341\n00:20:05.740 --> 00:20:09.140\nSo just as a review while\nthis is going we have inspect\n\n342\n00:20:09.140 --> 00:20:11.320\nwhich is an overloaded\ninformation including networks,\n\n343\n00:20:11.320 --> 00:20:15.400\nvolume, port mappings, current processes,\nwhat it's current condition?.\n\n344\n00:20:15.400 --> 00:20:19.250\nWe have top that just tells me,\nwell this is what inside and\n\n345\n00:20:19.250 --> 00:20:22.340\nthis is how long it's been running,\nand then we have stats.\n\n346\n00:20:22.340 --> 00:20:26.180\nThat actually gives me a rundown of the\ncontainer, including the number of pits,\n\n347\n00:20:26.180 --> 00:20:31.070\nCPU usage, memory, and so\non and so forth, and then logs.\n\n348\n00:20:31.070 --> 00:20:34.240\nWell logs have been acting up\non us a little bit, Ronnie.\n\n349\n00:20:34.240 --> 00:20:37.190\nSo if I say, Docker run.\n\n350\n00:20:37.190 --> 00:20:42.977\nAnd actually,\nI need to kill clever_hopper.\n\n351\n00:20:42.977 --> 00:20:49.990\nSo, docker kill, clever_hopper.\n\n352\n00:20:49.990 --> 00:20:52.830\nBecause I already have Port 80 bound, and\n\n353\n00:20:52.830 --> 00:20:55.380\nI know that Apache's going\nto serve on a similar port.\n\n354\n00:20:56.600 --> 00:21:01.711\nSo, Docker run -d --name.\n\n355\n00:21:01.711 --> 00:21:05.788\nHow about we just call the web and\n\n356\n00:21:05.788 --> 00:21:11.405\n-p 80:80, and what was that called?\n\n357\n00:21:11.405 --> 00:21:18.360\neborras/apache, nope.\n\n358\n00:21:18.360 --> 00:21:18.980\nI misspelled it.\n\n359\n00:21:20.730 --> 00:21:23.206\nThis is where Docker images\nwould come into play.\n\n360\n00:21:23.206 --> 00:21:30.400\nSo Docker images and two a's one r.\n\n361\n00:21:31.630 --> 00:21:32.190\nI'm telling you.\n\n362\n00:21:32.190 --> 00:21:33.290\n&gt;&gt; Might wanna remember that.\n\n363\n00:21:33.290 --> 00:21:37.150\n&gt;&gt; Names are hard, names are hard.\n\n364\n00:21:37.150 --> 00:21:39.096\nSo let's see if we can get this up and\ngoing here.\n\n365\n00:21:39.096 --> 00:21:45.100\nSo Docker PS and\nthere's out Apache server.\n\n366\n00:21:45.100 --> 00:21:47.980\nLet's make sure that it's serving.\n\n367\n00:21:47.980 --> 00:21:49.940\nIt is, all right, looks good.\n\n368\n00:21:49.940 --> 00:21:56.970\nAnd then if we say Docker logs web and\nnot it\n\n369\n00:21:56.970 --> 00:22:02.400\nactually fetches the Apache log files that\nwere going into a common log directory.\n\n370\n00:22:02.400 --> 00:22:05.220\nAnd it's just telling me that\nserver name cannot be resolved\n\n371\n00:22:05.220 --> 00:22:07.500\nbecause the configuration's wrong.\n\n372\n00:22:07.500 --> 00:22:11.970\nSo I show you that because logs\nsometimes doesn't behave exactly.\n\n373\n00:22:11.970 --> 00:22:16.980\nIt depends on the image setup and\nnot so much on the Docker tool set.\n\n374\n00:22:16.980 --> 00:22:20.210\n&gt;&gt; Now a little bit earlier Justin when\nyou were going through all the details of\n\n375\n00:22:20.210 --> 00:22:24.250\nwhat we were taking a look at I did\nsee that we could assign an IP address\n\n376\n00:22:24.250 --> 00:22:26.990\npossibly to these containers.\n\n377\n00:22:26.990 --> 00:22:31.070\nDoes this also give me the same ability\nthat I would have inside of a virtual,\n\n378\n00:22:31.070 --> 00:22:36.480\nanother virtual machine where I could\nmaybe use SSH to get into that?\n\n379\n00:22:36.480 --> 00:22:41.870\n&gt;&gt; So, the commonly accepted best practice\nfor Docker is do not set up an SSH\n\n380\n00:22:41.870 --> 00:22:47.170\nserver inside a container unless that's\nthe entire purpose of the container.\n\n381\n00:22:47.170 --> 00:22:51.070\nSo it's providing SSH service\ninto some environment.\n\n382\n00:22:51.070 --> 00:22:52.750\nIt's kind of like a tunnel.\n\n383\n00:22:52.750 --> 00:22:58.980\nThere are tools that allow you to attach\nor kind of get into a Docker container.\n\n384\n00:23:00.010 --> 00:23:06.408\nAnd more or\nless give you an SSH-like thing, okay?\n\n385\n00:23:06.408 --> 00:23:08.900\nSo that's kind of hand wavy at the moment.\n\n386\n00:23:08.900 --> 00:23:11.420\nLet's take a look.\n\n387\n00:23:11.420 --> 00:23:15.760\nI see Ronnie going, nope, nope.\n\n388\n00:23:15.760 --> 00:23:18.070\nSo it's not Docker.\n\n389\n00:23:18.070 --> 00:23:21.570\nThey're trying to do some things\nwith some other Docker tools that\n\n390\n00:23:21.570 --> 00:23:24.400\nallow you to do remote but\nif you're within the environment.\n\n391\n00:23:25.670 --> 00:23:30.210\nI can say docker attach and I'm\n\n392\n00:23:30.210 --> 00:23:35.410\ngoing to attach to worker because worker\nis the busy box that's running a shell.\n\n393\n00:23:35.410 --> 00:23:36.430\n&gt;&gt; Okay.\n\n394\n00:23:36.430 --> 00:23:40.080\n&gt;&gt; Here's a key point,\nif it is not interactive or\n\n395\n00:23:40.080 --> 00:23:44.190\ngive a teletype environment,\nif those both are not true.\n\n396\n00:23:44.190 --> 00:23:48.360\nYou may get some weird out,\nit will attach.\n\n397\n00:23:48.360 --> 00:23:52.329\nAnd what attach means is it's like SSH,\nusername, password,\n\n398\n00:23:52.329 --> 00:23:55.573\nusername@IP, and\nthen you give you the password.\n\n399\n00:23:55.573 --> 00:23:58.507\nSo it's kind of abstracting that away.\n\n400\n00:23:58.507 --> 00:24:02.013\nBut notice, I actually get a prompt,\na command line interface.\n\n401\n00:24:02.013 --> 00:24:06.163\nIf I do not have -i,\n-t when I'm running this,\n\n402\n00:24:06.163 --> 00:24:10.320\nthe attach will sometimes just freeze.\n\n403\n00:24:10.320 --> 00:24:14.360\nLike it'll attach to the container like in\nSSH, but it's like going into a virtual\n\n404\n00:24:14.360 --> 00:24:19.950\nmachine that doesn't have a shell,\nbash, or the standard shell running.\n\n405\n00:24:19.950 --> 00:24:23.210\nIt goes, yeah, you're here,\nbut there's nothing going on.\n\n406\n00:24:23.210 --> 00:24:28.129\nSo, I'm inside of that worker\ncontainer and I can say,\n\n407\n00:24:28.129 --> 00:24:31.375\nlet's just say, touch text.txt,\n\n408\n00:24:31.375 --> 00:24:36.102\nvery original name, Ronnie,\nI'm very proud of it.\n\n409\n00:24:36.102 --> 00:24:38.360\n&gt;&gt; [LAUGH]\n&gt;&gt; So, I made this, and\n\n410\n00:24:38.360 --> 00:24:40.920\nwhile I'm in this container\nI have elevated privileges,\n\n411\n00:24:40.920 --> 00:24:44.720\nI don't have to sudo inside the container\never, I'm always a super user.\n\n412\n00:24:44.720 --> 00:24:45.780\nI am root effectively.\n\n413\n00:24:46.990 --> 00:24:50.090\nActually I think most containers\nput you as the reuser and that's,\n\n414\n00:24:50.090 --> 00:24:54.180\nbecause you have that isolation that\nyou expect inside of a container.\n\n415\n00:24:54.180 --> 00:24:58.700\nNow, if I Ctrl+P, Ctrl+Q,\nI have detached, or\n\n416\n00:24:58.700 --> 00:25:03.869\nattached, so this will be attaching, would\nbe SSHing into a VM, or a cloud instance.\n\n417\n00:25:05.010 --> 00:25:09.487\nAnd then detach would be just\nexiting from that SSH connection.\n\n418\n00:25:09.487 --> 00:25:13.229\nSo, docker provides me\na nice way to do that.\n\n419\n00:25:13.229 --> 00:25:18.251\nAgain, dash i dash t that's\none way out reliably know that\n\n420\n00:25:18.251 --> 00:25:24.213\nyou'll always get a prompt,\notherwise you're not gonna get that.\n\n421\n00:25:24.213 --> 00:25:26.093\n&gt;&gt; [LAUGH] All right, Justin,\n\n422\n00:25:26.093 --> 00:25:30.034\nthat sounds like a lot of work\nto have to do just to do that.\n\n423\n00:25:30.034 --> 00:25:32.825\nIsn't there a way,\nthere's got to be a way,\n\n424\n00:25:32.825 --> 00:25:35.775\nthat I just want to run a simple command,\nokay?\n\n425\n00:25:35.775 --> 00:25:39.050\nSo, I don't want to have\nto set up an SSH server.\n\n426\n00:25:39.050 --> 00:25:39.820\nI don't have to do that.\n\n427\n00:25:39.820 --> 00:25:42.840\nIs there a way I can just run\nsimple commands from the outside?\n\n428\n00:25:42.840 --> 00:25:49.570\n&gt;&gt; Okay, so instead of attaching like SSH\nthing, just do like a LS, is there a way\n\n429\n00:25:49.570 --> 00:25:53.750\nthat I can just issue a command to\na docket container, and have it run it?\n\n430\n00:25:53.750 --> 00:25:55.410\n&gt;&gt; Right.\n[LAUGH]\n\n431\n00:25:55.410 --> 00:25:56.210\n&gt;&gt; And we are assuming\n\n432\n00:25:56.210 --> 00:25:59.530\nthat there is a valid process that will\ntake that command inside of the container.\n\n433\n00:25:59.530 --> 00:26:00.590\n&gt;&gt; I am going to assume that.\n\n434\n00:26:00.590 --> 00:26:02.655\n[LAUGH]\n&gt;&gt; Okay, so we have bash, or shell,\n\n435\n00:26:02.655 --> 00:26:05.770\nor something running that\nis expecting this command.\n\n436\n00:26:07.410 --> 00:26:09.550\nLet's do docker ps.\n\n437\n00:26:09.550 --> 00:26:11.730\nOkay, so I have my worker here.\n\n438\n00:26:11.730 --> 00:26:19.510\nAnd I do docker exec, and this means\nexecute on the container worker,\n\n439\n00:26:19.510 --> 00:26:23.220\nand then a list of commands,\nlike the entire command afterwards.\n\n440\n00:26:23.220 --> 00:26:28.090\nSo, if I do that, it will actually kind\nof proxy to that container run the LS,\n\n441\n00:26:28.090 --> 00:26:30.684\nand then pipe that back too,\nyour standard out.\n\n442\n00:26:30.684 --> 00:26:37.780\nSo, there's my text.txt, and it's still\nthere, but we have to be careful.\n\n443\n00:26:37.780 --> 00:26:40.930\nWe should treat it like it\nmay disappear at any moment\n\n444\n00:26:40.930 --> 00:26:42.830\nunless we make special provisions.\n\n445\n00:26:42.830 --> 00:26:43.640\nBut that's our quick and\n\n446\n00:26:43.640 --> 00:26:49.380\ndirty way if we don't actually need to be\ninside of the actual command line prompt.\n\n447\n00:26:49.380 --> 00:26:50.250\n&gt;&gt; All right, Justin, well.\n\n448\n00:26:50.250 --> 00:26:54.870\nThat's a lot of information again that\nyou've made sure that we've been inundated\n\n449\n00:26:54.870 --> 00:26:59.390\nwith here in taking a look at inspecting\nour images as well as our containers.\n\n450\n00:26:59.390 --> 00:27:02.590\nRemember that in this episode what\nwe did is we took a look of course,\n\n451\n00:27:02.590 --> 00:27:04.610\na little bit of a review\nabout what images are,\n\n452\n00:27:04.610 --> 00:27:09.650\nand how we can find out what images are\navailable to us if we're not really sure.\n\n453\n00:27:09.650 --> 00:27:13.650\nInstead of just being able to go to the\nwebsite, which is a great resource, but\n\n454\n00:27:13.650 --> 00:27:17.110\nwe can also find out, of course,\ndirectly from the command line as well.\n\n455\n00:27:17.110 --> 00:27:20.820\nWe also, of course, took a look at some\nof the ways that we can find more details\n\n456\n00:27:20.820 --> 00:27:24.140\nabout the way that our\ncontainers are running as well.\n\n457\n00:27:24.140 --> 00:27:25.520\nSometimes performance details,\n\n458\n00:27:25.520 --> 00:27:29.500\nbut also other information that\nwe made need to be able to use.\n\n459\n00:27:29.500 --> 00:27:32.920\nAnd, of course, then managing some of\nthe other things that we've talked about.\n\n460\n00:27:32.920 --> 00:27:36.990\nSuch as being able to run separate\ncommands and get them attached.\n\n461\n00:27:36.990 --> 00:27:43.030\nAs well as being able instead to go in,\nand do simple commands using the exec too.\n\n462\n00:27:43.030 --> 00:27:46.810\nSo, there's a lot of information that's\nright here that may be very useful to you\n\n463\n00:27:46.810 --> 00:27:49.840\nas you get up, and\nrunning inside of your environment.\n\n464\n00:27:49.840 --> 00:27:53.330\nThat you're trying to build,\nthat will help you out as well.\n\n465\n00:27:53.330 --> 00:27:57.540\nAll right, so, Justin, any last minute\nwords before we close out of this episode?\n\n466\n00:27:57.540 --> 00:28:00.284\n&gt;&gt; Well, Ronnie, I agree,\nI can tell, you're just like,\n\n467\n00:28:00.284 --> 00:28:01.747\nthat's a lot of information.\n\n468\n00:28:01.747 --> 00:28:03.218\n&gt;&gt; That's a lot of information.\n\n469\n00:28:03.218 --> 00:28:04.742\n&gt;&gt; That's a lot of information.\n\n470\n00:28:04.742 --> 00:28:06.720\n&gt;&gt; [LAUGH]\n&gt;&gt; Do refer to the Docker docs.\n\n471\n00:28:06.720 --> 00:28:08.880\n&gt;&gt; Right.\n&gt;&gt; Watch this episode again,\n\n472\n00:28:08.880 --> 00:28:10.630\nin our library.\n\n473\n00:28:10.630 --> 00:28:14.020\nIt is a lot of information, but\nstart up containers and play around.\n\n474\n00:28:14.020 --> 00:28:14.850\nBreak things.\n\n475\n00:28:14.850 --> 00:28:18.443\nThe wonderful thing about containers is,\nif you break it, just kill it and\n\n476\n00:28:18.443 --> 00:28:19.254\nstart a new one.\n\n477\n00:28:19.254 --> 00:28:21.720\n&gt;&gt; [LAUGH] All right,\nwell thank you again, Justin.\n\n478\n00:28:21.720 --> 00:28:24.330\nAnd also, thank you for watching today.\n\n479\n00:28:24.330 --> 00:28:26.080\nGreat place for us to sign off.\n\n480\n00:28:26.080 --> 00:28:29.300\nFor ITProTV,\nI've been your host Ronnie Wong.\n\n481\n00:28:29.300 --> 00:28:30.440\n&gt;&gt; And I'm Justin Dennison.\n\n482\n00:28:30.440 --> 00:28:34.350\n&gt;&gt; Stay tuned right here for\nmore introduction to Docker shows.\n\n483\n00:28:34.350 --> 00:28:40.235\n[MUSIC]\n\n484\n00:28:40.235 --> 00:28:44.620\n&gt;&gt; Thank you for watching ITPRO.TV\n\n",
          "vimeoId": "210317730"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at some of the considerations when bringing data into a docker container.  They show us that possibility that data can persist but it may not and shouldn’t be considered dependable for storage.  To make data persistent between containers we may not to create volumes that map to the data somewhere else, says Justin.  Also according to guys, that containers\naccessing that volume for the same information at the same time may cause corruption of the day.  The key is to be careful when using data between  containers.",
          "length": "1472",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-1-docker_and_data-032317.00_24_16_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-1-docker_and_data-032317.00_24_16_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-1-docker_and_data-032317.00_24_16_18.Still001-sm.jpg",
          "title": "Docker and Data",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:03.458\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:03.458 --> 00:00:06.912\n[CROSSTALK]\n\n3\n00:00:06.912 --> 00:00:08.484\n[MUSIC]\n\n4\n00:00:08.484 --> 00:00:12.298\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:12.298 --> 00:00:15.400\n&gt;&gt; Welcome to another great\nepisode right here on ITPro.TV.\n\n6\n00:00:15.400 --> 00:00:19.410\nI'm your host Ronnie Wong, and today\nyou're watching Introduction to Docker.\n\n7\n00:00:19.410 --> 00:00:22.150\nWe're specifically gonna be\ntaking a look at Docker and\n\n8\n00:00:22.150 --> 00:00:24.600\ndata that we also need\nto be able to work with.\n\n9\n00:00:24.600 --> 00:00:27.583\nAnd here to help us out is gonna\nbe our subject matter expert, Mr.\n\n10\n00:00:27.583 --> 00:00:28.461\nJustin Dennison.\n\n11\n00:00:28.461 --> 00:00:30.020\nJustin, how are you doing today?\n\n12\n00:00:30.020 --> 00:00:31.790\n&gt;&gt; I am doing well,\nRonnie, and how are you?\n\n13\n00:00:31.790 --> 00:00:35.870\n&gt;&gt; I am doing great today as we\ncontinue on in taking a look at Docker.\n\n14\n00:00:35.870 --> 00:00:40.380\nAnd of course, talking about data and\nworking with Docker together It, and\n\n15\n00:00:40.380 --> 00:00:45.090\nnow, is really about the time where we've\nseen a lot in previous episodes, right?\n\n16\n00:00:45.090 --> 00:00:49.360\nWe have taken a look at how to begin,\nhow to get a docker container up and\n\n17\n00:00:49.360 --> 00:00:53.280\nrunning, taking a look at, of course,\ngetting images and docker together.\n\n18\n00:00:53.280 --> 00:00:56.057\nBut now when you're talking about data,\nthings are starting to get real here,\n\n19\n00:00:56.057 --> 00:00:57.061\nJustin, a little bit more.\n\n20\n00:00:57.061 --> 00:00:57.639\n&gt;&gt; Yeah.\n\n21\n00:00:57.639 --> 00:00:58.490\nYeah.\n\n22\n00:00:58.490 --> 00:01:01.420\nData is definitely a concern of ours.\n\n23\n00:01:01.420 --> 00:01:03.600\nLet's set the picture a little bit.\n\n24\n00:01:03.600 --> 00:01:07.140\nLet's say that I'm gonna use containers\nto manage such, like a SQL database,\n\n25\n00:01:07.140 --> 00:01:11.800\nPostgres, MySQL, or\neven Mongo, a NoSQL database.\n\n26\n00:01:11.800 --> 00:01:15.720\nAnd, well, all of these databases need\nsome kind of persistance layer, right?\n\n27\n00:01:15.720 --> 00:01:18.990\nThey need to be able to save information,\nbackups, what it may be, or\n\n28\n00:01:18.990 --> 00:01:20.520\nactual read/write access.\n\n29\n00:01:20.520 --> 00:01:24.720\nTo disk It's there, even if we don't see\nit, we're not interacting with a read\n\n30\n00:01:24.720 --> 00:01:29.730\nwrite we would normally do through point\nand click or something programatically.\n\n31\n00:01:29.730 --> 00:01:32.300\nThose read writes are there and very real.\n\n32\n00:01:32.300 --> 00:01:36.820\nIf we're not careful with docker\ncontainers, when we spin up these\n\n33\n00:01:36.820 --> 00:01:42.050\ndatabases, well the container can actually\nbe saving the data within itself.\n\n34\n00:01:42.050 --> 00:01:46.476\nAnd then if we're using a service, when\nthat container shut down and restarted\n\n35\n00:01:46.476 --> 00:01:51.101\nbecause the service needs to reboot, or\nyou just need to reprovision, update a new\n\n36\n00:01:51.101 --> 00:01:55.352\nversion, all of your current records\nin your database, [SOUND], are gone.\n\n37\n00:01:55.352 --> 00:01:59.547\nNow, in previous episodes, we've actually\nseen that if we stop a container locally,\n\n38\n00:01:59.547 --> 00:02:02.750\nand we restart it,\nwe still have access to information.\n\n39\n00:02:02.750 --> 00:02:07.680\nHowever we should treat it as, well,\nit's never going to happen like that,\n\n40\n00:02:07.680 --> 00:02:14.640\nbecause we're using a deployment service\nthat's AWS using their container run time.\n\n41\n00:02:14.640 --> 00:02:18.290\nOr digital ocean or something like that,\nit very well may be that that container\n\n42\n00:02:18.290 --> 00:02:22.890\ngoes away, and\nthen you have no database information.\n\n43\n00:02:22.890 --> 00:02:26.020\nSo that's definitely something\nwe need to be aware of.\n\n44\n00:02:26.020 --> 00:02:28.560\n&gt;&gt; All right so Justin,\nthe way that you're talking about it,\n\n45\n00:02:28.560 --> 00:02:32.100\nit doesn't sound like that my data\ncould be safe inside of a container.\n\n46\n00:02:32.100 --> 00:02:34.770\nSo how safe is it when\nwe start to do this and\n\n47\n00:02:34.770 --> 00:02:38.220\nas we work with it what are some of the\nconsiderations we have to keep in mind?\n\n48\n00:02:38.220 --> 00:02:42.020\n&gt;&gt; So when we start working with\ncontainers, when you're first starting\n\n49\n00:02:42.020 --> 00:02:45.950\nto play around it's not a huge deal\nif you have some data in a container.\n\n50\n00:02:45.950 --> 00:02:50.190\nBut as you start building up data bases or\nyou're using it for\n\n51\n00:02:50.190 --> 00:02:53.620\ndevelopment I know that this is not\nnecessarily the standard use case.\n\n52\n00:02:53.620 --> 00:02:56.820\nI've made it to wear everything's\nrunning in a container but\n\n53\n00:02:56.820 --> 00:02:59.970\nI'm modifying files locally and\nthose need to be updated.\n\n54\n00:03:01.050 --> 00:03:03.470\nSo how do we get there?\n\n55\n00:03:03.470 --> 00:03:07.710\nHow do we provide a way that\nif the container goes awry,\n\n56\n00:03:07.710 --> 00:03:10.930\nsomething breaks,\nwe delete it on accident or purposefully,\n\n57\n00:03:10.930 --> 00:03:13.960\nthat we still have that\ndata available to us.\n\n58\n00:03:13.960 --> 00:03:19.980\nWell, there's a couple of different ways,\nand we'll see how that plays out.\n\n59\n00:03:19.980 --> 00:03:22.180\nSo let's take a look here in the terminal.\n\n60\n00:03:22.180 --> 00:03:25.140\nAnd I have, let's see if I\nhave any containers running.\n\n61\n00:03:25.140 --> 00:03:26.350\nI do not.\n\n62\n00:03:26.350 --> 00:03:30.990\nAnd let's just start by\nexploring the very first way\n\n63\n00:03:30.990 --> 00:03:35.280\nthat we can make a container have\na volume that is persistent.\n\n64\n00:03:35.280 --> 00:03:40.106\nAnd just to remind ourselves,\nI'm gonna docker run -it.\n\n65\n00:03:40.106 --> 00:03:46.383\nActually it, I-t there we go, --name.\n\n66\n00:03:46.383 --> 00:03:49.330\nAnd I'm gonna say test.\n\n67\n00:03:49.330 --> 00:03:52.100\nAnd that's gonna be a busy box container.\n\n68\n00:03:52.100 --> 00:03:53.410\nAnd so, it's running.\n\n69\n00:03:53.410 --> 00:03:55.141\nI'm inside the terminal now.\n\n70\n00:03:55.141 --> 00:03:57.330\nI'm going to touch.\n\n71\n00:03:57.330 --> 00:04:01.670\nActually let's just ls here and\nthere's all my folders.\n\n72\n00:04:01.670 --> 00:04:06.690\nNow I'm root user so\nI can be at the root of my file system and\n\n73\n00:04:06.690 --> 00:04:10.260\nactually create anything I want without\nhaving to elevate my permissions.\n\n74\n00:04:10.260 --> 00:04:16.540\nSo I'm going to detach hello.txt and\nthere we go.\n\n75\n00:04:16.540 --> 00:04:20.080\nIf we ls notice hello.text is there.\n\n76\n00:04:20.080 --> 00:04:27.520\nIf I get out of that container and\nI take a look it's still running okay,\n\n77\n00:04:28.530 --> 00:04:34.380\nwell I can attach to test and\nthere's my hello.\n\n78\n00:04:34.380 --> 00:04:37.319\nI'm going to now exit\nout of the container.\n\n79\n00:04:37.319 --> 00:04:39.690\nCtrl+D maybe.\n\n80\n00:04:39.690 --> 00:04:44.470\nThere I accidentally exited out of my\nshell there but that's not a huge deal.\n\n81\n00:04:44.470 --> 00:04:46.967\nYou gotta be careful\nwith that Ctrl+D Ronnie.\n\n82\n00:04:46.967 --> 00:04:49.181\n&gt;&gt; [LAUGH]\n&gt;&gt; It'll start closing things all\n\n83\n00:04:49.181 --> 00:04:49.860\nover the place.\n\n84\n00:04:49.860 --> 00:04:53.780\nSo if I docker ps I have\nno containers running but\n\n85\n00:04:53.780 --> 00:04:56.710\nthat doesn't mean that\nthe container has disappeared.\n\n86\n00:04:56.710 --> 00:05:04.110\nRight so if I type docker container\nls --all, or -a for short.\n\n87\n00:05:04.110 --> 00:05:08.642\nThen see that I have an exited\ncontainer with a status of 130.\n\n88\n00:05:08.642 --> 00:05:12.680\nThat's because I used Ctrl+D to\nkill the current process it died.\n\n89\n00:05:12.680 --> 00:05:17.234\nBut it's still there, so\n\n90\n00:05:17.234 --> 00:05:23.040\nif I docker start, test, okay.\n\n91\n00:05:23.040 --> 00:05:24.400\nIt's now back up and running.\n\n92\n00:05:25.730 --> 00:05:33.520\nLet's re attach to test and\nmy hello.txt is there.\n\n93\n00:05:33.520 --> 00:05:38.440\nSo this is a false sense of security and\nyou're like well, it's actually saved.\n\n94\n00:05:38.440 --> 00:05:39.700\nHe said that it doesn't save.\n\n95\n00:05:39.700 --> 00:05:41.450\nWe should treat it like it goes away.\n\n96\n00:05:41.450 --> 00:05:43.960\nWell, keep in mind,\nI haven't removed this container yet.\n\n97\n00:05:43.960 --> 00:05:47.467\nI just accidentally killed the process or\nintentionally killed it or\n\n98\n00:05:47.467 --> 00:05:49.526\nstarted it, or stopped it, excuse me.\n\n99\n00:05:49.526 --> 00:05:51.400\nAnd then I was able to restart it.\n\n100\n00:05:51.400 --> 00:05:54.800\nThere's no guarantee that that's\nalways gonna be the case.\n\n101\n00:05:54.800 --> 00:05:56.840\nAll right, so\nyou should think of it that way.\n\n102\n00:05:56.840 --> 00:06:00.420\nSo if I close back out of this.\n\n103\n00:06:01.450 --> 00:06:06.040\nAnd now I say,\ndocker remove the test container.\n\n104\n00:06:07.490 --> 00:06:11.617\nAnd let's take a look at the containers.\n\n105\n00:06:11.617 --> 00:06:16.010\nls --all lots of command line stuff here,\nRonnie.\n\n106\n00:06:16.010 --> 00:06:18.620\nSo do keep in mind these\nare all things you can look up.\n\n107\n00:06:18.620 --> 00:06:21.370\nGo watch previous videos if you're like,\nwhat is he doing there?\n\n108\n00:06:21.370 --> 00:06:22.470\nHow does he know that?\n\n109\n00:06:22.470 --> 00:06:24.300\nWe've covered all of these before.\n\n110\n00:06:24.300 --> 00:06:26.388\nBut the container's gone.\n\n111\n00:06:26.388 --> 00:06:30.708\nWell, I bet if I rerun,\ngive it the exact same name,\n\n112\n00:06:30.708 --> 00:06:34.260\nsame image, I'm hoping my data is there.\n\n113\n00:06:36.870 --> 00:06:38.676\nSpoiler alert, it's not.\n\n114\n00:06:38.676 --> 00:06:45.000\n[LAUGH] But I'm gonna say test,\nand it is also busybox.\n\n115\n00:06:45.000 --> 00:06:46.070\nAnd if I, no.\n\n116\n00:06:47.990 --> 00:06:49.630\nRight, that was a txt file.\n\n117\n00:06:49.630 --> 00:06:51.650\nThat's not a huge deal.\n\n118\n00:06:51.650 --> 00:06:55.010\nBut, if this was the container\nrunning my MySQL database for\n\n119\n00:06:55.010 --> 00:07:00.450\nall of my WordPress users, or\nany database for that matter.\n\n120\n00:07:00.450 --> 00:07:05.230\nAnd that container went away and\nI have no backups or the late last backup,\n\n121\n00:07:05.230 --> 00:07:08.420\nwell this is a separate\nproblem about backups but\n\n122\n00:07:08.420 --> 00:07:12.539\nthe last backup I had is old, and\nI've just lost a bunch of records.\n\n123\n00:07:13.680 --> 00:07:17.890\nSo you should treat containers\nas they will disappear,\n\n124\n00:07:17.890 --> 00:07:22.630\ndelete at any time, and\nwe need to be able to kind of handle that.\n\n125\n00:07:22.630 --> 00:07:23.860\nSo how do we handle that?\n\n126\n00:07:25.220 --> 00:07:29.820\nWell I'm going to actually\nget out of here, and\n\n127\n00:07:29.820 --> 00:07:31.570\nI'm gonna just remove that\ncontainer real quick.\n\n128\n00:07:32.710 --> 00:07:34.620\nAnd then I'm gonna hop\ninto my desktop just so\n\n129\n00:07:34.620 --> 00:07:38.520\nwe can have an easy way to slide back and\nforth, and, look here.\n\n130\n00:07:38.520 --> 00:07:42.800\nAnd I'm gonna make a, test directory.\n\n131\n00:07:44.010 --> 00:07:46.528\nActually, let's say test data.\n\n132\n00:07:46.528 --> 00:07:50.470\nThat will be a little more,\na little easier to think about.\n\n133\n00:07:50.470 --> 00:07:52.610\nSo I have my test data here.\n\n134\n00:07:54.030 --> 00:07:56.350\nAnd now I'm gonna re-run\nthat exact same container.\n\n135\n00:07:57.350 --> 00:07:59.712\nHowever, I'm gonna add a new flag.\n\n136\n00:07:59.712 --> 00:08:01.401\nI'm still gonna keep it interactive.\n\n137\n00:08:01.401 --> 00:08:03.204\nBut I'm gonna add a -v.\n\n138\n00:08:03.204 --> 00:08:05.977\nNow a -v has two options.\n\n139\n00:08:05.977 --> 00:08:08.776\nI can give a single name,\nwhich will expose, and\n\n140\n00:08:08.776 --> 00:08:12.510\nthat comes later as we start\nto use other Docker tools.\n\n141\n00:08:12.510 --> 00:08:17.000\nSome folder or directory, or volume,\nas it's called, inside the container,\n\n142\n00:08:17.000 --> 00:08:18.590\nto other Docker containers.\n\n143\n00:08:19.670 --> 00:08:23.390\nHowever, the way that I like\nto start with this, is,\n\n144\n00:08:23.390 --> 00:08:27.670\nI'm going to map a source directory,\nto a container directory.\n\n145\n00:08:27.670 --> 00:08:32.770\nSo I'm binding them up, I'm essentially\ncreating a tunnel between the two and\n\n146\n00:08:32.770 --> 00:08:36.560\nthen I can run my container and\nwe'll see what the ultimate result is.\n\n147\n00:08:36.560 --> 00:08:40.810\nI like to think of Mario pipes if you\nwill, they link the two worlds and\n\n148\n00:08:40.810 --> 00:08:42.090\nyou can go between them.\n\n149\n00:08:42.090 --> 00:08:44.675\nSo think of it that way and\nI'm going to link.\n\n150\n00:08:44.675 --> 00:08:50.980\ntestData:/testData.\n\n151\n00:08:50.980 --> 00:08:52.936\nNotice I put a leading slash there?\n\n152\n00:08:52.936 --> 00:08:53.540\nThis is the local.\n\n153\n00:08:53.540 --> 00:08:57.890\nThis is the container, okay?\n\n154\n00:08:57.890 --> 00:09:01.600\nLocal, what I call local, on my machine.\n\n155\n00:09:01.600 --> 00:09:03.360\nAnd then to the actual container.\n\n156\n00:09:04.550 --> 00:09:09.740\nAnd now,\nI'm just going to --name test busybox.\n\n157\n00:09:09.740 --> 00:09:12.870\nNow I can reuse this name because I've\ndeleted the previous container, and\n\n158\n00:09:12.870 --> 00:09:20.350\nI run and notice that I have a testData\ndirectory inside of this container now.\n\n159\n00:09:20.350 --> 00:09:23.960\nThat happened because of this\nlittle piece right here.\n\n160\n00:09:23.960 --> 00:09:26.920\nAll right, well,\nlet's actually go inside of that.\n\n161\n00:09:26.920 --> 00:09:28.140\nI'm inside the container.\n\n162\n00:09:29.170 --> 00:09:31.467\nLet's make that hello.txt.\n\n163\n00:09:31.467 --> 00:09:35.990\nThere is hello.text, and if I swipe over,\n\n164\n00:09:37.150 --> 00:09:44.350\nI actually have a test data and,\nwhat happen?\n\n165\n00:09:45.890 --> 00:09:49.890\nI was expecting, so let's go back and\ntry to troubleshoot here.\n\n166\n00:09:49.890 --> 00:09:52.160\nSo, I'm going to get out of here.\n\n167\n00:09:52.160 --> 00:09:57.653\nLS, LS test data, hm, what happened?\n\n168\n00:09:57.653 --> 00:10:02.510\nWell, you've gotta be\ncareful about the syntax.\n\n169\n00:10:02.510 --> 00:10:08.400\nWe need to make sure that this is actually\npointing to where you think it is.\n\n170\n00:10:08.400 --> 00:10:13.230\nAnd what I like to do is, instead I'm\ngonna remove this container, by force, so\n\n171\n00:10:13.230 --> 00:10:16.230\nit'll shut it down, not busybox.\n\n172\n00:10:17.650 --> 00:10:21.855\nAnd I'm gonna docker run -it -v,\nand I'm gonna say for\n\n173\n00:10:21.855 --> 00:10:26.190\nthe present working directory,\nand then the testData.\n\n174\n00:10:26.190 --> 00:10:31.130\nSo I'm being more specific if you ever run\nsettling or anything like that you've run\n\n175\n00:10:31.130 --> 00:10:36.455\ninto a similar problem, and then I'm\ngoing to pipe that to testData and\n\n176\n00:10:36.455 --> 00:10:41.220\n--name and then test busybox, all right.\n\n177\n00:10:41.220 --> 00:10:44.860\nSo let's go back and check, okay nothing,\nbut I have deleted that container so\n\n178\n00:10:44.860 --> 00:10:47.590\nthere is nothing in there,\nso if I go to test data, and\n\n179\n00:10:48.620 --> 00:10:54.080\nthen I touch hello.txt.\n\n180\n00:10:54.080 --> 00:11:00.950\nThere we go, so that's the first gotcha\nwhen working with this volume binding.\n\n181\n00:11:02.020 --> 00:11:05.070\n&gt;&gt; All right, so Justin, I have\na question now, when we start dong that.\n\n182\n00:11:05.070 --> 00:11:09.100\nWhen you remove the container now, this\nshould still be there in the background,\n\n183\n00:11:09.100 --> 00:11:10.350\nis that what we're saying?\n\n184\n00:11:10.350 --> 00:11:12.240\n&gt;&gt; Ronnie, you're in my mind.\n\n185\n00:11:12.240 --> 00:11:13.030\nThat's the hope.\n\n186\n00:11:13.030 --> 00:11:15.020\nI'm crossing my fingers.\n\n187\n00:11:15.020 --> 00:11:17.840\nI try to be very,\nvery careful when it concerns that.\n\n188\n00:11:17.840 --> 00:11:20.071\nNo I'm not really concerned\nabout this hello.txt, right?\n\n189\n00:11:20.071 --> 00:11:21.680\n&gt;&gt; [LAUGH]\n&gt;&gt; There's nothing in it.\n\n190\n00:11:21.680 --> 00:11:23.160\nThere's nothing important in it.\n\n191\n00:11:23.160 --> 00:11:27.120\nBut I try to be very conscious\nwhen I'm messing with data when I\n\n192\n00:11:27.120 --> 00:11:31.490\nhave data requirements\nbecause if I mess up, whoops,\n\n193\n00:11:31.490 --> 00:11:36.360\nall of my data's gone and Ronnie,\nyou ask a very, very important question.\n\n194\n00:11:36.360 --> 00:11:38.950\nWhat happens now if I\ndelete this container?\n\n195\n00:11:38.950 --> 00:11:40.440\nI stop it, I delete it.\n\n196\n00:11:40.440 --> 00:11:42.740\nIs hello.txt still there?\n\n197\n00:11:42.740 --> 00:11:45.680\nWell, let's find out and I close, right.\n\n198\n00:11:45.680 --> 00:11:50.500\nThe container is still there, but\n\n199\n00:11:50.500 --> 00:11:56.230\nnow if I remove test the container's gone.\n\n200\n00:11:56.230 --> 00:12:00.060\nNow as we've seen previously if\nit was only inside the container\n\n201\n00:12:00.060 --> 00:12:02.670\nthat hello.txt disappear.\n\n202\n00:12:02.670 --> 00:12:04.170\nHere's the moment of truth, Ronnie.\n\n203\n00:12:04.170 --> 00:12:06.140\n&gt;&gt; Okay.\n&gt;&gt; When I slide back over I'm hoping to\n\n204\n00:12:06.140 --> 00:12:11.340\nsee hello.txt, and in fact I do,\nbecause what I've done is\n\n205\n00:12:11.340 --> 00:12:16.250\nkind of cut a tunnel through that\nsegregation for this data persistence.\n\n206\n00:12:16.250 --> 00:12:21.280\nSo when I saved in test directory,\ninside the container It did an actual\n\n207\n00:12:21.280 --> 00:12:26.410\nright to that local folder that I bound it\nto, so that's something to keep in mind.\n\n208\n00:12:26.410 --> 00:12:31.160\nYou have to be careful about that\nbecause it can cause you some issues.\n\n209\n00:12:31.160 --> 00:12:34.410\n&gt;&gt; All right now Justin, I know that\nthere's probably multiple ways to do this.\n\n210\n00:12:34.410 --> 00:12:35.210\nYou showed us one way.\n\n211\n00:12:35.210 --> 00:12:38.380\nWhat are some of the other ways\nthat we could get our data\n\n212\n00:12:38.380 --> 00:12:40.510\ninto Docker the way that we want to?\n\n213\n00:12:40.510 --> 00:12:43.090\n&gt;&gt; All right, so the second way is well,\n\n214\n00:12:43.090 --> 00:12:47.080\nI can actually create a separate\nvolume using the docker client.\n\n215\n00:12:47.080 --> 00:12:50.900\nWhen I create that volume, what's\nhappening is, there's actually a container\n\n216\n00:12:50.900 --> 00:12:55.740\nbeing made and them a volume being\nmade and I will not going to go into\n\n217\n00:12:55.740 --> 00:12:59.000\nthe details cuz you can get really\nlost in one of this cuz you can\n\n218\n00:12:59.000 --> 00:13:03.650\ntalk about different drivers and different\nways and different file system types.\n\n219\n00:13:03.650 --> 00:13:07.030\nBut, effectively what's happening\nis you're creating a container and\n\n220\n00:13:07.030 --> 00:13:08.850\nit's creating an associated volume,\n\n221\n00:13:08.850 --> 00:13:12.600\nand then that container is just\nhanging out and they're always bound.\n\n222\n00:13:12.600 --> 00:13:16.480\nAnd when they're bound like that,\nwell that keeps the volume around because\n\n223\n00:13:16.480 --> 00:13:20.090\ndocker tries its best to keep you from\ndeleting containers, or excuse me,\n\n224\n00:13:20.090 --> 00:13:24.930\ndeleting volumes that are still\nassociated with any existing container.\n\n225\n00:13:24.930 --> 00:13:27.330\nSo okay, well that's good.\n\n226\n00:13:27.330 --> 00:13:31.420\nAnd even if you delete the container,\nthe volume still may persist.\n\n227\n00:13:31.420 --> 00:13:35.970\nSo let's take a look at how can\nwe create one of these volumes?\n\n228\n00:13:35.970 --> 00:13:39.080\nAnd that's when our syntax\nchanges a little bit, so\n\n229\n00:13:39.080 --> 00:13:42.300\nwe got a new sub command,\nand that's create.\n\n230\n00:13:42.300 --> 00:13:43.690\nAnd what are we creating?\n\n231\n00:13:43.690 --> 00:13:49.194\nWe're actually going to create,\nwell a volume, okay.\n\n232\n00:13:49.194 --> 00:13:54.245\nSo we're gonna create a volume so dash v\nand what do I want to call said volume,\n\n233\n00:13:54.245 --> 00:13:58.150\nor better yet where do I want\nto put it inside the container?\n\n234\n00:13:58.150 --> 00:14:04.460\nLet's just say to data, to slash data, and\nI'm gonna give it a name of data store.\n\n235\n00:14:04.460 --> 00:14:08.300\nAnd let's say that it is a busybox type.\n\n236\n00:14:08.300 --> 00:14:08.960\nOkay?\n\n237\n00:14:08.960 --> 00:14:10.430\nSo I'm gonna run.\n\n238\n00:14:10.430 --> 00:14:15.310\nBut if I ps,\nnotice that container is not running.\n\n239\n00:14:15.310 --> 00:14:17.260\nIt's not there.\n\n240\n00:14:17.260 --> 00:14:23.910\nBut if I do, docker container ls --all,\nthere it is.\n\n241\n00:14:23.910 --> 00:14:27.880\nAnd that's because we've created a\ncontainer to have that associated volume,\n\n242\n00:14:27.880 --> 00:14:29.990\nbut then that volume is being bound.\n\n243\n00:14:29.990 --> 00:14:32.810\nNow, how can I use this?\n\n244\n00:14:32.810 --> 00:14:36.960\nWell, let's try to create another\ncontainer that has that ability.\n\n245\n00:14:36.960 --> 00:14:44.620\nSo, I'm gonna, docker,\nrun -it --volumes-from, and what volume?\n\n246\n00:14:44.620 --> 00:14:48.220\nWhere am I gonna get these from?\n\n247\n00:14:48.220 --> 00:14:55.840\nThe datastore, and\nI'm gonna name this my worker, right.\n\n248\n00:14:55.840 --> 00:15:00.050\nThis is some kind of\ndata processing client.\n\n249\n00:15:00.050 --> 00:15:05.060\nSo I'm creating my worker, and\nthere's busybox, and okay.\n\n250\n00:15:05.060 --> 00:15:10.140\nSo if I ls, notice there's my slash data.\n\n251\n00:15:10.140 --> 00:15:13.760\nRemember we created it right here,\ndash v, dash data,\n\n252\n00:15:13.760 --> 00:15:17.320\nand now these are kind of linked together.\n\n253\n00:15:17.320 --> 00:15:21.874\nSo if I come into data, and\n\n254\n00:15:21.874 --> 00:15:25.820\ntouch .hello.txt.\n\n255\n00:15:25.820 --> 00:15:29.000\nAnd there we go so\nnow that's inside that volume.\n\n256\n00:15:29.000 --> 00:15:33.640\nAnd I'm gonna exit out, and\nI'm going to remove my worker and\n\n257\n00:15:33.640 --> 00:15:41.778\nI'm going to create another worker.\n\n258\n00:15:41.778 --> 00:15:47.009\nWith volumes --volumes from,\n\n259\n00:15:47.009 --> 00:15:50.381\nit's very lengthy.\n\n260\n00:15:50.381 --> 00:15:53.631\n&gt;&gt; [LAUGH]\n&gt;&gt; Data store, and\n\n261\n00:15:53.631 --> 00:15:58.526\nI'm actually going to make this my client.\n\n262\n00:15:58.526 --> 00:16:05.744\nAnd let's also keep this as busybox,\nand now I also have that data and\n\n263\n00:16:05.744 --> 00:16:10.790\ninside of it, I have a hello.txt, right?\n\n264\n00:16:10.790 --> 00:16:13.700\nSo I'm in a separate container now.\n\n265\n00:16:13.700 --> 00:16:18.250\nI have access to the same data that\nwas created from another container.\n\n266\n00:16:18.250 --> 00:16:23.580\nNow here's the final recommendation for\nyou, if you have this shared architecture.\n\n267\n00:16:23.580 --> 00:16:27.950\nIf you have multiple rights,\nyou could lead in, right.\n\n268\n00:16:27.950 --> 00:16:30.380\nOne container's writing,\nthe other container's writing.\n\n269\n00:16:30.380 --> 00:16:33.670\nAnd it's not through some\nsystem like a database that's\n\n270\n00:16:33.670 --> 00:16:35.470\ntaking care of that for you.\n\n271\n00:16:35.470 --> 00:16:37.150\nThen you may have data corruption.\n\n272\n00:16:37.150 --> 00:16:40.181\nMultiple reads though, you're all right.\n\n273\n00:16:40.181 --> 00:16:42.190\nRight, reading is not destructive.\n\n274\n00:16:42.190 --> 00:16:46.710\nBut let's say that your worker node is\nwriting while your client is reading.\n\n275\n00:16:46.710 --> 00:16:51.470\nAnd they're reading the exact same\ninformation, you may get wierd mismatch or\n\n276\n00:16:51.470 --> 00:16:53.260\nout of sync or even just data corruption.\n\n277\n00:16:53.260 --> 00:16:54.340\nThings go bad.\n\n278\n00:16:54.340 --> 00:16:59.720\nSo definitely be careful with that, but\nnow that I have this data available and\n\n279\n00:16:59.720 --> 00:17:02.550\nlet's say client.txt.\n\n280\n00:17:02.550 --> 00:17:04.640\nSo I've made something else here.\n\n281\n00:17:04.640 --> 00:17:06.230\nI'm gonna open up another terminal.\n\n282\n00:17:08.390 --> 00:17:11.378\nAnd if I go to docker container ls --all,\n\n283\n00:17:11.378 --> 00:17:16.340\nnotice, well,\nmy client's there cuz I removed worker.\n\n284\n00:17:16.340 --> 00:17:23.760\nBut if I docker create, let's just\ngo back up here, well, there we go.\n\n285\n00:17:23.760 --> 00:17:26.120\nI'm bringing my worker back online.\n\n286\n00:17:28.900 --> 00:17:31.830\nWell, now you'll notice I'm\nin a separate container.\n\n287\n00:17:31.830 --> 00:17:34.892\nEven though it's named worker, it's\na totally different from the original one.\n\n288\n00:17:34.892 --> 00:17:40.033\nClient.txt is here, hello.txt is here,\nbut the client.txt was actually\n\n289\n00:17:40.033 --> 00:17:45.840\nmade inside of the client container,\nlike some kind of web app consumer.\n\n290\n00:17:45.840 --> 00:17:50.760\nWell, let's hop over to worker and\nsay touch worker.txt.\n\n291\n00:17:50.760 --> 00:17:53.150\nWell there are all three there now.\n\n292\n00:17:53.150 --> 00:17:54.040\nI'm gonna switch back.\n\n293\n00:17:54.040 --> 00:17:56.520\nI'm now in the client container.\n\n294\n00:17:56.520 --> 00:17:58.830\nI feel like I'm saying\ncontainer a great deal Ronnie.\n\n295\n00:18:00.140 --> 00:18:04.840\nSo if I ls,\nnotice that worker.txt is there.\n\n296\n00:18:04.840 --> 00:18:07.090\nNow I don't have to worry,\neven though I'm creating files,\n\n297\n00:18:07.090 --> 00:18:09.430\nwhich is technically a write process.\n\n298\n00:18:09.430 --> 00:18:13.010\nBecause I'm not writing to the same file,\nright?\n\n299\n00:18:13.010 --> 00:18:16.080\nBut if you have high speed web\napplications that are depending on\n\n300\n00:18:16.080 --> 00:18:17.850\nsomething like this.\n\n301\n00:18:17.850 --> 00:18:21.490\nIf they're writing to it and\nthey can possibly have name collisions,\n\n302\n00:18:21.490 --> 00:18:25.200\nwhere they're both writing\nto the exact same file name.\n\n303\n00:18:25.200 --> 00:18:28.960\nThat could lead to data corruption,\ncuz one worker and\n\n304\n00:18:28.960 --> 00:18:31.620\none client could then\nwrite to the same file.\n\n305\n00:18:31.620 --> 00:18:34.230\nAnd who knows which one got there first.\n\n306\n00:18:34.230 --> 00:18:39.680\nIn addition to let's say the client is\na read only but the worker is a writer.\n\n307\n00:18:39.680 --> 00:18:42.290\nIf it writes and\na client's reading while it's writing,\n\n308\n00:18:42.290 --> 00:18:44.860\nyou may get data mismatch also.\n\n309\n00:18:44.860 --> 00:18:51.060\nSo definitely be aware that managing\ndata is not an easy task at hand.\n\n310\n00:18:51.060 --> 00:18:54.620\nBut this is incredibly powerful,\nbecause now this data volume,\n\n311\n00:18:54.620 --> 00:18:57.840\nthis data store,\nis always going to be there.\n\n312\n00:18:57.840 --> 00:19:01.730\nUnless you go out of your way\nto actually remove it, so.\n\n313\n00:19:01.730 --> 00:19:02.520\n&gt;&gt; All right Justin.\n\n314\n00:19:02.520 --> 00:19:06.872\nSince you mentioned this idea that data\ncan, if we have two different containers\n\n315\n00:19:06.872 --> 00:19:11.224\ntrying to access the same data, it's the\nsame way that we would if we had an actual\n\n316\n00:19:11.224 --> 00:19:14.590\nphysical hard drive where\nthey were accessing as well.\n\n317\n00:19:14.590 --> 00:19:18.110\nWe'd get the same result from two\nmachines trying to access that same disc.\n\n318\n00:19:18.110 --> 00:19:22.230\nBut let's talk about the idea\nof how safe is this?\n\n319\n00:19:22.230 --> 00:19:25.900\nAnd we're trying to mimic such\nas accessing client data.\n\n320\n00:19:25.900 --> 00:19:30.021\nBehind let's say a web server, they're\ntrying to get access to a data base, and\n\n321\n00:19:30.021 --> 00:19:32.310\nI'm trying to do it from a container.\n\n322\n00:19:32.310 --> 00:19:35.190\nIs that connection somehow secure or safe?\n\n323\n00:19:35.190 --> 00:19:39.170\nOr what other considerations do I have to\nactually think about if I'm gonna try and\n\n324\n00:19:39.170 --> 00:19:39.840\nkeep that safe?\n\n325\n00:19:39.840 --> 00:19:44.320\n&gt;&gt; So let me make sure that I\nfully understand your question.\n\n326\n00:19:44.320 --> 00:19:47.530\nWe're talking about accessing\na connection between a database and\n\n327\n00:19:47.530 --> 00:19:49.350\nmaybe some web application\nlike a web server?\n\n328\n00:19:50.400 --> 00:19:54.640\nAnd as we'll see,\nwhen we actually build a web application.\n\n329\n00:19:54.640 --> 00:19:55.416\nWe're going to do that.\n\n330\n00:19:55.416 --> 00:19:56.420\n&gt;&gt; Cool.\n\n331\n00:19:56.420 --> 00:20:00.360\n&gt;&gt; You'll find that the network\nis actually kind of bundled\n\n332\n00:20:00.360 --> 00:20:01.790\nup in the docker ecosystem.\n\n333\n00:20:01.790 --> 00:20:02.940\nIt's a virtualized network.\n\n334\n00:20:02.940 --> 00:20:03.800\nIt doesn't really exist.\n\n335\n00:20:03.800 --> 00:20:08.460\nIt exists between containers and\nit theoretically should be fairly safe.\n\n336\n00:20:08.460 --> 00:20:11.605\nNow I say theoretically because\nyou never know, Ronnie.\n\n337\n00:20:11.605 --> 00:20:12.180\n&gt;&gt; Mm-hm.\n\n338\n00:20:12.180 --> 00:20:15.320\n&gt;&gt; There are always loopholes and bugs and\n\n339\n00:20:15.320 --> 00:20:19.230\nshenanigans there that\nwill cause some strife.\n\n340\n00:20:19.230 --> 00:20:24.160\n&gt;&gt; All right, so any other considerations\nthat we need to take a look at?\n\n341\n00:20:24.160 --> 00:20:29.590\nIs it always best to have\nthe accessible data volume\n\n342\n00:20:29.590 --> 00:20:32.800\nthat we're trying to get to on the same\nmachine that we're running the containers?\n\n343\n00:20:32.800 --> 00:20:34.810\nOr could we put that somewhere else, and\n\n344\n00:20:34.810 --> 00:20:37.740\nsay here is a map to like\na network share somewhere.\n\n345\n00:20:37.740 --> 00:20:39.320\n&gt;&gt; So that's actually a great question.\n\n346\n00:20:39.320 --> 00:20:40.690\nI've actually done that.\n\n347\n00:20:40.690 --> 00:20:42.600\nI used to do some data\nscience type things.\n\n348\n00:20:42.600 --> 00:20:46.400\nAnd we had data sets that\nwere terabytes and terabytes.\n\n349\n00:20:46.400 --> 00:20:50.181\nAnd there was no way that we could easily\nkeep these all on the same machine but\n\n350\n00:20:50.181 --> 00:20:51.600\nwe had docker containers for\n\n351\n00:20:51.600 --> 00:20:54.750\nour development environment that\nall needed access to these.\n\n352\n00:20:54.750 --> 00:20:58.861\nSo we would mount to our computers\nas a network file share and\n\n353\n00:20:58.861 --> 00:21:03.138\nthen we would map to certain\nfolders within that file share and\n\n354\n00:21:03.138 --> 00:21:06.600\nto our containers to have rewrite access.\n\n355\n00:21:06.600 --> 00:21:09.280\nOne thing, there's a couple of things\nyou need to keep in mind when you're\n\n356\n00:21:09.280 --> 00:21:11.450\nmessing with data inside of containers.\n\n357\n00:21:11.450 --> 00:21:14.350\nInside a container by\ndefault you are root user.\n\n358\n00:21:14.350 --> 00:21:17.210\nYou have elevated privileges all the time.\n\n359\n00:21:17.210 --> 00:21:21.730\nThat means if you are rm\n-rf it'll do that.\n\n360\n00:21:21.730 --> 00:21:23.330\nIt'll get rid of everything.\n\n361\n00:21:23.330 --> 00:21:25.840\nSo now if you destroy\nyour container like that\n\n362\n00:21:25.840 --> 00:21:27.500\nthen you can just spin another one up.\n\n363\n00:21:27.500 --> 00:21:31.065\nBut if you do that and\nthere's volumes mounted within it,\n\n364\n00:21:31.065 --> 00:21:33.550\nit very well may delete all of your data.\n\n365\n00:21:33.550 --> 00:21:37.170\nAdditionally we need to keep\nin mind that it may disappear.\n\n366\n00:21:37.170 --> 00:21:40.970\nIt could just disappear if you\ndo not handle it appropriately.\n\n367\n00:21:40.970 --> 00:21:45.200\nIf it's only inside the container then\nas we've seen it can disappear, so\n\n368\n00:21:45.200 --> 00:21:50.630\nyou need to keep these as separate\nvolumes in a persistence layer, and\n\n369\n00:21:50.630 --> 00:21:56.490\ntypically the common use cases that I've\ndone as a developer is with databases.\n\n370\n00:21:56.490 --> 00:21:59.351\nSo wherever your database read\nwrite your data directory is\n\n371\n00:21:59.351 --> 00:22:03.780\nthat's going to be on a separate container\nthen actual running database process.\n\n372\n00:22:03.780 --> 00:22:08.100\nAnd that's so that the read writes\nare not in that container that can die\n\n373\n00:22:08.100 --> 00:22:09.420\nand restart.\n\n374\n00:22:09.420 --> 00:22:13.940\n&gt;&gt; All right well Justin that's a lot\nof information a lot of things for\n\n375\n00:22:13.940 --> 00:22:18.990\nus to consider as we get started working\nwith Docker and the data together.\n\n376\n00:22:18.990 --> 00:22:22.550\nRemember that we need to treat\nthose containers as if they are,\n\n377\n00:22:22.550 --> 00:22:26.570\nJustin has used this term earlier\nin another episode, ephemeral.\n\n378\n00:22:26.570 --> 00:22:28.130\nThe very fact that they're dynamic and\n\n379\n00:22:28.130 --> 00:22:31.200\nthat we can lose the data\nat any point in time.\n\n380\n00:22:31.200 --> 00:22:35.532\nBut if we do need the idea of persistence\nof having that data still there, and\n\n381\n00:22:35.532 --> 00:22:37.370\neven if the containers are not.\n\n382\n00:22:37.370 --> 00:22:41.480\nWe're going to have to figure out how to\nmake sure that we get the volumes on some\n\n383\n00:22:41.480 --> 00:22:45.220\nother device to map into our\ncontainers the way that we want to.\n\n384\n00:22:45.220 --> 00:22:48.930\nAnd then Justin showed us how we can\nactually do that with multiple different\n\n385\n00:22:48.930 --> 00:22:53.480\ncontainers going to that same particular\nvolume if we need to as well.\n\n386\n00:22:53.480 --> 00:22:56.960\nAnd that really does help us at\nleast get the concept down that yes,\n\n387\n00:22:56.960 --> 00:23:00.880\nwe're gonna be able to access\ndata inside of our containers and\n\n388\n00:23:00.880 --> 00:23:04.040\nbe able to work with\nthe data a little bit more.\n\n389\n00:23:04.040 --> 00:23:08.280\nAnother of the considerations we have\nto think about the safety of the data\n\n390\n00:23:08.280 --> 00:23:11.240\nif we're going to do this, and\neven the security to a point.\n\n391\n00:23:11.240 --> 00:23:14.216\nBut since everything is kind of\nvirtualized inside of those containers as\n\n392\n00:23:14.216 --> 00:23:17.780\nlong as we're accessing between containers\nwe probably don't have to worry too much.\n\n393\n00:23:17.780 --> 00:23:21.130\nBut as we go outside we may have to\ntake into some other considerations.\n\n394\n00:23:21.130 --> 00:23:23.530\nBut there's a lot of information here,\nlot of good thoughts.\n\n395\n00:23:23.530 --> 00:23:26.480\nMake sure you go back and\ncheck this episode out, especially\n\n396\n00:23:26.480 --> 00:23:29.910\non the mapping of those volumes to make\nit a little bit easier for you as well.\n\n397\n00:23:29.910 --> 00:23:35.100\nSo Justin any last words on this episode\nin terms of working with data and\n\n398\n00:23:35.100 --> 00:23:36.720\nthe containers together.\n\n399\n00:23:36.720 --> 00:23:40.060\nWell Ronnie,\njust keep those key points in mind.\n\n400\n00:23:40.060 --> 00:23:43.390\nYou need to keep the actual container\nrun-time separate from your volume or\n\n401\n00:23:43.390 --> 00:23:45.400\nyour data persistence, and\n\n402\n00:23:45.400 --> 00:23:50.430\njust treat them like any container can\ndisappear and you are always a route user.\n\n403\n00:23:50.430 --> 00:23:52.264\nYou have super powers\ninside of containers, so.\n\n404\n00:23:52.264 --> 00:23:53.035\n&gt;&gt; I forgot all about that.\n\n405\n00:23:53.035 --> 00:23:54.251\n&gt;&gt; Those are important.\n\n406\n00:23:54.251 --> 00:23:58.341\n&gt;&gt; Yeah, no I can imagine\naccidentally doing that, that rm/f.\n\n407\n00:23:58.341 --> 00:23:59.355\n&gt;&gt; Yeah, [LAUGH] yeah.\n\n408\n00:23:59.355 --> 00:24:01.600\n&gt;&gt; And\nall of a sudden the data being gone.\n\n409\n00:24:01.600 --> 00:24:05.930\nThat would be a terrible day, especially\non live data, we had that there.\n\n410\n00:24:05.930 --> 00:24:09.860\nAll right, well that's a great place for\nus also to take this time to sign off.\n\n411\n00:24:09.860 --> 00:24:13.349\nSo, for ITPro.TV,\nI've been your host, Ronnie Wong.\n\n412\n00:24:13.349 --> 00:24:14.608\n&gt;&gt; And I'm Justin Dennison.\n\n413\n00:24:14.608 --> 00:24:18.502\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n414\n00:24:18.502 --> 00:24:24.391\n[MUSIC]\n\n415\n00:24:24.391 --> 00:24:28.040\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "210318363"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at specific scenario of connecting to a MongoDB database.  They show how to apply the same principles shown in the previous episode to connect to the database and leave the data persistent.",
          "length": "988",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-2-docker_and_data_use_case-032317.00_19_45_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-2-docker_and_data_use_case-032317.00_19_45_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-6-2-docker_and_data_use_case-032317.00_19_45_20.Still001-sm.jpg",
          "title": "Docker and Data Use Case",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.160\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.160 --> 00:00:08.285\n[CROSSTALK]\n\n3\n00:00:08.285 --> 00:00:12.159\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.159 --> 00:00:14.099\n&gt;&gt; Welcome to another great\nepisode right here on ITProTV.\n\n5\n00:00:14.099 --> 00:00:19.480\nI'm your host Ronnie Wong, and today\nyou're watching Introduction to Docker.\n\n6\n00:00:19.480 --> 00:00:23.170\nWe're specifically gonna be taking a look\nat well really kind of a second part here\n\n7\n00:00:23.170 --> 00:00:25.860\non data and docker usage as well.\n\n8\n00:00:25.860 --> 00:00:29.400\nSpecifically taking a look\nat a nice data base case\n\n9\n00:00:29.400 --> 00:00:33.450\nto help us to really get some\nunderstanding of how to connect in.\n\n10\n00:00:33.450 --> 00:00:36.960\nNot just to a data share,\nbut to an actual database.\n\n11\n00:00:36.960 --> 00:00:39.470\nAnd here to help us of course is Mr.\nJustin Dennison.\n\n12\n00:00:39.470 --> 00:00:41.108\nJustin, glad you're back on the show.\n\n13\n00:00:41.108 --> 00:00:42.900\nWhat are we taking a look at today?\n\n14\n00:00:42.900 --> 00:00:44.830\n&gt;&gt; Well, Ronnie, I'm excited to be here.\n\n15\n00:00:44.830 --> 00:00:46.040\nAnd today we're actually.\n\n16\n00:00:46.040 --> 00:00:51.060\nSo as a web developer,\nactually use Mongo a fair amount of times.\n\n17\n00:00:51.060 --> 00:00:52.550\nI've messed around in the SQL world.\n\n18\n00:00:52.550 --> 00:00:57.882\nBut there's no SQL databases, they make\nit too easy for me to really worry about.\n\n19\n00:00:57.882 --> 00:01:00.590\n&gt;&gt; [LAUGH]\n&gt;&gt; So, [LAUGH] maybe that's a strong\n\n20\n00:01:00.590 --> 00:01:05.580\nassertion, they do have there cases that\nthey work very well for their use cases.\n\n21\n00:01:05.580 --> 00:01:09.504\nI just, mostly what I do doesn't\nfall under the SQL world.\n\n22\n00:01:09.504 --> 00:01:12.891\nSo, what we're going to do today,\nis actually look at,\n\n23\n00:01:12.891 --> 00:01:16.370\nwe saw how to mount volumes and\nhow to share volume shares.\n\n24\n00:01:16.370 --> 00:01:20.267\nBut let's see it when we use a container\nthat contains a database and being able\n\n25\n00:01:20.267 --> 00:01:24.360\nto map all of those together so we have\nthat data persistence layer, right?\n\n26\n00:01:24.360 --> 00:01:27.110\nSo because creating text files\ninside of containers and\n\n27\n00:01:27.110 --> 00:01:29.390\nsharing those, that's one thing.\n\n28\n00:01:29.390 --> 00:01:35.724\nBut how can we do this to where\nif our database container dies,\n\n29\n00:01:35.724 --> 00:01:38.570\nwell then our data doesn't go away.\n\n30\n00:01:38.570 --> 00:01:43.860\nIn addition to by doing this, we are\noffering ourselves the ability to scale.\n\n31\n00:01:43.860 --> 00:01:47.910\nCuz Mongo has horizontal scalability\nkind of built at its core.\n\n32\n00:01:47.910 --> 00:01:49.830\nThere are some different setups\nthan what we're gonna do today.\n\n33\n00:01:49.830 --> 00:01:51.710\nWe're gonna treat this as a single node.\n\n34\n00:01:51.710 --> 00:01:56.090\nBut if we had that data\npersistence in a separate volume\n\n35\n00:01:56.090 --> 00:01:59.260\nthen our horizontal scaling is\nkind of just built in for us.\n\n36\n00:01:59.260 --> 00:02:01.610\nSo that's good to know.\n\n37\n00:02:01.610 --> 00:02:05.800\nAnd you're gonna learn a little\nbit about databases with this so\n\n38\n00:02:05.800 --> 00:02:08.770\ndon't get scared we're gonna\nkeep this fairly simple.\n\n39\n00:02:08.770 --> 00:02:11.190\nBut it's nice to see this\nin actual practicality.\n\n40\n00:02:11.190 --> 00:02:13.550\nSo let's go ahead and\ntake a look at my terminal.\n\n41\n00:02:13.550 --> 00:02:16.800\nI wanted to show you real quick.\n\n42\n00:02:18.910 --> 00:02:22.909\nI've already, well I was gonna show you\nand then the formatting was horrible.\n\n43\n00:02:22.909 --> 00:02:27.890\nI've already pulled Mongo the latest\ncontainer that was built.\n\n44\n00:02:27.890 --> 00:02:30.847\nAnd the reason being is it's 359 MB.\n\n45\n00:02:30.847 --> 00:02:35.051\nAnd well, I don't want to stand here and\n\n46\n00:02:35.051 --> 00:02:40.500\nwatch you and\nyou watch me as Mongo's downloading.\n\n47\n00:02:40.500 --> 00:02:42.320\nSo I went ahead and\npreemptively done that.\n\n48\n00:02:42.320 --> 00:02:46.440\nSo if you wanna do a Docker pull Mongo,\nit will pull the latest one.\n\n49\n00:02:46.440 --> 00:02:49.550\nIf you need a particular version,\ndefinitely look on Docker Hub and\n\n50\n00:02:49.550 --> 00:02:52.030\nyou can see that there\nare multiple versions of Mongo.\n\n51\n00:02:52.030 --> 00:02:56.370\nCuz Mongo's continuing to go\nthrough some transformations\n\n52\n00:02:56.370 --> 00:02:58.140\nas are most other databases.\n\n53\n00:02:58.140 --> 00:03:02.070\nSo sometimes you need a specific\nversion so definitely check that out.\n\n54\n00:03:02.070 --> 00:03:05.370\nBut I just wanted to clarify\nthat it's already there.\n\n55\n00:03:05.370 --> 00:03:07.500\nIt would otherwise pull when we did this.\n\n56\n00:03:07.500 --> 00:03:13.800\nNow, let's take a look by creating\na Mongo database, without the volume.\n\n57\n00:03:13.800 --> 00:03:18.250\nJust to remind ourselves put ourselves\nin that panic state if you will.\n\n58\n00:03:18.250 --> 00:03:20.413\nSo I'm gonna docker run and\n\n59\n00:03:20.413 --> 00:03:25.160\nthen -d because I don't want Mongo\nprinting out to the screen right.\n\n60\n00:03:25.160 --> 00:03:29.043\nI want a database to be running in\nthe background and not kind of set it and\n\n61\n00:03:29.043 --> 00:03:30.292\nforget it if you will.\n\n62\n00:03:30.292 --> 00:03:34.876\nI'm not gonna create any restart policies\nor anything like that cuz that's\n\n63\n00:03:34.876 --> 00:03:39.070\na little beyond the scope,\nbut I do want to map ports.\n\n64\n00:03:39.070 --> 00:03:42.882\nNow I could say 27017 because, by default,\n\n65\n00:03:42.882 --> 00:03:47.074\nMongo is looking for\nconnections on port 27017.\n\n66\n00:03:47.074 --> 00:03:50.580\nAnd then I could do some inspection.\n\n67\n00:03:50.580 --> 00:03:53.972\nBut I'm going to map this just for\n\n68\n00:03:53.972 --> 00:03:58.704\nease of use to 27017 on my local machine.\n\n69\n00:03:58.704 --> 00:04:03.050\nAnd then I'm gonna say --name mongodb.\n\n70\n00:04:03.050 --> 00:04:05.160\nAnd I'm going to use the mongo image.\n\n71\n00:04:05.160 --> 00:04:05.690\nAnd I run it.\n\n72\n00:04:07.110 --> 00:04:10.370\nAnd I don't know if you've ever\ninstalled a database, Ronnie.\n\n73\n00:04:10.370 --> 00:04:14.830\nBut I've installed SQL\na couple of times MySQL and\n\n74\n00:04:14.830 --> 00:04:17.715\neven Mongo, and it is never that simple.\n\n75\n00:04:17.715 --> 00:04:19.220\n&gt;&gt; [LAUGH]\n&gt;&gt; It is never that simple.\n\n76\n00:04:19.220 --> 00:04:19.860\n&gt;&gt; True.\n\n77\n00:04:19.860 --> 00:04:21.410\n&gt;&gt; We actually have Mongo running.\n\n78\n00:04:21.410 --> 00:04:27.920\nAnd notice that we have a port mapping for\nus to our local IP at 27017 to\n\n79\n00:04:27.920 --> 00:04:33.660\nthe port 27017 inside of the container,\nall right?\n\n80\n00:04:33.660 --> 00:04:35.790\nNow, why is this important?\n\n81\n00:04:35.790 --> 00:04:38.660\nYou need to know this\nparticularly about your database.\n\n82\n00:04:38.660 --> 00:04:44.160\nI know that Mongo is looking,\nby default, for that port, all right?\n\n83\n00:04:44.160 --> 00:04:46.150\nI could change that,\nthere are ways to change that.\n\n84\n00:04:46.150 --> 00:04:48.800\nBut we're just going with,\nI need to get this up and running fast,\n\n85\n00:04:48.800 --> 00:04:51.130\nI need to try something, okay.\n\n86\n00:04:51.130 --> 00:04:51.730\n&gt;&gt; All right Justin,\n\n87\n00:04:51.730 --> 00:04:55.410\nnow with that I know that there's ways\nthat we can actually get this going.\n\n88\n00:04:55.410 --> 00:04:56.430\nWe can use command line tools.\n\n89\n00:04:56.430 --> 00:04:58.220\nAnd there's other tools\nthat are available.\n\n90\n00:04:58.220 --> 00:04:59.560\nHow are we gonna start this?\n\n91\n00:04:59.560 --> 00:05:01.190\n&gt;&gt; Well Ronnie, that's a great question.\n\n92\n00:05:01.190 --> 00:05:04.150\nThere is a Mongo shell available for\nMongoDB.\n\n93\n00:05:04.150 --> 00:05:05.700\nBut we're gonna stay away from that.\n\n94\n00:05:05.700 --> 00:05:07.850\nYou can run that in a separate container.\n\n95\n00:05:07.850 --> 00:05:10.050\nIt takes a little more\neffort to get set up.\n\n96\n00:05:10.050 --> 00:05:14.810\nSo since I've exposed it to the localhost,\nI'm gonna use a tool called Robomongo.\n\n97\n00:05:14.810 --> 00:05:17.085\nSo let's go ahead and\na take a look at Robomongo.\n\n98\n00:05:18.470 --> 00:05:21.710\nAnd the reason that I like Robomongo\nis I don't actually have to know\n\n99\n00:05:21.710 --> 00:05:25.160\na great deal about the query\nlanguage of MongoDB.\n\n100\n00:05:25.160 --> 00:05:29.470\nIn addition too it allows me to point and\nclick easy-peasy, well hopefully,\n\n101\n00:05:29.470 --> 00:05:30.440\neasy-peasy.\n\n102\n00:05:30.440 --> 00:05:35.650\nAnd then well, it's just, I don't\nhave to have all of Mongo installed.\n\n103\n00:05:35.650 --> 00:05:37.402\nI just have the interface.\n\n104\n00:05:37.402 --> 00:05:41.790\nNow, in Robomongo typically\nthis is not populated and\n\n105\n00:05:41.790 --> 00:05:46.410\nRobomongo is available for Linux, Mac,\nand Windows so it's cross platform.\n\n106\n00:05:46.410 --> 00:05:48.010\nIt is a release candidate.\n\n107\n00:05:48.010 --> 00:05:51.900\nSo some things may change over time,\nit's still in development.\n\n108\n00:05:51.900 --> 00:05:53.080\nSo keep that in mind.\n\n109\n00:05:53.080 --> 00:05:56.010\nBut it is typically, well,\nthere's nothing here.\n\n110\n00:05:56.010 --> 00:05:57.580\nSo you would need to create a connection.\n\n111\n00:05:57.580 --> 00:06:03.780\nNow I keep one that I call Local in\nRobomongo that is just localhost 27017.\n\n112\n00:06:03.780 --> 00:06:11.590\nSo when I connect, well I'm actually\nconnected to that database, right?\n\n113\n00:06:11.590 --> 00:06:14.760\nActually there is a couple\nof databases in there.\n\n114\n00:06:14.760 --> 00:06:17.840\nBut I'm connected to that Mongo instance.\n\n115\n00:06:17.840 --> 00:06:24.540\nAnd within there I have admin and Local as\ndatabases and well, I can repair database.\n\n116\n00:06:24.540 --> 00:06:28.670\nI can refresh system, I can also create.\n\n117\n00:06:29.980 --> 00:06:35.590\nSo I can right-click, Create a Database\nand let's just call this, stuff.\n\n118\n00:06:35.590 --> 00:06:36.790\nReally great name.\n\n119\n00:06:36.790 --> 00:06:38.901\nIt's important that you\nuse appropriate names.\n\n120\n00:06:38.901 --> 00:06:39.685\n&gt;&gt; That's right.\n\n121\n00:06:39.685 --> 00:06:44.570\n&gt;&gt; And then if I look, notice I have\nCollections, Functions, and Users.\n\n122\n00:06:44.570 --> 00:06:49.760\nSo Collections in Mongo are kinda\nlike tables in SQL land.\n\n123\n00:06:49.760 --> 00:06:53.670\nSo with this collection,\nwell I can create a collection.\n\n124\n00:06:53.670 --> 00:06:57.130\nAnd let's say that I wanna create\na collection called groceries.\n\n125\n00:07:00.439 --> 00:07:02.535\nGroceries, there we go.\n\n126\n00:07:02.535 --> 00:07:03.160\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n127\n00:07:03.160 --> 00:07:04.930\nI'm making a grocery list app, right.\n\n128\n00:07:04.930 --> 00:07:07.080\nIt's something personal, it's a use case.\n\n129\n00:07:07.080 --> 00:07:10.200\nI need some way to sync between all\nthese people who are requesting\n\n130\n00:07:10.200 --> 00:07:11.710\ngroceries from me.\n\n131\n00:07:11.710 --> 00:07:16.250\nAnd in Robomongo, I now have access\nto groceries, and I can right-click.\n\n132\n00:07:16.250 --> 00:07:19.486\nAnd I wanna insert a document,\nI can try to view documents, and\n\n133\n00:07:19.486 --> 00:07:20.960\nit will run the query for me.\n\n134\n00:07:20.960 --> 00:07:22.360\nAnd that's what I like about that,\n\n135\n00:07:22.360 --> 00:07:25.270\nI don't have to know the query language,\nit will do it for me.\n\n136\n00:07:25.270 --> 00:07:29.300\nAnd some of this can be done a couple of\ndifferent ways, there are zero records.\n\n137\n00:07:29.300 --> 00:07:37.380\nBut if I insert a document, and let's just\nsay this has a description and it is milk.\n\n138\n00:07:37.380 --> 00:07:38.290\nI always like to get milk.\n\n139\n00:07:39.500 --> 00:07:41.250\nAnd then I can come down here and\nsave, and\n\n140\n00:07:42.960 --> 00:07:47.680\nthen when I come back I can\nre-run this find query here.\n\n141\n00:07:49.560 --> 00:07:53.760\nAnd notice I now have an object\nin my Mongo database.\n\n142\n00:07:53.760 --> 00:07:57.192\nSo, okay, it's working as I anticipated.\n\n143\n00:07:57.192 --> 00:08:01.922\nWell, we started up we're trying things,\nwe actually built an application.\n\n144\n00:08:01.922 --> 00:08:03.918\nIt's our grocery list application,\n\n145\n00:08:03.918 --> 00:08:06.296\neverybody submitted\nwhat they need from me.\n\n146\n00:08:06.296 --> 00:08:09.968\nI'm getting ready to pull the report and\n\n147\n00:08:09.968 --> 00:08:15.156\nnow it has to be a reboot and\nupdate and well, guess what.\n\n148\n00:08:15.156 --> 00:08:22.020\ndocker kill mongo, actually mongodb and\nthen docker rm mongodb.\n\n149\n00:08:22.020 --> 00:08:26.170\nNow, I'm simulating this but\nthis is I had this running on a service.\n\n150\n00:08:26.170 --> 00:08:29.650\nSome external service that\nwas running this container.\n\n151\n00:08:29.650 --> 00:08:34.360\nIt may do this because of maintenance\nrequirements, or for any other reason.\n\n152\n00:08:34.360 --> 00:08:38.100\nSomething goes bad, well,\nokay, well that's fine.\n\n153\n00:08:38.100 --> 00:08:39.950\nI'll just restart it and it'll be good.\n\n154\n00:08:39.950 --> 00:08:44.235\nSo I'm gonna hop up through here and\nrestart it.\n\n155\n00:08:44.235 --> 00:08:50.640\nAnd then I'm gonna come back to Robomongo\nand well, I gotta kill this connection.\n\n156\n00:08:50.640 --> 00:08:57.550\nSo, I'm gonna connect, and\nI'm gonna remove local 3, disconnect.\n\n157\n00:08:57.550 --> 00:09:01.400\nSo, this is my actual\ncurrent Mongo instance.\n\n158\n00:09:01.400 --> 00:09:02.940\nI still have this open.\n\n159\n00:09:02.940 --> 00:09:05.990\nIf I run, uh-oh.\n\n160\n00:09:05.990 --> 00:09:07.530\nI'm in trouble.\n\n161\n00:09:07.530 --> 00:09:09.450\nIt connected, but I have zero records.\n\n162\n00:09:09.450 --> 00:09:14.230\nNo, I just lost all of my data,\nRonnie, we're in trouble, right?\n\n163\n00:09:14.230 --> 00:09:16.160\nThis is the actual,\n\n164\n00:09:16.160 --> 00:09:21.010\nthis is the concern you should have when\nyou're needing a data persistence layer.\n\n165\n00:09:21.010 --> 00:09:25.790\nSo let's see how we can take what we\nlearned in a previous episode about\n\n166\n00:09:25.790 --> 00:09:31.610\ncreating volumes for data persistence,\nmatch them up to this Mongo instance.\n\n167\n00:09:31.610 --> 00:09:35.540\nSo now if that happens again,\nwe have no worries.\n\n168\n00:09:35.540 --> 00:09:39.120\nAll right so I'm gonna keep this open,\nI'm actually going to disconnect here.\n\n169\n00:09:40.930 --> 00:09:42.360\nAnd well I'm gonna try to disconnect.\n\n170\n00:09:43.750 --> 00:09:47.221\nAnd just close this out, all right.\n\n171\n00:09:47.221 --> 00:09:50.540\nSo Robomongo's open,\nI'm gonna say docker kill.\n\n172\n00:09:50.540 --> 00:09:51.710\nI'm just gonna force remove.\n\n173\n00:09:51.710 --> 00:09:53.610\nNow this is not something that we've seen.\n\n174\n00:09:53.610 --> 00:09:58.890\nBy putting a -f it will kill and remove\nthe container kind of all in one swipe.\n\n175\n00:09:58.890 --> 00:09:59.662\nSo mongodb.\n\n176\n00:09:59.662 --> 00:10:03.490\nAnd notice it took a little\nbit longer than normal.\n\n177\n00:10:03.490 --> 00:10:06.170\nThat's because it's killing and removing.\n\n178\n00:10:06.170 --> 00:10:08.650\nSo let’s start over and start planning.\n\n179\n00:10:08.650 --> 00:10:13.595\nWell I know from working with Mongo\nthat it stores its data by default at\n\n180\n00:10:13.595 --> 00:10:18.450\n/data/db inside of that folder.\n\n181\n00:10:18.450 --> 00:10:22.900\nOkay, if I know that then\nI can build a data volume\n\n182\n00:10:22.900 --> 00:10:27.030\ninside a container and\nhave it work, all right?\n\n183\n00:10:27.030 --> 00:10:34.514\nSo, I'm gonna docker create -v\n/data/db and I'm gonna give it a name.\n\n184\n00:10:34.514 --> 00:10:36.140\nAll right, and what is its name?\n\n185\n00:10:36.140 --> 00:10:40.330\nI'm gonna say mongo_data, and\nI'm gonna use the mongo image.\n\n186\n00:10:40.330 --> 00:10:41.561\nNow, is this overkill?\n\n187\n00:10:41.561 --> 00:10:43.915\nQuite possibly.\n\n188\n00:10:43.915 --> 00:10:48.550\nBut what happens is, since I'm using\nthe same image, behind the scenes docker\n\n189\n00:10:48.550 --> 00:10:51.370\ncan actually share some of\nthese things that are running.\n\n190\n00:10:51.370 --> 00:10:54.487\nAnd reduce the overall\nresources necessary.\n\n191\n00:10:54.487 --> 00:10:58.380\nWe won't go too deep into that,\nbut this is valid.\n\n192\n00:10:58.380 --> 00:10:59.790\nNow could I have used BusyBox?\n\n193\n00:10:59.790 --> 00:11:02.680\nSure, could it need a little more setup?\n\n194\n00:11:02.680 --> 00:11:08.007\nAbsolutely, so\nI'm creating a volume at /data/db,\n\n195\n00:11:08.007 --> 00:11:11.410\ncalled mongo_data, with a mongo image.\n\n196\n00:11:11.410 --> 00:11:14.130\nAnd if I run, all right, we're good to go.\n\n197\n00:11:15.450 --> 00:11:22.726\nAnd now if I create a Mongo instance,\nat 27017, to 27017.\n\n198\n00:11:22.726 --> 00:11:27.496\nAnd I'm gonna call up mongodb, and\n\n199\n00:11:27.496 --> 00:11:33.705\nI'm gonna use the volumes from mongo_data.\n\n200\n00:11:33.705 --> 00:11:38.540\nWhat's happening is I know since\nthis actually already exists\n\n201\n00:11:38.540 --> 00:11:40.919\nin this Mongo container here.\n\n202\n00:11:42.130 --> 00:11:44.971\nI'm going to link all of\nthese together by doing this.\n\n203\n00:11:44.971 --> 00:11:47.870\nAnd I'm going to use the Mongo instance.\n\n204\n00:11:47.870 --> 00:11:51.040\nNow that's a lot,\nthat's a very long command line, right?\n\n205\n00:11:51.040 --> 00:11:52.850\nI gotta create it.\n\n206\n00:11:52.850 --> 00:11:56.000\nI gotta map the ports,\nI've gotta give it a name.\n\n207\n00:11:56.000 --> 00:11:57.650\nI need to grab the volumes.\n\n208\n00:11:57.650 --> 00:12:02.810\nAnd then finally what are we gonna do and\nbelieve it all not I need another one.\n\n209\n00:12:02.810 --> 00:12:07.370\nSo I like to keep my non-naming\nflags at the beginning.\n\n210\n00:12:07.370 --> 00:12:08.910\nI need it as a daemon, right?\n\n211\n00:12:08.910 --> 00:12:14.151\nAnd I want it to run into the background,\nnot docker create, my goodness.\n\n212\n00:12:14.151 --> 00:12:16.540\n&gt;&gt; [LAUGH]\n&gt;&gt; docker run, docker run.\n\n213\n00:12:17.670 --> 00:12:18.530\nIt'll get ya.\n\n214\n00:12:18.530 --> 00:12:19.360\nIt'll get ya.\n\n215\n00:12:19.360 --> 00:12:20.830\nSo docker run.\n\n216\n00:12:20.830 --> 00:12:22.224\nInvalid port, 27.\n\n217\n00:12:22.224 --> 00:12:23.886\nGot an extra 1 in there.\n\n218\n00:12:23.886 --> 00:12:25.981\nNo one said I was infallible Ronnie.\n\n219\n00:12:25.981 --> 00:12:26.620\n&gt;&gt; I know.\n\n220\n00:12:26.620 --> 00:12:27.951\n&gt;&gt; No one said I was.\n\n221\n00:12:27.951 --> 00:12:34.090\nAll right, so now if I docker ps,\nI have a port mapping.\n\n222\n00:12:34.090 --> 00:12:35.750\nMongodb's running.\n\n223\n00:12:35.750 --> 00:12:39.200\nIt has mapped using that data\nvolume that we've created.\n\n224\n00:12:39.200 --> 00:12:43.820\nWe should be able to connect with\nit with Robomongo, create records,\n\n225\n00:12:43.820 --> 00:12:47.110\nkill this image, restart it,\nand then still have everything.\n\n226\n00:12:47.110 --> 00:12:49.310\nAs long as I'm always\nusing that shared volume.\n\n227\n00:12:50.940 --> 00:12:56.730\nAll right, so,\nif I create a connection to localhost.\n\n228\n00:12:56.730 --> 00:12:58.360\nAll right, so there we go.\n\n229\n00:12:58.360 --> 00:13:00.830\nI'm gonna create a database.\n\n230\n00:13:00.830 --> 00:13:04.920\nAnd we're gonna stay with\nthe good old faithful stuff.\n\n231\n00:13:04.920 --> 00:13:05.990\nAnd then I'm gonna create.\n\n232\n00:13:07.150 --> 00:13:08.080\nWait for it.\n\n233\n00:13:08.080 --> 00:13:08.594\nThere we go.\n\n234\n00:13:08.594 --> 00:13:10.350\nI'm gonna create a collection.\n\n235\n00:13:11.450 --> 00:13:13.956\nAnd I'm gonna call that groceries.\n\n236\n00:13:13.956 --> 00:13:17.481\nAnd I'm going to insert a document And\n\n237\n00:13:17.481 --> 00:13:22.230\nthat document is gonna have\na description of milk.\n\n238\n00:13:23.260 --> 00:13:25.254\nJust like we did it, so\nwe're re-populating our data.\n\n239\n00:13:25.254 --> 00:13:29.791\nYou know it is very real if you lose your\ndata you're gonna have to do this or\n\n240\n00:13:29.791 --> 00:13:31.510\nask people to re-submit.\n\n241\n00:13:31.510 --> 00:13:34.880\nCross your fingers that they're\nnot mad at you about that.\n\n242\n00:13:34.880 --> 00:13:38.790\nAnd then if we find, if we view documents.\n\n243\n00:13:38.790 --> 00:13:39.630\nOur document's back.\n\n244\n00:13:39.630 --> 00:13:44.350\nSo we're back at the original state\nbefore our previous whoopsy daisy.\n\n245\n00:13:45.630 --> 00:13:48.910\nAll right, well, that maintenance\nschedule has come up again.\n\n246\n00:13:48.910 --> 00:13:54.960\nAnd we have to docker remove\n-f mongodb and docker ps.\n\n247\n00:13:54.960 --> 00:13:56.532\nWell, there it is.\n\n248\n00:13:56.532 --> 00:14:01.980\nNow, Robomongo I need to\nmake a reconnection here.\n\n249\n00:14:01.980 --> 00:14:06.941\nAnd if I try to connect,\nuh-oh, it's unavailable.\n\n250\n00:14:06.941 --> 00:14:08.510\nI'm getting nervous.\n\n251\n00:14:08.510 --> 00:14:11.860\nBut if we run back through,\nI'm running the exact same command.\n\n252\n00:14:11.860 --> 00:14:15.270\nActually, let me bring that to the top.\n\n253\n00:14:15.270 --> 00:14:16.010\nThere we go.\n\n254\n00:14:17.860 --> 00:14:23.242\nSo docker run -d, it's the exact same\ncommand, because that container's gone.\n\n255\n00:14:23.242 --> 00:14:26.496\nI can give it the same name, but\nI'm using volumes-from mongo_data.\n\n256\n00:14:26.496 --> 00:14:28.591\nI run.\n\n257\n00:14:30.446 --> 00:14:31.950\nIt's running, okay.\n\n258\n00:14:31.950 --> 00:14:33.700\nEverything looks good.\n\n259\n00:14:33.700 --> 00:14:36.760\nBut we saw this before and\nall our records were gone.\n\n260\n00:14:36.760 --> 00:14:38.720\nSo let's try to reconnect.\n\n261\n00:14:40.110 --> 00:14:42.270\nAnd this is a good sign.\n\n262\n00:14:42.270 --> 00:14:47.520\nNotice my database, right, so\nthis is the confusing thing.\n\n263\n00:14:47.520 --> 00:14:51.330\nDatabases are like filing cabinets\nwithin a single Mongo instance.\n\n264\n00:14:51.330 --> 00:14:54.450\nStuff is still there, okay.\n\n265\n00:14:54.450 --> 00:15:01.472\nWell, if I come inside of stuff, and\ncollections, hey groceries is still there.\n\n266\n00:15:01.472 --> 00:15:05.155\nIf I view documents just to\nmake sure it's all up to snuff,\n\n267\n00:15:05.155 --> 00:15:07.410\nand let's make sure we run.\n\n268\n00:15:07.410 --> 00:15:11.771\nIt actually looked up, my data has\npersisted because I've utilized\n\n269\n00:15:11.771 --> 00:15:15.480\na separate data volume for\nthat persistence layer.\n\n270\n00:15:15.480 --> 00:15:18.110\nAnd I've just save myself\na great deal of grief.\n\n271\n00:15:18.110 --> 00:15:22.200\nIn addition to since it's on a separate\nvolume, backing up is going to be made\n\n272\n00:15:22.200 --> 00:15:25.630\neasier because all the other\ncontainers are it doesn't matter.\n\n273\n00:15:26.850 --> 00:15:31.380\nSo Ronnie this is incredibly powerful,\nsomething we need to remember.\n\n274\n00:15:31.380 --> 00:15:35.130\n&gt;&gt; There's no doubt Justin that this is\nprobably the way that you're gonna see\n\n275\n00:15:35.130 --> 00:15:38.990\nthe mapping being done rather than just\nto a central share a lot of times where\n\n276\n00:15:38.990 --> 00:15:41.830\nwe are going to be connecting\nsomething like a MongoDB.\n\n277\n00:15:41.830 --> 00:15:44.544\nAnd here Justin is showing\nhow to do this to make sure\n\n278\n00:15:44.544 --> 00:15:48.490\nthat it was persistent between\nour different containers.\n\n279\n00:15:48.490 --> 00:15:51.880\nWhere Justin closed it out and\nkilled the process and brought it back up.\n\n280\n00:15:51.880 --> 00:15:54.770\nSo you want to make sure that you remember\nthis because this is probably more of\n\n281\n00:15:54.770 --> 00:15:58.530\na real world type of scenario than what we\nsaw previously which was just helping us\n\n282\n00:15:58.530 --> 00:16:00.002\nto understand the concept.\n\n283\n00:16:00.002 --> 00:16:02.800\nBut it's a great example and\nit's also a great time for\n\n284\n00:16:02.800 --> 00:16:05.610\nus to end this episode as well.\n\n285\n00:16:05.610 --> 00:16:09.740\nSo, signing off for ITProTV,\nI've been your host Ronnie Wong.\n\n286\n00:16:09.740 --> 00:16:10.770\n&gt;&gt; And I'm Justin Dennison.\n\n287\n00:16:10.770 --> 00:16:13.635\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n288\n00:16:13.635 --> 00:16:20.302\n[MUSIC]\n\n289\n00:16:20.302 --> 00:16:22.716\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "210319179"
        },
        {
          "description": "In this episode, Ronnie and Justin discuss the benefits of building your own docker image.  They demonstrate how to do so and keep track of the images you create.  Justin reminds us that the images are really files that are differences from the base image we choose to create our customized image.  This according to the guys means that we can have many images that do not take a lot of space within our containers.",
          "length": "1286",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-1-building_our_first_docker_image-032317.00_27_40_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-1-building_our_first_docker_image-032317.00_27_40_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-1-building_our_first_docker_image-032317.00_27_40_12.Still001-sm.jpg",
          "title": "Building our First Docker Image",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:04.737\nWelcome to ItPro.Tv,\nI'm your host, Don [CROSSTALK].\n\n2\n00:00:04.737 --> 00:00:08.152\n[MUSIC]\n\n3\n00:00:08.152 --> 00:00:11.691\n&gt;&gt; You're watching ItPro.Tv.\n\n4\n00:00:11.691 --> 00:00:14.510\n&gt;&gt; Welcome to another great\nepisode right here on ItPro.Tv.\n\n5\n00:00:14.510 --> 00:00:19.720\nI'm your host, Ronnie Wong, and\ntoday you're watching introduction Docker.\n\n6\n00:00:19.720 --> 00:00:24.340\nWe're taking a look specifically at\nbuilding our very first Docker image.\n\n7\n00:00:24.340 --> 00:00:26.820\nAnd here to help us is Mr.\nJustin Dennison.\n\n8\n00:00:26.820 --> 00:00:29.180\nJustin, welcome back to our studios and\nhow are you doing today?\n\n9\n00:00:29.180 --> 00:00:30.980\n&gt;&gt; I'm doing well, I'm excited to be here.\n\n10\n00:00:30.980 --> 00:00:32.980\nIt's gonna be some fun times.\n\n11\n00:00:32.980 --> 00:00:34.380\n&gt;&gt; All right, sounds good.\n\n12\n00:00:34.380 --> 00:00:38.320\nAs we take a look at this\nidea of building an image.\n\n13\n00:00:38.320 --> 00:00:42.440\nNow Justin, we have talked about\ncontainers and even in a previous episode,\n\n14\n00:00:42.440 --> 00:00:46.550\nreally the one that we recorded\nright before this one.\n\n15\n00:00:46.550 --> 00:00:50.280\nWe were taking a look at connecting\nto data and different volumes.\n\n16\n00:00:50.280 --> 00:00:53.470\nAnd there were a lot of different\ncommands that we had in there.\n\n17\n00:00:53.470 --> 00:00:56.440\nAnd what we wanna do is we wanna\ntake a look at this idea of\n\n18\n00:00:56.440 --> 00:00:58.260\nhow do we make something like that easier?\n\n19\n00:00:58.260 --> 00:01:02.110\nAnd you're proposing that images may be\nthe way that helps us to do that, right?\n\n20\n00:01:02.110 --> 00:01:05.650\n&gt;&gt; So, we have this preconfigured state,\nright?\n\n21\n00:01:05.650 --> 00:01:07.570\nI wanna create this.\n\n22\n00:01:07.570 --> 00:01:09.100\nI want this volumes from.\n\n23\n00:01:09.100 --> 00:01:11.380\nI wanna have this volume mounted.\n\n24\n00:01:11.380 --> 00:01:14.320\nI want it to be this base image,\nthis installed.\n\n25\n00:01:14.320 --> 00:01:17.480\nAnd we haven't really shown a great\ndeal but what will happen is,\n\n26\n00:01:17.480 --> 00:01:21.530\nmaybe I hop into a base Ubunto box or\nUbunto container and\n\n27\n00:01:21.530 --> 00:01:24.430\nI start playing around it and\nget it just the state that I want it.\n\n28\n00:01:24.430 --> 00:01:29.860\nAnd then I'm like, okay how can I\nsummarize that and kind of boil that down.\n\n29\n00:01:29.860 --> 00:01:32.820\nNow there's a couple of\ndifferent ways to do this.\n\n30\n00:01:32.820 --> 00:01:34.550\nThere's a way,\n\n31\n00:01:34.550 --> 00:01:37.860\nby giving it to that state I can save\nthat in a couple of different ways.\n\n32\n00:01:37.860 --> 00:01:39.040\nAnd we'll talk about that later.\n\n33\n00:01:39.040 --> 00:01:44.340\nBut there's also, after you figure out\nthe process, we can write a Docker file.\n\n34\n00:01:44.340 --> 00:01:46.570\nWe can actually write a recipe,\n\n35\n00:01:46.570 --> 00:01:52.200\nif you will to get things\nalways reproducible going.\n\n36\n00:01:52.200 --> 00:01:54.730\nAnd that way it's almost like a checklist.\n\n37\n00:01:54.730 --> 00:01:58.950\nThere are some things we need to consider\nwhen writing Docker files though.\n\n38\n00:01:58.950 --> 00:02:03.230\nBut it allows us to go step one,\nI need to have this type container.\n\n39\n00:02:03.230 --> 00:02:06.030\nStep two, I need to install these things.\n\n40\n00:02:06.030 --> 00:02:08.160\nStep three, I need to mount these volumes.\n\n41\n00:02:08.160 --> 00:02:10.520\nStep four, I need these files.\n\n42\n00:02:10.520 --> 00:02:14.390\nAnd really, where this comes in handy is,\nfrom a development point of view,\n\n43\n00:02:14.390 --> 00:02:19.330\nthis is something where you can wrap\nyour application in its runtime and\n\n44\n00:02:19.330 --> 00:02:21.590\nthen the container\nbecomes the application.\n\n45\n00:02:21.590 --> 00:02:25.290\nFor instance, if you have a Java\napplication that has to run in Tomcat.\n\n46\n00:02:25.290 --> 00:02:29.240\nYou could create a VM, install Tomcat and\n\n47\n00:02:29.240 --> 00:02:35.110\nconfigure every time that you need\nto redeploy your application or\n\n48\n00:02:35.110 --> 00:02:39.020\nyou can write an application\nthat in the Docker file.\n\n49\n00:02:39.020 --> 00:02:42.890\nVM, install Java, install Tomcat,\nput the files where they need to be,\n\n50\n00:02:42.890 --> 00:02:45.960\ndeploy and then when you run the container\nafter initial image is built\n\n51\n00:02:47.080 --> 00:02:50.010\nyour application is up and\nrunning every time.\n\n52\n00:02:50.010 --> 00:02:52.660\nBut there are some things you\nhave to be careful about.\n\n53\n00:02:52.660 --> 00:02:53.280\n&gt;&gt; All right, Justin.\n\n54\n00:02:53.280 --> 00:02:56.630\nSo, help us get started with this\nDocker file, where do we begin?\n\n55\n00:02:56.630 --> 00:02:59.890\n&gt;&gt; Well, we're going to start at the very,\nvery, very beginning,\n\n56\n00:02:59.890 --> 00:03:05.470\nsimple as we can get and I'm going\nto try to take it kind of slow and\n\n57\n00:03:06.820 --> 00:03:10.370\nkeep all the nuanced details\navailable to you if I can.\n\n58\n00:03:10.370 --> 00:03:13.180\nThis is an incredibly complex issue,\n\n59\n00:03:13.180 --> 00:03:16.720\nso we have to be careful that not\neverything's gonna be shown to you.\n\n60\n00:03:16.720 --> 00:03:21.570\nNot everything's gonna be well,\nhe said that I could only do these things.\n\n61\n00:03:21.570 --> 00:03:23.850\nNo, there's a bunch of other commands and\n\n62\n00:03:23.850 --> 00:03:27.330\nsettings that I can make\nthat we may not see the day.\n\n63\n00:03:27.330 --> 00:03:30.740\nBut as a resource, let's go ahead and\ntake a look as a resource\n\n64\n00:03:32.300 --> 00:03:37.690\nDocker actually has a couple of references\nfor this that are great reading.\n\n65\n00:03:37.690 --> 00:03:39.360\nThey're very well written.\n\n66\n00:03:39.360 --> 00:03:40.640\nThey talk about usages.\n\n67\n00:03:40.640 --> 00:03:42.540\nSo I have a Docker file reference.\n\n68\n00:03:42.540 --> 00:03:47.110\nAnd I'm not gonna ask you to remember\nthat, I'm just showing it to you.\n\n69\n00:03:47.110 --> 00:03:50.220\nWhat I look up is Docker file\nreference in Google, and\n\n70\n00:03:50.220 --> 00:03:51.610\nthis is typically the first link.\n\n71\n00:03:52.970 --> 00:03:57.130\nAnd it will tell you about best practices,\nthings to consider.\n\n72\n00:03:57.130 --> 00:04:00.510\nAnd what I've noticed is sometimes\nthis can get really deep.\n\n73\n00:04:00.510 --> 00:04:04.020\nYou can chase this rabbit hole and well,\n\n74\n00:04:04.020 --> 00:04:09.440\nI just spent the last seven hours trying\nto figure out this Docker ignore file.\n\n75\n00:04:09.440 --> 00:04:12.450\nWe're gonna start simple,\nhow you would normally start,\n\n76\n00:04:12.450 --> 00:04:15.870\nand then I'm gonna go back and try to\nadd on some of these best practices,\n\n77\n00:04:15.870 --> 00:04:20.830\nbecause these are incredibly\nkind of all over the place.\n\n78\n00:04:20.830 --> 00:04:23.290\nNot necessarily in a bad way but\n\n79\n00:04:23.290 --> 00:04:26.550\nit's a lot of things to consider\nas you're writing docker files.\n\n80\n00:04:26.550 --> 00:04:29.630\nSo this is the first resource\nthat I recommend you check out.\n\n81\n00:04:29.630 --> 00:04:33.050\nIn addition to, there is a secondary\none called best practices for\n\n82\n00:04:33.050 --> 00:04:34.530\nwriting Docker files.\n\n83\n00:04:34.530 --> 00:04:35.800\nAnd it's-\n&gt;&gt; Nice.\n\n84\n00:04:35.800 --> 00:04:37.550\n&gt;&gt; Recommendations.\n\n85\n00:04:37.550 --> 00:04:44.290\nAnd notice, Number one,\ncontainers should be ephemeral.\n\n86\n00:04:44.290 --> 00:04:48.025\nIt's like they read my mind or\nmaybe I read their mind.\n\n87\n00:04:48.025 --> 00:04:50.120\n&gt;&gt; [LAUGH]\n&gt;&gt; Use a Docker ignore.\n\n88\n00:04:50.120 --> 00:04:53.310\nNow we're not gonna do that and that's\nbecause as you're building larger and\n\n89\n00:04:53.310 --> 00:04:54.760\nlarger applications.\n\n90\n00:04:54.760 --> 00:05:00.350\nYou wanna keep your image sizes small and\nonly have the bare minimum that you need.\n\n91\n00:05:00.350 --> 00:05:03.620\nAnd then don't throw the kitchen\nsink at it, effectively.\n\n92\n00:05:05.180 --> 00:05:06.750\nAnd each container should do one thing.\n\n93\n00:05:06.750 --> 00:05:09.540\nSingle responsibility\nprinciple is important.\n\n94\n00:05:09.540 --> 00:05:13.510\nAnd then we'll talk about some of\nthese other portions here, okay?\n\n95\n00:05:13.510 --> 00:05:16.970\nAnd particularly caching and\nhow that works.\n\n96\n00:05:16.970 --> 00:05:21.260\nSo these are two great resources\nthat I definitely say check out and\n\n97\n00:05:21.260 --> 00:05:23.440\nsee how it works out for you.\n\n98\n00:05:23.440 --> 00:05:26.610\nAll right, so, I'm now in my terminal.\n\n99\n00:05:26.610 --> 00:05:28.430\nHow do I get started\nwith this Docker file?\n\n100\n00:05:29.680 --> 00:05:33.500\nI'm gonna hop it onto the desktop, just so\nwe can take a look at it if we need to.\n\n101\n00:05:33.500 --> 00:05:36.909\nAnd I'm gonna make a directory,\n\n102\n00:05:36.909 --> 00:05:41.551\nand I'm gonna say,\nhow about first or base?\n\n103\n00:05:44.015 --> 00:05:49.008\nAnd base, I'm going to create\na Docker file and the convention is,\n\n104\n00:05:49.008 --> 00:05:52.686\nDocker will look for\na file called Docker file when\n\n105\n00:05:52.686 --> 00:05:57.439\nwe run the commands in order to\nuse this file to build something.\n\n106\n00:05:58.570 --> 00:06:00.260\nThis is not the only way you can do this.\n\n107\n00:06:00.260 --> 00:06:02.220\nThis is the recommended way I would start.\n\n108\n00:06:02.220 --> 00:06:05.880\nSo you don't have to worry about\nlearning additional command line\n\n109\n00:06:05.880 --> 00:06:10.220\nflags because there's already a great\ndeal of them that you need to know to be\n\n110\n00:06:10.220 --> 00:06:11.690\ndangerous, if you will.\n\n111\n00:06:11.690 --> 00:06:13.450\nSo I'm gonna create a Dockerfile.\n\n112\n00:06:13.450 --> 00:06:17.590\nNow, I'm gonna use vim just so\nwe don't have to swipe back and forth.\n\n113\n00:06:17.590 --> 00:06:19.105\nI can create seasickness.\n\n114\n00:06:19.105 --> 00:06:20.180\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n115\n00:06:20.180 --> 00:06:23.230\nyou can use any text editor that you want.\n\n116\n00:06:23.230 --> 00:06:25.310\nSo, there's nothing special about this.\n\n117\n00:06:26.520 --> 00:06:33.718\nThe very first thing in a Dockerfile,\nit is plain text, is the from statement.\n\n118\n00:06:33.718 --> 00:06:40.350\nSo from, now what from tells\nus Is what is the base image?\n\n119\n00:06:40.350 --> 00:06:42.386\nSo we all have to start somewhere, right?\n\n120\n00:06:42.386 --> 00:06:43.124\nIt could be BusyBox.\n\n121\n00:06:43.124 --> 00:06:45.260\nIt could be Ubuntu.\n\n122\n00:06:45.260 --> 00:06:48.170\nIt could be NGINX, right.\n\n123\n00:06:48.170 --> 00:06:51.350\nI could be changing the NGINX, Apache.\n\n124\n00:06:51.350 --> 00:06:53.860\nAny of those Fedora, or Red Hat.\n\n125\n00:06:53.860 --> 00:06:56.360\nBut where we're starting from?\n\n126\n00:06:56.360 --> 00:06:58.330\nAnd this from is going\nto take an image name.\n\n127\n00:06:58.330 --> 00:07:04.010\nThis would be the exact same image name\nthat you would do a pull or a run with.\n\n128\n00:07:04.010 --> 00:07:06.390\nSo FROM and I'm actually gonna use Ubuntu.\n\n129\n00:07:06.390 --> 00:07:10.550\nAnd I'm gonna use 16.04 which\nis the latest LTS release.\n\n130\n00:07:10.550 --> 00:07:13.290\nAnd notice, I put a colon there.\n\n131\n00:07:13.290 --> 00:07:16.440\nI'm designating the exact version and\n\n132\n00:07:16.440 --> 00:07:20.620\nthe reason being is,\nI wanna kind of lock this in place.\n\n133\n00:07:20.620 --> 00:07:25.200\nIf I type just ubuntu,\nevery time I re-run this Dockerfile,\n\n134\n00:07:25.200 --> 00:07:28.160\nit will try to find the latest one.\n\n135\n00:07:28.160 --> 00:07:30.530\nAnd if there's been any changes, right?\n\n136\n00:07:30.530 --> 00:07:34.010\nLet's say, instead of 16 out of four,\nyou re-run it and 17 or\n\n137\n00:07:34.010 --> 00:07:39.000\n18 has been released, and\nwell your stuff breaks.\n\n138\n00:07:39.000 --> 00:07:40.370\nNow you don't know why.\n\n139\n00:07:40.370 --> 00:07:43.360\nSo it's best to be specific about this\n\n140\n00:07:43.360 --> 00:07:46.130\nunless you have a very\nparticular use case.\n\n141\n00:07:46.130 --> 00:07:46.950\nOkay?\n\n142\n00:07:46.950 --> 00:07:49.850\nSo the from is our base image.\n\n143\n00:07:49.850 --> 00:07:53.510\nNow, what is going to happen?\n\n144\n00:07:53.510 --> 00:07:55.992\nThis is very basic.\n\n145\n00:07:55.992 --> 00:07:59.724\nAt least we have a command to run,\nand commands.\n\n146\n00:07:59.724 --> 00:08:06.500\nAre, well they're the thing that get\nexecuted, they're one of the things.\n\n147\n00:08:06.500 --> 00:08:07.810\nWe'll talk about another one,\n\n148\n00:08:07.810 --> 00:08:12.230\nthat get executed when the container\nis actually created from this image.\n\n149\n00:08:12.230 --> 00:08:19.021\nSo let's just say echo and comma,\n\n150\n00:08:19.021 --> 00:08:23.600\nhello there.\n\n151\n00:08:23.600 --> 00:08:25.960\nAll right.\nNow, notice I put this in,\n\n152\n00:08:27.080 --> 00:08:31.280\nwell if you're a programmer,\nthis kinda looks like an array of strings.\n\n153\n00:08:31.280 --> 00:08:36.810\nBut I have these square brackets, this is\na command and this is another command.\n\n154\n00:08:38.670 --> 00:08:39.920\nOr is it?\n\n155\n00:08:39.920 --> 00:08:40.430\nWho knows.\n\n156\n00:08:40.430 --> 00:08:42.920\nSo, we'll talk about\nthe best practice there.\n\n157\n00:08:42.920 --> 00:08:43.670\nBut it's a comma.\n\n158\n00:08:43.670 --> 00:08:47.060\nThis is not how I would type\nit in the command line.\n\n159\n00:08:47.060 --> 00:08:49.010\nBut when I give it an array of strings,\n\n160\n00:08:49.010 --> 00:08:53.980\nwhat it does is it puts spaces between\nthem, and kind of wraps them as string,\n\n161\n00:08:53.980 --> 00:08:57.750\nand then executes them in the environment,\nall right?\n\n162\n00:08:57.750 --> 00:08:59.850\nSo, let's see if we can get this to work.\n\n163\n00:08:59.850 --> 00:09:01.780\nThis is our very first Docker file.\n\n164\n00:09:02.930 --> 00:09:04.140\nShould work.\n\n165\n00:09:04.140 --> 00:09:05.020\nIt might not.\n\n166\n00:09:05.020 --> 00:09:07.500\nMay be we'll find out\nsome of those gotchas.\n\n167\n00:09:07.500 --> 00:09:10.470\nSo I'm going to save and then I can say,\n\n168\n00:09:10.470 --> 00:09:15.410\ndocker build and\nwhat have I want to build?\n\n169\n00:09:15.410 --> 00:09:17.960\nWell, I want to build, dot.\n\n170\n00:09:17.960 --> 00:09:19.530\nThat means from this directory.\n\n171\n00:09:19.530 --> 00:09:23.460\nLook in the directory that I'm\ncurrently in for a docker file.\n\n172\n00:09:23.460 --> 00:09:28.290\nSo if I build, notice it's done.\n\n173\n00:09:28.290 --> 00:09:33.370\nAnd now if I say docker images,\nand actually\n\n174\n00:09:33.370 --> 00:09:38.110\nhave that formatted appropriately,\nhere is the image 8 seconds ago.\n\n175\n00:09:39.160 --> 00:09:41.160\nIt is 130 megabytes.\n\n176\n00:09:41.160 --> 00:09:45.155\nThere's the image ID Notice\nit has no repository or tag.\n\n177\n00:09:45.155 --> 00:09:50.380\nAnd that could be a problem but\nI have an image ID.\n\n178\n00:09:50.380 --> 00:09:52.360\nCan I run that file?\n\n179\n00:09:52.360 --> 00:09:53.480\nI don't know, let's see.\n\n180\n00:09:53.480 --> 00:09:58.150\nDocker run, and\nsince I don't have a repository or\n\n181\n00:09:58.150 --> 00:10:03.480\na tag, I have to have this ID and\nwell, let's just paste.\n\n182\n00:10:05.090 --> 00:10:05.960\nLook at that.\n\n183\n00:10:05.960 --> 00:10:09.750\nWe have built our very\nfirst custom Docker image,\n\n184\n00:10:09.750 --> 00:10:12.620\nthat all it does is echo out Hello There.\n\n185\n00:10:12.620 --> 00:10:17.500\nSo effectively, this has taken Docker and\nmade a command line utility\n\n186\n00:10:17.500 --> 00:10:21.319\nthat runs in Linux that I never have\nto worry about once I bundle it up.\n\n187\n00:10:23.260 --> 00:10:25.380\n&gt;&gt; Now it'll seem strange,\n\n188\n00:10:25.380 --> 00:10:29.630\nhow do you keep track of this since\nthe only thing you have is that image ID.\n\n189\n00:10:29.630 --> 00:10:33.800\nIs there a way we can have a name to it\nlike what we did a little bit earlier\n\n190\n00:10:33.800 --> 00:10:35.880\nin terms of the images\nthat we already had?\n\n191\n00:10:35.880 --> 00:10:37.880\n&gt;&gt; So that's a great question Ronnie.\n\n192\n00:10:37.880 --> 00:10:42.262\nLike these images here mongo, busybox,\nnginx I can have a name and a tag, and\n\n193\n00:10:42.262 --> 00:10:45.027\nsince this is going to\nbuild fairly quickly, and\n\n194\n00:10:45.027 --> 00:10:49.360\nwe're gonna come back and take a look\nat what these are actually doing here.\n\n195\n00:10:49.360 --> 00:10:51.472\nSince this is building very quickly,\n\n196\n00:10:51.472 --> 00:10:55.965\nI think it's a good time to talk about\nnaming conventions, how these are named?\n\n197\n00:10:55.965 --> 00:10:58.991\nHow we can keep track of these?\n\n198\n00:10:58.991 --> 00:11:06.330\nSo, I'm gonna say, docker build -t and\nessentially that means tag this.\n\n199\n00:11:06.330 --> 00:11:08.570\nPut a stamp on it, okay?\n\n200\n00:11:08.570 --> 00:11:10.750\nAnd it takes a fully qualified name.\n\n201\n00:11:10.750 --> 00:11:15.462\nJust like you can run push or\npull with Nginx:1-10, or\n\n202\n00:11:15.462 --> 00:11:20.720\n11-10.3, whatever that version number is.\n\n203\n00:11:20.720 --> 00:11:25.190\nI can do the exact same thing with well,\nthis build file.\n\n204\n00:11:25.190 --> 00:11:29.542\nSo I'm gonna say docker build -t and\nlet's just call it\n\n205\n00:11:29.542 --> 00:11:34.220\nbaseimage colon.\n\n206\n00:11:34.220 --> 00:11:40.220\nAnd I recommend giving this a tag, but\nlet's see what happens when we don't.\n\n207\n00:11:40.220 --> 00:11:47.030\nI'm gonna say -t baseimage dot,\nand notice that was really fast.\n\n208\n00:11:47.030 --> 00:11:52.460\nWell that's because it was already\nbuilt and it keeps the steps.\n\n209\n00:11:52.460 --> 00:11:58.170\nAs it runs through that file, it\nremembers what has already been executed\n\n210\n00:11:58.170 --> 00:12:03.100\nand keeps essentially a hash,\nso it can compare.\n\n211\n00:12:03.100 --> 00:12:04.940\nIf it's already run before.\n\n212\n00:12:04.940 --> 00:12:08.560\nAnd all you're doing is retagging,\nrenaming, just like we did here.\n\n213\n00:12:08.560 --> 00:12:11.110\nIt's almost instantaneous\nbecause it doesn't actually have\n\n214\n00:12:11.110 --> 00:12:13.030\nto do anything again.\n\n215\n00:12:13.030 --> 00:12:19.500\nSo now if we look at docker images,\nNotice I have a base image.\n\n216\n00:12:21.470 --> 00:12:24.350\nAnd there's a tag of latest.\n\n217\n00:12:24.350 --> 00:12:27.010\nSo when you see on Docker Hub, the tag of,\n\n218\n00:12:27.010 --> 00:12:29.760\nlatest that means that\nthere is no version.\n\n219\n00:12:29.760 --> 00:12:32.370\nThat is the last one that they put out and\n\n220\n00:12:32.370 --> 00:12:35.880\nlatest will change depending\non how features have changed.\n\n221\n00:12:35.880 --> 00:12:39.410\nBut in this base image,\nI know it's a version one.\n\n222\n00:12:39.410 --> 00:12:41.100\nI am going to make some changes.\n\n223\n00:12:41.100 --> 00:12:44.548\nSo I am going to go ahead and\nretag it with a version one.\n\n224\n00:12:44.548 --> 00:12:46.132\nLike a 1.0.\n\n225\n00:12:46.132 --> 00:12:52.368\nSo if I clear and I say docker build-t and\n\n226\n00:12:52.368 --> 00:12:57.687\nI'm gonna say the base image colon\n\n227\n00:12:57.687 --> 00:13:02.286\n1.0 and then a dot, okay?\n\n228\n00:13:02.286 --> 00:13:10.500\nSending context and noticed I have a base\nimage 1.0 and now I can make changes.\n\n229\n00:13:10.500 --> 00:13:15.320\nAnd what's really powerful about this is\nonce you get an image to a certain state\n\n230\n00:13:15.320 --> 00:13:19.890\nthat you want, I would tag it with\na version number that you predefine and\n\n231\n00:13:19.890 --> 00:13:21.160\nagree upon.\n\n232\n00:13:21.160 --> 00:13:24.950\nOr some other tagging system so\nyou can keep track of them.\n\n233\n00:13:24.950 --> 00:13:26.490\nIf something breaks in latest but\n\n234\n00:13:26.490 --> 00:13:30.820\nthen I have 1.0 and it was working,\nI can always revert back to 1.0.\n\n235\n00:13:30.820 --> 00:13:32.130\nCreate containers from one data.\n\n236\n00:13:33.200 --> 00:13:37.471\nWe're not limited though to just\nnumeric naming for the tags.\n\n237\n00:13:37.471 --> 00:13:39.746\nAs you've seen with the latest,\n\n238\n00:13:39.746 --> 00:13:45.690\nalthough that's something special the\ndocker does, so let's say docker build -t.\n\n239\n00:13:45.690 --> 00:13:49.713\nAnd I'm going to say base image, and this\nis going to be the awesome image Ronnie.\n\n240\n00:13:49.713 --> 00:13:50.653\n&gt;&gt; Awesome.\n\n241\n00:13:50.653 --> 00:13:57.950\n&gt;&gt; And boom a docker images.\n\n242\n00:13:57.950 --> 00:14:02.971\nAnd notice I have base image latest,\nbase image awesome, and base image 1.0.\n\n243\n00:14:02.971 --> 00:14:07.960\nHowever look,\nthey all have the same image ID.\n\n244\n00:14:07.960 --> 00:14:12.040\nAnd that's because the image ID\nis based on the current state.\n\n245\n00:14:12.040 --> 00:14:13.930\nWe haven't made any\nchanges to our docker file\n\n246\n00:14:15.060 --> 00:14:17.860\nIt's based on the current\nstate of that Docker file.\n\n247\n00:14:17.860 --> 00:14:21.100\nSo these will not change and\nthat's why it's so fast.\n\n248\n00:14:21.100 --> 00:14:24.120\nIt doesn't have to recompute anything,\nredo anything.\n\n249\n00:14:24.120 --> 00:14:28.960\nSo maybe that's our next step\nhere is actually make changes and\n\n250\n00:14:28.960 --> 00:14:32.410\nsee how these base images kind of update.\n\n251\n00:14:32.410 --> 00:14:36.540\n&gt;&gt; Now Justin, before you move on, on\nthose top three that we see right there.\n\n252\n00:14:36.540 --> 00:14:42.740\nIs it actually taking up 130 megabytes\nthree times, or is it actually\n\n253\n00:14:42.740 --> 00:14:46.660\njust taking up once and we're just\nseeing different names attached to it?\n\n254\n00:14:46.660 --> 00:14:49.750\n&gt;&gt; So, Ronnie,\nthat very much is a valid concern, right.\n\n255\n00:14:49.750 --> 00:14:53.760\nI have 130 megabytes three times, it's\n390 megabytes, it's almost a half a gig.\n\n256\n00:14:53.760 --> 00:14:58.180\nAnd all together here I'm probably looking\nat roughly a gig, gig and a half, maybe\n\n257\n00:14:58.180 --> 00:15:02.740\neven two gigs Not doing the math right now\noff the top of my head, I could sit down.\n\n258\n00:15:02.740 --> 00:15:07.220\nBut here's the kicker,\nsince this Image ID is exactly the same,\n\n259\n00:15:07.220 --> 00:15:09.260\nthis is technically the same image.\n\n260\n00:15:09.260 --> 00:15:13.420\nIt's not stored three times,\nit's just referenced three times.\n\n261\n00:15:13.420 --> 00:15:18.930\nSo I don't have to, well, I don't have to\nworry about duplication in this manner.\n\n262\n00:15:18.930 --> 00:15:21.970\nIn addition to, I'm gonna draw\nyour attention to right here.\n\n263\n00:15:21.970 --> 00:15:26.060\nNotice step one of two, this is the first\nline on my docker file that's running.\n\n264\n00:15:26.060 --> 00:15:29.370\nIt gives me the first\npart of a shot 256 hash.\n\n265\n00:15:29.370 --> 00:15:34.880\nAnd what it's doing is at the end of\nthat line it creates a new image.\n\n266\n00:15:34.880 --> 00:15:38.334\nSo even though we're building\nwhat we consider an image,\n\n267\n00:15:38.334 --> 00:15:42.984\nthere are intermediate containers that\nare kind of committed as an image, and\n\n268\n00:15:42.984 --> 00:15:46.440\nas they're created, well,\nthat goes into cache.\n\n269\n00:15:46.440 --> 00:15:48.666\nBecause, well here.\n\n270\n00:15:48.666 --> 00:15:52.654\nStep two, it builds the first one,\nit set that aside.\n\n271\n00:15:52.654 --> 00:15:55.118\nAnd it starts to run again and it says,\n\n272\n00:15:55.118 --> 00:15:58.510\nusing cash because it's\npicking where it left off.\n\n273\n00:15:58.510 --> 00:16:00.510\nIt doesn't have to redo that part.\n\n274\n00:16:00.510 --> 00:16:03.230\nIt just adds on this extra command here.\n\n275\n00:16:03.230 --> 00:16:06.480\nThis modification, or\nmutation of the state.\n\n276\n00:16:06.480 --> 00:16:08.510\nAnd then it generates a new hash.\n\n277\n00:16:08.510 --> 00:16:12.780\nAnd notice that this hash is\nexactly the same as this hash.\n\n278\n00:16:12.780 --> 00:16:17.214\nSo the final state is based on,\nkind of like a Polaroid.\n\n279\n00:16:17.214 --> 00:16:21.760\nI don't need it three times,\nif they're the exact same thing.\n\n280\n00:16:21.760 --> 00:16:24.490\nAnd this is where that\nspeed comes in to play.\n\n281\n00:16:24.490 --> 00:16:27.540\nIt's recognizing that there's been\nno changes to this docker file.\n\n282\n00:16:27.540 --> 00:16:32.550\nBut instead, it's just giving you\nthe same thing, and renaming it.\n\n283\n00:16:32.550 --> 00:16:37.480\nBut let's see what happens when we\nchange the docker file a little bit.\n\n284\n00:16:37.480 --> 00:16:40.190\nAnd all right, so\n\n285\n00:16:40.190 --> 00:16:45.588\nI'm going to go back\ninto my docker file here.\n\n286\n00:16:45.588 --> 00:16:51.039\nAnd there we go, and\ninstead of hello there,\n\n287\n00:16:51.039 --> 00:16:55.209\nlet's just say hello somewhere.\n\n288\n00:16:55.209 --> 00:17:01.820\nAnd let's see if that small change\nactually changes our output.\n\n289\n00:17:01.820 --> 00:17:05.286\nAnd I'm going to build not awesome but\njust base image, so\n\n290\n00:17:05.286 --> 00:17:07.916\nthat it overwrites the latest, all right?\n\n291\n00:17:07.916 --> 00:17:09.624\nSo this will be tagged as latest.\n\n292\n00:17:09.624 --> 00:17:12.905\nAnd I go, and well,\nI can tell you already.\n\n293\n00:17:15.293 --> 00:17:17.986\nNotice that this image ID has changed,\n\n294\n00:17:17.986 --> 00:17:23.600\nbecause the hash of the build process\nhas changed, or the image ID.\n\n295\n00:17:23.600 --> 00:17:26.550\nAnd now,\nlatest is different from version one.\n\n296\n00:17:26.550 --> 00:17:31.845\nAnd to prove that, I'm going to\nhopefully spell docker correctly.\n\n297\n00:17:31.845 --> 00:17:37.120\n&gt;&gt; [LAUGH]\n&gt;&gt; baseimage:latest.\n\n298\n00:17:37.120 --> 00:17:42.824\nHello somewhere, but\nnow I'm going to docker\n\n299\n00:17:42.824 --> 00:17:47.660\nrun baseimage 1.0 and hello there.\n\n300\n00:17:47.660 --> 00:17:49.170\nSo those are different images.\n\n301\n00:17:49.170 --> 00:17:52.890\nI've changed the state, and\nI've snapshotted those, but\n\n302\n00:17:52.890 --> 00:17:55.840\nnow I can spin up containers very,\nvery quickly.\n\n303\n00:17:55.840 --> 00:17:58.470\nAnd that's the ultimate\ngoal of docker files.\n\n304\n00:17:58.470 --> 00:18:02.000\n&gt;&gt; Now, with the amount of\nspace that we're talking,\n\n305\n00:18:02.000 --> 00:18:04.660\nnow we are taking up a 130 and a 130.\n\n306\n00:18:04.660 --> 00:18:06.562\nNo, we are actually not.\n\n307\n00:18:06.562 --> 00:18:08.110\n&gt;&gt; [LAUGH]\n&gt;&gt; We are actually not.\n\n308\n00:18:08.110 --> 00:18:12.920\nAnd if we, well I don't know,\ncan I scroll back up here?\n\n309\n00:18:12.920 --> 00:18:19.418\nSo let's look at this hash, OEF2E, and\nif we come back here, notice that's OEF2E.\n\n310\n00:18:19.418 --> 00:18:20.957\nStep one's exactly the same.\n\n311\n00:18:20.957 --> 00:18:21.660\n&gt;&gt; Mm-hm.\n\n312\n00:18:21.660 --> 00:18:25.518\n&gt;&gt; It's already using that same,\nwhat they call a layer, or\n\n313\n00:18:25.518 --> 00:18:27.899\ncached container, cached image.\n\n314\n00:18:27.899 --> 00:18:30.320\nIt only generates the new one, so\n\n315\n00:18:30.320 --> 00:18:34.745\nall together all of these\nlayers kind of smushed are 130.\n\n316\n00:18:34.745 --> 00:18:39.800\nBut it's only that final\nchange that we have to-\n\n317\n00:18:41.280 --> 00:18:42.080\n&gt;&gt; Differentiate.\n\n318\n00:18:42.080 --> 00:18:43.450\n&gt;&gt; Differentiate between.\n\n319\n00:18:43.450 --> 00:18:46.834\nAnd so what that means is,\nI get to share that Ubuntu,\n\n320\n00:18:46.834 --> 00:18:52.110\nmost of that 130 megabytes that we see\nright here is from the Ubuntu base image.\n\n321\n00:18:52.110 --> 00:18:54.250\nActually, if you look at Ubuntu 1604,\n\n322\n00:18:54.250 --> 00:18:58.100\nit is exactly 130 megabytes also,\nright there.\n\n323\n00:18:59.520 --> 00:19:03.470\nAnd we made very little changes, and so,\n\n324\n00:19:03.470 --> 00:19:08.430\nwhere we have one copy of Ubuntu 1604,\nand then we're just layering on\n\n325\n00:19:08.430 --> 00:19:13.050\na little bit of changes here and there,\nkind of a sprinkle or a dash of salt.\n\n326\n00:19:13.050 --> 00:19:16.470\nNow, that can change drastically\nif we do more complex things,\n\n327\n00:19:16.470 --> 00:19:18.440\nlike actually build an application.\n\n328\n00:19:18.440 --> 00:19:23.040\nBut right now, it looks like\nwe have 135 times, but really,\n\n329\n00:19:23.040 --> 00:19:26.090\nit's sharing most of that underneath.\n\n330\n00:19:26.090 --> 00:19:30.180\n&gt;&gt; The base, and the actual Ubuntu 1604.\n\n331\n00:19:30.180 --> 00:19:33.580\nSo yeah, all we're seeing is\ndifferentiation's in those other ones.\n\n332\n00:19:33.580 --> 00:19:36.800\nLike snapshots is what we normally\nsee inside of virtualization.\n\n333\n00:19:36.800 --> 00:19:40.620\nNow, Justin, there's a lot more for\nus to take a look at and\n\n334\n00:19:40.620 --> 00:19:44.170\nto do, but\nI think we're just about out of time here.\n\n335\n00:19:44.170 --> 00:19:47.920\nSo we're gonna save the rest for\npart two, is what we're gonna do.\n\n336\n00:19:47.920 --> 00:19:49.250\nBut any last words on this?\n\n337\n00:19:49.250 --> 00:19:50.870\nCuz this was really interesting.\n\n338\n00:19:50.870 --> 00:19:54.560\nAnd being able to see the different\nways that we can create our own image.\n\n339\n00:19:54.560 --> 00:19:55.940\nEven with this small example,\n\n340\n00:19:55.940 --> 00:19:59.420\nwe can see that all we're really doing\nis we're saving the differentiations\n\n341\n00:19:59.420 --> 00:20:02.140\nfrom whatever that base image\nthat we first started with.\n\n342\n00:20:02.140 --> 00:20:05.840\nWhich is really cool, because it means\nthat we're not using up a ton disk space\n\n343\n00:20:05.840 --> 00:20:08.370\ninside of our original container as well.\n\n344\n00:20:08.370 --> 00:20:10.480\nAnd that really is helpful for\neverything that we're doing.\n\n345\n00:20:10.480 --> 00:20:13.190\nSo, any last words before\nwe close out this episode?\n\n346\n00:20:13.190 --> 00:20:16.180\n&gt;&gt; Well, Ronnie we just have to know\nthat this is ultimately going to be our\n\n347\n00:20:16.180 --> 00:20:19.420\nbuilding block for\nthese large scale applications, right?\n\n348\n00:20:19.420 --> 00:20:23.000\nSo I could build docker files\nthat build individual images, and\n\n349\n00:20:23.000 --> 00:20:26.100\nthen there's actually additional docker\ntools that we'll see that will take\n\n350\n00:20:26.100 --> 00:20:28.990\nthose files and kinda smash them together.\n\n351\n00:20:28.990 --> 00:20:31.760\nSo maybe I have a database,\nlike a master of Mongo,\n\n352\n00:20:31.760 --> 00:20:34.380\nand then I have the individual\nnodes of Mongo.\n\n353\n00:20:34.380 --> 00:20:39.870\nThen I have a layer, and then I have a\nparticular Tom Cat based web application.\n\n354\n00:20:39.870 --> 00:20:41.613\nAnd then I have a Python application.\n\n355\n00:20:41.613 --> 00:20:42.150\n&gt;&gt; Wow.\n&gt;&gt; That's doing natural\n\n356\n00:20:42.150 --> 00:20:43.610\nlanguage processing.\n\n357\n00:20:43.610 --> 00:20:46.950\nAnd then I've built each of\nthose images individually.\n\n358\n00:20:46.950 --> 00:20:50.410\nAnd then I use additional tools\nto spin up containers, and\n\n359\n00:20:50.410 --> 00:20:52.600\nkind of squish them all together.\n\n360\n00:20:52.600 --> 00:20:57.720\nAnd it allows one person to manage\na very complex kind of topology,\n\n361\n00:20:57.720 --> 00:21:00.620\nas well as orchestration concerns.\n\n362\n00:21:00.620 --> 00:21:02.840\n&gt;&gt; All right, well that's a great\nplace for us to go ahead and\n\n363\n00:21:02.840 --> 00:21:04.340\nend this episode then.\n\n364\n00:21:04.340 --> 00:21:07.580\nSigning off for ITPro.TV,\nI've been your host, Ronnie Wong.\n\n365\n00:21:07.580 --> 00:21:10.354\n&gt;&gt; And I'm Justin Dennison\n&gt;&gt; Stay tuned right here for\n\n366\n00:21:10.354 --> 00:21:12.534\nmore Introduction to Docker shows.\n\n367\n00:21:12.534 --> 00:21:18.446\n[MUSIC]\n\n368\n00:21:18.446 --> 00:21:21.249\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "211537408"
        },
        {
          "description": "In this episode, Ronnie and Justin take a look at building a custom docker image.  Justin demonstrates way customize and change images using the Dockerfile.   The guys take the simple commands to build a basic docker image and show how to build one that may be more useful to you.",
          "length": "1463",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-2-building_our_first_docker_image_pt2-032417.00_24_08_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-2-building_our_first_docker_image_pt2-032417.00_24_08_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-7-1-2-building_our_first_docker_image_pt2-032417.00_24_08_13.Still001-sm.jpg",
          "title": "Building our First Docker Image Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:06.555\nWelcome to ITProTV I'm your\nhost Don Pezet, [CROSSTALK]\n\n2\n00:00:06.555 --> 00:00:08.250\n[MUSIC]\n\n3\n00:00:08.250 --> 00:00:12.135\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:12.135 --> 00:00:15.004\n&gt;&gt; Welcome to another great\nepisode right here on ITProTV.\n\n5\n00:00:15.004 --> 00:00:16.853\nI'm your host, Ronnie Wong.\n\n6\n00:00:16.853 --> 00:00:19.980\nAnd today,\nyou're watching Introduction to Doctor.\n\n7\n00:00:19.980 --> 00:00:24.440\nWe're actually taking a look at a part two\non building our very first Docker image.\n\n8\n00:00:24.440 --> 00:00:26.680\nAnd there's a little bit more\nthat we actually have to know.\n\n9\n00:00:26.680 --> 00:00:30.310\nRemember that in the first part where we\ntook a look at the very simplistic idea\n\n10\n00:00:30.310 --> 00:00:32.980\nof building an image, and\nJustin showed us how to do that.\n\n11\n00:00:32.980 --> 00:00:36.570\nNow Justin's gonna help us to apply\nthis a little bit more effectively and\n\n12\n00:00:36.570 --> 00:00:38.760\nshow us some of the different\nthings we can do.\n\n13\n00:00:38.760 --> 00:00:40.270\nJustin, welcome back to our show.\n\n14\n00:00:40.270 --> 00:00:41.120\nHow are you doing today?\n\n15\n00:00:41.120 --> 00:00:41.700\n&gt;&gt; I'm doing well.\n\n16\n00:00:41.700 --> 00:00:42.890\nAnd how are you today, Ronnie?\n\n17\n00:00:42.890 --> 00:00:48.210\n&gt;&gt; I am doing fine and eagerly awaiting\nthis aspect of taking the base\n\n18\n00:00:48.210 --> 00:00:52.598\nknowledge that we've had and now putting\na little bit more application to it.\n\n19\n00:00:52.598 --> 00:00:54.075\nSo help us out.\n\n20\n00:00:54.075 --> 00:00:57.230\n&gt;&gt; All right, well there's no better\ntime than now to get started.\n\n21\n00:00:57.230 --> 00:01:00.023\nSo let's remind ourselves of what we did.\n\n22\n00:01:00.023 --> 00:01:03.240\nAll we have is the ability to\nbuild an image from a Docker file.\n\n23\n00:01:03.240 --> 00:01:07.290\nOur Docker file's not fully filled out,\nso to speak.\n\n24\n00:01:07.290 --> 00:01:08.736\nSo we'll take a look at\nthat in just a moment.\n\n25\n00:01:08.736 --> 00:01:11.931\nBut do remember we're able\nto tag based on version and\n\n26\n00:01:11.931 --> 00:01:14.070\nwhatever label system you decide.\n\n27\n00:01:14.070 --> 00:01:16.065\nSo it's important to remember those.\n\n28\n00:01:16.065 --> 00:01:19.013\nSo let's go ahead and\ntake a look at my screen here and\n\n29\n00:01:19.013 --> 00:01:21.740\nremind ourselves of what\nthat docker file is.\n\n30\n00:01:21.740 --> 00:01:28.736\nSo let me get back to the actual base\nimage here and allow VIM into docker file.\n\n31\n00:01:28.736 --> 00:01:33.168\nI have an image that starts\nwith Ubuntu 16.04, and\n\n32\n00:01:33.168 --> 00:01:36.890\nI have a command of echo hello somewhere.\n\n33\n00:01:36.890 --> 00:01:41.493\nAll right, so if we actually run this,\nbuild it and run it,\n\n34\n00:01:41.493 --> 00:01:46.649\nthen we should be able to see,\nso, docker build -t, baseimage,\n\n35\n00:01:46.649 --> 00:01:51.714\nand I think I'm just gonna leave\nit normally, as the latest, and\n\n36\n00:01:51.714 --> 00:01:57.824\nit builds quickly, but because this is\nactually already built on our system.\n\n37\n00:01:57.824 --> 00:02:03.140\nSo if we look it is actually right here.\n\n38\n00:02:03.140 --> 00:02:06.950\nAnd now that we made that change\nfrom previous tagged portions,\n\n39\n00:02:06.950 --> 00:02:10.711\nwe have a different hash value\nbecause well, that change has occured.\n\n40\n00:02:11.790 --> 00:02:18.376\nSo, now I think it's good to actually see\nhow can we out this into realistic terms.\n\n41\n00:02:18.376 --> 00:02:20.840\nHow can we make this useful to ourselves.\n\n42\n00:02:20.840 --> 00:02:25.390\nSo we're gonna reproduce a very\nsimplistic view of NGINX, so\n\n43\n00:02:25.390 --> 00:02:29.530\nthe NGINX image is actually already built\nfor us, has all the settings and such.\n\n44\n00:02:29.530 --> 00:02:31.300\nBut let's take a look at\nthe individual pieces,\n\n45\n00:02:31.300 --> 00:02:34.820\nsomething that you need to be\nable to do to kinda get started.\n\n46\n00:02:34.820 --> 00:02:40.317\nSo if I come back into my docker file and\nI start with FROM ubuntu\n\n47\n00:02:40.317 --> 00:02:45.182\n16.04 any time you start\nwith a base Linux image,\n\n48\n00:02:45.182 --> 00:02:50.606\nyou've never run an update,\nit's like bare bones, okay?\n\n49\n00:02:50.606 --> 00:02:54.359\nSo just like when you install Linux or\nany other operating system,\n\n50\n00:02:54.359 --> 00:02:57.051\nalmost the very first thing you do,\nis update.\n\n51\n00:02:57.051 --> 00:03:01.730\nSo, I tend to do that very first thing,\nso I don't forget.\n\n52\n00:03:01.730 --> 00:03:05.286\nNow, quick aside there used\nto be a docker attribute,\n\n53\n00:03:05.286 --> 00:03:08.223\nwell there still is some\npeople still use it,\n\n54\n00:03:08.223 --> 00:03:13.173\na docker file attribute called maintainer\nwhere you would list your email or\n\n55\n00:03:13.173 --> 00:03:17.840\nyour docker hubb ID and we'll talk\nmore about docker hubb ID's later.\n\n56\n00:03:17.840 --> 00:03:23.508\nBut this is kind of on the fence and\nI've seen them with and without and\n\n57\n00:03:23.508 --> 00:03:29.790\nif I'm not mistaken since Docker 1.13,\nthis is a deprecated feature.\n\n58\n00:03:29.790 --> 00:03:34.440\nSo if you see that, do know that it use\nto exist and people still use it, but\n\n59\n00:03:34.440 --> 00:03:39.170\nit maybe on its way out, but with\nthe iteration of Docker, you never know.\n\n60\n00:03:39.170 --> 00:03:42.932\nBut we're gonna focus just on\nthe very important things.\n\n61\n00:03:42.932 --> 00:03:46.254\nNotice these commands are all\ncapital letters, all right?\n\n62\n00:03:46.254 --> 00:03:51.460\nSo FROM and\nthen whatever I need to start with.\n\n63\n00:03:51.460 --> 00:03:57.290\nI just typed RUN, RUN is going to issue\na bash command or some terminal command.\n\n64\n00:03:57.290 --> 00:04:01.000\nAnd I'm gonna say apt-get\nwhich is Ubuntu's\n\n65\n00:04:02.290 --> 00:04:06.012\npackage management system,\naptitude, and I'm gonna say update.\n\n66\n00:04:06.012 --> 00:04:10.510\nAll right so I want to update, and\nlet's see how that, that works out.\n\n67\n00:04:10.510 --> 00:04:17.660\nSo I'm gonna say docker\nbuild -t baseimage and boom.\n\n68\n00:04:18.730 --> 00:04:23.930\nAnd update and\nsadly what I found is package management\n\n69\n00:04:23.930 --> 00:04:29.141\nis not always the fastest\nin the dockers space, okay?\n\n70\n00:04:29.141 --> 00:04:35.542\nSo, we sometimes have to wait and\nthis could take a little bit of time.\n\n71\n00:04:35.542 --> 00:04:39.150\nNow, it did build, all right.\n\n72\n00:04:39.150 --> 00:04:42.452\nHowever, just to make absolute sure,\n\n73\n00:04:42.452 --> 00:04:47.660\nwe're going to add a flag cuz\nsometimes there's an update.\n\n74\n00:04:47.660 --> 00:04:48.600\nDo you want update?\n\n75\n00:04:48.600 --> 00:04:50.394\nYes.\n\n76\n00:04:50.394 --> 00:04:54.795\nWe're going to add a flag called -y, okay?\n\n77\n00:04:54.795 --> 00:04:57.282\nWe're just making sure.\n\n78\n00:04:57.282 --> 00:05:00.766\nNow, I want to RUN and\n\n79\n00:05:00.766 --> 00:05:05.617\nsay apt-get install nginx.\n\n80\n00:05:05.617 --> 00:05:09.319\n&gt;&gt; All right, now do we need to\nadd that -y, to this one too?\n\n81\n00:05:09.319 --> 00:05:11.580\n&gt;&gt; Well, that's a great question Ronnie.\n\n82\n00:05:11.580 --> 00:05:12.460\nLet's live on the edge.\n\n83\n00:05:12.460 --> 00:05:13.568\n&gt;&gt; Okay.\n&gt;&gt; Let's live a little dangerously.\n\n84\n00:05:13.568 --> 00:05:16.282\n&gt;&gt; [LAUGH]\n&gt;&gt; See what happens, And\n\n85\n00:05:16.282 --> 00:05:19.680\ndon't leave that one in there.\n\n86\n00:05:19.680 --> 00:05:24.256\nNow this is actually whatever is in\nthe package manager for the Ubuntu.\n\n87\n00:05:24.256 --> 00:05:27.299\nThere's no guaranty that is\nthe latest version of engine X so\n\n88\n00:05:27.299 --> 00:05:28.380\ndo keep that in mind.\n\n89\n00:05:28.380 --> 00:05:32.050\nThis is just for demonstration,\nkind of wrapping our head around.\n\n90\n00:05:32.050 --> 00:05:37.004\nSo let's rebuild image and okay.\n\n91\n00:05:37.004 --> 00:05:44.313\nNo, the command /bin/sh -c apt-get install\nnginx returned with a non-zero code.\n\n92\n00:05:44.313 --> 00:05:46.274\n&gt;&gt; [LAUGH]\n&gt;&gt; Well, Ronnie,\n\n93\n00:05:46.274 --> 00:05:50.390\nit looks like your gut feeling\nmight have been right.\n\n94\n00:05:50.390 --> 00:05:56.390\nAnd in fact, this is a number one,\nwhoops, I forgot to put the -y.\n\n95\n00:05:56.390 --> 00:06:00.010\nWhen you're installing,\nespecially with package managers in Linux,\n\n96\n00:06:00.010 --> 00:06:05.160\nthey typically want you to confirm yes or\nno because it allows you to read\n\n97\n00:06:05.160 --> 00:06:08.020\nthese are the following things\nthat you're going to install.\n\n98\n00:06:08.020 --> 00:06:10.975\nAnd maybe you don't wanna, you're like\n\n99\n00:06:10.975 --> 00:06:15.516\nI know that libx11-data well I know\nthat's got a security vulnerability or\n\n100\n00:06:15.516 --> 00:06:19.128\nsomething, that doesn't fit my use case,\nso you can say no.\n\n101\n00:06:19.128 --> 00:06:22.129\nBut when you're building a Docker\nimage you need a default value.\n\n102\n00:06:22.129 --> 00:06:23.825\nThere's no way around it.\n\n103\n00:06:23.825 --> 00:06:28.025\nI have to say yes if the image\nbuilding process is to continue.\n\n104\n00:06:28.025 --> 00:06:29.858\nSo how do we fix that?\n\n105\n00:06:29.858 --> 00:06:34.969\nWell as Ronnie has already found out,\nhe had that gut instinct.\n\n106\n00:06:34.969 --> 00:06:39.610\nHe was in my head again it's kinda\nfreaking me out we need that -y.\n\n107\n00:06:39.610 --> 00:06:43.800\nAnd all that says is, say yes\nwhenever the prompt comes up, okay?\n\n108\n00:06:43.800 --> 00:06:46.930\nSo this is part of Ubuntu's\npackage management system.\n\n109\n00:06:46.930 --> 00:06:49.942\nNot necessarily something\nto do with Docker.\n\n110\n00:06:49.942 --> 00:06:52.597\n&gt;&gt; So, as we go through this\npackage manager system,\n\n111\n00:06:52.597 --> 00:06:56.671\nif we run into this where we're trying to\nmake sure that we get the updates, and\n\n112\n00:06:56.671 --> 00:06:59.387\nwe forget that -y,\nthat can be very important, and\n\n113\n00:06:59.387 --> 00:07:03.035\nit just freezes the image building\nthat we're trying to do, right?\n\n114\n00:07:03.035 --> 00:07:04.110\n&gt;&gt; [CROSSTALK]\n&gt;&gt; It fails, and\n\n115\n00:07:04.110 --> 00:07:06.925\nnothing is built beyond that,\nso we're gonna fix that.\n\n116\n00:07:06.925 --> 00:07:10.930\nBut before we move on,\nI'm gonna kinda go up here.\n\n117\n00:07:10.930 --> 00:07:15.610\nAnd notice that I use cache\nfrom the update, right?\n\n118\n00:07:15.610 --> 00:07:19.260\nApp get update-y, okay?\n\n119\n00:07:19.260 --> 00:07:20.782\nAnd then we started this.\n\n120\n00:07:20.782 --> 00:07:25.407\nIt actually builds pretty quickly because\nwe've already built an intermediate\n\n121\n00:07:25.407 --> 00:07:28.264\ncontainer/image, so\nit builds the container,\n\n122\n00:07:28.264 --> 00:07:33.630\ndoes its thing commits it as an image at\nthis step, so it uses the built cache.\n\n123\n00:07:33.630 --> 00:07:37.690\nAnd then it continues on from there\nbased on the changes that I have made.\n\n124\n00:07:37.690 --> 00:07:41.023\nNow hopefully, adding that -y fixes it.\n\n125\n00:07:41.023 --> 00:07:44.390\nLet's find out and\nwe're installing nginx, yep.\n\n126\n00:07:44.390 --> 00:07:47.983\nAnd again,\nthese installs using package management.\n\n127\n00:07:47.983 --> 00:07:52.215\nThey are sometimes not\nthe most expeditious things so\n\n128\n00:07:52.215 --> 00:07:54.951\nuse that build cache when you can.\n\n129\n00:07:54.951 --> 00:07:59.134\nUse the build cache because otherwise\nyou're gonna have to do the update and\n\n130\n00:07:59.134 --> 00:08:02.467\nthe install process every time\nyou rebuild this image Well,\n\n131\n00:08:02.467 --> 00:08:04.507\nwhen you've made a change, right?\n\n132\n00:08:04.507 --> 00:08:07.916\nSo if I'm like, well,\nI installed nginx but\n\n133\n00:08:07.916 --> 00:08:12.602\nI actually wanna install nginx and\nFastCGI plugin for nginx.\n\n134\n00:08:12.602 --> 00:08:16.547\nWell, if you put it on that same line,\nthe build cache goes away cuz\n\n135\n00:08:16.547 --> 00:08:20.432\nyou made a change at that point,\nand it will reinstall all those.\n\n136\n00:08:20.432 --> 00:08:23.310\nSo make that available to you.\n\n137\n00:08:23.310 --> 00:08:28.155\nUse it accordingly and\neverything will go a lot quicker.\n\n138\n00:08:28.155 --> 00:08:32.035\nSo now we have nginx in here.\n\n139\n00:08:32.035 --> 00:08:34.455\nSo let's clear and look our docker images.\n\n140\n00:08:34.455 --> 00:08:36.360\nAnd here's base image.\n\n141\n00:08:36.360 --> 00:08:40.942\nAnd if I come to the top, it's kind\nof sorted by when it was created and\n\n142\n00:08:40.942 --> 00:08:43.190\nI have a lot of images here.\n\n143\n00:08:43.190 --> 00:08:45.393\nI've been doing a little playing, Ronnie.\n\n144\n00:08:45.393 --> 00:08:47.181\nSo I have base image latest, and\n\n145\n00:08:47.181 --> 00:08:51.498\nnotice this image ID is different than\nbase image one and base image awesome.\n\n146\n00:08:51.498 --> 00:08:54.040\nAnd that's because, well,\nwe made changes to our docker file.\n\n147\n00:08:55.650 --> 00:09:00.860\nSo I had nginx, it's installed,\nwe're good to go, right?\n\n148\n00:09:00.860 --> 00:09:02.774\nWell, actually there's one final thing.\n\n149\n00:09:02.774 --> 00:09:06.777\nI know I'm making a web server,\na web server has to listen on a port.\n\n150\n00:09:06.777 --> 00:09:10.373\nAnd in this case,\nnginx default is port 80, so\n\n151\n00:09:10.373 --> 00:09:15.570\nwe need to tell the container that\nwe're going to listen on that port.\n\n152\n00:09:15.570 --> 00:09:21.400\nSo I'm going to say expose port 80 and\n\n153\n00:09:21.400 --> 00:09:26.260\nthis command, well, I don't think\nnginx is going to, I don't know.\n\n154\n00:09:26.260 --> 00:09:28.120\nWell, let's just see what happens,\nyou never know.\n\n155\n00:09:28.120 --> 00:09:29.955\nIt might work.\n\n156\n00:09:29.955 --> 00:09:31.153\nStranger things have happened, Ronnie.\n\n157\n00:09:31.153 --> 00:09:32.636\n&gt;&gt; [LAUGH]\n&gt;&gt; Stranger things.\n\n158\n00:09:32.636 --> 00:09:36.907\nSo if I run, and\nnotice because I have that caching,\n\n159\n00:09:36.907 --> 00:09:39.535\nthat was a really fast rebuild.\n\n160\n00:09:39.535 --> 00:09:40.202\n&gt;&gt; Right.\n\n161\n00:09:40.202 --> 00:09:43.742\n&gt;&gt; So, let's go ahead and\nsay docker run- d,\n\n162\n00:09:43.742 --> 00:09:47.050\ncuz I want this to run in the background.\n\n163\n00:09:47.050 --> 00:09:50.864\nI'm going to port map it\nto port 80 on my computer.\n\n164\n00:09:50.864 --> 00:09:54.719\nNow just a quick aside if you're\nrunning a web application and\n\n165\n00:09:54.719 --> 00:09:59.628\nport 80 is typically special,\nyou may have something running on port 80.\n\n166\n00:09:59.628 --> 00:10:03.781\nYou can always map it to a different port\nlike 8080 or something of that nature.\n\n167\n00:10:03.781 --> 00:10:07.930\nAnd then we're gonna say base-image and\nI'm gonna leave off the tag,\n\n168\n00:10:07.930 --> 00:10:09.948\nbecause that will use the latest.\n\n169\n00:10:09.948 --> 00:10:17.171\nAnd it ran, so if I go to docker ps,\nwell, that's no good.\n\n170\n00:10:17.171 --> 00:10:21.455\nThat actually, well, it exited.\n\n171\n00:10:21.455 --> 00:10:22.420\n&gt;&gt; [LAUGH]\n&gt;&gt; Why did it exit?\n\n172\n00:10:22.420 --> 00:10:27.410\nWell, when we were building docker images,\nfor something to continue running,\n\n173\n00:10:27.410 --> 00:10:31.810\nif you want it to run as a daemon,\nthere has to be a foreground process.\n\n174\n00:10:31.810 --> 00:10:35.420\nBy default nginx, well, it's not started.\n\n175\n00:10:35.420 --> 00:10:38.010\nSo we should probably fix that.\n\n176\n00:10:38.010 --> 00:10:40.050\nSo let's go into our Dockerfile here.\n\n177\n00:10:42.185 --> 00:10:46.479\nAnd this command, well, I actually want\n\n178\n00:10:46.479 --> 00:10:51.397\nthat to be nginx, so\nI'm going to start nginx.\n\n179\n00:10:51.397 --> 00:10:57.532\nOkay, now I can rebuild and\nI bet it'll work.\n\n180\n00:10:57.532 --> 00:11:04.019\nAnd run, and yeah, here we, no.\n\n181\n00:11:04.019 --> 00:11:05.380\n&gt;&gt; Hm.\n\n182\n00:11:05.380 --> 00:11:08.040\n&gt;&gt; Well,\nhere's one of those gotchas, Ronnie.\n\n183\n00:11:08.040 --> 00:11:08.810\n&gt;&gt; Right.\n\n184\n00:11:08.810 --> 00:11:11.800\n&gt;&gt; nginx by default runs\nas a daemon itself.\n\n185\n00:11:11.800 --> 00:11:14.290\nIt is a background process on servers.\n\n186\n00:11:14.290 --> 00:11:17.490\nSo it'll be running, but\nit's not a foreground process that\n\n187\n00:11:17.490 --> 00:11:20.440\ndocker requires for\na container to continue running.\n\n188\n00:11:20.440 --> 00:11:25.530\nSo we need to add kind of a flag\nto actually get that up and\n\n189\n00:11:25.530 --> 00:11:27.860\nrunning, and a foreground process.\n\n190\n00:11:27.860 --> 00:11:32.790\nSo if I go back into my Dockerfile,\nbut I wanna reiterate something.\n\n191\n00:11:32.790 --> 00:11:35.980\nEven though we're having these\nissues because this is Docker,\n\n192\n00:11:35.980 --> 00:11:40.660\nI'm not spending three, four, six,\neight minutes between rebuilds.\n\n193\n00:11:40.660 --> 00:11:45.090\nThis is a very fast iteration and\nthis is part of the power of Docker.\n\n194\n00:11:45.090 --> 00:11:50.227\nSo I'm gonna come back in here and, well,\n\n195\n00:11:50.227 --> 00:11:57.820\nnginx, has this flag that says -g and\nyou can set a daemon off.\n\n196\n00:11:57.820 --> 00:12:01.380\nSo -g is going to tell it,\nhow's this running?\n\n197\n00:12:01.380 --> 00:12:05.339\nAnd then daemon off is you're\nduring the Daemon System off,\n\n198\n00:12:05.339 --> 00:12:09.616\nso when you start nginx now,\nit'll fun as a foreground process.\n\n199\n00:12:09.616 --> 00:12:14.445\nAnd here we go, not running.\n\n200\n00:12:14.445 --> 00:12:18.863\nRebuild, it was fast,\nbecause we're utilizing previous cache.\n\n201\n00:12:18.863 --> 00:12:25.756\nAnd I'm going to run again, and\ndocker ps, and it now is running.\n\n202\n00:12:25.756 --> 00:12:27.603\nHere's the test, though.\n\n203\n00:12:27.603 --> 00:12:31.635\nIs it serving up its default landing page?\n\n204\n00:12:31.635 --> 00:12:37.890\nSo if we come here and\ngo to local host, And there is nginx.\n\n205\n00:12:37.890 --> 00:12:41.470\nSo we have effectively built\na very basic nginx container.\n\n206\n00:12:42.510 --> 00:12:45.920\nThere's a couple of other key\npoints that I want to make, though,\n\n207\n00:12:45.920 --> 00:12:49.130\nand number one, this works, right?\n\n208\n00:12:49.130 --> 00:12:49.780\nThat's great.\n\n209\n00:12:49.780 --> 00:12:51.580\nThis is a great starting process.\n\n210\n00:12:51.580 --> 00:12:54.453\nIf you ever get to this,\nyou should celebrate.\n\n211\n00:12:54.453 --> 00:12:55.945\nYeah, I did it.\n\n212\n00:12:55.945 --> 00:13:00.337\nBut let's go ahead and\nkill thirsty_spence.\n\n213\n00:13:00.337 --> 00:13:03.300\n&gt;&gt; [LAUGH]\n&gt;&gt; These are funny names.\n\n214\n00:13:03.300 --> 00:13:08.479\nBut go back into our docker file to\nhighlight a couple other things.\n\n215\n00:13:08.479 --> 00:13:13.064\nThis cmd, that's the command that's\nrun as the container starts.\n\n216\n00:13:13.064 --> 00:13:16.460\nThere's actually another one,\ncalled ENTRYPOINT.\n\n217\n00:13:16.460 --> 00:13:19.940\nAnd that's the command that\nruns when the container starts.\n\n218\n00:13:19.940 --> 00:13:22.400\nAnd I've seen a couple\nof different things.\n\n219\n00:13:22.400 --> 00:13:24.120\nPeople will use ENTRYPOINT.\n\n220\n00:13:24.120 --> 00:13:25.630\nPeople will use command.\n\n221\n00:13:25.630 --> 00:13:30.730\nBut let's go look at the Docker reference\nfor these Docker file references and\n\n222\n00:13:30.730 --> 00:13:33.209\nsee what the difference is,\ncuz you'll see both of these.\n\n223\n00:13:34.830 --> 00:13:37.980\nSo I'm gonna say Docker file reference.\n\n224\n00:13:39.120 --> 00:13:40.230\nAnd there's my reference.\n\n225\n00:13:40.230 --> 00:13:43.190\nAnd I need quite that much.\n\n226\n00:13:43.190 --> 00:13:45.330\nThat was a little much.\n\n227\n00:13:45.330 --> 00:13:48.680\nBut I'm gonna go to CMD and take a look.\n\n228\n00:13:48.680 --> 00:13:50.700\nInstructions has three forms.\n\n229\n00:13:50.700 --> 00:13:51.740\nThis last form,\n\n230\n00:13:51.740 --> 00:13:55.890\nthis show form, I've actually run into\nissues with that being consistent.\n\n231\n00:13:55.890 --> 00:13:58.270\nThis is what you would\ntype on the command line.\n\n232\n00:13:58.270 --> 00:14:03.284\nI go with the array form.\n\n233\n00:14:03.284 --> 00:14:08.061\nThis is the preferred form,\nthere you go, okay?\n\n234\n00:14:08.061 --> 00:14:13.927\nNow you have param one, param two as\ndefault parameters to ENTRYPOINT.\n\n235\n00:14:13.927 --> 00:14:17.227\nThe main purpose of a CMD\nis to provide defaults for\n\n236\n00:14:17.227 --> 00:14:20.614\nexecuting the container,\nso those are defaults.\n\n237\n00:14:20.614 --> 00:14:25.130\nThe CMD is used to provide defaults for\nthe ENTRYPOINT instruction.\n\n238\n00:14:25.130 --> 00:14:29.760\nBoth CMD and ENTRYPOINT instruction\nshould be specified in the JSON array.\n\n239\n00:14:29.760 --> 00:14:35.110\nBoth Entrypoint and\nCMD should be specified.\n\n240\n00:14:36.160 --> 00:14:37.700\nOkay, well, what's ENTRYPOINT?\n\n241\n00:14:37.700 --> 00:14:38.900\nIf I go to Entrypoint.\n\n242\n00:14:40.100 --> 00:14:44.330\nEntrypoint looks to have\nexactly the same format.\n\n243\n00:14:45.910 --> 00:14:46.769\nHow is this different?\n\n244\n00:14:47.910 --> 00:14:51.340\nOkay, exec from an ENTRYPOINT example.\n\n245\n00:14:52.570 --> 00:14:56.010\nUnderstand how CMD and\nenter point interact.\n\n246\n00:14:56.010 --> 00:15:00.110\nAnd this was an issue early on in Docker,\nlike you would see one and not the other,\n\n247\n00:15:00.110 --> 00:15:01.420\nor both.\n\n248\n00:15:01.420 --> 00:15:04.019\nAnd there was some inconsistencies.\n\n249\n00:15:05.020 --> 00:15:06.200\nYou should have at least one but\n\n250\n00:15:06.200 --> 00:15:09.275\nwe read that the prefered is\nyou should talk about both.\n\n251\n00:15:09.275 --> 00:15:12.620\nENTRYPOINT should be defined when using\nthe container as an executable so\n\n252\n00:15:12.620 --> 00:15:14.190\nif you're running a web server and\nyou want it to run.\n\n253\n00:15:14.190 --> 00:15:17.425\nCmd should be used as a way\ndefining default argument for\n\n254\n00:15:17.425 --> 00:15:21.150\nENTRYPOINT or for\nexecuting an ad hoc command.\n\n255\n00:15:21.150 --> 00:15:26.464\nCmd will be over written when running\nthe container with alternative arguments.\n\n256\n00:15:26.464 --> 00:15:29.331\nNow we haven't seen running\na container with arguments.\n\n257\n00:15:29.331 --> 00:15:35.980\nBut if I put -g daemon on, that would\nactually override those arguments, okay?\n\n258\n00:15:37.510 --> 00:15:45.160\nSo, let's actually refactor this a little\nbit and see how we should be doing this.\n\n259\n00:15:45.160 --> 00:15:50.364\nSo we need an entry point and\n\n260\n00:15:50.364 --> 00:15:54.445\nthe nginx goes here.\n\n261\n00:15:54.445 --> 00:16:01.476\nAnd then the arguments for the ENTRYPOINT\ncommand should go below it, right?\n\n262\n00:16:01.476 --> 00:16:04.314\nSo what this will do is\nrun nginx regardless.\n\n263\n00:16:04.314 --> 00:16:09.680\nAnd then CMD will be flags\nsent to [nginx]: as arguments.\n\n264\n00:16:09.680 --> 00:16:14.020\nSo I can turn the daemon on and off,\ndepending on whether I leave it as\n\n265\n00:16:14.020 --> 00:16:19.450\nthe default, which is off, or\nI can pass arguments and turn it on.\n\n266\n00:16:19.450 --> 00:16:23.540\nSo let's rebuild this container,\nOr image, excuse me.\n\n267\n00:16:25.180 --> 00:16:28.580\nAnd actually, we need to kill that.\n\n268\n00:16:28.580 --> 00:16:30.550\nI accidentally re-ran it using Shirley.\n\n269\n00:16:30.550 --> 00:16:37.340\nI kind of just want to do a bunch\nof them now and see what they are.\n\n270\n00:16:37.340 --> 00:16:44.420\nSo doctorbuild-tbaseimage.\n\n271\n00:16:44.420 --> 00:16:47.230\nAnd now, it's still fast because\nthose are small changes.\n\n272\n00:16:48.290 --> 00:16:50.166\nAnd well, let's see what happens.\n\n273\n00:16:50.166 --> 00:16:57.657\nDocker run -p 80:80 baseimage,\n\n274\n00:16:57.657 --> 00:17:02.425\n[nginx]: not found.\n\n275\n00:17:02.425 --> 00:17:03.690\nWell, that's weird.\n\n276\n00:17:06.340 --> 00:17:07.120\nWhat do you think, Ronnie?\n\n277\n00:17:07.120 --> 00:17:08.270\nWhat do you think happened?\n\n278\n00:17:08.270 --> 00:17:10.220\nIs it just broke?\n\n279\n00:17:10.220 --> 00:17:15.490\n&gt;&gt; We might be missing something from\nour DockerFile that we did not call on.\n\n280\n00:17:15.490 --> 00:17:17.900\n&gt;&gt; You're on the right track, Ronnie.\n\n281\n00:17:17.900 --> 00:17:19.590\nYou're on the right track.\n\n282\n00:17:19.590 --> 00:17:22.394\n&gt;&gt; Okay.\n&gt;&gt; So if I look at this, and\n\n283\n00:17:22.394 --> 00:17:26.580\nas a developer, I've done this.\n\n284\n00:17:26.580 --> 00:17:30.411\nI use dynamic languages where single\nquotes and double quotes don't matter.\n\n285\n00:17:30.411 --> 00:17:33.150\nWell, guess what,\nin Docker files, they do.\n\n286\n00:17:33.150 --> 00:17:35.820\nThat's one of those gotchas.\n\n287\n00:17:35.820 --> 00:17:38.170\nI just feel like I'm saying\nhere's a bunch of these gotchas.\n\n288\n00:17:38.170 --> 00:17:41.730\nBut these are important because this\nis a an area of frustration for\n\n289\n00:17:41.730 --> 00:17:43.550\npeople when they're going after this.\n\n290\n00:17:43.550 --> 00:17:47.300\nSo double quotes in Docker files for\ncommands, all right?\n\n291\n00:17:47.300 --> 00:17:49.440\nNow notice I'm not putting\nthese in double quotes up here,\n\n292\n00:17:49.440 --> 00:17:51.910\nand that's because they're\nnot in the exec form.\n\n293\n00:17:53.450 --> 00:17:57.430\nSo let's rebuild the container or\nimage, excuse me.\n\n294\n00:17:58.510 --> 00:17:59.965\nAnd run the container.\n\n295\n00:18:02.373 --> 00:18:08.985\nWait for it, wait for it.\n\n296\n00:18:08.985 --> 00:18:11.141\nWait for it.\n\n297\n00:18:11.141 --> 00:18:12.780\nDid I mistype something?\n\n298\n00:18:14.200 --> 00:18:14.880\nLet's see here.\n\n299\n00:18:16.570 --> 00:18:17.830\nIt still runs.\n\n300\n00:18:20.040 --> 00:18:21.736\nSo let's kill this, and all right,\n\n301\n00:18:21.736 --> 00:18:24.266\nwe're gonna have to do a little\nbit of debugging here.\n\n302\n00:18:24.266 --> 00:18:27.144\nYou know what I forgot to do?\n\n303\n00:18:27.144 --> 00:18:29.382\n&gt;&gt; No I don't.\n\n304\n00:18:29.382 --> 00:18:32.246\n[LAUGH]\n&gt;&gt; I forgot to put a -d here.\n\n305\n00:18:32.246 --> 00:18:33.455\nIt's not a daemon process.\n\n306\n00:18:33.455 --> 00:18:36.306\n&gt;&gt; [CROSSTALK]\n&gt;&gt; So boom.\n\n307\n00:18:36.306 --> 00:18:38.970\nAnd then there we go vibrant hopper.\n\n308\n00:18:39.980 --> 00:18:42.800\nAnd it actually still works,\nit works as it did before.\n\n309\n00:18:42.800 --> 00:18:45.930\nSo don't forget that -d,\nwe all still mess up from time to time.\n\n310\n00:18:47.991 --> 00:18:52.600\nSo let's go ahead and\nkill this vibrant_hopper.\n\n311\n00:18:52.600 --> 00:18:56.140\nAnd then last thing to remember\nwhen writing docker files.\n\n312\n00:18:57.580 --> 00:19:02.920\nSo if I come to vim Docker file, Notice\nhow fast those build processes have been?\n\n313\n00:19:04.000 --> 00:19:07.120\nWell, let's say that I wanna change this.\n\n314\n00:19:07.120 --> 00:19:12.818\nAnd I'm just gonna say echo, You gotta\nspell echo right, that's important.\n\n315\n00:19:15.128 --> 00:19:17.200\nDocker is awesome.\n\n316\n00:19:18.250 --> 00:19:22.890\nNow, I can use single quotes here because\nthis is going to be run in the shell.\n\n317\n00:19:22.890 --> 00:19:25.040\nThis is just gonna take\nthis entire thing and\n\n318\n00:19:25.040 --> 00:19:28.790\nrun it against a shell prompt or\na shell process.\n\n319\n00:19:28.790 --> 00:19:36.209\nAnd I'm gonna put this in /var/html/,\nor actually /www/html/index.html.\n\n320\n00:19:37.580 --> 00:19:41.234\nAnd that's because that default file that\nwe've been seeing served, is that file.\n\n321\n00:19:41.234 --> 00:19:45.690\nSo we're gonna overwrite it\nwith our own little message.\n\n322\n00:19:45.690 --> 00:19:47.110\nSo let's rebuild here.\n\n323\n00:19:48.430 --> 00:19:52.370\nAnd notice, it stopped just for\na moment, right?\n\n324\n00:19:53.890 --> 00:19:56.510\nThat's because I made a change prior to,\nand\n\n325\n00:19:56.510 --> 00:20:01.640\nit had to rebuild all the containers after\nthat because the changes had come earlier.\n\n326\n00:20:01.640 --> 00:20:07.024\nSo let's do this, and\nlet's give it a name this time,\n\n327\n00:20:07.024 --> 00:20:11.390\nthat way I don't have to look it up.\n\n328\n00:20:11.390 --> 00:20:15.040\nAnd then if we refresh, and there we go.\n\n329\n00:20:15.040 --> 00:20:19.850\nWe now have a custom\napplication in a container.\n\n330\n00:20:19.850 --> 00:20:22.970\n&gt;&gt; Now, Justin, we go back to\nthe Docker file for a moment.\n\n331\n00:20:22.970 --> 00:20:26.849\nI noticed that you kinda had some\nrepetition in there that we wanna take\n\n332\n00:20:26.849 --> 00:20:28.767\na look what that run command here.\n\n333\n00:20:28.767 --> 00:20:33.110\nA lot of times, I've also seen where\npeople have been modifying files.\n\n334\n00:20:33.110 --> 00:20:35.580\nAnd when you have those\nthree Run commands,\n\n335\n00:20:35.580 --> 00:20:38.100\nis there a way we can actually\nput all that on one line?\n\n336\n00:20:38.100 --> 00:20:42.170\n&gt;&gt; So Ronnie, you actually can\nput all of those on one line.\n\n337\n00:20:42.170 --> 00:20:48.050\nAnd there's some conventions for\nputting these all together.\n\n338\n00:20:49.250 --> 00:20:52.080\nSo let's actually do this.\n\n339\n00:20:52.080 --> 00:20:54.730\nSo run this command, then this command.\n\n340\n00:20:54.730 --> 00:21:01.060\nOr you can say double-ampersand, so only\nif the update runs do you want to install.\n\n341\n00:21:01.060 --> 00:21:03.120\nAnd let's see how that\nchanges the build process.\n\n342\n00:21:06.025 --> 00:21:09.962\nAnd here's baseimage ., and\n\n343\n00:21:09.962 --> 00:21:15.090\nnow we're going to rerun update.\n\n344\n00:21:15.090 --> 00:21:18.776\nBecause these are both\non the same run block,\n\n345\n00:21:18.776 --> 00:21:24.693\nevery time I want to change an install,\nso if I wanted to install nginx and\n\n346\n00:21:24.693 --> 00:21:28.574\nfast CGI, it would run update and\nthe install.\n\n347\n00:21:28.574 --> 00:21:31.099\nSo use your cache to your advantage.\n\n348\n00:21:31.099 --> 00:21:36.096\nMy recommendation, and Docker does\nhave some recommendations also,\n\n349\n00:21:36.096 --> 00:21:40.270\nis to keep them as separate run\nblocks as you build the file.\n\n350\n00:21:41.550 --> 00:21:46.100\nThat way you can iterate quickly and you\ndon't have to wait for what's going on my\n\n351\n00:21:46.100 --> 00:21:50.080\nscreen right now to happen every\ntime you make a change, right?\n\n352\n00:21:50.080 --> 00:21:52.970\nSo if I was gonna install nginx and\nFastCGI, or\n\n353\n00:21:52.970 --> 00:21:57.190\nan nginx plugin, whatever it may be I\nwould install nginx, and if that's already\n\n354\n00:21:57.190 --> 00:22:02.100\nbuilt into the container, I would come to\nthe next line and install the next one.\n\n355\n00:22:02.100 --> 00:22:04.210\nYes, is it a bunch of repetition?\n\n356\n00:22:04.210 --> 00:22:08.300\nYeah, but I get to utilize the fact\nthat I have intermediate containers\n\n357\n00:22:09.300 --> 00:22:13.050\nthat I can build from, and\nit makes my process faster.\n\n358\n00:22:13.050 --> 00:22:16.907\nOnce you've done that, though, you may\nwant to come back and condense it so\n\n359\n00:22:16.907 --> 00:22:18.612\nit's not quite as repetitious.\n\n360\n00:22:18.612 --> 00:22:23.180\nBecause then, that will become the base\ncontainer for future iterations.\n\n361\n00:22:23.180 --> 00:22:24.920\nSo it's kind of a give and take.\n\n362\n00:22:24.920 --> 00:22:27.200\nBut that's a great point, Ronnie.\n\n363\n00:22:27.200 --> 00:22:28.090\n&gt;&gt; All right, Justin.\n\n364\n00:22:28.090 --> 00:22:32.839\nWell, that's a lot of things for\nus to think about when we take the base\n\n365\n00:22:32.839 --> 00:22:37.768\nknowledge that we know of how to begin\nto build an image inside of Docker.\n\n366\n00:22:37.768 --> 00:22:40.597\nBut then take it a little bit further\nto now where it's something useful\n\n367\n00:22:40.597 --> 00:22:41.580\nthat we need.\n\n368\n00:22:41.580 --> 00:22:42.590\nSo make sure you go back and\n\n369\n00:22:42.590 --> 00:22:45.880\nreview some of the syntax that\nyou've seen here on this show.\n\n370\n00:22:45.880 --> 00:22:49.610\nThat's gonna be really helpful, especially\nif you need to get things up and running.\n\n371\n00:22:49.610 --> 00:22:52.055\nThis one was a little bit tricky\nas I tried to follow along.\n\n372\n00:22:52.055 --> 00:22:56.857\nThe very fact that nginx, by default, is a\ndaemon that it can run in the background.\n\n373\n00:22:56.857 --> 00:23:00.210\nBut for it to actually run,\nwe need it to not be one.\n\n374\n00:23:00.210 --> 00:23:03.420\nAnd then at the end you still actually\nshowed us how it's running in\n\n375\n00:23:03.420 --> 00:23:04.320\nthe background and\n\n376\n00:23:04.320 --> 00:23:07.390\nthen changing default behavior of\nit running in the foreground again.\n\n377\n00:23:07.390 --> 00:23:09.940\nSo I'm gonna put myself into\na loop if I don't stop.\n\n378\n00:23:09.940 --> 00:23:12.060\nBut overall, though,\nyou did see some of that.\n\n379\n00:23:12.060 --> 00:23:16.040\nAnd those are issues that you will end\nup finding when you're first beginning.\n\n380\n00:23:16.040 --> 00:23:18.690\nIt doesn't mean that you should be afraid\nof it, it means just take a little bit\n\n381\n00:23:18.690 --> 00:23:23.060\nmore time, learn about how these docker\nfiles are really working out and\n\n382\n00:23:23.060 --> 00:23:26.290\nreally working together with us and\nin helping us out here, too.\n\n383\n00:23:26.290 --> 00:23:29.860\nWhen you're at the beginning, don't try\nand do those shortcuts likes what I was\n\n384\n00:23:29.860 --> 00:23:31.880\nmentioning, trying to\ncondense everything together.\n\n385\n00:23:31.880 --> 00:23:35.370\nYou notice that even though it's a little\nbit more efficient in terms of what I'm\n\n386\n00:23:35.370 --> 00:23:39.780\nseeing, in the end result, though, it made\nit slower process in terms of the build.\n\n387\n00:23:39.780 --> 00:23:42.540\nAnd a lot of times in a production\nenvironment that's not what you need.\n\n388\n00:23:42.540 --> 00:23:45.110\nYou need the quick,\nyou need the ability to kind of\n\n389\n00:23:45.110 --> 00:23:48.030\nmake sure that everything is running\nseparately, and then that way you can kind\n\n390\n00:23:48.030 --> 00:23:51.680\nof debug that one line if you need to and\nget everything back and running.\n\n391\n00:23:51.680 --> 00:23:52.928\nThank you again, Justin, for\n\n392\n00:23:52.928 --> 00:23:55.530\nhelping us to understand the idea\nof building our Docker image.\n\n393\n00:23:55.530 --> 00:23:59.880\nAnd also thank you for\nwatching our show as well.\n\n394\n00:23:59.880 --> 00:24:02.100\nThis is a great place for us to sign off.\n\n395\n00:24:02.100 --> 00:24:05.450\nFor ITProTV, I have been your host,\nRonnie Wong.\n\n396\n00:24:05.450 --> 00:24:06.480\n&gt;&gt; And I'm Justin Dennison.\n\n397\n00:24:06.480 --> 00:24:09.170\n&gt;&gt; Stay tuned right here for\nmore introduction to Docker shows.\n\n398\n00:24:09.170 --> 00:24:16.078\n[MUSIC]\n\n399\n00:24:16.078 --> 00:24:17.960\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "210443367"
        },
        {
          "description": "In this episode, Ronnie and Justin show how to make the image files available to others easily using the docker hub.  Justin demonstrates connecting to the docker how to store your custom images into your own repository there.  They remind us that images stored in the docker hub are normally made public.",
          "length": "937",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-storing_our_custom_docker_images-032417.00_16_19_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-storing_our_custom_docker_images-032417.00_16_19_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-storing_our_custom_docker_images-032417.00_16_19_18.Still001-sm.jpg",
          "title": "Storing Our Custom Docker Images",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:02.706\nWelcome to ITProTV,\nI'm your host Don Pezet-\n\n2\n00:00:02.706 --> 00:00:06.191\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.191 --> 00:00:07.895\n[MUSIC]\n\n4\n00:00:07.895 --> 00:00:11.986\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.986 --> 00:00:15.180\n&gt;&gt; Welcome to another great\nepisode right here on ITProTV.\n\n6\n00:00:15.180 --> 00:00:19.220\nI'm your host Ronnie Wong, and today\nyou're watching introduction to Docker.\n\n7\n00:00:19.220 --> 00:00:22.420\nWe're specifically gonna be diving into\nwhere we're gonna be able to store our\n\n8\n00:00:22.420 --> 00:00:27.184\nimage files inside of Docker as well and\nhere to help us out is gonna be Mr.\n\n9\n00:00:27.184 --> 00:00:28.010\nJustin Denison.\n\n10\n00:00:28.010 --> 00:00:29.020\nJustin, how are we doing?\n\n11\n00:00:29.020 --> 00:00:31.120\n&gt;&gt; I am doing well and\nhow are you today Ronnie?\n\n12\n00:00:31.120 --> 00:00:32.330\n&gt;&gt; I am doing great,\n\n13\n00:00:32.330 --> 00:00:36.610\nas we start to take a look at a lot of the\ninformation that we've been going over,\n\n14\n00:00:36.610 --> 00:00:41.420\nhas really help us out so far but, it's\nall been on our local computer Justin.\n\n15\n00:00:41.420 --> 00:00:45.700\nAnd so if I need to be able\nto take the image files,\n\n16\n00:00:45.700 --> 00:00:48.890\nsuch as custom image files that I've\ncreated, and I want to be able share\n\n17\n00:00:48.890 --> 00:00:52.350\nthem with somebody else, how I really\nget to that point where I can do that?\n\n18\n00:00:52.350 --> 00:00:57.080\n&gt;&gt; Well, that's a great, great question\nthere's actually several ways that we can.\n\n19\n00:00:57.080 --> 00:01:01.290\nWe can kind of archive these,\nkeep these for other people to use.\n\n20\n00:01:01.290 --> 00:01:04.830\nNow, there is a couple that I'm not gonna\ngo over because they're a typical use\n\n21\n00:01:04.830 --> 00:01:10.100\ncase, and that's being able to output\nthem as like tor or gzip files as well\n\n22\n00:01:10.100 --> 00:01:15.195\nas just kinda spitting them out into,\nit's like a bundled up version.\n\n23\n00:01:15.195 --> 00:01:15.980\n&gt;&gt; Mm-hm.\n&gt;&gt; And\n\n24\n00:01:15.980 --> 00:01:20.370\nwe would have to move those either through\na network file share or using USB keys.\n\n25\n00:01:20.370 --> 00:01:24.250\nIf you're anything like me, I can't\nkeep up with USB keys for anything.\n\n26\n00:01:24.250 --> 00:01:26.700\nI can't tell you,\nI'm like that's a good deal and\n\n27\n00:01:26.700 --> 00:01:30.050\nI'll buy six of them and by the end\nof the week I don't have them left.\n\n28\n00:01:30.050 --> 00:01:34.840\nBut the more common way that people\ndistribute, mess around with, and\n\n29\n00:01:34.840 --> 00:01:40.840\nkeep tabs on their images, their custom\nimages, is through the use of a registry.\n\n30\n00:01:40.840 --> 00:01:44.960\nNow, we've taken a look at a previous\nepisode at a registry, namely Docker Hub.\n\n31\n00:01:44.960 --> 00:01:47.900\nBut you can host your own\nregistry On-Premises and\n\n32\n00:01:47.900 --> 00:01:50.440\nthere are alternative registries.\n\n33\n00:01:50.440 --> 00:01:54.660\nBut, Docker Hub's free,\nas long as it's public.\n\n34\n00:01:54.660 --> 00:01:55.560\nAnd it follows.\n\n35\n00:01:56.740 --> 00:02:00.400\nI like the interface and\nwell it's pretty easy to get started.\n\n36\n00:02:00.400 --> 00:02:04.780\nThe Docker clients are kind of ready for\nyou to log in there.\n\n37\n00:02:04.780 --> 00:02:08.120\nSo let's go ahead and remind ourselves\nof the whole Docker Hub experience.\n\n38\n00:02:08.120 --> 00:02:09.750\nSo let's take a look at my screen here.\n\n39\n00:02:09.750 --> 00:02:12.740\nI'm in the terminal, but\nI'm gonna swipe over to Docker Hub.\n\n40\n00:02:12.740 --> 00:02:16.470\nAnd as it stands Well,\n\n41\n00:02:16.470 --> 00:02:21.510\nI have the ability to login, create a\nDocker ID an email address and a password.\n\n42\n00:02:21.510 --> 00:02:23.970\nNow I've already done that,\nbut it's fairly easy.\n\n43\n00:02:23.970 --> 00:02:29.910\nThe Docker ID is not your email address\nand you'll see why in just a moment.\n\n44\n00:02:29.910 --> 00:02:36.310\nBut let's sign in and\nI have a pre-filled out everything.\n\n45\n00:02:36.310 --> 00:02:38.510\nThis one's on using a password manager.\n\n46\n00:02:38.510 --> 00:02:41.620\nBut when you first come to Docker Hub,\nthis is what you will see.\n\n47\n00:02:43.200 --> 00:02:44.630\nSo there's nothing here.\n\n48\n00:02:44.630 --> 00:02:49.060\nI can create an organisation, explore\nrepositories, and create a repository.\n\n49\n00:02:49.060 --> 00:02:51.500\nNow, in previous episodes,\nI haven't been logged in.\n\n50\n00:02:51.500 --> 00:02:56.720\nAnd that's because almost everything,\nthey want things to be public.\n\n51\n00:02:56.720 --> 00:03:01.490\nKind of an open give and take,\ntake a penny, leave a penny type thing.\n\n52\n00:03:01.490 --> 00:03:03.850\nSo let's go ahead and look at,\n\n53\n00:03:03.850 --> 00:03:09.100\nI'll just go to NGINX, and\nlet me zoom in here just a wee bit.\n\n54\n00:03:09.100 --> 00:03:15.110\nIf we scroll down, notice this NGINX is\ncalled Official, and it has a single name,\n\n55\n00:03:15.110 --> 00:03:21.500\nbut all of these other ones have, well\nthey have something in front slash NGINX.\n\n56\n00:03:21.500 --> 00:03:23.840\nThat's actually the Docker ID.\n\n57\n00:03:23.840 --> 00:03:29.370\nThe Docker Hub ID for the individual\nthat pushed that image to Docker Hub.\n\n58\n00:03:29.370 --> 00:03:33.490\nWell, anything that you push to Docker Hub\nthat's free and open since you're\n\n59\n00:03:33.490 --> 00:03:38.520\nnot official, you're actually a public\none, is going to be with your Docker ID.\n\n60\n00:03:38.520 --> 00:03:42.570\nAnd what that means is we have a naming\nconvention that we're expected to follow.\n\n61\n00:03:44.770 --> 00:03:48.240\nBut this is where I\nrecommend to get started.\n\n62\n00:03:49.420 --> 00:03:53.430\nNow there are businesses on here,\nbut there are also individuals.\n\n63\n00:03:53.430 --> 00:03:57.180\nAnd I don't know right off\nhand which one's which.\n\n64\n00:03:57.180 --> 00:04:03.340\nSo if we go back to my dashboard though,\nit will tell you who you're logged in as,\n\n65\n00:04:03.340 --> 00:04:05.840\nwhere your repositories are,\nhow many stars.\n\n66\n00:04:05.840 --> 00:04:07.860\nYou can also join an organisation.\n\n67\n00:04:07.860 --> 00:04:13.110\nAnd if you're a developer, this follows\na GitHub type approach very strongly.\n\n68\n00:04:13.110 --> 00:04:15.950\nAnd I said everything had to be public,\n\n69\n00:04:15.950 --> 00:04:20.000\nwell you actually get one private\nwhat they call repository.\n\n70\n00:04:20.000 --> 00:04:23.870\nAnd that will store a great\ndeal of Docker images for you.\n\n71\n00:04:23.870 --> 00:04:27.650\n&gt;&gt; All right Justin when we start\nto take a look at this idea, how\n\n72\n00:04:29.140 --> 00:04:33.390\ndoes Docker provide for us this\nservice if we're just an individual?\n\n73\n00:04:33.390 --> 00:04:35.880\nOr is this only for\nsomebody that has a company background?\n\n74\n00:04:35.880 --> 00:04:40.460\n&gt;&gt; So this is pretty much\ntargeted toward individuals that\n\n75\n00:04:40.460 --> 00:04:43.150\nmay be part of larger organizations.\n\n76\n00:04:43.150 --> 00:04:47.170\nSo as a company, you can pay for\nadditional private repos.\n\n77\n00:04:47.170 --> 00:04:52.440\nBut the individuals will contribute\nto the organization themselves.\n\n78\n00:04:52.440 --> 00:04:56.950\nHowever, if I wanted to play around,\nas I'm hoping you do as well, and\n\n79\n00:04:56.950 --> 00:05:00.470\nI just wanted to push things to\nDocker Hub to get used to that workflow,\n\n80\n00:05:00.470 --> 00:05:03.610\nthen those are free as long as I\ndon't wanna make them private.\n\n81\n00:05:03.610 --> 00:05:04.220\n&gt;&gt; All right,\n\n82\n00:05:04.220 --> 00:05:08.810\nso how do we get connected to be able to\nuse this, what are we connecting with?\n\n83\n00:05:08.810 --> 00:05:10.000\nHow are we gonna do this?\n\n84\n00:05:10.000 --> 00:05:13.340\n&gt;&gt; So, as it stands,\nthey've been kind of destroying.\n\n85\n00:05:13.340 --> 00:05:16.840\nWe've been pushing and\npulling from the Docker client, right.\n\n86\n00:05:16.840 --> 00:05:22.660\nI pull NGINX, Ubuntu, Busy Box, whatever,\nand we haven't actually pushed,\n\n87\n00:05:22.660 --> 00:05:26.610\nI misspoke there, but\nwe haven't had to be logged in.\n\n88\n00:05:26.610 --> 00:05:32.690\nWell you just saw that I am logged in,\nhow am I going to log in from the client,\n\n89\n00:05:32.690 --> 00:05:36.080\nand then push to my account, right?\n\n90\n00:05:36.080 --> 00:05:39.500\nI don't wanna accidentally push to\nRonnie's account, I wanna push to mine.\n\n91\n00:05:39.500 --> 00:05:42.080\nI wanna keep my stuff all together.\n\n92\n00:05:42.080 --> 00:05:44.130\nSo let's take a look at that.\n\n93\n00:05:44.130 --> 00:05:49.120\nAnd well, if I type Docker,\nit will list the base level commands.\n\n94\n00:05:49.120 --> 00:05:53.560\nAnd you'll notice there's a login here,\nlogin to a Docker registry.\n\n95\n00:05:54.680 --> 00:05:56.290\nWell, let's do that.\n\n96\n00:05:56.290 --> 00:06:00.479\nIf we type docker login, and\nI'm actually gonna type --help first.\n\n97\n00:06:01.760 --> 00:06:03.770\nSo I get a dash p for a password.\n\n98\n00:06:03.770 --> 00:06:07.663\nI'm not gonna put the password there and\na -u for the user name.\n\n99\n00:06:07.663 --> 00:06:12.730\nThe username's fine, but let's see\nwhere that goes, but it doesn't show\n\n100\n00:06:12.730 --> 00:06:18.130\nyou that I have options, which are these\nflags but I also have a server.\n\n101\n00:06:18.130 --> 00:06:20.800\nBy default it's pointed at Docker Hub.\n\n102\n00:06:22.010 --> 00:06:25.270\nHowever, if I'm using\nan on-premises solution or\n\n103\n00:06:25.270 --> 00:06:29.280\nI'm using one of those alternative\nindexes, well, I want to denote that\n\n104\n00:06:29.280 --> 00:06:33.600\nserver, which may be an internal IP\naddress, or something of that nature.\n\n105\n00:06:33.600 --> 00:06:36.080\nNow, that's a little beyond\nthe scope of setting something up.\n\n106\n00:06:36.080 --> 00:06:37.530\nSo we're using Docker Hub here.\n\n107\n00:06:37.530 --> 00:06:41.863\nSo if we type docker login,\nit says you wanna log into Docker Hub and\n\n108\n00:06:41.863 --> 00:06:44.910\nyou want your username,\nI'm already logged in.\n\n109\n00:06:44.910 --> 00:06:49.035\nSo it pre-filled, and\nthen you hit Enter, and\n\n110\n00:06:49.035 --> 00:06:55.240\nI already have my password in the copy\npaste function, the clipboard.\n\n111\n00:06:55.240 --> 00:06:57.560\nThat's the word I'm looking for,\nthe clipboard.\n\n112\n00:06:57.560 --> 00:06:59.180\nAnd it will log you in.\n\n113\n00:06:59.180 --> 00:07:04.640\nAnd I am now Justin Dev Pro\nlogged in as Docker, okay.\n\n114\n00:07:05.800 --> 00:07:08.690\nThere's a couple other things\nthat we need to consider.\n\n115\n00:07:08.690 --> 00:07:12.820\nAs we've been building images as such,\n\n116\n00:07:12.820 --> 00:07:16.710\nwell like this base image,\nwe've just called it base image.\n\n117\n00:07:18.160 --> 00:07:23.890\nThat looks very similar to this NGINX,\nI could do that.\n\n118\n00:07:24.980 --> 00:07:29.310\nBut the convention,\nactually I may have misspoke there,\n\n119\n00:07:29.310 --> 00:07:30.590\nI'm not sure I can do that.\n\n120\n00:07:30.590 --> 00:07:35.083\nBut at least the convention is,\nweb devops /nginx.\n\n121\n00:07:35.083 --> 00:07:38.050\nAnd so we're gonna try both of them, but\n\n122\n00:07:38.050 --> 00:07:42.760\nwe really should put our Docker ID\nas the first part of the repository.\n\n123\n00:07:44.060 --> 00:07:47.980\nSo let's rebuild this base image,\nactually before we rebuild it,\n\n124\n00:07:47.980 --> 00:07:50.560\nlet's see how we can try to push to that.\n\n125\n00:07:50.560 --> 00:07:55.760\nSo if I have that base image latest,\nI'm just gonna say Docker push\n\n126\n00:07:55.760 --> 00:08:00.190\nbase image and\nthen I'm gonna say the latest tag.\n\n127\n00:08:00.190 --> 00:08:02.570\nIt's a good process to\nalso denote the tag,\n\n128\n00:08:02.570 --> 00:08:04.950\nif you leave that off it's\ngoing to default to latest.\n\n129\n00:08:04.950 --> 00:08:07.070\nYou need to keep that in mind.\n\n130\n00:08:07.070 --> 00:08:12.645\nAnd if you'll notice I was actually right,\nI started second guessing myself.\n\n131\n00:08:12.645 --> 00:08:14.880\n&gt;&gt; [LAUGH]\n&gt;&gt; You'll notice request access to\n\n132\n00:08:14.880 --> 00:08:20.410\nthe resources denied and that's because,\nwell it's to who's image is it?\n\n133\n00:08:20.410 --> 00:08:24.810\nIt's actually to the default\nDocker library which you or\n\n134\n00:08:24.810 --> 00:08:26.580\nI don't have access to.\n\n135\n00:08:26.580 --> 00:08:31.670\nSo we need to rebuild that image with\nan appropriate naming convention.\n\n136\n00:08:31.670 --> 00:08:33.670\nSo let's go over into that base image.\n\n137\n00:08:33.670 --> 00:08:36.800\nAnd if you haven't checked out\nthe previous videos on how to write these\n\n138\n00:08:36.800 --> 00:08:38.980\nDocker files and do this build process.\n\n139\n00:08:38.980 --> 00:08:41.380\nDefinitely go back and check those out.\n\n140\n00:08:41.380 --> 00:08:44.040\nBut I'm going to go to base and\nthere's my Docker file.\n\n141\n00:08:44.040 --> 00:08:49.666\nSo I'm gonna say docker build -t and\nnow I'm gonna use my Docker ID,\n\n142\n00:08:49.666 --> 00:08:55.050\nand I'm gonna call it base image,\nand I'm gonna build like so.\n\n143\n00:08:55.050 --> 00:08:58.790\nNow it builds very quickly because we've\nalready built these a couple of times.\n\n144\n00:08:59.940 --> 00:09:02.310\nAnd if I go to Docker images and\n\n145\n00:09:02.310 --> 00:09:07.900\ncome to very top and zoom out just\na touch so it doesn't format weird.\n\n146\n00:09:07.900 --> 00:09:10.300\nNotice I have a justindevpro/baseimage.\n\n147\n00:09:10.300 --> 00:09:17.890\nThe image IDs are exactly the same, but\nI have the appropriate naming convention.\n\n148\n00:09:17.890 --> 00:09:22.640\nI still have the tag of latest, but\nlet's see how that push process works now.\n\n149\n00:09:22.640 --> 00:09:27.710\nSo Justindevpro/baseimage and\n\n150\n00:09:27.710 --> 00:09:30.860\nI'm gonna push and it says refers to.\n\n151\n00:09:30.860 --> 00:09:36.310\nAnd notice, it looks like it's doing\nsomething very similar to the pull action.\n\n152\n00:09:36.310 --> 00:09:36.990\nRight.\n\n153\n00:09:36.990 --> 00:09:39.390\nNow I have a very large,\nwhat's called a layer here,\n\n154\n00:09:39.390 --> 00:09:42.120\nthat's my actual base or bantu layer.\n\n155\n00:09:42.120 --> 00:09:43.960\nSo this can take a while,\n\n156\n00:09:43.960 --> 00:09:46.420\ndepending on when your image is,\nhow big your images are.\n\n157\n00:09:47.570 --> 00:09:50.940\nFor this reason,\nyou should keep your images as small and\n\n158\n00:09:50.940 --> 00:09:54.340\nas singularly purposed as possible.\n\n159\n00:09:54.340 --> 00:09:57.790\nCuz otherwise this push-pull is\ngoing to become a little ridiculous.\n\n160\n00:09:57.790 --> 00:10:00.020\nAs someone who played in\nthe data science world,\n\n161\n00:10:00.020 --> 00:10:03.300\nI did see a couple images that\nwere like three gigabytes.\n\n162\n00:10:03.300 --> 00:10:05.000\nSo those took a while.\n\n163\n00:10:05.000 --> 00:10:07.580\nBut you'll notice it gives you a digest.\n\n164\n00:10:07.580 --> 00:10:08.200\nIt says, good.\n\n165\n00:10:09.210 --> 00:10:11.250\nIt appears to have worked.\n\n166\n00:10:11.250 --> 00:10:16.220\nIf I hop back over to Docker Hub and\nI go to my dashboard,\n\n167\n00:10:16.220 --> 00:10:20.540\nyou'll notice I have\na base image on my repo.\n\n168\n00:10:20.540 --> 00:10:24.825\nAnybody can pull this, I'm the only\none with current permissions to\n\n169\n00:10:24.825 --> 00:10:30.740\npush to this and that was based on\nthe naming convention of the repository.\n\n170\n00:10:30.740 --> 00:10:36.330\nSo if I go in and look,\nyou'll notice it has tags, well there's no\n\n171\n00:10:36.330 --> 00:10:41.280\nother tags there because I haven't pushed\nany other tags other than latest right?\n\n172\n00:10:42.630 --> 00:10:46.900\nAnd I can list collaborators, so\nif Ronnie wanted to come over and\n\n173\n00:10:46.900 --> 00:10:50.390\nhelp me build this image,\nwe could both work on this and\n\n174\n00:10:50.390 --> 00:10:53.472\nhe could push to my repo if I\nlisted him as a collaborator.\n\n175\n00:10:53.472 --> 00:10:56.090\nWeb-books are a little beyond.\n\n176\n00:10:56.090 --> 00:11:00.820\nThis will tell you if images are pushed\nthrough automatic build systems and\n\n177\n00:11:00.820 --> 00:11:01.950\nthen I have settings.\n\n178\n00:11:01.950 --> 00:11:06.270\nNow, settings is where you can make\nthis private if you have it pre-created,\n\n179\n00:11:06.270 --> 00:11:09.200\nif you had just a push and\nlet that automatic create.\n\n180\n00:11:09.200 --> 00:11:10.260\nYou only get one.\n\n181\n00:11:10.260 --> 00:11:14.720\nSo it would be important,\nyou can buy more but if I'm not mistaken\n\n182\n00:11:14.720 --> 00:11:18.870\nyou may have to organize that through\nan organization and you can delete.\n\n183\n00:11:20.090 --> 00:11:25.660\nIf you delete, it asks you to type in\nthe image and this is a catch all.\n\n184\n00:11:25.660 --> 00:11:27.870\nSo you don't actually delete and\nit's gone forever.\n\n185\n00:11:28.890 --> 00:11:33.880\nNow what happens though if well\nI need the latest tag but,\n\n186\n00:11:35.070 --> 00:11:39.916\nI need to also push the,\nwhat do I need to push?\n\n187\n00:11:39.916 --> 00:11:43.290\nI need to push the version one tag, okay.\n\n188\n00:11:43.290 --> 00:11:48.480\nSo if I go over and\nI say docker images, and\n\n189\n00:11:48.480 --> 00:11:51.730\nI have this version one here for\nbase image.\n\n190\n00:11:51.730 --> 00:11:56.300\nAnd well, it's an older one,\nI could go back and\n\n191\n00:11:56.300 --> 00:12:00.210\njust to show this instead\nof having a latest,\n\n192\n00:12:00.210 --> 00:12:03.530\nI'm just going to rebrand this as\na version one also and repush.\n\n193\n00:12:05.370 --> 00:12:11.694\nSo I'm gonna docker Build -t\njustindevpro/baseimage and\n\n194\n00:12:11.694 --> 00:12:18.520\nthen a version 1 tag, uh-oh,\nforgot the directory here.\n\n195\n00:12:18.520 --> 00:12:24.430\nAnd it rebuilt and if I look at images,\nI now have a version 1,\n\n196\n00:12:24.430 --> 00:12:27.230\nnow it should be 1.0.\n\n197\n00:12:27.230 --> 00:12:35.593\nBut then I'm gonna push\njustindevpro/baseimage:1.\n\n198\n00:12:35.593 --> 00:12:39.484\nSo now I'm saying I want this particular\nversion and it's going to push and\n\n199\n00:12:39.484 --> 00:12:41.500\nit says layer already exists.\n\n200\n00:12:41.500 --> 00:12:47.610\nAnd notice that once I push If I'm\niterating through versions, for instance\n\n201\n00:12:47.610 --> 00:12:53.160\nif the latest is actually built from\nimage one, gotta push image one first.\n\n202\n00:12:53.160 --> 00:12:56.262\nIf I would've put image one, the latest\none, it wouldn't have taken as long,\n\n203\n00:12:56.262 --> 00:12:58.100\nbecause all it pushes is the layer.\n\n204\n00:12:58.100 --> 00:12:59.530\nNow what is meant by layer?\n\n205\n00:12:59.530 --> 00:13:00.880\nThose intermediate images and\n\n206\n00:13:00.880 --> 00:13:04.380\ncontainers that are built when you're\nactually running the build process,\n\n207\n00:13:04.380 --> 00:13:08.560\nthose are kind of chunked onto the layer,\nand kept as the history.\n\n208\n00:13:08.560 --> 00:13:13.990\nSo if we come back now and\nwe refresh and we look at tags.\n\n209\n00:13:13.990 --> 00:13:16.420\nWell, wait for it, wait for it.\n\n210\n00:13:16.420 --> 00:13:19.100\nNotice we have two.\n\n211\n00:13:19.100 --> 00:13:21.970\nAnd also notice, it's 105 megabytes.\n\n212\n00:13:23.790 --> 00:13:26.250\nWell what's going on here?\n\n213\n00:13:26.250 --> 00:13:29.950\nIf I Docker images, and I come up here.\n\n214\n00:13:29.950 --> 00:13:31.780\nThis actually says 227 megabytes.\n\n215\n00:13:34.010 --> 00:13:38.950\nThey enforce compression on Docker Hub\nto keep those a little bit smaller.\n\n216\n00:13:38.950 --> 00:13:40.450\nSo that will help out.\n\n217\n00:13:40.450 --> 00:13:44.500\nSo that's how we push\nimages to Docker Hub.\n\n218\n00:13:46.040 --> 00:13:50.070\n&gt;&gt; All right, Justin when we start\nto take a look at this idea of\n\n219\n00:13:51.450 --> 00:13:55.510\ntaking our images that we've created and\ndecide that we need to share them\n\n220\n00:13:55.510 --> 00:13:58.460\nwhether it's in a private space or\nin a public space.\n\n221\n00:13:58.460 --> 00:14:01.230\nJustin has showed us how this\nactually works by interacting with,\n\n222\n00:14:01.230 --> 00:14:03.380\nof course, the Docker client.\n\n223\n00:14:03.380 --> 00:14:07.934\nShowed us the ability to push them up\ninto the Docker Hub space that's actually\n\n224\n00:14:07.934 --> 00:14:08.563\nup there.\n\n225\n00:14:08.563 --> 00:14:11.040\nRemember if you do this,\nyou need to create an account as well.\n\n226\n00:14:11.040 --> 00:14:14.210\nMake sure everything is\ngoing fine that way, and\n\n227\n00:14:14.210 --> 00:14:17.090\nyou'll actually be able to do those\nother things that you need to.\n\n228\n00:14:17.090 --> 00:14:18.870\nNow there's a little bit more to this but\n\n229\n00:14:18.870 --> 00:14:22.810\nit might take us a little bit more time\nthan what we have in this episode.\n\n230\n00:14:22.810 --> 00:14:25.000\nSo Justin, do we need to come back for\na part two?\n\n231\n00:14:25.000 --> 00:14:29.700\n&gt;&gt; So Ronnie it is a little bit of a toss\nup, but I would rather give ourselves\n\n232\n00:14:29.700 --> 00:14:33.685\nyou know, a nice padding here,\njust in case things goes horribly awry.\n\n233\n00:14:33.685 --> 00:14:36.850\n&gt;&gt; [LAUGH]\n&gt;&gt; Instead of trying to rush through it.\n\n234\n00:14:36.850 --> 00:14:40.230\n&gt;&gt; There's no doubt that a lot of times,\nthese things do take a little bit longer.\n\n235\n00:14:40.230 --> 00:14:42.390\nBut remember,\nif you're actually beginning,\n\n236\n00:14:42.390 --> 00:14:47.670\nit does kind of let you know and let you\nget into that ecosystem of how Docker\n\n237\n00:14:47.670 --> 00:14:51.705\nallows you to share the information that\nyou've created, and ready to go as well.\n\n238\n00:14:51.705 --> 00:14:53.700\nThose private containers too,\n\n239\n00:14:53.700 --> 00:14:57.717\nmake sure you take a look at that as\nwell as remember that if you push\n\n240\n00:14:57.717 --> 00:15:02.480\na Docker image up,\nit's gonna be available publicly as well.\n\n241\n00:15:02.480 --> 00:15:03.920\nAnd that's something to consider.\n\n242\n00:15:03.920 --> 00:15:06.250\nHopefully you're not sharing anything\nthat you don't want to share, but\n\n243\n00:15:06.250 --> 00:15:08.510\nat the same time, do remember that too.\n\n244\n00:15:08.510 --> 00:15:12.030\nBut it's a great place for us to go ahead\nand call this one for our part one.\n\n245\n00:15:12.030 --> 00:15:14.430\nAnd we will see you in our part two,\nas well.\n\n246\n00:15:14.430 --> 00:15:18.690\nSo signing off for ITProTV,\nI've been your host Ronnie Wong.\n\n247\n00:15:18.690 --> 00:15:19.810\n&gt;&gt; And I'm Justin Dennison.\n\n248\n00:15:19.810 --> 00:15:23.397\n&gt;&gt; Stay tuned right here for\nintroduction for Docker shows.\n\n249\n00:15:23.397 --> 00:15:29.357\n[MUSIC]\n\n250\n00:15:29.357 --> 00:15:32.546\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "210595475"
        },
        {
          "description": "In this episode, Ronnie and Justin demonstrate how to share a modified file, without configuring a dockerfile, to the hub.  Also Justin demonstrates the working logic to store an image to a network share or usb drive.",
          "length": "1658",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-2-storing_our_custom_docker_images_pt2-032417-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-2-storing_our_custom_docker_images_pt2-032417-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introtodocker-8-1-2-storing_our_custom_docker_images_pt2-032417-high-sm.jpg",
          "title": "Storing Our Custom Docker Images Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:03.455\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:03.455 --> 00:00:07.330\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:07.330 --> 00:00:08.264\n[MUSIC]\n\n4\n00:00:08.264 --> 00:00:12.123\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.123 --> 00:00:15.740\n&gt;&gt; Welcome to another great episode,\nright here on ITProTV.\n\n6\n00:00:15.740 --> 00:00:19.650\nI'm your host, Ronnie Wong, and today,\nyou're watching Introduction to Docker.\n\n7\n00:00:19.650 --> 00:00:23.810\nWe've even taken look at how we get our\nimages stored where we want them to be and\n\n8\n00:00:23.810 --> 00:00:27.640\nmake them public but we still got a bit\nmore to Docker and here to help us through\n\n9\n00:00:27.640 --> 00:00:31.530\nthat topic is gonna be Mr Justin Denison,\nas we continue on here.\n\n10\n00:00:31.530 --> 00:00:35.328\nJustin welcome back to our show and\nhow are we gonna get started here?\n\n11\n00:00:35.328 --> 00:00:38.562\n&gt;&gt; Well Ronnie, I'm excited to be\nback here today, before we begin,\n\n12\n00:00:38.562 --> 00:00:39.482\nhow are you today?\n\n13\n00:00:39.482 --> 00:00:42.735\n&gt;&gt; I am doing well and very excited\ncuz learning a lot about Docker,\n\n14\n00:00:42.735 --> 00:00:46.589\nstill a little bit confused, but I think,\nI'm starting to get the hang of it\n\n15\n00:00:46.589 --> 00:00:50.288\na little bit more and I do appreciate\nyour time and effort to help us here.\n\n16\n00:00:50.288 --> 00:00:54.660\nSo, in this area, where we're going into,\nthis may be a little bit above my head,\n\n17\n00:00:54.660 --> 00:00:55.440\nJustin.\n\n18\n00:00:55.440 --> 00:00:59.350\n&gt;&gt; Well, you never know, Ronnie, I'm\na big proponent of just being persistent,\n\n19\n00:00:59.350 --> 00:01:04.520\nright, if it breaks, do it again,\ndo it until it doesn't break, right.\n\n20\n00:01:04.520 --> 00:01:08.370\nNow that doesn't work with tools or\nanything, like, I've tried this hammer\n\n21\n00:01:08.370 --> 00:01:12.330\nlike six times, knocked the head off it,\nlike all six times.\n\n22\n00:01:12.330 --> 00:01:16.351\nYou're probably using it wrong and\nyou should reevaluate that but\n\n23\n00:01:16.351 --> 00:01:21.231\nin the previous episode, we did look at\nhow we could store pre-built images from\n\n24\n00:01:21.231 --> 00:01:23.919\nour Docker files on the docker hub, right?\n\n25\n00:01:23.919 --> 00:01:27.070\nBut you know, there's actually a timing,\nimagine this Ronnie.\n\n26\n00:01:27.070 --> 00:01:32.987\nYou know, I sped up a docker container,\nI made a few changes, and then,\n\n27\n00:01:32.987 --> 00:01:39.691\nI kill the container but I don't wanna\nbuild a docker file, it's kinda a one off.\n\n28\n00:01:39.691 --> 00:01:44.101\nI'm like, I need the ability to save that,\nhow do I save that and\n\n29\n00:01:44.101 --> 00:01:46.610\nput that somewhere, right?\n\n30\n00:01:46.610 --> 00:01:50.660\nWell, let's actually take a look at, we've\nseen that they'll persist until we delete\n\n31\n00:01:50.660 --> 00:01:53.750\nthem but actually, let's take a look\nat how we go about doing that.\n\n32\n00:01:53.750 --> 00:01:57.275\nSo, I'm gonna hop over here and\nI'm gonna say docker,\n\n33\n00:01:57.275 --> 00:01:59.678\nand let's just see what's running.\n\n34\n00:01:59.678 --> 00:02:03.173\nI still have an nginx container running,\nso, I'm gonna kill that,\n\n35\n00:02:03.173 --> 00:02:05.779\njust to clear up everything here,\nand there it is.\n\n36\n00:02:05.779 --> 00:02:11.553\nNow, let's say that I want a really small\ncontainer, that's going to serve up,\n\n37\n00:02:11.553 --> 00:02:17.720\nor we'll pretend it's going to serve up,\nit has some settings files in it, okay?\n\n38\n00:02:17.720 --> 00:02:22.920\nMaybe it's gonna be for nginx, so,\nI'm gonna say docker run- it and\n\n39\n00:02:22.920 --> 00:02:27.156\nbusybox and bin,\n\n40\n00:02:27.156 --> 00:02:31.950\nbash, nope, bash will not work.\n\n41\n00:02:31.950 --> 00:02:38.226\nI am sorry, it is sh, here we go, so,\nwe now, are in a busybox container.\n\n42\n00:02:38.226 --> 00:02:43.083\nAnd well, I have access to all of these\ninformation but again, this is not about\n\n43\n00:02:43.083 --> 00:02:47.920\nactually building something at this\nmoment, it's about the concept.\n\n44\n00:02:47.920 --> 00:02:53.430\nSo, I'm gonna build a configuration in\nhere, and I'm gonna go inside a dev,\n\n45\n00:02:53.430 --> 00:02:58.730\nand I'm just gonna make\na mkdir nginx.config and\n\n46\n00:02:58.730 --> 00:03:01.860\nI want to keep this as a base image.\n\n47\n00:03:01.860 --> 00:03:05.170\nI'm playing around, I made some changes,\n\n48\n00:03:05.170 --> 00:03:10.473\nI did not wanna make dir,\nso, I'm going to nginx.com.\n\n49\n00:03:10.473 --> 00:03:17.575\nI actually meant nginx.comf for\nactually having a file system,\n\n50\n00:03:17.575 --> 00:03:24.170\nso, there's my .comf and then,\nI move up and if I go in var.\n\n51\n00:03:24.170 --> 00:03:29.386\nI have my dub, dub, dub folder and well,\n\n52\n00:03:29.386 --> 00:03:34.900\nI'm just going to make\nan HTML directory and\n\n53\n00:03:34.900 --> 00:03:40.877\nthen, touch html/index.html, all right.\n\n54\n00:03:40.877 --> 00:03:44.650\nSo, there's my HTML directory and\nthere's my index.html.\n\n55\n00:03:44.650 --> 00:03:48.260\nSo, I'm kind of getting things in order,\nI'm just playing around,\n\n56\n00:03:48.260 --> 00:03:52.980\nI haven't really devised a plan, so\nto speak, so, I can write a docker file.\n\n57\n00:03:52.980 --> 00:03:58.429\nI'm just trying some things, now we're\ngonna fast forward here, I'm sorry Ronnie.\n\n58\n00:03:58.429 --> 00:04:01.206\n&gt;&gt; No, that's fine, now,\nI was just gonna say,\n\n59\n00:04:01.206 --> 00:04:03.645\nmake sure that I get\nthis right in my mind.\n\n60\n00:04:03.645 --> 00:04:07.275\nWhat you're saying here is that, we got\nan container, we now modify something,\n\n61\n00:04:07.275 --> 00:04:10.064\nwe're not really thinking about\nbuilding a complete image but\n\n62\n00:04:10.064 --> 00:04:12.250\nwe still want to do something like\n&gt;&gt; Right, right,\n\n63\n00:04:12.250 --> 00:04:14.446\nwe wanna take a snap shot of this.\n\n64\n00:04:14.446 --> 00:04:17.670\n&gt;&gt; Okay.\nSo, how do we go about doing that?\n\n65\n00:04:17.670 --> 00:04:21.220\nWell, I'm going to exit\nout of this container and\n\n66\n00:04:21.220 --> 00:04:26.372\nif I look at docker ps,\nbecause I did Ctrl+P Ctrl+Q.\n\n67\n00:04:26.372 --> 00:04:31.280\nI actually have this container\nstill running, hopeful_davinci.\n\n68\n00:04:31.280 --> 00:04:36.580\nIf I look inside of the docker,\nlist of commands, there we go,\n\n69\n00:04:36.580 --> 00:04:41.986\nwow, having trouble finding my words,\nthere's this commit.\n\n70\n00:04:41.986 --> 00:04:45.171\nCreate a new image from\na container's changes, well,\n\n71\n00:04:45.171 --> 00:04:46.928\nit's like they thought of this.\n\n72\n00:04:46.928 --> 00:04:51.032\nThis would be a typical use case and\nwhen I'm messing with new software,\n\n73\n00:04:51.032 --> 00:04:54.380\nwhether it be a new web server or\na new runtime.\n\n74\n00:04:54.380 --> 00:04:57.950\nI will do this,\njust to keep things kind of snapshotted.\n\n75\n00:04:57.950 --> 00:05:02.640\nSo, let's look at the docker commit--help.\n\n76\n00:05:02.640 --> 00:05:08.817\nAnd I have a few things that I can\nflag as options, so, docker commit.\n\n77\n00:05:08.817 --> 00:05:12.319\nI get options and then,\nI have the container name and then,\n\n78\n00:05:12.319 --> 00:05:15.672\nwhat I'm going to name it,\nas my repository.\n\n79\n00:05:15.672 --> 00:05:20.860\nAll right, just to reiterate, our\nrepository should be our docker ID name,\n\n80\n00:05:20.860 --> 00:05:23.810\nslash some image name.\n\n81\n00:05:23.810 --> 00:05:26.360\nSo, let's take this\nbusybox that's running,\n\n82\n00:05:26.360 --> 00:05:30.620\nthat we have this basic set up,\nand commit it.\n\n83\n00:05:30.620 --> 00:05:33.290\nSo, I'm gonna leave off all\nof the options, for now.\n\n84\n00:05:34.300 --> 00:05:38.630\nAnd well, I'm just gonna say, docker\ncommit, and what is the container name?\n\n85\n00:05:38.630 --> 00:05:43.940\nWell, I'll have to know what\nthe container is, so, docker ps, and\n\n86\n00:05:43.940 --> 00:05:47.860\nthen, docker commit hopeful_davinci.\n\n87\n00:05:47.860 --> 00:05:52.850\nIt's very appropriate, and then,\nwhat do I want to call this?\n\n88\n00:05:52.850 --> 00:05:55.138\nmybusybox, right?\n\n89\n00:05:55.138 --> 00:06:01.299\nAnd imaginative name but it helps me,\nbut I almost messed up here,\n\n90\n00:06:01.299 --> 00:06:07.580\nI need to make sure this has my actual\ndocker ID, as part of the name.\n\n91\n00:06:08.720 --> 00:06:13.652\nAnd I'm going to tag this as 1.0, so,\nthis is my first attempt to this and\n\n92\n00:06:13.652 --> 00:06:15.129\nI'm going to commit.\n\n93\n00:06:15.129 --> 00:06:17.950\nNow, it gave me a SHA hash.\n\n94\n00:06:17.950 --> 00:06:23.750\nSo, let's clear and look at docker\nimages and let's scroll up here and\n\n95\n00:06:23.750 --> 00:06:28.100\nit should be at the top, and\nthere's my busy box with 1.0.\n\n96\n00:06:28.100 --> 00:06:31.680\nOkay, and if we zoom out here,\nso, we can actually see,\n\n97\n00:06:31.680 --> 00:06:36.554\none of the big things with busy\nbox is look how big this image is.\n\n98\n00:06:36.554 --> 00:06:38.093\n1.1 megabytes,\n\n99\n00:06:38.093 --> 00:06:43.890\nit's like the bare minimum that you\nwould need to have like a Linux runtime.\n\n100\n00:06:45.360 --> 00:06:48.310\nSo, this would be nice,\nif I could use this for, maybe,\n\n101\n00:06:48.310 --> 00:06:52.640\nit's just to spin up workers or\nhas very particular use case.\n\n102\n00:06:52.640 --> 00:06:56.020\nAnd well, I need to customize it\na little bit and I've done that,\n\n103\n00:06:56.020 --> 00:07:01.240\nby modifying a container and when I\ncommitted, Docker made an image for me.\n\n104\n00:07:01.240 --> 00:07:04.970\nThis is actually what happens,\nduring that build process.\n\n105\n00:07:04.970 --> 00:07:10.858\nRun, commit the current container, as an\nintermediate image and then, continue on.\n\n106\n00:07:10.858 --> 00:07:15.771\nSo, that's step one, step two, step three\nthat we see, that's dockers handling that\n\n107\n00:07:15.771 --> 00:07:18.929\nfor us but we don't always\nknow exactly what we wanna do.\n\n108\n00:07:18.929 --> 00:07:21.420\nSo, this is a wonderful alternative.\n\n109\n00:07:21.420 --> 00:07:24.060\nSo, let's see what happens,\n\n110\n00:07:24.060 --> 00:07:29.782\nwhen I say doctor push\njustindevpro/mybusybox.\n\n111\n00:07:29.782 --> 00:07:36.017\nAnd it's [SOUND] fast, fast,\nmount it, mount it, there it is.\n\n112\n00:07:36.017 --> 00:07:41.440\nSo, we should be able to go to my docker\nhub, and see this as a tagged container.\n\n113\n00:07:43.040 --> 00:07:48.159\nSo, I'm going to refresh and\nthere's my busybox and\n\n114\n00:07:48.159 --> 00:07:52.384\nif I look at tags, well, I get a tag 1.0.\n\n115\n00:07:52.384 --> 00:07:57.455\nAnd because it's compressed,\n678 kilobytes, so now, if I move to\n\n116\n00:07:57.455 --> 00:08:02.795\nanother computer, and I need this basic\nconfiguration to build on top of.\n\n117\n00:08:02.795 --> 00:08:06.891\nI just quickly pull\njustindevpro/mybusybox and\n\n118\n00:08:06.891 --> 00:08:11.090\nit pulls that and\nright now all I have is version 1.\n\n119\n00:08:11.090 --> 00:08:14.890\nOkay now let's go back in.\n\n120\n00:08:14.890 --> 00:08:20.480\nNow that's a good place to start, but I\nstill have this running, hopeful_davinci.\n\n121\n00:08:20.480 --> 00:08:23.180\nSo let's attach to hopeful_davinci.\n\n122\n00:08:26.460 --> 00:08:29.560\nAnd leave a nice little message for\nmyself later on, and\n\n123\n00:08:29.560 --> 00:08:32.950\nnotice that I'm in the directory\nwhere I left off when I detached.\n\n124\n00:08:32.950 --> 00:08:35.415\nIt doesn't necessarily\nkill it when you start it,\n\n125\n00:08:35.415 --> 00:08:40.500\nit actually just cuts out of the standard\nout, or standard in, excuse me.\n\n126\n00:08:40.500 --> 00:08:42.360\nSo I'm gonna go back to the top level.\n\n127\n00:08:43.630 --> 00:08:48.526\nAnd actually I need to go to slash because\nI actually when I went to the home,\n\n128\n00:08:48.526 --> 00:08:50.510\nthere's nothing in there.\n\n129\n00:08:50.510 --> 00:08:55.300\nAnd I want to go inside of the user.\n\n130\n00:08:55.300 --> 00:08:58.655\nLet's just put it at the top level.\n\n131\n00:08:58.655 --> 00:09:02.649\nRemember .txt and\n\n132\n00:09:02.649 --> 00:09:06.420\nremember.txt.\n\n133\n00:09:06.420 --> 00:09:07.740\nDon't forget to come in.\n\n134\n00:09:10.570 --> 00:09:14.570\nJust a nice little reminder for\nme if I'm making any other things here.\n\n135\n00:09:14.570 --> 00:09:15.700\nSo there it is.\n\n136\n00:09:15.700 --> 00:09:19.400\nAnd I'm gonna Ctrl+P, Ctrl+Q, out of it.\n\n137\n00:09:19.400 --> 00:09:22.050\nAnd now I've made a change, right?\n\n138\n00:09:22.050 --> 00:09:23.894\nSo let's look back through those commit.\n\n139\n00:09:26.878 --> 00:09:27.830\nCommands again.\n\n140\n00:09:27.830 --> 00:09:29.970\nThose options, so to speak.\n\n141\n00:09:29.970 --> 00:09:34.955\nAnd I have -author, -change list,\n-m message, and well,\n\n142\n00:09:34.955 --> 00:09:40.976\nlet's try this -message and change\nthe tag, because this is version two,\n\n143\n00:09:40.976 --> 00:09:47.028\nby my versioning system and let's see\nhow these options modify what we see.\n\n144\n00:09:47.028 --> 00:09:54.975\nSo docker commit, I really need\nto name these containers, Ronnie.\n\n145\n00:09:54.975 --> 00:09:58.300\n&gt;&gt; [LAUGH]\n&gt;&gt; Docker commit hopeful\n\n146\n00:09:58.300 --> 00:10:02.820\nactually dash M added the reminder text\n\n147\n00:10:06.183 --> 00:10:10.083\nTo hopeful_davinci and\n\n148\n00:10:10.083 --> 00:10:18.822\nI wanna call that\njustindevpro/mybusybox:2.0.\n\n149\n00:10:18.822 --> 00:10:23.340\nAnd I now have a new SHA,\nso if we look at images.\n\n150\n00:10:25.040 --> 00:10:26.130\nAnd I come back up here.\n\n151\n00:10:26.130 --> 00:10:33.600\nI have my busy box 2.0, and\nwhere do I see that commit history?\n\n152\n00:10:33.600 --> 00:10:39.340\nWell let's see if we can push this and\nsee if that comes up in docker hub.\n\n153\n00:10:39.340 --> 00:10:42.624\nSo docker push,\n\n154\n00:10:42.624 --> 00:10:48.520\njustindevpro /MyBusybox.\n\n155\n00:10:48.520 --> 00:10:50.870\nGot to spell busy box correctly 2.0.\n\n156\n00:10:50.870 --> 00:10:56.200\nSo I'm pushing, and\nnotice it says the layer already exists.\n\n157\n00:10:56.200 --> 00:11:01.350\nIt only had to push the changes, and then\neverything else was kind of taken care of.\n\n158\n00:11:01.350 --> 00:11:07.134\nSo if we come back and\nwe refresh, there's 2.0 and\n\n159\n00:11:07.134 --> 00:11:12.550\nwell, it doesn't seem like I\ncan see anything about this.\n\n160\n00:11:12.550 --> 00:11:15.980\nSo the tags,\nwhere is this commit history coming from?\n\n161\n00:11:17.080 --> 00:11:21.760\nIf I type docker image\nwhich is a new command,\n\n162\n00:11:22.770 --> 00:11:28.240\nshow the history of an image,\nI should see it there.\n\n163\n00:11:28.240 --> 00:11:36.121\nSo I wanna say justindevpro/mybusybox.\n\n164\n00:11:36.121 --> 00:11:40.422\nMy busy no such ID.\n\n165\n00:11:40.422 --> 00:11:42.770\nNo such ID.\n\n166\n00:11:42.770 --> 00:11:43.950\nForgot to tag it.\n\n167\n00:11:43.950 --> 00:11:45.450\nForgot to tag it.\n\n168\n00:11:45.450 --> 00:11:46.150\nVersion one.\n\n169\n00:11:46.150 --> 00:11:48.020\nNo such ID.\n\n170\n00:11:48.020 --> 00:11:49.300\nWhat?\n\n171\n00:11:49.300 --> 00:11:50.160\nAm I.\n\n172\n00:11:50.160 --> 00:11:52.230\nI've got to do some debugging here Ronnie.\n\n173\n00:11:52.230 --> 00:11:52.920\n&gt;&gt; All right.\n\n174\n00:11:52.920 --> 00:11:58.990\n&gt;&gt; History dash dash help, and\nall show all images history.\n\n175\n00:11:58.990 --> 00:12:00.870\nNot history.\n\n176\n00:12:00.870 --> 00:12:01.815\nI want to inspect.\n\n177\n00:12:01.815 --> 00:12:02.650\n&gt;&gt; [LAUGH]\n&gt;&gt; This history\n\n178\n00:12:02.650 --> 00:12:03.859\nis from all of the other ones.\n\n179\n00:12:05.170 --> 00:12:06.738\nSo, let's see here.\n\n180\n00:12:06.738 --> 00:12:10.553\nDocker,\n&gt;&gt; Inspect.\n\n181\n00:12:10.553 --> 00:12:14.530\n&gt;&gt; Actually, Docker, I misspoke.\n\n182\n00:12:14.530 --> 00:12:18.870\nDocker image history --help.\n\n183\n00:12:18.870 --> 00:12:19.445\nThere we go.\n\n184\n00:12:19.445 --> 00:12:25.510\n-8 show the history of an image options,\nand then image.\n\n185\n00:12:25.510 --> 00:12:28.510\nOkay, well, why isn't it showing us that?\n\n186\n00:12:28.510 --> 00:12:35.001\nSo docker image history and it just says,\n\n187\n00:12:35.001 --> 00:12:40.194\ntype this so docker image history\n\n188\n00:12:40.194 --> 00:12:45.213\njustindevpro/mybusybox 1.\n\n189\n00:12:45.213 --> 00:12:49.630\nMy Busy box nothing.\n\n190\n00:12:49.630 --> 00:12:51.980\nBut it says no such ID.\n\n191\n00:12:51.980 --> 00:12:54.690\nSo what should I be looking for?\n\n192\n00:12:54.690 --> 00:12:57.930\nSo this is one of those frustrating times.\n\n193\n00:12:57.930 --> 00:12:59.130\nDocker images.\n\n194\n00:13:00.160 --> 00:13:02.369\nAnd notice it says ID.\n\n195\n00:13:02.369 --> 00:13:10.320\nI wonder, Docker image history and\nthe ID number.\n\n196\n00:13:10.320 --> 00:13:11.600\nThere we go.\n\n197\n00:13:11.600 --> 00:13:16.390\nSo most of the time we can use repo names,\nbut this is a case in point where\n\n198\n00:13:16.390 --> 00:13:21.240\nyou need to read those messages and\nnotice how I started exploring, right?\n\n199\n00:13:21.240 --> 00:13:23.640\nHow do I find out how to fix this?\n\n200\n00:13:23.640 --> 00:13:26.870\nAnd I picked up on\nthe fact that it said ID.\n\n201\n00:13:26.870 --> 00:13:29.270\nID is not the repo name.\n\n202\n00:13:29.270 --> 00:13:31.240\nSo I had to give it the sha.\n\n203\n00:13:31.240 --> 00:13:35.220\nAnd notice, it gives me well, right here.\n\n204\n00:13:35.220 --> 00:13:37.640\nLet me zoom out here, and get this.\n\n205\n00:13:38.830 --> 00:13:41.820\nIt's kinda hard to see,\nbut it formats better.\n\n206\n00:13:41.820 --> 00:13:46.470\nAnd let me clear and reprint this out.\n\n207\n00:13:46.470 --> 00:13:47.015\nThere we go.\n\n208\n00:13:47.015 --> 00:13:50.630\nNotice there's the comment\nadd reminder text.\n\n209\n00:13:51.720 --> 00:13:56.260\nAnd that shows me that I made\nthat commit three minutes ago.\n\n210\n00:13:56.260 --> 00:14:00.180\nSo this image has a history\nof things that have changed.\n\n211\n00:14:00.180 --> 00:14:02.410\nAnd if you add a commit message,\n\n212\n00:14:02.410 --> 00:14:06.740\nit keeps it in the history of the image\nwhich may be advantageous because you go,\n\n213\n00:14:06.740 --> 00:14:11.780\nwell I actually need to,\nI need this image, right.\n\n214\n00:14:11.780 --> 00:14:16.810\nI can actually pull that specific image\nand then make a commit from there also.\n\n215\n00:14:16.810 --> 00:14:19.030\nSo those are good things to know.\n\n216\n00:14:19.030 --> 00:14:24.915\nNow Justin, I noticed something when\nyou talked about going from 1.0 to 2.0.\n\n217\n00:14:24.915 --> 00:14:31.370\nLet's say that I accidentally mistagged\nit as 2.0 and I want it to be 1.5, but\n\n218\n00:14:31.370 --> 00:14:34.590\nif I then go back in and change it, it's\njust gonna add another iteration, right.\n\n219\n00:14:34.590 --> 00:14:36.480\nAnd it's not gonna\nreally change the image.\n\n220\n00:14:36.480 --> 00:14:39.790\nIt's just gonna say, you modified it and\nwe're just gonna put it here.\n\n221\n00:14:39.790 --> 00:14:43.620\nWhat if I really just needed to,\nbecause I mistagged it, what do I do then?\n\n222\n00:14:43.620 --> 00:14:49.191\n&gt;&gt; Well, so let me, version 1.0,\nyou want to re-tag.\n\n223\n00:14:50.600 --> 00:14:52.440\nAs 1.5, is that correct?\n\n224\n00:14:52.440 --> 00:14:57.140\n&gt;&gt; Let's say it was a 2.0,\njust like you did, and we said, no,\n\n225\n00:14:57.140 --> 00:15:02.050\nI should've did the 1.5, but my mind was\njust going to 2, and I just mistagged it.\n\n226\n00:15:02.050 --> 00:15:06.940\nBut if I go back and make a change, it's\nreally just gonna add in 1.5 instead of\n\n227\n00:15:06.940 --> 00:15:10.490\nactually changing it,\nit's going to show 3 for us instead.\n\n228\n00:15:10.490 --> 00:15:14.170\n&gt;&gt; So I'm gonna have\n&gt;&gt; 1.0, 1.5 and 2.0, so there's a couple\n\n229\n00:15:15.170 --> 00:15:18.850\nof ways that, well actually there's\nonly one way that I can think of.\n\n230\n00:15:18.850 --> 00:15:21.018\nWe're actually gonna try to\nfind out the other way, and\n\n231\n00:15:21.018 --> 00:15:25.640\nthat's important because Ronnie, you've\ngot me back on my heels a little bit.\n\n232\n00:15:25.640 --> 00:15:28.930\nBut that will be something\nthat occurs with you.\n\n233\n00:15:28.930 --> 00:15:32.830\nSo the first way that I know of is we'll\nrecommit it with a new version number and\n\n234\n00:15:32.830 --> 00:15:33.850\nthen just delete that one.\n\n235\n00:15:33.850 --> 00:15:34.960\n&gt;&gt; Yeah that's easy enough.\n\n236\n00:15:34.960 --> 00:15:35.550\nI could do that.\n\n237\n00:15:35.550 --> 00:15:36.810\n&gt;&gt; Right?\nYou could do that.\n\n238\n00:15:36.810 --> 00:15:41.490\nBut let's see if docker, it seems\nlike this is a common use case, so\n\n239\n00:15:41.490 --> 00:15:47.020\ndocker, and I'm just gonna hit enter, and\nI'm gonna scroll through here and notice.\n\n240\n00:15:47.020 --> 00:15:51.210\nCreate a target tag image that\nrefers to a source image.\n\n241\n00:15:51.210 --> 00:15:54.167\nSo this, we might be on to something here.\n\n242\n00:15:54.167 --> 00:15:58.930\nNow if I say docker tag --help all right.\n\n243\n00:15:58.930 --> 00:16:03.596\nSo source image with the tag,\ntarget image with the tag Okay,\n\n244\n00:16:03.596 --> 00:16:08.097\ncreate a tag TARGET_IMAGE\nthat refers to SOURCE_IMAGE.\n\n245\n00:16:08.097 --> 00:16:11.450\nSo I think this might be\na good thing to start with.\n\n246\n00:16:11.450 --> 00:16:17.290\nSo I'm gonna say docker tag and\nthis was justindevpro.\n\n247\n00:16:17.290 --> 00:16:20.729\nSadly, because of these repo names and\nthe convention,\n\n248\n00:16:20.729 --> 00:16:23.533\nthey're typically long to write mybusybox.\n\n249\n00:16:23.533 --> 00:16:27.496\nAnd we wanna take version two and\nactually make it,\n\n250\n00:16:27.496 --> 00:16:31.380\nI think I put 2.0, yep, 2.0, and make it.\n\n251\n00:16:31.380 --> 00:16:34.354\nGotta dismiss this,\n\n252\n00:16:34.354 --> 00:16:39.976\njustindevpro/mybusybox:1.5 And\n\n253\n00:16:39.976 --> 00:16:43.440\nso, let's retag.\n\n254\n00:16:43.440 --> 00:16:44.570\nWe didn't get any errors.\n\n255\n00:16:44.570 --> 00:16:46.120\nThis is promising.\n\n256\n00:16:46.120 --> 00:16:51.310\nNow, if we look at docker images,\nand we go back up here to the top,\n\n257\n00:16:51.310 --> 00:16:58.670\nI still have the 2.0 and the 1.5,\nbut these are exactly the same.\n\n258\n00:16:58.670 --> 00:16:59.610\nThis is a good way.\n\n259\n00:16:59.610 --> 00:17:03.362\nSo let's go ahead and push this and\nsee what happens, right?\n\n260\n00:17:03.362 --> 00:17:03.932\n&gt;&gt; Sounds good.\n\n261\n00:17:03.932 --> 00:17:08.005\n&gt;&gt; So Docker push, Justin Devpro.\n\n262\n00:17:08.005 --> 00:17:09.410\n&gt;&gt; You misspelled Justin.\n\n263\n00:17:09.410 --> 00:17:10.100\n&gt;&gt; Sure did.\n\n264\n00:17:10.100 --> 00:17:11.935\nIt's my own name and I misspelled it.\n\n265\n00:17:11.935 --> 00:17:14.045\n&gt;&gt; [LAUGH] There you go.\n\n266\n00:17:14.045 --> 00:17:16.604\n&gt;&gt; Woo, it's a good day, Ronnie.\n\n267\n00:17:16.604 --> 00:17:18.104\nIt's a good day.\n\n268\n00:17:18.104 --> 00:17:19.483\nMy busy box.\n\n269\n00:17:19.483 --> 00:17:23.000\nAnd so I'm pushing, layer already exists,\nlayer already exists.\n\n270\n00:17:23.000 --> 00:17:27.816\nAnd notice, since I have multiple\nversions, well, if I leave off the tag,\n\n271\n00:17:27.816 --> 00:17:31.444\nit will actually push all of\nthe tags that I have locally.\n\n272\n00:17:31.444 --> 00:17:36.450\nSo it pushed 1.0, 1.5, and 2.0.\n\n273\n00:17:36.450 --> 00:17:41.910\nAnd if I refresh, I now have a 1.5 but\nthat doesn't help me, right?\n\n274\n00:17:41.910 --> 00:17:43.240\nIt's already in this.\n\n275\n00:17:43.240 --> 00:17:44.930\nThere is some management\nthat you need to do.\n\n276\n00:17:44.930 --> 00:17:48.180\nNow there are ways to get around\nthis in the docker client.\n\n277\n00:17:48.180 --> 00:17:50.107\nNumber one, don't mess up, right?\n\n278\n00:17:50.107 --> 00:17:51.367\n&gt;&gt; [LAUGH]\n&gt;&gt; That's important.\n\n279\n00:17:51.367 --> 00:17:53.577\nBut number two there's\na couple other ways.\n\n280\n00:17:53.577 --> 00:17:58.420\nWhat I find to be the easiest way,\nis to I misstagged it.\n\n281\n00:17:58.420 --> 00:18:03.537\nRetag it, as we just did,\ndelete the image locally,\n\n282\n00:18:03.537 --> 00:18:08.560\nso I'm going to docker rmi,\nwhich is a new command.\n\n283\n00:18:08.560 --> 00:18:12.805\nRemove image, rm stands for\ncontainer, rmi remove image.\n\n284\n00:18:12.805 --> 00:18:18.528\nJustindevpro/ MyBusybox and\n\n285\n00:18:18.528 --> 00:18:21.620\nthen :2.0.\n\n286\n00:18:21.620 --> 00:18:24.458\nMake sure you do the fully\nqualified name cuz it would\n\n287\n00:18:24.458 --> 00:18:27.565\nbe horrible to accidentally\ndelete all these images.\n\n288\n00:18:27.565 --> 00:18:28.430\n&gt;&gt; Yeah.\n[LAUGH]\n\n289\n00:18:28.430 --> 00:18:30.330\n&gt;&gt; We could re-pull them at this point,\n\n290\n00:18:30.330 --> 00:18:32.700\nbut if you've already deleted\nit from Docker hub and\n\n291\n00:18:32.700 --> 00:18:35.470\nyou make a delete locally,\nuh-oh, we're in trouble.\n\n292\n00:18:35.470 --> 00:18:38.350\nSo if I do that, it says untagged.\n\n293\n00:18:39.880 --> 00:18:42.240\nHm, that's weird, why did it untag?\n\n294\n00:18:42.240 --> 00:18:45.220\nWell, because I actually\nstill have that image.\n\n295\n00:18:45.220 --> 00:18:51.270\nI'm just removing it as\na tagged identifier images.\n\n296\n00:18:52.710 --> 00:18:57.739\nSo if I scroll up here, and\nnotice I have 1.0 and 1.5.\n\n297\n00:18:57.739 --> 00:19:01.700\nAnd well, 1.5,\nit still requires the same image.\n\n298\n00:19:01.700 --> 00:19:03.420\nAll we did was rename it.\n\n299\n00:19:03.420 --> 00:19:08.700\nSo I can't remove the underlying image,\nI just removed the name of 2.0.\n\n300\n00:19:08.700 --> 00:19:16.520\nAnd let's go ahead and push just to see if\nthere's any way we can get that to update.\n\n301\n00:19:18.320 --> 00:19:23.110\nmybusybox and there we go,\nthere's one there's two.\n\n302\n00:19:23.110 --> 00:19:26.797\nIt only pushed 1.0 and 1.5.\n\n303\n00:19:26.797 --> 00:19:33.775\nBut if I come and refresh, well, it's\ntaking a little bit, taking a little bit.\n\n304\n00:19:33.775 --> 00:19:37.830\nDid we have something happen with the,\nthere we go.\n\n305\n00:19:37.830 --> 00:19:41.970\nNotice I still have\na 2.0 in my Docker hub.\n\n306\n00:19:41.970 --> 00:19:46.550\nSo the easiest way is to delete,\nconfirm and we're good to go.\n\n307\n00:19:46.550 --> 00:19:49.390\n&gt;&gt; That sounds like a good idea\nas we continue to see that.\n\n308\n00:19:49.390 --> 00:19:53.420\nNow Justin, by making these images\navailable to the public, that\n\n309\n00:19:53.420 --> 00:19:58.380\nmight not be something that the company\nthat I want to work for says is good.\n\n310\n00:19:58.380 --> 00:20:01.760\nSo you're talking a little bit\nearlier in a previous episode\n\n311\n00:20:01.760 --> 00:20:06.420\nabout saving something to a USB\nflash drive or to a network share.\n\n312\n00:20:07.840 --> 00:20:09.890\nWhat if we really need to do that instead?\n\n313\n00:20:09.890 --> 00:20:11.570\nWhat do we need to take a look at here?\n\n314\n00:20:11.570 --> 00:20:14.850\n&gt;&gt; Right, so this is\nthe alternative to creating our own\n\n315\n00:20:14.850 --> 00:20:16.360\nlocalized Docker registry.\n\n316\n00:20:16.360 --> 00:20:20.433\nSo instead of having a registry, or\nsomething where we can do similar things\n\n317\n00:20:20.433 --> 00:20:23.500\nto Docker hub,\nwhich requires us to maintain a service.\n\n318\n00:20:23.500 --> 00:20:25.330\nAnd all of the maintenance\ninvolved with that.\n\n319\n00:20:25.330 --> 00:20:28.949\nWhat if we just wanted to export\nthese two a network file share and\n\n320\n00:20:28.949 --> 00:20:31.440\nthen people could use them at will, right?\n\n321\n00:20:31.440 --> 00:20:35.064\nThat's a very valid use case,\nespecially if you have maybe some business\n\n322\n00:20:35.064 --> 00:20:37.410\nintelligence or\nsomething in the containers.\n\n323\n00:20:37.410 --> 00:20:39.330\nAnd they are fairly large or\n\n324\n00:20:39.330 --> 00:20:44.420\nyou have a bunch of them where it's\ncost prohibitive to put in a cloud.\n\n325\n00:20:44.420 --> 00:20:48.240\nOr it may be that your business is\nworking with someone that just says,\n\n326\n00:20:48.240 --> 00:20:52.560\nno, there is no way you can put this\non Docker Hub or anything like that.\n\n327\n00:20:52.560 --> 00:20:55.600\nBecause we have security\nprotocols that you must follow.\n\n328\n00:20:55.600 --> 00:20:58.040\nSo how do we get that done?\n\n329\n00:20:58.040 --> 00:21:00.750\nWe're gonna do a small one and\nthen we're gonna do a big one and\n\n330\n00:21:00.750 --> 00:21:02.280\nsee if there's any difference.\n\n331\n00:21:02.280 --> 00:21:04.210\nSo let's go ahead and take a look here.\n\n332\n00:21:04.210 --> 00:21:07.790\nWe have a couple of images that we\nalready have, so if I type images.\n\n333\n00:21:09.460 --> 00:21:12.110\nI'm just gonna use my busy box,\n1.5 for this.\n\n334\n00:21:12.110 --> 00:21:15.548\nAnd if we type docker,\nyou'll notice that we have,\n\n335\n00:21:15.548 --> 00:21:18.530\nwell, we have this export command.\n\n336\n00:21:18.530 --> 00:21:22.350\nSo export a container's file\nsystem as a tar archive.\n\n337\n00:21:22.350 --> 00:21:24.510\nSo let's just export and see what happens.\n\n338\n00:21:24.510 --> 00:21:30.714\nSo, docker export justindevpro/mybusybox.\n\n339\n00:21:32.760 --> 00:21:37.132\nAnd, 1.5,\nbecause I wanna keep that one and,\n\n340\n00:21:37.132 --> 00:21:40.470\ncowardly refusing to save to a terminal.\n\n341\n00:21:42.200 --> 00:21:45.180\n&gt;&gt; All right, cowardly,\nthat's pretty funny there, Justin.\n\n342\n00:21:45.180 --> 00:21:47.850\nWhat does that really mean and\nhow do we get past this?\n\n343\n00:21:47.850 --> 00:21:52.475\n&gt;&gt; Well, every time I have tried\nthis before, I always forget.\n\n344\n00:21:52.475 --> 00:21:55.342\nIt's just spitting about bits and\nbytes and raw data.\n\n345\n00:21:55.342 --> 00:22:01.605\nAnd well, for the small image we just\ntried to export, it wouldn't be too bad.\n\n346\n00:22:01.605 --> 00:22:05.946\nIt'd about a megabyte, but those three\ngigabytes images that I've talked about,\n\n347\n00:22:05.946 --> 00:22:09.449\nthat would be three gigabytes\nprinted out to your standard output.\n\n348\n00:22:09.449 --> 00:22:10.134\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n349\n00:22:10.134 --> 00:22:11.794\nI don't know if you've ever\nprinted something out like that,\n\n350\n00:22:11.794 --> 00:22:12.417\nRonnie-\n&gt;&gt; No.\n\n351\n00:22:12.417 --> 00:22:14.590\n&gt;&gt; On the standard out.\n\n352\n00:22:14.590 --> 00:22:17.710\nI'm not saying it will, but\nit'll lock up your computer, or\n\n353\n00:22:17.710 --> 00:22:19.860\nat least that actual terminal image.\n\n354\n00:22:19.860 --> 00:22:23.330\nSo, let's actually see how\nwe're gonna fix this and,\n\n355\n00:22:23.330 --> 00:22:26.820\nand, let's just get it to a file, right?\n\n356\n00:22:26.820 --> 00:22:28.850\nSo I'm gonna clear this out.\n\n357\n00:22:28.850 --> 00:22:31.029\nAnd I'm gonna say docker,\n\n358\n00:22:31.029 --> 00:22:35.871\nexport Justin DevPro my busy box and\nit said try the -O flag.\n\n359\n00:22:35.871 --> 00:22:40.822\nOkay, well, mybusybox, mybusybox and\n\n360\n00:22:40.822 --> 00:22:46.770\nerror response from\ndaemon: no such container.\n\n361\n00:22:48.148 --> 00:22:49.693\nWell, that's kinda weird.\n\n362\n00:22:49.693 --> 00:22:51.410\nLet's check the docs again.\n\n363\n00:22:51.410 --> 00:22:52.750\nMaybe we misread it.\n\n364\n00:22:52.750 --> 00:22:59.420\nSo docker export -- help and\nexport a container's file system.\n\n365\n00:22:59.420 --> 00:23:00.450\nWe're trying to use an image.\n\n366\n00:23:01.530 --> 00:23:04.870\n&gt;&gt; So\nwe have to have a container that has this.\n\n367\n00:23:04.870 --> 00:23:07.380\nSo I think I have a container like that.\n\n368\n00:23:08.460 --> 00:23:10.010\nThere it is.\n\n369\n00:23:10.010 --> 00:23:12.680\nI've made those changes, hopeful DaVinci.\n\n370\n00:23:12.680 --> 00:23:14.610\nSo let's try that instead.\n\n371\n00:23:14.610 --> 00:23:18.510\ndocker export hopeful DaVinci.\n\n372\n00:23:18.510 --> 00:23:23.165\nMm-hm, definitely should've\n\n373\n00:23:23.165 --> 00:23:27.983\nnamed these, -o mybusybox, and\n\n374\n00:23:27.983 --> 00:23:34.810\nlet's say version 1.5.tar and there we go.\n\n375\n00:23:34.810 --> 00:23:38.662\nWe actually have a tar\ndirectory with the container.\n\n376\n00:23:38.662 --> 00:23:43.223\nBut that kinda me, cuz I don't necessarily\nwant to have to spin up a container every\n\n377\n00:23:43.223 --> 00:23:45.380\ntime I want to make these saves, right?\n\n378\n00:23:45.380 --> 00:23:47.520\nWhat if this is a Docker file?\n\n379\n00:23:47.520 --> 00:23:48.931\nAnd I'm building it,\n\n380\n00:23:48.931 --> 00:23:53.622\nthat works, but now I want to be able\nto put this on that network file share.\n\n381\n00:23:53.622 --> 00:23:58.783\nSo let's go to Docker and hit Enter.\n\n382\n00:23:58.783 --> 00:24:00.668\nAnd let's read through here.\n\n383\n00:24:00.668 --> 00:24:05.654\nIf I could go back up here to export,\nA container, it says it right there,\n\n384\n00:24:05.654 --> 00:24:06.573\ncontainers.\n\n385\n00:24:06.573 --> 00:24:10.039\nSo I've just misread it,\nthat happens to the best of us.\n\n386\n00:24:10.039 --> 00:24:13.850\nBut do pay attention to\nthose minutiae of details.\n\n387\n00:24:13.850 --> 00:24:20.250\nAnd then, well it doesn't look like,\nhey, there's a save.\n\n388\n00:24:20.250 --> 00:24:23.490\nSave one or\nmore images to a tar directory.\n\n389\n00:24:23.490 --> 00:24:25.581\nAll right,\nstream to standard out by default.\n\n390\n00:24:25.581 --> 00:24:27.593\n&gt;&gt; [LAUGH]\n&gt;&gt; I suspect we would get a similar\n\n391\n00:24:27.593 --> 00:24:29.020\nerror message there.\n\n392\n00:24:29.020 --> 00:24:31.663\nSo okay, let's try this, save.\n\n393\n00:24:31.663 --> 00:24:35.510\nBecause I now have the image saved,\nit's built.\n\n394\n00:24:35.510 --> 00:24:45.260\nSo let's save justindevpro/mybusybox:1.5.\n\n395\n00:24:45.260 --> 00:24:47.303\nAnd I'm going to go ahead and\n\n396\n00:24:47.303 --> 00:24:52.590\nI'm assuming that this works very\nsimilar to the export, right?\n\n397\n00:24:52.590 --> 00:24:54.165\nThat would make sense.\n\n398\n00:24:54.165 --> 00:24:59.177\nAnd we'll say to mybusybox,\nand let's just call it image,\n\n399\n00:24:59.177 --> 00:25:02.390\nso we have a different file name.\n\n400\n00:25:02.390 --> 00:25:04.833\nThese are technically the same thing.\n\n401\n00:25:04.833 --> 00:25:08.410\nAnd there we go.\n\n402\n00:25:08.410 --> 00:25:11.559\nSo those are two different ways,\nwhether you have an image or\n\n403\n00:25:11.559 --> 00:25:13.919\ncontainer that you can\noutput those to tars.\n\n404\n00:25:13.919 --> 00:25:18.566\nNow full disclosure, I feigned a little\nbit of ignorance there to make\n\n405\n00:25:18.566 --> 00:25:23.440\nsure you see the process of how\nyou're going to solve your problems.\n\n406\n00:25:23.440 --> 00:25:27.572\nWhat are the tools available to you\nin order to solve those issues?\n\n407\n00:25:27.572 --> 00:25:31.472\n&gt;&gt; So Justin, is there really any\ndifference whether we do the export or\n\n408\n00:25:31.472 --> 00:25:33.010\nthe save that you know of?\n\n409\n00:25:33.010 --> 00:25:37.390\n&gt;&gt; So here's what I, maybe you just want\nto take a container that you've modified.\n\n410\n00:25:37.390 --> 00:25:40.350\nYou don't want to\nnecessarily build an image.\n\n411\n00:25:41.470 --> 00:25:42.750\nIt's an application.\n\n412\n00:25:42.750 --> 00:25:46.650\nIt just needs to run as a container,\nand I want to export it.\n\n413\n00:25:46.650 --> 00:25:50.628\nI don't necessarily want to create an\nimage from that container to move around,\n\n414\n00:25:50.628 --> 00:25:52.040\nso then I would export that.\n\n415\n00:25:52.040 --> 00:25:55.384\nSo we've messed around with\nthat busy box initially,\n\n416\n00:25:55.384 --> 00:25:59.978\nmade those configurations, and\nthen I'm just gonna export it to a .tar.\n\n417\n00:25:59.978 --> 00:26:01.478\nBut if you already have the image,\n\n418\n00:26:01.478 --> 00:26:04.850\nit makes sense just to save the image\ninstead of starting up the container.\n\n419\n00:26:04.850 --> 00:26:09.623\nSo it doesn't matter really what path you\ntake, it ends up being the same result.\n\n420\n00:26:09.623 --> 00:26:10.827\n&gt;&gt; Sounds good, Justin.\n\n421\n00:26:10.827 --> 00:26:14.292\nThat's a lot of information for us to\nthink about when we start talking about\n\n422\n00:26:14.292 --> 00:26:17.490\nstoring these images somewhere\nthat we really need to get to.\n\n423\n00:26:17.490 --> 00:26:21.186\nNow remember that in this episode Justin\nshowed us how we can take a container,\n\n424\n00:26:21.186 --> 00:26:23.426\nnot necessarily just an image,\nand go ahead and\n\n425\n00:26:23.426 --> 00:26:25.891\nbe able to save that up to\nthe docker hub if we need to.\n\n426\n00:26:25.891 --> 00:26:29.559\nAs well as being able to store it\non to maybe a local file share or\n\n427\n00:26:29.559 --> 00:26:33.830\nprivate share that's not gonna be\nexposed to the public as well.\n\n428\n00:26:33.830 --> 00:26:38.349\nAnd so we saw all the differences in\nterms of how to do that here during\n\n429\n00:26:38.349 --> 00:26:39.871\nthis episode as well.\n\n430\n00:26:39.871 --> 00:26:43.688\nJustin also showed us where we\ncould create the different tags, so\n\n431\n00:26:43.688 --> 00:26:47.982\nthat we can make sure that we keep those\ndifferences the way that we want to,\n\n432\n00:26:47.982 --> 00:26:52.160\nand what happens if we miss-tag it and\nhow we can fix that as well.\n\n433\n00:26:52.160 --> 00:26:55.565\nSo there's a lot of information that's\ngood information, very practical\n\n434\n00:26:55.565 --> 00:26:58.979\ninformation as you begin to work with\nmore and more different Docker files.\n\n435\n00:26:58.979 --> 00:27:02.639\nThere's no doubt, especially as\na beginner, if that's what you are,\n\n436\n00:27:02.639 --> 00:27:06.659\nis you're gonna make mistakes and Justin\nalso showed us the thought process and\n\n437\n00:27:06.659 --> 00:27:09.410\nhow we can go and\nresolve the issues as well.\n\n438\n00:27:09.410 --> 00:27:11.010\nSo thank you again, Justin,\nfor helping us out here.\n\n439\n00:27:11.010 --> 00:27:15.580\nAnd thank you also for\nwatching this episode.\n\n440\n00:27:15.580 --> 00:27:17.314\nBut great place for us to sign off.\n\n441\n00:27:17.314 --> 00:27:20.280\nFor ITPRO.TV I've been\nyour host Ronnie Wong.\n\n442\n00:27:20.280 --> 00:27:21.029\n&gt;&gt; And I'm Justin Dennison.\n\n443\n00:27:21.029 --> 00:27:23.293\n&gt;&gt; Stay tuned right here for\nmore Introduction to Docker shows.\n\n444\n00:27:23.293 --> 00:27:30.995\n[MUSIC]\n\n445\n00:27:30.995 --> 00:27:33.428\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "210830191"
        },
        {
          "description": "In this episode, Daniel and Justin use Docker to create a runtime environment for a NodeJS web application. They cover the basics of having applications live in a container.",
          "length": "1827",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001-sm.jpg",
          "title": "Building an Application with Docker",
          "transcript": "WEBVTT\n\n1\n00:00:00.074 --> 00:00:01.289\nWelcome to ITProTV.\n\n2\n00:00:01.289 --> 00:00:02.551\nI'm your host, Don Pezet.\n\n3\n00:00:02.551 --> 00:00:08.226\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.226 --> 00:00:12.388\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.388 --> 00:00:14.436\n&gt;&gt; All right, greetings, everyone, and\n\n6\n00:00:14.436 --> 00:00:16.795\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.795 --> 00:00:19.808\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.808 --> 00:00:22.410\nwe are back with more of\nour Intro to Docker series.\n\n9\n00:00:22.410 --> 00:00:26.640\nAnd of course, joining us in the studio is\nthe person that knows all things Docker,\n\n10\n00:00:26.640 --> 00:00:28.220\nour good friend, Mr Justin Dennison.\n\n11\n00:00:28.220 --> 00:00:30.480\nJustin, my man, how goes it today?\n\n12\n00:00:30.480 --> 00:00:31.260\n&gt;&gt; It goes well, Daniel.\n\n13\n00:00:31.260 --> 00:00:32.020\nHow are you today?\n\n14\n00:00:32.020 --> 00:00:33.240\n&gt;&gt; Can't complain, thanks for asking.\n\n15\n00:00:33.240 --> 00:00:36.790\n&gt;&gt; I feel like you're overselling\nthat all things Docker stuff.\n\n16\n00:00:36.790 --> 00:00:37.895\n&gt;&gt; Just go with it, man.\n\n17\n00:00:37.895 --> 00:00:41.194\n[LAUGH]\n&gt;&gt; Mainly because it is very complex, but\n\n18\n00:00:41.194 --> 00:00:43.734\nwe have been wading our\nway through Docker.\n\n19\n00:00:43.734 --> 00:00:47.740\nAnd we actually have a great amount\nof tools in our repertoire thus far.\n\n20\n00:00:47.740 --> 00:00:51.380\nWe're actually to a point to where\nwe can run containers, build images.\n\n21\n00:00:51.380 --> 00:00:54.814\nBut now how do I actually use\nthat technology that I've been\n\n22\n00:00:54.814 --> 00:00:57.293\nworking with to bundle up an application?\n\n23\n00:00:57.293 --> 00:01:02.150\nNow there's a couple of things you should\nknow before we start down that road.\n\n24\n00:01:02.150 --> 00:01:04.350\nI have chosen Node.js as our runtime,\n\n25\n00:01:04.350 --> 00:01:08.260\nnot because of any other\nreason than I had to pick one.\n\n26\n00:01:08.260 --> 00:01:15.030\nAnd well, it will work the same on Python,\nRuby, Go, Java, any JVM language.\n\n27\n00:01:15.030 --> 00:01:17.440\nThe setup's gonna be a little\nbit different but abstractly,\n\n28\n00:01:17.440 --> 00:01:19.780\nthe same process is gonna occur.\n\n29\n00:01:19.780 --> 00:01:25.730\nIn addition to, well, this is for\na deployment type mindset.\n\n30\n00:01:25.730 --> 00:01:27.705\nIt is not for an active development cycle.\n\n31\n00:01:27.705 --> 00:01:29.395\nIf you're a developer there,\n\n32\n00:01:29.395 --> 00:01:33.170\nI would actually mount the application\nsource code into the volume.\n\n33\n00:01:33.170 --> 00:01:36.343\nAnd then set up a different\ncontainer that would be the runtime.\n\n34\n00:01:36.343 --> 00:01:40.530\nThis is going to be all bundled up,\nsend this off to Docker hub and\n\n35\n00:01:40.530 --> 00:01:43.840\nthen run this through continuous\nintegration to run my test.\n\n36\n00:01:43.840 --> 00:01:47.130\nAlso do an inspection for\nsecurity flaws and the such.\n\n37\n00:01:47.130 --> 00:01:51.060\nSo those are important things to keep\nin your mind before we get started.\n\n38\n00:01:51.060 --> 00:01:54.310\nBut I think there's no better time\nthan now than let's take a look at\n\n39\n00:01:54.310 --> 00:01:55.540\nhow things are gonna play out.\n\n40\n00:01:55.540 --> 00:01:56.930\nLet's take a look at my screen here.\n\n41\n00:01:56.930 --> 00:01:58.560\nAnd so I'm on my desktop.\n\n42\n00:01:58.560 --> 00:02:01.990\nAnd if I ls here,\nI got this random folder.\n\n43\n00:02:01.990 --> 00:02:05.114\nBut I also have nodeapp version 1,\n2 and 3.\n\n44\n00:02:05.114 --> 00:02:10.270\nNow if I was actually on a development\ncycle, I would not keep multiple copies.\n\n45\n00:02:10.270 --> 00:02:13.717\nI would use some version control\nsystem like Git or Mercurial.\n\n46\n00:02:13.717 --> 00:02:17.383\nBut to keep things transparent and\na little easier to follow,\n\n47\n00:02:17.383 --> 00:02:21.770\nI've kept different copies of\nthe application in its different states.\n\n48\n00:02:22.920 --> 00:02:27.490\nIn addition to, we're gonna assume\nthat these are all finally done.\n\n49\n00:02:27.490 --> 00:02:28.360\nNow what does that mean?\n\n50\n00:02:28.360 --> 00:02:30.620\nThat means that you can bundle them up and\ndeploy them.\n\n51\n00:02:31.930 --> 00:02:35.358\nAnd we're going to work\nthrough these one by one.\n\n52\n00:02:35.358 --> 00:02:37.810\nYou gotta definitely finish\nout the folder name there.\n\n53\n00:02:37.810 --> 00:02:38.620\n&gt;&gt; It does help.\n\n54\n00:02:38.620 --> 00:02:39.630\n&gt;&gt; It does help.\n\n55\n00:02:39.630 --> 00:02:43.480\nAnd notice that all I\nhave in here is index.js.\n\n56\n00:02:43.480 --> 00:02:45.980\nWell, you don't have to\nknow anything about Node.\n\n57\n00:02:45.980 --> 00:02:50.570\nAll the source code will be\navailable to you in the show notes.\n\n58\n00:02:50.570 --> 00:02:54.261\nBut there will be a liittle bit\nof programming here and there.\n\n59\n00:02:54.261 --> 00:02:57.616\nYou don't have to know how to do it\nother than this little tiny segments.\n\n60\n00:02:57.616 --> 00:03:00.463\nMost of it will be pre-done for you.\n\n61\n00:03:00.463 --> 00:03:06.223\nAnd well, the whole goal is to focus on\nbundling this up into a Docker image so\n\n62\n00:03:06.223 --> 00:03:11.458\nwe can ship that off to Docker Hub and\nthen deploy that as a container.\n\n63\n00:03:11.458 --> 00:03:13.600\nWe're gonna start very simply though.\n\n64\n00:03:13.600 --> 00:03:15.820\nSo let's take a look at index.js.\n\n65\n00:03:15.820 --> 00:03:21.350\nAnd all it's going to say is\nconsole.log('Running on NodeJS!.');.\n\n66\n00:03:21.350 --> 00:03:22.360\nOkay, well what does that mean?\n\n67\n00:03:22.360 --> 00:03:23.990\nI don't know anything about Node.\n\n68\n00:03:23.990 --> 00:03:29.646\nWell, if I just run this on my computer,\nI have Node installed on my computer.\n\n69\n00:03:29.646 --> 00:03:32.392\nIt just prints it out running on Node.js.\n\n70\n00:03:32.392 --> 00:03:35.957\nWell, that's great, but\nif you can install it on your computer,\n\n71\n00:03:35.957 --> 00:03:38.959\nwhy would we ever even care\nabout building a container?\n\n72\n00:03:40.610 --> 00:03:44.786\nWell, the fact being is every time I\nwanted to deploy this application,\n\n73\n00:03:44.786 --> 00:03:49.030\nI would need to make sure that I provision\nsome Linux server, either a VM or\n\n74\n00:03:49.030 --> 00:03:51.848\nan EC2 instance, or\nsomething of that nature.\n\n75\n00:03:51.848 --> 00:03:55.764\nDo all the setup and\nmake sure Node's installed, and\n\n76\n00:03:55.764 --> 00:03:58.470\nthen actually set up to run, right?\n\n77\n00:03:58.470 --> 00:04:02.530\nI have to expose it on port 80 in order\nto make it available on the Internet.\n\n78\n00:04:02.530 --> 00:04:03.860\nAnd it's just a lot of work.\n\n79\n00:04:03.860 --> 00:04:05.700\nAnd this manual maintenance, this set up,\n\n80\n00:04:05.700 --> 00:04:09.100\nthis tendency kind of\naggregation is a nightmare.\n\n81\n00:04:09.100 --> 00:04:12.310\nAs someone who has actually\ndone that from time to time,\n\n82\n00:04:12.310 --> 00:04:15.510\nsetting up Apache servers and\nstuff, it is not fun time.\n\n83\n00:04:15.510 --> 00:04:18.550\nSo I like the Docker ecosystem\nbecause it makes this easy.\n\n84\n00:04:18.550 --> 00:04:21.350\nYou do it one time and you're done.\n\n85\n00:04:21.350 --> 00:04:24.956\nNow what we need to do is build\na Dockerfile that takes this and\n\n86\n00:04:24.956 --> 00:04:26.732\nputs it kind of all together.\n\n87\n00:04:26.732 --> 00:04:29.099\nWe're gonna start simply and\nmake sure that it runs and\n\n88\n00:04:29.099 --> 00:04:30.660\nlook through a few commands.\n\n89\n00:04:30.660 --> 00:04:35.840\nBut I think there's no better time than\nnow to start building up that Dockerfile.\n\n90\n00:04:35.840 --> 00:04:38.090\nSo you can use any text editor you want.\n\n91\n00:04:38.090 --> 00:04:42.432\nI'm using Vim, or VI is available to you.\n\n92\n00:04:42.432 --> 00:04:45.142\nNano or Adam or any of those,\nbut this is just so\n\n93\n00:04:45.142 --> 00:04:48.840\nyou don't get a little motion\nsick as I swipe between screens.\n\n94\n00:04:49.870 --> 00:04:52.790\nAnd it slows me down a little bit and\nkeeps me honest.\n\n95\n00:04:54.100 --> 00:04:55.260\nSo what am I gonna do?\n\n96\n00:04:55.260 --> 00:04:59.430\nWell, I know from my experience\nthat I know a great deal.\n\n97\n00:04:59.430 --> 00:05:03.070\nWell, when I say a great deal,\nI know a fair amount\n\n98\n00:05:03.070 --> 00:05:07.280\nabout Debian-based Linux distributions,\nthat well,\n\n99\n00:05:07.280 --> 00:05:11.950\nI can provision a great deal of servers\nand I can get Node running fairly quickly.\n\n100\n00:05:11.950 --> 00:05:17.040\nI will forewarn you, on Docker Hub, there\nis a Node.js platform already available.\n\n101\n00:05:17.040 --> 00:05:18.662\nI can say from Node.js, and\n\n102\n00:05:18.662 --> 00:05:23.800\nit will pull a Docker image that already\nhas Node installed and everything.\n\n103\n00:05:23.800 --> 00:05:26.881\nI'm gonna go through this to show you,\nwell, what if I'm not running or\n\n104\n00:05:26.881 --> 00:05:29.473\nsomething that it already has\nthat available to me, right?\n\n105\n00:05:29.473 --> 00:05:33.408\nMaybe it's some weird JVM language\nthat keeps cropping up and\n\n106\n00:05:33.408 --> 00:05:35.764\nI'm building this application in.\n\n107\n00:05:35.764 --> 00:05:37.453\nI need to know how to do this.\n\n108\n00:05:37.453 --> 00:05:39.870\nSo we're starting from a base Linux.\n\n109\n00:05:39.870 --> 00:05:43.660\nAnd then we're gonna build up our runtimes\nso our application will be there.\n\n110\n00:05:43.660 --> 00:05:45.550\nAll right, so starting with Ubuntu,\n\n111\n00:05:45.550 --> 00:05:49.880\nthat's my base image,\nI'm going to issue a few run commands.\n\n112\n00:05:49.880 --> 00:05:53.940\nAnd the first one is apt get update -y.\n\n113\n00:05:53.940 --> 00:05:56.070\nMake sure you put that -y in\nthere because if you don't,\n\n114\n00:05:56.070 --> 00:05:57.230\nit's gonna say, are you sure?\n\n115\n00:05:57.230 --> 00:05:59.311\nAnd then your build's gonna fail.\n\n116\n00:05:59.311 --> 00:06:04.031\nAnd then I'm going to\nrun apt get install if I\n\n117\n00:06:04.031 --> 00:06:08.505\ncan spell apt get appropriately, curl.\n\n118\n00:06:08.505 --> 00:06:10.843\nAlso gonna issue a -y.\n\n119\n00:06:10.843 --> 00:06:14.239\nOkay, well-\n&gt;&gt; Kind of a silent install thing you got\n\n120\n00:06:14.239 --> 00:06:14.852\ngoing on.\n\n121\n00:06:14.852 --> 00:06:16.434\n&gt;&gt; Right.\n\n122\n00:06:16.434 --> 00:06:21.311\n&gt;&gt; Typically if you're doing anything with\naptitude, you're definitely gonna have\n\n123\n00:06:21.311 --> 00:06:26.185\na -y or a -f or something, where there's\nno prompts that require you to interact,\n\n124\n00:06:26.185 --> 00:06:28.580\nbecause the Docker build will fail.\n\n125\n00:06:28.580 --> 00:06:30.070\nAnd we've seen that in previous episodes.\n\n126\n00:06:30.070 --> 00:06:31.400\nBut this is a reminder,\n\n127\n00:06:31.400 --> 00:06:35.280\ncuz this was a point of frustration when\nI first started playing around with this.\n\n128\n00:06:35.280 --> 00:06:39.950\nNow with that said, notice that I'm\nkeeping these on separate lines.\n\n129\n00:06:39.950 --> 00:06:44.473\nWhen I'm done, I would probably move\nthis all into a single run command, or\n\n130\n00:06:44.473 --> 00:06:46.888\nat least start pushing these together.\n\n131\n00:06:46.888 --> 00:06:50.190\nBut I'm utilizing\nthe cache as separate runs.\n\n132\n00:06:50.190 --> 00:06:52.958\nThat way,\nif I need to change this line, well,\n\n133\n00:06:52.958 --> 00:06:55.606\nthen that's the only\nline that has to rerun.\n\n134\n00:06:55.606 --> 00:06:59.230\nWell, and anything after that\nbecause the cache has changed.\n\n135\n00:06:59.230 --> 00:07:02.910\nAll right, so now that I have curl, well,\nI'm gonna type some things here and\n\n136\n00:07:02.910 --> 00:07:04.950\nthen we're gonna talk\nabout what they're doing.\n\n137\n00:07:06.020 --> 00:07:09.103\nSo I'm gonna run\n\n138\n00:07:09.103 --> 00:07:13.728\ncurl -sl, https://\n\n139\n00:07:13.728 --> 00:07:21.665\ndeb.nodesource.com/setup_6.x.\n\n140\n00:07:21.665 --> 00:07:23.720\nAnd then I'm gonna pipe that to bash.\n\n141\n00:07:25.210 --> 00:07:30.589\nAnd finally, well, finally for\nnow, finally for now,\n\n142\n00:07:30.589 --> 00:07:38.350\nwe are going to say, apt-get install\nnodejs and add a -y to that as well.\n\n143\n00:07:38.350 --> 00:07:40.670\nAll right, we're gonna test this.\n\n144\n00:07:40.670 --> 00:07:43.210\nI'm not gonna move any further with\nactually building an application for\n\n145\n00:07:43.210 --> 00:07:45.900\nnow because we wanna make\nsure that this builds.\n\n146\n00:07:45.900 --> 00:07:47.888\nAnd this is a great way to\nthink about Docker images.\n\n147\n00:07:47.888 --> 00:07:52.960\nIf your runtime doesn't exist, let's say\nthat Node didn't exist on Docker Hub,\n\n148\n00:07:52.960 --> 00:07:57.027\nwell, I could build this image,\nsave it to my Docker Hub account.\n\n149\n00:07:57.027 --> 00:08:00.972\nAnd then use it as the base image,\nfor another Docker file.\n\n150\n00:08:00.972 --> 00:08:06.359\nAnd I can then inherit this setup that I'm\ncreating for the respective [CROSSTALK].\n\n151\n00:08:06.359 --> 00:08:09.087\n&gt;&gt; So no reinventing the wheel once\nyou've got the, just like you like it,\n\n152\n00:08:09.087 --> 00:08:10.352\nyou bake that cookie perfectly.\n\n153\n00:08:10.352 --> 00:08:13.237\nYou can redo the recipe over and\nover again with just a copy and\n\n154\n00:08:13.237 --> 00:08:14.266\npaste kind of thing.\n\n155\n00:08:14.266 --> 00:08:17.159\n&gt;&gt; Right, and\nactually it even gets simpler than that.\n\n156\n00:08:17.159 --> 00:08:21.950\nThis FROM command here,\nbecomes instead of FROM ubuntu,\n\n157\n00:08:21.950 --> 00:08:25.905\nit becomes in this case, justindevpro/\n&gt;&gt; Right.\n\n158\n00:08:25.905 --> 00:08:27.940\n&gt;&gt; Node, so they're not gonna\nuse that as a base image.\n\n159\n00:08:27.940 --> 00:08:29.260\nSo we're gonna see that.\n\n160\n00:08:29.260 --> 00:08:30.399\nOne final thought here.\n\n161\n00:08:30.399 --> 00:08:34.974\nIn recent versions, apt-get,\nyou can actually shorten that to apt for\n\n162\n00:08:34.974 --> 00:08:36.474\nthe Aptitude manager,\n\n163\n00:08:36.474 --> 00:08:41.661\nyou will get some weird errors about not\nbeing TTY compliant and all these things.\n\n164\n00:08:41.661 --> 00:08:45.598\nSo I tend to use with apt-get, even though\nwhen I'm messing around in Linux I make\n\n165\n00:08:45.598 --> 00:08:49.095\nsure that I command to apt,\njust because I don't like typing apt-get.\n\n166\n00:08:49.095 --> 00:08:52.047\nBut in Dockerfiles you\nget little warnings about\n\n167\n00:08:52.047 --> 00:08:54.786\nnot having appropriate outputs sometimes.\n\n168\n00:08:54.786 --> 00:08:55.878\nSo leave it there.\n\n169\n00:08:55.878 --> 00:08:58.037\nSo let's go ahead and save this.\n\n170\n00:08:58.037 --> 00:09:02.596\nI did not mean to get out of it, though.\n\n171\n00:09:02.596 --> 00:09:04.776\n&gt;&gt; [LAUGH]\n&gt;&gt; But I did saved it.\n\n172\n00:09:04.776 --> 00:09:05.418\n&gt;&gt; Old habits, right?\n\n173\n00:09:05.418 --> 00:09:05.983\n&gt;&gt; Old habits.\n\n174\n00:09:05.983 --> 00:09:09.330\nBut this one command\nhere was kind of weird.\n\n175\n00:09:09.330 --> 00:09:12.229\nLike where would I,\nhow would I know this, right?\n\n176\n00:09:12.229 --> 00:09:15.541\nHow do I know to type this,\nJustin, you just made that up.\n\n177\n00:09:15.541 --> 00:09:16.403\nNo, I didn't.\n\n178\n00:09:16.403 --> 00:09:20.361\nI had to look this up because this is\nwhere my node run time comes from.\n\n179\n00:09:20.361 --> 00:09:22.954\nAnd I was working on Ubuntu.\n\n180\n00:09:22.954 --> 00:09:25.909\nSo let's go take a look\nwhere did that come from.\n\n181\n00:09:25.909 --> 00:09:31.683\nAnd let's go to Google and\ntype, node.js ubuntu.\n\n182\n00:09:31.683 --> 00:09:35.709\nNow this could of easily been Fedora,\nor Red Hat or Cent.\n\n183\n00:09:35.709 --> 00:09:39.518\nAnd Installing Node js\nvia package manager.\n\n184\n00:09:39.518 --> 00:09:45.030\nAnd here is the list of all\nthese distributions here.\n\n185\n00:09:45.030 --> 00:09:48.367\nArch, Debian based,\nEnterprise Linux, Fedora.\n\n186\n00:09:48.367 --> 00:09:51.743\nSome of these I don't know, and even\nWindows, yeah, which is kind of weird,\n\n187\n00:09:51.743 --> 00:09:54.249\ncuz I don't think of Windows\nas having package managers,\n\n188\n00:09:54.249 --> 00:09:56.213\nbut it does have a couple\nof third party ones.\n\n189\n00:09:56.213 --> 00:09:57.373\n&gt;&gt; Better late than never, right?\n\n190\n00:09:57.373 --> 00:09:58.451\n&gt;&gt; That is exactly right.\n\n191\n00:09:58.451 --> 00:10:01.160\n&gt;&gt; [LAUGH]\n&gt;&gt; So I'm gonna stay with the Debian.\n\n192\n00:10:01.160 --> 00:10:06.366\nAnd notice, here's that command,\nkinda, kinda.\n\n193\n00:10:06.366 --> 00:10:10.514\nHere's that command here that\nI've put into my Dockerfile.\n\n194\n00:10:10.514 --> 00:10:12.937\nAnd what this does is it grab a setup.\n\n195\n00:10:12.937 --> 00:10:18.272\nIt adds a key, it adds it to your\nlist of repositories for apt-get.\n\n196\n00:10:18.272 --> 00:10:22.630\nAnd then I have the ability to\napt-get install In your Dockerfile,\n\n197\n00:10:22.630 --> 00:10:24.928\nyou could use the package manager.\n\n198\n00:10:24.928 --> 00:10:29.975\nYou could also use wget or\ncURL to download the binary, and\n\n199\n00:10:29.975 --> 00:10:34.816\nthen you use your package manager,\nwhether BEM or DNF or\n\n200\n00:10:34.816 --> 00:10:40.074\napt or whatever to install from\nthat Debian package, okay?\n\n201\n00:10:40.074 --> 00:10:43.413\nAnd I think misspoke there,\nthey're a little bit different,\n\n202\n00:10:43.413 --> 00:10:47.828\nnot quite the package manager there but\nlike a, your Debian packaging resources.\n\n203\n00:10:47.828 --> 00:10:53.108\nI don't recommend that because if you\ngo to rebuild this, like let's say that\n\n204\n00:10:53.108 --> 00:10:58.080\nnode has an update, this update will\nstay current with node version six.\n\n205\n00:10:58.080 --> 00:11:02.318\nOtherwise I'm gonna have to change\nthe URL for the actual binary, so\n\n206\n00:11:02.318 --> 00:11:06.423\nI tend to use package managers in\nmy Docker build files where I can.\n\n207\n00:11:06.423 --> 00:11:11.485\nSo if we notice here though, Daniel,\ndo you see anything that's a little\n\n208\n00:11:11.485 --> 00:11:15.991\nodd from this command that's\nhighlighted to this command here?\n\n209\n00:11:15.991 --> 00:11:19.745\n&gt;&gt; Yeah,\nyou're definitely missing that sudo -E.\n\n210\n00:11:19.745 --> 00:11:21.573\n&gt;&gt; Yeah, sudo -E's not there.\n\n211\n00:11:21.573 --> 00:11:23.823\n&gt;&gt; Yeah.\n&gt;&gt; So, and then a sudo here, and\n\n212\n00:11:23.823 --> 00:11:25.051\njust as a reminder,\n\n213\n00:11:25.051 --> 00:11:29.551\nwhen you're doing a Docker build you\nalready have elevated privileges.\n\n214\n00:11:29.551 --> 00:11:32.369\nSo if you go to look, right?\n\n215\n00:11:32.369 --> 00:11:36.439\nI needed to add this node source\nto the Debian package manager.\n\n216\n00:11:36.439 --> 00:11:39.389\nAnd then I have to get\nsudo apt-get installed.\n\n217\n00:11:39.389 --> 00:11:43.161\nOkay, well, if you type sudo,\nyour Docker build will fail.\n\n218\n00:11:43.161 --> 00:11:45.463\nSo keep that in mind, be very careful.\n\n219\n00:11:45.463 --> 00:11:49.590\nYou're already elevated at what\nyou can do inside of a Dockerfile.\n\n220\n00:11:49.590 --> 00:11:52.705\nDon't need sudo,\njust run it and let it rip.\n\n221\n00:11:52.705 --> 00:11:55.632\n&gt;&gt; Think Node Js with Pink and\na little addendum there on their website,\n\n222\n00:11:55.632 --> 00:11:59.231\nletting you know if you're doing this in\nDocker, forget that whole sudo business.\n\n223\n00:11:59.231 --> 00:12:01.684\n&gt;&gt; Well, maybe they just make\nan assumption that, well,\n\n224\n00:12:01.684 --> 00:12:05.188\nif you're doing anything in Docker,\nyou don't need the sudo business at all.\n\n225\n00:12:05.188 --> 00:12:06.696\n&gt;&gt; Yeah.\n&gt;&gt; And that's for\n\n226\n00:12:06.696 --> 00:12:08.267\nthe most part-\n&gt;&gt; It's also an implied thing.\n\n227\n00:12:08.267 --> 00:12:08.862\n&gt;&gt; Yep, so.\nSo\n\n228\n00:12:08.862 --> 00:12:13.770\nI'm going to actually run an appropriate\ncommand and my Dockerfile's done.\n\n229\n00:12:13.770 --> 00:12:16.128\nWe're gonna test this before we\nstart building our application.\n\n230\n00:12:16.128 --> 00:12:20.451\nWell, because I wanna make sure that\nthe actual run time is built up.\n\n231\n00:12:20.451 --> 00:12:25.387\nSo docker build -t, and\nusing our naming convention,\n\n232\n00:12:25.387 --> 00:12:28.124\nthis is my Docker Hub profile.\n\n233\n00:12:28.124 --> 00:12:33.505\nAnd /, I wanna call this node base,\nbecause then I would be able to do,\n\n234\n00:12:33.505 --> 00:12:39.812\nfrom justindevpro/node:base, and\nthen build another Docker image from that.\n\n235\n00:12:39.812 --> 00:12:42.997\nThat's very handy, and\nI'm gonna build from here.\n\n236\n00:12:42.997 --> 00:12:47.153\nSo, running the build context and\nrunning apt-get update.\n\n237\n00:12:47.153 --> 00:12:50.283\nNow sadly,\nI've done a little bit of research, and\n\n238\n00:12:50.283 --> 00:12:54.696\nI've said this in a previous episode but\njust as a reminder apt-get is for\n\n239\n00:12:54.696 --> 00:12:57.698\nsome reason painfully slow\non the initial build.\n\n240\n00:12:57.698 --> 00:13:02.792\nThat's why you should utilize\nthe caching system for your Dockerfiles.\n\n241\n00:13:02.792 --> 00:13:06.649\nSo it will take a little while,\nand this is not nearly as fast.\n\n242\n00:13:06.649 --> 00:13:08.248\nI mean it's still pretty fast, but\n\n243\n00:13:08.248 --> 00:13:11.515\nit's not nearly as fast as it would\nbe if you're in a base Linux install.\n\n244\n00:13:11.515 --> 00:13:16.674\nAnd I think that's getting a little better\nfrom previous iterations that I've seen,\n\n245\n00:13:16.674 --> 00:13:20.150\nbut now because I'm running cURL and\nthis is up and going-\n\n246\n00:13:20.150 --> 00:13:22.277\n&gt;&gt; It's updating, it's gonna take a bit.\n\n247\n00:13:22.277 --> 00:13:23.446\n&gt;&gt; Yeah, exactly.\n\n248\n00:13:23.446 --> 00:13:27.016\nSo we're utilizing those\nindividual run commands to\n\n249\n00:13:27.016 --> 00:13:29.563\nminimize this on subsequent builds.\n\n250\n00:13:29.563 --> 00:13:32.727\nSo running apt-get installed in Node.js,\nand\n\n251\n00:13:32.727 --> 00:13:35.435\nwe just have to give\nit little bit of time.\n\n252\n00:13:35.435 --> 00:13:37.830\nNow, why we're giving it some time.\n\n253\n00:13:37.830 --> 00:13:39.428\nWell, I-\n&gt;&gt; You gave it enough time.\n\n254\n00:13:39.428 --> 00:13:40.321\n&gt;&gt; I gave it enough time.\n\n255\n00:13:40.321 --> 00:13:43.550\n&gt;&gt; [LAUGH]\n&gt;&gt; But before we do, just as a reminder,\n\n256\n00:13:43.550 --> 00:13:47.863\nthis application is going to run and\nquit as soon as we actually build it up.\n\n257\n00:13:47.863 --> 00:13:52.130\nAnd because I've used these\nindividual run commands,\n\n258\n00:13:52.130 --> 00:13:55.306\nI don't have to worry about that taking so\n\n259\n00:13:55.306 --> 00:14:00.042\nmuch time to rebuild because I\nhave these individual layers.\n\n260\n00:14:00.042 --> 00:14:03.840\nSo now that I have my base image,\nI know that it works.\n\n261\n00:14:03.840 --> 00:14:08.382\nOkay, let's actually put\nthis into our Dockerfile.\n\n262\n00:14:08.382 --> 00:14:12.899\nSo if I hop back into my\nDockerfile right after I apt-get\n\n263\n00:14:12.899 --> 00:14:16.657\ninstall Node.js, well, what do I wanna do?\n\n264\n00:14:16.657 --> 00:14:19.064\nI have that index.js file.\n\n265\n00:14:19.064 --> 00:14:22.324\nThat's actually what I want to run,\nall right?\n\n266\n00:14:22.324 --> 00:14:27.727\nSo I'm gonna stay here and\nwell, there's a couple of ways.\n\n267\n00:14:27.727 --> 00:14:28.755\nAnd I'm gonna show you one and\n\n268\n00:14:28.755 --> 00:14:31.524\nthen we're gonna look at the documentation\nto see what the recommendation is.\n\n269\n00:14:31.524 --> 00:14:40.104\nI'm going to add index.js to\na folder inside of my image, right?\n\n270\n00:14:40.104 --> 00:14:46.110\nThen this will be evident in\nthe container, called /app/index.js.\n\n271\n00:14:46.110 --> 00:14:51.060\nNow do use file extensions here, because\nindex.js, if I just left this at /app,\n\n272\n00:14:51.060 --> 00:14:55.514\nit would actually take that file and\nrename it as a folder or it would try to,\n\n273\n00:14:55.514 --> 00:14:57.518\nand then you get some weirdness.\n\n274\n00:14:57.518 --> 00:14:59.713\nNot that I've done that before-\n&gt;&gt; [LAUGH]\n\n275\n00:14:59.713 --> 00:15:01.740\n&gt;&gt; But definitely, I'd be aware of-\n\n276\n00:15:01.740 --> 00:15:02.309\n&gt;&gt; The word on the street is.\n\n277\n00:15:02.309 --> 00:15:03.739\n&gt;&gt; Yeah, so I've heard.\n\n278\n00:15:03.739 --> 00:15:10.690\nSo I'm gonna add index.js to the image\nat /app/index.js, all right.\n\n279\n00:15:10.690 --> 00:15:15.537\nAnd then I'm gonna do one other thing,\nand we're gonna come back to this add\n\n280\n00:15:15.537 --> 00:15:19.192\ncommand cuz there's a,\nit could be a little iffy there.\n\n281\n00:15:19.192 --> 00:15:22.341\nI'm gonna set the working\ndirectory to /app,\n\n282\n00:15:22.341 --> 00:15:27.234\nand that means where is your container\ngoing to start based on this image?\n\n283\n00:15:27.234 --> 00:15:31.232\nSo if I were to Docker\nrun-IT this container,\n\n284\n00:15:31.232 --> 00:15:35.853\nthis would actually put me\nin this folder by default.\n\n285\n00:15:35.853 --> 00:15:40.360\nSo I can set where the container starts\nby default by using this WORXDIR.\n\n286\n00:15:40.360 --> 00:15:41.854\nNow we haven't seen this previously, but\n\n287\n00:15:41.854 --> 00:15:43.980\nthis is important as you're\nbuilding these applications.\n\n288\n00:15:43.980 --> 00:15:47.465\nAnd then finally we need,\nwe'll how is this going to start?\n\n289\n00:15:47.465 --> 00:15:49.550\nHow are we gonna start this up?\n\n290\n00:15:49.550 --> 00:15:52.273\nAnd we're just gonna go with the command,\nbecause maybe this wants to be,\n\n291\n00:15:52.273 --> 00:15:55.101\nthen we want this to be over-runnable,\nor overridable, over-runnable.\n\n292\n00:15:55.101 --> 00:15:58.000\nOverridable, and\n\n293\n00:15:58.000 --> 00:16:03.623\nwe're gonna say node, Index.js.\n\n294\n00:16:03.623 --> 00:16:06.697\nAll right, now I'm gonna come back and\n\n295\n00:16:06.697 --> 00:16:10.870\nmess this up a little bit,\nhopefully this works.\n\n296\n00:16:10.870 --> 00:16:12.810\nWe're assuming this works and\nafter it does,\n\n297\n00:16:12.810 --> 00:16:16.300\nwe're gonna mess it up a little bit and\nsee how things play out.\n\n298\n00:16:16.300 --> 00:16:17.980\nSo I'm gonna run that Docker build again.\n\n299\n00:16:17.980 --> 00:16:23.570\nBut instead of saying base as my image,\nI'm going to say,\n\n300\n00:16:23.570 --> 00:16:30.542\nnodeapp, actually I'm gonna call\nthis nodeapp:1.0, all right.\n\n301\n00:16:30.542 --> 00:16:34.275\nSo I'm calling this\njustindevpro/nodeapp:1.0 and I'm still\n\n302\n00:16:34.275 --> 00:16:38.392\nbuilding from the same directory,\nI'm just tagging this image a little bit\n\n303\n00:16:38.392 --> 00:16:43.380\ndifferently, just so I can, I know that\nit's different than that node base image.\n\n304\n00:16:43.380 --> 00:16:45.457\nSo I rerun, that was fast.\n\n305\n00:16:45.457 --> 00:16:46.450\n&gt;&gt; Super fast.\n\n306\n00:16:46.450 --> 00:16:47.345\n&gt;&gt; Super fast.\n\n307\n00:16:47.345 --> 00:16:48.690\n&gt;&gt; Because I don't have to re-update.\n\n308\n00:16:48.690 --> 00:16:50.580\nAll those other\nintermediate containers and\n\n309\n00:16:50.580 --> 00:16:54.930\nimages already existed from\nthe previous build of node base.\n\n310\n00:16:54.930 --> 00:16:57.960\nSo now all I had to do was\nre-run from this add command.\n\n311\n00:16:57.960 --> 00:17:01.630\nThe moment of truth though, does it run?\n\n312\n00:17:01.630 --> 00:17:05.489\nWell, let's find out,\ncuz I'm not infallible,\n\n313\n00:17:05.489 --> 00:17:07.928\nit may have went horribly awry.\n\n314\n00:17:07.928 --> 00:17:12.299\nSo I'm gonna node run justindevpro and\n\n315\n00:17:12.299 --> 00:17:16.406\nthat was nodeapp:1.0 and boom,\n\n316\n00:17:16.406 --> 00:17:23.810\nI have now bundled up an index.js\nfile into a docker container.\n\n317\n00:17:23.810 --> 00:17:27.090\nWell, it's actually part of an image but\nI ran a container and\n\n318\n00:17:27.090 --> 00:17:31.650\nit printed out just like it\nwould on my laptop previously.\n\n319\n00:17:31.650 --> 00:17:35.237\nWell, that's great cuz I didn't have to,\nif I'm putting this on a brand new server,\n\n320\n00:17:35.237 --> 00:17:37.710\nI don't have to worry about\ninstalling node on the server.\n\n321\n00:17:37.710 --> 00:17:40.710\nI just have to make sure that\nthe image is set up to run and\n\n322\n00:17:40.710 --> 00:17:42.350\nthen that docker is installed in server.\n\n323\n00:17:42.350 --> 00:17:46.397\nAnd it's getting so\nubiquitous that docker is,\n\n324\n00:17:46.397 --> 00:17:50.948\nit's almost a one click\ninstall in a lot of instances.\n\n325\n00:17:50.948 --> 00:17:56.142\nBut, as a matter of experimentation,\nI wonder what happens if I just,\n\n326\n00:17:56.142 --> 00:18:00.918\nyou know what, I'm not even gonna,\nI'm just gonna take it out.\n\n327\n00:18:00.918 --> 00:18:02.230\nYeah, just take it out.\n\n328\n00:18:02.230 --> 00:18:09.786\nSo, let's see here and I'm gonna\nrerun 1.0 and it's still pretty fast.\n\n329\n00:18:09.786 --> 00:18:11.225\n&gt;&gt; So it's successfully built.\n\n330\n00:18:11.225 --> 00:18:16.300\n&gt;&gt; It says successfully built,\nhm, but does it successfully run,\n\n331\n00:18:16.300 --> 00:18:19.116\nthose are two different things\nthat we have to be careful about.\n\n332\n00:18:19.116 --> 00:18:24.785\nSo docker run justindevpro\n\n333\n00:18:24.785 --> 00:18:30.220\nnodeapp:1.0 and.\n\n334\n00:18:30.220 --> 00:18:30.900\n&gt;&gt; You broked it.\n\n335\n00:18:30.900 --> 00:18:32.360\n&gt;&gt; I broked it.\n\n336\n00:18:32.360 --> 00:18:37.330\nIt does give me standard error,\nin this case standard out,\n\n337\n00:18:37.330 --> 00:18:40.651\nfor Cannot find module '/index.js'.\n\n338\n00:18:40.651 --> 00:18:41.957\nWhy is that?\n\n339\n00:18:41.957 --> 00:18:46.517\nWell, if I go and\nlook in my Docker file I added\n\n340\n00:18:46.517 --> 00:18:50.600\nindex.js to a folder in the container.\n\n341\n00:18:50.600 --> 00:18:55.585\nI did not anyway indicate that I should\nbe looking in that folder to try to run\n\n342\n00:18:55.585 --> 00:18:56.940\nthat application.\n\n343\n00:18:58.050 --> 00:19:03.150\nAnd with a lot of web apps and\nthings of that nature, it's really handy\n\n344\n00:19:03.150 --> 00:19:06.990\nto assume that your app is running\nfrom the folder that contains it.\n\n345\n00:19:06.990 --> 00:19:10.610\nJust for logistics purposes, and\nyou don't always have to worry about\n\n346\n00:19:10.610 --> 00:19:13.180\ncreating absolute or\nat least relative paths.\n\n347\n00:19:13.180 --> 00:19:18.000\nSo that's where that WORKDIR comes in.\n\n348\n00:19:18.000 --> 00:19:21.580\nI am setting the working directory for\nthis application.\n\n349\n00:19:21.580 --> 00:19:26.180\nAnd now if we go back and run,\nthat should be, well, don't run, but\n\n350\n00:19:26.180 --> 00:19:29.650\ngo back and build,\nthat's important, gotta rebuild.\n\n351\n00:19:29.650 --> 00:19:33.800\nIf we go back and build, and then I run,\nnotice it's back to working.\n\n352\n00:19:33.800 --> 00:19:37.050\n&gt;&gt; So if you take that work there,\nthat working dir or\n\n353\n00:19:37.050 --> 00:19:41.040\nwhatever it was out of there, it's going\nto fall back to some sort of default\n\n354\n00:19:41.040 --> 00:19:43.980\nwhich is the actual directory that\nyou're in at that moment in time.\n\n355\n00:19:43.980 --> 00:19:44.600\n&gt;&gt; Exactly, and\n\n356\n00:19:44.600 --> 00:19:49.870\nif I'm not mistaken in Ubuntu, it is\nthe root directory is where it defaults.\n\n357\n00:19:49.870 --> 00:19:53.920\nSo this will all be top level and\nthen you'll be adding things to\n\n358\n00:19:53.920 --> 00:19:57.490\nthe root directory, but\nnow this is a sub-directory.\n\n359\n00:19:57.490 --> 00:20:00.510\nOne thing to keep in mind though,\nthis application, or excuse me,\n\n360\n00:20:00.510 --> 00:20:04.180\nthis image is now kind of\ncoupled to the application.\n\n361\n00:20:04.180 --> 00:20:07.910\nThis is not how I would go about\nthis if I was using this image for\n\n362\n00:20:07.910 --> 00:20:09.200\ndevelopment environment.\n\n363\n00:20:09.200 --> 00:20:11.950\nThis is how I would put this\ntogether as an application to\n\n364\n00:20:11.950 --> 00:20:15.170\nsend off to Docker HUB that has\nsome kind of build process or\n\n365\n00:20:15.170 --> 00:20:18.810\ndeployment process that would\nautomatically deploy changes.\n\n366\n00:20:18.810 --> 00:20:19.740\nNow before we move on,\n\n367\n00:20:19.740 --> 00:20:24.020\nthere's a couple of others things that\nI wanna change there before we move on.\n\n368\n00:20:24.020 --> 00:20:27.070\nBecause when I say application,\nall it's doing is printing to the screen.\n\n369\n00:20:27.070 --> 00:20:29.890\nI want to talk about that add command.\n\n370\n00:20:29.890 --> 00:20:34.980\nLet's hop over into, well,\nlet's say dockerfile reference.\n\n371\n00:20:34.980 --> 00:20:38.040\nAnd this will be your friend,\nI recommend keeping up on this.\n\n372\n00:20:38.040 --> 00:20:42.160\nThey've gotten pretty good about keeping\nthis up to date as the version changes.\n\n373\n00:20:42.160 --> 00:20:45.335\nAnd if we look here notice we're on 17.03.\n\n374\n00:20:45.335 --> 00:20:49.570\nThat's the version that's installed on\nmy computer so make sure those match.\n\n375\n00:20:49.570 --> 00:20:52.420\nIf you don't,\nthey have a drop down of older versions.\n\n376\n00:20:53.730 --> 00:20:56.010\nBut I'm gonna zoom out\njust a little bit and\n\n377\n00:20:56.010 --> 00:20:58.840\nif I look over here notice\nthere's this ADD command.\n\n378\n00:21:00.300 --> 00:21:05.950\nSo ADD has two forms,\nmultiple source and then,\n\n379\n00:21:05.950 --> 00:21:13.440\nso excuse me source and destination,\nand then the list type form.\n\n380\n00:21:13.440 --> 00:21:15.120\nAnd okay, well, that's good.\n\n381\n00:21:15.120 --> 00:21:19.829\nAnd then if we scroll down\nwe'll come back, Copy.\n\n382\n00:21:19.829 --> 00:21:25.836\nWell Copy kinda looks like the same thing,\ncopy from source to destination.\n\n383\n00:21:25.836 --> 00:21:30.194\nIt even gives you very similar examples,\nthat's weird.\n\n384\n00:21:30.194 --> 00:21:35.052\nSo why would I,\nwhat difference would I use?\n\n385\n00:21:35.052 --> 00:21:39.634\nHere's the standard difference,\nADD allows you to point to URLs and\n\n386\n00:21:39.634 --> 00:21:44.100\nother things that it will try\nto download and put in there.\n\n387\n00:21:44.100 --> 00:21:47.540\nCopy is for directories and files.\n\n388\n00:21:47.540 --> 00:21:51.031\nThat is the recommendation.\n\n389\n00:21:51.031 --> 00:21:54.800\nIf I can find it here, let's go down and,\n\n390\n00:21:54.800 --> 00:21:58.870\nno, no, wait a minute,\nI'm on the wrong page.\n\n391\n00:21:58.870 --> 00:22:04.925\nSo Docker file ad versus copy and\nif we look docker file add versus copy but\n\n392\n00:22:04.925 --> 00:22:11.100\nwhat we really want is best practices for\nwriting docker files.\n\n393\n00:22:11.100 --> 00:22:15.390\nI don't know why that escaped me\nat that very moment so if I add or\n\n394\n00:22:15.390 --> 00:22:19.728\ncopy there is a recommendation\nof when to use which one.\n\n395\n00:22:19.728 --> 00:22:24.650\nAlthough add and copy are functionally\nsimilar, copy is preferred.\n\n396\n00:22:24.650 --> 00:22:28.830\nSo if you've been using old docker,\nthis is not always the case, and\n\n397\n00:22:28.830 --> 00:22:31.110\nyou will see docker files\nin the wild that use add.\n\n398\n00:22:31.110 --> 00:22:34.990\nI just used it, it works,\nit works as I anticipated.\n\n399\n00:22:34.990 --> 00:22:39.850\nHowever based on the docker file\nbest practices, copy is preferred,\n\n400\n00:22:39.850 --> 00:22:43.140\nthat's because it's more\ntransparent than add.\n\n401\n00:22:43.140 --> 00:22:46.970\nCopy only supports basic copying from\nyour local computer into the image,\n\n402\n00:22:48.030 --> 00:22:51.530\nadd will actually,\nif its a Tar file it will expand it.\n\n403\n00:22:51.530 --> 00:22:55.830\nIt will actually untar it, well that maybe\nunexpected because maybe you expected it\n\n404\n00:22:55.830 --> 00:22:59.160\nto be a Tar file,\nthat your using in your application.\n\n405\n00:22:59.160 --> 00:23:03.640\nIt will also look for,\nlike I said, URLs and\n\n406\n00:23:03.640 --> 00:23:09.140\ntry to bring in the associated resource\nfrom a web-based URL and put it in there.\n\n407\n00:23:09.140 --> 00:23:12.740\nThat may be handy but it's not\ntransparent about what it's doing.\n\n408\n00:23:12.740 --> 00:23:16.490\nI would be, I have this tar file or\nthis zip file and\n\n409\n00:23:16.490 --> 00:23:21.360\nif it's untarred I may be in trouble\nas far as my application's going.\n\n410\n00:23:21.360 --> 00:23:26.800\nSo with that said, we should probably\nchange our Docker file really quickly.\n\n411\n00:23:26.800 --> 00:23:30.680\nAnd then let's actually\nbuild a true replication.\n\n412\n00:23:30.680 --> 00:23:35.919\nSo, Looking into those resources,\n\n413\n00:23:35.919 --> 00:23:40.417\nI'm going to change ADD to COPY and\nit should still work.\n\n414\n00:23:40.417 --> 00:23:44.116\nWe're using the documentation, but let's\nsee if we run into one of those gotchas.\n\n415\n00:23:44.116 --> 00:23:49.492\nDocker build and I'm gonna write\n\n416\n00:23:49.492 --> 00:23:56.600\nover nodeapp: 1.0, and it looks fine.\n\n417\n00:23:56.600 --> 00:23:58.114\nAnd then, if we rerun.\n\n418\n00:23:58.114 --> 00:24:04.710\nEverything works the same so\nI recommend using copy as well.\n\n419\n00:24:04.710 --> 00:24:09.881\nPeriodically I'll get in some old\nbad habits, or I'll be using another\n\n420\n00:24:09.881 --> 00:24:15.720\nDockerfile for a reference but\nyou should really use copy, not add.\n\n421\n00:24:15.720 --> 00:24:18.234\nNow Daniel,\nthere's some other things that go on it,\n\n422\n00:24:18.234 --> 00:24:21.890\ndo you think we have time to actually\nbuild this full scale application?\n\n423\n00:24:21.890 --> 00:24:24.170\n&gt;&gt; Yeah, yeah,\ncuz I know how good Justin is.\n\n424\n00:24:24.170 --> 00:24:27.410\nHe can make that happen in the six\nminutes that we have left on the clock,\n\n425\n00:24:27.410 --> 00:24:28.960\nso fire away my good man.\n\n426\n00:24:28.960 --> 00:24:30.649\n&gt;&gt; All right, well, let's-\n&gt;&gt; [LAUGH]\n\n427\n00:24:30.649 --> 00:24:31.588\n&gt;&gt; Let's find out,\n\n428\n00:24:31.588 --> 00:24:35.154\nso I'm gonna hop over into nodeappv1,\nand all I'm gonna do is make\n\n429\n00:24:35.154 --> 00:24:38.906\na copy because that Dockerfile is gonna\nbe very similar to what we have so\n\n430\n00:24:38.906 --> 00:24:40.850\nwe can see that difference.\n\n431\n00:24:40.850 --> 00:24:44.176\nSo I'm gonna say nodeappv1/dockerfile and\n\n432\n00:24:44.176 --> 00:24:50.590\nwhere am I going to copy that to,\nwell nodeoppv2, that kinda makes sense.\n\n433\n00:24:50.590 --> 00:24:55.952\nAnd if I hop into nodeoppv2 with\nappropriate naming, there we go.\n\n434\n00:24:55.952 --> 00:25:01.342\nAnd I ls, you'll notice\nthere's this extra file here,\n\n435\n00:25:01.342 --> 00:25:04.673\nand index.js, and the Dockerfile.\n\n436\n00:25:04.673 --> 00:25:09.368\nOkay well let's take a look\nat not the Dockerfile,\n\n437\n00:25:09.368 --> 00:25:14.389\nbut the Node index.js and\nwell, this is a full blown,\n\n438\n00:25:14.389 --> 00:25:19.520\nwell full blown,\nit is in a web based application server\n\n439\n00:25:19.520 --> 00:25:24.420\nusing Express which is\npart of the Node runtime.\n\n440\n00:25:24.420 --> 00:25:29.240\nNow this is very standard,\nit's not even the most up to date version\n\n441\n00:25:29.240 --> 00:25:33.520\nthat Node can handle as far as\nthe JavaScript version, but it works and\n\n442\n00:25:33.520 --> 00:25:37.800\njust to show you let's take\na look at what this is doing.\n\n443\n00:25:37.800 --> 00:25:42.820\nSo I have to npm install,\nthat's important, and you should, every\n\n444\n00:25:42.820 --> 00:25:46.080\ntime you're making these applications\nwork like this you should be thinking\n\n445\n00:25:46.080 --> 00:25:49.457\nwhat are the steps I need to take, because\nthose have to be in your Dockerfile cuz\n\n446\n00:25:49.457 --> 00:25:53.488\nDocker's not gonna make any assumption\nabout how to make this application work.\n\n447\n00:25:53.488 --> 00:25:58.658\nSo node index.js, I'm now on port 8080,\nlet's take a look.\n\n448\n00:25:59.809 --> 00:26:03.923\nAnd 8080, and all it says is welcome,\nall right, so\n\n449\n00:26:03.923 --> 00:26:09.180\nthat's what it does, but it is a start\non how to build this application.\n\n450\n00:26:10.890 --> 00:26:12.690\nSo let's kill it.\n\n451\n00:26:12.690 --> 00:26:15.320\nAnd well, what is this other file?\n\n452\n00:26:16.370 --> 00:26:19.373\nNotice that node_modules is there,\nthose are just dependencies,\n\n453\n00:26:19.373 --> 00:26:21.340\nwe don't have to worry about it.\n\n454\n00:26:21.340 --> 00:26:27.220\nThe same would be for Python, for\nGo, actually Go builds a binary,\n\n455\n00:26:27.220 --> 00:26:32.140\nfor Java, anything that has to be pulled\nin, well, you have similar steps.\n\n456\n00:26:32.140 --> 00:26:34.420\nBut what's this package.json?\n\n457\n00:26:34.420 --> 00:26:38.170\nAnd this is what the Node runtime uses for\nsaid dependencies.\n\n458\n00:26:39.370 --> 00:26:43.490\nSo this file is kind of, along with\nother things, kind of like a list of\n\n459\n00:26:43.490 --> 00:26:46.720\nthings that I need in my application for\nmy application to run.\n\n460\n00:26:47.820 --> 00:26:51.630\nThis is probably something good to\ninclude in this Dockerfile, right?\n\n461\n00:26:51.630 --> 00:26:55.940\nIf I bring that list of dependencies\nthrough, then that Dockerfile can actually\n\n462\n00:26:55.940 --> 00:27:00.500\nbuild them and become part of the Docker\nimage that I'm trying to release.\n\n463\n00:27:00.500 --> 00:27:03.560\nSo those are two things,\nagain not necessarily about Node,\n\n464\n00:27:03.560 --> 00:27:07.900\nthis is something that you should be aware\nof for whatever programming language or\n\n465\n00:27:07.900 --> 00:27:13.190\nwhatever runtime you're using,\nwhat pieces do I need to make happen?\n\n466\n00:27:13.190 --> 00:27:17.150\nSo let's go ahead and\nsay Dockerfile, all right.\n\n467\n00:27:17.150 --> 00:27:20.312\nWell, I copied index.js, right,\n\n468\n00:27:20.312 --> 00:27:25.412\nI just told you you needed\nthat package.json file, okay,\n\n469\n00:27:25.412 --> 00:27:30.314\nso let's add a COPY package.json,\nand put that in app.\n\n470\n00:27:32.629 --> 00:27:38.366\nApp.package.json, and package.json is\nkind of a default feature of Node,\n\n471\n00:27:38.366 --> 00:27:40.601\nit knows to look for that file.\n\n472\n00:27:40.601 --> 00:27:46.763\nAnd now that I've copied those,\nbefore I can do this nodeindex.js,\n\n473\n00:27:46.763 --> 00:27:53.145\nyou'll remember it gave me an error\nuntil I ran that npm install, okay.\n\n474\n00:27:53.145 --> 00:27:56.778\nWell this is one of those\nkind of application specific,\n\n475\n00:27:56.778 --> 00:28:01.950\nyou'll have to figure out what\nis needed for your application.\n\n476\n00:28:01.950 --> 00:28:05.310\nSo I'm gonna npm install but\nnotice I'm inside the directory, so\n\n477\n00:28:05.310 --> 00:28:09.440\nI skipped over that after I copied cuz\nI need to be inside that directory\n\n478\n00:28:09.440 --> 00:28:12.489\ncuz this install command is looking for\nthis package.json file.\n\n479\n00:28:13.670 --> 00:28:19.020\nWe will in future episodes look at other\nlanguages, just so it's not very specific.\n\n480\n00:28:19.020 --> 00:28:22.824\nSo if now I run, or excuse me, build.\n\n481\n00:28:24.653 --> 00:28:29.024\nJustindevpro/nodeapp and this is 2.0, so\n\n482\n00:28:29.024 --> 00:28:32.416\nI'm tagging those appropriately.\n\n483\n00:28:32.416 --> 00:28:34.186\nAnd then it's building, it's building.\n\n484\n00:28:34.186 --> 00:28:39.918\nAnd then this npm install is very much\nlike a package management system for,\n\n485\n00:28:39.918 --> 00:28:44.320\nwell, just for\nNode instead of the actual Linux runtime.\n\n486\n00:28:44.320 --> 00:28:47.293\nIt says it's built,\nlet's see what happens.\n\n487\n00:28:47.293 --> 00:28:53.619\nSo docker run dash, well we wanna\nmake sure we bind the ports so\n\n488\n00:28:53.619 --> 00:28:58.863\nwe can check to see if\nthe application's running.\n\n489\n00:28:58.863 --> 00:29:03.299\nAnd justindevpro/nodeapp:2.0 and\n\n490\n00:29:03.299 --> 00:29:06.849\nnow listening on port 8080.\n\n491\n00:29:09.018 --> 00:29:15.124\nHere we go, the moment of truth,\nand if I come back there we go,\n\n492\n00:29:15.124 --> 00:29:18.828\nit says that I've made a get request.\n\n493\n00:29:18.828 --> 00:29:23.279\nI refresh, it looks like everything's\nworking exactly the same,\n\n494\n00:29:23.279 --> 00:29:25.787\nit doesn't seem any different to me.\n\n495\n00:29:25.787 --> 00:29:29.736\nBut now I don't have to worry about do\nI have a node installed on my server,\n\n496\n00:29:29.736 --> 00:29:31.646\nI can just run this as a container and\n\n497\n00:29:31.646 --> 00:29:36.230\nas long as I do a little bit of the setup\nwith the ports I should be good to go.\n\n498\n00:29:36.230 --> 00:29:37.633\nSo let's go ahead and kill this.\n\n499\n00:29:40.491 --> 00:29:42.500\nNo, Daniel, we're in trouble.\n\n500\n00:29:42.500 --> 00:29:43.375\n&gt;&gt; You broke it again?\n\n501\n00:29:43.375 --> 00:29:45.131\n[LAUGH]\n&gt;&gt; I broke it again, and Daniel,\n\n502\n00:29:45.131 --> 00:29:48.506\nI don't know if we have time to\nsolve this problem on this episode.\n\n503\n00:29:48.506 --> 00:29:52.236\n&gt;&gt; Well, that's a nice little cliffhanger\nto leave our lovely viewing audience with.\n\n504\n00:29:52.236 --> 00:29:56.036\nSo you'll have to come back, we'll roll\nthis into a part two and see we have it\n\n505\n00:29:56.036 --> 00:30:00.260\nworking but we can't make it stop working,\nwhich is an interesting problem to have.\n\n506\n00:30:00.260 --> 00:30:04.220\nSo I look forward to seeing what\nthe resolution to that conflict is.\n\n507\n00:30:04.220 --> 00:30:06.700\nJustin, thanks for\ngetting us this far, very cool stuff.\n\n508\n00:30:06.700 --> 00:30:09.330\nAnd we do thank you for watching,\nbut it's time to sign off.\n\n509\n00:30:09.330 --> 00:30:11.440\nFor ITProTV, I've been your host,\nDaniel Lowrie.\n\n510\n00:30:11.440 --> 00:30:12.850\n&gt;&gt; And I'm Justin Dennison.\n\n511\n00:30:12.850 --> 00:30:15.154\n&gt;&gt; And we'll see you next time.\n\n512\n00:30:15.154 --> 00:30:21.144\n[MUSIC]\n\n513\n00:30:21.144 --> 00:30:24.889\nThank you for watching, ITPRO.TV.\n\n",
          "vimeoId": "211737194"
        },
        {
          "description": "In this episode, Daniel and Justin finish 'deploying' a NodeJS application in a Docker container. The show culminates with the application server responses to HTTP request by pointing to a port of the container that the application is bound to.",
          "length": "1043",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-2-building_an_application_with_docker-040317-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-2-building_an_application_with_docker-040317-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-2-building_an_application_with_docker-040317-high-sm.jpg",
          "title": "Building an Application with Docker Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.744\nWelcome to ITPro.TV,\nI'm your host, Don Pizet.\n\n2\n00:00:02.744 --> 00:00:06.559\n[CROSSTALK]\n\n3\n00:00:06.559 --> 00:00:08.266\n[MUSIC]\n\n4\n00:00:08.266 --> 00:00:12.043\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:12.043 --> 00:00:13.867\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:13.867 --> 00:00:16.432\nwelcome back to another\ngreat episode of ITPro.TV.\n\n7\n00:00:16.432 --> 00:00:19.321\nI'm your host Daniel Lowry,\nand in today's episode,\n\n8\n00:00:19.321 --> 00:00:22.463\nwe're coming back at you with\nmore introduction to Docker.\n\n9\n00:00:22.463 --> 00:00:26.038\nAnd picking up where we left off with\na part two on building an application,\n\n10\n00:00:26.038 --> 00:00:30.124\njoining us back in the studios o continue\nthat line of thought, our good friend, Mr.\n\n11\n00:00:30.124 --> 00:00:31.060\nJustin Dennison.\n\n12\n00:00:31.060 --> 00:00:32.830\nJustin, welcome back man, how's it going?\n\n13\n00:00:32.830 --> 00:00:34.370\n&gt;&gt; It's going well,\nDaniel, how are you today?\n\n14\n00:00:34.370 --> 00:00:35.310\n&gt;&gt; I can't complain.\n\n15\n00:00:35.310 --> 00:00:39.250\n&gt;&gt; Well,\nwe left off with a ringer last time.\n\n16\n00:00:39.250 --> 00:00:40.210\n&gt;&gt; Yeah.\n\n17\n00:00:40.210 --> 00:00:41.170\n&gt;&gt; We built our application.\n\n18\n00:00:41.170 --> 00:00:45.140\nWe got it up and running, and\nnow we can't get it to stop running.\n\n19\n00:00:45.140 --> 00:00:49.671\nTypically, that's not an issue that I've\never had when developing an application,\n\n20\n00:00:49.671 --> 00:00:51.362\nso-\n&gt;&gt; 100% setup time.\n\n21\n00:00:51.362 --> 00:00:52.640\n&gt;&gt; Yep, yep, it died.\n\n22\n00:00:52.640 --> 00:00:53.630\nNo, it didn't.\n\n23\n00:00:53.630 --> 00:00:54.370\nNo, it didn't.\n\n24\n00:00:54.370 --> 00:00:55.980\nSo how do we fix that?\n\n25\n00:00:55.980 --> 00:01:00.070\nAnd this is one of those things\nwhere the runtime sometimes\n\n26\n00:01:00.070 --> 00:01:02.180\nhas these nuance differences.\n\n27\n00:01:02.180 --> 00:01:04.160\nSo we've been looking at Node.\n\n28\n00:01:04.160 --> 00:01:06.660\nThis may be a Node issue, right.\n\n29\n00:01:06.660 --> 00:01:10.330\nThis may be something that you have\nto handle specifically for Node.\n\n30\n00:01:10.330 --> 00:01:15.060\nAnd, well, full disclosure,\nI knew this was going to happen, and\n\n31\n00:01:15.060 --> 00:01:17.610\nthis was important for people to see.\n\n32\n00:01:17.610 --> 00:01:19.170\nThis doesn't work like this on my machine.\n\n33\n00:01:19.170 --> 00:01:21.100\nWell, now you're in a Docker container.\n\n34\n00:01:21.100 --> 00:01:22.860\nMaybe that runs a little bit differently.\n\n35\n00:01:22.860 --> 00:01:25.920\nSo let's take a look and\nremind ourselves of where we are.\n\n36\n00:01:25.920 --> 00:01:27.420\nSo let's take look at our screen.\n\n37\n00:01:27.420 --> 00:01:30.047\nI've got it back to the original\nstate that we had it.\n\n38\n00:01:30.047 --> 00:01:32.680\nAnd I've Ctrled+C a great deal, right.\n\n39\n00:01:32.680 --> 00:01:34.857\nAnd if I Ctrl+D?\n\n40\n00:01:34.857 --> 00:01:39.442\nWell, that would usually work,\nbut it still doesn't work, right.\n\n41\n00:01:39.442 --> 00:01:42.079\nHm, how d we get this to stop?\n\n42\n00:01:42.079 --> 00:01:43.620\nThere's a couple ways we could do this.\n\n43\n00:01:43.620 --> 00:01:48.570\nWe could, well, we could just close out\nof the terminal and hope that it stops.\n\n44\n00:01:48.570 --> 00:01:52.345\nI will forewarn you, if you're building a\nweb application, if you have some kind of\n\n45\n00:01:52.345 --> 00:01:56.860\nerrant process that's binding to that\nport, you may get weirdness later on.\n\n46\n00:01:56.860 --> 00:01:59.780\nSo it's best to make sure\nthat the process gets killed.\n\n47\n00:02:00.790 --> 00:02:03.000\nIn this case, it being a Docker\ncontainer that's running.\n\n48\n00:02:03.000 --> 00:02:06.750\n&gt;&gt; Justin, is this happening because\nit's not accepting any commands into it,\n\n49\n00:02:06.750 --> 00:02:08.830\nat least any kill type commands?\n\n50\n00:02:08.830 --> 00:02:12.345\n&gt;&gt; Well, Daniel, you're in my head.\n\n51\n00:02:12.345 --> 00:02:14.140\n&gt;&gt; [LAUGH]\n&gt;&gt; I think that's what's happening.\n\n52\n00:02:14.140 --> 00:02:16.570\nSo it's probably best if we take a look.\n\n53\n00:02:16.570 --> 00:02:18.170\nBut how do we kill this first, right?\n\n54\n00:02:19.370 --> 00:02:23.880\nI need this process to stop so\nI can figure out what's going on.\n\n55\n00:02:23.880 --> 00:02:24.526\n&gt;&gt; Go old school on it.\n\n56\n00:02:24.526 --> 00:02:25.750\n&gt;&gt; Yeah, go old school.\n\n57\n00:02:25.750 --> 00:02:28.320\nSo I'm gonna open up\na new tab in my terminal.\n\n58\n00:02:28.320 --> 00:02:31.300\nAnd you'll notice that those\nare typically really tiny, and\n\n59\n00:02:31.300 --> 00:02:33.420\nI don't leave them that way.\n\n60\n00:02:33.420 --> 00:02:34.560\nSo if I clear out and\n\n61\n00:02:34.560 --> 00:02:39.020\nI say docker ps, notice I have that\nNode app running, it's bound to 8080.\n\n62\n00:02:39.020 --> 00:02:42.851\nAnd I can't kill it through Ctrl+C.\n\n63\n00:02:42.851 --> 00:02:48.870\nBut if I say docker kill,\nright, and blissful_williams.\n\n64\n00:02:48.870 --> 00:02:50.270\nI forgot to name the application.\n\n65\n00:02:51.760 --> 00:02:55.405\nWe always have some interesting\nauto-generated names there,\n\n66\n00:02:55.405 --> 00:02:57.001\nblissful_williams.\n\n67\n00:02:57.001 --> 00:02:57.787\nThere we go,.\n\n68\n00:02:57.787 --> 00:03:01.360\nSo If I hop back over, well,\nI can't hop back over.\n\n69\n00:03:01.360 --> 00:03:05.440\nAnd that's because that\nterminal was actually bound up.\n\n70\n00:03:05.440 --> 00:03:08.140\nSo that actual output was bound up by that\n\n71\n00:03:08.140 --> 00:03:09.900\nprocess that was running\nin the Docker container.\n\n72\n00:03:09.900 --> 00:03:16.140\nSo when I killed it, it flooded that\nterminal with all those kill commands that\n\n73\n00:03:16.140 --> 00:03:20.180\nI tried in the Docker container, and then\nit actually kill the terminal process.\n\n74\n00:03:21.420 --> 00:03:23.350\nSo we have to be careful there.\n\n75\n00:03:23.350 --> 00:03:25.850\nBut that's okay, we got it, it's done.\n\n76\n00:03:25.850 --> 00:03:27.105\n&gt;&gt; We're in the testing phase anyway.\n\n77\n00:03:27.105 --> 00:03:27.690\n&gt;&gt; Yeah, yeah.\n\n78\n00:03:27.690 --> 00:03:29.461\n&gt;&gt; So\nI don't think this is a problem [LAUGH].\n\n79\n00:03:29.461 --> 00:03:34.994\n&gt;&gt; So if hop back into the desktop here,\nand I go into node v2,\n\n80\n00:03:34.994 --> 00:03:38.877\nwell, hm, I wonder how this is working?\n\n81\n00:03:38.877 --> 00:03:41.090\nAnd Daniel is absolutely correct.\n\n82\n00:03:41.090 --> 00:03:46.890\nIn the Node runtime, if you don't tell\nNode to listen to these SIG terms,\n\n83\n00:03:46.890 --> 00:03:52.810\nor SIGINTs, or some kind of kill signal,\nit will not be translated through\n\n84\n00:03:52.810 --> 00:03:58.280\nyour terminal process, or whatever, to\nthe running process inside the container.\n\n85\n00:03:58.280 --> 00:03:59.670\nSo we gotta fix that.\n\n86\n00:03:59.670 --> 00:04:04.910\nAnd this will be very much dependent on\nwhatever language runtime you're using.\n\n87\n00:04:04.910 --> 00:04:06.139\nSo how do I fix that?\n\n88\n00:04:06.139 --> 00:04:09.336\nIn Node, we can say process.on.\n\n89\n00:04:09.336 --> 00:04:14.440\nAnd the one that I use, this is not\nnecessarily the only way, is SIGINT.\n\n90\n00:04:16.760 --> 00:04:20.617\nAgain, this is not about knowing\nspecifically everything there\n\n91\n00:04:20.617 --> 00:04:21.280\nis about Node.\n\n92\n00:04:21.280 --> 00:04:24.910\nBut this is one of this edge\ncases that is language specific.\n\n93\n00:04:24.910 --> 00:04:26.190\nAnd what do I wanna do?\n\n94\n00:04:26.190 --> 00:04:30.520\nWell, when there's a SIGINT, which is\nan event that's raised by the Node runtime\n\n95\n00:04:30.520 --> 00:04:34.510\nwhen you send it a kill process,\nI wanna do process.exit.\n\n96\n00:04:34.510 --> 00:04:37.770\nAnd now I should get the ability\nto exit out of that.\n\n97\n00:04:37.770 --> 00:04:39.970\nSo I had to change that a little bit.\n\n98\n00:04:39.970 --> 00:04:41.130\nAnd there we go.\n\n99\n00:04:41.130 --> 00:04:42.580\nNow, I have to rebuild this image.\n\n100\n00:04:43.820 --> 00:04:46.073\nAnd you gotta spell build correctly,\nthat's important.\n\n101\n00:04:46.073 --> 00:04:51.937\nAnd not node_modules, my goodness,\njustindevpro/nodeapp.\n\n102\n00:04:51.937 --> 00:04:57.960\nAnd I want to keep the tag the same\nbecause this was an issue in this image.\n\n103\n00:04:57.960 --> 00:05:00.960\nSo I wanna rebuild this\nimage with the changes.\n\n104\n00:05:00.960 --> 00:05:02.606\nSo run, run, run.\n\n105\n00:05:02.606 --> 00:05:04.517\nThere we go, we should be good.\n\n106\n00:05:04.517 --> 00:05:09.155\nAnd, notice,\nit always still pulls those in and\n\n107\n00:05:09.155 --> 00:05:15.158\nreruns even though, well,\nwhy would it not just cache those?\n\n108\n00:05:15.158 --> 00:05:17.393\nAnd part of that is you're copying over.\n\n109\n00:05:17.393 --> 00:05:21.520\nSo there's some assumptions there that\nwhen you copy, there may be changes in\n\n110\n00:05:21.520 --> 00:05:25.750\ncopied files, so it will rerun through\nall of those and from there on out.\n\n111\n00:05:25.750 --> 00:05:29.050\nSo keep that in mind as you're\nbuilding your Docker images.\n\n112\n00:05:29.050 --> 00:05:31.465\nAnd if we're lucky,\nwe gotta cross our fingers.\n\n113\n00:05:31.465 --> 00:05:35.745\n&gt;&gt; [LAUGH]\n&gt;&gt; We are gonna run, bind, to port 80,\n\n114\n00:05:35.745 --> 00:05:41.786\nport 8080, excuse me, just to make\nsure things are still working,\n\n115\n00:05:41.786 --> 00:05:44.872\nand justindevpro/node:2.0.\n\n116\n00:05:44.872 --> 00:05:46.690\nAll right, here we go.\n\n117\n00:05:49.680 --> 00:05:51.150\nNodeapp, whoopsy daisy.\n\n118\n00:05:51.150 --> 00:05:53.070\n&gt;&gt; It does help to spell it correctly.\n\n119\n00:05:53.070 --> 00:05:53.920\n&gt;&gt; It does, it does.\n\n120\n00:05:53.920 --> 00:05:55.260\nNow, we are listening on port 80.\n\n121\n00:05:56.540 --> 00:05:58.440\nWe should be good if we refresh.\n\n122\n00:05:58.440 --> 00:05:59.290\nWe're good.\n\n123\n00:05:59.290 --> 00:06:03.580\nIt shows that I made a GET\nrequest to the root URL.\n\n124\n00:06:03.580 --> 00:06:05.380\nAnd now-\n&gt;&gt; Most importantly.\n\n125\n00:06:05.380 --> 00:06:10.420\n&gt;&gt; If I hit Ctrl+C, because I've written\ninto my application to listen for\n\n126\n00:06:10.420 --> 00:06:15.280\nthat kill command, right, so again,\nit will now exit the process and\n\n127\n00:06:15.280 --> 00:06:17.100\nrelease control of the terminal.\n\n128\n00:06:17.100 --> 00:06:22.136\nAnd this is kind of a weird nuance Docker,\nand this is very particular to Node.\n\n129\n00:06:22.136 --> 00:06:25.030\nI haven't seen this in some of\nother languages I work with.\n\n130\n00:06:25.030 --> 00:06:28.450\nBut that doesn't mean that there\ndoesn't exist corner cases\n\n131\n00:06:28.450 --> 00:06:31.820\nwhere you have to go search for\nthis and figure these things out.\n\n132\n00:06:33.100 --> 00:06:36.101\nUse search engines, right,\nthe secret incantation.\n\n133\n00:06:36.101 --> 00:06:40.850\nAnd at the very least,\nsometimes the actual Docker forums or\n\n134\n00:06:40.850 --> 00:06:44.680\nissues on GitHub, will point out\nsome of these nuanced differences.\n\n135\n00:06:44.680 --> 00:06:46.630\nSo we have version one\nwhich was very simple.\n\n136\n00:06:46.630 --> 00:06:48.430\nWe have version two.\n\n137\n00:06:48.430 --> 00:06:53.392\nBut what if I wanted to make, well,\na little bit different one, and\n\n138\n00:06:53.392 --> 00:06:56.538\nit's just compounded on this base image?\n\n139\n00:06:56.538 --> 00:06:59.438\nSo I wanna show you one final thing\nas a takeaway when you're building\n\n140\n00:06:59.438 --> 00:07:00.640\nthese images.\n\n141\n00:07:00.640 --> 00:07:01.190\nKeep in mind,\n\n142\n00:07:01.190 --> 00:07:06.630\nwe had that Node base image that we\nbuilt early on in the previous episode.\n\n143\n00:07:06.630 --> 00:07:11.950\nSo let's go build version three,\nand this one will be fairly quick.\n\n144\n00:07:13.270 --> 00:07:16.070\nI say that, [LAUGH] and watch it not.\n\n145\n00:07:16.070 --> 00:07:19.500\nBut if we ls there is a data.json.\n\n146\n00:07:19.500 --> 00:07:22.680\nAnd we're just going to\npretend this is a database.\n\n147\n00:07:22.680 --> 00:07:24.215\nBut it's not, it's just a static file.\n\n148\n00:07:24.215 --> 00:07:29.810\nAnd index.js and package.json,\neverything's going to work similarly.\n\n149\n00:07:29.810 --> 00:07:32.330\nIf I go and look at my index.js, though,\n\n150\n00:07:32.330 --> 00:07:37.810\nthere's one final thing\nhere that I have to add.\n\n151\n00:07:37.810 --> 00:07:40.810\nAnd see this require data?\n\n152\n00:07:40.810 --> 00:07:42.220\nThat means I'm gonna pull that in.\n\n153\n00:07:42.220 --> 00:07:46.144\nI'm pretending that's a database, and\n\n154\n00:07:46.144 --> 00:07:52.206\nI wanna add to this that I\nhave server.get(' /users/' ,.\n\n155\n00:07:52.206 --> 00:07:57.761\nAnd I'm just making this up,\nso function(req, res).\n\n156\n00:08:01.440 --> 00:08:04.718\nAnd we gonna hit\nthe appropriate key there.\n\n157\n00:08:04.718 --> 00:08:09.556\nAnd I'm gonna say res.json(data);.\n\n158\n00:08:09.556 --> 00:08:16.230\nAnd that comes from this var data\n= require (' ./data.json');.\n\n159\n00:08:16.230 --> 00:08:18.930\nSo very particular to Node,\nbut now we have this set up.\n\n160\n00:08:20.010 --> 00:08:24.750\nIf I test this out locally, what we'll\nsee is we'll make sure this works.\n\n161\n00:08:24.750 --> 00:08:30.350\nAnd then we're gonna build a Docker\ncontainer that kinda wraps all of this up.\n\n162\n00:08:30.350 --> 00:08:33.460\nBut instead of building it\nfrom the base Ubuntu image,\n\n163\n00:08:33.460 --> 00:08:35.760\nwe're gonna build it from that Node base.\n\n164\n00:08:35.760 --> 00:08:40.780\nSo we can see,oh, if I plan appropriately,\nI don't have always rerun\n\n165\n00:08:40.780 --> 00:08:45.580\nall of those add Node to it,\nupdate, all of those things.\n\n166\n00:08:45.580 --> 00:08:49.786\nSo I can kinda precompile those steps\ninto intermediate images, tag them, and\n\n167\n00:08:49.786 --> 00:08:50.871\nuse them for later.\n\n168\n00:08:50.871 --> 00:08:53.728\nAnd this makes our workflow very,\nvery fast.\n\n169\n00:08:53.728 --> 00:08:55.857\nSo let's see if it works.\n\n170\n00:08:55.857 --> 00:08:57.763\nAnd it's listening on port 80.\n\n171\n00:08:57.763 --> 00:09:01.529\nAnd if I go to the root directory,\nit still looks the same.\n\n172\n00:09:01.529 --> 00:09:07.041\nBut if I go to /users, and\nif I zoom in there, I just went /users,\n\n173\n00:09:07.041 --> 00:09:12.273\nand I go here, aha,\nit actually gave me a giant JSON response.\n\n174\n00:09:12.273 --> 00:09:15.387\nNow, if you don't know anything\nabout JSON, that's completely fine.\n\n175\n00:09:15.387 --> 00:09:19.028\nIt's a data transport type that's\nused in web application a great deal.\n\n176\n00:09:19.028 --> 00:09:23.650\nAlso, know SQL databases\nusually have a nice JSON like,\n\n177\n00:09:23.650 --> 00:09:25.920\nlike Mango and things of the a nature.\n\n178\n00:09:25.920 --> 00:09:28.520\nSo we made a little bit of change.\n\n179\n00:09:28.520 --> 00:09:33.268\nAnd we wanna build this image\na little bit differently than we have\n\n180\n00:09:33.268 --> 00:09:38.638\nthe previous ones because, well,\nI wanna reuse the Node base that I had.\n\n181\n00:09:38.638 --> 00:09:41.858\nSo I'm gonna hop back over here,\nkill this.\n\n182\n00:09:41.858 --> 00:09:45.858\nAnd the only reason I can do that is\nbecause I have that process, .onSIGINT.\n\n183\n00:09:45.858 --> 00:09:47.481\nAnd I look in a Docker file.\n\n184\n00:09:47.481 --> 00:09:51.574\nActually before I go in there,\nif I go to images, and\n\n185\n00:09:51.574 --> 00:09:56.610\nI zoom out a little bit, there we go,\nI have some of these nones.\n\n186\n00:09:56.610 --> 00:09:58.970\nAnd that's part of the artifacts\nof the build process.\n\n187\n00:09:58.970 --> 00:10:01.370\nYou can always clean those\nup with the image ID.\n\n188\n00:10:01.370 --> 00:10:06.500\nBut see this devpro,\njustindevpro/node, with the base tag?\n\n189\n00:10:06.500 --> 00:10:11.830\nI'm gonna use that to build\nthis next application.\n\n190\n00:10:11.830 --> 00:10:15.576\nSo what would happen is\nall of that from Ubuntu,\n\n191\n00:10:15.576 --> 00:10:20.455\napt-get install, Node,\nwe're gonna just leave that out.\n\n192\n00:10:20.455 --> 00:10:24.361\nAnd instead just build from that, and\nthen add our application on top of it, and\n\n193\n00:10:24.361 --> 00:10:26.652\nthen everything should work appropriately.\n\n194\n00:10:26.652 --> 00:10:28.592\nShould is the key word there.\n\n195\n00:10:28.592 --> 00:10:32.549\nSo let's zoom back in\ncuz I like giant font.\n\n196\n00:10:34.926 --> 00:10:38.046\nSo Dockerfile, and\n\n197\n00:10:38.046 --> 00:10:43.568\nFROM justindevpro/node:base.\n\n198\n00:10:43.568 --> 00:10:45.310\nAll right,\n\n199\n00:10:45.310 --> 00:10:50.760\nbecause I built this image, I can assume\nall of that other stuff is done, okay.\n\n200\n00:10:52.120 --> 00:10:53.530\nNow what do I wanna do?\n\n201\n00:10:53.530 --> 00:10:57.356\nFrom here, I want to COPY\n\n202\n00:10:57.356 --> 00:11:02.652\nindex.js to /app/index.js.\n\n203\n00:11:02.652 --> 00:11:07.931\nI also want to COPY package.json\n\n204\n00:11:07.931 --> 00:11:12.460\nto /app/package.json.\n\n205\n00:11:12.460 --> 00:11:16.490\nAnd I also need that data.json\nto mimic our database.\n\n206\n00:11:16.490 --> 00:11:20.410\nMaybe this is something you're creating\nas a mock-up for other developers\n\n207\n00:11:20.410 --> 00:11:25.000\nto use because you're the back end\ndeveloper, and they need access to this.\n\n208\n00:11:25.000 --> 00:11:28.996\nSo then we're gonna COPY data.json to,\n\n209\n00:11:28.996 --> 00:11:32.890\nnot capital APP, /app/data.json.\n\n210\n00:11:32.890 --> 00:11:36.160\nAnd now I've just kind of\nmoved all of this over.\n\n211\n00:11:36.160 --> 00:11:39.010\nI'm doing this line by line because\nI want it to be transparent.\n\n212\n00:11:39.010 --> 00:11:42.720\nThere are ways to take everything in\nthis file and move it all at once.\n\n213\n00:11:42.720 --> 00:11:45.650\nBut maybe you don't need that,\nmaybe you just need these three files, so\n\n214\n00:11:45.650 --> 00:11:46.370\nkeep it transparent.\n\n215\n00:11:46.370 --> 00:11:49.560\nAnd then, finally,\nwhat do I, well, finally,\n\n216\n00:11:49.560 --> 00:11:51.030\nthere's a couple other steps here.\n\n217\n00:11:51.030 --> 00:11:53.950\nI wanna set the WORKDIR to /app.\n\n218\n00:11:53.950 --> 00:11:55.710\nI want to RUN npm install.\n\n219\n00:11:56.760 --> 00:12:01.929\nAnd I'm gonna go and actually use\nthe recommendation of ENTRYPOINT command.\n\n220\n00:12:01.929 --> 00:12:04.858\nSo ENTRYPOINT is, well,\n\n221\n00:12:04.858 --> 00:12:09.658\nthe entry command that should be running.\n\n222\n00:12:09.658 --> 00:12:11.233\nAnd that's where it gets weird command.\n\n223\n00:12:11.233 --> 00:12:13.942\nIt's the command that's gonna be running,\nand\n\n224\n00:12:13.942 --> 00:12:16.992\nany arguments should be\npassed using the command set.\n\n225\n00:12:16.992 --> 00:12:18.563\nAnd what do I want to run?\n\n226\n00:12:18.563 --> 00:12:20.092\n\"index.js\".\n\n227\n00:12:20.092 --> 00:12:21.360\nMake sure you're hitting double quotes.\n\n228\n00:12:21.360 --> 00:12:24.770\nIf you don't, it'll have a parse error,\nthings will break.\n\n229\n00:12:24.770 --> 00:12:28.267\nSo from top to bottom, starting with\nthe Node base that you've created for\n\n230\n00:12:28.267 --> 00:12:30.280\nyour team, and now that's always there.\n\n231\n00:12:30.280 --> 00:12:33.150\nAnd you only have to rebuild\nthat when something changes.\n\n232\n00:12:34.160 --> 00:12:37.154\nI'm going to use that as the application\nruntime for this application.\n\n233\n00:12:37.154 --> 00:12:41.730\nMy Dockerfile has shrunk because\nI've planned to inherit, so\n\n234\n00:12:41.730 --> 00:12:44.670\nto speak, from this base image.\n\n235\n00:12:44.670 --> 00:12:45.400\nLet's see if it works.\n\n236\n00:12:46.970 --> 00:12:54.458\nAnd I say docker build -t\njustindevpro/nodeapp:,\n\n237\n00:12:54.458 --> 00:12:58.216\nand this should be 3.0.\n\n238\n00:12:58.216 --> 00:13:02.358\nAnd notice it's really fast\nbecause it's not trying to\n\n239\n00:13:02.358 --> 00:13:06.230\nrun back through the remaining portions.\n\n240\n00:13:06.230 --> 00:13:08.339\nAnd if you build those correctly,\n\n241\n00:13:08.339 --> 00:13:12.133\nyou don't have to worry about\nmessing with the Docker cache.\n\n242\n00:13:12.133 --> 00:13:14.862\nYou're in the build process for\nyour base image.\n\n243\n00:13:14.862 --> 00:13:16.460\nAnd let's see if it works.\n\n244\n00:13:16.460 --> 00:13:23.110\nDocker run -p 8080:8080,\n\n245\n00:13:23.110 --> 00:13:29.780\nand justindevpro/nodeapp3.0.\n\n246\n00:13:29.780 --> 00:13:33.530\nAnd now listening on board 8080,\nwe're going to root route.\n\n247\n00:13:35.180 --> 00:13:38.601\nIt looks promising, looks promising.\n\n248\n00:13:38.601 --> 00:13:39.826\nAnd if I go to users,\n\n249\n00:13:39.826 --> 00:13:44.170\nnow I've kind of bundled up some mock\ndata inside of this application.\n\n250\n00:13:44.170 --> 00:13:49.645\nBut I've also used a previously\nbuilt image as the base for\n\n251\n00:13:49.645 --> 00:13:52.520\nthis application image.\n\n252\n00:13:52.520 --> 00:13:53.450\nSo that's important.\n\n253\n00:13:53.450 --> 00:13:58.255\nIf you see repeatedness, right,\nrepetitive things, repeatedness.\n\n254\n00:13:58.255 --> 00:14:00.440\n&gt;&gt; [LAUGH]\n&gt;&gt; Like that's actually a word.\n\n255\n00:14:00.440 --> 00:14:05.637\nIf you see repetitive type things, and\nlet's just remind ourselves of this.\n\n256\n00:14:05.637 --> 00:14:12.287\nSo nodeappv1/Dockerfile.\n\n257\n00:14:12.287 --> 00:14:14.923\nSo I have this apt-get update,\napt-get install, and\n\n258\n00:14:14.923 --> 00:14:16.617\nI'm always starting from Ubuntu.\n\n259\n00:14:16.617 --> 00:14:19.320\nAnd then I have this last little bit,\nright.\n\n260\n00:14:19.320 --> 00:14:22.988\nSo keep in mind this last little bit.\n\n261\n00:14:22.988 --> 00:14:29.179\nAnd if I do version two Dockerfile,\nthese are exactly the same,\n\n262\n00:14:29.179 --> 00:14:32.857\nright, in those previous two files.\n\n263\n00:14:32.857 --> 00:14:35.582\nWell, if they're exactly the same,\n\n264\n00:14:35.582 --> 00:14:39.848\nmaybe it's best to take that and\nbuild a base image from it.\n\n265\n00:14:39.848 --> 00:14:45.316\nAnd then if we look at version three,\nif we do that,\n\n266\n00:14:45.316 --> 00:14:49.515\nwell, now we can use that base image and\n\n267\n00:14:49.515 --> 00:14:53.857\nonly see the things that are different.\n\n268\n00:14:53.857 --> 00:14:55.224\nIt's very easy to reason about.\n\n269\n00:14:55.224 --> 00:14:59.740\nWe don't have to worry so much about,\nnow, what is all of this stuff doing?\n\n270\n00:14:59.740 --> 00:15:03.992\nAlso, it keeps everything consistent\nas far as runtime cuz if you say\n\n271\n00:15:03.992 --> 00:15:08.042\nanything that changes about Node\ngets changed in the base image.\n\n272\n00:15:08.042 --> 00:15:10.518\nAnd anything that happens differently for\n\n273\n00:15:10.518 --> 00:15:15.410\na particular application happens in that\nparticular application's Docker file.\n\n274\n00:15:15.410 --> 00:15:17.650\nYou have this separation of concerns.\n\n275\n00:15:17.650 --> 00:15:21.924\nAnd it keeps your team from having\nweird mismatch in versioning and\n\n276\n00:15:21.924 --> 00:15:23.458\nthings of that nature.\n\n277\n00:15:23.458 --> 00:15:28.416\n&gt;&gt; Well, Justin I do love to watch you do\nthat voodoo that you do cuz that's some\n\n278\n00:15:28.416 --> 00:15:29.354\ncrazy stuff.\n\n279\n00:15:29.354 --> 00:15:30.310\nBut it makes sense.\n\n280\n00:15:30.310 --> 00:15:32.460\nYou think about computers,\nwhy do we use computers?\n\n281\n00:15:32.460 --> 00:15:33.770\nWhat do we need them for?\n\n282\n00:15:33.770 --> 00:15:35.855\nLike Justin was talking about,\nI wanna say JSON.\n\n283\n00:15:35.855 --> 00:15:40.490\n[LAUGH] You got me in a JSON mode,\nhere we go, is repetitive action.\n\n284\n00:15:40.490 --> 00:15:43.130\nThings that I know I'm gonna do over,\nand over, and over again.\n\n285\n00:15:43.130 --> 00:15:46.580\nWhy do I need to continually retype things\n\n286\n00:15:46.580 --> 00:15:49.180\nthat are going to be done\nin a repetitive manner?\n\n287\n00:15:49.180 --> 00:15:50.710\nI don't.\nI create one thing that\n\n288\n00:15:50.710 --> 00:15:55.670\ndoes that thing for me so I just have\nto call upon it, and only do it once.\n\n289\n00:15:55.670 --> 00:15:57.270\nCall to that, over and\nover and over again,\n\n290\n00:15:57.270 --> 00:15:59.910\nas many times as I need,\nmakes our lives a whole lot easier.\n\n291\n00:15:59.910 --> 00:16:01.010\nAnd that's what it's all about.\n\n292\n00:16:01.010 --> 00:16:02.830\nTrying to figure out where\nwe can cut the corners.\n\n293\n00:16:02.830 --> 00:16:04.240\nTrim the fat, as it were.\n\n294\n00:16:04.240 --> 00:16:07.310\nAnd move on for\nother things that do need to be worked on,\n\n295\n00:16:07.310 --> 00:16:08.960\nlooked at and sought over.\n\n296\n00:16:08.960 --> 00:16:12.040\nThat being said, Justin, anything else\nthat we need to cover when it comes to\n\n297\n00:16:12.040 --> 00:16:14.900\ncreating an application inside of Docker?\n\n298\n00:16:14.900 --> 00:16:16.510\n&gt;&gt; So, Daniel, that's a great question.\n\n299\n00:16:16.510 --> 00:16:23.030\nWhat we've seen is a very,\nvery simple, one kind of runtime.\n\n300\n00:16:23.030 --> 00:16:24.240\nThere's no database involved.\n\n301\n00:16:24.240 --> 00:16:28.430\nA very simple application as far as it's\nconcerned, all serving up a static text.\n\n302\n00:16:29.660 --> 00:16:33.440\nThere are, well,\nthat's not how applications work, right.\n\n303\n00:16:33.440 --> 00:16:36.460\nWe're not done with building\napplication using Docker.\n\n304\n00:16:36.460 --> 00:16:39.810\nBut I wanted to make sure we\nhave this very basic knowledge,\n\n305\n00:16:39.810 --> 00:16:41.920\nand kind of a thought process behind it,\n\n306\n00:16:41.920 --> 00:16:44.230\nbefore we move on to those\nthose more complex things.\n\n307\n00:16:44.230 --> 00:16:46.190\nMaybe that will be another episode.\n\n308\n00:16:46.190 --> 00:16:48.260\n&gt;&gt; Maybe, it will,\nwe'll have to see won't we?\n\n309\n00:16:48.260 --> 00:16:49.790\nJoin us back for that one,\n\n310\n00:16:49.790 --> 00:16:53.283\ndefinitely, where Justin continues\ndown this trend of thought.\n\n311\n00:16:53.283 --> 00:16:54.242\nAlways interesting stuff.\n\n312\n00:16:54.242 --> 00:16:55.570\nJustin, thanks for joining us today.\n\n313\n00:16:55.570 --> 00:16:57.730\nThanks for\nshowing us what you've shown us so far.\n\n314\n00:16:57.730 --> 00:16:59.430\nHopefully, you guys have\ngotten a lot out of it.\n\n315\n00:16:59.430 --> 00:17:01.820\nAnd gals, not trying to discriminate here.\n\n316\n00:17:01.820 --> 00:17:04.980\nBut it does look like it's that time for\nthis show to sign off.\n\n317\n00:17:04.980 --> 00:17:07.550\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n318\n00:17:07.550 --> 00:17:08.970\n&gt;&gt; And I'm Justin Dennison.\n\n319\n00:17:08.970 --> 00:17:09.987\n&gt;&gt; And we'll see you next time.\n\n320\n00:17:09.987 --> 00:17:17.325\n[MUSIC]\n\n321\n00:17:17.325 --> 00:17:20.837\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "211738486"
        },
        {
          "description": "In this episode, Daniel and Justin build upon single container applications to bring in the use of a Redis container for a simple caching layer. By building a Python based web application that uses an additional container, they use containers as application components. They also clarifying the practices for linking containers into a collection that serves as a single application.",
          "length": "1575",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-1-multi-container_apps_with_docker-040317-PGM.00_26_00_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-1-multi-container_apps_with_docker-040317-PGM.00_26_00_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-1-multi-container_apps_with_docker-040317-PGM.00_26_00_28.Still001-sm.jpg",
          "title": "Multi-container Apps with Docker",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:06.431\nWelcome to ITProTV.\n\n2\n00:00:06.431 --> 00:00:08.220\n&gt;&gt; [MUSIC]\n\n3\n00:00:08.220 --> 00:00:12.144\nYou're watching ITProTV.\n\n4\n00:00:12.144 --> 00:00:14.251\n&gt;&gt; All right, greetings everyone and\n\n5\n00:00:14.251 --> 00:00:16.999\nwelcome to another great\nepisode of ITProTV.\n\n6\n00:00:16.999 --> 00:00:18.613\nI'm your host Daniel Lowrie, and\n\n7\n00:00:18.613 --> 00:00:22.411\nin today's episode we're coming back at\nyou with more introduction to Docker.\n\n8\n00:00:22.411 --> 00:00:26.320\nAnd of course, what would we do\nwithout our mentor in this endeavor,\n\n9\n00:00:26.320 --> 00:00:27.950\nour good friend Mr. Justin Dennison.\n\n10\n00:00:27.950 --> 00:00:30.180\nJustin, welcome back man,\nso glad to have you again.\n\n11\n00:00:30.180 --> 00:00:32.580\n&gt;&gt; It's good to be here,\nhow are you today Daniel?\n\n12\n00:00:32.580 --> 00:00:33.270\n&gt;&gt; I can't complain, sir, thank you.\n\n13\n00:00:33.270 --> 00:00:35.220\n&gt;&gt; Well that's always good to hear.\n\n14\n00:00:35.220 --> 00:00:39.566\nWell Daniel, I'm sorry to say we're\nprobably getting ready to blow your mind.\n\n15\n00:00:39.566 --> 00:00:40.523\n&gt;&gt; [LAUGH] Sounds fun.\n\n16\n00:00:40.523 --> 00:00:41.161\n[LAUGH]\n&gt;&gt; So\n\n17\n00:00:41.161 --> 00:00:45.660\nin the previous episodes we've\nbuilt up our repertoire.\n\n18\n00:00:45.660 --> 00:00:48.870\n&gt;&gt; Repertoire.\n&gt;&gt; Yeah, repertoire, there we go.\n\n19\n00:00:48.870 --> 00:00:52.287\nAnd we've also looked at how\nto kind of build a simple\n\n20\n00:00:52.287 --> 00:00:55.328\nimage that has an application\nembedded in it.\n\n21\n00:00:55.328 --> 00:00:58.149\nBut as we all know,\napplications typically aren't, well,\n\n22\n00:00:58.149 --> 00:01:01.839\njust single little things that's just\nprint out to the screen, maybe they are if\n\n23\n00:01:01.839 --> 00:01:05.605\nyou're building a command line application\nwhich is a valid use case for Docker.\n\n24\n00:01:05.605 --> 00:01:09.927\nBut what if we need a database, or\nsome way to have some networked\n\n25\n00:01:09.927 --> 00:01:14.740\napplication together, or a caching\nlayer such as Redis or Memcached?\n\n26\n00:01:14.740 --> 00:01:18.854\nAnd again these are, I've picked\ntechnologies that are kind of ubiquitous,\n\n27\n00:01:18.854 --> 00:01:22.842\nbut not necessarily, you don't have\nto know anything about programming,\n\n28\n00:01:22.842 --> 00:01:27.680\nwe're worried more about how do you use\nDocker to bring all these things together?\n\n29\n00:01:27.680 --> 00:01:31.030\nSo I think there's no better\ntime than to start with a,\n\n30\n00:01:31.030 --> 00:01:34.280\nwell a simple example and\nthen work our way up.\n\n31\n00:01:34.280 --> 00:01:39.860\nSo let's take a look at my screen here and\nI have, in this folder I have an app and\n\n32\n00:01:39.860 --> 00:01:44.767\na redis, and let's just do a little\nbit of inspection about these and\n\n33\n00:01:44.767 --> 00:01:48.602\na little bit of planning to\nsee what's going on here.\n\n34\n00:01:48.602 --> 00:01:52.837\nSo if I look at the Dockerfile,\nso from Python.3 or\n\n35\n00:01:52.837 --> 00:01:56.989\n3.5 so\nI'm pulling something from Docker Hub.\n\n36\n00:01:56.989 --> 00:01:59.502\nI'm copying the requirements.txt,\n\n37\n00:01:59.502 --> 00:02:04.308\nnow requirements are a way of denoting\ndependencies for a Python runtime.\n\n38\n00:02:04.308 --> 00:02:10.170\nI'm also copying webapp to app.webapp.py,\nexchanging the work directory.\n\n39\n00:02:10.170 --> 00:02:14.820\nAnd if you notice, if you haven't watched\nthe previous episodes on building\n\n40\n00:02:14.820 --> 00:02:19.700\na Node application, this looks very\nsimilar except it's for a Python runtime.\n\n41\n00:02:19.700 --> 00:02:22.814\nAnd I'm running pip install\ndash r requirements.txt, so\n\n42\n00:02:22.814 --> 00:02:27.520\nthat grabs all of the dependencies that\nI need in order for my webapp to run.\n\n43\n00:02:27.520 --> 00:02:31.650\nAnd then I have an entry point and\na command, so run python.webapp.\n\n44\n00:02:31.650 --> 00:02:34.030\nAll right, so\nI think it's best if we go and\n\n45\n00:02:34.030 --> 00:02:38.140\nlook at this requirements,\nand see what we have here.\n\n46\n00:02:38.140 --> 00:02:43.210\nSo I need click, Flask, which is\njust some things I need, redis, and\n\n47\n00:02:43.210 --> 00:02:45.500\nthat's gonna serve as our caching layer.\n\n48\n00:02:45.500 --> 00:02:49.250\nAnd then let's look at our webapp here,\nthis is a Flask web app,\n\n49\n00:02:49.250 --> 00:02:52.320\nif you don't know anything about Flask\nthat's fine, it works very similar to\n\n50\n00:02:53.490 --> 00:02:57.660\nExpress, Ruby on Rails,\njust syntax is a little bit different.\n\n51\n00:02:57.660 --> 00:03:02.440\nAnd we'll go through these routes, but\nnotice I'm using redis inside of here just\n\n52\n00:03:02.440 --> 00:03:06.830\nto keep count of how many times I've been\nto the home page, to the about page,\n\n53\n00:03:06.830 --> 00:03:10.260\nto the contact page, and\nthen I have a summary dashboard.\n\n54\n00:03:10.260 --> 00:03:14.450\nAgain, these will be available\nin the show notes, so\n\n55\n00:03:14.450 --> 00:03:18.640\njust worry about the Docker part and\nnot so much about the development part.\n\n56\n00:03:18.640 --> 00:03:20.680\nSo, what do I need to do?\n\n57\n00:03:20.680 --> 00:03:22.430\nI'm going to build this application.\n\n58\n00:03:23.790 --> 00:03:31.120\nSo, docker build dash t and\nappropriate naming convention.\n\n59\n00:03:33.010 --> 00:03:37.030\nLet's say webapp, yeah,\nlet's call it webapp and\n\n60\n00:03:37.030 --> 00:03:39.650\nI'm just gonna leave it as the latest tag.\n\n61\n00:03:39.650 --> 00:03:42.170\nAnd it's going to pull,\nnow I don't have this image so\n\n62\n00:03:42.170 --> 00:03:45.310\nit has to pull this image down,\nso that may take a little while.\n\n63\n00:03:46.890 --> 00:03:50.700\nNow, with that said, what is gonna happen\nin this application as we're waiting for\n\n64\n00:03:50.700 --> 00:03:55.950\nthis, this application is going to run in\na separate container than the redis one.\n\n65\n00:03:55.950 --> 00:03:59.680\nRight, our container should be\nsingly responsible for one thing,\n\n66\n00:03:59.680 --> 00:04:02.430\nthere should be one thing in\neach container that we build.\n\n67\n00:04:02.430 --> 00:04:05.340\nSo our web application is running and\nthen we're gonna have redis in another\n\n68\n00:04:05.340 --> 00:04:09.650\nweb application and\nthey need to connect, or not a web app,\n\n69\n00:04:09.650 --> 00:04:13.190\nin another container, misspoke there,\nand we need to connect those.\n\n70\n00:04:13.190 --> 00:04:17.310\nNow normally in a sever, or\nan Amazon environment, or Digital Ocean,\n\n71\n00:04:17.310 --> 00:04:21.290\nor something like that, you could build\nthese through hard coded networks.\n\n72\n00:04:22.810 --> 00:04:28.187\nBut in Docker containers I'm not\nguaranteed that I always have the same IP,\n\n73\n00:04:28.187 --> 00:04:30.620\nI'm not assigning things like that.\n\n74\n00:04:30.620 --> 00:04:36.090\nAnd also maybe they run on the same VM,\nmaybe they don't, who knows, we need some\n\n75\n00:04:36.090 --> 00:04:41.870\nway to keep it a little more abstract so\nthat Docker can take over for us on that.\n\n76\n00:04:41.870 --> 00:04:44.537\n&gt;&gt; Too bad you can't just build one big\nVM inside of Docker and then a bunch of\n\n77\n00:04:44.537 --> 00:04:47.310\nlittle VMs inside of that, that way you\nalways know you get the same thing.\n\n78\n00:04:47.310 --> 00:04:48.160\n&gt;&gt; Yeah, yeah, yeah.\n\n79\n00:04:48.160 --> 00:04:48.866\n&gt;&gt; [LAUGH]\n&gt;&gt; Don't do that.\n\n80\n00:04:48.866 --> 00:04:49.520\n&gt;&gt; Yeah.\n[LAUGH]\n\n81\n00:04:49.520 --> 00:04:50.518\n&gt;&gt; Don't do that.\n\n82\n00:04:50.518 --> 00:04:54.740\nSo keep your Docker images small,\nthat's a very important tenet,\n\n83\n00:04:54.740 --> 00:04:59.699\nwith that said, there are times where I\nstray away from that if I'm trying to get\n\n84\n00:04:59.699 --> 00:05:02.980\nsomething working and\nI'm just having a hard time.\n\n85\n00:05:04.110 --> 00:05:08.440\nSo now I have my web app\nbuilt as an image, so\n\n86\n00:05:08.440 --> 00:05:13.170\nif I say docker and images,\nwell if I can spell images correctly.\n\n87\n00:05:14.420 --> 00:05:20.870\nThere we have webapp latest, okay, let's\nsee what happens if I try to run this.\n\n88\n00:05:22.330 --> 00:05:28.451\nDocker run, and this is on port 5000 so\nI'm gonna map this to port 5000 locally.\n\n89\n00:05:28.451 --> 00:05:34.052\nAnd I'm gonna say justindevpro/webapp and\nwait for\n\n90\n00:05:34.052 --> 00:05:40.287\nit, it says that it's running,\nokay, so it's running.\n\n91\n00:05:40.287 --> 00:05:43.669\nAnd I've left this in debug mode just so\nI can keep tabs on things,\n\n92\n00:05:43.669 --> 00:05:45.895\nin production you would not wanna do this.\n\n93\n00:05:45.895 --> 00:05:49.671\nAnd if we go to local host, 5000,\n\n94\n00:05:49.671 --> 00:05:55.336\nwell you'll notice that I\nimmediately get an error, and\n\n95\n00:05:55.336 --> 00:06:02.546\nthat's because my web app has\na dependency on a Redis instance running.\n\n96\n00:06:02.546 --> 00:06:06.065\nSo if you don't know what Redis is,\nit's an in memory kind of caching layer,\n\n97\n00:06:06.065 --> 00:06:07.974\nyou can use it as\nan an in memory database.\n\n98\n00:06:07.974 --> 00:06:11.541\nIt's very fast, it's not used for\npersistent storage but\n\n99\n00:06:11.541 --> 00:06:16.534\nit's great if you need to keep statistics\nthat are off-loaded in a batch process or\n\n100\n00:06:16.534 --> 00:06:20.269\nif you need to manage user sessions for\nsmall amounts of time.\n\n101\n00:06:21.280 --> 00:06:23.140\nWell, we don't have that,\nand we need that.\n\n102\n00:06:24.210 --> 00:06:27.960\nSo we're gonna kill our application here,\nand notice there that while\n\n103\n00:06:27.960 --> 00:06:31.670\nthere's nothing special about the Python,\nif I do a Ctrl+C,\n\n104\n00:06:31.670 --> 00:06:35.720\nthat actually just pipes that through\nin the Docker container and works.\n\n105\n00:06:35.720 --> 00:06:41.620\nAll right, well let's hop out and\ngo into this redis folder,\n\n106\n00:06:41.620 --> 00:06:46.890\nand notice I've pulled these apart into\nfolders kind of as an organization scheme,\n\n107\n00:06:46.890 --> 00:06:49.380\nand I have a Dockerfile here as well.\n\n108\n00:06:50.470 --> 00:06:57.296\nAnd I have from ubuntu 16.04, run update,\ninstall some things that I need for Redis.\n\n109\n00:06:57.296 --> 00:07:00.828\nNow, I went and looked this up,\nthis is readily available to you.\n\n110\n00:07:00.828 --> 00:07:04.921\nAt apt-repository ppa, so\nI'm using a separate ppa for apt, and\n\n111\n00:07:04.921 --> 00:07:08.442\nthen I'm updating and\ninstalling Redis server as well.\n\n112\n00:07:08.442 --> 00:07:11.791\nI'm creating a volume exposing the port,\nnow what does this expose?\n\n113\n00:07:11.791 --> 00:07:14.158\nWe haven't seen this or the volume, so\n\n114\n00:07:14.158 --> 00:07:17.603\nthe volume is creating a folder\ninside of the container,\n\n115\n00:07:17.603 --> 00:07:22.364\nso we're not necessarily putting anything\nthere yet but we're creating it.\n\n116\n00:07:22.364 --> 00:07:27.558\nAnd then expose 6379,\nthat says you should expect for\n\n117\n00:07:27.558 --> 00:07:32.019\nthings to wanna come into and\nlisten to 6379.\n\n118\n00:07:32.019 --> 00:07:35.565\nAnd I have an entry point that\nstarts up the server, and\n\n119\n00:07:35.565 --> 00:07:40.422\nI tell it that the log file is going\nto be in the redis-server.log inside of\n\n120\n00:07:40.422 --> 00:07:42.240\nthat login that I created.\n\n121\n00:07:42.240 --> 00:07:46.038\nNow we've written up several Dockerfiles,\ndefinitely go through and\n\n122\n00:07:46.038 --> 00:07:48.823\nlook at these when you get\nthem from the show notes and\n\n123\n00:07:48.823 --> 00:07:52.449\nsee what individual pieces mean,\nmake sure you know what they are.\n\n124\n00:07:52.449 --> 00:07:57.376\nQuick aside, I've left this as\nindividual runs mainly because, well,\n\n125\n00:07:57.376 --> 00:08:02.619\nI wanna utilize that caching as I'm\ndeveloping Later on I may build this into,\n\n126\n00:08:02.619 --> 00:08:08.040\nwell, a single run command that just does\nall of these and I get it, boom, done.\n\n127\n00:08:08.040 --> 00:08:10.600\nAll right, so what can I do?\n\n128\n00:08:10.600 --> 00:08:15.756\nI can say docker build\n-t justindevpro/redis,\n\n129\n00:08:15.756 --> 00:08:23.131\nactually we'll just call it Redis\nlatest and we're gonna build here.\n\n130\n00:08:23.131 --> 00:08:27.435\nSo from Ubuntu 16.04 I have to run,\nI have to get update, and\n\n131\n00:08:27.435 --> 00:08:30.191\nit has to run through all of these pieces.\n\n132\n00:08:30.191 --> 00:08:34.643\nBut I have to have this available to\nme either from pulling down Redis or\n\n133\n00:08:34.643 --> 00:08:39.774\nbuilding this application because, well,\nmy application depends on Redis and\n\n134\n00:08:39.774 --> 00:08:42.649\nI need to make these two things talk,\nright.\n\n135\n00:08:42.649 --> 00:08:45.008\nThere's a couple of ways\nto make these talk,\n\n136\n00:08:45.008 --> 00:08:48.350\nthe first one that we're\ngonna see is an old style.\n\n137\n00:08:48.350 --> 00:08:51.400\nIt's actually recommended that you don't\ndo this anymore, but I think you should\n\n138\n00:08:51.400 --> 00:08:56.430\nsee it because you will see Dockerfiles\nand applications built in this way.\n\n139\n00:08:56.430 --> 00:08:58.210\nAnd then we'll see the new\nrecommended style,\n\n140\n00:08:58.210 --> 00:09:02.140\nand then maybe we'll add\na little extra for flavoring.\n\n141\n00:09:02.140 --> 00:09:07.034\nBut notice it's running fairly quickly,\nbut it does take a little while so\n\n142\n00:09:07.034 --> 00:09:11.244\nwe're waiting on that, and\nlet me open another terminal here.\n\n143\n00:09:14.419 --> 00:09:19.736\nAnd while we're doing that I\ndo wanna point out something\n\n144\n00:09:19.736 --> 00:09:24.276\nhere in the application,\nso go back to desktop,\n\n145\n00:09:24.276 --> 00:09:28.177\napplication, wait for it, version 1.\n\n146\n00:09:28.177 --> 00:09:32.318\nAnd if I go back into app and\nI look at webapp.py,\n\n147\n00:09:32.318 --> 00:09:38.260\nwe've already built this but\nnotice I have this host of Redis.\n\n148\n00:09:38.260 --> 00:09:40.830\nIf you've ever built a web\napplication that's running locally,\n\n149\n00:09:40.830 --> 00:09:43.580\nthis is typically going to be local host.\n\n150\n00:09:44.620 --> 00:09:46.590\nBut it is mapped to the port 6379,\n\n151\n00:09:46.590 --> 00:09:50.435\nwhich we saw is going to be\nexposed by that Dockerfile.\n\n152\n00:09:52.010 --> 00:09:53.450\nBut I did want to outline, whoa,\n\n153\n00:09:53.450 --> 00:09:56.800\nwhoa, whoa, got my hands on\nthe wrong keys in vim there.\n\n154\n00:09:56.800 --> 00:09:59.690\n&gt;&gt; Slow down there, Jiminy Click-it.\n\n155\n00:09:59.690 --> 00:10:01.230\n&gt;&gt; Yeah, whoo.\nI will tell you,\n\n156\n00:10:01.230 --> 00:10:04.150\nthere are times in vim where I\naccidentally just delete everything I just\n\n157\n00:10:04.150 --> 00:10:06.882\ntyped and I go that's not good.\n\n158\n00:10:06.882 --> 00:10:09.585\n&gt;&gt; Yeah.\n&gt;&gt; I hope I can undo that.\n\n159\n00:10:09.585 --> 00:10:11.832\nBut the host is going to be a named host,\nand\n\n160\n00:10:11.832 --> 00:10:15.586\nthis is particular to the Docker\nenvironment, so that's important.\n\n161\n00:10:15.586 --> 00:10:21.991\nAnd finally, if I go down here,\nthis application is being mapped to,\n\n162\n00:10:21.991 --> 00:10:27.423\nwell it's not being\nmapped to 127.0.0.0.1 but\n\n163\n00:10:27.423 --> 00:10:33.195\ninstead to the actual IP\naddress with this host=0.0.0.\n\n164\n00:10:33.195 --> 00:10:36.983\nSo this will actually be the Docker\nimage inside, or excuse me,\n\n165\n00:10:36.983 --> 00:10:40.190\ninside there will map to\nwhatever is going on.\n\n166\n00:10:40.190 --> 00:10:44.087\nBut we should still be able to bind\nto whatever port its running on, and\n\n167\n00:10:44.087 --> 00:10:47.404\nby default it's port 5,000 for\nFlask applications.\n\n168\n00:10:47.404 --> 00:10:52.057\nSo let's go see if this is done,\nand it is in fact finished.\n\n169\n00:10:52.057 --> 00:10:58.070\nNow with that said, if we go in docker\nps we have no containers running.\n\n170\n00:10:58.070 --> 00:10:59.430\nWhat do I need?\n\n171\n00:10:59.430 --> 00:11:05.530\nI've built my web app, I've built my\nRedis image, but now what do I need?\n\n172\n00:11:05.530 --> 00:11:10.325\nI know that my web app depends on my Redis\nimage, so I'm gonna start my Redis image\n\n173\n00:11:10.325 --> 00:11:14.780\nup and I'm going to be very\nspecific about how I start it up.\n\n174\n00:11:14.780 --> 00:11:20.590\nSo docker run dash d name redis,\n\n175\n00:11:20.590 --> 00:11:26.371\nand I'm gonna use justindevpro/redis.\n\n176\n00:11:26.371 --> 00:11:30.760\nAnd if I do docker ps notice\nthat it is running and\n\n177\n00:11:30.760 --> 00:11:35.450\nit has exposed ports of 6379.\n\n178\n00:11:35.450 --> 00:11:38.660\nAll right,\nnow I need to start up my application.\n\n179\n00:11:38.660 --> 00:11:40.230\nAnd we're doing this command line,\n\n180\n00:11:40.230 --> 00:11:44.450\nthis is something you could put in a bash\nscript or something of that nature, but\n\n181\n00:11:44.450 --> 00:11:50.160\nit's good to see these in isolation before\nwe start using those more complex tools.\n\n182\n00:11:50.160 --> 00:11:56.863\nSo if I say docker run -d because I\njust want this to run in the background,\n\n183\n00:11:56.863 --> 00:12:03.044\nand I'm gonna call this app and\nI'm going to expose port 5000.\n\n184\n00:12:05.422 --> 00:12:10.529\nAnd as I said, this is the old way,\nthere used to be this link, --link.\n\n185\n00:12:10.529 --> 00:12:15.493\nAnd what this would do is add\na host to the /etc/host inside of\n\n186\n00:12:15.493 --> 00:12:20.460\nthis container that references\nRedis in another container,\n\n187\n00:12:20.460 --> 00:12:24.090\nand actually make sure they all work.\n\n188\n00:12:24.090 --> 00:12:26.410\nThis is not recommended\nto be done anymore,\n\n189\n00:12:26.410 --> 00:12:29.030\nwe'll see an alternative to that shortly.\n\n190\n00:12:29.030 --> 00:12:33.270\n&gt;&gt; So we could just manually\ngo into that server and\n\n191\n00:12:33.270 --> 00:12:34.990\nhard code that into the etc/host file.\n\n192\n00:12:34.990 --> 00:12:37.130\n&gt;&gt; We could,\nexcept there's one difference,\n\n193\n00:12:37.130 --> 00:12:40.960\nthe etc/host actually references\na container ID that is dynamic,\n\n194\n00:12:40.960 --> 00:12:43.580\nso definitely let Docker\ntake care of that.\n\n195\n00:12:43.580 --> 00:12:48.710\nAnd for most instances I would think\nvery similar to what Daniel said\n\n196\n00:12:48.710 --> 00:12:50.940\nwell we could just hard code that and\nthen we don't have to worry about this.\n\n197\n00:12:52.970 --> 00:12:57.630\nYou might get lucky that it works a couple\nof times, but if that container ID and\n\n198\n00:12:57.630 --> 00:13:00.470\nsome other things change because your\nenvironment's a little bit different for\n\n199\n00:13:00.470 --> 00:13:03.870\nthe Docker runtime,\nwell, it's gonna break.\n\n200\n00:13:03.870 --> 00:13:06.842\nAnd then you're gonna go that\ndoesn't work any more, so\n\n201\n00:13:06.842 --> 00:13:09.082\n[COUGH] be very careful there.\n\n202\n00:13:09.082 --> 00:13:13.838\nSo there's Redis and we're linking,\nwhat we're saying is we wanna create\n\n203\n00:13:13.838 --> 00:13:17.997\na link to the Redis container that\nis running, this is by name, and\n\n204\n00:13:17.997 --> 00:13:22.336\ncall that Redis inside of the container\nwe're getting ready to run.\n\n205\n00:13:22.336 --> 00:13:26.304\n[SOUND] Gotta be careful there,\nlet's go back through that.\n\n206\n00:13:26.304 --> 00:13:31.205\nI'm linking to the container named Redis,\nand that's based on the name that I gave\n\n207\n00:13:31.205 --> 00:13:34.916\nit, and inside of the container\nI'm getting ready to create,\n\n208\n00:13:34.916 --> 00:13:37.174\nthat's also going to be named Redis.\n\n209\n00:13:37.174 --> 00:13:42.410\nAnd because we've used host equals\nRedis in our web application,\n\n210\n00:13:42.410 --> 00:13:47.060\nwe can now reference Redis as\na host because of this link.\n\n211\n00:13:47.060 --> 00:13:48.036\nAgain, old style and\n\n212\n00:13:48.036 --> 00:13:54.060\nit's kinda weird because it's doing some\nbehind the scenes magic so to speak.\n\n213\n00:13:54.060 --> 00:14:00.400\nNot quite done here and\nwe wanna run justindevpro/webapp,\n\n214\n00:14:00.400 --> 00:14:03.900\nand I think that will get us up and\ngoing here.\n\n215\n00:14:03.900 --> 00:14:08.400\nSo docker ps, and\nnotice I have two containers running,\n\n216\n00:14:08.400 --> 00:14:10.835\nall right, I have one called app.\n\n217\n00:14:10.835 --> 00:14:16.590\nAnd let me zoom out, just so\nthose format a little bit better and\n\n218\n00:14:16.590 --> 00:14:18.440\nthen I will zoom in here.\n\n219\n00:14:19.670 --> 00:14:24.470\nAll right, so I have two containers\nrunning, one is based on the webapp image,\n\n220\n00:14:24.470 --> 00:14:26.210\none is based on the Redis image.\n\n221\n00:14:26.210 --> 00:14:29.360\nThey show the commands that are running,\nthey show how long they've been,\n\n222\n00:14:29.360 --> 00:14:30.210\nnothing's different.\n\n223\n00:14:31.220 --> 00:14:36.380\nAnd the ports and the name, okay,\nwe saw that it died last time.\n\n224\n00:14:36.380 --> 00:14:39.900\nI started this as a process,\nI didn't have to, but\n\n225\n00:14:39.900 --> 00:14:42.915\ntypically in a web server you're gonna\nhave this running in the background.\n\n226\n00:14:42.915 --> 00:14:47.240\nLet's go see if it works now, and\n\n227\n00:14:47.240 --> 00:14:52.670\nif I refresh, response error, denied,\nRedis is running in protected mode\n\n228\n00:14:52.670 --> 00:14:56.860\nbecause protected mode is enabled,\nno bind address was specified.\n\n229\n00:14:58.620 --> 00:15:02.090\nSo I built a custom Redis image and\n\n230\n00:15:02.090 --> 00:15:06.900\nthat was kind of weird, right,\nit should work, but it doesn't.\n\n231\n00:15:06.900 --> 00:15:09.690\nSo where do I go to\nfigure out what happened?\n\n232\n00:15:09.690 --> 00:15:14.780\nIt should work, this is all linked,\nnotice it actually found the host,\n\n233\n00:15:14.780 --> 00:15:19.140\nit just couldn't connect to it because\nRedis isn't configured appropriately.\n\n234\n00:15:19.140 --> 00:15:20.030\nSo what do I do?\n\n235\n00:15:20.030 --> 00:15:24.460\nWell, in this instance I\ntypically go to Docker Hub, and\n\n236\n00:15:24.460 --> 00:15:29.160\nI look for a pre-made official image\nof what I'm trying to accomplish.\n\n237\n00:15:30.970 --> 00:15:34.880\nAnd here we have Redis, and\nI can go look at the Dockerfile.\n\n238\n00:15:34.880 --> 00:15:38.487\nAnd if we come down here,\nman, this is crazy,\n\n239\n00:15:38.487 --> 00:15:43.308\nI don't know what's going on,\nI don't know how to fix this.\n\n240\n00:15:44.663 --> 00:15:49.679\nSo if I don't know how to read this,\nyou know what I do?\n\n241\n00:15:49.679 --> 00:15:52.585\nI just use it and see if it works,\nI'm a big proponent of that.\n\n242\n00:15:52.585 --> 00:15:56.841\n&gt;&gt; The spaghetti against the wall\ntechnique, [LAUGH] see what sticks.\n\n243\n00:15:56.841 --> 00:16:00.527\n&gt;&gt; I'm like eh, throw it and\nif it sticks, it's going with it.\n\n244\n00:16:00.527 --> 00:16:02.756\nSo I tried to build my own custom RETIS.\n\n245\n00:16:02.756 --> 00:16:04.500\nAnd maybe I'll come back to that.\n\n246\n00:16:04.500 --> 00:16:06.890\nBut I want this application up and\nrunning.\n\n247\n00:16:06.890 --> 00:16:12.750\nSo now I'm going to switch and\nkind of re-go through this.\n\n248\n00:16:12.750 --> 00:16:15.750\nAnd here's where we run into some issues.\n\n249\n00:16:15.750 --> 00:16:20.040\nIn order to do that,\nwe gotta kill both of these processes.\n\n250\n00:16:22.230 --> 00:16:28.550\nAll right, so docker remove -f,\nand I'm gonna say app and redis.\n\n251\n00:16:28.550 --> 00:16:30.990\nAll right, so, it will kill and\nremove those containers so\n\n252\n00:16:30.990 --> 00:16:32.460\nI can reuse those names.\n\n253\n00:16:32.460 --> 00:16:37.270\nI'm gonna cycle back up through,\njust for ease of use, and\n\n254\n00:16:37.270 --> 00:16:43.150\ninstead of using my redis build, I wanna\nuse the official redis build which,\n\n255\n00:16:43.150 --> 00:16:45.050\nit doesn't have it, but\nit will pull it down.\n\n256\n00:16:45.050 --> 00:16:46.830\nAnd notice it says already exists.\n\n257\n00:16:46.830 --> 00:16:48.525\nAnd that's because, well,\n\n258\n00:16:48.525 --> 00:16:53.630\nthere's an image on my machine that is\nused in the building of that redis image.\n\n259\n00:16:54.950 --> 00:16:56.760\nSo, that was pretty quick.\n\n260\n00:16:56.760 --> 00:16:58.400\nAnd notice it's up and running.\n\n261\n00:16:58.400 --> 00:17:01.240\nAwesome.\nAll right, now if we run back through,\n\n262\n00:17:03.200 --> 00:17:08.780\nwe're gonna restart our application\nwith that same link, okay?\n\n263\n00:17:08.780 --> 00:17:11.469\nIt looks to be running here, docker ps.\n\n264\n00:17:11.469 --> 00:17:12.953\nAnd it looks the same, but\n\n265\n00:17:12.953 --> 00:17:16.609\nnotice I'm using a different\nimage because mine didn't work.\n\n266\n00:17:18.060 --> 00:17:22.470\nHow does that play out if I refresh?\n\n267\n00:17:22.470 --> 00:17:23.846\nWait for it, wait for it.\n\n268\n00:17:23.846 --> 00:17:27.220\nAnd what you will find with\nthese dash dash links,\n\n269\n00:17:27.220 --> 00:17:32.190\nsometimes there's a delay on the initial\nload or the initial kind of startup.\n\n270\n00:17:33.890 --> 00:17:36.560\nSo, I'm gonna go to a different place.\n\n271\n00:17:36.560 --> 00:17:37.080\nThere we go.\n\n272\n00:17:37.080 --> 00:17:38.880\nNow, it's finally started up.\n\n273\n00:17:38.880 --> 00:17:44.845\nAnd just to show you what's going on,\nI have three routes.\n\n274\n00:17:47.593 --> 00:17:49.150\nHome is not one of them.\n\n275\n00:17:50.170 --> 00:17:51.400\nThere we go.\n\n276\n00:17:51.400 --> 00:17:52.830\nAnd notice it's kinda slow.\n\n277\n00:17:54.410 --> 00:17:59.790\nSo I'm gonna stop this, and\nI'm gonna say slash, and there's home.\n\n278\n00:17:59.790 --> 00:18:04.310\nAnd I'm gonna refresh a bunch of times,\njust because we'll see in just a moment.\n\n279\n00:18:04.310 --> 00:18:06.090\nAnd then a contact page.\n\n280\n00:18:07.190 --> 00:18:08.120\nNotice there's contact.\n\n281\n00:18:08.120 --> 00:18:09.215\nI'm gonna refresh a couple times.\n\n282\n00:18:09.215 --> 00:18:10.730\nBut then, I have a summary.\n\n283\n00:18:12.340 --> 00:18:15.500\nThis is the information\nthat is stored in Redis.\n\n284\n00:18:15.500 --> 00:18:17.570\nIt's just keeping page hits.\n\n285\n00:18:18.600 --> 00:18:22.360\nAnd I can grab a summary, and maybe I\nstore this in a more persistence layer cuz\n\n286\n00:18:22.360 --> 00:18:26.000\nif this redis goes down,\nit's all over, right?\n\n287\n00:18:26.000 --> 00:18:28.510\nSo that's how we link them old style.\n\n288\n00:18:28.510 --> 00:18:31.640\nThere's actually a recommendation\nthat you don't use the dash dash link\n\n289\n00:18:31.640 --> 00:18:33.260\nin the command line any more.\n\n290\n00:18:33.260 --> 00:18:37.550\nBut instead, set up a docker network.\n\n291\n00:18:37.550 --> 00:18:41.410\nAnd I think that's probably where\nwe'll get to by the end of this.\n\n292\n00:18:42.590 --> 00:18:47.780\nSo let's actually do that, and\nsee how this changes versus the links.\n\n293\n00:18:47.780 --> 00:18:48.420\nSo I'm gonna clear.\n\n294\n00:18:48.420 --> 00:18:55.810\nAnd I'm gonna docker rm -f redis app.\n\n295\n00:18:55.810 --> 00:18:59.280\nAnd again, I built a redis image,\nbut it wasn't working.\n\n296\n00:18:59.280 --> 00:19:01.375\nSo let me just see if I can\nfind an official image,\n\n297\n00:19:01.375 --> 00:19:04.970\ncuz typically those are gonna be\nfairly robust if they're official.\n\n298\n00:19:04.970 --> 00:19:07.656\nAnd even some of the community\nones are very robust.\n\n299\n00:19:07.656 --> 00:19:11.344\nYou do need to maybe try yourself first,\nand if worst comes to worst,\n\n300\n00:19:11.344 --> 00:19:13.390\njust try to get things up and running.\n\n301\n00:19:13.390 --> 00:19:14.610\nThat kind of mantra.\n\n302\n00:19:15.980 --> 00:19:18.450\nSo, now what do we need to do?\n\n303\n00:19:18.450 --> 00:19:20.172\nWell, we need to create a network.\n\n304\n00:19:20.172 --> 00:19:23.160\nAnd what we're gonna do after\ncreating a network using docker.\n\n305\n00:19:23.160 --> 00:19:25.980\nSo this is kind of virtualized network,\nso to speak.\n\n306\n00:19:27.530 --> 00:19:29.940\nWe're going to add both of those\ncontainers to the network, and\n\n307\n00:19:29.940 --> 00:19:33.460\nthey will be added based on name, okay?\n\n308\n00:19:34.530 --> 00:19:37.020\nSo, here we go, let's give it a whirl.\n\n309\n00:19:38.120 --> 00:19:42.360\nSo if I type docker network,\nI can manage docker networks,\n\n310\n00:19:42.360 --> 00:19:45.500\ncreate connect a container to a network,\ncreate a network.\n\n311\n00:19:45.500 --> 00:19:47.830\nOkay, well, that's what we wanna do.\n\n312\n00:19:47.830 --> 00:19:52.070\nAnd let's just do docker network ls.\n\n313\n00:19:52.070 --> 00:19:56.890\nAnd notice, there's already some\nnetworks here, bridge, host, null.\n\n314\n00:19:56.890 --> 00:19:58.230\nAll right, local scope.\n\n315\n00:19:58.230 --> 00:20:00.980\nThese will always, for\nthe most part, be here.\n\n316\n00:20:00.980 --> 00:20:03.050\nThey're kind of the default networks.\n\n317\n00:20:03.050 --> 00:20:06.660\nI want to create a new one\nthat works in my context.\n\n318\n00:20:07.670 --> 00:20:09.744\nSo, docker network.\n\n319\n00:20:09.744 --> 00:20:13.530\nGotta spell network correctly.\n\n320\n00:20:13.530 --> 00:20:17.038\nCreate, and, well,\nlet's just call this the webapp network.\n\n321\n00:20:19.221 --> 00:20:25.032\nAll right, so\nI have this docker network create web app.\n\n322\n00:20:25.032 --> 00:20:27.370\nLet's, well,\nlet's clear out the screen a little bit.\n\n323\n00:20:27.370 --> 00:20:31.230\nAlways hate how I can get\nthat not to scroll back up.\n\n324\n00:20:31.230 --> 00:20:38.730\nSo if I docker network ls, well, notice\nI have a net app with a bridge drive.\n\n325\n00:20:38.730 --> 00:20:40.600\nNow, I can denote the driver.\n\n326\n00:20:40.600 --> 00:20:44.190\nWe're just going with defaults\nnow to see how this works,\n\n327\n00:20:44.190 --> 00:20:49.020\nsee if it gives me a similar kind\nof build, as I imagined before.\n\n328\n00:20:49.020 --> 00:20:51.870\nAnd, well, what do we wanna do?\n\n329\n00:20:51.870 --> 00:20:54.180\nWe wanna recreate that redis image.\n\n330\n00:20:54.180 --> 00:20:57.320\nBut now, instead of linking it,\n\n331\n00:20:57.320 --> 00:21:00.965\nwe wanna add the redis image to this\nnetwork, to the web app network.\n\n332\n00:21:00.965 --> 00:21:06.090\nWe also wanna add our application\nto the WebApp network.\n\n333\n00:21:06.090 --> 00:21:09.690\nAnd now they'll be on the same network,\nand they should be able to talk to each\n\n334\n00:21:09.690 --> 00:21:13.720\nother just like we would start\nthem up on our local computer.\n\n335\n00:21:13.720 --> 00:21:17.880\nThat allows us to do some crazy\nstuff with multiple ports and\n\n336\n00:21:17.880 --> 00:21:20.410\nthings like that, and not have clashes.\n\n337\n00:21:20.410 --> 00:21:25.913\nSo, I'm going to docker\nrun -d --name redis --net,\n\n338\n00:21:25.913 --> 00:21:31.770\nfor network, and\nI'll put it on the webapp network.\n\n339\n00:21:31.770 --> 00:21:34.170\nAnd I'm gonna say redis.\n\n340\n00:21:34.170 --> 00:21:38.730\nIf I docker ps, it looks very\nsimilar to what we had before.\n\n341\n00:21:38.730 --> 00:21:43.960\nAll right, so if I docker create,\ndocker run, excuse me, docker run.\n\n342\n00:21:43.960 --> 00:21:44.489\n&gt;&gt; Only one k in docker.\n\n343\n00:21:44.489 --> 00:21:45.065\nIt's not Dokken.\n\n344\n00:21:45.065 --> 00:21:47.703\n[LAUGH]\n&gt;&gt; Dokken.\n\n345\n00:21:47.703 --> 00:21:48.226\nDokken.\n\n346\n00:21:48.226 --> 00:21:49.427\nYeah, all right.\n\n347\n00:21:49.427 --> 00:21:51.830\n[LAUGH] So docker, got to keep me honest.\n\n348\n00:21:51.830 --> 00:21:52.420\n&gt;&gt; I do, I do.\n\n349\n00:21:52.420 --> 00:21:54.260\nThat's what I'm here for.\n\n350\n00:21:54.260 --> 00:22:00.681\n&gt;&gt; And then name,\napplication, and net web app.\n\n351\n00:22:00.681 --> 00:22:05.712\nAnd that was justindevpro/webapp,\n\n352\n00:22:05.712 --> 00:22:11.060\nif I'm not mistaken, and docker ps.\n\n353\n00:22:11.060 --> 00:22:15.270\nEverything looks very similar\nto how it did originally.\n\n354\n00:22:15.270 --> 00:22:17.270\nNow the big test.\n\n355\n00:22:17.270 --> 00:22:20.470\nDoes it still work as\nit did the originally?\n\n356\n00:22:20.470 --> 00:22:24.050\nAnd if I refresh-\n&gt;&gt; Doesn't seem to be working.\n\n357\n00:22:24.050 --> 00:22:26.188\n&gt;&gt; Well,\nyou know what I forgot to do, Daniel?\n\n358\n00:22:26.188 --> 00:22:28.635\n&gt;&gt; You forgot something.\n[LAUGH]\n\n359\n00:22:28.635 --> 00:22:29.135\n&gt;&gt; I did.\n\n360\n00:22:29.135 --> 00:22:30.219\n&gt;&gt; Cuz it ain't working [LAUGH].\n\n361\n00:22:30.219 --> 00:22:31.431\n&gt;&gt; He's\n\n362\n00:22:31.431 --> 00:22:32.887\nvery-\n\n363\n00:22:32.887 --> 00:22:34.622\n&gt;&gt; Observant.\n\n364\n00:22:34.622 --> 00:22:35.581\n&gt;&gt; Observant.\n&gt;&gt; Yeah.\n\n365\n00:22:35.581 --> 00:22:36.081\n&gt;&gt; Yes, he is.\n\n366\n00:22:36.081 --> 00:22:37.450\n&gt;&gt; I'm keen observer of\n\n367\n00:22:37.450 --> 00:22:38.676\nthe condition that is Justin.\n\n368\n00:22:38.676 --> 00:22:40.118\n[LAUGH]\n&gt;&gt; So\n\n369\n00:22:40.118 --> 00:22:44.830\nthere is no ports exposed locally,\nso I can't navigate to\n\n370\n00:22:44.830 --> 00:22:49.280\nthe application running inside because\nI forgot to expose ports, whoops daisy.\n\n371\n00:22:49.280 --> 00:22:50.560\nLets fix that.\n\n372\n00:22:50.560 --> 00:22:54.970\nSo, I'm just going to remove the app.\n\n373\n00:22:54.970 --> 00:23:00.270\nAnd I want to cycle up through, actually,\nlets get back to the top again.\n\n374\n00:23:00.270 --> 00:23:02.130\nI wanna cycle back through.\n\n375\n00:23:02.130 --> 00:23:09.406\nAnd before I actually tell it what image,\nI'm gonna say, map port 5000 port 5000.\n\n376\n00:23:09.406 --> 00:23:11.491\nAnd let me zoom out so you can see.\n\n377\n00:23:14.194 --> 00:23:16.450\nGot some weird doubleage there.\n\n378\n00:23:16.450 --> 00:23:18.070\n&gt;&gt; Yeah, that's funny.\n\n379\n00:23:18.070 --> 00:23:20.630\n&gt;&gt; So docker run as a daemon,\ngive it the name of app.\n\n380\n00:23:20.630 --> 00:23:23.610\nPut it on the network web\napp that I've created.\n\n381\n00:23:23.610 --> 00:23:24.938\nExposed port 5000.\n\n382\n00:23:24.938 --> 00:23:27.321\nMap that to local host port 5000.\n\n383\n00:23:27.321 --> 00:23:32.088\nAnd then run the web app container\nbased on this image, all right?\n\n384\n00:23:32.088 --> 00:23:33.068\nThat's a lot.\n\n385\n00:23:33.068 --> 00:23:36.419\nThese are starting to get more and\nmore and more.\n\n386\n00:23:36.419 --> 00:23:39.700\nWell, you should hold on cuz it's-\n&gt;&gt; You ain't seen nothing yet.\n\n387\n00:23:39.700 --> 00:23:41.640\n&gt;&gt; Yeah, you ain't seen nothing yet\n[LAUGH].\n\n388\n00:23:41.640 --> 00:23:46.170\nSo if I run, all right, so let's make\nsure that everything is there, And\n\n389\n00:23:46.170 --> 00:23:49.940\nnotice I now have a port\nmapping to my Local Host 5000.\n\n390\n00:23:49.940 --> 00:23:52.170\nLet's go check it out.\n\n391\n00:23:52.170 --> 00:23:53.340\nRefresh.\n\n392\n00:23:53.340 --> 00:23:53.996\nSummary loads.\n\n393\n00:23:53.996 --> 00:23:55.647\nWell, I haven't hit any\nof the other pages.\n\n394\n00:23:55.647 --> 00:23:58.134\n&gt;&gt; I created-\n&gt;&gt; So there's nothing there.\n\n395\n00:23:58.134 --> 00:23:58.880\n&gt;&gt; There's nothing there.\n\n396\n00:23:58.880 --> 00:24:02.500\nSo let's go to default or to the home.\n\n397\n00:24:02.500 --> 00:24:03.940\nI'm gonna refresh.\n\n398\n00:24:03.940 --> 00:24:05.340\nYeah.\n\n399\n00:24:05.340 --> 00:24:07.340\nAnd then if I go to about.\n\n400\n00:24:08.475 --> 00:24:11.902\nJust refresh a few times, this is like\npeople actually navigating to this page.\n\n401\n00:24:11.902 --> 00:24:15.500\nAnd then if I come to contact,\nlet's just go there once.\n\n402\n00:24:15.500 --> 00:24:17.310\nAnd now go to summary.\n\n403\n00:24:17.310 --> 00:24:18.690\nAnd notice, the output\n\n404\n00:24:19.990 --> 00:24:24.290\nis very much similar to what we had\nbefore with the dash dash link.\n\n405\n00:24:24.290 --> 00:24:28.790\nBut the power of the dash dash net,\nthis specifying a network,\n\n406\n00:24:28.790 --> 00:24:32.240\nis now I can have a bunch of\ncontainers on the same network.\n\n407\n00:24:32.240 --> 00:24:35.090\nAnd I can use them by name\ninside the application.\n\n408\n00:24:36.100 --> 00:24:39.680\nAnd I don't have to do dash dash link for\nevery one of them.\n\n409\n00:24:39.680 --> 00:24:43.230\nAs I create the containers,\nI put them on a same network.\n\n410\n00:24:43.230 --> 00:24:46.520\nAnd now I can have different networks\nthat run different containers, and\n\n411\n00:24:46.520 --> 00:24:48.600\nthe possibilities become endless.\n\n412\n00:24:48.600 --> 00:24:51.300\n&gt;&gt; So you're creating these little\nmicro-networks that work together.\n\n413\n00:24:51.300 --> 00:24:54.170\nAnd then if you need to clink those\ntogether, you can do that as well.\n\n414\n00:24:54.170 --> 00:24:56.670\n&gt;&gt; Yeah, it's really crazy.\n\n415\n00:24:56.670 --> 00:25:01.280\nAs a matter of fact, this is more or less\na cacheing layer, a quick recall layer.\n\n416\n00:25:01.280 --> 00:25:02.941\nWhat if I wanted a database, right?\n\n417\n00:25:02.941 --> 00:25:05.420\nHow does that complexity change?\n\n418\n00:25:05.420 --> 00:25:06.640\nAnd you know, Daniel,\n\n419\n00:25:06.640 --> 00:25:11.440\nI'm not entirely sure we have the time\nin this episode to revisit that.\n\n420\n00:25:11.440 --> 00:25:12.412\n&gt;&gt; To get into that business?\n\n421\n00:25:12.412 --> 00:25:13.550\n[LAUGH]\n&gt;&gt; Yeah, so\n\n422\n00:25:13.550 --> 00:25:16.850\nit may be best if we hold off and\ncome back, and see what happens.\n\n423\n00:25:16.850 --> 00:25:21.810\nWell, I have an affinity toward Mongo,\nbut this could work for any database.\n\n424\n00:25:21.810 --> 00:25:22.482\n&gt;&gt; Any database.\n\n425\n00:25:22.482 --> 00:25:23.890\n&gt;&gt; Yeah.\n&gt;&gt; All right, sounds great,\n\n426\n00:25:23.890 --> 00:25:24.793\nwe appreciate that.\n\n427\n00:25:24.793 --> 00:25:28.671\nI understand that these things do take\ntime, and anytime you slap a database on\n\n428\n00:25:28.671 --> 00:25:31.970\nsomething, the complexity tends\nto exponentially increase.\n\n429\n00:25:31.970 --> 00:25:35.120\nSo, at least it does for me,\ncuz databases and I dont get along.\n\n430\n00:25:35.120 --> 00:25:36.920\nWe're not on speaking terms at this point.\n\n431\n00:25:36.920 --> 00:25:40.790\nBut I'm sure that they will enjoy\nthe lovely little cease and\n\n432\n00:25:40.790 --> 00:25:42.440\ndesist that I send them everyday.\n\n433\n00:25:42.440 --> 00:25:46.450\nJustin, thanks for showing us how to get\nthese little micro-networks setup and\n\n434\n00:25:46.450 --> 00:25:48.000\nwork with that inside of Docker.\n\n435\n00:25:48.000 --> 00:25:51.020\nKind of setting that platform for\nthe part two,\n\n436\n00:25:51.020 --> 00:25:52.520\ngetting the database\nstuff to work as well.\n\n437\n00:25:52.520 --> 00:25:53.470\nIt's going to be awesome stuff.\n\n438\n00:25:53.470 --> 00:25:54.670\nHopefully, you'll join us then.\n\n439\n00:25:54.670 --> 00:25:57.090\nBut as for this episode,\nwe're gonna go ahead and sign off.\n\n440\n00:25:57.090 --> 00:25:59.850\nFor ITProTV, I've been your host,\nDaniel Lowrie.\n\n441\n00:25:59.850 --> 00:26:00.660\n&gt;&gt; And I'm Justin Dennison.\n\n442\n00:26:00.660 --> 00:26:01.322\n&gt;&gt; And we'll see you next time\n\n443\n00:26:01.322 --> 00:26:09.111\n[MUSIC]\n\n444\n00:26:09.111 --> 00:26:11.848\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "211739110"
        },
        {
          "description": "In this episode, Daniel and Justin extend the multi-container application to include a persistent database using a MongoDB container. They emphasize the basic setup for a database container and the changes to the application container that must be made to see the database.",
          "length": "1148",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-2-multi-container_applications_with_docker_pt2-040317-PGM.00_00_12_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-2-multi-container_applications_with_docker_pt2-040317-PGM.00_00_12_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-10-1-2-multi-container_applications_with_docker_pt2-040317-PGM.00_00_12_07.Still001-sm.jpg",
          "title": "Multi Container Apps with Docker Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.644\nWelcome to ITPRO.TV,\n\n2\n00:00:01.644 --> 00:00:06.810\nI'm your host Don Pezet coming at you\nlive from San Francisco's [CROSSTALK]\n\n3\n00:00:06.810 --> 00:00:08.300\n[MUSIC]\n\n4\n00:00:08.300 --> 00:00:12.470\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.470 --> 00:00:13.880\n&gt;&gt; All right greetings everyone and\n\n6\n00:00:13.880 --> 00:00:16.670\nwelcome to another great\nepisode of ITPRO.TV.\n\n7\n00:00:16.670 --> 00:00:18.650\nI'm your host Daniel Lowrie and\n\n8\n00:00:18.650 --> 00:00:22.590\nin today's episode that's right, we're\nback with more introduction to Docker.\n\n9\n00:00:22.590 --> 00:00:25.320\nAnd joining us in the studio again you\nknow him as the man who met the legend\n\n10\n00:00:25.320 --> 00:00:27.670\nthat is Mr. Justin Dennison.\n\n11\n00:00:27.670 --> 00:00:28.750\nJustin, welcome back, sir.\n\n12\n00:00:28.750 --> 00:00:29.440\nHow's it going today?\n\n13\n00:00:29.440 --> 00:00:30.840\n&gt;&gt; It is going well.\n\n14\n00:00:30.840 --> 00:00:31.600\nI don't know.\n\n15\n00:00:31.600 --> 00:00:33.550\nMan that met the legend.\n\n16\n00:00:33.550 --> 00:00:34.210\n&gt;&gt; That's right.\n\n17\n00:00:34.210 --> 00:00:35.000\n&gt;&gt; I don't know [INAUDIBLE].\n\n18\n00:00:35.000 --> 00:00:35.938\n&gt;&gt; The bar here now [LAUGH].\n\n19\n00:00:35.938 --> 00:00:38.306\n&gt;&gt; [LAUGH] You're like,\nhey let me set you up and\n\n20\n00:00:38.306 --> 00:00:40.549\nwatch you just tumble down to the ground.\n\n21\n00:00:40.549 --> 00:00:42.506\n&gt;&gt; Can't wait to see the good\ndumpster firing [LAUGH].\n\n22\n00:00:42.506 --> 00:00:43.238\nYou're fired.\n\n23\n00:00:43.238 --> 00:00:44.330\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n24\n00:00:44.330 --> 00:00:45.550\n&gt;&gt; So, yeah, Daniel,\n\n25\n00:00:45.550 --> 00:00:47.250\nwe're back for more Docker.\n\n26\n00:00:47.250 --> 00:00:49.320\nWe've got a few more things to cover.\n\n27\n00:00:49.320 --> 00:00:52.620\nBut let's remind ourselves of\nwhere we left off in part one.\n\n28\n00:00:52.620 --> 00:00:55.350\nAnd well, we had actually\ncreated a web application that\n\n29\n00:00:55.350 --> 00:00:58.222\nutilized the Redis\ncontainer that we spun up.\n\n30\n00:00:58.222 --> 00:01:01.040\nSo we had a web application\nrunning in one container.\n\n31\n00:01:01.040 --> 00:01:04.090\nAnd Redis running in another container,\nand\n\n32\n00:01:04.090 --> 00:01:07.310\nwe had found a way to connect\nthose in two different ways.\n\n33\n00:01:07.310 --> 00:01:12.520\nThe first one was with that --link thing,\nwhere we could rename the container\n\n34\n00:01:12.520 --> 00:01:16.460\nin our web application that\ncorresponded to the Redis container.\n\n35\n00:01:16.460 --> 00:01:21.040\nJust put it in the host,\nthat is not recommended to do anymore.\n\n36\n00:01:21.040 --> 00:01:23.810\nBut instead you should create\na network using Docker.\n\n37\n00:01:23.810 --> 00:01:27.380\nAnd then add all those containers\nto a specific network.\n\n38\n00:01:27.380 --> 00:01:31.930\nAnd that allows you to connect\nthose containers by name,\n\n39\n00:01:31.930 --> 00:01:34.720\nbecause now they're a named\nresource within the network.\n\n40\n00:01:36.010 --> 00:01:37.290\nSo in addition to that,\n\n41\n00:01:37.290 --> 00:01:42.310\nwe were able to see that\nessentially you had the same thing.\n\n42\n00:01:42.310 --> 00:01:45.280\nBut Redis only allows this for small,\n\n43\n00:01:45.280 --> 00:01:49.350\nkind of small length of time,\nas far as persistence.\n\n44\n00:01:49.350 --> 00:01:53.230\nIt's an in memory database, and the entire\ngoal is to act as a caching layer or\n\n45\n00:01:53.230 --> 00:01:54.200\na quick recall layer.\n\n46\n00:01:55.200 --> 00:01:59.670\nNot necessarily as something where I\ncan persist to disk, like users or\n\n47\n00:01:59.670 --> 00:02:02.180\nuser logins or things of that nature.\n\n48\n00:02:02.180 --> 00:02:05.570\nBut instead just managing\nmaybe sessions for users.\n\n49\n00:02:05.570 --> 00:02:08.280\nOr as we've seen in our web application\n\n50\n00:02:08.280 --> 00:02:11.570\njust how many times a page is hid\nwithin a certain amount of time.\n\n51\n00:02:11.570 --> 00:02:14.020\nAnd we could save that later on.\n\n52\n00:02:14.020 --> 00:02:15.660\nBut now what do we want to do,\n\n53\n00:02:15.660 --> 00:02:19.190\nwe want to add that additional\npersistence layer like a database.\n\n54\n00:02:19.190 --> 00:02:25.410\nWe could use MariaDB MySQL,\nPostgres maybe even some other services\n\n55\n00:02:25.410 --> 00:02:30.390\nCassandra or there's a couple other\nones that ellude me right now.\n\n56\n00:02:30.390 --> 00:02:31.740\nBut we're gonna use Mongo and for\n\n57\n00:02:31.740 --> 00:02:34.880\nno other reason than well,\nI'm comfortable with Mongo.\n\n58\n00:02:34.880 --> 00:02:38.850\nAnd I have a decent amount of\nunderstanding of Mongo, and well,\n\n59\n00:02:38.850 --> 00:02:42.170\nI like it because it plays nice\ninside of Web Applications.\n\n60\n00:02:42.170 --> 00:02:47.550\nSo now we're not gonna have one,\nnot two, but instead three containers\n\n61\n00:02:47.550 --> 00:02:51.980\nthat kind of all build together to\npresent a single unified web application.\n\n62\n00:02:51.980 --> 00:02:56.000\nBut we're not putting them all in the\nsame, all these services in one container.\n\n63\n00:02:56.000 --> 00:02:59.840\nBut keeping them separate as we\nshould with most Docker applications.\n\n64\n00:02:59.840 --> 00:03:01.700\nSo let's go ahead and\ntake a look at my screen here and\n\n65\n00:03:01.700 --> 00:03:06.530\nsee how things have changed\nsince our last turnaround.\n\n66\n00:03:06.530 --> 00:03:12.490\nSo I have multicontainerapplicationv2 and\nI've left the Redis folder there.\n\n67\n00:03:12.490 --> 00:03:14.704\nWell, just to remind us,\nwe had some trouble with Redis,\n\n68\n00:03:14.704 --> 00:03:18.990\nwe tried to build our own Redis image and\nwe failed.\n\n69\n00:03:18.990 --> 00:03:19.900\nIt broke.\n\n70\n00:03:19.900 --> 00:03:23.170\nAnd those things will happen but\nwe wanted to keep moving forward.\n\n71\n00:03:23.170 --> 00:03:24.344\nSo what do we do?\nWe went and\n\n72\n00:03:24.344 --> 00:03:27.655\nlooked up on Docker hub\nthe official Redis Image.\n\n73\n00:03:27.655 --> 00:03:31.333\nUsing the official Redis image we\nwere able to get things working.\n\n74\n00:03:31.333 --> 00:03:32.828\nI may comeback and\n\n75\n00:03:32.828 --> 00:03:38.621\nthen make a tweak to that Redis image\nthat we have in this folder here.\n\n76\n00:03:38.621 --> 00:03:42.086\nBecause I want to make\ncertain changes to it.\n\n77\n00:03:42.086 --> 00:03:44.790\nSo that's a valid use case.\n\n78\n00:03:44.790 --> 00:03:50.150\nIn addition to we had our application\nwhich was a Python based web application.\n\n79\n00:03:50.150 --> 00:03:51.270\nAnd let's take a look here.\n\n80\n00:03:51.270 --> 00:03:55.560\nIf we take a look at the Docker file,\nwell it's,\n\n81\n00:03:55.560 --> 00:03:58.320\nright now the docker\nfile is exactly the same.\n\n82\n00:03:58.320 --> 00:04:01.610\nSo this would build our application image,\neverything looks the same.\n\n83\n00:04:01.610 --> 00:04:06.109\nWe install the requirements after we\nadd them to the actual container.\n\n84\n00:04:06.109 --> 00:04:09.350\nOr excuse me, the image that our\ncontainer's gonna be spun up from.\n\n85\n00:04:09.350 --> 00:04:12.050\nAnd then we run python webapp.py.\n\n86\n00:04:12.050 --> 00:04:12.870\nAnd it runs.\n\n87\n00:04:12.870 --> 00:04:14.760\nNow, I'm keeping this in\ndebugger mode just so\n\n88\n00:04:14.760 --> 00:04:17.090\nwe can keep, this is how this is running.\n\n89\n00:04:18.280 --> 00:04:24.310\nBut let's take at instead,\nwait for it, here we go.\n\n90\n00:04:25.520 --> 00:04:28.210\nI forgot how to type there for a moment.\n\n91\n00:04:28.210 --> 00:04:32.320\nSo if we take a look at the actual web\napp, instead of just having Fask and\n\n92\n00:04:32.320 --> 00:04:35.270\nRedis, I now have two more dependencies.\n\n93\n00:04:35.270 --> 00:04:38.680\npymongo, which is the Mongo connector for\npython.\n\n94\n00:04:39.820 --> 00:04:45.070\nAnd bson, which is part of\nthe transport layer, or the transport\n\n95\n00:04:45.070 --> 00:04:50.210\nprotocol I wouldn't say protocol,\nthat's a bad word, it's not that.\n\n96\n00:04:50.210 --> 00:04:53.020\nIt's the manner in which Mongo\ncommunicates between things and\n\n97\n00:04:53.020 --> 00:04:54.080\nstores its data.\n\n98\n00:04:54.080 --> 00:04:55.080\nIt's binary JSON.\n\n99\n00:04:56.540 --> 00:05:02.060\nI use that just for a helper method that\ndumps this out to JSON for a web request.\n\n100\n00:05:02.060 --> 00:05:04.010\nSo these are the two new dependencies, and\n\n101\n00:05:04.010 --> 00:05:09.160\nthen notice I connect\nto a host called mongo.\n\n102\n00:05:09.160 --> 00:05:13.880\nThis is important because just like redis,\nhere, this is a named host.\n\n103\n00:05:13.880 --> 00:05:15.800\nIt's not a localhost.\n\n104\n00:05:16.880 --> 00:05:20.140\nBut instead, it is mongo.\n\n105\n00:05:20.140 --> 00:05:23.390\nSo that's gonna dictate\nhow we spin this up.\n\n106\n00:05:23.390 --> 00:05:24.900\nAnd then I do some other things.\n\n107\n00:05:24.900 --> 00:05:29.310\nBut the real I like how I wave,\nI'm like hand-wavy, hand-wavy.\n\n108\n00:05:29.310 --> 00:05:30.730\nNo nothing to see here.\n\n109\n00:05:31.920 --> 00:05:35.360\nBut I grab a hold of a particular\ncollection and this is Mongo specific.\n\n110\n00:05:35.360 --> 00:05:39.090\nThat's why I'm kind of\nhand-waving over it.\n\n111\n00:05:39.090 --> 00:05:42.870\nI have two routes /users/create and\n\n112\n00:05:42.870 --> 00:05:48.560\nall it does is put a fake user inside\nof Mongo, and it returns success.\n\n113\n00:05:48.560 --> 00:05:52.080\nWe don't actually need to know how\nthis works, this is provided for you.\n\n114\n00:05:52.080 --> 00:05:55.610\nJust so we can go to that URL and\nput things inside of our Mongo database.\n\n115\n00:05:56.880 --> 00:06:01.200\nAnd then there's a follow up\none called /users/list, and\n\n116\n00:06:01.200 --> 00:06:03.840\nit just fetches all of\nthe users out of the database.\n\n117\n00:06:03.840 --> 00:06:06.800\nAnd then sends them back to you\nwhen you navigate to that URL.\n\n118\n00:06:07.890 --> 00:06:13.350\nAll of the other routes that we saw\nwith Redis, such as the hit count for\n\n119\n00:06:13.350 --> 00:06:16.320\nhome, about, and contact,\nwell, they're still there.\n\n120\n00:06:16.320 --> 00:06:19.840\nAnd the summary route to tell us\nhow many times home, about, and\n\n121\n00:06:19.840 --> 00:06:24.440\ncontact have been hit or\nvisited, it's still there.\n\n122\n00:06:24.440 --> 00:06:27.620\nSo the only thing we did was\nadd on the Mongo portion.\n\n123\n00:06:27.620 --> 00:06:30.840\nSo now I have some things that need Redis,\nsome things that need Mongo.\n\n124\n00:06:30.840 --> 00:06:36.668\nBut you know, our previous application,\nit just had access to our Redis container.\n\n125\n00:06:36.668 --> 00:06:40.730\nSo we should probably remedy that and\nactually see how that gets up and running.\n\n126\n00:06:40.730 --> 00:06:43.380\nSo, before we do that though,\nwe should remind ourselves.\n\n127\n00:06:44.540 --> 00:06:47.421\nSo I'm going to clear here, and\nI'm going to look at Docker images.\n\n128\n00:06:47.421 --> 00:06:51.144\nAnd here's our Docker images,\nand some of these are ours, or\n\n129\n00:06:51.144 --> 00:06:55.024\nthey're under my name, but\nyou know, we built them together.\n\n130\n00:06:55.024 --> 00:06:58.967\nWe had our Redis image, well, that one\ndoesn't quite work but we're going to\n\n131\n00:06:58.967 --> 00:07:02.279\nleave it there because we may be\nable to tweak it and get it to work.\n\n132\n00:07:02.279 --> 00:07:06.660\nAnd then we also have web app,\nwhich is in fact this application.\n\n133\n00:07:06.660 --> 00:07:09.300\nAnd then we have node app\nwhich is some previous things.\n\n134\n00:07:09.300 --> 00:07:12.180\nAnd then we have some other images here.\n\n135\n00:07:12.180 --> 00:07:15.312\nBut we also have the official Mongo image,\nand\n\n136\n00:07:15.312 --> 00:07:20.840\nthe official Redis image as well as\nPython, Alpine, Linux and Ubuntu.\n\n137\n00:07:20.840 --> 00:07:25.610\nSo with all of these already pulled,\nI should be able to build this application\n\n138\n00:07:25.610 --> 00:07:28.580\nand get it up and\nrunning in containers fairly quickly.\n\n139\n00:07:30.050 --> 00:07:32.070\nSo let's think about what we need to do.\n\n140\n00:07:32.070 --> 00:07:37.580\nWell, actually, we need to remind\nourselves as we did in a previous episode\n\n141\n00:07:37.580 --> 00:07:39.060\nhow to get Mongo up and running.\n\n142\n00:07:39.060 --> 00:07:42.080\nSo it will keep data around\neven if the container dies.\n\n143\n00:07:43.080 --> 00:07:46.150\nRemember when you're\nmanaging persistent data,\n\n144\n00:07:46.150 --> 00:07:49.780\nit should not be saved in the container,\nthat is running the service.\n\n145\n00:07:49.780 --> 00:07:51.800\nBecause if that container dies,\nand it's removed,\n\n146\n00:07:51.800 --> 00:07:57.570\nthrough some kind of cleaning action,\nit will not persist for a restart.\n\n147\n00:07:57.570 --> 00:08:02.010\nNow, just to be clear, if you stop the\ncontainer, and restart the container, or\n\n148\n00:08:02.010 --> 00:08:03.490\nkill it, and restart it.\n\n149\n00:08:03.490 --> 00:08:07.880\nIt will still be there because well,\nwe haven't remove the container.\n\n150\n00:08:07.880 --> 00:08:09.990\nBut if you have some kind of restart or\n\n151\n00:08:09.990 --> 00:08:12.370\nyou have a cron job\nthat's going though and\n\n152\n00:08:12.370 --> 00:08:17.341\ncleaning these up because you don't want\nidle containers or images sitting around.\n\n153\n00:08:17.341 --> 00:08:20.310\nIt may get removed because it died\nat just though a right moment and\n\n154\n00:08:20.310 --> 00:08:21.400\nthen all of your data is lost.\n\n155\n00:08:21.400 --> 00:08:25.690\nAnd all those users that have signed up\nfor your service or are using this for\n\n156\n00:08:25.690 --> 00:08:28.880\nsome kind of data analysis, it's all gone.\n\n157\n00:08:28.880 --> 00:08:30.728\nSo, we need to make sure we have that.\n\n158\n00:08:30.728 --> 00:08:38.039\nSo let's remind ourselves, we are going\nto Docker, wait for it, create, -v.\n\n159\n00:08:38.039 --> 00:08:43.117\nSo we're creating a volume, and\nwe're creating a volume at data/db.\n\n160\n00:08:43.117 --> 00:08:46.048\nAnd we're gonna give it\na name of mongo_data and\n\n161\n00:08:46.048 --> 00:08:48.130\nwe're gonna use the mongo image.\n\n162\n00:08:48.130 --> 00:08:50.340\nAnd the reason being is, I\n\n163\n00:08:51.420 --> 00:08:55.510\nmay be able to share some of those layers\nduring this running of the containers.\n\n164\n00:08:55.510 --> 00:09:00.475\nBut if we find out that that's a little\ntoo big, we could move to something like\n\n165\n00:09:00.475 --> 00:09:05.757\nBusybox or Alpine Linux it's a little\nsmaller just to manage this data volume.\n\n166\n00:09:06.970 --> 00:09:12.472\nAll right,\nnow with that we should run our mongo,\n\n167\n00:09:12.472 --> 00:09:19.210\nactually we need to make sure\nwe have our network online.\n\n168\n00:09:19.210 --> 00:09:24.100\nSo network, Docker network ls and\nour web app network is still going.\n\n169\n00:09:24.100 --> 00:09:28.169\nAnd typically networks stay around\nuntil you've manually removed them.\n\n170\n00:09:28.169 --> 00:09:29.484\nDon't quote me on that,\n\n171\n00:09:29.484 --> 00:09:33.700\nthere maybe some edge cases there where\nthe network just goes whoop disappear.\n\n172\n00:09:33.700 --> 00:09:35.630\nSo, be very careful with that.\n\n173\n00:09:35.630 --> 00:09:36.720\nSo, we know that our network is up.\n\n174\n00:09:36.720 --> 00:09:40.830\nNow we're gonna add that Mongo container\nto our network and here we go.\n\n175\n00:09:42.070 --> 00:09:47.799\nSo, docker run -d --name mongo and\n\n176\n00:09:47.799 --> 00:09:52.095\nwe're gonna add it to the net\n\n177\n00:09:52.095 --> 00:09:56.580\n[SOUND] maybe, net of webapp.\n\n178\n00:09:56.580 --> 00:10:01.823\nAnd we're gonna say --volumes -from,\nvolumes from with a dash.\n\n179\n00:10:01.823 --> 00:10:07.160\nWe called that mongo_data, and\nwe're gonna use the mongo image.\n\n180\n00:10:07.160 --> 00:10:09.970\nAll right, So that's up and running.\n\n181\n00:10:09.970 --> 00:10:13.440\nNotice I did not expose port 2717.\n\n182\n00:10:13.440 --> 00:10:17.200\nIn our previous episode we did that so\nwe could test locally.\n\n183\n00:10:17.200 --> 00:10:21.350\nBut I'm gonna make an assumption that this\nis in some kind of production system where\n\n184\n00:10:21.350 --> 00:10:23.670\nI'm not gonna dial into that specifically.\n\n185\n00:10:23.670 --> 00:10:28.660\nBut maybe you need the ability to look at\nthat using Robomongo or the Mongo shell.\n\n186\n00:10:28.660 --> 00:10:30.980\nOr if you're using MySQL,\nlike SQL Bench, or\n\n187\n00:10:30.980 --> 00:10:34.590\nsomething like that, then you want to\nmake sure you have those ports exposed.\n\n188\n00:10:34.590 --> 00:10:40.030\nSo you can access them from some\nremote location, or even localhost.\n\n189\n00:10:40.030 --> 00:10:44.190\nAll right, and now we want to\nget our Redis up and running.\n\n190\n00:10:44.190 --> 00:10:46.070\nSo, keep that in the background.\n\n191\n00:10:46.070 --> 00:10:48.100\nAnd we're gonna call that redis.\n\n192\n00:10:48.100 --> 00:10:54.560\nAdd that to --net webapp, and I think\nwe just said redis, yeah, there we go.\n\n193\n00:10:54.560 --> 00:10:57.490\nSo that should get Redis up and running.\n\n194\n00:10:57.490 --> 00:11:00.850\nSo let's clear this out and\ntake a look at what's running.\n\n195\n00:11:00.850 --> 00:11:02.800\nWe have Redis and we have Mongo.\n\n196\n00:11:02.800 --> 00:11:07.110\nNotice, they are listening, the container\nis listening on these respective ports.\n\n197\n00:11:07.110 --> 00:11:08.500\nBecause that's what ports,\n\n198\n00:11:08.500 --> 00:11:12.100\nthe services that are contained\nwith them are listening to.\n\n199\n00:11:12.100 --> 00:11:15.552\nWe're not mapping those to the outside,\nwe're not providing that tunnel.\n\n200\n00:11:15.552 --> 00:11:20.200\nAnd now finally, we should be able to\nget our web application up and running.\n\n201\n00:11:20.200 --> 00:11:22.669\nAnd if we look at Docker images.\n\n202\n00:11:23.710 --> 00:11:26.620\nThat was called justindevpro/webapp.\n\n203\n00:11:26.620 --> 00:11:31.730\nA fairly large image,\nthere's probably a way to smash that down.\n\n204\n00:11:31.730 --> 00:11:34.065\nYou wanna keep your images fairly small,\nbut\n\n205\n00:11:34.065 --> 00:11:38.132\nduring this testing phase maybe they\njust get a little big, that'll happen.\n\n206\n00:11:39.540 --> 00:11:43.590\nSo if we say docker run and\nI'm not going to hit,\n\n207\n00:11:43.590 --> 00:11:50.110\nput it as a daemon process because\nI wanna see what the printouts are.\n\n208\n00:11:50.110 --> 00:11:57.733\nI am gonna keep it on the --net of webapp,\nI am going to give it a name of app and\n\n209\n00:11:57.733 --> 00:12:02.238\nit is going to say\njustindevpro/ webapp and\n\n210\n00:12:02.238 --> 00:12:07.940\nit should use that image and\nnow we're up and running.\n\n211\n00:12:07.940 --> 00:12:11.070\nSo we have our little debugger here and\nI have left that one just for\n\n212\n00:12:11.070 --> 00:12:12.580\ndemonstration purposes.\n\n213\n00:12:12.580 --> 00:12:15.980\nYou would want to turn this off\nif you actually out this in\n\n214\n00:12:15.980 --> 00:12:16.880\nproduction environment.\n\n215\n00:12:17.940 --> 00:12:20.030\nSo let's go see if it works.\n\n216\n00:12:20.030 --> 00:12:24.628\nAll right, so\nI'm gonna go to localhost 5000,\n\n217\n00:12:24.628 --> 00:12:27.080\nand hm, well,\nyou know what I forgot to do, Daniel?\n\n218\n00:12:27.080 --> 00:12:29.146\nI am silly, silly.\n\n219\n00:12:29.146 --> 00:12:34.690\nI forgot to map to port 5000 on localhost.\n\n220\n00:12:34.690 --> 00:12:38.071\nSo we should probably go back and\nfix that real quick.\n\n221\n00:12:38.071 --> 00:12:44.089\nSo --net webapp --name app -p,\nso map 5000:5000,\n\n222\n00:12:44.089 --> 00:12:48.602\nso I can actually look\ninside that container, and\n\n223\n00:12:48.602 --> 00:12:52.487\nlook at what's running on port 5000.\n\n224\n00:12:52.487 --> 00:12:56.562\nAnd justindevpro/webapp.\n\n225\n00:12:56.562 --> 00:12:58.190\nI already have a name.\n\n226\n00:12:58.190 --> 00:13:00.412\nI have to remove that real quick.\n\n227\n00:13:02.693 --> 00:13:03.749\nAnd up.\n\n228\n00:13:05.280 --> 00:13:06.900\nAnd there we go alright, so\n\n229\n00:13:06.900 --> 00:13:11.340\nI should be able to go to local\nhost 5000 and there's home, right?\n\n230\n00:13:11.340 --> 00:13:16.800\nIt actually went very fast to home, so\nthat's good, let's see if about works.\n\n231\n00:13:18.260 --> 00:13:21.470\nNo, you got to spell about\ncorrectly that's important.\n\n232\n00:13:21.470 --> 00:13:23.240\n&gt;&gt; It's not Canadian, it's not a boot.\n\n233\n00:13:23.240 --> 00:13:24.025\n&gt;&gt; It's not a boot.\n\n234\n00:13:24.025 --> 00:13:26.900\n[Laugh] About, there we go.\n\n235\n00:13:26.900 --> 00:13:27.580\nFinally got it.\n\n236\n00:13:27.580 --> 00:13:30.320\nThird try's a charm.\n\n237\n00:13:30.320 --> 00:13:31.160\nAnd then contact.\n\n238\n00:13:32.710 --> 00:13:36.660\nSo we should have something on\nthe summary here and there we go.\n\n239\n00:13:36.660 --> 00:13:41.440\nWe've been to the contact page once,\nthe about page twice, and home once.\n\n240\n00:13:41.440 --> 00:13:45.956\nNow, I showed you that\nwe had those other URLs.\n\n241\n00:13:45.956 --> 00:13:50.136\nSo /users/create.\n\n242\n00:13:50.136 --> 00:13:54.980\nNot Found, well that is problematic\nbecause we definitely just looked at that.\n\n243\n00:13:56.000 --> 00:13:59.410\nSo, hm, let me see if,\nmaybe it's just create.\n\n244\n00:13:59.410 --> 00:14:01.750\nSo let's see if it's just list.\n\n245\n00:14:01.750 --> 00:14:05.810\nAnd list doesn't work as well,\nand if we come over here and\n\n246\n00:14:05.810 --> 00:14:09.600\nlook at this debugger we get a 404.\n\n247\n00:14:09.600 --> 00:14:15.180\nSo 404 means that, well, it's not found.\n\n248\n00:14:15.180 --> 00:14:16.100\nIt's like it's not there.\n\n249\n00:14:16.100 --> 00:14:20.430\nHm, so I should probably kill\nthis container and go see.\n\n250\n00:14:21.620 --> 00:14:23.630\nLet's try to reason through this.\n\n251\n00:14:23.630 --> 00:14:28.030\nSo kill it off, and\nI'm gonna go ahead and remove app.\n\n252\n00:14:28.030 --> 00:14:31.170\nAnd now if I ls, I'm in this app folder.\n\n253\n00:14:31.170 --> 00:14:36.132\nSo I'm gonna go to app, and\nlet's look at the Docker file again.\n\n254\n00:14:37.278 --> 00:14:41.370\nThat looks the same, I think that's right.\n\n255\n00:14:41.370 --> 00:14:44.678\nAnd if I ls let's see\nthe requirements.text.\n\n256\n00:14:44.678 --> 00:14:49.830\nSo vim requirements, there's pymongo,\n\n257\n00:14:49.830 --> 00:14:54.370\nredis, and then flask which is the web\nframework, and that looks right.\n\n258\n00:14:55.990 --> 00:14:59.130\nOkay, well what about webapp?\n\n259\n00:14:59.130 --> 00:15:01.176\nWell if this was wrong\nit wouldn't even run,\n\n260\n00:15:01.176 --> 00:15:05.640\nit wouldn't kick off but\nthese routes aren't defined.\n\n261\n00:15:05.640 --> 00:15:07.410\nWell that's kind of weird.\n\n262\n00:15:07.410 --> 00:15:08.020\nI wonder why?\n\n263\n00:15:09.940 --> 00:15:11.430\nOkay, what's the last step?\n\n264\n00:15:11.430 --> 00:15:15.460\nWell, we had to build\nthe application image.\n\n265\n00:15:15.460 --> 00:15:21.430\nMaybe we should go check the actual\napplication image of the web app.\n\n266\n00:15:21.430 --> 00:15:24.860\nSo web app, latest,\nit was built 22 hours ago.\n\n267\n00:15:26.040 --> 00:15:26.890\nI have an update.\n\n268\n00:15:26.890 --> 00:15:31.460\nI updated my application but I didn't\nrebuild the image I bet that'll fix it.\n\n269\n00:15:32.590 --> 00:15:39.520\nSo now that I'm in this app folder,\ndocker build -t justindevpro/webapp.\n\n270\n00:15:39.520 --> 00:15:44.604\nWe're going to overwrite the latest\n\n271\n00:15:44.604 --> 00:15:49.700\ntag because we've made an update.\n\n272\n00:15:49.700 --> 00:15:51.607\nAll right, so good, good, good.\n\n273\n00:15:51.607 --> 00:15:55.085\nAnd we're able to use some\nof those previous builds but\n\n274\n00:15:55.085 --> 00:15:59.090\nnotice that requirements.txt\nit has changed.\n\n275\n00:15:59.090 --> 00:16:01.468\nThere's a new pyMongo dependency so\n\n276\n00:16:01.468 --> 00:16:06.771\nwe'll actually rerun back through the\ninstalling of this python dependencies.\n\n277\n00:16:06.771 --> 00:16:09.490\nAnd create this new and immediate image.\n\n278\n00:16:09.490 --> 00:16:14.267\nOkay, so this looks good,\nso with that said lets\n\n279\n00:16:14.267 --> 00:16:18.713\nlook here Redis and\nMongo are still running.\n\n280\n00:16:18.713 --> 00:16:21.586\nThat's because they are running\nindependently on a network.\n\n281\n00:16:21.586 --> 00:16:23.557\nIf we'll somehow push Redis and\n\n282\n00:16:23.557 --> 00:16:26.916\nMongo in this right application\nall in a single image,\n\n283\n00:16:26.916 --> 00:16:31.890\nwell every time we kill the container\nwe would kill all of the services.\n\n284\n00:16:31.890 --> 00:16:34.550\nWe would have to spin all\nof the services back up.\n\n285\n00:16:34.550 --> 00:16:36.630\nThat could be problematic.\n\n286\n00:16:36.630 --> 00:16:41.870\nWell now we just have to\nrespin up the webapp service,\n\n287\n00:16:41.870 --> 00:16:43.460\nand I can cycle back through.\n\n288\n00:16:43.460 --> 00:16:45.710\nWe should be able to go back now, so\n\n289\n00:16:45.710 --> 00:16:49.824\nthere's localhost, or\nit will be on localhost:5000.\n\n290\n00:16:51.670 --> 00:16:57.910\nAnd if I go to users/create,\nhey, there we go.\n\n291\n00:16:57.910 --> 00:17:02.330\nAnd list, and I know it looks like a mess.\n\n292\n00:17:02.330 --> 00:17:08.020\nBut all this did was dump\nout JSON from MongoDB and\n\n293\n00:17:08.020 --> 00:17:10.150\nsend it back as a list of users.\n\n294\n00:17:10.150 --> 00:17:11.355\nCurrently we have one user.\n\n295\n00:17:11.355 --> 00:17:15.040\nSome@one.com their name is Someone, and\n\n296\n00:17:15.040 --> 00:17:17.100\nthey have tags with awesome,\ndocker and guru.\n\n297\n00:17:17.100 --> 00:17:19.960\nI should probably meet this person, but\n\n298\n00:17:19.960 --> 00:17:25.570\nas it stands, that's something\nyou should be well aware of.\n\n299\n00:17:25.570 --> 00:17:28.030\nIs, well if you make a change\nto your application,\n\n300\n00:17:28.030 --> 00:17:32.590\nyou're building an application image\nyou may have unforseen issues, right?\n\n301\n00:17:32.590 --> 00:17:35.280\nI got no direct, Mongo can't connect.\n\n302\n00:17:36.410 --> 00:17:38.408\nOkay, well,\nthat would be my fist instinct,\n\n303\n00:17:38.408 --> 00:17:41.147\nif I was building this normally is,\nI can't connect to Mongo.\n\n304\n00:17:41.147 --> 00:17:45.980\nWhich means I can't make a user in Mongo,\nwhich means I can't get a list from Mongo.\n\n305\n00:17:47.258 --> 00:17:51.950\nBe careful do not start chasing\nthe wrong path and go one at a time.\n\n306\n00:17:51.950 --> 00:17:52.990\nOkay, what has changed?\n\n307\n00:17:52.990 --> 00:17:54.330\nWhat have I done?\n\n308\n00:17:54.330 --> 00:17:59.484\nI should re-check my images because so if\nwatch your image based on has changed, you\n\n309\n00:17:59.484 --> 00:18:04.578\nneed to make sure you rebuild that Docker\nimage in order for those updates to occur.\n\n310\n00:18:04.578 --> 00:18:07.220\nOtherwise, you're gonna\nhave an old version.\n\n311\n00:18:07.220 --> 00:18:12.560\nAnd this is where tags, instead of\nusing latest, I should say version 1.0.\n\n312\n00:18:12.560 --> 00:18:17.160\nIf I just leave it latest every time then,\nwell, I don't know what's what.\n\n313\n00:18:17.160 --> 00:18:21.930\nSo that's important to remember and\nthose are some key takeaways.\n\n314\n00:18:21.930 --> 00:18:24.950\n&gt;&gt; Alright Justin, well it looks like\nthat covers everything we need to know,\n\n315\n00:18:24.950 --> 00:18:25.830\nhopefully anyway.\n\n316\n00:18:25.830 --> 00:18:30.880\nWhen it comes to creating a multi\ncontainer application inside of\n\n317\n00:18:30.880 --> 00:18:32.880\nthe Docker stuff there, very cool stuff.\n\n318\n00:18:32.880 --> 00:18:35.640\nJustin, we do appreciate you\nshowing us these cool things, so\n\n319\n00:18:35.640 --> 00:18:37.200\nthat we can implement them ourselves.\n\n320\n00:18:37.200 --> 00:18:40.000\nHopefully you guys have\nlearned a lot in this episode.\n\n321\n00:18:40.000 --> 00:18:42.760\nAnd in conjunction with the previous\none as well, don't forget that one,\n\n322\n00:18:42.760 --> 00:18:43.970\nit's kinda necessary.\n\n323\n00:18:43.970 --> 00:18:48.340\nBut that does bring us to the end of yet\nanother fantastic day here at ITPRO.TV.\n\n324\n00:18:48.340 --> 00:18:49.650\nThanks for watching this one.\n\n325\n00:18:49.650 --> 00:18:50.990\nI'm signing off for ITPRO.TV.\n\n326\n00:18:50.990 --> 00:18:52.570\nI've been your host, Daniel Lowrie.\n\n327\n00:18:52.570 --> 00:18:53.380\n&gt;&gt; And I'm Justin Dennison.\n\n328\n00:18:53.380 --> 00:18:55.273\n&gt;&gt; And we'll see you next time.\n\n329\n00:18:55.273 --> 00:19:02.169\n[MUSIC]\n\n330\n00:19:02.169 --> 00:19:05.290\nThank you for watching ITPRO TV.\n\n",
          "vimeoId": "212914843"
        },
        {
          "description": "In this episode, Daniel and Justin take a dive into the Docker Compose tool that is used to ease the pain of creating multi-container applications. By exploring the basic toolset and drawing parallels to the existing Docker CLI, Docker Compose provides a more declarative mechanism for multi-container applications.",
          "length": "1769",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-11-1-1-what_is_docker_compose-040417-PGM.00_29_15_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-11-1-1-what_is_docker_compose-040417-PGM.00_29_15_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-11-1-1-what_is_docker_compose-040417-PGM.00_29_15_04.Still001-sm.jpg",
          "title": "What is Docker Compose",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:02.880\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.880 --> 00:00:05.767\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.767 --> 00:00:08.242\n[MUSIC]\n\n4\n00:00:08.242 --> 00:00:12.570\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.570 --> 00:00:14.180\n&gt;&gt; All right, greetings everyone.\n\n6\n00:00:14.180 --> 00:00:16.810\nWelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.810 --> 00:00:18.600\nI'm your host, Daniel Lowrie.\n\n8\n00:00:18.600 --> 00:00:19.790\nAnd in today's episode,\n\n9\n00:00:19.790 --> 00:00:24.340\nwe are coming back at you with more\nof our introduction to Docker.\n\n10\n00:00:24.340 --> 00:00:28.060\nThat is right and joining us back at\nthe studio is our good friend and\n\n11\n00:00:28.060 --> 00:00:30.200\nguiding star in this\nlittle endeavour of ours.\n\n12\n00:00:30.200 --> 00:00:31.760\nOur good friend Mr. Justin Dennison.\n\n13\n00:00:31.760 --> 00:00:33.117\nJustin, man, how's it going today?\n\n14\n00:00:33.117 --> 00:00:34.370\n&gt;&gt; It is going well, Daniel.\n\n15\n00:00:34.370 --> 00:00:34.905\nHow are you today?\n\n16\n00:00:34.905 --> 00:00:36.618\n&gt;&gt; I'm having a great time, thank you.\n\n17\n00:00:36.618 --> 00:00:38.770\n&gt;&gt; That's always good to hear.\n\n18\n00:00:38.770 --> 00:00:42.805\nSo Daniel,\nwe've been working through, right?\n\n19\n00:00:42.805 --> 00:00:45.700\nDocker, all these Docker clients.\n\n20\n00:00:45.700 --> 00:00:50.990\nWe've been issuing a bunch of commands,\nbut we ran into an issue.\n\n21\n00:00:50.990 --> 00:00:51.538\nIt took a lot too.\n\n22\n00:00:51.538 --> 00:00:53.720\nAnd if you've seen previous episodes,\n\n23\n00:00:53.720 --> 00:00:57.590\ndefinitely go look at\nBuilding Multi-Container Applications.\n\n24\n00:00:57.590 --> 00:01:01.720\nThere was just a bunch going on, and it\nseems like there has to be a better way.\n\n25\n00:01:01.720 --> 00:01:05.120\nAnd, well,\nthe show title is a little bit of a hint.\n\n26\n00:01:05.120 --> 00:01:08.170\nWe're going to talk about\nDocker Compose today.\n\n27\n00:01:08.170 --> 00:01:10.040\nSo what is Docker Compose?\n\n28\n00:01:11.335 --> 00:01:14.495\nDocker Compose is a tool\nthat allows us to, well,\n\n29\n00:01:14.495 --> 00:01:16.691\nDaniel, can I ask you a question?\n\n30\n00:01:16.691 --> 00:01:19.497\nHave you ever used Chef or Puppet,\nor Ansible, or anything like that?\n\n31\n00:01:19.497 --> 00:01:24.390\n&gt;&gt; Yeah, they're like those,\nthe orchestration-type software.\n\n32\n00:01:24.390 --> 00:01:28.030\nOr, not software, but features,\nof cloud-based technologies, where you can\n\n33\n00:01:28.030 --> 00:01:32.840\nsay, this is how I want the entirety\nof my cloud environment to look like.\n\n34\n00:01:32.840 --> 00:01:34.950\nYou fire it off, and\nit builds all that, and there you go.\n\n35\n00:01:34.950 --> 00:01:35.800\nYou're off to the races.\n\n36\n00:01:35.800 --> 00:01:36.510\n&gt;&gt; Well, Daniel,\n\n37\n00:01:36.510 --> 00:01:40.210\nyou are going to be a little bit\nmore at home with Docker Compose.\n\n38\n00:01:40.210 --> 00:01:44.300\nBecause effectively, that's what\nDocker Compose allows us to do for\n\n39\n00:01:44.300 --> 00:01:46.170\nDocker containers, right?\n\n40\n00:01:46.170 --> 00:01:49.330\nIt is like Ansible, Chef,\nPuppet, Salt Stack.\n\n41\n00:01:49.330 --> 00:01:54.280\nAll of those orchestration management\ntools, or configuration management tools.\n\n42\n00:01:54.280 --> 00:01:58.950\nWell, it's going to behave just like\nthose, for the Docker ecosystem.\n\n43\n00:02:00.150 --> 00:02:03.127\nNow, let's think about,\nlet's step back just for a moment.\n\n44\n00:02:03.127 --> 00:02:05.110\nWell, where is Docker Compose come from?\n\n45\n00:02:05.110 --> 00:02:09.330\nOriginally, it was called Fig, which\nwas kind of an odd name, if you ask me.\n\n46\n00:02:09.330 --> 00:02:12.207\nAnd interestingly enough,\nit was a Python tool.\n\n47\n00:02:12.207 --> 00:02:17.370\nNot entirely 100% sure that it is still\nwritten in Python, but it was originally.\n\n48\n00:02:17.370 --> 00:02:20.283\nBecause Docker Daemon is kind\nof a server application.\n\n49\n00:02:20.283 --> 00:02:23.385\nAnd has a set of APIs that,\nwhere I can make a request for\n\n50\n00:02:23.385 --> 00:02:27.080\nit to create a Docker container,\nand it will do just that.\n\n51\n00:02:27.080 --> 00:02:30.298\nSo it started out as,\nthere has to be a better way.\n\n52\n00:02:30.298 --> 00:02:33.532\nI don't wanna have to issue\nthese Docker commands, or\n\n53\n00:02:33.532 --> 00:02:36.074\nwrite bash scripts to orchestrate those.\n\n54\n00:02:36.074 --> 00:02:39.200\nAnd there's nothing wrong with that for\nvery simple applications.\n\n55\n00:02:39.200 --> 00:02:41.624\nBut as you grow in size, right?\n\n56\n00:02:41.624 --> 00:02:43.840\nI need a worker node.\n\n57\n00:02:43.840 --> 00:02:45.810\nI need a task queue.\n\n58\n00:02:45.810 --> 00:02:48.740\nI need a caching layer, a database.\n\n59\n00:02:48.740 --> 00:02:51.290\nA front-end, a load balancer.\n\n60\n00:02:51.290 --> 00:02:55.150\nWell, that becomes very hard to\nmanage with bash scripts and\n\n61\n00:02:55.150 --> 00:02:56.860\njust standard Docker commands.\n\n62\n00:02:56.860 --> 00:03:00.890\nAnd that's kind of where\nDocker Compose came into the fray.\n\n63\n00:03:02.410 --> 00:03:07.492\nSo that's where Docker Compose is\nmost helpful, is just managing all of\n\n64\n00:03:07.492 --> 00:03:12.757\nthose services kind of all together,\nlike Ansible, or Puppet, or Chef.\n\n65\n00:03:12.757 --> 00:03:16.837\n&gt;&gt; So it's just trying to give us a way\nto be a little more streamlined in our\n\n66\n00:03:16.837 --> 00:03:18.952\nproduction of a cloud environment?\n\n67\n00:03:18.952 --> 00:03:20.920\n&gt;&gt; Yep, yep, it is exactly that.\n\n68\n00:03:20.920 --> 00:03:24.820\nAnd I find it to be a great deal easier,\nand\n\n69\n00:03:24.820 --> 00:03:29.990\nwell, it's almost intimidating at first,\nbut it's fairly simple.\n\n70\n00:03:29.990 --> 00:03:31.534\n&gt;&gt; All right,\nwe'll say if it's that simple,\n\n71\n00:03:31.534 --> 00:03:35.070\nthen I guess the next question is gonna\nbe, how is it that we get started?\n\n72\n00:03:35.070 --> 00:03:36.510\nWhat do we have to do,\nwhat do we have to know,\n\n73\n00:03:36.510 --> 00:03:41.170\nhow do we create something\ninside of Docker Compose?\n\n74\n00:03:41.170 --> 00:03:42.420\n&gt;&gt; Well, that's a great question.\n\n75\n00:03:42.420 --> 00:03:45.740\nAnd I think the best thing to do is well,\njust to dive right in and\n\n76\n00:03:45.740 --> 00:03:49.460\nget started, and then back up and\ntalk about those features.\n\n77\n00:03:49.460 --> 00:03:51.700\nSo let's go ahead and\ntake a look at my screen here.\n\n78\n00:03:51.700 --> 00:03:55.280\nAnd I have what I call simplecomposeapp.\n\n79\n00:03:55.280 --> 00:03:57.990\nAnd within it, I have an app folder.\n\n80\n00:03:57.990 --> 00:04:00.470\nNow, the general thought process is,\n\n81\n00:04:00.470 --> 00:04:05.570\nwe wanna have the individual pieces\nsegregated into their own folders.\n\n82\n00:04:05.570 --> 00:04:07.110\nSo let's take a look at this app folder.\n\n83\n00:04:07.110 --> 00:04:10.770\nAnd if you've seen previous episodes,\nthis is going to look very familiar.\n\n84\n00:04:10.770 --> 00:04:13.959\nIf I OS, I have a Dockerfile, and\nlet's look at that Dockerfile.\n\n85\n00:04:15.090 --> 00:04:17.940\nAnd notice it's kind of\nthat node-based image.\n\n86\n00:04:17.940 --> 00:04:22.565\nOkay, and then if I look at the index.js,\nwell, it is, well,\n\n87\n00:04:22.565 --> 00:04:27.624\nmore or less, just a simple node\nserver application with this again,\n\n88\n00:04:27.624 --> 00:04:31.247\nbecause we wanna be able\nto kill this if we want to.\n\n89\n00:04:31.247 --> 00:04:33.620\nSo it's just a node server.\n\n90\n00:04:33.620 --> 00:04:37.266\nServes up some well, welcome and\nDocker Compose, based on two routes.\n\n91\n00:04:37.266 --> 00:04:43.030\nIt's very, very not realistic, but\nit serves our purpose for now.\n\n92\n00:04:43.030 --> 00:04:47.480\nAnd then lastly,\nif we look at this package.json,\n\n93\n00:04:47.480 --> 00:04:49.570\nwe have just this dependencies list.\n\n94\n00:04:49.570 --> 00:04:53.520\nTypically, this is going to be\nnecessary when you're building\n\n95\n00:04:53.520 --> 00:04:55.810\nan application image based on this.\n\n96\n00:04:55.810 --> 00:04:57.442\nSo in previous episodes,\n\n97\n00:04:57.442 --> 00:05:01.381\nwe've seen how to make an image\nfrom something just like this.\n\n98\n00:05:01.381 --> 00:05:05.949\nHowever, let's say that I\nknow that this application is\n\n99\n00:05:05.949 --> 00:05:10.430\ngoing to become part of something larger,\nright?\n\n100\n00:05:10.430 --> 00:05:11.752\nIt's gonna have a database.\n\n101\n00:05:11.752 --> 00:05:16.594\nIt's going to send off task queues\nto Kafka, or RedS, or Celery or\n\n102\n00:05:16.594 --> 00:05:22.860\nsomething like that, to do computations\nthat then will be served back to user.\n\n103\n00:05:22.860 --> 00:05:24.170\nAnd then I need a database.\n\n104\n00:05:25.280 --> 00:05:29.991\nAll of these other services, well, this\nmay grow a little out of hand as far as\n\n105\n00:05:29.991 --> 00:05:33.922\nbeing able to manage this with\nbash scripts or standard Docker.\n\n106\n00:05:33.922 --> 00:05:39.907\nSo what we can do,\nis create a Docker Compose file.\n\n107\n00:05:39.907 --> 00:05:45.040\nNow, in previous episodes, we made sure\nthat we had Docker Compose installed.\n\n108\n00:05:45.040 --> 00:05:47.824\nWe need to make sure it's up and\nrunning, everything's good,\n\n109\n00:05:47.824 --> 00:05:50.053\nbefore we even try this\nDocker Compose file thing.\n\n110\n00:05:50.053 --> 00:05:55.900\ndocker-compose and you will see,\nwell, just a giant print out.\n\n111\n00:05:55.900 --> 00:05:59.190\nAnd there's some additional\nprint outs up here.\n\n112\n00:05:59.190 --> 00:06:04.136\nBut we have these commands, build,\nbundle, config, create, down, events.\n\n113\n00:06:04.136 --> 00:06:08.933\nA lot of these are very similar to\nthe Docker command line utility,\n\n114\n00:06:08.933 --> 00:06:10.790\nps, pull, push.\n\n115\n00:06:10.790 --> 00:06:12.610\nOkay, well, this is good.\n\n116\n00:06:12.610 --> 00:06:15.660\nAs long as you see this,\nyou'll be ready to go.\n\n117\n00:06:15.660 --> 00:06:20.860\nSo let's make that Docker Compose file for\nthis particular application.\n\n118\n00:06:20.860 --> 00:06:22.950\nSo let's just get it out there, and\n\n119\n00:06:22.950 --> 00:06:25.658\nthen let's talk about\nwhere we're going with it.\n\n120\n00:06:25.658 --> 00:06:30.025\nSo Docker Dompose files are YAML.\n\n121\n00:06:30.025 --> 00:06:35.202\nWhich is a nice, declarative, almost\nbulleted list-type thing that actually\n\n122\n00:06:35.202 --> 00:06:39.999\ntransfers to data structures for\ncreating these, these containers, and\n\n123\n00:06:39.999 --> 00:06:44.190\nthese multi-containers in particular,\nkind of systems.\n\n124\n00:06:44.190 --> 00:06:51.320\nSo services, and I'm going to have,\nlets call this web.\n\n125\n00:06:52.900 --> 00:06:56.332\nAnd within web I'm going to have build.\n\n126\n00:06:56.332 --> 00:06:58.720\nAnd where am I going to build from?\n\n127\n00:06:58.720 --> 00:07:00.080\nThat app directory.\n\n128\n00:07:00.080 --> 00:07:02.590\n&gt;&gt; And Justin, all these commands that\nyou're kind of putting inside of this\n\n129\n00:07:02.590 --> 00:07:06.130\nfile, come from that little help\nscreen you were looking at?\n\n130\n00:07:06.130 --> 00:07:07.750\nOr is there more documentation to that?\n\n131\n00:07:07.750 --> 00:07:09.210\n&gt;&gt; That is a great question, Daniel.\n\n132\n00:07:09.210 --> 00:07:11.620\nAnd in just a moment,\nwe will actually take a look.\n\n133\n00:07:11.620 --> 00:07:14.180\nBecause that is kind of bewildering,\nright?\n\n134\n00:07:14.180 --> 00:07:15.750\nI'm just typing things a little bit.\n\n135\n00:07:15.750 --> 00:07:16.809\n&gt;&gt; You're making it up.\n\n136\n00:07:16.809 --> 00:07:19.930\n[LAUGH]\n&gt;&gt; Yep, I am totally making it up, Daniel.\n\n137\n00:07:19.930 --> 00:07:21.430\nIt is amazing.\n\n138\n00:07:21.430 --> 00:07:23.600\nYou just type words and [CROSSTALK]\n&gt;&gt; Computers are smart.\n\n139\n00:07:23.600 --> 00:07:25.600\n&gt;&gt; Yeah, computers are real smart.\n\n140\n00:07:25.600 --> 00:07:26.542\nThat's not true.\n\n141\n00:07:26.542 --> 00:07:28.998\n[CROSSTALK]\n&gt;&gt; This is all facetiousness.\n\n142\n00:07:28.998 --> 00:07:31.940\n&gt;&gt; Yeah, this is not true.\n\n143\n00:07:31.940 --> 00:07:36.780\nSome of these are built into\nthe Docker Compose utility.\n\n144\n00:07:36.780 --> 00:07:40.230\nSome of them are, well,\nthey are your choice.\n\n145\n00:07:40.230 --> 00:07:42.250\nYou get to make decisions about this.\n\n146\n00:07:42.250 --> 00:07:44.557\nAnd we'll talk about how\nthose differences crop up.\n\n147\n00:07:44.557 --> 00:07:48.058\nAnd we'll have to use this for a little\nbit, before you have an idea of, well,\n\n148\n00:07:48.058 --> 00:07:50.720\nthis is what I can do and\nthis is what I cannot do.\n\n149\n00:07:50.720 --> 00:07:52.874\nSo let's let's finish this out here.\n\n150\n00:07:52.874 --> 00:07:58.745\nPorts, and here we go.\n\n151\n00:07:58.745 --> 00:08:04.162\nNow, 88, Forgot something here,\n8080 to 8080.\n\n152\n00:08:04.162 --> 00:08:08.932\nAnd this almost looks like\nthe -p that I normally type on\n\n153\n00:08:08.932 --> 00:08:13.310\nthe docker command line for\nmapping port to ports.\n\n154\n00:08:14.790 --> 00:08:20.360\nAnd then I wanna volumes,\nand what volume do I want?\n\n155\n00:08:20.360 --> 00:08:23.700\nI want ./ to be mapped to\n\n156\n00:08:25.250 --> 00:08:30.160\nnodecompose, there we go.\n\n157\n00:08:30.160 --> 00:08:32.970\nAnd well that's our first\ndocker-compose file.\n\n158\n00:08:33.970 --> 00:08:39.200\nSo, we're gonna save it, but let's take\na quick aside here and answer those\n\n159\n00:08:39.200 --> 00:08:44.460\nquestions that you had Daniel,\nabout what is this docker compose thing?\n\n160\n00:08:44.460 --> 00:08:46.480\nSo I'm gonna look up docker compose.\n\n161\n00:08:46.480 --> 00:08:51.790\nAnd well, I actually wanna look at\nthe docker-compose utility documentation.\n\n162\n00:08:51.790 --> 00:08:53.110\nThat was a lot of d's.\n\n163\n00:08:53.110 --> 00:08:54.350\n&gt;&gt; It was.\n\n164\n00:08:54.350 --> 00:08:56.840\n&gt;&gt; Docker Compose documentation.\n\n165\n00:08:56.840 --> 00:08:58.460\n&gt;&gt; And\na lot of the word Doc going on in there.\n\n166\n00:08:58.460 --> 00:09:00.300\n&gt;&gt; Yeah Doc, it was crazy.\n\n167\n00:09:00.300 --> 00:09:01.710\n&gt;&gt; I'm gonna dock my laptop, and\n\n168\n00:09:01.710 --> 00:09:05.238\nthen I'm gonna look at docker compose\ndocumentation, yeah, it's getting crazy.\n\n169\n00:09:05.238 --> 00:09:07.310\n[LAUGH]\n&gt;&gt; Now,\n\n170\n00:09:07.310 --> 00:09:10.830\nwhat's interesting is when you go to\nthe docs, if we zoom in here a little bit.\n\n171\n00:09:12.010 --> 00:09:14.480\nYou'll notice it more or\nless just tells you,\n\n172\n00:09:14.480 --> 00:09:17.310\nthis is how you get these particular\napplications up and running.\n\n173\n00:09:18.630 --> 00:09:20.570\nHow do you get started with Drupal.\n\n174\n00:09:20.570 --> 00:09:21.978\nI'm not even sure what Drupal is.\n\n175\n00:09:21.978 --> 00:09:28.400\nDjango, Rails, WordPress,\nthat's not what I want.\n\n176\n00:09:28.400 --> 00:09:31.630\nI actually want Compose file reference.\n\n177\n00:09:31.630 --> 00:09:32.930\nSo I will forewarn you,\n\n178\n00:09:32.930 --> 00:09:36.540\nthe first little bit that you read through\ndocker compose is Getting Started.\n\n179\n00:09:36.540 --> 00:09:40.010\nMaking sure you install it,\nand doing very basic things.\n\n180\n00:09:40.010 --> 00:09:43.570\nBut also building sample applications.\n\n181\n00:09:43.570 --> 00:09:47.374\nBecause kind of in the developer's\nworld with some of these tools,\n\n182\n00:09:47.374 --> 00:09:51.380\nthe best way to wrap your hand around\nwhat it's doing, is to use it.\n\n183\n00:09:51.380 --> 00:09:54.350\nMake it do stuff, and make it break.\n\n184\n00:09:55.840 --> 00:09:58.050\nBut let's go look at\nthe Compose file referencing.\n\n185\n00:09:58.050 --> 00:10:00.310\nAnd we need to zoom out here, and\n\n186\n00:10:00.310 --> 00:10:05.570\nif I look over here on the right,\nservice configuration reference.\n\n187\n00:10:05.570 --> 00:10:09.310\nI gotta build, I gotta command,\nI gotta deploy.\n\n188\n00:10:09.310 --> 00:10:11.590\nDevices depends on DNS.\n\n189\n00:10:11.590 --> 00:10:16.560\nNow some of these I don't even use, or\nI don't have a great deal of use for them.\n\n190\n00:10:16.560 --> 00:10:18.790\nThey have a very particular use case.\n\n191\n00:10:18.790 --> 00:10:24.020\nImage, labels, links networks, ports.\n\n192\n00:10:24.020 --> 00:10:25.095\nLet's go look at ports.\n\n193\n00:10:25.095 --> 00:10:30.690\nCuz I use ports in the docker-compose file\nand it's actually all on the same page.\n\n194\n00:10:30.690 --> 00:10:31.910\nSo it'll scroll down for you.\n\n195\n00:10:31.910 --> 00:10:34.415\n&gt;&gt; And that was a wise decision [LAUGH].\n\n196\n00:10:34.415 --> 00:10:36.910\nYeah, whoa, I got dizzy there.\n\n197\n00:10:36.910 --> 00:10:38.250\nGotta be careful.\n\n198\n00:10:38.250 --> 00:10:42.230\nSo either specify both ports,\nhost and container.\n\n199\n00:10:42.230 --> 00:10:49.470\nSo just like the docker CLI utility,\nwe have a port mapping.\n\n200\n00:10:51.070 --> 00:10:53.020\nWhen mapping ports in\nhost container format,\n\n201\n00:10:53.020 --> 00:10:56.832\nyou may experienced erroneous results when\nusing a container port lower than 60,\n\n202\n00:10:56.832 --> 00:11:02.252\nbecause YML which is the format of\nthe file, will parse numbers in the form\n\n203\n00:11:02.252 --> 00:11:07.360\nxx column yy as base 60.\n\n204\n00:11:07.360 --> 00:11:11.435\nI'm not even gonna try to say that word,\nfor this reason.\n\n205\n00:11:11.435 --> 00:11:12.520\n&gt;&gt; [CROSSTALK]\n&gt;&gt; Yeah.\n\n206\n00:11:12.520 --> 00:11:17.210\nWe also recommend explicitly specifying\nyour port mappings as strings.\n\n207\n00:11:17.210 --> 00:11:21.080\nNow you'll notice in the docker-compose\nfile that I wrote, let's take a look here.\n\n208\n00:11:21.080 --> 00:11:22.660\n&gt;&gt; That's why you're putting\nthe quotations around it.\n\n209\n00:11:22.660 --> 00:11:23.654\n&gt;&gt; That's why I'm put\nthe quotations around it.\n\n210\n00:11:23.654 --> 00:11:24.728\n&gt;&gt; I wondered why you were doing that.\n\n211\n00:11:24.728 --> 00:11:26.580\n&gt;&gt; Yeah, see.\n\n212\n00:11:26.580 --> 00:11:28.862\nIt's like I've done this before.\n\n213\n00:11:28.862 --> 00:11:32.540\n&gt;&gt; [LAUGH]\n&gt;&gt; You can technically map using\n\n214\n00:11:32.540 --> 00:11:33.940\nnumbers to numbers.\n\n215\n00:11:33.940 --> 00:11:37.280\nBut, because of this weird edge case where\n\n216\n00:11:37.280 --> 00:11:41.390\nyou may end up with a base 60\nnumber if you have port 80 to 80.\n\n217\n00:11:41.390 --> 00:11:48.880\nWell not 80 to 80, excuse me, port 59\nto 59 or port 22 to 22, which is SSH.\n\n218\n00:11:48.880 --> 00:11:53.080\nThen that'll change to\na base 60 number and\n\n219\n00:11:53.080 --> 00:11:57.110\nI'm not even sure what\n22:22 is base 60 is.\n\n220\n00:11:57.110 --> 00:11:58.240\nI'm sure we could figure it out,\n\n221\n00:11:58.240 --> 00:12:01.800\nbut that's kinda beyond\nwhat we're worried about.\n\n222\n00:12:01.800 --> 00:12:07.150\nBut ports is specific to docker compose,\nit's for that port mapping.\n\n223\n00:12:07.150 --> 00:12:09.056\nIn addition too, there's a long syntax.\n\n224\n00:12:09.056 --> 00:12:11.820\nI tend to use short syntax.\n\n225\n00:12:11.820 --> 00:12:15.320\nBut you can say what is the target,\nwhat is the published,\n\n226\n00:12:15.320 --> 00:12:18.320\nwhat protocol do you want to publish with,\nand what mode.\n\n227\n00:12:18.320 --> 00:12:23.120\nNow I have to read for mode, host for\npublishing a host port on each node, or\n\n228\n00:12:23.120 --> 00:12:24.700\ningress for swarm mode.\n\n229\n00:12:24.700 --> 00:12:27.990\nNow in later episodes,\nwe'll actually talk about Dr. Swarm.\n\n230\n00:12:27.990 --> 00:12:29.670\nThat stuff blows your mind.\n\n231\n00:12:29.670 --> 00:12:33.290\nIt blows my mind every time\nI get something to work.\n\n232\n00:12:33.290 --> 00:12:33.930\nI'm like, ooh yay.\n\n233\n00:12:33.930 --> 00:12:35.190\nBut we'll come back to that.\n\n234\n00:12:35.190 --> 00:12:37.440\nSo let's zoom out just a little bit and\n\n235\n00:12:37.440 --> 00:12:40.150\nlook through a couple\nof other ones of these.\n\n236\n00:12:40.150 --> 00:12:44.830\nIf I look here, I had it build, so\n\n237\n00:12:44.830 --> 00:12:50.480\nif I go to build and configuration\noptions that are applied at build time.\n\n238\n00:12:51.660 --> 00:12:56.760\nWhat this does is it looks for\na folder that has a Docker file in it\n\n239\n00:12:56.760 --> 00:13:00.879\nthat tell you how to build the image for\nthat service.\n\n240\n00:13:02.470 --> 00:13:07.230\nSo if I go back and look,\nthis says web: build: ./app.\n\n241\n00:13:07.230 --> 00:13:09.920\nWell if we get out of this\nCompose application and\n\n242\n00:13:09.920 --> 00:13:12.540\nI look, there's the app folder.\n\n243\n00:13:12.540 --> 00:13:16.410\nNotice it is in the same directory\nas the docker-compose file.\n\n244\n00:13:16.410 --> 00:13:21.020\nAnd it has a docker file in it that tells\n\n245\n00:13:21.020 --> 00:13:25.196\nDocker how to build the application\nbased on that folder structure.\n\n246\n00:13:25.196 --> 00:13:31.530\nSo, build will allow us to that.\n\n247\n00:13:31.530 --> 00:13:33.640\nWhat if we've already built the image?\n\n248\n00:13:33.640 --> 00:13:38.310\nWhat if we don't wanna build or\nwe wanna use Mongo or Redis or Apache or\n\n249\n00:13:38.310 --> 00:13:40.460\nEngineX or\nsomething that is already built for us and\n\n250\n00:13:40.460 --> 00:13:42.710\nwe just wanna bring that\ndown from Docker hub?\n\n251\n00:13:43.770 --> 00:13:46.810\nWell, there's a corollary one,\nand that's image.\n\n252\n00:13:47.830 --> 00:13:52.720\nWhere the image has, and\nlet's zoom out here.\n\n253\n00:13:52.720 --> 00:13:59.654\nAnd the image has, here we go,\nI can say Redis Ubuntu 1304.\n\n254\n00:13:59.654 --> 00:14:02.477\nThis will just pull the image\ndown from Docker hub, or\n\n255\n00:14:02.477 --> 00:14:05.822\nit'll use the one that you have\nlocally if you already have it.\n\n256\n00:14:05.822 --> 00:14:09.540\nAnd wow, when you zoom in,\nthings just shift around like crazy.\n\n257\n00:14:10.900 --> 00:14:15.360\nSo it will spin up Redis using that image,\ninstead of building a new image.\n\n258\n00:14:15.360 --> 00:14:19.440\nSo if you had a custom image,\nyou may have a build folder, but\n\n259\n00:14:19.440 --> 00:14:22.440\nif you're just using one\nthat's already on Docker hub,\n\n260\n00:14:22.440 --> 00:14:27.640\nyou can use the image attribute\nto get that up and going.\n\n261\n00:14:27.640 --> 00:14:30.810\nAnd then,\nI'm gonna look at one final one that\n\n262\n00:14:30.810 --> 00:14:36.096\nI had in my docker-compose file,\nand that is volumes.\n\n263\n00:14:36.096 --> 00:14:39.660\nThe top level of volumes\noption defines a named volume,\n\n264\n00:14:39.660 --> 00:14:43.420\nand references it, for\neach service's volume list.\n\n265\n00:14:45.260 --> 00:14:47.370\nThat was wordy,\nI don't even know what that said.\n\n266\n00:14:47.370 --> 00:14:48.820\nLet's take a little deeper dive here.\n\n267\n00:14:50.330 --> 00:14:53.730\nShow syntax is very similar\nto the port mapping.\n\n268\n00:14:54.980 --> 00:14:58.550\nIt doesn't tell me anything\nabout that crazy base 60 number,\n\n269\n00:14:58.550 --> 00:15:03.360\ncuz usually we don't name folders\nwith numbers or I don't, you may,\n\n270\n00:15:03.360 --> 00:15:06.610\nthere may be a use case for\nit, so keep that in mind.\n\n271\n00:15:06.610 --> 00:15:09.670\nBut volumes, just specify a path and\nthe let the engine create a volume.\n\n272\n00:15:09.670 --> 00:15:11.590\nSo if you put dash and\n\n273\n00:15:11.590 --> 00:15:15.970\njust a volume, well it'll create that\nvolume but where is it creating it?\n\n274\n00:15:15.970 --> 00:15:18.640\nAnd that's where it gets a little weird.\n\n275\n00:15:18.640 --> 00:15:21.460\nSpecify a volume on\nan absolute path mapping.\n\n276\n00:15:21.460 --> 00:15:26.538\nSo, host container, so\nfrom opt data to MySQL, so\n\n277\n00:15:26.538 --> 00:15:32.227\nthat is kinda like you're mounting\nthat share directory where you\n\n278\n00:15:32.227 --> 00:15:39.640\nhave local persistence and it is mapping\nto where MySQL is saving it's data.\n\n279\n00:15:39.640 --> 00:15:44.966\nBut you can also use relative mappings,\nwhich is what I did,\n\n280\n00:15:44.966 --> 00:15:49.150\n./, or ../, or any combination of that.\n\n281\n00:15:49.150 --> 00:15:51.164\nBut you can also use named volumes, and\n\n282\n00:15:51.164 --> 00:15:55.134\nwe will get to those later on because\nwe've technically already used those in\n\n283\n00:15:55.134 --> 00:15:59.490\nsome of our multi-container applications\nthat we've seen in previous episodes.\n\n284\n00:15:59.490 --> 00:16:01.381\nNow, this is not exhaustive.\n\n285\n00:16:01.381 --> 00:16:06.060\nIf I just scroll and\nI just scroll some more,\n\n286\n00:16:06.060 --> 00:16:10.873\nthere is all of this\nstuff in Docker Compose.\n\n287\n00:16:10.873 --> 00:16:16.409\nThese are all available in\nDocker Compose YAML files,\n\n288\n00:16:16.409 --> 00:16:21.595\nbut there is one that was not listed and\nthat is web.\n\n289\n00:16:21.595 --> 00:16:26.593\nBecause when you build a service,\nwhen you're defining what a service is,\n\n290\n00:16:26.593 --> 00:16:31.591\nand for the most part it's like think\nof a service as an individual container\n\n291\n00:16:31.591 --> 00:16:34.030\nthat well it has a specific purpose.\n\n292\n00:16:35.350 --> 00:16:39.960\nI choose a name for it, I know this is\na web application so I called it web.\n\n293\n00:16:39.960 --> 00:16:45.390\nI could've easily called\nit my shenanigans,\n\n294\n00:16:45.390 --> 00:16:47.828\nI can't type in VIM, cheeseburger.\n\n295\n00:16:47.828 --> 00:16:52.810\nI could have called it the service\ncheeseburger and that would also work.\n\n296\n00:16:52.810 --> 00:16:56.270\nNow I recommend that you name\nyour services appropriately.\n\n297\n00:16:56.270 --> 00:17:00.220\nSo you don't have like cheeseburger,\npickle, and tomato as your database,\n\n298\n00:17:00.220 --> 00:17:02.272\ncaching layer and web application.\n\n299\n00:17:02.272 --> 00:17:06.763\nSo we're going to put that back,\nso there are times where, well,\n\n300\n00:17:06.763 --> 00:17:09.985\nyou have particular,\nyou get to make a choice.\n\n301\n00:17:09.985 --> 00:17:13.442\n&gt;&gt; Now Justin I gotta question about,\nI'm looking at the very top line there,\n\n302\n00:17:13.442 --> 00:17:14.780\nit says version 3.\n\n303\n00:17:14.780 --> 00:17:18.451\nThis tells me that when you're creating\none of these files it's not assuming what\n\n304\n00:17:18.451 --> 00:17:19.578\nversion you're using.\n\n305\n00:17:19.578 --> 00:17:22.388\nOr it is and you're saying you\nwanna use a difference version.\n\n306\n00:17:22.388 --> 00:17:26.270\nAnd then kinda comes into the whole idea\nof do we have to worry about backwards\n\n307\n00:17:26.270 --> 00:17:28.070\ncompatibility, things of that nature.\n\n308\n00:17:28.070 --> 00:17:30.740\nIt seems to be like a big ball of wax\n\n309\n00:17:30.740 --> 00:17:33.220\nall wrapped up into just\nputting a version in there.\n\n310\n00:17:33.220 --> 00:17:36.040\n&gt;&gt; Well you are onto something Daniel,\nit's like you're in my head.\n\n311\n00:17:36.040 --> 00:17:37.930\nIt's kinda freaking me out a little bit.\n\n312\n00:17:37.930 --> 00:17:43.870\nSo, Daniel, you are absolutely correct, I\nthere's a version 3, what does that mean?\n\n313\n00:17:43.870 --> 00:17:45.230\nWhy are you writing it?\n\n314\n00:17:45.230 --> 00:17:48.410\nAnd if we hop back over to\nthe compose documentation, and\n\n315\n00:17:48.410 --> 00:17:54.150\nactually look over here on the left,\nthere is a Version 3, 2 and 1.\n\n316\n00:17:54.150 --> 00:17:56.770\nIf you do not put a version number,\n\n317\n00:17:56.770 --> 00:18:00.870\nversion colon something at the top,\nit assumes version 1.\n\n318\n00:18:00.870 --> 00:18:05.740\nThat was the original versioning,\nthere are limitations to version one.\n\n319\n00:18:05.740 --> 00:18:11.790\nThere was also a version 2 and a 2.1,\nand if we click here, and I scroll out.\n\n320\n00:18:11.790 --> 00:18:15.195\nYou can look at version 2 reference,\nand you'll notice,\n\n321\n00:18:15.195 --> 00:18:16.380\nthese may be a little different.\n\n322\n00:18:16.380 --> 00:18:19.610\nThe things we just looked\nat were all version 3, so\n\n323\n00:18:19.610 --> 00:18:23.385\nthere's no guarantee that what's\nin version 3 is also in version 2.\n\n324\n00:18:23.385 --> 00:18:27.090\nAll right, so there maybe new\nthings in version 3 that were\n\n325\n00:18:27.090 --> 00:18:30.870\nnot in version 2 that they\ndon't quite work the same.\n\n326\n00:18:30.870 --> 00:18:35.150\nSo you need to be specific about\nthe version and the recommendation,\n\n327\n00:18:35.150 --> 00:18:38.640\nofficially from Docker, is to use version\n3 if you're building new services.\n\n328\n00:18:38.640 --> 00:18:40.810\n&gt;&gt; This seems like it could\nbe a big pain point for\n\n329\n00:18:40.810 --> 00:18:46.170\nsomeone that's trying to use Docker and\nthe Compose feature therein.\n\n330\n00:18:46.170 --> 00:18:51.240\nSpecifically because am I now basically\nexpected to know what's in version 1,\n\n331\n00:18:51.240 --> 00:18:52.780\nwhat's in version 2, and\nwhat's in version 3?\n\n332\n00:18:52.780 --> 00:18:56.670\nAnd if I wanna get something to work I\nhave to use the appropriate version.\n\n333\n00:18:56.670 --> 00:19:00.990\n&gt;&gt; So that's a great question and\noriginally, full disclosure,\n\n334\n00:19:00.990 --> 00:19:04.470\nwhen I tried to build Compose\napplications, I had a similar,\n\n335\n00:19:05.550 --> 00:19:08.830\nI'm like wait a minute there's a version\n2 and a version so what am I writing.\n\n336\n00:19:08.830 --> 00:19:12.480\nAnd they're like if you're not putting\na version, you're writing version 1.\n\n337\n00:19:12.480 --> 00:19:16.380\nBut then I wanted to create named data\nvolume, that's not available in version 1.\n\n338\n00:19:16.380 --> 00:19:20.330\nI had to create them beforehand and\nthen use them in the compose file.\n\n339\n00:19:20.330 --> 00:19:24.001\nWell now I'm back to bash scripts that\ndo a setup before I can use Compose and\n\n340\n00:19:24.001 --> 00:19:25.003\nthat's a problem.\n\n341\n00:19:25.003 --> 00:19:29.650\nBut what I like about what they've done\nwith the Docker Compose documentation is\n\n342\n00:19:29.650 --> 00:19:31.510\nabout versions and upgrading.\n\n343\n00:19:33.070 --> 00:19:36.850\nVersion 3, most current and recommended,\nwhat changed in this version?\n\n344\n00:19:37.950 --> 00:19:41.400\nYou can actually click and\nsee the differences between the versions.\n\n345\n00:19:41.400 --> 00:19:45.960\nIn addition to,\nthere is how to upgrade, and\n\n346\n00:19:45.960 --> 00:19:48.570\nso if we click on how to upgrade\nit will say, if you wanna\n\n347\n00:19:48.570 --> 00:19:53.640\ngo from version 1 to version 2, here are\nthe things you need to do and be aware of.\n\n348\n00:19:53.640 --> 00:19:56.721\nIf you wanna go from\nversion 2 to version 3,\n\n349\n00:19:56.721 --> 00:20:01.510\nhere are the things you need to\nbe aware of such as volumes from.\n\n350\n00:20:01.510 --> 00:20:05.340\nTo share a volume between services, define\nit in a top level volumes option and\n\n351\n00:20:05.340 --> 00:20:08.640\nwe will actually do that\nin a future episode.\n\n352\n00:20:08.640 --> 00:20:14.020\nVolumes from is no longer,\nshouldn't be used in version 3,\n\n353\n00:20:14.020 --> 00:20:16.136\nactually I think it throws\nan error if I'm not mistaken.\n\n354\n00:20:16.136 --> 00:20:22.210\nIn version 2 though volumes from\nmirrored the Docker CLI volumes from and\n\n355\n00:20:22.210 --> 00:20:23.460\nthat's kind of how it came to be.\n\n356\n00:20:23.460 --> 00:20:28.270\n&gt;&gt; So they just kinda like, even though\nit disappears per se as a function if you\n\n357\n00:20:28.270 --> 00:20:31.500\ntype this in this works\n&gt;&gt; And version 2, you can't type that in,\n\n358\n00:20:31.500 --> 00:20:34.020\nit doesn't work, it's not there,\nbut they have something similar\n\n359\n00:20:34.020 --> 00:20:37.460\nthat you just now need to know to use that\ninstead of the one that was previous.\n\n360\n00:20:37.460 --> 00:20:41.295\n&gt;&gt; Right, so, from what I can tell,\nand there may some edge cases here,\n\n361\n00:20:41.295 --> 00:20:44.940\nanything that you could do in version 1,\nyou could do in 2 and 3.\n\n362\n00:20:44.940 --> 00:20:47.030\nAnything you could do\nin 2 you can do in 3.\n\n363\n00:20:47.030 --> 00:20:52.580\nHow you do it though, may have changed,\nand that's the real key point here.\n\n364\n00:20:52.580 --> 00:20:56.390\nWell, Daniel we've been doing a lot\nof talking about how to do them,\n\n365\n00:20:56.390 --> 00:20:57.980\nwe should probably go ahead and\nsee how this works.\n\n366\n00:20:57.980 --> 00:20:59.270\n&gt;&gt; This is a visual format.\n\n367\n00:20:59.270 --> 00:21:03.795\n&gt;&gt; Yep, yep, yep, yep, he's keeping\nme on pace that's what he's here for.\n\n368\n00:21:03.795 --> 00:21:06.390\n&gt;&gt; [LAUGH]\n&gt;&gt; All right so I have my compose file,\n\n369\n00:21:06.390 --> 00:21:09.490\nI'm in the same directory as my compose\nfile and I'm actually going to clear.\n\n370\n00:21:09.490 --> 00:21:13.970\nSo if I type docker-compose,\nI can see these lists of commands.\n\n371\n00:21:13.970 --> 00:21:19.840\nAnd there's actually a great deal of them,\nso Build, Build or rebuild services.\n\n372\n00:21:19.840 --> 00:21:21.450\nWell, what does that mean?\n\n373\n00:21:21.450 --> 00:21:25.080\nWell, I define services, so\nlet's see how this build commands.\n\n374\n00:21:25.080 --> 00:21:29.430\nI'm gonna say docker-composer build and\n\n375\n00:21:29.430 --> 00:21:33.210\nI'm gonna say web,\nbecause web is in this composed file.\n\n376\n00:21:33.210 --> 00:21:38.730\nSo if I run docker -compose build, no such\nservice: web, well that's kind of odd.\n\n377\n00:21:38.730 --> 00:21:44.380\ndocker --compose build,\nand you know what I did?\n\n378\n00:21:44.380 --> 00:21:47.970\nI accidentally renamed it when\nI changed it from cheeseburger.\n\n379\n00:21:47.970 --> 00:21:48.820\n&gt;&gt; You can't do that.\n\n380\n00:21:48.820 --> 00:21:54.160\n&gt;&gt; No, you cannot, and what it's doing is\nit's looking inside of that app directory.\n\n381\n00:21:55.390 --> 00:21:58.310\nRight, and\nit's looking at that Docker file, and\n\n382\n00:21:58.310 --> 00:22:01.156\nit's running Docker build for this.\n\n383\n00:22:01.156 --> 00:22:06.590\nSo I'd type docker-compose build without\nanything and there's a small difference\n\n384\n00:22:06.590 --> 00:22:12.470\nbetween saying build and an actual\nservice name and build by itself.\n\n385\n00:22:12.470 --> 00:22:15.450\nIf I type docker-compose\nbuild it will rebuild\n\n386\n00:22:15.450 --> 00:22:18.780\nevery service that is defined\nin the compose application.\n\n387\n00:22:18.780 --> 00:22:22.822\nSo we'll give this a little of time and\nsee how this works, but in the mean\n\n388\n00:22:22.822 --> 00:22:27.150\ntime I'm gonna hop over here and make\nsure that I didn't just misspeak here.\n\n389\n00:22:28.600 --> 00:22:34.892\nSo I'm gonna hop into the desktop and\ngo inside of simple compose app and\n\n390\n00:22:34.892 --> 00:22:39.370\ndoctor-compose, and\nnotice that when I changed it back from\n\n391\n00:22:39.370 --> 00:22:43.990\ncheeseburger I accidentally\nchanged it to the service app.\n\n392\n00:22:43.990 --> 00:22:48.410\nAnd well you can't build web as\na service if web doesn't exist,\n\n393\n00:22:48.410 --> 00:22:52.270\nso these names now matter\nusing the docker-compose tool.\n\n394\n00:22:52.270 --> 00:22:56.420\nSo let's go see if we're done\nwe're almost finished and\n\n395\n00:22:56.420 --> 00:22:59.994\nthen we'll take a look using\nnot docker-compose but\n\n396\n00:22:59.994 --> 00:23:05.970\ndocker the standard CLI and do a quick\ncomparison to see how these work out.\n\n397\n00:23:05.970 --> 00:23:11.543\nSo if I say docker images,\nIf I scroll up here,\n\n398\n00:23:11.543 --> 00:23:16.617\nnotice I have this new image\ncalled simplecomposeapp_app.\n\n399\n00:23:17.940 --> 00:23:21.830\nWell, this image was built\nusing Docker Compose, and\n\n400\n00:23:21.830 --> 00:23:28.090\nit built it with the parent folder\nprepended to the individual image.\n\n401\n00:23:28.090 --> 00:23:31.846\nSo the app service inside of this\n\n402\n00:23:31.846 --> 00:23:36.580\nsimplecomposedapp Docker Compose\norchestrated system.\n\n403\n00:23:37.620 --> 00:23:39.620\nNow that was using Docker Images.\n\n404\n00:23:39.620 --> 00:23:45.115\nLet's see if there's something\nsimilar in Docker Compose and\n\n405\n00:23:45.115 --> 00:23:51.552\nif we go, well, doesn't look like,\nthere's any images here, right.\n\n406\n00:23:51.552 --> 00:23:56.867\nAnd that's because well, it kinda,\nit doesn't expose all of the API.\n\n407\n00:23:56.867 --> 00:24:00.393\nI wanna make sure here,\nyep, we're good to go.\n\n408\n00:24:00.393 --> 00:24:03.400\nSo if you wanna see what the image is,\nyou have to use Docker.\n\n409\n00:24:03.400 --> 00:24:06.050\nYou don't necessarily have Docker Compose,\nbut\n\n410\n00:24:06.050 --> 00:24:08.380\nnow what if I wanted to\nrun this application?\n\n411\n00:24:09.440 --> 00:24:13.870\nWell, I'm gonna say Docker Compose up.\n\n412\n00:24:15.200 --> 00:24:17.450\nSo bring the service up.\n\n413\n00:24:17.450 --> 00:24:19.650\nAnd invalid mount point.\n\n414\n00:24:19.650 --> 00:24:21.842\nNode compose mount path.\n\n415\n00:24:21.842 --> 00:24:23.823\nWell that's a problem.\n\n416\n00:24:23.823 --> 00:24:25.390\nI have an issue.\n\n417\n00:24:26.540 --> 00:24:28.240\nAnd it told me.\n\n418\n00:24:28.240 --> 00:24:29.480\nI'm glad this actually happened.\n\n419\n00:24:29.480 --> 00:24:34.045\nBecause this is a typo on my part,\nI actually know exactly where this is.\n\n420\n00:24:34.045 --> 00:24:36.210\nSimplecomposeapp_app_1.\n\n421\n00:24:36.210 --> 00:24:39.720\nThis is the first container\nbuilt from that image.\n\n422\n00:24:39.720 --> 00:24:42.020\nSo, it automatically names\nsome of these things for you.\n\n423\n00:24:43.090 --> 00:24:45.000\nFor app, cannot go and\ncreate container for\n\n424\n00:24:45.000 --> 00:24:49.290\nservices, app,\ninvalid volume speck, node compose.\n\n425\n00:24:49.290 --> 00:24:52.270\nWe use that name somewhere,\nand where did we put it?\n\n426\n00:24:52.270 --> 00:24:58.240\nWell, vim docker-compose,\nI got a swap file.\n\n427\n00:24:58.240 --> 00:25:02.200\nI need to turn those off.\n\n428\n00:25:02.200 --> 00:25:07.370\nRight over here,\nI forgot to put a little slash, right?\n\n429\n00:25:07.370 --> 00:25:11.310\nSo I have to give it an absolute\npath within the container, and\n\n430\n00:25:11.310 --> 00:25:12.050\nthat was my fault.\n\n431\n00:25:12.050 --> 00:25:14.479\n&gt;&gt; So it was looking in the wrong spot for\nthe folder.\n\n432\n00:25:14.479 --> 00:25:21.250\n&gt;&gt; It was, it was, so I need to get out\nof this which means I want to abort.\n\n433\n00:25:21.250 --> 00:25:28.430\nThere we go and now if I do docker\ncompose up, that should work.\n\n434\n00:25:28.430 --> 00:25:33.360\nAnd notice it says app 1 and\nthat is because I may have\n\n435\n00:25:33.360 --> 00:25:38.130\nmultiple services coming online and\nis now listening on port 80 80.\n\n436\n00:25:38.130 --> 00:25:43.781\nSo let's go see how that works out, 80 80.\n\n437\n00:25:43.781 --> 00:25:48.070\nAnd well it's the same node\napplication that was running before.\n\n438\n00:25:49.470 --> 00:25:53.120\nBut you'll notice it has kind\nof hijacked standard out.\n\n439\n00:25:54.150 --> 00:25:55.260\nMaybe that's not what I want,\n\n440\n00:25:55.260 --> 00:26:01.380\nI wanna run this as a daemon process\nlike I did with other Docker images.\n\n441\n00:26:01.380 --> 00:26:02.380\nSo I can kill that,\n\n442\n00:26:02.380 --> 00:26:06.180\nand the only reason I can kill that\nin node is because I hooked it up.\n\n443\n00:26:06.180 --> 00:26:12.240\nI can say Docker, compose, if we do a ps,\n\n444\n00:26:12.240 --> 00:26:14.990\nnotice I have a Docker\ncompose application running,\n\n445\n00:26:14.990 --> 00:26:19.400\neven though I hopped out of\nthe standard out high jack.\n\n446\n00:26:19.400 --> 00:26:20.960\nThe state is still up.\n\n447\n00:26:20.960 --> 00:26:26.190\nCompose has this running, if I go over\nhere and refresh, it's still running.\n\n448\n00:26:26.190 --> 00:26:29.676\nI'm refreshing, you may not be able to\nsee that, but I am spamming that button.\n\n449\n00:26:29.676 --> 00:26:32.358\n&gt;&gt; [LAUGH]\n&gt;&gt; Like crazy.\n\n450\n00:26:32.358 --> 00:26:34.790\nSo, what happens is when\nthey bring those up,\n\n451\n00:26:34.790 --> 00:26:39.300\nunlike Docker if you kill the process It's\nstill trying to keep all of these services\n\n452\n00:26:39.300 --> 00:26:43.600\nbecause they may have interdependences,\ninterdependence.\n\n453\n00:26:43.600 --> 00:26:44.450\nInterdependences.\n\n454\n00:26:44.450 --> 00:26:46.510\n&gt;&gt; You got it.\n&gt;&gt; Making words up again.\n\n455\n00:26:46.510 --> 00:26:51.980\nSo to bring it down, well,\nDocker Compose down.\n\n456\n00:26:51.980 --> 00:26:57.110\nAnd it will stop and it will take\na little bit sometimes because\n\n457\n00:26:57.110 --> 00:26:59.420\nit's going through a graceful shutdown.\n\n458\n00:26:59.420 --> 00:27:01.950\nIt's not going it's over.\n\n459\n00:27:01.950 --> 00:27:06.220\nAnd every once in a while, I'll get\nstuck there and I have to control C and\n\n460\n00:27:06.220 --> 00:27:07.370\nrerun that.\n\n461\n00:27:07.370 --> 00:27:10.450\nBut, if I do docker compose ps,\n\n462\n00:27:10.450 --> 00:27:16.010\nyou'll notice everything's back free,\nit's not running.\n\n463\n00:27:16.010 --> 00:27:17.890\nBut what if I wanted that state initially?\n\n464\n00:27:17.890 --> 00:27:20.300\nI didn't want to hijack the standard out.\n\n465\n00:27:20.300 --> 00:27:23.840\nInstead I wanted it to\nrun as a daemon process.\n\n466\n00:27:23.840 --> 00:27:25.230\nI can say up -d.\n\n467\n00:27:25.230 --> 00:27:29.820\nIt'll bring it up, and\nit's now running in the background.\n\n468\n00:27:31.440 --> 00:27:35.200\nSo if I docker compose ps\nit's still up and running.\n\n469\n00:27:35.200 --> 00:27:39.100\nNow it doesn't seem like there's\nany value at current time for\n\n470\n00:27:39.100 --> 00:27:42.410\nusing docker compose versus docker,\ncuz this is a single container.\n\n471\n00:27:42.410 --> 00:27:46.560\nBut if you look at previous episodes,\nwhen you start\n\n472\n00:27:46.560 --> 00:27:51.060\nmapping all these containers together and\nbuilding multiple containered surfaces.\n\n473\n00:27:51.060 --> 00:27:54.490\nWell, that got really complex really fast.\n\n474\n00:27:54.490 --> 00:27:59.070\nAnd, well, that's the entire purpose\nof Compose, is to make that easier,\n\n475\n00:27:59.070 --> 00:28:03.520\nmore declarative in nature,\nkind of like Ansible or Chef or Puppet.\n\n476\n00:28:03.520 --> 00:28:06.460\nSo we're definitely going to take\na look at how to build multiple\n\n477\n00:28:06.460 --> 00:28:10.810\ncontainer applications using Compose but\nI'm not sure we have time in this episode.\n\n478\n00:28:10.810 --> 00:28:13.620\n&gt;&gt; Yeah, that's probably a little beyond\nthe scope of the one minute we have\n\n479\n00:28:13.620 --> 00:28:15.160\nleft on the clock so [LAUGH].\n\n480\n00:28:15.160 --> 00:28:17.810\nWe'll save that for another episode.\n\n481\n00:28:17.810 --> 00:28:21.110\nBut we do have our feet wet with Compose.\n\n482\n00:28:21.110 --> 00:28:23.660\nNot too difficult, as long as you're\nunderstanding you might have to look at\n\n483\n00:28:23.660 --> 00:28:27.680\nsome of the documentation so\nthat things will work as necessary.\n\n484\n00:28:27.680 --> 00:28:32.640\nDoing things like having to put quotations\naround [LAUGH] the port bindings,\n\n485\n00:28:32.640 --> 00:28:35.860\nthat's an interesting thing\nhow that can cause a problem.\n\n486\n00:28:35.860 --> 00:28:38.910\nBut not too far beyond this,\nwe can all kind of figure that out.\n\n487\n00:28:38.910 --> 00:28:41.610\nAnd Justin, you've done a fine\njob of lending us down that road.\n\n488\n00:28:41.610 --> 00:28:44.640\nWe now know, okay,\nI need to look here, look there and\n\n489\n00:28:44.640 --> 00:28:48.610\nkinda understand how Compose is working\nand what it's meant to be doing.\n\n490\n00:28:48.610 --> 00:28:52.710\nThat being said as we kind of alluded\nto we are out of time for this episode,\n\n491\n00:28:52.710 --> 00:28:55.940\njust any parting words\nbefore we crank this up.\n\n492\n00:28:55.940 --> 00:29:00.710\n&gt;&gt; I will tell you this Compose makes\nme excited because it allows you to.\n\n493\n00:29:00.710 --> 00:29:04.940\nIt allows you to do things that not\nnormally one person can accomplish so\n\n494\n00:29:04.940 --> 00:29:06.630\ndefinitely, definitely stay tuned.\n\n495\n00:29:06.630 --> 00:29:08.970\n&gt;&gt; Make yourself the puppet\nmaster of the work.\n\n496\n00:29:08.970 --> 00:29:11.210\nThat being said we're gonna sign off for\nITProTV.\n\n497\n00:29:11.210 --> 00:29:12.290\nWe do thank you for watching.\n\n498\n00:29:12.290 --> 00:29:13.790\nI've been your host Daniel Lowrie.\n\n499\n00:29:13.790 --> 00:29:14.880\n&gt;&gt; And I'm Justin Dennison.\n\n500\n00:29:14.880 --> 00:29:17.016\n&gt;&gt; And we'll see you next time.\n\n501\n00:29:17.016 --> 00:29:22.903\n[MUSIC]\n\n502\n00:29:22.903 --> 00:29:26.125\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "212582915"
        },
        {
          "description": "In this episode, Daniel and Justin use Docker Compose to deploy a multi-container application that includes a web application, a Redis caching container, as well as a MongoDB database container. This is contrasted against using the standard Docker toolset.",
          "length": "1315",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-12-1-multi_container_apps_with_docker_compose-040417-PGM.00_21_41_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-12-1-multi_container_apps_with_docker_compose-040417-PGM.00_21_41_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-12-1-multi_container_apps_with_docker_compose-040417-PGM.00_21_41_12.Still001-sm.jpg",
          "title": "Multi Container Apps with Docker Compose",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:03.455\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:03.455 --> 00:00:05.721\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.721 --> 00:00:08.272\n[MUSIC]\n\n4\n00:00:08.272 --> 00:00:13.170\n&gt;&gt; You're watching ITPRO.TV\n&gt;&gt; All right,\n\n5\n00:00:13.170 --> 00:00:16.592\ngreetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:16.592 --> 00:00:20.345\nI'm your host Daniel Lowrie and\nin today's exciting episode,\n\n7\n00:00:20.345 --> 00:00:23.800\nwe're back with more on our\nintroduction to docker.\n\n8\n00:00:23.800 --> 00:00:27.475\nAnd joining us in the studio\nis the man of danger himself,\n\n9\n00:00:27.475 --> 00:00:28.996\nthat is our good friend Mr.\nJustin Dennison.\n\n10\n00:00:28.996 --> 00:00:31.065\nAnd Justin, welcome back man,\nhow's it going?\n\n11\n00:00:31.065 --> 00:00:32.145\n&gt;&gt; It is going well.\n\n12\n00:00:32.145 --> 00:00:36.279\nMan of danger that is a very\ninteresting description of me.\n\n13\n00:00:36.279 --> 00:00:37.955\nBut I'm happy to be back in the studio.\n\n14\n00:00:38.965 --> 00:00:41.435\nSo we've been talking about Docker, right?\n\n15\n00:00:41.435 --> 00:00:42.585\n&gt;&gt; Yep.\n&gt;&gt; And\n\n16\n00:00:42.585 --> 00:00:45.965\nwe've seen some pretty crazy things.\n\n17\n00:00:45.965 --> 00:00:50.410\nWe saw Docker Compose in a couple of\nepisodes and we're gonna continue on with\n\n18\n00:00:50.410 --> 00:00:56.510\nthat, but I have to think back to those\nmulti-container episodes that we had.\n\n19\n00:00:56.510 --> 00:00:58.030\nThat was a lot of work.\n\n20\n00:00:58.030 --> 00:01:01.425\n&gt;&gt; It was a lot of work, and\nit kind of goes to the whole ideas\n\n21\n00:01:01.425 --> 00:01:05.015\nin the previous episode with\nlooking at Docker Compose,\n\n22\n00:01:05.015 --> 00:01:08.195\nkind of our introduction to that, you\nshowed us how to work with, how to use it.\n\n23\n00:01:08.195 --> 00:01:10.755\nBut really this is how it's\ngoing to be implemented\n\n24\n00:01:10.755 --> 00:01:12.455\nwith doing multiple containers, correct?\n\n25\n00:01:12.455 --> 00:01:15.924\n&gt;&gt; Exactly, so\nthe main goal with Docker Compose is,\n\n26\n00:01:15.924 --> 00:01:20.370\nwell I wanna make managing multi\ncontainers for a system easier.\n\n27\n00:01:20.370 --> 00:01:24.086\nWe talked in the previous episode\nabout some of those configuration\n\n28\n00:01:24.086 --> 00:01:27.541\nmanagement tools that people will use for\nmanaging servers and\n\n29\n00:01:27.541 --> 00:01:30.164\nconfigurations such as SoftStack.\n\n30\n00:01:30.164 --> 00:01:34.250\nDocker Compose allows us to do that for\nour particular application.\n\n31\n00:01:34.250 --> 00:01:36.360\nAnd that's where we're going to go.\n\n32\n00:01:36.360 --> 00:01:41.110\nAnd I think the best way to do that is to\ntake one of these previous episodes we\n\n33\n00:01:41.110 --> 00:01:47.020\ncreated a Mongo, Python web application\nand Redis multi-containered application.\n\n34\n00:01:47.020 --> 00:01:50.350\nAnd we had a lot of work to do\njust to get everything setup.\n\n35\n00:01:50.350 --> 00:01:55.310\nAnd even though I wasn't explicit about\nit, there was some, these need to be true,\n\n36\n00:01:55.310 --> 00:02:00.290\nthese have to happen in this particular\norder in order for this work.\n\n37\n00:02:00.290 --> 00:02:05.340\nSo Docker Compose is gonna\nhelp us maintain that flow.\n\n38\n00:02:05.340 --> 00:02:06.940\nSo I think we should go ahead and\n\n39\n00:02:06.940 --> 00:02:09.810\ntake a look at my screen here and\nget that up and going.\n\n40\n00:02:09.810 --> 00:02:13.853\nSo I have this multicontainer\ncompose folder,\n\n41\n00:02:13.853 --> 00:02:18.712\nit is going to be an application but\nis a folder right now.\n\n42\n00:02:18.712 --> 00:02:22.340\nAnd if we look inside of this app\ndirectory, well, there is my Dockerfile\n\n43\n00:02:22.340 --> 00:02:26.085\nand it's the same Dockerfile that's\nbeen recurring through the series for\n\n44\n00:02:26.085 --> 00:02:27.800\nthat web application.\n\n45\n00:02:27.800 --> 00:02:30.770\nAnd if I look inside of the webapp.py,\n\n46\n00:02:30.770 --> 00:02:35.230\nwell, it is the Mongo,\nRedis version right?\n\n47\n00:02:35.230 --> 00:02:39.490\nI have Mongo and Redis and\nthey're both required and originally,\n\n48\n00:02:39.490 --> 00:02:44.730\nI had to have these up and\ngoing before I launched my application.\n\n49\n00:02:45.780 --> 00:02:49.680\nAnd notice again, I want to remind\nyou that the host is Redis,\n\n50\n00:02:49.680 --> 00:02:53.720\nand the host here is Mongo and\nthose are particular names.\n\n51\n00:02:53.720 --> 00:02:56.220\nSo let's see here.\n\n52\n00:02:56.220 --> 00:02:59.630\nInside of this app, we don't want\nto put our Docker Compose here\n\n53\n00:02:59.630 --> 00:03:04.170\nbecause we're going to use that\nfolder as part of the build process.\n\n54\n00:03:04.170 --> 00:03:08.970\nBut notice I don't have a folder to\nbuild from for Redis and for Mongo.\n\n55\n00:03:08.970 --> 00:03:13.920\nI'm going to use pre-built images and\nthen I can move those in as I need.\n\n56\n00:03:13.920 --> 00:03:17.259\nCuz in the last episode\nwe saw how to build but\n\n57\n00:03:17.259 --> 00:03:20.606\nwe didn't see how to use pre-made images.\n\n58\n00:03:20.606 --> 00:03:22.710\nSo no better time than now.\n\n59\n00:03:22.710 --> 00:03:28.270\nSo docker-compose.yml, and there we go.\n\n60\n00:03:28.270 --> 00:03:33.360\nSo these are YML files, and they have\na very particular structure to them.\n\n61\n00:03:33.360 --> 00:03:35.080\nAnd we're gonna be using version 3,\n\n62\n00:03:35.080 --> 00:03:37.960\nin the previous episode we\nsaw that there are 2 and 1.\n\n63\n00:03:37.960 --> 00:03:42.089\nWe're gonna stay for\nversion 3 cuz that's the recommendation.\n\n64\n00:03:42.089 --> 00:03:46.099\nNow within then I want some services,\nwhat services do I want?\n\n65\n00:03:46.099 --> 00:03:50.573\n&gt;&gt; And Justin, just really quickly\ncould you remind us about the services,\n\n66\n00:03:50.573 --> 00:03:52.753\njust in case we may have forgotten.\n\n67\n00:03:52.753 --> 00:03:54.842\n&gt;&gt; Sometimes I forget myself, Mike.\n\n68\n00:03:54.842 --> 00:03:56.607\nI like to think of services,\n\n69\n00:03:56.607 --> 00:04:00.883\nthe individual containers that make\nyour application as as a whole.\n\n70\n00:04:00.883 --> 00:04:05.870\nOr even if it's not a single application,\nyour stack as a whole.\n\n71\n00:04:05.870 --> 00:04:08.030\nIn this one,\nI'm gonna have Mongo, Redis, and\n\n72\n00:04:08.030 --> 00:04:13.170\na web application that are the individual\nservices that are running in containers.\n\n73\n00:04:13.170 --> 00:04:17.320\nBut it may be that for\nthis whole infrastructure to work,\n\n74\n00:04:17.320 --> 00:04:21.370\nI may need something that's unrelated but\nit's still a service, like FTP or\n\n75\n00:04:21.370 --> 00:04:26.570\nNGINX, as a static file server for\nsome other piece of the stack itself.\n\n76\n00:04:26.570 --> 00:04:30.330\nSo the services are the individual\npieces that fit together\n\n77\n00:04:30.330 --> 00:04:32.200\neven if they're not linked together.\n\n78\n00:04:32.200 --> 00:04:37.070\nI was getting ready to say together again,\nit was about to be crazy.\n\n79\n00:04:37.070 --> 00:04:40.350\nSo I like to think of\ncontainers that have a job.\n\n80\n00:04:40.350 --> 00:04:44.090\nThey serve a particular purpose,\nthose are the services.\n\n81\n00:04:45.360 --> 00:04:48.510\nSo I'm gonna have a web service and\nwhat is that?\n\n82\n00:04:48.510 --> 00:04:53.420\nWell it's gonna be very similar to what\nwe have before ./app and that assumes\n\n83\n00:04:53.420 --> 00:04:57.700\nthat there is a Docker file in that,\nas we saw in the previous episode.\n\n84\n00:04:57.700 --> 00:05:00.480\nDefinitely go back and\ncheck that out if you've missed it.\n\n85\n00:05:00.480 --> 00:05:04.870\nAnd I'm gonna have ports here and I'm\ngonna use that string just so I don't run\n\n86\n00:05:04.870 --> 00:05:10.520\ninto that weird data conversion to bay 60,\nso I'm going to expose 5000.\n\n87\n00:05:10.520 --> 00:05:12.350\nNow in a true production application,\n\n88\n00:05:12.350 --> 00:05:17.180\nI would probably want to put this behind\nsome proxy service and expose port 80.\n\n89\n00:05:17.180 --> 00:05:21.590\nWhich is, I know there are some\ncompanies that you get port 80, and\n\n90\n00:05:21.590 --> 00:05:26.060\nthat's the only place you can look for\ntraffic on, and that's a security concern.\n\n91\n00:05:26.060 --> 00:05:30.700\nBut for this demonstration we're not gonna\nworry about that and make it complex.\n\n92\n00:05:30.700 --> 00:05:32.380\nSo there's my ports, and\n\n93\n00:05:32.380 --> 00:05:35.150\nI do know that when we did this\nwe had to create a network.\n\n94\n00:05:35.150 --> 00:05:38.407\nWe had the docker network create and\nthen webapp.\n\n95\n00:05:39.690 --> 00:05:41.630\nWell in docker compose,\n\n96\n00:05:41.630 --> 00:05:45.130\nwe put that as part of the configuration\nand that's incredibly handy.\n\n97\n00:05:45.130 --> 00:05:47.956\nI don't have to run all of\nthose individual commands.\n\n98\n00:05:47.956 --> 00:05:54.030\nSo I do have to tell it what network is\n\n99\n00:05:54.030 --> 00:06:00.324\nthe webapp on, or networks is it on.\n\n100\n00:06:00.324 --> 00:06:00.964\nMy goodness.\n&gt;&gt; [LAUGH]\n\n101\n00:06:00.964 --> 00:06:02.047\n&gt;&gt; Whoa, I had trouble\n\n102\n00:06:02.047 --> 00:06:05.410\ngetting that out there, but\nthat will be all right.\n\n103\n00:06:05.410 --> 00:06:08.034\nSo webapp, and\nI could list multiple ones here,\n\n104\n00:06:08.034 --> 00:06:11.940\nit doesn't have to be just one,\nit may be part of multiple networks.\n\n105\n00:06:13.260 --> 00:06:16.700\nSo that defines the web service,\nwhat comes next?\n\n106\n00:06:16.700 --> 00:06:22.098\nWell, I want redis, and\ninstead of build I'm gonna say image and\n\n107\n00:06:22.098 --> 00:06:24.266\ntell it what image to use.\n\n108\n00:06:24.266 --> 00:06:28.670\nI'm gonna use the official redis image,\nwhich we'll pull from Docker Hub,\n\n109\n00:06:28.670 --> 00:06:31.700\nwhich is the official one,\nso I don't have a slash.\n\n110\n00:06:31.700 --> 00:06:34.798\nBut if I wanted to use one that was on\nmy Docker hub or on someone else's,\n\n111\n00:06:34.798 --> 00:06:38.018\nI'm gonna need that fully qualified name,\nlike justindevpro/redis.\n\n112\n00:06:38.018 --> 00:06:44.889\nAnd then after pulling that image\nI want to expose the redis ports.\n\n113\n00:06:46.090 --> 00:06:48.050\nAnd what ports do I want to expose?\n\n114\n00:06:48.050 --> 00:06:52.904\nWell redis by default listens on 6379, and\nyou're like Justin, how do you know that?\n\n115\n00:06:52.904 --> 00:06:57.740\nI read the documentation,\nthere is no magic in that,\n\n116\n00:06:57.740 --> 00:07:01.160\nI just read the documentation.\n\n117\n00:07:01.160 --> 00:07:05.759\nAnd then what command, well actually\nI don't wanna run a command on this,\n\n118\n00:07:05.759 --> 00:07:06.492\nexcuse me.\n\n119\n00:07:06.492 --> 00:07:10.090\nNetworks, and here we go.\n\n120\n00:07:10.090 --> 00:07:14.145\nI want to also put it on webapp.\n\n121\n00:07:14.145 --> 00:07:16.680\n&gt;&gt; Cuz they're all trying\nto talk to each other and\n\n122\n00:07:16.680 --> 00:07:18.870\nit kind of makes sense to put them all\non the same network at that point.\n\n123\n00:07:18.870 --> 00:07:23.390\n&gt;&gt; Exactly, so I now have defined two\nservices that run on the webapp network,\n\n124\n00:07:23.390 --> 00:07:25.230\nand they're starting to link together.\n\n125\n00:07:25.230 --> 00:07:28.480\nNotice how I named this service though.\n\n126\n00:07:28.480 --> 00:07:33.190\nThat's probably important,\nbecause I use that as the host\n\n127\n00:07:33.190 --> 00:07:35.980\ninside of my web application.\n\n128\n00:07:37.280 --> 00:07:44.370\nI also want Mongo, and Mongo, well it is\ngoing to use the official Mongo image.\n\n129\n00:07:48.810 --> 00:07:52.636\nAnd also, it's going to expose some ports.\n\n130\n00:07:52.636 --> 00:07:57.161\nAnd I'm just gonna do that\nbecause maybe I want to dial in\n\n131\n00:07:57.161 --> 00:08:01.030\nusing other applications\nto check things out.\n\n132\n00:08:01.030 --> 00:08:06.435\nAnd I'm gonna expose 27017 and 27017.\n\n133\n00:08:06.435 --> 00:08:11.810\nThere we go, and\nI want to mount it to a persistent volume.\n\n134\n00:08:13.040 --> 00:08:15.110\nSo this volumes is fairly new.\n\n135\n00:08:15.110 --> 00:08:15.970\nWell, it's brand new.\n\n136\n00:08:15.970 --> 00:08:17.590\nWe haven't seen it in\na composed application.\n\n137\n00:08:19.340 --> 00:08:22.870\nBut volumes is kind of like a -v or\nin this case,\n\n138\n00:08:22.870 --> 00:08:24.740\nwe're gonna use it as volumes from.\n\n139\n00:08:26.130 --> 00:08:30.847\nWe're going to map mongo_data,\nwhich does not exist at current time.\n\n140\n00:08:30.847 --> 00:08:36.239\nWe'll have finish out our\napplication to data/db.\n\n141\n00:08:36.239 --> 00:08:43.070\nNow, /data/routedata/db is where\nMongo stores all of its information.\n\n142\n00:08:43.070 --> 00:08:44.630\nThat's the standard default.\n\n143\n00:08:44.630 --> 00:08:48.410\nThere is a way to get around that\nby adding a commandline flag.\n\n144\n00:08:48.410 --> 00:08:49.880\nBut I'm gonna let it store it there.\n\n145\n00:08:49.880 --> 00:08:52.465\nAnd then map mongo_data, the volume,\n\n146\n00:08:52.465 --> 00:08:56.970\nto that respective folder\ninside of the Mongo container.\n\n147\n00:08:56.970 --> 00:08:59.330\nAs I said, Mongo data does not exist yet.\n\n148\n00:08:59.330 --> 00:09:00.830\nWe'll see that in just a moment.\n\n149\n00:09:00.830 --> 00:09:07.270\nAnd then we should probably\nput it on The network, right?\n\n150\n00:09:07.270 --> 00:09:08.800\nThe webapp network.\n\n151\n00:09:08.800 --> 00:09:10.520\nSo there are my three services.\n\n152\n00:09:11.790 --> 00:09:17.100\nThere you go, it's good to go, but\nnow I have a couple of things.\n\n153\n00:09:17.100 --> 00:09:20.810\nI have a named volume and\nI have a network.\n\n154\n00:09:21.970 --> 00:09:23.980\nI have not defined those two things yet.\n\n155\n00:09:25.030 --> 00:09:29.583\nWhen we did this commandline, I had docker\n\n156\n00:09:29.583 --> 00:09:34.775\ncreate-v/d/data/db--name mongo data.\n\n157\n00:09:34.775 --> 00:09:37.405\nRun the mongo image,\nthat created my volume.\n\n158\n00:09:37.405 --> 00:09:38.590\nAnd I had to do a similar thing for\n\n159\n00:09:38.590 --> 00:09:42.170\nnetwork before actually\ncreating these containers.\n\n160\n00:09:42.170 --> 00:09:44.880\nBut now with Version 3 of Docker Compose,\n\n161\n00:09:44.880 --> 00:09:47.860\nI can put those at what\nare called a top level.\n\n162\n00:09:47.860 --> 00:09:51.380\nAnd I'm going to scroll\nback up just a little bit.\n\n163\n00:09:51.380 --> 00:09:53.290\nNotice I have version and services.\n\n164\n00:09:53.290 --> 00:09:56.550\nSo services, it's not indented.\n\n165\n00:09:56.550 --> 00:09:58.280\nEverything under it is a service.\n\n166\n00:09:59.430 --> 00:10:01.680\nIndentation one level, web.\n\n167\n00:10:01.680 --> 00:10:06.870\nRedis and mongo are services because they\nare indented under the services label.\n\n168\n00:10:08.160 --> 00:10:11.890\nWe can do a similar thing in\nversion three, just to clarify,\n\n169\n00:10:11.890 --> 00:10:13.600\nversion three only.\n\n170\n00:10:13.600 --> 00:10:17.520\nNot only, there may be some\nversion two correlated to this.\n\n171\n00:10:17.520 --> 00:10:20.364\nI'm going to say volumes.\n\n172\n00:10:20.364 --> 00:10:24.503\nAnd I'm going to do a mongo_data volume.\n\n173\n00:10:24.503 --> 00:10:25.614\nThat is the named volume.\n\n174\n00:10:25.614 --> 00:10:31.484\nSo it will do that\ndocker create-v/dv/data.\n\n175\n00:10:31.484 --> 00:10:34.540\nActually, it won't create that\nvolume inside the container.\n\n176\n00:10:34.540 --> 00:10:37.840\nIt will just create a data\nvolume behind the scenes for us.\n\n177\n00:10:38.920 --> 00:10:43.830\nJust to be very specific,\nI wanna use the local driver.\n\n178\n00:10:45.330 --> 00:10:46.981\nThe volume driver,\nyou can get really deep.\n\n179\n00:10:46.981 --> 00:10:49.020\nDefinitely check out the documentation.\n\n180\n00:10:49.020 --> 00:10:52.880\nThere's the local driver, and\nI think there's one called flocker, and\n\n181\n00:10:52.880 --> 00:10:56.730\nsome other ones about how you\nmount data volumes in Docker.\n\n182\n00:10:56.730 --> 00:10:59.460\n&gt;&gt; We gotta talk to somebody\nabout these naming conventions.\n\n183\n00:10:59.460 --> 00:11:03.220\n[LAUGH]\n&gt;&gt; [LAUGH] We were talking before the show\n\n184\n00:11:03.220 --> 00:11:09.120\nthat sometimes the names, well, they\ndon't match quite what needs to happen.\n\n185\n00:11:09.120 --> 00:11:12.391\n&gt;&gt; They don't really lend themselves\nto say, that's what that, yeah,\n\n186\n00:11:12.391 --> 00:11:14.093\nyeah, yeah, I see the correlation.\n\n187\n00:11:14.093 --> 00:11:18.663\nNo, no, they're just grabbing, opening\na dictionary, pop the first word and go,\n\n188\n00:11:18.663 --> 00:11:19.624\ncelery, sweet.\n\n189\n00:11:19.624 --> 00:11:22.220\n&gt;&gt; I will tell you,\nwhen I was younger, Docker, well,\n\n190\n00:11:22.220 --> 00:11:24.800\nthose were the pants I wore on-\n&gt;&gt; Yeah, Dockers.\n\n191\n00:11:24.800 --> 00:11:27.120\n&gt;&gt; During dress-up time, right?\n\n192\n00:11:27.120 --> 00:11:29.190\nSchool picture day, that was Dockers.\n\n193\n00:11:29.190 --> 00:11:29.751\n&gt;&gt; Yeah.\n\n194\n00:11:29.751 --> 00:11:34.653\n&gt;&gt; But now Dockers is synonymous with this\ncontainer run time and, well, here we are.\n\n195\n00:11:34.653 --> 00:11:36.468\n&gt;&gt; Here we are.\n&gt;&gt; We're doing Docker stuff.\n\n196\n00:11:36.468 --> 00:11:37.604\n&gt;&gt; And Flocker.\n\n197\n00:11:37.604 --> 00:11:39.659\n&gt;&gt; Yeah,\nbe careful about the naming conventions.\n\n198\n00:11:40.770 --> 00:11:42.524\nDefinitely check out the documentation.\n\n199\n00:11:42.524 --> 00:11:43.710\nI'm just using the standard.\n\n200\n00:11:43.710 --> 00:11:47.322\nThe local one is the default, I'm just\nbeing transparent about the driver.\n\n201\n00:11:47.322 --> 00:11:51.491\nAnd then also there was another attribute\nthat we had named and we need to create,\n\n202\n00:11:51.491 --> 00:11:53.960\nand that is the network called web app,\nright?\n\n203\n00:11:55.340 --> 00:11:59.797\nNormally we would have to do docker\nnetwork create and then give it a name and\n\n204\n00:11:59.797 --> 00:12:01.580\nit would create the network.\n\n205\n00:12:01.580 --> 00:12:08.310\nBut in Docker Compose Version 3, I can do\nthat in the Docker Compose file itself.\n\n206\n00:12:08.310 --> 00:12:12.540\nSo Docker Compose webapp and\n\n207\n00:12:12.540 --> 00:12:17.320\nI'm also going to give it a driver,\nwhich is an attribute.\n\n208\n00:12:17.320 --> 00:12:20.910\nAnd you can set different drivers for\nthe network.\n\n209\n00:12:20.910 --> 00:12:24.670\nWhen you create by default,\nit uses the bridge driver.\n\n210\n00:12:24.670 --> 00:12:26.340\nSo that's what I'm gonna put here.\n\n211\n00:12:26.340 --> 00:12:32.250\nI'm just showing you a few other things\nthat you can kinda specify, right?\n\n212\n00:12:32.250 --> 00:12:38.379\nNow where would I go to find out\nmore about these individual pieces,\n\n213\n00:12:38.379 --> 00:12:43.228\nand that is the Docker Compose\n[LAUGH] documentation.\n\n214\n00:12:43.228 --> 00:12:43.771\nThere we go.\n\n215\n00:12:43.771 --> 00:12:45.689\n&gt;&gt; [LAUGH] That was\ncaptured on film forever.\n\n216\n00:12:45.689 --> 00:12:49.090\n&gt;&gt; Oo, it is, it is, it is, it is.\n\n217\n00:12:49.090 --> 00:12:53.503\nSo if I go to the Docker Compose\ndocumentation and\n\n218\n00:12:53.503 --> 00:12:58.250\nI look at Networks, so\nhere's services, right?\n\n219\n00:12:58.250 --> 00:13:02.920\nSo network, networks to join referencing\nentries under the top level networks key.\n\n220\n00:13:02.920 --> 00:13:06.913\nAny time in the Docker Compose\ndocumentation.\n\n221\n00:13:06.913 --> 00:13:10.868\nI gotta find a shorter sentence\nto say in reference to that.\n\n222\n00:13:10.868 --> 00:13:14.874\nWhen you see top level,\nthat's services, volumes and networks.\n\n223\n00:13:14.874 --> 00:13:20.175\nThey're the most unindented portion\nof the Docker Compose file.\n\n224\n00:13:20.175 --> 00:13:24.270\nSo top level of networks is\nthis bottom portion here.\n\n225\n00:13:24.270 --> 00:13:25.190\nI forgot to zoom out.\n\n226\n00:13:25.190 --> 00:13:26.650\nThat was getting crazy there for a moment.\n\n227\n00:13:27.820 --> 00:13:33.450\nIs if I scroll down services is\na top level attribute, volumes is.\n\n228\n00:13:33.450 --> 00:13:34.350\nAnd so is networks.\n\n229\n00:13:34.350 --> 00:13:36.610\nSo if you see top level\nin a documentation,\n\n230\n00:13:36.610 --> 00:13:39.720\nthat means they're all indented in,\nall right?\n\n231\n00:13:39.720 --> 00:13:40.980\nSo, here we go.\n\n232\n00:13:42.130 --> 00:13:43.650\nI can go look at these.\n\n233\n00:13:43.650 --> 00:13:48.250\nSo it talks about version 2 file format\nreplaces the version 1 net option.\n\n234\n00:13:49.580 --> 00:13:52.410\nSo it tells you these little\ntidbits in the documentation.\n\n235\n00:13:52.410 --> 00:13:55.940\nIn version 1,\nthere wasn't a networks type thing.\n\n236\n00:13:55.940 --> 00:13:57.500\nIt had a different attribute.\n\n237\n00:13:57.500 --> 00:14:03.465\nSo if you find these out in the wild,\nright, you're looking at someone's code,\n\n238\n00:14:03.465 --> 00:14:07.277\nkeep in mind these may be\na little different, okay?\n\n239\n00:14:07.277 --> 00:14:10.024\nSo let's try it out, right?\n\n240\n00:14:10.024 --> 00:14:12.790\nSo I had an image and a build.\n\n241\n00:14:12.790 --> 00:14:15.540\nIf we remind ourselves,\nwe can do Docker Compose,\n\n242\n00:14:15.540 --> 00:14:20.670\nand we could do build, but\nI'm actually just gonna run up.\n\n243\n00:14:20.670 --> 00:14:23.570\nSo I'm gonna say up and\nwhat is it gonna do?\n\n244\n00:14:23.570 --> 00:14:27.140\nWell, since the image does not exist for\n\n245\n00:14:27.140 --> 00:14:31.140\nthe one that needs to be built,\nit will run a build for you.\n\n246\n00:14:31.140 --> 00:14:35.400\nAnd that's incredibly handy because\nthat would be horrible if you forgot.\n\n247\n00:14:35.400 --> 00:14:39.640\nAnd guess what, see all that\nprinted out our services are up,\n\n248\n00:14:40.820 --> 00:14:43.170\nall three containers are up and going.\n\n249\n00:14:43.170 --> 00:14:48.474\nI'm gonna open another commandline here,\njust to show you,\n\n250\n00:14:48.474 --> 00:14:55.320\nso if i've saved docker-compose, PS,\nthat was kind of weird what happened.\n\n251\n00:14:55.320 --> 00:14:58.640\nAnd this is something you have to\nbe careful with docker-compose.\n\n252\n00:14:58.640 --> 00:15:03.608\nThe compose commandline utility\nassumes that you're in the folder\n\n253\n00:15:03.608 --> 00:15:06.233\nthat defines the services, okay?\n\n254\n00:15:06.233 --> 00:15:10.985\nSo I can type docker-composer here and\nget a list of commands and\n\n255\n00:15:10.985 --> 00:15:13.628\nthat will throw you off sometimes.\n\n256\n00:15:13.628 --> 00:15:19.253\nBut really I need to be, well,\nin this multi-container compose app,\n\n257\n00:15:19.253 --> 00:15:22.560\nwhere the docker-composed YML exists.\n\n258\n00:15:22.560 --> 00:15:27.539\nAnd now I can say docker-composed PS,\nand it will look inside that file, and\n\n259\n00:15:27.539 --> 00:15:31.381\ntry to map those to the existing\nservices that are running.\n\n260\n00:15:31.381 --> 00:15:35.638\nSo, now that I'm inside that YML,\nbe careful about that,\n\n261\n00:15:35.638 --> 00:15:39.227\nI have multi-container\ncomposedapp Mongo one.\n\n262\n00:15:39.227 --> 00:15:41.291\nredis_1 and web_1.\n\n263\n00:15:41.291 --> 00:15:46.269\nHere are all the ports, what is its state,\nhow did it get there, right?\n\n264\n00:15:46.269 --> 00:15:51.033\nIt's a little more simplified than\nwhat we see in the Docker PS.\n\n265\n00:15:51.033 --> 00:15:54.273\nBut these names are made for us, right?\n\n266\n00:15:54.273 --> 00:15:56.842\nmulticontainercomposeapp, where\ndid that come from?\n\n267\n00:15:56.842 --> 00:15:58.620\nThe containing folder.\n\n268\n00:15:58.620 --> 00:16:03.120\nMongo, that's because it's the Mongo\nservice for this application.\n\n269\n00:16:03.120 --> 00:16:07.350\nAnd it is the first container created for\nMongo, okay?\n\n270\n00:16:08.800 --> 00:16:12.020\nSo, okay, well, let's see if it works.\n\n271\n00:16:12.020 --> 00:16:14.790\nThat's probably the most\nimportant aspect here.\n\n272\n00:16:14.790 --> 00:16:16.373\nIf I go to localhost, not 8080, right?\n\n273\n00:16:16.373 --> 00:16:18.978\nThis is the Python application.\n\n274\n00:16:18.978 --> 00:16:20.004\nIt is 5000.\n\n275\n00:16:20.004 --> 00:16:21.124\nThere's home.\n\n276\n00:16:21.124 --> 00:16:23.828\nAnd if I go to about, not.\n\n277\n00:16:23.828 --> 00:16:27.442\nThere's no n in there.\n\n278\n00:16:27.442 --> 00:16:28.978\nThat's important.\n\n279\n00:16:28.978 --> 00:16:30.484\nThere's about.\n\n280\n00:16:30.484 --> 00:16:32.916\nThere's contact.\n\n281\n00:16:32.916 --> 00:16:36.990\nContact, there we go.\n\n282\n00:16:36.990 --> 00:16:41.170\nAnd then let's look at the summary,\nso that still works, right?\n\n283\n00:16:41.170 --> 00:16:44.144\nSo it's working like we anticipated it to.\n\n284\n00:16:44.144 --> 00:16:48.598\nAnd then what if I go to users/create?\n\n285\n00:16:48.598 --> 00:16:52.664\nSuccess, and list, everything works, and\n\n286\n00:16:52.664 --> 00:16:57.056\nit is now declared a syntax\nin this compose file.\n\n287\n00:16:57.056 --> 00:16:59.980\nI don't have to go, all right,\nfirst you need to create the network.\n\n288\n00:16:59.980 --> 00:17:03.030\nThen you need to create the volume.\n\n289\n00:17:03.030 --> 00:17:05.020\nThen you need to fire up mongo and redis.\n\n290\n00:17:05.020 --> 00:17:06.370\nThen you create the web app.\n\n291\n00:17:07.440 --> 00:17:11.890\nWell, you just put them in this\ndeclarative docker-compose file, and\n\n292\n00:17:11.890 --> 00:17:15.190\nyou just make a list of\nthe things that need to happen.\n\n293\n00:17:15.190 --> 00:17:19.823\nAnd as you find out in later episodes,\nthis becomes incredibly powerful because,\n\n294\n00:17:19.823 --> 00:17:22.416\nwell, we've just touched the surface here.\n\n295\n00:17:22.416 --> 00:17:26.690\nBut, this is a lot easier than\nthose multi-container regular ones.\n\n296\n00:17:26.690 --> 00:17:30.308\n&gt;&gt; Now, just if the, I don't know,\nsomething like the network,\n\n297\n00:17:30.308 --> 00:17:33.860\nsay they were already there and\nthey were named the same thing.\n\n298\n00:17:33.860 --> 00:17:36.093\nWould it give it an error or\nwould it just say, it's already there and\n\n299\n00:17:36.093 --> 00:17:36.970\nI don't have to build this.\n\n300\n00:17:36.970 --> 00:17:37.912\n&gt;&gt; It doesn't give it an error.\n\n301\n00:17:37.912 --> 00:17:40.821\nAs a matter of fact,\nweb already existed when we ran this.\n\n302\n00:17:40.821 --> 00:17:41.800\n&gt;&gt; Right, that's right.\n\n303\n00:17:41.800 --> 00:17:44.680\nSo, I did not go in and\nclear out that network, it existed.\n\n304\n00:17:44.680 --> 00:17:46.970\nSo if it's cool,\nI'm just gonna add these to that network.\n\n305\n00:17:46.970 --> 00:17:49.030\nIf it doesn't,\nit will create them for you.\n\n306\n00:17:49.030 --> 00:17:49.704\n&gt;&gt; Okay.\n\n307\n00:17:49.704 --> 00:17:51.638\n&gt;&gt; Yeah, so\nit's an incredibly powerful tool.\n\n308\n00:17:51.638 --> 00:17:58.380\nAnd what I like about is it's almost like\na checklist of things that you need to do.\n\n309\n00:17:58.380 --> 00:18:01.890\nAnd it provides some other\nkind of power for you.\n\n310\n00:18:03.380 --> 00:18:06.110\nSo one last thing here.\n\n311\n00:18:06.110 --> 00:18:07.348\nI timed in docker compose.\n\n312\n00:18:07.348 --> 00:18:12.630\nWell, okay, that's, see this scale?\n\n313\n00:18:14.000 --> 00:18:18.540\nWell now that I have a defined service,\nwe're just gonna see this nice little.\n\n314\n00:18:18.540 --> 00:18:22.610\nI really need I need\nanother Redis instance.\n\n315\n00:18:22.610 --> 00:18:28.958\nNow, full disclosure, this is not set up\nto be a distributed Redis set up okay?\n\n316\n00:18:28.958 --> 00:18:35.172\nBut if we can get this to scale, well,\nwe would have multiple Redis instances.\n\n317\n00:18:35.172 --> 00:18:38.466\nI wanna show you this because I have seen\nthis in several places online, they say,\n\n318\n00:18:38.466 --> 00:18:39.920\njust do this.\n\n319\n00:18:39.920 --> 00:18:42.350\nAnd we're probably gonna\nsee some shenanigans here.\n\n320\n00:18:43.420 --> 00:18:46.720\nSo I can say, scale and\nyou name the service.\n\n321\n00:18:47.720 --> 00:18:50.100\nAnd you say, well,\nI want three redis instances.\n\n322\n00:18:51.530 --> 00:18:53.930\nAnd here's what's gonna happen.\n\n323\n00:18:53.930 --> 00:18:58.136\nRemember how we did the ports,\nright, for redis?\n\n324\n00:18:58.136 --> 00:19:03.716\nWell, the other two instances that\nI tried to scale up, they die.\n\n325\n00:19:03.716 --> 00:19:07.450\nBecause the port's already allocated and\nmapped to the local host port.\n\n326\n00:19:07.450 --> 00:19:11.762\nIf we take that out, we would have\nthree Redis instances running,\n\n327\n00:19:11.762 --> 00:19:14.612\nand well there you go\nthey just kind of work.\n\n328\n00:19:14.612 --> 00:19:21.560\nSo docker-compose allows you to start\nwith just these basic level containers.\n\n329\n00:19:21.560 --> 00:19:24.734\nAnd as we'll see, we'll actually\nsee this work in other contexts.\n\n330\n00:19:24.734 --> 00:19:26.220\nWhere we can just go you know what?\n\n331\n00:19:26.220 --> 00:19:32.554\nI need 30 copies of the web app,\nI need two more MongoDBs and done.\n\n332\n00:19:32.554 --> 00:19:35.910\nAnd docker compose is incredibly powerful.\n\n333\n00:19:35.910 --> 00:19:38.820\n&gt;&gt; We do love it,\nit's a nice thing to be able to say okay,\n\n334\n00:19:38.820 --> 00:19:42.510\nI've got it how I want my\nenvironment to be built out.\n\n335\n00:19:42.510 --> 00:19:44.450\nI've got all these things,\nI've accounted for them.\n\n336\n00:19:44.450 --> 00:19:49.690\nI've put them in my lovely little file,\nwhich is fun to say, and fire it off.\n\n337\n00:19:49.690 --> 00:19:50.250\nAnd there you go.\n\n338\n00:19:50.250 --> 00:19:51.700\nIt builds up everything you need.\n\n339\n00:19:51.700 --> 00:19:53.830\nYou test it to make sure it's\nall connected correctly.\n\n340\n00:19:53.830 --> 00:19:55.390\nAnd you're off to the races.\n\n341\n00:19:55.390 --> 00:19:59.450\nThat is the purpose of this, and\nJustin, it doesn't seem to be\n\n342\n00:19:59.450 --> 00:20:03.400\ntoo very difficult to get into\nrates of documentation, obviously.\n\n343\n00:20:03.400 --> 00:20:06.700\nGotta know some of the finer points, but\n\n344\n00:20:06.700 --> 00:20:11.500\nthey do make that stuff available\nto us and pretty easy to get at.\n\n345\n00:20:11.500 --> 00:20:14.390\nIs there anything else that we need\nto be aware of when it comes to\n\n346\n00:20:14.390 --> 00:20:17.110\ndoing this multi-container kind\nof idea inside of Compose?\n\n347\n00:20:17.110 --> 00:20:20.080\n&gt;&gt; Well, I will tell you,\nI find I agree with you.\n\n348\n00:20:20.080 --> 00:20:24.690\nIt's almost easier to start with Compose\nafter that first little bit of Docker.\n\n349\n00:20:24.690 --> 00:20:28.847\nSo in the previous episodes we've\ndone a little bit deeper dive to see,\n\n350\n00:20:28.847 --> 00:20:31.080\nwe want to feel the pain, so to speak.\n\n351\n00:20:31.080 --> 00:20:33.362\nAnd know that it's available\nbefore we see the solution.\n\n352\n00:20:33.362 --> 00:20:36.450\nBecause sometimes you don't\nappreciate the solution,\n\n353\n00:20:36.450 --> 00:20:39.940\nDocker Compose in this case unless\nyou've had the pain points.\n\n354\n00:20:39.940 --> 00:20:44.414\nSo what we've done in the multi-container\napps in the previous episode,\n\n355\n00:20:44.414 --> 00:20:46.124\nwe did the exact same thing.\n\n356\n00:20:46.124 --> 00:20:49.700\nWell this tool existed because,\nwell, there was a lot to remember.\n\n357\n00:20:49.700 --> 00:20:53.554\nYou had to write bash scripts, or you had\nto remember specific things in order.\n\n358\n00:20:53.554 --> 00:20:59.226\nWell now you're like,\nwell you just make a list.\n\n359\n00:20:59.226 --> 00:21:03.420\nAnd this a great deal easier\nto play around with, I find.\n\n360\n00:21:03.420 --> 00:21:07.270\nSo after you learn that first little bit\nof Docker, try out Compose a little bit.\n\n361\n00:21:07.270 --> 00:21:10.750\nIt may be more approachable for\nyou at the very beginning.\n\n362\n00:21:10.750 --> 00:21:12.980\n&gt;&gt; All right, well there you go,\nladies and gentlemen.\n\n363\n00:21:12.980 --> 00:21:16.770\nIt is Docker Compose, it's definitely\nthe answer to all our Docker prayers.\n\n364\n00:21:16.770 --> 00:21:19.665\nAt least if you need to build\nsome sort of gigantic or\n\n365\n00:21:19.665 --> 00:21:21.220\nmulti-container type of environment.\n\n366\n00:21:21.220 --> 00:21:22.650\nSo keep that in mind and\n\n367\n00:21:22.650 --> 00:21:26.210\nplay around with it a little bit,\nand get more handy with it.\n\n368\n00:21:26.210 --> 00:21:28.980\nYou'll probably end up loving\nit a whole lot more than\n\n369\n00:21:28.980 --> 00:21:30.930\nanything else once out of Docker, so-\n&gt;&gt; [LAUGH]\n\n370\n00:21:30.930 --> 00:21:32.550\n&gt;&gt; So enjoy, that's our gift to you,\n\n371\n00:21:32.550 --> 00:21:33.400\ngood folks.\n\n372\n00:21:33.400 --> 00:21:36.890\nBut it does look like it is that time for\nus to sign off.\n\n373\n00:21:36.890 --> 00:21:39.810\nFor ITProTV, I've been your host,\nDaniel Lowrie.\n\n374\n00:21:39.810 --> 00:21:40.910\n&gt;&gt; And I'm Justin Dennison.\n\n375\n00:21:40.910 --> 00:21:42.232\n&gt;&gt; And we'll see you next time.\n\n376\n00:21:42.232 --> 00:21:49.620\n[MUSIC]\n\n377\n00:21:49.620 --> 00:21:54.920\n&gt;&gt; Thank you for watching IT.PROTV.\n\n",
          "vimeoId": "212911535"
        },
        {
          "description": "In this episode, Daniel and Justin introduce you to Docker Machine which is the way to provision a virtual machine in the Docker environment. Here they show you how to spin up a Docker VM, connect and set common configuration settings, and remove VMs when you're done with them.",
          "length": "1667",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-1-what_is_docker_machine-040517.00_27_30_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-1-what_is_docker_machine-040517.00_27_30_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-1-what_is_docker_machine-040517.00_27_30_23.Still001-sm.jpg",
          "title": "What is Docker Machine",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.458\nWelcome to ITProTV.\n\n2\n00:00:01.458 --> 00:00:02.700\nI'm your host, Don Pezet.\n\n3\n00:00:02.700 --> 00:00:08.228\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.228 --> 00:00:12.460\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.460 --> 00:00:14.589\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:14.589 --> 00:00:17.192\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:17.192 --> 00:00:18.974\nI'm your host, Daniel Lowrie, and\n\n8\n00:00:18.974 --> 00:00:22.840\nin today's episode we are back with more\nof our Introduction to Docker series.\n\n9\n00:00:22.840 --> 00:00:26.260\nAnd joining us in the studio again\nour good friend, Mr. Justin Dennison.\n\n10\n00:00:26.260 --> 00:00:28.010\nJustin, glad to have you back, man.\n\n11\n00:00:28.010 --> 00:00:29.130\nHow's it going today?\n\n12\n00:00:29.130 --> 00:00:30.990\n&gt;&gt; I'm glad to be here, Daniel.\n\n13\n00:00:30.990 --> 00:00:32.660\nIt's going well, and how are you today?\n\n14\n00:00:32.660 --> 00:00:33.680\n&gt;&gt; I'm very good, thank you.\n\n15\n00:00:33.680 --> 00:00:35.140\n&gt;&gt; That's always good to here.\n\n16\n00:00:35.140 --> 00:00:36.090\n&gt;&gt; Sublime, even.\n\n17\n00:00:36.090 --> 00:00:38.400\n&gt;&gt; Yeah,\nI don't even know what that word means,\n\n18\n00:00:38.400 --> 00:00:41.220\nbut I'm going to assume\nthat it's a good thing.\n\n19\n00:00:41.220 --> 00:00:42.550\n&gt;&gt; It is.\n&gt;&gt; It's a good thing.\n\n20\n00:00:42.550 --> 00:00:44.910\nSo, yeah we've been\ntalking about Docker and\n\n21\n00:00:44.910 --> 00:00:47.620\nwe've looked at the couple of\ntools in previous episodes.\n\n22\n00:00:47.620 --> 00:00:52.070\nThe Docker command line, as well as\nDocker Compose which makes multi-container\n\n23\n00:00:52.070 --> 00:00:54.740\norchestration a great deal easier.\n\n24\n00:00:54.740 --> 00:00:58.830\nBut today, we're going to touch on another\nset of those tools that come in Docker for\n\n25\n00:00:58.830 --> 00:01:00.310\nWindows, Docker for Mac.\n\n26\n00:01:00.310 --> 00:01:05.250\nAnd actually rebundled part of the old,\nwell, old, it's not super old.\n\n27\n00:01:05.250 --> 00:01:09.380\nIt's the previous installation method for\nWindows and Mac called Docker Toolbox, and\n\n28\n00:01:09.380 --> 00:01:10.850\nthat is Docker Machine.\n\n29\n00:01:10.850 --> 00:01:15.050\nNow, to some extent\nDocker Machine played a role that\n\n30\n00:01:15.050 --> 00:01:17.500\nwasn't immediately transparent before.\n\n31\n00:01:17.500 --> 00:01:21.760\nAnd that was, well, underneath the covers,\nif you're on Mac or\n\n32\n00:01:22.880 --> 00:01:27.250\non top of Windows and you didn't have\nsome of those virtualization softwares,\n\n33\n00:01:27.250 --> 00:01:31.600\nit would provision a tiny little virtual\nmachine that ran a Linux kernel for\n\n34\n00:01:31.600 --> 00:01:34.120\nall of the Docker containers to use.\n\n35\n00:01:34.120 --> 00:01:36.340\nSo if you've ever used\nsomething like Vagrant,\n\n36\n00:01:36.340 --> 00:01:41.030\nyou'll probably find\nsome familiarity in this.\n\n37\n00:01:41.030 --> 00:01:43.410\nSo what is Docker Machine?\n\n38\n00:01:43.410 --> 00:01:47.340\nWell it is a method of\nprovisioning virtual machines.\n\n39\n00:01:47.340 --> 00:01:48.190\nThat's kinda crazy.\n\n40\n00:01:48.190 --> 00:01:52.830\n&gt;&gt; Now, Justin, that's interesting because\nwe did a show called containers, and\n\n41\n00:01:52.830 --> 00:01:57.360\nthat seemed like it was a method for\nprovisioning a virtual machine.\n\n42\n00:01:57.360 --> 00:02:00.160\nIs it the same thing and\nif it's not, how is it different?\n\n43\n00:02:00.160 --> 00:02:04.940\n&gt;&gt; So it's been a long time since we\ntalked about what a container is.\n\n44\n00:02:04.940 --> 00:02:06.470\nLet's back up just a little bit.\n\n45\n00:02:06.470 --> 00:02:10.435\nA container is a very light,\nit's kinda like a virtual machine, but\n\n46\n00:02:10.435 --> 00:02:15.410\nin realistically it's just a file system\nthat shares underlying system processes.\n\n47\n00:02:15.410 --> 00:02:19.610\nSo if you have an Ubuntu server and\nit's spinning up Ubuntu containers\n\n48\n00:02:19.610 --> 00:02:23.530\nI don't have to have multiple copies of\nsome of those underlying system processes,\n\n49\n00:02:23.530 --> 00:02:26.520\nthey are shared between\nthe individual containers.\n\n50\n00:02:26.520 --> 00:02:30.720\nNow that varies greatly from\na true full on virtual machine\n\n51\n00:02:30.720 --> 00:02:34.340\nwhere the virtual machine will\nvirtualize the hardware and\n\n52\n00:02:34.340 --> 00:02:40.120\nspin up an entire new Full blown operating\nsystem for each virtual machine.\n\n53\n00:02:40.120 --> 00:02:45.640\nSo, there is some differences there and\nif you have used something like Vagrant\n\n54\n00:02:45.640 --> 00:02:48.510\nto bring up virtual machines,\nor even VirtualBox,\n\n55\n00:02:48.510 --> 00:02:52.830\nwhich actually is one of the drivers for\nDocker Machine, or even VMware.\n\n56\n00:02:52.830 --> 00:02:55.930\nThen you know sometimes these take\na little while to provision to\n\n57\n00:02:55.930 --> 00:02:58.600\nactually bring up especially\nif you have configuration\n\n58\n00:02:58.600 --> 00:03:01.670\nthat has to be done every time\nwe bring up a virtual machine.\n\n59\n00:03:01.670 --> 00:03:05.300\nWell Docker helps with that because well,\n\n60\n00:03:05.300 --> 00:03:08.970\nonce you have the image, it's already\nready and it just has to, more or less,\n\n61\n00:03:08.970 --> 00:03:14.150\ncreate a set of folders and files that\ndraw off of the underlying system process.\n\n62\n00:03:14.150 --> 00:03:17.464\n&gt;&gt; All right, so now that we know\nthe difference between a container and\n\n63\n00:03:17.464 --> 00:03:18.790\nan actual Docker Machine.\n\n64\n00:03:18.790 --> 00:03:20.790\nWhat can we do with this?\n\n65\n00:03:20.790 --> 00:03:24.437\nHow do we work with it, and\nwhere do we get started with that?\n\n66\n00:03:24.437 --> 00:03:28.193\n&gt;&gt; So in our standard Mac, or excuse me,\nDocker for Mac and Docker for\n\n67\n00:03:28.193 --> 00:03:32.190\nWindows install,\nDocker Machine kinda comes as a package.\n\n68\n00:03:32.190 --> 00:03:37.270\nWhen you install Docker on Linux,\nsuch as Ubuntu, Fedora, CentOS.\n\n69\n00:03:37.270 --> 00:03:41.670\nYou have to go out of your way to install\nDocker Machine as well as Docker Compose,\n\n70\n00:03:41.670 --> 00:03:46.200\nso definitely go back and check that\nepisode about installing on Linux.\n\n71\n00:03:46.200 --> 00:03:49.480\nBecause it's not by default part\nof the Docker engine install.\n\n72\n00:03:51.010 --> 00:03:53.772\nI think the best way to see how\nwe can use Docker Machine though,\n\n73\n00:03:53.772 --> 00:03:55.822\nis well let's just go ahead and\ndive right in.\n\n74\n00:03:55.822 --> 00:03:59.033\nLet's take a look at my screen here and\nall I have is, is command prompt,\n\n75\n00:03:59.033 --> 00:03:59.690\nthat's it.\n\n76\n00:03:59.690 --> 00:04:01.400\n&gt;&gt; Very,\nthat's a nice some screen you got there.\n\n77\n00:04:01.400 --> 00:04:04.544\n&gt;&gt; It is, I tell you what,\nI work hard on this screen, Daniel.\n\n78\n00:04:04.544 --> 00:04:06.524\n&gt;&gt; [LAUGH]\n&gt;&gt; And it makes me happy.\n\n79\n00:04:06.524 --> 00:04:08.859\n&gt;&gt; Just a little arrow and a tilde.\n\n80\n00:04:08.859 --> 00:04:12.380\n&gt;&gt; Yeah, yeah, yeah, so\nI use a custom theme for my shell.\n\n81\n00:04:12.380 --> 00:04:16.648\nI know, I just got real nerdy up in here,\nbut it helps me as a developer,\n\n82\n00:04:16.648 --> 00:04:19.540\nbecause it allows me to have-\n&gt;&gt; A little more real estate?\n\n83\n00:04:19.540 --> 00:04:23.616\n&gt;&gt; Yeah, a little more real estate, and\nalso when I'm using version control and\n\n84\n00:04:23.616 --> 00:04:25.982\nstuff, it has some helper utilities there.\n\n85\n00:04:25.982 --> 00:04:27.938\nSo maybe that's a good, different shell.\n\n86\n00:04:27.938 --> 00:04:29.330\n&gt;&gt; That's right.\n\n87\n00:04:29.330 --> 00:04:31.880\n&gt;&gt; So if I hit docker machine,\nyou should see this printout.\n\n88\n00:04:31.880 --> 00:04:35.374\nAnd the first thing I want to do is well,\nlet's look through these commands.\n\n89\n00:04:35.374 --> 00:04:39.130\nAnd they're probably going to\nlook very familiar to you.\n\n90\n00:04:39.130 --> 00:04:43.538\nSo if I scroll up a little bit and\nI have Docker Machine active, well,\n\n91\n00:04:43.538 --> 00:04:45.440\nI haven't seen that before.\n\n92\n00:04:45.440 --> 00:04:50.420\nConfig, actually there's a Docker, if I'm\nnot mistaken, there's a Docker config.\n\n93\n00:04:50.420 --> 00:04:54.420\nSo I ran docker instead of Docker Machine,\nand if I come up here, no,\n\n94\n00:04:54.420 --> 00:04:57.190\nthere's not a Docker config, I was wrong.\n\n95\n00:04:57.190 --> 00:04:59.480\nI have a hard time keeping-\n&gt;&gt; Keeping them straight [LAUGH].\n\n96\n00:04:59.480 --> 00:05:00.580\n&gt;&gt; All of those.\n\n97\n00:05:00.580 --> 00:05:02.400\nSo it kinda gets in your head,\n\n98\n00:05:02.400 --> 00:05:06.570\nand it can be kind of difficult\nto keep everything straight.\n\n99\n00:05:06.570 --> 00:05:08.440\nMake sure you use documentation and\n\n100\n00:05:08.440 --> 00:05:11.700\nall the tools available to you,\nwell, to keep those things straight.\n\n101\n00:05:12.900 --> 00:05:15.334\nBut I know for\na fact there is a docker create and\n\n102\n00:05:15.334 --> 00:05:17.850\nthere's a docker machine create.\n\n103\n00:05:17.850 --> 00:05:22.840\nNow, that's a similar API, I have a\nsimilar set of commands between Docker and\n\n104\n00:05:22.840 --> 00:05:24.390\nDocker Machine create.\n\n105\n00:05:24.390 --> 00:05:28.540\nDocker create can provision\nnew containers, new volumes.\n\n106\n00:05:28.540 --> 00:05:32.260\nDocker machine provisions\nvirtual machines, and\n\n107\n00:05:32.260 --> 00:05:34.620\nyou can use different drivers with it.\n\n108\n00:05:34.620 --> 00:05:36.100\nNow what do I mean by drivers?\n\n109\n00:05:36.100 --> 00:05:38.790\nI can use VirtualBox,\nwhich we will be using, but\n\n110\n00:05:38.790 --> 00:05:43.100\nI can also use AWS, Digital Ocean, Azure.\n\n111\n00:05:43.100 --> 00:05:47.630\nSo we can use Docker Machine to\nprovision actual Cloud instances\n\n112\n00:05:47.630 --> 00:05:50.960\nthat are set up to, well, run containers.\n\n113\n00:05:50.960 --> 00:05:56.080\nAnd that's kind of the nicety of\nDocker Machine, some of the, why would I\n\n114\n00:05:56.080 --> 00:06:01.650\nuse this instead of vVirtualBox directly,\nor Vagrant, or something like that.\n\n115\n00:06:01.650 --> 00:06:05.880\nWell when I provision using Docker Machine\nit sets up the Docker client,\n\n116\n00:06:05.880 --> 00:06:08.280\nthe Docker engine inside of\neach one of those machines and\n\n117\n00:06:08.280 --> 00:06:11.220\neverything's already installed set up.\n\n118\n00:06:11.220 --> 00:06:14.600\nSSH credentials are all ready\nexchanged it helps now.\n\n119\n00:06:15.670 --> 00:06:17.890\nI'm talking from\na developer's point of view,\n\n120\n00:06:17.890 --> 00:06:21.240\nif you're not a developer you're like\nwell I don't know if I trust that.\n\n121\n00:06:21.240 --> 00:06:24.970\nDefinitely go in and\ndeep dive and take a look.\n\n122\n00:06:24.970 --> 00:06:28.900\nMake sure that you're okay with\nhow this is actually being done.\n\n123\n00:06:30.230 --> 00:06:32.950\nThere's also ENV, which originally,\n\n124\n00:06:32.950 --> 00:06:36.570\nDocker Machine gave you a set\nof environment variables that\n\n125\n00:06:36.570 --> 00:06:41.370\nthe Docker Daemon would look at to know\nwhat machine you were interacting with.\n\n126\n00:06:41.370 --> 00:06:46.050\nI tend now to use Docker ENV anymore,\nbecause there's, I find a little\n\n127\n00:06:46.050 --> 00:06:50.410\nsimpler way to interact with each of\nthe VMs that I create with Docker Machine.\n\n128\n00:06:50.410 --> 00:06:55.050\nWe have inspect, well that's part of\nthe Docker command line utility as well.\n\n129\n00:06:55.050 --> 00:07:00.010\nBut here we're inspecting a machine\ninstead of an actual running container.\n\n130\n00:07:00.010 --> 00:07:04.760\nSo we have these kind of corollary, here's\na container, very light weight, very fast.\n\n131\n00:07:04.760 --> 00:07:07.430\nMachine, it's a virtual machine, but\n\n132\n00:07:07.430 --> 00:07:10.330\nI don't have to remember all\nthese differences, right.\n\n133\n00:07:10.330 --> 00:07:14.080\nI can inspect a machine with inspect,\nI can also look at, well,\n\n134\n00:07:14.080 --> 00:07:15.100\na container with inspect.\n\n135\n00:07:15.100 --> 00:07:20.410\nI get different information, though,\ndepending on what tool I'm using.\n\n136\n00:07:20.410 --> 00:07:26.326\nDocker Machine IP,\nwell that returns the IP of the machine.\n\n137\n00:07:26.326 --> 00:07:28.750\nWell, that's pretty straightforward.\n\n138\n00:07:28.750 --> 00:07:31.310\nkill, docker kill is a command.\n\n139\n00:07:31.310 --> 00:07:34.163\nInstead of killing a container,\nI can kill a machine.\n\n140\n00:07:34.163 --> 00:07:37.520\n&gt;&gt; [LAUGH]\n&gt;&gt; That's kind of an odd phrase, right?\n\n141\n00:07:37.520 --> 00:07:39.685\n&gt;&gt; They should of had had\nthat in Terminator, right?\n\n142\n00:07:39.685 --> 00:07:40.616\n[LAUGH]\n&gt;&gt; Right,\n\n143\n00:07:40.616 --> 00:07:43.750\nman you just type this down there,\nboom, it's done\n\n144\n00:07:43.750 --> 00:07:46.018\n&gt;&gt; I can also list, because you'll see,\n\n145\n00:07:46.018 --> 00:07:49.405\nmaybe not quite in this episode,\nbut in a future episode.\n\n146\n00:07:49.405 --> 00:07:53.984\nWe can create a bunch of these virtual\nmachines especially on Cloud platforms\n\n147\n00:07:53.984 --> 00:07:57.649\nthat allow us to provision 10,\n20, 30, 1,000,\n\n148\n00:07:57.649 --> 00:08:00.193\nit may take a little while for 1,000.\n\n149\n00:08:00.193 --> 00:08:02.934\nInstances, what some\npeople call instances,\n\n150\n00:08:02.934 --> 00:08:07.521\nare actual machines in those platforms,\nand now we have Docker on all of those,\n\n151\n00:08:07.521 --> 00:08:11.430\nand we get into some pretty\ninteresting things with that.\n\n152\n00:08:11.430 --> 00:08:13.094\nAll right, we can reprovision.\n\n153\n00:08:13.094 --> 00:08:17.973\nIf something goes wrong in the set up,\nyour connection cuts out, power goes off,\n\n154\n00:08:17.973 --> 00:08:21.026\nyou can reprovision and\nhave that setup run again.\n\n155\n00:08:21.026 --> 00:08:25.718\nThere are times when I've used\ncloud providers where the TLS certs\n\n156\n00:08:25.718 --> 00:08:29.991\nthat are being exchanged so\nyou can have SSH connectivity and\n\n157\n00:08:29.991 --> 00:08:35.060\nlook at the machine individually,\nwell they fail for some reason.\n\n158\n00:08:35.060 --> 00:08:39.250\nAnd then I lose full connectivity\nto the respective machine.\n\n159\n00:08:39.250 --> 00:08:44.360\nI can rent it, regenerate certs and\nit will only redo that certs\n\n160\n00:08:44.360 --> 00:08:48.200\nexchange that's during\nthe normal provisioning process.\n\n161\n00:08:48.200 --> 00:08:52.840\nI can restart, remove and\nhere's what's interesting, SSH and SCP,\n\n162\n00:08:52.840 --> 00:08:57.430\nI used to be very afraid of these\ntwo tools until I started on my\n\n163\n00:08:58.520 --> 00:09:01.440\ndeveloper journey, so to speak.\n\n164\n00:09:01.440 --> 00:09:03.830\nSSH and SEP have become my friend.\n\n165\n00:09:03.830 --> 00:09:04.780\n&gt;&gt; They are your friend.\n\n166\n00:09:04.780 --> 00:09:09.520\n&gt;&gt; Because I don't have to worry about I\nneed this client, and I have to set it up.\n\n167\n00:09:09.520 --> 00:09:16.140\nAs long as I know how to SSH, I can,\nget into a remote VM, or remote computer.\n\n168\n00:09:16.140 --> 00:09:20.133\nAnd SEP allows me to do some\nfile exchange, folder exchange.\n\n169\n00:09:20.133 --> 00:09:21.940\nI can also stop and start.\n\n170\n00:09:23.040 --> 00:09:28.370\nOr upgrade if Docker comes out\nwith a new Docker engine version.\n\n171\n00:09:28.370 --> 00:09:32.080\nSo we have some differences\nfrom the Docker client but\n\n172\n00:09:32.080 --> 00:09:33.890\nwe also have some similarities.\n\n173\n00:09:33.890 --> 00:09:35.460\nNow, I've done a great deal of talking.\n\n174\n00:09:35.460 --> 00:09:38.460\nI think the best thing to do\nis actually let's provision\n\n175\n00:09:38.460 --> 00:09:40.510\na virtual machine using Docker Machine.\n\n176\n00:09:41.760 --> 00:09:45.327\nAnd as I've said before,\nmaybe this wasn't quite as stated,\n\n177\n00:09:45.327 --> 00:09:49.519\nthis originally existed to help\nthe docker runtime run on different OSs.\n\n178\n00:09:49.519 --> 00:09:52.930\nBecause a machine would provision\nan actual virtual machine running a Linux\n\n179\n00:09:52.930 --> 00:09:56.160\nkernel and then that's where\nthe containers would run on top.\n\n180\n00:09:56.160 --> 00:10:01.800\nSo I'm going to docker machine create -d.\n\n181\n00:10:01.800 --> 00:10:05.480\nNow, actually let's do a dash,\ndash, help here.\n\n182\n00:10:05.480 --> 00:10:08.460\nBefore I go into full explanation.\n\n183\n00:10:08.460 --> 00:10:11.970\nThese are all of the command\nline flags that I can issue\n\n184\n00:10:11.970 --> 00:10:13.660\nwith Docker machine create.\n\n185\n00:10:15.670 --> 00:10:19.470\nI tend to stay very simple on these,\nunless I have a reason not to.\n\n186\n00:10:21.140 --> 00:10:25.200\nThe very basic ones that\nyou need are a driver,\n\n187\n00:10:25.200 --> 00:10:28.610\nwhat provider are you going to\nuse to provision the machine?\n\n188\n00:10:28.610 --> 00:10:30.313\nIs it Digital Ocean, is it AWS?\n\n189\n00:10:30.313 --> 00:10:33.720\nIs it Azure, or is it VirtualBox locally?\n\n190\n00:10:33.720 --> 00:10:36.170\nAnd then I have a bunch of\nother flags that I can set,\n\n191\n00:10:36.170 --> 00:10:39.090\nlike what is the memory for VIRTUALBOX?\n\n192\n00:10:39.090 --> 00:10:40.207\nWhat is the nictime?\n\n193\n00:10:40.207 --> 00:10:43.304\nDoes it have host only dhcp?\n\n194\n00:10:43.304 --> 00:10:45.724\nSome of these things,\nI don't even know what they are,\n\n195\n00:10:45.724 --> 00:10:48.710\nbecause that's not my pervy,\nI'm not necessarily interested.\n\n196\n00:10:48.710 --> 00:10:52.790\nBut you can get really specific\nduring this provisioning process.\n\n197\n00:10:52.790 --> 00:10:54.690\nSo now we're gonna backup and\n\n198\n00:10:54.690 --> 00:10:58.740\nsay docker-machine create -d,\nand I'm gonna say virtualbox.\n\n199\n00:10:58.740 --> 00:11:04.356\nNow if you use the mac Docker for\nMac install, this is kinda already there.\n\n200\n00:11:04.356 --> 00:11:08.540\nIt's behind the scenes as\nwell as Docker for Windows.\n\n201\n00:11:08.540 --> 00:11:11.770\nSo I'm gonna create using Virtualbox,\nand let's just call this,\n\n202\n00:11:11.770 --> 00:11:13.025\nI like to call mine nodes.\n\n203\n00:11:13.025 --> 00:11:15.910\nAnd that's because I use this for\na very particular reason.\n\n204\n00:11:15.910 --> 00:11:17.345\nYou could call this whatever you want to.\n\n205\n00:11:17.345 --> 00:11:18.820\nAnd I'm gonna hit Enter.\n\n206\n00:11:20.100 --> 00:11:24.740\nNow I will forewarn you,\nsometimes this can take a little while.\n\n207\n00:11:24.740 --> 00:11:29.150\nSo it does some checks, it provisions\nthe machine, it generates an SSH key,\n\n208\n00:11:29.150 --> 00:11:32.380\nit actually starts up the machine.\n\n209\n00:11:32.380 --> 00:11:33.940\nIt checks network connectivity,\n\n210\n00:11:33.940 --> 00:11:39.470\nand then it has to wait a great deal\nof the time for the issuance of an IP.\n\n211\n00:11:39.470 --> 00:11:42.200\nSo this is a virtual machine\nrunning on my computer and\n\n212\n00:11:42.200 --> 00:11:45.670\nit's going to be provided an IP and\nthis is where we set.\n\n213\n00:11:45.670 --> 00:11:50.870\nOnce that IP is provisioned,\nthough, it will login, well login,\n\n214\n00:11:50.870 --> 00:11:55.339\nwe're gonna use login in a loose term\nthere, and install the docker engine.\n\n215\n00:11:56.570 --> 00:12:01.450\nAnd now when that machine is fully\nbrought up, when I get into it,\n\n216\n00:12:01.450 --> 00:12:06.550\nit will already have docker installed and\nI can run docker commands from within it.\n\n217\n00:12:06.550 --> 00:12:10.170\nNow, I'm gonna open another\nterminal window and\n\n218\n00:12:10.170 --> 00:12:13.260\nshow you as this is provisioning.\n\n219\n00:12:13.260 --> 00:12:18.430\nIf I type docker machine ls,\nI can actually look at what's going on.\n\n220\n00:12:18.430 --> 00:12:24.080\nSo node zero virtual box it's\nrunning it's been issued an IP but\n\n221\n00:12:24.080 --> 00:12:25.710\nthen it doesn't know about docker.\n\n222\n00:12:25.710 --> 00:12:27.620\nUnable to query docker version.\n\n223\n00:12:27.620 --> 00:12:29.474\nCannot connect to\nthe docker engine endpoint.\n\n224\n00:12:29.474 --> 00:12:33.783\nI've said in previous episodes that\nthe docker daemon what actually runs\n\n225\n00:12:33.783 --> 00:12:35.312\ncontainers is a server and\n\n226\n00:12:35.312 --> 00:12:40.120\nit will have server like endpoints\nalmost like a web application.\n\n227\n00:12:40.120 --> 00:12:42.120\nUntil that's fully installed,\n\n228\n00:12:42.120 --> 00:12:46.620\nit can not find out what version of\nDocker you're running inside the machine.\n\n229\n00:12:46.620 --> 00:12:51.820\nIt can't find is it available,\nis it running containers, what's going on?\n\n230\n00:12:51.820 --> 00:12:53.330\nIt can't see anything about it.\n\n231\n00:12:53.330 --> 00:12:58.284\nAnd if we hop back over here,\nwe're good to go I'm gonna, just for\n\n232\n00:12:58.284 --> 00:13:03.338\na moment, run Docker Machine LS and\nnotice those errors went away.\n\n233\n00:13:03.338 --> 00:13:08.026\nAnd that's because now\nthe Docker Engine version 17.03.1\n\n234\n00:13:08.026 --> 00:13:12.890\ncommunity edition is up and\nrunning inside of this virtual box node.\n\n235\n00:13:13.900 --> 00:13:17.980\nOkay, well it has an IP address so,\n\n236\n00:13:17.980 --> 00:13:22.880\nI can treat it just as some remote\ninstance and there are no errors.\n\n237\n00:13:22.880 --> 00:13:26.840\nWell, that's good and just because\nI know what's gonna happen next.\n\n238\n00:13:26.840 --> 00:13:34.840\nI'm gonna go ahead and say docker-machine\ncreate -d and I'm gonna use virtualbox.\n\n239\n00:13:34.840 --> 00:13:38.375\nNow, I could use dash dash\ndriver here virtualbox.\n\n240\n00:13:38.375 --> 00:13:40.723\nAnd, Daniel,\nI'm gonna let you name this one,\n\n241\n00:13:40.723 --> 00:13:42.744\nwhat's a good name on this one, Daniel?\n\n242\n00:13:42.744 --> 00:13:46.982\n&gt;&gt; Let's call this node2.\n\n243\n00:13:46.982 --> 00:13:47.984\n&gt;&gt; Woo.\n\n244\n00:13:47.984 --> 00:13:48.569\n&gt;&gt; I blew your mind there, didn't I?\n\n245\n00:13:48.569 --> 00:13:50.655\n&gt;&gt; Yeah, I was unprepared for that naming.\n\n246\n00:13:50.655 --> 00:13:52.270\n&gt;&gt; [LAUGH] Woo.\n\n247\n00:13:52.270 --> 00:13:54.980\nSo I'm gonna let this one\nrun in the background And\n\n248\n00:13:54.980 --> 00:13:57.700\na lot of times what I'll\ndo when I need to provision\n\n249\n00:13:57.700 --> 00:14:01.900\nseveral machines to try something out,\nlike building a distributed system.\n\n250\n00:14:02.960 --> 00:14:06.634\nThen I'll write a batch script that\ndoes this provisioning for me,\n\n251\n00:14:06.634 --> 00:14:08.255\njust because well I'm lazy.\n\n252\n00:14:08.255 --> 00:14:09.450\nI'm honest.\n\n253\n00:14:09.450 --> 00:14:12.890\nI'm just lazy and then I'll let it\nrun while I'm doing something else.\n\n254\n00:14:12.890 --> 00:14:15.468\n&gt;&gt; Can we use docker-compose\nto fire all this off.\n\n255\n00:14:15.468 --> 00:14:19.327\n&gt;&gt; So that's a great question, and\nmachine is actually provisioning for\n\n256\n00:14:19.327 --> 00:14:23.895\nthe machines docker-compose will come back\ninto the mix for interacting with these\n\n257\n00:14:23.895 --> 00:14:27.185\nmachines using an additional set of tools\n&gt;&gt; But for now,\n\n258\n00:14:27.185 --> 00:14:30.730\nprovisioning of\nthe machines are just this.\n\n259\n00:14:30.730 --> 00:14:34.790\nAnd this is a great way to set\nup a local cluster, right?\n\n260\n00:14:34.790 --> 00:14:38.320\nIf you wanted to simulate\nhaving multiple compute nodes.\n\n261\n00:14:38.320 --> 00:14:42.100\nLike you see two instances, or digital\nocean droplets, or something like that.\n\n262\n00:14:42.100 --> 00:14:46.350\nI can simulate that locally without\nhaving to have Internet connectivity\n\n263\n00:14:46.350 --> 00:14:50.540\nother than Docker needs Internet\nconnectivity for the actual images.\n\n264\n00:14:50.540 --> 00:14:53.050\nSo that's kind of a caveat there.\n\n265\n00:14:53.050 --> 00:14:57.610\nSo, after this has run,\nit'll say, to see how to\n\n266\n00:14:57.610 --> 00:15:00.856\nconnect to your Docker Client to Docker\nEngine running on the virtual machine.\n\n267\n00:15:00.856 --> 00:15:04.340\nRun: docker-machine emv node-0.\n\n268\n00:15:04.340 --> 00:15:06.910\nThese machines now go by their name.\n\n269\n00:15:06.910 --> 00:15:10.692\nSo, I'm actually gonna\nrun that command and.\n\n270\n00:15:10.692 --> 00:15:14.053\nAnd I told you I don't typically\nused this of great deal anymore but\n\n271\n00:15:14.053 --> 00:15:17.666\nI think it's important for you to see\nthis because it still may crop up.\n\n272\n00:15:17.666 --> 00:15:20.582\nEspecially if you have\nto run docker toolbox or\n\n273\n00:15:20.582 --> 00:15:24.460\nyou have to be required to\nuse older versions of this.\n\n274\n00:15:24.460 --> 00:15:29.196\nSo it tells you,\nit gives you all of these export commands,\n\n275\n00:15:29.196 --> 00:15:32.912\nwhich are setting environmental variables.\n\n276\n00:15:32.912 --> 00:15:37.369\nAnd there's a last one, but\nthen it says, run this command,\n\n277\n00:15:37.369 --> 00:15:40.650\neval $(docker-machine emv node-0).\n\n278\n00:15:40.650 --> 00:15:44.839\nThat is going to set\nthe environmental variables locally.\n\n279\n00:15:46.240 --> 00:15:49.520\nAnd by doing so,\nthe virtual machine Docker, so\n\n280\n00:15:49.520 --> 00:15:53.600\nthe actual Docker running inside\nof node zero will be what you\n\n281\n00:15:53.600 --> 00:15:57.689\ninteract with when you use\nthe Docker command line utility.\n\n282\n00:15:57.689 --> 00:15:59.422\nThe caveat to that is,\n\n283\n00:15:59.422 --> 00:16:04.083\nif you forget to change back To\nyour standard Docker daemon.\n\n284\n00:16:04.083 --> 00:16:06.480\nThings will start to break and\nit'll act weird.\n\n285\n00:16:06.480 --> 00:16:09.460\nAnd if the machine goes down or\nyou delete it because you're like,\n\n286\n00:16:09.460 --> 00:16:13.050\nI don't need this anymore, then Docker\nkinda breaks and you have to go searching.\n\n287\n00:16:13.050 --> 00:16:15.430\nSo I tend not to use this.\n\n288\n00:16:15.430 --> 00:16:18.220\nThere may be use cases for\nyou for this, but\n\n289\n00:16:18.220 --> 00:16:22.830\nI have another way that, well,\nI interact with these machines.\n\n290\n00:16:22.830 --> 00:16:28.184\nSo I wanna to clear here and\nI'm gonna say docker-machine ssh, and\n\n291\n00:16:28.184 --> 00:16:34.110\nI'm gonna say node-0 ssh,\ninto a named provider.\n\n292\n00:16:34.110 --> 00:16:37.870\nAnd well, guess what,\nI'm inside of a virtual machine now.\n\n293\n00:16:37.870 --> 00:16:40.270\n&gt;&gt; Hey, it's the funny whale guy [LAUGH]\n&gt;&gt; Yeah, it's the funny whale,\n\n294\n00:16:40.270 --> 00:16:41.330\nit's the Docker whale.\n\n295\n00:16:41.330 --> 00:16:46.750\nAnd this actually runs the Boot2Docker\nimage, which is how they got Docker to run\n\n296\n00:16:46.750 --> 00:16:51.270\non Mac OS, and Windows,\nand previous versions.\n\n297\n00:16:51.270 --> 00:16:54.720\nAnd if you don't have virtualization,\nsuch as Hyper-V and\n\n298\n00:16:54.720 --> 00:16:57.870\nthings available,\nthen you still have to use Docker Toolbox,\n\n299\n00:16:57.870 --> 00:17:01.080\nwhich we'll probably use this,\nunless something's changed.\n\n300\n00:17:01.080 --> 00:17:02.250\nDon't quote me on this.\n\n301\n00:17:02.250 --> 00:17:06.100\nSometimes things change but\nthis is how it worked.\n\n302\n00:17:06.100 --> 00:17:10.120\nI could mess this entire machine up,\ntype exit, and\n\n303\n00:17:10.120 --> 00:17:12.730\nit has not affected my machine whatsoever.\n\n304\n00:17:12.730 --> 00:17:16.830\nSo this may be a good option for you if,\nwell, you wanna try something and\n\n305\n00:17:16.830 --> 00:17:20.440\nyou're like, I don't know,\nthis might break some things.\n\n306\n00:17:20.440 --> 00:17:23.760\nWell, just use Docker Machine-ing,\ncreate a virtual machine, go in,\n\n307\n00:17:23.760 --> 00:17:25.450\ndo some container stuff.\n\n308\n00:17:25.450 --> 00:17:30.210\nAnd then if it breaks, well,\nabandon ship and start over.\n\n309\n00:17:30.210 --> 00:17:35.730\nSo now, what's very interesting is,\nI've got a log here inside of this.\n\n310\n00:17:35.730 --> 00:17:38.580\nI'm still inside of node-0.\n\n311\n00:17:38.580 --> 00:17:41.088\nI'm under the docker username, okay?\n\n312\n00:17:41.088 --> 00:17:45.380\nSo I SSH-ed in as docker, and\n\n313\n00:17:45.380 --> 00:17:49.910\nit tells me what node I'm on, based on\nDocker Machine's naming convention.\n\n314\n00:17:49.910 --> 00:17:55.105\nOkay, if I type docker,\nI have the full Docker runtime.\n\n315\n00:17:56.240 --> 00:18:01.660\nI do not necessarily have Docker Compose\nor Docker Machine inside of here.\n\n316\n00:18:01.660 --> 00:18:03.000\nThat would be kind of weird.\n\n317\n00:18:03.000 --> 00:18:05.265\nOnly use Docker Machine to create machine-\n&gt;&gt; Make a Docker Machine,\n\n318\n00:18:05.265 --> 00:18:05.902\nyeah [LAUGH]\n&gt;&gt; Yeah,\n\n319\n00:18:05.902 --> 00:18:10.330\nI wanna make machines inside of\nmachines inside of machines, why?\n\n320\n00:18:10.330 --> 00:18:11.330\nI don't know.\n\n321\n00:18:11.330 --> 00:18:13.700\nSo, they're not necessarily always there,\nbut\n\n322\n00:18:13.700 --> 00:18:15.820\nI do have the standard Docker installed.\n\n323\n00:18:15.820 --> 00:18:18.230\nSo, I can run a container.\n\n324\n00:18:18.230 --> 00:18:22.955\nAnd to show you, I can say docker run,\n\n325\n00:18:22.955 --> 00:18:27.092\nand let's say -d -it busybox,\n\n326\n00:18:27.092 --> 00:18:30.980\nand I'm gonna say /bin/sh.\n\n327\n00:18:30.980 --> 00:18:32.450\nHere's something to remember.\n\n328\n00:18:32.450 --> 00:18:35.980\nWhen you provision a new Docker Machine,\nit's a brand new Docker install.\n\n329\n00:18:35.980 --> 00:18:37.730\nThe images are not there.\n\n330\n00:18:37.730 --> 00:18:41.010\nSo if you're like, I have this image on\nmy computer, I can just create a machine.\n\n331\n00:18:41.010 --> 00:18:42.910\nIt actually has to pull those images.\n\n332\n00:18:42.910 --> 00:18:47.160\nSo you'll have to be running from\na registry or have a Docker Hub account.\n\n333\n00:18:47.160 --> 00:18:49.210\nSo be wary of that.\n\n334\n00:18:49.210 --> 00:18:54.553\nSo if I docker ps here, well,\nthere's busybox, it's still running,\n\n335\n00:18:54.553 --> 00:18:59.180\nrelaxed_ramen, that's\na very interesting name.\n\n336\n00:18:59.180 --> 00:19:01.160\nBut now, I'm just gonna exit, and\n\n337\n00:19:01.160 --> 00:19:05.910\nnotice that my cursor changed,\nI'm back in my own computer.\n\n338\n00:19:05.910 --> 00:19:09.670\nIf I type docker ps, well,\nI have some containers running,\n\n339\n00:19:09.670 --> 00:19:14.660\nbut neither one of those are,\nwell, the busybox container.\n\n340\n00:19:14.660 --> 00:19:18.370\nAnd that's because it's running inside of\nthe Docker Machine that I provisioned.\n\n341\n00:19:19.830 --> 00:19:25.460\nSo if I go docker-machine ssh node-0,\n\n342\n00:19:25.460 --> 00:19:29.090\nand I get back, and I say docker ps, well,\n\n343\n00:19:29.090 --> 00:19:35.270\nthere's busybox running inside of,\nwell, a Docker Machine, machine.\n\n344\n00:19:35.270 --> 00:19:38.450\nAnd now, I can kind of sequester out.\n\n345\n00:19:38.450 --> 00:19:43.671\nAnd I can even do crazy stuff\nlike docker-machine run\n\n346\n00:19:43.671 --> 00:19:49.100\n-d -p 80:80 nginx,\n\n347\n00:19:49.100 --> 00:19:53.400\nand I know this machine is,\nor this image is small.\n\n348\n00:19:53.400 --> 00:19:55.870\nSo I'm gonna say nginx:alpine.\n\n349\n00:19:55.870 --> 00:19:58.640\nAnd not docker-machine run,\nI meant to say docker, see-\n\n350\n00:19:58.640 --> 00:19:59.330\n&gt;&gt; [LAUGH]\n\n351\n00:19:59.330 --> 00:20:02.100\n&gt;&gt; I have trouble keeping them straight.\n\n352\n00:20:02.100 --> 00:20:03.030\n&gt;&gt; It gets twisty.\n\n353\n00:20:03.030 --> 00:20:05.950\n&gt;&gt; It does, it does, so, can't find it.\n\n354\n00:20:05.950 --> 00:20:11.220\nBut Alpine Linux is typically very small\nimage size, so it can pull those quickly.\n\n355\n00:20:11.220 --> 00:20:12.510\nSo when I'm experimenting,\n\n356\n00:20:12.510 --> 00:20:15.750\nsometimes I'll use the Alpine\ndistribution, if it's available.\n\n357\n00:20:15.750 --> 00:20:20.040\nAnd now if I docker ps, well,\nI have nginx, and busybox.\n\n358\n00:20:21.390 --> 00:20:26.088\nNow normally when we run this in Docker,\nthis would be localhost port 80.\n\n359\n00:20:26.088 --> 00:20:33.180\nHowever, I'm gonna exit out and\nsay docker-machine ls.\n\n360\n00:20:33.180 --> 00:20:36.770\nAnd it looks like our other machine that's\nbeen provisioning in the back is up and\n\n361\n00:20:36.770 --> 00:20:38.750\nrunning node-2.\n\n362\n00:20:38.750 --> 00:20:40.380\nBut I have an actual IP.\n\n363\n00:20:41.670 --> 00:20:47.210\nThis is binding to that IP, so if I wanna\ngo to nginx, well, let's go check it out.\n\n364\n00:20:47.210 --> 00:20:53.300\nIf I go to localhost just to prove\nthat I'm not saying crazy stuff,\n\n365\n00:20:53.300 --> 00:20:54.950\nsite cannot be reached, okay.\n\n366\n00:20:56.540 --> 00:20:59.490\nBut if I grab this IP which is for node-0,\n\n367\n00:20:59.490 --> 00:21:04.770\nwhich is where I started\nthe nginx:alpine container running.\n\n368\n00:21:04.770 --> 00:21:09.600\nAnd I go, instead, to that IP,\nyou'll notice I have nginx.\n\n369\n00:21:09.600 --> 00:21:12.780\nSo now I have a virtual machine that's\nrunning a web server container.\n\n370\n00:21:12.780 --> 00:21:16.290\nAnd maybe there's a bunch of containers\ndoing a bunch of different things\n\n371\n00:21:16.290 --> 00:21:17.620\non that individual VM.\n\n372\n00:21:17.620 --> 00:21:21.870\nAnd if I need to shut it down, I can,\nif I need to bring it back up, I can.\n\n373\n00:21:21.870 --> 00:21:24.879\nAnd it's a way of kind of sequestering\nout your container workflows,\n\n374\n00:21:26.590 --> 00:21:27.570\nmaybe you don't need that.\n\n375\n00:21:27.570 --> 00:21:29.070\nMaybe you're doing\neverything in the cloud.\n\n376\n00:21:29.070 --> 00:21:31.830\nMaybe you have some other\nway of deploying this.\n\n377\n00:21:31.830 --> 00:21:36.863\nBut Docker Machine is great for trying\nthings out, kind of provisioning these.\n\n378\n00:21:36.863 --> 00:21:43.394\nWhat happens now, though,\nif I say docker-machine, well, rm node-0?\n\n379\n00:21:43.394 --> 00:21:45.430\nThe machine's running.\n\n380\n00:21:45.430 --> 00:21:46.510\nThere's containers running in it.\n\n381\n00:21:47.750 --> 00:21:49.180\nAre you sure?\n\n382\n00:21:49.180 --> 00:21:50.870\nYep, I sure am.\n\n383\n00:21:50.870 --> 00:21:53.625\nIt's removed.\nWhat does that mean about nginx?\n\n384\n00:21:55.110 --> 00:22:01.050\nWell, if you can't see it, right there\nis the little spinning wheel of-\n\n385\n00:22:01.050 --> 00:22:02.120\n&gt;&gt; It's trying.\n\n386\n00:22:02.120 --> 00:22:05.800\n&gt;&gt; It is trying real hard,\nbut it's gonna timeout.\n\n387\n00:22:05.800 --> 00:22:06.850\nAnd why is that?\n\n388\n00:22:06.850 --> 00:22:08.150\n&gt;&gt; Because it doesn't exist any longer.\n\n389\n00:22:08.150 --> 00:22:10.680\n&gt;&gt; Because it does not exist anymore, and\n\n390\n00:22:10.680 --> 00:22:14.940\nif I type docker-machine ls,\nI only have node-2 available to me.\n\n391\n00:22:16.740 --> 00:22:18.648\nThis is pretty crazy.\n\n392\n00:22:18.648 --> 00:22:20.990\nThere's one last thing I\ndo wanna show you though,\n\n393\n00:22:20.990 --> 00:22:23.879\nand I'm gonna hop into\na different directory.\n\n394\n00:22:25.390 --> 00:22:30.120\nThere's times where I need, say, I wanna\nrun a server on Docker Machine, right?\n\n395\n00:22:30.120 --> 00:22:33.175\nAnd NGINX, and\nI wanna run some other web applications.\n\n396\n00:22:33.175 --> 00:22:35.800\nDo I need files and folders in there?\n\n397\n00:22:35.800 --> 00:22:40.500\nWell, Daniel, can you guess which one\nof those commands that we saw earlier?\n\n398\n00:22:40.500 --> 00:22:46.150\nWe got SSH, we got remove What\ndo you think I'm gonna use?\n\n399\n00:22:46.150 --> 00:22:50.750\n&gt;&gt; Well, I didn't see mkdir, or touch,\n\n400\n00:22:50.750 --> 00:22:54.500\nor Nano, or things like that\nto try to create a file, but\n\n401\n00:22:54.500 --> 00:22:58.090\nyou did have the ability\nto copy a file using scp.\n\n402\n00:22:58.090 --> 00:22:59.716\nSo maybe you copy files over?\n\n403\n00:22:59.716 --> 00:23:02.820\n&gt;&gt; You know, Daniel, you make me happy.\n\n404\n00:23:02.820 --> 00:23:05.970\nYou're learning things,\nyou're moving a lot.\n\n405\n00:23:05.970 --> 00:23:07.810\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a rush, it's a rush.\n\n406\n00:23:07.810 --> 00:23:12.670\nSo, anything that you're doing inside,\nif you're on Linux,\n\n407\n00:23:12.670 --> 00:23:18.210\nlike touch, vi, I think Nano is there,\nwe'll check out when we get there.\n\n408\n00:23:18.210 --> 00:23:20.260\nThose are going to be available\nwithin the machine, but\n\n409\n00:23:20.260 --> 00:23:23.114\nyou don't wanna do all your\ndevelopment inside a machine.\n\n410\n00:23:23.114 --> 00:23:26.540\n&gt;&gt; You wanna do development locally,\nand then maybe move those files over.\n\n411\n00:23:26.540 --> 00:23:29.770\n&gt;&gt; Right, because it's a server now, so\nif you're running some sort of web server,\n\n412\n00:23:29.770 --> 00:23:31.867\nyou just wanna develop the web page and\n\n413\n00:23:31.867 --> 00:23:33.860\nthen move it to your server\nonce it's developed.\n\n414\n00:23:33.860 --> 00:23:37.040\n&gt;&gt; Right, so, we don't want,\nI mean, you can, right,\n\n415\n00:23:37.040 --> 00:23:41.462\nI could set up a wonderful VM install,\nwith all of my plugins and everything.\n\n416\n00:23:41.462 --> 00:23:45.180\nBut then what happens if\nyour machine goes away?\n\n417\n00:23:45.180 --> 00:23:45.710\nNo.\n&gt;&gt; Yeah.\n\n418\n00:23:45.710 --> 00:23:48.518\n&gt;&gt; So that's a lot of work,\nI would tend to develop locally, and\n\n419\n00:23:48.518 --> 00:23:49.815\nthen move those files over.\n\n420\n00:23:49.815 --> 00:23:53.863\nSo let's just say touch,\n\n421\n00:23:53.863 --> 00:23:57.730\nand hello.txt, okay.\n\n422\n00:23:59.050 --> 00:24:01.130\nAnd I'm gonna put something\nin there just for fun.\n\n423\n00:24:01.130 --> 00:24:04.120\nI could have just went directly\ninto vim and created this.\n\n424\n00:24:04.120 --> 00:24:08.640\nI know some of you are going,\njust open vim with the file name.\n\n425\n00:24:08.640 --> 00:24:10.000\n&gt;&gt; That's too easy, drill sergeant.\n\n426\n00:24:10.000 --> 00:24:10.540\n&gt;&gt; I know, I know.\n\n427\n00:24:10.540 --> 00:24:15.690\n&gt;&gt; [LAUGH]\n&gt;&gt; Hello from docker-machine.\n\n428\n00:24:15.690 --> 00:24:18.935\nI don't even know why I put quotes around\nthat, this is just a plain text file.\n\n429\n00:24:18.935 --> 00:24:21.607\nIt's a habit from dev.\n\n430\n00:24:21.607 --> 00:24:23.561\n&gt;&gt; Yeah, yeah, put quotes around strings,\nthat's important.\n\n431\n00:24:23.561 --> 00:24:24.270\n&gt;&gt; It's a string, yep.\n\n432\n00:24:24.270 --> 00:24:29.540\n&gt;&gt; So now if I look at docker-machine ls,\nI have node-2 running.\n\n433\n00:24:29.540 --> 00:24:34.362\nI want to copy hello.txt\ninto the node-2 VM, right?\n\n434\n00:24:34.362 --> 00:24:38.980\nIf you've ever used SCP normally, well,\n\n435\n00:24:38.980 --> 00:24:43.242\nyou could get this done, all right?\n\n436\n00:24:43.242 --> 00:24:46.874\nI need to SCP into a remote server,\nI can just move those files.\n\n437\n00:24:46.874 --> 00:24:51.730\nOkay, I'm gonna say docker-machine,\nthe name, or,\n\n438\n00:24:51.730 --> 00:24:57.291\nexcuse me, yeah, scp, and\nthen the file, the name of the file,\n\n439\n00:24:57.291 --> 00:25:01.600\nand then the machine and\nwhere it goes, okay.\n\n440\n00:25:01.600 --> 00:25:02.366\nSo I wanna go node-2.\n\n441\n00:25:02.366 --> 00:25:07.900\nAnd, well,\nI'm just gonna keep it as hello.txt.\n\n442\n00:25:07.900 --> 00:25:12.940\nNow, if you're familiar with SCP,\na lot of those formats still work.\n\n443\n00:25:12.940 --> 00:25:14.344\nYou can copy folders and files.\n\n444\n00:25:14.344 --> 00:25:16.496\nThis is a light touch of this.\n\n445\n00:25:16.496 --> 00:25:22.460\nAnd it even pretends to upload, because,\nwell, it kind of is doing that.\n\n446\n00:25:22.460 --> 00:25:29.188\nAnd now if I go into\ndocker-machine ssh node-2,\n\n447\n00:25:29.188 --> 00:25:33.290\nif I ls, there is hello.txt.\n\n448\n00:25:33.290 --> 00:25:37.670\nAnd if I cat hello.txt it\nhas the text in there.\n\n449\n00:25:37.670 --> 00:25:39.082\nSo now I can SCP.\n\n450\n00:25:39.082 --> 00:25:42.900\nThat is that is a relief to me,\nit makes me happy.\n\n451\n00:25:42.900 --> 00:25:45.786\nI'm going to exit back out.\n\n452\n00:25:45.786 --> 00:25:49.630\nAnd what's amazing is, well, I just\nwant to make sure it got there, right.\n\n453\n00:25:49.630 --> 00:25:53.430\nI don't want to ssh and wait for that\nbecause even though this is working very\n\n454\n00:25:53.430 --> 00:25:58.740\nquickly locally if you use\nDigital Ocean or Amazon or\n\n455\n00:25:58.740 --> 00:26:04.320\nAzure, sometimes that connection\ntakes a while to negotiate between\n\n456\n00:26:04.320 --> 00:26:09.150\nthe remote virtual instance or the remote\ninstance and the Docker machine client.\n\n457\n00:26:10.210 --> 00:26:12.870\nOkay, well,\nwhat's something that's a little nicer?\n\n458\n00:26:15.310 --> 00:26:19.727\nThis SSH command,\nif I give it just a name, I will SSH.\n\n459\n00:26:19.727 --> 00:26:24.752\nIf I give it a name and a command or\na series, like a Bash command,\n\n460\n00:26:24.752 --> 00:26:31.250\nafterwards it will remotely run that\ncommand and pipe the output back to me.\n\n461\n00:26:31.250 --> 00:26:37.180\nAnd now I can see that\nhello.txt is in fact in node-2.\n\n462\n00:26:37.180 --> 00:26:38.910\nThat is incredibly handy.\n\n463\n00:26:38.910 --> 00:26:42.380\nAnd you'll see that this\ncomes into play for\n\n464\n00:26:42.380 --> 00:26:45.430\nsome of the newer tools in\nDocker as we continue on.\n\n465\n00:26:45.430 --> 00:26:50.250\nBut I think this is a pretty good place\nto leave it be for Docker Machine.\n\n466\n00:26:50.250 --> 00:26:50.820\n&gt;&gt; All right.\n\n467\n00:26:50.820 --> 00:26:52.780\nWell, Justin, a lot of cool stuff, right?\n\n468\n00:26:52.780 --> 00:26:56.360\nThis is the meat and potatoes, we want\nto provision virtual machines inside of\n\n469\n00:26:56.360 --> 00:27:00.910\ndoctor, true, doc, doctor, Docker,\ntrue virtual machines, right?\n\n470\n00:27:00.910 --> 00:27:03.370\nNot just the containers\nthat we looked at before.\n\n471\n00:27:03.370 --> 00:27:06.633\nWhile powerful and useful,\nthis is definitely its own thing.\n\n472\n00:27:06.633 --> 00:27:09.104\nAnd there are times when you're\ngonna wanna do this very thing,\n\n473\n00:27:09.104 --> 00:27:11.020\nyou're spinning up a server kinda thing.\n\n474\n00:27:11.020 --> 00:27:12.610\nAnd it actually needs to exist so\n\n475\n00:27:12.610 --> 00:27:16.000\nthat you can mess around with it,\nmanipulate it to your ends.\n\n476\n00:27:16.000 --> 00:27:19.080\nJustin, you've done a great job of showing\nus how to do that, we appreciate it.\n\n477\n00:27:19.080 --> 00:27:23.190\nBut like you said, looking like it's\nthat time, our show comes to an end.\n\n478\n00:27:23.190 --> 00:27:24.910\nWe do appreciate your viewership though.\n\n479\n00:27:24.910 --> 00:27:26.680\nJoin us back for more Docker later.\n\n480\n00:27:26.680 --> 00:27:28.130\nBut for this one,\nwe're gonna go ahead and sign off.\n\n481\n00:27:28.130 --> 00:27:30.680\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n482\n00:27:30.680 --> 00:27:31.717\n&gt;&gt; And I'm Justin Dennison.\n\n483\n00:27:31.717 --> 00:27:32.480\n&gt;&gt; And we'll see you next time.\n\n484\n00:27:32.480 --> 00:27:39.870\n[MUSIC]\n\n485\n00:27:39.870 --> 00:27:42.544\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "212911881"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to provision virtual machines using the cloud-service provider, Digital Ocean. Here you will see how to connect Docker to Digital Ocean so that you can install, connect, and configure them just as you would in a local environment.",
          "length": "1402",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-2-using_docker_machine_with_digital_ocean-040517.00_23_07_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-2-using_docker_machine_with_digital_ocean-040517.00_23_07_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-13-2-using_docker_machine_with_digital_ocean-040517.00_23_07_09.Still001-sm.jpg",
          "title": "Using Docker Machine with Digital Ocean",
          "transcript": "WEBVTT\n\n1\n00:00:00.140 --> 00:00:01.684\nWelcome to ITPROTV, I am your host.\n\n2\n00:00:01.684 --> 00:00:08.006\n[CROSSTALK]\n\n3\n00:00:08.006 --> 00:00:12.417\n&gt;&gt; You're watching ITPROTV\n\n4\n00:00:12.417 --> 00:00:14.340\n&gt;&gt; All right greetings everyone and\n\n5\n00:00:14.340 --> 00:00:17.025\nwelcome to another great\nepisode of ITPROTV.\n\n6\n00:00:17.025 --> 00:00:18.533\nI am your host Daniel Lowrie and\n\n7\n00:00:18.533 --> 00:00:22.020\nin today's episode we are back with\nmore of our intro to Docker series.\n\n8\n00:00:22.020 --> 00:00:25.035\nAnd of course joining us yet\nagain in our fair studio,\n\n9\n00:00:25.035 --> 00:00:27.112\nour good friend Mr Justin Dennison.\n\n10\n00:00:27.112 --> 00:00:28.550\nJustin we're glad to have you back, man.\n\n11\n00:00:28.550 --> 00:00:29.180\nHow's it going today?\n\n12\n00:00:29.180 --> 00:00:32.110\n&gt;&gt; I am glad to be back,\nand I am doing wonderfully.\n\n13\n00:00:32.110 --> 00:00:32.970\nHow are you, Daniel?\n\n14\n00:00:32.970 --> 00:00:36.570\n&gt;&gt; Man, it's like rainbows and\nsunshine in my entire life.\n\n15\n00:00:36.570 --> 00:00:40.240\n&gt;&gt; Rainbows and\nunicorns sprinkling the magic down.\n\n16\n00:00:40.240 --> 00:00:42.131\n&gt;&gt; Side note, they taste delicious.\n\n17\n00:00:42.131 --> 00:00:43.304\n&gt;&gt; Okay, rainbows or unicorns?\n\n18\n00:00:43.304 --> 00:00:45.747\n&gt;&gt; Unicorns [LAUGH].\n\n19\n00:00:45.747 --> 00:00:46.503\n&gt;&gt; Is that why there's none of them left?\n\n20\n00:00:46.503 --> 00:00:47.976\n&gt;&gt; You can buy some on Amazon, by the way.\n\n21\n00:00:47.976 --> 00:00:48.574\n&gt;&gt; Can you?\n&gt;&gt; Yeah.\n\n22\n00:00:48.574 --> 00:00:49.913\n&gt;&gt; Are they like Peeps?\n\n23\n00:00:49.913 --> 00:00:50.499\n&gt;&gt; No.\n\n24\n00:00:50.499 --> 00:00:51.823\n&gt;&gt; Okay.\n&gt;&gt; [LAUGH]\n\n25\n00:00:51.823 --> 00:00:54.175\n&gt;&gt; So, now that we've had that fun.\n\n26\n00:00:54.175 --> 00:00:56.507\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's get back to the topic at hand and\n\n27\n00:00:56.507 --> 00:00:57.396\nthat is Docker.\n\n28\n00:00:57.396 --> 00:01:01.727\nSo we've been looking at Docker Compose\nand we saw Docker Machine.\n\n29\n00:01:01.727 --> 00:01:06.932\nWell, locally but it's, you're like,\nwhy would I need that, right?\n\n30\n00:01:06.932 --> 00:01:11.159\nThat's nice, but I'm not gonna spin\nup 30 VMs on my local machine.\n\n31\n00:01:11.159 --> 00:01:14.975\nLet's say I have some kind of data\nscience pipeline that has all\n\n32\n00:01:14.975 --> 00:01:17.855\nthese compute resources that I need to,\nwell,\n\n33\n00:01:17.855 --> 00:01:20.959\nput through applications\nthat are in containers.\n\n34\n00:01:20.959 --> 00:01:25.750\nBut I want to have all of\nthis wonderful goodness.\n\n35\n00:01:25.750 --> 00:01:27.560\nWell, but\nI don't want it on my local machine,\n\n36\n00:01:27.560 --> 00:01:29.600\nI want it in maybe a cloud provider,\nright.\n\n37\n00:01:29.600 --> 00:01:31.380\nSo as a developer I'm,\n\n38\n00:01:31.380 --> 00:01:34.510\nwell if I haven't said it before,\nI tend to be a little bit lazy.\n\n39\n00:01:34.510 --> 00:01:37.280\nI look for\nthe easiest path during prototyping and\n\n40\n00:01:37.280 --> 00:01:40.110\nthen I worry about locking things down,\nsecuring things.\n\n41\n00:01:40.110 --> 00:01:42.600\nAnd making things a little bit more robust\n\n42\n00:01:42.600 --> 00:01:44.809\nafter I get a good idea\nof how things work.\n\n43\n00:01:46.040 --> 00:01:50.460\nAnd I have found a wonderful service\nthat allows me to play in the cloud room\n\n44\n00:01:50.460 --> 00:01:55.830\nwithout some of the more technical\ndetails of say AWS or Azure.\n\n45\n00:01:55.830 --> 00:01:58.680\nThat's a wonderful services,\nthat's not to say that they are.\n\n46\n00:01:58.680 --> 00:02:02.570\nBut sometimes I just wanna do\nsomething quickly and try it out.\n\n47\n00:02:02.570 --> 00:02:05.510\nAnd Docker Machine actually\nprovides us the ability to\n\n48\n00:02:05.510 --> 00:02:09.580\nprovision on cloud providers\nin various capacities.\n\n49\n00:02:09.580 --> 00:02:13.405\nActually let's take a look at some of\nthe Docker Machine documentation here.\n\n50\n00:02:13.405 --> 00:02:17.011\nThat's really hard to say,\nDocker Machine documentation.\n\n51\n00:02:17.011 --> 00:02:17.997\n&gt;&gt; The Docker docs.\n\n52\n00:02:17.997 --> 00:02:21.142\n&gt;&gt; The Docker docs, so if I go in here and\n\n53\n00:02:21.142 --> 00:02:26.490\nI look up docs.docker.com/machine,\nokay well.\n\n54\n00:02:26.490 --> 00:02:30.580\nWe've actually already seen what would\nhappen on a local system using VirtualBox.\n\n55\n00:02:30.580 --> 00:02:32.920\nWe've installed that's\nin previous episodes.\n\n56\n00:02:32.920 --> 00:02:36.100\nBut install multiple machines\non your cloud provider.\n\n57\n00:02:36.100 --> 00:02:38.460\nWell, that's, that's intriguing to me.\n\n58\n00:02:38.460 --> 00:02:41.120\nSo I'm gonna click here and\n\n59\n00:02:41.120 --> 00:02:46.790\nwhat will happen as it gives you a rundown\nof some cloud providers that you can use.\n\n60\n00:02:46.790 --> 00:02:49.620\nNow as a developer,\nI've used Digital Ocean for\n\n61\n00:02:49.620 --> 00:02:53.600\nprototyping as well as sometimes\nobviously the Lenox Box running.\n\n62\n00:02:53.600 --> 00:02:58.060\nBecause I have something that I want\nto keep around for a while, and\n\n63\n00:02:58.060 --> 00:02:59.620\nI'll just SSH.\n\n64\n00:02:59.620 --> 00:03:02.830\nAnd do my thing, and\nthen just leave it up in the cloud.\n\n65\n00:03:02.830 --> 00:03:07.010\nSo, I can actually create\na Digital Ocean VM\n\n66\n00:03:07.010 --> 00:03:10.400\nthrough the Docker Machine command line,\nwithout a pointing and click.\n\n67\n00:03:10.400 --> 00:03:13.190\nNow, if you never heard of Digital Ocean,\nit's a pretty good service.\n\n68\n00:03:13.190 --> 00:03:15.182\nI enjoyed [CROSSTALK]\n&gt;&gt; Justin, really quickly,\n\n69\n00:03:15.182 --> 00:03:17.281\nI've never heard of Digital Ocean before,\n\n70\n00:03:17.281 --> 00:03:19.788\ncan you give us a little\nexplanation on what that is?\n\n71\n00:03:19.788 --> 00:03:21.990\n&gt;&gt; Well [INAUDIBLE] again.\n\n72\n00:03:21.990 --> 00:03:23.001\nThat is a great question.\n\n73\n00:03:23.001 --> 00:03:27.829\nThink am able to create instances.I\nget block storage,a little\n\n74\n00:03:27.829 --> 00:03:31.609\nbit of monitoring and\nthat's the basics, right?\n\n75\n00:03:31.609 --> 00:03:35.602\nAlso it's fairly inexpensive an easy\nto get, used to, they also provide load\n\n76\n00:03:35.602 --> 00:03:37.319\nbalancers and things like that\n&gt;&gt; So\n\n77\n00:03:37.319 --> 00:03:41.120\nbasic cloud services\n&gt;&gt; Yeah, yeah, basic cloud services and\n\n78\n00:03:41.120 --> 00:03:45.441\nfor me the price point and the ease of use\nis kind of what draws me for prototyping.\n\n79\n00:03:45.441 --> 00:03:52.230\nThere are some, it's fast, it guarantees\n40 gigabit connection between instances.\n\n80\n00:03:52.230 --> 00:03:56.190\nIt has SSD storage on instances, and we'll\ntake a look at that in just a moment.\n\n81\n00:03:56.190 --> 00:04:00.280\nIt doesn't require you to i-am policies,\n\n82\n00:04:00.280 --> 00:04:02.590\nor setting up group policies,\nsecurity policies.\n\n83\n00:04:02.590 --> 00:04:03.200\nIt doesn't have,\n\n84\n00:04:03.200 --> 00:04:07.190\nas far as I know, it maybe coming online,\nmaybe I just haven't found it.\n\n85\n00:04:07.190 --> 00:04:11.180\nThings like that mirror S3 or\nblob storage, things of that nature.\n\n86\n00:04:11.180 --> 00:04:14.970\nSo it doesn't give you the whole gambit,\nbut it does give you those kind of core\n\n87\n00:04:14.970 --> 00:04:20.430\nset of cloud services and well, they're\nvery approachable to me as a developer and\n\n88\n00:04:20.430 --> 00:04:25.759\nnot as someone who's deeply entrenched\nin SIS admin type work flows.\n\n89\n00:04:26.780 --> 00:04:30.474\nI almost think of it as AWS Lite.\n\n90\n00:04:30.474 --> 00:04:32.243\n&gt;&gt; Half the calories of AWS [LAUGH].\n\n91\n00:04:32.243 --> 00:04:38.010\n&gt;&gt; Yeah, but none of that headache or\nthat bitter aftertaste.\n\n92\n00:04:38.010 --> 00:04:41.169\nAnd that's no slide against any\ncloud provider, that was a joke.\n\n93\n00:04:41.169 --> 00:04:43.908\n&gt;&gt; Made with aspartame [LAUGH].\n\n94\n00:04:43.908 --> 00:04:46.670\n&gt;&gt; [LAUGH] They don't get be careful.\n\n95\n00:04:46.670 --> 00:04:49.470\nSo Digital Ocean and\nAWS are the two listed.\n\n96\n00:04:49.470 --> 00:04:52.680\nHowever if we scroll down, and\nwe'll take a further look here.\n\n97\n00:04:52.680 --> 00:04:55.590\nDrivers for cloud providers.\n\n98\n00:04:55.590 --> 00:04:57.410\nOoh, that's interesting.\n\n99\n00:04:57.410 --> 00:04:59.760\nAnd I'm actually going to zoom in here.\n\n100\n00:04:59.760 --> 00:05:02.510\nWhen you install Docker Machine,\nyou get a set of drivers for\n\n101\n00:05:02.510 --> 00:05:05.810\nvarious cloud providers, AWS,\nDigital Ocean, Microsoft Azure.\n\n102\n00:05:05.810 --> 00:05:09.110\nAs well as local providers,\nOracle Virtualbox, VMWare Fusion, and\n\n103\n00:05:09.110 --> 00:05:09.850\nMicrosoft Hyper V.\n\n104\n00:05:11.130 --> 00:05:13.100\nAll right, that's handy.\n\n105\n00:05:13.100 --> 00:05:15.630\nC docker machine driver reference for\ndetails on dockers.\n\n106\n00:05:15.630 --> 00:05:17.530\n&gt;&gt; Where's click there, let's just see.\n\n107\n00:05:17.530 --> 00:05:20.280\nThese are all of the drivers\navailable to Docker Machine.\n\n108\n00:05:21.320 --> 00:05:24.830\nADBS, Assure, Digital Ocean, Access Scale,\nI have never used Access Scale,\n\n109\n00:05:24.830 --> 00:05:26.760\npersonally have you encountered,\nit Daniel?\n\n110\n00:05:26.760 --> 00:05:27.590\n&gt;&gt; Negative.\n\n111\n00:05:27.590 --> 00:05:28.420\n&gt;&gt; Well, there you go.\n\n112\n00:05:28.420 --> 00:05:30.290\nWe know they may be a wonderful service.\n\n113\n00:05:30.290 --> 00:05:31.910\nI just have never used them.\n\n114\n00:05:31.910 --> 00:05:33.124\n&gt;&gt; Had the pleasure.\n\n115\n00:05:33.124 --> 00:05:36.150\n&gt;&gt; Yeah, Google compute engine and\nthen I like this generic.\n\n116\n00:05:36.150 --> 00:05:36.650\nWhat is generic?\n\n117\n00:05:38.100 --> 00:05:38.670\nLet's just.\n\n118\n00:05:38.670 --> 00:05:41.020\nUsing an existing VM host with SSH, okay?\n\n119\n00:05:41.020 --> 00:05:46.470\nI gotta zoom out so\nwe can actually get back space here.\n\n120\n00:05:46.470 --> 00:05:52.410\nAnd then Open Stack, Rack Space,\nIBM software Cloud Air, fusion vSphere.\n\n121\n00:05:52.410 --> 00:05:57.620\nSo it's fairly robust and people are kinda\nmaking this part of the community,\n\n122\n00:05:57.620 --> 00:05:59.820\nthey are building this drivers and\nreleasing them.\n\n123\n00:05:59.820 --> 00:06:03.290\nSo there maybe once for your cloud\nprovider definitely check it out.\n\n124\n00:06:03.290 --> 00:06:07.290\nBe aware if it's someone\ncontributing to the community\n\n125\n00:06:08.440 --> 00:06:13.160\njust make sure that the drivers secure\nwell documented and has been reviewed.\n\n126\n00:06:13.160 --> 00:06:15.230\nSo keep that in mind.\n\n127\n00:06:15.230 --> 00:06:18.440\nNow Daniel asked a very important\nquestion, and we gave a brief answer.\n\n128\n00:06:18.440 --> 00:06:22.440\nBut we are going to use Digital Ocean\nin conjunction with Docker Machine.\n\n129\n00:06:22.440 --> 00:06:23.750\nSo let's take a look at Digital Ocean,\n\n130\n00:06:23.750 --> 00:06:27.760\nand then actually how does\nDocker Machine interface with that.\n\n131\n00:06:27.760 --> 00:06:33.110\nSo I'm gonna come over here and\nI'm already logged in to my account.\n\n132\n00:06:33.110 --> 00:06:36.300\nIf I wanted to, well,\ncreate a new Droplet.\n\n133\n00:06:36.300 --> 00:06:38.800\nA Droplet is like an instance.\n\n134\n00:06:38.800 --> 00:06:41.560\nThat's what they call\nan instance in Digital Ocean.\n\n135\n00:06:41.560 --> 00:06:43.400\nI just create a new Droplet and\n\n136\n00:06:43.400 --> 00:06:48.310\nthis is nice because when I create\na Droplet, well it gives me this little.\n\n137\n00:06:48.310 --> 00:06:49.393\nLittle shark here.\n\n138\n00:06:50.451 --> 00:06:54.830\nI can select size, very much like AWS.\n\n139\n00:06:54.830 --> 00:06:58.970\nAs well as image or even one click\napps like a database install.\n\n140\n00:06:58.970 --> 00:07:01.090\nSo everything's already setup.\n\n141\n00:07:01.090 --> 00:07:05.630\nAnd I can actually add blob storage and\nalso select data center regions,\n\n142\n00:07:05.630 --> 00:07:07.870\nsetup private networking, backups.\n\n143\n00:07:07.870 --> 00:07:09.930\nSo they have a fairly\nrobust set of services.\n\n144\n00:07:09.930 --> 00:07:12.680\nWe're not going to go near into this.\n\n145\n00:07:12.680 --> 00:07:17.823\nBut if we scroll in here,\nyou can see at $5 a month,\n\n146\n00:07:17.823 --> 00:07:21.330\nI can get 512 mb, 20 gb of RAM and 1 CPU.\n\n147\n00:07:21.330 --> 00:07:25.010\nOkay, that's nice for testing or\nmaybe a tiny little web server.\n\n148\n00:07:25.010 --> 00:07:29.360\n20 gb os SSD disk, and 1 Tb of transfer.\n\n149\n00:07:29.360 --> 00:07:33.770\nWell that's pretty for\n$20 a month I can get 2GB,\n\n150\n00:07:33.770 --> 00:07:37.715\n2 CPU's, 40GB of SSD and 3TB of transfer.\n\n151\n00:07:37.715 --> 00:07:41.620\nWell that's pretty nice, and for\n\n152\n00:07:41.620 --> 00:07:46.380\nmy workflow I use these just to kind\nof spin up, spin down, test things out.\n\n153\n00:07:46.380 --> 00:07:48.887\nAnd it doesn't hurt my,\nand it's a little more,\n\n154\n00:07:48.887 --> 00:07:53.026\nI don't have to worry about it setting up\nsecurity policies and things like that.\n\n155\n00:07:53.026 --> 00:07:57.879\nNow I know that if you an AWS\nguru that's trivial to you but\n\n156\n00:07:57.879 --> 00:08:00.318\nthis is a nice alternative.\n\n157\n00:08:00.318 --> 00:08:04.092\nAnd there is also high memory\nones where I can get Like 16 and\n\n158\n00:08:04.092 --> 00:08:06.023\nup to 224 gigabytes of RAM.\n\n159\n00:08:06.023 --> 00:08:10.070\nBut this is a great start.\n\n160\n00:08:10.070 --> 00:08:13.007\nSo I'm gonna actually hit Back,\nand where we want to be,\n\n161\n00:08:13.007 --> 00:08:16.142\nthis is after you've signed up for\nan account and logged in.\n\n162\n00:08:16.142 --> 00:08:18.710\nThis is what the dashboard, you'll see.\n\n163\n00:08:18.710 --> 00:08:20.600\nWhere we wanna be is the API.\n\n164\n00:08:21.830 --> 00:08:26.216\nNow, instead of getting a set of\ncredentials like a secret key and\n\n165\n00:08:26.216 --> 00:08:31.420\nan access key and all of that niceness\nthat you do with other cloud providers.\n\n166\n00:08:31.420 --> 00:08:35.784\nThe access to the API which\nallows you to spin up droplets or\n\n167\n00:08:35.784 --> 00:08:39.410\nVMs in Digital Ocean is\na single access key.\n\n168\n00:08:39.410 --> 00:08:43.610\nNow, right after this episode,\nI'm going to kill this access key, so\n\n169\n00:08:43.610 --> 00:08:45.290\nkeep that in mind.\n\n170\n00:08:45.290 --> 00:08:50.230\nI'm going to generate a token, and\nthat token, let's just say demo.\n\n171\n00:08:51.620 --> 00:08:54.160\nAnd I'm gonna have read and write, okay?\n\n172\n00:08:54.160 --> 00:08:57.152\nRead has to be there, but\nI could make this a read only so\n\n173\n00:08:57.152 --> 00:09:02.490\npeople could look at what VM is, maybe I'm\ncreating some kind of monitoring software.\n\n174\n00:09:02.490 --> 00:09:03.840\nBut I'm going to generate a token.\n\n175\n00:09:03.840 --> 00:09:07.760\nAnd then there's the token and\nI'm gonna copy it.\n\n176\n00:09:07.760 --> 00:09:10.080\nThat's all I need to do in\nmy dashboard right now.\n\n177\n00:09:10.080 --> 00:09:13.560\nEverything else is Docker Machine, okay.\n\n178\n00:09:13.560 --> 00:09:19.850\nNow in a Linux or Mac OS type environment,\nI'm gonna set that environment variable.\n\n179\n00:09:19.850 --> 00:09:23.030\nSo I don't have to keep copy and\npasting that.\n\n180\n00:09:23.030 --> 00:09:28.387\nSo I'm going to export DOTOKIN,\ngotta spell token right.\n\n181\n00:09:28.387 --> 00:09:29.440\n&gt;&gt; Yeah, toeken.\n\n182\n00:09:29.440 --> 00:09:30.129\n&gt;&gt; Toeken.\n\n183\n00:09:30.129 --> 00:09:32.456\n&gt;&gt; [LAUGH]\n&gt;&gt; And boom, clear,\n\n184\n00:09:32.456 --> 00:09:37.197\nif I echo $DOTOKEN,\nthis is a little bit of Linux.\n\n185\n00:09:37.197 --> 00:09:37.931\n&gt;&gt; Little Linux, yeah.\n\n186\n00:09:37.931 --> 00:09:40.190\n&gt;&gt; Little Linux, it's more for your money.\n\n187\n00:09:40.190 --> 00:09:41.520\nThat's what's important.\n\n188\n00:09:41.520 --> 00:09:44.778\nAnd the token is now stored\nas an environmental variable,\n\n189\n00:09:44.778 --> 00:09:46.182\nenvironment variable.\n\n190\n00:09:46.182 --> 00:09:47.238\nThere we go.\n\n191\n00:09:47.238 --> 00:09:48.347\n&gt;&gt; [LAUGH]\n&gt;&gt; That's a,\n\n192\n00:09:48.347 --> 00:09:51.310\ngotta be careful on the words,\nneed to slow it down and get it out.\n\n193\n00:09:51.310 --> 00:09:56.090\nNow that I have that, I can use that\ntoken to issue a request remotely\n\n194\n00:09:56.090 --> 00:10:00.150\nto Digital Ocean,\nto spin up a virtual machine.\n\n195\n00:10:00.150 --> 00:10:03.160\nAll right,\nhow do we do that using Docker Machine?\n\n196\n00:10:03.160 --> 00:10:07.979\nWell, there are actually\na good amount of docs\n\n197\n00:10:07.979 --> 00:10:11.958\nin the Docker docs for DigitalOcean.\n\n198\n00:10:11.958 --> 00:10:15.799\nAnd they have some nice examples,\nbut let's take it through,\n\n199\n00:10:15.799 --> 00:10:18.270\nsee any type of gotchas that we may have.\n\n200\n00:10:18.270 --> 00:10:20.020\nAnd there's create and the -d.\n\n201\n00:10:20.020 --> 00:10:21.690\nThe driver's important.\n\n202\n00:10:21.690 --> 00:10:25.360\nBecause if say virtualbox, this won't\nwork, what driver are we gonna use?\n\n203\n00:10:25.360 --> 00:10:27.560\nWe're gonna say digitalocean.\n\n204\n00:10:27.560 --> 00:10:33.185\nWell, that's kind of self explanatory,\n\n205\n00:10:33.185 --> 00:10:38.653\nbut I need to add\nan additional flag if I'm\n\n206\n00:10:38.653 --> 00:10:47.266\nusing this driver --digitalocean\naccess token = $DOTOKEN.\n\n207\n00:10:47.266 --> 00:10:50.450\nNow, that will actually\ninterpret to that giant string.\n\n208\n00:10:50.450 --> 00:10:56.190\nAnd this just makes this a little more\nreadable and well let's think of a name.\n\n209\n00:10:56.190 --> 00:11:00.150\nLet's call it, it's very original, node-0.\n\n210\n00:11:00.150 --> 00:11:04.070\nAnd now what it's going to do is\nthe exact same thing that it did with\n\n211\n00:11:04.070 --> 00:11:05.120\nthe Virtual Box.\n\n212\n00:11:05.120 --> 00:11:07.740\nIf you don't watch that episode,\ndefinitely go check that out.\n\n213\n00:11:07.740 --> 00:11:09.860\nIt's going to provision a virtual machine\n\n214\n00:11:10.870 --> 00:11:14.400\non Digital Ocean just like it\ndid with the local Virtual Box.\n\n215\n00:11:14.400 --> 00:11:18.830\nAnd part of that is it's creating\na machine, it creates an SSH key.\n\n216\n00:11:18.830 --> 00:11:20.780\nIt is now creating the Droplet.\n\n217\n00:11:20.780 --> 00:11:25.250\nAgain, that's just terminology\nthat the service uses for VMs.\n\n218\n00:11:25.250 --> 00:11:28.274\nAnd then it's waiting for an IP address,\nand then it's waiting for\n\n219\n00:11:28.274 --> 00:11:30.780\nthe machine to be running,\nthis may take a few minutes.\n\n220\n00:11:30.780 --> 00:11:35.291\nAnd while this is up and running,\nlets go check out our dashboard, and\n\n221\n00:11:35.291 --> 00:11:40.700\nI go to drop list, and there it is,\nit's already been provisioned.\n\n222\n00:11:40.700 --> 00:11:42.780\nI haven't had to click or anything, and\n\n223\n00:11:42.780 --> 00:11:45.260\nwhat's interesting by\nusing Docker Machine.\n\n224\n00:11:46.290 --> 00:11:50.100\nIf I were to provision this with\na point and click interface like,\n\n225\n00:11:50.100 --> 00:11:53.441\nright here, create Droplet,\nthere are one click apps.\n\n226\n00:11:53.441 --> 00:11:58.391\nBut I would have to setup Docker and\ninstall Docker,\n\n227\n00:11:58.391 --> 00:12:06.060\nbecause this is an Ubuntu 64-bit\n16.04 based Linux image, okay?\n\n228\n00:12:06.060 --> 00:12:10.400\nSo I would have to set that up,\nby using docker machine I get that for\n\n229\n00:12:10.400 --> 00:12:13.190\nfree it's actually installing\nDocker as we speak.\n\n230\n00:12:13.190 --> 00:12:17.660\nThis machine is up and running,\nit's just doing tha final configuration.\n\n231\n00:12:17.660 --> 00:12:18.923\nIn addition to,\n\n232\n00:12:18.923 --> 00:12:24.990\nthey do it around log this down you have\nto add SSH keys in order to SSH standards.\n\n233\n00:12:26.230 --> 00:12:31.486\nDuring this provisioning cycle with docker\nmachine just like it did with virtual box,\n\n234\n00:12:31.486 --> 00:12:36.454\nit will creat the certificates, set up\neverything locally and that way we can do,\n\n235\n00:12:36.454 --> 00:12:38.620\nwell, SSH the docker machine way.\n\n236\n00:12:38.620 --> 00:12:42.265\nSo let's take a look here,\nit is still installing and\n\n237\n00:12:42.265 --> 00:12:46.570\nwhile it is installing let's just\ntake a look at some of these.\n\n238\n00:12:46.570 --> 00:12:50.630\nI can add, and\nI can actually resize this droplet.\n\n239\n00:12:50.630 --> 00:12:55.624\nBy default, it gives me a tiny image,\n512 megabytes, 20 gigabyte disk,\n\n240\n00:12:55.624 --> 00:12:59.049\nand I think it is the New York City\nregion, I don't know\n\n241\n00:12:59.049 --> 00:13:03.840\nif it necessarily always does one,\ntwo or three, as far as the data center.\n\n242\n00:13:03.840 --> 00:13:06.090\nBut it's in New York City.\n\n243\n00:13:06.090 --> 00:13:10.590\nIf I wanted to change that I could come\nand actually resize the droplet and\n\n244\n00:13:10.590 --> 00:13:13.590\nthat means change it to maybe one\nof those high memory usage ones.\n\n245\n00:13:13.590 --> 00:13:16.630\nSo even though Docker's provisioned it,\nit should resize.\n\n246\n00:13:16.630 --> 00:13:22.002\nNow word of warning, if you kind of use\nthese inter chargeable if I come and\n\n247\n00:13:22.002 --> 00:13:28.040\nmess with this through the console I\nmay get some weirdness over here, okay?\n\n248\n00:13:28.040 --> 00:13:31.660\nSo I may get some time\nwhere they're out of synch.\n\n249\n00:13:31.660 --> 00:13:36.076\nAnd a common error that I've had, because\nof connectivity issues because this is now\n\n250\n00:13:36.076 --> 00:13:39.120\nreaching out to the Internet,\nare my certificates code.\n\n251\n00:13:39.120 --> 00:13:42.970\nLike they don't actually get\nfully copied or moved over.\n\n252\n00:13:42.970 --> 00:13:45.940\nAnd I have to issue,\nwell what do I have to issue?\n\n253\n00:13:45.940 --> 00:13:50.270\nSo let's clear Move this up, and if I say\n\n254\n00:13:50.270 --> 00:13:54.620\ndocker machine that regenerates certs.\n\n255\n00:13:55.762 --> 00:13:59.340\nLike I've not been able to SSH into\nthat machine or interact with it.\n\n256\n00:13:59.340 --> 00:14:04.210\nI have to do docker machine regenerate\ncerts for the particular machine.\n\n257\n00:14:04.210 --> 00:14:09.170\nSo it's really hard to reproduce that,\nget that to happen, so I can show you.\n\n258\n00:14:09.170 --> 00:14:14.570\nBut I'm telling you, if you have something\nwith SSH error, or unable to communicate\n\n259\n00:14:14.570 --> 00:14:19.390\nerror, try the regenerate-certs, and\nthat may actually solve your problem.\n\n260\n00:14:19.390 --> 00:14:24.301\nNow, even though that's on the console,\nthat is a quote that I didn't close,\n\n261\n00:14:24.301 --> 00:14:29.380\neven though that's on the console is it up\nand running with the docker machine ls?\n\n262\n00:14:29.380 --> 00:14:32.300\nWell, notice it's not quite as fast.\n\n263\n00:14:32.300 --> 00:14:36.022\nAnd that's because it's actually\npinging something in a New York data\n\n264\n00:14:36.022 --> 00:14:37.300\ncenter, right?\n\n265\n00:14:37.300 --> 00:14:40.280\nSo it's sending that out and\nwaiting for it to come back.\n\n266\n00:14:40.280 --> 00:14:44.230\nIt also lists digitalocean as the driver.\n\n267\n00:14:44.230 --> 00:14:46.977\nOkay, it's a node zero, digitalocean and\n\n268\n00:14:46.977 --> 00:14:51.740\nhere's a similar error that we had when\nwe provision using the virtual box.\n\n269\n00:14:51.740 --> 00:14:52.910\nWhy did that occur?\n\n270\n00:14:52.910 --> 00:14:56.850\nBecause it didn't finish\ninstalling Docker, all right?\n\n271\n00:14:56.850 --> 00:15:00.253\nNow, it's copying the certs,\nsetting up the Docker configuration for\n\n272\n00:15:00.253 --> 00:15:01.950\nthe remote daemon and we're on up.\n\n273\n00:15:01.950 --> 00:15:04.740\nThere we are, we're good to go okay?\n\n274\n00:15:04.740 --> 00:15:08.818\nSo our machine is set up, we've\nprovisioned a droplet on Digital Ocean,\n\n275\n00:15:08.818 --> 00:15:13.110\nand now well let's just\nsee if we can use it.\n\n276\n00:15:13.110 --> 00:15:20.425\nSo I'm going to actually close this out,\nclear this, docker-machine ip node-0.\n\n277\n00:15:20.425 --> 00:15:22.450\nThere's the IP address.\n\n278\n00:15:22.450 --> 00:15:27.900\nOkay, if I docker machine ssh node-0,\n\n279\n00:15:27.900 --> 00:15:32.440\nand well let's just, ls.\n\n280\n00:15:32.440 --> 00:15:36.740\nAnd notice it takes a little bit and\nthat's why sometimes when I'm prototyping,\n\n281\n00:15:36.740 --> 00:15:39.740\nI'll use virtual box cuz I\ncan get really fast feedback.\n\n282\n00:15:39.740 --> 00:15:43.776\nBut then if I wanna really\ncrank it up in a action,\n\n283\n00:15:43.776 --> 00:15:48.710\nI don't have 224 gigabytes\nof RAM locally accessible.\n\n284\n00:15:48.710 --> 00:15:53.390\nI'll use a Cloud service, right,\nlike Digital Ocean, spin up something.\n\n285\n00:15:53.390 --> 00:15:54.670\nSo it takes a little bit.\n\n286\n00:15:54.670 --> 00:15:57.559\nLet's see if we can just SSH into that.\n\n287\n00:15:57.559 --> 00:16:01.460\nAnd notice again it's a little slower, but\n\n288\n00:16:01.460 --> 00:16:05.579\nnow I'm in a standard Ubuntu Machine,\nokay?\n\n289\n00:16:05.579 --> 00:16:09.381\nThe one thing that it does not do\nif you saw in that last screen,\n\n290\n00:16:09.381 --> 00:16:14.890\nit doesn't install updates and it doesn't\ndo like kind of automated restarts, right?\n\n291\n00:16:14.890 --> 00:16:18.095\nIt's trying to keep up-time,\nso I recommend,\n\n292\n00:16:18.095 --> 00:16:23.029\nnotice you are already root because\nit was provisioned by docker machine.\n\n293\n00:16:23.029 --> 00:16:27.489\nI would immediately say,\napt update, or yum update, I think.\n\n294\n00:16:27.489 --> 00:16:29.610\n&gt;&gt; Yep.\n\n295\n00:16:29.610 --> 00:16:32.100\n&gt;&gt; And then go ahead and reboot,\nand make sure all of that, that's-\n\n296\n00:16:32.100 --> 00:16:33.720\n&gt;&gt; And if it was CentOS, or Fedora.\n\n297\n00:16:33.720 --> 00:16:35.280\n&gt;&gt; CentOS or Fedora.\n\n298\n00:16:35.280 --> 00:16:40.070\nSo I'm going to do apt update,\nand it's very fast.\n\n299\n00:16:40.070 --> 00:16:43.190\nYou should do this before you start\nworrying about any docker stuff.\n\n300\n00:16:43.190 --> 00:16:44.400\nAnd then apt upgrade.\n\n301\n00:16:45.620 --> 00:16:48.402\nAnd those will do\nthe upgrades [CROSSTALK].\n\n302\n00:16:48.402 --> 00:16:53.373\n&gt;&gt; If you wanna one line that,\nyou can just do apt update and and,\n\n303\n00:16:53.373 --> 00:16:56.540\nlike &amp;&amp; apt upgrade in just one line.\n\n304\n00:16:56.540 --> 00:16:57.070\n&gt;&gt; Yep.\n&gt;&gt; And\n\n305\n00:16:57.070 --> 00:16:58.430\nit'll hammer through the whole thing.\n\n306\n00:16:58.430 --> 00:17:00.040\n&gt;&gt; Yep, it sure will.\n\n307\n00:17:00.040 --> 00:17:04.295\nNow, sometimes I've been burned\nmaking my docker files like that, so.\n\n308\n00:17:04.295 --> 00:17:06.600\n&gt;&gt; [LAUGH]\n&gt;&gt; I've got in the habit of not using\n\n309\n00:17:06.600 --> 00:17:07.940\nthose one liners, but\n\n310\n00:17:07.940 --> 00:17:11.620\nin this case it works very well\nbecause if update's unsuccessful,\n\n311\n00:17:11.620 --> 00:17:14.910\nthen I may want to hold off the upgrade\nuntil I can update the source lists.\n\n312\n00:17:14.910 --> 00:17:16.330\n&gt;&gt; Please and responsibly [LAUGH].\n\n313\n00:17:16.330 --> 00:17:17.700\n&gt;&gt; Yes, yes that is important.\n\n314\n00:17:19.030 --> 00:17:21.120\nBe very careful with these commands.\n\n315\n00:17:21.120 --> 00:17:23.370\nNow this is gonna finish upgrading.\n\n316\n00:17:23.370 --> 00:17:27.170\nThis is to demonstrate this is something\nyou should do initially, okay?\n\n317\n00:17:27.170 --> 00:17:29.188\nCuz this for-\n&gt;&gt; That's just security 101.\n\n318\n00:17:29.188 --> 00:17:31.670\n&gt;&gt; Yeah, you should do that.\n\n319\n00:17:31.670 --> 00:17:37.080\nNow we should restart, but in the interest\nof time, I'm not going to okay?\n\n320\n00:17:37.080 --> 00:17:39.300\nWe're gonna see if it works.\n\n321\n00:17:39.300 --> 00:17:42.160\nAnd here we go.\n\n322\n00:17:42.160 --> 00:17:43.691\nThat is not a valid Linux command.\n\n323\n00:17:43.691 --> 00:17:45.580\n&gt;&gt; [LAUGH] No, it is not sir.\n\n324\n00:17:45.580 --> 00:17:48.214\n&gt;&gt; But I should have docker and\nI have docker.\n\n325\n00:17:48.214 --> 00:17:50.456\nBy using Docker Machine that comes for\nfree,\n\n326\n00:17:50.456 --> 00:17:53.407\nyou don't have to do any of that set-up,\nso that's good.\n\n327\n00:17:53.407 --> 00:17:57.158\nAnd now, well,\nlet's just see if we can run a container.\n\n328\n00:17:57.158 --> 00:18:02.165\nSo docker run -p 80:80 -d\n\n329\n00:18:02.165 --> 00:18:07.921\nenginex:alpine, unable to find.\n\n330\n00:18:07.921 --> 00:18:13.845\nAnd one thing that I will do when I\nexperience like large, a long amount for\n\n331\n00:18:13.845 --> 00:18:20.150\npulling images, some of the images for\ndata services are fairly large.\n\n332\n00:18:20.150 --> 00:18:22.440\nTake a long time to pull locally.\n\n333\n00:18:22.440 --> 00:18:26.020\nThis is really fast, if you want to,\nif you have trouble pulling images.\n\n334\n00:18:26.020 --> 00:18:30.201\nSometimes I use the gist,\nbecause it has fast internet connectivity.\n\n335\n00:18:30.201 --> 00:18:34.751\nAnd if I docker ps,\nthere's that container running, okay.\n\n336\n00:18:34.751 --> 00:18:40.828\nWell, how do I check to see if it's\nbound to port 80 of that droplet,\n\n337\n00:18:40.828 --> 00:18:43.320\nof that instance.\n\n338\n00:18:43.320 --> 00:18:49.980\nWell I can exit out,\ndocker-machine ls, and wait for it.\n\n339\n00:18:49.980 --> 00:18:53.840\nThere it is,\nI should be able to go to this ip.\n\n340\n00:18:53.840 --> 00:18:57.300\nSo this publishes your\npublic IP in Digital Ocean.\n\n341\n00:18:57.300 --> 00:19:00.680\nAnd, let's check it out there's Engine X.\n\n342\n00:19:00.680 --> 00:19:05.710\nI now have a web server running\nin a container, on a VM, that all\n\n343\n00:19:05.710 --> 00:19:10.740\nhappened from the command line after I\ngot my token, my certs, so to speak.\n\n344\n00:19:12.270 --> 00:19:18.060\nEverything else that we've seen in\nthe virtual box, right, I can SEP.\n\n345\n00:19:18.060 --> 00:19:20.911\nActually, let's create do I still have?\n\n346\n00:19:20.911 --> 00:19:21.704\nYep, I still have.\n\n347\n00:19:21.704 --> 00:19:27.920\nHello scp, and that is wait for it.\n\n348\n00:19:27.920 --> 00:19:32.993\nThe file and where I want to put it node\n\n349\n00:19:32.993 --> 00:19:38.410\n0 hello.txt and boom, it's there.\n\n350\n00:19:38.410 --> 00:19:41.203\nSo now if I do docker machine.\n\n351\n00:19:41.203 --> 00:19:46.318\nSsh node-0 ls it'll take a little bit and\nthere's hello text so\n\n352\n00:19:46.318 --> 00:19:51.072\nI can actually move files\nthey're using doctor-machine.\n\n353\n00:19:51.072 --> 00:19:56.304\nSo all of that still holds I have a web\nserver up and running if my computer blips\n\n354\n00:19:56.304 --> 00:20:01.630\noff now it's still gonna be running,\nso this is a nice test environment.\n\n355\n00:20:01.630 --> 00:20:05.720\nAnd may actually be a valid deployment\nenvironment if you don't have\n\n356\n00:20:05.720 --> 00:20:06.700\nridiculous needs.\n\n357\n00:20:06.700 --> 00:20:09.560\n&gt;&gt; Interesting thing I just realized,\nis that when you're doing the STP.\n\n358\n00:20:09.560 --> 00:20:13.730\nYou're not providing any user name or\ncredentials it was just saying, hey.\n\n359\n00:20:13.730 --> 00:20:14.270\nGo right ahead and\n\n360\n00:20:14.270 --> 00:20:17.250\ncopy those files on over there big\nboy having a good time [LAUGH].\n\n361\n00:20:17.250 --> 00:20:18.670\n&gt;&gt; It sure was.\n\n362\n00:20:18.670 --> 00:20:19.830\nIt sure was.\n\n363\n00:20:19.830 --> 00:20:22.519\n&gt;&gt; Is that a security feature that we\nneed to implement later down the road?\n\n364\n00:20:22.519 --> 00:20:23.879\nI mean, obviously,\nwe're demonstrating things.\n\n365\n00:20:23.879 --> 00:20:25.860\n&gt;&gt; So that's a great question.\n\n366\n00:20:25.860 --> 00:20:32.405\nAnd something I kinda glossed over\nbecause we're just looking at\n\n367\n00:20:32.405 --> 00:20:38.831\nsome of these features is\nthe asserts that it's talking about,\n\n368\n00:20:38.831 --> 00:20:44.793\nlet me ls dash la, so I have,\nsee this .docker right here?\n\n369\n00:20:44.793 --> 00:20:46.761\nLet's go ahead and take a look\nat my screen, sorry about that.\n\n370\n00:20:46.761 --> 00:20:47.993\n&gt;&gt; [LAUGH]\n&gt;&gt; Whoopsie daisy.\n\n371\n00:20:47.993 --> 00:20:52.619\nSo this .docker here in my home\ndirectory if I go into the, so\n\n372\n00:20:52.619 --> 00:20:55.370\nit's a hidden directory, yeah.\n\n373\n00:20:55.370 --> 00:20:57.480\n&gt;&gt; Yep, there's a machine.\n\n374\n00:20:57.480 --> 00:20:58.680\n&gt;&gt; Yep.\n\n375\n00:20:58.680 --> 00:21:02.290\n&gt;&gt; If I go into machine,\nand I ls, there's my certs.\n\n376\n00:21:04.740 --> 00:21:07.600\nAnd if I ls there, I actually-\n&gt;&gt; So you have the private key.\n\n377\n00:21:07.600 --> 00:21:08.750\n&gt;&gt; I have the private key.\n\n378\n00:21:08.750 --> 00:21:10.760\nSo that gets provisioned for me.\n\n379\n00:21:10.760 --> 00:21:15.460\nSo if you actually try to do that\non your machine, it just goes no,\n\n380\n00:21:15.460 --> 00:21:16.870\nno, don't do that.\n\n381\n00:21:16.870 --> 00:21:20.772\nAlso, there's a second layer as I\nissued a token from Digital Ocean and\n\n382\n00:21:20.772 --> 00:21:22.474\nI only have a token hopefully.\n\n383\n00:21:22.474 --> 00:21:24.091\nNow everybody saw that token, so\n\n384\n00:21:24.091 --> 00:21:26.993\nI'm immediately gonna change\nthat as soon as this is over.\n\n385\n00:21:26.993 --> 00:21:30.913\n&gt;&gt; Yeah, [LAUGH]\n&gt;&gt; But I like this because I can quickly\n\n386\n00:21:30.913 --> 00:21:33.340\nprototype\n&gt;&gt; I can take things and\n\n387\n00:21:33.340 --> 00:21:38.380\nscale them beyond my current means and I\n\n388\n00:21:38.380 --> 00:21:42.320\ndon't have to get deep into an ecosystem,\nwhich there's nothing wrong with.\n\n389\n00:21:42.320 --> 00:21:44.815\nIt's just my personal preference.\n\n390\n00:21:44.815 --> 00:21:50.950\nBut, Daniel, I think it kind of sums up\nthe whole Digital Ocean extravaganza.\n\n391\n00:21:50.950 --> 00:21:55.650\n&gt;&gt; Well, that's okay, because that's,\nit's a vast ocean from which to drink.\n\n392\n00:21:55.650 --> 00:21:58.680\nSo, just getting our bearings.\n\n393\n00:21:58.680 --> 00:22:00.010\nRight, that's what we want to do, right.\n\n394\n00:22:00.010 --> 00:22:01.610\nThis will help us with this episode.\n\n395\n00:22:01.610 --> 00:22:04.130\nRemember this is introduction to Docker,\nnot.\n\n396\n00:22:04.130 --> 00:22:06.920\nLet's build multi clustered\nthings with Docker, and\n\n397\n00:22:06.920 --> 00:22:10.330\ndo a whole gigantic in a corporate\nenvironment type of thing.\n\n398\n00:22:10.330 --> 00:22:13.970\nNow we just want to get you guys\neased into the water as it were and\n\n399\n00:22:13.970 --> 00:22:17.970\nstart assimilating these\nideas into your own person.\n\n400\n00:22:17.970 --> 00:22:19.550\nSo that's what it is all about.\n\n401\n00:22:19.550 --> 00:22:20.860\nJustin I think you did\na fine job with that.\n\n402\n00:22:20.860 --> 00:22:24.040\nAppreciate it cause, I'm,\nDigital Ocean never messed with it,\n\n403\n00:22:24.040 --> 00:22:24.860\nI'm an AWS guy, right?\n\n404\n00:22:24.860 --> 00:22:29.870\nThat's what I do, so it's nice to\nknow there are alternatives out there\n\n405\n00:22:29.870 --> 00:22:33.230\ncause efficient especially when you're\ntrying to build an environment for\n\n406\n00:22:33.230 --> 00:22:35.770\ntesting and\nmaybe some development, all right.\n\n407\n00:22:35.770 --> 00:22:37.240\nSo, very easy stuff.\n\n408\n00:22:37.240 --> 00:22:39.730\nJust anything else that you wanna add\nbefore we close the show for today?\n\n409\n00:22:39.730 --> 00:22:43.480\n&gt;&gt; No, I will say I enjoy these tools,\n\n410\n00:22:43.480 --> 00:22:45.930\nsometimes their purposes\nis not entirely clear.\n\n411\n00:22:45.930 --> 00:22:49.290\nif you're like I don't know why I would\nuse this, try to build something with it.\n\n412\n00:22:49.290 --> 00:22:53.180\nTry something with it because you\nmay find that it has more utility\n\n413\n00:22:53.180 --> 00:22:55.240\nthen you realized at initial glance.\n\n414\n00:22:55.240 --> 00:22:57.130\nSo definitely always check this out.\n\n415\n00:22:57.130 --> 00:23:01.160\n&gt;&gt; All right, so definitely dive into that\ndeep waters once you get familiar with it,\n\n416\n00:23:01.160 --> 00:23:03.630\nbut looking at the clock it is time for\nus to sign off.\n\n417\n00:23:03.630 --> 00:23:04.550\nthanks for watching.\n\n418\n00:23:04.550 --> 00:23:07.160\nFor ITPRO.TV, I've been your host,\nDaniel Lowrie.\n\n419\n00:23:07.160 --> 00:23:08.180\n&gt;&gt; And I'm Justin Dennison.\n\n420\n00:23:08.180 --> 00:23:10.372\n&gt;&gt; And we'll see you next time.\n\n421\n00:23:10.372 --> 00:23:16.328\n[MUSIC]\n\n422\n00:23:16.328 --> 00:23:18.375\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "212913011"
        },
        {
          "description": "In this episode, Daniel and Justin introduce you to Docker Swarm which allows you to provision multiple Docker Machines to perform load-balancing type functions. Here they will show you how to crate a swarm from your local machine, looking at post-creation configuration of the master node and swarm nodes.",
          "length": "1798",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-what_is_docker_swarm-040517.00_29_41_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-what_is_docker_swarm-040517.00_29_41_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-what_is_docker_swarm-040517.00_29_41_28.Still001-sm.jpg",
          "title": "What is Docker Swarm",
          "transcript": "WEBVTT\n\n1\n00:00:00.250 --> 00:00:03.922\nWelcome to ITPROTV,\n\n2\n00:00:03.922 --> 00:00:08.206\nI'm your host [CROSSTALK]\n\n3\n00:00:08.206 --> 00:00:12.660\n&gt;&gt; You're watching ITPROTV.\n\n4\n00:00:12.660 --> 00:00:14.110\n&gt;&gt; All right, greetings everyone and\n\n5\n00:00:14.110 --> 00:00:16.630\nwelcome to another exciting\nepisode of ITProTV.\n\n6\n00:00:16.630 --> 00:00:18.440\nI'm your host, Daniel Lowrie.\n\n7\n00:00:18.440 --> 00:00:22.270\nAnd in today's episode we're coming\nback at you with more Microsoft.\n\n8\n00:00:22.270 --> 00:00:25.140\nThat's right, we're back with more Docker,\nintro to Docker, that is.\n\n9\n00:00:25.140 --> 00:00:28.580\nAnd joining us in the studio yet again\nour good friend on that endeavor, Mr.\n\n10\n00:00:28.580 --> 00:00:29.450\nJustin Dennison.\n\n11\n00:00:29.450 --> 00:00:30.970\nJustin, welcome back, man, how's it going?\n\n12\n00:00:30.970 --> 00:00:33.292\n&gt;&gt; It's going well,\nI'm excited to be back, I thought we-\n\n13\n00:00:33.292 --> 00:00:34.382\n&gt;&gt; [CROSSTALK] I had you for\n\n14\n00:00:34.382 --> 00:00:35.764\na second there, didn't I?\n\n15\n00:00:35.764 --> 00:00:37.024\n[LAUGH]\n&gt;&gt; I was like no no-\n\n16\n00:00:37.024 --> 00:00:38.580\n&gt;&gt; I don't know nothing about no\n\n17\n00:00:38.580 --> 00:00:39.270\nMicrosoft.\n\n18\n00:00:39.270 --> 00:00:40.395\n[LAUGH]\n&gt;&gt; [LAUGH] It's not my purview.\n\n19\n00:00:40.395 --> 00:00:42.260\n&gt;&gt; [LAUGH] Yeah.\n&gt;&gt; It's not what I do.\n\n20\n00:00:42.260 --> 00:00:46.030\nBut instead we are gonna come back\nwith more of that wonderful Docker.\n\n21\n00:00:46.030 --> 00:00:50.000\nSo, in recent years,\nDocker has become a, well,\n\n22\n00:00:50.000 --> 00:00:53.120\nits arms have kind of spread out,\nit's got its tendrils in multiple things.\n\n23\n00:00:53.120 --> 00:00:55.150\nAnd in previous episodes,\nif you haven't checked them out,\n\n24\n00:00:55.150 --> 00:00:59.220\nwe've looked at the standard Docker engine\nwith its CLI and the daemon running.\n\n25\n00:00:59.220 --> 00:01:00.820\nThat's actually what runs containers.\n\n26\n00:01:00.820 --> 00:01:02.370\nWe looked at Docker Compose,\n\n27\n00:01:02.370 --> 00:01:05.970\nwhich helps with orchestrating\nmultiple container applications.\n\n28\n00:01:05.970 --> 00:01:09.900\nAnd then we looked at Docker Machine,\nwhich oddly enough is used for\n\n29\n00:01:09.900 --> 00:01:15.810\nprovisioning virtual machines using\na kind of a Docker interface.\n\n30\n00:01:15.810 --> 00:01:19.270\nBut it installs Docker on those\nrespective virtual machines.\n\n31\n00:01:19.270 --> 00:01:24.370\nNow, we're always gonna use\nthat locally for now, okay?\n\n32\n00:01:24.370 --> 00:01:29.010\nEventually, maybe we'll take a look at how\nto use that in a Cloud based environment.\n\n33\n00:01:29.010 --> 00:01:34.000\nBut you should always think of those\nas being separate from your machine.\n\n34\n00:01:34.000 --> 00:01:36.020\nThey are somewhere else, right?\n\n35\n00:01:36.020 --> 00:01:39.480\nEven though they're not technically,\njust pretend that they are.\n\n36\n00:01:39.480 --> 00:01:45.000\nAnd today, we're gonna look at some of the\nkind of newer features, something that,\n\n37\n00:01:45.000 --> 00:01:49.800\nwell, it's a point of contention,\nbut it is incredibly wonderful.\n\n38\n00:01:49.800 --> 00:01:52.440\nI think it's wonderful,\nit's amazing because it's so easy to use.\n\n39\n00:01:52.440 --> 00:01:53.880\nI think it's easy to use.\n\n40\n00:01:53.880 --> 00:01:57.650\nWe'll see later on if\neverybody has that same idea.\n\n41\n00:01:57.650 --> 00:01:59.890\nWe're gonna look at Docker Swarm.\n\n42\n00:01:59.890 --> 00:02:04.650\nNow, before we talk about Docker Swarm,\njust think of the idea of swarm.\n\n43\n00:02:04.650 --> 00:02:06.660\nDaniel, when I say swarm\nwhat do you think of?\n\n44\n00:02:06.660 --> 00:02:07.870\n&gt;&gt; I think bees, obviously.\n\n45\n00:02:07.870 --> 00:02:09.590\nThey swarm around,\nthere's a bunch of bees,\n\n46\n00:02:09.590 --> 00:02:11.180\nespecially those African killer bees, man.\n\n47\n00:02:11.180 --> 00:02:11.950\nThey don't mess around.\n\n48\n00:02:11.950 --> 00:02:12.900\n&gt;&gt; Yeah, they-\n&gt;&gt; They jump on you,\n\n49\n00:02:12.900 --> 00:02:13.940\nyou better get to safety.\n\n50\n00:02:13.940 --> 00:02:14.540\n&gt;&gt; Yeah, yeah.\n\n51\n00:02:14.540 --> 00:02:16.660\nAnd they work together, right?\n\n52\n00:02:16.660 --> 00:02:19.070\n&gt;&gt; Yeah.\n&gt;&gt; They're kind of a collective hive mind,\n\n53\n00:02:19.070 --> 00:02:20.680\nso to speak\n&gt;&gt; The Borg.\n\n54\n00:02:20.680 --> 00:02:21.680\n&gt;&gt; The Borg.\n\n55\n00:02:21.680 --> 00:02:23.110\nYes, the Borg.\n\n56\n00:02:23.110 --> 00:02:26.840\nAll together they work in unison,\nbut they are individual pieces.\n\n57\n00:02:26.840 --> 00:02:29.820\nYou should think that way,\nor something of that nature.\n\n58\n00:02:29.820 --> 00:02:32.250\n&gt;&gt; [LAUGH]\n&gt;&gt; If you can't go with African killer\n\n59\n00:02:32.250 --> 00:02:34.778\nbees or the Borg, then I don't know,\n\n60\n00:02:34.778 --> 00:02:40.160\nthink of something that works collectively\nlike that, that is how Swarm works.\n\n61\n00:02:40.160 --> 00:02:46.550\nAnd the ultimate goal of Swarm is to\nprovide kind of a management tool for\n\n62\n00:02:46.550 --> 00:02:51.600\na cluster of compute nodes that you\ncan distribute containers across.\n\n63\n00:02:51.600 --> 00:02:56.370\nSo instead of having 30 containers\nrunning on a single virtual machine, or\n\n64\n00:02:56.370 --> 00:03:01.750\nan EC2 instance, or something like that,\nwhen I use Swarm, it will navigate and\n\n65\n00:03:01.750 --> 00:03:06.790\nkind of distribute those over several\nnodes, whatever's part of the swarm.\n\n66\n00:03:08.320 --> 00:03:10.470\nNow, there's where the kicker comes in.\n\n67\n00:03:10.470 --> 00:03:14.560\nDo I have to have x number of\nthings available for a swarm?\n\n68\n00:03:14.560 --> 00:03:16.660\nYou need at least two, right?\n\n69\n00:03:16.660 --> 00:03:21.329\nBut otherwise I would say that\nif I saw two killer bees,\n\n70\n00:03:22.510 --> 00:03:25.030\nI'd be like,\nI don't know if that's a swarm.\n\n71\n00:03:25.030 --> 00:03:28.080\nIt's more like a pairing, more of a-\n&gt;&gt; Yeah, a duo.\n\n72\n00:03:28.080 --> 00:03:29.520\n&gt;&gt; A duo, yes.\n\n73\n00:03:29.520 --> 00:03:31.880\nSo we'll look at a small scale.\n\n74\n00:03:31.880 --> 00:03:34.340\nBut do know that this could\nscale out a great deal.\n\n75\n00:03:34.340 --> 00:03:39.730\nAnd this offers the ability to\norchestrate horizontally scaled services.\n\n76\n00:03:39.730 --> 00:03:44.520\nAnd when I say services, I'm talking about\na part of your application, or maybe even\n\n77\n00:03:44.520 --> 00:03:48.960\nthe application, if you're just running\none, distributed over multiple compute\n\n78\n00:03:48.960 --> 00:03:53.860\nnodes, maybe to use additional resources\nor to have elastic load balances.\n\n79\n00:03:53.860 --> 00:03:56.480\n&gt;&gt; Yeah, I was gonna say,\nthis sounds just like load balancing.\n\n80\n00:03:56.480 --> 00:04:00.560\nSo if I've got a web server, all of the\nsudden, my web server is the hottest thing\n\n81\n00:04:00.560 --> 00:04:03.720\nrunning, and\nI get too much traffic running to it.\n\n82\n00:04:03.720 --> 00:04:08.110\nI can scale out or scale up,\nI guess this is scaling out per se, and\n\n83\n00:04:08.110 --> 00:04:11.180\ncreating more instances so\nI can handle the traffic.\n\n84\n00:04:11.180 --> 00:04:17.140\n&gt;&gt; Exactly, and then what's amazing is\nif you join the swarm with a new EC2\n\n85\n00:04:17.140 --> 00:04:22.340\ninstance or a new digital ocean droplet,\nor even just an on-premises machine,\n\n86\n00:04:22.340 --> 00:04:27.070\nif that joins the swarm, then it becomes\na part of the collective resources,\n\n87\n00:04:27.070 --> 00:04:30.090\njust like the Borg or a swarm of bees.\n\n88\n00:04:30.090 --> 00:04:34.470\nSo, how are we going to attempt,\nthis sounds very complicated, Justin.\n\n89\n00:04:34.470 --> 00:04:37.470\nThat's probably what\nsome of you are thinking.\n\n90\n00:04:37.470 --> 00:04:43.440\nBut using Docker machine, we can simulate\nusing these large scale Cloud services,\n\n91\n00:04:43.440 --> 00:04:47.240\nspinning up a bunch of\nthese remote computers.\n\n92\n00:04:47.240 --> 00:04:48.080\nAnd, well,\n\n93\n00:04:48.080 --> 00:04:52.060\nwe're gonna do that locally with Docker\nmachine to get that up and running.\n\n94\n00:04:52.060 --> 00:04:54.880\nSo let's go ahead and\ntake a look at my screen here.\n\n95\n00:04:54.880 --> 00:05:00.950\nAnd we have, well, if I look here,\nI'm gonna look at Docker machine and\n\n96\n00:05:00.950 --> 00:05:04.650\nsee that I have Virtual by four,\ninstances.\n\n97\n00:05:04.650 --> 00:05:07.870\nI'm going to call them instances.\n\n98\n00:05:07.870 --> 00:05:09.310\nThey're VMs.\nI have four of them running.\n\n99\n00:05:09.310 --> 00:05:13.340\nI have a manager, a node 1,\nnode 2, and node 3.\n\n100\n00:05:13.340 --> 00:05:19.360\nOkay, we'll,\nI did this previous to us coming on air,\n\n101\n00:05:19.360 --> 00:05:21.930\nbecause this takes a little\nwhile to provision.\n\n102\n00:05:21.930 --> 00:05:24.630\nBut so you know how to get this done,\n\n103\n00:05:24.630 --> 00:05:27.390\nwe're gonna dive into batch\nscripting a little bit.\n\n104\n00:05:27.390 --> 00:05:31.910\nIf you're on Windows, I'm very sorry, you\nmay have to just do this one at a time.\n\n105\n00:05:31.910 --> 00:05:33.550\nAnd we'll talk about that.\n\n106\n00:05:33.550 --> 00:05:41.440\nBut what happened was is I said\ndocker-machine create -d virtual box.\n\n107\n00:05:41.440 --> 00:05:44.130\nAnd if you haven't checked out\nthe Docker Machine episodes,\n\n108\n00:05:44.130 --> 00:05:46.050\nyou should definitely check those out.\n\n109\n00:05:46.050 --> 00:05:47.610\nI'm just creating a virtual machine,\n\n110\n00:05:47.610 --> 00:05:52.440\nVM, kind of the base spin up, and\nI'm going to give them a name.\n\n111\n00:05:52.440 --> 00:05:53.820\nAnd I said manager.\n\n112\n00:05:53.820 --> 00:05:57.530\nOkay, that created the first one,\ncuz I had a little different name.\n\n113\n00:05:57.530 --> 00:06:00.460\nBut what about if I just wanna set it and\nforget it, right?\n\n114\n00:06:00.460 --> 00:06:03.400\nI want to start up node 1, node 2, node 3.\n\n115\n00:06:03.400 --> 00:06:08.220\nIf you have a batch environment, something\nyou can do batch scripting in, and\n\n116\n00:06:08.220 --> 00:06:12.140\nagain this is available\nin other environments.\n\n117\n00:06:12.140 --> 00:06:18.500\nI'm not entirely sure what goes into that,\nlike batching and things of that nature.\n\n118\n00:06:18.500 --> 00:06:22.262\nBut I can say for in, and then 1, 2,\n\n119\n00:06:22.262 --> 00:06:28.388\n3: do docker-machine create -d and\nvirtualbox, right?\n\n120\n00:06:28.388 --> 00:06:32.233\nLooks exactly like we normally are.\n\n121\n00:06:32.233 --> 00:06:33.112\nNode -$.\n\n122\n00:06:33.112 --> 00:06:38.371\nNow, this dollar sign says\ntake whatever i is for\n\n123\n00:06:38.371 --> 00:06:42.230\nthe loop, and substitute it here.\n\n124\n00:06:42.230 --> 00:06:46.760\nSo the first time through this will be 1,\nthe next time through it will be 2, so\n\n125\n00:06:46.760 --> 00:06:47.588\non and so forth.\n\n126\n00:06:47.588 --> 00:06:52.060\nAnd, well, semi-colon there,\nand you hit done.\n\n127\n00:06:52.060 --> 00:06:55.090\nAnd if I were to run this,\nlet me make sure.\n\n128\n00:06:55.090 --> 00:06:57.600\nI don't think I have any syntax errors.\n\n129\n00:06:57.600 --> 00:06:58.920\nDo you see any syntax errors, Daniel?\n\n130\n00:06:58.920 --> 00:07:00.120\n&gt;&gt; It does look good.\n\n131\n00:07:00.120 --> 00:07:00.690\n&gt;&gt; It looks good.\n\n132\n00:07:00.690 --> 00:07:03.690\nDan, your nose is bash, so\nwe're gonna go with it.\n\n133\n00:07:03.690 --> 00:07:05.910\nI'm not gonna run this because\nthis is actually taped.\n\n134\n00:07:05.910 --> 00:07:08.770\nIt goes one at a time and\nprovisions node one.\n\n135\n00:07:08.770 --> 00:07:12.180\nDoes all the installs, the exchange\nof TLS certificates, all of that.\n\n136\n00:07:12.180 --> 00:07:15.460\nAnd then it does node two, node three.\n\n137\n00:07:15.460 --> 00:07:21.576\nAnd I use this one line to create node-1,\nnode-2, and node-3.\n\n138\n00:07:21.576 --> 00:07:27.550\nAnd also notice they have\ndifferent IP addresses, okay?\n\n139\n00:07:27.550 --> 00:07:28.330\nSo that's important.\n\n140\n00:07:28.330 --> 00:07:32.780\nThis is almost like I created several\ninstances on a Cloud service,\n\n141\n00:07:32.780 --> 00:07:36.560\nwhatever your favorite Cloud service is,\nand they exist somewhere else.\n\n142\n00:07:36.560 --> 00:07:40.294\n&gt;&gt; And these are Docker Machines or\nare they containers?\n\n143\n00:07:40.294 --> 00:07:42.359\n&gt;&gt; So these are actual full VMs.\n\n144\n00:07:42.359 --> 00:07:45.352\n&gt;&gt; Okay.\n&gt;&gt; They have Docker installed on them,\n\n145\n00:07:45.352 --> 00:07:47.996\nthe newest Docker engine installed.\n\n146\n00:07:47.996 --> 00:07:55.366\nAnd actually, if I zoom out a little bit,\nI have Version 17.03-1 community edition.\n\n147\n00:07:55.366 --> 00:07:56.961\nInstalled on each of these.\n\n148\n00:07:56.961 --> 00:07:59.753\n&gt;&gt; Probably gonna answer my own question\ncuz it says docker machine create.\n\n149\n00:07:59.753 --> 00:08:00.560\n&gt;&gt; [LAUGH] There we go.\n\n150\n00:08:00.560 --> 00:08:02.130\n&gt;&gt; [LAUGH] There it is.\n\n151\n00:08:02.130 --> 00:08:03.443\n&gt;&gt; You never know.\n\n152\n00:08:03.443 --> 00:08:06.932\nSo there's a lot of tools in the Docker\necosystem that are kinda burgeoning out.\n\n153\n00:08:06.932 --> 00:08:11.320\nAnd we're taking a look at just the ones\nthat are kinda put up at the Docker\n\n154\n00:08:11.320 --> 00:08:12.419\nin group, right.\n\n155\n00:08:13.930 --> 00:08:15.110\nThere's a bunch of ways to do this.\n\n156\n00:08:15.110 --> 00:08:17.580\nThere's alternative run times for this.\n\n157\n00:08:17.580 --> 00:08:21.010\nThere's ways to get this up and\nrunning that are not necessarily Docker.\n\n158\n00:08:21.010 --> 00:08:24.580\nBut we are taking a look at\nthe Docker tools specifically.\n\n159\n00:08:24.580 --> 00:08:27.540\nNow, if I wanted to run\njust single containers,\n\n160\n00:08:27.540 --> 00:08:29.190\nI wouldn't need something like this.\n\n161\n00:08:29.190 --> 00:08:33.440\nIf I wanted to just play around a bit,\nI don't need something like this.\n\n162\n00:08:33.440 --> 00:08:38.110\nBut if I wanted to dip my toe\ninto maybe distributed systems,\n\n163\n00:08:38.110 --> 00:08:42.820\nmaybe multiple containers that are running\na web server to look at load balancing, or\n\n164\n00:08:42.820 --> 00:08:47.930\nsetting up a proxy, or something of that\nnature, this is a great setup to try\n\n165\n00:08:47.930 --> 00:08:53.300\nlocally without having to interact\nwith a cloud provider and the such.\n\n166\n00:08:53.300 --> 00:08:57.520\nNow once we have those machines up and\nrunning, what do we want to do?\n\n167\n00:08:58.820 --> 00:09:04.410\nWell, the first part is right now,\nswarm does not exist, and\n\n168\n00:09:04.410 --> 00:09:12.300\nthe only way I can make this happen is if\nmy Docker version is above 1.12, okay.\n\n169\n00:09:12.300 --> 00:09:16.640\nSo we have to be above 1.12 but\nI'm gonna go into Docker machine and\n\n170\n00:09:16.640 --> 00:09:17.980\nSSH into the manager.\n\n171\n00:09:19.030 --> 00:09:20.550\nSo here's my manager.\n\n172\n00:09:22.320 --> 00:09:27.940\nAnd just to make sure,\nI'm gonna say, docker --version.\n\n173\n00:09:27.940 --> 00:09:29.640\nThis says 17, okay.\n\n174\n00:09:29.640 --> 00:09:35.510\nWell, another check,\nif I say docker, and I can scroll up,\n\n175\n00:09:35.510 --> 00:09:42.508\nand by default, I see this swarm\nmanagement command, I'm good to go.\n\n176\n00:09:42.508 --> 00:09:49.550\nBefore docker 1.12 docker swarm did exist,\nbut it was kind of it's separate thing.\n\n177\n00:09:49.550 --> 00:09:52.970\nIt is now bundled with\nthe Docker engine install.\n\n178\n00:09:52.970 --> 00:09:55.440\nIt's not docker compose,\nit's not docker machine,\n\n179\n00:09:55.440 --> 00:10:00.170\nit is kind of bundled all together\nwith the docker runtime, okay?\n\n180\n00:10:00.170 --> 00:10:05.190\nSo let's take a look at docker swarm,\nand I'm on the manager node, and\n\n181\n00:10:05.190 --> 00:10:07.870\nyou'll see why I'm calling\nthat manager in just a moment.\n\n182\n00:10:07.870 --> 00:10:10.800\nSo docker swarm --help.\n\n183\n00:10:10.800 --> 00:10:11.980\nWhat can I do?\n\n184\n00:10:11.980 --> 00:10:15.590\nI can init, so\nI can actually start at the swarm.\n\n185\n00:10:15.590 --> 00:10:19.995\nOkay, using the bee analogy,\nthis would be like the queen.\n\n186\n00:10:19.995 --> 00:10:22.035\nI can join, I can get a join token and\n\n187\n00:10:22.035 --> 00:10:24.560\nwe'll see what that\nmeans in just a moment.\n\n188\n00:10:24.560 --> 00:10:25.540\nI can leave the swarm.\n\n189\n00:10:25.540 --> 00:10:29.828\nI can unlock the swarm, unlock the key,\nor update the swarm, okay.\n\n190\n00:10:29.828 --> 00:10:31.440\nWe're gonna start with very,\n\n191\n00:10:31.440 --> 00:10:35.900\nvery kind of introductory level just\nto see how this all works together.\n\n192\n00:10:35.900 --> 00:10:37.220\nSo I can initialize and\n\n193\n00:10:37.220 --> 00:10:39.990\njoin, those are the two things\nthat we're gonna worry about.\n\n194\n00:10:39.990 --> 00:10:42.620\nOkay, well how do I init?\n\n195\n00:10:42.620 --> 00:10:48.760\nSo I'm gonna say docker swarm on\nthe manager node again, init --help.\n\n196\n00:10:48.760 --> 00:10:53.660\nAnd I get a bunch of things that I can do.\n\n197\n00:10:53.660 --> 00:10:57.592\nWell, this is a nice and\nit typically doesn't print out so\n\n198\n00:10:57.592 --> 00:11:02.968\nnasty I have this zoomed in so things are\neasier to read on screen but it will print\n\n199\n00:11:02.968 --> 00:11:08.773\nout in two columns like this advertise\nadder string, advertise the address, okay.\n\n200\n00:11:08.773 --> 00:11:13.569\nWell this is a short description,\nwhere would I go to find out.\n\n201\n00:11:13.569 --> 00:11:15.733\nWhoa, that's some crazy stuff right there.\n\n202\n00:11:15.733 --> 00:11:18.719\ndocker swarm init --help.\n\n203\n00:11:18.719 --> 00:11:19.580\nGet that back there.\n\n204\n00:11:21.050 --> 00:11:25.040\nWhere would I go to find out\na little more about how to use this?\n\n205\n00:11:25.040 --> 00:11:30.290\nWell, we're gonna flip over to Chrome and\nif you look at docs.docker.com/engineswarm\n\n206\n00:11:30.290 --> 00:11:34.500\nbecause Swarm is now a part of\nthe standard docker engine install.\n\n207\n00:11:35.500 --> 00:11:37.838\nIt will talk about swarn mode.\n\n208\n00:11:37.838 --> 00:11:44.928\nAnd it tells you, you have to have version\n1.12 or later, so that's important.\n\n209\n00:11:44.928 --> 00:11:47.910\nAnd it will manage a cluster\nof docker engines.\n\n210\n00:11:47.910 --> 00:11:51.040\nSo these VMs are just kind of docker run\n\n211\n00:11:51.040 --> 00:11:54.530\ntimes to spin up containers\ndistributed over multiple places.\n\n212\n00:11:56.250 --> 00:12:01.100\nSo, what does it do, it has all of these\nfeatures, I can scale, I can manage\n\n213\n00:12:01.100 --> 00:12:06.470\na cluster, it has a decentralized design\nwhich is important because well, if\n\n214\n00:12:06.470 --> 00:12:09.740\nyou don't wanna put all of your resources,\nnot all your eggs in one basket, right?\n\n215\n00:12:09.740 --> 00:12:12.780\nYou don't,\nwell this one easy two instances or\n\n216\n00:12:12.780 --> 00:12:14.350\nthis one digital ocean droplet.\n\n217\n00:12:15.390 --> 00:12:21.267\nIt runs my web server, my database,\nmy backup service all everything.\n\n218\n00:12:21.267 --> 00:12:23.120\nWell, what happens if it goes down?\n\n219\n00:12:23.120 --> 00:12:25.340\nWell, everything is done, right?\n\n220\n00:12:25.340 --> 00:12:27.931\nIt would be nice if I\ncould distribute those,\n\n221\n00:12:27.931 --> 00:12:32.703\neven though the likelihood of failure of\neach one of those nodes is higher, right,\n\n222\n00:12:32.703 --> 00:12:36.340\ncollectively I would now can\nbuild in redundancy or failover.\n\n223\n00:12:36.340 --> 00:12:37.670\nOkay, well that's nice.\n\n224\n00:12:37.670 --> 00:12:41.980\nAnd each one of those nodes can have\na bunch of containers that well,\n\n225\n00:12:41.980 --> 00:12:44.680\nI can use those resources\nto the full extent.\n\n226\n00:12:46.590 --> 00:12:49.660\nThey also give you a basic\nrundown of the commands.\n\n227\n00:12:49.660 --> 00:12:52.890\nSo if we scroll in here,\nwe have a int and join, and then\n\n228\n00:12:52.890 --> 00:12:56.500\nnotice that it talks about this service,\nand we'll see that in just a moment.\n\n229\n00:12:56.500 --> 00:12:59.490\nService create, service inspect,\nls, remote, what is a service?\n\n230\n00:12:59.490 --> 00:13:03.330\nWell, we talked about a service before,\nwe can think of them as a container or\n\n231\n00:13:03.330 --> 00:13:08.020\na series of containers that have a job,\nthey do one thing.\n\n232\n00:13:08.020 --> 00:13:13.860\nSo let's take a look at swarm init, and\nI come out here and it says init options,\n\n233\n00:13:13.860 --> 00:13:17.490\nadvertise, addr, auto lock,\nI don't even know what some of this is.\n\n234\n00:13:17.490 --> 00:13:19.380\nHow do I find out, an example.\n\n235\n00:13:20.420 --> 00:13:24.652\nSo here's a very basic example.\n\n236\n00:13:24.652 --> 00:13:27.048\n-- advertise -addr.\n\n237\n00:13:27.048 --> 00:13:30.000\nThis is one thing that kinda\nfrustrated me at the beginning.\n\n238\n00:13:30.000 --> 00:13:31.790\nI would say docker swarm init.\n\n239\n00:13:31.790 --> 00:13:36.950\nAnd that will work, but\nnow it's kinda weird to manage, okay?\n\n240\n00:13:38.140 --> 00:13:39.160\nAnd then we'll get this print out.\n\n241\n00:13:39.160 --> 00:13:43.920\nSo let's actually do that, some of these\nother things are not necessary for\n\n242\n00:13:43.920 --> 00:13:47.170\na very basic install,\ngetting your feet wet here.\n\n243\n00:13:47.170 --> 00:13:51.200\nBut there's ways to well,\nget a heart beat.\n\n244\n00:13:51.200 --> 00:13:54.160\nAre things still alive for\nvarious management roles?\n\n245\n00:13:55.220 --> 00:14:00.140\nSo now back on the docker manager node,\nI'm gonna say docker swarm\n\n246\n00:14:00.140 --> 00:14:05.372\ninit --advertise -addr.\n\n247\n00:14:05.372 --> 00:14:10.260\nWell, if I come over here\nit says that I need an IP.\n\n248\n00:14:10.260 --> 00:14:15.950\nWhere can I find an IP for the manager\nnode created by Docker machine?\n\n249\n00:14:15.950 --> 00:14:20.337\nWell I'm inside the know\nthere are ways to get it but\n\n250\n00:14:20.337 --> 00:14:23.296\nwhat I found the easiest way is to,\n\n251\n00:14:23.296 --> 00:14:27.481\nwell just open up another\ncommand line prompt and\n\n252\n00:14:27.481 --> 00:14:31.890\nsay docker-machine ls and\nthere is my IP address.\n\n253\n00:14:31.890 --> 00:14:32.500\nRight there.\n\n254\n00:14:32.500 --> 00:14:33.710\nSo there's my manager.\n\n255\n00:14:33.710 --> 00:14:35.660\nThere's my associated IP address.\n\n256\n00:14:35.660 --> 00:14:36.480\nI'm gonna copy that.\n\n257\n00:14:36.480 --> 00:14:38.180\nSo I use the keyboard shortcut.\n\n258\n00:14:38.180 --> 00:14:40.160\nYou could right-click and copy that.\n\n259\n00:14:40.160 --> 00:14:45.100\nAnd I go over back to the machine or\nthe manager node, not the machine node.\n\n260\n00:14:45.100 --> 00:14:46.060\nMisspoke there.\n\n261\n00:14:46.060 --> 00:14:48.065\nCareful, there's a lot of words.\n\n262\n00:14:48.065 --> 00:14:50.500\n&gt;&gt; [LAUGH]\n&gt;&gt; Just put the words together and\n\n263\n00:14:50.500 --> 00:14:52.090\nthen I'm going to paste.\n\n264\n00:14:52.090 --> 00:14:56.360\nSo, essentially what I'm saying is\nthis is becoming the manager and\n\n265\n00:14:56.360 --> 00:15:01.770\nI'm broadcasting this IP and\nthis will allow other nodes to join.\n\n266\n00:15:03.420 --> 00:15:07.950\nSo, there we go,\nthe current node is now a manager.\n\n267\n00:15:07.950 --> 00:15:09.160\nWe're gonna use one manager.\n\n268\n00:15:09.160 --> 00:15:13.150\nIdeally you should have multiple managers\njust in case the manager dies because,\n\n269\n00:15:13.150 --> 00:15:17.300\nwell what happens in a swarm\nof bees if the queen dies?\n\n270\n00:15:17.300 --> 00:15:19.307\n&gt;&gt; They have no like\ncentralized management.\n\n271\n00:15:19.307 --> 00:15:21.710\nThey all kinda do their own thing or\nlook for another queen.\n\n272\n00:15:21.710 --> 00:15:29.410\n&gt;&gt; Yup, exactly, so it kinda just falls\napart, so there's actually a quick story.\n\n273\n00:15:29.410 --> 00:15:33.140\nThere's a set of ants called Argentina\nants that have multiple queens for\n\n274\n00:15:33.140 --> 00:15:34.140\nthat exact reason.\n\n275\n00:15:34.140 --> 00:15:36.480\nIf one dies-\n&gt;&gt; Redundant queens.\n\n276\n00:15:36.480 --> 00:15:39.520\n&gt;&gt; Yep, and they progress by budding.\n\n277\n00:15:39.520 --> 00:15:41.720\nSo the queens break off and kind of,\n\n278\n00:15:41.720 --> 00:15:45.750\nso it can kill one queen, they can still\nresurge because they have multiple queen.\n\n279\n00:15:45.750 --> 00:15:46.970\nThey have failover.\n\n280\n00:15:46.970 --> 00:15:48.370\nSo hey, the more you know.\n\n281\n00:15:48.370 --> 00:15:49.845\n&gt;&gt; That's their DR save.\n\n282\n00:15:49.845 --> 00:15:50.364\n[LAUGH].\n\n283\n00:15:50.364 --> 00:15:55.289\n&gt;&gt; So back to Docker,\nwe have our queen up and running.\n\n284\n00:15:55.289 --> 00:15:56.373\nWe're gonna use one.\n\n285\n00:15:56.373 --> 00:16:00.996\nYou should use more in a more\nproduction enviroment, but\n\n286\n00:16:00.996 --> 00:16:05.813\nthen I get this print out docker\nswarm join --token now you\n\n287\n00:16:05.813 --> 00:16:08.862\ncould try to memorize this\n&gt;&gt; Done, [LAUGH]\n\n288\n00:16:08.862 --> 00:16:11.364\n&gt;&gt; I wouldn't recommend it I dont I think\n\n289\n00:16:11.364 --> 00:16:16.720\nDaniel is lying, you could memorize\nthis or copy it down and try to type it.\n\n290\n00:16:16.720 --> 00:16:18.270\n&gt;&gt; I wanna recommend that.\n\n291\n00:16:19.330 --> 00:16:20.750\nI just-\n&gt;&gt; Copy and Paste.\n\n292\n00:16:20.750 --> 00:16:22.760\n&gt;&gt; Just copy and paste, all right.\n\n293\n00:16:22.760 --> 00:16:25.612\nNow, where we're going to run,\nthis command.\n\n294\n00:16:27.331 --> 00:16:30.442\nTo add a manager to this\nform dockersformtokenman.\n\n295\n00:16:30.442 --> 00:16:32.170\nWe don't want to add a man.\n\n296\n00:16:32.170 --> 00:16:33.710\nWe wanna add workers, right.\n\n297\n00:16:33.710 --> 00:16:35.890\nOr I'll have a swarm with just a queen.\n\n298\n00:16:35.890 --> 00:16:37.066\nWe need workers.\n\n299\n00:16:37.066 --> 00:16:38.070\n&gt;&gt; Alright.\n\n300\n00:16:38.070 --> 00:16:39.290\n&gt;&gt; So what am I going to do?\n\n301\n00:16:39.290 --> 00:16:45.122\nI'm gonna exit out of the manager mode,\nend docker machine ls,\n\n302\n00:16:45.122 --> 00:16:49.234\nthere's node-1, node-2, node-3.\n\n303\n00:16:49.234 --> 00:16:52.500\nThose are our workers so\nhow do we get those to join?\n\n304\n00:16:52.500 --> 00:16:59.020\nWe can ssh into each one of the nodes\nlike node -1, and then run that command.\n\n305\n00:16:59.020 --> 00:17:03.180\nBut, with the docker machine\nssh I can just kind of send\n\n306\n00:17:03.180 --> 00:17:05.020\nthat off to be run for me.\n\n307\n00:17:05.020 --> 00:17:08.770\nSo I'm going to paste, so\ndocker machine ssh node -1,\n\n308\n00:17:08.770 --> 00:17:14.060\npaste, and the node has joined\nthe swarm as a worker, okay.\n\n309\n00:17:14.060 --> 00:17:17.704\ndocker machine ssh node 2, paste.\n\n310\n00:17:17.704 --> 00:17:20.050\nIt's joined as a worker.\n\n311\n00:17:21.370 --> 00:17:27.290\ndocker machine ssh node-3, paste.\n\n312\n00:17:28.340 --> 00:17:31.870\nAnd now, I have three workers\nalong with my manager node.\n\n313\n00:17:33.420 --> 00:17:37.240\nSo okay, let's look and\nsee if anything has changed in the output.\n\n314\n00:17:38.350 --> 00:17:42.150\nIt all looks the same, and\nyou'll notice this is one of the key.\n\n315\n00:17:42.150 --> 00:17:44.430\nI got this swarm tag here.\n\n316\n00:17:44.430 --> 00:17:49.930\nThere is a way to provision\nswarm using docker machine upon\n\n317\n00:17:49.930 --> 00:17:54.860\nprovisioning, but it involves like\nadding additional command line flags.\n\n318\n00:17:54.860 --> 00:17:58.870\nI think it's better to look at how that's\nactually happening instead of just,\n\n319\n00:17:58.870 --> 00:18:01.130\nI'll just run this one command and\nboom, you're done.\n\n320\n00:18:01.130 --> 00:18:04.540\nSo, we're going through the kinda\na hard way to see how this works out.\n\n321\n00:18:05.960 --> 00:18:11.929\nOkay, so, Justine you're telling\nme that we have workers and\n\n322\n00:18:11.929 --> 00:18:14.820\nmanagers in-\n&gt;&gt; This worm is working, yeah.\n\n323\n00:18:14.820 --> 00:18:16.410\n&gt;&gt; Boom, got a swarm.\n\n324\n00:18:16.410 --> 00:18:18.160\nWell, it's not doing anything interesting.\n\n325\n00:18:18.160 --> 00:18:21.000\nSo, we should probably make it do that.\n\n326\n00:18:21.000 --> 00:18:23.330\nTypically, what will happen is well,\n\n327\n00:18:23.330 --> 00:18:27.390\nyou're going to go into manager node\nbecause that's what managing the swarm.\n\n328\n00:18:27.390 --> 00:18:31.490\nSo docker-machine ssh manager,\nand you can name that it,\n\n329\n00:18:31.490 --> 00:18:32.686\nthere's nothing special about that name.\n\n330\n00:18:34.410 --> 00:18:41.423\nAnd if I say docker,\nwell, well docker node.\n\n331\n00:18:41.423 --> 00:18:46.910\nDocker, let's look at some of\nthese management commands.\n\n332\n00:18:49.460 --> 00:18:50.600\nHere's where it gets a little weird.\n\n333\n00:18:51.750 --> 00:18:53.206\nSwarm is how you create it.\n\n334\n00:18:55.250 --> 00:18:59.425\nService, well remember if we come\nback over here and hit back.\n\n335\n00:18:59.425 --> 00:19:07.200\nThat was a super zoom-in,\nthat was on this page of swarm commands.\n\n336\n00:19:07.200 --> 00:19:08.760\nThat's kind of weird.\n\n337\n00:19:10.150 --> 00:19:13.470\nBut then there's also this node,\nmanage swarm nodes.\n\n338\n00:19:14.580 --> 00:19:18.460\nOkay, this doesn't say anything about\nswarming the command itself, but\n\n339\n00:19:18.460 --> 00:19:21.300\nis actually part of\nthe docker swarm toolkit.\n\n340\n00:19:22.840 --> 00:19:26.561\nOkay, so I'm gonna clear out and\nI can say,\n\n341\n00:19:26.561 --> 00:19:31.500\ndocker node ls, and\nit will give me a rundown of the swarm.\n\n342\n00:19:31.500 --> 00:19:36.882\nWhat nodes are what their host name is,\nwho's the manager or who are the managers\n\n343\n00:19:36.882 --> 00:19:42.010\nif you have multiple ones and\nI can see they are ready and active.\n\n344\n00:19:42.010 --> 00:19:46.950\nI can get a quick little prenup\nusing the docker node command, and\n\n345\n00:19:46.950 --> 00:19:51.130\nthis is where the swarm set of\nfeatures get a little weird.\n\n346\n00:19:51.130 --> 00:19:54.980\nCuz you have docker swarm you have to use\nnNode to look at things, but then you have\n\n347\n00:19:54.980 --> 00:20:00.860\ndocker service and there's some other\nones too that we'll see later on.\n\n348\n00:20:00.860 --> 00:20:02.800\nSo if I look at docker node, and\n\n349\n00:20:02.800 --> 00:20:07.360\nlook at help,\ndocker node will allow you to demote and\n\n350\n00:20:07.360 --> 00:20:13.640\npromote any of the other nodes including\nthe node that you're on, the manager node.\n\n351\n00:20:13.640 --> 00:20:15.530\nTo a manager, okay.\n\n352\n00:20:16.590 --> 00:20:20.383\nYou can inspect, you can get a list,\nyou can also remove or\n\n353\n00:20:20.383 --> 00:20:24.186\nsay you're not part of the swarm anymore,\ncut you loose.\n\n354\n00:20:24.186 --> 00:20:29.700\nAnd you can update as well as see\nwhat's going on inside of each node.\n\n355\n00:20:29.700 --> 00:20:31.360\nSo, we'll come back to those.\n\n356\n00:20:31.360 --> 00:20:34.460\nSo, keep in mind docker node is for\nmanaging swarm nodes.\n\n357\n00:20:36.370 --> 00:20:42.190\nAll right, well how do you actually\ncreate, well, something, right?\n\n358\n00:20:42.190 --> 00:20:45.020\nHow do we make a swarm?\n\n359\n00:20:45.020 --> 00:20:47.060\nThat is using the service command.\n\n360\n00:20:47.060 --> 00:20:52.048\nSo, docker service create and\nreplicas 2, and\n\n361\n00:20:52.048 --> 00:20:55.710\nlet's give it a name of webserver.\n\n362\n00:20:57.846 --> 00:21:01.449\nAnd I'm gonna use a small\nimage called nginx:alpine.\n\n363\n00:21:03.368 --> 00:21:05.720\nAnd well, it says it created it.\n\n364\n00:21:05.720 --> 00:21:07.290\nHow can I do an inspection?\n\n365\n00:21:08.360 --> 00:21:13.160\nSo I can say docker service ps and\n\n366\n00:21:13.160 --> 00:21:16.520\nps the service,\nwhat was the service's name?\n\n367\n00:21:16.520 --> 00:21:17.100\nWeb server.\n\n368\n00:21:18.680 --> 00:21:20.270\nAnd there we go.\n\n369\n00:21:20.270 --> 00:21:22.510\nI have my webserver up and running.\n\n370\n00:21:22.510 --> 00:21:23.800\nLooks good.\n\n371\n00:21:23.800 --> 00:21:26.110\nSo, I now have a swarm doing something.\n\n372\n00:21:28.570 --> 00:21:33.506\nNotice I have manager and node-3, okay,\nwell that's where those two containers\n\n373\n00:21:33.506 --> 00:21:37.340\nare running, they're on node-3 and\nthe manager, all right.\n\n374\n00:21:38.440 --> 00:21:41.510\nThe amazing thing about a cluster.\n\n375\n00:21:41.510 --> 00:21:42.370\nYou know what?\n\n376\n00:21:42.370 --> 00:21:46.090\nI need 30 webservers running, okay.\n\n377\n00:21:46.090 --> 00:21:51.000\nSo docker service,\nI wonder if that's something I can do?\n\n378\n00:21:51.000 --> 00:21:53.758\nSo here are the service subcommands\nthat I can create, which we just did.\n\n379\n00:21:53.758 --> 00:21:57.620\nI can inspect,\nmaybe we'll hold off on that.\n\n380\n00:21:57.620 --> 00:21:59.650\nLike an ls, let's see, let's look at this.\n\n381\n00:21:59.650 --> 00:22:00.660\nWe looked at ls, right.\n\n382\n00:22:02.060 --> 00:22:03.830\nNo, we did a ps, excuse me.\n\n383\n00:22:03.830 --> 00:22:05.940\nSo, let's do docker service ls.\n\n384\n00:22:08.130 --> 00:22:12.410\nAnd it will tell me the webserver service,\nit's replicated.\n\n385\n00:22:13.930 --> 00:22:15.480\nAnd 2/2 running this image.\n\n386\n00:22:16.710 --> 00:22:18.410\nBut what if I want to scale.\n\n387\n00:22:18.410 --> 00:22:20.428\nWhat does scale mean?\n\n388\n00:22:20.428 --> 00:22:25.206\nI wanna create more containers to\nutilize more of those resources.\n\n389\n00:22:25.206 --> 00:22:30.570\nSo, docker service scale, and I\n\n390\n00:22:30.570 --> 00:22:35.900\ncould go look at the docks and look at how\nthis is running, but I could do a --help.\n\n391\n00:22:35.900 --> 00:22:40.000\nAnd it will say, docker service scale,\nservice equals replicas, okay?\n\n392\n00:22:40.000 --> 00:22:46.400\nDocker service scale, and\nthen what was that service's name?\n\n393\n00:22:46.400 --> 00:22:52.140\nWebserver, and Daniel, pick a number\nless than ten that's greater than two.\n\n394\n00:22:52.140 --> 00:22:52.810\n&gt;&gt; Nine.\n\n395\n00:22:52.810 --> 00:22:54.710\n&gt;&gt; Nine, let's go with nine.\n\n396\n00:22:54.710 --> 00:22:59.690\nI'm going to run 9 containers,\nwe're gonna run 9 and it says scaled to\n\n397\n00:22:59.690 --> 00:23:05.050\n9 containers across the swarm cluster,\nall right?\n\n398\n00:23:05.050 --> 00:23:10.650\nSo, if I docker service ls,\nit says they are running 9 out of 9.\n\n399\n00:23:10.650 --> 00:23:14.420\nLet's check to see how that works.\n\n400\n00:23:14.420 --> 00:23:18.766\nHow that's actually is it\nreally is it up and running?\n\n401\n00:23:18.766 --> 00:23:25.220\nSo, I'm gonna use ps to look and\nnow I have node-3 running webserver.\n\n402\n00:23:25.220 --> 00:23:29.338\nI have a manager running two\ncontainers of the Webserver,\n\n403\n00:23:29.338 --> 00:23:32.960\nI have another node-3 down here,\nand 1 2 1 2.\n\n404\n00:23:32.960 --> 00:23:37.866\nSo looks like I cannot got those spread up\nand I'm not handling the scheduling and\n\n405\n00:23:37.866 --> 00:23:40.044\nmanagement of that, the swarm is.\n\n406\n00:23:40.044 --> 00:23:44.763\nAnd it's using a set of algorithms\nI'm not mistaken, you can set it for\n\n407\n00:23:44.763 --> 00:23:49.420\nhigher availability, not higher\ndurability or high availability.\n\n408\n00:23:49.420 --> 00:23:53.546\nLet's actually go and\nsee if we can find that.\n\n409\n00:23:53.546 --> 00:23:55.283\nSkill create.\n\n410\n00:23:55.283 --> 00:23:56.357\nOur service creating.\n\n411\n00:23:56.357 --> 00:24:01.165\nWe can actually set constraints, but\n\n412\n00:24:01.165 --> 00:24:06.710\nwhen we create replicas, replicas.\n\n413\n00:24:06.710 --> 00:24:09.780\nSo what we'll do is we'll post that in\nthe show notes, should have had that,\n\n414\n00:24:09.780 --> 00:24:10.311\n[CROSSTALK].\n\n415\n00:24:10.311 --> 00:24:11.830\n&gt;&gt; It's just alluding you right now.\n\n416\n00:24:11.830 --> 00:24:13.530\n&gt;&gt; Yeah it is,\nalluding me at this very moment.\n\n417\n00:24:13.530 --> 00:24:16.840\nYou don't wanna sit and\nwatch me go, there it is.\n\n418\n00:24:16.840 --> 00:24:20.080\nIt uses a set of algorithms to determine,\nand you can set the policy for\n\n419\n00:24:20.080 --> 00:24:23.660\nthat, to determine where those\ncontainers are going to spin up.\n\n420\n00:24:23.660 --> 00:24:28.850\nYou can circumvent those using\nflags like constraint, where\n\n421\n00:24:28.850 --> 00:24:33.200\nyou can say I want these containers to\nonly be available on these certain nodes.\n\n422\n00:24:33.200 --> 00:24:34.740\nSo, there are ways around that,\n\n423\n00:24:34.740 --> 00:24:40.110\nbut it is trying its best to keep high\navailability views up and running.\n\n424\n00:24:40.110 --> 00:24:44.170\nNow, I've just been running\ncommand line stuff.\n\n425\n00:24:44.170 --> 00:24:45.434\nI may be lying.\n\n426\n00:24:45.434 --> 00:24:47.470\nIt may not work, right?\n\n427\n00:24:47.470 --> 00:24:49.667\nSo let's exit the manager node.\n\n428\n00:24:49.667 --> 00:24:54.840\nAnd that's running Enginex Alpine, so\nit should give me the Enginex printout.\n\n429\n00:24:56.350 --> 00:25:02.543\nAnd if I grab, well, this and I cop.\n\n430\n00:25:02.543 --> 00:25:06.810\nWell, if I paste, you're like,\nwell it doesn't work.\n\n431\n00:25:06.810 --> 00:25:11.070\nWell, when I created the service,\nI didn't bind any ports external.\n\n432\n00:25:11.070 --> 00:25:14.190\nSo, if I go back in,\n\n433\n00:25:16.120 --> 00:25:19.170\ncuz I think it's best to see how\nto actually get rid of a service.\n\n434\n00:25:19.170 --> 00:25:22.240\n&gt;&gt; That's interesting to know\nthat that's a web server.\n\n435\n00:25:22.240 --> 00:25:23.940\nEngineX is a web server,\nthat's what it does.\n\n436\n00:25:23.940 --> 00:25:26.774\nAnd typically, it would be on port 80.\n\n437\n00:25:26.774 --> 00:25:29.840\nBut you still have to bind it to the port\nthat you want it to be bound to.\n\n438\n00:25:29.840 --> 00:25:31.090\nIt doesn't just do that by default.\n\n439\n00:25:31.090 --> 00:25:33.138\n&gt;&gt; Right, so\nit's binding within the container.\n\n440\n00:25:33.138 --> 00:25:34.500\n&gt;&gt; Uh-huh.\n&gt;&gt; That's running\n\n441\n00:25:34.500 --> 00:25:35.970\n&gt;&gt; It's not binding it to the actual\n\n442\n00:25:35.970 --> 00:25:37.560\nmachine's port 80.\n\n443\n00:25:37.560 --> 00:25:41.610\nSo you get this pulling apart so you can-\n&gt;&gt; You're like, I'm doing it,\n\n444\n00:25:41.610 --> 00:25:43.480\njust not to where you can\nactually use me [LAUGH].\n\n445\n00:25:43.480 --> 00:25:44.950\n&gt;&gt; Yeah, exactly.\n\n446\n00:25:44.950 --> 00:25:49.120\nLet's actually look at the service,\nthere's a web server.\n\n447\n00:25:50.820 --> 00:25:53.730\nAnd if I look at help,\nI should be able to remove.\n\n448\n00:25:53.730 --> 00:25:57.976\nSo I'm gonna remove and let's see if\nthat actually gets rid of all of those,\n\n449\n00:25:57.976 --> 00:26:03.700\ndocker service rm webserver.\n\n450\n00:26:03.700 --> 00:26:08.960\nIt says it, it did, docker service ls,\nand they're all gone.\n\n451\n00:26:08.960 --> 00:26:12.085\nOkay, now I want to\nactually spin this back up.\n\n452\n00:26:12.085 --> 00:26:16.713\nSo docker service, create, and I want,\n\n453\n00:26:16.713 --> 00:26:21.605\nlet's just go ahead and\nget it back to nine,\n\n454\n00:26:21.605 --> 00:26:27.689\ngive it a name of web server,\nand say -p 80:80 and\n\n455\n00:26:27.689 --> 00:26:31.674\nwe're gonna say engine x outline.\n\n456\n00:26:34.590 --> 00:26:36.205\nAll right, says it works.\n\n457\n00:26:38.578 --> 00:26:40.150\nAnd it says it's replicated.\n\n458\n00:26:40.150 --> 00:26:47.990\nLet's make sure that it is web server.\n\n459\n00:26:47.990 --> 00:26:51.010\nAnd they are all up and running,\nso the state of them is running.\n\n460\n00:26:51.010 --> 00:26:51.720\nThat was fast.\n\n461\n00:26:51.720 --> 00:26:53.450\nAnd that's because that\nimage was already there.\n\n462\n00:26:53.450 --> 00:26:56.010\nAnd that's one of those\nbehind the scenes things.\n\n463\n00:26:56.010 --> 00:26:58.950\nEach one of those nodes, if the image\ndoesn't already exist when the request\n\n464\n00:26:58.950 --> 00:27:00.740\nis made, it has to pull the image.\n\n465\n00:27:00.740 --> 00:27:04.770\nSo sometimes they don't spin up quite this\nfast you have to give it a little bit\n\n466\n00:27:04.770 --> 00:27:06.220\nto get up and going.\n\n467\n00:27:06.220 --> 00:27:08.753\nNow that I have that\nservice bound to port 80.\n\n468\n00:27:11.710 --> 00:27:15.075\nI should be able to\nlist out those IP's and\n\n469\n00:27:15.075 --> 00:27:18.930\ngo to each one of those IP's,\nthere's NGINX.\n\n470\n00:27:18.930 --> 00:27:21.580\nLet's go to 100, which is node one.\n\n471\n00:27:21.580 --> 00:27:28.350\nThere's NGINX,tThere's node two and\nlastly node three.\n\n472\n00:27:28.350 --> 00:27:31.460\nSo, Swarm is a great\nway to test around and\n\n473\n00:27:31.460 --> 00:27:36.200\ncan actually be used to deploy distributed\nsystems that are composed of a bunch of\n\n474\n00:27:36.200 --> 00:27:39.940\ncontainers, across multiple\ncomputer resources.\n\n475\n00:27:39.940 --> 00:27:40.900\nIncredibly powerful.\n\n476\n00:27:40.900 --> 00:27:44.770\n&gt;&gt; Very, very cool, it's basically like\ngiving you the ability to, we were talking\n\n477\n00:27:44.770 --> 00:27:48.970\nabout this before the show, is to create\na private on-premises cloud, right?\n\n478\n00:27:48.970 --> 00:27:52.870\nCuz it's inside of your computer,\nbuild that swarm out and\n\n479\n00:27:52.870 --> 00:27:56.290\nbe able to scale out as\nmuch as you need to over\n\n480\n00:27:56.290 --> 00:28:00.460\na vast mount of actual virtual machines\nthat's created using these commands.\n\n481\n00:28:00.460 --> 00:28:03.689\nA very cool stuff,\nvery powerful allows you to do that.\n\n482\n00:28:03.689 --> 00:28:08.174\nThat is one of the advantages of\nusing virtualization over traditional\n\n483\n00:28:08.174 --> 00:28:12.882\nhardware based services because,\nto scale out in traditional hardware,\n\n484\n00:28:12.882 --> 00:28:17.840\nI gotta go buy that stuff, slap an EngineX\non it plus a Linux distribution.\n\n485\n00:28:17.840 --> 00:28:20.370\nIt takes time, effort, electricity, money.\n\n486\n00:28:20.370 --> 00:28:21.760\nThis is a whole lot easier.\n\n487\n00:28:21.760 --> 00:28:25.200\nAnd especially for\ntesting purposes, this is fantastic.\n\n488\n00:28:25.200 --> 00:28:26.810\n&gt;&gt; It is incredibly powerful.\n\n489\n00:28:26.810 --> 00:28:30.370\nAnd what's amazing, Daniel,\nis well I only had four nodes,\n\n490\n00:28:30.370 --> 00:28:31.670\nright, I had four virtual machines.\n\n491\n00:28:31.670 --> 00:28:34.640\nLet's assume these are physical servers.\n\n492\n00:28:34.640 --> 00:28:40.720\nWell, I'm running nine containers,\nrunning nine different copies of EngineX.\n\n493\n00:28:40.720 --> 00:28:43.530\nAnd if I made this image,\nthis is my application image,\n\n494\n00:28:43.530 --> 00:28:48.220\nthat would be nine different applications\nserving up, or like the web server,\n\n495\n00:28:48.220 --> 00:28:50.360\nserving up my web application.\n\n496\n00:28:50.360 --> 00:28:55.029\nAll right, now we can go one further and\ncreate well, a proxy or\n\n497\n00:28:55.029 --> 00:28:59.704\nsome load balancing node that\nwould then balance between these\n\n498\n00:28:59.704 --> 00:29:04.220\nIPs instead of visiting each\none of those IPs individually.\n\n499\n00:29:04.220 --> 00:29:08.475\nAnd now I essentially have four\nutilization of that hardware and\n\n500\n00:29:08.475 --> 00:29:10.380\nit all looks like one thing.\n\n501\n00:29:10.380 --> 00:29:14.340\nAnd well,\nI'm not using that hardware like I should.\n\n502\n00:29:14.340 --> 00:29:16.360\nLet's just turn it up to 11.\n\n503\n00:29:16.360 --> 00:29:18.570\n&gt;&gt; That's what I call worth\nmy money right there.\n\n504\n00:29:18.570 --> 00:29:21.180\nSo, very cool stuff, very powerful stuff.\n\n505\n00:29:21.180 --> 00:29:23.980\nJustin, thank you so\nmuch again for joining us here and\n\n506\n00:29:23.980 --> 00:29:27.820\nteaching us how we can implement\nthat within our systems.\n\n507\n00:29:27.820 --> 00:29:28.823\nBut that being said,\n\n508\n00:29:28.823 --> 00:29:32.893\nI'm looking at our clock, and guess what,\nyep we've definitely come to that time yet\n\n509\n00:29:32.893 --> 00:29:35.926\nagain where we thank you for\njoining us, and watching our show.\n\n510\n00:29:35.926 --> 00:29:37.885\nAnd we thank Justin for\nbeing here as well, but\n\n511\n00:29:37.885 --> 00:29:39.400\nit's time to sign off for IT Pro TV.\n\n512\n00:29:39.400 --> 00:29:42.600\nI've been your host Daniel Lowrie,\n&gt;&gt; And I'm Justin Dennison.\n\n513\n00:29:42.600 --> 00:29:44.104\n&gt;&gt; And we'll see you next time.\n\n514\n00:29:44.104 --> 00:29:51.140\n[MUSIC]\n\n515\n00:29:51.140 --> 00:29:54.385\nThank you for watching ITProTV.\n\n",
          "vimeoId": "212912417"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to leverage Digital Ocean to deploy a Docker Swarm. They will walk you through the step necessary to create, configure, connect, and deploy a web service.",
          "length": "852",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-14-2-docker_swarm_with_digital_ocean-040617-PGM.00_13_59_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-14-2-docker_swarm_with_digital_ocean-040617-PGM.00_13_59_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-14-2-docker_swarm_with_digital_ocean-040617-PGM.00_13_59_02.Still001-sm.jpg",
          "title": "Docker Swarm with Digital Ocean",
          "transcript": "WEBVTT\n\n1\n00:00:00.190 --> 00:00:04.050\nWelcome to ITPro.TV I'm your\nhost Don Pezet [CROSSTALK]\n\n2\n00:00:04.050 --> 00:00:07.852\n[MUSIC]\n\n3\n00:00:07.852 --> 00:00:08.352\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:12.090 --> 00:00:13.653\n&gt;&gt; All right greetings everyone and\n\n5\n00:00:13.653 --> 00:00:16.330\nwelcome to another great\nepisode of ITProTV.\n\n6\n00:00:16.330 --> 00:00:17.460\nI'm your host Daniel Lowrie.\n\n7\n00:00:17.460 --> 00:00:21.480\nAnd in today's episode, we're back with\nmore of our introduction to Docker series\n\n8\n00:00:21.480 --> 00:00:24.380\nand joining us in the studio again,\nour good friend Mr. Justin Dennison.\n\n9\n00:00:24.380 --> 00:00:26.290\nJustin, welcome back sir and\nhow's it going?\n\n10\n00:00:26.290 --> 00:00:29.910\n&gt;&gt; It's going well, I'm glad to be back in\nthe studio Daniel and how are you today?\n\n11\n00:00:29.910 --> 00:00:30.690\n&gt;&gt; I'm very well, thank you.\n\n12\n00:00:30.690 --> 00:00:34.270\n&gt;&gt; That's always good, it always makes\nme happy when you're doing well.\n\n13\n00:00:34.270 --> 00:00:36.360\nBut we are back with more Docker.\n\n14\n00:00:36.360 --> 00:00:37.210\nIn particular, you know,\n\n15\n00:00:37.210 --> 00:00:41.000\nI was thinking I showed Docker Swarm\nin a previous episode, right?\n\n16\n00:00:41.000 --> 00:00:45.600\nGetting things up, it was pretty cool,\nit's we used a very contrived example but\n\n17\n00:00:45.600 --> 00:00:50.440\nI wanted to make sure that you know it's\nnot limited just to those docker machine\n\n18\n00:00:50.440 --> 00:00:54.400\nvirtual box instances that we\nwere using on our local computer.\n\n19\n00:00:54.400 --> 00:00:57.140\nAnd so we're gonna take quick\naside here and take a look,\n\n20\n00:00:57.140 --> 00:01:01.030\nwhat happens if I use a cloud provider\nto actually spin up those instances,\n\n21\n00:01:01.030 --> 00:01:04.350\ndoes Docker Swarm still\nbehave in a similar way.\n\n22\n00:01:04.350 --> 00:01:07.840\nAnd well I think there's nothing better\nto do than go ahead and get started.\n\n23\n00:01:07.840 --> 00:01:11.560\nSo let's take a look at my screen here and\njust as a quick review,\n\n24\n00:01:11.560 --> 00:01:12.450\nI'm not gonna run this.\n\n25\n00:01:12.450 --> 00:01:16.380\nI actually provisioned these\nmachines before we started filming.\n\n26\n00:01:16.380 --> 00:01:20.631\nMainly because it does take a little\nwhile and interestingly enough,\n\n27\n00:01:20.631 --> 00:01:24.954\nI was reading couple of articles\nabout using docker machine to, well,\n\n28\n00:01:24.954 --> 00:01:29.802\ncreate great numbers of virtual machines\nand maybe that's not quite the deal.\n\n29\n00:01:29.802 --> 00:01:34.414\nCuz these three, so\nif we look here I ran 4i and 1, 2, 3,\n\n30\n00:01:34.414 --> 00:01:38.770\ndocker machine-create -d\ndigitalocean with a token.\n\n31\n00:01:38.770 --> 00:01:43.470\nAnd I've already put the token,\nif you are unaware of how that works.\n\n32\n00:01:43.470 --> 00:01:45.134\nDefinitely go check out\nthe previous episode.\n\n33\n00:01:45.134 --> 00:01:49.470\nI actually show where to get\nthe token in Digital Ocean and\n\n34\n00:01:49.470 --> 00:01:52.190\nset it as an environment variable.\n\n35\n00:01:53.440 --> 00:01:55.560\nThis took about 15 minutes.\n\n36\n00:01:55.560 --> 00:01:56.656\nThat's just three machines.\n\n37\n00:01:56.656 --> 00:02:02.920\nThat, if you need a thousand of them\nmay not be the best way to go about it.\n\n38\n00:02:02.920 --> 00:02:04.572\nSo do keep that in mind.\n\n39\n00:02:04.572 --> 00:02:08.170\nThere may be better options for building\nan incredibly large infrastructure.\n\n40\n00:02:08.170 --> 00:02:12.020\nBut with that said, if you need a thousand\nvirtual machines, you probably have\n\n41\n00:02:12.020 --> 00:02:16.340\nvery large problems that are gonna have\na difficult time dealing with anyway.\n\n42\n00:02:16.340 --> 00:02:20.890\nSo this is the command I ran, and\nIt uses the digital ocean token that's\n\n43\n00:02:20.890 --> 00:02:24.620\nstored in the environmental variable,\nand created the three nodes.\n\n44\n00:02:24.620 --> 00:02:30.130\nSo let's go ahead and clear that out and\nlook at docker -machine ls,\n\n45\n00:02:30.130 --> 00:02:32.820\nand it takes a little bit\nbecause it's pulling out.\n\n46\n00:02:32.820 --> 00:02:39.030\nNow, notice I got this error, and\nI'm kind of glad that this happened\n\n47\n00:02:39.030 --> 00:02:43.250\nbecause this error occurred and it says\ncertificate signed by unknown authority.\n\n48\n00:02:43.250 --> 00:02:48.300\nSomething went wrong there on that last\ndocker machine creation for that node.\n\n49\n00:02:48.300 --> 00:02:54.800\nSo I'm just gonna run docker-machine\nls one more time and see.\n\n50\n00:02:54.800 --> 00:02:56.310\nIt kind of corrected itself.\n\n51\n00:02:56.310 --> 00:02:57.692\nSo be very careful.\n\n52\n00:02:57.692 --> 00:03:00.921\nI said on a previous episode, if you\nsee the certificate signed by unknown\n\n53\n00:03:00.921 --> 00:03:03.650\nauthority, then you may have\nto regenerate the certs.\n\n54\n00:03:03.650 --> 00:03:06.060\nWhich is a command with docker machine.\n\n55\n00:03:06.060 --> 00:03:10.463\nAlways double check because what I found\nis sometimes the connection will flicker\n\n56\n00:03:10.463 --> 00:03:14.308\nout as it's making a hit to the API,\nto check the certs and everything.\n\n57\n00:03:14.308 --> 00:03:18.012\nAnd it will say the certificate is bad but\nreally what happened was well,\n\n58\n00:03:18.012 --> 00:03:20.550\nit just didn't get all the information.\n\n59\n00:03:20.550 --> 00:03:23.260\nSo be careful there,\nwe are up and running, so\n\n60\n00:03:23.260 --> 00:03:27.438\nnow I haven't named anything manager\nlike I did in a previous episode.\n\n61\n00:03:27.438 --> 00:03:31.100\nI'm just gonna use node\none as my manager node.\n\n62\n00:03:31.100 --> 00:03:37.260\nSo even though I am,\nas we've seen also in a previous episode.\n\n63\n00:03:37.260 --> 00:03:39.950\nThese are off premises,\nthey're not on my computer,\n\n64\n00:03:39.950 --> 00:03:41.770\nthey're running on digital ocean.\n\n65\n00:03:41.770 --> 00:03:42.462\nIn their data center.\n\n66\n00:03:42.462 --> 00:03:50.270\nI can say docker-machine ssh\nnode-1 that's important.\n\n67\n00:03:50.270 --> 00:03:53.600\nNow, I should run these updates just for\nthe sake of time.\n\n68\n00:03:53.600 --> 00:03:58.120\nI'm not going to, that is, don't do that.\n\n69\n00:03:58.120 --> 00:04:00.600\nJust let's just make sure everybody knows.\n\n70\n00:04:00.600 --> 00:04:01.180\nDon't do that.\n\n71\n00:04:01.180 --> 00:04:07.024\nYou should run those updates, make any\nsecurity patches, things of that nature.\n\n72\n00:04:07.024 --> 00:04:09.700\nBut if I look, Docker is installed.\n\n73\n00:04:09.700 --> 00:04:12.116\nAnd I'm gonna say, docker swarm.\n\n74\n00:04:12.116 --> 00:04:16.850\nWell I'm in trouble because\nI don't know the IP address.\n\n75\n00:04:16.850 --> 00:04:21.460\nI know when I initialize the swarm\nthat I need an initial, for\n\n76\n00:04:21.460 --> 00:04:25.130\nthe manager, I need to advertise the IP.\n\n77\n00:04:25.130 --> 00:04:30.026\nSo before I do that, I could open\nup another panel, another terminal.\n\n78\n00:04:30.026 --> 00:04:37.870\nAnd say docker-machine ls, And\nwait for it, it takes a little bit.\n\n79\n00:04:37.870 --> 00:04:41.660\nAnd then find the IP address\nright here for node one,\n\n80\n00:04:41.660 --> 00:04:43.340\nand I'm gonna go ahead and copy.\n\n81\n00:04:43.340 --> 00:04:48.164\nBut if I didn't have that ability,\nlet's say I'm only limited to the terminal\n\n82\n00:04:48.164 --> 00:04:51.482\ninterface and\nopening another one is kind of an issue.\n\n83\n00:04:51.482 --> 00:04:56.026\nOr I already had this open,\nI can just go and look for\n\n84\n00:04:56.026 --> 00:04:59.958\nthe IP address In my\nDigital Ocean console.\n\n85\n00:04:59.958 --> 00:05:05.200\nSo it's the exact same, or it should be\nthe exact same, and it is, I'm lucky.\n\n86\n00:05:05.200 --> 00:05:09.580\nSo now I'm gonna hop back over,\nI'm back into my node one instance.\n\n87\n00:05:11.003 --> 00:05:19.340\nAnd I'm gonna say init\n--advertise-addr and then paste.\n\n88\n00:05:19.340 --> 00:05:24.570\nThe actual IP address, and there we go.\n\n89\n00:05:24.570 --> 00:05:30.120\nIt says, this is the manager, and\nthen i'm just gonna copy and paste this.\n\n90\n00:05:30.120 --> 00:05:35.440\nSo I'm gonna copy, and\nthen I'm gonna exit out\n\n91\n00:05:35.440 --> 00:05:40.628\nof the manager, and\nlook for these other two.\n\n92\n00:05:40.628 --> 00:05:44.312\nJust to make sure that they're still\nonline there's node two node three.\n\n93\n00:05:44.312 --> 00:05:46.977\nAnd now I could ssh into those but\n\n94\n00:05:46.977 --> 00:05:53.580\nI can also use ssh to send over the\ncommand to run to join as a worker node.\n\n95\n00:05:53.580 --> 00:05:58.209\nSo docker machine ssh\nnode dash two paste or\n\n96\n00:05:58.209 --> 00:06:05.034\nsome kind of not paste that I did there,\nwe'll try that again.\n\n97\n00:06:05.034 --> 00:06:09.370\nI think I hit the ALT key instead\nof the command key there.\n\n98\n00:06:09.370 --> 00:06:14.314\nNode two, paste,\nno I have not copied it correctly.\n\n99\n00:06:14.314 --> 00:06:15.820\n&gt;&gt; Paste function is\ngone in your environment.\n\n100\n00:06:15.820 --> 00:06:17.328\n&gt;&gt; Yes, that is true.\n\n101\n00:06:17.328 --> 00:06:18.885\n&gt;&gt; Try the old right click.\n\n102\n00:06:18.885 --> 00:06:22.200\n[LAUGH]\n&gt;&gt; Let me try right click.\n\n103\n00:06:22.200 --> 00:06:26.640\nLet's go back into node one\nbecause I need that token.\n\n104\n00:06:26.640 --> 00:06:28.150\nAnd actually this is probably pretty,\n\n105\n00:06:28.150 --> 00:06:31.320\nwhat happens if exactly what\nhappened to me happens to you?\n\n106\n00:06:31.320 --> 00:06:34.902\nWell, you might have to do a little\nbit of exploring, could be fun.\n\n107\n00:06:34.902 --> 00:06:37.360\nBut I think we'll be all right.\n\n108\n00:06:37.360 --> 00:06:42.270\nSo if I look at docker swarm --help.\n\n109\n00:06:42.270 --> 00:06:47.301\nJoin, manage join tokens, okay, I'm gonna\n\n110\n00:06:47.301 --> 00:06:52.333\njoin token, so swarm join-token --help.\n\n111\n00:06:52.333 --> 00:06:58.880\nAnd it will tell me options, and\nthen am I a worker or a manager okay.\n\n112\n00:06:58.880 --> 00:07:01.176\nWell I want that join for workers.\n\n113\n00:07:01.176 --> 00:07:07.086\nSo docker swarm join.\n\n114\n00:07:08.894 --> 00:07:10.240\nToken for a worker.\n\n115\n00:07:10.240 --> 00:07:14.745\nAnd it will actually print out the exact\nsame thing that happens when you\n\n116\n00:07:14.745 --> 00:07:16.256\ninitialize the swarm.\n\n117\n00:07:16.256 --> 00:07:17.298\nSo we're okay.\n\n118\n00:07:17.298 --> 00:07:22.814\nNow, just to save myself I'm going\nto hop into that other terminal\n\n119\n00:07:22.814 --> 00:07:27.554\nwindow just in case that happens again and\nthen run this.\n\n120\n00:07:27.554 --> 00:07:31.182\nSo if I have copy paste\nissues one more time,\n\n121\n00:07:31.182 --> 00:07:36.390\nand I don't, I could just hop\nback over and copy it again.\n\n122\n00:07:36.390 --> 00:07:38.350\nSo we'll run that and\nit takes a little bit,\n\n123\n00:07:38.350 --> 00:07:41.650\nagain, because these are off-premises,\nbut that node is now a worker.\n\n124\n00:07:42.830 --> 00:07:46.290\nI'm gonna do the same thing for node 3.\n\n125\n00:07:48.884 --> 00:07:50.900\nAnd there we are.\n\n126\n00:07:50.900 --> 00:07:52.190\nAnd it's probably pretty good,\n\n127\n00:07:52.190 --> 00:07:56.980\nbecause now this is a manager,\nthis will tell me the status of the swarm.\n\n128\n00:07:56.980 --> 00:08:02.210\nSo if I look at node ls, and\na node are individual instances,\n\n129\n00:08:02.210 --> 00:08:07.042\nlike VMs or separate servers\ninside of a swarm cluster.\n\n130\n00:08:07.042 --> 00:08:08.690\nSo if I look at LS, they are all ready.\n\n131\n00:08:08.690 --> 00:08:13.330\nAnd there is a Leader note, a manager.\n\n132\n00:08:13.330 --> 00:08:13.892\nYou need at least one.\n\n133\n00:08:13.892 --> 00:08:18.479\nNow I definitely recommend if you're\nbuilding something for production,\n\n134\n00:08:18.479 --> 00:08:23.220\ngo look at some of the best practices\nbecause the algorithm for how it handles.\n\n135\n00:08:23.220 --> 00:08:25.078\nLike what if this leader dies?\n\n136\n00:08:25.078 --> 00:08:27.850\nWhat if it fails?\n\n137\n00:08:27.850 --> 00:08:30.770\nWell now your swarm is just\nkind of floundering about,\n\n138\n00:08:30.770 --> 00:08:33.240\njust like a swarm of bees\nwho lose their queen.\n\n139\n00:08:33.240 --> 00:08:37.370\nSo you definitely need more than one of\nthose, go read some of the documentation\n\n140\n00:08:37.370 --> 00:08:42.140\nfor docker swarm to see how to\nbest make that a selection.\n\n141\n00:08:42.140 --> 00:08:46.232\nTypically you want at least,\nyou have to have at least one and\n\n142\n00:08:46.232 --> 00:08:48.410\nyou need at least one fell over.\n\n143\n00:08:48.410 --> 00:08:52.230\nI think they say limit it up to seven.\n\n144\n00:08:52.230 --> 00:08:55.328\nDon't quote me on that,\nthat's the recent documentation.\n\n145\n00:08:55.328 --> 00:08:59.190\nYour application may be an exception\nto that, so keep that in mind.\n\n146\n00:08:59.190 --> 00:09:03.230\nSo now that I have my nodes up and\nrunning I can deploy a service.\n\n147\n00:09:04.700 --> 00:09:08.200\nAnd we're gonna use a good ole\nfashion just nginx outpine,\n\n148\n00:09:08.200 --> 00:09:09.470\njust get it up and running.\n\n149\n00:09:09.470 --> 00:09:13.322\nSo I'm gonna say docker service create and\n\n150\n00:09:13.322 --> 00:09:18.352\nI'm gonna give it a name, and\nwhat am I going to name it?\n\n151\n00:09:18.352 --> 00:09:23.779\nLet's just call it webserver,\nor web, yeah webserver.\n\n152\n00:09:25.420 --> 00:09:28.656\nAnd I'm going to bind it to port 80.\n\n153\n00:09:28.656 --> 00:09:31.790\nAnd finally, let's give it some.\n\n154\n00:09:31.790 --> 00:09:37.630\nI don't know Daniel,\npick me a number bigger than ten.\n\n155\n00:09:37.630 --> 00:09:38.504\n&gt;&gt; Bigger than ten?\n\n156\n00:09:38.504 --> 00:09:40.056\nI'll go, how about 12.\n\n157\n00:09:40.056 --> 00:09:42.690\n&gt;&gt; All right, let's see if it works.\n\n158\n00:09:42.690 --> 00:09:45.240\nWe've tried up to ten in\nthe previous episode.\n\n159\n00:09:45.240 --> 00:09:48.360\nLet's just see if we can\njust turn it up to 11.\n\n160\n00:09:48.360 --> 00:09:54.877\nSo we have a replicas of 12, and then I\nwant to use ngine : Alpine, and boom.\n\n161\n00:09:54.877 --> 00:09:57.480\nThat's done.\n\n162\n00:09:57.480 --> 00:09:59.080\nSo if I say docker service.\n\n163\n00:10:01.528 --> 00:10:06.590\nLs Webserver is running, and\n11 of the 12 replicas are up and running.\n\n164\n00:10:08.030 --> 00:10:12.690\nAs we can see, if I run that command\nagain all 12 replicas are up and running.\n\n165\n00:10:12.690 --> 00:10:15.750\n&gt;&gt; So sometimes you just gotta give\nit a little minute cuz this is\n\n166\n00:10:15.750 --> 00:10:17.540\nout in the Cloud it's not local.\n\n167\n00:10:17.540 --> 00:10:19.350\n&gt;&gt; Exactly, yep,\nyou gotta give it a little bit.\n\n168\n00:10:19.350 --> 00:10:24.730\nAlso 12 instances are running webserver\nmaybe that takes a little bit to schedule\n\n169\n00:10:24.730 --> 00:10:26.010\nand coordinate.\n\n170\n00:10:26.010 --> 00:10:28.160\nSwarm's taking care of that for\nyou, the Swarm Manager.\n\n171\n00:10:28.160 --> 00:10:30.970\nIt's orchestrating the deployment\nof those containers\n\n172\n00:10:30.970 --> 00:10:33.892\nas well as what nodes to put those on.\n\n173\n00:10:33.892 --> 00:10:37.820\nAnd typically, I went back and\nchecked, there\n\n174\n00:10:37.820 --> 00:10:41.890\nused to be in the old version of Swarm\nthese different strategies you could use.\n\n175\n00:10:41.890 --> 00:10:44.470\nFrom what I could tell\nin the documentation\n\n176\n00:10:44.470 --> 00:10:48.300\nIt tries to ensure high\navailability as much as possible.\n\n177\n00:10:48.300 --> 00:10:51.990\nBecause the durability comes from\nif one of these nodes go down and\n\n178\n00:10:51.990 --> 00:10:55.560\nyou bring it back up and\nwhen it rejoins the swarm.\n\n179\n00:10:55.560 --> 00:11:01.410\nThe swarm, as long there is a manager\nstill there, will redeploy the replicas.\n\n180\n00:11:01.410 --> 00:11:03.295\nSo if this leader or excuse me,\n\n181\n00:11:03.295 --> 00:11:06.840\nif this node two has three\nof those replicas on it.\n\n182\n00:11:06.840 --> 00:11:10.940\nAnd it goes down when you bring it back\nonline, those three replicas will come\n\n183\n00:11:10.940 --> 00:11:13.990\nback online as well, so\na lot of that's handled for you.\n\n184\n00:11:13.990 --> 00:11:15.500\nIt's magic.\n\n185\n00:11:15.500 --> 00:11:19.200\nSo Docker service PS, and\nlet's just look at web server.\n\n186\n00:11:20.550 --> 00:11:22.120\nAnd there's all 12 of them.\n\n187\n00:11:22.120 --> 00:11:27.410\nAnd you can see I've got several\nin node 3, node 1, and node 2.\n\n188\n00:11:27.410 --> 00:11:29.930\nSo it's distributed across\nall of those nodes.\n\n189\n00:11:29.930 --> 00:11:34.824\nAnd one thing that we have to make sure\nwe understand, even if it's a manager,\n\n190\n00:11:34.824 --> 00:11:37.580\nit's still a worker unless you limit that.\n\n191\n00:11:37.580 --> 00:11:39.541\nIf you dive down to the docks,\n\n192\n00:11:39.541 --> 00:11:43.786\nyou can limit that no containers\nare deployed on a manager node.\n\n193\n00:11:43.786 --> 00:11:46.420\nLet's go see if it actually works, right?\n\n194\n00:11:46.420 --> 00:11:51.578\nSo let's go grab one of\nthese IP addresses and\n\n195\n00:11:51.578 --> 00:11:55.650\nvisit it, and there's NGINX, and\n\n196\n00:11:55.650 --> 00:12:01.487\nlet's grab this other IP address and\nvisit it, and\n\n197\n00:12:01.487 --> 00:12:07.760\nthat is also serving up an NGINX copy,\nand there we go.\n\n198\n00:12:07.760 --> 00:12:12.472\nWe have 12 instances of this EngineX\ncontainer serving up the default\n\n199\n00:12:12.472 --> 00:12:15.120\nhello page for EngineX.\n\n200\n00:12:15.120 --> 00:12:18.270\nAnd now I could create a load balancer or\n\n201\n00:12:18.270 --> 00:12:21.200\nsomething of that nature to where,\nI have a lot of fail over.\n\n202\n00:12:21.200 --> 00:12:22.210\nIf one goes down or\n\n203\n00:12:22.210 --> 00:12:25.490\none is really being hit hard I can\nspread that load over several.\n\n204\n00:12:25.490 --> 00:12:28.500\nSo you know, the real takeaway here is,\n\n205\n00:12:28.500 --> 00:12:31.280\nI'm not limited to just\nlocal playing around.\n\n206\n00:12:31.280 --> 00:12:33.110\nYou can make a fairly large and\n\n207\n00:12:33.110 --> 00:12:36.900\nrobust cloud service using\nDocker Machine and Docker Swarm.\n\n208\n00:12:36.900 --> 00:12:37.690\n&gt;&gt; That's very cool.\n\n209\n00:12:37.690 --> 00:12:41.100\nAnd we get the leverage\nthe whole idea of the cloud.\n\n210\n00:12:41.100 --> 00:12:45.000\nThe cloud is our friend nowadays\nbecause I don't have the money or\n\n211\n00:12:45.000 --> 00:12:49.010\nresources to put together some\nof these large applications are,\n\n212\n00:12:49.010 --> 00:12:53.150\nwe wanted to push out something, a very\nlarge website or something like that.\n\n213\n00:12:53.150 --> 00:12:56.180\nCosts a lot of money, time and\neffort to put that together.\n\n214\n00:12:56.180 --> 00:13:00.130\nNow I just need Docker, to connect it\nto something like Digital Ocean and\n\n215\n00:13:00.130 --> 00:13:03.770\nnow all of that stuff spins up very,\nvery simply done as well right.\n\n216\n00:13:03.770 --> 00:13:06.930\nDoesn't take a lot of manpower or\nresources to get that to happen.\n\n217\n00:13:06.930 --> 00:13:07.960\nJustin, very cool stuff.\n\n218\n00:13:07.960 --> 00:13:11.764\nAnything else we need to know when it\ncomes to creating a Swarm Inside of\n\n219\n00:13:11.764 --> 00:13:12.670\ndigital ocean.\n\n220\n00:13:12.670 --> 00:13:15.753\n&gt;&gt; Well, the next things we need to know,\nwell I think it's best left for\n\n221\n00:13:15.753 --> 00:13:16.980\nanother [CROSSTALK] [LAUGH].\n\n222\n00:13:16.980 --> 00:13:23.126\nWe're going to create\na more complex application.\n\n223\n00:13:23.126 --> 00:13:25.620\nIt is still not maybe something\nthat you would put in production.\n\n224\n00:13:25.620 --> 00:13:29.680\nBut it shows the power of some of these\ntools, if you need to co-ordinate.\n\n225\n00:13:29.680 --> 00:13:33.380\nSay, I made a database that\nhas multiple resources, right?\n\n226\n00:13:33.380 --> 00:13:38.214\nI need to spread those over nodes,\nbecause if your database goes down,\n\n227\n00:13:38.214 --> 00:13:39.678\nyou're in trouble.\n\n228\n00:13:39.678 --> 00:13:43.653\nYeah so, we'll see how to spread\nthose over multiple nodes and\n\n229\n00:13:43.653 --> 00:13:47.970\nreally utilize all of those compute\nnodes or VMs to our disposal.\n\n230\n00:13:47.970 --> 00:13:49.200\n&gt;&gt; Very cool.\nLooking forward to that.\n\n231\n00:13:49.200 --> 00:13:50.620\nThanks for joining us today though.\n\n232\n00:13:50.620 --> 00:13:54.698\nWe do thank you good people for watching,\nbut it is that time for us to sign off.\n\n233\n00:13:54.698 --> 00:13:56.950\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n234\n00:13:56.950 --> 00:13:57.936\n&gt;&gt; And I'm Justin Dennison.\n\n235\n00:13:57.936 --> 00:13:59.058\n&gt;&gt; And we'll see you next time.\n\n236\n00:13:59.058 --> 00:14:06.790\n[MUSIC]\n\n237\n00:14:06.790 --> 00:14:09.648\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "212913521"
        },
        {
          "description": "In this episode, Daniel and Justin get started in their effort to build a Docker Swarm application. They begin by creating a Docker Stack file to orchestrate all the necessary elements necessary for the Swarm App.",
          "length": "1271",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-1-creating_a_docker_swarm_application-040617-PGM.00_20_57_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-1-creating_a_docker_swarm_application-040617-PGM.00_20_57_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-1-creating_a_docker_swarm_application-040617-PGM.00_20_57_14.Still001-sm.jpg",
          "title": "Creating a Docker Swarm Application",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.180\nWelcome to ITProTV.\n\n2\n00:00:01.180 --> 00:00:06.844\nI'm your host, Don Pezet [CROSSTALK]\n\n3\n00:00:06.844 --> 00:00:08.405\n[MUSIC]\n\n4\n00:00:08.405 --> 00:00:12.240\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.240 --> 00:00:13.985\n&gt;&gt; All right, greetings everyone and\n\n6\n00:00:13.985 --> 00:00:16.263\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.263 --> 00:00:18.115\nI'm your host, Daniel Lowrie, and\n\n8\n00:00:18.115 --> 00:00:21.840\nin today's episode we're back with\nmore on our Introduction to Docker.\n\n9\n00:00:21.840 --> 00:00:23.420\nAnd, of course,\njoining us in the studio yet\n\n10\n00:00:23.420 --> 00:00:27.780\nagain is our guiding star in that\nendeavor, Mr. Justin Dennison.\n\n11\n00:00:27.780 --> 00:00:28.990\nJustin, welcome back, man.\n\n12\n00:00:28.990 --> 00:00:30.740\nHow's it going?\n&gt;&gt; It is going well, Daniel.\n\n13\n00:00:30.740 --> 00:00:31.760\nI am glad to be back.\n\n14\n00:00:31.760 --> 00:00:36.324\nWhen you call me a guiding star I\ndefinitely want to have a spotlight\n\n15\n00:00:36.324 --> 00:00:37.800\nover top of me and go.\n\n16\n00:00:37.800 --> 00:00:41.401\n&gt;&gt; [CROSSTALK] Yes,\nwe'll get you some white robes [LAUGH] and\n\n17\n00:00:41.401 --> 00:00:44.877\nit'll be fun [LAUGH]\n&gt;&gt; So, we're back with more docker, and\n\n18\n00:00:44.877 --> 00:00:49.142\nactually we're starting kinda the\nculmination of a set of tools that have\n\n19\n00:00:49.142 --> 00:00:51.301\nbeen in development for a while now.\n\n20\n00:00:51.301 --> 00:00:53.957\nAnd well we've seen docker compose,\ndocker machine,\n\n21\n00:00:53.957 --> 00:00:57.050\nthe docker engine with\nthe docker daemon installed.\n\n22\n00:00:57.050 --> 00:00:59.568\nDocker, docker,\ndocker I just feel like saying docker.\n\n23\n00:00:59.568 --> 00:01:00.410\n&gt;&gt; The docker docks.\n\n24\n00:01:00.410 --> 00:01:01.905\n&gt;&gt; Yeah, the docker docks.\n\n25\n00:01:01.905 --> 00:01:06.355\nWell, we've seen Swarm as well definitely\ncheck out all of those previous episodes\n\n26\n00:01:06.355 --> 00:01:10.180\nbecause they are some knowledge\nwithin this episode that well,\n\n27\n00:01:10.180 --> 00:01:13.075\nyou have an understanding of\nthe basic usage of those.\n\n28\n00:01:13.075 --> 00:01:18.016\nNow this is supposed to be introduction\nto docker however, this might be a little\n\n29\n00:01:18.016 --> 00:01:22.830\nbeyond but this is something that is\ncoming kind of all bundled up with Docker.\n\n30\n00:01:22.830 --> 00:01:25.620\nSo it's important that you\nknow this is available to you.\n\n31\n00:01:25.620 --> 00:01:26.848\nAnd it's incredibly powerful.\n\n32\n00:01:26.848 --> 00:01:30.442\nA case in point, I used to do\na little bit of data science, and\n\n33\n00:01:30.442 --> 00:01:32.980\nwe had a real huge issue with concurrency,\n\n34\n00:01:32.980 --> 00:01:37.930\nlike actually data manipulation,\ndata crunching, things of that nature.\n\n35\n00:01:37.930 --> 00:01:40.330\nAnd, well,\nin order to get that concurrency,\n\n36\n00:01:40.330 --> 00:01:41.829\nyou can do a couple of things.\n\n37\n00:01:43.070 --> 00:01:45.452\nYou can, and what I mean by concurrency,\n\n38\n00:01:45.452 --> 00:01:50.096\nis doing multiple things at the same time\ninstead of one at a time through a queue.\n\n39\n00:01:50.096 --> 00:01:55.078\nIt would be like if the DMV\nopened 30 tellers instead of 30\n\n40\n00:01:55.078 --> 00:01:58.705\npeople standing in line for\nthe one person.\n\n41\n00:01:58.705 --> 00:02:00.303\nWhat a dream.\n\n42\n00:02:00.303 --> 00:02:06.035\n&gt;&gt; Yeah you're living in a real world\nof possibilities right there my friend.\n\n43\n00:02:06.035 --> 00:02:09.673\n&gt;&gt; What we would do is we would build\nthese tiny little containers that we would\n\n44\n00:02:09.673 --> 00:02:11.240\njust spin up and act as workers.\n\n45\n00:02:11.240 --> 00:02:17.100\nAnd we could utilize hardware for\nnumber crunching and things outside of\n\n46\n00:02:17.100 --> 00:02:22.690\nan actual program model that required us\nto do a lot of hand holding of resources.\n\n47\n00:02:22.690 --> 00:02:28.480\nWell with Swarm I can now spread\nthat over a bunch of hardware and,\n\n48\n00:02:28.480 --> 00:02:31.770\nwell, I can get a great resiliency,\ngreat fault tolerance,\n\n49\n00:02:31.770 --> 00:02:36.490\nhigh availability, and\nthat's kind of the dream, right.\n\n50\n00:02:36.490 --> 00:02:40.280\nI mentioned in a previous episode of,\nI've heard of people trying this\n\n51\n00:02:40.280 --> 00:02:44.770\non 1,000 VMs and spreading\ncontainers across thousands of VMs.\n\n52\n00:02:44.770 --> 00:02:48.290\nMaybe not the first time you try this,\nand you might have to,\n\n53\n00:02:48.290 --> 00:02:50.760\nto learn some additional tools\nto get that up and running.\n\n54\n00:02:50.760 --> 00:02:55.090\nBut, well, I think we should see how\nthat happens on a small scale and\n\n55\n00:02:55.090 --> 00:02:58.230\nthis is going to be,\nkinda of a contrived application,\n\n56\n00:02:58.230 --> 00:03:01.620\nwe've seen this application\nbefore in some previous episodes.\n\n57\n00:03:01.620 --> 00:03:06.275\nBut, let's go ahead and dive in and get\nstarted and remind yourselves of where we\n\n58\n00:03:06.275 --> 00:03:09.439\nare and how to, so\nlet's take a look at my screen here.\n\n59\n00:03:09.439 --> 00:03:12.670\nAnd I have a folder just on\nthe command line, kind of a reminder.\n\n60\n00:03:12.670 --> 00:03:14.630\nWhat are we doing, swarm_application.\n\n61\n00:03:14.630 --> 00:03:18.431\nSo I wanna build an actual application\nthat I can swarm over multiple nodes.\n\n62\n00:03:18.431 --> 00:03:20.950\nWell great, what's in here?\n\n63\n00:03:20.950 --> 00:03:23.140\nWell, I have an app folder.\n\n64\n00:03:23.140 --> 00:03:28.226\nAnd inside of that app folder, I could\nspell app right, I have a Dockerfile,\n\n65\n00:03:28.226 --> 00:03:30.880\nrequirements.txt and a webapp.py.\n\n66\n00:03:30.880 --> 00:03:32.550\nWell, we've seen this before.\n\n67\n00:03:32.550 --> 00:03:34.597\nI'm just gonna hop into VIM for now.\n\n68\n00:03:34.597 --> 00:03:37.330\nI'm gonna use a different\ntext editor in this episode.\n\n69\n00:03:37.330 --> 00:03:40.570\nBut, it's a flash web\napplication that uses Redis and\n\n70\n00:03:40.570 --> 00:03:45.740\nMongo to well,\nkeep count of page hits as well as\n\n71\n00:03:47.890 --> 00:03:51.570\nadd users and list users,\nokay, inside of a database.\n\n72\n00:03:51.570 --> 00:03:56.200\nThis is all kinda of mocked up it's\nnot realistic because we're using\n\n73\n00:03:56.200 --> 00:04:01.580\na single Redis in point,\nit really should be like a Redis cluster.\n\n74\n00:04:01.580 --> 00:04:04.740\nWe have a single Mongo instance,\nit should be a replica set or\n\n75\n00:04:04.740 --> 00:04:10.210\na cluster of Mongo instances,\nall networked together.\n\n76\n00:04:10.210 --> 00:04:13.760\nBut that's a little bit beyond what we're\ntrying to do with the Docker tool set.\n\n77\n00:04:14.860 --> 00:04:18.610\nSo we've seen this before, and definitely\ngo check out some multi container dock or\n\n78\n00:04:18.610 --> 00:04:19.260\napplications.\n\n79\n00:04:19.260 --> 00:04:24.780\nBoth using docker or compose and\njust the docker CLI.\n\n80\n00:04:24.780 --> 00:04:26.100\nHow can I do this with swarm?\n\n81\n00:04:27.280 --> 00:04:30.440\nWell we could do this\nthrough the command line.\n\n82\n00:04:31.840 --> 00:04:36.840\nBut the real power comes from this\ndescriptive, declarative set of files\n\n83\n00:04:36.840 --> 00:04:42.350\nlike a Docker compose file that we\ncan use to deploy swarm services.\n\n84\n00:04:42.350 --> 00:04:44.930\nAnd, well,\nI think it's no better time to see\n\n85\n00:04:44.930 --> 00:04:47.690\nhow close those are than\nto actually write one.\n\n86\n00:04:47.690 --> 00:04:53.997\nSo I'm even going to name it the same\njust real quick, so docker-compose.yml.\n\n87\n00:04:53.997 --> 00:04:59.730\nAnd I could use this to spin up a docker\ncompose kind of collection locally or\n\n88\n00:04:59.730 --> 00:05:06.510\non a single machine remotely but we'll see\nhow this is used in a swarm application.\n\n89\n00:05:06.510 --> 00:05:08.005\nSo I'm going to hop over and\n\n90\n00:05:08.005 --> 00:05:11.195\nI'm using Adam you can use\na variety of rich text editors.\n\n91\n00:05:11.195 --> 00:05:16.852\nAnd that's just because I want to be able\nto make sure my editation and formatting\n\n92\n00:05:16.852 --> 00:05:22.023\nare a little more rigid than the current\nVIM the installation that I have.\n\n93\n00:05:22.023 --> 00:05:26.480\nSo I open that compose file, and\nlet me zoom in here just a little bit.\n\n94\n00:05:26.480 --> 00:05:29.360\nThis has to be a version three file.\n\n95\n00:05:29.360 --> 00:05:32.870\nSo in the docker compose episode we\ntalked about version one, two, and three.\n\n96\n00:05:34.090 --> 00:05:38.790\nVersion three is what allows\nus to use this with Swarm.\n\n97\n00:05:38.790 --> 00:05:41.000\nMan, I'm going to back up and\nsay that again.\n\n98\n00:05:41.000 --> 00:05:43.830\nVersion 3 compose files\nare usable with Swarm.\n\n99\n00:05:44.910 --> 00:05:47.010\nSo, we're going to do just that.\n\n100\n00:05:47.010 --> 00:05:48.886\nSo Version 3.\n\n101\n00:05:48.886 --> 00:05:50.012\nNow what do we want?\n\n102\n00:05:50.012 --> 00:05:53.560\nWe want to define our services,\njust like we did with docker compose.\n\n103\n00:05:53.560 --> 00:05:57.730\nSo services and what are our services?\n\n104\n00:05:57.730 --> 00:06:04.606\nI want redis service and it's going to\nhave an image of redis 3.20-alpine.\n\n105\n00:06:04.606 --> 00:06:10.161\n&gt;&gt; You keep using this alpine tag which is\ninteresting to me because for two reasons,\n\n106\n00:06:10.161 --> 00:06:15.655\none because I have one version of\nSwiss means strong Alpine wind.\n\n107\n00:06:15.655 --> 00:06:17.879\nAnd I think of that every\ntime you put Alpine there.\n\n108\n00:06:17.879 --> 00:06:19.055\n&gt;&gt; Mm.\n&gt;&gt; So it's kind of funny.\n\n109\n00:06:19.055 --> 00:06:21.475\nIt's sort of a weird pneumonic\nthat makes me reminder this.\n\n110\n00:06:21.475 --> 00:06:25.758\nBut you also use it within the web\nservice, right, the NGINX?\n\n111\n00:06:25.758 --> 00:06:26.642\n&gt;&gt; Mm-hm.\n&gt;&gt; Well,\n\n112\n00:06:26.642 --> 00:06:29.770\nwhat is the whole meaning\nbehind why Alpine?\n\n113\n00:06:29.770 --> 00:06:31.960\nWhat is that?\nIt's like a version number or a name?\n\n114\n00:06:31.960 --> 00:06:33.770\n&gt;&gt; So that's a great point,\n\n115\n00:06:33.770 --> 00:06:37.110\nand I'm very sorry if I hadn't made\nthat incredibly clear previously.\n\n116\n00:06:37.110 --> 00:06:40.150\nDaniel's keeping me honest, and\nwell, that's what he's here for.\n\n117\n00:06:40.150 --> 00:06:43.650\nIf he wasn't here,\nI'd just be yammering on.\n\n118\n00:06:43.650 --> 00:06:46.176\nWhenever you see the Alpine tag for\na Docker image,\n\n119\n00:06:46.176 --> 00:06:49.710\nwhat that typically means\nis they use Alpine Linux.\n\n120\n00:06:49.710 --> 00:06:53.060\n&gt;&gt; As the base image for\nbuilding these services.\n\n121\n00:06:53.060 --> 00:06:56.670\nAnd I, in some earlier episodes,\nI use BusyBox.\n\n122\n00:06:56.670 --> 00:07:02.920\nBoth of these are very tiny images,\nactually around 10, 20 megabytes.\n\n123\n00:07:02.920 --> 00:07:03.579\n&gt;&gt; That's tiny.\n\n124\n00:07:03.579 --> 00:07:04.743\n&gt;&gt; It is very tiny.\n\n125\n00:07:04.743 --> 00:07:09.944\nAnd Alpine is able to accomplish that\nbecause it uses a different C runtime.\n\n126\n00:07:09.944 --> 00:07:13.580\nYou can use goodnewsc, or newc.\n\n127\n00:07:13.580 --> 00:07:14.740\nGCC.\n\n128\n00:07:14.740 --> 00:07:17.770\nBut I think it's MUSL, M-U-S-L.\n\n129\n00:07:17.770 --> 00:07:25.100\nAnd it allows it to get the very minimal\namount of Linux runtime requirements.\n\n130\n00:07:25.100 --> 00:07:26.042\n&gt;&gt; Got you.\nSo just,\n\n131\n00:07:26.042 --> 00:07:28.420\na core Linux system to throw this onto.\n\n132\n00:07:28.420 --> 00:07:29.320\n&gt;&gt; Exactly.\n\n133\n00:07:29.320 --> 00:07:31.440\nAnd, the reason I do this is,\nthey're small.\n\n134\n00:07:31.440 --> 00:07:34.790\nAnd if they're small, and if an image\nis small, I can pull them quickly.\n\n135\n00:07:34.790 --> 00:07:38.810\nAnd also the corresponding resources\nthat are necessary to run it\n\n136\n00:07:38.810 --> 00:07:40.050\nare going to be smaller.\n\n137\n00:07:40.050 --> 00:07:43.870\nSo, I can get a lot more kind of bang for\nmy buck.\n\n138\n00:07:43.870 --> 00:07:49.317\nHowever, as someone who is tried\nto build an Alpine based image.\n\n139\n00:07:49.317 --> 00:07:56.303\nWell, muscle C in MUSL\ndoesn't quite act like GCC.\n\n140\n00:07:56.303 --> 00:08:00.225\nSo, some of those installation\nI'm like this is not how this,\n\n141\n00:08:00.225 --> 00:08:02.890\nthis don't work like I thought it should.\n\n142\n00:08:02.890 --> 00:08:07.680\nAlso the package manager inside of Alpine\nis, I haven't quite mastered it yet,\n\n143\n00:08:07.680 --> 00:08:09.010\nI wanna get there though.\n\n144\n00:08:09.010 --> 00:08:11.835\nSo, great question Daniel thanks for\nkeeping me honest here.\n\n145\n00:08:11.835 --> 00:08:17.808\nAnd I wanna say ports,\nand inside of ports 6379.\n\n146\n00:08:17.808 --> 00:08:20.752\nNow, I haven't mapped\nthe ports there because well,\n\n147\n00:08:20.752 --> 00:08:25.950\nthis is all gonna be bundled together so\nwe'll worry about that at some point.\n\n148\n00:08:25.950 --> 00:08:32.990\nAnd then, what do I want, I want to\nput this on a network called webapp.\n\n149\n00:08:32.990 --> 00:08:38.000\nWe've seen these before in\nthe docker-compose file,\n\n150\n00:08:38.000 --> 00:08:40.000\nit's just a normal docker compose.\n\n151\n00:08:40.000 --> 00:08:43.910\nBut there is one part, this deploy tag.\n\n152\n00:08:43.910 --> 00:08:46.850\nWe will be using this\nin a swarm application.\n\n153\n00:08:46.850 --> 00:08:51.510\nSo this deploy is going to allow us to\nset constraints and modify properties for\n\n154\n00:08:51.510 --> 00:08:56.840\nactually managing the swarm, and how these\nreplicas spread out, if we have replicas.\n\n155\n00:08:56.840 --> 00:08:59.211\nNow the redis instance\nwon't have replicas,\n\n156\n00:08:59.211 --> 00:09:02.930\njust because I don't want to manage\nthe master-slave configuration.\n\n157\n00:09:04.230 --> 00:09:06.870\nSo what do we have, we want the placement.\n\n158\n00:09:06.870 --> 00:09:10.110\nOne of those things can be a constraint,\nand\n\n159\n00:09:10.110 --> 00:09:16.540\nthis is kind of something\nthat people want initially.\n\n160\n00:09:16.540 --> 00:09:20.870\nSo I've actually put a dash there\nwhen there shouldn't be one and\n\n161\n00:09:20.870 --> 00:09:21.640\nwhat is the constraint?\n\n162\n00:09:23.080 --> 00:09:27.220\nI don't want this to be limited to\nrunning only on a manager node.\n\n163\n00:09:28.630 --> 00:09:33.920\nSo what this means is, this can't run\non anything that's not a manager or\n\n164\n00:09:33.920 --> 00:09:37.200\na leader of the swarm,\nand why would I want that?\n\n165\n00:09:37.200 --> 00:09:41.190\nWell, I want to make sure that I have\nfail over, and if my manager dies,\n\n166\n00:09:41.190 --> 00:09:42.890\nmy redis can die.\n\n167\n00:09:42.890 --> 00:09:46.080\nAnd then those can be brought\nback online or recovered so\n\n168\n00:09:46.080 --> 00:09:49.880\nI don't have stale data and\nweird application state.\n\n169\n00:09:51.040 --> 00:09:54.160\nSo there's my redis service,\nI also need a mongo service.\n\n170\n00:09:55.210 --> 00:09:58.690\nAnd what does my Mongo serve,\nwell it's gonna use the Mongo image.\n\n171\n00:09:58.690 --> 00:10:01.010\nAnd notice I didn't put the alpine there.\n\n172\n00:10:01.010 --> 00:10:03.880\nAnd this is going to use,\nI think it uses Ubuntu 16.04 as the base,\n\n173\n00:10:03.880 --> 00:10:09.110\nso it's a little larger of an image, it'll\ntake longer to pull, but that's fine.\n\n174\n00:10:09.110 --> 00:10:12.762\nIt's whatever you're comfortable with,\nwhatever you're familiar with.\n\n175\n00:10:12.762 --> 00:10:14.947\nI do want to list a volumes for\n\n176\n00:10:14.947 --> 00:10:20.300\nMongo because I want persistence data,\npersistence layer.\n\n177\n00:10:20.300 --> 00:10:23.430\nSo if these containers go\ndown I still have that data.\n\n178\n00:10:23.430 --> 00:10:28.380\nAnd notice I give it a name, mongo_data,\nwe've seen this in a compose file as well.\n\n179\n00:10:29.590 --> 00:10:33.660\nAnd that's going to map to\n/data/db inside the container,\n\n180\n00:10:33.660 --> 00:10:40.510\nbecause that's the default for\nthe MongoD instance.\n\n181\n00:10:40.510 --> 00:10:43.000\nI feel like I say the word\ninstance a great deal.\n\n182\n00:10:43.000 --> 00:10:46.376\nIt's rolling off the tongue,\nit's a VM, it's an instance,\n\n183\n00:10:46.376 --> 00:10:49.210\nit's a process,\nthey're all kinda synonymous.\n\n184\n00:10:49.210 --> 00:10:50.060\n&gt;&gt; I would like the word count,\n\n185\n00:10:50.060 --> 00:10:54.815\nthe transcripts for these shows,\non the word docker and instance [LAUGH].\n\n186\n00:10:54.815 --> 00:10:57.220\n&gt;&gt; [LAUGH] Well, don't make me\nfeel bad about myself, Daniel.\n\n187\n00:10:57.220 --> 00:10:59.350\n&gt;&gt; [LAUGH]\n&gt;&gt; Don't make me feel bad about myself.\n\n188\n00:10:59.350 --> 00:11:02.400\nAll right, and then we also\nwant this on the same networks.\n\n189\n00:11:04.390 --> 00:11:06.369\nAnd that's going to be\non the webapp network.\n\n190\n00:11:09.193 --> 00:11:13.470\nAnd we're also going to deploy\nthis with a placement constraint.\n\n191\n00:11:15.220 --> 00:11:17.220\nNow this is for demonstration,\n\n192\n00:11:17.220 --> 00:11:21.390\nit may be that in your application you do\nnot want any constraints on your database.\n\n193\n00:11:21.390 --> 00:11:25.160\nEspecially if you have like Mongo or\nRedis in there running in a clustered\n\n194\n00:11:25.160 --> 00:11:29.330\nenvironment, you wanna spread those out\nand then have those network, that way you\n\n195\n00:11:29.330 --> 00:11:32.650\nhave a cluster within a cluster and\nyou have this wonderful resiliency.\n\n196\n00:11:32.650 --> 00:11:38.430\nThat still might be overkill, designing of\nthese applications is not our aim here.\n\n197\n00:11:38.430 --> 00:11:40.700\nIt's about seeing how the tools work,\n\n198\n00:11:40.700 --> 00:11:43.730\nbecause distributor\napplication design is hard.\n\n199\n00:11:43.730 --> 00:11:45.670\n&gt;&gt; That's why people get paid to do it.\n\n200\n00:11:45.670 --> 00:11:46.525\n&gt;&gt; Right, exactly.\n\n201\n00:11:46.525 --> 00:11:48.959\n&gt;&gt; [LAUGH] Not like a kid in his basement\nsaying, I'm just gonna whip this out,\n\n202\n00:11:48.959 --> 00:11:50.095\nactually they probably could now.\n\n203\n00:11:50.095 --> 00:11:54.512\n&gt;&gt; Yeah, with tools like this,\nlike I'm seven and\n\n204\n00:11:54.512 --> 00:11:58.406\nI made this giant bitcoin mining cluster.\n\n205\n00:11:58.406 --> 00:12:01.080\n&gt;&gt; [LAUGH] Application.\n\n206\n00:12:01.080 --> 00:12:03.830\n&gt;&gt; So there's our Mongo service.\n\n207\n00:12:03.830 --> 00:12:06.110\nWhat's our last service that we need,\nwe need our app.\n\n208\n00:12:08.280 --> 00:12:11.310\nI know that I have this folder so\n\n209\n00:12:11.310 --> 00:12:15.190\nI'm going to, just like we did in compose,\nI'm gonna build from this app,\n\n210\n00:12:15.190 --> 00:12:18.450\nit has a docker file in it,\nit has the requirements, that's great.\n\n211\n00:12:18.450 --> 00:12:20.070\nOkay, no.\n\n212\n00:12:22.260 --> 00:12:24.660\nSo don't accidentally hit Delete there.\n\n213\n00:12:24.660 --> 00:12:26.240\nSo I'm gonna say build app.\n\n214\n00:12:27.900 --> 00:12:30.730\nAnd there we go,\nmake sure you have a space.\n\n215\n00:12:32.010 --> 00:12:35.870\nAnd then I want to expose\nport 5000 because,\n\n216\n00:12:39.050 --> 00:12:41.990\nwell I know this application\nis running on port 5000.\n\n217\n00:12:41.990 --> 00:12:45.830\nSo when it swarms, I want 5,000\nto be serving up the application.\n\n218\n00:12:45.830 --> 00:12:49.940\nJust like we've seen with EngineX\nin our previous examples.\n\n219\n00:12:49.940 --> 00:12:54.170\nAnd then networks,\nthat needs to be on the same network.\n\n220\n00:12:54.170 --> 00:12:55.270\nWell, that makes sense.\n\n221\n00:12:56.330 --> 00:13:01.280\nAnd then depends_on.\n\n222\n00:13:01.280 --> 00:13:03.218\nI'm setting an actual dependency.\n\n223\n00:13:03.218 --> 00:13:09.060\nApp depends on Redis and Mongo.\n\n224\n00:13:09.060 --> 00:13:16.030\nSo I have to know that, redis and mongo.\n\n225\n00:13:16.030 --> 00:13:19.080\nNow here's something you need to know.\n\n226\n00:13:20.540 --> 00:13:25.060\nThis does not make sure that\nthe internal processes in the container\n\n227\n00:13:25.060 --> 00:13:25.849\nare up and running.\n\n228\n00:13:27.380 --> 00:13:29.790\nIt just means the container has started.\n\n229\n00:13:29.790 --> 00:13:33.190\nAnd in the Docker docs you\ncan actually go and read,\n\n230\n00:13:33.190 --> 00:13:37.000\nthey show you how, you wanna wait\nuntil the process is running?\n\n231\n00:13:37.000 --> 00:13:41.280\nSo like a database, until the database\ncomes online, don't start this up.\n\n232\n00:13:41.280 --> 00:13:44.400\nSo there's a way to keep this container\nfrom fully starting up until the process\n\n233\n00:13:44.400 --> 00:13:45.510\nis up and running.\n\n234\n00:13:45.510 --> 00:13:49.102\nSo all this means is Redis and\nMongo containers have started and\n\n235\n00:13:49.102 --> 00:13:52.962\nthen it will start app, but\nit will not make sure that Redis inside of\n\n236\n00:13:52.962 --> 00:13:56.932\nthe container is running and\nMongo inside the container is running.\n\n237\n00:13:56.932 --> 00:13:58.650\n&gt;&gt; This is like a conditional statement,\nbasically.\n\n238\n00:13:58.650 --> 00:14:01.545\n&gt;&gt; Kinda,\na very soft conditional statement.\n\n239\n00:14:01.545 --> 00:14:05.820\nYup, so that's handy and then I deploy.\n\n240\n00:14:05.820 --> 00:14:07.950\nNotice we're using this\ndeploy tag a great deal.\n\n241\n00:14:09.660 --> 00:14:11.420\nAnd we want to deploy this mode,\n\n242\n00:14:11.420 --> 00:14:13.690\nso people are actually going\nto be coming to this app.\n\n243\n00:14:14.760 --> 00:14:17.900\nThis is where people\nare gonna interact with it,\n\n244\n00:14:17.900 --> 00:14:21.750\nI have to be able to manage\nmaybe a lot of traffic.\n\n245\n00:14:21.750 --> 00:14:26.940\nSo I can have a mode, and I actually\nwant this to be a replicated service.\n\n246\n00:14:26.940 --> 00:14:29.220\n&gt;&gt; And Justin,\nwhat is a replicated service?\n\n247\n00:14:29.220 --> 00:14:32.480\n&gt;&gt; So replicated means that I have\nmultiple, what are called, task.\n\n248\n00:14:32.480 --> 00:14:38.510\nSo I will get app, well, replicated\nacross several nodes in the swarm.\n\n249\n00:14:38.510 --> 00:14:41.300\nI haven't made these replicated services,\nso\n\n250\n00:14:41.300 --> 00:14:46.540\nit will only run one container running\nRedis, only one container running Mongo.\n\n251\n00:14:46.540 --> 00:14:50.210\nHere, this is going to run multiple\ncontainers, and if I say that it is\n\n252\n00:14:50.210 --> 00:14:55.430\nreplicated, I should say how many\nreplicas I'm actually going to need.\n\n253\n00:14:56.870 --> 00:15:00.360\nAgain, just for demonstration, I'm\nactually gonna set the replicas to two.\n\n254\n00:15:00.360 --> 00:15:03.850\nSo I'll have two app instances\nconnected to the same Mongo and Redis.\n\n255\n00:15:03.850 --> 00:15:08.840\n&gt;&gt; Now, that begs the question, since\nwe have two basic copies of each other\n\n256\n00:15:08.840 --> 00:15:12.820\nrunning at the same time, is there\ngonna be issues with connectivity,\n\n257\n00:15:12.820 --> 00:15:14.570\nmaybe via ports or something?\n\n258\n00:15:14.570 --> 00:15:17.080\n&gt;&gt; So, that's a great question.\n\n259\n00:15:17.080 --> 00:15:19.930\nIf we've tried to do this before, and\n\n260\n00:15:19.930 --> 00:15:24.100\nactually I think a showed that this\nwould fail in a docker-compose episode.\n\n261\n00:15:24.100 --> 00:15:27.140\nIf you try to scale the service and\nit's running on the same\n\n262\n00:15:27.140 --> 00:15:31.080\nport on your local machine,\nyou actually have port binding issues.\n\n263\n00:15:31.080 --> 00:15:32.990\nAnd it'll go yeah,\nthis one's all ready running but\n\n264\n00:15:32.990 --> 00:15:36.820\nthen you try to scale up the service and\nbring on another one on line.\n\n265\n00:15:36.820 --> 00:15:38.510\nAnd it can't get to port 5000 so it dies.\n\n266\n00:15:40.070 --> 00:15:42.920\nWell that looks like it\nshould happen here, right?\n\n267\n00:15:42.920 --> 00:15:45.677\nI say ports 5000 to 5000, and\n\n268\n00:15:45.677 --> 00:15:49.912\nactually I'm gonna reformat\nthis here just a little bit.\n\n269\n00:15:49.912 --> 00:15:51.981\nBut how am I gonna replicate?\n\n270\n00:15:51.981 --> 00:15:56.865\nWell if I have three swarm nodes,\nI should get at least three but\n\n271\n00:15:56.865 --> 00:16:02.028\nwhat we'll actually see is Swarm\nmanages some of that weird port,\n\n272\n00:16:02.028 --> 00:16:05.182\nbut I don't know, I think it's magic.\n\n273\n00:16:05.182 --> 00:16:08.598\nI'm pretty sure there is a little\nbit of magic sprinkled in there,\n\n274\n00:16:08.598 --> 00:16:12.025\nbecause if you think back,\nNginx Alpine, it all ran on port 80.\n\n275\n00:16:12.025 --> 00:16:13.131\n&gt;&gt; Yeah.\n\n276\n00:16:13.131 --> 00:16:17.058\n&gt;&gt; But we had multiple instances on\na single node running on port 80.\n\n277\n00:16:17.058 --> 00:16:21.609\nSo it doesn't necessarily bind\nto the port of the machine.\n\n278\n00:16:21.609 --> 00:16:25.472\nIt binds to the port of a network\nthat a swarm is created for.\n\n279\n00:16:25.472 --> 00:16:30.435\n&gt;&gt; It sounds a lot like, so I gotta\nfairly extensive networking background,\n\n280\n00:16:30.435 --> 00:16:35.163\nand it's like Cisco devices you can\ncreate a virtual network interface\n\n281\n00:16:35.163 --> 00:16:39.599\nthat you can use things like hot\nstandby routing protocol, HSRP.\n\n282\n00:16:39.599 --> 00:16:43.695\nWhere you have two routers, if one goes\ndown they're actually sharing an IP\n\n283\n00:16:43.695 --> 00:16:47.601\naddress on a virtual network interface\nthat they both are connected to.\n\n284\n00:16:47.601 --> 00:16:49.621\nSo data just keeps going.\n\n285\n00:16:49.621 --> 00:16:52.337\nAnd when it comes back up,\nif that's the preferred way to go,\n\n286\n00:16:52.337 --> 00:16:54.337\nthen it just starts\nfunneling back that way.\n\n287\n00:16:54.337 --> 00:16:57.610\nIf not, it just fails over, and continues\nto failover and you rebuild it and\n\n288\n00:16:57.610 --> 00:16:58.237\nit's going.\n\n289\n00:16:58.237 --> 00:17:00.858\n&gt;&gt; And\neffectively that's what's happening.\n\n290\n00:17:00.858 --> 00:17:01.788\n&gt;&gt; Same kind of thing.\n\n291\n00:17:01.788 --> 00:17:06.278\n&gt;&gt; It's a similar type thing in what's\nthe managers, so when you create a swarm,\n\n292\n00:17:06.278 --> 00:17:09.441\nunderlying there's an orchestrator and\na scheduler.\n\n293\n00:17:09.441 --> 00:17:14.016\nAnd those actually manage how\ntraffic gets routed to each thing.\n\n294\n00:17:14.016 --> 00:17:17.114\nAnd so\nit looks like a single unified thing,\n\n295\n00:17:17.114 --> 00:17:20.140\nwhereas there's actually a lot going on.\n\n296\n00:17:20.140 --> 00:17:22.955\nNow, there is some of this that\nyou can switch around, but\n\n297\n00:17:22.955 --> 00:17:25.953\nthat's way beyond the scope of\nwhat we're hoping to do here.\n\n298\n00:17:25.953 --> 00:17:27.721\nBut yeah, that's actually a great example.\n\n299\n00:17:27.721 --> 00:17:28.774\nI didn't know you could do that.\n\n300\n00:17:28.774 --> 00:17:29.554\n&gt;&gt; Yeah.\n&gt;&gt; Yeah, so\n\n301\n00:17:29.554 --> 00:17:32.741\nthat makes a lot more sense\nas to why this is available.\n\n302\n00:17:32.741 --> 00:17:35.720\n&gt;&gt; [LAUGH]\n&gt;&gt; So now I've defined these services.\n\n303\n00:17:35.720 --> 00:17:41.860\nNow, there's two places that I've actually\ncreated, well named things, right?\n\n304\n00:17:41.860 --> 00:17:44.149\nHere's a web app, that's in networks.\n\n305\n00:17:44.149 --> 00:17:48.599\nAnd in previous episodes, we created this\nnetwork by hand, or in the compose file.\n\n306\n00:17:48.599 --> 00:17:50.440\nIt built it for us.\n\n307\n00:17:50.440 --> 00:17:54.023\nBut I also had in mongo,\nthis mongo data thing.\n\n308\n00:17:54.023 --> 00:17:59.020\nThis is a named resource,\nnamely a named volume.\n\n309\n00:17:59.020 --> 00:18:04.103\nWell, there's a top level service for\neach of those\n\n310\n00:18:04.103 --> 00:18:09.774\nthat I can denote and\nlet me over scroll here, there we go.\n\n311\n00:18:09.774 --> 00:18:13.990\nSo Yammle allows you to make comments,\nwhich is good.\n\n312\n00:18:13.990 --> 00:18:19.658\nStrict, other file formats like JSON, they\ndon't play well with comments so much.\n\n313\n00:18:19.658 --> 00:18:21.057\nSometimes I've ran into problems.\n\n314\n00:18:21.057 --> 00:18:22.210\n&gt;&gt; You've said JSON now.\n\n315\n00:18:22.210 --> 00:18:23.445\nYou know what's-\n&gt;&gt; Yeah [LAUGH] man.\n\n316\n00:18:23.445 --> 00:18:24.644\n&gt;&gt; [LAUGH]\n&gt;&gt; You done messed it up.\n\n317\n00:18:24.644 --> 00:18:26.441\n&gt;&gt; [LAUGH] yeah.\n&gt;&gt; Messed it up.\n\n318\n00:18:26.441 --> 00:18:32.146\nSo I wanna define what the network is.\n\n319\n00:18:32.146 --> 00:18:37.446\nAnd [COUGH] in previous episodes I used,\nwell, actually, I don't even think\n\n320\n00:18:37.446 --> 00:18:43.250\nI defined a driver if I'm not mistaken,\nbut I'm going to define an overlay driver.\n\n321\n00:18:43.250 --> 00:18:44.474\nNow, hm.\n\n322\n00:18:44.474 --> 00:18:46.324\n&gt;&gt; What's an overlay driver [LAUGH]?\n\n323\n00:18:46.324 --> 00:18:48.122\n&gt;&gt; That's a great question,\nthat's a great.\n\n324\n00:18:48.122 --> 00:18:51.810\nSo this is actually the way that\nthe docker's managing just what we were\n\n325\n00:18:51.810 --> 00:18:52.677\ntalking about.\n\n326\n00:18:52.677 --> 00:18:55.499\n&gt;&gt; Okay.\n&gt;&gt; It creates this overlay network\n\n327\n00:18:55.499 --> 00:18:58.711\nthat kinda behaves as a unified interface.\n\n328\n00:18:58.711 --> 00:19:04.387\n&gt;&gt; It's a single point that outsiders\nsee as the point of contact.\n\n329\n00:19:04.387 --> 00:19:07.554\n&gt;&gt; Exactly, and then everything\nkinda gets connected to that.\n\n330\n00:19:07.554 --> 00:19:13.011\nSo I like to think of it as a net that,\nyeah, right there.\n\n331\n00:19:13.011 --> 00:19:15.406\nOr a parachute, or some kinda covering.\n\n332\n00:19:15.406 --> 00:19:18.520\nThat's not technically correct,\njust so we're clear.\n\n333\n00:19:18.520 --> 00:19:24.027\nAll right, and then the volumes, Volumes,\n\n334\n00:19:24.027 --> 00:19:27.217\nand I'm just gonna say mongo_data.\n\n335\n00:19:27.217 --> 00:19:28.585\nAnd I just have to define that and\n\n336\n00:19:28.585 --> 00:19:30.874\nit will make some assumptions\nunless I change those.\n\n337\n00:19:30.874 --> 00:19:34.258\nIt has some defaults for\nthe driver, how it actually does.\n\n338\n00:19:34.258 --> 00:19:39.257\nYou can change these drivers as we've\ntalked about using all kinds of crazy\n\n339\n00:19:39.257 --> 00:19:39.821\nnames.\n\n340\n00:19:39.821 --> 00:19:43.054\nThe local driver is being one of them,\nbut also like flocker and\n\n341\n00:19:43.054 --> 00:19:44.706\nalternative storage drivers.\n\n342\n00:19:44.706 --> 00:19:50.904\nSo this actually defines our compose\nfile for our Swarm application.\n\n343\n00:19:50.904 --> 00:19:53.694\nWe should be able to deploy this.\n\n344\n00:19:53.694 --> 00:19:56.992\nBut, Daniel, I know there's a little\nmore setup that we have to do.\n\n345\n00:19:56.992 --> 00:20:00.857\nI'm not sure we can get it all done\nin a reasonable amount of time.\n\n346\n00:20:00.857 --> 00:20:03.280\n&gt;&gt; Man, I knew we hired you for\na good reason.\n\n347\n00:20:03.280 --> 00:20:05.739\n&gt;&gt; [LAUGH]\n&gt;&gt; Cuz he sees the clock and\n\n348\n00:20:05.739 --> 00:20:09.444\nhe watches it, and he says,\nthe clock is small at this point,\n\n349\n00:20:09.444 --> 00:20:12.176\nwe have little time left and\nstill bits to do.\n\n350\n00:20:12.176 --> 00:20:13.230\nSo that's a good idea.\n\n351\n00:20:13.230 --> 00:20:17.458\nWe’ll take this opportunity\nto stop right here.\n\n352\n00:20:17.458 --> 00:20:20.453\nKind of leave you guys out there\nwith a cliffhanger to come back.\n\n353\n00:20:20.453 --> 00:20:23.134\nAll right,\nnow we're up to the starting line.\n\n354\n00:20:23.134 --> 00:20:25.087\nNow, we're gonna pull the trigger and\nrace off and\n\n355\n00:20:25.087 --> 00:20:26.729\nactually get this application deployed.\n\n356\n00:20:26.729 --> 00:20:28.705\nThis is gonna be a very cool thing.\n\n357\n00:20:28.705 --> 00:20:30.742\nAnd we'll have to do that in a part two.\n\n358\n00:20:30.742 --> 00:20:33.209\nJustin, almost called you Jason.\n\n359\n00:20:33.209 --> 00:20:34.283\nAlmost did it.\n\n360\n00:20:34.283 --> 00:20:34.844\n&gt;&gt; Yeah.\n\n361\n00:20:34.844 --> 00:20:35.587\n&gt;&gt; Almost did it.\n\n362\n00:20:35.587 --> 00:20:36.805\nIt was close, it was close.\n\n363\n00:20:36.805 --> 00:20:38.304\n&gt;&gt; We're gonna have to stay with you.\n\n364\n00:20:38.304 --> 00:20:41.178\n&gt;&gt; We’re gonna have to stick with\nthe animal, on the rest of the show.\n\n365\n00:20:41.178 --> 00:20:44.162\nThat being said, we are gonna go\nahead and, well, close the show.\n\n366\n00:20:44.162 --> 00:20:45.087\nThanks for watching.\n\n367\n00:20:45.087 --> 00:20:48.748\nCome back and join us in part two to\nsee this thing complete its way out and\n\n368\n00:20:48.748 --> 00:20:51.386\nsee what Justin has in store for\nus in that episode.\n\n369\n00:20:51.386 --> 00:20:54.312\nBut as for this one,\nwe're gonna go ahead sign off for ITProTV.\n\n370\n00:20:54.312 --> 00:20:55.721\nI've been your host Daniel Lowrie.\n\n371\n00:20:55.721 --> 00:20:56.974\n&gt;&gt; And I'm Justin Dennison.\n\n372\n00:20:56.974 --> 00:20:59.273\n&gt;&gt; And we'll see you next time.\n\n373\n00:20:59.273 --> 00:21:05.277\n[MUSIC]\n\n374\n00:21:05.277 --> 00:21:07.200\nThank you for watching ITProTV.\n\n",
          "vimeoId": "212913861"
        },
        {
          "description": "In this episode, Daniel and Justin finish their effort to build a Docker Swarm application. Here they take you through the commands needed to deploy the Swarm as well as the services for the application. Finally, they test to make sure that the application is working as expected; troubleshooting any unforeseen issues.",
          "length": "1591",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-2-creating_a_docker_swarm_application_pt2-040617-PGM.00_26_17_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-2-creating_a_docker_swarm_application_pt2-040617-PGM.00_26_17_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-15-1-2-creating_a_docker_swarm_application_pt2-040617-PGM.00_26_17_03.Still001-sm.jpg",
          "title": "Creating a Docker Swarm Application Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:04.667\nWelcome ITProTV, I'm your host\n[CROSSTALK] live from San Francisco,\n\n2\n00:00:04.667 --> 00:00:06.237\nCalifornia [CROSSTALK].\n\n3\n00:00:06.237 --> 00:00:08.231\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.231 --> 00:00:12.730\nYou're watching ITProTV.\n\n5\n00:00:12.730 --> 00:00:14.130\n&gt;&gt; All right, greetings everyone, and\n\n6\n00:00:14.130 --> 00:00:16.380\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.380 --> 00:00:18.183\nI'm your host, Daniel Lowrie, and\n\n8\n00:00:18.183 --> 00:00:22.094\nin today's episode we are back with more\nof our introduction to Docker series.\n\n9\n00:00:22.094 --> 00:00:27.668\nAnd joining us back in the studio is\nthe president of the Cinderella fan club,\n\n10\n00:00:27.668 --> 00:00:30.460\nour good friend Justin Dennison [LAUGH]\n\n11\n00:00:30.460 --> 00:00:31.287\n&gt;&gt; [LAUGH]\n&gt;&gt; How's it going Justin?\n\n12\n00:00:31.287 --> 00:00:32.270\n&gt;&gt; No, no.\n\n13\n00:00:32.270 --> 00:00:35.103\nYou just left me out to dry\n&gt;&gt; I did.\n\n14\n00:00:35.103 --> 00:00:35.616\n&gt;&gt; Let's work on Docker.\n[CROSSTALK] [LAUGH]\n\n15\n00:00:35.616 --> 00:00:36.605\n&gt;&gt; That's all I'm going to say.\n\n16\n00:00:36.605 --> 00:00:38.817\n&gt;&gt; That's called just chucking.\n&gt;&gt; [LAUGH]\n\n17\n00:00:38.817 --> 00:00:40.288\n&gt;&gt; I meant the 80s hair metal band,\n\n18\n00:00:40.288 --> 00:00:41.261\nnot the Disney movie.\n\n19\n00:00:41.261 --> 00:00:44.860\n[LAUGH]\n&gt;&gt; So yeah, we're coming back.\n\n20\n00:00:44.860 --> 00:00:48.170\nWe actually left off in the last episode,\nkind of, little bit of a cliffhanger.\n\n21\n00:00:48.170 --> 00:00:50.260\nWe did some kind of setup, right?\n\n22\n00:00:51.360 --> 00:00:56.660\nWe've seen how to create swarms, we want\nto now make a swarm-based application,\n\n23\n00:00:56.660 --> 00:00:58.780\nand we had to write this swarm file.\n\n24\n00:00:58.780 --> 00:01:00.460\nSo we're actually gonna do\na little bit of review,\n\n25\n00:01:00.460 --> 00:01:05.650\nnot a whole lot there to remind ourselves\nof what we did in that episode.\n\n26\n00:01:05.650 --> 00:01:07.890\nAnd then we're gonna try\nto deploy this application.\n\n27\n00:01:07.890 --> 00:01:10.070\nSo let's go ahead and\ntake a look at my screen here, and\n\n28\n00:01:10.070 --> 00:01:11.840\nthere's a couple of\nthings I wanna point out.\n\n29\n00:01:12.850 --> 00:01:17.680\nSo here is my, I called it Docker compose\ncuz it has a Docker composed format.\n\n30\n00:01:17.680 --> 00:01:18.920\nAll right, that's good.\n\n31\n00:01:18.920 --> 00:01:21.734\nWe defined services, and\nthe version, and everything, but\n\n32\n00:01:21.734 --> 00:01:23.316\nwe had these new deploy commands.\n\n33\n00:01:23.316 --> 00:01:28.571\nAnd there's a great deal of things\nyou can set in the deploy attributes,\n\n34\n00:01:28.571 --> 00:01:34.260\nright, deploy, placement, constraints,\nas well as replicas, mode.\n\n35\n00:01:34.260 --> 00:01:38.270\nYou can set how many parallel versions\nthat are gonna be spread across,\n\n36\n00:01:38.270 --> 00:01:41.650\nthings of that nature, but\nthis was just a quick intro.\n\n37\n00:01:41.650 --> 00:01:44.440\nBut where would you go to\nfind out more about those?\n\n38\n00:01:44.440 --> 00:01:46.440\nWell, the Docker docs.\n\n39\n00:01:46.440 --> 00:01:49.420\nI do love saying Docker docs,\nthat's important.\n\n40\n00:01:49.420 --> 00:01:52.670\nAnd what's kind of interesting\nis these are called stack files.\n\n41\n00:01:52.670 --> 00:01:56.281\nNow in the Docker docs,\n[LAUGH] there's no getting away from-\n\n42\n00:01:56.281 --> 00:01:57.051\n&gt;&gt; No, [LAUGH] there's not.\n\n43\n00:01:57.051 --> 00:01:57.906\n&gt;&gt; There's no getting away from it.\n\n44\n00:01:57.906 --> 00:01:59.710\n&gt;&gt; It's here to stay.\n\n45\n00:01:59.710 --> 00:02:02.271\n&gt;&gt; This is actually called\na cloud stack YAML file.\n\n46\n00:02:02.271 --> 00:02:07.880\nAnd well, I accidentally hit back there,\ntrying to scroll around.\n\n47\n00:02:07.880 --> 00:02:09.500\nThis is called a cloud stack YAML file.\n\n48\n00:02:10.640 --> 00:02:12.910\nAnd for the most part,\nall of this still works.\n\n49\n00:02:12.910 --> 00:02:16.140\nThis is kind of where I go\nto look up some of these.\n\n50\n00:02:16.140 --> 00:02:20.935\nHowever if we look right up here,\nthis doesn't say Dockers form.\n\n51\n00:02:22.080 --> 00:02:23.430\nIt says Docker Cloud.\n\n52\n00:02:23.430 --> 00:02:28.180\nThere's actually an online service called\nDocker Cloud that allows you to manage\n\n53\n00:02:28.180 --> 00:02:33.380\nthese kind of distributed applications\nover a variety of hardware.\n\n54\n00:02:33.380 --> 00:02:36.370\nIt's called like\na heterogenous infrastructure.\n\n55\n00:02:36.370 --> 00:02:39.470\nI can have something on Azure,\nAWS, Digital Ocean, and\n\n56\n00:02:39.470 --> 00:02:42.250\non Premises, and\nutilize all of that hardware\n\n57\n00:02:42.250 --> 00:02:45.720\nkind of unified through\nthe Docker Cloud interface.\n\n58\n00:02:45.720 --> 00:02:51.600\nSo this is a management tool, but\npart of that is building an actual stack.\n\n59\n00:02:51.600 --> 00:02:56.990\nWe're going to do this with Docker kind of\nthe Docker CLI in conjunction with Swarm.\n\n60\n00:02:56.990 --> 00:02:59.099\nBut behind the scenes,\nthat's what Docker Cloud is using.\n\n61\n00:02:59.099 --> 00:03:04.260\nSo all of these options, well not all of\nthem, most of them, you have to read.\n\n62\n00:03:04.260 --> 00:03:07.780\nI haven't found a, you get Docker Compose,\n\n63\n00:03:07.780 --> 00:03:13.250\nand you get Docker stack file,\nand you gotta read the docs.\n\n64\n00:03:13.250 --> 00:03:15.120\nYou gotta dig in a little bit for this.\n\n65\n00:03:15.120 --> 00:03:19.210\nSo that's why we're just touching on this,\ncuz depending on your application\n\n66\n00:03:19.210 --> 00:03:23.050\narchitecture, you may need depends on,\nyou may not,\n\n67\n00:03:23.050 --> 00:03:26.800\nyou may need the constraints to put it\non only the manager node, you may not.\n\n68\n00:03:28.040 --> 00:03:32.370\nBut this is where I, you can kind\nof go and check these things out.\n\n69\n00:03:32.370 --> 00:03:36.920\nSo, and\nhere are those deployment strategies.\n\n70\n00:03:36.920 --> 00:03:41.788\nI finally found it, and\nit tries to increase availability,\n\n71\n00:03:41.788 --> 00:03:45.722\nbut you can You can change this.\n\n72\n00:03:45.722 --> 00:03:48.690\nYou can say send containers\nto the emptiest node.\n\n73\n00:03:48.690 --> 00:03:51.270\nThat's kind of a weird word to say,\nemptiest node.\n\n74\n00:03:51.270 --> 00:03:52.070\n&gt;&gt; The emptiest node.\n\n75\n00:03:52.070 --> 00:03:52.980\n&gt;&gt; The emptiest node.\n\n76\n00:03:52.980 --> 00:03:54.972\n&gt;&gt; Sounds like a song from the 70s or\nsomething.\n\n77\n00:03:54.972 --> 00:03:56.565\n&gt;&gt; Yeah, [SOUND] the emptiest node.\n\n78\n00:03:56.565 --> 00:03:57.720\n&gt;&gt; Yeah, [LAUGH].\n\n79\n00:03:57.720 --> 00:04:00.920\n&gt;&gt; And\nthen high availability in every node.\n\n80\n00:04:00.920 --> 00:04:05.190\nAnd there's a lot to this,\nit's really, you gotta dig in deep.\n\n81\n00:04:05.190 --> 00:04:10.000\nIt tries to maximize kind\nof your application state,\n\n82\n00:04:10.000 --> 00:04:13.390\ntries to maximize how well you\ncan utilize these features.\n\n83\n00:04:13.390 --> 00:04:17.620\nAnd, well this is a lot of reading,\nbut this is where you come to find out\n\n84\n00:04:17.620 --> 00:04:19.500\na little bit about the file\nthat we just created.\n\n85\n00:04:19.500 --> 00:04:23.520\nIt looks like a composed file, but\ntechnically it is a stack application.\n\n86\n00:04:23.520 --> 00:04:27.790\nIt is an application stack which is used\nin the developer community a great deal.\n\n87\n00:04:27.790 --> 00:04:32.590\n&gt;&gt; So just clarifying, the file that\nwe created in the previous show\n\n88\n00:04:32.590 --> 00:04:35.390\nis one of these stack files and\nnot a composed file.\n\n89\n00:04:35.390 --> 00:04:39.270\n&gt;&gt; Right, and it's in the,\nhow do I put this?\n\n90\n00:04:41.390 --> 00:04:46.392\nIt is constructed as a composed file,\nbut it is actually used\n\n91\n00:04:46.392 --> 00:04:51.211\nin describing an application\nthat is a stack of services.\n\n92\n00:04:51.211 --> 00:04:53.738\n[SOUND] That's still a lot of jargon.\n\n93\n00:04:53.738 --> 00:04:54.271\n&gt;&gt; Yeah it is.\n\n94\n00:04:54.271 --> 00:04:56.170\n&gt;&gt; Right?\nIt will take your mind a while to wrap\n\n95\n00:04:56.170 --> 00:04:59.994\nyour mind around this and as I said this\nis probably a little beyond the true\n\n96\n00:04:59.994 --> 00:05:03.524\nintroduction but this is something\nthat's now built into Docker.\n\n97\n00:05:03.524 --> 00:05:07.870\nThese are kind of these\nbleeding edge features that I\n\n98\n00:05:07.870 --> 00:05:10.450\nwouldn't come to this first.\n\n99\n00:05:10.450 --> 00:05:13.910\nI would make sure I understand\nbasic Docker compose and\n\n100\n00:05:13.910 --> 00:05:15.720\nDocker before I worry about this.\n\n101\n00:05:15.720 --> 00:05:18.890\nBut I wanted to show you\nthat these are available.\n\n102\n00:05:18.890 --> 00:05:22.430\nYou may have a use case for\nthese so there we go.\n\n103\n00:05:22.430 --> 00:05:26.780\nNow if we take a look back at my screen\nagain here, and well we got this file.\n\n104\n00:05:27.840 --> 00:05:29.728\nWe know where to go there, and\n\n105\n00:05:29.728 --> 00:05:34.116\nI have actually already prepared\nseveral nodes, running locally.\n\n106\n00:05:34.116 --> 00:05:37.670\nThe only reason I did them locally is\nthis is for demonstration purposes.\n\n107\n00:05:37.670 --> 00:05:40.890\nI could have done this on AWS,\nAzure, so on and so forth.\n\n108\n00:05:40.890 --> 00:05:45.060\nThis is gonna be a little bit faster for\ndeployment because I'm not reaching out\n\n109\n00:05:45.060 --> 00:05:47.520\nacross the Internet,\nit's actually internal to my machine.\n\n110\n00:05:49.890 --> 00:05:54.610\nAnd if we Docker-machine ssh into node-1,\n\n111\n00:05:54.610 --> 00:05:59.820\nwell, if I say docker node ls,\nthere's my swarm.\n\n112\n00:05:59.820 --> 00:06:01.910\nI've all ready set up the swarm.\n\n113\n00:06:01.910 --> 00:06:04.050\nIf you don't know how to set up a swarm,\ndefinitely go back and\n\n114\n00:06:04.050 --> 00:06:05.100\nwatch those episodes.\n\n115\n00:06:05.100 --> 00:06:08.980\nIt's what's actually kinda\ntrivial in some aspects and\n\n116\n00:06:08.980 --> 00:06:10.870\nthen other parts are incredibly confusing.\n\n117\n00:06:10.870 --> 00:06:14.540\nSo definitely you may have to\nre-watch those a couple of times.\n\n118\n00:06:14.540 --> 00:06:15.090\nThat's okay.\n\n119\n00:06:15.090 --> 00:06:17.330\nSo the swarms up, good.\n\n120\n00:06:17.330 --> 00:06:19.620\nThe machines they're up and good.\n\n121\n00:06:19.620 --> 00:06:20.620\nWe have our stack file.\n\n122\n00:06:20.620 --> 00:06:24.570\nThe only problem is is we have\nto be inside the swarm to\n\n123\n00:06:24.570 --> 00:06:27.710\ndeploy the application that is going\nto distribute across these nodes.\n\n124\n00:06:29.430 --> 00:06:32.020\nIf I ls here, all I have is a log file.\n\n125\n00:06:32.020 --> 00:06:37.264\nI need to get that folder, or\nexcuse me, that file, onto this node.\n\n126\n00:06:37.264 --> 00:06:39.950\nAll right, how do we get there?\n\n127\n00:06:39.950 --> 00:06:41.500\nSo, hm.\n\n128\n00:06:41.500 --> 00:06:42.717\n&gt;&gt; Ftp.\n\n129\n00:06:42.717 --> 00:06:44.240\n&gt;&gt; We could.\n\n130\n00:06:44.240 --> 00:06:45.580\n&gt;&gt; SCP as well, right?\n\n131\n00:06:45.580 --> 00:06:48.020\n&gt;&gt; SCP, I do love me some SCP.\n\n132\n00:06:48.020 --> 00:06:48.650\n&gt;&gt; Good stuff.\n\n133\n00:06:48.650 --> 00:06:50.450\n&gt;&gt; Now I always get these backwards, and\n\n134\n00:06:50.450 --> 00:06:53.460\nsometimes I have to try a couple of\ntimes cuz I get the format backwards.\n\n135\n00:06:53.460 --> 00:06:55.760\nBut that's all right,\nwe'll get them later.\n\n136\n00:06:55.760 --> 00:06:56.260\nSo what do I want?\n\n137\n00:06:56.260 --> 00:07:00.398\nI want that Docker compose file on node-1,\nwhich is my manager.\n\n138\n00:07:00.398 --> 00:07:05.631\nSo docker-machine scp docker-compose\n\n139\n00:07:05.631 --> 00:07:11.704\nto node-1 at the path of, well-\n&gt;&gt; Wherever you want it.\n\n140\n00:07:11.704 --> 00:07:15.330\n&gt;&gt; I'm just gonna put it wherever\nthe root directory, yeah.\n\n141\n00:07:15.330 --> 00:07:17.760\nSo docker-compose, boom, there it is.\n\n142\n00:07:17.760 --> 00:07:19.200\nSo I should be able to SSH back in.\n\n143\n00:07:20.385 --> 00:07:26.230\nSo docker-compose,\nnot docker-compose, docker-machine.\n\n144\n00:07:26.230 --> 00:07:27.070\nSee there is too much.\n\n145\n00:07:27.070 --> 00:07:28.057\n&gt;&gt; It's easy.\n\n146\n00:07:28.057 --> 00:07:31.060\n&gt;&gt; Too many docker things there.\n\n147\n00:07:31.060 --> 00:07:32.910\nSsh node-1.\n\n148\n00:07:32.910 --> 00:07:38.070\nSo we're back into our node, and\nthere's my docker compose file.\n\n149\n00:07:38.070 --> 00:07:40.600\nAt this point we will be learning\nsome new Docker commands.\n\n150\n00:07:41.610 --> 00:07:43.670\nWe've used Docker machine to\nprovision these machines.\n\n151\n00:07:44.760 --> 00:07:48.972\nWe've used the swarm command to\nactually get these up and running.\n\n152\n00:07:48.972 --> 00:07:54.838\nIn previous episodes we saw how we can\nuse Docker compose to get an application\n\n153\n00:07:54.838 --> 00:08:00.990\nstack running on a single node, and now\nwe're going to use, well if I look here.\n\n154\n00:08:00.990 --> 00:08:07.382\nDocker and if I come up here to these\nmanagement commands, here is a stack.\n\n155\n00:08:07.382 --> 00:08:11.480\nA stack is kind of a distributed system,\nokay?\n\n156\n00:08:13.070 --> 00:08:17.440\nSo I'm gonna say, docker stack and\nlet's just look at the help file here.\n\n157\n00:08:17.440 --> 00:08:21.630\nManage Docker stacks, deploy a new\nstack or update an existing one.\n\n158\n00:08:21.630 --> 00:08:26.000\nSo this is almost like a configuration\nmanagement tool where I can\n\n159\n00:08:26.000 --> 00:08:30.840\nalso update based on a new\nconfiguration in this YAML file.\n\n160\n00:08:32.080 --> 00:08:33.960\nI can list stacks, so\n\n161\n00:08:33.960 --> 00:08:39.550\nit has a similar set of APIs as\nservice and node and such as those.\n\n162\n00:08:40.640 --> 00:08:47.860\nAll right, so, if I docker stack deploy,\ncuz nothing's going on right now.\n\n163\n00:08:47.860 --> 00:08:51.730\nI wanna deploy, I can say --help.\n\n164\n00:08:51.730 --> 00:08:58.140\nWell, you'll notice there's\nan option to use a compose file.\n\n165\n00:08:58.140 --> 00:09:01.190\nOkay, now there are some\nthings that are coming online\n\n166\n00:09:01.190 --> 00:09:04.020\nthat are still in a little bit of flux.\n\n167\n00:09:04.020 --> 00:09:09.012\nIt will not be defined by a compose file,\nbut actually kind of a bundle file,\n\n168\n00:09:09.012 --> 00:09:13.076\nlike a binary that's compiled\nfrom the Docker command line.\n\n169\n00:09:13.076 --> 00:09:18.190\nI'm not gonna share that here cuz\nit's still kinda, still kinda new.\n\n170\n00:09:18.190 --> 00:09:19.010\nThis is fairly new,\n\n171\n00:09:19.010 --> 00:09:23.860\nbut this is based on previous technology\nthat they're kinda building upon.\n\n172\n00:09:23.860 --> 00:09:26.800\nI think it's a little easier\nto wrap your mind around.\n\n173\n00:09:28.278 --> 00:09:33.460\nSo we're gonna send that compose\nfile's path to docker stack deploy.\n\n174\n00:09:33.460 --> 00:09:34.860\nAll right, so here we go.\n\n175\n00:09:34.860 --> 00:09:38.518\nDocker stack deploy --compose-file and\n\n176\n00:09:38.518 --> 00:09:43.459\nwell we're just gonna say\ndocker-compose.yml now it has\n\n177\n00:09:43.459 --> 00:09:48.540\nto be in the docker compose\nformat as we have seen.\n\n178\n00:09:48.540 --> 00:09:49.322\nAnd what are we gonna do?\n\n179\n00:09:49.322 --> 00:09:53.660\nWell the last part they don't tell\nyou is you have to name the stack.\n\n180\n00:09:53.660 --> 00:09:55.230\nWhat is this thing?\n\n181\n00:09:55.230 --> 00:09:58.330\nAll right, let's just call it webapp.\n\n182\n00:09:58.330 --> 00:10:01.380\nI don't know, no, no,\nthat's the network name.\n\n183\n00:10:01.380 --> 00:10:05.440\nName, name, let's call it just for\nfun, cheeseburger.\n\n184\n00:10:05.440 --> 00:10:07.060\nCuz I think that's funny.\n\n185\n00:10:07.060 --> 00:10:09.684\nConstraint, additional property\nconstraint is not allowed.\n\n186\n00:10:09.684 --> 00:10:13.410\nHm, what?\n\n187\n00:10:13.410 --> 00:10:14.010\nIt failed.\n\n188\n00:10:14.010 --> 00:10:15.477\n&gt;&gt; That's very informative.\n\n189\n00:10:15.477 --> 00:10:16.970\n[LAUGH]\n&gt;&gt; Yeah, but\n\n190\n00:10:16.970 --> 00:10:20.942\nif you remember in our compose file\n&gt;&gt; There was constraints.\n\n191\n00:10:20.942 --> 00:10:24.094\n&gt;&gt; There was constraints, but\nnotice, right here, I forgot an s.\n\n192\n00:10:25.420 --> 00:10:26.038\n&gt;&gt; Whoopsie daisy.\n\n193\n00:10:26.038 --> 00:10:27.278\n&gt;&gt; Look at that.\n\n194\n00:10:27.278 --> 00:10:29.593\n&gt;&gt; That is a-\n&gt;&gt; Get you every time, won't it?\n\n195\n00:10:29.593 --> 00:10:32.060\n&gt;&gt; Get you every time,\nmisspellings and typos.\n\n196\n00:10:32.060 --> 00:10:35.560\nSo I have to actually go SCP that back in.\n\n197\n00:10:35.560 --> 00:10:36.960\n&gt;&gt; Just re-copy it over.\n\n198\n00:10:36.960 --> 00:10:40.430\n&gt;&gt; Yeah, so\nI'm not going to exit out and redo that.\n\n199\n00:10:40.430 --> 00:10:43.878\nI'm just gonna open another\nterminal window and-\n\n200\n00:10:43.878 --> 00:10:45.286\n&gt;&gt; If you're already in that,\n\n201\n00:10:45.286 --> 00:10:47.820\ncan't you just open it up\nwith some sort of editor?\n\n202\n00:10:47.820 --> 00:10:49.380\nOr does it-\n&gt;&gt; [CROSSTALK] I can.\n\n203\n00:10:49.380 --> 00:10:51.716\nI think VI and NO are available.\n\n204\n00:10:51.716 --> 00:10:53.718\n&gt;&gt; Actually, let's check that out.\n\n205\n00:10:53.718 --> 00:10:54.850\n&gt;&gt; Let's check it out.\n\n206\n00:10:54.850 --> 00:11:01.854\nI'm pretty sure that VI, not VIM, sorry.\n\n207\n00:11:01.854 --> 00:11:02.780\nYep, VI is there.\n\n208\n00:11:02.780 --> 00:11:06.714\nSo let's just make that change here.\n\n209\n00:11:06.714 --> 00:11:08.804\n&gt;&gt; But typically you would do\nthat on the original file,\n\n210\n00:11:08.804 --> 00:11:11.508\nbecause then any time you copied it out,\nit would always be changed.\n\n211\n00:11:11.508 --> 00:11:15.711\n&gt;&gt; Yeah, you need to make sure those\nchanges kinda propagate through your\n\n212\n00:11:15.711 --> 00:11:17.500\napplication workflow.\n\n213\n00:11:17.500 --> 00:11:19.920\nOr the workflow for\ndeveloping this application.\n\n214\n00:11:19.920 --> 00:11:22.830\nSo now we've made that change,\nwe've made that save.\n\n215\n00:11:25.107 --> 00:11:30.190\nIgnoring unsupported options build.\n\n216\n00:11:30.190 --> 00:11:32.050\n&gt;&gt; Having a real hard time getting\nthis thing to go, aren't you?\n\n217\n00:11:32.050 --> 00:11:35.880\n&gt;&gt; Mm, image reference must be provided\n&gt;&gt; That's kinda weird.\n\n218\n00:11:35.880 --> 00:11:37.120\nIt did create the network.\n\n219\n00:11:37.120 --> 00:11:39.000\nIt created the service called Redis.\n\n220\n00:11:39.000 --> 00:11:40.220\nIt created the service called Mongo.\n\n221\n00:11:40.220 --> 00:11:42.084\nIt created a service but,\n\n222\n00:11:42.084 --> 00:11:47.630\nsee how it's trying to create the service\ncalled app, cheeseburger.app.\n\n223\n00:11:47.630 --> 00:11:50.512\n[CROSSTALK] Should probably\npick a better name.\n\n224\n00:11:50.512 --> 00:11:53.290\nWell, image reference must be provided.\n\n225\n00:11:53.290 --> 00:11:56.622\nAll right, so,\nlet's go check out the Docker docs and\n\n226\n00:11:56.622 --> 00:11:58.366\ntry to reason through this.\n\n227\n00:11:58.366 --> 00:12:00.297\n&gt;&gt; Is that because we\nnamed it cheeseburger, and\n\n228\n00:12:00.297 --> 00:12:02.970\nnot something that it's familiar with,\nlike EngineX?\n\n229\n00:12:02.970 --> 00:12:05.780\n&gt;&gt; So, you would think that, but no.\n\n230\n00:12:05.780 --> 00:12:10.246\nAnd full disclosure, I intentionally\ndid this, because in Docker Compose,\n\n231\n00:12:10.246 --> 00:12:14.960\nthere are two ways to define how\na container could be kind of built, right.\n\n232\n00:12:14.960 --> 00:12:18.940\nYou can have the build or\nyou can have an image, all right.\n\n233\n00:12:20.310 --> 00:12:23.036\nHowever, in a stack,\nit has to be an image.\n\n234\n00:12:23.036 --> 00:12:26.211\n&gt;&gt; Mm.\n&gt;&gt; It has to be an image,\n\n235\n00:12:26.211 --> 00:12:29.520\nbuild is not allowed.\n\n236\n00:12:30.670 --> 00:12:34.070\nSo you have to be using like\nDocker Hub as a registry.\n\n237\n00:12:34.070 --> 00:12:37.670\nOr you have to pre-build the-\n&gt;&gt; Your cheeseburger app.\n\n238\n00:12:37.670 --> 00:12:40.760\n&gt;&gt; Yeah, the actual,\nwhat it's talking about.\n\n239\n00:12:41.880 --> 00:12:45.460\nIf we come over here is see this build?\n\n240\n00:12:45.460 --> 00:12:46.970\nIt's trying to build this application.\n\n241\n00:12:48.020 --> 00:12:52.700\nSo you have to build that\napplication before you can use it.\n\n242\n00:12:52.700 --> 00:12:55.746\nAnd then you have to reference that\napplication in the stack file.\n\n243\n00:12:55.746 --> 00:12:58.150\n&gt;&gt; Right.\n&gt;&gt; In the Docker compose stack file.\n\n244\n00:12:58.150 --> 00:13:02.390\nSo we probably need to make that change,\nand actually build it inside of there.\n\n245\n00:13:02.390 --> 00:13:05.080\nAnd what I recommend doing is\nwe're going to do this locally,\n\n246\n00:13:05.080 --> 00:13:08.350\nwithout worrying about Docker Hub,\nand things of that nature.\n\n247\n00:13:08.350 --> 00:13:11.450\nBut what I would do is,\nif you have to deploy these, and\n\n248\n00:13:11.450 --> 00:13:13.310\nyou want to use this service.\n\n249\n00:13:13.310 --> 00:13:18.220\nYou could either use Docker HUB or\nan onpremises registry for your images.\n\n250\n00:13:18.220 --> 00:13:22.130\nAnd then point those build,\ncommit, and send those up.\n\n251\n00:13:22.130 --> 00:13:25.990\nWe've actually demonstrated doing\nsuch a thing in previous episodes, so\n\n252\n00:13:25.990 --> 00:13:26.860\ncheck that out.\n\n253\n00:13:26.860 --> 00:13:30.320\nBut we're gonna do this all locally\njust to get this up and running.\n\n254\n00:13:30.320 --> 00:13:34.938\nSo I'm need to change this and well,\nI know I'm gonna have to come back and\n\n255\n00:13:34.938 --> 00:13:38.154\nSEP this directory in order\nto complete the build.\n\n256\n00:13:38.154 --> 00:13:40.503\nSo I'm gonna go ahead and\nchange it locally and\n\n257\n00:13:40.503 --> 00:13:42.800\nthen just re-SEP everything back in there.\n\n258\n00:13:42.800 --> 00:13:47.710\nSo I'm gonna say image and I'm gonna\nname this image Justindevpro/ because\n\n259\n00:13:47.710 --> 00:13:51.510\nthis would normally, it's normally how\nit would be on the docket registry.\n\n260\n00:13:52.940 --> 00:14:00.270\nLet's call this pythonweb because\nthis is a Python Web app.\n\n261\n00:14:00.270 --> 00:14:03.920\nIf I was building a true application,\nit would have a name that is meaningful.\n\n262\n00:14:05.170 --> 00:14:06.720\nSo there's the image.\n\n263\n00:14:06.720 --> 00:14:09.170\nSo I need this folder and\nI need to build that image.\n\n264\n00:14:09.170 --> 00:14:11.750\nAnd once I build that image,\nwell, I should be good to go.\n\n265\n00:14:11.750 --> 00:14:13.079\nSo let's actually go do that.\n\n266\n00:14:14.420 --> 00:14:19.305\nSo I'm gonna exit out of this node,\nand I want to scp app and\n\n267\n00:14:19.305 --> 00:14:21.200\ndocker-compose back in there.\n\n268\n00:14:21.200 --> 00:14:25.390\nSo let's just take it one at\na time to make sure it works.\n\n269\n00:14:25.390 --> 00:14:28.747\nScp, I think it's, is it -r?\n\n270\n00:14:28.747 --> 00:14:30.020\nI think so.\n\n271\n00:14:30.020 --> 00:14:35.434\nApp to node I could be wrong, who knows.\n\n272\n00:14:35.434 --> 00:14:37.258\n&gt;&gt; We're about to find out.\n\n273\n00:14:37.258 --> 00:14:39.176\nYep to app, boom, here it is.\n\n274\n00:14:39.176 --> 00:14:44.066\nAnd if I docker machine scp the docker\ncomposed, I'm actually going to rename\n\n275\n00:14:44.066 --> 00:14:48.214\nthis just to show you it doesn't\nhave to be called docker compose,\n\n276\n00:14:48.214 --> 00:14:51.130\nit just has to follow that format.\n\n277\n00:14:51.130 --> 00:14:56.984\nI'm gonna call this stack.yml,\nokay because it is a Docker stack file.\n\n278\n00:14:56.984 --> 00:15:01.835\nAnd there we go, and\nnow I'm going to docker\n\n279\n00:15:01.835 --> 00:15:07.210\nmachine ssh back into node- 1, clear, ls.\n\n280\n00:15:07.210 --> 00:15:08.020\nThere's my app.\n\n281\n00:15:08.020 --> 00:15:09.330\nThere's my Docker Compose.\n\n282\n00:15:09.330 --> 00:15:11.070\nI don't want that anymore.\n\n283\n00:15:11.070 --> 00:15:13.040\nThat's the old one,\ndoesn't work, it's broke.\n\n284\n00:15:14.520 --> 00:15:18.060\nAll right, there's my stack yaml,\nand here's app.\n\n285\n00:15:18.060 --> 00:15:22.312\nSo I'm going to say docker build,\n\n286\n00:15:22.312 --> 00:15:29.800\nthese are previous commands,\n-t justindevpro/webapp.\n\n287\n00:15:29.800 --> 00:15:34.545\nOkay actually I call this Python web,\nexcuse me, Pythonweb.,\n\n288\n00:15:34.545 --> 00:15:39.117\nunable to evaluate some links\nin docker file, home, docker,\n\n289\n00:15:39.117 --> 00:15:42.080\nno such folder, that's interesting.\n\n290\n00:15:43.300 --> 00:15:48.274\nWhat do we have here, unable to evaluate\nsome links in docker file path, home,\n\n291\n00:15:48.274 --> 00:15:49.777\ndocker, docker file.\n\n292\n00:15:49.777 --> 00:15:53.766\nHm, that is.\n\n293\n00:15:53.766 --> 00:15:55.103\n&gt;&gt; No vim.\n\n294\n00:15:55.103 --> 00:15:59.307\n&gt;&gt; Yeah, there's no vim in here either,\nso let's take a look here.\n\n295\n00:15:59.307 --> 00:16:05.104\nAnd that is interesting.\n\n296\n00:16:08.414 --> 00:16:09.307\nWhat did I miss?\n\n297\n00:16:09.307 --> 00:16:12.010\nI missed something.\n\n298\n00:16:14.910 --> 00:16:15.560\nYou know what?\n\n299\n00:16:17.670 --> 00:16:20.320\nYou actually have to be in the folder\n\n300\n00:16:20.320 --> 00:16:22.230\nwhere the Docker file\nis in order to build.\n\n301\n00:16:22.230 --> 00:16:23.100\nI do that all the time.\n\n302\n00:16:23.100 --> 00:16:24.210\n&gt;&gt; That probably would help.\n\n303\n00:16:24.210 --> 00:16:25.223\n&gt;&gt; Yeah, it probably would.\n\n304\n00:16:25.223 --> 00:16:27.120\nI like how you're just standing there-\n&gt;&gt; [LAUGH]\n\n305\n00:16:27.120 --> 00:16:28.775\n&gt;&gt; Like, I'm gonna judge you harshly.\n\n306\n00:16:28.775 --> 00:16:31.045\n&gt;&gt; Yes.\n&gt;&gt; [LAUGH] Not that I could've helped you.\n\n307\n00:16:31.045 --> 00:16:33.360\n[LAUGH]\n&gt;&gt; So docker build,\n\n308\n00:16:33.360 --> 00:16:36.570\nnow I'm inside the app\nfolder which I SCPd over.\n\n309\n00:16:36.570 --> 00:16:37.843\nWhoopsy daisy, my fault.\n\n310\n00:16:37.843 --> 00:16:43.280\nSo this little period right here, it can't\nfind the symlink because there's no Docker\n\n311\n00:16:43.280 --> 00:16:48.432\nfile inside this top level directory,\nit's actually inside of an app subfolder.\n\n312\n00:16:48.432 --> 00:16:49.535\n&gt;&gt; Directly in your directory?\n\n313\n00:16:49.535 --> 00:16:51.093\n&gt;&gt; Directly-\n&gt;&gt; [SOUND] Yeah.\n\n314\n00:16:51.093 --> 00:16:55.236\n&gt;&gt; Exactly, and so\nnow I should be able to build, and\n\n315\n00:16:55.236 --> 00:17:00.080\nif I don't, well,\nthere's gonna be egg on my face.\n\n316\n00:17:00.080 --> 00:17:03.500\nSo now it's actually\ngonna build the context.\n\n317\n00:17:03.500 --> 00:17:04.940\nThat's because I was in the wrong place.\n\n318\n00:17:04.940 --> 00:17:07.854\nI was pointing the build\nto the wrong place.\n\n319\n00:17:07.854 --> 00:17:09.743\nSo this dot means,\nin this current directory,\n\n320\n00:17:09.743 --> 00:17:12.150\nI wasn't in the directory\nthat had the Docker file.\n\n321\n00:17:12.150 --> 00:17:16.314\nSo you'll notice, if you've watched the\nprevious episodes, I should know this, but\n\n322\n00:17:16.314 --> 00:17:17.562\nwe all mess up sometimes.\n\n323\n00:17:17.562 --> 00:17:25.295\nSo now what it's doing is pulling down\nthat image to this actual machine.\n\n324\n00:17:25.295 --> 00:17:29.530\nAnd we're gonna see, is that gonna be\nenough to distribute this out, right?\n\n325\n00:17:29.530 --> 00:17:34.750\nSo the question is, I don't know,\nis it going to actually\n\n326\n00:17:34.750 --> 00:17:38.610\ndistribute that out over the multiple\nnodes when we deployed this stack?\n\n327\n00:17:38.610 --> 00:17:40.279\nSo this is a fairly large image.\n\n328\n00:17:40.279 --> 00:17:44.724\nIt's a bunch of Base, but it does have\nPython 3.5 I've already set up for me.\n\n329\n00:17:44.724 --> 00:17:48.940\nI know the rest of the build goes fairly\nquickly after that initial image pull.\n\n330\n00:17:48.940 --> 00:17:53.200\nNow, every rebuild after this on\nthis machine should go very quickly.\n\n331\n00:17:53.200 --> 00:17:57.340\nBecause I don't have to\npull the Python 3.5 image.\n\n332\n00:17:57.340 --> 00:17:59.883\nSo we should be good.\n\n333\n00:17:59.883 --> 00:18:01.664\nHere's the moment of truth, Daniel.\n\n334\n00:18:01.664 --> 00:18:02.680\nYou ready?\n\n335\n00:18:02.680 --> 00:18:05.936\nDocker stack deploy.\n\n336\n00:18:05.936 --> 00:18:07.285\n&gt;&gt; I'm on the edge of my seat.\n\n337\n00:18:07.285 --> 00:18:08.661\n&gt;&gt; I can see it.\n\n338\n00:18:08.661 --> 00:18:11.920\nYeah, if you could only see Daniel,\nhe is excited.\n\n339\n00:18:11.920 --> 00:18:13.055\nSee how excited he is?\n\n340\n00:18:13.055 --> 00:18:14.141\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n341\n00:18:14.141 --> 00:18:17.459\nwe're gonna deploy based\non a compose file.\n\n342\n00:18:17.459 --> 00:18:20.483\nAnd we actually call the new\nversion stack.yml, right?\n\n343\n00:18:20.483 --> 00:18:21.170\n&gt;&gt; Right.\n\n344\n00:18:21.170 --> 00:18:24.780\n&gt;&gt; So and I actually have to\ngive it a name, cheeseburger.\n\n345\n00:18:25.840 --> 00:18:26.890\nWe're gonna go with cheeseburger.\n\n346\n00:18:28.260 --> 00:18:30.850\nCheeseburger, and\nI might have to give it a different name.\n\n347\n00:18:30.850 --> 00:18:37.384\nNote it's updating the previous ones based\non the build, cuz those didn't fail.\n\n348\n00:18:37.384 --> 00:18:38.426\nAnd what happened?\n\n349\n00:18:38.426 --> 00:18:39.578\nLet's see.\n\n350\n00:18:39.578 --> 00:18:40.803\n&gt;&gt; I don't see errors.\n\n351\n00:18:40.803 --> 00:18:42.120\n&gt;&gt; I don't see any errors.\n\n352\n00:18:43.630 --> 00:18:46.420\nEverything looks good as\nfar as my nodes are going.\n\n353\n00:18:46.420 --> 00:18:49.940\nLet's look at docker service ls.\n\n354\n00:18:49.940 --> 00:18:54.170\nAnd now, well,\nthese replicas are taking a little while.\n\n355\n00:18:54.170 --> 00:18:56.620\nLet's see if those actually come online.\n\n356\n00:18:59.230 --> 00:19:00.560\nAnd wait for it.\n\n357\n00:19:01.790 --> 00:19:03.280\nNope, there they are.\n\n358\n00:19:03.280 --> 00:19:04.357\nSo it does take a little bit.\n\n359\n00:19:04.357 --> 00:19:07.103\nAnd what it did is it took that\nimage from the manager and\n\n360\n00:19:07.103 --> 00:19:08.845\nit distributed it over the nodes.\n\n361\n00:19:08.845 --> 00:19:13.170\nSo I only needed that image in one place,\nand that's incredibly handy.\n\n362\n00:19:13.170 --> 00:19:17.760\nNow there's no guarantee that would\nhappen because, well, I would have\n\n363\n00:19:17.760 --> 00:19:21.840\nto go research to see if it pulls it to\nthe main node and then distribute it out.\n\n364\n00:19:21.840 --> 00:19:24.727\nOr if it just tells the nodes\nto pull from Docker Hub.\n\n365\n00:19:24.727 --> 00:19:26.587\nThat escapes me at current time.\n\n366\n00:19:26.587 --> 00:19:30.850\nUltimately, it doesn't matter in this\ncontext because regardless of how it\n\n367\n00:19:30.850 --> 00:19:32.430\nhappens, it happens.\n\n368\n00:19:32.430 --> 00:19:34.470\nSo our replicas are up and running.\n\n369\n00:19:34.470 --> 00:19:39.130\nLet's actually look at\nservice ps cheeseburger.\n\n370\n00:19:41.040 --> 00:19:43.390\nCheese, I should've picked a shorter name.\n\n371\n00:19:43.390 --> 00:19:44.440\n&gt;&gt; Yeah, you should've.\n\n372\n00:19:44.440 --> 00:19:46.795\n&gt;&gt; So cheeseburger app.\n\n373\n00:19:46.795 --> 00:19:48.748\nNow we ran into errors.\n\n374\n00:19:48.748 --> 00:19:50.249\n&gt;&gt; Everything's gonna shut down,\nshut down.\n\n375\n00:19:50.249 --> 00:19:53.643\n&gt;&gt; Yeah, running, running,\nrunning, up, shut down, rejected.\n\n376\n00:19:53.643 --> 00:19:55.701\nSo what happened, Daniel?\n\n377\n00:19:55.701 --> 00:19:57.144\nWhat happened?\n\n378\n00:19:57.144 --> 00:20:02.960\nWell, it exactly happened\nwhat I said wasn't happening.\n\n379\n00:20:02.960 --> 00:20:04.415\nWhy would I say that?\n\n380\n00:20:04.415 --> 00:20:06.310\nCuz I made a mistake.\n\n381\n00:20:06.310 --> 00:20:07.840\nWhat needs to happen?\n\n382\n00:20:07.840 --> 00:20:12.470\nI have to push this Docker Hub in\norder to get this image up and going.\n\n383\n00:20:12.470 --> 00:20:14.510\nSo now we messed up again.\n\n384\n00:20:14.510 --> 00:20:15.480\n&gt;&gt; Yeah.\n\n385\n00:20:15.480 --> 00:20:18.350\n&gt;&gt; These applications are complicated.\n\n386\n00:20:18.350 --> 00:20:21.470\nThese tools help, but\nthey don't solve all the problems.\n\n387\n00:20:21.470 --> 00:20:23.810\nSo now, what should I do?\n\n388\n00:20:23.810 --> 00:20:26.820\nWell, I'm gonna hop out\nof this Docker machine.\n\n389\n00:20:28.650 --> 00:20:30.403\nI'm actually going to remove that image.\n\n390\n00:20:30.403 --> 00:20:37.664\nDocker images rm, actually docker rmi\n\n391\n00:20:37.664 --> 00:20:43.172\njustindevpro/pythonweb.\n\n392\n00:20:43.172 --> 00:20:45.140\nAnd I have to force it,\n\n393\n00:20:45.140 --> 00:20:50.437\ncuz there's a current running container,\nand there we go.\n\n394\n00:20:50.437 --> 00:20:53.393\nAnd I'm actually gonna\nkill the service also.\n\n395\n00:20:53.393 --> 00:20:56.849\nService ls, docker.\n\n396\n00:20:56.849 --> 00:20:59.897\nSo, here's a quick trick.\n\n397\n00:20:59.897 --> 00:21:02.960\nEven though it says the replicas are up\nand running, they're actually crashing.\n\n398\n00:21:02.960 --> 00:21:04.250\nThey're not doing anything.\n\n399\n00:21:05.750 --> 00:21:11.297\nSo I'm going to service,\nkill cheeseburger,\n\n400\n00:21:11.297 --> 00:21:14.763\ncheese, not kill, remove,\n\n401\n00:21:14.763 --> 00:21:19.210\nexcuse me there's lots of commands.\n\n402\n00:21:20.520 --> 00:21:25.690\nDocker service actually,\nI don't know why I'm using service help.\n\n403\n00:21:26.740 --> 00:21:34.090\nThere we go,\ndocker stack rm cheeseburger, boom.\n\n404\n00:21:34.090 --> 00:21:36.670\nSo it's removed,\nall that's brought back down.\n\n405\n00:21:36.670 --> 00:21:40.470\nNow we gotta go build that image,\nsend it to Docker Hub, and\n\n406\n00:21:40.470 --> 00:21:43.240\nthen we'll be able to pull\nto all of those nodes.\n\n407\n00:21:43.240 --> 00:21:48.050\nSo I did that to demonstrate, well,\nthis looks like it's working.\n\n408\n00:21:49.650 --> 00:21:51.040\nBut you always have to inspect,\n\n409\n00:21:51.040 --> 00:21:54.080\nbecause it may not be working\nlike you anticipate it does.\n\n410\n00:21:54.080 --> 00:21:56.540\nAll right, so let's get this up and\ngoing real quick.\n\n411\n00:21:57.980 --> 00:22:00.826\nSo I'm gonna go inside of app and\nthere's my Docker file.\n\n412\n00:22:00.826 --> 00:22:05.990\nDocker build -t justindevpro/ I\n\n413\n00:22:05.990 --> 00:22:10.640\nthink I called it pythonweb,\nand I have to build there.\n\n414\n00:22:10.640 --> 00:22:15.780\nNow, that ran really fast, cuz I already\nhad the Python 3.5 image locally.\n\n415\n00:22:15.780 --> 00:22:21.524\nSo then I'm gonna say docker\npush justindevpro/pythonweb.\n\n416\n00:22:22.740 --> 00:22:26.280\nAnd it is gonna take a little\nbit to push this image back.\n\n417\n00:22:26.280 --> 00:22:32.670\nAnd I'm logged into my Docker Hub\naccount through this Docker instance.\n\n418\n00:22:32.670 --> 00:22:35.866\nNow, I should be able to go,\n\n419\n00:22:35.866 --> 00:22:41.210\nwe'll say docker-machine\nssh into node one.\n\n420\n00:22:44.074 --> 00:22:46.165\nAll right, so moment of truth.\n\n421\n00:22:46.165 --> 00:22:47.540\nIt should work this time.\n\n422\n00:22:47.540 --> 00:22:48.797\n&gt;&gt; Fingers crossed.\n\n423\n00:22:48.797 --> 00:22:54.061\n&gt;&gt; Yep, so I think this is,\nwhat, second time, third time?\n\n424\n00:22:54.061 --> 00:22:54.802\nI lost count.\n\n425\n00:22:54.802 --> 00:22:56.271\n&gt;&gt; [LAUGH]\n&gt;&gt; I lost count.\n\n426\n00:22:56.271 --> 00:22:59.495\nSo I'm gonna deploy compose file and\n\n427\n00:22:59.495 --> 00:23:04.390\nthen just call it stock.yel and\nI have to give it a name.\n\n428\n00:23:04.390 --> 00:23:05.452\nI'm gonna give it a shorter name.\n\n429\n00:23:09.025 --> 00:23:10.000\nI'm just gonna call it thing.\n\n430\n00:23:11.730 --> 00:23:12.490\nSo boom, boom,\n\n431\n00:23:12.490 --> 00:23:17.170\nboom, and now it did exactly what\nit did just a little while ago.\n\n432\n00:23:17.170 --> 00:23:24.880\nSo docker service ls, and\nthere's the application.\n\n433\n00:23:24.880 --> 00:23:26.950\nLet's see when those replicas come online.\n\n434\n00:23:28.260 --> 00:23:30.950\nSo still waiting,\nstill waiting, still waiting.\n\n435\n00:23:32.190 --> 00:23:33.770\nNow why is this taking longer?\n\n436\n00:23:34.870 --> 00:23:35.860\nWell, it's not timing out.\n\n437\n00:23:35.860 --> 00:23:39.640\nIt's actually pulling the image\nthat we just pushed to Docker Hub.\n\n438\n00:23:39.640 --> 00:23:45.580\nSo that makes sense, but it is gonna\ntake a little bit for these to work.\n\n439\n00:23:45.580 --> 00:23:48.009\nAnd let's make sure\nthe other things are up and\n\n440\n00:23:48.009 --> 00:23:50.196\nrunning as this is pulling those images.\n\n441\n00:23:50.196 --> 00:23:58.242\nSo docker service ps thing_mongo.\n\n442\n00:23:58.242 --> 00:23:58.864\nIt's running.\n\n443\n00:23:58.864 --> 00:23:59.936\nIt's up and running, okay.\n\n444\n00:23:59.936 --> 00:24:03.045\nWhat about redis?\n\n445\n00:24:03.045 --> 00:24:07.240\nOkay, what about app?\n\n446\n00:24:07.240 --> 00:24:10.440\nAnd it's still up.\n\n447\n00:24:10.440 --> 00:24:12.680\nIt's actually running now.\n\n448\n00:24:12.680 --> 00:24:16.530\nLet's make sure that it's\nreported in the service ls.\n\n449\n00:24:16.530 --> 00:24:19.000\nMy replicas are up and running.\n\n450\n00:24:19.000 --> 00:24:25.408\nI should be able to go to this\nnode on port 5000 and see.\n\n451\n00:24:25.408 --> 00:24:27.516\nDaniel, I'm gonna need you\nto cross your fingers.\n\n452\n00:24:27.516 --> 00:24:28.399\n&gt;&gt; Okay.\n\n453\n00:24:28.399 --> 00:24:31.372\n&gt;&gt; All right, you can't see him but\nhe's got them crossed.\n\n454\n00:24:31.372 --> 00:24:32.233\nHe's got his arms crossed.\n\n455\n00:24:32.233 --> 00:24:33.167\nHe's crazy.\n\n456\n00:24:33.167 --> 00:24:35.350\nSo, let's go over here.\n\n457\n00:24:35.350 --> 00:24:37.620\nActually, I need to know the IP address.\n\n458\n00:24:37.620 --> 00:24:43.842\nSo I'm gonna hop out of this node and\nsay docker machine, ls,\n\n459\n00:24:43.842 --> 00:24:50.517\nand let's just grab this IP address and\nsee if it works.\n\n460\n00:24:50.517 --> 00:24:55.920\nAnd it is on port 5000,\nand boom, there you go.\n\n461\n00:24:55.920 --> 00:24:59.714\nSo we have now distributed this\nover multiple VMs that have been\n\n462\n00:24:59.714 --> 00:25:02.017\nprovisioning using Docker machine.\n\n463\n00:25:02.017 --> 00:25:04.170\nYou can provision these any way you want.\n\n464\n00:25:04.170 --> 00:25:08.317\nBut they have been distributed over\nthe swarm by using a stack file and\n\n465\n00:25:08.317 --> 00:25:12.121\nyou can Docker stack remove and\nit'll bring down the service.\n\n466\n00:25:12.121 --> 00:25:15.662\nIf you redeploy using the same\nfile that has changes in it,\n\n467\n00:25:15.662 --> 00:25:17.697\nit will then do a running update.\n\n468\n00:25:17.697 --> 00:25:21.037\nAnd there's ways to configure\nprocedures for, well,\n\n469\n00:25:21.037 --> 00:25:23.674\nif I have multiple copies of my app,\nright?\n\n470\n00:25:23.674 --> 00:25:26.761\nOr Mongo or Redis, or\nwhatever service you've defined,\n\n471\n00:25:26.761 --> 00:25:30.671\nit'll deploy strategies to keep a high\nup time and things of that nature.\n\n472\n00:25:30.671 --> 00:25:32.173\nBut that was a lot of work, Daniel.\n\n473\n00:25:32.173 --> 00:25:33.040\n&gt;&gt; It was.\n\n474\n00:25:33.040 --> 00:25:38.110\n&gt;&gt; But we are finished with\nDocker swarm goodness.\n\n475\n00:25:38.110 --> 00:25:39.220\n&gt;&gt; It was very cool stuff.\n\n476\n00:25:39.220 --> 00:25:41.980\nAnd we do appreciate\nyou taking the time to\n\n477\n00:25:41.980 --> 00:25:45.010\nshow us all the steps that it\ntakes to perform this action.\n\n478\n00:25:45.010 --> 00:25:48.461\nLooking at some of the pitfalls that\nyou might encounter along the way so\n\n479\n00:25:48.461 --> 00:25:49.449\nwe can avoid those.\n\n480\n00:25:49.449 --> 00:25:51.786\nBecause as your good friends and\nCinderella say,\n\n481\n00:25:51.786 --> 00:25:55.402\nyou don't know what you got until you\ncheck your application is working as you\n\n482\n00:25:55.402 --> 00:25:56.862\nthink it's supposed to work.\n\n483\n00:25:56.862 --> 00:26:01.007\nAnd Justin being nobody's fool did\nthat very thing, so we do appreciate.\n\n484\n00:26:01.007 --> 00:26:01.744\n&gt;&gt; All good.\n\n485\n00:26:01.744 --> 00:26:02.928\n&gt;&gt; Yeah, I nailed him.\n\n486\n00:26:02.928 --> 00:26:03.774\n&gt;&gt; Man.\n\n487\n00:26:03.774 --> 00:26:06.487\n&gt;&gt; So we're gonna take the last\nmile down this gypsy road.\n\n488\n00:26:06.487 --> 00:26:07.952\n[LAUGH]\n&gt;&gt; Man.\n\n489\n00:26:07.952 --> 00:26:11.340\n&gt;&gt; And thank you for watching, and\nwe do thank Justin for joining us today.\n\n490\n00:26:11.340 --> 00:26:13.600\nBut it's that time for\nsign off, nothing for nothing.\n\n491\n00:26:13.600 --> 00:26:15.870\nI've been your host, Daniel Lowrie.\n\n492\n00:26:15.870 --> 00:26:16.893\n&gt;&gt; And I'm Justin Dennison.\n\n493\n00:26:16.893 --> 00:26:19.008\n&gt;&gt; And we'll see you next time.\n\n494\n00:26:19.008 --> 00:26:24.965\n[MUSIC]\n\n495\n00:26:24.965 --> 00:26:28.074\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "212914280"
        }
      ],
      "title": "Intro to Docker"
    }
  ],
  "url": "introdocker",
  "vLab": false
}
