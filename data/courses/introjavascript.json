{
  "description": "In this series, Mike and Justin are going to the explore the beginning of JavaScript in the browser. This is going to lay the foundation for the additional work to come in JavaScript. There will be a focus on the ECMAScript 5 features that are found in the browser. If you want to create interactive websites, are new to programming, or just want to know more about JavaScript, then you have come to the right place. They cover topics such a deep dive on the data types found in JavaScript, operating on the data types,  iteration(loops), control flow (decision making), creating  functions for code reuse, and touching on the beginning of object oriented programming.",
  "descriptionMD": "In this series, Mike and Justin are going to the explore the beginning of JavaScript in the browser. This is going to lay the foundation for the additional work to come in JavaScript. There will be a focus on the ECMAScript 5 features that are found in the browser. If you want to create interactive websites, are new to programming, or just want to know more about JavaScript, then you have come to the right place. They cover topics such a deep dive on the data types found in JavaScript, operating on the data types,  iteration(loops), control flow (decision making), creating  functions for code reuse, and touching on the beginning of object oriented programming.",
  "length": "22320",
  "name": "Intro to JavaScript",
  "practiceExam": false,
  "subtitle": "Getting Started",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this series, Mike and Justin are going to the explore the beginning of JavaScript in the browser. This is going to lay the foundation for the additional work to come in JavaScript. There will be a focus on the ECMAScript 5 features that are found in the browser. If you want to create interactive websites, are new to programming, or just want to know more about JavaScript, then you have come to the right place. They cover topics such a deep dive on the data types found in JavaScript, operating on the data types, iteration(loops), control flow (decision making), creating functions for code reuse, and touching on the beginning of object oriented programming.",
          "length": "40",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskill-introductiontojavascript-0-0-overiew-020617-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskill-introductiontojavascript-0-0-overiew-020617-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskill-introductiontojavascript-0-0-overiew-020617-high-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.025 --> 00:00:04.953\n[SOUND] Hello, I'm excited to\nannounce we've got a new series\n\n2\n00:00:04.953 --> 00:00:10.273\ncoming your way here at ITPRO.TV,\nIntroduction to JavaScript.\n\n3\n00:00:10.273 --> 00:00:13.840\nHere to tell us all about it and\nwhat we can expect, Mr. Justin Dennison.\n\n4\n00:00:13.840 --> 00:00:18.013\n&gt;&gt; Thanks Mike, JavaScript, that tiny\ninterpretive language that makes all those\n\n5\n00:00:18.013 --> 00:00:20.442\nwebpages have those\nwonderful interactions.\n\n6\n00:00:20.442 --> 00:00:23.108\nDuring this series we're gonna\ncover how to create a function.\n\n7\n00:00:23.108 --> 00:00:25.187\nHow to create loops,\nhow to make decisions.\n\n8\n00:00:25.187 --> 00:00:29.670\nAs well as working with those\nfundamental data types, arrays,\n\n9\n00:00:29.670 --> 00:00:32.001\nobjects, strings, and dates.\n\n10\n00:00:32.001 --> 00:00:36.360\nSo if that's something you're interested\nin, I can't wait to see you there.\n\n11\n00:00:36.360 --> 00:00:39.280\n[SOUND]\n\n",
          "vimeoId": "203162783"
        },
        {
          "description": "In this episode, Justin and Mike begin their exploration into the world of JavaScript. They talk about the origins and historyo f JavaScript. They also look at setting up an environment to develop with JavaScript.",
          "length": "1100",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-1-getting_started_and_history-013017-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-1-getting_started_and_history-013017-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-1-getting_started_and_history-013017-1-sm.jpg",
          "title": "Getting Started and History",
          "transcript": "WEBVTT\n\n1\n00:00:00.220 --> 00:00:01.396\nWelcome to ITProTV.\n\n2\n00:00:01.396 --> 00:00:06.884\nI'm your host [CROSSTALK]\n\n3\n00:00:06.884 --> 00:00:08.500\n[MUSIC]\n\n4\n00:00:08.500 --> 00:00:10.808\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.808 --> 00:00:12.852\n&gt;&gt; Hello.\n\n6\n00:00:12.852 --> 00:00:15.460\nWelcome to another exciting\nepisode here at ITProTV.\n\n7\n00:00:15.460 --> 00:00:17.516\nI'm your host Mike Rodrick and today,\n\n8\n00:00:17.516 --> 00:00:20.045\nwe're doing our\nintroduction to JavaScript.\n\n9\n00:00:20.045 --> 00:00:24.385\nAnd specifically in this episode, we're\ngonna take a look at just getting started\n\n10\n00:00:24.385 --> 00:00:26.370\nwith JavaScript, where do we begin?\n\n11\n00:00:26.370 --> 00:00:30.630\nAs well as, take look at a little bit of\nhistory on JavaScript, where it came from?\n\n12\n00:00:30.630 --> 00:00:34.531\nAnd here to help us with that is,\nour in-house JavaScript expert Mr.\n\n13\n00:00:34.531 --> 00:00:35.600\nJustin Dennison.\n\n14\n00:00:35.600 --> 00:00:36.790\nWelcome Justin.\n\n15\n00:00:36.790 --> 00:00:37.970\nThanks for having me here, Mike.\n\n16\n00:00:37.970 --> 00:00:41.480\nI am excited to be there, and\nI'm ready to get started.\n\n17\n00:00:41.480 --> 00:00:43.030\n&gt;&gt; Yeah me too, I'm excited as well.\n\n18\n00:00:43.030 --> 00:00:46.070\nSo let's start off with,\nwhat is JavaScript?\n\n19\n00:00:46.070 --> 00:00:47.660\n&gt;&gt; So, that's a great question Mike.\n\n20\n00:00:47.660 --> 00:00:52.130\nI think it's important to have a little\nbit of context and history, for\n\n21\n00:00:52.130 --> 00:00:55.830\nthe JavaScript language,\nbefore we worry about really diving in.\n\n22\n00:00:55.830 --> 00:01:01.310\nSo, JavaScript was actually invented by\nBrendan Eich, at the Netscape community.\n\n23\n00:01:01.310 --> 00:01:04.100\nBut really, why would we need\nsomething that runs in the browser?\n\n24\n00:01:04.100 --> 00:01:05.910\nWe had HTML and CSS.\n\n25\n00:01:05.910 --> 00:01:07.680\nBut, I don't know if you\nremember those wonderful\n\n26\n00:01:07.680 --> 00:01:08.502\nGeoCities pages-\n&gt;&gt; [LAUGH]\n\n27\n00:01:08.502 --> 00:01:10.502\n&gt;&gt; Or those Angelfire pages.\n\n28\n00:01:10.502 --> 00:01:15.680\nIf there wasn't at least 13 animated GIFs\non those, then we weren't doing it right.\n\n29\n00:01:15.680 --> 00:01:17.160\n&gt;&gt; With a little MIDI\nmusic in the background?\n\n30\n00:01:17.160 --> 00:01:18.676\n&gt;&gt; Yeah, yeah, yeah.\n\n31\n00:01:18.676 --> 00:01:23.160\nMusic, one of my favorite\nthings that loads on a page.\n\n32\n00:01:23.160 --> 00:01:25.860\nSo the purpose of JavaScript\nwas to add interactivity.\n\n33\n00:01:25.860 --> 00:01:29.860\nKind of, point, click,\nmovements, basic animations.\n\n34\n00:01:29.860 --> 00:01:34.380\nSo Brendan Eich at Netscape,\nmore or less, made it in ten days.\n\n35\n00:01:34.380 --> 00:01:35.900\nNow that's what I've heard and\n\n36\n00:01:35.900 --> 00:01:40.780\nread, but the initial release\nwas only ten days to produce.\n\n37\n00:01:40.780 --> 00:01:44.540\nNow, Brendan Eich has actually since\nmoved on to the Mozilla Project,\n\n38\n00:01:44.540 --> 00:01:46.610\nwhich we all know creates Firefox.\n\n39\n00:01:46.610 --> 00:01:48.150\nSo he's still around.\n\n40\n00:01:48.150 --> 00:01:53.150\nBut, JavaScript has went through some\nmetamorphoses throughout the years.\n\n41\n00:01:53.150 --> 00:01:54.940\nIt started with that basic implementation.\n\n42\n00:01:54.940 --> 00:01:57.636\nIt was originally called Mocha.\n\n43\n00:01:57.636 --> 00:01:58.800\n&gt;&gt; Hmm!\n&gt;&gt; Later changed to LiveScript.\n\n44\n00:01:58.800 --> 00:02:00.390\nAnd then there was this other language,\n\n45\n00:02:00.390 --> 00:02:04.960\nhappening at the exact same time,\nreally getting its market share.\n\n46\n00:02:04.960 --> 00:02:06.080\nMaybe you've heard of it, Java.\n\n47\n00:02:07.360 --> 00:02:12.550\nAnd as a result, they were like\nmaybe we can capitalize on this.\n\n48\n00:02:12.550 --> 00:02:14.410\nAnd through some wheelings and dealings,\n\n49\n00:02:14.410 --> 00:02:18.610\nchange the final name to JavaScript,\njust to capitalize on that market.\n\n50\n00:02:18.610 --> 00:02:20.820\n&gt;&gt; So Java and JavaScript then,\nto make sure we're clear,\n\n51\n00:02:20.820 --> 00:02:23.590\nare different animals, right?\n\n52\n00:02:23.590 --> 00:02:24.650\n&gt;&gt; Exactly.\n\n53\n00:02:24.650 --> 00:02:28.545\nSo Java and JavaScript, they share a name,\nthey share a little bit of syntax, but\n\n54\n00:02:28.545 --> 00:02:29.620\nthat's about it.\n\n55\n00:02:29.620 --> 00:02:34.210\nOne runs in the browser, one used to\nrun in the browser but, has since been\n\n56\n00:02:34.210 --> 00:02:38.820\n[SOUND] nixed, and then one is scripting,\nand one is a compiled language.\n\n57\n00:02:38.820 --> 00:02:39.557\n&gt;&gt; Very good.\n\n58\n00:02:39.557 --> 00:02:41.499\nAnd then so JavaScript came about,\n\n59\n00:02:41.499 --> 00:02:44.678\nbecause initially web pages\nwere very inactive, right?\n\n60\n00:02:44.678 --> 00:02:47.462\nI mean, they were, as you said,\nyou had a couple moving GIFs.\n\n61\n00:02:47.462 --> 00:02:49.660\nThat was it though.\n\n62\n00:02:49.660 --> 00:02:51.770\nThere was a lot of static text,\n\n63\n00:02:51.770 --> 00:02:56.340\nand scripting in Java Script in general,\nis what gave us the interactivity.\n\n64\n00:02:56.340 --> 00:02:58.840\nThe buttons that we can click on,\nand things like that.\n\n65\n00:02:58.840 --> 00:02:59.550\n&gt;&gt; Exactly.\n\n66\n00:02:59.550 --> 00:03:00.942\nSo without JavaScript,\n\n67\n00:03:00.942 --> 00:03:05.461\nthose pages that you load that look like\nnative applications, would not exist.\n\n68\n00:03:05.461 --> 00:03:06.210\n&gt;&gt; Wow.\n\n69\n00:03:06.210 --> 00:03:08.780\n&gt;&gt; Now throughout the years,\nJavaScript has, like I said,\n\n70\n00:03:08.780 --> 00:03:12.930\nwent through several changes,\nhas become a better language, I think,\n\n71\n00:03:12.930 --> 00:03:15.290\nthat's a personal opinion,\nthroughout the ages.\n\n72\n00:03:15.290 --> 00:03:17.430\nBut it's because of,\n\n73\n00:03:17.430 --> 00:03:21.340\nwhat is called the European\nComputer Manufacturers Association.\n\n74\n00:03:21.340 --> 00:03:24.230\nThey've actually become\nthe organizing body, for\n\n75\n00:03:24.230 --> 00:03:28.650\nthe standard of JavaScript,\nalso known as Ecma.\n\n76\n00:03:28.650 --> 00:03:33.911\nThey actually had a hand in C#,\nparts of the CD-ROM standardization, C ++.\n\n77\n00:03:33.911 --> 00:03:36.660\nSo, they've had their\nfingers in a few things.\n\n78\n00:03:36.660 --> 00:03:40.690\nBut, they are pushing JavaScript forward,\n\n79\n00:03:40.690 --> 00:03:44.460\nwith new language features that\nmake things so much easier.\n\n80\n00:03:44.460 --> 00:03:45.005\n&gt;&gt; Nice, very nice.\n\n81\n00:03:45.005 --> 00:03:47.734\nSo, how are we gonna learn JavaScript?\n\n82\n00:03:47.734 --> 00:03:51.568\nAnd what's the easiest way,\nI guess, to begin our journey,\n\n83\n00:03:51.568 --> 00:03:54.905\nas we learn about the wonderful\nworld of JavaScript?\n\n84\n00:03:54.905 --> 00:03:56.500\n&gt;&gt; Well, I had a time deciding.\n\n85\n00:03:56.500 --> 00:03:59.240\nBecause JavaScript has not only\nstayed in the browser, but\n\n86\n00:03:59.240 --> 00:04:01.550\nit's started to flow into other areas.\n\n87\n00:04:01.550 --> 00:04:04.790\nBut I think it's best to\nstart where JavaScript began.\n\n88\n00:04:04.790 --> 00:04:06.170\nAnd that's in the browser.\n\n89\n00:04:06.170 --> 00:04:09.520\nAnd in order to do that, I think we\nneed to do a little bit of setup.\n\n90\n00:04:09.520 --> 00:04:11.680\nSo, just to make sure we're\nall on the same page.\n\n91\n00:04:11.680 --> 00:04:13.230\nSo, everybody can follow along.\n\n92\n00:04:13.230 --> 00:04:17.158\nWe're gonna do a little bit of setup,\nwith the browser as well as,\n\n93\n00:04:17.158 --> 00:04:20.030\nbasic text editors, and how to run things.\n\n94\n00:04:20.030 --> 00:04:24.460\nSo, I've actually decided to\nuse the Chrome browser, kind of\n\n95\n00:04:24.460 --> 00:04:28.780\na personal preference of mine, because I'm\nvery familiar with the developer tools.\n\n96\n00:04:28.780 --> 00:04:32.910\nThat's not to say that Opera, Firefox,\nSafari do not have comparable tools.\n\n97\n00:04:34.130 --> 00:04:38.250\nBut Chrome is kinda my browser of choice.\n\n98\n00:04:38.250 --> 00:04:40.780\n&gt;&gt; [LAUGH] Now I notice you\ndidn't mention Internet Explorer.\n\n99\n00:04:40.780 --> 00:04:41.789\nIs there a reason for that?\n\n100\n00:04:41.789 --> 00:04:43.549\n&gt;&gt; That's a great question!\n\n101\n00:04:43.549 --> 00:04:46.370\nNow, the new Edge browser is not too bad.\n\n102\n00:04:46.370 --> 00:04:47.660\nIt's actually pretty nice.\n\n103\n00:04:47.660 --> 00:04:48.700\nI've been using it lately.\n\n104\n00:04:48.700 --> 00:04:50.170\nI enjoy the experience.\n\n105\n00:04:50.170 --> 00:04:53.430\nI haven't messed around with\nthe development portion of that.\n\n106\n00:04:53.430 --> 00:04:57.490\nLike the developer tools,\nmessing around within the internals.\n\n107\n00:04:57.490 --> 00:05:02.602\nBut in general, I stay away from Internet\nExplorer itself, because it has some\n\n108\n00:05:02.602 --> 00:05:07.660\ninteresting implementation details,\nthat make my life hard as a developer.\n\n109\n00:05:07.660 --> 00:05:10.948\n&gt;&gt; And as an intro to JavaScript,\nwe wanna just get in a platform where,\n\n110\n00:05:10.948 --> 00:05:14.579\nwe know things are gonna work, and\nit's not my browser's limitations or,\n\n111\n00:05:14.579 --> 00:05:16.130\nblocking anything.\n\n112\n00:05:16.130 --> 00:05:18.620\nSo Chrome, Firefox, one of those guys.\n\n113\n00:05:18.620 --> 00:05:19.600\n&gt;&gt; Exactly.\n\n114\n00:05:19.600 --> 00:05:21.655\n&gt;&gt; Okay.\n&gt;&gt; Those will make your life very easy,\n\n115\n00:05:21.655 --> 00:05:25.108\nlower the frustration, and\nlet's worry about learning, and not so\n\n116\n00:05:25.108 --> 00:05:27.087\nmuch about [SOUND] this isn't working.\n\n117\n00:05:27.087 --> 00:05:29.860\n&gt;&gt; [LAUGH]\n&gt;&gt; So within this,\n\n118\n00:05:29.860 --> 00:05:32.352\nI would like to just search for\nGoogle Chrome.\n\n119\n00:05:32.352 --> 00:05:36.590\nIf you're one of those that still\nuse Internet Explorer, that's fine.\n\n120\n00:05:36.590 --> 00:05:39.630\nEdge, I know a bunch of people who\nwere just using Edge straight out of\n\n121\n00:05:39.630 --> 00:05:40.510\nthe box on Windows 10.\n\n122\n00:05:40.510 --> 00:05:45.760\nBut, if we go and search for\nChrome, Google Chrome,\n\n123\n00:05:45.760 --> 00:05:51.140\nit will auto detect, and you can download,\nwhich you have to accept and install.\n\n124\n00:05:51.140 --> 00:05:54.980\nNow I'm not going to install this,\nI just wanted to show you where to get it.\n\n125\n00:05:54.980 --> 00:05:56.880\nBecause I already have Chrome installed.\n\n126\n00:05:58.720 --> 00:06:01.980\n&gt;&gt; Now, secondly let's go ahead and\nopen Google Chrome.\n\n127\n00:06:04.340 --> 00:06:08.140\nWe do need to get a text editor,\nthat will make our life easier.\n\n128\n00:06:08.140 --> 00:06:11.480\nText editors are a choice, an opinion,\n\n129\n00:06:11.480 --> 00:06:15.190\nkind of a very biased opinion,\nfor developers.\n\n130\n00:06:15.190 --> 00:06:18.290\nYou can use things like\ntext editor notepad.\n\n131\n00:06:18.290 --> 00:06:23.180\nHowever, they will make your life, again,\nmore difficult than it needs to be.\n\n132\n00:06:23.180 --> 00:06:26.310\nMy preferred text editor of choice is,\nATOM.\n\n133\n00:06:26.310 --> 00:06:28.500\nWhich is put out by\na company called GitHub.\n\n134\n00:06:30.150 --> 00:06:33.390\nWonderful company, helps with version\ncontrol in very large projects.\n\n135\n00:06:33.390 --> 00:06:36.370\nBut they're building things to\nmake developers lives easier.\n\n136\n00:06:36.370 --> 00:06:39.100\nWhen you go to Atom.io,\n\n137\n00:06:39.100 --> 00:06:42.910\nthen it will automatically detect your\nplatform, and give you the download link.\n\n138\n00:06:42.910 --> 00:06:45.620\nLike mine says, download for Mac.\n\n139\n00:06:45.620 --> 00:06:48.930\nIf you have a Windows computer,\nit would download for Windows.\n\n140\n00:06:48.930 --> 00:06:52.450\nYou have a Linux computer with a GUI,\nit will say download for Linux.\n\n141\n00:06:52.450 --> 00:06:57.050\nSo it's a cross-platform, and\nthat's another reason that I've chosen it.\n\n142\n00:06:57.050 --> 00:07:01.135\nIs to unify the experience,\nbetween the platforms.\n\n143\n00:07:01.135 --> 00:07:01.783\n&gt;&gt; Mm-hm, very good.\n\n144\n00:07:01.783 --> 00:07:06.220\n&gt;&gt; So I'm not gonna download that either,\nbecause I already have that installed.\n\n145\n00:07:06.220 --> 00:07:08.200\nBut, let's take a look at\nthe interface real quick.\n\n146\n00:07:11.040 --> 00:07:13.210\nAnd so we have Atom open.\n\n147\n00:07:13.210 --> 00:07:18.443\nAnd when you open Atom for the first time,\nyou will see you have a welcome screen.\n\n148\n00:07:18.443 --> 00:07:20.690\nTypically, it opens an untitled document.\n\n149\n00:07:20.690 --> 00:07:23.330\nAnd then,\nthings that you can do within Atom.\n\n150\n00:07:23.330 --> 00:07:24.890\nNow I'm gonna stay away from that for\n\n151\n00:07:24.890 --> 00:07:30.480\nnow, just because we wanna get into\nJavaScript and see how things work.\n\n152\n00:07:30.480 --> 00:07:31.780\nSo I'm gonna full screen this.\n\n153\n00:07:33.390 --> 00:07:40.570\nAnd the question is, how am I gonna\nget the browser up and running?\n\n154\n00:07:40.570 --> 00:07:42.320\nWhat do I need to do?\n\n155\n00:07:42.320 --> 00:07:47.770\nWell, I've actually created a starter\nproject, that is kinda the base level,\n\n156\n00:07:47.770 --> 00:07:49.590\nas simple as possible.\n\n157\n00:07:49.590 --> 00:07:53.960\nAnd within this starter project\nyou'll notice there are two files.\n\n158\n00:07:53.960 --> 00:07:55.290\nAnd kinda hard to see here.\n\n159\n00:07:57.492 --> 00:08:00.124\nWe'll take a look at those here\nin just a moment, in Atom.\n\n160\n00:08:00.124 --> 00:08:04.610\nLet's go ahead and open those.\n\n161\n00:08:04.610 --> 00:08:08.200\nSo I'm gonna go to file,\nadd project folder.\n\n162\n00:08:08.200 --> 00:08:09.640\nAnd I've already got the starter.\n\n163\n00:08:09.640 --> 00:08:12.550\nI just went to the starter template.\n\n164\n00:08:12.550 --> 00:08:16.090\nAnd then I open the folder, and that\nwill actually open the entire folder and\n\n165\n00:08:16.090 --> 00:08:18.230\nits contents, within the Atom text editor.\n\n166\n00:08:18.230 --> 00:08:23.400\nNow that we have our project open in Atom,\nI noticed that these are kind of hard\n\n167\n00:08:23.400 --> 00:08:29.420\nto see but, we have at.js as well as,\nindex.html here.\n\n168\n00:08:29.420 --> 00:08:31.724\nThose are both important files.\n\n169\n00:08:31.724 --> 00:08:35.922\nIndex.html, referenceapp.js and\nhere's app.js.\n\n170\n00:08:35.922 --> 00:08:37.740\nNow, what does that mean?\n\n171\n00:08:37.740 --> 00:08:41.921\nWell, in order to execute this in\na browser we need to open index.html in\n\n172\n00:08:41.921 --> 00:08:44.542\nthe browser, to make sure everything runs.\n\n173\n00:08:44.542 --> 00:08:47.078\nAnd we will type,\na little bit of JavaScript,\n\n174\n00:08:47.078 --> 00:08:51.710\njust to make sure everything's good to go,\nand look at some of the Chrome dev tools.\n\n175\n00:08:53.650 --> 00:08:56.150\nSo, how do we get that inside of Chrome?\n\n176\n00:08:56.150 --> 00:09:01.890\nIf I open Chrome,\nI can actually go to File &gt; Open File, and\n\n177\n00:09:01.890 --> 00:09:08.450\nnavigate to that same folder and\nfile structure, that I have open in Atom.\n\n178\n00:09:08.450 --> 00:09:11.510\nSo it's on my desktop, and\nI'm gonna start with starter template, and\n\n179\n00:09:11.510 --> 00:09:13.489\njust open index.html.\n\n180\n00:09:15.340 --> 00:09:20.866\nAnd you'll notice that, Chrome now\nhas that little bit of HTML that I\n\n181\n00:09:20.866 --> 00:09:26.296\nhave inside of index.html, but\nis actually running the app.js,\n\n182\n00:09:26.296 --> 00:09:29.646\nimmediately, as soon as the page loads.\n\n183\n00:09:29.646 --> 00:09:31.090\nNow, this is not very interesting.\n\n184\n00:09:31.090 --> 00:09:35.790\nThis is not where JavaScript is happening\nfor us, during the initial execution.\n\n185\n00:09:35.790 --> 00:09:38.013\nYou come over to the three little dots.\n\n186\n00:09:38.013 --> 00:09:40.414\nI remember this used to\nbe the hamburger icon,\n\n187\n00:09:40.414 --> 00:09:43.990\nif you're running an alternative\nversion of Chrome.\n\n188\n00:09:43.990 --> 00:09:47.900\nThere's a great deal of options here,\nthat a lot of people use,\n\n189\n00:09:47.900 --> 00:09:51.820\nbut I tend to go to the more tools,\nand developer tools.\n\n190\n00:09:53.480 --> 00:09:58.290\nWithin developer tools,\nthere's several tabs here.\n\n191\n00:09:58.290 --> 00:10:01.632\nIf I go to elements, it will actually\njust show me the HTML as rendered, and\n\n192\n00:10:01.632 --> 00:10:02.974\nI can inspect through those.\n\n193\n00:10:02.974 --> 00:10:04.926\nHandy if you need those.\n\n194\n00:10:04.926 --> 00:10:07.463\nThe console, is actually where\nthe job description output,\n\n195\n00:10:07.463 --> 00:10:09.280\nif there is any output, would be rendered.\n\n196\n00:10:09.280 --> 00:10:14.348\nSo if I have to print something to\nthe screen, it will output here.\n\n197\n00:10:14.348 --> 00:10:20.746\nAnd for a majority of the time, we will\nbe just outputting things to the screen,\n\n198\n00:10:20.746 --> 00:10:25.522\nkind of diving around,\nseeing how JavaScript interacts,\n\n199\n00:10:25.522 --> 00:10:28.692\nwithin the browser execution engine.\n\n200\n00:10:28.692 --> 00:10:31.586\nNow, these are the two most\nimportant tabs for us, right now.\n\n201\n00:10:31.586 --> 00:10:34.369\nThere are additional tabs, such as source,\n\n202\n00:10:34.369 --> 00:10:38.338\nwhich will show you what is\ncurrently open within your browser.\n\n203\n00:10:38.338 --> 00:10:40.722\nGive you a standard source tree.\n\n204\n00:10:40.722 --> 00:10:43.748\nYou have Network,\nwhich is network requests.\n\n205\n00:10:43.748 --> 00:10:45.358\nTimelines.\n\n206\n00:10:45.358 --> 00:10:49.873\nThose are good to know if you have,\n\n207\n00:10:49.873 --> 00:10:55.646\nsuch as a little,\nI got a little typo there.\n\n208\n00:10:55.646 --> 00:10:56.526\n&gt;&gt; Mm-hm.\n\n209\n00:10:56.526 --> 00:10:57.063\n&gt;&gt; So network.\n\n210\n00:11:00.918 --> 00:11:04.558\nSo that shows that HTML was loaded, but\nnotice app.js was not loaded, within that.\n\n211\n00:11:04.558 --> 00:11:09.396\nSo if don't see app.js there,\nthen if I'm looking in the console for\n\n212\n00:11:09.396 --> 00:11:11.860\noutput, I will run into problems.\n\n213\n00:11:14.090 --> 00:11:18.116\nAnd I can tell you, from experience,\nthat's incredibly frustrating.\n\n214\n00:11:18.116 --> 00:11:19.924\nAnd you just go, why are you not working?\n\n215\n00:11:19.924 --> 00:11:20.884\nI don't understand!\n\n216\n00:11:20.884 --> 00:11:23.810\nAnd then when you hop\nover to the network tab,\n\n217\n00:11:23.810 --> 00:11:28.518\nyou realize that app.js is not\nactually loading, within the browser.\n\n218\n00:11:28.518 --> 00:11:31.760\nSo I'm gonna put that back.\n\n219\n00:11:31.760 --> 00:11:34.209\nAnd, let's make sure that\nthis is fully loading, and\n\n220\n00:11:34.209 --> 00:11:35.818\nthere's no other issues going on.\n\n221\n00:11:35.818 --> 00:11:38.000\nSo the first thing I wanna say is, Hello.\n\n222\n00:11:38.000 --> 00:11:40.013\nSo I have console.log.\n\n223\n00:11:40.013 --> 00:11:47.400\nNow console is in fact, this console here.\n\n224\n00:11:47.400 --> 00:11:51.206\nAnd log just means,\nlog it to the console output.\n\n225\n00:11:51.206 --> 00:11:53.382\nSo kind of a standard in, standard out.\n\n226\n00:11:53.382 --> 00:11:59.014\nNow within the browser context,\nwe have the ability for output mostly.\n\n227\n00:11:59.014 --> 00:12:03.686\nThere's a little bit of input, but\nthey're the really annoying inputs.\n\n228\n00:12:03.686 --> 00:12:08.570\nYou ever have those pop-ups that ask\nyou questions, and tell you things?\n\n229\n00:12:08.570 --> 00:12:12.304\nI'm not a big fan of pop-ups,\njust in your face all the time.\n\n230\n00:12:12.304 --> 00:12:15.711\nBut we may use them from time to time,\njust for some simple user interaction.\n\n231\n00:12:17.330 --> 00:12:19.578\nSo-\n&gt;&gt; Only if all coders could be like you.\n\n232\n00:12:19.578 --> 00:12:20.961\n[LAUGH]\n&gt;&gt; Yeah I know.\n\n233\n00:12:20.961 --> 00:12:23.831\nI have some strong opinions on,\ndon't, no pop-ups.\n\n234\n00:12:23.831 --> 00:12:25.950\nPop-ups are bad.\n\n235\n00:12:25.950 --> 00:12:28.545\nNow, I've changed this within my Atom.\n\n236\n00:12:30.240 --> 00:12:33.110\nSo in my text editor,\nI've added code here.\n\n237\n00:12:33.110 --> 00:12:34.930\nNotice, there are no blue dots up here.\n\n238\n00:12:36.190 --> 00:12:40.590\nIf I add just a space, that blue dot,\n\n239\n00:12:40.590 --> 00:12:44.570\na common issue is,\nI've made a change in my JavaScript file.\n\n240\n00:12:44.570 --> 00:12:46.790\nI forgot to save.\n\n241\n00:12:46.790 --> 00:12:49.330\nI go back, try to run it.\n\n242\n00:12:50.480 --> 00:12:55.160\nAnd, that printed hello, but\nif I'd added something else as such.\n\n243\n00:13:05.082 --> 00:13:08.378\nThere it is, but\nI'm gonna take this out, and not save.\n\n244\n00:13:08.378 --> 00:13:12.205\nNotice that blue dot is there.\n\n245\n00:13:12.205 --> 00:13:14.220\nI'm expecting only hello.\n\n246\n00:13:16.846 --> 00:13:22.738\nBut every time I refresh,\nwhich is again executing that app.js file,\n\n247\n00:13:22.738 --> 00:13:25.204\nI'm getting Hello, World.\n\n248\n00:13:25.204 --> 00:13:30.441\nAnd because of that nature,\nit's incredibly frustrating at times,\n\n249\n00:13:30.441 --> 00:13:33.648\nand frankly, you gotta take small steps.\n\n250\n00:13:33.648 --> 00:13:35.488\nPreventative measures to make sure,\n\n251\n00:13:35.488 --> 00:13:38.368\nyou lessen the amount of\nfrustration that you experience.\n\n252\n00:13:38.368 --> 00:13:42.832\nSo I'm gonna save here, and refresh.\n\n253\n00:13:42.832 --> 00:13:45.626\nSo if you see this, we're all set up and\n\n254\n00:13:45.626 --> 00:13:50.650\nready to start diving into JavaScript,\nwithin the browser context.\n\n255\n00:13:52.070 --> 00:13:52.730\nA couple of other things,\n\n256\n00:13:52.730 --> 00:13:57.330\nbecause JavaScript is an interpreted\nlanguage, it runs from top to bottom.\n\n257\n00:13:59.380 --> 00:14:07.800\nThat means if I have an error, such as\nthis, this is not valid within JavaScript.\n\n258\n00:14:07.800 --> 00:14:12.452\nAnd I go and refresh,\nI will see errors such as this.\n\n259\n00:14:12.452 --> 00:14:15.470\nThis is the dreaded uncaught syntax error.\n\n260\n00:14:15.470 --> 00:14:18.390\nI will highlight common\nplaces that this will occur,\n\n261\n00:14:18.390 --> 00:14:22.570\nas we go through the additional\nconcepts within JavaScript.\n\n262\n00:14:22.570 --> 00:14:29.600\nThis is a number one frustration point,\nfor beginning JavaScript programmers.\n\n263\n00:14:29.600 --> 00:14:30.990\nUnexpected token.\n\n264\n00:14:30.990 --> 00:14:32.569\nWhere?\nWho knows?\n\n265\n00:14:32.569 --> 00:14:34.729\n&gt;&gt; [LAUGH]\n&gt;&gt; However,\n\n266\n00:14:34.729 --> 00:14:39.088\nI do wanna show you that another reason I\nlike Chrome, is over here there's a link.\n\n267\n00:14:39.088 --> 00:14:44.376\nIf I click the link,\nChrome will try its best to let you know,\n\n268\n00:14:44.376 --> 00:14:47.190\nwhere that error has occurred.\n\n269\n00:14:47.190 --> 00:14:51.026\nSo console dot and there is the error.\n\n270\n00:14:51.026 --> 00:14:55.056\nThat's where it's occurred.\n\n271\n00:14:55.056 --> 00:14:59.750\nSo I can go fix that and, Don't do that.\n\n272\n00:15:04.272 --> 00:15:08.070\nAnd now if I refresh,\nnotice that error has gone away.\n\n273\n00:15:08.070 --> 00:15:11.018\nNotice we're in the sources tab.\n\n274\n00:15:11.018 --> 00:15:14.522\nI have to go back to console,\nand I now have no errors.\n\n275\n00:15:14.522 --> 00:15:17.434\n&gt;&gt; So Justin,\nI noticed when you did have that error,\n\n276\n00:15:17.434 --> 00:15:20.000\nit did not fire the first line, the Hello.\n\n277\n00:15:20.000 --> 00:15:22.756\nSo when you say it runs top to bottom,\nare you saying that,\n\n278\n00:15:22.756 --> 00:15:26.610\neither the entire thing executes without\nerror, or it doesn't execute at all?\n\n279\n00:15:26.610 --> 00:15:27.930\nIt's not gonna do part?\n\n280\n00:15:27.930 --> 00:15:29.282\nOr some of it sometimes?\n\n281\n00:15:29.282 --> 00:15:31.270\n&gt;&gt; Yeah it's very odd.\n\n282\n00:15:31.270 --> 00:15:33.910\nSo again, that's based on context.\n\n283\n00:15:33.910 --> 00:15:36.950\nWe have a very flat JavaScript file.\n\n284\n00:15:36.950 --> 00:15:39.630\nAnd what I mean is,\nthere's no nested functions,\n\n285\n00:15:39.630 --> 00:15:43.320\nthere's no nested calls\nto other functions.\n\n286\n00:15:43.320 --> 00:15:47.690\nSo what it will actually do,\nis try to slurp in all of that, and\n\n287\n00:15:47.690 --> 00:15:49.888\ndo something called parsing.\n\n288\n00:15:49.888 --> 00:15:51.138\nMake sure that the syntax is correct.\n\n289\n00:15:51.138 --> 00:15:54.800\nForm the pragmatic abstractions\nthat it needs, in order to execute.\n\n290\n00:15:54.800 --> 00:15:59.280\nSo because of that,\nsince there's an error at the top level.\n\n291\n00:15:59.280 --> 00:16:04.073\nAnd, what I mean by top level is this\nfile, is there's nothing nested in\n\n292\n00:16:04.073 --> 00:16:09.198\nfunctions, or nested inside of other\nfiles, because it's very top level.\n\n293\n00:16:09.198 --> 00:16:13.188\nAs it tries to slurp this in, and\ninterpret it, that error causes,\n\n294\n00:16:13.188 --> 00:16:14.734\n[SOUND] execution to stop.\n\n295\n00:16:14.734 --> 00:16:17.454\n&gt;&gt; But if that error had been\nnested a few levels deep,\n\n296\n00:16:17.454 --> 00:16:21.198\nwe might have seen part of the page\nexecute, and then the error occur?\n\n297\n00:16:21.198 --> 00:16:22.046\n&gt;&gt; Exactly.\n\n298\n00:16:22.046 --> 00:16:26.169\nA common place that these errors can,\nkinda wreck your life a little bit,\n\n299\n00:16:26.169 --> 00:16:30.360\nare when you're dealing with button\nclicks, or when you're dealing with\n\n300\n00:16:30.360 --> 00:16:35.530\nfunctions, that are only called at certain\ntimes, JavaScript will run through.\n\n301\n00:16:35.530 --> 00:16:39.416\nNot always, it's kind of this\ndynamism that makes it so powerful,\n\n302\n00:16:39.416 --> 00:16:41.710\nbut incredibly frustrating.\n\n303\n00:16:41.710 --> 00:16:44.188\nThere are times where, the portions\nnested within those functions,\n\n304\n00:16:44.188 --> 00:16:45.282\nthey're kinda disregarded.\n\n305\n00:16:45.282 --> 00:16:50.416\nIt only knows about the function itself.\n\n306\n00:16:50.416 --> 00:16:55.384\nAnd then when you click that button,\nstuff is broke.\n\n307\n00:16:55.384 --> 00:16:56.472\nAnd that's called a runtime error.\n\n308\n00:16:56.472 --> 00:16:58.700\nBut it will immediately show you,\nhey, something is broke.\n\n309\n00:16:59.930 --> 00:17:02.584\nNow, I will say this.\nChrome and current JavaScript\n\n310\n00:17:02.584 --> 00:17:08.570\ninterpreters, are a great deal better at\nthat these days, than they used to be.\n\n311\n00:17:08.570 --> 00:17:12.930\nAnd for the most part,\nit catches errors like that, fairly well.\n\n312\n00:17:12.930 --> 00:17:15.288\n&gt;&gt; All right, and\nthen just another question for you.\n\n313\n00:17:15.288 --> 00:17:19.940\nWe've been talking about JavaScript, and\nwe've said that it's a scripting language.\n\n314\n00:17:19.940 --> 00:17:27.190\nDifferent from say, a programming\nlanguage, like C# or something like that?\n\n315\n00:17:27.190 --> 00:17:31.302\n&gt;&gt; So, when I say scripting language,\nit was originally meant for\n\n316\n00:17:31.302 --> 00:17:36.344\ntiny little snippets, small pieces of\nfunctionality to be added to the page.\n\n317\n00:17:36.344 --> 00:17:42.000\nIt is, in this context, this day and age,\na full-fledged programming language.\n\n318\n00:17:42.000 --> 00:17:46.194\nWith the advent of, as we'll talk\nabout some other time, NodeJS,\n\n319\n00:17:46.194 --> 00:17:50.538\nwhich will actually allow you to\nwrite JavaScript-based programs,\n\n320\n00:17:50.538 --> 00:17:54.832\nas desktop applications, or\neven as server-based applications.\n\n321\n00:17:54.832 --> 00:17:56.794\n&gt;&gt; All right Justin,\ngreat look there at JavaScript, and\n\n322\n00:17:56.794 --> 00:17:59.790\nwhat we're getting ourselves into, over\nthe course of these next few episodes.\n\n323\n00:17:59.790 --> 00:18:00.970\nWe appreciate that.\n\n324\n00:18:00.970 --> 00:18:03.180\nWe hope everybody out there\nenjoyed watching this one.\n\n325\n00:18:03.180 --> 00:18:06.270\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n326\n00:18:06.270 --> 00:18:07.260\n&gt;&gt; And I'm Justin Dennison.\n\n327\n00:18:07.260 --> 00:18:14.224\n&gt;&gt; And we'll see you next time.\n\n328\n00:18:14.224 --> 00:18:16.202\n[MUSIC]\n\n329\n00:18:16.202 --> 00:18:20.249\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "202075366"
        },
        {
          "description": "In this episode, Justin and Mike discuss values and operators. They demonstrate using single and multi-line comments within JavaScript. They also look at binary, unary, comparison and logical operators.",
          "length": "1891",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-2-values_and_operators-013017-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-2-values_and_operators-013017-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-1-2-values_and_operators-013017-1-sm.jpg",
          "title": "Values and Operators",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:02.460\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.460 --> 00:00:04.460\n&gt;&gt; We're creating vector graphics.\n\n3\n00:00:04.460 --> 00:00:06.665\n&gt;&gt; Live from San Francisco.\n\n4\n00:00:06.665 --> 00:00:08.469\n&gt;&gt; [CROSSTALK]\n&gt;&gt; Photoshop can show you-\n\n5\n00:00:08.469 --> 00:00:12.640\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.640 --> 00:00:16.330\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n7\n00:00:16.330 --> 00:00:17.560\nI'm your host, Mike Rodrick.\n\n8\n00:00:17.560 --> 00:00:19.552\nAnd today we're doing our\nintroduction to JavaScript.\n\n9\n00:00:19.552 --> 00:00:22.803\nAnd in this episode,\nwe're gonna be focusing in on values,\n\n10\n00:00:22.803 --> 00:00:26.779\nwhat the heck they are, and operators\nthat we can use within JavaScript.\n\n11\n00:00:26.779 --> 00:00:30.019\nAnd here to guide us through\nthe process is Mr. Justin Dennison.\n\n12\n00:00:30.019 --> 00:00:31.864\nWelcome back, Justin.\n\n13\n00:00:31.864 --> 00:00:32.448\n&gt;&gt; Thanks for having me back, Mike.\n\n14\n00:00:32.448 --> 00:00:36.250\nI'm excited to talk about\nJavaScript values and operators.\n\n15\n00:00:36.250 --> 00:00:38.560\nBut it kinda sounds\na little bit like math.\n\n16\n00:00:38.560 --> 00:00:41.662\nAnd I know that scares some people.\n\n17\n00:00:41.662 --> 00:00:42.172\nIt makes me happy.\n&gt;&gt; [LAUGH]\n\n18\n00:00:42.172 --> 00:00:44.700\n&gt;&gt; But some people are like, no.\n\n19\n00:00:44.700 --> 00:00:47.880\nSo I think the best way\nis just to kinda dive in.\n\n20\n00:00:47.880 --> 00:00:52.970\nBut just remember, sometimes this will\nbe kind of off-putting, a little odd.\n\n21\n00:00:52.970 --> 00:00:56.630\nKeep persisting, and\nthings will slowly come around.\n\n22\n00:00:56.630 --> 00:01:00.620\nI know there are times where I'm like,\nthat doesn't make any sense.\n\n23\n00:01:00.620 --> 00:01:04.820\nAnd if I just keep poking away at it,\nit will eventually kind of just, bing.\n\n24\n00:01:04.820 --> 00:01:06.360\n&gt;&gt; Nice.\n&gt;&gt; Light on for me.\n\n25\n00:01:06.360 --> 00:01:10.940\nSo in order to get started, we're\ngonna go back to our starter project,\n\n26\n00:01:10.940 --> 00:01:12.830\nour starter template.\n\n27\n00:01:12.830 --> 00:01:17.910\nAnd so within Atom,\nI'm going to File &gt; Add Project Folder.\n\n28\n00:01:17.910 --> 00:01:20.580\nAnd I've actually renamed\nthe starter template to Values and\n\n29\n00:01:20.580 --> 00:01:22.815\nOperators, how appropriate.\n\n30\n00:01:22.815 --> 00:01:25.813\n&gt;&gt; [LAUGH]\n&gt;&gt; And it's just an exact copy of\n\n31\n00:01:25.813 --> 00:01:31.556\nthe previous project,\nan empty app.js and an empty index.html,\n\n32\n00:01:31.556 --> 00:01:35.500\nother than this very\nbasic boilerplate code.\n\n33\n00:01:36.600 --> 00:01:41.150\nAlso, I'm gonna go ahead and\nopen that index.html within Chrome.\n\n34\n00:01:41.150 --> 00:01:46.526\nSo Open File, and\nnavigate to the appropriate index.html.\n\n35\n00:01:46.526 --> 00:01:49.950\nNow, the index.html is\na file convention name.\n\n36\n00:01:49.950 --> 00:01:51.800\nThis kinda persisted throughout the years.\n\n37\n00:01:51.800 --> 00:01:56.755\nSo be very careful that you're actually\nopening the correct index.html for\n\n38\n00:01:56.755 --> 00:02:01.690\nthe project that you're working on,\nthe sandbox that you're playing around in.\n\n39\n00:02:01.690 --> 00:02:04.830\nBecause there's nothing worse than,\nI'm writing.\n\n40\n00:02:04.830 --> 00:02:07.650\nAnd then you go to refresh and\nnothing happens,\n\n41\n00:02:07.650 --> 00:02:09.910\nbecause you've been\nchanging the wrong thing.\n\n42\n00:02:09.910 --> 00:02:10.830\n&gt;&gt; Been there, done that.\n\n43\n00:02:10.830 --> 00:02:11.910\nIt's like, okay, at this point,\n\n44\n00:02:11.910 --> 00:02:15.650\nI'm just gonna make the background of this\npage blue, just to make something obvious.\n\n45\n00:02:15.650 --> 00:02:16.670\nAnd it still doesn't change.\n\n46\n00:02:16.670 --> 00:02:17.300\nAnd you realize,\n\n47\n00:02:18.350 --> 00:02:22.160\nI'm on an index page that's in a subfolder\nthat's not being used, and yeah.\n\n48\n00:02:22.160 --> 00:02:24.130\n&gt;&gt; Yeah, I've done it several times.\n\n49\n00:02:24.130 --> 00:02:29.550\nAnd it's happened to me so many times\nthat I'm almost obsessive about it now.\n\n50\n00:02:29.550 --> 00:02:30.435\nSo it's a little crazy.\n\n51\n00:02:30.435 --> 00:02:34.150\nAnd then, finally, we wanna go ahead and\nopen our Chrome DevTools.\n\n52\n00:02:35.160 --> 00:02:39.120\nIf you're on a different platform,\nthese DevTools can sometimes be\n\n53\n00:02:39.120 --> 00:02:42.730\nnested a little different, like these\nmenu options can be a little different.\n\n54\n00:02:42.730 --> 00:02:44.360\nSo just watch out for that.\n\n55\n00:02:44.360 --> 00:02:46.080\nBut I'm gonna open the developer tools.\n\n56\n00:02:46.080 --> 00:02:48.230\nAnd I wanna make sure\nthat the console's open.\n\n57\n00:02:48.230 --> 00:02:51.900\nThis page kinda just\nhangs out on the side.\n\n58\n00:02:51.900 --> 00:02:54.300\nMost of our action will\nbe going on within here.\n\n59\n00:02:55.700 --> 00:02:58.990\nSo within JavaScript,\n\n60\n00:02:58.990 --> 00:03:03.280\nI want to start with something before\nwe get into the values and operators.\n\n61\n00:03:03.280 --> 00:03:05.910\nAnd that's the concept of comments.\n\n62\n00:03:05.910 --> 00:03:07.270\nAnd comments are there for\n\n63\n00:03:07.270 --> 00:03:12.000\nyou, for me, for anyone who's coming\nto read your code, or is notes for\n\n64\n00:03:12.000 --> 00:03:16.460\nyou when you come back six months\nlater and go, wonder what that does.\n\n65\n00:03:16.460 --> 00:03:17.920\nAnd I've done that.\n\n66\n00:03:17.920 --> 00:03:21.360\nSo it's really important to have\nat least some basic comment.\n\n67\n00:03:21.360 --> 00:03:24.570\nWithin JavaScript,\ncomments can happen two ways.\n\n68\n00:03:24.570 --> 00:03:32.540\nI can have a block-level comment,\nas such, which is a /** and then a /.\n\n69\n00:03:32.540 --> 00:03:37.920\nAnd then I can have either this * here,\nor I cannot.\n\n70\n00:03:37.920 --> 00:03:39.370\nNow, I think I misspoke there.\n\n71\n00:03:39.370 --> 00:03:42.870\nThere's actually another\nclosing * here at the bottom.\n\n72\n00:03:42.870 --> 00:03:47.660\nSo an open /* and a close */.\n\n73\n00:03:47.660 --> 00:03:51.133\n&gt;&gt; [LAUGH]\n&gt;&gt; Now, I can type whatever I want to,\n\n74\n00:03:51.133 --> 00:03:55.210\nincluding valid JavaScript,\nas we've seen before.\n\n75\n00:03:57.380 --> 00:04:00.350\nSo we looked at this in\nthe previous episode.\n\n76\n00:04:01.460 --> 00:04:04.106\nBut if I go and refresh, nothing happens.\n\n77\n00:04:04.106 --> 00:04:07.380\nAnd that's because comments are not for\nthe interpreter.\n\n78\n00:04:07.380 --> 00:04:10.290\nIt's not for\nthe JavaScript execution environment.\n\n79\n00:04:10.290 --> 00:04:12.010\nIt's for me, it's for you.\n\n80\n00:04:12.010 --> 00:04:13.490\nIt's for\nanybody that needs to look at your code.\n\n81\n00:04:13.490 --> 00:04:21.080\nIn addition to, I can type for\ndays within these block comments.\n\n82\n00:04:21.080 --> 00:04:22.630\nObviously, that's a horrible comment.\n\n83\n00:04:22.630 --> 00:04:23.825\nDon't comment like that.\n\n84\n00:04:23.825 --> 00:04:27.765\n&gt;&gt; [LAUGH]\n&gt;&gt; But these are handy if I need to give\n\n85\n00:04:27.765 --> 00:04:32.783\na lengthy description of what's going\non below or some block of code.\n\n86\n00:04:35.138 --> 00:04:36.540\nSo this is a block comment.\n\n87\n00:04:36.540 --> 00:04:38.820\nThere's also single-line comments.\n\n88\n00:04:38.820 --> 00:04:41.200\nMight help if I spell that correctly.\n\n89\n00:04:41.200 --> 00:04:42.610\nSo this is a single-line comment.\n\n90\n00:04:45.851 --> 00:04:49.360\nNow, this comment works very\nsimilar to the block comment.\n\n91\n00:04:49.360 --> 00:04:51.970\nHowever, with the //, no *,\n\n92\n00:04:51.970 --> 00:04:56.630\nI only get that single line to\ntype my note or my comment on.\n\n93\n00:04:56.630 --> 00:05:02.240\nIf I hit Enter, I have my Atom set up\nto autocomplete additional comments.\n\n94\n00:05:02.240 --> 00:05:05.570\nBut most of the time, when you hit Enter,\nit'll just come to the next line.\n\n95\n00:05:06.670 --> 00:05:10.980\nBut this is actually gonna be seen by\nthe interpreter and not commented out.\n\n96\n00:05:10.980 --> 00:05:11.901\nSo this will actually cause errors.\n\n97\n00:05:11.901 --> 00:05:16.680\nSo be very careful about block\nlevel versus single line.\n\n98\n00:05:16.680 --> 00:05:21.360\nFor very short snippets, like little\nblock headings, I'll use single line.\n\n99\n00:05:21.360 --> 00:05:24.067\nIf I need additional descriptions\nabout what's going on,\n\n100\n00:05:24.067 --> 00:05:25.806\nI'll use the block-level comment.\n\n101\n00:05:25.806 --> 00:05:29.888\n&gt;&gt; All right, so I've seen these being\nused, those block-level comments,\n\n102\n00:05:29.888 --> 00:05:33.968\nat the beginning of a page, where it's\ntalking about maybe who created it,\n\n103\n00:05:33.968 --> 00:05:36.493\ndistribution rights, and things like that.\n\n104\n00:05:36.493 --> 00:05:39.243\nCould you also use this\nto troubleshoot code,\n\n105\n00:05:39.243 --> 00:05:44.179\nlike occasionally blocking out a section\nof code to see if it works any better?\n\n106\n00:05:44.179 --> 00:05:49.210\n&gt;&gt; That's kinda the very first thing you\nlearn, is, well, what if I take this out?\n\n107\n00:05:49.210 --> 00:05:50.280\nIs it still broken?\n\n108\n00:05:50.280 --> 00:05:52.528\nAnd yes, I'll do that.\n\n109\n00:05:52.528 --> 00:05:57.330\nAnd these rich-text editors, whether it\nbe Atom or some other one that you found,\n\n110\n00:05:57.330 --> 00:06:02.220\nmost of them have a way to select and\nquickly block comment out things.\n\n111\n00:06:02.220 --> 00:06:05.312\nSo you're not commenting line by line or\nadding the opening,\n\n112\n00:06:05.312 --> 00:06:07.458\nclosing part of the block comment by hand.\n\n113\n00:06:07.458 --> 00:06:09.430\n&gt;&gt; Very good.\n\n114\n00:06:09.430 --> 00:06:14.723\n&gt;&gt; So I will try to comment as we go\nthrough, just to keep things split apart.\n\n115\n00:06:14.723 --> 00:06:20.000\nBut for now,\nI'm going to delete those comments.\n\n116\n00:06:20.000 --> 00:06:24.260\nSo before we start,\nwe're gonna talk about, what is a value?\n\n117\n00:06:24.260 --> 00:06:26.738\nA value is a piece of data,\na piece of information.\n\n118\n00:06:26.738 --> 00:06:32.690\nAnd it's kind of a weird thought process\nbecause it's not how we typically think.\n\n119\n00:06:32.690 --> 00:06:35.749\nAnd data can be represented in\ndifferent ways, different terms.\n\n120\n00:06:36.750 --> 00:06:40.090\nBut it's all kind of, it's a pool of data.\n\n121\n00:06:41.090 --> 00:06:42.680\nBut let's think about it.\n\n122\n00:06:42.680 --> 00:06:43.860\nIf you're in English class,\n\n123\n00:06:43.860 --> 00:06:46.652\nyou think of the way you interact with\nthings as text on a page or words.\n\n124\n00:06:46.652 --> 00:06:50.353\nIf you're in a math class,\nyou're interacting with numbers.\n\n125\n00:06:50.353 --> 00:06:54.130\nAnd then, as we get later on in math,\nyou start adding letters.\n\n126\n00:06:54.130 --> 00:06:55.325\nAnd that kinda freaks people out.\n\n127\n00:06:55.325 --> 00:06:58.000\n&gt;&gt; [LAUGH]\n&gt;&gt; But those represent numbers as well.\n\n128\n00:06:58.000 --> 00:07:02.340\nIf you're training to be a mechanic,\nyou're interacting through these physical\n\n129\n00:07:02.340 --> 00:07:07.810\nobjects, like a motor or the heads\nof a motor or wrenches or torches.\n\n130\n00:07:07.810 --> 00:07:09.395\nSo all of that is data.\n\n131\n00:07:09.395 --> 00:07:11.820\nAnd they all have a value.\n\n132\n00:07:13.000 --> 00:07:15.990\nWe are going to interact\nwith various types of data.\n\n133\n00:07:17.070 --> 00:07:18.520\nBut we're gonna call them values.\n\n134\n00:07:18.520 --> 00:07:22.118\nThat's all they are.\nAnd for the most part, we're gonna start\n\n135\n00:07:22.118 --> 00:07:28.088\nwith very simple values and a combination\nof other values with operators,\n\n136\n00:07:28.088 --> 00:07:32.230\nsuch as plus, minus, and\nsee how those interact.\n\n137\n00:07:32.230 --> 00:07:37.860\nBecause that data, the computer's not\nreally good at just looking at something,\n\n138\n00:07:37.860 --> 00:07:42.640\nwhether it be text or numbers, and\ndiscerning what it's supposed to be.\n\n139\n00:07:42.640 --> 00:07:44.610\nSo you have to be very specific.\n\n140\n00:07:44.610 --> 00:07:46.626\nSo I think we take a look at this and\n\n141\n00:07:46.626 --> 00:07:50.663\nsee how the computer interacts\nwith these pieces of information.\n\n142\n00:07:50.663 --> 00:07:55.559\nI'm going to start by just saying 3.\n\n143\n00:07:55.559 --> 00:07:57.063\nAnd that is a piece of data.\n\n144\n00:07:57.063 --> 00:08:01.287\nBut I really want to say var x = 3.\n\n145\n00:08:01.287 --> 00:08:06.024\nAgain I know this could be scary,\nI know var x equals 3 and\n\n146\n00:08:06.024 --> 00:08:10.592\nvar is a keyword for\nJavaScript to create a container.\n\n147\n00:08:10.592 --> 00:08:15.258\nMuch like a cup that allows me to\nstore pieces of information within and\n\n148\n00:08:15.258 --> 00:08:20.094\nthen I can put them on a shelf come to\nthem back later and call them by name.\n\n149\n00:08:20.094 --> 00:08:25.588\nIs for convenience to you, and it's very,\n\n150\n00:08:25.588 --> 00:08:32.140\nvery helpful, so\nthis is a single number variable.\n\n151\n00:08:32.140 --> 00:08:35.000\nSo the data stored within\nthis is a number type,\n\n152\n00:08:35.000 --> 00:08:39.390\nand we'll talk more about types\nin detail at a later date.\n\n153\n00:08:39.390 --> 00:08:44.340\nSo just stay with me, so I've created\na variable, I've given it the name x.\n\n154\n00:08:44.340 --> 00:08:47.440\nSo like a cup with a name on it, like\nif you're at a gathering or something,\n\n155\n00:08:47.440 --> 00:08:49.950\nyou put your name on the cup,\nand that's your cup.\n\n156\n00:08:49.950 --> 00:08:53.410\nSo I've created the cup x, and\nI've put the value 3 within it,\n\n157\n00:08:54.850 --> 00:09:02.468\nthat is different than,\nSomething of that nature,\n\n158\n00:09:02.468 --> 00:09:07.520\nthose, okay well that one's a word and\nthat one's a number.\n\n159\n00:09:07.520 --> 00:09:15.400\nThese are called, Strings, so\nthis a single string variable.\n\n160\n00:09:15.400 --> 00:09:20.020\nNow a string, for now, is just text,\nlike you would find in a normal book.\n\n161\n00:09:20.020 --> 00:09:25.430\nBut they behave as text not\nas numerical values, so,\n\n162\n00:09:25.430 --> 00:09:28.320\nwithin these two,\nthese are called statements.\n\n163\n00:09:28.320 --> 00:09:33.490\nStatements are combinations of values,\nwhich is the variable,\n\n164\n00:09:33.490 --> 00:09:39.400\noperators, which the equal sign in this\ncase is, and we have to be very specific.\n\n165\n00:09:39.400 --> 00:09:44.770\nThis equal sign is not quite how it\nworks in all your previous experiences\n\n166\n00:09:44.770 --> 00:09:50.210\nyou are assigning a value to a variable,\nyou're not saying they are equal.\n\n167\n00:09:50.210 --> 00:09:54.190\nWe'll get to that, and\nthis is another value,\n\n168\n00:09:54.190 --> 00:10:00.010\nso within this statement which you'll\nnotice is ended by a semicolon,\n\n169\n00:10:00.010 --> 00:10:02.270\nwhich is kind of like\nthe period of JavaScript.\n\n170\n00:10:02.270 --> 00:10:06.340\nI am done, I have several expressions.\n\n171\n00:10:06.340 --> 00:10:10.090\nSo this is an expression\nbetween two values,\n\n172\n00:10:10.090 --> 00:10:15.860\nnamely this variable and\nthis numerical value literal.\n\n173\n00:10:15.860 --> 00:10:20.650\nLikewise I have an expression here,\nthat is making up part of this statement.\n\n174\n00:10:20.650 --> 00:10:22.180\n&gt;&gt; All right Justin,\n\n175\n00:10:22.180 --> 00:10:27.630\nso we've got these values stored\nin these variables, now what?\n\n176\n00:10:27.630 --> 00:10:28.650\n&gt;&gt; That's a great question.\n\n177\n00:10:28.650 --> 00:10:33.470\nSo, we have a series of operations that\nwe can apply to each of these variables,\n\n178\n00:10:33.470 --> 00:10:35.920\nas well as any other literal values.\n\n179\n00:10:35.920 --> 00:10:40.340\nNow, I mean literal values as I just\nput in the number three, or the string,\n\n180\n00:10:40.340 --> 00:10:45.740\nor text I like cheese or\nI like bacon, or something like that.\n\n181\n00:10:45.740 --> 00:10:49.160\nSo I'm gonna run through several\nof the operations that we can\n\n182\n00:10:49.160 --> 00:10:54.310\nachieve with these variables in\naddition to other variables.\n\n183\n00:10:54.310 --> 00:10:57.810\nSo we're gonna start with\nbinary which are common\n\n184\n00:10:57.810 --> 00:10:59.880\noperations that you've\nprobably seen before,\n\n185\n00:10:59.880 --> 00:11:04.240\nbut then they have a little different\ntake depending on the value type.\n\n186\n00:11:04.240 --> 00:11:09.480\nAnd we'll talk about types in more\ndepth later, so I'm gonna log,\n\n187\n00:11:09.480 --> 00:11:13.750\nso I type log and tab and then add them,\nthat will autocomplete for you.\n\n188\n00:11:13.750 --> 00:11:17.220\nI'm gonna log because otherwise all\nthis JavaScript file will do is run.\n\n189\n00:11:17.220 --> 00:11:21.190\nIt will never actually output anything\nto the console within the browser.\n\n190\n00:11:21.190 --> 00:11:24.278\nSo you'll think nothing's going\non when a bunch is going on.\n\n191\n00:11:24.278 --> 00:11:30.370\nSo, I can actually say, x + 3, and if I\ngo back to x, we notice that's a number,\n\n192\n00:11:30.370 --> 00:11:36.130\nso a number plus a number,\nshould be a number.\n\n193\n00:11:36.130 --> 00:11:40.790\nAnd let's see if I can zoom in\nthere a little bit, notice within\n\n194\n00:11:40.790 --> 00:11:47.080\nthe Chrome developer tools, the console in\nparticular, this number is shaded purple.\n\n195\n00:11:47.080 --> 00:11:51.660\nIf it's shaded purple,\nthat gives you a hint to the type of data,\n\n196\n00:11:51.660 --> 00:11:55.674\nhow the information is represented\nto the JavaScript runtime.\n\n197\n00:11:57.550 --> 00:12:03.560\nI'm going to just duplicate for\nthe sake of interest in time,\n\n198\n00:12:03.560 --> 00:12:08.280\nand run through these four\ncommonly known operations, plus,\n\n199\n00:12:08.280 --> 00:12:11.100\nminus, divide and multiply.\n\n200\n00:12:11.100 --> 00:12:18.120\nAnd see the outputs of those,\nso, I have 3 + 3 is 6,\n\n201\n00:12:18.120 --> 00:12:23.630\n3- 3 is 0, 3 / 3 is 1 and 3 x 3 is 9.\n\n202\n00:12:23.630 --> 00:12:26.570\nSo those behave just like\nwe would expect them to.\n\n203\n00:12:27.700 --> 00:12:32.966\nHowever, if I do something like this,\n\n204\n00:12:34.923 --> 00:12:40.060\nI have to make sure that I know,\neven if there's no zeroes appended there,\n\n205\n00:12:40.060 --> 00:12:43.010\nthat I have a floating point information.\n\n206\n00:12:43.010 --> 00:12:46.300\nAnd what I mean is I have decimals\nthat are kind of hidden away from me\n\n207\n00:12:47.750 --> 00:12:49.380\nwithin the JavaScript realm.\n\n208\n00:12:50.840 --> 00:12:54.780\nHowever, there is a third\nbinary operation on numbers\n\n209\n00:12:54.780 --> 00:12:57.790\nthat some people may not be used to.\n\n210\n00:12:57.790 --> 00:13:01.629\nAnd that's represented\nby the percent sign,\n\n211\n00:13:01.629 --> 00:13:08.370\nthis is called the modulus, but\nI think of it as the remainder operator.\n\n212\n00:13:08.370 --> 00:13:14.390\nSo, if I have x equals 3,\nand I take x mod 2,\n\n213\n00:13:14.390 --> 00:13:19.135\nor x remainder 2, so 3 remainder 2 is 1.\n\n214\n00:13:20.205 --> 00:13:25.720\nAnd that's the whole number remaining,\nafter dividing by the second argument.\n\n215\n00:13:25.720 --> 00:13:30.153\nSo 3 divided by 2,\n2 goes into 4 evenly once but\n\n216\n00:13:30.153 --> 00:13:35.115\nthere is one piece left over\nthat I can't divide by 2 and\n\n217\n00:13:35.115 --> 00:13:37.776\nstill remain a whole number.\n\n218\n00:13:37.776 --> 00:13:44.280\nSo those are handy, so those are binary\noperations that just operate on numbers.\n\n219\n00:13:45.830 --> 00:13:50.650\nHowever, you have to be careful within\nJavaScript, and this is a pain point for\n\n220\n00:13:50.650 --> 00:13:51.850\na great deal of people.\n\n221\n00:13:51.850 --> 00:13:58.850\nIf I take y and\n+ 3 just like I did here with x.\n\n222\n00:13:58.850 --> 00:14:05.670\nHowever you'll notice that these\nare no longer blue in nature.\n\n223\n00:14:05.670 --> 00:14:09.590\nAnd I don't get the standard\ninteraction that I anticipated.\n\n224\n00:14:09.590 --> 00:14:15.730\nThat's because y is in fact\na single string assigned to y.\n\n225\n00:14:15.730 --> 00:14:19.830\nAnd adding a number and a string does\nsome crazy stuff with how the data's\n\n226\n00:14:19.830 --> 00:14:21.982\nrepresented within the JavaScript runtime.\n\n227\n00:14:24.140 --> 00:14:29.830\nSo there's our binary operations\nof math type variety.\n\n228\n00:14:29.830 --> 00:14:32.750\nThere are some,\nwhat are called unary operations, and\n\n229\n00:14:32.750 --> 00:14:35.430\nthat means that they only\ntake a single argument.\n\n230\n00:14:36.640 --> 00:14:41.890\nAnd let's take a look at a couple\nof those, so I have the minus sign,\n\n231\n00:14:41.890 --> 00:14:48.730\nso if I say -x, well this will actually\ngo look at the variable x, which is 3.\n\n232\n00:14:48.730 --> 00:14:53.770\nAnd do the opposite,\nthe numerical opposite of that, so\n\n233\n00:14:53.770 --> 00:14:59.940\nif we look there and I refresh minus\nthree just create the negative of three.\n\n234\n00:14:59.940 --> 00:15:07.815\nLikewise if I had,\nTwo minus signs like so,\n\n235\n00:15:07.815 --> 00:15:13.040\nlike this was- 3, then that would in\nfact just switch it back to positive.\n\n236\n00:15:13.040 --> 00:15:16.189\nSo that's kind of a flip flop operation.\n\n237\n00:15:16.189 --> 00:15:19.909\nThe other one that is commonly used,\nthat I like to use,\n\n238\n00:15:19.909 --> 00:15:24.500\nis actually the unary plus and\nI'm not gonna use a variable for this,\n\n239\n00:15:24.500 --> 00:15:29.670\nI'm going to use a string literal so\nI'm just gonna type the string in place.\n\n240\n00:15:31.631 --> 00:15:36.558\nNotice that this string looks like a valid\nnumber, but in the JavaScript world,\n\n241\n00:15:36.558 --> 00:15:39.313\nwell, in the JavaScript runtime, rather,\n\n242\n00:15:39.313 --> 00:15:43.030\nthis is going to be treated\nas just like text in a book.\n\n243\n00:15:43.030 --> 00:15:46.995\nIt wouldn't actually obey\nnumber type operations.\n\n244\n00:15:46.995 --> 00:15:48.845\n&gt;&gt; Is that because of the plus\nyou put out in front, or\n\n245\n00:15:48.845 --> 00:15:50.134\nthe quotes you've put around it?\n\n246\n00:15:50.134 --> 00:15:51.600\n&gt;&gt; That's a great question, so,\n\n247\n00:15:51.600 --> 00:15:54.166\nthe quotes around it are what\nactually create a string.\n\n248\n00:15:54.166 --> 00:15:57.175\nThe plus out front, though,\nwill actually help us.\n\n249\n00:15:57.175 --> 00:15:58.839\nNotice, this is purple.\n\n250\n00:15:58.839 --> 00:16:02.661\nThe unary plus will try\nto paint this string and\n\n251\n00:16:02.661 --> 00:16:06.270\nmake it a number if at all possible.\n\n252\n00:16:06.270 --> 00:16:10.040\nSo it does have some limitations, but\n\n253\n00:16:10.040 --> 00:16:13.910\nwith this plus out front\nI get a numerical value.\n\n254\n00:16:13.910 --> 00:16:18.650\nHowever, if I do something like so plus y,\n\n255\n00:16:19.660 --> 00:16:25.610\nand notice that y is not a valid, it's\nnot a number representation as a string.\n\n256\n00:16:25.610 --> 00:16:29.298\nRed, well that doesn't make any\nsense in the context of numbers.\n\n257\n00:16:32.061 --> 00:16:34.600\nYou will get these weird value NAN.\n\n258\n00:16:35.690 --> 00:16:38.175\nMike, do you have any\nguess at what NaN is?\n\n259\n00:16:38.175 --> 00:16:39.405\n&gt;&gt; No, I don't.\n\n260\n00:16:39.405 --> 00:16:42.634\n[LAUGH] I tried to think of something\nthat would fit with NaN but no.\n\n261\n00:16:42.634 --> 00:16:46.990\n&gt;&gt; No, well, most people don't,\nit means NaN.\n\n262\n00:16:46.990 --> 00:16:49.060\nAnd that's a common.\n\n263\n00:16:49.060 --> 00:16:50.800\nIt's actually not a number.\n\n264\n00:16:50.800 --> 00:16:53.579\nYou think it would be more original\nthan that, but you're saying,\n\n265\n00:16:53.579 --> 00:16:55.255\nhey, JavaScript, make this a number.\n\n266\n00:16:55.255 --> 00:16:57.095\nAnd it goes, it's not a number.\n\n267\n00:16:57.095 --> 00:16:58.947\nAnd that's all its response is so.\n\n268\n00:16:58.947 --> 00:17:00.310\n&gt;&gt; Well it makes sense now [LAUGH].\n\n269\n00:17:00.310 --> 00:17:00.968\n&gt;&gt; Yeah it does.\n\n270\n00:17:00.968 --> 00:17:05.250\nSo those are our unary operators.\n\n271\n00:17:05.250 --> 00:17:09.520\nThere are a ton of other ones\nthat are not as commonly used.\n\n272\n00:17:09.520 --> 00:17:14.560\nI don't commonly use them but\nthose are two that I use a great deal.\n\n273\n00:17:14.560 --> 00:17:18.630\nNow in addition to those I have what\nare called comparison operators.\n\n274\n00:17:18.630 --> 00:17:21.170\nThese are great for\ndecision making, for testing,\n\n275\n00:17:21.170 --> 00:17:25.110\nfor trying to understand\nwhat your data is like.\n\n276\n00:17:26.270 --> 00:17:28.256\nSo here are my comparison operators.\n\n277\n00:17:31.513 --> 00:17:37.578\nAnd if I have x equals 3.\n\n278\n00:17:41.575 --> 00:17:43.590\nThen I'll actually get true.\n\n279\n00:17:43.590 --> 00:17:46.573\nAnd this is asking\nthe question is x equal to 3?\n\n280\n00:17:46.573 --> 00:17:49.090\n&gt;&gt; So you're not setting the value here.\n\n281\n00:17:49.090 --> 00:17:50.920\n&gt;&gt; Exactly, exactly.\n\n282\n00:17:50.920 --> 00:17:55.610\nI'm not setting, this is not\nthe assignment as a single equals sign is,\n\n283\n00:17:55.610 --> 00:17:59.860\nthat mean assigned to,\nthe double equal is asking the question.\n\n284\n00:17:59.860 --> 00:18:04.360\nThere's also in JavaScript the triple\nequals, which is kind weird.\n\n285\n00:18:04.360 --> 00:18:06.570\nThis is different than some\nother programming languages.\n\n286\n00:18:06.570 --> 00:18:08.820\nIf you had interactions in\nother programming languages,\n\n287\n00:18:08.820 --> 00:18:10.920\nyou're like, why do you need two equals?\n\n288\n00:18:10.920 --> 00:18:13.180\nLike comparative equals?\n\n289\n00:18:13.180 --> 00:18:16.710\nAnd notice these both return true.\n\n290\n00:18:16.710 --> 00:18:26.820\nHowever, if I wrap these in quotes,\nI now have a different output.\n\n291\n00:18:26.820 --> 00:18:32.760\nAnd that's because you can think of\nthis one as very loosely defined equals.\n\n292\n00:18:32.760 --> 00:18:34.880\nIs it pretty close to equals?\n\n293\n00:18:34.880 --> 00:18:37.640\nAnd this one is a strict equals,\n\n294\n00:18:37.640 --> 00:18:41.260\nit has to be exactly the same as\nwhat's stored in the variable.\n\n295\n00:18:41.260 --> 00:18:45.600\n&gt;&gt; So in that last one, even though\nvalue-wise they're both 3s, you're saying,\n\n296\n00:18:45.600 --> 00:18:47.540\nhey, this 3 is a string.\n\n297\n00:18:47.540 --> 00:18:51.330\nBut you've got a 3 as\na number in the variable.\n\n298\n00:18:51.330 --> 00:18:53.669\nAnd that's not gonna match because\nit's the type that doesn't match.\n\n299\n00:18:53.669 --> 00:18:56.140\n&gt;&gt; Yeah, you got it, Mike.\n\n300\n00:18:56.140 --> 00:18:59.630\nAnd that makes me happy that\nhas come to the forefront.\n\n301\n00:18:59.630 --> 00:19:01.642\nThe type does matter\nwith the triple equals.\n\n302\n00:19:01.642 --> 00:19:03.550\nWith the double equals, it doesn't.\n\n303\n00:19:04.790 --> 00:19:08.490\nNow if I can say, if I can ask\nthe question, are these equal?\n\n304\n00:19:08.490 --> 00:19:12.450\nI should be able to ask a similar\nquestion of, are these not equal.\n\n305\n00:19:12.450 --> 00:19:17.797\nSo are these not equal,\nso is x not equal to 3.\n\n306\n00:19:17.797 --> 00:19:25.850\nAnd likewise is x not equal to 3.\n\n307\n00:19:25.850 --> 00:19:32.530\nSo if I look at these two, notice there's\na corollary to the two previous ones.\n\n308\n00:19:32.530 --> 00:19:35.390\nThis one is the loosely defined,\nnot equal, and\n\n309\n00:19:35.390 --> 00:19:38.260\nthis one is the strictly\ndefined not equal.\n\n310\n00:19:38.260 --> 00:19:39.500\nAnd if we look at the output,\n\n311\n00:19:39.500 --> 00:19:44.010\nthose both return false, because F's in\nthis case is in fact the number three.\n\n312\n00:19:46.430 --> 00:19:52.342\nHowever, If I look at not equal to\n\n313\n00:19:56.894 --> 00:20:02.570\n4 as a string, with one equal sign.\n\n314\n00:20:02.570 --> 00:20:09.022\nSo, this exclamation point you will see\nrecurring as, it means the word not.\n\n315\n00:20:09.022 --> 00:20:14.530\nSo if I refresh, and\nnotice these both return.\n\n316\n00:20:14.530 --> 00:20:16.020\nThey're not equal.\n\n317\n00:20:16.020 --> 00:20:17.740\nWell that's kind of weird.\n\n318\n00:20:17.740 --> 00:20:21.670\nThat breaks with the thought\nprocess that I had previously.\n\n319\n00:20:21.670 --> 00:20:26.510\nWell, that's just happenstance\nbecause X is not equal to\n\n320\n00:20:26.510 --> 00:20:32.980\nthe number 4 in the loose type and this\nis not equal because, well, guess what?\n\n321\n00:20:32.980 --> 00:20:34.670\nThey're not the same type.\n\n322\n00:20:34.670 --> 00:20:37.680\nSo if I look at three,\nlet's see if we get a different output.\n\n323\n00:20:37.680 --> 00:20:42.280\nAnd notice that this one evaluates to\n\n324\n00:20:42.280 --> 00:20:46.850\nfalse whereas the stripped\nnot equals evaluates to true.\n\n325\n00:20:49.310 --> 00:20:51.860\nNow there are several other\ncomparison operators.\n\n326\n00:20:53.750 --> 00:20:57.820\nAnd those are strictly for\nnumbers, however they can be for\n\n327\n00:20:57.820 --> 00:21:00.810\na set of things called comparables, and\n\n328\n00:21:00.810 --> 00:21:03.800\nthat just means that they have some\nkind of natural ordering, right?\n\n329\n00:21:03.800 --> 00:21:08.193\nLike anything that's alphabetical\norder has a natural ordering, so\n\n330\n00:21:08.193 --> 00:21:12.735\na dictionary, if you go and\nlook in a dictionary, it's alphabetical,\n\n331\n00:21:12.735 --> 00:21:15.506\nso those have a comparison\nthat can be made.\n\n332\n00:21:15.506 --> 00:21:20.740\nSo, how do I see if something's less than,\nstrictly less than?\n\n333\n00:21:20.740 --> 00:21:22.970\nAnd that's just with\nthat left angle bracket,\n\n334\n00:21:22.970 --> 00:21:29.680\nwhich is right next to the shift key,\nand these will compare like types.\n\n335\n00:21:29.680 --> 00:21:34.763\nI wonder what happens when I\nhave non like information.\n\n336\n00:21:34.763 --> 00:21:36.906\nSo I have a string and a number.\n\n337\n00:21:36.906 --> 00:21:40.995\nThere's only one way to find out and\nthat's what I like.\n\n338\n00:21:40.995 --> 00:21:46.701\nSo notice these are kind of loose in\ntheir definition of what is less than,\n\n339\n00:21:46.701 --> 00:21:52.240\nand you have to be careful because\nthat can run into some issues for you.\n\n340\n00:21:52.240 --> 00:21:58.380\nLikewise, I'm just using some\nkeyboard shortcuts there.\n\n341\n00:21:58.380 --> 00:22:03.360\nIf you're using Adam, the command d or\nthe control d on Windows will\n\n342\n00:22:03.360 --> 00:22:06.030\nactually duplicates the line and\nputs it right under there.\n\n343\n00:22:06.030 --> 00:22:09.060\nIt's handy for things of this nature.\n\n344\n00:22:10.190 --> 00:22:12.430\nAnd notice this is less than or\nequal to and\n\n345\n00:22:12.430 --> 00:22:15.570\nI'm going to change this\nto three just to see.\n\n346\n00:22:17.420 --> 00:22:21.214\nAnd notice those are less than or\nequal too.\n\n347\n00:22:21.214 --> 00:22:26.700\nSo, shouldn't these both evaluate to true,\nright?\n\n348\n00:22:26.700 --> 00:22:28.860\nThese evaluate to true so\neverything's good.\n\n349\n00:22:30.010 --> 00:22:35.361\nBut, if I take this sign and\nflip it around,\n\n350\n00:22:38.168 --> 00:22:40.560\nSo now I have x is greater than 5.\n\n351\n00:22:40.560 --> 00:22:41.439\nIs 3 greater than 5?\n\n352\n00:22:41.439 --> 00:22:42.183\nIs 3 greater than 5?\n\n353\n00:22:42.183 --> 00:22:46.110\nThis is where I'm getting\nkind of interested.\n\n354\n00:22:46.110 --> 00:22:50.800\nIs that data gonna be\npushed to the same type?\n\n355\n00:22:51.850 --> 00:22:52.965\nIs x greater than or equal to 3?\n\n356\n00:22:52.965 --> 00:22:56.728\nIs x greater than or\nequal to the string 3.\n\n357\n00:22:56.728 --> 00:23:03.560\nSo if we look at the output,\nis x greater than 5 either time?\n\n358\n00:23:03.560 --> 00:23:05.060\nThe answer is false, which means no.\n\n359\n00:23:06.160 --> 00:23:10.620\nIs it greater than or equal to 3,\nboth times it is true.\n\n360\n00:23:10.620 --> 00:23:14.350\nSo these are wonderful\ncomparison operators.\n\n361\n00:23:14.350 --> 00:23:19.150\nAnd notice that we have are they equal,\nare they not equal?\n\n362\n00:23:19.150 --> 00:23:20.650\nAre there less than, less than or\n\n363\n00:23:20.650 --> 00:23:23.160\nequal to, greater than,\ngreater than or equal to.\n\n364\n00:23:24.190 --> 00:23:26.764\nNow, these always return this true, false.\n\n365\n00:23:26.764 --> 00:23:32.890\nAnd, up until this point, we've only\nhad these blue and black characters.\n\n366\n00:23:32.890 --> 00:23:38.435\nNotice these true or\nfalse is in kind of a purplish red colour.\n\n367\n00:23:38.435 --> 00:23:42.880\nAnd that's because it's true and\nfalse are reserved, they are special, they\n\n368\n00:23:42.880 --> 00:23:47.590\nmean something to JavaScript themselves\nand that's how questions are answered.\n\n369\n00:23:47.590 --> 00:23:51.022\nTrue would be the answer yes,\nfalse would be the answer no.\n\n370\n00:23:51.022 --> 00:23:56.401\nSo, I have these comparison types,\nif I have true and false,\n\n371\n00:23:56.401 --> 00:24:02.308\nI want to know sometimes can I ask\na question is, X and Y, both true.\n\n372\n00:24:02.308 --> 00:24:05.690\nSo is it going to rain and is it cold?\n\n373\n00:24:06.690 --> 00:24:09.700\nDo I have a ham sandwich and this it good?\n\n374\n00:24:09.700 --> 00:24:13.990\nOr are we going to the movies or\nare we going to the go kart track?\n\n375\n00:24:13.990 --> 00:24:18.460\nSo I have these logical\noperations that I can make,\n\n376\n00:24:20.130 --> 00:24:24.330\nand those are great for\nfuture decision making that we would need.\n\n377\n00:24:24.330 --> 00:24:26.570\nSo the two types of logical operators, and\n\n378\n00:24:26.570 --> 00:24:29.590\nI'm gonna use that reserved word true and\nfalse.\n\n379\n00:24:29.590 --> 00:24:35.640\nThe literals here and\nwe'll see how that works in this context.\n\n380\n00:24:35.640 --> 00:24:41.500\nAnd you'll have to excuse me there's\nalways cuts away the bottom white space.\n\n381\n00:24:41.500 --> 00:24:43.730\nSo I'll try to keep this up here for\neveryone.\n\n382\n00:24:43.730 --> 00:24:49.840\nSo if I say true and then if I type\nthe ampersand twice, that means and.\n\n383\n00:24:51.120 --> 00:24:52.440\nSo true and true.\n\n384\n00:24:52.440 --> 00:24:55.430\nYou gotta watch it.\n\n385\n00:24:55.430 --> 00:24:56.640\nTrue and true.\n\n386\n00:24:56.640 --> 00:25:00.080\nSo if the first statement is true, for\n\n387\n00:25:00.080 --> 00:25:03.470\ninstance, is X greater than or\nequal to three?\n\n388\n00:25:03.470 --> 00:25:05.038\nIs three greater than or equal to three?\n\n389\n00:25:05.038 --> 00:25:06.536\nTrue.\n\n390\n00:25:06.536 --> 00:25:11.090\nIs X less than or equal to three,\nthat would also be true.\n\n391\n00:25:11.090 --> 00:25:13.560\nSo those could both be statements there.\n\n392\n00:25:13.560 --> 00:25:19.160\nSo true and true,\nthis will always evaluate to true.\n\n393\n00:25:19.160 --> 00:25:20.950\nSo, two trues so then double n percent.\n\n394\n00:25:22.030 --> 00:25:26.130\nAnd if I want to check that out and\nwe're gonna roll on in the console here.\n\n395\n00:25:26.130 --> 00:25:30.990\nSo, I'll show you that block\ncommenting you were talking about Mike.\n\n396\n00:25:30.990 --> 00:25:36.821\nSo, if you highlight the portion that you\nwant to comment out and hold command/,\n\n397\n00:25:36.821 --> 00:25:42.580\nor control/ on Windows, then it will\nactually block comment out all of that.\n\n398\n00:25:42.580 --> 00:25:45.433\nAnd then if you do it again,\nit will un-comment it.\n\n399\n00:25:45.433 --> 00:25:48.425\nSo those are handy\noperations to know about.\n\n400\n00:25:49.790 --> 00:25:55.062\nSo I have true &amp;&amp; true, and we'll see\nwhat these outputs are in just a moment.\n\n401\n00:25:55.062 --> 00:25:58.065\ntrue &amp;&amp; false.\n\n402\n00:26:01.885 --> 00:26:07.200\nFalse &amp;&amp; true and false &amp;&amp; false.\n\n403\n00:26:07.200 --> 00:26:11.470\nThese are all the possible combinations\nwith again this is technically\n\n404\n00:26:11.470 --> 00:26:15.900\na binary operator but it's a different\ntype cuz it takes two operands.\n\n405\n00:26:15.900 --> 00:26:17.830\nA beginning and an end.\n\n406\n00:26:17.830 --> 00:26:19.280\nA one and a two so to speak.\n\n407\n00:26:20.310 --> 00:26:23.365\nThese are all the possible combinations\nthat I can have with a single\n\n408\n00:26:23.365 --> 00:26:24.110\nend statement.\n\n409\n00:26:25.570 --> 00:26:27.880\nSo true &amp;&amp; true,\ntrue &amp;&amp; false, false &amp;&amp; true.\n\n410\n00:26:27.880 --> 00:26:29.420\nAnd if I refresh,\n\n411\n00:26:29.420 --> 00:26:34.290\nnotice the only time ends are true\nis when both of them are true.\n\n412\n00:26:34.290 --> 00:26:37.160\nSo that's kind of a way to safeguard.\n\n413\n00:26:37.160 --> 00:26:39.030\nBoth of these things have to be true.\n\n414\n00:26:40.428 --> 00:26:45.050\nAnd when I'm doing more complex\nprogramming in order for\n\n415\n00:26:45.050 --> 00:26:47.920\nthis statement to occur.\n\n416\n00:26:47.920 --> 00:26:54.623\nNow, within the true statement,\nwe have kind of a change in true,\n\n417\n00:26:54.623 --> 00:27:00.383\nand I just noticed that I have\nthis commented wrong here.\n\n418\n00:27:05.744 --> 00:27:10.090\nThis &amp;&amp; can also be double vertical pipes.\n\n419\n00:27:10.090 --> 00:27:12.750\nNow this is kind of a weird key.\n\n420\n00:27:12.750 --> 00:27:16.000\nOn my Mac it actually looks like a solid,\nvertical pipe.\n\n421\n00:27:16.000 --> 00:27:21.300\nHowever on some Windows computers, it's\nright above the enter, or the return key,\n\n422\n00:27:21.300 --> 00:27:26.150\nit'll look like a vertical pipe\nwith a space missing in the middle.\n\n423\n00:27:26.150 --> 00:27:29.360\nIt looks like a weird equal sign or\nsomething like that.\n\n424\n00:27:29.360 --> 00:27:32.010\n&gt;&gt; Yes, or\nlike a colon using vertical dashes.\n\n425\n00:27:32.010 --> 00:27:34.125\n&gt;&gt; Yeah, yeah so\nbe very careful about that.\n\n426\n00:27:34.125 --> 00:27:37.370\nThat usually located right\nabove the enter return and\n\n427\n00:27:37.370 --> 00:27:39.980\nwill take a shift in order to get that.\n\n428\n00:27:39.980 --> 00:27:45.280\nNow I use some keyboard short-cutting\nmagic just to replace all of the\n\n429\n00:27:45.280 --> 00:27:46.270\n&gt;&gt; I saw that.\n\n430\n00:27:46.270 --> 00:27:46.970\n&gt;&gt; You saw.\n\n431\n00:27:46.970 --> 00:27:51.800\nSo knowing your tools is a very\nimportant part of being a developer.\n\n432\n00:27:51.800 --> 00:27:53.600\nIt'll make your life a great deal easier.\n\n433\n00:27:55.010 --> 00:27:59.160\nSo this, this actually means or.\n\n434\n00:27:59.160 --> 00:28:02.800\nAre we going to the go-kart track or\nare we going bowling?\n\n435\n00:28:02.800 --> 00:28:07.900\nSo true or true, true or false,\nfalse or true, false or false.\n\n436\n00:28:07.900 --> 00:28:12.040\nIf we look at the output\nthere the only time that or\n\n437\n00:28:12.040 --> 00:28:16.930\nis false is when I have both falses.\n\n438\n00:28:16.930 --> 00:28:20.252\nSo this is false, and\n\n439\n00:28:20.252 --> 00:28:24.590\notherwise This is true.\n\n440\n00:28:25.990 --> 00:28:29.989\nSo this is a way to make sure\nthat either one works and\n\n441\n00:28:29.989 --> 00:28:32.873\nI don't really care which one it is.\n\n442\n00:28:32.873 --> 00:28:36.928\nIt can be x &gt; 3 or x &lt; 5.\n\n443\n00:28:36.928 --> 00:28:39.100\nIt doesn't matter to me which one is true.\n\n444\n00:28:40.290 --> 00:28:41.510\nI can safeguard against that.\n\n445\n00:28:42.930 --> 00:28:46.950\nNow finally, there's some additional,\nthey're not operators.\n\n446\n00:28:46.950 --> 00:28:52.680\nIt's a way to interact with\nnumbers if you need to make some\n\n447\n00:28:52.680 --> 00:28:58.310\ncalculations that are not quite as\ncommon like plus, divide, multiply.\n\n448\n00:28:58.310 --> 00:29:00.390\nThis is the built-in math module.\n\n449\n00:29:00.390 --> 00:29:02.830\nThis is within the browser mostly.\n\n450\n00:29:02.830 --> 00:29:05.180\nAnd they're adding features\nto this all the time.\n\n451\n00:29:06.230 --> 00:29:14.030\nSome common operations within\nthe math module are as follows.\n\n452\n00:29:14.030 --> 00:29:17.240\nAnd these come in, I do a little\nbit of scientific programming,\n\n453\n00:29:17.240 --> 00:29:21.840\nso I need these for\ndata visualization from time to time.\n\n454\n00:29:21.840 --> 00:29:25.759\nWe have seal, which if I take 1.3.\n\n455\n00:29:25.759 --> 00:29:29.820\nLet's see what that does and\ndon't forget the semi colon.\n\n456\n00:29:29.820 --> 00:29:32.255\nIn a browser you forget the semi colon,\nit'll wreck your day.\n\n457\n00:29:32.255 --> 00:29:32.980\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n458\n00:29:34.700 --> 00:29:37.702\nnotice the seal is actually\ncalled the sealing.\n\n459\n00:29:37.702 --> 00:29:39.650\nI'm gonna go to the next\nlargest whole number.\n\n460\n00:29:41.400 --> 00:29:45.130\nAnd if there's a seal,\n&gt;&gt; Gotta be a floor.\n\n461\n00:29:45.130 --> 00:29:45.820\n&gt;&gt; I like it, Mike.\n\n462\n00:29:45.820 --> 00:29:46.395\nYou're catching on.\n\n463\n00:29:46.395 --> 00:29:48.290\n&gt;&gt; [LAUGH]\n&gt;&gt; It's making me happy.\n\n464\n00:29:48.290 --> 00:29:54.458\nSo the floor actually more or less just\nchops off the decimal place of the number.\n\n465\n00:29:54.458 --> 00:29:59.840\nAnd there is an abs,\n\n466\n00:29:59.840 --> 00:30:04.620\nwhich is if I take a negative\nnumber I get the positive,\n\n467\n00:30:04.620 --> 00:30:08.900\nI get the positive regardless of what\nI get in there the absolute value.\n\n468\n00:30:08.900 --> 00:30:11.646\nAnd finally a common one that I will use.\n\n469\n00:30:15.696 --> 00:30:19.226\nIs square root.\n\n470\n00:30:19.226 --> 00:30:21.781\nI like to think of it as Math.sqrt.\n\n471\n00:30:21.781 --> 00:30:23.927\n&gt;&gt; [LAUGH]\n&gt;&gt; But helps me remember what it is,\n\n472\n00:30:23.927 --> 00:30:26.305\nthat the square root of 16 is in fact 4.\n\n473\n00:30:27.760 --> 00:30:33.150\nNow, the math module has a plethora\nof built in functions beyond that.\n\n474\n00:30:33.150 --> 00:30:37.280\nI tend to just look\nthose up as I need them.\n\n475\n00:30:37.280 --> 00:30:38.820\nBut these are very useful.\n\n476\n00:30:39.880 --> 00:30:42.170\nAll right fantastic look there.\n\n477\n00:30:42.170 --> 00:30:44.130\nA lot of information\nmake sure you go back and\n\n478\n00:30:44.130 --> 00:30:47.700\nwatch this one a couple times cuz this is\nthat foundational knowledge that we really\n\n479\n00:30:47.700 --> 00:30:50.120\nneed to be successful with our JavaScript.\n\n480\n00:30:50.120 --> 00:30:56.310\nWe're talking about the values that we\ncan store, as well as the operators and\n\n481\n00:30:56.310 --> 00:31:00.720\nthat is incredibly powerful cuz we\nstart being able to manipulate data and\n\n482\n00:31:00.720 --> 00:31:04.535\ncompare data that maybe we're storing or\nretrieving from users.\n\n483\n00:31:04.535 --> 00:31:07.800\nSo powerful stuff there really\nmake sure you pay attention.\n\n484\n00:31:07.800 --> 00:31:11.900\nWe appreciate that great explanations,\ngreat demonstrations from you Justin.\n\n485\n00:31:11.900 --> 00:31:13.860\nHope everyone out there\nenjoyed watching this one.\n\n486\n00:31:13.860 --> 00:31:17.060\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n487\n00:31:17.060 --> 00:31:18.220\n&gt;&gt; And I'm Justin Dennison.\n\n488\n00:31:18.220 --> 00:31:20.811\n&gt;&gt; And we'll see you next time.\n\n489\n00:31:20.811 --> 00:31:26.656\n[MUSIC]\n\n490\n00:31:26.656 --> 00:31:28.630\n&gt;&gt; Thank you for watching ITPro TV.\n\n",
          "vimeoId": "202074158"
        },
        {
          "description": "In this episode, Justin and Mike cover the fundamental data types in JavaScript. They use the typeof command to verify data types and look at explicit and implicit type conversion.",
          "length": "1461",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/introjavascript-3-1-types_of_data-013117-PGM.00_24_07_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/introjavascript-3-1-types_of_data-013117-PGM.00_24_07_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/introjavascript-3-1-types_of_data-013117-PGM.00_24_07_09.Still001-sm.jpg",
          "title": "Types of Data",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.991\nWelcome to ITPro TV, I'm your host.\n\n2\n00:00:01.991 --> 00:00:06.358\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.358 --> 00:00:08.811\n[MUSIC]\n\n4\n00:00:08.811 --> 00:00:10.685\n&gt;&gt; You're watching ITPro TV.\n\n5\n00:00:10.685 --> 00:00:12.135\n[MUSIC]\n\n6\n00:00:12.135 --> 00:00:16.119\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPro TV.\n\n7\n00:00:16.119 --> 00:00:20.161\nI'm your host Mike Rodrick and today we're\ndoing our Introduction to JavaScript.\n\n8\n00:00:20.161 --> 00:00:23.605\nAnd in this episode we're gonna be\ntaking a look at types of data.\n\n9\n00:00:23.605 --> 00:00:27.031\nAnd here to walk us through and\nhelp us with that is Mr. Justin Dennison.\n\n10\n00:00:27.031 --> 00:00:28.080\nHow you doing, Justin?\n\n11\n00:00:28.080 --> 00:00:29.260\n&gt;&gt; I'm doing well today, Mike.\n\n12\n00:00:29.260 --> 00:00:31.314\nThanks for having me back, I'm excited.\n\n13\n00:00:31.314 --> 00:00:33.018\nNow, in the last few episodes,\n\n14\n00:00:33.018 --> 00:00:36.252\nwe've been kind of skirting over\nthe issue of types of data.\n\n15\n00:00:36.252 --> 00:00:38.750\nI've been waving my hands a little bit.\n\n16\n00:00:38.750 --> 00:00:42.970\nBut I wanna start that deep dive,\nit's gonna be kind of a layered dive.\n\n17\n00:00:42.970 --> 00:00:45.510\nWe're getting to those middle grounds.\n\n18\n00:00:46.760 --> 00:00:52.600\nJavaScript is very lax on how it\nassigns data types to variables.\n\n19\n00:00:52.600 --> 00:00:56.490\nHowever the values that\nare contained within them do have\n\n20\n00:00:56.490 --> 00:00:59.090\na specific type associated with them.\n\n21\n00:00:59.090 --> 00:01:04.530\nAnd actually JavaScript, I have a list to\nmake sure I don't miss any, has several\n\n22\n00:01:04.530 --> 00:01:08.870\ndistinct fundamental data types and that\nis string and number which we have seen.\n\n23\n00:01:08.870 --> 00:01:12.550\nBoolean, which we've actually seen,\nbut I haven't said these are booleans.\n\n24\n00:01:12.550 --> 00:01:15.835\nBooleans are those true or\nfalse values that will evaluate,\n\n25\n00:01:15.835 --> 00:01:20.940\nthey're special for JavaScript and\nthen we have null and undefined which\n\n26\n00:01:20.940 --> 00:01:24.150\nI'll come back to in just a moment and\nthen the concept of an object.\n\n27\n00:01:25.660 --> 00:01:31.200\nThose null and undefined,\nthose are about having absence of value.\n\n28\n00:01:31.200 --> 00:01:34.310\nIf I declare a variable without\nsetting it equal to something\n\n29\n00:01:34.310 --> 00:01:36.450\nthen it's like an empty cup.\n\n30\n00:01:36.450 --> 00:01:37.360\nIt has nothing in it.\n\n31\n00:01:37.360 --> 00:01:39.940\nIf I go to the cupboards and\nI haven't been grocery shopping, and\n\n32\n00:01:39.940 --> 00:01:42.740\nI open up all the cupboards,\nthere's nothing there.\n\n33\n00:01:42.740 --> 00:01:44.650\nI have undefined food.\n\n34\n00:01:44.650 --> 00:01:50.010\nLikewise, null's kind of the result\nof operations that don't play out.\n\n35\n00:01:50.010 --> 00:01:53.350\nIf I try to log or\ndo some manipulation and\n\n36\n00:01:53.350 --> 00:01:56.850\nthey don't quite play out,\nI sometimes get a null value.\n\n37\n00:01:56.850 --> 00:01:58.700\nNow an object's very interesting.\n\n38\n00:01:58.700 --> 00:02:02.890\nAnd we'll do an additional analysis\nlater on of what an object is.\n\n39\n00:02:02.890 --> 00:02:04.220\nBut for all intents and\n\n40\n00:02:04.220 --> 00:02:08.510\npurposes, I like to think of objects\ninitially as things around us.\n\n41\n00:02:08.510 --> 00:02:11.910\nThe cup, the computers that we have,\nthose are all objects,\n\n42\n00:02:11.910 --> 00:02:13.645\nthey have properties and behaviors.\n\n43\n00:02:13.645 --> 00:02:18.370\n[COUGH] I think the best way to see how\n\n44\n00:02:18.370 --> 00:02:22.800\ndata is presented within JavaScript\nis learning how to utilize\n\n45\n00:02:22.800 --> 00:02:27.545\nsome of the JavaScript tools within\nthe browser to test those data types.\n\n46\n00:02:27.545 --> 00:02:30.605\nIf we take a look, I have Atom and\nChrome open on my computer.\n\n47\n00:02:30.605 --> 00:02:32.325\nCurrently have nothing within them, but\n\n48\n00:02:32.325 --> 00:02:36.195\nwe're going to quickly open one\nof those projects within Atom.\n\n49\n00:02:36.195 --> 00:02:39.185\nThey're very similar to the starter\ntemplate projects from the previous\n\n50\n00:02:39.185 --> 00:02:39.955\nepisodes.\n\n51\n00:02:39.955 --> 00:02:42.565\nThey're just blank, but\nI have them named accordingly.\n\n52\n00:02:43.635 --> 00:02:47.020\nI put mine on my desktop\nas everyone tends to do\n\n53\n00:02:47.020 --> 00:02:48.690\nto if they need to find something easily.\n\n54\n00:02:48.690 --> 00:02:51.428\nI don't, crazy stuff when we do that.\n\n55\n00:02:51.428 --> 00:02:55.790\nBut [COUGH] I have types of data here and\nI'm gonna open that folder.\n\n56\n00:02:55.790 --> 00:03:00.010\nLikewise I'm gonna quickly go into\nChrome just as a reminder, and\n\n57\n00:03:00.010 --> 00:03:04.520\nopen the file within Chrome that\ncorresponds to type of data.\n\n58\n00:03:04.520 --> 00:03:10.560\nNow, remember you have to be careful about\nwhich index.html you're opening if you\n\n59\n00:03:10.560 --> 00:03:15.579\nhave multiple ones of these available\nto you because you'll fight and\n\n60\n00:03:15.579 --> 00:03:19.593\nfight and fight with it, and\nnothing will ever happen.\n\n61\n00:03:19.593 --> 00:03:24.194\nNow additionally,\nI'm going to open the tools and\n\n62\n00:03:24.194 --> 00:03:30.729\ngo to developer tools so I can actually\nsee all of my JavaScript running.\n\n63\n00:03:33.033 --> 00:03:36.300\nMake that a little bit larger for\nyou, and we should be good to go.\n\n64\n00:03:36.300 --> 00:03:39.830\nNow, within JavaScript, as I said,\nwe have those data types.\n\n65\n00:03:39.830 --> 00:03:44.570\nString, object, boolean,\nnull, undefined and number.\n\n66\n00:03:44.570 --> 00:03:47.950\nBut, how would I know\nif I have a variable?\n\n67\n00:03:49.160 --> 00:03:51.930\nThis variable is available\nto me somewhere else.\n\n68\n00:03:51.930 --> 00:03:55.490\nI know, because I've declared\nthis variable that it's a number.\n\n69\n00:03:55.490 --> 00:04:00.390\nBut, if this is part of a larger program,\nI have no idea what this is or if it's\n\n70\n00:04:00.390 --> 00:04:04.440\nbeing passed around from function to\nfunction, which we will talk about later.\n\n71\n00:04:04.440 --> 00:04:07.280\nThen it’s really hard to keep track of\n\n72\n00:04:07.280 --> 00:04:09.660\nwhat kind of information\nis this represented.\n\n73\n00:04:09.660 --> 00:04:13.420\nNow intrinsically\nthe information is the same.\n\n74\n00:04:13.420 --> 00:04:16.290\nIf I think of it as a recipe,\nif I add eggs, flour,\n\n75\n00:04:16.290 --> 00:04:20.818\nsugar a little bit of chocolate,\nwell separately they're just eggs,\n\n76\n00:04:20.818 --> 00:04:22.940\nflour and a little bit of chocolate but\n\n77\n00:04:22.940 --> 00:04:28.440\nif I put them together with a little bit\nof magic sometimes it gets a little wonky.\n\n78\n00:04:28.440 --> 00:04:31.258\nAnd I begged them another cookie,\nbut the information or\n\n79\n00:04:31.258 --> 00:04:34.350\nthe ingredients contained\nwithin are the same.\n\n80\n00:04:34.350 --> 00:04:36.660\nThey're just in different representations.\n\n81\n00:04:36.660 --> 00:04:40.400\nNow that's a great way to think\nabout it in concrete terms.\n\n82\n00:04:40.400 --> 00:04:44.008\nIt gets a little wonky when you\nget real fine hair splitting,\n\n83\n00:04:44.008 --> 00:04:45.802\nwhether that's true or not.\n\n84\n00:04:45.802 --> 00:04:46.620\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n85\n00:04:46.620 --> 00:04:51.110\nI have this variable available to me,\nhow would I know what the type is?\n\n86\n00:04:51.110 --> 00:04:54.560\nWell JavaScript comes with\nthis special operator.\n\n87\n00:04:54.560 --> 00:04:59.455\nAnd we've seen some additional operators\nsuch as plus, minus, subtract,\n\n88\n00:04:59.455 --> 00:05:01.960\ndouble equals, triple equals.\n\n89\n00:05:01.960 --> 00:05:07.210\nBut this is one of those unary operators\nthat takes a single argument and\n\n90\n00:05:07.210 --> 00:05:08.380\noperates on it.\n\n91\n00:05:08.380 --> 00:05:10.160\nNotice there's a space within that.\n\n92\n00:05:11.390 --> 00:05:13.850\nThe type of x.\n\n93\n00:05:13.850 --> 00:05:16.970\nThis will tell me what\nthe type of this variable is.\n\n94\n00:05:18.040 --> 00:05:19.010\nIf I go back and\n\n95\n00:05:19.010 --> 00:05:24.220\nI refresh, this will actually print\nout what type is this variable.\n\n96\n00:05:24.220 --> 00:05:26.570\nThis is a number type.\n\n97\n00:05:26.570 --> 00:05:31.160\nThis is great to know if, I'm like\nI have information that's come from\n\n98\n00:05:31.160 --> 00:05:35.060\noutside service or it's being passed\naround and I kinda lost track\n\n99\n00:05:35.060 --> 00:05:39.670\nwhich is a considerable concern in\na dynamic language like JavaScript.\n\n100\n00:05:39.670 --> 00:05:40.980\nIt is a string?\n\n101\n00:05:40.980 --> 00:05:41.610\nIt is a number?\n\n102\n00:05:41.610 --> 00:05:43.440\nBecause they behave differently.\n\n103\n00:05:43.440 --> 00:05:46.330\nEven if intrinsically they\ncontain the same information.\n\n104\n00:05:47.620 --> 00:05:53.990\nThis type of operator also\noperates on strings so\n\n105\n00:05:53.990 --> 00:05:59.180\nif I have 3 now that's the string\nrepresentation of the number 3 but\n\n106\n00:05:59.180 --> 00:06:03.372\nif I go back and\nI refresh notice I have number and\n\n107\n00:06:03.372 --> 00:06:07.980\nstring and we've seen those two before so\nthat's a great test.\n\n108\n00:06:07.980 --> 00:06:09.900\nBut what about some of these other types?\n\n109\n00:06:12.260 --> 00:06:16.850\nI have those boolean types, true or false.\n\n110\n00:06:16.850 --> 00:06:19.073\nBut I've said that.\n\n111\n00:06:19.073 --> 00:06:22.258\nBut up until now,\nwe've never seen a verification of that.\n\n112\n00:06:22.258 --> 00:06:28.940\nLet's just see what the type of true\nis and that is in fact a boolean.\n\n113\n00:06:30.480 --> 00:06:34.930\n&gt;&gt; Now Justin, when you do that\nfirst declaration, var X equals 3,\n\n114\n00:06:34.930 --> 00:06:39.680\nseems like JavaScript might\nhave assumed that was a number.\n\n115\n00:06:39.680 --> 00:06:42.733\nCould you have stored that as a string?\n\n116\n00:06:42.733 --> 00:06:44.214\n&gt;&gt; Absolutely, Mike.\n\n117\n00:06:44.214 --> 00:06:47.650\n&gt;&gt; [CROSSTALK]\n&gt;&gt; No, that's a great question.\n\n118\n00:06:47.650 --> 00:06:52.860\nJavaScript is very lax when it\ncomes to how variables contain or\n\n119\n00:06:52.860 --> 00:06:55.080\nhow variables can contain\nthat information.\n\n120\n00:06:55.080 --> 00:07:01.460\nAnd just to show you,\nlet's take a quick look if I say x=3,\n\n121\n00:07:01.460 --> 00:07:07.530\nnow notice I've already have\nthis variable declaration to 3.\n\n122\n00:07:07.530 --> 00:07:09.810\nI said, what is the type?\n\n123\n00:07:09.810 --> 00:07:12.380\nAnd then I reassigned the variable.\n\n124\n00:07:12.380 --> 00:07:15.590\nBut this type is different than this type.\n\n125\n00:07:15.590 --> 00:07:20.250\nAnd I know that because I have to find\nthe variables, but that makes sense to me.\n\n126\n00:07:20.250 --> 00:07:24.070\nWe should always verify\nif that is the case.\n\n127\n00:07:24.070 --> 00:07:28.670\nI'm going to bring this\nconsole log of the type below.\n\n128\n00:07:28.670 --> 00:07:32.640\nAnd just for clarity,\nI'm gonna comment out those two lines.\n\n129\n00:07:34.650 --> 00:07:38.740\nAnd in fact,\nX initially has a value of a number type.\n\n130\n00:07:39.760 --> 00:07:42.954\nBut later on,\nX has a value of a string type.\n\n131\n00:07:42.954 --> 00:07:48.473\nAgain this is why I like having this\ntype of operator because I'm like,\n\n132\n00:07:48.473 --> 00:07:51.937\n3 plus 3 is, and\nthen you see the answer 33.\n\n133\n00:07:51.937 --> 00:07:56.254\nAnd you go, that's not right,\nthat shouldn't be 33.\n\n134\n00:07:56.254 --> 00:07:59.008\nThat's some crazy some math you got there.\n\n135\n00:07:59.008 --> 00:08:02.665\nAnd in fact what may happen is you\nhave a string and a string and\n\n136\n00:08:02.665 --> 00:08:06.470\nyou thought that they were\nnumbers instead of strings.\n\n137\n00:08:06.470 --> 00:08:10.500\nSo the typeof is very helpful\nin tracking those errors.\n\n138\n00:08:11.730 --> 00:08:16.400\nNow I'll also discuss a few other data\ntypes that we haven't encountered\n\n139\n00:08:16.400 --> 00:08:20.550\nthat we will expound\non in future editions.\n\n140\n00:08:20.550 --> 00:08:22.410\nBut let's take a quick look and\n\n141\n00:08:22.410 --> 00:08:28.340\nsee how these are represented,\njust in a very primitive sense.\n\n142\n00:08:28.340 --> 00:08:32.210\nSo I have the null, and\nnull is a reserved key word.\n\n143\n00:08:32.210 --> 00:08:38.730\nNotice in my editor it turns orange,\nwhich means hey this is special, you can't\n\n144\n00:08:38.730 --> 00:08:44.320\nsay var null equals just like I can't\nsay var var equals or var typeof equals.\n\n145\n00:08:44.320 --> 00:08:45.390\nAnything that's purple or\n\n146\n00:08:45.390 --> 00:08:49.790\nreserved like this null type,\nI shouldn't name variables like those.\n\n147\n00:08:49.790 --> 00:08:53.050\nCan't emphasize enough\nthat that is the case.\n\n148\n00:08:53.050 --> 00:08:55.270\nMost modern JavaScript\ninterpreters will say no.\n\n149\n00:08:55.270 --> 00:08:57.330\nThey'll just go, nope, don't do that.\n\n150\n00:08:58.780 --> 00:09:04.525\nAnd if we look, there is that save\nmonster that I warned you about.\n\n151\n00:09:04.525 --> 00:09:09.575\nIt's really weird that thus actually\nsays not the top of null but in fact\n\n152\n00:09:09.575 --> 00:09:14.580\nthat other object type that I've declared\nor excuse me that I discussed earlier.\n\n153\n00:09:15.730 --> 00:09:16.930\nWell that's kind of weird.\n\n154\n00:09:16.930 --> 00:09:21.404\nWell let's see if the undefined type,\n\n155\n00:09:25.414 --> 00:09:26.596\nAlso does that.\n\n156\n00:09:28.124 --> 00:09:30.420\nOkay.\n\n157\n00:09:30.420 --> 00:09:36.010\nAnd then finally, there's a typo.\n\n158\n00:09:36.010 --> 00:09:38.990\nThat would have wrecked the day, mate.\n\n159\n00:09:41.620 --> 00:09:46.640\nSo here's my typeof, and\nthen I have these open-close curly braces.\n\n160\n00:09:46.640 --> 00:09:51.720\nNow curly braces in JavaScript\ncan have a plethora of meanings.\n\n161\n00:09:53.180 --> 00:09:57.830\nAnd you will learn to hate them initially\nbut they are your friend later on.\n\n162\n00:09:57.830 --> 00:10:01.150\nSo please,\nplease just make sure they're paired up.\n\n163\n00:10:01.150 --> 00:10:02.170\nThey always come in pairs.\n\n164\n00:10:02.170 --> 00:10:03.870\nThey're kind of like your shoes.\n\n165\n00:10:03.870 --> 00:10:07.220\nThe left shoe is not any\ngood without the right shoe.\n\n166\n00:10:07.220 --> 00:10:11.350\nSo if I take a look at that,\nyou will notice that null and\n\n167\n00:10:11.350 --> 00:10:14.050\nthose open closed curly\nbraces return the same type.\n\n168\n00:10:15.170 --> 00:10:20.820\nWell in fact JavaScript has\nobject oriented properties.\n\n169\n00:10:20.820 --> 00:10:24.050\nIt follows an object oriented paradigm.\n\n170\n00:10:24.050 --> 00:10:26.850\nThat's not the only way you\ncan program within it but\n\n171\n00:10:26.850 --> 00:10:30.880\npretty much everything kind of boils\ndown to some very primitive types.\n\n172\n00:10:30.880 --> 00:10:33.018\nNull is a special type of object.\n\n173\n00:10:33.018 --> 00:10:36.120\nThat represents nothing.\n\n174\n00:10:36.120 --> 00:10:39.410\nAnd not nothing that it,\nit's kinda weird to thing about.\n\n175\n00:10:39.410 --> 00:10:42.580\n&gt;&gt; It is, [LAUGH] it's a know nothing,\nnot an unknown nothing.\n\n176\n00:10:42.580 --> 00:10:44.540\n&gt;&gt; Yeah, a known nothing, like a hole.\n\n177\n00:10:44.540 --> 00:10:47.370\nIt's just a giant hole without a bottom.\n\n178\n00:10:47.370 --> 00:10:51.940\nIt is the absence of value, but\ntechnically it is still an object.\n\n179\n00:10:53.080 --> 00:10:58.000\nNow, with that said, you have to be very\ncareful about the type of the operator\n\n180\n00:10:58.000 --> 00:11:00.840\njust as we saw with null,\nhm, that's kinda weird.\n\n181\n00:11:00.840 --> 00:11:07.610\nThat's an object, but null has a different\nset of properties than some other object.\n\n182\n00:11:07.610 --> 00:11:09.276\nBut, if you remember this.\n\n183\n00:11:09.276 --> 00:11:11.232\nThis is wonderful.\n\n184\n00:11:12.964 --> 00:11:17.810\nNaN, not a number type,\nthat was returned and printed out.\n\n185\n00:11:18.820 --> 00:11:22.450\nIf we return, that's really weird.\n\n186\n00:11:22.450 --> 00:11:25.910\nNot a number is in fact,\nrepresented as a number.\n\n187\n00:11:28.060 --> 00:11:29.930\nYou just have to be careful about that.\n\n188\n00:11:29.930 --> 00:11:33.310\nAnd it's a number type because it's\nused to compare against numbers.\n\n189\n00:11:34.380 --> 00:11:38.580\nBut not a number is a representation\nof not being a number,\n\n190\n00:11:38.580 --> 00:11:39.740\nwhich is itself a number.\n\n191\n00:11:39.740 --> 00:11:40.690\nI know that's a mouthful.\n\n192\n00:11:40.690 --> 00:11:43.220\nIt's kinda hard to wrap your head around.\n\n193\n00:11:43.220 --> 00:11:47.030\nMy take on that is,\ndon't think of it as a number.\n\n194\n00:11:47.030 --> 00:11:51.980\nJust be aware that typeof will say that\nit is a number type if you say what\n\n195\n00:11:51.980 --> 00:11:53.000\nis the type of not a number.\n\n196\n00:11:54.310 --> 00:11:58.450\nNow typeof is great for\ntracking these and the reason that I\n\n197\n00:11:58.450 --> 00:12:02.460\nlike to track my types sometimes\nwhen I have a larger application,\n\n198\n00:12:02.460 --> 00:12:06.620\nis JavaScript employs a series\nof conversion tactics.\n\n199\n00:12:07.670 --> 00:12:10.840\nI can explicitly convert, and\nwe've seen some of those, and\n\n200\n00:12:10.840 --> 00:12:15.150\nwe'll review those in just a moment,\nfrom one type to another.\n\n201\n00:12:15.150 --> 00:12:20.150\nBut also, we haven't been\nexplicit about this behaviour.\n\n202\n00:12:20.150 --> 00:12:22.280\nThere is implicit type conversion.\n\n203\n00:12:23.700 --> 00:12:28.000\nSo we have explicit and\nwhat does that mean?\n\n204\n00:12:28.000 --> 00:12:36.230\nThat means that I am taking a cognitive\nrole in changing one type to another.\n\n205\n00:12:36.230 --> 00:12:42.580\nAnd that unary operator,\nthat unary plus, In front of a string.\n\n206\n00:12:42.580 --> 00:12:44.910\nThat is an explicit type conversion.\n\n207\n00:12:44.910 --> 00:12:51.948\nI intentionally want the number 3 in\nstring form to go to a number type.\n\n208\n00:12:51.948 --> 00:12:55.195\nSo if we go, and\njust as a reminder if it's blue,\n\n209\n00:12:55.195 --> 00:13:00.690\nthat's a good inclination that you have\na number type printed out in the console.\n\n210\n00:13:01.700 --> 00:13:06.660\nHowever, [COUGH] we have\nsome other explicit number,\n\n211\n00:13:06.660 --> 00:13:09.300\nerr, excuse me explicit type conversions.\n\n212\n00:13:09.300 --> 00:13:12.740\nSo if I log, I can also say number,\n\n213\n00:13:12.740 --> 00:13:17.507\nand this is part of\nthe JavaScript built-ins.\n\n214\n00:13:17.507 --> 00:13:21.460\nWe have a series of functions\nthat I can wrap things around.\n\n215\n00:13:21.460 --> 00:13:22.580\nA number being one of them.\n\n216\n00:13:22.580 --> 00:13:24.540\nNotice the capitalization.\n\n217\n00:13:24.540 --> 00:13:27.520\nCapitalization is important\nwithin JavaScript.\n\n218\n00:13:27.520 --> 00:13:32.805\nIf you type this, let's see what happens.\n\n219\n00:13:32.805 --> 00:13:33.630\nUh-oh.\n\n220\n00:13:33.630 --> 00:13:38.460\nUncaught reference error because it does\nnot recognize that lowercase letter but\n\n221\n00:13:38.460 --> 00:13:39.870\nif I type capital N,\n\n222\n00:13:39.870 --> 00:13:44.340\nnotice it changes color, it is part\nof the JavaScript built in utilities.\n\n223\n00:13:44.340 --> 00:13:47.890\nAnd in fact, it returns the same\nthing as the unary plus.\n\n224\n00:13:47.890 --> 00:13:53.050\nThis is an explicit conversion\nfrom string to a number type.\n\n225\n00:13:54.440 --> 00:13:58.360\nThere are two others that I\ndo want to illustrate and\n\n226\n00:13:58.360 --> 00:14:02.150\nthese are helpful because if you're\nreading in anything from a webpage,\n\n227\n00:14:02.150 --> 00:14:04.990\nfrom a data service,\nthose typically come in as strings.\n\n228\n00:14:04.990 --> 00:14:07.410\nAnd I wanna make sure\nthat they're numbers,\n\n229\n00:14:07.410 --> 00:14:12.860\nif I need them to be, in order to operate\non them with normal math operations.\n\n230\n00:14:12.860 --> 00:14:18.860\nSo there are two others that are very\ncommon and that's parse float.\n\n231\n00:14:18.860 --> 00:14:22.270\nFloat means I want a decimal portion.\n\n232\n00:14:22.270 --> 00:14:26.551\nAnd I can say 3.14 pie.\n\n233\n00:14:26.551 --> 00:14:31.980\nAnd then we also have parse end.\n\n234\n00:14:31.980 --> 00:14:34.510\nEnd are just the whole number portions.\n\n235\n00:14:34.510 --> 00:14:36.720\nSo anything before the decimal place.\n\n236\n00:14:38.010 --> 00:14:41.030\nAnd notice that parse flow gives me 3.14.\n\n237\n00:14:41.030 --> 00:14:48.090\nAnd parse int gives me just 3 even\nthough I fed them the same string.\n\n238\n00:14:48.090 --> 00:14:53.240\nNow if we remember if I put an A here,\nan A here, an A here,\n\n239\n00:14:53.240 --> 00:14:58.400\nan A here, these don't look\nlike valid numerical types,\n\n240\n00:14:58.400 --> 00:15:03.590\nlike 3a.14, it looks like a book chapter\nmore so than like a standard number.\n\n241\n00:15:03.590 --> 00:15:07.430\nYou have to be very weary\nbecause number and plus,\n\n242\n00:15:07.430 --> 00:15:09.589\nthe unary plus, make them not a number.\n\n243\n00:15:10.600 --> 00:15:15.240\nparseInt and parseFloat will in\nfact go up to the point that it is\n\n244\n00:15:15.240 --> 00:15:19.720\nno longer a valid number and give you\nanything that has occurred before then.\n\n245\n00:15:19.720 --> 00:15:22.790\nSo they have different behaviors\nthat you need to be aware of.\n\n246\n00:15:22.790 --> 00:15:25.200\n&gt;&gt; That could be scary if you're\nnot realizing what it's doing.\n\n247\n00:15:25.200 --> 00:15:27.570\nIt's actually truncating\npart of your number.\n\n248\n00:15:27.570 --> 00:15:30.910\n&gt;&gt; Yeah, yeah, and that could be,\nI have a space in there.\n\n249\n00:15:30.910 --> 00:15:32.690\nI have too many periods in there.\n\n250\n00:15:32.690 --> 00:15:35.550\nSo you have to be aware of\nthese nuanced differences.\n\n251\n00:15:35.550 --> 00:15:39.130\nIt'll save you a lot of time\nwhen we actually get this in\n\n252\n00:15:39.130 --> 00:15:42.080\nsome larger scale implementation details.\n\n253\n00:15:42.080 --> 00:15:45.000\nIn addition to that, parse flow and\n\n254\n00:15:45.000 --> 00:15:50.110\nparse int, in older browsers\nmay have some odd behaviors.\n\n255\n00:15:50.110 --> 00:15:56.054\nFor instance, I know parse int, and I can\nactually give this just a standard number.\n\n256\n00:15:56.054 --> 00:16:00.900\nIn older browser implementations if\nI started a number with 0, then that\n\n257\n00:16:00.900 --> 00:16:05.915\nwould become an octal representation\ninstead of the normal number system.\n\n258\n00:16:05.915 --> 00:16:09.586\nI'm not gonna talk about octals,\njust believe me and\n\n259\n00:16:09.586 --> 00:16:12.200\nyou'll go three is not that.\n\n260\n00:16:12.200 --> 00:16:15.028\nSo I have these explicit types.\n\n261\n00:16:15.028 --> 00:16:18.840\nNow, likewise,\nI can use these for other types.\n\n262\n00:16:18.840 --> 00:16:22.110\nI can try, and I recommend that you\ndo try, play around with these.\n\n263\n00:16:22.110 --> 00:16:28.786\nFor instance, if I say,\nnumber of false, what happens?\n\n264\n00:16:28.786 --> 00:16:30.440\nIt might break, if it breaks, that's cool.\n\n265\n00:16:32.408 --> 00:16:37.583\nWell, that's odd, it actually does\na type conversion from false,\n\n266\n00:16:37.583 --> 00:16:41.070\na boolean value, to a number value.\n\n267\n00:16:41.070 --> 00:16:44.868\nAnd if that, how does that make sense?\n\n268\n00:16:44.868 --> 00:16:53.160\nHm, well, false is no, and no is you're\nnot getting any candy from the store.\n\n269\n00:16:53.160 --> 00:16:57.788\nSo 0 or make up something\nthat makes sense in context.\n\n270\n00:16:57.788 --> 00:17:02.092\nFalse I think of as an answer,\na no answer to a question and\n\n271\n00:17:02.092 --> 00:17:04.168\nthat would relate to zero.\n\n272\n00:17:04.168 --> 00:17:09.717\nLikewise, we can explicitly\nconvert true and\n\n273\n00:17:09.717 --> 00:17:15.350\nI wonder what would this provide to us?\n\n274\n00:17:15.350 --> 00:17:20.984\nIf we convert from true to a number.\n\n275\n00:17:20.984 --> 00:17:22.392\n&gt;&gt; I'm gonna guess one.\n\n276\n00:17:22.392 --> 00:17:23.950\n&gt;&gt; So, Mike, you said one.\n\n277\n00:17:23.950 --> 00:17:26.392\nDrum roll, and you're right.\n\n278\n00:17:26.392 --> 00:17:26.964\n&gt;&gt; Woo-hoo [LAUGH]!\n&gt;&gt; Mike,\n\n279\n00:17:26.964 --> 00:17:30.890\nit's like you have the logical\nmind of a programmer.\n\n280\n00:17:30.890 --> 00:17:33.152\nIt makes me happy, it makes me happy.\n\n281\n00:17:33.152 --> 00:17:36.010\nNow These are explicit conversions.\n\n282\n00:17:36.010 --> 00:17:38.747\nThere are not only these\ntypes of conversions,\n\n283\n00:17:38.747 --> 00:17:42.792\nwhere I have these special operators,\nlike number, parse, float.\n\n284\n00:17:42.792 --> 00:17:46.030\nBut likewise I can go\nfrom numbers to strings.\n\n285\n00:17:46.030 --> 00:17:50.014\nAnd we're just going to\nquickly touch on that.\n\n286\n00:17:50.014 --> 00:17:55.290\nSo, if I have x, which we I remind\nourselves is in fact three,\n\n287\n00:17:55.290 --> 00:17:56.925\nso x equals three.\n\n288\n00:17:56.925 --> 00:18:02.593\nI can say to string, and\nnotice that gives me not\n\n289\n00:18:02.593 --> 00:18:08.426\na blue version of three but\na black text version.\n\n290\n00:18:08.426 --> 00:18:12.216\nWhich is a good indicator this is\nprobably a string representation.\n\n291\n00:18:12.216 --> 00:18:19.407\nBut I can also, let's change this to,\nLots of numbers.\n\n292\n00:18:19.407 --> 00:18:23.208\nAnd then I can say, to fixed,\n\n293\n00:18:23.208 --> 00:18:27.780\nwhich has a couple of differences.\n\n294\n00:18:27.780 --> 00:18:31.540\nThis is kind of combination\nbetween explicit and implicit.\n\n295\n00:18:31.540 --> 00:18:35.984\nSo am saying to fixed,\nso to a fixed number of\n\n296\n00:18:35.984 --> 00:18:40.613\ndecimal points, and did I-\n&gt;&gt; We got an extra declaration when we\n\n297\n00:18:40.613 --> 00:18:43.308\nwere playing earlier,\nline three, I believe.\n\n298\n00:18:43.308 --> 00:18:45.215\n&gt;&gt; There we go, yup, thank you, Mike.\n\n299\n00:18:45.215 --> 00:18:46.740\n&gt;&gt; Yup,Yup.\n\n300\n00:18:46.740 --> 00:18:48.788\n&gt;&gt; Eyes like an eagle, eyes like an eagle.\n\n301\n00:18:48.788 --> 00:18:51.350\nSo, yeah, this only works on number types.\n\n302\n00:18:51.350 --> 00:18:54.254\nSo, there's that tracking of pipes.\n\n303\n00:18:54.254 --> 00:18:56.900\nIt, I talked about it at\nthe beginning of the episode.\n\n304\n00:18:56.900 --> 00:18:59.280\nAnd you actually saw it in real time.\n\n305\n00:18:59.280 --> 00:19:03.970\nBut notice I have a fixed number\nof decimal places for this.\n\n306\n00:19:03.970 --> 00:19:07.128\nSo it cut off and it actually rounded.\n\n307\n00:19:07.128 --> 00:19:10.449\nI can give this a series of numbers or,\nexcuse me,\n\n308\n00:19:10.449 --> 00:19:14.960\na variety of numbers and\nget a different number of decimal places.\n\n309\n00:19:14.960 --> 00:19:17.390\nHowever, notice it is in black text.\n\n310\n00:19:17.390 --> 00:19:19.810\nAnd has made it a string.\n\n311\n00:19:19.810 --> 00:19:22.050\nAnd that's part of this function.\n\n312\n00:19:22.050 --> 00:19:25.120\nNow this is kind of a wierd syntax.\n\n313\n00:19:25.120 --> 00:19:31.810\nWe'll get to that later, but\nthese are all explicit type conversions.\n\n314\n00:19:31.810 --> 00:19:35.350\nNow, in comparison,\nwe have implicit type conversions.\n\n315\n00:19:39.198 --> 00:19:40.580\nAnd we've seen those.\n\n316\n00:19:42.882 --> 00:19:46.758\nIn things such as is 3 equal to 3 and\n\n317\n00:19:46.758 --> 00:19:50.520\ncompare that with triple equals.\n\n318\n00:19:52.750 --> 00:19:58.140\nWell if we look the first one with\nthe two equal signs, excuse me,\n\n319\n00:19:58.140 --> 00:20:03.054\nevaluates to true, but\nthe second one evaluates to false.\n\n320\n00:20:03.054 --> 00:20:06.054\nThis one will do that type conversion, or\n\n321\n00:20:06.054 --> 00:20:12.490\nit will coerce one to the other as best\nit can, and then compare their values.\n\n322\n00:20:12.490 --> 00:20:17.472\nSo, there's the letter, excuse me, the\nstring representation, in between quotes.\n\n323\n00:20:17.472 --> 00:20:22.972\nIf I make that kinda look like this other\nthing or vice versa are they then equal?\n\n324\n00:20:22.972 --> 00:20:31.200\nSo this is an example of implicit,\nConversion between data types.\n\n325\n00:20:32.440 --> 00:20:36.530\nNow again this is handy to know,\nwhat you need to keep track of.\n\n326\n00:20:36.530 --> 00:20:40.735\nBecause something may evaluate to true,\nwhen in fact,\n\n327\n00:20:40.735 --> 00:20:43.959\nyou wanted the triple equals evaluation.\n\n328\n00:20:43.959 --> 00:20:48.753\nLikewise, if we change this 1=\n\n329\n00:20:48.753 --> 00:20:54.800\nsign to an !, this one is implicit.\n\n330\n00:20:54.800 --> 00:20:59.506\nThis one does not do type conversion,\nit compares the values as is.\n\n331\n00:20:59.506 --> 00:21:00.860\nIncluding the type.\n\n332\n00:21:00.860 --> 00:21:03.210\nSo, this one is checking,\nare they the same type?\n\n333\n00:21:03.210 --> 00:21:04.982\nIs a string equal to a number?\n\n334\n00:21:04.982 --> 00:21:06.650\nNo, they're not the same type.\n\n335\n00:21:09.482 --> 00:21:12.712\nBut, since this is not,\nit's the opposite of that.\n\n336\n00:21:12.712 --> 00:21:15.930\nYou have to be careful of that.\n\n337\n00:21:15.930 --> 00:21:19.880\nNow, there's a plethora of other ones.\n\n338\n00:21:19.880 --> 00:21:23.100\nBut we're gonna lightly\ntouch on a few more.\n\n339\n00:21:25.876 --> 00:21:29.008\nAnd if we look here, remember,\n\n340\n00:21:29.008 --> 00:21:33.590\nup here this is number\nequals number of false.\n\n341\n00:21:33.590 --> 00:21:37.430\nSo converting false to\na number gives us 0.\n\n342\n00:21:37.430 --> 00:21:42.909\nWell, If I\n\n343\n00:21:42.909 --> 00:21:47.104\ncompare this with == or ===, again,\n\n344\n00:21:47.104 --> 00:21:53.640\nimplicit type conversion versus\nno type conversion whatsoever.\n\n345\n00:21:53.640 --> 00:22:01.420\nI in fact see that a string with nothing\nin it is roughly equal to false.\n\n346\n00:22:01.420 --> 00:22:04.422\nLikewise, I'm sure you know what this is,\nMike.\n\n347\n00:22:04.422 --> 00:22:10.490\n&gt;&gt; [LAUGH]\n&gt;&gt; If I say, is zero equal to false.\n\n348\n00:22:12.928 --> 00:22:17.610\nWell, with double equals it is,\nwith triple equals, it is not.\n\n349\n00:22:17.610 --> 00:22:19.200\nBecause z number and\n\n350\n00:22:19.200 --> 00:22:22.940\nthe z boolean in triple equals,\nso they do not equal themselves.\n\n351\n00:22:22.940 --> 00:22:24.666\n&gt;&gt; Starting to remind me of politics.\n\n352\n00:22:24.666 --> 00:22:26.263\nI mean, [LAUGH] as long as I change,\n\n353\n00:22:26.263 --> 00:22:29.710\nI can get the answer I want just by\nchanging the operators I'm using.\n\n354\n00:22:29.710 --> 00:22:34.182\nYeah, yeah, and it's very, very tricky.\n\n355\n00:22:34.182 --> 00:22:36.685\nBut something to know, there are,\n\n356\n00:22:36.685 --> 00:22:41.410\nwithin the JavaScript community,\nthere's kind of two sides.\n\n357\n00:22:41.410 --> 00:22:46.296\nSome people say always use ===, or\nthe exclamation point with == so\n\n358\n00:22:46.296 --> 00:22:49.192\nyou know exactly what you're comparing.\n\n359\n00:22:49.192 --> 00:22:51.777\n&gt;&gt; Basically preventing JavaScript\nfrom doing any type of conversion\n\n360\n00:22:51.777 --> 00:22:53.485\nin the background without your knowledge.\n\n361\n00:22:53.485 --> 00:22:58.425\n&gt;&gt; Yea, and I think it helps people who\nare beginning to track what's going on,\n\n362\n00:22:58.425 --> 00:23:01.242\nbecause what you're reading is explicit.\n\n363\n00:23:01.242 --> 00:23:03.940\nThese things have to be exactly the same.\n\n364\n00:23:03.940 --> 00:23:09.634\nBut there are times where the ==, it does\nhelp you keep your code a little cleaner.\n\n365\n00:23:09.634 --> 00:23:14.425\nLike if i slurp in a bunch of text from\na source, you know, off the web or\n\n366\n00:23:14.425 --> 00:23:20.410\nsomething, and I wanna see if the ticker\nprice for a given stock is within a range.\n\n367\n00:23:20.410 --> 00:23:25.183\nI can use these kind of lax comparisons\nto see, without doing all of\n\n368\n00:23:25.183 --> 00:23:29.542\nthis explicit conversion that\nI would otherwise have to do.\n\n369\n00:23:29.542 --> 00:23:34.082\nSo, now that does lead us into that, but\n\n370\n00:23:34.082 --> 00:23:39.910\nI think that might be best\nseen in another episode.\n\n371\n00:23:39.910 --> 00:23:41.640\n&gt;&gt; Yep, that sound good to me Justin.\n\n372\n00:23:41.640 --> 00:23:44.020\nWe are running a little\nshort of time on this one.\n\n373\n00:23:44.020 --> 00:23:45.860\nFantastic information though, love it.\n\n374\n00:23:45.860 --> 00:23:51.054\nWe've gotta understand our data types\nas we get further on into JavaScript.\n\n375\n00:23:51.054 --> 00:23:52.330\nWorking with that data, storing that data.\n\n376\n00:23:52.330 --> 00:23:54.112\nWhen we start to manipulate that data,\n\n377\n00:23:54.112 --> 00:23:57.848\nunderstanding what data type we're dealing\nwith is gonna make a big difference.\n\n378\n00:23:57.848 --> 00:23:59.710\nSo, we appreciate that,\ngreat examples there.\n\n379\n00:23:59.710 --> 00:24:00.542\nWe hope everybody enjoyed\nwatching this one.\n\n380\n00:24:00.542 --> 00:24:04.238\nSigning off for ITProTV,\nI've been your host Mike Roderick.\n\n381\n00:24:04.238 --> 00:24:06.302\n&gt;&gt; And I'm Justin Demson.\n\n382\n00:24:06.302 --> 00:24:07.780\n&gt;&gt; And we'll see you next time.\n\n383\n00:24:07.780 --> 00:24:11.228\n[MUSIC]\n\n384\n00:24:11.228 --> 00:24:18.163\n&gt;&gt; Thank you for watching IT\u007fPro.TV.\n\n",
          "vimeoId": "202076610"
        },
        {
          "description": "In this episode, Justin and Mike cover the fundamental data types in JavaScript. They use the console.log to show various types of data output such as Date, Error, RegExp and others.",
          "length": "767",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-3-1-2-types_of_data_pt2-013117-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-3-1-2-types_of_data_pt2-013117-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-3-1-2-types_of_data_pt2-013117-1-sm.jpg",
          "title": "Types of Data Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.880 --> 00:00:02.421\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.421 --> 00:00:05.789\n[CROSSTALK]\n\n3\n00:00:05.789 --> 00:00:08.274\n[MUSIC]\n\n4\n00:00:08.274 --> 00:00:11.558\nYou're watching ITProTV.\n\n5\n00:00:11.558 --> 00:00:15.074\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n6\n00:00:15.074 --> 00:00:16.904\nI'm your host, Mike Rodrick, and\n\n7\n00:00:16.904 --> 00:00:19.649\ntoday we're doing our\nintroduction to JavaScript.\n\n8\n00:00:19.649 --> 00:00:22.060\nAnd in this episode,\nwe're actually doing a part two.\n\n9\n00:00:22.060 --> 00:00:25.940\nWe're continuing our thought\nprocess on types of data.\n\n10\n00:00:25.940 --> 00:00:29.180\nAnd here to continue the conversation\nwith us is Mr. Justin Dennison.\n\n11\n00:00:29.180 --> 00:00:30.130\nWelcome back, Justin.\n\n12\n00:00:30.130 --> 00:00:31.439\n&gt;&gt; Thanks for having me back, Mike.\n\n13\n00:00:31.439 --> 00:00:32.170\nI'm excited.\n\n14\n00:00:32.170 --> 00:00:36.500\nData is dear and\ntruly dear to my heart, and\n\n15\n00:00:36.500 --> 00:00:39.610\nI wanted to make sure we hit\nall of those fine nuances.\n\n16\n00:00:39.610 --> 00:00:43.940\nNow where we left off was talking\nabout implicit type conversions.\n\n17\n00:00:45.370 --> 00:00:50.357\nThose implicit inversions like zero is\nequal to false, and those operators triple\n\n18\n00:00:50.357 --> 00:00:55.148\nequals versus double equals, kind of\nallow that lax kind of melding together.\n\n19\n00:00:55.148 --> 00:01:00.788\nBut that's not quite all of the implicit\nconversions that can occur.\n\n20\n00:01:00.788 --> 00:01:01.900\nAnd I won't cover all of them, but\n\n21\n00:01:01.900 --> 00:01:04.370\nthere are some ones that you\nshould definitely be aware of.\n\n22\n00:01:04.370 --> 00:01:07.690\nWe saw that an empty string is\nequal to false with double equals,\n\n23\n00:01:07.690 --> 00:01:11.510\nwe also saw that it is not equal\nto false with triple equals.\n\n24\n00:01:11.510 --> 00:01:13.840\nBut let us take a look at\na couple of other ones,\n\n25\n00:01:13.840 --> 00:01:17.940\nand I have up where we left off.\n\n26\n00:01:17.940 --> 00:01:19.500\nAnd let's see.\n\n27\n00:01:19.500 --> 00:01:21.830\nWhat is an object?\n\n28\n00:01:25.250 --> 00:01:28.880\nSo if I have console.log, and\nthose weird curly braces, remember,\n\n29\n00:01:28.880 --> 00:01:30.035\nit's like pairs of shoes.\n\n30\n00:01:30.035 --> 00:01:34.860\n&gt;&gt; [LAUGH]\n&gt;&gt; If I say, is that false, and\n\n31\n00:01:34.860 --> 00:01:39.670\nI have my triple equals,\nthose are both false.\n\n32\n00:01:39.670 --> 00:01:43.260\nAnd that's because an object, well,\n\n33\n00:01:43.260 --> 00:01:46.650\nit evaluates to true regardless\nof whether it's empty or not.\n\n34\n00:01:46.650 --> 00:01:50.020\nThis is empty,\nwhich is different than this behavior.\n\n35\n00:01:50.020 --> 00:01:52.100\nSo you have to be careful about that.\n\n36\n00:01:52.100 --> 00:01:53.890\nSo this is, is it equal to false?\n\n37\n00:01:53.890 --> 00:01:55.020\nNo?\nIs it equal to true?\n\n38\n00:01:55.020 --> 00:01:57.040\nWell, if my assertion is correct,\n\n39\n00:01:58.470 --> 00:02:00.680\nlet's see what happens when\nI change that to true.\n\n40\n00:02:00.680 --> 00:02:03.279\nWell, it's also not equal to true and\n\n41\n00:02:03.279 --> 00:02:05.716\nthat's kinda weird because-\n&gt;&gt; All right,\n\n42\n00:02:05.716 --> 00:02:06.793\nnow you're just messing with our mind.\n\n43\n00:02:06.793 --> 00:02:08.970\n&gt;&gt; Yeah, yeah, I'm messing with you.\n\n44\n00:02:08.970 --> 00:02:13.560\nThat actually leads us into\nthe idea of truthy and falsey.\n\n45\n00:02:13.560 --> 00:02:15.760\nNow it's crazy stuff.\n\n46\n00:02:15.760 --> 00:02:20.560\nIn other programming languages you have\na definitive true and false value.\n\n47\n00:02:20.560 --> 00:02:22.310\nIt is or is not.\n\n48\n00:02:22.310 --> 00:02:27.070\nBut in JavaScript, we have kind of\nthis gray area that molds over.\n\n49\n00:02:27.070 --> 00:02:32.205\nAnd we've seen some of the results\nof that with this 0 == false.\n\n50\n00:02:32.205 --> 00:02:34.620\nWell, these are both falsey values.\n\n51\n00:02:35.700 --> 00:02:39.810\nEmpty string and so an empty\nstring is no characters in quotes.\n\n52\n00:02:39.810 --> 00:02:40.812\nThat is a falsey value.\n\n53\n00:02:40.812 --> 00:02:44.070\nAnd there are a series of falsey values.\n\n54\n00:02:44.070 --> 00:02:47.305\n0, empty string, as we've seen,\n\n55\n00:02:47.305 --> 00:02:51.740\nnull.\n\n56\n00:02:51.740 --> 00:02:55.660\nAnd what's really weird is\nsometimes this doesn't always play\n\n57\n00:02:57.610 --> 00:03:01.510\nout as you expect, so\nis null equal to false?\n\n58\n00:03:01.510 --> 00:03:02.270\nWell, it's not.\n\n59\n00:03:02.270 --> 00:03:04.640\nRemember null is a special type of object.\n\n60\n00:03:04.640 --> 00:03:07.900\nSo now it's not able to\ndo that type conversion.\n\n61\n00:03:07.900 --> 00:03:12.960\nBut because of this implicit conversion,\nwe do lead into this truthy falsey,\n\n62\n00:03:12.960 --> 00:03:18.810\nand null is the absence of value\nwhich can be construed as 0, nothing.\n\n63\n00:03:18.810 --> 00:03:20.920\nIt's really hard to wrap your mind around,\nbut\n\n64\n00:03:20.920 --> 00:03:23.240\ndo keep in mind that these values exist.\n\n65\n00:03:23.240 --> 00:03:29.287\nAnd we will use them later in some of our\nlarger applications or larger scripts.\n\n66\n00:03:29.287 --> 00:03:32.874\nSo 0, null, empty string, undefined,\n\n67\n00:03:32.874 --> 00:03:37.710\nfalse is obviously falsey,\nand then not a number.\n\n68\n00:03:37.710 --> 00:03:44.790\nSo those will, in context, sometimes give\nyou a false-like appearance or behavior.\n\n69\n00:03:44.790 --> 00:03:46.310\nNot always, though.\n\n70\n00:03:46.310 --> 00:03:50.870\nSo you need to commit those\nfew types to memory and\n\n71\n00:03:50.870 --> 00:03:57.330\nknow that those can behave falsey,\nbut do not necessarily equal false.\n\n72\n00:03:57.330 --> 00:03:58.940\nAnd that's where it gets crazy.\n\n73\n00:03:58.940 --> 00:04:03.870\nI wanna harp on this for a little\nbit at the beginning because we will\n\n74\n00:04:03.870 --> 00:04:08.690\nuse these and it's kind of an accepted\nbest practice, as we've seen.\n\n75\n00:04:08.690 --> 00:04:10.650\nNow what are truthy values?\n\n76\n00:04:10.650 --> 00:04:11.874\nAnything that are not those.\n\n77\n00:04:11.874 --> 00:04:13.820\n&gt;&gt; [LAUGH]\n&gt;&gt; And that's an easy way.\n\n78\n00:04:13.820 --> 00:04:17.760\nSo I only have to remember a few,\nand then say is it any of those?\n\n79\n00:04:17.760 --> 00:04:20.450\nNo, then it’s truthy.\n\n80\n00:04:20.450 --> 00:04:25.250\nAnd that’s where we get this empty object.\n\n81\n00:04:25.250 --> 00:04:29.500\nWell, even though it's empty,\nit still has breadth.\n\n82\n00:04:29.500 --> 00:04:32.440\nLike if I have an empty cup,\nit’s still a cup.\n\n83\n00:04:32.440 --> 00:04:36.370\nSo it’s still there,\nit doesn't behave in a falsey manner.\n\n84\n00:04:36.370 --> 00:04:40.670\nNow we've seen from these\ndatatype conversions from,\n\n85\n00:04:40.670 --> 00:04:45.160\nyou know, boolean to number,\nfrom number to boolean.\n\n86\n00:04:45.160 --> 00:04:49.570\nAll of those, I've used a couple of these\nJavaScript, what are called builtins.\n\n87\n00:04:51.390 --> 00:04:56.110\nNow these are predominant in the browser,\nother places that JavaScript has occurred,\n\n88\n00:04:56.110 --> 00:05:02.510\nor older browser implementations that may\nbe a little iffy on how well these behave.\n\n89\n00:05:02.510 --> 00:05:07.910\nBut you've seen the string built in and\n\n90\n00:05:07.910 --> 00:05:12.100\nthis is going to make those explicit\nconversions from one type to another.\n\n91\n00:05:12.100 --> 00:05:18.739\nSo if I say string of three, I will in\nfact get a string representation of three.\n\n92\n00:05:20.220 --> 00:05:25.538\nBut there are also, I should\ndefinitely start using that shortcut.\n\n93\n00:05:25.538 --> 00:05:28.657\n&gt;&gt; [LAUGH]\n&gt;&gt; Instead of the typey, typey.\n\n94\n00:05:28.657 --> 00:05:34.624\nSo there is number and there’s 33.\n\n95\n00:05:34.624 --> 00:05:38.830\nNotice it’s in blue, so\nthat means that I now have a number.\n\n96\n00:05:38.830 --> 00:05:44.770\nThere are a few other built-ins\nthat will either convert or\n\n97\n00:05:44.770 --> 00:05:50.890\nthey also play other roles at creating\nsome of these additional objects or\n\n98\n00:05:50.890 --> 00:05:52.950\ntypes of information.\n\n99\n00:05:52.950 --> 00:05:57.190\nIf I look at an object,\nnotice I have nothing in the parentheses,\n\n100\n00:05:57.190 --> 00:05:58.049\nit's just object.\n\n101\n00:05:59.460 --> 00:06:03.060\nIf I refresh, it actually says hey,\nthis is an object.\n\n102\n00:06:03.060 --> 00:06:05.040\nAnd there's some weird drop downs here.\n\n103\n00:06:05.040 --> 00:06:07.320\nBut this is one of those\nfundamental data types.\n\n104\n00:06:07.320 --> 00:06:09.342\nThis is one way to create one of those.\n\n105\n00:06:09.342 --> 00:06:14.142\nIn the future, we will also see\nkind of a derived data type,\n\n106\n00:06:14.142 --> 00:06:20.770\nlike a special type of object as we've\nseen, like null, called an array.\n\n107\n00:06:20.770 --> 00:06:24.330\nIf I use array,\nnotice I get square brackets.\n\n108\n00:06:24.330 --> 00:06:26.690\nAnd when I drop it down\nit actually says array.\n\n109\n00:06:27.790 --> 00:06:33.441\nNow there's a couple other ones,\nRegExp, or RegExp.\n\n110\n00:06:33.441 --> 00:06:40.570\nIt's kinda hard to say, R-E-G-E-X-P,\nan error and a date object.\n\n111\n00:06:40.570 --> 00:06:44.910\nAs well as a capital F Function built in\n\n112\n00:06:47.090 --> 00:06:53.250\nthat will allow you to write\nJavaScript functions as strings.\n\n113\n00:06:54.410 --> 00:06:59.810\nBut it's considered kind of an iffy\nsecurity practice, because you may end up\n\n114\n00:06:59.810 --> 00:07:04.800\nwith people being able to inject malicious\nfunction constructions within that.\n\n115\n00:07:04.800 --> 00:07:08.160\nSo do know that those are available.\n\n116\n00:07:08.160 --> 00:07:11.193\nI would not use\nthe Function capital F one.\n\n117\n00:07:11.193 --> 00:07:16.420\nAnd I, for now, not always,\nbut for now, this is bad.\n\n118\n00:07:16.420 --> 00:07:21.150\nDon't do that, because you can end up\nwith things like crawl site scripting,\n\n119\n00:07:21.150 --> 00:07:22.410\nwhere people can take over your page,\n\n120\n00:07:22.410 --> 00:07:25.570\ninject malicious code within it,\ndepending on how you use it.\n\n121\n00:07:25.570 --> 00:07:30.760\nBut those last few, and there's that\nsilly plugin doing crazy stuff.\n\n122\n00:07:31.790 --> 00:07:36.736\nI do have Date, And\n\n123\n00:07:36.736 --> 00:07:41.756\nError, And RegExp,\n\n124\n00:07:41.756 --> 00:07:48.350\nand those are constructing\nregular expressions.\n\n125\n00:07:48.350 --> 00:07:51.050\nThose are handy if you're trying to\nsearch through a large string for\n\n126\n00:07:51.050 --> 00:07:54.770\ncertain patterns.\n\n127\n00:07:54.770 --> 00:07:56.030\nError will kind of come up.\n\n128\n00:07:56.030 --> 00:08:00.210\nWe've already seen a couple of those\nsyntax error, type error, reference error.\n\n129\n00:08:00.210 --> 00:08:03.650\nThose are what are thrown to the console,\nthat'll give you that red output.\n\n130\n00:08:03.650 --> 00:08:07.990\nThere are times where you may want\nto construct a custom error for\n\n131\n00:08:07.990 --> 00:08:09.280\nyour application.\n\n132\n00:08:09.280 --> 00:08:11.050\nWe may not see as many of these.\n\n133\n00:08:11.050 --> 00:08:16.100\nRegExp also has a definite smaller\nuse case, a very particular use case.\n\n134\n00:08:16.100 --> 00:08:19.380\nMay not see as many of these\nin this kind of introduction.\n\n135\n00:08:19.380 --> 00:08:22.560\nBut date, well, dates are very handy.\n\n136\n00:08:24.460 --> 00:08:27.270\nThey will actually\noutput a bunch of stuff.\n\n137\n00:08:27.270 --> 00:08:31.630\nAnd what I don't like about JavaScript\nis the date is actually a date, time, so\n\n138\n00:08:31.630 --> 00:08:37.460\nit's a combination of the date, which is\nmonth, day, year, even day of the week,\n\n139\n00:08:37.460 --> 00:08:43.340\nas well as, hour, minute, second, and\nlocal offset from what is the UTC,\n\n140\n00:08:43.340 --> 00:08:46.300\nor kind of the-\n&gt;&gt; Universal time.\n\n141\n00:08:46.300 --> 00:08:47.940\n&gt;&gt; Yeah, universal time code.\n\n142\n00:08:47.940 --> 00:08:52.480\nSo notice we are in the Eastern time\nzone and we're offset by five hours.\n\n143\n00:08:52.480 --> 00:08:55.480\nSo date combines a bunch\nof information and\n\n144\n00:08:55.480 --> 00:08:57.840\nare not the easiest things to work with.\n\n145\n00:08:57.840 --> 00:09:00.120\nHowever, this is in black text.\n\n146\n00:09:00.120 --> 00:09:05.200\nThat's actually a string representation\nof the date as well as this error.\n\n147\n00:09:05.200 --> 00:09:08.090\nSo some of these built-ins\nbehave a little differently.\n\n148\n00:09:08.090 --> 00:09:10.430\nAs you'll notice,\nthe number actually gives you a number.\n\n149\n00:09:10.430 --> 00:09:12.940\nObject gives you an object,\narray gives you an array.\n\n150\n00:09:12.940 --> 00:09:18.310\nWhereas Date and Error give you string\nrepresentations of those things.\n\n151\n00:09:18.310 --> 00:09:20.500\nSo you have to be wary of those.\n\n152\n00:09:20.500 --> 00:09:24.774\nWell, if I wanted to look those up, and\nwe haven't talked about this until now.\n\n153\n00:09:24.774 --> 00:09:28.208\nIf I wanted to know how can I\nget more information about this\n\n154\n00:09:28.208 --> 00:09:33.280\none particular built in there,\nthis one particular aspect of Java Script?\n\n155\n00:09:33.280 --> 00:09:34.880\nThere's a wonderful resource.\n\n156\n00:09:34.880 --> 00:09:40.440\nRemember that Brandon Ike guy who started\nthat Netscape and then went on to Mozilla?\n\n157\n00:09:40.440 --> 00:09:46.960\nWell, if you look at Mozilla Developer\nNetwork, this is like a one stop shop.\n\n158\n00:09:46.960 --> 00:09:49.940\nAnd I'm gonna type JavaScript\nbecause it has a bunch of stuff.\n\n159\n00:09:49.940 --> 00:09:51.970\nLet me zoom in here for you.\n\n160\n00:09:51.970 --> 00:09:55.999\nThis has a just plethora,\n\n161\n00:09:55.999 --> 00:10:00.810\na cornucopia, almost overwhelming\narc of the covenant feel for\n\n162\n00:10:00.810 --> 00:10:05.140\nJavaScript as well as other\nweb development technologies.\n\n163\n00:10:05.140 --> 00:10:07.440\nThere's wonderful reference guides.\n\n164\n00:10:07.440 --> 00:10:09.200\nThere are some introductory,\n\n165\n00:10:09.200 --> 00:10:12.660\nthis is how things work,\nas well as some advanced ones.\n\n166\n00:10:12.660 --> 00:10:17.084\nBut if I come and\nI search for JavaScript, and\n\n167\n00:10:17.084 --> 00:10:23.387\nI'm gonna look at that capital\nFunction one that I said was bad.\n\n168\n00:10:23.387 --> 00:10:29.362\nI can actually find the documentation for\ncapital Function.\n\n169\n00:10:29.362 --> 00:10:34.180\nAnd nope, this is not the right one.\n\n170\n00:10:34.180 --> 00:10:35.540\nThere we go.\nYou gotta to be careful.\n\n171\n00:10:35.540 --> 00:10:37.710\nThe search tools are not always great.\n\n172\n00:10:38.970 --> 00:10:40.090\nLet's see here.\n\n173\n00:10:40.090 --> 00:10:43.295\nLet's find one that's a little\neasier to find initially.\n\n174\n00:10:43.295 --> 00:10:47.184\nJavaScript date object.\n\n175\n00:10:50.505 --> 00:10:51.690\nLet's take off JavaScript.\n\n176\n00:10:51.690 --> 00:10:53.060\nThere we go.\n\n177\n00:10:53.060 --> 00:10:58.420\nI was trying to be too specific and\nthen I ended up tainting my search.\n\n178\n00:10:58.420 --> 00:11:02.640\nPart of being a programmer is knowing\nthe incantation of putting in search\n\n179\n00:11:02.640 --> 00:11:04.296\nengine queries.\n\n180\n00:11:04.296 --> 00:11:07.730\nBut notice this creates a JavaScript date,\ntells you how to use it,\n\n181\n00:11:09.030 --> 00:11:13.950\ntalks about some notes that you should\nbe aware of like browser differences,\n\n182\n00:11:13.950 --> 00:11:16.330\nthings that may occur.\n\n183\n00:11:16.330 --> 00:11:20.440\nAnd then very simple examples, well,\nwhat I consider simple examples,\n\n184\n00:11:20.440 --> 00:11:22.169\nsometimes they get a little convoluted.\n\n185\n00:11:24.450 --> 00:11:28.640\nSo and notice this is, there,\nthat's probably a little bit better.\n\n186\n00:11:29.840 --> 00:11:31.925\nIt was starting to look a little small,\neven for me.\n\n187\n00:11:31.925 --> 00:11:33.110\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n188\n00:11:33.110 --> 00:11:35.940\nit just gives you some basic\nexamples of how to use these.\n\n189\n00:11:35.940 --> 00:11:40.330\nThis is kind of my first stop for\nJavaScript documentation before I start\n\n190\n00:11:40.330 --> 00:11:43.578\nlooking other places,\njust to familiarize myself with hey,\n\n191\n00:11:43.578 --> 00:11:47.610\nwhat does this array function or\nthis number function do?\n\n192\n00:11:47.610 --> 00:11:52.550\nSo that gets us all of\nthis type conversion,\n\n193\n00:11:52.550 --> 00:11:56.110\nthis explicit, implicit,\nwhat are the fundamental types?\n\n194\n00:11:56.110 --> 00:12:02.060\nAgain, that is number, boolean,\nobject, string, null and undefined.\n\n195\n00:12:02.060 --> 00:12:06.320\nAnd then I've also shown\nyou kind of derived types.\n\n196\n00:12:06.320 --> 00:12:10.270\nAn array, an error,\nthat originate in that object and\n\n197\n00:12:10.270 --> 00:12:14.950\nkind of burgeon out with additional\nbehaviors and properties.\n\n198\n00:12:14.950 --> 00:12:15.890\n&gt;&gt; All right, Justin.\n\n199\n00:12:15.890 --> 00:12:19.090\nGreat way to round out our\nlook on data types and\n\n200\n00:12:19.090 --> 00:12:22.950\nhow we can work with those in JavaScript\nas well as a great resource we can\n\n201\n00:12:22.950 --> 00:12:26.872\nuse to expand on our knowledge on\ndata types and everything JavaScript.\n\n202\n00:12:26.872 --> 00:12:27.590\nSo we thank you for that.\n\n203\n00:12:27.590 --> 00:12:30.070\nI hope everybody out there\nenjoyed watching this one.\n\n204\n00:12:30.070 --> 00:12:31.026\nSigning off for ITProTV.\n\n205\n00:12:31.026 --> 00:12:32.813\nI've been your host, Mike Roderick.\n\n206\n00:12:32.813 --> 00:12:33.928\n&gt;&gt; And I'm Justin Dennison.\n\n207\n00:12:33.928 --> 00:12:36.587\n&gt;&gt; And we'll see you next time.\n\n208\n00:12:36.587 --> 00:12:42.577\n[MUSIC]\n\n209\n00:12:42.577 --> 00:12:44.610\nThank you for watching ITProTV.\n\n",
          "vimeoId": "202075746"
        },
        {
          "description": "In this episode, Justin and Mike look at working with strings in JavaScript. They demonstrate creating strings using string literals and built-in functions. They also explore string properties and methods.",
          "length": "1453",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-working_with_string-013117-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-working_with_string-013117-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-working_with_string-013117-high-sm.jpg",
          "title": "Working with Strings",
          "transcript": "WEBVTT\n\n1\n00:00:00.260 --> 00:00:07.678\nWell come back to ITPro TV [CROSSTALK]\n&gt;&gt; You're watching ITPro TV.\n\n2\n00:00:12.570 --> 00:00:15.680\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPro TV.\n\n3\n00:00:15.680 --> 00:00:17.720\nI am your host Mike Rodrick and\n\n4\n00:00:17.720 --> 00:00:20.650\ntoday we're doing our\nintroduction to JavaScript.\n\n5\n00:00:20.650 --> 00:00:24.300\nIn this episode we're gonna learn\nhow to work with strings and\n\n6\n00:00:24.300 --> 00:00:28.100\nI'm pretty sure we're not going to be\ncrocheting or doing any string art.\n\n7\n00:00:28.100 --> 00:00:30.610\nSo here to help us with this is Mr.\nJustin Dennerson.\n\n8\n00:00:30.610 --> 00:00:31.510\nWelcome back Justin.\n\n9\n00:00:31.510 --> 00:00:32.740\n&gt;&gt; Thanks for having me back, Mike.\n\n10\n00:00:32.740 --> 00:00:33.310\nI'm excited.\n\n11\n00:00:33.310 --> 00:00:38.080\nWell I'm not glad we're doing any\ncrocheting because these giant hands for\n\n12\n00:00:38.080 --> 00:00:38.920\nsome reason [LAUGH].\n\n13\n00:00:38.920 --> 00:00:40.030\n&gt;&gt; The needles just don't.\n\n14\n00:00:40.030 --> 00:00:43.360\nIt just doesn't make sense and\nI just end up with a giant knot.\n\n15\n00:00:43.360 --> 00:00:44.370\nCrazy stuff.\n\n16\n00:00:44.370 --> 00:00:48.690\nHowever, we are going to work with the\nstring data type so as I've been saying,\n\n17\n00:00:48.690 --> 00:00:50.300\nwe've skipped the surface.\n\n18\n00:00:50.300 --> 00:00:51.780\nWe've hit a little deeper and\n\n19\n00:00:51.780 --> 00:00:56.535\nnow we're We're gonna go for that final\ndeep dive on the string data type.\n\n20\n00:00:56.535 --> 00:01:00.915\nAgain, this is not everything there\nis to know, but we're getting close.\n\n21\n00:01:00.915 --> 00:01:01.716\nWe're getting close.\n\n22\n00:01:01.716 --> 00:01:02.805\n&gt;&gt; Here we go.\n\n23\n00:01:02.805 --> 00:01:03.415\n&gt;&gt; So.\n\n24\n00:01:03.415 --> 00:01:04.225\n&gt;&gt; Dive, dive, dive.\n\n25\n00:01:04.225 --> 00:01:05.535\n&gt;&gt; Yeah, dive, dive, dive.\n\n26\n00:01:05.535 --> 00:01:06.950\nI float really well.\n\n27\n00:01:06.950 --> 00:01:09.045\n&gt;&gt; [LAUGH]\n&gt;&gt; Can't dive, need lots of weight.\n\n28\n00:01:09.045 --> 00:01:09.710\nCrazy stuff.\n\n29\n00:01:09.710 --> 00:01:10.405\n&gt;&gt; [LAUGH]\n&gt;&gt; Now\n\n30\n00:01:11.730 --> 00:01:12.650\n&gt;&gt; Before we worry\n\n31\n00:01:12.650 --> 00:01:16.410\nabout working with strings within\nthe context of the JavaScript interpreter.\n\n32\n00:01:16.410 --> 00:01:18.760\nThe console that’s happening in Chrome.\n\n33\n00:01:18.760 --> 00:01:22.680\nLet’s take a step back and\nthink about what is a string actually,\n\n34\n00:01:22.680 --> 00:01:24.030\nI've been saying its text.\n\n35\n00:01:24.030 --> 00:01:29.590\nIt's like text on a page, but to the\ncomputer, it's kinda a collection, right?\n\n36\n00:01:29.590 --> 00:01:35.240\nI imagine it as like a clothes line,\nor even the balls\n\n37\n00:01:35.240 --> 00:01:40.640\nof popcorn that they put around ornamental\ndecorations at certain times of year.\n\n38\n00:01:40.640 --> 00:01:43.120\nSo, we clip those along, and\n\n39\n00:01:43.120 --> 00:01:47.290\na string is kinda strung together\nof individual letters, right?\n\n40\n00:01:47.290 --> 00:01:52.350\nIf I ask you how to spell your name,\nyou don't just say your name back at me.\n\n41\n00:01:52.350 --> 00:01:54.940\nYou tell me the individual letters, and\n\n42\n00:01:54.940 --> 00:01:58.630\nthat's how it's interpreted\nas a data type of strings.\n\n43\n00:01:58.630 --> 00:02:02.330\nIt is a collection of letters that\nare arranged in a particular order.\n\n44\n00:02:03.360 --> 00:02:06.760\nIn addition to,\nwe say the first letter of my name.\n\n45\n00:02:06.760 --> 00:02:09.920\nAnd my name, for instance, is Jay.\n\n46\n00:02:09.920 --> 00:02:14.420\nBut in computers, because of some\nbehind the scenes machinations,\n\n47\n00:02:14.420 --> 00:02:18.900\na lot of times those collections are,\nin fact, zero indexed.\n\n48\n00:02:18.900 --> 00:02:22.700\nAnd let's take a look at just not\nprogramming, but I'm gonna use comments\n\n49\n00:02:22.700 --> 00:02:28.030\nhere with an atom just to illustrate\nwhat I mean by this zero based indexing.\n\n50\n00:02:28.030 --> 00:02:28.980\nAnd I'm gonna use one of those\n\n51\n00:02:28.980 --> 00:02:31.039\nblock comments that we haven't seen for\na little while.\n\n52\n00:02:32.060 --> 00:02:34.910\nSo if I have the string abc\n\n53\n00:02:37.960 --> 00:02:43.780\nthat is in fact kind of\nthe first letter strung together\n\n54\n00:02:43.780 --> 00:02:46.780\nwith the second letter strung\ntogether with the third letter.\n\n55\n00:02:46.780 --> 00:02:51.930\nSo I would have a collection of a then\nb then c, of individual characters.\n\n56\n00:02:51.930 --> 00:02:54.740\nBut all together they\nmake up the word ABC.\n\n57\n00:02:54.740 --> 00:02:58.380\nNow there's another truer word, but\n\n58\n00:02:58.380 --> 00:03:01.640\nwe would say that A is the first\nletter in this collection.\n\n59\n00:03:01.640 --> 00:03:06.200\nAnd talking to any other\nperson if I were to tell\n\n60\n00:03:06.200 --> 00:03:09.430\nMike this was the first letter he'd\nbe like yeah that's the first letter.\n\n61\n00:03:09.430 --> 00:03:12.290\nHowever, to the computer,\nthis is the zeroth letter.\n\n62\n00:03:12.290 --> 00:03:14.220\nIt's the zeroth index letter.\n\n63\n00:03:14.220 --> 00:03:18.040\nAnd you'll see how those\nindexes come into play shortly.\n\n64\n00:03:18.040 --> 00:03:23.390\nAnd likewise,\nwe then discount forward as we always had.\n\n65\n00:03:23.390 --> 00:03:26.140\nWe just have to remember\nthat we start at zero, and\n\n66\n00:03:26.140 --> 00:03:30.350\nit's really an odd thing as people\nbecause we don't start counting at zero.\n\n67\n00:03:30.350 --> 00:03:36.650\nI have zero, one, two, three sheep,\nor popsicles, or candy bars.\n\n68\n00:03:36.650 --> 00:03:40.050\nWell, if you have zero you don't have any,\nso we don't think to count them.\n\n69\n00:03:40.050 --> 00:03:42.030\nSo kind of an odd paradigm.\n\n70\n00:03:42.030 --> 00:03:46.200\nBut because of how data's represented at\nthe machine level, at the programmatic\n\n71\n00:03:46.200 --> 00:03:50.480\nlevel, for things we don't really care\nabout at this point, we start at zero.\n\n72\n00:03:51.500 --> 00:03:53.630\nAll right, Justin we've been\nspending a lot of time on strings.\n\n73\n00:03:53.630 --> 00:03:56.390\nObviously they have some importance.\n\n74\n00:03:56.390 --> 00:03:57.780\n&gt;&gt; That they do Mike.\n\n75\n00:03:57.780 --> 00:04:01.940\nStrings why are they an important data\ntype for transferring information?\n\n76\n00:04:01.940 --> 00:04:06.510\nWell, we actually interact with the string\ndata type in a variety of contexts\n\n77\n00:04:06.510 --> 00:04:08.680\nwithout even thinking about it.\n\n78\n00:04:08.680 --> 00:04:12.340\nI sit down at my Word document or\nGoogle Docs and I'm typing away.\n\n79\n00:04:12.340 --> 00:04:14.910\nThose are in fact string representations.\n\n80\n00:04:14.910 --> 00:04:17.440\nOf that information,\nas far as the computer is concerned.\n\n81\n00:04:17.440 --> 00:04:20.700\nNow there's additional attributes\nassociated with those,\n\n82\n00:04:20.700 --> 00:04:25.390\nsuch as bold, italicized,\nhow big the text is.\n\n83\n00:04:25.390 --> 00:04:29.790\nBut, at the core,\nit is a string representation.It is text.\n\n84\n00:04:29.790 --> 00:04:35.080\nIn addition to all the webpages that you\nnavigate to our specially formated strings\n\n85\n00:04:35.080 --> 00:04:41.030\nbecause they're very easy to kind of chunk\napart, send across data, save, manipulate.\n\n86\n00:04:41.030 --> 00:04:45.330\nSo strings allow us this\ndata transfer layer\n\n87\n00:04:45.330 --> 00:04:48.350\nthat otherwise be\ndifficult to interact with.\n\n88\n00:04:49.350 --> 00:04:53.933\nSo how do we play with rally strings,\nwell lets, lets go back just for\n\n89\n00:04:53.933 --> 00:04:58.452\na moment about the creation of\nstrings because i've glossed over.\n\n90\n00:05:01.598 --> 00:05:03.150\nHow I've been making these strings.\n\n91\n00:05:03.150 --> 00:05:07.330\nSo my favorite color, right, is blue.\n\n92\n00:05:07.330 --> 00:05:09.440\nNow, I'm gonna take a step back,\n\n93\n00:05:09.440 --> 00:05:14.420\nnotice this is the first multi\nworded variable that I've had and\n\n94\n00:05:14.420 --> 00:05:17.200\nit has a very particular format and\nyou will see this from time to time.\n\n95\n00:05:17.200 --> 00:05:19.789\nThis is a convention within JavaScript.\n\n96\n00:05:20.950 --> 00:05:23.130\nAnd other C style languages.\n\n97\n00:05:23.130 --> 00:05:26.870\nBut also notice that I have\nsingle quotes here and\n\n98\n00:05:26.870 --> 00:05:29.300\nsingle quotes are purely because I'm lazy.\n\n99\n00:05:29.300 --> 00:05:32.830\nI don't have to hold the shift key with\nmy left hand while I hit the quotes\n\n100\n00:05:32.830 --> 00:05:34.200\nwith my right hand.\n\n101\n00:05:34.200 --> 00:05:38.520\nAnd if you type a lot and\nyou do this six-eight hours a day\n\n102\n00:05:38.520 --> 00:05:42.170\nholding shift with your left finger,\nwith your left pinky, can actually\n\n103\n00:05:42.170 --> 00:05:45.740\nbring a fair amount of fatigue if\nyou're typing a bunch of strings.\n\n104\n00:05:45.740 --> 00:05:50.250\nSo because JavaScript doesn't care whether\nit's double quotes or single quotes\n\n105\n00:05:50.250 --> 00:05:54.600\nas long as they're paired, just like\nyour shoes or your mittens if it's cold.\n\n106\n00:05:54.600 --> 00:05:58.400\nIt doesn't really matter to JavaScript.\n\n107\n00:05:58.400 --> 00:06:04.930\nSo if I say my favorite food is steak,\n\n108\n00:06:04.930 --> 00:06:10.410\nbut instead I put double\nquotes around this.\n\n109\n00:06:10.410 --> 00:06:15.440\nI end up with strings in other place.\n\n110\n00:06:15.440 --> 00:06:19.530\nNotice however if I have a mismatch,\na single on one end and\n\n111\n00:06:19.530 --> 00:06:24.520\na double on the other then my editor and\nthis wouldn't happen in normal text\n\n112\n00:06:24.520 --> 00:06:27.410\neditors, will actually say, hey,\nthere's something wrong here.\n\n113\n00:06:27.410 --> 00:06:28.080\nThis isn't valid.\n\n114\n00:06:28.080 --> 00:06:30.230\nYou shouldn't be doing this.\n\n115\n00:06:30.230 --> 00:06:35.530\nSo I always like to make sure they're\npaired and then type what I need to\n\n116\n00:06:35.530 --> 00:06:41.350\nThese are, in fact,\ncalled string literals.\n\n117\n00:06:41.350 --> 00:06:45.240\nThat's because these are literally\nstrings right here, I've defined them.\n\n118\n00:06:45.240 --> 00:06:49.990\nI have a variable called my favorite\ncolor, it has the value of a string with\n\n119\n00:06:49.990 --> 00:06:55.750\nblue as the text and then my favorite\nfood is double quoted steak but\n\n120\n00:06:55.750 --> 00:06:58.780\nin java script, completely the same.\n\n121\n00:06:58.780 --> 00:07:01.870\nThat is not true for\nsome other programming languages.\n\n122\n00:07:01.870 --> 00:07:07.070\nSo be careful if you're kind of exploring\nother realms of programming languages.\n\n123\n00:07:07.070 --> 00:07:10.380\nNow in addition to,\nwe've seen other ways to create strings.\n\n124\n00:07:11.680 --> 00:07:14.670\nAnd that's using the string built-ins.\n\n125\n00:07:14.670 --> 00:07:22.933\nSo if we take a look at how to\nuse those my favourite number and\n\n126\n00:07:22.933 --> 00:07:27.066\n42 national reference, so\n\n127\n00:07:27.066 --> 00:07:32.521\nmy favourite number if I take the string\n\n128\n00:07:32.521 --> 00:07:37.175\n42 and also my favourite object\n\n129\n00:07:40.552 --> 00:07:44.160\nAnd I'm just gonna, remember paired curly\nbraces, it's important, gotta pair stuff.\n\n130\n00:07:45.170 --> 00:07:47.020\nYou always need pairs.\n\n131\n00:07:47.020 --> 00:07:48.970\nOpen, close, left, right.\n\n132\n00:07:50.260 --> 00:07:51.940\nSo I have all of these.\n\n133\n00:07:51.940 --> 00:07:54.458\nLet's see how these print out.\n\n134\n00:07:54.458 --> 00:08:00.059\nSo my favorite color, and\nthen my favorite food.\n\n135\n00:08:02.077 --> 00:08:08.920\nAnd my favorite number and\nmy favorite object.\n\n136\n00:08:08.920 --> 00:08:14.674\nNow, I know because these\nare using the string built-ins.\n\n137\n00:08:14.674 --> 00:08:17.802\nBuilt-in, not built-ins.\n\n138\n00:08:17.802 --> 00:08:19.392\nThere's one.\n\n139\n00:08:19.392 --> 00:08:22.150\nThat all of these should\nbe of type string.\n\n140\n00:08:22.150 --> 00:08:24.710\nSo, I'm not gonna use the type\nof operator to confirm that.\n\n141\n00:08:24.710 --> 00:08:26.610\nI know that I'm using quotes here.\n\n142\n00:08:26.610 --> 00:08:27.570\nThese are string literals.\n\n143\n00:08:27.570 --> 00:08:28.470\nI have a string.\n\n144\n00:08:28.470 --> 00:08:33.890\nI'm also using the string function built\ninto JavaScript, in order to make this.\n\n145\n00:08:33.890 --> 00:08:36.590\nBut we're gonna find a surprising result.\n\n146\n00:08:36.590 --> 00:08:41.680\nSo I expect blue stake 42 and\nthen open and close curly breaks.\n\n147\n00:08:41.680 --> 00:08:46.599\nWell, I actually have blue state 42 and\n\n148\n00:08:46.599 --> 00:08:50.410\nthen this weird object object.\n\n149\n00:08:50.410 --> 00:08:55.700\nSo you have to be careful sometimes\nthe string built-ins provide you with\n\n150\n00:08:55.700 --> 00:08:56.790\nnot a lot of detail.\n\n151\n00:08:56.790 --> 00:09:01.170\nBut it's in fact the closest\nstring approximation you can get\n\n152\n00:09:01.170 --> 00:09:03.130\nto these data types.\n\n153\n00:09:03.130 --> 00:09:04.990\nSo object object.\n\n154\n00:09:04.990 --> 00:09:08.160\nArray will also do things like this as\n\n155\n00:09:08.160 --> 00:09:10.380\nthat array type that\nwe touched on briefly.\n\n156\n00:09:10.380 --> 00:09:11.080\nWe'll see more.\n\n157\n00:09:12.510 --> 00:09:15.170\nWe have to be careful about\nthe string representation\n\n158\n00:09:15.170 --> 00:09:17.430\nif we're doing this explicit conversion.\n\n159\n00:09:17.430 --> 00:09:19.800\nSo, I like to stay with string literals,\nso\n\n160\n00:09:19.800 --> 00:09:24.305\nas a matter of choice, whoa was about\nto get crazy there for a second.\n\n161\n00:09:24.305 --> 00:09:27.860\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm gonna comment these out,\n\n162\n00:09:27.860 --> 00:09:31.840\nand then just uncomment these couple\nof lines here, not this line,\n\n163\n00:09:31.840 --> 00:09:35.130\nthis line,\nbecause I want to keep that around.\n\n164\n00:09:35.130 --> 00:09:38.220\nSo, I have a couple of\nwords represented and\n\n165\n00:09:38.220 --> 00:09:40.590\nthen I have a number\nrepresented as a string.\n\n166\n00:09:42.480 --> 00:09:48.120\nAnd to add for some overflow here\nI'm gonna add a comment down here so\n\n167\n00:09:48.120 --> 00:09:50.220\nI don't have that weird cutoff.\n\n168\n00:09:50.220 --> 00:09:55.150\nSave, and here we go.\n\n169\n00:09:55.150 --> 00:09:57.395\nSo how can I manipulate strings?\n\n170\n00:09:57.395 --> 00:10:01.170\nWell, as I've all ready said we\nhave a string of characters and\n\n171\n00:10:01.170 --> 00:10:03.470\nthere is a couple of ways\nthat i can get add those.\n\n172\n00:10:03.470 --> 00:10:07.860\nThere is something called brackets\nsyntax and let's see how that works.\n\n173\n00:10:07.860 --> 00:10:12.386\nSo if I log my favorite color\nI'm starting to think maybe I\n\n174\n00:10:12.386 --> 00:10:15.230\nshould have chosen smaller names.\n\n175\n00:10:15.230 --> 00:10:21.400\nEven when my code completion it's a little\niffy sometimes so please bear with me.\n\n176\n00:10:21.400 --> 00:10:26.890\nI'm gonna actually type a square bracket\nand then a closed square bracket.\n\n177\n00:10:26.890 --> 00:10:29.910\nNotice they're in pairs.\n\n178\n00:10:29.910 --> 00:10:35.140\nAnd they are also the same keys\nthat the curly braces come within.\n\n179\n00:10:35.140 --> 00:10:38.720\nSo when I say bracket I typically\nmean the square brackets.\n\n180\n00:10:38.720 --> 00:10:43.520\nSo myFavoriteColor, and right after that,\nI'm going to type, I dunno, 2.\n\n181\n00:10:43.520 --> 00:10:47.090\nAnd we have to be careful, because\n\n182\n00:10:47.090 --> 00:10:52.120\nwe have to make sure that this number has\nan appropriate matching piece, right?\n\n183\n00:10:52.120 --> 00:10:57.040\nSo if I go to myFavoriteColor and I look\nat blue, I have to start counting at zero.\n\n184\n00:10:57.040 --> 00:11:01.160\nThis is zero, one, two.\n\n185\n00:11:01.160 --> 00:11:05.140\nIf I've done everything correctly\nthen I should get the letter u.\n\n186\n00:11:05.140 --> 00:11:07.980\nLet's see if I've accessed that correctly.\n\n187\n00:11:07.980 --> 00:11:12.190\nAnd I in fact have just\nplucked out the letter u.\n\n188\n00:11:12.190 --> 00:11:16.935\nNow I wonder, since I've plucked out\na character, what kind of information,\n\n189\n00:11:16.935 --> 00:11:20.540\nhow's that information\nrepresented to JavaScript?\n\n190\n00:11:20.540 --> 00:11:22.610\nWell, a little throwback.\n\n191\n00:11:24.250 --> 00:11:28.360\nLet's make sure we're,\neverything's working as we expect it to.\n\n192\n00:11:29.380 --> 00:11:31.060\nIt is in fact also a string.\n\n193\n00:11:31.060 --> 00:11:35.250\nSo those square brackets\nwill pluck out a piece,\n\n194\n00:11:35.250 --> 00:11:38.530\nnamely one character, and\ngive it back to you as a string.\n\n195\n00:11:38.530 --> 00:11:42.290\nSo that's a way to look for\ncharacters within a string.\n\n196\n00:11:42.290 --> 00:11:44.190\nNow, that's not the only way.\n\n197\n00:11:44.190 --> 00:11:48.930\nBut I have a real hard time\nmemorizing all these things.\n\n198\n00:11:48.930 --> 00:11:52.948\nWhere do you go for documentation?\n\n199\n00:11:52.948 --> 00:11:54.460\nFor, I can't remember and\n\n200\n00:11:54.460 --> 00:11:58.610\nI don't recommend that you try to\nmemorize everything about JavaScript.\n\n201\n00:11:58.610 --> 00:11:59.190\nWhere do I go?\n\n202\n00:11:59.190 --> 00:12:03.690\nAs we've seen, I particularly\nlike Mozilla Developer Network.\n\n203\n00:12:06.250 --> 00:12:10.220\nNow when I'm searching on Google,\na lot of times I'll type JavaScript and\n\n204\n00:12:10.220 --> 00:12:12.580\nthen the particular thing that I want.\n\n205\n00:12:12.580 --> 00:12:15.528\nSo I want a string and\n\n206\n00:12:15.528 --> 00:12:21.070\nGoogle's really good at searching this or\nBing or any other search engine.\n\n207\n00:12:21.070 --> 00:12:25.610\nMost of them have what's\ncalled MDN index very well so\n\n208\n00:12:25.610 --> 00:12:30.380\nI can quickly just go, ha, here's\neverything I wanna know about a string.\n\n209\n00:12:31.610 --> 00:12:36.360\nSo these are the literal forms and then\nthese are the globally created objects.\n\n210\n00:12:36.360 --> 00:12:39.460\nNow, we'll get back to\nthat global thing later.\n\n211\n00:12:39.460 --> 00:12:42.610\nAnd It talks about some new features.\n\n212\n00:12:42.610 --> 00:12:46.680\nI will forewarn you, we're focused\non the subset of ECMAScript 5,\n\n213\n00:12:46.680 --> 00:12:49.260\nwhich has been around for a long time.\n\n214\n00:12:49.260 --> 00:12:50.410\nYou should really know that.\n\n215\n00:12:50.410 --> 00:12:55.500\nThere are some new feature coming online,\nas the language of JavaScript develops,\n\n216\n00:12:55.500 --> 00:12:57.455\nthat will be in these documentations.\n\n217\n00:12:57.455 --> 00:13:01.820\nI try to point that out, because not all\nbrowsers are currently treating those\n\n218\n00:13:01.820 --> 00:13:08.818\nthe same as the browsers try to keep\nup with the changes in the language.\n\n219\n00:13:08.818 --> 00:13:10.950\nNow talks about long literal strings, but\n\n220\n00:13:10.950 --> 00:13:15.880\nwe wanna get down here to a-ha,\nproperties and methods.\n\n221\n00:13:15.880 --> 00:13:23.660\nMethods, those are like behaviors or\nactions that a particular thing can take.\n\n222\n00:13:23.660 --> 00:13:26.340\nThese are all string actions.\n\n223\n00:13:26.340 --> 00:13:31.030\nSo from char code, raw, if I keep going,\n\n224\n00:13:31.030 --> 00:13:34.320\nthere's also some other\nmethods unrelated to HTML.\n\n225\n00:13:34.320 --> 00:13:39.210\nSo some of them are specific in\nJavaScript just for web pages but,\n\n226\n00:13:39.210 --> 00:13:40.649\nhere's a string prototype.\n\n227\n00:13:42.120 --> 00:13:44.030\nPrototypes, crazy stuff.\n\n228\n00:13:44.030 --> 00:13:46.950\nThat's an advanced topic\nwe're gonna have to wait for.\n\n229\n00:13:46.950 --> 00:13:47.854\nKind of, woo.\n\n230\n00:13:47.854 --> 00:13:51.570\n&gt;&gt; [LAUGH]\n&gt;&gt; Gotta keep on keeping on.\n\n231\n00:13:51.570 --> 00:13:55.170\nBut know that the prototype and\nproperties and\n\n232\n00:13:55.170 --> 00:14:00.760\nmethods are going to be available to\nany string object within JavaScript\n\n233\n00:14:00.760 --> 00:14:05.210\nunless somebody's done something really\nbad, that they shouldn't be doing.\n\n234\n00:14:05.210 --> 00:14:08.100\nBut we saw how to plug a single character.\n\n235\n00:14:08.100 --> 00:14:09.740\nIf I run through all of these,\n\n236\n00:14:09.740 --> 00:14:14.190\nI can actually see charAt returns\nthe character at a specified index.\n\n237\n00:14:15.255 --> 00:14:17.750\nThat's kinda like what we just did.\n\n238\n00:14:17.750 --> 00:14:22.820\nAnd to confirm that method works\nthe same I gonna hop back over here.\n\n239\n00:14:22.820 --> 00:14:30.520\nJust comment out this type of, duplicate\nthis line, and typically how methods work\n\n240\n00:14:30.520 --> 00:14:35.640\nare I have this thing this object and\nstring is technically a thing.\n\n241\n00:14:35.640 --> 00:14:40.315\nAnd I say dot and\nI'm saying do this action,\n\n242\n00:14:40.315 --> 00:14:45.270\nperform this action ,so charAt and\n\n243\n00:14:45.270 --> 00:14:47.770\nnotice how that changes in\ncolor within my editor.\n\n244\n00:14:48.780 --> 00:14:51.520\nThat's why I love rich text editors.\n\n245\n00:14:51.520 --> 00:14:55.890\nIt gives me some validation that I'm kind\nof doing what I'm supposed to be doing.\n\n246\n00:14:55.890 --> 00:15:01.090\nAnd so if put a two here I should\nget the same result because\n\n247\n00:15:01.090 --> 00:15:03.038\nwhat I've seen here is that\nplucked out that letter.\n\n248\n00:15:03.038 --> 00:15:07.920\nWell the charAt, index two,\nand that's the word, blue 012,\n\n249\n00:15:07.920 --> 00:15:11.470\nshould be u, so let's see if I'm right.\n\n250\n00:15:13.560 --> 00:15:19.730\nAnd in fact, charAt gives me the same\nresult as the square brackets.\n\n251\n00:15:21.390 --> 00:15:25.910\nSo, there are some common methods\nthat I find incredibly helpful\n\n252\n00:15:25.910 --> 00:15:29.970\nwhen you start programming in JavaScript\nand kinda stay around for a while.\n\n253\n00:15:29.970 --> 00:15:31.380\nWe're not gonna cover all of them.\n\n254\n00:15:31.380 --> 00:15:34.840\nI recommend you take a look at\nMozilla Developer Network for\n\n255\n00:15:34.840 --> 00:15:36.620\nmore complete documentation.\n\n256\n00:15:36.620 --> 00:15:38.480\n&gt;&gt; Is there any advantage\nto one over the other?\n\n257\n00:15:38.480 --> 00:15:43.080\nI mean it seems that the first one is\nactually less typing than the second one,\n\n258\n00:15:43.080 --> 00:15:43.900\nsame results.\n\n259\n00:15:43.900 --> 00:15:47.200\nIs there, would you use one in\none place and one in the other?\n\n260\n00:15:47.200 --> 00:15:48.850\n&gt;&gt; So that's a great question and\n\n261\n00:15:48.850 --> 00:15:53.410\nprobably what's happened is behind\nthe scenes the square bracket notation is.\n\n262\n00:15:53.410 --> 00:15:54.712\n&gt;&gt; An alias for the prototype where at.\n\n263\n00:15:54.712 --> 00:15:57.265\n&gt;&gt; Possibly,\nI don't know that for sure, but\n\n264\n00:15:57.265 --> 00:16:00.449\nI've seen that in some other\nprogramming languages.\n\n265\n00:16:00.449 --> 00:16:04.819\nIn addition to the square brackets and\nif you're doing something called chaining,\n\n266\n00:16:04.819 --> 00:16:07.958\nwhich you're kinda doing a bunch\nof operations on a string,\n\n267\n00:16:07.958 --> 00:16:12.079\nthe square brackets sometimes make it a\nlittle more difficult to get all of those\n\n268\n00:16:12.079 --> 00:16:14.069\noperations kinda bundled together.\n\n269\n00:16:14.069 --> 00:16:17.900\nSo it depends on what you need to happen.\n\n270\n00:16:17.900 --> 00:16:23.066\nWhat I've found, I tend to use\nthe charAt methods like the dot methods,\n\n271\n00:16:23.066 --> 00:16:25.840\nmore so in JavaScript.\n\n272\n00:16:25.840 --> 00:16:32.140\nJust because they provide me more\ncontrol over what I'm doing.\n\n273\n00:16:32.140 --> 00:16:36.478\nIf I always need to look at the first\ncharacter of a letter as i am filtering\n\n274\n00:16:36.478 --> 00:16:39.300\nthrough, then the square\nbrackets are perfectly fine.\n\n275\n00:16:39.300 --> 00:16:42.984\nAnd I'm gonna say square bracket zero and\njust [SOUND] run through and\n\n276\n00:16:42.984 --> 00:16:47.520\nlook at every line of the page or set of\ndata, but great question, great question.\n\n277\n00:16:47.520 --> 00:16:53.000\nSo what are some common things\nthat I should know about strings?\n\n278\n00:16:53.000 --> 00:16:58.070\nWell, we kinda alluded to this,\nI said we gotta make sure this\n\n279\n00:16:58.070 --> 00:17:03.550\nnumber lies within\nthe context of the string.\n\n280\n00:17:03.550 --> 00:17:05.470\nWell I said zero, one, two.\n\n281\n00:17:05.470 --> 00:17:09.720\nWell, that's nice, but how could I just\nprogramatically get that information?\n\n282\n00:17:11.180 --> 00:17:13.670\nWell, I can actually get\nthe length property.\n\n283\n00:17:16.088 --> 00:17:17.550\nCan't type.\n&gt;&gt; [LAUGH]\n\n284\n00:17:17.550 --> 00:17:19.880\n&gt;&gt; The length property will actually\n\n285\n00:17:19.880 --> 00:17:24.865\nreturn me how many characters\nare contained in the string of characters.\n\n286\n00:17:24.865 --> 00:17:31.273\nSo if I log, let's go with a different\none, myFavoriteFood.length,\n\n287\n00:17:31.273 --> 00:17:37.140\nand notice that that does not have\nparentheses like this charAt.\n\n288\n00:17:37.140 --> 00:17:40.910\nAnd actually does not have the same\ncolor as the charAt method.\n\n289\n00:17:42.170 --> 00:17:43.440\nThis is a property.\n\n290\n00:17:43.440 --> 00:17:46.800\nThere's no parentheses,\nit's not an action, it is just the being.\n\n291\n00:17:46.800 --> 00:17:48.790\nFor instance, I have a red beard.\n\n292\n00:17:48.790 --> 00:17:50.640\nThat is a property of me.\n\n293\n00:17:50.640 --> 00:17:54.010\nSomeone's not going grow a beard.\n\n294\n00:17:54.010 --> 00:17:57.939\nWell that would be kind of hard, kind of\ncraz,y if I could just grow a beard but\n\n295\n00:17:57.939 --> 00:17:59.637\nyou never know, you never know.\n\n296\n00:17:59.637 --> 00:18:00.805\n&gt;&gt; [LAUGH]\n&gt;&gt; So properties do\n\n297\n00:18:00.805 --> 00:18:04.610\nnot have parentheses because they're\nnot actions to be taken by the object.\n\n298\n00:18:05.960 --> 00:18:10.450\nWhereas, actions have parentheses because\nyou're telling them to do something or\n\n299\n00:18:10.450 --> 00:18:12.200\ntry to accomplish some task.\n\n300\n00:18:12.200 --> 00:18:17.569\nSo, let's see what\nmyFavoriteFood.length produces for me.\n\n301\n00:18:19.309 --> 00:18:21.760\nAnd that actually returns me a number.\n\n302\n00:18:21.760 --> 00:18:25.030\nNotice it's blue,\nas we've seen most number tags.\n\n303\n00:18:25.030 --> 00:18:30.611\nAnd if I count one, two, three,\nfour, five, that is five characters.\n\n304\n00:18:30.611 --> 00:18:35.784\nHowever, this will give me some\nweird offset because computer\n\n305\n00:18:35.784 --> 00:18:42.437\nstart counting at 0 and in fact,\nthat would be zero, one, two, three, four.\n\n306\n00:18:42.437 --> 00:18:48.290\nSo, the length is always gonna be one\nmore than the highest possible index or\n\n307\n00:18:48.290 --> 00:18:50.860\nthe highest possible position.\n\n308\n00:18:52.130 --> 00:18:56.140\nSo you got to be careful about that\nbecause it's another one of those errors,\n\n309\n00:18:56.140 --> 00:18:58.020\nthose off by one errors.\n\n310\n00:18:58.020 --> 00:19:01.360\nWith the last character, you tell it\nto find it at the length, and it goes,\n\n311\n00:19:01.360 --> 00:19:03.500\nI don't know what you're talking about.\n\n312\n00:19:03.500 --> 00:19:04.940\n&gt;&gt; So you got to make sure\nyou go to length minus one.\n\n313\n00:19:04.940 --> 00:19:06.050\n&gt;&gt; Yeah, length minus one.\n\n314\n00:19:06.050 --> 00:19:08.140\nYou will see that all over the place.\n\n315\n00:19:08.140 --> 00:19:10.996\nIt's so very, very common.\n\n316\n00:19:10.996 --> 00:19:15.880\nNow, that is predominantly\nthe most important property that\n\n317\n00:19:15.880 --> 00:19:18.580\nyou should care about for\nstrings, for now.\n\n318\n00:19:18.580 --> 00:19:22.140\nNow, we looked at charAt and the brackets.\n\n319\n00:19:22.140 --> 00:19:25.990\nThere are some other ways\nto grab characters, but\n\n320\n00:19:25.990 --> 00:19:29.916\nnot only single characters, but\nactually chunks of characters.\n\n321\n00:19:29.916 --> 00:19:32.480\nWell, let's see here.\n\n322\n00:19:34.600 --> 00:19:39.450\nI'm going to look at my favorite food,\nagain.\n\n323\n00:19:39.450 --> 00:19:43.970\nAgain, Mike, I'm pretty sure I should\nhave chosen smaller method, and\n\n324\n00:19:43.970 --> 00:19:44.730\nsmaller variable names.\n\n325\n00:19:44.730 --> 00:19:48.080\n&gt;&gt; Well, I see, the problem is\nthat the first 15 characters, for\n\n326\n00:19:48.080 --> 00:19:51.140\nall of them are the same, so it's not\ngonna differentiate until you get way\n\n327\n00:19:51.140 --> 00:19:51.910\nin there\n&gt;&gt; Yeah.\n\n328\n00:19:51.910 --> 00:19:54.660\n&gt;&gt; At that point you might as\nwell type the whole thing.\n\n329\n00:19:54.660 --> 00:19:55.662\n&gt;&gt; Yeah, yeah.\n&gt;&gt; [LAUGH]\n\n330\n00:19:55.662 --> 00:19:56.829\n&gt;&gt; Now, with that said,\n\n331\n00:19:56.829 --> 00:20:00.840\nif you come back to read this later,\nthe variable name does provide context\n\n332\n00:20:02.490 --> 00:20:07.920\neven though it is hard to keep typing\nthe same thing over and over again.\n\n333\n00:20:07.920 --> 00:20:12.000\nI recommend, not sentences upon sentences\nof variable names that are just a bunch of\n\n334\n00:20:12.000 --> 00:20:15.750\ncapital letters to separate\nthe additional words.\n\n335\n00:20:15.750 --> 00:20:18.790\nBut if your variable\nnames can provide context\n\n336\n00:20:18.790 --> 00:20:23.090\nthat's incredibly important when you go\nback to read your code or someone elses.\n\n337\n00:20:23.090 --> 00:20:26.810\nIf you read my code, you go, this string\nis representing his favorite food,\n\n338\n00:20:26.810 --> 00:20:28.520\nor my favorite number.\n\n339\n00:20:28.520 --> 00:20:32.420\nSo pick variable names that\nare fairly concise yet descriptive.\n\n340\n00:20:32.420 --> 00:20:36.940\nAnd that's what I've done here, just so,\nI don't have to always scroll back up and\n\n341\n00:20:36.940 --> 00:20:40.410\ngo, now what was nx, yeah it's 7.\n\n342\n00:20:40.410 --> 00:20:46.420\nSo, I know from context\nwhat this is gonna contain.\n\n343\n00:20:46.420 --> 00:20:49.510\nNow, what is,\nI need to grab these chunk of characters.\n\n344\n00:20:50.620 --> 00:20:55.590\nI like to show these because these\nare a little bit different in usage.\n\n345\n00:20:55.590 --> 00:21:02.650\nThere is substr and\nthere is also substring.\n\n346\n00:21:03.820 --> 00:21:06.910\nAnd if we go and\nread from the Mozilla developer\n\n347\n00:21:06.910 --> 00:21:11.360\nnetworks, I get a description of both.\n\n348\n00:21:11.360 --> 00:21:14.910\nReturns the character in a string\nbeginning at the specified location,\n\n349\n00:21:14.910 --> 00:21:17.180\nthrough the specified\nnumber of characters.\n\n350\n00:21:17.180 --> 00:21:19.890\nBut substring gets me from index to index.\n\n351\n00:21:19.890 --> 00:21:23.770\nSo that's kind of interesting,\nwhy would I need one or the other?\n\n352\n00:21:23.770 --> 00:21:28.370\nWell if I need the first three characters\nstarting at character three, I don't have\n\n353\n00:21:28.370 --> 00:21:34.090\nto go okay count over three, get three to\nthis number and calculate the numbers.\n\n354\n00:21:34.090 --> 00:21:38.420\nI can actually just say, start at this\nnumber and give me x number of characters.\n\n355\n00:21:38.420 --> 00:21:42.410\nSo there's some helper, these are what\nI like to think of as helper methods.\n\n356\n00:21:42.410 --> 00:21:46.480\nBut you have to be careful because\nthese are very similar in name,\n\n357\n00:21:46.480 --> 00:21:50.148\nsubstr versus substring,\nor substr, or sub S-T-R,\n\n358\n00:21:50.148 --> 00:21:55.700\nI don't know the appropriate\npronunciation of this shortened one.\n\n359\n00:21:55.700 --> 00:22:00.240\nSo let's see, if I start at character 1,\nand I want the next two characters.\n\n360\n00:22:01.340 --> 00:22:04.289\nGive me the first two characters.\n\n361\n00:22:06.754 --> 00:22:08.260\nAt 1.\n\n362\n00:22:08.260 --> 00:22:12.680\nAnd what I mean here is te.\n\n363\n00:22:12.680 --> 00:22:19.830\nWell, if I look at steak, I go 0, 1, and\nthen I get 2 characters starting at 1.\n\n364\n00:22:19.830 --> 00:22:23.256\nAll right, well, that's pretty.\n\n365\n00:22:23.256 --> 00:22:27.443\nLet's see if we can get the same 2\ncharacters using the sub string method.\n\n366\n00:22:27.443 --> 00:22:32.060\nWell, I start at one, in both of those\nmethods they're going to be the same.\n\n367\n00:22:32.060 --> 00:22:37.650\nWhere am I starting, comma and\nthen how do I get t, e?\n\n368\n00:22:37.650 --> 00:22:42.785\nWell, that would be one, two and\nyou'll say you go from one to two.\n\n369\n00:22:42.785 --> 00:22:44.260\n&gt;&gt; [LAUGH]\n&gt;&gt; Well,\n\n370\n00:22:44.260 --> 00:22:48.360\nlet's see if we're right because,\nwhy would I need one or the other?\n\n371\n00:22:48.360 --> 00:22:49.740\nThat's kind of crazy.\n\n372\n00:22:49.740 --> 00:22:54.060\nIf you refresh, you'll notice\nthis just gives me the t back\n\n373\n00:22:55.080 --> 00:22:59.960\nbecause in the sub string method\nthe right hand side is exclusive.\n\n374\n00:22:59.960 --> 00:23:05.289\nIt does not include the last index,\nso you have to overrun it by one.\n\n375\n00:23:05.289 --> 00:23:08.584\nProgramming, gotta love it, it's crazy.\n\n376\n00:23:08.584 --> 00:23:10.978\n&gt;&gt; [LAUGH]\n&gt;&gt; So if we want those to be the same we\n\n377\n00:23:10.978 --> 00:23:14.341\nhave to over run by one on\nthe substring method but\n\n378\n00:23:14.341 --> 00:23:18.290\nat the subster we can just say\nstart at one and give me two.\n\n379\n00:23:18.290 --> 00:23:21.870\nSo again, this is probably another one\nof those times when you have an alias\n\n380\n00:23:22.940 --> 00:23:25.750\nsubstituting in for one or the other, so.\n\n381\n00:23:25.750 --> 00:23:31.140\nThen I can grab chunks of\ncharacters using charAt brackets,\n\n382\n00:23:31.140 --> 00:23:32.550\nor the two sub string methods.\n\n383\n00:23:33.910 --> 00:23:36.580\n&gt;&gt; All right Jess and\na lot of great information on strings.\n\n384\n00:23:36.580 --> 00:23:39.970\nVery important part of\nworking with JavaScript.\n\n385\n00:23:39.970 --> 00:23:43.790\nLove those examples you gave us, but\nunfortunately we're out of time for\n\n386\n00:23:43.790 --> 00:23:44.712\nthis particular episode.\n\n387\n00:23:44.712 --> 00:23:46.790\nMeans we have to come\nback with the part two,\n\n388\n00:23:46.790 --> 00:23:50.790\nbecause there is still more to discuss\nwhen it comes to working with strings.\n\n389\n00:23:50.790 --> 00:23:53.860\nSo again, thank you for\nall of those great demonstrations.\n\n390\n00:23:53.860 --> 00:23:56.020\nHope everybody out there\nenjoyed watching this one.\n\n391\n00:23:56.020 --> 00:23:59.130\nSigning off for IT Pro TV,\nI've been your host Mike Roderick.\n\n392\n00:23:59.130 --> 00:23:59.665\n&gt;&gt; And I'm Justin.\n\n393\n00:23:59.665 --> 00:24:01.236\n&gt;&gt; And we'll see you next time.\n\n394\n00:24:01.236 --> 00:24:09.148\n[MUSIC]\n\n395\n00:24:09.148 --> 00:24:13.340\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "202076065"
        },
        {
          "description": "In this episode, Justin and Mike continue their look into strings. They demonstrate several functions used to manipulate strings. They also look at using operators with strings.",
          "length": "1451",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-2-types_of_data_pt_2-020117-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-2-types_of_data_pt_2-020117-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-4-1-2-types_of_data_pt_2-020117-1-sm.jpg",
          "title": "Working with Strings Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:05.545\nWelcome to ITProTV, I'm your host,\n\n2\n00:00:05.545 --> 00:00:11.870\nDon Pezet [CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n3\n00:00:11.870 --> 00:00:15.004\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n4\n00:00:15.004 --> 00:00:17.059\nI'm your host, Mike Rodrick, and\n\n5\n00:00:17.059 --> 00:00:20.760\ntoday we're doing our\nintroduction to JavaScript.\n\n6\n00:00:20.760 --> 00:00:22.879\nIn this episode, we're gonna be\ncontinuing our thought process.\n\n7\n00:00:22.879 --> 00:00:26.620\nThis is actually a part two\nin working with strings.\n\n8\n00:00:26.620 --> 00:00:29.270\nSo if you missed that first episode,\nmake sure you go back and\n\n9\n00:00:29.270 --> 00:00:31.210\nwatch that in the course library.\n\n10\n00:00:31.210 --> 00:00:32.670\nAnd here to continue again,\n\n11\n00:00:32.670 --> 00:00:35.430\nworking with strings and\nexplaining to us different operators and\n\n12\n00:00:35.430 --> 00:00:40.110\nhow we can manipulate these strings,\nis the one and only Mr Justin Dennison.\n\n13\n00:00:40.110 --> 00:00:40.990\nWelcome back, Justin.\n\n14\n00:00:40.990 --> 00:00:42.482\n&gt;&gt; Thanks for having me back, Mike.\n\n15\n00:00:42.482 --> 00:00:46.190\nYou know, we left off with strings and\nwe're not quite finished.\n\n16\n00:00:46.190 --> 00:00:49.520\nWe need that little push over the edge.\n\n17\n00:00:49.520 --> 00:00:53.640\nSo I think we just need to dive\nright back in to where we left off.\n\n18\n00:00:53.640 --> 00:00:58.790\nJust a quick reminder of what happened\nlast time, and then continue moving on.\n\n19\n00:00:58.790 --> 00:01:02.480\nSo if you remember,\nwe were in a Mozilla Developer Network.\n\n20\n00:01:02.480 --> 00:01:03.950\nWe were looking at documentation,\n\n21\n00:01:03.950 --> 00:01:06.490\nwe were seeing a couple of those\nmethods that we could use.\n\n22\n00:01:06.490 --> 00:01:11.240\nI do wanna go back to Mozilla Developer\nNetwork real quick before we get started.\n\n23\n00:01:11.240 --> 00:01:15.420\nAnd look at these,\nwhat are called Methods and Properties.\n\n24\n00:01:15.420 --> 00:01:17.870\nSo on the right they always give you\n\n25\n00:01:17.870 --> 00:01:19.819\nlinks that you can quickly\njump through the page.\n\n26\n00:01:21.200 --> 00:01:24.270\nI said last time that the language\nof JavaScript is kind of\n\n27\n00:01:24.270 --> 00:01:26.310\nundergoing transformation right now.\n\n28\n00:01:26.310 --> 00:01:28.970\nWe're focused on the syntax and\n\n29\n00:01:28.970 --> 00:01:31.580\nall of the operations that\nhave been around for a while.\n\n30\n00:01:31.580 --> 00:01:36.700\nI would be very careful if you decide,\nfor instance, to use includes.\n\n31\n00:01:36.700 --> 00:01:41.200\nIncludes, if you scroll down to the\nbottom, I've clicked the includes method.\n\n32\n00:01:41.200 --> 00:01:45.541\nYou'll see that this ECMAScript 2015,\n6th Edition.\n\n33\n00:01:45.541 --> 00:01:47.306\nThat's actually the new version.\n\n34\n00:01:47.306 --> 00:01:51.852\nAnd you have to be careful because not\nall browser are always up to snuff with\n\n35\n00:01:51.852 --> 00:01:56.150\neverything in ECMAScript 2016,\nor also known as ES6.\n\n36\n00:01:56.150 --> 00:02:00.320\nSo we're gonna leave those out and\ngo with what's been around for while.\n\n37\n00:02:01.550 --> 00:02:02.780\n&gt;&gt; Sounds like a good plan.\n\n38\n00:02:02.780 --> 00:02:06.470\nIs that something you do in\na typical development environment?\n\n39\n00:02:06.470 --> 00:02:09.364\nDo you try to code for both and\nthen figure out if it's supported?\n\n40\n00:02:09.364 --> 00:02:12.750\nOr do you just leave out some of that\nstuff until you know it's supported\n\n41\n00:02:12.750 --> 00:02:14.230\na little more widely?\n\n42\n00:02:14.230 --> 00:02:16.440\n&gt;&gt; So\nthere's a couple of things that you can,\n\n43\n00:02:16.440 --> 00:02:19.080\nkind of approaches that you can go for.\n\n44\n00:02:19.080 --> 00:02:22.560\nThat is, use the old syntax that\nyou know is very well supported.\n\n45\n00:02:22.560 --> 00:02:26.490\nAnd then use new syntax as it becomes\navailable to help with clean-up.\n\n46\n00:02:26.490 --> 00:02:29.050\nBecause part of the push for\nthese new syntax and\n\n47\n00:02:29.050 --> 00:02:33.270\nthese new constructs are kind of\ncleanness of code, readability.\n\n48\n00:02:34.290 --> 00:02:38.250\nMaybe some performance adjustments,\nas well as just ease.\n\n49\n00:02:38.250 --> 00:02:39.636\nSo there's some helper methods,\n\n50\n00:02:39.636 --> 00:02:41.991\nlike the includes with strings\nthat hasn't been around.\n\n51\n00:02:41.991 --> 00:02:45.200\nI want to know if this string\nincludes a number, or excuse me,\n\n52\n00:02:45.200 --> 00:02:49.180\na letter, a number or a series of letters\nand numbers in a particular order.\n\n53\n00:02:49.180 --> 00:02:50.392\nI just want to know if it's there.\n\n54\n00:02:50.392 --> 00:02:54.400\nWell that hasn't been around, so\nI've had to write that myself.\n\n55\n00:02:54.400 --> 00:02:58.830\nWell, with ES6, I can just use them.\n\n56\n00:02:58.830 --> 00:03:02.410\nI can go back, refactor that out,\nremove the extraneous code and\n\n57\n00:03:02.410 --> 00:03:04.220\nit's a little easier to read.\n\n58\n00:03:04.220 --> 00:03:06.690\nSo in addition to, you gotta be careful,\n\n59\n00:03:06.690 --> 00:03:10.140\nbecause you wanna make sure\nthat you have as much support\n\n60\n00:03:11.330 --> 00:03:16.150\nwith browsers as you're deploying these\napplications, especially on the web.\n\n61\n00:03:16.150 --> 00:03:19.750\nBecause then you'll have unequal\nexperiences between your users,\n\n62\n00:03:19.750 --> 00:03:22.150\nso just be very careful about that.\n\n63\n00:03:22.150 --> 00:03:27.080\nSo I just wanted to point that out, but\nlet's see where we left off last time.\n\n64\n00:03:27.080 --> 00:03:30.109\nWe actually looked at accessing\na portion of a string.\n\n65\n00:03:31.210 --> 00:03:34.120\nAnd that was using the substr and\na substring.\n\n66\n00:03:34.120 --> 00:03:36.770\nThe substr was starting\nat an index position,\n\n67\n00:03:36.770 --> 00:03:40.760\nremember strings are 0 index,\nthey start counting at 0.\n\n68\n00:03:40.760 --> 00:03:45.960\nSo the first letter is actually\n0 in the counting mechanism.\n\n69\n00:03:45.960 --> 00:03:48.640\nSo we start with substr,\nwhich starts at an index and\n\n70\n00:03:48.640 --> 00:03:52.930\ngives me some number of characters,\nincluding that first one.\n\n71\n00:03:52.930 --> 00:03:54.820\nSo starting at 1, give me 1 and 2.\n\n72\n00:03:54.820 --> 00:03:55.840\nSo that will be a total of two.\n\n73\n00:03:56.840 --> 00:04:00.520\nSubstring, starts at an index,\nand ends at the index.\n\n74\n00:04:01.620 --> 00:04:03.485\nBut it does not include the second one.\n\n75\n00:04:03.485 --> 00:04:10.520\nSo if I say, 1 to 3, you main instinct\nused to go, that includes 1, 2, and 3.\n\n76\n00:04:10.520 --> 00:04:15.760\nWhen in fact, 3 is exclusive,\nso you would only get 1 and 2.\n\n77\n00:04:15.760 --> 00:04:20.880\nAnd if we remind ourselves,\nthose actually evaluate to TETE,\n\n78\n00:04:20.880 --> 00:04:26.540\npart of the word steak,\nwhich is my favorite food at current time.\n\n79\n00:04:26.540 --> 00:04:30.800\nNow, there's additional ways\nto look around in the string.\n\n80\n00:04:30.800 --> 00:04:33.810\nI want to know,\ndoes a letter exist in there?\n\n81\n00:04:33.810 --> 00:04:34.920\nDoes a phrase exist?\n\n82\n00:04:34.920 --> 00:04:36.552\nDoes it contain a number?\n\n83\n00:04:36.552 --> 00:04:41.580\nAnd there's several ways that\nI can search through strings.\n\n84\n00:04:42.700 --> 00:04:45.120\nAnd we're gonna use my favorite food and\n\n85\n00:04:45.120 --> 00:04:47.680\nmy favorite color just\nto interact with those.\n\n86\n00:04:47.680 --> 00:04:50.800\nAnd then I'll throw a couple in there for\nthings you should watch out for.\n\n87\n00:04:50.800 --> 00:04:53.100\n&gt;&gt; Does this mean we're\ngonna get blue steak?\n\n88\n00:04:53.100 --> 00:04:54.370\n&gt;&gt; I hope not.\n\n89\n00:04:54.370 --> 00:04:57.200\n&gt;&gt; [LAUGH]\n&gt;&gt; That would be, just FYI,\n\n90\n00:04:57.200 --> 00:04:59.280\nif you ever sit down and order a steak and\n\n91\n00:04:59.280 --> 00:05:03.240\nit comes out blue,\nlisten here I don't know what this is.\n\n92\n00:05:03.240 --> 00:05:05.699\nI've heard of green eggs and\nham but not blue steak, so.\n\n93\n00:05:05.699 --> 00:05:06.505\n&gt;&gt; This is the Dennison Special.\n\n94\n00:05:06.505 --> 00:05:08.526\n[LAUGH]\n&gt;&gt; Yeah, like [SOUND].\n\n95\n00:05:08.526 --> 00:05:11.081\nSo if I start with my favorite food,\n\n96\n00:05:11.081 --> 00:05:14.490\nthere's a couple of\nmethods that I can use.\n\n97\n00:05:14.490 --> 00:05:18.032\nThe first one that we're\ngoing to look at is indexOf.\n\n98\n00:05:18.032 --> 00:05:24.270\nNow indexOf will actually tell us\nthe starting index for the letter.\n\n99\n00:05:25.370 --> 00:05:27.910\nOr for a phrase,\nas we'll see in just a moment.\n\n100\n00:05:27.910 --> 00:05:32.260\nSo if I say my favorite food,\nsteak, well it should contain an A.\n\n101\n00:05:32.260 --> 00:05:34.880\nI will actually get the index\nthe first instance.\n\n102\n00:05:35.940 --> 00:05:39.910\nAnd that means it'll search\nuntil it comes to the first A.\n\n103\n00:05:39.910 --> 00:05:43.320\nAnd it'll tell you where in\nthe string that is located.\n\n104\n00:05:43.320 --> 00:05:45.290\nSo let's see what that returns.\n\n105\n00:05:45.290 --> 00:05:46.960\nAnd that is 3, okay?\n\n106\n00:05:46.960 --> 00:05:48.235\nSo that's an index 3.\n\n107\n00:05:49.800 --> 00:05:54.720\nHowever, if I give it something that does\nnot exist, steak, there is not a Q in\n\n108\n00:05:54.720 --> 00:06:00.500\nthere, last time I checked, and\nthat would actually return -1.\n\n109\n00:06:00.500 --> 00:06:01.460\nSo, that's the default.\n\n110\n00:06:01.460 --> 00:06:07.240\nIf it's -1, or in fact, if it's less than\n0 is kind of a comparison you can make.\n\n111\n00:06:07.240 --> 00:06:10.120\nThen it does not exist within that string.\n\n112\n00:06:10.120 --> 00:06:14.330\nBut I am not simply limited\nto a single letter.\n\n113\n00:06:14.330 --> 00:06:18.580\nI can look for, let's see here.\n\n114\n00:06:18.580 --> 00:06:21.196\nThere we go, I can look for te.\n\n115\n00:06:21.196 --> 00:06:25.750\nWhere does te occur?\n\n116\n00:06:25.750 --> 00:06:30.040\nAnd it will tell me where those\ngrouping of letters start.\n\n117\n00:06:30.040 --> 00:06:34.820\nAnd you can see that they\nactually start at index 1,\n\n118\n00:06:34.820 --> 00:06:37.750\nSTE, and that's where they begin.\n\n119\n00:06:37.750 --> 00:06:40.732\nHowever, if I just changed that to tek,\n\n120\n00:06:40.732 --> 00:06:44.343\nwell I forgot the a if I'm\ntrying to spell steak.\n\n121\n00:06:44.343 --> 00:06:52.120\nIt will search for the pattern tk,\nand that does not exist as a whole.\n\n122\n00:06:52.120 --> 00:06:56.610\nSo those grouped together do not\nexist within the words steak.\n\n123\n00:06:56.610 --> 00:06:58.530\nSo we have to be careful about that.\n\n124\n00:06:58.530 --> 00:07:02.240\nNow what if I want to\nknow like at the end.\n\n125\n00:07:02.240 --> 00:07:05.730\nI don't want just the first,\nI want starting from the back end.\n\n126\n00:07:05.730 --> 00:07:06.890\nI want the last letter.\n\n127\n00:07:06.890 --> 00:07:09.330\nWhere's the last e in this word?\n\n128\n00:07:09.330 --> 00:07:13.400\nAnd that could be for text processing,\nfor natural language processing.\n\n129\n00:07:13.400 --> 00:07:16.019\nJust for playing around with\ndifferent visualizations.\n\n130\n00:07:17.520 --> 00:07:22.780\nAnd that in fact is very similar to,\nwhoa, gotta be careful.\n\n131\n00:07:22.780 --> 00:07:26.330\nWrong keyboard shortcut and\nyou'll just jump all over the place here.\n\n132\n00:07:26.330 --> 00:07:33.940\nInstead of index of,\nWe can say not, Last index of.\n\n133\n00:07:35.750 --> 00:07:41.440\nOkay, so\nif I refresh you can see that I have.\n\n134\n00:07:41.440 --> 00:07:43.370\nWell, it looks like it\ngave me the same numbers.\n\n135\n00:07:43.370 --> 00:07:44.510\nThat's weird!\n\n136\n00:07:44.510 --> 00:07:47.185\nWell, that's because\nthere's only a single A.\n\n137\n00:07:47.185 --> 00:07:52.378\nSo the first index and\nthe last index are in fact the same index.\n\n138\n00:07:52.378 --> 00:07:56.030\nThere's only a single instance of TE so\nthe first and\n\n139\n00:07:56.030 --> 00:07:59.020\nthe last will give me\nthe exact same index.\n\n140\n00:08:00.100 --> 00:08:02.844\nThe same so on so forth for t, e, k and q.\n\n141\n00:08:02.844 --> 00:08:07.380\nWell, those aren't found, so\nthose will return -1 by default.\n\n142\n00:08:07.380 --> 00:08:11.220\nSo what happens if that's no longer true?\n\n143\n00:08:11.220 --> 00:08:15.490\nLike I have the word cheese, right?\n\n144\n00:08:15.490 --> 00:08:18.180\nWell, I can usually string\nliteral as a string object,\n\n145\n00:08:18.180 --> 00:08:19.580\nI don't have to have it in a variable.\n\n146\n00:08:19.580 --> 00:08:22.580\nBe very careful,\nnot all data types behave like this.\n\n147\n00:08:22.580 --> 00:08:26.960\nI know that strings do, and now that\nyou also know that they do as well.\n\n148\n00:08:26.960 --> 00:08:34.940\nSo cheese, I want to find the index of e,\nnotice there are multiple es.\n\n149\n00:08:34.940 --> 00:08:39.535\nBut if I look for the last index of\n\n150\n00:08:41.583 --> 00:08:44.180\nI will actually get different numbers.\n\n151\n00:08:44.180 --> 00:08:46.940\nBecause the first e appears as 012.\n\n152\n00:08:46.940 --> 00:08:54.070\nHowever, the last e,\n012345, at index five.\n\n153\n00:08:54.070 --> 00:08:56.750\nSo I can search either way.\n\n154\n00:08:56.750 --> 00:08:59.740\nNow, there is a kind of a final and\nthird method.\n\n155\n00:08:59.740 --> 00:09:04.930\nIt will work with other strings to search\nthrough, it kinda does a similar thing as\n\n156\n00:09:04.930 --> 00:09:10.550\nindex and last index of, except it's built\nto be used with regular expressions.\n\n157\n00:09:10.550 --> 00:09:13.570\nAnd that's a whole other system in and\nof itself.\n\n158\n00:09:13.570 --> 00:09:16.690\nIf you know regular expressions,\ndo know that you can use them here.\n\n159\n00:09:16.690 --> 00:09:22.060\nIf you don't, just know that they\nare point of pride sometimes for\n\n160\n00:09:22.060 --> 00:09:26.410\nme, and a point of incredible\nfrustration also at other times.\n\n161\n00:09:26.410 --> 00:09:29.070\nI'm like, I did it.\n\n162\n00:09:29.070 --> 00:09:29.760\nIt doesn't work.\n\n163\n00:09:29.760 --> 00:09:30.540\nSo, it's okay.\n\n164\n00:09:30.540 --> 00:09:31.870\nRegular expressions works like this.\n\n165\n00:09:31.870 --> 00:09:36.864\nSo, let's see this last method was,\n\n166\n00:09:36.864 --> 00:09:43.900\nif we look at cheese,\nI'm gonna say search for the e.\n\n167\n00:09:45.200 --> 00:09:49.110\nWell, I'm searching for e,\nthere's multiple instances of e in there.\n\n168\n00:09:49.110 --> 00:09:51.300\nWhat is it gonna tell me?\n\n169\n00:09:51.300 --> 00:09:53.660\nAnd it will give me the same as index of.\n\n170\n00:09:53.660 --> 00:09:56.221\nBut-\n&gt;&gt; It goes the first occurrence of it and\n\n171\n00:09:56.221 --> 00:09:57.805\nthat's where it stops?\n\n172\n00:09:57.805 --> 00:10:00.520\n&gt;&gt; Yeah,\nit tells you the index just like index of.\n\n173\n00:10:00.520 --> 00:10:02.580\nBut I can write regular expressions.\n\n174\n00:10:02.580 --> 00:10:06.842\nNow, I will tell you, I just know\nregular expression We could just open\n\n175\n00:10:06.842 --> 00:10:11.200\na bowl of worms, so we're going to\nleave those for a separate topic.\n\n176\n00:10:11.200 --> 00:10:12.230\n&gt;&gt; We'll have a whole nother class.\n\n177\n00:10:12.230 --> 00:10:15.910\n&gt;&gt; Yeah, that's a whole other series\nof videos for regular expressions.\n\n178\n00:10:15.910 --> 00:10:18.780\n&gt;&gt; And it seems like all these\nare extremely powerful and\n\n179\n00:10:18.780 --> 00:10:22.550\nextremely useful, and we could probably\nstart to combine some of these.\n\n180\n00:10:22.550 --> 00:10:27.160\nIf we wanted to dissect an email address,\nI can see looking for the at and then\n\n181\n00:10:27.160 --> 00:10:31.130\nadding one, and then taking the length\nminus four to get rid of the trailer.\n\n182\n00:10:31.130 --> 00:10:32.970\nSo we can really start putting\nthese together, right?\n\n183\n00:10:32.970 --> 00:10:36.930\n&gt;&gt; Yes, and that's one of the things\nthat we would use these for are for\n\n184\n00:10:36.930 --> 00:10:38.840\nlike validation schemes.\n\n185\n00:10:38.840 --> 00:10:42.040\nI want to make sure that\nin a very simple sense that\n\n186\n00:10:42.040 --> 00:10:45.040\nthis is a valid e-mail address that\nyou're inputting to a web page.\n\n187\n00:10:45.040 --> 00:10:46.050\n&gt;&gt; At least it's formatted properly.\n\n188\n00:10:46.050 --> 00:10:47.270\n&gt;&gt; Yeah, it's formatted properly,\n\n189\n00:10:47.270 --> 00:10:51.380\nit's not, these aren't things that\nare going out and pinging Google or\n\n190\n00:10:51.380 --> 00:10:55.430\npinging Microsoft and seeing,\nyeah those exist, those are correct.\n\n191\n00:10:55.430 --> 00:10:57.150\nThat's a whole different service.\n\n192\n00:10:57.150 --> 00:11:01.131\nBut if I want to see,\ndoes it have some leader, an @ symbol,\n\n193\n00:11:01.131 --> 00:11:04.518\nsome end and then a dot something.\n\n194\n00:11:04.518 --> 00:11:08.340\nThen I can actually build\na validation method based on a string\n\n195\n00:11:08.340 --> 00:11:11.610\nmethods that would tell me yes or no.\n\n196\n00:11:11.610 --> 00:11:14.540\nSo, yes, that's a very wonderful use case.\n\n197\n00:11:14.540 --> 00:11:17.990\nNow, in addition to searching through and\n\n198\n00:11:17.990 --> 00:11:22.289\nfinding with these instances of either\na letter or a series of letters,\n\n199\n00:11:23.660 --> 00:11:28.260\nI can also get a changed\nversion of the existing string.\n\n200\n00:11:28.260 --> 00:11:29.330\nNow, notice what I said there.\n\n201\n00:11:29.330 --> 00:11:34.640\nI said a changed version, and\nthat's because strings are immutable,\n\n202\n00:11:34.640 --> 00:11:37.270\nunable to be changed in and of themselves.\n\n203\n00:11:37.270 --> 00:11:42.210\nSo if you do something crazy like this,\nmy favorite color,\n\n204\n00:11:42.210 --> 00:11:46.700\nwell, my auto complete just failed on me,\nas always.\n\n205\n00:11:46.700 --> 00:11:54.070\nIf I want to say the zeroth\nletter is now r, I'm like, okay.\n\n206\n00:11:54.070 --> 00:11:57.310\nWell, that would kinda make sense,\nso I'm changing part of this,\n\n207\n00:11:57.310 --> 00:11:59.420\nand I'm just trying things.\n\n208\n00:12:01.220 --> 00:12:05.540\nWell, if I refresh, that is interesting.\n\n209\n00:12:07.340 --> 00:12:08.810\nI don't think I saved.\n\n210\n00:12:11.510 --> 00:12:16.556\nSo it looks like it works, but\nlet's see if it actually works.\n\n211\n00:12:20.611 --> 00:12:24.123\nFavorite color\n\n212\n00:12:26.984 --> 00:12:30.317\nAnd notice that even though\nit looks like it worked,\n\n213\n00:12:30.317 --> 00:12:33.509\nit didn't actually change\nthe original string.\n\n214\n00:12:33.509 --> 00:12:35.770\n&gt;&gt; It just, I think [CROSSTALK]\n&gt;&gt; My favorite food.\n\n215\n00:12:35.770 --> 00:12:37.300\nYou got me, Mike.\n\n216\n00:12:37.300 --> 00:12:39.150\n&gt;&gt; See he was trying to trick us,\nit didn't work.\n\n217\n00:12:39.150 --> 00:12:41.135\n&gt;&gt; Yeah, I'm like I'm covering up.\n\n218\n00:12:41.135 --> 00:12:47.151\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n219\n00:12:47.151 --> 00:12:50.868\nagain, I have still been validated that,\nin fact,\n\n220\n00:12:50.868 --> 00:12:54.900\nit doesn't work because rtek\nis not a very good food.\n\n221\n00:12:54.900 --> 00:12:56.360\nNot even sure it exists.\n\n222\n00:12:56.360 --> 00:13:00.280\nNow notice, this is one of those errors\nthat doesn't really blow up in your face,\n\n223\n00:13:00.280 --> 00:13:02.100\nit kind of silently fails.\n\n224\n00:13:02.100 --> 00:13:04.378\nJust keep in mind that for most part,\n\n225\n00:13:04.378 --> 00:13:07.380\nyou're not going to be\nable to change a string.\n\n226\n00:13:07.380 --> 00:13:10.540\nIf you somehow figure\nout a way to do that,\n\n227\n00:13:10.540 --> 00:13:14.320\nyou probably shouldn't because\nthere's a lot of other reasons,\n\n228\n00:13:14.320 --> 00:13:18.020\nit makes it really hard to reason about if\nstrings are just kind of mutating about.\n\n229\n00:13:18.020 --> 00:13:20.030\nSo, with that,\n\n230\n00:13:20.030 --> 00:13:25.451\nwe end up with a set of methods that\nwill give you a changed version back.\n\n231\n00:13:27.210 --> 00:13:34.030\nAnd those are split, slice,\ntwo lowercase, two uppercase, and trim.\n\n232\n00:13:34.030 --> 00:13:38.060\nWell, two lowercase and\ntwo uppercase are fairly okay.\n\n233\n00:13:38.060 --> 00:13:43.019\nWe can take a look at those real quick\ncuz by name those are intuitive.\n\n234\n00:13:45.225 --> 00:13:50.620\nBut they are long names just like I\nhave chosen for my variable names.\n\n235\n00:13:50.620 --> 00:13:52.411\nAnd let's just duplicate that.\n\n236\n00:13:55.383 --> 00:13:59.365\nAnd blue is now all uppercase.\n\n237\n00:13:59.365 --> 00:14:02.279\nWell, it was originally all lowercase, so\n\n238\n00:14:02.279 --> 00:14:05.287\nI got the two lower case\nversion of that back.\n\n239\n00:14:05.287 --> 00:14:08.525\nAnd just to confirm that that does work,\n\n240\n00:14:08.525 --> 00:14:13.760\nI'm gonna hop up here and\nchange this to a b and this to a u.\n\n241\n00:14:13.760 --> 00:14:17.616\nAnd that's kind of weird, someone might\nactually type that inside a form or\n\n242\n00:14:17.616 --> 00:14:19.858\nsend that to you through\nsome data service.\n\n243\n00:14:20.934 --> 00:14:25.280\nSo two lower case will actually\nstandardize or make that very uniform.\n\n244\n00:14:25.280 --> 00:14:27.140\nOr two upper case will, as well.\n\n245\n00:14:27.140 --> 00:14:30.810\nSo in conjunction with these searching\nthrough strings, if I was looking for\n\n246\n00:14:30.810 --> 00:14:35.360\na lower case e and the string was all\nupper case, there would be nothing found.\n\n247\n00:14:35.360 --> 00:14:39.030\nSo I made two lower that, and\nthen find the e within it so\n\n248\n00:14:39.030 --> 00:14:42.760\nI can consistently search for a character.\n\n249\n00:14:42.760 --> 00:14:46.340\nNow, these do not mutate, as we've seen.\n\n250\n00:14:46.340 --> 00:14:49.289\nStrings should not be mutated,\nare not going to be mutated easily.\n\n251\n00:14:49.289 --> 00:14:53.102\nI reserved to say easily because\nsomeone'll figure out of way and\n\n252\n00:14:53.102 --> 00:14:55.123\nbe like I did it, I figured it out.\n\n253\n00:14:55.123 --> 00:14:59.180\n&gt;&gt; [LAUGH] So just to be clear, then,\nwhen you do the two upper and it displays\n\n254\n00:14:59.180 --> 00:15:03.504\nall upper case, it's not really changing\nthe value that's being stored and\n\n255\n00:15:03.504 --> 00:15:07.950\nthe variable to upper case,\nit's just displaying that as upper case?\n\n256\n00:15:07.950 --> 00:15:10.670\n&gt;&gt; Correct.\nI'm getting a copy with the changes made.\n\n257\n00:15:10.670 --> 00:15:14.250\nAnd let's just for\nconsistency show that that is the case.\n\n258\n00:15:14.250 --> 00:15:18.798\nSo I'm gonna remove this log,\nand this is gonna be upperfood.\n\n259\n00:15:18.798 --> 00:15:23.226\nI'm not gonna keep that entire\ngiant name there for a moment.\n\n260\n00:15:23.226 --> 00:15:28.572\nAnd then I'm going to console.log,\n\n261\n00:15:28.572 --> 00:15:33.257\nupperFood and myFavoriteFood.\n\n262\n00:15:36.833 --> 00:15:37.592\nNice.\n\n263\n00:15:40.178 --> 00:15:41.780\nYou caught me, you caught me.\n\n264\n00:15:41.780 --> 00:15:44.300\nHold on a second,\nthere was that thing again.\n\n265\n00:15:46.330 --> 00:15:46.910\nMy favorite food.\n\n266\n00:15:48.500 --> 00:15:50.430\nGetting all kinds of crazy up in here,\nMike.\n\n267\n00:15:50.430 --> 00:15:51.073\nThere we go.\n\n268\n00:15:51.073 --> 00:15:55.847\nSo again, validated that we're getting\na copy that is all uppercase versus\n\n269\n00:15:55.847 --> 00:15:58.620\nthe original which was all lowercase.\n\n270\n00:15:58.620 --> 00:15:59.126\n&gt;&gt; Fantastic.\n\n271\n00:15:59.126 --> 00:16:00.834\nSo, there's couple of other\nones that are very useful.\n\n272\n00:16:00.834 --> 00:16:07.945\nAnd these lead into some,\none of them leads into another type.\n\n273\n00:16:07.945 --> 00:16:15.520\nSo, if I wanted to split\nthe characters apart,\n\n274\n00:16:15.520 --> 00:16:19.330\nand just get a collection of characters,\nbut separately, so I could look at them\n\n275\n00:16:19.330 --> 00:16:23.740\none at a time, and that is what\nan array is, as we'll see later on.\n\n276\n00:16:23.740 --> 00:16:27.820\nBut if you can suspend that, I don't\nknow what you're talking about moment,\n\n277\n00:16:27.820 --> 00:16:30.810\nthen let's take a look at how\nthese strings are manipulated.\n\n278\n00:16:30.810 --> 00:16:33.450\nAnd I'm gonna keep this\nas just a string literal.\n\n279\n00:16:33.450 --> 00:16:38.290\nSo, if I wanted to split, and\n\n280\n00:16:38.290 --> 00:16:42.820\nnotice I put just empty quotes,\nwhich is the empty string,\n\n281\n00:16:42.820 --> 00:16:47.220\nthat will actually split on all,\njust pull the characters apart.\n\n282\n00:16:47.220 --> 00:16:49.638\nAnd you can see that I have\nthese square brackets now.\n\n283\n00:16:49.638 --> 00:16:52.297\nAnd I have individual characters.\n\n284\n00:16:52.297 --> 00:16:58.007\nSo I've split that collection apart\ninto a different data structure\n\n285\n00:16:58.007 --> 00:17:05.310\nthat did not alter ABC, but instead, gave\nme a copy as it pulled those apart for me.\n\n286\n00:17:05.310 --> 00:17:09.602\nNow the split is very handy,\nbecause what if I wanted to validate that\n\n287\n00:17:09.602 --> 00:17:13.904\nemail address, like you said,\nby looking at the individual parts?\n\n288\n00:17:13.904 --> 00:17:16.511\nWell, let's actually\nlook at an email address.\n\n289\n00:17:16.511 --> 00:17:24.830\nSo, steak@blue.com,\nlooks like a valid email address to me.\n\n290\n00:17:24.830 --> 00:17:31.530\nAnd I'm just going to\nsplit on the at symbol.\n\n291\n00:17:31.530 --> 00:17:35.626\nIf I split on the at symbol, I will get\nthe first part of the email address and\n\n292\n00:17:35.626 --> 00:17:37.720\nthe second part of the email address.\n\n293\n00:17:37.720 --> 00:17:40.390\nAnd then I can process those separately.\n\n294\n00:17:40.390 --> 00:17:43.892\n&gt;&gt; And it looks like the character\nyou're using to do the split is excluded\n\n295\n00:17:43.892 --> 00:17:44.440\non those.\n\n296\n00:17:44.440 --> 00:17:47.570\n&gt;&gt; Yes, yes so\nwhen it splits it cuts those out and\n\n297\n00:17:47.570 --> 00:17:50.234\nthen moves the other parts to the side.\n\n298\n00:17:50.234 --> 00:17:52.355\nExcept for the empty string which,\n\n299\n00:17:52.355 --> 00:17:57.410\nthat means there's nothing there to\nsplit on so split everything to pieces.\n\n300\n00:17:57.410 --> 00:18:00.020\nJust macerate it.\n\n301\n00:18:00.020 --> 00:18:06.540\nThe last part is, sometimes you'll have\nthese people will get into text fields and\n\n302\n00:18:06.540 --> 00:18:11.010\ndo stuff like this so\nyou have these weird leading or\n\n303\n00:18:11.010 --> 00:18:16.030\ntrailing white spaces, and white spaces\ndo count as characters within strings.\n\n304\n00:18:16.030 --> 00:18:20.630\nWell, I don't want to try to process\nthose because then if I look at the first\n\n305\n00:18:20.630 --> 00:18:24.185\ncharacter and\nI'm expecting it be a valid letter and\n\n306\n00:18:24.185 --> 00:18:27.210\nit's an empty string that's kinda weird.\n\n307\n00:18:27.210 --> 00:18:35.300\nSo if I change this instead to, Trim and\nthis may be a little hard to see.\n\n308\n00:18:35.300 --> 00:18:37.830\nI'm gonna try to show this as best I can.\n\n309\n00:18:37.830 --> 00:18:43.031\nSo, this will actually remove\nthose leading white spaces.\n\n310\n00:18:43.031 --> 00:18:47.129\nIt kinda comes and goes to the first\nnon-white space character and the first\n\n311\n00:18:47.129 --> 00:18:51.440\nnon-white space character to the end and\ncuts off the white space characters.\n\n312\n00:18:51.440 --> 00:18:54.040\nSo those are handy for\ndata processing, as well.\n\n313\n00:18:54.040 --> 00:18:58.730\n&gt;&gt; Yeah, I see that a lot of times when\nyou've got first and last name fields and\n\n314\n00:18:58.730 --> 00:19:00.970\nthe first name field is a fixed length.\n\n315\n00:19:00.970 --> 00:19:05.000\nSo some short names you end up with a lot\nof white space on the end of it and\n\n316\n00:19:05.000 --> 00:19:07.090\nthen you try to concatenate the first and\nlast name and\n\n317\n00:19:07.090 --> 00:19:09.380\nsometimes there's a lot of\nextra space between them.\n\n318\n00:19:09.380 --> 00:19:11.470\nThat trim command can be very,\nvery useful.\n\n319\n00:19:13.060 --> 00:19:17.980\n&gt;&gt; I've used the trim command more times\nthan I thought I would ever use it,\n\n320\n00:19:17.980 --> 00:19:19.280\nfor some reason.\n\n321\n00:19:19.280 --> 00:19:21.723\nOr, I've been guilty of typing a password,\nand\n\n322\n00:19:21.723 --> 00:19:24.477\nthen there's a white space\ncharacter on the end of it.\n\n323\n00:19:24.477 --> 00:19:28.755\nOr typing a user name when I'm trying\nto log in, and I've hit a space, and\n\n324\n00:19:28.755 --> 00:19:31.860\nthen it doesn't match\nbecause the service I'm using\n\n325\n00:19:31.860 --> 00:19:34.832\nisn't trimming to\nnon-white space characters.\n\n326\n00:19:34.832 --> 00:19:38.948\nSo those are handy for validation.\n\n327\n00:19:38.948 --> 00:19:41.320\n&gt;&gt; All right, Justin, a lot of cool\nthings we can do with strings,\n\n328\n00:19:41.320 --> 00:19:43.130\nbut I know there's more, right?\n\n329\n00:19:43.130 --> 00:19:44.870\n&gt;&gt; There's one final thing.\n\n330\n00:19:44.870 --> 00:19:47.120\nAnd we have to be careful\nbecause this will trip you up.\n\n331\n00:19:47.120 --> 00:19:51.120\nWe've talked about type coersion,\nthose conversions between data types.\n\n332\n00:19:51.120 --> 00:19:55.630\nBut, I really want to emphasize\nthis final string operation that is\n\n333\n00:19:55.630 --> 00:20:00.810\nfairly ubiquitous as you're building\nURLs or building user names and\n\n334\n00:20:00.810 --> 00:20:05.430\nthat's actually the concatenation,\nconcatenation, operator.\n\n335\n00:20:05.430 --> 00:20:07.180\nI think I spelled that right.\n\n336\n00:20:07.180 --> 00:20:11.338\nI like to think of it as\nthe squish together operator.\n\n337\n00:20:11.338 --> 00:20:14.047\n&gt;&gt; [LAUGH]\n&gt;&gt; And what's weird is,\n\n338\n00:20:14.047 --> 00:20:17.622\nthe string prototype, if we look,\nand what I mean by prototype,\n\n339\n00:20:17.622 --> 00:20:21.260\nthese are all methods that I\ncan use with string objects.\n\n340\n00:20:21.260 --> 00:20:24.410\nIf I look,\nthere's actually a concat method.\n\n341\n00:20:25.720 --> 00:20:28.900\nAnd that says,\nif I give it a bunch of strings,\n\n342\n00:20:28.900 --> 00:20:32.390\nit'll actually smash them together,\njust like you have here.\n\n343\n00:20:32.390 --> 00:20:38.290\nBut it's the first one concat with every\nother thing, so it'll push them together.\n\n344\n00:20:38.290 --> 00:20:42.280\nNow, I find that kind of hard to reason\nabout because usually I'm like, I want\n\n345\n00:20:42.280 --> 00:20:48.540\nthis first and then this and this next,\nand visually it's hard for me to figure\n\n346\n00:20:48.540 --> 00:20:53.140\nout what I need to put in what order\nunless I have really good variable names.\n\n347\n00:20:53.140 --> 00:20:59.305\nBut instead, you will see a lot of people,\nme included, use the plus sign actually.\n\n348\n00:20:59.305 --> 00:21:02.950\nSo we think of plus as like 2 + 3.\n\n349\n00:21:02.950 --> 00:21:04.300\nOkay, well, that's 5.\n\n350\n00:21:04.300 --> 00:21:08.668\nWell, if I have 2 + 3, and\n\n351\n00:21:08.668 --> 00:21:13.229\nwe've seen this one before.\n\n352\n00:21:13.229 --> 00:21:14.564\nThere we go.\n\n353\n00:21:14.564 --> 00:21:17.374\nWas getting a little out of hand there for\na second, Mike.\n\n354\n00:21:17.374 --> 00:21:22.760\n&gt;&gt; [LAUGH]\n&gt;&gt; This is some bad math, 2 + 3 is 23.\n\n355\n00:21:22.760 --> 00:21:26.362\nAnd that's because it took the first\nstring, the next string and\n\n356\n00:21:26.362 --> 00:21:28.160\nsmashed them together.\n\n357\n00:21:28.160 --> 00:21:32.187\nAlso notice, it went, literally,\nwhat you asked for it to.\n\n358\n00:21:32.187 --> 00:21:37.420\nIf I put a space here,\nit now is 2 space 3.\n\n359\n00:21:37.420 --> 00:21:40.590\nSo, in order to get those white\nspaces when you're building these up,\n\n360\n00:21:40.590 --> 00:21:45.260\nyou have to put the white\nspace in explicitly.\n\n361\n00:21:45.260 --> 00:21:48.552\nNow, the reason I bring this\nup is this plus operator,\n\n362\n00:21:48.552 --> 00:21:52.793\nif one of these is a string,\nthen you may end up getting weird results.\n\n363\n00:21:52.793 --> 00:21:55.980\nSo you should be cognitive\nof this operator.\n\n364\n00:21:55.980 --> 00:21:57.490\nBecause if I do 2 + 3,\n\n365\n00:21:57.490 --> 00:22:01.960\nI still get 23 and that's because\nI have a string plus a number.\n\n366\n00:22:01.960 --> 00:22:06.015\nWell now it's not using the number plus\nbut instead the string concatenation and\n\n367\n00:22:06.015 --> 00:22:11.210\nit'll force this other one to be\na string and kinda squish them together.\n\n368\n00:22:11.210 --> 00:22:17.867\nLikewise, I can have empty open curly,\nclose curly brace which, is an object.\n\n369\n00:22:17.867 --> 00:22:23.190\nAnd okay, then that's probably\ngoing to be two curly braces.\n\n370\n00:22:23.190 --> 00:22:24.504\nWell no, it's not.\n\n371\n00:22:24.504 --> 00:22:27.470\nIt actually says, this is an object.\n\n372\n00:22:27.470 --> 00:22:32.880\nAnd that's because, in higher and\nkind of more complex types, there's behind\n\n373\n00:22:32.880 --> 00:22:36.980\nthe scenes machinations that will give you\na representation that is easy to print.\n\n374\n00:22:36.980 --> 00:22:38.640\nI don't think this is very helpful,\n\n375\n00:22:38.640 --> 00:22:42.640\nbut that's what your gonna get when you\nget an object, and that's object object.\n\n376\n00:22:42.640 --> 00:22:46.310\nSo be very careful about\nthe string concatenation operator.\n\n377\n00:22:46.310 --> 00:22:48.760\nBut, what are some use cases for this?\n\n378\n00:22:48.760 --> 00:22:55.070\nWell, if we go back to a website, right?\n\n379\n00:22:55.070 --> 00:23:02.110\nIf I know that I'm searching, whoa,\nI was about to put a bad website in there.\n\n380\n00:23:02.110 --> 00:23:08.358\nFor searchandstuff.things,\n\n381\n00:23:08.358 --> 00:23:14.790\nbut I don't know what I'm actually\ngonna be searching for, right?\n\n382\n00:23:16.270 --> 00:23:18.360\nThat is not the correct character.\n\n383\n00:23:18.360 --> 00:23:23.640\nI know is gonna be some kind of query but\nI'm gonna use this in a dynamic manner.\n\n384\n00:23:23.640 --> 00:23:26.066\nWell, I'm gonna search for myFavoriteFood.\n\n385\n00:23:29.154 --> 00:23:31.962\nNow, I can dynamically build URLs and\n\n386\n00:23:31.962 --> 00:23:37.550\nthis is helpful when we start building\nkind of dynamic web applications.\n\n387\n00:23:37.550 --> 00:23:40.330\nSo that's a very common usage pattern.\n\n388\n00:23:40.330 --> 00:23:41.935\n&gt;&gt; All right Justin, fantastic!\n\n389\n00:23:41.935 --> 00:23:46.080\nGreat look at there at strings and\nall of the different things that we can\n\n390\n00:23:46.080 --> 00:23:50.050\nuse to manipulate, combine and\nwork with those strings.\n\n391\n00:23:50.050 --> 00:23:50.716\nWe appreciate that.\n\n392\n00:23:50.716 --> 00:23:52.863\nHope everybody out there\nenjoyed watching this one.\n\n393\n00:23:52.863 --> 00:23:54.247\nSinging off for ITProTV.\n\n394\n00:23:54.247 --> 00:23:56.150\nI've been your host Mike Rodrick.\n\n395\n00:23:56.150 --> 00:23:57.474\nAnd I'm Justin Dennison.\n\n396\n00:23:57.474 --> 00:23:58.995\n&gt;&gt; And we'll see you next time.\n\n397\n00:23:58.995 --> 00:24:06.112\n[MUSIC]\n\n398\n00:24:06.112 --> 00:24:10.570\nThank you for watching ITProTV.\n\n",
          "vimeoId": "202774602"
        },
        {
          "description": "In this episode, Justin and Mike work with arrays. They demonstrate creating arrays and working with an arrays properties. They also demonstrate various methods used to manipulate arrays.",
          "length": "1627",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-5-1-working_with_arrays-020117-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-5-1-working_with_arrays-020117-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-5-1-working_with_arrays-020117-1-sm.jpg",
          "title": "Working with Arrays",
          "transcript": "WEBVTT\n\n1\n00:00:00.053 --> 00:00:04.313\nWelcome to ITPro TV,\nI'm your host [CROSSTALK].\n\n2\n00:00:04.313 --> 00:00:08.294\n[MUSIC]\n\n3\n00:00:08.294 --> 00:00:12.460\n&gt;&gt; You're watching ITPro TV.\n\n4\n00:00:12.460 --> 00:00:15.270\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPro TV.\n\n5\n00:00:15.270 --> 00:00:19.590\nI'm your host Mike Rodrick, and today,\nwe're doing introduction to JavaScript.\n\n6\n00:00:19.590 --> 00:00:23.970\nAnd in this episode,\nwe're going to be focusing in On arrays.\n\n7\n00:00:23.970 --> 00:00:25.250\nAnd here to help us with arrays.\n\n8\n00:00:25.250 --> 00:00:28.800\nShow us what they are and how we can\nuse them is Mr. Justin Dennison.\n\n9\n00:00:28.800 --> 00:00:29.720\nWelcome back Justin.\n\n10\n00:00:29.720 --> 00:00:31.180\n&gt;&gt; Thanks for having me back Mike.\n\n11\n00:00:31.180 --> 00:00:32.800\nYeah, arrays.\n\n12\n00:00:32.800 --> 00:00:34.670\nThat's just kind of a weird word.\n\n13\n00:00:34.670 --> 00:00:38.010\nIt's just another one of those\nwords that might be kind of scary.\n\n14\n00:00:38.010 --> 00:00:42.110\nHowever, we've already seen something\nthat's very similar to arrays.\n\n15\n00:00:42.110 --> 00:00:43.620\nAnd that's in fact the string.\n\n16\n00:00:43.620 --> 00:00:46.050\nThe string was a collection.\n\n17\n00:00:46.050 --> 00:00:51.800\nOf letters and things, but\narrays can be a collection of anything.\n\n18\n00:00:51.800 --> 00:00:53.430\nAnd what do I mean by a collection?\n\n19\n00:00:53.430 --> 00:00:57.575\nWell, if you reach inside your pocket and\nyou have coins, sometimes I don't.\n\n20\n00:00:57.575 --> 00:00:58.860\n&gt;&gt; [LAUGH]\n&gt;&gt; But if you have coins,\n\n21\n00:00:58.860 --> 00:01:01.160\nyou have a collection of coins.\n\n22\n00:01:01.160 --> 00:01:04.230\nAnd they're all of coin type.\n\n23\n00:01:04.230 --> 00:01:07.540\nSo that allows you to\nsee how Ray would work.\n\n24\n00:01:07.540 --> 00:01:12.200\nNow if line them up on a table now\nyou have a true representation\n\n25\n00:01:13.570 --> 00:01:16.230\nof what an array would conceptually be.\n\n26\n00:01:16.230 --> 00:01:20.080\nSo there's some key points that\nI want to make about arrays.\n\n27\n00:01:21.190 --> 00:01:25.070\nIn JavaScript, you can just kinda\nput anything you want into an array,\n\n28\n00:01:25.070 --> 00:01:28.800\nyou can treat it like the junk drawer,\nthat I don't know if you have, but\n\n29\n00:01:28.800 --> 00:01:29.480\nI have at my house.\n\n30\n00:01:29.480 --> 00:01:32.020\nWhere you're like,\nI don't know what to do with this.\n\n31\n00:01:32.020 --> 00:01:34.920\nSo just put it in the junk drawer and\nthen kind of jimmy it shut.\n\n32\n00:01:34.920 --> 00:01:37.960\nAnd go, I don't know if I'll ever\nneed that, but you never know.\n\n33\n00:01:37.960 --> 00:01:41.560\nSo I would be very careful\nbecause it's really hard to keep\n\n34\n00:01:41.560 --> 00:01:42.640\ntrack of those in your mind.\n\n35\n00:01:42.640 --> 00:01:45.827\nBecause arrays can be\nanywhere from ten items,\n\n36\n00:01:45.827 --> 00:01:49.690\nlike a ten-letter string\nthat you split apart.\n\n37\n00:01:49.690 --> 00:01:52.240\nOr, it could be up to a million items.\n\n38\n00:01:52.240 --> 00:01:54.410\nSo, if you open the junk drawer, and\n\n39\n00:01:54.410 --> 00:01:58.620\nthere's a million different things\nin there, you kinda get scared.\n\n40\n00:01:58.620 --> 00:01:59.140\nI know I do.\n\n41\n00:01:59.140 --> 00:02:01.767\n&gt;&gt; [LAUGH]\n&gt;&gt; I mean I get scared when there's like\n\n42\n00:02:01.767 --> 00:02:04.591\n30 things in my junk drawer,\nor even 4, and I'm like,\n\n43\n00:02:04.591 --> 00:02:06.306\nI don't know what those are for.\n\n44\n00:02:06.306 --> 00:02:12.420\nBut arrays are, they're a way of kind of\nbundling things together then track along.\n\n45\n00:02:13.490 --> 00:02:16.140\nArrays are still zero indexed.\n\n46\n00:02:16.140 --> 00:02:19.440\nAll collections in JavaScript\nare going to be zero indexed.\n\n47\n00:02:19.440 --> 00:02:24.020\nAnd there's several ways to\naccess within that collection.\n\n48\n00:02:24.020 --> 00:02:28.140\nBut let's go ahead and get started and\nstop conceptualizing and\n\n49\n00:02:28.140 --> 00:02:30.310\nactually see concrete examples.\n\n50\n00:02:30.310 --> 00:02:32.070\nSo I have Chrome open.\n\n51\n00:02:32.070 --> 00:02:35.460\nI'm again going to move\nto one of those projects\n\n52\n00:02:35.460 --> 00:02:39.610\nthat have that @.js in index.html.\n\n53\n00:02:39.610 --> 00:02:42.260\nI name my folders appropriately.\n\n54\n00:02:42.260 --> 00:02:46.540\nWorking with arrays, so I don't have to,\nam I in the right index.html?\n\n55\n00:02:46.540 --> 00:02:48.040\nBe very, very careful of that.\n\n56\n00:02:48.040 --> 00:02:49.300\nI can't emphasize that enough.\n\n57\n00:02:49.300 --> 00:02:54.152\nThis calls me a lot of strife and\nI don't wanna call you any strife either.\n\n58\n00:02:54.152 --> 00:02:55.410\nSo in addition to,\n\n59\n00:02:55.410 --> 00:02:58.850\nwhile I'm in Chrome, I'm going to\nopen the Chrome developer tools.\n\n60\n00:02:58.850 --> 00:03:03.190\nThere's our console that's gonna\nprint out our nice little examples.\n\n61\n00:03:03.190 --> 00:03:05.520\nAnd then I'm gonna hop over into Atom and\ngo ahead and\n\n62\n00:03:05.520 --> 00:03:07.230\nopen the corresponding folder.\n\n63\n00:03:08.320 --> 00:03:11.460\nAnd that's Add Project folder, and\n\n64\n00:03:11.460 --> 00:03:16.630\nI'm gonna navigate to working with arrays,\nand there we have it.\n\n65\n00:03:16.630 --> 00:03:21.080\nMy index is just an entry way\ninto executing my app.js,\n\n66\n00:03:21.080 --> 00:03:24.760\nmy app JS is where\nthe magic really happens.\n\n67\n00:03:24.760 --> 00:03:26.070\nSo what is an array?\n\n68\n00:03:26.070 --> 00:03:27.660\nWell, I said it was a collection.\n\n69\n00:03:27.660 --> 00:03:30.820\nAnd let's use one of those block comments,\nagain, to talk about it.\n\n70\n00:03:30.820 --> 00:03:34.350\nAn array is going to have\nsquare brackets on either end.\n\n71\n00:03:34.350 --> 00:03:38.870\nIf you ever see a printout that\nhas square brackets on either end,\n\n72\n00:03:40.230 --> 00:03:44.080\nthat means you have an array type,\na collection of things.\n\n73\n00:03:45.100 --> 00:03:46.280\nSo let's look.\n\n74\n00:03:46.280 --> 00:03:52.220\nIf I had 1, 2, 3, and this is typically\nhow you're gonna see them printed out,\n\n75\n00:03:52.220 --> 00:03:53.480\nunless they get really large and\n\n76\n00:03:53.480 --> 00:03:57.600\nthen JavaScript will actually\nmake them drop downs.\n\n77\n00:03:57.600 --> 00:04:02.810\nThis, as we saw with a, b, c in strings\nis going to be the zeroth element,\n\n78\n00:04:02.810 --> 00:04:07.260\nthe first element, and the second element.\n\n79\n00:04:07.260 --> 00:04:11.210\nSo again, that zero indexing is very,\nvery important to keep in mind.\n\n80\n00:04:11.210 --> 00:04:13.260\nBecause you'll get an off by one error and\n\n81\n00:04:13.260 --> 00:04:17.510\nthen things start breaking and\nit's really hard to reason about and fix.\n\n82\n00:04:17.510 --> 00:04:22.610\nSo how do I make an array if I just\nwant to start bundling things together?\n\n83\n00:04:22.610 --> 00:04:24.680\nWell let's make myFavNums.\n\n84\n00:04:26.380 --> 00:04:33.700\nI can actually use what's called an array\nliteral and that's two square brackets and\n\n85\n00:04:33.700 --> 00:04:38.600\nthen anything I want to put in that\narray I just type separated by commas.\n\n86\n00:04:38.600 --> 00:04:41.160\nSo my favorite nums, 42, 13 and 7.\n\n87\n00:04:41.160 --> 00:04:45.830\n42 is a great number.\n\n88\n00:04:45.830 --> 00:04:50.205\n13, I don't think it's\nfunny that it's [INAUDIBLE]\n\n89\n00:04:50.205 --> 00:04:52.030\n&gt;&gt; [LAUGH]\n\n90\n00:04:52.030 --> 00:04:53.610\n&gt;&gt; And then 7, who doesn't like 7?\n\n91\n00:04:53.610 --> 00:04:57.820\nSo I now have a collection\nof my favorite numbers.\n\n92\n00:04:57.820 --> 00:05:02.969\nAnd just for some variety.\n\n93\n00:05:02.969 --> 00:05:07.139\nMyFavLetters.\n\n94\n00:05:07.139 --> 00:05:13.600\nAnd that's a, b, c,\nseparated by commas again.\n\n95\n00:05:13.600 --> 00:05:17.830\nNow notice I have,\nall of these are numbers.\n\n96\n00:05:17.830 --> 00:05:20.740\nThe variable name tells me\na little bit about their type.\n\n97\n00:05:20.740 --> 00:05:21.740\nYou don't have to do that.\n\n98\n00:05:21.740 --> 00:05:24.500\nSometimes, that's not an option\nbecause you're not the one\n\n99\n00:05:24.500 --> 00:05:26.340\ndetermining that variable name.\n\n100\n00:05:26.340 --> 00:05:29.540\nBut if you have the ability,\nit's nice to know what's in that array.\n\n101\n00:05:30.830 --> 00:05:34.040\nHere, my fave letters,\nthose are probably strings.\n\n102\n00:05:35.200 --> 00:05:38.393\nFor now, as you're beginning, and\n\n103\n00:05:38.393 --> 00:05:43.234\nI recommend mostly, always,\ndo not do things as such.\n\n104\n00:05:44.773 --> 00:05:50.196\nMyFavThings 42, the letter a,\nan object, true,\n\n105\n00:05:50.196 --> 00:05:56.220\nbecause all of these behave\na little differently.\n\n106\n00:05:56.220 --> 00:05:59.210\nWell, 42, that's a number, so\nI can do number things with it.\n\n107\n00:05:59.210 --> 00:06:01.590\nWell I'm gonna do number\nthings with the second one.\n\n108\n00:06:01.590 --> 00:06:02.500\nWell that's a string.\n\n109\n00:06:02.500 --> 00:06:04.900\nYou can't do number things with a string.\n\n110\n00:06:04.900 --> 00:06:06.190\nOkay.\nWell I'll just use the third one.\n\n111\n00:06:06.190 --> 00:06:07.150\nWell that's an object.\n\n112\n00:06:07.150 --> 00:06:09.170\nYou can't do number things with an object.\n\n113\n00:06:09.170 --> 00:06:10.150\nWell what can I do?\n\n114\n00:06:10.150 --> 00:06:16.170\nAnd you'll find yourself really working\nagainst the inconsistency of types.\n\n115\n00:06:16.170 --> 00:06:18.640\nNow if you're from other\nprogramming languages or\n\n116\n00:06:18.640 --> 00:06:22.140\nyou have any other experience there are\nsome languages that enforce this behavior.\n\n117\n00:06:22.140 --> 00:06:25.430\nAnd that's because it's very consistent.\n\n118\n00:06:25.430 --> 00:06:27.530\nIt's easy to reason about and\n\n119\n00:06:27.530 --> 00:06:32.710\nit eliminates some of those weird just\nrandom thrown errors that will occur.\n\n120\n00:06:32.710 --> 00:06:36.420\nSo I would keep things consistent\nby type when you have an array.\n\n121\n00:06:38.000 --> 00:06:40.550\nNow I have constructed these arrays.\n\n122\n00:06:40.550 --> 00:06:43.760\nI can also use the array built in.\n\n123\n00:06:43.760 --> 00:06:46.300\nThis is typically not what you will see.\n\n124\n00:06:46.300 --> 00:06:50.550\nThe array would come in from,\nlike a data service, or\n\n125\n00:06:50.550 --> 00:06:55.348\nyou would construct it as a literal\nusing the square brackets, but\n\n126\n00:06:55.348 --> 00:07:01.760\nusing the built-in and,\n\n127\n00:07:01.760 --> 00:07:07.650\nyou can probably I may not use this one\nfor examples just by the giant name.\n\n128\n00:07:07.650 --> 00:07:13.720\nI'm gonna say array or in fact I can\nuse this new keyword when you're\n\n129\n00:07:13.720 --> 00:07:19.080\nconstructing these objects you'll see\nthis new keyword kind of littered about.\n\n130\n00:07:19.080 --> 00:07:22.935\nSo if I want a new array that\nwould give me a new array and\n\n131\n00:07:22.935 --> 00:07:28.163\nit behaves just like, This.\n\n132\n00:07:32.195 --> 00:07:37.768\nAnd also probably not going to use\nthis one for examples just because\n\n133\n00:07:37.768 --> 00:07:42.850\nof the length, so\nI have using the built-in method array, so\n\n134\n00:07:42.850 --> 00:07:48.260\nI can construct a new array object or\nI can use the literal syntax.\n\n135\n00:07:48.260 --> 00:07:52.550\nThese are both empty, and just to\nconfirm that, because you never know.\n\n136\n00:07:52.550 --> 00:07:57.460\nI have to hold myself accountable.\n\n137\n00:07:57.460 --> 00:08:00.925\nSo there's the first one.\n\n138\n00:08:00.925 --> 00:08:03.899\nAnd using the literal syntax.\n\n139\n00:08:03.899 --> 00:08:07.017\nAnd let's refresh, and\nnotice I do get an array.\n\n140\n00:08:07.017 --> 00:08:10.985\nBut also notice I get this little\ndrop down, and that's because there's\n\n141\n00:08:10.985 --> 00:08:15.990\nadditional properties and things that the\nbrowser will report to me about an array.\n\n142\n00:08:15.990 --> 00:08:19.520\nIf there are things in this array, they\nwould actually be listed there as well.\n\n143\n00:08:21.000 --> 00:08:23.830\nSo I have these arrays.\n\n144\n00:08:23.830 --> 00:08:28.730\nI'm gonna temporarily comment these out\ncuz those are giant variable names and\n\n145\n00:08:28.730 --> 00:08:31.530\nthough descriptive do not make for\nfun times.\n\n146\n00:08:31.530 --> 00:08:32.430\nYou don't want to sit here and\n\n147\n00:08:32.430 --> 00:08:35.710\nwatch me type or\nstruggle to type giant variable names.\n\n148\n00:08:35.710 --> 00:08:37.630\nSo we're gonna stay away from those for\nnow.\n\n149\n00:08:38.680 --> 00:08:40.060\nSo there's a few things.\n\n150\n00:08:40.060 --> 00:08:47.440\nHow can I alter An array\nafter creating it.\n\n151\n00:08:47.440 --> 00:08:54.140\nLet's say, I'm been thinking, I really\ndon't like the number seven anymore.\n\n152\n00:08:54.140 --> 00:08:55.910\nI'm more of a nine person now.\n\n153\n00:08:55.910 --> 00:09:00.110\nSo I wanna change that last\none to the number nine.\n\n154\n00:09:01.160 --> 00:09:02.450\nSo, how would I do that?\n\n155\n00:09:02.450 --> 00:09:05.575\nWell, if get to myFavNums and\n\n156\n00:09:05.575 --> 00:09:11.280\nI have to be careful,\nthis is zero, one, two.\n\n157\n00:09:11.280 --> 00:09:16.210\nSo I select the index of two,\nand I say nine.\n\n158\n00:09:16.210 --> 00:09:22.406\nAnd I console.log myFavNums and\n\n159\n00:09:22.406 --> 00:09:26.530\nlet's see what actually outputs for us.\n\n160\n00:09:26.530 --> 00:09:31.900\nAnd we can see that though I have typed\nit here, I modified it, I mutated it.\n\n161\n00:09:33.240 --> 00:09:35.780\n&gt;&gt; So big difference,\nthen between strings and arrays.\n\n162\n00:09:35.780 --> 00:09:37.880\nWe can actually make\nchanges to those arrays.\n\n163\n00:09:37.880 --> 00:09:42.350\n&gt;&gt; Exactly, we can switch out the,\nwhat are called elements.\n\n164\n00:09:42.350 --> 00:09:44.750\nSo this is,\nthese are elements within this array.\n\n165\n00:09:44.750 --> 00:09:48.920\nI can switch those elements out and\nthe array can mutate.\n\n166\n00:09:48.920 --> 00:09:54.100\nSo, great distinction Mike and we do\nneed to make these distinctions, that\n\n167\n00:09:54.100 --> 00:09:58.670\nis the way to kinda blow things apart,\nchange them and smash them back together.\n\n168\n00:09:58.670 --> 00:10:03.510\nNow, that is one way to alter an array,\nbut there's several other ways, but\n\n169\n00:10:03.510 --> 00:10:05.100\nthey're a little bit more complicated.\n\n170\n00:10:05.100 --> 00:10:09.820\nSo let's start with some basic properties,\nsome basic methods and\n\n171\n00:10:09.820 --> 00:10:14.610\nbuild our repertoire up so\nwe can see how we can construct these\n\n172\n00:10:16.260 --> 00:10:20.610\nmore complex transformations.\n\n173\n00:10:20.610 --> 00:10:25.580\nSo as always I recommend at any point\nthat you're exploring a new type,\n\n174\n00:10:25.580 --> 00:10:31.880\na new portion of JavaScript then we should\nlook at Mozilla developer network and\n\n175\n00:10:34.870 --> 00:10:40.080\nthere are various documentation\nsources that you can use as resources.\n\n176\n00:10:40.080 --> 00:10:44.340\nI like Mozilla because it's very\nthorough in my experience,but\n\n177\n00:10:44.340 --> 00:10:45.350\nit's not the only one.\n\n178\n00:10:46.350 --> 00:10:51.750\nAnd so I searched for JavaScript array,\nMozilla developer network.\n\n179\n00:10:51.750 --> 00:10:52.600\nThat's kinda small.\n\n180\n00:10:52.600 --> 00:10:54.030\nThere we go.\n\n181\n00:10:54.030 --> 00:10:55.740\nAnd I'm going to look at arrays.\n\n182\n00:10:56.780 --> 00:11:01.680\nAnd particularly, I'm gonna go just\ndown to this properties and methods.\n\n183\n00:11:01.680 --> 00:11:04.590\nSo if I look at properties, again we have\n\n184\n00:11:04.590 --> 00:11:07.430\nto be careful because of the changes\nthat are happening in the language.\n\n185\n00:11:07.430 --> 00:11:11.970\nNot all of the things you see\nare available in every browser.\n\n186\n00:11:11.970 --> 00:11:16.580\nSo I'm gonna pick out the ones that\nare fairly consistent, but keep in mind if\n\n187\n00:11:16.580 --> 00:11:20.730\nyou wanna know, for instance this\narray.of that's a new addition.\n\n188\n00:11:20.730 --> 00:11:25.340\nIt may not be available everywhere if\nyou're building something to be used by\n\n189\n00:11:25.340 --> 00:11:25.920\na lot of people.\n\n190\n00:11:25.920 --> 00:11:32.720\nBut something that's been around for\na long, long time is the length property.\n\n191\n00:11:32.720 --> 00:11:35.860\nAnd the length property,\nessentially tells me,\n\n192\n00:11:35.860 --> 00:11:40.930\nas we saw with strings,\nhow many elements I have.\n\n193\n00:11:40.930 --> 00:11:45.740\nSo myFavNums.length,\ngotta spell length right though.\n\n194\n00:11:45.740 --> 00:11:48.850\nIf you don't do that,\nthen it doesn't mean anything.\n\n195\n00:11:48.850 --> 00:11:53.500\nSo if I refresh this actually says\nmyFavNums has three elements within it.\n\n196\n00:11:53.500 --> 00:11:56.560\nAnd that's good just to know\nwhat is the maximum index,\n\n197\n00:11:56.560 --> 00:12:01.630\nthe minimum index, that I can move through\nif I'm trying to modify this array.\n\n198\n00:12:01.630 --> 00:12:04.710\n&gt;&gt; Now just I know in some\nlanguages we almost have to\n\n199\n00:12:04.710 --> 00:12:06.670\nsay that ahead of time when\nwe're building an array.\n\n200\n00:12:06.670 --> 00:12:09.690\nWe have to say I want\nan array of five spots.\n\n201\n00:12:09.690 --> 00:12:11.970\nDoesn't look like we have\nto do that in JavaScript?\n\n202\n00:12:11.970 --> 00:12:14.280\n&gt;&gt; No.\nSo JavaScript is fairly dynamic in\n\n203\n00:12:14.280 --> 00:12:15.540\nthe array data type.\n\n204\n00:12:15.540 --> 00:12:19.330\nI've worked in some of those languages\nwhere you say you get five characters or\n\n205\n00:12:19.330 --> 00:12:21.270\nyou get five numbers in this.\n\n206\n00:12:21.270 --> 00:12:24.290\nBut these arrays are very dynamic.\n\n207\n00:12:24.290 --> 00:12:28.370\nI can grow and\nshrink accordingly as I need to,\n\n208\n00:12:28.370 --> 00:12:33.430\nwhich is a plus and a minus because\nI have tried some things within\n\n209\n00:12:33.430 --> 00:12:37.190\nthe browser where I'm like this is gonna\nbe awesome and then my browser locks up.\n\n210\n00:12:37.190 --> 00:12:42.090\nSo be very careful there\nare finite limits to memory usage.\n\n211\n00:12:42.090 --> 00:12:45.890\nThey're fairly extreme, but\ndo know that they exist.\n\n212\n00:12:45.890 --> 00:12:48.990\nSo that's a good way to\nsee what is the length?\n\n213\n00:12:48.990 --> 00:12:51.010\nHow many elements do I\nhave available to me?\n\n214\n00:12:52.260 --> 00:12:57.120\nAnd from a data service,\nlike if I'm building a website that used\n\n215\n00:12:57.120 --> 00:13:02.640\nexternal data services,\nthen I can how much information do I have?\n\n216\n00:13:02.640 --> 00:13:03.970\nHow many users do I have?\n\n217\n00:13:03.970 --> 00:13:06.880\nSo if I get a user's array back,\nI can say .length.\n\n218\n00:13:06.880 --> 00:13:09.130\nI have 30 users.\n\n219\n00:13:09.130 --> 00:13:12.520\nMaybe that's a quick comparison\nto yesterday when I had 20 users.\n\n220\n00:13:12.520 --> 00:13:17.970\nSo these can be quick little checks about\nhow many pieces of data that you have.\n\n221\n00:13:19.690 --> 00:13:26.460\nNow, once we have these array instance\nmethods, I can mutate, as we've seen here,\n\n222\n00:13:26.460 --> 00:13:31.370\njust by reassigning but I can also\ngrow and shrink, as you said, Mike.\n\n223\n00:13:31.370 --> 00:13:34.110\nHow do I grow and shrink these arrays?\n\n224\n00:13:34.110 --> 00:13:37.961\nWell, if I say, myFavLetters.\n\n225\n00:13:41.323 --> 00:13:43.030\nThere's a couple of ways I can do this.\n\n226\n00:13:43.030 --> 00:13:46.940\nI can push, now,\npush means come to the end.\n\n227\n00:13:46.940 --> 00:13:52.570\nSo if I come here, I would come to the end\nand push it on to the end of the array.\n\n228\n00:13:52.570 --> 00:13:54.810\nSo it's like a,\nI like to think of it as Legos.\n\n229\n00:13:54.810 --> 00:13:58.030\nI got three Legos stacked and\nI wanna push and\n\n230\n00:13:58.030 --> 00:14:02.500\nput it on to the end that would be\nthe end as the representation of the top.\n\n231\n00:14:02.500 --> 00:14:05.580\nSo I can push, and again,\n\n232\n00:14:05.580 --> 00:14:09.220\nI want to keep these types consistent\njust because it's easy to reason about.\n\n233\n00:14:10.400 --> 00:14:13.820\nI've taken a liking to the letter d.\n\n234\n00:14:13.820 --> 00:14:19.325\nSo myFavLetters,\nlet's see if that change persists and\n\n235\n00:14:19.325 --> 00:14:23.230\nwe gotta be in the right browser window.\n\n236\n00:14:23.230 --> 00:14:28.758\nI have, in fact,\nhave added to the myFavLetters array.\n\n237\n00:14:28.758 --> 00:14:36.440\nAlso notice that the length property\nwill change as you're doing this push.\n\n238\n00:14:36.440 --> 00:14:37.790\nSo the size changes.\n\n239\n00:14:37.790 --> 00:14:43.170\nSo .length will change as\nthose pushes are applied.\n\n240\n00:14:43.170 --> 00:14:47.710\nNow I've been thinking, I don't know if\nI'm really feeling the letter d after all,\n\n241\n00:14:47.710 --> 00:14:55.568\nso I'm gonna go with myFavLetters.pop.\n\n242\n00:14:55.568 --> 00:15:00.090\nAnd okay, I read the documentation,\nbut I don't know if\n\n243\n00:15:00.090 --> 00:15:04.730\nI quite get what that does, so I'm a big\nproponent of try things and observe.\n\n244\n00:15:04.730 --> 00:15:07.994\nSometimes you just gotta break things and\nsee what happens and\n\n245\n00:15:07.994 --> 00:15:12.430\nthen go, yeah don't do that anymore or\nhey that actually works.\n\n246\n00:15:12.430 --> 00:15:15.210\nSo that's a little bit\nof programming also.\n\n247\n00:15:15.210 --> 00:15:19.800\nAnd notice that the pop\nactually pops the last one off.\n\n248\n00:15:19.800 --> 00:15:21.970\nIt just flicks it off to the end.\n\n249\n00:15:21.970 --> 00:15:24.540\nNow that we've seen just calling that pop,\nlet's go ahead and\n\n250\n00:15:24.540 --> 00:15:28.500\nactually do a little bit of\ninvestigation within that pop method.\n\n251\n00:15:30.300 --> 00:15:33.596\nSo gotta scroll down, actually have\nto find it in the documentation.\n\n252\n00:15:33.596 --> 00:15:39.910\nMutator methods and pop.\n\n253\n00:15:39.910 --> 00:15:43.960\nSo if I pop,\nnotice it gives me the syntax,\n\n254\n00:15:43.960 --> 00:15:46.440\nit will always just pop the last one.\n\n255\n00:15:46.440 --> 00:15:49.760\nNow, I tell you this because there are\nsome other languages that can dynamically\n\n256\n00:15:49.760 --> 00:15:54.450\nshrink and grow these collections and\npop has a little bit different usage.\n\n257\n00:15:54.450 --> 00:15:57.442\nPop is typically used in\nJavaScript just for the last one.\n\n258\n00:15:57.442 --> 00:16:04.551\nIf I wanted to get rid of the first one,\nwell I can look through the documentation.\n\n259\n00:16:04.551 --> 00:16:08.709\nAnd see removes the first element from\nan array and returns that element.\n\n260\n00:16:08.709 --> 00:16:12.600\nWell, okay let's see how that works out.\n\n261\n00:16:12.600 --> 00:16:17.224\nSo I'm gonna copy these and\njust say shift.\n\n262\n00:16:19.255 --> 00:16:24.398\nSo if I shift this, I've actually\npulled it off from the front and\n\n263\n00:16:24.398 --> 00:16:29.164\nnow I have a new version that is\npulled one off from the front,\n\n264\n00:16:29.164 --> 00:16:31.523\npulled one off from the back.\n\n265\n00:16:31.523 --> 00:16:36.769\nSo I have those but\nwhat if I wanted to, can I remove,\n\n266\n00:16:36.769 --> 00:16:41.899\nand replace, and\nI could do a bunch of operations,\n\n267\n00:16:41.899 --> 00:16:45.360\nkind of the final mutation.\n\n268\n00:16:45.360 --> 00:16:48.950\nAnd this one's kind of a weird word,\nsplice.\n\n269\n00:16:48.950 --> 00:16:51.380\nAnd I caution you about splice.\n\n270\n00:16:51.380 --> 00:16:55.900\nSplice serves, it's like a multitool.\n\n271\n00:16:55.900 --> 00:16:58.640\nYou're like look I have scissors and\na toothpick and\n\n272\n00:16:58.640 --> 00:17:01.720\na corkscrew and there's a lot going on.\n\n273\n00:17:01.720 --> 00:17:04.670\nSplice is kind of like that,\nso be very careful.\n\n274\n00:17:04.670 --> 00:17:08.102\nIf we look at the splice\nsyntax I have a start and\n\n275\n00:17:08.102 --> 00:17:13.125\nthen notice I get another listing so\nI can give it a starting number.\n\n276\n00:17:13.125 --> 00:17:16.100\nI can give it a starting\nnumber with the delete count.\n\n277\n00:17:16.100 --> 00:17:20.390\nAnd give it a starting number with\na delete count, and then item 1, item 2,\n\n278\n00:17:20.390 --> 00:17:20.924\nitem 3.\n\n279\n00:17:20.924 --> 00:17:25.410\nIf you read about these parameters,\nstart is always required.\n\n280\n00:17:25.410 --> 00:17:28.292\nAnything that is not listed as optional,\nyou have to provide.\n\n281\n00:17:28.292 --> 00:17:31.690\nDelete count is optional.\n\n282\n00:17:31.690 --> 00:17:35.070\nAnd that means how many\nthings do you wanna delete,\n\n283\n00:17:35.070 --> 00:17:37.900\ndepending on where you start, okay?\n\n284\n00:17:37.900 --> 00:17:42.190\nAnd an item is what do you want to\nreplace which you've just deleted.\n\n285\n00:17:42.190 --> 00:17:43.265\nSo, that's kinda weird.\n\n286\n00:17:43.265 --> 00:17:46.730\nLet's see how that actually\ndiffers in context.\n\n287\n00:17:48.090 --> 00:17:50.650\nI'm actually going to comment these out\n\n288\n00:17:50.650 --> 00:17:54.560\njust because I wanna get back to\nthe original declarations here.\n\n289\n00:17:54.560 --> 00:17:56.385\nSo we can try to reason about these.\n\n290\n00:17:56.385 --> 00:17:59.641\nAnd let me add that comments so\n\n291\n00:17:59.641 --> 00:18:05.641\nwe can get some overflow or\nover-scroll protection.\n\n292\n00:18:08.102 --> 00:18:13.830\nSo myFaveNums as weve seen is 42,\n13 and 7.\n\n293\n00:18:13.830 --> 00:18:21.460\nWell, what happens if I\nmyFaveNums splice at 1?\n\n294\n00:18:21.460 --> 00:18:24.178\nIf I go back and read and\nI actually have to type splice.\n\n295\n00:18:24.178 --> 00:18:30.839\nIf I go back and read index at\nwhich to start changing the array.\n\n296\n00:18:30.839 --> 00:18:34.085\nOkay, well,\n\n297\n00:18:34.085 --> 00:18:41.124\nif I console.log myFavNums,\n\n298\n00:18:46.121 --> 00:18:48.150\nThank goodness for keyboard shortcuts.\n\n299\n00:18:50.410 --> 00:18:53.030\nLet's see how those have changed.\n\n300\n00:18:53.030 --> 00:18:55.480\nOkay, well interesting, hm.\n\n301\n00:18:55.480 --> 00:19:00.658\nSo I splice and I start at 1 and\nbecause I didn't tell it what to do,\n\n302\n00:19:00.658 --> 00:19:05.941\nit just went, cool, I'm gonna cut\neverything off starting at 1.\n\n303\n00:19:05.941 --> 00:19:08.300\nAnd okay, well that could be kinda weird.\n\n304\n00:19:08.300 --> 00:19:12.210\nBut how does that differ than,\nand I have to comment this out.\n\n305\n00:19:12.210 --> 00:19:15.050\nBecause these are mutating,\nI can't kinda chain them together and\n\n306\n00:19:15.050 --> 00:19:18.380\nget reliable results for comparison.\n\n307\n00:19:18.380 --> 00:19:19.860\nSo do keep that in mind.\n\n308\n00:19:19.860 --> 00:19:22.748\nWhat if I instead say,\n\n309\n00:19:22.748 --> 00:19:27.613\nmyFavNums.splice 1 or better yet,\n\n310\n00:19:27.613 --> 00:19:33.631\n0, But only put 1 as the delete count?\n\n311\n00:19:33.631 --> 00:19:34.699\nLet's see how that differs.\n\n312\n00:19:37.403 --> 00:19:42.156\nAnd in fact it starts at 0 but it only\ndeletes the first thing it comes to, and\n\n313\n00:19:42.156 --> 00:19:43.510\nthat's different.\n\n314\n00:19:43.510 --> 00:19:46.410\nIf I put just 0 and just for\n\n315\n00:19:46.410 --> 00:19:51.860\ncomparison it will actually\ndelete everything in the array.\n\n316\n00:19:51.860 --> 00:19:56.262\nSo telling it how many things to delete\nafter the starting position can be\n\n317\n00:19:56.262 --> 00:19:57.282\nadvantageous.\n\n318\n00:19:57.282 --> 00:20:05.115\nAnd then the final final form\nof splice is let's say, 2 and 3.\n\n319\n00:20:06.135 --> 00:20:08.885\nNow this looks like a bunch of numbers,\nbut I'm starting at 0,\n\n320\n00:20:08.885 --> 00:20:14.257\nI'm deleting the first one, and\nI'm replacing it with item 1, item 2.\n\n321\n00:20:15.290 --> 00:20:17.480\nLet's remind ourselves of\nwhat that looked like.\n\n322\n00:20:17.480 --> 00:20:20.371\nIt was 42, 13 and 17.\n\n323\n00:20:20.371 --> 00:20:23.720\nBut I delete the first one and\nreplace 2 and 3, I should see,\n\n324\n00:20:23.720 --> 00:20:26.556\nif I'm reading this\ndocumentation correctly, and\n\n325\n00:20:26.556 --> 00:20:28.178\nit's a toss up sometimes-\n&gt;&gt; [LAUGH]\n\n326\n00:20:28.178 --> 00:20:31.564\n&gt;&gt; Not gonna lie, I should see 2, 3,\n\n327\n00:20:31.564 --> 00:20:32.800\n13 and 7.\n\n328\n00:20:32.800 --> 00:20:33.880\nDon't forget to save.\n\n329\n00:20:33.880 --> 00:20:38.810\nAnd in fact, I've deleted the first one\nand replaced it with how many everythings\n\n330\n00:20:38.810 --> 00:20:42.680\nI want to put on the back end of a splice.\n\n331\n00:20:43.890 --> 00:20:48.100\nAgain, splice, you have to be careful\nbecause it does a great deal of things and\n\n332\n00:20:48.100 --> 00:20:49.310\nit does mutate your array.\n\n333\n00:20:50.990 --> 00:20:52.970\nSo those are the mutator methods.\n\n334\n00:20:54.060 --> 00:20:59.720\nWell, there's actually ways to transform,\nmove, change.\n\n335\n00:20:59.720 --> 00:21:06.490\nBut it does require us to kind of suspend\nour misunderstanding of some new concepts.\n\n336\n00:21:06.490 --> 00:21:10.680\nWe're gonna actually have to declare some\nfunctions which we will see more in depth\n\n337\n00:21:10.680 --> 00:21:11.930\nat a later time.\n\n338\n00:21:11.930 --> 00:21:15.360\nBut just stay with me and\nstay in awe of the magic.\n\n339\n00:21:15.360 --> 00:21:16.180\nI hope it's magical.\n\n340\n00:21:16.180 --> 00:21:18.830\nIf it's not magical,\njust pretend it's magic.\n\n341\n00:21:20.760 --> 00:21:22.850\nSo, we have myFavNums.\n\n342\n00:21:22.850 --> 00:21:27.870\nI'm actually going to\nsay function doubler and\n\n343\n00:21:27.870 --> 00:21:32.480\nthat's going to take a number.\n\n344\n00:21:32.480 --> 00:21:38.289\nAnd that's going to return\n2 times that number.\n\n345\n00:21:38.289 --> 00:21:43.200\nOkay, so whatever I give it it's\ngonna give me back twice that.\n\n346\n00:21:43.200 --> 00:21:46.340\nAnd I'm also gonna make tripler.\n\n347\n00:21:48.270 --> 00:21:49.580\nAnd that's gonna take a number.\n\n348\n00:21:49.580 --> 00:21:51.429\nI should be careful.\n\n349\n00:21:51.429 --> 00:21:57.967\nI should make this num,\nbecause number is a type.\n\n350\n00:21:57.967 --> 00:22:03.090\nIt's going to take a num,\nand return 3 times num.\n\n351\n00:22:03.090 --> 00:22:06.880\nNotice these are very similar,\nother than the 2 and the 3 and the name.\n\n352\n00:22:06.880 --> 00:22:11.100\nAnd we'll see how that plays into\nfunction declarations later.\n\n353\n00:22:11.100 --> 00:22:12.860\nSo I've declared these functions and for\n\n354\n00:22:12.860 --> 00:22:14.860\nnow we're just gonna\nleave those at the top.\n\n355\n00:22:16.620 --> 00:22:19.318\nWell, we're treating\nthese like a number so\n\n356\n00:22:19.318 --> 00:22:22.304\nwhat kind of array would\nwe need to use these with?\n\n357\n00:22:22.304 --> 00:22:25.251\nWell, a number array,\notherwise it doesn't make any sense.\n\n358\n00:22:25.251 --> 00:22:30.703\nOkay, let's see, so if I console that log,\n\n359\n00:22:30.703 --> 00:22:34.300\nthere is a way to map through.\n\n360\n00:22:34.300 --> 00:22:39.220\nAnd what I mean by map is, apply this\nfunction to each element of the array.\n\n361\n00:22:39.220 --> 00:22:44.050\nSo if I were to say doubler\nof 42 I would get 84.\n\n362\n00:22:44.050 --> 00:22:50.777\nDoubler of 23, I should get 26,\nand doubler of 7, I should get 14.\n\n363\n00:22:50.777 --> 00:22:55.625\nAnd I make sure I have all my splices so\nwe'll see the original version.\n\n364\n00:22:56.625 --> 00:23:02.898\nWe will say myFavNums.map doubler and\n\n365\n00:23:02.898 --> 00:23:07.135\nthen let's console log myFavNums again.\n\n366\n00:23:11.465 --> 00:23:14.660\nLet's see, the output of that,\nthere it was originally.\n\n367\n00:23:14.660 --> 00:23:18.910\nThere's doubler applied, so\nI've doubled each element.\n\n368\n00:23:18.910 --> 00:23:21.310\nAnd then here is myFavNums again.\n\n369\n00:23:21.310 --> 00:23:22.240\nThat's kinda weird.\n\n370\n00:23:23.440 --> 00:23:28.070\nMap is one of those functions that\nactually returns you a copy with\n\n371\n00:23:28.070 --> 00:23:28.750\nthe changes.\n\n372\n00:23:28.750 --> 00:23:32.000\nIt's kinda like those string methods\nthat will return you a copy.\n\n373\n00:23:32.000 --> 00:23:35.684\nSo map doesn't change the original,\nit is not a mutator method.\n\n374\n00:23:35.684 --> 00:23:40.634\nIt is instead a transformation\nthat returns you a copy by\n\n375\n00:23:40.634 --> 00:23:44.650\napplying the function across the elements.\n\n376\n00:23:44.650 --> 00:23:47.770\n[COUGH] So there's a couple other ones\nthat are like that that we do need another\n\n377\n00:23:47.770 --> 00:23:48.590\nfunction for them.\n\n378\n00:23:50.190 --> 00:24:00.130\nSo let's make a function,\nisLessThanTwo, okay.\n\n379\n00:24:00.130 --> 00:24:05.403\nAnd that takes a number and\nreturns num less than 2.\n\n380\n00:24:05.403 --> 00:24:07.881\nOkay, and\nthat's just gonna evaluate to a yes or no.\n\n381\n00:24:07.881 --> 00:24:08.693\nIs it less than 2?\n\n382\n00:24:08.693 --> 00:24:09.534\nYes.\n\n383\n00:24:09.534 --> 00:24:11.929\nIs it more than, or is it not less than 2?\n\n384\n00:24:11.929 --> 00:24:14.870\nExcuse me, is it less than 2, yes or no?\n\n385\n00:24:14.870 --> 00:24:18.680\nWell, how does that work, and\nnow I don't have to comment these out\n\n386\n00:24:18.680 --> 00:24:23.260\nbecause the MAP method does\nnot alter the original array.\n\n387\n00:24:23.260 --> 00:24:27.260\nSo let's make a couple of copies here and\nI'm gonna use this filter.\n\n388\n00:24:27.260 --> 00:24:33.740\nFilter is a way to only get certain\nportions of an array as a copy.\n\n389\n00:24:33.740 --> 00:24:37.460\nSo islessthantwo.\n\n390\n00:24:37.460 --> 00:24:42.830\nWell, if I go back and look,\nI should get absolutely nothing.\n\n391\n00:24:44.100 --> 00:24:46.400\nI think I have a good\ngut instinct about this.\n\n392\n00:24:46.400 --> 00:24:51.590\nAnd I do actually get an empty array, but\nnotice the original one is still intact.\n\n393\n00:24:51.590 --> 00:24:54.940\nAnd that's a great stance to take.\n\n394\n00:24:54.940 --> 00:24:58.000\nMutating arrays can be\nproblematic from time to time.\n\n395\n00:24:58.000 --> 00:25:01.780\nIf you can get away without mutating, it\nwill make your life a little bit easier.\n\n396\n00:25:03.160 --> 00:25:08.614\nHowever, let's change\nthis to is more than 2,\n\n397\n00:25:08.614 --> 00:25:13.679\njust to see, or actually IsMoreThanSeven.\n\n398\n00:25:15.607 --> 00:25:18.660\nCuz I know that seven is in the array.\n\n399\n00:25:18.660 --> 00:25:25.058\nSo I wanna see, does it filter out a\nselect portion of what is available to me?\n\n400\n00:25:25.058 --> 00:25:29.780\nSo, IsMoreThanSeven.\n\n401\n00:25:29.780 --> 00:25:33.610\nSo I should get only the numbers\nwithin the myFavNums array\n\n402\n00:25:33.610 --> 00:25:35.250\nthat are bigger than seven.\n\n403\n00:25:37.290 --> 00:25:39.020\nAnd I, in fact, get 42 and 13.\n\n404\n00:25:39.020 --> 00:25:42.310\nBut as a reminder,\nthe original array does not change.\n\n405\n00:25:43.640 --> 00:25:48.060\nNow, those are kind of a great start to\n\n406\n00:25:49.340 --> 00:25:52.520\nsome pretty powerful applications\nthat you've seen on the Internet.\n\n407\n00:25:52.520 --> 00:25:57.410\nThis is actually the operations\nthat may occur in big data.\n\n408\n00:25:57.410 --> 00:26:01.530\nThey are not in JavaScript necessarily,\nbut they're for condensing down,\n\n409\n00:26:01.530 --> 00:26:06.380\nmanipulating data, and then having\nwebsites or other applications built with\n\n410\n00:26:06.380 --> 00:26:10.740\nJavaScript be very dynamic based\non just the decision making.\n\n411\n00:26:10.740 --> 00:26:16.023\nIn addition to these MAP filter\nmethods are a lot more readable\n\n412\n00:26:16.023 --> 00:26:20.706\nthan changing individual\nelements within the array.\n\n413\n00:26:22.248 --> 00:26:23.261\n&gt;&gt; All right, Justin,\n\n414\n00:26:23.261 --> 00:26:26.480\nanything else we need to go over when\nit comes to the world of arrays?\n\n415\n00:26:26.480 --> 00:26:28.130\nA lot of great stuff, so far.\n\n416\n00:26:28.130 --> 00:26:30.170\n&gt;&gt; No,\nI think that actually gets a started.\n\n417\n00:26:30.170 --> 00:26:34.990\nAs always, we can always get really\nnit picky with a data structure,\n\n418\n00:26:34.990 --> 00:26:38.070\nbut I think this will\nserve our purpose well.\n\n419\n00:26:38.070 --> 00:26:39.290\n&gt;&gt; All right, fantastic.\n\n420\n00:26:39.290 --> 00:26:43.410\nAgain, great demonstrations as always,\nreally thoroughly explaining\n\n421\n00:26:43.410 --> 00:26:46.220\nwhat arrays are and what we can do with\nthem and how we can work with them.\n\n422\n00:26:46.220 --> 00:26:47.500\nSo we appreciate that.\n\n423\n00:26:47.500 --> 00:26:49.670\nWe hope everybody out there\nenjoyed watching this one.\n\n424\n00:26:49.670 --> 00:26:52.630\nSigning off for ITProTv,\nI've been your host, Mike Rodrick.\n\n425\n00:26:52.630 --> 00:26:53.599\n&gt;&gt; And I'm Justin Dennison.\n\n426\n00:26:53.599 --> 00:26:56.080\n&gt;&gt; And we'll see you next time.\n\n427\n00:26:56.080 --> 00:27:02.061\n&gt;&gt; [MUSIC]\n\n428\n00:27:02.061 --> 00:27:04.038\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "202775240"
        },
        {
          "description": "In this episode, Justin and Mike discuss objects. They define what an object is and look at it's properties and methods. They also demonstrate creating and working with an object.",
          "length": "1512",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-6-1-_working_with_objects-020117-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-6-1-_working_with_objects-020117-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-6-1-_working_with_objects-020117-1-sm.jpg",
          "title": "Working with Objects",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:03.678\nWelcome to ITProTV,\n\n2\n00:00:03.678 --> 00:00:09.111\nI'm your host [CROSSTALK]\n&gt;&gt; You're\n\n3\n00:00:09.111 --> 00:00:12.707\nwatching ITProTV\n&gt;&gt; Hello,\n\n4\n00:00:12.707 --> 00:00:15.770\nwelcome to another exciting\nepisode here at ITProTV.\n\n5\n00:00:15.770 --> 00:00:17.930\nI'm your host Mike Rodrick, and\n\n6\n00:00:17.930 --> 00:00:20.160\ntoday we're doing our\nintroduction to JavaScript.\n\n7\n00:00:20.160 --> 00:00:23.470\nAnd in this episode we're gonna\nbe working with objects, right?\n\n8\n00:00:23.470 --> 00:00:25.510\nWe've heard that term a couple of times.\n\n9\n00:00:25.510 --> 00:00:27.950\nWe've looked at and\nwe were talking about different types.\n\n10\n00:00:27.950 --> 00:00:32.670\nWe've seen some interesting results coming\nback with that what is the open brace,\n\n11\n00:00:32.670 --> 00:00:33.790\nclose brace right?\n\n12\n00:00:33.790 --> 00:00:35.360\nAnd a little object, object.\n\n13\n00:00:35.360 --> 00:00:40.380\nWell know we're gonna learn a little more\nabout what the heck these objects are and\n\n14\n00:00:40.380 --> 00:00:42.290\nwhat we can do with them in JavaScript.\n\n15\n00:00:42.290 --> 00:00:45.030\nAnd here to show us the way is Mr.\nJustin Dennison.\n\n16\n00:00:45.030 --> 00:00:45.850\nWelcome back, Justin.\n\n17\n00:00:45.850 --> 00:00:47.230\n&gt;&gt; Thanks for having me back, Mike.\n\n18\n00:00:47.230 --> 00:00:48.550\nYeah, objects.\n\n19\n00:00:48.550 --> 00:00:52.860\nThat's kind of a weird word in JavaScript,\nbecause it can mean so many things.\n\n20\n00:00:52.860 --> 00:00:56.080\nBut we're going to kind\nof go to the basic level.\n\n21\n00:00:56.080 --> 00:01:00.590\nAnd see what are actually,\nwhat are we using these objects for?\n\n22\n00:01:00.590 --> 00:01:02.890\nNow, why would we need these objects?\n\n23\n00:01:02.890 --> 00:01:07.170\nIt's a great way to bundle behavior and\nproperties.\n\n24\n00:01:07.170 --> 00:01:11.330\nAs a matter of fact arrays are technically\nobjects they have properties, lengths.\n\n25\n00:01:11.330 --> 00:01:14.510\nThey have behaviors pop, push.\n\n26\n00:01:14.510 --> 00:01:17.590\nStrings are kinda also an object thing.\n\n27\n00:01:17.590 --> 00:01:21.560\nAnd JavaScript abides by\nthe object-oriented programming.\n\n28\n00:01:21.560 --> 00:01:27.810\nSo, since we have these built-in objects,\nwe can actually make our own.\n\n29\n00:01:27.810 --> 00:01:30.020\nNow, what is an object?\n\n30\n00:01:30.020 --> 00:01:33.450\nWell, we're actually gonna do\na little bit of planning before we\n\n31\n00:01:33.450 --> 00:01:37.050\nimplement any JavaScript, so we can see,\nkind of, a concrete example.\n\n32\n00:01:37.050 --> 00:01:40.470\nIt's not something that you may\nnecessarily use in an application.\n\n33\n00:01:40.470 --> 00:01:47.470\nBut it help conceptualize this abstract\nwords that people make up or use.\n\n34\n00:01:47.470 --> 00:01:51.570\nI don't know what you're saying and\nthat makes me feel good or\n\n35\n00:01:51.570 --> 00:01:53.020\nit makes you feel good.\n\n36\n00:01:53.020 --> 00:01:57.760\nBut let's actually see what the plan for\nthe object is.\n\n37\n00:01:57.760 --> 00:02:04.190\nSo I'm actually going to open up\nmy working with objects folder.\n\n38\n00:02:04.190 --> 00:02:07.390\nAgain making sure that I have\neverything tidy and neat.\n\n39\n00:02:07.390 --> 00:02:11.040\nAnd while I'm here, while I'm opening\nthings up I'm go ahead and open that file.\n\n40\n00:02:11.040 --> 00:02:12.740\nThe index.html file in Chrome.\n\n41\n00:02:12.740 --> 00:02:16.530\nWe don't need it at this moment,\nbut we may need it here shortly.\n\n42\n00:02:17.850 --> 00:02:22.200\nSo as always, make sure you're\nopening up the correct HTML file.\n\n43\n00:02:22.200 --> 00:02:25.120\nAnd here we go, and\nthen the Chrome DevTools.\n\n44\n00:02:25.120 --> 00:02:29.010\nNow, I keyboard shortcutted that, but\n\n45\n00:02:29.010 --> 00:02:34.390\njust as a reminder, we can go to more\ntools, developer tools, and here we go.\n\n46\n00:02:34.390 --> 00:02:37.180\nSo we're going to leave this aside for\na little bit, and\n\n47\n00:02:37.180 --> 00:02:40.910\nlet's actually plan what an object is.\n\n48\n00:02:40.910 --> 00:02:45.160\nUse this block level [INAUDIBLE] again,\nI mean, app.js.\n\n49\n00:02:45.160 --> 00:02:47.350\nSo let's think about an object.\n\n50\n00:02:47.350 --> 00:02:50.380\nWhen I say to you, hey,\nwhat's that object there?\n\n51\n00:02:50.380 --> 00:02:53.300\nYou're not thinking programming typically,\nyou're going,\n\n52\n00:02:53.300 --> 00:02:58.420\nthat's a chair, or,\nthat's a dog, or, that's a car.\n\n53\n00:02:58.420 --> 00:03:03.620\nAnd I like to use car because we have\na lot of interaction with vehicles,\n\n54\n00:03:03.620 --> 00:03:07.750\nand we have some idea about\nthe general behaviours and\n\n55\n00:03:07.750 --> 00:03:09.840\nproperties that would define a car.\n\n56\n00:03:09.840 --> 00:03:11.930\nIf I made a list of these behaviours or\nproperties,\n\n57\n00:03:11.930 --> 00:03:16.730\nyou'd go that's probably a car, or\na truck, or something like that.\n\n58\n00:03:16.730 --> 00:03:19.250\nSo let's look at what a car would be.\n\n59\n00:03:19.250 --> 00:03:21.520\nIf I ask you what\nare the properties of a car?\n\n60\n00:03:21.520 --> 00:03:22.380\nWhat does it look like?\n\n61\n00:03:22.380 --> 00:03:24.460\nWhat does it,\nhopefully not what it tastes like.\n\n62\n00:03:24.460 --> 00:03:27.420\nI don't know the taste of cars\n&gt;&gt; [LAUGH]\n\n63\n00:03:27.420 --> 00:03:30.350\n&gt;&gt; Maybe you do, maybe there's a reason,\n\n64\n00:03:30.350 --> 00:03:36.830\nbut we have properties, and\nwe have methods for objects.\n\n65\n00:03:36.830 --> 00:03:43.750\nWe've seen this when strings, arrays,\nnumbers even, the number built in type.\n\n66\n00:03:43.750 --> 00:03:48.820\nSo this should be no surprise, but now\nthat we're defining our own object that we\n\n67\n00:03:48.820 --> 00:03:54.990\nare planning, we are the creator of this,\nwe get to mold it like play-doh.\n\n68\n00:03:54.990 --> 00:03:58.980\nThat's incredibly powerful and\nprobably one of the more satisfying\n\n69\n00:03:58.980 --> 00:04:02.730\nthings when it plays out correctly,\nthat you can do with your programming.\n\n70\n00:04:02.730 --> 00:04:04.930\nSo what are some properties of a car?\n\n71\n00:04:04.930 --> 00:04:07.310\nWell, I know when I think about a car,\n\n72\n00:04:07.310 --> 00:04:12.649\none of the first things I\nnotice is the color, right?\n\n73\n00:04:12.649 --> 00:04:16.360\nAnd then, sometimes when I'm really,\nyou know,\n\n74\n00:04:16.360 --> 00:04:19.000\nstruck by a car, I'm like, who makes that.\n\n75\n00:04:19.000 --> 00:04:21.060\nSo I would have the make.\n\n76\n00:04:21.060 --> 00:04:24.760\nAnd correspondingly,\nsince manufacturers have multiple models,\n\n77\n00:04:24.760 --> 00:04:26.190\nI would have a model.\n\n78\n00:04:26.190 --> 00:04:30.010\nSo I would have a make, a model, a color.\n\n79\n00:04:30.010 --> 00:04:33.730\nAnd then what are some other\nthings that might be there?\n\n80\n00:04:33.730 --> 00:04:35.620\n&gt;&gt; Maybe number of doors.\n\n81\n00:04:35.620 --> 00:04:36.540\n&gt;&gt; Number of doors.\n\n82\n00:04:36.540 --> 00:04:41.320\nSo number, and\nI'm not writing this in JavaScript,\n\n83\n00:04:41.320 --> 00:04:46.580\nI'm just brainstorming here and this is\nsomething that I recommend you do as you\n\n84\n00:04:46.580 --> 00:04:49.420\nundertake some future\nprogramming projects.\n\n85\n00:04:49.420 --> 00:04:52.400\nNumber of doors,\nthat's a good one and believe it or\n\n86\n00:04:52.400 --> 00:04:56.730\nnot maybe even number of wheels.\n\n87\n00:04:56.730 --> 00:04:58.620\nCuz there are some new cars\nthat I'm seeing lately,\n\n88\n00:04:58.620 --> 00:05:01.393\nthat there's like two wheels in\nthe front and one wheel in the back.\n\n89\n00:05:01.393 --> 00:05:04.280\n&gt;&gt; [LAUGH]\n&gt;&gt; I mean they look cool but I don't know.\n\n90\n00:05:04.280 --> 00:05:09.180\nAnd they're open, it's crazy so\nthese are wonderful properties but\n\n91\n00:05:09.180 --> 00:05:15.450\nthen as I start looking I'm like that\nthing can accelerate wonderfully.\n\n92\n00:05:15.450 --> 00:05:17.050\nIt can move quickly.\n\n93\n00:05:17.050 --> 00:05:19.060\nAnd I'm gonna dial this back a little bit.\n\n94\n00:05:19.060 --> 00:05:21.229\nWe can get super specific\nabout the behaviors.\n\n95\n00:05:22.770 --> 00:05:27.600\nWith the car, but I could move it.\n\n96\n00:05:27.600 --> 00:05:30.330\nRight?\nIt can move under it's own power.\n\n97\n00:05:30.330 --> 00:05:34.640\nIt can stop once it starts\nmoving it could brake.\n\n98\n00:05:34.640 --> 00:05:36.730\nAnd then, what else could it do?\n\n99\n00:05:38.540 --> 00:05:39.360\n&gt;&gt; Turn maybe.\n\n100\n00:05:39.360 --> 00:05:41.318\n&gt;&gt; It could, yep turn.\n\n101\n00:05:41.318 --> 00:05:42.705\nAnd.\n\n102\n00:05:42.705 --> 00:05:44.577\n&gt;&gt; It could honk.\n\n103\n00:05:44.577 --> 00:05:48.435\n&gt;&gt; Honk, I like that one,\nthat ones a good one.\n\n104\n00:05:48.435 --> 00:05:52.258\n[SOUND] I think that's some\nof that old school honking.\n\n105\n00:05:52.258 --> 00:05:56.128\nBut I have these properties and\nmethods but I just have a list but\n\n106\n00:05:56.128 --> 00:05:57.980\nhow would these be used.\n\n107\n00:05:57.980 --> 00:06:03.600\nWell if I knew that I was\nkeeping a list or a database or\n\n108\n00:06:03.600 --> 00:06:08.160\nsome back-end service with full of\na bunch of making miles of cars.\n\n109\n00:06:08.160 --> 00:06:13.200\nI could build JavaScript objects that map\nthat information into native JavaScript\n\n110\n00:06:13.200 --> 00:06:15.920\nbecause then I could use\nit as a display method.\n\n111\n00:06:15.920 --> 00:06:19.520\nNow I'm talking kinda hand wavy\nhigh level at this moment.\n\n112\n00:06:19.520 --> 00:06:21.880\nBut trust me you'll see\nhow this place out.\n\n113\n00:06:21.880 --> 00:06:26.590\nBut right now, we wanna focus\non just the basic object usage.\n\n114\n00:06:27.610 --> 00:06:30.070\nNow, how do you make an object?\n\n115\n00:06:30.070 --> 00:06:34.090\nWell, there's a couple of ways, just like\nwith arrays, there is a literal type.\n\n116\n00:06:34.090 --> 00:06:38.870\nSo, myObj, and we'll come back\nto that car in just a moment.\n\n117\n00:06:38.870 --> 00:06:42.266\nSo, myObj, we've seen the open\nclose curly brace, remember,\n\n118\n00:06:42.266 --> 00:06:44.905\nit's like a pair of shoes,\nyou need both of them.\n\n119\n00:06:44.905 --> 00:06:45.890\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n120\n00:06:45.890 --> 00:06:49.360\nif you don't believe me\n&gt;&gt; Walk in somewhere with one shoe on.\n\n121\n00:06:49.360 --> 00:06:50.960\nAll kinds of questions.\n\n122\n00:06:50.960 --> 00:06:52.420\nLike, why is he wearing one shoe?\n\n123\n00:06:52.420 --> 00:06:54.600\nGreat conversation starter though.\n\n124\n00:06:54.600 --> 00:06:56.220\nSo, just remember.\n\n125\n00:06:56.220 --> 00:06:58.580\nMan, I don't know how to break\nthe ice at this gathering.\n\n126\n00:06:58.580 --> 00:06:59.110\nWear one shoe.\n\n127\n00:07:00.340 --> 00:07:05.500\nWe also have the constructor function or\nthe built in.\n\n128\n00:07:05.500 --> 00:07:09.200\nSo built in function and\n\n129\n00:07:09.200 --> 00:07:15.120\nI can actually create object like so.\n\n130\n00:07:15.120 --> 00:07:19.060\nI can also say new object.\n\n131\n00:07:19.060 --> 00:07:22.780\nSo the new, JavaScript kinda\ntosses that around a little bit,\n\n132\n00:07:22.780 --> 00:07:28.040\nthe new comes from some of\nthe roots of JavaScript and\n\n133\n00:07:28.040 --> 00:07:31.050\nneeding that object oriented,\nthis is to be familiar.\n\n134\n00:07:31.050 --> 00:07:31.790\nBut a lot of times,\n\n135\n00:07:31.790 --> 00:07:36.920\nthe built ins are a little wishy washy\nabout enforcing the usage of that.\n\n136\n00:07:36.920 --> 00:07:38.750\nBut do be careful,\n\n137\n00:07:38.750 --> 00:07:42.940\nthere are a couple that new versus\nnon new that do not behave the same.\n\n138\n00:07:42.940 --> 00:07:46.120\nThis just happens to be one that does.\n\n139\n00:07:46.120 --> 00:07:47.600\nSo I can do that.\n\n140\n00:07:47.600 --> 00:07:53.622\nI tend to use the literal\nwhen creating an object.\n\n141\n00:07:53.622 --> 00:07:56.713\nAnd how can I modify objects?\n\n142\n00:07:56.713 --> 00:07:59.702\nWell that would be nice,\nbecause if you paint a car.\n\n143\n00:07:59.702 --> 00:08:02.359\nWell, I need to change a property.\n\n144\n00:08:02.359 --> 00:08:04.930\nSo objects,\nI'm gonna look at this my object.\n\n145\n00:08:04.930 --> 00:08:07.940\nLet me hop down here so\nwe don't have that over scroll.\n\n146\n00:08:10.010 --> 00:08:14.309\nSo myObj and\nthen I can use a shortcut syntax\n\n147\n00:08:14.309 --> 00:08:18.380\nas long as the property has a valid name.\n\n148\n00:08:20.635 --> 00:08:22.610\nLike count = 0.\n\n149\n00:08:22.610 --> 00:08:27.910\nSo I have some property called count or\nlength, right?\n\n150\n00:08:27.910 --> 00:08:29.970\nNotice that that is a word.\n\n151\n00:08:29.970 --> 00:08:34.671\nAs long as I have a word,\nI can use the shortcut syntax, otherwise\n\n152\n00:08:38.023 --> 00:08:42.000\nI have to use square\nbrackets like the array.\n\n153\n00:08:42.000 --> 00:08:44.540\nBut we'll see in just a moment\nwhat I'm actually doing.\n\n154\n00:08:46.320 --> 00:08:49.824\nSo let's log this out here.\n\n155\n00:08:54.007 --> 00:08:59.720\nAnd notice I have now constructed\nan object with two properties.\n\n156\n00:08:59.720 --> 00:09:04.470\nThe property called one, that's kind\nof a horrible property name, but\n\n157\n00:09:04.470 --> 00:09:11.180\nalso the property called count and I've\nassigned to them a corresponding value.\n\n158\n00:09:11.180 --> 00:09:14.280\nThese are called key value pairs.\n\n159\n00:09:14.280 --> 00:09:19.410\nSo this is the key on the left side and\nthe value is the assignment.\n\n160\n00:09:19.410 --> 00:09:24.000\nNow if I can assign, I should be able\nto do like a look up or a retrieval.\n\n161\n00:09:24.000 --> 00:09:28.830\nAnd in fact,\nI can do that in a variety of ways.\n\n162\n00:09:28.830 --> 00:09:30.660\nI can say count.\n\n163\n00:09:30.660 --> 00:09:32.760\nNotice it's the square brackets.\n\n164\n00:09:32.760 --> 00:09:36.150\nBut I didn't use square\nbrackets to set this.\n\n165\n00:09:36.150 --> 00:09:40.540\nWell, if it's a word, I can use either or,\nand that's just a convenience to you.\n\n166\n00:09:40.540 --> 00:09:42.710\nBecause typing a bunch\nof square brackets and\n\n167\n00:09:42.710 --> 00:09:45.800\nstrings can get a little\noverwhelming from time to time.\n\n168\n00:09:47.330 --> 00:09:51.710\nSo I can retrieve it like so\nor I can retrieve it like so.\n\n169\n00:09:51.710 --> 00:09:55.228\nYou will see that these actually\nprint out the exact same number.\n\n170\n00:09:55.228 --> 00:09:58.123\nAnd that's zero.\n\n171\n00:09:58.123 --> 00:10:02.216\nHowever I cannot do that if the key,\n\n172\n00:10:02.216 --> 00:10:08.765\nagain that's the thing on the left,\nthe property name,\n\n173\n00:10:08.765 --> 00:10:13.548\nif the key is not a string like my obj.1.\n\n174\n00:10:13.548 --> 00:10:17.298\nNotice my editor is telling me don't\ndo then, I'm gonna do it anyway just so\n\n175\n00:10:17.298 --> 00:10:18.599\nyou can see what happens.\n\n176\n00:10:20.846 --> 00:10:21.600\nAnd it broke.\n\n177\n00:10:22.890 --> 00:10:27.190\nThis is one of those syntax errors and\nthat's because this doesn't make sense.\n\n178\n00:10:27.190 --> 00:10:31.610\nJavaScript's just like I don't\nknow how to handle that.\n\n179\n00:10:31.610 --> 00:10:37.229\nIf you have non string keys,\n\n180\n00:10:37.229 --> 00:10:41.580\nwhat it actually does is\nit changes it to a string.\n\n181\n00:10:41.580 --> 00:10:46.120\nBut then you have to access it\nusing those bracketed syntax.\n\n182\n00:10:46.120 --> 00:10:52.580\nSo I can do one and\nnotice it does retrieve it, this one.\n\n183\n00:10:52.580 --> 00:10:57.620\nBut it is technically making everything\non the left a string representation so\n\n184\n00:10:57.620 --> 00:10:59.450\nbe very careful about that.\n\n185\n00:11:00.840 --> 00:11:02.380\nSo this is building up an object.\n\n186\n00:11:02.380 --> 00:11:07.620\nThat's not actually how you would design\nan object, build it up, use it, right?\n\n187\n00:11:08.670 --> 00:11:12.140\nSo, I'm going to get rid of this, and\n\n188\n00:11:12.140 --> 00:11:16.060\nlet's see how we would build\na large scale object literal.\n\n189\n00:11:16.060 --> 00:11:19.980\nNow, keep in mind we're gonna\nsee those functions and\n\n190\n00:11:19.980 --> 00:11:22.470\nsome other syntax that we\nhaven't seen before, but\n\n191\n00:11:22.470 --> 00:11:27.410\nthe goal is to get kind of a 10,000\nfoot view of what an object would do.\n\n192\n00:11:29.140 --> 00:11:31.306\nSo, and it's gonna be very simple and\n\n193\n00:11:31.306 --> 00:11:36.510\nnot necessarily something I would use in\nproduction, but it's a great starter.\n\n194\n00:11:36.510 --> 00:11:39.380\nSo let's say car, right?\n\n195\n00:11:40.470 --> 00:11:45.120\nSo I have this object literal, I went\nahead and put the semicolon, built it out.\n\n196\n00:11:45.120 --> 00:11:49.260\nI always pair my curly braces together and\n\n197\n00:11:49.260 --> 00:11:52.410\nthat way I don't get craziness going on,\nbut\n\n198\n00:11:53.540 --> 00:11:58.850\nI'm going to refer up here to these\nproperties and these methods.\n\n199\n00:11:58.850 --> 00:12:01.170\nNow I'm gonna go ahead and\nstub those out and\n\n200\n00:12:01.170 --> 00:12:04.520\nwhat you will find when I build these,\nI just build everything more or\n\n201\n00:12:04.520 --> 00:12:09.030\nless empty and then go back and adjust it\nafter I know that the syntax is correct.\n\n202\n00:12:10.270 --> 00:12:12.040\nAnd that's just helpful to me.\n\n203\n00:12:12.040 --> 00:12:19.690\nSo I need the color, Which is,\nI don't know, just empty string for now.\n\n204\n00:12:19.690 --> 00:12:21.679\nWe'll come back and decide a color.\n\n205\n00:12:21.679 --> 00:12:28.770\nI need a make, a model And\nthat's an empty string, and\n\n206\n00:12:28.770 --> 00:12:33.831\nI'm gonna change right here, just to show\nyou that they in fact, JavaScript allows\n\n207\n00:12:33.831 --> 00:12:38.752\nyou to leave off the quotes when you're\ncreating these literals like this between\n\n208\n00:12:38.752 --> 00:12:43.770\nthe curly braces but behind the scenes it\nactually puts the quotes in there for you.\n\n209\n00:12:43.770 --> 00:12:45.740\nThese are string representations.\n\n210\n00:12:45.740 --> 00:12:49.670\nIt's just a helper to keep\nyou from typing as much, but\n\n211\n00:12:49.670 --> 00:12:51.840\nbehind the scenes these all look the same.\n\n212\n00:12:53.630 --> 00:12:56.144\nSo I have model and\nthen I need number of doors.\n\n213\n00:12:59.223 --> 00:13:07.220\nAnd that is zero and\nthen number of wheels, and that is zero.\n\n214\n00:13:07.220 --> 00:13:11.070\nI've put the empty default value in\nthere just to get things working.\n\n215\n00:13:11.070 --> 00:13:13.350\nNow a couple of things\nyou should be aware of.\n\n216\n00:13:13.350 --> 00:13:15.790\nNotice these are all commas.\n\n217\n00:13:15.790 --> 00:13:19.680\nIf you accidentally put a semicolon\nthere everything looks fine.\n\n218\n00:13:19.680 --> 00:13:21.895\nIf I go back and refresh, it's broke.\n\n219\n00:13:21.895 --> 00:13:26.860\n[LAUGH] So a semicolon inside of\nan object will wreck your day.\n\n220\n00:13:26.860 --> 00:13:31.380\nIt will wreck your day really,\nand if you have giant objects,\n\n221\n00:13:31.380 --> 00:13:34.200\nobject literals, you go,\nI don't know what's wrong.\n\n222\n00:13:35.410 --> 00:13:37.150\nI have to sift through all this.\n\n223\n00:13:37.150 --> 00:13:39.060\nSo be very diligent about that.\n\n224\n00:13:39.060 --> 00:13:42.290\nCommas inside of object\nliterals are important.\n\n225\n00:13:42.290 --> 00:13:50.190\nLikewise if I accidentally do this, I got\nlots of string, I can leave this apart.\n\n226\n00:13:51.810 --> 00:13:53.000\nLet's see what happens.\n\n227\n00:13:54.010 --> 00:13:55.820\nI should not do that either.\n\n228\n00:13:55.820 --> 00:14:00.610\nI can't leave spaces if I'm\nusing the shorthand syntax.\n\n229\n00:14:01.670 --> 00:14:08.050\nThat is not true if I use this long\n\n230\n00:14:08.050 --> 00:14:14.100\nsyntax by actually using a string,\nunless I actually see no errors.\n\n231\n00:14:14.100 --> 00:14:15.662\nWhat does this car object look like?\n\n232\n00:14:21.564 --> 00:14:24.659\nI now have a car with a color,\nmake, model,\n\n233\n00:14:24.659 --> 00:14:28.690\nnumber space of space doors,\nand then number of wheels.\n\n234\n00:14:29.900 --> 00:14:34.090\nPersonally I tend to go with the\nshort-hand syntax, because as I've told\n\n235\n00:14:34.090 --> 00:14:37.790\nyou about my pinky finger and\nnot using double quotes or single quotes.\n\n236\n00:14:37.790 --> 00:14:41.820\nI tend to be as lazy as possible,\nespecially if you're doing this for\n\n237\n00:14:41.820 --> 00:14:43.890\nhours on end.\n\n238\n00:14:43.890 --> 00:14:45.800\nThose few keystrokes can really add up.\n\n239\n00:14:47.210 --> 00:14:51.600\nSo if I go back and I refresh and\nI have all of these properties.\n\n240\n00:14:51.600 --> 00:14:55.280\nNow these are the things\nthat are descriptive right?\n\n241\n00:14:55.280 --> 00:14:56.640\nThe five senses.\n\n242\n00:14:56.640 --> 00:14:59.780\nWhat does it taste like, what does it\nsmell like, what does it look like?\n\n243\n00:14:59.780 --> 00:15:03.075\nAnd they are contextually chosen.\n\n244\n00:15:03.075 --> 00:15:07.320\nThere's a lot of other properties of the\ncar that I could choose to represent it.\n\n245\n00:15:07.320 --> 00:15:09.920\nBut it may not make\nsense in my application.\n\n246\n00:15:09.920 --> 00:15:12.720\nFor instance,\nthat car has a lot of horse power, but\n\n247\n00:15:12.720 --> 00:15:19.360\nif I'm just doing car inventory, I don't\nknow if that's meaningful in that context.\n\n248\n00:15:19.360 --> 00:15:24.239\nBut if I'm doing car inventory for all\nexotic sports car that I'm getting ready\n\n249\n00:15:24.239 --> 00:15:27.310\nto sell, that might be\napplicable information to have.\n\n250\n00:15:27.310 --> 00:15:32.230\nSo these objects are very flexible, that's\none of the things that some people hate\n\n251\n00:15:32.230 --> 00:15:34.010\nand some people love about JavaScript.\n\n252\n00:15:34.010 --> 00:15:35.830\nIt's a love hate relationship.\n\n253\n00:15:35.830 --> 00:15:39.250\nI've come to really enjoy it.\n\n254\n00:15:39.250 --> 00:15:44.070\nInitially it was kind of off-putting\nbecause I liked very rigid structure.\n\n255\n00:15:44.070 --> 00:15:48.060\nSo keep that in mind, JavaScript\nis very flexible in that nature.\n\n256\n00:15:49.590 --> 00:15:51.987\nSo I have these properties.\n\n257\n00:15:51.987 --> 00:15:55.943\nWell, cars have behaviors, they do things.\n\n258\n00:15:55.943 --> 00:15:57.712\nSo.\n\n259\n00:15:57.712 --> 00:16:00.166\nWe need those behaviors mapped up.\n\n260\n00:16:00.166 --> 00:16:05.920\nLet's see how we can implement those as an\nobject literal in the Ecma script5 syntax.\n\n261\n00:16:05.920 --> 00:16:11.770\nSo I can have move, and that is\nactually going to map to a function.\n\n262\n00:16:11.770 --> 00:16:15.580\nWhen you see a key value pair and\n\n263\n00:16:15.580 --> 00:16:19.380\nthe right hand side is a function\nthat is called a method.\n\n264\n00:16:19.380 --> 00:16:23.170\nSo a method is a function\nattached to an object.\n\n265\n00:16:23.170 --> 00:16:26.450\nThink of it as action\nthat an object can take.\n\n266\n00:16:26.450 --> 00:16:27.510\nThis car can move.\n\n267\n00:16:29.330 --> 00:16:30.661\nThis car can halt.\n\n268\n00:16:30.661 --> 00:16:31.560\nThis car can stop.\n\n269\n00:16:31.560 --> 00:16:35.470\nAnd you'll be issuing those\ncommands to the object.\n\n270\n00:16:35.470 --> 00:16:42.390\nSo, I can move, I can stop I can honk.\n\n271\n00:16:42.390 --> 00:16:44.080\nWe can't forget honk.\n\n272\n00:16:44.080 --> 00:16:45.930\nThat's very important.\n\n273\n00:16:45.930 --> 00:16:48.050\nDepending on what part of\nthe country you're in,\n\n274\n00:16:48.050 --> 00:16:50.280\nit may be more important than others.\n\n275\n00:16:50.280 --> 00:16:52.670\nAnd then finally, I did have that turn.\n\n276\n00:16:54.140 --> 00:16:57.420\nSo notice,\nI'm just stubbing out these functions.\n\n277\n00:16:57.420 --> 00:16:59.620\nThey don't actually do anything right now.\n\n278\n00:16:59.620 --> 00:17:01.420\nI'm just making sure my syntax.\n\n279\n00:17:01.420 --> 00:17:02.650\nAnd I'm making a list.\n\n280\n00:17:02.650 --> 00:17:08.490\nI'm planning ahead which I recommend that\nyou do when you start into this instead of\n\n281\n00:17:08.490 --> 00:17:13.080\nmost people me included when I\nstarted I just wanted to hack away.\n\n282\n00:17:13.080 --> 00:17:15.470\nSometimes that leads to more\nfrustration than it's worth.\n\n283\n00:17:15.470 --> 00:17:18.130\nSo I do recommend that you\nplan ahead a little bit\n\n284\n00:17:18.130 --> 00:17:19.960\neven if you're just playing around\nwith something like we are here.\n\n285\n00:17:21.550 --> 00:17:27.350\nSo now you'll notice that I have\na color I've all of my properties but\n\n286\n00:17:27.350 --> 00:17:34.530\nI have functions and notice those\nthings are actually complex types.\n\n287\n00:17:34.530 --> 00:17:38.560\nA function is another type cuz we saw that\nbuilt in that I recommended you didn't\n\n288\n00:17:38.560 --> 00:17:43.750\nuse, but\nfunctions themselves are a type of thing.\n\n289\n00:17:43.750 --> 00:17:45.160\nSo it is a data type.\n\n290\n00:17:45.160 --> 00:17:47.310\nAnd those represented by\nthese parentheses here.\n\n291\n00:17:47.310 --> 00:17:51.380\nSo I can honk and\nit will give you properties about this.\n\n292\n00:17:51.380 --> 00:17:54.210\nBut we're not worried about that\nthe needy greedy yet of functions.\n\n293\n00:17:55.510 --> 00:17:57.110\nWe just wanna see how these is used.\n\n294\n00:17:57.110 --> 00:17:58.504\nSo let's pick a color.\n\n295\n00:17:58.504 --> 00:18:01.267\nYellow, a make.\n\n296\n00:18:06.861 --> 00:18:11.917\nSo, Chevy, Camaro, number of doors,\n\n297\n00:18:11.917 --> 00:18:16.810\ntwo, number of wheels, four.\n\n298\n00:18:16.810 --> 00:18:20.670\nAnd let's think about\nwhat it means to move.\n\n299\n00:18:20.670 --> 00:18:23.260\nWell, here we're just\ngonna simulate that but\n\n300\n00:18:23.260 --> 00:18:27.980\nmove would actually be changing a property\nabout this if I had a property called\n\n301\n00:18:27.980 --> 00:18:32.290\nposition like coordinates on the earth.\n\n302\n00:18:32.290 --> 00:18:37.010\nMoving would change those, just called\nthe internal state of the object.\n\n303\n00:18:37.010 --> 00:18:40.770\nSo encapsulating all that information\ninto a single variable name\n\n304\n00:18:40.770 --> 00:18:43.500\nthat has a defined set of methods and\n\n305\n00:18:43.500 --> 00:18:47.300\nproperties is one of the powerful\naspects of building one of these.\n\n306\n00:18:47.300 --> 00:18:51.430\nBut we're going to simulate that, and the\nreason that I have this function kind of\n\n307\n00:18:51.430 --> 00:18:57.340\nbuilt out is now I don't have to worry\nabout missing that comma, having\n\n308\n00:18:57.340 --> 00:19:01.750\nall kinds of syntax errors that I have to\nchase down because I have things split.\n\n309\n00:19:01.750 --> 00:19:05.150\nI paired everything up, I made sure it\nworks, and now I've split them apart, and\n\n310\n00:19:05.150 --> 00:19:06.340\nfill in the blanks.\n\n311\n00:19:06.340 --> 00:19:08.880\nSo, I recommend that practice.\n\n312\n00:19:08.880 --> 00:19:11.710\nDoesn't work for everybody, but\nI found that people who do that,\n\n313\n00:19:11.710 --> 00:19:16.040\ntend to have less syntax errors\noff the bat than those who do not.\n\n314\n00:19:16.040 --> 00:19:17.738\nSo, what does move do?\n\n315\n00:19:17.738 --> 00:19:19.255\nVroom.\n\n316\n00:19:20.776 --> 00:19:22.588\nStop.\n\n317\n00:19:22.588 --> 00:19:23.749\nWell that is.\n\n318\n00:19:26.048 --> 00:19:28.324\nHow do you make a brake sound?\n\n319\n00:19:28.324 --> 00:19:30.255\n&gt;&gt; Screech.\n\n320\n00:19:30.255 --> 00:19:30.755\n&gt;&gt; Yeah, maybe screech.\n\n321\n00:19:33.875 --> 00:19:35.250\nDon't forget the semi colon.\n\n322\n00:19:35.250 --> 00:19:36.310\nHonk.\n\n323\n00:19:36.310 --> 00:19:37.588\nI like this one, this one's fun.\n\n324\n00:19:37.588 --> 00:19:39.542\nHarooogah.\n\n325\n00:19:39.542 --> 00:19:44.500\n&gt;&gt; [LAUGH]\n&gt;&gt; That would be a weird Camaro\n\n326\n00:19:44.500 --> 00:19:46.190\nhorn by the way.\n\n327\n00:19:46.190 --> 00:19:47.550\nYeah.\nIf you're next to one and\n\n328\n00:19:47.550 --> 00:19:51.630\nit goes Harooogah at you,\nyou should probably leave.\n\n329\n00:19:51.630 --> 00:19:52.895\nAll right.\nAnd then turn,\n\n330\n00:19:52.895 --> 00:19:58.820\nturn is, We'll just say turning left.\n\n331\n00:19:59.930 --> 00:20:00.580\nOkay?\n\n332\n00:20:00.580 --> 00:20:04.430\nNow, this turn, this is a poorly\nimplemented method in this context.\n\n333\n00:20:04.430 --> 00:20:08.930\nTurn, written as it is,\nshould take a direction.\n\n334\n00:20:08.930 --> 00:20:11.450\nAnd then say, turn that direction.\n\n335\n00:20:11.450 --> 00:20:14.170\nBut we're going to leave this as a very\nsimple example just to see how these\n\n336\n00:20:14.170 --> 00:20:16.550\nwork, okay?\n\n337\n00:20:16.550 --> 00:20:19.430\nSo if I go back and I refresh.\n\n338\n00:20:19.430 --> 00:20:21.370\nYou can see those properties have changed.\n\n339\n00:20:21.370 --> 00:20:24.642\nThis look the same but\nnow how do I use this object?\n\n340\n00:20:24.642 --> 00:20:32.220\nI can actually pull this up and\nsince I know a car can move, turn,\n\n341\n00:20:32.220 --> 00:20:37.970\nhonk, screech, then I can use\nthose methods to issue commands.\n\n342\n00:20:37.970 --> 00:20:41.010\nSo I'm going to start with car here, okay?\n\n343\n00:20:41.010 --> 00:20:43.378\nAnd I'm gonna log it at the end.\n\n344\n00:20:45.920 --> 00:20:49.094\nAnd because we're not fully\nimplementing the change of state,\n\n345\n00:20:49.094 --> 00:20:52.430\nlike the change in position or\nthe change in fuel level.\n\n346\n00:20:52.430 --> 00:20:55.010\nWe won't see a lot of change\nfrom beginning to end.\n\n347\n00:20:55.010 --> 00:20:58.800\nBut as we go on, we will see\nthat these objects will actually\n\n348\n00:20:58.800 --> 00:21:01.070\nchange through the issue and sub-methods.\n\n349\n00:21:01.070 --> 00:21:03.050\nSo what can my car do first.\n\n350\n00:21:03.050 --> 00:21:05.360\nWell a car.move.\n\n351\n00:21:05.360 --> 00:21:07.470\nAnd let's move three times.\n\n352\n00:21:07.470 --> 00:21:09.240\nI drove three blocks.\n\n353\n00:21:09.240 --> 00:21:12.570\nAnd then a person turned out\nin front of me so I honk.\n\n354\n00:21:14.310 --> 00:21:15.930\nAnd then I stop.\n\n355\n00:21:17.500 --> 00:21:19.320\nAnd then I turn.\n\n356\n00:21:20.810 --> 00:21:21.640\nOkay?\n\n357\n00:21:21.640 --> 00:21:26.970\nNow the power of this is our code\nwhen from telling it how to,\n\n358\n00:21:26.970 --> 00:21:28.460\nto what it's doing.\n\n359\n00:21:28.460 --> 00:21:31.640\nSo instead of step 1, step 2, step 3.\n\n360\n00:21:31.640 --> 00:21:35.060\nIt's still kind of in a list like that but\nthis reads more like a story.\n\n361\n00:21:35.060 --> 00:21:35.660\nSo car.move.\n\n362\n00:21:35.660 --> 00:21:37.200\nWhat's going on?\n\n363\n00:21:37.200 --> 00:21:38.610\nThe car's moving.\n\n364\n00:21:38.610 --> 00:21:39.310\nCar.move again.\n\n365\n00:21:39.310 --> 00:21:40.400\nSo what's going on now?\n\n366\n00:21:40.400 --> 00:21:41.360\nThe car is moving.\n\n367\n00:21:41.360 --> 00:21:46.246\nWe don't have to worry ourselves with the\nbehind the scenes implementation details\n\n368\n00:21:46.246 --> 00:21:50.520\nbut instead, worry about kind\nof the 10,000 footview again.\n\n369\n00:21:50.520 --> 00:21:53.900\nWhat do we want to happen\non a macroscopic level?\n\n370\n00:21:53.900 --> 00:21:57.030\nSo let's see how this works out.\n\n371\n00:21:57.030 --> 00:22:00.010\nThere's my car,\nlet's look at the properties.\n\n372\n00:22:00.010 --> 00:22:03.960\nI'm yellow Chevy Camaro, two doors,\nfour wheels at these methods.\n\n373\n00:22:03.960 --> 00:22:08.045\nNotice vroom vroom vroom, so\nI'm moving, moving, moving.\n\n374\n00:22:08.045 --> 00:22:12.190\nHarooga, screech, and then I turn left.\n\n375\n00:22:12.190 --> 00:22:17.730\nAnd my car has not changed, right?\n\n376\n00:22:17.730 --> 00:22:21.580\nThe car in not changing state, that's\njust because this is our introduction.\n\n377\n00:22:21.580 --> 00:22:26.220\nThis is our starting to go a little deeper\non objects, but objects are incredibly\n\n378\n00:22:26.220 --> 00:22:32.620\npowerful at encapsulating behavior, data,\nand kinda moving around in fragments.\n\n379\n00:22:32.620 --> 00:22:39.200\nIt's also wonderful way to transmit\ninformation to in from others services.\n\n380\n00:22:39.200 --> 00:22:43.410\nAnd now you have to transform the object\nfor that service to kinda slurf it up.\n\n381\n00:22:43.410 --> 00:22:46.800\nBut now I have ways of\nmoving information around.\n\n382\n00:22:46.800 --> 00:22:50.580\n&gt;&gt; So we might have a method\non this car called paint job.\n\n383\n00:22:50.580 --> 00:22:56.240\nAnd then if we call that method, it might\nmodify the property color of that object.\n\n384\n00:22:56.240 --> 00:22:56.780\n&gt;&gt; Exactly.\n\n385\n00:22:56.780 --> 00:23:00.540\nAnd as a matter of fact Mike,\nlet's go ahead and see like, paint job.\n\n386\n00:23:02.120 --> 00:23:03.480\nOr even paint.\n\n387\n00:23:03.480 --> 00:23:04.650\nSee how that would work.\n\n388\n00:23:04.650 --> 00:23:08.170\nNow keep in mind this is just\ngetting you familiar with\n\n389\n00:23:08.170 --> 00:23:11.640\nthe macroscopic behavior of these so\ndon't worry so\n\n390\n00:23:11.640 --> 00:23:16.410\nmuch if you're seeing some syntax and\nsome other things that you're not used to.\n\n391\n00:23:16.410 --> 00:23:20.300\nFocus on how this is being constructed,\nhow it's being used.\n\n392\n00:23:20.300 --> 00:23:24.270\nSo, let's actually make a paint.\n\n393\n00:23:24.270 --> 00:23:26.790\nLet's just call it paint.\n\n394\n00:23:26.790 --> 00:23:29.500\nAnd it takes a new color.\n\n395\n00:23:33.430 --> 00:23:39.020\nAnd that new color says for this car,\nchange the color to new color.\n\n396\n00:23:40.398 --> 00:23:44.770\nOkay, so this keyword gets a little weird.\n\n397\n00:23:44.770 --> 00:23:50.480\nWe'll cover that in more depth later,\nbut I'm saying, okay,\n\n398\n00:23:50.480 --> 00:23:55.670\nif I paint this car, whatever I tell it\nto paint, that will become the new color.\n\n399\n00:23:55.670 --> 00:23:57.060\nLet's test it out.\n\n400\n00:23:57.060 --> 00:24:00.320\nIn order to do that,\nI actually was driving to the paint shop.\n\n401\n00:24:01.840 --> 00:24:06.360\nSo luckily I didn't get in an accident,\nI was able to stop but I paint and\n\n402\n00:24:06.360 --> 00:24:10.970\nthis car was originally yellow,\nI want it black.\n\n403\n00:24:10.970 --> 00:24:14.470\nSo let's paint it black and let's see.\n\n404\n00:24:14.470 --> 00:24:16.020\nWell, yellow, and\n\n405\n00:24:16.020 --> 00:24:19.270\nnow the car has been painted black\nbecause I have painted the car.\n\n406\n00:24:19.270 --> 00:24:24.690\nI have changed the state through the use\nof a method that reads like a story.\n\n407\n00:24:24.690 --> 00:24:27.270\nCar, paint, black, done.\n\n408\n00:24:27.270 --> 00:24:29.330\nSo very powerful.\n\n409\n00:24:29.330 --> 00:24:34.840\nAnd we will use these more, and more as\nwe start building things with JavaScript.\n\n410\n00:24:34.840 --> 00:24:38.730\n&gt;&gt; Fantastic Justin, way to take\nsomething that can be rather complex,\n\n411\n00:24:38.730 --> 00:24:41.680\nand make it simple enough for\neven me to understand in the end there.\n\n412\n00:24:41.680 --> 00:24:42.610\nWe love it.\n\n413\n00:24:42.610 --> 00:24:44.090\nGreat demonstrations there.\n\n414\n00:24:44.090 --> 00:24:46.550\nObjects.\nObviously very powerful.\n\n415\n00:24:46.550 --> 00:24:47.740\nCan be a little complex.\n\n416\n00:24:47.740 --> 00:24:51.090\nBut I think now we've got a good\nhand of it of what we can expect\n\n417\n00:24:51.090 --> 00:24:52.240\nwith working with objects.\n\n418\n00:24:52.240 --> 00:24:53.470\nSo we appreciate that.\n\n419\n00:24:53.470 --> 00:24:55.720\nWe hope everybody out there\nenjoyed watching this one.\n\n420\n00:24:55.720 --> 00:24:58.670\nSigning off for ITProTV,\nI've been your host Mike Rodrick.\n\n421\n00:24:58.670 --> 00:25:01.908\n&gt;&gt; And I'm Justin Dennison\n&gt;&gt; And we'll see you next time.\n\n422\n00:25:01.908 --> 00:25:07.922\n[MUSIC]\n\n423\n00:25:07.922 --> 00:25:10.824\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "202775680"
        },
        {
          "description": "In this episode, Justin and Mike look at adding decision making capabilities to JavaScript. They look at if, else, and else if statements. They also demonstrate using a switch block.",
          "length": "1852",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-6-1-making_decisions_ifs_elsesand_switches-020217-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-6-1-making_decisions_ifs_elsesand_switches-020217-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-6-1-making_decisions_ifs_elsesand_switches-020217-1-sm.jpg",
          "title": "Decisions IF Else and Switches",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.365\nWelcome to ITPro.TV.\n\n2\n00:00:01.365 --> 00:00:02.134\nI'm your host for Don Pezet.\n\n3\n00:00:02.134 --> 00:00:06.754\n[CROSSTALK]\n\n4\n00:00:06.754 --> 00:00:09.528\n[MUSIC]\n\n5\n00:00:09.528 --> 00:00:12.917\n&gt;&gt; You're watching ITPro.TV\n&gt;&gt; Hello,\n\n6\n00:00:12.917 --> 00:00:15.173\nwelcome to another exciting\nepisode here at ITPro.TV.\n\n7\n00:00:15.173 --> 00:00:17.420\nI'm your host Mike Rodrick.\n\n8\n00:00:17.420 --> 00:00:19.808\nToday, we're doing our\nintroduction to JavaScript.\n\n9\n00:00:19.808 --> 00:00:23.405\nAnd in this episode, we're gonna be\ntalking a look at decision making.\n\n10\n00:00:23.405 --> 00:00:28.017\nIfs, elses, switches,\nhow do we make our program make decisions,\n\n11\n00:00:28.017 --> 00:00:30.174\nor our JavaScript I should say.\n\n12\n00:00:30.174 --> 00:00:35.350\nHere to explain it in much better detail\nthen I'm doing is Mr. Justin Dennison.\n\n13\n00:00:35.350 --> 00:00:35.862\nWelcome back Justin.\n\n14\n00:00:35.862 --> 00:00:36.569\n&gt;&gt; Thanks for having me back Mike.\n\n15\n00:00:36.569 --> 00:00:41.154\nYeah, sometimes I get a little\nconfused as well, so don't worry.\n\n16\n00:00:41.154 --> 00:00:41.903\n&gt;&gt; [LAUGH]\n&gt;&gt; That's part of the game.\n\n17\n00:00:41.903 --> 00:00:46.150\nSo today, we're actually gonna\nworry about making decisions.\n\n18\n00:00:46.150 --> 00:00:50.180\nNow, I wanna take a step back\nbefore we talk about technology.\n\n19\n00:00:50.180 --> 00:00:52.040\nWe make decisions every day.\n\n20\n00:00:52.040 --> 00:00:55.390\nWhat shirt to wear, what shoes to put on,\nwhat to eat for breakfast,\n\n21\n00:00:55.390 --> 00:00:56.010\nlunch and dinner?\n\n22\n00:00:57.170 --> 00:00:59.300\nAnd those decisions are very important,\n\n23\n00:00:59.300 --> 00:01:02.900\nbecause sometimes those\ndecisions are safe for us.\n\n24\n00:01:02.900 --> 00:01:06.840\nI know sometimes I'll be cooking and\ntake something out of the oven.\n\n25\n00:01:06.840 --> 00:01:11.720\nAnd right before I grab it with my hand,\nI'm like should I touch this,\n\n26\n00:01:11.720 --> 00:01:13.400\nis it hot or is it not?\n\n27\n00:01:13.400 --> 00:01:18.191\nAnd those decisions do define us\nversus what we're currently writing.\n\n28\n00:01:18.191 --> 00:01:20.623\nAnd that brings me to my second point,\n\n29\n00:01:20.623 --> 00:01:24.540\ndo you remember computers\nonly do what we tell them to.\n\n30\n00:01:24.540 --> 00:01:27.692\nThey're not magical\ncreatures inside of a box.\n\n31\n00:01:27.692 --> 00:01:32.110\nWe don't have just magic in a box even\nthough it does seem like magic sometimes.\n\n32\n00:01:33.530 --> 00:01:38.720\nAnd we see some scientific renditions\nof incredibly intelligent computers.\n\n33\n00:01:38.720 --> 00:01:42.600\nFor the most part, computers are only\nthere to execute commands that we have.\n\n34\n00:01:42.600 --> 00:01:45.680\nSo they only do what we tell them to do.\n\n35\n00:01:45.680 --> 00:01:49.860\nAnd part of that is we need to give them\nthe ability to make some discernible\n\n36\n00:01:49.860 --> 00:01:52.090\nkind of left right decision making.\n\n37\n00:01:52.090 --> 00:01:54.990\nDo I take the left path or the right path?\n\n38\n00:01:54.990 --> 00:01:58.998\nAnd we're gonna do that with\na common JavaScript constructs.\n\n39\n00:01:58.998 --> 00:02:02.690\nSo let's take a look and go ahead and\nget our project started.\n\n40\n00:02:02.690 --> 00:02:06.350\nSo we can start with ifs,\nelses, and switches.\n\n41\n00:02:06.350 --> 00:02:07.479\nThat's kind of a mouthful to say.\n\n42\n00:02:07.479 --> 00:02:08.224\n&gt;&gt; It is.\n\n43\n00:02:08.224 --> 00:02:13.533\n&gt;&gt; So I'm gonna open my project\ndirectory and again that index.html,\n\n44\n00:02:13.533 --> 00:02:18.785\nI'm hypervison, I was getting\nready to do something wrong there.\n\n45\n00:02:18.785 --> 00:02:21.157\n&gt;&gt; llll\n&gt;&gt; We were about to see an example of what\n\n46\n00:02:21.157 --> 00:02:22.880\nI've been warning about.\n\n47\n00:02:22.880 --> 00:02:27.679\nAnd I'm gonna go to hood and\nopen the dev tools while I'm here.\n\n48\n00:02:27.679 --> 00:02:31.408\nAnd there we go, those keyboard shortcuts\nwill save you a lot of time, but\n\n49\n00:02:31.408 --> 00:02:32.880\njust as a reminder.\n\n50\n00:02:32.880 --> 00:02:39.895\nAnd then within Atom, I'm gonna add the\nproject folder for this decision making.\n\n51\n00:02:39.895 --> 00:02:44.836\nNow, within this project we have\nour index.html, again still blank,\n\n52\n00:02:44.836 --> 00:02:47.600\nnothing special about it.\n\n53\n00:02:47.600 --> 00:02:50.443\nIn app.js,\nwe will have all of our existing code.\n\n54\n00:02:50.443 --> 00:02:53.280\nWhat we're gonna write,\nhow it's gonna work?\n\n55\n00:02:53.280 --> 00:02:57.732\nNow these will be a little more involved\nexamples because the entire purpose of\n\n56\n00:02:57.732 --> 00:03:00.904\ndecision making is to be able\nto handle when things are,\n\n57\n00:03:00.904 --> 00:03:02.870\nthey don't have a one way street.\n\n58\n00:03:02.870 --> 00:03:07.726\nIt's do I take a left or a right or\neven where do I turn at a four way?\n\n59\n00:03:07.726 --> 00:03:11.470\nOr never been went to those places\nhas the giant round abouts,\n\n60\n00:03:11.470 --> 00:03:13.060\nthat has like nine exits.\n\n61\n00:03:13.060 --> 00:03:16.965\nYou like I don't, it says,\nmy GPS turn right.\n\n62\n00:03:16.965 --> 00:03:18.776\n&gt;&gt; [LAUGH]\n&gt;&gt; But there are like seven rights.\n\n63\n00:03:18.776 --> 00:03:21.933\nAnd I don't know where to turn,\nso we have to be careful with it.\n\n64\n00:03:21.933 --> 00:03:27.890\nSo what is the best way\nto make a decision?\n\n65\n00:03:27.890 --> 00:03:32.130\nThe first thing is kind of\na question that you ask yourself.\n\n66\n00:03:32.130 --> 00:03:34.690\nIf this pan is hot, should I touch it?\n\n67\n00:03:34.690 --> 00:03:37.618\nIf it is hot, I will not and\nthat's kinda weird.\n\n68\n00:03:37.618 --> 00:03:42.590\nWe don't say that out loud to ourselves,\nbut intrinsically, we're kinda\n\n69\n00:03:42.590 --> 00:03:47.574\nthinking through that even if it's not\nconstruct it like that as a thought.\n\n70\n00:03:47.574 --> 00:03:50.760\nSo let's just start with\nsomething interesting.\n\n71\n00:03:50.760 --> 00:03:56.810\nI'm gonna start with var and\ncreate a variable for a day of the week.\n\n72\n00:03:57.870 --> 00:04:00.509\nI'm gonna shorten that just\nbased on previous experience.\n\n73\n00:04:00.509 --> 00:04:01.650\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n74\n00:04:01.650 --> 00:04:07.009\nthe day of the week is Friday, okay?\n\n75\n00:04:07.009 --> 00:04:09.021\nIf the day of the week and\n\n76\n00:04:09.021 --> 00:04:15.180\nI wanna make sure that I am exactly\ncomparing strings to strings.\n\n77\n00:04:15.180 --> 00:04:17.568\nAgain, this triple equals\nis strict comparison.\n\n78\n00:04:17.568 --> 00:04:21.244\nI wanna make string to string, and I wanna\nmake sure they are exact same value.\n\n79\n00:04:21.244 --> 00:04:29.986\nSo if the day of the week is Friday Yehey!\n\n80\n00:04:29.986 --> 00:04:33.500\n&gt;&gt; [LAUGH]\n&gt;&gt; It is the start of the weekend.\n\n81\n00:04:37.045 --> 00:04:41.017\nNow as we've seen,\nwe can have these comparisons,\n\n82\n00:04:41.017 --> 00:04:44.790\nday the week equal, equal, equal Friday.\n\n83\n00:04:44.790 --> 00:04:48.390\nWell if I look here,\nthis should evaluate the true, so\n\n84\n00:04:48.390 --> 00:04:52.860\neffectively this will say if true.\n\n85\n00:04:52.860 --> 00:04:55.600\nWell if true will always execute,\n\n86\n00:04:55.600 --> 00:04:59.120\nif I type if true it's like I didn't\nhave an if statement there at all.\n\n87\n00:04:59.120 --> 00:05:01.286\nThis if statement is gonna be a block, so\n\n88\n00:05:01.286 --> 00:05:04.361\nit's gonna check whatever's\ninside the parentheses.\n\n89\n00:05:04.361 --> 00:05:07.413\nAnd notice these curly braces here, and\n\n90\n00:05:07.413 --> 00:05:12.920\nif it checks as a true statement,\nis the day of the week Friday?\n\n91\n00:05:12.920 --> 00:05:16.491\nThen anything between these\ntwo curly braces will run.\n\n92\n00:05:16.491 --> 00:05:19.383\nLet's see if what I just\nasserted is in fact the case.\n\n93\n00:05:19.383 --> 00:05:24.760\nSo yehey, it's Friday or\nit's the start of the weekend.\n\n94\n00:05:24.760 --> 00:05:27.660\nHowever, we have to be very careful\nwhen we're making these comparisons.\n\n95\n00:05:27.660 --> 00:05:31.860\nRemember I said, I wanna check types and\nvalues in this case.\n\n96\n00:05:31.860 --> 00:05:37.110\nIf I come to the day of the week and\nI'm asking someone what day it is, through\n\n97\n00:05:37.110 --> 00:05:40.650\nsome kind of input form or maybe I'm\nsifting through email programmatically.\n\n98\n00:05:41.810 --> 00:05:44.993\nNotice that this is a lowercase f and\nthis is an uppercase F.\n\n99\n00:05:47.621 --> 00:05:51.842\nWell that if statement is no\nlonger comparing the same value to\n\n100\n00:05:51.842 --> 00:05:53.620\nthe same value.\n\n101\n00:05:53.620 --> 00:05:56.395\nWhat I mean is lower case f Friday,\n\n102\n00:05:56.395 --> 00:06:01.388\nstrictly equal to upper case Friday,\nand it is in fact, not.\n\n103\n00:06:01.388 --> 00:06:03.760\nSo okay, that's kind of weird.\n\n104\n00:06:05.120 --> 00:06:07.344\nWhat's the best way to handle that?\n\n105\n00:06:07.344 --> 00:06:10.547\nWell the best way to handle\nthat is in my sense,\n\n106\n00:06:10.547 --> 00:06:13.865\nthis is a common pattern\nthat you will see.\n\n107\n00:06:13.865 --> 00:06:17.931\nEspecially with strings is try to\nreduce it down to where character\n\n108\n00:06:17.931 --> 00:06:21.572\ndifferences will not affect\nthe decision making process.\n\n109\n00:06:21.572 --> 00:06:28.690\nAnd part of that is through some of\nthose string methods, that we've seen.\n\n110\n00:06:28.690 --> 00:06:32.605\nAnd I'm saying,\nif the lower case version of day\n\n111\n00:06:32.605 --> 00:06:36.820\nweek is strictly equal to Friday,\nall lower cases.\n\n112\n00:06:36.820 --> 00:06:39.620\nNow, I've removed\nthe capitalization issues.\n\n113\n00:06:39.620 --> 00:06:42.610\n&gt;&gt; So wouldn't matter for\nuser type in Friday with a lowercase,\n\n114\n00:06:42.610 --> 00:06:45.031\nFriday with an uppercase,\nit would still match.\n\n115\n00:06:45.031 --> 00:06:48.449\n&gt;&gt; Correct, and we will make sure,\nI always like the test because sometimes I\n\n116\n00:06:48.449 --> 00:06:51.920\nhave these thoughts when I'm like,\nthat'll definitely work.\n\n117\n00:06:51.920 --> 00:06:52.668\nAnd then it doesn't work.\n\n118\n00:06:52.668 --> 00:06:55.475\n&gt;&gt; [LAUGH]\n&gt;&gt; And I have to figure them out that's\n\n119\n00:06:55.475 --> 00:06:59.624\njust part for the course, if my\nassertion is correct this should work.\n\n120\n00:06:59.624 --> 00:07:03.778\nIt would have worked in this\ncase without two lowercase, but\n\n121\n00:07:03.778 --> 00:07:07.530\nI'm preparing for\npossible deviations in the input.\n\n122\n00:07:09.020 --> 00:07:12.220\nSo yey, it's the weekend and it works.\n\n123\n00:07:12.220 --> 00:07:17.050\nWell let's see what happens\nif I type an uppercase F.\n\n124\n00:07:17.050 --> 00:07:20.824\nOriginally, these two comparisons\nwould now evaluate the false.\n\n125\n00:07:20.824 --> 00:07:26.946\nBecause the capital f and lower case\nf are in fact different letters and\n\n126\n00:07:26.946 --> 00:07:29.447\nlet me refresh, did I save?\n\n127\n00:07:29.447 --> 00:07:33.630\nYep, and it still prints out and\nwhy is that?\n\n128\n00:07:33.630 --> 00:07:37.800\nWell I've now taken the lower\ncase version of the input and\n\n129\n00:07:37.800 --> 00:07:40.000\ncompared it to an all lowercase version.\n\n130\n00:07:40.000 --> 00:07:43.864\nNow you could make the same\ndistinction with two uppercase and\n\n131\n00:07:43.864 --> 00:07:46.175\nhave the two uppercase comparison.\n\n132\n00:07:46.175 --> 00:07:49.548\nI don't like typing capital letters,\ncuz I gotta hold shift or\n\n133\n00:07:49.548 --> 00:07:52.423\nput the cap locks on and\nthen it just messes up my flow.\n\n134\n00:07:52.423 --> 00:07:58.279\n[COUGH] Now within this day of the week,\nI have this comparison here.\n\n135\n00:07:58.279 --> 00:08:02.609\nBut right now.\n\n136\n00:08:02.609 --> 00:08:05.539\nIf it is Friday,\nit's the start of the weekend.\n\n137\n00:08:05.539 --> 00:08:14.290\nBut if it's not, I could just put\n('This is just another weekday').\n\n138\n00:08:14.290 --> 00:08:16.950\nAnd there could be some\nargument may that Friday is\n\n139\n00:08:16.950 --> 00:08:18.535\nstill technically part of the week.\n\n140\n00:08:18.535 --> 00:08:21.640\n&gt;&gt; [LAUGH]\n&gt;&gt; So, let's not split hairs there,\n\n141\n00:08:21.640 --> 00:08:26.720\nbut as I've constructed this,\nthis is gonna run from top to bottom.\n\n142\n00:08:26.720 --> 00:08:29.470\nDeclare variable dayofweek\nis equal to Friday.\n\n143\n00:08:29.470 --> 00:08:31.060\nThis would be some kind of user input.\n\n144\n00:08:33.530 --> 00:08:37.880\nAnd then, if the day of the week is\nequal to Friday, the lowercase version\n\n145\n00:08:37.880 --> 00:08:41.320\nis equal to friday, then say, Yayyy!!,\nIt is the start of the weekend.\n\n146\n00:08:42.750 --> 00:08:44.890\nOtherwise, notice this is outside.\n\n147\n00:08:44.890 --> 00:08:48.080\nThis is just another weekday.\n\n148\n00:08:48.080 --> 00:08:50.450\nNow, that's how I've thought about this.\n\n149\n00:08:50.450 --> 00:08:55.520\nBut we have to be careful, because, I\ndon't know, something's not setting right.\n\n150\n00:08:55.520 --> 00:08:58.490\nYou ever have those gut feelings\nwhere you're like, I don't know,\n\n151\n00:08:58.490 --> 00:09:00.560\nthis looks like this might work?\n\n152\n00:09:01.790 --> 00:09:04.170\nBut there's only one way to find out.\n\n153\n00:09:04.170 --> 00:09:08.792\nAnd I've noticed when I refresh, I get\nYayyy!!, It is the start of the weekend.\n\n154\n00:09:08.792 --> 00:09:10.510\nThis is just another weekday.\n\n155\n00:09:11.851 --> 00:09:16.900\n&gt;&gt; Well that was not\nmy anticipated action.\n\n156\n00:09:16.900 --> 00:09:18.600\nI didn't want that to happen.\n\n157\n00:09:18.600 --> 00:09:23.940\nI wanted to only print Yayyy!!, It is the\nstart of the weekend if it's Friday, or\n\n158\n00:09:23.940 --> 00:09:26.370\nthis is another weekend or\nexcuse me, another weekday.\n\n159\n00:09:27.650 --> 00:09:30.410\nOkay.\nWell, this is called a run time error.\n\n160\n00:09:33.000 --> 00:09:37.300\nThere's nothing wrong programmatically,\nsyntactically with my program but\n\n161\n00:09:37.300 --> 00:09:40.910\nit does not behave as I anticipated.\n\n162\n00:09:40.910 --> 00:09:44.530\nThese can lead to some additional\n\n163\n00:09:44.530 --> 00:09:48.660\nweird tracing of programs as\nyou start to get more complex.\n\n164\n00:09:48.660 --> 00:09:50.230\nBe aware of those.\n\n165\n00:09:50.230 --> 00:09:53.515\nI test often and\nearly as I'm writing something, and\n\n166\n00:09:53.515 --> 00:09:57.390\nmake sure that it's progressing\nas I anticipate that it will.\n\n167\n00:09:57.390 --> 00:09:59.444\nWell how do I fix this?\n\n168\n00:09:59.444 --> 00:10:03.650\nHow can I get this if kind of or thing?\n\n169\n00:10:04.650 --> 00:10:10.820\nI can in fact add an else statement,\nwhich means I want to now\n\n170\n00:10:10.820 --> 00:10:15.660\nhave a binary type\ndecision-making process.\n\n171\n00:10:15.660 --> 00:10:21.880\nI want either the thing that is\ntrue to run, or I want a fallback.\n\n172\n00:10:21.880 --> 00:10:23.900\nBut I do not want both.\n\n173\n00:10:23.900 --> 00:10:27.806\nNow there are times that I may want the\nconstruct that we just saw on the screen.\n\n174\n00:10:31.572 --> 00:10:36.654\nThis one, where I want to run, Yayyy!!,\nIt is the start of the weekend,\n\n175\n00:10:36.654 --> 00:10:40.650\nonly sometimes, but\nI always want this one to run.\n\n176\n00:10:40.650 --> 00:10:43.730\nSo I may have this in my code,\nthis is a valid thing.\n\n177\n00:10:43.730 --> 00:10:47.481\nBut in my context,\nin the context that we're creating here,\n\n178\n00:10:47.481 --> 00:10:49.510\nthat's not exactly what I want.\n\n179\n00:10:51.290 --> 00:10:53.548\nNow can I remember the redo key?\n\n180\n00:10:53.548 --> 00:10:54.375\nThere we go.\n\n181\n00:10:54.375 --> 00:10:59.537\nSo now this reads, if the day of the week,\nthe lowercase version is equal to Friday,\n\n182\n00:10:59.537 --> 00:11:02.827\nprint out Yayyy!!,\nIt is the start of the weekend.\n\n183\n00:11:02.827 --> 00:11:08.566\nOtherwise, I like to think of this else\nas otherwise, that's how I would speak.\n\n184\n00:11:08.566 --> 00:11:12.090\nOtherwise, this is just another weekday.\n\n185\n00:11:12.090 --> 00:11:19.325\nLet's see if my refactoring, my changing\nof the code achieves my expected results.\n\n186\n00:11:19.325 --> 00:11:22.080\nWell right now I have day of\nthe week assigned to Friday.\n\n187\n00:11:22.080 --> 00:11:25.060\nAnd it is in fact, the saying Yayyy!!,\nIt is the start of the weekend.\n\n188\n00:11:26.330 --> 00:11:33.180\nWhat happens though if I say,\nit's Thursday?\n\n189\n00:11:33.180 --> 00:11:36.973\nNotice that this is something that\nI've seen from user input before,\n\n190\n00:11:36.973 --> 00:11:40.057\nthat this weird r in the middle,\nif I too lowercase this,\n\n191\n00:11:40.057 --> 00:11:44.110\nI don't have to worry about\nhandling all of those individually.\n\n192\n00:11:44.110 --> 00:11:45.900\nSo, another illustration.\n\n193\n00:11:45.900 --> 00:11:49.115\nHowever, the lower case\nversion of Thursday,\n\n194\n00:11:49.115 --> 00:11:51.405\nall lower case, is that equal to Friday?\n\n195\n00:11:51.405 --> 00:11:52.198\nNo.\n\n196\n00:11:52.198 --> 00:11:57.460\nSo, do the otherwise or the else section.\n\n197\n00:11:57.460 --> 00:12:01.790\nLet's see if that's correct, and\nThursday is just another weekday.\n\n198\n00:12:01.790 --> 00:12:06.420\nSo, we have this ability to essentially,\ntake the left fork or\n\n199\n00:12:06.420 --> 00:12:12.480\nthe right fork, the path that you most\nwanna travel, or the path least traveled.\n\n200\n00:12:12.480 --> 00:12:19.430\nSo that's a binary decision, but that's\nnot always gonna fulfill all of our needs.\n\n201\n00:12:19.430 --> 00:12:23.600\nSometimes I need to be able\nto make additional decisions\n\n202\n00:12:23.600 --> 00:12:26.570\nbased on a series of conditions.\n\n203\n00:12:26.570 --> 00:12:34.420\nSo let's just comment this out to keep\nthings all pretty and nice in the console.\n\n204\n00:12:34.420 --> 00:12:38.298\nAnd I gotta figure out\nthe setting on that plug-in.\n\n205\n00:12:38.298 --> 00:12:40.870\n&gt;&gt; [LAUGH]\n&gt;&gt; To keep it from commenting from line\n\n206\n00:12:40.870 --> 00:12:41.530\nto line like that.\n\n207\n00:12:43.080 --> 00:12:48.533\nSo, let's say rar faveNum.\n\n208\n00:12:48.533 --> 00:12:52.794\nAgain, I'm reducing this variable\nname just for the sake of time,\n\n209\n00:12:52.794 --> 00:12:54.000\ninterest in time.\n\n210\n00:12:54.000 --> 00:12:58.870\nI would probably more likely say,\nfavorite number.\n\n211\n00:12:58.870 --> 00:13:00.600\nSo, I don't have faveNum.\n\n212\n00:13:01.960 --> 00:13:05.020\nMaybe I have a typo and\nit's supposed to say something else.\n\n213\n00:13:05.020 --> 00:13:07.620\nMaybe I have similar variable names.\n\n214\n00:13:07.620 --> 00:13:13.902\nBut just keep that in mind,\nif faveNum equals,\n\n215\n00:13:13.902 --> 00:13:19.087\nnotice I'm using the triple === and\n\n216\n00:13:19.087 --> 00:13:23.327\nthat's to say I want the type and\n\n217\n00:13:23.327 --> 00:13:28.374\nthe value to match, is equal to 42.\n\n218\n00:13:31.821 --> 00:13:36.602\nThat is the meaning of life.\n\n219\n00:13:36.602 --> 00:13:43.350\nSo right now as it stands,\nI get it somewhere, whoa, there we go.\n\n220\n00:13:43.350 --> 00:13:44.110\nI didn't catch it.\n\n221\n00:13:44.110 --> 00:13:45.280\nGotta be careful.\n\n222\n00:13:45.280 --> 00:13:47.960\nNow I'm gonna show you this\nerror cuz it's important.\n\n223\n00:13:47.960 --> 00:13:50.020\nAgain this reference error,\n\n224\n00:13:50.020 --> 00:13:54.740\nokay well I said reference errors can\nmean you haven't defined a variable.\n\n225\n00:13:54.740 --> 00:13:56.910\nBut console is not\nsomething that I define,\n\n226\n00:13:56.910 --> 00:14:00.930\nthat's part of the standard browser\nimplementation that we're using.\n\n227\n00:14:00.930 --> 00:14:05.970\nWell, if I misspell it,\nit thinks that it's a complex object\n\n228\n00:14:05.970 --> 00:14:09.480\nthat I'm trying to define and\nuse in a different context.\n\n229\n00:14:09.480 --> 00:14:14.390\nSo if I fix that, we have the same\nbehavior that we had before.\n\n230\n00:14:14.390 --> 00:14:19.103\nThis if statement is evaluating to true,\nbut\n\n231\n00:14:19.103 --> 00:14:23.450\nI wanna say a couple of different things.\n\n232\n00:14:23.450 --> 00:14:27.812\nI wanna respond differently\nif it's below 42.\n\n233\n00:14:27.812 --> 00:14:31.438\nI wanna respond differently\nif it's above 42.\n\n234\n00:14:31.438 --> 00:14:37.020\nAnd I wanna respond if it's exactly 42,\nwhich I already have.\n\n235\n00:14:37.020 --> 00:14:42.679\nNow, I could just chain\na bunch of if statements here,\n\n236\n00:14:42.679 --> 00:14:45.516\nFaveNum is less than 42.\n\n237\n00:14:45.516 --> 00:14:51.080\nJust like that and\nthey would go top to bottom and run.\n\n238\n00:14:51.080 --> 00:14:56.642\nI will warn you sometimes this doesn't\nhave quite the expected output because\n\n239\n00:14:56.642 --> 00:15:01.791\nyou go well, whatever the number\nis that's gonna be the comparison.\n\n240\n00:15:04.905 --> 00:15:07.323\nYou have not reached enlightenment.\n\n241\n00:15:10.657 --> 00:15:14.651\nAnd you go okay, well currently as it\nstands, it'll execute the first one, and\n\n242\n00:15:14.651 --> 00:15:18.090\nskip the second one,\nas we saw in the previous example.\n\n243\n00:15:18.090 --> 00:15:21.428\nWell, what if I do this?\n\n244\n00:15:24.878 --> 00:15:27.100\nNow, that first statement will execute.\n\n245\n00:15:27.100 --> 00:15:30.850\nI do not anticipate this one executing,\nbut\n\n246\n00:15:30.850 --> 00:15:32.965\nbehind the scenes some\nchanges have been made.\n\n247\n00:15:32.965 --> 00:15:38.120\nMaybe I did this intentionally,\nmaybe I did it unintentionally, or\n\n248\n00:15:38.120 --> 00:15:43.040\nmaybe I'm using a secondary library or\nsomething that someone\n\n249\n00:15:43.040 --> 00:15:46.190\nelse wrote that I don't have control of,\nand I don't know that this is happening.\n\n250\n00:15:47.410 --> 00:15:51.830\nWhat is now,\nI again have this weird runtime error.\n\n251\n00:15:51.830 --> 00:15:56.344\nI did not expect this to print\nout because I input 42, but\n\n252\n00:15:56.344 --> 00:15:59.857\nwhen that first if statement caught, ha.\n\n253\n00:15:59.857 --> 00:16:04.097\nIt changed to 34, and\nI got some unexpected results.\n\n254\n00:16:04.097 --> 00:16:05.402\nSo how do I fix that?\n\n255\n00:16:05.402 --> 00:16:09.182\nI want this if, or this other if, or\n\n256\n00:16:09.182 --> 00:16:14.227\neven a third one, and\nlet's add the third one.\n\n257\n00:16:14.227 --> 00:16:19.017\nSo we can compare here, if faveNum is\n\n258\n00:16:19.017 --> 00:16:23.969\ngreater than 42, let's just say.\n\n259\n00:16:28.255 --> 00:16:29.169\nNo!\n\n260\n00:16:29.169 --> 00:16:30.458\nIt has to say it just like that too.\n\n261\n00:16:30.458 --> 00:16:32.600\nIt's important, it's important.\n\n262\n00:16:32.600 --> 00:16:33.510\nWhen you're programming and\n\n263\n00:16:33.510 --> 00:16:37.980\nyou're talking to yourself, you need to\nmake sure you have a little bit of fun.\n\n264\n00:16:37.980 --> 00:16:42.490\nCuz otherwise sometimes you're just\ngritting your teeth going, I really like\n\n265\n00:16:42.490 --> 00:16:48.450\nfor this to work, and that's expected,\ndon't get worried, everybody does that.\n\n266\n00:16:48.450 --> 00:16:53.624\nSo as it stands,\nI'll have these first two run,\n\n267\n00:16:53.624 --> 00:16:59.316\nbut we still have the same\nproblem of faveNum = 57.\n\n268\n00:16:59.316 --> 00:17:02.975\nSo if this first one runs and\nI say faveNum = 34,\n\n269\n00:17:02.975 --> 00:17:07.768\nand the second one runs,\nwhich then makes it larger than 42, so\n\n270\n00:17:07.768 --> 00:17:12.360\nthen the third one should run and\nit is, in fact, does.\n\n271\n00:17:12.360 --> 00:17:14.440\nWell, that's not the behavior that I want.\n\n272\n00:17:14.440 --> 00:17:18.339\nI actually want just one of them,\nregardless of what happens within them.\n\n273\n00:17:19.530 --> 00:17:20.510\nHow do I do that?\n\n274\n00:17:20.510 --> 00:17:24.390\nThere's an additional construct\nother than else called an else if.\n\n275\n00:17:25.830 --> 00:17:31.030\nAnd it's very similar\nto just backspacing and\n\n276\n00:17:31.030 --> 00:17:33.620\nadding an else in front\nof the next if statement.\n\n277\n00:17:35.020 --> 00:17:39.675\nAnd let's see how this behavior changes.\n\n278\n00:17:39.675 --> 00:17:42.869\nSpacing, I'm real crazy about spacing.\n\n279\n00:17:42.869 --> 00:17:48.319\nIt's easier to read if you keep\na consistent syntax, so I recommend it.\n\n280\n00:17:48.319 --> 00:17:52.015\nTechnically, JavaScript is curly brace and\nparentheses limited,\n\n281\n00:17:52.015 --> 00:17:54.380\nyou can type it all in\none line if you want to.\n\n282\n00:17:54.380 --> 00:17:57.368\nI do not recommend that, don't do that.\n\n283\n00:17:57.368 --> 00:18:02.859\nSo if we review, this is what\nour previous behavior was like.\n\n284\n00:18:02.859 --> 00:18:04.790\nThat is the meaning of life.\n\n285\n00:18:04.790 --> 00:18:08.410\nAnd then that number was changed\nwithin that first if statement,\n\n286\n00:18:08.410 --> 00:18:09.630\nthat first condition.\n\n287\n00:18:10.640 --> 00:18:12.550\nThese are also known as conditionals.\n\n288\n00:18:12.550 --> 00:18:17.130\nSo within that first condition,\nfaveNum = 34.\n\n289\n00:18:17.130 --> 00:18:22.166\nWell, previously I didn't\nhave this else if here, so\n\n290\n00:18:22.166 --> 00:18:27.202\nthis next if actually caught\nfaveNum is less the 42,\n\n291\n00:18:27.202 --> 00:18:33.672\nthat conditional also evaluated to\ntrue because I changed it to 34.\n\n292\n00:18:33.672 --> 00:18:37.400\nAnd then when that ran faveNum became 57,\n\n293\n00:18:37.400 --> 00:18:42.952\nwhich then calls this last\nconditional to also evaluate to true.\n\n294\n00:18:42.952 --> 00:18:45.230\nAnd that's why I had all three print outs.\n\n295\n00:18:45.230 --> 00:18:50.486\nBut if I now refresh,\nyou'll notice faveNum=42,\n\n296\n00:18:50.486 --> 00:18:53.920\nit prints and faveNum is assigned.\n\n297\n00:18:53.920 --> 00:19:00.380\nBut because this is now an else if,\nas soon as it catches coming down this,\n\n298\n00:19:00.380 --> 00:19:05.220\nI like to think of it as a waterfall,\nit flows down from one to the next.\n\n299\n00:19:05.220 --> 00:19:10.110\nAs soon as it catches, it evaluates that\none and none of the rest of them, okay.\n\n300\n00:19:10.110 --> 00:19:11.540\nSo be very careful about that.\n\n301\n00:19:13.340 --> 00:19:15.270\nSo what does that mean?\n\n302\n00:19:15.270 --> 00:19:20.821\nAnd just to show you that it\nactually does complete all of this,\n\n303\n00:19:20.821 --> 00:19:23.039\nI'm gonna log faveNum.\n\n304\n00:19:25.571 --> 00:19:29.780\nAnd it does assign it to 34, but\nthis second one does not catch.\n\n305\n00:19:29.780 --> 00:19:34.940\nIt only catches if this block\nbefore it does not catch.\n\n306\n00:19:36.240 --> 00:19:42.938\nSo be very aware of the else if versus\njust a bunch of ifs right after another.\n\n307\n00:19:42.938 --> 00:19:49.903\nNow there is a third kind of decision\nmaking construct color switch.\n\n308\n00:19:49.903 --> 00:19:53.581\nI learned a little bit of C,\na little bit of Java, and\n\n309\n00:19:53.581 --> 00:19:58.516\nI went to the land of JavaScript and\nI was not taught switch statement,\n\n310\n00:19:58.516 --> 00:20:03.640\nwhich kind of resides in some form\nsomewhere in each of those languages.\n\n311\n00:20:03.640 --> 00:20:09.141\nBut I have seen that it's making a kind of\na resurgence and it does have its uses.\n\n312\n00:20:09.141 --> 00:20:11.879\nThe switch statement though,\nyou have to be careful with.\n\n313\n00:20:11.879 --> 00:20:16.409\nAnd I am going to look at the\ndocumentation just to show you Mozilla is\n\n314\n00:20:16.409 --> 00:20:21.192\nvery, very good at having kinda\nthis all encompassed documentation.\n\n315\n00:20:21.192 --> 00:20:23.072\nAnd then we'll see how the switch works.\n\n316\n00:20:23.072 --> 00:20:26.250\nWe will actually take this\nexact same examples and\n\n317\n00:20:29.070 --> 00:20:33.120\nchange it up a little bit, but reproduce\na similar set of behaviors, okay?\n\n318\n00:20:34.600 --> 00:20:38.383\nSo if I open up another browser window,\nand\n\n319\n00:20:38.383 --> 00:20:43.439\nI look up Javascript switch\nMozilla developer network.\n\n320\n00:20:46.191 --> 00:20:47.956\nAnd let's zoom that in.\n\n321\n00:20:47.956 --> 00:20:50.070\nThat's tiny, tiny.\n\n322\n00:20:50.070 --> 00:20:51.636\nSo I have my switch here.\n\n323\n00:20:53.148 --> 00:20:54.900\nStill kinda tiny, there we go.\n\n324\n00:20:56.020 --> 00:20:58.375\nIt tells you the construct of the switch.\n\n325\n00:20:59.760 --> 00:21:04.690\nSo this switch takes an expression, and\nwe'll look at a couple of examples.\n\n326\n00:21:05.730 --> 00:21:08.050\nAnd then you have these case statements.\n\n327\n00:21:09.210 --> 00:21:12.925\nOkay, so I look, and\nit gives you a nice sort of example,\n\n328\n00:21:12.925 --> 00:21:16.080\nkinda similar example that\nwe'll see in just a moment.\n\n329\n00:21:17.290 --> 00:21:20.180\nBut what I really like\nabout the documentation is\n\n330\n00:21:20.180 --> 00:21:24.170\nthere's a couple of gotchas with switch\nstatements that if you're not aware of,\n\n331\n00:21:24.170 --> 00:21:26.990\nit kinda makes it act weird.\n\n332\n00:21:28.050 --> 00:21:30.700\nSo, these are nice to know.\n\n333\n00:21:30.700 --> 00:21:33.280\nThey lay them out directly for you, and\n\n334\n00:21:33.280 --> 00:21:37.790\nit links to additional resources where\nyou can go that's how that works.\n\n335\n00:21:39.390 --> 00:21:43.480\nBut actually, let's see how this would\nwork in the context of a switch.\n\n336\n00:21:43.480 --> 00:21:48.170\nNow the switch is going to make a direct\ncomparison for the case statements.\n\n337\n00:21:48.170 --> 00:21:52.520\nInstead of seeing if it's less than,\ngreater than, or equal to,\n\n338\n00:21:52.520 --> 00:21:54.861\nit will actually compare by value.\n\n339\n00:21:54.861 --> 00:21:57.920\nIt's kind of an equal,\nequal, equal, equal.\n\n340\n00:21:57.920 --> 00:21:59.530\nYou're checking for\na bunch of equal stuff.\n\n341\n00:22:00.970 --> 00:22:05.669\nI am going to use this 34 and\nthis 57 as my examples for the cases.\n\n342\n00:22:07.400 --> 00:22:11.369\nAnd let's get up here a little bit, and\n\n343\n00:22:11.369 --> 00:22:17.080\nI'm going to comment this\nout just to get started.\n\n344\n00:22:17.080 --> 00:22:22.157\nSo var faveNum, or better yet\n\n345\n00:22:22.157 --> 00:22:26.625\nanotherNumb = 34, and\n\n346\n00:22:26.625 --> 00:22:34.557\nthen I'm going to switch on {anotherNum}.\n\n347\n00:22:34.557 --> 00:22:37.779\nAnd notice I have the curly braces.\n\n348\n00:22:37.779 --> 00:22:40.631\nNow within that, I have a case.\n\n349\n00:22:40.631 --> 00:22:43.155\nNow the case is what you're looking for,\n\n350\n00:22:43.155 --> 00:22:46.050\nwhat value you're trying\nto find within that.\n\n351\n00:22:46.050 --> 00:22:49.697\nSo case 34, and\n\n352\n00:22:49.697 --> 00:22:53.835\nwhat do I want to do?\n\n353\n00:22:53.835 --> 00:23:00.188\nLet's just say this is less than 42.\n\n354\n00:23:00.188 --> 00:23:03.291\nSome Hitch Hiker's Guide to\nthe Galaxy references in here.\n\n355\n00:23:03.291 --> 00:23:03.901\n&gt;&gt; I like it.\n\n356\n00:23:03.901 --> 00:23:08.008\n&gt;&gt; So, if you're like why is he always\ntalking about 42, it's a number,\n\n357\n00:23:08.008 --> 00:23:10.875\nit has some significance\nin some science fiction.\n\n358\n00:23:10.875 --> 00:23:11.527\n&gt;&gt; It's the meaning of life.\n\n359\n00:23:11.527 --> 00:23:12.502\n&gt;&gt; It's the meaning of life.\n\n360\n00:23:12.502 --> 00:23:16.642\n&gt;&gt; [LAUGH]\n&gt;&gt; And then I'm gonna say case 57.\n\n361\n00:23:24.152 --> 00:23:25.409\nWell, if I could.\n\n362\n00:23:26.831 --> 00:23:28.009\n&gt;&gt; It's holding down that shift.\n\n363\n00:23:28.009 --> 00:23:33.233\n&gt;&gt; Yeah, see, I don't do it that often,\nso then when I need to,\n\n364\n00:23:33.233 --> 00:23:37.460\nit's like my fingers are just going,\nyou got it.\n\n365\n00:23:37.460 --> 00:23:40.869\nI gotta really concentrate.\n\n366\n00:23:40.869 --> 00:23:43.419\nAnd I just realized there's\na typo in that one above there.\n\n367\n00:23:43.419 --> 00:23:45.266\n&gt;&gt; We were gonna let you slide.\n\n368\n00:23:45.266 --> 00:23:48.426\n&gt;&gt; Yeah, well,\nhe might be able to program, but\n\n369\n00:23:48.426 --> 00:23:51.679\nsentence construction is\nan issue that he has.\n\n370\n00:23:51.679 --> 00:23:53.805\nAnd then I can actually have.\n\n371\n00:23:57.680 --> 00:24:01.971\nCase 42,\nI don't know what I was thinking here.\n\n372\n00:24:09.627 --> 00:24:14.478\nThis is the meaning of life.\n\n373\n00:24:14.478 --> 00:24:19.800\nAs we look at this we should see,\nokay switch on another number.\n\n374\n00:24:21.140 --> 00:24:26.710\nOur expectation would be counsel log,\nthis is less than 42.\n\n375\n00:24:26.710 --> 00:24:31.380\nIf we want to reproduce a similar\nbehavior as here for these 34 and 57,\n\n376\n00:24:31.380 --> 00:24:34.400\nthat should be the only thing prints out.\n\n377\n00:24:35.480 --> 00:24:40.220\nWell let's go see what happens Well,\nthat's kind of odd.\n\n378\n00:24:42.020 --> 00:24:43.200\nThis is less than 42.\n\n379\n00:24:43.200 --> 00:24:44.430\nThis is more than 57.\n\n380\n00:24:44.430 --> 00:24:48.100\nThis is the meaning of life.\n\n381\n00:24:48.100 --> 00:24:48.720\nIt should be 34.\n\n382\n00:24:48.720 --> 00:24:52.100\nIt should only evaluate that one\ncase statement, that one branch.\n\n383\n00:24:53.540 --> 00:24:56.530\nAs I said, the Mozilla Developer Network\ndoes give you kind of,\n\n384\n00:24:56.530 --> 00:25:00.000\nit gives you some hints on those gatches.\n\n385\n00:25:00.000 --> 00:25:02.000\nAnd what happens if I forget a break?\n\n386\n00:25:02.000 --> 00:25:07.330\nThere's an additional construct you need\nto be aware of for the switch statement.\n\n387\n00:25:07.330 --> 00:25:10.180\nThe switch will do what\nis called fall through.\n\n388\n00:25:10.180 --> 00:25:14.900\nAs soon as it hits a case that it starts\nevaluating, it goes all the way to\n\n389\n00:25:14.900 --> 00:25:20.330\nthe bottom, unless within that\ncase statement, you say break.\n\n390\n00:25:20.330 --> 00:25:23.450\nAnd that means break the execution steps.\n\n391\n00:25:23.450 --> 00:25:28.090\nI don't want to waterfall down through,\nI want to stop here.\n\n392\n00:25:28.090 --> 00:25:31.780\nAnd that is similar to adding\nthat else instead of the ifs\n\n393\n00:25:31.780 --> 00:25:34.760\ninstead of the just if, if, if.\n\n394\n00:25:34.760 --> 00:25:37.867\nSo if I add a break\nwithin each one of these\n\n395\n00:25:43.590 --> 00:25:48.420\nThen I in fact get my expected behavior.\n\n396\n00:25:50.260 --> 00:25:53.085\nNow what happens if I change this to,\n\n397\n00:25:53.085 --> 00:25:57.126\nI don't know,\nwhat's your favorite number Mike?\n\n398\n00:25:57.126 --> 00:26:00.250\n&gt;&gt; 24.\n&gt;&gt; 24, all right, let's go with 24.\n\n399\n00:26:00.250 --> 00:26:02.930\nI'm glad it wasn't 34, 57, or 42.\n\n400\n00:26:02.930 --> 00:26:07.350\nYou're like, you had all my favorite\nnumbers, so I gotta pick another one.\n\n401\n00:26:07.350 --> 00:26:08.865\nGonna fix a quick typo here.\n\n402\n00:26:08.865 --> 00:26:13.856\nAnd let's see what happens when I\nnow switch on a number tha's not\n\n403\n00:26:13.856 --> 00:26:15.227\nlisted as a case.\n\n404\n00:26:15.227 --> 00:26:17.096\nHm.\n\n405\n00:26:17.096 --> 00:26:18.050\nI don't know.\n\n406\n00:26:18.050 --> 00:26:21.880\nI'm kinda not.\n\n407\n00:26:21.880 --> 00:26:24.420\nOkay, well that may be a desired behavior,\nbut\n\n408\n00:26:24.420 --> 00:26:28.230\nwhat if I want that kind of\ndefault behavior, that fall back?\n\n409\n00:26:28.230 --> 00:26:30.680\n&gt;&gt; If none of my cases match,\ndo this kind of thing.\n\n410\n00:26:30.680 --> 00:26:31.980\n&gt;&gt; Exactly, exactly.\n\n411\n00:26:31.980 --> 00:26:38.420\nSo I need to turn left, right or\ngo forward, what if I need to turn around?\n\n412\n00:26:38.420 --> 00:26:39.610\nWell, okay.\n\n413\n00:26:39.610 --> 00:26:40.580\nI'll turn around.\n\n414\n00:26:40.580 --> 00:26:45.790\nI need kind of that fall back option Okay,\nso how is that done?\n\n415\n00:26:47.120 --> 00:26:48.740\nWell the rest of these,\n\n416\n00:26:48.740 --> 00:26:52.320\nthis case is trying to match\nagainst the switched parameter.\n\n417\n00:26:52.320 --> 00:26:53.836\nBut if I say default,\n\n418\n00:27:00.784 --> 00:27:02.470\nI was getting ready to\ntype the same thing.\n\n419\n00:27:04.600 --> 00:27:08.402\nLet's just go with, uh-oh, defaultiness.\n\n420\n00:27:08.402 --> 00:27:11.120\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a made up word.\n\n421\n00:27:11.120 --> 00:27:13.270\nI think,\nI'm pretty sure it's a made up word.\n\n422\n00:27:13.270 --> 00:27:14.270\nAnd then don't forget to break.\n\n423\n00:27:16.280 --> 00:27:18.460\nThis default doesn't necessarily\nhave to be at the end.\n\n424\n00:27:18.460 --> 00:27:20.990\nI tend to put it at the end just for\n\n425\n00:27:20.990 --> 00:27:24.870\nmy thought process because this is\nthe last thing that I want to happen.\n\n426\n00:27:24.870 --> 00:27:29.160\nIf none of other ones are matched, I have\nseen people move the default to the top,\n\n427\n00:27:30.350 --> 00:27:35.390\nand that means that it would probably\nstart executing there unless do some other\n\n428\n00:27:35.390 --> 00:27:39.030\nkind of machinations or in the middle.\n\n429\n00:27:39.030 --> 00:27:43.430\nI recommend at the bottom because that's\nyour fallback, that's the last option.\n\n430\n00:27:43.430 --> 00:27:44.740\nAnd that's how I think of it.\n\n431\n00:27:44.740 --> 00:27:47.640\nThere are times where\nthat paradigm may change.\n\n432\n00:27:47.640 --> 00:27:49.628\nSo let's see how this works out.\n\n433\n00:27:49.628 --> 00:27:51.070\nThe faultiness!\n\n434\n00:27:51.070 --> 00:27:56.770\nSo now I have a fall back statement and\nthis is handy if I'm using this switch to\n\n435\n00:27:56.770 --> 00:28:01.500\ndefine another variable like x so\nI have x here.\n\n436\n00:28:02.540 --> 00:28:08.120\nAnd I have, let's say,\nin forty, I say X equals ten.\n\n437\n00:28:10.310 --> 00:28:13.760\nAnd here, I say X equals zero.\n\n438\n00:28:13.760 --> 00:28:19.100\nI want default to assign that to zero\nif none of the other cases catch.\n\n439\n00:28:19.100 --> 00:28:22.950\nIf I didn't have this default and\nI put 34 here,\n\n440\n00:28:24.640 --> 00:28:29.630\nthen x would not attain any value,\nit would be one of those undefined\n\n441\n00:28:29.630 --> 00:28:35.210\nvariable which can lead to runtime errors,\nall kinds of crazy stuff.\n\n442\n00:28:35.210 --> 00:28:36.420\nUndefined is not a function.\n\n443\n00:28:36.420 --> 00:28:45.850\nSo just to see, So\nright now another number is 34.\n\n444\n00:28:45.850 --> 00:28:48.840\nIt should catch on case 34.\n\n445\n00:28:48.840 --> 00:28:51.600\nAnd, okay, that's nice.\n\n446\n00:28:53.570 --> 00:28:54.850\nWait for it, wait for it.\n\n447\n00:28:54.850 --> 00:28:56.830\nI have undefined.\n\n448\n00:28:56.830 --> 00:28:58.110\nAnd that's because I have a break.\n\n449\n00:28:59.710 --> 00:29:05.350\nSo I have my break here and\nthat's an anticipated behavior so\n\n450\n00:29:05.350 --> 00:29:09.410\nif you're assigning variables\nwithin switch statements you should\n\n451\n00:29:09.410 --> 00:29:14.660\nalways assign variables for each case or\ndevised your switch statements to where\n\n452\n00:29:14.660 --> 00:29:17.620\nit kind of falls through and\nuse that cascade to your advantage.\n\n453\n00:29:18.730 --> 00:29:23.010\nSo be very aware that if\nyou're making assignments,\n\n454\n00:29:23.010 --> 00:29:26.090\nreassignments, doing some kind of\ntransformations within switches.\n\n455\n00:29:27.180 --> 00:29:29.460\nYou may end up with some errors.\n\n456\n00:29:29.460 --> 00:29:34.660\nJust like I will still have an error here\nif I had another number as 57 because\n\n457\n00:29:34.660 --> 00:29:39.160\nin that case would not\nassign any value to x.\n\n458\n00:29:39.160 --> 00:29:44.210\nAnother way to get around that and this is\nkind of a preferred method of mine is if\n\n459\n00:29:44.210 --> 00:29:48.300\nyou needed to fall assignment,\nand you only want to change,\n\n460\n00:29:48.300 --> 00:29:52.560\nif the switch catches,\nthen assign it at the beginning and\n\n461\n00:29:52.560 --> 00:29:56.250\nonly change within the case statements or\nthe if fail statements.\n\n462\n00:29:56.250 --> 00:30:02.078\nSo, have a value there and then you don't\nend up with undefined stuff That occurs.\n\n463\n00:30:02.078 --> 00:30:05.580\nSo we've seen several\nways to make decisions.\n\n464\n00:30:05.580 --> 00:30:08.250\nNow these are very much contextual.\n\n465\n00:30:08.250 --> 00:30:11.450\nWe've seen some nice\nexamples to think about.\n\n466\n00:30:11.450 --> 00:30:12.930\nBut how do we use these?\n\n467\n00:30:12.930 --> 00:30:15.340\nHow are these gonna be useful to us?\n\n468\n00:30:16.480 --> 00:30:20.310\nWell, that's one of those things\nwhere the context really does matter.\n\n469\n00:30:20.310 --> 00:30:21.897\nAnd we will definitely\nsee that at some point.\n\n470\n00:30:21.897 --> 00:30:23.120\n&gt;&gt; All right, Justin.\n\n471\n00:30:23.120 --> 00:30:28.140\nFantastic, look at how we can include\ndecision making in our Java Script using\n\n472\n00:30:28.140 --> 00:30:30.860\nif's, else if's and our switch cases.\n\n473\n00:30:30.860 --> 00:30:31.850\nSo we appreciate that,\n\n474\n00:30:31.850 --> 00:30:35.450\ngreat demonstrations, hope everybody\nout there enjoyed watching this one.\n\n475\n00:30:35.450 --> 00:30:38.580\nSigning off for ITPROTV,\nI've been your host Mike Roderick.\n\n476\n00:30:38.580 --> 00:30:39.600\n&gt;&gt; And I'm Justin Dennison.\n\n477\n00:30:39.600 --> 00:30:41.591\n&gt;&gt; And we'll see you next time\n\n478\n00:30:41.591 --> 00:30:47.608\n[MUSIC]\n\n479\n00:30:47.608 --> 00:30:52.089\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "202377677"
        },
        {
          "description": "In this episode, Justin and Mike demonstrate working with loops. They look at for loops, used when you know how many iterations you need. They also look at while loops, that loop until something happens.",
          "length": "1804",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-7-1-working_with_loops-020217-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-7-1-working_with_loops-020217-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-7-1-working_with_loops-020217-1-sm.jpg",
          "title": "Working with Loops",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:03.890\nWelcome to ITPro.TV,\n\n2\n00:00:03.890 --> 00:00:08.364\nI'm your host- [CROSSTALK]\n\n3\n00:00:08.364 --> 00:00:12.530\n&gt;&gt; You're watching ITPro.TV.\n\n4\n00:00:12.530 --> 00:00:15.290\n&gt;&gt; Hello, welcome to another\nexciting episode here, at ITPro.TV.\n\n5\n00:00:15.290 --> 00:00:17.500\nI'm your host Mike Rodrick, and\n\n6\n00:00:17.500 --> 00:00:19.970\ntoday we're doing our\nintroduction to JavaScript.\n\n7\n00:00:19.970 --> 00:00:20.650\nIn this episode,\n\n8\n00:00:20.650 --> 00:00:23.580\nwe're gonna be taking a look at\nanother construct within JavaScript.\n\n9\n00:00:23.580 --> 00:00:24.600\nAnd those are loops.\n\n10\n00:00:24.600 --> 00:00:25.600\nI should say constructs.\n\n11\n00:00:25.600 --> 00:00:29.140\nThere's several that we're gonna\ntalk about and here to explain them,\n\n12\n00:00:29.140 --> 00:00:32.290\nas he does so well, is Mr. Justin Denison.\n\n13\n00:00:32.290 --> 00:00:33.270\nWelcome back Justin.\n\n14\n00:00:33.270 --> 00:00:34.500\n&gt;&gt; Thanks for having me back Mike.\n\n15\n00:00:34.500 --> 00:00:35.560\nI'm excited.\n\n16\n00:00:35.560 --> 00:00:36.540\nLoops.\n\n17\n00:00:36.540 --> 00:00:39.425\nWhen I think of loops,\ninitially I'm like, Fruit Loops.\n\n18\n00:00:39.425 --> 00:00:41.380\n&gt;&gt; [LAUGH]\n&gt;&gt; Those are kind of weird.\n\n19\n00:00:41.380 --> 00:00:42.480\nThey taste they good.\n\n20\n00:00:42.480 --> 00:00:43.390\n&gt;&gt; They do.\n&gt;&gt; But I don't know.\n\n21\n00:00:43.390 --> 00:00:43.950\nI don't know.\n&gt;&gt; But\n\n22\n00:00:43.950 --> 00:00:47.020\nthey tear up the roof of your mouth at the\nsame time, it's like good and bad, ugh.\n\n23\n00:00:47.020 --> 00:00:50.430\n&gt;&gt; Yeah, you're like they're delicious,\nbut kinda hurts now,\n\n24\n00:00:50.430 --> 00:00:51.545\nit's like eating toast.\n\n25\n00:00:51.545 --> 00:00:55.840\n&gt;&gt; [LAUGH]\n&gt;&gt; But in addition to that, our minds,\n\n26\n00:00:55.840 --> 00:00:58.720\nwe don't think of being a loop,\nrepetitive,\n\n27\n00:00:58.720 --> 00:01:02.550\nalso known as iterative in nature,\nbut imagine this.\n\n28\n00:01:02.550 --> 00:01:05.460\nI don't know if you've ever done this but,\n\n29\n00:01:05.460 --> 00:01:09.600\nsometimes I need to go get a specific\nsocket, better yet, a screwdriver.\n\n30\n00:01:09.600 --> 00:01:12.960\nAnd you have all those screwdriver\nbits in your toolbox, or\n\n31\n00:01:12.960 --> 00:01:16.050\nmaybe you've seen someone do this\nif you haven't experienced this.\n\n32\n00:01:16.050 --> 00:01:19.970\nAnd, you're like, I think this one will\nwork, and you get the screwdriver out, and\n\n33\n00:01:19.970 --> 00:01:24.470\nyou start working on the tool,\nand you go, no, that's not right.\n\n34\n00:01:24.470 --> 00:01:28.530\nSo okay, next, no, that one's not right.\n\n35\n00:01:28.530 --> 00:01:30.760\nNext, that one's not right either.\n\n36\n00:01:30.760 --> 00:01:38.330\nAnd until you finally find the screwdriver\nthat works, you have been in a loop.\n\n37\n00:01:38.330 --> 00:01:41.159\nYou have been iteratively\ntrying out different\n\n38\n00:01:41.159 --> 00:01:44.845\nthings until you find one that\nworks noticed that word until.\n\n39\n00:01:44.845 --> 00:01:48.306\nI'll come back to that later I'll\nreally have a size that word, until.\n\n40\n00:01:48.306 --> 00:01:53.262\nIn addition to, you know like when you\ngo to the shoe store on a new pair\n\n41\n00:01:53.262 --> 00:01:57.106\nof shoes and you try your like\nI'm just going to try and\n\n42\n00:01:57.106 --> 00:02:01.740\nrepairs I don't figure one that\nI like You've set a limit.\n\n43\n00:02:01.740 --> 00:02:04.790\nNow, maybe you don't do that,\nsome people I know are like, well,\n\n44\n00:02:04.790 --> 00:02:07.600\nI'm gonna try them on until\nI find that perfect pair.\n\n45\n00:02:07.600 --> 00:02:12.720\nBut for me, sometimes I try to make\na plan before I go do things like that.\n\n46\n00:02:12.720 --> 00:02:17.300\nAnd I show up, I'm like, got three pairs\nof shoes to wow me, and that's it.\n\n47\n00:02:17.300 --> 00:02:20.940\nWe're leaving here with\nnone if that doesn't occur.\n\n48\n00:02:20.940 --> 00:02:24.520\nSo I have this until versus this how many.\n\n49\n00:02:25.580 --> 00:02:29.530\nWe don't actively think within our\nmind that we're being in a loop.\n\n50\n00:02:29.530 --> 00:02:33.980\nBut when in fact, we are additively\nworking through this processes but\n\n51\n00:02:33.980 --> 00:02:34.820\nit's kinda weird.\n\n52\n00:02:34.820 --> 00:02:35.640\nI will forewarn you.\n\n53\n00:02:35.640 --> 00:02:39.360\nWhen we do this programmatically, it's\na little odd for people to begin with.\n\n54\n00:02:39.360 --> 00:02:43.850\nSo just keep in mind that it's gonna\nbe a little off-putting sometimes, but\n\n55\n00:02:43.850 --> 00:02:47.460\nis an incredibly powerful\nconstruct within JavaScript.\n\n56\n00:02:47.460 --> 00:02:50.280\nAnd typically within\nthese C-style languages,\n\n57\n00:02:50.280 --> 00:02:54.180\nlike JavaScript,\nthey're almost like a mainstay.\n\n58\n00:02:54.180 --> 00:02:56.960\nYou wouldn't be able to do very much\nwithout them, especially if you have\n\n59\n00:02:56.960 --> 00:03:02.125\ncollections of things that you need to\nrun through that are millions in size.\n\n60\n00:03:02.125 --> 00:03:04.530\nSo that's very important for loops.\n\n61\n00:03:04.530 --> 00:03:09.660\nNow where are loops used other than\njust these little data manipulations?\n\n62\n00:03:09.660 --> 00:03:14.050\nWell, if you've ever played a game like\na console game or computer game, when you\n\n63\n00:03:14.050 --> 00:03:19.510\nhit play, that game goes into a loop that\nessentially says while you are playing,\n\n64\n00:03:19.510 --> 00:03:24.020\nI am going to render,\nregister your actions on the controller or\n\n65\n00:03:24.020 --> 00:03:27.050\nthe keyboard,\nsee how your enemies are doing.\n\n66\n00:03:27.050 --> 00:03:31.000\nMake sure that people talking to you\nif you're online, do all of that, and\n\n67\n00:03:31.000 --> 00:03:33.520\nthen when it gets to the bottom,\nit does it again.\n\n68\n00:03:33.520 --> 00:03:36.330\nNow, it doesn't seem like it's looping,\nbut\n\n69\n00:03:36.330 --> 00:03:39.890\nit is doing that so quickly,\nthat it's not discernible to you.\n\n70\n00:03:39.890 --> 00:03:45.820\nSo it's doing all of those things very,\nvery quickly in a loop and then as I said\n\n71\n00:03:45.820 --> 00:03:50.500\nsearching through a collection of things\nis very helpful for data analysis or\n\n72\n00:03:50.500 --> 00:03:54.630\ndata visualizations if that's kind\nof your bet toward programming.\n\n73\n00:03:55.640 --> 00:03:59.110\nNow, how can I make a loop in JavaScript?\n\n74\n00:03:59.110 --> 00:04:02.770\nWell, there's four types of\nloops that I'm gonna cover.\n\n75\n00:04:02.770 --> 00:04:06.090\nThat's not to say that there\nare not others on board.\n\n76\n00:04:06.090 --> 00:04:08.150\nThere's not others that have ever been or\n\n77\n00:04:08.150 --> 00:04:11.020\nothers that will ever you know,\nthat will come along.\n\n78\n00:04:11.020 --> 00:04:15.560\nBut the four R, a for\nloop that's kinda confusing.\n\n79\n00:04:15.560 --> 00:04:19.170\nFor four and I mean for like F-O-R.\n\n80\n00:04:19.170 --> 00:04:24.030\nThe while loop, the do while which\nis kinda weird to get a while and\n\n81\n00:04:24.030 --> 00:04:30.050\na do while and we'll see those in contrast\nand then a for-in, which is a smaller use\n\n82\n00:04:30.050 --> 00:04:35.000\ncase for me but just for completeness, I\nwanna make sure that everybody sees this.\n\n83\n00:04:35.000 --> 00:04:38.420\nSo let's go ahead and take a look,\ngetting started within this.\n\n84\n00:04:38.420 --> 00:04:39.060\nI have Chrome.\n\n85\n00:04:39.060 --> 00:04:43.320\nI'm gonna open up my project which\nis again just an index.html file for\n\n86\n00:04:43.320 --> 00:04:50.560\nthat app.js File that we need to run\nas well as our actual ab.js file.\n\n87\n00:04:50.560 --> 00:04:55.730\nSo I'm gonna look at index.html and\nthat is loops.\n\n88\n00:04:55.730 --> 00:04:59.830\nI'm gonna open my dev tools and\nthat's using the keyboard shortcut.\n\n89\n00:04:59.830 --> 00:05:03.710\nIf you don't want to use the shortcut,\nyou can go to more tools.\n\n90\n00:05:03.710 --> 00:05:07.160\nDeveloper tools and\nthen make sure that your console is open.\n\n91\n00:05:07.160 --> 00:05:08.700\nThat's where all of our\noutput's going to be.\n\n92\n00:05:10.020 --> 00:05:14.050\nAnd then, I'm going to hop over\ninto atom and open my project.\n\n93\n00:05:14.050 --> 00:05:22.960\nSo my project is loops and\nthere's my just plain\n\n94\n00:05:22.960 --> 00:05:27.400\nHDML file with my script tag at\nthe bottom and my ab dot JS file.\n\n95\n00:05:28.430 --> 00:05:30.850\nWe're going to start\nwith those four loops.\n\n96\n00:05:30.850 --> 00:05:34.220\nI just want to make some\ncomments to remind myself\n\n97\n00:05:34.220 --> 00:05:38.050\nof all of the things that\nwe're working toward.\n\n98\n00:05:39.820 --> 00:05:43.790\nDo.\n&gt;&gt; [LAUGH]\n\n99\n00:05:43.790 --> 00:05:44.710\n&gt;&gt; I'm trying, Mike.\n\n100\n00:05:44.710 --> 00:05:46.220\nI'm trying, Mike.\n\n101\n00:05:46.220 --> 00:05:46.890\nI really am.\n\n102\n00:05:46.890 --> 00:05:48.970\n&gt;&gt; That's a tough one.\n\n103\n00:05:48.970 --> 00:05:51.300\n&gt;&gt; And\nI'm leaving this four in at the bottom,\n\n104\n00:05:51.300 --> 00:05:55.770\neven though it's a type of for loop, just\nbecause it breaks paradigm a little bit.\n\n105\n00:05:57.110 --> 00:06:00.730\nNow, with each one of these,\nI'm going to show you the basic syntax,\n\n106\n00:06:00.730 --> 00:06:02.030\nthings to watch out.\n\n107\n00:06:02.030 --> 00:06:04.620\nThere's a couple of new\nthings that we need to know\n\n108\n00:06:04.620 --> 00:06:07.140\nin order to use loops effectively.\n\n109\n00:06:07.140 --> 00:06:10.940\nAnd I do have a couple of\nstrong opinions of myself,\n\n110\n00:06:10.940 --> 00:06:13.560\nyou're more than welcome to adopt them or\nnot.\n\n111\n00:06:13.560 --> 00:06:17.410\nAnd then I'm going to use them\nto actually do something.\n\n112\n00:06:17.410 --> 00:06:20.480\nWe have tools at our disposal\nwe should see how to use them,\n\n113\n00:06:20.480 --> 00:06:22.760\ncuz if I hand Mike a hammer,\nand he asked for\n\n114\n00:06:22.760 --> 00:06:26.555\na Phillips head screwdriver, he's gonna\ngo, I don't think that's gonna work.\n\n115\n00:06:26.555 --> 00:06:29.663\n&gt;&gt; [LAUGH]\n&gt;&gt; Maybe you can turn it around and\n\n116\n00:06:29.663 --> 00:06:32.071\ntry to [SOUND] but\nyou'll just booger it up.\n\n117\n00:06:32.071 --> 00:06:33.870\nSo be very careful about that.\n\n118\n00:06:33.870 --> 00:06:35.898\nSo for loops.\n\n119\n00:06:35.898 --> 00:06:42.820\nA for loop is very important if we know\nhow many times we need to do something.\n\n120\n00:06:42.820 --> 00:06:48.300\nI need to check if my beans are cooking\nten times before I know they're done.\n\n121\n00:06:48.300 --> 00:06:50.360\nThat's kind of a contrived example.\n\n122\n00:06:50.360 --> 00:06:53.300\nI just keep checking until they're done.\n\n123\n00:06:53.300 --> 00:06:56.130\nBut I want to try on those\nthree pairs of shoes or\n\n124\n00:06:56.130 --> 00:07:01.540\nI need to take 30 steps to get out of\nthis room, those are defined by a number.\n\n125\n00:07:01.540 --> 00:07:04.990\nNow that does not mean that you\nhave a number in front of you\n\n126\n00:07:04.990 --> 00:07:07.100\nevery time that you write a for loop.\n\n127\n00:07:07.100 --> 00:07:11.560\nAnd you'll see that in context,\nit might be a number that's given to me or\n\n128\n00:07:11.560 --> 00:07:14.590\nI've been informed of\ndynamically during runtime.\n\n129\n00:07:16.160 --> 00:07:22.670\nSo let's look at a very basic\nfour loop and so here we go.\n\n130\n00:07:24.020 --> 00:07:28.350\nFour, notice that turns\npurple in my editor,\n\n131\n00:07:28.350 --> 00:07:30.370\nfour is one of those reserved key words.\n\n132\n00:07:31.430 --> 00:07:35.180\nThat you should not say VAR4 unless\nyou add additional things after it.\n\n133\n00:07:35.180 --> 00:07:37.810\nI wanna say var i = 0;.\n\n134\n00:07:37.810 --> 00:07:40.010\nNotice there is a semi-colon here.\n\n135\n00:07:41.510 --> 00:07:46.000\nAnd I'm gonna put a line comment and\nsay this is the starting.\n\n136\n00:07:47.170 --> 00:07:51.384\nThis is where our loop is going to\nstart because in order to count,\n\n137\n00:07:51.384 --> 00:07:53.618\nI need some numerical reference.\n\n138\n00:07:53.618 --> 00:07:57.778\nThis start does not have to be a 0,\nbut I know from my experience,\n\n139\n00:07:57.778 --> 00:08:00.210\nthat we will run through collection.\n\n140\n00:08:00.210 --> 00:08:06.284\nAnd kind of start at zero because all\nof those collections are zero indexed.\n\n141\n00:08:06.284 --> 00:08:09.698\nThe next part of the loop\nis some condition,\n\n142\n00:08:09.698 --> 00:08:13.681\nkind of the stopping,\nwhen am I going to stop this?\n\n143\n00:08:13.681 --> 00:08:18.360\nAnd I'm going to say, while i is\nless than 10, and we have to be very\n\n144\n00:08:18.360 --> 00:08:23.311\ncareful about this condition because\nyou get this off-by-one error.\n\n145\n00:08:23.311 --> 00:08:25.800\nNow I'm gonna tell a really nerdy joke.\n\n146\n00:08:25.800 --> 00:08:27.160\nAnd let's see if you can get it.\n\n147\n00:08:27.160 --> 00:08:33.010\nI've heard there's two types of problems\nin programming slash computer science.\n\n148\n00:08:33.010 --> 00:08:36.090\nNaming, cashing, and off-by-one errors.\n\n149\n00:08:36.090 --> 00:08:38.159\nSo let that sink in for a moment.\n\n150\n00:08:38.159 --> 00:08:39.852\n&gt;&gt; [LAUGH] That's a good one.\n\n151\n00:08:39.852 --> 00:08:43.622\n&gt;&gt; And then, it is very important\nbecause those off-by-one errors,\n\n152\n00:08:43.622 --> 00:08:45.720\nlet that really ruminate.\n\n153\n00:08:45.720 --> 00:08:50.179\nIt will happen from time to time and\nyou'll go [SOUND].\n\n154\n00:08:50.179 --> 00:08:54.393\nSo if I overrun a collection,\nI may get undefined, or\n\n155\n00:08:54.393 --> 00:08:58.310\nunexpected errors that\nI didn't know about.\n\n156\n00:08:58.310 --> 00:09:02.953\nSo if I look at this terminating\ncondition, or this stopping condition\n\n157\n00:09:08.069 --> 00:09:11.840\nThere we go, and\nthere is our stopping condition.\n\n158\n00:09:11.840 --> 00:09:16.230\nNow what I mean is as soon\nas I is no longer less than.\n\n159\n00:09:16.230 --> 00:09:21.070\nSo this is, while this is true\nthe loop will continue running.\n\n160\n00:09:21.070 --> 00:09:25.330\nAs soon as this becomes false,\nis i less than ten?\n\n161\n00:09:25.330 --> 00:09:27.307\nNo.\nAs soon as you can answer no,\n\n162\n00:09:27.307 --> 00:09:29.271\nthen the loop stops running.\n\n163\n00:09:29.271 --> 00:09:34.139\nSo I like to think of it as starting,\nstopping,\n\n164\n00:09:34.139 --> 00:09:37.320\nand then we have this i += 1.\n\n165\n00:09:37.320 --> 00:09:43.150\nWant to take a moment and talk about that,\nbut this is our how we get there.\n\n166\n00:09:44.380 --> 00:09:45.750\nSo where do we start?\n\n167\n00:09:45.750 --> 00:09:46.670\nWhere do we stop?\n\n168\n00:09:46.670 --> 00:09:48.821\nAnd how do we get there, okay?\n\n169\n00:09:48.821 --> 00:09:55.507\nNow, within JavaScript, I have the ability\nto use a different construct than this.\n\n170\n00:09:55.507 --> 00:09:59.570\nI use the plus equals,\nwhich is a reassignment.\n\n171\n00:09:59.570 --> 00:10:04.563\nSo I start with whatever i is and\nI add one to it, in this case, and\n\n172\n00:10:04.563 --> 00:10:06.517\nthat's what i becomes.\n\n173\n00:10:06.517 --> 00:10:10.040\nIt is equivalent just for\n\n174\n00:10:10.040 --> 00:10:14.736\nreference as saying var i = 7 and\n\n175\n00:10:14.736 --> 00:10:19.450\nthen i = i +, not that, i + 1.\n\n176\n00:10:19.450 --> 00:10:23.349\nSo but look at i real quick\n\n177\n00:10:27.530 --> 00:10:32.043\nSo i is 7, and then I just console.log(i),\nthey're the exact same thing.\n\n178\n00:10:33.866 --> 00:10:35.870\nIt is 7, and then it becomes 8.\n\n179\n00:10:35.870 --> 00:10:42.731\nWell, how does that contrast with, i += 1,\n\n180\n00:10:42.731 --> 00:10:47.233\nwhich I am using here.\n\n181\n00:10:47.233 --> 00:10:52.896\nRemember, i = i + 1 made i 8 from 7.\n\n182\n00:10:52.896 --> 00:10:53.700\nAnd in fact,\n\n183\n00:10:53.700 --> 00:10:59.340\ni += 1 does the exact same thing,\nit's just a shorthand syntax for that.\n\n184\n00:10:59.340 --> 00:11:01.880\nNow, I will take a moment to say,\n\n185\n00:11:01.880 --> 00:11:05.370\nthis is not the only way to\nincrement these variables.\n\n186\n00:11:05.370 --> 00:11:08.560\nAnd so I'm increasing this\nvariable by sum defined amount.\n\n187\n00:11:08.560 --> 00:11:10.220\nThis does not have to be one.\n\n188\n00:11:10.220 --> 00:11:11.013\nIt can be two.\n\n189\n00:11:11.013 --> 00:11:12.754\nIt can be three.\n\n190\n00:11:12.754 --> 00:11:15.019\nIt can be 117.\n\n191\n00:11:15.019 --> 00:11:16.930\nIt can be one point one.\n\n192\n00:11:16.930 --> 00:11:18.440\nIt can be whatever you want it to be,\n\n193\n00:11:18.440 --> 00:11:20.750\nas long as it's valid in\nthe context of numbers.\n\n194\n00:11:22.840 --> 00:11:25.010\nBut there are some short hands for\n\n195\n00:11:25.010 --> 00:11:29.410\nthe one, because if I'm counting through\na collection, like when you count money.\n\n196\n00:11:29.410 --> 00:11:36.500\nYou don't grab a handful of bills and go,\nthat's six bucks I guess, another handful.\n\n197\n00:11:36.500 --> 00:11:38.490\nYou go one, two, three, four, five.\n\n198\n00:11:38.490 --> 00:11:41.640\nIn a collection, you tend to go\nsequentially, one at a time.\n\n199\n00:11:42.850 --> 00:11:45.760\nWithin JavaScript and\nsome other C style languages,\n\n200\n00:11:45.760 --> 00:11:50.970\nJava, C,\nI have this called increment operator.\n\n201\n00:11:50.970 --> 00:11:55.712\nIt does exactly the same as i += 1,\nbut I can say i ++.\n\n202\n00:11:55.712 --> 00:11:58.220\nBut here's where the hiccup comes in.\n\n203\n00:11:59.940 --> 00:12:04.494\nSometimes people coming from other\nlanguages also see the pre-increment\n\n204\n00:12:04.494 --> 00:12:05.370\noperator.\n\n205\n00:12:05.370 --> 00:12:10.800\nAnd these behave a little differently\nas far as when increment happens.\n\n206\n00:12:10.800 --> 00:12:15.470\nSo this one will use the value of I\nwherever it's used and then change it.\n\n207\n00:12:16.850 --> 00:12:19.443\nSo this is the post increment.\n\n208\n00:12:21.920 --> 00:12:25.297\nAnd this is\n\n209\n00:12:25.297 --> 00:12:32.430\nthe pre-increment.\n\n210\n00:12:32.430 --> 00:12:37.679\nAnd I incremented this by one a couple\nof times but here's, I wanna wrap this\n\n211\n00:12:37.679 --> 00:12:42.860\nin a console.log so you can see the actual\nexecution changes a little bit.\n\n212\n00:12:44.360 --> 00:12:50.513\nSo if I console.log(i++),\nwell if we're gonna get whatever i is and\n\n213\n00:12:50.513 --> 00:12:54.782\nthen we're gonna see what this prints out,\nand for\n\n214\n00:12:54.782 --> 00:12:57.969\nnow I'm just gonna comment this out.\n\n215\n00:12:57.969 --> 00:13:00.390\nSo, okay well I thought\nI was incrementing i.\n\n216\n00:13:01.730 --> 00:13:05.099\nWell, that's true, but\nif I use i ++ somewhere,\n\n217\n00:13:05.099 --> 00:13:10.630\nit will actually use whatever's currently\nstored in i before incrementing it by 1.\n\n218\n00:13:11.880 --> 00:13:19.200\nLet's look at how that\ncompares to the pre-increment.\n\n219\n00:13:19.200 --> 00:13:27.759\nSo just gonna And\n\n220\n00:13:27.759 --> 00:13:33.410\nin fact, that actually increments by\none and then allows you to use it.\n\n221\n00:13:33.410 --> 00:13:35.210\nNow, what do I mean by use?\n\n222\n00:13:35.210 --> 00:13:40.359\nI'm using,\nI would use it here and here, so\n\n223\n00:13:40.359 --> 00:13:46.450\nthis plus before or\nplus after would occur out of context.\n\n224\n00:13:46.450 --> 00:13:50.560\nSo I kinda like the plus equals\none because it allows me to\n\n225\n00:13:50.560 --> 00:13:52.960\nmore clearly discern what's going on.\n\n226\n00:13:52.960 --> 00:13:54.970\nThat's just a personal preference.\n\n227\n00:13:54.970 --> 00:13:59.450\nI would try out the plus plus and\nthe plus plus before hand.\n\n228\n00:13:59.450 --> 00:14:01.080\nBoth before and after.\n\n229\n00:14:01.080 --> 00:14:05.120\nAnd well really, see if you can break it,\nsee if you can break something using it.\n\n230\n00:14:05.120 --> 00:14:09.250\n&gt;&gt; And might there be scenarios where\nyou want the counter to increment before\n\n231\n00:14:09.250 --> 00:14:10.680\nit runs through the logic,\n\n232\n00:14:10.680 --> 00:14:14.940\nand sometimes you want the counter to\nincrement after it runs through the logic?\n\n233\n00:14:14.940 --> 00:14:20.560\n&gt;&gt; Exactly, now what I tend to do with the\nplus equals is I just move where it is.\n\n234\n00:14:20.560 --> 00:14:23.010\nAnd then, that's another thing,\n\n235\n00:14:23.010 --> 00:14:28.230\nI can make sure that it's happening\nat the exact point that I need it to,\n\n236\n00:14:28.230 --> 00:14:33.390\ninstead of doing some kind of\nobfuscated or really condensed code.\n\n237\n00:14:33.390 --> 00:14:36.320\nI'm a proponent of being very explicit\n\n238\n00:14:36.320 --> 00:14:39.340\neven if it's a little bit longer\nthan trying to make it really short.\n\n239\n00:14:39.340 --> 00:14:41.260\nJust so it's readable.\n\n240\n00:14:41.260 --> 00:14:44.990\nPersonal preference, you're more\nthan welcome to try the plus plus.\n\n241\n00:14:44.990 --> 00:14:51.280\nBefore and after the I, it will work\nvery similar to what I have here but\n\n242\n00:14:51.280 --> 00:14:52.500\nI just prefer the plus equals one.\n\n243\n00:14:53.500 --> 00:14:58.375\nNow this loop,\nI've written a loop, var i and\n\n244\n00:14:58.375 --> 00:15:02.256\nI'm gonna come out this i and this i.\n\n245\n00:15:02.256 --> 00:15:06.367\nSo I have this loop, I started zero and\n\n246\n00:15:06.367 --> 00:15:11.129\nthen I go until i is no\nlonger less than 10.\n\n247\n00:15:11.129 --> 00:15:18.604\nSo if i is less than 10 continue and then\nafter each loop, I'm going to add 1 to i.\n\n248\n00:15:18.604 --> 00:15:23.398\nSo log, and let's just see what i does.\n\n249\n00:15:23.398 --> 00:15:27.998\nAnd I start it, zero, one, two,\nthree, four, five, six, seven, eight,\n\n250\n00:15:27.998 --> 00:15:30.080\nnine, notice ten is not included.\n\n251\n00:15:30.080 --> 00:15:33.792\nAnd that's because I do not\nhave this equal to comparison.\n\n252\n00:15:33.792 --> 00:15:35.604\nThose off-by-one errors,\n\n253\n00:15:35.604 --> 00:15:40.540\na lot of times they happened because you\naccidentally add that equal sign there.\n\n254\n00:15:40.540 --> 00:15:43.620\nSo, there's the basic construct of the for\nloop.\n\n255\n00:15:43.620 --> 00:15:46.480\nThere is an additional\nwarning within JavaScript.\n\n256\n00:15:46.480 --> 00:15:50.162\nThis variable that the ratio occurs here.\n\n257\n00:15:50.162 --> 00:15:55.314\nWill possess with the value that it\nends with after the loop has done.\n\n258\n00:15:55.314 --> 00:16:00.721\nSo if you're using i other places Be\nvery aware that just to show you.\n\n259\n00:16:00.721 --> 00:16:07.898\nSo if I console.log I,\nI got undefined cuz I's not defined but\n\n260\n00:16:07.898 --> 00:16:15.347\nif I console.log I after the loop\nis run it is in fact still there,\n\n261\n00:16:15.347 --> 00:16:22.524\nstill has a value attached to it,\nand if I want to use I later on,\n\n262\n00:16:22.524 --> 00:16:28.290\nwell it's already defined\nbecause of the loop.\n\n263\n00:16:28.290 --> 00:16:33.940\nNow I show this because in other\nlanguages this variable would only exist\n\n264\n00:16:33.940 --> 00:16:39.900\nwhile the loop is running, such as Java or\nC, so things to keep aware of.\n\n265\n00:16:39.900 --> 00:16:43.530\nSo there's our basic for loop construct.\n\n266\n00:16:43.530 --> 00:16:45.510\nWell how would we use this?\n\n267\n00:16:45.510 --> 00:16:46.786\nI'm glad you ask.\n\n268\n00:16:47.896 --> 00:16:50.735\nSo let's just comment,\nI got comments everywhere, Mike.\n\n269\n00:16:52.585 --> 00:16:54.420\n&gt;&gt; That means good code, right?\n\n270\n00:16:54.420 --> 00:16:57.257\n&gt;&gt; Yeah, yeah,\nthat's a staple of wonderful code.\n\n271\n00:16:57.257 --> 00:16:58.320\n&gt;&gt; [LAUGH].\n\n272\n00:16:58.320 --> 00:17:02.720\n&gt;&gt; So typically I will use a for loop\nto run through a collection of things.\n\n273\n00:17:02.720 --> 00:17:05.650\nAn array for instance or a string.\n\n274\n00:17:07.000 --> 00:17:12.150\nSo I'm going to do a shortcut of creating\n\n275\n00:17:12.150 --> 00:17:18.050\nan array of all of the lowercase\nletters from a strain, so\n\n276\n00:17:18.050 --> 00:17:23.705\nI'm just gonna start with the string\n\n277\n00:17:23.705 --> 00:17:26.400\na,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u-\n,v,w,x,y,z.\n\n278\n00:17:26.400 --> 00:17:27.768\nThat I get them all.\n&gt;&gt; I believe so.\n\n279\n00:17:27.768 --> 00:17:31.285\n&gt;&gt; And then I'm just going to\nsplit on the empty string,\n\n280\n00:17:31.285 --> 00:17:34.029\nnow twhat is that actually provide to me.\n\n281\n00:17:39.619 --> 00:17:44.890\nThat gives me all the letters in,\nan array as individual characters.\n\n282\n00:17:44.890 --> 00:17:48.570\nBut these are still strings in JavaScript,\nthey're just single character.\n\n283\n00:17:48.570 --> 00:17:53.520\nNow if I drop this down,\nI actually have a length of 26.\n\n284\n00:17:53.520 --> 00:17:57.952\nThere is that number that maybe\ngenerated dynamically, right.\n\n285\n00:17:57.952 --> 00:18:03.200\nSo okay, let's see how we can use this.\n\n286\n00:18:03.200 --> 00:18:08.540\nI wanna know if a certain letter is\ncontained within the string now,\n\n287\n00:18:08.540 --> 00:18:12.160\nlet's split it into an array, so we're\ngonna expect various aspects of it but\n\n288\n00:18:12.160 --> 00:18:13.606\nI could use this just as a string.\n\n289\n00:18:13.606 --> 00:18:21.640\nSo var i =, I'm gonna start at zero\nbecause this is index to zero.\n\n290\n00:18:23.170 --> 00:18:28.892\nAnd while i &lt; letters.length.\n\n291\n00:18:28.892 --> 00:18:35.450\nVery common to see an array .length or\na string .length.\n\n292\n00:18:35.450 --> 00:18:39.330\nHowever, don't put the equal sign,\ncuz it'll over run by one.\n\n293\n00:18:39.330 --> 00:18:45.484\nCuz the index starts at zero, so\neverything shifted a little bit.\n\n294\n00:18:45.484 --> 00:18:50.809\nAnd then i + = 1.\n\n295\n00:18:50.809 --> 00:18:54.028\nSo letter to search for,\nI'm gonna create another variable here.\n\n296\n00:18:54.028 --> 00:18:56.317\nSearch letter.\n\n297\n00:18:59.219 --> 00:19:00.205\nThat's not a letter.\n\n298\n00:19:00.205 --> 00:19:01.900\n&gt;&gt; [LAUGH].\n\n299\n00:19:01.900 --> 00:19:03.072\n&gt;&gt; Let's make it interesting, E.\n\n300\n00:19:03.072 --> 00:19:08.980\nSo I want to know if this\nis inside of that, okay?\n\n301\n00:19:11.250 --> 00:19:14.700\nAnd so we have our for loop,\nwe're gonna start running through, and\n\n302\n00:19:14.700 --> 00:19:16.320\nwe want to do a test.\n\n303\n00:19:16.320 --> 00:19:18.725\nSo we're gonna add\nan additional tool in here.\n\n304\n00:19:18.725 --> 00:19:25.818\nSo if letters bracket i is\nequal to the searchLetter,\n\n305\n00:19:25.818 --> 00:19:31.176\nnow this letter bracket i is going to give\n\n306\n00:19:31.176 --> 00:19:38.440\nme whatever number is assigned\nto i it will start at 0.\n\n307\n00:19:38.440 --> 00:19:41.400\nSo that the zeroth index it\nwill give me that letter for\n\n308\n00:19:41.400 --> 00:19:45.952\ncomparison and then it will run\nthrough and get to one, two,\n\n309\n00:19:45.952 --> 00:19:50.430\nthree, four and so on, and\nit will run through the entire collection.\n\n310\n00:19:50.430 --> 00:19:55.950\nBut now I have this dynamic selection that\nallows me to start at the beginning and\n\n311\n00:19:55.950 --> 00:19:57.820\ngo to the end.\n\n312\n00:19:57.820 --> 00:20:00.435\nSo if letters i = searchLetter.\n\n313\n00:20:01.891 --> 00:20:06.812\nConsole.log found letter +\n\n314\n00:20:06.812 --> 00:20:11.338\nsearchLetter + @ index,\n\n315\n00:20:11.338 --> 00:20:16.452\na little long of a string here,\n\n316\n00:20:16.452 --> 00:20:22.179\nbut it helps with the output here.\n\n317\n00:20:24.419 --> 00:20:28.860\nSo if we find it, it's going to report\nthat it's found, and where it was found.\n\n318\n00:20:28.860 --> 00:20:33.330\nIf we don't find it,\nthen Nothing's gonna print out.\n\n319\n00:20:33.330 --> 00:20:35.780\nSo I know because of\nthe letter that I have chosen\n\n320\n00:20:35.780 --> 00:20:37.750\nthat as I run through this that it will.\n\n321\n00:20:39.170 --> 00:20:43.590\nSo let's see here,\nfound letter e in index four or\n\n322\n00:20:43.590 --> 00:20:47.710\nif we go and check,\nit is in fact at index four.\n\n323\n00:20:47.710 --> 00:20:52.420\nSo this is one of those helpful algorithms\nthat if I don't see if somethings\n\n324\n00:20:52.420 --> 00:20:53.710\nIn an array.\n\n325\n00:20:53.710 --> 00:20:57.890\nI can use this for\nloop if combination to then check.\n\n326\n00:20:59.090 --> 00:21:04.961\nNow what happens if I look for\na letter that is definitely not there,\n\n327\n00:21:04.961 --> 00:21:08.363\nlike a string representation of five.\n\n328\n00:21:09.663 --> 00:21:11.840\nNothing's printed out, okay?\n\n329\n00:21:11.840 --> 00:21:14.310\nNow that would be different if\nI was using this as a function,\n\n330\n00:21:14.310 --> 00:21:16.230\nlike as a function construct.\n\n331\n00:21:16.230 --> 00:21:20.480\nI wouldn't want it to return nothing,\ncuz that'll give me weird behavior.\n\n332\n00:21:20.480 --> 00:21:23.120\nBut we'll see that soon enough.\n\n333\n00:21:24.380 --> 00:21:28.611\nNow, I've run through this entire\ncollection with the for loop.\n\n334\n00:21:29.850 --> 00:21:36.100\nA wild loop though, I just want to,\nhow would I do this with a wild loop?\n\n335\n00:21:36.100 --> 00:21:38.820\nI can actually reproduce this to\nthe wild loop because I want to\n\n336\n00:21:38.820 --> 00:21:43.250\nstart at the beginning and while I'm\nrunning I want to get to the end.\n\n337\n00:21:43.250 --> 00:21:45.890\nUntil I'm to the end.\n\n338\n00:21:45.890 --> 00:21:48.600\nUntil is very important\nwith the wild loop.\n\n339\n00:21:49.620 --> 00:21:54.260\nSo let's actually reproduce the exact\nsame behavior using a wire loop and\n\n340\n00:21:54.260 --> 00:21:58.140\nkind of use that as a comparison point.\n\n341\n00:21:58.140 --> 00:22:03.260\nSo I'm going to create a start,\nand a stop.\n\n342\n00:22:03.260 --> 00:22:10.100\nAnd a stop is actually\ngoing to be letters.length.\n\n343\n00:22:10.100 --> 00:22:14.810\nSo I wanna start at zero and\ngo until I'm at the end, and\n\n344\n00:22:16.940 --> 00:22:22.030\nthe construction for\nawhile is while some condition is true.\n\n345\n00:22:22.030 --> 00:22:29.157\nSo while start is less than stop, I'm\njust gonna move that up just little bit.\n\n346\n00:22:30.429 --> 00:22:34.340\nWhile start is less than stop,\nI want to do something.\n\n347\n00:22:34.340 --> 00:22:40.105\nI will forewarn you, this is a great\nplace to lock up your machine.\n\n348\n00:22:40.105 --> 00:22:42.960\n&gt;&gt; [LAUGH]\n&gt;&gt; So be very, very careful if you're\n\n349\n00:22:42.960 --> 00:22:48.310\nfollowing along make sure you see\nall the pieces before you go and\n\n350\n00:22:48.310 --> 00:22:54.150\nrerun because Chrome will just go, yeah,\nI'm gonna take a nap now cuz I locked up.\n\n351\n00:22:54.150 --> 00:22:56.320\nThis will actually enter\ninto an infinite loop\n\n352\n00:22:57.530 --> 00:23:00.430\nbecause we have nothing that\nchanges this condition.\n\n353\n00:23:00.430 --> 00:23:03.130\nUp here in the for loop this last part,\n\n354\n00:23:03.130 --> 00:23:07.510\nthis how we get there, always\nchanges the result of the condition.\n\n355\n00:23:07.510 --> 00:23:09.690\nWell we currently have nothing.\n\n356\n00:23:09.690 --> 00:23:12.930\nSo what I like to do when I'm\nwriting a wild loop is go ahead and\n\n357\n00:23:12.930 --> 00:23:18.420\nstart by making sure the condition changes\nbefore I worry about anything else.\n\n358\n00:23:18.420 --> 00:23:24.030\nSo I know I wanna go one at\na time through the letters, so\n\n359\n00:23:24.030 --> 00:23:29.396\nwhile start is less than stop,\nstart += 1, okay?\n\n360\n00:23:29.396 --> 00:23:31.284\nAnd let's see what that does.\n\n361\n00:23:32.647 --> 00:23:36.941\nI'm gonna log start and\nwe got a log in here\n\n362\n00:23:36.941 --> 00:23:41.613\nthat's kinda making things a little weird.\n\n363\n00:23:43.277 --> 00:23:48.837\nSo zero, one, two, three, four, five, 25,\nnotice it now using your cursor back.\n\n364\n00:23:48.837 --> 00:23:52.617\nNot that I've every done this,\nbut if you do refresh and\n\n365\n00:23:52.617 --> 00:23:57.374\nyou enter into an infinite loop there\nare times where Chrome will say.\n\n366\n00:23:57.374 --> 00:24:01.840\nHey, I think this is an infinite loop,\nare you sure?\n\n367\n00:24:01.840 --> 00:24:05.240\nDo not click yes if it ever\nasks you that question.\n\n368\n00:24:05.240 --> 00:24:08.200\n&gt;&gt; [LAUGH]\n&gt;&gt; Now that I've done that, but\n\n369\n00:24:08.200 --> 00:24:10.850\nI might have done that and\nthen had to restart my computer.\n\n370\n00:24:10.850 --> 00:24:11.440\nNow luckily,\n\n371\n00:24:11.440 --> 00:24:15.270\nthis is not one of those infinite loops\nthat can really mess up something.\n\n372\n00:24:15.270 --> 00:24:18.770\nIt'll lock up your browser and your\nbrowser may consume all of your system\n\n373\n00:24:18.770 --> 00:24:21.220\nmemory, but on reboot you're usually okay.\n\n374\n00:24:22.240 --> 00:24:25.540\nUsually, there maybe some crazy exception.\n\n375\n00:24:25.540 --> 00:24:29.030\nAn order style languages,\nyou can do all kinds of bad stuff.\n\n376\n00:24:30.650 --> 00:24:34.200\nGoing in the infinite loops\nthat had no way to exit and\n\n377\n00:24:34.200 --> 00:24:35.680\njust consume too much of the resources.\n\n378\n00:24:36.950 --> 00:24:40.930\nSo be very careful if Chrome asks you,\nthis looks like an infinite loop,\n\n379\n00:24:40.930 --> 00:24:42.460\nare you sure you want to continue?\n\n380\n00:24:42.460 --> 00:24:46.935\nDon't go, sure and click yes,\nbecause it will wreck your day.\n\n381\n00:24:46.935 --> 00:24:49.830\n&gt;&gt; [LAUGH]\n&gt;&gt; At least for a little while.\n\n382\n00:24:49.830 --> 00:24:52.622\nSo let's go ahead and finish up and\n\n383\n00:24:52.622 --> 00:24:58.320\nsee how we can reproduce the same\nbehavior using a while loop.\n\n384\n00:24:58.320 --> 00:24:59.940\nAnd notice I said for\n\n385\n00:24:59.940 --> 00:25:05.230\nis for how many times you want and\nwhile is until a condition is met.\n\n386\n00:25:05.230 --> 00:25:10.500\nThat does not mean you cannot emulate\nthe exact same thing with either or.\n\n387\n00:25:10.500 --> 00:25:15.060\nSo, be aware of that but I'd like\nto think of them in those context,\n\n388\n00:25:15.060 --> 00:25:21.020\nthat way I can go I need to do this until,\nboom, I'm using a while loop.\n\n389\n00:25:21.020 --> 00:25:25.370\nI need to do this for\nx many times, that's a for loop.\n\n390\n00:25:25.370 --> 00:25:28.540\nSo that's a good way at decision\nmaking point to get you started,\n\n391\n00:25:28.540 --> 00:25:31.160\nthere are obviously exceptions to that.\n\n392\n00:25:31.160 --> 00:25:39.978\nSo I have my start variable and\nif(letters[start]),\n\n393\n00:25:39.978 --> 00:25:45.540\nnotice I'm using that start\nvariable as my index now\n\n394\n00:25:45.540 --> 00:25:47.360\ncuz that's actually what's changing.\n\n395\n00:25:47.360 --> 00:25:48.620\nSo I have to be aware of that.\n\n396\n00:25:48.620 --> 00:25:54.605\nIf that is equal to the searchLetter,\n\n397\n00:25:54.605 --> 00:26:00.029\nthen I'm just going to apparently\n\n398\n00:26:00.029 --> 00:26:04.899\ndo a bunch of crazy stuff here.\n\n399\n00:26:04.899 --> 00:26:08.702\nHere and cut this and\n\n400\n00:26:08.702 --> 00:26:13.630\npaste and then say start.\n\n401\n00:26:14.940 --> 00:26:16.400\nAgain, using start as my index.\n\n402\n00:26:18.330 --> 00:26:22.511\nSo if(letters[start]) is\nequal to the searchLetter,\n\n403\n00:26:22.511 --> 00:26:25.450\nit'll print that in [INAUDIBLE] through.\n\n404\n00:26:25.450 --> 00:26:27.950\nSo let's see what then\nbehavior looks like.\n\n405\n00:26:27.950 --> 00:26:30.060\nWell, you printed nothing.\n\n406\n00:26:30.060 --> 00:26:34.000\nCurrently our search letter\nis still the string five.\n\n407\n00:26:34.000 --> 00:26:38.830\nWell, what if I actually\nmove my cursor up there and\n\n408\n00:26:38.830 --> 00:26:43.370\nchange that to letter a as such,\nso the searchLetter is now a.\n\n409\n00:26:44.680 --> 00:26:51.450\nAnd I refresh, I found letter a at\nindex 0, found letter a at index 0.\n\n410\n00:26:51.450 --> 00:26:57.117\nHm, why is that the case?\n\n411\n00:27:01.901 --> 00:27:02.990\nHm, what do you think, Mike?\n\n412\n00:27:04.135 --> 00:27:05.530\n&gt;&gt; Well,\n\n413\n00:27:05.530 --> 00:27:08.980\nmy first thought is it's obviously\ngoing through our while loop twice.\n\n414\n00:27:08.980 --> 00:27:09.860\n&gt;&gt; Right.\n\n415\n00:27:09.860 --> 00:27:13.250\n&gt;&gt; So\nwe're incrementing after it's run once?\n\n416\n00:27:14.570 --> 00:27:17.400\n&gt;&gt; Right, so\nlet's go ahead and track this.\n\n417\n00:27:19.010 --> 00:27:23.740\nThis is a common off by one run or\nthis is going too many times.\n\n418\n00:27:23.740 --> 00:27:31.380\nSo if I started start, start is actually\ngoing to find at 0, that information.\n\n419\n00:27:31.380 --> 00:27:37.573\nSo plus equals 1, so start starts at 0,\nit's less than what is stop,\n\n420\n00:27:37.573 --> 00:27:42.762\nthat should be 25 because\nthat's how many we have there.\n\n421\n00:27:42.762 --> 00:27:46.186\nAnd we start running if letters at 0,\n\n422\n00:27:46.186 --> 00:27:52.291\nwhich has the 0th index is equal\nto the searchLetter, print that.\n\n423\n00:27:53.390 --> 00:27:55.670\nAnd then start plus equals 1.\n\n424\n00:27:55.670 --> 00:27:58.300\nSo start will now become the value 1.\n\n425\n00:27:58.300 --> 00:27:59.050\nIs 1 less than stop?\n\n426\n00:27:59.050 --> 00:28:01.682\n&gt;&gt; No.\n\n427\n00:28:01.682 --> 00:28:05.180\nRight, because that was our length.\n\n428\n00:28:05.180 --> 00:28:08.540\n&gt;&gt; Right, so that's at 25,\nso it's gonna run again.\n\n429\n00:28:08.540 --> 00:28:13.868\nIf letters at 1 is equal to searchLetter,\n\n430\n00:28:13.868 --> 00:28:22.170\nconsole.log\"Found letters\" +\nsearchLetter + indexStart.\n\n431\n00:28:22.170 --> 00:28:23.490\n&gt;&gt; But one should not equal.\n\n432\n00:28:24.850 --> 00:28:26.250\n&gt;&gt; So one should not equal,\n\n433\n00:28:26.250 --> 00:28:29.300\nso let's make sure that we just\ndidn't have a little hiccup there.\n\n434\n00:28:29.300 --> 00:28:35.067\nNo, and notice this is 29 and\nthis is 20 I'm using,\n\n435\n00:28:35.067 --> 00:28:41.098\ngot to be careful, Mike,\nif you got pre-existing code.\n\n436\n00:28:41.098 --> 00:28:41.670\n&gt;&gt; Oops.\n\n437\n00:28:41.670 --> 00:28:42.660\n&gt;&gt; Yeah.\n\n438\n00:28:42.660 --> 00:28:45.440\nActually, it looks like\nour while loop ran twice,\n\n439\n00:28:45.440 --> 00:28:50.110\nwhen in fact, our foreloop is\nthe result of this first one.\n\n440\n00:28:50.110 --> 00:28:56.180\nSo be very careful about having a good\nbearing on what's going on around you.\n\n441\n00:28:56.180 --> 00:28:58.715\nIf I actually print, comment this out,\n\n442\n00:28:58.715 --> 00:29:01.857\nI'll find a while loop is\nactually running once.\n\n443\n00:29:01.857 --> 00:29:05.440\nBut that's a great exercise in oop,\nsomething went a little weird.\n\n444\n00:29:05.440 --> 00:29:06.854\nThat's kind of weird, let's check it out.\n\n445\n00:29:06.854 --> 00:29:09.957\nAnd that's what I mean by\nchecking things early and often,\n\n446\n00:29:09.957 --> 00:29:12.740\nseeing if they match your expectations.\n\n447\n00:29:12.740 --> 00:29:15.200\nIf they do, then keep going.\n\n448\n00:29:15.200 --> 00:29:19.640\nIf they don't, it's best to fix those\nproblems at that point instead of going,\n\n449\n00:29:19.640 --> 00:29:23.240\nI'll worry about it later\ncuz it's rough goings.\n\n450\n00:29:24.600 --> 00:29:27.680\n&gt;&gt; All right,\nwe wanna keep everything sailing smooth.\n\n451\n00:29:27.680 --> 00:29:29.270\nWe don't want the rough waters.\n\n452\n00:29:29.270 --> 00:29:32.780\nWe appreciate that, Jus, and I know we got\nmore to do when it comes to our loops.\n\n453\n00:29:32.780 --> 00:29:35.970\nWe haven't looked at our do while or\nour for in yet, but\n\n454\n00:29:35.970 --> 00:29:38.880\nunfortunately we're out of time for\nthis particular episode.\n\n455\n00:29:38.880 --> 00:29:41.310\nWe had to break it into a part two.\n\n456\n00:29:41.310 --> 00:29:42.910\nSo again, appreciate that Justin.\n\n457\n00:29:42.910 --> 00:29:44.380\nHope everybody out there enjoyed watching.\n\n458\n00:29:44.380 --> 00:29:47.660\nMake sure you sign in for\npart two of our loops.\n\n459\n00:29:47.660 --> 00:29:50.360\nSigning off for ITProTV,\nI'm Mike Roderick.\n\n460\n00:29:50.360 --> 00:29:51.380\n&gt;&gt; And I'm Justin Dennison.\n\n461\n00:29:51.380 --> 00:29:52.347\n&gt;&gt; We'll see you next time.\n\n462\n00:29:52.347 --> 00:29:59.722\n[MUSIC]\n\n463\n00:29:59.722 --> 00:30:01.610\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "202377885"
        },
        {
          "description": "In this episode, Justin and Mike continue their look into loops. This time they look at do while loops that always run once. They also look at for in loops, used to cycle through a collection.",
          "length": "885",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-8-1-2-_working_with_loops_pt2-020217-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-8-1-2-_working_with_loops_pt2-020217-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-8-1-2-_working_with_loops_pt2-020217-1-sm.jpg",
          "title": "Working with Loops Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.590 --> 00:00:05.692\n[CROSSTALK]\nYour\n\n2\n00:00:05.692 --> 00:00:12.365\nwatching ITPRO TV.\n\n3\n00:00:12.365 --> 00:00:15.240\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPRO TV.\n\n4\n00:00:15.240 --> 00:00:17.180\nI'm your host Mike Roderick.\n\n5\n00:00:17.180 --> 00:00:19.900\nAnd today we're doing our\nintroduction of JavaScript.\n\n6\n00:00:19.900 --> 00:00:23.290\nIn this episode we're actually\ncontinuing our thought process on loops.\n\n7\n00:00:23.290 --> 00:00:24.660\nThis is the part 2.\n\n8\n00:00:24.660 --> 00:00:27.330\nSo if you miss the first part, make\nsure you go back and check that one out.\n\n9\n00:00:27.330 --> 00:00:30.750\nBut as far as our loops shown,\nin the first part, we looked at for loops,\n\n10\n00:00:30.750 --> 00:00:32.500\nwe looked at While loops.\n\n11\n00:00:32.500 --> 00:00:35.520\nWe still have a few more\ntypes of loops to go over.\n\n12\n00:00:35.520 --> 00:00:38.310\nAnd here to help us with that is,\nof course, Mr. Justin Dennison.\n\n13\n00:00:38.310 --> 00:00:39.250\nWelcome back, Justin.\n\n14\n00:00:39.250 --> 00:00:40.380\n&gt;&gt; Thanks for having me back, Mike.\n\n15\n00:00:40.380 --> 00:00:43.395\n&gt;&gt; Yeah, those loops,\nthey can be, they can be bears.\n\n16\n00:00:43.395 --> 00:00:44.940\n&gt;&gt; [LAUGH]\n&gt;&gt; So last time,\n\n17\n00:00:44.940 --> 00:00:47.960\nwe actually talked about for loops\n&gt;&gt; And while loops.\n\n18\n00:00:47.960 --> 00:00:49.680\nSo those are the two that we started with.\n\n19\n00:00:49.680 --> 00:00:52.720\nNow four are great to run if\n\n20\n00:00:52.720 --> 00:00:56.310\nyou know how many times you need\nto run a particular set of code.\n\n21\n00:00:56.310 --> 00:01:01.730\nWhile loops are great if you need\nto run until some condition is met.\n\n22\n00:01:01.730 --> 00:01:03.400\nNow, it kind of breaks away.\n\n23\n00:01:03.400 --> 00:01:09.430\nThere are times where you're like I wanna\nensure that this runs at least one time.\n\n24\n00:01:09.430 --> 00:01:11.880\nBut maybe it doesn't need\nto run any other times.\n\n25\n00:01:11.880 --> 00:01:14.470\nAnd that's where the do while comes in.\n\n26\n00:01:15.530 --> 00:01:21.150\nThe do while loop starts with a block and\nthen actually says do this once and\n\n27\n00:01:21.150 --> 00:01:23.780\nthen while this is true,\ncontinue doing that.\n\n28\n00:01:23.780 --> 00:01:28.960\nSo, let's take a look and compare that\nto our while loop that we started with.\n\n29\n00:01:28.960 --> 00:01:32.341\nNow I'm back in the project\nwhere we started, and\n\n30\n00:01:32.341 --> 00:01:35.721\njust to show you that\nthe while loop may never run,\n\n31\n00:01:35.721 --> 00:01:39.607\nI'm going to change this just\nto have a console log here.\n\n32\n00:01:41.958 --> 00:01:46.480\nAs a very complex debugging structure.\n\n33\n00:01:46.480 --> 00:01:49.400\nYou have to be term\nmaster to get that one.\n\n34\n00:01:49.400 --> 00:01:51.960\nSo, if i just put a 27,\n\n35\n00:01:51.960 --> 00:01:57.780\nI know that the letters stop at\n25 index but the length is 26.\n\n36\n00:01:57.780 --> 00:02:02.250\nBut stack is actually over the larger and\nthen stop.\n\n37\n00:02:02.250 --> 00:02:06.590\nSo, if we take a look,\nthat actually never runs.\n\n38\n00:02:06.590 --> 00:02:10.330\nWe should see a here here here and\napprove that.\n\n39\n00:02:10.330 --> 00:02:15.410\nLet's put a 23, and we see that this\nlittle 3 here, if you can see that,\n\n40\n00:02:15.410 --> 00:02:17.630\nlet me see if I can, there we go.\n\n41\n00:02:17.630 --> 00:02:22.450\nSo, this 3 here says, this has been\nprinted out in succession 3 times.\n\n42\n00:02:22.450 --> 00:02:25.300\nNow the browser keeps that from\nrunning down through your console.\n\n43\n00:02:25.300 --> 00:02:28.630\nIt will just put a three if something's\nhappening repetitively, and\n\n44\n00:02:28.630 --> 00:02:30.580\nthe output's not changing.\n\n45\n00:02:30.580 --> 00:02:35.070\nSo, I wanna make sure that this\nwhile loop runs at least one time.\n\n46\n00:02:35.070 --> 00:02:38.390\nNow this is not a good example\nto see why you would need that.\n\n47\n00:02:38.390 --> 00:02:43.590\nA better example is I need to generate\na set of numbers for some calculation,\n\n48\n00:02:43.590 --> 00:02:48.100\nor even graphing representation\nbetween a stack and a stock.\n\n49\n00:02:48.100 --> 00:02:52.190\nBut I wanna make sure there is at\nleast one number in that range.\n\n50\n00:02:52.190 --> 00:02:55.940\nIn that array cuz otherwise that\narray may have an empty array and\n\n51\n00:02:55.940 --> 00:02:57.880\nI have to do a lot of menu checking.\n\n52\n00:02:57.880 --> 00:03:02.410\nSo, I'm now in need of at least one\nnumber in there anything additional.\n\n53\n00:03:02.410 --> 00:03:06.830\nSo, the do while is a great\nplace to start using that.\n\n54\n00:03:08.370 --> 00:03:12.056\nSo, if I comment this out as we say,\nif you forget and you have multiple things\n\n55\n00:03:12.056 --> 00:03:15.881\nrunning you're like, [SOUND] I'm chasing\nerrors that don't actually exist.\n\n56\n00:03:15.881 --> 00:03:17.700\nSo, be very careful about that.\n\n57\n00:03:17.700 --> 00:03:22.640\nIn general you're not gonna have a lot\nof commented out code in your code, or\n\n58\n00:03:22.640 --> 00:03:25.140\nyou shouldn't when\nthe product is finished.\n\n59\n00:03:25.140 --> 00:03:30.020\nI'm not saying that you can't comment out,\ncode to see how it works or\n\n60\n00:03:30.020 --> 00:03:31.310\ntrying to fix errors.\n\n61\n00:03:31.310 --> 00:03:32.000\nBut at some point,\n\n62\n00:03:32.000 --> 00:03:36.154\nyou do wanna clean it up because you\njust don't want large loss of code.\n\n63\n00:03:36.154 --> 00:03:39.614\nIt's hard to read, hard to reason about,\nhard to track what's going on.\n\n64\n00:03:39.614 --> 00:03:45.790\nSo, let's look at this do while and\nI'm actually going to have a start, again.\n\n65\n00:03:45.790 --> 00:03:48.590\nAnd let's start at a good number.\n\n66\n00:03:48.590 --> 00:03:53.360\nInstead of starting at 0 like we\nalways do, I want to start at 24.\n\n67\n00:03:53.360 --> 00:04:00.730\nAnd I want to stop at 36 and\nhere's where it gets a little interesting.\n\n68\n00:04:02.170 --> 00:04:07.720\nI'm actually gonna stay\nstep is equal to one, we're\n\n69\n00:04:07.720 --> 00:04:11.522\ngoing to use that in context, so we can\ndo some tweaking and see how this works.\n\n70\n00:04:11.522 --> 00:04:17.728\nSo, I'm going to do, while, okay.\n\n71\n00:04:17.728 --> 00:04:26.110\nNotice the syntax, do and\nthen while, and then our condition.\n\n72\n00:04:26.110 --> 00:04:33.250\nSo, I want to do this chunk of code\nwhile start is less than stop.\n\n73\n00:04:34.840 --> 00:04:40.930\nSo, this will actually insure that this\nfirst block runs at least one time.\n\n74\n00:04:42.270 --> 00:04:46.360\nAfter then, if this evaluates to\nfalse it will go ahead and move on.\n\n75\n00:04:46.360 --> 00:04:49.010\nOtherwise, it will come back to\nthe top of the due and run again.\n\n76\n00:04:50.620 --> 00:04:55.930\nI want to have a collection,\nkind of an aggregator, and that would be\n\n77\n00:04:57.660 --> 00:05:01.840\nmy array of nums, and\nthat's just an empty array.\n\n78\n00:05:03.550 --> 00:05:08.480\nSo now I'm going to run through And\njust started popping up\n\n79\n00:05:08.480 --> 00:05:12.445\nthese numbers from 24 to 36, and\nI'm gonna count by whatever the step is.\n\n80\n00:05:12.445 --> 00:05:21.146\nSo, arrOfNums.push(start); and\n\n81\n00:05:21.146 --> 00:05:24.048\nthen start.\n\n82\n00:05:26.656 --> 00:05:28.752\n+= step.\n\n83\n00:05:28.752 --> 00:05:33.820\nNow notice I've taken that 1 out from\nhard coded value in the previous example\n\n84\n00:05:33.820 --> 00:05:35.820\nto a variablized value.\n\n85\n00:05:35.820 --> 00:05:38.510\nAnd that way I don't have to go and\nchange if I use it multiple places.\n\n86\n00:05:38.510 --> 00:05:42.800\nI just have to change the variable\nvalue and I can see different outputs.\n\n87\n00:05:42.800 --> 00:05:43.790\nThe results.\n\n88\n00:05:43.790 --> 00:05:49.121\nSo let's say console.log,\narray of nums, and\n\n89\n00:05:49.121 --> 00:05:56.020\nI'm actually going to log it here as well,\njust as a reminder.\n\n90\n00:05:58.781 --> 00:06:04.327\nNow if we refresh, notice that I have\nan empty array at the beginning,\n\n91\n00:06:04.327 --> 00:06:08.839\nand at the end,\nI have every number from 24 to 36, but\n\n92\n00:06:08.839 --> 00:06:14.120\nnot including 36, and\nthat's because of this less than.\n\n93\n00:06:14.120 --> 00:06:17.670\nIf I wanna include the right hand side or\nthe last number,\n\n94\n00:06:17.670 --> 00:06:20.280\nI would just put an equal to there.\n\n95\n00:06:20.280 --> 00:06:22.960\nAnd we can actually get the 36 back.\n\n96\n00:06:22.960 --> 00:06:26.260\nNow let's see how this differs.\n\n97\n00:06:26.260 --> 00:06:29.610\nBecause we saw that there are times\nwhere a while loop will never run.\n\n98\n00:06:31.940 --> 00:06:34.550\nI'm going to make this immediately false.\n\n99\n00:06:34.550 --> 00:06:38.540\nAs a matter of fact,\nI'm not even gonna change the condition.\n\n100\n00:06:38.540 --> 00:06:40.730\nI'm just going to say false.\n\n101\n00:06:40.730 --> 00:06:44.174\nLet's see if that gets\nthe desired outcome and\n\n102\n00:06:44.174 --> 00:06:49.160\nnotice, I still get twenty\nfour in that numbers array.\n\n103\n00:06:49.160 --> 00:06:54.530\nThat's because this DO runs at least\none time before the loop initiates.\n\n104\n00:06:54.530 --> 00:06:58.380\nAnd that can be handy, especially in\ntimes like this because this empty array,\n\n105\n00:06:58.380 --> 00:07:00.210\nwell there is no information in there.\n\n106\n00:07:00.210 --> 00:07:03.750\nBut I want at least one piece of\ninformation, a starting point.\n\n107\n00:07:03.750 --> 00:07:06.510\nSo now,\nI'm ensuring that it runs one time.\n\n108\n00:07:06.510 --> 00:07:09.500\nAre there ways that you can\nmake a WOW loop do that?\n\n109\n00:07:09.500 --> 00:07:11.710\nYeah, it involves a lot\nof machinations and\n\n110\n00:07:11.710 --> 00:07:15.010\nsometimes it's really hard to reason\nabout and very prone to bugs.\n\n111\n00:07:15.010 --> 00:07:17.150\nAnd the do while does\nhelp in that context.\n\n112\n00:07:19.080 --> 00:07:22.859\nSo, our do while is actually\nstarting to help us build these.\n\n113\n00:07:24.220 --> 00:07:28.030\nStructures that may be used\nin the larger applications.\n\n114\n00:07:29.110 --> 00:07:31.880\nThat's great, we have these.\n\n115\n00:07:31.880 --> 00:07:37.440\nThere are other times that I just need to\ncollect information off of like an object.\n\n116\n00:07:37.440 --> 00:07:41.960\nAnd there's actually a special\nloop that helps us with that.\n\n117\n00:07:41.960 --> 00:07:47.570\nSo, I'm gonna comment out this do\nwhile and we have the final for in.\n\n118\n00:07:47.570 --> 00:07:51.230\nNow the for\nin does have a number attached to it.\n\n119\n00:07:51.230 --> 00:07:54.440\nIt's to run through an object and\nthe object is key value pairs.\n\n120\n00:07:55.690 --> 00:07:57.970\nAnd run through the keys of the object.\n\n121\n00:07:57.970 --> 00:07:59.610\nAnd we'll see what that\nmeans in just a moment.\n\n122\n00:07:59.610 --> 00:08:03.370\nSo that tells me I have a definite limit,\n\n123\n00:08:03.370 --> 00:08:07.550\nsome specific number of values\nthat I need to run through.\n\n124\n00:08:09.360 --> 00:08:18.500\nSo, let's take a look at the for\nin loop and get that up here a little bit.\n\n125\n00:08:18.500 --> 00:08:22.330\nSo the construct looks very\nsimilar to a regular for loop.\n\n126\n00:08:22.330 --> 00:08:27.140\nBut we need an object to run through,\nso let's get an object.\n\n127\n00:08:27.140 --> 00:08:30.750\nAnd I'm just gonna have\nan object of values.\n\n128\n00:08:30.750 --> 00:08:36.488\nSo, a is 1, b is 2 and\n\n129\n00:08:36.488 --> 00:08:41.630\nc is 3, all right.\n\n130\n00:08:41.630 --> 00:08:42.920\nSo there's my object.\n\n131\n00:08:42.920 --> 00:08:46.180\nAnd I'm gonna print that out just so\nwe can inspect it on the console\n\n132\n00:08:48.070 --> 00:08:50.410\nto remind ourselves what that looks like.\n\n133\n00:08:50.410 --> 00:08:55.040\nUnexpected token.\n\n134\n00:08:55.040 --> 00:08:59.440\nI actually might be yeah,\n\n135\n00:08:59.440 --> 00:09:04.160\nso unit I fill it in it's gonna give\nme an error so be aware of that.\n\n136\n00:09:04.160 --> 00:09:08.250\nSo, I have this object that has keys and\nvalues.\n\n137\n00:09:08.250 --> 00:09:12.230\nSo, this four n loop will\nactually run through keys,\n\n138\n00:09:12.230 --> 00:09:16.770\nI could use those to retrieve the values,\nbut it allows me not to have to.\n\n139\n00:09:18.500 --> 00:09:20.300\nGo how am I gonna run through this object.\n\n140\n00:09:20.300 --> 00:09:21.680\nI wanna just loop through and\n\n141\n00:09:21.680 --> 00:09:25.980\nsee if any of these keys have\na corresponding value of two.\n\n142\n00:09:25.980 --> 00:09:30.040\nOr I just wanna see if\nthe key b is in there.\n\n143\n00:09:30.040 --> 00:09:32.030\nSo, the for end is helpful for that.\n\n144\n00:09:32.030 --> 00:09:35.380\nAnd there are times when I just\nwant to collect all the keys.\n\n145\n00:09:35.380 --> 00:09:40.848\nAnd we'll actually see that as an example\nbut let's start with var key in obj.\n\n146\n00:09:44.674 --> 00:09:47.830\nAnd let's just log that and\nsee what it logs out.\n\n147\n00:09:47.830 --> 00:09:49.780\nNow, I've obviously picked\nthe variable name here\n\n148\n00:09:51.110 --> 00:09:53.120\nbecause I know what this is going to do.\n\n149\n00:09:53.120 --> 00:09:56.110\nIn times like this,\nif I'm just testing around,\n\n150\n00:09:56.110 --> 00:10:00.580\nI may very well just use x or\na or something of that nature.\n\n151\n00:10:00.580 --> 00:10:02.980\nBut let's see how that works out.\n\n152\n00:10:02.980 --> 00:10:08.100\nAnd it prints a, b, c, it runs\nthrough all of the keys of the object.\n\n153\n00:10:08.100 --> 00:10:11.960\nWell, that's handy because there's\ntimes where I just wanna know what\n\n154\n00:10:11.960 --> 00:10:12.810\nthe properties are.\n\n155\n00:10:12.810 --> 00:10:14.840\nI don't wanna know what their values are,\n\n156\n00:10:14.840 --> 00:10:19.410\nI just wanna collect all the properties\nfrom the object into an array,\n\n157\n00:10:20.610 --> 00:10:24.460\nand that way I can kind of pass that\ninformation around and loop back through.\n\n158\n00:10:25.970 --> 00:10:28.390\nSo, let's collect the keys\n\n159\n00:10:32.170 --> 00:10:36.439\nof the object and\nagain we're gonna start with.\n\n160\n00:10:37.460 --> 00:10:39.620\nKind of a results.\n\n161\n00:10:39.620 --> 00:10:43.859\nOur end results will be here, but\nit's going to be empty for now.\n\n162\n00:10:45.425 --> 00:10:51.081\nAnd all I wanna do is gather the keys into\nthis array, and that way I can keep just\n\n163\n00:10:51.081 --> 00:10:57.020\nthe keys as strings instead of having to\nuse this for(var key in obj) every time.\n\n164\n00:10:57.020 --> 00:11:01.630\nSo this is a quick little helper to just\ngather all of those into a collection.\n\n165\n00:11:01.630 --> 00:11:11.450\nAnd I just say results.push Keys and\njust to look at those.\n\n166\n00:11:17.453 --> 00:11:18.600\nAnd there we go.\n\n167\n00:11:18.600 --> 00:11:21.870\nMy fingers are getting a little\ntripped up on me there, Mike.\n\n168\n00:11:21.870 --> 00:11:22.810\nYou gotta be careful.\n\n169\n00:11:23.870 --> 00:11:27.390\nSo keys is not defined.\n\n170\n00:11:28.820 --> 00:11:29.430\nNo, there we go.\n\n171\n00:11:29.430 --> 00:11:34.860\nAnd now, I have an array that is\nrepresenting all the property names.\n\n172\n00:11:34.860 --> 00:11:38.030\nAll right, I've used a, b, and c here, but\n\n173\n00:11:38.030 --> 00:11:41.920\nit would represent all of the property\nnames for that particular object.\n\n174\n00:11:41.920 --> 00:11:49.258\nIf this object was not just obj with a,\nb, c, but instead, like car, with make,\n\n175\n00:11:54.378 --> 00:11:58.950\nModel, and color as the properties for\nthat object.\n\n176\n00:11:58.950 --> 00:12:02.430\nWhen I gather all of\nthe keys can't use obj now.\n\n177\n00:12:05.428 --> 00:12:08.906\nCar, be careful with that multiselect\ncuz it'll do weird things in\n\n178\n00:12:08.906 --> 00:12:09.975\nthe comments also.\n\n179\n00:12:09.975 --> 00:12:12.740\n&gt;&gt; [LAUGH]\n&gt;&gt; So, now I know,\n\n180\n00:12:12.740 --> 00:12:17.520\nwell cars have this defined,\nmake, model, and\n\n181\n00:12:17.520 --> 00:12:22.150\ncolor and I won't try to say,\nwell, how many horsepower is it?\n\n182\n00:12:22.150 --> 00:12:24.260\nOr, how many wheels does it have?\n\n183\n00:12:24.260 --> 00:12:27.615\nSo it allows me to do a quick\ninspection and I can use that for\n\n184\n00:12:27.615 --> 00:12:30.510\ndecision-making processes.\n\n185\n00:12:30.510 --> 00:12:35.250\nAnd that's a quick little helper just to\ngather the information from an object\n\n186\n00:12:35.250 --> 00:12:35.850\ninto an array.\n\n187\n00:12:37.380 --> 00:12:43.330\nSo, as a review, we've had a while,\na do while, a for.\n\n188\n00:12:43.330 --> 00:12:46.410\nA regular for\nloop with just counting and then,\n\n189\n00:12:46.410 --> 00:12:50.060\nrunning through the keys with the for\nin loop.\n\n190\n00:12:50.060 --> 00:12:55.790\nThere are additional loops being\nproposed for JavaScript language\n\n191\n00:12:57.130 --> 00:13:00.830\nbut, they're not currently ubiquitously\navailable in all browser so\n\n192\n00:13:00.830 --> 00:13:03.450\nwe're gonna focus on the ones\nthat are pretty pervasive.\n\n193\n00:13:04.540 --> 00:13:08.260\nRemember the fours,\nnot the regular four loop,\n\n194\n00:13:08.260 --> 00:13:11.800\nis designed to run through\na particular number of things.\n\n195\n00:13:11.800 --> 00:13:13.550\nThink of a raise or strings.\n\n196\n00:13:14.620 --> 00:13:20.520\nThe wiles, if you ever say the words\nI need to do something until,\n\n197\n00:13:20.520 --> 00:13:22.590\nas soon as you say until to yourself.\n\n198\n00:13:24.030 --> 00:13:26.770\nI should probably use a wow or\nmaybe even a do wow if I need to.\n\n199\n00:13:26.770 --> 00:13:31.090\nI need to do this at least once,\nbut then it needs to run until.\n\n200\n00:13:31.090 --> 00:13:31.900\nSo, think of until.\n\n201\n00:13:33.150 --> 00:13:39.500\nAnd lastly, just as a reminder, be careful\nwith wows and do wows for infinite loops.\n\n202\n00:13:39.500 --> 00:13:43.950\nIf you're not changing part of the state,\nlike that count variable, or the start, or\n\n203\n00:13:43.950 --> 00:13:45.070\nthe index.\n\n204\n00:13:45.070 --> 00:13:46.890\nIf you're not changing\nthat within the WOW loop,\n\n205\n00:13:46.890 --> 00:13:48.870\nyou could run into\nan infinite loop situation.\n\n206\n00:13:48.870 --> 00:13:53.590\nThat will lock up your browser; it's\nmore annoying than it is dangerous.\n\n207\n00:13:53.590 --> 00:13:57.300\nBut maybe you have a bunch of tabs\nopen and your history automatically\n\n208\n00:13:57.300 --> 00:14:01.510\nclears upon restart, and\nyou really need to know that information.\n\n209\n00:14:01.510 --> 00:14:04.220\nIt's not the end of the world,\nbut it can be.\n\n210\n00:14:04.220 --> 00:14:05.380\nVery dissettling.\n\n211\n00:14:05.380 --> 00:14:07.760\nSo, be careful about those infinite loops.\n\n212\n00:14:07.760 --> 00:14:09.460\nAnd if Chrome ever asks you hey,\n\n213\n00:14:09.460 --> 00:14:12.690\nthis looks like an infinite loop,\nare you sure you wanna run?\n\n214\n00:14:12.690 --> 00:14:13.595\nDon't click yes.\n\n215\n00:14:13.595 --> 00:14:18.340\n&gt;&gt; [LAUGH] All right, words to live\nby there from Justin Dennison.\n\n216\n00:14:18.340 --> 00:14:22.450\nWe appreciate that, great round out on the\ndifferent types of loop constructs we have\n\n217\n00:14:22.450 --> 00:14:25.590\nwithin our JavaScript, so thank you for\nthose great demonstrations.\n\n218\n00:14:25.590 --> 00:14:27.740\nHope everybody out there\nenjoyed watching this one.\n\n219\n00:14:27.740 --> 00:14:30.843\nSigning off from ITPRO.TV,\nI'm been you're host Mike Rodrick\n\n220\n00:14:30.843 --> 00:14:31.846\n&gt;&gt; And I'm Justin Dennison\n\n221\n00:14:31.846 --> 00:14:32.769\n&gt;&gt; And we'll see you next time.\n\n222\n00:14:32.769 --> 00:14:40.398\n[MUSIC]\n\n223\n00:14:40.398 --> 00:14:44.844\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "203132208"
        },
        {
          "description": "In this episode, Justin and Mike begin their look into functions in JavaScript. They discuss what a function is and why we use them. They also talk about function scope.",
          "length": "1617",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-9-1-1-working_with_functions-020317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-9-1-1-working_with_functions-020317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-9-1-1-working_with_functions-020317-1-sm.jpg",
          "title": "Working with Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:02.949\nWelcome to ITPRO.TV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.949 --> 00:00:08.499\n[CROSSTALK]\n[SOUND]\n\n3\n00:00:08.499 --> 00:00:12.660\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.660 --> 00:00:16.230\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITPRO.TV.\n\n5\n00:00:16.230 --> 00:00:17.580\nI'm your host, Mike Rodrick, and\n\n6\n00:00:17.580 --> 00:00:20.100\ntoday we're doing our\nintroduction to JavaScript.\n\n7\n00:00:20.100 --> 00:00:23.720\nIn this episode, we're gonna be\nlooking at functions, all right,\n\n8\n00:00:23.720 --> 00:00:27.670\na very important part, gives us a lot\nof power within our JavaScript.\n\n9\n00:00:27.670 --> 00:00:30.995\nSo here to tell us how to create them and\nwhat we can do with them is Mr.\n\n10\n00:00:30.995 --> 00:00:31.640\nJustin Dennison.\n\n11\n00:00:31.640 --> 00:00:32.570\nWelcome back, Justin.\n\n12\n00:00:32.570 --> 00:00:33.920\n&gt;&gt; Thanks for having me back, Mike.\n\n13\n00:00:33.920 --> 00:00:36.794\nI do wanna emphasize the fun in function.\n\n14\n00:00:36.794 --> 00:00:37.730\n&gt;&gt; [LAUGH]\n&gt;&gt; Or\n\n15\n00:00:37.730 --> 00:00:40.720\nmaybe I'm just being\na little dramatic about it.\n\n16\n00:00:40.720 --> 00:00:43.395\n&gt;&gt; Hey, we're geeks, and\neverybody out there is a geek, so\n\n17\n00:00:43.395 --> 00:00:44.820\nwe should find functions fun.\n\n18\n00:00:44.820 --> 00:00:46.680\n&gt;&gt; Fun is the emphasis there.\n\n19\n00:00:46.680 --> 00:00:52.474\nSo I do agree that functions can\nbe a little intimidating at times,\n\n20\n00:00:52.474 --> 00:00:56.519\nbut they provide a wonderful\namount of power.\n\n21\n00:00:56.519 --> 00:00:57.880\nWhy do we use functions?\n\n22\n00:00:58.940 --> 00:01:04.170\nWell, the easiest way to explain it is,\nwe want to encapsulate\n\n23\n00:01:04.170 --> 00:01:07.440\nall of this functionality, these steps\nthat we've been working through.\n\n24\n00:01:07.440 --> 00:01:10.480\nOkay, I need to do this next,\nand this next, and this next.\n\n25\n00:01:10.480 --> 00:01:12.220\nAnd as we're building larger and\nlarger projects,\n\n26\n00:01:12.220 --> 00:01:17.360\nwe find we keep doing those same\nsteps over and over and over again.\n\n27\n00:01:17.360 --> 00:01:21.160\nAnd I'll forewarn you, the first initial\ninstinct is to go, well, I'm just gonna\n\n28\n00:01:21.160 --> 00:01:27.900\nhighlight that, Ctrl+C, or Cmd+C, paste\nit over here, change a couple of things.\n\n29\n00:01:27.900 --> 00:01:30.020\nHowever, there's a couple\nof issues with that.\n\n30\n00:01:30.020 --> 00:01:31.480\nNumber one, copying and\n\n31\n00:01:31.480 --> 00:01:34.980\npasting, if you don't do it just correct,\nnow you have syntax errors.\n\n32\n00:01:34.980 --> 00:01:37.960\nIn addition to, if you have what\nare runtime errors, which you\n\n33\n00:01:37.960 --> 00:01:42.000\nwon't really know until you start testing\nyour application a little more, those will\n\n34\n00:01:42.000 --> 00:01:46.410\npropagate throughout your app, and\nnow you have to fix it a bunch of places.\n\n35\n00:01:46.410 --> 00:01:49.850\nI've actually seen copy,\npaste it functions five, six times, and\n\n36\n00:01:49.850 --> 00:01:52.800\nI'm like that's actually\nsupposed to be a plus three.\n\n37\n00:01:52.800 --> 00:01:55.730\nOr hey, that shouldn't be a string.\n\n38\n00:01:55.730 --> 00:01:57.670\nAnd now you have to do a giant find and\n\n39\n00:01:57.670 --> 00:02:01.930\nreplace and hope that you haven't used\nthe same variable name other places.\n\n40\n00:02:01.930 --> 00:02:03.811\nIt can be [CROSSTALK]\n&gt;&gt; Sounds like a mess.\n\n41\n00:02:03.811 --> 00:02:06.850\n&gt;&gt; It's absolutely horrible.\n\n42\n00:02:06.850 --> 00:02:10.510\nAs someone who's had to fix things\nlike that, I don't recommend it.\n\n43\n00:02:11.810 --> 00:02:16.070\nNow, when you're constructing functions,\nthere's a couple of things\n\n44\n00:02:16.070 --> 00:02:20.510\nthat do hold people back, and\nthat's the syntax and how to use them.\n\n45\n00:02:20.510 --> 00:02:21.820\nWe will cover both of those, but\n\n46\n00:02:21.820 --> 00:02:24.540\nbe very careful about making\nsure everything's paired up.\n\n47\n00:02:24.540 --> 00:02:28.768\nCurly braces and parentheses always\nhave pairs, shoes, mittens, socks.\n\n48\n00:02:28.768 --> 00:02:32.619\n&gt;&gt; [LAUGH]\n&gt;&gt; Anything that has pairs, your pants,\n\n49\n00:02:32.619 --> 00:02:34.190\npairs of legs.\n\n50\n00:02:34.190 --> 00:02:37.637\nIf you have pants and you dig them out of\nyour closet and one of the legs is gone,\n\n51\n00:02:37.637 --> 00:02:40.575\nyou should probably, I don't know,\nmaybe that's your thing.\n\n52\n00:02:40.575 --> 00:02:42.001\n&gt;&gt; That might be a big runtime error.\n\n53\n00:02:42.001 --> 00:02:44.110\n&gt;&gt; Yeah,\nthat might be a big runtime error.\n\n54\n00:02:44.110 --> 00:02:46.040\nI'm getting weird looks at the office,\nyeah,\n\n55\n00:02:46.040 --> 00:02:48.740\nit's cuz you only have\none leg in your pants.\n\n56\n00:02:48.740 --> 00:02:53.090\nSo we use functions to\nencapsulate this behavior, and\n\n57\n00:02:53.090 --> 00:02:56.060\nwe get this reusability that we can\nkind of port between applications.\n\n58\n00:02:57.110 --> 00:02:59.840\nSo I can write functions\nthat I use everywhere,\n\n59\n00:02:59.840 --> 00:03:03.949\nkeep those in a separate project, and\nthen just use them as I need them.\n\n60\n00:03:03.949 --> 00:03:07.178\nSo I like that portability,\nthat encapsulation,\n\n61\n00:03:07.178 --> 00:03:12.300\nthat kind of bundling together, and\nthat's what makes them so powerful.\n\n62\n00:03:12.300 --> 00:03:15.590\n&gt;&gt; And like you said at the beginning,\nthe copy and paste method doesn't work,\n\n63\n00:03:15.590 --> 00:03:17.590\nif I've got an error in the first one.\n\n64\n00:03:17.590 --> 00:03:21.120\nBut likewise, I guess with the inverse,\nif I've troubleshot that function,\n\n65\n00:03:21.120 --> 00:03:25.853\nI know it works, everything's perfect\nevery time I use it, it should be good.\n\n66\n00:03:25.853 --> 00:03:31.225\n&gt;&gt; Exactly, through use and reuse, you can\nfind those little errors, iron them out,\n\n67\n00:03:31.225 --> 00:03:36.159\nand now you have a better well defined\nalgorithm, set of steps, procedure.\n\n68\n00:03:36.159 --> 00:03:41.097\nWhatever you end up having within\nthat function body that you know\n\n69\n00:03:41.097 --> 00:03:43.780\nworks can be reliable.\n\n70\n00:03:43.780 --> 00:03:47.735\nNow within functions,\nthere's this concept called scope.\n\n71\n00:03:47.735 --> 00:03:50.800\nIn JavaScript, we have this idea of scope.\n\n72\n00:03:50.800 --> 00:03:55.910\nI like to think of scope as you have\na global scope, which is your house.\n\n73\n00:03:55.910 --> 00:04:00.077\nAnd then each room within your house or\nyour apartment or any other dwelling that\n\n74\n00:04:00.077 --> 00:04:04.115\nyou're in, as long as it has kind of\nsegmented, I guess if you're in a tent,\n\n75\n00:04:04.115 --> 00:04:06.468\nthat wouldn't really work, but-\n&gt;&gt; [LAUGH] Well,\n\n76\n00:04:06.468 --> 00:04:08.345\nhave you seen some of these\nbigger tents nowadays?\n\n77\n00:04:08.345 --> 00:04:11.330\n&gt;&gt; Yeah, I have, they're like,\nthis is a tutu tent?\n\n78\n00:04:12.920 --> 00:04:15.745\nOkay, all right,\nbig enough for king size beds.\n\n79\n00:04:15.745 --> 00:04:17.889\nYeah, I've seen those,\nthey're kind of crazy.\n\n80\n00:04:19.060 --> 00:04:22.860\nSo I like to think as the function\nscopes as these little compartments.\n\n81\n00:04:22.860 --> 00:04:28.440\nThe rooms within those, and\ntypically, if I'm in my bedroom,\n\n82\n00:04:28.440 --> 00:04:34.130\nI can't just reach through a wall and\ngrab something from the kitchen, right?\n\n83\n00:04:34.130 --> 00:04:39.527\nSo I have these kind of isolated areas\nwhere my bedroom has all the contents\n\n84\n00:04:39.527 --> 00:04:45.500\nthat it has within it, my kitchen has\nall the contents that it has within it.\n\n85\n00:04:45.500 --> 00:04:48.730\nAnd I have to move between those,\n\n86\n00:04:48.730 --> 00:04:53.840\nthrough kind of message passing or\nactually moving between the functions,\n\n87\n00:04:53.840 --> 00:04:58.060\nor the rooms, in this case, in order to\nget that information out of those objects.\n\n88\n00:04:58.060 --> 00:05:00.650\nNow, keep in mind there's a global scope.\n\n89\n00:05:00.650 --> 00:05:06.030\nYour house does provide portions\nto each one of those functions,\n\n90\n00:05:06.030 --> 00:05:09.470\nsuch as all of the rooms in\nyour house have electricity.\n\n91\n00:05:09.470 --> 00:05:13.340\nSome of them have water, so\nwe kind of have this trickling in.\n\n92\n00:05:13.340 --> 00:05:18.298\nNow, keep in mind that's not the absolute\ncorrect technical detail, but\n\n93\n00:05:18.298 --> 00:05:20.670\nit's a great way to think about it.\n\n94\n00:05:20.670 --> 00:05:26.450\nAnd if you can conceptualize, you'll have\na lot better time working with JavaScript.\n\n95\n00:05:26.450 --> 00:05:30.582\nSo, I think the best thing that we can\ndo is actually take a look at a few\n\n96\n00:05:30.582 --> 00:05:34.519\nfunctions and see how we can\nconstruct them, how we can use them.\n\n97\n00:05:34.519 --> 00:05:40.013\nAnd then really start to see the power\nthat they come into them, as we implement\n\n98\n00:05:40.013 --> 00:05:45.440\nsome reusable features that I use\nquite often in the projects that I do.\n\n99\n00:05:45.440 --> 00:05:47.190\n&gt;&gt; All right, fantastic, let's see it.\n\n100\n00:05:47.190 --> 00:05:50.205\n&gt;&gt; All right, so I have my Chrome open,\nand I'm gonna go ahead and open that\n\n101\n00:05:50.205 --> 00:05:54.680\nindex.html that I've been opening,\nmaking sure that I'm in the correct one.\n\n102\n00:05:55.800 --> 00:06:00.830\nSo here's my function folder, index.html,\nand again, this is just the entry way.\n\n103\n00:06:00.830 --> 00:06:04.300\nI'm gonna open the dev tools,\nand that's the keyboard shortcut.\n\n104\n00:06:04.300 --> 00:06:08.790\nOn Mac, it's Option, or Alt, and Cmd+I.\n\n105\n00:06:08.790 --> 00:06:14.690\nOn Windows, I think it's Ctrl+Opt+I,\nI'm not 100% sure.\n\n106\n00:06:14.690 --> 00:06:18.210\nIf you wanna know, you can actually\njust click More Tools, and\n\n107\n00:06:18.210 --> 00:06:22.060\nit will tell you what the shortcut\nis right next to there.\n\n108\n00:06:22.060 --> 00:06:23.071\nSo I have this open,\n\n109\n00:06:23.071 --> 00:06:26.232\nthe console's gonna be where I\nwork most of the time right now.\n\n110\n00:06:26.232 --> 00:06:29.800\nAnd then I'm gonna go into Atom and\nopen up my project folder.\n\n111\n00:06:32.720 --> 00:06:37.580\nMake sure I navigate to the appropriate\nfolder, and I'm ready to go.\n\n112\n00:06:37.580 --> 00:06:41.140\nSo, within my app.js,\nI can start writing functions.\n\n113\n00:06:41.140 --> 00:06:45.040\nSo let's take a look at just\na basic construction of functions.\n\n114\n00:06:45.040 --> 00:06:48.070\nFunctions have a couple of forms.\n\n115\n00:06:48.070 --> 00:06:49.679\nWell, they have more\nthan a couple of forms.\n\n116\n00:06:51.870 --> 00:06:58.280\nprintWord, and I wanna really pin down,\nnotice I have the keyword function.\n\n117\n00:06:58.280 --> 00:07:03.449\nA common error that I will see is\npeople who are using other editors,\n\n118\n00:07:03.449 --> 00:07:06.714\nthey will leave out a word in function,\nand\n\n119\n00:07:06.714 --> 00:07:10.965\nthen JavaScript doesn't\nparse that correctly.\n\n120\n00:07:10.965 --> 00:07:17.330\nThat's kinda funtion, or funtion,\nor the one that I like is funcion.\n\n121\n00:07:18.470 --> 00:07:22.720\nSo be very careful about that,\nthat's why I like these rich text editors.\n\n122\n00:07:24.020 --> 00:07:28.000\nFunction names typically\nare named similar to variables.\n\n123\n00:07:28.000 --> 00:07:31.200\nAnd I have a set of parentheses and\na set of curly braces.\n\n124\n00:07:31.200 --> 00:07:33.570\nThis is evident in all\nfunctions that you write.\n\n125\n00:07:35.150 --> 00:07:37.090\nThis is when you're defining the function.\n\n126\n00:07:38.440 --> 00:07:40.360\nSo, I have all of these paired up.\n\n127\n00:07:40.360 --> 00:07:43.983\nWhat I do is write all that out and\nthen I break up the curly braces.\n\n128\n00:07:43.983 --> 00:07:48.002\nBetween the left, or\nwhat I call the opening, and the right,\n\n129\n00:07:48.002 --> 00:07:53.181\nwhat I call the closing, that's where\nall of my information, all of my steps,\n\n130\n00:07:53.181 --> 00:07:57.540\nmy procedures, my data is going\nto be typed, written, and held.\n\n131\n00:07:57.540 --> 00:08:02.050\nSo if I just wanna say printWord I\n\n132\n00:08:02.050 --> 00:08:06.910\ncan say Word up, just like so.\n\n133\n00:08:06.910 --> 00:08:12.690\nNow, if I come back and run I will notice\nthat actually it doesn't do anything.\n\n134\n00:08:12.690 --> 00:08:14.490\nI refresh and nothing prints out.\n\n135\n00:08:14.490 --> 00:08:17.247\nAnd that's because I've\nonly declared the function.\n\n136\n00:08:19.007 --> 00:08:20.093\nAt the top.\n\n137\n00:08:20.093 --> 00:08:23.600\nI haven't actually said, hey JavaScript I\nneed you to run this function.\n\n138\n00:08:23.600 --> 00:08:25.910\nAnd this is another\ncommon thing that I see.\n\n139\n00:08:25.910 --> 00:08:27.840\nWell, I've declared it, it's there.\n\n140\n00:08:27.840 --> 00:08:30.780\nWell, I have to use it just\n\n141\n00:08:30.780 --> 00:08:34.760\nbecause I have a hammer doesn't mean\nthat things are gonna get built.\n\n142\n00:08:34.760 --> 00:08:36.320\nSo, be very careful about that.\n\n143\n00:08:36.320 --> 00:08:41.510\nIf I type printWord,\nnotice I haven't typed anything else.\n\n144\n00:08:41.510 --> 00:08:45.050\nThis will let's see what it does actually.\n\n145\n00:08:45.050 --> 00:08:46.450\nAgain nothing.\n\n146\n00:08:46.450 --> 00:08:51.890\nAnother common issue that I see, is what\ntype the function name it should work.\n\n147\n00:08:51.890 --> 00:08:54.990\nWell, this is what is called a callable.\n\n148\n00:08:54.990 --> 00:08:58.810\nIn order to say hey,\nfunction run you have to have\n\n149\n00:08:58.810 --> 00:09:03.390\nat least a closed an open and\nclose set of parenthesis.\n\n150\n00:09:03.390 --> 00:09:06.740\nThis says,\nyou need to do your thing function.\n\n151\n00:09:07.980 --> 00:09:09.790\n&gt;&gt; Don't forget,\ndifferent from a variable then,\n\n152\n00:09:09.790 --> 00:09:11.770\nwhere I can just use the variable name.\n\n153\n00:09:11.770 --> 00:09:14.450\nThe function, I've got to have that\nopen close parenthesis after it.\n\n154\n00:09:14.450 --> 00:09:16.210\n&gt;&gt; Correct, correct.\n\n155\n00:09:16.210 --> 00:09:21.440\nSo, this open close parenthesis says\nfunction, do your thing, get busy.\n\n156\n00:09:21.440 --> 00:09:27.020\nNow, if I come back and man there will be\negg on my face if this doesn't run now,\n\n157\n00:09:27.020 --> 00:09:31.230\nI've been emphasizing that but\nword up there it is.\n\n158\n00:09:31.230 --> 00:09:35.110\nAnd that means this function has run,\nit's done its job and\n\n159\n00:09:35.110 --> 00:09:38.066\nit's, that's it, it's over.\n\n160\n00:09:38.066 --> 00:09:41.360\nSo, now I showed this as an intro.\n\n161\n00:09:41.360 --> 00:09:43.880\nHowever, this is not the only\nform that functions can have,\n\n162\n00:09:43.880 --> 00:09:46.180\nbecause a common question that I get is.\n\n163\n00:09:46.180 --> 00:09:49.030\nWell, the parentheses\nare they just always empty?\n\n164\n00:09:49.030 --> 00:09:51.280\nTheres just open and closed and that's it?\n\n165\n00:09:51.280 --> 00:09:57.240\nWell, actually that's kind of the way\nto inject information into a function.\n\n166\n00:09:57.240 --> 00:09:59.260\nI need to push it in.\n\n167\n00:09:59.260 --> 00:10:07.620\nSo, if I have another function called\nprintNum, and I pass it a num.\n\n168\n00:10:07.620 --> 00:10:12.790\nNow, this name is a temporarily function\nscoped, that means it's only available\n\n169\n00:10:12.790 --> 00:10:17.640\nwithin this function,\nis a function scoped variable name.\n\n170\n00:10:17.640 --> 00:10:22.018\nNotice, I didn't have to type the var,\nthat's kind of taken care of for me.\n\n171\n00:10:24.724 --> 00:10:28.910\nLet's see what happens\nwith console.log(num).\n\n172\n00:10:28.910 --> 00:10:33.200\nAnd essentially I've just made\nan alias for console.log.\n\n173\n00:10:33.200 --> 00:10:38.130\nBut, now I'm able to inject that\nnum data and then it gets piped\n\n174\n00:10:38.130 --> 00:10:41.850\nthrough the function, and the function\nruns and does what it needs to with it.\n\n175\n00:10:43.180 --> 00:10:46.590\nIf we go ahead and run,\nnotice again, that it doesn't run.\n\n176\n00:10:46.590 --> 00:10:49.440\nI refreshed the page and\nthat's because we haven't called it.\n\n177\n00:10:50.490 --> 00:10:53.835\nSo if I say printNum, Mike,\nwhat's your favorite number?\n\n178\n00:10:53.835 --> 00:10:54.546\n&gt;&gt; 24.\n\n179\n00:10:54.546 --> 00:10:56.415\n&gt;&gt; 24, I should have remembered that.\n\n180\n00:10:56.415 --> 00:10:57.340\n&gt;&gt; [LAUGH]\n&gt;&gt; I think I've\n\n181\n00:10:57.340 --> 00:10:58.665\nasked that a couple of times.\n\n182\n00:10:58.665 --> 00:10:59.610\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n183\n00:10:59.610 --> 00:11:03.980\nnotice that when I call this function\nI'm not typing the word num,\n\n184\n00:11:03.980 --> 00:11:08.990\nbecause that doesn't mean anything\noutside of the function context.\n\n185\n00:11:08.990 --> 00:11:14.650\nWhat I'm actually typing in is what\nis going to be in place of num.\n\n186\n00:11:14.650 --> 00:11:19.630\nSo, when this function runs and I've typed\n24 here, effectively what's happened\n\n187\n00:11:19.630 --> 00:11:24.147\nis JavaScript says 'cool, 24 is gonna\nbe everywhere that the word num was.\n\n188\n00:11:24.147 --> 00:11:28.341\nSo, it's gonna do this replacement,\nexecute, and finish.\n\n189\n00:11:28.341 --> 00:11:31.892\n&gt;&gt; Num is like a variable just only\navailable within the function, and\n\n190\n00:11:31.892 --> 00:11:35.568\nthen when you call the function\nwithin your open closed parenthesis,\n\n191\n00:11:35.568 --> 00:11:38.840\nyou're actually assigning\nof value to that variable.\n\n192\n00:11:38.840 --> 00:11:40.370\n&gt;&gt; Exactly, exactly.\n\n193\n00:11:40.370 --> 00:11:44.942\nNow, I'm gonna save this for\nkind of a deeper treatment where it\n\n194\n00:11:44.942 --> 00:11:48.530\nbecomes contextual\n&gt;&gt; Be very careful, because you can\n\n195\n00:11:48.530 --> 00:11:52.780\npass information around that kind of\npropagates back out of the function.\n\n196\n00:11:53.880 --> 00:11:56.490\nWhat I typically recommend,\nis start with the very simple values,\n\n197\n00:11:56.490 --> 00:12:00.450\nstrings, numbers, booleans.\n\n198\n00:12:00.450 --> 00:12:05.460\nSee how those work, because as we get into\nthose more complex types like arrays,\n\n199\n00:12:05.460 --> 00:12:10.560\nobjects, then you can actually\nchange the thing that was passed in,\n\n200\n00:12:10.560 --> 00:12:14.370\ncuz it's being passed,\nit's like a pass by value reference.\n\n201\n00:12:14.370 --> 00:12:15.490\nThat's the technical term.\n\n202\n00:12:15.490 --> 00:12:17.660\nBut, effectively you're just\ntelling the function hey,\n\n203\n00:12:17.660 --> 00:12:20.550\nI want you to look at this outside object.\n\n204\n00:12:21.920 --> 00:12:26.980\nSo, it's like with using the home analogy,\nyou actually kinda punched a wall,\n\n205\n00:12:26.980 --> 00:12:29.950\na hole through your wall and you're\nlike there's the cereal in the cabinet.\n\n206\n00:12:29.950 --> 00:12:31.760\n&gt;&gt; So, that's brings a good question.\n\n207\n00:12:31.760 --> 00:12:36.250\nIn this when we declared that variable\nwhen we declared the function so\n\n208\n00:12:36.250 --> 00:12:39.890\nthat the scope of that variable Was\nonly available within that function.\n\n209\n00:12:39.890 --> 00:12:43.740\nCould I have used a globally\nscoped variable instead of num?\n\n210\n00:12:45.030 --> 00:12:48.589\n&gt;&gt; So, If I understood you question Mike,\n\n211\n00:12:48.589 --> 00:12:53.170\ncould I have said var x = 24 and\nthen said x?\n\n212\n00:12:53.170 --> 00:12:56.090\nYes, yeah and then maybe the function\nuses that global variable which\n\n213\n00:12:56.090 --> 00:12:59.210\nthen allows it to change and\nit's available to other functions.\n\n214\n00:12:59.210 --> 00:13:00.690\n&gt;&gt; Got you.\n&gt;&gt; Sorry if I'm getting beyond the scope\n\n215\n00:13:00.690 --> 00:13:02.690\nof this particular episode.\n\n216\n00:13:02.690 --> 00:13:03.190\n&gt;&gt; No.\n\n217\n00:13:04.220 --> 00:13:11.214\nSo, can I define something\nlike var x = 7 and\n\n218\n00:13:11.214 --> 00:13:16.080\nthen console.log x + num.\n\n219\n00:13:16.080 --> 00:13:19.150\nSo, I'm using a variable\noutside of the scope, right.\n\n220\n00:13:20.340 --> 00:13:22.010\nAnd I'm using that to run to function.\n\n221\n00:13:23.590 --> 00:13:28.460\nAnd let's just say 24, so if I trace\nwhat's going on with him this function\n\n222\n00:13:28.460 --> 00:13:33.790\ncall, 'm piping 24 in for num and\nthen ideally, this should\n\n223\n00:13:33.790 --> 00:13:38.210\nbe available within this function scope,\nso global kind of leaked into the rooms.\n\n224\n00:13:38.210 --> 00:13:39.950\n&gt;&gt; Like the electricity or\nthe water in my house.\n\n225\n00:13:39.950 --> 00:13:43.790\n&gt;&gt; Like the electricity and the water,\nand in fact, that's what happens.\n\n226\n00:13:43.790 --> 00:13:48.778\nNow, despite being able to do this, and\nthere are times where I want kind of some\n\n227\n00:13:48.778 --> 00:13:54.230\nglobal information, if at all possible you\nshould try to think about design choices.\n\n228\n00:13:54.230 --> 00:13:59.901\nThat eliminate this, because this\nfunction now has a dependency to state or\n\n229\n00:13:59.901 --> 00:14:03.830\ninformation or\ndata within the global scope.\n\n230\n00:14:03.830 --> 00:14:07.991\nWhich other parts of your application\nmaybe your woprking at a team or\n\n231\n00:14:07.991 --> 00:14:10.340\nsomeone else has modified that.\n\n232\n00:14:10.340 --> 00:14:13.400\nAnd now your function does\nnot run as anticipated.\n\n233\n00:14:13.400 --> 00:14:16.670\nSo, you can end up with some run time\nerrors if you always have things\n\n234\n00:14:16.670 --> 00:14:18.620\nkinda working around globally.\n\n235\n00:14:18.620 --> 00:14:23.410\nI will try to make functions as\nwhat is called loosely coupled,\n\n236\n00:14:23.410 --> 00:14:27.490\nor completely de-coupled if\npossible from any other state.\n\n237\n00:14:27.490 --> 00:14:30.730\nJust because it makes it hard\nto reason about, I've seen.\n\n238\n00:14:30.730 --> 00:14:33.570\n&gt;&gt; Cuz you really don't know\nwhat x has the potential to\n\n239\n00:14:33.570 --> 00:14:35.070\nbeing something you didn't expect.\n\n240\n00:14:35.070 --> 00:14:36.140\n&gt;&gt; Exactly, and\n\n241\n00:14:36.140 --> 00:14:41.850\njust to simulate that let's say\nsome other part of the application,\n\n242\n00:14:41.850 --> 00:14:47.020\nI'm working with someone on a larger\napplication, building a web application.\n\n243\n00:14:48.470 --> 00:14:54.670\nAnd part of their Application that\nthey've been working on has changed x.\n\n244\n00:14:54.670 --> 00:14:58.660\nNot staying at seven, but\ninstead to the word turkey.\n\n245\n00:14:58.660 --> 00:15:00.730\nMy god,\nwell I really need to print num now.\n\n246\n00:15:02.010 --> 00:15:04.610\nWell that's not what I expected to happen.\n\n247\n00:15:04.610 --> 00:15:07.680\n&gt;&gt; Right.\n&gt;&gt; And now, not only that, but\n\n248\n00:15:07.680 --> 00:15:08.520\nthe type has changed.\n\n249\n00:15:09.540 --> 00:15:13.660\nSo, if I was depending on that\nalways being a number, well,\n\n250\n00:15:13.660 --> 00:15:16.650\nnow it's a string because\nthe type has been converted.\n\n251\n00:15:16.650 --> 00:15:18.930\nSo, I have to be really\ncareful about that.\n\n252\n00:15:20.360 --> 00:15:25.130\nNow currently,\nprintNum is just printing out the num, and\n\n253\n00:15:25.130 --> 00:15:28.590\nI'm gonna change this back to 7 here.\n\n254\n00:15:28.590 --> 00:15:33.760\nBut, what happens if I want to spit\nsomething back out the result?\n\n255\n00:15:33.760 --> 00:15:38.671\nIf I have two plus three,\nwell the result is five.\n\n256\n00:15:38.671 --> 00:15:44.859\nOkay, so if I wanted to simulate that such\nas, and I'm just writing another alias.\n\n257\n00:15:44.859 --> 00:15:51.121\nAdd well, there's my add function and\n\n258\n00:15:51.121 --> 00:15:56.635\nI wanna take a num and another num.\n\n259\n00:15:56.635 --> 00:15:59.981\nAnd I notice I have two arguments now.\n\n260\n00:15:59.981 --> 00:16:02.146\nTwo things within the parenthesis.\n\n261\n00:16:02.146 --> 00:16:04.047\nAnd they're separated by a comma.\n\n262\n00:16:04.047 --> 00:16:07.270\nI can have as many as I want.\n\n263\n00:16:07.270 --> 00:16:10.450\nNow, with that said,\nI would keep it within reason.\n\n264\n00:16:10.450 --> 00:16:12.470\nI'll be like, well,\nthis function takes 147 arguments.\n\n265\n00:16:13.670 --> 00:16:18.556\nYou've seen me struggle with\nsome larger variable names,\n\n266\n00:16:18.556 --> 00:16:23.059\nmuch less, well, what was,\nokay, hold on a second.\n\n267\n00:16:23.059 --> 00:16:26.155\nWhat was the 36th argument\nof that function?\n\n268\n00:16:26.155 --> 00:16:28.737\n&gt;&gt; [LAUGH]\n&gt;&gt; I think it's a number representing\n\n269\n00:16:28.737 --> 00:16:30.332\nwhether the light's on or not.\n\n270\n00:16:30.332 --> 00:16:33.540\n&gt;&gt; [LAUGH]\n&gt;&gt; Okay what's the 38th, I mean,\n\n271\n00:16:33.540 --> 00:16:35.300\nit's not conducive.\n\n272\n00:16:35.300 --> 00:16:38.500\nIf your function is that large, it's\nprobably best to break it into smaller\n\n273\n00:16:38.500 --> 00:16:43.290\nfunctions that you can use separately,\ncuz that function's doing way too much.\n\n274\n00:16:44.740 --> 00:16:49.970\nNow, these are ordered, the first one,\n\n275\n00:16:49.970 --> 00:16:54.680\nthe second one, and\nthat order is retained as I call it.\n\n276\n00:16:54.680 --> 00:16:58.282\nSo, if I look at add, but\ninstead of console.logging,\n\n277\n00:16:58.282 --> 00:17:01.217\nI'm actually going to\ntype this return word.\n\n278\n00:17:01.217 --> 00:17:04.730\nReturn is gonna allow that\nfunction to spit out a value.\n\n279\n00:17:05.790 --> 00:17:10.550\nNow, remember as soon as we hit\nthe return, the function's done.\n\n280\n00:17:10.550 --> 00:17:13.951\nIt stops executing, it spits out a value.\n\n281\n00:17:13.951 --> 00:17:19.430\nAnd if I type return num + anotherNum and\n\n282\n00:17:19.430 --> 00:17:25.726\nthen I console.log maybe,\nif I can spell it.\n\n283\n00:17:25.726 --> 00:17:27.130\nI say I'm done.\n\n284\n00:17:27.130 --> 00:17:30.529\nDon't put that exclamation point there.\n\n285\n00:17:32.885 --> 00:17:38.690\nWe'll see, this is not quite\nthe anticipated behavior, if I say hey.\n\n286\n00:17:38.690 --> 00:17:42.405\nAnd now I have to console.log because\nI'm not logging within the function,\n\n287\n00:17:42.405 --> 00:17:44.189\nI'm actually getting a value back.\n\n288\n00:17:44.189 --> 00:17:49.307\nIf I console.log add(2,3),\n\n289\n00:17:49.307 --> 00:17:54.430\nI print 5 which is the return here.\n\n290\n00:17:54.430 --> 00:17:58.443\n2 is num, 3 is another num.\n\n291\n00:17:58.443 --> 00:18:03.520\nBut notice this console.log doesn't run,\nit just stops.\n\n292\n00:18:03.520 --> 00:18:06.220\nAs soon as I hit a return statement,\nmy function is done.\n\n293\n00:18:08.140 --> 00:18:12.380\nSo anything beyond that is not reachable.\n\n294\n00:18:12.380 --> 00:18:15.320\nNow, there are additional tools\nthat you can find for your editors.\n\n295\n00:18:15.320 --> 00:18:17.920\nAnd other tools on the internet\nthat will scan through and\n\n296\n00:18:17.920 --> 00:18:19.552\ndo what is called static analysis.\n\n297\n00:18:19.552 --> 00:18:22.670\nAnd will let you know if\nsomething like that's occurring.\n\n298\n00:18:22.670 --> 00:18:26.230\nSo just be aware that if you're\nhitting a return statement,\n\n299\n00:18:26.230 --> 00:18:29.000\nyour function has stopped executing.\n\n300\n00:18:29.000 --> 00:18:31.188\n&gt;&gt; Can we do anything before the return?\n\n301\n00:18:31.188 --> 00:18:32.389\n&gt;&gt; That's a great question.\n\n302\n00:18:32.389 --> 00:18:38.202\nLike if I wanted to multiply\n\n303\n00:18:38.202 --> 00:18:45.290\nboth of these numbers by 100.\n\n304\n00:18:45.290 --> 00:18:47.815\nSo, num1=num * 100.\n\n305\n00:18:47.815 --> 00:18:54.701\nAnd var anotherNum1 = anotherNum * 100.\n\n306\n00:18:54.701 --> 00:19:00.470\nNotice that I'm making new\nvariables within this function.\n\n307\n00:19:01.758 --> 00:19:05.397\nI'm doing that because I'm\nstaying out of the habit for\n\n308\n00:19:05.397 --> 00:19:09.358\nthose complex types that give\nme a fit where they may change.\n\n309\n00:19:09.358 --> 00:19:13.616\nIf I only create new variables\nas a result of some operation,\n\n310\n00:19:13.616 --> 00:19:18.090\nthen I can alleviate that weird\nglobal scope leak that occurs.\n\n311\n00:19:18.090 --> 00:19:20.489\nSo now I'm just gonna put a 1 here.\n\n312\n00:19:20.489 --> 00:19:24.236\nAnd we will see that now instead of 5,\nwe have 500,\n\n313\n00:19:24.236 --> 00:19:28.318\nbecause I've multiplied both\nof those numbers by 100.\n\n314\n00:19:28.318 --> 00:19:31.370\nAnd returned num1 + anotherNum1.\n\n315\n00:19:33.410 --> 00:19:37.034\nNow, it's kinda odd,\nI have a variable here.\n\n316\n00:19:37.034 --> 00:19:38.156\nI have a variable here.\n\n317\n00:19:40.408 --> 00:19:42.300\nThis variable was\navailable within printNum.\n\n318\n00:19:43.390 --> 00:19:48.993\nBut, is it the case that num1 is\navailable after the function is done?\n\n319\n00:19:48.993 --> 00:19:52.490\nThe easiest way to always check that,\n\n320\n00:19:52.490 --> 00:19:57.730\nis just see if it exists,\nsee if it has anything.\n\n321\n00:19:57.730 --> 00:20:01.400\nSo num1 is not defined.\n\n322\n00:20:01.400 --> 00:20:02.190\nWell, why is that?\n\n323\n00:20:04.250 --> 00:20:08.130\nVariables are scoped to\nthe closest enclosing function.\n\n324\n00:20:08.130 --> 00:20:10.870\nThe JavaScript interpreter\nin the Chrome browser is\n\n325\n00:20:10.870 --> 00:20:13.920\nkind of a giant function\nthat's just running stuff.\n\n326\n00:20:13.920 --> 00:20:18.769\nSo this one's scoped globally to\nthe JavaScript interpreter in Chrome.\n\n327\n00:20:18.769 --> 00:20:23.210\nBut num1 and anotherNum1\nare scoped just to that function.\n\n328\n00:20:23.210 --> 00:20:28.100\nSo as soon as I hit this return statement,\nand the function spits out a value.\n\n329\n00:20:28.100 --> 00:20:31.746\nI like to think of those as being\ncrushed out of existence, and\n\n330\n00:20:31.746 --> 00:20:34.281\nthen they're recreated again and again.\n\n331\n00:20:34.281 --> 00:20:37.364\nIn that way,\nI don't have weird leakage, okay?\n\n332\n00:20:37.364 --> 00:20:44.362\nNow, with that said,\ndevice had var num1 and\n\n333\n00:20:44.362 --> 00:20:48.700\nI remove the var from num1.\n\n334\n00:20:48.700 --> 00:20:51.201\nThere's that Siri thing, gotta watch that.\n\n335\n00:20:51.201 --> 00:20:55.570\n&gt;&gt; [LAUGH]\n&gt;&gt; Nope, don't want that.\n\n336\n00:20:55.570 --> 00:20:57.635\nGotta watch those keys\non the new MacBooks.\n\n337\n00:20:57.635 --> 00:21:00.610\n&gt;&gt; [LAUGH]\n&gt;&gt; You go to hit delete, and you hit Siri.\n\n338\n00:21:00.610 --> 00:21:02.849\n&gt;&gt; Maybe she was gonna help\nus with our functions.\n\n339\n00:21:02.849 --> 00:21:03.608\n&gt;&gt; Maybe so.\n&gt;&gt; [LAUGH]\n\n340\n00:21:03.608 --> 00:21:04.931\n&gt;&gt; Maybe so.\n\n341\n00:21:04.931 --> 00:21:09.044\nSo if I say var num1, num1 = num * 100.\n\n342\n00:21:12.108 --> 00:21:14.104\nDid I console.log?\n\n343\n00:21:14.104 --> 00:21:19.180\nYes, so notice that this says undefined.\n\n344\n00:21:19.180 --> 00:21:27.770\nI've run add, but what if I console.log,\nNum1 after I've run add?\n\n345\n00:21:29.880 --> 00:21:31.510\nNotice I remove the var here.\n\n346\n00:21:31.510 --> 00:21:33.836\nI have var num1, it's undefined.\n\n347\n00:21:33.836 --> 00:21:36.550\nIt no longer throws a syntax error.\n\n348\n00:21:36.550 --> 00:21:38.140\nThere's that undefined.\n\n349\n00:21:38.140 --> 00:21:42.348\nBut now if I come down here and\nprint out num1 again,\n\n350\n00:21:42.348 --> 00:21:46.280\nnum1 has been assigned the value\nfrom within the function.\n\n351\n00:21:46.280 --> 00:21:51.450\nYou've kind of hoisted that out, kind\nof pulled it into a more global scope.\n\n352\n00:21:51.450 --> 00:21:54.750\nAgain, this is harder to reason about.\n\n353\n00:21:54.750 --> 00:21:59.179\nAnd if you can avoid this within\na function, I would recommend doing so.\n\n354\n00:21:59.179 --> 00:22:02.190\nSo there's creation of functions,\n\n355\n00:22:02.190 --> 00:22:06.569\nbut we've only seen one way\nto create said function.\n\n356\n00:22:09.609 --> 00:22:13.227\nThere's actually a couple of other ways,\nand\n\n357\n00:22:13.227 --> 00:22:18.908\nI'm just gonna briefly talk about\nthe syntax and see how those come out.\n\n358\n00:22:18.908 --> 00:22:24.130\nSo I can actually create a function and\nassign it to a variable name.\n\n359\n00:22:24.130 --> 00:22:27.830\nNotice here what I have commented out,\nfunction add.\n\n360\n00:22:27.830 --> 00:22:30.390\nI've given the function a name, but\n\n361\n00:22:30.390 --> 00:22:34.520\nhave not assigned it to\nany other variable name.\n\n362\n00:22:34.520 --> 00:22:41.450\nSo if I say, var add, I've commented out\nadd, so add doesn't exist, function.\n\n363\n00:22:42.910 --> 00:22:47.820\nAnd so notice I've written function\nwith just immediately two parentheses.\n\n364\n00:22:47.820 --> 00:22:50.760\nAnd not a word, not a name.\n\n365\n00:22:50.760 --> 00:22:54.130\nSo, these are declared name functions.\n\n366\n00:22:54.130 --> 00:22:56.120\nThese are called function expressions.\n\n367\n00:22:57.130 --> 00:23:01.769\nSo if I have var and some name equals,\nthat is a function expression.\n\n368\n00:23:04.261 --> 00:23:11.200\nAnd in particular,\nthis is an unnamed function expression.\n\n369\n00:23:14.776 --> 00:23:19.030\nHowever, there's actually a second\nway to declare a function expression.\n\n370\n00:23:20.850 --> 00:23:27.978\nI can subtract, And\n\n371\n00:23:27.978 --> 00:23:32.757\nlet's give the function expression\na name on the right hand side, and\n\n372\n00:23:32.757 --> 00:23:35.200\nthat looks kinda weird.\n\n373\n00:23:35.200 --> 00:23:38.330\nThese are anonymous, I don't have a name.\n\n374\n00:23:38.330 --> 00:23:42.420\nIt's really hard for Chrome or any other\nJavaScript interpreter to track it down,\n\n375\n00:23:42.420 --> 00:23:45.960\nand let you know when you've used this and\nsomething's went wrong.\n\n376\n00:23:45.960 --> 00:23:51.380\nBut if I give this a name, it'll say hey,\nfunction subtract doesn't work.\n\n377\n00:23:51.380 --> 00:23:55.019\nBut I can call it with instead just sub.\n\n378\n00:23:55.019 --> 00:23:57.627\nSo it's kind of like an alias for\na named function.\n\n379\n00:23:57.627 --> 00:24:00.836\nSo let's take a look at real quick.\n\n380\n00:24:07.832 --> 00:24:11.474\n[SOUND] Double quotes, so if you ever\nwant or need quotes inside of quotes,\n\n381\n00:24:11.474 --> 00:24:13.782\ndouble quotes and\nthen single quotes inside.\n\n382\n00:24:13.782 --> 00:24:15.901\nOr there are other ways.\n\n383\n00:24:15.901 --> 00:24:18.520\nBut I'm subtracting.\n\n384\n00:24:20.470 --> 00:24:22.955\nIt's a very, very high level function.\n\n385\n00:24:22.955 --> 00:24:23.940\n&gt;&gt; [LAUGH]\n&gt;&gt; Gotta watch out.\n\n386\n00:24:25.690 --> 00:24:26.210\nYou're on fire.\n\n387\n00:24:26.210 --> 00:24:30.210\n&gt;&gt; Yeah, yeah, you're gonna have\nto analyze the output of this one.\n\n388\n00:24:30.210 --> 00:24:36.120\nBut at this point, if I call sub,\nI should get the output I am subtracting.\n\n389\n00:24:37.620 --> 00:24:42.347\nHowever, if I say subtract as such,\n\n390\n00:24:42.347 --> 00:24:45.708\nsubtract is not defined.\n\n391\n00:24:45.708 --> 00:24:50.553\nAnd that's because the alias that\nwe're able to call it by is defined by\n\n392\n00:24:50.553 --> 00:24:52.020\nthis var statement.\n\n393\n00:24:52.020 --> 00:24:56.310\nSo I'm creating a variable and\nthat's pointing to the function.\n\n394\n00:24:56.310 --> 00:24:58.460\n&gt;&gt; Advantage,\ndisadvantage to doing it this way?\n\n395\n00:24:58.460 --> 00:25:02.535\nWhy would I want to,\ninstead of just declaring function\n\n396\n00:25:02.535 --> 00:25:06.980\nsubtract() do var sub\n= function subtract().\n\n397\n00:25:06.980 --> 00:25:12.000\n&gt;&gt; So this is a way of having\nvery descriptive function names.\n\n398\n00:25:12.000 --> 00:25:15.340\nAnd then having kind of an alias for\nshorthand use.\n\n399\n00:25:16.820 --> 00:25:21.700\nIn addition to,\nto some extent it's a level of preference.\n\n400\n00:25:21.700 --> 00:25:23.980\nSo we've seen three ways\nof declaring functions and\n\n401\n00:25:23.980 --> 00:25:26.040\nstarted to look at those ins and outs.\n\n402\n00:25:26.040 --> 00:25:28.410\nWe have an unnamed function expression.\n\n403\n00:25:28.410 --> 00:25:30.780\nWe have a named function expression and\n\n404\n00:25:30.780 --> 00:25:34.860\nthen we have what is called\na function declaration.\n\n405\n00:25:34.860 --> 00:25:35.640\nAnd it has a name.\n\n406\n00:25:35.640 --> 00:25:37.410\nThat was the one with function,\nadd parentheses.\n\n407\n00:25:39.340 --> 00:25:43.030\nNow I have kind of a preference\ntoward the function declarations.\n\n408\n00:25:43.030 --> 00:25:46.648\nFunction some name,\nparentheses, open and close.\n\n409\n00:25:46.648 --> 00:25:51.578\nAnd that's because we end up with some\nnice properties that I don't have to\n\n410\n00:25:51.578 --> 00:25:53.210\nget crazy about.\n\n411\n00:25:53.210 --> 00:25:56.973\nBut there are times where I need\nto realias a function name, and\n\n412\n00:25:56.973 --> 00:25:59.956\nthose function expressions\nare helpful in that.\n\n413\n00:25:59.956 --> 00:26:00.714\n&gt;&gt; Very good.\n\n414\n00:26:00.714 --> 00:26:05.510\n&gt;&gt; So\nwe've seen how to declare a function.\n\n415\n00:26:05.510 --> 00:26:10.358\nIt would be nice to see using these\nfunctions to encapsulate some\n\n416\n00:26:10.358 --> 00:26:12.433\nfairly complex behavior.\n\n417\n00:26:12.433 --> 00:26:15.980\nBut, I don't know, maybe that's good for\nanother time, right?\n\n418\n00:26:15.980 --> 00:26:16.956\n&gt;&gt; Think so?\n\n419\n00:26:16.956 --> 00:26:17.784\n&gt;&gt; Yeah.\n&gt;&gt; All right.\n\n420\n00:26:17.784 --> 00:26:18.637\nSounds like a plan then, Justin.\n\n421\n00:26:18.637 --> 00:26:20.143\nWe've got our basics down, right?\n\n422\n00:26:20.143 --> 00:26:24.009\nWe've seen three different ways\nthat we can create functions and\n\n423\n00:26:24.009 --> 00:26:27.460\nwe've seen a little bit of\ntheir functionality, right.\n\n424\n00:26:27.460 --> 00:26:31.500\nThey can actually take input and\nthey can produce output,\n\n425\n00:26:31.500 --> 00:26:33.140\nthey can return values to it.\n\n426\n00:26:33.140 --> 00:26:34.980\nSo fantastic look there, Justin.\n\n427\n00:26:34.980 --> 00:26:38.010\nLooking forward to seeing the rest of it,\nhow we can actually put these guys to use.\n\n428\n00:26:38.010 --> 00:26:39.700\nBut for now, we are out of time.\n\n429\n00:26:39.700 --> 00:26:43.190\nSo signing off for ITProTV,\nI've been your host Mike Rodrick.\n\n430\n00:26:43.190 --> 00:26:44.105\n&gt;&gt; And I'm Justin Dennison.\n\n431\n00:26:44.105 --> 00:26:45.627\n&gt;&gt; [LAUGH] And we'll see you next time.\n\n432\n00:26:45.627 --> 00:26:53.185\n&gt;&gt; [MUSIC]\n\n433\n00:26:53.185 --> 00:26:57.439\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "203162840"
        },
        {
          "description": "In this episode, Justin and Mike continue their look into functions in JavaScript. They demonstrate defining named and unnamed functions. They also describe hoisting functions and closure.",
          "length": "1686",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-9-1-2-working_with_function_pt2-020317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-9-1-2-working_with_function_pt2-020317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/techskills-introductiontojavascript-9-1-2-working_with_function_pt2-020317-1-sm.jpg",
          "title": "Working with Functions Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.300 --> 00:00:01.426\nWelcome to ITProTV.\n\n2\n00:00:01.426 --> 00:00:02.673\nI'm your host.\n\n3\n00:00:02.673 --> 00:00:06.183\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:06.183 --> 00:00:08.442\n[MUSIC]\n\n5\n00:00:08.442 --> 00:00:12.540\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.540 --> 00:00:16.160\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n7\n00:00:16.160 --> 00:00:17.390\nI'm your host, Mike Rodrick.\n\n8\n00:00:17.390 --> 00:00:19.930\nToday we're doing our\nintroduction to JavaScript.\n\n9\n00:00:19.930 --> 00:00:23.440\nAnd in this episode we're gonna be\ncontinuing our thought process on\n\n10\n00:00:23.440 --> 00:00:23.980\nfunctions.\n\n11\n00:00:23.980 --> 00:00:28.737\nThis is a part two, so make sure you\ngo back and watch part one first.\n\n12\n00:00:28.737 --> 00:00:32.700\nBut here to continue on with\nfunctions is Mr. Justin Dennison.\n\n13\n00:00:32.700 --> 00:00:33.560\nWelcome back, Justin.\n\n14\n00:00:33.560 --> 00:00:38.400\n&gt;&gt; Thanks for having me back, and\nI do want to emphasize functions, fun.\n\n15\n00:00:38.400 --> 00:00:38.920\nFun.\n\n16\n00:00:38.920 --> 00:00:40.581\n&gt;&gt; [LAUGH]\n&gt;&gt; So in the last episode,\n\n17\n00:00:40.581 --> 00:00:45.392\nwe saw that functions gave us the ability\nto encapsulate these kind of procedures,\n\n18\n00:00:45.392 --> 00:00:50.180\nthese algorithms, these thought processes,\nin these reusable pieces.\n\n19\n00:00:50.180 --> 00:00:54.310\nNow that comes with some,\nyou got to be careful about x, y, and z.\n\n20\n00:00:54.310 --> 00:00:56.770\nDon't use global variables\nwithin your functions.\n\n21\n00:00:56.770 --> 00:01:01.850\nThat strongly couples the environment that\nthey run in and it's hard to reuse them.\n\n22\n00:01:01.850 --> 00:01:03.450\nSo be very careful about that.\n\n23\n00:01:03.450 --> 00:01:07.390\nAnd also remember that the return\nstatement stops the function\n\n24\n00:01:07.390 --> 00:01:09.230\nfrom running anything else.\n\n25\n00:01:09.230 --> 00:01:14.620\nBut, what I would like to do is\nshow you how functions can be used\n\n26\n00:01:14.620 --> 00:01:20.280\nto encapsulate kind of complex procedures\nthat are useful in the short term.\n\n27\n00:01:20.280 --> 00:01:25.350\nSo, let’s go ahead and dive right into\nthat and see how we can use functions\n\n28\n00:01:25.350 --> 00:01:29.000\njust to move code around and\nthen make it easier to read.\n\n29\n00:01:29.000 --> 00:01:30.768\nReadability is important to us.\n\n30\n00:01:30.768 --> 00:01:34.420\nSo, I'm gonna start with a couple\nof function expression and\n\n31\n00:01:34.420 --> 00:01:37.980\nimplement some procedures that I use and\n\n32\n00:01:37.980 --> 00:01:41.530\nthat are actually already\navailable on the array methods but\n\n33\n00:01:41.530 --> 00:01:46.590\nit's nice to see how those work and also\nhighlights another aspect about functions.\n\n34\n00:01:46.590 --> 00:01:49.060\nSo, I'm gonna start with filter.\n\n35\n00:01:49.060 --> 00:01:53.510\nAnd this is going to be an unnamed or\nanonymous function expression.\n\n36\n00:01:53.510 --> 00:01:55.190\nNow, I mean when I'm saying unnamed or\n\n37\n00:01:55.190 --> 00:01:59.140\nanonymous just make sure you know I'm\ntalking about the right hand side,\n\n38\n00:01:59.140 --> 00:02:01.260\nof the assignment operator,\nnot the left hand side.\n\n39\n00:02:02.850 --> 00:02:04.610\nSo, what is this function gonna do?\n\n40\n00:02:04.610 --> 00:02:09.790\nIt's going to take an array and\na predicate.\n\n41\n00:02:09.790 --> 00:02:12.643\nNow, the predicate is going\nto evaluate to true or false,\n\n42\n00:02:12.643 --> 00:02:15.336\nthat's a fancy word for\nit evaluates to true or false.\n\n43\n00:02:15.336 --> 00:02:16.240\n&gt;&gt; [LAUGH]\n&gt;&gt; Just\n\n44\n00:02:16.240 --> 00:02:19.468\nwe'd like to make up words to make\neverybody feel good about themselves.\n\n45\n00:02:19.468 --> 00:02:21.470\n&gt;&gt; [LAUGH]\n&gt;&gt; Predicate means true or false.\n\n46\n00:02:21.470 --> 00:02:22.810\nIt is some test condition.\n\n47\n00:02:24.480 --> 00:02:30.924\nAnd this predicate is going to filter\nthrough the array that's given and\n\n48\n00:02:30.924 --> 00:02:37.909\nonly return the elements of the array\nthat evaluate to true for the predicate.\n\n49\n00:02:37.909 --> 00:02:41.720\nNow, a predicate what,\nwell we'll have to see in just a moment.\n\n50\n00:02:41.720 --> 00:02:46.810\nSo I'm gonna start with creating a\ntemporary empty array inside the function.\n\n51\n00:02:46.810 --> 00:02:50.008\nIt'll only be available\nhere unless I spit it out.\n\n52\n00:02:50.008 --> 00:02:55.344\nAnd then I'm gonna run through\nthe array in order to test for\n\n53\n00:02:55.344 --> 00:02:57.915\nthis predicate operation.\n\n54\n00:02:57.915 --> 00:03:00.180\nWe'll see how that is used in a moment.\n\n55\n00:03:00.180 --> 00:03:03.140\nSo let's review this for loop syntax.\n\n56\n00:03:03.140 --> 00:03:07.060\nSo var i = 0.\n\n57\n00:03:07.060 --> 00:03:13.969\nRemember, arrays start\nat index of zero and\n\n58\n00:03:13.969 --> 00:03:19.579\nwhile i &lt; arr.length; i+= 1.\n\n59\n00:03:19.579 --> 00:03:23.942\nI'm going to run through and\nif the predicate,\n\n60\n00:03:23.942 --> 00:03:28.610\nnotice I just called it like a function.\n\n61\n00:03:28.610 --> 00:03:30.850\nPredicate is actually another function and\n\n62\n00:03:30.850 --> 00:03:34.790\nin JavaScript, functions are what\nare called first class citizens.\n\n63\n00:03:34.790 --> 00:03:38.380\nA function can take another function,\nit can return functions.\n\n64\n00:03:38.380 --> 00:03:41.540\nIt can then take another function,\nreturn more functions.\n\n65\n00:03:41.540 --> 00:03:44.390\nFunctions everywhere, function madness.\n\n66\n00:03:44.390 --> 00:03:48.120\nSo keep that in mind,\nfunctions everywhere.\n\n67\n00:03:48.120 --> 00:03:54.700\nSo if predicate of array i\n\n68\n00:03:55.800 --> 00:04:00.420\nand actually, let's bring that out into a\ntemporary variable, just for readability.\n\n69\n00:04:01.540 --> 00:04:07.710\nWanna say var element = arr[i].\n\n70\n00:04:07.710 --> 00:04:13.143\nIf the predicate of the element, so\nif the element passes this test or\n\n71\n00:04:13.143 --> 00:04:17.919\nit does not pass, in this case\nif it passes then I want to say,\n\n72\n00:04:17.919 --> 00:04:20.751\nresults.push(element9}).\n\n73\n00:04:20.751 --> 00:04:23.337\nNow be careful, I got curly braces,\nparentheses, and\n\n74\n00:04:23.337 --> 00:04:25.500\nsemicolons all over the place.\n\n75\n00:04:25.500 --> 00:04:29.520\nSo I always match those\nup before moving on.\n\n76\n00:04:29.520 --> 00:04:33.363\nHere's a common error when you're writing\nmore complex functions that have.\n\n77\n00:04:33.363 --> 00:04:38.330\nSee this cascaded view of semicolons and\nparentheses and curly braces?\n\n78\n00:04:38.330 --> 00:04:40.420\nIn particular the curly braces.\n\n79\n00:04:40.420 --> 00:04:43.450\nThese rich text editors will\ngive a slight blue outline.\n\n80\n00:04:43.450 --> 00:04:45.180\nI don't know if you can see that.\n\n81\n00:04:45.180 --> 00:04:47.120\nLet's try to zoom in a little bit.\n\n82\n00:04:47.120 --> 00:04:51.180\nThat slight blue outline, and it will\nactually tell you where it's paired.\n\n83\n00:04:51.180 --> 00:04:54.800\nSo you can do the matching and make sure\nthat you're actually where you need to be.\n\n84\n00:04:56.040 --> 00:05:00.790\nI want to come outside of the loop,\nthere's the curly brace to close the loop.\n\n85\n00:05:00.790 --> 00:05:09.670\nSo I want to come outside of that and\nthen say return the results array.\n\n86\n00:05:09.670 --> 00:05:14.040\nSo if I go back through this and look,\nI start with temporary empty array,\n\n87\n00:05:14.040 --> 00:05:18.420\nI looped through everything of\nthe array that was passed to it, and\n\n88\n00:05:18.420 --> 00:05:23.230\nI test for each element if some\ncondition is true or false.\n\n89\n00:05:23.230 --> 00:05:27.590\nIf it is true, then I'm going to\nkeep that element in the results.\n\n90\n00:05:29.060 --> 00:05:32.600\nNotice there's no else, or\nif else, or anything else there.\n\n91\n00:05:32.600 --> 00:05:36.830\nI'm actually just gonna skip all\nthe ones that it evaluates to false for.\n\n92\n00:05:36.830 --> 00:05:39.960\nSo keep that in mind, so\nthere's my filter method.\n\n93\n00:05:39.960 --> 00:05:42.190\nLet's see this actually in use.\n\n94\n00:05:42.190 --> 00:05:45.422\nImagine having to copy and\npaste this everywhere,\n\n95\n00:05:45.422 --> 00:05:47.534\nif I needed this same operation.\n\n96\n00:05:47.534 --> 00:05:51.340\nYou'd be like, so what are we doing again?\n\n97\n00:05:51.340 --> 00:05:53.100\nSo, let's see how this is used.\n\n98\n00:05:53.100 --> 00:05:59.060\nI'm gonna start with some nums and\n1, 2, 3, 4, 5.\n\n99\n00:05:59.060 --> 00:06:03.100\nSo there's our numbers here,\nlet's move this up a little bit.\n\n100\n00:06:03.100 --> 00:06:04.672\nJust to keep you in mind\nthere's our filter.\n\n101\n00:06:04.672 --> 00:06:07.480\nI'm gonna fold this up so\nwe can see that it's there.\n\n102\n00:06:09.740 --> 00:06:14.530\nHere's our predicate function, and\n\n103\n00:06:14.530 --> 00:06:18.920\nthat is going to be another one\nof these function expressions.\n\n104\n00:06:18.920 --> 00:06:24.328\nAnd that's gonna take a num and\n\n105\n00:06:24.328 --> 00:06:30.784\nit's gonna return x % 2 === 0.\n\n106\n00:06:30.784 --> 00:06:36.235\nNow, we haven't seen that mod operator for\na while, but I'm essentially saying not x,\n\n107\n00:06:36.235 --> 00:06:40.540\nit's I'm sure some of you are like,\nwhere's that exit coming from?\n\n108\n00:06:40.540 --> 00:06:43.110\nHe just told us not to\nuse global variables.\n\n109\n00:06:43.110 --> 00:06:45.220\nYou're right, you're right,\nit should be num.\n\n110\n00:06:45.220 --> 00:06:50.060\nSo if the remainder of\nnum divided by 2 is 0, or\n\n111\n00:06:50.060 --> 00:06:52.840\nI'm gonna rename this,\nthis is hard to read.\n\n112\n00:06:55.730 --> 00:07:00.205\nIf it is even, then filter out\n\n113\n00:07:00.205 --> 00:07:04.862\nthose that are not even or odd.\n\n114\n00:07:04.862 --> 00:07:13.910\nSo let's say evens if I'm\nthinking of this right.\n\n115\n00:07:13.910 --> 00:07:18.950\nAnd I'm gonna pass the nums and\nthe is even function.\n\n116\n00:07:18.950 --> 00:07:23.410\nNotice that I'm not\nputting parenthesis here.\n\n117\n00:07:23.410 --> 00:07:26.362\nWhen I'm passing functions\naround like this,\n\n118\n00:07:26.362 --> 00:07:31.397\nI do not want to evaluate them in place,\nI'm just passing them around to be used.\n\n119\n00:07:31.397 --> 00:07:34.940\nI evaluate that function right here.\n\n120\n00:07:34.940 --> 00:07:40.755\nSo when I pass in isEven,\nit will become where predicate is,\n\n121\n00:07:40.755 --> 00:07:45.220\nand then isEven will be\ncalled on the element.\n\n122\n00:07:45.220 --> 00:07:50.579\nSo that's a common issue, I'll actually\ngo back and add these parentheses\n\n123\n00:07:50.579 --> 00:07:55.702\nafter we see this works, to show you\nthe common error that you will have.\n\n124\n00:07:55.702 --> 00:08:01.475\nSo console.log(evens) and\nI refresh And notice of [1,\n\n125\n00:08:01.475 --> 00:08:06.904\n2, 3, 4, 5]; 2 and\n4 are the only even numbers or\n\n126\n00:08:06.904 --> 00:08:11.110\nevenly divided by 2 and that's what I get.\n\n127\n00:08:11.110 --> 00:08:13.899\nI have filtered out all the elements\nthat do not satisfy that.\n\n128\n00:08:13.899 --> 00:08:14.743\n&gt;&gt; Nice.\n\n129\n00:08:14.743 --> 00:08:19.410\n&gt;&gt; So now, okay filter the nums for\nthe even ones.\n\n130\n00:08:19.410 --> 00:08:24.240\nThat is easier to read than copying and\npasting all of\n\n131\n00:08:24.240 --> 00:08:28.430\nthis information every time I needed\nto do this and then making the changes.\n\n132\n00:08:28.430 --> 00:08:29.950\nHere's the changes I see people make.\n\n133\n00:08:32.670 --> 00:08:37.310\nThey'll actually hard code stuff like\nthat in and you go I don't, okay,\n\n134\n00:08:37.310 --> 00:08:39.100\nI have to make these changes every time,\n\n135\n00:08:39.100 --> 00:08:42.750\nbut if this logic was faulty I would\nhave to go change that logic everywhere.\n\n136\n00:08:42.750 --> 00:08:45.980\nIf you can, make it general.\n\n137\n00:08:45.980 --> 00:08:47.360\nNow, keep in mind,\n\n138\n00:08:47.360 --> 00:08:51.930\nthese general ideas don't come around\nbecause you just sit and think.\n\n139\n00:08:51.930 --> 00:08:52.690\nSometimes they do.\n\n140\n00:08:52.690 --> 00:08:54.420\nBut not always.\n\n141\n00:08:54.420 --> 00:08:57.680\nSometimes you'll rewrite this\na couple of times, and you'll go hey,\n\n142\n00:08:57.680 --> 00:09:02.200\nthis loop and construct looks a little\nbit like this loop and construct.\n\n143\n00:09:02.200 --> 00:09:05.590\nI wonder if I can generalize\nthat to a function.\n\n144\n00:09:05.590 --> 00:09:07.110\nSo keep that in mind.\n\n145\n00:09:07.110 --> 00:09:08.090\nSo I have my filter.\n\n146\n00:09:09.320 --> 00:09:14.330\nNow I told you that this run,\nif I add a parenthesis here,\n\n147\n00:09:14.330 --> 00:09:15.358\nweird things would happen.\n\n148\n00:09:15.358 --> 00:09:19.920\nWell, it actually throws an error.\n\n149\n00:09:19.920 --> 00:09:24.420\nBecause it's trying to run this\nfunction that requires an array and\n\n150\n00:09:24.420 --> 00:09:26.780\nthe predicate, without any arguments.\n\n151\n00:09:26.780 --> 00:09:28.538\nAnd it runs it on page load.\n\n152\n00:09:28.538 --> 00:09:29.950\nI don't wanna to run on page load,\n\n153\n00:09:29.950 --> 00:09:35.310\nI actually want it to run inside of\nthis context of the other function.\n\n154\n00:09:35.310 --> 00:09:40.730\nSo when I'm passing functions around,\nI'm passing a reference to the function.\n\n155\n00:09:40.730 --> 00:09:42.860\nThe pointer, like this is a function.\n\n156\n00:09:42.860 --> 00:09:44.150\nI need to put it in here.\n\n157\n00:09:44.150 --> 00:09:44.990\nSo keep that in mind.\n\n158\n00:09:46.360 --> 00:09:48.030\nSo I have my filter function.\n\n159\n00:09:48.030 --> 00:09:52.120\nNow I can use filter all over\nthe place with additional tests.\n\n160\n00:09:52.120 --> 00:09:54.370\nI'm testing for isEvens here.\n\n161\n00:09:54.370 --> 00:09:57.849\nI could test for odds, such as,\n\n162\n00:10:02.761 --> 00:10:07.500\nAnd this is one of those,\nif it's not even then it's odd.\n\n163\n00:10:07.500 --> 00:10:13.162\nSo return not isEven(num).\n\n164\n00:10:13.162 --> 00:10:16.880\nI'm gonna use one function on another,\nand all I'm getting is the opposite.\n\n165\n00:10:18.090 --> 00:10:20.590\nSo, and I'm making an alias so\nI can use those.\n\n166\n00:10:20.590 --> 00:10:22.782\nSo, let's see what the odds looks like.\n\n167\n00:10:22.782 --> 00:10:27.761\nI'm gonna filter the nums for\n\n168\n00:10:27.761 --> 00:10:34.134\nthe odds [SOUND] and I have now segmented\n\n169\n00:10:34.134 --> 00:10:39.121\nmy array into evens and odds.\n\n170\n00:10:39.121 --> 00:10:42.320\nWhat I really like about the filter\nthough, is it gives me a new array.\n\n171\n00:10:42.320 --> 00:10:44.260\nIt doesn't actually change nums.\n\n172\n00:10:44.260 --> 00:10:48.090\nIt's not a mutative operation.\n\n173\n00:10:48.090 --> 00:10:53.487\nAnd just prove that There's the evens,\n\n174\n00:10:53.487 --> 00:10:55.790\nthere's the odds, and\nthere's the original.\n\n175\n00:10:55.790 --> 00:11:00.240\nSo now I have this filter function\nthat I can use in various places.\n\n176\n00:11:00.240 --> 00:11:03.645\nSo I love that, it makes me happy.\n\n177\n00:11:03.645 --> 00:11:05.650\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n178\n00:11:05.650 --> 00:11:09.940\nfilter is the use of that\nanonymous function expression.\n\n179\n00:11:11.550 --> 00:11:13.750\nNow I'm going to write a map function,\n\n180\n00:11:13.750 --> 00:11:15.921\nwhich applies a function just for\nevery element.\n\n181\n00:11:15.921 --> 00:11:18.740\nIt's kinda like a transformation.\n\n182\n00:11:18.740 --> 00:11:23.380\nYou'll see that it looks very similar\nto filter with a couple little changes.\n\n183\n00:11:23.380 --> 00:11:26.460\nIt's actually gonna be\na little simpler than filter.\n\n184\n00:11:28.240 --> 00:11:31.820\nBut I'm gonna do something that\na lot of people typically do.\n\n185\n00:11:31.820 --> 00:11:34.830\nI'm intentionally going to show\nyou an error that will occur,\n\n186\n00:11:34.830 --> 00:11:36.670\nthen we're gonna talk about why that is.\n\n187\n00:11:38.310 --> 00:11:40.430\nSo I'm going to just fold these up.\n\n188\n00:11:41.540 --> 00:11:44.080\nLike so.\nAnd I'm gonna keep nums.\n\n189\n00:11:47.290 --> 00:11:51.400\nBut here, I want to write a map function.\n\n190\n00:11:51.400 --> 00:11:54.110\nBut I'm gonna use this in\nnamed function expression.\n\n191\n00:11:55.720 --> 00:11:57.400\nAnd I'm just gonna call it mapper.\n\n192\n00:11:58.750 --> 00:11:59.950\nCuz that's gonna be the mapper.\n\n193\n00:11:59.950 --> 00:12:05.195\nAnd it's gonna take an array, and\nwhat's called either a transformation.\n\n194\n00:12:07.144 --> 00:12:10.890\nOr also sometimes known\nas a projection function.\n\n195\n00:12:10.890 --> 00:12:16.580\nNow these are math-like terms,\nI'm just gonna call it the changeFunc.\n\n196\n00:12:16.580 --> 00:12:19.100\nIt's how things are going to change.\n\n197\n00:12:19.100 --> 00:12:21.820\nSo now we have our function\n\n198\n00:12:21.820 --> 00:12:25.320\nexpression with our named\nfunction on the right hand side.\n\n199\n00:12:25.320 --> 00:12:26.920\nOur array, and our changeFunc.\n\n200\n00:12:26.920 --> 00:12:29.850\nLet's actually use that to\ncreate that map function.\n\n201\n00:12:29.850 --> 00:12:31.190\nAnd then we'll see how that works out.\n\n202\n00:12:32.430 --> 00:12:35.020\nSo again, I wanna create that results.\n\n203\n00:12:35.020 --> 00:12:39.170\nThat's kinda my holding\nwithin this math function.\n\n204\n00:12:40.610 --> 00:12:43.890\nAnd I wanna run back through\nthe array that's passed in.\n\n205\n00:12:45.290 --> 00:12:50.000\nSo while i &lt; arr.length; i += 1.\n\n206\n00:12:50.000 --> 00:12:51.780\nNow, I do wanna illustrate,\n\n207\n00:12:51.780 --> 00:12:54.810\nnotice I'm using another\nfunction to put the results into.\n\n208\n00:12:54.810 --> 00:13:00.050\nAnd that's because sometimes like filter\nif I moving that would, if I'm removing or\n\n209\n00:13:00.050 --> 00:13:04.565\nadding elements, that would actually\nchange the length dynamically and\n\n210\n00:13:04.565 --> 00:13:09.190\nyou may get weird overflow or underflow or\nit doesn't quite work that way.\n\n211\n00:13:09.190 --> 00:13:14.620\nSo if I go one to one moving one element,\nmaking the change,\n\n212\n00:13:14.620 --> 00:13:18.480\nand then adding it to kinda my workspace,\nwhich is results in this case.\n\n213\n00:13:18.480 --> 00:13:21.580\nI don't have to worry about handling\nall those weird exceptions.\n\n214\n00:13:21.580 --> 00:13:24.050\nMakes a little easier to reason about, and\n\n215\n00:13:24.050 --> 00:13:26.520\nit ensures that you're not\nchanging your original data.\n\n216\n00:13:26.520 --> 00:13:28.790\nI'm getting a new copy with the changes.\n\n217\n00:13:28.790 --> 00:13:30.100\nSo, what do I wanna do?\n\n218\n00:13:30.100 --> 00:13:34.872\nI wanna loop through that and\nI wanna grab each element and\n\n219\n00:13:34.872 --> 00:13:39.280\nthat is array[i] so\ni is gonna be 0, 1, 2, 3.\n\n220\n00:13:39.280 --> 00:13:45.827\nGrab each element, and I'm going to\nsay results.push(changeFunc(element));\n\n221\n00:13:45.827 --> 00:13:50.077\nthat's a lot of parenthesis,\nbut this runs inside out.\n\n222\n00:13:50.077 --> 00:13:54.803\nI'm gonna take changeFunc,\napply it to the element, and\n\n223\n00:13:54.803 --> 00:13:58.280\nthat's gonna make some transformation.\n\n224\n00:13:58.280 --> 00:13:59.350\nWe'll see how that works.\n\n225\n00:13:59.350 --> 00:14:01.160\nThen I'm gonna push that into the results.\n\n226\n00:14:02.320 --> 00:14:07.785\nSo again I have noticed this\nis very similar to the filter.\n\n227\n00:14:07.785 --> 00:14:12.080\nSo this filter has the if statement\nbecause that is filtering out,\n\n228\n00:14:12.080 --> 00:14:14.160\nthat's how I'm making that decision.\n\n229\n00:14:14.160 --> 00:14:18.420\nWith map I just want to have this run for\neverything.\n\n230\n00:14:18.420 --> 00:14:20.570\nEverything's gonna get\nthis changeFunc apply.\n\n231\n00:14:22.240 --> 00:14:28.870\nSo I'm gonna use my highlighted curly\nbrace, and then return results.\n\n232\n00:14:28.870 --> 00:14:30.980\nAnd there's my map function.\n\n233\n00:14:30.980 --> 00:14:33.190\nSo I can use this, but\n\n234\n00:14:33.190 --> 00:14:37.562\nhere's a common error that people\nwill make, var map = function mapper.\n\n235\n00:14:37.562 --> 00:14:42.980\nI'm gonna come up here, notice that num\nis still aligned, and I'm gonna say,\n\n236\n00:14:44.450 --> 00:14:49.070\nmap actually I need\na function to apply to it.\n\n237\n00:14:49.070 --> 00:14:57.500\nSo let's just double that takes a num and\nreturn num x 2.\n\n238\n00:14:57.500 --> 00:15:07.041\nAnd I'm gonna console.log(map(nums,\n\n239\n00:15:07.041 --> 00:15:10.140\ndouble)).\n\n240\n00:15:11.200 --> 00:15:11.990\nOkay.\n\n241\n00:15:11.990 --> 00:15:20.490\nAnd just for readability let me,\nvar doubleNums.\n\n242\n00:15:20.490 --> 00:15:22.030\nVery original naming here Mike.\n\n243\n00:15:22.030 --> 00:15:22.800\n&gt;&gt; Yeah, I like it.\n\n244\n00:15:25.110 --> 00:15:26.870\n&gt;&gt; And doubleNums is here.\n\n245\n00:15:26.870 --> 00:15:28.240\nSo I'm gonna apply a map.\n\n246\n00:15:28.240 --> 00:15:33.916\nAnd if I go and run,\nUncaught TypeError: map is not a function.\n\n247\n00:15:33.916 --> 00:15:36.736\nWell, that's weird.\n\n248\n00:15:38.520 --> 00:15:42.610\nSee how I have var map = function mapper?\n\n249\n00:15:42.610 --> 00:15:45.100\nWhere am I using map within this?\n\n250\n00:15:45.100 --> 00:15:46.830\nWell, actually above it.\n\n251\n00:15:46.830 --> 00:15:50.754\nThere's a caveat to these different\nfunction declarations versus function\n\n252\n00:15:50.754 --> 00:15:51.547\nexpressions.\n\n253\n00:15:51.547 --> 00:15:57.632\nIf I'm using a function expression,\nI have to declare it before I can use it.\n\n254\n00:15:57.632 --> 00:16:01.437\nAnd what I mean,\nis if I take this exact same statement.\n\n255\n00:16:01.437 --> 00:16:03.288\nAnd just paste it below.\n\n256\n00:16:03.288 --> 00:16:09.270\nEverything's cool, I actually now\nhave doubled all of the numbers.\n\n257\n00:16:10.440 --> 00:16:15.700\nThat's weird,\ndoes that happen for everything?\n\n258\n00:16:15.700 --> 00:16:20.590\nWell, let's actually take function double,\nwhich is being used right here,\n\n259\n00:16:20.590 --> 00:16:22.590\nand put it below.\n\n260\n00:16:22.590 --> 00:16:24.017\nIf my assertion is correct.\n\n261\n00:16:25.979 --> 00:16:28.760\nFor all functions,\nthen this should break again.\n\n262\n00:16:30.310 --> 00:16:34.960\nBut it doesn't, and that's really weird\nfor people who are new to the language.\n\n263\n00:16:34.960 --> 00:16:38.870\nAnd that's because of the mechanism\nof how these things are named.\n\n264\n00:16:38.870 --> 00:16:44.300\nIf I use a function expression, it's named\nas that's executed and interpreted to.\n\n265\n00:16:44.300 --> 00:16:47.180\nSo, this function gets\ncreated after line 51 runs.\n\n266\n00:16:49.100 --> 00:16:53.130\nHowever, JavaScript will\nactually do a run through and\n\n267\n00:16:53.130 --> 00:16:57.670\nlook for functions named like this,\ndeclared like this.\n\n268\n00:16:57.670 --> 00:17:01.190\nThis name declarations and\nit will do something called hoisting.\n\n269\n00:17:01.190 --> 00:17:05.990\nIt will hoist that name to the top\nof the file so that file will be\n\n270\n00:17:05.990 --> 00:17:11.410\navailable before the functions\nactually created and interpreted.\n\n271\n00:17:11.410 --> 00:17:14.360\nThere's a lot more details\ninvolved with that,\n\n272\n00:17:14.360 --> 00:17:17.340\nthat ultimately doesn't\naffect how you use it.\n\n273\n00:17:17.340 --> 00:17:22.390\nThe real takeaway is function expressions\nhave to be declared before they're used\n\n274\n00:17:22.390 --> 00:17:24.190\nas you go from top to bottom.\n\n275\n00:17:24.190 --> 00:17:29.200\nFunctions declarations like\ndouble have to be declared well,\n\n276\n00:17:29.200 --> 00:17:31.800\nanywhere really,\nthey can just be at the bottom.\n\n277\n00:17:31.800 --> 00:17:35.140\nNow, I said originally\nthat I have a preference.\n\n278\n00:17:35.140 --> 00:17:38.660\nI tend to go with the named function\nexpressions like on like 62,\n\n279\n00:17:38.660 --> 00:17:41.770\nand why is that?\n\n280\n00:17:41.770 --> 00:17:46.000\nWell, I can organize my code\nlike the functions block,\n\n281\n00:17:46.000 --> 00:17:49.700\nthe variables block, and\nthen my main logic blocks.\n\n282\n00:17:49.700 --> 00:17:51.690\nAnd that's just for code organization.\n\n283\n00:17:51.690 --> 00:17:54.450\nYou will see people use\nfunction expressions,\n\n284\n00:17:54.450 --> 00:17:58.690\nnamed function expressions,\nyou'll see it all.\n\n285\n00:17:58.690 --> 00:18:02.120\nSo just keep in mind,\nit's more of a personal preference.\n\n286\n00:18:02.120 --> 00:18:05.590\nBut this function double will get hoisted.\n\n287\n00:18:05.590 --> 00:18:08.390\nWell, maybe doubles just special.\n\n288\n00:18:08.390 --> 00:18:09.410\nLet's try another one.\n\n289\n00:18:11.108 --> 00:18:13.623\nFunction triple.\n\n290\n00:18:13.623 --> 00:18:17.930\n[NOISE] Man here's another one\nof those complex functions.\n\n291\n00:18:17.930 --> 00:18:19.183\nYou gotta be careful.\n\n292\n00:18:19.183 --> 00:18:26.088\nLet's go to return num * 3; and\nlet's do some triple nums here.\n\n293\n00:18:29.480 --> 00:18:35.290\nAnd I'm gonna map over nums,\nthe function triple, and duplicate.\n\n294\n00:18:39.402 --> 00:18:41.100\nAnd now I have tripled nums.\n\n295\n00:18:41.100 --> 00:18:46.610\nWell, I've just confirmed that those\nnamed function declarations, well,\n\n296\n00:18:46.610 --> 00:18:50.200\nthey work just like I\nanticipated they would.\n\n297\n00:18:50.200 --> 00:18:51.650\n&gt;&gt; Nice.\n&gt;&gt; However, there's a final\n\n298\n00:18:51.650 --> 00:18:54.520\nthing within functions that\nwe need to know about.\n\n299\n00:18:54.520 --> 00:18:58.300\nSee how this double and tripple,\nMike does this look similar to you?\n\n300\n00:18:58.300 --> 00:18:59.370\n&gt;&gt; They look very similar.\n\n301\n00:18:59.370 --> 00:19:01.120\n&gt;&gt; They look similar to me also.\n\n302\n00:19:01.120 --> 00:19:04.620\nAs a matter of fact the only\ndifference between those two functions\n\n303\n00:19:04.620 --> 00:19:06.370\nis the number within them.\n\n304\n00:19:06.370 --> 00:19:07.730\nIt's that state, right.\n\n305\n00:19:08.780 --> 00:19:13.740\nIf I had some way of like\nabstracting that away,\n\n306\n00:19:13.740 --> 00:19:16.750\ncan I store that state somewhere?\n\n307\n00:19:16.750 --> 00:19:20.550\nAnd that way I could just\ncreate like a function factory.\n\n308\n00:19:20.550 --> 00:19:23.960\nNow when I say factory,\nthink of a car factory.\n\n309\n00:19:23.960 --> 00:19:27.880\nIf you went to a local car factory and\nyou were like, I wanna buy a car,\n\n310\n00:19:27.880 --> 00:19:33.060\nand they handed you a giant\nwheel of cheese, your relying.\n\n311\n00:19:33.060 --> 00:19:34.605\nThat's not quite what I expected.\n\n312\n00:19:34.605 --> 00:19:35.140\n&gt;&gt; [LAUGH]-\n&gt;&gt; So\n\n313\n00:19:35.140 --> 00:19:39.240\nat function factor is going to\nproduce additional functions.\n\n314\n00:19:39.240 --> 00:19:42.110\nThe return types are going\nto be a function type.\n\n315\n00:19:42.110 --> 00:19:44.290\nThat's a little weird.\n\n316\n00:19:44.290 --> 00:19:47.430\nBut this is the concept of a closure.\n\n317\n00:19:47.430 --> 00:19:51.810\nWe can use the concept of the closure\nto encapsulate some state.\n\n318\n00:19:51.810 --> 00:19:57.670\nBuilt some more function scopes, and\nthen kind of bundled that all together.\n\n319\n00:19:57.670 --> 00:20:01.550\nNow, that's probably a little\nconfusing at the moment.\n\n320\n00:20:01.550 --> 00:20:03.000\nBut let's see it in practice.\n\n321\n00:20:04.300 --> 00:20:07.770\nSo, let's take this double and triple,\nand do something called a refactor.\n\n322\n00:20:07.770 --> 00:20:11.530\nI'm gonna refactor this\ninto a multiplier function.\n\n323\n00:20:11.530 --> 00:20:14.070\nThat will do the following.\n\n324\n00:20:14.070 --> 00:20:19.580\nIt's gonna take a number and it's gonna\nreturn a new function of this form\n\n325\n00:20:19.580 --> 00:20:22.860\nwith that number tucked away, okay.\n\n326\n00:20:22.860 --> 00:20:27.960\nNow because I have those function scopes,\nI can kind of stagger\n\n327\n00:20:27.960 --> 00:20:32.760\nthose and JavaScript will remember\nthe environment that it was created in,\n\n328\n00:20:32.760 --> 00:20:36.600\nthe function will remember\nthe environment that it was created in.\n\n329\n00:20:36.600 --> 00:20:38.750\nSo, I'm gonna keep this double and\ntriple for reference.\n\n330\n00:20:38.750 --> 00:20:44.197\nBut I wanna create a new function called\nmultiplier, if I can spell multiplier.\n\n331\n00:20:46.590 --> 00:20:48.280\nActually, let's say multiply.\n\n332\n00:20:50.060 --> 00:20:53.590\nAnd that's going to take\na multiplier argument.\n\n333\n00:20:53.590 --> 00:20:57.210\nNow, I would think this is the multiplier.\n\n334\n00:20:57.210 --> 00:20:58.980\nSo, what can I do?\n\n335\n00:20:58.980 --> 00:21:02.300\nWell var, or better yet, function.\n\n336\n00:21:03.600 --> 00:21:05.680\nAnd I'm just gonna call\nthis the inner function.\n\n337\n00:21:05.680 --> 00:21:07.260\nIt's inside another function.\n\n338\n00:21:07.260 --> 00:21:11.550\nThis is totally okay,\nunlike JavaScript and other languages.\n\n339\n00:21:11.550 --> 00:21:13.060\nPeople are like nah, don't do that.\n\n340\n00:21:13.060 --> 00:21:13.930\nThat's bad.\n\n341\n00:21:13.930 --> 00:21:14.930\nDon't do that.\n\n342\n00:21:14.930 --> 00:21:17.310\nSo I'm gonna have an inner function and\n\n343\n00:21:17.310 --> 00:21:21.410\nit's gonna be of the form of\nthis double and of the triple.\n\n344\n00:21:21.410 --> 00:21:25.201\nSo I'm gonna return num * but\n\n345\n00:21:25.201 --> 00:21:29.454\ninstead of a particular number.\n\n346\n00:21:34.512 --> 00:21:37.240\nI'm going to return num times multiplier.\n\n347\n00:21:38.270 --> 00:21:40.015\nSo, I got a function within a function.\n\n348\n00:21:40.015 --> 00:21:43.650\n&gt;&gt; [LAUGH]\n&gt;&gt; This outer function\n\n349\n00:21:43.650 --> 00:21:44.580\nis going to return inner.\n\n350\n00:21:44.580 --> 00:21:49.640\nIt's gonna spit out inner, so\nit's gonna spit out a function.\n\n351\n00:21:49.640 --> 00:21:51.660\nIt's a function factory.\n\n352\n00:21:51.660 --> 00:21:56.800\nBut now I have abstracted\nthis to produce a bunch\n\n353\n00:21:56.800 --> 00:22:02.610\nof functions that are of this type,\nthey have the similar signature.\n\n354\n00:22:02.610 --> 00:22:05.430\nI'm gonna fill this up\nbecause that's scary.\n\n355\n00:22:05.430 --> 00:22:10.680\nBut we are going to change the double and\ntriple functions,\n\n356\n00:22:10.680 --> 00:22:15.510\nto make use of multiplier,\nso double equals\n\n357\n00:22:16.550 --> 00:22:21.980\nmultiplier or multiply, excuse me and\nif I'm doubling, what am I multiplying by?\n\n358\n00:22:21.980 --> 00:22:23.270\nTwo.\n\n359\n00:22:23.270 --> 00:22:26.490\nI'm gonna leave that there for\na moment and\n\n360\n00:22:26.490 --> 00:22:33.570\nthen triple is multiplying by three.\n\n361\n00:22:33.570 --> 00:22:37.630\nNotice by abstracting it,\nI now have more of a story ask,\n\n362\n00:22:37.630 --> 00:22:39.920\nkind of a declarative syntax.\n\n363\n00:22:39.920 --> 00:22:40.680\nLike this is what they are.\n\n364\n00:22:41.960 --> 00:22:47.058\nWell, let's use the type of operator\nto see what is stored in double.\n\n365\n00:22:47.058 --> 00:22:50.082\nType of double.\n\n366\n00:22:53.608 --> 00:22:56.230\nChangeFunc is not a,\n\n367\n00:23:00.482 --> 00:23:03.606\nChangeFunc is not a function?\n\n368\n00:23:07.628 --> 00:23:09.070\nWhat?\n\n369\n00:23:09.070 --> 00:23:10.550\nWait a minute.\n\n370\n00:23:10.550 --> 00:23:12.645\nSo let's do a little\nbit of debugging first.\n\n371\n00:23:12.645 --> 00:23:15.955\n&gt;&gt; [LAUGH]\n&gt;&gt; So app.js push change func,\n\n372\n00:23:15.955 --> 00:23:21.278\nchange func Map.\n\n373\n00:23:24.644 --> 00:23:27.964\nDid I accidentally hit\na syntax in [CROSSTALK] there?\n\n374\n00:23:33.647 --> 00:23:43.046\nResults.push, tripleNums.\n\n375\n00:23:43.046 --> 00:23:46.700\nI commented these out, well,\nthey don't exist anymore.\n\n376\n00:23:46.700 --> 00:23:48.420\nThey were not hoisted.\n\n377\n00:23:48.420 --> 00:23:51.155\nAnd I just explained to you.\n\n378\n00:23:51.155 --> 00:23:53.220\n&gt;&gt; [LAUGH]\n&gt;&gt; That this would happen.\n\n379\n00:23:53.220 --> 00:23:57.319\nAnd then in my intensity\nmade a brief oversize.\n\n380\n00:23:57.319 --> 00:24:00.923\nSo, because I commented out the current\nimplementation of double and\n\n381\n00:24:00.923 --> 00:24:03.006\ntriple as a name function declaration.\n\n382\n00:24:03.006 --> 00:24:04.756\nThose are no longer hoisted.\n\n383\n00:24:04.756 --> 00:24:07.743\nAnd because they're not hoisted,\nthey don't exist at this point.\n\n384\n00:24:07.743 --> 00:24:10.770\nSo, right now,\nI'm just gonna comment these out.\n\n385\n00:24:12.088 --> 00:24:14.720\nAnd we're gonna use one of those\njust to make sure the double and\n\n386\n00:24:14.720 --> 00:24:15.808\ntriple still behave the same.\n\n387\n00:24:15.808 --> 00:24:20.010\nSo, I'm gonna look at the type of double,\nand\n\n388\n00:24:20.010 --> 00:24:22.360\nwe'll come back to our console,\ndouble nums.\n\n389\n00:24:24.220 --> 00:24:27.425\nYou also have to comment\nout the [LAUGH] results.\n\n390\n00:24:27.425 --> 00:24:30.885\n&gt;&gt; [LAUGH]\n&gt;&gt; So, I gotta love programming.\n\n391\n00:24:30.885 --> 00:24:32.230\n&gt;&gt; [LAUGH]\n&gt;&gt; So [LAUGH],\n\n392\n00:24:32.230 --> 00:24:37.370\nif we look, we have double =\nmultiply(2) type of double.\n\n393\n00:24:37.370 --> 00:24:38.160\nWhat is double?\n\n394\n00:24:38.160 --> 00:24:39.490\nIt's a function.\n\n395\n00:24:39.490 --> 00:24:42.270\nWell, that means it is also cullable.\n\n396\n00:24:42.270 --> 00:24:45.910\nSo, remember, functions are first-class\ncitizens, I can pass them around.\n\n397\n00:24:45.910 --> 00:24:49.630\nI can pass them in the other functions\nI can also return them from functions.\n\n398\n00:24:50.990 --> 00:24:54.691\nSo, I have this function\ndouble = multiply(2), well,\n\n399\n00:24:54.691 --> 00:24:57.532\nI wonder what double = multiply(2) does?\n\n400\n00:24:57.532 --> 00:25:00.527\nOr double = multiply(2),\nwhat is double do?\n\n401\n00:25:00.527 --> 00:25:01.704\nWell, let's see here.\n\n402\n00:25:01.704 --> 00:25:08.118\nvar something = double,\nand I want double(3).\n\n403\n00:25:11.379 --> 00:25:12.010\nAnd something.\n\n404\n00:25:14.513 --> 00:25:15.407\nWonderful variable names.\n\n405\n00:25:15.407 --> 00:25:17.785\nBy the way,\nI'm teaching by counterexample.\n\n406\n00:25:17.785 --> 00:25:20.096\n&gt;&gt; [LAUGH]\n&gt;&gt; Of how to not name variables,\n\n407\n00:25:20.096 --> 00:25:21.100\ndon't do that.\n\n408\n00:25:21.100 --> 00:25:22.270\n&gt;&gt; Something is not a good one?\n\n409\n00:25:22.270 --> 00:25:23.138\n&gt;&gt; Yeah [LAUGH], something.\n\n410\n00:25:23.138 --> 00:25:26.740\n&gt;&gt; [LAUGH]\n&gt;&gt; Stuffandthing, something, yeah.\n\n411\n00:25:26.740 --> 00:25:27.260\nWhat is that?\n\n412\n00:25:27.260 --> 00:25:28.380\nThat's the thing.\n\n413\n00:25:28.380 --> 00:25:29.150\nWhat's that other?\n\n414\n00:25:29.150 --> 00:25:30.060\nThat's a thing.\n\n415\n00:25:30.060 --> 00:25:31.405\n&gt;&gt; Should be perfectly clear to your team.\n\n416\n00:25:31.405 --> 00:25:33.130\n[LAUGH]\n&gt;&gt; Yeah, yeah.\n\n417\n00:25:33.130 --> 00:25:33.840\nWhat are all these?\n\n418\n00:25:33.840 --> 00:25:35.740\nThat's the stuff and things array.\n\n419\n00:25:35.740 --> 00:25:37.672\nIt's just got stuff and things in it.\n\n420\n00:25:37.672 --> 00:25:39.970\n[LAUGH] So [LAUGH],\nbe very careful of that.\n\n421\n00:25:39.970 --> 00:25:42.080\nBut notice this printout for something.\n\n422\n00:25:43.120 --> 00:25:44.720\nA double(3).\n\n423\n00:25:44.720 --> 00:25:49.287\nWell, I wonder if triple works.\n\n424\n00:25:49.287 --> 00:25:50.816\nHey, nine.\n\n425\n00:25:50.816 --> 00:25:51.528\n&gt;&gt; Mm-hm.\n\n426\n00:25:51.528 --> 00:25:55.545\n&gt;&gt; Now, I have a function factory that\nany time I need to make some kind of\n\n427\n00:25:55.545 --> 00:25:59.429\nmultiplied based function where\nI'm multiplying by a constant,\n\n428\n00:25:59.429 --> 00:26:03.171\nlike I'm doubling, tripling,\nfour timsing, five timsing,\n\n429\n00:26:03.171 --> 00:26:03.900\nI dont-\n&gt;&gt; [LAUGH]\n\n430\n00:26:03.900 --> 00:26:05.340\n&gt;&gt; The others ones don't have good names.\n\n431\n00:26:05.340 --> 00:26:07.010\nQuadrupling, quintupling.\n\n432\n00:26:07.010 --> 00:26:08.190\n&gt;&gt; There you go.\n\n433\n00:26:08.190 --> 00:26:12.640\n&gt;&gt; I can then create this kind of state,\n\n434\n00:26:12.640 --> 00:26:15.390\nthis encapsulated state with\nthis multiply function.\n\n435\n00:26:16.605 --> 00:26:18.990\nMultipliers being passed in, but\n\n436\n00:26:18.990 --> 00:26:22.930\nthis function's actually what's being\nreturned and assigned to double.\n\n437\n00:26:24.120 --> 00:26:27.420\nThis function remembers the environment\nthat it was created in.\n\n438\n00:26:27.420 --> 00:26:29.290\nThat is called a closure.\n\n439\n00:26:29.290 --> 00:26:33.390\nSo, I still have access to\nstate within this function.\n\n440\n00:26:33.390 --> 00:26:40.400\nAnd just to show you, I'm gonna define\na variable cheese, and it just says Yum.\n\n441\n00:26:41.400 --> 00:26:46.434\nAnd this inner function is\ngoing to console.log(cheese).\n\n442\n00:26:48.070 --> 00:26:51.300\nSo, anytime I run this inner function,\nwhich would be double or\n\n443\n00:26:51.300 --> 00:26:56.950\ntriple in this case, cuz that's what's\nbeing returned, I should see Yum.\n\n444\n00:26:56.950 --> 00:26:59.600\nLet's see if that is in fact the case,\nand it is.\n\n445\n00:26:59.600 --> 00:27:01.680\nIt remembers that state.\n\n446\n00:27:01.680 --> 00:27:04.050\nThat's incredibly powerful cuz now,\n\n447\n00:27:04.050 --> 00:27:09.180\nI can start bundling up pieces of\ninformation and passing the round just by\n\n448\n00:27:09.180 --> 00:27:14.150\nbundling them up in a function that kind\nof has a reference to an environment.\n\n449\n00:27:15.240 --> 00:27:19.300\nAnd I can separate those environments and\nnot kind of have bleeding over.\n\n450\n00:27:19.300 --> 00:27:23.100\nSo, very, very tricky stuff but\nwonderful stuff.\n\n451\n00:27:23.100 --> 00:27:23.805\nThis makes me excited.\n\n452\n00:27:23.805 --> 00:27:27.220\n&gt;&gt; [LAUGH]\n&gt;&gt; Like the first time I saw this,\n\n453\n00:27:27.220 --> 00:27:30.320\nI was like, whoa, that's crazy.\n\n454\n00:27:30.320 --> 00:27:33.510\nSo, don't worry if you're like,\nthat's really weird.\n\n455\n00:27:34.690 --> 00:27:39.720\nIt comes in handy in future\nexperiences that you may have.\n\n456\n00:27:39.720 --> 00:27:43.150\n&gt;&gt; All right, Justin,\nway to put the fun back in functions.\n\n457\n00:27:43.150 --> 00:27:44.540\nWe appreciate that great look.\n\n458\n00:27:44.540 --> 00:27:46.850\nHope everybody out there\nenjoyed watching this one.\n\n459\n00:27:46.850 --> 00:27:48.000\nSigning off for ITProTV.\n\n460\n00:27:48.000 --> 00:27:49.920\nI've been your host, Mike Rodrick.\n\n461\n00:27:49.920 --> 00:27:51.000\n&gt;&gt; And I'm Justin Dennison.\n\n462\n00:27:51.000 --> 00:27:59.891\n&gt;&gt; And we'll see you next time.\n[MUSIC]\n\n463\n00:27:59.891 --> 00:28:02.527\nThank you for watching ITProTV.\n\n",
          "vimeoId": "203161801"
        },
        {
          "description": "In this episode, Justin and Mike look at object-oriented programming in JavaScript. They demonstrate using a factory function to create new objects. They also use a constructor function to add methods to an object.",
          "length": "1642",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-10-1-intro_to_object_oriented_javascript-020317-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-10-1-intro_to_object_oriented_javascript-020317-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-10-1-intro_to_object_oriented_javascript-020317-1-sm.jpg",
          "title": "Intro to Object-Oriented JavaScript",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:05.025\nWelcome to ITPro.tv,\nI'm your host [CROSSTALK]\n\n2\n00:00:05.025 --> 00:00:07.720\n[MUSIC]\n\n3\n00:00:07.720 --> 00:00:12.540\nYou're watching ITPro.tv.\n\n4\n00:00:12.540 --> 00:00:15.772\nHello, welcome to another exciting\nepisode here at ITPro.tv.\n\n5\n00:00:15.772 --> 00:00:20.330\nI'm your host Mike Rodrick and today we're\ndoing our introduction to JavaScript.\n\n6\n00:00:20.330 --> 00:00:23.977\nIn this episode we're gonna be getting\nour introduction to object-oriented\n\n7\n00:00:23.977 --> 00:00:24.560\nJavaScript.\n\n8\n00:00:24.560 --> 00:00:27.771\nThat's right.\n\n9\n00:00:27.771 --> 00:00:29.915\nAnd here to do that for us [INAUDIBLE]\nPlay it from the top, Mike Yep.\n\n10\n00:00:29.915 --> 00:00:31.163\nI don't like [INAUDIBLE] Okay.\n\n11\n00:00:31.163 --> 00:00:38.482\nI'm gonna have to go somewhere and\nget an adjustment or something.\n\n12\n00:00:38.482 --> 00:00:39.920\nYeah.\n\n13\n00:00:39.920 --> 00:00:42.042\nYeah, Melissa loves the chiropractor.\n\n14\n00:00:42.042 --> 00:00:44.642\nNever been.\nShe hasn't found one around here though\n\n15\n00:00:44.642 --> 00:00:45.622\nthat she uses.\n\n16\n00:00:45.622 --> 00:00:47.200\nHaven't been?\n\n17\n00:00:47.200 --> 00:00:51.472\nHaven't been yet.\nStand by.\n\n18\n00:00:51.472 --> 00:00:52.795\nThat exact same one.\nWelcome to ITPROTV.\n\n19\n00:00:52.795 --> 00:00:55.245\n[CROSSTALK]\n\n20\n00:00:55.245 --> 00:00:59.419\n[MUSIC]\n\n21\n00:00:59.419 --> 00:01:01.800\nYou're watching IT Pro TV.\n\n22\n00:01:03.920 --> 00:01:07.900\nHello, welcome to another\nexciting episode here at ITProTV.\n\n23\n00:01:07.900 --> 00:01:09.210\nI'm your host Mike Rodrick, and\n\n24\n00:01:09.210 --> 00:01:12.140\ntoday we're doing our\nIntroduction to JavaScript.\n\n25\n00:01:12.140 --> 00:01:16.920\nAnd in this episode, we're gonna be\nlooking at object oriented JavaScript.\n\n26\n00:01:16.920 --> 00:01:20.820\nAnd here to show us the way, guide us\nthrough this, is Mr. Justin Dennison.\n\n27\n00:01:20.820 --> 00:01:21.680\nWelcome back, Justin.\n\n28\n00:01:21.680 --> 00:01:22.715\nThanks for having me back Mike.\n\n29\n00:01:22.715 --> 00:01:25.110\nYeah, object oriented JavaScript.\n\n30\n00:01:26.880 --> 00:01:28.720\nObject oriented, what does that even mean?\n\n31\n00:01:28.720 --> 00:01:29.600\nIt's crazy.\n\n32\n00:01:30.760 --> 00:01:33.970\nSo let's talk about what an object is,\na little bit of a throwback.\n\n33\n00:01:33.970 --> 00:01:36.863\nAn object is this bundling\nof properties and\n\n34\n00:01:36.863 --> 00:01:40.863\nmethods that are a great abstraction for\na real world thing.\n\n35\n00:01:40.863 --> 00:01:48.080\nA car which we will use,\na van, a bicycle, a house.\n\n36\n00:01:48.080 --> 00:01:50.070\nAll of those things have\nkind of properties,\n\n37\n00:01:50.070 --> 00:01:51.860\nsome of them have more\nbehaviors than others.\n\n38\n00:01:53.150 --> 00:01:58.108\nBut in object oriented JavaScript\nthe goal is to build a data model.\n\n39\n00:01:58.108 --> 00:02:03.826\nSo, how your information is arranged into\nthese little chunks called objects that\n\n40\n00:02:03.826 --> 00:02:09.620\nyou can kinda can pass around and use to\nachieve your program's ultimate goals.\n\n41\n00:02:09.620 --> 00:02:14.390\nSo, let's take a little throwback and\nlook at the object literal and\n\n42\n00:02:14.390 --> 00:02:16.170\ncreation of an object literal.\n\n43\n00:02:16.170 --> 00:02:19.070\nAnd then we're gonna slowly work into\n\n44\n00:02:19.070 --> 00:02:21.750\nhow we would use this in\nan object oriented pattern.\n\n45\n00:02:21.750 --> 00:02:22.360\nNow, keep in mind,\n\n46\n00:02:22.360 --> 00:02:28.360\nthis is just a brief touch on how\nthese objects are used and created.\n\n47\n00:02:28.360 --> 00:02:32.200\nThis is not a super deep\ndive at this point on\n\n48\n00:02:32.200 --> 00:02:34.380\ndesigning an object oriented program.\n\n49\n00:02:34.380 --> 00:02:37.490\nThis is so\nyou'll be familiar with terminology and\n\n50\n00:02:37.490 --> 00:02:41.930\nsome basic patterns that you will see as\nyou're looking at other people's projects,\n\n51\n00:02:41.930 --> 00:02:45.060\nor reading, or even in future episodes.\n\n52\n00:02:45.060 --> 00:02:48.890\nSo let's go ahead and\ndive into our browser in Atom and\n\n53\n00:02:48.890 --> 00:02:51.680\nsee how we're going to accomplish this.\n\n54\n00:02:51.680 --> 00:02:53.244\nI'm gonna open my index.html.\n\n55\n00:02:54.790 --> 00:02:57.400\nMake sure you're in the right one,\ncan't emphasize that enough.\n\n56\n00:02:58.810 --> 00:03:02.320\nSo working, nope, object oriented.\n\n57\n00:03:02.320 --> 00:03:02.960\nThere we go.\n\n58\n00:03:04.140 --> 00:03:06.535\nI should probably shorten the names\nof some of my folders also.\n\n59\n00:03:06.535 --> 00:03:08.960\n[LAUGH] It's hard to read them.\n\n60\n00:03:08.960 --> 00:03:12.230\nSo I have my Chrome open and\nI'm gonna open my folder.\n\n61\n00:03:14.050 --> 00:03:21.173\nSo, Objects, as I said are this\nencapsulated data method and\n\n62\n00:03:21.173 --> 00:03:27.970\nthe best way to see how those work is\nactually just to create one and use it.\n\n63\n00:03:27.970 --> 00:03:32.190\nJust as a quick reminder, and then start\nto refactor to some of these more common\n\n64\n00:03:32.190 --> 00:03:36.650\npatterns that you may see people use when\nbuilding a larger scale application.\n\n65\n00:03:36.650 --> 00:03:40.020\nIt's always good to have context and\nat least some understanding,\n\n66\n00:03:40.020 --> 00:03:43.540\nbecause object oriented\nprogramming is a huge topic.\n\n67\n00:03:43.540 --> 00:03:45.980\nIt's used in a bunch of other languages,\n\n68\n00:03:45.980 --> 00:03:48.810\nand JavaScript is a little\nbit different take.\n\n69\n00:03:48.810 --> 00:03:51.310\nIt doesn't use the standard patterns that\n\n70\n00:03:51.310 --> 00:03:54.540\nyou will see in other what\nare known as class based languages.\n\n71\n00:03:56.070 --> 00:04:00.129\nSo, let's build us an object literal and\na car.\n\n72\n00:04:00.129 --> 00:04:04.952\nWe've seen something like this before,\n\n73\n00:04:04.952 --> 00:04:09.910\nwe're having make, Chevy, and a model,\n\n74\n00:04:09.910 --> 00:04:14.870\nCamaro And we're gonna keep this simple,\n\n75\n00:04:14.870 --> 00:04:19.310\nand let's just go with color yellow.\n\n76\n00:04:20.370 --> 00:04:25.190\nAnd it has a couple of methods,\nlike drive.\n\n77\n00:04:25.190 --> 00:04:31.810\nAnd I'm gonna leave those empty,\nand stop, very simple here.\n\n78\n00:04:31.810 --> 00:04:38.190\nNow, this is all defined in as an object,\nthis will simulate a car.\n\n79\n00:04:39.880 --> 00:04:44.480\nI can access the properties, car.make and\n\n80\n00:04:44.480 --> 00:04:47.580\nlet's see what that actually\nprints out and that says Chevy.\n\n81\n00:04:47.580 --> 00:04:49.505\nOkay, so this is a Chevy.\n\n82\n00:04:49.505 --> 00:04:54.670\nWhat about car.model?\n\n83\n00:04:54.670 --> 00:04:56.040\nWell, it's a Chevy Camaro.\n\n84\n00:04:57.300 --> 00:04:58.860\nAnd I can actually look at the color,\n\n85\n00:04:58.860 --> 00:05:04.320\njust by accessing these using that\nshortcut syntax the dot methods.\n\n86\n00:05:04.320 --> 00:05:06.330\nSo there’s my color.\n\n87\n00:05:07.740 --> 00:05:10.490\nNow, what am I doing if I drive,\n\n88\n00:05:10.490 --> 00:05:15.100\nwe'll fill this in so there’s something\ninteresting actually to see Vroom.\n\n89\n00:05:17.970 --> 00:05:20.530\nNothing happens, but\nI haven't called that yet.\n\n90\n00:05:20.530 --> 00:05:25.020\nSo I'm gonna say car.drive, Vroom.\n\n91\n00:05:26.270 --> 00:05:31.216\nSo I now have an object that has these\nencapsulated methods and data but,\n\n92\n00:05:31.216 --> 00:05:32.038\nI have one.\n\n93\n00:05:32.038 --> 00:05:36.130\nAnd that's where our kind of limitations,\nstart to occur.\n\n94\n00:05:36.130 --> 00:05:38.080\nI have defined an object literal.\n\n95\n00:05:38.080 --> 00:05:40.170\nThat means I have to do this over,\n\n96\n00:05:40.170 --> 00:05:44.410\nand over, and over again in\norder to get a bunch of cars.\n\n97\n00:05:44.410 --> 00:05:47.530\nNow, imagine if I was, for instance,\nbuilding an inventory system for\n\n98\n00:05:47.530 --> 00:05:48.870\nlike a dealership.\n\n99\n00:05:48.870 --> 00:05:54.460\nI need a bunch of these objects to\nrepresent all of the cars in my inventory.\n\n100\n00:05:54.460 --> 00:05:56.220\nWell, this is not really practical.\n\n101\n00:05:56.220 --> 00:05:59.815\nYou're gonna just be paying someone days\nand days and days to type, type, type.\n\n102\n00:05:59.815 --> 00:06:05.310\nAnd they're going to be very\ntempted to copy, paste.\n\n103\n00:06:05.310 --> 00:06:08.300\nAnd copy, paste can be problematic.\n\n104\n00:06:08.300 --> 00:06:11.989\nIn addition to, it's really hard to\nread if you have a great deal of these\n\n105\n00:06:13.150 --> 00:06:14.590\nas you're creating them.\n\n106\n00:06:14.590 --> 00:06:18.020\nAnd just to show you what the copy/paste\nwould look like, if I can just doot,\n\n107\n00:06:18.020 --> 00:06:19.400\ndoot, doot, doot, doot.\n\n108\n00:06:19.400 --> 00:06:23.350\nAnd then I have to change these variable\nnames cuz they can't both exist.\n\n109\n00:06:23.350 --> 00:06:27.380\nAnd then I gotta start scrolling,\nand then man, that's a lot.\n\n110\n00:06:27.380 --> 00:06:30.605\nI just got lost, scared,\nI'm thinking about running away.\n\n111\n00:06:30.605 --> 00:06:32.560\n[LAUGH] Screaming right now.\n\n112\n00:06:32.560 --> 00:06:33.705\nSo we don't wanna do that.\n\n113\n00:06:33.705 --> 00:06:40.310\nWe want some kind of pattern that will\nallow us to kinda spit these out.\n\n114\n00:06:40.310 --> 00:06:42.100\nI need to produce cars.\n\n115\n00:06:43.130 --> 00:06:46.795\nIf I think in the real world,\ncars are produced in a factory.\n\n116\n00:06:46.795 --> 00:06:49.780\nI wonder if I can simulate a factory.\n\n117\n00:06:49.780 --> 00:06:53.530\nSo a factory builds something and\nspits it out.\n\n118\n00:06:53.530 --> 00:06:55.270\nThat sounds a little bit like a function.\n\n119\n00:06:55.270 --> 00:06:56.280\nDoes that sound like a function?\n\n120\n00:06:56.280 --> 00:06:57.870\nIt does.\nI think I remember the term,\n\n121\n00:06:57.870 --> 00:06:58.770\nfunction factory.\n\n122\n00:06:58.770 --> 00:06:59.870\nYeah.\nFrom a previous episode.\n\n123\n00:06:59.870 --> 00:07:03.250\nYeah.\nSo, let's build a car factory.\n\n124\n00:07:03.250 --> 00:07:04.870\nAnd, be very, very careful.\n\n125\n00:07:04.870 --> 00:07:09.519\nI'm doing a very simplistic view of a\nfactory, it's just for thought processes.\n\n126\n00:07:09.519 --> 00:07:14.412\nYou will see a factory pattern that\npeople recommend that is way more complex\n\n127\n00:07:14.412 --> 00:07:19.229\nthan this but we wanna think about this\nas this is a function that is building\n\n128\n00:07:19.229 --> 00:07:23.700\nthese objects for us producing them and\nhanding them over.\n\n129\n00:07:23.700 --> 00:07:27.780\nSo let's use this as our\nmodel of what to do.\n\n130\n00:07:29.200 --> 00:07:33.298\nSo let's create a function and\n\n131\n00:07:33.298 --> 00:07:41.930\nLet's say createCar.\n\n132\n00:07:41.930 --> 00:07:44.710\nGonna be carefull guess\nsome crazy syntax is there.\n\n133\n00:07:44.710 --> 00:07:48.343\nNotice I have a pair of my parenthesis,\n\n134\n00:07:48.343 --> 00:07:54.077\nI have my pair of curly braces,\nand now I want to create my car.\n\n135\n00:07:54.077 --> 00:08:00.573\nWell, if I can just start with an object,\nadd these properties but\n\n136\n00:08:00.573 --> 00:08:05.452\nnotice, I really I need\nthis to be customizable.\n\n137\n00:08:05.452 --> 00:08:09.326\nI don't want to produce just\na single type or make of car or\n\n138\n00:08:09.326 --> 00:08:14.091\njust a single model from that particular\nmake or even a single color but\n\n139\n00:08:14.091 --> 00:08:18.690\nI do want this drive and\nstop to perform very similarly.\n\n140\n00:08:18.690 --> 00:08:22.170\nWe have these shared behaviors and\nproperties that may exist for\n\n141\n00:08:22.170 --> 00:08:25.160\na car, like the number of wheels,\ntypically when I think of car.\n\n142\n00:08:25.160 --> 00:08:29.900\nIt has four wheels,\nthere are exceptions to that rule.\n\n143\n00:08:31.300 --> 00:08:35.850\nBut for the most part,\nthey can stop, drive, turn, okay.\n\n144\n00:08:35.850 --> 00:08:37.280\nBut they're not all the same color,\n\n145\n00:08:37.280 --> 00:08:42.310\nhave the same number of doors, have\nthe same maker, are called the same model.\n\n146\n00:08:42.310 --> 00:08:44.440\nSo we need some customized ability, but\n\n147\n00:08:44.440 --> 00:08:47.250\nwe need to be able to share\nsome of this information.\n\n148\n00:08:47.250 --> 00:08:52.470\nSo a factory would just produce based\non these customized parameters.\n\n149\n00:08:52.470 --> 00:08:57.130\nWhat do I want to customize here, well,\nI want to make the model and the color.\n\n150\n00:08:57.130 --> 00:09:02.010\nSo dysfunction,\nwhich is I'm gonna serve as our factory,\n\n151\n00:09:02.010 --> 00:09:06.800\nit's just gonna pump out new cars\nis gonna take make, model, and\n\n152\n00:09:06.800 --> 00:09:12.180\ncolor as an argument or a series\n\n153\n00:09:12.180 --> 00:09:16.800\nof arguments that I'm gonna use to build\nup new cars each time and spit them out.\n\n154\n00:09:18.430 --> 00:09:20.160\nSo, I'm gonna start\nwith an empty template.\n\n155\n00:09:22.770 --> 00:09:27.169\nAnd I can use var car here because\nthis is in a different scope and\n\n156\n00:09:27.169 --> 00:09:31.320\nI know how to local scoped car\nversus a globally scoped car.\n\n157\n00:09:31.320 --> 00:09:34.970\nAnd let's just move this down\na little bit, so we can see.\n\n158\n00:09:34.970 --> 00:09:39.400\nSo, I'm starting empty and now I'm\ngonna start layering on properties and\n\n159\n00:09:39.400 --> 00:09:40.430\nbehaviors.\n\n160\n00:09:40.430 --> 00:09:43.980\nYou can think of it almost like\nbuilding the perfect sandwich.\n\n161\n00:09:43.980 --> 00:09:46.360\nNow you're just layering on,\nI need a little bit of mayo,\n\n162\n00:09:46.360 --> 00:09:49.560\na little bit of cheese,\na little bit of whatever your meat or\n\n163\n00:09:49.560 --> 00:09:53.650\nnon meat, meat of choice is and\nI'm just layering that on there.\n\n164\n00:09:53.650 --> 00:09:58.140\nNow, sandwiches don't have a lot of\nbehaviors other than get eaten or\n\n165\n00:09:58.140 --> 00:10:00.690\npossibly get thrown away if you drop it or\n\n166\n00:10:00.690 --> 00:10:04.170\nsomething but we can think of\nlayering on properties like that.\n\n167\n00:10:04.170 --> 00:10:06.520\nSo, I'm starting with this this template.\n\n168\n00:10:06.520 --> 00:10:09.360\nAnd I'm going to say for the car,\n\n169\n00:10:09.360 --> 00:10:14.530\nI want the make to be\nthe make that's passed in.\n\n170\n00:10:14.530 --> 00:10:20.530\nNow, I'm actually going to change\nthis name here, to arg make just for\n\n171\n00:10:20.530 --> 00:10:24.220\nthis one,\nto show these are different things.\n\n172\n00:10:26.400 --> 00:10:28.930\nSo, this is the argument for make.\n\n173\n00:10:28.930 --> 00:10:32.770\nSo, the cars make is going to be\nwhatever is passed in for this value.\n\n174\n00:10:33.900 --> 00:10:38.741\nLike that wanna say that car\nmodel is the model passed in and\n\n175\n00:10:38.741 --> 00:10:43.910\nthe car.colour is the color\nthat is passed in.\n\n176\n00:10:43.910 --> 00:10:48.300\nSo, I'm starting to my cheese\nmy mailed mastered on my car.\n\n177\n00:10:50.360 --> 00:10:51.331\nYou get the analogy.\n\n178\n00:10:51.331 --> 00:10:53.263\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm actually building up the car\n\n179\n00:10:53.263 --> 00:10:55.480\nwith these properties that I want.\n\n180\n00:10:55.480 --> 00:10:58.290\nSo, also don't put mayo on your car.\n\n181\n00:10:58.290 --> 00:11:02.090\nI hear that it peels paint,\nor any other sandwich meats.\n\n182\n00:11:02.090 --> 00:11:03.500\nSo be very careful there.\n\n183\n00:11:03.500 --> 00:11:07.430\nBut all of my cars I\nwant to have this drive,\n\n184\n00:11:09.510 --> 00:11:12.590\nfunctionality, I want to share that.\n\n185\n00:11:12.590 --> 00:11:16.430\nAnd notice this is kind of like\na function expression, but\n\n186\n00:11:16.430 --> 00:11:19.330\nI'm attaching it after\nthe fact to an object.\n\n187\n00:11:20.430 --> 00:11:23.850\nThat is perfectly fine, and\nyour editor lets you know, okay,\n\n188\n00:11:23.850 --> 00:11:28.290\nI got you,\ndrive is a function defined on the car.\n\n189\n00:11:28.290 --> 00:11:33.480\nIt would be very similar to making\nthe object literal like this,\n\n190\n00:11:33.480 --> 00:11:37.590\nbut I like to think of it as: I'm\ngoing through the factory process,\n\n191\n00:11:37.590 --> 00:11:40.460\nI'm deciding who's making it,\nwhat they're making,\n\n192\n00:11:40.460 --> 00:11:43.880\nwhat color it's going to be,\nthen I start assembling the pieces.\n\n193\n00:11:45.020 --> 00:11:47.260\nSo, what else do we want to be able to do?\n\n194\n00:11:47.260 --> 00:11:48.800\nWe want to be able to stop.\n\n195\n00:11:48.800 --> 00:11:53.840\nAnd that is also a function, whoa!\n\n196\n00:11:53.840 --> 00:12:01.232\nNow I can fill in these functions,\nI am going to fill in drive with Vroom and\n\n197\n00:12:01.232 --> 00:12:10.250\nconsole.log Scrreeccch,\nit's a real hard stop.\n\n198\n00:12:10.250 --> 00:12:11.770\nIt's an unexpected one.\n\n199\n00:12:11.770 --> 00:12:14.700\nBut, I'm going to say all\nof my cars are like this.\n\n200\n00:12:14.700 --> 00:12:20.860\nAt the very end,\nI'm going to return this car object.\n\n201\n00:12:20.860 --> 00:12:25.110\nI created an empty template,\nthe empty object literal.\n\n202\n00:12:25.110 --> 00:12:27.550\nI added properties and behaviors.\n\n203\n00:12:27.550 --> 00:12:30.770\nAnd then I spit it out,\njust like an assembly line in a factory.\n\n204\n00:12:32.130 --> 00:12:36.410\nNow what this means is, I can create\na bunch of cars without copy paste,\n\n205\n00:12:36.410 --> 00:12:40.160\nI can just call this function and\nit spits out the car.\n\n206\n00:12:40.160 --> 00:12:44.548\nSo let's say, yota\n\n207\n00:12:44.548 --> 00:12:49.623\n= createCar, and the make is Toyota.\n\n208\n00:12:49.623 --> 00:12:53.960\nThe model is, I don't know a 4 Runner.\n\n209\n00:12:55.210 --> 00:12:57.330\nNow we're saying car very generally.\n\n210\n00:12:57.330 --> 00:12:59.980\nI know a 4 Runner is\nnot technically a car.\n\n211\n00:12:59.980 --> 00:13:02.820\nBut that'll lead us into further topics.\n\n212\n00:13:02.820 --> 00:13:05.650\nAnd then the color is white.\n\n213\n00:13:06.760 --> 00:13:08.440\nOne of the funnest colors to keep clean.\n\n214\n00:13:09.600 --> 00:13:16.760\nLikewise, I can say dodge = createCar and\n\n215\n00:13:16.760 --> 00:13:22.870\nwe're gonna make a Dodge Dart and\nSeafoam Green.\n\n216\n00:13:22.870 --> 00:13:25.910\nNow this is one of the older Dodge Dart's.\n\n217\n00:13:28.960 --> 00:13:32.756\nNow if we console dot log the Yota, and\n\n218\n00:13:32.756 --> 00:13:36.862\nthe dodge,\n\n219\n00:13:36.862 --> 00:13:41.480\nwe'll see\n\n220\n00:13:41.480 --> 00:13:47.030\nthat these in fact are very similar\nobjects and if I break them open.\n\n221\n00:13:47.030 --> 00:13:52.010\nI all have a color, make, model,\nand a drive and stop method, but\n\n222\n00:13:52.010 --> 00:13:54.020\nI have different assigned values.\n\n223\n00:13:54.020 --> 00:13:58.310\nThe behaviors are shared,\nbut the values are changed.\n\n224\n00:13:59.650 --> 00:14:02.700\nThe readability of this is way greater.\n\n225\n00:14:02.700 --> 00:14:05.090\nI'm creating a car that is a Dodge,\na Dart and\n\n226\n00:14:05.090 --> 00:14:09.010\na sea foam green,\na Toyota Forerunner that is white.\n\n227\n00:14:09.010 --> 00:14:14.922\nAnd now I can automate this process and\njust, [SOUND], boom I'm good to go.\n\n228\n00:14:14.922 --> 00:14:21.689\nNow one of the downsides of the factory,\nof like building these objects like this,\n\n229\n00:14:21.689 --> 00:14:27.890\nis if I change this drive method for\nthe Toyota, cuz I want to change the car.\n\n230\n00:14:29.330 --> 00:14:31.760\nBut I don't want to change it for\nall of them.\n\n231\n00:14:33.610 --> 00:14:37.200\nThat's okay, but what if I want\nto change it for all of them, but\n\n232\n00:14:37.200 --> 00:14:39.930\nI already have some existing\ncars in production.\n\n233\n00:14:41.420 --> 00:14:50.870\nAnd what I mean is, what if I want this to\ngo Vroom with a bunch of stuff in there.\n\n234\n00:14:52.510 --> 00:14:55.420\nSo, now all of those are shared.\n\n235\n00:14:55.420 --> 00:14:57.860\nBut I have different copies of this drive.\n\n236\n00:14:57.860 --> 00:15:00.540\nAnd to show you what I mean.\n\n237\n00:15:00.540 --> 00:15:03.480\nSee this, let's do this.\n\n238\n00:15:03.480 --> 00:15:07.997\nIf I instead of printing these out,\n\n239\n00:15:07.997 --> 00:15:12.680\nsay yota.drive and dodge.drive.\n\n240\n00:15:12.680 --> 00:15:17.360\nGotta be careful when\nthis dodge starts there.\n\n241\n00:15:18.450 --> 00:15:21.310\nSometimes they're drive.\n\n242\n00:15:21.310 --> 00:15:23.180\nThey both [INAUDIBLE].\n\n243\n00:15:23.180 --> 00:15:29.731\nOkay.\nBut now, if I say yota.drive=function.\n\n244\n00:15:38.874 --> 00:15:39.900\nI have now changed yota.\n\n245\n00:15:39.900 --> 00:15:45.920\nIt's really hard to, I'm using\na short hand kind of slang term for\n\n246\n00:15:45.920 --> 00:15:50.240\nToyota but it sounds like I'm\ntalking about, you have a character.\n\n247\n00:15:50.240 --> 00:15:53.653\n&gt;&gt; Science fiction-\n&gt;&gt; [LAUGH] Yeah.\n\n248\n00:15:53.653 --> 00:15:55.558\n&gt;&gt; Character.\n\n249\n00:15:55.558 --> 00:16:00.199\nSo if I drive a Yota,\ndrive a Dodge, I get that [SOUND].\n\n250\n00:16:00.199 --> 00:16:02.935\nBut now I've redefined this.\n\n251\n00:16:02.935 --> 00:16:05.597\nAnd I've changed the Yoda's drive method.\n\n252\n00:16:05.597 --> 00:16:09.805\nWell this is Handy however,\nthis is not always what I want,\n\n253\n00:16:09.805 --> 00:16:13.350\nI want any changes that I\nhave to work throughout.\n\n254\n00:16:13.350 --> 00:16:17.738\nI could come back and\nchange the factory method.\n\n255\n00:16:17.738 --> 00:16:24.190\nBut in addition to these drive functions,\nthere are copies for each car created.\n\n256\n00:16:24.190 --> 00:16:26.730\nOkay so the behaviors are copied.\n\n257\n00:16:26.730 --> 00:16:28.550\nAnd from a performance standpoint,\n\n258\n00:16:29.980 --> 00:16:32.220\nI may have some memory\nconsumption that I don't want.\n\n259\n00:16:32.220 --> 00:16:35.210\nI would really like to\njust create a single drive\n\n260\n00:16:35.210 --> 00:16:39.030\nfunction that I know I wanna share\nbetween all of these objects.\n\n261\n00:16:39.030 --> 00:16:44.430\nAnd kind of let them just call to that\ncentralized drive and stop function.\n\n262\n00:16:45.480 --> 00:16:50.250\nWell that leads us to kind of our\nfinal pattern you will see and\n\n263\n00:16:50.250 --> 00:16:57.270\nthat is creating the data aspect and then\nattaching to what's called the prototype.\n\n264\n00:16:57.270 --> 00:16:59.890\nI like to think of the prototype\nas like the model.\n\n265\n00:16:59.890 --> 00:17:02.410\nYou ever seen this\nminiature models of like,\n\n266\n00:17:02.410 --> 00:17:04.810\nthis is what I want this\nhouse to look like.\n\n267\n00:17:04.810 --> 00:17:07.388\nAnd then they just build a bunch\nof them in a subdivision.\n\n268\n00:17:07.388 --> 00:17:12.580\nThat model is kind of like a prototype,\nit's the idea, and\n\n269\n00:17:12.580 --> 00:17:16.990\nin JavaScript it will be able to provide\nus with actual implementation details.\n\n270\n00:17:16.990 --> 00:17:19.630\nSo the prototype is either\nthe miniature model, or\n\n271\n00:17:19.630 --> 00:17:22.700\nanother way to think of it is\nlike the cookie cutter, right?\n\n272\n00:17:22.700 --> 00:17:24.119\nThese are like this.\n\n273\n00:17:25.120 --> 00:17:27.000\nBut the behaviour is where\nit gets a little weird.\n\n274\n00:17:27.000 --> 00:17:29.270\nSo let's just see how this works.\n\n275\n00:17:29.270 --> 00:17:33.600\nLet's create car, I'e used factory\nmethods, they are very handy.\n\n276\n00:17:33.600 --> 00:17:37.940\nBut what if I want something\na little bit more flexible,\n\n277\n00:17:37.940 --> 00:17:42.410\na little bit better in performance\nif I have a great deal of objects.\n\n278\n00:17:42.410 --> 00:17:44.430\nBecause let's say I make a million cars.\n\n279\n00:17:44.430 --> 00:17:49.550\nWell, if I have to duplicate those drive\nfunctions over and over and over again,\n\n280\n00:17:49.550 --> 00:17:53.788\nthen that might actually take up some\nmemory that I was not anticipating.\n\n281\n00:17:53.788 --> 00:17:58.170\nIn addition to,\nI already have those working and\n\n282\n00:17:58.170 --> 00:18:01.590\nI wanna tweak something and\nthose are already running in memory.\n\n283\n00:18:01.590 --> 00:18:02.590\nWell, I can't change those.\n\n284\n00:18:02.590 --> 00:18:06.700\nI would have to loop through all one\nmillion cars to update that drive method.\n\n285\n00:18:06.700 --> 00:18:08.120\nI found a bug.\n\n286\n00:18:08.120 --> 00:18:10.470\nBut, if I have a prototype,\nI can tweak the prototype and\n\n287\n00:18:10.470 --> 00:18:13.570\nthen when it calls to that\nchanged function I'll be good.\n\n288\n00:18:13.570 --> 00:18:16.100\nSo it's kind of like a delegation.\n\n289\n00:18:16.100 --> 00:18:17.480\nLike, hey go get me some water.\n\n290\n00:18:17.480 --> 00:18:20.250\nAnd then someone tells someone\nelse to get you some water.\n\n291\n00:18:20.250 --> 00:18:21.426\nAnd then it happens.\n\n292\n00:18:21.426 --> 00:18:25.110\nSo it's kind of hard to wrap your mind\naround, we just wanna get familiar\n\n293\n00:18:25.110 --> 00:18:30.420\nwith these constructs for future endeavors\nwhich I know you're excited about.\n\n294\n00:18:30.420 --> 00:18:31.138\n&gt;&gt; Yes we are.\n\n295\n00:18:31.138 --> 00:18:31.994\n&gt;&gt; Yeah, yeah.\n\n296\n00:18:31.994 --> 00:18:35.624\nSo the third way is, this is a common,\n\n297\n00:18:35.624 --> 00:18:39.708\nit's a kind of a collection\nof patterns and\n\n298\n00:18:39.708 --> 00:18:43.690\nthat's function and I'm gonna say car.\n\n299\n00:18:43.690 --> 00:18:49.600\nNow be very careful, this is simulating\nkind of class based languages.\n\n300\n00:18:49.600 --> 00:18:51.440\nThis is why this exists.\n\n301\n00:18:51.440 --> 00:18:56.900\nNotice this naming is a little odd\nbecause this is going to serve\n\n302\n00:18:56.900 --> 00:19:01.650\nas our cookie cutter,\nour model for creating this.\n\n303\n00:19:01.650 --> 00:19:06.450\nWe're still gonna need make,\nmodel and color.\n\n304\n00:19:07.490 --> 00:19:12.218\nBut for each object I'm gonna\ndescribe as I'm producing\n\n305\n00:19:12.218 --> 00:19:15.970\neach object this object\nis gonna have a make.\n\n306\n00:19:15.970 --> 00:19:18.832\nSo when I produce the next object,\nthis object right here,\n\n307\n00:19:18.832 --> 00:19:21.630\nthink of it as if I'm holding in my hand.\n\n308\n00:19:21.630 --> 00:19:26.690\nIs gonna have a make, and\nit is gonna be assigned to the make.\n\n309\n00:19:26.690 --> 00:19:32.330\nThis object's model is going to be\nassigned to whatever is passed in.\n\n310\n00:19:32.330 --> 00:19:38.970\nAnd then this object's color is going to\nbe equal to the color that is passed in.\n\n311\n00:19:38.970 --> 00:19:40.950\nNow this keyword is kinda weird.\n\n312\n00:19:40.950 --> 00:19:44.670\nSo keep in mind,\nit's very versatile in JavaScript.\n\n313\n00:19:44.670 --> 00:19:48.050\nThis is the first time\nyou may have seen it, but\n\n314\n00:19:48.050 --> 00:19:51.961\nI'm talking about the object\nitself upon creation.\n\n315\n00:19:51.961 --> 00:19:56.600\nSo that's nice,\nlet's see what happens if I just use this.\n\n316\n00:19:56.600 --> 00:19:58.530\nAnd I have to use this in\na little bit different manner.\n\n317\n00:19:59.690 --> 00:20:02.030\nNotice I have this keyword new.\n\n318\n00:20:02.030 --> 00:20:03.620\nWe've seen that a couple of times.\n\n319\n00:20:03.620 --> 00:20:05.700\nWe may have seen it in\ndifferent context but\n\n320\n00:20:05.700 --> 00:20:10.050\nwhat this means is I am creating\na new object using this function.\n\n321\n00:20:10.050 --> 00:20:12.699\nSo it's simulating that factory.\n\n322\n00:20:12.699 --> 00:20:18.132\nSo I'm creating a new object and I'm\nsetting this new object's Properties make,\n\n323\n00:20:18.132 --> 00:20:22.110\nmodel, and color,\nto the values that are passed in.\n\n324\n00:20:22.110 --> 00:20:23.455\nSo, I need a Toyota.\n\n325\n00:20:25.295 --> 00:20:27.546\nAnd let's go with a different Toyota,\nSupra.\n\n326\n00:20:27.546 --> 00:20:29.673\nOld school.\n\n327\n00:20:29.673 --> 00:20:30.619\nBlue.\n\n328\n00:20:30.619 --> 00:20:33.730\nNot quite as old school as the old\nDodge that's sea-foam green,\n\n329\n00:20:33.730 --> 00:20:35.660\nbut old school nonetheless.\n\n330\n00:20:35.660 --> 00:20:39.570\nAnd let's just console.log Yota.\n\n331\n00:20:41.810 --> 00:20:44.340\nNot new tab, don't new tab it.\n\n332\n00:20:45.610 --> 00:20:53.290\nI now have a Car, notice also it\ncan tell what type of object it is.\n\n333\n00:20:53.290 --> 00:20:57.020\nIt is now called a Car, and\nif I comment/uncomment this just to\n\n334\n00:21:00.410 --> 00:21:03.810\nsee, not Yoda because we've\nalready redefined that variable.\n\n335\n00:21:03.810 --> 00:21:07.300\nLet's do the Dodge.\nA Dodge Dart and a Toyota Supra.\n\n336\n00:21:09.000 --> 00:21:11.860\nNotice with the factory method\nit's just called object.\n\n337\n00:21:11.860 --> 00:21:14.890\nWhen I use what is called\nthe constructor method.\n\n338\n00:21:14.890 --> 00:21:17.170\nThis is a constructor function.\n\n339\n00:21:17.170 --> 00:21:19.250\nThis is the plans to make it.\n\n340\n00:21:19.250 --> 00:21:23.030\nIt would then have that name.\n\n341\n00:21:23.030 --> 00:21:26.490\nBut, if we compare these,\nI have a drive and a stop.\n\n342\n00:21:26.490 --> 00:21:28.040\nI don't have a drive and a stop here.\n\n343\n00:21:29.320 --> 00:21:36.400\nNow, there is a way I can\nsay this.drive = function.\n\n344\n00:21:36.400 --> 00:21:42.680\nThis suffers from the same exact\nissues as the factory method above.\n\n345\n00:21:42.680 --> 00:21:45.120\nI will make a copy of drive for\nevery new car.\n\n346\n00:21:45.120 --> 00:21:46.580\nWell, I don't want that.\n\n347\n00:21:47.760 --> 00:21:50.730\nI actually want to create the idea or\n\n348\n00:21:50.730 --> 00:21:56.630\nthe original implementation and\nhave all my cars use that drive method.\n\n349\n00:21:56.630 --> 00:21:59.600\nSo that is going to be\nattached to the prototype.\n\n350\n00:21:59.600 --> 00:22:04.380\nI'm gonna update the original punch out,\nthe cookie cutter.\n\n351\n00:22:04.380 --> 00:22:08.480\nRight, if I have a ginger bread man\ncookie cutter and I wanna give him a hat.\n\n352\n00:22:08.480 --> 00:22:12.150\nI'm gonna bend the top of it up a little\nbit and make it look like he has a hat.\n\n353\n00:22:12.150 --> 00:22:13.950\nSo I'm modifying that a little bit.\n\n354\n00:22:13.950 --> 00:22:20.334\nAnd I can do that by\nsaying Car.prototype.drive\n\n355\n00:22:20.334 --> 00:22:23.816\n= function(){ and\n\n356\n00:22:23.816 --> 00:22:28.753\nconsole.log('Driving').\n\n357\n00:22:28.753 --> 00:22:30.440\nOkay, now that's kind of weird.\n\n358\n00:22:30.440 --> 00:22:36.310\nI'm saying on the car, notice this name is\nequal to this name for the constructor.\n\n359\n00:22:36.310 --> 00:22:41.670\nI'm gonna modify the constructor's\nprototype to add a drive method to it and\n\n360\n00:22:41.670 --> 00:22:43.750\nthat's going to be a function.\n\n361\n00:22:43.750 --> 00:22:48.120\nSo now I'm gonna have a single drive\nmethod that is shared between every car\n\n362\n00:22:48.120 --> 00:22:50.550\nobject that is created.\n\n363\n00:22:50.550 --> 00:22:52.775\nNow, I know some of you may be like,\n\n364\n00:22:52.775 --> 00:22:55.810\na car is kinda hard to think\nabout in this context.\n\n365\n00:22:57.090 --> 00:22:59.540\nMost of these the first time you use them,\n\n366\n00:22:59.540 --> 00:23:02.495\nyou're like that’s kind of hard\nto think about in any context.\n\n367\n00:23:02.495 --> 00:23:04.510\n&gt;&gt; [LAUGH]\n&gt;&gt; So, these are one of those things\n\n368\n00:23:04.510 --> 00:23:07.470\nyou've got to keep poking and\nprodding and playing and breaking.\n\n369\n00:23:09.000 --> 00:23:14.880\nBreak things until you go, yeah that part\nmeans this and this other part means this.\n\n370\n00:23:14.880 --> 00:23:18.971\nSo keep persisting, keep pushing forward,\neventually it'll come to you.\n\n371\n00:23:18.971 --> 00:23:22.774\nI know that when I first\nstarted dealing with this,\n\n372\n00:23:22.774 --> 00:23:27.912\nthere might have been a few tears,\nthere might have been a few tears.\n\n373\n00:23:27.912 --> 00:23:31.440\nI was really discouraged a few times,\nthis doesn't make any sense.\n\n374\n00:23:31.440 --> 00:23:37.604\nBut reading, playing around,\ncreating this actual horrible projects.\n\n375\n00:23:37.604 --> 00:23:40.850\n&gt;&gt; [LAUGH]\n&gt;&gt; To see how things work\n\n376\n00:23:40.850 --> 00:23:43.720\nallow me to slowly develop understanding.\n\n377\n00:23:43.720 --> 00:23:46.770\nSo keep in mind that maybe\nsomething you want to undertake\n\n378\n00:23:46.770 --> 00:23:50.560\nif you really wanna see\nthe underlying implementation details.\n\n379\n00:23:50.560 --> 00:23:51.620\nRead.\n\n380\n00:23:51.620 --> 00:23:56.159\nContinue, watch this video again,\nif you're watching not live.\n\n381\n00:23:56.159 --> 00:23:59.780\nAnd keep pushing forward.\n\n382\n00:23:59.780 --> 00:24:05.339\nSo let's see how that prototype\nchanges this Car function.\n\n383\n00:24:05.339 --> 00:24:09.820\nSo I have this prototype, I've added this,\nI've change nothing else, okay?\n\n384\n00:24:09.820 --> 00:24:16.470\nSo now if I refresh,\nI don't see Car, Drive, right?\n\n385\n00:24:16.470 --> 00:24:21.070\nBut what if I call yota.drive?\n\n386\n00:24:23.865 --> 00:24:27.170\nDriving, and why is that?\n\n387\n00:24:27.170 --> 00:24:31.320\nWell, because this is what's\nspecific to that car instance.\n\n388\n00:24:31.320 --> 00:24:35.680\nDrive is in a shared space,\nit's in this prototype space.\n\n389\n00:24:35.680 --> 00:24:38.267\nNow, you may see this dunder proto.\n\n390\n00:24:38.267 --> 00:24:41.800\nAha, so this dunder proto.\n\n391\n00:24:41.800 --> 00:24:45.972\nNow, what I mean by dunder is\ndouble underscore, the word proto,\n\n392\n00:24:45.972 --> 00:24:48.291\nanother set of double underscores.\n\n393\n00:24:48.291 --> 00:24:53.080\nThis is that shared information for\ncreating the object.\n\n394\n00:24:53.080 --> 00:24:57.814\nSo every car object will share\nthis prototype information\n\n395\n00:24:57.814 --> 00:25:02.071\nbetween each instance,\nbetween each car created.\n\n396\n00:25:02.071 --> 00:25:09.575\nSo I can still call drive and it will\nstill work on each car that I create.\n\n397\n00:25:09.575 --> 00:25:14.307\nAnd just to show you, let's say, Ford,\n\n398\n00:25:17.082 --> 00:25:22.779\nAnd say Ford.\n\n399\n00:25:22.779 --> 00:25:26.170\nYeah, I guess you gotta go classic,\nright, Red.\n\n400\n00:25:26.170 --> 00:25:27.787\n&gt;&gt; As long as you didn't do Fiesta or\nanything else.\n\n401\n00:25:27.787 --> 00:25:31.346\n[LAUGH]\n&gt;&gt; A Ford Festiva.\n\n402\n00:25:31.346 --> 00:25:32.421\n&gt;&gt; Focus.\n\n403\n00:25:32.421 --> 00:25:36.005\n&gt;&gt; I don't,\nthere are some awesome Focuses.\n\n404\n00:25:36.005 --> 00:25:36.810\n&gt;&gt; Yes, there are.\n\n405\n00:25:36.810 --> 00:25:41.859\n&gt;&gt; So notice I have Driving,\nDriving and if I console.log(ford),\n\n406\n00:25:44.728 --> 00:25:47.849\nI have Car, Car.\n\n407\n00:25:47.849 --> 00:25:51.555\nThe actual differences are the only thing\nthat are recorded between those two\n\n408\n00:25:51.555 --> 00:25:52.960\ninstances.\n\n409\n00:25:52.960 --> 00:25:57.705\nThis drive method, even though it\nlooks like it's attached to each one,\n\n410\n00:25:57.705 --> 00:26:00.011\nthe prototype is in a shared space.\n\n411\n00:26:00.011 --> 00:26:02.565\nAnd that is being called to\nthe exact same drive method.\n\n412\n00:26:02.565 --> 00:26:07.100\nSo I get a little bit lighter weight\nobjects with the same amount of behavior.\n\n413\n00:26:07.100 --> 00:26:11.995\nSo those are the three methods for\ncreating objects, the object literal,\n\n414\n00:26:11.995 --> 00:26:15.970\nthe factory function and\nthe constructor with a prototype.\n\n415\n00:26:15.970 --> 00:26:19.866\nNow, the constructor, as I said,\ncannot use the prototype.\n\n416\n00:26:19.866 --> 00:26:22.586\nIt will still have\nthe dander proto method, but\n\n417\n00:26:22.586 --> 00:26:25.870\nit will have copies just like\nwe have within the factory.\n\n418\n00:26:25.870 --> 00:26:29.840\nSo the constructor with the prototype is\nkind of a lighter weight implementation.\n\n419\n00:26:29.840 --> 00:26:35.219\nThis is not an exhaustive treatment\nof every possible pattern for\n\n420\n00:26:35.219 --> 00:26:36.893\ncreating objects.\n\n421\n00:26:36.893 --> 00:26:39.564\nSome people are incredibly\nopinionated about this.\n\n422\n00:26:39.564 --> 00:26:44.247\nI recommend that you poke around,\nsee what makes sense to you and\n\n423\n00:26:44.247 --> 00:26:48.252\ntry to use it in different\ncontexts to see how it works.\n\n424\n00:26:48.252 --> 00:26:49.068\n&gt;&gt; All right, Justin.\n\n425\n00:26:49.068 --> 00:26:50.601\nFantastic explanations and\n\n426\n00:26:50.601 --> 00:26:54.305\ndemonstrations on working with\nobject-oriented JavaScript, and\n\n427\n00:26:54.305 --> 00:26:58.281\nmaybe save us from a few of those tears\nthat you had to go through yourself.\n\n428\n00:26:58.281 --> 00:27:00.824\n[LAUGH]\n&gt;&gt; I hope so.\n\n429\n00:27:00.824 --> 00:27:02.529\n&gt;&gt; All right, well,\nwe appreciate that, Justin.\n\n430\n00:27:02.529 --> 00:27:04.655\nWe hope everybody out there\nenjoyed watching this one.\n\n431\n00:27:04.655 --> 00:27:07.689\nSigning off for ITPRO.TV,\nI've been your host Mike Rodrick.\n\n432\n00:27:07.689 --> 00:27:08.634\n&gt;&gt; And I'm Justin Dennison.\n\n433\n00:27:08.634 --> 00:27:10.169\n&gt;&gt; And we'll see you next time.\n\n434\n00:27:10.169 --> 00:27:17.362\n[MUSIC]\n\n435\n00:27:17.362 --> 00:27:19.355\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "203162167"
        },
        {
          "description": "In this episode, Justin and Mike demonstrate working with dates in JavaScript. They compare and contrast the built-in date functions. They also look at several date methods.",
          "length": "1532",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-11-1-working_with_dates-020617-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-11-1-working_with_dates-020617-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtojavascript/teckskills-introductiontojavascript-11-1-working_with_dates-020617-1-sm.jpg",
          "title": "Working with Dates",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.288\nWelcome to ITProTV.\n\n2\n00:00:01.288 --> 00:00:06.482\n[CROSSTALK]\n\n3\n00:00:06.482 --> 00:00:08.192\n[MUSIC]\n\n4\n00:00:08.192 --> 00:00:12.049\nYou're watching ITProTV.\n\n5\n00:00:12.049 --> 00:00:15.351\n&gt;&gt; Hello, welcome to another\nexciting episode here at ITProTV.\n\n6\n00:00:15.351 --> 00:00:17.290\nI'm your host, Mike Rodrick.\n\n7\n00:00:17.290 --> 00:00:20.090\nToday, we're doing our\nintroduction to JavaScript.\n\n8\n00:00:20.090 --> 00:00:24.460\nAnd in this episode, we're gonna be\nfocusing in and working with dates, right.\n\n9\n00:00:24.460 --> 00:00:26.120\nDoesn't sound like it's very complex, but\n\n10\n00:00:26.120 --> 00:00:29.090\nif you've ever done it before you\nknow sometimes it can trip you up.\n\n11\n00:00:29.090 --> 00:00:33.450\nSo here to make it a little smoother for\nus all is Mr Justin Dennison.\n\n12\n00:00:33.450 --> 00:00:34.390\nWelcome back Justin.\n\n13\n00:00:34.390 --> 00:00:35.890\n&gt;&gt; Thanks for having me back, Mike.\n\n14\n00:00:35.890 --> 00:00:40.830\nJavaScript dates, you're like,\nwell dates, they're just month,\n\n15\n00:00:40.830 --> 00:00:43.080\nyear, day, they're that easy.\n\n16\n00:00:43.080 --> 00:00:45.740\nBut except, they're not.\n\n17\n00:00:45.740 --> 00:00:49.350\nJavaScript dates are a little\nprecarious at times,\n\n18\n00:00:49.350 --> 00:00:51.950\na little unintuitive if you will.\n\n19\n00:00:51.950 --> 00:00:55.740\nSo I think it's important to see some\nof these subtle differences, especially\n\n20\n00:00:55.740 --> 00:01:01.380\nthe way JavaScript the interpreters within\nbrowsers typically handle those dates.\n\n21\n00:01:01.380 --> 00:01:03.220\nSo, what is a date?\n\n22\n00:01:03.220 --> 00:01:04.600\nHow are they represented?\n\n23\n00:01:04.600 --> 00:01:05.960\nAnd here's the weirdest thing,\n\n24\n00:01:05.960 --> 00:01:10.020\nI'm getting ready to say a mouthful\nto you, just hold on tight.\n\n25\n00:01:10.020 --> 00:01:15.070\nA JavaScript date is represented\nas the number of milliseconds\n\n26\n00:01:15.070 --> 00:01:19.748\nsince January 1st,\n1970 at 12:00 AM UTC time.\n\n27\n00:01:19.748 --> 00:01:20.597\n&gt;&gt; Wait, say that again.\n\n28\n00:01:20.597 --> 00:01:21.292\n&gt;&gt; [SOUND] Yeah, all right.\n\n29\n00:01:21.292 --> 00:01:21.847\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n30\n00:01:21.847 --> 00:01:25.210\none more time because I just\ngot out of breath saying it.\n\n31\n00:01:25.210 --> 00:01:28.980\nIt is the number of milliseconds\nsince January first 1970,\n\n32\n00:01:28.980 --> 00:01:34.340\nat zero z, or 12 AM UTC time.\n\n33\n00:01:35.440 --> 00:01:36.820\nThat is crazy.\n\n34\n00:01:36.820 --> 00:01:39.980\nNow.\nthat's not how we think of time.\n\n35\n00:01:39.980 --> 00:01:45.090\nToday is January 1st, or August 6th.\n\n36\n00:01:45.090 --> 00:01:52.100\nWell, dates they get weird, because all\nof those are based on a reference time.\n\n37\n00:01:52.100 --> 00:01:57.920\nAnd we had to pick a reference time\nin order to get reliable comparisons.\n\n38\n00:01:57.920 --> 00:01:59.760\nNow, that's where those\nmilliseconds really come in.\n\n39\n00:02:00.840 --> 00:02:06.200\nBut at the same time, it makes it hard for\nindividuals to think about,\n\n40\n00:02:06.200 --> 00:02:11.140\nlike I don't think of well, it's been\nexactly 3600 milliseconds since yesterday.\n\n41\n00:02:11.140 --> 00:02:15.450\nAnd, if you think that way,\nthen this is gonna be spectacular.\n\n42\n00:02:15.450 --> 00:02:20.510\nBut if you don't, there are some helper\nmethods, provided by JavaScript.\n\n43\n00:02:20.510 --> 00:02:22.720\nBut they're not so well named.\n\n44\n00:02:22.720 --> 00:02:27.720\nBut before we worry about all those\nmanipulations of milliseconds since\n\n45\n00:02:27.720 --> 00:02:31.105\nJanuary 1st 1970, also know as\nthe epoch as I've heard it called.\n\n46\n00:02:31.105 --> 00:02:32.950\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't know if that's ubiquitous\n\n47\n00:02:32.950 --> 00:02:37.690\nterminology but a lot of dates\nare represented as that way.\n\n48\n00:02:37.690 --> 00:02:40.640\nBut you have to be careful, in some\nother languages I know that they'll\n\n49\n00:02:40.640 --> 00:02:45.000\nuse seconds instead of milliseconds so\nyou have powers of ten differences.\n\n50\n00:02:46.530 --> 00:02:50.700\nSo but that's not the case in Java Script,\nJava Script is no seconds all the way.\n\n51\n00:02:50.700 --> 00:02:52.570\nWell, why would I use dates?\n\n52\n00:02:52.570 --> 00:02:54.540\nWell, if I sign up for\n\n53\n00:02:54.540 --> 00:02:58.680\nany type of user accounts,\nthere should typically log by dates.\n\n54\n00:02:58.680 --> 00:03:01.780\nIf I order something online,\nI'm going to have a date that is order,\n\n55\n00:03:01.780 --> 00:03:03.300\nthe date that is ship.\n\n56\n00:03:03.300 --> 00:03:09.140\nAnd just keeping that in tow is really\neasy with dates if I know how to use them.\n\n57\n00:03:09.140 --> 00:03:14.300\nSo I think it's best if we drill down,\nsee they're created, used and manipulated.\n\n58\n00:03:14.300 --> 00:03:19.170\nIn that way, we can relieve\nthe confusion that can occur with dates.\n\n59\n00:03:19.170 --> 00:03:22.420\nSo let's go ahead and\nhop into the browser here and\n\n60\n00:03:22.420 --> 00:03:27.355\nget started with our project as always\nwe're gonna open that index html file.\n\n61\n00:03:27.355 --> 00:03:34.820\nThat is best use for\nentry into the app.js.\n\n62\n00:03:34.820 --> 00:03:36.390\nMake sure you're opining the correct one.\n\n63\n00:03:36.390 --> 00:03:39.080\nAnd then I'm gonna open\nthe chrome deft tools.\n\n64\n00:03:39.080 --> 00:03:41.290\nAnd remember I used\na keyboard shortcut there.\n\n65\n00:03:41.290 --> 00:03:44.580\nWe can go to more tools, developer tools.\n\n66\n00:03:44.580 --> 00:03:49.130\nAnd I just have my console open so\nI can print, play around.\n\n67\n00:03:49.130 --> 00:03:52.220\nI'm going to hop in to my text editor and\ndo the exact same thing.\n\n68\n00:03:52.220 --> 00:03:53.020\nAdd project folder.\n\n69\n00:03:54.760 --> 00:03:59.300\nAnd we need to play\naround with some dates.\n\n70\n00:03:59.300 --> 00:04:00.680\nSo I have dates here.\n\n71\n00:04:00.680 --> 00:04:02.120\nMy ab.js is empty.\n\n72\n00:04:03.280 --> 00:04:05.370\nBut it will not be very shortly.\n\n73\n00:04:05.370 --> 00:04:07.510\nSo, how do I make a date?\n\n74\n00:04:09.820 --> 00:04:13.430\nWell, luckily,\nit’s a little easier then sometimes those\n\n75\n00:04:13.430 --> 00:04:14.620\ninterpersonal-\n&gt;&gt; [LAUGH]\n\n76\n00:04:14.620 --> 00:04:15.170\n&gt;&gt; Asking for\n\n77\n00:04:15.170 --> 00:04:19.640\ndates, but\nit is not always the easiest thing.\n\n78\n00:04:19.640 --> 00:04:24.320\nSo job script comes with\na built in date function.\n\n79\n00:04:24.320 --> 00:04:26.300\nWe have to be really careful.\n\n80\n00:04:26.300 --> 00:04:28.010\nI can do two one of two things.\n\n81\n00:04:28.010 --> 00:04:34.540\nI can say var date = Date(); and\n\n82\n00:04:34.540 --> 00:04:38.140\nnotice that just a function\nthat's called with no parameters,\n\n83\n00:04:38.140 --> 00:04:45.550\nthere's nothing in there or\nI can say anotherDate = new Date().\n\n84\n00:04:45.550 --> 00:04:48.480\nAnd we just want to compare these two.\n\n85\n00:04:48.480 --> 00:04:50.987\nSo, I'm gonna say date, and.\n\n86\n00:04:52.957 --> 00:04:55.070\nThat is not how you spell another.\n\n87\n00:04:56.080 --> 00:04:56.750\nAnother date.\n\n88\n00:04:56.750 --> 00:04:57.760\nLet's go and see.\n\n89\n00:04:58.880 --> 00:05:03.600\nAnd notice both of these\nare listed as black text.\n\n90\n00:05:03.600 --> 00:05:05.910\nThey don't look any different.\n\n91\n00:05:05.910 --> 00:05:09.040\nI'm going to stay in\nthe Java Script console here and\n\n92\n00:05:09.040 --> 00:05:14.000\nshow you that in fact, if I'm not\nprinting these out they are different.\n\n93\n00:05:14.000 --> 00:05:16.370\nI have the string representation.\n\n94\n00:05:16.370 --> 00:05:19.920\nIf I say new date or date,\nMonday February 6th,\n\n95\n00:05:19.920 --> 00:05:25.510\n2017 at 9:48:22 GMT,\nwhich is east coast time.\n\n96\n00:05:26.580 --> 00:05:31.180\nBut, what happens if I do the exact\nsame thing inside of the console?\n\n97\n00:05:31.180 --> 00:05:34.080\nNotice that this shows as a string.\n\n98\n00:05:34.080 --> 00:05:35.540\nThat's that date object.\n\n99\n00:05:35.540 --> 00:05:36.540\nJust date=Date().\n\n100\n00:05:36.540 --> 00:05:39.460\nThis is a string representation.\n\n101\n00:05:39.460 --> 00:05:42.740\nWhen I console.log,\nthat makes it the black text.\n\n102\n00:05:42.740 --> 00:05:44.670\nBut if I say new date.\n\n103\n00:05:47.340 --> 00:05:49.120\nThat's kinda weird.\n\n104\n00:05:49.120 --> 00:05:51.260\nIt's not represented as that string.\n\n105\n00:05:52.580 --> 00:05:54.530\nWell what is this?\n\n106\n00:05:54.530 --> 00:05:59.400\nIn fact when I say date I get the string\nrepresentation of the current date.\n\n107\n00:05:59.400 --> 00:06:01.470\nIt is no longer a date object.\n\n108\n00:06:01.470 --> 00:06:06.592\nWhen I say new Date, I get\na manipulatable, whew, that's a mouthful.\n\n109\n00:06:06.592 --> 00:06:09.215\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] A date that I can manipulate\n\n110\n00:06:09.215 --> 00:06:11.300\nusing methods with on the date.\n\n111\n00:06:12.840 --> 00:06:17.430\nSo be very careful about\nthose nuance differences and\n\n112\n00:06:17.430 --> 00:06:20.460\nthose can cause some issues because we\nhave two different types effectively.\n\n113\n00:06:20.460 --> 00:06:23.410\nWe have a string representing\nthe actual date or\n\n114\n00:06:23.410 --> 00:06:28.800\nwe think of this like a calendar date or\nI have a date object which is\n\n115\n00:06:28.800 --> 00:06:31.750\nbehind the scenes those number of\nmilliseconds since January 1st.\n\n116\n00:06:33.040 --> 00:06:38.950\nNow, I recommend taking a look at\nthe documentation provided by MDN or\n\n117\n00:06:38.950 --> 00:06:40.120\nother various resources.\n\n118\n00:06:40.120 --> 00:06:41.030\nI like MDN.\n\n119\n00:06:42.580 --> 00:06:46.530\nSo let's go and\nhop into there and take a look.\n\n120\n00:06:46.530 --> 00:06:49.210\nThere's the data JavaScript object.\n\n121\n00:06:49.210 --> 00:06:52.660\nAnd notice I have several\nways to create dates.\n\n122\n00:06:54.370 --> 00:06:56.210\nI have a new date, which we just saw,\n\n123\n00:06:56.210 --> 00:07:00.270\nand that will give you the right now,\nwhat happened right now.\n\n124\n00:07:00.270 --> 00:07:01.650\nI created a new date, it's right now.\n\n125\n00:07:02.760 --> 00:07:06.230\nIf we go back to\nthe JavaScript console and\n\n126\n00:07:06.230 --> 00:07:11.990\nI type new date again,\nyou will notice that this is changing.\n\n127\n00:07:11.990 --> 00:07:13.000\nWhen I type new date,\n\n128\n00:07:13.000 --> 00:07:16.850\nI'm getting a date that is\nrepresentative of at this very moment.\n\n129\n00:07:18.290 --> 00:07:19.870\nAgain, at that very moment.\n\n130\n00:07:19.870 --> 00:07:21.360\nIt's already in the past.\n\n131\n00:07:21.360 --> 00:07:23.200\nSo be very careful about that.\n\n132\n00:07:23.200 --> 00:07:25.170\nYou want right now.\n\n133\n00:07:25.170 --> 00:07:25.950\nYou just call a new data.\n\n134\n00:07:27.590 --> 00:07:29.970\nHowever, if we look in the documentation,\n\n135\n00:07:29.970 --> 00:07:32.660\nthere are several other\nways to create dates.\n\n136\n00:07:34.470 --> 00:07:39.550\nI'm going to skip over this\nnew date value one because\n\n137\n00:07:39.550 --> 00:07:43.974\nif you know the number of milliseconds\nthat has occurred since January 1st, 1970.\n\n138\n00:07:45.195 --> 00:07:46.943\nThen you can use that, more power to you.\n\n139\n00:07:46.943 --> 00:07:49.006\n&gt;&gt; Wait your watch\ndoesn't have that option?\n\n140\n00:07:49.006 --> 00:07:53.311\n&gt;&gt; I am at a loss for words.\n\n141\n00:07:53.311 --> 00:07:57.059\n&gt;&gt; [LAUGH]\n&gt;&gt; Your watch has that option,\n\n142\n00:07:57.059 --> 00:07:57.898\nthat's great.\n\n143\n00:07:57.898 --> 00:08:02.773\nUse that, but I don't think that's\nvery friendly to individuals And\n\n144\n00:08:02.773 --> 00:08:06.750\nit's not a great way to\nconceptually think about dates.\n\n145\n00:08:07.810 --> 00:08:12.120\nBut we are gonna use this date string,\nand then the year,\n\n146\n00:08:12.120 --> 00:08:15.300\nmonth, date, hour, minute,\nsecond, so on and so forth.\n\n147\n00:08:16.580 --> 00:08:18.630\nSo, how do we use that?\n\n148\n00:08:18.630 --> 00:08:26.290\nCurrently, I'm just going to comment this\nout and let's get another date in here.\n\n149\n00:08:26.290 --> 00:08:28.960\nSo, I need a new date.\n\n150\n00:08:28.960 --> 00:08:33.160\nAnd we can provide a string\nrepresentation of these dates.\n\n151\n00:08:33.160 --> 00:08:35.991\nNow just to make sure I don't mess up,\n\n152\n00:08:35.991 --> 00:08:40.949\nI have some pre-formatted ones here,\nso we can talk about these.\n\n153\n00:08:44.022 --> 00:08:47.830\nSo here we go, take off the CapsLocks.\n\n154\n00:08:47.830 --> 00:08:52.070\nAnd notice that that is month, day,\n\n155\n00:08:52.070 --> 00:08:56.360\nyear, hour, minute, seconds,\nthat is the representation.\n\n156\n00:08:56.360 --> 00:09:00.410\nLet's see what that\nactually prints out here.\n\n157\n00:09:00.410 --> 00:09:04.400\nAnd sadly, dates have this weird behavior\nwhere when you print them out and\n\n158\n00:09:04.400 --> 00:09:12.950\nmanipulate, they tend to want to go to\nstrings within the console so be careful.\n\n159\n00:09:14.570 --> 00:09:18.160\nFriday, January 21st,\n2011 well, that's great.\n\n160\n00:09:18.160 --> 00:09:23.800\nNow, anytime we're using this within\nthe console from our ab.js but\n\n161\n00:09:23.800 --> 00:09:27.650\nit will be available to use, so you may\nsee me play around with that a little bit.\n\n162\n00:09:27.650 --> 00:09:31.400\nJust because dates are a little\nfinicky in how they're represented.\n\n163\n00:09:32.890 --> 00:09:37.870\nNow, I have to be really\ncareful about these strings.\n\n164\n00:09:37.870 --> 00:09:40.640\nThese strings only available, or\n\n165\n00:09:40.640 --> 00:09:46.320\nexcuse me, are only consistent\nif given certain patterns.\n\n166\n00:09:46.320 --> 00:09:49.270\nThis pattern is acceptable,\nanother pattern is.\n\n167\n00:09:52.170 --> 00:09:57.080\nI really should pick better variable\nnames for these demonstrations.\n\n168\n00:09:57.080 --> 00:10:02.340\nAnother pattern is year as four digits,\nmonth\n\n169\n00:10:06.020 --> 00:10:08.390\nand then I have day and then a T.\n\n170\n00:10:09.510 --> 00:10:14.900\nAnd then 05 so the fit hour 24, 13.\n\n171\n00:10:14.900 --> 00:10:20.400\nNotice, it's very similar to this\none except I have year month day.\n\n172\n00:10:20.400 --> 00:10:22.830\nT hour, minutes, seconds.\n\n173\n00:10:22.830 --> 00:10:25.370\nAnd that's an International standard for\ndates.\n\n174\n00:10:25.370 --> 00:10:28.450\nI think it's iso 8601.\n\n175\n00:10:28.450 --> 00:10:30.480\nCould be careful,\nI wouldn't quote me on that.\n\n176\n00:10:30.480 --> 00:10:34.480\nBut if you wanna look up iso date\nstandards, this is one of those.\n\n177\n00:10:35.730 --> 00:10:38.970\nSo, these two formats are very\nconsistent within browsers.\n\n178\n00:10:40.160 --> 00:10:47.779\nAnd just to show you, We should get this\nexact representation April 1st 2004 and\n\n179\n00:10:47.779 --> 00:10:53.010\n00:24, well that hour looks\na little different, you may have\n\n180\n00:10:53.010 --> 00:10:59.067\nnoticed these other ones and that's\nbecause this is represented as UTC time,\n\n181\n00:10:59.067 --> 00:11:03.960\nat the longitude zero, so\nit all sets for our basic local time.\n\n182\n00:11:05.040 --> 00:11:09.210\nSo notice I put 5,\nwell it's offset by minus 5,\n\n183\n00:11:09.210 --> 00:11:11.230\nbecause we are in Eastern standard time.\n\n184\n00:11:12.440 --> 00:11:17.530\nSo be very careful about that, because\nthose can cause you to be from I'm gonna\n\n185\n00:11:17.530 --> 00:11:23.090\nship it on this day, but\nyou're handling it for time zones.\n\n186\n00:11:23.090 --> 00:11:26.240\nIt may be off by a day as\nthe date representation.\n\n187\n00:11:27.650 --> 00:11:30.920\nNow, I say these formats\nare very important and\n\n188\n00:11:30.920 --> 00:11:37.400\nthat's because in Chrome I can actually\nget away with not being so rigid.\n\n189\n00:11:37.400 --> 00:11:41.540\nBut I've tried this in\nseveral other browsers and\n\n190\n00:11:41.540 --> 00:11:45.280\nmost of that time they just say no.\n\n191\n00:11:45.280 --> 00:11:52.200\n&gt;&gt; So I can say something like this,\n3-23-2001.\n\n192\n00:11:52.200 --> 00:11:58.060\nIt works in Chrome to its best, but\nnotice it makes some assumptions.\n\n193\n00:11:58.060 --> 00:12:01.840\nIt's assuming that I want\nzeros everywhere else.\n\n194\n00:12:01.840 --> 00:12:05.560\nI've tried this in Safari and Firefox.\n\n195\n00:12:05.560 --> 00:12:09.759\nSafari actually says this is invalid,\ndon't do this.\n\n196\n00:12:09.759 --> 00:12:14.310\nSo please do look at the documentation,\nobserve what those patterns are.\n\n197\n00:12:14.310 --> 00:12:16.730\nThese are the two most common ones.\n\n198\n00:12:16.730 --> 00:12:20.540\nBecause if you don't, you may get\ninconsistent experiences for your user,\n\n199\n00:12:20.540 --> 00:12:21.360\nand that's bad.\n\n200\n00:12:21.360 --> 00:12:22.960\nYou don't want that.\n\n201\n00:12:22.960 --> 00:12:25.930\nAnd you don't want inconsistent\nexperiences as a developer,\n\n202\n00:12:25.930 --> 00:12:32.270\nbecause it's really hard to go, well this\nshould work, but it's an invalid date.\n\n203\n00:12:32.270 --> 00:12:35.540\nAnd then it doesn't work and\nnow I'm chasing bugs, and\n\n204\n00:12:35.540 --> 00:12:37.430\nyou don't want to be doing that.\n\n205\n00:12:37.430 --> 00:12:41.720\nSo I can use these format strings but\nin addition to that I can make,\n\n206\n00:12:43.180 --> 00:12:47.540\nI'm choosing really original\nnames now Mike, date2.\n\n207\n00:12:47.540 --> 00:12:53.248\nI can also go year as a number,\n\n208\n00:12:53.248 --> 00:12:59.140\nmonth, and day.\n\n209\n00:12:59.140 --> 00:13:05.070\nAnd I can leave it at that,\nthis will actually work, as we can see.\n\n210\n00:13:07.970 --> 00:13:13.570\nBut notice that's kind of weird, O4.\n\n211\n00:13:13.570 --> 00:13:19.040\nLast time I checked O4 was April well,\n\n212\n00:13:19.040 --> 00:13:22.160\nif we hop into the documentation,\nwhy is that the case?\n\n213\n00:13:23.320 --> 00:13:24.880\nScrolling, scrolling, scrolling.\n\n214\n00:13:26.140 --> 00:13:29.130\nInteger value representing, nope.\n\n215\n00:13:29.130 --> 00:13:33.620\nInteger value representing the month,\nbeginning with zero for January to 11 for\n\n216\n00:13:33.620 --> 00:13:34.720\nDecember.\n\n217\n00:13:34.720 --> 00:13:37.780\nTricky, tricky, tricky JavaScript dates.\n\n218\n00:13:37.780 --> 00:13:38.530\nGot to be careful.\n\n219\n00:13:38.530 --> 00:13:41.730\nSo you actually have to take\nthe month number, subtract one.\n\n220\n00:13:41.730 --> 00:13:42.840\n&gt;&gt; That's just not nice.\n\n221\n00:13:42.840 --> 00:13:44.880\n&gt;&gt; Yeah, that's not nice at all.\n\n222\n00:13:44.880 --> 00:13:49.990\nAnd yeah, I can't tell you how many times\nI've just looked at my computer and\n\n223\n00:13:49.990 --> 00:13:56.010\nwent I don't understand why you're not\nworking because of date manipulation.\n\n224\n00:13:56.010 --> 00:13:58.530\nIn addition to, while we're here,\nlet's take a look at the year.\n\n225\n00:13:58.530 --> 00:13:59.920\nLet's zoom in a little.\n\n226\n00:13:59.920 --> 00:14:00.800\nWhoa.\n\n227\n00:14:00.800 --> 00:14:01.820\nAnd a little crazy there.\n\n228\n00:14:03.430 --> 00:14:06.690\nI have to be careful,\nI can't give a two digit year.\n\n229\n00:14:06.690 --> 00:14:10.990\nBut if I used two digit years,\nthey mapped from 1900 and 1999.\n\n230\n00:14:10.990 --> 00:14:13.530\nSo if I say 00 that's 1900 not 2000.\n\n231\n00:14:13.530 --> 00:14:16.530\nSo be very careful of that.\n\n232\n00:14:17.540 --> 00:14:21.210\nI recommend personally to\nalways use a four digit year.\n\n233\n00:14:21.210 --> 00:14:22.310\nJust for clarity.\n\n234\n00:14:22.310 --> 00:14:23.528\nIt's two more numbers to type.\n\n235\n00:14:23.528 --> 00:14:25.960\nIt'll be fine.\n\n236\n00:14:25.960 --> 00:14:29.780\n&gt;&gt; And a lot of us out there might\nremember the gotcha that we got from not\n\n237\n00:14:29.780 --> 00:14:31.820\ndoing that prior to 2000.\n\n238\n00:14:31.820 --> 00:14:36.980\n&gt;&gt; Yeah, if I remember correctly, there\nwas a little bit of a panic, shenanigans.\n\n239\n00:14:36.980 --> 00:14:38.180\nYou've got to be crazy.\n\n240\n00:14:38.180 --> 00:14:39.940\n&gt;&gt; A lot of code that had to be rewritten.\n\n241\n00:14:39.940 --> 00:14:40.440\n&gt;&gt; Yeah.\n\n242\n00:14:40.440 --> 00:14:42.630\n&gt;&gt; And we were like, man we didn't think.\n\n243\n00:14:42.630 --> 00:14:45.020\nZero, zero is 1900 not 2000.\n\n244\n00:14:45.020 --> 00:14:47.520\nSo be very careful with that.\n\n245\n00:14:47.520 --> 00:14:50.460\nJust use four digit years,\njust for clarity.\n\n246\n00:14:50.460 --> 00:14:56.200\nNow along with this date object,\nI could have another one, date three.\n\n247\n00:14:56.200 --> 00:14:57.900\nThis is also highly original.\n\n248\n00:14:59.020 --> 00:15:00.360\nBut, I can add an hour.\n\n249\n00:15:01.360 --> 00:15:05.090\nA minute and a level of seconds,\n\n250\n00:15:06.370 --> 00:15:13.660\nas well as a number of milliseconds, just\nfor that ultra-precision when I need it.\n\n251\n00:15:13.660 --> 00:15:16.793\nAnd if I go here and print out date3,\n\n252\n00:15:19.062 --> 00:15:23.553\nI can see that I have this\nultra precise date, but\n\n253\n00:15:23.553 --> 00:15:29.596\nnow it's just represented to me\nin a semi-human readable form.\n\n254\n00:15:29.596 --> 00:15:32.110\nAgain, I still have May,\neven though I write 04,\n\n255\n00:15:32.110 --> 00:15:35.590\nand that's because months start at zero.\n\n256\n00:15:35.590 --> 00:15:39.340\nSo, that's some tricky business there,\nbut.\n\n257\n00:15:39.340 --> 00:15:42.820\nLuckily, those are pretty\neasy to reason about but\n\n258\n00:15:42.820 --> 00:15:44.210\ndo take a look at the documentation.\n\n259\n00:15:44.210 --> 00:15:47.180\nSo, I have these dates available to me.\n\n260\n00:15:48.600 --> 00:15:50.010\nHow can I manipulate these dates?\n\n261\n00:15:51.770 --> 00:15:55.965\nWell, don't mess up some syntax there.\n\n262\n00:15:55.965 --> 00:15:58.964\nThere's several methods of\ndates that allow me to.\n\n263\n00:15:58.964 --> 00:16:03.580\nGrab those milliseconds, grab the date,\ngrab the day, the month,\n\n264\n00:16:03.580 --> 00:16:07.030\nthe year, and\nto set some of those as well.\n\n265\n00:16:07.030 --> 00:16:11.940\nNow I'm not gonna review all of those, but\nsome common ones that you may want to use\n\n266\n00:16:13.440 --> 00:16:17.690\nI will highlight,\nas well as some possible gotchas.\n\n267\n00:16:17.690 --> 00:16:20.810\nSo manipulating dates and\n\n268\n00:16:20.810 --> 00:16:24.860\nI'm just gonna use this date\nobject from up here, so date.\n\n269\n00:16:26.370 --> 00:16:33.350\nSo there can be a, I can say date.getTime.\n\n270\n00:16:33.350 --> 00:16:37.739\nNow, the reason I'm gonna show you\nthis is this is a common got you,\n\n271\n00:16:37.739 --> 00:16:42.759\nyou're like, it's gonna give\nme like 5:00 o'clock or 5:30.\n\n272\n00:16:42.759 --> 00:16:47.729\nLet's see what, no it doesn't it actually\ngives you the number of milliseconds since\n\n273\n00:16:47.729 --> 00:16:49.374\n1970, January first.\n\n274\n00:16:49.374 --> 00:16:50.177\n&gt;&gt; [LAUGH].\n\n275\n00:16:50.177 --> 00:16:53.110\n&gt;&gt; This is the one thing\nthat's weird about JavaScript.\n\n276\n00:16:53.110 --> 00:16:57.482\nI think some of the methods are,\nI think they were named appropriately for\n\n277\n00:16:57.482 --> 00:16:58.760\nthe original usage.\n\n278\n00:16:58.760 --> 00:17:04.370\nWhen when I look at them I go, will that's\nnot what I was expecting to happen.\n\n279\n00:17:04.370 --> 00:17:07.655\nWhen I think of get time,\nyou're gonna give me 5:30,\n\n280\n00:17:07.655 --> 00:17:11.850\n5:31 PM Eastern Standard Time or\nsomething of that nature.\n\n281\n00:17:11.850 --> 00:17:17.540\nWell, embedded within this number of\nmilliseconds that's technically there,\n\n282\n00:17:17.540 --> 00:17:20.620\nbecause it's counting from\nthat reference point but\n\n283\n00:17:20.620 --> 00:17:24.430\nit doesn't make any sense to me,\nit probably doesn't make any sense to you.\n\n284\n00:17:24.430 --> 00:17:27.120\nIf it does, congratulations that's great.\n\n285\n00:17:27.120 --> 00:17:32.610\nBut just a common gotcha, this isn't\nreturning what I anticipated for it to do.\n\n286\n00:17:32.610 --> 00:17:38.140\nLikewise, I can actually set the time\ndoing that exact same thing.\n\n287\n00:17:41.200 --> 00:17:46.091\nAnd actually if I password\nout log that returns 0,\n\n288\n00:17:46.091 --> 00:17:51.437\nwhich is kind of weird because\nthe return value of that,\n\n289\n00:17:51.437 --> 00:17:55.620\nthe return value is what they spits out.\n\n290\n00:17:55.620 --> 00:18:01.412\nThe return method attached to the date but\nthen notice it modifies the date to,\n\n291\n00:18:01.412 --> 00:18:05.625\nwell this says, December 31st,\nWednesday 19, but\n\n292\n00:18:05.625 --> 00:18:09.517\nit's offset by five hours\nbecause of our locality.\n\n293\n00:18:09.517 --> 00:18:13.456\nRemember, this is January 1st,\n1970 at zero UTC,\n\n294\n00:18:13.456 --> 00:18:16.010\nwhich is offset by five hours for us.\n\n295\n00:18:17.320 --> 00:18:18.790\nWell, I wanna remove that set time.\n\n296\n00:18:20.850 --> 00:18:25.890\nI actually want to comment out that get\ntime, because that's kind of crazy for me.\n\n297\n00:18:25.890 --> 00:18:29.300\nAnother common got you is, get date.\n\n298\n00:18:33.610 --> 00:18:38.756\nSo if I say date, getdate, 21 when\n\n299\n00:18:38.756 --> 00:18:43.736\nI think of date, I'm thinking like\n\n300\n00:18:43.736 --> 00:18:50.090\nthree twenty-four two thousand six.\n\n301\n00:18:50.090 --> 00:18:52.620\nWell actually,\nGetdate returns the day of the month.\n\n302\n00:18:53.630 --> 00:18:57.563\nSo if we go and look at date\nis the 21st day of January and\n\n303\n00:18:57.563 --> 00:19:02.950\nGetDate will actually return that for\nyou, which is really weird.\n\n304\n00:19:02.950 --> 00:19:03.880\nSo be very careful.\n\n305\n00:19:03.880 --> 00:19:07.450\nI can also set date with those,\njust like I did with set time.\n\n306\n00:19:08.490 --> 00:19:09.420\nThis may be useful,\n\n307\n00:19:09.420 --> 00:19:14.250\nif you know you just need to increment or\nmove the state object through a month.\n\n308\n00:19:14.250 --> 00:19:17.180\nSo I can say set one,\nset two, set three, set four.\n\n309\n00:19:17.180 --> 00:19:24.406\nSet date, rather, so those are very two\ncommon gotchas but there's one final one.\n\n310\n00:19:31.455 --> 00:19:39.120\nToo many caps, and that's getDay.\n\n311\n00:19:39.120 --> 00:19:44.170\nWell, actually the get day would\nmake me think of the get date.\n\n312\n00:19:44.170 --> 00:19:45.080\n&gt;&gt; Yes.\n\n313\n00:19:45.080 --> 00:19:48.611\n&gt;&gt; So if I go five, okay.\n\n314\n00:19:48.611 --> 00:19:49.840\nWell that's weird.\n\n315\n00:19:49.840 --> 00:19:52.636\nGet day actually returns I\nthink it's zero through six or\n\n316\n00:19:52.636 --> 00:19:54.216\nmaybe it's one through seven.\n\n317\n00:19:54.216 --> 00:19:55.240\nLet's double check.\n\n318\n00:19:58.930 --> 00:20:01.885\nSo get day zero through six for\nthe day of the week.\n\n319\n00:20:01.885 --> 00:20:06.290\nReturns the day of the week zero for\nsix for a particular time.\n\n320\n00:20:08.660 --> 00:20:10.459\nThose are, does it start on Sunday?\n\n321\n00:20:10.459 --> 00:20:12.140\nDoes it start on Monday?\n\n322\n00:20:12.140 --> 00:20:13.330\nTypically it starts on Sunday,\n\n323\n00:20:13.330 --> 00:20:18.760\nit's gonna run from zero to six Sunday\nthrough Saturday as a normal week.\n\n324\n00:20:18.760 --> 00:20:20.080\nIt's kinda weird to manipulate.\n\n325\n00:20:20.080 --> 00:20:23.070\nSo be very careful, because you anticipate\nthat it's gonna give you the day of\n\n326\n00:20:23.070 --> 00:20:26.050\nthe month when in fact it gives you the\nday of the week represented as a number.\n\n327\n00:20:27.770 --> 00:20:32.720\nBut other than those gadgets,\nthe other ones work very,\n\n328\n00:20:32.720 --> 00:20:37.760\nyou're like, these other ones work\njust like I anticipate them to.\n\n329\n00:20:38.770 --> 00:20:43.165\nSo if I look at how do I get the year?\n\n330\n00:20:43.165 --> 00:20:48.276\nIf I'm gonna say date.getYear, 111,\n\n331\n00:20:48.276 --> 00:20:53.444\nhere's another one\n\n332\n00:20:53.444 --> 00:20:58.920\nof those, getYear.\n\n333\n00:21:00.610 --> 00:21:01.260\nReturns the year,\n\n334\n00:21:01.260 --> 00:21:05.120\nusually two to three digits, specified\nin the date according to local time.\n\n335\n00:21:05.120 --> 00:21:11.291\nSo be very careful, getYear is not what\nyou want, but instead getFullYear.\n\n336\n00:21:11.291 --> 00:21:15.290\nFull year is what you\nanticipate to be returned.\n\n337\n00:21:15.290 --> 00:21:20.860\nSo keep that in mind, getYear is\nthe number of years since 1900, I think.\n\n338\n00:21:20.860 --> 00:21:21.710\nThis is really weird.\n\n339\n00:21:23.200 --> 00:21:26.410\nSo getFullYear returns\na standard year object.\n\n340\n00:21:28.390 --> 00:21:31.358\nGet, and I have to give a reference here.\n\n341\n00:21:34.830 --> 00:21:39.772\nGetHours behaves as you\nanticipate that it would, 3.\n\n342\n00:21:39.772 --> 00:21:45.248\nAnd if I look back up\nhere this is hour 3 and\n\n343\n00:21:45.248 --> 00:21:50.740\nI have get minutes and seconds likewise.\n\n344\n00:21:50.740 --> 00:21:52.392\n3:23 and getSeconds.\n\n345\n00:21:52.392 --> 00:21:57.144\nOkay, so other than a get year and\na get date and a get day,\n\n346\n00:21:57.144 --> 00:22:03.100\nthose weird gotchas I may just want\nto get what is the number of seconds?\n\n347\n00:22:03.100 --> 00:22:04.170\nWhat is the number of minutes?\n\n348\n00:22:04.170 --> 00:22:07.260\nWhat is the number of hours or\neven the year?\n\n349\n00:22:07.260 --> 00:22:13.675\nAnd then finally,\nhow would I figure out the month.\n\n350\n00:22:13.675 --> 00:22:16.340\nWell, here's a handy tip.\n\n351\n00:22:16.340 --> 00:22:19.875\nIf you're in the Chrome developer tools\n\n352\n00:22:24.451 --> 00:22:26.530\nIt will provide some\nlevel of auto complete.\n\n353\n00:22:27.690 --> 00:22:32.454\nBut keep in mind that when I get date,\n\n354\n00:22:32.454 --> 00:22:35.541\nthe month is 0 to 11.\n\n355\n00:22:35.541 --> 00:22:37.941\nAnd remember during\nconstruction of these dates,\n\n356\n00:22:37.941 --> 00:22:41.150\nI had to remember that that 0 to 11 so\nthere's offset.\n\n357\n00:22:41.150 --> 00:22:45.190\nWhen I get months, that is 0 to\n11 as well that returns a number.\n\n358\n00:22:46.930 --> 00:22:53.313\nBut I know that you does then it’s like\nget four months and tally that I know of.\n\n359\n00:22:53.313 --> 00:22:59.155\nThere is some way to manipulate that,\nyou just have to construct a new day,\n\n360\n00:22:59.155 --> 00:23:04.490\nso these are our basic\ninteractions with date objects.\n\n361\n00:23:04.490 --> 00:23:07.730\nHowever, there's a very particular\nthing you need to know.\n\n362\n00:23:07.730 --> 00:23:12.120\nThe date built in has some additional\nmethods on it that are not\n\n363\n00:23:12.120 --> 00:23:13.290\npart of date object.\n\n364\n00:23:13.290 --> 00:23:18.040\nSo if I call new date, I can't use\nthese methods but if I call date,\n\n365\n00:23:19.120 --> 00:23:24.480\nI can use these methods within\nthe date module, the date object.\n\n366\n00:23:25.500 --> 00:23:29.100\nThese are just little helper methods\nin order to speed things up,\n\n367\n00:23:29.100 --> 00:23:32.030\na little easier to read,\na little clearer I think, but\n\n368\n00:23:32.030 --> 00:23:35.850\nthere are a couple of things\nthat you need to be careful of.\n\n369\n00:23:35.850 --> 00:23:40.720\nSo, just as a final parting gift\nto you In order to use dates.\n\n370\n00:23:40.720 --> 00:23:46.740\nSo using the date module,\nif I said new date,\n\n371\n00:23:46.740 --> 00:23:50.860\nas I have above, I get right now, but\nthat's not immediately intuitive.\n\n372\n00:23:50.860 --> 00:23:54.028\nIf I go back to read through this code,\nI may have to look through documentation.\n\n373\n00:23:57.240 --> 00:24:03.490\nBut if I use the date module,\nI can say Date.now,\n\n374\n00:24:03.490 --> 00:24:08.330\nand I'm just gonna comment these out so\nwe can remove the clutter.\n\n375\n00:24:15.411 --> 00:24:20.750\nAnd this is the date, but\nit is not represented as a date.\n\n376\n00:24:20.750 --> 00:24:22.790\nSo I can get the number of\nmilliseconds right now,\n\n377\n00:24:22.790 --> 00:24:24.870\nbut then I can use that\nto construct a date or\n\n378\n00:24:24.870 --> 00:24:28.960\nto move left or right, number of days,\nhours, minutes, milliseconds.\n\n379\n00:24:29.980 --> 00:24:33.060\n&gt;&gt; So, are we kinda left on our\nown then to convert that back?\n\n380\n00:24:33.060 --> 00:24:37.550\nThere's no easy method or anything we\ncan use to extract values out of that?\n\n381\n00:24:37.550 --> 00:24:38.260\n&gt;&gt; Right.\n\n382\n00:24:38.260 --> 00:24:43.250\nSo I get this now, which I can use to\nconstruct a new data, or I can use as\n\n383\n00:24:43.250 --> 00:24:48.100\na reference, because I can add,\nsubtract those number of milliseconds.\n\n384\n00:24:48.100 --> 00:24:53.187\nBut, the easiest, what I typically use\nthis for, is I wanna know how many\n\n385\n00:24:53.187 --> 00:24:58.193\ndays in the future, or how many hours\nin the future, I'll find now, and\n\n386\n00:24:58.193 --> 00:25:03.556\nthen some date subtract, but then I have\nto do the manipulation for the time.\n\n387\n00:25:03.556 --> 00:25:05.770\nSo just be very careful about that.\n\n388\n00:25:05.770 --> 00:25:07.430\n&gt;&gt; All right, fantastic, Justin.\n\n389\n00:25:07.430 --> 00:25:11.140\nGreat look there at how we work with\nthat date object within JavaScript.\n\n390\n00:25:11.140 --> 00:25:12.810\nSo we appreciate that,\ngreat demonstrations.\n\n391\n00:25:12.810 --> 00:25:15.330\nWe hope everybody out there\nenjoyed watching this one.\n\n392\n00:25:15.330 --> 00:25:18.300\nSigning off for ITProTV,\nI've been your host, Mike Rodrick.\n\n393\n00:25:18.300 --> 00:25:19.290\n&gt;&gt; And I'm Justin Dennison.\n\n394\n00:25:19.290 --> 00:25:20.190\n&gt;&gt; And we'll see you next time.\n\n395\n00:25:25.086 --> 00:25:27.721\n[MUSIC]\n\n396\n00:25:27.721 --> 00:25:28.900\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "203162506"
        }
      ],
      "title": "Intro to JavaScript"
    }
  ],
  "url": "introjavascript",
  "vLab": false
}
