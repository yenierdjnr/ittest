{
  "description": "NodeJS has brought JavaScript to the server as well as the desktop programming environments. With this escape from the browser, JavaScript provides the ability to leverage your understanding of JavaScript to create new and powerful applications. If you want to power up your understanding of JavaScript using the NodeJS platform then join us!",
  "descriptionMD": "NodeJS has brought JavaScript to the server as well as the desktop programming environments. With this escape from the browser, JavaScript provides the ability to leverage your understanding of JavaScript to create new and powerful applications. If you want to power up your understanding of JavaScript using the NodeJS platform then join us!",
  "length": "36163",
  "name": "Intro to NodeJS",
  "practiceExam": false,
  "subtitle": "Breaking JavaScript out of the browser",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin give a general overview of what to expect in the upcoming Intro to NodeJS series. They cover topics like who is the intended audience, what the scope of the series will cover, and what are some specific topics that will be addressed.",
          "length": "128",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-0-0-Overview-051617-PGM.00_00_05_22.Still002.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-0-0-Overview-051617-PGM.00_00_05_22.Still002-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-0-0-Overview-051617-PGM.00_00_05_22.Still002-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "217990146"
        },
        {
          "description": "In this episode, Daniel and Justin kick off their introduction to NodeJS series. Here they will discuss what NodeJS is and how it compares with other development languages. They also show you how to install the NodeJS environment in Mac OS, Linux, and Windows.",
          "length": "1767",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-1-installing_nodesjs-050317-PGM.00_29_11_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-1-installing_nodesjs-050317-PGM.00_29_11_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-1-installing_nodesjs-050317-PGM.00_29_11_19.Still001-sm.jpg",
          "title": "Installing NodeJS",
          "transcript": "",
          "vimeoId": "216552037"
        },
        {
          "description": "In this episode, Daniel and Justin take a deeper look at exactly what NodeJS is so that you can better understand the where/when/why of its use. They also explore other info on NodeJS like performance concerns as well.",
          "length": "1235",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-2-what_is_nodesjs-050317-PGM.00_20_39_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-2-what_is_nodesjs-050317-PGM.00_20_39_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-1-2-what_is_nodesjs-050317-PGM.00_20_39_20.Still001-sm.jpg",
          "title": "What is NodeJS",
          "transcript": "",
          "vimeoId": "216552417"
        },
        {
          "description": "In this episode, Daniel and Justin explore the use of Modules in NodeJS. Here they will explore what Modules are and how they're used. They also look at where you can get Modules; both from nodejs.org and 3rd party sources. Finally, they show you how to build your own custom Modules.",
          "length": "1528",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-3-1-modules_in_nodesjs-050317-PGM.00_32_15_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-3-1-modules_in_nodesjs-050317-PGM.00_32_15_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-3-1-modules_in_nodesjs-050317-PGM.00_32_15_05.Still001-sm.jpg",
          "title": "Modules in NodeJS",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:02.890\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.890 --> 00:00:06.034\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.034 --> 00:00:08.434\n[MUSIC]\n\n4\n00:00:08.434 --> 00:00:12.452\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.452 --> 00:00:14.136\n&gt;&gt; All right, greetings everyone and\n\n6\n00:00:14.136 --> 00:00:16.500\nwelcome to another exciting\nepisode of ITProTV.\n\n7\n00:00:16.500 --> 00:00:18.650\nI'm your host Daniel Lowrie, and\n\n8\n00:00:18.650 --> 00:00:23.590\nin today's episode we are coming back with\nmore on our introduction to NodeJS series.\n\n9\n00:00:23.590 --> 00:00:26.285\nAnd joining us in the studio yet\nagain, our good friend and\n\n10\n00:00:26.285 --> 00:00:28.600\nmentor in that endeavor, Mr.\nJustin Dennison.\n\n11\n00:00:28.600 --> 00:00:30.580\nJustin, welcome back my man,\nhow's it going today?\n\n12\n00:00:30.580 --> 00:00:33.900\n&gt;&gt; It was going well, I'm excited\nto be back but, how are you Daniel?\n\n13\n00:00:33.900 --> 00:00:35.470\n&gt;&gt; Well, I thank you so much for asking.\n\n14\n00:00:35.470 --> 00:00:37.510\nHe's so sweet, right,\nhe's just a nice kind,\n\n15\n00:00:37.510 --> 00:00:39.620\ngentle soul,\nalways wanna know how well I'm doing.\n\n16\n00:00:39.620 --> 00:00:40.630\nI'm doing fantastic, I know,\n\n17\n00:00:40.630 --> 00:00:43.020\nwe're kinda having a good time\nbantering back and forth.\n\n18\n00:00:43.020 --> 00:00:45.300\nLet's jump back into Node.js.\n\n19\n00:00:45.300 --> 00:00:48.300\nWe started talking between the break,\nhe and I, about modules.\n\n20\n00:00:48.300 --> 00:00:50.272\nHe thought, well it's a good place for\nus to bring that up.\n\n21\n00:00:50.272 --> 00:00:52.960\nSo, that'd being said,\nwe might pose the question, or\n\n22\n00:00:52.960 --> 00:00:56.768\nsomebody in the audience might pose the\nquestion, what the heck is a module, and\n\n23\n00:00:56.768 --> 00:00:58.609\nhow does it work inside of Node?\n\n24\n00:00:58.609 --> 00:01:02.280\n&gt;&gt; That is the question that\nneeds answering, right.\n\n25\n00:01:02.280 --> 00:01:06.410\nModules, this is kind of the bread and\nbutter topic in Node.\n\n26\n00:01:06.410 --> 00:01:10.310\nBecause, typically in the browser what\nwe do is we just keep loading things on\n\n27\n00:01:10.310 --> 00:01:13.550\nthe page, and\nthen we can use them later on in the page.\n\n28\n00:01:13.550 --> 00:01:17.270\nIf it comes before, it'll load and\nthat'll be available in the namespace.\n\n29\n00:01:17.270 --> 00:01:22.495\nBut when I'm building local applications,\nso the Java people did this,\n\n30\n00:01:22.495 --> 00:01:27.129\nPython, Ruby, they have this\nstructure to where I can import and\n\n31\n00:01:27.129 --> 00:01:32.037\nexport and see how things kind of\ntie together inside of other files.\n\n32\n00:01:32.037 --> 00:01:34.247\nAnd now I have this structure, but also,\n\n33\n00:01:34.247 --> 00:01:36.980\nI don't have this global\nnamespace pollution.\n\n34\n00:01:36.980 --> 00:01:38.933\nAnd if you've watched\nany of my other videos,\n\n35\n00:01:38.933 --> 00:01:41.547\nI've definitely talked about\nglobal namespace pollution.\n\n36\n00:01:41.547 --> 00:01:44.505\nAnd what that means is,\nif Daniel's working on a project and\n\n37\n00:01:44.505 --> 00:01:47.057\nhe wants to use the variable\nx in his node.js file and\n\n38\n00:01:47.057 --> 00:01:50.520\nhe's implementing a feature and\nI want to use the variable x.\n\n39\n00:01:50.520 --> 00:01:53.350\nThen, if everything goes\nto the global namespace,\n\n40\n00:01:53.350 --> 00:01:55.940\ndepending on whose variable\nis declared first,\n\n41\n00:01:56.970 --> 00:02:02.490\nwe may get different results and\nthat non-determinism is an issue.\n\n42\n00:02:02.490 --> 00:02:06.670\nIf I have this overwrite of information,\nhe may be using it as a string,\n\n43\n00:02:06.670 --> 00:02:10.410\nI'm using it as a number,\nand now we have problems.\n\n44\n00:02:10.410 --> 00:02:13.200\nNo, well I always try and\nuse it as a number, and\n\n45\n00:02:13.200 --> 00:02:15.870\nthen it broke because it's the string or\nvice versa.\n\n46\n00:02:15.870 --> 00:02:16.740\nWell, in Node,\n\n47\n00:02:16.740 --> 00:02:21.500\nwe have the ability to kind of sequester\nthese individual pieces called modules.\n\n48\n00:02:21.500 --> 00:02:24.125\nAnd believe it or not,\nNode already has a great deal of modules,\n\n49\n00:02:24.125 --> 00:02:27.770\nthat's how the core API is exposed,\nbuilt in.\n\n50\n00:02:27.770 --> 00:02:29.393\nSo let's go ahead and\ntake a look at my screen and\n\n51\n00:02:29.393 --> 00:02:31.050\nwe're gonna look at some\nof those built-ins.\n\n52\n00:02:31.050 --> 00:02:36.210\nWe're gonna take a deeper dive later on,\nI gotta find my Chrome web browser, but\n\n53\n00:02:36.210 --> 00:02:38.940\nlet's just take a look\nat a couple of these.\n\n54\n00:02:38.940 --> 00:02:42.120\nSo if I go to Nodejs.org,\nnow I think it's important for\n\n55\n00:02:42.120 --> 00:02:44.540\nyou to know how to get to these resources.\n\n56\n00:02:44.540 --> 00:02:46.400\nBecause if you have a question\nthat you need answering,\n\n57\n00:02:46.400 --> 00:02:49.490\nthat I haven't directly answered or\nmaybe someone else hasn't been able to,\n\n58\n00:02:49.490 --> 00:02:50.950\nyou can go seek it out for yourself.\n\n59\n00:02:50.950 --> 00:02:53.510\nYou need to know how to do that.\n\n60\n00:02:53.510 --> 00:02:59.230\nIf I go to Docs, there's a bunch of\nstuff that is talked about on this page.\n\n61\n00:02:59.230 --> 00:03:00.200\nES6 and beyond,\n\n62\n00:03:00.200 --> 00:03:03.060\nwe will actually be using some new\nfeatures of JavaScript, in this course.\n\n63\n00:03:03.060 --> 00:03:05.499\nSo, if you don't know JavaScript,\nthat could be an issue.\n\n64\n00:03:06.810 --> 00:03:12.861\nVersion 6.10.3,\nthat's the API that we want.\n\n65\n00:03:12.861 --> 00:03:16.020\nIf you click on it,\nwe get this giant list.\n\n66\n00:03:16.020 --> 00:03:18.500\nAnd what we have, over here on the left,\n\n67\n00:03:18.500 --> 00:03:22.270\nare all of these built-in modules that\nhave been provided by the Node runtime.\n\n68\n00:03:22.270 --> 00:03:24.150\nNow, these are implemented in JavaScript,\nbut\n\n69\n00:03:24.150 --> 00:03:27.180\nthese aren't necessarily\navailable in the browser.\n\n70\n00:03:27.180 --> 00:03:29.850\nThese have kinda been added\non to that runtime that\n\n71\n00:03:29.850 --> 00:03:32.160\nallows us to do very common things.\n\n72\n00:03:32.160 --> 00:03:35.690\nAnd case in point, I like this path, one.\n\n73\n00:03:35.690 --> 00:03:38.191\nThis is something that I've used on\nsome of my Python programming days,\n\n74\n00:03:38.191 --> 00:03:39.990\nI've used it a little bit in Node.\n\n75\n00:03:39.990 --> 00:03:42.150\nAnd that's a lot of\nthese path manipulation.\n\n76\n00:03:42.150 --> 00:03:43.810\nWhat it means by path is,\n\n77\n00:03:43.810 --> 00:03:50.405\nI wanna go to /myusername/home and\nthat'll give me that path.\n\n78\n00:03:50.405 --> 00:03:54.540\nAnd what if I wanna know the base name,\nthe dir name, or\n\n79\n00:03:54.540 --> 00:03:57.430\neven the delimiter,\nlet's take a look here.\n\n80\n00:03:57.430 --> 00:04:01.110\nI'm going to go to resolve and\nnow I have the documentation.\n\n81\n00:04:02.480 --> 00:04:07.155\nA sequence of path or paths, okay, resolve\nmethod takes a sequence of path, okay.\n\n82\n00:04:07.155 --> 00:04:10.328\n&gt;&gt; [LAUGH]\n&gt;&gt; But what I like is there's typically\n\n83\n00:04:10.328 --> 00:04:13.780\nfairly simplistic examples\nembedded in the documentation.\n\n84\n00:04:13.780 --> 00:04:16.380\nAnd this is a module called path.\n\n85\n00:04:16.380 --> 00:04:17.880\nThis is where it gets a little weird.\n\n86\n00:04:17.880 --> 00:04:22.057\nThis documentation assumes that you\nalready have this module available to you\n\n87\n00:04:22.057 --> 00:04:25.450\nin whatever file or\nrebel that you're working in.\n\n88\n00:04:25.450 --> 00:04:32.560\nSo path.resolve('/foo/bar',\n'./baz') foo, bar, baz, okay.\n\n89\n00:04:32.560 --> 00:04:36.950\nWell, I don't use it like that, I use\nresolve to actually get fully qualified\n\n90\n00:04:36.950 --> 00:04:41.950\nabsolute paths of where I am relative\nto what project I'm running in.\n\n91\n00:04:41.950 --> 00:04:46.880\nSo lets see how I can import this module\nthat is built in, use it a little bit and\n\n92\n00:04:46.880 --> 00:04:47.530\nsee what that means.\n\n93\n00:04:47.530 --> 00:04:51.840\nSo, if I want to use a module,\nI'm just gonna run the REPL.\n\n94\n00:04:51.840 --> 00:04:55.470\nSo if you type node without a file name,\nit's gonna\n\n95\n00:04:55.470 --> 00:04:59.300\nbring up the read-evaluate-print loop,\nso I can type JavaScript in here.\n\n96\n00:04:59.300 --> 00:05:04.210\nAnd I'm going to use const in this course,\nmainly because these modules,\n\n97\n00:05:04.210 --> 00:05:06.560\nI don't wanna accidental reassignment.\n\n98\n00:05:06.560 --> 00:05:12.520\nI want the path variable to always\ntalk about the path module.\n\n99\n00:05:12.520 --> 00:05:15.590\nOr the OS module to always\ntalk about the OS module.\n\n100\n00:05:15.590 --> 00:05:20.950\nOr the file system one to be\nconnected to the file system module.\n\n101\n00:05:20.950 --> 00:05:23.790\nSo I'm gonna use const\npretty much everywhere here.\n\n102\n00:05:23.790 --> 00:05:24.700\nAnd what that means is,\n\n103\n00:05:24.700 --> 00:05:30.420\nI cannot re-assign the value of this\nvariable anywhere else in this REPL.\n\n104\n00:05:30.420 --> 00:05:34.640\nAnd I actually demonstrate that,\nagain we have some course about ES6 or\n\n105\n00:05:34.640 --> 00:05:36.140\nES2015, this feature.\n\n106\n00:05:36.140 --> 00:05:39.440\nIt's kind of a new language feature but\nI enjoy it, a great deal.\n\n107\n00:05:39.440 --> 00:05:42.570\nSo we're gonna type this\nmagic word called require.\n\n108\n00:05:42.570 --> 00:05:45.130\nAnd what require is gonna\ndo is it's looking for\n\n109\n00:05:45.130 --> 00:05:47.730\na string,\nessentially a name of the module.\n\n110\n00:05:49.140 --> 00:05:54.720\nNow built in, it knows where to search for\nthese common namelets.\n\n111\n00:05:54.720 --> 00:06:00.020\nSo I'm gonna say ('path'); so\nboom, I have undefined.\n\n112\n00:06:00.020 --> 00:06:04.420\nOkay, that's kind of like what I\nwould see in a browser console.\n\n113\n00:06:04.420 --> 00:06:08.363\nIt says undefined because there's no\nreturn, here there's an undefined return.\n\n114\n00:06:08.363 --> 00:06:13.870\nBut now if I type path I have,\nI have this object, this module.\n\n115\n00:06:13.870 --> 00:06:20.968\nAnd a module is a collections of functions\nand data that serve a single purpose.\n\n116\n00:06:20.968 --> 00:06:24.300\nYou should keep things kind of\ncollected together that make sense.\n\n117\n00:06:24.300 --> 00:06:29.300\nSo path.resolve is a function\nwithin the path module.\n\n118\n00:06:29.300 --> 00:06:33.290\nThat is only available\nthrough this require syntax.\n\n119\n00:06:33.290 --> 00:06:36.780\nAnd the reason I can\nuse this generic name,\n\n120\n00:06:36.780 --> 00:06:40.990\nit is a string,\nis because it's a built in node module.\n\n121\n00:06:40.990 --> 00:06:42.470\nSo, let's use path.\n\n122\n00:06:42.470 --> 00:06:48.736\nSo path.resolve, not results,\nthat's something else.\n\n123\n00:06:48.736 --> 00:06:54.010\nSo a resolve('./'), and that should be\nthe directory that I'm currently in.\n\n124\n00:06:54.010 --> 00:06:56.445\nAnd if I resolve, well, you can see,\n\n125\n00:06:56.445 --> 00:06:59.240\nUsers/justindennison/Desktop/what-are-mod-\nules.\n\n126\n00:06:59.240 --> 00:07:05.490\nIt gives me the fully qualified resolved\npath for this kind of relative path here.\n\n127\n00:07:05.490 --> 00:07:09.200\nNow, I'm going to store\nthat in a variable, and\n\n128\n00:07:09.200 --> 00:07:14.350\nI can say here, and\nthat's path.resolve('./.') and we'll\n\n129\n00:07:14.350 --> 00:07:19.220\nsee this a little more in-depth later on,\nbut now I have that in a variable.\n\n130\n00:07:19.220 --> 00:07:22.734\nIt's just a string, but it did all\nthat lookup and manipulation for me.\n\n131\n00:07:22.734 --> 00:07:27.026\nAnd if you're doing automated scripting\nlike, I just want to write a script that\n\n132\n00:07:27.026 --> 00:07:31.260\nmoves these files here or copies these\nhere, or cleans out my trash bin.\n\n133\n00:07:31.260 --> 00:07:32.230\nYou can do that with Node,\n\n134\n00:07:32.230 --> 00:07:36.520\nbecause Node is now a runtime on\nyour respective computer or server.\n\n135\n00:07:36.520 --> 00:07:41.593\nBut if I say here, and\nsay path.basename(here),\n\n136\n00:07:41.593 --> 00:07:44.540\nwell, what-are-modules.\n\n137\n00:07:44.540 --> 00:07:49.793\nThat tells you what is the last\nfolder in this absolute path or\n\n138\n00:07:49.793 --> 00:07:54.130\nit could even be the file\nif there was a file there.\n\n139\n00:07:54.130 --> 00:07:57.149\nSo I can use these path\nmanipulation functions.\n\n140\n00:07:57.149 --> 00:08:02.448\nAnd that's because this path module is\npart of The standard node run time.\n\n141\n00:08:02.448 --> 00:08:05.749\nBut something to keep in mind for\nthe API documentation,\n\n142\n00:08:05.749 --> 00:08:09.256\nit assumes that this module is\nalready part of your program,\n\n143\n00:08:09.256 --> 00:08:13.960\nthat you've already done this require\nstatement that I've done right up here.\n\n144\n00:08:15.330 --> 00:08:19.360\nSo, those are the built on modules but\nDaniel you look like you have a question.\n\n145\n00:08:19.360 --> 00:08:19.920\n&gt;&gt; Yeah.\n\n146\n00:08:19.920 --> 00:08:21.850\nIt's all the when you touch and path and\n\n147\n00:08:21.850 --> 00:08:25.830\ngave us all the different module\nfunctions that it could do, right?\n\n148\n00:08:25.830 --> 00:08:28.480\nThere's a litany of a laundry\nlist that we could go through.\n\n149\n00:08:28.480 --> 00:08:32.690\nI assume that documentation kind of spells\nout what each one of those does, right?\n\n150\n00:08:32.690 --> 00:08:33.240\nIs that correct?\n\n151\n00:08:33.240 --> 00:08:35.777\n&gt;&gt; It does for\nyour respective version, now,\n\n152\n00:08:35.777 --> 00:08:40.855\nthere are multiple versions of these\ndocumentations we're looking at 6.10.3,\n\n153\n00:08:40.855 --> 00:08:45.600\nso in Path, if I go to the very top, here\nthere's this kind of giant laundry list.\n\n154\n00:08:45.600 --> 00:08:48.040\n&gt;&gt; Yeah.\n&gt;&gt; And what's interesting is because of\n\n155\n00:08:48.040 --> 00:08:52.870\nthis posic style of\nPath versus the Window,\n\n156\n00:08:52.870 --> 00:08:57.860\nWindows paths, it'll tell you,\nhey, there's some differences.\n\n157\n00:08:57.860 --> 00:08:59.550\nAnd if we actually go back and\nlook at this module,\n\n158\n00:08:59.550 --> 00:09:01.440\nyou'll notice there's a Win 32 there.\n\n159\n00:09:01.440 --> 00:09:02.680\n&gt;&gt; Subsection.\n\n160\n00:09:02.680 --> 00:09:07.330\n&gt;&gt; Where now I have specific\nlike Windows based platforms.\n\n161\n00:09:07.330 --> 00:09:10.317\nSo that helps with, I don't only need to\nlearn these modules for one thing, and\n\n162\n00:09:10.317 --> 00:09:12.117\nbehind the scenes they're\njust taking to get.\n\n163\n00:09:12.117 --> 00:09:17.325\nThis is kind of entered into the realm\nof like Python or Ruby in this context.\n\n164\n00:09:17.325 --> 00:09:21.677\n&gt;&gt; So going back to the module thing\nis this the only place we get modules?\n\n165\n00:09:21.677 --> 00:09:24.365\nObviously there's quite a few\nin here in our list, but\n\n166\n00:09:24.365 --> 00:09:28.432\nwhat if they don't have something\nthat maybe I want or need?\n\n167\n00:09:28.432 --> 00:09:31.722\nAm I stuck with just whatever they\ngive me or can I go to a third party?\n\n168\n00:09:31.722 --> 00:09:35.722\n&gt;&gt; Well, that is something that\nwe've already looked at really.\n\n169\n00:09:35.722 --> 00:09:37.932\nBelive it or not, and\nI wasn't real specific,\n\n170\n00:09:37.932 --> 00:09:39.182\nwe were looking at the ecosystem.\n\n171\n00:09:39.182 --> 00:09:43.542\nBut NPM,\nthat node packet management system,\n\n172\n00:09:43.542 --> 00:09:46.952\nwell that provides us with some\nof those third party modules.\n\n173\n00:09:46.952 --> 00:09:50.332\nNow they have to have\na specific structure, and well,\n\n174\n00:09:50.332 --> 00:09:52.760\nlet's just, let's see here.\n\n175\n00:09:52.760 --> 00:09:55.030\nWhat is a good one?\n\n176\n00:09:55.030 --> 00:09:59.400\nI'm very familiar with web based\nprogramming, so I'm gonna look at Express.\n\n177\n00:09:59.400 --> 00:10:02.722\nAnd when I go to MPM,\nthis is a third party module for\n\n178\n00:10:02.722 --> 00:10:05.440\nwriting kind of web based applications.\n\n179\n00:10:05.440 --> 00:10:10.130\nSo they haven't updated to\nsome new language features but\n\n180\n00:10:10.130 --> 00:10:16.250\nIf we take a look right here,\nvar express equals require express.\n\n181\n00:10:16.250 --> 00:10:20.050\nWell that's very similar to what we\njust did with this built in module,\n\n182\n00:10:20.050 --> 00:10:23.230\nexcept there's one little kind of oops.\n\n183\n00:10:23.230 --> 00:10:25.720\nWe've got to be careful.\n\n184\n00:10:25.720 --> 00:10:31.140\nI'm gonna cut out of this ripple here, and\nI wanna say npm, this is the npm tool,\n\n185\n00:10:31.140 --> 00:10:35.380\nso the node package management tool,\nand node package manager.\n\n186\n00:10:35.380 --> 00:10:38.240\nNpm install, and what do I wanna install?\n\n187\n00:10:38.240 --> 00:10:40.910\nExpress, and if we go and\nlook the documentation,\n\n188\n00:10:40.910 --> 00:10:44.110\nit actually tells us that's\nhow you install express.\n\n189\n00:10:44.110 --> 00:10:48.010\nNow be forewarned, there's a lot of\nthings that you need to know for Npm.\n\n190\n00:10:48.010 --> 00:10:52.370\nWe're just seeing how we can\nget third party modules.\n\n191\n00:10:52.370 --> 00:10:55.570\nThe use of npm is a whole\ncourse unto itself.\n\n192\n00:10:55.570 --> 00:10:57.240\nSo we're going to npm install express.\n\n193\n00:10:57.240 --> 00:11:00.980\nNow on Windows based machines you\nmay not see all of this output.\n\n194\n00:11:00.980 --> 00:11:04.850\nIn a previous episode I said,\nyou know you may not see all this output.\n\n195\n00:11:04.850 --> 00:11:08.910\nIf you do, that's great, but I do know\nin certain installs on Windows and\n\n196\n00:11:08.910 --> 00:11:12.060\ndepending on where you're running npm\ninstall, it'll kind of just hang out,\n\n197\n00:11:12.060 --> 00:11:13.690\nlook like it's locked up.\n\n198\n00:11:13.690 --> 00:11:15.140\nAnd then it goes to the next line and\n\n199\n00:11:15.140 --> 00:11:17.440\nmaybe gives you this\nlittle bit of printout.\n\n200\n00:11:17.440 --> 00:11:21.260\nBut what the npm module did was\nit went and got express, but\n\n201\n00:11:21.260 --> 00:11:24.150\nexpress had all of these dependencies.\n\n202\n00:11:24.150 --> 00:11:28.920\nSo array-flatten, content-disposition,\ncookie, cookie-signature, debug,\n\n203\n00:11:28.920 --> 00:11:30.110\nencodeurl.\n\n204\n00:11:30.110 --> 00:11:34.210\nSo express is this\ncombination of other modules,\n\n205\n00:11:34.210 --> 00:11:36.720\nkind of composed into this framework.\n\n206\n00:11:36.720 --> 00:11:39.680\nWell, where did it go?\n\n207\n00:11:39.680 --> 00:11:43.960\nIf I ls,\nthere's a new folder called node_modules.\n\n208\n00:11:43.960 --> 00:11:48.380\nAnd node_modules are things that\nyou have npm installed Express for.\n\n209\n00:11:48.380 --> 00:11:51.840\nSo if I go into node_modules,\ndepending on your system,\n\n210\n00:11:51.840 --> 00:11:56.250\nyou may see only Express,\nlike this file right here.\n\n211\n00:11:56.250 --> 00:11:58.410\nOr you may see all of the ones that I did.\n\n212\n00:11:59.500 --> 00:12:04.480\nWhen I npm installed Express, Node Package\nManager said hey Express relies on\n\n213\n00:12:04.480 --> 00:12:08.050\nall these other pieces so it went and\ndownloaded those as well.\n\n214\n00:12:08.050 --> 00:12:11.451\nAnd well that's nice for the community,\nI don't have to manually go and\n\n215\n00:12:11.451 --> 00:12:12.579\ndownload all of these.\n\n216\n00:12:12.579 --> 00:12:17.084\nBut I really only wanna use Express,\nand it's important to\n\n217\n00:12:17.084 --> 00:12:21.780\nhave the Express folder inside\nof the node_modules folder.\n\n218\n00:12:21.780 --> 00:12:24.780\nThat name's important because node\n\n219\n00:12:24.780 --> 00:12:28.340\nkind of looks inside of that folder\ninside your respective project.\n\n220\n00:12:28.340 --> 00:12:30.520\nSo if I hop back out of that folder.\n\n221\n00:12:30.520 --> 00:12:33.510\nLet's assume that\nwhat-are-modules is my project.\n\n222\n00:12:33.510 --> 00:12:36.810\nInside of that,\nI have a folder called node_modules.\n\n223\n00:12:36.810 --> 00:12:40.060\nAny third party modules that\nI have downloaded from npm\n\n224\n00:12:40.060 --> 00:12:41.750\nwill reside in this folder.\n\n225\n00:12:41.750 --> 00:12:43.470\nAnd that's where node will go to look.\n\n226\n00:12:43.470 --> 00:12:45.860\nIf it's not part of the kinda built in,\n\n227\n00:12:45.860 --> 00:12:48.390\nit'll look inside of a node\nmodules folder, that's convention.\n\n228\n00:12:49.400 --> 00:12:51.910\nNow there are ways that\nyou could get around that.\n\n229\n00:12:51.910 --> 00:12:54.710\nBut if you're using a third party module,\n\n230\n00:12:54.710 --> 00:12:57.790\nI would use Convention because it\njust makes things a little easier,\n\n231\n00:12:57.790 --> 00:13:03.130\na little less verbose and is reproducible\nif other people is using your code.\n\n232\n00:13:03.130 --> 00:13:05.140\nSo how do we use these modules?\n\n233\n00:13:05.140 --> 00:13:06.160\nWell, let's find out.\n\n234\n00:13:06.160 --> 00:13:08.340\nI'm gonna start up a ripple.\n\n235\n00:13:08.340 --> 00:13:14.915\nAnd I'm gonna say const express, and\nI'm just gonna say require('express').\n\n236\n00:13:14.915 --> 00:13:18.000\nNow, express is not part\nof the built in API.\n\n237\n00:13:18.000 --> 00:13:20.050\nIt's not Path, it's not OS,\nit's not file system.\n\n238\n00:13:20.050 --> 00:13:24.020\nSo if it can't find it there, it goes and\nlooks inside of node modules.\n\n239\n00:13:24.020 --> 00:13:26.340\nNow, I'm oversimplifying\nthis a little bit, just so\n\n240\n00:13:26.340 --> 00:13:28.290\nwe can start getting our\nheads around modules.\n\n241\n00:13:29.980 --> 00:13:34.390\nThe amount of things that are going on\nin order to resolve these names, and\n\n242\n00:13:34.390 --> 00:13:37.020\nit could be well outside\nthe scope of this course.\n\n243\n00:13:37.020 --> 00:13:42.190\nSo keep that in mind, it's not\na minutia look, a very detailed look.\n\n244\n00:13:42.190 --> 00:13:45.283\nBut for our purposes it makes sense\nto say okay it's not built in,\n\n245\n00:13:45.283 --> 00:13:47.151\nso it's gonna go look in node modules.\n\n246\n00:13:47.151 --> 00:13:51.320\nAll right, so if I do that,\nhey, nothing broke.\n\n247\n00:13:51.320 --> 00:13:53.260\nSo that means that we should be good.\n\n248\n00:13:53.260 --> 00:13:55.440\nAnd I can actually create a server.\n\n249\n00:13:55.440 --> 00:13:56.920\nIt's kinda interesting.\n\n250\n00:13:56.920 --> 00:13:58.340\nWe will do more of this, but\n\n251\n00:13:58.340 --> 00:14:04.140\nthis is kind of a very basic Hello World\nof using a third party module.\n\n252\n00:14:04.140 --> 00:14:05.590\nI'm very familiar with this.\n\n253\n00:14:05.590 --> 00:14:08.800\nJohnny Five and some of the other\nones are very similar as well.\n\n254\n00:14:08.800 --> 00:14:12.210\nSo I'm creating a server, and\nI can just say server.on.\n\n255\n00:14:12.210 --> 00:14:15.584\nAnd I'm gonna say( req, res).\n\n256\n00:14:15.584 --> 00:14:20.605\nAnd res.send('Hello').\n\n257\n00:14:20.605 --> 00:14:25.120\nAnd let some new stuff there as well.\n\n258\n00:14:25.120 --> 00:14:27.200\nAnd it sends back some information.\n\n259\n00:14:27.200 --> 00:14:32.625\nAnd I can say server.listern(9000).\n\n260\n00:14:32.625 --> 00:14:37.501\nAnd it is going to listen back\nat the ripple may not allow\n\n261\n00:14:37.501 --> 00:14:39.520\nme to do that too well.\n\n262\n00:14:39.520 --> 00:14:42.350\n&gt;&gt; Yeah.\n&gt;&gt; So we'll see if it works.\n\n263\n00:14:42.350 --> 00:14:46.650\nHaven't done a great deal of that on the\nripple so may have to put that on a file.\n\n264\n00:14:46.650 --> 00:14:47.500\nThat's no problem.\n\n265\n00:14:48.770 --> 00:14:52.370\nCan not get it, so it's not gonna\nlet me launch it from the ripple so,\n\n266\n00:14:52.370 --> 00:14:55.150\nbecause it would block the ripple and\nthat could be bad.\n\n267\n00:14:55.150 --> 00:15:00.128\nBut, that exact same thing\nif I put that in a file and\n\n268\n00:15:00.128 --> 00:15:02.920\nI'll do that Just to demonstrate.\n\n269\n00:15:02.920 --> 00:15:04.720\nWell, there's nine on.\n\n270\n00:15:04.720 --> 00:15:05.395\n&gt;&gt; It's index.\n\n271\n00:15:05.395 --> 00:15:06.743\n[LAUGH]\n&gt;&gt; Yeah, index.\n\n272\n00:15:06.743 --> 00:15:11.976\n[LAUGH] index.js, so\nI'm gonna say const express\n\n273\n00:15:11.976 --> 00:15:19.329\n= require('express'): and\nthen const server = express(),\n\n274\n00:15:19.329 --> 00:15:23.350\nand then server.on or server.get.\n\n275\n00:15:23.350 --> 00:15:24.350\nThere's your problem.\n\n276\n00:15:24.350 --> 00:15:26.130\nNot on, dot get.\n\n277\n00:15:26.130 --> 00:15:27.740\nThat was my fault.\n\n278\n00:15:27.740 --> 00:15:30.050\nGetting ahead myself, Daniel.\n\n279\n00:15:30.050 --> 00:15:31.348\nGetting ahead of myself.\n\n280\n00:15:31.348 --> 00:15:32.592\n&gt;&gt; You're just so excited.\n\n281\n00:15:32.592 --> 00:15:34.502\n&gt;&gt; I am.\n&gt;&gt; Because you had like 37 cups of\n\n282\n00:15:34.502 --> 00:15:36.442\nespresso before we started the show.\n\n283\n00:15:36.442 --> 00:15:38.825\n&gt;&gt; Yeah.\nIt's all blurring together.\n\n284\n00:15:38.825 --> 00:15:39.446\n&gt;&gt; [LAUGH].\n\n285\n00:15:40.520 --> 00:15:45.411\n&gt;&gt; So not on, and we'll talk about\nthe difference between .get and .on.\n\n286\n00:15:45.411 --> 00:15:49.236\nSo server.listen.\n\n287\n00:15:49.236 --> 00:15:54.444\nAnd that should work, so node index.js.\n\n288\n00:15:54.444 --> 00:15:57.072\nAnd notice how it kind of hangs out,\nright.\n\n289\n00:15:57.072 --> 00:15:58.162\n&gt;&gt; Kind of just chilling.\n\n290\n00:15:58.162 --> 00:16:01.677\nIt goes into this infinite kind\nof request response cycle loop.\n\n291\n00:16:01.677 --> 00:16:06.065\nAnd we should get a hello, and we do.\n\n292\n00:16:06.065 --> 00:16:07.390\nWe've written our first web server.\n\n293\n00:16:07.390 --> 00:16:09.701\nBut that's using a third party module.\n\n294\n00:16:09.701 --> 00:16:11.250\nAnd that was fairly easy.\n\n295\n00:16:11.250 --> 00:16:16.320\nNPM Install Express, follow the\ninstructions, and we're up and good to go.\n\n296\n00:16:16.320 --> 00:16:19.815\nSo third-party modules are definitely\nsomething that we can use.\n\n297\n00:16:19.815 --> 00:16:21.170\n&gt;&gt; Yeah, that's awesome, right?\n\n298\n00:16:21.170 --> 00:16:24.020\nSo if we don't have it in node,\nwe can look around,\n\n299\n00:16:24.020 --> 00:16:27.710\nsee if can find something that's more\ntailored, made to what we're looking for.\n\n300\n00:16:27.710 --> 00:16:30.920\nNow, speaking of tailor made,\nwe are programmers, right?\n\n301\n00:16:30.920 --> 00:16:33.550\nOr at least we're attempting\nto be in some shape or form.\n\n302\n00:16:33.550 --> 00:16:35.895\nCan I write my own module?\n\n303\n00:16:35.895 --> 00:16:38.720\n&gt;&gt; Now that's where\nthe power starts to come in.\n\n304\n00:16:38.720 --> 00:16:40.510\nIf you and\nI were working on a project together,\n\n305\n00:16:40.510 --> 00:16:43.000\nI could write a module that you use or\nvice versa.\n\n306\n00:16:43.000 --> 00:16:45.050\nAnd that's where the power starts to come.\n\n307\n00:16:45.050 --> 00:16:49.732\nAnd there's a little bit we have to\nkeep in mind as we're doing this,\n\n308\n00:16:49.732 --> 00:16:55.083\nbecause it's very particular to Node and\nwe have to follow some conventions.\n\n309\n00:16:55.083 --> 00:16:57.810\nSo let's take a look back,\nlet's kill that web server.\n\n310\n00:16:57.810 --> 00:17:01.450\nNow, I know on Windows periodically\nyou'll get a little pop-up that says,\n\n311\n00:17:01.450 --> 00:17:04.460\nhey do I have access to your\nnetwork interfaces and things.\n\n312\n00:17:04.460 --> 00:17:07.350\nIf you know what's running,\nit's okay to say yeah.\n\n313\n00:17:07.350 --> 00:17:11.310\nBut if it pops up randomly,\ndon't click OK, cuz that's bad.\n\n314\n00:17:11.310 --> 00:17:14.280\nIt might be Daniel trying\nto do malicious things.\n\n315\n00:17:14.280 --> 00:17:16.788\n&gt;&gt; Click OK to any security\nwarnings that you get, it's fine.\n\n316\n00:17:16.788 --> 00:17:17.867\n&gt;&gt; Yeah, yeah it'll be fine.\n\n317\n00:17:17.867 --> 00:17:18.447\n&gt;&gt; Yeah.\n\n318\n00:17:18.447 --> 00:17:21.477\n[LAUGH]\n&gt;&gt; In addition to some of the default\n\n319\n00:17:21.477 --> 00:17:24.076\nfirewall rules for HTTP connections or\n\n320\n00:17:24.076 --> 00:17:27.790\nTCP connections on windows\nbase machines may block it.\n\n321\n00:17:27.790 --> 00:17:31.022\nYou have to search out\nthose individually sadly.\n\n322\n00:17:31.022 --> 00:17:34.912\nIt's really hard to give a blanket answer\non how to fix that so keep that in mind.\n\n323\n00:17:34.912 --> 00:17:38.791\nHaven't had a lot of issues on Lennox or\nMac with that but on Windows I have.\n\n324\n00:17:38.791 --> 00:17:41.370\nSo, can we write own modules?\n\n325\n00:17:41.370 --> 00:17:43.790\nSo, let's make our own module.\n\n326\n00:17:43.790 --> 00:17:48.405\nWe're gonna look back at some things that\nwe built in previous JavaScript classes,\n\n327\n00:17:48.405 --> 00:17:50.947\nor JavaScript episodes, excuse me classes.\n\n328\n00:17:50.947 --> 00:17:53.901\n&gt;&gt; [LAUGH]\n&gt;&gt; We may use classes, but\n\n329\n00:17:53.901 --> 00:17:57.760\nwe're gonna look at one particular thing.\n\n330\n00:17:57.760 --> 00:17:59.240\nAnd Let say car.js.\n\n331\n00:17:59.240 --> 00:18:02.840\nSo we're gonna build a car module.\n\n332\n00:18:02.840 --> 00:18:04.906\nWhat does the car module contain?\n\n333\n00:18:04.906 --> 00:18:08.180\nWell, it is going to be a car object.\n\n334\n00:18:08.180 --> 00:18:10.350\nIt's gonna be the representation of a car.\n\n335\n00:18:10.350 --> 00:18:14.940\nAnd I'm gonna keep this fairly simple\njust to show you what we're doing.\n\n336\n00:18:14.940 --> 00:18:16.480\nWe gotta expand this on.\n\n337\n00:18:16.480 --> 00:18:21.840\nBut I gotta get out of visual mode in vim,\nso I'm gonna say const Car,\n\n338\n00:18:23.640 --> 00:18:28.680\nand well, what do we need in order for\na car to be a car, all right?\n\n339\n00:18:28.680 --> 00:18:32.747\nWell typically I think of color, and\nI could just put some data in here.\n\n340\n00:18:32.747 --> 00:18:37.130\nNow you may not wanna do this in a module,\nbut there may be a reason for this, right?\n\n341\n00:18:37.130 --> 00:18:41.566\nI have some kind of branding, or\nI have constants that need to be\n\n342\n00:18:41.566 --> 00:18:45.182\naccessible in using this\nmodule everywhere else.\n\n343\n00:18:45.182 --> 00:18:48.013\nBut I can also have drive.\n\n344\n00:18:49.985 --> 00:18:52.852\nDrive, and-\n&gt;&gt; Which you shouldn't do when you've\n\n345\n00:18:52.852 --> 00:18:53.627\nbeen drinking, Justin.\n\n346\n00:18:53.627 --> 00:18:55.725\n&gt;&gt; No, you shouldn't, not espresso.\n\n347\n00:18:55.725 --> 00:19:01.598\nAnd I'm just gonna say that that's\nconsole.log(vrooom), right?\n\n348\n00:19:01.598 --> 00:19:07.880\nNow, This is where it gets\na little bit interesting.\n\n349\n00:19:07.880 --> 00:19:11.250\nThis is very particular\nto node in this instance.\n\n350\n00:19:11.250 --> 00:19:16.746\nWe're gonna follow this kind\nof common JS module system,\n\n351\n00:19:16.746 --> 00:19:21.584\nwhere we're gonna say\nmodule.exports = Car;.\n\n352\n00:19:21.584 --> 00:19:26.028\nAnd I'm actually going to put\nsomething in here just to show off.\n\n353\n00:19:26.028 --> 00:19:30.682\nWe're gonna say function stop, okay?\n\n354\n00:19:30.682 --> 00:19:34.962\nAnd, all that's going to do is say\n\n355\n00:19:34.962 --> 00:19:39.986\nconsole.log('quuuuraaezee').\n\n356\n00:19:39.986 --> 00:19:40.764\nThat's brakes.\n\n357\n00:19:40.764 --> 00:19:41.358\n&gt;&gt; I like that.\n\n358\n00:19:41.358 --> 00:19:43.276\n[LAUGH]\n&gt;&gt; Yap that's what my brakes do.\n\n359\n00:19:43.276 --> 00:19:44.245\nI should probably go get them checked.\n\n360\n00:19:44.245 --> 00:19:45.620\n&gt;&gt; That's a heck of\nan onomatopoeia you got there.\n\n361\n00:19:45.620 --> 00:19:49.671\n[LAUGH]\n&gt;&gt; So, module.exports = cars.\n\n362\n00:19:49.671 --> 00:19:54.391\nThis, when people are writing their\nown modules, that me included,\n\n363\n00:19:54.391 --> 00:19:55.920\nthis is like the bane.\n\n364\n00:19:56.970 --> 00:19:59.893\nPut an s there, didn't put an s here.\n\n365\n00:19:59.893 --> 00:20:03.583\nIf you get the spelling wrong\nyou don't follow the convention,\n\n366\n00:20:03.583 --> 00:20:06.947\nthings just kinda don't work,\nokay so keep that in mind.\n\n367\n00:20:06.947 --> 00:20:11.872\nAnd now we've written our\ncar module it's in a file,\n\n368\n00:20:11.872 --> 00:20:17.566\nthat essentially mean it's in\na sequestered environment but\n\n369\n00:20:17.566 --> 00:20:22.180\nit's using common JS kind of convention,\nokay?\n\n370\n00:20:22.180 --> 00:20:27.033\nSo I'm gonna start a ripple and just to\nshow you I'm gonna say car = required and\n\n371\n00:20:27.033 --> 00:20:30.817\nwhen you write your own modules\nthere are not in node modules.\n\n372\n00:20:30.817 --> 00:20:35.135\nSo they're not part of the built ins,\nso I have to give a path and\n\n373\n00:20:35.135 --> 00:20:39.778\nthe real hiccup there is if I say car\nlike so and maybe even car dot js,\n\n374\n00:20:39.778 --> 00:20:45.380\nI'm sending it to the file,\nI will talk about that in just a moment.\n\n375\n00:20:45.380 --> 00:20:46.240\nCannot find car js.\n\n376\n00:20:48.150 --> 00:20:48.680\nI can't tell you,\n\n377\n00:20:48.680 --> 00:20:51.860\nthe first time I encountered this, I\nscoured the internet for like a good hour.\n\n378\n00:20:51.860 --> 00:20:56.393\nI was like its right there,\nI'm looking at it why is it not loading?\n\n379\n00:20:56.393 --> 00:21:01.454\nAnd well, it's expecting you to\ntell it kind of this path right so\n\n380\n00:21:01.454 --> 00:21:05.517\ndo slash is start here and\nthen start looking right.\n\n381\n00:21:05.517 --> 00:21:08.521\nSo relative to where I'm\nrequiring it from, and\n\n382\n00:21:08.521 --> 00:21:11.683\nstart looking now I could\ngive it an absolute path.\n\n383\n00:21:11.683 --> 00:21:16.421\nSaying it's on this part of my hard drive\nand I could point it somewhere else.\n\n384\n00:21:16.421 --> 00:21:18.650\nBut if it's in the same\ndirectory this ./ is important.\n\n385\n00:21:18.650 --> 00:21:21.220\nNow hopefully this doesn't\nmake a liar out of me.\n\n386\n00:21:21.220 --> 00:21:24.840\nAnd Car has already been\ndeclared because I used const, so\n\n387\n00:21:24.840 --> 00:21:26.318\nI'm going to say Car again.\n\n388\n00:21:27.530 --> 00:21:32.784\nThat is the downside of using const\nin the REPL, Cuz I can't reassign.\n\n389\n00:21:32.784 --> 00:21:37.262\nSo I'm gonna say ./car.js.\n\n390\n00:21:37.262 --> 00:21:42.190\nAnd so if I CarAgain,\nnotice I have color: 'red' and drive.\n\n391\n00:21:42.190 --> 00:21:48.225\nHowever, didn't I write a function\nstop inside of the car.js?\n\n392\n00:21:48.225 --> 00:21:50.730\nIt was not part of the exports.\n\n393\n00:21:50.730 --> 00:21:53.800\nIt is totally sequestered to that file.\n\n394\n00:21:53.800 --> 00:21:57.930\nIt may only be used in\nimplementation of drive, but\n\n395\n00:21:57.930 --> 00:22:01.270\nit is not exposed as\npart of the module's API.\n\n396\n00:22:01.270 --> 00:22:06.276\nSo, I could say, CarAgain.color, red.\n\n397\n00:22:06.276 --> 00:22:08.760\nI'm could say CarAgain.drive and\n\n398\n00:22:08.760 --> 00:22:12.492\nsince this is a function I can call it,\nit says vroom.\n\n399\n00:22:12.492 --> 00:22:17.300\nBut if I say CarAgain.stop,\nstop is not a function.\n\n400\n00:22:17.300 --> 00:22:19.290\nHe said, but it's in that file.\n\n401\n00:22:19.290 --> 00:22:22.540\nWell, it is, but\nit's not part of the exports.\n\n402\n00:22:22.540 --> 00:22:26.440\nAnd I'm gonna hop out of this repple and\njust take a look here.\n\n403\n00:22:26.440 --> 00:22:29.590\nNotice function stop\nis not part of the car\n\n404\n00:22:29.590 --> 00:22:33.850\nobject which is what's actually\nbeing exported on module.exports.\n\n405\n00:22:33.850 --> 00:22:36.606\nSo that's kind of a whoopsy daisy, but\n\n406\n00:22:36.606 --> 00:22:41.127\nthis is our very own module using\nkind of this common JS pattern.\n\n407\n00:22:41.127 --> 00:22:47.245\nOne final take away, though,\nis whenever we're requiring this and\n\n408\n00:22:47.245 --> 00:22:50.427\nnow that I can const Car = require.\n\n409\n00:22:50.427 --> 00:22:53.750\nI don't actually need that .js thing.\n\n410\n00:22:53.750 --> 00:22:55.450\nIt's kind of an assumption.\n\n411\n00:22:55.450 --> 00:22:57.211\nI'm gonna say ./car.\n\n412\n00:22:57.211 --> 00:23:01.408\nOr if I had it in a subfolder,\nI could say ./subfolder/car.\n\n413\n00:23:01.408 --> 00:23:06.024\nAnd then it would load whatever's\nin the module.exports into this-\n\n414\n00:23:06.024 --> 00:23:06.965\n&gt;&gt; It's like a little PDF.\n\n415\n00:23:06.965 --> 00:23:09.436\n&gt;&gt; Yeah, it doesn't, no, no.\n\n416\n00:23:09.436 --> 00:23:10.230\nYou could try!\n\n417\n00:23:10.230 --> 00:23:11.344\n&gt;&gt; [LAUGH] Yeah.\n\n418\n00:23:11.344 --> 00:23:13.201\nThat's gonna go-\n&gt;&gt; It might do some weird things.\n\n419\n00:23:13.201 --> 00:23:16.280\nSo the takeaway on the PDF loading is,\ndon't do that.\n\n420\n00:23:16.280 --> 00:23:17.627\n&gt;&gt; Yeah.\n[LAUGH]\n\n421\n00:23:17.627 --> 00:23:20.631\n&gt;&gt; So we've built our own module,\n\n422\n00:23:20.631 --> 00:23:22.940\nit's very powerful.\n\n423\n00:23:22.940 --> 00:23:24.880\nA great way to organize our code.\n\n424\n00:23:24.880 --> 00:23:29.860\nAnd we'll actually see how to use some\nof these built-in modules just to build\n\n425\n00:23:29.860 --> 00:23:33.797\nup our power and then maybe build\nsomething a little later on.\n\n426\n00:23:33.797 --> 00:23:35.768\n&gt;&gt; That very cool stuff Justine and\n\n427\n00:23:35.768 --> 00:23:40.734\nthis is impressive to be able to have the\nlibrary at nodejs.org you can go there,\n\n428\n00:23:40.734 --> 00:23:44.310\nfind a bunch of cool modules\nUse those in your code.\n\n429\n00:23:44.310 --> 00:23:47.446\nIf you need to, look for third-party\nmodules that are available for us.\n\n430\n00:23:47.446 --> 00:23:51.230\nAnd if worse comes to worst, you don't\nfind it, or you're just feeling creative,\n\n431\n00:23:51.230 --> 00:23:53.735\nyou can create your own module,\nbut do so responsibly or\n\n432\n00:23:53.735 --> 00:23:55.800\nit's not gonna work very well for you.\n\n433\n00:23:55.800 --> 00:23:59.647\nAnd as we kind saw with Just as example\nthere very cool stuff juts anything else\n\n434\n00:23:59.647 --> 00:24:01.847\nyou wanna add before\nwe close our Saturday?\n\n435\n00:24:01.847 --> 00:24:06.006\n&gt;&gt; Kind of a final thought for I have been\nsaying Common JS which is that module that\n\n436\n00:24:06.006 --> 00:24:08.289\nexport a way of organizing these modules.\n\n437\n00:24:08.289 --> 00:24:12.816\nThat is not only the only kind of module\norganization that was other ones called\n\n438\n00:24:12.816 --> 00:24:15.499\nAMD asynchronous module\ndefinition I think.\n\n439\n00:24:15.499 --> 00:24:17.416\nI would have to look that up but\n\n440\n00:24:17.416 --> 00:24:22.000\nmight use them a great deal as\nwell as some new ways to import.\n\n441\n00:24:22.000 --> 00:24:27.570\nAnd export using ECMAScript 6 or\nES2015, the new versions of JavaScript.\n\n442\n00:24:27.570 --> 00:24:32.180\nBut they haven't made their way into Node\nvery well so much, not that I've found.\n\n443\n00:24:32.180 --> 00:24:36.870\nNow, it may be, if you're watching this\nlater on or your have a different version,\n\n444\n00:24:36.870 --> 00:24:37.790\nthey may work for you.\n\n445\n00:24:37.790 --> 00:24:40.580\nBut you can import and\nexport like you would in Python or\n\n446\n00:24:40.580 --> 00:24:42.900\nRuby or various other languages.\n\n447\n00:24:42.900 --> 00:24:46.665\nBut for now CommonJS is\nthe way we're going with this.\n\n448\n00:24:46.665 --> 00:24:48.300\nModule.exports and require, and\n\n449\n00:24:48.300 --> 00:24:53.090\nit's a little bit of magic, it does not\nwork in the browser necessarily unless you\n\n450\n00:24:53.090 --> 00:24:57.847\nkind of make it work by adding\nadditional pieces for your project.\n\n451\n00:24:57.847 --> 00:25:02.981\n&gt;&gt; Well thanks for the info on that, could\nbe very helpful us as we move forward.\n\n452\n00:25:02.981 --> 00:25:05.183\nThat being said, we do thank you for\nyour time today and joining us.\n\n453\n00:25:05.183 --> 00:25:08.408\nWe do thank our audience for\nwatching as well, but it is that time for\n\n454\n00:25:08.408 --> 00:25:09.153\nus to sign off.\n\n455\n00:25:09.153 --> 00:25:11.441\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n456\n00:25:11.441 --> 00:25:13.020\n&gt;&gt; And I'm Justin Dennison.\n\n457\n00:25:13.020 --> 00:25:15.687\n&gt;&gt; And we'll see you next time.\n\n458\n00:25:15.687 --> 00:25:21.630\n[MUSIC]\n\n459\n00:25:21.630 --> 00:25:25.081\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "216551158"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at working with Events in NodeJS. Here they will give you a basic overview of what is meant by Events in the NodeJS platform and the general idea of how we can utilize these events in our programs.",
          "length": "1178",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-1-event_production_and_consumption-050417-PGM.00_19_23_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-1-event_production_and_consumption-050417-PGM.00_19_23_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-1-event_production_and_consumption-050417-PGM.00_19_23_18.Still001-sm.jpg",
          "title": "Event Production and Consumption",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:04.078\nWelcome to ITPRO.TV, I'm your host Don.\n\n2\n00:00:04.078 --> 00:00:05.907\n[CROSSTALK]\n\n3\n00:00:05.907 --> 00:00:08.410\n[MUSIC]\n\n4\n00:00:08.410 --> 00:00:12.540\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.540 --> 00:00:17.097\n&gt;&gt; All right, greetings everyone welcome\nto another exciting episode of ITPRO.TV.\n\n6\n00:00:17.097 --> 00:00:18.866\nI'm your host Daniel Lowrie, and\n\n7\n00:00:18.866 --> 00:00:22.710\nin today's episode we are back with\nmore of our introduction to Node.js.\n\n8\n00:00:22.710 --> 00:00:25.149\nAnd joining us in the studio\ncontinually here for\n\n9\n00:00:25.149 --> 00:00:28.980\nthe teach us all about this good stuff\nour dear friend Mr. Justin Dennison.\n\n10\n00:00:28.980 --> 00:00:30.180\nJustin, welcome back man.\n\n11\n00:00:30.180 --> 00:00:30.891\nHow's it going today?\n\n12\n00:00:30.891 --> 00:00:31.510\n&gt;&gt; It is going well.\n\n13\n00:00:31.510 --> 00:00:33.685\nI'm excited to be back and\nhow are you today Daniel?\n\n14\n00:00:33.685 --> 00:00:37.401\n&gt;&gt; Well,\nyou know I've got the gout goider.\n\n15\n00:00:37.401 --> 00:00:38.493\n&gt;&gt; Yeah.\n\n16\n00:00:38.493 --> 00:00:39.907\n&gt;&gt; You're just making nice.\n\n17\n00:00:39.907 --> 00:00:40.762\n&gt;&gt; Yes, I don't actually.\n\n18\n00:00:40.762 --> 00:00:42.177\n&gt;&gt; Okay, I'm good.\n\n19\n00:00:42.177 --> 00:00:44.190\n[LAUGH]\n&gt;&gt; All right, that's always good to hear.\n\n20\n00:00:44.190 --> 00:00:47.100\nSo yeah,\nI'm excited talk more about Node.js.\n\n21\n00:00:47.100 --> 00:00:48.760\nIt's something near and dear to my heart.\n\n22\n00:00:48.760 --> 00:00:49.671\n&gt;&gt; That's right.\nWell,\n\n23\n00:00:49.671 --> 00:00:53.540\ngetting back into Node.js today\nwe're gonna jump into events.\n\n24\n00:00:53.540 --> 00:00:59.140\nWe kinda mentioned events in a previous\nepisode specifically the event pool.\n\n25\n00:00:59.140 --> 00:01:02.670\nJustin now that was cool but\nit's a bit of an abstraction for us.\n\n26\n00:01:02.670 --> 00:01:06.181\nWe don't have a good solidification\nin our minds on what that might be.\n\n27\n00:01:06.181 --> 00:01:09.300\nI was wondering if you could take time\nto help us understand that better.\n\n28\n00:01:09.300 --> 00:01:11.440\n&gt;&gt; I will try my best Daniel.\n\n29\n00:01:11.440 --> 00:01:13.648\nSo I think you meant the event loop,\n\n30\n00:01:13.648 --> 00:01:17.414\nwhich is actually [CROSSTALK]\nthat by a pool of things, yeah.\n\n31\n00:01:17.414 --> 00:01:19.264\nActually pool and\nloop are switched around, right.\n\n32\n00:01:19.264 --> 00:01:20.724\n&gt;&gt; That's my dyslexia kicking in.\n\n33\n00:01:20.724 --> 00:01:21.770\n&gt;&gt; It will get you every time.\n\n34\n00:01:21.770 --> 00:01:26.630\nSo just for clarification we have the\nevent loop which is single threaded but\n\n35\n00:01:26.630 --> 00:01:31.120\nbehind that there's a pool of workers\nthat do work for the event loop.\n\n36\n00:01:31.120 --> 00:01:34.080\nNow this event loop,\nI've been talking about the event loop in\n\n37\n00:01:34.080 --> 00:01:36.170\nprevious episodes and\nwhat does that actually mean?\n\n38\n00:01:36.170 --> 00:01:39.553\nWell, we have these events that kinda\nfire off like, hey, I need to read,\n\n39\n00:01:39.553 --> 00:01:40.317\nI need to write.\n\n40\n00:01:40.317 --> 00:01:46.320\nI have some data, I need you to stop on\nconnection, on close, on error, right?\n\n41\n00:01:46.320 --> 00:01:50.860\nAll of these things can happen and\nwhat it does is it broadcasts an event.\n\n42\n00:01:50.860 --> 00:01:53.735\nAnd then the event loop goes,\nI know how to respond to that.\n\n43\n00:01:53.735 --> 00:01:57.065\nI'll schedule the response,\nI'll send it off to the pool, and\n\n44\n00:01:57.065 --> 00:01:58.770\nit'll get taken care of.\n\n45\n00:01:58.770 --> 00:02:02.960\nAnd well, events are incredibly\npowerful and kind of part of node.\n\n46\n00:02:02.960 --> 00:02:06.490\nAnd let's just take a look at and\nwhat events are, right.\n\n47\n00:02:06.490 --> 00:02:07.950\nSo let's take a look at my screen.\n\n48\n00:02:07.950 --> 00:02:11.860\nAnd we're gonna hope over into\nthe Node.js documentation.\n\n49\n00:02:11.860 --> 00:02:16.021\nSo we're gonna node js docs and 6.10.3.\n\n50\n00:02:16.021 --> 00:02:17.680\nSo that's the version we're using.\n\n51\n00:02:17.680 --> 00:02:20.380\nAnd we're gonna go down to events.\n\n52\n00:02:20.380 --> 00:02:21.490\nNow, events.\n\n53\n00:02:21.490 --> 00:02:22.470\nWhat are events?\n\n54\n00:02:22.470 --> 00:02:28.540\nOkay, so we have events, much of Node API\nis built around this a synchronicity.\n\n55\n00:02:28.540 --> 00:02:30.720\nAnd it gives you an example of an event.\n\n56\n00:02:30.720 --> 00:02:33.360\nSo like this is the name of the event.\n\n57\n00:02:33.360 --> 00:02:37.570\nWhen that is broadcast then\nNode will respond accordingly.\n\n58\n00:02:37.570 --> 00:02:42.460\nAnd this is kind of an abstraction over\nwhat's happening underneath in order to\n\n59\n00:02:42.460 --> 00:02:48.780\nwell, to allow you to queue up schedule\nhandle this asynchronous task and\n\n60\n00:02:48.780 --> 00:02:50.350\neasier to think about order.\n\n61\n00:02:50.350 --> 00:02:56.455\nSo events allow that scheduling,\nallow us just to get things done.\n\n62\n00:02:56.455 --> 00:03:00.832\nNow if we continue to look down through\nhere we keep seeing this my emitter,\n\n63\n00:03:00.832 --> 00:03:03.920\nmy emitter what is an event, right?\n\n64\n00:03:03.920 --> 00:03:07.170\nAn event, it's a class EventEmitter.\n\n65\n00:03:07.170 --> 00:03:09.770\nAnd this is kind of the core of node.\n\n66\n00:03:09.770 --> 00:03:14.520\nThis is something that took a while for\nme to wrap my head around.\n\n67\n00:03:14.520 --> 00:03:16.700\nBut it does help a great deal.\n\n68\n00:03:16.700 --> 00:03:21.557\nAnd if you come from a web programming\nkind of background then if you\n\n69\n00:03:21.557 --> 00:03:24.521\nhave click-events, hover-events.\n\n70\n00:03:24.521 --> 00:03:27.341\nPage change-events, things of that nature,\n\n71\n00:03:27.341 --> 00:03:31.432\nthose are gonna be very similar to\nwhat are broadcast around in Node.\n\n72\n00:03:31.432 --> 00:03:33.835\nSo this EventEmitter is the basis for\nthat.\n\n73\n00:03:33.835 --> 00:03:37.573\nAnd a lot of these other modules\nuse EventEmitters to well,\n\n74\n00:03:37.573 --> 00:03:41.930\nhandle the scheduling of task and\nwork in order to get things moving.\n\n75\n00:03:41.930 --> 00:03:46.190\nSo that's kind of our basis for\nnode as far as events go.\n\n76\n00:03:46.190 --> 00:03:48.920\n&gt;&gt; All right, well and that being said,\nwhat do we use Events for?\n\n77\n00:03:48.920 --> 00:03:53.220\nWhere's a good spot to say yeah,\nthat's the prime example of Events?\n\n78\n00:03:53.220 --> 00:03:57.760\n&gt;&gt; So I think the best thing to do is\nto use kind of a contrived example and\n\n79\n00:03:57.760 --> 00:04:00.450\njust see how things are working?\n\n80\n00:04:00.450 --> 00:04:04.280\nMainly because we can get really deep and\nwe'll continue to see events later on as\n\n81\n00:04:04.280 --> 00:04:07.920\nthis course progresses with\nusing like TCP servers.\n\n82\n00:04:07.920 --> 00:04:13.107\nTCP sockets, HTP even actually manage\nthe main node process streams,\n\n83\n00:04:13.107 --> 00:04:17.355\nall kinds of stuff are built on\ntop of this event based API.\n\n84\n00:04:17.355 --> 00:04:19.739\nSo I think we're gonna\nstart with Contrived, and\n\n85\n00:04:19.739 --> 00:04:21.458\nthen we're gonna expand that out.\n\n86\n00:04:21.458 --> 00:04:26.134\nAnd try to get a real good foundation\nof how the EventEmitter object or\n\n87\n00:04:26.134 --> 00:04:27.380\nmodule behaves.\n\n88\n00:04:27.380 --> 00:04:28.658\nSo let's take a look here.\n\n89\n00:04:28.658 --> 00:04:32.064\nI'm inside of an events folder and\nI'm just gonna clear that out.\n\n90\n00:04:32.064 --> 00:04:39.220\nAnd well, I'm actually going to create\na JavaScript file in order to run.\n\n91\n00:04:39.220 --> 00:04:43.680\nAnd I'm just gonna use VIM and it's gonna\nbe very simple so just stay with me here.\n\n92\n00:04:43.680 --> 00:04:48.310\nAnd let's just call it Contrived Digest.\n\n93\n00:04:48.310 --> 00:04:49.380\nDid I spell that right?\n\n94\n00:04:49.380 --> 00:04:50.301\nIt doesn't matter.\n\n95\n00:04:50.301 --> 00:04:50.940\n&gt;&gt; It doesn't.\n\n96\n00:04:50.940 --> 00:04:52.205\n&gt;&gt; It doesn't matter if I did.\n\n97\n00:04:52.205 --> 00:04:53.550\nSo what do we want?\n\n98\n00:04:53.550 --> 00:04:56.710\nWe actually want to bring in events.\n\n99\n00:04:56.710 --> 00:05:01.434\nAnd a lot of times you will see,\npeople say,\n\n100\n00:05:01.434 --> 00:05:05.550\nEventEmitter = require events.\n\n101\n00:05:05.550 --> 00:05:10.330\nAnd I'm going to double-check that\njust to make sure, Events, yeah.\n\n102\n00:05:10.330 --> 00:05:14.180\nSometimes I forget to leave off the s and\nthen I get errors.\n\n103\n00:05:14.180 --> 00:05:20.123\nSo the reason people say EventEmitter\nis it used to be that, at top level.\n\n104\n00:05:20.123 --> 00:05:23.390\nI would have to do something like\nthis in previous versions of Node.\n\n105\n00:05:25.030 --> 00:05:28.160\nI no longer have to do that,\nactually for a good while.\n\n106\n00:05:28.160 --> 00:05:31.660\nSo if you see code that's written like\nthi, it's an older version of Node.\n\n107\n00:05:31.660 --> 00:05:33.480\nAnd it's probably not gonna work.\n\n108\n00:05:33.480 --> 00:05:37.760\nAnd as a matter of fact I think there's\nsome kind of patching that goes on that\n\n109\n00:05:37.760 --> 00:05:40.560\nwill still allow you to\ndo that in some versions.\n\n110\n00:05:40.560 --> 00:05:44.004\nBut eventually it's going\nto be a top level import.\n\n111\n00:05:44.004 --> 00:05:48.658\nAnd what I mean by top level is if I\nrequire events that's essentially what I'm\n\n112\n00:05:48.658 --> 00:05:50.858\ngetting when I bring in that module.\n\n113\n00:05:50.858 --> 00:05:57.000\nSo let's say I want to create\na new EventEmitter, all right.\n\n114\n00:05:57.000 --> 00:06:00.684\nAnd let's just say ee for\n\n115\n00:06:00.684 --> 00:06:06.304\nevent emitter and new EventEmitter.\n\n116\n00:06:06.304 --> 00:06:10.458\nAnd we just gonna\nconsole.log EventEmitter for\n\n117\n00:06:10.458 --> 00:06:15.329\nnow just to see what that is so\ncontrive and what do I have?\n\n118\n00:06:15.329 --> 00:06:18.390\nI have an EventEmitter, domain null,\n\n119\n00:06:18.390 --> 00:06:23.880\nokay we'll see what domain is but\n_events, notice it's an object.\n\n120\n00:06:23.880 --> 00:06:29.366\nOkay, that's interesting _eventsCount,\nand it's 0.\n\n121\n00:06:29.366 --> 00:06:32.320\nAnd then _maxListeners,\nwhat is a listener?\n\n122\n00:06:32.320 --> 00:06:36.734\nWell, you can register functions that\nare called callback functions that\n\n123\n00:06:36.734 --> 00:06:38.705\nare listening for these events.\n\n124\n00:06:38.705 --> 00:06:44.410\nAnd those events fire off whenever\nwe have a broadcast of these events.\n\n125\n00:06:44.410 --> 00:06:48.757\nThink of it this way, if you're sitting\nin a theater and someone runs in and\n\n126\n00:06:48.757 --> 00:06:50.417\nyells fire, what do you do?\n\n127\n00:06:50.417 --> 00:06:51.041\n[CROSSTALK] Well you run.\n\n128\n00:06:51.041 --> 00:06:51.956\n&gt;&gt; You get popcorn.\n\n129\n00:06:51.956 --> 00:06:53.600\n[LAUGH]\n&gt;&gt; Yeah, you got your popcorn.\n\n130\n00:06:53.600 --> 00:06:54.820\nYou run, right?\n\n131\n00:06:54.820 --> 00:07:00.567\nOr if someone pulls a fire alarm anywhere\nyou are you respond to that event.\n\n132\n00:07:00.567 --> 00:07:04.372\nYou kinda have this well, it's a callback\nin the back of your mind that says,\n\n133\n00:07:04.372 --> 00:07:08.537\nhey we should probably respond accordingly\nbecause that's a registered event with\n\n134\n00:07:08.537 --> 00:07:09.620\nyou, right?\n\n135\n00:07:09.620 --> 00:07:14.960\nIf you're out of breath you typically\nstart getting really focused on breathing\n\n136\n00:07:14.960 --> 00:07:17.160\nand that's one of those\nkind of callback events.\n\n137\n00:07:17.160 --> 00:07:21.520\nSo that's the best way that\nI would think about it.\n\n138\n00:07:21.520 --> 00:07:26.290\nAgain, we can go outside the realm of\nthose very simplistic ones in the case of\n\n139\n00:07:26.290 --> 00:07:31.240\nNode, but events and eventsCounts,\nwell those are talking about that.\n\n140\n00:07:31.240 --> 00:07:33.750\nBut let's go to research\nthis maxListeners thing.\n\n141\n00:07:33.750 --> 00:07:37.947\nSo I'm on this Events page and\nI'm going to command + F, or\n\n142\n00:07:37.947 --> 00:07:39.770\nCtrl + F for those on Windows.\n\n143\n00:07:39.770 --> 00:07:44.030\nAnd so you max listeners and\n\n144\n00:07:44.030 --> 00:07:48.550\nwell that's the only one that I have,\nwhat does that mean?\n\n145\n00:07:48.550 --> 00:07:50.966\nI don't even like the fact that,\n\n146\n00:07:50.966 --> 00:07:55.247\nwell set max listeners I wonder\nif that might give me some idea.\n\n147\n00:07:55.247 --> 00:07:58.020\nBy default the EventEmitters will print\na warning if more than ten listeners.\n\n148\n00:07:58.020 --> 00:08:02.063\nSo I had more than ten functions\nresponding to a specific event.\n\n149\n00:08:02.063 --> 00:08:05.296\nAnd this make a little more sense here\nin just a moment when I actually wire\n\n150\n00:08:05.296 --> 00:08:06.420\nup an event.\n\n151\n00:08:06.420 --> 00:08:09.228\nThis is a useful default but\nyou can change this.\n\n152\n00:08:09.228 --> 00:08:11.615\nAnd just let this go as many as you want,\nor\n\n153\n00:08:11.615 --> 00:08:14.768\nyou can make it to where no\nevents can actually listen.\n\n154\n00:08:14.768 --> 00:08:18.630\nOr no listeners can be listening for\nan event, right?\n\n155\n00:08:18.630 --> 00:08:23.585\nSo it's kinda like putting in earplugs for\nthat specific event.\n\n156\n00:08:23.585 --> 00:08:26.000\nSo we have this EventEmitter object.\n\n157\n00:08:26.000 --> 00:08:28.550\nIt doesn't look very special,\nit's kind of simple.\n\n158\n00:08:28.550 --> 00:08:29.590\nWhat does it do?\n\n159\n00:08:29.590 --> 00:08:31.502\nWell, let's look here.\n\n160\n00:08:31.502 --> 00:08:35.420\nAnd I'm gonna say EE on.\n\n161\n00:08:35.420 --> 00:08:36.380\nAnd what is on?\n\n162\n00:08:36.380 --> 00:08:44.080\nThat's saying I want to register\na listener for this specific event, okay?\n\n163\n00:08:44.080 --> 00:08:45.150\nAnd how do we do that?\n\n164\n00:08:45.150 --> 00:08:49.680\nWell we name the event and\nwell how about run, right?\n\n165\n00:08:49.680 --> 00:08:55.108\nSomeone yells run, kind of our first\ninstinct is well, I'm gonna run.\n\n166\n00:08:55.108 --> 00:08:59.798\nAnd that's gonna run a function and\nI am going to use some new arrow function,\n\n167\n00:08:59.798 --> 00:09:02.050\nfat arrow style functions for this.\n\n168\n00:09:02.050 --> 00:09:06.896\nAnd these are ES2016 or ES2015,\n\n169\n00:09:06.896 --> 00:09:13.208\nES6 name is there and\nI'm just going to printout.\n\n170\n00:09:13.208 --> 00:09:17.320\nRunning now, all right?\n\n171\n00:09:17.320 --> 00:09:21.350\nNow notice that I said\nEventEmitter on run, okay?\n\n172\n00:09:21.350 --> 00:09:27.500\nWell let's go see this print out here and\nwait for it.\n\n173\n00:09:27.500 --> 00:09:31.378\nThere we go forget what the in was, okay?\n\n174\n00:09:31.378 --> 00:09:36.738\nNotice _events and events counts\nwell those have changed, okay.\n\n175\n00:09:36.738 --> 00:09:39.489\nSo I've changed something\nabout the EventEmitter,\n\n176\n00:09:39.489 --> 00:09:42.530\nit now knows that I'm listening for\nan event.\n\n177\n00:09:42.530 --> 00:09:44.190\nNothing else has changed though right.\n\n178\n00:09:44.190 --> 00:09:45.870\nI've just, I've done the on.\n\n179\n00:09:45.870 --> 00:09:52.690\nI haven't seen the print out of running\nnow, I've never seen that, okay.\n\n180\n00:09:52.690 --> 00:09:54.660\nBut where does the power come?\n\n181\n00:09:54.660 --> 00:09:57.590\nWell, let's say that I write some code and\n\n182\n00:09:57.590 --> 00:10:01.370\nthen later on I'm like I need\nto run that EventEmitter.\n\n183\n00:10:01.370 --> 00:10:07.530\nI need to run that function so\nI can go ee emit run.\n\n184\n00:10:07.530 --> 00:10:08.720\nAll right, I'm broadcasting.\n\n185\n00:10:08.720 --> 00:10:09.930\nHey run!\n\n186\n00:10:09.930 --> 00:10:12.467\nSo what happens now is.\n\n187\n00:10:15.931 --> 00:10:17.790\nIt actually prints out running now.\n\n188\n00:10:17.790 --> 00:10:21.320\nIt runs that function when I emit the,\n\n189\n00:10:21.320 --> 00:10:25.020\nI kinda broadcast around hey,\nyou need to be running now.\n\n190\n00:10:25.020 --> 00:10:29.597\nWell, what about if I\ndo that multiple times?\n\n191\n00:10:29.597 --> 00:10:35.226\nEe emit ('run') ee.emit('run') and\n\n192\n00:10:35.226 --> 00:10:40.030\nwell that's very interesting.\n\n193\n00:10:40.030 --> 00:10:45.070\nNode, contrive, running now,\nrunning now, running now you\n\n194\n00:10:45.070 --> 00:10:49.280\nare like that's just the way of triggering\nthese various call back functions.\n\n195\n00:10:49.280 --> 00:10:55.829\nWhere the real power comes in is with this\nkind of message you can pass along data.\n\n196\n00:10:55.829 --> 00:11:00.261\nYou can send information back to this\nfunction which can give it an idea of what\n\n197\n00:11:00.261 --> 00:11:01.840\nis the state of execution?\n\n198\n00:11:01.840 --> 00:11:04.800\nWhat is the state of what's going on?\n\n199\n00:11:04.800 --> 00:11:06.290\nAnd let's just take a look at that.\n\n200\n00:11:07.940 --> 00:11:15.258\nSo now I'm going to change this function\nhere and say it's ringing in some data.\n\n201\n00:11:15.258 --> 00:11:19.760\nAnd- Console.log.\n\n202\n00:11:19.760 --> 00:11:24.507\nI'm just gonna log the data and\n\n203\n00:11:24.507 --> 00:11:29.076\nI'm going to say count = 0.\n\n204\n00:11:29.076 --> 00:11:32.764\nAnd I'm gonna pass count as\na second argument, all right?\n\n205\n00:11:32.764 --> 00:11:39.364\nAnd then plus equals 10.\n\n206\n00:11:39.364 --> 00:11:43.500\nAnd I wanna pass in count to\nthe second emit, all right?\n\n207\n00:11:43.500 --> 00:11:47.950\nBut I'm gonna leave the last one empty and\nwe'll see why in just a moment.\n\n208\n00:11:49.200 --> 00:11:53.440\nSo now, running now it prints out zero,\nrunning now prints out ten,\n\n209\n00:11:53.440 --> 00:11:55.130\nrunning now undefined.\n\n210\n00:11:55.130 --> 00:11:58.890\nSo if I don't pass that in\nit's undefined by default.\n\n211\n00:11:58.890 --> 00:12:01.822\nWell, that's fine if I don't\nneed that information but\n\n212\n00:12:01.822 --> 00:12:04.400\nwhat if I always wanna pass back account,\nright?\n\n213\n00:12:04.400 --> 00:12:06.950\nI wanna pass some kind of data structure\n\n214\n00:12:06.950 --> 00:12:10.610\nthen I can have this event meter\njust list it's just waiting.\n\n215\n00:12:10.610 --> 00:12:15.360\nIt says waiting to respond and you can\nalmost set it up as an observer, right?\n\n216\n00:12:15.360 --> 00:12:17.550\nIf I add something like I sign up for\n\n217\n00:12:17.550 --> 00:12:23.030\na list, like I log in and there's\nan EventEmitter running on my server.\n\n218\n00:12:23.030 --> 00:12:27.355\nAnd it sees that that login happens and\nI broadcast hey, log in.\n\n219\n00:12:27.355 --> 00:12:32.040\nThen this EventEmitter could then keep\ntrack of how many people are logged in at\n\n220\n00:12:32.040 --> 00:12:34.640\nany one time, and\nthen you could query against that.\n\n221\n00:12:34.640 --> 00:12:37.530\nThat's a very simplified\nI won't necessarily\n\n222\n00:12:37.530 --> 00:12:39.350\nuse that production in this case.\n\n223\n00:12:39.350 --> 00:12:41.870\nBut just to give you some\nidea of what's going on.\n\n224\n00:12:41.870 --> 00:12:47.020\nNow this data on,\non has kind of a sibling register.\n\n225\n00:12:48.190 --> 00:12:52.152\nAnd we'll see here contrive, probably\nI should have picked the better name,\n\n226\n00:12:52.152 --> 00:12:53.543\nI'm on trouble with that.\n\n227\n00:12:53.543 --> 00:12:55.856\n[CROSSTALK]\n&gt;&gt; [LAUGH] You're getting that first thing\n\n228\n00:12:55.856 --> 00:12:56.614\nin attempt.\n\n229\n00:12:56.614 --> 00:12:58.800\n&gt;&gt; Yeah the first finger.\n\n230\n00:12:58.800 --> 00:13:01.020\nSo ee.wants, right?\n\n231\n00:13:01.020 --> 00:13:03.990\nSo instead of .on, .wants.\n\n232\n00:13:03.990 --> 00:13:06.598\nAnd now if I node.\n\n233\n00:13:06.598 --> 00:13:10.320\n&gt;&gt; I think if this is going to only later\non one time instead of continually.\n\n234\n00:13:10.320 --> 00:13:10.980\n&gt;&gt; Exactly.\n\n235\n00:13:10.980 --> 00:13:15.260\nSo you'll see running now zero,\n\n236\n00:13:15.260 --> 00:13:20.600\nnone of the other inits well,\nafter it ran that first one,\n\n237\n00:13:20.600 --> 00:13:25.070\nright after it ran that function and\nwhat function am I talking about?\n\n238\n00:13:25.070 --> 00:13:26.670\nThis function right here.\n\n239\n00:13:26.670 --> 00:13:29.930\nAfter it ran that function\nit deregistered itself.\n\n240\n00:13:31.270 --> 00:13:36.420\nWell, that leads to the question If\nit can be registered with DOT once,\n\n241\n00:13:36.420 --> 00:13:38.810\ncan I do that by myself?\n\n242\n00:13:38.810 --> 00:13:41.530\nCan I say get rid of this, right?\n\n243\n00:13:41.530 --> 00:13:43.840\nWell let's go to the documentation and\n\n244\n00:13:43.840 --> 00:13:46.960\ntake a look and\nreading the documentation is important.\n\n245\n00:13:46.960 --> 00:13:52.640\nSo we come to the top here and we look\nthrough new listener, remove listener,\n\n246\n00:13:52.640 --> 00:13:57.860\nemit event,\nI don't even see on here, right?\n\n247\n00:13:57.860 --> 00:14:04.717\nWhat's really odd is it uses on\nright here without it being listed.\n\n248\n00:14:04.717 --> 00:14:06.503\nThere it is, I, I, I.\n\n249\n00:14:06.503 --> 00:14:09.076\n&gt;&gt; [LAUGH]\n&gt;&gt; You gotta zoom in real close,\n\n250\n00:14:09.076 --> 00:14:10.820\nright there.\n\n251\n00:14:10.820 --> 00:14:13.784\nSo okay, there's on once.\n\n252\n00:14:13.784 --> 00:14:19.237\nThere's removeAllListeners,\nremoveListener,\n\n253\n00:14:19.237 --> 00:14:23.060\nand addListener, removeListener.\n\n254\n00:14:23.060 --> 00:14:24.810\nI wonder if I can remove.\n\n255\n00:14:25.910 --> 00:14:28.980\nRemove listener, event name,\nand the actual listener.\n\n256\n00:14:28.980 --> 00:14:33.595\nOkay, so if I go down here and\nlook at this other remove and\n\n257\n00:14:33.595 --> 00:14:36.864\nthere we go, I can remove AllListener,\n\n258\n00:14:36.864 --> 00:14:42.078\nwhich means anything that's\nattached to event just goes away.\n\n259\n00:14:42.078 --> 00:14:47.940\nOr I can remove a listener by event name,\nbut I have to pass it the listener object.\n\n260\n00:14:47.940 --> 00:14:54.480\nSo notice in this example that\nthis callback or the function that\n\n261\n00:14:54.480 --> 00:15:00.820\nruns after the event's being kind of\ncuter, it's running but it's named now.\n\n262\n00:15:02.110 --> 00:15:05.200\nSo I am saying all connections call back\n\n263\n00:15:05.200 --> 00:15:09.690\nremove this net from the connection\nevent that is call back.\n\n264\n00:15:12.280 --> 00:15:13.330\nThat's kinda add.\n\n265\n00:15:13.330 --> 00:15:19.270\nWhat that means is, what that means is I'm\ntyping and I'm already where I want to be.\n\n266\n00:15:19.270 --> 00:15:23.890\nI'm using kinda of an inline\nanonymous function, I have,\n\n267\n00:15:23.890 --> 00:15:28.200\nI don't have the ability to\nremove this listener by myself.\n\n268\n00:15:28.200 --> 00:15:32.150\nBehind the scenes what I'm using once,\nit's kinda doing some magic behind\n\n269\n00:15:32.150 --> 00:15:35.280\nthe scenes that says okay,\nI'm gonna hold on to a reference.\n\n270\n00:15:35.280 --> 00:15:37.350\nAnd then after this is done\nI'm just gonna go ahead and\n\n271\n00:15:37.350 --> 00:15:40.850\nremove it immediately, so\nyou have to be careful.\n\n272\n00:15:40.850 --> 00:15:45.223\nIf I wanted to remove this later I need\nto extract this into a separate function.\n\n273\n00:15:45.223 --> 00:15:53.723\nAnd we will just say\nsomething equals data and\n\n274\n00:15:53.723 --> 00:15:57.977\nconsole log running.\n\n275\n00:16:00.973 --> 00:16:07.890\nNow and console log data.\n\n276\n00:16:09.320 --> 00:16:14.757\nNow what I can do is remove\nthis anonymous function here.\n\n277\n00:16:14.757 --> 00:16:18.909\nI forgot I was in dim and\nsay something, right?\n\n278\n00:16:18.909 --> 00:16:22.162\nAnd in all honesty that\nreads a little better.\n\n279\n00:16:22.162 --> 00:16:26.711\nThat's gona be more clear about what's\ngoing onvusing named functions like this.\n\n280\n00:16:26.711 --> 00:16:30.158\nNow I'm using a function expression,\nso I have to define it beforehand.\n\n281\n00:16:30.158 --> 00:16:34.357\nYou'll see me later on, I'll actually use\nname functions that are hoisted to the top\n\n282\n00:16:34.357 --> 00:16:36.586\nof the file so\nI can put them all at the bottom.\n\n283\n00:16:36.586 --> 00:16:41.109\nAnd kind of organize my\ncode little differently But\n\n284\n00:16:41.109 --> 00:16:45.115\nnow that I have a name to this,\nI can say ee on.\n\n285\n00:16:45.115 --> 00:16:50.170\nI'm gonna admit, admit, admit, and\nthen I'm gonna say ee removelistener.\n\n286\n00:16:51.250 --> 00:16:53.430\nAnd what listener am I\ngoing to remove from?\n\n287\n00:16:53.430 --> 00:16:58.860\nThe run and I'm gonna remove\nthe function something, all right?\n\n288\n00:16:58.860 --> 00:17:01.610\nSo now contrive.\n\n289\n00:17:01.610 --> 00:17:06.490\nIt runs the first two but then I remove\nit immediately and boom I now have\n\n290\n00:17:06.490 --> 00:17:13.160\nthe ability to add and keep add for\nonly one run and remove listeners.\n\n291\n00:17:13.160 --> 00:17:16.210\nAnd now I have this kind of watcher,\nthis observer so to speak.\n\n292\n00:17:16.210 --> 00:17:20.640\n&gt;&gt; So Justin, why would we, you had\nthree I guess their called listeners,\n\n293\n00:17:20.640 --> 00:17:22.960\nyou had ee and then it was zero.\n\n294\n00:17:22.960 --> 00:17:25.310\nThen it was ten and\nthen you have the undefined.\n\n295\n00:17:25.310 --> 00:17:29.110\nWhy make the undefined portion at\nall if you just have to go in and\n\n296\n00:17:29.110 --> 00:17:30.773\ncreate this to shut it off?\n\n297\n00:17:30.773 --> 00:17:34.840\n&gt;&gt; So undefined actually originates\nfrom the passed in data.\n\n298\n00:17:34.840 --> 00:17:38.010\nIn that last ee admit I didn't\npass in a second argument.\n\n299\n00:17:38.010 --> 00:17:42.170\nSo JavaScript panels then says hey,\nyou didn't pass anything it's undefined.\n\n300\n00:17:42.170 --> 00:17:45.740\nAnd since undefined it just\ndoesn't have any data to run of.\n\n301\n00:17:45.740 --> 00:17:50.340\nSo that ends up being very\ncontext specific I need to know\n\n302\n00:17:50.340 --> 00:17:54.440\nhow I'm using these kind of\nevent listeners in context.\n\n303\n00:17:54.440 --> 00:17:57.570\nBut case in point, if I'm doing\nsome kind of web programming and\n\n304\n00:17:57.570 --> 00:18:02.190\nI have a click Event, then I get where\nthe click event originated from.\n\n305\n00:18:02.190 --> 00:18:05.880\nSo the button that I click does\nactually what the passed in as data.\n\n306\n00:18:05.880 --> 00:18:09.690\nBut there are still other things that may\nbe undefined because they're undefined\n\n307\n00:18:09.690 --> 00:18:10.880\nabout the button.\n\n308\n00:18:10.880 --> 00:18:13.480\nIn this I can pass anything I want.\n\n309\n00:18:13.480 --> 00:18:14.660\nI passed a number.\n\n310\n00:18:14.660 --> 00:18:16.650\nI could of easily have passed an object.\n\n311\n00:18:16.650 --> 00:18:20.420\nIf it just gives me a snapshot of\nthe state of my application so\n\n312\n00:18:20.420 --> 00:18:23.610\nI could easily test for\nthat by saying if data do this.\n\n313\n00:18:23.610 --> 00:18:27.624\nOtherwise just pronounce something and\nkeep on keeping on.\n\n314\n00:18:27.624 --> 00:18:28.790\n&gt;&gt; Okay, gotcha.\n\n315\n00:18:28.790 --> 00:18:33.350\nWell this definitely seems like a bit\nof witch craftery going on here.\n\n316\n00:18:33.350 --> 00:18:37.460\nI [LAUGH], I was wondering maybe you could\nextrapolate a little kind of the behind\n\n317\n00:18:37.460 --> 00:18:38.144\nthe scenes.\n\n318\n00:18:38.144 --> 00:18:43.040\nRemove the veil as it were From what's\ngoing on and how this is actually working.\n\n319\n00:18:43.040 --> 00:18:45.680\n&gt;&gt; Daniel, I am one step ahead of you.\n\n320\n00:18:45.680 --> 00:18:48.290\nAnd I would like to do that but I'm not\nsure we have enough time in this episode.\n\n321\n00:18:48.290 --> 00:18:53.250\nI know it is a little shorter but\nI would like to give\n\n322\n00:18:53.250 --> 00:18:58.800\na full look so I think we need to wait for\nanother episode.\n\n323\n00:18:58.800 --> 00:19:00.930\n&gt;&gt; Sounds good to me,\nI'm looking forward to seeing this\n\n324\n00:19:00.930 --> 00:19:01.740\n&gt;&gt; I'm pretty interested,\n\n325\n00:19:01.740 --> 00:19:02.655\nhopefully you are as well.\n\n326\n00:19:02.655 --> 00:19:07.200\n[LAUGH] And how this is not just a magic\nspell he's casting over his computer here.\n\n327\n00:19:07.200 --> 00:19:08.598\nThere's actual logic behind this.\n\n328\n00:19:08.598 --> 00:19:09.950\nAnd we look forward to seeing that.\n\n329\n00:19:09.950 --> 00:19:10.704\nSo we'll do that.\n\n330\n00:19:10.704 --> 00:19:13.700\nWe'll call this a short episode but\ndefinitely come back for\n\n331\n00:19:13.700 --> 00:19:17.800\nthe part two on this to see how all this\nis actually working behind the scenes.\n\n332\n00:19:17.800 --> 00:19:20.521\nThat being said, we're gonna go ahead and\nsign off for ITProTV.\n\n333\n00:19:20.521 --> 00:19:21.980\nI've been your host, Daniel Lowrie.\n\n334\n00:19:21.980 --> 00:19:23.110\n&gt;&gt; And I'm Justin Dennison.\n\n335\n00:19:23.110 --> 00:19:25.020\n&gt;&gt; And I'll see you next time.\n\n336\n00:19:25.020 --> 00:19:31.410\n[MUSIC]\n\n337\n00:19:31.410 --> 00:19:34.638\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "216551563"
        },
        {
          "description": "In this episode, Daniel and Justin create a custom module to explore and explain how NodeJS produces and consumes an emitting Event.",
          "length": "1400",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-2-event_production_and_consumption-050417-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-2-event_production_and_consumption-050417-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-4-1-2-event_production_and_consumption-050417-high-sm.jpg",
          "title": "Event Production and Consumption Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.495\nWelcome to ITProTV.\n\n2\n00:00:01.495 --> 00:00:02.802\nI'm your host Don Pezet.\n\n3\n00:00:02.802 --> 00:00:06.275\n[CROSSTALK]\n\n4\n00:00:06.275 --> 00:00:08.414\n[MUSIC]\n\n5\n00:00:08.414 --> 00:00:12.268\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.268 --> 00:00:12.851\n&gt;&gt; All right,\n\n7\n00:00:12.851 --> 00:00:16.538\ngreetings everyone and welcome back\nto another great episode of ITProTV.\n\n8\n00:00:16.538 --> 00:00:17.690\nI'm your host Daniel Lowrie.\n\n9\n00:00:17.690 --> 00:00:20.480\nAnd in today's episode well\nwe're continuing on on our\n\n10\n00:00:20.480 --> 00:00:22.520\nintroduction to Node JS.\n\n11\n00:00:22.520 --> 00:00:25.474\nActually coming back for\na part two on events.\n\n12\n00:00:25.474 --> 00:00:28.340\nJoining us in the studio again our\ngood friend Mr. Justin Dennison.\n\n13\n00:00:28.340 --> 00:00:29.150\nJustin, welcome back sir.\n\n14\n00:00:29.150 --> 00:00:29.990\nHow's it going today?\n\n15\n00:00:29.990 --> 00:00:32.080\n&gt;&gt; It is going well,\nI'm excited to be back.\n\n16\n00:00:32.080 --> 00:00:35.730\nWe're actually gonna see some kind\nof behind the scenes stuff, right?\n\n17\n00:00:35.730 --> 00:00:39.880\n&gt;&gt; That's right, because we looked at\nadvanced in the previous episode and\n\n18\n00:00:39.880 --> 00:00:41.080\nI was like, all right Justin.\n\n19\n00:00:41.080 --> 00:00:44.050\nI know this is working,\nbut how is it working?\n\n20\n00:00:44.050 --> 00:00:45.280\nCan you give us a little more?\n\n21\n00:00:45.280 --> 00:00:49.960\nRemove the veil, as it were, so we could\nsee how this is actually doing something.\n\n22\n00:00:49.960 --> 00:00:52.904\nAnd, Justin, you agreed to that,\nsurprisingly, I was amazed.\n\n23\n00:00:52.904 --> 00:00:55.465\n[LAUGH]\n&gt;&gt; I did agree, and as a matter of fact,\n\n24\n00:00:55.465 --> 00:00:59.610\nwe're gonna build our own event meter,\nour own events module.\n\n25\n00:00:59.610 --> 00:01:01.290\nJust to see well, how's this working?\n\n26\n00:01:01.290 --> 00:01:02.910\nHow's this kind of queuing up?\n\n27\n00:01:02.910 --> 00:01:06.270\nAnd well, that's,\nI think that's the easiest way to see,\n\n28\n00:01:06.270 --> 00:01:08.729\nwell this isn't as complex\nas I thought it was.\n\n29\n00:01:08.729 --> 00:01:12.159\nIt's not gonna be as robust as\nthe one built into Node, but\n\n30\n00:01:12.159 --> 00:01:15.600\nwill give us an idea of how that on and\nemit functions work.\n\n31\n00:01:15.600 --> 00:01:17.130\nAnd how it keeps track of these.\n\n32\n00:01:17.130 --> 00:01:20.830\nSo let's go ahead and, I think there's\nno better time than now to get started.\n\n33\n00:01:20.830 --> 00:01:24.790\nSo I'm back in my events folder,\nand I still have that contrive.js.\n\n34\n00:01:24.790 --> 00:01:26.570\nWe're gonna leave that there for now,\n\n35\n00:01:26.570 --> 00:01:31.440\nwell, because, I wanna make sure that\nthis still works as it did before.\n\n36\n00:01:31.440 --> 00:01:33.000\nAnd maybe it will, maybe it won't.\n\n37\n00:01:33.000 --> 00:01:37.080\nBut, I'm gonna create a new\none called emitter.js.\n\n38\n00:01:37.080 --> 00:01:40.281\nAnd this is my module,\nI'm building a custom module now.\n\n39\n00:01:40.281 --> 00:01:44.799\nWe've learned a little bit about modules,\nwe've learned a little bit about Node,\n\n40\n00:01:44.799 --> 00:01:46.660\nas the thing that it is.\n\n41\n00:01:46.660 --> 00:01:49.770\nAnd now we're gonna build our own custom\nmodule that we could use in another file.\n\n42\n00:01:49.770 --> 00:01:52.880\nSo we're gonna kind of\nsynthesize some of those ideas.\n\n43\n00:01:52.880 --> 00:01:54.876\nSo what do I wanna do?\n\n44\n00:01:54.876 --> 00:01:58.013\nOkay so I'm gonna create an emitter and\n\n45\n00:01:58.013 --> 00:02:01.730\nactually I'm going to\nmake this very simply.\n\n46\n00:02:01.730 --> 00:02:08.992\nI'm just gonna create an object and\nI'm gonna say module.exports = Emitter.\n\n47\n00:02:08.992 --> 00:02:12.370\nNow, from inside,\nthis is just what will be available to me.\n\n48\n00:02:12.370 --> 00:02:14.220\nI'll have this Emitter object.\n\n49\n00:02:14.220 --> 00:02:18.780\nIt is a standard object so I won't\nnecessarily be able to do new on this,\n\n50\n00:02:18.780 --> 00:02:20.880\nright, this is not a constructor function.\n\n51\n00:02:20.880 --> 00:02:23.437\nSo very simplified in this form, and\n\n52\n00:02:23.437 --> 00:02:27.487\nI'm just gonna start by I'm\njust adding something here.\n\n53\n00:02:27.487 --> 00:02:32.420\nI'm gonna create events and\nempty array in.\n\n54\n00:02:32.420 --> 00:02:34.590\nThat's probably a good\nstarting point there.\n\n55\n00:02:34.590 --> 00:02:37.170\n&gt;&gt; Now Justin, why would you start\nthere with just an empty array?\n\n56\n00:02:37.170 --> 00:02:40.520\n&gt;&gt; Well, whenever you're creating\nthese kind of object literal modules,\n\n57\n00:02:40.520 --> 00:02:42.440\na lot of times you need\nsomewhere to store data.\n\n58\n00:02:42.440 --> 00:02:44.950\nAnd if you need a collection\nof data then you just\n\n59\n00:02:44.950 --> 00:02:47.240\nkind of instantiate with an empty array.\n\n60\n00:02:47.240 --> 00:02:48.870\nAnd that's where we're gonna start.\n\n61\n00:02:48.870 --> 00:02:52.250\nAgain, this is kind of an object literal,\nso I get one of these,\n\n62\n00:02:52.250 --> 00:02:57.240\nI can make copies using object.create or\nobject.assign, and things of that nature.\n\n63\n00:02:57.240 --> 00:03:01.910\nBut we're gonna see how this\nwork as kind of a while, okay?\n\n64\n00:03:01.910 --> 00:03:07.330\nSo I'm using this array\nhere to hold my event.\n\n65\n00:03:07.330 --> 00:03:10.710\nNow, we may find that\nthe array doesn't work for us.\n\n66\n00:03:10.710 --> 00:03:12.560\nMaybe we need to change\nthe data structure.\n\n67\n00:03:12.560 --> 00:03:14.740\nBut kinda thinking through this with you.\n\n68\n00:03:14.740 --> 00:03:16.950\nAnd hopefully, you're following along.\n\n69\n00:03:16.950 --> 00:03:19.630\nI just wanna make sure that I have\nthis module kind of wired up.\n\n70\n00:03:19.630 --> 00:03:21.560\nThat I could import it into another file.\n\n71\n00:03:21.560 --> 00:03:22.560\nAnd that it works.\n\n72\n00:03:22.560 --> 00:03:25.050\nAs a matter of fact,\nI'm gonna import it into the REPL and\n\n73\n00:03:25.050 --> 00:03:28.580\nmake sure that everything imports and\nI get what I expect to get.\n\n74\n00:03:28.580 --> 00:03:31.260\nSo, I'm going to create.\n\n75\n00:03:32.420 --> 00:03:35.520\nI don't actually have to type the word\nREPL, just have to type node.\n\n76\n00:03:35.520 --> 00:03:37.217\nThat's an important difference there.\n\n77\n00:03:37.217 --> 00:03:41.074\nI'm gonna clear that out there and\n\n78\n00:03:41.074 --> 00:03:46.830\nI'm going to say emitter\n= require ./emitter.\n\n79\n00:03:46.830 --> 00:03:49.660\nAll right, so\nI didn't get any errors so that's good.\n\n80\n00:03:49.660 --> 00:03:52.350\nAnd what I got was an object with _events.\n\n81\n00:03:52.350 --> 00:03:56.200\nNow this underscore,\nthis kind of in the node community but\n\n82\n00:03:56.200 --> 00:04:01.520\nhas been in other communities, there's no\nway to easily make values private, right?\n\n83\n00:04:01.520 --> 00:04:06.640\nIn this module I could but\nthis object needs to keep track.\n\n84\n00:04:06.640 --> 00:04:10.620\nSo this underscore is a way of saying,\nhey, I'm gonna let you see this but\n\n85\n00:04:10.620 --> 00:04:12.010\nyou shouldn't mess with this directly.\n\n86\n00:04:12.010 --> 00:04:14.100\nYou can access it but you shouldn't, okay?\n\n87\n00:04:14.100 --> 00:04:17.130\nSo, this is like pseudo\nprivate information.\n\n88\n00:04:17.130 --> 00:04:19.480\nAll right so, it does import.\n\n89\n00:04:19.480 --> 00:04:22.689\nNow, we just have a few methods\nthat we want to implement,\n\n90\n00:04:22.689 --> 00:04:25.579\na few things that we wanna get up and\nstart with here.\n\n91\n00:04:25.579 --> 00:04:29.645\nAll right, so that is not vim, so.\n\n92\n00:04:29.645 --> 00:04:32.586\n&gt;&gt; [LAUGH]\n&gt;&gt; So :WQ will not get me out of the REPL\n\n93\n00:04:32.586 --> 00:04:34.040\nbut that is okay.\n\n94\n00:04:34.040 --> 00:04:36.370\nSo I'm gonna hop in here and\nthere's a few other things.\n\n95\n00:04:36.370 --> 00:04:41.280\nSo I'm gonna cover the two basic ones,\nand that's registering an event with on.\n\n96\n00:04:41.280 --> 00:04:45.030\nAnd using emit to call an event,\nall right?\n\n97\n00:04:45.030 --> 00:04:48.240\nSo I'm gonna say on, and\nwhat is that going to do?\n\n98\n00:04:48.240 --> 00:04:55.600\nI'm actually gonna use an advanced object\nliteral here, and just say on and emit.\n\n99\n00:04:55.600 --> 00:04:58.800\nAnd well, what does on take?\n\n100\n00:04:58.800 --> 00:05:04.119\nIt takes, hm, it takes an event name and\n\n101\n00:05:04.119 --> 00:05:10.540\nactual func, like the call back,\nthe handler.\n\n102\n00:05:10.540 --> 00:05:12.940\nI'm gonna call it the handler, all right.\n\n103\n00:05:12.940 --> 00:05:14.360\nAnd then what does emit take?\n\n104\n00:05:14.360 --> 00:05:19.230\nIt takes the event name, and\n\n105\n00:05:19.230 --> 00:05:23.260\nIt has any data that I wanna pass along,\nall right?\n\n106\n00:05:23.260 --> 00:05:28.472\nSo, now when I called this emitter.on,\nI can register an event.\n\n107\n00:05:28.472 --> 00:05:32.380\nNow, here's where it gets a little\nyou know, yes I mean about the array.\n\n108\n00:05:32.380 --> 00:05:33.570\nI just started thinking about this.\n\n109\n00:05:33.570 --> 00:05:40.070\nI do need a collection but I almost named\na collection of handlers for a given name.\n\n110\n00:05:40.070 --> 00:05:42.360\nAnd in JavaScript,\nif I'm thinking, lookup by name,\n\n111\n00:05:42.360 --> 00:05:44.960\nan array is not the appropriate\ndata structure.\n\n112\n00:05:46.060 --> 00:05:49.630\nI would be better served to have an object\nbecause then I can register them\n\n113\n00:05:49.630 --> 00:05:54.180\nby name and then each one of those\nthings has an array attached to it.\n\n114\n00:05:54.180 --> 00:06:01.530\nSo all right, I'm gonna change this\ndata structure here to an object.\n\n115\n00:06:01.530 --> 00:06:05.771\nAnd, well, let's just start out by saying,\nwhenever I call on.\n\n116\n00:06:07.360 --> 00:06:14.548\nWell I'm gonna say this._events[eventName]\n\n117\n00:06:14.548 --> 00:06:18.398\n= handler;, all right.\n\n118\n00:06:18.398 --> 00:06:21.350\nSo we're not gonna have a collection,\nwe're gonna have a single one.\n\n119\n00:06:21.350 --> 00:06:24.890\nI'm saying you get a single handler and\nthat's it, all right?\n\n120\n00:06:26.490 --> 00:06:29.720\nAnd for emit, what do I want with emit?\n\n121\n00:06:29.720 --> 00:06:35.780\nWell, I want to say this._events\n\n122\n00:06:35.780 --> 00:06:40.055\nand look up by [eventName].\n\n123\n00:06:42.070 --> 00:06:46.300\nAnd that's now a function, so\nI'm immediately going to call it and\n\n124\n00:06:46.300 --> 00:06:48.920\nhand it the data, all right?\n\n125\n00:06:48.920 --> 00:06:51.450\nSo this is kind of, this is a lot of code.\n\n126\n00:06:51.450 --> 00:06:55.370\nThis is kinda dense, but I'm gonna\ncome back, change this a little bit,\n\n127\n00:06:55.370 --> 00:06:56.940\nand tease it apart.\n\n128\n00:06:56.940 --> 00:06:59.010\nBut let's see if this works.\n\n129\n00:06:59.010 --> 00:07:03.072\nAll right, so I'm gonna hop back into\nthe repl, and I'm gonna say emitter +\n\n130\n00:07:03.072 --> 00:07:09.570\nrequire('./emitter').\n\n131\n00:07:09.570 --> 00:07:11.146\nAnd now, I have my emitter.\n\n132\n00:07:11.146 --> 00:07:13.673\nNow I gotta spell it right,\nthat's important.\n\n133\n00:07:13.673 --> 00:07:15.560\nSo clear that out there.\n\n134\n00:07:15.560 --> 00:07:19.190\nSo there's my emitter and\nI have an on and an emit.\n\n135\n00:07:19.190 --> 00:07:23.670\nAll right so now, let's call on and\njust set some random function.\n\n136\n00:07:23.670 --> 00:07:29.500\nSo, I'm gonna say emitter.on and run\njust like we did in a previous episode.\n\n137\n00:07:29.500 --> 00:07:32.170\nAnd this is gonna run a simple function.\n\n138\n00:07:32.170 --> 00:07:40.207\nAnd let's just say data is\nconsole.log(data), all right?\n\n139\n00:07:40.207 --> 00:07:41.840\nVery simple there.\n\n140\n00:07:41.840 --> 00:07:43.800\nNothing's broke, that's good.\n\n141\n00:07:44.810 --> 00:07:51.175\nAnd emitter and\nnow notice that _events has a run name and\n\n142\n00:07:51.175 --> 00:07:55.159\nit has a match to a function, okay?\n\n143\n00:07:55.159 --> 00:08:00.327\nSo now if I emitted run with some\namount of information, right?\n\n144\n00:08:00.327 --> 00:08:02.707\nSome data,\nthen it should just log that data.\n\n145\n00:08:02.707 --> 00:08:08.293\nSo I should say Emitter.emit\n\n146\n00:08:08.293 --> 00:08:13.220\nrun and this should work.\n\n147\n00:08:13.220 --> 00:08:18.250\nAnd notice it behaves very similar\nto the emitter that we had, right.\n\n148\n00:08:18.250 --> 00:08:19.657\nBut I'm limited in this.\n\n149\n00:08:19.657 --> 00:08:22.170\nThis is not how this works.\n\n150\n00:08:22.170 --> 00:08:27.140\nI should be able to get a collection\nof these kind of listeners, right?\n\n151\n00:08:27.140 --> 00:08:30.100\nRemember in our no\ndocumentation over here,\n\n152\n00:08:30.100 --> 00:08:35.160\nwe had this set max listeners and\nit was ten by default, right?\n\n153\n00:08:35.160 --> 00:08:39.622\nAnd that means that for every event you\ncan have ten functions that would run.\n\n154\n00:08:39.622 --> 00:08:42.770\nAnd it's based on when you register them,\nall right.\n\n155\n00:08:42.770 --> 00:08:45.590\nAnd what I mean by register\nis when you call on\n\n156\n00:08:45.590 --> 00:08:47.680\nit actually kind of puts\nit in a collection.\n\n157\n00:08:47.680 --> 00:08:50.180\nSo let's go change our emitter to more\n\n158\n00:08:50.180 --> 00:08:53.780\nclosely reflect how this\nwould actually work out.\n\n159\n00:08:54.820 --> 00:08:59.410\nSo, but for now it's kind of working,\nit's kinda what we want.\n\n160\n00:08:59.410 --> 00:09:02.350\nAnd let's just review before we make\nany changes, how does this work?\n\n161\n00:09:02.350 --> 00:09:07.690\nSo I have this event object and then I\nhave an on method and an emit method.\n\n162\n00:09:07.690 --> 00:09:10.646\nWell on takes the event name, like run.\n\n163\n00:09:10.646 --> 00:09:13.602\nAnd then it takes a handler\nwhich is the function and\n\n164\n00:09:13.602 --> 00:09:15.400\nit could be called a call back.\n\n165\n00:09:15.400 --> 00:09:16.400\nI'm just calling it a handler.\n\n166\n00:09:16.400 --> 00:09:18.560\nYou could call it whatever you wanted to.\n\n167\n00:09:18.560 --> 00:09:22.370\nAnd I know,\nbecause of the architecture that I want,\n\n168\n00:09:22.370 --> 00:09:24.890\nthis is going to be a function type.\n\n169\n00:09:24.890 --> 00:09:30.390\nAnd I said well, this object, this\nobject right here, this const emitter.\n\n170\n00:09:32.460 --> 00:09:37.690\nWell I want to access the _events\nobject within it, and\n\n171\n00:09:37.690 --> 00:09:42.270\nregister or assign to a specific\nname a handler function.\n\n172\n00:09:43.280 --> 00:09:48.230\nOkay, and then for emit I'm just\ngoing to look up that function and\n\n173\n00:09:48.230 --> 00:09:49.410\ncall it immediately.\n\n174\n00:09:50.720 --> 00:09:54.440\nAnd, well, pass in the data and\nlet it run.\n\n175\n00:09:54.440 --> 00:09:58.310\nSo I'm just grabbing the function,\nrunning it and letting it do its thing.\n\n176\n00:09:59.470 --> 00:10:02.976\nBut really what I want is to have more or\nless a queue,\n\n177\n00:10:02.976 --> 00:10:05.466\na set of functions that I want to run.\n\n178\n00:10:05.466 --> 00:10:08.421\nAnd to do then,\nI have to have a little more handling,\n\n179\n00:10:08.421 --> 00:10:11.190\nour complexity has to\nturn up a little bit.\n\n180\n00:10:11.190 --> 00:10:13.520\nBut I think it's important\nto see this because well,\n\n181\n00:10:13.520 --> 00:10:17.760\nwe're gonna get a closer approximation to\nthe event emitter that's built in a node.\n\n182\n00:10:17.760 --> 00:10:24.613\nSo now, instead of a single handler,\nwhat I'm gonna say is,\n\n183\n00:10:27.699 --> 00:10:37.138\nif(this._events[eventName] All right,\n\n184\n00:10:37.138 --> 00:10:42.789\nnow what this is gonna do is\ngrab the eventName from the,\n\n185\n00:10:42.789 --> 00:10:47.990\nmy tab is off in Vim,\nneed to fix that later.\n\n186\n00:10:47.990 --> 00:10:49.310\nThis is going to try\nto retrieve that name.\n\n187\n00:10:49.310 --> 00:10:54.340\nIf it doesn't exist in _events then\nit's going to return on the finder or\n\n188\n00:10:54.340 --> 00:10:56.790\nfalse say value so it will not run.\n\n189\n00:10:56.790 --> 00:11:01.630\nSo, if it already exists,\nI just wanna push a function onto\n\n190\n00:11:03.180 --> 00:11:05.490\na list or excuse me an array.\n\n191\n00:11:05.490 --> 00:11:10.623\nSo, this._events dot, or\nexcuse me, eventName,\n\n192\n00:11:14.028 --> 00:11:18.604\n.push(handler), all right,\n\n193\n00:11:18.604 --> 00:11:23.260\notherwise, What do I want to do?\n\n194\n00:11:25.100 --> 00:11:30.933\nThat means that the eventName is\nnot already in this object here.\n\n195\n00:11:30.933 --> 00:11:35.628\nSo I'm going to create one and just\nmake it an array with the handler of it\n\n196\n00:11:35.628 --> 00:11:39.375\nthat was just given to me for\nthe on registration.\n\n197\n00:11:39.375 --> 00:11:47.940\nSo events maybe eventName and\nthat's equal to,\n\n198\n00:11:47.940 --> 00:11:53.700\nnot just handler but instead an array that\ncontains the single function handler.\n\n199\n00:11:53.700 --> 00:11:58.180\nSo from now on,\nafter I register run one time,\n\n200\n00:11:58.180 --> 00:12:01.120\nit will have an array with\nthat single function.\n\n201\n00:12:01.120 --> 00:12:06.530\nThe next time this will already exist, and\nI will add a new function to the array.\n\n202\n00:12:06.530 --> 00:12:07.880\nSo I'll have function one,\n\n203\n00:12:07.880 --> 00:12:13.090\nfunction two, function three and they\nwill run in order well that's my hope.\n\n204\n00:12:13.090 --> 00:12:17.793\nSo now when I emit,\nI want to look up those functions and\n\n205\n00:12:17.793 --> 00:12:20.258\nthen iterate through them.\n\n206\n00:12:20.258 --> 00:12:23.420\nSo down here,\nI need to change this a little bit.\n\n207\n00:12:25.830 --> 00:12:32.640\nSo I'm gonna say const\nhandlers Handlers equals,\n\n208\n00:12:32.640 --> 00:12:37.642\nand this dot underscore events, eventName.\n\n209\n00:12:40.039 --> 00:12:45.246\nAnd well for now I'm just gonna\nhave this console dot log,\n\n210\n00:12:45.246 --> 00:12:50.040\nthe handlers, and\nlets see how this works out first.\n\n211\n00:12:50.040 --> 00:12:52.030\nThere was a weird little thing there.\n\n212\n00:12:52.030 --> 00:12:53.070\n&gt;&gt; Yeah, it was.\n\n213\n00:12:53.070 --> 00:13:01.210\n&gt;&gt; Yep, whoops I accidentally hit event\nshort cut that like duplicated nine lines.\n\n214\n00:13:01.210 --> 00:13:07.220\nSo and then I need to make sure I put\nmy module that exports back because\n\n215\n00:13:07.220 --> 00:13:08.320\n&gt;&gt; This won't work without it.\n\n216\n00:13:08.320 --> 00:13:09.580\n&gt;&gt; Yep, it will not work without it.\n\n217\n00:13:09.580 --> 00:13:14.800\nThis none full escape key\njust messes up my event flow.\n\n218\n00:13:14.800 --> 00:13:20.550\nSo, Let make sure this works here and\nwell, I actually need to run node and\n\n219\n00:13:20.550 --> 00:13:25.163\nrequire the emitter so, const emitter =\n\n220\n00:13:25.163 --> 00:13:29.709\nrequire ./emitter.\n\n221\n00:13:29.709 --> 00:13:34.169\nAnd if we look at emitter, okay,\nthat's very similar to what we had before.\n\n222\n00:13:34.169 --> 00:13:38.639\nAnd now, if I say, emitter.on run,\n\n223\n00:13:38.639 --> 00:13:43.669\nI'm just gonna say, okay, given the data\n\n224\n00:13:43.669 --> 00:13:49.000\nI want to console.log the data, all right.\n\n225\n00:13:49.000 --> 00:13:53.603\nSo I register a handler and\nthen I can look at emitter and\n\n226\n00:13:53.603 --> 00:13:57.917\nnoticed that I have an array\nattach to the name run.\n\n227\n00:13:57.917 --> 00:14:00.300\nThat is an array of functions,\nin particularly,\n\n228\n00:14:00.300 --> 00:14:01.904\nI have a single function, here.\n\n229\n00:14:01.904 --> 00:14:09.065\nLet's go emitter.emit('run') and\n\n230\n00:14:09.065 --> 00:14:12.280\nit just prints out the array of functions.\n\n231\n00:14:12.280 --> 00:14:16.680\nNow in notice, it's gonna say that\nit's a function using this syntax\n\n232\n00:14:16.680 --> 00:14:20.510\nI could give these named functions and\nthat'll be a little better.\n\n233\n00:14:20.510 --> 00:14:25.460\nBut well, let's see how this changes\nif I register another one for run.\n\n234\n00:14:25.460 --> 00:14:30.360\nSo emitter.on, and\nI'm gonna say run again.\n\n235\n00:14:30.360 --> 00:14:36.108\nAnd this time I'm gonna take the data and\nI'm gonna console.log\n\n236\n00:14:36.108 --> 00:14:41.600\nthe data plus an exclamation point,\nwhatever that is.\n\n237\n00:14:41.600 --> 00:14:43.330\nNow I'm assuming that\nit's either a number or\n\n238\n00:14:43.330 --> 00:14:45.890\na string-\n&gt;&gt; That's not an exclamation point.\n\n239\n00:14:45.890 --> 00:14:46.527\n&gt;&gt; That is a number one.\n\n240\n00:14:46.527 --> 00:14:49.070\n&gt;&gt; [LAUGH]\n&gt;&gt; A number or a string.\n\n241\n00:14:49.070 --> 00:14:53.120\nSo if I pass in a complex object,\nit would do some weird stuff.\n\n242\n00:14:53.120 --> 00:14:58.880\nSo now let's look at emitter, and\nif we compare these two right here,\n\n243\n00:14:58.880 --> 00:15:02.070\nso I have run,\nwhich is an array of single function, but\n\n244\n00:15:02.070 --> 00:15:05.800\nnow events is run, but\nit's an array of two functions.\n\n245\n00:15:07.240 --> 00:15:11.652\nWell what I want when I emit is not\nto print those out like it's going to\n\n246\n00:15:11.652 --> 00:15:12.501\nhappen now.\n\n247\n00:15:12.501 --> 00:15:17.363\nBut instead, to grab that array and\njust iterate through the array, and\n\n248\n00:15:17.363 --> 00:15:22.550\nrun those functions with the supplied\ndata one right after the other.\n\n249\n00:15:22.550 --> 00:15:27.200\nSo, if I emit, and\nthat is not how you do that.\n\n250\n00:15:28.580 --> 00:15:34.560\nEmit, run, and\nnow I have an array of two functions\n\n251\n00:15:34.560 --> 00:15:39.470\nthat will run when actual run\nevent is kind of broadcast.\n\n252\n00:15:39.470 --> 00:15:43.500\nNow this is definitely can be\nwhatever it needs to be because well\n\n253\n00:15:43.500 --> 00:15:44.400\nit's just a string.\n\n254\n00:15:44.400 --> 00:15:48.902\nI could call this the cheese event\nthe fire event but big elbow event.\n\n255\n00:15:48.902 --> 00:15:50.277\n&gt;&gt; [LAUGH]\n&gt;&gt; Whatever you want it to be.\n\n256\n00:15:50.277 --> 00:15:51.198\n&gt;&gt; Sounds like a wrestling move.\n\n257\n00:15:51.198 --> 00:15:56.852\n&gt;&gt; It is, very,\nyou're in my heart also, Daniel.\n\n258\n00:15:56.852 --> 00:16:01.358\nSo, I think it's good, we see that\ndata structure kind of changing.\n\n259\n00:16:01.358 --> 00:16:07.681\nLet's see how we can change it, so emit\nactually runs those functions, all right?\n\n260\n00:16:07.681 --> 00:16:12.070\nSo I'm going to exit out of here, and\nI'm gonna hop back into my module.\n\n261\n00:16:12.070 --> 00:16:17.525\nAnd instead of just console\nlogging those handlers,\n\n262\n00:16:17.525 --> 00:16:25.260\nwhat I want to do is say handlers,\n.forEach.\n\n263\n00:16:25.260 --> 00:16:31.225\nAnd for each handler,\nI'm going to do the following.\n\n264\n00:16:34.596 --> 00:16:37.779\nHandler(data), all right?\n\n265\n00:16:37.779 --> 00:16:42.612\nSo for each of the handlers in the\nhandlers array, which is coming from this\n\n266\n00:16:42.612 --> 00:16:46.755\nlookup of the event's object,\nI'm going to get each handler,\n\n267\n00:16:46.755 --> 00:16:52.071\nwhich is a function, and then run it with\nthe supply data to the emit event, okay?\n\n268\n00:16:54.420 --> 00:17:01.314\nSo, going back to node, and I'm going to\nnot run emitter, but just require emitter.\n\n269\n00:17:06.360 --> 00:17:09.700\nAnd then if I look at emitter,\neverything's okay, so I have that.\n\n270\n00:17:09.700 --> 00:17:11.686\nSo emitter, and just to show you\nthat it doesn't have to be run,\n\n271\n00:17:16.741 --> 00:17:20.320\nLet's actually do bigelbow, right?\n\n272\n00:17:20.320 --> 00:17:21.052\nAnd what is that gonna do?\n\n273\n00:17:21.052 --> 00:17:24.621\nThat's gonna take the data and\nconsole.log,\n\n274\n00:17:27.191 --> 00:17:31.452\n('Oh Yeah!')\n&gt;&gt; Looks like you wrote bigelbow.\n\n275\n00:17:31.452 --> 00:17:33.830\n&gt;&gt; Bigelbow, bigelbow.\n\n276\n00:17:33.830 --> 00:17:37.600\nSo this does have to be a string,\nso I could put spacing in here.\n\n277\n00:17:37.600 --> 00:17:43.350\nAnd whenever I have these events, I do\nhave to have that exact same spelling.\n\n278\n00:17:43.350 --> 00:17:46.110\nNow with newer data\nstructures in JavaScript,\n\n279\n00:17:46.110 --> 00:17:50.050\nI could use a different mapping where I\ncould pass in objects that would respond\n\n280\n00:17:50.050 --> 00:17:53.640\nto the event I could look up by more\ncomplex objects other than the strings.\n\n281\n00:17:53.640 --> 00:17:57.820\nBut I'm using a simple object,\nwhich means well, I'm limited to strings,\n\n282\n00:17:57.820 --> 00:18:02.100\nor in fact, I could pass in a number, but\nbehind the scenes, it becomes a string.\n\n283\n00:18:02.100 --> 00:18:07.175\nSo let's see what happens now that we\nhave that, I have bigelbow, or big elbow.\n\n284\n00:18:07.175 --> 00:18:08.755\n&gt;&gt; [LAUGH]\n&gt;&gt; And it's a function.\n\n285\n00:18:08.755 --> 00:18:14.737\nAnd let's say emitter.on('cheese',\nand that's gonna take the data,\n\n286\n00:18:16.779 --> 00:18:20.860\nAnd it's going to just console.log,\n\n287\n00:18:22.447 --> 00:18:27.034\n('cheddar' + the data,\nand if you'll notice,\n\n288\n00:18:27.034 --> 00:18:31.890\nthe previous big elbow function,\nor bigelbow.\n\n289\n00:18:31.890 --> 00:18:36.180\nIt is not actually using the data,\nbut I'm just saying okay, well,\n\n290\n00:18:36.180 --> 00:18:39.300\nthis is taking the data and mapping it\nto something that ignores the data.\n\n291\n00:18:39.300 --> 00:18:40.330\nAnd that's perfectly fine.\n\n292\n00:18:41.520 --> 00:18:47.040\nAnd then let's clear that out and say,\nokay, this event has bigelbow and\n\n293\n00:18:47.040 --> 00:18:52.660\nthe cheese, and they are now two\ncollections for a respective event type.\n\n294\n00:18:52.660 --> 00:18:57.015\nIf I say emitter.emit,\n\n295\n00:18:57.015 --> 00:19:02.001\n('bigelbow, bigelbow,\n\n296\n00:19:02.001 --> 00:19:06.225\nyeah, yeah, yeah.\n\n297\n00:19:06.225 --> 00:19:09.874\nAnd if I say emitter.emit('cheese'), and\n\n298\n00:19:09.874 --> 00:19:14.770\nif I don't pass any data in,\nit's gonna say cheddarundefined.\n\n299\n00:19:16.180 --> 00:19:20.201\nBut if I pass in please, with a space,\n\n300\n00:19:20.201 --> 00:19:25.249\nbecause I know I messed\nup on the spacing there.\n\n301\n00:19:28.040 --> 00:19:31.512\nAnd then it's gonna say cheddar please,\ncheddar please, and\n\n302\n00:19:31.512 --> 00:19:36.450\nthen I can pass in other parts of data,\nand that event would respond accordingly.\n\n303\n00:19:36.450 --> 00:19:40.270\nNow, those are two separate events,\nall right, I'm not running one right after\n\n304\n00:19:40.270 --> 00:19:43.050\nthe other, nothing's changed other\nthan I have different names for them.\n\n305\n00:19:43.050 --> 00:19:46.410\nBut what if I wanna register\nanother event for bigelbow?\n\n306\n00:19:46.410 --> 00:19:49.060\nOkay, well, let's clear this out.\n\n307\n00:19:49.060 --> 00:19:52.242\nAnd this is kind of our finale, Daniel.\n\n308\n00:19:52.242 --> 00:19:53.900\n&gt;&gt; [LAUGH]\n&gt;&gt; bigelbow.\n\n309\n00:19:53.900 --> 00:19:54.846\n&gt;&gt; The coup de gras.\n\n310\n00:19:54.846 --> 00:19:58.200\n&gt;&gt; Yes, yes, and\nthat's gonna take the data.\n\n311\n00:19:58.200 --> 00:20:02.386\nAnd well, it's just going to\n\n312\n00:20:02.386 --> 00:20:07.930\nconsole.log('Smash '+data).\n\n313\n00:20:07.930 --> 00:20:12.754\nAnd there we go, and\nemitter.on, emitter.on.\n\n314\n00:20:12.754 --> 00:20:14.410\n&gt;&gt; You can do it, Justin.\n\n315\n00:20:14.410 --> 00:20:19.928\n&gt;&gt; I can do it, I can do it, you just sit\nthere and let me crash into a wonderful\n\n316\n00:20:19.928 --> 00:20:25.452\nstate of glory, but I would do the same\nto you, so no hard feelings there.\n\n317\n00:20:25.452 --> 00:20:30.372\nAll right, so emitter.on, now, notice\nwhen I did emitter.emit('bigelbow' and\n\n318\n00:20:30.372 --> 00:20:34.310\nI passed in data, it did some\ncrazy stuff cuz it was ignoring.\n\n319\n00:20:34.310 --> 00:20:39.458\nBut now if I say emitter.emit, and\nI'm gonna do the exact same thing that\n\n320\n00:20:39.458 --> 00:20:45.080\nI did before and just emit this\n'bigelbow' event with no information.\n\n321\n00:20:45.080 --> 00:20:47.930\nAnd it's Yeah!, Smash undefined.\n\n322\n00:20:47.930 --> 00:20:55.100\nOkay, well, what about if I now\npass data of, I don't know, apples?\n\n323\n00:20:58.230 --> 00:20:59.970\nYeah!, Smash apples.\n\n324\n00:20:59.970 --> 00:21:03.010\nBut notice what order do they execute in?\n\n325\n00:21:03.010 --> 00:21:04.842\nIt's Yeah first, and then Smash apples.\n\n326\n00:21:04.842 --> 00:21:08.650\nAnd that's because it's an ordered\ncollection behind the scenes that's\n\n327\n00:21:08.650 --> 00:21:10.850\nrunning one right after the other.\n\n328\n00:21:10.850 --> 00:21:14.585\nAnd so we've reproduced some of\nthe functionality of the built in node\n\n329\n00:21:14.585 --> 00:21:18.555\nemitter module, and that's how it\nworks behind the scenes more or less.\n\n330\n00:21:18.555 --> 00:21:20.620\n&gt;&gt; Justin actually raised\na really good question,\n\n331\n00:21:20.620 --> 00:21:24.640\nyou said there is one that's already built\nin to Node, and you just built one here.\n\n332\n00:21:24.640 --> 00:21:28.500\nIt did take you a bit of doings,\nbut it worked.\n\n333\n00:21:28.500 --> 00:21:29.490\nIt was great, it was great for\n\n334\n00:21:29.490 --> 00:21:32.760\nus to see the example of actually kinda\nwhat's going on behind the scenes.\n\n335\n00:21:32.760 --> 00:21:37.110\nThat being said, would you create your\nown, or would you use the built in?\n\n336\n00:21:37.110 --> 00:21:38.040\n&gt;&gt; So if I was on the Node platform,\n\n337\n00:21:38.040 --> 00:21:40.118\nI would use the built in because\nit's incredibly more robust, right?\n\n338\n00:21:40.118 --> 00:21:44.104\nI haven't added the functionality\nwhere I can remove listeners,\n\n339\n00:21:44.104 --> 00:21:46.470\nI can register it only once.\n\n340\n00:21:46.470 --> 00:21:49.770\nI can do all those other things,\nI can set the maximum number of listeners.\n\n341\n00:21:49.770 --> 00:21:53.340\nThere's a lot of other validation\nthat I'm not doing, and yeah,\n\n342\n00:21:53.340 --> 00:21:54.870\nI mean, it was fairly quick, right?\n\n343\n00:21:54.870 --> 00:21:56.270\nIt was about 20 minutes.\n\n344\n00:21:56.270 --> 00:21:59.440\nBut I'm also explaining,\nif you needed to do this,\n\n345\n00:21:59.440 --> 00:22:04.060\nit could probably take you five minutes\nif you knew what you needed to get done.\n\n346\n00:22:04.060 --> 00:22:06.930\nIf I'm on Node though,\nI'm gonna use the built-in event emitter.\n\n347\n00:22:06.930 --> 00:22:10.630\nI'm gonna use the built-in module,\njust because of all that validation.\n\n348\n00:22:10.630 --> 00:22:13.670\nHowever, inside of the browser or\n\n349\n00:22:13.670 --> 00:22:16.550\nother execution environments,\nyou may not have those available.\n\n350\n00:22:16.550 --> 00:22:20.850\nSo maybe you build something like this,\njust for a proof of concept.\n\n351\n00:22:20.850 --> 00:22:21.370\nWith that said,\n\n352\n00:22:21.370 --> 00:22:25.540\nthere are third party modules that bring\nsimilar functionality to the browser.\n\n353\n00:22:25.540 --> 00:22:29.230\nThat I would recommend using over building\nyour own because they've been tested and\n\n354\n00:22:29.230 --> 00:22:31.240\nkind of poked and prodded by other people.\n\n355\n00:22:31.240 --> 00:22:33.900\n&gt;&gt; All right, great advice for\nworking with events.\n\n356\n00:22:33.900 --> 00:22:38.040\nNow we've seen how they actually function,\nwhat they're doing behind the scenes.\n\n357\n00:22:38.040 --> 00:22:41.800\nHopefully, that will remove\nsome of the mysteria around\n\n358\n00:22:41.800 --> 00:22:43.500\nworking with events inside of NodeJS.\n\n359\n00:22:43.500 --> 00:22:47.270\nJustin, we do appreciate you doing\nthat for us and helping us see beyond.\n\n360\n00:22:47.270 --> 00:22:48.998\nRight, as they say, if I've seen farly,\n\n361\n00:22:48.998 --> 00:22:51.014\nit's because I stand on\nthe shoulders of giants.\n\n362\n00:22:51.014 --> 00:22:54.280\nWell, you, my man, are our giant today.\n\n363\n00:22:54.280 --> 00:22:56.670\nHopefully you guys are seeing\nmuch more clearly.\n\n364\n00:22:56.670 --> 00:22:58.140\nThat being said,\nI'm looking at our clock, and\n\n365\n00:22:58.140 --> 00:23:00.700\nit looks like we've come out of time for\nthis episode.\n\n366\n00:23:00.700 --> 00:23:01.940\nWe do thank you for joining us.\n\n367\n00:23:01.940 --> 00:23:04.940\nFor ITProTV, signing off,\nI've been your host, Daniel Lowrie.\n\n368\n00:23:04.940 --> 00:23:05.910\n&gt;&gt; And I'm Justin Dennison.\n\n369\n00:23:05.910 --> 00:23:06.867\n&gt;&gt; And we'll see you next time.\n\n370\n00:23:06.867 --> 00:23:13.495\n[MUSIC]\n\n371\n00:23:13.495 --> 00:23:15.908\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "216551367"
        },
        {
          "description": "In this episode, Daniel and Justin explore using timers in NodeJS to control event execution in a program. Here they will show you the types of timers that are available in NodeJS. Then they will give you some practical examples of how and when to use each.",
          "length": "1464",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-5-1-execution_with_timers-050417-PGM.00_24_10_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-5-1-execution_with_timers-050417-PGM.00_24_10_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-5-1-execution_with_timers-050417-PGM.00_24_10_10.Still001-sm.jpg",
          "title": "Execution with Timers",
          "transcript": "",
          "vimeoId": "216551776"
        },
        {
          "description": "In this episode, Daniel and Justin begin their exploration of reading and writing files using NodeJS. Here they begin by looking at using NodeJS to discover path names and file names as well as manipulating that output which will be beneficial to us when reading/writing to files.",
          "length": "1231",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-1-read_and_write_files-050517-PGM.00_29_35_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-1-read_and_write_files-050517-PGM.00_29_35_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-1-read_and_write_files-050517-PGM.00_29_35_01.Still001-sm.jpg",
          "title": "Read and Write Files",
          "transcript": "",
          "vimeoId": "216552651"
        },
        {
          "description": "In this episode, Daniel and Justin continue explaining how to read and write files with NodeJS. Here they pick back up by looking at the file writing functionality; specifically using the fs.readFile, fs.writeFile, and fs.exists functions.",
          "length": "1709",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-2-read_and_write_files_pt2-050517-PGM.00_28_15_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-2-read_and_write_files_pt2-050517-PGM.00_28_15_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-6-1-2-read_and_write_files_pt2-050517-PGM.00_28_15_01.Still001-sm.jpg",
          "title": "Read and Write Files Part 2",
          "transcript": "",
          "vimeoId": "216837048"
        },
        {
          "description": "In this episode, Daniel and Justin dive into working with external processes. Here they start by exploring the when and why of calling/creating an external process. Then they will show you the NodeJS functions like exec, spawn, and x that allow you to create an external function.",
          "length": "1581",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-7-1-external_process-050517-PGM.00_26_08_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-7-1-external_process-050517-PGM.00_26_08_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-7-1-external_process-050517-PGM.00_26_08_07.Still001-sm.jpg",
          "title": "External Processes",
          "transcript": "",
          "vimeoId": "216837279"
        },
        {
          "description": "In this episode, Justin and Vonne discuss the use of streams and create both readable and writable streams in NodeJS.",
          "length": "1311",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-1-streams-050817-PGM.00_34_18_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-1-streams-050817-PGM.00_34_18_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-1-streams-050817-PGM.00_34_18_01.Still001-sm.jpg",
          "title": "Streams",
          "transcript": "",
          "vimeoId": "216837499"
        },
        {
          "description": "In this episode, Justin and Vonne continue their discussion and demonstration of streams in NodeJS, specifically covering how to transform data from a readable stream to a writable stream.",
          "length": "1091",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-2-streams_pt2-050817-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-2-streams_pt2-050817-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-8-1-2-streams_pt2-050817-high-sm.jpg",
          "title": "Streams Part 2",
          "transcript": "",
          "vimeoId": "216837760"
        },
        {
          "description": "In this episode, Justin and Vonne begin to explore the TCP protocol.  Technically, TCP is in the NET module of NodeJS.  Justin demonstrates how to build a simple server.",
          "length": "1246",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-1-node_by_example_tcp_module-050817-PGM.00_20_30_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-1-node_by_example_tcp_module-050817-PGM.00_20_30_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-1-node_by_example_tcp_module-050817-PGM.00_20_30_16.Still001-sm.jpg",
          "title": "Node by Example: TCP Module",
          "transcript": "",
          "vimeoId": "217011392"
        },
        {
          "description": "Justin and Vonne are back to finish building a simple server using the TCP protocol in NodeJS.",
          "length": "1133",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-2-node_by_example_tcp_module-050817-PGM.00_18_38_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-2-node_by_example_tcp_module-050817-PGM.00_18_38_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-2-node_by_example_tcp_module-050817-PGM.00_18_38_01.Still001-sm.jpg",
          "title": "Node by Example: TCP Module Part 2",
          "transcript": "",
          "vimeoId": "217012082"
        },
        {
          "description": "Continuing to explore the TCP module, Justin and Vonne move on to building a simple TCP client.",
          "length": "907",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-3-node_by_example_tcp_module_pt._3-050917-PGM.00_19_19_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-3-node_by_example_tcp_module_pt._3-050917-PGM.00_19_19_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-3-node_by_example_tcp_module_pt._3-050917-PGM.00_19_19_24.Still001-sm.jpg",
          "title": "Node by Example: TCP Module Part 3",
          "transcript": "",
          "vimeoId": "217171601"
        },
        {
          "description": "In this episode, Justin and Vonne continue building and enhancing the TCP client started in the previous episode.",
          "length": "1166",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-4-node_by_example_tcp_module_pt4-051017-PGM.00_19_14_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-4-node_by_example_tcp_module_pt4-051017-PGM.00_19_14_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-4-node_by_example_tcp_module_pt4-051017-PGM.00_19_14_01.Still001-sm.jpg",
          "title": "Node by Example: TCP Module Part 4",
          "transcript": "",
          "vimeoId": "217171731"
        },
        {
          "description": "Wrapping it up, Justin and Vonne finish building the TCP client, specifically tackling how to handle reconnecting to the server.",
          "length": "1222",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-5-node_by_example_tcp_module_pt5-051017-PGM.00_20_10_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-5-node_by_example_tcp_module_pt5-051017-PGM.00_20_10_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-9-1-5-node_by_example_tcp_module_pt5-051017-PGM.00_20_10_16.Still001-sm.jpg",
          "title": "Node by Example: TCP Module Part 5",
          "transcript": "",
          "vimeoId": "217171936"
        },
        {
          "description": "In this episode, Justin and Vonne demonstrate how to build a simple server using the HTTP module in NodeJS.",
          "length": "1283",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-10-1-node_by_example_http_simple_server-051117-PGM.00_21_08_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-10-1-node_by_example_http_simple_server-051117-PGM.00_21_08_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-10-1-node_by_example_http_simple_server-051117-PGM.00_21_08_19.Still001-sm.jpg",
          "title": "Node by Example: HTTP Simple Server",
          "transcript": "",
          "vimeoId": "217489496"
        },
        {
          "description": "Justin and Vonne demonstrate another variation of using the HTTP module in NodeJS by building a static file server for a simple website.",
          "length": "1389",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-11-1-node_by_example_static_file_server-051117-PGM.00_22_54_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-11-1-node_by_example_static_file_server-051117-PGM.00_22_54_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-11-1-node_by_example_static_file_server-051117-PGM.00_22_54_01.Still001-sm.jpg",
          "title": "Node by Example: Static File Server",
          "transcript": "",
          "vimeoId": "217489645"
        },
        {
          "description": "In this episode, Justin and Vonne explore how to control and navigate a site with routes, or subdirectories, using the HTTP module in NodeJS.",
          "length": "1424",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-12-1-node_by_example_server_with_routes-051117-PGM.00_24_58_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-12-1-node_by_example_server_with_routes-051117-PGM.00_24_58_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-12-1-node_by_example_server_with_routes-051117-PGM.00_24_58_01.Still001-sm.jpg",
          "title": "Node by Example: Server with Routes",
          "transcript": "",
          "vimeoId": "217489810"
        },
        {
          "description": "Justin and Zach discuss parse url, parse qyerystring, go over HTTP questions, creating servers with HTTP, finding other places to make requests for content, and generally getting started making HTTP requests.",
          "length": "1261",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-node_by_example_make_http_requests-051217-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-node_by_example_make_http_requests-051217-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-node_by_example_make_http_requests-051217-high-sm.jpg",
          "title": "Node by Example: Make HTTP Requests",
          "transcript": "",
          "vimeoId": "217825656"
        },
        {
          "description": "Justin and Zach continue with getting started making HTTP requests, url & querystring modules, manipulating url, what happens if we have HTTPS instead of HTTP, making a GET request, and other types of requests.",
          "length": "1793",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-2-node_by_example_make_http_requests_pt2-051217-PGM.00_29_38_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-2-node_by_example_make_http_requests_pt2-051217-PGM.00_29_38_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-13-1-2-node_by_example_make_http_requests_pt2-051217-PGM.00_29_38_13.Still001-sm.jpg",
          "title": "Node by Example: Make HTTP Requests Part 2",
          "transcript": "",
          "vimeoId": "217688830"
        },
        {
          "description": "Justin and Zach build twitter CLI application using Node, discuss using outside packages & how to find them, how we get started building our application, the purpose of NPM Init, using NPM Install Commander, third-party-packages, basic command line, privacy issues, and more.",
          "length": "1379",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-1-lets_build_it_twitter_cli-051217.00_22_43_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-1-lets_build_it_twitter_cli-051217.00_22_43_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-1-lets_build_it_twitter_cli-051217.00_22_43_23.Still001-sm.jpg",
          "title": "Lets Build It: Twitter CLI",
          "transcript": "",
          "vimeoId": "217689247"
        },
        {
          "description": "In this episode, Daniel and Justin continue building their Twitter CLI using NodeJS. Here they will be showing you how to create a new application in Twitter as well as importing the credentials to use with our app. They they install the Twit node module and searched Twitter using their NodeJS app.",
          "length": "1358",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-2-lets_build_it_twitter_cli_pt2-051517-PGM.00_31_06_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-2-lets_build_it_twitter_cli_pt2-051517-PGM.00_31_06_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-2-lets_build_it_twitter_cli_pt2-051517-PGM.00_31_06_03.Still001-sm.jpg",
          "title": "Lets Build It: Twitter CLI Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:02.934\nWelcome to ITProTV.\n\n2\n00:00:02.934 --> 00:00:07.392\nI'm your host [CROSSTALK]\n\n3\n00:00:07.392 --> 00:00:08.367\n[MUSIC]\n\n4\n00:00:08.367 --> 00:00:12.380\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.380 --> 00:00:13.020\n&gt;&gt; All right.\n\n6\n00:00:13.020 --> 00:00:17.010\nGreetings everyone and welcome back\nto another great episode of ITProTV.\n\n7\n00:00:17.010 --> 00:00:18.510\nI'm your host Daniel Lowrie and\n\n8\n00:00:18.510 --> 00:00:22.980\nin todays episode we are continuing\nwith our intro to Node.js series.\n\n9\n00:00:22.980 --> 00:00:27.000\nToday we're actually continuing on with a,\nlet's build a portion of that,\n\n10\n00:00:27.000 --> 00:00:29.440\nof a Twitter see it live,\nvery interesting stuff.\n\n11\n00:00:29.440 --> 00:00:30.620\nI didn't get to actually be around for\n\n12\n00:00:30.620 --> 00:00:33.980\npart one so I'm really looking\nforward to jumping in to part two.\n\n13\n00:00:33.980 --> 00:00:38.160\nAnd see where we left off and joining\nus today to continue that conversation\n\n14\n00:00:38.160 --> 00:00:39.680\nour good man, Mister Justin Dennison.\n\n15\n00:00:39.680 --> 00:00:41.290\nJustin, welcome back man\nhow's it going today?\n\n16\n00:00:41.290 --> 00:00:44.430\n&gt;&gt; It is going well I'm excited to be back\nand I'm very sorry that you weren't here\n\n17\n00:00:44.430 --> 00:00:47.940\nfor part one\n&gt;&gt; But how are you today?\n\n18\n00:00:47.940 --> 00:00:49.470\n&gt;&gt; I'm great.\nAnd actually, I'm really excited.\n\n19\n00:00:49.470 --> 00:00:52.602\nI like doing these types of shows with you\nespecially when you're building some sort\n\n20\n00:00:52.602 --> 00:00:53.830\nof application or something.\n\n21\n00:00:53.830 --> 00:00:57.060\nI get to see how it all works out,\nhow it all comes together.\n\n22\n00:00:57.060 --> 00:00:59.800\nThat being said, I did miss part one.\n\n23\n00:00:59.800 --> 00:01:02.950\nSo if you could do me the favor\nof maybe recapping just\n\n24\n00:01:02.950 --> 00:01:05.110\nthe highlights of the last episode.\n\n25\n00:01:05.110 --> 00:01:07.240\n&gt;&gt; Daniel, that's definitely\nsomething that I can do and\n\n26\n00:01:07.240 --> 00:01:09.650\nI think that would actually be helpful for\nmost everyone else.\n\n27\n00:01:09.650 --> 00:01:10.900\nBut before we look at the actual code,\n\n28\n00:01:10.900 --> 00:01:13.080\nlet's just remind ourselves\nof what we're doing.\n\n29\n00:01:13.080 --> 00:01:15.540\nWell I wanted to explore the Twitter API.\n\n30\n00:01:15.540 --> 00:01:18.540\nI wanna do a Twitter search\njust from my command line.\n\n31\n00:01:18.540 --> 00:01:20.090\nBecause well I'm always\nin the command line.\n\n32\n00:01:20.090 --> 00:01:21.930\nNot always, but I'm in there a lot, and\n\n33\n00:01:21.930 --> 00:01:25.400\nI don't wanna have to navigate all the\ntime if I just wanna do a quick search.\n\n34\n00:01:25.400 --> 00:01:26.840\nAnd that's what we're building.\n\n35\n00:01:26.840 --> 00:01:29.100\nSo let's go ahead and\ntake a look at my screen here, and\n\n36\n00:01:29.100 --> 00:01:31.830\nsee where did we leave off.\n\n37\n00:01:31.830 --> 00:01:36.170\nAnd so I'm gonna swipe over here, and\nhere's some well, here's our code.\n\n38\n00:01:36.170 --> 00:01:39.840\nAnd we're using an external\nmodule called commander\n\n39\n00:01:39.840 --> 00:01:43.230\nthat allows us to parse\nthese individual arguments.\n\n40\n00:01:43.230 --> 00:01:49.410\nSo arguments, query, this is required,\nso well, that's gonna be provided to us.\n\n41\n00:01:49.410 --> 00:01:53.780\nSo if I say,\ntwit find cheese or Node.js or\n\n42\n00:01:53.780 --> 00:01:58.180\nnode index dot JS cheese,\nthen query will be mapped to cheese.\n\n43\n00:01:58.180 --> 00:02:03.153\nAnd then for the option, well those\nare optional, but if I do have this -l or\n\n44\n00:02:03.153 --> 00:02:07.120\n--limit flag,\nI have to give it something afterwards.\n\n45\n00:02:07.120 --> 00:02:11.590\nAnd all that is limiting the number\nof post return from the Twitter API.\n\n46\n00:02:11.590 --> 00:02:15.150\nNow that install came from npm, and\n\n47\n00:02:15.150 --> 00:02:19.350\nI did an npm install-.save,\nand it's in that package.JSON.\n\n48\n00:02:19.350 --> 00:02:21.470\nSo I don't have to remember it,\nyou don't have to remember it, and\n\n49\n00:02:21.470 --> 00:02:23.060\nI can just provide this to everybody.\n\n50\n00:02:23.060 --> 00:02:26.150\nAnd if they really wanted to,\nthey could install it themselves.\n\n51\n00:02:26.150 --> 00:02:28.290\nSo very, very handy there.\n\n52\n00:02:28.290 --> 00:02:31.640\nAnd well,\nlet's just see how it works at this point.\n\n53\n00:02:31.640 --> 00:02:33.890\nAnd I'm gonna say clear, and\n\n54\n00:02:33.890 --> 00:02:38.958\nyou can see already on my screen that\nit kind of, what the results are.\n\n55\n00:02:38.958 --> 00:02:42.045\nBut node index.js, and\nthen what is the query?\n\n56\n00:02:42.045 --> 00:02:46.050\nMm-hm, that's kind of odd.\n\n57\n00:02:46.050 --> 00:02:47.350\nLet me make sure.\n\n58\n00:02:47.350 --> 00:02:47.880\nThere we go.\n\n59\n00:02:47.880 --> 00:02:49.820\nI'm always printing help.\n\n60\n00:02:49.820 --> 00:02:53.062\nAnd I should just console.log.\n\n61\n00:02:53.062 --> 00:02:54.898\nAnd I need to remove that.\n\n62\n00:02:54.898 --> 00:03:01.070\nAnd console.log program.limit.\n\n63\n00:03:01.070 --> 00:03:03.829\nBecause I know those are the possible\ntwo things that I would get.\n\n64\n00:03:05.130 --> 00:03:09.450\nSo rerun that and notice that the query\nis cheese and limit is undefined\n\n65\n00:03:09.450 --> 00:03:14.470\nbecause I haven't provided that --l or\n--limit or -l flag.\n\n66\n00:03:14.470 --> 00:03:20.200\nBut if I go back and add -l to,\nI don't know, 73 then the limit is now 73.\n\n67\n00:03:20.200 --> 00:03:25.270\nSo using this basic setup, the goal\nis to interface with the twitter API.\n\n68\n00:03:25.270 --> 00:03:27.910\nAnd then that way I can do a quick\nsearch from my command line and\n\n69\n00:03:27.910 --> 00:03:30.480\nI don't have to worry about\nnavigating to the actual website.\n\n70\n00:03:30.480 --> 00:03:32.540\n&gt;&gt; All right,\nwell sounds really cool so far.\n\n71\n00:03:32.540 --> 00:03:33.210\nNow obviously,\n\n72\n00:03:33.210 --> 00:03:35.940\nyou've gotten us up to speed where\nwe're at at this point in time.\n\n73\n00:03:35.940 --> 00:03:36.990\nWhere do we continue?\n\n74\n00:03:36.990 --> 00:03:40.470\n&gt;&gt; Well we need to get\nan external module and\n\n75\n00:03:40.470 --> 00:03:43.550\nwe need to learn how to\ninterface with the API.\n\n76\n00:03:43.550 --> 00:03:47.620\nNow before we start here, there are some\ncredentials that I'm going to keep hidden.\n\n77\n00:03:47.620 --> 00:03:50.110\nI'm gonna show you some\nalternative credentials, and\n\n78\n00:03:50.110 --> 00:03:52.820\nexplain how I'm bringing\nin my credentials.\n\n79\n00:03:52.820 --> 00:03:57.590\nBut I'm not actually gonna show you for\nthis application that I'm actively using.\n\n80\n00:03:57.590 --> 00:03:59.580\nSo I will immediately delete those.\n\n81\n00:03:59.580 --> 00:04:01.610\nMainly because, well if you have them,\n\n82\n00:04:01.610 --> 00:04:04.480\nyou could immediately gain\naccess to my Twitter account.\n\n83\n00:04:04.480 --> 00:04:08.570\nAnd all of these applications are going\nto be link to your Twitter account.\n\n84\n00:04:08.570 --> 00:04:11.430\nSo sorry, that just the way it's gonna be.\n\n85\n00:04:11.430 --> 00:04:15.880\nBut now if we hop over and well,\nwe could go to Twitter.com.\n\n86\n00:04:15.880 --> 00:04:17.740\nWe need to actually to\nset up this application.\n\n87\n00:04:17.740 --> 00:04:22.772\nIf we go to Twitter.com,\nit's just gonna be your normal Twitter but\n\n88\n00:04:22.772 --> 00:04:25.134\nif I go to apps.twitter.com.\n\n89\n00:04:26.410 --> 00:04:31.830\nAnd I look right up here, just to make\nsure you have that, it's apps.twitter.com.\n\n90\n00:04:31.830 --> 00:04:34.340\nAnd this is kind of like their\napplication management portal.\n\n91\n00:04:34.340 --> 00:04:37.820\nIf you want to build an application\nthat interfaces with Twitter,\n\n92\n00:04:37.820 --> 00:04:42.380\nyou have to register it here because they\nissue you all your authentication keys,\n\n93\n00:04:42.380 --> 00:04:44.340\nyour access keys, so on and so forth.\n\n94\n00:04:44.340 --> 00:04:48.770\nIf you're familiar with other services\nlike AWS or things like that.\n\n95\n00:04:48.770 --> 00:04:51.900\nThese are similar to some of those\nother access credentials that you\n\n96\n00:04:51.900 --> 00:04:53.390\nwould be given.\n\n97\n00:04:53.390 --> 00:04:57.440\nHere's the application we're going to use,\nright, the credentials I'm gonna use.\n\n98\n00:04:57.440 --> 00:04:59.490\nBut what if I needed to set this up?\n\n99\n00:04:59.490 --> 00:05:01.790\nWell, I'm gonna take you\nthrough that flow, but\n\n100\n00:05:01.790 --> 00:05:05.950\nthen I'm immediately hopefully going to,\nwell, delete that.\n\n101\n00:05:05.950 --> 00:05:07.530\nSo what is the name?\n\n102\n00:05:07.530 --> 00:05:11.390\nAnd the name has to be unique and\nlet me zoom in just a little bit here.\n\n103\n00:05:11.390 --> 00:05:15.178\nYour application name this is used to\nattribute the source of the tweet and\n\n104\n00:05:15.178 --> 00:05:19.340\nthe user facing authorization\nscreens get 32 characters maximum.\n\n105\n00:05:19.340 --> 00:05:25.430\nSo let's say to twit-find-test-devpro.\n\n106\n00:05:25.430 --> 00:05:27.300\nNow I'm making that very long, and\n\n107\n00:05:27.300 --> 00:05:31.600\nvery specific, cuz it is highly unlikely\nthat that name is already taken.\n\n108\n00:05:31.600 --> 00:05:33.662\nIf you do something like test, it's taken.\n\n109\n00:05:33.662 --> 00:05:36.880\n&gt;&gt; [LAUGH]\n&gt;&gt; Test one, also taken.\n\n110\n00:05:36.880 --> 00:05:38.100\n&gt;&gt; Test two is free.\n\n111\n00:05:38.100 --> 00:05:39.805\n&gt;&gt; Yeah yeah, we could try test two.\n\n112\n00:05:39.805 --> 00:05:40.600\n&gt;&gt; [LAUGH]\n&gt;&gt; We could do that all day,\n\n113\n00:05:40.600 --> 00:05:43.802\nit's probably like test 12 million or\nsomething like that.\n\n114\n00:05:43.802 --> 00:05:50.060\n&gt;&gt; Yeah. [LAUGH] &gt;&gt; And\nthen the description, Somethings and\n\n115\n00:05:50.060 --> 00:05:53.400\nstuff, this has to be\na minimum of ten characters.\n\n116\n00:05:53.400 --> 00:05:57.091\nI wasn't reading this initially and\nI just put,\n\n117\n00:05:57.091 --> 00:06:01.840\njust testing, and well,\ntesting is not ten characters.\n\n118\n00:06:01.840 --> 00:06:04.010\nAnd it just kept sending\nme back to this page, and\n\n119\n00:06:04.010 --> 00:06:07.710\nI was like, there's a minimum\ncharacter requirement for description.\n\n120\n00:06:07.710 --> 00:06:10.300\nWebsite, now the website's\nkind of odd because well,\n\n121\n00:06:10.300 --> 00:06:12.030\nI don't have a website for this.\n\n122\n00:06:12.030 --> 00:06:16.480\nI don't have a project recode that I can\npoint them to or anything like that.\n\n123\n00:06:16.480 --> 00:06:17.990\n&gt;&gt; And yet it seems to be required.\n\n124\n00:06:17.990 --> 00:06:19.490\n&gt;&gt; It is required, but\n\n125\n00:06:19.490 --> 00:06:24.060\nif you read, if you do not have a URL yet,\njust put a placeholder here.\n\n126\n00:06:24.060 --> 00:06:25.280\nBut remember to change it later.\n\n127\n00:06:26.790 --> 00:06:27.650\n&gt;&gt; Okay, I'll do that.\n\n128\n00:06:27.650 --> 00:06:29.550\n&gt;&gt; Remember to change it later.\n\n129\n00:06:29.550 --> 00:06:32.330\nIf you're actually going to use this\nlong term, I would change this.\n\n130\n00:06:32.330 --> 00:06:36.450\nI would build something,\neven if it's to your personal page, or\n\n131\n00:06:36.450 --> 00:06:37.850\nmaybe even to your Twitter.\n\n132\n00:06:37.850 --> 00:06:42.040\nBut for now I'm just going to\nput something nonsensical, okay?\n\n133\n00:06:42.040 --> 00:06:44.728\nSo I'm gonna say Justindevpro.me.\n\n134\n00:06:44.728 --> 00:06:47.032\n&gt;&gt; Not your GeoCities account?\n\n135\n00:06:47.032 --> 00:06:48.770\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n136\n00:06:48.770 --> 00:06:49.450\n&gt;&gt; Angelfire.\n\n137\n00:06:49.450 --> 00:06:50.312\n&gt;&gt; Yeah, Angelfire.\n\n138\n00:06:50.312 --> 00:06:51.013\n&gt;&gt; That's right.\n\n139\n00:06:51.013 --> 00:06:55.019\n&gt;&gt; And then a call back URL, now we're\nnot gonna use a lot of authentication and\n\n140\n00:06:55.019 --> 00:06:56.278\nthings of that nature.\n\n141\n00:06:56.278 --> 00:06:58.345\nWe're just, we're doing very simple.\n\n142\n00:06:58.345 --> 00:07:00.010\nWe don't need a callback URL.\n\n143\n00:07:00.010 --> 00:07:04.827\nNow if you had a large web application\nthat was using this as an authentication\n\n144\n00:07:04.827 --> 00:07:09.364\nprovider, or something of that nature,\nyou would need a callback URL.\n\n145\n00:07:09.364 --> 00:07:12.020\nBut that is very application specific.\n\n146\n00:07:12.020 --> 00:07:14.640\nSo not necessary for us,\nbut you may need it.\n\n147\n00:07:14.640 --> 00:07:18.320\nNow, yes you have to agree to\nthe Twitter Development Agreement.\n\n148\n00:07:18.320 --> 00:07:22.100\nPart of that is rate limiting,\nyou can't just like hammer away\n\n149\n00:07:22.100 --> 00:07:27.520\ndo all kinds of web scraping you can't\nuse it propagate things in crazy manners.\n\n150\n00:07:27.520 --> 00:07:31.330\nThey will ban you at least\ntake your application down, so\n\n151\n00:07:31.330 --> 00:07:34.070\nkeep that in mind, so\ndefinitely read that.\n\n152\n00:07:34.070 --> 00:07:35.810\nAnd then if you create\nyour Twitter application,\n\n153\n00:07:35.810 --> 00:07:38.000\nI'm hoping I have all\nthis typed out correctly.\n\n154\n00:07:38.000 --> 00:07:39.840\nI've tried this a couple of times.\n\n155\n00:07:39.840 --> 00:07:41.220\nWe may still see an error.\n\n156\n00:07:41.220 --> 00:07:44.180\nSo create your Twitter application,\nand then boom.\n\n157\n00:07:44.180 --> 00:07:47.232\nClient application failed,\nnot a valid URL form.\n\n158\n00:07:47.232 --> 00:07:50.497\nAnd part of that is, I think,\n\n159\n00:07:50.497 --> 00:07:55.601\nif I'm not mistaken it requires http://.\n\n160\n00:07:55.601 --> 00:07:57.570\nSo an actual protocol.\n\n161\n00:07:59.484 --> 00:08:04.340\nIf I'm not mistaken, we're about to\nfind out, and then, there we go.\n\n162\n00:08:04.340 --> 00:08:07.743\nNow, once you get to this page,\nyou have access to those client keys and\n\n163\n00:08:07.743 --> 00:08:08.889\nthings of that nature.\n\n164\n00:08:08.889 --> 00:08:15.870\nAlso, you can set read and\nwrite permissions, set the callback URL.\n\n165\n00:08:15.870 --> 00:08:19.814\nAlso, these various token URLs for\nauthentication and things.\n\n166\n00:08:19.814 --> 00:08:23.162\nWe don't really need that,\nwe're just building a local CLI.\n\n167\n00:08:23.162 --> 00:08:25.856\nWe do need to keep these private.\n\n168\n00:08:25.856 --> 00:08:29.637\nI am going to show you this application\nwhere you go find these, and\n\n169\n00:08:29.637 --> 00:08:32.120\nthen I'm immediately going to delete it.\n\n170\n00:08:32.120 --> 00:08:35.544\nJust so, well, you never know,\nmaybe you don't mean anything malicious.\n\n171\n00:08:35.544 --> 00:08:40.570\nBut you start using mine and\nwell, things get a little crazy.\n\n172\n00:08:41.700 --> 00:08:45.775\nSo if we go look while we have some\nother settings and such, that's more or\n\n173\n00:08:45.775 --> 00:08:47.498\nless what you just filled out.\n\n174\n00:08:47.498 --> 00:08:52.232\nBut then, you have permissions and\nyou can set permissions for read, write,\n\n175\n00:08:52.232 --> 00:08:54.690\nread write and access direct messages.\n\n176\n00:08:54.690 --> 00:08:57.274\nSo you can interface with\nTwitter in a variety of ways.\n\n177\n00:08:57.274 --> 00:09:01.729\nBut if we look at Keys and\nAccess Tokens, you have a consumer key,\n\n178\n00:09:01.729 --> 00:09:04.010\na consumer secret.\n\n179\n00:09:04.010 --> 00:09:09.705\nAnd then also, you have to issue\nan access token and an access secret.\n\n180\n00:09:09.705 --> 00:09:14.671\nSo, if I create then, so,\nhas been successfully granted, so\n\n181\n00:09:14.671 --> 00:09:17.730\nthen I end up with these two tokens.\n\n182\n00:09:17.730 --> 00:09:21.538\nActually, the token, and the token secret,\nI need all four of those for\n\n183\n00:09:21.538 --> 00:09:23.171\nthe module that we're using.\n\n184\n00:09:23.171 --> 00:09:25.866\n&gt;&gt; And, Justin,\nthese are the things that we, basically,\n\n185\n00:09:25.866 --> 00:09:28.370\nwanna keep off of prying eyes away from,\nright?\n\n186\n00:09:28.370 --> 00:09:31.663\n&gt;&gt; Exactly, if you're using version\ncontrol, like, Git, or Subversion,\n\n187\n00:09:31.663 --> 00:09:33.572\nor Mercurial, they should not go in there.\n\n188\n00:09:33.572 --> 00:09:37.680\nYou should not be putting these in emails,\nyou should not be putting these anywhere.\n\n189\n00:09:37.680 --> 00:09:40.117\nAnd just so you know,\npeople are very resourceful.\n\n190\n00:09:40.117 --> 00:09:44.360\nAs a matter of fact, I'm immediately\ngoing to delete this application.\n\n191\n00:09:44.360 --> 00:09:46.723\nSo delete this, they are very resourceful.\n\n192\n00:09:46.723 --> 00:09:51.308\nI’ve actually read a couple of\nstories of people who build web\n\n193\n00:09:51.308 --> 00:09:55.820\ncrawlers over GitHub and\nthings looking for API keys to use.\n\n194\n00:09:55.820 --> 00:09:59.482\nAnd well, if it's like an Amazon key, you\ncan just start deploying stuff like crazy.\n\n195\n00:09:59.482 --> 00:10:02.710\nSo it's very important that\nyou keep those secret to you.\n\n196\n00:10:02.710 --> 00:10:06.520\nAnd typically, what you'll find is\nthese will be in a dot folder, or\n\n197\n00:10:06.520 --> 00:10:10.050\nmaybe even your environment,\nset on your environment.\n\n198\n00:10:10.050 --> 00:10:12.708\nAnd then, hopefully you have a strong\npassword to keep people from\n\n199\n00:10:12.708 --> 00:10:13.473\ngetting in those.\n\n200\n00:10:13.473 --> 00:10:18.600\nSo once you have those four keys, well now\nwe can start building our application,\n\n201\n00:10:18.600 --> 00:10:20.960\nbecause we need those credentials.\n\n202\n00:10:20.960 --> 00:10:21.846\nSo let's go ahead and do that.\n\n203\n00:10:21.846 --> 00:10:25.652\nSee if we can get this up and working,\njust to get things tested out.\n\n204\n00:10:25.652 --> 00:10:27.344\nSo here we go.\n\n205\n00:10:27.344 --> 00:10:31.638\nI'm actually gonna bring in credentials\nand example credentials file.\n\n206\n00:10:31.638 --> 00:10:38.470\nSo I'm gonna move and\nI have credentials if I'm not mistaken.\n\n207\n00:10:38.470 --> 00:10:45.445\nNope, I've got not far enough credentials,\nexample that JSON to here,\n\n208\n00:10:45.445 --> 00:10:50.926\nand, Credentials.json to here.\n\n209\n00:10:50.926 --> 00:10:55.465\nNow, the credentials.json is actually\nthe valid wheels that I have.\n\n210\n00:10:55.465 --> 00:10:58.360\n&gt;&gt; Wheels.\n&gt;&gt; The example file is how this files\n\n211\n00:10:58.360 --> 00:11:02.710\ngoing to look and then you just\nfill in your words in order for\n\n212\n00:11:02.710 --> 00:11:05.505\nit to get to work like mine is working.\n\n213\n00:11:05.505 --> 00:11:07.745\nSo now that we have that in there,\n\n214\n00:11:07.745 --> 00:11:11.760\nin order to use these credentials\nwe need another package.\n\n215\n00:11:11.760 --> 00:11:13.446\nWe have Commander.\n\n216\n00:11:13.446 --> 00:11:15.645\nWe need Twit.\n\n217\n00:11:15.645 --> 00:11:20.449\nNow just to remind ourselves of what\nTwit is, I'm gonna come to NPM.\n\n218\n00:11:20.449 --> 00:11:22.526\nAnd that's www.npmjs.com.\n\n219\n00:11:22.526 --> 00:11:26.820\nAnd I'm gonna look up Twit, and\nif you look up Twit, it is for\n\n220\n00:11:26.820 --> 00:11:28.940\nthe REST and streaming APIs.\n\n221\n00:11:28.940 --> 00:11:32.087\nNow, the REST is what we\nthink of is request response.\n\n222\n00:11:32.087 --> 00:11:36.839\nWe’re not getting getting deep into\nwhat is representational state transfer\n\n223\n00:11:36.839 --> 00:11:39.920\nprotocols or design patterns rather.\n\n224\n00:11:39.920 --> 00:11:41.403\n&gt;&gt; My head hurts.\n[LAUGH]\n\n225\n00:11:41.403 --> 00:11:42.880\n&gt;&gt; Yeah yeah then you're looking at me\n\n226\n00:11:42.880 --> 00:11:43.429\nlike, wow.\n\n227\n00:11:43.429 --> 00:11:47.011\n&gt;&gt; [LAUGH]\n&gt;&gt; Or the streaming API where you can just\n\n228\n00:11:47.011 --> 00:11:50.940\nwait for like Tweets to come through\nwith a certain filter or a guard.\n\n229\n00:11:50.940 --> 00:11:55.296\nBut notice we need a consumer_key,\nconsumer_secret and access_token and\n\n230\n00:11:55.296 --> 00:11:57.806\naccess_secret and just zoom that in there.\n\n231\n00:11:57.806 --> 00:12:00.363\nWe need to npm install that.\n\n232\n00:12:00.363 --> 00:12:03.127\nNow we wanna keep track of this just\nin case I wanna give this to Daniel and\n\n233\n00:12:03.127 --> 00:12:05.450\nhe's like well I wanna\nplay around with that.\n\n234\n00:12:05.450 --> 00:12:08.395\nHe'll have to get his own credentials,\nbut I can give him everything else.\n\n235\n00:12:08.395 --> 00:12:13.145\nSo let's npm install twit --save.\n\n236\n00:12:13.145 --> 00:12:18.405\nAnd just as a reminder, the --save,\nwell it adds it to your package.json so\n\n237\n00:12:18.405 --> 00:12:22.170\nyou don't have to remember\nall the packages manually.\n\n238\n00:12:22.170 --> 00:12:24.356\nYou're just making a list.\n\n239\n00:12:24.356 --> 00:12:26.422\nAnd it puts it in the Node modules.\n\n240\n00:12:26.422 --> 00:12:30.927\nSo I gotta be real careful about those\ncredentials in credentials.example.\n\n241\n00:12:30.927 --> 00:12:34.901\nSo if I look at credentials.example,\nnotice I have a consumer key,\n\n242\n00:12:34.901 --> 00:12:39.084\nconsumer secret, an access_token,\nan access_token_secret, and\n\n243\n00:12:39.084 --> 00:12:40.860\nthey are kind of snake cased.\n\n244\n00:12:40.860 --> 00:12:43.459\nIf you're in the Python world,\nthis will look familiar.\n\n245\n00:12:43.459 --> 00:12:45.949\nThis is a JSON file.\n\n246\n00:12:45.949 --> 00:12:49.248\nI put them in JSON because it's gonna\nmake it easier to read them in.\n\n247\n00:12:49.248 --> 00:12:51.653\nI could put these in like a .env file.\n\n248\n00:12:51.653 --> 00:12:57.609\nAnd then just, well, source them into\nmy environment, and then use that.\n\n249\n00:12:57.609 --> 00:12:58.588\nIf you're deploying this,\n\n250\n00:12:58.588 --> 00:13:01.690\nthat would probably be the better way\nthan actually putting them in a file.\n\n251\n00:13:01.690 --> 00:13:04.026\nBut this'll make this a little\nmore expeditious, and\n\n252\n00:13:04.026 --> 00:13:06.836\nI know I'm using this only locally,\nso we're gonna go this way.\n\n253\n00:13:06.836 --> 00:13:10.646\nBut if I look at my package.json,\nnotice I now have twit.\n\n254\n00:13:10.646 --> 00:13:14.978\nWell, it's made a list and\nthat dash does say, make sure that I have\n\n255\n00:13:14.978 --> 00:13:19.310\na reference to those for\nall kinds of future development purposes.\n\n256\n00:13:20.650 --> 00:13:23.843\nSo now that we have that,\nwe have to do a little bit of coding.\n\n257\n00:13:23.843 --> 00:13:27.795\nSo let's bring in twit and const,\n\n258\n00:13:27.795 --> 00:13:32.430\ntwit = require('twit') and well,\n\n259\n00:13:32.430 --> 00:13:35.699\nwe need to make a client, but\n\n260\n00:13:35.699 --> 00:13:40.492\nin order to make a client we need options.\n\n261\n00:13:40.492 --> 00:13:45.460\nWe need the things that twit requires and\nif we go back,\n\n262\n00:13:45.460 --> 00:13:49.090\nthe very minimum it needs, these.\n\n263\n00:13:49.090 --> 00:13:52.910\nNow notice the timeout_init,\nthat's how long it's gonna wait before it\n\n264\n00:13:52.910 --> 00:13:55.468\ntimes out And\nthat's measured in milliseconds.\n\n265\n00:13:55.468 --> 00:13:56.717\nThat is optional.\n\n266\n00:13:56.717 --> 00:14:00.430\nBut we are gonna put it there,\njust so things don't hang, right?\n\n267\n00:14:00.430 --> 00:14:03.250\nAfter a full minute, if it hangs,\nyou're like, I wish this would stop.\n\n268\n00:14:03.250 --> 00:14:04.402\n&gt;&gt; [LAUGH] Yeah.\n\n269\n00:14:04.402 --> 00:14:07.949\n&gt;&gt; So we're actually gonna\nuse that same default.\n\n270\n00:14:07.949 --> 00:14:10.837\nBut we need to combine that\nwith our other options.\n\n271\n00:14:10.837 --> 00:14:15.006\nAnd well, let's see how that's gonna go.\n\n272\n00:14:15.006 --> 00:14:21.629\nSo, options is object.assign and\ntimeout ms,\n\n273\n00:14:21.629 --> 00:14:26.636\nand I'm gonna say 60*1000,\n\n274\n00:14:26.636 --> 00:14:31.990\nand that is 60 seconds, right?\n\n275\n00:14:31.990 --> 00:14:36.897\nSo that's a minute because 1000\nmilliseconds is a second times 60 would\n\n276\n00:14:36.897 --> 00:14:38.022\nbe 60 seconds.\n\n277\n00:14:38.022 --> 00:14:42.166\nYou’re like wow Justin we're doing\nmath you're kind of scaring me.\n\n278\n00:14:42.166 --> 00:14:45.178\nThat's all you need to know,\n60 times 1000,\n\n279\n00:14:45.178 --> 00:14:50.120\n1000 times whatever many seconds you need,\nand that's where you're gonna go.\n\n280\n00:14:50.120 --> 00:14:55.469\nAnd then,\nI'm going to add another piece here,\n\n281\n00:14:55.469 --> 00:15:00.045\nand that is require credentials.json.\n\n282\n00:15:00.045 --> 00:15:03.440\nNow this require credentials.json\nsince it's in the same folder.\n\n283\n00:15:03.440 --> 00:15:05.012\nIt's kinda wierd.\n\n284\n00:15:05.012 --> 00:15:06.782\nThat's a json file.\n\n285\n00:15:06.782 --> 00:15:08.312\nUsually requires four modules.\n\n286\n00:15:08.312 --> 00:15:12.510\nThis will actually read in and\nmake this valid JavaScript.\n\n287\n00:15:12.510 --> 00:15:14.966\nSo now this is a JavaScript object.\n\n288\n00:15:14.966 --> 00:15:17.957\nThis is something you'll see people do.\n\n289\n00:15:17.957 --> 00:15:22.342\nNot necessarily the only way, not\nnecessarily I'm not saying it's the best\n\n290\n00:15:22.342 --> 00:15:25.050\nway, but\nthis is how I go about doing this.\n\n291\n00:15:25.050 --> 00:15:26.332\nAnd now we should have our options.\n\n292\n00:15:26.332 --> 00:15:29.916\nNow I'm not gonna print these options\nout cuz then I would expose my\n\n293\n00:15:29.916 --> 00:15:30.948\ncredential keys.\n\n294\n00:15:30.948 --> 00:15:36.017\nSo be careful once you've read these in,\nwell, if you accidentally print\n\n295\n00:15:36.017 --> 00:15:40.930\nthese out to standard out or anything\npeople would be able to read there.\n\n296\n00:15:40.930 --> 00:15:43.113\nAnd now let's create our client.\n\n297\n00:15:43.113 --> 00:15:49.467\nSo constitution client = new Twit().\n\n298\n00:15:49.467 --> 00:15:51.403\nAnd this is a constructor.\n\n299\n00:15:51.403 --> 00:15:53.331\nIt's bringing in the module\nas a constructor.\n\n300\n00:15:53.331 --> 00:15:54.814\nAnd I'm gonna pass the options.\n\n301\n00:15:54.814 --> 00:15:58.953\nSo now I have all of my\nconfigured credentials.\n\n302\n00:15:58.953 --> 00:16:02.018\nAnd we should be good to go.\n\n303\n00:16:02.018 --> 00:16:06.186\nNow we have twit,\nwe have our command line options,\n\n304\n00:16:06.186 --> 00:16:09.990\nwhere is our client\nactually going to do stuff?\n\n305\n00:16:11.165 --> 00:16:15.360\nHm, well if I read through,\nhere's my set up, my parse, and\n\n306\n00:16:15.360 --> 00:16:19.530\nsearch is going to be the action\nthat runs if there's an argument.\n\n307\n00:16:20.810 --> 00:16:24.110\nOkay, well let's do that.\n\n308\n00:16:24.110 --> 00:16:27.340\nBut I want to make sure\nof a couple of things.\n\n309\n00:16:29.028 --> 00:16:32.180\nSo I'm gonna come here and\nI'm going to use this client and\n\n310\n00:16:32.180 --> 00:16:36.280\nlet me do a little bit of overscroll\nhere it's kind of hard to see.\n\n311\n00:16:36.280 --> 00:16:41.750\nSo I'm just gonna say client.search,\nI don't know.\n\n312\n00:16:41.750 --> 00:16:45.916\nNot search.get, I'm reading things.\n\n313\n00:16:45.916 --> 00:16:51.515\nAnd this first part is a series of strings\nin twit that map to certain things.\n\n314\n00:16:51.515 --> 00:16:57.038\nNotice if I want to search,\nI can go to search/tweets.\n\n315\n00:16:57.038 --> 00:17:00.580\nSo it's looking for the string and it's\ndoing some string matching to determine\n\n316\n00:17:00.580 --> 00:17:02.460\nwhat it's actually going\nto do with the Twitter API.\n\n317\n00:17:04.470 --> 00:17:06.190\nAnd it's looking for a query.\n\n318\n00:17:06.190 --> 00:17:09.080\nWell, I just want to see does it work?\n\n319\n00:17:10.340 --> 00:17:15.600\nTweets and q I don't know,\n\n320\n00:17:15.600 --> 00:17:19.320\ncheese and then it takes a call back.\n\n321\n00:17:19.320 --> 00:17:21.720\nAnd what is said call back?\n\n322\n00:17:21.720 --> 00:17:24.308\nI'm actually going to bring\nthis to another line.\n\n323\n00:17:24.308 --> 00:17:27.792\nWe'll try to rig this up so\nit is a little more readable.\n\n324\n00:17:27.792 --> 00:17:30.268\nI am actually going to bring this\nto another line, as a result.\n\n325\n00:17:30.268 --> 00:17:35.034\nSo first argument, second argument and\nthen the third argument is in\n\n326\n00:17:35.034 --> 00:17:39.890\nfact a function that could have an error,\na data, and response.\n\n327\n00:17:39.890 --> 00:17:44.540\nNow I'm just going to use the response and\nart data and\n\n328\n00:17:44.540 --> 00:17:48.030\nerror but this response well, you can\nget a little more fine grain there.\n\n329\n00:17:49.260 --> 00:17:54.160\nLet me make sure that I wrote that\ncorrectly, yeah, there we go.\n\n330\n00:17:54.160 --> 00:17:59.450\nSo if I come back I just wanna\nsay if there is an error,\n\n331\n00:17:59.450 --> 00:18:03.140\nwell let's just throw the error.\n\n332\n00:18:05.280 --> 00:18:08.308\nIf things go horribly awry\nwe'll just make it go away.\n\n333\n00:18:08.308 --> 00:18:15.707\nAnd then otherwise I just\nwant to console.log the data.\n\n334\n00:18:15.707 --> 00:18:18.450\nAll right so let's go to search for\ncheese on Twitter.\n\n335\n00:18:19.590 --> 00:18:23.920\nSee what tweets come back and\nthen well let's see what happens.\n\n336\n00:18:23.920 --> 00:18:24.765\n&gt;&gt; I'm fairly excited.\n\n337\n00:18:24.765 --> 00:18:27.206\n[LAUGH]\n&gt;&gt; Daniel's like yeah.\n\n338\n00:18:27.206 --> 00:18:30.660\nSo node index.js and I run and\n\n339\n00:18:30.660 --> 00:18:33.970\nI forgot that I actually have\nto pass the query for it to run.\n\n340\n00:18:33.970 --> 00:18:37.290\nAnd then there are all of our tweets.\n\n341\n00:18:37.290 --> 00:18:38.020\nYou're like, wait a minute.\n\n342\n00:18:38.020 --> 00:18:40.085\n&gt;&gt; That doesn't look like\nmany tweets I've ever seen.\n\n343\n00:18:40.085 --> 00:18:43.860\n&gt;&gt; Yeah, so\nwhat it actually sends back to you\n\n344\n00:18:43.860 --> 00:18:49.090\nis a JSON response that contains all\nkinds of information about said tweets.\n\n345\n00:18:49.090 --> 00:18:51.130\nWhen it was created, what was the ID?\n\n346\n00:18:51.130 --> 00:18:53.385\nThe text, is it truncated?\n\n347\n00:18:53.385 --> 00:18:59.287\nThe source, so I gotta be careful,\nthere is some kinda oddness here.\n\n348\n00:18:59.287 --> 00:19:01.044\n&gt;&gt; Yeah, yeah, over cheese.\n\n349\n00:19:01.044 --> 00:19:07.073\n&gt;&gt; Yeah, yeah, and then also you may\nfind some things that are inappropriate,\n\n350\n00:19:07.073 --> 00:19:10.250\nI'm hoping that cheese is fairly safe.\n\n351\n00:19:10.250 --> 00:19:11.807\n[CROSSTALK] But you never know.\n\n352\n00:19:11.807 --> 00:19:15.900\nReally all I care about is the text,\nright?\n\n353\n00:19:15.900 --> 00:19:18.520\nI don't care about all of this other data.\n\n354\n00:19:18.520 --> 00:19:22.410\nSo I have to transform the data object and\n\n355\n00:19:22.410 --> 00:19:26.490\nonly get the text part, and\nthen that's the part that I care about.\n\n356\n00:19:26.490 --> 00:19:28.576\nAll right so how do I do that?\n\n357\n00:19:28.576 --> 00:19:34.140\nWell tweets = data.map.\n\n358\n00:19:34.140 --> 00:19:37.850\nAnd for each element, let's see.\n\n359\n00:19:37.850 --> 00:19:47.460\nFor each object I want object.text,\nand zoom out.\n\n360\n00:19:47.460 --> 00:19:48.226\nThere we go.\n\n361\n00:19:48.226 --> 00:19:50.150\nAnd then on console.log, well,\n\n362\n00:19:50.150 --> 00:19:53.940\nlet's see what happens when I\nactually get the tweets now.\n\n363\n00:19:53.940 --> 00:19:58.900\nSo, what we're using here is the map\nfunction which will give me an array of\n\n364\n00:19:58.900 --> 00:20:01.207\nresponses that are JSON objects.\n\n365\n00:20:01.207 --> 00:20:05.140\nSo for each object in data,\nI'm just gonna grab the text off of it and\n\n366\n00:20:05.140 --> 00:20:08.250\nreturn a new collection that\nshould just be the text.\n\n367\n00:20:08.250 --> 00:20:12.890\nAnd then it should print out, well just\nthe text instead of all that other stuff.\n\n368\n00:20:12.890 --> 00:20:14.400\nLet's see if that works out for us.\n\n369\n00:20:16.250 --> 00:20:17.640\nAnd there we go.\n\n370\n00:20:17.640 --> 00:20:20.800\nAnd no, map is not a function.\n\n371\n00:20:20.800 --> 00:20:22.850\nLet me make sure here.\n\n372\n00:20:24.990 --> 00:20:28.750\nThat is, wait for it, I forgot.\n\n373\n00:20:28.750 --> 00:20:33.780\nI actually have to look at statuses,\nthe statuses subsection.\n\n374\n00:20:33.780 --> 00:20:35.360\nSo it's kinda hard to read this.\n\n375\n00:20:37.110 --> 00:20:37.810\nThere we go.\n\n376\n00:20:37.810 --> 00:20:42.310\nLet's put the data back here and\nlet me show you what I'm talking about.\n\n377\n00:20:42.310 --> 00:20:45.866\nKinda hard to read this but\nif I come on all of these tweets\n\n378\n00:20:48.590 --> 00:20:53.270\nAre actually well, there we go.\n\n379\n00:20:53.270 --> 00:20:57.088\nThe response has a statuses,\nand that's actually the array.\n\n380\n00:20:57.088 --> 00:21:01.485\nSo it's data.statuses, not just data,\ndata is the whole huge object,\n\n381\n00:21:01.485 --> 00:21:05.185\n.statuses is the array\nof individual tweets.\n\n382\n00:21:05.185 --> 00:21:06.516\nData is fun.\n\n383\n00:21:06.516 --> 00:21:10.173\n&gt;&gt; [LAUGH]\n&gt;&gt; So, this should get us what we're\n\n384\n00:21:10.173 --> 00:21:16.045\nanticipating and while I have this up here\nI'm gonna make sure that, yep this .text.\n\n385\n00:21:16.045 --> 00:21:21.126\nThere we go and well let's look\nat tweets and we'll clear out and\n\n386\n00:21:21.126 --> 00:21:26.035\ncheese.n Ad then there are all\nkinds of tweets about cheese.\n\n387\n00:21:26.035 --> 00:21:27.470\nNow-\n&gt;&gt; I like how the emojis are still there.\n\n388\n00:21:27.470 --> 00:21:29.255\n[LAUGH]\n&gt;&gt; The emojis cropped up,\n\n389\n00:21:29.255 --> 00:21:30.905\nI wanted to say something about that.\n\n390\n00:21:30.905 --> 00:21:33.585\nThe emojis cropped up because\nI run a customized shell.\n\n391\n00:21:33.585 --> 00:21:35.575\nI use z shell instead of bash,\n\n392\n00:21:35.575 --> 00:21:40.165\nI do not guarantee that they will render\nappropriately in your terminal window.\n\n393\n00:21:40.165 --> 00:21:42.010\nSo keep that in mind.\n\n394\n00:21:42.010 --> 00:21:46.740\nBut now I've been able to make a call to\nthe Twitter API, grab all kinds of things,\n\n395\n00:21:46.740 --> 00:21:49.400\nand well, get it done.\n\n396\n00:21:49.400 --> 00:21:52.100\nHowever Daniel, I know I've got\na bunch of other stuff to do,\n\n397\n00:21:52.100 --> 00:21:54.375\nand I just don't think we\nhave time in this episode.\n\n398\n00:21:54.375 --> 00:21:55.760\n&gt;&gt; [LAUGH] Well that's perfectly fine.\n\n399\n00:21:55.760 --> 00:21:58.080\nI look forward to seeing what\nrolls out in part three.\n\n400\n00:21:58.080 --> 00:22:00.280\nThis has been pretty cool so\nfar, to be honest with you.\n\n401\n00:22:00.280 --> 00:22:03.442\nVery neat to be able to say,\nyeah, I'm on the command line,\n\n402\n00:22:03.442 --> 00:22:05.482\nI want to check Twitter really quickly.\n\n403\n00:22:05.482 --> 00:22:07.110\nAnd now you build that\nfunctionality in there.\n\n404\n00:22:07.110 --> 00:22:09.300\nI can't wait to see how\nyou expand that out and\n\n405\n00:22:09.300 --> 00:22:13.280\nmake it a little more functional,\nmaybe a little nicer for us to view.\n\n406\n00:22:13.280 --> 00:22:14.600\nSo that will be interesting.\n\n407\n00:22:14.600 --> 00:22:17.580\nWe do appreciate you joining us today,\nJustin we'll see you in part three.\n\n408\n00:22:17.580 --> 00:22:19.650\nHopefully we'll see you good\nfolks in part three as well.\n\n409\n00:22:19.650 --> 00:22:22.163\nAs for\nthis episode we're signing off at ITProTV,\n\n410\n00:22:22.163 --> 00:22:24.240\nI've been your host Daniel Lowrie.\n\n411\n00:22:24.240 --> 00:22:25.470\n&gt;&gt; And I'm Justin Dennison.\n\n412\n00:22:25.470 --> 00:22:26.664\n&gt;&gt; And we'll see you next time.\n\n413\n00:22:26.664 --> 00:22:34.021\n[MUSIC]\n\n414\n00:22:34.021 --> 00:22:35.470\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "217826045"
        },
        {
          "description": "In this episode, Daniel and Justin finish building their Twitter CLI using NodeJS. Here they put some finishing touches on their code and then show you how to make the new app have cleaner output as well as globally accessible in the system.",
          "length": "1124",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-3-lets_build_it_twitter_cli_pt3-051517-PGM.00_31_33_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-3-lets_build_it_twitter_cli_pt3-051517-PGM.00_31_33_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-14-1-3-lets_build_it_twitter_cli_pt3-051517-PGM.00_31_33_24.Still001-sm.jpg",
          "title": "Lets Build It: Twitter CLI Part 3",
          "transcript": "",
          "vimeoId": "217825169"
        },
        {
          "description": "In this episode, Daniel and Justin start building their Click Capture app which will track where a user has clicked on a web page. They start by setting up the environment as well as discussing the importance of Socket.IO in their app.",
          "length": "1126",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-lets_build_it_click_capture-051517-PGM.00_19_00_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-lets_build_it_click_capture-051517-PGM.00_19_00_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-lets_build_it_click_capture-051517-PGM.00_19_00_05.Still001-sm.jpg",
          "title": "Lets Build It: Click Capture",
          "transcript": "",
          "vimeoId": "217826298"
        },
        {
          "description": "In this episode, Daniel and Justin continue building their Click Capture app which will track where a user has clicked on a web page. Here they will get the app to log the x,y axis of the mouse clicks and prepare an analytics page to display the output.",
          "length": "1619",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-2-lets_build_it_click_capture_pt2-051617.00_26_41_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-2-lets_build_it_click_capture_pt2-051617.00_26_41_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-2-lets_build_it_click_capture_pt2-051617.00_26_41_17.Still001-sm.jpg",
          "title": "Let's Build It: Click Capture Part 2",
          "transcript": "",
          "vimeoId": "217989279"
        },
        {
          "description": "In this episode, Daniel and Justin continue building their Click Capture app which will track where a user has clicked on a web page. Here they will finish the app which will give a visual map of the click events.",
          "length": "1110",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-3-lets_build_it_click_capture_pt3-051617.00_18_14_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-3-lets_build_it_click_capture_pt3-051617.00_18_14_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtonodejs/techskills-introtonodejs-15-1-3-lets_build_it_click_capture_pt3-051617.00_18_14_18.Still001-sm.jpg",
          "title": "Let's Build It: Click Capture Part 3",
          "transcript": "",
          "vimeoId": "217989692"
        }
      ],
      "title": "Intro to Node.js"
    }
  ],
  "url": "intronodejs",
  "vLab": false
}
