{
  "description": "When it comes to developing websites, one of the most popular languages is PHP. Over 80% of the websites that you regularly visit are created using PHP. With popular frameworks, such as WordPress and Laravel, continuing to gain popularity, now is a great time to begin learning this fast, flexible, and easy to learn language.",
  "descriptionMD": "When it comes to developing websites, one of the most popular languages is PHP. Over 80% of the websites that you regularly visit are created using PHP. With popular frameworks, such as WordPress and Laravel, continuing to gain popularity, now is a great time to begin learning this fast, flexible, and easy to learn language.",
  "length": "14224",
  "name": "Intro to PHP",
  "practiceExam": false,
  "subtitle": "Getting started with PHP",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, we look at a brief history of PHP and what it is used for. We then get our environment set up to begin working on our first PHP file.",
          "length": "1563",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-1-1-php_overview_and_getting_started-111617-PGM.00_27_26_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-1-1-php_overview_and_getting_started-111617-PGM.00_27_26_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-1-1-php_overview_and_getting_started-111617-PGM.00_27_26_15.Still001-sm.jpg",
          "title": "PHP Overview and Getting Started",
          "transcript": "",
          "vimeoId": "243682996"
        },
        {
          "description": "In this episode, we will be taking a look at some of the basic data types in PHP and how to use them.",
          "length": "1333",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-2-1-numbers_strings_and_operators-111617-PGM.00_22_05_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-2-1-numbers_strings_and_operators-111617-PGM.00_22_05_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-2-1-numbers_strings_and_operators-111617-PGM.00_22_05_29.Still001-sm.jpg",
          "title": "Numbers, Strings and Operators",
          "transcript": "",
          "vimeoId": "243369394"
        },
        {
          "description": "In this episode, we will be discussing the wonders of conditionals, booleans, and the if...else statements",
          "length": "1614",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-3-1-conditionals-111617-PGM.00_26_47_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-3-1-conditionals-111617-PGM.00_26_47_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-3-1-conditionals-111617-PGM.00_26_47_06.Still001-sm.jpg",
          "title": "Conditionals",
          "transcript": "",
          "vimeoId": "243369175"
        },
        {
          "description": "In this episode, we will be creating and using arrays.",
          "length": "1212",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-1-arrays-111617.00_21_21_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-1-arrays-111617.00_21_21_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-1-arrays-111617.00_21_21_03.Still001-sm.jpg",
          "title": "Arrays",
          "transcript": "",
          "vimeoId": "243368987"
        },
        {
          "description": "In this episode, we will be learning how to sort, search, and manipulate arrays",
          "length": "1434",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-2-arrays_pt2-111617-PGM.00_25_08_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-2-arrays_pt2-111617-PGM.00_25_08_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-4-2-arrays_pt2-111617-PGM.00_25_08_29.Still001-sm.jpg",
          "title": "Arrays Part 2",
          "transcript": "",
          "vimeoId": "243682695"
        },
        {
          "description": "In this episode, we will be going over the for, foreach, and while loops.",
          "length": "1571",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-5-1-loops-111617-PGM.00_28_09_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-5-1-loops-111617-PGM.00_28_09_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-5-1-loops-111617-PGM.00_28_09_05.Still001-sm.jpg",
          "title": "Loops",
          "transcript": "WEBVTT\n\n1\n00:00:00.129 --> 00:00:10.129\n[MUSIC]\n\n2\n00:00:12.689 --> 00:00:16.687\nGreetings,everyone, and welcome back to\nanother exciting episode of DevPro TV.\n\n3\n00:00:16.687 --> 00:00:20.030\nI'm your host, Justin Dennison,\nand we're back in PHP land.\n\n4\n00:00:20.030 --> 00:00:22.431\nIn particular,\nwe're gonna be looking at loops.\n\n5\n00:00:22.431 --> 00:00:23.328\nWow, I about messed that up.\n\n6\n00:00:23.328 --> 00:00:27.915\nThat's kind of hard to say,\nlooking at loops, this very episode.\n\n7\n00:00:27.915 --> 00:00:31.625\nNow to help us along in that endeavor\nis the one, the only, Mr. Frank Corsa.\n\n8\n00:00:31.625 --> 00:00:32.725\nHow are you doing today, Frank?\n\n9\n00:00:32.725 --> 00:00:33.385\n&gt;&gt; I am doing well.\n\n10\n00:00:33.385 --> 00:00:34.235\nHow are you doing?\n\n11\n00:00:34.235 --> 00:00:35.547\n&gt;&gt; I am doing fantastic.\n\n12\n00:00:35.547 --> 00:00:37.965\nSo loops, we just talked about arrays and\n\n13\n00:00:37.965 --> 00:00:41.983\nloops are kind of a given\nthat you need for an array.\n\n14\n00:00:41.983 --> 00:00:43.625\nBut I know, all over the place,\n\n15\n00:00:43.625 --> 00:00:47.610\ndepending on your experience, loops are\nalways different in programming languages.\n\n16\n00:00:47.610 --> 00:00:50.110\nSo what's the story with PHP loops?\n\n17\n00:00:50.110 --> 00:00:53.630\n&gt;&gt; Well, just to define loops real quick,\nbefore we jump into that.\n\n18\n00:00:53.630 --> 00:00:56.860\nLoops is when you have any code that\nrepeats itself over and over, for\n\n19\n00:00:56.860 --> 00:00:59.360\nsome reason, for some amount of time.\n\n20\n00:00:59.360 --> 00:01:02.800\nSo that's a general description of loops,\nwhich we'll go into in just a moment.\n\n21\n00:01:02.800 --> 00:01:05.460\nSo depending on what\nlanguage you're coming from,\n\n22\n00:01:05.460 --> 00:01:08.540\nloops are handled very differently\nin many different languages.\n\n23\n00:01:08.540 --> 00:01:10.556\nIn PHP,\nwe're gonna look at a few different loops.\n\n24\n00:01:10.556 --> 00:01:14.200\nToday, we're gonna talk about FOR\nloops and FOR EACH loops, and WHILE loops.\n\n25\n00:01:14.200 --> 00:01:16.514\nAnd some of them exist in other languages,\nand some of them do not.\n\n26\n00:01:16.514 --> 00:01:19.093\nSo depending where you're coming from,\nyou might be very familiar or\n\n27\n00:01:19.093 --> 00:01:20.480\nyou might be very confused.\n\n28\n00:01:20.480 --> 00:01:23.260\nSo let's hop in and take a look,\nand see what we can do.\n\n29\n00:01:23.260 --> 00:01:24.745\nSo we're gonna jump to the laptop screen.\n\n30\n00:01:24.745 --> 00:01:28.360\nAnd we're gonna start off by\ncreating a new file, like normal.\n\n31\n00:01:28.360 --> 00:01:30.496\nAnd hm, let's call it Loops this time.\n\n32\n00:01:32.238 --> 00:01:35.985\nAnd let's do our opening and\nclosing brackets again.\n\n33\n00:01:35.985 --> 00:01:38.751\nAnd this time echo Loops.\n\n34\n00:01:40.458 --> 00:01:42.691\nAnd just to make sure it's working,\nlet's go ahead and\n\n35\n00:01:42.691 --> 00:01:44.500\nbring it up before we get started.\n\n36\n00:01:44.500 --> 00:01:45.960\nThere's our Loops!\n\n37\n00:01:45.960 --> 00:01:47.340\nAnd there's our loops, okay.\n\n38\n00:01:48.590 --> 00:01:52.370\nSo today we're gonna go\nover a few different loops.\n\n39\n00:01:52.370 --> 00:01:55.130\nSo let's add a little bit of sudo code,\nlike we talked about in the last episode,\n\n40\n00:01:55.130 --> 00:01:57.880\nso we can figure out exactly\nwhat we're after today.\n\n41\n00:01:57.880 --> 00:02:01.390\nSo the first step is the FOR loop.\n\n42\n00:02:01.390 --> 00:02:04.870\nNow there's times that you're gonna want\nto do something, the same thing, over and\n\n43\n00:02:04.870 --> 00:02:06.800\nover for a set amount of times.\n\n44\n00:02:06.800 --> 00:02:10.689\nSo for example, if I came in today and\nI wanted to say, hi, Justin,\n\n45\n00:02:10.689 --> 00:02:13.032\nbut I wanted to say it\nnine times in a row.\n\n46\n00:02:13.032 --> 00:02:16.217\nI could sit here and say, hi, Justin, hi,\nJustin, hi, Justin, over and over, and\n\n47\n00:02:16.217 --> 00:02:16.880\nthat's easy.\n\n48\n00:02:16.880 --> 00:02:21.398\nBut if we wanna do that in a code,\nwe really don't want to say echo hello,\n\n49\n00:02:21.398 --> 00:02:22.668\nJustin nine times.\n\n50\n00:02:22.668 --> 00:02:23.887\nThis is where the FOR loop can come in.\n\n51\n00:02:23.887 --> 00:02:28.160\nWe can say, hey,\nexecute this code nine times.\n\n52\n00:02:28.160 --> 00:02:33.149\nSo the first part is,\nwe're gonna Create for\n\n53\n00:02:33.149 --> 00:02:36.570\nloop to say hi justin 9 times.\n\n54\n00:02:36.570 --> 00:02:41.097\nAnd then from there, there's gonna be\na time that you wanna go through an array,\n\n55\n00:02:41.097 --> 00:02:44.640\nand then play around with\neach of the array elements.\n\n56\n00:02:44.640 --> 00:02:47.310\nSo maybe you wanna cycle\nthrough each of the arrays and\n\n57\n00:02:47.310 --> 00:02:48.880\nadd a number to an existing number.\n\n58\n00:02:48.880 --> 00:02:50.220\nAnd maybe you wanna cycle\nthrough the arrays, and\n\n59\n00:02:50.220 --> 00:02:53.790\ncreate a special string based on\neach of the values in the array.\n\n60\n00:02:53.790 --> 00:02:56.070\nOr there's a variety of different things\nthat you might wanna go through each\n\n61\n00:02:56.070 --> 00:02:57.730\nindividual element in an array.\n\n62\n00:02:57.730 --> 00:03:00.660\nAnd this is where a FOR\nEACH loop is very handy.\n\n63\n00:03:00.660 --> 00:03:04.760\nSo we're gonna go through an array\nthat has a lot of different context.\n\n64\n00:03:04.760 --> 00:03:06.900\nThere's gonna be talking about\na few different people and\n\n65\n00:03:06.900 --> 00:03:08.100\ntheir favorite colors.\n\n66\n00:03:08.100 --> 00:03:12.419\nAnd we're gonna FOR EACH through each of\nthose to create strings that say which is\n\n67\n00:03:12.419 --> 00:03:15.036\nthe favorite color that\ngoes with which person.\n\n68\n00:03:15.036 --> 00:03:18.864\nSo we're gonna create a FOR\n\n69\n00:03:18.864 --> 00:03:23.860\nEACH loop to create strings telling\n\n70\n00:03:23.860 --> 00:03:28.362\nus people and favorite colors.\n\n71\n00:03:28.362 --> 00:03:30.556\nAnd then lastly, the WHILE loop.\n\n72\n00:03:30.556 --> 00:03:34.583\nThe WHILE loop will keep\nrepeating over and over and over,\n\n73\n00:03:34.583 --> 00:03:37.138\nuntil a condition is no longer true.\n\n74\n00:03:37.138 --> 00:03:39.354\nSo previously we had\nan episode on conditionals and\n\n75\n00:03:39.354 --> 00:03:43.000\nwe talked about a few different\nthings that could be true or false.\n\n76\n00:03:43.000 --> 00:03:48.430\nAnd in this case, we're gonna keep\ncycling through until we flip coins and\n\n77\n00:03:48.430 --> 00:03:50.230\nwe have three heads.\n\n78\n00:03:50.230 --> 00:03:52.870\nSo we're gonna create coins and\nwe're gonna flip them over and over,\n\n79\n00:03:52.870 --> 00:03:54.140\nwe're gonna get tails and heads.\n\n80\n00:03:54.140 --> 00:03:55.420\nAnd we wanna try to get three heads.\n\n81\n00:03:55.420 --> 00:03:58.190\nAnd we're just gonna keep flipping,\nuntil we get three of them.\n\n82\n00:03:58.190 --> 00:04:00.140\nAnd don't care about how\nmany tails there are.\n\n83\n00:04:00.140 --> 00:04:04.698\nSo we're gonna create\na coin flipping while loop,\n\n84\n00:04:06.847 --> 00:04:12.457\nLooking for three heads.\n\n85\n00:04:12.457 --> 00:04:14.809\nAll right, so\nthat's a real basic sudo code, but\n\n86\n00:04:14.809 --> 00:04:18.380\nwe're only gonna have a couple of loops,\nso that should work for us.\n\n87\n00:04:18.380 --> 00:04:22.256\nSo let's jump right in, and first we're\ngonna create something called a FOR loop.\n\n88\n00:04:22.256 --> 00:04:25.501\nNow the FOR loop is gonna have a similar\ncontext to the if statements and\n\n89\n00:04:25.501 --> 00:04:28.096\nthe switch statements that\nwe've played with before.\n\n90\n00:04:28.096 --> 00:04:32.639\nThere's gonna be some elements inside and\nthen there are open and\n\n91\n00:04:32.639 --> 00:04:34.296\nclosing curly braces.\n\n92\n00:04:34.296 --> 00:04:37.464\nSo inside, let's see.\n\n93\n00:04:42.747 --> 00:04:45.357\nNow inside there's gonna\nbe three separate parts.\n\n94\n00:04:45.357 --> 00:04:50.650\nWe're gonna identify some variable\nthat we wanna tie the FOR to.\n\n95\n00:04:50.650 --> 00:04:55.853\nAnd we wanna have some condition, and\nthen some transaction to that variable.\n\n96\n00:04:55.853 --> 00:05:00.089\nSo in this case, so let's just\nput an arbitrary number in there,\n\n97\n00:05:00.089 --> 00:05:03.465\njust so we can pretend we were doing.\n\n98\n00:05:03.465 --> 00:05:06.850\nSo we're saying,\nhey we're going to set I to zero.\n\n99\n00:05:06.850 --> 00:05:09.880\nSo when FOR first starts,\nthis part is run.\n\n100\n00:05:09.880 --> 00:05:14.263\nAnd we're saying, hey, I is what we're\npaying attention to, so I is zero.\n\n101\n00:05:14.263 --> 00:05:19.240\nAnd then we wanna keep running\nuntil I is no longer less than 10.\n\n102\n00:05:19.240 --> 00:05:21.880\nSo right now this is true,\nI is less than 0, and\n\n103\n00:05:21.880 --> 00:05:26.369\nwe're gonna keep running everything in\nthere until this part is no longer true.\n\n104\n00:05:26.369 --> 00:05:29.037\nAnd then this last part is\nwhat helps us get there.\n\n105\n00:05:29.037 --> 00:05:32.090\nThis is run every time the loop finishes.\n\n106\n00:05:33.800 --> 00:05:38.030\nThis is a special operator, so before\nwe've talked about adding some numbers.\n\n107\n00:05:38.030 --> 00:05:45.870\nSo $num = 3; and we could add to it,\nwe could do $num + 1; something like that.\n\n108\n00:05:45.870 --> 00:05:50.070\nOr we could go shorthand, += 1,\nsomething along those lines.\n\n109\n00:05:50.070 --> 00:05:53.570\nBut there's something even shorter that\nyou could do, if you were just adding one.\n\n110\n00:05:55.100 --> 00:05:58.885\nSo all three of these\nare essentially the same thing.\n\n111\n00:05:58.885 --> 00:06:02.230\nAnd normally, you don't see this bottom\none too often, except in a FOR loop.\n\n112\n00:06:02.230 --> 00:06:05.710\nUsually you see this one, just to be a\nlittle bit clear exactly what we're doing.\n\n113\n00:06:05.710 --> 00:06:08.960\nBut all of these are the same statement,\nessentially.\n\n114\n00:06:10.610 --> 00:06:14.680\nSo inside, what this means, is inside\nthe FOR loop, is we start off at 0, and\n\n115\n00:06:14.680 --> 00:06:18.200\neach time we run through the code,\nwe're gonna add 1.\n\n116\n00:06:18.200 --> 00:06:23.320\nAnd whenever the I is no longer less than\n10, we're gonna stop running the code.\n\n117\n00:06:24.620 --> 00:06:27.030\nSo let's go ahead and\nadd what we're trying to do in here.\n\n118\n00:06:27.030 --> 00:06:30.537\nTrying to say, Hi Justin.\n\n119\n00:06:30.537 --> 00:06:32.230\nLet's just add a few\nexclamation points in there.\n\n120\n00:06:34.080 --> 00:06:36.576\nSo right now, like I said,\nwe're gonna start at 0, and\n\n121\n00:06:36.576 --> 00:06:39.750\nwe're going to keep cycling through\nuntil I is no longer less than 10.\n\n122\n00:06:39.750 --> 00:06:42.960\nAnd we're going to add 1 every\nsingle time to help us get there.\n\n123\n00:06:42.960 --> 00:06:44.940\nSo let's take a look and\nsee how this works.\n\n124\n00:06:46.120 --> 00:06:50.298\nActually, let's do something even better,\njust so we can see this a little clearer.\n\n125\n00:06:50.298 --> 00:06:53.095\nI'm gonna add a little bit of PHP in here.\n\n126\n00:06:53.095 --> 00:06:57.171\nAdd an extra line in there just so\nwe can, oop, too much space.\n\n127\n00:06:57.171 --> 00:06:57.783\nLet's remove that.\n\n128\n00:06:59.993 --> 00:07:01.270\nThere we go.\n\n129\n00:07:01.270 --> 00:07:06.615\nSo there is all of our Justins, And\n\n130\n00:07:06.615 --> 00:07:09.760\nright now we have 10 times,\nbut we're after 9.\n\n131\n00:07:09.760 --> 00:07:11.390\nSo what happened?\n\n132\n00:07:11.390 --> 00:07:14.630\nWell, if we look,\nthe very first loop through is at 0.\n\n133\n00:07:14.630 --> 00:07:17.339\nAnd we're saying, hey,\nrun all the way through,\n\n134\n00:07:17.339 --> 00:07:19.357\nuntil it's no longer less than 10.\n\n135\n00:07:19.357 --> 00:07:22.440\nAnd this code happens, and\nat the end is when we add the extra 1.\n\n136\n00:07:22.440 --> 00:07:25.800\nSo it's going through, well,\nI is 1, and than I is 2, and\n\n137\n00:07:25.800 --> 00:07:26.680\nthen all the way up through.\n\n138\n00:07:26.680 --> 00:07:30.550\nAnd it goes all the way through when I\nis 9, and then stops once I becomes 10.\n\n139\n00:07:30.550 --> 00:07:32.820\nThat means we're going through 10 times.\n\n140\n00:07:32.820 --> 00:07:36.580\nSo to actually get it to 9 times,\nwe either have to start and 1 and\n\n141\n00:07:36.580 --> 00:07:39.210\ngo through until it's\nno longer less than 10.\n\n142\n00:07:39.210 --> 00:07:43.408\nOr not that many, or\nwe have to change this to 9.\n\n143\n00:07:43.408 --> 00:07:47.231\nThere's something to think about,\nthat these cycles,\n\n144\n00:07:47.231 --> 00:07:50.347\nif you start at 0,\nthat 0 will happen first.\n\n145\n00:07:50.347 --> 00:07:53.147\nSo you have to consider that when you're\ntrying to figure out how many times it's\n\n146\n00:07:53.147 --> 00:07:53.653\ngoing to run.\n\n147\n00:07:55.757 --> 00:07:58.968\nSo let's see, did we, yep, we fixed that.\n\n148\n00:07:58.968 --> 00:08:03.288\nSo now it should And\nit removed one, so there's our,\n\n149\n00:08:03.288 --> 00:08:07.060\nnine times of saying Hi, Justin.\n\n150\n00:08:07.060 --> 00:08:09.100\nAnd that is the for loop.\n\n151\n00:08:09.100 --> 00:08:10.420\n&gt;&gt; Now, I did just want to jump in.\n\n152\n00:08:10.420 --> 00:08:11.680\nIf you ever see me out in public,\n\n153\n00:08:11.680 --> 00:08:13.706\nI don't actually want you\nto tell me hi nine times.\n\n154\n00:08:13.706 --> 00:08:15.440\nI got it the first time.\n\n155\n00:08:15.440 --> 00:08:20.140\nSo but there is a quick follow-up\nquestion about this I++.\n\n156\n00:08:20.140 --> 00:08:23.150\nAre there other things that I\ncan do other than the ++ there?\n\n157\n00:08:23.150 --> 00:08:27.690\nOr am I just, in PHP am I limited\nto incrementing by 1 always?\n\n158\n00:08:27.690 --> 00:08:30.901\n&gt;&gt; Technically you could do\na lot of different things there.\n\n159\n00:08:30.901 --> 00:08:34.020\nIn technical terms,\nthese are separated by semicolons.\n\n160\n00:08:34.020 --> 00:08:36.810\nSo this last part could\nbe almost anything.\n\n161\n00:08:36.810 --> 00:08:38.640\nIt's very rare people\nwill use it that way,\n\n162\n00:08:38.640 --> 00:08:44.340\nbut theoretically you could be going\nby other increments if you wanted to.\n\n163\n00:08:44.340 --> 00:08:46.330\n&gt;&gt; So could I go by 2 and\n\n164\n00:08:46.330 --> 00:08:50.020\nif I were to do that, how would I do\nthat in the context of a for loop?\n\n165\n00:08:50.020 --> 00:08:53.960\n&gt;&gt; So let's see if we can find a few\nexamples in our awesome documentation.\n\n166\n00:08:53.960 --> 00:08:55.970\nSo we're gonna search for PHP4.\n\n167\n00:08:58.331 --> 00:09:02.240\nAnd we're gonna scroll down and\n\n168\n00:09:02.240 --> 00:09:08.335\n[SOUND] let's see if they\nhave a good example here.\n\n169\n00:09:08.335 --> 00:09:11.786\nSo these are some extra expressions\nin there, but I don't see.\n\n170\n00:09:17.710 --> 00:09:19.660\nI don't see a good example of that.\n\n171\n00:09:19.660 --> 00:09:23.180\nBut all these are just normal expressions,\nso anything that increments, so\n\n172\n00:09:23.180 --> 00:09:25.240\nyou could go I plus equals 2, or\n\n173\n00:09:25.240 --> 00:09:29.792\nI plus equals 5, anything along those\nlines, to get greater increments.\n\n174\n00:09:29.792 --> 00:09:31.970\n&gt;&gt; Okay, but that was interesting to see.\n\n175\n00:09:31.970 --> 00:09:34.190\nI wouldn't think of putting\nother expressions in there.\n\n176\n00:09:34.190 --> 00:09:37.750\nI think there was one that had a paren or\nan echo or something, and\n\n177\n00:09:37.750 --> 00:09:40.120\nthen the I ++ and a bunch of other things.\n\n178\n00:09:40.120 --> 00:09:41.070\nThere's one.\n\n179\n00:09:41.070 --> 00:09:42.170\n&gt;&gt; Yeah, that's a-\n&gt;&gt; Shenanigans,\n\n180\n00:09:42.170 --> 00:09:44.490\nI'm not saying I recommend that.\n\n181\n00:09:44.490 --> 00:09:47.940\nI'm just saying in some other\nplaces I would have thought\n\n182\n00:09:47.940 --> 00:09:51.940\nthat would have broke it, like the loop\nwould have just gone, no, I'm not running.\n\n183\n00:09:51.940 --> 00:09:54.320\nBut again, just reiterate.\n\n184\n00:09:54.320 --> 00:09:56.200\nJust because you can,\ndoesn't mean you should.\n\n185\n00:09:56.200 --> 00:09:56.720\n&gt;&gt; Yeah, definitely.\n\n186\n00:09:56.720 --> 00:09:59.160\nIn my experience,\nyou wanna keep things simple so\n\n187\n00:09:59.160 --> 00:10:01.990\nthat if someone else were to look at your\ncode or you wanna come back to it three,\n\n188\n00:10:01.990 --> 00:10:04.150\nfour years later,\nyou know what's going on.\n\n189\n00:10:04.150 --> 00:10:08.240\nIn this for segment here, yeah,\nwe probably know what's going on now, and\n\n190\n00:10:08.240 --> 00:10:10.180\nwe probably could go back\nto it in a month or two.\n\n191\n00:10:10.180 --> 00:10:13.170\nBut if I were to come back to this three\nyears, later, I have to really go, wait,\n\n192\n00:10:13.170 --> 00:10:14.820\nwhat's going on here?\n\n193\n00:10:14.820 --> 00:10:18.660\nOkay, so they're initializing these two\nvariables, and you wanna make sure these,\n\n194\n00:10:18.660 --> 00:10:21.700\nbut you don't wanna have to go through\nall these steps unless you have to.\n\n195\n00:10:21.700 --> 00:10:24.690\nIn this case, they had multiple variables,\nand they had to really go through.\n\n196\n00:10:24.690 --> 00:10:27.290\nMaybe it was needed, probably not.\n\n197\n00:10:27.290 --> 00:10:31.530\nSo filling, try to keep it simple if\nyou can, but these are expressions.\n\n198\n00:10:31.530 --> 00:10:33.100\nYou could get complicated\nif you wanted to.\n\n199\n00:10:36.430 --> 00:10:37.830\nSo this is our for loop.\n\n200\n00:10:37.830 --> 00:10:40.900\nThis is one of the more\nbasic loops in PHP, but\n\n201\n00:10:40.900 --> 00:10:44.570\nyou're gonna see this quite a bit mainly\nbecause you're going to see this thing.\n\n202\n00:10:44.570 --> 00:10:47.350\nYou might have been shown an example\ncalled the Count function.\n\n203\n00:10:47.350 --> 00:10:49.370\nSo before we had an array.\n\n204\n00:10:49.370 --> 00:10:52.260\nSo we're just going to call this new,\nand array.\n\n205\n00:10:54.950 --> 00:10:57.072\nAnd we're just gonna do colors,\njust to make it quick and easy.\n\n206\n00:11:01.272 --> 00:11:03.922\nNow maybe we only wanna run\nthis the amount of times\n\n207\n00:11:03.922 --> 00:11:05.760\nthere are values in the function.\n\n208\n00:11:05.760 --> 00:11:07.280\nSo in this case, there's three values.\n\n209\n00:11:07.280 --> 00:11:09.680\nWe wanna to run this three times.\n\n210\n00:11:09.680 --> 00:11:13.660\nSo down here, instead of being\nless than a specific number,\n\n211\n00:11:13.660 --> 00:11:17.240\nwe could use a function\ncalled the count function.\n\n212\n00:11:18.480 --> 00:11:22.860\nMan, and\ninside this function we're gonna pass new.\n\n213\n00:11:22.860 --> 00:11:28.500\nAnd what this does is it says,\nwhat this count new does is it tells us,\n\n214\n00:11:28.500 --> 00:11:31.400\ngives us an integer of how many\nvalues are inside that array.\n\n215\n00:11:31.400 --> 00:11:37.891\nSo in this case and we're initializing\nI=0 and it's saying I is less than 3.\n\n216\n00:11:37.891 --> 00:11:41.670\nAnd that's a very handy trick for\nwhen you're cycling through arrays.\n\n217\n00:11:41.670 --> 00:11:44.880\nThat way, for whatever reason, maybe\nyou have a lot of different elements in\n\n218\n00:11:44.880 --> 00:11:47.800\nyour array and you need to cycle through\neach one to do something with or\n\n219\n00:11:47.800 --> 00:11:49.370\nyou just need to do enough.\n\n220\n00:11:49.370 --> 00:11:50.150\nFor example,\n\n221\n00:11:50.150 --> 00:11:55.040\non a recent project I had an unlimited\namount of pictures within an array.\n\n222\n00:11:55.040 --> 00:11:57.470\nAnd I need to cycle through and\ncreate similar thumbnails for\n\n223\n00:11:57.470 --> 00:11:58.600\neach of those pictures.\n\n224\n00:11:58.600 --> 00:12:02.070\nSo I had four each, and I had a count of\nhowever many pictures are in there because\n\n225\n00:12:02.070 --> 00:12:05.700\nI won't know how many pictures are in\nthere until the person added the pictures.\n\n226\n00:12:05.700 --> 00:12:08.740\nSo this would be a good way,\ninstead of specifying a number,\n\n227\n00:12:08.740 --> 00:12:11.500\nyou could go just however many\nelements are in this array.\n\n228\n00:12:13.710 --> 00:12:16.171\nNow another way to handle that is\nsomething called the for each loop.\n\n229\n00:12:17.210 --> 00:12:20.022\nNow before we jump in\nthere we're gonna go and\n\n230\n00:12:20.022 --> 00:12:23.797\ncopy an array I typed up just\nbecause it's a little complex.\n\n231\n00:12:23.797 --> 00:12:25.310\nSo we're going to have the host array.\n\n232\n00:12:25.310 --> 00:12:28.010\nIf you were in any of the last couple\nof episodes you've probably seen us\n\n233\n00:12:28.010 --> 00:12:29.280\nplay around with host array a few times,\nbut\n\n234\n00:12:29.280 --> 00:12:32.990\nthis is a little more complex in that\nthis is a multi-dimensional array.\n\n235\n00:12:32.990 --> 00:12:35.363\nWe talked about that briefly at\nthe end of the last episode.\n\n236\n00:12:35.363 --> 00:12:40.010\nAnd what this is is for each element\ninside the array is another array.\n\n237\n00:12:40.010 --> 00:12:44.884\nIn this array, we have the name of\na host and their favorite color.\n\n238\n00:12:44.884 --> 00:12:47.601\nAnd what we wanna do is we wanna\ngo through each one of these and\n\n239\n00:12:47.601 --> 00:12:50.950\ncreate a string that says, hey,\nJustin's favorite color is blue.\n\n240\n00:12:50.950 --> 00:12:53.140\nFred's favorite color is green, etc., etc.\n\n241\n00:12:54.910 --> 00:12:56.905\nSo what we're gonna do is use the for\neach loop.\n\n242\n00:13:01.832 --> 00:13:05.660\nSo what we're gonna do first,\nwe're not gonna use all of that right now.\n\n243\n00:13:05.660 --> 00:13:06.745\nWe're gonna have to play\nwith that in just a moment.\n\n244\n00:13:13.394 --> 00:13:17.971\nSo what this does is it takes each\nsingle element within the array, and\n\n245\n00:13:17.971 --> 00:13:20.620\npasses it as this new array called host.\n\n246\n00:13:21.640 --> 00:13:26.690\nSo up above, if we did this with\na simple array, such as up here, so\n\n247\n00:13:26.690 --> 00:13:27.540\nwe're gonna have for each.\n\n248\n00:13:27.540 --> 00:13:30.879\nJust taking an example of what a non\nmultidimensional array would look like.\n\n249\n00:13:36.517 --> 00:13:41.380\nWe're just gonna say value,\njust to keep it easy.\n\n250\n00:13:41.380 --> 00:13:44.943\nSo value in this case, the first time it\nruns through, value would equal blue.\n\n251\n00:13:44.943 --> 00:13:49.200\nAnd a second time value would equal red,\nand a third time value would equal green.\n\n252\n00:13:49.200 --> 00:13:51.840\nSo let's go and just output that, just so\nyou can see what that looks like here.\n\n253\n00:13:53.700 --> 00:13:54.307\nAm I echoing anything?\n\n254\n00:13:54.307 --> 00:13:57.680\nYeah, let's go ahead and\ncomment that just so we're not bombarded.\n\n255\n00:14:02.510 --> 00:14:04.530\nSo we have our blue, red, and green.\n\n256\n00:14:04.530 --> 00:14:07.860\nAnd that's the corresponding\nvalue as we cycle through.\n\n257\n00:14:07.860 --> 00:14:10.547\nNow the same concept works with\na multi-dimensional array.\n\n258\n00:14:11.570 --> 00:14:15.950\nHowever, instead of passing just the value\nof green, it's passing this entire array.\n\n259\n00:14:15.950 --> 00:14:16.980\nSo the first time,\n\n260\n00:14:16.980 --> 00:14:21.340\nit goes through a host that's equalling\nthis array with name and color.\n\n261\n00:14:21.340 --> 00:14:24.170\nSo let's go ahead and echo out a string.\n\n262\n00:14:24.170 --> 00:14:26.812\nWe're gonna convert this.\n\n263\n00:14:26.812 --> 00:14:32.870\nFirst, we're gonna use the person's name,\nso\n\n264\n00:14:32.870 --> 00:14:38.798\nwe can say host and name,\nname's favorite is.\n\n265\n00:14:46.501 --> 00:14:47.354\nOkay, and,\n\n266\n00:14:54.789 --> 00:14:57.770\nThere we go.\n\n267\n00:14:57.770 --> 00:15:02.430\nSo what we're doing here is we're,\nthat's why, there.\n\n268\n00:15:02.430 --> 00:15:04.100\nIs we're using a variable\nwithin the string,\n\n269\n00:15:04.100 --> 00:15:06.310\nwhich we talked about in\na much earlier episode.\n\n270\n00:15:06.310 --> 00:15:10.800\nAnd you can go through, and we're\ngonna input these values, the name and\n\n271\n00:15:10.800 --> 00:15:15.830\ncolor, based on the host variable,\nwhich is the single array, the first time.\n\n272\n00:15:15.830 --> 00:15:18.785\nAnd the second array,\nthe second time that goes through the for\n\n273\n00:15:18.785 --> 00:15:21.027\neach loop will be the second one,\netc., etc.\n\n274\n00:15:21.027 --> 00:15:23.610\nSo let's take a look and\nsee how this goes down.\n\n275\n00:15:25.220 --> 00:15:26.670\nDid I delete the other echo?\n\n276\n00:15:26.670 --> 00:15:27.170\nYes.\n\n277\n00:15:29.198 --> 00:15:30.390\nSo here we are.\n\n278\n00:15:30.390 --> 00:15:32.540\nAgain, it's all jumbled together, so\n\n279\n00:15:32.540 --> 00:15:36.221\nlet's add extra space in here just so\nwe can see what this looks like.\n\n280\n00:15:36.221 --> 00:15:40.060\nWe're gonna add a new line and\nthere we go.\n\n281\n00:15:40.060 --> 00:15:43.300\nSo here's all four of our\nentries in that array\n\n282\n00:15:43.300 --> 00:15:44.980\ncycled through one at\na time creating a string.\n\n283\n00:15:47.360 --> 00:15:49.780\nNow this array's fairly complex.\n\n284\n00:15:49.780 --> 00:15:52.876\nAnd there's a way to make this a little\neasier if we define the array a little\n\n285\n00:15:52.876 --> 00:15:53.430\ndifferent.\n\n286\n00:15:53.430 --> 00:15:56.411\nBecause with the for each,\ninstead of passing just the value,\n\n287\n00:15:56.411 --> 00:15:58.500\nyou can pass the key as well.\n\n288\n00:15:58.500 --> 00:16:00.228\nSo we We're gonna do\nthings a little different.\n\n289\n00:16:00.228 --> 00:16:02.681\nWe're gonna switch on this\narray with this array.\n\n290\n00:16:06.564 --> 00:16:09.100\nWe're gonna do things\na little bit different.\n\n291\n00:16:25.910 --> 00:16:29.126\nSo instead of having that large array,\n\n292\n00:16:29.126 --> 00:16:34.300\nwe could pass the actual key\nwith inside the loop as well.\n\n293\n00:16:34.300 --> 00:16:41.180\nSo before our key, if we jump back over\nthis other one, the index was 0, 1, 2, 3.\n\n294\n00:16:41.180 --> 00:16:43.987\nAnd in this case,\nwe're sorting a name as the index, and\n\n295\n00:16:43.987 --> 00:16:46.279\nthen sorting the favorite\ncolor as the value.\n\n296\n00:16:46.279 --> 00:16:50.870\nAnd this will make a little bit more\nefficient, a little easier to read.\n\n297\n00:16:50.870 --> 00:16:51.570\nSo let's take a look.\n\n298\n00:16:52.590 --> 00:16:59.610\nIf we do this right, which, yep, it should\ngive us the same thing, and there it is.\n\n299\n00:16:59.610 --> 00:17:03.330\nSo it saved us a little bit\nof extra space here, and\n\n300\n00:17:03.330 --> 00:17:06.150\nit's a lot easier to manage and\neasier to read what's going on.\n\n301\n00:17:07.270 --> 00:17:10.080\nSo this is the foreach loop.\n\n302\n00:17:10.080 --> 00:17:13.660\nAnd in most cases, this is how you would\nbe using it for a variety of different\n\n303\n00:17:13.660 --> 00:17:17.450\nthings, passing in arrays with different\nfunctions that you're playing around with.\n\n304\n00:17:17.450 --> 00:17:20.440\n&gt;&gt; Now, the quick question about\nthis new syntax is name to color.\n\n305\n00:17:20.440 --> 00:17:23.380\nIf I were to use that with a numeric\narray, where they're indexed by numbers\n\n306\n00:17:23.380 --> 00:17:27.700\nand I try to use this syntax,\ndo I get index and value?\n\n307\n00:17:29.000 --> 00:17:31.210\nSo if we scroll up to colors.\n\n308\n00:17:31.210 --> 00:17:35.267\n&gt;&gt; Yes.\n&gt;&gt; And I did for color, colors, or\n\n309\n00:17:35.267 --> 00:17:41.751\nwhatever it may be, you called it new,\nfor new as color or\n\n310\n00:17:41.751 --> 00:17:47.270\nindex to color, would I get 0, 1, 2, 3-\n&gt;&gt; Yes.\n\n311\n00:17:47.270 --> 00:17:48.730\n&gt;&gt; As the key value pair in that case?\n\n312\n00:17:48.730 --> 00:17:51.820\n&gt;&gt; Yes, and even though we're\nnot specifying an index here,\n\n313\n00:17:51.820 --> 00:17:56.120\nthese have an index, which is\nthe numerical value, so, 0, 1, 2, 3.\n\n314\n00:17:56.120 --> 00:17:58.445\nSo this is the same as saying this.\n\n315\n00:17:58.445 --> 00:18:02.738\nSo if you were to pass an array like\nthat into the foreach using this extra\n\n316\n00:18:02.738 --> 00:18:06.601\npart here, that extra variable here,\nin this case, name, but\n\n317\n00:18:06.601 --> 00:18:10.300\nif we named it anything else,\nwould be the numerical value.\n\n318\n00:18:10.300 --> 00:18:13.181\n&gt;&gt; Okay, I just wanted to\nclarify cuz I know sometimes\n\n319\n00:18:13.181 --> 00:18:15.331\nthere are shenanigans here, right?\n\n320\n00:18:15.331 --> 00:18:20.110\nAnd I'm trying to make sure I understand\nthere's a small difference between\n\n321\n00:18:20.110 --> 00:18:22.640\nassociative and numeric arrays.\n\n322\n00:18:22.640 --> 00:18:24.965\nBut it looks like most of\nthe constructs that work on one work\n\n323\n00:18:24.965 --> 00:18:25.890\nwith the other, correct?\n\n324\n00:18:25.890 --> 00:18:28.210\n&gt;&gt; Yeah, and for the most part,\nthey're very identical.\n\n325\n00:18:28.210 --> 00:18:31.954\nWhen it comes to associating a numeric,\nthe main difference is just us\n\n326\n00:18:31.954 --> 00:18:34.427\nunderstanding which one\nif one has strings and\n\n327\n00:18:34.427 --> 00:18:36.885\nones integers that define them themselves.\n\n328\n00:18:36.885 --> 00:18:39.820\nMost of the functions such as count or\nin array or\n\n329\n00:18:39.820 --> 00:18:41.730\nany of these other functions\nthat we're playing around with,\n\n330\n00:18:41.730 --> 00:18:45.870\nmost of them will work on both without\neven realizing it's two different arrays.\n\n331\n00:18:45.870 --> 00:18:47.423\nThere is a few cases.\n\n332\n00:18:47.423 --> 00:18:51.808\nSo, for example, up here, if we were\nmanipulating the number of the index,\n\n333\n00:18:51.808 --> 00:18:56.394\nso maybe we're creating a new array and\nwe have to align these numbers together or\n\n334\n00:18:56.394 --> 00:19:00.239\nanything like that, then it would\nbe important to get that index and\n\n335\n00:19:00.239 --> 00:19:01.800\ndo things with it.\n\n336\n00:19:01.800 --> 00:19:03.940\nBut in most cases,\nthey work almost identical.\n\n337\n00:19:05.750 --> 00:19:09.030\nOkay, so here's our for,\nand here's our foreach.\n\n338\n00:19:09.030 --> 00:19:12.710\nSo last but not least,\nwe have to create a coin flipping.\n\n339\n00:19:12.710 --> 00:19:16.750\nSo what we need to do is, first,\n\n340\n00:19:16.750 --> 00:19:23.355\nwe wanna know how many heads_count,\nyeah, = 0.\n\n341\n00:19:23.355 --> 00:19:26.950\nSo how many times have we flipped\nthe coin and we got heads?\n\n342\n00:19:26.950 --> 00:19:27.510\nThat's what we're after.\n\n343\n00:19:27.510 --> 00:19:28.610\nSo we wanna get three times.\n\n344\n00:19:28.610 --> 00:19:34.403\nSo now we're gonna do the super\nfun loop called the while loop.\n\n345\n00:19:34.403 --> 00:19:38.030\nAnd the while is very similar\nto the foreach or the for.\n\n346\n00:19:38.030 --> 00:19:42.458\nBut instead of running a set amount of\ntimes or through a particular array,\n\n347\n00:19:42.458 --> 00:19:48.310\nit's just gonna keep running forever until\nthe condition here is no longer true.\n\n348\n00:19:48.310 --> 00:19:55.258\nSo, for example,\nwe could say heads_count is less than 3.\n\n349\n00:19:55.258 --> 00:19:59.820\nSo while heads_count is less than 3,\nwhich right now it's 0, so that's true,\n\n350\n00:19:59.820 --> 00:20:01.072\nit will keep running.\n\n351\n00:20:01.072 --> 00:20:05.047\nSo if, for whatever reason, it increases\nand eventually gets to 3 or 4,\n\n352\n00:20:05.047 --> 00:20:08.343\nit would stop executing the code\nin the while loop and move on.\n\n353\n00:20:08.343 --> 00:20:12.999\nNow the danger here is that\nmaybe we have some code here and\n\n354\n00:20:12.999 --> 00:20:18.190\nwe forgot to add something that\nincrements the heads_count.\n\n355\n00:20:18.190 --> 00:20:20.789\nIn that case, we're gonna enter into\nsomething called an infinite loop,\n\n356\n00:20:20.789 --> 00:20:23.364\nwhere this code will just keep running and\nrunning over and over and over.\n\n357\n00:20:23.364 --> 00:20:29.252\nAnd you end up having to manually stop the\nprocess, which is very a dangerous thing.\n\n358\n00:20:29.252 --> 00:20:32.129\nIf you don't account for that,\nmaybe someone is using your website or\n\n359\n00:20:32.129 --> 00:20:34.210\nusing some script that you've created.\n\n360\n00:20:34.210 --> 00:20:36.633\nAnd at some point,\nthey encounter this infinite loop, and\n\n361\n00:20:36.633 --> 00:20:40.200\nthey'll just be stuck in this infinite\nloop forever until something happens.\n\n362\n00:20:40.200 --> 00:20:44.874\nSo you wanna always make sure that there's\na way out of the loop almost always.\n\n363\n00:20:44.874 --> 00:20:47.820\nThere's gonna be a few exceptions,\nbut those are very rare.\n\n364\n00:20:47.820 --> 00:20:50.273\nBut most of the time,\nwe wanna find a way out.\n\n365\n00:20:50.273 --> 00:20:52.027\nSo we're going to flip a coin.\n\n366\n00:20:52.027 --> 00:20:52.900\nAnd to do this,\n\n367\n00:20:52.900 --> 00:20:58.106\nwe're gonna use a function that we\nhaven't played with before called rand.\n\n368\n00:20:58.106 --> 00:21:01.020\nSo let me type it out and\nthen we'll take a look at it.\n\n369\n00:21:12.490 --> 00:21:16.988\nSo what we're doing here is\nthe rand function returns a random\n\n370\n00:21:16.988 --> 00:21:22.008\ninteger between the minimum value,\nwhich is your first parameter,\n\n371\n00:21:22.008 --> 00:21:26.090\nand the second parameter,\nwhich is the maximum value.\n\n372\n00:21:26.090 --> 00:21:28.800\nNow in this case, we have 0 and 1.\n\n373\n00:21:28.800 --> 00:21:31.280\nSo it's gonna return either 0 or 1.\n\n374\n00:21:31.280 --> 00:21:34.872\nNow before when we\ntalked about conditions,\n\n375\n00:21:34.872 --> 00:21:41.340\nwe talked about how certain values can\nbe truthy or falsey or close enough.\n\n376\n00:21:41.340 --> 00:21:43.390\nAnd that's what we're gonna play\non here in our if statement.\n\n377\n00:21:43.390 --> 00:21:48.052\nInstead of saying is flip\n== 1 to make it true,\n\n378\n00:21:48.052 --> 00:21:51.720\nwe're gonna say, is flip true?\n\n379\n00:21:51.720 --> 00:21:53.750\nAnd then PHP is gonna look at it and\nbe like, it's equal to 1, so\n\n380\n00:21:53.750 --> 00:21:54.919\nit's close enough, so that's true.\n\n381\n00:21:54.919 --> 00:21:58.267\nSo that's how the truthy element\nthat we talked about earlier,\n\n382\n00:21:58.267 --> 00:22:01.330\nthis is how you could\nbenefit from using that.\n\n383\n00:22:01.330 --> 00:22:06.752\nSo we're gonna go ahead and heads_count++.\n\n384\n00:22:10.813 --> 00:22:13.990\nSo here we go, and\nhere we have our quick function.\n\n385\n00:22:13.990 --> 00:22:15.840\nSo we're gonna, here, we set it to 0.\n\n386\n00:22:15.840 --> 00:22:20.310\nAnd we have while it's less than 3,\nwe're gonna randomize it.\n\n387\n00:22:20.310 --> 00:22:24.390\nIf it comes down at 0 or\nif it comes down at 1, which is truthy or\n\n388\n00:22:24.390 --> 00:22:26.780\nclose enough,\nwe're gonna add a value to head count.\n\n389\n00:22:28.790 --> 00:22:30.940\nAnd then at some point, it'll get more.\n\n390\n00:22:30.940 --> 00:22:34.610\nThis will become false\nby making either 3 or\n\n391\n00:22:34.610 --> 00:22:36.570\nabove, at which point it'll end the loop.\n\n392\n00:22:38.130 --> 00:22:41.350\nSo just so we can see what's going on,\nwe're gonna echo out something here.\n\n393\n00:22:44.660 --> 00:22:49.540\nAnd also, we're gonna echo out a simple so\nwe know tails and heads.\n\n394\n00:22:53.021 --> 00:22:55.470\nSo let's take a look, see what happens.\n\n395\n00:22:55.470 --> 00:22:57.290\nNope, did I remove?\n\n396\n00:22:57.290 --> 00:22:57.830\nLet's remove that.\n\n397\n00:22:59.710 --> 00:23:01.580\nJust so we can see what's going on.\n\n398\n00:23:03.077 --> 00:23:06.630\nSo what we have, we have tails, tails,\nheads, tails, tails, heads, heads.\n\n399\n00:23:06.630 --> 00:23:09.030\nWhen we got to the third heads here,\nand it stopped running.\n\n400\n00:23:09.030 --> 00:23:12.110\nNow there's something to consider here,\nthough.\n\n401\n00:23:12.110 --> 00:23:16.410\nSo we looked at our condition,\nand it's heads is less than 3.\n\n402\n00:23:16.410 --> 00:23:18.330\nAnd we're incrementing it, ++.\n\n403\n00:23:18.330 --> 00:23:21.610\nSo eventually we're gonna\nget out of this loop, right?\n\n404\n00:23:21.610 --> 00:23:22.358\nWell, maybe not.\n\n405\n00:23:22.358 --> 00:23:24.589\nWhat if, it's extremely unlikely, but\n\n406\n00:23:24.589 --> 00:23:29.650\nwhat if this random returns 0 every\nsingle time for the first 1000 times?\n\n407\n00:23:29.650 --> 00:23:32.560\nThe user might be sitting here for\nan hour until it finally gets to those 3.\n\n408\n00:23:32.560 --> 00:23:34.306\nIt's unlikely, but it's possible.\n\n409\n00:23:34.306 --> 00:23:39.186\nSo you want to have a way that\nthere's a secondary way that you\n\n410\n00:23:39.186 --> 00:23:41.470\nmight wanna get out of.\n\n411\n00:23:41.470 --> 00:23:45.838\nSo total_count, and we're gonna come\ndown and we're gonna say total_count++.\n\n412\n00:23:45.838 --> 00:23:49.338\nAnd then we're gonna say if\ntotal_count is greater than,\n\n413\n00:23:49.338 --> 00:23:51.442\nmaybe we wanna only run 20 times.\n\n414\n00:23:51.442 --> 00:23:54.200\nIt's gonna be a small number\njust to make it easy.\n\n415\n00:23:55.470 --> 00:24:02.250\nWe are going to use,\nBreak, so let's hop over.\n\n416\n00:24:02.250 --> 00:24:07.025\nAnd I don't think we're gonna\nget to 20 times unless we sit\n\n417\n00:24:07.025 --> 00:24:10.883\nhere many times but-\n&gt;&gt; But let's just crank up the number of\n\n418\n00:24:10.883 --> 00:24:14.600\nheads that we're looking for\nto something crazy like 700.\n\n419\n00:24:14.600 --> 00:24:16.720\n&gt;&gt; Okay, so hopefully,\nI have mine coded right or\n\n420\n00:24:16.720 --> 00:24:19.270\nwe're gonna be sitting here a minute.\n\n421\n00:24:19.270 --> 00:24:21.280\nSo maybe we'll just do 10, just in case.\n\n422\n00:24:23.020 --> 00:24:25.092\nSo 1, 2, 3, 4, 5, 6.\n\n423\n00:24:25.092 --> 00:24:28.080\nAnd that still reached before.\n\n424\n00:24:28.080 --> 00:24:30.386\nMan, okay,\nwell [LAUGH] maybe we'll call it.\n\n425\n00:24:30.386 --> 00:24:31.520\nIt's funny, I guess.\n\n426\n00:24:32.840 --> 00:24:34.180\nSo let's see what to do.\n\n427\n00:24:34.180 --> 00:24:41.000\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n12, 13, 14, and then it stopped.\n\n428\n00:24:41.000 --> 00:24:45.730\nBecause, even though we haven't reached\nthis part, we did reach this part.\n\n429\n00:24:45.730 --> 00:24:47.310\nAnd this is a secondary way out.\n\n430\n00:24:47.310 --> 00:24:51.734\nYou don't need necessarily have to have\nthis, but it's a good concept just in case\n\n431\n00:24:51.734 --> 00:24:55.414\nthere's a possibility that this\nmight not be reached any time soon.\n\n432\n00:24:55.414 --> 00:24:58.950\nAnd again, you don't have to have this,\ndepending on what you're processing.\n\n433\n00:24:58.950 --> 00:25:01.320\nYou might need to go\nevery one no matter what.\n\n434\n00:25:01.320 --> 00:25:03.878\nBut it's something to consider\nwhen you're gonna build these.\n\n435\n00:25:03.878 --> 00:25:08.090\nAnd as exciting as this topic is,\nthat's all we have for today.\n\n436\n00:25:08.090 --> 00:25:10.070\n&gt;&gt; Now I do have a quick\nquestion about this while loop,\n\n437\n00:25:10.070 --> 00:25:12.055\nthe possibility that you\nmay have an infinite loop.\n\n438\n00:25:12.055 --> 00:25:17.060\nIt could be possible that you\nforgot to do the ++, right?\n\n439\n00:25:17.060 --> 00:25:19.800\nI know you said that, but\nI wanna reiterate that.\n\n440\n00:25:20.990 --> 00:25:25.116\nI'm not saying I have, but I have\naccidentally put it into an infinite loop.\n\n441\n00:25:25.116 --> 00:25:28.088\nAnd there are times where\ninfinite loops are appropriate.\n\n442\n00:25:28.088 --> 00:25:32.390\nCreating HTML that's sent to\nthe browser is not one of them.\n\n443\n00:25:32.390 --> 00:25:36.970\nIt's a good way to go,\nwell, this is embarrassing.\n\n444\n00:25:36.970 --> 00:25:38.840\nSo make sure that if\nyou're using while loops,\n\n445\n00:25:38.840 --> 00:25:41.590\nyou have an appropriate\ntermination condition.\n\n446\n00:25:41.590 --> 00:25:44.680\nSo Frank, thank you so much for\ngiving us a glimpse of loops in PHP.\n\n447\n00:25:44.680 --> 00:25:48.905\nAnd, well, they weren't as scary\nas I felt they possibly could be.\n\n448\n00:25:48.905 --> 00:25:49.965\nSo thank you for that.\n\n449\n00:25:49.965 --> 00:25:51.535\nAnd well, we're gonna go ahead and\nget out of here.\n\n450\n00:25:51.535 --> 00:25:53.925\nBut definitely come back for\nmore Dev Pro content.\n\n451\n00:25:53.925 --> 00:25:57.745\nBut for now, signing off for DevProTV,\nI've been your host, Justin Dennison.\n\n452\n00:25:57.745 --> 00:25:58.905\n&gt;&gt; And I've been Frank Corso.\n\n453\n00:25:58.905 --> 00:25:59.745\n&gt;&gt; And we'll see you next time.\n\n454\n00:25:59.745 --> 00:26:03.359\n[MUSIC]\n\n",
          "vimeoId": "243369600"
        },
        {
          "description": "In this episode, we will be learning what functions are, how they work, and how to create our own.",
          "length": "1201",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-6-1-functions-112017-PGM.00_24_44_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-6-1-functions-112017-PGM.00_24_44_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-6-1-functions-112017-PGM.00_24_44_05.Still001-sm.jpg",
          "title": "Functions",
          "transcript": "",
          "vimeoId": "243916874"
        },
        {
          "description": "In this episode, we will be learning what classes are, how to create an object, and how to define our own.",
          "length": "1213",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-7-1-classes_and_objects-112017-PGM.00_28_58_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-7-1-classes_and_objects-112017-PGM.00_28_58_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-7-1-classes_and_objects-112017-PGM.00_28_58_24.Still001-sm.jpg",
          "title": "Classes and Objects",
          "transcript": "",
          "vimeoId": "243916659"
        },
        {
          "description": "In this episode, we will be learning what dependencies are and how to manage them with Composer",
          "length": "1520",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-8-1-dependency_management_with_composer-112017-PGM.00_25_12_17.Still002.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-8-1-dependency_management_with_composer-112017-PGM.00_25_12_17.Still002-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-8-1-dependency_management_with_composer-112017-PGM.00_25_12_17.Still002-sm.jpg",
          "title": "Dependency Management with Composer",
          "transcript": "",
          "vimeoId": "243917255"
        },
        {
          "description": "In this episode, we will be learning how to deal with errors.",
          "length": "1563",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-9-1-basic_error_handling-112017-PGM.00_26_31_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-9-1-basic_error_handling-112017-PGM.00_26_31_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtophp/techskills-introtophp-1-9-1-basic_error_handling-112017-PGM.00_26_31_23.Still001-sm.jpg",
          "title": "Basic Error Handling",
          "transcript": "",
          "vimeoId": "243917031"
        }
      ],
      "title": "PHP Overview and Getting Started"
    }
  ],
  "url": "introphp",
  "vLab": false
}
