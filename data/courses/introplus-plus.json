{
  "description": "C++ first appeared over 30 years ago, and remains popular to this day. This series aims to teach viewers how to use C++ without any prior knowledge.",
  "descriptionMD": "C++ first appeared over 30 years ago, and remains popular to this day. This series aims to teach viewers how to use C++ without any prior knowledge.",
  "length": "14480",
  "name": "Intro to C Plus Plus",
  "practiceExam": false,
  "subtitle": "General purpose programming language",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, we will briefly go over the history of C++, what it is like in comparison to other programming languages, how to compile a C++ source file, and how to set up your computer for C++ development",
          "length": "1660",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-1-1-cpp-overview-and-environment-setup-100417-PGM.00_38_11_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-1-1-cpp-overview-and-environment-setup-100417-PGM.00_38_11_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-1-1-cpp-overview-and-environment-setup-100417-PGM.00_38_11_05.Still001-sm.jpg",
          "title": "Overview And Environment Setup",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.780 --> 00:00:16.216\nGreetings everyone, and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.216 --> 00:00:18.385\nI'm your host, Justin Dennison.\n\n4\n00:00:18.385 --> 00:00:21.235\nAnd in today's episode, well, we've got\na very special treat planned for you.\n\n5\n00:00:21.235 --> 00:00:25.575\nWe're starting Intro to C++, so\nyou better buckle up and hang on.\n\n6\n00:00:25.575 --> 00:00:28.790\nAnd here to help us with that very\nendeavor is Mr. Jacob Armstrong.\n\n7\n00:00:28.790 --> 00:00:29.695\nHow you doing today, Jacob?\n\n8\n00:00:29.695 --> 00:00:31.275\n&gt;&gt; Very good, Justin, how are you?\n\n9\n00:00:31.275 --> 00:00:36.395\n&gt;&gt; I am doing fantastic, I'm\nparticularly excited about this series,\n\n10\n00:00:36.395 --> 00:00:40.747\nbecause I know C++ is kinda\nthe ideology of performance.\n\n11\n00:00:40.747 --> 00:00:45.170\nGames, scientific programming,\nwhich is kind of some of my background.\n\n12\n00:00:45.170 --> 00:00:48.200\nIf you wanna go fast,\nyou kinda gotta reach down into the metal.\n\n13\n00:00:48.200 --> 00:00:53.800\nNow that's about the extent that I know,\nso what exactly is C++?\n\n14\n00:00:53.800 --> 00:00:58.890\n&gt;&gt; So to give a brief overview, C++ is\na programming language made in the 1980s\n\n15\n00:00:58.890 --> 00:01:05.280\nby a Dutch computer scientist named, might\nmispronounce this, Bjarne Stroustrup.\n\n16\n00:01:05.280 --> 00:01:09.109\nIt is sort of the next iteration on C.\n\n17\n00:01:09.109 --> 00:01:13.270\nThey are two separate programming\nlanguages, C and C++.\n\n18\n00:01:13.270 --> 00:01:19.542\nThe joke is that the ++ operator\nis a go up one operator,\n\n19\n00:01:19.542 --> 00:01:23.605\nso C++ can be thought of as C up one.\n\n20\n00:01:23.605 --> 00:01:29.611\nSo C++ is a compiled\nobjected-oriented language.\n\n21\n00:01:29.611 --> 00:01:32.877\nCompiled means that it takes source\ncode that you write in text, and\n\n22\n00:01:32.877 --> 00:01:35.960\nturns into machine code\nwhenever you compile it.\n\n23\n00:01:35.960 --> 00:01:40.929\nAnd object-oriented means that\nit is not procedural, basically.\n\n24\n00:01:40.929 --> 00:01:45.022\nIt used to be that programming\nlanguages were sort of monolithic.\n\n25\n00:01:45.022 --> 00:01:49.783\nYou'd have the whole program in one file,\nand people would get method names mixed\n\n26\n00:01:49.783 --> 00:01:53.105\nup, they'd have variables\nbeing named the same thing.\n\n27\n00:01:53.105 --> 00:01:54.645\nIt was kind of a pain to debug.\n\n28\n00:01:54.645 --> 00:01:59.406\nSo the solution to that was to create\nobject-oriented languages where we\n\n29\n00:01:59.406 --> 00:02:03.840\nwould have data encapsulated\ninside objects and classes.\n\n30\n00:02:03.840 --> 00:02:05.440\n&gt;&gt; Now Jacob,\nI can actually speak to this.\n\n31\n00:02:05.440 --> 00:02:07.860\nI've worked on some legacy projects.\n\n32\n00:02:07.860 --> 00:02:10.939\nLegacy code is all kinds of\nfun where the entire program,\n\n33\n00:02:10.939 --> 00:02:13.090\nit wasn't necessarily in one file.\n\n34\n00:02:13.090 --> 00:02:15.530\nThere was one function per file.\n\n35\n00:02:15.530 --> 00:02:18.410\nAnd the functions were like\n300 to 400 lines long,\n\n36\n00:02:18.410 --> 00:02:22.410\nand then everything kind of compiled,\nthere was 160 files.\n\n37\n00:02:22.410 --> 00:02:26.180\nIt was a nightmare,\nmainly because everything was global.\n\n38\n00:02:26.180 --> 00:02:29.403\nPeople were using global variables for\nlogging and debugging.\n\n39\n00:02:29.403 --> 00:02:34.618\nAnd I will tell you, I got it working\nkinda, but it would have saved me a great\n\n40\n00:02:34.618 --> 00:02:41.310\ndeal of heart ache if that actual project\nhad been structured a little differently.\n\n41\n00:02:41.310 --> 00:02:45.487\n&gt;&gt; Right, and while we will go over\nthe details of object-oriented languages\n\n42\n00:02:45.487 --> 00:02:50.072\nlater, for now let's just actually try\nto get some C++ working on your machine.\n\n43\n00:02:50.072 --> 00:02:55.910\nSo here on my computer I'm gonna\ndownload a compiler for C++.\n\n44\n00:02:55.910 --> 00:02:59.575\nSo if I go to the Internet real quick.\n\n45\n00:02:59.575 --> 00:03:05.800\nI'm gonna get specifically\nthe Windows GNU compiler, right now.\n\n46\n00:03:05.800 --> 00:03:09.740\nAnd we aren't gonna use command line\ncompiling for all of our projects.\n\n47\n00:03:09.740 --> 00:03:14.440\nI just want to show you this in case\nyou want to know sort of the more low\n\n48\n00:03:14.440 --> 00:03:16.513\nlevel way to compile things.\n\n49\n00:03:16.513 --> 00:03:19.038\nOr, if you're not on Windows,\n\n50\n00:03:19.038 --> 00:03:24.193\nhow you could compile things on\nthe command line for Linux or Mac.\n\n51\n00:03:24.193 --> 00:03:28.619\nSo here we go,\nI believe the name is called WinGW.\n\n52\n00:03:33.238 --> 00:03:34.731\nMinGW, I'm sorry.\n\n53\n00:03:34.731 --> 00:03:38.710\nThat stands for\nMinimum GNU Compiler for Windows.\n\n54\n00:03:38.710 --> 00:03:42.177\nSo let's go on the official site,\nright here.\n\n55\n00:03:42.177 --> 00:03:44.670\nSo there's two places that\nyou can go to download this.\n\n56\n00:03:44.670 --> 00:03:49.740\nUp here in the top right corner,\nthere is a Downloads tab.\n\n57\n00:03:49.740 --> 00:03:54.483\nAnd toward the bottom in the navigation\npane here there is also a Downloads\n\n58\n00:03:54.483 --> 00:03:57.401\noption, so we're just gonna click on that.\n\n59\n00:04:01.444 --> 00:04:08.240\nAnd we want to get the latest\nversion of MinGWgitsetup.exe.\n\n60\n00:04:08.240 --> 00:04:11.562\nNow I've already gone ahead and\ndownloaded this,\n\n61\n00:04:11.562 --> 00:04:14.585\nso once you get this,\nyou're going to run it.\n\n62\n00:04:14.585 --> 00:04:18.777\nAnd I also have screenshots,\nthough, of the running process.\n\n63\n00:04:18.777 --> 00:04:25.358\nSo bear with me as I open them up,\nand here we go.\n\n64\n00:04:27.939 --> 00:04:29.326\nSo here we are.\n\n65\n00:04:29.326 --> 00:04:32.590\nLet me just get this out\nof behind my head if I can.\n\n66\n00:04:35.160 --> 00:04:36.175\nThank you.\n\n67\n00:04:36.175 --> 00:04:40.317\nSo first thing that happens is,\nthis is the last page actually.\n\n68\n00:04:40.317 --> 00:04:44.566\nThis is the last thing that happens,\nI think.\n\n69\n00:04:44.566 --> 00:04:48.630\nHold on, so I don't know how to\nuse Windows actually, I'm sorry.\n\n70\n00:04:48.630 --> 00:04:50.281\nLet's start from here.\n\n71\n00:04:50.281 --> 00:04:54.022\nFirst you're gonna have a just\ngeneral licensing agreement.\n\n72\n00:04:54.022 --> 00:05:00.665\nSo if you are okay with everything in\nhere, you will hit Install at the bottom.\n\n73\n00:05:00.665 --> 00:05:02.361\nAnd then after installing,\n\n74\n00:05:07.811 --> 00:05:11.660\nYou'll have to decide where you want to\ninstall it, this is actually important.\n\n75\n00:05:11.660 --> 00:05:14.490\nYou're gonna wanna remember this so\nthat you can set environment variables, so\n\n76\n00:05:14.490 --> 00:05:17.590\nthat the command line actually\nknows what programs to run.\n\n77\n00:05:17.590 --> 00:05:22.442\nHere there is a user interface option, I\nhave elected not to get the user interface\n\n78\n00:05:22.442 --> 00:05:27.107\nfor this, because I am just using a\ncompiled command line version to compile.\n\n79\n00:05:27.107 --> 00:05:31.296\nBut if you wanna download that user\ninterface and play with it a little bit,\n\n80\n00:05:31.296 --> 00:05:32.760\ngo right ahead.\n\n81\n00:05:32.760 --> 00:05:35.947\nAnd once you hit Continue\nit will begin to download.\n\n82\n00:05:37.739 --> 00:05:44.139\nSo once this is done, you can go ahead and\nhit Quit down here at the bottom right.\n\n83\n00:05:44.139 --> 00:05:50.849\nAnd you'll have MinGW\non your local machine.\n\n84\n00:05:50.849 --> 00:05:54.294\nWe can't actually compile\nanything quite yet.\n\n85\n00:05:54.294 --> 00:05:59.206\nFirst we actually do need to set\nan environment variable form engine\n\n86\n00:05:59.206 --> 00:06:02.308\nthat GW so\nthat the command line knows where\n\n87\n00:06:02.308 --> 00:06:06.420\nto find the command lines\nthat we're going to be using.\n\n88\n00:06:06.420 --> 00:06:08.399\n&gt;&gt; Now Jacob,\nlet me cut in here just a little bit.\n\n89\n00:06:08.399 --> 00:06:12.539\nThis MinGW, this is gonna be a very\nsimilar experience if you're in a command\n\n90\n00:06:12.539 --> 00:06:16.510\nline in a Linux environment, correct,\nor am I totally off base there?\n\n91\n00:06:16.510 --> 00:06:17.750\n&gt;&gt; You're absolutely correct.\n\n92\n00:06:17.750 --> 00:06:21.265\nLinux environments that we're gonna\nbe using the same GNU libraries that\n\n93\n00:06:21.265 --> 00:06:21.955\nWindows are.\n\n94\n00:06:21.955 --> 00:06:26.520\nThis is just sort of a GNU library for\nWindows specifically.\n\n95\n00:06:26.520 --> 00:06:30.621\nWe're gonna be using a G++ command.\n\n96\n00:06:30.621 --> 00:06:31.380\nLinux will do the same thing more or less.\n\n97\n00:06:33.100 --> 00:06:36.670\nSo this is more of a Windows specific\nthing that you have to do right now,\n\n98\n00:06:36.670 --> 00:06:38.900\nsetting up your environment variables.\n\n99\n00:06:38.900 --> 00:06:44.189\nSo we're gonna go onto the Windows tab and\ntype in My Computer.\n\n100\n00:06:49.479 --> 00:06:51.639\nActually in Windows 10\nit's gonna be This PC.\n\n101\n00:06:51.639 --> 00:06:54.359\nSo you're gonna right-click on this and\ngo to Properties.\n\n102\n00:06:59.031 --> 00:07:03.660\nAnd in Properties, we're gonna go\nto the Advanced System Settings.\n\n103\n00:07:03.660 --> 00:07:07.041\nAnd in Advanced System Settings, we're\ngoing to go to Environment Variables.\n\n104\n00:07:09.889 --> 00:07:12.093\nSo here's a list of\nenvironment variables for me,\n\n105\n00:07:12.093 --> 00:07:15.050\nyou should see something\nsimilar on your machine.\n\n106\n00:07:15.050 --> 00:07:19.901\nUnder System Variables, here are a bunch\nof things that you already have.\n\n107\n00:07:19.901 --> 00:07:23.867\nWhat we're gonna do specifically\nis edit the path variable.\n\n108\n00:07:23.867 --> 00:07:25.772\nThis is the path variable, and\n\n109\n00:07:25.772 --> 00:07:29.893\nhere is a bunch of paths that\nare already installed on my computer.\n\n110\n00:07:29.893 --> 00:07:31.493\nLet's go to Edit here.\n\n111\n00:07:34.757 --> 00:07:37.435\nAnd we're going to add\na new environment variable.\n\n112\n00:07:39.312 --> 00:07:41.776\nBut before we actually do this,\n\n113\n00:07:41.776 --> 00:07:45.989\nwe need to get that bin of the MinGW,\nso let's do that.\n\n114\n00:07:45.989 --> 00:07:50.629\nIf I remember correctly from my own\ninstall, that was under my C drive.\n\n115\n00:07:55.454 --> 00:07:57.550\nAnd right here, MinGW.\n\n116\n00:07:57.550 --> 00:08:00.678\nYou're gonna double-click on this,\ngo into it.\n\n117\n00:08:00.678 --> 00:08:03.444\nAnd go into the bin.\n\n118\n00:08:03.444 --> 00:08:05.920\nAnd we're going to copy this.\n\n119\n00:08:05.920 --> 00:08:08.560\nI already downloaded some stuff,\nso my bin is already full.\n\n120\n00:08:08.560 --> 00:08:12.860\nYou should only have one thing in\nhere by the time that you are,\n\n121\n00:08:12.860 --> 00:08:14.510\nwhen you're at the same\nplace I am basically.\n\n122\n00:08:14.510 --> 00:08:19.609\nSo we're gonna copy this, go back into\nour environment variable settings.\n\n123\n00:08:20.700 --> 00:08:22.310\nAnd paste it in here.\n\n124\n00:08:22.310 --> 00:08:24.230\nI've already done that.\n\n125\n00:08:24.230 --> 00:08:27.150\nI've got my MainGW.bin right\nhere where I need it to be.\n\n126\n00:08:28.510 --> 00:08:30.990\nAfter you do this you will need\nto restart your computer so\n\n127\n00:08:30.990 --> 00:08:33.700\nthat Windows knows where this is.\n\n128\n00:08:33.700 --> 00:08:35.780\nAnd it can just get setup done.\n\n129\n00:08:35.780 --> 00:08:39.213\nSo if you are listening to the recorded\nversion of this you can go ahead and\n\n130\n00:08:39.213 --> 00:08:40.969\npause it and restart your computer.\n\n131\n00:08:40.969 --> 00:08:44.734\nNow Jacob, let me just make sure,\nthat path that we're adding to the path\n\n132\n00:08:44.734 --> 00:08:47.180\nvariable from your\nenvironment in variables.\n\n133\n00:08:47.180 --> 00:08:51.168\nNumber one, Windows 10 has made this a lot\neasier than previous versions of Windows.\n\n134\n00:08:51.168 --> 00:08:54.306\nCuz it used to be this giant string that\nyou had to kind of concatenate on the end\n\n135\n00:08:54.306 --> 00:08:55.871\nof and you didn't have enough space.\n\n136\n00:08:55.871 --> 00:09:00.467\nSo that's slick, but also, that's gonna be\ndependent on your installation directory\n\n137\n00:09:00.467 --> 00:09:03.350\nfrom the previous install steps,\nam I right in that?\n\n138\n00:09:03.350 --> 00:09:04.240\n&gt;&gt; Yes absolutely.\n\n139\n00:09:04.240 --> 00:09:08.815\nIf you don't install\nMinGW under your C drive,\n\n140\n00:09:08.815 --> 00:09:13.270\nif you install it somewhere else, you\nwill need to go to that MinGW folder and\n\n141\n00:09:13.270 --> 00:09:17.540\ninto that bin inside that MinGW\nfolder instead of where I did it.\n\n142\n00:09:17.540 --> 00:09:20.770\nThe only thing that matters\nis that you get that bin,\n\n143\n00:09:20.770 --> 00:09:22.780\nthe path to that bin in the correct spot.\n\n144\n00:09:23.860 --> 00:09:28.017\nSo once you're done restarting, I'm\ngonna assume that you already done that,\n\n145\n00:09:30.245 --> 00:09:32.372\nYou should be ready to go for a compile.\n\n146\n00:09:34.293 --> 00:09:39.360\nSo to compile a C++ program, we actually\nneed to write some C++ source code.\n\n147\n00:09:39.360 --> 00:09:41.600\nSo let's get started on that for\nan example.\n\n148\n00:09:41.600 --> 00:09:44.700\nWe're just gonna write a very\nsimple Hello World program.\n\n149\n00:09:46.690 --> 00:09:49.818\nI'm just going to create a new text\nfile right here on my desktop.\n\n150\n00:09:55.886 --> 00:10:01.957\nAnd we're going to name it\nnot New Text Document.txt,\n\n151\n00:10:01.957 --> 00:10:06.879\nwe're going to name this helloworld.cpp.\n\n152\n00:10:06.879 --> 00:10:09.536\nIt's gonna complain that we\nare changing the name extension.\n\n153\n00:10:09.536 --> 00:10:12.690\nWe don't care,\nwe want it to be a .cpp file.\n\n154\n00:10:12.690 --> 00:10:17.690\nA .cpp extension means that\nit is a C++ source file.\n\n155\n00:10:17.690 --> 00:10:20.940\nThis is what we wanna do.\n\n156\n00:10:20.940 --> 00:10:24.668\nNow if you do initially make\nit a .txt file, that's okay,\n\n157\n00:10:24.668 --> 00:10:26.243\nyou can change it later.\n\n158\n00:10:26.243 --> 00:10:30.232\nBut will wanna make sure that you\nhave file extensions shown under\n\n159\n00:10:30.232 --> 00:10:31.618\nyour folder options.\n\n160\n00:10:31.618 --> 00:10:36.887\nActually I made that mistake,\nnot to recently ago\n\n161\n00:10:36.887 --> 00:10:42.291\nwhere I almost tried to\ncompile a .CPP.txt file.\n\n162\n00:10:42.291 --> 00:10:44.350\n&gt;&gt; That will happen,\nI've had things like that.\n\n163\n00:10:44.350 --> 00:10:47.275\nAnd another common error that I've made.\n\n164\n00:10:47.275 --> 00:10:50.790\nIs it has to be plain text it can't\nhave any rich text format in it.\n\n165\n00:10:50.790 --> 00:10:53.420\nIt can't be,\nyou can't do this in Word, and\n\n166\n00:10:53.420 --> 00:10:56.416\nthen change the file\nextension from like a .docx.\n\n167\n00:10:56.416 --> 00:11:00.955\nOtherwise, you'll have all this meta data\nthat's embedded in the top portion of\n\n168\n00:11:00.955 --> 00:11:04.522\nthe file that, well you're gonna\nhave a whole bunch of not fun.\n\n169\n00:11:04.522 --> 00:11:09.249\nSo has to be plain text and\nall plain text means is it is text only.\n\n170\n00:11:09.249 --> 00:11:13.509\nThere's no markup, there's no rendering\noptions, there's no styling, whatnot.\n\n171\n00:11:13.509 --> 00:11:17.084\nAs long as you're using notepad or\ncreating a new text document as was shown,\n\n172\n00:11:17.084 --> 00:11:18.940\nyou should be fine.\n\n173\n00:11:18.940 --> 00:11:23.000\n&gt;&gt; Right, so\nnow we're going to open it up in Notepad\n\n174\n00:11:23.000 --> 00:11:26.840\nbecause that is a very\nsimple text editor program.\n\n175\n00:11:27.910 --> 00:11:28.830\nAnd we're going to get started.\n\n176\n00:11:29.930 --> 00:11:31.440\nSo, Hello World.\n\n177\n00:11:31.440 --> 00:11:33.770\nThe Hello World Program is going\nto do basically one thing,\n\n178\n00:11:33.770 --> 00:11:36.240\nit's going to find\na console output window.\n\n179\n00:11:36.240 --> 00:11:40.170\nAnd it's going to push\nHello World into that window.\n\n180\n00:11:40.170 --> 00:11:43.590\nYou may not understand\nexactly what I'm typing in.\n\n181\n00:11:43.590 --> 00:11:45.880\nI'll try to explain it as I go along.\n\n182\n00:11:45.880 --> 00:11:49.230\nBut the main details of this,\nwe're gonna cover in later lessons.\n\n183\n00:11:49.230 --> 00:11:50.520\nThis is just to get compiling done.\n\n184\n00:11:51.730 --> 00:11:53.360\nSo let's get started.\n\n185\n00:11:53.360 --> 00:11:56.440\nFirst thing we're gonna\nwant is a main function.\n\n186\n00:11:59.405 --> 00:12:05.175\nMain() is a special function in C++ and\nin some other programming languages.\n\n187\n00:12:05.175 --> 00:12:08.170\nMain() is where your\nprogram initially starts.\n\n188\n00:12:08.170 --> 00:12:11.144\nWithout a main method,\nyour program won't know where to start.\n\n189\n00:12:13.716 --> 00:12:17.137\n&gt;&gt; Now, Jacob, let me jump in there just\na little bit, just so we can make sure,\n\n190\n00:12:17.137 --> 00:12:19.980\nis there any way to make that\ntext just a little bit bigger?\n\n191\n00:12:19.980 --> 00:12:22.840\nI know I'm being nit picky here.\n\n192\n00:12:22.840 --> 00:12:23.350\nYeah.\n\n193\n00:12:23.350 --> 00:12:24.310\n&gt;&gt; Can do.\n\n194\n00:12:24.310 --> 00:12:28.260\n&gt;&gt; So, it's kinda of weird, this is\nactually simulating some styling but\n\n195\n00:12:28.260 --> 00:12:32.040\nthis isn't changing\nthe underlying text styling.\n\n196\n00:12:32.040 --> 00:12:34.190\nYeah there we go, we should be good there.\n\n197\n00:12:34.190 --> 00:12:36.400\nI'm going to now,\nslink away into the shadows.\n\n198\n00:12:36.400 --> 00:12:38.580\n&gt;&gt; Hopefully,\nyou won't have to squint anymore.\n\n199\n00:12:38.580 --> 00:12:42.875\nSo main() return 0,\nwhich means that after main is done,\n\n200\n00:12:42.875 --> 00:12:46.090\nit will spit back out\na 0 to whoever calls it.\n\n201\n00:12:46.090 --> 00:12:47.881\nThat's just nonsense,\nit doesn't really matter.\n\n202\n00:12:47.881 --> 00:12:50.506\nDon't worry about it.\n\n203\n00:12:50.506 --> 00:12:55.404\nSo before that, we're gonna do std,\nwhich stands for standard, this is\n\n204\n00:12:55.404 --> 00:13:00.618\na standard namespace, a namespace being\njust a way to hold a bunch of classes,\n\n205\n00:13:00.618 --> 00:13:05.129\nand objects, and variables, and\nstuff together in a logical way.\n\n206\n00:13:05.129 --> 00:13:10.498\nAnd inside standard,\nwe are gonna go inside it with a colon,\n\n207\n00:13:10.498 --> 00:13:15.781\ncolon, we are gonna do,\ncout that stands for console out.\n\n208\n00:13:15.781 --> 00:13:19.492\nWe're gonna use this,\na less than less than symbol,\n\n209\n00:13:19.492 --> 00:13:25.602\nwhich is called a pipe operator, and we're\ngoing to type pipe into console out, this.\n\n210\n00:13:29.655 --> 00:13:31.830\nIf I can spell world correctly.\n\n211\n00:13:31.830 --> 00:13:37.520\nAnd then after that, we're going to\ntype into cout a standard end line.\n\n212\n00:13:37.520 --> 00:13:40.200\nAnd this'll just create an entry so\nit looks nice.\n\n213\n00:13:41.430 --> 00:13:44.360\nBut actually this won't work as it is.\n\n214\n00:13:44.360 --> 00:13:49.310\nIf we try to compile this right now,\nit'll say I don't know what cout is, and\n\n215\n00:13:49.310 --> 00:13:50.900\nI don't know what endl is.\n\n216\n00:13:50.900 --> 00:13:54.827\nBecause we haven't imported\nthe input output stream library.\n\n217\n00:13:58.072 --> 00:13:59.840\nSo to import things\nwe're gonna do include.\n\n218\n00:13:59.840 --> 00:14:02.550\nWe'll talk about importing\nthings later in detail.\n\n219\n00:14:02.550 --> 00:14:06.184\nThis is just basically what\nwe're doing right now,\n\n220\n00:14:06.184 --> 00:14:10.079\nis bringing in the input\noutput classes and variables.\n\n221\n00:14:15.703 --> 00:14:20.080\nInclude says to bring this in,\nand this is iostream.\n\n222\n00:14:20.080 --> 00:14:20.920\nSo we should be good to go.\n\n223\n00:14:20.920 --> 00:14:21.920\nThis should compile.\n\n224\n00:14:23.390 --> 00:14:26.652\nSo let's open up our command line.\n\n225\n00:14:26.652 --> 00:14:31.231\nIf you've been following so\nfar, you should have\n\n226\n00:14:31.231 --> 00:14:36.038\nMinGW on your machine,\nbut you haven't actually.\n\n227\n00:14:36.038 --> 00:14:40.694\nI forgot, you don't actually have a C++\ncompiler on your machine right now.\n\n228\n00:14:46.378 --> 00:14:48.190\nSo we're gonna type in command prompt and\nopen it up.\n\n229\n00:14:49.440 --> 00:14:53.000\nSo if you set up your bin correctly and\nyour environment variables,\n\n230\n00:14:53.000 --> 00:14:58.570\nyou should be able to access MinGW\nmethods, command prompts I should say.\n\n231\n00:14:59.820 --> 00:15:03.390\nThe important thing that you need\nto do right now is to download\n\n232\n00:15:03.390 --> 00:15:04.720\nthat C++ compiler.\n\n233\n00:15:04.720 --> 00:15:10.000\nYou can do that by typing\n\n234\n00:15:10.000 --> 00:15:17.397\nin MinGW dash get install G++.\n\n235\n00:15:17.397 --> 00:15:24.458\nNow, this G++ is the GNU C++ compiler,\nit's open source, and it's for Windows.\n\n236\n00:15:24.458 --> 00:15:27.690\nRight now, it's yelling at me\nthat I've already installed it.\n\n237\n00:15:27.690 --> 00:15:32.464\nBut, if you install it at this point,\nyou should see something like this.\n\n238\n00:15:32.464 --> 00:15:36.120\nAnd this will go on for,\nI don't know, a minute or so.\n\n239\n00:15:37.170 --> 00:15:42.930\nAnd once that's done, you will have the\nMGW and the GNU compiler on your machine.\n\n240\n00:15:42.930 --> 00:15:46.644\nAnd because this downloads to the same\nbin that you installed MinGW,\n\n241\n00:15:46.644 --> 00:15:49.792\nyou don't need to set up\nanymore environment variables.\n\n242\n00:15:49.792 --> 00:15:52.469\nIt should all be there already.\n\n243\n00:15:52.469 --> 00:15:56.605\nAll right, so now we're in users Jacob.\n\n244\n00:15:56.605 --> 00:16:00.019\nI'm going to CD, stands for\nchange directory.\n\n245\n00:16:00.019 --> 00:16:06.257\nInto desktop which is\nwhere our C++ file is.\n\n246\n00:16:06.257 --> 00:16:12.325\nIf I say dir, it'll list it Right here.\n\n247\n00:16:12.325 --> 00:16:14.520\nHello world .cpp.\n\n248\n00:16:14.520 --> 00:16:19.500\nSo we're gonna type in now is\nwe're gonna compile that hello\n\n249\n00:16:19.500 --> 00:16:24.187\nworld.cpp file by going g++,\nwhich is the compiler,\n\n250\n00:16:24.187 --> 00:16:27.649\nwe're gonna compile Hello World.cpp.\n\n251\n00:16:27.649 --> 00:16:30.620\nWe're gonna do a dash o.\n\n252\n00:16:30.620 --> 00:16:34.160\nThis means output, this is what\nthe compiler will be outputting.\n\n253\n00:16:34.160 --> 00:16:36.960\nAnd this is gonna be\nthe name of our executable.\n\n254\n00:16:36.960 --> 00:16:43.340\nWe're gonna call this one sayhello.exe.\n\n255\n00:16:46.895 --> 00:16:47.769\n[CROSSTALK]\n&gt;&gt; Jacob,\n\n256\n00:16:47.769 --> 00:16:49.866\nit looks like we have\na whoopsy daisy there, but\n\n257\n00:16:49.866 --> 00:16:51.850\nthese are actually good moments, right?\n\n258\n00:16:51.850 --> 00:16:55.490\nThese are things that you may encounter,\nbecause well we're using regular Notepad.\n\n259\n00:16:55.490 --> 00:16:58.870\nThere's no syntax highlighting, there's\nno IntelliSense, there's no help, so\n\n260\n00:16:58.870 --> 00:17:01.490\nif you have a typo,\nyou may encounter something like that.\n\n261\n00:17:01.490 --> 00:17:04.780\nAnd, well,\nthe compiled languages typically say,\n\n262\n00:17:04.780 --> 00:17:09.150\nhey, you're probably gonna wanna look\nat this line or pretty close to it.\n\n263\n00:17:09.150 --> 00:17:10.800\nThere are exceptions to that rule.\n\n264\n00:17:10.800 --> 00:17:12.850\nAnd it looks like we're\ngonna have to fix something.\n\n265\n00:17:12.850 --> 00:17:13.430\n&gt;&gt; Right.\n\n266\n00:17:13.430 --> 00:17:16.040\nIf you make a mistake, don't worry,\nthe compiler's gonna yell at you.\n\n267\n00:17:16.040 --> 00:17:19.800\nAnd in this case,\nit'll tell us exactly where our error was.\n\n268\n00:17:19.800 --> 00:17:22.290\nSo it seems I misspelled return.\n\n269\n00:17:22.290 --> 00:17:26.534\nReturn is spelled R-E-T-U-R-N,\nand not R-E-T-U-N, so\n\n270\n00:17:26.534 --> 00:17:28.970\nI just forgot an R there, my mistake.\n\n271\n00:17:30.400 --> 00:17:34.760\nSo let's open back up Notepad, I opened it\nat Visual Studio, I don't wanna do that.\n\n272\n00:17:36.330 --> 00:17:40.375\nVisual Studio is an IDE, for\nthose of you who don't know.\n\n273\n00:17:40.375 --> 00:17:42.990\nAn IDE stands for\nIntegrated Design Environment.\n\n274\n00:17:42.990 --> 00:17:47.230\nWe'll download it later and we're gonna\nbe using that to edit C++ in the future.\n\n275\n00:17:47.230 --> 00:17:50.551\nBut for now,\nlet's just fix our return statement.\n\n276\n00:17:54.099 --> 00:17:55.950\nSave it.\n\n277\n00:17:55.950 --> 00:18:00.900\nAnd try to compile it once more I'm just\n\n278\n00:18:00.900 --> 00:18:03.875\ngonna hit up on the keyboard\nto do the same command again.\n\n279\n00:18:03.875 --> 00:18:06.310\nSayhello.exe.\n\n280\n00:18:06.310 --> 00:18:09.110\nAnd it didn't yell at me this time,\nso that means it worked.\n\n281\n00:18:10.750 --> 00:18:14.570\nYou can see right here down\nthe left corner of my screen,\n\n282\n00:18:14.570 --> 00:18:17.020\nwe have an executable.\n\n283\n00:18:17.020 --> 00:18:18.230\nSo if we double-click on this.\n\n284\n00:18:20.180 --> 00:18:21.090\nYou may have saw that.\n\n285\n00:18:21.090 --> 00:18:25.010\nA command window popped up really fast and\nthen exited really fast again.\n\n286\n00:18:25.010 --> 00:18:28.830\nSo what happened was the command\nprompt said, hello world.\n\n287\n00:18:28.830 --> 00:18:30.410\nAnd then it said, well, I'm done here.\n\n288\n00:18:30.410 --> 00:18:32.630\nI might as well just\nexit this application.\n\n289\n00:18:32.630 --> 00:18:38.463\nSo what we're gonna do\nnow inside of our C++\n\n290\n00:18:38.463 --> 00:18:43.800\nfile is add, after we spit Hello World\nout to the console, we're going to\n\n291\n00:18:45.380 --> 00:18:50.140\nsay std::cin, which is console input.\n\n292\n00:18:50.140 --> 00:18:53.300\nAnd we're gonna call\nthe ignore method on that.\n\n293\n00:18:53.300 --> 00:18:57.960\nAnd this'll just freeze up the console so\nthat it doesn't exit automatically.\n\n294\n00:18:59.060 --> 00:19:00.637\nLet's do another compile.\n\n295\n00:19:03.790 --> 00:19:04.800\nIt's happy with what I wrote.\n\n296\n00:19:06.740 --> 00:19:12.360\nAnd once we open up SayHello.exe again,\nHello World.\n\n297\n00:19:12.360 --> 00:19:13.730\nIt's a really small font.\n\n298\n00:19:13.730 --> 00:19:15.900\nYou might need to enlarge\nthat in the future.\n\n299\n00:19:15.900 --> 00:19:17.620\nBut for now, there you go.\n\n300\n00:19:17.620 --> 00:19:20.960\nThat's how you would manually\ncompile a C++ program.\n\n301\n00:19:20.960 --> 00:19:26.070\n&gt;&gt; Now Jacob, there's a few things\nthere that I do wanna kinda drive home.\n\n302\n00:19:26.070 --> 00:19:31.530\nThose of you on Linux platforms,\nwhether it be RedHat or Ubuntu based or\n\n303\n00:19:31.530 --> 00:19:35.640\nother ones, your package manager is\ngoing to be able to install G++ as well.\n\n304\n00:19:35.640 --> 00:19:38.640\nSo do I have to install G++,\n\n305\n00:19:38.640 --> 00:19:41.780\nand pretty much everything that Jacob\nshowed you is going to be the same.\n\n306\n00:19:41.780 --> 00:19:46.790\nFor Mac users, you have a little bit\nof tweaking that you need to do because\n\n307\n00:19:46.790 --> 00:19:48.900\nMac is gonna have a different compiler,\nbut\n\n308\n00:19:48.900 --> 00:19:52.220\ntypically that is available\nfairly straight out of the box.\n\n309\n00:19:52.220 --> 00:19:56.830\nOr at the very least, you can download X\ncode which would install that, as well.\n\n310\n00:19:56.830 --> 00:20:01.040\nNow, you kinda hinted at\nsomething that it's not great.\n\n311\n00:20:01.040 --> 00:20:04.450\nWe seem to have some issues with Notepad,\nright?\n\n312\n00:20:04.450 --> 00:20:07.420\nTypos, things like that.\n\n313\n00:20:07.420 --> 00:20:11.410\nIs there a better way to\nactually write C++ code?\n\n314\n00:20:11.410 --> 00:20:12.760\n&gt;&gt; Yeah, absolutely.\n\n315\n00:20:12.760 --> 00:20:17.320\nNotepad is just a basic text editor,\nit's not really made to write code.\n\n316\n00:20:17.320 --> 00:20:21.710\nBut there are programs out there that\nare actually made to write code.\n\n317\n00:20:21.710 --> 00:20:23.200\nThey're called IDEs.\n\n318\n00:20:23.200 --> 00:20:25.920\nOnce again,\nthose are integrated design environments.\n\n319\n00:20:25.920 --> 00:20:28.570\nOne of those, for Windows at least,\nis called Visual Studio.\n\n320\n00:20:28.570 --> 00:20:31.910\nThe community version of\nVisual Studio is free,\n\n321\n00:20:31.910 --> 00:20:36.020\nand that is what we will be using\nto write C+ code in the future.\n\n322\n00:20:36.020 --> 00:20:40.520\nAnd one of the nice things about Visual\nStudio is that you don't have to manually\n\n323\n00:20:40.520 --> 00:20:42.100\ncompile it each time you write code.\n\n324\n00:20:42.100 --> 00:20:44.840\nThere's a button you can click and\nit just does that for you, and\n\n325\n00:20:44.840 --> 00:20:45.780\nit runs it automatically.\n\n326\n00:20:47.230 --> 00:20:48.830\nSo, Visual Studio.\n\n327\n00:20:48.830 --> 00:20:52.275\nTo download that,\nlet's just search for Visual Studio.\n\n328\n00:20:56.490 --> 00:20:57.370\nIt's the first thing that pops up.\n\n329\n00:20:57.370 --> 00:20:58.559\nMicrosoft Visual Studio.\n\n330\n00:21:01.980 --> 00:21:04.430\nAnd we have this\nDownload Visual Studio option.\n\n331\n00:21:04.430 --> 00:21:07.240\nWe're gonna wanna go for Community 2017.\n\n332\n00:21:07.240 --> 00:21:08.697\nThat is the latest free version.\n\n333\n00:21:10.820 --> 00:21:12.450\nAnd it will download automatically.\n\n334\n00:21:12.450 --> 00:21:16.171\nI've already downloaded Visual Studio\non this machine before, so.\n\n335\n00:21:16.171 --> 00:21:19.295\nOnce again, I will show you screenshots\nof the process here on out.\n\n336\n00:21:22.990 --> 00:21:26.550\nSo first thing, whenever you run that\ndownloaded executable it's gonna ask\n\n337\n00:21:26.550 --> 00:21:29.060\nyou to accept license agreements.\n\n338\n00:21:29.060 --> 00:21:32.110\nAnd then, it will download.\n\n339\n00:21:32.110 --> 00:21:37.654\nThis will download all\nof the initial setup for\n\n340\n00:21:37.654 --> 00:21:46.053\nVisual Studio, but it won't\nactually download C++ information.\n\n341\n00:21:46.053 --> 00:21:48.307\nOnce the basic Visual Studio framework\nis downloaded, it will ask you what\n\n342\n00:21:48.307 --> 00:21:50.695\nsort of flavor of programming language\nthat you want to use Visual Studio for.\n\n343\n00:21:50.695 --> 00:21:52.634\nSo there are a lot of options here.\n\n344\n00:21:52.634 --> 00:21:55.097\nTry no to be too overwhelmed.\n\n345\n00:21:55.097 --> 00:22:01.320\nThe one here, Desktop Development with\nC++, that's what you wanna go for.\n\n346\n00:22:01.320 --> 00:22:05.510\nThat'll download everything you need\nto develop with C++ on Visual Studio.\n\n347\n00:22:05.510 --> 00:22:10.010\nIf you're more of a expert user, and\nyou want to download a few less things or\n\n348\n00:22:10.010 --> 00:22:13.530\na few more things, you can go to\nIndividual Components, up here.\n\n349\n00:22:14.540 --> 00:22:16.600\nJust play with it.\n\n350\n00:22:16.600 --> 00:22:19.650\nAnd if you mess up,\nit should be easy enough to try again.\n\n351\n00:22:19.650 --> 00:22:24.570\nI believe all you'd have to do\nis just re-run the installer and\n\n352\n00:22:24.570 --> 00:22:28.200\nit'll give you this option again, and\nyou can just choose what you need to.\n\n353\n00:22:28.200 --> 00:22:28.760\n&gt;&gt; Quick aside.\n\n354\n00:22:28.760 --> 00:22:31.910\nQuick forewarning for those of you who\nare saying, yeah, that seems easy.\n\n355\n00:22:31.910 --> 00:22:34.150\nIt's actually a wonderful kind of setup,\n\n356\n00:22:34.150 --> 00:22:37.930\nespecially if you have multiple languages\nor multiple environments that you need to\n\n357\n00:22:37.930 --> 00:22:41.340\ndevelop against that are by default out\nof the box supported by Visual Studio.\n\n358\n00:22:42.560 --> 00:22:45.170\nNot Visual Studio Code,\nthat's a lightweight text editor.\n\n359\n00:22:45.170 --> 00:22:48.120\nIt will give you some of the features, but\nnot necessarily the compilation tools and\n\n360\n00:22:48.120 --> 00:22:49.000\nthings like that.\n\n361\n00:22:49.000 --> 00:22:50.280\nSo that's number one.\n\n362\n00:22:50.280 --> 00:22:55.230\nNumber two, be very careful about\njust clicking all of those.\n\n363\n00:22:55.230 --> 00:22:58.360\nI think I did that one time just\nto see how much it was gonna.\n\n364\n00:22:58.360 --> 00:23:03.080\nI think it was something like 75 gigabytes\nworth of stuff it was trying to install,\n\n365\n00:23:03.080 --> 00:23:05.520\nwhich would take an incredibly long time.\n\n366\n00:23:05.520 --> 00:23:08.070\nSo I tend to do those incrementally.\n\n367\n00:23:08.070 --> 00:23:09.900\nLike, well,\nlet me get the one that I need, and\n\n368\n00:23:09.900 --> 00:23:12.470\nthen I'll rerun the installer\nif I need to install one.\n\n369\n00:23:12.470 --> 00:23:18.340\nAnd that way, I spread that time overtime\ninstead of I'm gonna wait for this\n\n370\n00:23:18.340 --> 00:23:22.410\n75 gigabytes worth of install packages\nto download and install my computer.\n\n371\n00:23:22.410 --> 00:23:24.570\nAnd that's the actual downloaded portion.\n\n372\n00:23:24.570 --> 00:23:27.460\nI'll give you a projected\nlike install portion as well.\n\n373\n00:23:27.460 --> 00:23:32.250\nBut do keep in mind, I'm probably gonna\nstart with a few to begin with so you're\n\n374\n00:23:32.250 --> 00:23:37.530\nnot waiting days, even on high speed\nInternet, to go, yeah, I finally have it.\n\n375\n00:23:37.530 --> 00:23:38.960\nCan we compile something?\n\n376\n00:23:38.960 --> 00:23:41.170\nBut just a caveat there.\n\n377\n00:23:41.170 --> 00:23:43.970\nVisual Studio Code is the text editor, and\n\n378\n00:23:43.970 --> 00:23:46.140\ndon't get crazy with\nselecting those check boxes.\n\n379\n00:23:46.140 --> 00:23:48.454\n&gt;&gt; Right, for now all we need is C++.\n\n380\n00:23:48.454 --> 00:23:53.350\nSo once you download all those C++ stuff,\nthis is the screen\n\n381\n00:23:53.350 --> 00:23:58.163\nthat shows you downloading\nC++ compiler and helper code.\n\n382\n00:23:58.163 --> 00:24:00.453\nIt'll ask you to restart your computer,\nso once again,\n\n383\n00:24:00.453 --> 00:24:01.894\nwe'll need to do another restart.\n\n384\n00:24:01.894 --> 00:24:06.103\nTry not to be doing any mission critical\nstuff while you're watching this video,\n\n385\n00:24:06.103 --> 00:24:06.779\nbasically.\n\n386\n00:24:06.779 --> 00:24:10.770\nA lot of restarts required\nto make a C++ code happen.\n\n387\n00:24:10.770 --> 00:24:14.460\nSo once you do have Visual Studio,\nyou can update it,\n\n388\n00:24:14.460 --> 00:24:16.839\nI'm just gonna close out of this.\n\n389\n00:24:16.839 --> 00:24:20.291\nThis is my old helloworld.text\nprogram that we made on the desktop.\n\n390\n00:24:20.291 --> 00:24:23.015\nWhat we're going to do, it crashed,\n\n391\n00:24:23.015 --> 00:24:27.269\nI swear it usually doesn't happen,\nit's a really good program.\n\n392\n00:24:27.269 --> 00:24:30.044\nLet's open up Visual Studio.\n\n393\n00:24:32.618 --> 00:24:34.523\nAnd you should see a start up screen,\n\n394\n00:24:34.523 --> 00:24:37.549\nwhat we're gonna do is we're\ngonna create a new project.\n\n395\n00:24:41.963 --> 00:24:44.302\nFile, New, Project.\n\n396\n00:24:44.302 --> 00:24:47.792\nThere's going to be a Visual C++ project,\nand\n\n397\n00:24:47.792 --> 00:24:51.633\nthere's going to be\na Windows Console Application.\n\n398\n00:24:51.633 --> 00:24:55.944\nSo let's name it whatever we want,\n\n399\n00:24:55.944 --> 00:25:02.133\nI'm going to call this Tutorial Project,\nhit OK.\n\n400\n00:25:06.016 --> 00:25:12.132\nAnd this will just create a bunch of\nbasic code that we need to do C++ things.\n\n401\n00:25:12.132 --> 00:25:15.844\n&gt;&gt; Now, this is already set up,\nI was hoping to jump in there.\n\n402\n00:25:15.844 --> 00:25:20.026\nAdding Mingew bin to the directory,\nwith a C++ compiler,\n\n403\n00:25:20.026 --> 00:25:22.328\nthat doesn't cause any issues.\n\n404\n00:25:22.328 --> 00:25:25.390\nDo we have to worry about that\nwhile having both that and\n\n405\n00:25:25.390 --> 00:25:26.930\nVisual Studio installed?\n\n406\n00:25:26.930 --> 00:25:30.741\nOr is it kind of Visual Studio will\ntake care of a lot of that for us?\n\n407\n00:25:30.741 --> 00:25:33.495\n&gt;&gt; With the bin stuff, Visual Studio\ntakes care all of that for you,\n\n408\n00:25:33.495 --> 00:25:35.715\nthat's probably actually\nwhy it needs to restart.\n\n409\n00:25:35.715 --> 00:25:39.598\nAfter we restarted for Mingew,\nVisual Studio needs to restart for\n\n410\n00:25:39.598 --> 00:25:41.135\nits own C++ compilers.\n\n411\n00:25:41.135 --> 00:25:45.707\nSo, here we are, it opened us\nup on tutorial_project.cpp and\n\n412\n00:25:45.707 --> 00:25:48.682\nwe already have a main method right here.\n\n413\n00:25:48.682 --> 00:25:53.999\nSo, what we're gonna do is\nre-open our helloworld.cpp file,\n\n414\n00:25:53.999 --> 00:25:56.521\nit sort of copied things over.\n\n415\n00:25:56.521 --> 00:26:01.896\nThe main thing we need\nis our printing to out,\n\n416\n00:26:01.896 --> 00:26:07.563\nand causing the console\nto stop once we do that.\n\n417\n00:26:07.563 --> 00:26:11.754\nAnd also,\nwe need to include the iostream library.\n\n418\n00:26:15.467 --> 00:26:16.628\nI'll just paste that right there.\n\n419\n00:26:16.628 --> 00:26:21.471\nAnd if everything worked,\nit should be all right to compile.\n\n420\n00:26:21.471 --> 00:26:26.440\nWe're going to go up to\nLocal Windows Debugger, push the button,\n\n421\n00:26:26.440 --> 00:26:29.557\nclick it, it's gonna ask us to build it.\n\n422\n00:26:29.557 --> 00:26:32.785\nThat's okay,\nthis is the compiling process,\n\n423\n00:26:32.785 --> 00:26:37.479\nand once this is done, it should\nautomatically launch our program.\n\n424\n00:26:39.676 --> 00:26:42.393\nInstead of creating executable and\nhaving us launch it ourselves.\n\n425\n00:26:42.393 --> 00:26:46.162\nHere we are, Hello World, same thing,\nand that's Visual Studio.\n\n426\n00:26:46.162 --> 00:26:50.147\nIt's very convenient to use, and\nI believe we will be using it for\n\n427\n00:26:50.147 --> 00:26:52.404\nthe rest of our classes from here on.\n\n428\n00:26:52.404 --> 00:26:55.425\n&gt;&gt; Well, Jacob,\nthat's definitely a handy tool.\n\n429\n00:26:55.425 --> 00:26:57.336\nI saw that it's always trying to help you,\n\n430\n00:26:57.336 --> 00:26:59.628\nit's keeping your projects\nkind of put together.\n\n431\n00:26:59.628 --> 00:27:03.724\nAnd point and click, whenever, if you're\nnot familiar with the command line,\n\n432\n00:27:03.724 --> 00:27:05.605\nthat can get a little overwhelming.\n\n433\n00:27:05.605 --> 00:27:10.064\nSo thank you so much, we got our initial\nVisual Studio install up and going,\n\n434\n00:27:10.064 --> 00:27:13.494\nwe've actually compiled and\nran a couple of C++ codes.\n\n435\n00:27:13.494 --> 00:27:15.641\nNow you may not know everything\nthat's going on, but\n\n436\n00:27:15.641 --> 00:27:18.897\nthat's why you should stay tuned,\nbecause we've got more C++ coming at you.\n\n437\n00:27:18.897 --> 00:27:21.822\nBut it does look like we are running\nlow on time for this episode, so\n\n438\n00:27:21.822 --> 00:27:23.819\nwe're going to go ahead and\nwrap this one up.\n\n439\n00:27:23.819 --> 00:27:27.027\nSo signing off for DevPro.TV,\nI've been your host, Justin Dennison.\n\n440\n00:27:27.027 --> 00:27:28.154\n&gt;&gt; I'm Jacob Armstrong.\n\n441\n00:27:28.154 --> 00:27:29.179\n&gt;&gt; And we'll see you next time.\n\n442\n00:27:29.179 --> 00:27:35.522\n[MUSIC]\n\n",
          "vimeoId": "237418007"
        },
        {
          "description": "In this episode, Justin and Jacob will explore the creation of variables as well as functions for breaking up some of the complexities of code.",
          "length": "1415",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-1-variables_and_functions-100517-PGM.00_23_26_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-1-variables_and_functions-100517-PGM.00_23_26_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-1-variables_and_functions-100517-PGM.00_23_26_18.Still001-sm.jpg",
          "title": "Variables and Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.363 --> 00:00:10.363\n[MUSIC]\n\n2\n00:00:11.898 --> 00:00:13.348\nGreetings, everyone.\n\n3\n00:00:13.348 --> 00:00:16.080\nAnd welcome to another\nexciting episode of DevPro.TV.\n\n4\n00:00:16.080 --> 00:00:18.170\nI'm your host, Justin Dennison.\n\n5\n00:00:18.170 --> 00:00:21.270\nAnd in today's episode,\nwe're continuing our C++ journey.\n\n6\n00:00:21.270 --> 00:00:24.310\nIn particular, we're gonna be talking\nabout variables and functions.\n\n7\n00:00:24.310 --> 00:00:27.230\nAnd well to help us with that very\nendeavor is Mr. Jacob Armstrong.\n\n8\n00:00:27.230 --> 00:00:28.340\nHow are you doing today Jacob?\n\n9\n00:00:28.340 --> 00:00:30.000\n&gt;&gt; Very good Justin, how are you?\n\n10\n00:00:30.000 --> 00:00:31.030\n&gt;&gt; I am doing fantastic.\n\n11\n00:00:31.030 --> 00:00:34.770\nIn particular, I need to know more about\nsome low level programming languages.\n\n12\n00:00:34.770 --> 00:00:39.510\nKind of like on my infinitely growing to\ndo list of things that I need to learn.\n\n13\n00:00:39.510 --> 00:00:42.110\nBut I've done some programming myself.\n\n14\n00:00:42.110 --> 00:00:45.538\nVariables in dynamic languages\nseem to be very easy to me.\n\n15\n00:00:45.538 --> 00:00:49.464\nHowever, in C++ what\nexactly is a variable, and\n\n16\n00:00:49.464 --> 00:00:54.683\ndo we have to be more careful than\nI probably am when I use variables?\n\n17\n00:00:54.683 --> 00:00:55.395\n&gt;&gt; Right.\n\n18\n00:00:55.395 --> 00:00:58.038\nSo in C++ a variable, explicitly,\n\n19\n00:00:58.038 --> 00:01:02.510\nis a way of reserving memory on\nyour computer to store your data.\n\n20\n00:01:02.510 --> 00:01:08.300\nYou can think of it just as a data storage\nunit, sort of like a cup to store water.\n\n21\n00:01:08.300 --> 00:01:10.780\nA variable stores data in\na programming language.\n\n22\n00:01:10.780 --> 00:01:15.910\nNow, I have to say that C++ is what\nthey call a strongly typed language.\n\n23\n00:01:15.910 --> 00:01:20.500\nWhich means that once you declare\na variable as a specific type of variable\n\n24\n00:01:20.500 --> 00:01:23.520\nyou can't initialize it has\na different type of variable.\n\n25\n00:01:23.520 --> 00:01:27.290\nSay, you can't create\na integer variable and\n\n26\n00:01:27.290 --> 00:01:29.750\nthen try to assign\na string to that variable.\n\n27\n00:01:29.750 --> 00:01:30.813\nThis doesn't work.\n\n28\n00:01:30.813 --> 00:01:37.730\nBut we will just start right now on our\ncomputer and start playing with variables.\n\n29\n00:01:37.730 --> 00:01:41.015\n&gt;&gt; Now, let me jump in here real quick,\nJacob, before we get started.\n\n30\n00:01:41.015 --> 00:01:45.120\nI'm definitely all about exploration\nbecause to me that helps me understand and\n\n31\n00:01:45.120 --> 00:01:46.200\ncement those.\n\n32\n00:01:46.200 --> 00:01:48.420\nBut when you say types,\n\n33\n00:01:48.420 --> 00:01:52.020\nwhat do you explicitly mean when you\nsay it's a strongly typed language?\n\n34\n00:01:52.020 --> 00:01:53.310\nI mean, I've talked about it,\n\n35\n00:01:53.310 --> 00:01:56.800\nand maybe some of those of you\nwatching know what he means.\n\n36\n00:01:56.800 --> 00:02:01.420\nBut let's just clarify, in the context\nof C++, what is a data type?\n\n37\n00:02:01.420 --> 00:02:07.345\n&gt;&gt; Right, data types are the type\nof data that you have.\n\n38\n00:02:07.345 --> 00:02:10.510\n&gt;&gt; [LAUGH] I'll take full\nresponsibility for that.\n\n39\n00:02:10.510 --> 00:02:12.030\nI kind of set you up.\n\n40\n00:02:12.030 --> 00:02:16.076\nThat's a hard thing to describe, right,\nto someone who hasn't done this.\n\n41\n00:02:16.076 --> 00:02:18.230\nBut let's just give us a few example.\n\n42\n00:02:18.230 --> 00:02:22.156\nCan you give us some examples that we\nshould be able to grock so to speak.\n\n43\n00:02:22.156 --> 00:02:25.600\n&gt;&gt; Sure, so in C++ there\nare many data types out there.\n\n44\n00:02:25.600 --> 00:02:28.560\nYou have integers,\nyou have floating point numbers,\n\n45\n00:02:28.560 --> 00:02:31.260\nyou have double precision\nfloating point numbers.\n\n46\n00:02:31.260 --> 00:02:34.630\nYou have characters,\nBoolean values, strings.\n\n47\n00:02:34.630 --> 00:02:38.770\nThere are practically an infinite\namount and possibly literally\n\n48\n00:02:38.770 --> 00:02:42.100\nan infinite amount seeing as how\nyou can create your own data types.\n\n49\n00:02:42.100 --> 00:02:43.550\nWe'll go over that later specifically.\n\n50\n00:02:45.560 --> 00:02:49.530\nThe main thing about types and why you do\nhave different types is that different\n\n51\n00:02:49.530 --> 00:02:53.820\ntypes can reserve different amounts\nof memory on your computer,\n\n52\n00:02:53.820 --> 00:02:56.830\nwhich is why you need to have\nthem be distinct from each other.\n\n53\n00:02:57.920 --> 00:03:01.480\nSo let's get started on my machine and\nwe'll start on integers.\n\n54\n00:03:01.480 --> 00:03:03.320\nI've gone ahead and\nopened up Visual Studio.\n\n55\n00:03:03.320 --> 00:03:07.771\nYou should do the same on your\nmachine if you want to follow along.\n\n56\n00:03:07.771 --> 00:03:11.213\nOr open up your own integrated design\nenvironment if you have one downloaded\n\n57\n00:03:11.213 --> 00:03:12.670\nall ready.\n\n58\n00:03:12.670 --> 00:03:14.822\nWe're going to create a new project.\n\n59\n00:03:14.822 --> 00:03:17.670\nWe're gonna name it\nplaying with variables,\n\n60\n00:03:17.670 --> 00:03:20.086\nbecause that's what we will be doing.\n\n61\n00:03:24.336 --> 00:03:28.633\nAnd it will be another\nWindows console application.\n\n62\n00:03:28.633 --> 00:03:32.733\nMake sure that you have that selected,\nand go ahead and make it happen.\n\n63\n00:03:34.428 --> 00:03:37.840\nAnd I actually already\nmade this project before.\n\n64\n00:03:37.840 --> 00:03:39.280\nJust to test things out.\n\n65\n00:03:39.280 --> 00:03:42.232\nSo this is gonna be playing with\nvariables number one just to give it\n\n66\n00:03:42.232 --> 00:03:43.085\na different name.\n\n67\n00:03:46.822 --> 00:03:49.223\nAnd once this loads in we'll\nbe able to get started.\n\n68\n00:03:51.880 --> 00:03:52.560\nSo here we are.\n\n69\n00:03:53.580 --> 00:03:57.800\nRight, so now that our project is up,\nlet's dive right into it and\n\n70\n00:03:57.800 --> 00:03:59.770\nmake some variables happen.\n\n71\n00:03:59.770 --> 00:04:02.960\nSo we're gonna begin\nwith an integer variable.\n\n72\n00:04:02.960 --> 00:04:07.825\nThe type is integer and we specify\nthat with the keyword int, I-N-T.\n\n73\n00:04:07.825 --> 00:04:12.610\nSo now we can name the variable, and\nyou can name the variable, more or\n\n74\n00:04:12.610 --> 00:04:13.480\nless, anything you want.\n\n75\n00:04:13.480 --> 00:04:18.587\nThere are some rules, you can't start\nwith numeric characters, say 1Test.\n\n76\n00:04:18.587 --> 00:04:19.700\nIt's not gonna work.\n\n77\n00:04:19.700 --> 00:04:25.090\nBut as long as you just start with\na regular old alphabetic character.\n\n78\n00:04:25.090 --> 00:04:27.930\nLet's call this variable integer,\njust so you remember what it is.\n\n79\n00:04:30.198 --> 00:04:31.700\nYou should be good.\n\n80\n00:04:31.700 --> 00:04:35.890\nRight now we have an integer variable\ndeclared and ready to be initialized and\n\n81\n00:04:35.890 --> 00:04:37.520\nhave data put into it.\n\n82\n00:04:37.520 --> 00:04:39.750\nSo let's do that right now.\n\n83\n00:04:39.750 --> 00:04:48.050\nInteger is going to be equal to\nan integer, say the number 1.\n\n84\n00:04:48.050 --> 00:04:53.190\nAnd there we go, we declared a variable\nand we initialized it to be 1.\n\n85\n00:04:53.190 --> 00:04:56.080\nAnd, just to make sure\nthat everything works,\n\n86\n00:04:56.080 --> 00:04:57.770\nwe're gonna print this\nonto the console screen.\n\n87\n00:04:57.770 --> 00:05:02.814\nSo if you remember from last episode,\nfirst we have to import the I/O stream\n\n88\n00:05:02.814 --> 00:05:08.210\nlibrary using include I/O stream.\n\n89\n00:05:08.210 --> 00:05:14.650\nAnd then we can just do, go down here.\n\n90\n00:05:14.650 --> 00:05:16.410\nstd::cout.\n\n91\n00:05:18.280 --> 00:05:20.460\nType in the variable integer.\n\n92\n00:05:22.700 --> 00:05:27.136\nType in an endline in\nthe standard library.\n\n93\n00:05:29.572 --> 00:05:32.930\nAnd then tell our console input.\n\n94\n00:05:35.290 --> 00:05:37.480\nJust wait a little bit.\n\n95\n00:05:37.480 --> 00:05:40.560\nUsing the ignore method on that,\nwe'll talk about methods later once again.\n\n96\n00:05:40.560 --> 00:05:42.717\nAnd if we run this program,\n\n97\n00:05:48.063 --> 00:05:51.150\nThere we have it,\n1 pops up in the console.\n\n98\n00:05:52.870 --> 00:05:54.520\nAnd that's the basics of variables.\n\n99\n00:05:54.520 --> 00:05:57.890\nAnd there are more variable\ntypes than just integer.\n\n100\n00:05:59.070 --> 00:06:02.025\nLet's talk about a few\nmore variable types-\n\n101\n00:06:02.025 --> 00:06:04.470\n&gt;&gt; Now Jacob, before you hop along and\n\n102\n00:06:04.470 --> 00:06:07.580\nshow us some more of those variable types\nI do have a couple of questions for you.\n\n103\n00:06:07.580 --> 00:06:11.105\nNumber one, the naming conventions, I know\nwe can't start with numeric characters,\n\n104\n00:06:11.105 --> 00:06:15.210\nand usually there's some\nother exceptions there.\n\n105\n00:06:15.210 --> 00:06:17.470\nTypically we'll start it with a letter,\nright?\n\n106\n00:06:17.470 --> 00:06:21.050\nYou should probably start variables with\nletter names and have them be explicit.\n\n107\n00:06:21.050 --> 00:06:22.470\nLike here we have integer.\n\n108\n00:06:22.470 --> 00:06:24.210\nIt's an integer.\n\n109\n00:06:24.210 --> 00:06:29.815\nFor the first letter being capital or\nlowercase, are there rules within C++ or\n\n110\n00:06:29.815 --> 00:06:33.370\nis that kind of team by team,\ngroup by group basis?\n\n111\n00:06:33.370 --> 00:06:35.161\n&gt;&gt; Sure, with capital letters and\n\n112\n00:06:35.161 --> 00:06:38.680\nlowercase letters it doesn't\nmatter what you start with.\n\n113\n00:06:38.680 --> 00:06:40.470\nIt can be lowercase, capital.\n\n114\n00:06:40.470 --> 00:06:44.060\nUsually, you're gonna want to keep\n\n115\n00:06:44.060 --> 00:06:47.180\nyour naming conventions to\nthe same thing as your team's.\n\n116\n00:06:47.180 --> 00:06:51.720\nSo if your team uses a lowercase letter\nto begin all the variables stay.\n\n117\n00:06:51.720 --> 00:06:54.510\nYou should keep using\nlowercase letters yourself\n\n118\n00:06:54.510 --> 00:06:55.790\njust to keep your code nice and clean.\n\n119\n00:06:57.180 --> 00:06:59.830\nAs we rename everything and\nwe compile this.\n\n120\n00:07:00.840 --> 00:07:05.786\nIt runs more or less the same way and\nwe get a 1 again.\n\n121\n00:07:05.786 --> 00:07:08.970\n&gt;&gt; Okay, but I mean these are specific.\n\n122\n00:07:08.970 --> 00:07:12.240\nI noticed you changed all those, so\nI'm assuming they're specific to,\n\n123\n00:07:12.240 --> 00:07:15.530\nif it's capitalized one place it\nneeds to capitalized in others.\n\n124\n00:07:15.530 --> 00:07:17.050\nSecond question, though.\n\n125\n00:07:17.050 --> 00:07:20.260\nWe have initialization, or,\nexcuse me, declaration, and\n\n126\n00:07:20.260 --> 00:07:23.660\nthen actual assignment on the second line.\n\n127\n00:07:23.660 --> 00:07:25.470\nCan I combine those two lines,\n\n128\n00:07:25.470 --> 00:07:30.430\nor in C++ do I have to declare and\nthen initialize said variable?\n\n129\n00:07:30.430 --> 00:07:34.590\n&gt;&gt; You can declare and initialize\nthe variable all on the same line.\n\n130\n00:07:34.590 --> 00:07:36.050\nLet's show that off right now.\n\n131\n00:07:36.050 --> 00:07:37.250\nWe're gonna use a different\ntype this time.\n\n132\n00:07:37.250 --> 00:07:39.480\nIt's gonna be a floating point number,\n\n133\n00:07:39.480 --> 00:07:42.700\nwhich basically means it is\na number that has a decimal place.\n\n134\n00:07:42.700 --> 00:07:44.430\nSo let's do that.\n\n135\n00:07:44.430 --> 00:07:46.060\nF-L-O-A-T, float.\n\n136\n00:07:46.060 --> 00:07:49.605\nWe're gonna call this variable float.\n\n137\n00:07:49.605 --> 00:07:54.475\nIt's gonna be equal to, initializing it on\n\n138\n00:07:54.475 --> 00:07:59.487\nthe same line, 1.5, and there we had it.\n\n139\n00:07:59.487 --> 00:08:01.687\nFloat 1.5.\n\n140\n00:08:01.687 --> 00:08:06.776\nAnd if you wanna print this\nout to the console, F-L-O-A-T.\n\n141\n00:08:09.357 --> 00:08:12.980\nSo everything compiles, we get a 1.5.\n\n142\n00:08:12.980 --> 00:08:17.117\nNow regarding the last question\nof naming conventions,\n\n143\n00:08:17.117 --> 00:08:22.645\nwe can't actually name our capital Float\nto be a lowercase float this time.\n\n144\n00:08:22.645 --> 00:08:25.935\nBecause float is already\nreserved in C++ as a keyword and\n\n145\n00:08:25.935 --> 00:08:28.570\nyou can't use keywords as variable types.\n\n146\n00:08:28.570 --> 00:08:33.703\nSo we cannot name a float, float,\nwe can't name a float int.\n\n147\n00:08:33.703 --> 00:08:36.040\nWe can't name a float return.\n\n148\n00:08:36.040 --> 00:08:38.778\nThose are all already\nvariable keyword names.\n\n149\n00:08:43.840 --> 00:08:47.980\nSo in addition to Float, we have another\nnumeric variable type that I wanna go over\n\n150\n00:08:47.980 --> 00:08:49.490\nwith you,now is the Double.\n\n151\n00:08:53.647 --> 00:08:56.965\nNow Double stands for double precision.\n\n152\n00:08:56.965 --> 00:09:04.445\nYou can think of it as a floating point\nnumber with twice as much memory reserved,\n\n153\n00:09:04.445 --> 00:09:10.177\nbut also twice as much numerical\nrange that it can represent.\n\n154\n00:09:10.177 --> 00:09:12.660\nAnd by numerical range,\nI mean it can represent 1.005.\n\n155\n00:09:12.660 --> 00:09:16.278\nIf we print this out,\n\n156\n00:09:16.278 --> 00:09:20.703\nit should be 1.005.\n\n157\n00:09:20.703 --> 00:09:26.847\nIt's actually a weird thing that\nhappens without, yeah there we go.\n\n158\n00:09:26.847 --> 00:09:33.091\nNow to really demonstrate this- I'm\ngoing to do a couple things here.\n\n159\n00:09:33.091 --> 00:09:42.339\nI'm gonna make our console window,\nOnly display-\n\n160\n00:09:48.163 --> 00:09:50.648\nThe exact precision of\nthe variable that we put into it.\n\n161\n00:09:50.648 --> 00:09:56.513\nNow if we make our float here,\nour floating point number,\n\n162\n00:09:56.513 --> 00:10:00.378\n1.0, 1000 actually.\n\n163\n00:10:00.378 --> 00:10:03.849\n.0- 000005,\n\n164\n00:10:03.849 --> 00:10:09.061\nsomething weird's gonna happen.\n\n165\n00:10:09.061 --> 00:10:10.927\nAnd if we actually do print\nit out at the console.\n\n166\n00:10:16.054 --> 00:10:18.313\nIt's just gonna print out 1000.\n\n167\n00:10:18.313 --> 00:10:22.592\nWe lose that precision because\nthere just isn't enough memory,\n\n168\n00:10:22.592 --> 00:10:25.794\nour computer to hold\nthis last 0.5 on the end.\n\n169\n00:10:25.794 --> 00:10:30.398\nThis is what's called rounding error,\nand if you're losing a lot of floats and\n\n170\n00:10:30.398 --> 00:10:34.041\ndecimal points in your program\nit causes some pretty bad bugs,\n\n171\n00:10:34.041 --> 00:10:35.433\nthey're hard to find.\n\n172\n00:10:35.433 --> 00:10:41.323\nBut if we use double here, and\ncopy this number over, and\n\n173\n00:10:41.323 --> 00:10:46.863\ninitialize double as the 1000.000005.\n\n174\n00:10:46.863 --> 00:10:50.940\nAnd we put double into our console window.\n\n175\n00:10:57.921 --> 00:11:02.468\nIt outputs at the exact\nposition that we want.\n\n176\n00:11:02.468 --> 00:11:05.459\n&gt;&gt; So this could possibly be\na source of bugs if you you're doing\n\n177\n00:11:05.459 --> 00:11:07.876\nsome kind of numerical calculations or\nthings.\n\n178\n00:11:07.876 --> 00:11:12.581\nWhere what you print out is not\nactually the representation of your\n\n179\n00:11:12.581 --> 00:11:14.521\nexpected result, right?\n\n180\n00:11:14.521 --> 00:11:17.425\nOr if we have rounding errors,\neven if it's printed out,\n\n181\n00:11:17.425 --> 00:11:20.230\nyou're like, I have $1,000 in my account.\n\n182\n00:11:20.230 --> 00:11:24.899\nWhen really, you have $1,000 and\nwhat, 5, 100,000 silver penny.\n\n183\n00:11:24.899 --> 00:11:27.340\n&gt;&gt; Yeah.\n&gt;&gt; Now I'll take that penny anyway I can\n\n184\n00:11:27.340 --> 00:11:31.792\nget it But we should definitely be aware\ncuz I know those are kind of compounding\n\n185\n00:11:31.792 --> 00:11:34.979\nerrors if we do a great deal\nof operations with numbers.\n\n186\n00:11:34.979 --> 00:11:35.597\n&gt;&gt; Absolutely and\n\n187\n00:11:35.597 --> 00:11:39.170\nwith using flow it's something that\nyou definitely need to keep in mind.\n\n188\n00:11:39.170 --> 00:11:44.351\nSo these are sort of the main\nnumerical variables that you can use.\n\n189\n00:11:44.351 --> 00:11:47.770\nThere are different kinds of\nvariable types though also.\n\n190\n00:11:47.770 --> 00:11:51.461\nSo let's try one out,\nthis one's gonna be a Boolean type.\n\n191\n00:11:51.461 --> 00:11:55.418\nBooleans are declared as bool and\n\n192\n00:11:55.418 --> 00:11:59.948\nthey are always either true or false.\n\n193\n00:12:02.895 --> 00:12:04.989\nAnd if we print this out on the screen,\n\n194\n00:12:04.989 --> 00:12:07.481\nactually see something\na little weird here.\n\n195\n00:12:07.481 --> 00:12:10.463\nEven though we set it\nto be the keyword true,\n\n196\n00:12:10.463 --> 00:12:13.455\nthis Boolean variable will print out as 1.\n\n197\n00:12:19.777 --> 00:12:22.528\n&gt;&gt; Wow, that is a, that I see.\n\n198\n00:12:22.528 --> 00:12:27.941\nI know some programming languages that\ndo thi, and I'm not necessarily always\n\n199\n00:12:27.941 --> 00:12:33.782\nexcited when I see that true and false are\nactually backed by numeric values, right?\n\n200\n00:12:33.782 --> 00:12:34.388\n&gt;&gt; It gets worse.\n\n201\n00:12:34.388 --> 00:12:38.003\n[LAUGH]\n&gt;&gt; [LAUGH] I know, well, I can't wait.\n\n202\n00:12:38.003 --> 00:12:39.540\n&gt;&gt; Just to show you what a false does.\n\n203\n00:12:43.977 --> 00:12:45.236\nFalse will be printed out as 0.\n\n204\n00:12:45.236 --> 00:12:50.959\nWhat happens if we set our Boolean\nlevel to be something like 100?\n\n205\n00:12:55.034 --> 00:12:56.010\n100, integer 100.\n\n206\n00:12:56.010 --> 00:12:59.809\nIt will print out as one.\n\n207\n00:12:59.809 --> 00:13:05.941\n&gt;&gt; So this is have kind of\na truthy falsey kind of feeling?\n\n208\n00:13:05.941 --> 00:13:08.411\nAnything that's not a zero\nis assumed to be false?\n\n209\n00:13:08.411 --> 00:13:11.663\nExcuse me, anything that's not\na zero is assumed to be true?\n\n210\n00:13:11.663 --> 00:13:12.556\n&gt;&gt; Exactly, yeah.\n\n211\n00:13:12.556 --> 00:13:18.693\nSo we set this to be even -100,\nit will be again, 1.\n\n212\n00:13:18.693 --> 00:13:22.312\nSo in C++ there's a rule that\nif you have a Boolean and\n\n213\n00:13:22.312 --> 00:13:26.954\nit's represented by a number then,\nas long as that number isn't zero\n\n214\n00:13:26.954 --> 00:13:30.358\nit's gonna be true and\nif it is zero, it's false.\n\n215\n00:13:30.358 --> 00:13:33.581\nThat's also something you wanna keep in\nmind as it's programming just to make sure\n\n216\n00:13:33.581 --> 00:13:41.111\nthat you don't run into any nasty bugs\nThis is what's called implicit casting.\n\n217\n00:13:41.111 --> 00:13:45.906\nWe're sort of implicitly turning this\ninteger value into a Boolean value.\n\n218\n00:13:45.906 --> 00:13:49.830\nWe'll talk about casting in\na later lesson but for now,\n\n219\n00:13:49.830 --> 00:13:52.850\njust understand that is what's going on.\n\n220\n00:13:52.850 --> 00:13:59.062\nIn addition to numeric variable types and\nBoolean variable types there is one\n\n221\n00:13:59.062 --> 00:14:04.230\nprimitive variable type I wanna\ntalk about called a character.\n\n222\n00:14:04.230 --> 00:14:07.768\nThese are declared as chars for\ncharacter, and\n\n223\n00:14:07.768 --> 00:14:13.050\nthese are just single letters, or\nnumerical characters basically.\n\n224\n00:14:13.050 --> 00:14:17.054\nSo you can have it be an A, a B, a C, a D.\n\n225\n00:14:18.870 --> 00:14:19.470\nLet me print this out.\n\n226\n00:14:22.949 --> 00:14:24.009\nIt will print out.\n\n227\n00:14:24.009 --> 00:14:25.711\nIt'll print out as an A.\n\n228\n00:14:28.880 --> 00:14:31.785\nSaid to be a 1.\n\n229\n00:14:31.785 --> 00:14:37.330\nIt'll print out as- A 1, simple as that.\n\n230\n00:14:38.670 --> 00:14:43.555\nSo these are all examples of what\nwe call primitive variables.\n\n231\n00:14:43.555 --> 00:14:48.895\nThese are variables that are sort of\npackaged into C++ by default and it is\n\n232\n00:14:48.895 --> 00:14:54.425\nthe variables that you will use to build\nyour program and launch it within it.\n\n233\n00:14:54.425 --> 00:15:00.520\nThere is one last thing I wanna talk\nabout here, one last variable type.\n\n234\n00:15:00.520 --> 00:15:04.817\nIt's not actually a variable,\nper se, it's actually a class.\n\n235\n00:15:04.817 --> 00:15:09.715\nBut it's such a special and important\nclass that it's used all the time and\n\n236\n00:15:09.715 --> 00:15:15.150\nit bares mentioning in this lesson here,\nthey're called strings.\n\n237\n00:15:15.150 --> 00:15:21.092\nSo they're part of the string library.\n\n238\n00:15:21.092 --> 00:15:22.970\nSo we have to include strings to use them.\n\n239\n00:15:24.140 --> 00:15:28.998\nAnd what strings are,\nis basically an array of characters.\n\n240\n00:15:28.998 --> 00:15:33.440\nThey are a bunch of characters lined\nup in a row, basically sentences.\n\n241\n00:15:34.870 --> 00:15:40.228\nSo if we do a standard string.\n\n242\n00:15:43.030 --> 00:15:45.099\nYou declare strings by\nusing double quotes,\n\n243\n00:15:45.099 --> 00:15:47.391\ninstead of the characters\nsingle quotes up here.\n\n244\n00:15:47.391 --> 00:15:52.140\nWe're gonna call this string, why not,\n\n245\n00:15:52.140 --> 00:15:56.355\nHello World, a stereotypical use.\n\n246\n00:15:56.355 --> 00:15:58.467\nAnd once we print this out, this string.\n\n247\n00:16:01.840 --> 00:16:06.450\nWe got in the console,\npredictably, Hello World.\n\n248\n00:16:06.450 --> 00:16:08.900\nSo, strings are used all\nthe time in programming.\n\n249\n00:16:08.900 --> 00:16:12.660\nYou can read data, you can read addresses,\n\n250\n00:16:12.660 --> 00:16:16.150\nnames, whatever you want,\nstring could probably handle it.\n\n251\n00:16:17.230 --> 00:16:20.390\n&gt;&gt; So, a string is a little more complex\nthan some of the other primitive types\n\n252\n00:16:20.390 --> 00:16:22.320\nwe've covered earlier in this episode.\n\n253\n00:16:22.320 --> 00:16:24.990\nBut they're necessary in order get,\nmore or less,\n\n254\n00:16:24.990 --> 00:16:30.150\na collection of text, from as you said,\nwith addresses, or anything like that.\n\n255\n00:16:30.150 --> 00:16:33.181\nNow, you did make a mention,\nI'm gonna wind back a little bit,\n\n256\n00:16:33.181 --> 00:16:37.420\nyou made a mention earlier that these\nare the most commonly used numeric types.\n\n257\n00:16:37.420 --> 00:16:41.530\nAre you implying that there\nare other numeric types in C++ that\n\n258\n00:16:41.530 --> 00:16:43.430\nmaybe aren't as commonly used?\n\n259\n00:16:43.430 --> 00:16:44.510\n&gt;&gt; Yes, absolutely.\n\n260\n00:16:44.510 --> 00:16:48.469\nThere are a whole bunch of\nvariables out there in C++.\n\n261\n00:16:48.469 --> 00:16:53.597\nYou have Characters,\nBooleans, Floats, Doubles,\n\n262\n00:16:53.597 --> 00:16:58.130\nInts, longs, Unsigned Ints, Long longs.\n\n263\n00:16:58.130 --> 00:17:00.320\nThere's so many, I can't name them.\n\n264\n00:17:00.320 --> 00:17:02.380\nWe can't cover them all in one lesson.\n\n265\n00:17:02.380 --> 00:17:03.880\nI don't know all of\nthem on top of my head.\n\n266\n00:17:03.880 --> 00:17:07.590\nAnd actually, in C++ you can sort\nof even make your own variables.\n\n267\n00:17:07.590 --> 00:17:11.730\nSo theoretically, there are actually\nan infinite amount, right.\n\n268\n00:17:13.340 --> 00:17:17.280\n&gt;&gt; So its one of those things that you've\nshown us the most commonly used ones,\n\n269\n00:17:17.280 --> 00:17:19.590\nwhich you're probably,\nif you're just getting started with C++,\n\n270\n00:17:19.590 --> 00:17:20.910\nyou're gonna need to use.\n\n271\n00:17:20.910 --> 00:17:24.510\nBut some of those that you've cropped up,\nand some my previous experience, I've seen\n\n272\n00:17:24.510 --> 00:17:29.018\nthose used every once in a while, but\nit's a very particularly used case.\n\n273\n00:17:29.018 --> 00:17:31.910\nLike a long is just\na really big integer so\n\n274\n00:17:31.910 --> 00:17:35.310\nwe don't run into the limitations\nof the platform specifically.\n\n275\n00:17:35.310 --> 00:17:37.870\nBut by in large if you're\njust getting started,\n\n276\n00:17:37.870 --> 00:17:40.280\nyou're probably not gonna need those.\n\n277\n00:17:40.280 --> 00:17:44.700\nAnd if you do,\ndefinitely go check out, well C++\n\n278\n00:17:44.700 --> 00:17:49.680\nprimitive types because they tend to\nbe very particular in how they're used.\n\n279\n00:17:49.680 --> 00:17:52.480\n&gt;&gt; Yeah, so\nwe are starting to run out of time here.\n\n280\n00:17:52.480 --> 00:17:56.550\nSo really quickly, I would like to\ngo over some variable operators.\n\n281\n00:17:56.550 --> 00:17:59.384\nThere are a bunch of different things\nthat you can use to play with variables.\n\n282\n00:17:59.384 --> 00:18:02.785\nFor instance, I have an integer here, and\n\n283\n00:18:02.785 --> 00:18:07.940\nto sort of assign a value to my\ninteger variable that I made.\n\n284\n00:18:07.940 --> 00:18:09.860\nI used what's called\nan assignment operator.\n\n285\n00:18:09.860 --> 00:18:15.850\nThis is a single equal sign and it takes\nwhatever is on the right-hand side and\n\n286\n00:18:15.850 --> 00:18:19.350\nassigns it to whatever is\non the left-hand side.\n\n287\n00:18:19.350 --> 00:18:21.210\nSo for numeric values, especially,\n\n288\n00:18:21.210 --> 00:18:24.357\nthere are a whole bunch of different\noperators that you can use.\n\n289\n00:18:24.357 --> 00:18:33.064\nFor example, there is a ++ operator, ++.\n\n290\n00:18:33.064 --> 00:18:36.850\nWhat the ++ operator does,\nis increment things up by one.\n\n291\n00:18:36.850 --> 00:18:41.698\nSo I created an integer value of 1,\nand then I did the ++\n\n292\n00:18:41.698 --> 00:18:47.461\nincremental operator, so\nif we print out my old integer variable,\n\n293\n00:18:51.197 --> 00:18:57.463\nSend that to the console,\nit is now two we initialized it as 1,\n\n294\n00:18:57.463 --> 00:19:01.502\nwe incremented up by 1 and it became 2.\n\n295\n00:19:01.502 --> 00:19:06.407\nIn addition to ++ we can set integers\n\n296\n00:19:06.407 --> 00:19:11.923\nusing addition operator to say, 5 + 5,\n\n297\n00:19:11.923 --> 00:19:17.285\nthis will give us a value of 10 integer,\n\n298\n00:19:17.285 --> 00:19:22.210\nbut it didn't give us a value of 12.\n\n299\n00:19:22.210 --> 00:19:27.874\nSo just to run through code\nhere we create an integer of 1,\n\n300\n00:19:27.874 --> 00:19:32.163\nwe incremented it up by 1, so 1 + 1 is 2.\n\n301\n00:19:32.163 --> 00:19:37.042\nAnd then, we reassigned that\ninteger variable to be 5 + 5.\n\n302\n00:19:37.042 --> 00:19:39.300\nThis is like some of\nthe power of variables.\n\n303\n00:19:39.300 --> 00:19:43.090\nYou can just declare it once and\nreuse it wherever you want.\n\n304\n00:19:45.010 --> 00:19:47.520\n&gt;&gt; Now, could I replace one of\nthose fives with an integer?\n\n305\n00:19:47.520 --> 00:19:51.986\nSo I could have whatever integer\nwas + 5 is now assigned to\n\n306\n00:19:51.986 --> 00:19:56.009\nthe integer variable, or\nis that a no, no in C++?\n\n307\n00:19:56.009 --> 00:19:57.890\n&gt;&gt; You can absolutely do that.\n\n308\n00:19:57.890 --> 00:20:02.533\nSo sort of to go over the logic,\nwhenever we actually implement this,\n\n309\n00:20:02.533 --> 00:20:07.881\nsay 5 + integer, So,\nif I can actually spell integer.\n\n310\n00:20:09.690 --> 00:20:14.364\nWhat's happening here is we create\nan integer, we assign to do 1,\n\n311\n00:20:14.364 --> 00:20:16.090\nwe increment it up by 1.\n\n312\n00:20:16.090 --> 00:20:19.190\nSo at this point,\ninteger is equal to 2, right?\n\n313\n00:20:20.280 --> 00:20:25.480\nSo then we say, 5 + 2 we get that value,\n\n314\n00:20:25.480 --> 00:20:30.760\nit's gonna be 7, so\nthen we assign 7 to be equal to integer.\n\n315\n00:20:30.760 --> 00:20:34.890\nWe reassigned that value to the variable.\n\n316\n00:20:34.890 --> 00:20:38.430\nSo if you run the console once again,\nwe get 7.\n\n317\n00:20:40.633 --> 00:20:42.923\nBut if you want to take\na little shortcut here,\n\n318\n00:20:42.923 --> 00:20:45.874\nthis is one last numeric\noperator that I'm gonna show you.\n\n319\n00:20:45.874 --> 00:20:49.180\nIt is the += operator.\n\n320\n00:20:49.180 --> 00:20:55.100\nAnd what this will do, is basically\nthe same thing we had before on this line.\n\n321\n00:20:55.100 --> 00:21:00.690\nIt'll take integer, add 5 to it, and then\nassign the new value to the old variable.\n\n322\n00:21:00.690 --> 00:21:04.423\nSo this is just a useful\nshorthand if you wanted to use it.\n\n323\n00:21:06.689 --> 00:21:07.190\nAnd we get 7 again.\n\n324\n00:21:08.710 --> 00:21:11.760\nSo there are a whole bunch of different\noperators for numeric values.\n\n325\n00:21:11.760 --> 00:21:16.240\nYou have plus equals,\nminus equals, times equals,\n\n326\n00:21:16.240 --> 00:21:19.160\ndivided equals, you name it,\nit's probably there.\n\n327\n00:21:19.160 --> 00:21:22.100\nThere's a lot of them, and I can't really\ngo over it all in one episode again.\n\n328\n00:21:23.440 --> 00:21:26.290\nBut that's it for numeric variables,\nand really quickly,\n\n329\n00:21:26.290 --> 00:21:31.209\njust to go over Boolean variables,\nwe have Boolean\n\n330\n00:21:31.209 --> 00:21:35.270\nis equals exclamation point true.\n\n331\n00:21:37.470 --> 00:21:41.900\nThis exclamation point is an inverse\noperator, it takes true and\n\n332\n00:21:41.900 --> 00:21:42.840\nturns it into false.\n\n333\n00:21:44.830 --> 00:21:47.880\nWe could do not equals true.\n\n334\n00:21:47.880 --> 00:21:50.962\nSo do the same thing, basically.\n\n335\n00:21:56.167 --> 00:21:56.667\nEtc.\n\n336\n00:21:58.350 --> 00:22:03.450\nThere are operators for characters but\nthey're not really used too, too often.\n\n337\n00:22:03.450 --> 00:22:05.360\nThey're more for hacky solutions for\n\n338\n00:22:05.360 --> 00:22:09.449\nsome of the more low level\nimplementation of character types.\n\n339\n00:22:10.700 --> 00:22:14.447\nAnd operators for strings,\nThey involve classes, so\n\n340\n00:22:14.447 --> 00:22:16.630\nwe'll have to go over that later.\n\n341\n00:22:16.630 --> 00:22:20.280\n&gt;&gt; Now, one quick question\nabout the Boolean operators.\n\n342\n00:22:20.280 --> 00:22:24.070\nDo Booleans in C++ allow us to do like and\nor.\n\n343\n00:22:24.070 --> 00:22:24.710\nWe have not,\n\n344\n00:22:24.710 --> 00:22:28.870\nbut are we gonna worry about those when we\nactually get to control flow of programs?\n\n345\n00:22:28.870 --> 00:22:31.650\n&gt;&gt; We will have to put that off for\nanother episode, unfortunately.\n\n346\n00:22:31.650 --> 00:22:35.060\nBut, the answer to that question\nin short is, yes, they do.\n\n347\n00:22:35.060 --> 00:22:39.580\nThey are AND operators, OR operators,\nand NOT operators for Boolean.\n\n348\n00:22:39.580 --> 00:22:42.920\nThey're a bit easier to show when\nwe got to flip control though.\n\n349\n00:22:42.920 --> 00:22:46.550\n&gt;&gt; Now Jacob, I know that we had planned\non getting into functions during this\n\n350\n00:22:46.550 --> 00:22:48.000\nepisode but, you are correct.\n\n351\n00:22:48.000 --> 00:22:50.860\nWe are running a little low on time for\nthis episode,\n\n352\n00:22:50.860 --> 00:22:53.320\nmaybe we'll come back with a part\ntwo to actually cover functions,\n\n353\n00:22:53.320 --> 00:22:58.610\nwhich variables have a bearing on,\nif I'm not mistaken, correct?\n\n354\n00:22:58.610 --> 00:23:00.000\n&gt;&gt; Yes, absolutely.\n\n355\n00:23:00.000 --> 00:23:03.070\nIt's really hard to make a function\nwithout actually using any variables in\n\n356\n00:23:03.070 --> 00:23:04.170\nthat function.\n\n357\n00:23:04.170 --> 00:23:07.860\nSo, stick around, it's probably gonna be\na very useful episode for you to watch.\n\n358\n00:23:07.860 --> 00:23:09.180\n&gt;&gt; All right,\nwell there you have it folks.\n\n359\n00:23:09.180 --> 00:23:12.240\nWe are coming back with a part\ntwo to actually cover functions.\n\n360\n00:23:12.240 --> 00:23:17.050\nHopefully, we'll construct some functions\nand see how variables come into play.\n\n361\n00:23:17.050 --> 00:23:20.590\nBut definitely stay tuned,\nwe got more C++ coming your way.\n\n362\n00:23:20.590 --> 00:23:22.670\nBut for now we're gonna go ahead and\nwrap this one up.\n\n363\n00:23:22.670 --> 00:23:25.880\nSigning off for DevProTv,\nI've been your host Justin Dennison.\n\n364\n00:23:25.880 --> 00:23:26.910\n&gt;&gt; I was Jacob Armstrong.\n\n365\n00:23:26.910 --> 00:23:28.372\n&gt;&gt; And we'll see ya next time.\n\n366\n00:23:28.372 --> 00:23:34.910\n[MUSIC]\n\n",
          "vimeoId": "237614923"
        },
        {
          "description": "In this episode, Justin and Jacob will explore the creation of functions in C++. Jacob also highlights some of the considerations that need to be made when writing functions including parameter types, return types, and naming.",
          "length": "950",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-2-variables_and_functions_pt2-100517.00_19_27_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-2-variables_and_functions_pt2-100517.00_19_27_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocplusplus-1-2-2-variables_and_functions_pt2-100517.00_19_27_08.Still001-sm.jpg",
          "title": "Variables and Functions Pt2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.800 --> 00:00:16.210\nGreetings everyone and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.210 --> 00:00:20.610\nI'm your host Justin Dennison and\nin this episode, well it's a part two,\n\n4\n00:00:20.610 --> 00:00:22.770\nwe started off talking about variables.\n\n5\n00:00:22.770 --> 00:00:25.780\nAnd now we're coming back\nto discuss functions.\n\n6\n00:00:25.780 --> 00:00:27.870\nAnd here to help us along is Mr.\nJacob Armstrong.\n\n7\n00:00:27.870 --> 00:00:29.160\nHow are you doing today Jacob?\n\n8\n00:00:29.160 --> 00:00:30.330\n&gt;&gt; Very good Justin.\n\n9\n00:00:30.330 --> 00:00:31.510\n&gt;&gt; That is always good to hear.\n\n10\n00:00:31.510 --> 00:00:34.460\nNow Jacob, we're coming back\nhere to talk about functions.\n\n11\n00:00:34.460 --> 00:00:36.550\nAnd I know what I think a function is.\n\n12\n00:00:36.550 --> 00:00:39.020\nBut you ask a math person and\nthey say something.\n\n13\n00:00:39.020 --> 00:00:43.850\nYou ask what is a function in some other\nlanguages because it gets a little iffy.\n\n14\n00:00:43.850 --> 00:00:47.280\nIn the context of C++, what is a function?\n\n15\n00:00:47.280 --> 00:00:49.820\n&gt;&gt; Right so\nthe basic way to think of a function\n\n16\n00:00:49.820 --> 00:00:54.880\nis just to as a way to wrap\nup code to use later on.\n\n17\n00:00:54.880 --> 00:00:59.870\nIt does what we call encapsulation,\nwhich is where we take code and\n\n18\n00:00:59.870 --> 00:01:02.580\ninstead of copying and\npasting all in our program.\n\n19\n00:01:02.580 --> 00:01:06.160\nWe just write it once in\none spot as a function.\n\n20\n00:01:06.160 --> 00:01:07.800\nAnd then call that function\nwhenever we need it.\n\n21\n00:01:09.050 --> 00:01:13.390\nSo on my machine we just have\nour old variable project.\n\n22\n00:01:13.390 --> 00:01:18.190\nWe declared a bunch of variables and\nsort of printed them out to the screen.\n\n23\n00:01:19.540 --> 00:01:22.270\nSo let's add a few\nfunctions to this program.\n\n24\n00:01:23.940 --> 00:01:25.980\nWe're gonna start out with a function.\n\n25\n00:01:25.980 --> 00:01:26.930\nAnd to declare a function,\n\n26\n00:01:26.930 --> 00:01:31.640\nyou first have to specify what\ntype that function returns.\n\n27\n00:01:32.682 --> 00:01:38.100\nFunctions inside code, once they are run,\nthey can do what's called a return.\n\n28\n00:01:38.100 --> 00:01:41.430\nWhere they spit a type back out of\nthem once they're finished running\n\n29\n00:01:41.430 --> 00:01:43.890\nwhatever code that's inside of them.\n\n30\n00:01:45.460 --> 00:01:50.190\nSo really the return type can just\nbe whatever variable you can have.\n\n31\n00:01:50.190 --> 00:01:53.290\nFor instance, in our main function\nright here, it returns an int.\n\n32\n00:01:55.400 --> 00:01:56.650\nYou can do whatever you want in functions.\n\n33\n00:01:56.650 --> 00:02:00.790\nYou can have int returns, float returns.\n\n34\n00:02:00.790 --> 00:02:03.010\nIf you want to return nothing\ninside of your function,\n\n35\n00:02:03.010 --> 00:02:04.980\nthat is called a void return.\n\n36\n00:02:06.260 --> 00:02:10.588\nBut just to show you how returning works,\nwe're gonna do a string.\n\n37\n00:02:10.588 --> 00:02:16.332\nSo, std::string\n\n38\n00:02:16.332 --> 00:02:22.070\nReturnHello().\n\n39\n00:02:22.070 --> 00:02:23.310\nSo we did a couple things right here.\n\n40\n00:02:24.400 --> 00:02:26.630\nThis function returns a string.\n\n41\n00:02:28.390 --> 00:02:31.420\nThe function is named ReturnHello.\n\n42\n00:02:31.420 --> 00:02:36.430\nAnd functions names, more or less, follow\nthe same naming conventions as variables.\n\n43\n00:02:36.430 --> 00:02:39.330\nThey can't really start with numbers.\n\n44\n00:02:39.330 --> 00:02:46.780\nBut if you wanna have a lower case r,\ncapital H here or lower case h.\n\n45\n00:02:46.780 --> 00:02:48.330\nThat's also a valid name,\nif you wanna use it.\n\n46\n00:02:50.090 --> 00:02:53.250\nWrite like capital R, capital H.\n\n47\n00:02:53.250 --> 00:02:57.470\nAnd to really specify that this is\na function, you have to use a parenthesis.\n\n48\n00:02:57.470 --> 00:03:01.520\nYou have the open parenthesis and closed\nparenthesis, and then curly brackets.\n\n49\n00:03:04.165 --> 00:03:07.111\nSo whatever happens inside of\nthese curly brackets here,\n\n50\n00:03:07.111 --> 00:03:11.360\nthat is what is going to happen\nwhenever the function actually runs.\n\n51\n00:03:11.360 --> 00:03:15.310\nSo, all this function is going\nto do is return a string, right?\n\n52\n00:03:15.310 --> 00:03:21.879\nSo to specify what you wanna return,\nuse the key word return.\n\n53\n00:03:21.879 --> 00:03:26.510\nAnd then,\njust give it something to return.\n\n54\n00:03:26.510 --> 00:03:31.390\nI'm gonna just create a string here,\nusing double quotes, below.\n\n55\n00:03:32.820 --> 00:03:34.780\nAnd then semicolon to end that off.\n\n56\n00:03:36.080 --> 00:03:38.410\nSo wherever in our code\nwe call this function,\n\n57\n00:03:38.410 --> 00:03:40.810\nit's gonna spit back\nout the string \"Hello\".\n\n58\n00:03:44.150 --> 00:03:45.690\nSo down here inside of our main method,\n\n59\n00:03:45.690 --> 00:03:49.290\nwhich is what runs whenever\nthe program starts.\n\n60\n00:03:49.290 --> 00:03:54.040\nInstead of sending our integer\nvariable to cout, console out.\n\n61\n00:03:54.040 --> 00:03:57.640\nWe're gonna send in the return\nvalue of our function.\n\n62\n00:03:57.640 --> 00:04:00.790\nSo to call a function you just\ntype in the name of the function,\n\n63\n00:04:02.380 --> 00:04:03.640\nin this case ReturnHello.\n\n64\n00:04:03.640 --> 00:04:07.490\nAnd then you use parenthesis\nto actually do the calling.\n\n65\n00:04:08.860 --> 00:04:15.480\nAnd if we were to run this on the console,\nwe should get Hello printed out.\n\n66\n00:04:17.030 --> 00:04:19.675\n&gt;&gt; Now, Jacob,\nlet me butt-in here just a little bit.\n\n67\n00:04:19.675 --> 00:04:24.030\nI've noticed that you came above the main\nmethod there to declare that function.\n\n68\n00:04:24.030 --> 00:04:28.160\nIs there some kind of special reason for\nthat?\n\n69\n00:04:28.160 --> 00:04:30.820\nOr is it just because that's\nhow you write your code?\n\n70\n00:04:30.820 --> 00:04:34.960\n&gt;&gt; There is actually a special reason for\nthis, and it is actually really important.\n\n71\n00:04:34.960 --> 00:04:40.230\nWhenever the compiler runs,\nit has to know what functions do\n\n72\n00:04:40.230 --> 00:04:42.810\nbefore it can actually call\nthem inside the main method.\n\n73\n00:04:42.810 --> 00:04:47.900\nSo if I were to cut and paste\nthe ReturnHello function below main and\n\n74\n00:04:49.020 --> 00:04:52.619\ntry to compile, it's gonna give me errors.\n\n75\n00:04:54.230 --> 00:04:57.220\nThat's because what's\nhappening is the compiler\n\n76\n00:04:58.600 --> 00:05:01.830\nfinds this ReturnHello\nfunction being called here.\n\n77\n00:05:01.830 --> 00:05:06.120\nBut it hasn't yet gotten to the point\nwhere ReturnHello is actually defined.\n\n78\n00:05:07.370 --> 00:05:10.270\nSo, it looks for a name, but it just\ndoesn't find it, the name's down here.\n\n79\n00:05:11.848 --> 00:05:16.830\nSo we have to actually declare\na function above where we use it.\n\n80\n00:05:21.767 --> 00:05:24.157\nNow I will say that declaring\na function name and\n\n81\n00:05:24.157 --> 00:05:29.060\nactually writing the implementation of\nthat function are two different things.\n\n82\n00:05:29.060 --> 00:05:31.420\nSo, we'll get into\nthe details of that later.\n\n83\n00:05:31.420 --> 00:05:34.620\nBut, right now, just know that you do\nhave to declare a function before you can\n\n84\n00:05:34.620 --> 00:05:37.648\nactually use it anywhere in your code.\n\n85\n00:05:37.648 --> 00:05:42.920\nSo this ReturnHello\nfunction returns a string.\n\n86\n00:05:45.200 --> 00:05:48.480\nAnd if we want, we can just call\nthis really anywhere in our code.\n\n87\n00:05:48.480 --> 00:05:53.930\nWe can call it after we send\na Hello string to cout,\n\n88\n00:05:53.930 --> 00:05:59.700\nyou can just call ReturnHello here.\n\n89\n00:05:59.700 --> 00:06:02.020\nAnd that doesn't do anything,\nbut it still works.\n\n90\n00:06:02.020 --> 00:06:04.810\nIt will just return a string, but\nthat string doesn't really go anywhere.\n\n91\n00:06:06.868 --> 00:06:11.240\nIf we're gonna actually\nuse one of the variables\n\n92\n00:06:11.240 --> 00:06:12.700\nin our main method in a function.\n\n93\n00:06:12.700 --> 00:06:15.312\nWe have to do what is called\npassing in a parameter.\n\n94\n00:06:15.312 --> 00:06:21.020\nSo functions can take either no,\n\n95\n00:06:21.020 --> 00:06:26.380\nzero, or more variables inside of them\nto use within the function itself.\n\n96\n00:06:26.380 --> 00:06:27.400\nThese are called parameters.\n\n97\n00:06:27.400 --> 00:06:29.490\nAnd I'm just gonna write\na new function here.\n\n98\n00:06:29.490 --> 00:06:32.668\nThis function is gonna be void\nit has a void return type,\n\n99\n00:06:32.668 --> 00:06:37.000\nwhich means that it won't return anything,\nbecause we don't need it to.\n\n100\n00:06:37.000 --> 00:06:39.370\nAnd then let's call this\nPrintStringToConsole.\n\n101\n00:06:41.070 --> 00:06:48.130\nAnd what this is gonna do is we're gonna\npass in a string to this function.\n\n102\n00:06:48.130 --> 00:06:50.910\nAnd then we're gonna take that string and\njust toss it out into the console.\n\n103\n00:06:52.250 --> 00:06:57.710\nTo do that, inside the parenthesis here,\nwe are gonna write a new string variable.\n\n104\n00:07:00.250 --> 00:07:08.766\nStandard string, we're gonna call\nthis variable, StringToPrint.\n\n105\n00:07:08.766 --> 00:07:12.390\nThis is a parameter.\n\n106\n00:07:12.390 --> 00:07:17.250\nIn case you're doing a programming\ninterview, the technical word for\n\n107\n00:07:17.250 --> 00:07:21.040\nthis in the function declaration\nis called a formal parameter.\n\n108\n00:07:21.040 --> 00:07:24.850\nIt's what the function formally asks for\nwhenever it is called.\n\n109\n00:07:27.490 --> 00:07:30.995\nAnd what this will do\nis go to standard cout.\n\n110\n00:07:33.218 --> 00:07:36.631\nWe are gonna type in the StringToPrint,\nand\n\n111\n00:07:36.631 --> 00:07:39.777\nthen we are going to write in an end line.\n\n112\n00:07:46.608 --> 00:07:50.342\nAnd we don't really need\nany more of these here,\n\n113\n00:07:50.342 --> 00:07:53.860\nall these old console training things.\n\n114\n00:07:53.860 --> 00:07:55.489\nCuz we're just gonna use\nthe function from here on out.\n\n115\n00:07:57.605 --> 00:07:59.850\nSo let's call that function, then.\n\n116\n00:07:59.850 --> 00:08:03.717\nYou already have a string variable up\nhere, so we're gonna be using that.\n\n117\n00:08:06.465 --> 00:08:12.990\nPrintStringToConsole, we're gonna\npass in the string variable.\n\n118\n00:08:12.990 --> 00:08:18.430\nSo, in this case, string is what\nwe call an actual parameter.\n\n119\n00:08:18.430 --> 00:08:21.200\nIt's what were actually\npassing in the function.\n\n120\n00:08:21.200 --> 00:08:26.300\nOnce again, up here in the declaration,\nthe formal parameter and\n\n121\n00:08:26.300 --> 00:08:29.969\ndown at below, actual parameter.\n\n122\n00:08:29.969 --> 00:08:33.392\nSo, once we run the program,\nactually, wait, yeah, never mind.\n\n123\n00:08:35.840 --> 00:08:38.160\nPrints out Hello World, as you expect.\n\n124\n00:08:42.155 --> 00:08:45.960\n&gt;&gt; Now Jacob,\nI've been thinking about this.\n\n125\n00:08:45.960 --> 00:08:50.020\nSo we have PrintStringToConsole here,\nright?\n\n126\n00:08:50.020 --> 00:08:53.880\nWhat if it was just like print to console?\n\n127\n00:08:53.880 --> 00:08:58.440\nAnd I wanted to reuse that, cuz this is\na string, could I then pass an integer or\n\n128\n00:08:58.440 --> 00:09:00.720\nam I limited at this point?\n\n129\n00:09:00.720 --> 00:09:03.460\n&gt;&gt; That's a good question.\n\n130\n00:09:03.460 --> 00:09:08.340\nThere is something called function\noverloading where you can create\n\n131\n00:09:08.340 --> 00:09:13.680\nmultiple functions of the same name but\nhave different formal parameters on them.\n\n132\n00:09:13.680 --> 00:09:16.430\nAnd whenever you pass in\nthe actual parameter, it actually\n\n133\n00:09:16.430 --> 00:09:21.910\nchooses the function with the correct, or\nappropriate formal parameter on it to use.\n\n134\n00:09:21.910 --> 00:09:26.030\nSo, this function,\nwe called it PrintStringToConsole.\n\n135\n00:09:26.030 --> 00:09:30.673\nLet's actually instead rename\nthis just to PrintToConsole.\n\n136\n00:09:30.673 --> 00:09:34.840\nAnd this is gonna be the PrintToConsole\nthat accepts a string.\n\n137\n00:09:37.340 --> 00:09:44.860\nNow if we write, well copy this,\nanother PrintToConsole function.\n\n138\n00:09:44.860 --> 00:09:50.560\nBut instead of a string,\nit's going to pass an integer.\n\n139\n00:09:50.560 --> 00:09:53.700\nIt's gonna ask for\nan integer whenever it's called.\n\n140\n00:09:53.700 --> 00:09:56.900\nLet's rename this variable just for\nclarity sake.\n\n141\n00:09:56.900 --> 00:10:02.100\nInstead of StringToPrint,\nit will be called, IntegerToPrint.\n\n142\n00:10:03.800 --> 00:10:05.670\nAnd we'll have to rename it\nin the function body too.\n\n143\n00:10:12.874 --> 00:10:17.183\nSo yeah, our old function name here,\nPrintStringToConsole,\n\n144\n00:10:17.183 --> 00:10:20.710\nthat doesn't exist anymore\nbecause we changed it.\n\n145\n00:10:20.710 --> 00:10:23.196\nNow, it's just a regular old,\nPrintToConsole that accepts a string.\n\n146\n00:10:23.196 --> 00:10:32.124\nAnd, if you wanna write\na PrintToConsole that accepts integer.\n\n147\n00:10:33.994 --> 00:10:35.380\nDo the same thing, it takes the integer.\n\n148\n00:10:35.380 --> 00:10:38.820\nNow we do have the integer\nvariable already created here.\n\n149\n00:10:38.820 --> 00:10:42.380\nThat's set to 1, and\nthen I believe it winds up being 7,\n\n150\n00:10:42.380 --> 00:10:44.330\nwe remember from last episode.\n\n151\n00:10:45.450 --> 00:10:46.760\nBut instead of actually passing that in,\n\n152\n00:10:46.760 --> 00:10:49.694\nwe're just gonna pass in a integer\nthat we declare, say, 50.\n\n153\n00:10:54.074 --> 00:10:59.700\nAnd so, once we've run the program,\nwe should print Hello World and then 50.\n\n154\n00:10:59.700 --> 00:11:03.410\nAnd this is one of the stronger\nthings you can use.\n\n155\n00:11:03.410 --> 00:11:06.360\nOne of the most powerful\nfeatures of functions.\n\n156\n00:11:06.360 --> 00:11:11.590\nYou can just write the actual logic\nonce and then use it anywhere you want.\n\n157\n00:11:11.590 --> 00:11:20.424\nSo if I want to say\nPrintToConsole \"I love functions!\"\n\n158\n00:11:23.489 --> 00:11:27.110\nIt'll do the same thing, it'll just\nhave the functionality that we need.\n\n159\n00:11:27.110 --> 00:11:29.340\nWe don't need to pipe anything\ninto the console out.\n\n160\n00:11:29.340 --> 00:11:31.249\nThe function just handles that for us.\n\n161\n00:11:32.860 --> 00:11:35.280\n&gt;&gt; So does this mean that I have to\n\n162\n00:11:35.280 --> 00:11:37.630\nhave different data types if I\nwanna use the same function?\n\n163\n00:11:37.630 --> 00:11:40.180\nLike print seems to be\na pretty obvious thing.\n\n164\n00:11:40.180 --> 00:11:44.110\nI'm gonna wrap all this print\nlogic into a function, reuse it.\n\n165\n00:11:44.110 --> 00:11:46.247\nBut do I have to declare\nmultiple times for\n\n166\n00:11:46.247 --> 00:11:48.390\nall the data types that\nI wanna use it for?\n\n167\n00:11:50.650 --> 00:11:53.770\nOr am I getting ahead of\nourselves a little bit.\n\n168\n00:11:53.770 --> 00:11:57.880\n&gt;&gt; You do need to have\nseparate variable names for\n\n169\n00:11:57.880 --> 00:12:00.100\neach of your overloaded functions.\n\n170\n00:12:00.100 --> 00:12:03.958\nYou do need to be aware\nof implicit casting C++.\n\n171\n00:12:03.958 --> 00:12:11.470\nSay, we have a function that\naccept an integer value.\n\n172\n00:12:11.470 --> 00:12:14.372\nBut, what if we tried to pass\nin a floating variable to that?\n\n173\n00:12:14.372 --> 00:12:22.328\nSo, PrintToConsole, 1.05.\n\n174\n00:12:26.190 --> 00:12:29.030\nThe C++ compiler will accept this.\n\n175\n00:12:29.030 --> 00:12:30.275\nWhen it actually runs,\n\n176\n00:12:30.275 --> 00:12:35.560\n0.5 will be converted from I\nbelieve it's actually a double.\n\n177\n00:12:35.560 --> 00:12:40.140\nDouble is default value for\nfloating point numbers to an integer.\n\n178\n00:12:40.140 --> 00:12:41.918\nAnd it's gonna lose this 0.5,\n\n179\n00:12:41.918 --> 00:12:44.750\nbecause integers don't have\ndecimal points on them.\n\n180\n00:12:46.180 --> 00:12:47.640\nIf we run the program, yeah.\n\n181\n00:12:49.100 --> 00:12:52.609\nSee here, that 0.5 gets converted to a 1,\nit gets rounded down.\n\n182\n00:12:56.199 --> 00:13:00.437\nSo, if we actually do want to use\nfunctions that use doubles though,\n\n183\n00:13:00.437 --> 00:13:06.470\nI wanna show you how you can actually have\na separate logic for separate functions.\n\n184\n00:13:06.470 --> 00:13:11.565\nvoid PrintToConsole,\nit's gonna take in a double.\n\n185\n00:13:11.565 --> 00:13:16.522\nDouble precision floating point number.\n\n186\n00:13:16.522 --> 00:13:18.230\nI'm gonna call this our DoubleToPrint.\n\n187\n00:13:19.850 --> 00:13:25.030\nNow before,\nin our variable episode, we had\n\n188\n00:13:27.240 --> 00:13:32.820\na little command on there where\nwe piped into the console out.\n\n189\n00:13:32.820 --> 00:13:39.590\nA standard fixed variable,\nwhat that did was ensure that double and\n\n190\n00:13:39.590 --> 00:13:44.550\nfloating point numbers were displayed\nto their maximum precision.\n\n191\n00:13:46.610 --> 00:13:52.140\nSo for DoubleToPrint here,\nI'll just do a regular, old standard cout.\n\n192\n00:13:55.350 --> 00:13:59.816\nAnd then pass in a DoubleToPrint.\n\n193\n00:13:59.816 --> 00:14:07.014\nWe'll try to print in\na number like 1234.000005.\n\n194\n00:14:07.014 --> 00:14:11.936\nAnd now this PrintToConsole will\n\n195\n00:14:11.936 --> 00:14:17.209\nbe overloaded with a double value,\n\n196\n00:14:17.209 --> 00:14:22.319\nso it will actually get passed in.\n\n197\n00:14:22.319 --> 00:14:27.074\nIf set to 1234, so\nby default, you're cout won't\n\n198\n00:14:27.074 --> 00:14:31.740\nactually have the highest\nprecision displayed on it.\n\n199\n00:14:31.740 --> 00:14:34.460\nIt's just something that\ncout does by itself.\n\n200\n00:14:34.460 --> 00:14:37.570\nWhat we can do actually\nwith this special case\n\n201\n00:14:37.570 --> 00:14:41.968\nof our double PrintToConsole function.\n\n202\n00:14:41.968 --> 00:14:46.277\nWe can also include a standard cout.\n\n203\n00:14:46.277 --> 00:14:50.320\nAnd then pass in our\nstandard fixed variable,\n\n204\n00:14:50.320 --> 00:14:52.900\nand that will fix the problem for us.\n\n205\n00:14:54.360 --> 00:14:55.910\nOn the command line.\n\n206\n00:14:55.910 --> 00:14:58.080\nNow we have the maximum\nprecision available for us.\n\n207\n00:14:58.080 --> 00:15:02.891\nThis is just to demonstrate that you can\nalso have functions that handle their\n\n208\n00:15:02.891 --> 00:15:07.786\nvariables, their formal parameters in\nspecified ways, in different ways.\n\n209\n00:15:10.982 --> 00:15:14.570\nAnd yeah, that's more or\nless some of the power of functions.\n\n210\n00:15:14.570 --> 00:15:16.960\nAnd they're very,\nvery important in programming.\n\n211\n00:15:16.960 --> 00:15:19.760\nYou'll probably use them\na lot in your programs.\n\n212\n00:15:19.760 --> 00:15:22.560\nBut I think that's all we\nneed to cover for today.\n\n213\n00:15:22.560 --> 00:15:26.450\n&gt;&gt; Well, I know that Jacob has in store\nbecause we're not done with functions.\n\n214\n00:15:26.450 --> 00:15:28.890\nBut this is a good primer on functions.\n\n215\n00:15:28.890 --> 00:15:31.890\nAnd well they definitely\ntie closely into variables.\n\n216\n00:15:31.890 --> 00:15:35.100\nBut it does look like we're gonna\ngo ahead and wrap this one up.\n\n217\n00:15:35.100 --> 00:15:38.180\nBut definitely stay tuned,\nwe've got more C++ coming at ya.\n\n218\n00:15:38.180 --> 00:15:42.010\nBut for now, signing off for ITProTV,\nI've been your host Justin Dennison.\n\n219\n00:15:42.010 --> 00:15:43.050\n&gt;&gt; I'm Jacob Armstrong.\n\n220\n00:15:43.050 --> 00:15:44.816\n&gt;&gt; And we'll see ya next time.\n\n221\n00:15:44.816 --> 00:15:50.299\n[MUSIC]\n\n",
          "vimeoId": "237591287"
        },
        {
          "description": "In this episode, we will go over classes, objects, and some ways to use them.",
          "length": "1580",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-3-1-classes-101217-PGM.00_26_08_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-3-1-classes-101217-PGM.00_26_08_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-3-1-classes-101217-PGM.00_26_08_22.Still001-sm.jpg",
          "title": "Classes",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.653 --> 00:00:16.435\nGreetings, everyone, and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.435 --> 00:00:17.870\nI'm your host Justin Dennison.\n\n4\n00:00:17.870 --> 00:00:19.980\nAnd we're back with more intro to C++.\n\n5\n00:00:19.980 --> 00:00:22.160\nAnd I am stoked about this series.\n\n6\n00:00:22.160 --> 00:00:26.110\nIn particular, we're gonna be\ntalking about classes today and\n\n7\n00:00:26.110 --> 00:00:30.110\nwell, if any of you have\neducational kind of scared.\n\n8\n00:00:30.110 --> 00:00:33.064\nNo, we're not gonna sit you in desk and\nput you in rows, and\n\n9\n00:00:33.064 --> 00:00:35.206\nhand out test, at least I don't think so.\n\n10\n00:00:35.206 --> 00:00:39.795\nBut luckily, we have someone in the studio\nthat knows all about C++ classes.\n\n11\n00:00:39.795 --> 00:00:41.490\nMr. Jacob Armstrong,\nhow you doing today, Jacob?\n\n12\n00:00:41.490 --> 00:00:42.540\n&gt;&gt; Very good, Justin.\n\n13\n00:00:42.540 --> 00:00:46.510\nAnd very excited because classes\nare a very important part of C++.\n\n14\n00:00:46.510 --> 00:00:49.010\n&gt;&gt; Well, that is something\nthat we're here to talk about.\n\n15\n00:00:49.010 --> 00:00:51.280\nBut I do have a first question for\nyou, Jacob.\n\n16\n00:00:52.370 --> 00:00:53.428\nWhat is a class?\n\n17\n00:00:53.428 --> 00:00:55.475\nI don't know [SOUND].\n\n18\n00:00:55.475 --> 00:01:00.298\n&gt;&gt; [LAUGH] Right, so I'm not gonna\ngo into the details about the low\n\n19\n00:01:00.298 --> 00:01:03.790\nlevel implementations of classes in C++.\n\n20\n00:01:03.790 --> 00:01:10.060\nBut I will say that they are sort of\na template for defining your program.\n\n21\n00:01:11.270 --> 00:01:15.770\nIt's a way of organizing your program,\nrather.\n\n22\n00:01:15.770 --> 00:01:20.765\nYou can create a class and\nput implementation of programmatic\n\n23\n00:01:20.765 --> 00:01:25.470\ndata into there and\nthen create objects of that class, and\n\n24\n00:01:25.470 --> 00:01:29.039\nuse those objects in\nyour logic as you go on.\n\n25\n00:01:29.039 --> 00:01:36.076\nSo, rather than just explaining it as is,\nlet's look at my machine and go from here.\n\n26\n00:01:36.076 --> 00:01:40.290\nSo first things first,\nhow do we create a class?\n\n27\n00:01:40.290 --> 00:01:42.160\nWell, it's actually really simple.\n\n28\n00:01:42.160 --> 00:01:44.820\nFirst, you just type in\nthe keyword class and\n\n29\n00:01:44.820 --> 00:01:48.050\nthis lets the compiler know that\nyou're going to create a new class.\n\n30\n00:01:48.050 --> 00:01:49.940\nAnd then you can name your class.\n\n31\n00:01:49.940 --> 00:01:54.070\nIt follows the same in conventions\nas functions and variables, but\n\n32\n00:01:54.070 --> 00:01:57.101\nI do need to mention that when you\nname a class, it's fairly important.\n\n33\n00:01:59.580 --> 00:02:02.290\nYou should name it\nsomething that makes sense.\n\n34\n00:02:02.290 --> 00:02:07.310\nSomething that is relative to the objects\nthat you create from that class.\n\n35\n00:02:07.310 --> 00:02:11.060\nSo you wanna create wheel objects,\nyou're gonna wanna name your class, wheel.\n\n36\n00:02:11.060 --> 00:02:14.650\nYou wanna create car objects,\nyou wanna name your class car, etc.\n\n37\n00:02:15.970 --> 00:02:19.670\nIn this case, we're going to sort of\npretend like we're making a video game.\n\n38\n00:02:19.670 --> 00:02:21.570\nLet's name a class, monster.\n\n39\n00:02:21.570 --> 00:02:24.610\nWe're gonna have a monster class for\nour players to fight.\n\n40\n00:02:26.010 --> 00:02:29.230\n&gt;&gt; So we can think of this as\nalmost like a get-cutter, right?\n\n41\n00:02:29.230 --> 00:02:30.310\nLike the little stamp.\n\n42\n00:02:30.310 --> 00:02:33.040\nIf I have a star cookie cutter.\n\n43\n00:02:33.040 --> 00:02:35.370\nI stamp out individual cookies.\n\n44\n00:02:35.370 --> 00:02:39.250\nIs that what you mean effectively\nas an analogy for objects?\n\n45\n00:02:39.250 --> 00:02:40.860\n&gt;&gt; Yeah, right.\n\n46\n00:02:40.860 --> 00:02:44.630\nSo objects are the cookies\nthat the class cuts out.\n\n47\n00:02:46.010 --> 00:02:49.440\nYou define all the chocolate chips and\nsugars and\n\n48\n00:02:49.440 --> 00:02:54.900\nraisins in your cookies which are more or\nless variables and functions.\n\n49\n00:02:54.900 --> 00:02:57.160\nI did say functions right there.\n\n50\n00:02:57.160 --> 00:03:00.540\nA function side of the class\nis not called a function.\n\n51\n00:03:00.540 --> 00:03:01.890\nTechnically speaking, it is a method.\n\n52\n00:03:03.100 --> 00:03:08.180\nFunctions sub classes are methods and I'll\ntry to use that terminology as we go on.\n\n53\n00:03:08.180 --> 00:03:08.840\nThat's right.\n\n54\n00:03:08.840 --> 00:03:10.490\nWe have a class here.\n\n55\n00:03:10.490 --> 00:03:11.830\nIt's name is monster and\n\n56\n00:03:11.830 --> 00:03:15.990\nyou'll notice in Visual Studio,\nit is colored a little bit off.\n\n57\n00:03:15.990 --> 00:03:17.720\nIt's a sort of teal color.\n\n58\n00:03:17.720 --> 00:03:20.380\nIt just signifies that's\na new class that we create.\n\n59\n00:03:20.380 --> 00:03:24.160\nSo now we define the body of\nthe class using curly braces, and\n\n60\n00:03:24.160 --> 00:03:28.380\nVisual Studio is kind enough to\nauto-correct with a beginning curly brace,\n\n61\n00:03:28.380 --> 00:03:32.320\nan end curly brace, and\na semicolon at the end too, in the class.\n\n62\n00:03:32.320 --> 00:03:34.960\nAnd that's all I need to\ndo to create a class.\n\n63\n00:03:34.960 --> 00:03:37.400\nNow we have a new monster class.\n\n64\n00:03:37.400 --> 00:03:38.581\nLesson's over.\n\n65\n00:03:38.581 --> 00:03:43.346\n&gt;&gt; [LAUGH] I was starting to say, I feel\nlike there's more to it than that, Jacob,\n\n66\n00:03:43.346 --> 00:03:45.020\nbut is it really that easy?\n\n67\n00:03:45.020 --> 00:03:48.452\nCan this class do anything, or\nis it just one of those formalities,\n\n68\n00:03:48.452 --> 00:03:52.030\ntechnically we've completed a class,\nor is there more to it?\n\n69\n00:03:52.030 --> 00:03:55.530\n&gt;&gt; Yeah,\nit is definitely a formality right now.\n\n70\n00:03:55.530 --> 00:03:58.701\nWe do have a class and\nwe can create new objects of this class.\n\n71\n00:03:58.701 --> 00:04:03.500\nTo demonstrate,\nI will create a monster object.\n\n72\n00:04:03.500 --> 00:04:07.460\nYou do that by defining the monster\nclass here, and then give it a name.\n\n73\n00:04:07.460 --> 00:04:09.449\nLet's just call this one MyMonster.\n\n74\n00:04:12.000 --> 00:04:18.041\nAnd there we have it, a monster object\nready for us to use as much as we want.\n\n75\n00:04:18.041 --> 00:04:22.030\nAnd we can create like as many\nobjects of this class as we want.\n\n76\n00:04:22.030 --> 00:04:29.030\nSo Monster Monster2, 3, 4,\nwhatever, it doesn't really matter.\n\n77\n00:04:29.030 --> 00:04:33.540\nWe can just cut off more cookies as you\nwill, using this class cookie cutter.\n\n78\n00:04:35.550 --> 00:04:37.740\nSo let's add some data to this class.\n\n79\n00:04:39.170 --> 00:04:42.060\nLet's say in our video game,\nmonsters have height.\n\n80\n00:04:43.340 --> 00:04:47.160\nSo let's add that,\nmake an integer int height.\n\n81\n00:04:49.260 --> 00:04:51.140\nAnd now that our monster\nclass says height,\n\n82\n00:04:51.140 --> 00:04:54.550\nwe can change that value\ninside of our main function.\n\n83\n00:04:56.350 --> 00:05:00.540\nJust doing a MyMonster,\nusing a period here.\n\n84\n00:05:00.540 --> 00:05:05.470\nThe period is a special operator\nthat looks inside a class's value,\n\n85\n00:05:05.470 --> 00:05:07.600\nand then pulls information out of it.\n\n86\n00:05:07.600 --> 00:05:13.202\nIn this case we're pulling the height\ndata from our monster object.\n\n87\n00:05:13.202 --> 00:05:18.647\nSo MyMonster.Height,\nit's said to be equal to ten right now.\n\n88\n00:05:22.477 --> 00:05:24.550\nAnd I might've messed up\na little bit right here.\n\n89\n00:05:24.550 --> 00:05:30.160\nActually, we can't set the height because\nthe height of this class isn't public.\n\n90\n00:05:30.160 --> 00:05:32.740\nWe haven't actually\ntalked about this before.\n\n91\n00:05:32.740 --> 00:05:35.790\nThere are things in C++\ncalled access modifiers.\n\n92\n00:05:35.790 --> 00:05:40.620\nThey change how you can access\nthe information inside of classes.\n\n93\n00:05:41.890 --> 00:05:47.580\nBy default, variables and methods\ninside of classes are set to private,\n\n94\n00:05:47.580 --> 00:05:52.770\nwhich means that they can only be called,\naccessed,\n\n95\n00:05:52.770 --> 00:05:58.169\nmodified within the class itself and the\nobjects that are derived from that class.\n\n96\n00:05:59.280 --> 00:06:02.140\n&gt;&gt; So right now,\nour int height is private.\n\n97\n00:06:04.660 --> 00:06:05.700\nIf we ever want to change this,\n\n98\n00:06:05.700 --> 00:06:08.360\nwe'd have to ask the monster\nobjects to change it themselves.\n\n99\n00:06:10.250 --> 00:06:14.220\nTo access a variable or method or call or\n\n100\n00:06:14.220 --> 00:06:20.880\nwhatever anywhere in your code, you\nspecify your access modifier to be public.\n\n101\n00:06:20.880 --> 00:06:24.910\nDoing that by typing in the keyword\npublic and then a colon.\n\n102\n00:06:26.560 --> 00:06:30.946\nAnd now our integer height is public, and\n\n103\n00:06:30.946 --> 00:06:34.842\nwe can change this wherever we want.\n\n104\n00:06:34.842 --> 00:06:38.365\nIt actually thinks it's\ninaccessible right now.\n\n105\n00:06:38.365 --> 00:06:40.513\nThat was just the compiler\nmessing up in Visual Studio.\n\n106\n00:06:40.513 --> 00:06:44.110\nIt took a while to think about it and\nrealize that it's actually okay.\n\n107\n00:06:44.110 --> 00:06:48.830\nAnd now that height is public, we can\naccess it inside of the main function.\n\n108\n00:06:48.830 --> 00:06:51.018\nAnd print it out the console really quick.\n\n109\n00:06:51.018 --> 00:06:53.447\nI'm just gonna import V and\nput output the library.\n\n110\n00:06:57.321 --> 00:07:01.391\nIncluding input output stream, and\n\n111\n00:07:01.391 --> 00:07:07.171\nthen doing a simple,\nat the console standard C out.\n\n112\n00:07:07.171 --> 00:07:14.029\nType in MyMonster.Height.\n\n113\n00:07:14.029 --> 00:07:17.473\nTyping in a end line and\n\n114\n00:07:17.473 --> 00:07:22.556\nthen doing a standard CN ignore.\n\n115\n00:07:22.556 --> 00:07:28.106\nAnd actually, I wanna show you\nsomething here, first our standard\n\n116\n00:07:28.106 --> 00:07:33.410\nCN also uses dot operator and then we\ncall the ignore method inside of CN.\n\n117\n00:07:34.940 --> 00:07:38.183\nCN is actually an object in itself,\n\n118\n00:07:38.183 --> 00:07:42.949\nand we are calling the ignore\nmethod on that object.\n\n119\n00:07:42.949 --> 00:07:49.442\nSo classes are, as you can see classes are\nused everywhere in the standard library.\n\n120\n00:07:49.442 --> 00:07:55.531\nAnd if we print out our height\nvariable on our monster object,\n\n121\n00:07:55.531 --> 00:07:58.587\nwe should get ten as expected.\n\n122\n00:07:58.587 --> 00:08:00.424\nNow Jacob, I do have a quick question.\n\n123\n00:08:00.424 --> 00:08:03.520\nWe're talking about access modifiers\nhere and we have that public.\n\n124\n00:08:03.520 --> 00:08:07.350\nAnd if anybody's from another language,\nwe're not necessarily assuming that you've\n\n125\n00:08:07.350 --> 00:08:08.770\never programmed before as\nan introduction to the series.\n\n126\n00:08:08.770 --> 00:08:12.850\nBut just in case you are, this seems\nto be a little bit different than some\n\n127\n00:08:12.850 --> 00:08:16.960\nother languages that I've seen how\nthey describe the access modifier for\n\n128\n00:08:16.960 --> 00:08:20.310\na particular field or\nanything of that nature.\n\n129\n00:08:20.310 --> 00:08:24.490\nDoes this seem to be, like C++\nalways use this access modifier and\n\n130\n00:08:24.490 --> 00:08:28.970\nthen this indented block to say,\nhere's a list of things that are public?\n\n131\n00:08:28.970 --> 00:08:30.760\n&gt;&gt; Yeah, you're right.\n\n132\n00:08:30.760 --> 00:08:34.450\nOnce we define the public\nblock as it were,\n\n133\n00:08:34.450 --> 00:08:39.370\neverything below this public colon\nis gonna be a public variable.\n\n134\n00:08:39.370 --> 00:08:44.290\nSo if you want to make an integer weight,\nthat's also gonna be public.\n\n135\n00:08:44.290 --> 00:08:48.617\nIf you want to put a method under this,\nit'll be a public method and\n\n136\n00:08:48.617 --> 00:08:51.959\nthen we call that method\nanywhere else in the code.\n\n137\n00:08:51.959 --> 00:08:55.985\nI will also say that there are 3\ndifferent kinds of access modifiers.\n\n138\n00:08:55.985 --> 00:09:00.820\nWe covered private and public already,\nthere is a 3rd and it's called protected.\n\n139\n00:09:00.820 --> 00:09:05.822\nProtected is basically the same\nas a private, except that\n\n140\n00:09:05.822 --> 00:09:12.675\nchild classes of the parent class can\nalso access those variables and methods.\n\n141\n00:09:12.675 --> 00:09:15.587\nWe'll talk about child classes later,\nbut for now,\n\n142\n00:09:15.587 --> 00:09:18.370\nthat's just what that\naccess modifier does.\n\n143\n00:09:18.370 --> 00:09:21.870\n&gt;&gt; So we just need to take on a leap\nof faith that child classes or\n\n144\n00:09:21.870 --> 00:09:26.600\nsomething, and they're somehow\nrelated to a class itself, right?\n\n145\n00:09:26.600 --> 00:09:28.600\n&gt;&gt; Yes, and again, we'll cover that later.\n\n146\n00:09:29.920 --> 00:09:33.560\nSo we have a public integer height.\n\n147\n00:09:33.560 --> 00:09:37.550\nLet's say we also wanna\nhave a integer strength.\n\n148\n00:09:37.550 --> 00:09:38.930\nAnd we'll make this strength private.\n\n149\n00:09:40.710 --> 00:09:45.042\nWe can do that specifying a new\nprivate block in our C++ class.\n\n150\n00:09:47.488 --> 00:09:50.248\nAnd strength will be integer as well.\n\n151\n00:09:54.119 --> 00:09:55.360\nSo here we go.\n\n152\n00:09:55.360 --> 00:10:00.520\nAnd generally speaking, it's gonna be\na best practice to sort of encapsulate and\n\n153\n00:10:00.520 --> 00:10:05.640\nhide as many details of your\nclass as an object as possible.\n\n154\n00:10:05.640 --> 00:10:06.760\nAnd I'll show you why,\n\n155\n00:10:06.760 --> 00:10:11.470\nbut having everything be public can\nintroduce a few bugs in your code.\n\n156\n00:10:11.470 --> 00:10:15.350\nSo, best case is just to make\neverything private that you can.\n\n157\n00:10:15.350 --> 00:10:18.310\nFor instance, our strength variable.\n\n158\n00:10:18.310 --> 00:10:22.410\nSo it's private and\nwe can't actually modify it directly,\n\n159\n00:10:22.410 --> 00:10:26.760\nso how do we do anything with it?\n\n160\n00:10:27.800 --> 00:10:32.840\nThe answer is to add public\nmethods to your objects and\n\n161\n00:10:32.840 --> 00:10:38.190\nthen use those public methods to interact\nwith the underlying data of that object.\n\n162\n00:10:38.190 --> 00:10:40.800\nSo let's make a public method.\n\n163\n00:10:42.140 --> 00:10:45.210\nIt's gonna be return nothing,\nso it's gonna be void.\n\n164\n00:10:45.210 --> 00:10:47.620\nLet's call this method\ninitializedStrength.\n\n165\n00:10:47.620 --> 00:10:53.597\nWe're not gonna pass anything\ninto InitalizedStrength.\n\n166\n00:10:56.855 --> 00:11:01.895\nAnd what this method will do,\nis we're going to\n\n167\n00:11:01.895 --> 00:11:06.935\nbe setting these strength\nof monster objects to\n\n168\n00:11:06.935 --> 00:11:11.880\nbe equal to the height\nof the object times ten.\n\n169\n00:11:11.880 --> 00:11:15.113\nSo the taller a monster is,\nthe more strength it has.\n\n170\n00:11:18.216 --> 00:11:21.500\nNow that's all well and good for\ninitializing the strength value.\n\n171\n00:11:21.500 --> 00:11:23.844\nBut, what do we do if we want to actually\nget the strength of this object?\n\n172\n00:11:23.844 --> 00:11:27.830\nWell, we're going to do\nsomething called a gidder.\n\n173\n00:11:27.830 --> 00:11:31.670\nThis isn't really enforced in C++, but\nit is more or less an industry standard.\n\n174\n00:11:31.670 --> 00:11:34.056\nIt's gonna return integer,\nit's called a skit strength.\n\n175\n00:11:37.879 --> 00:11:41.559\nAnd gidder's are, again,\nonce an industry standard,\n\n176\n00:11:41.559 --> 00:11:45.980\nand they're more or less a way of\nhow you access private variables.\n\n177\n00:11:45.980 --> 00:11:47.310\nIt's technical terminology.\n\n178\n00:11:47.310 --> 00:11:50.121\nAnd this is just gonna do nothing but\n\n179\n00:11:50.121 --> 00:11:54.909\nreturn the value of this object,\nmonster object strength.\n\n180\n00:12:00.159 --> 00:12:02.839\nT, r.\n\n181\n00:12:05.651 --> 00:12:09.435\nNow instead of printing out\nour height to the console,\n\n182\n00:12:09.435 --> 00:12:14.709\nall we have to do is print out myMonster\ndot and call the getStrength method.\n\n183\n00:12:16.703 --> 00:12:18.969\nNow if we remember correctly,\nour height is 10, and\n\n184\n00:12:18.969 --> 00:12:21.270\nstrength is 10 times the height.\n\n185\n00:12:21.270 --> 00:12:23.973\nSo this should print out 10 times 10,\n\n186\n00:12:23.973 --> 00:12:30.850\nwhich is equal to, 100.\n\n187\n00:12:30.850 --> 00:12:34.814\nActually, I forgot to initialize\nstrength right there.\n\n188\n00:12:34.814 --> 00:12:37.560\n&gt;&gt; All these are definitely\ncommon issues that I've run into.\n\n189\n00:12:37.560 --> 00:12:39.720\nWhoops, my bad.\n\n190\n00:12:39.720 --> 00:12:42.810\nCuz right now strength has nothing in it,\nbut\n\n191\n00:12:42.810 --> 00:12:44.590\njust kind of like garbage values, right?\n\n192\n00:12:44.590 --> 00:12:48.886\n&gt;&gt; Yeah, and\nthat actually brings up a good point.\n\n193\n00:12:48.886 --> 00:12:53.148\nCan't initialize strength after I set\nthe height inside of our main function and\n\n194\n00:12:53.148 --> 00:12:55.040\nget 100, which is what we want.\n\n195\n00:12:57.208 --> 00:13:00.730\nIf we forget to initialize strength,\nit's gonna cause problems.\n\n196\n00:13:01.950 --> 00:13:04.983\nSo for example, let's say we wanna set\nthe height of our monster as five..\n\n197\n00:13:04.983 --> 00:13:07.540\nWe hit it with a shrink ray or something.\n\n198\n00:13:07.540 --> 00:13:13.736\nSo let's go to MyMonster.height = 5,\nwe have its height.\n\n199\n00:13:15.700 --> 00:13:18.555\nAnd then if we print strength out again,\n\n200\n00:13:25.842 --> 00:13:27.261\nIt's gonna be 100 again.\n\n201\n00:13:27.261 --> 00:13:31.921\nIt's gonna be 100,\nI had to get rid of the ignore here so\n\n202\n00:13:31.921 --> 00:13:36.217\nI can actually keep on going\ndown through my program.\n\n203\n00:13:36.217 --> 00:13:37.548\nIt prints out 100 twice.\n\n204\n00:13:39.401 --> 00:13:43.750\nSo this is, as I said, one of the problems\nof making your variables and stuff public.\n\n205\n00:13:44.810 --> 00:13:49.650\nEven though we set height,\nbecause strength relies on height, if we\n\n206\n00:13:49.650 --> 00:13:54.030\ndon't remember to reinitialize strength,\nwe're gonna have bugs in our code.\n\n207\n00:13:55.360 --> 00:14:02.680\nSo good practice to get around this is to\nmake height and strength stuff be private\n\n208\n00:14:02.680 --> 00:14:07.870\nso you can't call it in code accidentally\nand use what's called a setter.\n\n209\n00:14:09.190 --> 00:14:11.636\nSo again,\na setter is a driven industry standard.\n\n210\n00:14:13.993 --> 00:14:15.330\nAlong with getters.\n\n211\n00:14:15.330 --> 00:14:18.940\nGetters get data from objects,\nand setters set data on objects.\n\n212\n00:14:20.300 --> 00:14:21.540\nSo let's make our height private,\n\n213\n00:14:21.540 --> 00:14:24.850\nand while we're at it, let's make\ninitialize strength private too.\n\n214\n00:14:27.530 --> 00:14:30.190\nSo we can no longer call initialize\nstrength inside our main function.\n\n215\n00:14:30.190 --> 00:14:32.030\nIt's just not accessible.\n\n216\n00:14:33.350 --> 00:14:35.390\nSo in addition to our getStrength method,\n\n217\n00:14:35.390 --> 00:14:40.210\nwe're gonna have a return type\nof void setHeight method.\n\n218\n00:14:40.210 --> 00:14:44.190\nThis is gonna take in an integer.\n\n219\n00:14:48.335 --> 00:14:52.035\nAnd then we can just set height\nto be the height that we pass in.\n\n220\n00:14:56.423 --> 00:14:58.480\nUnfortunately we might have a little\nbit of confusion right here.\n\n221\n00:14:59.530 --> 00:15:01.140\nThe height on the left side and\n\n222\n00:15:01.140 --> 00:15:04.480\nthe height on the right side,\nwell what height does that refer to?\n\n223\n00:15:04.480 --> 00:15:09.410\nIs it the height that we passed into the\nmethod, or is it the height on the object?\n\n224\n00:15:09.410 --> 00:15:13.710\nOr in both cases it's the height\nthat's passed into the method.\n\n225\n00:15:13.710 --> 00:15:17.930\nIf you want to get the height on\nthe object, you can use the keyword, this.\n\n226\n00:15:20.680 --> 00:15:23.150\nAnd you might need to do\nthis in your own code or\n\n227\n00:15:23.150 --> 00:15:27.700\nif you're working on a project\nin a professional environment.\n\n228\n00:15:29.410 --> 00:15:32.060\nThis is a special keyword.\n\n229\n00:15:32.060 --> 00:15:37.160\nIt depends on the context in this context,\nit returns a pointer\n\n230\n00:15:38.330 --> 00:15:42.520\nto the object that this\nmethod is being called on.\n\n231\n00:15:42.520 --> 00:15:47.436\nThe pointer is a special kind of variable\nin C++ that points to an address in your\n\n232\n00:15:47.436 --> 00:15:48.822\ncomputer's memory.\n\n233\n00:15:48.822 --> 00:15:49.602\nIn this case,\n\n234\n00:15:49.602 --> 00:15:53.775\nit'll point to the address of the object\nthat this message is being called.\n\n235\n00:15:53.775 --> 00:15:58.112\nAnd then we can use the arrow\noperator here, a hyphen,\n\n236\n00:15:58.112 --> 00:16:01.611\nGreater than sign to\naccess all the values,\n\n237\n00:16:03.382 --> 00:16:08.171\nOn the value that this is pointing to,\n\n238\n00:16:08.171 --> 00:16:12.510\nso once again, this is a pointer to\n\n239\n00:16:12.510 --> 00:16:18.170\nthe monster object, this arrow here.\n\n240\n00:16:18.170 --> 00:16:22.790\nAccess those variables on that\npointer through the monster object and\n\n241\n00:16:22.790 --> 00:16:25.240\nthen we access height on the monster.\n\n242\n00:16:25.240 --> 00:16:28.630\nAnd because this method\nis on the monster object,\n\n243\n00:16:28.630 --> 00:16:31.230\nit can access the private variable height.\n\n244\n00:16:31.230 --> 00:16:32.450\nThen we set it to the height\nthat we pass yet,\n\n245\n00:16:32.450 --> 00:16:37.090\nthis is not the only thing we're\ngoing to do in this method.\n\n246\n00:16:37.090 --> 00:16:38.764\nIn addition to setting height,\n\n247\n00:16:38.764 --> 00:16:42.427\nwe are also going to call the initialize\nstrength method on monsters.\n\n248\n00:16:44.629 --> 00:16:47.328\nSo set height's going to be doing two\nthings, it's gonna set height and\n\n249\n00:16:47.328 --> 00:16:49.107\nit's also gonna\nreinitialize your strength.\n\n250\n00:16:49.107 --> 00:16:53.216\nAnd we're going to have to modify our\ncode here a little bit because height\n\n251\n00:16:53.216 --> 00:16:57.269\ninitialize strength no longer\ncan access them inside.\n\n252\n00:16:57.269 --> 00:17:02.846\nSo instead of monster.height\nis equal to 10,\n\n253\n00:17:02.846 --> 00:17:08.022\nlet's just do MyMonster.setHeight 10.\n\n254\n00:17:11.121 --> 00:17:14.555\nAnd then down here do a little copy and\npasting.\n\n255\n00:17:14.555 --> 00:17:17.860\nMyMonster.setHeight Five.\n\n256\n00:17:17.860 --> 00:17:18.686\nWe'll hit it with our shrink ray.\n\n257\n00:17:23.808 --> 00:17:26.030\nAnd this is just a good\nprogramming practice.\n\n258\n00:17:26.030 --> 00:17:31.580\nAll of the implementation of setting and\ngetting and all the implementation\n\n259\n00:17:31.580 --> 00:17:35.650\nof your data on the monster object,\nit's handled by the monster object itself.\n\n260\n00:17:36.660 --> 00:17:41.990\nMain doesn't really care how you set\nheight or strength inside of monsters,\n\n261\n00:17:43.530 --> 00:17:46.520\nas long as it just wants\nto access information.\n\n262\n00:17:46.520 --> 00:17:50.230\nSo here we are,\nthe strength is 100 the first time,\n\n263\n00:17:50.230 --> 00:17:52.450\nthen we hit it with the shrink gradient,\nit's halved to 50.\n\n264\n00:17:52.450 --> 00:17:57.620\nNow all the setting inside of main,\nit can get pretty tedious after\n\n265\n00:17:57.620 --> 00:18:02.518\na while Let's say we create a monster\nobject, and we forget to set its height.\n\n266\n00:18:02.518 --> 00:18:09.520\nWell by default what is an int height?\n\n267\n00:18:09.520 --> 00:18:14.930\nI don't really know it's sort of\nundefined and undefined times 10 is\n\n268\n00:18:14.930 --> 00:18:18.080\nalso probably gonna be a really weird\nnumber, and you saw this before.\n\n269\n00:18:18.080 --> 00:18:22.420\nActually wound up being negative\n85 million, I think that's around.\n\n270\n00:18:24.280 --> 00:18:28.630\nSo it's gonna be wierd to have a monster\nthat has negative 85 million strength,\n\n271\n00:18:28.630 --> 00:18:31.430\nit might actually heal a player\nevery time it gets hit.\n\n272\n00:18:31.430 --> 00:18:34.290\n&gt;&gt; Yeah, I was like does that mean that\nwhen you get hit by it, I'd find those in\n\n273\n00:18:34.290 --> 00:18:38.580\na game any time and just be like hit me\nhit me, all right my health is back up.\n\n274\n00:18:38.580 --> 00:18:39.612\n&gt;&gt; And you'll never die.\n&gt;&gt; Yeah, so\n\n275\n00:18:39.612 --> 00:18:45.656\nto avoid all the TDM manually setting your\ndata every time you create a new object.\n\n276\n00:18:45.656 --> 00:18:51.714\nYou can use what's called a constructor\nto literally construct an object,\n\n277\n00:18:51.714 --> 00:18:54.090\ndidn't think of it that way.\n\n278\n00:18:54.090 --> 00:18:59.029\nConstructors sort of a special kind\nof method, [INAUDIBLE] constructor.\n\n279\n00:18:59.029 --> 00:19:02.140\n&gt;&gt; Now Jake, if I was actually gonna\nask you about this, that's, again,\n\n280\n00:19:02.140 --> 00:19:04.652\nnot necessarily saying that\nyou have these experiences.\n\n281\n00:19:04.652 --> 00:19:08.712\nBut if you've ever delved into other\nprogramming languages that have kind of\n\n282\n00:19:08.712 --> 00:19:11.844\nthese object oriented or\nclass based principles baked in.\n\n283\n00:19:11.844 --> 00:19:16.645\nSome of them have like, here's a variable,\nand then here's something on\n\n284\n00:19:16.645 --> 00:19:21.360\nthe right side, I noticed in main\n&gt;&gt; We don't have, it just monster.\n\n285\n00:19:21.360 --> 00:19:26.110\nMy monster and you get an object more or\nless for free but\n\n286\n00:19:26.110 --> 00:19:30.410\na contractor you would actually\nbe using to it to make a monster.\n\n287\n00:19:30.410 --> 00:19:36.230\nDoes that change NC++ how we work\nthis like how this works out?\n\n288\n00:19:36.230 --> 00:19:40.936\n&gt;&gt; It more or less depends on the syntax,\nit will be clear as we go on.\n\n289\n00:19:40.936 --> 00:19:45.820\nBy default, whenever you\n\n290\n00:19:45.820 --> 00:19:50.250\nsort of declare a new object like this, it\nuses what's called a default constructor.\n\n291\n00:19:52.630 --> 00:19:56.040\nSo first things first, actually,\nlet's make a constructor.\n\n292\n00:19:56.040 --> 00:19:59.250\nA constructor, once again,\nis sort of like a method.\n\n293\n00:19:59.250 --> 00:20:03.220\nYou create it by creating something\nthat looks like a method but\n\n294\n00:20:03.220 --> 00:20:05.220\nyou use the same name as the class.\n\n295\n00:20:05.220 --> 00:20:09.920\nSo this class is called monster so monster\nconstructor is going to be called monster.\n\n296\n00:20:09.920 --> 00:20:14.923\nSo you pass in parentheses sort\nof like you do with method and\n\n297\n00:20:14.923 --> 00:20:20.144\nthen you use curly braces to\ndefine the body of the structure.\n\n298\n00:20:20.144 --> 00:20:24.554\nAnd if you don't pass in any variables or\nvalues It creates what's called a default\n\n299\n00:20:24.554 --> 00:20:28.090\nconstructor and all objects in\nC++ have a default constructor.\n\n300\n00:20:28.090 --> 00:20:31.800\nAnd generally speaking it's a good idea\nto have this on your flashes just to\n\n301\n00:20:31.800 --> 00:20:33.320\ninitialize some default data.\n\n302\n00:20:33.320 --> 00:20:37.620\nSo let's say we forget to set\nthe value of the height on the monster\n\n303\n00:20:38.640 --> 00:20:39.290\nwhenever you create it.\n\n304\n00:20:41.370 --> 00:20:44.060\nSo by default,\nlet's have monsters be a height of one.\n\n305\n00:20:45.830 --> 00:20:52.490\nWe can just set height to be equal to 1,\nand then height times 10 will\n\n306\n00:20:54.620 --> 00:20:59.920\nbe strength, and 1 times 10 is 10.\n\n307\n00:20:59.920 --> 00:21:04.784\nSo by default our monsters have a height\nof 1, and a strength value of 10.\n\n308\n00:21:06.590 --> 00:21:10.893\nHere we go,\nthe first time we find that monster and\n\n309\n00:21:10.893 --> 00:21:15.512\nprint out strength to the console,\nit returns 10.\n\n310\n00:21:18.469 --> 00:21:20.403\nAnd that's all well and good, but\n\n311\n00:21:20.403 --> 00:21:24.683\neven if I wanted to have a monster with\na height of 10 or 100 or whatever.\n\n312\n00:21:24.683 --> 00:21:29.264\nIt still would have to call my monster set\n\n313\n00:21:29.264 --> 00:21:33.810\nheight 100 after we initialize it.\n\n314\n00:21:33.810 --> 00:21:38.000\nSo, if we want to construct a monster and\nspecify a height for\n\n315\n00:21:38.000 --> 00:21:41.794\nthat new monster,\nwe have to overload a constructor.\n\n316\n00:21:44.486 --> 00:21:50.640\nDo you remember our\nfunctions class overloading.\n\n317\n00:21:50.640 --> 00:21:54.570\nIt's just writing the same thing,\nbut giving it different values,\n\n318\n00:21:54.570 --> 00:21:58.730\npassing in different values to\nthat method slash constructor.\n\n319\n00:21:58.730 --> 00:22:01.330\nSo let's make a monster,\nwe wanna create a monster but\n\n320\n00:22:01.330 --> 00:22:05.570\nthis time let's pass in an integer,\nthe height integer.\n\n321\n00:22:06.740 --> 00:22:11.127\nSo they can construct a monster and\nspecify it's height when I reconstruct it.\n\n322\n00:22:11.127 --> 00:22:16.894\nAnd instead of manually setting height and\nstrength in our constructor.\n\n323\n00:22:16.894 --> 00:22:22.334\nI'm just going to do something smart\nthinking pragmatically here and\n\n324\n00:22:22.334 --> 00:22:25.835\nwe're going to call\nthe set height method and\n\n325\n00:22:25.835 --> 00:22:30.640\nthen just pass in the height that\nwe got from our constructor.\n\n326\n00:22:30.640 --> 00:22:35.990\nAnd the setHeight method will set\nthe height of the monster and\n\n327\n00:22:35.990 --> 00:22:37.490\ninitialize its strength all in one go.\n\n328\n00:22:39.210 --> 00:22:42.370\nSo we get to be lazy,\nand generally speaking,\n\n329\n00:22:42.370 --> 00:22:44.810\na lazy programmer tends to\nbe a pretty good programmer.\n\n330\n00:22:46.450 --> 00:22:50.590\nSo right now our monster\nuses a default constructor.\n\n331\n00:22:50.590 --> 00:22:53.740\nYou wanna use that new constructor\nthat takes in an integer,\n\n332\n00:22:53.740 --> 00:22:58.570\nyou just put in parentheses here and\npass in an integer that we want.\n\n333\n00:22:58.570 --> 00:23:04.150\nSo to create a monster that's 100\nmeters tall Let's type in 100,\n\n334\n00:23:04.150 --> 00:23:05.860\nand we're good to go.\n\n335\n00:23:05.860 --> 00:23:10.106\nWe've run the console,\nit should print out 1,000,\n\n336\n00:23:10.106 --> 00:23:14.970\n100 times 10 and then, of course,\nbeside it's had to be 5.\n\n337\n00:23:14.970 --> 00:23:18.204\nEven more powerful shrink ray I guess and\nthen, you could set to 50.\n\n338\n00:23:20.190 --> 00:23:24.130\nSo I see the C++ is little different than\nsome other experiences that I've had.\n\n339\n00:23:24.130 --> 00:23:26.500\nThere's no new keyword or\nanything, you're just more or\n\n340\n00:23:26.500 --> 00:23:32.010\nless calling it like a standard\nfunction or standard method, right?\n\n341\n00:23:32.010 --> 00:23:38.560\n&gt;&gt; Right, I will say that\nthere is a new keyword in C++.\n\n342\n00:23:38.560 --> 00:23:43.288\nBut it actually doesn't return a value of\nan object, it returns a pointer to that\n\n343\n00:23:43.288 --> 00:23:47.058\nobject and again I don't really\nwanna cover pointer right now.\n\n344\n00:23:47.058 --> 00:23:49.601\n&gt;&gt; Okay, all right we're\ngetting in the weed here but\n\n345\n00:23:49.601 --> 00:23:53.520\nas we learn more those are definitely\ndistinctions we're gonna need to make.\n\n346\n00:23:53.520 --> 00:23:57.773\nNow I was thinking about this whole access\nmodifier, creating methods, functions and\n\n347\n00:23:57.773 --> 00:24:00.110\nstuff\n&gt;&gt; If you could scroll down for me.\n\n348\n00:24:01.430 --> 00:24:03.830\nNope, nope, excuse me, I'm sorry.\n\n349\n00:24:03.830 --> 00:24:06.510\nYou had already scrolled back down here.\n\n350\n00:24:06.510 --> 00:24:09.790\nInt, int does not have an access modifier.\n\n351\n00:24:09.790 --> 00:24:13.080\nWhat does that mean?\n\n352\n00:24:14.390 --> 00:24:18.445\n&gt;&gt; You mean there's an [CROSSTALK]\n&gt;&gt; Or excuse me, int main, sorry.\n\n353\n00:24:18.445 --> 00:24:19.830\n&gt;&gt; It may.\n\n354\n00:24:19.830 --> 00:24:20.942\n&gt;&gt; Yeah.\n\n355\n00:24:20.942 --> 00:24:25.490\n&gt;&gt; In C++, and probably in a few\nother programming languages,\n\n356\n00:24:25.490 --> 00:24:31.210\nmain is a special function, very special,\nit's where the program starts.\n\n357\n00:24:31.210 --> 00:24:37.310\nSo whenever you run the program, the\ncompiler and the executable looks for that\n\n358\n00:24:37.310 --> 00:24:41.680\nmain function, and then whenever it says\nall right we're gonna start right here.\n\n359\n00:24:41.680 --> 00:24:44.580\nAnd thus I don't think it matters.\n\n360\n00:24:44.580 --> 00:24:47.050\nIt either doesn't matter if\nyou have a access modifier, or\n\n361\n00:24:47.050 --> 00:24:49.330\nyou just can't actually\nput an access modifier on.\n\n362\n00:24:49.330 --> 00:24:52.570\nIt's always gonna get called\nwhenever you run your program.\n\n363\n00:24:52.570 --> 00:24:56.360\n&gt;&gt; Well, and Jake I'm a big fan of let's\ntry it and see if we can break things.\n\n364\n00:24:56.360 --> 00:24:57.490\nWhat if we make that private.\n\n365\n00:24:57.490 --> 00:25:01.700\nLet's just see if Visual Studio yells at\nus or we break the compilation phase.\n\n366\n00:25:01.700 --> 00:25:02.238\n&gt;&gt; All right let's go.\n\n367\n00:25:05.567 --> 00:25:07.450\nI don't know if the syntax\nis actually correct here.\n\n368\n00:25:08.680 --> 00:25:14.370\nAnd it's yelling at me already,\nyeah it's expecting a declaration\n\n369\n00:25:14.370 --> 00:25:18.220\nbecause main isn't inside of a class,\ncan't actually use access modifiers on it.\n\n370\n00:25:19.720 --> 00:25:22.610\nOkay well that definitely\nclears some things up for us.\n\n371\n00:25:22.610 --> 00:25:27.680\nNow, Jacob, I think we at least\nhave a basic idea of classes, but\n\n372\n00:25:27.680 --> 00:25:31.170\nbefore we wrap this episode up,\nare there any final parting words or\n\n373\n00:25:31.170 --> 00:25:33.820\nwisdom that you want to impart on us?\n\n374\n00:25:33.820 --> 00:25:36.810\n&gt;&gt; Absolutely,\nthis is just a starting point for classes,\n\n375\n00:25:36.810 --> 00:25:42.590\nthere are a whole bunch of other keywords\ntechniques you can use to make classes.\n\n376\n00:25:42.590 --> 00:25:45.180\nStart out here so\nyou can get a basic understanding and\n\n377\n00:25:45.180 --> 00:25:47.862\nwe might be able to go into some\ndetails later on in the series.\n\n378\n00:25:47.862 --> 00:25:50.090\n&gt;&gt; All right, well have it folks,\n\n379\n00:25:50.090 --> 00:25:54.330\nwe've come back and hopefully started\nintroducing classes that I know become\n\n380\n00:25:54.330 --> 00:25:58.650\nkind of a paramount thing as\nwe will progress through C ++.\n\n381\n00:25:58.650 --> 00:26:00.970\nBut and we are gonna go ahead and\nwrap this episode up.\n\n382\n00:26:00.970 --> 00:26:04.070\nDefinitely stay tuned we've got\nmore intro to C++ coming at you.\n\n383\n00:26:04.070 --> 00:26:05.710\nBut for now we're gonna go ahead and\nsign out.\n\n384\n00:26:05.710 --> 00:26:08.350\nFor DevProTV I've been\nyour host Justin Dennison.\n\n385\n00:26:08.350 --> 00:26:09.846\n&gt;&gt; I was Chip Armstrong.\n&gt;&gt; And we'll see you next time.\n\n386\n00:26:09.846 --> 00:26:14.831\n[MUSIC]\n\n",
          "vimeoId": "238055544"
        },
        {
          "description": "In this episode, we will go over scope: its definition, how it works, and some best-practice ways to use it.",
          "length": "1184",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-4-1-scope-101717-PGM.00_25_58_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-4-1-scope-101717-PGM.00_25_58_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-4-1-scope-101717-PGM.00_25_58_18.Still001-sm.jpg",
          "title": "Scope",
          "transcript": "WEBVTT\n\n1\n00:00:00.052 --> 00:00:10.052\n[MUSIC]\n\n2\n00:00:12.418 --> 00:00:15.890\nGreetings everyone, and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:15.890 --> 00:00:20.870\nI'm your host Justin Dennison and\nwelcome back to Intro to C++,\n\n4\n00:00:20.870 --> 00:00:24.040\nand in this episode we're going\nto be talking about scope.\n\n5\n00:00:24.040 --> 00:00:29.595\nI know you're thinking to yourself\nit doesn't seem like it plays out.\n\n6\n00:00:29.595 --> 00:00:33.210\nWe're are about to find out, and luckily\nwe have an expert on that very topic in\n\n7\n00:00:33.210 --> 00:00:34.990\nthe studio today, Mr. Jacob Armstrong.\n\n8\n00:00:34.990 --> 00:00:36.080\nHow are you doing today, Jacob?\n\n9\n00:00:36.080 --> 00:00:36.700\n&gt;&gt; Very good, Justin.\n\n10\n00:00:36.700 --> 00:00:39.400\nAnd hopefully within the scope of this\nepisode, I'll be able to ask you,\n\n11\n00:00:39.400 --> 00:00:40.680\nhow are you today?\n\n12\n00:00:40.680 --> 00:00:42.230\n&gt;&gt; I am doing fantastic.\n\n13\n00:00:42.230 --> 00:00:43.160\nI like what you did there.\n\n14\n00:00:43.160 --> 00:00:47.620\nNow Scope, I don't think we're talking\nabout the minty fresh mouthwash.\n\n15\n00:00:47.620 --> 00:00:50.710\nHopefully you're not saying\nanything about my breath.\n\n16\n00:00:50.710 --> 00:00:51.620\nCould be iffy.\n\n17\n00:00:51.620 --> 00:00:56.154\nBut more specifically in\nthe context of C++, what is scope?\n\n18\n00:00:56.154 --> 00:01:01.751\n&gt;&gt; In C++ and many other programming\nlanguages, scope is basically\n\n19\n00:01:01.751 --> 00:01:07.558\nsaying where your variables exist\nduring the runtime of the program.\n\n20\n00:01:07.558 --> 00:01:12.422\nUsually it is used to encapsulate your\ndata, say if you want certain variables to\n\n21\n00:01:12.422 --> 00:01:17.071\nbe accessible in one sport, there will\nbe scope in that supply and a different\n\n22\n00:01:17.071 --> 00:01:21.600\nscope will have different variables for\na different part of your program.\n\n23\n00:01:23.240 --> 00:01:30.122\nOne thing that scoping allows you\nto do is reuse variable names.\n\n24\n00:01:30.122 --> 00:01:35.002\nBack in the day when programs were just\none big monolith of code, you really\n\n25\n00:01:35.002 --> 00:01:39.672\ncouldn't reuse a variable so you wanted\nto make a integer i in one spot.\n\n26\n00:01:39.672 --> 00:01:44.440\nYou couldn't reuse that in another spot\nbecause it would be in the same scope and\n\n27\n00:01:44.440 --> 00:01:46.570\nyou'd be redecalring a variable.\n\n28\n00:01:46.570 --> 00:01:48.540\n&gt;&gt; Now Jacob,\nlet me back you up here a little bit.\n\n29\n00:01:48.540 --> 00:01:51.200\nYou used a pretty long word.\n\n30\n00:01:51.200 --> 00:01:51.910\nEncapsulate?\n\n31\n00:01:51.910 --> 00:01:53.770\nWhat do you mean by encapsulate?\n\n32\n00:01:53.770 --> 00:01:58.180\n&gt;&gt; So,\nencapsulation is a way of separating code.\n\n33\n00:01:58.180 --> 00:02:02.030\nYou put barriers in between\ndifferent parts of code so\n\n34\n00:02:02.030 --> 00:02:06.880\nthat parts that work together\nonly have access to each other.\n\n35\n00:02:06.880 --> 00:02:07.950\nScope is related to this.\n\n36\n00:02:07.950 --> 00:02:10.299\nIt's not quite the same\nthing as an encapsulation.\n\n37\n00:02:13.108 --> 00:02:16.114\nBut, yeah,\nlet's just dive right into scope and\n\n38\n00:02:16.114 --> 00:02:19.850\nhopefully we'll talk a bit more\nabout encapsulation later.\n\n39\n00:02:19.850 --> 00:02:22.640\nI hope Justin will ask me questions\nif anything needs to be clarified.\n\n40\n00:02:23.920 --> 00:02:25.730\nSo, back to scope.\n\n41\n00:02:25.730 --> 00:02:28.000\nIt sort of works on a stack system.\n\n42\n00:02:28.000 --> 00:02:32.010\nYou have layers of scope in your program.\n\n43\n00:02:33.220 --> 00:02:34.450\nWhenever you add a new layer of scope,\n\n44\n00:02:34.450 --> 00:02:37.090\nyou're basically stacking\nsomething onto the stack.\n\n45\n00:02:37.090 --> 00:02:39.340\nAdding a new layer, rather.\n\n46\n00:02:39.340 --> 00:02:42.146\nAnd that layer has a scope in and\nof itself.\n\n47\n00:02:42.146 --> 00:02:51.600\nAnyway, We're a bit going into\na theoretical things right now.\n\n48\n00:02:51.600 --> 00:02:54.230\nLet's actually look at some code here.\n\n49\n00:02:54.230 --> 00:03:00.230\nSo on my machine, I sort of wrote\nup an initial sort of program here.\n\n50\n00:03:00.230 --> 00:03:04.032\nI included our input, output screen so\nthat we could write things at the console.\n\n51\n00:03:04.032 --> 00:03:07.788\nI made a test class with\na test class integer and\n\n52\n00:03:07.788 --> 00:03:10.494\na test method within that class.\n\n53\n00:03:10.494 --> 00:03:12.850\nI wrote a test function\nthat we can use and\n\n54\n00:03:12.850 --> 00:03:17.580\nthen side main I just got started with a\ncode that print things out of the console.\n\n55\n00:03:18.840 --> 00:03:24.050\nSo there are three different\nterms when it comes to scope,\n\n56\n00:03:24.050 --> 00:03:25.688\nand especially the variables.\n\n57\n00:03:25.688 --> 00:03:30.569\nThere are, Formal parameters,\n\n58\n00:03:30.569 --> 00:03:34.240\nwhich are variables that are declared\ninside methods and functions.\n\n59\n00:03:34.240 --> 00:03:37.660\nAnd some conditional statements\nthat we'll talk about later.\n\n60\n00:03:37.660 --> 00:03:43.480\nThere are local variables that are\ngenerally declared within curly braces,\n\n61\n00:03:43.480 --> 00:03:48.074\nsay in our main method here,\nif we were to write an int\n\n62\n00:03:48.074 --> 00:03:52.830\ninteger as a local integer variable.\n\n63\n00:03:54.160 --> 00:03:56.250\nThere are also global variables.\n\n64\n00:03:56.250 --> 00:04:00.150\nThese have a global scope\nacross your entire program.\n\n65\n00:04:00.150 --> 00:04:03.210\nSo we'll go into detail now\nstarting from the bottom up.\n\n66\n00:04:03.210 --> 00:04:04.120\nFirst, with global variables.\n\n67\n00:04:05.850 --> 00:04:11.120\nA global variable is a variable that's\ndeclared outside any curly brackets or\n\n68\n00:04:11.120 --> 00:04:12.355\nmethod function parentheses.\n\n69\n00:04:13.640 --> 00:04:18.137\nIn our code, we wanted to make a global\nvariable, and the global scope,\n\n70\n00:04:18.137 --> 00:04:20.570\nwe would just write it right here.\n\n71\n00:04:20.570 --> 00:04:25.732\nSay integer int global\n\n72\n00:04:25.732 --> 00:04:30.088\nvariable = 10.\n\n73\n00:04:30.088 --> 00:04:34.600\nAnd we can access this\nGlobalVariable anywhere in our code\n\n74\n00:04:34.600 --> 00:04:36.600\nbecause it has a global scope.\n\n75\n00:04:36.600 --> 00:04:41.879\nSo if I wanted to access it\ninside of the TestClass method,\n\n76\n00:04:41.879 --> 00:04:45.668\nI could say our GlobalVariable = 5 now.\n\n77\n00:04:45.668 --> 00:04:50.640\nOr inside of our test function,\nour global variable is equal to whatever,\n\n78\n00:04:52.265 --> 00:04:55.347\nSay 3.\n\n79\n00:04:55.347 --> 00:05:03.435\nEven inside our main math function,\nIs equal to 4.\n\n80\n00:05:03.435 --> 00:05:07.929\nAnd if we print that out,\ninside main right here,\n\n81\n00:05:07.929 --> 00:05:14.571\nbecause we just set it to before,\nit should print out 4 into the console.\n\n82\n00:05:15.880 --> 00:05:18.310\nThis is how global variables work.\n\n83\n00:05:18.310 --> 00:05:22.799\nIf we were to call our\ntest function function,\n\n84\n00:05:26.382 --> 00:05:28.380\nJust pass in whatever parameter we want,\n3.\n\n85\n00:05:28.380 --> 00:05:29.320\nIt doesn't matter right now.\n\n86\n00:05:29.320 --> 00:05:33.260\nWe'll set GlobalVariable to be 4,\nthen you can set to 3,\n\n87\n00:05:33.260 --> 00:05:35.110\nand it'll print out 3 to the console.\n\n88\n00:05:35.110 --> 00:05:37.360\nAnd that's sort of how\nglobal variables work.\n\n89\n00:05:37.360 --> 00:05:44.880\nYou can access them anywhere in your code,\nAnd modify them anywhere in your code.\n\n90\n00:05:44.880 --> 00:05:47.360\nNow I need to say as a best practice,\n\n91\n00:05:47.360 --> 00:05:52.300\nyou really shouldn't use global\nvariables for a few reasons, actually.\n\n92\n00:05:53.520 --> 00:05:55.010\nThey don't use encapsulation.\n\n93\n00:05:55.010 --> 00:05:58.130\nEncapsulation, again,\nis a way of separating your code.\n\n94\n00:05:58.130 --> 00:06:00.470\nAnd a global variable,\nbecause it is global,\n\n95\n00:06:00.470 --> 00:06:05.150\ncan be accessed anywhere by all of\nyour separate sections of code.\n\n96\n00:06:05.150 --> 00:06:09.130\nAnd if you have a team of 100 people and\n\n97\n00:06:09.130 --> 00:06:13.420\nthey're all modifying a global\nvariable willy nilly in their code\n\n98\n00:06:13.420 --> 00:06:17.300\nanywhere they want, it's gonna get to the\npoint where you don't really know where\n\n99\n00:06:17.300 --> 00:06:20.200\nthe variable is gonna be during\nthe run time of your program.\n\n100\n00:06:20.200 --> 00:06:23.918\nIt's gonna get kind of hard to debug and\nkeep track of it.\n\n101\n00:06:23.918 --> 00:06:28.538\nSo generally speaking, you're gonna\nwanna to try to not global variables and\n\n102\n00:06:28.538 --> 00:06:30.716\nglobal functions whenever you can.\n\n103\n00:06:30.716 --> 00:06:33.110\nNext up is local variables.\n\n104\n00:06:33.110 --> 00:06:37.040\nAnd this is where the whole need of\nscope really comes into play here,\n\n105\n00:06:38.540 --> 00:06:40.690\nand where a lot of your bugs come from.\n\n106\n00:06:42.490 --> 00:06:47.106\nSo local variables are declared,\nusually inside curly brackets.\n\n107\n00:06:47.106 --> 00:06:50.939\nAnd curly brackets are a really\ngood way of defining scope and\n\n108\n00:06:50.939 --> 00:06:54.484\nencapsulating your variables\ninside of your program.\n\n109\n00:06:54.484 --> 00:06:59.405\nSo if we declare an int i = 0 inside main,\n\n110\n00:06:59.405 --> 00:07:04.199\nthis integer i is inside the main scope.\n\n111\n00:07:04.199 --> 00:07:08.810\nBut if we were to declare,\nwrite down some new curly braces here, and\n\n112\n00:07:08.810 --> 00:07:14.970\ncreate a new code block, this will add\nanother layer of scope to our program.\n\n113\n00:07:14.970 --> 00:07:18.988\nSo if we were to say, do int x=1,\n\n114\n00:07:18.988 --> 00:07:24.030\nthis gets added to this local scope.\n\n115\n00:07:24.030 --> 00:07:25.750\nBut it doesn't get added\nto the scope below it.\n\n116\n00:07:27.170 --> 00:07:32.706\nBecause scope works on a stack, You\n\n117\n00:07:32.706 --> 00:07:40.072\ncan only access variables that are on\nthe top layer of the stack and below.\n\n118\n00:07:40.072 --> 00:07:44.922\nSo in this layer of scope that we have\nright here, we have access to X so\n\n119\n00:07:44.922 --> 00:07:49.621\nwe can set X to be new number if we\nwant to and we also have access to i.\n\n120\n00:07:49.621 --> 00:07:53.306\nYou can set i to be equal\nto 10 in this code block.\n\n121\n00:07:53.306 --> 00:07:56.460\nBut if you were to exit the code block and\ngo below it,\n\n122\n00:07:56.460 --> 00:07:59.295\nsuddenly you can't do\nanything to x anymore.\n\n123\n00:07:59.295 --> 00:08:02.100\nx=4.\n\n124\n00:08:02.100 --> 00:08:04.200\nTry set it to 4, it's not gonna work.\n\n125\n00:08:04.200 --> 00:08:05.510\nVisual Studio is gonna complain.\n\n126\n00:08:05.510 --> 00:08:07.780\nI've had a red squiggly line\non my screen right now.\n\n127\n00:08:07.780 --> 00:08:10.740\nAnd if I try to run it though,\nit's gonna give us build errors.\n\n128\n00:08:13.140 --> 00:08:17.516\n&gt;&gt; Jacob, in this context, these code\nblocks, are they still gonna run so\n\n129\n00:08:17.516 --> 00:08:20.264\nthe curly braces that\nwe have inside of main.\n\n130\n00:08:20.264 --> 00:08:24.156\nThose are still gonna run from\ntop to bottom within main and\n\n131\n00:08:24.156 --> 00:08:27.585\nany mutation persist after\nthose code blocks run?\n\n132\n00:08:27.585 --> 00:08:29.529\n&gt;&gt; Yeah, in this code block here,\n\n133\n00:08:29.529 --> 00:08:33.610\nwe set i to be equal 10 where\nit was equal to 0 before.\n\n134\n00:08:33.610 --> 00:08:39.919\nSo we're just to print out i really quick\nand get rid of our bad x set right here.\n\n135\n00:08:39.919 --> 00:08:42.809\nIt's going to print out 10, or it should.\n\n136\n00:08:45.874 --> 00:08:50.750\nBecause we are accessing the i that\nwe declared scope layer below it.\n\n137\n00:08:55.024 --> 00:08:57.730\nSo back to trying to set x right here.\n\n138\n00:08:57.730 --> 00:09:00.170\nThe reason why we can't set x is because,\n\n139\n00:09:00.170 --> 00:09:04.530\nat this point in our code,\nthe variable x just doesn't exist anymore.\n\n140\n00:09:04.530 --> 00:09:09.080\nWe create it in this sort\nof layer on a stack, but\n\n141\n00:09:09.080 --> 00:09:11.250\nonce we exit this that\nlayer is just removed.\n\n142\n00:09:11.250 --> 00:09:13.430\nIt's taken off of the stack.\n\n143\n00:09:13.430 --> 00:09:17.370\nAnd all we really have left is the layer\nbelow it, and since we removed\n\n144\n00:09:17.370 --> 00:09:21.020\nthe layer that has x, it gets deleted\nfrom our code and from memory.\n\n145\n00:09:23.580 --> 00:09:29.155\nSo, that is something to keep in mind\nwhile you are writing your own programs.\n\n146\n00:09:32.593 --> 00:09:38.683\nNow, variables can be over written\non a higher level layer of scope so\n\n147\n00:09:38.683 --> 00:09:43.304\nif we were to read clear\nan i integer say int i = 100\n\n148\n00:09:47.462 --> 00:09:51.408\nWhat this is gonna is create\nan entirely new i variable.\n\n149\n00:09:54.782 --> 00:09:57.950\nSo even though we set i to be 0 here, and\n\n150\n00:09:57.950 --> 00:10:03.518\nthen we set a new i to be 100 here,\nif we print out i again the console\n\n151\n00:10:03.518 --> 00:10:08.650\nis gonna write 0 because it's\ngonna be printing out this i.\n\n152\n00:10:08.650 --> 00:10:13.150\nThe i that gets set to be 0, and\nnot this i which you can say to be 100.\n\n153\n00:10:13.150 --> 00:10:18.574\nNow within our scope\nwith the i set to be 100,\n\n154\n00:10:18.574 --> 00:10:22.787\nwe can actually print out that new i,\n\n155\n00:10:28.467 --> 00:10:29.424\nAnd it'll work.\n\n156\n00:10:30.830 --> 00:10:34.035\nSo that's just something to remember\nas you are working with scope on your\n\n157\n00:10:34.035 --> 00:10:34.714\nown projects.\n\n158\n00:10:37.479 --> 00:10:43.115\nVariables create new layers of scope.\n\n159\n00:10:43.115 --> 00:10:49.785\nLayers, They have local variables that\nget deleted once that scope is gone.\n\n160\n00:10:49.785 --> 00:10:52.533\nAnd you can re-declare new\nvariables on those new layers.\n\n161\n00:10:56.948 --> 00:11:02.036\nLast thing, the formal parameters.\n\n162\n00:11:02.036 --> 00:11:06.703\nSo formal parameters, if you remember\nfrom our talk about functions,\n\n163\n00:11:06.703 --> 00:11:12.996\nthose are variables that are declared,\nInside of functions.\n\n164\n00:11:12.996 --> 00:11:18.753\nSo this integer function parameter,\nthat is a formal variable.\n\n165\n00:11:18.753 --> 00:11:23.418\nIf we're to use this TestFunction and\n\n166\n00:11:23.418 --> 00:11:32.080\ntry to pass something in, 34, why not?\n\n167\n00:11:32.080 --> 00:11:35.740\nWe're gonna pass in an integer\n34 into our TestFunction.\n\n168\n00:11:35.740 --> 00:11:38.210\nSo the scope of this formal parameter\n\n169\n00:11:38.210 --> 00:11:42.370\nis a whole lot like the scope of\na local variable or local scope.\n\n170\n00:11:43.520 --> 00:11:47.654\nYou can think of it as being at\nthe very beginning of this function.\n\n171\n00:11:47.654 --> 00:11:52.953\nIt's almost as if we\nwere to write int formal\n\n172\n00:11:52.953 --> 00:11:57.977\nparameter, third function parameter.\n\n173\n00:12:00.765 --> 00:12:03.735\nAnd it would retain\nthe scope of this location.\n\n174\n00:12:07.758 --> 00:12:11.817\nSo in addition to just a function scope,\nand local scope, and global scope,\n\n175\n00:12:11.817 --> 00:12:15.082\nI think we should also talk about\nscope in regards to classes.\n\n176\n00:12:17.725 --> 00:12:22.643\nSo class scope,\nseeing these curly brackets here,\n\n177\n00:12:22.643 --> 00:12:27.114\nyou can sort of intuitively\nguess that the class\n\n178\n00:12:27.114 --> 00:12:32.278\ninteger that we have is only\nscope to the class itself.\n\n179\n00:12:32.278 --> 00:12:35.251\nSo if we were to create\na test class instance.\n\n180\n00:12:46.996 --> 00:12:52.452\nThis test class instance that\nwe have right here is going\n\n181\n00:12:52.452 --> 00:12:58.154\nto contain that class integer\nvariable within its scope.\n\n182\n00:13:01.479 --> 00:13:05.579\nBut because it's encapsulated within\nthat class, we can still create\n\n183\n00:13:05.579 --> 00:13:10.500\nclass integer variables inside of\nour main function, if we wanted to.\n\n184\n00:13:10.500 --> 00:13:13.990\nIt's sort of a weird name for\na regular local variable.\n\n185\n00:13:15.710 --> 00:13:22.456\nBut just to demonstrate that,\nThese variables can't have the same name.\n\n186\n00:13:30.404 --> 00:13:33.555\nLet's create a ClassInteger set at 16.\n\n187\n00:13:33.555 --> 00:13:37.124\nThen let's print out the MyTestClass.\n\n188\n00:13:39.434 --> 00:13:43.203\nClass integer,\nthis is the test class's version.\n\n189\n00:13:47.521 --> 00:13:55.296\nAnd also print out the vocal\nclass integer upping this order.\n\n190\n00:13:59.963 --> 00:14:03.932\nAnd I actually did forget to make\nthe class integer public in that class, so\n\n191\n00:14:03.932 --> 00:14:05.770\nI can't access in main right now.\n\n192\n00:14:07.350 --> 00:14:10.540\nBut, just adding this,\neverything should be okay.\n\n193\n00:14:12.130 --> 00:14:12.630\nThere we go.\n\n194\n00:14:14.180 --> 00:14:16.179\nSo here we have two different\nclass integer variables.\n\n195\n00:14:17.300 --> 00:14:20.348\nWe added the ClassInteger\ninside of the class and\n\n196\n00:14:20.348 --> 00:14:23.555\nwe have a local variable\nversion of ClassInteger.\n\n197\n00:14:23.555 --> 00:14:26.044\nIf we were to print this\nout with the console,\n\n198\n00:14:26.044 --> 00:14:28.213\nthey should both be different things.\n\n199\n00:14:28.213 --> 00:14:32.090\nClassInteger by default is 10 and\nin main we set ClassInteger to be 16.\n\n200\n00:14:32.090 --> 00:14:37.470\nSo these variables are in\ndifferent scopes, but\n\n201\n00:14:37.470 --> 00:14:42.960\nbecause we encapsulate this\nvariable inside of classes,\n\n202\n00:14:42.960 --> 00:14:46.940\nwe can still reuse that name.\n\n203\n00:14:46.940 --> 00:14:49.610\n&gt;&gt; Now, Jacob,\nI do have a quick question about that.\n\n204\n00:14:49.610 --> 00:14:53.060\nI'm gonna bind back just a little\nbit to function parameters.\n\n205\n00:14:53.060 --> 00:14:56.950\nWhat if I had a globally\nscoped integer that for\n\n206\n00:14:56.950 --> 00:15:00.760\nsome horrible reason I decided to call,\nfunction parameter?\n\n207\n00:15:00.760 --> 00:15:04.710\nAnd then I still had, function parameter,\ninside of test, of the test function.\n\n208\n00:15:06.322 --> 00:15:09.170\nDoes C++,\nnumber one does it let you do that,\n\n209\n00:15:09.170 --> 00:15:12.380\nand does it have any issues with\nthe resolving which one's what?\n\n210\n00:15:12.380 --> 00:15:14.150\n&gt;&gt; That's a very good question.\n\n211\n00:15:14.150 --> 00:15:15.920\nI don't know.\n\n212\n00:15:15.920 --> 00:15:16.886\nLet's find out.\n\n213\n00:15:16.886 --> 00:15:20.290\nSo like you said,\n\n214\n00:15:20.290 --> 00:15:24.700\nwe have a test function that takes\nin an integer function parameter.\n\n215\n00:15:24.700 --> 00:15:27.014\nWhat happens if we have a global\nvariable with the same name?\n\n216\n00:15:29.381 --> 00:15:32.190\nSo I'm just gonna copy that variable\nname so I don't misspell it.\n\n217\n00:15:32.190 --> 00:15:36.090\nIt is an integer.\n\n218\n00:15:36.090 --> 00:15:40.162\nLet's make other global variable\ninteger function parameter.\n\n219\n00:15:41.849 --> 00:15:46.212\nLet's set it to be 15, it says we can.\n\n220\n00:15:50.547 --> 00:15:55.446\nNow inside of our test function, instead\nof just setting the global variable to be\n\n221\n00:15:55.446 --> 00:15:59.786\n3, let's print out whatever integer\nthat we pass into that function.\n\n222\n00:16:14.534 --> 00:16:16.480\nThis will printout FunctionParameter.\n\n223\n00:16:16.480 --> 00:16:19.861\nSo instead of main,\nwe're gonna do two things right now.\n\n224\n00:16:19.861 --> 00:16:23.033\nFirst, we're going to print to\nthe console our global variable,\n\n225\n00:16:23.033 --> 00:16:25.085\nour global function parameter variable.\n\n226\n00:16:28.770 --> 00:16:34.790\nAnd then we're going to call the test\nfunction that we just wrote.\n\n227\n00:16:36.780 --> 00:16:39.054\nWe're gonna pass in a number.\n\n228\n00:16:39.054 --> 00:16:44.008\nFunction parameter,\nour global variable is set to 15.\n\n229\n00:16:44.008 --> 00:16:48.902\nSo let's pass in something that isn't 15,\n\n230\n00:16:48.902 --> 00:16:53.298\n150, 120, even more different.\n\n231\n00:16:53.298 --> 00:16:55.677\nGonna print out global variable, and\n\n232\n00:16:55.677 --> 00:16:59.326\nthen we're going to print\nout using a function, 120.\n\n233\n00:16:59.326 --> 00:17:01.160\nSo, if we run this code,\nwe're gonna see if it compiles.\n\n234\n00:17:01.160 --> 00:17:03.280\nAnd if it doesn't,\nthen C++ does have a problem.\n\n235\n00:17:04.980 --> 00:17:09.520\nBut it looks like there isn't any\nproblems printing these numbers out.\n\n236\n00:17:09.520 --> 00:17:14.810\nSo I'm just gonna say, and this is what\nI believe is happening, the global\n\n237\n00:17:14.810 --> 00:17:19.560\nvariable that we declared is on\nthe lowest level scope that we can have.\n\n238\n00:17:19.560 --> 00:17:24.150\nBut whenever we add\nthat FunctionParameter,\n\n239\n00:17:25.390 --> 00:17:29.630\nthe scope of the program\ncreates a new layer.\n\n240\n00:17:29.630 --> 00:17:33.290\nAnd on that new layer we\nredeclare that variable name, so\n\n241\n00:17:33.290 --> 00:17:34.330\nit uses a new variable name.\n\n242\n00:17:36.820 --> 00:17:43.390\nSame thing that we had with redeclaring\nour int i and a new layer of scope.\n\n243\n00:17:48.474 --> 00:17:50.530\nSo you can imagine if you will,\n\n244\n00:17:53.718 --> 00:17:57.554\nBecause our function parameter\nis on a higher layer,\n\n245\n00:17:57.554 --> 00:18:01.570\nit's going to rename that\nglobal variable that we had.\n\n246\n00:18:03.190 --> 00:18:06.596\nSame way we're renaming this i variable\nin a higher layer scope inside of main.\n\n247\n00:18:09.710 --> 00:18:14.790\n&gt;&gt; So, it seems like If I wanted access to\na global variable inside of a function.\n\n248\n00:18:14.790 --> 00:18:18.500\nI'm with you on this, try to stay away\nfrom globals as much as possible.\n\n249\n00:18:18.500 --> 00:18:21.570\nThey're necessary from time to time.\n\n250\n00:18:21.570 --> 00:18:24.710\nI would need to make sure that\nI have no name collisions\n\n251\n00:18:24.710 --> 00:18:28.800\notherwise the lookup may not\nbehave as I anticipate, correct?\n\n252\n00:18:28.800 --> 00:18:33.434\n&gt;&gt; Yeah, absolutely and this is again\na problem with global variables, and\n\n253\n00:18:33.434 --> 00:18:36.361\na reason why you do want\nto use encapsulation.\n\n254\n00:18:36.361 --> 00:18:41.104\nAs you saw below, I had two\n\n255\n00:18:41.104 --> 00:18:47.362\nvariables called class integer.\n\n256\n00:18:52.166 --> 00:18:53.720\nOne inside of my test class.\n\n257\n00:18:56.570 --> 00:18:58.004\nAnd one that I declare locally.\n\n258\n00:18:58.004 --> 00:19:00.598\nEven though they were\nthe same variable name,\n\n259\n00:19:00.598 --> 00:19:04.125\nusing encapsulation,\nputting one variable inside a class and\n\n260\n00:19:04.125 --> 00:19:08.798\nanother variable encapsulated inside\nthe main function, they had the same name.\n\n261\n00:19:08.798 --> 00:19:13.750\nThere wasn't any collisions like you\nsaw with our global variable problem.\n\n262\n00:19:13.750 --> 00:19:19.020\n&gt;&gt; Jacob, thank you for taking us through\nthe intricacies of scope within C++,\n\n263\n00:19:19.020 --> 00:19:23.060\nand there are some tricky things that\nwe need to consider as we get started.\n\n264\n00:19:23.060 --> 00:19:24.280\nBut, we are not done with C++.\n\n265\n00:19:24.280 --> 00:19:26.680\nSo, definitely stay tuned for\nmore episodes.\n\n266\n00:19:26.680 --> 00:19:29.230\nBut for this episode,\nwe are gonna go ahead and wrap it up.\n\n267\n00:19:29.230 --> 00:19:32.380\nSo signing off for DevPro.TV,\nI've been your host, Justin Dennison.\n\n268\n00:19:32.380 --> 00:19:33.225\n&gt;&gt; I was Jacob Armstrong.\n\n269\n00:19:33.225 --> 00:19:34.346\n&gt;&gt; And we'll see you next time.\n\n270\n00:19:34.346 --> 00:19:39.089\n[MUSIC]\n\n",
          "vimeoId": "238770041"
        },
        {
          "description": "In this episode, we will go over statements that allow you to control how a program is executed.",
          "length": "1824",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-5-1-control_flow_statements-101717.00_30_15_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-5-1-control_flow_statements-101717.00_30_15_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-5-1-control_flow_statements-101717.00_30_15_12.Still001-sm.jpg",
          "title": "Control Flow Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.823 --> 00:00:17.380\nGreetings everyone and welcome back to\nanother exciting episode of DevPro TV.\n\n3\n00:00:17.380 --> 00:00:19.300\nI'm your host Justin Dennison and\n\n4\n00:00:19.300 --> 00:00:22.353\nwelcome back to our journey\ninto the land of the C++.\n\n5\n00:00:22.353 --> 00:00:24.018\nIn particular in this episode,\n\n6\n00:00:24.018 --> 00:00:28.000\nwe're gonna be looking at control flow\nstatements in the context of C++.\n\n7\n00:00:28.000 --> 00:00:30.670\nAnd here to help us along in that\njourney is Mr. Jacob Armstrong.\n\n8\n00:00:30.670 --> 00:00:32.090\nHow are you doing today, Jacob?\n\n9\n00:00:32.090 --> 00:00:33.223\n&gt;&gt; Very good, Justin.\n\n10\n00:00:33.223 --> 00:00:34.230\nAnd how are you?\n\n11\n00:00:34.230 --> 00:00:35.530\n&gt;&gt; I am doing fantastic.\n\n12\n00:00:35.530 --> 00:00:39.650\nNow, control flow statements, this is one\nof those things where I'm a little bit of\n\n13\n00:00:39.650 --> 00:00:44.940\nexperienced so I know what they mean\nto me, but what do they mean to you?\n\n14\n00:00:44.940 --> 00:00:47.660\n&gt;&gt; Well,\nwhen I think of control flow statements,\n\n15\n00:00:47.660 --> 00:00:49.970\nit's really what I think of\nwhen I start programming.\n\n16\n00:00:49.970 --> 00:00:53.240\nThese are your if statements,\nyour while loops,\n\n17\n00:00:53.240 --> 00:00:57.730\nyour do while loops, loops of all\nkinds and even more than that.\n\n18\n00:00:57.730 --> 00:00:59.130\nSo let's get started.\n\n19\n00:00:59.130 --> 00:01:03.090\nThis is sort of a thing that's\nbetter to show than tell, I think.\n\n20\n00:01:04.150 --> 00:01:06.760\nSo here we are,\nthe first thing we're gonna cover today\n\n21\n00:01:06.760 --> 00:01:08.660\nis the basic if statement.\n\n22\n00:01:08.660 --> 00:01:13.320\nThis is a conditional statement, you\ndeclare in the statement, if statement.\n\n23\n00:01:13.320 --> 00:01:17.700\nI'm writing if, and in the parenthesis\nyou declare your conditional.\n\n24\n00:01:17.700 --> 00:01:23.400\nYour conditional needs to evaluate to\na Boolean, so either true or false.\n\n25\n00:01:23.400 --> 00:01:28.750\nAnd if it is true, then everything inside\nof the next block of program will happen.\n\n26\n00:01:28.750 --> 00:01:31.910\nIt will be executed, and if not,\nit will skip that block programming.\n\n27\n00:01:32.930 --> 00:01:34.620\nSo we have an if.\n\n28\n00:01:34.620 --> 00:01:40.175\nLet's say if true, so\nbecause true is always gonna be true.\n\n29\n00:01:40.175 --> 00:01:42.730\nSo if statement will always execute.\n\n30\n00:01:44.950 --> 00:01:49.480\nI should say that this is your basic\ndefault program that I had already,\n\n31\n00:01:49.480 --> 00:01:52.750\nexcept I included it in\nthe upward stream and\n\n32\n00:01:52.750 --> 00:01:54.840\nsome stuff to print to\nthe console already.\n\n33\n00:01:56.460 --> 00:02:01.630\nSo let me just copy this and place it\ninto our always executing your statement.\n\n34\n00:02:02.630 --> 00:02:04.744\nAnd let's just print it out.\n\n35\n00:02:08.008 --> 00:02:09.460\nFirst if.\n\n36\n00:02:09.460 --> 00:02:11.960\nA string that is the first if.\n\n37\n00:02:13.190 --> 00:02:17.770\nSo whenever you're on a console,\nif is going to be evaluated to be true and\n\n38\n00:02:17.770 --> 00:02:20.100\nit will print out first if, as expected.\n\n39\n00:02:22.150 --> 00:02:27.169\nNow, if we set this if thing at default,\nOnce again,\n\n40\n00:02:27.169 --> 00:02:33.260\nor rather, it will be evaluated to false,\ncuz false is always false.\n\n41\n00:02:33.260 --> 00:02:36.870\nAnd that whole code block will be skipped,\nit doesn't print out any of them.\n\n42\n00:02:37.870 --> 00:02:42.750\n&gt;&gt; Now, Jacob, we've seen in previous\nepisodes where we get something like,\n\n43\n00:02:42.750 --> 00:02:45.730\nI guess I'll call coercion or\ncasting that occurs.\n\n44\n00:02:45.730 --> 00:02:51.870\nIf I say if one or if anything positive\nthat should, does that still work on\n\n45\n00:02:51.870 --> 00:02:55.160\nthis context, or is that only when we're\ndoing variable assignment with Boolean?\n\n46\n00:02:55.160 --> 00:02:59.030\n&gt;&gt; I believe it actually would work\nbecause if it's expecting a Boolean,\n\n47\n00:02:59.030 --> 00:03:01.360\nit will implicitly turn or\n\n48\n00:03:01.360 --> 00:03:05.890\nat least try to implicitly turn whatever\nyou pass into it into a Boolean value.\n\n49\n00:03:07.120 --> 00:03:12.494\nAnd because of the rules of Boolean\nvalues, positive numbers or numbers\n\n50\n00:03:12.494 --> 00:03:18.910\nthat aren't zero are true, and then\nthe number zero is always false, right.\n\n51\n00:03:18.910 --> 00:03:21.570\nSo once again conditionals.\n\n52\n00:03:21.570 --> 00:03:24.000\nA lot of the times you just\ndon't wanna pass in a true or\n\n53\n00:03:24.000 --> 00:03:24.970\nfalse into the statement.\n\n54\n00:03:24.970 --> 00:03:26.110\nYou actually wanna do some logic.\n\n55\n00:03:28.020 --> 00:03:32.740\nSo, sort of a logic thing case that\nyou can do are if equals equals,\n\n56\n00:03:34.550 --> 00:03:39.190\nequals equals being the logical\ncomparison operator.\n\n57\n00:03:39.190 --> 00:03:42.380\nSo, this is gonna ask,\nis one equal to one?\n\n58\n00:03:42.380 --> 00:03:45.450\nIf it is, then this returns true.\n\n59\n00:03:46.500 --> 00:03:49.685\nAnd the instinct fires first if.\n\n60\n00:03:51.614 --> 00:03:54.863\nAnd if we set it to be something\nthat is false, one is equal to zero,\n\n61\n00:03:54.863 --> 00:03:55.800\nthat's not true.\n\n62\n00:03:55.800 --> 00:03:59.760\nOne is not equal to zero,\nif statement doesn't happen at all.\n\n63\n00:04:02.220 --> 00:04:04.890\nAnd once again, there are a bunch\nof different operators you can use,\n\n64\n00:04:04.890 --> 00:04:06.590\nespecially for integers.\n\n65\n00:04:06.590 --> 00:04:11.730\nLess than, greater than,\nless than, not equals.\n\n66\n00:04:13.690 --> 00:04:16.600\nI'll not really gonna\ncover operators today.\n\n67\n00:04:16.600 --> 00:04:19.550\nBut just to show you that you can\nuse those inside your if statements,\n\n68\n00:04:19.550 --> 00:04:21.070\nto evaluate the logic in your program.\n\n69\n00:04:22.230 --> 00:04:25.433\nSo in addition to the if statement,\nthere is the else statement.\n\n70\n00:04:27.876 --> 00:04:30.740\nElse, referred as E-L-S-E.\n\n71\n00:04:32.980 --> 00:04:36.890\nThat's gonna fire every time\nthat the if statement above it\n\n72\n00:04:36.890 --> 00:04:38.050\nis evaluated to be false.\n\n73\n00:04:39.920 --> 00:04:45.576\nSo inside this else statement,\nwe're gonna print to the console a string.\n\n74\n00:04:51.936 --> 00:04:53.167\nElse fired.\n\n75\n00:04:55.166 --> 00:04:58.450\nSo, just taking a step back actually,\nand taking a look at the logic here.\n\n76\n00:04:58.450 --> 00:05:03.475\nWhat's happening is,\nif one is not equal to zero, do this.\n\n77\n00:05:04.937 --> 00:05:09.000\nElse or otherwise, do this.\n\n78\n00:05:10.630 --> 00:05:13.970\nSo because right now,\none indeed is not equal to zero,\n\n79\n00:05:13.970 --> 00:05:18.120\nwe're gonna print out our first if string.\n\n80\n00:05:18.120 --> 00:05:21.760\nAnd then we're gonna skip\nout our else statement.\n\n81\n00:05:21.760 --> 00:05:26.070\nWe're gonna skip the else\nstring [INAUDIBLE] console.\n\n82\n00:05:26.070 --> 00:05:28.503\nRunning it just to be sure\nit does print out first if.\n\n83\n00:05:30.893 --> 00:05:32.920\nAnd if we set our If\nstatement to be false.\n\n84\n00:05:32.920 --> 00:05:36.937\nOne does not equal to one.\n\n85\n00:05:36.937 --> 00:05:40.761\nOne does equal to one, so this gets\nevaluated belt using weird logic here for\n\n86\n00:05:40.761 --> 00:05:43.600\ndouble negatives, unfortunately.\n\n87\n00:05:43.600 --> 00:05:44.778\nThe else statement will fire.\n\n88\n00:05:44.778 --> 00:05:46.197\nElse fired.\n\n89\n00:05:48.515 --> 00:05:52.750\nAnd last but not least, there is\nwhat is called an if/else statement.\n\n90\n00:05:54.410 --> 00:05:57.050\nIt's putting this in between our if and\nour else statements.\n\n91\n00:05:57.050 --> 00:05:58.708\nWell, then a, if else.\n\n92\n00:06:02.390 --> 00:06:06.180\nLet's just make this true.\n\n93\n00:06:06.180 --> 00:06:06.730\nI'm sorry.\n\n94\n00:06:06.730 --> 00:06:09.854\nIt's not if/else actually, it is else/if.\n\n95\n00:06:13.005 --> 00:06:17.335\nSo now, else/ifs are fired\n\n96\n00:06:23.285 --> 00:06:26.304\nIf this statement is true,\nit'll go to here and\n\n97\n00:06:26.304 --> 00:06:29.480\nit'll evaluate this statement,\nthe else/if.\n\n98\n00:06:29.480 --> 00:06:35.236\nAnd if else/if false,\nit'll default to our bottom else here.\n\n99\n00:06:35.236 --> 00:06:38.020\nThis isn't our first if actually,\nthis is our second if.\n\n100\n00:06:40.020 --> 00:06:42.265\nSo once again, trying to look\nat the logic of this program.\n\n101\n00:06:43.985 --> 00:06:49.419\nIf one is not equal to one, I'm just\ngonna make this, If one is equal to five,\n\n102\n00:06:49.419 --> 00:06:50.790\njust getting rid of the double negative.\n\n103\n00:06:50.790 --> 00:06:52.435\nI'm trying to make this\neasier to understand.\n\n104\n00:06:55.149 --> 00:06:59.027\nIf one is equal to five,\nit's true, do this.\n\n105\n00:06:59.027 --> 00:07:05.300\nElse, if true, do this,\n\n106\n00:07:05.300 --> 00:07:09.310\nelse, do this.\n\n107\n00:07:09.310 --> 00:07:14.370\nAnd running through our program,\nif one is equal to five, that's not true.\n\n108\n00:07:14.370 --> 00:07:16.120\nI'm gonna skip this block.\n\n109\n00:07:16.120 --> 00:07:17.670\nElse if true, true is true.\n\n110\n00:07:17.670 --> 00:07:23.590\nWe're gonna run this\nsection of our code here.\n\n111\n00:07:23.590 --> 00:07:28.831\nAnd then else because this if\nstatement's valuated to be true,\n\n112\n00:07:28.831 --> 00:07:30.889\nelse does not get fired.\n\n113\n00:07:30.889 --> 00:07:38.406\nAnd running our local Windows\ndebugger in second if.\n\n114\n00:07:38.406 --> 00:07:41.805\nAnd there you have it,\na brief introduction to if statements.\n\n115\n00:07:41.805 --> 00:07:47.057\nReally, they're gonna be\nthe meat of your program usually,\n\n116\n00:07:47.057 --> 00:07:50.693\nit's where you get a lot\nof the logic done,\n\n117\n00:07:50.693 --> 00:07:54.127\nwhenever you're working on a project.\n\n118\n00:07:54.127 --> 00:07:57.509\nSo, if statements are well and\ngood for branching logic, but\n\n119\n00:07:57.509 --> 00:07:59.797\nwhat if you wanted to have looping logic?\n\n120\n00:07:59.797 --> 00:08:04.925\nWell There is something\ncalled a while loop.\n\n121\n00:08:04.925 --> 00:08:10.920\nUsing the keyboard, while, and\nthen parenthesis, and then curly brackets.\n\n122\n00:08:12.250 --> 00:08:18.040\nAs long as the parenthesis is evaluated\nto be true, the while loop will fire.\n\n123\n00:08:18.040 --> 00:08:25.358\nSo let's say I declare an integer,\nAnd let's make this ten.\n\n124\n00:08:27.831 --> 00:08:33.264\nSo we're going to say, while, Our variable\n\n125\n00:08:33.264 --> 00:08:39.759\ninteger is greater than 0,\nwe'll print out to the console.\n\n126\n00:08:43.912 --> 00:08:47.494\nInstead else fired the string,\nwe're gonna just print out integer.\n\n127\n00:08:51.095 --> 00:08:55.028\nSo what's gonna happen here,\nis while integer is greater than 0,\n\n128\n00:08:55.028 --> 00:08:57.099\nit's gonna be sent to the console.\n\n129\n00:08:59.411 --> 00:09:00.610\nAnd here you have it.\n\n130\n00:09:00.610 --> 00:09:03.210\nNow while loops,\nbecause integer is never decremented or\n\n131\n00:09:03.210 --> 00:09:06.800\nchanged at all, this is going\nto just be looping infinitely.\n\n132\n00:09:06.800 --> 00:09:11.497\nRight now there's probably a thousand 10s\nbeing printed out to the console on my\n\n133\n00:09:11.497 --> 00:09:12.050\nscreen.\n\n134\n00:09:13.150 --> 00:09:17.050\nSo it is something that you're gonna\nwanna be careful of when using loops.\n\n135\n00:09:18.830 --> 00:09:23.870\nSo at the end, after I print out my\ninteger, I'm just gonna decrement\n\n136\n00:09:23.870 --> 00:09:28.921\nit using integer--, which will\nreduce integer the variable by 1.\n\n137\n00:09:28.921 --> 00:09:32.850\nAnd now if we run our console,\nthe while loop should work quite nicely,\n\n138\n00:09:32.850 --> 00:09:36.339\nit prints out 10, 9,\n8, 7, 6, 5, 4, 3, 2, 1.\n\n139\n00:09:37.420 --> 00:09:43.170\nAnd then, cuz after it prints out 1,\nit gets decremented to 0,\n\n140\n00:09:43.170 --> 00:09:47.890\nand then because 0 is not greater than 0,\nthe while loop ends.\n\n141\n00:09:47.890 --> 00:09:53.608\nAnd we get, it breaks down to\nour section of code down here.\n\n142\n00:09:56.448 --> 00:10:01.111\nIn addition to the while loop, you might\nsee what's called a do while loop.\n\n143\n00:10:01.111 --> 00:10:06.737\nAnd that is written as,\ndo, curly brackets,\n\n144\n00:10:06.737 --> 00:10:11.210\nwhile, and then your conditional,\n\n145\n00:10:11.210 --> 00:10:15.692\nso, Lets use our integer variable again,\n\n146\n00:10:18.645 --> 00:10:22.981\nJust to show you one of\nthe peculiarities of the do while loop.\n\n147\n00:10:22.981 --> 00:10:24.143\nGreater than 0.\n\n148\n00:10:28.543 --> 00:10:31.437\nSo do whatever's in this code,\nthese curly brackets,\n\n149\n00:10:31.437 --> 00:10:33.537\nwhile the integer is greater than zero.\n\n150\n00:10:33.537 --> 00:10:36.504\nWell, whenever we get to\nthis section of code,\n\n151\n00:10:36.504 --> 00:10:41.415\nbecause of our previous while loop,\ninteger does get decremented down to 0.\n\n152\n00:10:41.415 --> 00:10:43.582\nSo we try to print integer\nin this new while.\n\n153\n00:10:45.404 --> 00:10:50.347\nWhat's gonna happen is, what you would\nexpect at least, or hope at least, maybe,\n\n154\n00:10:50.347 --> 00:10:52.440\nthat it doesn't happen at all.\n\n155\n00:10:52.440 --> 00:10:58.080\nBecause we only want to print out while,\nit is greater than 0.\n\n156\n00:10:58.080 --> 00:10:59.765\nHowever, main caveat,\n\n157\n00:10:59.765 --> 00:11:03.947\nyou can see right here there that\nit does get printed out to 0.\n\n158\n00:11:03.947 --> 00:11:08.238\nThe main caveat of a do while loop is\nthat, the logic within these curly\n\n159\n00:11:08.238 --> 00:11:14.050\nbrackets, always happens once, at least\nonce, the first time it runs through.\n\n160\n00:11:14.050 --> 00:11:16.802\nAnd then it gets to the while\nconditional statement, and\n\n161\n00:11:16.802 --> 00:11:18.534\nchecks to see if that while is true.\n\n162\n00:11:20.194 --> 00:11:25.710\n&gt;&gt; So Jacob, ultimately the check\nthat runs, it's either pre or post.\n\n163\n00:11:25.710 --> 00:11:29.554\nIt's almost like a before or\nafter the actual loop body.\n\n164\n00:11:29.554 --> 00:11:31.910\nIs that a good thing to think\nof while verses do while?\n\n165\n00:11:31.910 --> 00:11:33.790\n&gt;&gt; Yeah,\nthat's probably the best way to do it.\n\n166\n00:11:33.790 --> 00:11:38.525\nPersonally, I rarely see do whiles, I\ndon't really think of too many cases where\n\n167\n00:11:38.525 --> 00:11:41.289\nI would need to run through\na loop at least once.\n\n168\n00:11:41.289 --> 00:11:45.464\nBut maybe you could think\nof some on your own.\n\n169\n00:11:45.464 --> 00:11:49.491\n&gt;&gt; I can't remember, there's been that one\nor two, every once in a while that have\n\n170\n00:11:49.491 --> 00:11:53.299\ncropped up, where I'm like, I need this\nto happen at least the first time.\n\n171\n00:11:53.299 --> 00:11:53.920\n&gt;&gt; Yeah.\n\n172\n00:11:53.920 --> 00:11:56.010\n&gt;&gt; I need to check at least the first one.\n\n173\n00:11:56.010 --> 00:11:58.960\nTypically, I'm doing some calculation or\nsomething.\n\n174\n00:12:00.210 --> 00:12:00.860\nAnd a do while,\n\n175\n00:12:00.860 --> 00:12:02.960\nI've actually used languages where\ndo whiles aren't available, and\n\n176\n00:12:02.960 --> 00:12:06.640\nI'm like man, I gotta do this, and\nif I just have to do while loop!\n\n177\n00:12:06.640 --> 00:12:09.735\nBut like you said,\nthey don't crop up a great deal.\n\n178\n00:12:09.735 --> 00:12:14.864\nAnd a lot of times, there's maybe,\nI would hesitate to say better,\n\n179\n00:12:14.864 --> 00:12:21.162\nbut a more appropriate solution, as far as\ncontrol flow, if you run into a do while.\n\n180\n00:12:21.162 --> 00:12:24.870\n&gt;&gt; Yeah but, just for those edge cases,\nit is a good thing to know.\n\n181\n00:12:26.900 --> 00:12:31.258\nSo next up is another sort of\nlooping conditional statement,\n\n182\n00:12:31.258 --> 00:12:35.560\nand this is one that happens fairly often.\n\n183\n00:12:35.560 --> 00:12:36.620\nIt's called a for loop.\n\n184\n00:12:37.690 --> 00:12:42.196\nSo you declare it by for,\nThen curly braces for\n\n185\n00:12:42.196 --> 00:12:45.900\nthe actual logic,\nthe code rather, of this loop.\n\n186\n00:12:45.900 --> 00:12:47.160\nBut the for loop does something special.\n\n187\n00:12:48.570 --> 00:12:50.631\nInside the parenthesis,\n\n188\n00:12:50.631 --> 00:12:55.506\nyou have three different\nsections separated by semicolons.\n\n189\n00:12:55.506 --> 00:12:59.710\nThe first section that you have\nis an initialization section.\n\n190\n00:12:59.710 --> 00:13:02.720\nYou can initialize variables\ninside this section, and\n\n191\n00:13:02.720 --> 00:13:06.940\nthey persist throughout\nthe duration of the loop.\n\n192\n00:13:07.960 --> 00:13:12.987\nSo, let's say I want to initialize\na variable, say, int i,\n\n193\n00:13:12.987 --> 00:13:18.115\nusually in our practice,\nin coding practice, for for loops,\n\n194\n00:13:18.115 --> 00:13:23.560\nyou use int i, it's just sort of\na standard that programmers use.\n\n195\n00:13:23.560 --> 00:13:28.920\nWe're gonna set this i to be 0 in\nour first section of the for loop.\n\n196\n00:13:28.920 --> 00:13:32.608\nAnd then the second section,\nthat is your conditional check.\n\n197\n00:13:32.608 --> 00:13:37.870\nSo in this for loop, we're gonna say,\n\n198\n00:13:37.870 --> 00:13:42.814\nwe're gonna run through this loop as\n\n199\n00:13:42.814 --> 00:13:47.928\nlong as our i variable is less than 5.\n\n200\n00:13:47.928 --> 00:13:50.278\nSo as long as the i in this for\nloop is less than 5, the for\n\n201\n00:13:50.278 --> 00:13:52.572\nloop's gonna keep on looping around.\n\n202\n00:13:52.572 --> 00:13:57.470\nAnd in the last section of the for loop,\ninside the parenthesis, is a section that\n\n203\n00:13:58.610 --> 00:14:01.640\ngets executed at the end of\neach iteration of the loop.\n\n204\n00:14:02.960 --> 00:14:06.741\nSo after our first loop,\nwhen it gets to this end curly brace,\n\n205\n00:14:06.741 --> 00:14:11.625\nits conditional check happens, and\nit's still able to loop again.\n\n206\n00:14:11.625 --> 00:14:16.190\nIt'll execute whatever code\nyou have in this last section.\n\n207\n00:14:16.190 --> 00:14:20.745\nAnd usually it's just to increment up\nthe variable that you initialize here\n\n208\n00:14:20.745 --> 00:14:23.746\non the first section,\nso we're gonna say i++.\n\n209\n00:14:26.000 --> 00:14:31.233\nSo what's gonna happen here is that we're\ngoing to create a new variable called i,\n\n210\n00:14:31.233 --> 00:14:36.060\nset it to 0, and we're gonna go into loop,\nas long as that i is less than 5.\n\n211\n00:14:36.060 --> 00:14:38.793\nAnd then, at the end of each loop,\nwe're gonna make i go up at 1.\n\n212\n00:14:43.105 --> 00:14:48.289\nAnd copying out our printing to\nthe console, we're not printing integer,\n\n213\n00:14:48.289 --> 00:14:51.773\ngonna just print the variable i,\nand run our code.\n\n214\n00:14:54.593 --> 00:14:55.463\nAnd here we have it.\n\n215\n00:14:55.463 --> 00:14:59.382\nActually, before I talk about this,\nI'm gonna add another end line\n\n216\n00:14:59.382 --> 00:15:02.976\nhere to separate our for\nloop from the do whiles and the whiles.\n\n217\n00:15:10.142 --> 00:15:14.971\nSo here we go, here's our for loop\nsection right here, we have a 0, 1, 2,\n\n218\n00:15:14.971 --> 00:15:19.242\n3, 4, i is set to 0, then goes to 1,\nthen 2, then 3, then 4.\n\n219\n00:15:21.080 --> 00:15:25.713\nSo you might be thinking, so what's\nthe reason of even having a for loop,\n\n220\n00:15:25.713 --> 00:15:30.229\nif we're just gonna do the same thing\nthat we could do with a while loop?\n\n221\n00:15:30.229 --> 00:15:32.589\nReason being is that, for\n\n222\n00:15:32.589 --> 00:15:37.308\nloops are usually used to\niterate over a set of data,\n\n223\n00:15:37.308 --> 00:15:42.260\na sort of a series of numbers,\nsort of aligned in a row.\n\n224\n00:15:42.260 --> 00:15:46.765\nYou can say, all right, let's go to number\n0, number 1, number 2, number 3, number 4,\n\n225\n00:15:46.765 --> 00:15:47.340\nnumber 5.\n\n226\n00:15:47.340 --> 00:15:51.607\nWith a while loop, you can do the same\nthing with a while loop, it's just that\n\n227\n00:15:51.607 --> 00:15:55.696\nyou would have to declare initialization\nvariables in separate places.\n\n228\n00:15:55.696 --> 00:16:00.647\nLike in our code here, declared\nan integer above the while loop itself.\n\n229\n00:16:00.647 --> 00:16:03.866\nAnd that integer is\nactually still a variable,\n\n230\n00:16:03.866 --> 00:16:06.630\neven after we've done the while loop.\n\n231\n00:16:06.630 --> 00:16:11.498\nSo just in general, as a best practice,\nit's nice to use a for\n\n232\n00:16:11.498 --> 00:16:15.520\neach loop because you're encapsulating\nthose sort of throwaway variables.\n\n233\n00:16:15.520 --> 00:16:18.440\n&gt;&gt; And correct me if I'm wrong,\nI think this leads to,\n\n234\n00:16:18.440 --> 00:16:22.730\nif I need a count, right,\nif I need to go some how many.\n\n235\n00:16:22.730 --> 00:16:25.660\nAnd I forget the step, right,\nthe increment or the decrement or\n\n236\n00:16:25.660 --> 00:16:26.345\nwhatever it may be.\n\n237\n00:16:26.345 --> 00:16:28.230\nIn a while loop,\nI may end up in the infinite loop.\n\n238\n00:16:28.230 --> 00:16:31.910\nBut in a for loop, that actually ends\nup being a compile time error, right?\n\n239\n00:16:31.910 --> 00:16:32.680\n&gt;&gt; Right.\n\n240\n00:16:32.680 --> 00:16:37.710\n&gt;&gt; So that seems to me,\nalmost a while is good for,\n\n241\n00:16:37.710 --> 00:16:41.180\nI don't really know how long or how many.\n\n242\n00:16:41.180 --> 00:16:45.290\nBut I know there's gonna be a certain\ntime that I reach the number seven, or\n\n243\n00:16:45.290 --> 00:16:47.719\nsomething like that, and then I want stop.\n\n244\n00:16:47.719 --> 00:16:49.526\nBut for a for loop,\nI've got a hundred things.\n\n245\n00:16:49.526 --> 00:16:52.864\nI want to start at zero,\ngo to 100 or 99, depending, and\n\n246\n00:16:52.864 --> 00:16:56.080\nI'm sure we'll get into that shenanigans.\n\n247\n00:16:56.080 --> 00:16:58.768\nAnd I wanna tell you where I want\nto start, where I want to stop, and\n\n248\n00:16:58.768 --> 00:16:59.860\nhow I want to get there.\n\n249\n00:16:59.860 --> 00:17:00.806\nRight, start, stop, step.\n\n250\n00:17:00.806 --> 00:17:01.380\n&gt;&gt; Yes.\n\n251\n00:17:01.380 --> 00:17:04.480\n&gt;&gt; So, it's a fine grained nuance, but\n\n252\n00:17:04.480 --> 00:17:08.130\nit's something that you'll to start to\nlearn as you become more exposed to\n\n253\n00:17:08.130 --> 00:17:10.805\nthe different ways of\niterating a variety of things.\n\n254\n00:17:10.805 --> 00:17:16.070\n&gt;&gt; Right, and speaking of iterating\nover a variety of things, for\n\n255\n00:17:16.070 --> 00:17:20.678\nloops are usually used to iterate\nover a set of information, of data.\n\n256\n00:17:20.678 --> 00:17:26.420\nSo what if you're sure you want to\niterate over that entire set of data,\n\n257\n00:17:26.420 --> 00:17:28.650\nsay just like a subset.\n\n258\n00:17:28.650 --> 00:17:33.606\nSay I had a series of\nnumbers zero through five.\n\n259\n00:17:33.606 --> 00:17:36.350\nBut instead of going through one, two,\nthree, you can just go for loop for that.\n\n260\n00:17:36.350 --> 00:17:38.278\nYou just wanna go through the entire set.\n\n261\n00:17:38.278 --> 00:17:39.705\nWell, in C++,\n\n262\n00:17:39.705 --> 00:17:45.622\nI think this might actually be more\nrecent version of the C++ compiler.\n\n263\n00:17:45.622 --> 00:17:48.468\nThey introduced what's called a for\neach loop.\n\n264\n00:17:48.468 --> 00:17:53.593\nfor each will iterate over\neverything inside the data set.\n\n265\n00:17:55.555 --> 00:18:00.397\nSo one things that contain, one of\nthe kinds of variables, you should say,\n\n266\n00:18:00.397 --> 00:18:02.830\nit can contain data, it's a string.\n\n267\n00:18:04.300 --> 00:18:07.410\nA string is a series of characters.\n\n268\n00:18:08.420 --> 00:18:11.371\nAnd I will go ahead and\ninclude the string stuff, the library.\n\n269\n00:18:14.353 --> 00:18:15.660\nSo we can actually use strings.\n\n270\n00:18:17.750 --> 00:18:19.390\nAnd down here before we do our for\n\n271\n00:18:19.390 --> 00:18:21.650\neach loop we're gonna actually\ncreate a string variable.\n\n272\n00:18:26.790 --> 00:18:33.210\nLet's just set the string to\nbe a nice friendly hello.\n\n273\n00:18:33.210 --> 00:18:35.072\nSo sort of low level here.\n\n274\n00:18:35.072 --> 00:18:42.196\nIn data, we have a collection of one, two,\nthree, four, five characters, H-E-L-L-O.\n\n275\n00:18:42.196 --> 00:18:46.640\nSo what we're gonna do is iterate\nover each of these characters and\n\n276\n00:18:46.640 --> 00:18:51.740\nprint them out individually to\nthe console window using a for each loop.\n\n277\n00:18:51.740 --> 00:18:57.529\nThe way to use for each loop is\nby saying for, And then printing\n\n278\n00:18:57.529 --> 00:19:04.520\nout the kind of variable that you're using\nbecause string uses a character variables.\n\n279\n00:19:04.520 --> 00:19:05.615\nWe're gonna create a variable char.\n\n280\n00:19:11.135 --> 00:19:11.788\nCharacter.\n\n281\n00:19:14.989 --> 00:19:20.120\nAnd then use a colon, and then specify\nthe data that you're gonna iterate over.\n\n282\n00:19:20.120 --> 00:19:22.637\nIn this case, MyString.\n\n283\n00:19:22.637 --> 00:19:27.565\nAnd what this will do is it'll\niterate over each of these letters,\n\n284\n00:19:27.565 --> 00:19:33.727\nH-E-L-L-O and then set that letter to\nbe character, the character variable.\n\n285\n00:19:33.727 --> 00:19:38.368\nAnd then we just print out character\nto the console, like so in this for\n\n286\n00:19:38.368 --> 00:19:39.161\neach loop.\n\n287\n00:19:47.378 --> 00:19:48.663\nAnd there we have it.\n\n288\n00:19:48.663 --> 00:19:51.690\nZero, one, two, three,\nfour from our regular for loop.\n\n289\n00:19:51.690 --> 00:19:56.422\nAnd then our for each loop, H-E-L-L-O.\n\n290\n00:19:56.422 --> 00:20:02.830\nAnd for each loop are just a short hand\nway of writing a regular for loop.\n\n291\n00:20:02.830 --> 00:20:08.540\nI could say go through all the individual\ncharacters of this string.\n\n292\n00:20:10.170 --> 00:20:14.300\nThere's zero, one, two, three, fourth\ncharacter, and doing it that way, but\n\n293\n00:20:14.300 --> 00:20:16.900\na for each loop is just\na simpler way of writing that.\n\n294\n00:20:16.900 --> 00:20:20.020\n&gt;&gt; And I think there's some ancillary\nbenefits that you get for a for\n\n295\n00:20:20.020 --> 00:20:24.560\neach loop if you have something that\ncan be iterated through, right.\n\n296\n00:20:24.560 --> 00:20:27.720\nIterated is kind of this stacked term,\nbut it just means I'm\n\n297\n00:20:27.720 --> 00:20:31.470\ngonna start at the beginning and\nmove incrementally throughout.\n\n298\n00:20:31.470 --> 00:20:36.200\nSo for each has limited uses\ncompared to a standard for loop.\n\n299\n00:20:36.200 --> 00:20:37.540\nAm I correct about that?\n\n300\n00:20:37.540 --> 00:20:42.780\n&gt;&gt; Yeah, with a for each loop, you can\nonly use it for things that are iterable.\n\n301\n00:20:42.780 --> 00:20:45.320\nIterable is sort of\na programming term here.\n\n302\n00:20:45.320 --> 00:20:47.638\nIt means something that can,\n\n303\n00:20:47.638 --> 00:20:53.016\niterable data is data that can be\ndiscretely broken down into parts,\n\n304\n00:20:53.016 --> 00:20:58.500\nand then sort of iterated through\nthose parts in a way that make sense.\n\n305\n00:21:01.055 --> 00:21:03.780\nStrings being a kind of data that is,\nof course, iterable.\n\n306\n00:21:05.780 --> 00:21:11.210\nSo I believe the last thing we have\ntime for today is some jump statements.\n\n307\n00:21:12.440 --> 00:21:17.174\nThere are three jump statements\nthat I want to talk about.\n\n308\n00:21:17.174 --> 00:21:22.430\nThe first is break, second is continue,\nand the last is goto.\n\n309\n00:21:23.750 --> 00:21:30.090\nSo break, break is a statement that,\nit breaks out of loops.\n\n310\n00:21:31.740 --> 00:21:37.187\nSo let's say we were going to write a,\nMake\n\n311\n00:21:37.187 --> 00:21:42.025\nanother end line in our console\nwindow to separate our for loops.\n\n312\n00:21:45.570 --> 00:21:46.486\nSo let's say we have a while loop.\n\n313\n00:21:50.203 --> 00:21:57.868\nWhile i &lt; 10.\n\n314\n00:21:57.868 --> 00:22:00.043\nLet's use our integer again.\n\n315\n00:22:00.043 --> 00:22:01.411\nWe have an integer variable left over,\nright?\n\n316\n00:22:01.411 --> 00:22:08.722\nwhile, integer is less than 10.\n\n317\n00:22:12.143 --> 00:22:13.018\nLet's just print out integer.\n\n318\n00:22:20.650 --> 00:22:22.944\nAnd then the integer go up by 1.\n\n319\n00:22:27.195 --> 00:22:31.875\nNow inside of our console we were to run\nthis, we'd go through 0, 1, 2, 3, 4,\n\n320\n00:22:31.875 --> 00:22:33.183\n5, 6, 7, 8, 9.\n\n321\n00:22:33.183 --> 00:22:38.173\nBut let's say we want to\nactually stop this loop\n\n322\n00:22:38.173 --> 00:22:43.300\nwhenever integer is equal to 5 for\nsome reason.\n\n323\n00:22:44.350 --> 00:22:49.641\nSo using our old if statement,\nif integer is equal to,\n\n324\n00:22:49.641 --> 00:22:55.517\nusing the equals operator, 5,\njust going to write break.\n\n325\n00:22:57.863 --> 00:23:01.799\nSo what this does, once again,\nbreaks out of loop.\n\n326\n00:23:01.799 --> 00:23:04.713\nSo every time integer is equal to 5,\n\n327\n00:23:04.713 --> 00:23:09.695\nwe're going to end the loop and\njust continue on with our code.\n\n328\n00:23:09.695 --> 00:23:13.841\nWe're only going to be able to print 0,\n1, 2, 3,\n\n329\n00:23:13.841 --> 00:23:17.013\n4 instead of our previous 0 through 9.\n\n330\n00:23:17.013 --> 00:23:18.620\nAnd that is what break does.\n\n331\n00:23:20.440 --> 00:23:22.880\nNow continue,\ncontinue does something similar.\n\n332\n00:23:23.910 --> 00:23:29.556\nBut instead of actually breaking out\nof the entire loop ,what continue\n\n333\n00:23:29.556 --> 00:23:35.596\nwill do is go to the end of the loop, and\nthen sort of keep on iterating there.\n\n334\n00:23:35.596 --> 00:23:40.755\nSo if we were to put our if statement,\ninteger == five.\n\n335\n00:23:40.755 --> 00:23:44.895\nWhenever integer is equal to\n5 inside of this while loop,\n\n336\n00:23:44.895 --> 00:23:48.452\ninstead of breaking,\nwe're going to continue.\n\n337\n00:23:48.452 --> 00:23:52.440\nContinue, and what this does,\nlogically speaking,\n\n338\n00:23:52.440 --> 00:23:57.640\nit's gonna continue then it will skip\nto the bottom of the while loop And\n\n339\n00:23:57.640 --> 00:24:02.579\nthen it's going to do the conditional\nevaluation since 5 is indeed\n\n340\n00:24:02.579 --> 00:24:06.670\nless than 10,\nit will keep ongoing at the while loop.\n\n341\n00:24:06.670 --> 00:24:11.727\nSo showing inside the console\nwhatever integer is equal to 5.\n\n342\n00:24:18.477 --> 00:24:22.530\nWe will hit 0, 1, 2, 3, 4.\n\n343\n00:24:25.120 --> 00:24:28.800\nAnd we should've gotten to,\n\n344\n00:24:28.800 --> 00:24:32.910\nwe should've skipped 5 right there,\nbut we didn't.\n\n345\n00:24:34.490 --> 00:24:40.477\nNot sure why, but for now let's hurry\nup and go to the go to statement.\n\n346\n00:24:43.007 --> 00:24:48.340\nSo go to, I need to say that\ngo to is a very bad statement.\n\n347\n00:24:48.340 --> 00:24:51.400\nThis is a bit of a personal rant here,\nbut a lot of programmers will agree,\n\n348\n00:24:51.400 --> 00:24:54.400\nyou really shouldn't use\ngo to inside of your code.\n\n349\n00:24:54.400 --> 00:24:56.340\nIt's low level,\n\n350\n00:24:56.340 --> 00:25:01.230\nit works very closely with the actual\nmachine implementation of the program.\n\n351\n00:25:01.230 --> 00:25:02.550\nIt can cause a lot of bugs.\n\n352\n00:25:02.550 --> 00:25:04.640\nIt makes your code hard to debug.\n\n353\n00:25:04.640 --> 00:25:05.890\nIt's just nasty.\n\n354\n00:25:05.890 --> 00:25:07.240\nI wanna show it to you, just so\n\n355\n00:25:07.240 --> 00:25:09.834\nthat whenever you actually do\nsee it inside of a project,\n\n356\n00:25:09.834 --> 00:25:14.310\nyou can know that you should probably\nrewrite that section of code entirely.\n\n357\n00:25:14.310 --> 00:25:18.569\nBut just to show you how it works, let's\nsay I have an integer i, it's gonna be\n\n358\n00:25:18.569 --> 00:25:24.230\nequal to 0 and\nthen we're gonna write a new label.\n\n359\n00:25:26.070 --> 00:25:30.131\nThis label is gonna be a part\nwhere our go to is gonna\n\n360\n00:25:30.131 --> 00:25:32.568\nenable us to go to it later on.\n\n361\n00:25:36.540 --> 00:25:37.850\nLets call the label, go to label.\n\n362\n00:25:38.880 --> 00:25:42.930\nSo, nice and simple and\nthen I'm just gonna increment i up.\n\n363\n00:25:44.900 --> 00:25:46.686\nPrint out i to the console.\n\n364\n00:25:52.402 --> 00:25:58.212\nAnd then, if i is less than 5,\n\n365\n00:25:58.212 --> 00:26:02.236\ngoto the GotoLabel.\n\n366\n00:26:07.527 --> 00:26:10.977\nNeed a semicolon here,\ndon't forget your semicolon.\n\n367\n00:26:16.580 --> 00:26:20.115\nAnd then just to keep everything nice and\ntidy I will move this back one, all right.\n\n368\n00:26:22.193 --> 00:26:26.150\nThis is sort of a pseudo loop\nthat we made in ourselves.\n\n369\n00:26:30.349 --> 00:26:31.329\nAt the very end.\n\n370\n00:26:33.997 --> 00:26:35.380\nSomething odd is happening.\n\n371\n00:26:36.820 --> 00:26:40.398\n&gt;&gt; Take note Jacob, I'm thinking it\nmight be because that while loop.\n\n372\n00:26:40.398 --> 00:26:44.717\nI'm wondering if that while loop with the\ncontinue is somehow blocking additional\n\n373\n00:26:44.717 --> 00:26:45.950\nexecution there.\n\n374\n00:26:45.950 --> 00:26:49.480\n&gt;&gt; It seems so, we're not even\nprinting out anything with our little\n\n375\n00:26:49.480 --> 00:26:50.450\nGotoLabel here.\n\n376\n00:26:52.180 --> 00:26:54.856\nCould continue be going to\nthe end of the main function?\n\n377\n00:26:54.856 --> 00:27:00.770\n&gt;&gt; Actually I said it, real quick\nquestion, should, if we're continuing and\n\n378\n00:27:00.770 --> 00:27:05.190\nwe're continuing back to the top at 5,\nwould we ever actually be\n\n379\n00:27:05.190 --> 00:27:10.056\nincrementing to reach a termination\ncondition within that while loop?\n\n380\n00:27:10.056 --> 00:27:15.376\n&gt;&gt; You got it, you figured out the bug.\n\n381\n00:27:15.376 --> 00:27:20.280\nSo, if integer = 5,\ninstead of just continuing and\n\n382\n00:27:20.280 --> 00:27:23.410\nmaking the integer stay 5, we're just\ngonna increment it really quick.\n\n383\n00:27:26.080 --> 00:27:28.320\nThere it is, okay.\n\n384\n00:27:28.320 --> 00:27:30.250\nSo if it's 5,\nyou don't actually print out 5,\n\n385\n00:27:30.250 --> 00:27:33.275\nwe just increment it and go up 1 anyway.\n\n386\n00:27:33.275 --> 00:27:39.870\nSo here we go, all right, I'm gonna put\nanother break point or another end line.\n\n387\n00:27:40.940 --> 00:27:43.982\nJust to separate our continues and\nbreak while loop.\n\n388\n00:27:55.829 --> 00:28:00.637\nAnd showing that the console,\nthis is our y loop section, it goes 0,\n\n389\n00:28:00.637 --> 00:28:03.253\n1, 2, 3, 4, 6, 7, 8, 9.\n\n390\n00:28:03.253 --> 00:28:07.540\nIt skips that printing out the 5 because\nit continues to the end of the loop.\n\n391\n00:28:07.540 --> 00:28:10.278\nSo that's how continue works and\n\n392\n00:28:10.278 --> 00:28:16.868\nour go to,\nI could actually get to the console.\n\n393\n00:28:16.868 --> 00:28:21.008\nIt froze, but anyway go to,\n\n394\n00:28:21.008 --> 00:28:25.500\nyeah Visual Studio is frozen.\n\n395\n00:28:26.590 --> 00:28:30.780\n&gt;&gt; I will tell you, like you said,\nyou should probably stay away from Goto\n\n396\n00:28:30.780 --> 00:28:35.300\nstatements, because of things, I mean\nit's hard to track, it's hard to debug.\n\n397\n00:28:35.300 --> 00:28:39.915\nThese exact things were like, well oops I\naccidentally had an infinite loop where\n\n398\n00:28:39.915 --> 00:28:41.930\nyour just kinda just turning away and\n\n399\n00:28:41.930 --> 00:28:46.162\nyou're not going to know that cuz go tos\nare gonna either going to use labels.\n\n400\n00:28:46.162 --> 00:28:51.132\nAnd I know in some older languages\nthey use line numbers and it was pure\n\n401\n00:28:51.132 --> 00:28:56.440\nshenanigans, so this is teaching\nby counter example, don't do this.\n\n402\n00:28:56.440 --> 00:28:59.218\n&gt;&gt; Yeah, go to just would have made\nthat little debugging session a little\n\n403\n00:28:59.218 --> 00:28:59.785\nmore harder.\n\n404\n00:28:59.785 --> 00:29:06.690\nBut anyway, under GotoLabel, here's the\nresult of our sort of pseudo loop here.\n\n405\n00:29:06.690 --> 00:29:09.240\n1, 2, 3, 4, 5, it's what's happening.\n\n406\n00:29:09.240 --> 00:29:14.089\nWe're just printing out 1 and then going\nback to the label, incrementing up and\n\n407\n00:29:14.089 --> 00:29:15.670\nprinting out another 1.\n\n408\n00:29:15.670 --> 00:29:20.616\nAnd then, of course,\ni eventually became greater than 5.\n\n409\n00:29:20.616 --> 00:29:24.810\nAnd we got to the end of the main\nmethod and returns zero and\n\n410\n00:29:24.810 --> 00:29:26.020\nthat was the end of our execution.\n\n411\n00:29:27.550 --> 00:29:31.890\n&gt;&gt; Now Jacob, is this all of our\ncontrol flow statements entirely?\n\n412\n00:29:31.890 --> 00:29:36.270\nAre we going to use these more or\nless to manage logic, and\n\n413\n00:29:36.270 --> 00:29:39.180\niteration and\nthings within our C++ programs?\n\n414\n00:29:39.180 --> 00:29:42.252\n&gt;&gt; You're absolutely right, as a\nprogrammer these are going to be your main\n\n415\n00:29:42.252 --> 00:29:43.946\ntools that you use to get your work done.\n\n416\n00:29:46.768 --> 00:29:50.006\nIt does help to be familiar with\nthem as much as possible, but\n\n417\n00:29:50.006 --> 00:29:53.150\nI think that is all we have time for\ntoday.\n\n418\n00:29:53.150 --> 00:29:55.940\n&gt;&gt; All right, well Jacob you've\ndefinitely taken us on a,\n\n419\n00:29:55.940 --> 00:29:57.890\nnice little tour of all the structures.\n\n420\n00:29:57.890 --> 00:30:00.390\nWell, I guess processes,\n\n421\n00:30:00.390 --> 00:30:03.890\nit's really hard to give a single term\nthat collectively justifies this.\n\n422\n00:30:03.890 --> 00:30:05.630\nWe've looked at control flow statements.\n\n423\n00:30:05.630 --> 00:30:09.680\nBut we're not finished with C++, so\ndefinitely stay tuned for more episodes.\n\n424\n00:30:09.680 --> 00:30:12.240\nBut for this episode,\nwe're going to go ahead and wrap it up.\n\n425\n00:30:12.240 --> 00:30:15.400\nSo signing off for DevProTV,\nI've been your host, Justin Dennison.\n\n426\n00:30:15.400 --> 00:30:16.060\n&gt;&gt; Jacob Armstrong.\n\n427\n00:30:16.060 --> 00:30:17.896\n&gt;&gt; And we'll see you next time.\n\n428\n00:30:17.896 --> 00:30:24.020\n[MUSIC]\n\n",
          "vimeoId": "238769788"
        },
        {
          "description": "This episode will be about pointers, the data type that points to the memory addresses of other data.",
          "length": "1538",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-6-1-pointers-110817-PGM.00_25_29_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-6-1-pointers-110817-PGM.00_25_29_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-6-1-pointers-110817-PGM.00_25_29_27.Still001-sm.jpg",
          "title": "Pointers",
          "transcript": "",
          "vimeoId": "242249071"
        },
        {
          "description": "In this episode, we will talk about how classes can inherit their methods and variables from other classes, and how this can be used to reuse code.",
          "length": "1632",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-7-1-inheritance-110817-PGM.00_27_03_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-7-1-inheritance-110817-PGM.00_27_03_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-7-1-inheritance-110817-PGM.00_27_03_03.Still001-sm.jpg",
          "title": "Inheritance",
          "transcript": "",
          "vimeoId": "242248808"
        },
        {
          "description": "In this episode, we discuss polymorphism, the concept of classes being the same data type as their parents",
          "length": "1363",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-8-1-polymorphism-110817-PGM.00_24_05_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-8-1-polymorphism-110817-PGM.00_24_05_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-1-8-1-polymorphism-110817-PGM.00_24_05_24.Still001-sm.jpg",
          "title": "Polymorphism",
          "transcript": "",
          "vimeoId": "242249334"
        },
        {
          "description": "In this episode, we will go over arrays, the most basic structure for storing data.",
          "length": "1334",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-2-1-1-arrays-110817-PGM.00_22_07_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-2-1-1-arrays-110817-PGM.00_22_07_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtocplusplus/techskills-introtocpp-2-1-1-arrays-110817-PGM.00_22_07_10.Still001-sm.jpg",
          "title": "Arrays",
          "transcript": "",
          "vimeoId": "242595048"
        }
      ],
      "title": "Overview and Basics"
    }
  ],
  "url": "introplus-plus",
  "vLab": false
}
