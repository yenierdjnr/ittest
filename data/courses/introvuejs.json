{
  "description": "Vue.js is a new kid on the block when it comes to frontend JavaScript frameworks. Vue.js combines some of the feel of Angular and React while keeping the learning curve very small. If you know JavaScript, then you already know a good deal about Vue.js. In this series, you will learn how to get Vue.js setup, use data binding, see how to handle events and much more.",
  "descriptionMD": "Vue.js is a new kid on the block when it comes to frontend JavaScript frameworks. Vue.js combines some of the feel of Angular and React while keeping the learning curve very small. If you know JavaScript, then you already know a good deal about Vue.js. In this series, you will learn how to get Vue.js setup, use data binding, see how to handle events and much more.",
  "length": "35978",
  "name": "Intro to Vue.js",
  "practiceExam": false,
  "subtitle": "Reactive web framwork for the masses",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "Vue.js is a new kid on the block when it comes to frontend JavaScript frameworks. Vue.js combines some of the feel of Angular and React while keeping the learning curve very small. If you know JavaScript, then you already know a good deal about Vue.js. In this series, you will learn how to get Vue.js setup, use data binding, see how to handle events and much more.",
          "length": "114",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/introvuejs-0-0-overview-061417-PGM.00_00_05_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/introvuejs-0-0-overview-061417-PGM.00_00_05_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/introvuejs-0-0-overview-061417-PGM.00_00_05_21.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "221897424"
        },
        {
          "description": "In this episode, Daniel and Justin introduce you to the Vue.js web framework. Here they discuss what Vue is, how it compares to other web frameworks, and then employ Vue to create a simple application.",
          "length": "1596",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-1-1-our_first_application-051717.00_34_13_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-1-1-our_first_application-051717.00_34_13_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-1-1-our_first_application-051717.00_34_13_29.Still001-sm.jpg",
          "title": "Our First Application",
          "transcript": "",
          "vimeoId": "218148428"
        },
        {
          "description": "In this episode, Daniel and Justin continue their exploration of the Vue.js web framework. Here they explain Vue's use of data binding as well as show you how to obtain, install, and use the Vue development tools plugin for Chrome.",
          "length": "1696",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-2-1-data_binding_and_dev_tools-051717.00_28_01_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-2-1-data_binding_and_dev_tools-051717.00_28_01_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-2-1-data_binding_and_dev_tools-051717.00_28_01_01.Still001-sm.jpg",
          "title": "Data Binding and Dev Tools",
          "transcript": "",
          "vimeoId": "218459322"
        },
        {
          "description": "In this episode, Daniel and Justin continue their exploration of the Vue.js web framework. Here they show you how to increase Vue's functionality through the use of Methods.",
          "length": "1444",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-3-1-adding_methods-051717-PGM.00_26_14_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-3-1-adding_methods-051717-PGM.00_26_14_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-3-1-adding_methods-051717-PGM.00_26_14_27.Still001-sm.jpg",
          "title": "Adding Methods",
          "transcript": "",
          "vimeoId": "218148590"
        },
        {
          "description": "In this episode, Daniel and Justin look into how Vue.js can be used to handle events. Vue's event handling has the advantage of readability and speed, as it implements shortcuts to this end.",
          "length": "1260",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-1-handling_events-051817-PGM.00_27_52_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-1-handling_events-051817-PGM.00_27_52_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-1-handling_events-051817-PGM.00_27_52_17.Still001-sm.jpg",
          "title": "Handling Events",
          "transcript": "",
          "vimeoId": "218459543"
        },
        {
          "description": "In this episode, Daniel and Justin look into how Vue.js can be used to handle events. Vue's event handling has the advantage of readability and speed, as it implements shortcuts to this end.",
          "length": "1445",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-2-handling_events_pt2-051817-PGM.00_23_50_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-2-handling_events_pt2-051817-PGM.00_23_50_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-4-1-2-handling_events_pt2-051817-PGM.00_23_50_07.Still001-sm.jpg",
          "title": "Handling Events Part 2",
          "transcript": "",
          "vimeoId": "218459786"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at the Computed Properties function found in Vue.js. Here they will explain what a Computed Property is and how it's used. Then they will demonstrate a use case example, comparing it to the use of Methods and Watchers.",
          "length": "1209",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-5-1-computed_properties-051817-PGM.00_24_45_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-5-1-computed_properties-051817-PGM.00_24_45_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-5-1-computed_properties-051817-PGM.00_24_45_15.Still001-sm.jpg",
          "title": "Computed Properties",
          "transcript": "",
          "vimeoId": "218459660"
        },
        {
          "description": "In this episode, Daniel and Justin look into working with Vue.js Directives and Bindings. Here they explain more about what Directives are; taking you through a list of commonly used Directives. Then they demonstrate using a few of them like v-text and v-html.",
          "length": "1488",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-6-1-basic_directives_and_binding-051917-PGM.00_24_38_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-6-1-basic_directives_and_binding-051917-PGM.00_24_38_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-6-1-basic_directives_and_binding-051917-PGM.00_24_38_03.Still001-sm.jpg",
          "title": "Basic Directives and Binding",
          "transcript": "",
          "vimeoId": "218616334"
        },
        {
          "description": "Justin and Zach discuss building a Caesar Cipher web application covering design/creating the application, what is ROTn, basic layout of the project, set up of the project, buttons to adjust the shift, adapting previous code, typing in a text area & get an output, and working with charset.",
          "length": "1092",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-1-lets_build_it_caesar_cipher-052217-PGM.00_17_56_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-1-lets_build_it_caesar_cipher-052217-PGM.00_17_56_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-1-lets_build_it_caesar_cipher-052217-PGM.00_17_56_29.Still001-sm.jpg",
          "title": "Let's Build It: Caesar Cipher",
          "transcript": "",
          "vimeoId": "218785117"
        },
        {
          "description": "Justin and Zach conclude the study looking at adapting previous code, computed property for the ciphertext, why make this a computed property, proper code, purpose of the % charset.length, the ability to have negative shifts & shifts greater than 26, and more.",
          "length": "1300",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-2-lets_build_it_caesar_cipher_pt2-052217-PGM.00_21_25_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-2-lets_build_it_caesar_cipher_pt2-052217-PGM.00_21_25_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-7-1-2-lets_build_it_caesar_cipher_pt2-052217-PGM.00_21_25_17.Still001-sm.jpg",
          "title": "Let's Build It: Caesar Cipher Part 2",
          "transcript": "",
          "vimeoId": "218785237"
        },
        {
          "description": "Justin and Zach go over creating a basic Vue.js application, how Vue.js can help with repeated elements on web pages, the difference between simple array collection of numbers and strings & those containing more complex data types, creating a Vue.js application that demonstrates iterating through an array of objects, demonstrating how to use index as well as arrays of arrays, simple strings or numbers limitations, and  demonstrating the v-for directive for repeating elements based on collections.",
          "length": "1541",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-8-1-handling_data_collection-052217-PGM.00_25_26_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-8-1-handling_data_collection-052217-PGM.00_25_26_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-8-1-handling_data_collection-052217-PGM.00_25_26_02.Still001-sm.jpg",
          "title": "Handling Data Collections",
          "transcript": "",
          "vimeoId": "218785386"
        },
        {
          "description": "Justin and Zach discuss conditional rendering in Vue.js and why we would need or want to use it, which includes the similarities and differences between v-show and v-if and when to implement them.",
          "length": "1290",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-9-1-conditional_rendering-052317.00_21_14_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-9-1-conditional_rendering-052317.00_21_14_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-9-1-conditional_rendering-052317.00_21_14_28.Still001-sm.jpg",
          "title": "Conditional Rendering",
          "transcript": "",
          "vimeoId": "218785571"
        },
        {
          "description": "Justin and Zach cover the definition of reactive styling, why we would want to use it in Vue.js, how we get started using reactive stylings, demonstrating some of the various styles, having multiple styles bound to a single DOM element, plus other available options.",
          "length": "1373",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-10-1-reactive_styling-052317-PGM.00_23_56_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-10-1-reactive_styling-052317-PGM.00_23_56_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-10-1-reactive_styling-052317-PGM.00_23_56_25.Still001-sm.jpg",
          "title": "Reactive Styling",
          "transcript": "",
          "vimeoId": "218941794"
        },
        {
          "description": "Justin and Zach cover what using filters in Vue.js means, using filters as text transformations, how we go about using filters, using more than one filter, code needed, and general breakdown of why we use specific code in the process.",
          "length": "1353",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-11-1-filtereing_data-052317-PGM.00_22_20_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-11-1-filtereing_data-052317-PGM.00_22_20_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-11-1-filtereing_data-052317-PGM.00_22_20_12.Still001-sm.jpg",
          "title": "Filtering Data",
          "transcript": "",
          "vimeoId": "218979320"
        },
        {
          "description": "Justin and Zach discuss what is a component, how we begin to create a component, necessary code for same, and a look at simple layouts in components.",
          "length": "1341",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-12-1-1-our_first_component-052417-PGM.00_22_51_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-12-1-1-our_first_component-052417-PGM.00_22_51_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-12-1-1-our_first_component-052417-PGM.00_22_51_15.Still001-sm.jpg",
          "title": "Our First Component",
          "transcript": "",
          "vimeoId": "219093007"
        },
        {
          "description": "Justin and Zach continue the discussion of creating our first component, object-method-functions, what method is needed when we receive an unexpected token, and more.",
          "length": "1227",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-2-our_first_component_pt.2-052517-PGM.00_31_44_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-2-our_first_component_pt.2-052517-PGM.00_31_44_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-2-our_first_component_pt.2-052517-PGM.00_31_44_17.Still001-sm.jpg",
          "title": "Our First Component Part 2",
          "transcript": "",
          "vimeoId": "219093232"
        },
        {
          "description": "Justin and Zach conclude building the our first component, how state determines style, data attribute as a function instead of object, working with clickable Div, capitalization scheme for some components, why to use or not use capitalization in HTML, concluding with the basics of building our first component covered.",
          "length": "1098",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-3-our_first_component_pt3-052517-PGM.00_18_03_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-3-our_first_component_pt3-052517-PGM.00_18_03_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-12-1-3-our_first_component_pt3-052517-PGM.00_18_03_28.Still001-sm.jpg",
          "title": "Our First Component Part 3",
          "transcript": "",
          "vimeoId": "219093413"
        },
        {
          "description": "Justin and Zach cover what has been discussed in 'Our First Component (parts 1-2-3),' overview of reproducible pieces of layout functionally called components, what props are, code needed, how Vue components are used, how to create and change a 'Count' prop, using docs, are we limited to using only one prop on a component, passing in information to components using props, and more.",
          "length": "1735",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-13-1-our_first_components_with_props-052517-PGM.00_34_27_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-13-1-our_first_components_with_props-052517-PGM.00_34_27_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introtovuejs-13-1-our_first_components_with_props-052517-PGM.00_34_27_02.Still001-sm.jpg",
          "title": "Components with Props",
          "transcript": "",
          "vimeoId": "220013769"
        },
        {
          "description": "In this show, Cherokee and Justin discuss what an event is followed by DOM events and their relationship with JavaScript. Justin explains how events can propagate up to parent events through a bubble up process as a way to customize events. Tune in to see Justin demonstrate this in action with the use of a double click button as well as him setting the stage for a number input configuration.",
          "length": "1318",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-1-components_with_custom_events-061217-PGM.00_35_35_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-1-components_with_custom_events-061217-PGM.00_35_35_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-1-components_with_custom_events-061217-PGM.00_35_35_09.Still001-sm.jpg",
          "title": "Components with Custom Events",
          "transcript": "WEBVTT\n\n1\n00:00:00.220 --> 00:00:03.971\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:03.971 --> 00:00:10.576\n[CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n3\n00:00:10.576 --> 00:00:14.900\n&gt;&gt; Welcome to your Intro to Vue.js series.\n\n4\n00:00:14.900 --> 00:00:16.930\nI'm your show host Cherokee Boose.\n\n5\n00:00:16.930 --> 00:00:20.860\nIn this episode, we'll be taking a look\nat components with custom events.\n\n6\n00:00:20.860 --> 00:00:24.600\nAnd with us today, back in studios,\nwe have Mr. Justin Dennison.\n\n7\n00:00:24.600 --> 00:00:25.630\nHey, Justin.\nHow's it going?\n\n8\n00:00:25.630 --> 00:00:26.670\n&gt;&gt; It is going well.\n\n9\n00:00:26.670 --> 00:00:28.150\nBut more importantly, how are you today?\n\n10\n00:00:28.150 --> 00:00:29.310\n&gt;&gt; I'm doing super.\n\n11\n00:00:29.310 --> 00:00:32.290\nI mean, I can't be more excited,\nbut I am a little afraid.\n\n12\n00:00:32.290 --> 00:00:33.100\nI have to admit that.\n\n13\n00:00:33.100 --> 00:00:34.260\nI'm a little scared.\n\n14\n00:00:34.260 --> 00:00:37.290\nI'm not really sure I understand\nwhat all this terminology is.\n\n15\n00:00:37.290 --> 00:00:39.010\nI'm brand new to this series, and\n\n16\n00:00:39.010 --> 00:00:42.020\nI would really enjoy if you could\nexplain to me what an event is.\n\n17\n00:00:42.020 --> 00:00:44.230\n&gt;&gt; Well, Cherokee, we do have a problem.\n\n18\n00:00:44.230 --> 00:00:46.322\nBecause I thought you knew and\nyou were gonna explain to me.\n\n19\n00:00:46.322 --> 00:00:48.410\n&gt;&gt; [LAUGH]\n&gt;&gt; I have nothing prepared.\n\n20\n00:00:48.410 --> 00:00:50.860\n&gt;&gt; All right,\nwe are in the wrong place then.\n\n21\n00:00:50.860 --> 00:00:52.810\n&gt;&gt; No, we got a problem, right?\n\n22\n00:00:52.810 --> 00:00:54.230\nAnd what is an event?\n\n23\n00:00:54.230 --> 00:00:57.800\nI'm talking about events specifically\nin the DOM, and what is the DOM?\n\n24\n00:00:57.800 --> 00:00:59.810\nWell, we'll just say it's our web page for\nnow.\n\n25\n00:00:59.810 --> 00:01:03.910\nOur browser fires off all these events\nwhen we're clicking around and moving and\n\n26\n00:01:03.910 --> 00:01:05.510\nscrolling and things.\n\n27\n00:01:05.510 --> 00:01:10.600\nAnd those are the events that we're gonna\nessentially gonna be talking about.\n\n28\n00:01:10.600 --> 00:01:14.020\nBut with custom ones we can\nhave events like cheeseburger.\n\n29\n00:01:14.020 --> 00:01:17.740\nAnd then our app does something in\nresponse to the cheeseburger event.\n\n30\n00:01:17.740 --> 00:01:19.600\nBefore we worry about custom events.\n\n31\n00:01:19.600 --> 00:01:22.780\nLet's do a quick reminder\nabout what are DOM events.\n\n32\n00:01:22.780 --> 00:01:25.140\nSo lets go ahead and\nhop into my computer screen.\n\n33\n00:01:25.140 --> 00:01:26.642\nHop into it, yeah.\n\n34\n00:01:26.642 --> 00:01:28.670\nWe're gonna take a look at it,\nnot hop into it.\n\n35\n00:01:28.670 --> 00:01:30.300\nBut that's all right.\n\n36\n00:01:30.300 --> 00:01:32.490\nI have well something.\n\n37\n00:01:32.490 --> 00:01:37.110\nHere we go.\nI have my project open, it works.\n\n38\n00:01:37.110 --> 00:01:38.230\nAll good to go.\n\n39\n00:01:38.230 --> 00:01:41.750\nAnd then well,\nI just have some basic HTML.\n\n40\n00:01:41.750 --> 00:01:44.650\nAnd a simple view js application up and\nrunning.\n\n41\n00:01:44.650 --> 00:01:46.550\nBut for now I'm gonna comment that out.\n\n42\n00:01:46.550 --> 00:01:47.880\nLet's zoom in a little bit.\n\n43\n00:01:47.880 --> 00:01:49.680\nThat's kinda small.\n\n44\n00:01:49.680 --> 00:01:51.620\nAnd hide the sidebar, there we go.\n\n45\n00:01:52.910 --> 00:01:54.260\nSo let's take a look at events.\n\n46\n00:01:54.260 --> 00:01:57.110\nWell, I don't wanna actually delete that.\n\n47\n00:01:57.110 --> 00:01:59.530\nBut I'm gonna get rid of\nview on the page for now.\n\n48\n00:01:59.530 --> 00:02:04.720\nBecause sometimes it hijacks the eventing\nsystem and makes it do weird things.\n\n49\n00:02:04.720 --> 00:02:07.605\nBut let's talk about click events.\n\n50\n00:02:07.605 --> 00:02:11.040\nOne is the most common thing that you do\non a web page, when you click something.\n\n51\n00:02:11.040 --> 00:02:11.960\n&gt;&gt; Sure.\n\n52\n00:02:11.960 --> 00:02:16.710\n&gt;&gt; And those clicks can fire off events\nbecause everything on a web page\n\n53\n00:02:16.710 --> 00:02:20.730\nis an event target that can be clicked,\nomits-\n\n54\n00:02:20.730 --> 00:02:21.792\n&gt;&gt; Initiate something.\n\n55\n00:02:21.792 --> 00:02:24.358\n&gt;&gt; Initiate something.\nSo let's just do button, and\n\n56\n00:02:24.358 --> 00:02:26.529\nlet's give it an ID of clicky.\n\n57\n00:02:26.529 --> 00:02:27.630\nIt's a clicky button.\n\n58\n00:02:27.630 --> 00:02:30.634\nAnd it says [CROSSTALK] Yep,\nclickity click, click, click me.\n\n59\n00:02:30.634 --> 00:02:36.920\nAnd then we're just going to say\nconst button document.querySelector.\n\n60\n00:02:36.920 --> 00:02:39.574\nNow, if you have no idea what I'm doing.\n\n61\n00:02:39.574 --> 00:02:42.233\nThen you should definitely go\ncheck out some other videos in\n\n62\n00:02:42.233 --> 00:02:45.100\nour series where I talk\nabout these more in depth.\n\n63\n00:02:45.100 --> 00:02:47.670\nSpecifically, Intro to Web Development.\n\n64\n00:02:47.670 --> 00:02:49.800\nSo,\n&gt;&gt; Sounds like a great idea, Justin.\n\n65\n00:02:49.800 --> 00:02:51.710\n&gt;&gt; Yeah, it does, does it not?\n\n66\n00:02:51.710 --> 00:02:53.920\nIt is like I have planned it, Cherokee.\n\n67\n00:02:53.920 --> 00:02:56.970\nAnd it's, well,\nI like to take credit for it.\n\n68\n00:02:56.970 --> 00:02:58.108\nSo.\n&gt;&gt; [LAUGH]\n\n69\n00:02:58.108 --> 00:03:01.146\n&gt;&gt; So button.addEventListener, and\n\n70\n00:03:01.146 --> 00:03:02.550\nwe're almost there.\n\n71\n00:03:02.550 --> 00:03:03.510\nThere's a lot of typing.\n\n72\n00:03:03.510 --> 00:03:05.250\nSadly, there's, well.\n\n73\n00:03:05.250 --> 00:03:09.160\nRobusity is great,\nonly if it adds clarity.\n\n74\n00:03:09.160 --> 00:03:12.840\nI know what's going on, I'm quitting the\ndocuments selecting the clicky button and\n\n75\n00:03:12.840 --> 00:03:14.340\nI'm adding an event listener.\n\n76\n00:03:14.340 --> 00:03:18.472\nNow, all I'm gonna do right now,\n\n77\n00:03:18.472 --> 00:03:23.039\nis say console.log, button click.\n\n78\n00:03:23.039 --> 00:03:26.959\nSo I'm using some of these new features\njust to keep things very simple.\n\n79\n00:03:26.959 --> 00:03:30.570\nBut let's go see what\nhappens on our webpage.\n\n80\n00:03:30.570 --> 00:03:33.980\nAnd I'm gonna zoom in here and\nI'm gotta refresh.\n\n81\n00:03:33.980 --> 00:03:36.750\nAnd there's the Click and then if I click,\nnotice that the button has click.\n\n82\n00:03:36.750 --> 00:03:40.270\nBut the add event listener,\nall I did was register a hand alert.\n\n83\n00:03:40.270 --> 00:03:43.795\nWhen I clicked the button, there was a,\nhey this button was clicked.\n\n84\n00:03:43.795 --> 00:03:47.886\nAnd because that button was clicked,\nthe event hand alert ran.\n\n85\n00:03:47.886 --> 00:03:52.635\nAlong with this I get a pack of\ninformation specifically the event\n\n86\n00:03:52.635 --> 00:03:54.050\nobject in the DOM.\n\n87\n00:03:54.050 --> 00:03:56.750\nNow, I want you to keep this\nin mind because when we start\n\n88\n00:03:56.750 --> 00:04:00.370\nbuilding out own custom of events\nthere's gonna be some differences.\n\n89\n00:04:00.370 --> 00:04:03.480\nSo, we need the use this\nas the primer to build up.\n\n90\n00:04:03.480 --> 00:04:05.840\nAll right, so how does that work?\n\n91\n00:04:05.840 --> 00:04:09.800\nI'm gonna grab and e here and\nthat's the short for an event.\n\n92\n00:04:09.800 --> 00:04:14.780\nPut an e here and now when I click this,\nI get a MouseEvent object.\n\n93\n00:04:14.780 --> 00:04:18.850\nThat gives me all kinds of information\nabout how this event was initiated\n\n94\n00:04:18.850 --> 00:04:21.650\nspecifically the target here.\n\n95\n00:04:21.650 --> 00:04:23.750\nIt was the button clicky.\n\n96\n00:04:23.750 --> 00:04:28.980\nSo the target, the source, also some other\nthings, what type of event and such.\n\n97\n00:04:28.980 --> 00:04:30.990\nBut it's look like you\nhave a question Cherokee?\n\n98\n00:04:30.990 --> 00:04:32.440\n&gt;&gt; I do, I'm just so perplexed.\n\n99\n00:04:32.440 --> 00:04:36.280\nI'm wondering you didn't specify that\nkind of parameters like the background or\n\n100\n00:04:36.280 --> 00:04:37.290\nthe font color here.\n\n101\n00:04:37.290 --> 00:04:40.590\nSo, are we dealing with a boiler plate or\nsome kind of template?\n\n102\n00:04:40.590 --> 00:04:43.360\nVersus what we'll be looking\nat is going to be customizable\n\n103\n00:04:43.360 --> 00:04:45.850\n&gt;&gt; So are you talking about\n\n104\n00:04:45.850 --> 00:04:47.670\nin context of like this?\n\n105\n00:04:47.670 --> 00:04:51.592\n&gt;&gt; On the left on the GUI\n&gt;&gt; On the GUI I was just playing Jane I'm\n\n106\n00:04:51.592 --> 00:04:56.171\ngoing to keep it ugly I'm more of a\nfunctionality than I am a styling person.\n\n107\n00:04:56.171 --> 00:04:56.708\n&gt;&gt; Okay.\n\n108\n00:04:56.708 --> 00:04:59.160\n&gt;&gt; It's just what comes\nstandard in my browser.\n\n109\n00:04:59.160 --> 00:05:01.715\nBackground's light, buttons look horrible.\n\n110\n00:05:01.715 --> 00:05:04.250\n&gt;&gt; [LAUGH]\n&gt;&gt; We're going to stay with that.\n\n111\n00:05:04.250 --> 00:05:06.420\n&gt;&gt; Okay.\nAll right so I had this mouse event,\n\n112\n00:05:06.420 --> 00:05:09.190\nand I can get a bunch of information.\n\n113\n00:05:09.190 --> 00:05:13.300\nBut this is program, this is kind of\nunderlying of the browser implementation.\n\n114\n00:05:13.300 --> 00:05:16.540\nI'm not doing this other\nthan adding a handler and\n\n115\n00:05:16.540 --> 00:05:19.619\ntaking the event object as\na parameter to my function.\n\n116\n00:05:20.720 --> 00:05:25.670\nSo I'm saying when I get e and the first\nvalue always passed is the event object\n\n117\n00:05:25.670 --> 00:05:28.100\nfor anything that is add event listener.\n\n118\n00:05:28.100 --> 00:05:30.720\nWhen I grab the e, it's just gonna click.\n\n119\n00:05:30.720 --> 00:05:32.943\nNow, there are some other\nevents that I can listen for.\n\n120\n00:05:32.943 --> 00:05:34.858\nAnd lets double click.\n\n121\n00:05:34.858 --> 00:05:40.770\nAnd I refresh and notice I clicked\nslowly one time, slowly one time.\n\n122\n00:05:40.770 --> 00:05:45.350\nBut now if I do the rapid double click,\nI get the mouse event again but\n\n123\n00:05:45.350 --> 00:05:47.940\nI get a different type of event object.\n\n124\n00:05:47.940 --> 00:05:50.730\nBut pretty much everything\nelse looks the same.\n\n125\n00:05:50.730 --> 00:05:52.850\nSo this is getting fired off and\n\n126\n00:05:52.850 --> 00:05:57.310\nI'm responding to that\nevent kind of being fired.\n\n127\n00:05:57.310 --> 00:05:59.190\nWe're just gonna say fired off.\n\n128\n00:05:59.190 --> 00:06:02.440\nIs a terminology that I use\na great deal so we'll use it.\n\n129\n00:06:02.440 --> 00:06:06.800\nBut one other thing that we need to see\nhappen that maybe you haven't seen before.\n\n130\n00:06:06.800 --> 00:06:11.610\nMaybe I was not specific in previous\nusage events because I'm typically\n\n131\n00:06:11.610 --> 00:06:13.300\nlooking at a single element.\n\n132\n00:06:13.300 --> 00:06:21.010\nIf I take this button and I wrap it\ninside of a parent element, like a div.\n\n133\n00:06:21.010 --> 00:06:24.560\nAnd let's say I give\nthis the ID of parentDiv.\n\n134\n00:06:26.490 --> 00:06:31.410\nAnd I take this button and\nI move it inside like so.\n\n135\n00:06:32.740 --> 00:06:37.061\nAnd now,\nI'm gonna grab a reference to the div\n\n136\n00:06:40.511 --> 00:06:42.800\nMaybe, there we go.\n\n137\n00:06:42.800 --> 00:06:47.788\nAnd this is parentDiv And\n\n138\n00:06:47.788 --> 00:06:51.950\nwe're gonna say div.addEventListener,\nand let's say click.\n\n139\n00:06:51.950 --> 00:06:54.270\nAnd I'm gonna make these events the same.\n\n140\n00:06:56.550 --> 00:06:57.640\nAnd here we go.\n\n141\n00:06:59.220 --> 00:07:03.520\nAnd actually I'm gonna remove these event\nobjects because I just wanna see how they\n\n142\n00:07:03.520 --> 00:07:04.200\nkind of run.\n\n143\n00:07:05.880 --> 00:07:11.650\nSo this is gonna say div, and\nthis is going to say button.\n\n144\n00:07:11.650 --> 00:07:13.740\nNow, some of you are probably\nlooking at this,\n\n145\n00:07:13.740 --> 00:07:17.670\ngoing, you're just showing us the same\nthing over and over and over again.\n\n146\n00:07:17.670 --> 00:07:20.460\nWell, there's a key point that I want\n\n147\n00:07:20.460 --> 00:07:24.290\nto pull along because this is going to\nbe important to how we use this in view.\n\n148\n00:07:24.290 --> 00:07:26.370\nAnd let's just take a look at it.\n\n149\n00:07:26.370 --> 00:07:30.870\nIf I click, notice button,\nthe event handler for\n\n150\n00:07:30.870 --> 00:07:33.890\nbutton runs, but also the one for div.\n\n151\n00:07:33.890 --> 00:07:36.040\nI haven't actually\nclicked the div per say-\n\n152\n00:07:36.040 --> 00:07:37.690\n&gt;&gt; But just in case.\n\n153\n00:07:37.690 --> 00:07:43.287\n&gt;&gt; But just in case, I wrapped an event\nhandler around the parent object and\n\n154\n00:07:43.287 --> 00:07:45.223\nevents kinda bubble up.\n\n155\n00:07:45.223 --> 00:07:50.401\nSo that's how events work in the DOM but\nyou know we're gonna\n\n156\n00:07:50.401 --> 00:07:56.123\nuse this to keep on build custom\ncomponents with custom events.\n\n157\n00:07:56.123 --> 00:07:57.389\nExcuse me, there we go.\n\n158\n00:07:57.389 --> 00:07:58.751\nLost my train of thought.\n\n159\n00:07:58.751 --> 00:08:00.861\nBut yeah, that's that's an event.\n\n160\n00:08:00.861 --> 00:08:05.294\n&gt;&gt; Okay, after we take a look at our DOM\nevents that were utilizing this with our\n\n161\n00:08:05.294 --> 00:08:09.470\nJavaScript so why do we care about\nthese events in terms of components.\n\n162\n00:08:09.470 --> 00:08:12.163\nI mean that's really what we're here\n&gt;&gt; That and that is why we're here.\n\n163\n00:08:12.163 --> 00:08:15.900\nLike you've been talking about a bunch and\nnot in Justin.\n\n164\n00:08:15.900 --> 00:08:20.190\nAnd that's that's okay, let's back\nout of this, let's get rid of this.\n\n165\n00:08:20.190 --> 00:08:21.680\nThis is no good.\n\n166\n00:08:21.680 --> 00:08:23.340\nWe're here about view.\n\n167\n00:08:23.340 --> 00:08:28.870\nAll right, so let's uncomment this,\nmake sure everything still works.\n\n168\n00:08:28.870 --> 00:08:32.640\nGet back to our standard application and\nboom.\n\n169\n00:08:33.970 --> 00:08:36.072\nAnd there's our message so\nwe're up and good to go.\n\n170\n00:08:36.072 --> 00:08:40.914\nAll right, so before we get started\nI want to take a look at the Vue\n\n171\n00:08:40.914 --> 00:08:44.233\njs documentation so\nwhen I look at the API and\n\n172\n00:08:44.233 --> 00:08:49.740\nlet's scroll down there should be\nan events right here, there we go.\n\n173\n00:08:49.740 --> 00:08:56.300\nSo instant methods events, so I gonna\nclick on event, all right so, okay.\n\n174\n00:08:56.300 --> 00:08:58.710\nListen for a custom event for\nthe current VM\n\n175\n00:09:00.290 --> 00:09:05.265\nanything you need to know can\nbe in these four methods.\n\n176\n00:09:05.265 --> 00:09:09.199\n$on, $once, $off and $omit.\n\n177\n00:09:09.199 --> 00:09:13.990\nThere's a couple other ways that we know\nabout binding events and event handling.\n\n178\n00:09:13.990 --> 00:09:16.380\nBut what are we ultimately gonna do?\n\n179\n00:09:16.380 --> 00:09:20.700\nWell, let's build something and\njust see how this works out.\n\n180\n00:09:20.700 --> 00:09:25.220\nAnd then hopefully that will\nprovide greater context.\n\n181\n00:09:25.220 --> 00:09:27.682\nSo, you'll have to bear with me Cherokee,\n\n182\n00:09:27.682 --> 00:09:30.684\nI have to build out a little\nbit just to get this going.\n\n183\n00:09:30.684 --> 00:09:31.310\n&gt;&gt; No worries.\n\n184\n00:09:31.310 --> 00:09:34.010\nAnd I did have a question, too,\nabout as you're writing your syntax.\n\n185\n00:09:34.010 --> 00:09:37.470\nSo disclaimer, I'm not a developer, okay?\n\n186\n00:09:37.470 --> 00:09:41.151\nSo, the most I work with coding,\nI guess would be PowerShell,\n\n187\n00:09:41.151 --> 00:09:45.529\nin that particular syntax there and\nPowerShell utilizes something called\n\n188\n00:09:45.529 --> 00:09:49.088\nan IntelliSense in ISE integrated\nscripting environment.\n\n189\n00:09:49.088 --> 00:09:53.087\nBut what is that called I want to make\nsure I'm up with the terminology here,\n\n190\n00:09:53.087 --> 00:09:57.210\nwhen you're typing that and you have\nthat intuitive type I don't know if it's\n\n191\n00:09:57.210 --> 00:09:59.850\ncalled tab auto finish or\nwhat do you guys call it.\n\n192\n00:09:59.850 --> 00:10:05.050\n&gt;&gt; So I'm using a couple of my editor\nhas a couple of built in plugins\n\n193\n00:10:05.050 --> 00:10:10.070\nthat will allow me to like if I hit tab\nin HTML it will autocomplete for me.\n\n194\n00:10:10.070 --> 00:10:12.430\nThe massive dropdown list\nthat you're talking about?\n\n195\n00:10:12.430 --> 00:10:12.950\n&gt;&gt; Yeah.\n\n196\n00:10:12.950 --> 00:10:17.900\n&gt;&gt; It tends to be in more kind of\nfull development environments,\n\n197\n00:10:17.900 --> 00:10:22.330\nor a lot of times in Microsoft products\nyou'll have that IntelliSense.\n\n198\n00:10:22.330 --> 00:10:24.270\nI think that's technically a Microsoft.\n\n199\n00:10:24.270 --> 00:10:24.770\n&gt;&gt; Yeah.\n&gt;&gt; Trademark thing.\n\n200\n00:10:24.770 --> 00:10:25.665\nYeah, I think so, too.\n\n201\n00:10:25.665 --> 00:10:26.788\n&gt;&gt; So I'm trying to get like the right\n\n202\n00:10:26.788 --> 00:10:27.848\nversion here.\n&gt;&gt; Yeah, and\n\n203\n00:10:27.848 --> 00:10:31.953\npeople will use those synonymously, but\nI just think of it as an auto complete or\n\n204\n00:10:31.953 --> 00:10:34.220\na type ahead auto complete type thing.\n\n205\n00:10:34.220 --> 00:10:36.528\n&gt;&gt; Okay.\n&gt;&gt; Yap, so I'm gonna build a number input.\n\n206\n00:10:36.528 --> 00:10:38.210\nLet's set the stage here.\n\n207\n00:10:38.210 --> 00:10:41.170\nSo what I want is a simple component\n\n208\n00:10:41.170 --> 00:10:44.070\nthat will bubble up to\nthe parent view instance here.\n\n209\n00:10:44.070 --> 00:10:46.310\nSo here's my view application.\n\n210\n00:10:46.310 --> 00:10:51.390\nAnd what I want is if I'm typing\na certain number of input, if I\n\n211\n00:10:51.390 --> 00:10:57.610\ntype anything that is not a number, well,\nthat's going to throw an error of it.\n\n212\n00:10:57.610 --> 00:10:59.780\nAnd then my view instance can handle it.\n\n213\n00:10:59.780 --> 00:11:03.890\nAll right, so, let's just see\nhow this place out well, and\n\n214\n00:11:03.890 --> 00:11:05.140\nbuilding it very simply.\n\n215\n00:11:05.140 --> 00:11:07.090\nI'm not gonna handle any of the errors or\nanything.\n\n216\n00:11:07.090 --> 00:11:10.770\nI'm just gonna bubble up an event so\nwe can see what's going on.\n\n217\n00:11:10.770 --> 00:11:12.750\nI'm setting up my component here, and\n\n218\n00:11:12.750 --> 00:11:17.560\nI have a template, but\nI haven't built a template yet.\n\n219\n00:11:17.560 --> 00:11:18.460\nSo here we go.\n\n220\n00:11:18.460 --> 00:11:23.270\nLet's just say checker and\nthat's going to take some event.\n\n221\n00:11:23.270 --> 00:11:26.350\nAnd just say console.log, all right?\n\n222\n00:11:26.350 --> 00:11:30.070\nSo this is a little bit of review from,\nfrom view, that's hard to say,\n\n223\n00:11:30.070 --> 00:11:31.140\nreview of view.\n\n224\n00:11:31.140 --> 00:11:32.494\n&gt;&gt; We're gonna be\nreviewing some view today.\n\n225\n00:11:32.494 --> 00:11:34.222\n&gt;&gt; [LAUGH]\n&gt;&gt; Yep, reviewing some view.\n\n226\n00:11:34.222 --> 00:11:37.835\nSo let's build this template here.\n\n227\n00:11:37.835 --> 00:11:43.070\nSo type=text/x-template,\n\n228\n00:11:43.070 --> 00:11:49.280\nand the ID is a form input, all right?\n\n229\n00:11:49.280 --> 00:11:51.450\nActually let's change then\nI don't like that name.\n\n230\n00:11:51.450 --> 00:11:52.647\nThat's not a good name.\n\n231\n00:11:52.647 --> 00:11:53.731\nHow about number input,\n\n232\n00:11:53.731 --> 00:11:56.323\ncuz that's actually descriptive\nabout what it's doing.\n\n233\n00:11:56.323 --> 00:11:57.127\n&gt;&gt; That's all we can put in.\n\n234\n00:11:57.127 --> 00:11:58.180\n&gt;&gt; Yeah, there we go.\n\n235\n00:11:58.180 --> 00:12:03.136\nSo I'm essentially wrapping a given\ninput just to demonstrate this so\n\n236\n00:12:03.136 --> 00:12:05.321\nwe can keep the problem small.\n\n237\n00:12:05.321 --> 00:12:08.890\nThis becomes a very powerful\nparadigm that we'll see in more.\n\n238\n00:12:08.890 --> 00:12:10.340\n&gt;&gt; With additional variables.\n\n239\n00:12:10.340 --> 00:12:10.900\n&gt;&gt; Yeah, yeah, yeah.\n\n240\n00:12:10.900 --> 00:12:13.620\n&gt;&gt; Okay.\nWe'll have a bunch of things going on\n\n241\n00:12:13.620 --> 00:12:14.720\nin later examples.\n\n242\n00:12:14.720 --> 00:12:19.020\nSo just bear with me here, so\nI'm gonna get an input of type text.\n\n243\n00:12:19.020 --> 00:12:23.692\nNow, if some of you have worked in HTML at\nall, well you'll know that I already get\n\n244\n00:12:23.692 --> 00:12:27.706\nthis number validation for free,\nthis is in a form element in HTML5.\n\n245\n00:12:27.706 --> 00:12:31.830\nI can actually make this type a number and\nI already can't type number.\n\n246\n00:12:31.830 --> 00:12:35.040\nBut we're gonna reimplement that using\nJavaScript because maybe I need additional\n\n247\n00:12:35.040 --> 00:12:38.590\nlogic other than not being\nable to type just numbers but\n\n248\n00:12:38.590 --> 00:12:43.440\nmaybe I wanna type just numbers except for\nthe number nine.\n\n249\n00:12:43.440 --> 00:12:46.190\nRight?\nI have some affliction to the number nine\n\n250\n00:12:46.190 --> 00:12:47.730\nand I wanna build that in.\n\n251\n00:12:47.730 --> 00:12:55.340\nSo just keep with me here and so\nI'm gonna run checker on input.\n\n252\n00:12:55.340 --> 00:13:00.590\nSo every time I type, this checker method\nis going to run on my component, okay?\n\n253\n00:13:00.590 --> 00:13:04.840\nNow I have to register this\ncomponent with my view instance.\n\n254\n00:13:04.840 --> 00:13:08.740\nSo components, there we go,\nand NumberInput.\n\n255\n00:13:10.970 --> 00:13:15.490\nAnd I think that will be good for now, we\njust wanna make sure that this is wired up\n\n256\n00:13:15.490 --> 00:13:21.530\nappropriately, so number input tab and,\nyep, there we go.\n\n257\n00:13:21.530 --> 00:13:25.430\nSo let's go check and make sure our\ncomponents are wired up appropriately\n\n258\n00:13:25.430 --> 00:13:28.220\nbefore we start adding\nadditional complexity.\n\n259\n00:13:29.300 --> 00:13:30.160\nMake sure you save.\n\n260\n00:13:30.160 --> 00:13:30.748\nThat's important.\n\n261\n00:13:30.748 --> 00:13:33.540\nUnexpected identifier.\n\n262\n00:13:33.540 --> 00:13:37.260\nWe get to go into a little bit of\ndebugging, and that's perfectly okay.\n\n263\n00:13:37.260 --> 00:13:37.880\nAnd there we go.\n\n264\n00:13:37.880 --> 00:13:39.290\nI forgot a comma right there.\n\n265\n00:13:41.490 --> 00:13:43.480\nHappens to the best of us.\n\n266\n00:13:43.480 --> 00:13:45.860\nSo, comma, refresh, and there we go.\n\n267\n00:13:45.860 --> 00:13:49.840\nNow if I come to the console this looks\nlike a normal input and actually,\n\n268\n00:13:49.840 --> 00:13:54.350\nif we look at the elements tag,\nthen this is just input.\n\n269\n00:13:54.350 --> 00:13:58.460\nBut behind the scenes, we have kind\nof proxied all of this handling to,\n\n270\n00:13:58.460 --> 00:14:00.340\nwell, some JavaScript.\n\n271\n00:14:00.340 --> 00:14:02.350\nAnd notice, there is our events.\n\n272\n00:14:02.350 --> 00:14:06.460\nThose events are the exact same events\nthat we saw earlier in this episode.\n\n273\n00:14:06.460 --> 00:14:08.520\nExcept, ours was a mouse event.\n\n274\n00:14:08.520 --> 00:14:11.530\nThis is an input event so\nthey're a little bit different.\n\n275\n00:14:11.530 --> 00:14:15.420\nBut generally speaking,\nthey are both of type event.\n\n276\n00:14:15.420 --> 00:14:17.050\nAnd then here's an input event.\n\n277\n00:14:17.050 --> 00:14:19.990\nAnd if I keep typing, clear this out here,\n\n278\n00:14:19.990 --> 00:14:25.230\nand every time I type those\nthings are happening.\n\n279\n00:14:25.230 --> 00:14:26.480\nOkay?\n\n280\n00:14:26.480 --> 00:14:31.640\nNow I want to take this event, right,\nthis kind of checking method, and when\n\n281\n00:14:31.640 --> 00:14:37.670\nsomething happens, let's just say every\ntime I type the letter J, for my name,\n\n282\n00:14:37.670 --> 00:14:44.040\nthen I want an error event to bubble\nup into the parent view instance, okay?\n\n283\n00:14:44.040 --> 00:14:48.440\nSo I just don't wanna type the letter J\nat all, so how do we go about doing that.\n\n284\n00:14:49.600 --> 00:14:54.174\nWell, I'm gonna come here and notice\nthis apparent child relationship between\n\n285\n00:14:54.174 --> 00:14:57.550\nthe number input and\nthe actual application, I can say at.\n\n286\n00:15:00.270 --> 00:15:00.880\nError.\n\n287\n00:15:00.880 --> 00:15:03.500\nNow error is not an unknown DOM event.\n\n288\n00:15:03.500 --> 00:15:09.300\nIf I had typed @click it would abound\nto a click event on this number input,\n\n289\n00:15:09.300 --> 00:15:13.570\nor if I had have typed @input,\nit would have handled the input events.\n\n290\n00:15:13.570 --> 00:15:16.830\nHowever, because this is a custom\ncomponent, it gets a little weird.\n\n291\n00:15:16.830 --> 00:15:21.680\nBut if I had said @error,\nwell let's just run logger, all right?\n\n292\n00:15:21.680 --> 00:15:22.700\nNow, what is logger gonna do?\n\n293\n00:15:22.700 --> 00:15:24.329\nIt is just gonna log out to the console.\n\n294\n00:15:26.060 --> 00:15:26.830\nOkay?\n\n295\n00:15:26.830 --> 00:15:32.050\nSo now every time I input,\nwhat am I gonna do?\n\n296\n00:15:32.050 --> 00:15:34.060\nWell, if I come back real quick,\n\n297\n00:15:34.060 --> 00:15:40.100\nI'm gonna use some just playing JavaScript\ninstead of some more crazy view stuff.\n\n298\n00:15:40.100 --> 00:15:45.000\nIf I get to the target and\nlook at the value somewhere down here.\n\n299\n00:15:45.000 --> 00:15:46.760\nI promise it's down here.\n\n300\n00:15:46.760 --> 00:15:47.370\nThere we go.\n\n301\n00:15:47.370 --> 00:15:49.074\nNow look at the value.\n\n302\n00:15:49.074 --> 00:15:54.691\nWell, I can just grab what's in there and\nremove it, okay?\n\n303\n00:15:54.691 --> 00:15:57.252\nSo I'm gonna check every\ntime there's an event.\n\n304\n00:15:57.252 --> 00:16:00.829\nI'm gonna see if the last thing\ninput was a J and if it is,\n\n305\n00:16:00.829 --> 00:16:03.810\nI'm just gonna back it out and\nthrow an error.\n\n306\n00:16:05.240 --> 00:16:09.000\nWell, let's just start simply by\ntesting to see if it's a j and\n\n307\n00:16:09.000 --> 00:16:10.130\nthen bubble up this event.\n\n308\n00:16:11.520 --> 00:16:13.270\nSo how do I do that?\n\n309\n00:16:13.270 --> 00:16:16.331\nWell, I gotta add this Logger\nmethod to my view instance.\n\n310\n00:16:17.852 --> 00:16:20.520\nAnd here we go, Logger.\n\n311\n00:16:20.520 --> 00:16:22.890\nAnd that's gonna take some event.\n\n312\n00:16:22.890 --> 00:16:27.642\nNow we've seen this before as a DOM event,\nbut this isn't exactly the same thing.\n\n313\n00:16:30.062 --> 00:16:34.240\nWe're gonna console,log(e);.\n\n314\n00:16:34.240 --> 00:16:37.130\nBut now for checker,\nwell what do I wanna do,\n\n315\n00:16:37.130 --> 00:16:40.250\nI wanna grab the letter,\nthe value that's in there.\n\n316\n00:16:40.250 --> 00:16:41.635\nSo I'm just gonna say const.\n\n317\n00:16:43.153 --> 00:16:45.946\nLetter, and we're gonna come back\nto the number thing, I promise.\n\n318\n00:16:45.946 --> 00:16:53.014\nThis is just for\ndemonstrations, e.target.value.\n\n319\n00:16:53.014 --> 00:16:57.865\nIf(letter == 'j'), and\n\n320\n00:16:57.865 --> 00:17:02.120\nwell what do I wanna do?\n\n321\n00:17:02.120 --> 00:17:09.190\nI want to this.emit ('error') and\nwell let's just send some information.\n\n322\n00:17:10.650 --> 00:17:11.430\nSomething is broke.\n\n323\n00:17:14.280 --> 00:17:17.950\nAll right but Cherokee, before I run this,\nit looks like you have a question for me.\n\n324\n00:17:17.950 --> 00:17:21.321\n&gt;&gt; Justin,\nif we have a ton of these custom events.\n\n325\n00:17:21.321 --> 00:17:24.049\nNow this may be a crazy question but,\n\n326\n00:17:24.049 --> 00:17:28.541\nhow computationally expensive\nis this in terms of latency.\n\n327\n00:17:28.541 --> 00:17:30.634\nIs this something that\nI would even notice,\n\n328\n00:17:30.634 --> 00:17:34.598\nif they're having to run through all these\niterations to see if I was satisfying all\n\n329\n00:17:34.598 --> 00:17:37.350\nthis information\n&gt;&gt; Well Cherokee I can tell that you've\n\n330\n00:17:37.350 --> 00:17:42.240\nbeen working in what's called a blocking\nlanguage, using this event structure.\n\n331\n00:17:42.240 --> 00:17:46.560\nWhat we actually do is queue this up to\nbe processed when ever there's free time\n\n332\n00:17:46.560 --> 00:17:50.590\nto keep from freezing up the UI,\nto keep from having latency.\n\n333\n00:17:50.590 --> 00:17:54.970\nNow that doesn't mean that if you generate\nhundreds of millions of touch events\n\n334\n00:17:54.970 --> 00:17:55.515\na second.\n\n335\n00:17:55.515 --> 00:17:56.200\n[LAUGH]\n&gt;&gt; Right,\n\n336\n00:17:56.200 --> 00:17:59.170\nthat it won't block, but right now that\n\n337\n00:17:59.170 --> 00:18:03.190\nthis asynchronicity accuse up things\nthat need to be processed in chunks.\n\n338\n00:18:03.190 --> 00:18:07.640\nAnd actually the underlying JavaScript\nimplementation in Chrome is written\n\n339\n00:18:07.640 --> 00:18:11.990\nin C++ and is fairly fast, so it has all\nof these just in time compilation things.\n\n340\n00:18:11.990 --> 00:18:15.393\nSo there's a variety of factors\nthat keep it very performant, and\n\n341\n00:18:15.393 --> 00:18:18.190\nJavaScript keeps you from\nrunning blocking code, and\n\n342\n00:18:18.190 --> 00:18:22.048\nwhat that means is it won't freeze\nyour UI unless you really, really try.\n\n343\n00:18:22.048 --> 00:18:25.057\nInfinite for\nloop is a great way to freeze your UI.\n\n344\n00:18:25.057 --> 00:18:27.876\n[LAUGH]\n&gt;&gt; Not that I know about that, but I do.\n\n345\n00:18:27.876 --> 00:18:31.220\n&gt;&gt; [LAUGH]\n&gt;&gt; So, if the letter is J,\n\n346\n00:18:31.220 --> 00:18:34.710\nwe want to admit error and\nsay something is broken.\n\n347\n00:18:34.710 --> 00:18:36.515\nSo, let's just do a quick review.\n\n348\n00:18:36.515 --> 00:18:40.870\n@error, so, that would be\nan error on the number input.\n\n349\n00:18:40.870 --> 00:18:44.669\nIt's going to respond with the Logger\nfunction of the parent element.\n\n350\n00:18:46.180 --> 00:18:50.920\nAnd if we come down here,\nwell inside we scroll too far,\n\n351\n00:18:50.920 --> 00:18:56.460\nevery time we input we want to run the\nchecker method on the actual component.\n\n352\n00:18:56.460 --> 00:18:57.960\nThe child component.\n\n353\n00:18:57.960 --> 00:19:01.930\nSo checker finds the letter\nthat was just typed, and\n\n354\n00:19:01.930 --> 00:19:03.540\nwe are assuming its a single letter for\nnow.\n\n355\n00:19:04.630 --> 00:19:07.090\nAnd if that letter is j,\nit's going to emit error.\n\n356\n00:19:08.790 --> 00:19:12.130\nNow this will only work on\nthe first letter upon refresh,\n\n357\n00:19:12.130 --> 00:19:13.760\nthe way I have this written.\n\n358\n00:19:13.760 --> 00:19:16.400\nBut let's see if we can\ngenerate an error event.\n\n359\n00:19:17.790 --> 00:19:21.330\nSo I'm gonna refresh, and\nif I type k, nothing happens.\n\n360\n00:19:21.330 --> 00:19:22.050\nOkay.\n\n361\n00:19:22.050 --> 00:19:23.610\nSo refresh.\n\n362\n00:19:23.610 --> 00:19:27.560\nIf I type j, notice this print\nout of something is broke.\n\n363\n00:19:28.930 --> 00:19:30.020\nIt happened, it worked.\n\n364\n00:19:31.680 --> 00:19:32.430\nHow did that happen?\n\n365\n00:19:32.430 --> 00:19:36.410\nWell it grabbed this, it said\nthis.emit and just like we saw that\n\n366\n00:19:36.410 --> 00:19:40.460\ndiv containing the button and the event\nkind of bubbled up through the parents?\n\n367\n00:19:41.630 --> 00:19:45.478\nThe exact same thing happened to Logger,\n\n368\n00:19:45.478 --> 00:19:50.070\nwe said hey parent application or\nparent component,\n\n369\n00:19:50.070 --> 00:19:55.170\nwatch for the error event if that occurs,\nrun Logger.\n\n370\n00:19:56.820 --> 00:20:00.940\nAnd what Logger does it take the event,\nnow that's where is\n\n371\n00:20:00.940 --> 00:20:04.710\nget weird in our DOM events they\nwere really complex structures.\n\n372\n00:20:04.710 --> 00:20:07.130\nThey had all this stuff going on.\n\n373\n00:20:07.130 --> 00:20:11.943\nReally it's just data,\nwe could say data and data.\n\n374\n00:20:11.943 --> 00:20:15.210\nAnd that can change,\nright now I'm just passing a string.\n\n375\n00:20:15.210 --> 00:20:16.846\nBut what if I pass something like this.\n\n376\n00:20:18.346 --> 00:20:23.359\nSomething is broke, now I have this\nwritten as a JavaScript object.\n\n377\n00:20:24.550 --> 00:20:27.560\nWell, let's see how that\nchanges the results.\n\n378\n00:20:27.560 --> 00:20:31.860\nRefresh j and notice I get an object, and\n\n379\n00:20:31.860 --> 00:20:35.950\nit's starting to look more like those DOM\nevents that we saw a little while ago.\n\n380\n00:20:37.070 --> 00:20:38.910\nNow this is kind of\na contrived example and\n\n381\n00:20:38.910 --> 00:20:42.990\nit's just to show you this\nupwards communications.\n\n382\n00:20:42.990 --> 00:20:44.290\nWe've seen props.\n\n383\n00:20:44.290 --> 00:20:46.280\nProps are a way of taking information and\n\n384\n00:20:46.280 --> 00:20:49.160\npushing them down into\nchildren's components.\n\n385\n00:20:49.160 --> 00:20:52.803\nEvents are a way of taking information\nfrom children components, and\n\n386\n00:20:52.803 --> 00:20:54.295\nbubbling up to the parents.\n\n387\n00:20:54.295 --> 00:20:57.450\nSo now we have the two-way street, but\n\n388\n00:20:57.450 --> 00:21:03.002\nit also keeps us from mutating data\nwhich can cause a bound of errors.\n\n389\n00:21:03.002 --> 00:21:06.140\nWe take data, we push it in,\nwe get a copy, that's good.\n\n390\n00:21:06.140 --> 00:21:09.910\nAnd then we should bubble up events for\nthe parent component to handle.\n\n391\n00:21:10.930 --> 00:21:14.620\nNow this is a very simple, how do you say,\n\n392\n00:21:14.620 --> 00:21:19.000\na very simply contrived,\nhopefully easy to understand example.\n\n393\n00:21:19.000 --> 00:21:21.910\nI wanna build something\na little more abound.\n\n394\n00:21:23.150 --> 00:21:24.640\nBut, do you think we have time?\n\n395\n00:21:24.640 --> 00:21:27.490\nI don't know if ten minutes\nis gonna do it for us.\n\n396\n00:21:27.490 --> 00:21:31.460\n&gt;&gt; So, Justin, I see your notes here and\nit looks like we have a lot to cover left.\n\n397\n00:21:31.460 --> 00:21:33.840\nSo I'm gonna go ahead and say no.\n\n398\n00:21:33.840 --> 00:21:38.070\nBut the good news is, we'll hang around\nfor part two, so hopefully you'll join us.\n\n399\n00:21:38.070 --> 00:21:40.070\nRemember, I'm your host, Cherokee Boose.\n\n400\n00:21:40.070 --> 00:21:41.040\n&gt;&gt; And I'm Justin Dennison.\n\n401\n00:21:41.040 --> 00:21:44.439\n&gt;&gt; See you next time here at ITPro.TV.\n\n402\n00:21:44.439 --> 00:21:50.278\n[MUSIC]\n\n403\n00:21:50.278 --> 00:21:53.172\nThank you for\n\n404\n00:21:53.172 --> 00:21:58.150\nwatching ITPRO.TV.\n\n",
          "vimeoId": "221756630"
        },
        {
          "description": "In this show, Justin and Cherokee continue to examine the possibilities of creating custom events with Vue.js. Justin continues his demonstration from the previous show and explains how and why one would want to customize input error messages.",
          "length": "1625",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-2-components_with_custom_events_pt2-061217-PGM.00_26_49_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-2-components_with_custom_events_pt2-061217-PGM.00_26_49_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-14-1-2-components_with_custom_events_pt2-061217-PGM.00_26_49_07.Still001-sm.jpg",
          "title": "Components with Custom Events Part 2",
          "transcript": "",
          "vimeoId": "221757490"
        },
        {
          "description": "In this episode, Just ups the ante so to speak by introducing the possibility of adding type or additional components like child elements. Watch as Justin demonstrates how to separate header, middle and footer information. learn how detailed information like simply changing the name can have adverse effects on the desired outcome.",
          "length": "1232",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-15-1-components_with_content-061217-PGM.00_20_16_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-15-1-components_with_content-061217-PGM.00_20_16_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-15-1-components_with_content-061217-PGM.00_20_16_11.Still001-sm.jpg",
          "title": "Components with Content",
          "transcript": "",
          "vimeoId": "221758450"
        },
        {
          "description": "In this show, Justin and Cherokee discuss component lifecycle hooks. Justin shows documentation to support the concept of our lifecycle. He walks thru and demonstrated the importance of each cycle and how it relates to the overall application development.",
          "length": "1710",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-16-1-component_life_cycle_hooks-061317-PGM.00_28_14_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-16-1-component_life_cycle_hooks-061317-PGM.00_28_14_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-16-1-component_life_cycle_hooks-061317-PGM.00_28_14_08.Still001-sm.jpg",
          "title": "Component Lifecycle Hooks",
          "transcript": "",
          "vimeoId": "221759373"
        },
        {
          "description": "In this episode, Cherokee and Justin break down how to create a search application. Justin demonstrates the API and the resulting application. He walks through the process of creating a search bar.",
          "length": "1337",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-1-lets_build_it_star_wars_search-061317-PGM.00_28_17_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-1-lets_build_it_star_wars_search-061317-PGM.00_28_17_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-1-lets_build_it_star_wars_search-061317-PGM.00_28_17_19.Still001-sm.jpg",
          "title": "Let's Build It: Star Wars Search",
          "transcript": "",
          "vimeoId": "221894364"
        },
        {
          "description": "In this show, Justin and Cherokee continue to build the Star Wars search app.  Justin continues to expand on the search bar functionality by adding the the ability to send HTTP requests and  bubbleup the resulting response to the parent component.",
          "length": "1802",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-2-lets_build_it_star_wars_search_pt2-061317-PGM.00_29_44_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-2-lets_build_it_star_wars_search_pt2-061317-PGM.00_29_44_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-2-lets_build_it_star_wars_search_pt2-061317-PGM.00_29_44_19.Still001-sm.jpg",
          "title": "Let's Build It: Star Wars Search Part 2",
          "transcript": "",
          "vimeoId": "221894865"
        },
        {
          "description": "In this show, Cherokee and Justin continue to work on the Star Wars app. First, Justin creates Person and PersonList components to incorporate additional details provided by the search. He also adjusts some aesthetic and functional components.",
          "length": "1860",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-3-lets_build_it_star_war_search_pt3-061417-PGM.00_30_43_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-3-lets_build_it_star_war_search_pt3-061417-PGM.00_30_43_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-3-lets_build_it_star_war_search_pt3-061417-PGM.00_30_43_11.Still001-sm.jpg",
          "title": "Let's Build It: Star Wars Search Part 3",
          "transcript": "",
          "vimeoId": "221895739"
        },
        {
          "description": "In this episode, Justin and Cherokee work on completing the Star Wars application. Justin adds PersonDetails to provide additional character information. He then performs some housekeeping and reorganizes the code to clean things up.",
          "length": "1492",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-4-lets_build_it_star_war_search_pt4-061417-PGM.00_32_16_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-4-lets_build_it_star_war_search_pt4-061417-PGM.00_32_16_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtovuejs/techskills-introvuejs-17-1-4-lets_build_it_star_war_search_pt4-061417-PGM.00_32_16_12.Still001-sm.jpg",
          "title": "Let's Build It: Star Wars Search Part 4",
          "transcript": "",
          "vimeoId": "221896639"
        }
      ],
      "title": "Intro to Vue.js"
    }
  ],
  "url": "introvuejs",
  "vLab": false
}
