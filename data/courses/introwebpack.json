{
  "description": "In the fast-paced world of web development, particularly in the realm of JavaScript rich applications, the need for build tools have become commonplace. Webpack is a newer build tool that has moved into the spotlight with the use of React and other JavaScript frameworks. In this series, we will show you how to take ownership of your webpack configuration and setup to manage the transpilation of new JavaScript features to more compatible versions, manage static assets such as images, and add the use of CSS with and without preprocessing. If you want to remove the magic of Webpack, then join us!",
  "descriptionMD": "In the fast-paced world of web development, particularly in the realm of JavaScript rich applications, the need for build tools have become commonplace. Webpack is a newer build tool that has moved into the spotlight with the use of React and other JavaScript frameworks. In this series, we will show you how to take ownership of your webpack configuration and setup to manage the transpilation of new JavaScript features to more compatible versions, manage static assets such as images, and add the use of CSS with and without preprocessing. If you want to remove the magic of Webpack, then join us!",
  "length": "10046",
  "name": "Intro to Webpack",
  "practiceExam": false,
  "subtitle": "Modern build processes",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In the fast-paced world of web development, particularly in the realm of JavaScript rich applications, the need for build tools have become commonplace. Webpack is a newer build tool that has moved into the spotlight with the use of React and other JavaScript frameworks. In this series, we will show you how to take ownership of your webpack configuration and setup to manage the transpilation of new JavaScript features to more compatible versions, manage static assets such as images, and add the use of CSS with and without preprocessing. If you want to remove the magic of Webpack, then join us!",
          "length": "97",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-0-0-0-overview-102717-PGM.00_00_12_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-0-0-0-overview-102717-PGM.00_00_12_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-0-0-0-overview-102717-PGM.00_00_12_15.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.593\n[MUSIC]\n\n2\n00:00:05.593 --> 00:00:06.404\n&gt;&gt; In this segment,\n\n3\n00:00:06.404 --> 00:00:09.930\nwe're gonna give you a brief preview\ninto our Intro to webpack series.\n\n4\n00:00:09.930 --> 00:00:13.330\nSo John what are we actually going to be\nlearning in the Intro to webpack series?\n\n5\n00:00:13.330 --> 00:00:18.790\n&gt;&gt; So we're going to be learning how\nto use webpack to create application,\n\n6\n00:00:18.790 --> 00:00:21.110\nweb applications that\nare very efficient and\n\n7\n00:00:21.110 --> 00:00:24.240\nvery effective at delivering\nwhat you're trying to do.\n\n8\n00:00:24.240 --> 00:00:27.600\nAnd, we'll learn how to do it\nline by line very carefully so\n\n9\n00:00:27.600 --> 00:00:30.110\nyou understand exactly what you're doing.\n\n10\n00:00:30.110 --> 00:00:32.930\n&gt;&gt; So John, there seems to be\nsomething that I probably already\n\n11\n00:00:32.930 --> 00:00:34.430\nneed to know a little bit about.\n\n12\n00:00:34.430 --> 00:00:37.640\nSo what target audience\ndoes this show have?\n\n13\n00:00:37.640 --> 00:00:41.060\n&gt;&gt; Right, so we're not gonna be using\nany particular front end frameworks.\n\n14\n00:00:41.060 --> 00:00:44.720\nYou don't need to know React or\nAngular or any of that kind of stuff but\n\n15\n00:00:44.720 --> 00:00:48.110\nit would be nice to have a general\nunderstanding about how the web works.\n\n16\n00:00:48.110 --> 00:00:51.500\nHow to write HTML, some basic\nidea about what CSS is doing for\n\n17\n00:00:51.500 --> 00:00:53.490\nyou, and some basic JavaScript.\n\n18\n00:00:53.490 --> 00:00:56.630\nNot a whole bunch, but\njust awareness of those pieces.\n\n19\n00:00:56.630 --> 00:00:59.910\n&gt;&gt; Now, John, a lot of times I validate\nmy learning through the achievement and\n\n20\n00:00:59.910 --> 00:01:04.180\ncertifications, does this have\na certification attached to it?\n\n21\n00:01:04.180 --> 00:01:07.260\n&gt;&gt; Right, so much like a lot of\nthe web technologies, it's moving so\n\n22\n00:01:07.260 --> 00:01:11.950\nfast, that there really hasn't been\nany certifications for this so far.\n\n23\n00:01:11.950 --> 00:01:14.730\nThis is all within the last year or\nso this has come about.\n\n24\n00:01:14.730 --> 00:01:18.230\nSo no, and I doubt it will have one.\n\n25\n00:01:18.230 --> 00:01:20.430\nBecause it will be something\nelse in two years.\n\n26\n00:01:20.430 --> 00:01:22.290\n&gt;&gt; So if you want to continue\npowering up your learning and\n\n27\n00:01:22.290 --> 00:01:26.460\nactually learn how to use webpack from\nground up then definitely join us.\n\n28\n00:01:26.460 --> 00:01:28.270\nWe hope to see you there.\n\n29\n00:01:28.270 --> 00:01:33.911\n[MUSIC]\n\n",
          "vimeoId": "240543488"
        },
        {
          "description": "In this episode, Justin and John start exploring the build tool called webpack.  John discusses the necessary prerequsites for getting with webpack, what webpack's purpose is, and how to create our very first webpack configuration and build.",
          "length": "1234",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-1-1-1-laying_the_first_lines-102517-PGM.00_20_24_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-1-1-1-laying_the_first_lines-102517-PGM.00_20_24_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-1-1-1-laying_the_first_lines-102517-PGM.00_20_24_23.Still001-sm.jpg",
          "title": "Laying the First Lines",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.051 --> 00:00:16.455\nGreetings everyone and welcome to\nanother exciting episode of DEVPROTV.\n\n3\n00:00:16.455 --> 00:00:19.195\nI'm your host Justin Dennison and\nin today's episode we're getting\n\n4\n00:00:19.195 --> 00:00:22.125\nstarted with a very\ninteresting series on web pack.\n\n5\n00:00:22.125 --> 00:00:24.925\nWell, what is it and\nwhy should I care about it?\n\n6\n00:00:24.925 --> 00:00:28.500\nAnd luckily we have someone in the studio\nto help guide us on that adventure.\n\n7\n00:00:28.500 --> 00:00:30.085\nMr. John Tucker, how you doing today John?\n\n8\n00:00:30.085 --> 00:00:30.935\n&gt;&gt; Very good.\n\n9\n00:00:30.935 --> 00:00:34.606\n&gt;&gt; So\nJohn I've heard a lot about webpack like,\n\n10\n00:00:34.606 --> 00:00:37.540\nwhat, like what is it and\nwhy should I use it?\n\n11\n00:00:37.540 --> 00:00:41.140\n&gt;&gt; Okay, so Webpack by the definition,\n\n12\n00:00:41.140 --> 00:00:45.450\nby the company that made it,\nis called a module bundler.\n\n13\n00:00:45.450 --> 00:00:49.120\nSo, the question is what does\nmodule bundler do for you?\n\n14\n00:00:49.120 --> 00:00:51.670\nAnd the kind of thing that\na module bundler does,\n\n15\n00:00:51.670 --> 00:00:55.460\nis that it takes your code and\ndoes a number of operation on it,\n\n16\n00:00:55.460 --> 00:00:59.970\nlike maybe minifies it, makes it smaller,\nmaybe does some translations of CSS.\n\n17\n00:00:59.970 --> 00:01:04.330\nSo it takes your code\nafter you written in and\n\n18\n00:01:04.330 --> 00:01:07.280\nit packages together to\nbe deliver on the web.\n\n19\n00:01:07.280 --> 00:01:10.300\nSo instead of going\nthrough all those details,\n\n20\n00:01:10.300 --> 00:01:14.200\nwe're gonna do it by example and\njust kind of introduce concepts as we go.\n\n21\n00:01:14.200 --> 00:01:19.210\nAnd just if you maybe you've seen\nother examples of bundlers or\n\n22\n00:01:19.210 --> 00:01:22.260\nmaybe like an automation scripts,\nlike grunt or gulp.\n\n23\n00:01:22.260 --> 00:01:24.940\nThis is similar, but\nsort of the next generation of that.\n\n24\n00:01:26.210 --> 00:01:30.200\nSo let's go ahead and get started, and the\nfirst thing we need to think about is what\n\n25\n00:01:30.200 --> 00:01:33.970\nkind of prerequisites we need to\nhave before we start developing.\n\n26\n00:01:33.970 --> 00:01:38.030\nSo first things,\nyou could be using Windows, OS X,\n\n27\n00:01:38.030 --> 00:01:40.840\nLinux, I happen to be using Linux here.\n\n28\n00:01:40.840 --> 00:01:43.390\nSo it doesn't really matter\nwhat operating system.\n\n29\n00:01:43.390 --> 00:01:45.320\nYou're gonna need to use node.\n\n30\n00:01:45.320 --> 00:01:48.760\nNode is a JavaScript for your desktop.\n\n31\n00:01:48.760 --> 00:01:51.600\nSo let you run JavaScript\nfrom the command line.\n\n32\n00:01:51.600 --> 00:01:54.730\nSo you'll install this on your own.\n\n33\n00:01:54.730 --> 00:02:00.320\nSo what you'll do, is you'll go to\nthe web and you'll Google nodejs.\n\n34\n00:02:00.320 --> 00:02:02.990\nAnd you'll get to a page that\nlooks something like this, and\n\n35\n00:02:02.990 --> 00:02:03.710\nit'll be a download.\n\n36\n00:02:03.710 --> 00:02:05.650\nIn this case,\nmine is downloading for Linux, but\n\n37\n00:02:05.650 --> 00:02:09.460\nyours will say OS X or\nWindows as it applies.\n\n38\n00:02:09.460 --> 00:02:11.430\nSo, Node.\n\n39\n00:02:11.430 --> 00:02:14.040\nAnd then you're gonna\nneed some sort of editor\n\n40\n00:02:14.040 --> 00:02:15.980\nbecause you need to be editing text files.\n\n41\n00:02:15.980 --> 00:02:22.620\nIn my case, I'm using the open source\nheader called atom, but you could\n\n42\n00:02:22.620 --> 00:02:26.820\nbe using VI, or whatever it is you want,\ntext pad or it doesn't really matter.\n\n43\n00:02:27.940 --> 00:02:31.180\nAnd then you just need access to\na command line and you get started.\n\n44\n00:02:31.180 --> 00:02:36.030\nSo let's go ahead and get started with our\nfirst example, and by the way all these\n\n45\n00:02:36.030 --> 00:02:42.350\nexamples will be available for download\nThey'll be in the notes, the lesson notes.\n\n46\n00:02:42.350 --> 00:02:47.210\nSo, you can follow along on your\nown by just downloading the source.\n\n47\n00:02:47.210 --> 00:02:51.890\nCommand line, and I'm gonna start\nup with the Hello World example.\n\n48\n00:02:51.890 --> 00:02:55.280\nSo, if you look in this case, screen,\n\n49\n00:02:55.280 --> 00:02:58.160\nin this case I've got all\nthe examples all lined up.\n\n50\n00:02:58.160 --> 00:03:01.110\nSo if you ever download the packages,\nyou'll see all the examples,\n\n51\n00:03:01.110 --> 00:03:05.560\nand the first one is called hello world,\nso I'm gonna go into that folder, okay?\n\n52\n00:03:05.560 --> 00:03:07.300\nNow if you ever do this on your own,\n\n53\n00:03:07.300 --> 00:03:10.800\nyou'll create an empty folder\nyourself called hello world.\n\n54\n00:03:10.800 --> 00:03:14.030\nAnd the first thing you'll need to do if\nyou're in this empty folder, in this case\n\n55\n00:03:14.030 --> 00:03:17.680\nI'm gonna pretend like I'm doing it,\nbut pretend like it's empty right now.\n\n56\n00:03:17.680 --> 00:03:21.800\nI'm gonna type in npn in it and\nthen hit Enter.\n\n57\n00:03:21.800 --> 00:03:24.310\nI'm not gonna do it here because\nI've already got it initialized.\n\n58\n00:03:24.310 --> 00:03:26.940\nThat's gonna through a series of\nquestions, initialize your package,\n\n59\n00:03:26.940 --> 00:03:29.560\nyou just say yes, yes,\nyes and you're done.\n\n60\n00:03:29.560 --> 00:03:32.420\nAnd what that does,\nit just initializes your project so\n\n61\n00:03:32.420 --> 00:03:37.680\nit knows kinda what the name of\nthe project is and it's a holder for them.\n\n62\n00:03:37.680 --> 00:03:39.380\nWhat you look at when you do that,\n\n63\n00:03:39.380 --> 00:03:43.102\nyou'll end up with a single\ncell called package.json.\n\n64\n00:03:43.102 --> 00:03:48.460\nSo, I'm gonna go ahead and open up\nthat package.json with my editor and\n\n65\n00:03:48.460 --> 00:03:55.475\ngenerally these kind of graphs, we are not\ngonna really, make our screen bigger.\n\n66\n00:03:55.475 --> 00:03:59.520\nSo, it may like to tell you\nthe name of the project,\n\n67\n00:03:59.520 --> 00:04:04.680\nmay be a version, all way down through\nhere,most probably not worry about it.\n\n68\n00:04:04.680 --> 00:04:09.710\nExample that, if you looked at it before,\ndid it from clean,\n\n69\n00:04:09.710 --> 00:04:14.270\nyou wouldn't actually have look like that,\nyou wouldn't have those extra lines.\n\n70\n00:04:14.270 --> 00:04:16.160\nSo the question is what's the next step?\n\n71\n00:04:16.160 --> 00:04:19.872\nSo we'll have a blank project and\nthe first thing we're gonna do is,\n\n72\n00:04:19.872 --> 00:04:24.340\nwe're gonna install any dependencies for\nthis project into the project and\n\n73\n00:04:24.340 --> 00:04:28.340\nsince we're learning webpack that's\nthe first dependency is webpack itself.\n\n74\n00:04:28.340 --> 00:04:30.829\nSo what we're gonna do\nis we're gonna type in.\n\n75\n00:04:34.027 --> 00:04:34.535\nHere we go.\n\n76\n00:04:34.535 --> 00:04:40.738\nSo you're gonna type in\nnpm install webpack.\n\n77\n00:04:40.738 --> 00:04:46.310\nWebpack and\nthen you just type in webpack like this,\n\n78\n00:04:46.310 --> 00:04:50.850\nit will install it but\nit won't remember that you install it.\n\n79\n00:04:50.850 --> 00:04:53.860\nIt won't add a line to\nyour package JSON so\n\n80\n00:04:53.860 --> 00:04:56.500\nyou want a record that you installed it.\n\n81\n00:04:56.500 --> 00:05:00.080\nSo what we want to do is we want\nto do an extra step, save dev.\n\n82\n00:05:01.570 --> 00:05:02.070\nOkay?\nAnd\n\n83\n00:05:02.070 --> 00:05:04.800\nthat's gonna save it in your project file.\n\n84\n00:05:04.800 --> 00:05:09.100\nSo after you do that you'll notice,\nthen we'll go back to the editor,\n\n85\n00:05:09.100 --> 00:05:14.040\nyou type that maybe about 30 seconds\nlater you'll actually have two things.\n\n86\n00:05:14.040 --> 00:05:17.130\nOne is you'll have a node modules folder.\n\n87\n00:05:17.130 --> 00:05:21.490\nSo, there's a folder here called\nnode modules, and your package json,\n\n88\n00:05:21.490 --> 00:05:22.600\nlet me go ahead here and open it back up.\n\n89\n00:05:24.360 --> 00:05:28.560\nWe'll look back at the extra\nline that it added.\n\n90\n00:05:28.560 --> 00:05:33.810\nIt actually added this devDependencies and\nit says webpack and the version of that.\n\n91\n00:05:34.862 --> 00:05:35.650\n&gt;&gt; Now John,\n\n92\n00:05:35.650 --> 00:05:40.900\nI've seen in multiple node projects that\nI've played with, just to confirm, can.\n\n93\n00:05:40.900 --> 00:05:42.620\nThere's a dependencies and\na dev-dependencies.\n\n94\n00:05:42.620 --> 00:05:44.710\nAnd I noticed you typed\na dash-dash-save-dev.\n\n95\n00:05:44.710 --> 00:05:45.620\n&gt;&gt; Right.\n\n96\n00:05:45.620 --> 00:05:47.970\n&gt;&gt; That's different than\nif I left that out or\n\n97\n00:05:47.970 --> 00:05:50.820\nan older MPM version's dash-dash-save,\ncorrect?\n\n98\n00:05:50.820 --> 00:05:53.790\n&gt;&gt; Right.\nSo if you just said dash-dash-save.\n\n99\n00:05:53.790 --> 00:05:55.940\nThat's going to save it exactly\nthe same way, except for\n\n100\n00:05:55.940 --> 00:05:59.410\ninstead of dev dependencies\nit's going to say dependencies.\n\n101\n00:05:59.410 --> 00:06:04.170\nSo the main difference between the two is,\nin a node project,\n\n102\n00:06:04.170 --> 00:06:06.300\nif it's a dev dependency,\n\n103\n00:06:06.300 --> 00:06:10.290\nthat's the kind of stuff that you're going\nto be using while you're developing code.\n\n104\n00:06:10.290 --> 00:06:11.680\nIf it's a dependency,\n\n105\n00:06:11.680 --> 00:06:15.590\nit's something that needs to be kind\nof used when it's put into production.\n\n106\n00:06:15.590 --> 00:06:20.480\nSo dev dependency really is kind of mostly\nwhen it's on your machine and if you take\n\n107\n00:06:20.480 --> 00:06:25.120\nthis code and put it on a server, you may\nonly wanna install the dependencies and\n\n108\n00:06:25.120 --> 00:06:28.960\nnot all the other development\nstuff cuz you're on the server,\n\n109\n00:06:28.960 --> 00:06:30.130\nyou don't need that development stuff.\n\n110\n00:06:31.250 --> 00:06:34.600\nSo that's why we use,\nin this case web pack is a built tool\n\n111\n00:06:34.600 --> 00:06:39.840\nto be used by me the developer, it's\nnot actually being used by anyone else.\n\n112\n00:06:39.840 --> 00:06:42.431\nSo that's why it goes as a dev dependency.\n\n113\n00:06:42.431 --> 00:06:44.860\nOkay.\nSo other thing that,\n\n114\n00:06:44.860 --> 00:06:50.530\nin addition to installing the packet,\nupdating the package file, it also,\n\n115\n00:06:50.530 --> 00:06:56.160\nwhen you install that dependency, it also\ndump the badges stuff in node modules.\n\n116\n00:06:56.160 --> 00:06:59.310\nAnd you'll notice that there's\na whole bunch of stuff here.\n\n117\n00:06:59.310 --> 00:07:00.590\nAnd I only added webpacks.\n\n118\n00:07:00.590 --> 00:07:05.150\nSo the question is why am I\nlooking at 100 different files?\n\n119\n00:07:05.150 --> 00:07:08.130\nThat's because webpack is\na very complicated program, and\n\n120\n00:07:08.130 --> 00:07:09.590\nit has its own dependencies.\n\n121\n00:07:09.590 --> 00:07:13.710\nSo, what you're seeing here is all\nthe dependencies of webpack and\n\n122\n00:07:13.710 --> 00:07:16.960\nmaybe dependencies kind of chain down.\n\n123\n00:07:16.960 --> 00:07:18.740\nSo we're not gonna\nreally worry about that,\n\n124\n00:07:18.740 --> 00:07:22.300\nthat's all kind of behind the scenes,\nbut if you ever wonder why there are so\n\n125\n00:07:22.300 --> 00:07:29.316\nmany files, that's because webpack\nitself had those dependencies.\n\n126\n00:07:29.316 --> 00:07:33.769\nOkay so, let's go ahead and, next step,\n\n127\n00:07:33.769 --> 00:07:38.845\nwe're just getting started\nwith webpack here,\n\n128\n00:07:38.845 --> 00:07:42.680\nand the first thing we wanna do here,\n\n129\n00:07:42.680 --> 00:07:49.151\nnow that we have webpack installed,\nbear with me one second.\n\n130\n00:07:49.151 --> 00:07:56.400\nOkay, I think we're gonna go ahead and\nour goal is to deliver a webpage and so\n\n131\n00:07:56.400 --> 00:08:01.853\nwe need to create some files\nthat we're gonna work with.\n\n132\n00:08:01.853 --> 00:08:02.863\nSo.\n\n133\n00:08:02.863 --> 00:08:04.843\nI'm going to create\na folder called source, so\n\n134\n00:08:04.843 --> 00:08:06.487\nI've already got created right here.\n\n135\n00:08:06.487 --> 00:08:08.290\nSo I'm going to go in there.\n\n136\n00:08:08.290 --> 00:08:09.110\nAnd I'm going to look at it.\n\n137\n00:08:09.110 --> 00:08:11.580\nSo I just with single\nfile called Index.js.\n\n138\n00:08:11.580 --> 00:08:17.950\nAnd let's go ahead and\nlook at Index.js, And see what's in it.\n\n139\n00:08:17.950 --> 00:08:21.210\nIt's basically a java script program and\n\n140\n00:08:21.210 --> 00:08:24.080\nall it does it says Window\nconsole log hello world.\n\n141\n00:08:24.080 --> 00:08:25.800\nThat's about as simple as you get.\n\n142\n00:08:25.800 --> 00:08:29.180\nFor our JavaScript program so\ndeliberately trying to keep it simple.\n\n143\n00:08:29.180 --> 00:08:33.980\nThe next thing you need to do is normally\nwhen you write a JavaScript program,\n\n144\n00:08:33.980 --> 00:08:40.250\nyou need to have an HTML\npage that it's loaded from.\n\n145\n00:08:40.250 --> 00:08:43.161\nSo in this case, I'm gonna create\nanother folder called Dist.\n\n146\n00:08:43.161 --> 00:08:47.673\nSo if you look back here so\nI have source and I've got my disk,\n\n147\n00:08:47.673 --> 00:08:51.140\nso let me go into disk and\nsee what's in there.\n\n148\n00:08:53.218 --> 00:08:57.324\nWe open up so\nthis is just a index.html file.\n\n149\n00:08:57.324 --> 00:09:00.096\nAnd it has your normal stuff.\n\n150\n00:09:00.096 --> 00:09:05.425\nThe only thing that's special here it\nsays script source, main.bundle.js.\n\n151\n00:09:05.425 --> 00:09:09.390\nYou'll notice that's a different\nfile name than the one index.js.\n\n152\n00:09:09.390 --> 00:09:11.400\nSo we'll talk about that in a second.\n\n153\n00:09:11.400 --> 00:09:16.060\nSo this file will look in the current\nfolder, remain.bundle and\n\n154\n00:09:16.060 --> 00:09:19.990\nif I load this page, it should say,\nthe console should say hello world.\n\n155\n00:09:21.160 --> 00:09:25.629\nOkay, so the question is the next\nstep is now we're gonna do webpack.\n\n156\n00:09:25.629 --> 00:09:28.450\nAnd I'm gonna go back into here,\nand look at the webpack config.\n\n157\n00:09:28.450 --> 00:09:33.768\nSo the web pack config sits\nat the root of your project.\n\n158\n00:09:33.768 --> 00:09:37.898\nI'm gonna go ahead and open it up and\nwe'll kind of walk line by line to see\n\n159\n00:09:37.898 --> 00:09:40.960\nwhat is in by pack.config and\nwhat does it do for you.\n\n160\n00:09:40.960 --> 00:09:43.875\nNow, as you go,\nif you look at other webpack.config,\n\n161\n00:09:43.875 --> 00:09:45.371\nyou'll see it a lot longer.\n\n162\n00:09:45.371 --> 00:09:47.799\nSo, we're starting like the barebones and\n\n163\n00:09:47.799 --> 00:09:52.205\nwe're just kind keep by adding this until\nwe get to a full blown webpack Config.\n\n164\n00:09:52.205 --> 00:09:55.800\nSo the first line is a path command.\n\n165\n00:09:55.800 --> 00:10:02.280\nThis is a nodejs module, basically,\nthat let's you work with your file path.\n\n166\n00:10:02.280 --> 00:10:05.560\nSo wait and we'll be using it in a second.\n\n167\n00:10:05.560 --> 00:10:10.050\nSo what we're gonna do is we're gonna\nsport a module out of Webpacks.\n\n168\n00:10:10.050 --> 00:10:11.430\nThat's how you interact with Webpack.\n\n169\n00:10:11.430 --> 00:10:15.490\nYou sport functionality\nthrough a model.exports.\n\n170\n00:10:15.490 --> 00:10:16.340\nIt's just an object.\n\n171\n00:10:17.650 --> 00:10:21.280\nEntry point is the source file\nthat you want to start off with.\n\n172\n00:10:21.280 --> 00:10:25.000\nThe way the Webpacks work is it\nstarts with a single file input and\n\n173\n00:10:25.000 --> 00:10:26.500\nit starts processing.\n\n174\n00:10:26.500 --> 00:10:29.611\nSo we want to start with our hello world.\n\n175\n00:10:29.611 --> 00:10:33.001\nAnd then output tells you\nwhatever it does, in the end,\n\n176\n00:10:33.001 --> 00:10:34.818\nyou need to put it somewhere.\n\n177\n00:10:34.818 --> 00:10:40.016\nIn this case, I wanna put it in\nwith a file name of this name here.\n\n178\n00:10:40.016 --> 00:10:44.344\nThis is a kind of an internal syntax for\nsaying, in this case,\n\n179\n00:10:44.344 --> 00:10:46.027\nit translates domain.\n\n180\n00:10:46.027 --> 00:10:47.430\nFor now, we're not gonna talk\nabout that a whole bunch.\n\n181\n00:10:47.430 --> 00:10:49.200\nJust leave that alone.\n\n182\n00:10:49.200 --> 00:10:51.590\nAnd the path is where it's gonna put it.\n\n183\n00:10:51.590 --> 00:10:57.100\nIn this case, it says, in the current\ndirectory look for the folder called dist.\n\n184\n00:10:57.100 --> 00:11:00.245\n&gt;&gt; Now, John,\nis this the bare minimum that I need?\n\n185\n00:11:00.245 --> 00:11:04.262\nLike if I take any of this away, kind\nof this web pack config is gonna break.\n\n186\n00:11:04.262 --> 00:11:07.010\nAm I right in what I'm hearing there?\n\n187\n00:11:07.010 --> 00:11:09.740\n&gt;&gt; Yeah, I don't think you can\nremove any lines out of this.\n\n188\n00:11:09.740 --> 00:11:11.950\nThis is about as small as you get for\nweb pack config.\n\n189\n00:11:11.950 --> 00:11:15.820\nCuz all you doing is you're\nsaying start with this file.\n\n190\n00:11:15.820 --> 00:11:19.920\nAnd what it's gonna do is just copy\nthat file to the new location.\n\n191\n00:11:19.920 --> 00:11:22.520\nIt doesn't do a whole bunch but\nthat's the bare minimum.\n\n192\n00:11:23.520 --> 00:11:27.170\n&gt;&gt; Second question,\nthis reminds me a little bit of grunt.\n\n193\n00:11:27.170 --> 00:11:29.380\nLike some Grunt files and\nthings like that.\n\n194\n00:11:29.380 --> 00:11:32.330\nYou made a mention earlier in this\nepisode about Grunt, and Gulp, and\n\n195\n00:11:32.330 --> 00:11:33.630\nsome other built in tools.\n\n196\n00:11:33.630 --> 00:11:37.252\nWhy would one choose webpack over Grunt?\n\n197\n00:11:37.252 --> 00:11:39.342\nI just wanna make sure\nwe're clear on that.\n\n198\n00:11:39.342 --> 00:11:45.084\n&gt;&gt; So one of the big benefits for\nweb pack is, well, a couple things.\n\n199\n00:11:45.084 --> 00:11:49.265\nIt's the new thing so which means\nyou'll see a lot of people using it.\n\n200\n00:11:49.265 --> 00:11:51.471\nSo, a lot of those tools might be fine.\n\n201\n00:11:51.471 --> 00:11:54.916\nIt's just you won't see a lot of new\ndevelopment on those because no one's\n\n202\n00:11:54.916 --> 00:11:56.733\nstarting, people moved away from it.\n\n203\n00:11:56.733 --> 00:11:57.993\nThe other thing that,\n\n204\n00:11:57.993 --> 00:12:02.182\nthe reason why the web pack is nice is\nit has a nice whole system for modules.\n\n205\n00:12:02.182 --> 00:12:03.590\nIt's actually third party modules and\n\n206\n00:12:03.590 --> 00:12:05.860\nwe'll be using a lot of\nthird party modules.\n\n207\n00:12:05.860 --> 00:12:08.483\nWeb Pack itself does almost very little.\n\n208\n00:12:08.483 --> 00:12:12.728\nAnd so we'll be using a lot of third party\nmodules that use this for Web Pack and\n\n209\n00:12:12.728 --> 00:12:15.747\ndo not necessarily exist\nin this other environments.\n\n210\n00:12:15.747 --> 00:12:21.750\nSo, it's kind of the de facto standard\nif you're using react for example.\n\n211\n00:12:21.750 --> 00:12:25.100\nPretty much this is the only tool\nyou'll be using for doing your build.\n\n212\n00:12:25.100 --> 00:12:28.618\nIt's pretty much prevalent today.\n\n213\n00:12:28.618 --> 00:12:32.569\nLast two years or so,\npeople switching to it.\n\n214\n00:12:32.569 --> 00:12:36.174\n&gt;&gt; All right, so\nI just want [CROSSTALK] and you're right,\n\n215\n00:12:36.174 --> 00:12:41.176\neverybody is all crazy about the new\nhotness, so we have to keep that in mind.\n\n216\n00:12:41.176 --> 00:12:44.379\nNow, compared to those other\ntools like gulp and grunt,\n\n217\n00:12:44.379 --> 00:12:49.115\nare there things that webpack can't do or\nyou shouldn't do with webpack that some of\n\n218\n00:12:49.115 --> 00:12:52.270\nthose old tools during the build\nprocess were used for?\n\n219\n00:12:53.340 --> 00:12:58.750\n&gt;&gt; Generally,\nI was not a big tool guy in tool webpack.\n\n220\n00:12:58.750 --> 00:13:01.780\nGenerally, those other\ntools were more generic\n\n221\n00:13:01.780 --> 00:13:04.020\nbuild tools that can\ndo all sorts of stuff.\n\n222\n00:13:04.020 --> 00:13:07.890\nYou could probably use run\nto do all sorts of stuff.\n\n223\n00:13:07.890 --> 00:13:12.560\nWeb Pack is kind of more focused\njust on taking an input file,\n\n224\n00:13:12.560 --> 00:13:14.750\nmassaging it, and outputting the file.\n\n225\n00:13:14.750 --> 00:13:20.090\nIt's not more of a, it has more of\na narrow focus than those other tools,\n\n226\n00:13:20.090 --> 00:13:23.380\nso I would say this is just\nmore focused than that tool.\n\n227\n00:13:23.380 --> 00:13:24.130\n&gt;&gt; Okay, okay.\n\n228\n00:13:24.130 --> 00:13:26.150\nI kinda derailed you\nhere the last little bit.\n\n229\n00:13:26.150 --> 00:13:30.780\nWe can get back into it because we\nhave the bare minimum webpack file or\n\n230\n00:13:30.780 --> 00:13:31.560\nwebpack config.\n\n231\n00:13:31.560 --> 00:13:35.185\nAnd now, I guess [CROSSTALK]\nactually all come together.\n\n232\n00:13:35.185 --> 00:13:37.540\n&gt;&gt; Right, so\nlet's recap what we've done so far.\n\n233\n00:13:37.540 --> 00:13:39.940\nAnd then we'll actually\ndo something with it.\n\n234\n00:13:39.940 --> 00:13:42.460\nSo as a real quick recap.\n\n235\n00:13:42.460 --> 00:13:46.260\nWhat we've done is we've created a source\nfile, which just says hello world.\n\n236\n00:13:47.420 --> 00:13:52.280\nWe created a destination folder called\ndist, and we just pre-planted an indexed\n\n237\n00:13:52.280 --> 00:13:56.720\nHTML file there that's looking for\na main dot bundle.JS.\n\n238\n00:13:56.720 --> 00:13:58.970\nAnd we've created this webpack config.\n\n239\n00:13:58.970 --> 00:14:02.310\nAnd all it's really going to\ndo is take the source file\n\n240\n00:14:02.310 --> 00:14:05.672\ncopy it to the destination board.\n\n241\n00:14:05.672 --> 00:14:12.540\nNow, the is actually use the webpack\ncommand and to do this right?\n\n242\n00:14:12.540 --> 00:14:14.050\nNow, there's two things you could do.\n\n243\n00:14:14.050 --> 00:14:18.710\nI'm gonna do it one way but you can\nglobally install webpack on your machine.\n\n244\n00:14:18.710 --> 00:14:20.530\nI installed it in the project.\n\n245\n00:14:20.530 --> 00:14:25.320\nSo you could actually do\nnpm install with a g flag.\n\n246\n00:14:25.320 --> 00:14:27.830\nAnd with that,\nI've installed Web Pack globally.\n\n247\n00:14:28.890 --> 00:14:34.500\nOr, you can also install Web Pack\nin the project like I did,\n\n248\n00:14:34.500 --> 00:14:36.840\nand run Web Pack from within the project.\n\n249\n00:14:38.080 --> 00:14:40.810\nSo the distinction is if\nyou put it in the project,\n\n250\n00:14:40.810 --> 00:14:45.660\nyou know exactly what diversion of\nWeb Pack this project is using.\n\n251\n00:14:45.660 --> 00:14:48.810\nSo your web pack config could be\nyou know exactly what you're doing.\n\n252\n00:14:48.810 --> 00:14:50.260\nIf you run it from the global,\n\n253\n00:14:50.260 --> 00:14:54.060\nwho knows what version of web\npack you've got running globally.\n\n254\n00:14:54.060 --> 00:14:55.630\nAnd so it's a little less controlled.\n\n255\n00:14:55.630 --> 00:14:59.820\nSo generally, the recommendation is\nyou actually want to run the web pack\n\n256\n00:14:59.820 --> 00:15:02.920\nthat's actually been\ninstalled in your project.\n\n257\n00:15:02.920 --> 00:15:07.310\n&gt;&gt; And John, just as a word of\nsomething that I've changed to.\n\n258\n00:15:07.310 --> 00:15:12.330\nI've actually moved away from installing\nanything locally if I can help it for\n\n259\n00:15:12.330 --> 00:15:13.360\nthat exact reason.\n\n260\n00:15:13.360 --> 00:15:15.680\nI'm like what version was this again?\n\n261\n00:15:15.680 --> 00:15:17.650\nRight, NPM is there but for\n\n262\n00:15:17.650 --> 00:15:20.880\nthe most part if I can keep it internal\nto the project so I can keep a list of\n\n263\n00:15:20.880 --> 00:15:24.390\nwhat version was it and\nmake sure that's all kind of hunky dory.\n\n264\n00:15:24.390 --> 00:15:24.900\n&gt;&gt; Right.\nYeah.\n\n265\n00:15:24.900 --> 00:15:26.081\nCuz that's-\n&gt;&gt; And that's what I do.\n\n266\n00:15:26.081 --> 00:15:29.583\n&gt;&gt; So when I saw it in the project\nI can look at my package JSON and\n\n267\n00:15:29.583 --> 00:15:31.694\nI know that I'm using 3.7.1.\n\n268\n00:15:31.694 --> 00:15:34.875\nSo I know exactly which version of\nweb pack I'm gonna be running here.\n\n269\n00:15:34.875 --> 00:15:38.579\nWhether it's globally I probably\ninstalled it a month ago, and\n\n270\n00:15:38.579 --> 00:15:40.390\nGod knows what version it is.\n\n271\n00:15:40.390 --> 00:15:45.900\nSo the question is how do you run\nsomething that is in your own project.\n\n272\n00:15:45.900 --> 00:15:47.440\nA lot of people don't know this,\n\n273\n00:15:47.440 --> 00:15:51.310\nif you look in your Node modules folder,\nthere's a ton of stuff here.\n\n274\n00:15:51.310 --> 00:15:55.390\nBut there's one special\nfolder called .bin.\n\n275\n00:15:55.390 --> 00:15:58.945\nIt's kind of a hidden folder and\nit's the binary.\n\n276\n00:15:58.945 --> 00:16:02.500\nWhen you install these packages,\nthere's actually binary versions of.\n\n277\n00:16:02.500 --> 00:16:04.327\nOr things you could run that's in .bins.\n\n278\n00:16:04.327 --> 00:16:06.960\nThere's probably a couple of them here.\n\n279\n00:16:06.960 --> 00:16:08.210\nYou could see some other ones.\n\n280\n00:16:08.210 --> 00:16:10.923\nThe one I'm particularly interested\nin is webpack in here, so\n\n281\n00:16:10.923 --> 00:16:13.710\nI can actually run\nwebpack from this folder.\n\n282\n00:16:13.710 --> 00:16:14.930\nSo the way I'm going to do this,\n\n283\n00:16:16.220 --> 00:16:18.300\nis I'm going to go back to\nwhere I really want to be.\n\n284\n00:16:18.300 --> 00:16:20.210\nBecause this is where\nmy webpack config is.\n\n285\n00:16:20.210 --> 00:16:22.960\nWebpack looks in the current folder for\nyour config file.\n\n286\n00:16:22.960 --> 00:16:27.120\nSo I'm gonna type in,\nlook for node modules,\n\n287\n00:16:28.790 --> 00:16:33.640\nI'm gonna look for the .bin, and\nthat should look for a webpack.\n\n288\n00:16:33.640 --> 00:16:37.280\nSo now I'm calling\nwebpack from my project.\n\n289\n00:16:37.280 --> 00:16:37.930\nI hit Enter.\n\n290\n00:16:39.760 --> 00:16:42.180\nAnd it takes a second.\n\n291\n00:16:42.180 --> 00:16:45.690\nThat's not doing a whole bunch, and\nyou can see, if you look at output here,\n\n292\n00:16:45.690 --> 00:16:51.985\nit says okay, see there's a whole\nsection here basically output,\n\n293\n00:16:51.985 --> 00:16:56.440\nand it says main.bundle.js admitted and\nit tells you what was bundled in,\n\n294\n00:16:56.440 --> 00:17:00.200\nkind of what's underneath it is all\nthe stuff that kind of went into that.\n\n295\n00:17:00.200 --> 00:17:02.912\nIn this case it was my index.js source.\n\n296\n00:17:02.912 --> 00:17:06.372\nOkay, so then if I go look now.\n\n297\n00:17:06.372 --> 00:17:10.010\nWhoops.\nLet's look to see what it did.\n\n298\n00:17:12.290 --> 00:17:15.870\nOkay so what it did was put this\nmain.bundlejack.js file here\n\n299\n00:17:15.870 --> 00:17:17.930\nthat wasn't there before.\n\n300\n00:17:17.930 --> 00:17:20.190\nAnd let's make sure\nthat it actually works.\n\n301\n00:17:20.190 --> 00:17:24.581\nSo if I actually open up that index.html\nfile, which refers that file.\n\n302\n00:17:24.581 --> 00:17:27.700\nThis thing should say\nHello World in the console.\n\n303\n00:17:27.700 --> 00:17:33.542\nSo I already opened it a minute ago,\nbut if I go to File,\n\n304\n00:17:33.542 --> 00:17:38.630\nOpen File, helloworld diski, index.html.\n\n305\n00:17:38.630 --> 00:17:42.779\nThat's that, you don't actually see\nanything because I didn't actually render\n\n306\n00:17:42.779 --> 00:17:47.150\nHTML, but if I say inspect and look at\nthe console, there's my Hello World.\n\n307\n00:17:47.150 --> 00:17:48.160\nSo at least it worked.\n\n308\n00:17:49.390 --> 00:17:53.250\nThe only thing we wanna do now is look\nat just kind of underneath the sheets\n\n309\n00:17:53.250 --> 00:17:59.470\na little bit to see what is in that, did\nit just copy the file, or what did it do?\n\n310\n00:17:59.470 --> 00:18:01.760\nSo I'm gonna open up main.\n\n311\n00:18:01.760 --> 00:18:07.250\nSo first things first, this is not\ndesigned for you to look at, right?\n\n312\n00:18:07.250 --> 00:18:09.680\nBecause after you bundle it,\nit's taken over and\n\n313\n00:18:09.680 --> 00:18:11.970\nyour code is somehow buried in this thing.\n\n314\n00:18:11.970 --> 00:18:15.766\nYou'll notice that there's all of\nthis seemingly globby gloop here,\n\n315\n00:18:15.766 --> 00:18:19.055\nquite a bit of code that you're\nnot intended to understand But\n\n316\n00:18:19.055 --> 00:18:22.723\nif you kind of squint at it and\nlook at the bottom you can actually see,\n\n317\n00:18:22.723 --> 00:18:26.791\nthere's my window console log wrapped\nup in something module, all right?\n\n318\n00:18:26.791 --> 00:18:29.830\nSo, this code's not exactly\nthe same code you had.\n\n319\n00:18:29.830 --> 00:18:32.680\nIt's kind of a wrapped version of it, and\n\n320\n00:18:32.680 --> 00:18:35.600\nthat'll become more apparent as we\ndo more and more functions on it.\n\n321\n00:18:35.600 --> 00:18:38.690\nWhy that wrapper's there\nwill become more apparent.\n\n322\n00:18:40.110 --> 00:18:43.374\n&gt;&gt; Now, John, I can see people\ngoing well hold on a second,\n\n323\n00:18:43.374 --> 00:18:47.999\nI just had a window.console.log hello\nworld and now my resulting JavaScript is\n\n324\n00:18:47.999 --> 00:18:51.070\nno longer that single line but\na whole bunch of stuff.\n\n325\n00:18:51.070 --> 00:18:56.370\nIt doesn't seem like it's a win for\nme, but why would you say just be wary\n\n326\n00:18:56.370 --> 00:19:01.340\nof applying that thought process\nat a long scale type thing?\n\n327\n00:19:01.340 --> 00:19:06.380\n&gt;&gt; So there is some structure to this,\nit's not that big.\n\n328\n00:19:06.380 --> 00:19:10.230\nLet's look, just for giggles.\n\n329\n00:19:10.230 --> 00:19:12.078\nThe is a 2K.\n\n330\n00:19:12.078 --> 00:19:16.075\nSo in the overall scheme of things,\nit's only added .2K.\n\n331\n00:19:16.075 --> 00:19:18.460\nAnd do we go through this process?\n\n332\n00:19:18.460 --> 00:19:20.100\nI mean, right now,\nwe just copy the file over.\n\n333\n00:19:20.100 --> 00:19:21.760\nSo it does seem kind of silly.\n\n334\n00:19:21.760 --> 00:19:26.760\nAs we start doing things with styles,\nES5, or ES 2015,\n\n335\n00:19:26.760 --> 00:19:32.300\nI mean, different transpiling, but\na lot of fun stuff will happen.\n\n336\n00:19:32.300 --> 00:19:36.190\nAnd webpack, behind the scenes,\nwill be kinda glueing things together for\n\n337\n00:19:36.190 --> 00:19:38.340\nus using that kinda stubbed out code.\n\n338\n00:19:38.340 --> 00:19:43.200\nSo it's small and\nit's gonna do some stuff later on.\n\n339\n00:19:43.200 --> 00:19:44.160\nRight now it does seem kinda silly.\n\n340\n00:19:45.330 --> 00:19:48.290\nSo I think that's all we were\ngonna cover in this episode,\n\n341\n00:19:48.290 --> 00:19:53.310\njust to kinda get you at least get into\nthe point where you have it installed, and\n\n342\n00:19:53.310 --> 00:19:56.980\nyou've at least done the most minimal\npossible webpack configurations so\n\n343\n00:19:56.980 --> 00:20:01.200\nthat as we get more complicated,you\nkind of use this as a baseline.\n\n344\n00:20:01.200 --> 00:20:02.580\n&gt;&gt; Well John, definitely thank you for\n\n345\n00:20:02.580 --> 00:20:04.940\ntaking us through seeing\nwhat prerequisites we need,\n\n346\n00:20:04.940 --> 00:20:08.650\nalthough the bare minimum kind of set up\nfor webpack and how to get started there.\n\n347\n00:20:08.650 --> 00:20:12.010\nAnd there was definitely a gem in that\n.bin folder hidden in the node module.\n\n348\n00:20:12.010 --> 00:20:13.600\nSo I'm gonna have to keep that in mind.\n\n349\n00:20:13.600 --> 00:20:17.110\nBut we have more intro to Webpack coming\nat you, so definitely stay tuned.\n\n350\n00:20:17.110 --> 00:20:19.360\nBut for now, we're gonna go ahead and\nwrap this one off.\n\n351\n00:20:19.360 --> 00:20:22.730\nSo signing off for DevProTV,\nI've been your host Justin Dennison.\n\n352\n00:20:22.730 --> 00:20:23.310\n&gt;&gt; And I'm John Tucker.\n\n353\n00:20:23.310 --> 00:20:24.955\n&gt;&gt; And we'll see you next time.\n\n354\n00:20:24.955 --> 00:20:30.800\n[MUSIC]\n\n",
          "vimeoId": "240014312"
        },
        {
          "description": "In this episode, Justin and John start looking at several of the core features that webpack provides. John explores bundling multiple files into a single file, generating source maps for ease of development, and minification of JavaScript code.",
          "length": "1674",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-2-1-1-the_big_idea-102517-PGM.00_27_44_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-2-1-1-the_big_idea-102517-PGM.00_27_44_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-2-1-1-the_big_idea-102517-PGM.00_27_44_13.Still001-sm.jpg",
          "title": "The Big Idea",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.353 --> 00:00:16.497\nGreetings everyone, and welcome back to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.497 --> 00:00:18.564\nI'm your host Justin Dennison, and\n\n4\n00:00:18.564 --> 00:00:22.110\nwe're here back in the studio\ncontinuing our look at Web Pack.\n\n5\n00:00:22.110 --> 00:00:25.962\nIn particular, we're gonna start to dive\ninto some more of the powerful features,\n\n6\n00:00:25.962 --> 00:00:29.000\nand kind of the impetus of why I\nwould even use a tool like this.\n\n7\n00:00:29.000 --> 00:00:31.880\nAnd here to help us along in that\nendeavor, is Mr. John Tucker.\n\n8\n00:00:31.880 --> 00:00:32.790\nHow you doing today John?\n\n9\n00:00:32.790 --> 00:00:33.800\n&gt;&gt; Doing very good.\n\n10\n00:00:33.800 --> 00:00:36.810\n&gt;&gt; So John, I have a real quick,\nI've heard of Angular and\n\n11\n00:00:36.810 --> 00:00:41.900\nReact and I feel like this might\nbe applicable in those contexts.\n\n12\n00:00:41.900 --> 00:00:45.930\nSo do we need to know more than what\nwe've seen in the previous episode,\n\n13\n00:00:45.930 --> 00:00:49.280\nto get started using frameworks like that?\n\n14\n00:00:49.280 --> 00:00:52.730\n&gt;&gt; So, what we're learning\ntoday is about webpack.\n\n15\n00:00:52.730 --> 00:00:55.380\nNow, you'll notice when you\nuse those frameworks like,\n\n16\n00:00:55.380 --> 00:01:00.320\nAngular or React,\nthey're all dependent on some bundling.\n\n17\n00:01:00.320 --> 00:01:01.890\nIn this case webpack.\n\n18\n00:01:01.890 --> 00:01:02.860\nBut isn't all the way around.\n\n19\n00:01:02.860 --> 00:01:06.600\nYou could actually be learning\nwebpack completely independent,\n\n20\n00:01:06.600 --> 00:01:10.060\nof learning React or Angular.\n\n21\n00:01:10.060 --> 00:01:12.610\nLater on, we'll just introduce\nyou to a little bit of React,\n\n22\n00:01:12.610 --> 00:01:15.250\njust to make sure you understand\nthat can be used with it.\n\n23\n00:01:15.250 --> 00:01:17.710\nBut it's completely independent and\nright now,\n\n24\n00:01:17.710 --> 00:01:20.680\nall of our examples are gonna\nbe just plain JavaScript,\n\n25\n00:01:20.680 --> 00:01:24.140\nno framework, just trying to keep\nthose ideas completely separate.\n\n26\n00:01:24.140 --> 00:01:29.280\nSo, and so we're gonna do today, is we're\ngonna continue on this session about,\n\n27\n00:01:30.580 --> 00:01:33.870\nlast time all we did\nreally was copy a file.\n\n28\n00:01:33.870 --> 00:01:36.660\nAnd so that wasn't terribly useful, and so\n\n29\n00:01:36.660 --> 00:01:38.380\nwe're gonna introduce\na concept called bundling.\n\n30\n00:01:38.380 --> 00:01:41.490\nThis is kind of the main point of webpack.\n\n31\n00:01:41.490 --> 00:01:43.760\nSo you know back in the day\nwhen you wrote JavaScript,\n\n32\n00:01:43.760 --> 00:01:47.620\nit was like this long\nthousand line piece of code.\n\n33\n00:01:47.620 --> 00:01:51.490\nIt was very hard to troubleshoot,\nbecause you had to scroll and\n\n34\n00:01:51.490 --> 00:01:55.180\nscroll to find what the codes\nyou were working on.\n\n35\n00:01:55.180 --> 00:01:57.803\nSo, one of the big things\nthat bundling gives you,\n\n36\n00:01:57.803 --> 00:02:00.307\nlets you split all your\nfiles into small pieces.\n\n37\n00:02:00.307 --> 00:02:05.442\nSo you may have hundreds of files now of\nsort JavaScript code, and the problem\n\n38\n00:02:05.442 --> 00:02:10.419\nthough if I just left that there, the\nproblem is when you open up a web page,\n\n39\n00:02:10.419 --> 00:02:15.725\nyou don't want the web browser to have to\npull down a hundred little tiny files.\n\n40\n00:02:15.725 --> 00:02:19.070\nThat would be very wasteful,\nhave a lot of overhead.\n\n41\n00:02:19.070 --> 00:02:22.250\nSo before you delivered to the browser,\nwhat you need to do is\n\n42\n00:02:22.250 --> 00:02:27.210\nyou need to take all those hundred files,\nsmall files, bundle them all together\n\n43\n00:02:27.210 --> 00:02:31.884\ninto one fat file, bigger file\nthat the browser actually uses.\n\n44\n00:02:31.884 --> 00:02:35.580\nSo that's what we are gonna do today in\nthis next examples, in this case we're\n\n45\n00:02:35.580 --> 00:02:39.940\ngoing to take two files, and we're gonna\npush them together so you just have\n\n46\n00:02:39.940 --> 00:02:42.620\none file delivered to the browser, but\nit could be 100 files for that matter.\n\n47\n00:02:43.740 --> 00:02:49.610\nSo looking back at our project folder, the\none that you can download in the notes,\n\n48\n00:02:49.610 --> 00:02:52.770\nthe last one we worked on was\ncalled Hello World, and today\n\n49\n00:02:52.770 --> 00:02:56.690\nthis one we're going to use is called\nbundle, so I'm gonna go into bundle.\n\n50\n00:02:56.690 --> 00:02:59.600\nAnd this is basically building\noff the previous example,\n\n51\n00:02:59.600 --> 00:03:03.460\nso we're not gonna redo all the stuff we\ndid last time, so imagine you basically\n\n52\n00:03:03.460 --> 00:03:07.680\ncopied our Hello World over to bundle,\nnow we're kind of working from that point.\n\n53\n00:03:09.090 --> 00:03:12.047\nSo the first thing we wanna do\nat bundle is set up the problem.\n\n54\n00:03:12.047 --> 00:03:16.913\nSo the problem is, in the source,\nbefore we just had one file called,\n\n55\n00:03:16.913 --> 00:03:21.712\nindex.html index.js and\nnow you'll see that there's two files.\n\n56\n00:03:21.712 --> 00:03:25.560\nOne's called index.js and\none is called secondary.js.\n\n57\n00:03:25.560 --> 00:03:27.999\nSo let's look at index.js.\n\n58\n00:03:27.999 --> 00:03:30.600\nWhat does it look like?\n\n59\n00:03:30.600 --> 00:03:33.426\nSo there's my, make this bigger.\n\n60\n00:03:38.985 --> 00:03:41.488\nActually, I was using Atom before,\nlet me just use Atom.\n\n61\n00:03:43.473 --> 00:03:45.081\nColor codes it for us too.\n\n62\n00:03:49.246 --> 00:03:53.256\nSo [COUGH],\nbefore we just had a window console.log,\n\n63\n00:03:53.256 --> 00:03:56.010\nso now I've got extra two lines.\n\n64\n00:03:56.010 --> 00:04:01.240\nOne is, var secondary = req,\nso this is a new concept.\n\n65\n00:04:01.240 --> 00:04:05.230\nI'm requiring and I say ./secondary.\n\n66\n00:04:05.230 --> 00:04:10.700\nSo basically this says,\nthe secondary file is exporting something,\n\n67\n00:04:10.700 --> 00:04:16.190\nI'm basically assigning whatever it's\nexporting to the secondary variable,\n\n68\n00:04:16.190 --> 00:04:18.550\nand it happens to be a function,\nwe'll look at it in a minute.\n\n69\n00:04:18.550 --> 00:04:22.310\nSo, because I know it's a function,\nI'm gonna call that function below here.\n\n70\n00:04:22.310 --> 00:04:25.966\nSo I think it's probably important\nto see what's in secondary, then.\n\n71\n00:04:25.966 --> 00:04:32.095\nSecondary says, module.exports =\na function that itself just says,\n\n72\n00:04:32.095 --> 00:04:37.180\nwindow.console.log('hello secondary').\n\n73\n00:04:37.180 --> 00:04:42.320\nSo what this is,\nthis by using the syntax module.exports.\n\n74\n00:04:42.320 --> 00:04:46.850\nThat means export something, and\nthen require means import something.\n\n75\n00:04:46.850 --> 00:04:49.385\nAnd then I can use it for my first file.\n\n76\n00:04:49.385 --> 00:04:53.020\nSo the entry point of this\nis still index.js, and\n\n77\n00:04:53.020 --> 00:04:54.910\nit's pulling in other things.\n\n78\n00:04:54.910 --> 00:04:58.070\nSo this could also,\nyou could endless change it.\n\n79\n00:04:58.070 --> 00:05:01.070\nSecondary could have\npulled in a third file.\n\n80\n00:05:01.070 --> 00:05:04.635\nYou can imagine this tree of files that\nare kinda being pulled off of this\n\n81\n00:05:04.635 --> 00:05:07.770\nindex.js.\n\n82\n00:05:07.770 --> 00:05:11.616\nSo now we've set the problem up so now\nwe've got two files, and somehow we want\n\n83\n00:05:11.616 --> 00:05:15.129\nto use webpack to turn this into one\nfile to be delivered to the browser.\n\n84\n00:05:16.440 --> 00:05:20.010\nSo, the next step is to go\nback to command line, and\n\n85\n00:05:20.010 --> 00:05:23.470\nI believe we don't have to\nchange the webpack file.\n\n86\n00:05:23.470 --> 00:05:26.948\nSo let's remind ourselves\nwhat's in the webpack file.\n\n87\n00:05:28.283 --> 00:05:31.581\nSo ,let's go and look what's in\nthe webpack file again just,\n\n88\n00:05:31.581 --> 00:05:34.704\nwe're gonna web pack muzzle\nremind our self what's in it.\n\n89\n00:05:36.903 --> 00:05:41.790\nAnd you'll see the same as it was before.\n\n90\n00:05:43.810 --> 00:05:48.400\nThere's basically\nthe entry point index.js,\n\n91\n00:05:48.400 --> 00:05:53.440\nand the file name is output, then it\ndumps it into the dirt disk folder.\n\n92\n00:05:53.440 --> 00:05:55.740\n&gt;&gt; Now, John, I just wanna clarify.\n\n93\n00:05:55.740 --> 00:05:59.890\nBecause index.js is actually\nrequiring the secondary file,\n\n94\n00:05:59.890 --> 00:06:03.120\nwe don't have to worry about telling\nwebpack anything about that.\n\n95\n00:06:03.120 --> 00:06:07.980\nThis is kind of a seek and discovery\nexpedition for webpack from this point on.\n\n96\n00:06:07.980 --> 00:06:09.932\n&gt;&gt; Right, yes.\nThe way this works,\n\n97\n00:06:09.932 --> 00:06:13.178\nis you tell webpack where the start and\n\n98\n00:06:13.178 --> 00:06:18.063\nthen it walks from that file\nout to find out all the files.\n\n99\n00:06:18.063 --> 00:06:21.870\nSo that's the kind of the nice things,\nyou don't have to come back and keep on\n\n100\n00:06:21.870 --> 00:06:25.575\nediting this webpack file, referencing\nall the files you could be using.\n\n101\n00:06:25.575 --> 00:06:28.389\nThat's all done within the tree of files.\n\n102\n00:06:28.389 --> 00:06:30.245\nSo it makes it very easy to share code,\n\n103\n00:06:30.245 --> 00:06:33.160\nbecause you can see all\nof those dependencies.\n\n104\n00:06:33.160 --> 00:06:34.480\nYou don't have to change the master file.\n\n105\n00:06:35.660 --> 00:06:37.830\nOkay?\nSo we didn't change the webpack config,\n\n106\n00:06:37.830 --> 00:06:41.360\nso the next step is really just to\nrun the command and see what happens.\n\n107\n00:06:41.360 --> 00:06:44.543\nSo, let's remind our self what we did and\nlet me make this now smaller,\n\n108\n00:06:44.543 --> 00:06:45.826\nbecause this is now too big.\n\n109\n00:06:48.066 --> 00:06:51.629\nOkay, so I'm the project folder.\n\n110\n00:06:51.629 --> 00:06:58.302\nAnd remember, I'm gonna run webpack\nfrom the node_modules/.bin/webpack.\n\n111\n00:06:59.958 --> 00:07:02.461\nLet's see what it does.\n\n112\n00:07:02.461 --> 00:07:06.600\nOkay, so let's look at the output,\ncuz it kinda is telling here.\n\n113\n00:07:06.600 --> 00:07:12.410\nYou can see it says,\nit's output a main.bundle.js.\n\n114\n00:07:12.410 --> 00:07:17.690\nAnd the two files that went into\nbuilding it were .source.index.js,\n\n115\n00:07:17.690 --> 00:07:21.875\nthat was what we had before, but see,\nnow it also picked up .sourcesecondary.js.\n\n116\n00:07:23.620 --> 00:07:25.919\nSo now it's important to see\nwell what did it do in the end?\n\n117\n00:07:29.270 --> 00:07:30.310\nBundle.\n\n118\n00:07:31.916 --> 00:07:37.048\nAnd you can see, there's still just\na single file called, main.bundle.js.\n\n119\n00:07:37.048 --> 00:07:38.320\nSo let's run it.\n\n120\n00:07:38.320 --> 00:07:40.740\nAnd then we'll look at the bundle and\nsee what's in it.\n\n121\n00:07:40.740 --> 00:07:44.347\nSo to run it,\nagain I'm gonna use my browser.\n\n122\n00:07:44.347 --> 00:07:50.653\nI'm gonna do an open file, I'm gonna\ngo back to my bundle folder to disk,\n\n123\n00:07:50.653 --> 00:07:55.958\nindex to html and\nof course [INAUDIBLE] console.log, stuff.\n\n124\n00:07:55.958 --> 00:08:00.108\nSo if you look at it,\nyou'll see Hello World.\n\n125\n00:08:00.108 --> 00:08:03.925\nCuz that happened first, then I called\nsecondary, so you can see hello secondary.\n\n126\n00:08:03.925 --> 00:08:04.990\nSo it did actually work.\n\n127\n00:08:06.080 --> 00:08:09.560\nAnd then let's look, even though\nwe're not really supposed to do this,\n\n128\n00:08:09.560 --> 00:08:12.570\nwe'll look at the main bundle to\nsee what happened inside of it.\n\n129\n00:08:14.240 --> 00:08:18.929\nMain bundle.\n\n130\n00:08:18.929 --> 00:08:21.690\nOkay, so\nthere's [INAUDIBLE] we saw earlier, right,\n\n131\n00:08:21.690 --> 00:08:23.799\nwhich we're not gonna pay attention to.\n\n132\n00:08:23.799 --> 00:08:27.235\nBut at the bottom you\ncould see now there's,\n\n133\n00:08:27.235 --> 00:08:30.470\nyou can see resemblance of your code.\n\n134\n00:08:30.470 --> 00:08:34.350\nInside the one file I've got\nbasically the original code and\n\n135\n00:08:34.350 --> 00:08:38.570\nI can see that it's got some module that's\ngot wrapped here [INAUDIBLE] sporting and\n\n136\n00:08:38.570 --> 00:08:39.850\nthere's my hello secondary.\n\n137\n00:08:39.850 --> 00:08:45.102\nSo all the codes are there, but\nthey all run from this one file now.\n\n138\n00:08:45.102 --> 00:08:47.787\nSo that's kind of one of the big\nwins with using webpack.\n\n139\n00:08:47.787 --> 00:08:50.395\nMatter of fact, that's the main\nwhole point of what webpack does,\n\n140\n00:08:50.395 --> 00:08:51.890\nwhat you just saw there.\n\n141\n00:08:51.890 --> 00:08:54.400\nLots of files into one file.\n\n142\n00:08:54.400 --> 00:08:59.390\n&gt;&gt; I only have to require a single\nscript tag, everything is good to go,\n\n143\n00:08:59.390 --> 00:09:01.850\nit's going to manage kind\nof the requirements and\n\n144\n00:09:01.850 --> 00:09:04.310\nthe interdependencies\nbetween respective files.\n\n145\n00:09:04.310 --> 00:09:08.720\nBut I do have one question about that\nwalking out and discovery of the tree\n\n146\n00:09:08.720 --> 00:09:12.160\nof dependencies within the context\nof the JavaScript files.\n\n147\n00:09:12.160 --> 00:09:12.980\n&gt;&gt; Okay.\n\n148\n00:09:12.980 --> 00:09:18.054\n&gt;&gt; As I add files, does my build\nprocess increased drastically,\n\n149\n00:09:18.054 --> 00:09:23.430\nI mean is there, does there seem to be and\nmaybe this is [CROSSTALK].\n\n150\n00:09:23.430 --> 00:09:26.533\nWe notice that a little bit build does\ntake a little bit the actual build process\n\n151\n00:09:26.533 --> 00:09:28.382\nbut the start up process\ntakes a little while.\n\n152\n00:09:28.382 --> 00:09:31.373\nDoes my build process increase\nas I continue to make\n\n153\n00:09:31.373 --> 00:09:35.410\nthe secondary required files like\nessentially these like modules so\n\n154\n00:09:35.410 --> 00:09:38.200\nto speak\n&gt;&gt; So generally, the answer is yes.\n\n155\n00:09:38.200 --> 00:09:42.990\nSo as you add more and more dependencies\nto your project it does more and\n\n156\n00:09:42.990 --> 00:09:44.970\nmore to bundle all together.\n\n157\n00:09:44.970 --> 00:09:50.850\nBut it doesn't grow exponentially and\nwe'll learn about some other process that\n\n158\n00:09:50.850 --> 00:09:57.280\nare more time consuming like, It's\ncalled transpilation reconverting code.\n\n159\n00:09:57.280 --> 00:10:00.790\nSo typically the big code that you're\ngonna be bringing into your project is\n\n160\n00:10:00.790 --> 00:10:02.800\nactually third party libraries.\n\n161\n00:10:02.800 --> 00:10:07.630\nAnd typically you don't do the expensive\noperations on the third party libraries.\n\n162\n00:10:07.630 --> 00:10:11.080\nYou're only doing your expensive\noperations on your own code.\n\n163\n00:10:11.080 --> 00:10:15.300\nSo it will take longer but\nit's not like exponentially load.\n\n164\n00:10:16.360 --> 00:10:19.970\nAnd my machine,\nI have a pretty slow machine, and I've got\n\n165\n00:10:19.970 --> 00:10:24.256\nsubstantial code bases, it's still\nonly maybe two three seconds at most.\n\n166\n00:10:24.256 --> 00:10:26.940\nAnd make even better,\n\n167\n00:10:26.940 --> 00:10:32.030\nwe'll learn about some development tool,\ndevelopment mode basically,\n\n168\n00:10:32.030 --> 00:10:36.060\nwhere as you live code,\nit starts compiling it behind the scenes.\n\n169\n00:10:36.060 --> 00:10:38.710\nAnd that only takes milliseconds,\n\n170\n00:10:38.710 --> 00:10:43.408\ndo the full compile does take\na couple seconds for sure.\n\n171\n00:10:43.408 --> 00:10:48.640\nSo back to we're doing, we learned\nabout bundling, and we want to learn\n\n172\n00:10:48.640 --> 00:10:54.940\nthat the next concept, next concept is\nwe're going to build office example.\n\n173\n00:10:56.350 --> 00:11:01.460\nAnd we go to another folder and\nwe go to another folder, and\n\n174\n00:11:01.460 --> 00:11:08.960\nwe're gonna do some kind called\nthe source map, source map.\n\n175\n00:11:08.960 --> 00:11:13.832\nSo this will kind of the more obvious\nwhen we go to the next thing called\n\n176\n00:11:13.832 --> 00:11:18.116\nmodification but this webpack\nthing is munging your code and\n\n177\n00:11:18.116 --> 00:11:19.926\nkind of obscuring it.\n\n178\n00:11:19.926 --> 00:11:25.330\nThat main.bundle itself,\nwhat would be interesting to look at is,\n\n179\n00:11:25.330 --> 00:11:30.080\nlet's look, [INAUDIBLE], we'll see\nthe problem here and then we'll solve it.\n\n180\n00:11:30.080 --> 00:11:34.140\nSo if I go to my, if you're\nfamiliar with developer tools, and\n\n181\n00:11:34.140 --> 00:11:39.830\nyou go to your Sources and after I hit\nReload here make sure I get my sources.\n\n182\n00:11:39.830 --> 00:11:44.110\nYou'll see in your sources here,\nyou'll notice, let me make this bigger.\n\n183\n00:11:45.670 --> 00:11:47.996\nRight, there's my index.html and\n\n184\n00:11:47.996 --> 00:11:51.378\nthen there's this whole main bundle thing,\nright?\n\n185\n00:11:51.378 --> 00:11:55.008\nAnd it looks like gobble d gook and the\nproblem is if your trying to troubleshoot\n\n186\n00:11:55.008 --> 00:11:58.600\nyour code, it doesn't look like your code,\nit looks like webpack's code.\n\n187\n00:11:58.600 --> 00:12:00.590\nI mean your cells\nare buried at the bottom.\n\n188\n00:12:00.590 --> 00:12:04.560\nIt would be nice to have your code\nsomehow visible when you're considering\n\n189\n00:12:04.560 --> 00:12:09.210\nbreak points or trying to look at your\ncode and actually see your code here.\n\n190\n00:12:09.210 --> 00:12:12.900\nSo that's what were gonna do\nby doing this source map.\n\n191\n00:12:12.900 --> 00:12:16.420\nIt's gonna make it so\nthat your development tool will say\n\n192\n00:12:16.420 --> 00:12:21.440\nI know how to kinda unwind this so I can\nactually see my own source code again.\n\n193\n00:12:21.440 --> 00:12:23.300\nSo that's the actual\nproblem we're solving.\n\n194\n00:12:23.300 --> 00:12:26.450\nIt'll be even more obvious when\nwe when we do minification,\n\n195\n00:12:26.450 --> 00:12:29.375\nis then this code would look\nlike complete googly gook.\n\n196\n00:12:29.375 --> 00:12:33.490\nBut at least,\nit's human-readable now, mostly.\n\n197\n00:12:33.490 --> 00:12:37.730\nOkay, so what I'm gonna do now,\nis we're gonna do the Swartz map example.\n\n198\n00:12:37.730 --> 00:12:39.840\nSo what are we gonna do here?\n\n199\n00:12:39.840 --> 00:12:46.092\nWe're starting from the previous\nexample and, right, so.\n\n200\n00:12:52.327 --> 00:12:58.990\nC Let's look at the webpack thing.\n\n201\n00:13:07.998 --> 00:13:11.861\nRight, I thought I had to add some\nextra package here, so I was confused.\n\n202\n00:13:11.861 --> 00:13:16.115\nBut yeah, this tool will actually generate\nsource maps automatically for you, so\n\n203\n00:13:16.115 --> 00:13:19.170\nyou didn't have to add\nany third party packages.\n\n204\n00:13:19.170 --> 00:13:22.849\nAnd if you look at only one line\nhas really changed from this in\n\n205\n00:13:22.849 --> 00:13:24.012\nthe previous one.\n\n206\n00:13:24.012 --> 00:13:27.310\nIt says dev tool colon source map.\n\n207\n00:13:27.310 --> 00:13:30.930\nSo by adding that one line, you're\nbasically telling this build process.\n\n208\n00:13:30.930 --> 00:13:33.320\nBy the way,\nin addition to doing the bundle,\n\n209\n00:13:33.320 --> 00:13:39.730\nmake this map file ,so that my dev tools\nunderstand how to unwind that package.\n\n210\n00:13:39.730 --> 00:13:42.070\nSo you add to one line,\nand then we just build.\n\n211\n00:13:43.250 --> 00:13:44.110\nSo let's go ahead and do that.\n\n212\n00:13:45.640 --> 00:13:50.960\nSource map, so I'm gonna do what,\nso everything else is the same.\n\n213\n00:13:50.960 --> 00:13:54.900\nSo if I look through the source and\nstill the two files, right?\n\n214\n00:13:55.900 --> 00:14:01.330\nSo now I'm gonna do what\n./node_modules/.bin webpack.\n\n215\n00:14:03.690 --> 00:14:06.570\nOkay, duh, duh, duh.\n\n216\n00:14:06.570 --> 00:14:09.330\nOkay, so now, one thing you'll\nnotice here now, your output.\n\n217\n00:14:09.330 --> 00:14:13.010\nBefore it only output a single file,\nthe main.bundle.js,\n\n218\n00:14:13.010 --> 00:14:16.229\nand now you see a secondary\nfile called a .map, okay?\n\n219\n00:14:16.229 --> 00:14:19.390\nThe .map is not meant\nto be read by humans.\n\n220\n00:14:19.390 --> 00:14:24.630\nIt's parsed by your developer\ntools to make it easier for\n\n221\n00:14:24.630 --> 00:14:26.400\nyou to troubleshoot your kind.\n\n222\n00:14:26.400 --> 00:14:29.250\nAnd one thing you'll notice,\nit's not so obvious here, but\n\n223\n00:14:29.250 --> 00:14:33.750\nyour bundle, your map files\nwill get very big over time.\n\n224\n00:14:33.750 --> 00:14:36.310\nAnd you think, 'well,\nthat's making my app really slow now.\n\n225\n00:14:36.310 --> 00:14:41.187\nNow it's gotta pull, the map is only\npulled when the dev tools windows open,\n\n226\n00:14:41.187 --> 00:14:43.200\nso it's a dev tool thing.\n\n227\n00:14:43.200 --> 00:14:44.360\nSo a normal user,\n\n228\n00:14:44.360 --> 00:14:47.810\nwhen they're using your website,\nthey're never pulling that map file.\n\n229\n00:14:47.810 --> 00:14:50.260\nIt's only if they open up dev tools which\n\n230\n00:14:50.260 --> 00:14:53.410\npresumably they're developing at that\npoint, then they get the map file.\n\n231\n00:14:53.410 --> 00:14:57.210\nSo you don't need to worry about\nthe map file kind of wasting resources.\n\n232\n00:14:58.230 --> 00:15:02.330\nSo the key to this is let's see what\nWhat this did for our troubleshoot.\n\n233\n00:15:02.330 --> 00:15:06.971\nSo if I go into here and open up,\n\n234\n00:15:06.971 --> 00:15:12.507\ninstead of the bundle, I'm looking\n\n235\n00:15:12.507 --> 00:15:17.507\nat source map, list, okay, and\n\n236\n00:15:17.507 --> 00:15:23.239\ninspect, look at my sources, oops.\n\n237\n00:15:29.331 --> 00:15:31.310\nSources, and then I gotta reload it.\n\n238\n00:15:31.310 --> 00:15:36.560\nFor some reason until it's open,\nit doesn't actually pull it.\n\n239\n00:15:36.560 --> 00:15:40.059\nOkay, so as before, right,\nyou look at your source code.\n\n240\n00:15:40.059 --> 00:15:42.480\nYou still see that main bundle and\nit still looks like gobbledy gook.\n\n241\n00:15:43.560 --> 00:15:48.150\nBut now you see this extra entry that\nshows underneath that wasn't there before.\n\n242\n00:15:48.150 --> 00:15:49.820\nAnd if you look at the source,\n\n243\n00:15:49.820 --> 00:15:53.010\nall the sudden now you see what\nlooks like your source folder.\n\n244\n00:15:53.010 --> 00:15:55.480\nAnd it actually looks like,\nthis looks like, the resource code.\n\n245\n00:15:55.480 --> 00:15:57.129\nMaybe with this little\nfooter that's tacked on.\n\n246\n00:15:57.129 --> 00:16:01.044\nSo you can actually set break points\nhere just like you normally would.\n\n247\n00:16:01.044 --> 00:16:04.088\nCan come in here and\nIt's at a break point, run the code, and\n\n248\n00:16:04.088 --> 00:16:09.160\nyou're actually troubleshooting with your\ncode, not the compiled webpack code.\n\n249\n00:16:09.160 --> 00:16:13.670\nSo that's the main point of building\na map file, it's called a source map.\n\n250\n00:16:15.480 --> 00:16:20.900\nSo, that leads us into the last\nsection of this particular lesson.\n\n251\n00:16:20.900 --> 00:16:25.705\nAnd that is minification, so what\nhappens is your job code gets bigger and\n\n252\n00:16:25.705 --> 00:16:27.573\nbigger and bigger, right?\n\n253\n00:16:27.573 --> 00:16:31.291\nAnd it just takes a while for\nthe browser to load it.\n\n254\n00:16:31.291 --> 00:16:35.372\nSo it will be nice that you\ncan make it small as possible.\n\n255\n00:16:35.372 --> 00:16:39.999\nAnd especially if you start using\na lot of long variable names.\n\n256\n00:16:39.999 --> 00:16:45.870\nMaybe in 20 characters long,\nthat really bloats the size of your code.\n\n257\n00:16:45.870 --> 00:16:48.942\nSo minification basically goes,\ntakes your code and\n\n258\n00:16:48.942 --> 00:16:53.250\nit switches out variables, instead of\nsomething long, it may just use J.\n\n259\n00:16:53.250 --> 00:16:57.500\nAll right, so it's something that's\njust shortens your whole code.\n\n260\n00:16:57.500 --> 00:17:02.170\nYou can actually about halve the size of\nyour job, so and again, we're gonna use\n\n261\n00:17:02.170 --> 00:17:04.930\nthe source map to kind of maintain your\ncode, so when you're troubleshooting it,\n\n262\n00:17:04.930 --> 00:17:08.850\nyou're not looking at Js, Ks,\nyou're looking at your own variables.\n\n263\n00:17:08.850 --> 00:17:11.610\n&gt;&gt; Now, John before we move on to that,\nlet me back up a little bit,\n\n264\n00:17:11.610 --> 00:17:12.790\nit just popped into my head.\n\n265\n00:17:12.790 --> 00:17:13.960\nSo source maps, you said,\n\n266\n00:17:13.960 --> 00:17:17.030\nthat these typically aren't loaded\nuntil you open up the dev tools.\n\n267\n00:17:17.030 --> 00:17:19.910\nIs this something that you would\ndeploy in production just in\n\n268\n00:17:19.910 --> 00:17:21.230\ncase you had to go and look at?\n\n269\n00:17:21.230 --> 00:17:24.420\nOr would you go back and change that out,\n\n270\n00:17:24.420 --> 00:17:26.980\nrebuild it before you do a deployment,\nright?\n\n271\n00:17:26.980 --> 00:17:31.720\n&gt;&gt; So I'd typically leave\nit in with the deployment.\n\n272\n00:17:31.720 --> 00:17:36.190\nI mean you may think well they can see my\ncode but realistically if they have any of\n\n273\n00:17:36.190 --> 00:17:40.300\ntheir JavaScript they actually have their\nJavaScript even if it was bundled, right?\n\n274\n00:17:40.300 --> 00:17:43.550\nMaybe a little harder to get after but\nin general you don't,\n\n275\n00:17:43.550 --> 00:17:48.180\nyou just don't treat JavaScript\nas being something that's private\n\n276\n00:17:48.180 --> 00:17:52.610\ncuz it's really in your browser and\nany hacker really could disable it.\n\n277\n00:17:52.610 --> 00:17:57.960\nSo I just leave it there it doesn't cause\nme anything, because this space is cheap,\n\n278\n00:17:57.960 --> 00:18:02.340\nand only really being used\nif I use it to troubleshoot.\n\n279\n00:18:02.340 --> 00:18:03.089\nSo I typically leave it there.\n\n280\n00:18:03.089 --> 00:18:07.455\nI'm not sure if other people, you know I\ndidn't actually check to see if Google or\n\n281\n00:18:07.455 --> 00:18:10.190\nany of those guys that they\nleave them there or not.\n\n282\n00:18:10.190 --> 00:18:13.446\n&gt;&gt; Okay, I was just wondering about that\nbecause we were talking about how large\n\n283\n00:18:13.446 --> 00:18:14.447\nthey were getting, but\n\n284\n00:18:14.447 --> 00:18:17.700\nthey're only loaded if you're going\nto seek those out to load them.\n\n285\n00:18:17.700 --> 00:18:21.773\nTo some extent, if someone's already\ntechnically that savvy, all right, they're\n\n286\n00:18:21.773 --> 00:18:25.511\ngoing searching for that then, they\nprobably know what they're looking for,\n\n287\n00:18:25.511 --> 00:18:29.010\nand I agree, don't worry about\nprivatization of your JavaScript code.\n\n288\n00:18:29.010 --> 00:18:34.250\nBut a follow-up questions about\nthe minification which source maps,\n\n289\n00:18:34.250 --> 00:18:40.110\nsaid do help with, we minify text,\nexcept for, are strings minified in that?\n\n290\n00:18:40.110 --> 00:18:41.790\nWe don't touch strings\nduring minification.\n\n291\n00:18:41.790 --> 00:18:45.476\n&gt;&gt; Right, so obviously if you have\nthe word, hello console world,\n\n292\n00:18:45.476 --> 00:18:49.376\nhello world in your code,\nHello World is still there as Hello World.\n\n293\n00:18:49.376 --> 00:18:51.329\nIt doesn't like you changed so,\n\n294\n00:18:51.329 --> 00:18:55.237\nbasically it maintains all of\nthe functionality of your code, and\n\n295\n00:18:55.237 --> 00:18:59.870\nit's not- it's just stuff that doesn't\nreally matter to the application.\n\n296\n00:18:59.870 --> 00:19:04.060\nLike, what the variables name\nis doesn't really matter.\n\n297\n00:19:04.060 --> 00:19:09.248\nWhether it's, whatever, secondary or\njust S It doesn't really matter,\n\n298\n00:19:09.248 --> 00:19:12.825\nso it only changes those\nthings that don't matter.\n\n299\n00:19:12.825 --> 00:19:15.319\n&gt;&gt; Okay, I just wanted to clarify that,\nbecause some people are like,\n\n300\n00:19:15.319 --> 00:19:16.900\nwoah that's going to change.\n\n301\n00:19:16.900 --> 00:19:22.580\nNo, no, it's actually just modifying\nnon-context specific types of things,\n\n302\n00:19:22.580 --> 00:19:27.660\nso function names, well there are a couple\nof like edge cases iIthink there.\n\n303\n00:19:27.660 --> 00:19:31.260\nSo, I'm kind of interested to see how\nwebpack does this cuz I've used other\n\n304\n00:19:31.260 --> 00:19:35.030\nbuild tools where sometimes this wasn't as\nstraightforward as I'd wished it had been.\n\n305\n00:19:35.030 --> 00:19:35.530\n&gt;&gt; What, identification?\n&gt;&gt; Yeah.\n\n306\n00:19:35.530 --> 00:19:36.821\n&gt;&gt; Okay, so the good news is\n\n307\n00:19:36.821 --> 00:19:40.689\nidentification is very easy.\nAnd so, what we'll do is we'll just,\n\n308\n00:19:40.689 --> 00:19:43.750\nbuilding off again,\noff the previous example.\n\n309\n00:19:43.750 --> 00:19:45.420\nSo I already got it set up here.\n\n310\n00:19:45.420 --> 00:19:46.570\nSo I'm gonna go to identification.\n\n311\n00:19:47.690 --> 00:19:49.630\nAnd my notes real quick.\n\n312\n00:19:49.630 --> 00:19:55.390\nNow, this is an example where the webpack\nitself doesn't do everything itself.\n\n313\n00:19:55.390 --> 00:19:59.060\nAnd there's a whole ecosystem\nof third party tools\n\n314\n00:19:59.060 --> 00:20:01.630\nthat will do extra stuff for you.\n\n315\n00:20:01.630 --> 00:20:03.550\nAnd this is an example where we're\ngonna use a third parry tool.\n\n316\n00:20:03.550 --> 00:20:08.230\nIn this case it's called Uglify,\nlike you're making your code ugly,\n\n317\n00:20:08.230 --> 00:20:11.220\nanother term for minification.\n\n318\n00:20:11.220 --> 00:20:14.273\nAnd the way you install that\npackage is you're gonna come here.\n\n319\n00:20:14.273 --> 00:20:18.690\nBefore you do anything,\nyou're gonna type in mpm install.\n\n320\n00:20:18.690 --> 00:20:24.049\nIn this case, it's uglify\n\n321\n00:20:24.049 --> 00:20:29.643\n-webpack plugin save dev.\n\n322\n00:20:29.643 --> 00:20:32.899\nAnd again, that's another save\ninto my package, JASON, so\n\n323\n00:20:32.899 --> 00:20:34.890\nit knows what version of it.\n\n324\n00:20:34.890 --> 00:20:37.919\nSo I'm not gonna type it,\ncuz I've already got it installed,\n\n325\n00:20:37.919 --> 00:20:40.506\nbut if I look at that package itself,\nafter I do that.\n\n326\n00:20:40.506 --> 00:20:45.600\nYou'll see, and you don't do\nthis yourself, it's automatic.\n\n327\n00:20:45.600 --> 00:20:46.360\nBy doing the save dev,\n\n328\n00:20:46.360 --> 00:20:51.500\nyou'll see I've got this uglified\nweb pack plugin now installed.\n\n329\n00:20:51.500 --> 00:20:55.740\n&gt;&gt; Now John, on the previous screen,\nyou showed us Uglify webpack plugin, but\n\n330\n00:20:55.740 --> 00:20:59.360\nin the dev dependencies it's\nuglify JS webpack plugin.\n\n331\n00:20:59.360 --> 00:21:00.380\nShould those match?\n\n332\n00:21:00.380 --> 00:21:00.930\n&gt;&gt; Yeah they should.\n\n333\n00:21:00.930 --> 00:21:01.850\n&gt;&gt; Or is that just sort of a weird.\n\n334\n00:21:01.850 --> 00:21:02.990\n&gt;&gt; Yeah that was a typo.\n\n335\n00:21:02.990 --> 00:21:05.850\n&gt;&gt; Okay, it should be Uglify, good point,\n\n336\n00:21:05.850 --> 00:21:11.350\nso, I actually didn't enter it.\n\n337\n00:21:11.350 --> 00:21:14.818\nBut it should have been yeah,\nwith a JS on the end.\n\n338\n00:21:14.818 --> 00:21:17.835\n&gt;&gt; Okay.\n&gt;&gt; You'll see the package name is always\n\n339\n00:21:17.835 --> 00:21:23.780\nthe same thing and the package in sun is\nwhat you type and that was just a typo.\n\n340\n00:21:25.020 --> 00:21:27.645\n&gt;&gt; We are not infallible individuals,\nI understand.\n\n341\n00:21:27.645 --> 00:21:32.019\n&gt;&gt; It's easy to fumble finger this,\nwe download the solutions,\n\n342\n00:21:32.019 --> 00:21:34.430\nyou can kinda follow along.\n\n343\n00:21:34.430 --> 00:21:37.688\nIn this case you can see\nthat in the package JSON,\n\n344\n00:21:37.688 --> 00:21:40.559\nyou can see the actual plugins being used.\n\n345\n00:21:40.559 --> 00:21:44.210\nAnd you can see what version that\nthis particular one is using.\n\n346\n00:21:44.210 --> 00:21:46.760\nOkay, so that's a first step.\n\n347\n00:21:46.760 --> 00:21:50.210\nBut just installing a package doesn't\nmean it's being used by webpack.\n\n348\n00:21:50.210 --> 00:21:52.470\nSo you have to kinda\ntell webpack to use it.\n\n349\n00:21:52.470 --> 00:21:56.820\nThe next step is, we need to go in to\nthe webpack config and say by the way,\n\n350\n00:21:56.820 --> 00:21:58.260\nyou're going to use this extra plugin.\n\n351\n00:22:00.070 --> 00:22:05.560\nSo, this is just node in general,\nor JavaScript.\n\n352\n00:22:05.560 --> 00:22:08.816\nBefore you use something\nyou have to acquire it, so\n\n353\n00:22:08.816 --> 00:22:13.450\nthe first thing I do is I say Uglify\nplugin require this long plugin name.\n\n354\n00:22:13.450 --> 00:22:18.560\nAgain, that doesn't actually do\nanything other than assign a variable.\n\n355\n00:22:18.560 --> 00:22:20.140\nSo now I've got it in here.\n\n356\n00:22:20.140 --> 00:22:21.610\nI gotta actually use it.\n\n357\n00:22:21.610 --> 00:22:22.260\nAnd you can see now,\n\n358\n00:22:22.260 --> 00:22:26.410\nat the bottom down here, the only thing\nthat's really changed is I say, plugins.\n\n359\n00:22:26.410 --> 00:22:30.360\nSo I've added a new whole category\nto this config, called plugins.\n\n360\n00:22:30.360 --> 00:22:32.680\nAnd I'm creating a new plugin.\n\n361\n00:22:32.680 --> 00:22:35.530\nI'm telling it,\nby the way the source-maps are true,\n\n362\n00:22:35.530 --> 00:22:39.170\nit use source maps because I\nwanna preserve my source-map.\n\n363\n00:22:39.170 --> 00:22:40.570\nSo this is isn't a pattern.\n\n364\n00:22:40.570 --> 00:22:44.840\nWe're gonna repeat over and over again as\nwe add more third party tools to this.\n\n365\n00:22:44.840 --> 00:22:47.210\nWe're gonna import at the beginning and\n\n366\n00:22:47.210 --> 00:22:49.920\nthen we're gonna use it typically\nsomewhere in the code itself.\n\n367\n00:22:51.070 --> 00:22:52.898\nSo the next step is just to run it and\nsee what happens.\n\n368\n00:22:52.898 --> 00:22:56.044\n&gt;&gt; So real quick about\nbefore we leave this screen.\n\n369\n00:22:56.044 --> 00:22:57.981\n&gt;&gt; We'll get back to it.\n\n370\n00:22:57.981 --> 00:22:58.701\n&gt;&gt; We'll get back to it.\n\n371\n00:22:58.701 --> 00:22:59.282\n&gt;&gt; There you go.\n\n372\n00:22:59.282 --> 00:23:03.656\n&gt;&gt; So a lot of times when I've spoken\nto people, they get all tripped up by\n\n373\n00:23:03.656 --> 00:23:09.430\nthe fact that plugins are JavaScript array\nof objects that define something, right?\n\n374\n00:23:09.430 --> 00:23:13.780\nSo is that always the case for plugins,\nwe're kinda newing this up for\n\n375\n00:23:13.780 --> 00:23:15.070\nthe most part or it is that.\n\n376\n00:23:15.070 --> 00:23:19.580\n&gt;&gt; I think most of the pattern and\nwebpack at least is that you're using.\n\n377\n00:23:19.580 --> 00:23:22.730\nThe thing that you're importing\nis a constructor of func\n\n378\n00:23:22.730 --> 00:23:23.740\nof a class or something.\n\n379\n00:23:23.740 --> 00:23:26.910\nSo you're joining a new,\ncreating a new object.\n\n380\n00:23:26.910 --> 00:23:29.110\nIn this case,\na class to be used for webpack.\n\n381\n00:23:29.110 --> 00:23:32.212\nI think some don't follow that pattern but\nmost of them do follow that pattern.\n\n382\n00:23:32.212 --> 00:23:34.710\n&gt;&gt; Okay, so\nI was just making sure there was.\n\n383\n00:23:34.710 --> 00:23:35.830\n&gt;&gt; It's not a hard and fast rule.\n\n384\n00:23:35.830 --> 00:23:39.880\nI mean, there's instructions when\nyou look at Uglify on the web\n\n385\n00:23:39.880 --> 00:23:41.570\nthey'll tell you exactly how to use it.\n\n386\n00:23:41.570 --> 00:23:44.960\nThey'll tell you how\nto sorta in your code.\n\n387\n00:23:44.960 --> 00:23:49.500\nAnd so, I don't wanna say it's\na hard fast rule but it's common.\n\n388\n00:23:49.500 --> 00:23:50.736\n&gt;&gt; Rule of thumb there are edge cases.\n\n389\n00:23:50.736 --> 00:23:54.365\nThe only reason I ask that, I've seen\npeople try to just say uglify.js and\n\n390\n00:23:54.365 --> 00:23:57.109\nthey're not newing, or calling a function-\n&gt;&gt; Right.\n\n391\n00:23:57.109 --> 00:23:58.978\n&gt;&gt; There's Putting\nthe variable name in there.\n\n392\n00:23:58.978 --> 00:24:03.555\nAnd then the webpack just kind of breaks,\nand does a bunch of crazy stuff.\n\n393\n00:24:03.555 --> 00:24:06.105\n[CROSSTALK] I didn't know if\nthat was something that you've\n\n394\n00:24:06.105 --> 00:24:07.278\nencountered a great deal.\n\n395\n00:24:07.278 --> 00:24:10.302\n&gt;&gt; To be honest, the way this works for\nme is I learn about due plugin,\n\n396\n00:24:10.302 --> 00:24:13.110\nI read their documentation,\nit's usually pretty stalled.\n\n397\n00:24:13.110 --> 00:24:15.390\nIt's like install and usage.\n\n398\n00:24:15.390 --> 00:24:17.360\nUsage will tell you exactly what to do and\nyou do that.\n\n399\n00:24:17.360 --> 00:24:19.110\nAnd I don't think about\nit much more than that.\n\n400\n00:24:21.740 --> 00:24:25.530\nSo, by doing this, you'll see what\nit actually does for our output.\n\n401\n00:24:25.530 --> 00:24:28.790\nSo if I run, I'm in the folder.\n\n402\n00:24:28.790 --> 00:24:31.850\nI haven't changed anything else,\nso I install the package and\n\n403\n00:24:31.850 --> 00:24:33.660\nI put it in my webpack config.\n\n404\n00:24:33.660 --> 00:24:38.746\nSo if I go to ./node_modules/.bin/webpack\n\n405\n00:24:38.746 --> 00:24:42.746\n[SOUND] you've gotta chew for a second.\n\n406\n00:24:42.746 --> 00:24:44.870\nNothing really looks to\ndifferent here I don't think.\n\n407\n00:24:44.870 --> 00:24:47.670\nI see my map,\nI see my source files, right?\n\n408\n00:24:47.670 --> 00:24:53.260\nSo let's look to see what it did\nactually to the running code.\n\n409\n00:24:56.070 --> 00:24:56.964\nOpen, open file.\n\n410\n00:24:56.964 --> 00:25:00.408\nAnd, sports mat,\n\n411\n00:25:00.408 --> 00:25:05.468\nwe're going to, just minifications, m,\n\n412\n00:25:05.468 --> 00:25:10.470\njust [INAUDIBLE]\nand\n\n413\n00:25:10.470 --> 00:25:15.280\nthen inspect it, and\nthen I want to look at my, oops.\n\n414\n00:25:17.770 --> 00:25:22.460\nOne of my sources and\nI reload this it does it.\n\n415\n00:25:22.460 --> 00:25:26.350\nIt should be okay there we go.\n\n416\n00:25:26.350 --> 00:25:29.470\nOkay, so let's see.\n\n417\n00:25:30.540 --> 00:25:34.422\nSo now I don't know if you\nrecall your main bundle before\n\n418\n00:25:34.422 --> 00:25:36.660\nlooked atleast remotely readable.\n\n419\n00:25:36.660 --> 00:25:39.660\nAnd now it's all compressed\ninto one little long line.\n\n420\n00:25:39.660 --> 00:25:41.760\nNow there's one little trick here.\n\n421\n00:25:41.760 --> 00:25:43.390\nThere's a pretty-print function, or\n\n422\n00:25:43.390 --> 00:25:48.050\noperation within your dead tools,\nthat will at least make it more readable.\n\n423\n00:25:49.210 --> 00:25:53.500\nBut if you look carefully at this,\nall I see is a bunch of Es and Is and\n\n424\n00:25:53.500 --> 00:25:55.710\nit doesn't look terribly readable still.\n\n425\n00:25:55.710 --> 00:25:57.970\n[LAUGH] I can still see\nmy window console wall.\n\n426\n00:25:57.970 --> 00:26:02.530\nThere's my wall intact, but\npretty much everything else has become\n\n427\n00:26:02.530 --> 00:26:07.140\na bunch of o's and e's and\nbe completely not able to publish it.\n\n428\n00:26:07.140 --> 00:26:12.090\nBut, the good new is that\nwe're using forced maps.\n\n429\n00:26:12.090 --> 00:26:16.090\nWe still actually can set break points\nin what looks like normal code.\n\n430\n00:26:16.090 --> 00:26:18.130\nSo, would, we pretty much did.\n\n431\n00:26:18.130 --> 00:26:20.800\nWhat we're gonna do this lesson,\nwe did bundling.\n\n432\n00:26:21.820 --> 00:26:24.870\nThen we introduced\nthe concept of source maps so\n\n433\n00:26:24.870 --> 00:26:26.700\nthat we can actually\ntroubleshoot the code.\n\n434\n00:26:26.700 --> 00:26:29.180\nAnd that had to stir\nall this webpack stuf.\n\n435\n00:26:29.180 --> 00:26:33.190\nAnd then we minimize the final\noutput itself so that\n\n436\n00:26:33.190 --> 00:26:38.040\nthis loads in your browser a lot faster\nNow it loads in the browser a lot faster.\n\n437\n00:26:38.040 --> 00:26:40.970\n&gt;&gt; I'm pretty sure on the previous\nscreen when we did that build,\n\n438\n00:26:40.970 --> 00:26:45.710\nour final main.bundle.JS\nwas about 640 bytes, and\n\n439\n00:26:45.710 --> 00:26:49.970\nthat's compared to, I think a previous one\nwas two kilobytes, or something like that.\n\n440\n00:26:49.970 --> 00:26:51.450\n&gt;&gt; Yes, so I actually had my notes here.\n\n441\n00:26:51.450 --> 00:26:52.750\nCuz I got to talk about it.\n\n442\n00:26:52.750 --> 00:26:57.930\nBut right, so you basically shrunk it\nalmost threefold, fourfold, right?\n\n443\n00:26:57.930 --> 00:26:59.148\nIt was 2.7.\n\n444\n00:26:59.148 --> 00:27:01.190\nNow, this is kinda silly, right?\n\n445\n00:27:01.190 --> 00:27:04.590\nIt was 2.7 kilobytes,\nwhich is pretty small today.\n\n446\n00:27:04.590 --> 00:27:06.690\nBut it went all the way down to 604 bytes,\nwhich,\n\n447\n00:27:06.690 --> 00:27:10.670\nI don't think that people\nmeasure things in bytes anymore.\n\n448\n00:27:10.670 --> 00:27:12.180\nBut that's about a fourfold increase,\n\n449\n00:27:12.180 --> 00:27:15.390\njust by getting rid of all of\nthose long variable names.\n\n450\n00:27:15.390 --> 00:27:19.490\n&gt;&gt; And to some extent, your mileage may\nvary on these, if I'm not mistaken,\n\n451\n00:27:19.490 --> 00:27:21.000\nwhether you're using third party tools and\n\n452\n00:27:21.000 --> 00:27:23.920\nhow you write your code,\nand things of that nature.\n\n453\n00:27:23.920 --> 00:27:24.950\nSo John, thanks so\n\n454\n00:27:24.950 --> 00:27:28.520\nmuch for giving us an introduction of\nsome of the power-ups that we can start\n\n455\n00:27:28.520 --> 00:27:33.150\nemploying pretty quickly with very little\neffort in our web pack configuration.\n\n456\n00:27:33.150 --> 00:27:36.910\nBut definitely stay tuned as we have\nmore Intro to Webpack coming at you.\n\n457\n00:27:36.910 --> 00:27:39.100\nBut for this episode we're\ngonna go ahead an wrap it up.\n\n458\n00:27:39.100 --> 00:27:42.390\nSo signing off for devpro.tv,\nI've been your host Justin Dennison.\n\n459\n00:27:42.390 --> 00:27:43.230\n&gt;&gt; And I'm John Tucker.\n\n460\n00:27:43.230 --> 00:27:45.270\n&gt;&gt; And we'll see you next time.\n\n461\n00:27:45.270 --> 00:27:50.402\n[MUSIC]\n\n",
          "vimeoId": "240014604"
        },
        {
          "description": "In this episode, Justin and John explore one of the more common uses of webpack, transpilation. John explores the setup that is necessary to transform newer ES2015 code into more widely supported ES5 (JavaScript), explores the necessity of using newer JavaScript code while supporting older browsers, and seeing how transpilation can play into other transformations such as JSX within the React community.",
          "length": "1874",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-3-1-1-a-big-word-transpilation-102617-PGM.00_32_11_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-3-1-1-a-big-word-transpilation-102617-PGM.00_32_11_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-3-1-1-a-big-word-transpilation-102617-PGM.00_32_11_20.Still001-sm.jpg",
          "title": "A Big Word, Transpilation",
          "transcript": "WEBVTT\n\n1\n00:00:00.025 --> 00:00:10.025\n[MUSIC]\n\n2\n00:00:13.040 --> 00:00:15.876\nGreetings everyone and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:15.876 --> 00:00:17.525\nI'm your host, Justin Dennison.\n\n4\n00:00:17.525 --> 00:00:20.064\nAnd in today's episode,\nwhere we're continuing our\n\n5\n00:00:20.064 --> 00:00:23.740\njourney into Webpack in particular\nwe'll be looking at transpilation.\n\n6\n00:00:23.740 --> 00:00:26.970\nNow, that's kind of a hard word to say.\n\n7\n00:00:26.970 --> 00:00:29.180\nYou may be wondering\nwhat is that all about?\n\n8\n00:00:29.180 --> 00:00:33.074\nWell, luckily we have someone on\nthe studio that knows all about it and\n\n9\n00:00:33.074 --> 00:00:34.928\nwill guide us on our expedition.\n\n10\n00:00:34.928 --> 00:00:36.590\nMr John Tucker,\nhow are you doing today, John?\n\n11\n00:00:36.590 --> 00:00:37.470\n&gt;&gt; Doing great.\n\n12\n00:00:37.470 --> 00:00:39.790\n&gt;&gt; So John, transpilation, what is it?\n\n13\n00:00:40.910 --> 00:00:44.960\n&gt;&gt; So transpilation is\nessentially like translating,\n\n14\n00:00:44.960 --> 00:00:47.360\njust translating by two\ndifferent programming languages.\n\n15\n00:00:47.360 --> 00:00:48.400\nIn this case,\n\n16\n00:00:48.400 --> 00:00:51.620\nfrom maybe one version of JavaScript\nto a different version of JavaScript.\n\n17\n00:00:51.620 --> 00:00:56.420\nSo like just like English to Spanish,\nsame idea just languages.\n\n18\n00:00:56.420 --> 00:00:58.190\nSo, in particular,\n\n19\n00:00:58.190 --> 00:01:02.490\nwhat we're gonna do today is talk\nabout a JavaScript in particular.\n\n20\n00:01:02.490 --> 00:01:07.828\nAnd so what your old browsers,\nsay IE11 or browsers like that,\n\n21\n00:01:07.828 --> 00:01:13.284\nthey only understand a certain\nflavor of JavaScript called ES5.\n\n22\n00:01:13.284 --> 00:01:16.690\nIt's been around for a long time.\n\n23\n00:01:16.690 --> 00:01:19.841\nSo that's what your browser understands.\n\n24\n00:01:19.841 --> 00:01:25.140\nBut there's some big problems with ES5,\nthere's some syntax it's clumsy.\n\n25\n00:01:25.140 --> 00:01:27.200\nSo people have improved on JavaScript and\n\n26\n00:01:27.200 --> 00:01:31.350\nnow they have ES2015,\nwhich was released in 2015.\n\n27\n00:01:31.350 --> 00:01:36.950\nAnd there's a lot of nice new features in\nES2015 that we like to use in our code\n\n28\n00:01:36.950 --> 00:01:39.360\nbut the browser doesn't understand it.\n\n29\n00:01:39.360 --> 00:01:43.500\nSo what we're gonna do is, we're gonna\nwrite everything in ES2015 going forward\n\n30\n00:01:43.500 --> 00:01:46.230\nand then we're gonna add\nto our build process.\n\n31\n00:01:46.230 --> 00:01:51.310\nWe're gonna build a transpilation step,\nwhich converts that back\n\n32\n00:01:51.310 --> 00:01:56.790\nto ES5 in our bundle so\nthat now your browser can understand it.\n\n33\n00:01:56.790 --> 00:02:01.746\nSo we'll just do this by example and\nback to the project.\n\n34\n00:02:01.746 --> 00:02:05.740\n&gt;&gt; So John, is transpilation always\ngonna be necessary in the JavaScript\n\n35\n00:02:05.740 --> 00:02:07.480\nworld kind of from here moving forward?\n\n36\n00:02:07.480 --> 00:02:10.410\nCuz we're talking about this old flavor or\nthis new flavor,\n\n37\n00:02:10.410 --> 00:02:14.438\nis this something that we should probably\nget used to in the JavaScript community?\n\n38\n00:02:14.438 --> 00:02:18.506\n&gt;&gt; So yeah, the reality is, it's not\nrequired that you write everything in\n\n39\n00:02:18.506 --> 00:02:23.362\nES2015 but what happens is, once you start\ndoing it you'll find out that you really\n\n40\n00:02:23.362 --> 00:02:25.220\nstart to like the features of it.\n\n41\n00:02:25.220 --> 00:02:29.098\nAnd you'll start to see all the examples\nwritten on the Internet in ES2015.\n\n42\n00:02:29.098 --> 00:02:31.400\nSo you really need to make that switch.\n\n43\n00:02:31.400 --> 00:02:35.010\nOtherwise, you're gonna have to\nkeep on reading examples and\n\n44\n00:02:35.010 --> 00:02:37.320\nthen translating back to\nold versions of things.\n\n45\n00:02:37.320 --> 00:02:40.380\nSo once you switch, it's hard to go back.\n\n46\n00:02:40.380 --> 00:02:42.820\nSo let's go ahead and\ngo to our example here and\n\n47\n00:02:44.030 --> 00:02:47.380\nto see how this works in practice.\n\n48\n00:02:47.380 --> 00:02:52.163\nSo this again, this is the examples that\nwe had from you can download these and\n\n49\n00:02:52.163 --> 00:02:55.417\nI'm gonna just kinda work\nthrough those examples.\n\n50\n00:02:55.417 --> 00:02:57.803\nIn this case,\nI'm gonna go to a folder called transpile.\n\n51\n00:02:59.672 --> 00:03:05.490\nSo this is the example that uses\nES2015 and when I transpile it.\n\n52\n00:03:05.490 --> 00:03:09.966\nSo before you can transpile though,\nyou have to add some more functionality to\n\n53\n00:03:09.966 --> 00:03:14.350\nWebpack because Webpack itself does\nnot know how to transpile, right?\n\n54\n00:03:14.350 --> 00:03:17.950\nSo there's a number of packages\nthat we're gonna install.\n\n55\n00:03:17.950 --> 00:03:22.090\nAnd I'm not gonna actually install them,\ncuz they're already installed, but\n\n56\n00:03:22.090 --> 00:03:24.530\nI'll pretend like I'm going to.\n\n57\n00:03:24.530 --> 00:03:29.367\nOne is called npm install\n\n58\n00:03:29.367 --> 00:03:33.530\nbabel core save dev.\n\n59\n00:03:33.530 --> 00:03:37.790\nSo that is the core functionality of,\nBabel, by the way,\n\n60\n00:03:37.790 --> 00:03:41.250\nis the language translator machine.\n\n61\n00:03:41.250 --> 00:03:43.800\nSo Babel, this is the core of it.\n\n62\n00:03:43.800 --> 00:03:49.069\nSo that's one, next one is gonna be npm\n\n63\n00:03:49.069 --> 00:03:55.720\ninstall babel, Loader, Save dev.\n\n64\n00:03:55.720 --> 00:03:59.330\nAnd Babel loader is basically\nthe integration between Webpack.\n\n65\n00:03:59.330 --> 00:04:03.910\nThe loaders in general are kind of\nthe terminology that Webpack uses for\n\n66\n00:04:03.910 --> 00:04:05.460\nanything that integrates with Webpack.\n\n67\n00:04:05.460 --> 00:04:08.989\nSo this is actually a bit of\ncode that integrates Babel,\n\n68\n00:04:08.989 --> 00:04:10.950\nthe transpiler with Webpack.\n\n69\n00:04:12.380 --> 00:04:20.324\nAnd there's one more npn install babel,\nPreset-es2015.\n\n70\n00:04:20.324 --> 00:04:24.836\nBecause what we're needed to\ntell Babel that by the way,\n\n71\n00:04:24.836 --> 00:04:29.442\nyou're gonna be transpiling\nES2015 back to ES5, so\n\n72\n00:04:29.442 --> 00:04:32.990\nthat's the last piece of the puzzle.\n\n73\n00:04:32.990 --> 00:04:35.440\nSo you can kinda,\nif you don't remember all that,\n\n74\n00:04:35.440 --> 00:04:38.030\nyou're looking at a package file, right.\n\n75\n00:04:38.030 --> 00:04:40.750\nYou should see,\ncuz I did the save-dev on this.\n\n76\n00:04:40.750 --> 00:04:44.683\nYou should see all the dev dependencies\nthat we've got to babel-core,\n\n77\n00:04:44.683 --> 00:04:50.210\nbabel-loader, babel-preset-es2015,\nother two were from the previous one.\n\n78\n00:04:50.210 --> 00:04:54.153\n&gt;&gt; So John, every time I play around\nwith Webpack, I find this transpilation,\n\n79\n00:04:54.153 --> 00:04:57.500\nBabel-core, babel-loader,\nbabel-preset-es2015.\n\n80\n00:04:57.500 --> 00:05:03.530\nI need at least these three, but\nwhy are they in separate packages?\n\n81\n00:05:03.530 --> 00:05:06.790\nIf I kinda always need these together,\nwhy are they separate?\n\n82\n00:05:06.790 --> 00:05:11.652\n&gt;&gt; Okay, so the answer is a babel-core\nactually has nothing to do with Webpack.\n\n83\n00:05:11.652 --> 00:05:14.704\nSo you can actually run\nthat from a command line,\n\n84\n00:05:14.704 --> 00:05:18.209\nyou can actually transpile\nyour code without Webpack.\n\n85\n00:05:18.209 --> 00:05:21.420\nAnd then babel-loader is\na Webpack integration piece.\n\n86\n00:05:21.420 --> 00:05:25.998\nSo that one you need, if you're gonna use\nWebpack, you need to have babel-loader.\n\n87\n00:05:25.998 --> 00:05:30.330\nAnd the piece is it Babels more like\njust a general translation language.\n\n88\n00:05:30.330 --> 00:05:32.195\nIt doesn't say what languages\nyou're translating.\n\n89\n00:05:32.195 --> 00:05:36.894\nSo, by telling it, preset-es2015,\nessentially you're saying, by the way,\n\n90\n00:05:36.894 --> 00:05:38.978\nyou're translating from ES2015.\n\n91\n00:05:38.978 --> 00:05:43.133\nYou could actually be using\nBabel with different languages.\n\n92\n00:05:43.133 --> 00:05:45.801\nLike you might be translating\nfrom Spanish to English,\n\n93\n00:05:45.801 --> 00:05:48.479\nfrom French to English,\nthat's why there's a three.\n\n94\n00:05:48.479 --> 00:05:51.500\nSo that answers your question, right?\n\n95\n00:05:51.500 --> 00:05:56.261\nOkay, so now we got our Webpack,\nat least our dependencies installed.\n\n96\n00:05:56.261 --> 00:06:00.358\nWe need to probably change some other\nthings to get Webpack to know about these\n\n97\n00:06:00.358 --> 00:06:01.250\ndependencies.\n\n98\n00:06:01.250 --> 00:06:04.400\nSo let's go ahead and\nget that ready to go.\n\n99\n00:06:04.400 --> 00:06:04.900\nSo let's see.\n\n100\n00:06:06.520 --> 00:06:09.445\nHere I mention the next\nthing I'm wanna do is,\n\n101\n00:06:09.445 --> 00:06:14.545\nokay actually one thing we needed before\nwe know a little bit more about Webpack,\n\n102\n00:06:14.545 --> 00:06:19.571\nBabel itself has its own configuration cuz\nwe need to tell Babel that by the way,\n\n103\n00:06:19.571 --> 00:06:21.840\nyou're transpiring ES2015.\n\n104\n00:06:21.840 --> 00:06:28.763\nJust having a package doesn't\nmean Babel knows about it.\n\n105\n00:06:28.763 --> 00:06:31.200\nSo there's a file, It's called .babelrc.\n\n106\n00:06:31.200 --> 00:06:32.660\nDot means normal hidden file.\n\n107\n00:06:32.660 --> 00:06:36.101\nSo we're gonna open it up, .babelrc.\n\n108\n00:06:36.101 --> 00:06:39.888\nAnd it's pretty simple file but\nbasically it's telling babel, by the way,\n\n109\n00:06:39.888 --> 00:06:42.640\nyou're gonna use ES2015\nas your source language.\n\n110\n00:06:42.640 --> 00:06:45.187\nThat's all this [INAUDIBLE].\n\n111\n00:06:45.187 --> 00:06:49.680\nSo now, by the way, you can configure\nthis separately in Webpack,.\n\n112\n00:06:49.680 --> 00:06:52.069\nYou could have actually\ndone this in Webpack,\n\n113\n00:06:52.069 --> 00:06:54.039\nby passing parameters to the loader.\n\n114\n00:06:54.039 --> 00:06:58.723\nBut as good practice, if you ever try\nto do command line Babel translations,\n\n115\n00:06:58.723 --> 00:07:01.040\nthis is where it's gonna look for it.\n\n116\n00:07:01.040 --> 00:07:05.140\nSo this is like the common place\nto do all of your Babel stuff.\n\n117\n00:07:05.140 --> 00:07:07.867\n&gt;&gt; So this is ensuring that we\nhave separation of this tooling.\n\n118\n00:07:07.867 --> 00:07:12.320\nSo if for some reason there's new hugness,\nbut I wanna still use Babel,\n\n119\n00:07:12.320 --> 00:07:17.284\nI' m not necessarily tied together by\nhaving my Babel configuration inside of my\n\n120\n00:07:17.284 --> 00:07:19.250\nWebpack configuration.\n\n121\n00:07:19.250 --> 00:07:19.800\n&gt;&gt; Yeah, that's great.\n\n122\n00:07:19.800 --> 00:07:25.176\nSo the idea is Babel's actually separate\ntool so we're gonna treat it that way,\n\n123\n00:07:25.176 --> 00:07:30.330\nwe´re going to keep separate the concerns,\nWebpack versus what's Babel?\n\n124\n00:07:31.470 --> 00:07:37.350\nOkay, so now that we've got Babel setup,\nnow we need to tell Webpack about Babel.\n\n125\n00:07:37.350 --> 00:07:42.790\nSo that's the next step and,\nWe're gonna edit the config file.\n\n126\n00:07:42.790 --> 00:07:49.043\nSo let's go back to the command line and\nso we have to open up Webpack config now.\n\n127\n00:07:51.218 --> 00:07:54.132\nOkay, so\nlet's kinda go through it here real quick.\n\n128\n00:07:54.132 --> 00:07:55.512\nNothing terribly new at the beginning.\n\n129\n00:07:55.512 --> 00:08:00.082\nIf you recall this it's all\nthe same source-map that's familiar\n\n130\n00:08:00.082 --> 00:08:01.803\nOutput's all the same.\n\n131\n00:08:01.803 --> 00:08:04.440\nSo the bottom's the same.\n\n132\n00:08:04.440 --> 00:08:08.670\nSo there is a whole new section called\nRules that was not here before.\n\n133\n00:08:08.670 --> 00:08:11.060\nAnd so let's kinda look at that and\nsee what it means.\n\n134\n00:08:11.060 --> 00:08:14.739\nIt says, so the way this is\ninterpreted is when you apply rules,\n\n135\n00:08:14.739 --> 00:08:17.750\nas it structured from that index.js file,\nright?\n\n136\n00:08:17.750 --> 00:08:20.420\nIt's walking that tree of files.\n\n137\n00:08:20.420 --> 00:08:25.184\nNow it says if it ever sees a file that\nends .js, instead of just spitting it out\n\n138\n00:08:25.184 --> 00:08:29.386\ninto the bundle like normal,\nit's gonna run some extra stuff on it.\n\n139\n00:08:29.386 --> 00:08:33.790\nSo this is like a filter that's gonna\nfilter that file before it gets\n\n140\n00:08:33.790 --> 00:08:38.322\ninto the bundle and so,\nlet's just skip exclude for a second.\n\n141\n00:08:38.322 --> 00:08:41.340\nBasically i says,\nevery time you see JavaScript file,\n\n142\n00:08:41.340 --> 00:08:45.680\nlet's run Babel loader on it first,\nthen put it in the bundle.\n\n143\n00:08:45.680 --> 00:08:51.100\nSo now, there's an exclude line, because\nwhat you don't want to do is you don't,\n\n144\n00:08:51.100 --> 00:08:53.880\nwhen you bring in third party libraries,\n\n145\n00:08:53.880 --> 00:08:56.245\nthey've already optimized\nthat code to be used.\n\n146\n00:08:56.245 --> 00:08:59.130\nAnd they've only run Babel on it and\nthat's part of their distribution,\n\n147\n00:08:59.130 --> 00:09:01.250\nit's already ready to go in the browser.\n\n148\n00:09:01.250 --> 00:09:03.896\nSo you don't want to have to run\nthrough their long bit of code and\n\n149\n00:09:03.896 --> 00:09:07.096\nrerun it through Babel again, cuz\nthat's gonna be an expensive operation.\n\n150\n00:09:07.096 --> 00:09:10.427\nSo just saying, do only my files,\nessentially, and\n\n151\n00:09:10.427 --> 00:09:13.099\nthat's what the exclude is doing for you.\n\n152\n00:09:13.099 --> 00:09:15.550\nOkay, so\nthat's all I really added to the file.\n\n153\n00:09:15.550 --> 00:09:18.350\nIt says basically,\nrun Babel-loader on JaveScript files.\n\n154\n00:09:20.510 --> 00:09:23.366\nBy the way, so\nif you did have code that already ES2015,\n\n155\n00:09:23.366 --> 00:09:25.384\nbabel-loader's not gonna do anything.\n\n156\n00:09:25.384 --> 00:09:29.304\nIt's gonna take the file, say this hole\nlooks good, I don't need to do anything,\n\n157\n00:09:29.304 --> 00:09:30.816\nputs it in a bundle like before.\n\n158\n00:09:30.816 --> 00:09:35.149\nBut if I now write ES2015,\nit's going to change it for\n\n159\n00:09:35.149 --> 00:09:40.280\nyou to something that's more\ncompatible with the browser.\n\n160\n00:09:40.280 --> 00:09:43.599\nOkay, so the next step is to actually\nlook at the source code itself and\n\n161\n00:09:43.599 --> 00:09:47.621\nwe're gonna convert it to what was ES5\ncode, we're gonna convert to ES2015.\n\n162\n00:09:47.621 --> 00:09:50.589\nSo lets go to source, remember,\n\n163\n00:09:50.589 --> 00:09:57.030\nwe had those two files because we\nwere using require to pull one in.\n\n164\n00:09:57.030 --> 00:10:05.020\nSo I'm gonna open up index.js\nfirst to see what I changed.\n\n165\n00:10:05.020 --> 00:10:10.190\nOkay, so there's already\na change in the first line.\n\n166\n00:10:10.190 --> 00:10:14.827\nIf you recall, before it was var\nsecondary, because var ES5 thing.\n\n167\n00:10:16.080 --> 00:10:18.870\nES2015, you don't use var ever again.\n\n168\n00:10:18.870 --> 00:10:24.230\nYou're either using one of two ways to\ndeclare references, either const or let.\n\n169\n00:10:24.230 --> 00:10:25.680\nWe're using const here.\n\n170\n00:10:25.680 --> 00:10:30.738\nNow, this is not necessarily a class on\nES2015, that's another whole topic, right?\n\n171\n00:10:30.738 --> 00:10:34.358\nBut that is one new simple\nexample of ES2015, and\n\n172\n00:10:34.358 --> 00:10:38.880\nI think Window console log is the same and\nsecondary is the same.\n\n173\n00:10:38.880 --> 00:10:43.670\nSo nothing's really changed other\nthan I changed var to const.\n\n174\n00:10:43.670 --> 00:10:46.890\nAnd if you were to try to run this in an\nolder browser without it being transpiled,\n\n175\n00:10:46.890 --> 00:10:48.864\nit would say, I don't know what const\nmeans, and it would die, all right?\n\n176\n00:10:50.040 --> 00:10:52.930\nSo let's look at secondary and\nsee if anything has changed in there.\n\n177\n00:10:56.447 --> 00:11:00.709\nNothing's changed, so module.exports,\n\n178\n00:11:00.709 --> 00:11:06.550\nthere's nothing here that was,\nyes, needed to be changed.\n\n179\n00:11:06.550 --> 00:11:09.732\nSo the only thing that's changed\nis a very subtle change.\n\n180\n00:11:09.732 --> 00:11:12.585\nSo now that I've got ES2015 code,\n\n181\n00:11:12.585 --> 00:11:18.211\neven though it's kind of a simple one,\nthe next step is actually execute it.\n\n182\n00:11:18.211 --> 00:11:20.541\nActually, I think I slipped on that one.\n\n183\n00:11:20.541 --> 00:11:23.852\nAha, I did slip, there is a change here.\n\n184\n00:11:23.852 --> 00:11:29.243\nI just caught it with my eye, so\nbefore if you recall I used function.\n\n185\n00:11:29.243 --> 00:11:33.837\nI exported the function that declared as\nanonymous function with the word function,\n\n186\n00:11:33.837 --> 00:11:37.300\nright, and here I've got this\nfunny little arrow syntax here.\n\n187\n00:11:37.300 --> 00:11:41.300\nYou get using any of these 2015,\nyou almost not seen anymore.\n\n188\n00:11:41.300 --> 00:11:45.470\nSo this is actually an ES2015\ncontract called arrow functions,\n\n189\n00:11:45.470 --> 00:11:47.040\nit´s just a short-hand way and\n\n190\n00:11:47.040 --> 00:11:52.110\nit´s very common to declare anonymous\nfunctions, that's all it really is.\n\n191\n00:11:52.110 --> 00:11:52.920\nSo it's just a function,\n\n192\n00:11:52.920 --> 00:11:56.650\njust you don't have to worry, you don't\nhave to write the word function, okay?\n\n193\n00:11:56.650 --> 00:11:57.930\n&gt;&gt; It happens to me as well, John.\n\n194\n00:11:57.930 --> 00:12:03.410\nI'm like, yeah, this looks fine,\nit's kind of normal to see const and let.\n\n195\n00:12:03.410 --> 00:12:06.870\nI can't tell you the last time I've\nactually used var in anything,\n\n196\n00:12:06.870 --> 00:12:10.910\njust because of shenanigans\nthat I ran into before.\n\n197\n00:12:10.910 --> 00:12:15.308\nEventually, you kind of become blind to\nhow you used to do it versus the new way\n\n198\n00:12:15.308 --> 00:12:19.390\nconst, let,\na variety of other features as well.\n\n199\n00:12:19.390 --> 00:12:22.170\nSo we'll let you pass on this one.\n\n200\n00:12:22.170 --> 00:12:25.729\n&gt;&gt; [LAUGH] Okay, a long story short,\nnow we have got the code done,\n\n201\n00:12:25.729 --> 00:12:29.440\nso now, it is just one of transpiling,\nso we will go back to here.\n\n202\n00:12:30.620 --> 00:12:33.959\nI'm in my folder where my web\npack config is and I'm gonna run,\n\n203\n00:12:33.959 --> 00:12:35.600\nthis is my call that's worse.\n\n204\n00:12:35.600 --> 00:12:44.187\nIt's ./node_modules.bin/webpack,\nAnd it runs.\n\n205\n00:12:44.187 --> 00:12:47.400\nNow, it's doing an extra step,\nit's transpiling the code.\n\n206\n00:12:48.749 --> 00:12:52.250\nShouldn't take, took a little longer.\n\n207\n00:12:52.250 --> 00:12:57.162\nWell, this is expected to take a little\nlonger, cuz it's doing a lot more.\n\n208\n00:12:57.162 --> 00:12:59.080\nSo nothing's really changed here.\n\n209\n00:12:59.080 --> 00:13:02.058\nSo it took the two files in that\nproduces my main bundle and\n\n210\n00:13:02.058 --> 00:13:04.054\nproduces the main bundle map, okay?\n\n211\n00:13:04.054 --> 00:13:08.610\nAnd just run it real quick,\nmake sure that it's doing what you expect.\n\n212\n00:13:08.610 --> 00:13:14.437\nSo this is the File open file,\nI'm in transpiled dist index.html and\n\n213\n00:13:14.437 --> 00:13:18.410\nif I do my, and\nthis is just doing a console log.\n\n214\n00:13:18.410 --> 00:13:23.520\nSo we run it, there's my stuff, right.\n\n215\n00:13:23.520 --> 00:13:28.270\nNow, if I look at the source which\nis the sources and my webpack.\n\n216\n00:13:28.270 --> 00:13:30.760\nYou can see the source code here.\n\n217\n00:13:32.010 --> 00:13:35.920\nIf you look at it,\nyou're actually looking at the, let's see.\n\n218\n00:13:35.920 --> 00:13:38.090\nSee up here, see the const?\n\n219\n00:13:38.090 --> 00:13:43.886\nSo the source code is actually your\nES2015 code, not the transpiled stuff.\n\n220\n00:13:43.886 --> 00:13:47.621\nSo you actually are still looking at\nwhat essentially is your source code in\n\n221\n00:13:47.621 --> 00:13:49.195\nthe source map.\n\n222\n00:13:49.195 --> 00:13:51.040\nOkay, so that's basically,\nall there was to it.\n\n223\n00:13:51.040 --> 00:13:53.920\nSo now,\nwe're writing in ES2015 going forward.\n\n224\n00:13:54.960 --> 00:13:59.346\nOkay, so there's one other change we're\ngonna do to the code that make it\n\n225\n00:13:59.346 --> 00:14:02.616\neven more ES2015 compatible or\nmore consistent.\n\n226\n00:14:02.616 --> 00:14:07.770\nAnd that has to do with that require,\nand then how we're importing, exporting.\n\n227\n00:14:07.770 --> 00:14:09.799\nA little bit more simple syntax for that.\n\n228\n00:14:09.799 --> 00:14:16.950\nSo let's go ahead and get that ready to\ngo, so let me go back to my command line.\n\n229\n00:14:16.950 --> 00:14:22.190\nSo in this case,\nI'm gonna go to another folder called,\n\n230\n00:14:22.190 --> 00:14:25.694\nI think it's called import, right.\n\n231\n00:14:25.694 --> 00:14:29.265\nSo and then just look to see, I'm not\ngonna change anything with webpack,\n\n232\n00:14:29.265 --> 00:14:30.970\nwe're already doing Babel.\n\n233\n00:14:30.970 --> 00:14:32.851\nWe're just changing syntax\ninto source code, so\n\n234\n00:14:32.851 --> 00:14:34.384\nI'm going to go right into source code.\n\n235\n00:14:34.384 --> 00:14:39.808\nAll right, so this is basically,\nthe same as the previous project,\n\n236\n00:14:39.808 --> 00:14:45.620\nexcept for I am changing how I'm\nimporting secondaries, essentially.\n\n237\n00:14:45.620 --> 00:14:49.723\nActually, I did some\nmore complexity here too.\n\n238\n00:14:49.723 --> 00:14:54.770\nSo let me open up the secondary first, so\nyou can see what's happening in secondary.\n\n239\n00:15:01.242 --> 00:15:03.650\nSo this is the secondary file.\n\n240\n00:15:03.650 --> 00:15:07.910\nBefore it was like module.export, and\nyou exported the single thing, and\n\n241\n00:15:07.910 --> 00:15:09.590\nI used the single thing.\n\n242\n00:15:09.590 --> 00:15:13.895\nSo one thing that you get when you use\nthe ES2015 version of export, import,\n\n243\n00:15:13.895 --> 00:15:16.320\nyou can actually export\nmore than one thing.\n\n244\n00:15:16.320 --> 00:15:20.670\nSo in this case, I'm exporting\nwhat's called a default export.\n\n245\n00:15:20.670 --> 00:15:22.470\nThat is basically,\nif you just import something,\n\n246\n00:15:22.470 --> 00:15:26.170\nthis is what you get and\nthat's my old function I had.\n\n247\n00:15:26.170 --> 00:15:30.870\nNow I'm exporting also two named elements,\none is called A and one is called B,\n\n248\n00:15:30.870 --> 00:15:35.110\nand this is the syntax you might use for\nexporting named elements.\n\n249\n00:15:35.110 --> 00:15:38.688\nSo this file now, it really exports\nthree pieces of functionality.\n\n250\n00:15:38.688 --> 00:15:42.853\nOne, it says hello secondary, one,\nit says basically Apple, one says Banana.\n\n251\n00:15:42.853 --> 00:15:47.819\nNow, that we have that,\nlet's see how we use that\n\n252\n00:15:47.819 --> 00:15:52.438\nback in our index.js and\ngo here and I go atom.\n\n253\n00:15:52.438 --> 00:15:56.889\nOkay, so now, you can see you got\nan import You got secondary and\n\n254\n00:15:56.889 --> 00:16:00.613\nthere is this a,\nb thing with this funny curly brace.\n\n255\n00:16:00.613 --> 00:16:05.636\nThat's again, that's an ES2015,\ncalled essentially destructuring.\n\n256\n00:16:05.636 --> 00:16:07.076\nIt's a fancy term, but\n\n257\n00:16:07.076 --> 00:16:10.842\nbasically it's a way of extracting\nout pieces of a variable.\n\n258\n00:16:10.842 --> 00:16:13.596\nSo again,\nnot gonna go through too much of that but\n\n259\n00:16:13.596 --> 00:16:17.540\nexcept for now that I have in my file,\nI have secondary a and b declared.\n\n260\n00:16:17.540 --> 00:16:21.200\nAnd they're all functions that can be run\nand see there's secondary there's a and b.\n\n261\n00:16:22.250 --> 00:16:27.130\nSo what we just did here, is,\nwe just changed the code to use ES2015.\n\n262\n00:16:27.130 --> 00:16:29.890\nExports with both named exports and\ndefault exports and\n\n263\n00:16:29.890 --> 00:16:32.930\nthen we used it using the import command.\n\n264\n00:16:32.930 --> 00:16:36.900\nSo let's run this real quick and\nsee, make sure it works.\n\n265\n00:16:36.900 --> 00:16:39.382\nAnd then we'll move on to the next thing.\n\n266\n00:16:39.382 --> 00:16:41.372\nSo to run this I'm gonna go to,\n\n267\n00:16:41.372 --> 00:16:45.826\nwell, I've already transpiled it,\nI guess I'm gonna save a step.\n\n268\n00:16:45.826 --> 00:16:50.488\nOnce you write the code of course\nyou're gonna then run the .bin webpack,\n\n269\n00:16:50.488 --> 00:16:52.360\nyou know that stuff.\n\n270\n00:16:52.360 --> 00:16:56.230\nI've already done that already so\nthere's no need to see me type it again.\n\n271\n00:16:56.230 --> 00:17:02.140\nBut, so that once I did that I can\nopen up the file, so let me go file\n\n272\n00:17:02.140 --> 00:17:07.105\nopen, now I'm gonna go back to import,\n\n273\n00:17:07.105 --> 00:17:12.800\nit's here, this so I can see it,\nI've already did it earlier.\n\n274\n00:17:12.800 --> 00:17:17.430\nAnd here's my index.html and\nif I view the console there's my,\n\n275\n00:17:17.430 --> 00:17:20.980\nhello world, hello secondary,\nmy apple and banana like I expect.\n\n276\n00:17:20.980 --> 00:17:25.790\nAnd of course if I look at the source,\nsources,\n\n277\n00:17:25.790 --> 00:17:29.810\nmy webpack, there's my source and\nthere's my imports.\n\n278\n00:17:31.010 --> 00:17:32.120\nThere's my import.\n\n279\n00:17:32.120 --> 00:17:34.237\nPretty much what you\nsaw in the source code.\n\n280\n00:17:34.237 --> 00:17:36.100\nSo nothing too fancy there.\n\n281\n00:17:36.100 --> 00:17:39.561\n&gt;&gt; Now John this transpolation is kind\nof being hidden from us because of\n\n282\n00:17:39.561 --> 00:17:42.734\nthe uglify.js plugin that we've\nseen in a previous episode.\n\n283\n00:17:42.734 --> 00:17:43.359\nIf we go and\n\n284\n00:17:43.359 --> 00:17:48.460\nlook we're not actually gonna see a whole\nlot of anything that's different.\n\n285\n00:17:48.460 --> 00:17:53.020\nBut behind the scenes this is const var,\nlet to var.\n\n286\n00:17:53.020 --> 00:17:55.922\nFetero functions are actually\njust regular anonymous functions.\n\n287\n00:17:55.922 --> 00:17:57.585\n&gt;&gt; Right.\nIf you were to go back in your bundle,\n\n288\n00:17:57.585 --> 00:18:00.480\nright, and\nif you were to untangle this bundle.\n\n289\n00:18:00.480 --> 00:18:03.680\nYou got all this es and as.\n\n290\n00:18:03.680 --> 00:18:06.220\nBut if you look at your\ncode at the bottom here.\n\n291\n00:18:06.220 --> 00:18:08.680\nRemember before I was doing\nall those aerial functions?\n\n292\n00:18:08.680 --> 00:18:10.961\nYou can see behind the scenes,\n\n293\n00:18:10.961 --> 00:18:16.939\nBabel's transpiled that back to what\nis basically using ES5 function syntax.\n\n294\n00:18:16.939 --> 00:18:22.134\nThere's no arrow functions in here,\nthere's no const, everything is var.\n\n295\n00:18:22.134 --> 00:18:26.231\nSo behind the scenes, Babel is,\nthere's a couple things happening now,\n\n296\n00:18:26.231 --> 00:18:28.638\nBabel's translating it all back to ES5 and\n\n297\n00:18:28.638 --> 00:18:32.820\nthen you've got the minify, uglify\nstuff that's making all the as and bs.\n\n298\n00:18:35.140 --> 00:18:39.090\nOkay, so the last step, we're going to\njust, since we're already talking about\n\n299\n00:18:39.090 --> 00:18:42.950\ntranspilation, we're going to do\njust one more step in transpilation.\n\n300\n00:18:42.950 --> 00:18:44.960\nAnd so let me get this queued up.\n\n301\n00:18:49.880 --> 00:18:51.662\nOkay, so here's the project folder.\n\n302\n00:18:51.662 --> 00:18:54.540\nAnd I believe this example is React.\n\n303\n00:18:54.540 --> 00:19:02.340\nSo now, this is not a course on React,\nthere's a separate whole series on React.\n\n304\n00:19:02.340 --> 00:19:07.420\nBut it's probably important to talk\nabout transpilation with React because\n\n305\n00:19:07.420 --> 00:19:12.140\nReact uses an interesting syntax called\njsx which is not JavaScript per se,\n\n306\n00:19:12.140 --> 00:19:13.390\nit's a shorthand.\n\n307\n00:19:13.390 --> 00:19:16.830\nAnd it needs to be also transpiled\nif you're using this with React.\n\n308\n00:19:16.830 --> 00:19:20.910\nAnd likely the reason why you're\nlearning webpack is probably cuz you're\n\n309\n00:19:20.910 --> 00:19:21.890\nlearning React anyway.\n\n310\n00:19:21.890 --> 00:19:24.090\nSo it probably goes hand in hand.\n\n311\n00:19:24.090 --> 00:19:28.058\nSo we're not gonna do a bunch with React,\nother than just stub it in a simple hello,\n\n312\n00:19:28.058 --> 00:19:29.259\nworld example of React.\n\n313\n00:19:29.259 --> 00:19:31.400\nAnd then we'll watch how we use it.\n\n314\n00:19:31.400 --> 00:19:36.695\nSo before we use React though,\nwe need to tell webpack,\n\n315\n00:19:36.695 --> 00:19:42.010\nor Babel, in that case really,\nthat by the way, you are using Yack 2.\n\n316\n00:19:42.010 --> 00:19:44.670\nIt's gonna have to do some translation.\n\n317\n00:19:44.670 --> 00:19:47.210\nSo there's a number of\ncommands we need to do.\n\n318\n00:19:48.980 --> 00:19:53.180\nThe first thing we need to do is we\nneed to tell webpack that, by the way,\n\n319\n00:19:53.180 --> 00:19:55.989\nyou're gonna be using React,\nso npm install.\n\n320\n00:19:58.688 --> 00:20:02.924\nBabel-reset-react.\n\n321\n00:20:02.924 --> 00:20:06.810\nSo we're actually telling babel\nabout React, not webpack itself.\n\n322\n00:20:08.300 --> 00:20:09.980\nOkay, so that's the syntax unit.\n\n323\n00:20:09.980 --> 00:20:13.478\nThere's a new preset for React, for babel.\n\n324\n00:20:13.478 --> 00:20:15.553\nAnd then we're going to, so\n\n325\n00:20:15.553 --> 00:20:21.346\nnow that the build environment's almost\nready to have it, we have to now tell,\n\n326\n00:20:21.346 --> 00:20:26.300\nbecause we're going to actually\nuse React in our code itself.\n\n327\n00:20:26.300 --> 00:20:28.890\nWe have to install React for\nour front end code.\n\n328\n00:20:28.890 --> 00:20:33.569\nSo I'm going to npm install.react save,\nremember, this is going to be,\n\n329\n00:20:33.569 --> 00:20:38.474\nI don't use savedev here because this is\nactually part of my code that's going\n\n330\n00:20:38.474 --> 00:20:40.659\nto be distributed to the end user.\n\n331\n00:20:40.659 --> 00:20:43.544\nAnything in save dev,\nmeans it's part of my build process.\n\n332\n00:20:43.544 --> 00:20:48.460\nAnd then there's another\none called react.dom.\n\n333\n00:20:48.460 --> 00:20:52.490\nWhich is, basically, react is split in two\npieces, which part of this kind of core\n\n334\n00:20:52.490 --> 00:20:56.020\nreact, and there's something specifically\nfor the web browser called react.dom.\n\n335\n00:20:56.020 --> 00:21:00.050\nSo, that's not really the topic today,\nbut I had to install those and\n\n336\n00:21:00.050 --> 00:21:04.340\nif I open up my webpack.config,\nsorry, wrong file.\n\n337\n00:21:05.590 --> 00:21:09.979\nI meant to open up package.\n\n338\n00:21:09.979 --> 00:21:15.509\nYou'll notice I have an extra line here my\nbabel preset react is a devdependency and\n\n339\n00:21:15.509 --> 00:21:20.160\nthen I have my two dependencies\nnow react and react-dom so.\n\n340\n00:21:20.160 --> 00:21:21.764\nThat's all there.\n\n341\n00:21:21.764 --> 00:21:26.528\nOkay, the next thing we need to do is,\n\n342\n00:21:26.528 --> 00:21:31.292\nright, so I added a new babble plugin but\n\n343\n00:21:31.292 --> 00:21:38.760\nbabel doesn't know about it yet,\nso I need to go into .babel.\n\n344\n00:21:38.760 --> 00:21:42.430\nSo before, I was just preset ES2015,\nbut now I add an extra line and\n\n345\n00:21:42.430 --> 00:21:44.800\nsaid, by the way,\nyou're also need to deal with react.\n\n346\n00:21:44.800 --> 00:21:46.610\n&gt;&gt; Yes.\n&gt;&gt; Now John,\n\n347\n00:21:46.610 --> 00:21:49.900\nwe now have two presets\ninside of our Babel RC.\n\n348\n00:21:51.620 --> 00:21:52.840\nDoes the order of those matter?\n\n349\n00:21:52.840 --> 00:21:54.120\nCould I flip those order?\n\n350\n00:21:54.120 --> 00:21:58.820\nOr do I need to be aware about\nthe ordering of these babel presets?\n\n351\n00:21:58.820 --> 00:21:59.550\nGood question.\n\n352\n00:22:00.630 --> 00:22:01.957\nI assumed it doesn't matter.\n\n353\n00:22:01.957 --> 00:22:04.442\nI think the documentation must\nsuggest it doesn't matter.\n\n354\n00:22:04.442 --> 00:22:06.840\nThat they'd know how to interoperate.\n\n355\n00:22:06.840 --> 00:22:07.865\nSo the answer is no.\n\n356\n00:22:07.865 --> 00:22:09.470\nThe order doesn't matter.\n\n357\n00:22:11.490 --> 00:22:11.990\nRight.\n\n358\n00:22:13.980 --> 00:22:14.675\nOkay.\nOkay so,\n\n359\n00:22:14.675 --> 00:22:16.880\nnow we've got bable aware about this.\n\n360\n00:22:16.880 --> 00:22:19.870\nRight.\nWe need to do maybe one more step in our\n\n361\n00:22:21.810 --> 00:22:26.000\nwe're also gonna edit our\nwebpack config real quick.\n\n362\n00:22:26.000 --> 00:22:29.690\nAnd you'll see why that's webpack.\n\n363\n00:22:31.060 --> 00:22:33.550\nSo this just kinda goes\ntop down real quick.\n\n364\n00:22:33.550 --> 00:22:34.930\nAll the same, top's the same,\n\n365\n00:22:34.930 --> 00:22:40.260\nthe one thing that's changed here\nI've added this new .jsx business.\n\n366\n00:22:40.260 --> 00:22:43.250\nSo, it's more convention,\nit's not necessary.\n\n367\n00:22:43.250 --> 00:22:46.630\nBut, typically, if you're going\nto be using jsx in your code,\n\n368\n00:22:46.630 --> 00:22:49.980\nthe convention is that\nyou name your files .jsx.\n\n369\n00:22:49.980 --> 00:22:53.340\nAnd by default,\nBabel doesn't know about jsx files.\n\n370\n00:22:53.340 --> 00:22:55.520\nIt only looks for .js files.\n\n371\n00:22:55.520 --> 00:22:57.410\nSo I need to tell it, by the way,\n\n372\n00:22:57.410 --> 00:23:00.923\nyour JavaScript code is now\ngoing to be both .js and .jsx.\n\n373\n00:23:00.923 --> 00:23:03.860\nSo that's what that's about,\nchanging that behavior.\n\n374\n00:23:03.860 --> 00:23:07.540\nAnd since everything I'm gonna be doing\nnow is React, I'm going to have jsx\n\n375\n00:23:07.540 --> 00:23:12.530\npretty much in everything, my entry\npoint to my app used to be .js, and\n\n376\n00:23:12.530 --> 00:23:17.260\nbecause of convention, I should call it\n.jsx, so I had to change my entry point.\n\n377\n00:23:17.260 --> 00:23:20.948\nAnd the bundle's gonna be the same\ncuz your output is not jsx, so\n\n378\n00:23:20.948 --> 00:23:22.053\nthat's the same.\n\n379\n00:23:22.053 --> 00:23:27.682\nI also now need to change,\nHow I'm matching, cuz when Babel runs,\n\n380\n00:23:27.682 --> 00:23:30.999\nit's gonna look for, if you have some\njs files, it should use those but\n\n381\n00:23:30.999 --> 00:23:33.780\nif it sees jsx files,\nit should also do Babel stuff on them.\n\n382\n00:23:34.810 --> 00:23:35.958\nSo I have to change,\n\n383\n00:23:35.958 --> 00:23:40.703\nbasically I'm pushing the fact that JSX\nas an extension throughout this webpack.\n\n384\n00:23:40.703 --> 00:23:43.770\nI think it was like three lines I changed.\n\n385\n00:23:43.770 --> 00:23:48.094\nWith that in place, let's go ahead and\nchange our code to use React and\n\n386\n00:23:48.094 --> 00:23:49.722\nthen run the whole thing.\n\n387\n00:23:49.722 --> 00:23:51.849\nSo the next step is.\n\n388\n00:23:56.970 --> 00:23:59.296\nSo, let's look at index such as jsx.\n\n389\n00:23:59.296 --> 00:24:00.490\nRight now it's .jsx now.\n\n390\n00:24:01.900 --> 00:24:04.100\nAgain, you just kinda squint at it.\n\n391\n00:24:04.100 --> 00:24:07.900\nBasically, it says, hey, by the way,\nI've got this thing called react.\n\n392\n00:24:07.900 --> 00:24:10.570\nI've got this function called render.\n\n393\n00:24:10.570 --> 00:24:12.690\nThere's my secondary file.\n\n394\n00:24:12.690 --> 00:24:17.020\nAnd it says, ok, go ahead and\nrender whatever is in secondary and\n\n395\n00:24:17.020 --> 00:24:22.120\nadd it to a element called\nroot on your main document.\n\n396\n00:24:22.120 --> 00:24:23.210\n&gt;&gt; There's something here.\n\n397\n00:24:23.210 --> 00:24:26.430\nIt looks like you're putting\nsome HTML in this file.\n\n398\n00:24:26.430 --> 00:24:27.940\nI'm assuming that's JSX?\n\n399\n00:24:27.940 --> 00:24:29.690\n&gt;&gt; Right.\n&gt;&gt; Are they effectively the same or\n\n400\n00:24:29.690 --> 00:24:32.150\nis there some hidden magic, so to speak?\n\n401\n00:24:32.150 --> 00:24:37.360\n&gt;&gt; JSX, essentially,\nis a shorthand notation for\n\n402\n00:24:37.360 --> 00:24:40.180\nan actual command called create element.\n\n403\n00:24:40.180 --> 00:24:44.520\nInstead of having to type in\nreact.create element everywhere,\n\n404\n00:24:44.520 --> 00:24:48.170\nyou could just type in\nthe simplified syntax.\n\n405\n00:24:48.170 --> 00:24:51.300\nIt looks like HTML, but it's really JSX,\n\n406\n00:24:51.300 --> 00:24:55.930\nwhich is basically shorthand for\nsome specific react commands.\n\n407\n00:24:55.930 --> 00:24:58.470\nBut for the most part,\nyour mind starts blurring and\n\n408\n00:24:58.470 --> 00:25:00.810\nyou start to treat it like HTML so.\n\n409\n00:25:00.810 --> 00:25:04.892\nBut when it comes to, down the road\nit's really not exactly the same.\n\n410\n00:25:04.892 --> 00:25:10.550\nAnd that's why these need to be transpiled\nbecause it doesn't look like JavaScript,\n\n411\n00:25:10.550 --> 00:25:11.320\nbut it really is.\n\n412\n00:25:12.970 --> 00:25:16.433\nOkay, so the next step is, let's look at\nwhat secondary looks like real quick.\n\n413\n00:25:20.048 --> 00:25:22.716\nNow, you notice I capitalize secondary\nbecause this is an example of\n\n414\n00:25:22.716 --> 00:25:23.940\nwhat's called a component.\n\n415\n00:25:23.940 --> 00:25:27.190\nThis basically reacts as\nan idea of components.\n\n416\n00:25:27.190 --> 00:25:31.609\nBy convention,\ncomponents are named with capitals.\n\n417\n00:25:31.609 --> 00:25:35.103\nAnd again, I'm not going to go through\nthe exact syntax, but basically,\n\n418\n00:25:35.103 --> 00:25:36.666\nhere I'm exporting something.\n\n419\n00:25:36.666 --> 00:25:39.531\nI'm sorting a function, in this case,\n\n420\n00:25:39.531 --> 00:25:43.340\nand all it does is returns,\nhow will it react in a div.\n\n421\n00:25:43.340 --> 00:25:47.190\nNow again, that div is actually,\nagain, that's JSX.\n\n422\n00:25:47.190 --> 00:25:51.510\nIt's a, trade element says, create\nan element of type div with hello world\n\n423\n00:25:51.510 --> 00:25:55.310\ninside of it, is literally what that\ntranslates to, once it's transpiled.\n\n424\n00:25:55.310 --> 00:25:56.640\nAnd we'll look at the code in the end and\n\n425\n00:25:56.640 --> 00:25:59.020\nwe'll see that's what\nthe transpile code actually does.\n\n426\n00:26:00.360 --> 00:26:02.500\nOkay, so\nnow that I've got those two pieces,\n\n427\n00:26:02.500 --> 00:26:05.500\nI think we're ready to go ahead and\nbuild this.\n\n428\n00:26:05.500 --> 00:26:10.270\nAnd actually, I just remembered one thing\nI've neglected to tell you is, oops.\n\n429\n00:26:12.190 --> 00:26:16.090\nSo one thing I skipped real quick and\nthen we'll be done in a second.\n\n430\n00:26:16.090 --> 00:26:19.424\nIf I go back to my disks,\nremember I had my index.html?\n\n431\n00:26:20.640 --> 00:26:25.730\nSo, if you recall my reacting,\nI referred to something called root.\n\n432\n00:26:25.730 --> 00:26:30.262\nAnd in my earlier example, I needed a\nplaceholder in my HTML file that react as\n\n433\n00:26:30.262 --> 00:26:33.140\nit starts injecting it's\nfunctionality into.\n\n434\n00:26:33.140 --> 00:26:37.270\nSo I added one line in my index.HTML\nwhich is this one line root.\n\n435\n00:26:37.270 --> 00:26:39.240\nSo now that my reference\nto root makes sense.\n\n436\n00:26:40.380 --> 00:26:44.720\nNow I've got that done,\nI've essentially hello world react app.\n\n437\n00:26:44.720 --> 00:26:46.290\nSo we need to transpile it.\n\n438\n00:26:46.290 --> 00:26:50.428\nSo that would be basically\nnow ready to go with\n\n439\n00:26:50.428 --> 00:27:00.580\n./node_modules/.bin/webpack, and\nlet that chew.\n\n440\n00:27:00.580 --> 00:27:05.450\nNow more's going on, so\nit might take four seconds, again.\n\n441\n00:27:05.450 --> 00:27:08.730\n&gt;&gt; And we talked about this in\na previous episode where as you start to\n\n442\n00:27:08.730 --> 00:27:11.580\nadd a little more to it, it is going\nto take a little bit longer time.\n\n443\n00:27:11.580 --> 00:27:16.040\nBut it's great, the reason I asked that\nquestion is I'd heard people say, yeah,\n\n444\n00:27:16.040 --> 00:27:20.290\nmy webpack build takes about 45 seconds,\n3 minutes, crazy stuff like that.\n\n445\n00:27:20.290 --> 00:27:22.630\nAnd I was like, that doesn't seem right.\n\n446\n00:27:22.630 --> 00:27:24.590\nNow, I guess as a follow up,\n\n447\n00:27:24.590 --> 00:27:27.380\nis that reasonable if your\nbuild starts taking that long?\n\n448\n00:27:27.380 --> 00:27:32.510\n&gt;&gt; So\nthe builds can take up to 40 seconds,\n\n449\n00:27:32.510 --> 00:27:35.020\nat least on a slower machine like mine.\n\n450\n00:27:35.020 --> 00:27:39.630\nSo the nice thing though is, and\nwe'll get to it in a later lesson.\n\n451\n00:27:39.630 --> 00:27:42.940\nBut when you're in development mode,\nit kinda spins up and\n\n452\n00:27:42.940 --> 00:27:45.430\nit only builds differentials.\n\n453\n00:27:45.430 --> 00:27:48.010\nSo the builds may take only\nabout less than a second.\n\n454\n00:27:48.010 --> 00:27:51.890\nBut the kinda spin up may take as much\nas 30, 40 seconds on a bigger project.\n\n455\n00:27:51.890 --> 00:27:56.330\nAnd if it gets into a big\nproject it could take minutes.\n\n456\n00:27:56.330 --> 00:28:00.590\nBut the dev environment is designed\nto only make incremental builds\n\n457\n00:28:00.590 --> 00:28:01.910\non your changes.\n\n458\n00:28:01.910 --> 00:28:03.270\nSo life becomes a lot better.\n\n459\n00:28:04.800 --> 00:28:09.560\nOkay, so we've built this, we've outputted\nthe main bundle just like before.\n\n460\n00:28:09.560 --> 00:28:12.350\nJust look at the code and\nthen we'll wrap up here.\n\n461\n00:28:12.350 --> 00:28:16.300\nSo first step is we need to File &gt; Open,\n\n462\n00:28:21.140 --> 00:28:25.952\nFile &gt; Open file, I want to be looking at\n\n463\n00:28:25.952 --> 00:28:30.070\nmy React example React in the div.\n\n464\n00:28:32.030 --> 00:28:33.730\nOkay, so we run it.\n\n465\n00:28:33.730 --> 00:28:39.240\nSo basically, all was just output\na div with a hello react in it,\n\n466\n00:28:39.240 --> 00:28:40.850\nthat's what we see right.\n\n467\n00:28:42.160 --> 00:28:43.100\nSo that's that.\n\n468\n00:28:43.100 --> 00:28:46.380\nNow let's look at the source code and\nsee whats happening behind the scenes.\n\n469\n00:28:46.380 --> 00:28:51.760\nSo close up all those,\nI'm not using those, so.\n\n470\n00:28:51.760 --> 00:28:54.300\nOkay, so here's my stuff.\n\n471\n00:28:54.300 --> 00:28:57.660\nHere's my source, Secondary.\n\n472\n00:28:57.660 --> 00:29:00.520\nOkay, looks just like what I would expect,\nright?\n\n473\n00:29:00.520 --> 00:29:04.010\nI mean, I got this,\nbasically, this .jsx in it.\n\n474\n00:29:04.010 --> 00:29:05.970\nAnd here's my index.jsx and\n\n475\n00:29:05.970 --> 00:29:08.450\nthere he is, pretty much what my\nsource code looks like, that's good.\n\n476\n00:29:08.450 --> 00:29:10.480\nNow let's look at\nthe bundle real quick and\n\n477\n00:29:10.480 --> 00:29:13.820\nsee what's happening behind\nthe scenes here a little bit.\n\n478\n00:29:15.060 --> 00:29:17.290\nGo all the way to the bottom and\nsee if we can find it.\n\n479\n00:29:18.440 --> 00:29:19.720\nIt's starting to get\na little crazy on us here.\n\n480\n00:29:19.720 --> 00:29:22.910\nBecause what you're seeing here is,\nnow you've got react bundled in.\n\n481\n00:29:22.910 --> 00:29:26.620\nSo the code that's here is not just\nyour code, now you've got react and\n\n482\n00:29:26.620 --> 00:29:29.150\nreact dom jammed in here also.\n\n483\n00:29:29.150 --> 00:29:32.810\nBut if I go to the bottom, if I could\nmaybe find it, I should be able to find\n\n484\n00:29:32.810 --> 00:29:36.243\nmy, I know what you do, I do a search for\nhello world or hello react.\n\n485\n00:29:39.598 --> 00:29:40.100\nThere it is.\n\n486\n00:29:41.260 --> 00:29:45.080\nSo if you look at it,\nyou'll see there's no JSX here anymore.\n\n487\n00:29:45.080 --> 00:29:48.450\nAnd what you're seeing is,\nlet me scroll this over.\n\n488\n00:29:48.450 --> 00:29:52.410\nYou can actually see now that\nyour JSX got translated into this\n\n489\n00:29:52.410 --> 00:29:56.160\ncreate element function where\nit passes some parameters.\n\n490\n00:29:56.160 --> 00:29:59.397\nSo again, JSX really is,\nwhen it's translated,\n\n491\n00:29:59.397 --> 00:30:02.510\nreally is a call to react itself.\n\n492\n00:30:02.510 --> 00:30:04.529\nSo that's what's happening\nbehind the scenes.\n\n493\n00:30:04.529 --> 00:30:05.458\nMost people don't know that.\n\n494\n00:30:05.458 --> 00:30:09.420\nActually, people just kind\nof just use JSX use it.\n\n495\n00:30:09.420 --> 00:30:13.580\nNow, at least, you have a better idea\nof what's happening behind the scenes.\n\n496\n00:30:13.580 --> 00:30:18.910\nSo I think that is the end\nof this session here.\n\n497\n00:30:18.910 --> 00:30:22.490\nWe've now done, basically,\nwe've focused on transpilation and\n\n498\n00:30:22.490 --> 00:30:26.710\nwe've run as far to even do\nJSX transpilation with react.\n\n499\n00:30:26.710 --> 00:30:27.330\n&gt;&gt; So John,\n\n500\n00:30:27.330 --> 00:30:32.060\nyou've definitely illuminated some things\nwhere some of these other projects for\n\n501\n00:30:32.060 --> 00:30:36.000\nyour web pack config is being provided\nto you, if you're going down that road.\n\n502\n00:30:36.000 --> 00:30:37.200\nIt's kind of magic.\n\n503\n00:30:37.200 --> 00:30:40.890\nBut setting up the babble RC,\nthe little bit on installation,\n\n504\n00:30:40.890 --> 00:30:42.960\nI would have to look up those names.\n\n505\n00:30:42.960 --> 00:30:44.860\nNo one's gonna memorize those.\n\n506\n00:30:44.860 --> 00:30:48.290\nBut then the webpack configuration\nactually still ended up being fairly\n\n507\n00:30:48.290 --> 00:30:49.630\nsimple, readable.\n\n508\n00:30:49.630 --> 00:30:52.010\nAnd most importantly to me,\n\n509\n00:30:52.010 --> 00:30:55.150\nI can understand what's going on in it and\nit's no longer magic.\n\n510\n00:30:55.150 --> 00:30:56.400\nSo definitely, thank you.\n\n511\n00:30:56.400 --> 00:30:59.500\nAnd we got more intro to webpack\ncoming at you, but for this episode,\n\n512\n00:30:59.500 --> 00:31:00.900\nwe're gonna go ahead and wrap it up.\n\n513\n00:31:00.900 --> 00:31:04.280\nSo signing off for Dev Pro TV,\nI've been your host Justin Dennison.\n\n514\n00:31:04.280 --> 00:31:05.088\n&gt;&gt; I'm John Tucker.\n\n515\n00:31:05.088 --> 00:31:07.012\n&gt;&gt; And we'll see you next time.\n\n516\n00:31:07.012 --> 00:31:14.360\n[MUSIC]\n\n",
          "vimeoId": "240546450"
        },
        {
          "description": "In this episode, Justin and John start diving into creating production deployment builds using the webpack build process that has been building over the previous few episodes including the change in debugging tooling available, passing environment variables as well as managing the build artifacts in a reproducible manner.",
          "length": "1924",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-4-1-1-production-builds-102617-PGM.00_41_11_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-4-1-1-production-builds-102617-PGM.00_41_11_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-4-1-1-production-builds-102617-PGM.00_41_11_17.Still001-sm.jpg",
          "title": "Production Builds",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.740 --> 00:00:16.421\nGreetings everyone and welcome back to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.421 --> 00:00:20.400\nI'm your host Justin Dennison and in\ntoday's episode we're continuing on with\n\n4\n00:00:20.400 --> 00:00:23.370\nwebpack, but we're gonna be\ntalking about production builds.\n\n5\n00:00:23.370 --> 00:00:26.270\nNow, that may be out of\nyour mind at this point but\n\n6\n00:00:26.270 --> 00:00:27.990\nit is an incredibly important topic.\n\n7\n00:00:27.990 --> 00:00:31.630\nAnd luckily we have someone in the studio\nwho knows all about it, Mr. John Tucker.\n\n8\n00:00:31.630 --> 00:00:32.490\nHow are you doing today John?\n\n9\n00:00:32.490 --> 00:00:33.320\n&gt;&gt; Doing great.\n\n10\n00:00:33.320 --> 00:00:36.400\n&gt;&gt; So John and\nI were talking before this episode.\n\n11\n00:00:36.400 --> 00:00:39.740\nAnd actually in a previous episode\nI saw that we had a Webpack\n\n12\n00:00:39.740 --> 00:00:43.340\nbuild that was right at the end and\nthen there was this yellow here.\n\n13\n00:00:43.340 --> 00:00:46.190\nAnd I asked you about that,\nbut maybe we can come back and\n\n14\n00:00:46.190 --> 00:00:47.760\nlook at that,\ntalk about that a little bit.\n\n15\n00:00:47.760 --> 00:00:51.200\nLike why does that come up, before we\nget into this production build portion.\n\n16\n00:00:51.200 --> 00:00:52.650\n&gt;&gt; Right, so actually,\n\n17\n00:00:52.650 --> 00:00:55.480\nthe whole point of the production\nbuild is to address this problem.\n\n18\n00:00:55.480 --> 00:00:59.040\nSo what was happening was, now I don't\nwanna run it because it took about 40\n\n19\n00:00:59.040 --> 00:01:04.430\nseconds or 30 seconds but on the last\none we were building that react app.\n\n20\n00:01:04.430 --> 00:01:05.780\nYou notice that one, it took awhile.\n\n21\n00:01:05.780 --> 00:01:11.100\nTwo, you notice if you go back to the\nvideo you'll notice that the output for\n\n22\n00:01:11.100 --> 00:01:13.290\nthe main bundle was\nyellow instead of green.\n\n23\n00:01:13.290 --> 00:01:14.510\nThat was a flag.\n\n24\n00:01:14.510 --> 00:01:16.970\nThat was a flag that hey\nthat's a little big of a file.\n\n25\n00:01:16.970 --> 00:01:20.070\nI think it was like 300k or something\nwhich is starting to get a little bit big\n\n26\n00:01:20.070 --> 00:01:22.060\nfor a bundle to be downloaded to the web.\n\n27\n00:01:23.190 --> 00:01:25.320\nAnd partially the reason\nwhy that's the case,\n\n28\n00:01:25.320 --> 00:01:29.790\nwhy did that happen was reactive self\nhas a lot of built in debugging code.\n\n29\n00:01:29.790 --> 00:01:32.780\nSo, that when you're in development mode\n\n30\n00:01:32.780 --> 00:01:35.250\nIt has all this extra stuff on there,\nright?\n\n31\n00:01:35.250 --> 00:01:38.310\nBut when you're in production,\nyou don't need all that development code.\n\n32\n00:01:38.310 --> 00:01:41.820\nSo we need to basically flag our\nbuild process and say, by the way,\n\n33\n00:01:41.820 --> 00:01:43.350\nyou're in production mode.\n\n34\n00:01:43.350 --> 00:01:45.810\nSo it strips out all this unused code,\n\n35\n00:01:45.810 --> 00:01:48.870\nthat is not needed when you\ngive it to your customers.\n\n36\n00:01:48.870 --> 00:01:50.980\nSo that's why it's important\nto do a production build, and\n\n37\n00:01:50.980 --> 00:01:52.860\nthat's why we're gonna do it right now.\n\n38\n00:01:52.860 --> 00:01:56.610\nHow do we strip out all\nthe unused code okay?\n\n39\n00:01:56.610 --> 00:02:00.440\n&gt;&gt; So John just to clarify what we\nmean when we say production build.\n\n40\n00:02:00.440 --> 00:02:05.440\nWe wanna make sure any fluff just the\nlittle sprinkles on top that we use maybe\n\n41\n00:02:05.440 --> 00:02:07.350\nduring dev tools and things like that.\n\n42\n00:02:07.350 --> 00:02:09.900\nWe kinda just pull those out and\nstreamline and\n\n43\n00:02:09.900 --> 00:02:13.430\nmake it as slim as possible.\n\n44\n00:02:13.430 --> 00:02:17.510\nIs that what production builds are all\nabout or these are a little more to it?\n\n45\n00:02:17.510 --> 00:02:19.890\n&gt;&gt; That's mostly what production\nbuilds are about or basically.\n\n46\n00:02:20.900 --> 00:02:24.900\nSo, it's basically the files that you'll\nactually copy to you Web Server to be\n\n47\n00:02:24.900 --> 00:02:26.280\nserved to the customer.\n\n48\n00:02:26.280 --> 00:02:27.654\nSo, and you mean it.\n\n49\n00:02:27.654 --> 00:02:30.820\nYou want it to be fast,\nyou want it to be efficient.\n\n50\n00:02:30.820 --> 00:02:34.810\nAnd you wanna remove all the cruft\nthat you don't necessarily need\n\n51\n00:02:34.810 --> 00:02:36.260\nin that environment.\n\n52\n00:02:36.260 --> 00:02:38.740\nOkay, so what I'm gonna do is\nwe're gonna get to here and\n\n53\n00:02:38.740 --> 00:02:40.440\nlook at an example of production build.\n\n54\n00:02:40.440 --> 00:02:42.360\nSo let's go ahead and go there.\n\n55\n00:02:42.360 --> 00:02:46.280\nAnd I have a folder called Production,\nso let me find it.\n\n56\n00:02:47.410 --> 00:02:47.930\nProduction.\n\n57\n00:02:49.270 --> 00:02:51.550\nOkay, so what are we going to do?\n\n58\n00:02:51.550 --> 00:02:55.050\nFirst thing we're going to do is,\nwe are going to.\n\n59\n00:02:55.050 --> 00:02:57.050\nWe're going to go into our\nsource code real quick.\n\n60\n00:02:58.850 --> 00:03:00.750\nAnd I believe it's in the index.\n\n61\n00:03:00.750 --> 00:03:03.450\nIt's going to open up this.\n\n62\n00:03:03.450 --> 00:03:07.810\nI'm going to simulate an example\nof what react is doing.\n\n63\n00:03:07.810 --> 00:03:12.200\nI mean react does it itself, but in my\nown code I'm gonna put in some fluff code\n\n64\n00:03:12.200 --> 00:03:15.320\nthat I want to be stripped\nout of production.\n\n65\n00:03:15.320 --> 00:03:19.250\nSo you can see down here,\nthis is my old React code, right?\n\n66\n00:03:19.250 --> 00:03:21.790\nI've added just the end of this code.\n\n67\n00:03:21.790 --> 00:03:24.360\nI've said something like\nprocess environment,\n\n68\n00:03:24.360 --> 00:03:28.430\nnode environment is not equal to\nproduction that means essentially\n\n69\n00:03:28.430 --> 00:03:31.830\nthere's a flag in the environment variable\nsaying, am I in production or not.\n\n70\n00:03:31.830 --> 00:03:34.210\nAnd this thing is not in production mode,\n\n71\n00:03:34.210 --> 00:03:39.220\nI'm gonna log to the console looks\nlike we're in development mode.\n\n72\n00:03:39.220 --> 00:03:43.820\nSo, that should only be available, console\nlines should only be when we're running\n\n73\n00:03:45.380 --> 00:03:47.170\na version of the code\nthat's in development.\n\n74\n00:03:47.170 --> 00:03:49.880\nWhen this goes to production,\nall that code just gets stripped out.\n\n75\n00:03:50.900 --> 00:03:52.320\nThat's what this is about.\n\n76\n00:03:53.380 --> 00:03:58.210\nSo now we've got our example of a code\nthat we want to be stripped out,\n\n77\n00:03:58.210 --> 00:04:00.570\nlets go to our web pack and think next.\n\n78\n00:04:00.570 --> 00:04:04.570\nAnd kind of inform it about this\ndistinction between production and\n\n79\n00:04:04.570 --> 00:04:05.880\nlet's go in to.\n\n80\n00:04:14.420 --> 00:04:19.550\nOkay so we're going to kind of go through\nthis top down to see what's changed.\n\n81\n00:04:19.550 --> 00:04:22.190\nSo path's the same,\nweb packs the same here.\n\n82\n00:04:22.190 --> 00:04:24.390\nNow, one thing that's\na little different here.\n\n83\n00:04:24.390 --> 00:04:26.550\nBefore, when we declared\nthe module exports,\n\n84\n00:04:26.550 --> 00:04:29.080\nI think I was exporting just an object.\n\n85\n00:04:30.950 --> 00:04:32.540\nThat what was it for,\n\n86\n00:04:32.540 --> 00:04:36.420\nnow I'm actually exporting\na function that takes a parameter.\n\n87\n00:04:36.420 --> 00:04:41.870\nThis is error syntax that takes\nthe strength in ENV, which is environment.\n\n88\n00:04:41.870 --> 00:04:46.300\nSo now when you run web pack you're going\nto be passing it environment variables to\n\n89\n00:04:46.300 --> 00:04:50.370\nsay hey I'm in production mode or\nI'm in development mode.\n\n90\n00:04:50.370 --> 00:04:52.410\nAnd this is the syntax you\nneed to change it to so\n\n91\n00:04:52.410 --> 00:04:56.090\nthe environment gets pushed into\nyour web pack configuration.\n\n92\n00:04:56.090 --> 00:04:59.220\nThis is all the same This is all the same.\n\n93\n00:04:59.220 --> 00:04:59.790\nI'm looking down.\n\n94\n00:04:59.790 --> 00:05:03.170\nThat is one extra thing\nthat's pushed here.\n\n95\n00:05:03.170 --> 00:05:06.070\nSo at this point the ENV's here.\n\n96\n00:05:06.070 --> 00:05:10.620\nBut I need to push that\nENV into my source code.\n\n97\n00:05:10.620 --> 00:05:14.770\nSo if you look down at the bottom here,\nI've got this extra bit here,\n\n98\n00:05:14.770 --> 00:05:17.399\nthis new webpack.DefinePlugin business.\n\n99\n00:05:20.410 --> 00:05:24.450\nBasically this is a way to inject,\njust understand I don't want to go through\n\n100\n00:05:24.450 --> 00:05:26.600\nexact word to define plug-in is and\nall this.\n\n101\n00:05:26.600 --> 00:05:30.680\nPretty much copy and paste out of\nthe web pack documentation but\n\n102\n00:05:30.680 --> 00:05:33.930\nthis is basically saying the way\nyou glance at it is saying\n\n103\n00:05:33.930 --> 00:05:37.240\nthere is an environment variable that\ncame from my variable for this function.\n\n104\n00:05:37.240 --> 00:05:40.080\nThere is something called\nnode enviroment here.\n\n105\n00:05:40.080 --> 00:05:42.420\nAnd I'm passing it up into my code.\n\n106\n00:05:42.420 --> 00:05:45.880\nSo this basically allows\nmy source code to say,\n\n107\n00:05:45.880 --> 00:05:48.970\nthere's this environment variable\ncalled an ENV node environment.\n\n108\n00:05:48.970 --> 00:05:52.550\nAnd that's how I can decide\nto show things or not.\n\n109\n00:05:52.550 --> 00:05:56.890\nSo this is just kind of a copy and paste\nway of injecting it into my source code.\n\n110\n00:05:56.890 --> 00:06:01.440\nYou don't have this here, Webpack knows\nabout it but your source code doesn't.\n\n111\n00:06:01.440 --> 00:06:05.020\nSo John, this was the entire\nimpetus of requiring web ping.\n\n112\n00:06:05.020 --> 00:06:09.570\nNow, we haven't explicitly required\nit in the webpack up into this point,\n\n113\n00:06:09.570 --> 00:06:12.720\nwas to be able to define this kind\nof custom plugin for ourselves.\n\n114\n00:06:12.720 --> 00:06:13.650\n&gt;&gt; Yeah, I think I missed that, right.\n\n115\n00:06:13.650 --> 00:06:18.450\nSo before I didn't, I was calling with,\nthis was the config file for Webpack, but\n\n116\n00:06:18.450 --> 00:06:22.530\nI never actually required Webpack\nitself in the configuration.\n\n117\n00:06:22.530 --> 00:06:24.200\nThis is just JavaScript, right?\n\n118\n00:06:24.200 --> 00:06:28.540\nIn this case, because I needed to use\nthis functionality from Webpack called I\n\n119\n00:06:28.540 --> 00:06:34.410\nactually had to import Webpack\nitself into this code.\n\n120\n00:06:34.410 --> 00:06:37.950\nSo now basically, webpack knows about\nthis environment variable and so\n\n121\n00:06:37.950 --> 00:06:39.200\ndoes my source code.\n\n122\n00:06:39.200 --> 00:06:43.390\nNow, the next question is how\ndo we get webpack to know about\n\n123\n00:06:43.390 --> 00:06:45.260\nThat environment group.\n\n124\n00:06:45.260 --> 00:06:49.240\nSo, and it's gonna be in the command line,\nhow we run the command line.\n\n125\n00:06:49.240 --> 00:06:52.820\nSo let's go back to the command line.\n\n126\n00:06:52.820 --> 00:06:54.870\nSo, okay, so\nthis is a little bit more wordy.\n\n127\n00:06:54.870 --> 00:06:58.560\nSo we used to just run, if you recall\nbefore if we wanted to run a build,\n\n128\n00:06:58.560 --> 00:06:59.850\nit was simple.\n\n129\n00:06:59.850 --> 00:07:05.880\nWell, relatively simple you would\nsay .node_modules /.bin/webpak.\n\n130\n00:07:05.880 --> 00:07:11.640\nBut now my config and stuff is expecting\nsome environment variable telling me am\n\n131\n00:07:11.640 --> 00:07:15.300\nin development mode or am I in production\nmode, development or production mode.\n\n132\n00:07:15.300 --> 00:07:17.670\nSo I need to pass in\nextra parameters here.\n\n133\n00:07:18.830 --> 00:07:28.280\nAnd it's env NODE_ENV Equals\ndevelopment okay?\n\n134\n00:07:28.280 --> 00:07:32.110\nSo now if I run that I'm basically\ntelling webpack to run in develop mode.\n\n135\n00:07:32.110 --> 00:07:36.740\nAnd we'll look to see what it does,\nwhat its output looks like and\n\n136\n00:07:36.740 --> 00:07:39.860\nthen we'll run in production mode.\n\n137\n00:07:39.860 --> 00:07:43.730\n&gt;&gt; Now John we got a little kinda\ntool tip from your terminal there.\n\n138\n00:07:43.730 --> 00:07:49.120\nIs that --env node env equals\ndevelopment or there's a space there.\n\n139\n00:07:49.120 --> 00:07:52.661\nSorry I just wanted to make sure we saw\nthose dashes from the previous one.\n\n140\n00:07:52.661 --> 00:07:57.914\n&gt;&gt; Yeah, so it's wrapped,\nmy command line is a little long so\n\n141\n00:07:57.914 --> 00:08:05.705\nit's ./node_modules/.bin/webpack\n--env space NODE_ENV=development.\n\n142\n00:08:05.705 --> 00:08:09.642\nSo basically saying, this environment\nvariable named node envelopment, and\n\n143\n00:08:09.642 --> 00:08:11.001\nthe value is development.\n\n144\n00:08:11.001 --> 00:08:14.086\nOkay, so it built,\nnothing fancy here, and this is,\n\n145\n00:08:14.086 --> 00:08:16.850\nremember, I told you\nearlier about the yellow.\n\n146\n00:08:16.850 --> 00:08:19.835\nCuz I'm in development mode,\nmaybe it's still big.\n\n147\n00:08:19.835 --> 00:08:23.448\nAnd our goal is, if I run in production\nmode, then the hope is that this\n\n148\n00:08:23.448 --> 00:08:28.580\nnow turns green, and that it's gonna be\nsmaller, Sso we'll come back to this.\n\n149\n00:08:28.580 --> 00:08:34.163\nThis is expected, so let's look to\nsee real quick what happened here.\n\n150\n00:08:34.163 --> 00:08:40.890\nOpen file, if I go back under this and\nI go under,\n\n151\n00:08:40.890 --> 00:08:46.282\nwhat is this, production, dist, okay.\n\n152\n00:08:46.282 --> 00:08:51.783\nAnd again, the big difference here is, in\nmy console, I should be seeing something\n\n153\n00:08:51.783 --> 00:08:58.403\nthat shows, Okay,\n\n154\n00:08:58.403 --> 00:09:01.710\nso right now it's saying is, by the way,\nyou should be using development tools.\n\n155\n00:09:01.710 --> 00:09:06.600\nWhich, that's a different topic for\nReact, but you can see here,\n\n156\n00:09:06.600 --> 00:09:08.390\nhey, it looks like we're\nin development mode.\n\n157\n00:09:08.390 --> 00:09:12.670\nSo in development mode, that little\nline in my code is actually running,\n\n158\n00:09:12.670 --> 00:09:14.150\nand it's part of my code bits.\n\n159\n00:09:14.150 --> 00:09:18.654\nAnd that could be some long bit of garbage\nthat maybe it's fine in development mode.\n\n160\n00:09:18.654 --> 00:09:22.202\nBut I really don't want to distribute\nthat kind of stuff to my customers.\n\n161\n00:09:22.202 --> 00:09:27.345\nSo this is working development mode,\nnow we're gonna go back to here,\n\n162\n00:09:27.345 --> 00:09:31.130\nand we are gonna now instead\nrun it with production.\n\n163\n00:09:32.160 --> 00:09:37.030\nSo instead of development, I type\nthe same exact command as before, and\n\n164\n00:09:37.030 --> 00:09:39.240\nI just replace it with production.\n\n165\n00:09:39.240 --> 00:09:44.809\nSo if we recall before, it was 322\nkilobytes, so let's see what happens now.\n\n166\n00:09:44.809 --> 00:09:49.309\nLet it run, it's-\n&gt;&gt; Now, while this is running,\n\n167\n00:09:49.309 --> 00:09:53.800\nis this a common convention, to use\nthe words production and development, or\n\n168\n00:09:53.800 --> 00:09:56.532\nis this just a convention\nthat you've picked?\n\n169\n00:09:56.532 --> 00:09:58.820\n&gt;&gt; I mean, it's not required,\nbut it's common.\n\n170\n00:09:58.820 --> 00:09:59.508\n&gt;&gt; Okay.\n\n171\n00:09:59.508 --> 00:10:02.824\n&gt;&gt; Actually,\nI think I forgot one more line, and right,\n\n172\n00:10:02.824 --> 00:10:06.000\nthere's actually one more step to this.\n\n173\n00:10:06.000 --> 00:10:10.040\nWhen you run that in production mode,\nthere's an extra flag called -p.\n\n174\n00:10:10.040 --> 00:10:14.157\nIn addition to passing\nthe environment variable,\n\n175\n00:10:14.157 --> 00:10:16.846\nyou also want to run it with this.\n\n176\n00:10:16.846 --> 00:10:18.931\nI noticed it was still big,\nI was like, what is going on here?\n\n177\n00:10:18.931 --> 00:10:21.160\n&gt;&gt; So John,\nI do have a quick question about that.\n\n178\n00:10:22.220 --> 00:10:26.530\nThe command you just ran,\nis that --nb space nodemb,\n\n179\n00:10:26.530 --> 00:10:30.840\nor is that a space,\nwe had a little bit of wrapping there?\n\n180\n00:10:30.840 --> 00:10:32.130\n&gt;&gt; So yeah, you're correct,\n\n181\n00:10:32.130 --> 00:10:34.850\nactually, I looked at my notes,\nand I had mistyped the command.\n\n182\n00:10:34.850 --> 00:10:37.571\nSo we're gonna type it again properly, so\n\n183\n00:10:37.571 --> 00:10:40.450\nthat it actually runs\nthe way we expect it to.\n\n184\n00:10:40.450 --> 00:10:45.717\nSo let's go ahead and type it again,\nso before, remember, normally\n\n185\n00:10:45.717 --> 00:10:50.910\nit'd be ./node_modules/.bin/webpack,\nthat's the same.\n\n186\n00:10:50.910 --> 00:10:54.830\nBut now I need to add some parameters to\nhere to tell it I'm in development mode.\n\n187\n00:10:54.830 --> 00:10:59.896\nSo the syntax is --env., and\n\n188\n00:10:59.896 --> 00:11:06.277\nthat's what we were missing, dot, and\n\n189\n00:11:06.277 --> 00:11:11.353\nit's .NODE_ENV=develop.\n\n190\n00:11:11.353 --> 00:11:13.905\nAnd when I did it last time,\nI had forgot the extra dot in there, and\n\n191\n00:11:13.905 --> 00:11:16.230\nit was right at the break of the screen.\n\n192\n00:11:16.230 --> 00:11:20.490\nSo when I run this now,\nI'm basically telling it,\n\n193\n00:11:20.490 --> 00:11:26.054\nrun in development mode,\nnow let's let it run, see what it does.\n\n194\n00:11:28.395 --> 00:11:32.726\nNow one thing that's interesting is,\nyou'll notice that before,\n\n195\n00:11:32.726 --> 00:11:37.503\nthe code was like 300K or so, and\nnow it's all of a sudden down to 200,\n\n196\n00:11:37.503 --> 00:11:39.940\nand I'm in development mode.\n\n197\n00:11:39.940 --> 00:11:44.141\nThat's because React internally\napparently has some sort of optimizations\n\n198\n00:11:44.141 --> 00:11:45.052\nto know, okay.\n\n199\n00:11:45.052 --> 00:11:48.820\nI don't need all this stuff cuz they've\ntold me I'm in development mode.\n\n200\n00:11:48.820 --> 00:11:50.950\nNow when we run in production mode,\nthey'll even get smaller,\n\n201\n00:11:50.950 --> 00:11:52.650\nthey'll be even half the size of this.\n\n202\n00:11:52.650 --> 00:11:57.250\n&gt;&gt; So this is one of those instances where\nwe're using this development, production.\n\n203\n00:11:57.250 --> 00:12:00.320\nBecause we have some code that depends\non these environmental variables.\n\n204\n00:12:00.320 --> 00:12:04.370\nBut then there's some external code, like\nan MPM module, React in this case, that\n\n205\n00:12:04.370 --> 00:12:08.880\nhas its own set of conventions that maybe\nare not exclusively transparent to us.\n\n206\n00:12:08.880 --> 00:12:12.741\nSo just be aware, well,\nhow did it shrink from going to no flag,\n\n207\n00:12:12.741 --> 00:12:15.472\nI thought I was already\nin development mode.\n\n208\n00:12:15.472 --> 00:12:18.303\nWell, it may not necessarily\nalways be that easy.\n\n209\n00:12:18.303 --> 00:12:22.238\n&gt;&gt; Right, so the documentation does say,\nthey specifically mention,\n\n210\n00:12:22.238 --> 00:12:25.983\nyou need to pass a flag of .production\nto go into production mode.\n\n211\n00:12:25.983 --> 00:12:28.550\nThey didn't actually,\nthe documentation doesn't tell you\n\n212\n00:12:28.550 --> 00:12:31.902\nthat either they'll shrink it a little\nbit even if you tell it development mode,\n\n213\n00:12:31.902 --> 00:12:33.354\nthat was actually new to me today.\n\n214\n00:12:33.354 --> 00:12:34.742\nBut the key here is,\n\n215\n00:12:34.742 --> 00:12:40.322\ntheir documentation does talk about\noptimization of React on production mode.\n\n216\n00:12:40.322 --> 00:12:44.793\nIn fact, if you Google production react,\nit'll basically give you a page that says,\n\n217\n00:12:44.793 --> 00:12:49.032\nby the way, to shrink your code, you need\nto pass in a a parameter for production.\n\n218\n00:12:49.032 --> 00:12:50.357\nSo we'll do that in a second,\n\n219\n00:12:50.357 --> 00:12:53.392\nlet's look to make sure this did\nwhat we expected for our code.\n\n220\n00:12:53.392 --> 00:12:56.130\nI'm in development mode,\nso when I go ahead and\n\n221\n00:12:56.130 --> 00:12:58.850\nopen this file, I'm expecting to see...\n\n222\n00:12:59.940 --> 00:13:03.900\nSo if I go to File &gt; Open File, webpack,\n\n223\n00:13:03.900 --> 00:13:08.090\nproduction, dist,\nthis is the one I'm looking for.\n\n224\n00:13:08.090 --> 00:13:12.262\nAnd if I run it, you'll see, hey,\nit looks like we're in development mode,\n\n225\n00:13:12.262 --> 00:13:14.470\nit's actually in development mode,\nthat's expected.\n\n226\n00:13:15.690 --> 00:13:19.160\nSo now let's go ahead and run that same,\nrebuild it with production mode,\n\n227\n00:13:19.160 --> 00:13:20.680\nand that line should go away.\n\n228\n00:13:21.690 --> 00:13:25.442\nAnd let's see how React does in terms\nof how it shrinks itself even more.\n\n229\n00:13:25.442 --> 00:13:28.750\nSo what we do is we run\nthe same command as before,\n\n230\n00:13:28.750 --> 00:13:31.820\nwe add in an extra flag called -p.\n\n231\n00:13:31.820 --> 00:13:35.988\nWhich is an extra webpack optimizer,\nbasically, what it does is,\n\n232\n00:13:35.988 --> 00:13:38.822\nit even further removes extraneous code.\n\n233\n00:13:38.822 --> 00:13:43.241\nIt's telling webpack itself, by the way,\nyou need to be in production mode too.\n\n234\n00:13:43.241 --> 00:13:47.564\nSo that's what that's about, and now I\nneed to tell my code and React code that\n\n235\n00:13:47.564 --> 00:13:51.441\nit should be building basically\nwith production in mind, all right?\n\n236\n00:13:51.441 --> 00:13:55.790\nSo if I do this right, I should expect\nto see the bundle size to shrink first.\n\n237\n00:13:55.790 --> 00:13:59.850\nSo that's 211 right now, and\nsee what happens, now it's down to 116.\n\n238\n00:13:59.850 --> 00:14:02.708\nNow I've bundled,\nby doing all this flagging,\n\n239\n00:14:02.708 --> 00:14:08.370\nI went from 300K all the way down to\nabout 100K, that's a threefold savings.\n\n240\n00:14:08.370 --> 00:14:10.613\n&gt;&gt; And something that's interesting,\nand I guess this make sense.\n\n241\n00:14:10.613 --> 00:14:13.519\nIf I'm reducing the amount\nof code I'm processing,\n\n242\n00:14:13.519 --> 00:14:16.822\nmy actual build time has\ndecreased incrementally, right.\n\n243\n00:14:16.822 --> 00:14:20.520\nI think we were originally\naround 11 seconds with no flags.\n\n244\n00:14:20.520 --> 00:14:23.970\nIt looks like development puts\nus around six and a half, and\n\n245\n00:14:23.970 --> 00:14:27.060\nnow with production flag,\nwe're right at five.\n\n246\n00:14:27.060 --> 00:14:34.081\nSo it's not, we're halving, halving,\nhalving, but that may be a consideration.\n\n247\n00:14:34.081 --> 00:14:36.641\nBut, as you said, we have other\nthings that we would do to make\n\n248\n00:14:36.641 --> 00:14:39.188\nthis-\n&gt;&gt; Yeah, we're gonna do some development\n\n249\n00:14:39.188 --> 00:14:43.807\nprocess that's going to make it even more\nefficient for our regular development.\n\n250\n00:14:43.807 --> 00:14:45.777\n&gt;&gt; Now,\nI do have a follow up question about this,\n\n251\n00:14:45.777 --> 00:14:49.430\nusing environmental variables\ncalled production and development.\n\n252\n00:14:49.430 --> 00:14:55.100\nIs that a convention that you're choosing\nto use those environmental variables,\n\n253\n00:14:55.100 --> 00:14:59.231\nor is it a common community practice,\nor how does that work?\n\n254\n00:14:59.231 --> 00:15:03.964\n&gt;&gt; So that's somewhat arbitrary\nin the sense that webpack doesn't\n\n255\n00:15:03.964 --> 00:15:07.150\nreally care about this, right?\n\n256\n00:15:07.150 --> 00:15:13.411\nBut in this case, React's documentation\nsays, use the word production if you want.\n\n257\n00:15:13.411 --> 00:15:17.560\nYou need an environment\nvariable called the way it was,\n\n258\n00:15:17.560 --> 00:15:21.200\nwith the value of production,\nin order to get the effective shrinking.\n\n259\n00:15:21.200 --> 00:15:24.290\nSo I just followed,\nbecause I'm using React primarily,\n\n260\n00:15:24.290 --> 00:15:28.480\nI'm using the same exact environment\nvariables for my own code.\n\n261\n00:15:28.480 --> 00:15:32.856\nSo it's a convention, essentially,\nbecause everyone else is doing it,\n\n262\n00:15:32.856 --> 00:15:35.641\nit's not required, but it's conventional.\n\n263\n00:15:35.641 --> 00:15:36.963\nOkay, so what do we do,\n\n264\n00:15:36.963 --> 00:15:41.141\nwe just built this, we should make sure\nthat this code does what we expect.\n\n265\n00:15:41.141 --> 00:15:45.625\nSo if it all works well, and\nif I go open up the same thing again,\n\n266\n00:15:45.625 --> 00:15:50.719\nactually, which is right here,\nall right, there's my hello react.\n\n267\n00:15:50.719 --> 00:15:54.199\nAnd you notice over here,\nbefore when I was in development mode,\n\n268\n00:15:54.199 --> 00:15:58.006\nthe code would actually run and\nsays, hey, I'm in development mode.\n\n269\n00:15:58.006 --> 00:16:01.157\nAnd you notice that now\nthe console doesn't have that,\n\n270\n00:16:01.157 --> 00:16:06.000\nthat's because That code was triggered off\nof not having the word production in it.\n\n271\n00:16:06.000 --> 00:16:09.919\nSo this has done what we expect,\nwe've got a shrunken bundle.\n\n272\n00:16:09.919 --> 00:16:14.064\nAnd now I know how in my own code to\ninterject maybe development code that\n\n273\n00:16:14.064 --> 00:16:17.258\ndoesn't necessarily need\nto be there in production.\n\n274\n00:16:17.258 --> 00:16:19.195\n&gt;&gt; So John, I do have a quick question,\n\n275\n00:16:19.195 --> 00:16:23.131\nwe kind of ran into this with keeping\nup with, is that a dot, or a space, and\n\n276\n00:16:23.131 --> 00:16:27.560\nis it development, is it production,\nand then these couple extra flags.\n\n277\n00:16:27.560 --> 00:16:31.065\nAre there alternative ways to run these,\nright, we've just been going into\n\n278\n00:16:31.065 --> 00:16:35.470\nnodemondules.bin web pack,\nadding these flags on the command line.\n\n279\n00:16:35.470 --> 00:16:39.727\nWhat are your recommendations if I want\na dev build, or a production build,\n\n280\n00:16:39.727 --> 00:16:43.196\nas far as maintaining, so\nI don't have to worry about typos?\n\n281\n00:16:43.196 --> 00:16:46.601\n&gt;&gt; Right, so obviously these\ncommands are very long, right?\n\n282\n00:16:46.601 --> 00:16:48.829\nSo there are,\nthey're going to actually cover it,\n\n283\n00:16:48.829 --> 00:16:51.831\nI don't think it's going to be in\nthis one, I think it's in the next.\n\n284\n00:16:51.831 --> 00:16:55.700\nYeah it's the next one, where I'm gonna\nintroduce yet another build step.\n\n285\n00:16:55.700 --> 00:16:59.180\nSo we've got production builds, and\nthen we've got development builds,\n\n286\n00:16:59.180 --> 00:17:01.680\nwe're going to make our development\nbuild a little different.\n\n287\n00:17:01.680 --> 00:17:04.706\nAnd we're gonna add some\nlines to our package JSON,\n\n288\n00:17:04.706 --> 00:17:08.538\nso now I can run really shorthand\nversions like, in this case,\n\n289\n00:17:08.538 --> 00:17:14.662\nit'll be MPM Run Start, or\nDevelopment, and MPM Run Build.\n\n290\n00:17:14.662 --> 00:17:18.216\nAnd that'll do all the long lines,\nso I don't have to remember this.\n\n291\n00:17:18.216 --> 00:17:20.077\nIn fact,\nthat's why I stumbled a little bit,\n\n292\n00:17:20.077 --> 00:17:22.560\ncuz I don't normally type\nthese on a daily basis.\n\n293\n00:17:22.560 --> 00:17:26.213\nBut we'll introduce that in\nthe next lesson, okay, so\n\n294\n00:17:26.213 --> 00:17:28.865\nthe question is, well, what's left?\n\n295\n00:17:28.865 --> 00:17:33.282\nWe've got a production build,\nit seems like I'm in good shape here.\n\n296\n00:17:33.282 --> 00:17:36.430\nAnd there's one thing that we\nkind of glossed over here,\n\n297\n00:17:36.430 --> 00:17:40.010\nthat we need to look at maybe\nchanging how we do things.\n\n298\n00:17:40.010 --> 00:17:44.530\nSo let me go back here, let's look at\nthe production, our current state.\n\n299\n00:17:44.530 --> 00:17:48.495\nAnd you recall normally, here's one thing\nyou can keep in the back of your mind.\n\n300\n00:17:48.495 --> 00:17:54.300\nYour dist folder normally should not\ncontain anything that you care about.\n\n301\n00:17:54.300 --> 00:17:57.780\nYou should be able to wipe it out and\nrebuild again, and\n\n302\n00:17:57.780 --> 00:17:59.210\nyou should be good to go.\n\n303\n00:17:59.210 --> 00:18:02.770\nRight, that's the whole point of this\ndist, it's kind of, so the source or\n\n304\n00:18:02.770 --> 00:18:05.420\nanything else is where\nthe real stuff lives.\n\n305\n00:18:05.420 --> 00:18:09.230\nSo the problem right now is,\nif you recall, what's in dist?\n\n306\n00:18:09.230 --> 00:18:10.072\nThe main bundle and\n\n307\n00:18:10.072 --> 00:18:13.580\nthe map are automatically being\ngenerated from our build process.\n\n308\n00:18:13.580 --> 00:18:17.090\nBut right now, we've got this\nindex.html kind of jammed in here.\n\n309\n00:18:17.090 --> 00:18:19.590\nAnd that actually is something\nthat I don't wanna lose,\n\n310\n00:18:19.590 --> 00:18:22.030\nso this is not a good state.\n\n311\n00:18:22.030 --> 00:18:26.440\nSo we need to get this index html out\nof there, put it somewhere else, and\n\n312\n00:18:26.440 --> 00:18:30.590\nhave it be injected into this folder\nas part of the build process.\n\n313\n00:18:30.590 --> 00:18:33.204\nSo that's what we're gonna do now,\nand what this next example is.\n\n314\n00:18:33.204 --> 00:18:37.580\nGet the index.html somewhere else, and\nget it in here as part of the build.\n\n315\n00:18:37.580 --> 00:18:41.306\nSo what we're gonna do is,\nwe're gonn switch to a different example.\n\n316\n00:18:44.048 --> 00:18:47.884\n[INAUDIBLE] html, okay, so\nwhat are we gonna do here?\n\n317\n00:18:47.884 --> 00:18:50.848\nWe're going to, like most things web pack,\n\n318\n00:18:50.848 --> 00:18:55.847\nwe're gonna use another plugin that\nspecifically does this one function.\n\n319\n00:18:55.847 --> 00:19:00.357\nThis copies an HTML file over for\nyou, so let's go do that first,\n\n320\n00:19:00.357 --> 00:19:02.000\ninstall that package.\n\n321\n00:19:02.000 --> 00:19:08.120\nSo that's going to be, I'm the right\nfolder, npm install html-webpack,\n\n322\n00:19:08.120 --> 00:19:13.140\nyou could almost guess the name, save dev.\n\n323\n00:19:13.140 --> 00:19:15.360\nSo it's HTML, web pack, plugin, save dev.\n\n324\n00:19:16.510 --> 00:19:19.148\nI won't do it, but\nwhat that does when you do,\n\n325\n00:19:19.148 --> 00:19:21.930\nit's gonna add something\nto your package JSON.\n\n326\n00:19:24.091 --> 00:19:26.264\nHtml-webpack-plugin, right there, so\n\n327\n00:19:26.264 --> 00:19:30.020\nthat's the only thing that's\nchanged in terms of dependencies.\n\n328\n00:19:30.020 --> 00:19:34.980\nSo let's go to that, okay, so\nnow that we've done this, so\n\n329\n00:19:34.980 --> 00:19:39.148\nI need to do some other things\nin preparation for this.\n\n330\n00:19:39.148 --> 00:19:44.671\nI need to create, so normally, by\nconvention, everything that's in source,\n\n331\n00:19:44.671 --> 00:19:50.450\nlike the index.html, index.js, or jsx,\nand everything that depends on it.\n\n332\n00:19:50.450 --> 00:19:54.654\nThat's kind of normally what you\nimagine lives under the source tree,\n\n333\n00:19:54.654 --> 00:19:56.416\nkind of what's being built.\n\n334\n00:19:56.416 --> 00:19:59.498\nSo by convention, it's not required, but\n\n335\n00:19:59.498 --> 00:20:03.089\nyou need another folder\nto hold this index.html.\n\n336\n00:20:03.089 --> 00:20:06.098\nAnd you might store other stuff there\ntoo that's not really part of the build\n\n337\n00:20:06.098 --> 00:20:08.200\nprocess, but needs to be distributed.\n\n338\n00:20:08.200 --> 00:20:12.250\nSo typically,\nmost people use a folder called public.\n\n339\n00:20:12.250 --> 00:20:15.288\nSo I'm gonna make a directory called\npublic, and I already have it here.\n\n340\n00:20:15.288 --> 00:20:18.896\nBut it's basically to hold other stuff\n\n341\n00:20:18.896 --> 00:20:23.275\nthat goes in the dist that's not built,\nokay?\n\n342\n00:20:23.275 --> 00:20:25.180\nSo let's go into public and\nsee what's in public.\n\n343\n00:20:26.470 --> 00:20:32.048\nOkay, so notice here in this example here,\nI've got now my index.html here in public.\n\n344\n00:20:32.048 --> 00:20:37.000\nAnd as a matter of fact, and in theory,\nI just deleted it out of dist.\n\n345\n00:20:37.000 --> 00:20:40.990\nLet's look to see what's in this\nfile here, if anything's changed.\n\n346\n00:20:40.990 --> 00:20:43.700\nThere's one slight difference here,\nand I have printed out,\n\n347\n00:20:43.700 --> 00:20:45.020\nif you haven't noticed it.\n\n348\n00:20:45.020 --> 00:20:48.610\nSo this is basically the exact\nsame index.html file before, but\n\n349\n00:20:48.610 --> 00:20:52.610\nyou notice I don't explicitly\nreference main bundle.js.\n\n350\n00:20:52.610 --> 00:20:57.450\nOther one actually told it, by the way,\nyou're gonna use main bundle.\n\n351\n00:20:57.450 --> 00:21:00.195\nSo in this case,\nI'm not gonna put that in, okay?\n\n352\n00:21:00.195 --> 00:21:02.210\nAnd what's gonna happen as\npart of the build process,\n\n353\n00:21:02.210 --> 00:21:04.030\nit's gonna copy this file over there.\n\n354\n00:21:04.030 --> 00:21:07.310\nAnd as it builds things,\nit's gonna inject them into this file,\n\n355\n00:21:07.310 --> 00:21:08.510\nthose script tags for you.\n\n356\n00:21:09.520 --> 00:21:13.860\nNow that's gonna be important\nlater on when your bundle gets,\n\n357\n00:21:13.860 --> 00:21:16.280\nmaybe you can start splitting\nyour bundle into pieces.\n\n358\n00:21:16.280 --> 00:21:21.210\nAnd you don't wanna have to manually\nmanage what's injected into your HTML or\n\n359\n00:21:21.210 --> 00:21:24.354\nnot, that's all handled for\nyou by this plugin.\n\n360\n00:21:24.354 --> 00:21:29.440\nOkay, so basically, move the file,\ndelete one line, is what we've done.\n\n361\n00:21:29.440 --> 00:21:34.520\nOkay, so at this point, though, we need\nto tell webpack to do something extra.\n\n362\n00:21:35.680 --> 00:21:41.725\nSo let's go to, so we've got a folder,\nI've got my dist folder in theory.\n\n363\n00:21:41.725 --> 00:21:44.906\nMy dist folder's emptied out, and\n\n364\n00:21:44.906 --> 00:21:50.109\nthen I need to go into webpack,\nso atom webpack.config.\n\n365\n00:21:50.109 --> 00:21:54.870\n[COUGH] Okay, so I'm gonna kinda glance\nthrough here and see what's changed.\n\n366\n00:21:54.870 --> 00:21:56.890\nThe main change here is an extra line,\n\n367\n00:21:56.890 --> 00:22:00.560\nthis is a repeated pattern, we're gonna\ndo this over and over again and learn it.\n\n368\n00:22:00.560 --> 00:22:05.290\nBring the new library, new loader,\nor new webpack configuration thing.\n\n369\n00:22:05.290 --> 00:22:09.844\nIn this case, it's HtmlWebpackPlugin,\nand then I believe nothing here\n\n370\n00:22:09.844 --> 00:22:13.669\nhas changed here, this is all the same,\nI'm glancing at it.\n\n371\n00:22:13.669 --> 00:22:15.252\n[COUGH] And most things,\n\n372\n00:22:15.252 --> 00:22:19.630\nthe way that you add these plugins\nis down in the plugins section.\n\n373\n00:22:19.630 --> 00:22:24.700\nHere I'm telling it, by the way,\nuse this WebpackPlugin, and\n\n374\n00:22:24.700 --> 00:22:28.140\nI'm telling it the source file for\nthe template.\n\n375\n00:22:28.140 --> 00:22:30.970\nI'm saying,\nlook in the current directory, and\n\n376\n00:22:30.970 --> 00:22:35.400\nlook at public, and look for\na file called index.html.\n\n377\n00:22:35.400 --> 00:22:39.068\nAnd what that's gonna tell this\nthing to do is take that file,\n\n378\n00:22:39.068 --> 00:22:41.327\ncopy it over to the distribution, and\n\n379\n00:22:41.327 --> 00:22:45.510\nthen it's gonna inject any of\nthe bundles that's been created in it.\n\n380\n00:22:45.510 --> 00:22:50.317\nThat's it, so that's gonna basically\nallow us to keep our distribution folders\n\n381\n00:22:50.317 --> 00:22:52.276\nbeing a throwaway thing, okay?\n\n382\n00:22:52.276 --> 00:22:56.115\nSo let's see how this works,\nmake sure I didn't miss anything else.\n\n383\n00:23:00.931 --> 00:23:07.323\n[COUGH] Yep, I think we're ready to go,\nso let's go here.\n\n384\n00:23:07.323 --> 00:23:12.652\nOkay, so I'm in this folder, and so right\nnow, I have to do these long commands,\n\n385\n00:23:12.652 --> 00:23:17.929\ncuz now we've got this extra build\nprocess, so we'll just use developer mode.\n\n386\n00:23:19.567 --> 00:23:23.647\n[COUGH] So I do what,\nnode_modules/.bin/webpack, and\n\n387\n00:23:23.647 --> 00:23:29.123\nyou can see why it'd be nice to have a\nshortcut here, as this gets more tedious.\n\n388\n00:23:29.123 --> 00:23:32.812\n./node_modules/.bin/webpack env.NODE\ndevelopment.\n\n389\n00:23:32.812 --> 00:23:38.140\nOkay, so now I run it, and fundamentally,\nnot much has changed, other than the fact\n\n390\n00:23:38.140 --> 00:23:42.955\nthat it should be copying that index.html\nover, let's watch what it does.\n\n391\n00:23:44.089 --> 00:23:46.849\nMaybe I should have done the production\none, cuz it would have been faster, but,\n\n392\n00:23:48.168 --> 00:23:51.700\nOkay, so let's look here, you can actually\nsee something that's changed here.\n\n393\n00:23:51.700 --> 00:23:53.983\nSo you can see that output,\noutput are the green things.\n\n394\n00:23:53.983 --> 00:23:58.104\nAnd before, index.html was not\npart of the bundle output.\n\n395\n00:23:58.104 --> 00:24:02.992\nYou notice that now, it says,\nindex.html is part of what is produced And\n\n396\n00:24:02.992 --> 00:24:07.011\nthe sources are exactly the same\nindex.js and secondary.js.\n\n397\n00:24:07.011 --> 00:24:11.898\nSo, anyway and let's talk a little\nbit about web pack plugin here,\n\n398\n00:24:11.898 --> 00:24:14.350\nsome comments about it.\n\n399\n00:24:14.350 --> 00:24:17.570\nNow, want to see what it did, what it\ndid was, let's look at under this now.\n\n400\n00:24:17.570 --> 00:24:22.400\nAnd what I'm gonna do is the main\nbundle in the mapper, exactly the same,\n\n401\n00:24:22.400 --> 00:24:24.540\nnothing is fundamentally changed about it.\n\n402\n00:24:24.540 --> 00:24:29.510\nBut you notice that now this index.html,\nthis one actually just got built, right?\n\n403\n00:24:29.510 --> 00:24:32.070\nIt used their original copy,\nor template, and\n\n404\n00:24:32.070 --> 00:24:36.570\nit injected a line right here,\nthe actual line.\n\n405\n00:24:36.570 --> 00:24:40.500\nSo, I didn't actually have that in\nmy index.html, the new version.\n\n406\n00:24:40.500 --> 00:24:44.997\nAnd it injected itself in there for me,\n\n407\n00:24:44.997 --> 00:24:49.766\nokay so, let's make sure this all works I\n\n408\n00:24:49.766 --> 00:24:54.808\nmean nothing much has changed,\nbut just for\n\n409\n00:24:54.808 --> 00:25:01.346\nto be precise open it up,\nopen file, enter the webpack,\n\n410\n00:25:01.346 --> 00:25:06.828\nI'm gonna go to this was\nnow that this was html.\n\n411\n00:25:06.828 --> 00:25:10.990\nThis is dist and that's index html file,\nand there it is exactly the way it was\n\n412\n00:25:10.990 --> 00:25:14.658\nbefore, with I mean development mode,\nnothing much has changed.\n\n413\n00:25:14.658 --> 00:25:18.582\nSo, all I have done here is just\nmoved my index html file away,\n\n414\n00:25:18.582 --> 00:25:22.354\nfrom the distribution folder,\nand now I can now build, and\n\n415\n00:25:22.354 --> 00:25:26.980\nthrow away my distribution folder\nanytime I want and not worry about it.\n\n416\n00:25:26.980 --> 00:25:32.375\n&gt;&gt; And so, now we can treat that disk\nfolder as kind of a if it goes away,\n\n417\n00:25:32.375 --> 00:25:35.810\nwell, I'm actually running into problems\nwhere if you don't make it go away from\n\n418\n00:25:35.810 --> 00:25:40.340\ntime to time, you end up with some weird\nbuild artifacts that kind of pile up and\n\n419\n00:25:40.340 --> 00:25:41.620\nyou get unexpected behavior.\n\n420\n00:25:41.620 --> 00:25:45.110\nIs it typically a good practice\nto delete the disks, and\n\n421\n00:25:45.110 --> 00:25:47.400\nthen replace it upon every build.\n\n422\n00:25:47.400 --> 00:25:49.600\n&gt;&gt; Yeah, so what happens is that\n\n423\n00:25:50.690 --> 00:25:54.290\ndistribution folder right has got\nall the stuff from the build, right?\n\n424\n00:25:54.290 --> 00:25:59.380\nAnd they'll say on the last time you had\nextra resources that you don't have now.\n\n425\n00:25:59.380 --> 00:26:02.200\nIf you don't throw away the distro\nfolder all these extra files will\n\n426\n00:26:02.200 --> 00:26:03.130\npile up in there.\n\n427\n00:26:03.130 --> 00:26:05.220\nNow, your code is not\ngonna use those files,\n\n428\n00:26:05.220 --> 00:26:09.740\nbut it's just messy to have stuff\nyou're not using in the dist folder.\n\n429\n00:26:09.740 --> 00:26:13.180\nSo, that leads right into\nour next section, which is\n\n430\n00:26:13.180 --> 00:26:16.650\ninstead of having to manually remove\nthe dist folder every time you do a build,\n\n431\n00:26:16.650 --> 00:26:18.580\nwhich is a fairly tedious activity.\n\n432\n00:26:18.580 --> 00:26:22.010\nWe're gonna add another plugin\nthat's gonna do that for us.\n\n433\n00:26:22.010 --> 00:26:23.760\nSo, it's gonna remove\nthat distribution folder.\n\n434\n00:26:25.240 --> 00:26:27.330\nWithout us having to do it manually.\n\n435\n00:26:27.330 --> 00:26:31.600\nSo, let's switch to that, so\nlet me go to the next example.\n\n436\n00:26:31.600 --> 00:26:34.691\nAnd it's called, appropriately, clean,\n\n437\n00:26:34.691 --> 00:26:38.117\ncuz it's gonna clean out the disk folder,\nokay?\n\n438\n00:26:38.117 --> 00:26:43.623\nAnd there's another plug-in,\nso that means we do\n\n439\n00:26:43.623 --> 00:26:49.090\nnpm Install clean webpack\nplugin --save dev.\n\n440\n00:26:49.090 --> 00:26:50.870\nRun that, right?\n\n441\n00:26:50.870 --> 00:26:55.330\nAnd just to see that it did something,\nI would go into my package json, and now I\n\n442\n00:26:55.330 --> 00:27:01.390\ncan see there is a clean webpack plugin\nnow in there that wasn't there before.\n\n443\n00:27:01.390 --> 00:27:04.240\nOkay, and again at this point your\nwebpack doesn't know about it,\n\n444\n00:27:04.240 --> 00:27:07.920\nit's just that the the code is there you\njust need to tell webpack to use it.\n\n445\n00:27:07.920 --> 00:27:10.333\nNow, seems like a familiar pattern here.\n\n446\n00:27:13.279 --> 00:27:14.600\nSo, what do you do?\n\n447\n00:27:14.600 --> 00:27:17.191\nYou add another import in the beginning.\n\n448\n00:27:17.191 --> 00:27:18.650\nOkay, that's good.\n\n449\n00:27:18.650 --> 00:27:21.010\nAnd then, nothing will have changed here.\n\n450\n00:27:21.010 --> 00:27:21.800\nIn this case.\n\n451\n00:27:21.800 --> 00:27:23.400\nAgain, the documentation for\n\n452\n00:27:23.400 --> 00:27:26.140\neach of these plugins will tell\nyou exactly how to use them.\n\n453\n00:27:26.140 --> 00:27:29.160\nBut in this case it's just\na matter of adding it to the top.\n\n454\n00:27:29.160 --> 00:27:32.330\nAnd then, there's a new line here.\n\n455\n00:27:32.330 --> 00:27:34.230\nAnd you can see pretty much,\nknow what it's gonna do.\n\n456\n00:27:34.230 --> 00:27:37.980\nIt's running CleanWebpack, and\nit's looking for a folder called dist.\n\n457\n00:27:37.980 --> 00:27:41.196\nNow, basically it says, before you\nbuild throw that dist folder away.\n\n458\n00:27:41.196 --> 00:27:43.224\nRebuild again.\n\n459\n00:27:43.224 --> 00:27:45.860\nSo, let's try it out, see how it works.\n\n460\n00:27:45.860 --> 00:27:46.387\nSo.\n\n461\n00:27:51.859 --> 00:27:53.182\nLet's see.\n\n462\n00:27:53.182 --> 00:27:56.165\n[SOUND] If I'm in this folder and\n\n463\n00:27:56.165 --> 00:28:00.998\nI should type in,\nsave myself a little step here.\n\n464\n00:28:00.998 --> 00:28:05.313\nLook for my overly long commands\nnot node_modules/.bin/webpack node\n\n465\n00:28:05.313 --> 00:28:07.740\ndevelopment mode, right?\n\n466\n00:28:07.740 --> 00:28:14.354\nHit Enter, and it should say pretty quick\nit should say it tells you by the way.\n\n467\n00:28:14.354 --> 00:28:15.787\nBy the way I've removed that folder, so\n\n468\n00:28:15.787 --> 00:28:19.310\nit's kind of reminding you that you've\ndone something a little bit different.\n\n469\n00:28:19.310 --> 00:28:22.340\nAnd then, the build process continues\nexactly as it did a second ago,\n\n470\n00:28:22.340 --> 00:28:26.940\nand it outputted all the files,\nand my disk folder's back again.\n\n471\n00:28:26.940 --> 00:28:28.960\nSo, that's just a little\nconvenience thing.\n\n472\n00:28:28.960 --> 00:28:33.470\nBut it is important, if you want to keep\nyour distribution folder nice and clean,\n\n473\n00:28:33.470 --> 00:28:35.940\nand not carry over historical stuff.\n\n474\n00:28:35.940 --> 00:28:37.950\n&gt;&gt; Now, I did notice, John, as you said,\n\n475\n00:28:37.950 --> 00:28:41.150\nthe documentation will kinda\nguide us on how to use these.\n\n476\n00:28:41.150 --> 00:28:42.450\nI noticed that that was an array.\n\n477\n00:28:42.450 --> 00:28:45.610\nSo, I guess, the clean plug in\ncould clean up a bunch of stuff\n\n478\n00:28:45.610 --> 00:28:48.790\nif your build artifacts\nare kinda spread out over.\n\n479\n00:28:48.790 --> 00:28:51.330\nMaybe just one particular,\nthe disk folder and\n\n480\n00:28:51.330 --> 00:28:54.300\nmaybe this other kind of output folder,\nor something like that.\n\n481\n00:28:54.300 --> 00:28:55.887\nSo, you can do more than one in this case.\n\n482\n00:28:55.887 --> 00:29:02.580\n&gt;&gt; Right, so yeah, that function,\nthat thing is just a folder deleter.\n\n483\n00:29:02.580 --> 00:29:04.740\nAnd you tell them,\ndoesn't know anything about dists.\n\n484\n00:29:04.740 --> 00:29:10.179\nThere's a folder and delete,\nso I've not seen any builds\n\n485\n00:29:10.179 --> 00:29:15.843\nthat have other artifact folders,\nbut it could have, yes.\n\n486\n00:29:15.843 --> 00:29:21.177\nSo, a lot of these third party modules\nthey're very singularly focused and\n\n487\n00:29:21.177 --> 00:29:24.270\nthey're very simply, but they do one job.\n\n488\n00:29:25.690 --> 00:29:26.640\n&gt;&gt; And one final thing.\n\n489\n00:29:26.640 --> 00:29:29.550\nIf we could pull up that actual\nconfiguration file that went by config\n\n490\n00:29:29.550 --> 00:29:32.240\nthat we just looked at mainly,\n\n491\n00:29:32.240 --> 00:29:35.270\nbecause I was thinking about\nto the previous episode.\n\n492\n00:29:35.270 --> 00:29:38.850\nWe started out we had three lines.\n\n493\n00:29:38.850 --> 00:29:42.700\nAnd now, look how much, this is something\nthat would something that would probably\n\n494\n00:29:42.700 --> 00:29:45.870\nbe provided to me in maybe like\na boiler plate project, or something.\n\n495\n00:29:45.870 --> 00:29:47.939\nBut now,\nI actually know what everything does,\n\n496\n00:29:47.939 --> 00:29:51.029\nbecause I've added to it as I've needed,\nwell, actually I haven't.\n\n497\n00:29:51.029 --> 00:29:52.950\nJohn has.\n&gt;&gt; [LAUGH]\n\n498\n00:29:52.950 --> 00:29:54.780\n&gt;&gt; And, that singular focus that's kind\n\n499\n00:29:54.780 --> 00:29:58.240\nof a Unix philosophy,\nonly add the parts that you need.\n\n500\n00:29:58.240 --> 00:30:02.120\nSo, you'll notice,\nJohn has kind of modeled that for us.\n\n501\n00:30:02.120 --> 00:30:04.270\nI need to do this thing\nlet me bring that in.\n\n502\n00:30:04.270 --> 00:30:06.190\nInstead of let me just put\nall this stuff in here and\n\n503\n00:30:06.190 --> 00:30:08.390\nnot really know what's going on.\n\n504\n00:30:08.390 --> 00:30:11.040\n&gt;&gt; Right, so one of the challenges\nabout learning webpack, and\n\n505\n00:30:11.040 --> 00:30:14.860\nI have not seen too many tutorials\nout there that are particularly good,\n\n506\n00:30:14.860 --> 00:30:16.330\nat least I haven't found them.\n\n507\n00:30:16.330 --> 00:30:20.250\nWhere they kinda go this approach where\nyou start with something small, and\n\n508\n00:30:20.250 --> 00:30:22.860\nyou add in functionality line by line.\n\n509\n00:30:22.860 --> 00:30:26.540\nTypically what they'll do is\nthey'll throw this 60, 70,\n\n510\n00:30:26.540 --> 00:30:28.770\n80 line long web pack\nconfiguration at you.\n\n511\n00:30:28.770 --> 00:30:31.790\nAnd then, you're kind of freaked out,\ncuz you're looking at this long thing.\n\n512\n00:30:31.790 --> 00:30:33.620\nAnd then,\nthey start trying to parse it for you, but\n\n513\n00:30:33.620 --> 00:30:38.240\nyour mind is all over the place, cuz\nyou're staring at, what is all this stuff?\n\n514\n00:30:38.240 --> 00:30:43.410\nSo, a lot of people don't use webpack\nappropriately, mostly because they don't\n\n515\n00:30:43.410 --> 00:30:47.000\nknow what lines are doing, and\nwhy they're there, and why they're.\n\n516\n00:30:48.040 --> 00:30:49.140\nIt is kind of a lot going on.\n\n517\n00:30:50.540 --> 00:30:51.380\nSo, let's see.\n\n518\n00:30:51.380 --> 00:30:53.430\nI think there may be one more.\n\n519\n00:30:53.430 --> 00:30:57.600\nActually, that was the end\nof this particular segment.\n\n520\n00:30:57.600 --> 00:30:59.650\nNow, we've got a clean folder.\n\n521\n00:30:59.650 --> 00:31:03.270\nYep, I think that's it for\nthe segment here, and\n\n522\n00:31:03.270 --> 00:31:05.670\nwe'll go on to the next topic and\nthe next lesson.\n\n523\n00:31:05.670 --> 00:31:08.200\n&gt;&gt; Well, John, you definitely shown us\nsome of the considerations that we need to\n\n524\n00:31:08.200 --> 00:31:11.760\nmake when we're actually building\nsomething to production, right.\n\n525\n00:31:11.760 --> 00:31:12.930\nWe're out putting in.\n\n526\n00:31:12.930 --> 00:31:17.330\nWe have the ability to clean we need to\ntreat the disc folder as a femoral just to\n\n527\n00:31:17.330 --> 00:31:20.270\nkeep our build artifacts down, so\nyou've shown us how to do that,\n\n528\n00:31:20.270 --> 00:31:22.438\nbut also passing environmental variables.\n\n529\n00:31:22.438 --> 00:31:25.960\nAltering out webpack config\nin order to use those, and\n\n530\n00:31:25.960 --> 00:31:30.760\nas we've seen can drastically reduce,\nwhen I say drastically,\n\n531\n00:31:30.760 --> 00:31:35.670\nI think a halving is fairly drastic, or\neven to a third of what it is, right?\n\n532\n00:31:35.670 --> 00:31:38.390\nYou're getting some of that back and\nit's gonna be faster to load,\n\n533\n00:31:38.390 --> 00:31:41.750\nfaster to parse, and it's gonna\nprovide more performance to your site.\n\n534\n00:31:41.750 --> 00:31:46.180\nSo, thank you so much and we definitely\nhave more intro webpack coming at you, but\n\n535\n00:31:46.180 --> 00:31:48.560\nfor this episode we're gonna go ahead and\nwrap it up.\n\n536\n00:31:48.560 --> 00:31:51.550\nSo, signing off for Dev Pro TV,\nI've been your host Justin Neneson.\n\n537\n00:31:51.550 --> 00:31:52.390\n&gt;&gt; And I'm John Tucker.\n\n538\n00:31:52.390 --> 00:31:56.022\n&gt;&gt; And we'll see you next time.\n\n539\n00:31:56.022 --> 00:31:59.633\n[SOUND]\n\n",
          "vimeoId": "240219446"
        },
        {
          "description": "In this episode, Justin and John explore how to speed up our webpack builds during development as well as provide some nice tooling that will further speed up our development processes such as bundle analysis, busting caches for load performance, and the addition of polyfills. John further explains the use of npm scripts to make our build commands easier to reproduce.",
          "length": "1761",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-5-1-1-develoment-builds-102717.00_29_09_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-5-1-1-develoment-builds-102717.00_29_09_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-5-1-1-develoment-builds-102717.00_29_09_27.Still001-sm.jpg",
          "title": "Development Builds",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.682 --> 00:00:16.555\nGreetings everyone, and welcome back to\nanother exciting episode of DevPro TV.\n\n3\n00:00:16.555 --> 00:00:19.566\nI'm your host Justin Dennison,\nand in today's episode, well,\n\n4\n00:00:19.566 --> 00:00:21.740\nwe're coming back with\nmore intro to WebPack.\n\n5\n00:00:21.740 --> 00:00:23.690\nParticularly, we're gonna be\nlooking at development builds.\n\n6\n00:00:23.690 --> 00:00:26.060\nNow, you may be thinking,\nthat's a little backwards,\n\n7\n00:00:26.060 --> 00:00:28.470\nbut maybe there's some\nnuanced differences.\n\n8\n00:00:28.470 --> 00:00:31.930\nLuckily, we have someone in the studio\nthat knows all about these things and\n\n9\n00:00:31.930 --> 00:00:33.620\nwill help us along, Mr. John Tucker.\n\n10\n00:00:33.620 --> 00:00:34.324\nHow you doing today, John?\n\n11\n00:00:34.324 --> 00:00:35.093\n&gt;&gt; Doing great.\n\n12\n00:00:35.093 --> 00:00:37.363\n&gt;&gt; Now John,\nspeaking of development builds,\n\n13\n00:00:37.363 --> 00:00:40.910\nI've asked you over the previous\ncouple of episodes.\n\n14\n00:00:40.910 --> 00:00:43.704\nIt kind of seems slow when\nwe run a build process, but\n\n15\n00:00:43.704 --> 00:00:47.783\nyou said that's not the case during\ndevelopment, so how do we remedy that?\n\n16\n00:00:47.783 --> 00:00:51.430\n&gt;&gt; Right, so so far, we've been\nbasically mimicking a production build.\n\n17\n00:00:51.430 --> 00:00:55.785\nThat is, we're producing the files that\nthen we could actually then copy to our\n\n18\n00:00:55.785 --> 00:00:56.504\nweb server.\n\n19\n00:00:56.504 --> 00:00:59.411\nAnd so now we're gonna do\na different kind of build process,\n\n20\n00:00:59.411 --> 00:01:02.432\nwhich is pretty much doing it\nwhile you're building your app.\n\n21\n00:01:02.432 --> 00:01:06.656\nAnd that way, it's gonna be faster,\nbecause the big difference is,\n\n22\n00:01:06.656 --> 00:01:09.949\nwhen you do a full build,\nit's taking all the files and\n\n23\n00:01:09.949 --> 00:01:12.912\nrebuilding them every time for\nthe whole thing.\n\n24\n00:01:12.912 --> 00:01:15.500\nWhen you're running in development mode,\n\n25\n00:01:15.500 --> 00:01:18.270\nonly the changes you make\nare incrementally built.\n\n26\n00:01:18.270 --> 00:01:23.005\nSo it's already built 99% of it,\nso it's gonna basically only build\n\n27\n00:01:23.005 --> 00:01:27.756\nthe 1% that you changed, and so\nthe build process will be a lot faster.\n\n28\n00:01:27.756 --> 00:01:33.263\nIncrementally build, you only type\na couple lines, save, build gets done.\n\n29\n00:01:33.263 --> 00:01:35.280\nJust iterating faster and faster, so\n\n30\n00:01:35.280 --> 00:01:38.253\nthat's kind of a very modern\ndevelopmental workflow.\n\n31\n00:01:38.253 --> 00:01:41.860\n&gt;&gt; Now John, is this also going to\nprovide us with something where,\n\n32\n00:01:41.860 --> 00:01:46.680\ninstead of having to open the browser,\ngo to the file, figure those things out.\n\n33\n00:01:46.680 --> 00:01:48.703\nNow, I've heard of something\ncalled live reloading,\n\n34\n00:01:48.703 --> 00:01:50.173\nis that gonna provide that to us as well?\n\n35\n00:01:50.173 --> 00:01:53.307\n&gt;&gt; Right, in addition,\nwhen you start up the dev process,\n\n36\n00:01:53.307 --> 00:01:57.170\nit'll open your browser up,\nalready connected to your app.\n\n37\n00:01:57.170 --> 00:02:00.960\nAnd every time you hit Save in your\nbrowser on anything within the project,\n\n38\n00:02:00.960 --> 00:02:03.910\nit's within the import.\n\n39\n00:02:03.910 --> 00:02:05.870\nIt will automatically reload to the page,\nso\n\n40\n00:02:05.870 --> 00:02:08.970\nyou could actually have your app\nrunning on a separate monitor.\n\n41\n00:02:08.970 --> 00:02:12.310\nAnd you could be coding on\na different window and hit Save.\n\n42\n00:02:12.310 --> 00:02:15.120\nAnd you can look at your left, and you\ncan see the changes immediately happen.\n\n43\n00:02:15.120 --> 00:02:16.728\nSo let's go look at an example,\n\n44\n00:02:16.728 --> 00:02:20.311\nwe're gonna look at the folder called\ndevelopment and work with that.\n\n45\n00:02:20.311 --> 00:02:28.140\nSo, let's go into development, so this is\nbuilt, again, off of the previous example.\n\n46\n00:02:28.140 --> 00:02:33.870\nAnd the first thing we're gonna do\nis install another webpack module.\n\n47\n00:02:33.870 --> 00:02:37.610\nIn this case,\nit's called webpack dev server.\n\n48\n00:02:37.610 --> 00:02:44.425\nSo I'm going to go mpm\ninstall webpack-dev-server\n\n49\n00:02:44.425 --> 00:02:48.800\n--save-dev, we've done\nthis a bunch of times.\n\n50\n00:02:48.800 --> 00:02:52.250\nSo I hit Enter, it chews through,\ninstalls it, and again,\n\n51\n00:02:52.250 --> 00:02:57.267\nas before,\nit is going to change your package.json.\n\n52\n00:02:57.267 --> 00:02:58.717\nYour package.json,\n\n53\n00:02:58.717 --> 00:03:02.996\nthere should be a webpack-dev-server\nright at the bottom here.\n\n54\n00:03:02.996 --> 00:03:06.280\nOkay, so next thing we need to do,\n\n55\n00:03:16.893 --> 00:03:19.165\nOkay, actually,\nI'm gonna do one more thing too.\n\n56\n00:03:19.165 --> 00:03:22.695\nSo one of the things that was\nkind of another pain point,\n\n57\n00:03:22.695 --> 00:03:25.265\nactually, was that every time\nwe wanted to build something,\n\n58\n00:03:25.265 --> 00:03:27.335\nwe had to type in these\nreally long commands.\n\n59\n00:03:27.335 --> 00:03:34.435\nLike .webpack, node modules, webpack, blah\nblah blah, and so they get really tedious.\n\n60\n00:03:34.435 --> 00:03:38.986\nSo there's a trick here, and that is,\nwe're able to create in your package.json.\n\n61\n00:03:38.986 --> 00:03:42.183\nSo let me go ahead and\nopen up package.json.\n\n62\n00:03:45.107 --> 00:03:46.600\nAnd start up my Atom editor.\n\n63\n00:03:49.675 --> 00:03:51.712\nOf course,\nI didn't start my editor before this, so\n\n64\n00:03:51.712 --> 00:03:53.600\nit's gonna take an extra ten seconds.\n\n65\n00:03:53.600 --> 00:03:54.987\n&gt;&gt; Yeah, those things sometimes happen.\n\n66\n00:03:54.987 --> 00:03:58.413\nBut there are times where I use\nthe command line cuz I don't wanna have to\n\n67\n00:03:58.413 --> 00:03:59.280\npoint and click.\n\n68\n00:03:59.280 --> 00:04:02.323\nBut then every once in awhile, I'm like-\n&gt;&gt; Well, I wanted the color coding.\n\n69\n00:04:02.323 --> 00:04:04.153\n&gt;&gt; So this is taking awhile.\n\n70\n00:04:04.153 --> 00:04:05.902\n&gt;&gt; Just a second.\n\n71\n00:04:10.478 --> 00:04:14.620\nNow if you're wondering why this is taking\nas long, I did buy a budget computer.\n\n72\n00:04:14.620 --> 00:04:18.187\nSo I'm running on about the cheapest\ncomputer you can buy, so\n\n73\n00:04:18.187 --> 00:04:21.078\nyou can actually develop\non a $300 computer.\n\n74\n00:04:21.078 --> 00:04:22.964\nYou don't need a fancy Apple or\nanything like that.\n\n75\n00:04:29.024 --> 00:04:35.664\nLet me make this bigger, Okay, so\nthe lines I'm looking at here,\n\n76\n00:04:35.664 --> 00:04:39.452\nso before, if you'll recall how\nwe ran our build process, right?\n\n77\n00:04:39.452 --> 00:04:43.993\nThis will look really familiar,\nsee right here, it says build,\n\n78\n00:04:43.993 --> 00:04:50.300\nthen you see .node_modules/.bin/webpack\n-p --env.NODE_ENV=production.\n\n79\n00:04:50.300 --> 00:04:52.864\nThat should look familiar\nfrom the previous lesson.\n\n80\n00:04:52.864 --> 00:05:00.300\nThat was basically the command we used for\nrunning in production mode.\n\n81\n00:05:00.300 --> 00:05:02.920\nYou see now,\nthere's a new line here called start.\n\n82\n00:05:02.920 --> 00:05:05.050\nAnd instead of running webpack itself,\n\n83\n00:05:05.050 --> 00:05:10.200\nit runs webpack-dev-server, and then\npasses a different environment variable.\n\n84\n00:05:10.200 --> 00:05:14.020\nIn this case, NODE_ENV=development,\nand it has a --open.\n\n85\n00:05:14.020 --> 00:05:19.660\n--open means open the browser, so we don't\nneed to change our webpack config at all.\n\n86\n00:05:19.660 --> 00:05:22.621\nWe just needed, instead of running\nwebpack, we're running something\n\n87\n00:05:22.621 --> 00:05:26.083\ncalled webpack-dev-server, which is\nwebpack wrapped with a little web server.\n\n88\n00:05:26.083 --> 00:05:30.686\nSo now that I've got those in,\nthe way you use those commands is,\n\n89\n00:05:30.686 --> 00:05:34.800\ninstead of typing,\nbefore we were typing .bin, right?\n\n90\n00:05:34.800 --> 00:05:38.040\nAll you have to do is type in npm run, so\n\n91\n00:05:38.040 --> 00:05:42.570\nif I want to run the production build,\nI'd type in npm run build.\n\n92\n00:05:42.570 --> 00:05:47.510\nBut I want to run the development mode,\nwhere it starts my browser for me, and\n\n93\n00:05:47.510 --> 00:05:48.272\nrun start.\n\n94\n00:05:50.424 --> 00:05:53.773\nAnd so you can see,\nit's starting the webpack-dev-server,\n\n95\n00:05:53.773 --> 00:05:56.050\nmy browser automatically opened.\n\n96\n00:05:56.050 --> 00:06:00.606\nAnd there's my hello react [INAUDIBLE]\nthat I had earlier, so you can see how,\n\n97\n00:06:00.606 --> 00:06:02.380\none, it's fast.\n\n98\n00:06:02.380 --> 00:06:05.439\nWell, it seemed a little faster,\nactually, and two,\n\n99\n00:06:05.439 --> 00:06:08.380\nit's now opened my browser,\nalready pointed to it.\n\n100\n00:06:08.380 --> 00:06:13.070\nAnd then another key point of this whole\nthing is, it actually does live reloading.\n\n101\n00:06:13.070 --> 00:06:16.239\nSo if I start editing the file,\nit will automatically rebuild,\n\n102\n00:06:16.239 --> 00:06:19.186\ntell the browser to reload,\nand I'll see it on the screen.\n\n103\n00:06:19.186 --> 00:06:23.916\nSo to illustrate that, I'm gonna\ngo ahead and open up, The code, so\n\n104\n00:06:23.916 --> 00:06:30.121\nlet me, The code would be\nunder the source directory,\n\n105\n00:06:30.121 --> 00:06:34.710\nand I'm gonna open up secondary,\nfor example.\n\n106\n00:06:34.710 --> 00:06:36.940\nIn this case,\nit was that React component thingy, and\n\n107\n00:06:36.940 --> 00:06:39.445\nthat's where the hello react\nis showing on the screen here.\n\n108\n00:06:39.445 --> 00:06:44.268\nSo let me see if I can get this so\nyou can see both screens, so\n\n109\n00:06:44.268 --> 00:06:46.151\nyou can see the magic.\n\n110\n00:06:46.151 --> 00:06:48.963\nThis might work, so\nif this works out right,\n\n111\n00:06:48.963 --> 00:06:51.630\nI should be able go into here and\ntype in 2.\n\n112\n00:06:51.630 --> 00:06:55.875\nHit Save, and\nthere should be a recompile process, and\n\n113\n00:06:55.875 --> 00:06:59.863\nyou notice, if you can see,\nit says Hello React 2.\n\n114\n00:06:59.863 --> 00:07:03.380\nSo if I do it again,\nif I come over here to my editor.\n\n115\n00:07:05.367 --> 00:07:10.290\n3, it recompiles, and boom, it reloads and\nnow, I’ve got 3 on the screen.\n\n116\n00:07:10.290 --> 00:07:11.850\nSo this is how you actually develop,\n\n117\n00:07:11.850 --> 00:07:15.910\nyou have two monitors or\ntwo parts of the screen.\n\n118\n00:07:15.910 --> 00:07:18.690\nAnd you’re just editing your component\nhere, or whatever you’re editing, for\n\n119\n00:07:18.690 --> 00:07:20.270\nthat matter, and then you hit Save.\n\n120\n00:07:20.270 --> 00:07:23.435\nAnd then when we hit Save, it'll try\nto recompile and refresh the display.\n\n121\n00:07:23.435 --> 00:07:28.010\nSo that’s a really nice, and you can see,\nit was only seconds between builds.\n\n122\n00:07:28.010 --> 00:07:32.630\n&gt;&gt; And that's because, effectively, this\nis producing an incremental build based on\n\n123\n00:07:32.630 --> 00:07:34.920\na diff of what it was\nversus what it is now,\n\n124\n00:07:34.920 --> 00:07:37.630\nand doing everything-\n&gt;&gt; Right, I don't know the full magic of\n\n125\n00:07:37.630 --> 00:07:40.370\nit, but generally, that's the way\nI think of it, is it doesn't\n\n126\n00:07:40.370 --> 00:07:44.500\nhave to rebuild everything, cuz only one\nlittle piece of the code has changed.\n\n127\n00:07:44.500 --> 00:07:48.631\nSo it's gonna be much faster,\nso it took less than a second,\n\n128\n00:07:48.631 --> 00:07:52.608\nwhereas the full build was\nmaybe a full 15 seconds or so.\n\n129\n00:07:52.608 --> 00:07:56.403\n&gt;&gt; Okay John, so I'm sold on this,\nI like this workflow.\n\n130\n00:07:56.403 --> 00:07:58.870\nSometimes I don't always have\na second monitor handy, but\n\n131\n00:07:58.870 --> 00:08:02.175\nwe could always Split the screens,\nassuming that you don't have anything that\n\n132\n00:08:02.175 --> 00:08:04.760\nyou have to look at full screen,\nthen you have some shifting.\n\n133\n00:08:04.760 --> 00:08:08.200\nBut what are some other things that\nwe may want to incorporate into our\n\n134\n00:08:08.200 --> 00:08:11.495\ndevelopment builds that may\njust be helpful to us, right?\n\n135\n00:08:11.495 --> 00:08:13.275\n&gt;&gt; Mm-hm.\n&gt;&gt; Production is paired down,\n\n136\n00:08:13.275 --> 00:08:17.420\nmake it sleek so we can ship it off and\nmake it fast and beautiful.\n\n137\n00:08:17.420 --> 00:08:20.660\nBut during development there may\nadditional tooling and things like that,\n\n138\n00:08:20.660 --> 00:08:23.380\nthat are helpful to us to\nunderstand our application.\n\n139\n00:08:23.380 --> 00:08:27.720\n&gt;&gt; Right, so we were talking about\nthe next one here, that it'll be,\n\n140\n00:08:27.720 --> 00:08:30.700\nit's kind of overkill for\nthis simple example.\n\n141\n00:08:30.700 --> 00:08:35.340\nBut as your project is more and\nmore complex, this'll be\n\n142\n00:08:35.340 --> 00:08:40.740\na helpful tool to kind of understand maybe\nwhy your bundle sizes are getting big.\n\n143\n00:08:40.740 --> 00:08:43.970\nAnd how you might deal with that,\nso I'm gonna do this by example and\n\n144\n00:08:43.970 --> 00:08:45.200\nthen I think it'll be more clear.\n\n145\n00:08:45.200 --> 00:08:51.440\nSo let me go ahead and get out of\nthis one, and I'm gonna go to another\n\n146\n00:08:54.580 --> 00:08:59.920\nfolder, in this case,\nit should be called analyze, analyzer.\n\n147\n00:09:02.080 --> 00:09:05.664\nOkay, so, big picture what this\nis gonna do is it's gonna open,\n\n148\n00:09:05.664 --> 00:09:09.249\nit's gonna give us a tool now,\nthat tells us what exactly is being\n\n149\n00:09:09.249 --> 00:09:12.855\nbundled under a project, so\nwe can actually kind of inspect why.\n\n150\n00:09:12.855 --> 00:09:16.047\nYou know, what's in them you'll\nbe able to see react in there, or\n\n151\n00:09:16.047 --> 00:09:18.042\nyou'll be able to see your code in there,\n\n152\n00:09:18.042 --> 00:09:21.134\nyou'll see all the third party\nlibraries in a very visual form.\n\n153\n00:09:21.134 --> 00:09:24.292\nAnd then you can start making decisions\nabout, well, maybe that doesn't belong\n\n154\n00:09:24.292 --> 00:09:27.450\nthere, down the road there's a more\nadvanced topic called, bundle splitting,\n\n155\n00:09:27.450 --> 00:09:31.180\nwhere you can start thinking,\nI need to pull this out of this bundle.\n\n156\n00:09:31.180 --> 00:09:34.680\nSo this is a set, paved in the way for\nsomething like that in the future, so\n\n157\n00:09:34.680 --> 00:09:39.050\nthe first thing to do is\ninstall another Webpack plugin,\n\n158\n00:09:39.050 --> 00:09:41.120\nlike as we've been doing all along.\n\n159\n00:09:41.120 --> 00:09:45.560\nThis case,\nit's called Webpack-bundle-analyzer.\n\n160\n00:09:45.560 --> 00:09:48.088\nSo I type in npm,\n\n161\n00:09:48.088 --> 00:09:53.878\ninstall webpack-bundle-analyzer\n\n162\n00:09:53.878 --> 00:09:58.410\n--save-dev, all right.\n\n163\n00:09:58.410 --> 00:09:59.770\nSo I had to do that.\n\n164\n00:09:59.770 --> 00:10:03.988\nAnd as has I've been doing,\nis I'll show you the package.json of,\n\n165\n00:10:03.988 --> 00:10:08.299\nafter you do that, your package.json now,\nwill have another line.\n\n166\n00:10:08.299 --> 00:10:13.867\nIn this case, it's webpack,\nI guess you can't see that.\n\n167\n00:10:13.867 --> 00:10:17.340\nBut the one with the thing on it is,\nwebpack-bundle-analyzer, okay?\n\n168\n00:10:17.340 --> 00:10:19.788\nAnd as we've done it before, many times,\n\n169\n00:10:19.788 --> 00:10:23.801\njust adding the package does not do\nanything to your webpack process,\n\n170\n00:10:23.801 --> 00:10:28.515\nyou have to actually edit your webpack\nconfig, so edit, atom webpack.config.\n\n171\n00:10:28.515 --> 00:10:33.531\nLet's make this bigger.\n\n172\n00:10:33.531 --> 00:10:37.330\nSo let's see, right.\n\n173\n00:10:37.330 --> 00:10:40.900\nSo the top here, there's, you know,\nwe've been adding these plugins all along.\n\n174\n00:10:40.900 --> 00:10:44.422\nWe've got another one,\nBundleAnalyzer plugin, and again,\n\n175\n00:10:44.422 --> 00:10:46.025\nyour user documentations.\n\n176\n00:10:46.025 --> 00:10:48.571\nSo this case,\nthey have an extra step to it, but\n\n177\n00:10:48.571 --> 00:10:51.818\nyou just follow their documentation,\nand the very bottom,\n\n178\n00:10:51.818 --> 00:10:56.928\nyou just add a new BundleAnalyzerPlug-in,\nand that’s really all there is to it.\n\n179\n00:10:56.928 --> 00:11:00.070\nAnd then, we'll see what happens\nwhen I run with that in place.\n\n180\n00:11:01.120 --> 00:11:02.190\nSo let’s do this.\n\n181\n00:11:03.880 --> 00:11:06.470\nLet me see this.\n\n182\n00:11:06.470 --> 00:11:11.740\nAnd then here, and I've got my analyzer\nrunning, or I've got my folder up.\n\n183\n00:11:11.740 --> 00:11:16.684\nAnd I'm gonna do run nmp, run start again,\nlike I did a minute ago, and\n\n184\n00:11:16.684 --> 00:11:18.022\nit should spin up.\n\n185\n00:11:18.022 --> 00:11:20.940\n[BLANK AUDIO]\n&gt;&gt; So\n\n186\n00:11:20.940 --> 00:11:22.710\nthis is one of those things\nwhere the initial build is,\n\n187\n00:11:22.710 --> 00:11:26.110\nit's still is going to take a little\nbit of time to get things started.\n\n188\n00:11:26.110 --> 00:11:28.410\nBut now the incremental process,\n\n189\n00:11:28.410 --> 00:11:31.990\nAzure developing is going to help\nspeed up your development clock.\n\n190\n00:11:31.990 --> 00:11:37.810\n&gt;&gt; Right, when you first loaded it,\nwhen you start to type npm run start,\n\n191\n00:11:37.810 --> 00:11:42.260\nit's still gonna take like maybe say,\n30 seconds, so you get your coffee.\n\n192\n00:11:42.260 --> 00:11:45.740\nBut then once you sit down and\nstart working, it's only seconds, so\n\n193\n00:11:45.740 --> 00:11:48.710\nthe first start is just like before.\n\n194\n00:11:48.710 --> 00:11:53.516\nSo here's your app, I must have\nblown my screen up here so, right,\n\n195\n00:11:53.516 --> 00:11:59.640\nthere's my Hello React, but automatically,\nnow they got the bundle in.\n\n196\n00:11:59.640 --> 00:12:02.462\nNotice my browser opened another tab.\n\n197\n00:12:02.462 --> 00:12:06.768\nWhat this tab is, it looks a little\noverwhelming, but what you're staring at\n\n198\n00:12:06.768 --> 00:12:11.273\nhere is, remember you did all those\nrequires and import statements, actually,\n\n199\n00:12:11.273 --> 00:12:14.820\nand you're importing react,\nimporting react-dom, right?\n\n200\n00:12:14.820 --> 00:12:18.190\nSo remember, for example,\nyou imported react-dom.\n\n201\n00:12:18.190 --> 00:12:21.157\nIt's probably in the first\nline of that index.jsx.\n\n202\n00:12:21.157 --> 00:12:24.090\nAnd you can see an entry here,\nit says, react-dom.\n\n203\n00:12:24.090 --> 00:12:25.571\nAnd in fact you can click on it.\n\n204\n00:12:25.571 --> 00:12:26.910\nAnd you can see the size of those.\n\n205\n00:12:26.910 --> 00:12:27.870\nI don't think I can blow this up.\n\n206\n00:12:27.870 --> 00:12:33.200\nBut this is, in this case it's 593\nkilobytes big, that's kinda big.\n\n207\n00:12:33.200 --> 00:12:37.451\nNow we're not in production build\nright now, so everything's kinda fat.\n\n208\n00:12:37.451 --> 00:12:42.289\nBut the idea is, you can actually\nzoom around this interface and see,\n\n209\n00:12:42.289 --> 00:12:45.210\nwell, what's all in my build.\n\n210\n00:12:45.210 --> 00:12:48.703\nAnd there's react development,\nthere's some URL, so\n\n211\n00:12:48.703 --> 00:12:53.665\nthese are all dependency libraries, and\nmaybe react is just depending on them.\n\n212\n00:12:53.665 --> 00:12:58.330\nSo it's not terribly useful here cuz\nthere's not much we can do about this.\n\n213\n00:12:58.330 --> 00:12:59.900\nWe're basically doing a simple react that.\n\n214\n00:12:59.900 --> 00:13:03.390\nBut what's gonna happen is,\nyou're gonna have a project with maybe,\n\n215\n00:13:03.390 --> 00:13:07.960\nthroughout the whole app,\nyou may have like 100 dependencies.\n\n216\n00:13:07.960 --> 00:13:12.120\nSome pages have forms on them, some\npages maybe have YouTube videos on it.\n\n217\n00:13:12.120 --> 00:13:14.680\nThere's all these different\ntools you're gonna use.\n\n218\n00:13:14.680 --> 00:13:17.544\nAnd if you're sort of are not careful,\nwhat can happen is,\n\n219\n00:13:17.544 --> 00:13:21.000\nif you bundle everything together\ninto one giant bundle file, right?\n\n220\n00:13:21.000 --> 00:13:23.190\nThat bundle file will be really,\nreally big.\n\n221\n00:13:23.190 --> 00:13:27.220\nAnd the problem is you may\nnot need that functionality.\n\n222\n00:13:27.220 --> 00:13:30.430\nWhen you first load the home page of\nyour screen, maybe you only need react,\n\n223\n00:13:30.430 --> 00:13:32.830\nyou don't need all those\nother fancy tools.\n\n224\n00:13:32.830 --> 00:13:36.160\nAnd so if you're not careful,\nyour bundle's too big, so\n\n225\n00:13:36.160 --> 00:13:38.580\nwhen you first load your homepage,\nit's really slow.\n\n226\n00:13:38.580 --> 00:13:41.130\nThat's cuz it has to load all\nthe stuff that it doesn't need now,\n\n227\n00:13:41.130 --> 00:13:44.380\nbut as you gonna need they'd be on,\nas a person clicks through your app.\n\n228\n00:13:44.380 --> 00:13:47.070\nSo there's a thing called the,\nbundle splitting,\n\n229\n00:13:47.070 --> 00:13:49.780\nand, again,\nthat's a more of an advanced topic.\n\n230\n00:13:49.780 --> 00:13:52.240\nYou won't hit that right off the bat, but\n\n231\n00:13:52.240 --> 00:13:55.030\nthat's something you can start using\na tool like this to say, wait a minute,\n\n232\n00:13:55.030 --> 00:13:57.570\nthat thing,\nI don't think I need that in this bundle.\n\n233\n00:13:57.570 --> 00:14:00.577\nAnd then you can sorta go back in your\ncode, and change the way you've coded\n\n234\n00:14:00.577 --> 00:14:04.190\nsomething, so that you split that\nstuff out into different bundle files.\n\n235\n00:14:04.190 --> 00:14:06.008\nAnd dynamically load it as they need it.\n\n236\n00:14:06.008 --> 00:14:08.510\nOkay, so that's another cool tool.\n\n237\n00:14:08.510 --> 00:14:12.314\n&gt;&gt; Now John, this makes me think\nof like changing versions and\n\n238\n00:14:12.314 --> 00:14:16.346\nwhen I'm looking at this and\nthe actual load process version,\n\n239\n00:14:16.346 --> 00:14:20.705\nstatic assets, sometimes I've\nhad trouble with browser caches.\n\n240\n00:14:20.705 --> 00:14:24.145\nWhere I think an app's working,\nand then when I go to deploy it,\n\n241\n00:14:24.145 --> 00:14:28.755\nit doesn't actually work because my\nbrowser had cached an asset of some sort.\n\n242\n00:14:28.755 --> 00:14:33.115\nAn old version that has now broken,\nand a new version, so it may be.\n\n243\n00:14:33.115 --> 00:14:35.552\nIs that something that we need\nto concern ourselves here,\n\n244\n00:14:35.552 --> 00:14:37.265\nor that we can make sure does not occur?\n\n245\n00:14:37.265 --> 00:14:40.105\nCuz sometimes I've struggled with that,\ndisable cache, hard reset, and\n\n246\n00:14:40.105 --> 00:14:41.305\nall these shenanigans.\n\n247\n00:14:41.305 --> 00:14:43.055\nCan we automate that portion?\n\n248\n00:14:43.055 --> 00:14:47.085\n&gt;&gt; Right, so the big,\nthe kind of big picture here,\n\n249\n00:14:47.085 --> 00:14:51.760\nright, is that these files\ntend to be fairly big.\n\n250\n00:14:51.760 --> 00:14:57.870\nSo your first inclination is, I don't\nwant the end-user to have to reload this,\n\n251\n00:14:57.870 --> 00:15:00.010\nevery time they hit the website,\n\n252\n00:15:00.010 --> 00:15:04.740\nyou don't want them to have to pull\ndown these big JavaScript files.\n\n253\n00:15:04.740 --> 00:15:05.750\nOkay, so that's the problem.\n\n254\n00:15:05.750 --> 00:15:09.543\nSo then you search, okay, I am going to\nset my cache, tell my server to say, okay,\n\n255\n00:15:09.543 --> 00:15:12.740\nbrowser, keep those files for\na long time, say, a week.\n\n256\n00:15:12.740 --> 00:15:14.280\nSo I don't have to do that.\n\n257\n00:15:14.280 --> 00:15:20.110\nWell, then what happens is you change\nthe app and you told everybody to\n\n258\n00:15:20.110 --> 00:15:24.800\njust keep a copy of the file for a week,\nand then the customer loads your page and\n\n259\n00:15:24.800 --> 00:15:28.850\nboom, they're looking at the old code,\nnot the new code that you fixed.\n\n260\n00:15:28.850 --> 00:15:31.080\nYou try to get the customer\nto hit refresh.\n\n261\n00:15:31.080 --> 00:15:32.480\nThat's not going to happen.\n\n262\n00:15:32.480 --> 00:15:35.820\nThat's a mess, so\nyou want to have your cake and eat it too.\n\n263\n00:15:35.820 --> 00:15:39.110\nYou want them to be able to cache those\nfiles for some long period of time,\n\n264\n00:15:39.110 --> 00:15:43.080\nbut somehow you want to be\nable to break that cache\n\n265\n00:15:43.080 --> 00:15:44.929\nwhen you want them to get a new version.\n\n266\n00:15:45.990 --> 00:15:48.170\nIn some terms,\nthey call that cash busting.\n\n267\n00:15:49.320 --> 00:15:54.336\nAnd so there's a trick to this, the broad\ntrick, and we're gonna implement it here,\n\n268\n00:15:54.336 --> 00:15:57.306\nis the browser cache isn't\nbased on the file name.\n\n269\n00:15:57.306 --> 00:16:00.438\nSo if you give them\na different file name And\n\n270\n00:16:00.438 --> 00:16:06.580\neven if he told that cache his file for\n100 years or however long, right?\n\n271\n00:16:06.580 --> 00:16:09.170\nBut if you give him a different file name,\nthe different files.\n\n272\n00:16:09.170 --> 00:16:12.740\nSo the browser will then say well,\nI got a new file.\n\n273\n00:16:12.740 --> 00:16:16.690\nSo the general idea is what\nyou do is you make it so\n\n274\n00:16:16.690 --> 00:16:21.350\nthat your index.html in itself, well\nthat one needs to kinda always be new,\n\n275\n00:16:21.350 --> 00:16:23.000\nbecause that's what's\npointing to all the files.\n\n276\n00:16:23.000 --> 00:16:27.810\nSo you always tell your web server,\nalways give them a new fresh index.html,\n\n277\n00:16:27.810 --> 00:16:30.610\nwhich is a tiny little file, every time.\n\n278\n00:16:30.610 --> 00:16:32.680\nSo you'll have to go to your web admin and\n\n279\n00:16:32.680 --> 00:16:36.780\nsay, okay if it's an HTML file, set\nthe caching to basically never cache it.\n\n280\n00:16:36.780 --> 00:16:39.090\nSo that it's always fresh.\n\n281\n00:16:39.090 --> 00:16:44.840\nThen you tell any other resource\nyour JavaScript cache it infinitely.\n\n282\n00:16:44.840 --> 00:16:48.110\nActually, a year I think is\nthe maximum you can cache it.\n\n283\n00:16:48.110 --> 00:16:50.816\nSo which basically means at that point,\n\n284\n00:16:50.816 --> 00:16:55.360\nany file that comes down that's\nJavaScript is kept indefinitely.\n\n285\n00:16:56.370 --> 00:17:00.510\nAnd then the trick is as you\nbuild a new version of your app.\n\n286\n00:17:00.510 --> 00:17:04.036\nSomehow you want to change those\nfilenames of the JavaScript files so\n\n287\n00:17:04.036 --> 00:17:06.710\n.bus to .cache and\nthen you give them the new app.\n\n288\n00:17:06.710 --> 00:17:10.690\nBut that's going to be tedious if you have\nto just change all your names yourself.\n\n289\n00:17:10.690 --> 00:17:13.090\nSo there's a trick where it uses hash,\nthis software,\n\n290\n00:17:13.090 --> 00:17:15.160\nthere's a plugin we can use.\n\n291\n00:17:15.160 --> 00:17:17.220\nFunctionality we can put in.\n\n292\n00:17:17.220 --> 00:17:23.220\nThat will take a hash name of a hash which\nis kind of a signature of the file so that\n\n293\n00:17:23.220 --> 00:17:28.150\nif the file ever changes, the hash number\nchanges, and that's part of the filename.\n\n294\n00:17:28.150 --> 00:17:32.800\nEvery time you change something meaningful\nin your app, there's a new functionality,\n\n295\n00:17:32.800 --> 00:17:37.400\nthe hash will change, customer gets\na new filename, they get a new version.\n\n296\n00:17:37.400 --> 00:17:39.870\nSo I think it's maybe\nbest to see by example.\n\n297\n00:17:39.870 --> 00:17:40.860\nThere's a lot of words there.\n\n298\n00:17:40.860 --> 00:17:43.960\nSo we'll just do it by example here, and\n\n299\n00:17:43.960 --> 00:17:47.950\nwhat we're gonna do is go\nto a different folder.\n\n300\n00:17:47.950 --> 00:17:50.410\nIn this case, it's called hash.\n\n301\n00:17:50.410 --> 00:17:54.540\nAgain a hash is basically like\na string signature of a file and\n\n302\n00:17:54.540 --> 00:18:00.270\nI believe all I have to do is Edit,\nwebpack, config.\n\n303\n00:18:00.270 --> 00:18:01.340\nSo, webpack.\n\n304\n00:18:03.360 --> 00:18:05.310\nOkay, so let's look at this and\nsee what's changed.\n\n305\n00:18:05.310 --> 00:18:06.860\nI didn't add any plug ins.\n\n306\n00:18:08.670 --> 00:18:10.140\nThis is all the same.\n\n307\n00:18:10.140 --> 00:18:13.580\nAnd the main difference here is.\n\n308\n00:18:13.580 --> 00:18:15.090\nI did notice something\nelse different here too.\n\n309\n00:18:16.630 --> 00:18:19.410\nOne of the thing I just noticed\nout of the corner of my eye,\n\n310\n00:18:19.410 --> 00:18:20.960\nbut we'll come back to it.\n\n311\n00:18:20.960 --> 00:18:24.770\nIt has to do with this line devtool but\nlet's skip that for the second.\n\n312\n00:18:24.770 --> 00:18:28.600\nWhat I wanted to look at\nhere in particular was this\n\n313\n00:18:28.600 --> 00:18:31.260\nline here which is too long.\n\n314\n00:18:31.260 --> 00:18:34.460\nI think now I can see it on the screen.\n\n315\n00:18:35.780 --> 00:18:40.520\nOkay, so this is where I'm now\nusing my node environment, here.\n\n316\n00:18:40.520 --> 00:18:44.450\nThis is a called a [INAUDIBLE] operator\nif you're not familiar in JavaScript,\n\n317\n00:18:44.450 --> 00:18:47.800\nthis basically says it's kind of the short\nhand version of the if statement.\n\n318\n00:18:47.800 --> 00:18:51.840\nSo it says, if the node environment\nis equal to the production,\n\n319\n00:18:53.090 --> 00:18:58.180\nright, then the result should be name,\nhash and bundle.\n\n320\n00:18:59.940 --> 00:19:03.560\nIf otherwise,\nit should be just named bundle.js.\n\n321\n00:19:03.560 --> 00:19:06.240\nAnd if you recall from\nour previous example,\n\n322\n00:19:06.240 --> 00:19:09.570\nwe always had a name of the file\nthat was being in the bundle.\n\n323\n00:19:09.570 --> 00:19:13.780\nIt was always just name bundle.js,\nnot, not this other option.\n\n324\n00:19:13.780 --> 00:19:19.020\nWhen I'm in development mode, this hashing\ntakes a little effort, it takes time.\n\n325\n00:19:19.020 --> 00:19:24.500\nWhen you're in development mode, you just\nwant to use the old name bundled JS.\n\n326\n00:19:24.500 --> 00:19:25.530\nWhen you're in production,\n\n327\n00:19:25.530 --> 00:19:29.920\nyou want to create an extra this\nhash thing jammed in there.\n\n328\n00:19:29.920 --> 00:19:32.700\nIf I ever make a change,\nthe file names change.\n\n329\n00:19:32.700 --> 00:19:36.200\nThat was done basically,\nwith this hash business here.\n\n330\n00:19:36.200 --> 00:19:39.270\nNo new plugins, right?\n\n331\n00:19:39.270 --> 00:19:42.240\nSo, what's gonna happen is when I run\nproduction, we'll see it by example.\n\n332\n00:19:42.240 --> 00:19:46.720\nSince, we're in this file,\none other change i also made, I forgot,\n\n333\n00:19:46.720 --> 00:19:50.200\nit was another development optimization.\n\n334\n00:19:50.200 --> 00:19:54.930\nBuilding those source maps, takes a lot of\neffort to produce really clean source maps\n\n335\n00:19:56.000 --> 00:19:58.470\nthat may double your build time.\n\n336\n00:19:58.470 --> 00:20:01.540\nAnd when you're trying to do live\ncoding you're trying to go for\n\n337\n00:20:01.540 --> 00:20:05.590\nfast not necessarily\nsuper clean source maps.\n\n338\n00:20:05.590 --> 00:20:09.900\nSo what I'm doing there's all\nthese flavors of source maps,\n\n339\n00:20:09.900 --> 00:20:11.960\nand one of the recommended ones is this.\n\n340\n00:20:11.960 --> 00:20:15.470\nIt sounds kinda silly but\nit's called cheap eval source map.\n\n341\n00:20:15.470 --> 00:20:17.400\nIt's in the documentation for webpack.\n\n342\n00:20:17.400 --> 00:20:21.490\nIt's basically sort of a source map,\nbut not perfect, but\n\n343\n00:20:21.490 --> 00:20:24.558\nenough that you can troubleshoot.\n\n344\n00:20:24.558 --> 00:20:26.210\nIt's not perfect.\n\n345\n00:20:26.210 --> 00:20:29.560\nIt's ten times faster than\nbuilding a full blown source map.\n\n346\n00:20:29.560 --> 00:20:31.930\nI did the same trick with\nthis ternary operator.\n\n347\n00:20:31.930 --> 00:20:33.840\nI basically said, I'm in production.\n\n348\n00:20:34.910 --> 00:20:36.110\nI want the real source map.\n\n349\n00:20:36.110 --> 00:20:38.430\nI'm willing to pay the price to build.\n\n350\n00:20:38.430 --> 00:20:41.740\nBut if I'm in development mode, I'm more\nabout speed and I'm using the cheap.\n\n351\n00:20:41.740 --> 00:20:47.290\nSo it's the same reasoning about this\nhash and bundle, the hash business.\n\n352\n00:20:47.290 --> 00:20:48.680\nOkay so yeah.\n\n353\n00:20:48.680 --> 00:20:51.180\n&gt;&gt; So just real quick John.\n\n354\n00:20:51.180 --> 00:20:55.070\nIs the square brackets and these naming\nparameters inside of our webpack config.\n\n355\n00:20:55.070 --> 00:20:56.650\nThese are all internal to webpack.\n\n356\n00:20:56.650 --> 00:20:59.490\nI was going to make sure that I\nam understanding that correctly.\n\n357\n00:20:59.490 --> 00:21:02.240\n&gt;&gt; That's not some sort of\nfancy new job script thing.\n\n358\n00:21:02.240 --> 00:21:05.540\nThat's a syntax used by webpack.\n\n359\n00:21:05.540 --> 00:21:09.740\nThese place holder for\nthe name placeholder for the hash.\n\n360\n00:21:09.740 --> 00:21:12.790\nSo that's Webpack.\n\n361\n00:21:12.790 --> 00:21:15.110\nYeah, it is getting confusing now.\n\n362\n00:21:15.110 --> 00:21:16.480\nThe language is changing so fast.\n\n363\n00:21:16.480 --> 00:21:18.190\nI'll see something like this, and\n\n364\n00:21:18.190 --> 00:21:21.730\nI'll go, is that some new\nJavaScript I never heard of before?\n\n365\n00:21:21.730 --> 00:21:24.030\nOr is that something\nlike just a string that?\n\n366\n00:21:24.030 --> 00:21:25.670\nSo in this case, it's just a string.\n\n367\n00:21:25.670 --> 00:21:26.520\nIt's a Webpack thing.\n\n368\n00:21:27.570 --> 00:21:29.420\nLet's go ahead and use this.\n\n369\n00:21:29.420 --> 00:21:33.090\nThe way we're going to use this\nis to run it in production,\n\n370\n00:21:33.090 --> 00:21:36.050\nbecause that's what\nwe're trying to look at.\n\n371\n00:21:36.050 --> 00:21:38.890\nI'm going to hash$ npm run build.\n\n372\n00:21:38.890 --> 00:21:42.100\n&gt;&gt; So, John, I just want to make\nsure that I understand this.\n\n373\n00:21:42.100 --> 00:21:43.700\nNow that we're using a production build,\n\n374\n00:21:43.700 --> 00:21:46.160\nwe're actually should see\na different file name?\n\n375\n00:21:46.160 --> 00:21:48.990\nThen just the main.bundle.js, correct?\n\n376\n00:21:48.990 --> 00:21:50.110\n&gt;&gt; Correct.\nSo yeah before,\n\n377\n00:21:50.110 --> 00:21:56.930\neverything was in the main.bundle.js, and\nnow and actually our build just finished,\n\n378\n00:21:56.930 --> 00:22:00.990\nand you can see now the file\nname is actual now main, and\n\n379\n00:22:00.990 --> 00:22:07.390\nthis funny looking number, .bundle.js so\nthat's the hash that we were using,\n\n380\n00:22:07.390 --> 00:22:11.940\nand every time I change my code, unless\nI change my code that stays the same.\n\n381\n00:22:11.940 --> 00:22:13.870\nIf I ever change the code\nthat hash changes.\n\n382\n00:22:13.870 --> 00:22:20.770\nAnd that's what's gonna bust that\ncash in the end users browser.\n\n383\n00:22:20.770 --> 00:22:24.103\nAnd just to see it also more explicitly,\n\n384\n00:22:24.103 --> 00:22:28.130\nIf I go into the dist folder and\nmake this bigger.\n\n385\n00:22:30.630 --> 00:22:34.508\nLs.\n\n386\n00:22:39.412 --> 00:22:43.060\nSo you can see now used to be index.html.\n\n387\n00:22:43.060 --> 00:22:47.080\nThen there was main.bundle.js,\nmain.bundle.js.map.\n\n388\n00:22:47.080 --> 00:22:48.860\nNow I've got the extra hash file.\n\n389\n00:22:48.860 --> 00:22:52.010\nSo that's what you now can\ndeliver to your web server, and\n\n390\n00:22:52.010 --> 00:22:56.780\nthen every time you change your code,\nyou'll deliver essentially new files.\n\n391\n00:22:56.780 --> 00:23:00.450\nAnd you'll get rid of the old files and\nyou put these up.\n\n392\n00:23:00.450 --> 00:23:03.720\nBut the file names will be different,\nso they'll bust that cache.\n\n393\n00:23:03.720 --> 00:23:05.000\nSo that was the whole\npoint of this exercise.\n\n394\n00:23:06.100 --> 00:23:10.040\n&gt;&gt; So\nJohn this is starting to make sense to me.\n\n395\n00:23:10.040 --> 00:23:12.350\nThis is something that's automated\nI don't have to worry about it.\n\n396\n00:23:12.350 --> 00:23:15.490\nI don't have to managing caches and\nthings like that.\n\n397\n00:23:15.490 --> 00:23:21.320\nBut in the development processes, a lot of\ntimes I've run into it works on machine,\n\n398\n00:23:21.320 --> 00:23:22.710\nI keep my browser fairly up to date.\n\n399\n00:23:22.710 --> 00:23:26.730\nI deploy something, I've used one of\nthese new features during transpolation.\n\n400\n00:23:27.760 --> 00:23:30.460\nAnd then it breaks for somebody else.\n\n401\n00:23:30.460 --> 00:23:34.870\nIs that because I need maybe a polyfill or\na shim, or something like that?\n\n402\n00:23:34.870 --> 00:23:40.180\nAnd is that capability, is that something\nwe can put into our build process?\n\n403\n00:23:40.180 --> 00:23:40.760\n&gt;&gt; Right.\n\n404\n00:23:40.760 --> 00:23:46.710\nSo actually, we did that transpolation\nstuff, I think, in the last episode.\n\n405\n00:23:46.710 --> 00:23:53.070\nAnd what that did, was it converted all\nthose arrow functions to functions.\n\n406\n00:23:53.070 --> 00:24:00.463\nIt turned those costs into bars and\nthere was one thing, it didn't do.\n\n407\n00:24:00.463 --> 00:24:03.309\nSo there's some new language\nfeatures in ES2015.\n\n408\n00:24:03.309 --> 00:24:07.815\nThere are actual, more complex things,\nlike good example is promises or\n\n409\n00:24:07.815 --> 00:24:09.930\nthat's the main one, actually.\n\n410\n00:24:10.940 --> 00:24:15.180\nAnd so the problem is that\nthe transpiler only can do so much.\n\n411\n00:24:15.180 --> 00:24:18.460\nIt doesn't actually,\njust kind of like a syntax changing.\n\n412\n00:24:18.460 --> 00:24:20.800\nIt doesn't actually add new functionality.\n\n413\n00:24:20.800 --> 00:24:24.790\nSo, the same company that makes\nthe Babble, they make a polyfill,\n\n414\n00:24:24.790 --> 00:24:25.945\nwhich is like a backfiller.\n\n415\n00:24:25.945 --> 00:24:30.940\nI think it's called babel-polyfill.\n\n416\n00:24:30.940 --> 00:24:36.040\nAnd what it does, it adds in all\nthe ES2015 features that are more like,\n\n417\n00:24:36.040 --> 00:24:37.560\nmore functionality.\n\n418\n00:24:37.560 --> 00:24:40.820\nAnd typically is a good practice\nif you're gonna be transpiling.\n\n419\n00:24:40.820 --> 00:24:44.140\nYou're doing it because you're\ntrying to support IE11, for example.\n\n420\n00:24:44.140 --> 00:24:47.621\nSo it's also important to put in\nthat polyfill and it's as simple as,\n\n421\n00:24:47.621 --> 00:24:49.686\nlet's go ahead and just do it by example.\n\n422\n00:24:52.318 --> 00:24:52.906\nOkay.\n\n423\n00:24:52.906 --> 00:24:55.990\nSo I believe it's in the polyfill folder.\n\n424\n00:24:58.460 --> 00:25:00.746\nOkay.\nSo the first thing you do,\n\n425\n00:25:00.746 --> 00:25:03.203\nI believe is add babel-polyfill.\n\n426\n00:25:03.203 --> 00:25:07.133\nSo you're gonna type npm\ninstall babel-polyfill and\n\n427\n00:25:07.133 --> 00:25:12.440\nthen this time instead of saving\n[INAUDIBLE], I'm going to save, right?\n\n428\n00:25:13.470 --> 00:25:17.740\nThe distinction is this is actually going\nto be deployed as part of my project.\n\n429\n00:25:17.740 --> 00:25:19.450\nIt's going to be in my code.\n\n430\n00:25:19.450 --> 00:25:20.970\nIt's not a build process thing.\n\n431\n00:25:20.970 --> 00:25:25.230\nSo I'm gonna do save instead of save dev,\nhit Enter and\n\n432\n00:25:25.230 --> 00:25:28.610\nas before, it goes into your package.json.\n\n433\n00:25:28.610 --> 00:25:34.890\nAnd this time you'll notice that, under\ndependencies, now it says babel-polyfill.\n\n434\n00:25:34.890 --> 00:25:37.364\nCuz that's where it belongs\nalong with react and react-dom.\n\n435\n00:25:38.690 --> 00:25:40.170\nNow, this is not really a build thing.\n\n436\n00:25:40.170 --> 00:25:41.820\nThis is more about your source code.\n\n437\n00:25:41.820 --> 00:25:44.230\nSo, the way you implement this,\nis you just go into your source code.\n\n438\n00:25:44.230 --> 00:25:48.635\nAnd, let me open index.jsx.\n\n439\n00:25:50.360 --> 00:25:51.210\nAnd, so\n\n440\n00:25:52.610 --> 00:25:55.450\nactually I had commented out because I\nwanted to show you that you can add it.\n\n441\n00:25:55.450 --> 00:25:57.570\nSo, before I didn't\nhave this extra import.\n\n442\n00:25:57.570 --> 00:25:58.990\nSo now, I just uncomment this.\n\n443\n00:25:58.990 --> 00:26:04.390\nI type, at import babel-polyfill and\nI build and let’s see what it looks like.\n\n444\n00:26:06.320 --> 00:26:13.990\nSo I just added the package and\nthen imported it into my index.jsx and\n\n445\n00:26:13.990 --> 00:26:21.390\npolyfill yarn run start.\n\n446\n00:26:21.390 --> 00:26:26.560\nSo by the way if you wanna as a habit\nthere I typed in yarn instead\n\n447\n00:26:26.560 --> 00:26:28.730\nof I don't know if we talked about yarn.\n\n448\n00:26:28.730 --> 00:26:31.910\nSo npm is the package\nmanager that comes with node.\n\n449\n00:26:31.910 --> 00:26:34.210\nFacebook made one called yarn,\n\n450\n00:26:34.210 --> 00:26:38.620\nwhich was an improved one about a year and\na half ago.\n\n451\n00:26:38.620 --> 00:26:43.320\nSo, a lot of people switched using\nyarn for their package management.\n\n452\n00:26:43.320 --> 00:26:44.950\nInstead of typing npm, they used yarn.\n\n453\n00:26:44.950 --> 00:26:47.100\nIt was pretty much seamless.\n\n454\n00:26:47.100 --> 00:26:49.700\nNow, since then npm and\nnode improved on npm.\n\n455\n00:26:49.700 --> 00:26:52.420\nSo you could actually switch back.\n\n456\n00:26:52.420 --> 00:26:54.500\nBut I haven't made a habit\nof switching back yet.\n\n457\n00:26:54.500 --> 00:27:01.470\nSo I still use yarn, but you can use npm\nnow, as all the features that yarn did.\n\n458\n00:27:01.470 --> 00:27:05.174\nSo I'm gonna do npm run start.\n\n459\n00:27:05.174 --> 00:27:09.890\nSo what I'm gonna do is it shouldn't\nreally have any functionality difference\n\n460\n00:27:09.890 --> 00:27:15.600\ncuz we weren't using promises or\nI'm not using IE 11, but we can see with\n\n461\n00:27:15.600 --> 00:27:21.450\nthe babel analyzer that it actually did\ninject some more extra code in my project.\n\n462\n00:27:21.450 --> 00:27:25.210\nSo it's loading right now.\n\n463\n00:27:25.210 --> 00:27:30.690\nThere's my analyzer and if I look in here,\nsee if I can click on this here.\n\n464\n00:27:30.690 --> 00:27:32.129\nSee this core.js?\n\n465\n00:27:32.129 --> 00:27:35.697\nThis wasn't there before and\nif you look carefully down here,\n\n466\n00:27:35.697 --> 00:27:38.270\nhere's that promisy\nthing I told you above.\n\n467\n00:27:38.270 --> 00:27:41.800\nES6 is another term for ES2015.\n\n468\n00:27:41.800 --> 00:27:45.400\nSo there's a chunk of code that I\ninserted now that wasn't there before.\n\n469\n00:27:45.400 --> 00:27:51.110\nAnd it's back filling some of these\nfeatures which are ES2015 features.\n\n470\n00:27:51.110 --> 00:27:55.130\nEven if you're running IE11 it\nnow knows how to do promises.\n\n471\n00:27:56.140 --> 00:27:58.020\nSo that's what the point of all this is.\n\n472\n00:27:58.020 --> 00:28:02.220\n&gt;&gt; So this is a global import that is\nproviding some of the functionality that\n\n473\n00:28:02.220 --> 00:28:04.240\nwas not available on older browsers.\n\n474\n00:28:04.240 --> 00:28:07.414\nThat you may be using because\nES2015 implemented them and\n\n475\n00:28:07.414 --> 00:28:11.329\nshould be available [CROSSTALK]\n&gt;&gt; I guess technically you wouldn't have\n\n476\n00:28:11.329 --> 00:28:15.770\nto include this unless it's relatively\nsmall, maybe like 20 or 30K.\n\n477\n00:28:15.770 --> 00:28:19.540\nYou wouldn't have to use it if\nyou weren't using promises.\n\n478\n00:28:19.540 --> 00:28:24.300\nBut the problems then will be well some of\nyour imported libraries might be using and\n\n479\n00:28:24.300 --> 00:28:25.800\nyou didn't know it.\n\n480\n00:28:25.800 --> 00:28:29.040\nOr you may start using it cuz you've\ngot to become a better developer and\n\n481\n00:28:29.040 --> 00:28:33.655\nto switch using promises, and as a habit,\nit's probably worth 20K to save yourself\n\n482\n00:28:33.655 --> 00:28:37.700\nto grief to just put it in right\nat the beginning of the project.\n\n483\n00:28:37.700 --> 00:28:41.010\nSo, that is the end of this lesson, and\n\n484\n00:28:41.010 --> 00:28:43.800\nwe're gonna focus on some\nother topics in the next one.\n\n485\n00:28:43.800 --> 00:28:44.850\nSo.\n\n486\n00:28:44.850 --> 00:28:47.590\n&gt;&gt; John, thank you so much for\nilluminating the fact that I\n\n487\n00:28:47.590 --> 00:28:50.870\ndon't have to necessarily wait for a full\nproduction build to test out things.\n\n488\n00:28:50.870 --> 00:28:53.190\nAnd alive reloading is definitely handy.\n\n489\n00:28:53.190 --> 00:28:56.110\nBut there are also a couple other tips and\ntricks in there that\n\n490\n00:28:56.110 --> 00:28:59.060\nare probably gonna make your\napplications all the more better.\n\n491\n00:28:59.060 --> 00:29:01.590\nBut for this episode we are definitely\nrunning low on time, but\n\n492\n00:29:01.590 --> 00:29:03.760\nwe got more intro to\nWebPack coming at you.\n\n493\n00:29:03.760 --> 00:29:07.760\nBut for now, signing off for DevProTV,\nI've been your host Justin Dennison.\n\n494\n00:29:07.760 --> 00:29:08.730\n&gt;&gt; This is John Tucker.\n\n495\n00:29:08.730 --> 00:29:11.336\n&gt;&gt; And we'll see you next time.\n\n496\n00:29:11.336 --> 00:29:16.909\n[MUSIC]\n\n497\n00:29:16.909 --> 00:29:20.700\n[BLANK AUDIO]\n\n",
          "vimeoId": "240543574"
        },
        {
          "description": "In this episode, Justin and John explore the use of webpack to manage styling assets as well as provide transformations on the CSS of the application. John also demonstrates the use of webpack to manage images.",
          "length": "1482",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-6-1-1-leaving-with-style-102717-PGM.00_24_36_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-6-1-1-leaving-with-style-102717-PGM.00_24_36_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtowebpack/techskills-introtowebpack-6-1-1-leaving-with-style-102717-PGM.00_24_36_28.Still001-sm.jpg",
          "title": "Leaving with Style",
          "transcript": "WEBVTT\n\n1\n00:00:00.026 --> 00:00:10.026\n[MUSIC]\n\n2\n00:00:12.917 --> 00:00:16.562\nGreetings everyone, and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.562 --> 00:00:19.496\nI'm your host, Justin Dennison,\nand in today's episode, well,\n\n4\n00:00:19.496 --> 00:00:21.180\nwe're coming back with more webpack.\n\n5\n00:00:21.180 --> 00:00:25.096\nAnd in particular we're gonna be\nlooking at some, well, other styles and\n\n6\n00:00:25.096 --> 00:00:25.976\nstatic assets.\n\n7\n00:00:25.976 --> 00:00:28.162\nAnd here to help us along in that\nendeavor is Mr. John Tucker.\n\n8\n00:00:28.162 --> 00:00:29.333\nHow you doing today, John?\n\n9\n00:00:29.333 --> 00:00:29.935\n&gt;&gt; Doing great.\n\n10\n00:00:29.935 --> 00:00:33.967\n&gt;&gt; So John, up until this point\nwe've been looking at JavaScript and\n\n11\n00:00:33.967 --> 00:00:35.989\nJSX as part of our build process.\n\n12\n00:00:35.989 --> 00:00:38.671\nBut there's some other\nstatic assets like CSS.\n\n13\n00:00:38.671 --> 00:00:42.334\nWell, when I say static that\nmay be an over generalization.\n\n14\n00:00:42.334 --> 00:00:43.379\nAnd images and the source.\n\n15\n00:00:43.379 --> 00:00:46.959\nSo how does that play\ninto the webpack story?\n\n16\n00:00:46.959 --> 00:00:49.855\n&gt;&gt; Right, so far we've only been\ntalking about JavaScript and\n\n17\n00:00:49.855 --> 00:00:52.866\nobviously when you're building webpages,\nyou want styles,\n\n18\n00:00:52.866 --> 00:00:55.330\nyou want to put in images,\nall the kinds of things.\n\n19\n00:00:55.330 --> 00:00:58.030\nAnd so we need to do that.\n\n20\n00:00:58.030 --> 00:00:59.940\nSo we're gonna just do it by example.\n\n21\n00:00:59.940 --> 00:01:02.028\nAnd we're gonna first talk about CSS and\n\n22\n00:01:02.028 --> 00:01:04.189\nhow do we get CSS worked\nin to our project.\n\n23\n00:01:04.189 --> 00:01:06.240\nSo let's go ahead and do our example.\n\n24\n00:01:06.240 --> 00:01:12.960\nAnd here we're gonna be using an example\ncalled CSS, obviously enough.\n\n25\n00:01:12.960 --> 00:01:15.360\nAnd as we did before,\nthere's gonna be different loaders.\n\n26\n00:01:15.360 --> 00:01:18.870\nWe need to do loaders to\nhandle those kinds of assets.\n\n27\n00:01:18.870 --> 00:01:22.126\nSo we're gonna add them,\n\n28\n00:01:22.126 --> 00:01:27.458\nnpm install css-loader --save-dev,\n\n29\n00:01:27.458 --> 00:01:30.871\nEnter, okay, we do that.\n\n30\n00:01:30.871 --> 00:01:36.809\nAnd then npm install style-loader --\n\n31\n00:01:36.809 --> 00:01:41.005\nsave-dev, and hit Enter.\n\n32\n00:01:41.005 --> 00:01:43.573\nAnd as before if look in your webpack,\n\n33\n00:01:43.573 --> 00:01:47.359\nyour package.json,\nyou'll now see two new entries.\n\n34\n00:01:47.359 --> 00:01:50.620\nThere's the CSS loader and style loader.\n\n35\n00:01:50.620 --> 00:01:55.480\nYou start to build up these third\nparty modules pretty quick.\n\n36\n00:01:55.480 --> 00:02:00.089\nThose both together will be what we're\ngonna use to do our CSS integration.\n\n37\n00:02:00.089 --> 00:02:04.646\nSo the next thing we wanna do is change\nour webpack.config to the use those.\n\n38\n00:02:04.646 --> 00:02:08.515\nAnd oops, Style,\n\n39\n00:02:10.512 --> 00:02:13.679\nAnd [INAUDIBLE], okay.\n\n40\n00:02:13.679 --> 00:02:16.104\nWhat am I doing here?\n\n41\n00:02:16.104 --> 00:02:18.557\ncd, css, not style.\n\n42\n00:02:18.557 --> 00:02:21.780\natom webpack.\n\n43\n00:02:21.780 --> 00:02:24.220\nOkay, so now this time,\n\n44\n00:02:24.220 --> 00:02:27.570\nthe way this gets inserted is\nactually there's a built in way.\n\n45\n00:02:27.570 --> 00:02:30.240\nYou notice I don't have\nan extra entry to the top, but\n\n46\n00:02:30.240 --> 00:02:32.350\nI'm putting in new rules, okay?\n\n47\n00:02:32.350 --> 00:02:33.670\nSo this is a little different.\n\n48\n00:02:33.670 --> 00:02:35.750\nAgain, the documentation\nwill tell you how to use it.\n\n49\n00:02:35.750 --> 00:02:39.208\nAnd the section starts\noff with a new test.\n\n50\n00:02:39.208 --> 00:02:43.063\nIt says look for\nanything that is a CSS file, right?\n\n51\n00:02:43.063 --> 00:02:48.796\nAnd in this case, instead of using Babel,\nright, it's gonna use a combination of.\n\n52\n00:02:48.796 --> 00:02:52.530\nSo this is like an ordered\nlist of loaders, and\n\n53\n00:02:52.530 --> 00:02:55.310\nthe order does matter in this case,\nby the way.\n\n54\n00:02:55.310 --> 00:02:58.410\nThis starts off with style-loader and\ncss-loader.\n\n55\n00:02:58.410 --> 00:03:02.266\nWhat's kind of weird, is the way it really\nworks, is it works from last to first.\n\n56\n00:03:02.266 --> 00:03:05.179\nSo it's kind of opposite of\nthe way I would think of it, but.\n\n57\n00:03:05.179 --> 00:03:10.053\nSo what's gonna happen is whenever it hits\na CSS file, it's gonna run css-loader,\n\n58\n00:03:10.053 --> 00:03:13.371\nwhich understands CSS, and\nit's going to basically do,\n\n59\n00:03:13.371 --> 00:03:15.487\nget your CSS ready to be injected in.\n\n60\n00:03:15.487 --> 00:03:20.141\nAnd then style-loader does\nthe last little step which injects\n\n61\n00:03:20.141 --> 00:03:23.227\nthe style into your HTML or into your DOM.\n\n62\n00:03:23.227 --> 00:03:25.691\nSo the CSS is what processes the CSS and\n\n63\n00:03:25.691 --> 00:03:28.930\nstyle is what actually\ninjects it into your code.\n\n64\n00:03:28.930 --> 00:03:30.757\n&gt;&gt; So John, the CSS files,\n\n65\n00:03:30.757 --> 00:03:35.542\nthese are being looked at by file\nextension of how you used them not\n\n66\n00:03:35.542 --> 00:03:41.203\nnecessarily file extension of like on\nthe actual system directory, right?\n\n67\n00:03:41.203 --> 00:03:42.683\nAm I understanding that right?\n\n68\n00:03:42.683 --> 00:03:45.648\n&gt;&gt; Well we'll see what it is\nwhen you go to import the file.\n\n69\n00:03:45.648 --> 00:03:48.046\n&gt;&gt; Right.\n&gt;&gt; Just like you would import JavaScript,\n\n70\n00:03:48.046 --> 00:03:50.768\nit's the extension to the file\nthat you're importing.\n\n71\n00:03:50.768 --> 00:03:52.772\n&gt;&gt; Okay.\n&gt;&gt; So in the example we'll see that.\n\n72\n00:03:52.772 --> 00:03:54.899\nSo we've got a webpack config done.\n\n73\n00:03:54.899 --> 00:03:58.057\nThere's no other changes,\nit's just adding this one block,\n\n74\n00:03:58.057 --> 00:04:01.250\nsaying when you see a CSS file,\ndo this, okay?\n\n75\n00:04:01.250 --> 00:04:03.918\nLet's go ahead and\nopen up our source file.\n\n76\n00:04:03.918 --> 00:04:08.580\nAnd look to add some CSS and then we'll\nbuild it and see what it looks like.\n\n77\n00:04:08.580 --> 00:04:13.282\nSo if I go to source, so\nfirst thing I have a new CSS file here.\n\n78\n00:04:13.282 --> 00:04:16.119\nSo let's look at it real quick.\n\n79\n00:04:16.119 --> 00:04:18.143\nI'm trying to keep it super simple.\n\n80\n00:04:18.143 --> 00:04:21.091\nIn fact I think I just do.\n\n81\n00:04:21.091 --> 00:04:26.214\nI set the background color to black,\nand I set my text to white on the body.\n\n82\n00:04:26.214 --> 00:04:28.030\nThat's pretty straightforward.\n\n83\n00:04:28.030 --> 00:04:29.600\nJust kinda invert the color scheme, right?\n\n84\n00:04:29.600 --> 00:04:30.962\nOkay, so that's that.\n\n85\n00:04:30.962 --> 00:04:34.847\nAnd then the way you actually bring it in.\n\n86\n00:04:38.935 --> 00:04:42.212\nCuz just having the CSS file\nthere doesn't do anything, and\n\n87\n00:04:42.212 --> 00:04:44.404\nI think I opened up the wrong file again.\n\n88\n00:04:44.404 --> 00:04:46.665\natom index.jsx.\n\n89\n00:04:48.910 --> 00:04:51.335\nRight, so\nbefore I didn't have any CSS entries.\n\n90\n00:04:51.335 --> 00:04:55.976\nBut see here, I just import it\nas if it was a JavaScript file,\n\n91\n00:04:55.976 --> 00:04:58.071\nsay import.index.css.\n\n92\n00:04:58.071 --> 00:05:03.490\nAnd what that's gonna do is that webpack\nwill see that this is a CSS file.\n\n93\n00:05:03.490 --> 00:05:07.170\nIt'll run those extra commands on it\nwhich then causes it to be injected\n\n94\n00:05:07.170 --> 00:05:08.570\ninto my code.\n\n95\n00:05:08.570 --> 00:05:10.534\nSo that's really all there is to it.\n\n96\n00:05:10.534 --> 00:05:13.080\nAnd the nice thing about this\nis it's in your main ability.\n\n97\n00:05:13.080 --> 00:05:18.100\nYou don't have to separately maintain your\nCSS file outside of your bill process,\n\n98\n00:05:18.100 --> 00:05:20.740\nit's part of your source code, okay.\n\n99\n00:05:20.740 --> 00:05:22.830\nSo all we need to do is run it and\nsee what it looks like now.\n\n100\n00:05:24.030 --> 00:05:30.476\nSo we go back to here and\nI'll just do npm run start.\n\n101\n00:05:33.219 --> 00:05:38.367\nAnd give it a second.\n\n102\n00:05:38.367 --> 00:05:42.891\n&gt;&gt; So these, we have to make sure they\nwere running, that the order does matter,\n\n103\n00:05:42.891 --> 00:05:47.712\nbut as you said, it kind of just clicked\nwith me, it's from back to front, right?\n\n104\n00:05:47.712 --> 00:05:49.810\nIt's from last to first.\n\n105\n00:05:49.810 --> 00:05:54.100\nKind of like, you've queued up these\nthings if you're reading from left to\n\n106\n00:05:54.100 --> 00:05:56.910\nright it's on the last, but\nthat's actually what's gonna happen first?\n\n107\n00:05:56.910 --> 00:06:00.020\n&gt;&gt; Yeah, I always have to think\nabout it twice whenever I see it.\n\n108\n00:06:00.020 --> 00:06:02.000\nFor me, it feels like, I should say,\n\n109\n00:06:02.000 --> 00:06:06.640\nit should be the order of which it's\ngonna operate on the files, but it's not.\n\n110\n00:06:06.640 --> 00:06:07.330\nIt's opposite.\n\n111\n00:06:07.330 --> 00:06:08.643\nSo I just think of it as opposite.\n\n112\n00:06:08.643 --> 00:06:09.160\n&gt;&gt; Okay.\n&gt;&gt; And\n\n113\n00:06:09.160 --> 00:06:10.698\nI don't try to think of\nit any other different,\n\n114\n00:06:10.698 --> 00:06:12.287\njust opposite of what I\nnormally would think of.\n\n115\n00:06:12.287 --> 00:06:16.830\n[LAUGH] Okay, so the point here\nis we can now see, obviously,\n\n116\n00:06:16.830 --> 00:06:20.854\nnow we have our black\nbackground with our white text.\n\n117\n00:06:20.854 --> 00:06:22.870\nThat was really all there is to using.\n\n118\n00:06:22.870 --> 00:06:25.325\nNow, one thing that is interesting too.\n\n119\n00:06:25.325 --> 00:06:28.815\nWe should look at,\nwhat does it look like in your build?\n\n120\n00:06:28.815 --> 00:06:33.821\nCuz we looked at it from\nthe perspective of it worked.\n\n121\n00:06:33.821 --> 00:06:37.727\nLet's run npm run build and\nsee what's in our assets.\n\n122\n00:06:42.646 --> 00:06:45.136\nThis is gonna do the production build,\n\n123\n00:06:45.136 --> 00:06:48.691\nwhich is gonna throw it into\nthat distribution folder.\n\n124\n00:06:48.691 --> 00:06:49.880\nI'll give it a second.\n\n125\n00:06:52.376 --> 00:06:57.513\n&gt;&gt; And now if we were to remove that\n.css from our index.jsx, then that\n\n126\n00:06:57.513 --> 00:07:03.880\nwould not be treated as a CSS file as far\nas webpack is concerned, is that correct?\n\n127\n00:07:03.880 --> 00:07:09.375\n&gt;&gt; So, right, I mean,\nin order to get be part of your build,\n\n128\n00:07:09.375 --> 00:07:16.802\nit has to be linked in some fashion to\na file that starts at index.jsx, right?\n\n129\n00:07:16.802 --> 00:07:21.700\nIf you left the file there but remove the\nimport, it's gonna completely ignore it.\n\n130\n00:07:21.700 --> 00:07:23.370\n&gt;&gt; What if I remove the file extension?\n\n131\n00:07:23.370 --> 00:07:28.950\nSo it was ./index.css,\nwhat if I just did ./index?\n\n132\n00:07:28.950 --> 00:07:30.671\nThen that would mess up.\n\n133\n00:07:30.671 --> 00:07:32.820\n&gt;&gt; Then your webpack wouldn't\nknow that was a CSS file and\n\n134\n00:07:32.820 --> 00:07:34.100\nwouldn't treat it as such.\n\n135\n00:07:34.100 --> 00:07:36.590\n&gt;&gt; Okay, okay, that's what I thought,\nI just wanted to make sure.\n\n136\n00:07:36.590 --> 00:07:37.960\n&gt;&gt; Actually, and\nif it doesn't know the kinda thing to do,\n\n137\n00:07:37.960 --> 00:07:39.370\nit would probably generate an error like,\n\n138\n00:07:39.370 --> 00:07:42.270\nI don't know what to do with this kinda\nfile, it's not a js file, it's not a css.\n\n139\n00:07:42.270 --> 00:07:43.530\nI have no idea what to do with it.\n\n140\n00:07:43.530 --> 00:07:46.787\nSo it's gonna like pretty much not work.\n\n141\n00:07:46.787 --> 00:07:52.756\nSo let's look to see what\nthe output folder looks like.\n\n142\n00:07:52.756 --> 00:07:57.755\nNow what's curious here is that\nnormally when you do CSS, right,\n\n143\n00:07:57.755 --> 00:08:01.608\nyou normally have a style\nsheet that's separate.\n\n144\n00:08:01.608 --> 00:08:03.166\nRight, and it's not part of your bundle.\n\n145\n00:08:03.166 --> 00:08:07.382\nIn this case, when it got imported, it all\ngot wrapped up in your main bundle, so\n\n146\n00:08:07.382 --> 00:08:10.854\nall that CSS you did is actually\nall wrapped up in your main bundle.\n\n147\n00:08:10.854 --> 00:08:14.821\nAnd that's because instead of having to\ndeliver all these different resources\n\n148\n00:08:14.821 --> 00:08:19.360\nlike style sheets, Java script files,\nit puts it all back into that bundle.\n\n149\n00:08:19.360 --> 00:08:22.450\nOkay, so that's a little different\ntoo because you may have expected to\n\n150\n00:08:22.450 --> 00:08:26.260\nsee a CSS file here somewhere but it's\nnot going to do that, it's all bundled.\n\n151\n00:08:26.260 --> 00:08:28.909\nOkay, so now we're going to do\nthe same approach with images.\n\n152\n00:08:28.909 --> 00:08:33.542\nNow typical web pages also have some\nstatic images that are part of the project\n\n153\n00:08:33.542 --> 00:08:37.959\nand we want to incorporate that into it so\nthat it somehow gets brought over\n\n154\n00:08:37.959 --> 00:08:41.260\nto this distribution folder so\nthat it gets sent over.\n\n155\n00:08:42.520 --> 00:08:45.313\nAnd you don't want to have to manually\ncopy them into this distribution folder,\n\n156\n00:08:45.313 --> 00:08:47.421\nyou want it to sort of through\nthe build process get in there.\n\n157\n00:08:47.421 --> 00:08:49.490\nSo we're gonna do this by example.\n\n158\n00:08:49.490 --> 00:08:57.080\nAnd we're gonna switch gears to\nthe next folder which is image, okay?\n\n159\n00:08:57.080 --> 00:08:58.907\nAnd what do we need to do?\n\n160\n00:08:58.907 --> 00:09:03.172\nLike anything else we need to add\nsome more loaders to handle images.\n\n161\n00:09:03.172 --> 00:09:09.458\nIn this case it's gonna be\nnpm install file-loader.\n\n162\n00:09:09.458 --> 00:09:15.644\nWe're obviously working with files,\nsave-dev.\n\n163\n00:09:15.644 --> 00:09:18.170\nWe're gonna do also npm install.\n\n164\n00:09:18.170 --> 00:09:22.940\nAnd if you ever wondering, right,\nall the sources are very available here.\n\n165\n00:09:22.940 --> 00:09:23.757\nSo you can see this.\n\n166\n00:09:23.757 --> 00:09:27.032\nnpm install url-loader and\n\n167\n00:09:27.032 --> 00:09:31.678\nwe'll explain what that means, okay?\n\n168\n00:09:31.678 --> 00:09:33.888\nAnd then if we do those, as before,\n\n169\n00:09:33.888 --> 00:09:38.040\nyou'll notice that your package.json\nhas got two new entries.\n\n170\n00:09:38.040 --> 00:09:41.320\nOne is url-loader and one is file-loader.\n\n171\n00:09:41.320 --> 00:09:45.581\nOkay so, we've got that done and again\njust as anything else we need to now edit\n\n172\n00:09:45.581 --> 00:09:48.630\nthe webpack config so\nit knows how to use those loaders.\n\n173\n00:09:50.160 --> 00:09:51.850\nSo, much like the CSS one,\n\n174\n00:09:51.850 --> 00:09:56.230\nit's not actually imported as a plugin but\nit's implemented as a rule.\n\n175\n00:09:56.230 --> 00:10:00.050\nSo now we've got some new rules, okay, so\n\n176\n00:10:00.050 --> 00:10:05.830\nit says test that matches anything\nthat ends in one of these files.\n\n177\n00:10:05.830 --> 00:10:10.340\nSo this is like images,\nsvg's is like a vector image.\n\n178\n00:10:10.340 --> 00:10:12.760\nAll the other ones\nare font files basically,\n\n179\n00:10:12.760 --> 00:10:18.280\nlike eot, ttf, wf,\nthose all come along with font resources.\n\n180\n00:10:18.280 --> 00:10:20.900\nSo it's a run URL loader.\n\n181\n00:10:20.900 --> 00:10:24.198\nBut it has this extra little,\nthis limit thing.\n\n182\n00:10:24.198 --> 00:10:28.340\nAnd that's 10k,\nthat's how you interpret that, of 10 kb.\n\n183\n00:10:28.340 --> 00:10:30.943\nSo what this basically is gonna do,\nthis is,\n\n184\n00:10:30.943 --> 00:10:33.209\nI'm going to say make sure [INAUDIBLE].\n\n185\n00:10:33.209 --> 00:10:36.556\nSo if the file you're bringing in a really\nsmall image, say you have a web page\n\n186\n00:10:36.556 --> 00:10:40.980\nthat's got 100 really small little\ntiny images, they're all like 1k big.\n\n187\n00:10:40.980 --> 00:10:44.184\nYou don't really want your web\nbrowser to have to sit there and\n\n188\n00:10:44.184 --> 00:10:48.210\nchurn through all hundred of these little\nfiles and they're cell is so tiny.\n\n189\n00:10:48.210 --> 00:10:53.240\nSo if they're below 10k, those files get\nconverted into what's called a data URL,\n\n190\n00:10:53.240 --> 00:10:55.480\nand that's what the URL\nloader's gonna do for you.\n\n191\n00:10:55.480 --> 00:10:58.390\nAnd it's gonna inject it\nright into your JavaScript,\n\n192\n00:10:58.390 --> 00:11:01.020\nit's not gonna treat\nit as a separate file.\n\n193\n00:11:01.020 --> 00:11:05.630\nIf the file's over 10K, that's what this\nis set at, then it's like, that's too big,\n\n194\n00:11:05.630 --> 00:11:07.390\nmy bundle will get really big and\n\n195\n00:11:07.390 --> 00:11:12.210\nI don't really want to clog up my\nbundle with a megabyte of an image.\n\n196\n00:11:12.210 --> 00:11:18.330\nIt'll split it out as a file that's\nseparate, that's referenced by your code.\n\n197\n00:11:18.330 --> 00:11:20.939\nSo that's what this file loader,\nURL loading is.\n\n198\n00:11:20.939 --> 00:11:24.250\nURL load is basically in\nline in with the JavaScript.\n\n199\n00:11:24.250 --> 00:11:28.583\nFile loader means it's gonna treat it\nas a file and by having that limit\n\n200\n00:11:28.583 --> 00:11:33.522\nit's gonna let you kind of dynamically\nchange that behavior when it cuts over.\n\n201\n00:11:33.522 --> 00:11:37.190\nAnd we'll do this by example,\nwe'll have one of each kind.\n\n202\n00:11:37.190 --> 00:11:38.990\nSo that's all set up.\n\n203\n00:11:38.990 --> 00:11:43.990\nNow we just got to go into the source\ncode and actually use some images.\n\n204\n00:11:43.990 --> 00:11:48.940\nSo in this project I have,\nin my source I have,\n\n205\n00:11:48.940 --> 00:11:53.170\nsee if I can, I have two images.\n\n206\n00:11:53.170 --> 00:11:58.290\nI have a logo that's 4K,\nwhich is below the 10k limit, but\n\n207\n00:11:58.290 --> 00:12:04.540\nI have a beach image which is 139k\nwhich is bigger than the 10k limit.\n\n208\n00:12:04.540 --> 00:12:08.770\nSo if I import these, I expect logo to\nsomehow get absorbed into the bundle.\n\n209\n00:12:08.770 --> 00:12:13.550\nAnd beach should be separated out cuz I\ndon't wanna blow up my bundle that much.\n\n210\n00:12:13.550 --> 00:12:15.420\nSo how do we use these images?\n\n211\n00:12:15.420 --> 00:12:17.844\nSo index.\n\n212\n00:12:17.844 --> 00:12:22.027\nI think it's in my secondary, actually.\n\n213\n00:12:25.703 --> 00:12:28.170\nSo just like anything in webpack, right?\n\n214\n00:12:29.220 --> 00:12:33.920\nYou do import logo from logo,\nand import beach from beach.\n\n215\n00:12:33.920 --> 00:12:36.690\nAnd so this reference of logo in this case\n\n216\n00:12:36.690 --> 00:12:40.697\nis actually a reference to either\nwhat's called the data URL or\n\n217\n00:12:40.697 --> 00:12:45.080\nit'll be a reference to a file name,\ndepending on which case it lands in.\n\n218\n00:12:45.080 --> 00:12:48.180\nSo you treat those as part\nof the source for your code.\n\n219\n00:12:48.180 --> 00:12:52.082\nYou see down here, where I've got and\nthis is actually technically React but\n\n220\n00:12:52.082 --> 00:12:55.395\nlooks a lot like HTML,\nI've got img src logo and img src beach).\n\n221\n00:12:55.395 --> 00:13:00.664\nAnd it'll automatically decide whether\nthat's a data URL to go in there or\n\n222\n00:13:00.664 --> 00:13:02.428\nmaybe a file reference.\n\n223\n00:13:02.428 --> 00:13:04.990\nSo you don't have to think about that,\nthat's all gonna happen,\n\n224\n00:13:04.990 --> 00:13:06.470\nwebpack is gonna handle that for you.\n\n225\n00:13:07.730 --> 00:13:11.570\nSo, the next step is to run all this and\nsee that it actually did what I expected.\n\n226\n00:13:12.740 --> 00:13:16.792\nAnd so I go back to here.\n\n227\n00:13:16.792 --> 00:13:22.450\nAnd npm run start and\nthat's gonna load up my environment.\n\n228\n00:13:22.450 --> 00:13:23.050\nGive it a second.\n\n229\n00:13:26.180 --> 00:13:29.540\n&gt;&gt; Now I do have a quick question\nwhile this is loading up.\n\n230\n00:13:29.540 --> 00:13:32.794\nSo we installed your URL loader and\nfile loader but\n\n231\n00:13:32.794 --> 00:13:37.440\nour rules only referenced URL loader and\nthat's because of the options\n\n232\n00:13:37.440 --> 00:13:41.329\nparameter that kind of helps\nus make a switch over, right?\n\n233\n00:13:41.329 --> 00:13:41.919\n&gt;&gt; Right.\nSo\n\n234\n00:13:41.919 --> 00:13:46.493\nif you read the instructions on\nURL loader they say, by the way,\n\n235\n00:13:46.493 --> 00:13:51.323\nif you set this option sync it expects\nfile loader to be installed and\n\n236\n00:13:51.323 --> 00:13:56.520\nit's gonna in turn use file loader on\nyour behalf to do the file loading.\n\n237\n00:13:56.520 --> 00:14:00.180\nSo, I didn't have to explicitly do it\ncuz URL loader is gonna do it for me.\n\n238\n00:14:00.180 --> 00:14:04.388\nYou could actually use file loader\ndirectly and say, always do files.\n\n239\n00:14:04.388 --> 00:14:09.169\nBut this is kind of a more of a optimized\napproach where you kind of have it\n\n240\n00:14:09.169 --> 00:14:10.852\nswitch automatically.\n\n241\n00:14:10.852 --> 00:14:12.900\nSo, it was all behind the scenes.\n\n242\n00:14:12.900 --> 00:14:15.510\nSo, this all worked right, I got my logo.\n\n243\n00:14:15.510 --> 00:14:17.450\nAnd I've got my image, right?\n\n244\n00:14:17.450 --> 00:14:18.753\nSo lets do the actual build and\n\n245\n00:14:18.753 --> 00:14:21.269\nsee what the actual output\nlooked like in terms of files.\n\n246\n00:14:21.269 --> 00:14:26.815\nNpm run build and what I'm expecting\nto see is my main bundle right,\n\n247\n00:14:26.815 --> 00:14:31.876\nbut I'm not expecting to see\nlogo because it was below 10K,\n\n248\n00:14:31.876 --> 00:14:37.036\nbut I am expecting to see something\nthat's the image itself for\n\n249\n00:14:37.036 --> 00:14:39.402\nthe beach cuz it was too big.\n\n250\n00:14:39.402 --> 00:14:42.229\nSo it's gonna take another\nabout a second or so.\n\n251\n00:14:42.229 --> 00:14:49.055\nThat's my bundle analyzer,\nnot gonna worry about it right now.\n\n252\n00:14:53.512 --> 00:14:54.140\nLS.\n\n253\n00:14:56.850 --> 00:14:59.100\nSo there's my main bundle and\n\n254\n00:14:59.100 --> 00:15:02.960\nI've only got one J in this case I've got\nthe JPEG and it's got this funny name.\n\n255\n00:15:02.960 --> 00:15:05.728\nAnd that's because it's doing it's own\nhashing routine instead of putting\n\n256\n00:15:05.728 --> 00:15:06.620\nthe name here.\n\n257\n00:15:06.620 --> 00:15:09.740\nSo that way if you actually\nchange the image itself\n\n258\n00:15:09.740 --> 00:15:11.460\nit will actually break your cache too.\n\n259\n00:15:11.460 --> 00:15:15.974\nSo, you know you won't load the wrong\nbeach image if you change out\n\n260\n00:15:15.974 --> 00:15:17.189\nthe beach image.\n\n261\n00:15:17.189 --> 00:15:20.720\nAnd you can see now there's only one file,\nnot two files.\n\n262\n00:15:20.720 --> 00:15:22.541\nSo that basically did what we expected.\n\n263\n00:15:22.541 --> 00:15:25.470\nAnd now if I deploy this,\nI'll have my images.\n\n264\n00:15:25.470 --> 00:15:27.700\nOne being pulled from the bundle and\none being pulled from the spot.\n\n265\n00:15:28.910 --> 00:15:30.440\nSo that's all for that one.\n\n266\n00:15:30.440 --> 00:15:34.890\nThere is one more CSS related\n\n267\n00:15:34.890 --> 00:15:38.830\ntrick we're gonna use and let me get\nit ready and I'll talk about it.\n\n268\n00:15:41.830 --> 00:15:45.600\nOkay, so one of the problems with web\ndevelopment if you've done it in a while.\n\n269\n00:15:45.600 --> 00:15:49.350\nThere are different\nversions of browsers and\n\n270\n00:15:49.350 --> 00:15:54.210\nsome browsers support the new stuff,\nsome things don't support the new stuff.\n\n271\n00:15:54.210 --> 00:15:57.788\nThere was a pattern where the older\nbrowsers would support some of\n\n272\n00:15:57.788 --> 00:16:01.119\nthe new stuff, but\nyou had to do this extra prefix under CSS.\n\n273\n00:16:01.119 --> 00:16:03.932\nDash, dash, I didn't do a lot of this, but\n\n274\n00:16:03.932 --> 00:16:09.270\nyou have to specify something a little bit\ndifferent than, a good example is flex.\n\n275\n00:16:09.270 --> 00:16:14.994\nNormally, you just say flex, but when\nyou use flex on certain versions of IE,\n\n276\n00:16:14.994 --> 00:16:18.400\nyou had to use IE flex or\nsomething like that.\n\n277\n00:16:18.400 --> 00:16:19.815\n&gt;&gt; Or Mas or dash or dash web.\n\n278\n00:16:19.815 --> 00:16:22.200\n&gt;&gt; Aand it's hard to\nremember all those things.\n\n279\n00:16:22.200 --> 00:16:26.480\n&gt;&gt; I just know the prefixes because I\nwould always have to look this up go yeah,\n\n280\n00:16:26.480 --> 00:16:29.310\nthis is in Mozilla at this version range.\n\n281\n00:16:29.310 --> 00:16:31.210\nSo now I need to use the dash mas prefix.\n\n282\n00:16:31.210 --> 00:16:34.060\n&gt;&gt; Right so having to think about\nthat as kind of overwhelming.\n\n283\n00:16:34.060 --> 00:16:37.200\nSo luckily there's a plugin,\nanother webpack plugin\n\n284\n00:16:37.200 --> 00:16:41.810\nthat knows all those rules and\nwill selectively apply those prefixes.\n\n285\n00:16:41.810 --> 00:16:44.480\nSo you just write as if you're\nwriting to modern browsers, and\n\n286\n00:16:44.480 --> 00:16:45.760\nit handles all of the old stuff.\n\n287\n00:16:46.810 --> 00:16:48.590\nSo that's called autoprefixer.\n\n288\n00:16:48.590 --> 00:16:51.741\nSo we'll just go ahead and install it,\nand then we'll just see it in action.\n\n289\n00:16:51.741 --> 00:16:57.422\nSo this is very repetitive,\nbut in this project\n\n290\n00:16:57.422 --> 00:17:02.980\nwe will just do npm\ninstall postcss-loader.\n\n291\n00:17:02.980 --> 00:17:05.740\nSo something to do with css, save dev.\n\n292\n00:17:05.740 --> 00:17:10.156\nAnd we're gonna type in npm\n\n293\n00:17:10.156 --> 00:17:15.533\ninstall autoprefixer save dev.\n\n294\n00:17:15.533 --> 00:17:17.930\nAnd again you know it's hard\nto remember all that so\n\n295\n00:17:17.930 --> 00:17:21.246\nI'm gonna also just show you that if\nyou ever just go the package json.\n\n296\n00:17:21.246 --> 00:17:24.390\nYou'll see autoprefixer here and\n\n297\n00:17:24.390 --> 00:17:29.030\nyou'll also see this post-CSS loader,\nthose were added now.\n\n298\n00:17:29.030 --> 00:17:32.120\nSo that's in the basically, again,\nthat just got into the project.\n\n299\n00:17:32.120 --> 00:17:34.260\nIt doesn't mean we're actually using it.\n\n300\n00:17:34.260 --> 00:17:38.489\nSo the next step is\n[INAUDIBLE] real quick.\n\n301\n00:17:40.911 --> 00:17:44.159\nOkay, so the next thing we want to do\nis edit our webpack config like we\n\n302\n00:17:44.159 --> 00:17:44.840\nnormally do.\n\n303\n00:17:48.284 --> 00:17:51.010\nLet's see, nothing new here.\n\n304\n00:17:51.010 --> 00:17:53.630\nWhere it's gonna come into\nplay is under the CSS.\n\n305\n00:17:53.630 --> 00:18:00.970\nYou recall before we had just two entries\nhere, two loaders, we had style and css.\n\n306\n00:18:00.970 --> 00:18:04.337\nNow we got another loader\ncalled postcss-loader,\n\n307\n00:18:04.337 --> 00:18:06.486\nI have a hard time with this name.\n\n308\n00:18:06.486 --> 00:18:08.406\nCuz it seems like postcss,\n\n309\n00:18:08.406 --> 00:18:14.070\nit actually happens before css-loader\nhappens But they call a postcss.\n\n310\n00:18:14.070 --> 00:18:17.690\nI still haven't got my head around why,\nto me it should be precss-loader.\n\n311\n00:18:17.690 --> 00:18:22.790\nCuz though we read this from bottom up,\nso they're messing with us.\n\n312\n00:18:22.790 --> 00:18:25.050\nBut basically what's gonna happen\nis when it gets your code,\n\n313\n00:18:25.050 --> 00:18:29.600\nit's gonna run through postcss-loader,\nwhich we have to still fully configure.\n\n314\n00:18:29.600 --> 00:18:31.600\nIt's gonna basically do\nsome stuff through css,\n\n315\n00:18:31.600 --> 00:18:35.570\nthen it hands it off to css-loader, then\nit hands it off to style-loader, right.\n\n316\n00:18:35.570 --> 00:18:38.380\nSo, that's all we had to add\nis basically that one block.\n\n317\n00:18:39.380 --> 00:18:43.420\nAnd but we also need to tell\nPostCSS because there's more then,\n\n318\n00:18:43.420 --> 00:18:47.080\nthis is probably the most\ncommon use of munging your CSS.\n\n319\n00:18:47.080 --> 00:18:52.830\nBut there can be other things you might do\nto your CSS before you hand it off to CSS.\n\n320\n00:18:52.830 --> 00:18:56.871\nSo there's a configuration file for\nit, the postcss.\n\n321\n00:18:59.844 --> 00:19:02.451\nAnd in this case I'm basically saying,\n\n322\n00:19:02.451 --> 00:19:06.378\nby the way postcss all you're\ngonna do is use autoprefixer.\n\n323\n00:19:06.378 --> 00:19:11.720\nThis all glues it all together,\nyou're telling postcss what to do, yeah.\n\n324\n00:19:11.720 --> 00:19:15.514\nSo this is very akin to the Babel RC\nthat we've seen in previous episodes.\n\n325\n00:19:15.514 --> 00:19:19.390\nWhere we're saying the transformations\nthat are occurring on JavaScript\n\n326\n00:19:19.390 --> 00:19:22.430\nare using these plugins or\npresets in Babel.\n\n327\n00:19:22.430 --> 00:19:26.000\nBut for CSS it's postCSS that's managing,\n\n328\n00:19:26.000 --> 00:19:29.692\nhey what are you doing to the CSS before\nyou actually like gather it all together.\n\n329\n00:19:29.692 --> 00:19:32.970\n&gt;&gt; You're basically saying post\nCSS you're the one responsible for\n\n330\n00:19:32.970 --> 00:19:36.400\nlunging it and then you have to\ntell it what it needs to do.\n\n331\n00:19:36.400 --> 00:19:37.445\nSo that's all that's happening.\n\n332\n00:19:38.480 --> 00:19:41.280\nSo I think we got the build\nenvironment all ready to go so\n\n333\n00:19:41.280 --> 00:19:44.440\nwe need to actually do something\nthat would trigger this.\n\n334\n00:19:44.440 --> 00:19:48.407\nSo, look at my source code and\n\n335\n00:19:48.407 --> 00:19:53.497\nI am guessing it's in the secondary.\n\n336\n00:19:53.497 --> 00:19:57.658\nYeah, it is inside there already.\n\n337\n00:19:57.658 --> 00:20:00.154\nSo I think I didn't have any,\nso in this case,\n\n338\n00:20:00.154 --> 00:20:04.740\nI have now a secondary CSS that I don't\nthink I had in the earlier example.\n\n339\n00:20:04.740 --> 00:20:08.951\nSo and then let's go look to\nsee what's in secondary.css.\n\n340\n00:20:12.181 --> 00:20:14.870\nAnd all I just used, this is flex.\n\n341\n00:20:14.870 --> 00:20:18.220\nThis is the new way of doing, kind of\n\n342\n00:20:18.220 --> 00:20:22.220\nlining things horizontally kind of nicely\ninstead of having to do those fixed grids.\n\n343\n00:20:22.220 --> 00:20:25.160\nThat's, this is an example that not\nonly would need to be prefixed for\n\n344\n00:20:25.160 --> 00:20:27.240\nlike older versions of the browser.\n\n345\n00:20:27.240 --> 00:20:27.850\nSo I don't have to,\n\n346\n00:20:27.850 --> 00:20:30.800\nnormally you would have to type in\nall those other variations of flex.\n\n347\n00:20:30.800 --> 00:20:33.970\nYou'd have to Google that and\nhere I just say, flex.\n\n348\n00:20:33.970 --> 00:20:34.740\nAnd when we build it,\n\n349\n00:20:34.740 --> 00:20:38.090\nwe'll notice that it will actually have\ndone some stuff behind the scenes.\n\n350\n00:20:38.090 --> 00:20:41.840\nSo the way we'll do this is,\nlet's build it and\n\n351\n00:20:41.840 --> 00:20:47.350\nsee what it does, npm run,\nlet's do the start.\n\n352\n00:20:53.276 --> 00:20:55.690\nWe'll let this load and\nwe're going to do this.\n\n353\n00:20:55.690 --> 00:20:57.850\nThe way we inspect this,\nwe're going to look at dev tools.\n\n354\n00:20:57.850 --> 00:21:00.970\nI'm going to look at the CSS\nthat's actually being used.\n\n355\n00:21:00.970 --> 00:21:05.290\nAnd we should see some other prefixes\nin there that I didn't type in.\n\n356\n00:21:10.407 --> 00:21:12.473\nSo this flex thing,\nI didn't spend a lot of time,\n\n357\n00:21:12.473 --> 00:21:15.440\nthat's what is causing this\nkind of weird stretchy thing.\n\n358\n00:21:15.440 --> 00:21:17.390\nThat's a flex thing.\n\n359\n00:21:17.390 --> 00:21:22.580\nBut again, it's not super pretty,\nbut the point was to keep it simple.\n\n360\n00:21:22.580 --> 00:21:28.440\nAnd I believe the flex was plied to,\nthere it is right there.\n\n361\n00:21:28.440 --> 00:21:30.210\nSo, let me blow this up,\nif I can blow this up.\n\n362\n00:21:33.072 --> 00:21:33.960\nBlew it up too much.\n\n363\n00:21:36.850 --> 00:21:40.400\nHidden over here, so\nall I typed in was display flex.\n\n364\n00:21:40.400 --> 00:21:45.290\nAnd then you notice now that there's two\nextra entries that auto prefix edited as\n\n365\n00:21:45.290 --> 00:21:50.640\ndisplay -webkit.box which\nI wouldn't have known.\n\n366\n00:21:50.640 --> 00:21:53.590\nAnd -ms-flexbox,\nthat's a Microsoft flexbox.\n\n367\n00:21:53.590 --> 00:21:55.353\nSo that's gonna save you a lot of grief.\n\n368\n00:21:55.353 --> 00:21:57.562\nI actually have been burned\nby this a couple of times, so\n\n369\n00:21:57.562 --> 00:21:59.530\nthis has saved my life more recently.\n\n370\n00:21:59.530 --> 00:22:03.880\n&gt;&gt; Now John would something similar\nlike this be used if I was using less or\n\n371\n00:22:03.880 --> 00:22:06.700\nSasS or something of that nature?\n\n372\n00:22:06.700 --> 00:22:12.010\nThat might be a little beyond scope but\nessentially the same rules apply, right?\n\n373\n00:22:12.010 --> 00:22:15.440\nIt's kind of, is there a loader, are the\ntransformations that I need to have?\n\n374\n00:22:15.440 --> 00:22:17.090\nAnd then I just do my thing.\n\n375\n00:22:17.090 --> 00:22:20.350\n&gt;&gt; Yeah, so that kind of leads into\nthe broader point, is that you've kinda\n\n376\n00:22:20.350 --> 00:22:25.790\nnow been exposed to a very repetitive\npattern of, you need to do something.\n\n377\n00:22:25.790 --> 00:22:28.030\nYou find the documentation for it.\n\n378\n00:22:28.030 --> 00:22:32.100\nMore than likely, you're installing\nsome package, some plug in.\n\n379\n00:22:32.100 --> 00:22:35.560\nAnd then you follow their instructions and\nadding it to your webpack.\n\n380\n00:22:35.560 --> 00:22:39.380\nBut since now you own your own webpack\nfile, you can actually do this as you go.\n\n381\n00:22:39.380 --> 00:22:42.160\nSo some of the common things\nyou may want to get into.\n\n382\n00:22:42.160 --> 00:22:45.850\nOne is, obviously, nowadays it's SasS,\nbut you might be using it less.\n\n383\n00:22:46.860 --> 00:22:50.860\nWhich basically let's you\ndo variables in your CSS.\n\n384\n00:22:50.860 --> 00:22:56.130\nWe don't have it in this project but\nyou just basically Google webpack and\n\n385\n00:22:56.130 --> 00:23:00.730\nSasS and you will find the loader\ninstructions on adding it.\n\n386\n00:23:00.730 --> 00:23:03.190\nSome other topics that are more advanced.\n\n387\n00:23:03.190 --> 00:23:05.430\nOne is called bundle splitting and\n\n388\n00:23:05.430 --> 00:23:08.640\nthat has to do with trying to\nkeep your bundle sizes small.\n\n389\n00:23:08.640 --> 00:23:11.190\nThere'll be if you just type in\nwebpack the bundle splitting\n\n390\n00:23:11.190 --> 00:23:13.100\nthere will be a whole tutorial on that.\n\n391\n00:23:13.100 --> 00:23:15.300\nNow you should be ready\nto understand that.\n\n392\n00:23:15.300 --> 00:23:19.810\nThe last topic that kinda falls\nin the advanced category is\n\n393\n00:23:19.810 --> 00:23:24.149\ncalled CSS modules, and\nagain you can read about that.\n\n394\n00:23:24.149 --> 00:23:28.085\nAnd what CSS modules do if you never\nheard of it is sometimes just CSS can You\n\n395\n00:23:28.085 --> 00:23:29.560\nhave namespace problems.\n\n396\n00:23:29.560 --> 00:23:32.469\nIf you have a lot of CSS, and you have to\nthink very creatively about your names.\n\n397\n00:23:32.469 --> 00:23:36.352\nSo you don't run into collisions between\ndifferent parts of your app maybe\n\n398\n00:23:36.352 --> 00:23:38.650\naccidentally using the same name.\n\n399\n00:23:38.650 --> 00:23:42.270\nSo the modules let you kind\nof containerize your CSS, so\n\n400\n00:23:42.270 --> 00:23:46.810\nthat it's only contained\nto a certain module.\n\n401\n00:23:46.810 --> 00:23:49.920\nAnd it keeps it away, so you don't have\nto worry about collisions with you and\n\n402\n00:23:49.920 --> 00:23:51.590\nmaybe some other developer.\n\n403\n00:23:51.590 --> 00:23:54.900\nIt's kinda compartmentalizing\nyour CSS code.\n\n404\n00:23:54.900 --> 00:23:56.930\nThat's all we were gonna talk\nabout though in this intro.\n\n405\n00:23:58.710 --> 00:24:01.720\n&gt;&gt; Well John you've definitely helped,\nwill help me understand on how to take\n\n406\n00:24:01.720 --> 00:24:05.460\nownership of my webpack config and\nhow these all these tools come together.\n\n407\n00:24:05.460 --> 00:24:09.010\nAnd I like that you've shown us that\nthe pattern's effectively the same.\n\n408\n00:24:09.010 --> 00:24:12.910\nYour final loader or\nplug-in that you need, right,\n\n409\n00:24:12.910 --> 00:24:17.601\ntake that kind of composition approach,\nknow these few rules.\n\n410\n00:24:17.601 --> 00:24:21.217\nAnd then start simple build up until you\nhave what you need instead of all this\n\n411\n00:24:21.217 --> 00:24:22.190\nextraneous stuff.\n\n412\n00:24:22.190 --> 00:24:25.100\nWhere you're like I have\nno idea what's going on.\n\n413\n00:24:25.100 --> 00:24:26.400\nSo thank you so much for\n\n414\n00:24:26.400 --> 00:24:29.530\nthat and hopefully this has\ngotten you started with webpack.\n\n415\n00:24:29.530 --> 00:24:31.220\nBut we're gonna go ahead and\nget out of here.\n\n416\n00:24:31.220 --> 00:24:34.480\nSo signing off for DevPro TV,\nI've been your host Justin Dennison.\n\n417\n00:24:34.480 --> 00:24:36.882\n&gt;&gt; I'm John Tucker.\n&gt;&gt; And we'll see you next time.\n\n418\n00:24:36.882 --> 00:24:41.710\n[MUSIC]\n\n",
          "vimeoId": "240544466"
        }
      ],
      "title": "Intro to Webpack"
    }
  ],
  "url": "introwebpack",
  "vLab": false
}
