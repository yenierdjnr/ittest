{
  "description": "In this series, Mark and Justin walk you through the hoops and hurdles of the Java syntax by providing examples and common mistakes and shortcuts you'll be faced with. By the end you'll have an understanding of all of the syntax as well as common Java tools. You will have built feature-filled programs to simplify your life and wrangle the challenges of junior programming jobs, so if you're ready to learn Java as a first or second programming language then join us!",
  "descriptionMD": "In this series, Mark and Justin walk you through the hoops and hurdles of the Java syntax by providing examples and common mistakes and shortcuts you'll be faced with. By the end you'll have an understanding of all of the syntax as well as common Java tools. You will have built feature-filled programs to simplify your life and wrangle the challenges of junior programming jobs, so if you're ready to learn Java as a first or second programming language then join us!",
  "length": "48770",
  "name": "Object Oriented Java",
  "practiceExam": false,
  "subtitle": "Compile yourself a nice hot cup",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "During this episode, Mark and Justin get the Eclipse Integrated Development Environment(IDE) installed and setup. Additionally, they install the Java Development Kit(JDK) that is required for compiling and running Java programs.",
          "length": "1470",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-1-installation_and_setup-053017-PGM.00_29_26_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-1-installation_and_setup-053017-PGM.00_29_26_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-1-installation_and_setup-053017-PGM.00_29_26_11.Still001-sm.jpg",
          "title": "Installation and Setup java",
          "transcript": "",
          "vimeoId": "219885924"
        },
        {
          "description": "In this episode, Justin and Mark doing a quick review of how to write some very basic programs that make use of the main method of a class. Additionally, they discuss the basic usage of Strings, integers, and doubles to create a very simple that displays output based on the previous values.",
          "length": "1413",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-2-language_basics-053017-PGM.00_00_05_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-2-language_basics-053017-PGM.00_00_05_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-2-language_basics-053017-PGM.00_00_05_19.Still001-sm.jpg",
          "title": "Language Basics",
          "transcript": "",
          "vimeoId": "219886296"
        },
        {
          "description": "In this episode, Mark and Justin start discussing the usage of if structures in conjunction with Boolean logic to provide decision-making capabilities to our Java programs.",
          "length": "1329",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-3-control_and_program_flow_if-053017-PGM.00_27_53_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-3-control_and_program_flow_if-053017-PGM.00_27_53_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-3-control_and_program_flow_if-053017-PGM.00_27_53_16.Still001-sm.jpg",
          "title": "Control and Program Flow: if",
          "transcript": "",
          "vimeoId": "219886498"
        },
        {
          "description": "In this episode, Mark and Justin continuing discussing logic and control flow by adding on else constructs with the if construct of Java. Mark demonstrates the use of else as the only construct following the if statement then expands using else-if.",
          "length": "1204",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-4-control_and_program_flow_else-053017-PGM.00_22_52_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-4-control_and_program_flow_else-053017-PGM.00_22_52_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-4-control_and_program_flow_else-053017-PGM.00_22_52_00.Still001-sm.jpg",
          "title": "Control and Program Flow: else",
          "transcript": "",
          "vimeoId": "219886693"
        },
        {
          "description": "In this episode, Mark and Justin show the use of a switch statement handles large amounts of is and else-if statements. Focus on the construction of switches with emphasis on the thought process behind use.",
          "length": "871",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-5-control_and_program_flow_switch-053017-PGM.00_14_19_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-5-control_and_program_flow_switch-053017-PGM.00_14_19_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-5-control_and_program_flow_switch-053017-PGM.00_14_19_26.Still001-sm.jpg",
          "title": "Control and Program Flow: switch",
          "transcript": "",
          "vimeoId": "219885574"
        },
        {
          "description": "In this episode, Mark and Justin explore Java's primitive types that are used to store numeric, boolean, and a single character. Mark illustrates some of the things that may slip you up.",
          "length": "1027",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-6-object_oriented_java-061517-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-6-object_oriented_java-061517-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-6-object_oriented_java-061517-high-sm.jpg",
          "title": "Java Primitive Types",
          "transcript": "",
          "vimeoId": "222352072"
        },
        {
          "description": "In this episode, Mark and Justin explore Java Arrays and ArrayLists. Mark demonstrates the creation of arrays, changing elements in the arrays, retrieving elements from an array, as well how to manage multi-dimensional arrays. Additionally, they compare those array procedures to similar ArrayList procedures.",
          "length": "1349",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-7-arrays_and_arraylists-061517-PGM.00_22_49_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-7-arrays_and_arraylists-061517-PGM.00_22_49_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-7-arrays_and_arraylists-061517-PGM.00_22_49_22.Still001-sm.jpg",
          "title": "Arrays and ArrayLists",
          "transcript": "",
          "vimeoId": "222506039"
        },
        {
          "description": "In this episode, Mark and Justin take a look at loops of all kinds including while, do-while, for, and foreach loops. Mark illustrates the utility and nuanced difference between each of these loop types specifically with regards to Arrays and ArrayLists.",
          "length": "1146",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-8-loops-061517-high.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-8-loops-061517-high-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-8-loops-061517-high-sm.jpg",
          "title": "Loops",
          "transcript": "",
          "vimeoId": "222352573"
        },
        {
          "description": "In this episode, Mark and Justin take a deeper dive in the use of String objects. Mark demonstrates some commonly used String methods as well as takes us on the tour of the documentation.",
          "length": "1664",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-9-strings-061517-PGM.00_27_32_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-9-strings-061517-PGM.00_27_32_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-9-strings-061517-PGM.00_27_32_16.Still001-sm.jpg",
          "title": "Strings",
          "transcript": "",
          "vimeoId": "222506483"
        },
        {
          "description": "In this episode, Mark and Justin take a look at more complex math operations using the Math class.",
          "length": "1325",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-10-math_library-061517-PGM.00_28_21_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-10-math_library-061517-PGM.00_28_21_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-10-math_library-061517-PGM.00_28_21_05.Still001-sm.jpg",
          "title": "Math Library",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.407\n[MUSIC]\n\n2\n00:00:05.407 --> 00:00:08.889\nGreetings, everyone, and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:08.889 --> 00:00:10.268\nI'm your host, Justin Dennison.\n\n4\n00:00:10.268 --> 00:00:13.705\nAnd in today's episode, well,\nwe're touching on a scary topic.\n\n5\n00:00:13.705 --> 00:00:16.590\nWe're still in Java, but\nwe're gonna be talking about math.\n\n6\n00:00:16.590 --> 00:00:21.249\nBut here to alleviate our fears is\nour great are good, our Mark Davis.\n\n7\n00:00:21.249 --> 00:00:22.684\nHow are you doing today Mark?\n&gt;&gt; Pretty good.\n\n8\n00:00:22.684 --> 00:00:24.200\n&gt;&gt; That is good to hear.\n\n9\n00:00:24.200 --> 00:00:27.912\nNow, math, is there anything special\nwe have to do for math in Java or\n\n10\n00:00:27.912 --> 00:00:29.980\nis it just kind of all come baked in.\n&gt;&gt; So\n\n11\n00:00:29.980 --> 00:00:32.740\nI would say generally when\nyou use math in Java as\n\n12\n00:00:32.740 --> 00:00:37.870\nwith most things in programming languages\nyou just got to have to be kinda specific.\n\n13\n00:00:37.870 --> 00:00:41.272\nThere's sort of some weird quarks that\nyou might not expect, like with casting,\n\n14\n00:00:41.272 --> 00:00:42.767\nimplicitly, and stuff like that.\n\n15\n00:00:42.767 --> 00:00:46.894\nWe'll talk more about that, but you just\nsometimes have to be more specific than\n\n16\n00:00:46.894 --> 00:00:50.593\nyou think you might need to be with\na parenthesis, order of operations is\n\n17\n00:00:50.593 --> 00:00:54.130\nsomething that actually happens\noutside of programing languages.\n\n18\n00:00:54.130 --> 00:00:58.011\nWhere again, you just have to be really\nspecific because the computer is just\n\n19\n00:00:58.011 --> 00:00:59.871\ngonna do exactly what you tell it to.\n\n20\n00:00:59.871 --> 00:01:02.908\nIt's not gonna know that what you\nmeant was slightly different from what\n\n21\n00:01:02.908 --> 00:01:03.760\nyou entered.\n\n22\n00:01:03.760 --> 00:01:07.023\nThat's just a major thing to look out for\nwhen we go over this stuff, all right?\n\n23\n00:01:07.023 --> 00:01:10.435\nSo here on my computer we've\ngot the math library here.\n\n24\n00:01:10.435 --> 00:01:12.530\nThe documentation for it.\n\n25\n00:01:12.530 --> 00:01:14.893\nAnd so as you can see, we've got all\nthese different method signatures.\n\n26\n00:01:14.893 --> 00:01:18.876\nWe've got absolute value for double,\nfor float, for integer, for long.\n\n27\n00:01:18.876 --> 00:01:21.105\nSo there's sort of a good\nbit of duplication here.\n\n28\n00:01:21.105 --> 00:01:21.966\nBut really,\n\n29\n00:01:21.966 --> 00:01:27.146\nthere's just a lot of different methods\nthat all involve numbers in some way.\n\n30\n00:01:27.146 --> 00:01:30.800\nAt the top you'll see, we have a couple\ndifferent mathematical constants.\n\n31\n00:01:30.800 --> 00:01:33.827\nE, the base of natural logarithms, and pi,\n\n32\n00:01:33.827 --> 00:01:37.667\nwhich are very significant numbers,\nmathematically.\n\n33\n00:01:37.667 --> 00:01:41.476\nSo when we go in here, let's just get\nrid of all this code from before,\n\n34\n00:01:41.476 --> 00:01:42.970\nwe don't need any of that.\n\n35\n00:01:42.970 --> 00:01:47.980\nSo let's do double d = Math.E like that.\n\n36\n00:01:47.980 --> 00:01:53.080\nAnd we don't need to\nimportant the math library.\n\n37\n00:01:53.080 --> 00:01:56.930\nIt's in java.lang which means\nit's already all imported for us.\n\n38\n00:01:56.930 --> 00:02:00.223\nBut if we access anything in util,\nor the collections, or IO,\n\n39\n00:02:00.223 --> 00:02:02.975\nthat's when we need to go ahead and\nmake our import.\n\n40\n00:02:02.975 --> 00:02:11.027\nSo if we come in here we can\ndo System.out.print1n(d).\n\n41\n00:02:11.027 --> 00:02:15.017\nAnd if you didn't know\nMath.E is gonna refer\n\n42\n00:02:15.017 --> 00:02:19.648\nto something around in\nthe neighborhood of 2.7.\n\n43\n00:02:19.648 --> 00:02:24.660\nAnd so it should go ahead and\nprint that out.\n\n44\n00:02:26.480 --> 00:02:28.503\nI don't like how it skips down like that.\n\n45\n00:02:28.503 --> 00:02:30.040\nBut we get 2.718.\n\n46\n00:02:30.040 --> 00:02:31.313\nWe could round that instead.\n\n47\n00:02:31.313 --> 00:02:34.291\nSo, do round.d, math.round.\n\n48\n00:02:38.510 --> 00:02:42.267\nAnd that is one of the methods in this\nmath class that we're working with today.\n\n49\n00:02:42.267 --> 00:02:44.440\nWe run it again and\nit rounds it to a three.\n\n50\n00:02:44.440 --> 00:02:46.273\nSo this actually just\nreturns in an integer.\n\n51\n00:02:46.273 --> 00:02:50.884\nIf we wanted it in a form of a double or\ndecimal, we would have to cast it back to\n\n52\n00:02:50.884 --> 00:02:55.790\na decimal or do some other math to\nimplicitly cast it back to a double.\n\n53\n00:02:55.790 --> 00:02:58.637\nAll right, cuz this round method is\njust gonna return us an integer.\n\n54\n00:02:58.637 --> 00:03:01.120\nWe can also do some other things.\n\n55\n00:03:01.120 --> 00:03:04.570\nWe could do ciel or we could do floor.\n\n56\n00:03:04.570 --> 00:03:08.529\nAnd when we do floor\nit's just gonna take just\n\n57\n00:03:08.529 --> 00:03:13.334\nthe integer apart from that\ndouble variable, right?\n\n58\n00:03:13.334 --> 00:03:21.230\nSo it sort of gonna strip out\nthe decimal part and you get 2.0.\n\n59\n00:03:21.230 --> 00:03:22.136\nAnd interestingly,\n\n60\n00:03:22.136 --> 00:03:26.250\nyou'll notice that this actually doesn't\nget necessarily returned as an integer.\n\n61\n00:03:26.250 --> 00:03:29.686\nWe still have it in the form of a double\nbecause it's got that 0.0 there.\n\n62\n00:03:29.686 --> 00:03:35.210\nWe could do ceil as well as, C-E-I-L.\n\n63\n00:03:35.210 --> 00:03:35.791\nNot all caps though, like that.\n\n64\n00:03:35.791 --> 00:03:40.340\nRound that, we get 3.0.\n\n65\n00:03:40.340 --> 00:03:43.466\nSo one interesting property, let's say,\n\n66\n00:03:43.466 --> 00:03:49.219\nmaybe we wanted to round to decimal place\nother than just whole integer, right?\n\n67\n00:03:49.219 --> 00:03:54.562\nSo since this math.round\nreturns an integer.\n\n68\n00:03:54.562 --> 00:03:57.835\nWe're gonna have to be a little bit\ncreative in the way we approach\n\n69\n00:03:57.835 --> 00:03:58.480\nthis.\n&gt;&gt; Mark,\n\n70\n00:03:58.480 --> 00:03:59.231\ncan I interject-\n&gt;&gt; Yeah.\n\n71\n00:03:59.231 --> 00:04:00.220\n&gt;&gt; Here real quick?\n\n72\n00:04:00.220 --> 00:04:02.235\nI just wanna make sure I\nunderstand all these pieces.\n\n73\n00:04:02.235 --> 00:04:07.190\nSo we've got floor, ceil, round and\nto some extent those kind of\n\n74\n00:04:07.190 --> 00:04:11.257\nmath together,\ncan we pull those apart a little bit?\n\n75\n00:04:11.257 --> 00:04:14.800\nIf I get floor, round and ceil, aren't\nthey sometimes gonna return the same\n\n76\n00:04:14.800 --> 00:04:18.472\nthings even if they're a different\nfunction calls or different method calls?\n\n77\n00:04:18.472 --> 00:04:19.290\n&gt;&gt; Yeah.\n\n78\n00:04:19.290 --> 00:04:21.362\n&gt;&gt; So, like if I have seal E, right?\n\n79\n00:04:21.362 --> 00:04:22.775\n2.7\n&gt;&gt; Yeah.\n\n80\n00:04:22.775 --> 00:04:28.004\nAnd round of E, which is roughly 2.7,\nI'm gonna get the same thing,\n\n81\n00:04:28.004 --> 00:04:31.460\nbut kinda what are the rules\nthat fall in there?\n\n82\n00:04:31.460 --> 00:04:32.884\nJust to make sure we're\nall on the same basis.\n\n83\n00:04:32.884 --> 00:04:33.437\n&gt;&gt; Yeah, so\n\n84\n00:04:33.437 --> 00:04:36.530\nthe round method is\ngonna return an integer.\n\n85\n00:04:36.530 --> 00:04:42.609\nAnd you can see that if we go in here,\nround returns a static int,\n\n86\n00:04:42.609 --> 00:04:47.121\nbut if we do ceil instead,\nit returns a double.\n\n87\n00:04:47.121 --> 00:04:50.041\nSo ceil and\nfloor are gonna return a double, and\n\n88\n00:04:50.041 --> 00:04:52.670\nround is gonna return an integer, right?\n\n89\n00:04:52.670 --> 00:04:54.270\nAnd that's just something to look out for\n\n90\n00:04:54.270 --> 00:04:57.113\nwhen you're doing this to make sure\nthat you get the right data type back.\n\n91\n00:04:57.113 --> 00:04:59.263\nAnd if you don't get\nthe right data type back,\n\n92\n00:04:59.263 --> 00:05:02.475\nthen you can still get to what you\nwant just by doing a cast real quick.\n\n93\n00:05:02.475 --> 00:05:06.148\nCasting it to integer, or\nwhatever the case may be.\n\n94\n00:05:06.148 --> 00:05:12.957\nSo let's say we had- Instead of E,\nwe had something like this.\n\n95\n00:05:12.957 --> 00:05:17.580\nWe had negative E, and we wanted to\nfind the absolute value of that.\n\n96\n00:05:17.580 --> 00:05:19.953\nThat's pretty simple to do,\nnot all that hard.\n\n97\n00:05:19.953 --> 00:05:25.755\nWe can really just do a little print\nstatement here and do (Math.abs(d)).\n\n98\n00:05:29.514 --> 00:05:30.090\nCool.\n\n99\n00:05:30.090 --> 00:05:31.507\nPrint it.\n\n100\n00:05:31.507 --> 00:05:36.248\nWe just get the absolute value of\nthat negative E from before and\n\n101\n00:05:36.248 --> 00:05:38.854\nthat should work out pretty well.\n\n102\n00:05:38.854 --> 00:05:42.348\nWhat if we wanted to,\n\n103\n00:05:42.348 --> 00:05:47.630\nlet's say d = ceil(d).\n\n104\n00:05:47.630 --> 00:05:53.008\nThis is sort of just a good thing\nto know when you're doing this.\n\n105\n00:05:53.008 --> 00:05:57.623\nIf you have negative number is it gonna\ngo up or down when you use the ceil,\n\n106\n00:05:57.623 --> 00:05:59.221\nthe round and the floor?\n\n107\n00:05:59.221 --> 00:06:03.751\nSo we got -2.7 that we're\nstarting out with here.\n\n108\n00:06:03.751 --> 00:06:08.260\nWe're gonna seal it first, and\nthen we're gonna absolute value.\n\n109\n00:06:08.260 --> 00:06:12.111\nSo why don't we run ceil here,\nwe actually get 2, so\n\n110\n00:06:12.111 --> 00:06:15.632\nit's irrespective of absolute value,\nright?\n\n111\n00:06:15.632 --> 00:06:23.230\nIt's just gonna go up, it's only going\nto sort of increase in value, right?\n\n112\n00:06:23.230 --> 00:06:28.191\nSo it goes from that -2.7 to -2,\nand then we'll call\n\n113\n00:06:28.191 --> 00:06:32.964\nthat absolute value function,\nit goes to 2 from -2.\n\n114\n00:06:32.964 --> 00:06:37.930\nSo if we do same thing with floor,\nwe can show you, it should be -3,\n\n115\n00:06:37.930 --> 00:06:40.856\nbecause it's gonna always round down.\n\n116\n00:06:40.856 --> 00:06:45.850\nWhich in this case seems like it's higher,\nbut it's just a higher absolute value.\n\n117\n00:06:45.850 --> 00:06:48.278\nBecause the negative number,\nshe had positive three as the overall.\n\n118\n00:06:48.278 --> 00:06:53.530\nSo here from doing floor and\nthen printing the absolute value.\n\n119\n00:06:53.530 --> 00:06:55.444\nBut, I already did this before, right?\n\n120\n00:06:55.444 --> 00:07:00.005\nWhat if he wanted to ran to a digit\nother than the one's place,\n\n121\n00:07:00.005 --> 00:07:02.480\nlike hundred's place, sorry.\n\n122\n00:07:02.480 --> 00:07:07.040\nWe can do that, but we gotta be again\npretty creative in the way we handle this.\n\n123\n00:07:07.040 --> 00:07:10.772\nSo let's say we wanted around Math.PI,\n\n124\n00:07:10.772 --> 00:07:15.574\nwhich is sort of the other\nconstant in the Math class.\n\n125\n00:07:15.574 --> 00:07:18.552\nYeah, let's round Math.PI.\n\n126\n00:07:18.552 --> 00:07:20.000\nI'm deleting stuff, okay.\n\n127\n00:07:20.000 --> 00:07:25.039\nSo- I'm gonna do this on separate lines so\n\n128\n00:07:25.039 --> 00:07:28.806\nit's more clear what I'm doing,\nbut let's say d =-\n\n129\n00:07:31.141 --> 00:07:39.045\n100*d, which is really\nthe same as times equals 100,\n\n130\n00:07:39.045 --> 00:07:43.910\nit's fine, d = Math.round(d),\n\n131\n00:07:46.795 --> 00:07:49.953\nThen d = d/100.\n\n132\n00:07:49.953 --> 00:07:53.970\nSo when we do this, let's print it too.\n\n133\n00:07:59.063 --> 00:07:59.775\nCool.\n\n134\n00:07:59.775 --> 00:08:01.398\nLet's run it, see what we got.\n\n135\n00:08:01.398 --> 00:08:05.303\nSo we get 3.14 which is what you\nwould expect when you round PI to\n\n136\n00:08:05.303 --> 00:08:06.855\nthe hundredth's place.\n\n137\n00:08:06.855 --> 00:08:08.330\nWhat if we consolidate some of this code.\n\n138\n00:08:08.330 --> 00:08:11.520\nSo let’s say instead we do it like this.\n\n139\n00:08:12.570 --> 00:08:13.710\nAnd you’re gonna see again.\n\n140\n00:08:13.710 --> 00:08:16.335\nLike I said with this math stuff you have\nto be very specific with what you want\n\n141\n00:08:16.335 --> 00:08:17.042\nfrom your program.\n\n142\n00:08:17.042 --> 00:08:24.520\nSome of the ways the return methods and\nimplicit casting is sort of tricky.\n\n143\n00:08:24.520 --> 00:08:30.161\nSo when we run this we will get something\nwe don’t really expect with 3.0 instead,\n\n144\n00:08:30.161 --> 00:08:32.860\nand this is sort of something\nyou might run into, so,\n\n145\n00:08:32.860 --> 00:08:38.320\nreally what's happening here is this\nmath.round is returning an integer,\n\n146\n00:08:38.320 --> 00:08:41.480\nand we divide that integer\nby another integer.\n\n147\n00:08:41.480 --> 00:08:45.480\nSo really, all we have here is an integer.\n\n148\n00:08:45.480 --> 00:08:49.070\nAnd we're setting this double\nd to be equal to that integer,\n\n149\n00:08:49.070 --> 00:08:53.260\nwhich ends up being three when\nwe round it and all that.\n\n150\n00:08:53.260 --> 00:08:55.571\nKind of problematic, because then\nwhen we print it, it's just 3.0.\n\n151\n00:08:55.571 --> 00:08:59.112\nThe whole point of this was to try to\nround it to two decimal places and\n\n152\n00:08:59.112 --> 00:09:03.020\ninstead, we're just chopping\noff that decimal part entirely.\n\n153\n00:09:03.020 --> 00:09:07.130\nSo, the way to fix this is to make\nsure that you divide by a double so\n\n154\n00:09:07.130 --> 00:09:10.360\nthat it gets casted back to a double.\n\n155\n00:09:10.360 --> 00:09:13.340\nWhen we run this now we get 3.14,\nas expected.\n\n156\n00:09:13.340 --> 00:09:14.530\n&gt;&gt; That is definitely something tricky\n\n157\n00:09:14.530 --> 00:09:15.970\nthat we need to watch out for.\n\n158\n00:09:15.970 --> 00:09:17.850\nSo Matt, that round returns an interger.\n\n159\n00:09:17.850 --> 00:09:21.825\nSeal and flowed the return, all depending\non what their input is at some other\n\n160\n00:09:21.825 --> 00:09:23.914\nfloating point number floor excuse me.\n\n161\n00:09:23.914 --> 00:09:27.943\nSo floor, not float, but\nare there other kind of methods and\n\n162\n00:09:27.943 --> 00:09:31.530\nactually I want to take at\nlook at those constants.\n\n163\n00:09:31.530 --> 00:09:33.496\nWhy are you capitalizing\nthose constants like that?\n\n164\n00:09:33.496 --> 00:09:34.089\n&gt;&gt; Okay, so\n\n165\n00:09:34.089 --> 00:09:36.981\nyes you alluded to this\ncapitalized Pi here and\n\n166\n00:09:36.981 --> 00:09:42.010\nthis is sort of, again if we try with\nlowercase it is not going to work.\n\n167\n00:09:42.010 --> 00:09:45.850\nConstants in the Java language\nalways have that final specifier.\n\n168\n00:09:45.850 --> 00:09:49.597\nBecause if we go into here and\nclick on math.pye in the documentation,\n\n169\n00:09:49.597 --> 00:09:51.950\nit's a public static final double.\n\n170\n00:09:51.950 --> 00:09:54.860\nSo some of those aren't necessarily really\nimportant right now, but it's static,\n\n171\n00:09:54.860 --> 00:09:59.060\nmeaning it belongs to the math class, and\nit's final meaning it can't be changed.\n\n172\n00:09:59.060 --> 00:10:01.990\nIt's a final value,\nthe value of pie is never gonna change,\n\n173\n00:10:01.990 --> 00:10:03.810\nit's a mathematical constant.\n\n174\n00:10:03.810 --> 00:10:07.090\nSo again, with these constants\nwe're always gonna call them final,\n\n175\n00:10:07.090 --> 00:10:09.604\nwe're always gonna name\nthem things with capitals.\n\n176\n00:10:09.604 --> 00:10:14.048\nI believe in the previous episode,\nI actually didn't do that, it's not gonna\n\n177\n00:10:14.048 --> 00:10:18.759\nnecessarily through our compiler when you\ncreate your own double and you don't give\n\n178\n00:10:18.759 --> 00:10:23.000\nit the final modifier and you don't give\nit the, or if you do give it the final\n\n179\n00:10:23.000 --> 00:10:27.210\nmodifier and you still give it\na lowercase name, is just improper code.\n\n180\n00:10:27.210 --> 00:10:29.370\nIt looks bad, makes me look bad,\nsorry for it.\n\n181\n00:10:29.370 --> 00:10:31.146\nBut here in this case,\n\n182\n00:10:31.146 --> 00:10:36.009\nall of the constants in the Java\nlanguage that are preexisting\n\n183\n00:10:36.009 --> 00:10:39.240\nAre just going to be all caps.\n&gt;&gt; Yep.\n\n184\n00:10:39.240 --> 00:10:40.312\nAll right so that clarifies it.\n\n185\n00:10:40.312 --> 00:10:44.115\nSo it’s a convention that we should always\nfollow just to make our code look like\n\n186\n00:10:44.115 --> 00:10:48.140\nother people’s code and again more\nreadable and easier to talk about.\n\n187\n00:10:48.140 --> 00:10:52.840\nNow, we’ve seen round Don't see the floor,\nbut are there other things,\n\n188\n00:10:52.840 --> 00:10:54.880\nI'm coming back to this.\n\n189\n00:10:54.880 --> 00:10:57.900\nLet's say that I wanted to build\na simulation, like a particle simulation.\n\n190\n00:10:57.900 --> 00:11:00.400\nI need trigonometric functions and\nstuff like that.\n\n191\n00:11:00.400 --> 00:11:03.210\nIs that something that\nis available to me or\n\n192\n00:11:03.210 --> 00:11:07.290\nmaybe even I need random seeds for\nthis simulation that I'm building.\n\n193\n00:11:07.290 --> 00:11:10.510\nIs that available to me through the math?\n\n194\n00:11:10.510 --> 00:11:12.054\nWell, class.\n&gt;&gt; Yeah, so\n\n195\n00:11:12.054 --> 00:11:15.343\nthere's a lot of utility provided\nto us by this math class.\n\n196\n00:11:15.343 --> 00:11:18.350\nLet's go ahead and\nget rid of some of that.\n\n197\n00:11:18.350 --> 00:11:19.970\nYeah, okay,\nlet's get rid of the whole thing.\n\n198\n00:11:19.970 --> 00:11:28.764\nSo let's say we wanted to return,\nMath.cosine And\n\n199\n00:11:28.764 --> 00:11:35.110\nthis is going to be in radians by the way.\n\n200\n00:11:35.110 --> 00:11:39.460\nSo Math.PI.\n\n201\n00:11:39.460 --> 00:11:43.620\nSo the cosine of Pi if you didn't\nknow should be -1 when we run this.\n\n202\n00:11:43.620 --> 00:11:47.290\n-1.0 because it is a double.\n\n203\n00:11:47.290 --> 00:11:52.420\nSo we can give it something\nlike Math.PI/2 Should be zero.\n\n204\n00:11:54.570 --> 00:11:58.340\nWhich interestingly enough\nhere we get a round off error.\n\n205\n00:11:58.340 --> 00:12:02.526\nWe get a really small number in\nexponential notation is just sort of\n\n206\n00:12:02.526 --> 00:12:07.776\na consequence of the way we do things here\nin Java with the floating point notation.\n\n207\n00:12:07.776 --> 00:12:11.256\nThat you sort of get this really tiny\nnumber that isn't quite zero but\n\n208\n00:12:11.256 --> 00:12:12.576\nit is very close to it and so\n\n209\n00:12:12.576 --> 00:12:16.476\nif you wanted to handle this you could\nround to the nearest hundredths place,\n\n210\n00:12:16.476 --> 00:12:20.090\nthousandths place or whatever as we\nshowed previously in the episode.\n\n211\n00:12:20.090 --> 00:12:23.126\nAs you might expect there is also sine and\ntangent, so\n\n212\n00:12:23.126 --> 00:12:27.107\nwe could do it with sine and\nwe would get 1.0 If we do it with tangent,\n\n213\n00:12:27.107 --> 00:12:30.770\nI'm not exactly sure what we get,\nwe might get undefined, no.\n\n214\n00:12:31.890 --> 00:12:32.440\nYeah, yeah, we do,\n\n215\n00:12:32.440 --> 00:12:35.670\nwe get undefined basically,\nwe get a really big number, right?\n\n216\n00:12:35.670 --> 00:12:43.570\nSo what if we tried it with pi over 4,\nwe're gonna get essentially 1, right?\n\n217\n00:12:43.570 --> 00:12:46.520\nSo sort of what you would expect\nfrom your trigonometry class,\n\n218\n00:12:46.520 --> 00:12:49.650\nhowever much of it you remember I've\nalways been pretty good at math.\n\n219\n00:12:49.650 --> 00:12:50.900\nI've always liked math.\n\n220\n00:12:50.900 --> 00:12:52.520\nSome people might not.\n\n221\n00:12:52.520 --> 00:12:55.570\nIt certainly depends on the application\nyou're using the Java language for.\n\n222\n00:12:55.570 --> 00:12:57.440\nIf you are doing something\nthat's math intensive,\n\n223\n00:12:57.440 --> 00:12:58.740\nyou might need to know all of these thing.\n\n224\n00:12:58.740 --> 00:13:00.790\nYou might need to know a subset of them.\n\n225\n00:13:00.790 --> 00:13:05.282\nYou might not really use this\nstuff that much, but generally,\n\n226\n00:13:05.282 --> 00:13:07.994\nit's important to know some of this,\n\n227\n00:13:07.994 --> 00:13:12.930\nespecially like pi The trig basic\nroots and powers I would say.\n\n228\n00:13:12.930 --> 00:13:14.120\nSo let's do some more of that, right?\n\n229\n00:13:14.120 --> 00:13:17.010\nSo let's say we had something\nthat was in degrees and\n\n230\n00:13:17.010 --> 00:13:20.980\nwe wanted to convert it into\nradians instead, right?\n\n231\n00:13:20.980 --> 00:13:25.160\nSo let's do toRadians.\n\n232\n00:13:25.160 --> 00:13:28.269\nAnd we're gonna have to do Math.toRadians,\nmy bad.\n\n233\n00:13:30.180 --> 00:13:34.910\nAnd 45 cuz that's pi over 4.\n\n234\n00:13:34.910 --> 00:13:38.630\nAnd we get 1 just the same.\n\n235\n00:13:38.630 --> 00:13:42.630\nSo takes this integer or\nwe could give it a double instead.\n\n236\n00:13:42.630 --> 00:13:46.050\nAnd it's just gonna\nconvert it into radians.\n\n237\n00:13:46.050 --> 00:13:51.394\nAnd then we run that tangent function\non that output there, double that\n\n238\n00:13:51.394 --> 00:13:57.060\nwe get from that More things we can do,\nwe can do powers, we can do roots.\n\n239\n00:13:57.060 --> 00:13:58.614\nI'm just going to show you\nsome of those real quick.\n\n240\n00:13:58.614 --> 00:14:07.490\nSo, double x equals Math.pow.\n\n241\n00:14:07.490 --> 00:14:12.750\nSo, we could do 3.5\nsquared Just like this.\n\n242\n00:14:12.750 --> 00:14:15.580\nSo the first parameter is\nthe base of the power.\n\n243\n00:14:15.580 --> 00:14:18.245\nAnd the second parameter is going to\nbe the exponent we're raising it to.\n\n244\n00:14:18.245 --> 00:14:20.260\nSo what should this be?\n\n245\n00:14:20.260 --> 00:14:23.050\nThis is like somewhere around 10,\nI guess, a little more maybe.\n\n246\n00:14:24.180 --> 00:14:25.530\nWe're not outputting it.\n\n247\n00:14:25.530 --> 00:14:31.923\nYeah, we're gonna have to do that\nactually, system.app.printline x Run that.\n\n248\n00:14:31.923 --> 00:14:36.678\nYeah, 12.25, pretty much we what\nwould expect from squaring that 3.5.\n\n249\n00:14:36.678 --> 00:14:40.955\nWe could raise it to a higher power\nas well, it doesn't have to be two.\n\n250\n00:14:40.955 --> 00:14:44.235\nLet's give it something\na little ridiculous but not so\n\n251\n00:14:44.235 --> 00:14:46.240\nridiculous that we crash right?\n\n252\n00:14:46.240 --> 00:14:49.260\nSo really big number when we raise\nsomething to the 12th power,\n\n253\n00:14:49.260 --> 00:14:50.820\npretty much as we would expect.\n\n254\n00:14:50.820 --> 00:14:54.414\nWe could also raise things to negative\npowers, which is gonna make them smaller.\n\n255\n00:14:54.414 --> 00:14:56.724\nWe could raise things\nto fractional powers,\n\n256\n00:14:56.724 --> 00:14:58.680\nwhich is like taking the square root.\n\n257\n00:14:58.680 --> 00:15:03.430\nSo if we did something to the .5 power,\nthat would be\n\n258\n00:15:03.430 --> 00:15:08.050\njust like taking the square root, and\nwe can show that it is here in a second.\n\n259\n00:15:08.050 --> 00:15:17.400\nSo the square root of 3.5 is\napparently 1.87 Sounds good to me.\n\n260\n00:15:17.400 --> 00:15:18.880\nSo there's also a Math.sqrt,\n\n261\n00:15:18.880 --> 00:15:22.110\nand we can show that we are gonna\nget the same result from the two.\n\n262\n00:15:26.160 --> 00:15:26.840\nCool.\n\n263\n00:15:26.840 --> 00:15:28.260\nLooks good.\n\n264\n00:15:28.260 --> 00:15:30.299\nRun that, and we get the same thing.\n\n265\n00:15:31.310 --> 00:15:35.301\nSo yeah, it all works the same way,\nwhether you do this math.pow to the 0.5,\n\n266\n00:15:35.301 --> 00:15:37.297\nwhich is generally what I would do just so\n\n267\n00:15:37.297 --> 00:15:40.079\nI don't have to remember all\nthese different methods.\n\n268\n00:15:40.079 --> 00:15:42.551\nBut math.sqrt might\nactually be more clear for\n\n269\n00:15:42.551 --> 00:15:44.600\nyou if you were reading over this code.\n\n270\n00:15:44.600 --> 00:15:48.128\nOne more thing I actually did wanna cover,\n\n271\n00:15:48.128 --> 00:15:51.770\nyou do the natural log\nwith .log like that.\n\n272\n00:15:51.770 --> 00:15:54.110\nSo looking at the second one here,\nthat's the natural log of 3.5.\n\n273\n00:15:54.110 --> 00:15:57.930\nYou can also do log base 10 like that.\n\n274\n00:15:59.410 --> 00:16:01.060\nRun that real quick.\n\n275\n00:16:01.060 --> 00:16:03.710\nIt's a smaller number I guess.\n\n276\n00:16:03.710 --> 00:16:06.235\nAnd I guess we should talk about randoms,\nright?\n\n277\n00:16:06.235 --> 00:16:07.421\n&gt;&gt; Yeah, I know I've had,\n\n278\n00:16:07.421 --> 00:16:10.537\nI've been commissioned to write\nsimulations from time to time.\n\n279\n00:16:10.537 --> 00:16:13.183\nAnd well,\nif you're doing any type of statistics or\n\n280\n00:16:13.183 --> 00:16:17.940\neven just particle simulations, it's nice\nto have some kind of randomization scheme.\n\n281\n00:16:17.940 --> 00:16:21.430\nI could write that myself but it would be\nnice if the language already had that for\n\n282\n00:16:21.430 --> 00:16:24.350\nme.\n&gt;&gt; So back in our code here, I've stripped\n\n283\n00:16:24.350 --> 00:16:29.468\nsome of the stuff that we had away, just\nso we have a blank slate to start from.\n\n284\n00:16:29.468 --> 00:16:32.750\nWe need math.random,\nsorry, it's a lowercase.\n\n285\n00:16:32.750 --> 00:16:37.013\nThat's just gonna get us\na sort of a double variable or\n\n286\n00:16:37.013 --> 00:16:39.779\na double number between 0 and 1.\n\n287\n00:16:41.330 --> 00:16:44.590\nI don't think it includes one but\nagain it's a double so the chances\n\n288\n00:16:44.590 --> 00:16:49.430\nthat you would get one are incredibly\nsmall anyway, exactly one, I mean.\n\n289\n00:16:49.430 --> 00:16:52.960\nPrint line and then just print it.\n\n290\n00:16:52.960 --> 00:16:55.415\nSo if we run this multiple times we\nare actually gonna get different results,\n\n291\n00:16:55.415 --> 00:16:56.567\nwhich would be interesting to see.\n\n292\n00:16:56.567 --> 00:17:00.307\nThat one was 0.97, that one was 0.33.\n\n293\n00:17:00.307 --> 00:17:03.150\nRun it one more time, we get .7189.\n\n294\n00:17:03.150 --> 00:17:05.890\nSo those are equally\ndistributed all in that range.\n\n295\n00:17:05.890 --> 00:17:08.762\nI'm just throwing out a hypothetical here,\n\n296\n00:17:08.762 --> 00:17:13.156\nwhat if we wanted something that\nfollowed the normal distribution?\n\n297\n00:17:13.156 --> 00:17:19.830\nOr we wanted to generate an imager\nbetween two values, right?\n\n298\n00:17:19.830 --> 00:17:23.810\nSo in this case, you could do it\nwith some fancy mathematical tricks.\n\n299\n00:17:23.810 --> 00:17:25.970\nBut there's actually\na library that we can use and\n\n300\n00:17:25.970 --> 00:17:27.940\nmake our lives a little bit easier here.\n\n301\n00:17:27.940 --> 00:17:33.060\nSo let's just do Random rng = new Random,\n\n302\n00:17:33.060 --> 00:17:37.670\nthis is again the same procedure for\ncreating an object as we've seen before.\n\n303\n00:17:37.670 --> 00:17:40.380\nWe're gonna have to do\nan import here real quick So\n\n304\n00:17:40.380 --> 00:17:43.290\nI generally just mouse over this and\nclick that.\n\n305\n00:17:43.290 --> 00:17:44.770\nWorks good.\n\n306\n00:17:44.770 --> 00:17:48.880\nNow we can do double, no we want to int.\n\n307\n00:17:48.880 --> 00:17:54.821\nInt R equals R and G.next int.\n\n308\n00:17:54.821 --> 00:17:59.680\nNow this is the upper bound, yhe lower\nbound is going to be zero inclusive.\n\n309\n00:17:59.680 --> 00:18:02.000\nSo we can get 0.\n\n310\n00:18:02.000 --> 00:18:03.990\nLet's say we give it 4.\n\n311\n00:18:03.990 --> 00:18:04.760\nWe get 0, 1, 2, or 3.\n\n312\n00:18:04.760 --> 00:18:06.120\nWe can't get 4.\n\n313\n00:18:06.120 --> 00:18:09.050\nAgain, it's an exclusive upper\nbound that's something we've seen\n\n314\n00:18:09.050 --> 00:18:11.410\nconsistently throughout Java so far.\n\n315\n00:18:11.410 --> 00:18:12.800\nWhether you're dealing with strings or\n\n316\n00:18:12.800 --> 00:18:17.658\nrays, the upper bound'd gonna be\nan exclusive boundary position.\n\n317\n00:18:17.658 --> 00:18:21.940\nAnd so, bound.printline.\n\n318\n00:18:21.940 --> 00:18:24.980\nIf we run this a couple times,\nin fact, let's actually do a for loop,\n\n319\n00:18:24.980 --> 00:18:28.530\nlet's print a bunch of these all at once.\n\n320\n00:18:28.530 --> 00:18:31.920\nWe should just get different combinations\nof zero, one, two, and three.\n\n321\n00:18:31.920 --> 00:18:37.731\nSo int i = 0; i &lt;\n\n322\n00:18:37.731 --> 00:18:45.380\n10; i++ So I press control shift F there.\n\n323\n00:18:45.380 --> 00:18:46.920\nThat's my autoformat.\n\n324\n00:18:46.920 --> 00:18:50.000\nI wanted everything to be clear\non the screen without me having\n\n325\n00:18:50.000 --> 00:18:52.530\nto deal with like braces or\nanything like that.\n\n326\n00:18:52.530 --> 00:18:58.020\nSo if we run it now, looks like we got\na bunch of, you know what we're doing?\n\n327\n00:18:58.020 --> 00:18:59.140\nI made a silly mistake here.\n\n328\n00:18:59.140 --> 00:19:03.410\nSo again, you got to be careful with\nthis random number generation right?\n\n329\n00:19:03.410 --> 00:19:07.860\nSo I generated this one random number R,\nand then I printed it ten times,\n\n330\n00:19:07.860 --> 00:19:11.200\nwhich is obviously all gonna\nbe the same result of one.\n\n331\n00:19:11.200 --> 00:19:17.040\nIf we run it multiple times,\nthis time we got 0200, I've confused\n\n332\n00:19:17.040 --> 00:19:20.850\nmy computer a little bit, as you can see\nit's printing ten of the same number.\n\n333\n00:19:20.850 --> 00:19:23.300\nSo, in this case it's not\nreally what we wanna do.\n\n334\n00:19:23.300 --> 00:19:27.800\nInstead we can sort of\ndelete this r altogether and\n\n335\n00:19:27.800 --> 00:19:29.320\nleave in there rng.nextInt(4).\n\n336\n00:19:29.320 --> 00:19:33.760\nAnd that is going to\nprint the next integer\n\n337\n00:19:33.760 --> 00:19:36.504\naccording to the random seed\nin the computer wherever.\n\n338\n00:19:37.535 --> 00:19:41.627\nWe run that now, look at that,\nwe get different numbers all between 0 and\n\n339\n00:19:41.627 --> 00:19:45.945\n3 inclusive, or 0 and 4 exclusive.\n&gt;&gt; So, this is not technically in the math\n\n340\n00:19:45.945 --> 00:19:48.795\nlibrary, but\nit does provide us math functionality.\n\n341\n00:19:48.795 --> 00:19:50.242\nSo they kinda go hand in hand, and\n\n342\n00:19:50.242 --> 00:19:53.257\nI've seen this couple of times where\npeople were doing math things.\n\n343\n00:19:53.257 --> 00:19:57.352\nAnd they'll bring in the random library\nbecause it offers a little bit more\n\n344\n00:19:57.352 --> 00:20:00.120\nfunctionality then just math at random.\n\n345\n00:20:00.120 --> 00:20:04.057\nNow, Mark, we've seen a great deal of\nmath, we've covered a lot of things.\n\n346\n00:20:04.057 --> 00:20:06.787\nBut kind of can you boil it down,\nwhat are some takeaways,\n\n347\n00:20:06.787 --> 00:20:09.060\nsome things we should watch out for?\n&gt;&gt; Okay so\n\n348\n00:20:09.060 --> 00:20:10.760\nyeah just to reiterate\na couple things here.\n\n349\n00:20:10.760 --> 00:20:13.350\nI think the documentation's\nreally important to look at\n\n350\n00:20:13.350 --> 00:20:14.700\nwhenever you're doing something like this.\n\n351\n00:20:14.700 --> 00:20:16.900\nThe Random, the Math,\n\n352\n00:20:16.900 --> 00:20:22.890\nall these libraries have very explicit\ninformation available about them.\n\n353\n00:20:22.890 --> 00:20:27.790\nAs you can see here,\nyou can do the next returns a double.\n\n354\n00:20:27.790 --> 00:20:31.970\nIt's a normally distributed double value\nwith mean 0 and standard deviation 1.\n\n355\n00:20:31.970 --> 00:20:38.664\nSort of a good way to generate whatever\nkind of variable random you need.\n\n356\n00:20:38.664 --> 00:20:40.710\nAnd then, a couple of other things.\n\n357\n00:20:40.710 --> 00:20:41.870\nJust be careful with your imports.\n\n358\n00:20:41.870 --> 00:20:44.820\nAgain, it's really not that difficult,\nyou can generally just push Ctrl+Shift+0.\n\n359\n00:20:44.820 --> 00:20:47.350\nIt'll generate what you need.\n\n360\n00:20:47.350 --> 00:20:49.600\nDegrees versus radians is\nsomething to watch out for\n\n361\n00:20:49.600 --> 00:20:51.710\nwhen you're doing those trig functions,\nas we saw.\n\n362\n00:20:52.910 --> 00:20:56.210\nAlso available to you with\nthe trig is sort of the inverse,\n\n363\n00:20:56.210 --> 00:20:59.530\nkinda like the hyperbolic versions\nof the sine, cosine, and tangent.\n\n364\n00:20:59.530 --> 00:21:01.420\nSome of you may not have seen that and\nthat's fine.\n\n365\n00:21:01.420 --> 00:21:02.490\nYou may never need them.\n\n366\n00:21:02.490 --> 00:21:05.610\nYou might need them someday and\nthe documentation is there for you.\n\n367\n00:21:05.610 --> 00:21:09.250\nOne last thing is the integer\nversus the doubles.\n\n368\n00:21:09.250 --> 00:21:13.260\nSo again some methods you may expect to\nreturn an integer will actually return\n\n369\n00:21:13.260 --> 00:21:14.830\na double and vice versa.\n\n370\n00:21:14.830 --> 00:21:17.230\nSo round returns that integer and\n\n371\n00:21:17.230 --> 00:21:22.600\nif you then divide by an integer\nexpecting to convert it back to a double.\n\n372\n00:21:22.600 --> 00:21:26.990\nYou'll find that you get still an integer\nbecause an integer divided by an integer.\n\n373\n00:21:26.990 --> 00:21:31.760\nEven if it's not a whole number, Java's\ngonna report you back with an integer and\n\n374\n00:21:31.760 --> 00:21:33.400\nyou're not gonna have\nthe result you expect.\n\n375\n00:21:33.400 --> 00:21:34.030\nBe careful of that.\n\n376\n00:21:34.030 --> 00:21:37.268\nI think that's about all, though.\n&gt;&gt; Whoa, that is a stream of things to\n\n377\n00:21:37.268 --> 00:21:41.553\nremember but very important things\nbecause they can definitely trip you up.\n\n378\n00:21:41.553 --> 00:21:42.880\nThanks for highlighting those.\n\n379\n00:21:42.880 --> 00:21:46.660\nAnd well, I've had a wonderful\nwalk down math memory lane, but\n\n380\n00:21:46.660 --> 00:21:48.610\nit does look like we're out of time for\nthis episode.\n\n381\n00:21:48.610 --> 00:21:51.040\nBut we've got more Java coming at you,\nso definitely stay tuned.\n\n382\n00:21:51.040 --> 00:21:53.410\nBut for now, we're gonna go ahead and\nsign out for DevProTV.\n\n383\n00:21:53.410 --> 00:21:56.300\nI've been your host Justin Dennison.\n&gt;&gt; Mark Davis here.\n\n384\n00:21:56.300 --> 00:21:57.904\n&gt;&gt; And we'll see you next time.\n\n385\n00:21:57.904 --> 00:22:02.581\n[MUSIC]\n\n",
          "vimeoId": "271726957"
        },
        {
          "description": "In this episode, Mark and Justin create and explore static methods in Java. Mark implements his very own static methods to accomplish some common task, but have those method as reusable code.",
          "length": "1460",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-11-static_method-061517-PGM.00_27_43_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-11-static_method-061517-PGM.00_27_43_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-11-static_method-061517-PGM.00_27_43_20.Still001-sm.jpg",
          "title": "Static Methods",
          "transcript": "",
          "vimeoId": "222505771"
        },
        {
          "description": "In this episode, Mark and Justin discuss using the Scanner object from the Java Standard Library to take input from Standard In as well as from a file.",
          "length": "1670",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-12-io_scanner-070317.00_30_03_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-12-io_scanner-070317.00_30_03_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-12-io_scanner-070317.00_30_03_28.Still001-sm.jpg",
          "title": "IO Scanner",
          "transcript": "",
          "vimeoId": "224471596"
        },
        {
          "description": "In this episode, Mark and Justin explore the concept of streams as a manner of consuming files as an input and output source.",
          "length": "1750",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-13-io_stream-070317.00_36_22_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-13-io_stream-070317.00_36_22_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-13-io_stream-070317.00_36_22_08.Still001-sm.jpg",
          "title": "IO Streams",
          "transcript": "",
          "vimeoId": "224471875"
        },
        {
          "description": "In this episode, Mark and Justin explore the JUnit Testing framework. Additionally, they discuss the thought and design around test-driven development.",
          "length": "1106",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-14-JUnit_testing-070317-PGM.00_35_51_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-14-JUnit_testing-070317-PGM.00_35_51_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-14-JUnit_testing-070317-PGM.00_35_51_05.Still001-sm.jpg",
          "title": "JUnit Testing",
          "transcript": "",
          "vimeoId": "224472216"
        },
        {
          "description": "In this episode, Mark and Justin use test-driven development to implement a simple number guessing game.",
          "length": "1454",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-15-basic_guessing_game-070317-PGM.00_25_14_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-15-basic_guessing_game-070317-PGM.00_25_14_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-15-basic_guessing_game-070317-PGM.00_25_14_19.Still001-sm.jpg",
          "title": "Basic Guessing Game",
          "transcript": "",
          "vimeoId": "224470721"
        },
        {
          "description": "In this episode, Mark and Justin explore the use of debugging techniques for tracing down errors that crop up in Java.",
          "length": "1329",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-16-debugging_techniques_in_eclipse-070317-PGM.00_23_46_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-16-debugging_techniques_in_eclipse-070317-PGM.00_23_46_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-16-debugging_techniques_in_eclipse-070317-PGM.00_23_46_14.Still001-sm.jpg",
          "title": "Debugging Techniques in Eclipse",
          "transcript": "",
          "vimeoId": "224470951"
        },
        {
          "description": "In this episode, Mark and Justin discuss and demonstrate the handling of various exceptions as well as how order of handling exceptions can cause unnecessary pain. Moreover, Mark explores the difference between exceptions and errors.",
          "length": "1296",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-17-handling_exceptions-070317-PGM.00_31_40_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-17-handling_exceptions-070317-PGM.00_31_40_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-17-handling_exceptions-070317-PGM.00_31_40_28.Still001-sm.jpg",
          "title": "Handling Exceptions",
          "transcript": "",
          "vimeoId": "224471191"
        },
        {
          "description": "In this episode, Mark and Justin demonstrate the publishing and deploying workflow for distributing our Java code.",
          "length": "1221",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-18-deploying_and_publishing-070317-PGM.00_38_14_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-18-deploying_and_publishing-070317-PGM.00_38_14_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-18-deploying_and_publishing-070317-PGM.00_38_14_19.Still001-sm.jpg",
          "title": "Deploying and Publishing",
          "transcript": "",
          "vimeoId": "224471397"
        },
        {
          "description": "In this episode, Mark and Justin bring to light some of the specific object-oriented concepts that are an integral part of Java. They discuss the concept of a class as well as the object-oriented programming model that is provided by Java.",
          "length": "1608",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-19-object_oriented_concepts-071917-PGM.00_31_36_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-19-object_oriented_concepts-071917-PGM.00_31_36_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-19-object_oriented_concepts-071917-PGM.00_31_36_06.Still001-sm.jpg",
          "title": "Object-Oriented Concepts",
          "transcript": "",
          "vimeoId": "226300024"
        },
        {
          "description": "In this episode, Mark and Justin implement a class that emphasizes the object-oriented development process. They discuss and demonstrate the creation of constructors and defining appropriate fields within the class.",
          "length": "1512",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-1-object_oriented_implementation-071917-PGM.00_25_00_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-1-object_oriented_implementation-071917-PGM.00_25_00_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-1-object_oriented_implementation-071917-PGM.00_25_00_22.Still001-sm.jpg",
          "title": "Object-Oriented Implementation",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.745\n[MUSIC]\n\n2\n00:00:05.745 --> 00:00:09.938\nGreetings everyone and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:09.938 --> 00:00:13.290\nI'm your host Justin Dennison and,\nwell, we're back with more Java.\n\n4\n00:00:13.290 --> 00:00:17.260\nAnd we're gonna be taking a look at the\nimplementation of those object-oriented\n\n5\n00:00:17.260 --> 00:00:20.322\nprinciples that we talked about,\nwell, in the last episode.\n\n6\n00:00:20.322 --> 00:00:24.780\nAnd, luckily, we had the man,\nthe very man that is gonna tell us all.\n\n7\n00:00:24.780 --> 00:00:26.163\nAnd that's Mr Mark Davis,\nhow you doing today, Mark?\n\n8\n00:00:26.163 --> 00:00:27.690\n&gt;&gt; Hey, pretty good,\nthanks for asking, Justin.\n\n9\n00:00:27.690 --> 00:00:29.030\n&gt;&gt; That is always good to hear, Mark.\n\n10\n00:00:29.030 --> 00:00:30.860\nNow, I know we're gonna\nbe building something,\n\n11\n00:00:30.860 --> 00:00:32.970\nbut what exactly are we gonna be building?\n\n12\n00:00:32.970 --> 00:00:35.260\n&gt;&gt; Yeah, so\nwe're gonna be building an entity class.\n\n13\n00:00:35.260 --> 00:00:37.850\nWe're eventually going to\nextend this entity class, and\n\n14\n00:00:37.850 --> 00:00:40.090\nwe're gonna make a controllable car.\n\n15\n00:00:40.090 --> 00:00:43.732\nAnd at the end of the day,\na couple of episodes from now,\n\n16\n00:00:43.732 --> 00:00:48.120\nwe're gonna write the logic and\nthe game loop for this.\n\n17\n00:00:48.120 --> 00:00:51.541\nThat's gonna take in all the controls,\noutput everything,\n\n18\n00:00:51.541 --> 00:00:52.937\nrender it on the screen.\n\n19\n00:00:52.937 --> 00:00:56.214\nAnd we're gonna use GLFW\nit's a library for that.\n\n20\n00:00:56.214 --> 00:00:58.090\nDon't ask me what it stands for,\nI don't know.\n\n21\n00:01:02.070 --> 00:01:03.820\nFor now we have to do the modelling,\nright?\n\n22\n00:01:03.820 --> 00:01:06.680\nSo we're using a paradigm of\nmodel view controller and\n\n23\n00:01:06.680 --> 00:01:11.120\nso the way that this works is the user\ninterfaces is with the controller.\n\n24\n00:01:11.120 --> 00:01:15.330\nThe controller updates the model and\nthe model updates the view, right so.\n\n25\n00:01:15.330 --> 00:01:19.178\nAnd then the view informs the player\non what they're doing, right?\n\n26\n00:01:19.178 --> 00:01:22.710\nSo you've got these three components,\nmodel, view, and controller.\n\n27\n00:01:22.710 --> 00:01:26.090\nWe have to build the model first so\nthat we know what we're working with.\n\n28\n00:01:27.090 --> 00:01:31.180\nAnd there's a lot of good ways\nto model objects in Java.\n\n29\n00:01:31.180 --> 00:01:36.250\nThere's this Java Modeling Language lots\nof people use, I would look that up.\n\n30\n00:01:36.250 --> 00:01:39.571\nWe're not really gonna talk about it\nmuch today, but I think it's very useful\n\n31\n00:01:39.571 --> 00:01:42.808\nespecially for people who are new to\nthis paradigm of programming, right?\n\n32\n00:01:42.808 --> 00:01:46.207\nI think it might definitely help you\nunderstand what you might need for\n\n33\n00:01:46.207 --> 00:01:47.520\na certain class.\n\n34\n00:01:47.520 --> 00:01:49.595\nAnd it definitely helps you\nthink about it ahead of time so\n\n35\n00:01:49.595 --> 00:01:52.845\nyou don't have to go back and fix things,\nadd things, all that sort of stuff.\n\n36\n00:01:53.875 --> 00:01:56.075\n&gt;&gt; Well, Mark that does sound exciting and\n\n37\n00:01:56.075 --> 00:01:59.113\nI know we're gonna be talking a little\nbit about an abstraction, right?\n\n38\n00:01:59.113 --> 00:02:01.535\nNot something you and\nI interact with everyday.\n\n39\n00:02:01.535 --> 00:02:03.455\nBut in the game world, right?\n\n40\n00:02:03.455 --> 00:02:08.005\nWe're building a game,\nI've seen this paradigm several times.\n\n41\n00:02:08.005 --> 00:02:10.750\nSo what do we need to do to get started?\n\n42\n00:02:10.750 --> 00:02:14.670\n&gt;&gt; Yeah, so the things that an entity\nis gonna have based on my definition\n\n43\n00:02:14.670 --> 00:02:17.980\nare an x position in space on the screen\n\n44\n00:02:17.980 --> 00:02:20.500\nthat's gonna range from\nnegative 100 to positive 100.\n\n45\n00:02:20.500 --> 00:02:23.690\nA y position that's also gonna range\nfrom negative 100 to positive 100,\n\n46\n00:02:23.690 --> 00:02:25.200\nnegative to positive.\n\n47\n00:02:25.200 --> 00:02:27.350\nAnd an angle, so\n\n48\n00:02:27.350 --> 00:02:31.710\nanywhere from zero degrees all\nthe way back around to 360 degrees.\n\n49\n00:02:31.710 --> 00:02:34.677\nAnd if we have an angle\nthat is greater than 360,\n\n50\n00:02:34.677 --> 00:02:38.757\nwe're just gonna subtract 360 to\nbind it back to that unit circle.\n\n51\n00:02:38.757 --> 00:02:41.499\nIf we have something that's less\nthan zero, we're gonna add 360.\n\n52\n00:02:42.610 --> 00:02:47.764\nThat way of implementing it is just\ngoing to keep it within the unit circle\n\n53\n00:02:47.764 --> 00:02:52.931\nof 0 to 2 pi or 0 to 360 degrees,\nhowever you like to think about it.\n\n54\n00:02:52.931 --> 00:02:57.553\nBut yeah, I've written all of these tests\nthat are gonna help us figure out exactly\n\n55\n00:02:57.553 --> 00:02:59.480\nwhat our entity class needs to do.\n\n56\n00:02:59.480 --> 00:03:03.580\nAnd how it needs to implement these\nfields and methods in such a way that\n\n57\n00:03:03.580 --> 00:03:07.590\nwe will be able to use them when we\nwrite our view and our controller.\n\n58\n00:03:07.590 --> 00:03:09.220\n&gt;&gt; Well Mark, I'm itching to get started.\n\n59\n00:03:09.220 --> 00:03:11.150\nGo ahead and take it away, my man.\n\n60\n00:03:11.150 --> 00:03:13.870\n&gt;&gt; All right, so\nhere I've got all these tests, and\n\n61\n00:03:13.870 --> 00:03:16.715\nyou'll notice this first\none is not a test.\n\n62\n00:03:16.715 --> 00:03:22.071\nSo one thing that you might encounter is\nwhen you do trig if you do math.sine and\n\n63\n00:03:22.071 --> 00:03:28.018\nsomething is pointing up at an angle of\nvery close to 90, but it's not exactly 90.\n\n64\n00:03:28.018 --> 00:03:32.278\nYou might not get exactly 1 when you\ndo sine of an angle that's like 90, or\n\n65\n00:03:32.278 --> 00:03:35.555\n-1 when it's like sine of\nan angle that's like 270.\n\n66\n00:03:35.555 --> 00:03:39.507\nSo one thing I wanted to do real quick\nis write this little method here,\n\n67\n00:03:39.507 --> 00:03:41.689\nroundedEquals.\n\n68\n00:03:41.689 --> 00:03:46.240\nIt just rounds it to\nthe hundredths decimal place and\n\n69\n00:03:46.240 --> 00:03:48.920\nmakes sure that they're close enough,\nright?\n\n70\n00:03:48.920 --> 00:03:53.950\nSo in the case where you got that\nmath.sin call and it's not exactly what\n\n71\n00:03:53.950 --> 00:03:58.120\nyou're expecting it to be but it's really\nclose, we want that test to pass anyway.\n\n72\n00:03:58.120 --> 00:04:01.600\nSo I wrote this method and\nI've used it in some of these tests below.\n\n73\n00:04:01.600 --> 00:04:08.870\nSo here, I just have this entities A and\nB, eA and eB is what I've called them.\n\n74\n00:04:08.870 --> 00:04:12.626\nSo for set up I'm just gonna\ncreate one at position 0, 0 and\n\n75\n00:04:12.626 --> 00:04:15.066\nanother at position 100, 100.\n\n76\n00:04:15.066 --> 00:04:17.440\nThis test says distance\nshould return distance.\n\n77\n00:04:17.440 --> 00:04:21.404\nSo obviously these two entities I've\ncreated should be exactly 100 away.\n\n78\n00:04:21.404 --> 00:04:26.401\nI could add another insert here, I could\nmake two new entities that are a different\n\n79\n00:04:26.401 --> 00:04:28.512\ndistance away and also test that.\n\n80\n00:04:28.512 --> 00:04:30.200\nBut I think this is probably good enough.\n\n81\n00:04:30.200 --> 00:04:33.230\nIt might be a good idea to include more\ntest cases if you're really going for\n\n82\n00:04:33.230 --> 00:04:37.340\na comprehensive test suite,\nbut it's fine for me.\n\n83\n00:04:37.340 --> 00:04:39.750\nThis test is\nentitiesShouldTravelPerExpectations.\n\n84\n00:04:39.750 --> 00:04:42.532\nThat's not necessarily as specific\nof a name as it should be, but\n\n85\n00:04:42.532 --> 00:04:45.070\nwhat I mean is if it's travelling\nin an upwards direction.\n\n86\n00:04:45.070 --> 00:04:49.770\nSo here this angle is 90, right, I've done\nmy angles and degrees for these tests.\n\n87\n00:04:50.780 --> 00:04:53.030\nThey will be for\nthe implementation as well.\n\n88\n00:04:53.030 --> 00:04:56.200\nThis entity is pointing up and\nit's traveling at a speed of 1.\n\n89\n00:04:56.200 --> 00:05:01.470\nSo this constructor is determining\nhow it's gonna behave, but I'm making\n\n90\n00:05:01.470 --> 00:05:05.970\nassertions based on those principles\nthat I've just talked about, right?\n\n91\n00:05:05.970 --> 00:05:09.250\nTo where I'm gonna assert that\nthe speed is equal to one,\n\n92\n00:05:09.250 --> 00:05:11.790\nI used the roundedEquals\nmethod I already talked about.\n\n93\n00:05:11.790 --> 00:05:14.590\nSo I'm asserting that the speeds\nare what I've defined them to be.\n\n94\n00:05:14.590 --> 00:05:18.880\nAnd I'm also going to assert that after\nyou pass a certain amount of time for\n\n95\n00:05:18.880 --> 00:05:21.800\nthese entities to travel\nbecause this program will need\n\n96\n00:05:21.800 --> 00:05:23.110\na conceptualization of time.\n\n97\n00:05:23.110 --> 00:05:27.570\nAgain there's the view\nthat needs to update and\n\n98\n00:05:27.570 --> 00:05:31.450\nthere's a controller scheme that\nwe're going to have to have and\n\n99\n00:05:31.450 --> 00:05:35.380\nall of this has to, in some way,\nupdate on a set interval.\n\n100\n00:05:35.380 --> 00:05:38.430\nAnd so we're gonna do like 50\nmilliseconds, 5 milliseconds.\n\n101\n00:05:39.620 --> 00:05:44.841\nWe're gonna render as many frames as\nwe can but we are only gonna seek\n\n102\n00:05:44.841 --> 00:05:50.529\ncontroller input or move our Entity\na certain number of times per second.\n\n103\n00:05:50.529 --> 00:05:53.896\nAnd that just gives us finer control,\nbecause maybe you've got a faster\n\n104\n00:05:53.896 --> 00:05:57.580\nprocessor, we don't want these,\nit's not really a race condition.\n\n105\n00:05:57.580 --> 00:06:00.000\nBut we don't want this\nnon-deterministic behavior,\n\n106\n00:06:00.000 --> 00:06:03.110\nwhere something might behave differently\non one computer than another,\n\n107\n00:06:03.110 --> 00:06:07.110\ndepending on processing power, and\nhow fast that while loop is gonna run.\n\n108\n00:06:07.110 --> 00:06:09.310\nBut, really what we're\ngonna end up with is,\n\n109\n00:06:09.310 --> 00:06:11.860\nwhen we write this game, we're gonna\nhave this over arching while loop.\n\n110\n00:06:11.860 --> 00:06:13.660\nIt's just gonna go through again and\n\n111\n00:06:13.660 --> 00:06:17.970\nagain and every couple of times it goes\nthrough, it's gonna say, okay yep,\n\n112\n00:06:17.970 --> 00:06:20.920\n50 milliseconds have passed or\nhowever long it ends up being.\n\n113\n00:06:20.920 --> 00:06:26.630\nLet's check for controller input again and\nyou know let's tick this second.\n\n114\n00:06:26.630 --> 00:06:30.838\nAnd I've said it's called a second, but\n\n115\n00:06:30.838 --> 00:06:33.660\nin this case maybe it's 50 milliseconds,\nmaybe it's 5 milliseconds and we'll update\n\n116\n00:06:33.660 --> 00:06:37.950\nthe positions of all of our entities\naccording to their speed and direction.\n\n117\n00:06:37.950 --> 00:06:41.411\n&gt;&gt; Now, Mark I'm gonna get a little\nmeta on you just to help nail that down.\n\n118\n00:06:41.411 --> 00:06:44.794\nAnd this is something that you will\nencounter in a great deal of programming\n\n119\n00:06:44.794 --> 00:06:48.510\nand that's having to manage the fact that\nsome computers run faster than others.\n\n120\n00:06:48.510 --> 00:06:50.961\nThere's different architecture,\nthings of that nature,\n\n121\n00:06:50.961 --> 00:06:54.460\nespecially if your trying to animate or\nmove things on the screen, right?\n\n122\n00:06:54.460 --> 00:06:59.480\nThese visual feedbacks because our concept\nof a second is well a second right?\n\n123\n00:06:59.480 --> 00:07:02.020\nThat's close to a second I\ndon't know if that's exact but\n\n124\n00:07:02.020 --> 00:07:07.090\nwhat we can do is we can modify it to\nprovide what's called a game second.\n\n125\n00:07:07.090 --> 00:07:10.990\nSo now the computer's not churning away\nat the faster pace if it's on mine versus\n\n126\n00:07:10.990 --> 00:07:11.950\nMark's computer.\n\n127\n00:07:11.950 --> 00:07:16.920\nWere actually implementing a game\nsecond that is a more appropriate\n\n128\n00:07:16.920 --> 00:07:20.260\nkind of reflection of\nwhat we deem as a second.\n\n129\n00:07:20.260 --> 00:07:21.458\nSo we've seen those test and,\n\n130\n00:07:21.458 --> 00:07:24.791\nwell, I guess it's time to start writing\nthat class, right, or am I jumping ahead?\n\n131\n00:07:24.791 --> 00:07:28.235\n&gt;&gt; There's a couple of tests, but yeah\nthat's a very good thing to jump in on\n\n132\n00:07:28.235 --> 00:07:30.515\nbecause there's this concept of Unix time.\n\n133\n00:07:30.515 --> 00:07:33.100\nThere's this thing called a Unix epoch or\nsomething.\n\n134\n00:07:33.100 --> 00:07:34.692\nI don't know exactly what year it was.\n\n135\n00:07:34.692 --> 00:07:36.438\nWas it in 1990 or something?\n\n136\n00:07:36.438 --> 00:07:36.962\nMaybe before that.\n\n137\n00:07:36.962 --> 00:07:42.358\n&gt;&gt; Actually, I'm pretty sure the Unix\nepoch is January 1st, 1970 at 12:00 AM.\n\n138\n00:07:42.358 --> 00:07:43.520\n&gt;&gt; He would know.\n\n139\n00:07:43.520 --> 00:07:46.724\nSo yeah, that's when we started, right?\n\n140\n00:07:46.724 --> 00:07:49.490\nAnd there's this long integer basically.\n\n141\n00:07:49.490 --> 00:07:51.285\nOf like 64 bits or whatever and\n\n142\n00:07:51.285 --> 00:07:54.611\nevery millisecond since then\nit's just been counting up.\n\n143\n00:07:54.611 --> 00:07:57.676\nAnd eventually it'll run out but\nhopefully not anytime soon.\n\n144\n00:07:57.676 --> 00:08:01.493\nThey're some of the same stuff that\nhappened around Y2K with people being\n\n145\n00:08:01.493 --> 00:08:02.960\nworried about that.\n\n146\n00:08:02.960 --> 00:08:07.732\nThey're also worried about what\nthe Unix Epoch, and the overflow of\n\n147\n00:08:07.732 --> 00:08:12.598\nthat big integer might mean for\ncertain systems, certain programs.\n\n148\n00:08:12.598 --> 00:08:14.420\nJust a cool bit of history, I think.\n\n149\n00:08:14.420 --> 00:08:18.850\nIt's a big part of programming history\nI would say is the Unix Epoch and\n\n150\n00:08:18.850 --> 00:08:20.210\nstuff that goes along with that.\n\n151\n00:08:20.210 --> 00:08:22.670\nBut back in the code we've\ngot these tests, right?\n\n152\n00:08:22.670 --> 00:08:26.147\nSo I've already talked about how they\nshould travel in the direction and\n\n153\n00:08:26.147 --> 00:08:28.091\nthe speed that we've assigned to them.\n\n154\n00:08:28.091 --> 00:08:29.990\nBut we also wanna bind them to this grid,\nright?\n\n155\n00:08:29.990 --> 00:08:32.820\nWe don't want them to go outside of\nthe boundaries of what our screen is\n\n156\n00:08:32.820 --> 00:08:34.270\ngonna be defined as.\n\n157\n00:08:34.270 --> 00:08:38.789\nAnd I've said that our screen is gonna\nbe from negative 100 to positive 100, so\n\n158\n00:08:38.789 --> 00:08:40.370\n200 wide and 200 tall.\n\n159\n00:08:40.370 --> 00:08:43.054\nPretty important that we don't go\noutside the boundaries of that,\n\n160\n00:08:43.054 --> 00:08:45.465\njust because we wouldn't know\nwhere our thingy is anymore.\n\n161\n00:08:45.465 --> 00:08:47.440\nOr entity, sorry, I shouldn't say\nthingy I should be more specific.\n\n162\n00:08:48.520 --> 00:08:51.560\nBut we wanna make sure that it\ndoesn't go out of that grid.\n\n163\n00:08:51.560 --> 00:08:56.650\nSo if we create one at a position with\na certain velocity and then we tick\n\n164\n00:08:56.650 --> 00:09:00.580\n1000 seconds, which I've done here, we\nwanna make sure it's still in this grid.\n\n165\n00:09:00.580 --> 00:09:02.966\nSo I've made a bunch of assertions there.\n\n166\n00:09:02.966 --> 00:09:06.201\nI make another entity that goes\nin a different direction and\n\n167\n00:09:06.201 --> 00:09:08.825\nI do the same thing,\nI do that a couple of times.\n\n168\n00:09:08.825 --> 00:09:12.565\nSo this is more of a comprehensive test,\njust to make sure that whatever direction\n\n169\n00:09:12.565 --> 00:09:15.341\nI go in it's not falling off of\nthe boundaries of the screen.\n\n170\n00:09:15.341 --> 00:09:18.000\nAnd again, that can be implemented\nin a couple of different ways.\n\n171\n00:09:18.000 --> 00:09:22.820\nOne thing you'll have trouble with if you\nwanna write a really good implementation\n\n172\n00:09:22.820 --> 00:09:29.305\nof this test passing is what happens when\nyou encounter an edge but not a corner.\n\n173\n00:09:29.305 --> 00:09:33.860\nDo you want to ride along that edge at\nthe same speed that you were going?\n\n174\n00:09:35.300 --> 00:09:38.390\nAgain if your velocity vector is\npointing here and you hit an edge here,\n\n175\n00:09:38.390 --> 00:09:42.578\ndo you want to transfer all of\nthat momentum into this angle,\n\n176\n00:09:42.578 --> 00:09:46.300\ndo you wanna bounce off of it and\nchange your velocity vector.\n\n177\n00:09:46.300 --> 00:09:49.240\nAgain, these are all of the kinds of\nthings that you really have to think about\n\n178\n00:09:49.240 --> 00:09:51.220\nwhen you're implementing the game itself.\n\n179\n00:09:51.220 --> 00:09:55.000\nBut sort of any one of those will make\nthe test here that I've written pass.\n\n180\n00:09:55.000 --> 00:09:56.950\nSo I don't really have\na determined behavior.\n\n181\n00:09:56.950 --> 00:09:59.530\nIf you want to do yours in\na different way, you can.\n\n182\n00:09:59.530 --> 00:10:01.250\nBut the way I've done mine\nis just kind of simple.\n\n183\n00:10:01.250 --> 00:10:01.910\nI've said okay well,\n\n184\n00:10:01.910 --> 00:10:05.510\nwhenever you're up against an edge\nwe're gonna have the velocity.\n\n185\n00:10:05.510 --> 00:10:08.340\nWhich again is not necessarily what's\ngoing to happen in th real world.\n\n186\n00:10:08.340 --> 00:10:12.700\nAnd we'll just let you continue\nriding along it if you want, but\n\n187\n00:10:12.700 --> 00:10:15.180\nwe're going to not let you\ngo outside of that range.\n\n188\n00:10:15.180 --> 00:10:18.114\nWhenever you try to go outside of\nthat range we're going to say okay,\n\n189\n00:10:18.114 --> 00:10:21.920\nif is greater than a hundred we're\njust going to say equals a hundred.\n\n190\n00:10:21.920 --> 00:10:25.810\nWhich means every second when you update\nit's going to check the walls essentially,\n\n191\n00:10:25.810 --> 00:10:28.940\nand it'll go back inside of that range,\nright?\n\n192\n00:10:30.400 --> 00:10:31.900\nDifferent ways to implement that.\n\n193\n00:10:31.900 --> 00:10:34.650\nThere's a lot of different things\nyou could do there that would all\n\n194\n00:10:34.650 --> 00:10:35.500\npass this test.\n\n195\n00:10:35.500 --> 00:10:37.360\nAnd that's very important to realize,\n\n196\n00:10:37.360 --> 00:10:39.940\nis that you don't have to\nwrite your code a certain way.\n\n197\n00:10:39.940 --> 00:10:44.630\nThere's different objects you can write\nthat will meet the same specifications.\n\n198\n00:10:44.630 --> 00:10:46.970\nBut I'm actually gonna do\na cool little trick here.\n\n199\n00:10:46.970 --> 00:10:51.210\nSo, since I've written all of these tests,\nbut none of them are passing, obviously,\n\n200\n00:10:51.210 --> 00:10:56.290\nor even error free, I'm just gonna\ncreate classes based on them.\n\n201\n00:10:56.290 --> 00:11:00.710\nSo, I am just going to click that,\nEclipse has that open.\n\n202\n00:11:00.710 --> 00:11:04.980\nIf you did want to copy these tests or\nwhatever, I would do that.\n\n203\n00:11:04.980 --> 00:11:08.580\nI think that is a good idea to sort\nof run these tests yourself and\n\n204\n00:11:08.580 --> 00:11:09.730\nmake sure that your code is passing.\n\n205\n00:11:09.730 --> 00:11:13.430\nIt will help you diagnose any\nsorts of problems you might have.\n\n206\n00:11:13.430 --> 00:11:16.375\nSo, let's go ahead and\nmake couple of fields for this class.\n\n207\n00:11:16.375 --> 00:11:17.585\nI've talked about fields before,\n\n208\n00:11:17.585 --> 00:11:20.880\nthey're essentially just the data\nmembers that make up an object.\n\n209\n00:11:20.880 --> 00:11:25.827\nSo let's do a protected static\n\n210\n00:11:25.827 --> 00:11:30.776\nfinal double kilometers per,\n\n211\n00:11:30.776 --> 00:11:35.925\nI did hm, kilometers per mile.\n\n212\n00:11:35.925 --> 00:11:40.743\nAnd this is just a unit concept that\nI wanted to have because I wanted our\n\n213\n00:11:40.743 --> 00:11:44.417\nprogram to be able to handle\nboth meters and miles, so\n\n214\n00:11:44.417 --> 00:11:48.660\nto think in terms of both,\ncuz I did my speed in miles per hour,\n\n215\n00:11:48.660 --> 00:11:53.640\ncuz I'm a dirty American, but\nI also wanted to do my grid in meters.\n\n216\n00:11:53.640 --> 00:11:57.355\nAnd so, you definitely need a way\nto convert between the two.\n\n217\n00:11:57.355 --> 00:12:01.136\nBut it's also a good way to demonstrate\nthat you need these sorts of constants,\n\n218\n00:12:01.136 --> 00:12:04.590\nhow you would use them within\nthe context of the program, right?\n\n219\n00:12:04.590 --> 00:12:08.490\nSo, our class is gonna need access\nto this kilometers per mile.\n\n220\n00:12:08.490 --> 00:12:11.980\nI've made it protected, which means\nthat any entity subclasses we make eill\n\n221\n00:12:11.980 --> 00:12:14.350\nalso have access to the same concept.\n\n222\n00:12:14.350 --> 00:12:15.670\nAnd I'm going to do that for\na lot of these fields.\n\n223\n00:12:15.670 --> 00:12:17.145\nI am going to call them protected.\n\n224\n00:12:17.145 --> 00:12:19.785\nWe'll talk more at length\nabout what protected means and\n\n225\n00:12:19.785 --> 00:12:21.493\nexactly what can access it later on.\n\n226\n00:12:21.493 --> 00:12:25.640\nBut let's make some more fields,\nso protected double.\n\n227\n00:12:25.640 --> 00:12:26.870\nNotice I left the static off here.\n\n228\n00:12:26.870 --> 00:12:30.056\nAgain, very important in the distinction\nbetween what is a static member,\n\n229\n00:12:30.056 --> 00:12:31.263\nwhat is an instance member.\n\n230\n00:12:31.263 --> 00:12:34.140\nAnd I'm just gonna, I'm just gonna\nmake a bunch, actually, all at once.\n\n231\n00:12:34.140 --> 00:12:40.800\nSo I'm gonna do xPosition,\nyPosition, speedMPH,\n\n232\n00:12:43.510 --> 00:12:48.610\nand I'm gonna do angleDegrees, all right.\n\n233\n00:12:48.610 --> 00:12:51.770\nAnd I'm gonna do a semicolon so, I can\ndeclare this all on one line, all four.\n\n234\n00:12:51.770 --> 00:12:54.280\nIt's just fine,\nsince they're all protected doubles.\n\n235\n00:12:54.280 --> 00:12:55.990\nIt will work just fine.\n\n236\n00:12:55.990 --> 00:12:58.830\n&gt;&gt; Now Mark let me\ninterject here real quick.\n\n237\n00:12:58.830 --> 00:13:03.322\nIs that 1.6009 or should it be 09.\n\n238\n00:13:03.322 --> 00:13:04.445\n&gt;&gt; Yeah your right.\n&gt;&gt; I'm being a little bit of\n\n239\n00:13:04.445 --> 00:13:04.986\na stickler here.\n\n240\n00:13:04.986 --> 00:13:05.553\n&gt;&gt; That's fine.\n\n241\n00:13:05.553 --> 00:13:09.806\n&gt;&gt; But it may be weird behavior, if you're\ntrying to do some additional testing about\n\n242\n00:13:09.806 --> 00:13:11.450\nspeeds or any thing like that.\n\n243\n00:13:11.450 --> 00:13:12.900\nYou may get some weirdness there.\n\n244\n00:13:12.900 --> 00:13:14.490\nSo it's always good to double check those.\n\n245\n00:13:14.490 --> 00:13:17.250\nAnd that's the issues with,\nI think you said these are constants.\n\n246\n00:13:17.250 --> 00:13:19.880\nJust to remind us real quick,\nstatic final.\n\n247\n00:13:19.880 --> 00:13:21.490\nWhat does that implicitly mean?\n\n248\n00:13:21.490 --> 00:13:23.220\n&gt;&gt; So the static,\nagain two different things here.\n\n249\n00:13:23.220 --> 00:13:25.800\nThe static means that it\nbelongs to the class.\n\n250\n00:13:25.800 --> 00:13:27.760\nAnd so when you access that constant,\n\n251\n00:13:27.760 --> 00:13:33.170\nyou're gonna do entity.KM_PER_MI all caps,\nright?\n\n252\n00:13:33.170 --> 00:13:37.110\nSo, that's how you would access that,\nyou would do something like entity.KM_PER,\n\n253\n00:13:37.110 --> 00:13:42.570\nI missed my underscore, like that.\n\n254\n00:13:42.570 --> 00:13:44.170\nThat's how you would access that variable.\n\n255\n00:13:44.170 --> 00:13:46.230\nAgain I'm not in like a method or\nsomething right now so\n\n256\n00:13:46.230 --> 00:13:47.520\nit's not gonna let me do it.\n\n257\n00:13:47.520 --> 00:13:50.561\nBut that's how you would access that,\n\n258\n00:13:50.561 --> 00:13:54.350\npiece of data that we've established,\nright?\n\n259\n00:13:54.350 --> 00:13:58.719\nI'm also gonna make one more thing that's\ngonna keep track of how many entities I've\n\n260\n00:13:58.719 --> 00:13:59.780\ncreated, right?\n\n261\n00:13:59.780 --> 00:14:04.180\nYou will ask that final, my bad, so\nfinal means that it is immutable and\n\n262\n00:14:04.180 --> 00:14:07.900\nthat's a good thing to do for your\nconstraints whether they are being defined\n\n263\n00:14:07.900 --> 00:14:12.640\nby the units you are using or\nby the laws of nature or whatever or pi.\n\n264\n00:14:12.640 --> 00:14:13.650\nSomething like that.\n\n265\n00:14:13.650 --> 00:14:16.300\nGood idea to make all of those final,\nso you know your not going to be able to\n\n266\n00:14:16.300 --> 00:14:19.820\nchange them and your program will\neven holler at you and say no,\n\n267\n00:14:19.820 --> 00:14:22.240\nyou are not allowed to do that\nif you do try to change them.\n\n268\n00:14:22.240 --> 00:14:26.828\nOne other thing I wanted to do is make\na protected static and numEntities.\n\n269\n00:14:26.828 --> 00:14:31.040\nI think that this is a good practice\nuntil you start deleting entities and\n\n270\n00:14:31.040 --> 00:14:32.690\nthen you have to be careful.\n\n271\n00:14:32.690 --> 00:14:36.300\nBut if you have a constructor and\nnot a destructor, and\n\n272\n00:14:36.300 --> 00:14:38.970\nyou create a bunch of entities and\nthen you drop the references to them.\n\n273\n00:14:38.970 --> 00:14:42.875\nThey'll eventually get swept up by the\ngarbage collector as I've said before, and\n\n274\n00:14:42.875 --> 00:14:45.243\nyour number of entities\nmight not be true anymore.\n\n275\n00:14:45.243 --> 00:14:48.231\nBut this will essentially be the number\nof entities that we have created,\n\n276\n00:14:48.231 --> 00:14:51.600\nif that makes sense, whether or\nnot we still have references to them.\n\n277\n00:14:51.600 --> 00:14:54.790\nAnd so, within our constructors\nwe're gonna increment them\n\n278\n00:14:54.790 --> 00:14:57.310\nevery time we create one, sounds good?\n\n279\n00:14:57.310 --> 00:14:59.490\nAll right so\nlet's actually build our constructor now.\n\n280\n00:14:59.490 --> 00:15:01.710\nThese are the fields we're gonna need for\nentity.\n\n281\n00:15:01.710 --> 00:15:06.400\nWe're gonna make more when we do a car\nclass that's going to extend this entity.\n\n282\n00:15:06.400 --> 00:15:10.344\nBut I think we're good on that for\nnow, so let's do public entity and\n\n283\n00:15:10.344 --> 00:15:13.895\nwe're gonna give it all\nthe parameters it needs for this one.\n\n284\n00:15:13.895 --> 00:15:18.682\nSo let's do double xPosition,\n\n285\n00:15:18.682 --> 00:15:24.002\ndouble yPosition, double speed,\n\n286\n00:15:24.002 --> 00:15:31.110\ndouble angle degrees,\nor I'll just do angle.\n\n287\n00:15:32.140 --> 00:15:33.420\nAnd then, so I've got all those.\n\n288\n00:15:33.420 --> 00:15:34.669\nSo this is a constructor I've defined.\n\n289\n00:15:34.669 --> 00:15:39.879\nSo now at any point, it's public too, so\nat any point int he Java universe, you can\n\n290\n00:15:39.879 --> 00:15:44.867\nsay new entity and give it all four of\nthose parameters, and there's nothing in\n\n291\n00:15:44.867 --> 00:15:49.945\nthe constructor yet so it won't exactly do\nwhat we want it to do, but it will run.\n\n292\n00:15:49.945 --> 00:15:55.005\nSo, let's make sure that\nthe behaviors correct now,\n\n293\n00:15:55.005 --> 00:15:59.295\nso we're going to set all\nof the The fields, so\n\n294\n00:15:59.295 --> 00:16:02.850\nthat this.xPosition = xPosition.\n\n295\n00:16:02.850 --> 00:16:06.457\nAnd like I've said in the previous\nepisode if you don't put a this,\n\n296\n00:16:06.457 --> 00:16:11.060\nit's going to infer that you mean this\ngray one, the parameter variable.\n\n297\n00:16:11.060 --> 00:16:13.720\n&gt;&gt; Now Marty, actually I'm gonna\njump in on you a little bit.\n\n298\n00:16:13.720 --> 00:16:18.500\nSo that this, that's actually referring\nto this instance when it's constructed.\n\n299\n00:16:18.500 --> 00:16:19.260\n&gt;&gt; Yeah.\nAnd\n\n300\n00:16:19.260 --> 00:16:24.190\nnot necessarily to the arguments passed\nin, and just to be super duper clear.\n\n301\n00:16:24.190 --> 00:16:27.020\nCuz this is something I've seen people\nhave trouble with especially in\n\n302\n00:16:27.020 --> 00:16:29.940\nthese C based well JavaScript, Java.\n\n303\n00:16:29.940 --> 00:16:33.430\nIf there's a this keyword it\ncan be sometimes misunderstood,\n\n304\n00:16:33.430 --> 00:16:36.570\nyou should think of this as\nthe individual object constructed.\n\n305\n00:16:36.570 --> 00:16:39.080\nSo if you have a cookie template,\nthat's your class,\n\n306\n00:16:39.080 --> 00:16:40.870\nand you're stamping out cookies.\n\n307\n00:16:40.870 --> 00:16:43.320\nThis cookie right here\nis getting sprinkles,\n\n308\n00:16:43.320 --> 00:16:45.850\nthis cookie is getting chocolate frosting.\n\n309\n00:16:45.850 --> 00:16:50.830\nSo you should think of this as attaching\nproperties to a particular object.\n\n310\n00:16:50.830 --> 00:16:53.397\nAnd then without the this keyword\nit's typically local scoped to\n\n311\n00:16:53.397 --> 00:16:54.571\nthe constructor [CROSSTALK].\n\n312\n00:16:54.571 --> 00:16:57.320\n&gt;&gt; Yeah, so again, good thing there.\n\n313\n00:16:57.320 --> 00:16:57.960\nWhen we say this,\n\n314\n00:16:57.960 --> 00:17:00.950\nwe're meaning this instance that I'm\ncurrently constructing in this case.\n\n315\n00:17:00.950 --> 00:17:05.610\nOr this instance that I am performing a\nmethod on, that's what it's talking about.\n\n316\n00:17:05.610 --> 00:17:08.580\nSo I'm just gonna copy that line\nof code a couple times, and\n\n317\n00:17:08.580 --> 00:17:10.920\nI'm gonna change this one to yPosition.\n\n318\n00:17:12.990 --> 00:17:17.877\nI'm gonna change this one to,\nthis.speedMPH is what I called it,\n\n319\n00:17:17.877 --> 00:17:21.062\nand the parameter for this one was, speed.\n\n320\n00:17:21.062 --> 00:17:27.342\nAnd then this one was just angle,\nand it was angleDegrees for\n\n321\n00:17:27.342 --> 00:17:33.268\nthe field, can't spell though,\nokay that looks good.\n\n322\n00:17:33.268 --> 00:17:36.525\nOne thing we gotta be careful of\nis to make sure we increment that\n\n323\n00:17:36.525 --> 00:17:39.669\nnumEntities that I made, ++,\nand am I missing anything?\n\n324\n00:17:39.669 --> 00:17:40.822\nNope think that's good.\n\n325\n00:17:40.822 --> 00:17:44.950\nI've made this one constructor but\n\n326\n00:17:44.950 --> 00:17:53.354\nwhat if we want to have other\nconstructors that infer default behavior.\n\n327\n00:17:53.354 --> 00:17:59.356\nLet's do public entity and\nlet's say that we give it possession but\n\n328\n00:17:59.356 --> 00:18:03.690\nwe don't give it a speed or\na an angle, right?\n\n329\n00:18:03.690 --> 00:18:06.370\nSo we wanna just infer that it's\npointing right, angle zero,\n\n330\n00:18:06.370 --> 00:18:08.900\nand that it's not moving speed zero.\n\n331\n00:18:08.900 --> 00:18:13.780\nWhat we can do is just,\nlet's actually copy just this part\n\n332\n00:18:13.780 --> 00:18:17.400\ncuz I'm lazy and you should be too,\ngood programmers are lazy.\n\n333\n00:18:18.790 --> 00:18:25.930\nAll right, and then so what we will\ndo is this, like that and then what\n\n334\n00:18:27.330 --> 00:18:32.277\nwe're gonna call this width is (xPosition,\n\n335\n00:18:32.277 --> 00:18:38.340\nyPosition, 0, 0) like that.\n\n336\n00:18:38.340 --> 00:18:42.750\nThere are doubles so\nyou should probably do 0.0 just to be\n\n337\n00:18:42.750 --> 00:18:45.640\nsort of clear that you're talking about\ndouble variables and not integers.\n\n338\n00:18:47.140 --> 00:18:48.940\nLittle bit of a matter of\npersonal preference but\n\n339\n00:18:48.940 --> 00:18:50.690\nit's kind of the convention\nyou should use.\n\n340\n00:18:50.690 --> 00:18:53.640\nI think, and\nwhat if you give it none of the above,\n\n341\n00:18:53.640 --> 00:18:54.810\nwhat if you don't give it anything?\n\n342\n00:18:57.000 --> 00:18:59.567\nThis will sort of override the default\nconstructor that I mentioned in\n\n343\n00:18:59.567 --> 00:19:03.490\nthe last class, but let's just say\nthat it starts at the origin, right?\n\n344\n00:19:03.490 --> 00:19:08.540\nAnd so again it's gonna call that first\nconstructor we made with these same\n\n345\n00:19:08.540 --> 00:19:14.460\narguments with a 0.00.00.00.0 arguments.\n\n346\n00:19:14.460 --> 00:19:17.480\nThat's what it's gonna call\nthis other constructor with and\n\n347\n00:19:17.480 --> 00:19:19.310\nit's gonna do all the stuff\nin this constructor.\n\n348\n00:19:19.310 --> 00:19:21.120\nSo no matter which constructor we call,\n\n349\n00:19:21.120 --> 00:19:26.230\nit's eventually going to call this first\none and run with whatever we've given it.\n\n350\n00:19:26.230 --> 00:19:29.930\n&gt;&gt; Now Mark, I have a few questions,\nactually, I'm brimming with questions.\n\n351\n00:19:29.930 --> 00:19:32.485\nI've just been scribbling\nthe whole time off camera, but\n\n352\n00:19:32.485 --> 00:19:34.190\nyou have three constructors here.\n\n353\n00:19:34.190 --> 00:19:36.520\nI know you may have mentioned this, but\n\n354\n00:19:36.520 --> 00:19:40.600\njust remind us, we don't actually have to\nhave any constructors, is that correct?\n\n355\n00:19:40.600 --> 00:19:43.180\n&gt;&gt; So that is correct, but\nif you don't have any constructors,\n\n356\n00:19:43.180 --> 00:19:47.810\nyou're not gonna have your fields being\nset when you initialize the object at all.\n\n357\n00:19:47.810 --> 00:19:51.540\nSo if you have a zero\nargument constructor,\n\n358\n00:19:51.540 --> 00:19:54.840\nyou can put stuff in the body and\nit'll work just fine.\n\n359\n00:19:54.840 --> 00:20:00.510\nBut it's not gonna necessarily be how\nyou expect it to be, what am I saying?\n\n360\n00:20:00.510 --> 00:20:03.830\nIt's not gonna set the fields or\n\n361\n00:20:03.830 --> 00:20:05.770\ninitialize them the way\nthat you what them to be.\n\n362\n00:20:05.770 --> 00:20:10.310\nSo here with this four hemic constructor,\nI take in all four of those initial values\n\n363\n00:20:10.310 --> 00:20:14.580\nthat I want to establish and I set all\nfour of the fields equal to those.\n\n364\n00:20:14.580 --> 00:20:16.460\nIf I have a no-args constructor,\n\n365\n00:20:16.460 --> 00:20:21.640\nnone of that work is going to be done\nunless I do it in a non-default one.\n\n366\n00:20:21.640 --> 00:20:23.550\nSo the default constructor\nisn't gonna do that for you,\n\n367\n00:20:23.550 --> 00:20:27.430\nyou would have to override it and do it\nyourself which is what I have done here.\n\n368\n00:20:27.430 --> 00:20:30.860\nI've called with these sort of\ninitial values that I wanna set.\n\n369\n00:20:30.860 --> 00:20:32.710\n&gt;&gt; All right, so\na quick followup question,\n\n370\n00:20:32.710 --> 00:20:37.550\nwithin that top level constructor there,\nthe one that takes all four parameters.\n\n371\n00:20:37.550 --> 00:20:42.050\nSo you said numEntities++, except\nnumEntities is not by default zero at\n\n372\n00:20:42.050 --> 00:20:45.820\nthe top of the class even\nthough it's a static field.\n\n373\n00:20:45.820 --> 00:20:46.760\nWhy does that work?\n\n374\n00:20:46.760 --> 00:20:48.610\nThat seems like that should break.\n\n375\n00:20:48.610 --> 00:20:52.930\n&gt;&gt; So why does numEntities++ work?\n\n376\n00:20:52.930 --> 00:20:57.000\nSo it would be probably a good\nidea to put = 0 here, but\n\n377\n00:20:57.000 --> 00:21:02.903\nthe default value for\nan uninitialized entity should be 0.\n\n378\n00:21:02.903 --> 00:21:06.830\nAre you saying it hasn't been\ninitialized at all, is that, okay?\n\n379\n00:21:06.830 --> 00:21:08.760\nYeah, so\nits a good idea to initialize this,\n\n380\n00:21:08.760 --> 00:21:10.600\nI don't think it was giving\nme an error though, was it?\n\n381\n00:21:10.600 --> 00:21:15.385\nYeah, so its okay, if you have a static\ninteger with no initialization,\n\n382\n00:21:15.385 --> 00:21:16.783\nand you try to use it.\n\n383\n00:21:16.783 --> 00:21:20.901\nIt will just sort of infer that it's\nequal to zero when it starts out, and\n\n384\n00:21:20.901 --> 00:21:23.331\nthen whatever you change it to or\nadd to it,\n\n385\n00:21:23.331 --> 00:21:27.710\nit will reflect that accordingly\nwith an initial value of zero.\n\n386\n00:21:27.710 --> 00:21:31.708\nSo, yeah, that numEntities++ is just gonna\ntake, if we haven't created any yet,\n\n387\n00:21:31.708 --> 00:21:32.960\nit's gonna start at zero and\n\n388\n00:21:32.960 --> 00:21:35.730\nit's going to increment to one\nwhenever we create an entity.\n\n389\n00:21:35.730 --> 00:21:37.450\nAnd, no matter what that's\ngonna get called, and\n\n390\n00:21:37.450 --> 00:21:40.800\nit's only gonna get called once, because\nwe don't do it in the other constructors.\n\n391\n00:21:40.800 --> 00:21:43.740\nAll of our constructors point\nto this original big constructor\n\n392\n00:21:43.740 --> 00:21:45.110\nthat does all the work.\n\n393\n00:21:45.110 --> 00:21:47.480\n&gt;&gt; Final question about\nthese constructors, crazy,\n\n394\n00:21:47.480 --> 00:21:51.560\nconstructors are a little mind-bending so\nwe have to make sure we have clarity here.\n\n395\n00:21:51.560 --> 00:21:54.410\nIn the final two constructors, right,\nthe override or the default and\n\n396\n00:21:54.410 --> 00:21:57.860\nthen the one that assumes\nit's standing still.\n\n397\n00:21:57.860 --> 00:21:59.730\n&gt;&gt; Yeah.\n&gt;&gt; I think standing still, speed enable.\n\n398\n00:21:59.730 --> 00:22:00.350\n&gt;&gt; Yeah.\n\n399\n00:22:00.350 --> 00:22:04.200\n&gt;&gt; Those use this like a method or\na function if you will.\n\n400\n00:22:04.200 --> 00:22:06.722\n&gt;&gt; Yeah.\n&gt;&gt; Whereas this is the object instance,\n\n401\n00:22:06.722 --> 00:22:10.560\nnow, I've spent a chunk of\ntime talking about this.\n\n402\n00:22:10.560 --> 00:22:11.913\nWhat is that actually doing?\n\n403\n00:22:11.913 --> 00:22:14.330\nIs that saying this instance\nis other constructor?\n\n404\n00:22:14.330 --> 00:22:16.170\nJust go ahead and make a call to it?\n\n405\n00:22:16.170 --> 00:22:17.316\n&gt;&gt; Yeah I would say that, so\n\n406\n00:22:17.316 --> 00:22:23.280\nessentially it's referring to the other\nconstructor of the same class, right?\n\n407\n00:22:23.280 --> 00:22:27.630\nSo whenever I have an instance I'm\ncreating, I'm gonna use new and\n\n408\n00:22:27.630 --> 00:22:31.010\nI'm gonna give it one of\nthese three constructors.\n\n409\n00:22:31.010 --> 00:22:34.870\nAnd in this case if I give it the no-args\nconstructor, no arguments sorry,\n\n410\n00:22:34.870 --> 00:22:37.920\nI should be a little more\nclear with my abbreviations.\n\n411\n00:22:37.920 --> 00:22:41.287\nAll it's gonna do, the only line of code\nwithin the body of this constructor is\n\n412\n00:22:41.287 --> 00:22:43.904\njust sort of passing the buck\nback to the first constructor.\n\n413\n00:22:43.904 --> 00:22:48.007\nAnd saying, okay, we're gonna infer\nthat these default values of zeros that\n\n414\n00:22:48.007 --> 00:22:50.130\nare kind of sane, like they make sense.\n\n415\n00:22:50.130 --> 00:22:52.860\nIf I don't give you something it kind of\nmakes sense to infer that it's gonna be\n\n416\n00:22:52.860 --> 00:22:56.700\nzero, so\nyeah that's sort of what's going on here.\n\n417\n00:22:57.810 --> 00:23:02.310\nAgain since I've established the default\nvalue of doubles and integers is 0.0.\n\n418\n00:23:02.310 --> 00:23:05.000\nSo you don't necessarily need that but\n\n419\n00:23:05.000 --> 00:23:06.800\nwhat if you wanted to use\ndifferent default behavior?\n\n420\n00:23:06.800 --> 00:23:08.701\nWhat if you wanted them to\nbe pointing up by default,\n\n421\n00:23:08.701 --> 00:23:10.267\nthen you would have to definitely do this.\n\n422\n00:23:10.267 --> 00:23:17.480\nBecause you want your angle to be 90, and\njust something to be aware of is that.\n\n423\n00:23:17.480 --> 00:23:19.440\nSo I think that's about it,\n\n424\n00:23:19.440 --> 00:23:21.730\none other thing I should\ndefinitely talk about though.\n\n425\n00:23:21.730 --> 00:23:25.150\nYou'll notice we don't have a return\ntype here, so I don't do public int,\n\n426\n00:23:25.150 --> 00:23:29.270\nlowercase sorry, Entity like that\nbecause that doesn't make sense.\n\n427\n00:23:29.270 --> 00:23:32.340\nWe don't have a return type for these.\n\n428\n00:23:32.340 --> 00:23:36.180\nImplicitly, when you have a constructor\nthat you don't put a return type at all,\n\n429\n00:23:36.180 --> 00:23:38.470\nyou don't put void,\nyou don't put anything.\n\n430\n00:23:38.470 --> 00:23:40.930\nBut what's happening is\nit's going to return\n\n431\n00:23:40.930 --> 00:23:43.740\nan instance of this type of class, right?\n\n432\n00:23:43.740 --> 00:23:48.060\nIt's not going to return an integer or\na string or anything,\n\n433\n00:23:48.060 --> 00:23:51.060\nit's going to return a reference\nto an entity and that's all.\n\n434\n00:23:51.060 --> 00:23:54.900\nAnd it's going to do that automatically,\nwe don't have to put public entity entity,\n\n435\n00:23:54.900 --> 00:23:56.610\ncuz that would be pretty\nredundant actually.\n\n436\n00:23:56.610 --> 00:24:00.500\nIt wouldn't make that much sense to have\nto do that, we just leave it like this.\n\n437\n00:24:00.500 --> 00:24:03.860\nBut I think that's good, I think we've got\nour fields, we've got our constructors.\n\n438\n00:24:03.860 --> 00:24:06.180\nNow we can do our methods,\nsome of this works.\n\n439\n00:24:06.180 --> 00:24:09.390\n&gt;&gt; Mark I'm actually going to\njump in here for you and ask.\n\n440\n00:24:09.390 --> 00:24:11.640\nDo any of our tests pass at this point?\n\n441\n00:24:11.640 --> 00:24:12.710\n&gt;&gt; We can try, yeah, let's see.\n\n442\n00:24:13.850 --> 00:24:17.800\nProbably not, it's going to say that\nbecause I've got other classes I think.\n\n443\n00:24:18.830 --> 00:24:19.330\nIs it?\n\n444\n00:24:20.540 --> 00:24:24.799\nSo this class is not in here,\nwe're not gonna worry about that yet.\n\n445\n00:24:24.799 --> 00:24:29.620\nIt says error, so exist, well yeah,\nno, this still isn't passing.\n\n446\n00:24:29.620 --> 00:24:31.908\nSo I haven't even created\nsome of these tests, but\n\n447\n00:24:31.908 --> 00:24:34.290\nI don't think any of\nour things are passing.\n\n448\n00:24:34.290 --> 00:24:35.720\nIt's not even, yeah.\n\n449\n00:24:35.720 --> 00:24:38.078\n&gt;&gt; Well Mark,\nI know you're chomping at the bit and\n\n450\n00:24:38.078 --> 00:24:40.170\nyou have to implement those methods right?\n\n451\n00:24:40.170 --> 00:24:43.440\nIn order for our test to pass and\nwe're using this TDD approach,\n\n452\n00:24:43.440 --> 00:24:45.420\nand this is kind of a bad place to leave.\n\n453\n00:24:45.420 --> 00:24:49.060\nBut we are unfortunately out of time for\nthis episode, looks like we're coming back\n\n454\n00:24:49.060 --> 00:24:50.230\nfor a part two-\n&gt;&gt; Yep.\n\n455\n00:24:50.230 --> 00:24:54.610\n&gt;&gt; For methods, so\ndefinitely join us there, but for now,\n\n456\n00:24:54.610 --> 00:24:56.380\nwe're gonna go ahead and wrap this one up.\n\n457\n00:24:56.380 --> 00:24:59.710\nSigning off for DevProTV,\nI 've been your host Justin Dennison.\n\n458\n00:24:59.710 --> 00:25:00.570\n&gt;&gt; Mark Davis.\n\n459\n00:25:00.570 --> 00:25:03.794\n&gt;&gt; And we'll see you next time.\n\n460\n00:25:03.794 --> 00:25:07.583\n[SOUND]\n\n",
          "vimeoId": "226300314"
        },
        {
          "description": "In this episode, Justin and Mark discuss the model of inheritance used by Java. They discuss and explore the similarity and differences between interfaces and abstract classes.",
          "length": "2020",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-2-object_oriented_implementation_pt2-071917-PGM.00_35_01_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-2-object_oriented_implementation_pt2-071917-PGM.00_35_01_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectiveorientedjava-1-20-2-object_oriented_implementation_pt2-071917-PGM.00_35_01_00.Still001-sm.jpg",
          "title": "Object-Oriented Implementation Part 2",
          "transcript": "",
          "vimeoId": "227423086"
        },
        {
          "description": "In this episode, Justin and Mark discuss the model of inheritance used by Java. They discuss and explore the similarity and differences between interfaces and abstract classes.",
          "length": "1479",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-21-object_oriented_interfaces_and_hierarchy-072617-PGM.00_28_33_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-21-object_oriented_interfaces_and_hierarchy-072617-PGM.00_28_33_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-21-object_oriented_interfaces_and_hierarchy-072617-PGM.00_28_33_23.Still001-sm.jpg",
          "title": "Object-Oriented Inheritance and Hierarchy",
          "transcript": "",
          "vimeoId": "227423957"
        },
        {
          "description": "In this episode, Justin and Mark show the use and construction of abstract classes and interfaces. The discuss some of the subtle differences when considering classes.",
          "length": "1487",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-1-abstract-classes-and-interfaces-072617-PGM.00_30_09_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-1-abstract-classes-and-interfaces-072617-PGM.00_30_09_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-1-abstract-classes-and-interfaces-072617-PGM.00_30_09_01.Still001-sm.jpg",
          "title": "Abstract Classes and Interfaces",
          "transcript": "",
          "vimeoId": "227424371"
        },
        {
          "description": "In this episode, Justin and Mark use the interface created to implement a concrete class. Mark shows how the class is adhering to the interface which is similar to a programmatic contract.",
          "length": "1507",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-2-abstract-classes-and-interfaces_pt.2-072617-PGM.00_24_57_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-2-abstract-classes-and-interfaces_pt.2-072617-PGM.00_24_57_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-2-abstract-classes-and-interfaces_pt.2-072617-PGM.00_24_57_10.Still001-sm.jpg",
          "title": "Abstract Classes and Interfaces Part 2",
          "transcript": "",
          "vimeoId": "227424586"
        },
        {
          "description": "In this episode, Mark continues working on the Car class as a way of illustrating use of inheritance and interfaces.",
          "length": "2031",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-3-abstract-classes-and-interfaces_pt_3-072617-PGM.00_34_50_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-3-abstract-classes-and-interfaces_pt_3-072617-PGM.00_34_50_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-3-abstract-classes-and-interfaces_pt_3-072617-PGM.00_34_50_17.Still001-sm.jpg",
          "title": "Abstract Classes and Interfaces Part 3",
          "transcript": "",
          "vimeoId": "227424804"
        },
        {
          "description": "In this episode, Mark finishes implementing the Car class and finally gets all of the unit tests passing.",
          "length": "1287",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-4-abstract-classes-and-interfaces_pt_4-072617.00_21_17_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-4-abstract-classes-and-interfaces_pt_4-072617.00_21_17_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-22-4-abstract-classes-and-interfaces_pt_4-072617.00_21_17_15.Still001-sm.jpg",
          "title": "Abstract Classes and Interfaces Part 4",
          "transcript": "",
          "vimeoId": "227425243"
        },
        {
          "description": "In this episode, Justin and Mark create the graphical view for the Car class from the previous episode. In particular, Mark demonstrates the creation of sprite and graphics using Graphics Library Framework(GLFW) and Lightweight Java Game Library(lwjgl).",
          "length": "2043",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-1-2d_graphics_and_sprites-072617-PGM.00_36_19_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-1-2d_graphics_and_sprites-072617-PGM.00_36_19_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-1-2d_graphics_and_sprites-072617-PGM.00_36_19_12.Still001-sm.jpg",
          "title": "2d Graphics and Sprites",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.341 --> 00:00:16.240\nGreeting everyone and welcome to\nanother exciting episode of DevProTV.\n\n3\n00:00:16.240 --> 00:00:17.892\nI'm your host Justin Dennison, and\n\n4\n00:00:17.892 --> 00:00:20.730\nwe're continuing on with our\nobject-oriented Java series.\n\n5\n00:00:20.730 --> 00:00:23.513\nAnd we're actually going to\nstart to see some things come to\n\n6\n00:00:23.513 --> 00:00:25.230\nfruition on the screen.\n\n7\n00:00:25.230 --> 00:00:29.439\nWe're messing with 2D Sprites and graphics\ntoday and, well, that might entail a lot.\n\n8\n00:00:29.439 --> 00:00:33.065\nBut luckily we have a expert\non-hand to help us with just that.\n\n9\n00:00:33.065 --> 00:00:34.085\nThe Mr. Mark Davis.\n\n10\n00:00:34.085 --> 00:00:34.815\nHow you doing today Mark?\n\n11\n00:00:34.815 --> 00:00:35.634\n&gt;&gt; Pretty good, pretty good.\n\n12\n00:00:35.634 --> 00:00:40.165\n&gt;&gt; All right, so Mark we're gonna be\nhandling 2D graphics and sprites.\n\n13\n00:00:40.165 --> 00:00:43.155\nWhat are our first steps on\nactually getting this to work?\n\n14\n00:00:43.155 --> 00:00:45.505\n&gt;&gt; So really we do need to\nuse a lot of libraries here.\n\n15\n00:00:45.505 --> 00:00:49.760\nThere's GLFW,\nwhich is the Graphic's Library Framework.\n\n16\n00:00:49.760 --> 00:00:53.050\nLWJGL which\nthe LightWeight Java Gain Library.\n\n17\n00:00:53.050 --> 00:00:55.729\nAnd the latter will actually\nkind of include the former.\n\n18\n00:00:55.729 --> 00:00:57.695\nIt's part of LWJGLGFW.\n\n19\n00:00:57.695 --> 00:01:01.100\nYou've probably you've\nheard of OpenGL before.\n\n20\n00:01:01.100 --> 00:01:06.960\nIt contains all these sorts of things to\nmake better use of your graphics card and\n\n21\n00:01:06.960 --> 00:01:12.384\nrender graphics on the screen in such\na way that is more memory efficient,\n\n22\n00:01:12.384 --> 00:01:17.126\ncomputationally efficient, and\nall that good stuff, right?\n\n23\n00:01:17.126 --> 00:01:20.440\nSo Java itself doesn't do a great\njob of some of this stuff.\n\n24\n00:01:20.440 --> 00:01:23.860\nSo there's sort of some of these\nnative bindings that we're gonna have\n\n25\n00:01:23.860 --> 00:01:28.510\nto import into the Clips Workspace, sort\nof to make sure that our performance for\n\n26\n00:01:28.510 --> 00:01:32.610\nour game works as we might expect.\n\n27\n00:01:32.610 --> 00:01:33.530\nI think it's notable.\n\n28\n00:01:33.530 --> 00:01:37.744\nThere are ways to do 2D graphics\nin Java just like without LWJGL.\n\n29\n00:01:37.744 --> 00:01:43.550\nThere's these JFrames and JPanels, and you\ncan render all sorts of things onto them.\n\n30\n00:01:44.550 --> 00:01:48.210\nWe might do some of that, but\ngenerally I don't think it's great for\n\n31\n00:01:48.210 --> 00:01:49.610\nsomething like a game at all.\n\n32\n00:01:49.610 --> 00:01:52.750\nThe refresh rate for that kind of\nthing is not going to be very high.\n\n33\n00:01:52.750 --> 00:01:56.940\nYou're gonna be experiencing\na good bit more lag\n\n34\n00:01:56.940 --> 00:02:00.550\nif you try to just do that than\nyou would with a method like this.\n\n35\n00:02:00.550 --> 00:02:05.700\nThis is, LWJGL is a library\ndesigned to make games with Java.\n\n36\n00:02:05.700 --> 00:02:10.850\nIt is the standard essentially for\nhow games are made with Java.\n\n37\n00:02:10.850 --> 00:02:15.220\nMinecraft is one of the most\npopular Java games made with LWJGL.\n\n38\n00:02:15.220 --> 00:02:19.160\nIt works for, there's 2D stuff for\nit, there's 3D stuff for it.\n\n39\n00:02:19.160 --> 00:02:21.000\nLet's take a look here\nat my computer though.\n\n40\n00:02:21.000 --> 00:02:23.760\nSo I've got this folder,\nI've got these textures.\n\n41\n00:02:23.760 --> 00:02:25.600\nI've already put them\ninto my workspace here.\n\n42\n00:02:25.600 --> 00:02:28.360\nI actually put them bot there and there,\n\n43\n00:02:28.360 --> 00:02:30.250\njust cuz I'm not sure where\nexactly it's gonna pull from,\n\n44\n00:02:30.250 --> 00:02:32.980\nand I don't wanna have to bother thinking\nabout it, I've got bigger fish to fry.\n\n45\n00:02:32.980 --> 00:02:37.750\nSo I can close out all of these car\nclasses, our test is passing so\n\n46\n00:02:37.750 --> 00:02:41.670\nwe can assume that the class is gonna\nwork as we would expected it to for now.\n\n47\n00:02:41.670 --> 00:02:46.080\nBut I've got some sites up that we're\ngonna have to download some stuff from.\n\n48\n00:02:46.080 --> 00:02:48.700\nSo here is the LWJGL2 site.\n\n49\n00:02:48.700 --> 00:02:50.100\nThis is a legacy.\n\n50\n00:02:50.100 --> 00:02:53.350\nFrom this,\nI actually ended up downloading this.\n\n51\n00:02:53.350 --> 00:02:58.617\nAnd I was having problems\nwith the LWJGL 3.1.2 natives.\n\n52\n00:02:58.617 --> 00:03:02.150\nAgain, you sort of want to\ncheck Windows here I guess\n\n53\n00:03:02.150 --> 00:03:05.140\nto specify that you are working\nfrom the Windows operating system.\n\n54\n00:03:05.140 --> 00:03:08.620\nAnd it'll include it with your\ndownload when you do download this.\n\n55\n00:03:10.210 --> 00:03:13.200\nSo I would download both 3.1.2 and 2.9.3.\n\n56\n00:03:13.200 --> 00:03:18.790\nI end up using the natives from 2.9.3\njust cuz it had them in a folder for\n\n57\n00:03:18.790 --> 00:03:19.820\nme already.\n\n58\n00:03:19.820 --> 00:03:22.290\nAnd I was having difficulty\nimporting them into Eclipse.\n\n59\n00:03:22.290 --> 00:03:27.740\nSo if you can get it to work this way with\njust the 3.1.2, that's fine, be my guest.\n\n60\n00:03:27.740 --> 00:03:31.680\nBut I downloaded both of them, and\nI'm gonna be doing it that way.\n\n61\n00:03:31.680 --> 00:03:33.257\nSo we can open this up.\n\n62\n00:03:33.257 --> 00:03:36.994\nIt's just something I had noticed\nwhen I was in the middle of sort of\n\n63\n00:03:36.994 --> 00:03:41.734\nfiguring out my outline for this episode,\nthat I was having problems with that, and\n\n64\n00:03:41.734 --> 00:03:43.470\nthis was my work around then.\n\n65\n00:03:43.470 --> 00:03:44.667\nOnce you get it working,\n\n66\n00:03:44.667 --> 00:03:48.410\nit just seems a little bit silly to\nbother doing it a different way.\n\n67\n00:03:48.410 --> 00:03:50.026\nAlso that's not what I meant to do at all.\n\n68\n00:03:50.026 --> 00:03:55.780\n[LAUGH] I should have extracted that\ninto a folder of some kind, but I think\n\n69\n00:03:55.780 --> 00:04:01.130\nit will be fine if I just make sure to\nnot delete a couple of things here, okay?\n\n70\n00:04:01.130 --> 00:04:04.146\nLet's do that into a folder instead,\nlike that.\n\n71\n00:04:06.382 --> 00:04:08.710\nOkay, much better, all right.\n\n72\n00:04:08.710 --> 00:04:10.930\nSo these two can go away now.\n\n73\n00:04:10.930 --> 00:04:13.580\nThis, I've already\nextracted somewhere else.\n\n74\n00:04:13.580 --> 00:04:17.040\nWe really only need the natives from\nthis one, so I'm gonna pull them out.\n\n75\n00:04:17.040 --> 00:04:18.210\nAnd then delete the 2.9.3.\n\n76\n00:04:18.210 --> 00:04:23.260\nI'm gonna copy this into our car.\n\n77\n00:04:23.260 --> 00:04:24.530\nSo copy files and folders.\n\n78\n00:04:24.530 --> 00:04:27.140\nI don't wanna link them,\nI wanna copy them.\n\n79\n00:04:27.140 --> 00:04:31.920\nAnd then this, I'm gonna copy really only\nthe JARs, is what I'm worried about.\n\n80\n00:04:31.920 --> 00:04:33.700\nLike so.\n\n81\n00:04:33.700 --> 00:04:37.075\nSo I'm gonna copy these into a lib folder.\n\n82\n00:04:39.008 --> 00:04:41.411\nNot what I meant to do.\n\n83\n00:04:41.411 --> 00:04:43.180\nThat's fine.\n\n84\n00:04:43.180 --> 00:04:46.544\nNew folder, lib, boom.\n\n85\n00:04:46.544 --> 00:04:47.820\nBoom, paste them in.\n\n86\n00:04:49.930 --> 00:04:50.799\nWhy isn't that working?\n\n87\n00:04:53.004 --> 00:04:55.940\nOkay, that's a little frustrating, sorry.\n\n88\n00:04:58.480 --> 00:05:02.260\nCopy, paste, there we go.\n\n89\n00:05:02.260 --> 00:05:05.860\nFinally, all right, and then copy\nthe lib folder into there as well.\n\n90\n00:05:06.938 --> 00:05:10.340\nSo, some of these libraries, I need\nto add them into the build path now.\n\n91\n00:05:10.340 --> 00:05:14.890\nSo I'm going to go into properties,\nand Java Build Path.\n\n92\n00:05:16.380 --> 00:05:16.887\nAdd JARs.\n\n93\n00:05:18.790 --> 00:05:23.230\nSo, car, wait, this is the car one, lib.\n\n94\n00:05:23.230 --> 00:05:28.170\nAnd I'm just going to add like all these,\nbasically.\n\n95\n00:05:28.170 --> 00:05:33.980\nSo, I'm going to do shift-click,\nto select all of them at once.\n\n96\n00:05:33.980 --> 00:05:36.270\nIf you click in one place, and\nthen shift-click in another,\n\n97\n00:05:36.270 --> 00:05:39.440\nit'll just highlight all of them and then\nyou don't have to add them all separately,\n\n98\n00:05:39.440 --> 00:05:41.400\nbecause that would be a nightmare.\n\n99\n00:05:41.400 --> 00:05:46.241\nOne more thing I have to do though,\nI gotta make sure that\n\n100\n00:05:46.241 --> 00:05:51.193\nthe bindings for,\ndidn't mean to close out of that yet.\n\n101\n00:05:51.193 --> 00:05:54.183\nThe natives are bound to this LWJGR jar.\n\n102\n00:05:54.183 --> 00:05:55.202\nWhat happened?\n\n103\n00:05:55.202 --> 00:05:59.330\nOkay, I clicked the wrong one, that's all.\n\n104\n00:05:59.330 --> 00:06:00.510\nOpen it up.\n\n105\n00:06:00.510 --> 00:06:02.860\nSo native library location.\n\n106\n00:06:02.860 --> 00:06:04.620\nWe're just gonna edit that.\n\n107\n00:06:04.620 --> 00:06:08.198\nAnd we're gonna go to our workspace,\ncar, native.\n\n108\n00:06:08.198 --> 00:06:12.590\nWindows, like that, all right.\n\n109\n00:06:12.590 --> 00:06:14.110\nSo I think it should be working now.\n\n110\n00:06:14.110 --> 00:06:17.160\nI'm pretty sure that's everything I\ndid before, when I was preparing for\n\n111\n00:06:17.160 --> 00:06:17.670\nthis episode.\n\n112\n00:06:17.670 --> 00:06:18.390\nBut we'll figure it out.\n\n113\n00:06:18.390 --> 00:06:20.840\nI'm gonna try and import some stuff, and\n\n114\n00:06:20.840 --> 00:06:23.240\nit'll holler at us if it's\nnot working as expected.\n\n115\n00:06:24.530 --> 00:06:33.035\nSo import static org.lwjgl.glfw.glfw.\n\n116\n00:06:33.035 --> 00:06:37.130\nLike that, cool.\n\n117\n00:06:37.130 --> 00:06:38.690\nSo we're gonna want to\nimport that statically.\n\n118\n00:06:38.690 --> 00:06:44.160\nAnd we're going to import the GL11,\nI think,\n\n119\n00:06:44.160 --> 00:06:50.622\nwhich is the way OpenGL did their\nclass structure is a little bit weird.\n\n120\n00:06:50.622 --> 00:06:53.900\nThey sorta have a class for\neach individual version.\n\n121\n00:06:53.900 --> 00:06:55.880\nYeah, well, they're gross, I think.\n\n122\n00:06:55.880 --> 00:07:03.270\nBut 11 or eleven is just referring\nto the 1.1 version of their library.\n\n123\n00:07:03.270 --> 00:07:07.626\nSort of all the things that\nwere included in release 1.1.\n\n124\n00:07:07.626 --> 00:07:11.224\nSo, opengl.gl11.\n\n125\n00:07:11.224 --> 00:07:15.900\nAnd I'm gonna leave a wild card\nat the end of both of these.\n\n126\n00:07:15.900 --> 00:07:17.970\nThat way it imports the whole class.\n\n127\n00:07:17.970 --> 00:07:21.530\nI don't have to worry about importing\nevery single method or anything like that.\n\n128\n00:07:23.390 --> 00:07:24.910\nSo it's giving me a warning on these.\n\n129\n00:07:24.910 --> 00:07:25.640\nI just wanna make sure.\n\n130\n00:07:25.640 --> 00:07:27.600\nOkay, it's just unused import.\n\n131\n00:07:27.600 --> 00:07:28.680\n&gt;&gt; Now, Mark, let me jump in here.\n\n132\n00:07:28.680 --> 00:07:30.060\nThat import static.\n\n133\n00:07:30.060 --> 00:07:31.180\nWhat exactly is that doing?\n\n134\n00:07:31.180 --> 00:07:33.650\nI am trying to dig back into my brain.\n\n135\n00:07:33.650 --> 00:07:35.792\nBut how is that different from\nthe normal import statement?\n\n136\n00:07:35.792 --> 00:07:38.080\n&gt;&gt; Good, so that's a good question.\n\n137\n00:07:38.080 --> 00:07:39.530\nWhen you are import something statically,\n\n138\n00:07:39.530 --> 00:07:41.470\nyou don't have to\nreference the whole class.\n\n139\n00:07:41.470 --> 00:07:46.520\nYou don't have to do gl11.,\ngl11 being the class.\n\n140\n00:07:46.520 --> 00:07:47.830\nYou don't have to do gl11.method.\n\n141\n00:07:47.830 --> 00:07:49.122\nYou just do method.\n\n142\n00:07:49.122 --> 00:07:54.110\nAnd so that works fine as long as you\ndon't have methods that share sort of like\n\n143\n00:07:54.110 --> 00:07:55.126\nthe same name.\n\n144\n00:07:55.126 --> 00:08:00.043\nYou can't import statically two different\nclasses that have similar methods.\n\n145\n00:08:00.043 --> 00:08:04.898\nSo if I had my own square root method,\nand I had the math.squareroot method.\n\n146\n00:08:04.898 --> 00:08:08.558\nI'd have problems if I tried to import\nstatically the math class because I've\n\n147\n00:08:08.558 --> 00:08:10.230\nsort of got two different methods.\n\n148\n00:08:10.230 --> 00:08:11.640\nAnd it doesn't know which one to use.\n\n149\n00:08:11.640 --> 00:08:14.940\nSo this import static thing is\njust sort of a shorthand way of\n\n150\n00:08:14.940 --> 00:08:17.760\nmaking sure you can get\nin all of your method\n\n151\n00:08:17.760 --> 00:08:21.640\ncalls without really having to worry too\nmuch about what class they're coming from.\n\n152\n00:08:21.640 --> 00:08:23.846\nSo with that out of the way.\n\n153\n00:08:23.846 --> 00:08:25.694\nI think we can get started\non some stuff here.\n\n154\n00:08:25.694 --> 00:08:28.840\nWe've already got that entities list.\n\n155\n00:08:28.840 --> 00:08:32.000\nIt could be a set too,\nI'm not gonna worry too much about though\n\n156\n00:08:32.000 --> 00:08:33.870\njust because we haven't\ntalked about collections yet.\n\n157\n00:08:35.112 --> 00:08:37.686\nBut we're gonna actually\nmake a main method,\n\n158\n00:08:37.686 --> 00:08:41.184\nwe haven't really made one yet,\nand inside this main method,\n\n159\n00:08:41.184 --> 00:08:44.556\nwe're sort of gonna put the flow for\nour game logic, right?\n\n160\n00:08:44.556 --> 00:08:48.066\nAnd the first thing we need to do\nis try to initialize GLFW, and\n\n161\n00:08:48.066 --> 00:08:51.520\nif that doesn't work,\nwe're gonna throw an exception.\n\n162\n00:08:51.520 --> 00:08:53.940\nSay, wait this isn't working at all.\n\n163\n00:08:53.940 --> 00:09:02.472\nThrow new illegal state\nexception glfw no initialize.\n\n164\n00:09:02.472 --> 00:09:07.404\nI'm not gonna worry about spelling,\n\n165\n00:09:07.404 --> 00:09:11.570\nso if not GLFW in it, like that.\n\n166\n00:09:13.090 --> 00:09:18.610\nAnd like I said, this is a static import\nthat we've done up here, but it's in that\n\n167\n00:09:18.610 --> 00:09:24.050\nGLFW class so, if you took that out you\ncould do something like GLFW.glfw in it.\n\n168\n00:09:24.050 --> 00:09:26.888\nBut his is kind of redundant\nway of referencing that.\n\n169\n00:09:26.888 --> 00:09:30.379\nSo that's the first thing we do.\n\n170\n00:09:30.379 --> 00:09:31.734\nWhat else we have to do?\n\n171\n00:09:31.734 --> 00:09:38.029\nLong window = glfwCreateWindow,\n\n172\n00:09:40.844 --> 00:09:43.297\nNow we're gonna have to pass\nthat some parameters so\n\n173\n00:09:43.297 --> 00:09:45.257\nwe wanna pass it the window size, right?\n\n174\n00:09:45.257 --> 00:09:51.550\nSo we're just gonna do 800 by 600 so\n800 wide 600 tall.\n\n175\n00:09:51.550 --> 00:09:57.970\nAnd we'll call it Car Game and\nwe'll give it a couple zeroes as well.\n\n176\n00:09:57.970 --> 00:10:00.990\nI wouldn't be too worried\nabout some of these arguments.\n\n177\n00:10:00.990 --> 00:10:06.534\nAgain, this method here glfw create\nwindow, it says take a long and\n\n178\n00:10:06.534 --> 00:10:10.828\na long, so\nI guess this is a 0L that it's taking in.\n\n179\n00:10:10.828 --> 00:10:13.507\nBut those are sort of parameters\nthat we don't necessarily have\n\n180\n00:10:13.507 --> 00:10:15.700\nto concern ourselves with for\nsomething like this.\n\n181\n00:10:15.700 --> 00:10:19.527\nIf you really wanted to know sort of on\na finer level what all of these method\n\n182\n00:10:19.527 --> 00:10:23.788\ncalls that I'm using statically are doing,\nyou can look at the documentation for\n\n183\n00:10:23.788 --> 00:10:25.070\nthese classes.\n\n184\n00:10:25.070 --> 00:10:28.042\nI don't really wanna talk about them in\ndepth personally cuz I don't know I didn't\n\n185\n00:10:28.042 --> 00:10:28.561\nneed to know.\n\n186\n00:10:28.561 --> 00:10:32.479\nBut partially just because the whole\npoint is to obstruct all that information\n\n187\n00:10:32.479 --> 00:10:33.540\naway right?\n\n188\n00:10:33.540 --> 00:10:36.258\nWe know that this GLFW\ncreates our window And\n\n189\n00:10:36.258 --> 00:10:38.833\nthat it get's stored as a long variable.\n\n190\n00:10:38.833 --> 00:10:43.534\nSo that's really all we have to keep track\nof, this long variable window is going to\n\n191\n00:10:43.534 --> 00:10:47.374\nkeep track of our window for us and\ncontain all of that information.\n\n192\n00:10:47.374 --> 00:10:51.222\nWe're gonna have to show our window now,\nglfwShow window and\n\n193\n00:10:51.222 --> 00:10:54.730\nlet's pass at the window\nthat we just made.\n\n194\n00:10:54.730 --> 00:10:57.270\nAnd at this point, I would like\nto run this and see what we get.\n\n195\n00:10:57.270 --> 00:10:59.710\nI think it might flash on the screen and\nthen disappear though.\n\n196\n00:11:02.930 --> 00:11:04.988\nMaybe, yeah, I think it just did that.\n\n197\n00:11:04.988 --> 00:11:09.510\nSo, yeah, it says terminated now.\n\n198\n00:11:09.510 --> 00:11:13.743\nWe're gonna need to sort of have a loop,\nto say continue showing the window, right?\n\n199\n00:11:13.743 --> 00:11:17.330\nBut if we run it again,\nit definitely flashed on my screen.\n\n200\n00:11:17.330 --> 00:11:21.127\nSo something is happening we just aren't\nreally at the point yet where we can\n\n201\n00:11:21.127 --> 00:11:25.183\nreally have a recurring object on the\nscreen where we can see what's happening.\n\n202\n00:11:25.183 --> 00:11:31.334\nBut glfwMakeContextCurrent is\nanother thing we gonna have to run.\n\n203\n00:11:33.404 --> 00:11:34.835\nAnd pass that also the window.\n\n204\n00:11:37.110 --> 00:11:37.773\nLike that.\n\n205\n00:11:39.800 --> 00:11:42.995\nWe're gonna need to\nGL.Create capabilities.\n\n206\n00:11:46.439 --> 00:11:50.010\nAnd, no args there I don't believe, right?\n\n207\n00:11:50.010 --> 00:11:50.870\nYeah.\n\n208\n00:11:50.870 --> 00:11:53.500\nSo, now it's capable of\nrendering textures with open GL.\n\n209\n00:11:53.500 --> 00:11:54.500\nThat's what this was.\n\n210\n00:11:54.500 --> 00:11:57.370\nSo we've set up some of the stuff in GLFW.\n\n211\n00:11:57.370 --> 00:11:58.730\nWith the window and\n\n212\n00:11:58.730 --> 00:12:02.510\nnow our openGL is able to actually\nrender your graphics on to the screen.\n\n213\n00:12:04.970 --> 00:12:07.026\nWe want to also, glEnable and\n\n214\n00:12:07.026 --> 00:12:11.401\nthis is kind of frustrating you\nhave to do something like this.\n\n215\n00:12:11.401 --> 00:12:13.850\nI don't really think that they should\nhave made it so you have to do this.\n\n216\n00:12:13.850 --> 00:12:16.850\nAnd I don't think there's any reason\nwhy it should have to be this way.\n\n217\n00:12:16.850 --> 00:12:19.610\nBut you do have to specify\nthat you're doing 2D graphics,\n\n218\n00:12:19.610 --> 00:12:22.030\nthat you're going to render\n2D textures onto the screen.\n\n219\n00:12:23.452 --> 00:12:27.524\nglClear color, and you could actually\nset this to whatever you want, but\n\n220\n00:12:27.524 --> 00:12:31.661\nwhy don't we clear our screen, this is\nessentially saying this is the base\n\n221\n00:12:31.661 --> 00:12:35.488\ncolor that we're going to start from,\nsort of like the background.\n\n222\n00:12:35.488 --> 00:12:38.860\nAnd it's just gonna be an RGBA\na value that we're gonna give, so\n\n223\n00:12:38.860 --> 00:12:41.733\nthere's a parameter for\nred, a parameter for green,\n\n224\n00:12:41.733 --> 00:12:44.100\na parameter blue and\na parameter for alpha.\n\n225\n00:12:44.100 --> 00:12:44.955\nI try to do that.\n\n226\n00:12:44.955 --> 00:12:46.070\nNever mind.\n\n227\n00:12:46.070 --> 00:12:49.740\nI tried to make it so that it was like\nleft to right for you guys it worked.\n\n228\n00:12:49.740 --> 00:12:52.350\nAnyway, I was happy about that.\n\n229\n00:12:52.350 --> 00:12:57.301\nSo it's RGBA If we wanted it to be white\nfor example we would just max all of those\n\n230\n00:12:57.301 --> 00:13:01.670\nout, make them 111 and\nthen alpha is kind of irrelevant for this.\n\n231\n00:13:01.670 --> 00:13:07.010\nIf we wanted it to be black we would\ndo 0f0f0f and then again alpha.\n\n232\n00:13:07.010 --> 00:13:10.790\nSo let's say we want it to be gray, right?\n\n233\n00:13:10.790 --> 00:13:13.960\n.5f just like across the board.\n\n234\n00:13:13.960 --> 00:13:17.200\nAnd then whatever for that one, right?\n\n235\n00:13:17.200 --> 00:13:20.412\nSo that's establishing our ClearColor,\nyou can see your's is whatever you want.\n\n236\n00:13:20.412 --> 00:13:23.990\nIf you wanted it to be red,\nyou could do 1F000, that would work too.\n\n237\n00:13:25.780 --> 00:13:28.880\nThis one's gray, we'll tweak it and\nsort of show you.\n\n238\n00:13:28.880 --> 00:13:33.238\nBut we gotta make sure that we've\nsort of got a recurring while loop.\n\n239\n00:13:33.238 --> 00:13:42.066\nSo while not glfwindowShouldClose,\nlike that.\n\n240\n00:13:42.066 --> 00:13:44.880\nAnd while that's true, right?\n\n241\n00:13:44.880 --> 00:13:49.150\nI think I need to pass it the window,\nright?\n\n242\n00:13:49.150 --> 00:13:50.038\nYeah, okay.\n\n243\n00:13:50.038 --> 00:13:52.890\nSo this is essentially right\nnow gonna be an infinite loop.\n\n244\n00:13:52.890 --> 00:13:54.984\nAnd at some point during it\nwe might break out of it.\n\n245\n00:13:54.984 --> 00:13:58.675\nWe might do like glfwdestroywindow\nwhich will just destroy our window,\n\n246\n00:13:58.675 --> 00:14:00.740\nand then we'll terminate our program.\n\n247\n00:14:01.990 --> 00:14:07.306\nSo if we run this now, I think it'll\nmaintain, stay up on the screen.\n\n248\n00:14:07.306 --> 00:14:08.842\nAgain, it's kinda in\nan infinite loop right now.\n\n249\n00:14:08.842 --> 00:14:12.970\nIt's also not taking anything in.\n\n250\n00:14:12.970 --> 00:14:14.090\nYeah, it says not responding.\n\n251\n00:14:14.090 --> 00:14:16.925\nSo we really gotta do some more stuff but,\nas you can see,\n\n252\n00:14:16.925 --> 00:14:19.600\nwe now have a recurring window\non our screen at least.\n\n253\n00:14:22.546 --> 00:14:27.010\nI also have not ever cleared the screen,\nso that's why it's white and\n\n254\n00:14:27.010 --> 00:14:30.540\nnot gray I think but\nlet's do some of that stuff now.\n\n255\n00:14:30.540 --> 00:14:34.018\nSo long, lastKeyTime.\n\n256\n00:14:34.018 --> 00:14:37.386\nNow this is getting into\nsort of My own code,\n\n257\n00:14:37.386 --> 00:14:42.304\nthis is an open GL thing but,\nI'm gonna say that that's equal to\n\n258\n00:14:42.304 --> 00:14:47.842\nSystem.CurrentTimeMillis, And so this\n\n259\n00:14:47.842 --> 00:14:52.670\nis to make sure that we're independent of\nhow fast somebody's processor might be,\n\n260\n00:14:52.670 --> 00:14:58.120\nthat we're only rendering a certain, we're\ngonna render as many frames as we can.\n\n261\n00:14:58.120 --> 00:15:00.984\nWhich is why we're just gonna\nloop through this while loop, but\n\n262\n00:15:00.984 --> 00:15:03.916\nwe're only gonna check for\ninputs every certain amount of time.\n\n263\n00:15:03.916 --> 00:15:07.890\nNow the reason for that is that if\nsome player A has a fast computer and\n\n264\n00:15:07.890 --> 00:15:11.474\nsome other player,\nplayer B has a bunch of slower computer.\n\n265\n00:15:11.474 --> 00:15:16.036\nWe don't want A having an unfair\nadvantage where he can enter\n\n266\n00:15:16.036 --> 00:15:20.070\ninputs more with greater\nregularity than player B.\n\n267\n00:15:20.070 --> 00:15:23.870\nSo we're only gonna check for\ninputs every however many frames\n\n268\n00:15:25.740 --> 00:15:29.270\nit ends up being, but\nequivalent to 50 milliseconds right?\n\n269\n00:15:29.270 --> 00:15:34.960\nSo, current time milis,\nand is that all I needed?\n\n270\n00:15:34.960 --> 00:15:39.690\nYeah, well we need the parenthesis for\nthe method and-\n\n271\n00:15:39.690 --> 00:15:40.990\n&gt;&gt; Can I jump in here real quick?\n\n272\n00:15:40.990 --> 00:15:45.330\nBecause I can tell you, this is one of\nthe things with using libraries and\n\n273\n00:15:45.330 --> 00:15:50.030\nreading documentation is you have\nall of this boilerplate code that\n\n274\n00:15:50.030 --> 00:15:51.440\nyou have to go through, right?\n\n275\n00:15:51.440 --> 00:15:53.629\nA lot of these things are like,\nwhat does this even mean?\n\n276\n00:15:53.629 --> 00:15:56.615\nYeah, the names,\nthe method names actually make sense.\n\n277\n00:15:56.615 --> 00:15:58.791\nThe static method names to some extent.\n\n278\n00:15:58.791 --> 00:16:03.997\nBut GLFW makeContextCurrent,\nwhat does that mean?\n\n279\n00:16:03.997 --> 00:16:07.280\nAnd the ultimate goal is the entire\npurpose of this abstraction libraries is\n\n280\n00:16:07.280 --> 00:16:08.728\nyou're not really need to know.\n\n281\n00:16:08.728 --> 00:16:11.739\nYeah, you're kinda going\nthrough these motions, but\n\n282\n00:16:11.739 --> 00:16:15.272\ngets something working, and\nthen come back and start diving in.\n\n283\n00:16:15.272 --> 00:16:17.280\nWhat does this actually mean?\n\n284\n00:16:17.280 --> 00:16:20.480\nIt is good to know those things,\ncuz you'll need to know those.\n\n285\n00:16:20.480 --> 00:16:24.653\nI said know, like nine times on that\nsentence, but that is the important part.\n\n286\n00:16:24.653 --> 00:16:28.882\nBut I did wanna clarify on that before we\ngo any further, cuz that's a lot of code,\n\n287\n00:16:28.882 --> 00:16:31.478\nthat ultimately it's just\na little bit of magic.\n\n288\n00:16:31.478 --> 00:16:32.025\n&gt;&gt; Yeah.\n\n289\n00:16:32.025 --> 00:16:36.240\nAgain, a lot of this episode is\nstarting to seem that way I think.\n\n290\n00:16:36.240 --> 00:16:39.110\nThere's not really a way around that,\nI don't think.\n\n291\n00:16:39.110 --> 00:16:40.700\nWhich, in our frame will be the middle.\n\n292\n00:16:41.940 --> 00:16:44.040\nThe way we're gonna do our frame,\nI think I've mentioned this before,\n\n293\n00:16:44.040 --> 00:16:46.990\nbut it's bounded to between negative 100,\npositive 100,\n\n294\n00:16:46.990 --> 00:16:51.600\nand then also negative 100,\npositive 100 on the Y, right?\n\n295\n00:16:51.600 --> 00:16:56.840\nSo let's also do an entity\ne equals new entity.\n\n296\n00:16:56.840 --> 00:17:00.085\nThis will be like our enemy,\nlike our starter enemy, right?\n\n297\n00:17:00.085 --> 00:17:04.140\nAnd he'll start way down\nin the bottom left, right?\n\n298\n00:17:04.140 --> 00:17:05.070\nWhy not?\n\n299\n00:17:05.070 --> 00:17:11.460\nAnd we will head up at a 45\ndegree angle with speed 3,\n\n300\n00:17:11.460 --> 00:17:18.090\nsorry, the speed has to go I think before\nthe angle which is why I had it like that.\n\n301\n00:17:18.090 --> 00:17:21.530\nSo we're not really doing anything\nwith any of those objects yet.\n\n302\n00:17:21.530 --> 00:17:23.680\nWe're also not using lastKeyTime,\nbut we're going to.\n\n303\n00:17:23.680 --> 00:17:26.120\nAnd we're gonna do that sort of\nwithin this main game loop code.\n\n304\n00:17:27.200 --> 00:17:28.760\nOne thing I do want to do real quick,\n\n305\n00:17:28.760 --> 00:17:31.995\nis make sure that we add these to\nthe list of entities that we're tracking.\n\n306\n00:17:31.995 --> 00:17:38.340\nEntities.add c,\nyou can do this on separate lines.\n\n307\n00:17:39.670 --> 00:17:43.640\nBut yeah, that way it will be updated and\ntracked in sort of our list, and\n\n308\n00:17:43.640 --> 00:17:45.970\nthey'll be able to crash into each other.\n\n309\n00:17:45.970 --> 00:17:48.860\nThat's sort of some important\nfunctionality that we defined earlier,\n\n310\n00:17:48.860 --> 00:17:51.370\nis that we wanna be able\nto crash into our entity,\n\n311\n00:17:51.370 --> 00:17:54.615\nand that way we have\nto dodge it basically.\n\n312\n00:17:54.615 --> 00:18:00.860\nSo we've got, well,\nwindow shouldn't close essentially.\n\n313\n00:18:00.860 --> 00:18:08.274\nSo let's do if System dot, I got\na couple parentheses here I don't need,\n\n314\n00:18:08.274 --> 00:18:13.665\nSystem.currentTimeMillis is\nminus lastKeyTime.\n\n315\n00:18:16.317 --> 00:18:19.220\nIs greater than or equal to 50.\n\n316\n00:18:19.220 --> 00:18:23.390\nSo if it's been at least 50\nmilliseconds since the last time we\n\n317\n00:18:23.390 --> 00:18:27.160\ntook in what a key was,\nwe will actually check for input again.\n\n318\n00:18:27.160 --> 00:18:28.888\nSo we're gonna, and\n\n319\n00:18:28.888 --> 00:18:35.150\nwe're also gonna take a second to\nupdate all of our entities, right?\n\n320\n00:18:35.150 --> 00:18:39.692\nSo we can go ahead and\nfor every entity e in\n\n321\n00:18:39.692 --> 00:18:44.778\nentities we can e.tickSecond, like that.\n\n322\n00:18:44.778 --> 00:18:49.359\nSo every single one, it's a little\nconfusing that I used e here actually,\n\n323\n00:18:49.359 --> 00:18:50.972\nnow that I think about it.\n\n324\n00:18:50.972 --> 00:18:56.892\nLet's just make this one x,\nthat way we can use e here.\n\n325\n00:18:56.892 --> 00:18:58.985\nYeah, it was gonna give\nus an error anyway.\n\n326\n00:18:58.985 --> 00:19:02.885\nSo also in here we're gonna check for\ninput.\n\n327\n00:19:06.196 --> 00:19:08.907\nBut I'm gonna to leave that blank,\nlike as a to do right now and\n\n328\n00:19:08.907 --> 00:19:10.540\nwe'll come back to it.\n\n329\n00:19:10.540 --> 00:19:13.180\nCuz that's sort of the next\nepisode after this one, or\n\n330\n00:19:13.180 --> 00:19:16.390\nthe next topic that we're covering.\n\n331\n00:19:17.940 --> 00:19:22.596\nSo if that is the case also, we're\ngonna have to update our lastKeyTime.\n\n332\n00:19:22.596 --> 00:19:28.470\nSo lastKeyTime equals\nSystem.currentTimeMillis,\n\n333\n00:19:28.470 --> 00:19:34.670\nwhich will be for lack of precision pretty\nmuch exactly the same as it was just now.\n\n334\n00:19:35.960 --> 00:19:38.938\nThis will be hopefully\na pretty quick process.\n\n335\n00:19:38.938 --> 00:19:43.010\nAnd it will be approximately\nexactly 50 milliseconds\n\n336\n00:19:43.010 --> 00:19:45.910\nbetween each of those iterations.\n\n337\n00:19:45.910 --> 00:19:48.600\nAnything else I need in there?\n\n338\n00:19:48.600 --> 00:19:50.530\nYou could do a sort of a debug here\n\n339\n00:19:52.510 --> 00:19:54.800\nto make sure that it's happening\nevery 50 milliseconds.\n\n340\n00:19:54.800 --> 00:19:58.940\nSo I'll leave that in for now,\nand we'll take it out later.\n\n341\n00:20:00.180 --> 00:20:05.710\nAnd then again, this is where you\nwould do control entity see window,\n\n342\n00:20:05.710 --> 00:20:09.340\nthat's again what we're gonna\ndo later when we take input.\n\n343\n00:20:09.340 --> 00:20:12.010\nSo I think that's about all for\n\n344\n00:20:12.010 --> 00:20:16.230\nnow in that if statement, so\nwe can break out of that now.\n\n345\n00:20:16.230 --> 00:20:21.395\nLet's autoformat and we're gonna have to\ndo some more stuff, we're gonna have to do\n\n346\n00:20:21.395 --> 00:20:27.160\nglfwPullEvents, and this is actually\ngonna allow us to take input at all.\n\n347\n00:20:27.160 --> 00:20:32.050\nIf we don't pull events every time\nwe're checking for input, we're not\n\n348\n00:20:32.050 --> 00:20:35.540\ngonna be able to move our textures across\nthe screen, because we won't have many\n\n349\n00:20:35.540 --> 00:20:40.340\ncontrol functions or any other GLFW\nevents that might be taking place.\n\n350\n00:20:40.340 --> 00:20:42.110\nThose are I think really the only\nones we're gonna be using.\n\n351\n00:20:43.470 --> 00:20:44.197\nLet's run this and see what we get.\n\n352\n00:20:44.197 --> 00:20:48.217\nOkay, still nothing really going on.\n\n353\n00:20:48.217 --> 00:20:51.230\nAnd now yeah, we're gonna do glClear, and\n\n354\n00:20:51.230 --> 00:20:55.720\nwe're gonna use that glClear color\nfrom earlier that we had set.\n\n355\n00:20:55.720 --> 00:21:02.904\nSo I think it's like an right\nGL_COLOR_BUFFER_BIT.\n\n356\n00:21:06.832 --> 00:21:10.595\nAnd now I wanna see if it's gray, sorry, I\nshould've waited a second, got impatient.\n\n357\n00:21:10.595 --> 00:21:11.919\nIs that gray?\n\n358\n00:21:11.919 --> 00:21:13.500\nI don't know if it's gray.\n\n359\n00:21:13.500 --> 00:21:16.401\n&gt;&gt; If you scroll up,\nI actually think that the alpha channel,\n\n360\n00:21:16.401 --> 00:21:18.150\nyou accidentally set that to zero.\n\n361\n00:21:18.150 --> 00:21:21.700\nSo there might be a little bit there,\nbut if you set that to 1,\n\n362\n00:21:21.700 --> 00:21:26.140\nit should make it opaque and\nmake it gray, but it's still not gray.\n\n363\n00:21:26.140 --> 00:21:27.598\n&gt;&gt; Let's try making it reddish.\n\n364\n00:21:30.924 --> 00:21:34.900\nOkay, maybe we're not, maybe there's\na method we're not calling yet.\n\n365\n00:21:34.900 --> 00:21:36.460\nI'm not gonna worry about it for now,\n\n366\n00:21:36.460 --> 00:21:40.010\nI think there might be something\nelse that we have to do.\n\n367\n00:21:40.010 --> 00:21:42.440\nSo we need to do is sort of a try block,\nI think.\n\n368\n00:21:42.440 --> 00:21:44.950\nI'm kind of confused here,\ncuz I'm running out of space on that line.\n\n369\n00:21:44.950 --> 00:21:45.668\nI've gotta move the page.\n\n370\n00:21:45.668 --> 00:21:47.235\nSo there's a try.\n\n371\n00:21:47.235 --> 00:21:51.840\nAnd we're gonna try to render\neach of these entities.\n\n372\n00:21:51.840 --> 00:21:53.660\nEventually, we're gonna\nhave to implement that.\n\n373\n00:21:53.660 --> 00:21:55.810\nThat's our own method that we're gonna do.\n\n374\n00:21:55.810 --> 00:21:58.660\nAnd GL should be swap buffers.\n\n375\n00:22:00.200 --> 00:22:08.070\nOkay, so we're gonna try for\nevery entity, entity e in entities.\n\n376\n00:22:08.070 --> 00:22:11.579\nWe are gonna render e,\n\n377\n00:22:11.579 --> 00:22:16.390\ngonna need a semicolon there.\n\n378\n00:22:17.570 --> 00:22:18.830\nSo we're gonna try to render them.\n\n379\n00:22:18.830 --> 00:22:22.960\nAnd if we can't,\nthen we will catch what type of exception.\n\n380\n00:22:25.260 --> 00:22:26.130\nIO exception?\n\n381\n00:22:26.130 --> 00:22:26.850\nThat doesn't sound right.\n\n382\n00:22:28.620 --> 00:22:30.540\nIs this the right page?\n\n383\n00:22:30.540 --> 00:22:32.140\nOkay.\nSo we'll just try IO exception,\n\n384\n00:22:32.140 --> 00:22:32.883\nsee if that works.\n\n385\n00:22:32.883 --> 00:22:39.711\nLet's see, it has to be a different name,\nx.printStackTrace like that.\n\n386\n00:22:39.711 --> 00:22:41.944\nNow again, we haven't done this,\n\n387\n00:22:45.646 --> 00:22:51.220\n[LAUGH] Some gross variable names\nwe've got here at this point.\n\n388\n00:22:51.220 --> 00:22:52.260\nWe haven't gotten this method yet.\n\n389\n00:22:52.260 --> 00:22:56.300\nWe're gonna create a stub for\nit for now and leave it for later.\n\n390\n00:22:56.300 --> 00:23:00.350\nIO exception is at\nthe unreachable catch block,\n\n391\n00:23:00.350 --> 00:23:02.200\nexception is never thrown\nfrom a try state in a body.\n\n392\n00:23:03.370 --> 00:23:04.390\nIt's a little weird.\n\n393\n00:23:04.390 --> 00:23:07.120\nI'm not sure, I feel like that's not\nthe right type of exception, anyway.\n\n394\n00:23:07.120 --> 00:23:09.228\nSo I'm just gonna change it\nto the generalized exception.\n\n395\n00:23:09.228 --> 00:23:15.617\nIf you know which ones these\nmight be throwing, I think, yeah.\n\n396\n00:23:15.617 --> 00:23:20.320\nSo it's not being thrown from that\nright now, but it will be later.\n\n397\n00:23:20.320 --> 00:23:24.709\nBecause what we have to do, it is actually\nan IO exception, because I have to read\n\n398\n00:23:24.709 --> 00:23:29.165\nin the file name from the class that we're\ngonna make some modifications to the car\n\n399\n00:23:29.165 --> 00:23:33.426\nclass, that's sort of gonna give that\nlike a location for the texture based on\n\n400\n00:23:33.426 --> 00:23:36.942\nwhatever the color car is,\nwhich is an enum that we did earlier.\n\n401\n00:23:36.942 --> 00:23:41.043\nSo it will actually be an IO exception.\n\n402\n00:23:41.043 --> 00:23:43.940\nI still wanna leave it exception for\nnow just as a general,\n\n403\n00:23:43.940 --> 00:23:47.870\nthat way it will compile at that line and\nwon't tell us anything else.\n\n404\n00:23:47.870 --> 00:23:55.077\nLet's just do glfwSwapBuffers window,\nlike that.\n\n405\n00:23:55.077 --> 00:23:58.878\nAnd then at the end,\nlet's do glfwTerminate, so\n\n406\n00:23:58.878 --> 00:24:02.419\nthis is after our while loop ends,\nI believe.\n\n407\n00:24:02.419 --> 00:24:05.086\nRight, if we scroll all the way up,\nthat should be good.\n\n408\n00:24:05.086 --> 00:24:06.180\nIt's matched up there.\n\n409\n00:24:07.210 --> 00:24:11.840\nSo I think that swapped buffers line will\nactually allow us to have whatever color.\n\n410\n00:24:11.840 --> 00:24:15.750\nYeah, see now we've got this\nnice pinkish clear color.\n\n411\n00:24:15.750 --> 00:24:18.550\nAnd that's because I set\nour red channel to 100.\n\n412\n00:24:18.550 --> 00:24:21.620\nSo if we changed it back to that,\nnow it'll be a gray.\n\n413\n00:24:23.240 --> 00:24:25.160\nYeah, healthy gray.\n\n414\n00:24:25.160 --> 00:24:27.900\nI don't think that the alpha was relevant.\n\n415\n00:24:27.900 --> 00:24:30.140\nSo I wanted to see.\n\n416\n00:24:30.140 --> 00:24:31.280\nYeah, it's still gray.\n\n417\n00:24:31.280 --> 00:24:33.660\nSo yeah,\nyou can make this whatever you want.\n\n418\n00:24:33.660 --> 00:24:37.020\nI think the best clear color for us is\nprobably just gonna be straight-up white.\n\n419\n00:24:37.020 --> 00:24:39.115\nYou make yours whatever you want.\n\n420\n00:24:39.115 --> 00:24:43.843\nAnd I think a pure white is nice\ncuz it sort of just seems like\n\n421\n00:24:43.843 --> 00:24:45.782\nthe most blank canvas.\n\n422\n00:24:45.782 --> 00:24:50.809\nNone of our textures are really gonna\nbe any white in any sense of the word,\n\n423\n00:24:50.809 --> 00:24:53.010\nexcept for their backgrounds.\n\n424\n00:24:55.455 --> 00:24:58.696\nSo that's about it for\nour main GameLeap I would say.\n\n425\n00:24:58.696 --> 00:25:02.755\nNow we're getting to the textures and\nthe rendering.\n\n426\n00:25:02.755 --> 00:25:06.855\nSo this is where it's gonna get\nlittle hairier I would say,\n\n427\n00:25:06.855 --> 00:25:08.335\nis in the texture class.\n\n428\n00:25:08.335 --> 00:25:14.330\nSo Texture tex = new Texture,\n\n429\n00:25:14.330 --> 00:25:22.637\nand we're just gonna do a e.getTexture.\n\n430\n00:25:22.637 --> 00:25:25.871\nAnd we're gonna have to write\nthat into the entity class,\n\n431\n00:25:25.871 --> 00:25:27.328\nwe have not done that yet.\n\n432\n00:25:27.328 --> 00:25:30.071\nAnd we are also gonna have\nto write this texture class.\n\n433\n00:25:30.071 --> 00:25:34.910\nSo we'll create a stub for it.\n\n434\n00:25:36.980 --> 00:25:39.949\nAnd we're gonna need a semicolon.\n\n435\n00:25:39.949 --> 00:25:42.810\nAnd yeah again I haven't\nadded that method either.\n\n436\n00:25:42.810 --> 00:25:43.367\nWe'll leave that blank for now.\n\n437\n00:25:43.367 --> 00:25:48.010\nSo we're gonna do tex.bind.\n\n438\n00:25:48.010 --> 00:25:50.767\nThat's just something we're gonna\nwrite that another texture class.\n\n439\n00:25:50.767 --> 00:25:56.285\nList&lt;Float&gt; xyCoords\n\n440\n00:25:56.285 --> 00:26:03.904\n= getCenterFromEntity(e) and\n\n441\n00:26:03.904 --> 00:26:12.572\nthen float x = xyCoords.get(0) So\n\n442\n00:26:12.572 --> 00:26:15.985\nthe x is 0, and\n\n443\n00:26:15.985 --> 00:26:20.460\nthe y is gonna be 1.\n\n444\n00:26:23.487 --> 00:26:23.989\nBoom.\n\n445\n00:26:23.989 --> 00:26:26.406\nSo this has gonna be y, sorry.\n\n446\n00:26:29.506 --> 00:26:30.033\nAll right.\n\n447\n00:26:30.033 --> 00:26:32.692\nSo glBegin.\n\n448\n00:26:40.844 --> 00:26:43.200\nGL_QUADS.\n\n449\n00:26:43.200 --> 00:26:45.970\nSo all the shapes we gonna make are quads.\n\n450\n00:26:45.970 --> 00:26:49.520\nIf you're really sort of understand\nhow computer graphics work,\n\n451\n00:26:49.520 --> 00:26:54.570\ngenerally there is functions to\nwrite quadrilaterals and triangles.\n\n452\n00:26:54.570 --> 00:26:56.827\nAnd that's kind of about it.\n\n453\n00:26:56.827 --> 00:27:02.156\nYou sort of just define a couple vertices\nand it renders it as a quadrilateral,\n\n454\n00:27:02.156 --> 00:27:05.425\nlike a parallelogram or\na rhombus or whatever.\n\n455\n00:27:05.425 --> 00:27:11.090\nDepending on the locations of the vertices\nyou give it, or as a triangle.\n\n456\n00:27:11.090 --> 00:27:14.240\nAnd so\nwe're gonna be in quadrilateral mode for\n\n457\n00:27:14.240 --> 00:27:17.909\nbasically this whole thing because all the\ntextures I have are rectangles or squares.\n\n458\n00:27:19.840 --> 00:27:22.510\nSo this sort of signifies that we're\nstarting the process of rendering\n\n459\n00:27:22.510 --> 00:27:23.960\nthe quadrilateral.\n\n460\n00:27:23.960 --> 00:27:29.986\nNow there's some hairy\nstuff that we've gotta do.\n\n461\n00:27:29.986 --> 00:27:31.407\nI could comment some of this out and\n\n462\n00:27:31.407 --> 00:27:35.140\njust demonstrate the way that you're\ngonna render just like a colored square.\n\n463\n00:27:35.140 --> 00:27:36.800\nAnd then in the next episode,\n\n464\n00:27:36.800 --> 00:27:39.229\nwe'll make it sort of a textured\nsquare instead, right?\n\n465\n00:27:40.230 --> 00:27:50.230\nSo let's use glTextCoord 2f, sorry.\n\n466\n00:27:50.230 --> 00:27:54.728\nAnd so this is gonna be the top left and\n\n467\n00:27:54.728 --> 00:28:00.979\nit's gonna be 0,0 and\nthen we gonna glVertex2f\n\n468\n00:28:05.468 --> 00:28:07.310\nAnd that's gonna be also two parameters.\n\n469\n00:28:07.310 --> 00:28:09.050\nThis is going to be x.\n\n470\n00:28:09.050 --> 00:28:14.434\nThe center of our texture,\nwhich we're gonna get, minus 0.07F.\n\n471\n00:28:16.458 --> 00:28:21.169\nAnd this .07 here is gonna be a constant\nvalue that's going to determine\n\n472\n00:28:21.169 --> 00:28:25.530\nexactly how big your texture is\ncompare to the screen itself.\n\n473\n00:28:25.530 --> 00:28:28.990\nSo I'm saying that our texture should\nessentially cover 14% of the screen.\n\n474\n00:28:30.270 --> 00:28:32.462\nThis here is .07 which would be 7%.\n\n475\n00:28:32.462 --> 00:28:39.815\nAnd we're gonna render the other vertex\nof our quadrilateral at x +.07f.\n\n476\n00:28:39.815 --> 00:28:44.050\nAnd that will be the top right corner,\nright of our texture.\n\n477\n00:28:44.050 --> 00:28:46.310\nSo that looks good there.\n\n478\n00:28:46.310 --> 00:28:52.142\nAnd then y + .07f because it is the top,\n\n479\n00:28:52.142 --> 00:28:54.902\n.07f like that.\n\n480\n00:28:54.902 --> 00:28:58.034\nSo that is the top left\none that we have done now.\n\n481\n00:28:58.034 --> 00:28:59.738\nAnd we can sort of copy and past here but\n\n482\n00:28:59.738 --> 00:29:02.740\nwe have to be careful about making\nsure we change all of our values.\n\n483\n00:29:02.740 --> 00:29:09.981\nOkay, so for\nthe top right one we can do 1,0 and\n\n484\n00:29:09.981 --> 00:29:15.279\nwe can do Vertex2f is gonna be + and\n\n485\n00:29:15.279 --> 00:29:20.055\n+ and then for this one 0,1.\n\n486\n00:29:23.477 --> 00:29:28.193\nSo 01 is going to be the bottom left and\nthen it will be minus .07 and minus .07.\n\n487\n00:29:32.729 --> 00:29:34.320\nI've gotta be careful.\n\n488\n00:29:34.320 --> 00:29:37.420\nI missed a seven here because my keyboard\nis kind of sticky on the seven key.\n\n489\n00:29:37.420 --> 00:29:41.948\nAnd then for\nthe last one it will be 1,1, and\n\n490\n00:29:41.948 --> 00:29:47.769\nit'll be Plus and then minus.\n\n491\n00:29:50.360 --> 00:29:55.410\nOkay, so we've labeled this is\nsaying the texture coordinate.\n\n492\n00:29:55.410 --> 00:29:59.640\nSo it's either a zero or a one,\ncuz it's just the boundary of the texture.\n\n493\n00:29:59.640 --> 00:30:02.970\nAnd then this is where on the plane of\n\n494\n00:30:02.970 --> 00:30:06.310\nthe open GL frame we're\ngoing to be rendering it.\n\n495\n00:30:06.310 --> 00:30:11.280\nWhich is plus or\nminus 7% of whatever our screen size is.\n\n496\n00:30:12.580 --> 00:30:13.762\nSo, that's about good,\n\n497\n00:30:13.762 --> 00:30:16.413\nI think we would get a white\nsquare if we did this right now.\n\n498\n00:30:16.413 --> 00:30:19.797\nSome of these lines are not going\nto be working by the way, so\n\n499\n00:30:19.797 --> 00:30:22.518\nI actually just want to\ncreate that real quick.\n\n500\n00:30:22.518 --> 00:30:25.538\nThis I think is going to\nbe in the same class.\n\n501\n00:30:25.538 --> 00:30:27.830\nThis is just a static method.\n\n502\n00:30:30.880 --> 00:30:33.790\nWe're going to define where\nthe center of our entity is.\n\n503\n00:30:33.790 --> 00:30:36.960\nSo, from the entity that we're\npassing in as a parameter\n\n504\n00:30:36.960 --> 00:30:41.840\nwe're just gonna generate the list,\nI guess.\n\n505\n00:30:41.840 --> 00:30:42.509\nSo, new.\n\n506\n00:30:42.509 --> 00:30:48.031\nOr, let's do l, yeah.\n\n507\n00:30:48.031 --> 00:30:54.803\nSo, Float.\n\n508\n00:30:57.933 --> 00:31:01.747\nJava is really good about having these\nlike sort of parallel like triple types\n\n509\n00:31:01.747 --> 00:31:05.690\nthey are just sort of combining two things\ntogether, so I ended up using a list.\n\n510\n00:31:07.480 --> 00:31:08.630\nSorry about that.\n\n511\n00:31:08.630 --> 00:31:10.800\nThis is probably not\na best practice honestly,\n\n512\n00:31:12.040 --> 00:31:14.480\nas a way to get the center of an entity.\n\n513\n00:31:14.480 --> 00:31:16.790\nBut it's the way I chose\nto do it unfortunately.\n\n514\n00:31:16.790 --> 00:31:19.160\nSo, Float like that.\n\n515\n00:31:20.340 --> 00:31:22.850\nBoom.\nSo we've created our list now.\n\n516\n00:31:24.890 --> 00:31:27.888\nWe're going to double.\n\n517\n00:31:27.888 --> 00:31:30.859\nSo this is gonna return a double and\n\n518\n00:31:30.859 --> 00:31:35.990\nwe're gonna end up converting\nit into a float eventually.\n\n519\n00:31:37.950 --> 00:31:44.669\nSo let's get y position, And\n\n520\n00:31:44.669 --> 00:31:48.764\nso l.add(x)\n\n521\n00:31:48.764 --> 00:31:54.437\ndivided by 100f.\n\n522\n00:31:54.437 --> 00:32:00.135\nAnd again, so I said up here that\nthe size of our screen is sort of gonna\n\n523\n00:32:00.135 --> 00:32:07.340\nbe like 100 wide, it's minus 100\nall the way to positive 100, right?\n\n524\n00:32:07.340 --> 00:32:11.376\nSo dividing it by 100 is sort of gonna\nmake it so that the values are mapped\n\n525\n00:32:11.376 --> 00:32:14.722\ncorrectly on to our grid without\ngoing outside of the screen.\n\n526\n00:32:14.722 --> 00:32:17.360\nAnd we're gonna do the same thing for y.\n\n527\n00:32:18.620 --> 00:32:20.240\nAnd I think we might have\nto cast it to a float.\n\n528\n00:32:21.570 --> 00:32:24.070\nYep, that's what it wants us to do.\n\n529\n00:32:26.710 --> 00:32:29.400\nOkay and is that about good?\n\n530\n00:32:29.400 --> 00:32:33.679\nSo this is again a plane from\nnegative 100 to x to negative\n\n531\n00:32:33.679 --> 00:32:38.410\n100x is mapped onto negative one to one\nwhich is the same as just dividing it.\n\n532\n00:32:38.410 --> 00:32:41.420\nYou don't have to do any addition\nin order to make that work.\n\n533\n00:32:41.420 --> 00:32:42.744\nAnd again like I said,\n\n534\n00:32:42.744 --> 00:32:46.730\nwe are going to cover 14% of\nthe screen with our texter like this.\n\n535\n00:32:46.730 --> 00:32:50.870\nSo I think that's working now.\n\n536\n00:32:50.870 --> 00:32:53.350\nThese two lines we're\ngoing to use later but\n\n537\n00:32:53.350 --> 00:32:56.150\nwe have not implemented texter class yet.\n\n538\n00:32:56.150 --> 00:33:00.470\nAnd I kind of want you to see that\nif we just set this clear color\n\n539\n00:33:00.470 --> 00:33:04.340\nto something other than white, I'm pretty\nsure that it will work effectively.\n\n540\n00:33:04.340 --> 00:33:06.146\nLet's do a zero,\nI don't know what color that will be.\n\n541\n00:33:09.463 --> 00:33:13.913\nKinda glitchy, but I think the entities\nare actually rendering on to there,\n\n542\n00:33:13.913 --> 00:33:17.198\nagain there's not really a texture for\nthem right now but\n\n543\n00:33:17.198 --> 00:33:21.464\nwe will see I guess in the next episode\nbecause we're out of time, right?\n\n544\n00:33:21.464 --> 00:33:25.463\n&gt;&gt; Yeah, we are far beyond that time,\nbut this goes to show you that you know\n\n545\n00:33:25.463 --> 00:33:28.690\neverybody's like I want to\nmake something on the screen.\n\n546\n00:33:28.690 --> 00:33:31.853\nIt actually takes a good chunk of work,\nthere's some math involved and while we're\n\n547\n00:33:31.853 --> 00:33:34.807\nnot even finished it looks like we're\ngoing to have to come back for a part two.\n\n548\n00:33:34.807 --> 00:33:38.125\nTo actually start seeing some of these\ntextures a rendering of our car so\n\n549\n00:33:38.125 --> 00:33:41.443\nto speak, actually on the screen,\nbut we did get something working and\n\n550\n00:33:41.443 --> 00:33:42.568\nthat's what matters.\n\n551\n00:33:42.568 --> 00:33:45.383\nBut definitely join us\nback as we continue,\n\n552\n00:33:45.383 --> 00:33:48.030\nwell with 2D Sprites and Graphics.\n\n553\n00:33:48.030 --> 00:33:50.697\nBut for now, we're going to go ahead and\nsign off for DEVPRO.TV.\n\n554\n00:33:50.697 --> 00:33:52.720\nI've been your host, Justin Dennison.\n\n555\n00:33:52.720 --> 00:33:53.430\n&gt;&gt; Mark Davis.\n\n556\n00:33:53.430 --> 00:33:53.983\n&gt;&gt; And we'll see you next time.\n\n557\n00:33:53.983 --> 00:33:59.653\n[MUSIC]\n\n",
          "vimeoId": "227745482"
        },
        {
          "description": "In this episode, Mark creates the Texture class for rendering the graphics and sprites.",
          "length": "1479",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-2-2d_graphics_and_sprites_pt_2-072617-PGM.00_24_28_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-2-2d_graphics_and_sprites_pt_2-072617-PGM.00_24_28_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-23-2-2d_graphics_and_sprites_pt_2-072617-PGM.00_24_28_24.Still001-sm.jpg",
          "title": "2d Graphics and Sprites Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.184 --> 00:00:16.555\nGreetings everyone and welcome to\nanother exciting episode of DEV PRO.TV.\n\n3\n00:00:16.555 --> 00:00:17.989\nI'm your host Justin Dennison and\n\n4\n00:00:17.989 --> 00:00:21.418\nin today's episode, we're coming back\nwith more into Object-Oriented Java.\n\n5\n00:00:21.418 --> 00:00:26.109\nAnd we're in a part two of 2D Graphics and\nSprites, and well actually what we're\n\n6\n00:00:26.109 --> 00:00:30.270\ngonna be doing is the texture class\nthat is our final piece to the puzzle.\n\n7\n00:00:30.270 --> 00:00:34.151\nWell, we hope anyway,\nin order to get graphics on the screen.\n\n8\n00:00:34.151 --> 00:00:36.951\nAnd here to help us with that\nvery thing is Mr. Mark Davis.\n\n9\n00:00:36.951 --> 00:00:37.711\nHow are you doing today, Mark?\n\n10\n00:00:37.711 --> 00:00:38.470\n&gt;&gt; Pretty good.\n\n11\n00:00:38.470 --> 00:00:40.780\nAll right, Mark, now where we left off,\n\n12\n00:00:40.780 --> 00:00:44.807\nwe had things kind of drawn, we had our\nwindow drawn, we had over GO up and\n\n13\n00:00:44.807 --> 00:00:48.529\ngoing with those acronym libraries\nthat I would mess up horribly.\n\n14\n00:00:48.529 --> 00:00:49.464\n&gt;&gt; GFWL.\n\n15\n00:00:49.464 --> 00:00:49.994\n&gt;&gt; Yeah.\n\n16\n00:00:49.994 --> 00:00:50.647\n&gt;&gt; LWJGL.\n\n17\n00:00:50.647 --> 00:00:54.768\n&gt;&gt; Crazy stuff, but\nwhat are our next steps, well to take?\n\n18\n00:00:54.768 --> 00:00:57.705\n&gt;&gt; Okay, so we created that texture\nclass in the last episode and\n\n19\n00:00:57.705 --> 00:01:00.256\njust kind of like left it as\na stub with nothing there.\n\n20\n00:01:00.256 --> 00:01:04.526\nBut there are a couple things that I do\nwanna address before we get into that.\n\n21\n00:01:04.526 --> 00:01:07.686\nSo I didn't realize this one when I\nwas doing the previous episode, but\n\n22\n00:01:07.686 --> 00:01:11.375\nyou do actually have to render the corners\nof the quadrilaterals you're forming in\n\n23\n00:01:11.375 --> 00:01:12.235\na specific order.\n\n24\n00:01:12.235 --> 00:01:16.003\nIf to do top left, top right,\nbottom right, bottom left.\n\n25\n00:01:16.003 --> 00:01:18.482\nDon't ask me why, I couldn't tell you.\n\n26\n00:01:18.482 --> 00:01:21.749\nBut we need to swap the bottom left and\nbottom right.\n\n27\n00:01:21.749 --> 00:01:25.179\nSo if we could go into the code here,\nalso the reason we're having that,\n\n28\n00:01:25.179 --> 00:01:27.948\nagain if I run this you'll\njust see what's going on here.\n\n29\n00:01:27.948 --> 00:01:30.152\nSo it's just kinda glitching, right.\n\n30\n00:01:30.152 --> 00:01:34.921\nIt's very flashy,\nepilepsy trigger warning, sorry.\n\n31\n00:01:34.921 --> 00:01:37.707\nAnd every 50 milliseconds,\nit is doing that 50 MS thing.\n\n32\n00:01:37.707 --> 00:01:40.417\nIt actually flash that it\ncrashed into something and\n\n33\n00:01:40.417 --> 00:01:44.311\nwe'll get to that in a minute,\nthat's actually an unintended behavior.\n\n34\n00:01:44.311 --> 00:01:48.193\nWe do wanna do glEnd here, and\nthat will stop the flashing.\n\n35\n00:01:48.193 --> 00:01:50.877\nI forgot to do that at the end\nof this render method there.\n\n36\n00:01:50.877 --> 00:01:52.783\nAnd then so if we'll run it now,\n\n37\n00:01:52.783 --> 00:01:56.451\nI did change the clear color also\nto this cyanish blue, just so\n\n38\n00:01:56.451 --> 00:02:01.058\nyou can sort of see what's happening,\nand so that not everything's black.\n\n39\n00:02:01.058 --> 00:02:05.395\nBut that what we just saw, actually was\nour entity coming up from the bottom left\n\n40\n00:02:05.395 --> 00:02:09.543\nscreen crashing into our stationary\ncar which doesn't have controls yet,\n\n41\n00:02:09.543 --> 00:02:11.560\nbut eventually will.\n\n42\n00:02:11.560 --> 00:02:16.023\nWhat we wanna do now in this episode is\nmake sure that this entity renders a red\n\n43\n00:02:16.023 --> 00:02:17.556\nstar thing that I had, and\n\n44\n00:02:17.556 --> 00:02:21.483\nthat this car renders as a car of\nwhatever color we end up making it.\n\n45\n00:02:21.483 --> 00:02:24.420\nSo, I'm gonna close out of that now.\n\n46\n00:02:24.420 --> 00:02:26.643\nOne more thing that I mentioned already,\n\n47\n00:02:26.643 --> 00:02:29.142\nis that we have to sort\nof swap these like that.\n\n48\n00:02:29.142 --> 00:02:31.441\nWe want the bottom right\nbefore the bottom left.\n\n49\n00:02:31.441 --> 00:02:38.570\nAnd now instead of that weird little flag\nshape, it will be full rectangle, yeah.\n\n50\n00:02:38.570 --> 00:02:42.477\nThat's all that that was,\nis it just makes it,\n\n51\n00:02:42.477 --> 00:02:47.471\nso that it's not sort of inverted\non the bottom axis, yeah.\n\n52\n00:02:47.471 --> 00:02:48.111\nDid I say that right?\n\n53\n00:02:48.111 --> 00:02:51.510\nWhatever, I think you get what I mean.\n\n54\n00:02:51.510 --> 00:02:55.066\nLet's go ahead and\nkill some of these lines,\n\n55\n00:02:55.066 --> 00:02:59.009\ncuz again the glcolor4f\nis not really a big deal.\n\n56\n00:02:59.009 --> 00:03:00.270\nWe can get rid of that.\n\n57\n00:03:00.270 --> 00:03:03.153\nThat was just for our testing just now.\n\n58\n00:03:03.153 --> 00:03:05.090\nIf we run it now, now it's white, right.\n\n59\n00:03:05.090 --> 00:03:06.796\nSo we set the color to black so\n\n60\n00:03:06.796 --> 00:03:11.429\nthat we can show up on like a white screen\nif you still had yours, being white.\n\n61\n00:03:11.429 --> 00:03:15.099\nI did not write those lines to\ncut in the last episode either.\n\n62\n00:03:15.099 --> 00:03:19.192\nAnyway, we are working in the texture\nclass that's really what's at stake here\n\n63\n00:03:19.192 --> 00:03:21.068\ntoday, that's what we're doing.\n\n64\n00:03:21.068 --> 00:03:26.492\nSo we can go in here and we can\nuncomment a couple lines up at the top.\n\n65\n00:03:26.492 --> 00:03:28.016\nWhere was it?\n\n66\n00:03:28.016 --> 00:03:31.120\nYeah, these two, these are hotlines\ncode after we're done with this.\n\n67\n00:03:31.120 --> 00:03:34.466\nSo we need to add this getTexture and\ntype entity.\n\n68\n00:03:34.466 --> 00:03:38.681\nWe're actually also gonna do one in\nthe car class that overrides this.\n\n69\n00:03:38.681 --> 00:03:43.081\nSo, what do we want for this?\n\n70\n00:03:43.081 --> 00:03:47.515\nWe want an entity,\nwe want public Texture getTexture.\n\n71\n00:03:47.515 --> 00:03:49.862\nAnd we want it to return new texture,\n\n72\n00:03:49.862 --> 00:03:54.651\nwhich again is the class we're gonna\nbuild, and we give it a path to a file.\n\n73\n00:03:54.651 --> 00:04:00.252\nSo let's do dot slash res,\nis that what we did?\n\n74\n00:04:00.252 --> 00:04:05.136\nLet's do slash tex like that,\nenemy dot PNG, and\n\n75\n00:04:05.136 --> 00:04:08.400\nI think that will work just fine.\n\n76\n00:04:08.400 --> 00:04:12.443\nAgain we're gonna need a constructor in\nthe texture class, you can go ahead and\n\n77\n00:04:12.443 --> 00:04:13.661\ncreate it, actually.\n\n78\n00:04:13.661 --> 00:04:17.520\nAnd then we will override\nthis in the car class.\n\n79\n00:04:17.520 --> 00:04:20.739\nI didn't bother to do it when we were\noriginally making the car class and\n\n80\n00:04:20.739 --> 00:04:24.240\nentity class because it didn't really\ngo along with what we were focused on.\n\n81\n00:04:24.240 --> 00:04:29.403\nBut we can just in here somewhere at\n\n82\n00:04:29.403 --> 00:04:34.571\noverride, and I guess I didn't.\n\n83\n00:04:34.571 --> 00:04:37.360\nOne more thing I kind of want to do\nis take out that to do actually.\n\n84\n00:04:37.360 --> 00:04:42.346\nYou don't want to leave to do's in your\ncode when there's actually nothing left to\n\n85\n00:04:42.346 --> 00:04:43.282\ndo, fun fact.\n\n86\n00:04:43.282 --> 00:04:44.534\nAll right, close that out.\n\n87\n00:04:44.534 --> 00:04:49.400\nSo in this, this one's actually gonna\nhave or I mean sorry, the other one,\n\n88\n00:04:49.400 --> 00:04:50.401\nyeah this one.\n\n89\n00:04:50.401 --> 00:04:54.466\nThis one can have a little\nmore logic to it.\n\n90\n00:04:54.466 --> 00:04:58.358\nSo if colour equals equals car dot colour,\n\n91\n00:04:58.358 --> 00:05:02.250\nyou can actually leave\noff the car I think,\n\n92\n00:05:02.250 --> 00:05:06.592\ndot BLUE we're gonna\nrender the blue texture.\n\n93\n00:05:10.683 --> 00:05:17.046\nSo blue car by default, we're gonna\nrender the black car, which is just car.\n\n94\n00:05:17.046 --> 00:05:20.904\nAnd then I'm gonna put an else if,\n\n95\n00:05:20.904 --> 00:05:25.972\nelse if it is green,\nwe will do the green one.\n\n96\n00:05:28.906 --> 00:05:31.194\nSo actually I wanna go\nback in our game class,\n\n97\n00:05:31.194 --> 00:05:33.919\nI wanna make it a green car\njust to see what it's like.\n\n98\n00:05:33.919 --> 00:05:36.393\nI've actually never done\nit with a green car before.\n\n99\n00:05:36.393 --> 00:05:38.139\nI'm sure it'll work just fine.\n\n100\n00:05:38.139 --> 00:05:43.702\nSo let's do Car.Colour.GREEN, why not?\n\n101\n00:05:43.702 --> 00:05:47.926\nThat way we'll be able to tell if that\nlogic is all working correctly as well.\n\n102\n00:05:47.926 --> 00:05:51.907\nSo it'll check everything at once, so\nby default we're gonna return this.\n\n103\n00:05:51.907 --> 00:05:54.560\nAgain whenever you do a return statement,\nit just bails and\n\n104\n00:05:54.560 --> 00:05:57.863\ndoesn't bother to execute anything\nelse in the method, so this is safe.\n\n105\n00:05:57.863 --> 00:06:00.193\nIt's not like it's going to\nrun through this one, and\n\n106\n00:06:00.193 --> 00:06:01.619\nthen call this one at the bottom.\n\n107\n00:06:01.619 --> 00:06:05.841\nYou don't really need another else\ncondition there you could put one\n\n108\n00:06:05.841 --> 00:06:07.235\nit's not necessary.\n\n109\n00:06:07.235 --> 00:06:11.421\nIn the texture class,\nthat's the topic of today, really.\n\n110\n00:06:11.421 --> 00:06:14.581\nAuto-generic constructor stub, so\n\n111\n00:06:14.581 --> 00:06:19.813\nwhat we're doing here in this\nclass is loading all of the data,\n\n112\n00:06:19.813 --> 00:06:26.070\npixel data essentially from\nthe PNG files that we're pulling.\n\n113\n00:06:26.070 --> 00:06:30.895\nSo that's gonna take like a file\nstream kind of data thing, and\n\n114\n00:06:30.895 --> 00:06:36.738\nwe're gonna manipulate those pixels in\nsuch a way that we can actually use.\n\n115\n00:06:36.738 --> 00:06:41.375\nWe can create this texture class\ninstantiate it, and we're going to bind it\n\n116\n00:06:41.375 --> 00:06:45.588\nto the open GL libraries and stuff,\nand we'll render on the screen.\n\n117\n00:06:45.588 --> 00:06:48.271\nSo this is actually going\nto throw IOException.\n\n118\n00:06:48.271 --> 00:06:50.866\nI didn't want to bother\ndealing with it here,\n\n119\n00:06:50.866 --> 00:06:53.540\nwhich is why we had one\nin the previous episode.\n\n120\n00:06:53.540 --> 00:06:56.477\nI was kind of confused about that,\nyou may have noticed.\n\n121\n00:06:56.477 --> 00:06:59.175\nIt's just gonna say,\nwell we need to import it.\n\n122\n00:06:59.175 --> 00:07:06.894\nOkay, so let's do a BufferedImage bi,\nwhy not.\n\n123\n00:07:06.894 --> 00:07:11.817\nAnd let's do equal to\n\n124\n00:07:11.817 --> 00:07:16.198\nImageIO dot read.\n\n125\n00:07:16.198 --> 00:07:20.950\nWe’re gonna read from a file which is just\nthe string that we're taking in, right.\n\n126\n00:07:20.950 --> 00:07:24.672\nOr it's gonna be new file, sorry.\n\n127\n00:07:24.672 --> 00:07:28.911\nAnd the file is gonna take in the string.\n\n128\n00:07:28.911 --> 00:07:29.843\nWe’re gonna have to import file.\n\n129\n00:07:29.843 --> 00:07:37.142\nI just did that we also\nimported BufferedImage I think,\n\n130\n00:07:37.142 --> 00:07:42.421\nso then this dot width\nis gonna be equal to\n\n131\n00:07:42.421 --> 00:07:48.186\nbi dot getWidth, and then this dot height.\n\n132\n00:07:51.167 --> 00:07:55.284\nIs bi.getHeight.\n\n133\n00:07:55.284 --> 00:07:57.887\nSo you may notice these are fields\nthat we don't actually have yet.\n\n134\n00:07:57.887 --> 00:08:00.084\nI can go ahead and add them.\n\n135\n00:08:00.084 --> 00:08:03.384\nWe're also gonna want, so, height, and\n\n136\n00:08:03.384 --> 00:08:07.600\nwe're gonna want an id,\nI think they can be private.\n\n137\n00:08:07.600 --> 00:08:08.400\nPretty sure that's fine.\n\n138\n00:08:09.510 --> 00:08:13.610\nThis was not supposed to be with them,\nbut yeah, that's,\n\n139\n00:08:13.610 --> 00:08:16.482\nI'm not sure exactly why that happened.\n\n140\n00:08:16.482 --> 00:08:22.156\nI think that was Eclipse trying\ntoo clever for me there.\n\n141\n00:08:22.156 --> 00:08:23.710\nNo, why is it doing that?\n\n142\n00:08:23.710 --> 00:08:24.460\nThat's kind of annoying.\n\n143\n00:08:24.460 --> 00:08:25.890\nDo you know how to get that go away?\n\n144\n00:08:25.890 --> 00:08:27.720\n&gt;&gt; So usually when I have\nmultiple cursors like that,\n\n145\n00:08:27.720 --> 00:08:31.090\njust clicking off of it keeps it\nfrom typing in multiple places.\n\n146\n00:08:31.090 --> 00:08:35.240\nBut sometimes our editors and\ntooling kind of get in our way.\n\n147\n00:08:35.240 --> 00:08:38.250\nSo if that doesn't work,\nI'm kind of at a miss.\n\n148\n00:08:38.250 --> 00:08:41.170\n&gt;&gt; I think it's fixed now, I'm just\ngoing to put it on a separate line.\n\n149\n00:08:41.170 --> 00:08:43.790\nIf you are having a similar, I don't know\nwhy you would be having a similar problem,\n\n150\n00:08:43.790 --> 00:08:45.880\nhonestly, but let's just say you were.\n\n151\n00:08:45.880 --> 00:08:47.480\nYou could do something like this, too.\n\n152\n00:08:47.480 --> 00:08:48.440\nIt's really equivalent.\n\n153\n00:08:48.440 --> 00:08:51.580\nThere's not really any syntactical or\nsemantic difference.\n\n154\n00:08:52.660 --> 00:08:54.160\nSo we've got those fields now.\n\n155\n00:08:54.160 --> 00:08:55.080\nThey're initialized.\n\n156\n00:08:55.080 --> 00:08:57.990\nWe haven't done anything with ID yet,\nbut we will.\n\n157\n00:08:57.990 --> 00:09:00.150\nWhat is my error on these?\n\n158\n00:09:00.150 --> 00:09:00.780\nIt's not used.\n\n159\n00:09:00.780 --> 00:09:02.000\nOkay, well we're assigning it.\n\n160\n00:09:02.000 --> 00:09:03.010\nBut we're not using it yet.\n\n161\n00:09:03.010 --> 00:09:03.920\nFair enough.\n\n162\n00:09:03.920 --> 00:09:06.550\nSo we're gonna create\nan array of integers.\n\n163\n00:09:06.550 --> 00:09:08.420\nIt's gonna be pixels underscore raw.\n\n164\n00:09:09.860 --> 00:09:15.256\nAnd that's gonna be a 1D array, but\nthis one's gonna be bufferedimage.getrgb,\n\n165\n00:09:15.256 --> 00:09:21.710\nand we're gonna do zero and\nzero for the start x and start y.\n\n166\n00:09:21.710 --> 00:09:24.960\nThe width is going to be rwidth or\nthis.width\n\n167\n00:09:24.960 --> 00:09:29.909\nshould be the same, and\nthis one's gonna be this.height.\n\n168\n00:09:33.910 --> 00:09:37.550\nAnd I'm running out space here,\nsorry, got to keep scrolling.\n\n169\n00:09:37.550 --> 00:09:42.280\nSo, for RGB array what we're\ngoing to do is just put null,\n\n170\n00:09:43.940 --> 00:09:45.710\nand for\nour offset we're going to put zero,\n\n171\n00:09:45.710 --> 00:09:51.480\nbecause we can start from just a null\narray, shouldn't be a big deal,\n\n172\n00:09:51.480 --> 00:09:56.700\nI don't think we need this last parameter\nthere, nd we could just do semi colon.\n\n173\n00:09:56.700 --> 00:09:57.320\nThis ain't gonna work.\n\n174\n00:09:58.920 --> 00:10:00.017\nIt's because I have a comma, I think.\n\n175\n00:10:02.211 --> 00:10:03.269\nStill not working.\n\n176\n00:10:03.269 --> 00:10:04.975\nWhat's the deal?\n\n177\n00:10:04.975 --> 00:10:09.720\n0, 0, width, height, null, 0, and\nwe have to give it width again.\n\n178\n00:10:09.720 --> 00:10:11.325\nSorry about that.\n\n179\n00:10:11.325 --> 00:10:15.250\nThis.width, not exactly sure why\nyou have to pass it in twice.\n\n180\n00:10:15.250 --> 00:10:19.860\nI think one is maybe the width of the\nimage, and then a second is the width of\n\n181\n00:10:19.860 --> 00:10:25.870\nthe texture, not entirely sure, but\nthey're the same for us, so it's fine.\n\n182\n00:10:25.870 --> 00:10:29.250\nNow we're gonna do a byte buffer,\nso that's a 1D array, but\n\n183\n00:10:29.250 --> 00:10:32.200\nit's gonna store the color values for\nevery single color.\n\n184\n00:10:33.210 --> 00:10:37.898\nAnd we can do a byte buffer of pixels,\n\n185\n00:10:37.898 --> 00:10:44.736\npixels = BufferUtils.createByteBuffer,\nyeah.\n\n186\n00:10:44.736 --> 00:10:48.190\nAnd this is gonna be width\ntimes height times four.\n\n187\n00:10:48.190 --> 00:10:51.910\nAnd the reason we're doing that is because\nthere is width times height pixels\n\n188\n00:10:51.910 --> 00:10:53.080\nin our image.\n\n189\n00:10:53.080 --> 00:10:56.320\nAnd multiply by four for\nthe number of like color channels.\n\n190\n00:10:56.320 --> 00:10:59.420\nRGB and then the alpha one\nthat we don't really use.\n\n191\n00:10:59.420 --> 00:11:06.680\nSo that should be width*height*4.\n\n192\n00:11:06.680 --> 00:11:08.930\nYou can do the .width.\n\n193\n00:11:08.930 --> 00:11:13.190\nI'm not gonna bother retyping that, that's\nkinda the correct way to do it though, or\n\n194\n00:11:13.190 --> 00:11:15.078\nthe better way, the preferred way.\n\n195\n00:11:15.078 --> 00:11:18.270\nSo, int i=0,\nwe're gonna do a for loop here.\n\n196\n00:11:19.350 --> 00:11:23.170\nWe're gonna do while i is less\nthan the width, and i++, and\n\n197\n00:11:23.170 --> 00:11:26.260\nthis is actually gonna be a nested for\nloop.\n\n198\n00:11:26.260 --> 00:11:27.840\nSo we're gonna do sort of that same thing,\nbut\n\n199\n00:11:27.840 --> 00:11:32.770\nwith j's, and we're gonna iterate\nacross the whole dang thing.\n\n200\n00:11:32.770 --> 00:11:39.610\nWe gotta go across both the length and the\nwidth, or the height and width I guess,\n\n201\n00:11:39.610 --> 00:11:44.100\nand make sure that we are squared away,\nand that we're hitting every pixel.\n\n202\n00:11:45.440 --> 00:11:50.752\nSo inside of this nested for\nloop we are gonna do int pixel\n\n203\n00:11:50.752 --> 00:11:57.052\n= pixels_raw.\n\n204\n00:11:57.052 --> 00:12:01.608\nAnd we're accessing elements, sorry,\n\n205\n00:12:01.608 --> 00:12:06.434\nwe're gonna access element i*width + j.\n\n206\n00:12:06.434 --> 00:12:08.089\nBecause it's a one dimensional array, but\n\n207\n00:12:08.089 --> 00:12:10.480\nit is actually storing\nall of that information.\n\n208\n00:12:10.480 --> 00:12:13.640\nSo j is sort of the offset in this case,\nthe height.\n\n209\n00:12:13.640 --> 00:12:19.160\nAnd then the width is being\nmultiplied by however many\n\n210\n00:12:19.160 --> 00:12:24.540\ncolumns we've already, or however many\nrows, I guess, we've already gotten over.\n\n211\n00:12:24.540 --> 00:12:27.962\nI think you get the concept there,\nso I'm just gonna leave it at that,\n\n212\n00:12:27.962 --> 00:12:30.696\nnow the next couple of lines\nare a little bit confusing.\n\n213\n00:12:30.696 --> 00:12:33.348\nWe have to do sort of\nsome bit shift operators,\n\n214\n00:12:33.348 --> 00:12:38.111\nthat we haven't really talked about up\nuntil now, that operate at the byte level.\n\n215\n00:12:38.111 --> 00:12:40.995\nSo let's do pixels.put.\n\n216\n00:12:40.995 --> 00:12:43.892\nAnd we are gonna byte,\n\n217\n00:12:43.892 --> 00:12:48.790\nagain that's just a Java primitive.\n\n218\n00:12:48.790 --> 00:12:50.050\nWe haven't talked about it for a while.\n\n219\n00:12:50.050 --> 00:12:55.530\nGo back and check one of the most early\nepisodes if you are missing what that is.\n\n220\n00:12:55.530 --> 00:13:03.427\nSo I think we need ((pixels And\nwe're going to shift 16.\n\n221\n00:13:03.427 --> 00:13:09.420\n\\And then this is a bitwise or,\nor a bitwise and, sorry.\n\n222\n00:13:09.420 --> 00:13:11.790\nIf you do just a single and,\nthat's at the bit level.\n\n223\n00:13:11.790 --> 00:13:19.030\nSo that means if you have like,\nlet's just say 101 and 001.\n\n224\n00:13:19.030 --> 00:13:22.250\nThat would actually return 001.\n\n225\n00:13:22.250 --> 00:13:26.660\nBecause it's gonna check every\nsingle bit against its component,\n\n226\n00:13:26.660 --> 00:13:31.650\nor its corresponding bit location.\n\n227\n00:13:31.650 --> 00:13:35.460\nAnd so it's only gonna return the ones\nthat are one for both of them.\n\n228\n00:13:35.460 --> 00:13:38.460\nIt has to be one for both,\nnot for just one or the other.\n\n229\n00:13:38.460 --> 00:13:41.340\nNot for only if one is and not both are.\n\n230\n00:13:41.340 --> 00:13:45.680\nIt has to be both in order for\nany of those slots to return as one.\n\n231\n00:13:45.680 --> 00:13:49.040\nSo what are we gonna compare that against?\n\n232\n00:13:49.040 --> 00:13:50.750\nWe're actually gonna\ncompare it against 255,\n\n233\n00:13:50.750 --> 00:13:53.186\nwhich is just gonna be like\na full kind of thing, right?\n\n234\n00:13:53.186 --> 00:13:59.330\nIs that byte buffer, I meant pixel, sorry.\n\n235\n00:13:59.330 --> 00:14:04.880\nAnd so this one's gonna be\nthe red channel right here,\n\n236\n00:14:04.880 --> 00:14:07.783\nthat we're shifting 16.\n\n237\n00:14:07.783 --> 00:14:14.981\nAnd we are gonna do like this,\nI think we're gonna do 8 for green, and\n\n238\n00:14:14.981 --> 00:14:21.920\nwe're gonna do none for the,\nso red, green, and then blue.\n\n239\n00:14:21.920 --> 00:14:25.939\nAnd then this one's the alpha one, if you\nshifted 24 you would get the alpha one.\n\n240\n00:14:25.939 --> 00:14:27.810\nWe ought to do that too.\n\n241\n00:14:27.810 --> 00:14:30.700\nBut I don't know that it's as\nnecessary as the other ones.\n\n242\n00:14:30.700 --> 00:14:32.960\nSo we've got all those now.\n\n243\n00:14:32.960 --> 00:14:37.230\nAfter this four loop that we've written,\nwe have to end up flipping those pixels.\n\n244\n00:14:37.230 --> 00:14:39.131\nSo pixels.flip.\n\n245\n00:14:39.131 --> 00:14:41.978\nAuto-complete did not work.\n\n246\n00:14:41.978 --> 00:14:48.292\nPixels.flip, and we have to do id\n\n247\n00:14:48.292 --> 00:14:54.184\n= glGenTextures, like that.\n\n248\n00:14:54.184 --> 00:14:56.901\nIs that not, we haven't,\nI don't think, imported.\n\n249\n00:14:56.901 --> 00:14:59.420\nYeah, sorry, we're actually gonna\ndo a static import up here.\n\n250\n00:15:00.510 --> 00:15:04.192\nImport static\n\n251\n00:15:04.192 --> 00:15:12.785\norg.lwjgl.opengl.GL11,\n\n252\n00:15:12.785 --> 00:15:14.630\nboom.\n\n253\n00:15:17.550 --> 00:15:18.110\nI think that's good.\n\n254\n00:15:19.420 --> 00:15:20.700\nYeah, our error went away.\n\n255\n00:15:20.700 --> 00:15:23.180\nSo, sorry,\nI had to use a static import there.\n\n256\n00:15:23.180 --> 00:15:26.370\nYou could've probably just\ndone gl1.glGenTextures,\n\n257\n00:15:26.370 --> 00:15:28.875\nif you wanted to just import\nit as non-statically.\n\n258\n00:15:30.840 --> 00:15:32.370\nSo we got all that.\n\n259\n00:15:32.370 --> 00:15:33.900\nNow we have to bind the texture.\n\n260\n00:15:34.990 --> 00:15:36.550\n&gt;&gt; You know, Mark, let me jump in here.\n\n261\n00:15:36.550 --> 00:15:39.770\nSo you said we had to flip the pixels,\nwhat is that actually doing?\n\n262\n00:15:39.770 --> 00:15:41.910\nIs it flipping\nthe orientation of the array?\n\n263\n00:15:41.910 --> 00:15:44.050\nOr is it flipping the channels?\n\n264\n00:15:44.050 --> 00:15:46.450\nOr is it,\nwhat is it doing behind the scenes?\n\n265\n00:15:46.450 --> 00:15:49.720\n&gt;&gt; So we've sort of done all this\nbackwards, and now it has to get flipped,\n\n266\n00:15:49.720 --> 00:15:50.855\nand if we don't do this.\n\n267\n00:15:50.855 --> 00:15:55.506\nI could actually uncomment it and\nwe could see the difference.\n\n268\n00:15:55.506 --> 00:15:56.893\nAt the end, do you wanna try that?\n\n269\n00:15:56.893 --> 00:15:58.930\n&gt;&gt; Yeah, I mean we can come back and\ndo that.\n\n270\n00:15:58.930 --> 00:16:03.665\nCuz I was wondering, I think I know what's\ngoing on but I figured I would ask.\n\n271\n00:16:03.665 --> 00:16:06.689\n&gt;&gt; Mm-hm\n&gt;&gt; So you used I and J interchangeably,\n\n272\n00:16:06.689 --> 00:16:09.770\nyou did what a column major and nested for\n\n273\n00:16:09.770 --> 00:16:13.705\na loop whereas a row major,\nand that I times width.\n\n274\n00:16:13.705 --> 00:16:14.471\n&gt;&gt; Yeah.\n\n275\n00:16:14.471 --> 00:16:18.075\n&gt;&gt; Normally I would do that as I\ntimes height, and then as the row,\n\n276\n00:16:18.075 --> 00:16:20.190\nbut you actually have them flipped.\n\n277\n00:16:20.190 --> 00:16:22.371\n&gt;&gt; Mm-hm.\n&gt;&gt; And neither one of them is necessarily\n\n278\n00:16:22.371 --> 00:16:25.650\ninvalid, you just have to be\ncognizant of said things.\n\n279\n00:16:25.650 --> 00:16:28.305\n&gt;&gt; Yeah, I think we should,\nat the end if you remind me,\n\n280\n00:16:28.305 --> 00:16:32.032\nas an experiment we'll just cut that\nline and see what happens without it.\n\n281\n00:16:32.032 --> 00:16:33.479\nI think that would be a good thing to do.\n\n282\n00:16:33.479 --> 00:16:36.315\nSo, glBindTexture now.\n\n283\n00:16:39.533 --> 00:16:45.539\nAnd in here we're going\nto give it GL_TEXTURE_2D\n\n284\n00:16:45.539 --> 00:16:50.049\nlike that, and is that not important?\n\n285\n00:16:50.049 --> 00:16:53.001\nThere's another parameter\nthat we are missing,\n\n286\n00:16:53.001 --> 00:16:55.609\nwe're gonna give it the ID as well, sorry.\n\n287\n00:16:55.609 --> 00:16:58.314\nSo, again we have to generate an ID for\n\n288\n00:16:58.314 --> 00:17:02.889\nthis texture basically, and\nthen we're binding it to that ID.\n\n289\n00:17:02.889 --> 00:17:07.684\nSo now we need glTextParameterf, and these\nare some of the more complicated lines,\n\n290\n00:17:07.684 --> 00:17:08.369\nI believe.\n\n291\n00:17:12.939 --> 00:17:13.963\nGL underscore,\n\n292\n00:17:13.963 --> 00:17:18.578\nagain these are just kind of a bunch of\nenums that open GL already has for us.\n\n293\n00:17:18.578 --> 00:17:23.610\nI would not sweat them too much but\n\n294\n00:17:23.610 --> 00:17:28.289\nGL_TEXTURE_MIN_FILTER.\n\n295\n00:17:28.289 --> 00:17:31.448\nThese are just again, 2D graphics\nare a little bit complicated and\n\n296\n00:17:31.448 --> 00:17:34.842\nyou just kinda got to work with\nthe libraries even if they're kinda old.\n\n297\n00:17:34.842 --> 00:17:39.309\nEven if they don't necessarily implement\nthemselves like it's easily as you\n\n298\n00:17:39.309 --> 00:17:40.060\nwould like.\n\n299\n00:17:40.060 --> 00:17:42.913\nYou didn't write them and\nit's hard to kind go back and\n\n300\n00:17:42.913 --> 00:17:45.904\ntweak them in such a way that\nit's easier to understand.\n\n301\n00:17:45.904 --> 00:17:50.465\nAnd this is gonna be MAG_FILTER,\nmagnitude filter,\n\n302\n00:17:50.465 --> 00:17:54.638\ninstead of MIN_FILTER,\nand also GL_NEAREST.\n\n303\n00:17:54.638 --> 00:17:56.937\nThere are sort of two different modes,\nthere's GL_NEAREST and\n\n304\n00:17:56.937 --> 00:17:58.370\nsomething else that I can't remember.\n\n305\n00:17:59.850 --> 00:18:02.726\nAnd now we'll do glTexImage2D.\n\n306\n00:18:06.996 --> 00:18:13.099\nCapital D, GL_TEXTURE_2D like that,\n\n307\n00:18:13.099 --> 00:18:18.191\n0 and then GL_ALPHA, all right.\n\n308\n00:18:18.191 --> 00:18:19.851\nI think that's correct.\n\n309\n00:18:19.851 --> 00:18:21.947\nNot correct?\n\n310\n00:18:21.947 --> 00:18:24.070\nGL_TEXTURE_2D, RGBA, sorry.\n\n311\n00:18:24.070 --> 00:18:27.561\nSo that's the type again,\nwe're in RGBA mode,\n\n312\n00:18:27.561 --> 00:18:32.939\nthose are the four sort of channels for\ncolors that we have available to us.\n\n313\n00:18:32.939 --> 00:18:37.349\nAnd I'm not done with parameters,\nsorry this is like the really long line.\n\n314\n00:18:37.349 --> 00:18:41.932\nWe need width, height, and 0 and\n\n315\n00:18:41.932 --> 00:18:45.891\nGL_RGBA again, all right.\n\n316\n00:18:45.891 --> 00:18:52.095\nAnd then we need a GL_UNSINGELD_BYTE,\n\n317\n00:18:52.095 --> 00:18:57.058\nand then pixels that array that we\n\n318\n00:18:57.058 --> 00:19:00.967\nhad from earlier pixels.\n\n319\n00:19:00.967 --> 00:19:02.876\nI think that is about it, and we are,\n\n320\n00:19:02.876 --> 00:19:05.660\nyeah I think we're about\ndone with the constructor.\n\n321\n00:19:05.660 --> 00:19:08.876\n[LAUGH] I'm kind of an ugly\nconstructor guys, sorry.\n\n322\n00:19:08.876 --> 00:19:10.536\nI'm not going to lie, and then.\n\n323\n00:19:10.536 --> 00:19:14.613\n&gt;&gt; And that's just happenstance about how\nyou have to read in files and images and\n\n324\n00:19:14.613 --> 00:19:16.362\nmaintain image color channels.\n\n325\n00:19:16.362 --> 00:19:20.806\nAnd then there's some of that weirdness\nat the bottom with those constants and\n\n326\n00:19:20.806 --> 00:19:23.243\nstatic, I don't now if they're an enum.\n\n327\n00:19:23.243 --> 00:19:24.044\n&gt;&gt; Yeah.\n&gt;&gt; Or maybe they're static constants.\n\n328\n00:19:24.044 --> 00:19:24.902\n&gt;&gt; True.\n\n329\n00:19:24.902 --> 00:19:27.169\n&gt;&gt; Either way you have to\nput all of it in there, and\n\n330\n00:19:27.169 --> 00:19:29.518\nultimately you find this\nin the documentation.\n\n331\n00:19:29.518 --> 00:19:30.125\n&gt;&gt; Yeah.\n\n332\n00:19:30.125 --> 00:19:33.191\n&gt;&gt; There's no way that I'm gonna\nremember that Mark's gonna remember or\n\n333\n00:19:33.191 --> 00:19:35.399\nthat you should ever try\nto memorize these things.\n\n334\n00:19:35.399 --> 00:19:36.006\n&gt;&gt; Mm-hm.\n\n335\n00:19:36.006 --> 00:19:37.101\n&gt;&gt; We're gonna look these up every time.\n\n336\n00:19:37.101 --> 00:19:37.628\n&gt;&gt; Yeah.\n\n337\n00:19:37.628 --> 00:19:39.008\n&gt;&gt; So if you're like,\nhow do we remember that?\n\n338\n00:19:39.008 --> 00:19:40.068\nWe don't, we just look.\n\n339\n00:19:40.068 --> 00:19:41.756\n&gt;&gt; I have an outline, it's right here.\n\n340\n00:19:41.756 --> 00:19:45.864\nI can show you, it's got all this useful\nstuff on it, I'm working from that.\n\n341\n00:19:45.864 --> 00:19:50.182\nI'm not remembering these insane things,\nI wouldn't be bothered with that honestly.\n\n342\n00:19:50.182 --> 00:19:54.678\nSo now we're going to write one more\nmethod, we have to bind it to the texture,\n\n343\n00:19:54.678 --> 00:19:56.871\nwe called this elsewhere in the code.\n\n344\n00:19:56.871 --> 00:20:00.486\nSo in order for\neverything else to compile,\n\n345\n00:20:00.486 --> 00:20:05.968\nwe're going to need to bind it,\nglBindTexture like that, boom.\n\n346\n00:20:05.968 --> 00:20:12.302\nAnd we're gonna do GL_TEXTURE_2D,\nand we're gonna give it the ID.\n\n347\n00:20:12.302 --> 00:20:14.956\nAll right, and I think that's about it.\n\n348\n00:20:14.956 --> 00:20:20.729\nSo, now if we go back here, I think we\nalready uncommented this stuff, right?\n\n349\n00:20:23.391 --> 00:20:24.203\nTop left, yeah.\n\n350\n00:20:24.203 --> 00:20:26.068\nSo let's see what happens\nwhen we run this.\n\n351\n00:20:29.663 --> 00:20:31.227\nGot an exception.\n\n352\n00:20:31.227 --> 00:20:33.647\nOkay, so unresolved compilation problem.\n\n353\n00:20:33.647 --> 00:20:39.184\nSo we had an IOException I guess,\nwhich leads me to believe\n\n354\n00:20:39.184 --> 00:20:44.048\nit is not taking the texture\nfrom the right folder.\n\n355\n00:20:44.048 --> 00:20:49.930\nSort of see where this is happening at, so\nit's dot slash, is that how I wrote it?\n\n356\n00:20:49.930 --> 00:20:51.581\nI feel like that string\nmight not be correct, but\n\n357\n00:20:51.581 --> 00:20:52.920\ndo you see that in your outline Justin?\n\n358\n00:20:52.920 --> 00:20:55.943\n&gt;&gt; We'll, I think you had it\noriginally in a resources folder but\n\n359\n00:20:55.943 --> 00:20:56.976\nwhen it copied over.\n\n360\n00:20:56.976 --> 00:20:57.868\n&gt;&gt; Yeah.\n\n361\n00:20:57.868 --> 00:21:00.115\n&gt;&gt; In a previous episode it\nmoved it to a different folder.\n\n362\n00:21:00.115 --> 00:21:01.452\n&gt;&gt; I called it text instead.\n\n363\n00:21:01.452 --> 00:21:05.287\n&gt;&gt; So it might be,\nwe have to finagle that.\n\n364\n00:21:05.287 --> 00:21:06.511\n&gt;&gt; Okay.\n\n365\n00:21:06.511 --> 00:21:08.193\n&gt;&gt; So, return new texture.\n\n366\n00:21:08.193 --> 00:21:12.537\nI did have a resources folder\nthat I called res, but\n\n367\n00:21:12.537 --> 00:21:15.271\nI called this one text instead.\n\n368\n00:21:15.271 --> 00:21:19.458\nI think it should be roughly the same,\nI don´t know what else would be changed.\n\n369\n00:21:19.458 --> 00:21:21.096\nReturn new texture,\n\n370\n00:21:21.096 --> 00:21:26.293\nwe apparently have some kind of\ncompilation problem here, right.\n\n371\n00:21:26.293 --> 00:21:33.584\nLet's add thread separation,\nis that what we needed?\n\n372\n00:21:38.506 --> 00:21:39.440\nYeah, I don't think.\n\n373\n00:21:39.440 --> 00:21:43.307\nSo now it's elsewhere,\nright, where is the.\n\n374\n00:21:45.953 --> 00:21:49.526\nLet's try again,\ne.getTexture, yeah okay, so\n\n375\n00:21:49.526 --> 00:21:54.430\nwe're gonna just add threads\ndeclarations to some of these methods,\n\n376\n00:21:54.430 --> 00:21:59.267\nagain I did the try catch all the way\nback in this main game loop thing.\n\n377\n00:21:59.267 --> 00:22:04.958\nI sort of just pass it from so on, that\nwas just the compilation issue though,\n\n378\n00:22:04.958 --> 00:22:09.351\nand if you see it actually runs right now,\nthis is working.\n\n379\n00:22:09.351 --> 00:22:13.509\n[LAUGH] So we still do have control over\nour car entity but you can see that our\n\n380\n00:22:13.509 --> 00:22:17.551\ntextures our running on the screen,\nwhich is the goal of this episode.\n\n381\n00:22:17.551 --> 00:22:23.000\nWe've got that star that eventually\ncrashes into our car, and I believe\n\n382\n00:22:23.000 --> 00:22:29.180\nthe reason it's white by the way is not\nthrough any fault of our programming here.\n\n383\n00:22:29.180 --> 00:22:33.565\nI think if you had textures that\nactually have proper transparency,\n\n384\n00:22:33.565 --> 00:22:36.220\nit would not be showing that white there.\n\n385\n00:22:36.220 --> 00:22:39.239\nI believe it's an issue with the way\nI created my own sample textures.\n\n386\n00:22:39.239 --> 00:22:43.604\nI did it in MS Paint, which does not have\ntransparency enabled as you maybe aware\n\n387\n00:22:43.604 --> 00:22:47.330\nof, but the PNG file type generally\ndoes support that as a feature.\n\n388\n00:22:47.330 --> 00:22:50.449\nI think I didn't notice it before because\nwhen I was doing this I did it with\n\n389\n00:22:50.449 --> 00:22:52.732\na white background, and so\nit just kinda blended in.\n\n390\n00:22:52.732 --> 00:22:54.558\nI wouldn't worry too much about that,\n\n391\n00:22:54.558 --> 00:22:58.278\nI'm pretty sure yours will work fine\nespecially if you use a white background.\n\n392\n00:22:58.278 --> 00:23:01.937\nBut if you make your own texture\nin a better way than I did.\n\n393\n00:23:01.937 --> 00:23:05.540\n&gt;&gt; Mark, I'm kinda itching to see what\nhappens if we turn that flip off.\n\n394\n00:23:05.540 --> 00:23:06.301\n&gt;&gt; Yeah, let's do it.\n\n395\n00:23:06.301 --> 00:23:08.033\n&gt;&gt; And see what happens, and\n\n396\n00:23:08.033 --> 00:23:12.462\nthen well I guess we get to go\ncelebrate after we see what that does.\n\n397\n00:23:12.462 --> 00:23:13.329\n&gt;&gt; Yeah.\n&gt;&gt; Because well,\n\n398\n00:23:13.329 --> 00:23:16.053\nwe have graphics on the screen\nthey're moving about, it's our goal.\n\n399\n00:23:16.053 --> 00:23:19.727\n&gt;&gt; So a couple of other things, you'll see\never 50 milliseconds that it's printing\n\n400\n00:23:19.727 --> 00:23:23.519\n50ms, that was just the debug output I had\nto make sure the timing was about correct.\n\n401\n00:23:23.519 --> 00:23:29.088\nWe would want to probably take that out,\nso let's find where that line is and\n\n402\n00:23:29.088 --> 00:23:35.110\ncomment that out, and then you said it was\nin the texture class when we flipped it.\n\n403\n00:23:36.930 --> 00:23:40.939\nSo pixels.flip, so our car was facing\nright and our star was aligned as you\n\n404\n00:23:40.939 --> 00:23:45.280\nwould expect the typical five pointed\nstar to be, and it's just doesn't work.\n\n405\n00:23:45.280 --> 00:23:47.693\nSo you got to flip it in order for\nthe channels to be correct or\n\n406\n00:23:47.693 --> 00:23:48.622\nsomething, I guess.\n\n407\n00:23:48.622 --> 00:23:51.875\n&gt;&gt; Well I guess it has to do with how\nwe construct all those textures and\n\n408\n00:23:51.875 --> 00:23:53.444\nthings because I'm guessing,\n\n409\n00:23:53.444 --> 00:23:57.242\nthere's a certain amount of height with\naspect ratio and how we read that in.\n\n410\n00:23:57.242 --> 00:23:59.376\n&gt;&gt; Okay.\n&gt;&gt; So maybe there's a column major\n\n411\n00:23:59.376 --> 00:24:02.812\nrequirement or at the very least,\nwe go and flip height and\n\n412\n00:24:02.812 --> 00:24:06.965\nwidth if we use row major, and\nthen when you flip it just cranks all up.\n\n413\n00:24:06.965 --> 00:24:07.943\nBut there you have it,\n\n414\n00:24:07.943 --> 00:24:10.631\nwe actually have some Sprites and\n2D graphics on the screen.\n\n415\n00:24:10.631 --> 00:24:12.270\nWho knew it was gonna be that much work?\n\n416\n00:24:12.270 --> 00:24:15.216\nWell, full disclosure,\nI knew it was gonna be enchanted work,\n\n417\n00:24:15.216 --> 00:24:18.067\nMark knew it was gonna be a cut\nchunk work and now you do as well.\n\n418\n00:24:18.067 --> 00:24:20.996\nBut we're not finished with our game,\nso definitely join us back for\n\n419\n00:24:20.996 --> 00:24:22.320\nmore Object-Oriented Java.\n\n420\n00:24:22.320 --> 00:24:24.234\nBut for now, we're going to go ahead and\nwrap this one up.\n\n421\n00:24:24.234 --> 00:24:27.577\nSo signing off for DevProTV,\nI've been your host Justin Dennison.\n\n422\n00:24:27.577 --> 00:24:28.306\n&gt;&gt; Mark Davis.\n\n423\n00:24:28.306 --> 00:24:29.444\n&gt;&gt; And we'll see ya next time.\n\n424\n00:24:29.444 --> 00:24:35.504\n[MUSIC]\n\n",
          "vimeoId": "227425025"
        },
        {
          "description": "In this episode, Justin and Mark started adding the ability to control the sprites on the screen using keyboard controls. Mark accomplishes this with the use of GLFW as a manner of handling keyboard commands.",
          "length": "1517",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-24-keyboard_controls_with_glfw-080317-PGM.00_46_29_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-24-keyboard_controls_with_glfw-080317-PGM.00_46_29_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-24-keyboard_controls_with_glfw-080317-PGM.00_46_29_13.Still001-sm.jpg",
          "title": "Keyboard Controls with GLFW",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.909 --> 00:00:16.960\nGreetings, everyone and welcome to\nanother exciting episode of DevPro TV.\n\n3\n00:00:16.960 --> 00:00:19.346\nI'm your host Justin Dennison and\nin today's episode,\n\n4\n00:00:19.346 --> 00:00:21.590\nwe're continuing on with\nour object oriented Java.\n\n5\n00:00:21.590 --> 00:00:25.502\nAnd well, in the last episode we actually\ngot some of the sprites on the screen.\n\n6\n00:00:25.502 --> 00:00:28.014\nAnd everything was going well,\nbut I noticed a problem,\n\n7\n00:00:28.014 --> 00:00:29.752\nwe can't actually control anything.\n\n8\n00:00:29.752 --> 00:00:34.410\nBut luckily we have the man with the plan\nin the studio today Mr Mark Davis.\n\n9\n00:00:34.410 --> 00:00:35.430\nHow are you doing today Mark?\n\n10\n00:00:35.430 --> 00:00:37.030\n&gt;&gt; Pretty good, feeling alright,\ngot wet, you know.\n\n11\n00:00:37.030 --> 00:00:38.480\n&gt;&gt; Yeah yeah-\n&gt;&gt; But you gotta roll with the punches.\n\n12\n00:00:38.480 --> 00:00:41.196\n&gt;&gt; But the weather around here\ncan be very unpredictable, but\n\n13\n00:00:41.196 --> 00:00:42.400\nthat's just how it goes.\n\n14\n00:00:42.400 --> 00:00:46.180\nSo we need some control,\nhow are we actually going to achieve that,\n\n15\n00:00:46.180 --> 00:00:49.840\nor specifically,\nwhere are we going in order to do that?\n\n16\n00:00:49.840 --> 00:00:54.200\n&gt;&gt; Okay, so within our game loop,\nevery 50 milliseconds we're gonna be\n\n17\n00:00:54.200 --> 00:00:57.950\ntaking our second that keeps track\nof where our entities are in space.\n\n18\n00:00:57.950 --> 00:01:02.530\nThat's to keep everything equivalent for\nwhatever processor the user may be having.\n\n19\n00:01:02.530 --> 00:01:07.315\nAnd so that there's no sort of\ndependency on the hardware, and\n\n20\n00:01:07.315 --> 00:01:12.566\nwhat's going on, on like the lower\nlevels of the computer, right.\n\n21\n00:01:12.566 --> 00:01:15.842\nWhat we can do is sort of print\na debug output every 50 milliseconds,\n\n22\n00:01:15.842 --> 00:01:19.750\nsort of to make sure that it's like\non track for, the timing is correct.\n\n23\n00:01:19.750 --> 00:01:22.760\nAnd we can also, to test it and verify it.\n\n24\n00:01:22.760 --> 00:01:26.480\nAnd we also, during that step are gonna\nwanna check our keyboard for input.\n\n25\n00:01:26.480 --> 00:01:30.390\nAnd so we've got this GLFW library,\nit's sort of gonna help us do that.\n\n26\n00:01:30.390 --> 00:01:33.614\nI'm gonna create it in sort\nof a separate static method,\n\n27\n00:01:33.614 --> 00:01:38.262\njust to sort of to keep our code\nmore separated and easy to follow.\n\n28\n00:01:38.262 --> 00:01:43.350\n&gt;&gt; All right, Mark, so we have several,\nI think we're doing, keyboard rhyme?\n\n29\n00:01:43.350 --> 00:01:45.556\nAnd then what keys are we gonna use and\nspecifically,\n\n30\n00:01:45.556 --> 00:01:47.820\nyou're talking about using\nthese in a static method.\n\n31\n00:01:47.820 --> 00:01:49.300\nDoes that handle all the keys or\n\n32\n00:01:49.300 --> 00:01:52.610\nare we going to have separate\nstatic methods for each key?\n\n33\n00:01:52.610 --> 00:01:55.670\n&gt;&gt; Yeah, I'll just probably do\nthem all in one static method.\n\n34\n00:01:55.670 --> 00:01:58.430\nYou could do separate static\nmethods if you wanted, but\n\n35\n00:01:58.430 --> 00:02:03.290\nI think it's a little bit low enough level\nto where you can sort of understand, okay,\n\n36\n00:02:03.290 --> 00:02:07.200\nthis is the method that just checks for\nall input and handles it appropriately.\n\n37\n00:02:07.200 --> 00:02:10.410\nBut we're gonna do the W, A,\nS, and D keys for directions.\n\n38\n00:02:10.410 --> 00:02:13.770\nSo S is gonna be brake, W is gonna be gas.\n\n39\n00:02:13.770 --> 00:02:16.317\nWe'll turn left and right with A and D.\n\n40\n00:02:16.317 --> 00:02:20.140\nAnd we're also gonna need C,\nC is gonna set cruise control.\n\n41\n00:02:20.140 --> 00:02:22.920\nJust because we have that feature,\nso we may as well use it.\n\n42\n00:02:22.920 --> 00:02:26.250\nAnd E is going to just randomly\nspawn an entity with kind\n\n43\n00:02:26.250 --> 00:02:28.398\nof like a random velocity vector.\n\n44\n00:02:28.398 --> 00:02:32.121\nSort of just so we can test out\nhow multiple entities would work.\n\n45\n00:02:32.121 --> 00:02:35.499\n&gt;&gt; All right Mark, well that sounds\nlike a great plan but let's,\n\n46\n00:02:35.499 --> 00:02:37.107\nactually see it in practice.\n\n47\n00:02:37.107 --> 00:02:38.364\nLet's get us started.\n\n48\n00:02:38.364 --> 00:02:40.410\n&gt;&gt; Cool, so lets go on to my screen.\n\n49\n00:02:40.410 --> 00:02:45.880\nAnd we're gonna send a method here\nwe're gonna use control Entity.\n\n50\n00:02:47.240 --> 00:02:48.990\nAnd we're gonna pass in a couple things.\n\n51\n00:02:50.190 --> 00:02:52.000\nIf we wanna be able to close the screen,\n\n52\n00:02:52.000 --> 00:02:55.080\nwhich I will do in the next when\nwe talk about saving the game.\n\n53\n00:02:55.080 --> 00:02:57.780\nWe're gonna need to pass in the window\nbecause that's what we're going to close.\n\n54\n00:03:00.300 --> 00:03:01.820\nSo that's gonna be long,\n\n55\n00:03:01.820 --> 00:03:05.440\nwe're also going to pass in an entity\nthat we're going to control.\n\n56\n00:03:05.440 --> 00:03:07.330\nNow, there's a couple of\nthings you could do here.\n\n57\n00:03:07.330 --> 00:03:11.293\nYou could pass in,\nwe're gonna pass in the car, right, but\n\n58\n00:03:11.293 --> 00:03:14.110\nyou could pass in, so our car's name is C.\n\n59\n00:03:14.110 --> 00:03:16.290\nI'm gonna go ahead and do that.\n\n60\n00:03:16.290 --> 00:03:18.348\nYou could cast C to a car, and\n\n61\n00:03:18.348 --> 00:03:24.070\nthen you would be limited to only\ncontrolling cars instead of any entity.\n\n62\n00:03:24.070 --> 00:03:27.700\nAnd that might generally be what you\nwould wanna do, but we also sorta\n\n63\n00:03:27.700 --> 00:03:31.860\nwanna make our method so that you could\ncontrol any entity if you wanted to.\n\n64\n00:03:31.860 --> 00:03:34.960\nAnd maybe you have a different\nsort of set of controls\n\n65\n00:03:34.960 --> 00:03:37.260\nthat happen if the entity\ndoesn't happen to be a car.\n\n66\n00:03:37.260 --> 00:03:40.890\nSo inside of this method,\nwe're gonna do like an instants of check.\n\n67\n00:03:40.890 --> 00:03:45.700\nAnd we're gonna make sure that we\ncan handle things different ways.\n\n68\n00:03:45.700 --> 00:03:47.880\nIf it is a car versus if it is an entity.\n\n69\n00:03:47.880 --> 00:03:52.378\nBecause, you may remember from previous\nepisodes, our entities don't have that gas\n\n70\n00:03:52.378 --> 00:03:55.350\nmethod, that brake method,\nthat we've talked about.\n\n71\n00:03:55.350 --> 00:03:57.880\nSo we wouldn't be able\nto use those on them.\n\n72\n00:03:57.880 --> 00:04:00.956\nSo we will have to do\na cast to the entity,\n\n73\n00:04:00.956 --> 00:04:06.756\nfrom the entity to the car class within\nthis static method we're building.\n\n74\n00:04:06.756 --> 00:04:08.740\nSo I'm gonna let it create a stub for\nme here.\n\n75\n00:04:08.740 --> 00:04:11.995\nSo the method control entity, and\nI was right about the parameters,\n\n76\n00:04:11.995 --> 00:04:13.411\ntakes in an entity and a long.\n\n77\n00:04:15.180 --> 00:04:18.100\nSo we've created that down here,\nlet's just skip ahead, do it.\n\n78\n00:04:18.100 --> 00:04:20.690\nWe've go this method stub.\n\n79\n00:04:20.690 --> 00:04:21.540\nPrivate is good for\n\n80\n00:04:21.540 --> 00:04:25.120\naccess modifier, cuz we won't need\nto call this from any other class.\n\n81\n00:04:25.120 --> 00:04:27.020\nVoid doesn't need to\nreturn anything either.\n\n82\n00:04:28.540 --> 00:04:34.260\nSo let's get started, so we're gonna have\njust sort of a bunch of if statements and\n\n83\n00:04:34.260 --> 00:04:37.780\nwhichever ones are true\nare going to happen.\n\n84\n00:04:37.780 --> 00:04:40.452\nThe statements contained within them.\n\n85\n00:04:40.452 --> 00:04:43.970\nAnd we don't want them to like\nexclude each other as possibilities.\n\n86\n00:04:43.970 --> 00:04:48.259\nSo, if you press both the gas and\nthe break in a realistic car scenario,\n\n87\n00:04:48.259 --> 00:04:51.279\nboth the gas and\nbreak would actually be pressed.\n\n88\n00:04:51.279 --> 00:04:56.115\nThey're not necessarily mutually exclusive\nevents that we would wanna be checking for\n\n89\n00:04:56.115 --> 00:04:58.830\nwith like an if else if situation.\n\n90\n00:04:58.830 --> 00:05:04.104\nSo, we're gonna do have to\nmake a call the glfw here,\n\n91\n00:05:04.104 --> 00:05:09.161\nglfw GetKey and\nwe're gonna do win for the window.\n\n92\n00:05:09.161 --> 00:05:11.600\nOr actually window's what I called it.\n\n93\n00:05:11.600 --> 00:05:17.640\nAnd we're gonna do GLFW_KEY_W,\nall caps like that.\n\n94\n00:05:17.640 --> 00:05:19.170\nAnd so that is a constant.\n\n95\n00:05:19.170 --> 00:05:23.310\nNow this is actually going to\nreturn an integer I believe.\n\n96\n00:05:23.310 --> 00:05:29.920\nAnd we're gonna have to compare\nthat against a true value, right.\n\n97\n00:05:29.920 --> 00:05:33.430\nSo if it's essentially equal to\none though we want it to be true,\n\n98\n00:05:33.430 --> 00:05:37.540\nthe condition to be true, and\nif it's equal to zero, we\n\n99\n00:05:41.000 --> 00:05:44.000\nwould skip over this method and\nsay that it's false.\n\n100\n00:05:44.000 --> 00:05:48.650\nOur condition does not pass, and we do\nnot want to press the gas, basically.\n\n101\n00:05:48.650 --> 00:05:53.082\nSo, for the W, I would actually,\nthe OpenGL library wants you to use\n\n102\n00:05:53.082 --> 00:05:59.660\nGL_TRUE there, I've tested it with 1,\nand it works as well.\n\n103\n00:05:59.660 --> 00:06:04.770\nBut the regular way to do that is to use\nGL_TRUE here in this condition check.\n\n104\n00:06:04.770 --> 00:06:06.000\n&gt;&gt; Now, Mark, correct me if I'm wrong,\n\n105\n00:06:06.000 --> 00:06:10.030\nthis is actually something I've\nseen several Java libraries use.\n\n106\n00:06:10.030 --> 00:06:13.030\nAnd that's, yeah, it's an integer,\nit's zero, one, two, or\n\n107\n00:06:13.030 --> 00:06:16.910\nmaybe even a long, but what they do is\nthey assign it to a constant name so\n\n108\n00:06:16.910 --> 00:06:17.820\nit's a little more readable.\n\n109\n00:06:17.820 --> 00:06:19.610\nIs that the only reason we have it here?\n\n110\n00:06:19.610 --> 00:06:24.170\n&gt;&gt; Yeah so, again, like I said glfw GetKey\nis going to return a numerical value.\n\n111\n00:06:24.170 --> 00:06:25.880\nLooks like, yeah it is a int, so\n\n112\n00:06:25.880 --> 00:06:30.150\nwe wanna be able to check that\nint against the value for true.\n\n113\n00:06:30.150 --> 00:06:32.520\nWhatever that int value happens to be.\n\n114\n00:06:32.520 --> 00:06:36.340\nAnd GL TRUE, I think,\nis just assigned to a value of 1, or\n\n115\n00:06:36.340 --> 00:06:39.900\nsome other value that would\ncorrespond to being true.\n\n116\n00:06:39.900 --> 00:06:43.678\nThis condition over here on the left side\nof the equal sign evaluating to true.\n\n117\n00:06:43.678 --> 00:06:46.960\nSo, we wanna check that against that,\nmake sure everything is squared away.\n\n118\n00:06:46.960 --> 00:06:50.457\nI know that's a little bit\nconfusing because generally,\n\n119\n00:06:50.457 --> 00:06:53.462\na method like glfw GetKey\nwould return a Boolean.\n\n120\n00:06:53.462 --> 00:06:57.060\nBut that's just not the way they decided\nto do it in their implementation.\n\n121\n00:06:57.060 --> 00:06:59.210\nSo, we have to account for\nthat, that's all.\n\n122\n00:06:59.210 --> 00:07:03.977\nSo, now that we've made\nour conditional check\n\n123\n00:07:03.977 --> 00:07:08.039\nwe can do our cast so\nif c instance of car.\n\n124\n00:07:10.534 --> 00:07:15.870\nCuz we wouldn't be able to do this if\nour entity didn't happen to be a car,\n\n125\n00:07:15.870 --> 00:07:20.185\nso we wanna force this check\nthat make sure that it's a car.\n\n126\n00:07:20.185 --> 00:07:25.026\nOtherwise, we wouldn't be\n\n127\n00:07:25.026 --> 00:07:29.268\nable to use the gas on it.\n\n128\n00:07:29.268 --> 00:07:31.903\nWhat we're gonna do maybe Car x = and\n\n129\n00:07:31.903 --> 00:07:35.304\nwe're gonna do a cast\nto (Car) c; like that.\n\n130\n00:07:35.304 --> 00:07:37.332\nSo this would throw an exception\nif you try to do it on something\n\n131\n00:07:37.332 --> 00:07:38.550\nthat wasn't a car.\n\n132\n00:07:38.550 --> 00:07:44.957\nBut now we've got this Car x,\nso we can just do x.gas.\n\n133\n00:07:44.957 --> 00:07:49.793\nAnd the computer's a little slow but\nit should work here, and do a semicolon,\n\n134\n00:07:49.793 --> 00:07:53.030\nand I think that's about all we need for\nthis check.\n\n135\n00:07:53.030 --> 00:07:53.624\nSo we can copy and\n\n136\n00:07:53.624 --> 00:07:56.410\npaste some of this code because\nlots of it is going to be the same.\n\n137\n00:07:56.410 --> 00:07:58.049\nFor the next things that we do.\n\n138\n00:07:58.049 --> 00:08:02.894\nSo we're still gonna have to make\nthe same kinds of checks for\n\n139\n00:08:02.894 --> 00:08:08.690\nturnLeft and turnRight, so two,\nthree, four, I'll use six for now.\n\n140\n00:08:10.040 --> 00:08:13.260\nSo we've got the W done,\nnow let's do the S.\n\n141\n00:08:13.260 --> 00:08:21.930\nSo we're gonna do break If our key is S,\nand we're gonna do.\n\n142\n00:08:24.230 --> 00:08:25.520\nSo A, A is gonna be left.\n\n143\n00:08:29.740 --> 00:08:31.774\nTurnLeft.\n\n144\n00:08:31.774 --> 00:08:34.400\nAnd again, remember that if\nyou use methods, turnLeft,\n\n145\n00:08:34.400 --> 00:08:37.830\nI could pass in a number of degrees to\nturn left by, but we're just gonna use\n\n146\n00:08:37.830 --> 00:08:41.300\nthe same default that we coded\nearlier when we did the car class.\n\n147\n00:08:41.300 --> 00:08:42.970\nWe sorta did all that\nwork ahead of time so\n\n148\n00:08:42.970 --> 00:08:46.890\nthat we could leave things simpler\nwhenever we do call those methods, right?\n\n149\n00:08:46.890 --> 00:08:50.090\nWe've got that same default value that\nallows us to call this method but\n\n150\n00:08:50.090 --> 00:08:51.370\nwithout a parameter.\n\n151\n00:08:51.370 --> 00:08:55.280\nAnd that will allow us to turn\nleft by a fixed amount of degrees\n\n152\n00:08:55.280 --> 00:08:58.240\ninstead of whichever variable we pass in.\n\n153\n00:08:58.240 --> 00:09:03.550\nAnd we're gonna do D, and\nthat's gonna turn us right, turnRight.\n\n154\n00:09:03.550 --> 00:09:07.120\nNow I do have a couple more\nkeys that I've set up.\n\n155\n00:09:07.120 --> 00:09:09.970\nSo, like I said,\nE is gonna spawn an entity.\n\n156\n00:09:09.970 --> 00:09:12.020\nWe don't actually need to do\nthe instanceof check there,\n\n157\n00:09:12.020 --> 00:09:12.730\nI don't think, right?\n\n158\n00:09:12.730 --> 00:09:15.440\nI don't have that in, no I do not.\n\n159\n00:09:15.440 --> 00:09:20.630\nAnd for the last one, C,\nwe will need an instanceof\n\n160\n00:09:20.630 --> 00:09:24.500\ncheck because we're using cruise control,\nwhich is a car-specific control.\n\n161\n00:09:24.500 --> 00:09:30.174\nSo x.setCruiseControl, and let's set\nit to 8, I think, is what I had, right?\n\n162\n00:09:30.174 --> 00:09:34.430\nBecause that seems pretty\nreasonable when I was testing it.\n\n163\n00:09:34.430 --> 00:09:38.060\nAnd we're gonna set the key to that to\nbe C, just C for cruise makes sense.\n\n164\n00:09:38.060 --> 00:09:39.940\nIt's not one of our keys\nthat we're already using, so\n\n165\n00:09:39.940 --> 00:09:42.890\nI think it's a perfectly\nacceptable keybinding.\n\n166\n00:09:42.890 --> 00:09:45.770\nAnd glfwGetKey.\n\n167\n00:09:45.770 --> 00:09:46.570\nSo for E,\n\n168\n00:09:46.570 --> 00:09:49.870\nwe're gonna actually need to have\na little random number generator here.\n\n169\n00:09:49.870 --> 00:09:50.370\nSo that we can.\n\n170\n00:09:53.161 --> 00:09:54.682\nWhere'd you go, new Random.\n\n171\n00:09:54.682 --> 00:09:57.130\nWell, we may have to import that,\nso I'll do Ctrl+Shift+O.\n\n172\n00:09:57.130 --> 00:09:59.440\nLooks like we already had it.\n\n173\n00:09:59.440 --> 00:10:01.202\nAnd now we're gonna construct an entity.\n\n174\n00:10:06.260 --> 00:10:08.740\nAnd we're gonna give it\na bunch of arguments here.\n\n175\n00:10:08.740 --> 00:10:13.923\nSo the arguments I've chosen to give\nit are sort of just create it anywhere\n\n176\n00:10:13.923 --> 00:10:19.273\non the screen and give it any velocity\nvector up to, what did I say, probably\n\n177\n00:10:19.273 --> 00:10:24.890\nup to 15 I think is reasonable, and\nthen we'll give it any angle up to 360.\n\n178\n00:10:24.890 --> 00:10:28.848\nSo, let's go ahead and\nget doing that, so rng.nextInt.\n\n179\n00:10:28.848 --> 00:10:33.135\nIn fact, I'm actually gonna do\nthis separately, so let's just,\n\n180\n00:10:33.135 --> 00:10:37.722\non separate lines so everything's\nmore clear, I'm gonna do x, y, and\n\n181\n00:10:37.722 --> 00:10:41.830\nI'm gonna do velocity, and\nthen ang for angle, like that.\n\n182\n00:10:41.830 --> 00:10:46.216\nSo, we have to actually create\nall those four values now, so\n\n183\n00:10:46.216 --> 00:10:49.320\nlet's just do int x, yeah, int x is fine.\n\n184\n00:10:52.740 --> 00:10:57.661\nWe're gonna do random rng.nextInt,\nand we're gonna give it,\n\n185\n00:10:57.661 --> 00:11:01.329\nwe want it to be somewhere\nthat's between 0, or\n\n186\n00:11:01.329 --> 00:11:04.917\nbetween negative 100 and positive 100.\n\n187\n00:11:04.917 --> 00:11:09.909\nSo, I'm gonna generate\na random number between 0 and\n\n188\n00:11:09.909 --> 00:11:13.890\n201 exclusive on the upper bound.\n\n189\n00:11:13.890 --> 00:11:19.008\nSo, that will allow it to be\na maximum value of 200, right?\n\n190\n00:11:19.008 --> 00:11:23.930\nAnd we're gonna have to subtract\n100 from that to get it down to, so\n\n191\n00:11:23.930 --> 00:11:28.990\nthe upper bound is exactly 100 and\nthe lower bound is exactly -100.\n\n192\n00:11:28.990 --> 00:11:33.670\nI'm gonna do the same exact thing for the\ny, because our coordinate plane is defined\n\n193\n00:11:33.670 --> 00:11:38.440\nin such a way where, again, it ranges\nfrom negative 100 to positive 100.\n\n194\n00:11:38.440 --> 00:11:42.340\nAnd we're gonna be a little bit\ndifferent for the velocity.\n\n195\n00:11:42.340 --> 00:11:46.677\nWe're just gonna generate\na number between 0 and 15.\n\n196\n00:11:46.677 --> 00:11:52.403\nIt's an exclusive upper bound again,\nvel, and then we're gonna need one for\n\n197\n00:11:52.403 --> 00:11:56.132\nthe angle as well, so\nwe'll just do 0 inclusive,\n\n198\n00:11:56.132 --> 00:11:59.950\n360 exclusive works fine for\nthe bounds on that,\n\n199\n00:11:59.950 --> 00:12:05.810\ncuz we don't care which angle it's going,\nwe'll let anything pass for that.\n\n200\n00:12:05.810 --> 00:12:10.830\nWe may need to cast this to\na double actually, ang, yeah,\n\n201\n00:12:10.830 --> 00:12:12.996\ncuz I called it angle, that's my bad.\n\n202\n00:12:12.996 --> 00:12:14.316\nNo, we shouldn't need to cast anything.\n\n203\n00:12:14.316 --> 00:12:16.400\nSo, it's taking in these arguments and\n\n204\n00:12:16.400 --> 00:12:19.658\nagain the method that's being\ncalled is requesting a double.\n\n205\n00:12:19.658 --> 00:12:23.283\nSo since we're sending it an integer,\nit just knows that,okay, well,\n\n206\n00:12:23.283 --> 00:12:26.265\nthere's no separate method for\nhandling integer input, so\n\n207\n00:12:26.265 --> 00:12:29.340\nit's just gonna cast them to doubles and\nuse it that way.\n\n208\n00:12:29.340 --> 00:12:31.670\nSo any integer can become a double,\n\n209\n00:12:31.670 --> 00:12:36.820\nyou just have to add sort of\nan empty floating point part to it.\n\n210\n00:12:38.060 --> 00:12:41.010\nSo I think that looks good,\nwe can go ahead and sorta test our code.\n\n211\n00:12:41.010 --> 00:12:42.230\nDid you have a question?\n\n212\n00:12:42.230 --> 00:12:45.280\n&gt;&gt; Now Mark, I just wanted to\nmake sure that it is strictly for\n\n213\n00:12:45.280 --> 00:12:47.990\nclarity, it wouldn't affect,\nI could actually copy and\n\n214\n00:12:47.990 --> 00:12:51.790\npaste all those inside of that new entity,\nright?\n\n215\n00:12:51.790 --> 00:12:53.610\n&gt;&gt; You could copy and\npaste all of those insertions.\n\n216\n00:12:53.610 --> 00:12:57.230\n&gt;&gt; Like the rng.nextInt(201)- 100,\nI could just put those in line.\n\n217\n00:12:57.230 --> 00:12:58.210\n&gt;&gt; Yeah.\n\n218\n00:12:58.210 --> 00:13:00.650\n&gt;&gt; So, but thank you for\nthe clarity, I'm like, yeah,\n\n219\n00:13:00.650 --> 00:13:02.060\nI know exactly what that's doing now.\n\n220\n00:13:02.060 --> 00:13:04.074\nSo sometimes breaking\nthose apart in lines,\n\n221\n00:13:04.074 --> 00:13:07.530\neven though it's a little more code,\nit makes it a little bit easier to read.\n\n222\n00:13:07.530 --> 00:13:10.730\nSo if Mark handed this to me,\nI'm like, okay, I see what's going on.\n\n223\n00:13:10.730 --> 00:13:14.310\n&gt;&gt; Yeah, in my outline I had it all\nsort of calculated on one line, but\n\n224\n00:13:14.310 --> 00:13:18.400\nduring this episode I think its a little\nmore prudent to actually separate it out.\n\n225\n00:13:18.400 --> 00:13:20.270\nSort of calculate all\nthose values separately so\n\n226\n00:13:20.270 --> 00:13:23.520\nthat you know where they're coming from\nand sort of why they are that way.\n\n227\n00:13:23.520 --> 00:13:27.550\nIt's a little bit self-documenting in\nthis case where we know that, okay,\n\n228\n00:13:27.550 --> 00:13:33.710\nwe want this to be fixed between 100 and\n-100, this sort of allows us to do that.\n\n229\n00:13:33.710 --> 00:13:37.160\nNow, we do have to add this to\na list actually before we can really\n\n230\n00:13:38.730 --> 00:13:40.400\nhave it show up on our screen.\n\n231\n00:13:40.400 --> 00:13:46.050\nBecause we iterate across this thing of\nentities when we call our render function.\n\n232\n00:13:46.050 --> 00:13:48.458\nSo if we go back up to here,\nI can show you that.\n\n233\n00:13:48.458 --> 00:13:50.381\nSo, like I said, try, and then for\n\n234\n00:13:50.381 --> 00:13:55.380\nloop, for every Entity in this list\nentities, we're gonna render that entity.\n\n235\n00:13:55.380 --> 00:13:57.300\nAnd that takes place\nduring our main game loop.\n\n236\n00:13:57.300 --> 00:13:58.920\nWe render as many frames as possible, but\n\n237\n00:13:58.920 --> 00:14:01.850\nwe only do a certain amount\nof input checks, like I said.\n\n238\n00:14:01.850 --> 00:14:05.120\nSo we've got all that going on, and\nwe need to make sure we add this new\n\n239\n00:14:05.120 --> 00:14:09.150\nentity to the list, otherwise it won't\nbe rendered when we perform that call.\n\n240\n00:14:09.150 --> 00:14:10.518\nI think that's about it, so\n\n241\n00:14:10.518 --> 00:14:13.997\nlet's just sorta see if the things\nare working as I would expect them to.\n\n242\n00:14:13.997 --> 00:14:15.760\nLet's give our game a run.\n\n243\n00:14:16.910 --> 00:14:20.540\nSo if I press W, yep,\nlook at that, so our gas works.\n\n244\n00:14:20.540 --> 00:14:25.620\nI can press A, and\nour angle changes, just like that.\n\n245\n00:14:25.620 --> 00:14:28.420\nSo I'll sorta get my heading\nfacing that way, and\n\n246\n00:14:28.420 --> 00:14:32.628\nif I press C now,\nit sorta clips along until I press S.\n\n247\n00:14:32.628 --> 00:14:37.410\nAnd remember our S, our break function,\ndoes set the cruise control equal to zero.\n\n248\n00:14:37.410 --> 00:14:40.130\nSo that sort of negates that fact that we\n\n249\n00:14:40.130 --> 00:14:42.580\nhad established the cruise\ncontrol already.\n\n250\n00:14:42.580 --> 00:14:46.540\nLet's get our angle going\nin a cool direction again.\n\n251\n00:14:46.540 --> 00:14:49.290\nAnd brake, brake.\n\n252\n00:14:49.290 --> 00:14:53.140\nAll right, so the controls are, you can\nfine-tune them a little bit if you wanted.\n\n253\n00:14:53.140 --> 00:14:55.150\nMaybe you want sort of\na sharper turning radius,\n\n254\n00:14:55.150 --> 00:14:58.700\nyou could increase the default value for\nhow quickly these cars turn.\n\n255\n00:15:00.010 --> 00:15:04.090\nIf you wanted them to be able to go\nfaster, you could change the speed limit.\n\n256\n00:15:04.090 --> 00:15:07.140\nI'm not gonna do any of that cuz\nI sort of like it the way it is.\n\n257\n00:15:07.140 --> 00:15:09.250\nBut you're free to play around with it,\nit's your program,\n\n258\n00:15:09.250 --> 00:15:11.310\nyou can set the values how you like them.\n\n259\n00:15:11.310 --> 00:15:15.940\nOne other thing that we added was this E\nbutton that will just spawn an entity, and\n\n260\n00:15:15.940 --> 00:15:18.990\nso we can press that a couple times, and\n\n261\n00:15:18.990 --> 00:15:22.130\nyou'll see we get a bunch of\nentities flying across the screen.\n\n262\n00:15:22.130 --> 00:15:26.350\nAnd, so, I guess the point of this game,\nsome of them are moving very slowly.\n\n263\n00:15:26.350 --> 00:15:30.140\nCuz they probably got a random value of\none mile per hour for their velocity.\n\n264\n00:15:30.140 --> 00:15:33.410\nSo, others are moving very quickly\ncuz they've got maybe up to 15 for\n\n265\n00:15:33.410 --> 00:15:35.200\ntheir velocity.\n\n266\n00:15:35.200 --> 00:15:37.400\nSort of just shooting all\nthe way across the screen.\n\n267\n00:15:37.400 --> 00:15:39.900\nThat one got zero, I think,\nwhich is why it didn't do anything.\n\n268\n00:15:41.540 --> 00:15:45.123\nBut a fun application of this might\nbe you spawn a bunch of entities, and\n\n269\n00:15:45.123 --> 00:15:47.920\nyou drive around and\nyou try to dodge them all.\n\n270\n00:15:47.920 --> 00:15:50.962\nCuz let's go ahead and\nrun this one more time, and\n\n271\n00:15:50.962 --> 00:15:54.741\nshow that if you do hit an entity,\nyou will get a crash output.\n\n272\n00:15:54.741 --> 00:15:56.712\nAnd both entities will be stopped.\n\n273\n00:15:56.712 --> 00:15:59.418\nWe had shown that in the previous\nepisode I believe, but just so\n\n274\n00:15:59.418 --> 00:16:00.860\nthat everything's clear.\n\n275\n00:16:00.860 --> 00:16:01.900\nIf I don't move my car and\n\n276\n00:16:01.900 --> 00:16:07.180\nI sort of just let this star hit me,\nwe get an output like that.\n\n277\n00:16:07.180 --> 00:16:09.860\nSo it tells me the pre-crash state,\ncrashed into entity,\n\n278\n00:16:09.860 --> 00:16:11.350\ngives me a nice output.\n\n279\n00:16:11.350 --> 00:16:15.702\nSo the entity was at this exact location\nand I call this exact location.\n\n280\n00:16:15.702 --> 00:16:20.663\nAnd you'll notice that these values\nof negative 1.375 are sort of\n\n281\n00:16:20.663 --> 00:16:22.984\nwithin the crash radius of this.\n\n282\n00:16:22.984 --> 00:16:26.627\nThe car which is still located at\nthe origin because I didn't move it,\n\n283\n00:16:26.627 --> 00:16:29.801\nour car is a color green so\nwe could change the color wrapper.\n\n284\n00:16:29.801 --> 00:16:33.910\nAgain, I have had it green this whole\ntime but we sort of download these core\n\n285\n00:16:33.910 --> 00:16:38.433\nfeatures that we can play around with and\nmake our game different in various ways.\n\n286\n00:16:38.433 --> 00:16:41.360\nSo wherever I had green,\nlet's change that to blue.\n\n287\n00:16:45.280 --> 00:16:49.970\nBlue like that and\nrun it one more time and look at that.\n\n288\n00:16:49.970 --> 00:16:53.960\nOur card is now blue, so again, you can\nchange the clear color of the screen.\n\n289\n00:16:53.960 --> 00:16:59.180\nSo right now I have everything set to\nsort of like a teal blue kind of color.\n\n290\n00:16:59.180 --> 00:17:00.910\nBut I think white kind\nof makes more sense,\n\n291\n00:17:00.910 --> 00:17:03.280\ncuz it makes our textures render nicer.\n\n292\n00:17:03.280 --> 00:17:04.320\nWithout my transparent,\n\n293\n00:17:04.320 --> 00:17:08.650\nI failed the add transparency to\nmy textures when I built them.\n\n294\n00:17:08.650 --> 00:17:14.220\nI just did it in Microsoft paint, you\ncan see now it's sort of a little clear.\n\n295\n00:17:14.220 --> 00:17:17.800\nThere's not that rectangle\naround all my textures and\n\n296\n00:17:17.800 --> 00:17:22.320\nthe crashed again, I got some more\noutput telling me where they crashed.\n\n297\n00:17:22.320 --> 00:17:25.920\nHow fast it was going the angle\nat which it was facing, and\n\n298\n00:17:25.920 --> 00:17:29.890\nit does tell me that my color is now blue\ninstead of green, so I change that value.\n\n299\n00:17:29.890 --> 00:17:32.466\nSo I would say this game\nis maybe not too fun, but\n\n300\n00:17:32.466 --> 00:17:36.152\nit gives you an illustration of how\nyou can do these kinds of things.\n\n301\n00:17:36.152 --> 00:17:39.723\nAnd I guess in the next episode,\nwe're gonna come back, and\n\n302\n00:17:39.723 --> 00:17:41.974\nwe're probably gonna do some stuff.\n\n303\n00:17:41.974 --> 00:17:44.122\nSort of make this game save just so\n\n304\n00:17:44.122 --> 00:17:49.190\nI can talk about How you might serialize\ndata and come back to it at a later time.\n\n305\n00:17:49.190 --> 00:17:52.860\nYou can just write something to\nthe disk and access it later,\n\n306\n00:17:52.860 --> 00:17:54.400\nload everything back in.\n\n307\n00:17:54.400 --> 00:17:57.070\nAnd we're gonna do that\nwith our listed entities so\n\n308\n00:17:57.070 --> 00:18:01.150\nthat we can go back to the same\ngame state that had before.\n\n309\n00:18:01.150 --> 00:18:01.840\n&gt;&gt; Yeah, Martin,\n\n310\n00:18:01.840 --> 00:18:05.640\nthe first games, sometimes they don't\nalways have the dynamics that we want.\n\n311\n00:18:05.640 --> 00:18:10.060\nBut I was looking at this and there\nwas one thing when we shift velocities\n\n312\n00:18:10.060 --> 00:18:12.380\nWouldn't it be nice if that\nsprite like flipped around so\n\n313\n00:18:12.380 --> 00:18:13.670\nwe're not driving in reverse?\n\n314\n00:18:13.670 --> 00:18:16.500\nI mean, I guess we could represent\nthis as a demolition derby,\n\n315\n00:18:16.500 --> 00:18:18.250\nbut what do you think about that?\n\n316\n00:18:18.250 --> 00:18:21.509\n&gt;&gt; Yeah, so we've got a little, our car\nis always sort of always facing right\n\n317\n00:18:21.509 --> 00:18:23.751\nregardless of which\ndirection we're heading in.\n\n318\n00:18:23.751 --> 00:18:25.979\nAnd there's a couple different,\nI mean, you could have one for\n\n319\n00:18:25.979 --> 00:18:27.887\nwhen it's facing up, one for\nwhen it's facing down.\n\n320\n00:18:27.887 --> 00:18:32.145\nAnd you could sort of do these checks\nwhere if it's in that 90 degree range\n\n321\n00:18:32.145 --> 00:18:36.130\nbetween 45 and 145,\nyou have like an up sprite.\n\n322\n00:18:36.130 --> 00:18:39.490\nFor simplicity sake we're just gonna do\none facing right and one facing left but\n\n323\n00:18:39.490 --> 00:18:42.210\nI think that is a good thing to add\ninto our program at this point.\n\n324\n00:18:42.210 --> 00:18:45.010\nAnd off camera since we had a rain\ndelay I also went ahead and\n\n325\n00:18:45.010 --> 00:18:48.900\nadded transparency to my blue car and\nblue car else brights I think.\n\n326\n00:18:48.900 --> 00:18:53.740\nHopefully it works,\nI'm gonna make a copy to this text folder.\n\n327\n00:18:55.340 --> 00:18:59.190\nYes, I will override all those,\nlooks good to me.\n\n328\n00:18:59.190 --> 00:19:02.650\nI'm also gonna put them into this text\nfolder because I'm not actually sure which\n\n329\n00:19:02.650 --> 00:19:04.175\none is working.\n\n330\n00:19:04.175 --> 00:19:09.680\n[LAUGH] But now in my code here,\nI opened up the car class again just cuz\n\n331\n00:19:09.680 --> 00:19:12.210\nthis texter method is what\ngets the texter, right?\n\n332\n00:19:12.210 --> 00:19:17.292\nSo if we wanted to be facing left,\n\n333\n00:19:17.292 --> 00:19:22.192\nthen we're going to have to make\n\n334\n00:19:22.192 --> 00:19:26.190\na check for that, right?\n\n335\n00:19:26.190 --> 00:19:31.650\nSo return new texture\ndot text/bluecarLl.png,\n\n336\n00:19:31.650 --> 00:19:35.190\nall like that I think that's\nwhat I called it, bluecarL.\n\n337\n00:19:36.330 --> 00:19:37.630\nLooks good.\n\n338\n00:19:37.630 --> 00:19:43.121\nSo the bully and\ncheck we're gonna make is If(this.angle),\n\n339\n00:19:43.121 --> 00:19:48.900\nwe want If(this.getAngleDegrees.\n\n340\n00:19:48.900 --> 00:19:50.140\nGetAngleDegrees will do that.\n\n341\n00:19:50.140 --> 00:19:55.055\n[SOUND] Greater than 90 and\n\n342\n00:19:55.055 --> 00:20:00.183\nthis dot get angel degrees or\n\n343\n00:20:00.183 --> 00:20:07.243\nget angel degree, they're the same.\n\n344\n00:20:07.243 --> 00:20:13.501\nIt'll work fine cause it's in\nthe same class is less than 270,\n\n345\n00:20:13.501 --> 00:20:17.650\nor you could do less than or equal to 270.\n\n346\n00:20:17.650 --> 00:20:20.800\nHowever, you would really wanna do this,\nI think it's fine, so\n\n347\n00:20:20.800 --> 00:20:21.940\nlet's sort of see if this works now.\n\n348\n00:20:21.940 --> 00:20:25.630\nLet's run our code,\nour car starts out facing right.\n\n349\n00:20:25.630 --> 00:20:28.230\nLooks like I did not fix the transparency,\nby the way.\n\n350\n00:20:28.230 --> 00:20:32.720\nNow it's black and we are also having a\nproblem where we can't read the input file\n\n351\n00:20:32.720 --> 00:20:37.040\nso .text I think it's gonna\nthrow out the slash there.\n\n352\n00:20:37.040 --> 00:20:40.850\nLet's see if it works now,\nif you are having the same issue,\n\n353\n00:20:40.850 --> 00:20:41.945\nit may have been because of that.\n\n354\n00:20:41.945 --> 00:20:49.950\nYeah, look at that so I turned and\nnow our car is using facing left sprite.\n\n355\n00:20:49.950 --> 00:20:53.200\nAgain, the transparency does\nnot seem to have worked a bit,\n\n356\n00:20:53.200 --> 00:20:55.690\nso, it's my bad I guess.\n\n357\n00:20:55.690 --> 00:20:59.600\nI was trying to do in gimp just like real\nquite well when we run away in the way.\n\n358\n00:20:59.600 --> 00:21:04.570\nHopefully it is working now,\nif you're using a texture like this.\n\n359\n00:21:04.570 --> 00:21:07.450\nYou can see, you know,\nlet's even stay in one spot.\n\n360\n00:21:07.450 --> 00:21:10.480\nYou can see if I hold the turnkey,\nthe car sort of flip back and\n\n361\n00:21:10.480 --> 00:21:12.410\nforth between left and right.\n\n362\n00:21:12.410 --> 00:21:15.202\nSo that's all working,\nit's good enough for me.\n\n363\n00:21:15.202 --> 00:21:16.123\nJustin has a question.\n\n364\n00:21:16.123 --> 00:21:19.695\n&gt;&gt; Mark, actually could you, is there\nany way we could possibly zoom in or\n\n365\n00:21:19.695 --> 00:21:21.252\nmake that a little bit bigger.\n\n366\n00:21:21.252 --> 00:21:25.386\nJust to make sure we can see that\nan actual turn, I believe you,\n\n367\n00:21:25.386 --> 00:21:29.613\nI believe you, but it was a little\nhard to see, I think, there.\n\n368\n00:21:29.613 --> 00:21:31.489\n&gt;&gt; Yeah, true, I mean,\nif I change the game color,\n\n369\n00:21:31.489 --> 00:21:34.390\nI think it might show up a little\nbetter with the contrast.\n\n370\n00:21:34.390 --> 00:21:35.860\nBut let's try a couple of things here,\n\n371\n00:21:35.860 --> 00:21:38.800\nso I don't think it'll let\nyou blow up the window size.\n\n372\n00:21:38.800 --> 00:21:44.040\nJust like this if you click and drag,\nsee everything is still the same size,\n\n373\n00:21:44.040 --> 00:21:49.550\nbut if we change the normal mode\nI think everything will scale up.\n\n374\n00:21:49.550 --> 00:21:52.160\nSo, I don't know exactly how\nbig I can make my screen but\n\n375\n00:21:52.160 --> 00:21:53.120\nlet's try something like that.\n\n376\n00:21:53.120 --> 00:21:54.670\nLet's see if that works, so\n\n377\n00:21:54.670 --> 00:21:59.020\nthis is again in the window where\nI originally pasted those value's.\n\n378\n00:21:59.020 --> 00:22:01.180\nI made that change, so\nif we run it now and\n\n379\n00:22:01.180 --> 00:22:02.820\nsee everything is definitely\na little bit bigger.\n\n380\n00:22:02.820 --> 00:22:08.430\nSo that didn't work and now you can see\nif I sort of dodge that car real quick.\n\n381\n00:22:08.430 --> 00:22:10.590\nI can turn in different ways and\n\n382\n00:22:10.590 --> 00:22:14.720\nagain I did crash into that piece so\neverything stopped, that's fine.\n\n383\n00:22:14.720 --> 00:22:17.900\nI'll turn facing right again,\nI'll press C for\n\n384\n00:22:17.900 --> 00:22:21.540\ncruise control,\nI'll certain spawn a bunch of entities.\n\n385\n00:22:21.540 --> 00:22:26.170\nAll sorts of fun things you can do with\nthis programme the way we've set it up.\n\n386\n00:22:26.170 --> 00:22:30.740\nRight now I only have a facing left sprite\nfor the blue car, so what you might\n\n387\n00:22:30.740 --> 00:22:34.080\nwanna do is add in your own checks for\nthe green car and the black car.\n\n388\n00:22:34.080 --> 00:22:36.400\nI don't think I'm gonna bother doing that,\n\n389\n00:22:36.400 --> 00:22:38.850\njust because it's pretty clear\nwhat you would wanna do anyway.\n\n390\n00:22:38.850 --> 00:22:41.080\nPlus we've had a little more time,\n\n391\n00:22:41.080 --> 00:22:44.570\nI'm gonna add a control that just\nflips our entity 180 degrees.\n\n392\n00:22:46.190 --> 00:22:51.650\nWe'll check for f and r, and\nif either of those keys are being pressed,\n\n393\n00:22:51.650 --> 00:22:54.294\nwe will put our entity in reverse.\n\n394\n00:22:54.294 --> 00:22:58.555\nNot necessarily the best\nway of thinking about it,\n\n395\n00:22:58.555 --> 00:23:03.422\nbut you could have sort of\na while loop and you could check.\n\n396\n00:23:03.422 --> 00:23:06.924\nSo like, while the R key is being pressed,\nwe'll do,\n\n397\n00:23:06.924 --> 00:23:11.435\nlike you flip the velocity vector\ncompletely, like 180 degrees.\n\n398\n00:23:11.435 --> 00:23:16.670\nYou do an override that keeps\nthe texture from being changed and\n\n399\n00:23:16.670 --> 00:23:22.322\nyou sort of just, in this loop,\nyou, while this is being pressed.\n\n400\n00:23:22.322 --> 00:23:27.309\nYou're going to have a slow creeping\ncruise control, like five or so and\n\n401\n00:23:27.309 --> 00:23:33.390\nthat would sort of reflect, I think, the\nway a car works where it is in reverse.\n\n402\n00:23:33.390 --> 00:23:38.540\nIt's maybe doing override on the velocity\nvector in the check speed method, and\n\n403\n00:23:38.540 --> 00:23:42.360\nyou no longer enforce that\nthe velocity have to be positive.\n\n404\n00:23:42.360 --> 00:23:44.980\nThere's a couple different\nways you could do that, but\n\n405\n00:23:44.980 --> 00:23:47.389\nthe way I'm gonna implement\nit is just to flip the,\n\n406\n00:23:52.822 --> 00:23:57.838\nThe texter, or\nflip the velocity vector just one time\n\n407\n00:23:57.838 --> 00:24:03.113\nwhenever you press the F key,\nso we can do x.turnleft.\n\n408\n00:24:03.113 --> 00:24:05.550\nYou can do turn right as well.\n\n409\n00:24:05.550 --> 00:24:08.610\nThey're equivalent since we're\nturning 180 degrees, but\n\n410\n00:24:08.610 --> 00:24:11.090\nnow when I press f it should\njust turn real quick.\n\n411\n00:24:12.520 --> 00:24:15.400\nYeah, you can see like that, boom.\n\n412\n00:24:15.400 --> 00:24:18.970\nIt sort of just bounces right because\nall I did was flip the angle,\n\n413\n00:24:18.970 --> 00:24:21.060\nI actually didn't do\nanything to the speed.\n\n414\n00:24:21.060 --> 00:24:23.801\nThat might be something you\nwould want to change but\n\n415\n00:24:23.801 --> 00:24:27.573\nI kinda like it like this actually\nso- boom, bounces back and forth.\n\n416\n00:24:27.573 --> 00:24:31.300\nAlright so it's fun, I think that's\nabout all we have time for today but\n\n417\n00:24:31.300 --> 00:24:33.023\nnext episode when you come back.\n\n418\n00:24:33.023 --> 00:24:36.799\nWe're gonna talk about how we might want\nto save our game so we can have all our\n\n419\n00:24:36.799 --> 00:24:41.320\nentities saved, their velocity and\neverything, we'll come back to it later.\n\n420\n00:24:41.320 --> 00:24:44.780\n&gt;&gt; Well, Mark, I'm definitely interested\non how we save these game states,\n\n421\n00:24:44.780 --> 00:24:47.280\ncuz that was already a mystery to me.\n\n422\n00:24:47.280 --> 00:24:48.380\nYeah, I wanna save.\n\n423\n00:24:48.380 --> 00:24:49.200\nDo I want to overwrite?\n\n424\n00:24:49.200 --> 00:24:52.240\nAbsolutely, when I was playing\ngames in my younger days.\n\n425\n00:24:52.240 --> 00:24:54.650\nSo, I'm kinda interested to\nsee how this plays out, and\n\n426\n00:24:54.650 --> 00:24:56.150\nhopefully you're interested as well.\n\n427\n00:24:56.150 --> 00:24:59.380\nBut as Mark said, we're kinda running\nout of time for this episode so\n\n428\n00:24:59.380 --> 00:25:01.110\nwe're gonna go ahead and wrap this one up.\n\n429\n00:25:01.110 --> 00:25:04.570\nSo signing off for DevProTV,\nI've been your host Justin Dennison.\n\n430\n00:25:04.570 --> 00:25:05.093\n&gt;&gt; I'm Mark Davis.\n\n431\n00:25:05.093 --> 00:25:07.585\n&gt;&gt; And we'll see you next time.\n\n432\n00:25:07.585 --> 00:25:11.013\n[SOUND]\n\n",
          "vimeoId": "228423719"
        },
        {
          "description": "In this episode, Justin and Mark address what happens when you just quit a game. Mark implements the ability to save the game when you decide to quit.",
          "length": "1925",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-25-saving_the_game-080317-PGM.00_32_18_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-25-saving_the_game-080317-PGM.00_32_18_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-25-saving_the_game-080317-PGM.00_32_18_22.Still001-sm.jpg",
          "title": "Saving the Game",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:03.929\n[NOISE]\n\n2\n00:00:03.929 --> 00:00:12.165\n[MUSIC]\n\n3\n00:00:12.165 --> 00:00:15.845\nGreetings, everyone, and welcome to\nanother exciting episode of DevPro.TV.\n\n4\n00:00:15.845 --> 00:00:17.508\nI'm your host, Justin Dennison.\n\n5\n00:00:17.508 --> 00:00:20.935\nAnd in today's episode, well,\nwe're back with more Object-Oriented Java.\n\n6\n00:00:20.935 --> 00:00:24.704\nAnd actually, I'm very excited about this\nepisode, because we've been building\n\n7\n00:00:24.704 --> 00:00:28.115\na game over the last few episodes, and\nnow we're gonna learn how to save it.\n\n8\n00:00:28.115 --> 00:00:30.495\nAnd, that's gonna be nice,\n\n9\n00:00:30.495 --> 00:00:35.927\ncuz we can't always reproduce that exact\nstate just by manipulating things.\n\n10\n00:00:35.927 --> 00:00:37.356\nIt's gonna save us a lot of time,\nit's real nice, and\n\n11\n00:00:37.356 --> 00:00:38.548\nit's typically a game\nfeature that we want.\n\n12\n00:00:38.548 --> 00:00:43.564\nAnd luckily, we have in the studio the man\nthat is going to show us the way, Mr.\n\n13\n00:00:43.564 --> 00:00:44.404\nMark Davis.\n\n14\n00:00:44.404 --> 00:00:45.388\nHow you doing today, Mark?\n\n15\n00:00:45.388 --> 00:00:46.131\n&gt;&gt; Pretty good, feeling good.\n\n16\n00:00:46.131 --> 00:00:47.887\n&gt;&gt; That is always good, Mark.\n\n17\n00:00:47.887 --> 00:00:50.079\nFeeling good is an important\npart of programming.\n\n18\n00:00:50.079 --> 00:00:51.315\n&gt;&gt; [LAUGH]\n&gt;&gt; So Mark,\n\n19\n00:00:51.315 --> 00:00:53.563\nhow are we gonna save this game?\n\n20\n00:00:53.563 --> 00:00:58.253\n&gt;&gt; So we're gonna serialize\nour list of entities.\n\n21\n00:00:58.253 --> 00:01:00.659\nI think that's sort of the best\nway to accomplish this.\n\n22\n00:01:00.659 --> 00:01:04.425\nThe filename that it prints\nout to will just be .ser, and\n\n23\n00:01:04.425 --> 00:01:08.833\nit won't necessarily be human-readable or\nanything like that.\n\n24\n00:01:08.833 --> 00:01:13.553\nBut as long as the computer can pick\nup on the data contained within it,\n\n25\n00:01:13.553 --> 00:01:18.833\nwe should be able to sort of just dump\neverything into the file system, and then\n\n26\n00:01:18.833 --> 00:01:23.883\nwe can retrieve it from a stream later\non whenever we load the game as we may.\n\n27\n00:01:23.883 --> 00:01:26.909\nSo what I'm gonna do first is I'm gonna\ncreate a new key binding for Escape.\n\n28\n00:01:26.909 --> 00:01:30.067\nAnd that's gonna allow us to sort\nof just serialize everything, and\n\n29\n00:01:30.067 --> 00:01:33.014\nthen it'll quit the program,\nit'll terminate the window..\n\n30\n00:01:33.014 --> 00:01:35.014\nAnd I think Justin has a question.\n\n31\n00:01:35.014 --> 00:01:38.147\n&gt;&gt; Now, Mark, you said that word\nserialize a couple of times.\n\n32\n00:01:38.147 --> 00:01:40.213\nI just want to make sure\nwe're all on the same page.\n\n33\n00:01:40.213 --> 00:01:42.584\nWhat do you mean by\nserialize those entities?\n\n34\n00:01:42.584 --> 00:01:46.874\nI assume it's part of the saving process,\nbut what does it actually entail?\n\n35\n00:01:46.874 --> 00:01:49.815\n&gt;&gt; Yeah, so\nJava has this serializable interface.\n\n36\n00:01:49.815 --> 00:01:54.826\nAnd when you have the object that\nimplements that serializable interface,\n\n37\n00:01:54.826 --> 00:01:57.408\nthere's sort of a default behavior for\n\n38\n00:01:57.408 --> 00:02:01.961\nit where the objects are represented\na certain way in the JVM in Java.\n\n39\n00:02:01.961 --> 00:02:06.709\nBut there's sort of a more compact way\nthat they can be represented on the file\n\n40\n00:02:06.709 --> 00:02:07.301\nsystem.\n\n41\n00:02:07.301 --> 00:02:11.335\nAnd so, you can just sort of dump\neverything to a file in a way that is\n\n42\n00:02:11.335 --> 00:02:15.807\na one-to-one mapping between\nthe representation on the file system and\n\n43\n00:02:15.807 --> 00:02:18.423\nthe way it would be\nrepresented in the JVM.\n\n44\n00:02:18.423 --> 00:02:20.513\nSo you can sort of\nconvert between the two.\n\n45\n00:02:20.513 --> 00:02:24.055\nAnd the representations\nmight not look the same.\n\n46\n00:02:24.055 --> 00:02:29.397\nYou can also override the way that\nsomething by default might serialize and\n\n47\n00:02:29.397 --> 00:02:32.553\nput it in a human-readable format as well.\n\n48\n00:02:32.553 --> 00:02:33.905\nBut I don't think we're\ngonna be doing that today.\n\n49\n00:02:33.905 --> 00:02:37.812\nWe're just gonna create a little check for\nour Escape key, so\n\n50\n00:02:37.812 --> 00:02:41.664\nthat if our Escape key is pressed,\nit will quit the program.\n\n51\n00:02:41.664 --> 00:02:44.651\nAnd the next time we start it,\nwe'll try loading from that file.\n\n52\n00:02:44.651 --> 00:02:48.935\nAnd I might also add an n key to sort of\nreset everything back to sort of the way\n\n53\n00:02:48.935 --> 00:02:53.287\nthe default game would work, like we\nhave it right now, where there's a car\n\n54\n00:02:53.287 --> 00:02:57.236\nin the middle, and an entity coming\nup from the bottom of the screen.\n\n55\n00:02:57.236 --> 00:03:00.895\nSo if there's a situation where\nyou spawn a bunch of entities and\n\n56\n00:03:00.895 --> 00:03:05.163\nyou are having a problem where your\ngame is running slowly, which I would,\n\n57\n00:03:05.163 --> 00:03:06.815\nbecause this laptop is old.\n\n58\n00:03:06.815 --> 00:03:09.549\nYou sorta have a way to\nget out of that situation,\n\n59\n00:03:09.549 --> 00:03:13.703\ninstead of just constantly loading\nfrom the same file and being trapped.\n\n60\n00:03:13.703 --> 00:03:16.724\nOr, maybe you beat the game and\nyou wanna start over.\n\n61\n00:03:16.724 --> 00:03:20.201\nSo you might wonder why you would wanna\nsave this game in the first place,\n\n62\n00:03:20.201 --> 00:03:24.322\ncuz it's very basic, there's not really\na clear objective other than to not crash.\n\n63\n00:03:24.322 --> 00:03:28.622\nBut the concepts we're learning here\ndo apply to pretty much every game.\n\n64\n00:03:28.622 --> 00:03:32.952\nAny game that you're gonna be doing in\nJava, whether you're using LWJGL or not,\n\n65\n00:03:32.952 --> 00:03:37.346\nactually is gonna have objects that can be\nserialized and saved to the file system,\n\n66\n00:03:37.346 --> 00:03:39.756\ncalled back later whenever\nyou do need them.\n\n67\n00:03:39.756 --> 00:03:42.926\nSo I think we should go ahead and\nget started here.\n\n68\n00:03:42.926 --> 00:03:46.716\nSo, we're gonna add a new GLFW get key,\nand\n\n69\n00:03:46.716 --> 00:03:51.445\nthis is gonna be KEY_ESCAPE equals true,\nlike that.\n\n70\n00:03:51.445 --> 00:03:53.182\nAnd we gotta do a couple of things here,\n\n71\n00:03:53.182 --> 00:03:55.459\nbut at the end of this,\nwe're going to terminate.\n\n72\n00:03:55.459 --> 00:04:00.242\nSo we're gonna do glfwDestroyWindow,\nwhich sounds malicious.\n\n73\n00:04:00.242 --> 00:04:03.154\nAnd it doesn't necessarily quit\nin the most friendly way, so\n\n74\n00:04:03.154 --> 00:04:04.840\nthere may be a better way to do this.\n\n75\n00:04:04.840 --> 00:04:07.487\nBut this is the first way I found and\nit does work, so\n\n76\n00:04:07.487 --> 00:04:09.162\nthat's what I was looking for.\n\n77\n00:04:09.162 --> 00:04:11.519\nSo we are gonna need a file output stream.\n\n78\n00:04:11.519 --> 00:04:14.466\nWe've talked about streams\nin a previous episode.\n\n79\n00:04:14.466 --> 00:04:17.528\nIf you don't remember enough\nabout them to do this,\n\n80\n00:04:17.528 --> 00:04:21.716\nI would look in our course library and\ncheck out the previous episodes.\n\n81\n00:04:21.716 --> 00:04:25.025\nSo FileOutputStream,\nlet's just call it fout.\n\n82\n00:04:25.025 --> 00:04:28.102\nWe can just do that for now.\n\n83\n00:04:31.519 --> 00:04:39.447\nObjectOutputStream, We\ncan call that one oos.\n\n84\n00:04:39.447 --> 00:04:42.000\nWe're gonna have to do some imports there.\n\n85\n00:04:42.000 --> 00:04:43.557\nSo I'm gonna set this oos to null,\n\n86\n00:04:43.557 --> 00:04:46.134\njust cuz I think we have to do\nsomething in the try catch and\n\n87\n00:04:46.134 --> 00:04:49.217\nI want it to make sure that it is\ninitialized, at least a little bit.\n\n88\n00:04:49.217 --> 00:04:51.588\nSo we're gonna do a try block.\n\n89\n00:04:55.113 --> 00:04:56.889\nWhat I want it to do, I want it to catch.\n\n90\n00:04:56.889 --> 00:04:58.851\nWe'll just catch any exception.\n\n91\n00:04:58.851 --> 00:05:03.584\nAnd for that, we'll just print the stack\ntrace, cuz I don't wanna worry too much\n\n92\n00:05:03.584 --> 00:05:07.508\nabout those situations in which\nthe file isn't able to be created.\n\n93\n00:05:07.508 --> 00:05:12.002\nThat's probably sort of a permissions\nissue where Java might not have that\n\n94\n00:05:12.002 --> 00:05:15.294\naccess to perform certain\nfunctions on the computer.\n\n95\n00:05:15.294 --> 00:05:19.086\nAnd if that does happen, then that's\nsort of a completely different scenario.\n\n96\n00:05:19.086 --> 00:05:21.428\nBut I'm not gonna worry\nabout dealing with that or\n\n97\n00:05:21.428 --> 00:05:23.895\nprinting in a way that is\nunderstandable right now.\n\n98\n00:05:23.895 --> 00:05:26.827\n&gt;&gt; Now Mark,\nyou're catching that general exception e.\n\n99\n00:05:26.827 --> 00:05:29.447\nBut this could actually generate\nmultiple exceptions and\n\n100\n00:05:29.447 --> 00:05:32.504\nwe could catch those independently and\nhandle those differently.\n\n101\n00:05:32.504 --> 00:05:34.968\nJust wanna make sure,\nam I right in that assumption?\n\n102\n00:05:34.968 --> 00:05:36.775\n&gt;&gt; No,\nyou're totally right in that assumption.\n\n103\n00:05:36.775 --> 00:05:39.933\nSo, I think the specific exceptions\nwe might are an I/O exception and\n\n104\n00:05:39.933 --> 00:05:43.751\na file not found exception, which are sort\nof two different things that can come up.\n\n105\n00:05:43.751 --> 00:05:46.493\nSo you definitely could\nhandle them separately.\n\n106\n00:05:46.493 --> 00:05:49.485\nWe have talked about exceptions\nin a previous episode, and so\n\n107\n00:05:49.485 --> 00:05:50.587\nwe have covered that.\n\n108\n00:05:50.587 --> 00:05:53.289\nBut I don't think I'm gonna bother here,\nI think I'm just gonna do a blanket.\n\n109\n00:05:53.289 --> 00:05:56.508\nCuz I would probably treat them the same\nway anyway, just print the stack trace and\n\n110\n00:05:56.508 --> 00:05:57.263\nquit the program.\n\n111\n00:05:57.263 --> 00:06:02.141\nI'm not that interested in trying to\ndo runtime handling of exceptions\n\n112\n00:06:02.141 --> 00:06:04.182\nwith the way this is working.\n\n113\n00:06:04.182 --> 00:06:06.920\nThere's things I'm more concerned about.\n\n114\n00:06:06.920 --> 00:06:09.858\nSo if you wanted to go back in and add\nthat later, you could definitely do so.\n\n115\n00:06:09.858 --> 00:06:14.625\nSo inside my try block\nI'm gonna do fout = new\n\n116\n00:06:14.625 --> 00:06:20.906\nFileOutputStream(), and\nwe have to give it a file name.\n\n117\n00:06:20.906 --> 00:06:25.943\nSo let's just do savegame.ser,\nfor serialized, I guess.\n\n118\n00:06:25.943 --> 00:06:28.452\nAll right, a couple of other\nthings we're gonna wanna do.\n\n119\n00:06:28.452 --> 00:06:34.906\nOos = new ObjectOutputStream().\n\n120\n00:06:34.906 --> 00:06:40.877\nAnd we're just gonna do fout\nas the parameter for that.\n\n121\n00:06:40.877 --> 00:06:41.798\nSo we're constructing\n\n122\n00:06:41.798 --> 00:06:43.965\nthis ObjectOutputStream\nfrom the FileOutputStream.\n\n123\n00:06:43.965 --> 00:06:48.182\nAnd that's important because we want\na stream of objects going to our file.\n\n124\n00:06:48.182 --> 00:06:52.000\nOne more thing we're gonna do,\noos.writeObject, and\n\n125\n00:06:52.000 --> 00:06:56.465\nI think we're just gonna pass in\nentities here, let me make sure.\n\n126\n00:06:56.465 --> 00:06:58.753\nYep, that looks good.\n\n127\n00:06:58.753 --> 00:07:00.425\nSo, that's really all we have to do.\n\n128\n00:07:00.425 --> 00:07:03.376\nAnd we've got this list,\nit's actually an array list, of entities.\n\n129\n00:07:03.376 --> 00:07:08.587\nAnd we are just gonna write that\nstraight up to our file system.\n\n130\n00:07:08.587 --> 00:07:12.764\nWhat you could do is write\neach entity individually, but\n\n131\n00:07:12.764 --> 00:07:15.646\nit's really not any better to do that.\n\n132\n00:07:15.646 --> 00:07:18.670\nYou would actually have to create a for\nloop, and for\n\n133\n00:07:18.670 --> 00:07:22.476\nevery entity you could print\nthe entity to this serialized file.\n\n134\n00:07:22.476 --> 00:07:24.625\nThat would be another way of doing that.\n\n135\n00:07:24.625 --> 00:07:27.333\nBut since we've got a list of entities,\nwhy not just save the whole list?\n\n136\n00:07:27.333 --> 00:07:32.345\nThere's a good, perfectly fine way of\nserializing a list already in Java,\n\n137\n00:07:32.345 --> 00:07:35.339\nso why would we bother\ndoing it any other way?\n\n138\n00:07:35.339 --> 00:07:36.282\nI think this works fine.\n\n139\n00:07:36.282 --> 00:07:40.817\nWe'll just write the writeObject,\nthe list of entities, to our system.\n\n140\n00:07:40.817 --> 00:07:42.871\nSo all that is working now.\n\n141\n00:07:42.871 --> 00:07:45.320\nThis behavior is defined for\nwhen the Escape key is pressed.\n\n142\n00:07:45.320 --> 00:07:49.603\nAnd I think we've gotta change a couple\nother things in our code just so\n\n143\n00:07:49.603 --> 00:07:52.958\nthat everything is running\nthe way we'd expect it to.\n\n144\n00:07:52.958 --> 00:07:53.993\nCuz we have to load, right?\n\n145\n00:07:53.993 --> 00:07:58.800\nSo we've done sort of the saving side,\nnow we have to do the loading side.\n\n146\n00:07:58.800 --> 00:08:00.295\nAnd when we start our game,\n\n147\n00:08:00.295 --> 00:08:04.520\nwe gotta make sure that we're loading\neverything in the way we would want to.\n\n148\n00:08:04.520 --> 00:08:08.040\nWe've gotta make sure that establish\none of those entities as being a car,\n\n149\n00:08:08.040 --> 00:08:14.470\nbecause we've got this list of entities,\ncertain ones might be instances of cars.\n\n150\n00:08:14.470 --> 00:08:18.560\nBut we have to explicitly say\nthat maybe they are cars and\n\n151\n00:08:18.560 --> 00:08:21.700\nwe have to assign one to\nbe the controllable entity.\n\n152\n00:08:21.700 --> 00:08:25.350\nSo that when we do do our call\nto the control entity method\n\n153\n00:08:25.350 --> 00:08:28.910\nwe've got something that will be a car and\nwill be controlled properly.\n\n154\n00:08:28.910 --> 00:08:33.532\nWe have to sort of pick out of the list\nof entities the one that is the car, so,\n\n155\n00:08:33.532 --> 00:08:36.516\nthat’s sort of our challenge for\ntoday I guess.\n\n156\n00:08:36.516 --> 00:08:37.590\nWhat do we gotta do?\n\n157\n00:08:37.590 --> 00:08:40.550\nSo I gotta comment some lines here,\n\n158\n00:08:40.550 --> 00:08:44.420\ncuz these are sort of not\nwhat we're gonna wanna do.\n\n159\n00:08:44.420 --> 00:08:47.190\nThat's just the default\nbehavior that we're gonna have\n\n160\n00:08:47.190 --> 00:08:48.850\nmaybe when you start a new game, right?\n\n161\n00:08:50.630 --> 00:08:53.580\nWe instead are gonna, in fact,\n\n162\n00:08:53.580 --> 00:08:56.270\nI'm actually gonna run it\nonce with those lines in.\n\n163\n00:08:56.270 --> 00:09:00.420\nAnd I'm gonna try pressing escape and\nserializing everything so\n\n164\n00:09:00.420 --> 00:09:02.290\nthat we do get that .ser file.\n\n165\n00:09:02.290 --> 00:09:05.730\nThat way when we do run it we\nwill have a file to load from\n\n166\n00:09:05.730 --> 00:09:08.680\nthe first time we do that,\nso I'm gonna run it now.\n\n167\n00:09:08.680 --> 00:09:11.380\nIf I press the escape key it should bail.\n\n168\n00:09:11.380 --> 00:09:15.672\nAgain, it gives me sort of an error\noutput here, I think that,\n\n169\n00:09:15.672 --> 00:09:18.440\nNotSerializableException Entity, so\n\n170\n00:09:18.440 --> 00:09:21.870\nyou're having a little bit\nof an issue there, I think.\n\n171\n00:09:21.870 --> 00:09:25.550\n&gt;&gt; Now, Mark, you said that there\nwas a serializable interface.\n\n172\n00:09:25.550 --> 00:09:29.361\nBut do we ever actually implement\nthe interface in the Entity and/or Car\n\n173\n00:09:29.361 --> 00:09:30.122\nclasses?\n\n174\n00:09:30.122 --> 00:09:33.330\n&gt;&gt; Yeah so\nI think we may need to implement that,\n\n175\n00:09:33.330 --> 00:09:35.380\nI'm not sure if I did that in\nthe previous episode or not.\n\n176\n00:09:36.700 --> 00:09:38.215\nimplements Driveable, that might be it.\n\n177\n00:09:38.215 --> 00:09:41.540\nSo we want this in the Entity\nclass not the Car class.\n\n178\n00:09:41.540 --> 00:09:44.390\nSorry, I thought I had done this\nin the previous episode but,\n\n179\n00:09:44.390 --> 00:09:48.138\nI guess I just left it unimplemented.\n\n180\n00:09:48.138 --> 00:09:51.852\nSo implements Driveable, like that.\n\n181\n00:09:51.852 --> 00:09:57.777\nOr no, what am I doing,\nSerializable, like that.\n\n182\n00:09:57.777 --> 00:10:04.299\nAnd we're going to have to import\nhere from java I/O, and is that good?\n\n183\n00:10:04.299 --> 00:10:07.131\nYeah so, static final serial\nUID version of type long,\n\n184\n00:10:07.131 --> 00:10:08.950\nwe're gonna want one of those now.\n\n185\n00:10:08.950 --> 00:10:13.320\nWe just add the default one and it creates\nthis private static final long for us.\n\n186\n00:10:13.320 --> 00:10:19.110\nNow I want to see if it'll work,\nlet's go back here, and now if we do it.\n\n187\n00:10:20.110 --> 00:10:22.890\nSo we've got this stuff that's\ncoming from GLFW telling us that\n\n188\n00:10:22.890 --> 00:10:23.778\nthere's a fatal error.\n\n189\n00:10:23.778 --> 00:10:27.340\nThat's just cuz we destroyed the window\nwithout doing whatever it wanted us to do.\n\n190\n00:10:27.340 --> 00:10:31.200\nI'm not entirely sure what the shutdown\nprocess is supposed to look like.\n\n191\n00:10:31.200 --> 00:10:34.488\nBut we don't throw\nan exception from the JVM now,\n\n192\n00:10:34.488 --> 00:10:38.021\nthis is all just sort of\nwhat's happening with GLFW.\n\n193\n00:10:38.021 --> 00:10:40.711\nThere's no problem\nserializing the data and\n\n194\n00:10:40.711 --> 00:10:44.190\nif I refresh my workspace we\nshould have that SCR file now.\n\n195\n00:10:46.160 --> 00:10:48.853\nSomewhere, I think so.\n\n196\n00:10:48.853 --> 00:10:53.580\nHit Refresh, okay, yeah,\nI think it showed up.\n\n197\n00:10:53.580 --> 00:10:56.467\nYeah, it's right there at the bottom,\nsavegame.ser.\n\n198\n00:10:56.467 --> 00:10:58.866\nSo we can open this up,\nit's kinda hard to read,\n\n199\n00:10:58.866 --> 00:11:01.390\nyou can't really sorta\nsee what's going on here.\n\n200\n00:11:01.390 --> 00:11:04.040\nIt's sort of a bunch of characters\nthat aren't really being rendered\n\n201\n00:11:04.040 --> 00:11:05.900\nproperly by our text editor.\n\n202\n00:11:05.900 --> 00:11:10.630\nMaybe you could find\na file opener that would\n\n203\n00:11:10.630 --> 00:11:13.930\nbe able to read this in sort\nof understandable plain text.\n\n204\n00:11:13.930 --> 00:11:19.570\nYou can see there are definitely words\nhere that make some sense, odometer,\n\n205\n00:11:19.570 --> 00:11:24.715\nprice, ticketsl, I don't know,\njava.lang Enum, Car$Colour.\n\n206\n00:11:24.715 --> 00:11:25.960\nThere are sort of a lot\nof things going on.\n\n207\n00:11:25.960 --> 00:11:28.180\nSome of them makes sense,\nsome of them don't,\n\n208\n00:11:28.180 --> 00:11:31.250\nbut that kind of file doesn't\nnecessarily have to be read by humans.\n\n209\n00:11:31.250 --> 00:11:36.690\nYou could override that, the default\nbehavior of the write object method,\n\n210\n00:11:36.690 --> 00:11:39.920\nwhich is implemented by the serializable.\n\n211\n00:11:39.920 --> 00:11:42.360\nAnd that could be\nsomething you would do but\n\n212\n00:11:42.360 --> 00:11:44.320\nI think we're good on that front for now.\n\n213\n00:11:44.320 --> 00:11:48.660\nSo a couple things I still have to do,\nwe do have that file now so\n\n214\n00:11:48.660 --> 00:11:53.100\nI can go ahead and\ncomment these lines out, sorry, like that.\n\n215\n00:11:53.100 --> 00:11:56.340\nAnd again, instead of doing this,\n\n216\n00:11:56.340 --> 00:12:01.550\nwe're gonna be loading the entities\nfrom the array list, right?\n\n217\n00:12:01.550 --> 00:12:05.570\nSo we don't want those lines of code\nbecause every time we start a new game,\n\n218\n00:12:05.570 --> 00:12:10.420\nwe don't want to create a new\nCar in a new bottom left Entity\n\n219\n00:12:10.420 --> 00:12:12.790\non top of the existing ones\nwhichever they may be.\n\n220\n00:12:12.790 --> 00:12:16.190\nSo instead what we're gonna do up here is\n\n221\n00:12:16.190 --> 00:12:20.930\nwe're gonna have to do a try catch again\nbecause we're doing all that stream stuff.\n\n222\n00:12:20.930 --> 00:12:22.530\nThere are a lot of possible exceptions and\n\n223\n00:12:22.530 --> 00:12:25.230\nerrors that can happen because\nof those exceptions so\n\n224\n00:12:25.230 --> 00:12:31.520\nwe want to be able to catch those,\nv.printsteptrace just like that is fine.\n\n225\n00:12:31.520 --> 00:12:33.384\nInside the try, what are we gonna want?\n\n226\n00:12:34.730 --> 00:12:37.043\nWe're gonna do a FileInputStream,\nobviously,\n\n227\n00:12:37.043 --> 00:12:38.755\nbecause we do need to input the file.\n\n228\n00:12:38.755 --> 00:12:44.776\nOr else we're probably gonna\ndo an ObjectInputStream, And\n\n229\n00:12:44.776 --> 00:12:52.346\nwe're gonna have to do some imports as\nwell Ctrl+Shift+O, FileInputStream,\n\n230\n00:12:52.346 --> 00:13:00.920\nand I'm pretty sure I'm gonna give it\nsavegame.ser like that and then, yeah.\n\n231\n00:13:00.920 --> 00:13:03.946\nLooks good, so\nthis one is new object input stream,\n\n232\n00:13:11.446 --> 00:13:17.897\nAnd we're going to be constructing that\nfrom this FIS that we have with that,\n\n233\n00:13:17.897 --> 00:13:23.690\nI didn't give it a variable name,\nso let's call it OIS, why not?\n\n234\n00:13:23.690 --> 00:13:30.700\nIt's an object input stream,\nit makes sense, so entities = new.\n\n235\n00:13:31.750 --> 00:13:35.614\nAnd I have in my outline hash tag entity,\nbut\n\n236\n00:13:35.614 --> 00:13:39.798\nwe're gonna have to do ArrayList&lt;Entity&gt;.\n\n237\n00:13:39.798 --> 00:13:45.658\nAnd so we're gonna be casting out from\nwhatever we got from ois.readObject.\n\n238\n00:13:45.658 --> 00:13:50.430\nSo we might have some errors\nthat come up here because\n\n239\n00:13:50.430 --> 00:13:54.210\nthis is an unchecked cast from\nobject to ArrayList&lt;Entity&gt;.\n\n240\n00:13:54.210 --> 00:13:57.850\nWe could suppress the warnings, but\nI'm just sorta gonna leave this as it is.\n\n241\n00:13:57.850 --> 00:13:59.360\nAgain, this is the behavior we want,\n\n242\n00:13:59.360 --> 00:14:02.070\nwe have this list that we're\ngetting from readObject.\n\n243\n00:14:02.070 --> 00:14:04.220\nAnd if it isn't of type ArrayList&lt;Entity&gt;,\n\n244\n00:14:04.220 --> 00:14:05.860\nthen there's not really\nmuch we can do anyway.\n\n245\n00:14:05.860 --> 00:14:10.770\nSo we would wanna handle that\nas an exception right here.\n\n246\n00:14:10.770 --> 00:14:14.070\n&gt;&gt; Now, Mark,\nis that new keyword necessary?\n\n247\n00:14:14.070 --> 00:14:17.212\nSince we're casting whatever\nobject we're reading, or\n\n248\n00:14:17.212 --> 00:14:18.949\ncan I just leave it out of there?\n\n249\n00:14:18.949 --> 00:14:21.363\n&gt;&gt; Yeah, you're right about that so\nthat's gonna give me an error,\n\n250\n00:14:21.363 --> 00:14:23.572\nas you can see there it's sort\nof like red underlining text.\n\n251\n00:14:23.572 --> 00:14:28.328\nBut we also wanna close our streams,\nso ois.close and fis.close,\n\n252\n00:14:28.328 --> 00:14:31.288\nI guess,\ncan be done at this point in time.\n\n253\n00:14:31.288 --> 00:14:33.202\nBut this variable entities,\n\n254\n00:14:33.202 --> 00:14:38.032\npreviously there was nothing in it\nbecause we did comment these lines out.\n\n255\n00:14:38.032 --> 00:14:43.316\nAfter this code executes it should have\nthat actual array list from readObject and\n\n256\n00:14:43.316 --> 00:14:47.210\nI think everything should\nbe squared away on that.\n\n257\n00:14:47.210 --> 00:14:50.300\nThere is a couple other things\nwe have to do, so down here,\n\n258\n00:14:50.300 --> 00:14:53.430\nwe have to figure out, yeah,\nsee we're having a problem here.\n\n259\n00:14:53.430 --> 00:14:57.300\nIt doesn't know what the c is anymore,\nbecause we originally had, in this code,\n\n260\n00:14:57.300 --> 00:15:01.580\nwe had a separate entity\ncalled c that was a Car.\n\n261\n00:15:01.580 --> 00:15:04.320\nThat sort of stood alone from the other\nentities that were just entities and\n\n262\n00:15:04.320 --> 00:15:05.200\nnot cars.\n\n263\n00:15:05.200 --> 00:15:10.190\nSo we need to establish sort of\na dominant entity, a Car entity,\n\n264\n00:15:10.190 --> 00:15:14.250\nthe one that can be controlled as\nbeing different from the other ones.\n\n265\n00:15:14.250 --> 00:15:19.914\nSo we can just do a quick for\nloop for every Entity e and entities.\n\n266\n00:15:22.977 --> 00:15:25.022\nI don't really think it matters too\nmuch where you have this for loop,\n\n267\n00:15:25.022 --> 00:15:26.710\nbut you have to sort of pick\nit out eventually, right?\n\n268\n00:15:26.710 --> 00:15:33.325\nSo, let's just do Car c = null like that.\n\n269\n00:15:33.325 --> 00:15:42.160\nSo if (e instanceof Car).\n\n270\n00:15:42.160 --> 00:15:49.522\nWe're going to make a cast and we're going\nto say c = e, cast it to Car, like that.\n\n271\n00:15:49.522 --> 00:15:53.734\nSo we got that c variable that I\nhad to define up here it's gonna be\n\n272\n00:15:53.734 --> 00:15:55.138\nequal to no at first.\n\n273\n00:15:55.138 --> 00:15:56.546\nBut we're sort of, out of this list,\n\n274\n00:15:56.546 --> 00:15:59.220\nwe're gonna pick the one that\nis already an instance of a Car.\n\n275\n00:15:59.220 --> 00:16:03.900\nAnd that way we'll have a reference to it\nas being a Car, and not just an entity.\n\n276\n00:16:03.900 --> 00:16:05.720\nThat way when we make this call,\n\n277\n00:16:05.720 --> 00:16:10.580\ndown here that takes a Car,\nit will be able to work just fine.\n\n278\n00:16:10.580 --> 00:16:13.468\nYou could just pass in\nthe correct entity here too.\n\n279\n00:16:13.468 --> 00:16:14.730\nYou don't have to call it c again.\n\n280\n00:16:14.730 --> 00:16:17.050\nControl entity will take an entity.\n\n281\n00:16:17.050 --> 00:16:18.650\nIt's an important distinction to make,\nI think.\n\n282\n00:16:18.650 --> 00:16:23.300\nIt will take an entity, any entity, but\nit won't necessarily do what we want\n\n283\n00:16:23.300 --> 00:16:25.630\nunless we do pass in\nan object that is a Car.\n\n284\n00:16:25.630 --> 00:16:28.050\nAnd we wanna make sure that we're\npassing with the right object.\n\n285\n00:16:28.050 --> 00:16:30.570\nSo that's why I have\nthat separate reference,\n\n286\n00:16:30.570 --> 00:16:33.780\nc that refers to something\nthat is definitely a car.\n\n287\n00:16:33.780 --> 00:16:37.790\nThat way I'm not just trying to control\nevery single entity maybe in a list.\n\n288\n00:16:37.790 --> 00:16:39.580\nAnd just figure out which one works.\n\n289\n00:16:39.580 --> 00:16:43.155\nIt's best if we sort of do the work up\nfront, figure out what it is one time.\n\n290\n00:16:43.155 --> 00:16:47.380\nAnd then we have a reference to\nit as being a car specifically.\n\n291\n00:16:47.380 --> 00:16:49.590\nAnd we can just pass it in then.\n\n292\n00:16:49.590 --> 00:16:50.590\n&gt;&gt; Mark, I do have a question.\n\n293\n00:16:50.590 --> 00:16:53.400\nWe have that read in the game file.\n\n294\n00:16:53.400 --> 00:16:56.600\nAnd then we have the possibility of\nhaving an exception at that point.\n\n295\n00:16:56.600 --> 00:16:59.450\nAnd we print the stack trace,\nwhich is, I do as well.\n\n296\n00:16:59.450 --> 00:16:59.990\nWhat happened?\n\n297\n00:16:59.990 --> 00:17:01.340\nI wanna know.\n\n298\n00:17:01.340 --> 00:17:04.940\nHowever, won't the game\ncontinue after that point?\n\n299\n00:17:04.940 --> 00:17:08.840\nOr am I misunderstanding\nhow those catches go?\n\n300\n00:17:08.840 --> 00:17:12.320\nIt'll still continue and\ntry to read through all those entities.\n\n301\n00:17:12.320 --> 00:17:15.850\nAnd wouldn't entities\nbe null at that point?\n\n302\n00:17:15.850 --> 00:17:18.670\n&gt;&gt; Yeah,\ncar seat would also probably stay null,\n\n303\n00:17:18.670 --> 00:17:20.540\nbecause there wouldn't\nbe anything in entities.\n\n304\n00:17:20.540 --> 00:17:23.430\nYou'd have a lot of other problems\nthat would eventually crop up sort of\n\n305\n00:17:23.430 --> 00:17:24.680\nfrom this point.\n\n306\n00:17:24.680 --> 00:17:29.290\nSo printing a StackTrace here is\ngonna give you sort of an indication.\n\n307\n00:17:29.290 --> 00:17:30.660\nIt'll print the StackTrace, and\n\n308\n00:17:30.660 --> 00:17:32.790\nsay that okay this is the first\nthing that went wrong.\n\n309\n00:17:32.790 --> 00:17:34.740\nBut then after this point in\nthe program you'll probably have\n\n310\n00:17:34.740 --> 00:17:36.600\na bunch of other things\nthat also go wrong.\n\n311\n00:17:36.600 --> 00:17:40.170\nJust because you sort of have an issue\nthat you haven't really handled.\n\n312\n00:17:40.170 --> 00:17:43.760\nAgain, I'm just not all that worried\nabout error handling in this episode.\n\n313\n00:17:43.760 --> 00:17:46.480\nI just don't really think we\nhave that much time to do it.\n\n314\n00:17:46.480 --> 00:17:49.190\nAnd I didn't really do the prep work for\nthat ahead of time.\n\n315\n00:17:49.190 --> 00:17:52.400\nSo, I'm sort of betting that\nthis cast up here will work.\n\n316\n00:17:52.400 --> 00:17:55.390\nAnd if it doesn't work,\nwe'll know that it didn't work for sure.\n\n317\n00:17:55.390 --> 00:17:57.050\nWe'll have all sorts\nof errors that happen.\n\n318\n00:17:58.166 --> 00:18:02.000\nIt'll put the StackTrace, first of all\nfrom like this step right up here,\n\n319\n00:18:02.000 --> 00:18:04.770\nwhen we do this class catch exception.\n\n320\n00:18:04.770 --> 00:18:06.560\nWe may get one there.\n\n321\n00:18:06.560 --> 00:18:09.770\nBut there's a lot of other things that\nwould happen after that too, you're right.\n\n322\n00:18:09.770 --> 00:18:12.620\n&gt;&gt; Now, in addition to, couldn't we just\ntake the code that we comment at all and\n\n323\n00:18:12.620 --> 00:18:15.160\njust put in, in the exception handler?\n\n324\n00:18:15.160 --> 00:18:18.410\nAnd then that way, we have a fall back\njust in case the file doesn't exist?\n\n325\n00:18:18.410 --> 00:18:22.310\nCuz there's a chance though we do have\na dependency on the file already existing,\n\n326\n00:18:22.310 --> 00:18:23.330\nthen we start the game?\n\n327\n00:18:23.330 --> 00:18:25.540\n&gt;&gt; Yeah, so we can do that,\nlet's try that.\n\n328\n00:18:25.540 --> 00:18:29.240\nI think that's actually pretty way of\nhandling, because it's pretty simple,\n\n329\n00:18:29.240 --> 00:18:33.820\ndoesn't really require me to do too\nmuch work, which I am a fan of.\n\n330\n00:18:33.820 --> 00:18:36.730\nSo, let's just go in here.\n\n331\n00:18:36.730 --> 00:18:40.510\nSo, if we get that exception where\nentities maybe doesn't exist,\n\n332\n00:18:40.510 --> 00:18:44.160\nwhichever exception it may be, it's\njust catching a general exception case.\n\n333\n00:18:44.160 --> 00:18:47.620\nIt's gonna perform these operations,\nso we'll have that entity c and\n\n334\n00:18:47.620 --> 00:18:48.880\nwe'll have an entity x.\n\n335\n00:18:48.880 --> 00:18:52.380\nWe're not gonna end up using this\nx reference anywhere else, but\n\n336\n00:18:52.380 --> 00:18:55.240\nit's I guess nice to know that it exists.\n\n337\n00:18:55.240 --> 00:18:59.175\nAnd then, so these operations here we\nactually wouldn't want to run if we\n\n338\n00:18:59.175 --> 00:19:02.672\nare catching it, so I'm gonna move\nthem inside of the try block.\n\n339\n00:19:04.684 --> 00:19:07.580\nLike that.\n\n340\n00:19:07.580 --> 00:19:08.618\nAnd I'll do auto format.\n\n341\n00:19:08.618 --> 00:19:13.173\nYeah so, because if this\ncode here does run instead,\n\n342\n00:19:13.173 --> 00:19:16.426\nthen we will have a separate entity c.\n\n343\n00:19:16.426 --> 00:19:18.144\nAnd we don't want to be\nsending it to null, and\n\n344\n00:19:18.144 --> 00:19:19.690\ntrying to pick it out of the list again.\n\n345\n00:19:19.690 --> 00:19:20.860\nYou actually could I think.\n\n346\n00:19:20.860 --> 00:19:22.430\nI think it would work just fine.\n\n347\n00:19:22.430 --> 00:19:24.976\nThough it's an unnecessary step\nthat we wouldn't wanna do.\n\n348\n00:19:24.976 --> 00:19:27.782\n&gt;&gt; So, correct me if I'm wrong,\nare try catches,\n\n349\n00:19:27.782 --> 00:19:31.800\nis there block scoping to\nthe variables declared within those?\n\n350\n00:19:31.800 --> 00:19:36.160\nLike would c still be accessible outside\nof the try or the catch blocks, or\n\n351\n00:19:36.160 --> 00:19:40.010\nshould we move those to like a car\nc equals null outside of the track.\n\n352\n00:19:40.010 --> 00:19:41.820\n&gt;&gt; Yeah, okay, I'll move that outside,\n\n353\n00:19:41.820 --> 00:19:45.210\nthat way there's, I don't think,\ndid I have an error?\n\n354\n00:19:45.210 --> 00:19:46.780\nI think I did actually, yeah.\n\n355\n00:19:46.780 --> 00:19:49.550\nSo I would have caught that\ncuz it would have not run.\n\n356\n00:19:50.770 --> 00:19:53.120\nLet's do that, Car c = null.\n\n357\n00:19:54.350 --> 00:19:57.040\nAnd then we're gonna,\nI think you have to delete a lot in here.\n\n358\n00:19:57.040 --> 00:20:00.043\nJust a little bit of that.\n\n359\n00:20:00.043 --> 00:20:00.770\nIt doesn't matter where.\n\n360\n00:20:01.800 --> 00:20:03.550\nYeah, so inside here is already fine.\n\n361\n00:20:03.550 --> 00:20:05.020\nI don't declare in anywhere else.\n\n362\n00:20:05.020 --> 00:20:07.050\nBut again,\nwe can only declare our variable once.\n\n363\n00:20:07.050 --> 00:20:09.378\nSo we wanna declare it up here\noutside of the try catch.\n\n364\n00:20:09.378 --> 00:20:12.500\nThat way whichever path it does end up\ntaking maybe it doesn't get all the way\n\n365\n00:20:12.500 --> 00:20:15.360\nthrough this try block,\nit has this error up here.\n\n366\n00:20:15.360 --> 00:20:17.890\nThat way it sort of catches the error\ndown here or the exception,\n\n367\n00:20:17.890 --> 00:20:19.640\nsorry, it keeps saying error.\n\n368\n00:20:19.640 --> 00:20:22.210\nIt catches the exception down here, and\nit handles it in the way we deemed as\n\n369\n00:20:22.210 --> 00:20:27.820\nappropriate, creating a new entity in\nthe bottom left and the car in the center.\n\n370\n00:20:27.820 --> 00:20:29.810\nSo I do have that same game.ser file.\n\n371\n00:20:29.810 --> 00:20:34.320\nI am curious to see if it will\nrun from the same game or\n\n372\n00:20:34.320 --> 00:20:35.690\nif it will have that error.\n\n373\n00:20:35.690 --> 00:20:39.490\nSo lets try a run.\n\n374\n00:20:39.490 --> 00:20:43.050\nOkay, so\nI'm not entirely sure what happened there.\n\n375\n00:20:43.050 --> 00:20:45.900\nI don't know if it was coming\nup from the bottom left or\n\n376\n00:20:45.900 --> 00:20:47.920\nif it did run from our same game.\n\n377\n00:20:47.920 --> 00:20:49.570\nSo I sort of stopped\nit at a later point so\n\n378\n00:20:49.570 --> 00:20:52.150\nthat it's easy to tell\nhow it'll run this time.\n\n379\n00:20:52.150 --> 00:20:54.900\nSo if it spawns with it\nright next to our car,\n\n380\n00:20:54.900 --> 00:20:57.500\nwe'll know that it is loading\nproperly from the file.\n\n381\n00:20:57.500 --> 00:20:58.735\nAnd yeah, that is the case.\n\n382\n00:20:58.735 --> 00:21:01.350\nSo it's definitely loading\nproperly from the file.\n\n383\n00:21:01.350 --> 00:21:03.460\nEverything is working there.\n\n384\n00:21:03.460 --> 00:21:06.320\nSo if I wanted,\nI could spawn a bunch of things and\n\n385\n00:21:06.320 --> 00:21:09.100\nthen freeze it, press the scape.\n\n386\n00:21:09.100 --> 00:21:11.270\nThings are slow, that's fine.\n\n387\n00:21:11.270 --> 00:21:14.240\nAnd now when I run it again,\nthere will be entities flying everywhere.\n\n388\n00:21:15.690 --> 00:21:21.180\nSo, if I do that,\ninstalled entities are there, I can\n\n389\n00:21:21.180 --> 00:21:25.960\nput my car, run around, spawn some\nmore and that might be too many.\n\n390\n00:21:25.960 --> 00:21:28.540\nSo let's go ahead and\nstop it there, I guess.\n\n391\n00:21:28.540 --> 00:21:34.040\nLet's, I wanted to create an end key too,\n\n392\n00:21:35.080 --> 00:21:37.370\nthis key binding will create a new game.\n\n393\n00:21:37.370 --> 00:21:40.850\nAgain, revert to that original\nstate where we have that\n\n394\n00:21:40.850 --> 00:21:43.680\nentity coming up from the bottom left,\nand that car in the middle.\n\n395\n00:21:43.680 --> 00:21:48.960\nSo I'm gonna add that, that key check now,\nand we'll be able to sort of\n\n396\n00:21:48.960 --> 00:21:54.960\nstart a new game from that point, whatever\nyou want, just from within the game.\n\n397\n00:21:56.040 --> 00:21:59.878\nSo what I'm gonna do,\n\n398\n00:21:59.878 --> 00:22:06.344\nentities.clear, entities.add,\n\n399\n00:22:06.344 --> 00:22:10.384\nthat's kind of gross,\n\n400\n00:22:10.384 --> 00:22:17.252\nlet's do c = new Car, Car.Colour.,\n\n401\n00:22:17.252 --> 00:22:21.790\nlet's just say GREEN.\n\n402\n00:22:21.790 --> 00:22:23.794\nWhy not?\n\n403\n00:22:23.794 --> 00:22:26.849\nAnd then, let's do, so entities.add c.\n\n404\n00:22:28.959 --> 00:22:32.531\nAnd we'll do entities.add.\n\n405\n00:22:32.531 --> 00:22:34.860\nAnd we don't need a reference to this one,\nso I'm just going to do it within.\n\n406\n00:22:34.860 --> 00:22:38.360\nAgain, you could do it both ways, but\nI'm just gonna do it all on one line.\n\n407\n00:22:38.360 --> 00:22:40.390\nJust cuz this isn't the car entity.\n\n408\n00:22:40.390 --> 00:22:42.390\nWe don't need a separate\nreference to this.\n\n409\n00:22:42.390 --> 00:22:45.344\nSo we said -100, -100.\n\n410\n00:22:45.344 --> 00:22:46.339\nSo that's the bottom left.\n\n411\n00:22:47.760 --> 00:22:51.900\nI don't remember exactly what the initial\nvalues I gave it up there were.\n\n412\n00:22:51.900 --> 00:22:55.460\nBut I do wanna make sure they're the same,\nso I'm gonna look for it.\n\n413\n00:22:57.215 --> 00:22:58.870\n3 and 45, which makes sense,\n\n414\n00:22:58.870 --> 00:23:03.470\ncuz we don't want it to be going too fast\nto where we can't see what's going on.\n\n415\n00:23:03.470 --> 00:23:05.210\nBut we also want it to have some speed.\n\n416\n00:23:05.210 --> 00:23:07.210\nAlso I used addAll and\nI meant to just do add.\n\n417\n00:23:08.670 --> 00:23:12.106\nI think there was some auto\ncomplete going on there.\n\n418\n00:23:12.106 --> 00:23:14.331\nCuz if we run it now,\nwe've got too much going on.\n\n419\n00:23:14.331 --> 00:23:15.770\nWe can press the End key.\n\n420\n00:23:15.770 --> 00:23:18.604\nMaybe not.\nI think I forgot to change the name of\n\n421\n00:23:18.604 --> 00:23:19.879\nthe key actually.\n\n422\n00:23:19.879 --> 00:23:20.900\nIs that what you were gonna say?\n\n423\n00:23:20.900 --> 00:23:22.710\nYeah, Justin saw.\n\n424\n00:23:22.710 --> 00:23:26.590\nAll right, so yeah, that,\nnow I think that'll work, all right.\n\n425\n00:23:26.590 --> 00:23:27.190\nLet's check it out.\n\n426\n00:23:27.190 --> 00:23:29.480\nThat, and boom, yeah.\n\n427\n00:23:29.480 --> 00:23:30.760\nEverything reverts.\n\n428\n00:23:30.760 --> 00:23:31.890\nAnd I did make the car green.\n\n429\n00:23:31.890 --> 00:23:32.920\nI know it was blue before.\n\n430\n00:23:32.920 --> 00:23:36.710\nI just wanted to show that you can\nsort of set that to whatever you want.\n\n431\n00:23:36.710 --> 00:23:39.440\nI think there is another problem actually.\n\n432\n00:23:39.440 --> 00:23:40.020\nFun fact.\n\n433\n00:23:40.020 --> 00:23:47.519\nI don't think we have a,\nWe don't have got, right?\n\n434\n00:23:47.519 --> 00:23:51.243\nSo C is new car.\n\n435\n00:23:51.243 --> 00:23:53.497\nAnd I think it wasn't controlling the car.\n\n436\n00:23:53.497 --> 00:23:55.890\nSo I am interested in\nwhy that was happening.\n\n437\n00:23:55.890 --> 00:23:57.530\nMaybe I was wrong about that though,\nlet's try again.\n\n438\n00:23:58.610 --> 00:24:01.200\nAnd I hit Escape.\n\n439\n00:24:01.200 --> 00:24:03.930\nSo then from this, let's see if it will.\n\n440\n00:24:03.930 --> 00:24:05.130\nOkay, we can control it, never mind.\n\n441\n00:24:05.130 --> 00:24:07.770\nI think I was just wrong, honestly.\n\n442\n00:24:07.770 --> 00:24:09.925\nBut yeah, we can spot a bunch of entities.\n\n443\n00:24:09.925 --> 00:24:13.150\nWe can press N and\ngo back and kill everything.\n\n444\n00:24:13.150 --> 00:24:13.859\nBut no, I was right.\n\n445\n00:24:13.859 --> 00:24:14.456\nOkay, so\n\n446\n00:24:14.456 --> 00:24:19.318\nwe do have a problem where the car isn't\ncontrolled if you do press that N key.\n\n447\n00:24:19.318 --> 00:24:22.719\nBut I guess if you start the game again,\nif you press Escape and\n\n448\n00:24:22.719 --> 00:24:24.570\nthen go back to it, it does work.\n\n449\n00:24:24.570 --> 00:24:27.418\nSo do you want to try to debug that,\nfigure it why that's happening?\n\n450\n00:24:27.418 --> 00:24:30.508\n&gt;&gt; Yeah, I would like to see if we can\nnail that down, because debugging,\n\n451\n00:24:30.508 --> 00:24:33.201\nwell that's a very realistic\npart of programming anything.\n\n452\n00:24:33.201 --> 00:24:38.000\nBut also I would like to see if we\ndelete that saved game, that ACR,\n\n453\n00:24:38.000 --> 00:24:42.740\nif it will actually spin up a game\nwithout having a save file.\n\n454\n00:24:42.740 --> 00:24:43.270\n&gt;&gt; Okay.\n\n455\n00:24:43.270 --> 00:24:44.750\n&gt;&gt; Maybe, we can try that shortly.\n\n456\n00:24:44.750 --> 00:24:49.050\nLet's try to figure out why\nthere is no controls on the car.\n\n457\n00:24:49.050 --> 00:24:49.740\n&gt;&gt; Yeah, okay.\n\n458\n00:24:49.740 --> 00:24:54.840\nSo we've got this C,\nagain this is an entity,\n\n459\n00:24:54.840 --> 00:24:58.950\nbut, no,\nit is actually exclusively a car isn't it?\n\n460\n00:25:00.510 --> 00:25:01.175\nYeah, so\n\n461\n00:25:01.175 --> 00:25:06.007\nC is carrying an explicit reference\nto something that has to be a car.\n\n462\n00:25:06.007 --> 00:25:08.290\nAnd we're saying new car at the origin.\n\n463\n00:25:10.520 --> 00:25:13.695\nSo where did I originally,\n\n464\n00:25:13.695 --> 00:25:18.673\nwhere's the scope of that variable car C?\n\n465\n00:25:18.673 --> 00:25:22.385\nSo we are declaring it out\nhere in the main game loop.\n\n466\n00:25:26.353 --> 00:25:29.940\nIs null, then we are picking it out.\n\n467\n00:25:29.940 --> 00:25:33.450\nSo this is happening only in scenarios,\n\n468\n00:25:33.450 --> 00:25:37.100\nI think,\nwhere we are loading it from the file.\n\n469\n00:25:37.100 --> 00:25:41.280\nSo we would want to do this check,\nI guess, regardless then.\n\n470\n00:25:41.280 --> 00:25:47.216\nIf I move it out of the try catch\nI think it will run either way.\n\n471\n00:25:47.216 --> 00:25:51.390\nLet's just see if that works, if casting\nit to a car outside of that loop.\n\n472\n00:25:51.390 --> 00:25:54.530\nOkay, so the problem we\nidentified was not like this.\n\n473\n00:25:54.530 --> 00:25:58.740\nIt was when we press N,\nthen we wouldn't be able to control it.\n\n474\n00:25:58.740 --> 00:25:59.620\nWe still aren't able to.\n\n475\n00:25:59.620 --> 00:26:01.360\nYou have any ideas, Justin?\n\n476\n00:26:01.360 --> 00:26:03.175\n&gt;&gt; So I was thinking this is,\n\n477\n00:26:03.175 --> 00:26:07.980\nwe're sending that CN to the control\nentity, a static method.\n\n478\n00:26:07.980 --> 00:26:14.590\nI wondered by reassigning that variable\nif there's some whoopsie daisy mix up.\n\n479\n00:26:14.590 --> 00:26:18.942\nThat would be my thought or\nalso when you kind of initialize the game,\n\n480\n00:26:18.942 --> 00:26:22.860\nyou create all the entities and\nthen you initialize the game.\n\n481\n00:26:22.860 --> 00:26:27.736\nIs there any guarantee\nthat you don't have to\n\n482\n00:26:27.736 --> 00:26:34.600\nreinitialize some aspect of\nthe game using GLFW or LJG?\n\n483\n00:26:34.600 --> 00:26:37.370\n&gt;&gt; Okay so yeah, I think it's a problem\nwhere our reference isn't necessarily\n\n484\n00:26:37.370 --> 00:26:41.080\nbeing updated, so we do this check\nin our code if we can go in here.\n\n485\n00:26:41.080 --> 00:26:44.865\nWe do this check where outside of our\ncatch, I did move it outside of the catch,\n\n486\n00:26:44.865 --> 00:26:49.920\nbut so for every entity and\nentities if that entity is\n\n487\n00:26:49.920 --> 00:26:55.125\nan instance of car C and\nthen we explicitly cast it to being a car.\n\n488\n00:26:55.125 --> 00:26:56.727\nSo we need to be doing this,\n\n489\n00:26:56.727 --> 00:27:01.143\nthis is all done as being done sort of\nat setup before our window even opens.\n\n490\n00:27:01.143 --> 00:27:06.389\nSo we actually need to move this into\nour loop so that we're doing it anytime\n\n491\n00:27:06.389 --> 00:27:11.770\nthat N is being pressed basically or\nany time that our window is running.\n\n492\n00:27:11.770 --> 00:27:14.100\nSo I could just move it back\ninto the main game loop, but\n\n493\n00:27:14.100 --> 00:27:17.220\nI think it's better if I\nactually put it in this\n\n494\n00:27:17.220 --> 00:27:21.040\ndown here at the bottom of that where\nwe explicitly cast it to a car.\n\n495\n00:27:21.040 --> 00:27:24.610\nI think that'll work,\nlet's see if it does.\n\n496\n00:27:24.610 --> 00:27:28.250\nSo now when we run it, we just press End.\n\n497\n00:27:28.250 --> 00:27:29.550\nNope, still have control over it.\n\n498\n00:27:29.550 --> 00:27:34.060\nSo maybe I do actually need\nto put it in the game loop.\n\n499\n00:27:34.060 --> 00:27:37.160\nI will just do that instead of\nwhat I tried to do just now.\n\n500\n00:27:38.745 --> 00:27:40.325\nWait, did that not delete?\n\n501\n00:27:40.325 --> 00:27:45.265\nOkay, this is fine.\n\n502\n00:27:45.265 --> 00:27:48.635\nSorry, I just want to put it in\nthe main game loop instead of the end.\n\n503\n00:27:48.635 --> 00:27:54.239\nI thought that putting it in the end might\nwork, but this should definitely work.\n\n504\n00:27:54.239 --> 00:27:59.490\nSo if every 50 milliseconds I could\nhave a separate for loop here.\n\n505\n00:27:59.490 --> 00:28:02.415\nBut since I'm actually iterating\nacross the same thing,\n\n506\n00:28:02.415 --> 00:28:05.828\nI'm just gonna copy this little if\nbit into this existing for loop.\n\n507\n00:28:05.828 --> 00:28:09.650\nAnd then we'll be doing the same\noperation anyway so it won't matter.\n\n508\n00:28:09.650 --> 00:28:13.480\nSo we wanna make sure that the C is\ncarrying an explicit reference to a car,\n\n509\n00:28:13.480 --> 00:28:17.648\nthat way when we try to control it\nit will be able to be controlled.\n\n510\n00:28:17.648 --> 00:28:22.580\nSo now when we run it,\nwe can move around and all that, and\n\n511\n00:28:22.580 --> 00:28:24.340\nif you press End we can still move around.\n\n512\n00:28:24.340 --> 00:28:26.410\nThat's what we were trying to fix before.\n\n513\n00:28:26.410 --> 00:28:30.460\nSo what was the suggestion you had for-\n&gt;&gt; I wanted to see if we remove the save\n\n514\n00:28:30.460 --> 00:28:34.210\ngame state, can we still start the game?\n\n515\n00:28:34.210 --> 00:28:39.020\nDoes our logic still flow for that try\naccept of I don't have a previously saved\n\n516\n00:28:39.020 --> 00:28:42.100\ngame, I want to start a new one and then\nfrom there you'll have a save game state.\n\n517\n00:28:42.100 --> 00:28:43.330\nI just want to see if it'll work.\n\n518\n00:28:43.330 --> 00:28:44.340\n&gt;&gt; Cool, yeah, okay, good idea.\n\n519\n00:28:44.340 --> 00:28:47.314\nSo let's just create a recognizable\ngame state that we don't want\n\n520\n00:28:47.314 --> 00:28:50.170\nto access where everything's\nkind of different.\n\n521\n00:28:50.170 --> 00:28:50.995\nSo, like that.\n\n522\n00:28:50.995 --> 00:28:54.945\nI just pressed ESC so now it's gonna quit,\nalthough it may take a second.\n\n523\n00:28:56.115 --> 00:28:58.845\nYeah, not responding, oops, I broke it.\n\n524\n00:28:58.845 --> 00:29:02.575\nClose it, again I think I just sort\nof spammed too many buttons there.\n\n525\n00:29:02.575 --> 00:29:07.985\nJava got overwhelmed, but anyway,\nwe do have that saved game to SER still,\n\n526\n00:29:07.985 --> 00:29:11.190\nso if we delete it It says out\nof sync with the file system.\n\n527\n00:29:11.190 --> 00:29:12.740\nWell that's not great.\n\n528\n00:29:12.740 --> 00:29:14.120\nWhat if we refresh our work space?\n\n529\n00:29:19.592 --> 00:29:21.267\nOkay, now when we delete it,\n\n530\n00:29:21.267 --> 00:29:24.520\nlet's see if when we run it\nwe get sort of a fresh start.\n\n531\n00:29:24.520 --> 00:29:25.310\nLooks like we do.\n\n532\n00:29:27.150 --> 00:29:35.160\nAgain, my car is back to blue now,\nso it's got the black outline.\n\n533\n00:29:35.160 --> 00:29:40.140\nIf I press N it will go back to being\ngreen, but when I first create it,\n\n534\n00:29:40.140 --> 00:29:43.810\nin our catch, it is blue and\n\n535\n00:29:43.810 --> 00:29:48.160\nthen when we load it,\nwhat is it when we load it?\n\n536\n00:29:48.160 --> 00:29:50.850\nI actually wanna be sure that\nwhat I'm saying is correct here.\n\n537\n00:29:50.850 --> 00:29:56.990\nSo when we create a blue car is when\nwe're catching there not being a file,\n\n538\n00:29:56.990 --> 00:29:58.540\nand when we press N it\ncreates a green car.\n\n539\n00:29:58.540 --> 00:30:00.510\nSo that's why that was happening,\njust to be clear.\n\n540\n00:30:00.510 --> 00:30:04.470\nI don't want to mislead you based on\nthe work that we've already done.\n\n541\n00:30:04.470 --> 00:30:05.595\nBut yeah,\nI think everything here is working.\n\n542\n00:30:05.595 --> 00:30:09.456\nAgain, we've got that situation where if\nthere is no car at all it's just gonna\n\n543\n00:30:09.456 --> 00:30:11.140\ncreate us a blue one in the center.\n\n544\n00:30:11.140 --> 00:30:13.600\nAnd it will create an entity\nin the bottom left.\n\n545\n00:30:13.600 --> 00:30:16.670\nIf we press the N key at any point in\nthe execution it will sort of create a new\n\n546\n00:30:16.670 --> 00:30:18.420\ngame, like everything we've done.\n\n547\n00:30:18.420 --> 00:30:21.870\nPut a new entity in the bottom left,\nour car in the center.\n\n548\n00:30:21.870 --> 00:30:27.300\nAnd we also can press ESC to save our game\nat any time and just quit to the desktop.\n\n549\n00:30:27.300 --> 00:30:32.639\nWhere it will load or save all of\nthe serialized entities to that\n\n550\n00:30:32.639 --> 00:30:38.120\nsavedgame.ser file, which we can delete\nif we want to start from a blank slate.\n\n551\n00:30:38.120 --> 00:30:39.616\nBut if I refresh the work space,\n\n552\n00:30:39.616 --> 00:30:43.230\nsince I did press ESC there\nshould be a new savegame.ser.\n\n553\n00:30:43.230 --> 00:30:44.030\nDid I press ESC?\n\n554\n00:30:44.030 --> 00:30:44.540\nMaybe I didn't.\n\n555\n00:30:46.660 --> 00:30:50.520\nOkay, so let's just create new game, and\n\n556\n00:30:50.520 --> 00:30:54.490\nthen If we refresh our work space\nthere will be a new one in there.\n\n557\n00:30:55.530 --> 00:30:57.295\nSavegame.ser, just like that.\n\n558\n00:30:57.295 --> 00:30:58.990\nAnd again, you can open it up and\nlook inside.\n\n559\n00:31:00.170 --> 00:31:03.200\nThe more entities you have, the longer\nthis file should be, I guess, right?\n\n560\n00:31:03.200 --> 00:31:04.354\nJust because it's an array list,\n\n561\n00:31:04.354 --> 00:31:08.970\nit does actually have to store all\nof that data one way or another.\n\n562\n00:31:08.970 --> 00:31:10.280\nSo I think that's about it.\n\n563\n00:31:10.280 --> 00:31:13.550\n&gt;&gt; Well Mark, you've definitely\ntaken us on an interesting journey\n\n564\n00:31:13.550 --> 00:31:16.540\napplying some entrepreneurial\nprinciples in order to build a game.\n\n565\n00:31:16.540 --> 00:31:20.050\nNow we did have to pull in some\nhelp through Opengl bindings and\n\n566\n00:31:20.050 --> 00:31:23.750\nthings like that, but that's just\nthat's actually a very common practice.\n\n567\n00:31:23.750 --> 00:31:25.740\nI actually need to render\nthings to the screen.\n\n568\n00:31:25.740 --> 00:31:27.850\nYou don't necessarily want\nto do that all by hand,\n\n569\n00:31:27.850 --> 00:31:32.230\nbut we've seen how to use interfaces,\nhow to use inheritance.\n\n570\n00:31:32.230 --> 00:31:34.932\nWe've got the entire gambit of object or\n\n571\n00:31:34.932 --> 00:31:36.900\nentrepreneurial principles\naround here in making this game.\n\n572\n00:31:36.900 --> 00:31:41.520\nBut it looks like we have a done game,\nright, software's never actually done.\n\n573\n00:31:41.520 --> 00:31:44.210\nBut that does not mean\nwe are done with Java,\n\n574\n00:31:44.210 --> 00:31:47.830\nso definitely join us for,\nwell, future topics.\n\n575\n00:31:47.830 --> 00:31:50.440\nBut for now we're gonna go ahead and\nsign off for DevProTV.\n\n576\n00:31:50.440 --> 00:31:52.450\nI've been your host Justin Dennison.\n\n577\n00:31:52.450 --> 00:31:53.120\n&gt;&gt; Mark Davis.\n\n578\n00:31:53.120 --> 00:31:55.285\n&gt;&gt; And we'll see you next time.\n\n579\n00:31:55.285 --> 00:31:59.761\n[MUSIC]\n\n",
          "vimeoId": "228423333"
        },
        {
          "description": "In this episode, Justin and Mark explore the network libraries in Java. Mark demonstrates writing a simple HTTP server using the Java Standard Library.",
          "length": "1379",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-26-java_http_server-080317-PGM.00_41_14_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-26-java_http_server-080317-PGM.00_41_14_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-26-java_http_server-080317-PGM.00_41_14_11.Still001-sm.jpg",
          "title": "Java HTTP Server",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.713 --> 00:00:16.421\n&gt;&gt; Greetings, everyone, and welcome to\nanother exciting episode of DevPro TV.\n\n3\n00:00:16.421 --> 00:00:18.370\nI'm your host, Justin Dennison and\n\n4\n00:00:18.370 --> 00:00:21.310\nin today's episode, we're continuing\non with our Java journey, and\n\n5\n00:00:21.310 --> 00:00:24.880\nwell, we're gonna experience\nsomething near and dear to my heart.\n\n6\n00:00:24.880 --> 00:00:27.630\nWe're diving into the web world,\nthe network world.\n\n7\n00:00:27.630 --> 00:00:30.270\nNot actual physical network\ninfrastructure, but\n\n8\n00:00:30.270 --> 00:00:32.450\nprogramming network interfaces.\n\n9\n00:00:32.450 --> 00:00:34.480\nSo that's always fun and\n\n10\n00:00:34.480 --> 00:00:36.890\nhere to help us along in that\nvery endeavor is Mr. Mark Davis.\n\n11\n00:00:36.890 --> 00:00:37.670\nHow are you doing today, Mark?\n\n12\n00:00:37.670 --> 00:00:38.547\n&gt;&gt; Pretty good.\n\n13\n00:00:38.547 --> 00:00:40.869\n&gt;&gt; Mark,\nI'm always glad to hear that you're good.\n\n14\n00:00:40.869 --> 00:00:43.914\nOne day I'm afraid that you're gonna go,\nI'm absolutely horrible, Justin,\n\n15\n00:00:43.914 --> 00:00:44.957\nI'm sorry that you asked.\n\n16\n00:00:44.957 --> 00:00:51.308\n[CROSSTALK] But\nwhat are we actually gonna do today?\n\n17\n00:00:51.308 --> 00:00:54.564\n&gt;&gt; So yeah,\nwe built this server socket class in Java,\n\n18\n00:00:54.564 --> 00:00:57.780\nwe're gonna be instantiating\na copy of that.\n\n19\n00:00:57.780 --> 00:01:02.310\nit's gonna take in a port basically that\nwe're gonna be hosting it on, and then in\n\n20\n00:01:02.310 --> 00:01:06.360\nour favorite web browser, Google Chrome,\nyou could use Firefox, or whatever.\n\n21\n00:01:06.360 --> 00:01:07.879\nWe're gonna be loading that webpage.\n\n22\n00:01:07.879 --> 00:01:13.850\nIt's gonna be on the local host IP address\nwhich is actually just 127001, that's sort\n\n23\n00:01:13.850 --> 00:01:18.938\nof the loop back IP, if you sort of know\nthe way networks are generally working.\n\n24\n00:01:18.938 --> 00:01:22.670\nSo we're gonna be hosting\non that IP port 2017,\n\n25\n00:01:22.670 --> 00:01:27.690\nI just picked a random number but\nit's the year, so why not, right?\n\n26\n00:01:27.690 --> 00:01:32.460\nSo here on our code we've got this\nsocket server class I've made,\n\n27\n00:01:32.460 --> 00:01:34.140\nwe are importing server socket.\n\n28\n00:01:35.270 --> 00:01:37.430\nIt'll work anyway if you\njust do Ctrl Shift O,\n\n29\n00:01:37.430 --> 00:01:39.440\nit'll do all your imports for you.\n\n30\n00:01:39.440 --> 00:01:47.500\nSo let's just do final int PORT all caps,\nequals 2017, like that.\n\n31\n00:01:49.080 --> 00:01:53.600\nAnd that's just our, it's a final,\nit doesn't need to change.\n\n32\n00:01:53.600 --> 00:01:56.260\nWe're all gonna be hosting on\nthe same port, no matter what.\n\n33\n00:01:56.260 --> 00:02:03.590\nAnd let's do ServerSocket\nserver = New ServerSocket.\n\n34\n00:02:03.590 --> 00:02:06.720\nSo we already imported that and\nwe just have to pass in\n\n35\n00:02:06.720 --> 00:02:09.400\nas a constrictor argument the port\nthat we're hosting it on.\n\n36\n00:02:09.400 --> 00:02:10.954\nSo we've got that now.\n\n37\n00:02:10.954 --> 00:02:14.181\nNow we have to sort of\nextract some streams, but\n\n38\n00:02:14.181 --> 00:02:17.070\nI'm actually gonna be inside the loop.\n\n39\n00:02:17.070 --> 00:02:20.306\nSo for now,\nlet's just do system.err.println.\n\n40\n00:02:20.306 --> 00:02:23.670\nI want it in red text that's why I'm\nprinting to the error stream instead of\n\n41\n00:02:23.670 --> 00:02:24.900\nthe out stream.\n\n42\n00:02:24.900 --> 00:02:32.370\nThat I'm just gonna put \"Server hosting\non port\" and then PORT like that.\n\n43\n00:02:32.370 --> 00:02:35.561\nSo we've got sort of a nice output that\ncan tell us okay, this is started,\n\n44\n00:02:35.561 --> 00:02:38.443\nwe can now, we should now be able\nto access it from which ever client\n\n45\n00:02:38.443 --> 00:02:39.791\nwe're trying to load it from.\n\n46\n00:02:42.695 --> 00:02:46.186\nSo we've got System.err.println,\nso we want a buffered reader and\n\n47\n00:02:46.186 --> 00:02:47.200\na buffered writer.\n\n48\n00:02:47.200 --> 00:02:55.260\nWe want in, we want a BufferedWriter out.\n\n49\n00:02:55.260 --> 00:03:00.049\nSo our in is going to be\nnew BufferedReader and\n\n50\n00:03:00.049 --> 00:03:06.486\nwe're gonna construct that from\na new input stream reader,\n\n51\n00:03:12.907 --> 00:03:15.090\nAnd inside of that,\nwe're gonna give it the client socket.\n\n52\n00:03:16.410 --> 00:03:18.830\nWhich we are gonna\ncreate in just a second.\n\n53\n00:03:18.830 --> 00:03:21.100\nSorry I haven't done that yet,\nbut we'll get to it.\n\n54\n00:03:21.100 --> 00:03:25.600\nSo new BufferedWriter,\n\n55\n00:03:25.600 --> 00:03:30.532\nnew OutputStreamWriter.\n\n56\n00:03:35.491 --> 00:03:38.103\nAnd I think we're also constructing\nthat from ClientSocket.\n\n57\n00:03:38.103 --> 00:03:41.390\nAgain, so we've got this server\nsocket that's outwards facing.\n\n58\n00:03:41.390 --> 00:03:44.620\nAnd we need to have a client that is\n\n59\n00:03:44.620 --> 00:03:48.710\nable to sort of accept that server and\ntake input from it.\n\n60\n00:03:48.710 --> 00:03:52.460\nSo I'm just gonna do a while\nloop that's gonna run forever.\n\n61\n00:03:52.460 --> 00:03:56.460\nWhile true, and then we would bail\nout of it whenever we would want to.\n\n62\n00:03:56.460 --> 00:03:58.220\nWe'd do our imports.\n\n63\n00:03:58.220 --> 00:04:00.160\nSo we've still got errors on that line.\n\n64\n00:04:00.160 --> 00:04:02.219\nSo we need a socket,\nthis is just a socket,\n\n65\n00:04:02.219 --> 00:04:04.068\nclient socket equals server socket.\n\n66\n00:04:06.320 --> 00:04:12.075\nAll right = server.accept.\n\n67\n00:04:12.075 --> 00:04:17.030\nSo we've got this separate client socket\nthat is distinct from the server socket,\n\n68\n00:04:17.030 --> 00:04:19.110\nbut we're calling that accept on it,\nright?\n\n69\n00:04:19.110 --> 00:04:23.680\nSo we're getting a new socket called this\nclient socket, and this server.accept\n\n70\n00:04:23.680 --> 00:04:27.360\nmethod listens for a connection to\nbe made to a socket and accept it.\n\n71\n00:04:27.360 --> 00:04:30.030\nSo the method blocks until\na connection is made.\n\n72\n00:04:30.030 --> 00:04:35.120\nSo there's nothing happening in this\ncode until we accept a new connection.\n\n73\n00:04:35.120 --> 00:04:37.470\nGenerally, you would want to\ncreate this in a new thread.\n\n74\n00:04:37.470 --> 00:04:40.150\nAnd you would want to handle\nall requests for a specific\n\n75\n00:04:40.150 --> 00:04:43.350\nclient in a specific thread, but\nwe're not gonna worry about that today.\n\n76\n00:04:43.350 --> 00:04:45.370\nWe're just gonna sort of do it one loop.\n\n77\n00:04:45.370 --> 00:04:48.870\nWe really only have to worry about\none client for this test scenario.\n\n78\n00:04:48.870 --> 00:04:51.640\nSo you got that client socket now.\n\n79\n00:04:51.640 --> 00:04:57.120\nAre we constructing it correctly,\nnew InputStreamReader[clientSocket].\n\n80\n00:04:57.120 --> 00:04:58.490\nIs there another argument I'm missing?\n\n81\n00:05:00.160 --> 00:05:04.704\nChange type of clientSocket\nto InputStream.\n\n82\n00:05:04.704 --> 00:05:05.661\nOkay.\n\n83\n00:05:05.661 --> 00:05:13.075\n[INAUDIBLE]\n&gt;&gt; So Mark, I wonder on that\n\n84\n00:05:13.075 --> 00:05:17.670\nsocket if there's a way, cuz I heard you\nearlier say that it needs an input stream?\n\n85\n00:05:17.670 --> 00:05:20.820\nI wonder if there's on that socket there's\na method that we're [CROSSTALK] an input\n\n86\n00:05:20.820 --> 00:05:22.086\nstream representation of that?\n\n87\n00:05:22.086 --> 00:05:24.730\n&gt;&gt; Yeah, so\nhere I do have that now up on my computer.\n\n88\n00:05:24.730 --> 00:05:28.700\nSo we've got clientSocket, and again,\nthere's a whole bunch of methods for that.\n\n89\n00:05:28.700 --> 00:05:31.160\nWe can do the one that's getInputStream.\n\n90\n00:05:31.160 --> 00:05:33.850\nNo args,\nthat'll return the correct input stream.\n\n91\n00:05:33.850 --> 00:05:36.602\nAnd there's a similar one for\ngetOutputStream.\n\n92\n00:05:36.602 --> 00:05:38.850\nSo now we've got the correct\ndata types for that.\n\n93\n00:05:39.940 --> 00:05:44.680\nWe should print in here right\nafter we do server.accept.\n\n94\n00:05:44.680 --> 00:05:52.070\nWe're gonna wanna do an outline, print\noutline I guess, is what I meant to say.\n\n95\n00:05:52.070 --> 00:05:55.446\nAnd we're gonna want to\nindicate new client connected,\n\n96\n00:05:55.446 --> 00:05:57.850\nsomething to that regard that tells us.\n\n97\n00:05:57.850 --> 00:05:59.480\nOkay, so at this point in the code,\n\n98\n00:05:59.480 --> 00:06:03.700\nagain when it gets to this line it's gonna\nwait until the server accepts this client.\n\n99\n00:06:05.070 --> 00:06:07.400\nFirst it's gonna wait for\na client to try to connect.\n\n100\n00:06:07.400 --> 00:06:10.180\nA client's gonna connect\nthrough this method and\n\n101\n00:06:10.180 --> 00:06:12.090\nit's gonna be linked to the server.\n\n102\n00:06:12.090 --> 00:06:16.710\nAnd then our server is gonna\nprint a new print line.\n\n103\n00:06:16.710 --> 00:06:18.750\nNew client connected.\n\n104\n00:06:18.750 --> 00:06:21.360\nAnd then it's gonna establish\nthe streams that we've talked about.\n\n105\n00:06:21.360 --> 00:06:24.640\nSo we've got that buffered reader and\nthat buffered writer.\n\n106\n00:06:26.585 --> 00:06:31.180\nNow we're gonna do a string asn,\nso this is for the input, so\n\n107\n00:06:31.180 --> 00:06:33.235\nwe're gonna wanna do a while loop.\n\n108\n00:06:33.235 --> 00:06:40.500\nSo while s = in.readline\n\n109\n00:06:40.500 --> 00:06:46.450\nis not equal to null.\n\n110\n00:06:46.450 --> 00:06:50.067\nI think I messed up a parenthesis there,\nyeah.\n\n111\n00:06:50.067 --> 00:06:53.657\nSo this input stream here buffered reader,\n\n112\n00:06:53.657 --> 00:06:59.200\nwe're saying while that is,\nis this just because I forgot the day.\n\n113\n00:07:00.230 --> 00:07:02.220\nWorks like that okay it is, good.\n\n114\n00:07:02.220 --> 00:07:06.620\nSo I've got that string s, and\nit's setting that equal to n.readLine.\n\n115\n00:07:06.620 --> 00:07:08.630\nI could do those in\nseparate lines I believe.\n\n116\n00:07:08.630 --> 00:07:12.850\nBut while that is equal to null,\nwe're gonna be doing this while check.\n\n117\n00:07:12.850 --> 00:07:20.860\nSo I could do in here s = in.readLine\nlike that might be a little more clear.\n\n118\n00:07:20.860 --> 00:07:24.361\nBut we also don't want it to be\nnull the first time we do it, so\n\n119\n00:07:24.361 --> 00:07:26.578\nI'm gonna do n.real line like that.\n\n120\n00:07:26.578 --> 00:07:27.150\nThere.\n\n121\n00:07:27.150 --> 00:07:29.200\nAnd, you know,\nyou could do it that way, too.\n\n122\n00:07:29.200 --> 00:07:30.970\nI'm just gonna leave it all on one line.\n\n123\n00:07:30.970 --> 00:07:33.940\nBut that's what we're doing, we're just\nsort of doing two things in one line,\n\n124\n00:07:33.940 --> 00:07:34.990\nkilling two birds with one stone.\n\n125\n00:07:34.990 --> 00:07:40.927\nSo, we're setting this equal to s\nequal to that stream read line,\n\n126\n00:07:40.927 --> 00:07:44.030\nand then we're checking to see\nif it is not equal to null.\n\n127\n00:07:44.030 --> 00:07:48.251\nAnd eventually it will be, and then we'll\ndo the output to the client, but this\n\n128\n00:07:48.251 --> 00:07:52.483\nis sort of all the information that our\nclient is sending to the server, right?\n\n129\n00:07:52.483 --> 00:07:55.907\nBecause it's an input stream, and we're\nprogramming the server side right now.\n\n130\n00:07:55.907 --> 00:08:00.896\nSo information going from the client to\nthe server will be Denoted as being part\n\n131\n00:08:00.896 --> 00:08:05.460\nof this buffered reader in, and\nnot the buffered rider out.\n\n132\n00:08:05.460 --> 00:08:07.950\nSo we're just gonna print it, I guess.\n\n133\n00:08:07.950 --> 00:08:09.900\n&gt;&gt; Hey, Mark,\ncan we back up just a little bit?\n\n134\n00:08:09.900 --> 00:08:13.790\nWhy are we using this while loop to\nread in these lines from the buffered\n\n135\n00:08:13.790 --> 00:08:15.140\nreader at this point?\n\n136\n00:08:15.140 --> 00:08:16.425\n&gt;&gt; Yes.\nSo we've got two-way stream\n\n137\n00:08:16.425 --> 00:08:17.663\ncommunication happening, right?\n\n138\n00:08:17.663 --> 00:08:19.800\nThere's a client side and\nthere's a server side.\n\n139\n00:08:19.800 --> 00:08:22.790\nSo anything going from the client to the\nserver is gonna be handled by the server\n\n140\n00:08:22.790 --> 00:08:24.040\nas an input stream.\n\n141\n00:08:24.040 --> 00:08:26.969\nAnd anything going the opposite ways\nis gonna be the buffered writer.\n\n142\n00:08:26.969 --> 00:08:30.090\nThe output stream, that's going\nfrom the server to the client.\n\n143\n00:08:30.090 --> 00:08:32.172\nSo we have to handle sort\nof the request first.\n\n144\n00:08:32.172 --> 00:08:35.255\nWhatever the client sends to the server,\nw 're just gonna print it just so\n\n145\n00:08:35.255 --> 00:08:37.330\nthat we sort of know what's going on.\n\n146\n00:08:37.330 --> 00:08:39.082\nWe're gonna do that\ninside this while loop.\n\n147\n00:08:39.082 --> 00:08:42.806\nAnd eventually, we're gonna break, we're\ngonna terminate once there's nothing left\n\n148\n00:08:42.806 --> 00:08:44.531\nthat the client is sending to the server.\n\n149\n00:08:44.531 --> 00:08:48.916\nAnd then we're gonna do the other side\nof the equation which is printing out\n\n150\n00:08:48.916 --> 00:08:53.927\nwhatever HTML essentially, cuz we're only\ndoing HTML, whatever HTML we're going\n\n151\n00:08:53.927 --> 00:08:58.755\nto print it to the output stream, we're\njust gonna print it to the output stream.\n\n152\n00:08:58.755 --> 00:09:03.500\nAnd then the client will render that\nas HTML code, and we should be good.\n\n153\n00:09:03.500 --> 00:09:06.410\nSo here in our code,\nwe've got this while loop I started.\n\n154\n00:09:06.410 --> 00:09:08.280\nAgain, this is an assignment here.\n\n155\n00:09:08.280 --> 00:09:10.330\nThere's a single equals, so\nthat's how you can tell.\n\n156\n00:09:10.330 --> 00:09:13.360\nSo s is being assigned to in.readLine.\n\n157\n00:09:13.360 --> 00:09:15.390\nI wanna do that at least once in this.\n\n158\n00:09:15.390 --> 00:09:19.560\nSo I could either do a do while loop and\nthen check if it's not equal to null, or\n\n159\n00:09:19.560 --> 00:09:22.100\nI could do it the way I have\nright now just all in one line.\n\n160\n00:09:22.100 --> 00:09:24.090\nI'm gonna leave it as it is.\n\n161\n00:09:24.090 --> 00:09:28.363\nSo we could do System.out.printline.\n\n162\n00:09:28.363 --> 00:09:30.250\nPrintline.\n\n163\n00:09:30.250 --> 00:09:31.930\nAnd we're gonna print s.\n\n164\n00:09:31.930 --> 00:09:33.940\nAnd then one more thing.\n\n165\n00:09:33.940 --> 00:09:38.920\nSo if s dot is empty,\nthat's just a boolean check.\n\n166\n00:09:38.920 --> 00:09:41.445\nIf it is, we're gonna break out of our\nwhile loop cuz we no longer really have\n\n167\n00:09:41.445 --> 00:09:42.123\nanything to print.\n\n168\n00:09:42.123 --> 00:09:47.800\nSo that's one side of\nthe equation now that we've done.\n\n169\n00:09:47.800 --> 00:09:48.770\nI've got this code here.\n\n170\n00:09:48.770 --> 00:09:51.110\nI'm actually, okay, yeah that's fine.\n\n171\n00:09:53.970 --> 00:09:54.633\nGo through and redo that, yeah.\n\n172\n00:09:54.633 --> 00:09:58.680\nSo we're gonna start\ndoing our outputs now.\n\n173\n00:09:58.680 --> 00:10:02.540\nI have this one already, because it didn't\nget printed completely in the outline.\n\n174\n00:10:02.540 --> 00:10:03.434\nSo I want to have it.\n\n175\n00:10:03.434 --> 00:10:09.880\nWe're gonna add a throws IOException to\nthe top of our main method real quick.\n\n176\n00:10:09.880 --> 00:10:14.570\nThat's gonna allow us to actually use\nthese streams without worrying whether or\n\n177\n00:10:14.570 --> 00:10:16.637\nnot something happen.\n\n178\n00:10:18.540 --> 00:10:21.310\nIf there is an exception,\nwe'd want it to be handled or thrown.\n\n179\n00:10:21.310 --> 00:10:22.610\nSo we're just gonna throw it.\n\n180\n00:10:22.610 --> 00:10:24.060\nNot gonna bother with\nit too much right now.\n\n181\n00:10:25.100 --> 00:10:28.373\nSo first, we have to print this\nlittle header at the top of our\n\n182\n00:10:33.021 --> 00:10:35.840\nSo the first output is gonna be HTTP.\n\n183\n00:10:38.000 --> 00:10:39.310\nThis kind of slash?\n\n184\n00:10:39.310 --> 00:10:40.720\nIs that a forward slash or\na back slash key?\n\n185\n00:10:40.720 --> 00:10:43.330\n&gt;&gt; I think that's a forward,\nyou are asking the wrong,\n\n186\n00:10:43.330 --> 00:10:44.200\nI always get those mixed.\n\n187\n00:10:44.200 --> 00:10:45.053\n&gt;&gt; Yeah, I mix those up.\n\n188\n00:10:45.053 --> 00:10:47.360\n&gt;&gt; I'm like the one next to\nthe shift key is how I do it.\n\n189\n00:10:47.360 --> 00:10:53.541\n&gt;&gt; Yeah,\nit's the one next to the shift key, guys.\n\n190\n00:10:53.541 --> 00:10:54.120\nSo we do 1.0 200, okay.\n\n191\n00:10:54.120 --> 00:10:55.980\nThen we gotta do slash r.\n\n192\n00:10:55.980 --> 00:10:58.450\nThis kind of slash, sorry, /n.\n\n193\n00:10:58.450 --> 00:11:02.080\nSo this is the way that you do\na carriage return in this HTML,\n\n194\n00:11:02.080 --> 00:11:05.060\ncuz you gotta do this Escape+R and\nthis Escape+N.\n\n195\n00:11:05.060 --> 00:11:08.540\nYou gotta do both of them in order\nto do a full carriage return.\n\n196\n00:11:08.540 --> 00:11:12.080\nI also do have the slash wrong,\nit's this slash, sorry.\n\n197\n00:11:12.080 --> 00:11:14.340\nEscape slash is the one that\nis above the Enter key,\n\n198\n00:11:14.340 --> 00:11:15.630\nnot the one that's by the Shift key.\n\n199\n00:11:15.630 --> 00:11:16.490\nWe've got both going on.\n\n200\n00:11:16.490 --> 00:11:18.410\n&gt;&gt; So the first slash is a forward slash.\n\n201\n00:11:18.410 --> 00:11:19.350\n&gt;&gt; Yeah.\n&gt;&gt; And\n\n202\n00:11:19.350 --> 00:11:21.390\nthen the other ones are back slashes.\n\n203\n00:11:21.390 --> 00:11:24.810\nSo people are are trying to tell me to\nthink about leaning forward or backwards.\n\n204\n00:11:24.810 --> 00:11:26.950\nI'm like, yeah, but\nwhich direction are they facing.\n\n205\n00:11:26.950 --> 00:11:29.420\nSo I always get them mixed up and\nI have to look them up.\n\n206\n00:11:29.420 --> 00:11:30.790\nSo we got both slashes.\n\n207\n00:11:30.790 --> 00:11:35.430\nThe one is for escape characters having\ncarriage returns and new line characters.\n\n208\n00:11:35.430 --> 00:11:40.950\nThe other is actually the HTTP/1.0\nwhich determines the HTTP version\n\n209\n00:11:40.950 --> 00:11:43.010\nthat the server is serving back out.\n\n210\n00:11:43.010 --> 00:11:45.207\n&gt;&gt; Yeah, so we're just serving HTTP 1.0.\n\n211\n00:11:45.207 --> 00:11:49.430\nKind of old school, I think, but\nit's fine for our purposes today.\n\n212\n00:11:49.430 --> 00:11:51.560\nSo we've got that first\nline that we need to have,\n\n213\n00:11:51.560 --> 00:11:54.240\nand then we start printing\nwhat our HTML contents are.\n\n214\n00:11:54.240 --> 00:11:55.860\nSo I open up the HTML tag.\n\n215\n00:11:55.860 --> 00:11:58.090\nI don't know how much you\nguys know about HTML, but\n\n216\n00:11:58.090 --> 00:12:00.240\nif you don't I'm gonna\nexplain it just briefly here.\n\n217\n00:12:00.240 --> 00:12:02.892\nSo this is sort of what you would\nput at the top of every document.\n\n218\n00:12:02.892 --> 00:12:05.430\nAnd then at the end you would\nput this same thing, but\n\n219\n00:12:05.430 --> 00:12:09.170\nwith a slash there to close the tag.\n\n220\n00:12:09.170 --> 00:12:11.650\nAnd then you open up the head, and\n\n221\n00:12:11.650 --> 00:12:14.380\nthen inside the head we're\ngonna do a title called test.\n\n222\n00:12:14.380 --> 00:12:17.340\nSo that's just sort of the title that's\ngonna show when you look at the tab\n\n223\n00:12:18.440 --> 00:12:20.760\nof the page is inside of this title block.\n\n224\n00:12:20.760 --> 00:12:25.590\nSo then we close the title, and then I'm\ngonna put this link rel shortcut icon.\n\n225\n00:12:25.590 --> 00:12:31.980\nAnd this is the way that you\ndo a favorite icon in HTML.\n\n226\n00:12:31.980 --> 00:12:35.560\nSo, the relation is to\nthe shortcut icon thing.\n\n227\n00:12:36.650 --> 00:12:38.760\nThat's what I'm sort of declaring this is.\n\n228\n00:12:38.760 --> 00:12:42.460\nI do have to escape these quotes by\nthe way, that's what this is right here.\n\n229\n00:12:42.460 --> 00:12:45.120\nThis is quote within HTML itself.\n\n230\n00:12:45.120 --> 00:12:48.586\nAnd so, if I don't put this escape\ncharacter JAVA is going to think that I'm\n\n231\n00:12:48.586 --> 00:12:50.655\nactually trying to end or\nbegin a quote here.\n\n232\n00:12:50.655 --> 00:12:52.074\nThat is not what I want.\n\n233\n00:12:52.074 --> 00:12:53.170\nI want to be very clear about that.\n\n234\n00:12:53.170 --> 00:12:55.235\nThis is an escaped quote.\n\n235\n00:12:55.235 --> 00:12:57.080\nThat's why I have these slashes here.\n\n236\n00:12:57.080 --> 00:13:00.740\nAnd so the quotes are actually\nbeing sent through HTML.\n\n237\n00:13:00.740 --> 00:13:01.890\nGotta be very clear on that.\n\n238\n00:13:01.890 --> 00:13:05.130\nI know this is sort of a long line,\nbut it got cut off in the outline.\n\n239\n00:13:05.130 --> 00:13:08.015\nAnd so I have to, I can't type it,\nI have to just go through it.\n\n240\n00:13:08.015 --> 00:13:11.730\nSo href, this is how you do a link.\n\n241\n00:13:11.730 --> 00:13:14.370\nSo to go back,\n\n242\n00:13:14.370 --> 00:13:19.790\nthis shortcut icon is linked to this\npicture, which is from Wiktionary.\n\n243\n00:13:19.790 --> 00:13:25.360\nIt's just the Wiktionary fave icon,\nfavorite icon, the URL to that.\n\n244\n00:13:25.360 --> 00:13:27.800\nYou can use whichever image URL you want.\n\n245\n00:13:27.800 --> 00:13:31.050\nAnd then I do another escaped end quote.\n\n246\n00:13:31.050 --> 00:13:35.469\nAnd then I, this is the tag,\nor the slash to end the tag.\n\n247\n00:13:35.469 --> 00:13:37.412\nSorry, this is not an escape.\n\n248\n00:13:37.412 --> 00:13:39.467\nYou'll notice it's facing the other way.\n\n249\n00:13:39.467 --> 00:13:41.570\nAnd then I close out of that tag.\n\n250\n00:13:41.570 --> 00:13:46.493\nSo this whole big tag was this link tag,\nright?\n\n251\n00:13:46.493 --> 00:13:51.350\nSo the link tags ends and\nthen I close the head, right?\n\n252\n00:13:51.350 --> 00:13:54.920\nSo now I'm still within this HTML,\nbut I'm outside of this head now.\n\n253\n00:13:54.920 --> 00:13:59.560\nAnd I can now do the body of\nwhatever gonna print, right?\n\n254\n00:13:59.560 --> 00:14:02.410\nSo we have an open up quote.\n\n255\n00:14:04.170 --> 00:14:06.502\nSo I think I do open up body, right?\n\n256\n00:14:06.502 --> 00:14:07.199\nIs that what I had?\n\n257\n00:14:07.199 --> 00:14:11.180\nYeah, open up body.\n\n258\n00:14:11.180 --> 00:14:13.210\nAnd then we'll do h1.\n\n259\n00:14:13.210 --> 00:14:14.760\nSo h1 means header size 1.\n\n260\n00:14:14.760 --> 00:14:16.360\nIt's the biggest.\n\n261\n00:14:16.360 --> 00:14:19.530\nThey go from h1, I think all the way\nthrough h6, do you know, yeah?\n\n262\n00:14:19.530 --> 00:14:22.710\n&gt;&gt; Yeah, it's h1 to six,\nand you can try seven, but\n\n263\n00:14:22.710 --> 00:14:25.770\nit doesn't behave like you expect it to.\n\n264\n00:14:25.770 --> 00:14:27.980\nSo h1 through six is what you get.\n\n265\n00:14:27.980 --> 00:14:30.280\n&gt;&gt; Okay, h1 through six is what you get.\n\n266\n00:14:30.280 --> 00:14:32.162\nSo we're gonna,\nI'm also gonna go ahead and\n\n267\n00:14:32.162 --> 00:14:35.630\ndo a close tag there to remind\nmyself that I need to close it.\n\n268\n00:14:35.630 --> 00:14:38.490\nBut I'm just gonna put Large Text\nhere just so that we have,\n\n269\n00:14:38.490 --> 00:14:42.710\nwe'll know that this text\nis supposed to be large.\n\n270\n00:14:42.710 --> 00:14:44.190\nWe'll do some more tags.\n\n271\n00:14:44.190 --> 00:14:45.800\nSo do we need to carriage return?\n\n272\n00:14:48.500 --> 00:14:49.480\nI guess not.\n\n273\n00:14:49.480 --> 00:14:51.900\nSo since we're opening a new tag, I don't\nthink we need to carriage return yet.\n\n274\n00:14:51.900 --> 00:14:54.160\nBut I'm gonna do &lt;p&gt; and\nthen I'm gonna do &lt;/p&gt;.\n\n275\n00:14:54.160 --> 00:14:56.610\nSo this is normal size text, right?\n\n276\n00:14:56.610 --> 00:15:02.120\nSo I can just do,\nnormal size text, like that.\n\n277\n00:15:02.120 --> 00:15:03.619\nA couple more things I\nwas wanting to print.\n\n278\n00:15:03.619 --> 00:15:06.836\nSo now let's do a carriage return, right?\n\n279\n00:15:11.613 --> 00:15:13.000\nSorry, I don't wanna print all those.\n\n280\n00:15:13.000 --> 00:15:14.020\nI don't want all those parameters.\n\n281\n00:15:14.020 --> 00:15:18.690\nI'm just doing the basic one,\nso \\r\\n like that.\n\n282\n00:15:18.690 --> 00:15:20.090\nAnd then we're gonna do a link.\n\n283\n00:15:20.090 --> 00:15:22.390\nSo I wanna show that you\ncan do links in HTML too.\n\n284\n00:15:22.390 --> 00:15:25.400\nAgain, it will take any sort of HTML.\n\n285\n00:15:25.400 --> 00:15:29.120\nHowever much HTML you guys know,\nit'll do all of it, right?\n\n286\n00:15:29.120 --> 00:15:32.550\nSo any tag that ordinarily\nworks in HTML will work here.\n\n287\n00:15:32.550 --> 00:15:37.620\nSo we're gonna do a for\na hyperlink, href equals,\n\n288\n00:15:37.620 --> 00:15:40.280\nand then we need an escape, for the quote.\n\n289\n00:15:40.280 --> 00:15:46.148\nSo, it's this kind of slash,\nso we've escaped that quote.\n\n290\n00:15:46.148 --> 00:15:54.201\nHttp://google.com.\n\n291\n00:15:54.201 --> 00:15:57.197\nSo I'm just gonna send this\nlink to Google.com, and\n\n292\n00:15:57.197 --> 00:15:59.406\nthen I'm gonna escape another quote.\n\n293\n00:15:59.406 --> 00:16:01.443\nSo like that.\n\n294\n00:16:01.443 --> 00:16:06.534\nAnd then I have to do whatever\nthe text is for it, so\n\n295\n00:16:06.534 --> 00:16:11.850\noutside of that,\nthat open I will put google link.\n\n296\n00:16:11.850 --> 00:16:17.360\nSo this is the text that will display and\nthen I close my A block there.\n\n297\n00:16:18.380 --> 00:16:20.790\nNow I'm gonna do something\na little original,\n\n298\n00:16:20.790 --> 00:16:23.850\nI'm just gonna print 15\nlines of the same output.\n\n299\n00:16:23.850 --> 00:16:27.950\nJust to show that again, all this\nJava logic that you've learned before\n\n300\n00:16:27.950 --> 00:16:30.313\ncan be used to print these html pages too.\n\n301\n00:16:30.313 --> 00:16:34.699\nI'm just gonna print straight up 14,\n\n302\n00:16:34.699 --> 00:16:39.601\n15 int i = 0, I is less than 15 I++, so\n\n303\n00:16:39.601 --> 00:16:44.503\nbasic four loop,\nwhat we've done before and\n\n304\n00:16:44.503 --> 00:16:48.763\ninside of it I'm gonna do out.write.\n\n305\n00:16:48.763 --> 00:16:53.872\nAnd to that we're gonna\ncharacter turn again\n\n306\n00:16:53.872 --> 00:16:58.854\n\\R\\nmore lines of text, just like that.\n\n307\n00:16:58.854 --> 00:17:03.444\nAnd so I'm actually gonna do a p tag for\n\n308\n00:17:03.444 --> 00:17:08.610\nthat cuz this is paragraph-sized text and\n\n309\n00:17:08.610 --> 00:17:15.580\nI wasn't currently in an HTML tag before,\noops.\n\n310\n00:17:15.580 --> 00:17:20.493\nSo also inside of that,\nwe wanna close out of the p and\n\n311\n00:17:20.493 --> 00:17:26.760\nthen at the very end we're gonna\nwant to use HTML and body and tags.\n\n312\n00:17:26.760 --> 00:17:32.533\nSo, I guess some other character\nreturn is in order and then let's do,\n\n313\n00:17:32.533 --> 00:17:37.250\nso close out of body and\nthen close out of HTML like that.\n\n314\n00:17:37.250 --> 00:17:40.760\nI don't necessarily know that\nthose tags are necessary for\n\n315\n00:17:40.760 --> 00:17:42.860\ncorrect output but it works fine.\n\n316\n00:17:42.860 --> 00:17:48.596\nSo system.out.printline, we will just\ndo finished sending information.\n\n317\n00:17:53.545 --> 00:17:58.201\nAgain this isn't printing to the stream to\nsend to the client, this is just going to\n\n318\n00:17:58.201 --> 00:18:02.409\ndisplay on the server output so\nthat the server knows that it's finished.\n\n319\n00:18:02.409 --> 00:18:05.905\nOr the person reading the server's\noutput knows that it's finished sending\n\n320\n00:18:05.905 --> 00:18:07.370\ninformation.\n\n321\n00:18:07.370 --> 00:18:11.342\nThen we wanna close up streams,\nso out.close and\n\n322\n00:18:11.342 --> 00:18:15.230\nin.close, this is gonna\nmake sure all of them.\n\n323\n00:18:15.230 --> 00:18:18.220\nI'm actually gonna put this ahead\nof the debug output line just so\n\n324\n00:18:18.220 --> 00:18:20.570\nwe can be sure that all of\nthe information will be set.\n\n325\n00:18:20.570 --> 00:18:22.720\n&gt;&gt; Then Mark,\nyou closed those other two streams,\n\n326\n00:18:22.720 --> 00:18:25.150\nbut shouldn't we also\nclose the client stream?\n\n327\n00:18:25.150 --> 00:18:29.693\n&gt;&gt; Yeah, we can close the client\nsocket stream, so here on my computer,\n\n328\n00:18:29.693 --> 00:18:34.243\nclient socket, is it client socket,\nor client, what did we call it?\n\n329\n00:18:34.243 --> 00:18:39.782\nClient socket okay, Socket.close(),\nset as a string too, we can close it, and\n\n330\n00:18:39.782 --> 00:18:46.280\nthen now, server.close(), I don't think\nthis code is actually gonna be reachable.\n\n331\n00:18:46.280 --> 00:18:49.680\nYeah, I think that's why I'm getting in\nthere okay, so it says unreachable code.\n\n332\n00:18:49.680 --> 00:18:53.530\nAgain, if you had some condition under\nwhich this while loop would stop\n\n333\n00:18:53.530 --> 00:18:56.196\nrunning then eventually,\nyou would wanna close the server stream.\n\n334\n00:18:56.196 --> 00:18:57.840\nIn fact, you would wanna close\nit at this point in time\n\n335\n00:18:57.840 --> 00:19:00.420\nbecause you're not using it anymore,\nyour server is done.\n\n336\n00:19:00.420 --> 00:19:03.680\nUnfortunately, it doesn't really\nwant me to do that because\n\n337\n00:19:03.680 --> 00:19:05.340\nthat code is not reachable.\n\n338\n00:19:05.340 --> 00:19:10.304\nAgain, I've got an infinite wild loop\nthat is just gonna keep going forever,\n\n339\n00:19:10.304 --> 00:19:14.364\nso at no point is the server actually\ngoing to close or shut down,\n\n340\n00:19:14.364 --> 00:19:16.343\nwhich is fine, that's okay.\n\n341\n00:19:16.343 --> 00:19:20.120\nSo that's why we're not closing the server\nstream, just so you guys understand it.\n\n342\n00:19:20.120 --> 00:19:25.891\nAnd then, one more thing in here,\nI actually do need another\n\n343\n00:19:25.891 --> 00:19:31.680\ncharacter return after I print\nthat http mandated thing so.\n\n344\n00:19:31.680 --> 00:19:36.760\nJust in there,\nlet's just do another slash r,\n\n345\n00:19:36.760 --> 00:19:41.540\nslash n, so we've got another character\nturn there and then the closing tags.\n\n346\n00:19:41.540 --> 00:19:44.860\nThis should be good, so\nlet's run our server on Port 2017, oops,\n\n347\n00:19:44.860 --> 00:19:51.260\nI clicked something, okay, back to it.\n\n348\n00:19:51.260 --> 00:19:57.360\nI got it working during the commercial I\nguess, but you'll see if we like that.\n\n349\n00:19:57.360 --> 00:20:02.230\nSo we've got that fave icon from,\nthat I nicked from Wikipedia or\n\n350\n00:20:02.230 --> 00:20:04.810\nWiki, was it Wiktionary?\n\n351\n00:20:04.810 --> 00:20:07.940\nSorry, so that's the Wiktionary fave icon,\n\n352\n00:20:07.940 --> 00:20:12.040\nI just linked to it\ninstead of writing my own.\n\n353\n00:20:12.040 --> 00:20:14.597\nThere's different ways that\nyou can establish a favicon,\n\n354\n00:20:14.597 --> 00:20:18.540\nyou can put it in a specific\nfolder on your machine.\n\n355\n00:20:18.540 --> 00:20:20.720\nYou can link it with a hyperlink,\n\n356\n00:20:20.720 --> 00:20:25.420\nyou can link it with a local link,\nlike a link to the file system.\n\n357\n00:20:25.420 --> 00:20:28.610\nThere's different way to do it but that's\nthe way I've chosen to accomplish it.\n\n358\n00:20:28.610 --> 00:20:32.600\nBut you can see I've got this large\nheading, heading one sized text.\n\n359\n00:20:32.600 --> 00:20:36.671\nI've got normal sized text, I've got a\nGoogle link, and if we click this Open in\n\n360\n00:20:36.671 --> 00:20:40.930\nnew tab, it will take us to the Google\nhomepage like I said it would.\n\n361\n00:20:40.930 --> 00:20:44.260\nAnd then a bunch of lines to text\nthat I'm printing from a for loop.\n\n362\n00:20:44.260 --> 00:20:46.040\nSo if we do view the page source for\n\n363\n00:20:46.040 --> 00:20:50.540\nthis, you can see it's pretty much what\nyou would expect, HTML, head, title.\n\n364\n00:20:50.540 --> 00:20:54.590\nSo test is the title for that, link and\n\n365\n00:20:54.590 --> 00:20:57.540\nthe shortcut icon,\nclose out of the head, right?\n\n366\n00:20:59.060 --> 00:21:04.255\nI might be missing a little thing there,\nI think it worked anyway but\n\n367\n00:21:04.255 --> 00:21:07.914\nstill, yeah,\nit's supposed to be like this.\n\n368\n00:21:07.914 --> 00:21:10.016\n&gt;&gt; Newer browsers are very forgiving\nwhen it comes to parsing HTML.\n\n369\n00:21:10.016 --> 00:21:12.170\n&gt;&gt; Yeah they are.\n\n370\n00:21:12.170 --> 00:21:15.652\n&gt;&gt; I will tell you, old school\nbrowsers and older version of HTML,\n\n371\n00:21:15.652 --> 00:21:18.502\nif you'd done it,\nit'd be like, no, just broke.\n\n372\n00:21:18.502 --> 00:21:23.450\nBut you do have an HTTP server serving\nup HTML that is ultimately written\n\n373\n00:21:23.450 --> 00:21:24.985\nto a stream.\n\n374\n00:21:24.985 --> 00:21:28.550\nThis may not necessarily go with\nthe way you wanna go with building\n\n375\n00:21:28.550 --> 00:21:29.890\nbrand new web applications.\n\n376\n00:21:29.890 --> 00:21:34.500\nHowever, this gives you a taste of what's\navailable in the Java standard library\n\n377\n00:21:34.500 --> 00:21:38.685\nas well as you might encounter\nthese in some older applications.\n\n378\n00:21:38.685 --> 00:21:42.285\nThat maybe you have to maintain as\na Java programmer yourself, now Mark,\n\n379\n00:21:42.285 --> 00:21:44.295\nbefore we get out of here,\nany final thoughts for us?\n\n380\n00:21:44.295 --> 00:21:46.505\n&gt;&gt; I think it's about also yeah,\n\n381\n00:21:46.505 --> 00:21:51.495\nwe can view the source through this page\nbut this is the source html to be clear,\n\n382\n00:21:51.495 --> 00:21:55.675\nthat is being rendered by\nthe browser in this form.\n\n383\n00:21:55.675 --> 00:21:57.595\nSo all of this stuff is,\n\n384\n00:21:57.595 --> 00:22:00.710\nall of this including the tags\nis getting sent to the client.\n\n385\n00:22:00.710 --> 00:22:06.240\nAnd then your web browser is\ngoing to interpret that html into\n\n386\n00:22:06.240 --> 00:22:12.190\nthis actual text with the links marked\nup the way you'd expect this page to be.\n\n387\n00:22:12.190 --> 00:22:14.796\nI think that's probably my final thoughts,\n\n388\n00:22:14.796 --> 00:22:18.705\nso I wanna just be clear of\nthe distinction that we're sending all of\n\n389\n00:22:18.705 --> 00:22:21.393\nthis html tags and\nstuff included in the text.\n\n390\n00:22:21.393 --> 00:22:24.556\nAnd then it's the client that does\nthe job of interpreting them and\n\n391\n00:22:24.556 --> 00:22:25.638\nstripping them away.\n\n392\n00:22:25.638 --> 00:22:29.795\n&gt;&gt; Yep and well, there you have it, we've\nhad a nice little glimpse of some network\n\n393\n00:22:29.795 --> 00:22:32.929\nlibraries that are available\nin the Java standard library.\n\n394\n00:22:32.929 --> 00:22:36.268\nNow this is not all that it can do,\nbut it was a nice little taste, but\n\n395\n00:22:36.268 --> 00:22:40.270\nwe're definitely not finished with Java\nas a whole, so definitely stay tuned.\n\n396\n00:22:40.270 --> 00:22:43.720\nBut we're gonna go ahead and wrap this one\nup, so for now, we're gonna go ahead and\n\n397\n00:22:43.720 --> 00:22:46.670\nsign off, for DevProTV,\nI've been your host Justin Dennison.\n\n398\n00:22:46.670 --> 00:22:47.240\n&gt;&gt; Marc Diss.\n\n399\n00:22:47.240 --> 00:22:49.419\n&gt;&gt; And we'll see you next time.\n\n400\n00:22:49.419 --> 00:22:54.390\n[MUSIC]\n\n",
          "vimeoId": "228423186"
        },
        {
          "description": "In this episode, Justin and Mark explore and discuss the Java Collections API. Mark demonstrates the selection of an appropriate interface based on the algorithm or process.",
          "length": "2092",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-27-java_collections_api-080317-PGM.00_35_08_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-27-java_collections_api-080317-PGM.00_35_08_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-27-java_collections_api-080317-PGM.00_35_08_20.Still001-sm.jpg",
          "title": "Java Collections API",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.864 --> 00:00:16.870\nGreetings, everyone, and welcome to\nanother exciting episode of DevPro.TV.\n\n3\n00:00:16.870 --> 00:00:19.120\nI'm your host, Justin Dennison,\nand in today's episode,\n\n4\n00:00:19.120 --> 00:00:22.190\nwe were continuing on\nwith our Java series.\n\n5\n00:00:22.190 --> 00:00:26.538\nAnd in particular, we're gonna be\nlooking at the collections API which,\n\n6\n00:00:26.538 --> 00:00:28.823\nI will tell you, is very, very handy.\n\n7\n00:00:28.823 --> 00:00:31.740\nAnd here to help us with that very\nendeavor is Mr. Martin Davis.\n\n8\n00:00:31.740 --> 00:00:32.730\nHow are you doing today, Martin?\n\n9\n00:00:32.730 --> 00:00:33.610\n&gt;&gt; Pretty good.\n\n10\n00:00:33.610 --> 00:00:36.680\n&gt;&gt; Mark is always doing, I'm afraid,\n\n11\n00:00:36.680 --> 00:00:41.390\none day you're gonna throw me off,\nand just go, I am horrible.\n\n12\n00:00:41.390 --> 00:00:44.852\nBut Mark, we're gonna be talking about\nthe collections of API within Java.\n\n13\n00:00:44.852 --> 00:00:48.264\nAnd I know we have to touch on\nsome conceptual ideas first,\n\n14\n00:00:48.264 --> 00:00:52.810\nbefore we actually see it in action,\nso where are we going to start?\n\n15\n00:00:52.810 --> 00:00:54.830\n&gt;&gt; Okay, so\nthere's this collection interface,\n\n16\n00:00:54.830 --> 00:00:58.080\nright, and pretty much everything we're\ngoing to be talking about today is going\n\n17\n00:00:58.080 --> 00:00:59.109\nto implement this interface.\n\n18\n00:01:00.210 --> 00:01:02.340\n&gt;&gt; It's sort of a sub\ninterface of iterable.\n\n19\n00:01:02.340 --> 00:01:05.070\nSo everything that is\na collection is also iterable,\n\n20\n00:01:05.070 --> 00:01:06.760\nmeaning that it can be iterated across.\n\n21\n00:01:07.990 --> 00:01:12.320\nSort of that iterable\nbehavior is what gives us\n\n22\n00:01:12.320 --> 00:01:16.470\nthe ability to do that for each loop that\nwe like doing so much because it's handy.\n\n23\n00:01:16.470 --> 00:01:19.399\nIt's sort of good shorthand.\n\n24\n00:01:19.399 --> 00:01:23.290\nThat is sort of a component\nof what a collection is.\n\n25\n00:01:23.290 --> 00:01:26.730\nSo any collection should be iterable.\n\n26\n00:01:26.730 --> 00:01:28.280\nBut collections are more than that.\n\n27\n00:01:28.280 --> 00:01:29.820\nThere's different kinds of collections.\n\n28\n00:01:29.820 --> 00:01:32.345\nYou can have a map, you can have a list,\nor you can have a set.\n\n29\n00:01:32.345 --> 00:01:35.000\nAnd those are the three primary types.\n\n30\n00:01:35.000 --> 00:01:37.180\nSo, of each of those three types,\n\n31\n00:01:37.180 --> 00:01:41.840\nthat's sort of like an abstract concept\nof the behaviors that need to exist.\n\n32\n00:01:41.840 --> 00:01:44.070\nAnd for\neach of those three different types,\n\n33\n00:01:44.070 --> 00:01:47.260\nthere's different implementations\nof things that you might see.\n\n34\n00:01:47.260 --> 00:01:50.340\nSo an example of the set\nmight be hash set.\n\n35\n00:01:50.340 --> 00:01:53.250\nThere might be an array list\nversus a linked list and\n\n36\n00:01:53.250 --> 00:01:58.300\nsome might be good at certain operations,\nothers might be faster at others.\n\n37\n00:01:58.300 --> 00:02:02.850\nBut at the most core level,\nit's most important to think about\n\n38\n00:02:02.850 --> 00:02:07.920\nwhich interface you're gonna be using, and\nnot the specific class implementation.\n\n39\n00:02:07.920 --> 00:02:09.970\nSo let's focus on the first part first,\n\n40\n00:02:09.970 --> 00:02:12.670\nwhich is picking which\ninterface of collection.\n\n41\n00:02:12.670 --> 00:02:18.968\nAnd then you can decide between LinkedList\nand ArrayList or hash set and Tree set.\n\n42\n00:02:18.968 --> 00:02:24.290\nBut yeah, so again, the collections, the\ninterfaces all support the same behaviors.\n\n43\n00:02:24.290 --> 00:02:27.380\nSo the LinkedLists will\nsupport the exact same\n\n44\n00:02:28.480 --> 00:02:31.470\nmethod calls as the ArrayLists as well.\n\n45\n00:02:31.470 --> 00:02:35.012\nSo it's more of a performance\nchoice between the two.\n\n46\n00:02:35.012 --> 00:02:37.916\nWhereas, there are operations\nin array lists and\n\n47\n00:02:37.916 --> 00:02:41.470\nlinked list support that\nhash set does not support.\n\n48\n00:02:41.470 --> 00:02:44.310\nSo it's important to sort of\ndraw that distinction between\n\n49\n00:02:44.310 --> 00:02:47.720\nthese are separate data\ncontainer object types.\n\n50\n00:02:47.720 --> 00:02:49.830\n&gt;&gt; And Martin, just to emphasize.\n\n51\n00:02:49.830 --> 00:02:51.340\nTypically, when you're\nmaking this decision,\n\n52\n00:02:51.340 --> 00:02:54.080\nit's kind of like picking\nthe right tool for the job, right?\n\n53\n00:02:54.080 --> 00:02:57.460\nYou're not gonna hammer a nail\nwith your smartphone, right?\n\n54\n00:02:57.460 --> 00:02:59.100\nYou have a hammer that does that,\n\n55\n00:02:59.100 --> 00:03:02.540\nso picking the correct tool can actually\nmake our lives a great deal easier.\n\n56\n00:03:02.540 --> 00:03:05.810\nAnd to some extent, we've already used\none of those tools, and typically,\n\n57\n00:03:05.810 --> 00:03:09.080\nwe've been using the array list\nwhich is an implementation,\n\n58\n00:03:09.080 --> 00:03:11.990\na concrete class of the list interface and\ncollections.\n\n59\n00:03:11.990 --> 00:03:13.070\n&gt;&gt; Yep, sounds good.\n\n60\n00:03:13.070 --> 00:03:14.780\nSo I do wanna run some tests.\n\n61\n00:03:14.780 --> 00:03:19.170\nI've written sort of some speed\nbenchmark type things for\n\n62\n00:03:19.170 --> 00:03:21.870\na couple different\noperations that I wanna run,\n\n63\n00:03:21.870 --> 00:03:26.470\nnot just with different implementations\nof the correct interface.\n\n64\n00:03:26.470 --> 00:03:30.820\nBut also with the wrong interface,\nsort of so we can see that that's really\n\n65\n00:03:30.820 --> 00:03:34.610\nthe major part of what matters is\nthe interface that you choose.\n\n66\n00:03:34.610 --> 00:03:39.319\nAnd the implementation does matter and\ncan affect the performance but\n\n67\n00:03:39.319 --> 00:03:41.887\ndoes come secondary to that, right?\n\n68\n00:03:41.887 --> 00:03:45.250\nThe Java documentation\ndefinitely emphasizes that.\n\n69\n00:03:45.250 --> 00:03:46.610\nAnd I think it's definitely\nimportant to note.\n\n70\n00:03:46.610 --> 00:03:51.005\nSo, if we come in here on my computer,\nI've got the documentation for\n\n71\n00:03:51.005 --> 00:03:54.369\nthe Java Collection API,\nthis is for the interface.\n\n72\n00:03:54.369 --> 00:03:55.712\n&gt;&gt; Could you-\n&gt;&gt; Yes?\n\n73\n00:03:55.712 --> 00:03:59.152\n&gt;&gt; Just zoom in that just for\nus a little bit more so we can I mean,\n\n74\n00:03:59.152 --> 00:04:03.280\nyou can always look up Collections API\nJava and get a very similar thing.\n\n75\n00:04:03.280 --> 00:04:06.269\nBut if you're pointing at anything,\nit's just gonna help us make a connection.\n\n76\n00:04:06.269 --> 00:04:11.620\n&gt;&gt; Yeah, so interface collection and this\nis the abstract type parameterization.\n\n77\n00:04:11.620 --> 00:04:14.780\nSo it can be a collection of anything.\n\n78\n00:04:14.780 --> 00:04:18.850\nYou can have a collection of entities,\njust like we've seen where we do\n\n79\n00:04:18.850 --> 00:04:22.700\nI want an array list of, and\nthen in those little angle brackets,\n\n80\n00:04:22.700 --> 00:04:25.648\nyou put whatever type you want\nthe collection to be made of.\n\n81\n00:04:25.648 --> 00:04:29.890\nSo, yes, e is the type of element in\nthis question, that's a tight parameter.\n\n82\n00:04:29.890 --> 00:04:36.800\nSo as I mentioned, iterable is a super\ninterface for the collection interface.\n\n83\n00:04:36.800 --> 00:04:41.610\nThen the implementing classes, this is\na lot of them, again like I mention,\n\n84\n00:04:41.610 --> 00:04:44.350\nthere is the lists, there's also queues.\n\n85\n00:04:44.350 --> 00:04:49.410\nD ques, double ended ques, I'm gonna\nnot really talk too much about that.\n\n86\n00:04:49.410 --> 00:04:52.060\nBut I am gonna mention sort\nof what a priority queue is.\n\n87\n00:04:52.060 --> 00:04:57.200\nAnd just talk about the first in, last\nout behavior that a queue will exhibit.\n\n88\n00:04:57.200 --> 00:05:02.770\nSo, right, no, that's wrong.\n\n89\n00:05:02.770 --> 00:05:05.956\nQ first in, so.\n\n90\n00:05:05.956 --> 00:05:06.713\n&gt;&gt; First in, first out.\n\n91\n00:05:06.713 --> 00:05:07.870\n&gt;&gt; First in, first out.\n\n92\n00:05:07.870 --> 00:05:11.060\nYeah, and then a stack is first in,\nlast out, or last in, first out.\n\n93\n00:05:11.060 --> 00:05:12.560\n&gt;&gt; Yeah.\n&gt;&gt; Are you supposed to say last in,\n\n94\n00:05:12.560 --> 00:05:13.750\nfirst out, or first out?\n\n95\n00:05:13.750 --> 00:05:17.149\n&gt;&gt; I think it's fi-fo, for\nfirst in first out, and then, li-fo.\n\n96\n00:05:17.149 --> 00:05:18.250\n&gt;&gt; Li-fo, last in.\n\n97\n00:05:18.250 --> 00:05:19.880\n&gt;&gt; Last in, first out, so.\n\n98\n00:05:19.880 --> 00:05:20.700\n&gt;&gt; I don't want to be misleading.\n\n99\n00:05:20.700 --> 00:05:23.130\nI said that and then like, wait,\nI don't think that's right.\n\n100\n00:05:23.130 --> 00:05:24.048\nLet's go back.\n\n101\n00:05:24.048 --> 00:05:26.730\nOkay, so yeah,\nthis is the root interface and\n\n102\n00:05:26.730 --> 00:05:30.500\nthe collection hierarchy is\nthe collection's interface.\n\n103\n00:05:30.500 --> 00:05:33.115\nSo it represents a group of objects and\nthese elements.\n\n104\n00:05:33.115 --> 00:05:36.520\nSome collections allow duplicate\nelements and some do not.\n\n105\n00:05:36.520 --> 00:05:39.642\nSo this is an important distinction\nto make between a set versus a list.\n\n106\n00:05:39.642 --> 00:05:44.280\nSo you can have multiple copies of\nthe same exact object in a list, but\n\n107\n00:05:44.280 --> 00:05:46.260\na set doesn't support that operation.\n\n108\n00:05:46.260 --> 00:05:49.810\nThe way a set works is either\nsomething is in the set, or it isn't.\n\n109\n00:05:49.810 --> 00:05:52.050\nAnd there's no specific order into a set,\neither.\n\n110\n00:05:52.050 --> 00:05:55.360\nYou can't infer that it will\nbe in a specific order or\n\n111\n00:05:55.360 --> 00:05:57.710\nthat you can access things by indices.\n\n112\n00:05:57.710 --> 00:06:00.960\nIt's really just,\nit contains operation that it supports.\n\n113\n00:06:00.960 --> 00:06:04.020\nNow, the thing is it does do that\na lot faster than the array list does.\n\n114\n00:06:04.020 --> 00:06:06.070\nSo if you're dealing\na lot of contains checks,\n\n115\n00:06:06.070 --> 00:06:10.320\nit makes way more sense to use\na set than it does to use a list.\n\n116\n00:06:10.320 --> 00:06:11.240\nI would say that.\n\n117\n00:06:11.240 --> 00:06:13.290\n&gt;&gt; Now, Martin, I do wanna interject here.\n\n118\n00:06:13.290 --> 00:06:17.795\nWe talked about that E,\nthat kind of generic dramatization.\n\n119\n00:06:17.795 --> 00:06:19.630\nThis's kind of a hard word to say.\n\n120\n00:06:19.630 --> 00:06:22.970\nThat capital E insinuates\nthat these have to be objects\n\n121\n00:06:22.970 --> 00:06:25.060\nthat can't necessarily be\nthese primitive types?\n\n122\n00:06:25.060 --> 00:06:28.350\nOr can I put primitive types in there and\n\n123\n00:06:28.350 --> 00:06:30.270\nthey're kind of behind\nthe scenes wrapped up for me?\n\n124\n00:06:30.270 --> 00:06:30.840\n&gt;&gt; Yeah, exactly.\n\n125\n00:06:30.840 --> 00:06:33.232\nSo you sort of alluded to\nit with the wrapped up.\n\n126\n00:06:33.232 --> 00:06:36.080\nBut there's these wrapper classes\nthat we've talked about in the past.\n\n127\n00:06:36.080 --> 00:06:37.700\nWhen you do integer.parsant,\n\n128\n00:06:37.700 --> 00:06:42.340\nthat's the integer wrapper class\nthat you're using in a static way.\n\n129\n00:06:42.340 --> 00:06:48.624\nThat refers to the integer permanent type\nbut it's the wrapper class for that.\n\n130\n00:06:48.624 --> 00:06:53.864\nSo again, there's certain instances in\nwhich you might need the object instead\n\n131\n00:06:53.864 --> 00:06:58.730\nof permeative, and so that's one you\ngonna want to use the wrapper class.\n\n132\n00:06:58.730 --> 00:07:02.180\nSo if you build a you know as we've\ndone when you build an array list,\n\n133\n00:07:02.180 --> 00:07:05.290\nyou don't give it the int in\nthe parametrization of the type.\n\n134\n00:07:05.290 --> 00:07:08.320\nYou give it integer with a capital I.\n\n135\n00:07:08.320 --> 00:07:13.850\nAnd bullying with a capital B and so\non down the list of different types.\n\n136\n00:07:13.850 --> 00:07:17.670\nSo this is the operations that a set,\nevery set has to support these.\n\n137\n00:07:17.670 --> 00:07:20.670\nI can click all methods I think,\nlet's see.\n\n138\n00:07:20.670 --> 00:07:25.660\nPast the support add, clear,\ncontains, contains all, equals,\n\n139\n00:07:25.660 --> 00:07:28.990\nthat's comparing the whole\nset to a different set.\n\n140\n00:07:31.580 --> 00:07:37.520\nHash code which is again the hash code for\nthe whole set,not for individual elements.\n\n141\n00:07:37.520 --> 00:07:42.280\nYou could access an individual element\nof the set and then say hash code for\n\n142\n00:07:42.280 --> 00:07:45.630\nthat cuz every,\nI think every optic supports hash code.\n\n143\n00:07:47.050 --> 00:07:49.264\nTo array, so you can convert\na set to an array, but again,\n\n144\n00:07:49.264 --> 00:07:51.270\nyou have no guarantee as to the order for\nthese sets.\n\n145\n00:07:51.270 --> 00:07:53.455\nSo when you have a hash set or a tree set,\n\n146\n00:07:53.455 --> 00:07:57.450\njust don't go around inferring that\nthings will be in a certain order.\n\n147\n00:07:57.450 --> 00:07:59.287\nYou can add two objects.\n\n148\n00:07:59.287 --> 00:08:04.086\nAnd then just because of the way it works,\nin the implementation,\n\n149\n00:08:04.086 --> 00:08:09.055\nthey might not be in a specific order\nif you do convert it to an array and\n\n150\n00:08:09.055 --> 00:08:11.990\nto try to pull them out in the same order.\n\n151\n00:08:11.990 --> 00:08:15.180\nExpect that it won't\nnecessarily be the same.\n\n152\n00:08:15.180 --> 00:08:18.080\n&gt;&gt; Martin, there's kinda this weird\nmethod there called Spliterator.\n\n153\n00:08:18.080 --> 00:08:18.864\nWhat is a Spliterator?\n\n154\n00:08:18.864 --> 00:08:21.200\n&gt;&gt; [LAUGH] Well we can click on it,\nall right.\n\n155\n00:08:21.200 --> 00:08:23.550\nSo Spliterator is a different class.\n\n156\n00:08:23.550 --> 00:08:25.570\nIt's a different interface, sorry.\n\n157\n00:08:25.570 --> 00:08:28.370\nT is the type of elements\nreturned by this Spliterator.\n\n158\n00:08:28.370 --> 00:08:31.920\nIt's just an object for traversing and\npartitioning elements of a source.\n\n159\n00:08:31.920 --> 00:08:36.806\nThat's what the documentation's telling\nme, but that's a good question.\n\n160\n00:08:36.806 --> 00:08:41.423\n&gt;&gt; When I think about the partition,\nlet's say I have the numbers zero to ten,\n\n161\n00:08:41.423 --> 00:08:46.200\nand I want to partition them into odds and\nevens, or zero to five and six to ten.\n\n162\n00:08:46.200 --> 00:08:50.390\nSo, I'm guessing I get an iterator\nthat gives me those splits?\n\n163\n00:08:50.390 --> 00:08:52.490\n&gt;&gt; Yeah.\n&gt;&gt; Or something of that nature?\n\n164\n00:08:52.490 --> 00:08:56.210\n&gt;&gt; Yeah, so, there's no super\ninterface for this, I don't think.\n\n165\n00:08:56.210 --> 00:09:03.040\nBut there's different Spliterator for\nthe different types of wrapper classes.\n\n166\n00:09:03.040 --> 00:09:06.120\nDouble ent long whatever.\n\n167\n00:09:06.120 --> 00:09:07.730\nThen there's some implementing classes for\nthese.\n\n168\n00:09:07.730 --> 00:09:10.530\nSo there's abstract Spliterators.\n\n169\n00:09:11.540 --> 00:09:12.870\nIt's an object for traversing and\n\n170\n00:09:12.870 --> 00:09:17.010\npartitioning elements to the source,\nmay partition off some of its elements.\n\n171\n00:09:17.010 --> 00:09:21.270\nSo, it's for splitting those existing\ncollections into smaller pieces.\n\n172\n00:09:21.270 --> 00:09:22.810\nSplitter into this and, yeah.\n\n173\n00:09:22.810 --> 00:09:24.466\nLots of this is not that useful for us.\n\n174\n00:09:24.466 --> 00:09:28.470\nBut this is a long file here,\nso lots of stuff going on.\n\n175\n00:09:28.470 --> 00:09:34.570\nWe're focused more on the collections\nAPI today, the interface here.\n\n176\n00:09:34.570 --> 00:09:37.989\nSo as I mentioned, extends iterable,\nso we've got the list,\n\n177\n00:09:37.989 --> 00:09:40.517\nI think I closed out a set by accident,\nsorry.\n\n178\n00:09:40.517 --> 00:09:42.706\nLet's go back to set, okay.\n\n179\n00:09:42.706 --> 00:09:44.522\nSo yeah, you can use the Spliterator and\n\n180\n00:09:44.522 --> 00:09:47.149\nit'll create a Spliterator\nover the elements of the set.\n\n181\n00:09:47.149 --> 00:09:51.220\nThat's just one of the methods\nit happens to support.\n\n182\n00:09:51.220 --> 00:09:55.550\ntoArray, toArray with a parameter, anyway.\n\n183\n00:09:55.550 --> 00:09:59.474\nSo yeah, and then there's some methods\ninherited just from the collection, so\n\n184\n00:09:59.474 --> 00:10:01.445\nremoveIf, stream, parallelStream.\n\n185\n00:10:01.445 --> 00:10:04.737\nThere's the four each which,\nas I've mentioned, is very useful,\n\n186\n00:10:04.737 --> 00:10:06.680\nevery collection should support that.\n\n187\n00:10:08.130 --> 00:10:10.720\nEverything that's iterable\nshould support that.\n\n188\n00:10:10.720 --> 00:10:15.450\nAnd so, then a List, so again, there's\nan explosive ordering in a List, right?\n\n189\n00:10:15.450 --> 00:10:18.650\nThat's the main distinction\nbetween this and a Set.\n\n190\n00:10:18.650 --> 00:10:23.170\nAlso you can have multiple copies\nof the same thing in a list.\n\n191\n00:10:23.170 --> 00:10:27.850\nAnd finally the third one,\nthe third big one I would say is the map.\n\n192\n00:10:27.850 --> 00:10:30.160\nSo a map maps one value onto another.\n\n193\n00:10:30.160 --> 00:10:32.280\nThose values don't have\nto be the same type.\n\n194\n00:10:32.280 --> 00:10:36.430\nYou can map integers onto booleans which\nis what we are actually going to do today.\n\n195\n00:10:36.430 --> 00:10:40.000\nSo every integer within\nthe context to prime numbers,\n\n196\n00:10:40.000 --> 00:10:43.850\nevery integer has a mapping to whether or\nnot is this a prime number.\n\n197\n00:10:43.850 --> 00:10:46.750\nYou could say that's\na valid mapping right, for\n\n198\n00:10:46.750 --> 00:10:51.330\nany specific key there will be\na value associated with it.\n\n199\n00:10:51.330 --> 00:10:54.500\nWhether there may or\nmay not be a values associated with them.\n\n200\n00:10:54.500 --> 00:10:57.320\nBut if it's in the map it should\nnot tie on true or false.\n\n201\n00:10:57.320 --> 00:11:01.310\nAnd that would be a good mapping\nfrom integer to boolean.\n\n202\n00:11:01.310 --> 00:11:06.790\nYou could also have a different mapping\nwhere you have possible integer i and\n\n203\n00:11:06.790 --> 00:11:10.800\nthen it maps to another integer,\nI guess a double.\n\n204\n00:11:10.800 --> 00:11:14.230\nYou would have to be a double\ncuz you have situations.\n\n205\n00:11:14.230 --> 00:11:18.070\nWell, you can map it to any double which\nis that same integer divided by ten.\n\n206\n00:11:18.070 --> 00:11:22.200\nSo that's, again, you're working with\ninfinite sets here, but that's still a one\n\n207\n00:11:22.200 --> 00:11:28.870\nto one mapping where every possible key\nwill have one value associated with it.\n\n208\n00:11:28.870 --> 00:11:31.550\nSo not every key has to be supported.\n\n209\n00:11:31.550 --> 00:11:36.620\nIf you try to access a key that\nisn't in the map, that's fine.\n\n210\n00:11:36.620 --> 00:11:38.450\nI mean, it won't return anything.\n\n211\n00:11:38.450 --> 00:11:46.810\nBut you cannot put two keys\nmapping to the same, no, sorry.\n\n212\n00:11:46.810 --> 00:11:48.490\nThat's the wrong way around.\n\n213\n00:11:48.490 --> 00:11:52.280\nYou can't have two values that\nare mapped to by the same key,\n\n214\n00:11:52.280 --> 00:11:54.350\nbecause you use the key to do lookups.\n\n215\n00:11:54.350 --> 00:11:58.570\nSo it's almost like an index, right,\nwhere you give it the key and\n\n216\n00:11:58.570 --> 00:12:00.460\nit can tell you the value\nthat's associated with it.\n\n217\n00:12:00.460 --> 00:12:02.710\nSo, this is useful for dictionaries.\n\n218\n00:12:02.710 --> 00:12:05.246\nAnd as we're gonna see,\nif you're dealing with a lot of look ups,\n\n219\n00:12:05.246 --> 00:12:08.191\nit sort of allows you to have this\nreference table for prime numbers, right,\n\n220\n00:12:08.191 --> 00:12:10.893\nwhere you can calculate whether or\nnot things are prime ahead of time.\n\n221\n00:12:10.893 --> 00:12:15.064\nAnd then you don't have\nto worry about it later,\n\n222\n00:12:15.064 --> 00:12:18.420\nyou can just check the map say okay, for\n\n223\n00:12:18.420 --> 00:12:23.380\nthis existing value,\ndoes it match to true or false?\n\n224\n00:12:23.380 --> 00:12:24.644\nOr is it prime, right?\n\n225\n00:12:24.644 --> 00:12:28.170\nThat would be a good example for\nwhen you would want to use a map.\n\n226\n00:12:28.170 --> 00:12:32.070\nWe've done a similar thing before\nwith our prime numbers episode, but\n\n227\n00:12:32.070 --> 00:12:35.530\nwe can do the same thing\nnow with this collections.\n\n228\n00:12:35.530 --> 00:12:38.450\nWe can implement it that way.\n\n229\n00:12:38.450 --> 00:12:39.770\nSo I wanted to run some tests here.\n\n230\n00:12:39.770 --> 00:12:43.470\nI've got this code in my eclipse.\n\n231\n00:12:43.470 --> 00:12:46.750\nI'm gonna make it kind of bigger so\nit takes up less space.\n\n232\n00:12:49.260 --> 00:12:50.071\nAnd we'll be able to see what's going on.\n\n233\n00:12:50.071 --> 00:12:52.630\nSo I create an array list.\n\n234\n00:12:52.630 --> 00:12:54.330\nI call it arrayList.\n\n235\n00:12:54.330 --> 00:12:58.677\nI fill this array list with random\nnumbers all the way up to 50,000.\n\n236\n00:12:58.677 --> 00:13:00.050\nAnd then this is just for\n\n237\n00:13:00.050 --> 00:13:04.880\nexistential check, meaning if does\nthis object exist in this list, right?\n\n238\n00:13:04.880 --> 00:13:07.020\nDoes this integer exist in the list?\n\n239\n00:13:07.020 --> 00:13:12.290\nSo I'm running 50,000 of those on\nthis arrayList and I'm finding out\n\n240\n00:13:12.290 --> 00:13:19.020\nhow many of those 50,000 integers end up\nbeing in this list when I run this check.\n\n241\n00:13:19.020 --> 00:13:21.530\nAnd I'm keeping track of the time.\n\n242\n00:13:21.530 --> 00:13:23.420\nSo I do this System.nanoTime call.\n\n243\n00:13:23.420 --> 00:13:25.100\nYou can also create a timer object.\n\n244\n00:13:25.100 --> 00:13:26.900\nThis is the way I've chosen to do it,\nthough.\n\n245\n00:13:26.900 --> 00:13:31.810\nSo long before, and that's the time when\nit sort of starts doing this operation,\n\n246\n00:13:31.810 --> 00:13:33.520\ninitializing the list.\n\n247\n00:13:33.520 --> 00:13:36.850\nAnd then I do another one afterwards and\nI subtract.\n\n248\n00:13:36.850 --> 00:13:39.840\nSort of to say that this is how many\nnanoseconds it took to initialize\n\n249\n00:13:39.840 --> 00:13:41.290\nthe arrayList.\n\n250\n00:13:41.290 --> 00:13:47.950\nI reset my timer, I perform the same\nthing for running the arrayList test.\n\n251\n00:13:47.950 --> 00:13:51.630\nAnd I print the number of\nhits out of the 50,000.\n\n252\n00:13:51.630 --> 00:13:57.000\nAnd then I set it to note free of\nthe memory and then I run the garbage\n\n253\n00:13:57.000 --> 00:14:02.965\ncollect so our JVM is sort of clear of\nobjects and starting from a blank slate.\n\n254\n00:14:02.965 --> 00:14:04.100\nI dropped the reference.\n\n255\n00:14:04.100 --> 00:14:06.800\nI run garbage collect and\nthen I do the same with link list\n\n256\n00:14:06.800 --> 00:14:10.540\njust to make sure there's not those\ndead objects floating around there.\n\n257\n00:14:10.540 --> 00:14:12.070\nMaybe they're taking up space in my cache,\n\n258\n00:14:12.070 --> 00:14:13.970\nand my cache doesn't think\nI should get rid of them.\n\n259\n00:14:13.970 --> 00:14:18.090\nI just want to sort of treat\nthis test runs fairly.\n\n260\n00:14:18.090 --> 00:14:18.970\nIf that make's since, right?\n\n261\n00:14:20.720 --> 00:14:22.880\nSo we run the same thing with link list,\nright.\n\n262\n00:14:22.880 --> 00:14:26.230\nThis is all pretty much the same code,\nI garbage collect again.\n\n263\n00:14:26.230 --> 00:14:28.579\nNow I try it with hash sets and\nthen I try it with tree sets.\n\n264\n00:14:28.579 --> 00:14:33.567\nAnd what we're gonna see is that there's a\ndifference probably between the arrayList\n\n265\n00:14:33.567 --> 00:14:34.932\nand the link list time,\n\n266\n00:14:34.932 --> 00:14:38.911\nand there is a difference between\nthe tree sets and the hash set time.\n\n267\n00:14:38.911 --> 00:14:44.819\nBut the difference in time is much greater\nbetween the set implementations and\n\n268\n00:14:44.819 --> 00:14:47.480\nthe list implementations.\n\n269\n00:14:47.480 --> 00:14:52.960\nThis is a feature, this check, to see\nwhether or not something is inside it.\n\n270\n00:14:52.960 --> 00:14:58.650\nIt's highly optimized for\nthese hash set and the tree set classes.\n\n271\n00:14:58.650 --> 00:15:02.560\nNot so much optimized for\nlink lists and arrayList.\n\n272\n00:15:02.560 --> 00:15:05.250\nThat's not the goal of a link list or\narrayList.\n\n273\n00:15:05.250 --> 00:15:09.660\nAnd unless you are trying to\nsupport some other operations, for\n\n274\n00:15:09.660 --> 00:15:16.080\nthis kind of case it would be much better\nto use a hash set or a tree set, sorry.\n\n275\n00:15:16.080 --> 00:15:18.990\nSo if you want, I'm gonna show\nyou the run 50k checks method.\n\n276\n00:15:18.990 --> 00:15:21.840\nJust cuz I'm sorta calling\nit a bunch of times.\n\n277\n00:15:21.840 --> 00:15:24.140\nSo I have to do two separate ones.\n\n278\n00:15:24.140 --> 00:15:27.090\nOne with a list and with a set.\n\n279\n00:15:27.090 --> 00:15:31.740\nI think I could probably change this to\ncollection and then it could take both.\n\n280\n00:15:33.270 --> 00:15:35.680\nI'm not gonna do that though\njust cuz I'm not entirely sure.\n\n281\n00:15:35.680 --> 00:15:38.198\nBut if you want to afterwards,\nwe can see if it still works.\n\n282\n00:15:38.198 --> 00:15:39.770\n&gt;&gt; I think that should still work, but\n\n283\n00:15:39.770 --> 00:15:44.040\nsometimes a little bit of clarity\nabout what you're trying to do.\n\n284\n00:15:44.040 --> 00:15:46.810\nI could do it this way.\n\n285\n00:15:46.810 --> 00:15:47.340\nYeah, you can.\n\n286\n00:15:47.340 --> 00:15:48.642\nAnd we can always come back and\nreoptimize this.\n\n287\n00:15:48.642 --> 00:15:52.694\nThis is more about comparison of\nthe two different interfaces for\n\n288\n00:15:52.694 --> 00:15:54.321\nthe, hey is this in this?\n\n289\n00:15:54.321 --> 00:15:55.088\nAnd well,\n\n290\n00:15:55.088 --> 00:16:00.900\nyou're gonna find I know at least I was\npretty blown away about the differences.\n\n291\n00:16:00.900 --> 00:16:01.520\n&gt;&gt; Yeah.\n\n292\n00:16:01.520 --> 00:16:03.140\n&gt;&gt; Cuz I was doing it all wrong for\n\n293\n00:16:03.140 --> 00:16:05.210\na while until I was like\nI can just use this.\n\n294\n00:16:05.210 --> 00:16:08.430\nAnd it makes my life a whole lot\neasier and faster and better.\n\n295\n00:16:08.430 --> 00:16:09.110\nIt's beautiful.\n\n296\n00:16:09.110 --> 00:16:12.085\n&gt;&gt; There's a big performance\ndifference with this, so again,\n\n297\n00:16:12.085 --> 00:16:14.671\nI have sort of two separate\n[INAUDIBLE] check methods.\n\n298\n00:16:14.671 --> 00:16:15.904\nBut it's pretty basic what it does.\n\n299\n00:16:15.904 --> 00:16:21.902\nIt just checks if this contains element i,\nwhich is in this case, a number integer.\n\n300\n00:16:21.902 --> 00:16:25.900\nAnd if it does, then it's gonna\nincrement the number of times.\n\n301\n00:16:25.900 --> 00:16:29.010\nAnd it's eventually gonna return\nthat as the number of times that\n\n302\n00:16:32.050 --> 00:16:35.800\nthose integers that it's sort\nof searching through, right?\n\n303\n00:16:35.800 --> 00:16:38.710\nSo I'm just gonna run it.\n\n304\n00:16:38.710 --> 00:16:44.903\nI'm gonna bring up my console to take up\nmy screen to give me a lot of output.\n\n305\n00:16:44.903 --> 00:16:48.680\nSo yeah, it's setting up the ArrayList,\nit's setting up the LinkedList.\n\n306\n00:16:50.180 --> 00:16:51.930\nLinkedList is taking a while.\n\n307\n00:16:51.930 --> 00:16:53.160\nAnd wow, look at that.\n\n308\n00:16:53.160 --> 00:16:56.650\nThe hashtag in Treeset ran almost\ninstantly compared to the other two.\n\n309\n00:16:56.650 --> 00:17:00.066\nSo it would be a little more convenient\nif I had sort of divided these numbers\n\n310\n00:17:00.066 --> 00:17:02.685\nby something big, so\nwe could get an easier comparison.\n\n311\n00:17:02.685 --> 00:17:06.460\nThough let's just go by number of digits,\nright?\n\n312\n00:17:06.460 --> 00:17:11.690\nSo again, running the ArrayList\ntest takes more than 100\n\n313\n00:17:11.690 --> 00:17:16.670\ntimes as long as initializing\nthe ArrayList, same for the LinkedList.\n\n314\n00:17:16.670 --> 00:17:18.976\nTakes about 600 times as long,\nit looks like.\n\n315\n00:17:18.976 --> 00:17:23.820\nAnd then, so comparatively,\nthe initialization\n\n316\n00:17:23.820 --> 00:17:27.590\ntimes are definitely a little bit longer\nfor this HashSet than for the TreeSet.\n\n317\n00:17:27.590 --> 00:17:28.850\nAnd the reason why,\n\n318\n00:17:28.850 --> 00:17:33.740\nif you want me to explain it, is because\nit has to hash the value of that integer.\n\n319\n00:17:33.740 --> 00:17:41.580\nAnd then it has to find the location in\nthe tree in which the element belongs.\n\n320\n00:17:41.580 --> 00:17:46.106\nBut essentially, the way this tree\nset works is there's sort of assorted\n\n321\n00:17:46.106 --> 00:17:49.540\nordering where it says okay,\nwhat are you looking for?\n\n322\n00:17:49.540 --> 00:17:51.318\nYou're looking for 32,000, right?\n\n323\n00:17:51.318 --> 00:17:55.295\nIt says it's from 0 to 50 k or something.\n\n324\n00:17:55.295 --> 00:17:58.774\nMaybe it could say okay, well,\nsince you're looking for\n\n325\n00:17:58.774 --> 00:18:02.467\nsomething that's' greater than 25,000,\ngo right.\n\n326\n00:18:02.467 --> 00:18:08.510\nSince you're looking for something that's\nless than 42,000 go left, and so on.\n\n327\n00:18:08.510 --> 00:18:13.180\nAnd it just makes those comparisons and\nit can narrow it down in log n time.\n\n328\n00:18:13.180 --> 00:18:16.980\nAnd the way the hash set works\nis it takes the hash function\n\n329\n00:18:16.980 --> 00:18:22.300\nof a value that it's a many to\n\n330\n00:18:22.300 --> 00:18:27.450\na finite amount.\n\n331\n00:18:27.450 --> 00:18:29.690\nThere's infinite number of\nthings that you could hash and\n\n332\n00:18:29.690 --> 00:18:33.120\nthen there's a finite amount\nof possible hash values.\n\n333\n00:18:33.120 --> 00:18:36.810\nSo occasionally you have a coalition\nsituation where multiple value or\n\n334\n00:18:36.810 --> 00:18:41.900\nmultiple keys are mapping to\nthe same value, but that's fine.\n\n335\n00:18:41.900 --> 00:18:45.260\nIt's again, the way I talk\nabout it is sort of like a map,\n\n336\n00:18:45.260 --> 00:18:47.520\nbut there's also hash maps by the way.\n\n337\n00:18:49.690 --> 00:18:53.050\nThere's a kind of a lot\nof things going on here.\n\n338\n00:18:53.050 --> 00:18:57.990\nBut like I've been saying,\nthe execution time for this hash set.\n\n339\n00:18:57.990 --> 00:19:04.080\nAnd for the tree set is definitely\nmuch lower than the execution time for\n\n340\n00:19:04.080 --> 00:19:06.680\nthe LinkedList and the ArrayList.\n\n341\n00:19:06.680 --> 00:19:10.750\nIt looks like it takes about as three\ntimes as long to initialize each of those\n\n342\n00:19:13.050 --> 00:19:14.850\nclasses or the collections.\n\n343\n00:19:14.850 --> 00:19:15.880\nBut they run a lot faster.\n\n344\n00:19:15.880 --> 00:19:20.833\nSo I'm just gonna take the initialization\ndebug output out, so that it's easier to\n\n345\n00:19:20.833 --> 00:19:25.599\ncompare the execution time that we know\nabout how long it takes to initiate this.\n\n346\n00:19:25.599 --> 00:19:29.124\n&gt;&gt; Now Mark, while you're doing, this\nsomething I've always thought about hashes\n\n347\n00:19:29.124 --> 00:19:31.390\nis it's essentially like\na normalization schema.\n\n348\n00:19:31.390 --> 00:19:36.006\nWhatever I get in, there's some function\nthat then generates a unique identifier.\n\n349\n00:19:36.006 --> 00:19:37.240\n&gt;&gt; Yeah.\n\n350\n00:19:37.240 --> 00:19:38.200\n&gt;&gt; Unique, right.\n\n351\n00:19:38.200 --> 00:19:39.090\n&gt;&gt; It doesn't have to be unique.\n\n352\n00:19:39.090 --> 00:19:40.850\n&gt;&gt; It doesn't have to be unique.\n\n353\n00:19:40.850 --> 00:19:45.420\nBut it's a quick way to do lookups and\nultimately,\n\n354\n00:19:45.420 --> 00:19:48.192\nthat's why the generating in\nthat takes a little bit longer.\n\n355\n00:19:48.192 --> 00:19:51.587\nBut then I know where\nthat is is a lot faster.\n\n356\n00:19:51.587 --> 00:19:57.490\nSo hashing is a hard topic to talk about\nuntil you get really deep into it.\n\n357\n00:19:57.490 --> 00:20:00.800\n&gt;&gt; So just a basic sort of\nway of understanding it.\n\n358\n00:20:00.800 --> 00:20:03.380\nImagine you have 50 different buckets,\nright, and\n\n359\n00:20:03.380 --> 00:20:05.580\nyou have infinity integers right?\n\n360\n00:20:05.580 --> 00:20:09.120\nSo the modulus operation would be\nsort of a lot what a hash does\n\n361\n00:20:09.120 --> 00:20:12.570\nwhere there are many operations that\nare gonna map each of those 50 buckets.\n\n362\n00:20:12.570 --> 00:20:17.720\nWhere if you modulo by 50,\nit means divide whatever value you're\n\n363\n00:20:17.720 --> 00:20:22.150\nusing as your key by 50 and\nthen just take the remainder, right?\n\n364\n00:20:22.150 --> 00:20:26.533\nSo, 1 and 51 would map to the same\nvalue of bucket one, right?\n\n365\n00:20:26.533 --> 00:20:30.410\n0 and\n50 would both map to the same bucket of 0.\n\n366\n00:20:30.410 --> 00:20:35.250\nIt's sort of like cuz they're\nevenly dividing, but you've got\n\n367\n00:20:35.250 --> 00:20:40.480\nthis one to many, this relationship\nwhere there are a bunch of buckets.\n\n368\n00:20:40.480 --> 00:20:42.730\nAnd if you wanna do a look up,\n\n369\n00:20:42.730 --> 00:20:46.630\nyou can just perform the same function\non the value you're trying to look up.\n\n370\n00:20:46.630 --> 00:20:49.090\nAnd then you sort of know which\nbucket it's in already and\n\n371\n00:20:49.090 --> 00:20:50.600\nyou don't have to check all the buckets.\n\n372\n00:20:50.600 --> 00:20:52.789\nYou only check that one\nbucket out of the 50.\n\n373\n00:20:52.789 --> 00:20:58.496\nYou can sort of get a much better idea\nof where it might be in your hash set,\n\n374\n00:20:58.496 --> 00:20:59.855\nhash table.\n\n375\n00:20:59.855 --> 00:21:03.411\nAgain, there's different collections that\nuse this idea of hashing that I think it's\n\n376\n00:21:03.411 --> 00:21:04.817\nsort of important to understand.\n\n377\n00:21:04.817 --> 00:21:07.885\nSo I'm gonna run it again.\n\n378\n00:21:07.885 --> 00:21:11.250\nAnd I took out the debug outputs for\nhow long it takes to initialize, so\n\n379\n00:21:11.250 --> 00:21:12.630\nlet's run array:List 1.\n\n380\n00:21:12.630 --> 00:21:16.686\nLooks like the LinkedList 1 takes\neven way longer than the ArrayList,\n\n381\n00:21:16.686 --> 00:21:19.490\nprobably about three times as long.\n\n382\n00:21:19.490 --> 00:21:22.080\nThen the HashSet runs fastest of all.\n\n383\n00:21:22.080 --> 00:21:24.850\nAnd the TreeSet again is\nstill running about more\n\n384\n00:21:26.300 --> 00:21:29.440\nthan 100 times faster than the ArrayList.\n\n385\n00:21:29.440 --> 00:21:31.190\nSo there's a big difference there.\n\n386\n00:21:31.190 --> 00:21:36.440\nAnd the more checks you're doing, the more\nefficient it is to use the hash set and\n\n387\n00:21:36.440 --> 00:21:38.660\nthe tree set versus the array list and\nlink list.\n\n388\n00:21:38.660 --> 00:21:42.020\nIt's sort of an exponential\nrelationship there.\n\n389\n00:21:42.020 --> 00:21:45.085\nNot really, it's not actually\nan exponential relationship, but\n\n390\n00:21:45.085 --> 00:21:49.815\nit takes linear time to do these lookups\nin an array list or a linked list.\n\n391\n00:21:50.965 --> 00:21:55.965\nLinear with the size of the container and\nit takes logarithmic\n\n392\n00:21:59.045 --> 00:22:02.245\ntime to find that with the hash set and\nthe tree set.\n\n393\n00:22:02.245 --> 00:22:03.555\nIt's a lot faster.\n\n394\n00:22:04.685 --> 00:22:07.420\nThere's another test I wanted to run,\n\n395\n00:22:07.420 --> 00:22:11.180\nwanted to talk about if\nyou had to sort something.\n\n396\n00:22:12.260 --> 00:22:15.230\nSo there's the array list,\nthere's the linked list.\n\n397\n00:22:15.230 --> 00:22:18.388\nSo this is just comparing\nthe array list to the linked list.\n\n398\n00:22:18.388 --> 00:22:21.120\nI'm kind of wanting to see if there's\na big difference between how long it takes\n\n399\n00:22:21.120 --> 00:22:22.760\nto sort the two.\n\n400\n00:22:22.760 --> 00:22:27.820\nSo it looks like it takes about,\nwell, I'm not gonna say.\n\n401\n00:22:27.820 --> 00:22:29.380\nI'm just gonna compare them, right?\n\n402\n00:22:29.380 --> 00:22:32.801\nSo it takes longer to\ninitialize the ArrayList, but\n\n403\n00:22:32.801 --> 00:22:36.390\nit also runs faster than\nthe LinkedList for this case.\n\n404\n00:22:36.390 --> 00:22:41.698\nBut the way that ArrayList and\nLinkedList work, it's pretty hard\n\n405\n00:22:41.698 --> 00:22:48.440\nto do inserts on an array list sometimes\nbecause you have to continue expanding it.\n\n406\n00:22:48.440 --> 00:22:51.560\nWhereas with a linked list,\nyou can just add a new node and\n\n407\n00:22:51.560 --> 00:22:56.110\nyou don't have to expand the size of\nthe container and copy every value over.\n\n408\n00:22:56.110 --> 00:23:00.200\nThe way that Java takes care of this,\nor makes the array list somewhat better.\n\n409\n00:23:01.270 --> 00:23:06.470\nIs they sort of dynamically size it\nup by multiplying it by a specific\n\n410\n00:23:06.470 --> 00:23:10.955\nvalue every certain time right,\nso it starts out as 11.\n\n411\n00:23:10.955 --> 00:23:15.140\nI think it's the default\ncontainer size for the array list.\n\n412\n00:23:15.140 --> 00:23:20.220\nOnce that fills up, it's gonna multiply\nthat by 1.5 and maybe there's 15,\n\n413\n00:23:20.220 --> 00:23:22.960\n16 elements in the array list now.\n\n414\n00:23:22.960 --> 00:23:24.985\nAnd it just continues\nscaling up like that,\n\n415\n00:23:24.985 --> 00:23:27.186\nwhich is sort of\nan exponential relationship.\n\n416\n00:23:27.186 --> 00:23:32.181\nBut it allows you this sort of buffer\nzone where you have to copy the whole\n\n417\n00:23:32.181 --> 00:23:35.775\narray list every time you\nadd a single new element.\n\n418\n00:23:35.775 --> 00:23:38.849\nYou sort of have to pay that cost\nonly every few times that you add\n\n419\n00:23:38.849 --> 00:23:39.905\nan element, right?\n\n420\n00:23:39.905 --> 00:23:43.820\nSo that's sort of a feature that array\nlists implement in Java that makes them\n\n421\n00:23:43.820 --> 00:23:46.668\nslightly more efficient than\nthey would otherwise be.\n\n422\n00:23:46.668 --> 00:23:48.602\nIt's called the amortized cost basically.\n\n423\n00:23:48.602 --> 00:23:50.670\nOf performing those insertions.\n\n424\n00:23:50.670 --> 00:23:56.240\n&gt;&gt; Now, Mark, we've been talking\nabout the set and the list.\n\n425\n00:23:56.240 --> 00:23:59.570\nBut there's also a third type\nin the collections API, right?\n\n426\n00:23:59.570 --> 00:24:03.540\nThere's the map type, what about that?\n\n427\n00:24:03.540 --> 00:24:06.230\n&gt;&gt; Yeah, okay, so\nwe could write an example if we have time.\n\n428\n00:24:06.230 --> 00:24:07.100\nDo we have time, you think?\n\n429\n00:24:07.100 --> 00:24:09.020\n&gt;&gt; Yeah, I say we go with it.\n\n430\n00:24:09.020 --> 00:24:12.690\nAll right, cool, so I've copied this\nprime method from the previous episode.\n\n431\n00:24:12.690 --> 00:24:16.670\nIt's from the primes episode\nwhere we wrote this whole thing.\n\n432\n00:24:16.670 --> 00:24:19.670\nSo we find the prime\nfactorization of stuff basically,\n\n433\n00:24:19.670 --> 00:24:22.265\nand print it out to a file and\nwe write it back in.\n\n434\n00:24:22.265 --> 00:24:24.975\nBut now we can do the same\nthing with the maps that we\n\n435\n00:24:24.975 --> 00:24:26.905\nare sort of learning how to use, right.\n\n436\n00:24:26.905 --> 00:24:32.718\nSo Map from Integer to Boolean,\n\n437\n00:24:32.718 --> 00:24:39.074\nhashMap = new hashMap\n\n438\n00:24:39.074 --> 00:24:45.778\nfrom Integer to Boolean.\n\n439\n00:24:45.778 --> 00:24:51.150\nAnd then we're here.\n\n440\n00:24:51.150 --> 00:24:52.000\nSo import that.\n\n441\n00:24:52.000 --> 00:24:56.920\nSome of this code is gonna be the same\nas what we were just doing, so\n\n442\n00:24:56.920 --> 00:24:58.260\nI'm gonna copy some stuff.\n\n443\n00:24:58.260 --> 00:24:59.820\nHope you don't mind.\n\n444\n00:25:03.491 --> 00:25:06.100\nSo long before equals system.nanotime.\n\n445\n00:25:06.100 --> 00:25:08.640\nAgain there's no array list anymore.\n\n446\n00:25:08.640 --> 00:25:11.090\nSo we're going to hash it out.\n\n447\n00:25:11.090 --> 00:25:12.440\nNot bad.\n\n448\n00:25:12.440 --> 00:25:14.220\nHow many are we going to have?\n\n449\n00:25:14.220 --> 00:25:16.010\nThis is going to go to 1001\naccording to our example?\n\n450\n00:25:19.260 --> 00:25:23.241\nSo we're going to check if something is\nprime and we're going to create a mapping.\n\n451\n00:25:23.241 --> 00:25:32.299\nSo if isPrime(i) Did I do 10,000?\n\n452\n00:25:32.299 --> 00:25:35.585\nI did do 10,000.\n\n453\n00:25:35.585 --> 00:25:38.580\nOkay, so if it is prime,\nthen we're gonna put in this map.\n\n454\n00:25:38.580 --> 00:25:43.130\nSo hashMap.put and\nwe're going to put this key value pair.\n\n455\n00:25:43.130 --> 00:25:45.510\nRight, so this is the way\nyou insert things into that.\n\n456\n00:25:45.510 --> 00:25:47.640\nYou have to get the key and the value.\n\n457\n00:25:47.640 --> 00:25:50.090\nSo if it is prime,\nwe are going to put that it's true.\n\n458\n00:25:50.090 --> 00:25:53.910\nThat's going to be the mapping for\nthis imager, i.\n\n459\n00:25:53.910 --> 00:25:57.280\nAnd if it's not we're going\nto put that it's false.\n\n460\n00:25:57.280 --> 00:26:00.770\nAnd so this again you don't do ADD,\nyou do PUT for a map.\n\n461\n00:26:00.770 --> 00:26:05.970\nThat's just the method\nname that it supports.\n\n462\n00:26:05.970 --> 00:26:11.240\nSo we got true, false, that looks good so\nthat's sort of our initialization.\n\n463\n00:26:11.240 --> 00:26:18.710\nI should change this to hash map and\nthen what else do we need to do?\n\n464\n00:26:18.710 --> 00:26:23.310\nSo we've created the hash map, right?\n\n465\n00:26:23.310 --> 00:26:24.180\n&gt;&gt; Uh-huh.\n\n466\n00:26:24.180 --> 00:26:29.650\n&gt;&gt; And now we have to,\nokay, so n to n equals 0.\n\n467\n00:26:29.650 --> 00:26:35.148\nWe're gonna keep track of\nthe number of occurences.\n\n468\n00:26:35.148 --> 00:26:38.032\nSo random rng equals new random.\n\n469\n00:26:39.950 --> 00:26:44.960\nAnd we have to do a for\nloop or before equals\n\n470\n00:26:44.960 --> 00:26:49.230\nSystem.nanoTime.\n\n471\n00:26:49.230 --> 00:26:51.810\nReset our timer, so for int equals zero.\n\n472\n00:26:51.810 --> 00:26:55.730\nR is less than whatever\nit's supposed to be.\n\n473\n00:26:55.730 --> 00:27:01.880\nOr we can pair it out\nagainst 10,000 again.\n\n474\n00:27:01.880 --> 00:27:02.900\nA bigger number.\n\n475\n00:27:02.900 --> 00:27:05.170\nSo we're doing 10 million lookups,\ninteresting.\n\n476\n00:27:05.170 --> 00:27:07.560\nOne, two, three, one, two, three.\n\n477\n00:27:07.560 --> 00:27:10.060\nSo we're doing 10 million\nlookups in this dictionary.\n\n478\n00:27:10.060 --> 00:27:11.880\nWe're going to figure out how\nlong it takes to do that.\n\n479\n00:27:13.130 --> 00:27:16.300\nSo r equal g dot\n\n480\n00:27:18.460 --> 00:27:21.820\nnext ent.\n\n481\n00:27:21.820 --> 00:27:23.620\nIt can be up to 10000 right?\n\n482\n00:27:24.920 --> 00:27:29.320\nThose are the values we're\ndoing this table for.\n\n483\n00:27:29.320 --> 00:27:32.180\nSo ordinarily, you would wanna\nsort of have a handling of this,\n\n484\n00:27:32.180 --> 00:27:36.880\nlike if that r is not found in\nthe hash map you would want to\n\n485\n00:27:36.880 --> 00:27:40.280\nmaybe calculate whether or\nnot it's prime anyway, right?\n\n486\n00:27:40.280 --> 00:27:41.920\nSo you could do that.\n\n487\n00:27:41.920 --> 00:27:43.290\nI don't think I'm gonna implement that.\n\n488\n00:27:43.290 --> 00:27:48.280\nI'm just gonna say that any value\nthat we do get for a possible random.\n\n489\n00:27:48.280 --> 00:27:52.120\nHere, we will definitely have already\ncalculated whether or not, it is prime.\n\n490\n00:27:54.070 --> 00:27:57.090\nI'm just gonna infer that, right,\nthat's not necessarily true,\n\n491\n00:27:57.090 --> 00:28:02.098\nit's not good error handling,\nbut we don't have much time.\n\n492\n00:28:02.098 --> 00:28:07.200\nSo if(hashMap.get(key)), so for\n\n493\n00:28:07.200 --> 00:28:12.860\nthe key is just r, we're doing a lookup\nwith r So I don't want this semicolon.\n\n494\n00:28:12.860 --> 00:28:19.280\nSo if this hashmap.getr is mapped to\na value of true is what I'm saying here.\n\n495\n00:28:19.280 --> 00:28:20.600\nSo that's sort of implicit,\n\n496\n00:28:20.600 --> 00:28:24.490\nI could do that and\nthen this may be a little bit more clear.\n\n497\n00:28:24.490 --> 00:28:28.110\nI'm getting the bullion value\nassociated with this integer\n\n498\n00:28:28.110 --> 00:28:30.478\nthat I'm giving it called\nr which is just a random.\n\n499\n00:28:30.478 --> 00:28:35.034\nAnd then, n++ to cover the occurences, So,\n\n500\n00:28:35.034 --> 00:28:41.290\nSystem.out.print.ln.\n\n501\n00:28:41.290 --> 00:28:46.413\nSo, System.nanoTime\n\n502\n00:28:46.413 --> 00:28:50.690\nminus before plus,\n\n503\n00:28:50.690 --> 00:28:54.700\nI'm going to do this actually,\nthat will concatenate properly\n\n504\n00:28:56.993 --> 00:29:03.510\nFour two do hash map lookups.\n\n505\n00:29:03.510 --> 00:29:04.740\nLike that, right?\n\n506\n00:29:04.740 --> 00:29:07.890\nThis is actually supposed to be outside\nthe four loop, because when I'm done\n\n507\n00:29:09.250 --> 00:29:12.055\nAuto format everything,\nokay it still doesn't like what I did.\n\n508\n00:29:12.055 --> 00:29:14.918\nString long\n\n509\n00:29:18.073 --> 00:29:24.940\ndot toString see if that works\n&gt;&gt; Nah you can't do it.\n\n510\n00:29:24.940 --> 00:29:25.920\n&gt;&gt; I'll just do parentheses.\n\n511\n00:29:25.920 --> 00:29:29.060\n&gt;&gt; Yup,\nparentheses cuz otherwise you'll get-\n\n512\n00:29:29.060 --> 00:29:31.160\n&gt;&gt; Shenanigans when you try to subtract.\n\n513\n00:29:31.160 --> 00:29:31.900\n&gt;&gt; True, yeah.\n\n514\n00:29:31.900 --> 00:29:37.050\nNow it looks like it's working, cool.\n\n515\n00:29:39.290 --> 00:29:40.190\nSo we've got all that.\n\n516\n00:29:40.190 --> 00:29:43.260\nWhere did my [INAUDIBLE]?\n\n517\n00:29:43.260 --> 00:29:45.000\nSo I guess return k now?\n\n518\n00:29:45.000 --> 00:29:45.985\nWait, no I don't.\n\n519\n00:29:45.985 --> 00:29:46.560\n[INAUDIBLE] it?\n\n520\n00:29:46.560 --> 00:29:48.100\n&gt;&gt; No.\n&gt;&gt; Which one am I picking on here?\n\n521\n00:29:48.100 --> 00:29:51.460\n&gt;&gt; No, you just did too many\nlook ups of how many primes\n\n522\n00:29:51.460 --> 00:29:52.840\n&gt;&gt; if there's a prime in there\n\n523\n00:29:52.840 --> 00:29:53.930\nyou made a hit.\n\n524\n00:29:53.930 --> 00:29:56.650\nYou're just looking up random numbers\nto see if they're prime or not.\n\n525\n00:29:56.650 --> 00:29:57.750\n&gt;&gt; Yeah.\n\n526\n00:29:57.750 --> 00:30:01.350\n&gt;&gt; And then I think after that you had\n&gt;&gt; Do the same thing but\n\n527\n00:30:01.350 --> 00:30:04.630\nwithout using the dictionary that I\ncreated so we have something to this.\n\n528\n00:30:06.205 --> 00:30:07.816\nYep, cool.\n\n529\n00:30:07.816 --> 00:30:14.470\nSo before=system.the nanoterm.\n\n530\n00:30:14.470 --> 00:30:19.920\nand reset our timer, we're gonna do,\nagain, 10,000,000 lookups.\n\n531\n00:30:19.920 --> 00:30:25.520\nSo instead of checking the hash map this\ntime,what we're just gonna do, is prime r.\n\n532\n00:30:25.520 --> 00:30:29.616\nAgain you can leave an equals equals still\nthere, makes it even less, has to do some\n\n533\n00:30:29.616 --> 00:30:31.800\n&gt;&gt; n + +, I guess.\n\n534\n00:30:31.800 --> 00:30:34.330\nThat-\n&gt;&gt; We probably need to reset n back to\n\n535\n00:30:34.330 --> 00:30:37.160\nzero since we used it in a previous trial.\n\n536\n00:30:37.160 --> 00:30:37.660\n&gt;&gt; True.\n\n537\n00:30:38.970 --> 00:30:40.870\nDo one, 0.\nI don't know if I actually output how many\n\n538\n00:30:40.870 --> 00:30:46.690\ntimes it gets, it's just like if you\nwere trying to calculate that value.\n\n539\n00:30:46.690 --> 00:30:48.470\nBut that's a good point.\n\n540\n00:30:48.470 --> 00:30:51.030\nNow I'm going to copy that.\n\n541\n00:30:51.030 --> 00:30:52.590\nIt's just about a print line.\n\n542\n00:30:54.130 --> 00:30:59.910\nAnd, I'm gonna do, To do,\nthe trial division.\n\n543\n00:30:59.910 --> 00:31:04.220\nSo that's really the process that we're\ndoing here that I have implemented.\n\n544\n00:31:04.220 --> 00:31:04.870\nMethod.\n\n545\n00:31:07.110 --> 00:31:08.410\n&gt;&gt; To do trial discussion.\n\n546\n00:31:08.410 --> 00:31:09.800\nSo I think that's all we need.\n\n547\n00:31:09.800 --> 00:31:11.920\nIs that what we were doing?\n\n548\n00:31:11.920 --> 00:31:13.810\n&gt;&gt; I think we'll-\n&gt;&gt; I kinda lost where\n\n549\n00:31:13.810 --> 00:31:16.690\nI was on the outline, there.\n\n550\n00:31:16.690 --> 00:31:18.910\nAlso there's some unnecessary\nspace that's gone,\n\n551\n00:31:18.910 --> 00:31:20.230\nhere, that I actually want to get rid of.\n\n552\n00:31:23.750 --> 00:31:28.150\nBecause it makes it harder\nto interperate the output.\n\n553\n00:31:28.150 --> 00:31:29.637\nOkay, cool.\nSo, as you can see,\n\n554\n00:31:29.637 --> 00:31:33.582\ninitializing the hash map took\na good bit of time up front, right,\n\n555\n00:31:33.582 --> 00:31:38.036\nto do all these calculations for\nall those 10,000 possible values.\n\n556\n00:31:38.036 --> 00:31:43.004\nBut when you're on the scale of 10 million\nlook ups The time cost is dominated\n\n557\n00:31:43.004 --> 00:31:45.563\nby doing this ten million look-ups, so\n\n558\n00:31:45.563 --> 00:31:50.232\nif you store those ahead of time adding\nthese two values together Is what it\n\n559\n00:31:50.232 --> 00:31:54.854\nwould take you to accomplish this\nusing the dictionary hashmap method.\n\n560\n00:31:54.854 --> 00:31:58.575\nAnd then if you just calculated it by\nitself every single time using the is\n\n561\n00:31:58.575 --> 00:32:00.771\nprime method that we've written before,\n\n562\n00:32:00.771 --> 00:32:04.585\nit actually takes much longer cuz you\nhave to run this 10 million times.\n\n563\n00:32:04.585 --> 00:32:07.190\nWhereas you only have to\nrun this 10,000 times.\n\n564\n00:32:07.190 --> 00:32:10.890\nAnd then you run 10\nmillion hashmap lookups.\n\n565\n00:32:10.890 --> 00:32:13.680\nSo as you can see, this is on the order\n\n566\n00:32:15.190 --> 00:32:18.381\nof five times faster than\ndoing trial division for that.\n\n567\n00:32:18.381 --> 00:32:23.340\nFor this example, that's again,\nit's very based on sort of the size of\n\n568\n00:32:23.340 --> 00:32:28.520\nthe collection that you're\nchecking as well as the total\n\n569\n00:32:28.520 --> 00:32:32.560\nnumber of Prime checks that you're making.\n\n570\n00:32:32.560 --> 00:32:37.760\nBut for this example, it works out to\nwhere doing the HashMap lookups and\n\n571\n00:32:38.910 --> 00:32:42.480\ndoing all the work ahead of\ntime is about five times faster\n\n572\n00:32:42.480 --> 00:32:45.330\nthan doing it on the spot\nwhenever you need to.\n\n573\n00:32:45.330 --> 00:32:47.825\nSo just sort of an example\nof how to use Maps.\n\n574\n00:32:47.825 --> 00:32:49.212\nAgain, we've seen this Put.\n\n575\n00:32:49.212 --> 00:32:51.160\nWe've seen, have we seen Get?\n\n576\n00:32:51.160 --> 00:32:53.000\nHave I showed you-\n&gt;&gt; Yeah.\n\n577\n00:32:53.000 --> 00:32:53.630\n&gt;&gt; Okay, cool.\n\n578\n00:32:53.630 --> 00:32:56.860\nSo those are the main functions\nthat a HashMap has to support,\n\n579\n00:32:56.860 --> 00:33:02.040\nis putting value, a key value pair,\ninto the map and getting it out.\n\n580\n00:33:02.040 --> 00:33:03.420\nSo the HashMap implements that.\n\n581\n00:33:03.420 --> 00:33:05.220\nThe Tree Map implements that.\n\n582\n00:33:05.220 --> 00:33:08.570\nIf we wanted, I could, we're not\ngonna change the variable name, but\n\n583\n00:33:08.570 --> 00:33:13.110\nI can just change the class to TreeMap.\n\n584\n00:33:13.110 --> 00:33:15.030\nAnd I wanna see if it's still faster.\n\n585\n00:33:15.030 --> 00:33:15.534\nIt probably will be.\n\n586\n00:33:17.681 --> 00:33:19.390\nWell, nope, doesn't look like it is.\n\n587\n00:33:19.390 --> 00:33:20.168\nInteresting.\nSo,\n\n588\n00:33:20.168 --> 00:33:25.592\nthe TreeMaps are slower at this particular\nfunction than doing trial division is.\n\n589\n00:33:25.592 --> 00:33:28.395\nI wanna run that again, see if it's\na random occurrence, it's probably not.\n\n590\n00:33:28.395 --> 00:33:33.168\nYeah, so use hashMap for this,\nis the take away, right?\n\n591\n00:33:33.168 --> 00:33:38.190\nCuz it's, hashMap is faster and\nyet the treeMap is not faster.\n\n592\n00:33:38.190 --> 00:33:40.470\n&gt;&gt; But that actually\nillustrates a very valid point.\n\n593\n00:33:40.470 --> 00:33:42.200\nSometimes you have to do\na little bit of trial and\n\n594\n00:33:42.200 --> 00:33:47.850\nerror to see we're talking\nat a very high level.\n\n595\n00:33:47.850 --> 00:33:50.870\nI think it's a map, but\nis it a hash map or a tree map?\n\n596\n00:33:50.870 --> 00:33:54.560\nI think I need a set here, but\ndo I need a hash set or a tree set?\n\n597\n00:33:54.560 --> 00:33:58.800\nSo, sometimes you have to do a little bit\nof playing around just to see which one is\n\n598\n00:33:58.800 --> 00:33:59.650\nbest in your case.\n\n599\n00:33:59.650 --> 00:34:03.000\nNow, we're doing a lot of random number,\nkinda Get and Put things.\n\n600\n00:34:03.000 --> 00:34:08.020\nI will tell you,\nthis whole runtime behavior changes if you\n\n601\n00:34:08.020 --> 00:34:11.680\nneed to find whether something's prime and\nyou only need the numbers 1 through 100.\n\n602\n00:34:11.680 --> 00:34:13.960\nIf you do trial division and\n\n603\n00:34:13.960 --> 00:34:18.680\nyou do that 10 million times, well,\nyou have to do that every time.\n\n604\n00:34:18.680 --> 00:34:21.648\nIt's still fast, but\nthen if you've already pre-computed it,\n\n605\n00:34:21.648 --> 00:34:23.080\nthey'll look up as way faster.\n\n606\n00:34:23.080 --> 00:34:26.280\nSo, it ultimately depends\na lot on context as well.\n\n607\n00:34:26.280 --> 00:34:27.760\nBut Mark, definitely thank you.\n\n608\n00:34:27.760 --> 00:34:30.700\nThe collections API will\nmake your life easier.\n\n609\n00:34:30.700 --> 00:34:33.900\nBut we are out of time for this show,\nbut we got more JAVA coming at you,\n\n610\n00:34:33.900 --> 00:34:35.300\nso definitely stay tuned.\n\n611\n00:34:35.300 --> 00:34:39.400\nBut for now, signing of for DEV PRO TV,\nI've been your host Justin Dennison.\n\n612\n00:34:39.400 --> 00:34:39.920\n&gt;&gt; Mark Davis.\n\n613\n00:34:39.920 --> 00:34:41.282\n&gt;&gt; And we'll see you next time.\n\n614\n00:34:41.282 --> 00:34:46.205\n[MUSIC]\n\n",
          "vimeoId": "228423507"
        },
        {
          "description": "In this episode, Justin and Mark explore the Java Standard Library for cryptographic procedures including Symmetric and Asymmetric Key Encryption.",
          "length": "1320",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-28-security_and_cryptography-080317-PGM.00_21_51_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-28-security_and_cryptography-080317-PGM.00_21_51_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-objectorientedjava/techskills-objectorientedjava-1-28-security_and_cryptography-080317-PGM.00_21_51_24.Still001-sm.jpg",
          "title": "Security and Cryptography",
          "transcript": "",
          "vimeoId": "228657949"
        }
      ],
      "title": "Object Oriented Java"
    }
  ],
  "url": "java",
  "vLab": false
}
