{
  "description": "In this series, Daniel and Justin take a look at some of the more advanced scripting practices. Here they will empower your scripts by taking advantage of things like Functions, Libraries, creating graphical elements, sed (Stream EDitor), gawk, and Regular Expression.",
  "descriptionMD": "In this series, Daniel and Justin take a look at some of the more advanced scripting practices. Here they will empower your scripts by taking advantage of things like Functions, Libraries, creating graphical elements, sed (Stream EDitor), gawk, and Regular Expression.",
  "length": "29610",
  "name": "Linux Shell Scripting - Advanced",
  "practiceExam": false,
  "subtitle": "Advanced scripting",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this series, Daniel and Justin take a look at some of the more advanced scripting practices. Here they will empower your scripts by taking advantage of things like Functions, Libraries, creating graphical elements, sed (Stream EDitor), gawk, and Regular Expression.",
          "length": "207",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-0-0-0-overview-112117-CLN.00_00_05_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-0-0-0-overview-112117-CLN.00_00_05_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-0-0-0-overview-112117-CLN.00_00_05_29.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "244098562"
        },
        {
          "description": "In this episode, Daniel and Justin explore the use and form of Functions in bash scripts. Here they will define what a Function is, define a Function in a bash script, look at Function particulars like returning a value, local vs global variables, and the reuse of Function names within the same script. They also show you how to create and use a Function Library.",
          "length": "2253",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-1-1-1-functions-101117-PGM.00_37_52_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-1-1-1-functions-101117-PGM.00_37_52_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-1-1-1-functions-101117-PGM.00_37_52_05.Still001-sm.jpg",
          "title": "Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:02.380\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.380 --> 00:00:05.783\n[CROSSTALK]\n\n3\n00:00:05.783 --> 00:00:07.859\n[MUSIC]\n\n4\n00:00:07.859 --> 00:00:11.634\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.634 --> 00:00:16.130\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:16.130 --> 00:00:20.330\nI'm your host Justin Dennison, and well,\nwe have a treat in store for you today.\n\n7\n00:00:20.330 --> 00:00:25.350\nWe are starting our advanced shell\nscripting series today, our show so\n\n8\n00:00:25.350 --> 00:00:25.860\nto speak.\n\n9\n00:00:25.860 --> 00:00:28.053\nAnd well,\nwe're gonna be talking about functions,\n\n10\n00:00:28.053 --> 00:00:30.941\ncuz they seem to be paramount when\nwe start to increase in complexity.\n\n11\n00:00:30.941 --> 00:00:34.692\nAnd luckily, we have an expert on staff,\nin the building today,\n\n12\n00:00:34.692 --> 00:00:37.640\nto get us started, and\nthat is Mr. Daniel Lowrie!\n\n13\n00:00:37.640 --> 00:00:39.300\nHow are you doing today Daniel?\n\n14\n00:00:39.300 --> 00:00:40.879\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n15\n00:00:40.879 --> 00:00:42.040\n&gt;&gt; You've set the bar pretty high.\n\n16\n00:00:42.040 --> 00:00:43.759\n&gt;&gt; [LAUGH]\n&gt;&gt; This guy!\n\n17\n00:00:43.759 --> 00:00:45.163\n&gt;&gt; I gotta pump you up man.\n\n18\n00:00:45.163 --> 00:00:46.823\n&gt;&gt; So you're like, yeah,\nI got this, I got this!\n\n19\n00:00:46.823 --> 00:00:51.223\n[LAUGH]\n&gt;&gt; [INAUDIBLE] it's gonna get crazy.\n\n20\n00:00:51.223 --> 00:00:53.349\nBut with that,\nthat is what we're here to do today.\n\n21\n00:00:53.349 --> 00:00:56.392\nWe are starting our advanced\nshell scripting series, and\n\n22\n00:00:56.392 --> 00:00:59.110\nfunctions is a great\nplace to kick that off.\n\n23\n00:00:59.110 --> 00:01:01.270\nYou're thinking to yourself,\nokay, sounds good,\n\n24\n00:01:01.270 --> 00:01:03.100\nwhat are these functions\nof which you speak?\n\n25\n00:01:03.100 --> 00:01:05.434\nWhat do you mean when you say a function?\n\n26\n00:01:05.434 --> 00:01:07.410\nSo here's the thing.\n\n27\n00:01:07.410 --> 00:01:08.440\nYou've got a script.\n\n28\n00:01:08.440 --> 00:01:09.390\nIt's running, it does great.\n\n29\n00:01:10.700 --> 00:01:16.380\nWhat if you find yourself, you're looking\nat the code, it's 700 lines long,\n\n30\n00:01:16.380 --> 00:01:18.900\nand you're like man,\nI'm repeating myself a lot.\n\n31\n00:01:18.900 --> 00:01:22.823\nYou start noticing a repetitive\npattern of a certain bit of code,\n\n32\n00:01:22.823 --> 00:01:26.759\nthat you continually use over and\nover and over, and over again.\n\n33\n00:01:26.759 --> 00:01:28.246\nWell, guess what?\n\n34\n00:01:28.246 --> 00:01:33.264\nIf instead of retyping\nthat code multiple times,\n\n35\n00:01:33.264 --> 00:01:37.570\nwhat if I told you, and\nhold your hat down.\n\n36\n00:01:37.570 --> 00:01:40.892\nWhat if I told you you could type\nthat code once, give it a name,\n\n37\n00:01:40.892 --> 00:01:45.161\ncall it a function, and then reference\nthat function throughout the rest of your\n\n38\n00:01:45.161 --> 00:01:47.350\nscript, whenever you need it.\n\n39\n00:01:47.350 --> 00:01:48.870\nSo you only had to type it out once,\n\n40\n00:01:48.870 --> 00:01:53.580\nand anytime you need that code to run, you\njust reference the function that it's in.\n\n41\n00:01:53.580 --> 00:01:54.221\nI'm calling a function.\n\n42\n00:01:54.221 --> 00:01:56.067\nThat's what functions do, right?\n\n43\n00:01:56.067 --> 00:02:00.258\nThey give us this nice breakdown\nof anytime we want to do something\n\n44\n00:02:00.258 --> 00:02:03.010\nrepetitively, we put it into a function.\n\n45\n00:02:03.010 --> 00:02:07.221\nAnd then we can call that function\nwhenever we need it, and it works to our\n\n46\n00:02:07.221 --> 00:02:11.935\nadvantage, and really holds down on the\namount of typing and logic we have to do.\n\n47\n00:02:11.935 --> 00:02:13.959\nBecause you've got to remember,\n\n48\n00:02:13.959 --> 00:02:18.853\nany time we start getting into repetitive\nthings, we're prone to error, right?\n\n49\n00:02:18.853 --> 00:02:21.791\nAnd Justin, debugging,\nyour favorite thing on earth?\n\n50\n00:02:21.791 --> 00:02:23.357\n&gt;&gt; I tell you what-\n&gt;&gt; [LAUGH]\n\n51\n00:02:23.357 --> 00:02:25.813\n&gt;&gt; Every time I'm getting ready to debug\n\n52\n00:02:25.813 --> 00:02:30.730\nsomething, well, I throw a party,\ncall up a few friends, we have a blast.\n\n53\n00:02:30.730 --> 00:02:32.970\nAnd by that, I mean that's complete lie.\n\n54\n00:02:32.970 --> 00:02:34.456\nIt's probably one of\nthe more frustrating things.\n\n55\n00:02:34.456 --> 00:02:39.850\nAnd don't worry, if you get frustrated\nby it, that's a commonplace thing.\n\n56\n00:02:39.850 --> 00:02:42.250\nAnd this repetitiveness\nthat you're talking about.\n\n57\n00:02:42.250 --> 00:02:47.226\nAnother good way to catch that, and\nif you find yourself copy and pasting all\n\n58\n00:02:47.226 --> 00:02:52.297\nover the place, then you should go,\nI feel like I'm doing something wrong.\n\n59\n00:02:52.297 --> 00:02:53.795\n&gt;&gt; [LAUGH]\n&gt;&gt; Cuz you are,\n\n60\n00:02:53.795 --> 00:02:55.315\nyou should be using\nsomething like a function.\n\n61\n00:02:55.315 --> 00:02:57.500\n&gt;&gt; Yeah, and\nthat's what they're great for, right?\n\n62\n00:02:57.500 --> 00:03:03.200\nThey take us out of A, being more\nprone into erroring, because, yes I've\n\n63\n00:03:03.200 --> 00:03:07.708\ntyped this 1,000 times, but I fat-fingered\nthat one time, and now it doesn't work.\n\n64\n00:03:07.708 --> 00:03:11.312\nAnd I've gotta go find that one little\ninstance of where I made the mistake,\n\n65\n00:03:11.312 --> 00:03:13.243\nI've gotta read how many lines of code?\n\n66\n00:03:13.243 --> 00:03:16.052\nThis makes us more efficient, right?\n\n67\n00:03:16.052 --> 00:03:19.517\nAnd then again, like what Justin said,\nyou find yourself copying and\n\n68\n00:03:19.517 --> 00:03:23.230\npasting trying to avoid that, well,\nyou're not doing it right, right?\n\n69\n00:03:23.230 --> 00:03:25.136\nJust make a function,\nand call the function.\n\n70\n00:03:25.136 --> 00:03:30.488\nThere are some things we need to know\nabout functions, before we can use them.\n\n71\n00:03:30.488 --> 00:03:32.535\nA, one is the naming convention.\n\n72\n00:03:32.535 --> 00:03:39.873\nAnd B, kind of like when they\ncan be used appropriately, okay?\n\n73\n00:03:39.873 --> 00:03:42.380\nSo let's talk about the naming convention.\n\n74\n00:03:42.380 --> 00:03:43.020\nWith the names,\n\n75\n00:03:43.020 --> 00:03:46.400\nwhen you define a function, there's two\nways in which you can do it in batch.\n\n76\n00:03:47.670 --> 00:03:51.980\nYou can say function,\nthe name of the function, and\n\n77\n00:03:51.980 --> 00:03:54.560\nthen open curly brace, right?\n\n78\n00:03:54.560 --> 00:03:59.560\nOr you can do the name that you want the\nfunction to be, open-close parentheses,\n\n79\n00:03:59.560 --> 00:04:00.500\nthen open curly braces.\n\n80\n00:04:00.500 --> 00:04:04.410\nIt's all, the entirety of the code\nthat goes with the function,\n\n81\n00:04:04.410 --> 00:04:06.850\nwill be encased in those curly braces.\n\n82\n00:04:06.850 --> 00:04:10.430\nThere will be an opening curly brace,\nand a closing curly brace.\n\n83\n00:04:10.430 --> 00:04:14.292\nAnd that encompasses, that lets you know,\nthis is the boundaries of my function.\n\n84\n00:04:14.292 --> 00:04:18.830\nOf course we will see that momentarily, as\nwe look at our script of those functions.\n\n85\n00:04:18.830 --> 00:04:23.910\nBut you gotta keep that in mind that you\ngotta have the function name, you can\n\n86\n00:04:23.910 --> 00:04:29.800\neither use function, function name, open\ncurly brace, stuff, close curly brace.\n\n87\n00:04:29.800 --> 00:04:34.115\nOr you could use function name,\nopen-close parentheses,\n\n88\n00:04:34.115 --> 00:04:37.870\nopen curly brace, stuff,\nclose curly brace.\n\n89\n00:04:37.870 --> 00:04:40.299\nThat's the syntax which you can use.\n\n90\n00:04:40.299 --> 00:04:44.952\nI typically go with function name,\nopen and close parentheses, open and\n\n91\n00:04:44.952 --> 00:04:46.260\nclose curly brace.\n\n92\n00:04:46.260 --> 00:04:47.832\nThat's just my preference.\n\n93\n00:04:47.832 --> 00:04:52.291\nThere is no benefit that I know of,\nfor going one way or the other,\n\n94\n00:04:52.291 --> 00:04:57.645\nother than maybe having the word function\nthere, might lend to readability,\n\n95\n00:04:57.645 --> 00:05:01.880\nor somebody who's not 100%\non functions inside of Bash.\n\n96\n00:05:01.880 --> 00:05:04.155\nSo there you go,\ntake that with a grain of salt.\n\n97\n00:05:04.155 --> 00:05:09.844\nThe other thing was about where\nfunctions are to be used properly.\n\n98\n00:05:09.844 --> 00:05:16.973\nInside of your script, a function cannot\nbe referenced before it's defined, okay?\n\n99\n00:05:16.973 --> 00:05:19.818\nIt's a very important thing\nthat you have to understand.\n\n100\n00:05:19.818 --> 00:05:23.146\nIf I reference a function that I\nhave not yet defined, remember,\n\n101\n00:05:23.146 --> 00:05:26.610\nwe're in a scripting language,\nwe're going line by line by line.\n\n102\n00:05:26.610 --> 00:05:28.540\nAll of a sudden,\nI'll reference a function name,\n\n103\n00:05:28.540 --> 00:05:31.460\nit's gonna go, I haven't seen that yet.\n\n104\n00:05:31.460 --> 00:05:34.350\nBut it's just one line down,\nIt's right here, it doesn't do that.\n\n105\n00:05:34.350 --> 00:05:37.736\nIt stops there, looking for\nthe function name, going,\n\n106\n00:05:37.736 --> 00:05:39.861\nI don't know where this is, okay?\n\n107\n00:05:39.861 --> 00:05:43.810\nSo good practice is to take your\nfunctions whenever you build them,\n\n108\n00:05:43.810 --> 00:05:46.840\nput them at the very top of your script.\n\n109\n00:05:46.840 --> 00:05:51.730\nAnd just have a section, comment it out,\ncall it functions, bing, bing, bing,\n\n110\n00:05:51.730 --> 00:05:53.700\nbing, here's all\nthe functions I'm gonna have.\n\n111\n00:05:53.700 --> 00:05:59.470\nAnd then start your actual script area,\nso that any time you do call a function,\n\n112\n00:05:59.470 --> 00:06:01.320\nit's already been defined,\nit's already been seen,\n\n113\n00:06:01.320 --> 00:06:05.530\nIt's already been read in by the shell,\nand it can be properly referenced.\n\n114\n00:06:05.530 --> 00:06:09.270\nSo just some good things that\nyou might need to be aware of,\n\n115\n00:06:09.270 --> 00:06:10.480\nwhen it comes to using the functions.\n\n116\n00:06:11.870 --> 00:06:14.900\nAll right, so let's take a look\nat a script that uses functions,\n\n117\n00:06:14.900 --> 00:06:18.430\nsee how it works out, what it does,\nkind of thing, and all that goodness.\n\n118\n00:06:18.430 --> 00:06:22.988\nHere we go, I've got cat basic.sh, right?\n\n119\n00:06:22.988 --> 00:06:24.233\nWhat is that, what did I call it?\n\n120\n00:06:24.233 --> 00:06:27.640\nYeah, Func_basic.sh, all right,\nI'm gonna try keep this one.\n\n121\n00:06:27.640 --> 00:06:31.180\nFunc_basic.sh, here we go.\n\n122\n00:06:31.180 --> 00:06:34.685\nSo if I look through this thing here,\nI am gonna say it's a little more\n\n123\n00:06:34.685 --> 00:06:38.751\nrobust than the rest of the scripts that\nwe saw back in the subscripting basics.\n\n124\n00:06:38.751 --> 00:06:41.818\nWe're not in the basics anymore, ladies\nand gents, we're in the advanced stuff.\n\n125\n00:06:41.818 --> 00:06:44.428\nSo they're gonna get a little more length.\n\n126\n00:06:44.428 --> 00:06:47.879\nSo here I have a variable defined\nvar1 = 0, for whatever intents and\n\n127\n00:06:47.879 --> 00:06:49.409\npurposes I'm using that for.\n\n128\n00:06:49.409 --> 00:06:51.461\nA comment probably,\nthere would've been nice for\n\n129\n00:06:51.461 --> 00:06:52.950\nwhoever else would be reading this.\n\n130\n00:06:52.950 --> 00:06:58.284\nThen you'll see, I see disc,\nopen and close parentheses,\n\n131\n00:06:58.284 --> 00:07:02.479\nopen curly brace, stuff,\nclose curly brace.\n\n132\n00:07:02.479 --> 00:07:04.102\nThis is a function.\n\n133\n00:07:04.102 --> 00:07:07.102\nI've defined the disc function, okay?\n\n134\n00:07:07.102 --> 00:07:12.524\nAnd all it does is clear the screen,\ndo df -h,\n\n135\n00:07:12.524 --> 00:07:18.792\nand then post increments\nthe var1 variable, okay?\n\n136\n00:07:18.792 --> 00:07:20.963\nAnd then runs menu.\n\n137\n00:07:20.963 --> 00:07:22.668\nWell, what's that?\n\n138\n00:07:22.668 --> 00:07:25.353\nWell, if you look down here,\nI have a function called menu.\n\n139\n00:07:25.353 --> 00:07:29.714\nSo it's actually inside of a function\nreferencing another function that's in\n\n140\n00:07:29.714 --> 00:07:30.435\nthe script.\n\n141\n00:07:30.435 --> 00:07:31.609\nVery cool stuff, right?\n\n142\n00:07:31.609 --> 00:07:35.780\nSo you can kinda jump around from function\nto function, as you like, very fun.\n\n143\n00:07:37.230 --> 00:07:41.410\nHere are my other functions that I have,\nbigups has been defined,\n\n144\n00:07:41.410 --> 00:07:44.220\nit's clearing and\nit's looking for uptime, right?\n\n145\n00:07:44.220 --> 00:07:46.820\nKind of doing the same things here,\nrepetitive things.\n\n146\n00:07:46.820 --> 00:07:49.370\nA little bit different, that's why\nit had to have its own function.\n\n147\n00:07:49.370 --> 00:07:51.574\nI could have written one\nfunction in there, but\n\n148\n00:07:51.574 --> 00:07:53.845\nI'm trying to show you guys functions,\nright?\n\n149\n00:07:53.845 --> 00:07:57.492\nAnd then sysinfo, and\nthen our menu function,\n\n150\n00:07:57.492 --> 00:08:01.607\nwhich is gonna give me echo\nout all this information.\n\n151\n00:08:01.607 --> 00:08:05.430\nAnd you notice I've done echo block,\ninstead of a line, so hope it's out there.\n\n152\n00:08:05.430 --> 00:08:09.800\nTo do that, just echo, double quotes,\n\n153\n00:08:09.800 --> 00:08:12.250\nthen drop down the next line and\ntype in what you want to say.\n\n154\n00:08:12.250 --> 00:08:14.810\nDrop down the next line and type in what\nyou want to say, so on and so forth.\n\n155\n00:08:14.810 --> 00:08:16.970\nAnd then close it all\noff with double quotes.\n\n156\n00:08:16.970 --> 00:08:20.550\nAnd it'll know, echo that in that style,\nin that format.\n\n157\n00:08:21.670 --> 00:08:25.890\nMake a selection, okay,\nselection in, 1, 2 and 3.\n\n158\n00:08:25.890 --> 00:08:30.020\nAnd notice here in my case statement,\nI have got disc.\n\n159\n00:08:30.020 --> 00:08:33.710\nThat is a function,\nthat is me referencing the disk function.\n\n160\n00:08:33.710 --> 00:08:35.490\nI don't need the open and\nclose parenthesis there.\n\n161\n00:08:35.490 --> 00:08:38.450\nI just need the name of said function,\nokay?\n\n162\n00:08:39.960 --> 00:08:44.470\nI have referenced big apps for 2,\nsystem files for 3, and clear for 4.\n\n163\n00:08:44.470 --> 00:08:48.148\nAnd then anything else that if I may\nmake a selection that's not expected,\n\n164\n00:08:48.148 --> 00:08:51.530\nthen I'll say invalid selection,\nwhat do I do?\n\n165\n00:08:51.530 --> 00:08:56.520\nI drop back to the menu function, which is\nwhy I just now we are talking about this,\n\n166\n00:08:56.520 --> 00:08:59.820\nthis is very to say.\n\n167\n00:08:59.820 --> 00:09:01.396\nYou always have a main function.\n\n168\n00:09:01.396 --> 00:09:03.545\nWhile in Bash,\n\n169\n00:09:03.545 --> 00:09:09.040\nas you start typing into a Bash script,\nit sees that I'm in the main function.\n\n170\n00:09:09.040 --> 00:09:13.600\nIt's not defined as main, it's just,\nthat's my script, I have a main function.\n\n171\n00:09:13.600 --> 00:09:18.830\nWhereas here in C, you define function\nmain, right, it always has a main.\n\n172\n00:09:18.830 --> 00:09:20.470\nYou always have that going on.\n\n173\n00:09:20.470 --> 00:09:24.650\nI do that here so that I can recall it\nanytime I want instead of having to drop\n\n174\n00:09:24.650 --> 00:09:27.110\nthe shell, come back in and\nkind of cycle through that.\n\n175\n00:09:27.110 --> 00:09:31.010\nSo just setting it off as its own\nfunction, its own name called main.\n\n176\n00:09:32.090 --> 00:09:34.340\nI find that to be a bit more convenient.\n\n177\n00:09:35.620 --> 00:09:38.717\nSo there we go, that's what it does,\ncloses off the.\n\n178\n00:09:38.717 --> 00:09:42.660\nAnd then, you'll notice right\nhere I've got, clear and menu.\n\n179\n00:09:42.660 --> 00:09:45.790\nThis is actually the first\npart of the script that runs.\n\n180\n00:09:47.640 --> 00:09:48.800\nAnd you're like, what?\n\n181\n00:09:48.800 --> 00:09:52.130\nAll of the rest of this was me defining\nthe functions at the top of the script.\n\n182\n00:09:52.130 --> 00:09:53.370\nThey´re all defined out,\n\n183\n00:09:53.370 --> 00:09:56.368\nthey don´t actually get run until\nthey get called by the script.\n\n184\n00:09:56.368 --> 00:09:59.860\nGuess what,\nI'm doing a clear to clear the screen.\n\n185\n00:09:59.860 --> 00:10:02.440\nAnd then I´m calling function main so\n\n186\n00:10:02.440 --> 00:10:07.130\nwhich will jump me up here to\necho Linux SystemAdmin Toolkit.\n\n187\n00:10:07.130 --> 00:10:08.210\nAnd off we go, right?\n\n188\n00:10:08.210 --> 00:10:10.030\nSo hopefully that makes sense.\n\n189\n00:10:10.030 --> 00:10:12.910\nLet's see what it looks\nlike when we run it.\n\n190\n00:10:12.910 --> 00:10:16.341\nSo if I say \\funk_basic.sh, here we go,\n\n191\n00:10:16.341 --> 00:10:21.110\nI cleared the screen,\nI am in the Linus system toolkit.\n\n192\n00:10:21.110 --> 00:10:24.465\nIf you watched the previous\nseries on the basic stuff,\n\n193\n00:10:24.465 --> 00:10:26.680\nyou'll remember that I\nlove menu driven system.\n\n194\n00:10:26.680 --> 00:10:30.170\nSo that's what I am gonna do\nbecause I find them very helpful.\n\n195\n00:10:30.170 --> 00:10:32.570\nSo I like that that, so\nIf I want 1 i can hit 1.\n\n196\n00:10:32.570 --> 00:10:36.270\nAnd bing, it gives me the disk.\n\n197\n00:10:36.270 --> 00:10:38.190\nGreat, notice what else it did?\n\n198\n00:10:38.190 --> 00:10:39.800\nDropped me back to the main menu.\n\n199\n00:10:39.800 --> 00:10:41.330\nRight, because I defined\nthat as a function.\n\n200\n00:10:41.330 --> 00:10:44.630\nThat was the last thing in function disk\n\n201\n00:10:44.630 --> 00:10:47.750\nthat is was supposed to do\nwas go to the main function.\n\n202\n00:10:47.750 --> 00:10:49.260\nSo now you start seeing\nthe logic behind that.\n\n203\n00:10:50.600 --> 00:10:54.720\nNow I can make another selection\nif I want or if I'm done exit out.\n\n204\n00:10:54.720 --> 00:10:56.521\nSo, if I wanted to do 2 as well.\n\n205\n00:10:56.521 --> 00:10:58.240\nGreat, I get my up time,\n\n206\n00:10:58.240 --> 00:11:03.660\nif I want to 3 get the system info, get\nthat, great and when I'm done, 4, exit.\n\n207\n00:11:03.660 --> 00:11:07.380\nBut if I hit something like 5,\ninvalid selection.\n\n208\n00:11:07.380 --> 00:11:11.620\nSo, all that stuff is working out just\nlike I like and when I'm done, 4,\n\n209\n00:11:11.620 --> 00:11:12.910\nand I'm done.\n\n210\n00:11:12.910 --> 00:11:18.710\nSo, I did that by calling out functions\nsetting them off to theirselves.\n\n211\n00:11:18.710 --> 00:11:21.270\nAnd then all I have to do in the script\ninstead of writing off a bang, bang, bang,\n\n212\n00:11:21.270 --> 00:11:22.870\nbang, bang, bang, bang,\nbang, all of that stuff for\n\n213\n00:11:22.870 --> 00:11:26.430\neach one of those inside of my case\nstatement I just called in the functions.\n\n214\n00:11:26.430 --> 00:11:30.605\nBoth cleaner and easier to read and\nthen as complexity increases and\n\n215\n00:11:30.605 --> 00:11:32.660\nI start seeing that repetition.\n\n216\n00:11:32.660 --> 00:11:35.570\nWell then I can just call the function and\nit makes it a whole lot easier.\n\n217\n00:11:35.570 --> 00:11:39.400\n&gt;&gt; Now, Daniel, I want to go ahead and\nput my opinion out there.\n\n218\n00:11:39.400 --> 00:11:42.140\nWe talked about you can do it this way or\nthat way.\n\n219\n00:11:42.140 --> 00:11:46.550\nI actually recommend that you employ\nthe technique that Daniel does by putting\n\n220\n00:11:46.550 --> 00:11:47.710\neverything in functions.\n\n221\n00:11:47.710 --> 00:11:51.350\nAnd then only recalling\nfunctions to get things started.\n\n222\n00:11:51.350 --> 00:11:53.240\nLike a main, I know that's very C like.\n\n223\n00:11:53.240 --> 00:11:56.140\nI do it in a lot of other\nlanguages that I use,\n\n224\n00:11:56.140 --> 00:11:57.602\nespecially if I'm scripting something.\n\n225\n00:11:57.602 --> 00:12:00.660\nI wanna define all of these things,\nand now I wanna kick it off.\n\n226\n00:12:00.660 --> 00:12:04.330\nNow there are some utilities where I\njust wanna define functions in a file.\n\n227\n00:12:04.330 --> 00:12:06.150\nAnd I don't wanna run anything.\n\n228\n00:12:06.150 --> 00:12:08.950\nWell then I get some weirdness\nif I'm running and defining.\n\n229\n00:12:08.950 --> 00:12:13.880\nAnd so that also provides\nsome semantic meaning to it.\n\n230\n00:12:13.880 --> 00:12:14.900\nWhat is that?\n\n231\n00:12:14.900 --> 00:12:15.780\nThat's the meaning.\n\n232\n00:12:15.780 --> 00:12:19.130\nThat's the first thing,\nthat must be the main part, right?\n\n233\n00:12:19.130 --> 00:12:22.740\nSo it helps with organization,\nthought processes.\n\n234\n00:12:22.740 --> 00:12:25.580\nSo hey, ask that people do that.\n\n235\n00:12:25.580 --> 00:12:28.120\nYou don't have to,\nthere's nothing that says you have to.\n\n236\n00:12:28.120 --> 00:12:29.870\nBut it tends to make my life easier.\n\n237\n00:12:29.870 --> 00:12:31.510\nIt makes Daniel's life easier and\n\n238\n00:12:31.510 --> 00:12:36.000\nwell, two does not necessarily make\na very statistical strong point.\n\n239\n00:12:36.000 --> 00:12:40.310\nBut I've talked to other people and\nit is incredibly helpful in that regard.\n\n240\n00:12:40.310 --> 00:12:42.620\n&gt;&gt; Another interesting\nthing about functions.\n\n241\n00:12:42.620 --> 00:12:45.540\nWe're talking about the naming\nconventions, as well,\n\n242\n00:12:45.540 --> 00:12:49.520\nis what happens if you reuse a name,\nright?\n\n243\n00:12:49.520 --> 00:12:51.260\nWell you gotta be aware of that.\n\n244\n00:12:51.260 --> 00:12:55.930\nThe problem there lies, is that it will\nkinda treat it like a variable, right?\n\n245\n00:12:55.930 --> 00:13:01.170\nIn a variable, if I define var1=1 and\nthen down somewhere below I go, var1=5.\n\n246\n00:13:01.170 --> 00:13:03.680\nAnd then I echo var5 below that.\n\n247\n00:13:03.680 --> 00:13:06.042\nWell it doesn't say var1=1,\n\n248\n00:13:06.042 --> 00:13:11.460\nit says var1=5 because that's the last\nplace I defined what var1 was.\n\n249\n00:13:11.460 --> 00:13:15.520\nIf you continue to create functions\nwith the same name with different\n\n250\n00:13:17.100 --> 00:13:19.650\nstuff inside of them.\n\n251\n00:13:19.650 --> 00:13:22.190\nIt's gonna look at the last\none that has that name and\n\n252\n00:13:22.190 --> 00:13:24.550\ngo that's what you mean by that, right?\n\n253\n00:13:24.550 --> 00:13:26.510\nYou might get the first\niteration to work correctly.\n\n254\n00:13:26.510 --> 00:13:27.820\nYou might get something like that.\n\n255\n00:13:27.820 --> 00:13:29.335\nI've seen that kind of functional or\n\n256\n00:13:29.335 --> 00:13:35.780\na output where yeah it hit\nthe first function correctly.\n\n257\n00:13:35.780 --> 00:13:38.360\nBut then I referenced function\nagain later down the line,\n\n258\n00:13:38.360 --> 00:13:40.900\nand it went to the last\nfunction that was defined.\n\n259\n00:13:40.900 --> 00:13:43.700\nAnd it's using that for\neverywhere else after that.\n\n260\n00:13:43.700 --> 00:13:44.980\nSo you've gotta be really careful.\n\n261\n00:13:44.980 --> 00:13:48.600\nDon't name them the same name,\nthat's not a good practice anyway.\n\n262\n00:13:48.600 --> 00:13:51.160\nUnless you have said, you know what?\n\n263\n00:13:51.160 --> 00:13:58.210\nAt this point in time, I really do want to\nredefine what that function is, all right?\n\n264\n00:13:58.210 --> 00:14:00.190\nSo let's see how that works out.\n\n265\n00:14:00.190 --> 00:14:02.030\nSo you can kinda see what I mean and\n\n266\n00:14:02.030 --> 00:14:05.060\nwe'll look at the code and\nsee why it's breaking, okay?\n\n267\n00:14:05.060 --> 00:14:06.990\nSo I'm gonna run this guy.\n\n268\n00:14:06.990 --> 00:14:11.340\nIt's called function same name,\nthat's func_ samename like that.\n\n269\n00:14:12.832 --> 00:14:15.510\nIt says getting funky,\nI've got the funk, getting funky again.\n\n270\n00:14:15.510 --> 00:14:21.206\nI seem to have contracted the funk,\nvery funny.\n\n271\n00:14:21.206 --> 00:14:22.472\n[LAUGH] Justin's laughing.\n\n272\n00:14:22.472 --> 00:14:25.350\n&gt;&gt; [LAUGH] You're right,\nthat did make me chuckle.\n\n273\n00:14:25.350 --> 00:14:30.030\n&gt;&gt; So let's see what's going on,\nand see what's happening here.\n\n274\n00:14:30.030 --> 00:14:35.270\nIf I cat this,\n./funk_samename, there we go.\n\n275\n00:14:35.270 --> 00:14:40.130\nI've got a function called funky that\nsays echo, I've got the funk, right?\n\n276\n00:14:40.130 --> 00:14:43.160\nAnd it says, echo, getting funky.\n\n277\n00:14:43.160 --> 00:14:46.440\nSo this is not inside of that function.\n\n278\n00:14:46.440 --> 00:14:51.360\nRight, so I got the function, I say\necho getting funky, which it did right.\n\n279\n00:14:51.360 --> 00:14:57.786\nIt's the first thing we saw,\nthen I called the funky function\n\n280\n00:14:57.786 --> 00:15:03.340\nright the funky function that's fun\nlots of funk going on there right.\n\n281\n00:15:03.340 --> 00:15:05.250\nIt said, I've got the funk, great.\n\n282\n00:15:06.380 --> 00:15:11.230\nThen I create I redefined,\nthat's technically\n\n283\n00:15:11.230 --> 00:15:16.900\nwhat I'm doing is redefining what\nfunky is by reusing that name.\n\n284\n00:15:16.900 --> 00:15:19.890\nSo if reuse the name what happens?\n\n285\n00:15:19.890 --> 00:15:22.810\nIt says I seem to have contracted\nthe funk, but what do I do down here?\n\n286\n00:15:22.810 --> 00:15:25.975\nGetting funky again which it\nsays getting funky again.\n\n287\n00:15:25.975 --> 00:15:30.400\nAnd then I call funky if I expect\nit to say I've got the funk again,\n\n288\n00:15:31.480 --> 00:15:32.190\nthat's not gonna happen.\n\n289\n00:15:32.190 --> 00:15:37.890\nBecause technically by reading that name\nI've redefined what that function does.\n\n290\n00:15:37.890 --> 00:15:39.990\nAnd therefore I got unexpected results.\n\n291\n00:15:41.150 --> 00:15:45.040\nSo just keep that in mind\nwhen naming your functions.\n\n292\n00:15:45.040 --> 00:15:48.250\nI know it's kind of a contrived and\na bit of a funny example,\n\n293\n00:15:48.250 --> 00:15:50.750\nbut hopefully it hammers\nthat point across.\n\n294\n00:15:52.170 --> 00:15:55.883\nAll right,\nlet's work into returning a value, okay?\n\n295\n00:15:55.883 --> 00:16:00.365\nEvery now and then you wanna return\na value from your function for\n\n296\n00:16:00.365 --> 00:16:01.950\nscripting purposes.\n\n297\n00:16:01.950 --> 00:16:06.638\nI mean, I don't want to get into\nspecific Type of exit, value, and\n\n298\n00:16:06.638 --> 00:16:12.910\nwe use the return capabilities of the\nreturn command to make that happen, okay?\n\n299\n00:16:12.910 --> 00:16:16.860\nSo as always, I've got a script,\nclear this out, and\n\n300\n00:16:16.860 --> 00:16:21.930\nit is -/func_return like that.\n\n301\n00:16:21.930 --> 00:16:25.520\nIf I run it it says entering function 1,\nthe return value is 40.\n\n302\n00:16:25.520 --> 00:16:29.590\nAll right, let's make a little more\nsense about this by looking at it.\n\n303\n00:16:29.590 --> 00:16:37.160\nfunc, return, press H, here we go, I've\ngot fun one, name of my function, right?\n\n304\n00:16:37.160 --> 00:16:42.700\nCurly brace, here comes my stuff,\necho, entering function one\n\n305\n00:16:42.700 --> 00:16:47.355\nReturn this math problem of 20 + 20,\nright?\n\n306\n00:16:47.355 --> 00:16:49.980\nThen these are commented out,\n\n307\n00:16:49.980 --> 00:16:52.620\nI commented these out so\nwe can look at these in just a minute.\n\n308\n00:16:54.130 --> 00:16:57.320\nAnd then I close my curly brace.\n\n309\n00:16:57.320 --> 00:17:01.680\nIf I call fun1,\nit should echo out the return value.\n\n310\n00:17:01.680 --> 00:17:04.485\nAnd remember this little variable,\n\n311\n00:17:04.485 --> 00:17:09.160\nfrom taking that exit status\nof the last returned command.\n\n312\n00:17:10.160 --> 00:17:11.940\nSo the return value is such.\n\n313\n00:17:13.350 --> 00:17:14.680\nI do this, and I run it,\n\n314\n00:17:14.680 --> 00:17:19.320\nI get the return value is 40 since this,\nactually 20 +20 = 40.\n\n315\n00:17:19.320 --> 00:17:25.970\nSo if I wanna use a function to return\na specific type of return value.\n\n316\n00:17:25.970 --> 00:17:32.310\nLooking for specifics based off of\nthose values, I can do that, okay?\n\n317\n00:17:32.310 --> 00:17:34.590\nNow if I come in here and\nI uncomment some of this stuff.\n\n318\n00:17:34.590 --> 00:17:36.380\nLike it says, uncomment the next line and\n\n319\n00:17:36.380 --> 00:17:38.874\nsee what happens when\nthe exit code is over 255.\n\n320\n00:17:38.874 --> 00:17:45.430\nCuz remember, we have,\nstipulations, right?\n\n321\n00:17:45.430 --> 00:17:50.780\nCaveats, you can't have a returned value\nthat's out of range between 0 and 255.\n\n322\n00:17:50.780 --> 00:17:55.995\nSo that's something we have to take in\naccount when we're returning a value,\n\n323\n00:17:55.995 --> 00:17:56.650\nokay?\n\n324\n00:17:56.650 --> 00:17:58.290\nSo let's do that, let's go in here.\n\n325\n00:17:58.290 --> 00:18:02.680\nI will nano I almost typed in vim,\nto be honest with you.\n\n326\n00:18:02.680 --> 00:18:06.023\nIt almost happened, but it didn't [LAUGH].\n\n327\n00:18:06.023 --> 00:18:08.650\nFunk_return.sh, let's go in here.\n\n328\n00:18:10.230 --> 00:18:15.560\nAnd let's just comment this out,\nand we'll uncomment out\n\n329\n00:18:15.560 --> 00:18:21.090\nthis like so, and there we go.\n\n330\n00:18:21.090 --> 00:18:25.640\nWrite that out, we will rerun\nthat function and now you get\n\n331\n00:18:25.640 --> 00:18:30.626\nthe return value is 228,\necho function 1, all right?\n\n332\n00:18:30.626 --> 00:18:31.353\nSo that's what happens.\n\n333\n00:18:31.353 --> 00:18:33.687\nIt will return it but\nif you try to use it,\n\n334\n00:18:33.687 --> 00:18:36.381\nit's probably gonnao have an issue, right?\n\n335\n00:18:36.381 --> 00:18:40.674\nSo just keep that in mind that we want to\nstay within the range of return values or\n\n336\n00:18:40.674 --> 00:18:43.941\nexit values, of what were\ntypically associated with you.\n\n337\n00:18:43.941 --> 00:18:48.717\nUnless you want to make a custom value,\nwhich you could do.\n\n338\n00:18:48.717 --> 00:18:51.927\nBut, if you get outside of that range,\nother parts of your\n\n339\n00:18:51.927 --> 00:18:56.640\nscript might start to break if it's\nexpecting a specific type of value.\n\n340\n00:18:56.640 --> 00:18:59.440\nJust keep that in mind, one of,\nthat bee in your bonnet.\n\n341\n00:18:59.440 --> 00:19:00.080\n&gt;&gt; Well, Daniel,\n\n342\n00:19:00.080 --> 00:19:04.080\nyou definitely just taught me something\n&gt;&gt; it wouldn't be what I expected but\n\n343\n00:19:04.080 --> 00:19:07.310\nit seems we have kind of an overflow issue\nwhere it would have wrapped back around or\n\n344\n00:19:07.310 --> 00:19:11.230\nsomething like that because\nI think I returned 20, 20?\n\n345\n00:19:11.230 --> 00:19:13.385\n&gt;&gt; Yeah.\n&gt;&gt; But 255 is the limit so 250,\n\n346\n00:19:13.385 --> 00:19:16.918\nlet's come back around or\nsomething of that nature [CROSSTALK].\n\n347\n00:19:16.918 --> 00:19:21.094\n&gt;&gt; And you'll notice we'll have a look,\nlook what the actual code is,\n\n348\n00:19:21.094 --> 00:19:24.140\nwe uncommented at this line right here.\n\n349\n00:19:24.140 --> 00:19:29.250\nSo it's returning a value of 2,000 + 20,\nso this would be 20, 20, correct?\n\n350\n00:19:29.250 --> 00:19:33.600\nI think what we got, when we come down\nhere and we look at that all right,\n\n351\n00:19:33.600 --> 00:19:34.690\nit gave us 228.\n\n352\n00:19:34.690 --> 00:19:40.410\nThat's within range but\nit's not right, that's not what it is.\n\n353\n00:19:40.410 --> 00:19:45.110\nSo, like I said, just keep in mind these\nthings can kind of cause some issues\n\n354\n00:19:45.110 --> 00:19:49.780\ngoing down the rest of the script,\nif you get outside of your range.\n\n355\n00:19:49.780 --> 00:19:52.500\nBecause outside of range,\nit might not know what to do and\n\n356\n00:19:52.500 --> 00:19:55.880\ngive you some random value,\nso just keep that in mind.\n\n357\n00:19:55.880 --> 00:19:57.935\n&gt;&gt; Okay, that is not what I expected.\n\n358\n00:19:57.935 --> 00:19:59.480\n&gt;&gt; [LAUGH]\n&gt;&gt; And that would have been a debugging\n\n359\n00:19:59.480 --> 00:20:02.810\nsession where I'd have been like,\nall right, so I'm gonna go ahead and\n\n360\n00:20:02.810 --> 00:20:03.800\npack up my desk.\n\n361\n00:20:03.800 --> 00:20:06.340\nI'm gonna get out of here cuz I\ncan't figure out what's going on.\n\n362\n00:20:06.340 --> 00:20:10.600\nSo definitely keep that in mind, so that\nyou don't have those horrible struggles.\n\n363\n00:20:10.600 --> 00:20:12.650\n&gt;&gt; Yeah,\nthere's also another little thing.\n\n364\n00:20:12.650 --> 00:20:15.510\nRemember, we're talking exit values here,\nso\n\n365\n00:20:15.510 --> 00:20:17.880\nyou've gotta remember all\nthe rules still apply.\n\n366\n00:20:19.040 --> 00:20:23.110\nIt's gonna look at the last run command\nand see what its exit status was,\n\n367\n00:20:23.110 --> 00:20:25.390\nwhat its return value was, okay?\n\n368\n00:20:25.390 --> 00:20:31.910\nSo that being the case, what if I do this,\nwhat if I say, nano func_return.sh.\n\n369\n00:20:31.910 --> 00:20:35.248\nI go back down in here, you notice I've\ngot another line that's commented out.\n\n370\n00:20:35.248 --> 00:20:41.900\nLet's do this, uncomment this echo,\nthis is so fun, right?\n\n371\n00:20:42.970 --> 00:20:46.970\nThat might change if it's the last\nthing that's run, all right?\n\n372\n00:20:46.970 --> 00:20:51.890\nSo if it's run, the order,\nyou've gotta grab that value, and\n\n373\n00:20:51.890 --> 00:20:55.010\nmake sure that you grab it\nbefore you do anything else.\n\n374\n00:20:55.010 --> 00:21:00.950\nOtherwise, that anything else, that's\nthe exit status that you'll get instead.\n\n375\n00:21:00.950 --> 00:21:03.560\nSo again, all those rules apply.\n\n376\n00:21:03.560 --> 00:21:07.680\nSo if I do this, if I run fun1 and\nthen I run this eco statement, well,\n\n377\n00:21:07.680 --> 00:21:12.960\nthe eco statement success or failure or\nwhatever is gonna be the previous ecostat.\n\n378\n00:21:12.960 --> 00:21:16.170\nSo if I save this and I run it again.\n\n379\n00:21:16.170 --> 00:21:21.400\nYou see look, ecostat,\nthe return value is now zero,\n\n380\n00:21:21.400 --> 00:21:28.550\nbecause eco ran and it ran successfully,\nsuccessful return value is zero.\n\n381\n00:21:28.550 --> 00:21:33.180\nSo again, although good rules apply\nthat we normally would pay attention to,\n\n382\n00:21:33.180 --> 00:21:36.970\nyou just gotta know how they work with\nsaid functions, if you are looking for\n\n383\n00:21:36.970 --> 00:21:37.950\nreturn values, okay?\n\n384\n00:21:38.970 --> 00:21:40.440\nSo keep that in mind.\n\n385\n00:21:40.440 --> 00:21:46.650\nLet's also talk about output as\nin exit status, interesting.\n\n386\n00:21:46.650 --> 00:21:47.950\nWhat do I mean, all right?\n\n387\n00:21:47.950 --> 00:21:49.613\nLet's take a look at\nwhat I'm talking about.\n\n388\n00:21:49.613 --> 00:21:50.637\nLet me clear out here.\n\n389\n00:21:50.637 --> 00:21:57.946\nAnd I'm gonna run this script,\nit says ./func_output.sh.\n\n390\n00:21:57.946 --> 00:22:04.040\nSo, the exit code of function 1 is 40,\nso a custom exit code for myself there.\n\n391\n00:22:04.040 --> 00:22:08.760\nThe exit code of function 2 is 20,\nanother custom exit code for that.\n\n392\n00:22:08.760 --> 00:22:11.070\nAnd then the script ran successfully.\n\n393\n00:22:11.070 --> 00:22:13.300\nOkay, cool, what the heck is going on?\n\n394\n00:22:13.300 --> 00:22:16.980\nLet's take a look inside,\nand see what's going on.\n\n395\n00:22:16.980 --> 00:22:20.632\nI think I'll yeah, I'll just get it.\n\n396\n00:22:20.632 --> 00:22:24.240\nWe'll say funk_output.sh.\n\n397\n00:22:24.240 --> 00:22:28.041\nHere we go, a bit of over-scroll because\nit is a little bit longer on the screen\n\n398\n00:22:28.041 --> 00:22:28.856\nbut there we go.\n\n399\n00:22:28.856 --> 00:22:33.194\nFirst think I'm doing,\ndefining function one, Fun1, right?\n\n400\n00:22:33.194 --> 00:22:40.716\nEcho file is writable and\nI'm redirecting that to output fun1.text.\n\n401\n00:22:40.716 --> 00:22:46.989\nSo, interesting, I'm echoing the statement\nand outputting that to fun1.text,\n\n402\n00:22:46.989 --> 00:22:52.370\nand then I'm checking to see if\nthat was successful, all right?.\n\n403\n00:22:52.370 --> 00:22:54.620\nIf that is not equal 0,\n\n404\n00:22:54.620 --> 00:22:59.660\nthen echo 41 lets you know this it was\nan error, it was unwriteable else echo 4.\n\n405\n00:22:59.660 --> 00:23:03.807\nSo if this equal something,\nif it does equal 0,\n\n406\n00:23:03.807 --> 00:23:08.870\nthen I get that, I'm good to go,\nand I close my feed.\n\n407\n00:23:08.870 --> 00:23:10.460\nFunction two doing the same thing,\n\n408\n00:23:10.460 --> 00:23:13.480\nchecking another file to make\nsure that it is writeable.\n\n409\n00:23:13.480 --> 00:23:17.430\nSo a little, a little program, a little\nscript I wrote up on myself to check if\n\n410\n00:23:17.430 --> 00:23:23.520\ntwo files in my file system are actually\nwriteable instead of using LS dash L.\n\n411\n00:23:23.520 --> 00:23:27.070\nBut it works for\ndemonstrative purposes obviously.\n\n412\n00:23:28.410 --> 00:23:32.800\nDown here I say exit code\nequals whatever fun one is.\n\n413\n00:23:32.800 --> 00:23:37.150\nI'm doing command substitution, but\nnotice I'm calling the function.\n\n414\n00:23:37.150 --> 00:23:40.480\nAnd that value,\nwhatever it returns, right?\n\n415\n00:23:40.480 --> 00:23:45.175\nwhatever this is gonna be, echo 20 or\necho 21, echo 40, echo 41,\n\n416\n00:23:45.175 --> 00:23:49.437\nwhatever comes out of that,\nthat's what's gonna be an exit code.\n\n417\n00:23:49.437 --> 00:23:55.548\nThings are gonna echo the exit\nstatement of function 1 is exit code.\n\n418\n00:23:55.548 --> 00:23:58.796\nThe exit code of function\n2 is exit code 2.\n\n419\n00:23:58.796 --> 00:24:00.557\nRight, so define that there.\n\n420\n00:24:00.557 --> 00:24:04.503\nI want both those functions taking their\noutput, putting them into variables and\n\n421\n00:24:04.503 --> 00:24:06.860\nusing them as output, okay?\n\n422\n00:24:06.860 --> 00:24:08.910\nThen I run this if statement.\n\n423\n00:24:10.250 --> 00:24:17.489\nJust checking for success or errors\nsaying if exit code is equal to 40 and\n\n424\n00:24:17.489 --> 00:24:24.043\nexit code 2 is equal to 20,\nthen exit script ran successfully.\n\n425\n00:24:24.043 --> 00:24:28.445\nIf I get anything other than that, cuz\nboth of those things have to ring true,\n\n426\n00:24:28.445 --> 00:24:31.470\nthen they're gonna say there were errors.\n\n427\n00:24:31.470 --> 00:24:32.510\nThere we go.\n\n428\n00:24:32.510 --> 00:24:35.210\nLet's do it.\nLet's see what happens\n\n429\n00:24:35.210 --> 00:24:38.080\nif I make something where\nI can't write to it.\n\n430\n00:24:38.080 --> 00:24:44.210\nAll right, let's say I do some script\nruns and accidentally takes ownership.\n\n431\n00:24:44.210 --> 00:24:48.568\nI'll do sudo chown of\nI'll say I'll give root\n\n432\n00:24:48.568 --> 00:24:53.389\nbecause I don't have any\nother users on my system.\n\n433\n00:24:53.389 --> 00:24:57.570\nI'll put outputfun2.txt.\n\n434\n00:24:57.570 --> 00:24:58.510\nWe'll do that.\n\n435\n00:24:58.510 --> 00:25:07.380\nSo change ownership, I'm changing\nownership of that output fun 2.txt.\n\n436\n00:25:07.380 --> 00:25:09.640\nNow, I should not have, as D Lowrie,\n\n437\n00:25:09.640 --> 00:25:13.790\nI should not have rights to\nwrite to that file, okay?\n\n438\n00:25:13.790 --> 00:25:18.203\nSo if I rerun my function output,\naha, I get my error.\n\n439\n00:25:18.203 --> 00:25:19.724\nStandard error comes to me.\n\n440\n00:25:19.724 --> 00:25:24.960\nThis is the exit code of function 1 is 40,\nletting me know that was successful.\n\n441\n00:25:24.960 --> 00:25:28.450\nAnd exit code of function 2 is 21,\nletting me know there were errors.\n\n442\n00:25:28.450 --> 00:25:31.900\nAnd of course, it exits out with,\nthere were errors.\n\n443\n00:25:31.900 --> 00:25:35.049\nAnd I'm able to use that to\nmanipulate my script below,\n\n444\n00:25:35.049 --> 00:25:37.532\njust inside of the functionality, right?\n\n445\n00:25:37.532 --> 00:25:41.455\nI was able to take that return\nvalue that I defined, and\n\n446\n00:25:41.455 --> 00:25:44.110\nuse it elsewhere inside the script.\n\n447\n00:25:44.110 --> 00:25:46.580\nSo it can be very helpful for you as well.\n\n448\n00:25:46.580 --> 00:25:50.963\n&gt;&gt; All right, Daniel,\nI think I'm starting to get that function\n\n449\n00:25:50.963 --> 00:25:54.437\nreturns within Bash are more\nabout exit status and\n\n450\n00:25:54.437 --> 00:25:58.423\nmaking sure things have occurred\nthat you want to occur.\n\n451\n00:25:58.423 --> 00:26:01.600\nNot necessarily returning like\ncomplex data structures or something.\n\n452\n00:26:01.600 --> 00:26:03.158\n&gt;&gt; Sure.\n&gt;&gt; That you would normally be used to,\n\n453\n00:26:03.158 --> 00:26:04.540\nif possible in other\nprogramming languages.\n\n454\n00:26:04.540 --> 00:26:09.309\nSo they're more decision-making or\ninformational tactics than they\n\n455\n00:26:09.309 --> 00:26:14.800\nare actually, I wanna return 1.3 million\nas the result of some computations.\n\n456\n00:26:14.800 --> 00:26:16.940\n&gt;&gt; Correct.\nI mean, not that you couldn't do that but\n\n457\n00:26:16.940 --> 00:26:18.730\nlike you said, typically,\nthis is how we're using it.\n\n458\n00:26:18.730 --> 00:26:21.820\nWas there a problem or was there not?\n\n459\n00:26:21.820 --> 00:26:24.490\nIt's mostly informational for us.\n\n460\n00:26:25.500 --> 00:26:28.640\nYou could use it in a while loop,\nsome type of looping, right?\n\n461\n00:26:28.640 --> 00:26:32.788\nSo if I had a while loop that\nsaid while one equals one, or\n\n462\n00:26:32.788 --> 00:26:35.630\nvar one equals one, do such and such.\n\n463\n00:26:35.630 --> 00:26:40.270\nAnd then if I call a function in there and\nthat function modifies that variable.\n\n464\n00:26:40.270 --> 00:26:41.930\nChanges it from one to two.\n\n465\n00:26:41.930 --> 00:26:43.070\nAnd notice, that exit the while loop.\n\n466\n00:26:43.070 --> 00:26:45.130\nYou could use it that way.\n\n467\n00:26:45.130 --> 00:26:46.330\nThere you go, right?\n\n468\n00:26:46.330 --> 00:26:51.960\nBut, typically, exit status is,\nthat's what we're doing, right?\n\n469\n00:26:51.960 --> 00:26:53.375\nThat being said, let's see here.\n\n470\n00:26:53.375 --> 00:26:56.460\nWe're going to talk about\nvariables in functions.\n\n471\n00:26:56.460 --> 00:26:59.831\nThis is something we have to make\nsure we have a good handle on.\n\n472\n00:26:59.831 --> 00:27:04.787\nThe cool thing is, is that we can\ndefine variables and they work, and\n\n473\n00:27:04.787 --> 00:27:07.560\nI can call them in the function.\n\n474\n00:27:07.560 --> 00:27:12.280\nSo if I say var1=1 in my script and\nthen I create a function and I say,\n\n475\n00:27:12.280 --> 00:27:16.920\necho var1 inside of that function,\nit'll look at that variable and\n\n476\n00:27:16.920 --> 00:27:18.522\n[SOUND] pop it right out.\n\n477\n00:27:18.522 --> 00:27:19.510\nDo the thing you want to do.\n\n478\n00:27:20.570 --> 00:27:25.846\nProblem comes in is when I start defining\nvariables inside of the functions, okay?\n\n479\n00:27:25.846 --> 00:27:29.133\nSo we've got two types of variables now,\nnot just well,\n\n480\n00:27:29.133 --> 00:27:32.540\nwe've seen multiple types\nof variables before.\n\n481\n00:27:32.540 --> 00:27:34.490\nBut we have global variables, and\n\n482\n00:27:34.490 --> 00:27:38.960\nin this context that means,\nglobal to these scripts.\n\n483\n00:27:38.960 --> 00:27:41.480\nEverything in the script can see this.\n\n484\n00:27:41.480 --> 00:27:46.660\nAnd this is basically any variable\ndefined outside of a function, okay?\n\n485\n00:27:48.000 --> 00:27:50.140\nThis could be true, global variable,\n\n486\n00:27:50.140 --> 00:27:53.610\nenvironmental variables,\npassed along in there, right?\n\n487\n00:27:53.610 --> 00:27:54.720\nEverything can see that.\n\n488\n00:27:54.720 --> 00:27:57.200\nMy function can see it,\nall the rest of the script can see it,\n\n489\n00:27:57.200 --> 00:27:59.412\nand they can work with it, and handle it.\n\n490\n00:27:59.412 --> 00:28:04.740\nThe problem comes in is if I start\ndefining what variables do or\n\n491\n00:28:04.740 --> 00:28:10.660\nwhat their value is inside of a function,\nI might want to do this but\n\n492\n00:28:10.660 --> 00:28:13.670\nif it's already existed,\nif it's a global variable,\n\n493\n00:28:13.670 --> 00:28:18.060\ninside of that script,\nI'm redefining what that is.\n\n494\n00:28:18.060 --> 00:28:20.490\nAnd maybe that's the kind of thing I want.\n\n495\n00:28:20.490 --> 00:28:21.890\nBut maybe it's not.\n\n496\n00:28:21.890 --> 00:28:24.260\nMaybe I just like using var1 and\n\n497\n00:28:24.260 --> 00:28:29.070\nI want variables to only\nwork inside of a function.\n\n498\n00:28:29.070 --> 00:28:33.000\nI want them to be function variables,\nalso known as local variables.\n\n499\n00:28:33.000 --> 00:28:36.953\nAnd we do that by saying local and\nthen the variable number.\n\n500\n00:28:36.953 --> 00:28:39.114\nAnd that way I can reuse\nvariable names and\n\n501\n00:28:39.114 --> 00:28:41.910\nthey're only local to that\nfunction itself, okay?\n\n502\n00:28:42.920 --> 00:28:45.000\nHopefully that is a sense-making thing.\n\n503\n00:28:45.000 --> 00:28:48.430\nAnd we will be able to\nwork our way through it.\n\n504\n00:28:48.430 --> 00:28:49.770\nHopefully I got more time.\n\n505\n00:28:49.770 --> 00:28:52.432\nThat's quite-\n&gt;&gt; Actually I was gonna ask you\n\n506\n00:28:52.432 --> 00:28:54.760\nabout that,\nI know you got a couple of other things.\n\n507\n00:28:54.760 --> 00:28:55.960\nAre we gonna have time?\n\n508\n00:28:55.960 --> 00:28:57.148\n&gt;&gt; Yeah.\n&gt;&gt; Should we come back for\n\n509\n00:28:57.148 --> 00:28:58.837\nmaybe a part two just to\n[CROSSTALK] some buffer.\n\n510\n00:28:58.837 --> 00:29:01.564\n&gt;&gt; Yeah I think we might go over\ntime by what, five minutes?\n\n511\n00:29:01.564 --> 00:29:06.830\nBut it would be a very short part two,\nso I just say we go overtime.\n\n512\n00:29:06.830 --> 00:29:09.170\nJust in here,\nwe're gonna call an audible here.\n\n513\n00:29:09.170 --> 00:29:10.240\nHere we go, ladies and gents.\n\n514\n00:29:10.240 --> 00:29:11.200\nLet's do this.\n\n515\n00:29:11.200 --> 00:29:12.010\nSo let's see here.\n\n516\n00:29:12.010 --> 00:29:14.470\nI've got this function global var.\n\n517\n00:29:14.470 --> 00:29:15.100\nLet's cap that.\n\n518\n00:29:15.100 --> 00:29:20.850\nLet's clear and we'll say cat,\nfunc, can I do it?\n\n519\n00:29:20.850 --> 00:29:22.390\nYeah, there we go.\n\n520\n00:29:22.390 --> 00:29:26.600\nGlobal var, and a bit going on,\nbut let's take a look here.\n\n521\n00:29:26.600 --> 00:29:28.240\nNot too much.\n\n522\n00:29:28.240 --> 00:29:33.033\nHere's my function, var1 = this math\nproblem, var2 = this math problem,\n\n523\n00:29:33.033 --> 00:29:36.895\nvar3 = that first math problem\n+ the second math problem, and\n\n524\n00:29:36.895 --> 00:29:41.920\nthen we're gonna echo the results of var3,\nwhatever's in that var3 variable.\n\n525\n00:29:43.010 --> 00:29:47.732\nBut you also notice down here\nI've got var1 = 5 and var2 = 9.\n\n526\n00:29:47.732 --> 00:29:52.950\nBut up here I'm saying var1 equals\nthis math 4+3, whatever that is.\n\n527\n00:29:52.950 --> 00:29:54.640\nSeven, right?\n\n528\n00:29:54.640 --> 00:29:56.538\nAnd var2 equals 3+3, which is six.\n\n529\n00:29:56.538 --> 00:30:01.877\nOkay, but because I did not define\nthese as local, they're gonna see this\n\n530\n00:30:01.877 --> 00:30:07.630\nglobal variable, it's gonna redefine\nwhat that global variable is.\n\n531\n00:30:07.630 --> 00:30:12.650\nAnd when we call that right here,\nFun1 we start echoing.\n\n532\n00:30:12.650 --> 00:30:13.910\nI put this information there so\n\n533\n00:30:13.910 --> 00:30:18.190\nthat we can see what it's supposed to be\nversus what's actually happening, okay?\n\n534\n00:30:18.190 --> 00:30:22.420\nSo, our variable should be var1 is 5,\nand var2 is 9.\n\n535\n00:30:22.420 --> 00:30:26.507\nAnd then we're going to say\nif var1 is greater than var2,\n\n536\n00:30:26.507 --> 00:30:31.085\nvar1 is greater than var2,\nit shouldn't be, then echo var1,\n\n537\n00:30:31.085 --> 00:30:35.532\nwhatever var1 is, is greater than var2,\nwhatever var2 is.\n\n538\n00:30:35.532 --> 00:30:38.680\nWe're going to echo their values,\nso we can see what they are.\n\n539\n00:30:40.400 --> 00:30:45.320\nIf var1 is less than var2 echo var1\nis less than var2, elif var1 and\n\n540\n00:30:45.320 --> 00:30:48.390\nvar2 are equal,\nthen my catch-all statement, right?\n\n541\n00:30:48.390 --> 00:30:50.150\nAnd then we're off to the races.\n\n542\n00:30:50.150 --> 00:30:55.865\nSo if run this, if I say,\n./func_globalvar.sh,\n\n543\n00:30:55.865 --> 00:31:00.225\nit says the sum of seven and three is 13.\n\n544\n00:31:00.225 --> 00:31:05.605\nBut remember, var1 is supposed to be 5 and\nvar2 should be 9.\n\n545\n00:31:05.605 --> 00:31:07.700\nThis is our variable.\n\n546\n00:31:07.700 --> 00:31:13.480\nShould be var1 and var2 is 9,\nvar1 is 7, and var2 is 6.\n\n547\n00:31:13.480 --> 00:31:18.190\nBecause up here in our function we\ndid not label it as a local variable.\n\n548\n00:31:18.190 --> 00:31:20.370\nSo what are we gonna do,\nwe''ve gotta label it as a local variable.\n\n549\n00:31:20.370 --> 00:31:22.749\nI've already kinda done that,\n\n550\n00:31:22.749 --> 00:31:28.221\nwith another script which is cat\nfunction local var.sh, and here we go.\n\n551\n00:31:28.221 --> 00:31:33.059\nAnd you'll notice, all I had to do\nwas tag local at the front of that,\n\n552\n00:31:33.059 --> 00:31:36.080\nand that makes them local variables.\n\n553\n00:31:36.080 --> 00:31:40.968\nAnd now when I run this script,we\nshould get a better type of output\n\n554\n00:31:40.968 --> 00:31:42.194\nfunc local var.\n\n555\n00:31:42.194 --> 00:31:44.627\nAnd there we go, the sum of 7 and 6 is 13.\n\n556\n00:31:44.627 --> 00:31:49.856\nThere's the math that we want and\nthen our variables should be 1 and\n\n557\n00:31:49.856 --> 00:31:53.815\n5, r1 is 5,\nwhich is less than 32 which is 9.\n\n558\n00:31:53.815 --> 00:31:55.354\nIn all the correct, so\n\n559\n00:31:55.354 --> 00:31:59.972\nbe careful when you're declaring\nvariables inside of functions.\n\n560\n00:31:59.972 --> 00:32:03.453\nIf you want a global variable,\nthat's fine, you can do that.\n\n561\n00:32:03.453 --> 00:32:05.830\nJust be aware,\nyou are calling it a global variable.\n\n562\n00:32:05.830 --> 00:32:09.927\nIf you're defining a variable, you want\nit to be localized inside of there to be\n\n563\n00:32:09.927 --> 00:32:14.010\nused, and not stop on any variables\nthat you've called in the past.\n\n564\n00:32:14.010 --> 00:32:16.260\nJust add that local term to it and\nyou should be good to go.\n\n565\n00:32:17.570 --> 00:32:20.460\nLast thing we wanna talk about is\ncreating a library which is really cool,\n\n566\n00:32:20.460 --> 00:32:25.367\nit's a lot of fun, what if I said man\nthat function I created was great,\n\n567\n00:32:25.367 --> 00:32:28.040\nthat's got a lot of application.\n\n568\n00:32:28.040 --> 00:32:30.580\nI could repurpose that for\nall sorts of things.\n\n569\n00:32:30.580 --> 00:32:33.760\nCool thing is you can repurpose that for\nall sorts of things.\n\n570\n00:32:33.760 --> 00:32:36.780\nInstead of having to just,\nwell lets open that file up, copy and\n\n571\n00:32:36.780 --> 00:32:39.690\npaste it into this new script I'm writing.\n\n572\n00:32:39.690 --> 00:32:45.710\nWhat if I told you you could just\ncreate a file with a function in it and\n\n573\n00:32:45.710 --> 00:32:49.050\nreference the file and, right?\n\n574\n00:32:49.050 --> 00:32:50.240\nBlow your mind.\n\n575\n00:32:50.240 --> 00:32:53.520\nNow, I can just have groups of files\nthat are just libraries of functions,\n\n576\n00:32:54.640 --> 00:32:56.820\nreference that and\nI will have even to type them there.\n\n577\n00:32:56.820 --> 00:32:59.100\nI already done that,\nI just referenced the filename.\n\n578\n00:32:59.100 --> 00:33:02.030\nAnd I can make new script,\nnew script, new script.\n\n579\n00:33:02.030 --> 00:33:05.250\nAnd they all can take\nbenefit of using that file.\n\n580\n00:33:05.250 --> 00:33:06.900\nI love this part, right?\n\n581\n00:33:06.900 --> 00:33:08.000\nSo what do we do?\n\n582\n00:33:09.040 --> 00:33:10.915\nLet's take a look at our script.\n\n583\n00:33:10.915 --> 00:33:16.810\nIt is clear, cat func.sysAdmin.\n\n584\n00:33:16.810 --> 00:33:17.810\nHere we go.\n\n585\n00:33:17.810 --> 00:33:19.660\nSo I've got the sysAdmin tool here.\n\n586\n00:33:19.660 --> 00:33:21.580\nKnow I love this is admin tool.\n\n587\n00:33:21.580 --> 00:33:24.730\nSuch a great demonstrative thing here.\n\n588\n00:33:24.730 --> 00:33:25.992\nAnd here we go,\n\n589\n00:33:25.992 --> 00:33:32.027\nthis is the line that makes it all\nworthwhile ./dotfunclibrary.lip.\n\n590\n00:33:32.027 --> 00:33:38.953\nSo if I cat func library,\nyeah func_library.lib\n\n591\n00:33:38.953 --> 00:33:44.589\nInside of here I just have some comments,\n\n592\n00:33:44.589 --> 00:33:49.916\nfunction library, check disk usage.\n\n593\n00:33:49.916 --> 00:33:55.651\nI have diskie, df-h, duf-chd1, [INAUDIBLE]\nhere I've got another one called\n\n594\n00:33:55.651 --> 00:34:02.240\nnettie doing an ifconfig thing looking for\nthe IP address of the network adapter.\n\n595\n00:34:02.240 --> 00:34:04.110\nI have two functions in a separate file.\n\n596\n00:34:05.370 --> 00:34:09.021\nSo let's see here what's going on?\n\n597\n00:34:09.021 --> 00:34:13.848\nThis script is broken by\nnature because I wanted to see\n\n598\n00:34:13.848 --> 00:34:18.674\nit show you what it looks like\nwhat happens when you run\n\n599\n00:34:18.674 --> 00:34:23.072\na func_library,\nI am not spelling it correct,\n\n600\n00:34:23.072 --> 00:34:28.055\nyeas I'm not spelling it\nright it's it's sysAdmin.\n\n601\n00:34:28.055 --> 00:34:31.830\n[LAUGH] That was the library,\npay no attention.\n\n602\n00:34:31.830 --> 00:34:33.830\nThere we go, fire it off.\n\n603\n00:34:33.830 --> 00:34:36.563\nDisk usage, sure, let me crank that out.\n\n604\n00:34:36.563 --> 00:34:40.207\nDisk command not found.\n\n605\n00:34:40.207 --> 00:34:42.450\nAll right, what about network?\n\n606\n00:34:42.450 --> 00:34:43.900\nIt's not found.\n\n607\n00:34:44.960 --> 00:34:47.238\nOkay, well I'll exit out,\ncuz I don't have much options left.\n\n608\n00:34:47.238 --> 00:34:49.227\nThe problem was, if we look back in there,\n\n609\n00:34:49.227 --> 00:34:52.729\nI'll nano it this time just we're\ngonna make some modifications to this.\n\n610\n00:34:52.729 --> 00:34:57.858\nIf I say plunk sysAdmin, like that,\nthe problem is that you can't\n\n611\n00:34:57.858 --> 00:35:03.185\njust call it like, function like\nyou would in normal thing, right?\n\n612\n00:35:03.185 --> 00:35:05.186\nSo what I'm gonna do is I'm\ngonna comment that out.\n\n613\n00:35:05.186 --> 00:35:09.050\nI'm gonna un-comment this.\n\n614\n00:35:09.050 --> 00:35:13.510\nNow actually this line and\nthis line do the same thing.\n\n615\n00:35:13.510 --> 00:35:16.140\nIt's basically employing\nthe source command.\n\n616\n00:35:16.140 --> 00:35:20.330\nIt's saying I want to\nbasically repurpose this.\n\n617\n00:35:20.330 --> 00:35:22.500\nI wanna bring it in to this shell.\n\n618\n00:35:22.500 --> 00:35:23.390\nI need it here.\n\n619\n00:35:23.390 --> 00:35:29.020\nI can't just call it like I\nwould any other script, okay?\n\n620\n00:35:29.020 --> 00:35:30.996\nBecause what happens\nwhen you call on script?\n\n621\n00:35:30.996 --> 00:35:32.035\nIt spawns a shell.\n\n622\n00:35:32.035 --> 00:35:35.846\nAnd that shell is cut off from\nthe rest of the world, so\n\n623\n00:35:35.846 --> 00:35:40.950\nif I use source it's saying well I can\nsource that in, I can bring it in.\n\n624\n00:35:40.950 --> 00:35:44.780\nAll you have to do is the period and\nthen call your library or\n\n625\n00:35:44.780 --> 00:35:47.980\nthe word source and\nthen call your library, all right?\n\n626\n00:35:47.980 --> 00:35:50.220\nSo to make this work it's that simple.\n\n627\n00:35:50.220 --> 00:35:53.540\nJust put a period dot\nslash library name or\n\n628\n00:35:53.540 --> 00:35:58.630\npath to your library or\nsource path to your library, okay?\n\n629\n00:35:58.630 --> 00:36:00.820\nVery cool.\nNow that I have that uncommented,\n\n630\n00:36:00.820 --> 00:36:04.480\nI should be able to save and\nexit, and rerun it.\n\n631\n00:36:04.480 --> 00:36:09.080\nAnd now when I do one, I get my disk\nusage, look at that, everything's great.\n\n632\n00:36:09.080 --> 00:36:13.350\nAdd a two, look at that, I get well yeah.\n\n633\n00:36:13.350 --> 00:36:15.670\nI was on a different network when\nthis ran so I got no output.\n\n634\n00:36:15.670 --> 00:36:19.400\nI'd have to change that\ncommand when I was testing it.\n\n635\n00:36:19.400 --> 00:36:20.590\nBut it did run.\n\n636\n00:36:20.590 --> 00:36:21.380\nAnd that was the purpose.\n\n637\n00:36:21.380 --> 00:36:25.650\nI didn't get an error that said\nthat function is not found, okay?\n\n638\n00:36:25.650 --> 00:36:29.210\nSo if you wanna call that library and\nI do suggest if you're using libraries,\n\n639\n00:36:29.210 --> 00:36:30.030\nespecially with stuff,\n\n640\n00:36:30.030 --> 00:36:33.390\nyou realize that it can be really,\nreally helpful in other scripts.\n\n641\n00:36:33.390 --> 00:36:35.760\nJust create a library file out of it and\n\n642\n00:36:35.760 --> 00:36:39.050\nemploy them in your scripts cuz\nthey are super, super handy.\n\n643\n00:36:39.050 --> 00:36:42.340\nJustin, functions, ball wrapped up.\n\n644\n00:36:42.340 --> 00:36:43.140\nI'm gonna call it a day.\n\n645\n00:36:43.140 --> 00:36:44.920\n&gt;&gt; All right, well there you have it.\n\n646\n00:36:44.920 --> 00:36:49.002\nAnd just quick aside, interestingly\nenough because Neddy is a function,\n\n647\n00:36:49.002 --> 00:36:50.442\nyou have to make a change.\n\n648\n00:36:50.442 --> 00:36:53.590\nIf you're using in all your other files,\nyou only have to change it one place so\n\n649\n00:36:53.590 --> 00:36:56.643\nit then kind of propagates through all\nthe other scripts that depend on it and\n\n650\n00:36:56.643 --> 00:36:58.025\nI don't have to go copy and paste or\n\n651\n00:36:58.025 --> 00:37:00.292\nchange all those other places\nthat have copy and paste.\n\n652\n00:37:00.292 --> 00:37:05.066\nSo functions are very powerful and\nwell other than those couple edge cases\n\n653\n00:37:05.066 --> 00:37:10.140\nthat we need to be careful of, I encourage\nyou to use them quite liberally.\n\n654\n00:37:10.140 --> 00:37:13.850\nBut we are out of time for this episode so\nwe're gonna go ahead and wrap this one up.\n\n655\n00:37:13.850 --> 00:37:18.080\nSo for now, signing out for ITProTV,\nI've been your host Justin Dennison.\n\n656\n00:37:18.080 --> 00:37:18.800\n&gt;&gt; I'm Daniel Lowrie.\n\n657\n00:37:18.800 --> 00:37:21.048\n&gt;&gt; And we'll see you next time.\n\n658\n00:37:21.048 --> 00:37:26.966\n[MUSIC]\n\n659\n00:37:26.966 --> 00:37:30.293\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237913963"
        }
      ],
      "title": "Functions and Libraries"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin introduce you to the powerful \"sed\" Stream Editor program. Here they will start building a foundation of sed knowledge in order to empower your scripts to carve out and modify speficic data during script execution. Here they show you running sed, using multiple sed commands, sed script files, substitution flags, and the substitution command proper.",
          "length": "1772",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-1-intro_to_sed-101117-PGM.00_29_55_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-1-intro_to_sed-101117-PGM.00_29_55_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-1-intro_to_sed-101117-PGM.00_29_55_00.Still001-sm.jpg",
          "title": "Intro to Sed",
          "transcript": "WEBVTT\n\n1\n00:00:00.190 --> 00:00:01.160\nWelcome to IT Pro TV.\n\n2\n00:00:01.160 --> 00:00:08.324\nI'm your host Don [CROSSTALK]\n\n3\n00:00:08.324 --> 00:00:11.933\n&gt;&gt; You're watching IT Pro TV.\n\n4\n00:00:11.933 --> 00:00:15.520\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITProTV.\n\n5\n00:00:15.520 --> 00:00:17.920\nI'm your host, Justin Dennison, and well,\n\n6\n00:00:17.920 --> 00:00:21.028\nwe're coming back at you with\nmore advanced shell scripting.\n\n7\n00:00:21.028 --> 00:00:25.660\nWe really wanna bring up our game,\nwe're gonna be talking about Sed today and\n\n8\n00:00:25.660 --> 00:00:27.770\nhere to help us along in that\njourney is Mr. Daniel Lowrie.\n\n9\n00:00:27.770 --> 00:00:28.740\nHow are you doing today Daniel?\n\n10\n00:00:28.740 --> 00:00:29.520\n&gt;&gt; I'm doing great.\n\n11\n00:00:29.520 --> 00:00:30.990\nYes we are.\n\n12\n00:00:30.990 --> 00:00:33.855\nWell, we're gonna talk about Sed today,\nas the man said.\n\n13\n00:00:33.855 --> 00:00:37.410\nAnd well, that's starting to\nbe a very strange sentence.\n\n14\n00:00:37.410 --> 00:00:38.640\nWhat are you saying?\n\n15\n00:00:38.640 --> 00:00:39.337\nSed?\n\n16\n00:00:39.337 --> 00:00:42.435\nNot S-A-I-D, as the title said.\n\n17\n00:00:42.435 --> 00:00:46.710\nS-E-D The stream editor, okay.\n\n18\n00:00:46.710 --> 00:00:50.275\nThat's the focus of today's topic and\nyou might be thinking,\n\n19\n00:00:50.275 --> 00:00:52.708\nokay, maybe I've heard of this, right?\n\n20\n00:00:52.708 --> 00:00:55.820\nHere is an advanced show, you've\nbeen around the block a time or two.\n\n21\n00:00:55.820 --> 00:01:00.810\nI've heard of sed, and I know that it's\nan extremely powerful thing that we can\n\n22\n00:01:00.810 --> 00:01:06.528\nuse in our scripting, but\nit seems like super complex.\n\n23\n00:01:06.528 --> 00:01:10.806\nAlso typically,\nit gets bundled up a lot of times,\n\n24\n00:01:10.806 --> 00:01:14.793\nnot every time, sometimes,\nwith awk as well.\n\n25\n00:01:14.793 --> 00:01:17.422\nThey'll hold each other's hands\nmany different times, but\n\n26\n00:01:17.422 --> 00:01:20.330\nwe're not gonna do that today,\nwe're just gonna focus on sed.\n\n27\n00:01:20.330 --> 00:01:25.240\nI wanna get you guys at least\nin some basic sed stuff.\n\n28\n00:01:25.240 --> 00:01:28.160\nRight, to get you introduced\nto sed what it can do,\n\n29\n00:01:28.160 --> 00:01:32.990\nwhy you see it in scripts,\nbecause of what it does for us, okay?\n\n30\n00:01:32.990 --> 00:01:38.410\nSo before we can start actually,\nputting sed into a script,\n\n31\n00:01:38.410 --> 00:01:42.010\nwe have to know how said works, so\nthat we can use it to our advantage.\n\n32\n00:01:42.010 --> 00:01:44.780\nSo that's what we're gonna do we're gonna\ngive you the basics of working with\n\n33\n00:01:44.780 --> 00:01:48.840\nthe extreme editor and hopefully,\nget you up to speed on that.\n\n34\n00:01:48.840 --> 00:01:52.260\nSo that when you start looking\nat other people's scripts and\n\n35\n00:01:52.260 --> 00:01:57.090\nyou see a sed statement happening you go,\nthat's what all\n\n36\n00:01:57.090 --> 00:02:01.870\nthose weird little characters mean, that's\nwhy there's those single little, aw, man,\n\n37\n00:02:01.870 --> 00:02:03.220\nthat's starting to make some sense.\n\n38\n00:02:03.220 --> 00:02:07.638\nThat's hopefully, we'll get to at least\nup to some speed with that today.\n\n39\n00:02:07.638 --> 00:02:12.432\nAnd that being said, let's talk a little\nbit about the sed program itself.\n\n40\n00:02:13.630 --> 00:02:18.800\nIt basically, what it does it takes\nin information from text file,\n\n41\n00:02:18.800 --> 00:02:24.350\nfrom an echo, from whatever and\nit says I wanna edit that information.\n\n42\n00:02:24.350 --> 00:02:29.030\nI want to, maybe I have this word,\nbut for every time we see this word,\n\n43\n00:02:29.030 --> 00:02:32.160\nI want to replace it with this word,\nthat kind of thing, right.\n\n44\n00:02:32.160 --> 00:02:34.960\nSo it's doing this on the fly,\nyou're not having to go in and\n\n45\n00:02:34.960 --> 00:02:39.900\nmodify the text in every single place\ndo a find and replace kind of thing.\n\n46\n00:02:39.900 --> 00:02:45.310\nWe'll be adding that functionality onto\nour script if we want to using sed itself.\n\n47\n00:02:45.310 --> 00:02:48.155\nNow at this point in time,\nwhat I'm gonna show you,\n\n48\n00:02:48.155 --> 00:02:51.332\nwe're not actually modifying\nthe original data, okay?\n\n49\n00:02:51.332 --> 00:02:54.714\nWhat we're doing is,\npermanent, should I say.\n\n50\n00:02:54.714 --> 00:02:59.164\nWhat we're doing is we're kinda making\na copy of that data, modifying that copy,\n\n51\n00:02:59.164 --> 00:03:00.891\noutputting that to the screen.\n\n52\n00:03:00.891 --> 00:03:04.680\nThat's, if not all the examples\nwe're gonna do for\n\n53\n00:03:04.680 --> 00:03:08.960\nthis portion of sed that's\nwhat's going to be happen.\n\n54\n00:03:08.960 --> 00:03:10.990\nAll right,\nwe're not actually modifying data.\n\n55\n00:03:10.990 --> 00:03:14.346\nWe can modify the original\ntext if we want, but\n\n56\n00:03:14.346 --> 00:03:17.800\nit is beyond where are are at\nthis point in time.\n\n57\n00:03:17.800 --> 00:03:21.000\nWe want to start easy and work our way up.\n\n58\n00:03:21.000 --> 00:03:25.340\nAll right, just keep that in mind,\nwhat's run sed?\n\n59\n00:03:25.340 --> 00:03:26.809\nHow do you run that thing?\n\n60\n00:03:26.809 --> 00:03:31.299\nSo there's a couple of ways you can do it,\nI can feed data into it from one side kind\n\n61\n00:03:31.299 --> 00:03:35.570\nof piping stuff a lot of times you'll\necho something and pipe that into sed.\n\n62\n00:03:35.570 --> 00:03:39.690\nOr you can just run sed and\ngive it like a text file, right?\n\n63\n00:03:39.690 --> 00:03:43.620\nLet's take a look at how\nthat looks in practical, so\n\n64\n00:03:43.620 --> 00:03:48.290\nif I said let's say echo this is\n\n65\n00:03:48.290 --> 00:03:53.172\na sentence like, so I piped that into sed.\n\n66\n00:03:54.670 --> 00:03:57.288\nSo I'm echo statement piping\nthe output of that echo\n\n67\n00:03:57.288 --> 00:04:00.580\nstatement which is this is\na sentence of string of text.\n\n68\n00:04:00.580 --> 00:04:01.900\nIt's gonna go into sed.\n\n69\n00:04:01.900 --> 00:04:03.520\nNow again, sed is a stream editor,\n\n70\n00:04:03.520 --> 00:04:07.730\nit's gonna edit this thing on the fly,\nas it were, right?\n\n71\n00:04:07.730 --> 00:04:09.270\nAnd we can do that and\nit kind of looks like this.\n\n72\n00:04:09.270 --> 00:04:11.560\nWe're not gonna get into\nthe specifics of it just yet, but\n\n73\n00:04:11.560 --> 00:04:12.490\nlet me show you how that looks.\n\n74\n00:04:12.490 --> 00:04:17.650\nS slash, and we'll say, sentence and\nwe'll change that to paragraph.\n\n75\n00:04:19.190 --> 00:04:24.440\nThat and we will finish that off with the,\nwhere's, there it is, thank you, and hit.\n\n76\n00:04:24.440 --> 00:04:29.394\nAnd you'll notice that the echo\nwent from this is a sentence,\n\n77\n00:04:29.394 --> 00:04:31.880\nto this is a paragraph.\n\n78\n00:04:31.880 --> 00:04:35.320\nSo it changed it, just for\nthe output, okay?\n\n79\n00:04:35.320 --> 00:04:36.090\nVery simple thing.\n\n80\n00:04:37.650 --> 00:04:40.970\nWhat if we just wanted to feed it\na text file with data inside of it?\n\n81\n00:04:40.970 --> 00:04:44.920\nI've got a text file called sed file,\ndid I, yeah, it's just sed file.\n\n82\n00:04:44.920 --> 00:04:51.684\nSo if we cat sedfile.txt, so\nthis is a good sentence, okay?\n\n83\n00:04:51.684 --> 00:04:54.172\nLittle bit of an adjective, right?\n\n84\n00:04:54.172 --> 00:04:57.197\n&gt;&gt; [LAUGH]\n&gt;&gt; For some reason it popped in my head,\n\n85\n00:04:57.197 --> 00:04:58.558\nthat seems to be up for debate.\n\n86\n00:04:58.558 --> 00:05:01.240\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] You know what?\n\n87\n00:05:01.240 --> 00:05:03.560\nIt very well may be, what if I?\n\n88\n00:05:03.560 --> 00:05:04.440\nIt's not a good sentence,\n\n89\n00:05:04.440 --> 00:05:08.040\nit's a bad sentence, it's junk,\nhorrible sentence, right?\n\n90\n00:05:08.040 --> 00:05:10.740\nI want to change that I want\nto say it's a bad sentence.\n\n91\n00:05:10.740 --> 00:05:18.261\nWell, I can do that just by saying\nsed like that switch out sentence or\n\n92\n00:05:18.261 --> 00:05:22.950\nnot good but good with bad, like so.\n\n93\n00:05:22.950 --> 00:05:25.981\nAnd then give it the ending thing, and\n\n94\n00:05:25.981 --> 00:05:30.073\nthen just tell it what\nthe file is sed file, .txt.\n\n95\n00:05:30.073 --> 00:05:32.722\nLike that.\n\n96\n00:05:32.722 --> 00:05:36.130\nYou will notice it went from being\na good sentence to a bad sentence.\n\n97\n00:05:36.130 --> 00:05:40.696\nSo these are the two main ways typically\nthough, I mean if you are doing something\n\n98\n00:05:40.696 --> 00:05:44.996\nlike in-line a script, you might see\nsomething similar to this echo typing\n\n99\n00:05:44.996 --> 00:05:49.833\nwhere it's piping information into sed,\nmodifying it, and then saving that output\n\n100\n00:05:49.833 --> 00:05:53.830\nto something, so that we can use\nmaybe a variable, things like that.\n\n101\n00:05:53.830 --> 00:05:57.991\nBut a lot of times when\nyou're just running sed, and\n\n102\n00:05:57.991 --> 00:06:01.017\nthis is the way we'll do it a lot here,\n\n103\n00:06:01.017 --> 00:06:06.530\nis we will run the sed program itself and\nfeed it lines of text, okay?\n\n104\n00:06:06.530 --> 00:06:08.180\nThat being said, there we go.\n\n105\n00:06:08.180 --> 00:06:10.170\n&gt;&gt; Now Daniel,\nI got a quick question for you.\n\n106\n00:06:10.170 --> 00:06:13.990\nWhen we ran sed use in that sed file, we\ndidn't modify the internals of that file,\n\n107\n00:06:13.990 --> 00:06:18.610\nwe actually just streamed the contents of\nthat file into sed, did the replace and\n\n108\n00:06:18.610 --> 00:06:19.960\nthat kinda came out on standard out.\n\n109\n00:06:19.960 --> 00:06:21.636\nAm I right about that?\n&gt;&gt; Yeah, that's exactly right,\n\n110\n00:06:21.636 --> 00:06:23.950\nhopefully, that's what\nyou took away from that.\n\n111\n00:06:23.950 --> 00:06:28.870\nIs if I kept my file again,\nif I kept sedfile.txt you'll notice\n\n112\n00:06:28.870 --> 00:06:33.810\nit still says this is a good sentence,\nwe have not modified the original data.\n\n113\n00:06:33.810 --> 00:06:39.460\nAll we did was we took that and\nwe read it into sed, and sed put it in\n\n114\n00:06:39.460 --> 00:06:46.540\na a user space like a little holder.\n\n115\n00:06:46.540 --> 00:06:49.640\nWe'll get into that as we\nmove on with the advancement.\n\n116\n00:06:49.640 --> 00:06:52.480\nSo I don't wanna give you guys too\nmuch at this point in time, okay?\n\n117\n00:06:52.480 --> 00:06:55.880\nBut that's what's happening, it just kinda\ncopying it in and go and, all right,\n\n118\n00:06:55.880 --> 00:06:57.830\nnow I'm gonna work with the copy\ninstead of the original.\n\n119\n00:06:59.500 --> 00:07:02.850\nUltimately, at the end of the day, there\nis options in sed for us to be able to\n\n120\n00:07:02.850 --> 00:07:07.390\nsay, now take that copy of the original\nand write it back to the original.\n\n121\n00:07:07.390 --> 00:07:10.820\nSo we could do that, but\nagain, keeping it simple.\n\n122\n00:07:10.820 --> 00:07:13.920\nAnother simple thing we might\nwanna do is what if I wanna say,\n\n123\n00:07:13.920 --> 00:07:18.560\nnot that this is a good sentence,\nbut this is a bad paragraph.\n\n124\n00:07:18.560 --> 00:07:22.060\nI wanna change good\"and\nsentence to bad and paragraph.\n\n125\n00:07:22.060 --> 00:07:24.410\nI have multiple commands I\nkind of want to throw at.\n\n126\n00:07:24.410 --> 00:07:25.742\nHow we do that?\n\n127\n00:07:25.742 --> 00:07:31.060\nAll right, no problem, we can do sed-e\nlike that to let it know that we're going\n\n128\n00:07:31.060 --> 00:07:36.060\nto have multiple commands, and\nthen you just do your old switchee-roos.\n\n129\n00:07:36.060 --> 00:07:38.840\nI never give that stinking\nsingle quote to save my life.\n\n130\n00:07:38.840 --> 00:07:41.560\nI always wanted to semicolon,\nthere we go, anyway.\n\n131\n00:07:41.560 --> 00:07:48.530\nSo, good slash bad and\nthen you go like that, semicolon.\n\n132\n00:07:48.530 --> 00:07:52.127\nThis time I actually wanted semicolon,\nand then throw another statement at them.\n\n133\n00:07:52.127 --> 00:07:56.687\nWe'll switch out sentence with paragraph,\n\n134\n00:07:56.687 --> 00:08:01.127\nsentence with paragraph that Close it off,\n\n135\n00:08:01.127 --> 00:08:08.500\n[INAUDIBLE] feed it its file,\nwhich is sedfile.txt, and there we go.\n\n136\n00:08:08.500 --> 00:08:12.950\nNow instead of this is a good sentence,\nit says this is a bad paragraph.\n\n137\n00:08:12.950 --> 00:08:16.090\nSo if I want multiple commands,\njust put that dash e on there.\n\n138\n00:08:16.090 --> 00:08:18.592\nAnd that should get you\nwhere you wanna go.\n\n139\n00:08:18.592 --> 00:08:23.790\nYou can also use what's\ncalled the secondary prompt.\n\n140\n00:08:23.790 --> 00:08:27.700\nWe've seen this with other things,\nas well inside of Linux systems.\n\n141\n00:08:27.700 --> 00:08:29.720\nSo look kind of familiar for you.\n\n142\n00:08:29.720 --> 00:08:37.470\nIf I do this, if I say sed -e,\nstart my single quote, and I hit Enter.\n\n143\n00:08:37.470 --> 00:08:40.560\nYou'll notice that it drops to\na secondary prompt right here.\n\n144\n00:08:42.250 --> 00:08:44.252\nAnd now it's looking for more further.\n\n145\n00:08:44.252 --> 00:08:45.797\nOkay, continue on.\n\n146\n00:08:45.797 --> 00:08:48.878\nAnd we can do this a lot,\nespecially if you have multiple commands,\n\n147\n00:08:48.878 --> 00:08:52.320\nit can really increase\nthe readability of that for yourself.\n\n148\n00:08:52.320 --> 00:08:56.940\nOr just even the working with as you're\ntyping them in, I'm now breaking this off\n\n149\n00:08:56.940 --> 00:09:00.080\ninto little bitty chunks,\ninstead of one big string of text.\n\n150\n00:09:00.080 --> 00:09:04.822\nAnd you sit there staring at the screen\ngoing, okay, what's going on, it's crazy!\n\n151\n00:09:04.822 --> 00:09:08.080\nRight, but it's now just looking for\nthose commands.\n\n152\n00:09:08.080 --> 00:09:14.622\nSo now I can pass it s/good/bad/.\n\n153\n00:09:14.622 --> 00:09:20.236\nDoing the next one, s/sentence/paragraph/,\n\n154\n00:09:20.236 --> 00:09:25.194\nand then finish it off\nwith my single quote and\n\n155\n00:09:25.194 --> 00:09:30.270\nmy text file, which is sedfile.txt.\n\n156\n00:09:30.270 --> 00:09:31.470\nAnd [INAUDIBLE], there it goes.\n\n157\n00:09:31.470 --> 00:09:36.250\nSo you have got those two ways in which\nyou can work with multiple commands.\n\n158\n00:09:36.250 --> 00:09:40.620\nAnd as long as it is short enough,\nI will stick with a single liner.\n\n159\n00:09:40.620 --> 00:09:43.730\nBut if it starts getting complex,\nI would recommend [INAUDIBLE]\n\n160\n00:09:43.730 --> 00:09:47.610\nto that secondary problem to make it a\nlittle easier for you to see and read and\n\n161\n00:09:47.610 --> 00:09:50.130\nwork through the logic [INAUDIBLE].\n\n162\n00:09:50.130 --> 00:09:52.920\n&gt;&gt; Now, Daniel,\nI'm gonna be honest with you,\n\n163\n00:09:52.920 --> 00:09:55.750\nI just thought that was me goofing up and\nforgetting to close my quotes.\n\n164\n00:09:55.750 --> 00:09:58.240\nI didn't realize there was a practical\nuse to that secondary prompt.\n\n165\n00:09:58.240 --> 00:10:01.545\nSo, that's a takeaway outside of sed.\n\n166\n00:10:01.545 --> 00:10:04.290\nBut we've done these kind\nof stream processing.\n\n167\n00:10:05.350 --> 00:10:10.128\nI'm pretty sure it's not always this easy\nbecause I've seen some sed expressions run\n\n168\n00:10:10.128 --> 00:10:12.363\nlike don't even nap before [CROSSTALK].\n\n169\n00:10:12.363 --> 00:10:13.860\n&gt;&gt; [LAUGH]\n&gt;&gt; Begin the process.\n\n170\n00:10:13.860 --> 00:10:15.440\n&gt;&gt; Yeah, man, there's tons of options.\n\n171\n00:10:15.440 --> 00:10:18.320\nOne another option you probably\nused quite a bit is that\n\n172\n00:10:18.320 --> 00:10:22.480\nyou can have a set script\nfile that you read in to set.\n\n173\n00:10:22.480 --> 00:10:26.810\nSo you're pulling all those\ncommands from a separate file, so\n\n174\n00:10:26.810 --> 00:10:30.450\nthat you can modify another separate file,\nright?\n\n175\n00:10:30.450 --> 00:10:34.930\nSo instead of typing it all in, say\nthis is the sed thing I do all the time.\n\n176\n00:10:36.550 --> 00:10:37.720\nI don't want to have to type that in,\n\n177\n00:10:37.720 --> 00:10:40.190\nI just want to be able\nto feed it that script.\n\n178\n00:10:40.190 --> 00:10:42.348\nLet it work from there right and\n\n179\n00:10:42.348 --> 00:10:46.423\nthen modify this guy right here\nWe can definitely do that.\n\n180\n00:10:46.423 --> 00:10:50.450\nI've got this sedscript.sed.\n\n181\n00:10:50.450 --> 00:10:53.380\nI like to label them .seds, so\nthat I know they're sed scripts.\n\n182\n00:10:53.380 --> 00:10:55.650\nAgain, Linux does not care whether or\n\n183\n00:10:55.650 --> 00:10:58.330\nnot you name .TootsieRoll,\nif you felt like it.\n\n184\n00:10:58.330 --> 00:11:02.390\nYou could as long as you know\n.TootsieRoll files are sed scripts.\n\n185\n00:11:02.390 --> 00:11:04.570\nIn your mind, then go berserk.\n\n186\n00:11:04.570 --> 00:11:06.630\nI typically end it with .sed though.\n\n187\n00:11:06.630 --> 00:11:12.762\nSo if I cat setscript.set,\n\n188\n00:11:12.762 --> 00:11:16.598\nand there you go.\n\n189\n00:11:16.598 --> 00:11:19.350\nBasically you have the same\ncommands inside of there.\n\n190\n00:11:19.350 --> 00:11:25.992\nNow all you have to do is\nset-f setscrpt.set and\n\n191\n00:11:25.992 --> 00:11:30.691\nthen, throw it at setfile.txt.\n\n192\n00:11:30.691 --> 00:11:32.910\nAnd there you go,\nit says this is a bad paragraph.\n\n193\n00:11:32.910 --> 00:11:34.940\nSo if you want to make it easier,\n\n194\n00:11:34.940 --> 00:11:38.490\nyou've got a lot of multiline commands\nthat you want to be able to work with.\n\n195\n00:11:38.490 --> 00:11:41.570\nMultiple commands should I\nsay to work with against\n\n196\n00:11:41.570 --> 00:11:44.855\nwhatever text you're feeding it and\nyou do it repetitively.\n\n197\n00:11:44.855 --> 00:11:48.020\nSed script file could be a much easier and\n\n198\n00:11:48.020 --> 00:11:50.990\nmore practical way in which to make\nthat happen instead of doing so\n\n199\n00:11:50.990 --> 00:11:55.500\nmuch typing you're ready to\nchop your fingers off [LAUGH].\n\n200\n00:11:55.500 --> 00:11:57.760\nAll right, let's go back to\nsome more of sed commands,\n\n201\n00:11:57.760 --> 00:11:59.820\nother things that we may use.\n\n202\n00:11:59.820 --> 00:12:06.310\nI actually created a little text file with\nsome descriptions of some of these things.\n\n203\n00:12:06.310 --> 00:12:12.210\nIt's called sed flags cat sed_flag.txt.\n\n204\n00:12:12.210 --> 00:12:15.300\nSo here we go, we've got couple\nof different flags that we'll\n\n205\n00:12:15.300 --> 00:12:17.460\nprobably work with on a regular.\n\n206\n00:12:17.460 --> 00:12:19.810\nAnd then what their description is.\n\n207\n00:12:19.810 --> 00:12:22.340\nGot the hash symbol, basically,\n\n208\n00:12:22.340 --> 00:12:27.050\nsymbolizing this is going to be\na number 1, 2, 7, 12, whatever, right?\n\n209\n00:12:27.050 --> 00:12:31.508\nSubstitute every number\noccurence per line.\n\n210\n00:12:31.508 --> 00:12:34.260\nWhat's that mean?\n\n211\n00:12:34.260 --> 00:12:38.980\nWell, by default when you run sed and\nyou have that switch parameter, so\n\n212\n00:12:38.980 --> 00:12:41.800\nthe s basically means substitute, okay.\n\n213\n00:12:41.800 --> 00:12:44.610\nI want to substitute good for bad.\n\n214\n00:12:44.610 --> 00:12:49.780\nBy default, defines the first instance of\ngood, substitutes it with bad and moves\n\n215\n00:12:49.780 --> 00:12:53.910\non, goes to the next line, finds the first\ninstance of good, substitutes it with bad.\n\n216\n00:12:53.910 --> 00:12:55.360\nIf none exist,\nit goes on to the next line.\n\n217\n00:12:56.500 --> 00:12:59.070\nSo on and so forth until it\ncomes to the end of the lines.\n\n218\n00:12:59.070 --> 00:13:03.830\nWhat if I don't want the first instance,\nI want the third instance?\n\n219\n00:13:03.830 --> 00:13:08.660\nI can put three and\nlet it know that way, okay, so 3s.\n\n220\n00:13:09.670 --> 00:13:15.040\nSubstitute the third instance of good with\nbad and move on from there, all right.\n\n221\n00:13:15.040 --> 00:13:17.650\nSo I've got some of these\nexamples worked out.\n\n222\n00:13:17.650 --> 00:13:22.150\nLet's see this,\nI've got a file called TTLS.\n\n223\n00:13:22.150 --> 00:13:24.894\nSeems very techie, but\nit's Twinkle Twinkle Little Star.\n\n224\n00:13:24.894 --> 00:13:28.247\n&gt;&gt; [LAUGH]\n&gt;&gt; Which I thought was funny, but\n\n225\n00:13:28.247 --> 00:13:31.050\nit did seem very techie when\nI abbreviated it though.\n\n226\n00:13:32.260 --> 00:13:36.070\nSo we can't TTLS not text.\n\n227\n00:13:36.070 --> 00:13:39.440\nHere we go, Twinkle Twinkle Little Star\nand the poem goes on and\n\n228\n00:13:39.440 --> 00:13:44.120\nI've labeled these one, two,\nthree, four, five and six.\n\n229\n00:13:44.120 --> 00:13:46.500\nBecause we're going to reuse this\nfile over and over again, and\n\n230\n00:13:46.500 --> 00:13:51.230\nknowing what line we're on is going to be\nvery helpful for us, so I've labeled them.\n\n231\n00:13:51.230 --> 00:13:54.970\nIf I want to do that numerical type,\ngo for that second one,\n\n232\n00:13:54.970 --> 00:13:55.800\ngo for that third one.\n\n233\n00:13:55.800 --> 00:14:00.640\nIf I want to do that, I can do that by\nsaying sed like this, and then just say.\n\n234\n00:14:02.400 --> 00:14:05.950\nSo actually it goes on the end,\nthese are flags.\n\n235\n00:14:05.950 --> 00:14:08.940\nLet me make sure I understand that,\nthat you understand that.\n\n236\n00:14:08.940 --> 00:14:13.011\nAll of these are flags,\nthey will go at the end of our thing,\n\n237\n00:14:13.011 --> 00:14:16.446\nnot [INAUDIBLE], I'm sorry,\nthat was a mistake.\n\n238\n00:14:16.446 --> 00:14:21.390\nIt's s word replacement,\nthen your flag at the end of it.\n\n239\n00:14:21.390 --> 00:14:22.990\nSo, get that squared in my head.\n\n240\n00:14:22.990 --> 00:14:26.150\nWe will be doing two s, but\nthat's a different thing, okay?\n\n241\n00:14:26.150 --> 00:14:27.180\nSo here we go.\n\n242\n00:14:27.180 --> 00:14:33.958\nSo if I say s and I want to do,\nI'm gonna change ws with vs, all right?\n\n243\n00:14:33.958 --> 00:14:36.260\nSo, sound very Germanic when we get done.\n\n244\n00:14:36.260 --> 00:14:44.478\nSo I'll say w/v, so I'm substituting\nw with v, and then I say 2.\n\n245\n00:14:44.478 --> 00:14:47.690\nClose it out, and I'll say ttls.text.\n\n246\n00:14:47.690 --> 00:14:50.100\nYou'll notice now when\nwe compare the text,\n\n247\n00:14:50.100 --> 00:14:54.690\nyou notice it skipped this w,\nin twinkle on the first line.\n\n248\n00:14:54.690 --> 00:14:59.920\nBut the second w in twinkle\nbecame tvinkle, all right,\n\n249\n00:14:59.920 --> 00:15:01.150\ngo down to the next line.\n\n250\n00:15:01.150 --> 00:15:05.350\nHow has a w at the end,\nbut it skipped it and\n\n251\n00:15:05.350 --> 00:15:09.200\nwent to wonder and changed it to,\nvonder, all right.\n\n252\n00:15:10.340 --> 00:15:13.440\nBut you'll also notice\nthat what was not changed.\n\n253\n00:15:13.440 --> 00:15:18.320\nIt specifically defining that I\nonly want the second one changed,\n\n254\n00:15:18.320 --> 00:15:20.560\nnot the second and everything after.\n\n255\n00:15:20.560 --> 00:15:24.394\nJust two, so if I put on three on\nthe third one, so on and so forth.\n\n256\n00:15:24.394 --> 00:15:26.339\nAnd it does that for every single line.\n\n257\n00:15:26.339 --> 00:15:30.610\nIf it finds the w, it skips it,\nlooks for another w.\n\n258\n00:15:30.610 --> 00:15:32.120\nIf it finds it, and it changes.\n\n259\n00:15:32.120 --> 00:15:35.570\nIf it was three, it would skip,\nskip, find, change, skip,\n\n260\n00:15:35.570 --> 00:15:37.530\nskip, skip, whatever, okay.\n\n261\n00:15:37.530 --> 00:15:38.030\nThere we go.\n\n262\n00:15:39.100 --> 00:15:44.250\nOur next flag is g,\nsed should substitute every occurence.\n\n263\n00:15:44.250 --> 00:15:48.500\nSo grab them all, slip them all up and\nif you find this, then do this.\n\n264\n00:15:48.500 --> 00:15:52.173\nSo same kind of idea,\nwe're just gonna add that g as the flag.\n\n265\n00:15:52.173 --> 00:15:58.130\nSo sed s/w/v/ and if I put g,\nfinish it off, ttls.\n\n266\n00:15:58.130 --> 00:16:01.525\nNow, again,\nthis should be extremely dramatic.\n\n267\n00:16:01.525 --> 00:16:04.034\nTwinkle, twinkle, little star,\nhow I wonder what you are, right?\n\n268\n00:16:04.034 --> 00:16:06.052\nThat's what we're getting.\n\n269\n00:16:06.052 --> 00:16:09.766\nIt's done every w that it's found,\nlower case w, right?\n\n270\n00:16:09.766 --> 00:16:12.097\nEvery lower case w that it's found,\n\n271\n00:16:12.097 --> 00:16:15.410\nit has changed it from a lower\ncase w to a lower case v.\n\n272\n00:16:15.410 --> 00:16:18.112\nIt is case sensitive, by the way.\n\n273\n00:16:18.112 --> 00:16:20.234\nAnd moving on, so great stuff.\n\n274\n00:16:20.234 --> 00:16:24.169\nThe last one, or not the last one,\nwe have also prints.\n\n275\n00:16:24.169 --> 00:16:27.150\nSo last you're like isn't it printing now?\n\n276\n00:16:27.150 --> 00:16:30.100\nYeah, it is printing now but\nhere's the thing.\n\n277\n00:16:30.100 --> 00:16:34.347\nYou'll notice I wrote typically\nuse conjunction with dash,\n\n278\n00:16:34.347 --> 00:16:38.931\nn which means don't print and\nthis seems very counter intuitive.\n\n279\n00:16:38.931 --> 00:16:41.440\nWhy would I want to not print but\nalso print?\n\n280\n00:16:42.530 --> 00:16:43.185\nRight?\n\n281\n00:16:43.185 --> 00:16:48.150\nAnd the answer to that question\nis what if I have massive output\n\n282\n00:16:48.150 --> 00:16:51.694\nthat might be something that gets printed?\n\n283\n00:16:51.694 --> 00:16:54.490\nIt's not being modified.\n\n284\n00:16:54.490 --> 00:16:55.745\nAnd then I'm getting my,\n\n285\n00:16:55.745 --> 00:16:58.726\nwhat if I only want the line that\nI'm modifying to be printed?\n\n286\n00:16:58.726 --> 00:17:01.044\nThat's what we're talking about here,\nright?\n\n287\n00:17:01.044 --> 00:17:03.555\nSo, typically,\nI've got this massive output file.\n\n288\n00:17:03.555 --> 00:17:10.126\nI only want to see one specific\nline of that, so print that line.\n\n289\n00:17:10.126 --> 00:17:14.330\nSo, that's why you typically see it in\nconjunction with dash end, and actually,\n\n290\n00:17:14.330 --> 00:17:17.046\nthe dash end functionality,\nwell, don't prints.\n\n291\n00:17:17.046 --> 00:17:19.208\nIt's something that you see quite often,\nright?\n\n292\n00:17:19.208 --> 00:17:21.143\nSo just keep that in mind as well.\n\n293\n00:17:21.143 --> 00:17:23.616\nSo let's take a look at that.\n\n294\n00:17:23.616 --> 00:17:29.650\nI have a dash in example,\nlet's see here, said dash n with a,\n\n295\n00:17:29.650 --> 00:17:35.003\nthere we go,\nwe'll change out first with beginning.\n\n296\n00:17:35.003 --> 00:17:38.149\nThis is gonna be a different file,\nby the way.\n\n297\n00:17:38.149 --> 00:17:41.505\nJust for my example purposes,\nfirst and beginning.\n\n298\n00:17:41.505 --> 00:17:48.563\nAnd I will do that and say s.\n\n299\n00:17:48.563 --> 00:17:53.443\nLet's do another slash a, boring.\n\n300\n00:17:53.443 --> 00:17:55.730\nAnd I'll put the p on the end of there.\n\n301\n00:17:55.730 --> 00:17:58.524\nSo that p is really\nwhat we're looking for.\n\n302\n00:17:58.524 --> 00:18:02.171\nI will close that out, I will feed\nit the file, which is sedfile2.txt.\n\n303\n00:18:02.171 --> 00:18:06.496\nAnd there we go, this says,\nthis is a boring sentence, this is yet\n\n304\n00:18:06.496 --> 00:18:07.823\na boring sentence.\n\n305\n00:18:07.823 --> 00:18:14.563\nWanna do cat sedfile2,\nThis is how it looks.\n\n306\n00:18:14.563 --> 00:18:18.216\nYou'll notice something has happened,\nit did not print out.\n\n307\n00:18:18.216 --> 00:18:24.418\nThis is the first sentence\nbecause of that dash and flag.\n\n308\n00:18:24.418 --> 00:18:27.399\nSo this could be, this is the first\nsentence, this is the second sentence,\n\n309\n00:18:27.399 --> 00:18:29.649\nfourth sentence, ninth sentence,\ntwelfth sentence.\n\n310\n00:18:29.649 --> 00:18:31.174\nI've got all these sentences.\n\n311\n00:18:31.174 --> 00:18:34.518\nI don't need that information I just\nneed the ones that I'm looking for.\n\n312\n00:18:34.518 --> 00:18:38.334\nSo modify this and this and\n\n313\n00:18:38.334 --> 00:18:42.330\npoint that line sentence.\n\n314\n00:18:42.330 --> 00:18:45.108\nThese are in conjunction,\nthey're kind of being put together with\n\n315\n00:18:45.108 --> 00:18:47.801\nthe semicolon saying I have multiple\ncommands that I want to run.\n\n316\n00:18:47.801 --> 00:18:49.763\nAnd the last flag I throw is that p,\n\n317\n00:18:49.763 --> 00:18:53.567\nit prints those lines out which\ngives me this is a boring sentence.\n\n318\n00:18:53.567 --> 00:18:55.874\nAnd this is yet a boring sentence\ninstead of this is another sentence and\n\n319\n00:18:55.874 --> 00:18:56.879\nthis is yet another sentence.\n\n320\n00:18:56.879 --> 00:19:03.121\nAs I said,\nit's got a lot going on as you can see.\n\n321\n00:19:03.121 --> 00:19:07.121\nWe've got one more flag I wanna\nshow you guys which is the w,\n\n322\n00:19:07.121 --> 00:19:09.201\nlet's take a look at that guy.\n\n323\n00:19:09.201 --> 00:19:12.393\nW file write to separate upper file, so\n\n324\n00:19:12.393 --> 00:19:17.534\nit's not writing back to itself,\nI wonder if that would work.\n\n325\n00:19:17.534 --> 00:19:21.056\n[LAUGH] Be an interesting way in which\nyou could use that functionality.\n\n326\n00:19:21.056 --> 00:19:23.561\nThere's built-in functionality for\nthat, that's not dash w.\n\n327\n00:19:23.561 --> 00:19:26.464\nDash w says, you know what?\n\n328\n00:19:26.464 --> 00:19:30.491\nI like the output that I've gotten,\nI wanna save that to its own file.\n\n329\n00:19:30.491 --> 00:19:34.449\nDon't wanna modify that original,\nI wanna keep it pristine.\n\n330\n00:19:34.449 --> 00:19:37.713\nBut I do like what I've gotten with\nthe output that I've seen here.\n\n331\n00:19:37.713 --> 00:19:39.328\nWrite that out to it's own file.\n\n332\n00:19:39.328 --> 00:19:44.744\nSo we just say W and then the file\nname and you're off to the races.\n\n333\n00:19:44.744 --> 00:19:47.038\nAll right, we'll go back to twinkle\ntwinkle with this one here, I think.\n\n334\n00:19:47.038 --> 00:19:51.302\nOr no,\nwe'll continue to use said file too here.\n\n335\n00:19:51.302 --> 00:19:56.151\nSo we'll say said like this s first we'll,\nsorry.\n\n336\n00:19:56.151 --> 00:19:58.328\nHere we go.\n\n337\n00:19:58.328 --> 00:20:01.291\nFirst slash beginning.\n\n338\n00:20:01.291 --> 00:20:06.657\nSlash w, I'm gonna write this out.\n\n339\n00:20:06.657 --> 00:20:10.456\nAnd then I'll say the name of\nthe file that I want to write.\n\n340\n00:20:10.456 --> 00:20:17.927\nSo I will call it testout.txt and\nso finish that off with this.\n\n341\n00:20:17.927 --> 00:20:26.360\nAnd then tell file, I wanna read from\nset file with file, two, there we go.\n\n342\n00:20:26.360 --> 00:20:30.624\nWe get it to the screen but\nwe should also be able to\n\n343\n00:20:30.624 --> 00:20:35.002\ncast test out a text and\nthis line is the one it got.\n\n344\n00:20:35.002 --> 00:20:38.307\nSo first beginning the changed,\n\n345\n00:20:38.307 --> 00:20:43.152\nfirst beginning and\nI wrote that to its own line.\n\n346\n00:20:43.152 --> 00:20:45.370\nVery good, and now, it's in its own file.\n\n347\n00:20:45.370 --> 00:20:48.665\nSo if you wanna write specific text out,\ncreate a format that works for you,\n\n348\n00:20:48.665 --> 00:20:51.805\nsomething like, man, if just did this,\nthis, this, and this and\n\n349\n00:20:51.805 --> 00:20:54.093\nput that in its own file then\nit saved me a lot of time.\n\n350\n00:20:54.093 --> 00:20:59.152\nI said might be able to do that for\nyou with its dash or the w flag.\n\n351\n00:20:59.152 --> 00:21:01.572\n&gt;&gt; Well, Daniel,\nthose are definitely handy, but\n\n352\n00:21:01.572 --> 00:21:04.520\nwe're getting to the precipice\nof my understanding of Set.\n\n353\n00:21:04.520 --> 00:21:05.121\n&gt;&gt; [LAUGH]\n&gt;&gt; Basically,\n\n354\n00:21:05.121 --> 00:21:08.326\nit's one of those things where I have to\nlook it up every time when I need it for\n\n355\n00:21:08.326 --> 00:21:09.590\nthat very specific use case.\n\n356\n00:21:09.590 --> 00:21:12.537\nIt is powerful, and\nother people use it fairly frequently.\n\n357\n00:21:12.537 --> 00:21:17.424\nBut there is one thing as we're seeing\nthese files or excuse me, these commands.\n\n358\n00:21:17.424 --> 00:21:20.220\nSeems like those might\nget really really messy.\n\n359\n00:21:20.220 --> 00:21:24.634\nEspecially if you're trying\nto replace like maybe HRCs or\n\n360\n00:21:24.634 --> 00:21:29.419\nthings like that where I have\nthese other special characters.\n\n361\n00:21:29.419 --> 00:21:32.402\nDoes Sev have a special\nway to deal with those or\n\n362\n00:21:32.402 --> 00:21:35.779\nare we just kind of always\nescaping with crazyness?\n\n363\n00:21:35.779 --> 00:21:36.768\n&gt;&gt; Yeah.\n\n364\n00:21:36.768 --> 00:21:38.084\nWe can escape them.\n\n365\n00:21:38.084 --> 00:21:41.534\nRight we have that whole backslash idea\nof this is a special character, but\n\n366\n00:21:41.534 --> 00:21:45.229\nI don't want you to treat it as a special\ncharacter and therefore backslash it.\n\n367\n00:21:45.229 --> 00:21:48.434\nAnd normally, that can be fine, right.\n\n368\n00:21:48.434 --> 00:21:50.895\nAnd be a really good way\nin which to do that, but\n\n369\n00:21:50.895 --> 00:21:55.065\nsometimes the readability of that,\nlike what Justin was kind of alluding to,\n\n370\n00:21:55.065 --> 00:21:57.424\nbecomes a bit much for\nour brains to intake.\n\n371\n00:21:57.424 --> 00:22:01.296\nYou start looking at that kind of output,\nor\n\n372\n00:22:01.296 --> 00:22:06.957\nthat kind of string, and\nyou're going okay, what is going on?\n\n373\n00:22:06.957 --> 00:22:09.002\nOkay, I'm escaping this,\nI'm escaping that.\n\n374\n00:22:09.002 --> 00:22:12.079\nThat's not part of the string,\nthe command.\n\n375\n00:22:12.079 --> 00:22:16.992\nThis is and that's not, so you get\na little crazy, to be honest with you, and\n\n376\n00:22:16.992 --> 00:22:19.420\nit's really difficult to deal with.\n\n377\n00:22:19.420 --> 00:22:24.092\nA cool thing is that Set allows us to\nsubstitute some special characters with\n\n378\n00:22:24.092 --> 00:22:27.899\nother characters, so\nthat it can help with that, all right.\n\n379\n00:22:27.899 --> 00:22:30.574\nSo let's take a look at\nwhat that looks like, and\n\n380\n00:22:30.574 --> 00:22:33.920\nhow we can change it to make it\na little more readable, okay.\n\n381\n00:22:33.920 --> 00:22:36.568\nLet's talk about,\n\n382\n00:22:36.568 --> 00:22:41.715\nlet's just take or bin shell.\n\n383\n00:22:41.715 --> 00:22:46.630\nInside of your SE password file\nis everybodys username and\n\n384\n00:22:46.630 --> 00:22:48.643\nit has a bunch of stuff.\n\n385\n00:22:48.643 --> 00:22:52.895\nAnd it also has your default shell at the\nend and it says slash bin slash shell or\n\n386\n00:22:52.895 --> 00:22:57.426\nslash bin slash batch, slash bin slash\nzsh, whatever it is it's gonna be there.\n\n387\n00:22:57.426 --> 00:23:00.648\nBut it's got slashes in it.\n\n388\n00:23:00.648 --> 00:23:02.388\nYou'll notice if we look\nat our Set commands.\n\n389\n00:23:02.388 --> 00:23:04.765\nWe've got slashes in that as well.\n\n390\n00:23:04.765 --> 00:23:08.943\nSo it's going to be crazy looking to have\nto work with that if that's my data.\n\n391\n00:23:08.943 --> 00:23:14.844\nA file pass can be extremely hard to\nwork with because of that very fact.\n\n392\n00:23:14.844 --> 00:23:16.450\nIt escape all this stuff.\n\n393\n00:23:16.450 --> 00:23:17.779\nLet's show you that again.\n\n394\n00:23:17.779 --> 00:23:21.908\nLet me get my screen cleared out.\n\n395\n00:23:21.908 --> 00:23:23.683\nSo if I do like said s and\n\n396\n00:23:23.683 --> 00:23:29.305\nlet's say I wanted to do let's do\nthat very thing, that very example.\n\n397\n00:23:29.305 --> 00:23:32.905\nInside of that se password\nfile we have default shells.\n\n398\n00:23:32.905 --> 00:23:40.929\nI wanna change it from anytime\nyou see bin bash to bin zsh.\n\n399\n00:23:40.929 --> 00:23:42.600\nOkay.\nThis is how that would look.\n\n400\n00:23:42.600 --> 00:23:45.861\nThis is how you would normally\nhave to make this happen.\n\n401\n00:23:45.861 --> 00:23:48.648\nSlash, backslash bin,\n\n402\n00:23:48.648 --> 00:23:54.951\nbackslash forward slash bin,\nslash, right, yes.\n\n403\n00:23:54.951 --> 00:23:57.046\nNo.\nSo, see how crazy it's already becoming?\n\n404\n00:23:57.046 --> 00:23:59.324\nBash, forward slash.\n\n405\n00:23:59.324 --> 00:24:03.550\n\\/bin, yeah, \\/bin,\n\n406\n00:24:03.550 --> 00:24:09.190\nit's really difficult to work with.\n\n407\n00:24:09.190 --> 00:24:11.026\nI'm having to escape all these things.\n\n408\n00:24:11.026 --> 00:24:16.003\nAnd I have to escape this one,\nwhich will be zsh, and\n\n409\n00:24:16.003 --> 00:24:20.980\nthen put that, there we go,\nit's in / let's see,\n\n410\n00:24:20.980 --> 00:24:24.560\n[LAUGH] I can't even think of this.\n\n411\n00:24:24.560 --> 00:24:26.250\nEct/password.\n\n412\n00:24:26.250 --> 00:24:30.370\nThere we go.\nSo, this work.\n\n413\n00:24:30.370 --> 00:24:31.180\nI can't read it.\n\n414\n00:24:31.180 --> 00:24:33.330\nI'd have to still do\nthis because it's that.\n\n415\n00:24:34.730 --> 00:24:37.000\nIts giving me\n&gt;&gt; I think we had a transposition [LAUGH].\n\n416\n00:24:37.000 --> 00:24:39.510\n&gt;&gt; I saw that at the exact same time.\n\n417\n00:24:39.510 --> 00:24:41.870\nI put etc., password.\n\n418\n00:24:41.870 --> 00:24:45.920\n[LAUGH] Let's try that one\nmore time with etc, but\n\n419\n00:24:45.920 --> 00:24:48.390\nyou saw how convoluted this has become.\n\n420\n00:24:48.390 --> 00:24:54.280\nI've got, all right, I want to substitute\n/bin/bash, but I had to escape the forward\n\n421\n00:24:54.280 --> 00:24:58.340\nslash, or the backslash, escape this\nforward slash or the backslash.\n\n422\n00:24:58.340 --> 00:25:03.675\nThen give my forward slash, which is\nthe end of that string and then escape.\n\n423\n00:25:03.675 --> 00:25:06.997\nWe have forward slash for bin,\nthen we have forward slash for zsh, and\n\n424\n00:25:06.997 --> 00:25:07.570\nhere we go.\n\n425\n00:25:07.570 --> 00:25:08.690\nNow, we run it.\n\n426\n00:25:08.690 --> 00:25:12.220\nYou look down here, there's my dlowrie.\n\n427\n00:25:13.250 --> 00:25:17.720\nYou'll notice it's now bin/zsh\ninstead of bin/bash, okay?\n\n428\n00:25:17.720 --> 00:25:19.550\nThat was crazy looking, right?\n\n429\n00:25:19.550 --> 00:25:22.920\nAnd that's why a lot of times, as Justin\nwas talking about, you see a sed command,\n\n430\n00:25:22.920 --> 00:25:26.490\nyou're going, what is going on here?\n\n431\n00:25:26.490 --> 00:25:29.130\nThat can really cause\nsome readability issues.\n\n432\n00:25:29.130 --> 00:25:31.792\nIt's like I said, we have\nthe ability to substitute that out,\n\n433\n00:25:31.792 --> 00:25:33.562\nmaybe make it a little bit more readable.\n\n434\n00:25:33.562 --> 00:25:37.755\nA lot of times, I like to use commas for\nthis, semicolons are good,\n\n435\n00:25:37.755 --> 00:25:41.120\nexclamation points can be good for this.\n\n436\n00:25:41.120 --> 00:25:45.510\nI'll have to get a list of the ones\nthat they'll actually accept as these\n\n437\n00:25:46.760 --> 00:25:52.240\ntypes of special characters that\ncan be switched out for you guys.\n\n438\n00:25:52.240 --> 00:25:54.110\nBut those are the ones I\nknow off the top of my head.\n\n439\n00:25:54.110 --> 00:25:58.630\nAnd some of you don't need a giant list of\nthem, hopefully not, that would be insane.\n\n440\n00:25:58.630 --> 00:26:00.310\nBut here's how it would look.\n\n441\n00:26:00.310 --> 00:26:02.730\nInstead of having this command,\nlet's clear first.\n\n442\n00:26:05.298 --> 00:26:10.222\nInstead of having this command,\nwhat if I came back in and\n\n443\n00:26:10.222 --> 00:26:17.210\ninstead of using my forward slashes,\nI used an exclamation point Right?\n\n444\n00:26:17.210 --> 00:26:18.170\nI don't need this.\n\n445\n00:26:19.420 --> 00:26:20.794\nPut the exclamation point here.\n\n446\n00:26:20.794 --> 00:26:21.510\nTake my escape character out now.\n\n447\n00:26:21.510 --> 00:26:27.030\nTake my escape character,\ntnd put an exclamation point.\n\n448\n00:26:27.030 --> 00:26:30.230\nBut if I did that,\nit's a whole lot more readable.\n\n449\n00:26:30.230 --> 00:26:35.160\nTook a lot of this typing, a whole lot\nof this effort on my part to go, okay,\n\n450\n00:26:35.160 --> 00:26:37.830\nI got to do this and\nkeep it straight, right?\n\n451\n00:26:37.830 --> 00:26:42.320\nKeeping it straight is probably one of\nthe more difficult parts of doing this.\n\n452\n00:26:42.320 --> 00:26:43.470\nWe've got s,\n\n453\n00:26:43.470 --> 00:26:48.810\nexclamation point, substituting the\nforward slash that we were normally using.\n\n454\n00:26:48.810 --> 00:26:52.720\nAgain, I could go back, I could use\nsemicolons, I like to use commas.\n\n455\n00:26:52.720 --> 00:26:56.130\nOther people like commas, I do,\nI like commas as well, but\n\n456\n00:26:56.130 --> 00:27:00.400\nI do this, hit that,\ncan't read, what did I do?\n\n457\n00:27:00.400 --> 00:27:02.080\nMan, there we go.\n\n458\n00:27:02.080 --> 00:27:03.450\nTry that, there we go.\n\n459\n00:27:03.450 --> 00:27:06.780\nAnd the same output comes through,\nall right?\n\n460\n00:27:06.780 --> 00:27:09.840\nSo made it a whole lot easier to type,\nmade it a whole lot easier to\n\n461\n00:27:09.840 --> 00:27:13.730\nreason through and\nmade it a whole lot less confusing.\n\n462\n00:27:15.170 --> 00:27:17.600\nAny past [INAUDIBLE] that\nyou're looking at, right.\n\n463\n00:27:17.600 --> 00:27:19.970\nYou may have written this,\ncome back to it a month later, and\n\n464\n00:27:19.970 --> 00:27:24.040\ngo what am I doing here?\n\n465\n00:27:24.040 --> 00:27:27.020\nAnd it can take a lot of brain power\nto figure out okay I'm shaping this,\n\n466\n00:27:27.020 --> 00:27:29.200\nshaping that figuring things out.\n\n467\n00:27:29.200 --> 00:27:34.090\nUnless you work with set all the time,\nthat might cause some issue.\n\n468\n00:27:34.090 --> 00:27:36.940\n&gt;&gt; Well, Daniel, I can attest,\nyou were typing and\n\n469\n00:27:36.940 --> 00:27:38.440\ntrying to get those commands right.\n\n470\n00:27:38.440 --> 00:27:44.200\nI was off camera saying what, so\nthere's a backslash there that gets this.\n\n471\n00:27:45.440 --> 00:27:46.396\nI'm confused.\n\n472\n00:27:46.396 --> 00:27:50.420\nThis is where I throw my hands up and\nI just walk away from my computer and go,\n\n473\n00:27:50.420 --> 00:27:52.560\nI'll let somebody else do that or\nsomething.\n\n474\n00:27:52.560 --> 00:27:55.300\nOr I'll have to come back to it\nbecause I'm getting frustrated.\n\n475\n00:27:55.300 --> 00:27:57.430\nBut adding those other\nspecial characters leads for\n\n476\n00:27:57.430 --> 00:28:00.220\nthe eye to go there is a [INAUDIBLE],\ngot you.\n\n477\n00:28:00.220 --> 00:28:04.660\nAnd now those sort of compare switches and\nthings are a lot more- well,\n\n478\n00:28:04.660 --> 00:28:05.790\nthey are just easier to read.\n\n479\n00:28:05.790 --> 00:28:06.740\nEasier to read about.\n\n480\n00:28:06.740 --> 00:28:08.299\nAnd I don't have to,\n\n481\n00:28:08.299 --> 00:28:13.768\nI'm not pairing the slashes together\nto determine what is escaping what.\n\n482\n00:28:13.768 --> 00:28:17.710\n&gt;&gt; Yeah, and again, readability\nhere becomes key at this point.\n\n483\n00:28:17.710 --> 00:28:22.930\nAnd also the ability to even\ntype the thing out will a lot\n\n484\n00:28:22.930 --> 00:28:27.550\nof times trump whether I ain't sticking\nthem slashes I'm doing something else.\n\n485\n00:28:27.550 --> 00:28:31.680\nAnd again, you want people to be able to\nread it and make sense out of it as easily\n\n486\n00:28:31.680 --> 00:28:36.690\nas possible, if not yourself as you come\nback down the road to see other things.\n\n487\n00:28:36.690 --> 00:28:39.260\nNow Justin,\nI've got actually quite a bit more to go.\n\n488\n00:28:39.260 --> 00:28:42.760\nI'm looking at our clock where short,\nshort, short on time.\n\n489\n00:28:42.760 --> 00:28:44.900\nBut I think this will probably\nme a good stopping point for us.\n\n490\n00:28:44.900 --> 00:28:46.450\nWe will have to go into a part two.\n\n491\n00:28:46.450 --> 00:28:49.978\n&gt;&gt; Yeah, based on the things that you\nhave outlined for us to learn about.\n\n492\n00:28:49.978 --> 00:28:54.402\nNumber one, it was borderline like panic\nattack when I looked at the intro.\n\n493\n00:28:54.402 --> 00:28:56.320\n&gt;&gt; [LAUGH]\n&gt;&gt; But you are absolutely correct.\n\n494\n00:28:56.320 --> 00:28:59.550\nI am pretty sure you are not going\nto get anywhere close to it in\n\n495\n00:28:59.550 --> 00:29:00.340\nthe next four minutes.\n\n496\n00:29:00.340 --> 00:29:02.080\nSo we will go ahead and stop it here.\n\n497\n00:29:02.080 --> 00:29:05.720\nWe will come back with a part two on\nan intro to sed, so definitely stay tuned.\n\n498\n00:29:05.720 --> 00:29:08.930\nYou don't want to miss it because it's\nincredibly powerful, can be useful.\n\n499\n00:29:08.930 --> 00:29:10.990\nThough I jest about its complexity.\n\n500\n00:29:10.990 --> 00:29:12.970\nBut we're going to go ahead and\nwrap this one up, so\n\n501\n00:29:12.970 --> 00:29:16.050\nsigning out for ITProTV,\nI've been your host Justin Dennison.\n\n502\n00:29:16.050 --> 00:29:17.010\n&gt;&gt; I'm Daniel Lowrie.\n\n503\n00:29:17.010 --> 00:29:19.331\n&gt;&gt; And we'll see you next time.\n\n504\n00:29:19.331 --> 00:29:25.733\n[MUSIC]\n\n505\n00:29:25.733 --> 00:29:28.346\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237914604"
        },
        {
          "description": "In this episode, Daniel and Justin continue to build your sed knowledge. Here they explore sed Addresses, grouping commands with {}, and deleting lines of text.",
          "length": "1545",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-2-intro_to_sed_pt_2-101217-PGM.00_29_01_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-2-intro_to_sed_pt_2-101217-PGM.00_29_01_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-2-intro_to_sed_pt_2-101217-PGM.00_29_01_24.Still001-sm.jpg",
          "title": "Intro to Sed Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:06.410\nYou're watching ITProTV,\nI'm your host, [CROSSTALK]\n\n2\n00:00:06.410 --> 00:00:08.120\n[MUSIC]\n\n3\n00:00:08.120 --> 00:00:11.947\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.947 --> 00:00:15.659\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITProTV,\n\n5\n00:00:15.659 --> 00:00:17.401\nI'm your host, Justin Dennison.\n\n6\n00:00:17.401 --> 00:00:20.972\nAnd we're continuing on with our\nadvanced Linux Shell Scripting Series.\n\n7\n00:00:20.972 --> 00:00:25.158\nAnd in particular we're back with a Part\n2, well, of our introduction to sed.\n\n8\n00:00:25.158 --> 00:00:27.995\nAnd well, sed is incredibly powerful, but\n\n9\n00:00:27.995 --> 00:00:31.908\nit definitely takes more than\none episode to fully cover, or\n\n10\n00:00:31.908 --> 00:00:36.065\nnot to fully cover, just to give\nus a glimpse of the power of sed.\n\n11\n00:00:36.065 --> 00:00:37.692\nAnd here to help along\nin that endeavour is Mr.\n\n12\n00:00:37.692 --> 00:00:39.392\nDaniel Lowrie,\nhow you doing today, Daniel?\n\n13\n00:00:39.392 --> 00:00:41.074\n&gt;&gt; I'm doing fantastic, Justin, thanks for\n\n14\n00:00:41.074 --> 00:00:43.330\nhaving me back on the show,\ngoing back over some more sed.\n\n15\n00:00:43.330 --> 00:00:47.820\nThat's right, just when you all thought it\nwas said and done, well, we're not, right?\n\n16\n00:00:47.820 --> 00:00:50.650\nWe have plenty more to go through,\nand technically,\n\n17\n00:00:50.650 --> 00:00:55.290\nas I think Justin was making a mention of,\nthis is the intro to sed.\n\n18\n00:00:55.290 --> 00:00:58.590\nWe haven't even gotten into\nour advanced features of sed,\n\n19\n00:00:58.590 --> 00:01:01.168\nwhich is pretty advanced and\nkind of complex.\n\n20\n00:01:01.168 --> 00:01:05.059\nBut first, we want to make sure you\nunderstand how sed normally might work\n\n21\n00:01:05.059 --> 00:01:08.410\nbefore we jump into the more\nadvanced functionality and that.\n\n22\n00:01:08.410 --> 00:01:11.988\nSo moving on with sed and\nthe introduction thereof,\n\n23\n00:01:11.988 --> 00:01:14.847\nthat being said, where did we leave off?\n\n24\n00:01:14.847 --> 00:01:18.735\nWell, I think what was the last thing we\ntalked about, we talked about readability,\n\n25\n00:01:18.735 --> 00:01:21.113\ntrying to make these things\na little more readable.\n\n26\n00:01:21.113 --> 00:01:25.477\nWe used some examples, some substitution\nof special characters inside of that,\n\n27\n00:01:25.477 --> 00:01:27.920\nthat was the last thing we talked about.\n\n28\n00:01:27.920 --> 00:01:31.858\nThe next thing we want to move\ninto is what's called addresses,\n\n29\n00:01:31.858 --> 00:01:34.750\nsed addresses, okay?\n\n30\n00:01:34.750 --> 00:01:38.740\nAnd basically what we're talking about,\nwhen I say a sed address is,\n\n31\n00:01:38.740 --> 00:01:42.620\nI want a specific line, right?\n\n32\n00:01:42.620 --> 00:01:47.220\nEither referencing it numerically,\nthis going to be line number 4, or\n\n33\n00:01:47.220 --> 00:01:49.350\nline number 12, or\nline number 2, whatever.\n\n34\n00:01:49.350 --> 00:01:55.410\nWe can address it that way, or\naddressing it through some string.\n\n35\n00:01:55.410 --> 00:01:59.871\nI want to look for a line that\ncontains the word balloons, right, so\n\n36\n00:01:59.871 --> 00:02:03.660\nyou look for balloons, and\nthat will be my address.\n\n37\n00:02:03.660 --> 00:02:07.013\nYou see the word balloons,\nthen I want you to affect that line,\n\n38\n00:02:07.013 --> 00:02:10.063\nthat's why I'm addressing\nthat specific line, okay?\n\n39\n00:02:10.063 --> 00:02:12.340\nSo that's what we mean\nwhen we say addresses.\n\n40\n00:02:13.580 --> 00:02:17.800\nSo now that we know what it is,\nwhy would we want to use that?\n\n41\n00:02:17.800 --> 00:02:21.940\nWell a lot of times,\nyou don't want to work on every single,\n\n42\n00:02:21.940 --> 00:02:25.300\nbecause you got to remember,\nwhen you fire off sed, what happens?\n\n43\n00:02:25.300 --> 00:02:29.484\nYou give it a string to look for,\nmaybe we're doing a substitution, and\n\n44\n00:02:29.484 --> 00:02:32.999\nwe're saying substitute this or\nthis, and what does it do?\n\n45\n00:02:32.999 --> 00:02:37.899\nIt starts going line by line in a text\nfile, and saying okay, there's a line,\n\n46\n00:02:37.899 --> 00:02:40.739\ndoes it have this string\nwe're looking for?\n\n47\n00:02:40.739 --> 00:02:44.656\nAnd if so, do the substitution, move\nto the next line, look for that string.\n\n48\n00:02:44.656 --> 00:02:49.040\nIf so, do the substitution, move to\nthe next line, and so on and so forth.\n\n49\n00:02:49.040 --> 00:02:54.435\nBut there are times when you're going\nto want to, that you know specifically\n\n50\n00:02:54.435 --> 00:02:59.255\nwhen there is an occurrence that you\nwant to manipulate or work with.\n\n51\n00:02:59.255 --> 00:03:01.048\nAnd not every other occurrence,\n\n52\n00:03:01.048 --> 00:03:04.820\nyou just want to work with that\nspecific occurrence, okay?\n\n53\n00:03:04.820 --> 00:03:06.540\nThat's when these addresses\nreally come in handy, and\n\n54\n00:03:06.540 --> 00:03:08.690\nyou'll actually find yourself\nusing them quite often.\n\n55\n00:03:08.690 --> 00:03:10.318\nI know that I do, very much so.\n\n56\n00:03:10.318 --> 00:03:14.955\nEspecially the number one seems to be,\n\n57\n00:03:14.955 --> 00:03:18.054\nto my mind, more usable.\n\n58\n00:03:18.054 --> 00:03:21.772\nBut I find myself using the string\naddressing more often and going, well,\n\n59\n00:03:21.772 --> 00:03:24.130\nI don't know what line numbers that is.\n\n60\n00:03:24.130 --> 00:03:27.372\nSo I know it has the word\nBolsheviks in it, so\n\n61\n00:03:27.372 --> 00:03:30.449\nI'll just address Bolsheviks, right?\n\n62\n00:03:30.449 --> 00:03:34.087\nSo I just find some unique thing\nabout that line and I'll drop it out,\n\n63\n00:03:34.087 --> 00:03:35.956\nI'll use that as my reference.\n\n64\n00:03:35.956 --> 00:03:37.936\n&gt;&gt; Daniel, that would definitely\nbe unique about that line,\n\n65\n00:03:37.936 --> 00:03:39.134\nI'm not even sure I can spell that.\n\n66\n00:03:39.134 --> 00:03:41.224\n&gt;&gt; [LAUGH]\n&gt;&gt; It would just be like nope, nope,\n\n67\n00:03:41.224 --> 00:03:41.814\nyou don't.\n\n68\n00:03:41.814 --> 00:03:45.895\nSo I'll be like, this isn't working, but\nI probably just misspelled that horribly.\n\n69\n00:03:45.895 --> 00:03:47.751\n&gt;&gt; Yeah, I was like,\nhow do I get the Russian characters?\n\n70\n00:03:47.751 --> 00:03:49.522\n&gt;&gt; [LAUGH]\n&gt;&gt; [CROSSTALK] keyboard,\n\n71\n00:03:49.522 --> 00:03:50.471\nI don't understand.\n\n72\n00:03:50.471 --> 00:03:54.580\nBut yeah, I find myself using\nthe addresses quite often.\n\n73\n00:03:54.580 --> 00:03:59.480\nThat doesn't negate the fact that\nthe number addresses are also very handy,\n\n74\n00:03:59.480 --> 00:04:01.090\nas well, especially with smaller files.\n\n75\n00:04:01.090 --> 00:04:03.130\nYou go, well, I was one, two, three,\nfour, five, six, seven, eight,\n\n76\n00:04:03.130 --> 00:04:06.420\nnine, it's the ninth line,\nnot a problem, I'll use that.\n\n77\n00:04:06.420 --> 00:04:09.910\nSo let's show you guys how to actually\nwork with those number systems and those\n\n78\n00:04:09.910 --> 00:04:15.210\nstring addresses so that we can reference\nspecific lines that we want, all right?\n\n79\n00:04:15.210 --> 00:04:16.440\nInto the screen we go, and\n\n80\n00:04:16.440 --> 00:04:20.140\nhopefully everything looks wonderful, look\nat how beautiful that is, very, very nice.\n\n81\n00:04:20.140 --> 00:04:23.710\nSo what we do is,\nlet's start off with number references.\n\n82\n00:04:23.710 --> 00:04:26.980\nOkay, I've got a text file, we saw before,\n\n83\n00:04:26.980 --> 00:04:31.500\nttls, we'll cat ttls.txt,\nwhich is Twinkle Twinkle Little Star.\n\n84\n00:04:31.500 --> 00:04:36.220\nTo help us, I have numbered them 1, 2, 3,\n\n85\n00:04:36.220 --> 00:04:39.940\n4, 5, and 6, so\nthat we can more easily see for\n\n86\n00:04:39.940 --> 00:04:44.670\nthese demonstrations which line we're\naffecting, and so there you go.\n\n87\n00:04:44.670 --> 00:04:45.670\nUnless you have that there,\n\n88\n00:04:45.670 --> 00:04:48.100\nyou would have to use something else\nto number the system, there you go.\n\n89\n00:04:49.390 --> 00:04:50.120\nSo let's use a number,\n\n90\n00:04:50.120 --> 00:04:54.880\nwe wanna reference, let's say we want\nto reference line number 2, okay?\n\n91\n00:04:54.880 --> 00:05:00.022\nI want to only affect line number 2, it\nwould look a little something like this,\n\n92\n00:05:00.022 --> 00:05:07.131\nsed ^2s/, and we'll say,\nchange out what with who.\n\n93\n00:05:07.131 --> 00:05:11.780\nAnd, I'll make that capital,\nlike that, so it's a little easier for\n\n94\n00:05:11.780 --> 00:05:14.210\nus to see in the results.\n\n95\n00:05:14.210 --> 00:05:17.390\nBada bing, and then we'll finish\nit off with a little tagger there,\n\n96\n00:05:17.390 --> 00:05:21.530\nthe single quote, and then feed\nit to the actual file, all right?\n\n97\n00:05:21.530 --> 00:05:25.880\nHit Enter, and\nnow you'll notice in line 2,\n\n98\n00:05:25.880 --> 00:05:29.790\nhow I wonder who you\nare has been affected.\n\n99\n00:05:29.790 --> 00:05:32.360\nBut there's another line that says,\nhow I wonder what you are,\n\n100\n00:05:32.360 --> 00:05:35.770\nas well, down here in line 6,\nhow I wonder what you are.\n\n101\n00:05:35.770 --> 00:05:40.780\nNotice it was not affected by the text,\nbecause we addressed line 2 specifically\n\n102\n00:05:40.780 --> 00:05:45.150\nand said,\nI only want this to happen on line 2.\n\n103\n00:05:45.150 --> 00:05:49.440\nSo that can come in very handy,\nkind of starting to carve out\n\n104\n00:05:49.440 --> 00:05:54.500\nspecific data that you need or\nwant to affect, okay?\n\n105\n00:05:55.940 --> 00:06:00.520\nBut we also have some more examples,\nwhat if I have a range of lines?\n\n106\n00:06:00.520 --> 00:06:06.060\nWhat if I want affect lines 2 and\n3, okay, what do we do there?\n\n107\n00:06:06.060 --> 00:06:11.262\nOkay, let's mess around with that,\nas I said, I'll say ^2,\n\n108\n00:06:11.262 --> 00:06:16.670\n3s/, cuz I'm doing substitution.\n\n109\n00:06:16.670 --> 00:06:18.050\nThen we'll just do the Ws and\n\n110\n00:06:18.050 --> 00:06:21.220\nVs thing again,\nlike we did on the previous show, W and V.\n\n111\n00:06:21.220 --> 00:06:25.782\nAnd finish it off with ttls.txt,\nhit Enter, and\n\n112\n00:06:25.782 --> 00:06:30.022\nnow line 1 is,\ntwinkle twinkle little star.\n\n113\n00:06:30.022 --> 00:06:34.241\nThere are Ws there that were not\nconverted to Vs, get to line 2,\n\n114\n00:06:34.241 --> 00:06:35.975\nhowever, and it's HOV.\n\n115\n00:06:35.975 --> 00:06:41.260\nRemember, it's the first instance that\nit finds, modifies it and moves on.\n\n116\n00:06:41.260 --> 00:06:46.080\nWe would have to use a flag if I\nwanted to do more or all, right?\n\n117\n00:06:46.080 --> 00:06:48.660\nI wonder what you are up\nabove the vorld so high,\n\n118\n00:06:48.660 --> 00:06:51.430\nso 3 was affected by our\nstring substitution.\n\n119\n00:06:52.480 --> 00:06:55.320\nAnd then like a diamond in the sky\ntwinkle, twinkle little star,\n\n120\n00:06:55.320 --> 00:06:56.530\nhow I wonder what you are.\n\n121\n00:06:56.530 --> 00:06:59.030\nNone of the other lines after 2 and 3, or\n\n122\n00:06:59.030 --> 00:07:02.000\nbefore it,\nwere affected by our substitution.\n\n123\n00:07:02.000 --> 00:07:05.385\nSo it has to be giving a range,\nso lines 2 through 3,\n\n124\n00:07:05.385 --> 00:07:10.601\nI could have done 2 comma 4, 2 comma 5,\nor 3 comma 5 if I wanted 3 through 5.\n\n125\n00:07:10.601 --> 00:07:14.053\nSo you start getting the idea,\nthat to set the range,\n\n126\n00:07:14.053 --> 00:07:17.450\nit's start of the range,\ncomma, end of the range.\n\n127\n00:07:17.450 --> 00:07:22.206\nYou just give it the line numbers that\nyou want to affect inside of it, okay?\n\n128\n00:07:22.206 --> 00:07:28.840\nNow, another range-type of\nworkings would be to say, I\n\n129\n00:07:28.840 --> 00:07:34.550\nwant to start with this number, and I just\nwanna go through the rest of the lines.\n\n130\n00:07:34.550 --> 00:07:39.288\nSo I wanna skip, basically,\nyou're kinda saying, jump over these,\n\n131\n00:07:39.288 --> 00:07:42.039\nstart here and then work your magic, okay?\n\n132\n00:07:42.039 --> 00:07:46.695\nWe can do that with a nice\nlittle special character, and\n\n133\n00:07:46.695 --> 00:07:51.066\nit looks like this,\nyou say sed 2,$, all right?\n\n134\n00:07:51.066 --> 00:07:55.368\nSo if I wanted to go from 2 to the rest\nof the fields, I might as well go with 3,\n\n135\n00:07:55.368 --> 00:07:58.506\njust cuz I feel like switching it up,\ngoing off script.\n\n136\n00:07:58.506 --> 00:07:59.883\nI know,\nit's probably going to break horribly.\n\n137\n00:07:59.883 --> 00:08:01.372\n[LAUGH] Right.\n\n138\n00:08:01.372 --> 00:08:07.254\nA $, then my substitution,\nwe'll do w's and v's, ATTLS.\n\n139\n00:08:07.254 --> 00:08:11.220\nHit, enter twinkle twinkle little star,\n\n140\n00:08:11.220 --> 00:08:14.720\nline one pristine,\nin it's original context.\n\n141\n00:08:14.720 --> 00:08:18.500\nHow I wonder what you are pristine,\nyet again, in its original context.\n\n142\n00:08:18.500 --> 00:08:25.090\nWe get to line three, up above the vorld\nso high, so the word world was affected.\n\n143\n00:08:25.090 --> 00:08:26.074\nSubstitution.\n\n144\n00:08:26.074 --> 00:08:29.000\nChange out the w's for\nv's like it's supposed to.\n\n145\n00:08:29.000 --> 00:08:32.460\nThere are no other w's, so\nwe see no other modification, and\n\n146\n00:08:32.460 --> 00:08:36.330\nthen line four,\nlike a diamond in the sky has no w's.\n\n147\n00:08:37.330 --> 00:08:41.622\nSo but it was actually brought into\nthe pattern space to see whether or\n\n148\n00:08:41.622 --> 00:08:45.479\nnot It should be affected,\nthere just was nothing to affect.\n\n149\n00:08:45.479 --> 00:08:49.996\nMove down to line 5 we say tvinkle\ninstead of twinkle for the first,\n\n150\n00:08:49.996 --> 00:08:54.674\nobviously skips the second one, and\nthen hov [LAUGH], instead of how,\n\n151\n00:08:54.674 --> 00:08:58.583\ncuz that was the first w it found,\nmodified it, moved on.\n\n152\n00:08:58.583 --> 00:09:03.320\nSo I went from line 3 to line 5, by just\ngiving it that range, instead of having to\n\n153\n00:09:03.320 --> 00:09:07.440\nsay three to five, if I just wanna go\nfrom one spot to the end of the file,\n\n154\n00:09:07.440 --> 00:09:12.112\nwith my modifications, well then I can\nuse that dollar sign special character to\n\n155\n00:09:12.112 --> 00:09:13.950\nhelp me do that very thing.\n\n156\n00:09:13.950 --> 00:09:15.226\nVery, very cool stuff.\n\n157\n00:09:16.918 --> 00:09:23.130\nOkay, the next thing we need to work\nour way through is grouping commands.\n\n158\n00:09:23.130 --> 00:09:26.070\nI wanna do more than one command.\n\n159\n00:09:26.070 --> 00:09:26.829\nHow do I do that?\n\n160\n00:09:26.829 --> 00:09:31.389\nWell the cool thing is that we just group\nthem together using the curly braces.\n\n161\n00:09:31.389 --> 00:09:35.186\nI typically I am like doing parenthesis,\nor I'm trying to make the signs.\n\n162\n00:09:35.186 --> 00:09:36.421\n&gt;&gt; [LAUGH]\n&gt;&gt; Look at my hands like I\n\n163\n00:09:36.421 --> 00:09:36.984\nhave that ability.\n\n164\n00:09:36.984 --> 00:09:39.639\n&gt;&gt; [LAUGH]\n&gt;&gt; You might if you were able to\n\n165\n00:09:39.639 --> 00:09:41.668\ndislocate fingers or something like that.\n\n166\n00:09:41.668 --> 00:09:42.218\n&gt;&gt; Yeah, yeah.\n\n167\n00:09:42.218 --> 00:09:43.331\n&gt;&gt; There they are.\n\n168\n00:09:43.331 --> 00:09:45.304\n&gt;&gt; [INAUDIBLE] some of these,\nyou'll pick up their hammer.\n\n169\n00:09:45.304 --> 00:09:49.283\n&gt;&gt; Now, Daniel, before we\n\n170\n00:09:49.283 --> 00:09:54.209\nget moving further with that,\n\n171\n00:09:54.209 --> 00:09:58.945\nthe scene that addressing can\n\n172\n00:09:58.945 --> 00:10:03.871\nbe used with numbers, right,\n\n173\n00:10:03.871 --> 00:10:08.607\nis there anyway that I can like\n\n174\n00:10:08.607 --> 00:10:13.439\nget to a certain pattern-\n&gt;&gt; Yeah, thank you.\n\n175\n00:10:13.439 --> 00:10:18.247\n&gt;&gt; And then, like, use say, I want you to\nfind this, and then do, not numerically,\n\n176\n00:10:18.247 --> 00:10:20.060\nbut based on a pattern I guess?\n\n177\n00:10:20.060 --> 00:10:22.822\n&gt;&gt; Man I was so\nexcited about talking about grouping and\n\n178\n00:10:22.822 --> 00:10:25.254\ndo the hammer hand joke,-\n&gt;&gt; [LAUGH]\n\n179\n00:10:25.254 --> 00:10:27.298\n&gt;&gt; That I totally forgot about we have\n\n180\n00:10:27.298 --> 00:10:28.501\nstring addresses.\n\n181\n00:10:28.501 --> 00:10:30.903\nLet's rewind and\ngo back to string addresses.\n\n182\n00:10:30.903 --> 00:10:32.483\nThat's why I have him here, right?\n\n183\n00:10:32.483 --> 00:10:35.330\nHe's keeping me on track,\nkeeping me moving in the right direction.\n\n184\n00:10:35.330 --> 00:10:38.806\nYou're right, we did the number addresses,\nbut we forgot the strings, so\n\n185\n00:10:38.806 --> 00:10:39.930\nlet's do that.\n\n186\n00:10:39.930 --> 00:10:43.797\nHow do I work with a string?\n\n187\n00:10:43.797 --> 00:10:46.294\nA little bit different than the number,\n\n188\n00:10:46.294 --> 00:10:49.972\nwhereas the number's kinda\nfloating out there by itself.\n\n189\n00:10:49.972 --> 00:10:54.051\nNot so much by itself, but\nit's right next to the 2.\n\n190\n00:10:54.051 --> 00:10:58.786\nWith the word, or the string,\nwe have to kind of delineate it to say,\n\n191\n00:10:58.786 --> 00:11:01.328\nthis is the string I want to address.\n\n192\n00:11:01.328 --> 00:11:09.305\nSo we would do,\nlet's say that we wanted to do, what word?\n\n193\n00:11:09.305 --> 00:11:13.706\nLet's use wonder there's two lines\nwith wonder, let's do that, or world,\n\n194\n00:11:13.706 --> 00:11:15.986\nlet's start with world, make it easy.\n\n195\n00:11:15.986 --> 00:11:17.740\nI don't wanna use multiple lines,\none line.\n\n196\n00:11:17.740 --> 00:11:21.900\nI know that up above the world so high,\nthere's no other line with the word world.\n\n197\n00:11:21.900 --> 00:11:26.953\nSo I'll say,\n\n198\n00:11:26.953 --> 00:11:36.641\nsed `/world/s/wv/`\n\n199\n00:11:36.641 --> 00:11:42.542\ngtls like that.\n\n200\n00:11:42.542 --> 00:11:47.614\nSo, now this, what's in between\nthese forward slashes, whatever\n\n201\n00:11:47.614 --> 00:11:53.655\nstring I have between those two forward\nslashes, is what I'm wanting to modify.\n\n202\n00:11:53.655 --> 00:11:55.738\nSo, you have to make sure\nto put those guys in there.\n\n203\n00:11:55.738 --> 00:11:59.963\nI know it's a lot of forward slashing\ngoing on, which is why, a lot of times,\n\n204\n00:11:59.963 --> 00:12:03.148\nwhen you look at said commands\nthat somebody has written,\n\n205\n00:12:03.148 --> 00:12:05.829\nyou're like yeah, I think sed can do that.\n\n206\n00:12:05.829 --> 00:12:08.970\nCan I do this with sed, and\nyou kinda Google search that, and\n\n207\n00:12:08.970 --> 00:12:12.740\nsee stuff that looks like this, and\nyou're going, what is happening?\n\n208\n00:12:12.740 --> 00:12:15.898\nNow, hopefully, that veil is\nstarting to be lifted way, and\n\n209\n00:12:15.898 --> 00:12:20.127\nyou understand what's going on, but\nthis is an address, I'm addressing this.\n\n210\n00:12:20.127 --> 00:12:23.671\nOkay, so let's fire that off, and\n\n211\n00:12:23.671 --> 00:12:29.697\nwe'll notice that up above the vorld so\nhigh was a modified,\n\n212\n00:12:29.697 --> 00:12:34.439\nbut none of the other,\ncuz we did w's and v's.\n\n213\n00:12:34.439 --> 00:12:35.379\nSed, what's it do?\n\n214\n00:12:35.379 --> 00:12:41.449\nTake in text, look for the original\nsubstitute with the alternative.\n\n215\n00:12:41.449 --> 00:12:44.535\n[COUGH] Move on to the next line,\nand look on, and so far,\n\n216\n00:12:44.535 --> 00:12:48.017\njust slurping line by line, and\nmove on, but if I address it and\n\n217\n00:12:48.017 --> 00:12:50.909\nI wanted to do that with the string,\nforward slash,\n\n218\n00:12:50.909 --> 00:12:55.052\nput something in between forward slash,\nput it at the beginning there, so\n\n219\n00:12:55.052 --> 00:12:59.451\nit knows this is where I wanna address\nfrom, and then run you're sed command.\n\n220\n00:12:59.451 --> 00:13:02.830\n&gt;&gt; Now Daniel, with this string\naddressing, if we were to go and\n\n221\n00:13:02.830 --> 00:13:05.460\nchange world to wonder,\nbecause there's two instances of wonder.\n\n222\n00:13:05.460 --> 00:13:08.657\nDoes it keep the same, do we get the first\nwonder, and that's the only one, or\n\n223\n00:13:08.657 --> 00:13:11.960\ndoes it find all of the wonders with the\nstring addressing to do the replacement?\n\n224\n00:13:11.960 --> 00:13:12.817\n&gt;&gt; That's a great question.\n\n225\n00:13:12.817 --> 00:13:14.127\nWhat do you think it does?\n\n226\n00:13:14.127 --> 00:13:19.434\n&gt;&gt; I'm gonna go with it does all of,\nmy gut, I wanna say it does all of them.\n\n227\n00:13:19.434 --> 00:13:20.681\n&gt;&gt; You gonna say it does all-\n&gt;&gt; But-\n\n228\n00:13:20.681 --> 00:13:21.490\n&gt;&gt; [LAUGH]\n\n229\n00:13:21.490 --> 00:13:22.313\n&gt;&gt; I'm like no.\n\n230\n00:13:22.313 --> 00:13:23.453\n&gt;&gt; You're scared to put\nyour money on the table?\n\n231\n00:13:23.453 --> 00:13:26.582\n&gt;&gt; Yeah, so I'm thinking in order to get\nall of them, we probably need to use\n\n232\n00:13:26.582 --> 00:13:29.271\na flag, or we're gonna get\nthe first one based on addressing.\n\n233\n00:13:29.271 --> 00:13:29.840\n&gt;&gt; We'll see.\n\n234\n00:13:29.840 --> 00:13:31.541\n&gt;&gt; Ugh!\n\n235\n00:13:31.541 --> 00:13:32.412\n&gt;&gt; Let's keep the suspense.\n\n236\n00:13:32.412 --> 00:13:34.620\nLet's just run it, and see what it does.\n\n237\n00:13:34.620 --> 00:13:37.540\nLet's see if my man\nJustin was on the money.\n\n238\n00:13:37.540 --> 00:13:43.973\nWe're going to change this to wonder and\nhere we go.\n\n239\n00:13:43.973 --> 00:13:46.897\nAah look at, you would of won that bet.\n\n240\n00:13:46.897 --> 00:13:47.780\nThat's exactly right.\n\n241\n00:13:47.780 --> 00:13:49.670\nIt does, it works on every line,\n\n242\n00:13:49.670 --> 00:13:52.989\nbecause you're saying I'm addressing\nlines that have this string in them.\n\n243\n00:13:54.040 --> 00:13:56.268\nIf that's one, that's great.\n\n244\n00:13:56.268 --> 00:13:58.371\nIf there's only one then\na lot of times you're like,\n\n245\n00:13:58.371 --> 00:13:59.880\nokay what's unique about this line?\n\n246\n00:13:59.880 --> 00:14:02.220\nLet me snatch that and\nuse that as my address.\n\n247\n00:14:02.220 --> 00:14:03.162\nIt makes that easy.\n\n248\n00:14:03.162 --> 00:14:09.430\nSometimes it's not that easy, or sometimes\nyou want to effect every line that\n\n249\n00:14:09.430 --> 00:14:13.718\nhas that string, and that would be one of\nthe benefits of being to use string, and\n\n250\n00:14:13.718 --> 00:14:20.010\nsay, I want to effect all lines with this\nin it as opposed to saying number sign,\n\n251\n00:14:20.010 --> 00:14:25.700\nyou could use the numbers if you wanted,\nbut that could get a little difficult.\n\n252\n00:14:25.700 --> 00:14:29.630\nInstead of going each one of these lines\nhas this word in it, I wanna change that\n\n253\n00:14:29.630 --> 00:14:33.890\nword, I wanna affect that word, or\nI wanna affect this character that always\n\n254\n00:14:33.890 --> 00:14:38.040\nstarts with this, or always ends with\nthat, or always has this in that string.\n\n255\n00:14:38.040 --> 00:14:41.973\nThat's just easier for me, I find\nthat a whole lot easier to work with,\n\n256\n00:14:41.973 --> 00:14:44.938\nwhen I'm using sed,\nbecause I'm not a numbers guy.\n\n257\n00:14:44.938 --> 00:14:46.230\nSo there you go.\n\n258\n00:14:46.230 --> 00:14:49.700\n&gt;&gt; Okay Daniel, I got one final question,\nbefore we come back into groupings.\n\n259\n00:14:49.700 --> 00:14:53.500\nSo, okay, I found both those lines,\nthe first W was affected, and\n\n260\n00:14:53.500 --> 00:14:54.720\nchanged into a V.\n\n261\n00:14:54.720 --> 00:14:55.686\nGot it.\n\n262\n00:14:55.686 --> 00:14:58.923\nWhat happens if I were to add the G flag?\n\n263\n00:14:58.923 --> 00:15:01.871\nCuz I, are we getting a little too\nhigh in the weeds, number one?\n\n264\n00:15:01.871 --> 00:15:03.142\n&gt;&gt; No, no, that's totally good.\n\n265\n00:15:03.142 --> 00:15:06.334\n&gt;&gt; Or\ndoes that use just that line that matches,\n\n266\n00:15:06.334 --> 00:15:11.130\nor is it, well, we found those,\nbut it really does it everywhere?\n\n267\n00:15:11.130 --> 00:15:14.940\n&gt;&gt; Yeah, it should be just the line that\nmatches, because that address is saying,\n\n268\n00:15:14.940 --> 00:15:21.352\ngo to this specific area, and then run\nthis sed command against sed line.\n\n269\n00:15:21.352 --> 00:15:26.360\nSo that way, if we threw that G flag\non there, it should affect all the Ws\n\n270\n00:15:26.360 --> 00:15:30.360\non the lines that we're addressable,\ninstead of just the first instance.\n\n271\n00:15:30.360 --> 00:15:35.149\nSo let's, we'll do that, just to\nverify that I'm not a complete idiot.\n\n272\n00:15:35.149 --> 00:15:35.780\nLet's see here.\n\n273\n00:15:35.780 --> 00:15:36.910\nHere we go, g.\n\n274\n00:15:36.910 --> 00:15:41.667\nBing, and now you'll see both line two and\nline six,\n\n275\n00:15:41.667 --> 00:15:46.226\nhov I vonder vhat you are,\nall w's were affected.\n\n276\n00:15:46.226 --> 00:15:48.747\nTwinkle twinkle little\nstar wasn't affected.\n\n277\n00:15:48.747 --> 00:15:51.532\nUp above the world so\nhigh is not affected.\n\n278\n00:15:51.532 --> 00:15:52.938\nLike a diamond in the sky didn't have a W.\n\n279\n00:15:52.938 --> 00:15:55.395\nTwinkle twinkle little\nstar was not affected.\n\n280\n00:15:55.395 --> 00:15:58.433\nLine six though,\nhov I vonder vhat you are,\n\n281\n00:15:58.433 --> 00:16:02.798\nall the w's Were change out\nbecause we threw that G5 on there.\n\n282\n00:16:02.798 --> 00:16:07.721\nSo to answer your question, yes it does\ngo straight to the heart of what you're\n\n283\n00:16:07.721 --> 00:16:12.810\ntrying to do and then runs whatever\nafter that is the command, right?\n\n284\n00:16:12.810 --> 00:16:15.010\nAnd now,\nunless you had more questions about that.\n\n285\n00:16:15.010 --> 00:16:17.850\n&gt;&gt; Well I was just gonna say,\nthat clarifies how I was thinking about\n\n286\n00:16:17.850 --> 00:16:22.320\nthe flag because I was like that's global,\nthat's everywhere.\n\n287\n00:16:22.320 --> 00:16:26.800\nBut it's actually Locally scoped\nbased on the criteria of the match.\n\n288\n00:16:26.800 --> 00:16:27.500\n&gt;&gt; Correct.\n&gt;&gt; Right, so\n\n289\n00:16:27.500 --> 00:16:30.040\nif you're just doing a straight\nsubstitution, -g, yeah.\n\n290\n00:16:30.040 --> 00:16:31.870\nThat's for the entire stream, but\n\n291\n00:16:31.870 --> 00:16:36.550\nif you're addressing, that's actually\nglobally to a smaller cosmos.\n\n292\n00:16:36.550 --> 00:16:39.520\n&gt;&gt; Yeah, you turn global and\nthere's something else,\n\n293\n00:16:39.520 --> 00:16:42.820\nyou redefine what global means\nat that point, very cool.\n\n294\n00:16:42.820 --> 00:16:45.510\nA good point though cuz this\nis something you wanna do and\n\n295\n00:16:45.510 --> 00:16:49.210\nhopefully I'm helping you see how\nyou might, o yeah that'll be great.\n\n296\n00:16:49.210 --> 00:16:51.080\nLike we said be able to do that thing but\n\n297\n00:16:51.080 --> 00:16:54.750\nto carve those lines out,\nright affect them the way we want.\n\n298\n00:16:54.750 --> 00:16:56.480\nLet's go back to the grouping thing,\nright?\n\n299\n00:16:56.480 --> 00:16:58.790\nSo we talked about grouping very briefly,\n\n300\n00:16:58.790 --> 00:17:00.970\nwe're gonna dive into\nthat a little bit more.\n\n301\n00:17:00.970 --> 00:17:04.680\nRemember it's the curly braces that\nsay I have command string one and\n\n302\n00:17:04.680 --> 00:17:10.180\ncommand string two, that you put them\ntogether and now it's one big command.\n\n303\n00:17:10.180 --> 00:17:14.750\nSo your kinda like chaining them,\ninside of a boundary, right?\n\n304\n00:17:14.750 --> 00:17:18.170\nAnd so those boundaries will let you\nknow what group of commands are.\n\n305\n00:17:18.170 --> 00:17:24.250\nSo, I do have an example as usual\nto show you how this works.\n\n306\n00:17:24.250 --> 00:17:28.370\nLet me clear my screen, or\nwe are gonna be a little clotted up.\n\n307\n00:17:28.370 --> 00:17:33.670\nHere is how you can do it,\nyou can say like so,\n\n308\n00:17:33.670 --> 00:17:40.610\nI'm going to say two curly brace,\nso I'm referencing line two, right.\n\n309\n00:17:40.610 --> 00:17:46.620\nNow I've started a curly brace and\nwhat we're going to do is say s and\n\n310\n00:17:46.620 --> 00:17:50.240\nwe'll change wonder for\nponder, how about that.\n\n311\n00:17:51.361 --> 00:17:55.860\nA word, wonder or ponder,\nI'll actually make it like that.\n\n312\n00:17:55.860 --> 00:17:57.780\nMake it a little easier to see.\n\n313\n00:17:57.780 --> 00:18:00.800\nAnd then we'll change what with foo.\n\n314\n00:18:00.800 --> 00:18:01.520\nHow about that?\n\n315\n00:18:01.520 --> 00:18:04.700\nWe'll do that cuz that will give\nus a second command that we need.\n\n316\n00:18:05.730 --> 00:18:09.960\nAnd then,\nactually I hate doing it this way.\n\n317\n00:18:09.960 --> 00:18:12.580\nThis is the typically way I\nlike to group commands is\n\n318\n00:18:12.580 --> 00:18:15.200\nI will drop to that secondary prompt.\n\n319\n00:18:15.200 --> 00:18:18.810\nStart getting a little convoluted looking\nso I like to keep it separate like this.\n\n320\n00:18:18.810 --> 00:18:20.010\nSo if I just hit two and\n\n321\n00:18:20.010 --> 00:18:25.540\nhit enter secondary prompt I just\nfind it easier to read and see.\n\n322\n00:18:25.540 --> 00:18:30.320\nNow you'll be able to easily see this\nis command one this is command two.\n\n323\n00:18:30.320 --> 00:18:36.350\nSo lets do again we'll do s wonder for\nponder.\n\n324\n00:18:36.350 --> 00:18:41.770\nSo than we'll do s that we're doing?\n\n325\n00:18:41.770 --> 00:18:43.480\nWhat for who.What for who.\n\n326\n00:18:43.480 --> 00:18:45.440\nWhat for who.\n\n327\n00:18:45.440 --> 00:18:48.290\nThen we finish it off with our.\n\n328\n00:18:48.290 --> 00:18:53.370\nCheckmark, and\ndon't forget your curly brace, easy to do.\n\n329\n00:18:53.370 --> 00:18:54.900\n&gt;&gt; Well Daniel, before you hit Enter,\n\n330\n00:18:54.900 --> 00:18:57.690\nI think you accidentally deleted\nthe first curly brace at the top.\n\n331\n00:18:57.690 --> 00:18:58.265\n&gt;&gt; Thank you, sir.\n\n332\n00:18:58.265 --> 00:18:59.020\nCtrl+Z out of there.\n\n333\n00:18:59.020 --> 00:19:03.400\nIf you get a little too\ncrazy with the backspace,\n\n334\n00:19:03.400 --> 00:19:05.730\nthose things can happen,\nyou gotta be careful about that.\n\n335\n00:19:05.730 --> 00:19:08.160\nThanks for\nthe good eagle eye there, my man.\n\n336\n00:19:08.160 --> 00:19:14.410\nTry that one more time To,\nopen curly brace, there we go.\n\n337\n00:19:14.410 --> 00:19:20.160\nNow we can do S wonder with honder.\n\n338\n00:19:20.160 --> 00:19:25.730\nThen S what who close curly brace.\n\n339\n00:19:25.730 --> 00:19:28.920\nOuch, give a little ticky ticky.\n\n340\n00:19:28.920 --> 00:19:32.580\nAnd feed it LS.txt.\n\n341\n00:19:32.580 --> 00:19:33.540\nThere we go.\n\n342\n00:19:33.540 --> 00:19:40.960\nSo now we get twinkle, twinkle little star\nhow I ponder who you are on line two.\n\n343\n00:19:40.960 --> 00:19:44.400\nSo I was able to group those\ntogether using those curly braces.\n\n344\n00:19:44.400 --> 00:19:45.520\nSo very simple function.\n\n345\n00:19:45.520 --> 00:19:51.090\nAnd again I like to drop that secondary\nprompt just to Go here's one command,\n\n346\n00:19:51.090 --> 00:19:53.940\nhit enter, here's another command,\nhit enter, three, four, and so on,\n\n347\n00:19:53.940 --> 00:19:57.950\nit just makes your life a whole lot\neasier since we're gonna do that.\n\n348\n00:19:57.950 --> 00:20:01.910\nLet's see here and a couple other cool\nfunctions that we might come up with when\n\n349\n00:20:01.910 --> 00:20:03.150\nit comes to using SED.\n\n350\n00:20:03.150 --> 00:20:06.180\nA lot of times we like to delete a line.\n\n351\n00:20:06.180 --> 00:20:09.790\nWhat if I just wanna remove\na line out all together And\n\n352\n00:20:09.790 --> 00:20:14.861\nI've kind of [COUGH] play\naround with this a little bit,\n\n353\n00:20:14.861 --> 00:20:18.700\nI fun with deletion cuz it kind of\nscrew things up, the way it looks.\n\n354\n00:20:18.700 --> 00:20:22.600\nSo when you're playing with this, have\nsome fun, delete some interesting lines or\n\n355\n00:20:22.600 --> 00:20:26.200\ntext or whatever and\nyou can have a lot of good time here.\n\n356\n00:20:26.200 --> 00:20:28.670\nSo I wanna delete lines, how do I do that?\n\n357\n00:20:28.670 --> 00:20:31.800\nWe use our D Option okay.\n\n358\n00:20:31.800 --> 00:20:34.100\nSo just a wonderful little d.\n\n359\n00:20:34.100 --> 00:20:40.330\nAll you have to do is say here the line\nI want d alright so bing bing.\n\n360\n00:20:40.330 --> 00:20:41.030\nVery very simple.\n\n361\n00:20:41.030 --> 00:20:42.990\nLet's look a that we'll\nclear this out here.\n\n362\n00:20:42.990 --> 00:20:49.360\nWe'll say in detail let's say I want to\ndelete all the lines in twinkle twinkle.\n\n363\n00:20:49.360 --> 00:20:51.760\nI want them all gone, don't show them.\n\n364\n00:20:52.790 --> 00:20:56.460\nWell, I could just not cap\nthe file [LAUGH] right?\n\n365\n00:20:56.460 --> 00:20:59.580\nBut for whatever reasons,\nI want to delete every line.\n\n366\n00:20:59.580 --> 00:21:01.250\nJust want to give that to you.\n\n367\n00:21:01.250 --> 00:21:07.135\nAs I said, D like so, right?\n\n368\n00:21:07.135 --> 00:21:09.220\nDTLS, just like that.\n\n369\n00:21:10.350 --> 00:21:11.950\nBang, hit enter.\n\n370\n00:21:11.950 --> 00:21:12.610\nNothing comes out.\n\n371\n00:21:13.970 --> 00:21:15.905\nSure there's instances\nwhere you want to do this.\n\n372\n00:21:15.905 --> 00:21:18.080\n[LAUGH]\n&gt;&gt; Now Daniel just for\n\n373\n00:21:18.080 --> 00:21:22.100\nclarity that is deleting the output\nstream from the file, and\n\n374\n00:21:22.100 --> 00:21:24.640\nnot altering the file\nitself at this point right?\n\n375\n00:21:24.640 --> 00:21:27.930\n&gt;&gt; Actually it's deleting\nyour hard drive right now.\n\n376\n00:21:27.930 --> 00:21:31.080\n&gt;&gt; So sed quote d is actual an alias.\n\n377\n00:21:31.080 --> 00:21:31.910\n&gt;&gt; For Denison.\n\n378\n00:21:31.910 --> 00:21:35.353\n&gt;&gt; For sudo\n&gt;&gt; Rm-rm.\n\n379\n00:21:35.353 --> 00:21:37.290\n&gt;&gt; Yeah, yeah, it's a fun little trick.\n\n380\n00:21:37.290 --> 00:21:43.556\nNo, he's exactly right, it's not\ndeleting the actual file ttls.txt.\n\n381\n00:21:43.556 --> 00:21:46.560\nIt' still there, it's just saying SETT\n\n382\n00:21:46.560 --> 00:21:51.720\nis bringing that file into its\npattern space line by line.\n\n383\n00:21:51.720 --> 00:21:54.270\n&gt;&gt; And then going just delete that,\njust everything gone,\n\n384\n00:21:54.270 --> 00:21:56.370\neverything gone, everything gone,\neverything gone.\n\n385\n00:21:56.370 --> 00:22:01.030\nUntil I'm at the end of the file\noutput nothing to the screen, and\n\n386\n00:22:01.030 --> 00:22:02.500\nmove on accordingly right?\n\n387\n00:22:02.500 --> 00:22:06.650\nSo you might find some reason to do this,\nso I just wanted to make you aware that\n\n388\n00:22:06.650 --> 00:22:10.500\nyou can delete everything if\nyou want to in the return.\n\n389\n00:22:10.500 --> 00:22:15.170\nTo the screen but typically probably\nnot how we are going to use\n\n390\n00:22:15.170 --> 00:22:20.170\nthis probably going to want to\ndelete a specific line number four.\n\n391\n00:22:20.170 --> 00:22:25.910\nWe will say line number four like\na diamond in the sky that has got\n\n392\n00:22:25.910 --> 00:22:29.950\nto go I'm writing this poem and That whole\ndiamond line just isn't speaking to me.\n\n393\n00:22:29.950 --> 00:22:32.110\nI wanna pull it out here, right?\n\n394\n00:22:32.110 --> 00:22:38.040\nIt'll say set for D like so, right?\n\n395\n00:22:38.040 --> 00:22:41.010\nPut your tick mark on TTLS, hit that.\n\n396\n00:22:41.010 --> 00:22:44.260\nAnd now you'll notice, this is\nthe reason I numbered these things.\n\n397\n00:22:44.260 --> 00:22:47.330\nIt went one, two, three, five, and six.\n\n398\n00:22:47.330 --> 00:22:50.720\nOr is gone it doesn't\neven exist in this world.\n\n399\n00:22:50.720 --> 00:22:52.640\nIt has been completely deleted.\n\n400\n00:22:52.640 --> 00:22:56.080\nWe could also do ranges of lines\njust like we did before right.\n\n401\n00:22:56.080 --> 00:22:58.190\nWorking with the ranges and the addresses.\n\n402\n00:22:58.190 --> 00:23:04.150\nSo if I wanted to I could say said three\nand four have got to hit the bricks.\n\n403\n00:23:06.380 --> 00:23:09.600\nWith that and now it's one,\ntwo, five and six, okay?\n\n404\n00:23:09.600 --> 00:23:15.270\nAlso again, the full range from here\nto the end, can work with that as well.\n\n405\n00:23:15.270 --> 00:23:22.664\nSo, sid I'll say four,$\"nttls.\n\n406\n00:23:22.664 --> 00:23:25.560\nBada bing.\n\n407\n00:23:25.560 --> 00:23:26.810\nI see expression.\n\n408\n00:23:26.810 --> 00:23:28.210\nOkay I did a little.\n\n409\n00:23:28.210 --> 00:23:29.100\n&gt;&gt; You're missing a D.\n\n410\n00:23:29.100 --> 00:23:33.710\n&gt;&gt; I'm missing a specific character there\nwhich kind of makes this whole thing work.\n\n411\n00:23:33.710 --> 00:23:35.340\nI get a little ahead of myself sometimes.\n\n412\n00:23:35.340 --> 00:23:36.890\nThat happens, what are you gonna do?\n\n413\n00:23:36.890 --> 00:23:37.730\nThere we go.\n\n414\n00:23:37.730 --> 00:23:40.710\nNow I see lines one, two, and\nthree but not four, five, and\n\n415\n00:23:40.710 --> 00:23:42.020\nsix cuz they've been deleted out.\n\n416\n00:23:43.490 --> 00:23:45.240\nAlso, can address with world day.\n\n417\n00:23:45.240 --> 00:23:49.720\nYou're starting to see how these things\nkind of build Upon each other, all right?\n\n418\n00:23:49.720 --> 00:23:54.740\nSo if I wanna delete the line with\nthe word world in it, how do we do that?\n\n419\n00:23:54.740 --> 00:23:56.508\nVery similar to what we've already seen.\n\n420\n00:23:56.508 --> 00:24:00.214\nSend '/world/d'.\n\n421\n00:24:00.214 --> 00:24:07.750\nSo bring your tick, feed it the text and\nnow you see that line 3.\n\n422\n00:24:07.750 --> 00:24:12.970\nHas done it's best Claude Raines, John,\n\n423\n00:24:12.970 --> 00:24:17.030\nthat's an old reference, very impressed.\n\n424\n00:24:18.060 --> 00:24:22.260\n&gt;&gt; So, Dania, this deleting, I can see\nwhere this, right, I need to process some\n\n425\n00:24:22.260 --> 00:24:25.470\nthings, get rid of those, and\nmaybe this goes to another file.\n\n426\n00:24:25.470 --> 00:24:28.370\nWe've seen the substitution and\ndeletion are straight forward,\n\n427\n00:24:28.370 --> 00:24:33.560\nwas said I feel like maybe\nwe could insert or append.\n\n428\n00:24:33.560 --> 00:24:37.040\n&gt;&gt; Yeah, we totally can insert or append.\n\n429\n00:24:37.040 --> 00:24:40.100\nI'm looking at our clock I'm wondering\nif I have enough time to throw insert or\n\n430\n00:24:40.100 --> 00:24:42.510\nappend in or would it be better to,\n\n431\n00:24:42.510 --> 00:24:47.410\nI think because of how little time we\nhave left, I think this might be best\n\n432\n00:24:47.410 --> 00:24:50.400\nsuited because I've got some more\nstuff to go after that as well.\n\n433\n00:24:50.400 --> 00:24:55.210\nSo this might be a good nationals\ntopics for us to Segway to the path.\n\n434\n00:24:55.210 --> 00:24:55.710\n&gt;&gt; All right.\n\n435\n00:24:55.710 --> 00:24:59.320\nAnd well, we're gonna have to\nwait to see how to insert or\n\n436\n00:24:59.320 --> 00:25:01.070\nappend information, right?\n\n437\n00:25:01.070 --> 00:25:01.980\nWe can substitute and\n\n438\n00:25:01.980 --> 00:25:06.280\ndelete and we're trying to see\nhow these patterns come together.\n\n439\n00:25:06.280 --> 00:25:07.720\n[INAUDIBLE] of that and global that.\n\n440\n00:25:09.150 --> 00:25:10.200\nI'm starting to get it, Daniel.\n\n441\n00:25:10.200 --> 00:25:11.630\nSo thank you so much for that.\n\n442\n00:25:11.630 --> 00:25:14.230\nBut it does look like we're going\nto have to come back with a part\n\n443\n00:25:14.230 --> 00:25:19.110\nthree to finish up our intro to sed and\njust as a reminder, this is an intro.\n\n444\n00:25:19.110 --> 00:25:22.150\nWe haven't even started to\nget really deep into it.\n\n445\n00:25:22.150 --> 00:25:24.990\nBut definitely stay tuned and\ncome back for that part three.\n\n446\n00:25:24.990 --> 00:25:26.540\nBut we are going to go ahead and\nwrap this one up.\n\n447\n00:25:26.540 --> 00:25:27.970\nSo signing off for IT Pro.TV.\n\n448\n00:25:27.970 --> 00:25:29.850\nI've been your host Justin Dennison.\n\n449\n00:25:29.850 --> 00:25:30.530\n&gt;&gt; I'm Daniel Lowery.\n\n450\n00:25:30.530 --> 00:25:32.870\n&gt;&gt; And we'll see you next time.\n\n451\n00:25:32.870 --> 00:25:38.687\n[MUSIC]\n\n452\n00:25:38.687 --> 00:25:41.696\nThank you for watching ITProTV.\n\n",
          "vimeoId": "238110387"
        },
        {
          "description": "In this episode, Daniel and Justin finish their introduction to sed by demonstrating and explaining how to insert and/or append lines of text, changing lines of text, transforming characters, printing text, and reading text from a separate file.",
          "length": "1907",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-3-intro_to_sed_pt_3-101217-PGM.00_31_52_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-3-intro_to_sed_pt_3-101217-PGM.00_31_52_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-2-1-3-intro_to_sed_pt_3-101217-PGM.00_31_52_20.Still001-sm.jpg",
          "title": "Intro to Sed Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.323\nWelcome to IT Pro TV.\n\n2\n00:00:01.323 --> 00:00:06.551\nI'm you host, Don- [CROSSTALK]\n\n3\n00:00:06.551 --> 00:00:08.212\n[MUSIC]\n\n4\n00:00:08.212 --> 00:00:11.870\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:11.870 --> 00:00:15.831\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of IT Pro TV.\n\n6\n00:00:15.831 --> 00:00:20.351\nI'm your host Justin Dennison, and\nwe're coming back with a Part three in\n\n7\n00:00:20.351 --> 00:00:24.251\nour advanced Shell scripting\nseries with intro to sed, right?\n\n8\n00:00:25.410 --> 00:00:26.425\nPart three on.\n\n9\n00:00:26.425 --> 00:00:30.631\nAnd it's just the intro, but\nthere is a, you need these foundations.\n\n10\n00:00:30.631 --> 00:00:32.251\nAnd here to help us along is Mr.\nDaniel Lowrie.\n\n11\n00:00:32.251 --> 00:00:33.382\nHow are you doing today, Daniel?\n\n12\n00:00:33.382 --> 00:00:34.132\n&gt;&gt; I'm doing fantastic.\n\n13\n00:00:34.132 --> 00:00:38.052\nWell, I'm glad to be back,\nif I can get that out of the old pie hole.\n\n14\n00:00:38.052 --> 00:00:41.104\nFor you good folks, I am glad to see\nyou folks out there again as well.\n\n15\n00:00:41.104 --> 00:00:44.909\nHopefully you're excited as I am to\ncome back and look at more sed, and\n\n16\n00:00:44.909 --> 00:00:46.141\nwhat we can do with it.\n\n17\n00:00:46.141 --> 00:00:49.698\nIf you remember the last two episodes\nwe've done a lot of stuff so far,\n\n18\n00:00:49.698 --> 00:00:51.703\nswapping out text for alternate text.\n\n19\n00:00:51.703 --> 00:00:56.636\nWe've looked at deleting text,\nwe've even grouped commands together.\n\n20\n00:00:56.636 --> 00:00:59.471\nWe've done a lot of different things, and\n\n21\n00:00:59.471 --> 00:01:04.453\nnow we're gonna move into appending\ntext and inserting text, all right?\n\n22\n00:01:04.453 --> 00:01:06.244\nSo these two things\nthat we might wanna do.\n\n23\n00:01:06.244 --> 00:01:12.251\nWhat if I want to insert\na string of text before the line?\n\n24\n00:01:12.251 --> 00:01:15.983\nOr if I want to append\nto something after line?\n\n25\n00:01:15.983 --> 00:01:16.692\nMm-hm?\n\n26\n00:01:16.692 --> 00:01:19.271\nThese things might actually come in\nhandy for you from time to time.\n\n27\n00:01:19.271 --> 00:01:23.134\nSo I wanna make sure that your\nintroductory sed knowledge is nice and\n\n28\n00:01:23.134 --> 00:01:24.842\nround and well-developed.\n\n29\n00:01:24.842 --> 00:01:29.533\nSo that, if that need arises, well then\nyou're able to perform that action.\n\n30\n00:01:29.533 --> 00:01:32.615\nSo let's, without further ado,\nwe'll just jump right in.\n\n31\n00:01:32.615 --> 00:01:35.830\nLet's do insert first,\nhow does that sound?\n\n32\n00:01:35.830 --> 00:01:40.114\nWe have our Twinkle Twinkle Little Star\nttls.txt that we've been working with.\n\n33\n00:01:40.114 --> 00:01:44.312\nI'll cat that,\njust to remind us of what it looks like.\n\n34\n00:01:44.312 --> 00:01:48.522\nThat is the pristine text, right?\n\n35\n00:01:48.522 --> 00:01:51.750\nThat hasn't been touched or\nmodified or worked with in any way.\n\n36\n00:01:51.750 --> 00:01:55.440\nNo text has been harmed in\nthe making of this episode.\n\n37\n00:01:55.440 --> 00:01:59.138\nBut now we wanna append to it,\nI'm sorry insert.\n\n38\n00:01:59.138 --> 00:02:00.962\nThat's what we're gonna start with,\ninsert.\n\n39\n00:02:00.962 --> 00:02:02.200\nWe wanna insert something into it.\n\n40\n00:02:02.200 --> 00:02:06.031\nWe want to insert something\nbefore a line or each line.\n\n41\n00:02:06.031 --> 00:02:08.490\nWe can start off with\nthat big broad brush, so\n\n42\n00:02:08.490 --> 00:02:11.890\nI wanna insert text about four each line,\nhow do I do that?\n\n43\n00:02:11.890 --> 00:02:15.330\nAll right, we use the I special character.\n\n44\n00:02:15.330 --> 00:02:20.235\nWe also have an I option, so\ndon't get to confused which probably could\n\n45\n00:02:20.235 --> 00:02:25.251\ndo very easily._ But, and the way\nthis works it's like an I operator.\n\n46\n00:02:25.251 --> 00:02:27.553\nIt's a special character, okay?\n\n47\n00:02:27.553 --> 00:02:28.284\nSo it looks like this.\n\n48\n00:02:28.284 --> 00:02:33.778\nWe say Sed, open single quotes,\nand we say i\\,\n\n49\n00:02:33.778 --> 00:02:39.279\nlike that and\nthen we give it some text to append.\n\n50\n00:02:39.279 --> 00:02:40.450\nAnd that's another thing.\n\n51\n00:02:40.450 --> 00:02:44.030\nTypically, when I have pending text, so\n\n52\n00:02:44.030 --> 00:02:49.367\nif I put some text in and\nsay this is appended text, like that.\n\n53\n00:02:49.367 --> 00:02:51.012\nI keep wanting to do appended.\n\n54\n00:02:51.012 --> 00:02:52.042\nMy goodness, I've got it on the brain.\n\n55\n00:02:52.042 --> 00:02:55.090\nInserted, inserted text, okay?\n\n56\n00:02:55.090 --> 00:02:56.571\nThis is inserted text.\n\n57\n00:02:56.571 --> 00:02:59.392\nTypically when we're\nworking on SID commands,\n\n58\n00:02:59.392 --> 00:03:02.569\nyou'll notice my slash It's\nlooking a little wonky.\n\n59\n00:03:02.569 --> 00:03:04.770\nIt's cattywampus as it were, right?\n\n60\n00:03:04.770 --> 00:03:07.244\nIt's leaning the other way.\n\n61\n00:03:07.244 --> 00:03:09.240\nWell, that's because\nthat's how this works.\n\n62\n00:03:09.240 --> 00:03:10.940\nSo don't get confused with that.\n\n63\n00:03:10.940 --> 00:03:15.917\nWhen you're inserting or appending,\nyou need to work with back slashes,\n\n64\n00:03:15.917 --> 00:03:17.425\nnot forward slashes.\n\n65\n00:03:17.425 --> 00:03:19.263\nI hope that comes out right for you guys.\n\n66\n00:03:19.263 --> 00:03:22.252\nBack slash, forward slash.\n\n67\n00:03:22.252 --> 00:03:24.449\nThe screen is mirrored for me.\n\n68\n00:03:24.449 --> 00:03:27.340\n&gt;&gt; [LAUGH]\n&gt;&gt; Make sure you follow those rules.\n\n69\n00:03:27.340 --> 00:03:28.804\nOtherwise, it's gonna get weird, okay?\n\n70\n00:03:28.804 --> 00:03:30.577\nSo just keep that in mind.\n\n71\n00:03:30.577 --> 00:03:32.561\nThen I'll close my single quote out.\n\n72\n00:03:32.561 --> 00:03:35.930\nNotice no closing backslash or\nforward slash as well.\n\n73\n00:03:35.930 --> 00:03:41.310\nJust I\\ and the text you wish to append.\n\n74\n00:03:41.310 --> 00:03:44.651\nAnd if in this form,\nit's going to look weird.\n\n75\n00:03:44.651 --> 00:03:47.986\nWe'll run it up the flag pole here,\nttls.txt.\n\n76\n00:03:47.986 --> 00:03:52.381\nHit Enter, see what's happened.\n\n77\n00:03:52.381 --> 00:03:53.932\nThis is inserted text.\n\n78\n00:03:53.932 --> 00:03:55.622\nTwinkle, twinkle little star.\n\n79\n00:03:55.622 --> 00:03:57.488\nThis is inserted text.\n\n80\n00:03:57.488 --> 00:03:58.448\nHow I wonder what you are.\n\n81\n00:03:58.448 --> 00:03:59.544\nThis is inserted text.\n\n82\n00:03:59.544 --> 00:04:00.599\nAnd so on and so forth.\n\n83\n00:04:00.599 --> 00:04:02.217\nYou get the idea.\n\n84\n00:04:02.217 --> 00:04:04.780\nSo why did it do that?\n\n85\n00:04:04.780 --> 00:04:09.654\nBecause we didn't define anything,\nwe just said we wanna insert this text.\n\n86\n00:04:09.654 --> 00:04:11.372\nAnd since what does sed do?\n\n87\n00:04:11.372 --> 00:04:16.119\nTakes in a line and says,\nwhat do you want me to do with that line?\n\n88\n00:04:16.119 --> 00:04:18.703\nI want you to insert text before it.\n\n89\n00:04:18.703 --> 00:04:23.211\nAll right, remember the insert's\nhappening before the line.\n\n90\n00:04:23.211 --> 00:04:26.710\nSo kinda taking that line and before that,\nyou're always gonna tag this on.\n\n91\n00:04:26.710 --> 00:04:28.109\nIt's gonna get its own separate line.\n\n92\n00:04:28.109 --> 00:04:31.812\nSo if you wanted to insert a line\nbetween a line you could do that.\n\n93\n00:04:31.812 --> 00:04:35.341\nBut if you wanted it for every line,\nthis is the way you would do it.\n\n94\n00:04:35.341 --> 00:04:39.313\nI guess there's application for that and\nthis is why there's that functionality.\n\n95\n00:04:39.313 --> 00:04:44.301\nI probably not using this a ton, but it\nis there for us to be able to work with.\n\n96\n00:04:44.301 --> 00:04:49.243\nMore often than not though,\nI wanna say a specific line needs to have\n\n97\n00:04:49.243 --> 00:04:52.981\ntext inserted before it,\nnot every line, right?\n\n98\n00:04:52.981 --> 00:04:55.742\nSo that's probably what\nwe're working with.\n\n99\n00:04:55.742 --> 00:05:01.740\nIf I give it a line number,\nthat will help with that, okay?\n\n100\n00:05:01.740 --> 00:05:03.556\nSo If I said, sed.\n\n101\n00:05:03.556 --> 00:05:05.645\nIf I said sed, right?\n\n102\n00:05:05.645 --> 00:05:08.731\n[LAUGH] And then I get my single quote.\n\n103\n00:05:08.731 --> 00:05:11.963\nAnd I say let's go with line one.\n\n104\n00:05:11.963 --> 00:05:20.458\nAnd let me call this Classic Children.\n\n105\n00:05:20.458 --> 00:05:22.703\n[INAUDIBLE] I can't use that.\n\n106\n00:05:22.703 --> 00:05:26.454\nClassic Children Story, like so.\n\n107\n00:05:26.454 --> 00:05:29.096\nI close my sed and in ttls.\n\n108\n00:05:29.096 --> 00:05:34.901\nTtls.txt, here we go.\n\n109\n00:05:34.901 --> 00:05:36.623\nI hit the Space before I was done.\n\n110\n00:05:36.623 --> 00:05:39.258\nGotta love that, let me Ctrl C,\nwe're trying that one more time,\n\n111\n00:05:39.258 --> 00:05:40.022\nladies and gents.\n\n112\n00:05:40.022 --> 00:05:45.487\nI can do it, I swear, ttls,\nthat will close that out, here we go.\n\n113\n00:05:45.487 --> 00:05:48.251\nttls not a bang.\n\n114\n00:05:48.251 --> 00:05:51.165\nAnd now, I forgot my insert character,\n\n115\n00:05:51.165 --> 00:05:56.409\ncan't forget those insert characters,\nit will do it to you every time.\n\n116\n00:05:56.409 --> 00:06:00.040\nI was focused on what line I\nwas gonna thrown in there.\n\n117\n00:06:00.040 --> 00:06:01.491\nTotally forgot the answer.\n\n118\n00:06:01.491 --> 00:06:02.780\nLet's try that, here we go.\n\n119\n00:06:02.780 --> 00:06:06.733\nAnd now I got this line and force kinda\nlike giving it a title or something, okay?\n\n120\n00:06:06.733 --> 00:06:08.453\nThat's great, fantastic.\n\n121\n00:06:08.453 --> 00:06:11.436\nIf I wanted to be online\nfuller I could that.\n\n122\n00:06:11.436 --> 00:06:16.999\nI could sed, let's say 4i \\,\n\n123\n00:06:16.999 --> 00:06:22.982\nlet's say this is inserted text.\n\n124\n00:06:22.982 --> 00:06:26.731\nSo close it off ttls, fire.\n\n125\n00:06:26.731 --> 00:06:34.292\nAnd now, let's see,\nabove line four is this is inserted text.\n\n126\n00:06:34.292 --> 00:06:39.108\nSo, we can actually get the same\ntime output as well with append but\n\n127\n00:06:39.108 --> 00:06:41.091\nwe'll get to that, okay?\n\n128\n00:06:41.091 --> 00:06:43.158\nSo what else can we do?\n\n129\n00:06:43.158 --> 00:06:47.437\nLet's see here,\ninserting multiple lines of text?\n\n130\n00:06:47.437 --> 00:06:49.021\nWe can do that, that'll be fun.\n\n131\n00:06:49.021 --> 00:06:54.221\nAnd typically again, we'd like to drop\nto that secondary prompt where this\n\n132\n00:06:54.221 --> 00:06:59.596\nkind of thing kind of keep things a little\neasier to digest, so let's do that.\n\n133\n00:06:59.596 --> 00:07:03.340\nSo I'll sed, I'll say 4i and\n\n134\n00:07:03.340 --> 00:07:07.812\nthen crank it off and then hit Enter.\n\n135\n00:07:07.812 --> 00:07:15.073\nAnd say this is the first insert, like so.\n\n136\n00:07:15.073 --> 00:07:20.028\nAnd then this is the second insert,\nlike that.\n\n137\n00:07:20.028 --> 00:07:23.565\nAnd then when you're all done,\n\n138\n00:07:23.565 --> 00:07:28.936\njust close it out,\nclose it out with ttls.txt.\n\n139\n00:07:28.936 --> 00:07:33.643\nAnd there we go, still can't find\nmy little jump to, let's see,\n\n140\n00:07:33.643 --> 00:07:34.996\nwhat did I forget?\n\n141\n00:07:34.996 --> 00:07:38.134\nI am forgetting my backslash.\n\n142\n00:07:38.134 --> 00:07:40.240\nThat's right, my good old backslash.\n\n143\n00:07:40.240 --> 00:07:42.617\nTry it one more time.\n\n144\n00:07:42.617 --> 00:07:46.521\nBack it up, back it up,\nright there, I needed a backslash.\n\n145\n00:07:46.521 --> 00:07:50.041\nSo if I want to do multiple strings you\nhave to throw that other backslash in to\n\n146\n00:07:50.041 --> 00:07:50.646\nlet it know.\n\n147\n00:07:50.646 --> 00:07:55.819\nAll right, so that should be\na little better to work with.\n\n148\n00:07:55.819 --> 00:07:56.519\nAnd here we go, try that.\n\n149\n00:07:56.519 --> 00:07:57.836\nHere we go.\n\n150\n00:07:57.836 --> 00:08:00.795\nAnd now we've got First and\nsecond answers.\n\n151\n00:08:00.795 --> 00:08:03.103\nSo it can get obviously,\nit's a bit convoluted.\n\n152\n00:08:03.103 --> 00:08:05.140\nIt's a little strange to work with,\n\n153\n00:08:05.140 --> 00:08:08.370\nwhich is typically why I like\nto do that line by line thing.\n\n154\n00:08:08.370 --> 00:08:09.860\nDon't forget your backslashes, though.\n\n155\n00:08:09.860 --> 00:08:13.349\nDon't forget your insert character,\nthat will stop it from working.\n\n156\n00:08:13.349 --> 00:08:15.826\n[LAUGH] So\nthat's little caveats that will happen.\n\n157\n00:08:15.826 --> 00:08:19.634\nBut the good thing is if you run it and it\ndoesn't work, just jump back and look and\n\n158\n00:08:19.634 --> 00:08:21.381\ngo, what did I forget in my command?\n\n159\n00:08:21.381 --> 00:08:23.000\nAnd why is this not happening?\n\n160\n00:08:24.090 --> 00:08:26.030\nAnd see where you went wrong.\n\n161\n00:08:26.030 --> 00:08:28.980\nTypically, it's something\nlike you forgot a character.\n\n162\n00:08:28.980 --> 00:08:30.727\nAll right, what else can we do?\n\n163\n00:08:30.727 --> 00:08:33.190\nLet's do the append,\nlet's jump to the append.\n\n164\n00:08:33.190 --> 00:08:35.806\nSo now I want to go after line 4.\n\n165\n00:08:35.806 --> 00:08:38.070\nI want to append something after line 4.\n\n166\n00:08:38.070 --> 00:08:43.710\nSame kind of syntax sed open tick,\nbut this time it's an a for append.\n\n167\n00:08:43.710 --> 00:08:45.650\nSo we have i for insert, a for append.\n\n168\n00:08:45.650 --> 00:08:50.630\nAnd then the rest of the verbiage is\nactually going to be spot on, right?\n\n169\n00:08:50.630 --> 00:08:53.362\nSo if you've learned i,\nsubstitute i with a and\n\n170\n00:08:53.362 --> 00:08:55.558\nyou know the rest of the story, okay?\n\n171\n00:08:55.558 --> 00:09:00.900\nSo we'll say a,\nwe'll start with a big broad brush,\n\n172\n00:09:00.900 --> 00:09:04.884\nand we'll say this is inserted text.\n\n173\n00:09:04.884 --> 00:09:06.158\nI'm sorry, this is appended text.\n\n174\n00:09:06.158 --> 00:09:09.105\nI waited so long, and\nnow I'm finally getting to do it,\n\n175\n00:09:09.105 --> 00:09:11.510\nI don't know what to do with myself.\n\n176\n00:09:11.510 --> 00:09:16.150\nAppended text paired off ttls.\n\n177\n00:09:16.150 --> 00:09:21.600\nAnd now you'll see that after each line\nyou get this is appended text after two,\n\n178\n00:09:21.600 --> 00:09:22.990\nthis is appended text after three.\n\n179\n00:09:22.990 --> 00:09:26.990\nAnd when I say you get the same kind\nof output that we got in insert,\n\n180\n00:09:28.040 --> 00:09:29.710\nwhen it comes to this.\n\n181\n00:09:29.710 --> 00:09:33.180\nI inserted text above line 4, but\n\n182\n00:09:33.180 --> 00:09:39.160\nI can also append text below line 3, and\nyou'll effectively get the same thing.\n\n183\n00:09:39.160 --> 00:09:44.171\nSo, six of one, half a dozen of the other\nin some cases, but other cases no, okay.\n\n184\n00:09:44.171 --> 00:09:44.747\nSo just keep that in mind.\n\n185\n00:09:44.747 --> 00:09:47.103\nWhat else do we want to do with this?\n\n186\n00:09:47.103 --> 00:09:52.833\nWe'll run up some other things we did,\n\n187\n00:09:52.833 --> 00:09:59.796\nsed 'a Alt A,\nsay 4a\\this is appended text.\n\n188\n00:09:59.796 --> 00:10:02.925\nLike that, write off ttls and\n\n189\n00:10:02.925 --> 00:10:08.558\nyou'll see that now the text\ncomes after line four and\n\n190\n00:10:08.558 --> 00:10:12.827\nonly line four, not every single line.\n\n191\n00:10:12.827 --> 00:10:17.647\nAnd of course,\nwe can do the other as well.\n\n192\n00:10:17.647 --> 00:10:22.082\nWe have multiple lines, sed 'a\\, and\n\n193\n00:10:22.082 --> 00:10:26.918\nI'll pick a line here, we'll go 4 again.\n\n194\n00:10:26.918 --> 00:10:31.778\nAnd we'll say, this is first append,\n\n195\n00:10:31.778 --> 00:10:36.690\nback slash this time if we get this.\n\n196\n00:10:36.690 --> 00:10:40.700\nAnd this is second append.\n\n197\n00:10:42.450 --> 00:10:46.250\nFinish it off ttls.txt and there you go.\n\n198\n00:10:46.250 --> 00:10:50.620\nNow these multiple lines of\nappending are coming after line 4.\n\n199\n00:10:50.620 --> 00:10:55.310\nSo like I said, same stuff that happened\nwith the i, just change an i out for an a.\n\n200\n00:10:55.310 --> 00:11:00.190\nAnd you should be off to the races with\neither inserting or appending text.\n\n201\n00:11:00.190 --> 00:11:04.630\n&gt;&gt; Now, Daniel, this is using,\ncorrect me if I'm wrong, so\n\n202\n00:11:04.630 --> 00:11:06.710\nthat 4 that's addressing\nusing line number 4.\n\n203\n00:11:06.710 --> 00:11:11.070\nCan we use string addressing\nas well in with appending and\n\n204\n00:11:11.070 --> 00:11:14.100\ninserting text, like can I look for\nlike the word how?\n\n205\n00:11:14.100 --> 00:11:16.680\nAnd then it append the next\ntwo things after that line?\n\n206\n00:11:16.680 --> 00:11:17.890\n&gt;&gt; What do you think?\n\n207\n00:11:17.890 --> 00:11:18.680\nI love to do this to him.\n\n208\n00:11:18.680 --> 00:11:19.550\nWhat do you think?\n\n209\n00:11:19.550 --> 00:11:22.360\n&gt;&gt; I'm gonna say I'm\npretty sure that'll work.\n\n210\n00:11:22.360 --> 00:11:23.100\n&gt;&gt; I would think it would.\n\n211\n00:11:23.100 --> 00:11:26.454\n&gt;&gt; But you never know, there are some\ncurve balls, and you're like.\n\n212\n00:11:26.454 --> 00:11:29.320\n&gt;&gt; There are.\n&gt;&gt; There it is, I struck out.\n\n213\n00:11:29.320 --> 00:11:30.717\n&gt;&gt; Yeah, so.\n\n214\n00:11:30.717 --> 00:11:33.090\n&gt;&gt; Yeah, and that's a good question.\n\n215\n00:11:33.090 --> 00:11:36.064\nOff the top of my head, I don't know, but\nthere's a great way for us to find out.\n\n216\n00:11:36.064 --> 00:11:38.496\nLet's see if we can actually\nwork with that, let's try it.\n\n217\n00:11:38.496 --> 00:11:42.045\nI'll go up to this right here.\n\n218\n00:11:42.045 --> 00:11:45.036\nAnd so we've got append, but\n\n219\n00:11:45.036 --> 00:11:51.021\nwe're gonna use the word diamond,\ncuz that's line four.\n\n220\n00:11:51.021 --> 00:11:52.610\nAll right, so let's see if that works.\n\n221\n00:11:54.040 --> 00:11:55.280\nLook at that.\n\n222\n00:11:55.280 --> 00:11:58.120\nThe heavens have opened,\nand angels descend, right?\n\n223\n00:11:58.120 --> 00:12:00.548\nI assumed that this would\nhave been the case as well.\n\n224\n00:12:00.548 --> 00:12:03.280\nI couldn't remember off the top\nof my head that it'll work.\n\n225\n00:12:03.280 --> 00:12:04.530\nBut there, you go.\n\n226\n00:12:04.530 --> 00:12:08.890\nTypically all this functionality that\nwe've seen so far, for the most part,\n\n227\n00:12:08.890 --> 00:12:11.995\nfrom what I've worked and\nsaid, and what I've seen and\n\n228\n00:12:11.995 --> 00:12:14.661\nsaid, it doesn't usually\nstomp on anything.\n\n229\n00:12:14.661 --> 00:12:17.834\nYou know what I mean?\nIf there is a specific type of function\n\n230\n00:12:17.834 --> 00:12:21.720\nthat works in sed,\nit works on most cases, if not all.\n\n231\n00:12:21.720 --> 00:12:25.374\n&gt;&gt; And actually this is what I'm starting\nto enjoy about this is I'm learning these\n\n232\n00:12:25.374 --> 00:12:28.877\nkind of compositional pieces where I go,\nall right, so I know how to do this.\n\n233\n00:12:28.877 --> 00:12:30.550\nI know how to do this.\n\n234\n00:12:30.550 --> 00:12:32.840\nAnd usually smash those together and\n\n235\n00:12:32.840 --> 00:12:36.918\nget the composite results, so to speak\n&gt;&gt; It's very modular in that way where all\n\n236\n00:12:36.918 --> 00:12:40.250\nthese little tips and tips and\ntricks that we're working with sed,\n\n237\n00:12:40.250 --> 00:12:43.123\nyou can kinda like slap them and\nbolt them on to each other.\n\n238\n00:12:43.123 --> 00:12:46.220\nI'm working to getting,\nnow I get what I want.\n\n239\n00:12:46.220 --> 00:12:49.841\nAnd like Justin, I'm a big fan of that,\njust saying, this does this.\n\n240\n00:12:49.841 --> 00:12:51.701\nIf I want that functionality at all,\n\n241\n00:12:51.701 --> 00:12:56.026\nI just add that component along with this\ncomponent, and along with that component.\n\n242\n00:12:56.026 --> 00:13:00.010\nAnd string them all together, and\nthen you get the desired output.\n\n243\n00:13:00.010 --> 00:13:02.990\nSo hopefully,\nyou guys are seeing that pattern as well.\n\n244\n00:13:02.990 --> 00:13:06.220\nA lot of consistency inside\nof how sed is working.\n\n245\n00:13:06.220 --> 00:13:09.471\n&gt;&gt; So we've been able to append,\nwhich is insert below and insert,\n\n246\n00:13:09.471 --> 00:13:10.661\nwhich is insert above.\n\n247\n00:13:10.661 --> 00:13:14.237\nBut what if I actually wanted\nto pull play the [INAUDIBLE]?\n\n248\n00:13:14.237 --> 00:13:17.123\nWhat if I wanted to say,\nI wanna take this sample, but\n\n249\n00:13:17.123 --> 00:13:20.284\nI wanna put something in its\nplace instead of just delete.\n\n250\n00:13:20.284 --> 00:13:21.437\nIs that possible to say?\n\n251\n00:13:21.437 --> 00:13:26.297\n&gt;&gt; Yeah, it's totally possible,\nand we can use the y character,\n\n252\n00:13:26.297 --> 00:13:29.180\nso not the VH like, why do we do this?\n\n253\n00:13:29.180 --> 00:13:30.340\nPut the letter y, right?\n\n254\n00:13:30.340 --> 00:13:32.281\nThat's what's gonna be able to do that.\n\n255\n00:13:32.281 --> 00:13:33.369\nI think y probably stands for yank.\n\n256\n00:13:33.369 --> 00:13:37.990\nTypically, when you see y,\nit's for a yanking feature.\n\n257\n00:13:37.990 --> 00:13:39.736\nWe're yanking this out.\n\n258\n00:13:39.736 --> 00:13:42.284\nWe're gonna shoehorn this in, okay?\n\n259\n00:13:42.284 --> 00:13:46.649\nAnd that is the concept of what is going\nto be happening here as we use that y\n\n260\n00:13:46.649 --> 00:13:51.030\nspecial character to make these things or\nwe're switching things out.\n\n261\n00:13:51.030 --> 00:13:54.170\nWe're yanking and\nsubstituting with something else, okay?\n\n262\n00:13:54.170 --> 00:13:56.427\nSo let's see how we can do that.\n\n263\n00:13:56.427 --> 00:13:57.326\nLet's see here.\n\n264\n00:13:57.326 --> 00:14:00.820\nI think they call it changing, right?\n\n265\n00:14:00.820 --> 00:14:04.638\nI was thinking of transforming\ncharacters with Y.\n\n266\n00:14:04.638 --> 00:14:08.940\nChanging is what we're\ngoing to be doing here.\n\n267\n00:14:08.940 --> 00:14:10.231\nGetting ahead of myself.\n\n268\n00:14:10.231 --> 00:14:15.029\nWe will do a transforming where\nwe're going [SOUND], like that, but\n\n269\n00:14:15.029 --> 00:14:17.840\nlet's get to changing first, okay?\n\n270\n00:14:17.840 --> 00:14:20.730\nLet's start with changing.\nLet's take a look at it, see how it works,\n\n271\n00:14:20.730 --> 00:14:22.450\nand what's going on there.\n\n272\n00:14:22.450 --> 00:14:24.275\nSo I say sed '4.\n\n273\n00:14:24.275 --> 00:14:31.328\nGo back to Google line 4,\ncuz we love line 4c for a change, right?\n\n274\n00:14:31.328 --> 00:14:35.961\nAnd then backslash this is,\n\n275\n00:14:35.961 --> 00:14:42.336\nI'll say this line has been censored.\n\n276\n00:14:42.336 --> 00:14:46.870\nSo tick mark in there.\n\n277\n00:14:46.870 --> 00:14:52.360\nHit the ttls.txt and now, instead of\nseeing like a diamond in the sky.\n\n278\n00:14:52.360 --> 00:14:53.709\nWe should see this line has been censored.\n\n279\n00:14:55.697 --> 00:14:58.160\nAnd there you go,\nthis line has been censored.\n\n280\n00:14:59.200 --> 00:15:04.077\nSo it's changing the entire line for\n\n281\n00:15:04.077 --> 00:15:08.330\nthis alternative text, okay?\n\n282\n00:15:08.330 --> 00:15:11.987\nIt's slurping that whole line in,\nlooking at it,\n\n283\n00:15:11.987 --> 00:15:17.360\ngoing that's real nice and all, but\nhere's what we really want for that.\n\n284\n00:15:17.360 --> 00:15:20.866\nSo referencing using line numbers, we'll\nreference it using strings if we want to.\n\n285\n00:15:20.866 --> 00:15:23.106\nI could put diamond in there and\nget line 4 as well.\n\n286\n00:15:23.106 --> 00:15:26.082\nCuz it's a unique string\nthroughout the poem.\n\n287\n00:15:26.082 --> 00:15:29.216\nAnd that would reference that.\n\n288\n00:15:29.216 --> 00:15:31.337\nSo just keep that in mind.\n\n289\n00:15:31.337 --> 00:15:35.634\nIf you wanna change from one to the other,\nuse the c.\n\n290\n00:15:35.634 --> 00:15:40.516\nAnd when I want to jump into\nyanking alternative is I'm gonna\n\n291\n00:15:40.516 --> 00:15:45.270\nbasically substitute,\nis that a good way of putting it?\n\n292\n00:15:45.270 --> 00:15:47.350\nTransform would be a better way.\n\n293\n00:15:47.350 --> 00:15:54.442\nI'm gonna transform this set of\ncharacters for this set of characters.\n\n294\n00:15:54.442 --> 00:15:56.408\n&gt;&gt; Okay, that's what y does.\n\n295\n00:15:56.408 --> 00:15:58.364\nSo we're gonna yank these characters out.\n\n296\n00:15:58.364 --> 00:16:01.714\nAnytime you see these characters,\nI wanna put these in.\n\n297\n00:16:01.714 --> 00:16:07.145\nSubstitution is very similar to that,\n\n298\n00:16:07.145 --> 00:16:10.607\nbut with this I get a set.\n\n299\n00:16:10.607 --> 00:16:15.471\nSo I'm gonna say ABC, anytime you\n\n300\n00:16:15.471 --> 00:16:20.502\nsee ABC I'm gonna replace A with X,\n\n301\n00:16:20.502 --> 00:16:24.580\nB with Y, and C with Z.\n\n302\n00:16:24.580 --> 00:16:25.420\nSo it's a one for\n\n303\n00:16:25.420 --> 00:16:30.290\none transformation which is why I like\nthe transform word a whole lot better.\n\n304\n00:16:30.290 --> 00:16:34.906\nI'm gonna transform these sets and\nthe placeholder in which they're in,\n\n305\n00:16:34.906 --> 00:16:40.040\nare they the position that\nthey're in is going to affect\n\n306\n00:16:40.040 --> 00:16:42.690\nwhat gets transformed to what, okay?\n\n307\n00:16:42.690 --> 00:16:47.174\nAnd that's where we use that Y, so we're\ngonna yank that or we're gonna transform\n\n308\n00:16:47.174 --> 00:16:50.850\nit with this, put that in there and\nmove on to the next thing, okay?\n\n309\n00:16:50.850 --> 00:16:54.528\nI have a different file that we're\ngonna use to demonstrate this,\n\n310\n00:16:54.528 --> 00:16:56.260\ncuz it's gonna it a little easier for\n\n311\n00:16:56.260 --> 00:17:00.990\nus to understand what's happening,\nI called it SED Transform.\n\n312\n00:17:00.990 --> 00:17:07.415\nSo if we cat that, Cat sed_transform.text,\n\n313\n00:17:07.415 --> 00:17:13.570\nit's just five lines of a, b, c, d,\nand e separated by spaces, okay?\n\n314\n00:17:13.570 --> 00:17:16.940\nThis should make it easier for\nus to see what is happening.\n\n315\n00:17:16.940 --> 00:17:21.780\nSo if I wanna transform a,\nb, and c into respectively,\n\n316\n00:17:21.780 --> 00:17:24.170\nx, y, and z, this is how we do it.\n\n317\n00:17:24.170 --> 00:17:28.966\nSo we say, sed open tick, you say y/abc,\n\n318\n00:17:28.966 --> 00:17:34.680\nnotice we've moved away\nfrom the backslash.\n\n319\n00:17:34.680 --> 00:17:39.870\nWe're not inserting, appending, or\nchanging things as far as lines go\n\n320\n00:17:39.870 --> 00:17:45.372\nback into working with x\nspecifically inside of a line.\n\n321\n00:17:45.372 --> 00:17:48.600\nI'm gonna take a, b, and\nc and go x, y, and z, okay,\n\n322\n00:17:48.600 --> 00:17:53.140\nthen you close it off like so,\ngive you a little ticky-tick.\n\n323\n00:17:53.140 --> 00:17:58.730\nAnd if we hit the line which is\nsed_transform.txt, there's my file,\n\n324\n00:17:58.730 --> 00:18:03.580\nthere's my format, the basics anyway\nof working with this transformation.\n\n325\n00:18:04.920 --> 00:18:08.813\nWhat's going on here sed y calls\nin the transform function or\n\n326\n00:18:08.813 --> 00:18:12.721\nthe transform ability of sed,\nand then you say a, b, and c.\n\n327\n00:18:12.721 --> 00:18:17.505\nSo I want a to be x,\ni want b to become y, and c to become z.\n\n328\n00:18:17.505 --> 00:18:24.190\nAnd like I said the position of these\nitems determines what gets transformed.\n\n329\n00:18:24.190 --> 00:18:28.912\nHere it's very simple we run this, you'll\nnotice a, b, and c has become x, y, and z.\n\n330\n00:18:28.912 --> 00:18:35.447\nd, e has not been touched,\nokay, if we change this,\n\n331\n00:18:35.447 --> 00:18:40.113\nwe go in here and we say zyx, /zyx/.\n\n332\n00:18:40.113 --> 00:18:44.960\nWe're not saying a, b, c is still x, y,\nand z and we just kind of jumble it up.\n\n333\n00:18:44.960 --> 00:18:50.923\nWe're saying a is now z, b is now y,\nc is now x, okay, fire that,\n\n334\n00:18:50.923 --> 00:18:56.560\nz, y, x, d, e and\nany combination of the three of them.\n\n335\n00:18:56.560 --> 00:19:01.524\nSo if I said y, x,\nz there's in there, y, x, z, okay,\n\n336\n00:19:01.524 --> 00:19:06.320\nand again other side of the fence,\nsame kind of thing.\n\n337\n00:19:06.320 --> 00:19:10.790\nSo who's ever lined up with whoever as\nlong as they're in the same position,\n\n338\n00:19:10.790 --> 00:19:14.760\nyou should get that specific\ntype of transformation.\n\n339\n00:19:14.760 --> 00:19:17.600\nJust keep that in mind when\nworking with transformers,\n\n340\n00:19:17.600 --> 00:19:19.190\nreal quick questions\nabout these trans words.\n\n341\n00:19:19.190 --> 00:19:23.125\nLet's say I have a, b, c, d but I leave\nit x, y, z, I don't have a one to one\n\n342\n00:19:23.125 --> 00:19:27.182\ncorrespondence from the first character\nset to the other character set.\n\n343\n00:19:27.182 --> 00:19:31.150\nDoes sed just error out or\ndoes it apply to the shortest length?\n\n344\n00:19:31.150 --> 00:19:33.091\nWhat I mean is,\ndoes it kinda zip them together?\n\n345\n00:19:33.091 --> 00:19:36.110\nAnd then if there is one without\na pair it just ignores it.\n\n346\n00:19:37.180 --> 00:19:38.020\nSo I've got a,\n\n347\n00:19:38.020 --> 00:19:42.235\nb, c and you said d, so we added d on to\nthat but we only still have x, y, and z.\n\n348\n00:19:42.235 --> 00:19:45.896\nIf there's no pair then I'd\nassume that nothing happens,\n\n349\n00:19:45.896 --> 00:19:51.260\nthere's nothing to to transform,\nyou haven't defined any transformation.\n\n350\n00:19:51.260 --> 00:19:55.210\nIt'll either do that or it'll transform\ninto nothing, let's see what it does,\n\n351\n00:19:55.210 --> 00:19:58.420\nthat was a good question,\nlet's find out, let's add d to that.\n\n352\n00:19:59.540 --> 00:20:05.198\nI'll make this a little more readable,\nx, y, z, there we go, see?\n\n353\n00:20:05.198 --> 00:20:10.070\nSo it errors out, that's good to know,\nthat it's gonna just instead of\n\n354\n00:20:10.070 --> 00:20:13.830\ntrying to assume it knew\nwhat you want it to do,\n\n355\n00:20:13.830 --> 00:20:17.200\nit's gonna say hold this this\nisn't really the way I work.\n\n356\n00:20:18.500 --> 00:20:21.682\nAnd here's an error for that,\ngo take a look at what's going on.\n\n357\n00:20:21.682 --> 00:20:24.200\nIt said an expression one\ncharacter strings for\n\n358\n00:20:24.200 --> 00:20:26.140\nY command are different lengths.\n\n359\n00:20:26.140 --> 00:20:29.670\nSo you have to a 1 to 1\ntransformation correlation.\n\n360\n00:20:29.670 --> 00:20:30.658\n&gt;&gt; Actually, I would prefer this.\n\n361\n00:20:30.658 --> 00:20:33.232\n&gt;&gt; Yeah.\n&gt;&gt; So I didn't accidentally do,\n\n362\n00:20:33.232 --> 00:20:36.762\nI mistyped and\nnow replaced all the Ds with nothing and\n\n363\n00:20:36.762 --> 00:20:40.570\nI just messed up a whole bunch of stuff,\nwhoops, my bad.\n\n364\n00:20:40.570 --> 00:20:45.435\n&gt;&gt; I do enjoy programs that don't\nassume it knows what I mean and\n\n365\n00:20:45.435 --> 00:20:48.474\noff-hand, that typically is like,\nyou know what I mean.\n\n366\n00:20:48.474 --> 00:20:50.353\nYeah, just do the thing,\n\n367\n00:20:50.353 --> 00:20:54.385\nbut in practicality when you're working\nwith this, if it assumes the wrong thing,\n\n368\n00:20:54.385 --> 00:20:57.000\nyou're gonna hate that thing for\nthe rest of your life.\n\n369\n00:20:57.000 --> 00:21:00.720\nAnd the whole time you're\nstanding in the employment line.\n\n370\n00:21:00.720 --> 00:21:01.420\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n371\n00:21:01.420 --> 00:21:02.480\n&gt;&gt; Because you\n\n372\n00:21:02.480 --> 00:21:06.700\ntotally jacked the configuration file or\nsomething, you're gonna think about that.\n\n373\n00:21:06.700 --> 00:21:10.828\nSo it's a good thing that it does\nactually working this way that is,\n\n374\n00:21:10.828 --> 00:21:14.560\nhere's an error, that's not how I work,\ntry again, okay.\n\n375\n00:21:14.560 --> 00:21:16.130\nWhat else do we want to do,\n\n376\n00:21:16.130 --> 00:21:19.950\nI do want to say that the transform\nworks on all iterations on that line.\n\n377\n00:21:19.950 --> 00:21:25.079\nSo anytime it finds an a it's gonna\ntransform it with x, right, not just one,\n\n378\n00:21:25.079 --> 00:21:30.920\nif this is an a, b, c, d, e, a, b, c,\nd, e, a, b, c, d, e, it would all be.\n\n379\n00:21:30.920 --> 00:21:34.831\nx, y,z, d, e, x, y, z, d, e, x,\ny, z, d, e, right, on one line,\n\n380\n00:21:34.831 --> 00:21:39.469\nthen move to the next line if it says a,\nb, c, d, e, a, b, c, d, e, a, b, c, d, e.\n\n381\n00:21:39.469 --> 00:21:43.363\nIt will again x, y, z, d, e, x, y,\nz, d, e, an so on and so forth,\n\n382\n00:21:43.363 --> 00:21:46.546\njust keep that in mind as you\nwork with transformations.\n\n383\n00:21:46.546 --> 00:21:51.056\nIt might come in handy, moving on to,\n\n384\n00:21:51.056 --> 00:21:54.780\nlet's talk about printing, we already did\nkinda look at printing just a little bit,\n\n385\n00:21:54.780 --> 00:21:58.970\nso I want to revisit it just a bit\nto expound on it a bit more.\n\n386\n00:21:58.970 --> 00:22:04.066\nLet's talk about print using string\naddresses, so what we're gonna do\n\n387\n00:22:04.066 --> 00:22:09.328\nis we want to, remember back in,\nI think the first episode, I talked about\n\n388\n00:22:09.328 --> 00:22:14.280\na lot times we work with SED and\nwe say I don't want to output anything.\n\n389\n00:22:14.280 --> 00:22:19.740\nAnd I was so, well done, well that's\nwhere that printing function comes in,\n\n390\n00:22:19.740 --> 00:22:23.016\nI don't wanna output\nanything except the signs,\n\n391\n00:22:23.016 --> 00:22:28.398\nwe're kind of making exceptions in the\nprinted output screen using the printer,\n\n392\n00:22:28.398 --> 00:22:34.030\nlet's revisit that really quickly, let's\ntake a look here, we use the TTLS again.\n\n393\n00:22:34.030 --> 00:22:40.021\nI'll say, sed-n,\ncuz remember -n says don't print anything,\n\n394\n00:22:40.021 --> 00:22:43.390\nbut we're still slipping stuff in.\n\n395\n00:22:43.390 --> 00:22:48.240\nSo we'll say, \"/diamond/p like so, and\n\n396\n00:22:48.240 --> 00:22:55.240\nthen I want to print that line,\nhit that, ttls and I only get line four.\n\n397\n00:22:55.240 --> 00:22:56.980\nSo hopefully like, right out of the gate,\n\n398\n00:22:56.980 --> 00:23:01.740\nyou should see some maybe practical\nfunctionality out of that.\n\n399\n00:23:01.740 --> 00:23:05.130\nI only want to print a specific line,\nout of that text,\n\n400\n00:23:05.130 --> 00:23:10.240\nI don't need all of the rest of it, I just\nwanted to look and work with that, okay.\n\n401\n00:23:10.240 --> 00:23:14.178\nLet's move on a little bit,\nif I wanted to use a range of numbers,\n\n402\n00:23:14.178 --> 00:23:15.550\ncould do that as well.\n\n403\n00:23:15.550 --> 00:23:20.532\nBring that back up like you're done,\nlike it's a three\n\n404\n00:23:20.532 --> 00:23:25.730\ncomma four with those guys,\na sum of freaking it out here.\n\n405\n00:23:28.160 --> 00:23:31.109\nThat should be okay,\nI would think three comma four,\n\n406\n00:23:31.109 --> 00:23:34.970\nI'm missing a character I'm sure,\nthis should be backslash.\n\n407\n00:23:34.970 --> 00:23:38.607\nI don't need the backslash, there we go,\noff we go, okay, leaving it,\n\n408\n00:23:38.607 --> 00:23:42.427\nthese character combinations can get\na little tricky ladies and gentlemen,\n\n409\n00:23:42.427 --> 00:23:46.595\nI'm not going to lie, I'm not going to sit\nhere and blow sunshine up your skirt, and\n\n410\n00:23:46.595 --> 00:23:50.527\ntell you, the world is rainbows and\nunicorns, and a lot of times you're like,\n\n411\n00:23:50.527 --> 00:23:52.125\nwhy isn't this working?\n\n412\n00:23:52.125 --> 00:23:56.615\nI got the wrong character in there, this\nis just common things, a lot of times,\n\n413\n00:23:56.615 --> 00:24:00.501\nthings that I tend to do on a regular\nbasis, I keep them in a text file,\n\n414\n00:24:00.501 --> 00:24:04.923\nso I can just copy and paste those things\nin there Because typing it out is a bit,\n\n415\n00:24:04.923 --> 00:24:08.760\nwe're working in a command line here and\nit can get repetitive.\n\n416\n00:24:08.760 --> 00:24:11.740\nWe're humans, we err,\nso keeping these things\n\n417\n00:24:11.740 --> 00:24:14.808\noff in a file that we can just copy and\npaste them can become very helpful.\n\n418\n00:24:14.808 --> 00:24:16.360\nSo I do recommend doing that for\n\n419\n00:24:16.360 --> 00:24:19.717\nanything that you do on a repetitive\nbasis that you have to type in.\n\n420\n00:24:19.717 --> 00:24:24.680\nAnd you see that and this is real world,\nI miss typed and it happened.\n\n421\n00:24:24.680 --> 00:24:27.410\nWhat else do we wanna do?\n\n422\n00:24:28.680 --> 00:24:30.360\nWe did look at that, printing that.\n\n423\n00:24:30.360 --> 00:24:34.110\nWhat if we wanted to\nprint the line numbers?\n\n424\n00:24:34.110 --> 00:24:37.740\nI put the line numbers in there\ncuz we hadn't gotten this far yet.\n\n425\n00:24:37.740 --> 00:24:40.160\nI didn't wanna kinda put\nthe cart before the horse.\n\n426\n00:24:40.160 --> 00:24:42.650\nWhat if I wanted to print\nthose line numbers out?\n\n427\n00:24:42.650 --> 00:24:44.490\nI could do that using the = sign.\n\n428\n00:24:45.910 --> 00:24:51.236\nSo if you do this, if you say, I actually\nhave another file here cat longfile.txt.\n\n429\n00:24:51.236 --> 00:24:55.454\nThis basically I grab some\ntext out of my off.log, okay?\n\n430\n00:24:55.454 --> 00:25:00.279\nBut if I'm working with this text and\nI wanna get specific lines,\n\n431\n00:25:00.279 --> 00:25:03.150\nI can go in there, I could grab them.\n\n432\n00:25:03.150 --> 00:25:07.470\nWhat if I wanted to reference\nthem by their line number, right?\n\n433\n00:25:07.470 --> 00:25:09.870\nDon't know about you but\nI don't see any line numbers there.\n\n434\n00:25:09.870 --> 00:25:10.985\nSo we'll add them.\n\n435\n00:25:10.985 --> 00:25:16.810\nSo we can do that by saying sed,\ngoing like that and just add the = sign,\n\n436\n00:25:18.320 --> 00:25:23.210\ntop it off and then just whatever this is,\nso this is longfile.txt.\n\n437\n00:25:23.210 --> 00:25:27.370\nAnd now you'll notice,\nget a bit of overscroll or whatever, but\n\n438\n00:25:27.370 --> 00:25:32.207\nbefore each line it tells me the line\nnumber, not in front of it in the line but\n\n439\n00:25:32.207 --> 00:25:35.730\njust kind of inserts it\nabove each line that it is.\n\n440\n00:25:35.730 --> 00:25:38.721\nAnd you can see they're here\nwith the last line, it's 30 and\n\n441\n00:25:38.721 --> 00:25:40.310\nthe it gives me line number 30.\n\n442\n00:25:40.310 --> 00:25:44.180\nSo now I have something I\ncan start to work with.\n\n443\n00:25:44.180 --> 00:25:46.110\nI can reference that stuff.\n\n444\n00:25:46.110 --> 00:25:48.050\nSo let's see how that works.\n\n445\n00:25:48.050 --> 00:25:53.510\nClear, I can say sed -n and say,\n\n446\n00:25:53.510 --> 00:25:57.990\nwe'll go with /unlocked.\n\n447\n00:25:57.990 --> 00:25:59.680\nI wanna look for the string unlocked.\n\n448\n00:26:01.230 --> 00:26:05.350\nAnd I wanna know what lines\nhave the word unlocked on.\n\n449\n00:26:05.350 --> 00:26:08.410\nI wanna know what their numbers,\nI don't know it off top of my head.\n\n450\n00:26:08.410 --> 00:26:11.310\nI could have done that and\nlooked through it.\n\n451\n00:26:11.310 --> 00:26:12.190\nWe got computers man.\n\n452\n00:26:12.190 --> 00:26:14.200\nComputers do that job for you.\n\n453\n00:26:14.200 --> 00:26:17.660\nSo let's look for unlocked if I\ncan spell it correctly, like that.\n\n454\n00:26:19.100 --> 00:26:22.460\nAnd we will, since we're gonna kind\nof group some commands together,\n\n455\n00:26:22.460 --> 00:26:26.340\nwe're gonna need our curly braces, because\nI'm gonna be grouping in that = sign\n\n456\n00:26:26.340 --> 00:26:30.130\nto add lines,\nas well as the print flag to print.\n\n457\n00:26:31.530 --> 00:26:32.590\nSo I'm looking for a unlocked.\n\n458\n00:26:32.590 --> 00:26:34.890\nI'm going to get my curly brace open.\n\n459\n00:26:34.890 --> 00:26:36.590\nSay =, Where is my =?\n\n460\n00:26:36.590 --> 00:26:37.610\nThere it is.\n\n461\n00:26:37.610 --> 00:26:41.155\nand then separate them by a semi colon and\nthen p.\n\n462\n00:26:41.155 --> 00:26:42.910\nSo I've got equals, I've got print.\n\n463\n00:26:42.910 --> 00:26:45.080\nThese are the two commands I want to do.\n\n464\n00:26:45.080 --> 00:26:46.030\nPut those together.\n\n465\n00:26:46.030 --> 00:26:47.620\nWhat have you got?\n\n466\n00:26:47.620 --> 00:26:49.210\nThere we go.\nFire it off like that.\n\n467\n00:26:49.210 --> 00:26:51.470\nSay longfile.txt.\n\n468\n00:26:51.470 --> 00:26:53.610\nAnd now I get the lines\nthat I'm looking for\n\n469\n00:26:53.610 --> 00:26:59.530\nplus they're almost printed out because\nthese dash in don't print anything at all.\n\n470\n00:26:59.530 --> 00:27:05.010\nI want you to look for the string\nunlocked, use that as the address.\n\n471\n00:27:05.010 --> 00:27:06.710\nI want you to put line numbers in and\n\n472\n00:27:06.710 --> 00:27:11.040\nI want you to print any string you\nfind with unlocked, those addresses.\n\n473\n00:27:11.040 --> 00:27:13.200\nThat is basically what is going on here.\n\n474\n00:27:13.200 --> 00:27:16.070\nAnd that's all coming from longFile.txt.\n\n475\n00:27:16.070 --> 00:27:20.360\nSo now I get each line with\nthe word unlocked in it, and\n\n476\n00:27:20.360 --> 00:27:21.470\nthe line over that it's on.\n\n477\n00:27:21.470 --> 00:27:25.820\nNow I know what lines I should\nbe referencing in this output.\n\n478\n00:27:25.820 --> 00:27:29.470\nI could save this output to,\nI could start working with cut or awk or\n\n479\n00:27:29.470 --> 00:27:30.330\nsomething like that.\n\n480\n00:27:30.330 --> 00:27:33.600\nI could reset it again to only grab 4,\n20 and 28,\n\n481\n00:27:33.600 --> 00:27:38.550\nright, start grabbing that and\npiping that along.\n\n482\n00:27:38.550 --> 00:27:41.100\nAnd you start to see how we get expansive.\n\n483\n00:27:41.100 --> 00:27:42.160\nWe start with something small.\n\n484\n00:27:42.160 --> 00:27:46.990\nThere's a one little thing,\nbolt this on, add that little thing.\n\n485\n00:27:46.990 --> 00:27:49.260\nWell I can pipe that in, so\nI'm bolting something else on.\n\n486\n00:27:49.260 --> 00:27:51.220\nAnd it gets more complex.\n\n487\n00:27:51.220 --> 00:27:54.300\nBut if you take it down and you break it\ninto little chunks, and you understand\n\n488\n00:27:54.300 --> 00:27:57.840\nthem as their little chunks,\nit should make a whole lot more sense.\n\n489\n00:27:57.840 --> 00:28:02.420\nSo hopefully looking at this kind of\nstuff is now starting to make sense.\n\n490\n00:28:02.420 --> 00:28:03.760\nYou start seeing sed strings and\n\n491\n00:28:03.760 --> 00:28:08.030\nyou're going yeah,\nokay I see what's going on there.\n\n492\n00:28:08.030 --> 00:28:10.100\n&gt;&gt; Well Daniel, I can fully attest.\n\n493\n00:28:10.100 --> 00:28:11.615\nI actually wrote that one down.\n\n494\n00:28:11.615 --> 00:28:12.770\n&gt;&gt; [LAUGH] Did you really?\n[LAUGH]\n\n495\n00:28:12.770 --> 00:28:14.427\n&gt;&gt; Cuz I can't tell you how many times,\n\n496\n00:28:14.427 --> 00:28:17.529\nlike I need to know if this string's\nin here, but I really need to know\n\n497\n00:28:17.529 --> 00:28:21.192\nwhere it is because massive files and\nthings and I'm trying to debug something.\n\n498\n00:28:21.192 --> 00:28:26.045\nAnd I think I've been misusing grep\ncuz I think this actually makes\n\n499\n00:28:26.045 --> 00:28:27.700\na lot more sense to me.\n\n500\n00:28:27.700 --> 00:28:32.640\nSay find this pattern and then I want\nyou to print just those lines where\n\n501\n00:28:32.640 --> 00:28:37.254\nyou find the pattern and\ngive me the line number that they're on.\n\n502\n00:28:37.254 --> 00:28:39.930\nIt's like I've struggled with that for\nso long.\n\n503\n00:28:39.930 --> 00:28:41.710\nYeah, I wrote that down\nI'm gonna keep that,\n\n504\n00:28:41.710 --> 00:28:43.210\nI'm probably gonna tape it at my desk.\n\n505\n00:28:43.210 --> 00:28:48.300\nSo I use it all the time but I've never\nused that one, so boom, there we go.\n\n506\n00:28:48.300 --> 00:28:51.080\nYou have taught me something wonderful,\nmy man, so.\n\n507\n00:28:51.080 --> 00:28:53.380\n&gt;&gt; Well I'm glad I can impart\nknowledge to you, my good friend,\n\n508\n00:28:53.380 --> 00:28:55.050\nand hopefully you as well.\n\n509\n00:28:55.050 --> 00:28:58.710\nWe have one more thing I wanna show us,\nand then we'll call it a show.\n\n510\n00:28:58.710 --> 00:29:02.020\nAnd that is reading commands\nfrom a separate file.\n\n511\n00:29:03.230 --> 00:29:04.359\nSo very interesting here.\n\n512\n00:29:04.359 --> 00:29:07.457\nWe've got this file called extra.txt.\n\n513\n00:29:07.457 --> 00:29:13.457\nSo let's cat that clear here and\nsay cat extra.txt.\n\n514\n00:29:13.457 --> 00:29:19.945\nIt says this document approved for\npublic use by government.\n\n515\n00:29:19.945 --> 00:29:22.698\nSo it's some text I wanted to append.\n\n516\n00:29:22.698 --> 00:29:25.614\nKinda going on with our censoring\ntheme [LAUGH] from before.\n\n517\n00:29:25.614 --> 00:29:30.991\nSo okay, let's say that you wanna\nappend text to TTLS, what do we do?\n\n518\n00:29:30.991 --> 00:29:35.893\nAll right,\nwhat we do is we'll say sed, here, 3,\n\n519\n00:29:35.893 --> 00:29:39.370\nand I'm going to append to the third line.\n\n520\n00:29:39.370 --> 00:29:46.080\nRemember, I'm referencing this and\nI'll say r like that.\n\n521\n00:29:46.080 --> 00:29:53.376\nSo third, I want to not append but\nread this file into that line, okay?\n\n522\n00:29:53.376 --> 00:30:01.543\nAnd say extra.txt, [SOUND] that's\nnot right, extra.txt like so.\n\n523\n00:30:01.543 --> 00:30:05.167\nAnd then close that off and then say ttls.\n\n524\n00:30:05.167 --> 00:30:09.962\nHere we go, and you'll notice that\nbelow line 3 we get this document\n\n525\n00:30:09.962 --> 00:30:12.118\napproved by public use by GOV.\n\n526\n00:30:12.118 --> 00:30:14.579\nI could have put it at line 6 and\nit would put at the bottom and\n\n527\n00:30:14.579 --> 00:30:16.353\nprobably make a little bit more sense, but\n\n528\n00:30:16.353 --> 00:30:18.589\nI was just showing you could\nput it anywhere you want.\n\n529\n00:30:18.589 --> 00:30:22.577\nSo if I wanna read that line from a file,\nappend that, right,\n\n530\n00:30:22.577 --> 00:30:27.793\nthis is appending, yes, so it is appending\ninto line whatever or using whatever\n\n531\n00:30:27.793 --> 00:30:32.610\nother addressing feature you wanted\nto use, and put that line in there.\n\n532\n00:30:32.610 --> 00:30:33.570\nYou could do that as well.\n\n533\n00:30:33.570 --> 00:30:36.870\nAnd that was just another little\nfun thing that we can thrown on.\n\n534\n00:30:36.870 --> 00:30:39.180\nAnd you never know when\nthat might come in handy.\n\n535\n00:30:39.180 --> 00:30:43.905\nJustin, as of now I think I'm\ndone with the introductory\n\n536\n00:30:43.905 --> 00:30:49.260\nsed information, and then eventually\nwe'll move on to more powerful stuff.\n\n537\n00:30:49.260 --> 00:30:52.430\n&gt;&gt; Well, I'm kind of afraid of that more\npowerful stuff cuz I've already seen\n\n538\n00:30:52.430 --> 00:30:55.720\na bunch of things where I'm that\ncould be incredibly useful, but\n\n539\n00:30:55.720 --> 00:30:58.855\nI feel like I might miss some\nstuff out if I'm not too careful.\n\n540\n00:30:58.855 --> 00:31:01.660\nSo well, thank you so\nmuch for illuminating,\n\n541\n00:31:01.660 --> 00:31:05.020\nkind of drawing back\nthe blinders as you will.\n\n542\n00:31:05.020 --> 00:31:06.739\nBecause I used to be afraid of\nsome these sed expressions.\n\n543\n00:31:06.739 --> 00:31:09.679\nBut now I'm like they're just little\npieces that I pull together and\n\n544\n00:31:09.679 --> 00:31:10.914\nthey do the thing that I need.\n\n545\n00:31:10.914 --> 00:31:14.318\nAnd I'm definitely keeping\ntabs on a couple of them cuz\n\n546\n00:31:14.318 --> 00:31:18.445\nI'm like that solves a problem\nthat I've had consistently.\n\n547\n00:31:18.445 --> 00:31:20.175\nSo thank you so much.\n\n548\n00:31:20.175 --> 00:31:20.745\nWell, you heard it.\n\n549\n00:31:20.745 --> 00:31:22.195\nWe finished our intro, but\n\n550\n00:31:22.195 --> 00:31:25.025\nwe have got more advanced shell\nscripting coming your way.\n\n551\n00:31:25.025 --> 00:31:27.125\nBut for this episode,\nwe're going to go ahead and wrap it up.\n\n552\n00:31:27.125 --> 00:31:31.045\nSo, signing off for ITProTV,\nI've been your host Justin Dennison.\n\n553\n00:31:31.045 --> 00:31:31.895\n&gt;&gt; And I'm Daniel Lowrie.\n\n554\n00:31:31.895 --> 00:31:32.540\n&gt;&gt; And we'll see you next time.\n\n555\n00:31:32.540 --> 00:31:40.062\n[MUSIC]\n\n556\n00:31:40.062 --> 00:31:42.930\nThank you for watching ITProTV.\n\n",
          "vimeoId": "238053806"
        },
        {
          "description": "In this episode, Daniel and Justin introduce you to gawk, a program used to format and generate data. Here they will demonstrate the gawk basics: gawk command format, data fields, field separators, multiple command execution, and gawk script files.",
          "length": "1887",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-3-1-1-intro_to_awk-101217-PGM.00_31_12_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-3-1-1-intro_to_awk-101217-PGM.00_31_12_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-3-1-1-intro_to_awk-101217-PGM.00_31_12_06.Still001-sm.jpg",
          "title": "Intro to awk",
          "transcript": "WEBVTT\n\n1\n00:00:00.039 --> 00:00:01.133\nWelcome to ITProTV.\n\n2\n00:00:01.133 --> 00:00:03.022\nI'm your host Don Pezet.\n\n3\n00:00:03.022 --> 00:00:06.501\n[CROSSTALK]\n\n4\n00:00:06.501 --> 00:00:08.190\n[MUSIC]\n\n5\n00:00:08.190 --> 00:00:11.820\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:11.820 --> 00:00:15.819\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n7\n00:00:15.819 --> 00:00:20.085\nI'm your host Justin Dennision, and we're\nback with more Advanced Shell Scripting.\n\n8\n00:00:20.085 --> 00:00:22.250\nIn particular,\nwe're gonna being looking at gawk.\n\n9\n00:00:22.250 --> 00:00:23.775\nAnd you may be going, gawk?\n\n10\n00:00:23.775 --> 00:00:26.551\nI'm not gawking at you, what?\n\n11\n00:00:26.551 --> 00:00:27.992\nHold on, hold on.\n\n12\n00:00:27.992 --> 00:00:29.312\nI don't really know what it means,\n\n13\n00:00:29.312 --> 00:00:32.050\nbut luckily we have someone in\nthe studio that does, Mr. Daniel Lowrie.\n\n14\n00:00:32.050 --> 00:00:32.970\nHow are you doing today Daniel?\n\n15\n00:00:32.970 --> 00:00:34.130\n&gt;&gt; I'm doing fantastic Justin.\n\n16\n00:00:34.130 --> 00:00:35.300\nGlad to be back in the studio with you.\n\n17\n00:00:35.300 --> 00:00:36.850\nWe always have a good time making shows,\nand\n\n18\n00:00:36.850 --> 00:00:41.370\nhopefully you good folks out there\nenjoy them and are edified as well.\n\n19\n00:00:41.370 --> 00:00:44.570\nThat being said, yes,\nwe are talking about gawk.\n\n20\n00:00:44.570 --> 00:00:46.751\nAnd you say, what is this gawk thing?\n\n21\n00:00:46.751 --> 00:00:49.845\nWell, if you watched our sed show.\n\n22\n00:00:49.845 --> 00:00:53.772\nAnd you're like, yeah, sed, that's a tried\nand true tool, been around forever.\n\n23\n00:00:53.772 --> 00:00:57.539\nIt's usually, and many times,\nand I say usually, and\n\n24\n00:00:57.539 --> 00:01:01.402\na lot of times you'll see\nit coupled with awk, A-W-K.\n\n25\n00:01:01.402 --> 00:01:04.575\nBut awk has kind of splintered\noff into multi-factions and\n\n26\n00:01:04.575 --> 00:01:09.081\ndepending on what system you were running\nor what you've installed in your system,\n\n27\n00:01:09.081 --> 00:01:11.441\nyou might not be running awk specifically.\n\n28\n00:01:11.441 --> 00:01:18.284\nIn my world, I typically work with\ngawk which is genius flavor of awk.\n\n29\n00:01:18.284 --> 00:01:20.546\nSo just be aware that,\nthat's what we're working.\n\n30\n00:01:20.546 --> 00:01:21.601\nThat's why I decided, you know what?\n\n31\n00:01:21.601 --> 00:01:25.082\nI'm going to call it, the gawk show, okay?\n\n32\n00:01:25.082 --> 00:01:27.999\n[LAUGH] That kind of sounds like\na game show [LAUGH] Yeah, it is.\n\n33\n00:01:27.999 --> 00:01:32.169\n&gt;&gt; I'm expecting like door prizes and\npossibly, like, am I gonna have to answer\n\n34\n00:01:32.169 --> 00:01:35.844\nquestions and like bid high bid low,\nor are we doing something else?\n\n35\n00:01:35.844 --> 00:01:38.590\n&gt;&gt; Yeah, we're doing something else,\nit's not a game show.\n\n36\n00:01:38.590 --> 00:01:40.040\nBut it would be fun, right?\n\n37\n00:01:40.040 --> 00:01:42.970\nWelcome to the gawk show,\nthat would be a good time had by all.\n\n38\n00:01:42.970 --> 00:01:48.220\nBut no, so to give you some context of\nwhy it's gawk and not specifically awk.\n\n39\n00:01:48.220 --> 00:01:51.930\nWe are working in the gawwk context,\nand that being said, they're might be,\n\n40\n00:01:51.930 --> 00:01:56.460\nif you don't use gawk, it might not,\neverything that we do might not work.\n\n41\n00:01:56.460 --> 00:02:01.020\nProbably a lot of it will, cuz typically\ngawk has, from what I've read,\n\n42\n00:02:01.020 --> 00:02:03.570\nless functionality than\nmore functionality.\n\n43\n00:02:03.570 --> 00:02:04.560\nIt's more limited.\n\n44\n00:02:04.560 --> 00:02:11.140\nit's just giving you the basics of awk,\nbut just wanna make that note.\n\n45\n00:02:11.140 --> 00:02:14.090\nTypically, I work in a GNU environment.\n\n46\n00:02:14.090 --> 00:02:18.730\nSo GNU awk is what I have available,\nand so on and so forth.\n\n47\n00:02:18.730 --> 00:02:19.740\nSo just be aware of that.\n\n48\n00:02:19.740 --> 00:02:23.900\nif you wanna play with the others,\ngo right ahead, feel free, download them.\n\n49\n00:02:23.900 --> 00:02:27.320\nLook at that, it's a very interesting\nhistory and things of that nature.\n\n50\n00:02:27.320 --> 00:02:29.410\nFeel free to learn on your own as well,\nbut\n\n51\n00:02:29.410 --> 00:02:32.340\nhere we're gonna be taking\na look at gawk specifically.\n\n52\n00:02:32.340 --> 00:02:36.890\nSo gawk is awk, GNU awk.\n\n53\n00:02:36.890 --> 00:02:37.890\nAnd what it is?\n\n54\n00:02:37.890 --> 00:02:42.300\nIt's actually a bit of a programming\nlanguage in of itself.\n\n55\n00:02:42.300 --> 00:02:44.070\nYou get all the programming greats.\n\n56\n00:02:44.070 --> 00:02:44.630\nYou get variables.\n\n57\n00:02:44.630 --> 00:02:46.980\nYou get logic.\n\n58\n00:02:46.980 --> 00:02:49.370\nYou get loops, right?\n\n59\n00:02:49.370 --> 00:02:52.990\nAll the fun stuff we love with stuffs\nlike Bash or if you're a C programmer, or\n\n60\n00:02:52.990 --> 00:02:56.128\nif you're a Python programmer,\nall of that cool functionality.\n\n61\n00:02:56.128 --> 00:02:59.847\nIf you remember back, if you watched\nthe shell scripting basic show,\n\n62\n00:02:59.847 --> 00:03:00.926\nwe talked about BC.\n\n63\n00:03:00.926 --> 00:03:02.710\nAnd it was like a programming language,\n\n64\n00:03:02.710 --> 00:03:06.228\nits just well you start seeing these\nthings come like building upon each other,\n\n65\n00:03:06.228 --> 00:03:08.810\njust like a common thread\nthroughout this thing.\n\n66\n00:03:08.810 --> 00:03:11.855\nSo awk is kind of a primary,\nits used specifically,\n\n67\n00:03:11.855 --> 00:03:15.410\n[COUGH] most times we'll format it.\n\n68\n00:03:15.410 --> 00:03:19.690\nI want to format things in such\na way that they come out like this.\n\n69\n00:03:19.690 --> 00:03:23.940\nA lot of people use it to generate\nvery well formatted reports.\n\n70\n00:03:23.940 --> 00:03:28.360\nBut you can also use it inside\nof your scripts to get specific\n\n71\n00:03:28.360 --> 00:03:33.660\nitems out of data, okay?\n\n72\n00:03:33.660 --> 00:03:37.914\nFormat it in such a way, so that when it\nreturns, I can now work with that data,\n\n73\n00:03:37.914 --> 00:03:41.856\nmaybe throw that inside of a variable and\nit's only exactly what I want.\n\n74\n00:03:41.856 --> 00:03:46.562\nSo I use it a lot for that type of,\nI wanna format a data string that already\n\n75\n00:03:46.562 --> 00:03:51.191\nexists somewhere, but it might not,\nif I just reference it properly,\n\n76\n00:03:51.191 --> 00:03:54.918\nit might not come back in the way\nI expect, or that I want.\n\n77\n00:03:54.918 --> 00:04:00.001\nSo I need to start manipulating it and\nformatting it using the opt program\n\n78\n00:04:00.001 --> 00:04:05.518\nto get it into the specific format that\nI need for what I'm doing in my context.\n\n79\n00:04:05.518 --> 00:04:08.956\nSo typically this is how we're gonna\nuse it throughout this series, so\n\n80\n00:04:08.956 --> 00:04:10.060\njust be aware of that.\n\n81\n00:04:11.100 --> 00:04:13.580\n&gt;&gt; Now Daniel,\nthere's a interesting little tidbit that\n\n82\n00:04:13.580 --> 00:04:16.720\nI heard from a fairly smart individual.\n\n83\n00:04:16.720 --> 00:04:21.175\nHe actually used gawk to build\na flight simulator in the console,\n\n84\n00:04:21.175 --> 00:04:23.690\nlike art kind of simulator.\n\n85\n00:04:23.690 --> 00:04:26.402\nThis makes me think back to something\nwe've said several times before,\n\n86\n00:04:26.402 --> 00:04:28.589\njust because you can,\ndoesn't mean you should, right?\n\n87\n00:04:28.589 --> 00:04:32.310\n&gt;&gt; [LAUGH]\n&gt;&gt; So gawk has very specific use case.\n\n88\n00:04:32.310 --> 00:04:35.926\nAnd you've covered most of them, and\nthat's how I've used it, mostly its copy\n\n89\n00:04:35.926 --> 00:04:39.772\nand paste someone else's commands, cuz\nI'm like, I don't know what's going on.\n\n90\n00:04:39.772 --> 00:04:42.240\nSo please enlighten me.\n\n91\n00:04:42.240 --> 00:04:47.050\n&gt;&gt; Yeah, so the typical way of using\ngawk is to go, how to do this with gawk?\n\n92\n00:04:47.050 --> 00:04:51.470\n[LAUGH] In Google, it return and then\nyou read some post somewhere on a forum.\n\n93\n00:04:51.470 --> 00:04:52.340\nYou say, there it is.\n\n94\n00:04:52.340 --> 00:04:54.458\nCopy paste that into your code and\noff you go.\n\n95\n00:04:54.458 --> 00:04:57.742\nHopefully, we're gonna be able to at\nleast start to understanding what that,\n\n96\n00:04:57.742 --> 00:04:59.171\neven if you're still doing that.\n\n97\n00:04:59.171 --> 00:05:01.780\nThere's nothing wrong with that in\nmy opinion, to be honest with you.\n\n98\n00:05:01.780 --> 00:05:03.930\nI think that's all fantastic\nway of getting things done.\n\n99\n00:05:03.930 --> 00:05:07.500\nWhy struggle through it,\nif someone's already done it.\n\n100\n00:05:07.500 --> 00:05:09.270\nJust find that, but\n\n101\n00:05:09.270 --> 00:05:14.490\nbeing able to understand it better\nwould go a long way to making sure that\n\n102\n00:05:14.490 --> 00:05:17.700\nin the future when you need something\nyou go well I know why that's working.\n\n103\n00:05:17.700 --> 00:05:20.566\nBecause maybe you think it works\na certain way and it doesn't, right?\n\n104\n00:05:20.566 --> 00:05:24.442\nSo hopefully getting a better\nunderstanding of gawk and\n\n105\n00:05:24.442 --> 00:05:27.986\nhow to look at those strings,\nuse those strings and\n\n106\n00:05:27.986 --> 00:05:32.782\ncommands in the way that you wanted,\nit's gonna be helpful for you.\n\n107\n00:05:32.782 --> 00:05:37.842\nSo let's look at the formats\nof using gawk, okay?\n\n108\n00:05:37.842 --> 00:05:38.740\nLet's jump to my screen.\n\n109\n00:05:39.880 --> 00:05:43.562\nIf I call gawk, G-A-W-K, like so,\n\n110\n00:05:43.562 --> 00:05:46.782\nand this is the typical format\nin which it's being used.\n\n111\n00:05:46.782 --> 00:05:50.475\nKind of like said,\nyou start with an open single quote, okay?\n\n112\n00:05:50.475 --> 00:05:53.045\nThen you do an open curly brace.\n\n113\n00:05:53.045 --> 00:05:56.783\nThis is how we, mostly, are going to be.\n\n114\n00:05:56.783 --> 00:05:59.528\nWe also can pass some options\nas well before this, but\n\n115\n00:05:59.528 --> 00:06:03.530\nthis is where the real meat and\npotatoes is happening, okay?\n\n116\n00:06:03.530 --> 00:06:05.590\nAnd then, you can get some commands.\n\n117\n00:06:05.590 --> 00:06:08.170\nTypically, I like to use prints.\n\n118\n00:06:08.170 --> 00:06:14.520\nSo and we'll say like hello world, right?\n\n119\n00:06:14.520 --> 00:06:18.015\nClose it out, as always you open and\nclose things.\n\n120\n00:06:18.015 --> 00:06:20.280\nLook something like this, you hit Enter.\n\n121\n00:06:20.280 --> 00:06:23.721\nAnd, some weirdness here, right?\n\n122\n00:06:23.721 --> 00:06:27.160\nAnd that's because you're like,\nwell okay well, quit.\n\n123\n00:06:27.160 --> 00:06:31.220\nWell, now it gave me hello world,\nthat's odd.\n\n124\n00:06:31.220 --> 00:06:32.240\nWhat's going on here?\n\n125\n00:06:32.240 --> 00:06:35.460\nThe problem is,\nI didn't give it any data really.\n\n126\n00:06:35.460 --> 00:06:41.260\nI just said print hello world,\nbut against what?\n\n127\n00:06:41.260 --> 00:06:43.760\nIt's expecting some sort of input.\n\n128\n00:06:43.760 --> 00:06:45.520\nSo when you don't give it any input,\n\n129\n00:06:45.520 --> 00:06:50.270\nit kind of drops to that\ninteractive type mode, okay?\n\n130\n00:06:50.270 --> 00:06:55.360\nI can do, I think a control D,\nyeah, send an end of file\n\n131\n00:06:55.360 --> 00:06:59.540\ntype character to gawk when you're\nin that mode, to get back out.\n\n132\n00:06:59.540 --> 00:07:02.860\nControl C also works as well,\njust keep those in mind.\n\n133\n00:07:02.860 --> 00:07:04.190\nIf you get dropped in there, yeah,\n\n134\n00:07:04.190 --> 00:07:07.439\nI forgot to pass the file, control D\nwill get you right back out of there.\n\n135\n00:07:09.140 --> 00:07:14.080\nAlso, inside of our statement here,\nwe'll have some\n\n136\n00:07:14.080 --> 00:07:19.140\nvery positional parameter like objects\nthat we're going to be referencing.\n\n137\n00:07:19.140 --> 00:07:21.580\nDollar sign zero, dollar sign one.\n\n138\n00:07:21.580 --> 00:07:24.460\nNow these aren't Bash\npositional parameters,\n\n139\n00:07:24.460 --> 00:07:27.290\nthese are gawk parameters, okay?\n\n140\n00:07:27.290 --> 00:07:30.210\nI believe they called them data fields.\n\n141\n00:07:30.210 --> 00:07:33.517\nSo when you're working in\nthe gawk frame of mind,\n\n142\n00:07:33.517 --> 00:07:38.320\nthe gawk world as it were, and\nyou're inside of those curly braces, and\n\n143\n00:07:38.320 --> 00:07:42.451\nyou see dollar sign zero,\ndollar sign one, dollar sign two.\n\n144\n00:07:42.451 --> 00:07:48.410\nThey have specific gawk context that's\nbeing called in to play there, okay?\n\n145\n00:07:48.410 --> 00:07:51.416\nAnd do have a file,\nI think I created a file,\n\n146\n00:07:51.416 --> 00:07:54.112\nlet me see what is the name of that file.\n\n147\n00:07:54.112 --> 00:07:58.650\nI thought I had, anyway,\nlet's just run down what they mean.\n\n148\n00:07:58.650 --> 00:08:00.571\nGive you some real quick and dirty.\n\n149\n00:08:00.571 --> 00:08:04.462\nIf you see $1 like that,\nand we'll start with $0.\n\n150\n00:08:04.462 --> 00:08:07.512\n$0 is the entire string,\n\n151\n00:08:07.512 --> 00:08:12.290\nokay, the entire whatever it slurped in.\n\n152\n00:08:12.290 --> 00:08:14.137\nI want to print that, okay?\n\n153\n00:08:14.137 --> 00:08:18.160\nOr whatever function that I'm doing\ninside of gawk I wanna do that.\n\n154\n00:08:18.160 --> 00:08:22.100\nI wanna reference the entire\nstring that was brought in, okay?\n\n155\n00:08:23.370 --> 00:08:26.490\nIf I want to do the first field, and\n\n156\n00:08:26.490 --> 00:08:32.510\nthese are separated out by any\ntypical white space, so spaces, tabs.\n\n157\n00:08:33.930 --> 00:08:36.230\nThose are the two main ones that we use.\n\n158\n00:08:36.230 --> 00:08:40.510\nThose are the default,\nany kind of real white space character.\n\n159\n00:08:40.510 --> 00:08:44.352\nThat's what's gonna see.\nWell here's one, here's two, here's three,\n\n160\n00:08:44.352 --> 00:08:46.590\nhere's four, and so on, okay?\n\n161\n00:08:46.590 --> 00:08:50.024\n[COUGH] If I wanna do that,\nI can say print $1.\n\n162\n00:08:50.024 --> 00:08:54.916\nSo if I had, name, date and serial number,\n\n163\n00:08:54.916 --> 00:08:59.042\nand I wanted to print name,\nI would reference it with $1.\n\n164\n00:08:59.042 --> 00:09:02.886\nIf I wanted dates I would\nreference that with $2.\n\n165\n00:09:02.886 --> 00:09:07.980\nIf I wanted $3 and so on so forth, okay?\n\n166\n00:09:07.980 --> 00:09:10.870\nSo just keep that in mind.\n\n167\n00:09:10.870 --> 00:09:13.020\nWhatever number you need\nyou just have to reference,\n\n168\n00:09:13.020 --> 00:09:15.750\nyou just have to look at it and\ncount it out.\n\n169\n00:09:15.750 --> 00:09:18.960\nTake a look, this is the one,\ntwo, three, four, fifth field.\n\n170\n00:09:20.100 --> 00:09:22.840\nDollar sign five is what I\nwant to reference, okay, so\n\n171\n00:09:22.840 --> 00:09:23.420\njust keep that in mind.\n\n172\n00:09:24.510 --> 00:09:26.600\nWhat else do we need to move to?\n\n173\n00:09:26.600 --> 00:09:29.030\nPassing commands to Gawk.\n\n174\n00:09:29.030 --> 00:09:32.440\nSo we kind of looked at working\nwith Gawk a little bit.\n\n175\n00:09:32.440 --> 00:09:36.167\nObviously it wasn't great to do anything\nbecause I didn't give it any data\n\n176\n00:09:36.167 --> 00:09:37.063\nto work against.\n\n177\n00:09:37.063 --> 00:09:40.030\nLet's see a more practical\nlook at this thing.\n\n178\n00:09:40.030 --> 00:09:43.990\nI've got this Inventory.text,\ncat Inventory.text.\n\n179\n00:09:43.990 --> 00:09:49.720\nI've got this asset, serial number, and\nuser field, kind of breaking it up.\n\n180\n00:09:49.720 --> 00:09:52.272\nAnd they are delimited by colons.\n\n181\n00:09:54.724 --> 00:09:57.554\nSo I can say,\nhere's the asset, a Dell 7200.\n\n182\n00:09:57.554 --> 00:09:59.170\nIt's a laptop computer.\n\n183\n00:09:59.170 --> 00:10:03.280\nWe've got a serial number, which I\ncreated at random for this thing, for\n\n184\n00:10:03.280 --> 00:10:04.950\nthis purpose.\n\n185\n00:10:04.950 --> 00:10:09.440\nAnd then the user,\nwhich that asset is assigned to, okay?\n\n186\n00:10:09.440 --> 00:10:14.350\nSo it's just an inventory list of assets,\ntheir according serial numbers and\n\n187\n00:10:14.350 --> 00:10:15.440\nthe users they have been assigned.\n\n188\n00:10:16.610 --> 00:10:18.500\nPretty simple.\nSomething that actually you may\n\n189\n00:10:19.590 --> 00:10:21.380\nencounter in your day to day business.\n\n190\n00:10:22.790 --> 00:10:26.928\nBut what if I want to grab\nsome fields out of there.\n\n191\n00:10:26.928 --> 00:10:30.200\nWhat if I just want to grab\nthe laptop field, the asset field?\n\n192\n00:10:30.200 --> 00:10:32.490\nWhat if I just want to\ngrab that user field?\n\n193\n00:10:32.490 --> 00:10:34.860\nRight, so I have to start working\nwith Gawk can do that for me,\n\n194\n00:10:34.860 --> 00:10:36.830\ngive me that type of output.\n\n195\n00:10:36.830 --> 00:10:39.085\nSo let's see here, I'll do it like this.\n\n196\n00:10:39.085 --> 00:10:44.490\nI'll say Gawk, and this is where we\ncan start throwing some options at it.\n\n197\n00:10:44.490 --> 00:10:47.260\nI'm going to change the field separator.\n\n198\n00:10:47.260 --> 00:10:53.020\nRemember I told you the field separator\nby default is spaces and taps, right?\n\n199\n00:10:53.020 --> 00:10:54.600\nWhite space.\n\n200\n00:10:54.600 --> 00:10:57.135\nBut I want to change that because\nthis is separated by colons.\n\n201\n00:10:57.135 --> 00:11:02.579\nSo I'm going to say -F,\ncapital F, then colon, okay?\n\n202\n00:11:02.579 --> 00:11:08.690\nSo I'm changing that field separator\nfrom white space to colons using the -F.\n\n203\n00:11:09.880 --> 00:11:16.570\nAnd then I'm gonna say we'll do our print\ncommand like what we did up ahead here.\n\n204\n00:11:16.570 --> 00:11:22.370\nOpen various like that, we'll say prints\nand we will go with let's start with $0.\n\n205\n00:11:22.370 --> 00:11:23.770\nLet's start there.\n\n206\n00:11:23.770 --> 00:11:25.653\nLet's say $0.\n\n207\n00:11:25.653 --> 00:11:32.643\nClose it out, hit that, and then feed it\nthe actual file which is Inventory.text.\n\n208\n00:11:32.643 --> 00:11:34.900\nYou'll see I get everything, all right?\n\n209\n00:11:35.990 --> 00:11:39.330\nGreat because every string was asked for.\n\n210\n00:11:39.330 --> 00:11:40.485\nEvery $0.\n\n211\n00:11:40.485 --> 00:11:44.984\nIf I come up here and I say I want $1,\n\n212\n00:11:44.984 --> 00:11:49.775\nhit that, you'll notice now I only\nget that first field because now\n\n213\n00:11:49.775 --> 00:11:54.630\nit's separating things out by\nsemicolons and moving on and\n\n214\n00:11:54.630 --> 00:11:57.750\nforgetting the rest cuz I only ask for\none specific field.\n\n215\n00:11:57.750 --> 00:12:02.295\nWe do that with two,\nwe do that just for fun.\n\n216\n00:12:02.295 --> 00:12:05.260\nThere's all my serial numbers.\n\n217\n00:12:05.260 --> 00:12:09.980\nSo you're starting to see how I can, much\nlike we do we said with carving stuff out.\n\n218\n00:12:09.980 --> 00:12:13.960\nI'm carving out only specific\ndatasets that I want, okay?\n\n219\n00:12:15.260 --> 00:12:17.750\nMoving on, let's see here.\n\n220\n00:12:17.750 --> 00:12:18.860\nMultiple commands.\n\n221\n00:12:19.860 --> 00:12:23.330\nWhat if I want to group commands,\nI wanna do something and\n\n222\n00:12:23.330 --> 00:12:26.100\nthen I wanna do something\nelse against that?\n\n223\n00:12:26.100 --> 00:12:26.650\nWhat can we do?\n\n224\n00:12:26.650 --> 00:12:30.820\nWe can use our semicolon, again, much\nlike where we saw a bit of grouping in.\n\n225\n00:12:30.820 --> 00:12:34.240\nI love how these things\nkind of transfer over.\n\n226\n00:12:34.240 --> 00:12:36.495\nIt's almost standardized, right?\n\n227\n00:12:36.495 --> 00:12:39.020\nSaw a lot of the same types\nfunctionalities we saw in\n\n228\n00:12:39.020 --> 00:12:43.060\nare very similar to Awk or\nGawk in that respect as well.\n\n229\n00:12:43.060 --> 00:12:46.220\nSo we can use semicolon and\nsay this command and this command,\n\n230\n00:12:46.220 --> 00:12:47.660\nand off we go, okay?\n\n231\n00:12:47.660 --> 00:12:49.250\nLet's take a look at that.\n\n232\n00:12:50.370 --> 00:12:54.020\nI'll say, I'll echo in some string here.\n\n233\n00:12:54.020 --> 00:13:00.310\nI'll say echo, This is the best test ever.\n\n234\n00:13:01.470 --> 00:13:02.315\nBada-bing, like so.\n\n235\n00:13:02.315 --> 00:13:07.511\nAnd then I'll pipe that into gawk and\nI'll say,\n\n236\n00:13:07.511 --> 00:13:13.608\nlet's see here,\nopen my curly brace and I'll say $4.\n\n237\n00:13:13.608 --> 00:13:19.081\nSo I'm referencing the fourth field and\nI'm gonna go with,\n\n238\n00:13:19.081 --> 00:13:23.290\nso that should be this is the best, right?\n\n239\n00:13:23.290 --> 00:13:25.040\nHere we go, right there.\n\n240\n00:13:25.040 --> 00:13:27.480\nThat's for separated out by white space.\n\n241\n00:13:27.480 --> 00:13:31.450\nNo fields changing,\nno field separator changing in this one.\n\n242\n00:13:31.450 --> 00:13:38.820\nWe'll say $4 equals, and\nI'll say greatest, like that.\n\n243\n00:13:38.820 --> 00:13:44.570\nAnd then I will add my semi-colon so\nthat I can do another command.\n\n244\n00:13:44.570 --> 00:13:49.140\nAnd I'll make my other command,\njust we'll print the whole line.\n\n245\n00:13:49.140 --> 00:13:54.340\nRight, so print $0, okay?\n\n246\n00:13:54.340 --> 00:13:59.620\nClose out my curly, add my single quotes,\nand we should be good to go.\n\n247\n00:13:59.620 --> 00:14:04.890\nYou notice now it has changed the output\nof what I was going to echo from.\n\n248\n00:14:04.890 --> 00:14:08.480\nThis is the best test ever to\nthis is the greatest test ever.\n\n249\n00:14:09.510 --> 00:14:10.500\nStart seeing how that works?\n\n250\n00:14:10.500 --> 00:14:11.500\nI've got two different commands.\n\n251\n00:14:11.500 --> 00:14:16.939\nOne is switch out the position,\nthe data field, I'm sorry,\n\n252\n00:14:16.939 --> 00:14:22.730\nof position number four with\ngreatest from whatever it is.\n\n253\n00:14:22.730 --> 00:14:26.310\nAnd then print out the entire string.\n\n254\n00:14:26.310 --> 00:14:29.330\nSo it manipulated the string and then\nit printed that manipulated string out.\n\n255\n00:14:30.340 --> 00:14:30.950\nThat make sense?\n\n256\n00:14:30.950 --> 00:14:31.740\nHopefully it does.\n\n257\n00:14:32.740 --> 00:14:38.080\nAll right, basically when it comes to\ngrouping commands, that's what you'll see.\n\n258\n00:14:38.080 --> 00:14:39.950\nIt's a typical way in which to do it.\n\n259\n00:14:39.950 --> 00:14:43.510\nI think that you can also throw\ngawk scripts at it as well.\n\n260\n00:14:43.510 --> 00:14:45.540\nIt's a very handy thing.\n\n261\n00:14:45.540 --> 00:14:48.470\nAs you can see, these things\nstart getting very convoluted.\n\n262\n00:14:48.470 --> 00:14:50.960\nSo creating a script that\nyou just call from gawk,\n\n263\n00:14:50.960 --> 00:14:54.970\nit would probably lend to\na little bit of ease of use.\n\n264\n00:14:54.970 --> 00:15:00.150\n&gt;&gt; Daniel, before we get into that,\ncuz I can already see the utility here.\n\n265\n00:15:00.150 --> 00:15:03.010\nBack up above, I'm going to\nrewind this a little bit, sorry.\n\n266\n00:15:03.010 --> 00:15:05.058\nI've been trying to figure\nthis out off camera.\n\n267\n00:15:05.058 --> 00:15:08.200\nI notice in the previous commands before\nthe echo when we changed the white\n\n268\n00:15:08.200 --> 00:15:10.990\nspace limiter, or\nexcuse me the break space limiter.\n\n269\n00:15:10.990 --> 00:15:11.959\n&gt;&gt; Yes.\n&gt;&gt; File separator.\n\n270\n00:15:11.959 --> 00:15:13.100\n&gt;&gt; File separator, yeah.\n\n271\n00:15:13.100 --> 00:15:13.660\n&gt;&gt; Field separator.\n\n272\n00:15:13.660 --> 00:15:14.670\n&gt;&gt; Field separator.\n\n273\n00:15:14.670 --> 00:15:15.410\nAw man.\n\n274\n00:15:15.410 --> 00:15:16.394\nThere's an f in their somewhere.\n\n275\n00:15:16.394 --> 00:15:17.535\n&gt;&gt; There is, yeah.\n\n276\n00:15:17.535 --> 00:15:18.566\n[CROSSTALK] To a colon,\n\n277\n00:15:18.566 --> 00:15:21.343\none of those that ran kept that\nheading that was in that file.\n\n278\n00:15:21.343 --> 00:15:24.030\nThe other ones took that away.\n\n279\n00:15:24.030 --> 00:15:26.460\nHow does it handle if\nthere's no matches for\n\n280\n00:15:26.460 --> 00:15:28.800\nthat field separator on a particular line?\n\n281\n00:15:28.800 --> 00:15:29.950\nDoes it skip?\n\n282\n00:15:29.950 --> 00:15:30.920\nOr is that inconsistent?\n\n283\n00:15:30.920 --> 00:15:34.932\nOr is that a setting depending on whether\nyou're asking for all, the first one,\n\n284\n00:15:34.932 --> 00:15:36.644\nthe second one, or the other one?\n\n285\n00:15:36.644 --> 00:15:37.887\n&gt;&gt; Great question, great question.\n\n286\n00:15:37.887 --> 00:15:41.593\nYeah, what's happening there is,\n\n287\n00:15:41.593 --> 00:15:47.990\nJustin is noticing here that\nin this instance we got this.\n\n288\n00:15:47.990 --> 00:15:50.190\nIt said print zero, right?\n\n289\n00:15:50.190 --> 00:15:54.828\nThe reason that we got all this asset\nserial number user is because I said give\n\n290\n00:15:54.828 --> 00:15:55.852\nme everything.\n\n291\n00:15:55.852 --> 00:15:56.540\nWell that's a line.\n\n292\n00:15:56.540 --> 00:16:00.015\nI took it in no matter what it was.\n\n293\n00:16:00.015 --> 00:16:04.470\nDown in this instance,\nwe changed the field separator to a colon.\n\n294\n00:16:04.470 --> 00:16:05.837\nIt's no longer a white space.\n\n295\n00:16:09.890 --> 00:16:12.951\nBut we did print $1, okay?\n\n296\n00:16:12.951 --> 00:16:14.670\nThere comes the issue.\n\n297\n00:16:14.670 --> 00:16:18.570\nSo he's saying,\nwhy do we see all this in this\n\n298\n00:16:20.380 --> 00:16:22.970\nexample, but down here, we don't get it?\n\n299\n00:16:22.970 --> 00:16:24.450\nIt's just blank.\n\n300\n00:16:24.450 --> 00:16:28.550\nAnd that's because of what field\nwe are referencing, right?\n\n301\n00:16:28.550 --> 00:16:31.020\nHere, we're referencing $1 to this line.\n\n302\n00:16:31.020 --> 00:16:35.298\nBecause there's no colon here,\nthis entire line is $1.\n\n303\n00:16:35.298 --> 00:16:40.680\nAnd since we asked for $1,\nit printed it again with the dashes.\n\n304\n00:16:40.680 --> 00:16:42.690\nThere is no separator of a semicolon.\n\n305\n00:16:42.690 --> 00:16:46.090\nTherefore, it is $1, and it prints it out.\n\n306\n00:16:46.090 --> 00:16:49.440\nDown here, we specifically asked for $2.\n\n307\n00:16:49.440 --> 00:16:51.020\nGuess what, this is $1.\n\n308\n00:16:51.020 --> 00:16:52.660\nThis is $1.\n\n309\n00:16:52.660 --> 00:16:54.803\nI just skip over it cuz\nyou're not asking for $1.\n\n310\n00:16:54.803 --> 00:16:56.329\nYou only wanted $2.\n\n311\n00:16:56.329 --> 00:17:01.010\nAnd therefore, it gave me blank lines and\ndidn't print anything out, okay?\n\n312\n00:17:01.010 --> 00:17:02.129\nSo just be aware.\n\n313\n00:17:02.129 --> 00:17:04.448\nThat was a good catch by Justin, going,\n\n314\n00:17:04.448 --> 00:17:09.660\nwhy are we seeing difference in output\nwhen the commands seem almost identical?\n\n315\n00:17:09.660 --> 00:17:14.070\nAnd it's that one little modifier that\nchanges the way that you get your output.\n\n316\n00:17:14.070 --> 00:17:17.385\n&gt;&gt; And that brings up something to me cuz\nI tend to like things being symmetric.\n\n317\n00:17:17.385 --> 00:17:20.920\nLike, if I have a row, or\nif we're talking about data fields,\n\n318\n00:17:20.920 --> 00:17:24.340\nif I expect three,\nI expect all of them to have three.\n\n319\n00:17:24.340 --> 00:17:26.100\nBut I understand the utility here,\nall right?\n\n320\n00:17:26.100 --> 00:17:29.940\nIf that field separator is not found,\njust put it at the end,\n\n321\n00:17:29.940 --> 00:17:34.250\nwhich means you're gonna have something,\nwhat I would call a jagged matrix.\n\n322\n00:17:34.250 --> 00:17:37.990\nYou have one element, and\nthen you have possible three elements.\n\n323\n00:17:37.990 --> 00:17:38.801\n&gt;&gt; Yeah.\n\n324\n00:17:38.801 --> 00:17:40.486\n&gt;&gt; So we're just being aware of that.\n\n325\n00:17:40.486 --> 00:17:42.420\nI mean, it doesn't cause any errors.\n\n326\n00:17:42.420 --> 00:17:46.037\nBut it just may be like, I was\nexpecting the header to be printed out.\n\n327\n00:17:46.037 --> 00:17:48.030\nBut I'm actually asking for\nthe second field.\n\n328\n00:17:48.030 --> 00:17:50.820\nBut since it doesn't have that\nfield separator, I don't have that.\n\n329\n00:17:50.820 --> 00:17:54.656\n&gt;&gt; Now, the cool thing is, is you'd\nable to pipe that back into AWK and\n\n330\n00:17:54.656 --> 00:17:58.820\nbasically cut that now, cuz what\nhe's saying is, what'll happen is,\n\n331\n00:17:58.820 --> 00:18:02.950\na lot of times, there might be\nlots of white space between stuff.\n\n332\n00:18:02.950 --> 00:18:07.430\nSo you kind of get this\nout-of-line sequence, okay?\n\n333\n00:18:07.430 --> 00:18:10.230\nSo I've got everything butted up nicely,\nup against the colon.\n\n334\n00:18:10.230 --> 00:18:11.300\nThat's where everything starts.\n\n335\n00:18:11.300 --> 00:18:14.173\nSo it says colon,\nthen the start of something.\n\n336\n00:18:14.173 --> 00:18:17.300\nAnd they're all the same length, so\neverything looks nice and uniform.\n\n337\n00:18:17.300 --> 00:18:19.887\nBut if you do some results,\nand they come out, and\n\n338\n00:18:19.887 --> 00:18:24.015\nit's kind of like moving around because\nthere's white space in between them,\n\n339\n00:18:24.015 --> 00:18:27.610\nand it just, well, that was part\nof that field, what do you do?\n\n340\n00:18:27.610 --> 00:18:30.875\nWell, I can just throw it\nright back into AWK and say,\n\n341\n00:18:30.875 --> 00:18:35.860\nleave white space as the default\ncharacter, as the field separator.\n\n342\n00:18:35.860 --> 00:18:38.350\nAnd now give me $1 again.\n\n343\n00:18:38.350 --> 00:18:39.780\nWell, guess what's in $1?\n\n344\n00:18:39.780 --> 00:18:43.220\nThe first thing it finds\nafter a white space, or $2.\n\n345\n00:18:43.220 --> 00:18:44.710\nIt might be $2 at that point.\n\n346\n00:18:44.710 --> 00:18:46.645\nI think it is $1, as we say.\n\n347\n00:18:46.645 --> 00:18:50.430\nA white space and now something,\nthat's the actual first field.\n\n348\n00:18:50.430 --> 00:18:51.150\nNow I can grab that, so\n\n349\n00:18:51.150 --> 00:18:56.180\nyou can pipe AWK together to make that\nhappen, if you see that kind of results.\n\n350\n00:18:56.180 --> 00:18:58.810\nAnd I actually do that in\nsome of my practical scripts\n\n351\n00:18:58.810 --> 00:19:00.570\nbecause I do get that type of results.\n\n352\n00:19:00.570 --> 00:19:05.080\nSo If you move on to\nthe Practical Script Writing series,\n\n353\n00:19:05.080 --> 00:19:09.250\nwhen that gets done,\nyou will see that happen, right?\n\n354\n00:19:09.250 --> 00:19:12.510\nBut for right now, trying to keep\nit simple, trying to keep it sane.\n\n355\n00:19:12.510 --> 00:19:15.250\nDon't wanna heap too\nmuch on you good folks.\n\n356\n00:19:15.250 --> 00:19:16.960\nBut these were really good questions and\n\n357\n00:19:16.960 --> 00:19:19.420\nstuff that you might be\nasking yourself as well.\n\n358\n00:19:19.420 --> 00:19:20.370\nAll right, so what are doing?\n\n359\n00:19:20.370 --> 00:19:20.880\nWhere are we at?\n\n360\n00:19:20.880 --> 00:19:22.450\nWhere have we left off here?\n\n361\n00:19:22.450 --> 00:19:28.663\nWe grouped commands together, very cool,\njust use our semicolon for that.\n\n362\n00:19:28.663 --> 00:19:31.830\nScript files, that's where we\nwere going to, script files.\n\n363\n00:19:31.830 --> 00:19:34.920\nI can actually create a script file,\nand that way, I can just reference it.\n\n364\n00:19:34.920 --> 00:19:42.422\nSo if I see myself repeating gawk strings,\ngawk commands, I go, I do this a lot.\n\n365\n00:19:42.422 --> 00:19:45.764\nAnd I really hate typing,\nbecause I'm bad at it.\n\n366\n00:19:45.764 --> 00:19:48.170\nWhat if I just created one\nscript that does this and\n\n367\n00:19:48.170 --> 00:19:51.150\nthen just have gawk reference\nthat script and run the script,\n\n368\n00:19:51.150 --> 00:19:53.880\ninstead of me trying to\ntype it out every time?\n\n369\n00:19:53.880 --> 00:19:54.857\nWouldn't that be nice?\n\n370\n00:19:54.857 --> 00:19:56.140\nWouldn't that be a wonderful world?\n\n371\n00:19:56.140 --> 00:19:58.250\nWell, guess what, that's the world\nthat we live in, and it is wonderful.\n\n372\n00:19:58.250 --> 00:20:00.150\nI love it, so let's take a look at that.\n\n373\n00:20:00.150 --> 00:20:03.650\nI've got gawk_script1.gawk.\n\n374\n00:20:03.650 --> 00:20:08.780\nAgain, like most things in Linux, you can\nname the extension anything you want.\n\n375\n00:20:08.780 --> 00:20:12.418\nI like to call them .gawk cuz that\nlets me know it's a gawk strip.\n\n376\n00:20:12.418 --> 00:20:15.629\nStrip, a gawk script,\nlike that, all right?\n\n377\n00:20:15.629 --> 00:20:16.749\nSo let's do that.\n\n378\n00:20:16.749 --> 00:20:24.162\nclear, and cat gawk_script1.gawk.\n\n379\n00:20:24.162 --> 00:20:25.783\nAnd here we go.\n\n380\n00:20:25.783 --> 00:20:27.842\nBasically a print command, right?\n\n381\n00:20:27.842 --> 00:20:33.059\nprint reference $3 uses a, and\n\n382\n00:20:33.059 --> 00:20:38.285\nthen give me $1 as well, okay?\n\n383\n00:20:38.285 --> 00:20:41.939\nSo what we're doing is,\nwe're going to print out what's in $3.\n\n384\n00:20:41.939 --> 00:20:43.927\nWe're gonna print out what's in $1.\n\n385\n00:20:43.927 --> 00:20:45.339\nAnd in between them,\n\n386\n00:20:45.339 --> 00:20:50.365\nwe're adding a string of text to print\nout along with it, which is, uses a.\n\n387\n00:20:50.365 --> 00:20:50.930\nStraightforward?\n\n388\n00:20:52.338 --> 00:20:56.440\nIf the keen-eyed observer out there\nnoticed there is a little extra\n\n389\n00:20:56.440 --> 00:21:01.390\ninvolved on that, it wasn't coming out.\n\n390\n00:21:01.390 --> 00:21:02.010\nThis works.\n\n391\n00:21:02.010 --> 00:21:05.950\nIf I don't have this on the front of it,\nthis works.\n\n392\n00:21:05.950 --> 00:21:08.210\nIt's just not as pretty\nas I would like it to be.\n\n393\n00:21:08.210 --> 00:21:12.111\nSo I added this as a little jump ahead\ninto something that's probably a little\n\n394\n00:21:12.111 --> 00:21:13.621\nmore advanced at this point.\n\n395\n00:21:13.621 --> 00:21:16.490\nSo you're getting a sneak preview\non some advanced functionality.\n\n396\n00:21:16.490 --> 00:21:18.460\nBasically, what I'm doing here is saying,\n\n397\n00:21:18.460 --> 00:21:22.300\nstart after line 2, anything after line 2,\ncuz you remember, in the first two lines,\n\n398\n00:21:22.300 --> 00:21:26.260\nit said Asset, Serial_Number, User,\nand then the dotted dash lines.\n\n399\n00:21:26.260 --> 00:21:30.310\nWell, that was coming out in my field\nbecause it says, I'm taking that in.\n\n400\n00:21:30.310 --> 00:21:34.710\nSo I'm just saying,\njump past that and start at line 2,\n\n401\n00:21:34.710 --> 00:21:37.217\nthen print out $3 uses a $1.\n\n402\n00:21:37.217 --> 00:21:38.460\nMake sense?\n\n403\n00:21:38.460 --> 00:21:41.266\nLet's see what happens and\nhow we call that.\n\n404\n00:21:41.266 --> 00:21:42.670\nSo we would say gawk.\n\n405\n00:21:43.750 --> 00:21:47.750\nI will make sure to change my field\nseparator to a colon cuz we're\n\n406\n00:21:47.750 --> 00:21:50.500\nof the text that we're working with.\n\n407\n00:21:50.500 --> 00:21:57.147\nAnd then I will say -f to call my script,\nwhich is gawk_script1.\n\n408\n00:21:57.147 --> 00:22:01.160\nYeah, gawk_script1.gawk.\n\n409\n00:22:01.160 --> 00:22:04.490\nAnd then just give it the file that you\nwanna manipulate, which is inventory.\n\n410\n00:22:06.070 --> 00:22:11.340\nNow, when it prints out,\nI get mrodrick uses a Dell7200.\n\n411\n00:22:11.340 --> 00:22:13.310\ndpezet uses a GalagoPro.\n\n412\n00:22:13.310 --> 00:22:14.930\ndlowrie uses a GalagoPro.\n\n413\n00:22:14.930 --> 00:22:19.264\nSo now I've reformatted the text\ninto something that's a little\n\n414\n00:22:19.264 --> 00:22:21.550\nmore human readable.\n\n415\n00:22:21.550 --> 00:22:26.688\nAll that semicolon and asset tags and\nall that stuff, eh, right, I want\n\n416\n00:22:26.688 --> 00:22:32.260\nit to be easier for my user out there\nto consume as input to the human mind.\n\n417\n00:22:32.260 --> 00:22:35.780\nSo if I handed this to Justin,\nhe would go, I\n\n418\n00:22:35.780 --> 00:22:39.970\nreally easily understand that Mike Rodrick\nis using a Dell7200 as his workstation.\n\n419\n00:22:41.290 --> 00:22:44.778\nIf I were to give him the inventory.txt,\nhe might have to go, okay, well,\n\n420\n00:22:44.778 --> 00:22:48.240\nI've got Asset, I've got Serial_Number,\nthen I've got User.\n\n421\n00:22:48.240 --> 00:22:51.210\nOkay, now I can make sense of\nthis matrix that's been given.\n\n422\n00:22:51.210 --> 00:22:53.719\nSo the asset is the Dell7200.\n\n423\n00:22:53.719 --> 00:22:56.124\nThis is the serial number,\nwhich I don't really care about,\n\n424\n00:22:56.124 --> 00:22:57.569\nso it's superfluous information.\n\n425\n00:22:57.569 --> 00:23:00.970\nAnd see how you've kind of gone\nthrough a logical process?\n\n426\n00:23:00.970 --> 00:23:05.730\nI've used AWK to reformat that data\ninto something a little more readable.\n\n427\n00:23:05.730 --> 00:23:11.520\nSo if I had something that's typically\nconsumed by a computer for whatever it is,\n\n428\n00:23:11.520 --> 00:23:16.960\nmaybe a database, and I want it to\nbe easier read by a human now so\n\n429\n00:23:16.960 --> 00:23:21.840\nthey can consume it, I might use AWK or\ngawk to make that happen, reformatting\n\n430\n00:23:21.840 --> 00:23:25.860\nit into a report, generating that report\nin a much easier readable format.\n\n431\n00:23:25.860 --> 00:23:30.462\nSo just that is the example of why we\n\n432\n00:23:30.462 --> 00:23:34.763\nwould use AWK, okay, or gawk.\n\n433\n00:23:34.763 --> 00:23:35.799\nAnything else I wanna do?\n\n434\n00:23:35.799 --> 00:23:37.003\nI've got another script file.\n\n435\n00:23:37.003 --> 00:23:38.635\nLet's take a look at it.\n\n436\n00:23:38.635 --> 00:23:42.443\nMulti-line commands,\ndropping down to that secondary prompt,\n\n437\n00:23:42.443 --> 00:23:44.380\nwe can break it up like that.\n\n438\n00:23:44.380 --> 00:23:49.490\nSo if we cat gawk_script2.gawk,\nyou'll notice\n\n439\n00:23:49.490 --> 00:23:54.491\nnow it's not just on one\nline like what we saw here.\n\n440\n00:23:54.491 --> 00:23:55.467\nI broke it up.\n\n441\n00:23:55.467 --> 00:23:57.540\nWe've got this, we've got that.\n\n442\n00:23:57.540 --> 00:23:59.642\nNotice I didn't put that NR in there,\nso what's it gonna do?\n\n443\n00:23:59.642 --> 00:24:01.360\nIt's gonna give me that freaky output.\n\n444\n00:24:01.360 --> 00:24:03.290\nI actually took it out before the show, so\n\n445\n00:24:03.290 --> 00:24:07.180\nthat you guys could see what it\nlooks like if I didn't use that.\n\n446\n00:24:07.180 --> 00:24:09.062\nIt works, it just get's a little crazy.\n\n447\n00:24:09.062 --> 00:24:14.103\nSo, gawk -f: -f gawk strip,\n\n448\n00:24:14.103 --> 00:24:18.598\nI wanna call it strip so bad.\n\n449\n00:24:18.598 --> 00:24:24.490\n[LAUGH] script2.gawk,\nand then inventory.txt.\n\n450\n00:24:24.490 --> 00:24:27.664\nAnd we'll see how this asset number,\nit kinda freaks out.\n\n451\n00:24:27.664 --> 00:24:34.000\nAnd, of course, it inserts uses a, so\nto pretty that up, I'll go in there.\n\n452\n00:24:37.550 --> 00:24:41.962\nCan't do it, script2., like so and\n\n453\n00:24:41.962 --> 00:24:46.690\nI would just add that line nr&gt;2 like so.\n\n454\n00:24:46.690 --> 00:24:48.960\n&gt;&gt; So Daniel,\nbefore you get too much further,\n\n455\n00:24:48.960 --> 00:24:50.560\nI just wanna make sure I understand.\n\n456\n00:24:50.560 --> 00:24:57.150\nSo nr greater than 2, I wanna skip\nthe first two lines and then do stuff.\n\n457\n00:24:57.150 --> 00:24:58.740\nI've been thinking about this.\n\n458\n00:24:58.740 --> 00:25:04.150\nI'm almost thinking of it like\na registers or something like that.\n\n459\n00:25:04.150 --> 00:25:06.840\nSo anything that's greater than\nthe first two lines, do a thing.\n\n460\n00:25:06.840 --> 00:25:09.530\n&gt;&gt; You got it,\nstart after those first two lines.\n\n461\n00:25:09.530 --> 00:25:15.380\nThat's why we have to have that if I\nwanna skip that asset serial number and\n\n462\n00:25:15.380 --> 00:25:17.080\nuser stuff, plus those dash lines.\n\n463\n00:25:17.080 --> 00:25:18.760\nWe wanna remove that format.\n\n464\n00:25:18.760 --> 00:25:21.020\nI don't even want to work with it at all,\n\n465\n00:25:21.020 --> 00:25:24.580\nI just kinda want it shuck it to the side,\njust start at this line number.\n\n466\n00:25:25.590 --> 00:25:26.800\nThat's what we're doing with them.\n\n467\n00:25:26.800 --> 00:25:31.610\nI'll just clear the screen out so I can\nmake that, see that a little easier here.\n\n468\n00:25:31.610 --> 00:25:35.010\nSo now I'll just rerun the scripts,\nwhich is there we go, right there.\n\n469\n00:25:35.010 --> 00:25:38.560\nAnd now, you know what?\n\n470\n00:25:38.560 --> 00:25:42.390\nI made a little snafu,\na little syntactical error in my script.\n\n471\n00:25:42.390 --> 00:25:44.850\nLet's go back in, Nano, what is it?\n\n472\n00:25:44.850 --> 00:25:48.440\nGawk script2.gawk, here we go.\n\n473\n00:25:49.830 --> 00:25:52.822\nAgain, you got to put\nthese on the same line.\n\n474\n00:25:52.822 --> 00:25:56.820\nNR- 2 and the open curly brace\nneed to be on the same line.\n\n475\n00:25:56.820 --> 00:26:00.490\nThat's the problem,\nI do that all the time.\n\n476\n00:26:00.490 --> 00:26:02.159\nI'm very forgetful when\nit comes to these things.\n\n477\n00:26:02.159 --> 00:26:04.022\nAll right, let's try that.\n\n478\n00:26:04.022 --> 00:26:07.790\nOne more time, there we go.\n\n479\n00:26:07.790 --> 00:26:09.490\nThat's the output I'm looking for.\n\n480\n00:26:09.490 --> 00:26:13.370\nAll that to say you can\ndo multiline scripts.\n\n481\n00:26:13.370 --> 00:26:17.310\nJust be aware that if you're getting\nstrange output, you may have to go in and\n\n482\n00:26:17.310 --> 00:26:20.380\nadjust what lies where,\nget that syntax just right.\n\n483\n00:26:20.380 --> 00:26:21.190\nAnd of course,\n\n484\n00:26:21.190 --> 00:26:24.760\nspending some time in the manual is just\ngonna help you out that very much so.\n\n485\n00:26:25.810 --> 00:26:29.240\nAll right Justin,\nI got one more thing, one more thing.\n\n486\n00:26:29.240 --> 00:26:34.910\nIt's a little thing we like\nto call begin and end, okay?\n\n487\n00:26:34.910 --> 00:26:40.550\nSo basically what I'm doing is,\ninside of my script files I can say begin,\n\n488\n00:26:40.550 --> 00:26:45.610\nwhich process data before this, right?\n\n489\n00:26:45.610 --> 00:26:47.860\nBegin here or\nbegin processing at this point.\n\n490\n00:26:47.860 --> 00:26:52.640\nAnd then at the end, you say I wanna\nprocess data after that, okay?\n\n491\n00:26:52.640 --> 00:26:55.410\nSo there's kind of like\nchunking things out.\n\n492\n00:26:55.410 --> 00:26:58.000\nBut if we take a look at it,\nit'd probably make a whole lot more sense.\n\n493\n00:26:58.000 --> 00:27:01.180\nSo let's do this, I will cat,\nfirst I'll clear.\n\n494\n00:27:01.180 --> 00:27:07.317\nCat gawk_script3.gawk.\n\n495\n00:27:07.317 --> 00:27:12.280\nSo we're beginning here with\nthe gawk script at this line.\n\n496\n00:27:12.280 --> 00:27:17.815\nOpen curly brace,\nprint list of users and their assets,\n\n497\n00:27:17.815 --> 00:27:22.427\nprint username-t,\nwhich is a tab character,\n\n498\n00:27:22.427 --> 00:27:27.290\nthen asset prints some dashes for\nvisual effect.\n\n499\n00:27:27.290 --> 00:27:28.910\nAlso with a tab in between them.\n\n500\n00:27:28.910 --> 00:27:32.310\nChanging the field separator and\nthen closing that out.\n\n501\n00:27:32.310 --> 00:27:38.060\nThen I've got this right here, nr2, bing,\nstarting a new set of things I wanna do.\n\n502\n00:27:38.060 --> 00:27:41.750\nSo I'm doing this first,\nthen I'm doing this, and then I'm ending.\n\n503\n00:27:41.750 --> 00:27:45.010\nAnd then after that I wanna\nprint inventory complete.\n\n504\n00:27:45.010 --> 00:27:50.300\nSo I've got kind of a boundary, a marker,\nto say this is where I want you\n\n505\n00:27:50.300 --> 00:27:55.180\nto start and end, and then anything after\nthat end, start doing anything, okay?\n\n506\n00:27:55.180 --> 00:27:57.980\nSo you might want to chunk those\nthings out from time to time.\n\n507\n00:27:57.980 --> 00:28:00.830\nAnd you can use beginning and\nend to do that.\n\n508\n00:28:00.830 --> 00:28:05.870\nSo if I run this script, if I say,\n\n509\n00:28:05.870 --> 00:28:12.350\nit is gawk, and\nwe will use our -F like so.\n\n510\n00:28:12.350 --> 00:28:14.271\nChange the field separator, -F.\n\n511\n00:28:14.271 --> 00:28:22.720\nRead that file on,\nwhich is gawk_script3.gawk inventory.txt.\n\n512\n00:28:22.720 --> 00:28:24.288\nNow you see a little more formatting,\n\n513\n00:28:24.288 --> 00:28:26.720\nand obviously I've got some\nextra tabbing going on.\n\n514\n00:28:26.720 --> 00:28:28.350\nAnd I was looking at this\njust before the show and\n\n515\n00:28:28.350 --> 00:28:31.120\nsaid, I think it's because of\nthe length of these names.\n\n516\n00:28:31.120 --> 00:28:35.270\nIt's adding an extra tab space in there,\nand\n\n517\n00:28:35.270 --> 00:28:37.190\nI'll have to go in there and\nmake a modification for that.\n\n518\n00:28:37.190 --> 00:28:40.410\nBut, for the most part, I'm getting\nexactly the output I'm looking for.\n\n519\n00:28:40.410 --> 00:28:44.780\nI'm not gonna spend too much time for\na demonstration to clean it up too nicely.\n\n520\n00:28:44.780 --> 00:28:48.331\nBut I get this user nameand asset\nseparated by tabs just like I like,\n\n521\n00:28:48.331 --> 00:28:50.590\nunderlined with these little dash lines.\n\n522\n00:28:50.590 --> 00:28:56.709\nAnd then grabbing $3 and $1, separating\nthem by a tab and formatting them.\n\n523\n00:28:56.709 --> 00:28:59.544\nAgain, generating a report\nusing multiline stuff, and\n\n524\n00:28:59.544 --> 00:29:01.443\nworking with that beginning and end.\n\n525\n00:29:01.443 --> 00:29:05.170\nAnd then, of course, after that\nI'd print out inventory complete.\n\n526\n00:29:05.170 --> 00:29:06.035\n&gt;&gt; One quick question about this script.\n\n527\n00:29:06.035 --> 00:29:08.260\n&gt;&gt; No [LAUGH].\n&gt;&gt; You changed the field separator.\n\n528\n00:29:08.260 --> 00:29:10.122\nWell, I'm gonna ask it,\nI don't know if you're gonna answer it.\n\n529\n00:29:10.122 --> 00:29:13.891\nSo field separator to\na colon in the begin,\n\n530\n00:29:13.891 --> 00:29:19.140\ndoes that mean we don't need\nthe -F when we run our script?\n\n531\n00:29:19.140 --> 00:29:22.775\n&gt;&gt; I mean, probably not,\nI was probably doing that out of habit.\n\n532\n00:29:22.775 --> 00:29:26.987\nHere I think they are being\nseparated out by tabs, so\n\n533\n00:29:26.987 --> 00:29:29.590\nthat might not be an issue here.\n\n534\n00:29:29.590 --> 00:29:35.620\nLet me just run it and\nsee what happens Yeah,\n\n535\n00:29:35.620 --> 00:29:40.960\nit was superfluous, I've gotten so used\nto typing that in in my demonstrations.\n\n536\n00:29:40.960 --> 00:29:43.700\nIt's repetitive,\nit breeds retention, right?\n\n537\n00:29:43.700 --> 00:29:47.704\n&gt;&gt; Yeah, and also when you're changing\nthe field separator to the same thing, so\n\n538\n00:29:47.704 --> 00:29:49.517\nit doesn't cause any issues here.\n\n539\n00:29:49.517 --> 00:29:53.460\nNow, my final question,\nI promise, I promise.\n\n540\n00:29:53.460 --> 00:29:54.150\n&gt;&gt; Make it quick [LAUGH].\n\n541\n00:29:54.150 --> 00:29:56.850\n&gt;&gt; Begin and end, does it matter?\n\n542\n00:29:56.850 --> 00:30:01.550\nThose are like pre and post tasks, or\nheader footer if you're doing reporting.\n\n543\n00:30:01.550 --> 00:30:04.490\nDoes it matter if begin and\nend are both at the top,\n\n544\n00:30:04.490 --> 00:30:06.790\nand then the rest of your\nscripts at the bottom?\n\n545\n00:30:06.790 --> 00:30:10.000\nOr does the arrangement\nwithin a gawk_script matter?\n\n546\n00:30:10.000 --> 00:30:11.866\n&gt;&gt; I think the arrangement in\na gawk_script is gonna matter.\n\n547\n00:30:11.866 --> 00:30:17.054\nI want these things to run, then I wanna\nbegin certain gawk functionality here,\n\n548\n00:30:17.054 --> 00:30:21.320\nwanna end it here, and\nthen I wanna run other things after that.\n\n549\n00:30:21.320 --> 00:30:24.028\nSo that's the whole purpose\nof saying begin and end.\n\n550\n00:30:24.028 --> 00:30:28.549\nI have pre-script stuff,\nI have post-script stuff,\n\n551\n00:30:28.549 --> 00:30:32.243\nand pre-script is gonna come before begin.\n\n552\n00:30:32.243 --> 00:30:34.380\nPost-script is gonna come after end, so\n\n553\n00:30:34.380 --> 00:30:36.470\njust keep that in mind,\nif that answers your question.\n\n554\n00:30:36.470 --> 00:30:37.100\n&gt;&gt; All right, so\n\n555\n00:30:37.100 --> 00:30:41.000\nwe need to make a gawk sandwich whenever\nwe're making our gawk scripts, right?\n\n556\n00:30:41.000 --> 00:30:47.517\nBread bread, or pre post, and then all of\nthe bologna in the middle, all the ham.\n\n557\n00:30:47.517 --> 00:30:50.091\nWell, that was a wonderful intro to gawk,\n\n558\n00:30:50.091 --> 00:30:52.960\nbecause I can definitely\nsee the utility here.\n\n559\n00:30:52.960 --> 00:30:57.674\nIt actually has made me a little less\nafraid of messing things up when I copy\n\n560\n00:30:57.674 --> 00:31:00.800\nand paste those other\ncommands that I find.\n\n561\n00:31:00.800 --> 00:31:02.770\nAnd, well,\nhopefully you learned something as well.\n\n562\n00:31:02.770 --> 00:31:05.530\nBut we've got more advanced shell\nscripting coming your way, but for\n\n563\n00:31:05.530 --> 00:31:07.412\nthis one, we're gonna go ahead and\ncut it out.\n\n564\n00:31:07.412 --> 00:31:11.310\nSo signing off for ITPro.TV,\nI've been your host, Justin Dennison.\n\n565\n00:31:11.310 --> 00:31:12.137\n&gt;&gt; I'm Daniel Lowrie.\n\n566\n00:31:12.137 --> 00:31:13.491\n&gt;&gt; And we'll see you next time.\n\n567\n00:31:13.491 --> 00:31:20.360\n[MUSIC]\n\n568\n00:31:20.360 --> 00:31:23.625\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "238054259"
        }
      ],
      "title": "sed and awk"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin look at working with Regular Expressions, mostly in a sed/gawk context. Here they will explore RegEx types, patterns, and special characters including the dot(.), escape, and Anchors. They also discuss using character classes.",
          "length": "1900",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-1-regular_expressions-103117.00_31_28_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-1-regular_expressions-103117.00_31_28_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-1-regular_expressions-103117.00_31_28_09.Still001-sm.jpg",
          "title": "Regular Expressions",
          "transcript": "WEBVTT\n\n1\n00:00:00.310 --> 00:00:01.240\nWelcome to ITProTV.\n\n2\n00:00:01.240 --> 00:00:02.442\nI'm your host, Don Pezet.\n\n3\n00:00:02.442 --> 00:00:08.280\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.280 --> 00:00:11.862\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:11.862 --> 00:00:16.330\n&gt;&gt; Greetings everyone, and welcome back\nto another exciting episode of ITProTV.\n\n6\n00:00:16.330 --> 00:00:17.480\nI'm your host Justin Dennison.\n\n7\n00:00:17.480 --> 00:00:20.970\nAnd well you asked for it, so we're\nbringing it more advanced shell scripting,\n\n8\n00:00:20.970 --> 00:00:23.500\nin particular we're gonna be\nlooking at regular expressions.\n\n9\n00:00:23.500 --> 00:00:24.630\nI don't know about you,\n\n10\n00:00:24.630 --> 00:00:27.930\nbut I kinda quake in my boots when I\nhear those two words put together.\n\n11\n00:00:27.930 --> 00:00:31.030\nBut luckily we have the man with the plan\nin the studio today, Mr. Daniel Lowrie.\n\n12\n00:00:31.030 --> 00:00:31.798\nHow are you doing today, Daniel?\n\n13\n00:00:31.798 --> 00:00:33.020\n&gt;&gt; Doing fantastic, Justin.\n\n14\n00:00:33.020 --> 00:00:35.410\nGlad to be back here in\nthe studio with you good folks.\n\n15\n00:00:35.410 --> 00:00:36.430\nAlways a good time, right?\n\n16\n00:00:36.430 --> 00:00:41.090\nWe're trying to get that scripting\nknowledge up to fruition so\n\n17\n00:00:41.090 --> 00:00:43.370\nthat we can jump into things,\nmake things happen.\n\n18\n00:00:43.370 --> 00:00:46.735\nAnd from time to time,\nas my man Justin has already alluded to,\n\n19\n00:00:46.735 --> 00:00:50.500\nwell we're gonna need to use\nsome regular expressions.\n\n20\n00:00:50.500 --> 00:00:52.730\nAnd if you've never\nworked with them before,\n\n21\n00:00:52.730 --> 00:00:55.910\nhopefully you have up to this point,\nactually if you've watched Don and\n\n22\n00:00:55.910 --> 00:00:59.660\nI's series on just Linux command line\nstuff, we covered regular expression.\n\n23\n00:00:59.660 --> 00:01:01.260\nWe covered it actually pretty well.\n\n24\n00:01:01.260 --> 00:01:03.290\nI just kinda want to\nre-iterate some of that stuff.\n\n25\n00:01:03.290 --> 00:01:06.808\nTake a look at it in the context of\nsome of the things that we're doing.\n\n26\n00:01:06.808 --> 00:01:11.940\nSpecifically sed and awk, maybe a couple\nof grep statements in there for flavor.\n\n27\n00:01:11.940 --> 00:01:15.870\nBut make that a little more seeable,\nhow that works.\n\n28\n00:01:15.870 --> 00:01:19.501\nBecause when it comes to regular\nexpression, it's an interesting beast,\n\n29\n00:01:19.501 --> 00:01:20.588\nto be honest with you.\n\n30\n00:01:20.588 --> 00:01:25.532\nThere are programs that handle regular\nexpression, like I said, like awk,\n\n31\n00:01:25.532 --> 00:01:30.340\nor gawk, we're using specifically,\nbut they might not use everything.\n\n32\n00:01:30.340 --> 00:01:32.470\nOr they might do it a different way,\nall right?\n\n33\n00:01:32.470 --> 00:01:36.640\nSo I wanna kinda give you an idea of how\nthis might look out practically using\n\n34\n00:01:36.640 --> 00:01:41.820\nthose different programs to, mostly said,\na couple of gawk statements so\n\n35\n00:01:41.820 --> 00:01:45.060\nwe can see regex inside of them, right?\n\n36\n00:01:45.060 --> 00:01:47.510\nSo just kinda continuing down that road.\n\n37\n00:01:47.510 --> 00:01:51.530\nAnd again, reiterating some of\nthe knowledge, hopefully you already have.\n\n38\n00:01:51.530 --> 00:01:55.337\nIf you don't have any knowledge of regular\nexpression, I encourage you to go back,\n\n39\n00:01:55.337 --> 00:01:58.820\nwatch that show that Don and I did,\nback in the Linux command line series, and\n\n40\n00:01:58.820 --> 00:02:01.820\nthen come back to here and watch this\nto see how it works out in sed and\n\n41\n00:02:01.820 --> 00:02:04.170\ngive you a little more context to it.\n\n42\n00:02:04.170 --> 00:02:06.980\nBut it's okay,\nyou could probably follow along as well,\n\n43\n00:02:06.980 --> 00:02:12.340\nit might be just having your head\nabove water at that point, okay?\n\n44\n00:02:12.340 --> 00:02:17.168\nAs regex and Justin, like he said,\nquaking in your boots,\n\n45\n00:02:17.168 --> 00:02:21.427\nall right, can be very technical and\nhas a lot to it.\n\n46\n00:02:21.427 --> 00:02:25.567\nThere's a lot of moving parts and unless\nyou're doing it on a regular basis this is\n\n47\n00:02:25.567 --> 00:02:29.587\nthe kind of thing where you're printing\nyourself a cheat sheet, stamping it on\n\n48\n00:02:29.587 --> 00:02:33.950\nthe cubical or your office wall, put it\non a post-it note next to your monitor.\n\n49\n00:02:33.950 --> 00:02:36.820\nWhatever the case is, have a text\nfile that you can jump to easily.\n\n50\n00:02:36.820 --> 00:02:41.916\nLook at a man page, some website that\nyou've bookmarked, you're gonna wanna\n\n51\n00:02:41.916 --> 00:02:46.723\ndo that because it goes like, how do\nI make that regular expression again?\n\n52\n00:02:46.723 --> 00:02:49.390\nJustin, am I preaching to the choir here?\n\n53\n00:02:49.390 --> 00:02:51.080\n&gt;&gt; No, I'm telling you Daniel,\n\n54\n00:02:51.080 --> 00:02:54.872\nI almost feel like I'm on these\nlittle tiny islands that I know.\n\n55\n00:02:54.872 --> 00:02:58.010\nAnd then the rest of it is just\nall this continent where I'm like,\n\n56\n00:02:58.010 --> 00:02:59.040\nthat is the unknown.\n\n57\n00:02:59.040 --> 00:03:00.580\nWe're gonna stay away from that.\n\n58\n00:03:00.580 --> 00:03:03.883\nBecause the only regular\nexpressions that I know\n\n59\n00:03:03.883 --> 00:03:07.923\nare things that come up\nsemi-frequently that I need to do.\n\n60\n00:03:07.923 --> 00:03:11.861\nBut the rest of it I'm like man,\nthat is right at\n\n61\n00:03:11.861 --> 00:03:16.890\nthe precipice of my cognitive\nability to fully understand.\n\n62\n00:03:16.890 --> 00:03:21.494\nSo they're incredibly powerful, and\nthey're handy, and the more you know,\n\n63\n00:03:21.494 --> 00:03:23.979\nprobably the better off you're gonna be.\n\n64\n00:03:23.979 --> 00:03:27.649\nBut it's one of those things where\nI pick and choose what I know.\n\n65\n00:03:27.649 --> 00:03:29.557\nAnd I know these few little pieces really,\n\n66\n00:03:29.557 --> 00:03:32.310\nreally well but\nthat's because that's what I use often.\n\n67\n00:03:32.310 --> 00:03:34.240\n&gt;&gt; I feel like we're wizards, right?\n\n68\n00:03:34.240 --> 00:03:39.200\nAnd while a wizard does have a standard\ncompliment of spells that he might cast,\n\n69\n00:03:39.200 --> 00:03:41.670\nthere are some that he has to\ngo to the spell book for, right,\n\n70\n00:03:41.670 --> 00:03:43.225\nand he's gotta look it up.\n\n71\n00:03:43.225 --> 00:03:47.490\nRegex typically has been that for\nat least me, obviously for Justin as well.\n\n72\n00:03:47.490 --> 00:03:50.450\nAnd hopefully for you it is another\ntool we can put in your bag but\n\n73\n00:03:50.450 --> 00:03:53.260\nyou don't have to become the master of it,\nthat is not the goal of today's show.\n\n74\n00:03:53.260 --> 00:03:57.615\nToday's show is just to kinda get you\nseeing how it works out in some practical\n\n75\n00:03:57.615 --> 00:04:01.507\nways and go yeah, yeah,\nthat's right, I've seen that before.\n\n76\n00:04:01.507 --> 00:04:07.578\nAnd just give you some examples, we could\nliterally do a regex series, right?\n\n77\n00:04:07.578 --> 00:04:11.380\nWe can do a regex series quite easily,\nas a matter of fact,\n\n78\n00:04:11.380 --> 00:04:13.410\nbecause it is very expansive.\n\n79\n00:04:13.410 --> 00:04:16.042\nSo just keep that in mind, if you\nstruggle with it, welcome to the club,\n\n80\n00:04:16.042 --> 00:04:17.303\nyou'll get your card on Tuesday.\n\n81\n00:04:17.303 --> 00:04:19.930\nMeetings are on Thursdays;\nplease pay your dues.\n\n82\n00:04:19.930 --> 00:04:21.870\nThat being said, let's go ahead and\n\n83\n00:04:21.870 --> 00:04:26.686\ndive into all this hooplah about regex,\nand see how it works itself out.\n\n84\n00:04:26.686 --> 00:04:28.660\nSo let's jump into my computer here.\n\n85\n00:04:28.660 --> 00:04:31.790\nLet's talk about some of\nthe things like what is regex?\n\n86\n00:04:31.790 --> 00:04:32.590\nBasically when we say,\n\n87\n00:04:32.590 --> 00:04:36.360\nregular expression, we're talking\nabout pattern matching, right?\n\n88\n00:04:36.360 --> 00:04:39.726\nWe're talking about this is\na pattern I want you to find and\n\n89\n00:04:39.726 --> 00:04:41.730\nI want you to find it here, right?\n\n90\n00:04:41.730 --> 00:04:46.165\nAnd we can manipulate patterns that\nwe want to find using these regular\n\n91\n00:04:46.165 --> 00:04:47.149\nexpressions.\n\n92\n00:04:47.149 --> 00:04:50.253\nThey also have special characters\nthat we're going to use, and\n\n93\n00:04:50.253 --> 00:04:52.620\nwe're gonna take a look\nat that in just a second.\n\n94\n00:04:52.620 --> 00:04:54.590\nWe can negate those special characters,\n\n95\n00:04:54.590 --> 00:04:58.470\ntreat them as regular characters,\nall sorts of good stuff.\n\n96\n00:04:58.470 --> 00:05:01.540\nI think that's probably a good place to\nstart is let's take a look of some of\n\n97\n00:05:01.540 --> 00:05:03.800\nthose special characters\nwe might run into.\n\n98\n00:05:03.800 --> 00:05:10.880\nSo let me cat this little file we have\nhere, cat regex special_chart.txt.\n\n99\n00:05:10.880 --> 00:05:14.607\nJust kind of made this for you guys\nto give you quick and dirty, right?\n\n100\n00:05:14.607 --> 00:05:18.213\nNow, interesting thing is is that you\nhave two types of regular expression.\n\n101\n00:05:18.213 --> 00:05:20.170\nYou have the basic regular\nexpression engine and\n\n102\n00:05:20.170 --> 00:05:22.990\nyou also have the extended\nregular expression engine.\n\n103\n00:05:22.990 --> 00:05:25.294\nAnd some of theses characters\nfollow with in the basic and\n\n104\n00:05:25.294 --> 00:05:26.500\nfollow within the extended.\n\n105\n00:05:26.500 --> 00:05:32.561\nAnd that's great you just gotta know this,\nif you try a regex and it doesn't work,\n\n106\n00:05:32.561 --> 00:05:37.690\nyou may have to add a flag or\nsomething to whatever it is you're using.\n\n107\n00:05:37.690 --> 00:05:41.351\nGrep is a prime example,\nthere's egrep or grep -E.\n\n108\n00:05:41.351 --> 00:05:45.674\nAnd that's letting grep know you want to\nmove into the extended functionality of\n\n109\n00:05:45.674 --> 00:05:46.891\nregular expression.\n\n110\n00:05:46.891 --> 00:05:49.909\nSo it's that extended regular\nexpression engine, right?\n\n111\n00:05:49.909 --> 00:05:53.210\nSo just know there's two engines,\nit's not like this is an exam or anything.\n\n112\n00:05:53.210 --> 00:05:54.360\nYou don't have to memorize that stuff.\n\n113\n00:05:54.360 --> 00:05:56.817\nJust be aware that that is the case.\n\n114\n00:05:56.817 --> 00:06:01.570\nAlso, case-sensitive, right,\nyou're in a Linux environment.\n\n115\n00:06:01.570 --> 00:06:05.300\nYou might be in a Windows environment,\nit does do regular expression as well, but\n\n116\n00:06:05.300 --> 00:06:07.640\nprobably if we're looking\nat shell scripting and\n\n117\n00:06:07.640 --> 00:06:10.320\nLinux [LAUGH] you're gonna be there,\nright?\n\n118\n00:06:10.320 --> 00:06:13.590\nSo just keep that in mind in\nthe case-sensitivity is a factor.\n\n119\n00:06:13.590 --> 00:06:17.560\nWe also wanna start off with\nsomething simple, right?\n\n120\n00:06:17.560 --> 00:06:20.290\nI don't wanna give you guys\ntoo much out of the gate.\n\n121\n00:06:20.290 --> 00:06:23.910\nWe're gonna work our way into\na little more difficult things,\n\n122\n00:06:23.910 --> 00:06:25.730\nbut not too crazy, right?\n\n123\n00:06:25.730 --> 00:06:29.800\nSo a simple text for text comparison.\n\n124\n00:06:29.800 --> 00:06:34.080\nI want you to find this string\nof text inside of this document.\n\n125\n00:06:34.080 --> 00:06:36.790\nAnd when you do, do whatever,\nright, whatever the case may be.\n\n126\n00:06:36.790 --> 00:06:39.643\nIf it's grep, grep out the line,\nshow me the line.\n\n127\n00:06:39.643 --> 00:06:44.392\nSed does basically the exact same thing\nwith some of it's functionality, right?\n\n128\n00:06:44.392 --> 00:06:48.412\nSo what do you wanna do with it at that\npoint once I find this thing, all right?\n\n129\n00:06:48.412 --> 00:06:52.344\nSo let's start there, let's do simple,\nregular expression text for\n\n130\n00:06:52.344 --> 00:06:53.480\ntext type of stuff.\n\n131\n00:06:53.480 --> 00:06:55.840\nI'm just gonna echo a statement and\n\n132\n00:06:55.840 --> 00:06:59.309\nthen we'll use sed to regex\nsome stuff out, right?\n\n133\n00:06:59.309 --> 00:07:05.586\nSo let's do that, so\nI'm just gonna echo, let's see here,\n\n134\n00:07:05.586 --> 00:07:11.647\nI'll just say \"shell scripting\nis fun\" like so, right?\n\n135\n00:07:11.647 --> 00:07:17.890\nSimple, simple, simple, I'm gonna pipe\nthat into sed, and I will do a -n.\n\n136\n00:07:17.890 --> 00:07:22.564\nCuz as you remember -n tells\nus do not print the line.\n\n137\n00:07:22.564 --> 00:07:25.335\nit's weird, I know,\nI'm just showing you how regex works.\n\n138\n00:07:25.335 --> 00:07:29.050\nSo these are very contrived\nshoehorned things.\n\n139\n00:07:29.050 --> 00:07:32.424\nBecause unless you have actual\ndata that you're working with and\n\n140\n00:07:32.424 --> 00:07:34.691\nyou find yourself going\nI need to find this,\n\n141\n00:07:34.691 --> 00:07:38.148\nit's very difficult to come up\nwith a practical example for that.\n\n142\n00:07:38.148 --> 00:07:41.370\n&gt;&gt; And regular expressions\nare kind of driven by that need.\n\n143\n00:07:41.370 --> 00:07:44.870\nI need to find this particular pattern or\nthis little chunk.\n\n144\n00:07:44.870 --> 00:07:48.310\nI always wanna carve these out, and\nyeah I guess you could do a find and\n\n145\n00:07:48.310 --> 00:07:50.030\nreplace in some other text editor.\n\n146\n00:07:50.030 --> 00:07:54.873\nOr a lot of times the patterns are a\nlittle more complicated than just text for\n\n147\n00:07:54.873 --> 00:07:55.939\ntext matching.\n\n148\n00:07:55.939 --> 00:08:00.144\nSo, this is something that regular\nexpression is definitely driven by need,\n\n149\n00:08:00.144 --> 00:08:01.299\nat least for me it is.\n\n150\n00:08:01.299 --> 00:08:04.179\n&gt;&gt; Yeah, I mean, this is basically\nthe functionality of grep.\n\n151\n00:08:04.179 --> 00:08:05.742\nIt's what we typically use grep for.\n\n152\n00:08:05.742 --> 00:08:07.866\nBut we've looked at sed.\n\n153\n00:08:07.866 --> 00:08:09.693\nWe want to keep that mojo going.\n\n154\n00:08:09.693 --> 00:08:13.450\nSo I'm shoe horning it into sed.\n\n155\n00:08:13.450 --> 00:08:17.600\nI love how Rob here says I'm a Hollywood\nproducer, and I've got to make something.\n\n156\n00:08:17.600 --> 00:08:19.960\nI've got to have my big mechanical\nspider in my production here.\n\n157\n00:08:21.030 --> 00:08:24.740\nAnd well, we're talking about\nthe drama about death or something.\n\n158\n00:08:24.740 --> 00:08:26.064\nWell, big mechanical spiders kill.\n\n159\n00:08:26.064 --> 00:08:29.030\n[LAUGH] You see how I've just\nkind of got to make it work.\n\n160\n00:08:29.030 --> 00:08:32.708\nSo that's what we're doing,\nkeep the sed mojo going like I said.\n\n161\n00:08:32.708 --> 00:08:37.890\nSo let's sed that into and\nwe'll just look for shell like that.\n\n162\n00:08:37.890 --> 00:08:39.660\nAnd we'll just print any\nline that has shell.\n\n163\n00:08:39.660 --> 00:08:42.920\nWell, it's only one line, so there you go.\n\n164\n00:08:42.920 --> 00:08:46.880\nDon't forget to close that out and\ngo ahead and fire it off.\n\n165\n00:08:46.880 --> 00:08:49.450\nAnd, you see,\nit prints out the line right here.\n\n166\n00:08:49.450 --> 00:08:51.210\nShell scripting is fun.\n\n167\n00:08:51.210 --> 00:08:54.450\nSo, like I said, a very contrived way for\nme to get back to.\n\n168\n00:08:54.450 --> 00:08:56.720\nI could've just echoed this and\nit would have been fine.\n\n169\n00:08:56.720 --> 00:08:59.360\nBut, I'm trying to show\nyou what happened here.\n\n170\n00:08:59.360 --> 00:09:04.230\nThis shell business right here,\nthat was a regular expression.\n\n171\n00:09:04.230 --> 00:09:07.615\nI gave it a pattern to look forward,\nand found it.\n\n172\n00:09:07.615 --> 00:09:11.970\nAnd when you do find that pattern,\nprint the line that had that pattern.\n\n173\n00:09:11.970 --> 00:09:17.294\nSo this was a 130 line text file,\nand I was looking for shell.\n\n174\n00:09:17.294 --> 00:09:20.557\nI could use sed to find that because\nit has that regular expression\n\n175\n00:09:20.557 --> 00:09:22.885\nof capabilities of\nsimple pattern matching.\n\n176\n00:09:22.885 --> 00:09:25.150\nAnd we've seen them, very simple.\n\n177\n00:09:25.150 --> 00:09:26.260\nLet's do another one,\n\n178\n00:09:26.260 --> 00:09:31.570\nreally quick [INAUDIBLE] just so you can\nsee a little more variance, shall we say.\n\n179\n00:09:31.570 --> 00:09:39.290\nBring this up, I'll do this, I'll say l\nspace, and see, it does the same thing.\n\n180\n00:09:39.290 --> 00:09:46.060\nSo, it looked for ell space sc,\nsince space was interpreted as a space.\n\n181\n00:09:46.060 --> 00:09:48.070\nN found the line, and printed it out.\n\n182\n00:09:48.070 --> 00:09:49.390\nDid exactly what it's supposed to do.\n\n183\n00:09:50.510 --> 00:09:54.020\nNow, going back to that case sensitivity,\ndon't forget about that, right?\n\n184\n00:09:54.020 --> 00:09:57.620\nWhat if we did this right here?\n\n185\n00:09:57.620 --> 00:10:02.700\nI said, look for shell,\nbut this is capital S?\n\n186\n00:10:02.700 --> 00:10:03.410\nWhat happens?\n\n187\n00:10:03.410 --> 00:10:05.030\nWell it doesn't a line, right?\n\n188\n00:10:05.030 --> 00:10:06.850\nRemember, case sensitivity's important.\n\n189\n00:10:06.850 --> 00:10:10.930\nSo if you look for lowercase letters,\nshell, and it doesn't find it,\n\n190\n00:10:10.930 --> 00:10:14.807\nit's not gonna return a line because\nit did not match that pattern.\n\n191\n00:10:14.807 --> 00:10:17.070\nEven though to us, we'll go,\nit's the same thing.\n\n192\n00:10:17.070 --> 00:10:19.910\nNot to regular expressions,\nso keep that in mind.\n\n193\n00:10:19.910 --> 00:10:23.771\n&gt;&gt; And Daniel, this seems to be the\ndriving factor for learning some more of\n\n194\n00:10:23.771 --> 00:10:27.840\nthese advance regular expression\nportions as a text for text match.\n\n195\n00:10:27.840 --> 00:10:31.383\nIf I wanted to find a word that starts\nwith a capital S and a lower case s,\n\n196\n00:10:31.383 --> 00:10:35.346\nI gotta do both searches and then figure\nout, okay, I need to put this together\n\n197\n00:10:35.346 --> 00:10:39.608\nand, well, wouldn't it be nicer if there\nwere some way to say, I wanna find capital\n\n198\n00:10:39.608 --> 00:10:43.450\nS or lower case s or some of those other\nones, cuz I noticed there's a bully in\n\n199\n00:10:43.450 --> 00:10:47.220\norder there, but maybe I'm still\nthundering again ahead of ourselves.\n\n200\n00:10:47.220 --> 00:10:49.310\n&gt;&gt; Yeah.\n&gt;&gt; But that's another driving factor for\n\n201\n00:10:49.310 --> 00:10:51.920\nme if why I even care about\nthese patterns and texting.\n\n202\n00:10:51.920 --> 00:10:54.915\n&gt;&gt; Man,\nI love the fact that he immediately saw,\n\n203\n00:10:54.915 --> 00:10:58.620\nwe're starting to see,\nthis can be very handy.\n\n204\n00:10:58.620 --> 00:11:03.200\nWhat if I want capital S shell or\nlower case s shell?\n\n205\n00:11:03.200 --> 00:11:04.670\nI just need to let it know that.\n\n206\n00:11:04.670 --> 00:11:06.670\nAnd we can do that with\na regular expression and\n\n207\n00:11:06.670 --> 00:11:09.435\nwe're gonna do a little\nbit of that in this show.\n\n208\n00:11:09.435 --> 00:11:11.085\nI don't know if we're going\nto get it all in on part 1.\n\n209\n00:11:11.085 --> 00:11:12.335\nBut we'll se what happens, right?\n\n210\n00:11:12.335 --> 00:11:13.995\nIf not, it will definitely be here.\n\n211\n00:11:13.995 --> 00:11:16.935\nSo, look forward to that here momentarily.\n\n212\n00:11:16.935 --> 00:11:18.225\nAll right, so let's see here.\n\n213\n00:11:18.225 --> 00:11:22.315\nLet's jump back into our little\nspecial characters here.\n\n214\n00:11:22.315 --> 00:11:23.975\nI'll just scroll up.\n\n215\n00:11:23.975 --> 00:11:27.976\nOne of the important characters here I\nwant you to notice is this one right here,\n\n216\n00:11:27.976 --> 00:11:29.171\nthe escape character,\n\n217\n00:11:29.171 --> 00:11:32.173\nif which is a backslash character\n[SOUND] like that, right?\n\n218\n00:11:32.173 --> 00:11:35.900\nAn escape character you're used to treat\nspecial characters as regular characters.\n\n219\n00:11:35.900 --> 00:11:42.008\nSometimes, I want to pattern match\nan asterisk or a question mark.\n\n220\n00:11:42.008 --> 00:11:46.910\nAnd I don't want regular expression to\ntreat it as one of its best characters.\n\n221\n00:11:46.910 --> 00:11:50.020\nIf I need to do that, well,\nI just put a backslash in front of it.\n\n222\n00:11:50.020 --> 00:11:55.760\nAnd then regex goes, it's supposed to just\nforget any magic that that might do and\n\n223\n00:11:55.760 --> 00:12:00.340\njust look at it as a typical\ncharacter like any other character.\n\n224\n00:12:00.340 --> 00:12:04.880\nSo if and when that need arises,\nI just need to go ahead and\n\n225\n00:12:04.880 --> 00:12:09.410\nright out of the gate, show you if I don't\nwant to do this, if I don't want these to\n\n226\n00:12:09.410 --> 00:12:13.320\nbe treated as special characters,\nI just throw my backslash in front of said\n\n227\n00:12:13.320 --> 00:12:18.480\nspecial character and\nit will not treat it that way, okay?\n\n228\n00:12:18.480 --> 00:12:20.550\nSo, let's see, let's move on,\nlet's move on.\n\n229\n00:12:20.550 --> 00:12:24.240\nLet's talk about these anchors,\ngood stuff.\n\n230\n00:12:24.240 --> 00:12:26.540\nYou see, anchor and anchor.\n\n231\n00:12:26.540 --> 00:12:32.290\nThe what's called a carrot, looks like\na little hat, a little dunce cap there.\n\n232\n00:12:32.290 --> 00:12:35.070\nAnd you also have the dollar sign.\n\n233\n00:12:35.070 --> 00:12:39.479\nThese are very cool things you\nwill use on a regular basis.\n\n234\n00:12:39.479 --> 00:12:42.386\nThey can be used in a couple of\ndifferent ways, as Justin and\n\n235\n00:12:42.386 --> 00:12:45.412\nI were actually fiddling with it\na little while ago we were just\n\n236\n00:12:45.412 --> 00:12:47.462\nkinda playing around with what did what.\n\n237\n00:12:47.462 --> 00:12:50.859\nWhen it comes to this anchor,\nI love this little hat,\n\n238\n00:12:50.859 --> 00:12:54.980\na little carrot,\nthat's what it's technically called.\n\n239\n00:12:54.980 --> 00:12:59.328\nLooks for the lines that starts with any\npattern that follows the anchor character.\n\n240\n00:12:59.328 --> 00:13:04.560\nSo carrot, patter, whatever that is, okay?\n\n241\n00:13:04.560 --> 00:13:10.430\nAnd, what's cool is, if I know a line\nstarts with a certain character or\n\n242\n00:13:10.430 --> 00:13:15.090\na pattern, I can say,\nwell just show me those lines, right?\n\n243\n00:13:15.090 --> 00:13:17.160\nMakes my life a whole lot easier.\n\n244\n00:13:17.160 --> 00:13:20.910\nActually, I have a file that\nI've put together here.\n\n245\n00:13:20.910 --> 00:13:22.880\nLet's take a look at it.\n\n246\n00:13:22.880 --> 00:13:25.740\nLet's see here CAT was a file one,\nI think.\n\n247\n00:13:25.740 --> 00:13:27.490\nI just got real creative.\n\n248\n00:13:27.490 --> 00:13:28.780\nFile one, here we go.\n\n249\n00:13:28.780 --> 00:13:30.780\nI put a bunch of different\ntypes of data in here so\n\n250\n00:13:30.780 --> 00:13:33.170\nwe can kind of mess\naround with regex a bit.\n\n251\n00:13:33.170 --> 00:13:38.470\nAnd you'll see I've got authorization\nfailed log type messaging and\n\n252\n00:13:38.470 --> 00:13:41.850\nyou notice they're in different format.\n\n253\n00:13:41.850 --> 00:13:43.660\nOne of them is authorization failed,\n\n254\n00:13:43.660 --> 00:13:48.050\none has a white space character in\nfront of it, the other one has success.\n\n255\n00:13:48.050 --> 00:13:50.860\nIt's not authorization fails,\nit's authorization success.\n\n256\n00:13:52.220 --> 00:13:55.900\nSo now we can sort of play around\nwith some of this anchoring business.\n\n257\n00:13:55.900 --> 00:13:57.760\nSo lets move back up here.\n\n258\n00:13:57.760 --> 00:13:59.900\nSo if I wanted to look for authorization,\n\n259\n00:13:59.900 --> 00:14:05.110\nI wanted to start with authorization\nfailed, I need to look for that.\n\n260\n00:14:05.110 --> 00:14:07.650\nPut the carrot in front of that, right?\n\n261\n00:14:07.650 --> 00:14:13.650\nSo I could do, I'll just do sed -n so\nit doesn't print out every line.\n\n262\n00:14:13.650 --> 00:14:14.862\nWe just want the line we want.\n\n263\n00:14:14.862 --> 00:14:19.750\nsed -n, and we'll do like this and\n\n264\n00:14:19.750 --> 00:14:25.510\nadd the carrot, say authorization on fail.\n\n265\n00:14:25.510 --> 00:14:31.640\nNow, I'm adding the entire string because\nI don't want authorization success,\n\n266\n00:14:31.640 --> 00:14:33.130\nI just want fail.\n\n267\n00:14:33.130 --> 00:14:37.230\nBut it doesn't start with fail or\nsuccess, it starts with authorization, so\n\n268\n00:14:37.230 --> 00:14:38.560\nI'm kind of just expanding that up.\n\n269\n00:14:38.560 --> 00:14:42.350\nAgain contrived stuff for\nus to look at and\n\n270\n00:14:42.350 --> 00:14:45.490\njust kind of get the idea\nof the functionality, okay?\n\n271\n00:14:45.490 --> 00:14:49.400\nSo I'm looking for\nauthorization failed, and\n\n272\n00:14:49.400 --> 00:14:55.079\nthen I will just say print that out and\nthat comes from file 1.text.\n\n273\n00:14:55.079 --> 00:15:00.576\nYou'll see, I get authorization\nfailed even though we looked up here,\n\n274\n00:15:00.576 --> 00:15:02.930\nwe had authorization failed.\n\n275\n00:15:02.930 --> 00:15:06.385\nBut you'll notice,\nit did not technically start with that,\n\n276\n00:15:06.385 --> 00:15:09.150\nit started with a light whisker.\n\n277\n00:15:09.150 --> 00:15:11.020\nSo you have to take that\nkind of thing into account.\n\n278\n00:15:11.020 --> 00:15:15.730\nThis is why a lot of people start going,\nregular expressions now,\n\n279\n00:15:15.730 --> 00:15:17.890\ncuz it gets super, it's very technical.\n\n280\n00:15:17.890 --> 00:15:22.710\nYou have to think of all the little\nscenarios on which what you're looking for\n\n281\n00:15:22.710 --> 00:15:24.790\nmight or might not show up.\n\n282\n00:15:24.790 --> 00:15:27.650\nAnd it can get very difficult\nto really work that out.\n\n283\n00:15:27.650 --> 00:15:29.780\nYou're going to probably spend\nsome time going, okay, well,\n\n284\n00:15:29.780 --> 00:15:30.850\nI need to do this, I need to do that.\n\n285\n00:15:30.850 --> 00:15:34.880\nWell, here, it's kind of showing up oddly,\nso I have to make an exception for that.\n\n286\n00:15:34.880 --> 00:15:40.480\nWe'll grab it as well and it can get\nvery convoluted and difficult to follow.\n\n287\n00:15:40.480 --> 00:15:42.530\n&gt;&gt; So Daniel,\nreal quick question as a follow up,\n\n288\n00:15:42.530 --> 00:15:44.290\njust to make sure I understand this.\n\n289\n00:15:44.290 --> 00:15:47.550\nThat white space character kinda,\nokay, I get that.\n\n290\n00:15:47.550 --> 00:15:51.650\nBut white space in the middle\nthat also counts, right?\n\n291\n00:15:51.650 --> 00:15:54.690\nSo we had that authorization space failed.\n\n292\n00:15:54.690 --> 00:15:57.250\nIf we remove that white space,\nwe would no longer have a match for\n\n293\n00:15:57.250 --> 00:15:58.040\nany of these, correct?\n\n294\n00:15:58.040 --> 00:15:58.878\n&gt;&gt; That's exactly right.\n\n295\n00:15:58.878 --> 00:16:02.390\nWhatever pattern you give it,\nit's gonna look for.\n\n296\n00:16:02.390 --> 00:16:04.005\nAnd that's why, again,\n\n297\n00:16:04.005 --> 00:16:09.009\nit gets really difficult to To get these\nthings to work correctly the first time.\n\n298\n00:16:09.009 --> 00:16:12.122\nI think we could probably have\nourselves a web comic that says,\n\n299\n00:16:12.122 --> 00:16:14.191\nI've got a gun to the head of your family.\n\n300\n00:16:14.191 --> 00:16:19.350\nAnd unless you can make a reg x string\npattern that works exactly like I want,\n\n301\n00:16:19.350 --> 00:16:21.540\nwithout looking it up, their gone.\n\n302\n00:16:21.540 --> 00:16:23.745\nWell you're going to have to\nwave goodbye to your family.\n\n303\n00:16:23.745 --> 00:16:24.645\n&gt;&gt; [LAUGH]\n&gt;&gt; Cuz man,\n\n304\n00:16:24.645 --> 00:16:28.729\nthat's a difficult task ,unless you do it\nall the time and you're super confident.\n\n305\n00:16:28.729 --> 00:16:30.593\nAnd of course repetition breeds retention,\nso\n\n306\n00:16:30.593 --> 00:16:32.255\nthe more you do it the better you'll get.\n\n307\n00:16:32.255 --> 00:16:35.902\nBut man, it can be a real\ndaunting task to say, all right,\n\n308\n00:16:35.902 --> 00:16:38.072\nI got to get this specific string.\n\n309\n00:16:38.072 --> 00:16:42.851\nSo hopefully some of this stuff will help\nreiterate maybe what you already know and\n\n310\n00:16:42.851 --> 00:16:45.982\nmake it a stronger set of knowledge for\nyour toolkit.\n\n311\n00:16:45.982 --> 00:16:48.293\nAnd if you're unfamiliar with\na lot of how this works,\n\n312\n00:16:48.293 --> 00:16:50.660\nit's starting to get you familiar with it.\n\n313\n00:16:50.660 --> 00:16:52.650\nAnd so it's gonna work it\nout inside of your programs.\n\n314\n00:16:52.650 --> 00:16:56.130\nCuz you never know when can you use [RegX\ninside of your programs to look for\n\n315\n00:16:56.130 --> 00:17:02.030\nfiles or some commands adding or switching\nthings that a user may input, right?\n\n316\n00:17:02.030 --> 00:17:05.590\nAnd we'll see that in\ncreating practical script.\n\n317\n00:17:05.590 --> 00:17:06.320\nAnd if nothing else,\n\n318\n00:17:06.320 --> 00:17:09.810\nif you think you're really\ndetail-oriented try some regex stuff.\n\n319\n00:17:09.810 --> 00:17:14.698\nBecause then you'll go, I'm not as\ndetail-oriented as I thought I was.\n\n320\n00:17:14.698 --> 00:17:18.147\n&gt;&gt; [LAUGH]\n&gt;&gt; You're totally right.\n\n321\n00:17:18.147 --> 00:17:21.552\n&gt;&gt; Let's get back to some regex, let's\ntake a look at some more examples here.\n\n322\n00:17:21.552 --> 00:17:25.884\nSo we have another anchor,\nend of the line and we had that as well.\n\n323\n00:17:25.884 --> 00:17:27.230\nDo I wanna do anything to end the line?\n\n324\n00:17:27.230 --> 00:17:32.113\nBasically the same idea, except you're\nlooking for stuff at the end of the line.\n\n325\n00:17:32.113 --> 00:17:36.216\nFlip the script, right,\nadd the dollar sign and after whatever, so\n\n326\n00:17:36.216 --> 00:17:37.292\nlet's see here.\n\n327\n00:17:37.292 --> 00:17:40.423\nWe'll cap that, was it regex?\n\n328\n00:17:40.423 --> 00:17:41.542\nHere we go.\n\n329\n00:17:41.542 --> 00:17:43.421\nThere's your special character.\n\n330\n00:17:43.421 --> 00:17:46.680\nHere's the pattern of how it would look.\n\n331\n00:17:46.680 --> 00:17:50.410\nSo pattern$ right?\n\n332\n00:17:50.410 --> 00:17:54.730\nThere are times and\ncertain programs that you can do $pattern.\n\n333\n00:17:54.730 --> 00:17:57.161\nAnd that kinda does a different thing,\n\n334\n00:17:57.161 --> 00:18:01.285\na little farther beyond the scope\nof what I wanna get into here, but\n\n335\n00:18:01.285 --> 00:18:06.738\nbasically I want you to understand that\nat this point, that the dollar sign lets\n\n336\n00:18:06.738 --> 00:18:11.552\nknow that this is a pattern at the end\nof a line, okay, and look around there.\n\n337\n00:18:11.552 --> 00:18:12.112\nSo pretty simple.\n\n338\n00:18:12.112 --> 00:18:17.063\nWe got begin with and end with You\ncan actually throw the two together.\n\n339\n00:18:17.063 --> 00:18:20.860\nI can say the line begins with this and\nends with this.\n\n340\n00:18:20.860 --> 00:18:25.483\nAnd it's really good for\nremoving empty lines.\n\n341\n00:18:25.483 --> 00:18:30.493\nSo you'll notice here in our file,\nwe've got some empty lines.\n\n342\n00:18:30.493 --> 00:18:34.823\nThese things are separated\nby Just new line characters.\n\n343\n00:18:34.823 --> 00:18:36.702\nEmpty, empty text, right?\n\n344\n00:18:36.702 --> 00:18:42.741\nI can take those out if I want by looking\nfor lines that begin and end with nothing.\n\n345\n00:18:42.741 --> 00:18:43.731\nLike look for that pattern.\n\n346\n00:18:43.731 --> 00:18:44.390\nSo let's do that.\n\n347\n00:18:44.390 --> 00:18:48.530\nLet's say, said dash n like so, and\n\n348\n00:18:48.530 --> 00:18:53.613\nwe will look for ^$ and we'll delete them.\n\n349\n00:18:53.613 --> 00:18:55.261\nLike that.\n\n350\n00:18:55.261 --> 00:19:00.191\nOur old delete pattern,\nthrow that into file1, file1, there we go.\n\n351\n00:19:00.191 --> 00:19:03.682\nAnd well how about that?\n\n352\n00:19:03.682 --> 00:19:06.185\nI guess I don't need it,\nI need it to print, I'm an idiot.\n\n353\n00:19:06.185 --> 00:19:08.881\nTake that -n out,\nI need you to print, please.\n\n354\n00:19:08.881 --> 00:19:13.082\nThere we go, and look,\nsee now it's removed all the white space.\n\n355\n00:19:13.082 --> 00:19:16.241\nSo it looked for\nthat pattern that began and\n\n356\n00:19:16.241 --> 00:19:19.764\nthen I couldn't just say\nbegins with nothing.\n\n357\n00:19:19.764 --> 00:19:20.304\nWhy?\n\n358\n00:19:20.304 --> 00:19:23.626\nBecause this line right\nhere begins with nothing.\n\n359\n00:19:23.626 --> 00:19:25.048\nThis line right here begins with nothing.\n\n360\n00:19:25.048 --> 00:19:27.881\nIt would have removed those.\n\n361\n00:19:27.881 --> 00:19:29.052\nI didn't want to do that.\n\n362\n00:19:29.052 --> 00:19:33.940\nI want every line except, let's just\nsay see how you kinda gotta like, and\n\n363\n00:19:33.940 --> 00:19:35.582\nagain, do not feel bad.\n\n364\n00:19:35.582 --> 00:19:39.574\nIf you fire off a regex and\nit does something weird and\n\n365\n00:19:39.574 --> 00:19:42.223\nyou're like why did that do that?\n\n366\n00:19:42.223 --> 00:19:44.662\nOr I just didn't think about that, right?\n\n367\n00:19:44.662 --> 00:19:46.793\nIt definitely happens to the best of us.\n\n368\n00:19:46.793 --> 00:19:48.702\nYou just gotta go back and\nsee what happens.\n\n369\n00:19:48.702 --> 00:19:53.197\nWhy it's removing it and then make\nyour exception, change your regex so\n\n370\n00:19:53.197 --> 00:19:56.081\nthat it will fit the pattern\nmore exactingly.\n\n371\n00:19:56.081 --> 00:19:57.571\nOkay, let's see here.\n\n372\n00:19:57.571 --> 00:19:58.481\nJust how much time do we have?\n\n373\n00:19:58.481 --> 00:19:59.131\nWe got ten minutes.\n\n374\n00:19:59.131 --> 00:20:01.992\nAll right,\nwe can get a couple more things done.\n\n375\n00:20:01.992 --> 00:20:06.120\nLet's move into some more basic\nregex of the dot character.\n\n376\n00:20:06.120 --> 00:20:07.461\nThis is a great character.\n\n377\n00:20:07.461 --> 00:20:09.423\nThis is a special character, right?\n\n378\n00:20:09.423 --> 00:20:12.982\nCuz it is-\n&gt;&gt; It's amorphous.\n\n379\n00:20:12.982 --> 00:20:14.312\n&gt;&gt; It's a shapeshifter.\n\n380\n00:20:14.312 --> 00:20:16.203\nIt's anything you need it to be.\n\n381\n00:20:16.203 --> 00:20:19.172\nBasic when it comes down to\nit at the end of the day.\n\n382\n00:20:19.172 --> 00:20:23.913\nI want to look for anything here.\n\n383\n00:20:23.913 --> 00:20:25.943\nIt could be anything I want, right?\n\n384\n00:20:25.943 --> 00:20:29.333\nSo we can throw that dot character\nin there and it will do that for us.\n\n385\n00:20:29.333 --> 00:20:32.451\nLet's see here, I have it right here.\n\n386\n00:20:32.451 --> 00:20:35.353\nPattern match any single character.\n\n387\n00:20:35.353 --> 00:20:37.753\nThat's important, it's why I.\n\n388\n00:20:37.753 --> 00:20:40.062\nMade that enlarged letters there.\n\n389\n00:20:40.062 --> 00:20:41.675\nExcept the new line characters,\n\n390\n00:20:41.675 --> 00:20:44.331\nalso a very important piece\nof the puzzle right there.\n\n391\n00:20:44.331 --> 00:20:47.011\nSo it doesn't match new line characters.,\n\n392\n00:20:47.011 --> 00:20:50.403\nbasically the return when you\nhit the Enter key, right?\n\n393\n00:20:50.403 --> 00:20:53.292\nSo if that is there,\nit's not gonna find it.\n\n394\n00:20:53.292 --> 00:20:54.774\nWhich is good,\nwe don't want it to do that.\n\n395\n00:20:54.774 --> 00:20:58.510\nWe wanna look for that,\nwe can specify I wanna look for that.\n\n396\n00:20:58.510 --> 00:21:02.137\nSo what does that mean?\n\n397\n00:21:02.137 --> 00:21:08.303\nWell, if I've got a word and I don't\ncare what, maybe a small word like cat.\n\n398\n00:21:08.303 --> 00:21:11.742\nWell there's also cot, or cut.\n\n399\n00:21:11.742 --> 00:21:15.698\nWhat if I wanted to find every\niteration of c something t, or\n\n400\n00:21:15.698 --> 00:21:19.653\nwhatever Right,\nI can do that by using that doc character,\n\n401\n00:21:19.653 --> 00:21:24.103\njust give me anything that's here\nbetween these two characters.\n\n402\n00:21:24.103 --> 00:21:30.798\nNow we're starting to get into what\nJustin was kind of talking about,\n\n403\n00:21:30.798 --> 00:21:36.092\nI can't really,\nI can't divine what it's going to be.\n\n404\n00:21:36.092 --> 00:21:39.579\nThat I might be looking for,\nso I wanna cast a wider net.\n\n405\n00:21:39.579 --> 00:21:43.695\nAnd that's what we do when we start\ngetting into these special characters.\n\n406\n00:21:43.695 --> 00:21:47.000\nSo let's do that,\nlet's play around with the dot there.\n\n407\n00:21:47.000 --> 00:21:53.443\nLet's do this, let's say sed -n,\nand I will do, let's see here.\n\n408\n00:21:53.443 --> 00:21:56.110\n.ing, okay.\n\n409\n00:21:56.110 --> 00:21:59.910\nNow it's not looking for a period in my\nstring, so if there's a period at the end\n\n410\n00:21:59.910 --> 00:22:02.943\nof a sentence, and the .ing for\nwhatever reason it's there.\n\n411\n00:22:02.943 --> 00:22:05.591\nMaybe I forgot to space it,\nit won't find that.\n\n412\n00:22:05.591 --> 00:22:08.330\nIf I wanted that,\nI would need to use my backslash,\n\n413\n00:22:08.330 --> 00:22:10.132\nif that is what I was looking for.\n\n414\n00:22:10.132 --> 00:22:12.824\nAnd then do, maybe like a substitution.\n\n415\n00:22:12.824 --> 00:22:17.287\nWith said and say they were supposed\nto be a white spaced character\n\n416\n00:22:17.287 --> 00:22:19.181\nin between a period and ing.\n\n417\n00:22:19.181 --> 00:22:21.740\nI don't know why I'm starting\nit with a lowercase letter but\n\n418\n00:22:21.740 --> 00:22:22.753\nyou get the idea right?\n\n419\n00:22:22.753 --> 00:22:23.580\nI could do that.\n\n420\n00:22:23.580 --> 00:22:26.742\nBut here I want to find\nanything .ing right?\n\n421\n00:22:26.742 --> 00:22:33.764\nAnything .ing if there is\na single character before.\n\n422\n00:22:33.764 --> 00:22:37.055\nING and I don't care what it is.\n\n423\n00:22:37.055 --> 00:22:41.112\nThen I want you to return that result and\nthat's what I'm going to do.\n\n424\n00:22:41.112 --> 00:22:43.727\nI'm gonna print that out.\n\n425\n00:22:43.727 --> 00:22:46.837\nPut the P flag, close it off,\nand then creat efile.\n\n426\n00:22:46.837 --> 00:22:48.899\nFile one.\n\n427\n00:22:48.899 --> 00:22:49.603\nSo there we go.\n\n428\n00:22:49.603 --> 00:22:54.128\nWe say file one returns running\nfilles to temp auth log and\n\n429\n00:22:54.128 --> 00:23:00.831\nwe get because T-I-N-G, there was a T\nbefore an I-N-G, it returned that line.\n\n430\n00:23:00.831 --> 00:23:03.904\nAlso gave me testing, T-I-N-G yet\n\n431\n00:23:03.904 --> 00:23:08.521\nagain.text not found comments\nthis thing is annoying.\n\n432\n00:23:08.521 --> 00:23:14.430\nYou'll notice it grabbed TH ING,\nall right because a wide space\n\n433\n00:23:14.430 --> 00:23:19.472\ncharacter is not a new line All right,\nremember that.\n\n434\n00:23:19.472 --> 00:23:21.853\nIt only,\nit finds everything except new line,\n\n435\n00:23:21.853 --> 00:23:25.911\nany single character except new line,\nwhite space characters are characters.\n\n436\n00:23:25.911 --> 00:23:31.096\nSo even though there is an accidental\nspace in here it's still return to match\n\n437\n00:23:31.096 --> 00:23:37.103\nBecause technically as far as is concerned\nthere was a character before the ing.\n\n438\n00:23:37.103 --> 00:23:38.123\nSo it returned that.\n\n439\n00:23:38.123 --> 00:23:39.951\nThis is annoying and it also has annoying.\n\n440\n00:23:39.951 --> 00:23:41.770\n[LAUGH] I guess I could take that out.\n\n441\n00:23:41.770 --> 00:23:44.463\nCuz you'd be like well it still\nfound it because of annoying.\n\n442\n00:23:44.463 --> 00:23:48.412\nWe can remove that and\nit should still find it.\n\n443\n00:23:48.412 --> 00:23:51.312\nLet see here comments, ring the bell.\n\n444\n00:23:51.312 --> 00:23:55.374\nSo we found ring, we find sing,\nanything ing that's what it looks like.\n\n445\n00:23:55.374 --> 00:23:57.531\nOk, that's the idea.\n\n446\n00:23:57.531 --> 00:24:00.523\nAnd if you go back in here to see this...\n\n447\n00:24:00.523 --> 00:24:03.834\nlet me cut the file again\ncause I need to break up.\n\n448\n00:24:03.834 --> 00:24:06.668\nCan't file 1 no text...\n\n449\n00:24:06.668 --> 00:24:12.370\nAnd we'll see those sentences unless\nit didn't find some things right?\n\n450\n00:24:12.370 --> 00:24:16.750\nSo, it didn't find fileproduction.txt.\n\n451\n00:24:16.750 --> 00:24:20.210\nRight, cuz there's no something ing.\n\n452\n00:24:20.210 --> 00:24:23.340\nIt didn't find ing files to disk.\n\n453\n00:24:23.340 --> 00:24:27.290\nIt said error trouble writing files,\nand that kind of split it up.\n\n454\n00:24:27.290 --> 00:24:29.005\nMaybe there wasn't enough room,\nor whatever.\n\n455\n00:24:29.005 --> 00:24:32.540\nTrying to simulate some things that\nhappen in the real world, where our words\n\n456\n00:24:32.540 --> 00:24:36.790\nget truncated from an end of the line and\nthen start at the beginning of another.\n\n457\n00:24:36.790 --> 00:24:38.050\nAnd ing may have done that.\n\n458\n00:24:38.050 --> 00:24:40.340\nIt did not find that line, why?\n\n459\n00:24:40.340 --> 00:24:45.540\nBecause there's no character in\nfront of ing, so it left that out.\n\n460\n00:24:45.540 --> 00:24:49.201\nSee how you gotta start going\nnow I gotta make it, I gotta\n\n461\n00:24:49.201 --> 00:24:53.890\nwell now also find anything that starts\nwith ing on the line and bring it up.\n\n462\n00:24:53.890 --> 00:24:55.470\nAnd so on and so forth.\n\n463\n00:24:55.470 --> 00:24:56.980\nYou see how these things start evolving.\n\n464\n00:24:56.980 --> 00:25:02.380\nLet's see here, so,\nI think that's a good enough run\n\n465\n00:25:02.380 --> 00:25:07.600\ndown of what we're talking about when\nwe're looking at the .character, right?\n\n466\n00:25:07.600 --> 00:25:09.430\nFind anything accepting lots.\n\n467\n00:25:11.020 --> 00:25:15.720\nLet's move on to, how about character\nclasses, interesting thing.\n\n468\n00:25:15.720 --> 00:25:21.059\nThis is what we're bringing in braces, the\nsquare brackets, I guess, square brackets.\n\n469\n00:25:22.160 --> 00:25:26.300\nWe put something in there and I can make a\nclass of characters I want it to look for.\n\n470\n00:25:26.300 --> 00:25:31.460\nInstead of saying well anything,\nI can say specific\n\n471\n00:25:31.460 --> 00:25:36.720\nthings that might go in, and that can be\na little a little difficult to understand.\n\n472\n00:25:36.720 --> 00:25:39.670\nIt's better if you just see it and then\nyou should understand it a whole lot more.\n\n473\n00:25:41.030 --> 00:25:46.220\nLet's do this, let's say said -n and\nI'll start this off.\n\n474\n00:25:46.220 --> 00:25:48.290\nAnd you'll notice I've got\nthis whole area right here.\n\n475\n00:25:48.290 --> 00:25:51.320\nTake a left at 3rd street,\nlift the latch on the gate.\n\n476\n00:25:51.320 --> 00:25:52.600\nCan you lift the box?\n\n477\n00:25:52.600 --> 00:25:55.160\nYou can sleep in the loft, or\nyou can sleep in the loft.\n\n478\n00:25:55.160 --> 00:25:57.540\nAnd the German word for\n\"air\" is luft, right?\n\n479\n00:25:57.540 --> 00:26:02.410\nSo hopefully you've kind of seen what\nI'm gonna be playing around with,\n\n480\n00:26:02.410 --> 00:26:04.862\nthe l something ft, okay?\n\n481\n00:26:04.862 --> 00:26:10.300\nAnd what we'll do is we will do pattern\n\n482\n00:26:10.300 --> 00:26:15.520\nmatching with l,\ncuz we want l something ft.\n\n483\n00:26:15.520 --> 00:26:19.380\nNow I could put that period there and\nit'll say anything matching that will come\n\n484\n00:26:19.380 --> 00:26:21.750\nback but sometimes I don't\nwant everything to come back.\n\n485\n00:26:21.750 --> 00:26:23.520\nI want specific things to come back right?\n\n486\n00:26:23.520 --> 00:26:27.430\nSo I can make a character\nclass using my brackets there,\n\n487\n00:26:27.430 --> 00:26:31.250\nthese guys, like that and\njust put something inside of there.\n\n488\n00:26:31.250 --> 00:26:34.460\nAnd it will search for\nonly those specific things.\n\n489\n00:26:34.460 --> 00:26:38.530\nRight, so I can say,\nE-I-O-U, I don't want A.\n\n490\n00:26:38.530 --> 00:26:43.600\nWell, I'll have laughed, right,\nI don't care about that.\n\n491\n00:26:43.600 --> 00:26:48.350\nAnd then, or if there was a misspelling,\nI wouldn't get that, right,\n\n492\n00:26:48.350 --> 00:26:51.060\nor anything else.\n\n493\n00:26:51.060 --> 00:26:55.480\nAnd then I will say ft,\nprint that out close it off,\n\n494\n00:26:55.480 --> 00:26:58.020\nkinda feed it the file, file1.txt.\n\n495\n00:26:58.020 --> 00:27:03.300\nSo here it comes back, take a left at\nThird Street, can you lift the box?\n\n496\n00:27:03.300 --> 00:27:05.160\nCan you sleep in the loft?\n\n497\n00:27:05.160 --> 00:27:08.330\nThe German word for air is luft.\n\n498\n00:27:08.330 --> 00:27:09.801\nWe didn't get everything though.\n\n499\n00:27:12.540 --> 00:27:14.580\nI think, which ones are we missing here?\n\n500\n00:27:16.790 --> 00:27:19.412\nTake a left at third, take a left\nat third, can you lift the box, but\n\n501\n00:27:19.412 --> 00:27:22.370\nyou'll notice that lift the latch on\nthe gate did not come through, right?\n\n502\n00:27:23.440 --> 00:27:25.313\nThat was the one that did not show up,\n\n503\n00:27:25.313 --> 00:27:27.740\nbecause it didn't match\nthe pattern exactly.\n\n504\n00:27:27.740 --> 00:27:30.060\nIt's a capital L, capitalization maters.\n\n505\n00:27:30.060 --> 00:27:31.966\nDon't let that kind of thing trip you up,\neven though it probably will,\n\n506\n00:27:31.966 --> 00:27:32.790\nas it does me from time to time.\n\n507\n00:27:34.050 --> 00:27:36.930\n&gt;&gt; No, Daniel, that actually\nbrings up an interesting point.\n\n508\n00:27:36.930 --> 00:27:38.420\nActually I have a couple of questions.\n\n509\n00:27:38.420 --> 00:27:40.430\nIf we remove anything from\nthat character class,\n\n510\n00:27:40.430 --> 00:27:43.390\nthat would just say okay,\nif we remove the E.\n\n511\n00:27:43.390 --> 00:27:45.370\nWell, don't worry about the E any more.\n\n512\n00:27:45.370 --> 00:27:50.520\nLikewise, could we add the capital L to\na character class to the beginning and\n\n513\n00:27:50.520 --> 00:27:51.700\nnow pick that line back up?\n\n514\n00:27:51.700 --> 00:27:53.440\n&gt;&gt; Yeah, sure could, that's exactly right.\n\n515\n00:27:53.440 --> 00:27:57.100\nWe can add and\nmake multiple character classes, right?\n\n516\n00:27:57.100 --> 00:27:59.070\nLet's do what Justine was talking about,\nthat sounds like fun.\n\n517\n00:27:59.070 --> 00:28:02.758\nLet's go in here and\nwe will make another character class.\n\n518\n00:28:02.758 --> 00:28:09.600\nJust add you another set of braces there,\nand there you go, so l or L.\n\n519\n00:28:09.600 --> 00:28:13.670\nGreat, now I should find anything\nlike that, so let's hit it.\n\n520\n00:28:13.670 --> 00:28:15.050\nCome back, and hey look,\n\n521\n00:28:15.050 --> 00:28:20.500\nlift the latch on the gate now show's up,\nyou have multiple character classes.\n\n522\n00:28:20.500 --> 00:28:23.088\nYou can do that with change signal.\n\n523\n00:28:23.088 --> 00:28:28.200\nIt's great for looking for a words I\nput all is Now's in here like Now 1,\n\n524\n00:28:28.200 --> 00:28:34.800\nNow 2, 3, 4, 5, 6, and 7, and 8 and you'll\nnotice that Now is, has, differentiations.\n\n525\n00:28:34.800 --> 00:28:37.440\nAll right, so I've got all capital,\nI've got all lower case.\n\n526\n00:28:37.440 --> 00:28:41.610\nI've got only first letter capitalized,\nI've got middle letter capitalized,\n\n527\n00:28:41.610 --> 00:28:44.590\nI've got first and second letter\ncapitalized, so on and so forth.\n\n528\n00:28:44.590 --> 00:28:45.810\nYou see me just trying to work\n\n529\n00:28:45.810 --> 00:28:49.360\nin a different types of patterns that\ncan possibly be inside of a thing.\n\n530\n00:28:50.640 --> 00:28:51.610\nSpoiler alert,\n\n531\n00:28:51.610 --> 00:28:55.600\nthis is gonna be something that we\ndo when we create practical scripts.\n\n532\n00:28:55.600 --> 00:28:59.550\nCuz you never know what somebody might\ninput or that you need to look for.\n\n533\n00:28:59.550 --> 00:29:04.140\nSo, making a count for that is\nsomething that we do from time to time.\n\n534\n00:29:04.140 --> 00:29:07.110\nAnd I'll show you how that works out,\nlet me give you just again,\n\n535\n00:29:07.110 --> 00:29:10.950\nanother contrived example but\nhopefully it puts the idea across.\n\n536\n00:29:10.950 --> 00:29:12.990\nLet's do it like this.\n\n537\n00:29:12.990 --> 00:29:16.920\nWe will do, actually I'm gonna,\ndid I make a test file?\n\n538\n00:29:16.920 --> 00:29:23.100\nI'm going to copy file one, say CP file,\ncuz I don't want to modify it permanently.\n\n539\n00:29:23.100 --> 00:29:28.380\nI'm gonna say, I'm just gonna call it test\nfile, like that, and I'll clear back out.\n\n540\n00:29:28.380 --> 00:29:33.942\nAnd we'll say said dash i cuz I'm actually\ngonna over write some stuff those nows.\n\n541\n00:29:33.942 --> 00:29:37.010\nI wanna find everywhere it says now and\nI wanna change it to presently.\n\n542\n00:29:37.010 --> 00:29:39.050\nI think that sounds better right?\n\n543\n00:29:39.050 --> 00:29:41.270\nThat sounds more prestigious.\n\n544\n00:29:41.270 --> 00:29:41.850\nSo let's do that.\n\n545\n00:29:41.850 --> 00:29:46.600\nWe'll say s switch out the now,\n\n546\n00:29:46.600 --> 00:29:51.350\nbut I got to I've gotta make it\naccount for every iteration of Now.\n\n547\n00:29:51.350 --> 00:29:52.260\nSo how do I do that?\n\n548\n00:29:52.260 --> 00:29:54.040\nCharacter classes, right?\n\n549\n00:29:54.040 --> 00:29:59.370\nI'll say get anything that\nstarts with n or N, right?\n\n550\n00:29:59.370 --> 00:30:03.750\nMake another one, anything with o or O.\n\n551\n00:30:03.750 --> 00:30:05.200\nAnd of course anything with w or W.\n\n552\n00:30:05.200 --> 00:30:09.335\nOop, gotta close that out,\nthere we go, w or W.\n\n553\n00:30:09.335 --> 00:30:14.862\nLike so, and\nthen change that with presently.\n\n554\n00:30:14.862 --> 00:30:20.330\nThere we go and that should be good.\n\n555\n00:30:20.330 --> 00:30:23.350\nI think, that's all we need,\nthere let's close that.\n\n556\n00:30:23.350 --> 00:30:27.960\nHit this, IT file, test file,\nright, we called it test file.\n\n557\n00:30:30.150 --> 00:30:33.430\nHit it and now we cat test file, and\n\n558\n00:30:33.430 --> 00:30:39.100\nyou'll notice all those Nows are now all\npresently because we made an account.\n\n559\n00:30:39.100 --> 00:30:43.050\nWe let it know, look for\n\n560\n00:30:43.050 --> 00:30:47.910\nany kind of iteration that could be\npossible through setting up those\n\n561\n00:30:47.910 --> 00:30:51.260\ncharacter classes, because we saw\nall the differences that might be.\n\n562\n00:30:51.260 --> 00:30:53.880\nJust sometimes you got worry about that,\nand regex.\n\n563\n00:30:53.880 --> 00:30:58.220\nMaking a character class can be a great\nway of slurping all that data up and\n\n564\n00:30:58.220 --> 00:30:59.250\nmaking the changes that you need.\n\n565\n00:31:00.820 --> 00:31:02.820\n&gt;&gt; Well Daniel,\nyou've definitely helped us cover\n\n566\n00:31:03.860 --> 00:31:05.420\nat least the beginnings\nof regular expressions.\n\n567\n00:31:05.420 --> 00:31:07.130\nNow I know you got more coming at us.\n\n568\n00:31:07.130 --> 00:31:09.286\nWe, I knew we were not gonna\ndo this in a single part.\n\n569\n00:31:09.286 --> 00:31:10.207\n&gt;&gt; [LAUGH]\n&gt;&gt; So it looks like\n\n570\n00:31:10.207 --> 00:31:12.340\nwe're gonna have to come back for\na part two.\n\n571\n00:31:12.340 --> 00:31:16.260\nProbably touch on character classes and\nsome incarnations of those.\n\n572\n00:31:16.260 --> 00:31:20.380\nSo, definitely join us there as we\ncontinue on with our regular expressions.\n\n573\n00:31:20.380 --> 00:31:22.340\nBut for now we're gonna go ahead and\nsign off.\n\n574\n00:31:22.340 --> 00:31:25.480\nSo signing of for ITProTV,\nI've been your host Justin Dennison.\n\n575\n00:31:25.480 --> 00:31:26.460\n&gt;&gt; And I'm Daniel Lowrie.\n\n576\n00:31:26.460 --> 00:31:28.759\n&gt;&gt; And we'll see you next time.\n\n577\n00:31:28.759 --> 00:31:34.855\n[MUSIC]\n\n578\n00:31:34.855 --> 00:31:37.395\nThank you for watching ITProTV.\n\n",
          "vimeoId": "240881475"
        },
        {
          "description": "In this episode, Daniel and Justin look at working with Regular Expressions, mostly in a sed/gawk context. Here they will explore RegEx character class negation, ranges, and special character classes like the asterisk, question mark, plus sign, curly braces, logical OR, and expression grouping.",
          "length": "2238",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-2-regular_expressions_pt_2-103117.00_37_06_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-2-regular_expressions_pt_2-103117.00_37_06_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-4-1-2-regular_expressions_pt_2-103117.00_37_06_00.Still001-sm.jpg",
          "title": "Regular Expressions Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:04.968\nWelcome to ITProTV, I'm your host.\n\n2\n00:00:04.968 --> 00:00:06.629\n[CROSSTALK]\n\n3\n00:00:06.629 --> 00:00:08.287\n[MUSIC]\n\n4\n00:00:08.287 --> 00:00:11.956\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.956 --> 00:00:16.173\n&gt;&gt; Greetings everyone, and welcome back\nto another exciting episode of ITProTV.\n\n6\n00:00:16.173 --> 00:00:19.207\nI'm your host Justin Dennison, and\nwe're back with a part two, yeah,\n\n7\n00:00:19.207 --> 00:00:21.019\nI knew we were gonna be back here-\n&gt;&gt; [LAUGH]\n\n8\n00:00:21.019 --> 00:00:22.557\n&gt;&gt; Of regular expressions.\n\n9\n00:00:22.557 --> 00:00:26.254\nAnd while we do have a few things to\ncover, luckily we were able to get the Man\n\n10\n00:00:26.254 --> 00:00:29.155\nwith a Plan back in the studio today,\nMr. Daniel Lowrie.\n\n11\n00:00:29.155 --> 00:00:29.727\nHow are you doing today, Daniel?\n\n12\n00:00:29.727 --> 00:00:30.904\n&gt;&gt; Doing fantastic Justin.\n\n13\n00:00:30.904 --> 00:00:34.820\nThanks for having me yet again, and all\nyou good people out there for joining us.\n\n14\n00:00:34.820 --> 00:00:37.740\nThat's right, we're continuing on\nwith more in our regular expressions.\n\n15\n00:00:37.740 --> 00:00:41.160\nSo It's been a wild ride so far, and Mr.\n\n16\n00:00:41.160 --> 00:00:44.490\nToad is tired, but, hey buddy,\ncan't unstrap just yet.\n\n17\n00:00:44.490 --> 00:00:45.542\nWe gotta continue on and\n\n18\n00:00:45.542 --> 00:00:48.497\nshow some other things,\nthat we can use with regular expression.\n\n19\n00:00:48.497 --> 00:00:50.861\nIt was interesting enough,\nJustin was talking about,\n\n20\n00:00:50.861 --> 00:00:54.093\nwhen we left the last episode, we were\nlooking at using character classes.\n\n21\n00:00:54.093 --> 00:00:55.263\nAnd we set those, and\n\n22\n00:00:55.263 --> 00:00:59.570\nI did forget to let you guys know that\nyou can do this with numbers as well.\n\n23\n00:00:59.570 --> 00:01:03.580\nAnd he said, ma, I wish I'd of known this,\nI could have done this.\n\n24\n00:01:03.580 --> 00:01:07.420\nI've done this a bunch of times, where\nI need to look for a specific date or\n\n25\n00:01:07.420 --> 00:01:11.080\na number range or something like that,\n\n26\n00:01:11.080 --> 00:01:16.380\nI could have done this type of character\nclassing, to make that happen.\n\n27\n00:01:16.380 --> 00:01:17.895\nLet's take a look back\nin the computer here.\n\n28\n00:01:17.895 --> 00:01:22.473\nI'll just look at our,\nfile if I cat file1.txt.\n\n29\n00:01:22.473 --> 00:01:27.441\nDown here, I've got 25th, 26th,\n27th, 8th, 9th, 30th, 31st, so\n\n30\n00:01:27.441 --> 00:01:29.241\nlike an end of a month, right?\n\n31\n00:01:29.241 --> 00:01:33.592\nBut what if I just want to grab some\nspecific dates out of there, right?\n\n32\n00:01:33.592 --> 00:01:38.388\nIf I just wanted to, I created an example,\nso let's go with my example,\n\n33\n00:01:38.388 --> 00:01:42.260\nlet's do looking for\nnumbers 28 through 31, right?\n\n34\n00:01:42.260 --> 00:01:44.635\nSo I don't want 25, 26, 27.\n\n35\n00:01:44.635 --> 00:01:47.633\nI just want 28, 29, 30, and 31 okay?\n\n36\n00:01:47.633 --> 00:01:48.443\nHow can we do that?\n\n37\n00:01:48.443 --> 00:01:50.860\nWell, this is one way in\nwhich we can do that, right?\n\n38\n00:01:50.860 --> 00:01:53.880\nThere's multitudes of ways, but\nwhen we're working with character class,\n\n39\n00:01:53.880 --> 00:01:57.140\nI'm trying to show you that,\nso that's what we're gonna do.\n\n40\n00:01:57.140 --> 00:01:57.800\nSo let's do this.\n\n41\n00:01:57.800 --> 00:02:03.060\nWe'll say set -n, cuz we don't wanna\nprint anything, other than what we want.\n\n42\n00:02:03.060 --> 00:02:08.140\nAnd we'll hit the slash character\nclass of 2 and 3, right?\n\n43\n00:02:08.140 --> 00:02:10.197\nBecause why?\n\n44\n00:02:10.197 --> 00:02:11.271\nThink about it.\n\n45\n00:02:11.271 --> 00:02:14.603\nBecause my number's either\ngonna start with a 2 or a 3.\n\n46\n00:02:14.603 --> 00:02:18.681\nBecause I want 28, 29, 30 and\n\n47\n00:02:18.681 --> 00:02:22.770\n31, I need to make a rule for that.\n\n48\n00:02:22.770 --> 00:02:25.050\nI need to make a pattern for that, right?\n\n49\n00:02:25.050 --> 00:02:27.770\nSo I need a 2 or a 3.\n\n50\n00:02:27.770 --> 00:02:29.838\nSo we put that in there.\n\n51\n00:02:29.838 --> 00:02:36.188\nThen, I gotta make, well, I don't want 5,\n6, or 7, but I do want 28, 29, and 30, 31.\n\n52\n00:02:36.188 --> 00:02:40.160\nAnd so I'll put 8, 9, 0, and 1, or\n0, 1, 8, 9, I could do it that way.\n\n53\n00:02:40.160 --> 00:02:45.244\nI could say 0, 1, 9, like that.\n\n54\n00:02:45.244 --> 00:02:47.783\nAnd now, it will match any pattern.\n\n55\n00:02:47.783 --> 00:02:52.172\nNow there's an inherent vice to this, or\nan inherent flaw to this, what's going on.\n\n56\n00:02:52.172 --> 00:02:57.042\nIf the 20th was there, the 21st was there,\nit would match that pattern as well.\n\n57\n00:02:57.042 --> 00:02:58.130\nSo I'd have to make further.\n\n58\n00:02:58.130 --> 00:03:01.790\nBut if this is just the only list that\nI have, this will work just fine.\n\n59\n00:03:01.790 --> 00:03:05.950\nBut you gotta remember that\nif you've got more to it,\n\n60\n00:03:05.950 --> 00:03:07.480\nyou might have to get more specific.\n\n61\n00:03:07.480 --> 00:03:10.790\nOr I might slurp up something\nthat you didn't expect it to, and\n\n62\n00:03:10.790 --> 00:03:13.690\nnow you've gotta start working\nwith it to change things.\n\n63\n00:03:13.690 --> 00:03:17.490\nBut I just wanted to show you that you\ncan use numbers for character classes,\n\n64\n00:03:17.490 --> 00:03:19.830\nas well as letters, okay?\n\n65\n00:03:19.830 --> 00:03:22.730\nSo I'll throw that into here.\n\n66\n00:03:22.730 --> 00:03:27.170\nWe will print that out, finish it off.\n\n67\n00:03:27.170 --> 00:03:33.945\nAnd we'll do file1.txt, and now you'll\nsee idea only the 28th, 29th, 30th, 31st.\n\n68\n00:03:33.945 --> 00:03:37.842\nAgain, this is for the specific\nexample with this specific list.\n\n69\n00:03:37.842 --> 00:03:40.212\nYou might have to do something different,\nbut\n\n70\n00:03:40.212 --> 00:03:44.630\nnow you know how you can creates\na curdy class using numbers, okay?\n\n71\n00:03:44.630 --> 00:03:45.900\nGood stuff, good stuff.\n\n72\n00:03:45.900 --> 00:03:46.950\nLet's move on.\n\n73\n00:03:46.950 --> 00:03:49.490\nLet's talk about character class negation.\n\n74\n00:03:50.940 --> 00:03:51.790\nAll right, so\n\n75\n00:03:51.790 --> 00:03:55.490\nwe kind of talked about negation a bit\nwith the escape character, right?\n\n76\n00:03:55.490 --> 00:04:00.110\nI want regex to treat a special\ncharacter as a regular character.\n\n77\n00:04:00.110 --> 00:04:04.610\nI'm negating its specialness,\nby throwing a backslash in front of it.\n\n78\n00:04:05.610 --> 00:04:11.510\nBut sometimes,\nI want to negate character class, right?\n\n79\n00:04:11.510 --> 00:04:12.870\nI wanna negate something like that.\n\n80\n00:04:14.020 --> 00:04:17.880\nAnd what's interesting about this,\nand this can get confusing, is we\n\n81\n00:04:20.000 --> 00:04:23.550\nreuse a special character, and\nthat's where this gets a little tricky.\n\n82\n00:04:23.550 --> 00:04:24.410\nSo the little carrots, right?\n\n83\n00:04:24.410 --> 00:04:25.630\nOr little top hat guy?\n\n84\n00:04:26.640 --> 00:04:27.774\nWell, we use that to do what?\n\n85\n00:04:27.774 --> 00:04:29.913\nWell, to find things at\nthe beginning of a line.\n\n86\n00:04:29.913 --> 00:04:34.405\nBut we also use it for\nclass negation, okay?\n\n87\n00:04:34.405 --> 00:04:38.272\nAnd what we do is we just make sure\nthat's inside of those braces.\n\n88\n00:04:38.272 --> 00:04:43.751\nAnd then whatever we have, I will say\ndon't look for this, instead of look for\n\n89\n00:04:43.751 --> 00:04:48.663\nthis character class, don't look for\nthis character, hm, right?\n\n90\n00:04:48.663 --> 00:04:51.458\nSo it's kind of like blacklisting,\nor whitelisting, or\n\n91\n00:04:51.458 --> 00:04:55.062\nwhatever perspective you're looking\nat it from, as something, right?\n\n92\n00:04:55.062 --> 00:04:55.673\nDoes that make sense?\n\n93\n00:04:55.673 --> 00:04:56.240\nHopefully it does.\n\n94\n00:04:56.240 --> 00:04:58.500\nLet's take a look and\nsee how it works itself out.\n\n95\n00:04:58.500 --> 00:05:03.274\nAnd hopefully that brings it\ninto more fruition in your mind.\n\n96\n00:05:03.274 --> 00:05:04.276\nSo we'll do this.\n\n97\n00:05:04.276 --> 00:05:10.124\nWe'll say said -n, I swear I can type,\n\n98\n00:05:10.124 --> 00:05:15.464\nI can do it, it has happened before.\n\n99\n00:05:15.464 --> 00:05:20.654\nWe will open this up, and\nwe'll do the left thing,\n\n100\n00:05:20.654 --> 00:05:23.802\nor the l something ft, right?\n\n101\n00:05:23.802 --> 00:05:27.024\nAnd instead of saying,\nI want you to find this,\n\n102\n00:05:27.024 --> 00:05:29.694\nI want you to not find this, all right?\n\n103\n00:05:29.694 --> 00:05:34.960\nSo character class, throw the carrot in\nthere, it's not saying starting with,\n\n104\n00:05:34.960 --> 00:05:40.172\nthis is saying forget this business;\nif you see this, don't match it, right?\n\n105\n00:05:40.172 --> 00:05:42.402\nAnd then we'll do, what do I want to do?\n\n106\n00:05:42.402 --> 00:05:43.884\nI'll do e and u, right?\n\n107\n00:05:43.884 --> 00:05:47.785\nSo I'll do e and u,\nclose it out, give it the ft,\n\n108\n00:05:47.785 --> 00:05:51.991\ngive it the p flag,\ngive it the file, file1.txt.\n\n109\n00:05:51.991 --> 00:05:55.219\nSo now when I come back, you'll notice,\n\n110\n00:05:55.219 --> 00:06:00.476\nbefore in the previous episode,\nwhen we did this same exact thing,\n\n111\n00:06:00.476 --> 00:06:05.476\nonly one line was missing out of\nthese lines right here, right?\n\n112\n00:06:05.476 --> 00:06:09.932\nWriting files, I'm sorry,\nit was these lines with the left.\n\n113\n00:06:09.932 --> 00:06:13.640\nTake a left at 3rd, Lift the latch\non the gate, Can you lift the box.\n\n114\n00:06:13.640 --> 00:06:17.810\nDown here, we get Can you lift the box,\nand can you sleep in the loft.\n\n115\n00:06:17.810 --> 00:06:20.440\nBecause you'll notice That lift,\n\n116\n00:06:20.440 --> 00:06:25.920\nift isn't negated, so\ni is a valid character in there.\n\n117\n00:06:25.920 --> 00:06:31.770\nSo it's looking for l something ft,\nas long as it's not e or u.\n\n118\n00:06:32.960 --> 00:06:36.100\nHopefully that solidifies in your mind.\n\n119\n00:06:36.100 --> 00:06:41.720\nSo sometimes it's easier to say what you\ndon't want, than what you do want, right?\n\n120\n00:06:41.720 --> 00:06:42.930\nThat can happen from time to time.\n\n121\n00:06:42.930 --> 00:06:45.270\nAnd that's typically\nhow you would do that.\n\n122\n00:06:45.270 --> 00:06:46.900\n&gt;&gt; Now, Daniel,\nthis brings up an interesting question.\n\n123\n00:06:46.900 --> 00:06:50.930\nSome of those special characters,\nI don't know if they were used,\n\n124\n00:06:50.930 --> 00:06:54.450\nthis is definitely one of those, again,\nI'm just kinda picking and choosing.\n\n125\n00:06:54.450 --> 00:06:57.230\nCan we think of it as if those\nspecial characters exist inside of\n\n126\n00:06:57.230 --> 00:07:00.273\nthe character classes, then we\nshould be wary about what they mean,\n\n127\n00:07:00.273 --> 00:07:02.011\nbecause the context may have changed?\n\n128\n00:07:02.011 --> 00:07:05.688\n&gt;&gt; I think that's a really good way of\nthinking about it, to be honest with you,\n\n129\n00:07:05.688 --> 00:07:07.113\nis if you kind of enclos them.\n\n130\n00:07:07.113 --> 00:07:11.552\nIf they're not doing or being displayed,\nor used in a normal way,\n\n131\n00:07:11.552 --> 00:07:17.060\nin which you think, then there's probably\nsome other thing going on, okay?\n\n132\n00:07:17.060 --> 00:07:21.740\nJust because you see a care doesn't mean\nthat it is necessarily going to look for\n\n133\n00:07:21.740 --> 00:07:24.640\na string or pattern, beginning of a line.\n\n134\n00:07:24.640 --> 00:07:30.185\nIf it's inside of a set of brackets,\nthen it's being used as negation.\n\n135\n00:07:30.185 --> 00:07:34.343\nAd you can see that, again,\nis a very vast a wide topic,\n\n136\n00:07:34.343 --> 00:07:37.971\nI wanna show you guys the stuff\nthat's typically seen.\n\n137\n00:07:37.971 --> 00:07:41.563\nAnd this is something that I typically\nsee, so I threw it on the here.\n\n138\n00:07:41.563 --> 00:07:45.276\nThere's probably some other educated\nscenarios that I'm not thinking of, and\n\n139\n00:07:45.276 --> 00:07:46.706\nprobably wouldn't think of.\n\n140\n00:07:46.706 --> 00:07:49.707\n[LAUGH] Just because unless\nthat snake's bit you,\n\n141\n00:07:49.707 --> 00:07:52.786\nyou're not gonna have it\non the front of your mind.\n\n142\n00:07:52.786 --> 00:07:56.263\n&gt;&gt; Now, Daniel, you brought up a good\npoint, that a lot times negation, tell me,\n\n143\n00:07:56.263 --> 00:07:57.963\nshow me everything that are not these.\n\n144\n00:07:57.963 --> 00:08:01.651\nBecause you may have to go Well, I want a,\nb, c, d, e, f, g, blah, blah, blah.\n\n145\n00:08:01.651 --> 00:08:06.230\nBut isn't there a way that I can say,\nhere's a short-hand notation for\n\n146\n00:08:06.230 --> 00:08:11.499\nall the things I do want because it's not\npossible to, say, negate these things?\n\n147\n00:08:11.499 --> 00:08:14.070\nLike, there are times where\nnegation is possible.\n\n148\n00:08:14.070 --> 00:08:15.460\nThere are times where they are not.\n\n149\n00:08:15.460 --> 00:08:19.750\nWhat if I have a lot of options and\nI don't have the ability to negate?\n\n150\n00:08:19.750 --> 00:08:20.740\n&gt;&gt; Yeah, that's a great question.\n\n151\n00:08:20.740 --> 00:08:24.230\nAnd this is probably where ranges\nwill come into handy to help you out.\n\n152\n00:08:24.230 --> 00:08:26.460\nYou can say I want a range of things.\n\n153\n00:08:26.460 --> 00:08:29.870\nSo I want zero through nine, right?\n\n154\n00:08:29.870 --> 00:08:32.890\nI want A through Z, that kind of stuff.\n\n155\n00:08:32.890 --> 00:08:34.560\nAnd you can define these ranges.\n\n156\n00:08:34.560 --> 00:08:40.042\nThey're already actually\nbuilt into the regex engines.\n\n157\n00:08:40.042 --> 00:08:44.371\nAnd typically that's the ranges, which\nwe're gonna use is zero through nine or\n\n158\n00:08:44.371 --> 00:08:45.560\nA through Z.\n\n159\n00:08:45.560 --> 00:08:47.880\nLower case and upper case as well, okay?\n\n160\n00:08:47.880 --> 00:08:51.722\nSo we can throw those in there and\nslurp up all the things we're looking for.\n\n161\n00:08:51.722 --> 00:08:55.310\nAnd it's gonna make our lives\na little bit easier in doing so,\n\n162\n00:08:55.310 --> 00:08:57.460\nby just slapping a range on top of it.\n\n163\n00:08:57.460 --> 00:09:00.433\nSo let's take a look and\nsee what that actually looks like,\n\n164\n00:09:00.433 --> 00:09:01.805\nhow that works itself out.\n\n165\n00:09:01.805 --> 00:09:04.870\nI'm gonna clear the screen, give us\na little bit more real estate here.\n\n166\n00:09:04.870 --> 00:09:07.760\nAnd let's start with zero through nine.\n\n167\n00:09:07.760 --> 00:09:11.600\nLet's do this, we'll say sed -n.\n\n168\n00:09:11.600 --> 00:09:14.750\nAnd we will do, actually,\nI've got another file.\n\n169\n00:09:14.750 --> 00:09:19.310\nLet me cat that file first, so\nI'm gonna do cat file2.txt.\n\n170\n00:09:19.310 --> 00:09:21.580\nSo I've got a list of IP addresses.\n\n171\n00:09:21.580 --> 00:09:24.950\nAnd some of them are labeled\non what they are, or\n\n172\n00:09:24.950 --> 00:09:27.210\nwhether they're in test or production.\n\n173\n00:09:27.210 --> 00:09:31.710\nAnd obviously this has been a hodgepodge\nof people that are labeling these things.\n\n174\n00:09:31.710 --> 00:09:34.167\nBecause not everybody\nfollows a convention,\n\n175\n00:09:34.167 --> 00:09:36.122\nespecially if no convention is set.\n\n176\n00:09:36.122 --> 00:09:39.648\nSo one person might put\ncapital letters text, or\n\n177\n00:09:39.648 --> 00:09:42.910\ncapital letters prod for production.\n\n178\n00:09:42.910 --> 00:09:45.010\nSome people might misspell things.\n\n179\n00:09:45.010 --> 00:09:48.880\nI have fat finger stuff like this all\nthe time, where I do te capital ST or\n\n180\n00:09:48.880 --> 00:09:50.430\nsomething like that.\n\n181\n00:09:50.430 --> 00:09:52.690\nDon't let go of the Shift\nkey quick enough.\n\n182\n00:09:52.690 --> 00:09:53.770\nAnd I just keep typing.\n\n183\n00:09:53.770 --> 00:09:54.750\nIt's there.\nIt's fine.\n\n184\n00:09:54.750 --> 00:09:55.440\nNo one cares.\n\n185\n00:09:55.440 --> 00:09:56.691\nOnly the admins look at this anyway.\n\n186\n00:09:56.691 --> 00:09:58.935\nSo what's the big hairy deal, right?\n\n187\n00:09:58.935 --> 00:10:02.270\nWhere the big hairy deal comes in\nis when you're starting to look for\n\n188\n00:10:02.270 --> 00:10:05.690\nspecific strings inside of this file.\n\n189\n00:10:05.690 --> 00:10:07.620\nAnd now it's a hodgepodge, right?\n\n190\n00:10:07.620 --> 00:10:11.280\nOr I'm looking for\na certain range of IP addresses.\n\n191\n00:10:11.280 --> 00:10:16.246\nAnd you notice we've got IP\naddresses all over the here, okay?\n\n192\n00:10:16.246 --> 00:10:17.350\nSo let's do some ranging.\n\n193\n00:10:17.350 --> 00:10:18.470\nLet's do some number ranging here.\n\n194\n00:10:18.470 --> 00:10:22.771\nSo we we'll say sed -n, pipe like so.\n\n195\n00:10:22.771 --> 00:10:25.506\nAnd we'll start off we, we'll look for\n\n196\n00:10:25.506 --> 00:10:30.343\n192.168 cuz it looks like just\nabout everything starts there.\n\n197\n00:10:30.343 --> 00:10:35.260\nAnd we'll do we,\nwe'll say how about two through four.\n\n198\n00:10:35.260 --> 00:10:37.120\nVery simple, just like that,\n\n199\n00:10:37.120 --> 00:10:40.370\ncreated a character class of a range\nof numbers, two, three, and four.\n\n200\n00:10:41.410 --> 00:10:42.330\nEasy peasy?\n\n201\n00:10:42.330 --> 00:10:48.740\nSo that means anything that's 192.168.0 or\n.1 will be ignored.\n\n202\n00:10:48.740 --> 00:10:54.050\nI just want the IP's in range two,\nthree, and four, okay?\n\n203\n00:10:54.050 --> 00:10:57.230\nAnd then, I don't even think\nI need anything after that.\n\n204\n00:10:57.230 --> 00:10:59.740\nYeah, because once it hits that,\nit's gonna match two, three, or four.\n\n205\n00:10:59.740 --> 00:11:01.510\nAnd it's gonna forget everything else.\n\n206\n00:11:01.510 --> 00:11:03.038\nSo I don't need anything to continue out,\n\n207\n00:11:03.038 --> 00:11:06.240\nunless I needed to for\nsome other reason, right?\n\n208\n00:11:06.240 --> 00:11:09.000\nI wanted a specific ending like a host IP,\n\n209\n00:11:09.000 --> 00:11:13.832\nsomething like that, if that's what it\nwas, if this was like a class C address,\n\n210\n00:11:13.832 --> 00:11:18.230\nwhich normally that's kinda\nwhat I was going for here.\n\n211\n00:11:18.230 --> 00:11:18.740\nLet's do that.\n\n212\n00:11:18.740 --> 00:11:20.500\nWe'll say, finish it out.\n\n213\n00:11:20.500 --> 00:11:25.990\nWe'll print it, do that and\nfeed the file2.\n\n214\n00:11:25.990 --> 00:11:33.820\nNow, we get only IP's in the two,\nthree and four ranges, okay?\n\n215\n00:11:33.820 --> 00:11:36.224\nI gave it that range.\n\n216\n00:11:36.224 --> 00:11:42.318\nI could do 2 to 5 or\n2 to 100, 1 to 3, whatever.\n\n217\n00:11:42.318 --> 00:11:43.660\nThat would have worked just fine.\n\n218\n00:11:43.660 --> 00:11:47.250\nThat's an easy way to do your ranging.\n\n219\n00:11:47.250 --> 00:11:49.190\nLet's do A through Z here.\n\n220\n00:11:49.190 --> 00:11:54.740\nSame kind of idea, sed -n, start that.\n\n221\n00:11:54.740 --> 00:12:00.230\nAnd we'll look for, open my\ncharacter class A through Z like so.\n\n222\n00:12:01.880 --> 00:12:05.040\nAnd I will make that at\nthe end of the file.\n\n223\n00:12:06.330 --> 00:12:10.862\nPrint that out, close that up, file2.txt.\n\n224\n00:12:10.862 --> 00:12:19.100\nAnd now I get anything that ends with\na line that has a lowercase letter in it.\n\n225\n00:12:19.100 --> 00:12:21.027\nYou notice that this\nhas a lowercase letter.\n\n226\n00:12:21.027 --> 00:12:22.810\nThis one does, this one does,\nthis one does.\n\n227\n00:12:22.810 --> 00:12:26.510\nBasically bringing those back in,\nall right?\n\n228\n00:12:26.510 --> 00:12:28.818\nNow, let's see here.\n\n229\n00:12:28.818 --> 00:12:30.080\nWhat else we wanna do?\n\n230\n00:12:30.080 --> 00:12:30.830\nUppercase, right?\n\n231\n00:12:30.830 --> 00:12:32.320\nLet's not forget uppercase.\n\n232\n00:12:32.320 --> 00:12:34.319\nDay without sunshine if we did that.\n\n233\n00:12:34.319 --> 00:12:36.242\nLet's bring that back up.\n\n234\n00:12:36.242 --> 00:12:43.420\nAnd we'll just change that out\nfrom a-z to A-Z like that.\n\n235\n00:12:43.420 --> 00:12:49.073\nAnd now I only get things that\nend with an uppercase letter,\n\n236\n00:12:49.073 --> 00:12:52.587\nwhich is TEST, PROD, PRED and AWS.\n\n237\n00:12:52.587 --> 00:12:53.670\nPretty simple.\n\n238\n00:12:53.670 --> 00:12:55.720\nThings are hopefully moving, like yeah.\n\n239\n00:12:55.720 --> 00:12:57.230\nI'm with you, I'm rolling.\n\n240\n00:12:57.230 --> 00:12:58.550\nPunches keep coming, no problem.\n\n241\n00:12:58.550 --> 00:13:00.170\nI'm ducking and jiving, I'm chucking.\n\n242\n00:13:00.170 --> 00:13:02.694\nI'm moving, let's do this.\n\n243\n00:13:02.694 --> 00:13:07.540\nWhat if I wanted to look for\na lowercase letter or an uppercase letter?\n\n244\n00:13:07.540 --> 00:13:08.490\nNow things get fun, right?\n\n245\n00:13:08.490 --> 00:13:10.680\nLet's go back in here.\n\n246\n00:13:10.680 --> 00:13:15.570\nLet's fix it to do the same thing\n\n247\n00:13:15.570 --> 00:13:19.800\nexcept we'll just do this,\na through z and then A through Z.\n\n248\n00:13:21.980 --> 00:13:25.894\nLet's go and look for anything\nthat ends with either a capital or\n\n249\n00:13:25.894 --> 00:13:28.442\na lowercase letter at the end of the file.\n\n250\n00:13:28.442 --> 00:13:32.090\nFire off, and now, I get all,\nbut I'm not getting anything.\n\n251\n00:13:32.090 --> 00:13:38.020\nI'm only getting cuz there was some of\nthese files up here had this and that.\n\n252\n00:13:38.020 --> 00:13:40.050\nThere was no labeling.\n\n253\n00:13:40.050 --> 00:13:42.273\nSo it's not seeing those.\n\n254\n00:13:42.273 --> 00:13:43.950\nIt's only bringing back\nstuff that we're giving.\n\n255\n00:13:43.950 --> 00:13:47.100\nRemember, pattern\nmatching is difficult but\n\n256\n00:13:47.100 --> 00:13:49.556\nimportant to make sure that you get\nexactly what you're looking for.\n\n257\n00:13:49.556 --> 00:13:52.060\nIf you're not seeing your results time\nto go back to the drawing board and\n\n258\n00:13:52.060 --> 00:13:54.230\nsee why you're missing\nwhat you're missing.\n\n259\n00:13:54.230 --> 00:13:58.360\nHopefully, I'm giving you enough\ntools today to make that happen.\n\n260\n00:13:58.360 --> 00:14:02.318\nDaniel, now, in my programming experience,\nit almost seems that lowercase and\n\n261\n00:14:02.318 --> 00:14:05.410\nuppercase are kind of just\na continuation of the same scale.\n\n262\n00:14:05.410 --> 00:14:10.323\nIf I were to take this example, and\ninstead of concatenating the lowercase a,\n\n263\n00:14:10.323 --> 00:14:14.117\nto the lowercase z and\nthe uppercase A to the uppercase Z, and\n\n264\n00:14:14.117 --> 00:14:18.302\nI just said lowercase a to upper\ncase Z does that work in that range?\n\n265\n00:14:18.302 --> 00:14:22.402\nLike are those ranged like that, or\nwill it just kind of fail on me, or\n\n266\n00:14:22.402 --> 00:14:23.980\nI should just not do that?\n\n267\n00:14:23.980 --> 00:14:24.630\n&gt;&gt; I'll be honest.\n\n268\n00:14:24.630 --> 00:14:26.270\nI don't understand what you're asking.\n\n269\n00:14:26.270 --> 00:14:30.680\n&gt;&gt; So instead of having lowercase a to\nlowercase z and then, the uppercase\n\n270\n00:14:30.680 --> 00:14:35.000\nportion, what if I just remove the middle\npart and say, lowercase a to uppercase Z?\n\n271\n00:14:36.060 --> 00:14:36.845\n&gt;&gt; Yeah, that won't work.\n\n272\n00:14:36.845 --> 00:14:39.560\n[LAUGH] Yeah, that's not gonna work.\n\n273\n00:14:39.560 --> 00:14:42.420\nThat would be awesome,\nbut it doesn't do that.\n\n274\n00:14:42.420 --> 00:14:48.430\nIt doesn't combine the two range sets\ntogether if you just do, not in my.\n\n275\n00:14:48.430 --> 00:14:49.790\nI mean, we can test, you never know.\n\n276\n00:14:49.790 --> 00:14:53.510\nMaybe it's some random feature\nthat I was unaware of.\n\n277\n00:14:53.510 --> 00:14:55.226\n&gt;&gt; This is one of those things where-\n&gt;&gt; Easy thing to do.\n\n278\n00:14:55.226 --> 00:15:00.496\n&gt;&gt; I think of an ASCII representation\nwhere the letters are contiguous or\n\n279\n00:15:00.496 --> 00:15:02.200\nsome scale like that.\n\n280\n00:15:02.200 --> 00:15:05.439\nWhere lowercase a starts here, and then\nwe run all the way through uppercase Z.\n\n281\n00:15:06.500 --> 00:15:10.940\nBut I didn't know if the regex\nengine does something like that or\n\n282\n00:15:10.940 --> 00:15:14.348\nif it's no, we're looking for\nthese particular things.\n\n283\n00:15:14.348 --> 00:15:18.270\n&gt;&gt; Yeah, and what's weird is maybe\nJustin has actually seen that before,\n\n284\n00:15:18.270 --> 00:15:19.410\nand it worked.\n\n285\n00:15:19.410 --> 00:15:22.490\nDifferent programs work with\nregex in different ways.\n\n286\n00:15:22.490 --> 00:15:26.631\nSo you have to be familiar with how regex\nworks with the program you are using\n\n287\n00:15:26.631 --> 00:15:27.167\nas well.\n\n288\n00:15:27.167 --> 00:15:29.304\nAnd maybe that works, maybe it doesn't.\n\n289\n00:15:29.304 --> 00:15:33.030\nI don't think it works in this instance\nbut I could be well surprised.\n\n290\n00:15:33.030 --> 00:15:35.920\nI definitely want to try.\n\n291\n00:15:35.920 --> 00:15:37.180\nWe did get something back.\n\n292\n00:15:37.180 --> 00:15:39.136\nIt did work, so there.\n\n293\n00:15:39.136 --> 00:15:42.660\nI was unaware that,\nthat it would work that way.\n\n294\n00:15:42.660 --> 00:15:45.630\nNow I've actually added to\nmy experience with regex\n\n295\n00:15:45.630 --> 00:15:47.330\ninside we're using at least sed.\n\n296\n00:15:47.330 --> 00:15:51.120\nSo, play around with these things,\nlike I said.\n\n297\n00:15:51.120 --> 00:15:54.332\nIt's a long journey to\nunderstanding regex.\n\n298\n00:15:54.332 --> 00:15:58.197\nFinding out cool little shortcuts\nlike that is going to help you get\n\n299\n00:15:58.197 --> 00:16:00.554\nto your destination a whole lot faster.\n\n300\n00:16:00.554 --> 00:16:03.881\nAnd with a lot less typing and\ncharacter utilization.\n\n301\n00:16:03.881 --> 00:16:05.130\nSo that's cool.\n\n302\n00:16:05.130 --> 00:16:07.014\nI now can add that to my bag.\n\n303\n00:16:07.014 --> 00:16:10.060\n&gt;&gt; Now I have a follow-up question\nbecause that would have worked.\n\n304\n00:16:10.060 --> 00:16:12.274\nWhat if it's an uppercase A and\na lowercase z?\n\n305\n00:16:12.274 --> 00:16:13.530\n&gt;&gt; I love it.\n\n306\n00:16:13.530 --> 00:16:15.410\nThis is all on the fly,\nladies and gentlemen.\n\n307\n00:16:15.410 --> 00:16:17.360\nWe did not script this.\n\n308\n00:16:17.360 --> 00:16:20.180\nWe're gonna try it, though,\ncuz that's a great question.\n\n309\n00:16:20.180 --> 00:16:23.370\n&gt;&gt; I would assume that it would work,\nsince the other did.\n\n310\n00:16:23.370 --> 00:16:26.980\nOops, z, invalid range.\n\n311\n00:16:26.980 --> 00:16:28.002\nSo there you go.\n\n312\n00:16:28.002 --> 00:16:32.827\n&gt;&gt; So it looks like for these character\nranges, they actually have an ordering,\n\n313\n00:16:32.827 --> 00:16:33.350\nright?\n\n314\n00:16:33.350 --> 00:16:35.470\nSo lowercase first, then uppercase.\n\n315\n00:16:35.470 --> 00:16:41.640\nAs long as you know that, do keep in\nregard, readability is important.\n\n316\n00:16:41.640 --> 00:16:44.260\nSo if you start doing a bunch of\ncrazy tricks like this all in this\n\n317\n00:16:44.260 --> 00:16:45.450\ngiant expression,\n\n318\n00:16:45.450 --> 00:16:49.770\nyou might be better off to keep them\nseparate to further denote your attention.\n\n319\n00:16:49.770 --> 00:16:52.534\nI want either lowercase letters or\nuppercase letters or\n\n320\n00:16:52.534 --> 00:16:53.839\nthings of that nature so.\n\n321\n00:16:53.839 --> 00:16:55.300\nBut that's pretty cool that it works.\n\n322\n00:16:55.300 --> 00:16:59.100\nAnd there is an inherent\nordering to the character sets.\n\n323\n00:16:59.100 --> 00:16:59.910\n&gt;&gt; Yeah, yeah, and\n\n324\n00:16:59.910 --> 00:17:03.660\nknowing that is gonna help you get the\nresults that you're actually looking for.\n\n325\n00:17:03.660 --> 00:17:07.880\nSo very cool, we had a lot of fun\nplaying around figuring this out.\n\n326\n00:17:07.880 --> 00:17:09.230\nAnd do the same thing.\n\n327\n00:17:09.230 --> 00:17:11.940\nDo not let your curiosity be a barrier,\n\n328\n00:17:11.940 --> 00:17:16.570\nlet it be actually like a springboard\ninto playing around with this stuff.\n\n329\n00:17:16.570 --> 00:17:18.730\nThere's no law against\ntyping something in and\n\n330\n00:17:18.730 --> 00:17:22.358\nhitting Enter as long as it's not like\nbreaking into a DOD server or something.\n\n331\n00:17:22.358 --> 00:17:25.260\nSo [LAUGH] don't do that,\nthere are laws against that.\n\n332\n00:17:25.260 --> 00:17:28.250\nBut play around with regex,\nsee how you can make it work.\n\n333\n00:17:28.250 --> 00:17:31.930\nRead the documentation that you can\nfind on it because it can make your life\n\n334\n00:17:31.930 --> 00:17:35.100\na whole lot easier and\nmore difficult at the same time,\n\n335\n00:17:35.100 --> 00:17:38.340\nif that makes any sense\nbecause it's complicated.\n\n336\n00:17:38.340 --> 00:17:39.683\nAll right, so let's move on here.\n\n337\n00:17:39.683 --> 00:17:41.418\nI did wanna take a look\nat this other example.\n\n338\n00:17:41.418 --> 00:17:44.370\nI'm just gonna type it in here and\nwe'll take a look at what's going on.\n\n339\n00:17:46.340 --> 00:17:48.020\nSee here, do this.\n\n340\n00:17:48.020 --> 00:17:50.102\nAnd I'm gonna make character class.\n\n341\n00:17:50.102 --> 00:17:54.880\nI'm gonna say, a through p, and\nthen I'm gonna do, a through p,\n\n342\n00:17:54.880 --> 00:18:01.070\nand then, I'm gonna put t t, like this.\n\n343\n00:18:01.070 --> 00:18:02.950\nI'm gonna close it out.\n\n344\n00:18:02.950 --> 00:18:05.500\nAnd then I'll print that out.\n\n345\n00:18:05.500 --> 00:18:09.460\nHit this, read the file,\n.text and see what we get.\n\n346\n00:18:10.470 --> 00:18:17.410\nNow what I'm doing here is I'm saying I\nwant anything with a through p lowercase.\n\n347\n00:18:17.410 --> 00:18:19.720\nI want anything with\nA through P uppercase.\n\n348\n00:18:19.720 --> 00:18:22.540\nAnd then lowercase d or t, right?\n\n349\n00:18:22.540 --> 00:18:24.720\nSo this gives me tests.\n\n350\n00:18:26.880 --> 00:18:31.480\nProduction comes in, because of\nthe capitalization of the P, right?\n\n351\n00:18:32.690 --> 00:18:34.392\nI'm starting to work it out.\n\n352\n00:18:34.392 --> 00:18:39.030\nI wanna be able to grab,\nmaybe some specific little things.\n\n353\n00:18:39.030 --> 00:18:43.220\nI don't need the entire range of\nA through Z, even though that will work.\n\n354\n00:18:43.220 --> 00:18:45.677\nAgain, contrived examples.\n\n355\n00:18:45.677 --> 00:18:47.990\nAnd as Justin says hand wavy,\nhand wavy, hand wavy.\n\n356\n00:18:47.990 --> 00:18:52.190\nJust trying to show you that you may\nneed to employ this type of tactic from\n\n357\n00:18:52.190 --> 00:18:57.030\ntime to time and that you can do it\ngiving you the knowledge that it exists.\n\n358\n00:18:57.030 --> 00:19:00.855\nI didn't have any practical [LAUGH]\nscenario in which I would work with this,\n\n359\n00:19:00.855 --> 00:19:03.082\nso I just kind of like\nthrew it all together.\n\n360\n00:19:03.082 --> 00:19:07.061\nYou can shuck and jive with the ranges and\nI'll slap them together and\n\n361\n00:19:07.061 --> 00:19:09.890\nget really relative with them,\nwhen need be.\n\n362\n00:19:09.890 --> 00:19:12.550\nSo don't be afraid to do that as well,\nvery cool stuff.\n\n363\n00:19:13.580 --> 00:19:16.300\nAll right, where we going to?\n\n364\n00:19:16.300 --> 00:19:18.310\nSpecial character classes.\n\n365\n00:19:18.310 --> 00:19:20.840\nLet's clear the screen.\n\n366\n00:19:20.840 --> 00:19:21.800\nI've got a file here.\n\n367\n00:19:21.800 --> 00:19:24.810\nCat's special character classes.\n\n368\n00:19:24.810 --> 00:19:26.500\nSo very cool.\n\n369\n00:19:26.500 --> 00:19:30.330\nI like this, that this is in here,\nvery neat stuff.\n\n370\n00:19:30.330 --> 00:19:32.210\nBasically, I can say,\n\n371\n00:19:32.210 --> 00:19:36.860\nhere are some character classes that\nare predefined and a little easier for\n\n372\n00:19:36.860 --> 00:19:40.500\nme to remember and work with because\nof the way that they are labeled.\n\n373\n00:19:40.500 --> 00:19:41.573\nAnd as you see they're all kinda labeled.\n\n374\n00:19:41.573 --> 00:19:44.260\nYou have a class and\nhere's the description of the class.\n\n375\n00:19:44.260 --> 00:19:51.370\nI can do bracket-bracket, colon-colon,\nalpha in the middle, right.\n\n376\n00:19:51.370 --> 00:19:55.470\nThat matches any alphabetical\ncharacter either upper or lowercase.\n\n377\n00:19:55.470 --> 00:19:57.360\nSo instead of doing\na through z kind of thing,\n\n378\n00:19:57.360 --> 00:19:59.550\nI can just say, alpha in this format.\n\n379\n00:20:00.620 --> 00:20:05.295\nBada bing, I've covered all my alpha\ncharacters, either upper or lowercase.\n\n380\n00:20:06.450 --> 00:20:10.670\nAl num, matches any alphanumeric character\nzero through nine, a through z or A to Z,\n\n381\n00:20:10.670 --> 00:20:13.010\ncapital or lowercase.\n\n382\n00:20:13.010 --> 00:20:14.430\nPretty cool, right?\n\n383\n00:20:14.430 --> 00:20:17.470\nBlank matches a space or a tab character.\n\n384\n00:20:17.470 --> 00:20:21.872\nDigit matches numeric or\ndigits from zero through nine.\n\n385\n00:20:21.872 --> 00:20:25.922\nI've got lowercases matching\nany lowercase alphabet, so\n\n386\n00:20:25.922 --> 00:20:31.187\ngiving us a lot of cool control over what\nwe're matching with a bit of an easier\n\n387\n00:20:31.187 --> 00:20:35.894\nformat as far as when it comes to\nputting it in the old nugget, right?\n\n388\n00:20:35.894 --> 00:20:39.010\nWe've got print matches\nany printable character.\n\n389\n00:20:39.010 --> 00:20:42.580\nPunc for\nmatches any punctuation character, cool.\n\n390\n00:20:42.580 --> 00:20:44.920\nSpace matches any white space character,\ntabs,\n\n391\n00:20:44.920 --> 00:20:50.050\nnewlines, carriage returns,\nall that kinda business.\n\n392\n00:20:50.050 --> 00:20:54.920\nUpper matches any uppercase alphabetical,\nright, just kinda like lower but\n\n393\n00:20:54.920 --> 00:20:56.880\nthe opposite, so cool.\n\n394\n00:20:56.880 --> 00:20:59.230\nWe can throw those in and\nstart using those.\n\n395\n00:20:59.230 --> 00:21:02.600\nAgain, more capability,\nmore functionality.\n\n396\n00:21:02.600 --> 00:21:05.210\nI just want you guys to\nbe aware that it's there.\n\n397\n00:21:05.210 --> 00:21:07.120\nMaybe you like doing arranges\nlike we did them before.\n\n398\n00:21:07.120 --> 00:21:08.390\nIt's great, you can do that.\n\n399\n00:21:08.390 --> 00:21:11.120\nMaybe you like this,\nmaybe this is easier for you to remember.\n\n400\n00:21:11.120 --> 00:21:12.530\nGreat, throw it in there.\n\n401\n00:21:12.530 --> 00:21:17.708\nI wanna just give you guys options and\nhave you explore how you can work it out.\n\n402\n00:21:17.708 --> 00:21:22.210\nSo I do also wanna show you it working,\nso you at least have some context to it.\n\n403\n00:21:22.210 --> 00:21:22.810\nSo let's do that.\n\n404\n00:21:22.810 --> 00:21:23.770\nI'm gonna clear here.\n\n405\n00:21:25.160 --> 00:21:29.459\nAnd let's see here.\n\n406\n00:21:29.459 --> 00:21:34.550\nLet's do this, sed -n, like so.\n\n407\n00:21:34.550 --> 00:21:38.050\nThrow in my, no, oops, that's not right.\n\n408\n00:21:38.050 --> 00:21:39.200\nThere we go.\n\n409\n00:21:39.200 --> 00:21:43.429\nLike this, and one, and\nwe'll say, alpha, right?\n\n410\n00:21:43.429 --> 00:21:49.170\nIt's an easy one,\nalpha colon, oop, like that.\n\n411\n00:21:49.170 --> 00:21:53.580\nAnd then print it, very simple.\n\n412\n00:21:53.580 --> 00:21:56.518\nLike I said, this isn't supposed\nto be rocket science here.\n\n413\n00:21:56.518 --> 00:22:01.030\nI just wanna show you how it works\nout when you use it in its context.\n\n414\n00:22:01.030 --> 00:22:06.340\nThat's what it would look like, -p,\nfeed it the file like passwords.txt.\n\n415\n00:22:06.340 --> 00:22:10.607\nAnd now it's giving me passwords with,\nso what was alpha?\n\n416\n00:22:10.607 --> 00:22:16.320\nAlpha is matches any alphabetical\ncharacter, either upper or lowercase.\n\n417\n00:22:16.320 --> 00:22:20.635\nSo it's looking in the password file for\nany upper or\n\n418\n00:22:20.635 --> 00:22:25.024\nlowercase character, and returning it,\nwhich is probably the entire file.\n\n419\n00:22:25.024 --> 00:22:27.520\nThat's passwords.txt,\n\n420\n00:22:27.520 --> 00:22:30.950\nyeah, looks to be, which is exactly\nwhat it should have done, right?\n\n421\n00:22:30.950 --> 00:22:32.010\nSo very easy.\n\n422\n00:22:32.010 --> 00:22:35.281\nLet's do digits just again\nto give you an idea.\n\n423\n00:22:35.281 --> 00:22:37.685\nI'll just change that out for digit.\n\n424\n00:22:39.548 --> 00:22:43.000\nAnd this should give me any line with\na digit in it, right, and there we go.\n\n425\n00:22:43.000 --> 00:22:48.000\nFlower girl 2, 1 secret 1,\nblue dog 003, right?\n\n426\n00:22:48.000 --> 00:22:49.340\nSuper easy to work with.\n\n427\n00:22:49.340 --> 00:22:53.010\nAnd for me, they're easy to remember,\nbecause of how they're labeled.\n\n428\n00:22:53.010 --> 00:22:55.090\nSo pretty, pretty simple there.\n\n429\n00:22:56.610 --> 00:22:59.480\nAll right, let's move into,\nlet's get out of ranges and\n\n430\n00:22:59.480 --> 00:23:03.140\nlet's get back into more wild card stuff,\nright?\n\n431\n00:23:03.140 --> 00:23:07.388\nAnd when I say wild card, I mean,\nI don't really know what it is, so\n\n432\n00:23:07.388 --> 00:23:11.788\nI can't give you an honest to goodness\nrange of things to work with, or\n\n433\n00:23:11.788 --> 00:23:13.678\na specific character class.\n\n434\n00:23:13.678 --> 00:23:16.959\nSo I just need you to\nkinda grab some whatevers,\n\n435\n00:23:16.959 --> 00:23:19.267\nright, and give that back to me.\n\n436\n00:23:19.267 --> 00:23:21.420\nLet's start off with the asterisks.\n\n437\n00:23:21.420 --> 00:23:26.741\nAll right, let's go back to our file,\ncats of regex special characters.\n\n438\n00:23:26.741 --> 00:23:33.752\nWe've got preceding, a match preceding\ncharacter 0 or more times, all right?\n\n439\n00:23:33.752 --> 00:23:37.151\nSo we looked at the dot, which is\nactually a wild card character as well,\n\n440\n00:23:37.151 --> 00:23:41.530\nwhich pattern matched any single character\nexcept new line characters, right?\n\n441\n00:23:41.530 --> 00:23:42.410\nThis is a little different.\n\n442\n00:23:42.410 --> 00:23:47.722\nAs you can see,\nmatch preceding character 0 or more times.\n\n443\n00:23:47.722 --> 00:23:54.598\nSo if the word was bake,\nand I put B-A-K-star,\n\n444\n00:23:54.598 --> 00:24:00.182\nor asterisk, it's gonna match that K.\n\n445\n00:24:00.182 --> 00:24:01.278\nZero times, maybe.\n\n446\n00:24:01.278 --> 00:24:05.653\nSo, if I'm BAK, it'll find BAKE, but\n\n447\n00:24:05.653 --> 00:24:12.110\nit'll even find BAE,\ncuz it matches it zero or more times.\n\n448\n00:24:12.110 --> 00:24:13.319\nKeep that in mind.\n\n449\n00:24:13.319 --> 00:24:16.912\nThis is where this stuff\ngets a little sketchy, and\n\n450\n00:24:16.912 --> 00:24:21.605\nas Justin was saying before,\nkind of at the edge of my boundaries.\n\n451\n00:24:21.605 --> 00:24:24.687\nRemembering exactly what\neach one of these things do,\n\n452\n00:24:24.687 --> 00:24:28.908\nthis is where my cheat sheets come\nsuper handy, because I'm always like,\n\n453\n00:24:28.908 --> 00:24:31.910\nwhich one of these does\nthis specific thing?\n\n454\n00:24:31.910 --> 00:24:36.070\nAnd you're like, that's weird,\nwhy would you do zero times?\n\n455\n00:24:36.070 --> 00:24:40.870\nEvery now and then,\nthat case scenario comes up when I don't,\n\n456\n00:24:40.870 --> 00:24:43.300\nsometimes I want to match this\ncharacter but sometimes I don't.\n\n457\n00:24:43.300 --> 00:24:44.460\nIt's okay if it's not there.\n\n458\n00:24:45.630 --> 00:24:47.330\nAll right, maybe I misspelled it,\nwho knows?\n\n459\n00:24:47.330 --> 00:24:48.790\nPlenty of ideas in which that can happen.\n\n460\n00:24:50.340 --> 00:24:51.560\nLet's see here.\n\n461\n00:24:51.560 --> 00:24:53.150\nLet's take a look at how I can use this.\n\n462\n00:24:53.150 --> 00:24:54.930\nI've got an example here, sed.\n\n463\n00:24:54.930 --> 00:24:57.950\nI've got this cat food.txt.\n\n464\n00:24:57.950 --> 00:24:58.930\nWhat would you like for dinner?\n\n465\n00:24:58.930 --> 00:24:59.940\nLet's dine out tonight.\n\n466\n00:24:59.940 --> 00:25:03.490\nOkay, soon as I'm done with this we'll go,\nwhat are you doing?\n\n467\n00:25:03.490 --> 00:25:05.780\nI'm reading about the melancholy dane.\n\n468\n00:25:05.780 --> 00:25:08.050\nI know that's a very, I wrote this.\n\n469\n00:25:08.050 --> 00:25:09.220\nI needed the examples.\n\n470\n00:25:09.220 --> 00:25:11.730\nSo you gotta do what you gotta do,\nladies and gentlemen.\n\n471\n00:25:11.730 --> 00:25:14.530\nSometimes your hand is forced and\nyou get weird little things like this.\n\n472\n00:25:14.530 --> 00:25:17.850\nSo now we can actually make\nsome examples out of this.\n\n473\n00:25:17.850 --> 00:25:19.124\nSo let's do this, sed -n.\n\n474\n00:25:20.400 --> 00:25:24.610\nStart my little do-hickey here,\nand we'll do d\n\n475\n00:25:27.120 --> 00:25:32.180\nand [aeiou], throw in the vowels, like so.\n\n476\n00:25:32.180 --> 00:25:38.215\nThen we're going to make 8 a star as\nthe special character and then an e.\n\n477\n00:25:38.215 --> 00:25:44.572\nAnd then we are going to p food.text and\n\n478\n00:25:44.572 --> 00:25:48.505\nwe found nothing, interesting.\n\n479\n00:25:48.505 --> 00:25:49.249\n&gt;&gt; Now, Daniel,\n\n480\n00:25:49.249 --> 00:25:52.790\nwill we need to negate this [CROSSTALK]\n&gt;&gt; I think there was probably a typo.\n\n481\n00:25:52.790 --> 00:25:56.196\nI think I just [INAUDIBLE] I'm just\nfollowing my own notes verbatim and\n\n482\n00:25:56.196 --> 00:25:58.964\nthere we go, yeah,\ndidn't need a special character.\n\n483\n00:25:58.964 --> 00:26:00.660\nI guarantee you it's a typo.\n\n484\n00:26:00.660 --> 00:26:02.748\nJust fat finger happens.\n\n485\n00:26:02.748 --> 00:26:05.330\nThey're chubby digits, what can I say?\n\n486\n00:26:05.330 --> 00:26:09.778\nSo now, here we go, we get dine\nas soon as I am done, all right?\n\n487\n00:26:09.778 --> 00:26:12.740\nI'm reading about the Melancholy Dane, so\n\n488\n00:26:12.740 --> 00:26:15.789\nit found those things,\nas I was looking for.\n\n489\n00:26:15.789 --> 00:26:17.049\nAnd very simple,\n\n490\n00:26:17.049 --> 00:26:22.900\nthat star right there let it know\nthat I wanted aeiou, so some vowels.\n\n491\n00:26:22.900 --> 00:26:29.440\nAnd then, remember, preceding character\ncould be there or not, zero or more times.\n\n492\n00:26:29.440 --> 00:26:33.139\nSo there could have been d and e and\nit would have found that, okay?\n\n493\n00:26:33.139 --> 00:26:34.610\nSo just keep that in mind.\n\n494\n00:26:34.610 --> 00:26:38.850\nBut that's typically how you'll use a star\npattern and it's probably the most,\n\n495\n00:26:38.850 --> 00:26:40.300\nthe dot and the asterisk,\n\n496\n00:26:40.300 --> 00:26:45.880\nprobably the most prevalently used\nwildcard characters in regular expression.\n\n497\n00:26:45.880 --> 00:26:48.389\nAll right, let's move on a little bit,\nlet's look at the question mark.\n\n498\n00:26:48.389 --> 00:26:49.971\nSo the question mark,\n\n499\n00:26:49.971 --> 00:26:54.814\nup here says matching preceding\ncharacter zero or one time, right?\n\n500\n00:26:54.814 --> 00:26:59.930\nSo it could be no times or\nit could be just once.\n\n501\n00:26:59.930 --> 00:27:02.750\nIf there's twice, well,\nit won't do it, right?\n\n502\n00:27:02.750 --> 00:27:03.700\nGet the idea?\n\n503\n00:27:03.700 --> 00:27:04.228\nSame idea, though.\n\n504\n00:27:04.228 --> 00:27:10.409\nWe just bring this back up and\nwe'll change that out to a question mark.\n\n505\n00:27:10.409 --> 00:27:11.760\nSee what that does.\n\n506\n00:27:11.760 --> 00:27:13.374\nI don't know that it'll do anything.\n\n507\n00:27:13.374 --> 00:27:15.220\nYeah, didn't do anything, right?\n\n508\n00:27:15.220 --> 00:27:18.090\nBecause it didn't find that.\n\n509\n00:27:18.090 --> 00:27:19.450\nLet's look at the plus sign.\n\n510\n00:27:19.450 --> 00:27:20.630\nWhat does the plus sign do?\n\n511\n00:27:20.630 --> 00:27:25.530\nPlus sign says match preceding\ncharacter one or more times, so\n\n512\n00:27:25.530 --> 00:27:28.230\nit must be there at least once.\n\n513\n00:27:28.230 --> 00:27:32.430\nThere must be this val option,\nso we make sure.\n\n514\n00:27:32.430 --> 00:27:35.790\nActually, I think I'll do, let's do gawk.\n\n515\n00:27:35.790 --> 00:27:41.010\nWe've been setting it up a bit, let's\njust throw some gawk on the file here.\n\n516\n00:27:41.010 --> 00:27:47.126\nLet's try echo \"This is a bad sentence\",\nlike so.\n\n517\n00:27:47.126 --> 00:27:53.601\nAnd then we will pipe that into gawk and\ndo a little bit of this action.\n\n518\n00:27:53.601 --> 00:27:57.498\nWe'll say b[aeiou].\n\n519\n00:27:57.498 --> 00:28:00.804\nOops, okay, thank you, sir.\n\n520\n00:28:00.804 --> 00:28:02.870\nTry that again.\n\n521\n00:28:02.870 --> 00:28:04.710\nI always want to hit\nthe shift key on that so bad.\n\n522\n00:28:04.710 --> 00:28:07.240\nI don't know why,\nI think it's just out of my brain.\n\n523\n00:28:07.240 --> 00:28:12.450\naeiou, close her out and\nadd the plus symbol and then d.\n\n524\n00:28:12.450 --> 00:28:16.400\nSo I'm basically,\nI'm looking for bad, right?\n\n525\n00:28:16.400 --> 00:28:22.225\nAnd remember It has to be receiving\ncharacter one or more times.\n\n526\n00:28:22.225 --> 00:28:25.763\nAnd then we'll just print that out.\n\n527\n00:28:25.763 --> 00:28:29.150\nLet's say, print dollar sign zero.\n\n528\n00:28:30.910 --> 00:28:35.260\nJust so you can see it's kind of a gawk or\nawk context.\n\n529\n00:28:35.260 --> 00:28:36.620\nThere we go.\n\n530\n00:28:36.620 --> 00:28:42.785\nUnterminated expression, I must have,\nI did, I forgot something.\n\n531\n00:28:42.785 --> 00:28:46.889\n[SOUND] There we go, I'm just\nmessing this one, all sorts of up.\n\n532\n00:28:46.889 --> 00:28:50.636\nLooks like everything is good.\n\n533\n00:28:50.636 --> 00:28:57.780\nBing, bing, bing, gawk that out, print for\nreading this such file or directory.\n\n534\n00:28:59.690 --> 00:29:02.016\nThat should work.\n\n535\n00:29:02.016 --> 00:29:07.289\n[INAUDIBLE]\n&gt;&gt; Should that print be in single quote,\n\n536\n00:29:07.289 --> 00:29:08.590\nthe dollar sign?\n\n537\n00:29:08.590 --> 00:29:14.135\n&gt;&gt; It might need to be like,\nit might need to do this one.\n\n538\n00:29:14.135 --> 00:29:18.194\nThere we go,\nit went a little berserk there, but\n\n539\n00:29:18.194 --> 00:29:22.120\nI must have typed it wrong, which I did.\n\n540\n00:29:22.120 --> 00:29:22.780\nBut it did, right?\n\n541\n00:29:22.780 --> 00:29:25.940\nThat's the idea, forget my bad gawking.\n\n542\n00:29:25.940 --> 00:29:30.315\n[LAUGH] The idea was to see the fact that\nwe were able to use that plus sign, and\n\n543\n00:29:30.315 --> 00:29:31.020\nit worked.\n\n544\n00:29:31.020 --> 00:29:33.720\nAnd that's the context,\nthat's how it's used.\n\n545\n00:29:33.720 --> 00:29:35.606\nNot specifically that this\nis the best example of it.\n\n546\n00:29:35.606 --> 00:29:41.654\nBut I see, I put a plus and it looks for\nsomething one or more times, all right?\n\n547\n00:29:41.654 --> 00:29:43.240\nAnd that's how I put that in.\n\n548\n00:29:43.240 --> 00:29:47.050\nThat's how I shoe horn that into\nsomething that I'm searching for.\n\n549\n00:29:47.050 --> 00:29:48.750\nThat's what I want you to take away.\n\n550\n00:29:48.750 --> 00:29:53.891\n&gt;&gt; Now Daniel,\nthis would also match BAAD, BAAAD, right?\n\n551\n00:29:53.891 --> 00:29:59.440\nBut since it's a character class,\nI think I'm saying that right.\n\n552\n00:29:59.440 --> 00:30:06.170\nCould I do baed, since this is a class,\ndoes that plus character say,\n\n553\n00:30:06.170 --> 00:30:11.970\nas long as it's a repetition of these\nset of characters, does baed also work?\n\n554\n00:30:11.970 --> 00:30:14.510\n&gt;&gt; Good question, let's run it up and\nsee what happens.\n\n555\n00:30:14.510 --> 00:30:15.200\nLet's do that.\n\n556\n00:30:15.200 --> 00:30:19.410\nWe'll change this to baed, like so.\n\n557\n00:30:19.410 --> 00:30:20.720\nOkay, look, it prints it out.\n\n558\n00:30:20.720 --> 00:30:25.295\nHey, what happens if we do baeed?\n\n559\n00:30:25.295 --> 00:30:29.050\nAnd look, it prints it out, because\nit's one or more of the character class.\n\n560\n00:30:29.050 --> 00:30:31.130\nThat was a good call by Justin,\nhe saw that.\n\n561\n00:30:31.130 --> 00:30:37.050\nWe're defining a set of characters that we\nwant it to find at least one time or more.\n\n562\n00:30:37.050 --> 00:30:38.530\nIf there's more, that's fine.\n\n563\n00:30:38.530 --> 00:30:40.696\nThrow it on as long as it's at\nthe side of the character class.\n\n564\n00:30:40.696 --> 00:30:43.286\nAs soon as the character class stops,\nit should end.\n\n565\n00:30:43.286 --> 00:30:48.440\nSo baeeedd should give me dd, right?\n\n566\n00:30:48.440 --> 00:30:50.840\nAnd not or it should stop.\n\n567\n00:30:50.840 --> 00:30:54.889\nI can't go baeeeded,\nyou see what I'm saying?\n\n568\n00:30:54.889 --> 00:30:56.092\nHopefully, that makes sense.\n\n569\n00:30:56.092 --> 00:31:00.870\nIt starts getting very muddled,\nbut that's the idea.\n\n570\n00:31:00.870 --> 00:31:05.400\nLook for this at least once,\nif not more, that's fine.\n\n571\n00:31:05.400 --> 00:31:07.030\nAnd then return.\n\n572\n00:31:07.030 --> 00:31:11.284\nSo if I had, which is something\nthat happens, if I biid for\n\n573\n00:31:11.284 --> 00:31:14.905\nbid or I'm trying to type bed and\nI go beeed,\n\n574\n00:31:14.905 --> 00:31:20.860\ncuz my key got stuck and I didn't realize\nit and I'm not even paying attention.\n\n575\n00:31:20.860 --> 00:31:23.840\nAnd, I need to go back and\nfind all those error mistakes where my\n\n576\n00:31:23.840 --> 00:31:28.110\ne key was getting stuck to look for\nthis, that kind of thing.\n\n577\n00:31:28.110 --> 00:31:31.200\nSo that's where you\nstart using this stuff.\n\n578\n00:31:31.200 --> 00:31:32.480\nAll right, let's see what else do we got.\n\n579\n00:31:32.480 --> 00:31:34.510\nI know we got a little bit more to go.\n\n580\n00:31:34.510 --> 00:31:37.400\nNot much, I'll see if we can quickly\npop our way through this and\n\n581\n00:31:37.400 --> 00:31:39.400\nwe'll call it a day on regular expression.\n\n582\n00:31:39.400 --> 00:31:40.770\nSuper easy stuff.\n\n583\n00:31:40.770 --> 00:31:42.530\nLet's look at curly braces.\n\n584\n00:31:42.530 --> 00:31:46.910\nLittle shapely looking things.\n\n585\n00:31:46.910 --> 00:31:50.409\nThese guys right here that I always\nwant to type for square brackets but\n\n586\n00:31:50.409 --> 00:31:51.786\naren't square brackets.\n\n587\n00:31:51.786 --> 00:31:55.804\nThese guys can basically give you a cap,\nlike a, don't,\n\n588\n00:31:55.804 --> 00:31:58.838\nhere's kind of your This and that, right?\n\n589\n00:31:58.838 --> 00:32:01.405\nLet me show you what I mean here.\n\n590\n00:32:01.405 --> 00:32:03.330\nLet's say, what file do we got here?\n\n591\n00:32:03.330 --> 00:32:07.310\nLet's cat file three,\nso you've got all this.\n\n592\n00:32:07.310 --> 00:32:10.650\nThis is a good sentence, this is a good\nsentence, good, good, good, right?\n\n593\n00:32:10.650 --> 00:32:11.710\nLet's do this.\n\n594\n00:32:11.710 --> 00:32:18.588\nIf I say, I'll use grep for\nthis,- E is an extended grep.\n\n595\n00:32:18.588 --> 00:32:23.857\nLet's say, go{1,2}.d,\n\n596\n00:32:23.857 --> 00:32:28.943\nfinish it off, and say file 3.\n\n597\n00:32:28.943 --> 00:32:34.789\nSo if we look at this, what I'm saying is,\ngive me one, no more than two.\n\n598\n00:32:34.789 --> 00:32:37.770\nMinimum of one, no more than two,\nthat's the idea.\n\n599\n00:32:37.770 --> 00:32:41.880\nThere we go, file three,\nyou're right, does not exist.\n\n600\n00:32:41.880 --> 00:32:43.300\nThere we go, this is a good sentence.\n\n601\n00:32:43.300 --> 00:32:47.070\nAnd the reason they didn't come out is\nbecause, look, this has more than two.\n\n602\n00:32:47.070 --> 00:32:48.420\nThis has more than two.\n\n603\n00:32:48.420 --> 00:32:50.290\nThis has more than two and so on.\n\n604\n00:32:50.290 --> 00:32:54.110\nSo you can kind of make a cap,\nas I like to say.\n\n605\n00:32:55.155 --> 00:33:00.250\nLet's look at logical or,\nand I can say this or this.\n\n606\n00:33:00.250 --> 00:33:04.290\nSo if I did same kind of thing,\nbut I come back and\n\n607\n00:33:04.290 --> 00:33:09.770\nI use, let's say we'll look for good or\n\n608\n00:33:09.770 --> 00:33:16.290\nbad using the pipe operator,\nstandard Boolean pipe, we use it a lot.\n\n609\n00:33:16.290 --> 00:33:18.200\nThrow it down, I get good and bad.\n\n610\n00:33:18.200 --> 00:33:21.240\nNow notice,\nI don't get gooood or gooooood.\n\n611\n00:33:21.240 --> 00:33:24.079\nI get good, I get bad,\nthose are the two options I gave it.\n\n612\n00:33:24.079 --> 00:33:26.686\nAnd that's what it returns to me.\n\n613\n00:33:26.686 --> 00:33:28.890\nI got one more grouping.\n\n614\n00:33:28.890 --> 00:33:32.990\nWe used parentheses for grouping\nthings together, character classes.\n\n615\n00:33:32.990 --> 00:33:34.700\nSo let's do that, let's see.\n\n616\n00:33:34.700 --> 00:33:37.338\nWe'll use gawk on this, gawk.\n\n617\n00:33:37.338 --> 00:33:40.394\nWe'll use file too, as well.\n\n618\n00:33:40.394 --> 00:33:43.947\nI'll see a little bit of this and\n\n619\n00:33:43.947 --> 00:33:48.429\nI'll group together p or P, like this.\n\n620\n00:33:48.429 --> 00:33:54.352\nThen I'll close it off, I'll give\nit a dot and I'll do another one.\n\n621\n00:33:54.352 --> 00:34:00.232\ne or E, close that off,\n\n622\n00:34:00.232 --> 00:34:02.879\n.*/ and\n\n623\n00:34:02.879 --> 00:34:07.884\nwe will print$0.\n\n624\n00:34:07.884 --> 00:34:11.887\nHit space and we'll see.\n\n625\n00:34:11.887 --> 00:34:16.170\nThat finish it off, and\nfeed files, file2.txt.\n\n626\n00:34:16.170 --> 00:34:20.860\nAnd that gives me, I was looking for\nmisspellings of production.\n\n627\n00:34:20.860 --> 00:34:22.490\nSomebody accidentally\nmisspelled production,\n\n628\n00:34:22.490 --> 00:34:25.795\nmaybe they're from the Hills of\nVirginia like my good friend Justin.\n\n629\n00:34:25.795 --> 00:34:29.350\n[LAUGH] When your accent kicks in.\n\n630\n00:34:29.350 --> 00:34:29.850\n&gt;&gt; Yeah.\n&gt;&gt; [LAUGH]\n\n631\n00:34:29.850 --> 00:34:30.710\n&gt;&gt; Well, it\n\n632\n00:34:30.710 --> 00:34:33.470\ndoes make people not\nanticipate as much from me.\n\n633\n00:34:33.470 --> 00:34:34.914\nSo, I'm like-\n&gt;&gt; [LAUGH]\n\n634\n00:34:34.914 --> 00:34:36.740\n&gt;&gt; I tell y'all what.\n\n635\n00:34:36.740 --> 00:34:41.060\n&gt;&gt; I love to geek my man here, cuz I'm\njust as much from the country as he is.\n\n636\n00:34:41.060 --> 00:34:42.260\n&gt;&gt; [LAUGH]\n&gt;&gt; So, it's a good time.\n\n637\n00:34:42.260 --> 00:34:43.170\nAnd it does happen, right?\n\n638\n00:34:43.170 --> 00:34:47.410\nYou commonly misspell something,\nreceived, that kind of thing.\n\n639\n00:34:47.410 --> 00:34:48.260\nIt happens a lot.\n\n640\n00:34:48.260 --> 00:34:49.660\nYou miss swap things.\n\n641\n00:34:49.660 --> 00:34:52.270\nI have a hard time with field and friend.\n\n642\n00:34:52.270 --> 00:34:56.010\nMy god,\nit's i before e except after c, right?\n\n643\n00:34:56.010 --> 00:34:58.030\n&gt;&gt; It sounded like a like a neighbor away.\n\n644\n00:34:58.030 --> 00:34:59.600\nAnd you're like, I don't know.\n\n645\n00:34:59.600 --> 00:35:03.130\nBut these are the type of regular\nexpressions that I've seen people where\n\n646\n00:35:03.130 --> 00:35:05.070\nnow you're really drilling\ndown on a pattern.\n\n647\n00:35:05.070 --> 00:35:08.080\nI either want a lowercase p or\nan uppercase P as a group.\n\n648\n00:35:08.080 --> 00:35:12.910\nAnd then some other character, something,\nand then either a lower case e, or\n\n649\n00:35:12.910 --> 00:35:14.030\nan uppercase E.\n\n650\n00:35:14.030 --> 00:35:18.840\nAnd then a bunch of other somethings,\nI'm looking for that particular pattern.\n\n651\n00:35:18.840 --> 00:35:22.760\nBut that's kind of a concatenation\nof previous things that we've seen\n\n652\n00:35:22.760 --> 00:35:24.130\nprior to this.\n\n653\n00:35:24.130 --> 00:35:26.820\nNow we're just grouping those,\nbecause it's only for\n\n654\n00:35:26.820 --> 00:35:29.720\nthis character do I want to look for\nlowercase p and uppercase P.\n\n655\n00:35:29.720 --> 00:35:30.690\nAm I correct on that?\n\n656\n00:35:30.690 --> 00:35:32.880\n&gt;&gt; Yeah, you're right on, Justin.\n\n657\n00:35:32.880 --> 00:35:36.770\nSo you just want to group the things\nthat you want together and\n\n658\n00:35:36.770 --> 00:35:37.910\nmake that happen, all right?\n\n659\n00:35:37.910 --> 00:35:40.010\nSo very simple, not too difficult.\n\n660\n00:35:40.010 --> 00:35:43.610\nBe aware, again, contrived example\nthat we're looking at here.\n\n661\n00:35:43.610 --> 00:35:47.320\nThis would also pick up like plea or pray.\n\n662\n00:35:47.320 --> 00:35:50.840\nSo if those words were in\nthe files that you're searching,\n\n663\n00:35:50.840 --> 00:35:52.180\nit will pull them back as well.\n\n664\n00:35:52.180 --> 00:35:56.800\nSo this isn't a perfect example, is just,\nagain, to give you some context, to give\n\n665\n00:35:56.800 --> 00:36:02.650\nyou some idea of how it looks when you\nstart grouping patterns together, okay?\n\n666\n00:36:02.650 --> 00:36:07.780\nJustin, as far as regex goes,\nI think that's a pretty good set of skills\n\n667\n00:36:07.780 --> 00:36:11.020\nthat you'll use probably\nmore regularly than not.\n\n668\n00:36:11.020 --> 00:36:15.308\nAgain, there's vastly more ways in\nwhich you can use all these skills, and\n\n669\n00:36:15.308 --> 00:36:17.061\nthere's more skills to know.\n\n670\n00:36:17.061 --> 00:36:20.781\nBut again, a whole show onto itself,\nand note one 30 minute show, or\n\n671\n00:36:20.781 --> 00:36:22.800\neven two 30 minute shows.\n\n672\n00:36:22.800 --> 00:36:25.630\nOr should I say a series of shows.\n\n673\n00:36:25.630 --> 00:36:26.870\nNot really what we're wanting to do.\n\n674\n00:36:26.870 --> 00:36:30.630\nSo I want to give you some good\nregex ideas so that as we move on,\n\n675\n00:36:30.630 --> 00:36:32.110\nwe can use regex.\n\n676\n00:36:32.110 --> 00:36:34.830\nYou have a script idea you want to do,\nand you're like, you know what?\n\n677\n00:36:34.830 --> 00:36:36.530\nA good regex would work right here.\n\n678\n00:36:36.530 --> 00:36:38.530\nNow you're familiar with it,\nsee how it works,\n\n679\n00:36:38.530 --> 00:36:40.790\nespecially working with sed and gawk.\n\n680\n00:36:40.790 --> 00:36:43.270\nGetting that to work with it,\nit can be very handy.\n\n681\n00:36:43.270 --> 00:36:44.885\nBut that's all you got from us today.\n\n682\n00:36:44.885 --> 00:36:48.130\n&gt;&gt; Well, Daniel, you definitely cleared\na couple of things that I think I was\n\n683\n00:36:48.130 --> 00:36:49.660\nusing wrong admittedly so.\n\n684\n00:36:49.660 --> 00:36:50.880\nI'm not gonna tell you what they are.\n\n685\n00:36:50.880 --> 00:36:52.708\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm just gonna have to let you guess.\n\n686\n00:36:52.708 --> 00:36:56.200\nBut I can see the power of these as we\ncontinue on with advanced shell scripting.\n\n687\n00:36:56.200 --> 00:36:58.710\nSo definitely come back,\nwe got more of that coming at you.\n\n688\n00:36:58.710 --> 00:37:00.700\nBut for this episode, we are done.\n\n689\n00:37:00.700 --> 00:37:03.880\nSo signing of for ITproTV,\nI've been your host Justin Dennison.\n\n690\n00:37:03.880 --> 00:37:04.540\n&gt;&gt; I'm Daniel Lowrie.\n\n691\n00:37:04.540 --> 00:37:07.079\n&gt;&gt; And we'll see you next time.\n\n692\n00:37:07.079 --> 00:37:12.906\n[MUSIC]\n\n693\n00:37:12.906 --> 00:37:14.610\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "240880924"
        }
      ],
      "title": "RegEx"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin get graphic by taking a look at ways to format scripts that a user would interact with visually. Here they start by creating text-based menu driven scripts that take input from a user to move them along, using case and read as well as the \"select\" command.",
          "length": "1793",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-1-writing_graphical_scripts-101317.00_30_53_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-1-writing_graphical_scripts-101317.00_30_53_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-1-writing_graphical_scripts-101317.00_30_53_16.Still001-sm.jpg",
          "title": "Writing Graphical Scripts",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.020\nWelcome to ITProTV.\n\n2\n00:00:01.020 --> 00:00:02.612\nI'm your host Dan Pezet.\n\n3\n00:00:02.612 --> 00:00:06.340\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:06.340 --> 00:00:08.114\n[MUSIC]\n\n5\n00:00:08.114 --> 00:00:11.835\n&gt;&gt; You're watching ITPRO TV.\n\n6\n00:00:11.835 --> 00:00:15.775\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n7\n00:00:15.775 --> 00:00:17.618\nI'm your host Justin Dennison, and\n\n8\n00:00:17.618 --> 00:00:21.663\nwell we're back with more advanced Shell\nscripting, and I'm kind of excited,\n\n9\n00:00:21.663 --> 00:00:24.346\nbecause we're gonna be\nwriting graphical scripts.\n\n10\n00:00:24.346 --> 00:00:26.042\nI didn't even know that was possible.\n\n11\n00:00:26.042 --> 00:00:29.113\nLuckily we have someone in the studio\nthat does know that it's possible, and\n\n12\n00:00:29.113 --> 00:00:31.208\nis here to show us all about it,\nMr. Daniel Lowrie.\n\n13\n00:00:31.208 --> 00:00:32.017\nHow are you doing today, Daniel?\n\n14\n00:00:32.017 --> 00:00:35.386\n&gt;&gt; I'm doing fantastic, Justin, and as\nalways I'm glad to be back in the studio\n\n15\n00:00:35.386 --> 00:00:38.413\nlooking at some advanced shell\nscripting here on our Linux machines.\n\n16\n00:00:38.413 --> 00:00:40.933\nI'm hoping you guys are just\nas excited as we are,\n\n17\n00:00:40.933 --> 00:00:44.057\nbecause as Justin said we\nare moving into getting graphical.\n\n18\n00:00:44.057 --> 00:00:45.642\nWe're gonna get graphic today.\n\n19\n00:00:45.642 --> 00:00:48.139\nSo put the kids away and [LAUGH].\n\n20\n00:00:48.139 --> 00:00:50.562\nThis is TV-17 or something.\n\n21\n00:00:50.562 --> 00:00:52.460\nWhatever it is, no it's not.\n\n22\n00:00:52.460 --> 00:00:56.530\nWhat we mean is when we run a script,\ntypically, and\n\n23\n00:00:56.530 --> 00:01:01.990\na lot of times, it's run it, and you don't\nsee anything, maybe it creates a file,\n\n24\n00:01:01.990 --> 00:01:06.940\nmaybe it backs up a file, maybe it does\nthis, maybe it does that, but you may not\n\n25\n00:01:06.940 --> 00:01:13.050\ntechnically see a whole lot of output, and\nthat's great, and that's what we want.\n\n26\n00:01:13.050 --> 00:01:16.914\nWhen I run a backup script I don't wanna\nsit there, and have to click buttons, and\n\n27\n00:01:16.914 --> 00:01:19.548\ndo this every time I run it,\nthat would be impractical.\n\n28\n00:01:19.548 --> 00:01:21.827\nNot that there maybe isn't a call for\nthat, but for\n\n29\n00:01:21.827 --> 00:01:24.320\nthe most part that would\nprobably be very impractical.\n\n30\n00:01:24.320 --> 00:01:26.480\nI just wanna run my back-up script,\n\n31\n00:01:26.480 --> 00:01:31.810\nbacks up the files that I tell\nit to back up, and we're done.\n\n32\n00:01:31.810 --> 00:01:34.430\nCall it a day.\nBut there are times when you\n\n33\n00:01:34.430 --> 00:01:36.655\ndo wanna have some user interaction.\n\n34\n00:01:36.655 --> 00:01:38.760\nThat you do want them to see things, and\n\n35\n00:01:38.760 --> 00:01:44.680\nhave it presented in a way that is\neasy for them to take in, to digest.\n\n36\n00:01:44.680 --> 00:01:49.620\nOkay, and that's what we're talking about\nwhen we say we're gonna make a graphical\n\n37\n00:01:49.620 --> 00:01:51.560\nsystem, a graphical script.\n\n38\n00:01:51.560 --> 00:01:55.660\nNow we are going to kind of walk it\nthrough graphical evolution here,\n\n39\n00:01:55.660 --> 00:01:59.625\nand we're gonna start off with\nthe pond scum of just a menu driven,\n\n40\n00:01:59.625 --> 00:02:02.310\ntext-based CLI kind of thing.\n\n41\n00:02:02.310 --> 00:02:06.960\nThen we're gonna work our\nway up to an actual GUI.\n\n42\n00:02:08.142 --> 00:02:14.361\nI wanna forewarn you, this is not GUI\nprogramming that we're doing in batch.\n\n43\n00:02:14.361 --> 00:02:15.705\nWe're gonna call some packages.\n\n44\n00:02:15.705 --> 00:02:18.410\nA lot of this stuff might not\nactually be on your system.\n\n45\n00:02:18.410 --> 00:02:20.258\nYou're gonna have to install them,\n\n46\n00:02:20.258 --> 00:02:23.894\nand what they do is they give you cookie\ncutter graphical objects that you\n\n47\n00:02:23.894 --> 00:02:28.205\ncan work with, and say, I wanna use that,\nthere's a graphical options for that.\n\n48\n00:02:28.205 --> 00:02:30.980\nI can call it from that package and\nit'll work.\n\n49\n00:02:30.980 --> 00:02:34.103\nSo I don't want you to think that here\nwe go down into the lowest bowels of\n\n50\n00:02:34.103 --> 00:02:36.930\nprogramming language so\nthat we can make some graphics happen.\n\n51\n00:02:36.930 --> 00:02:42.333\nWe're basically kind of standing on top\nof something that's already built for\n\n52\n00:02:42.333 --> 00:02:45.750\nus and\nusing it as our graphical front end, okay?\n\n53\n00:02:45.750 --> 00:02:48.040\nSo that's my word of asterisk, or\n\n54\n00:02:48.040 --> 00:02:51.930\nwhatever you wanna say, about what we\nmean when we say we're making graphics.\n\n55\n00:02:51.930 --> 00:02:56.735\nSo let's do that, let's start off\nwith the lowest common denominate,\n\n56\n00:02:56.735 --> 00:03:02.192\nwhich is a menu driven system, and I've\ntalked about this in previous episodes.\n\n57\n00:03:02.192 --> 00:03:04.241\nI love menu driven systems.\n\n58\n00:03:04.241 --> 00:03:08.321\nI love them because I don't\nhave to memorize anything.\n\n59\n00:03:08.321 --> 00:03:12.254\nI don't have to become a servant of\narguments and options going, yes,\n\n60\n00:03:12.254 --> 00:03:15.997\nwhen you do the --v with the option this,\nand the argument that, and\n\n61\n00:03:15.997 --> 00:03:20.290\nding ding ding ding, you string\nthese whole long things together.\n\n62\n00:03:20.290 --> 00:03:24.750\nAs also we've discussed in the past, there\nis the place for that does have its area.\n\n63\n00:03:24.750 --> 00:03:26.771\nSo I'm not saying don't do that.\n\n64\n00:03:26.771 --> 00:03:30.968\nBut there are times when a menu\ndriven system would be the way, and\n\n65\n00:03:30.968 --> 00:03:34.631\nthe good news is,\nwhile they can get extremely complex,\n\n66\n00:03:34.631 --> 00:03:39.210\nthey're not too difficult to employ,\nto make one, and basically what\n\n67\n00:03:39.210 --> 00:03:44.094\nwe're gonna do is we're just gonna\ntake a case statement, and we're going\n\n68\n00:03:44.094 --> 00:03:49.030\nto do some recursion, and that will\ndrive us through the graphical system.\n\n69\n00:03:49.030 --> 00:03:51.850\nThe only thing we have to keep in mind is,\nhow does it look?\n\n70\n00:03:52.890 --> 00:03:56.900\nThat's really one of the more\ndifficult things is making it look\n\n71\n00:03:56.900 --> 00:03:59.910\nlike something someone would want to use,\nand be intuitive,\n\n72\n00:03:59.910 --> 00:04:02.240\nand help them move through the system.\n\n73\n00:04:02.240 --> 00:04:04.719\nSo let's stay there.\n\n74\n00:04:04.719 --> 00:04:07.948\nWe're gonna build a very\nsimple menu driven system, and\n\n75\n00:04:07.948 --> 00:04:09.904\nwe're gonna start from scratch.\n\n76\n00:04:09.904 --> 00:04:10.800\nI haven't pre-made this one.\n\n77\n00:04:10.800 --> 00:04:14.060\nSo there's gonna be a lot of typos,\nbecause I'm a horrible typist, and\n\n78\n00:04:14.060 --> 00:04:17.693\nwe're gonna have to figure out the logic\nand work our way through it, which is why\n\n79\n00:04:17.693 --> 00:04:21.436\nit's gonna be extremely simple, so that\nwe don't spend too much time on that, and\n\n80\n00:04:21.436 --> 00:04:24.029\nthen we'll move to other things\nthat can do this as well.\n\n81\n00:04:24.029 --> 00:04:24.861\nAll right, so let's start there.\n\n82\n00:04:24.861 --> 00:04:26.534\nLet's create a script.\n\n83\n00:04:26.534 --> 00:04:32.156\nI will start up my editor of choice,\nwhich at this point in time is Nano,\n\n84\n00:04:32.156 --> 00:04:37.028\nand I will call it, we'll call this,\nhow about easy.sh, or\n\n85\n00:04:37.028 --> 00:04:42.590\neasy menu, that's what we'll call it,\neasy menu, easymenu.sh.\n\n86\n00:04:42.590 --> 00:04:46.606\nFire that guy up, as you can see,\nwe are at the clean slate here.\n\n87\n00:04:46.606 --> 00:04:48.720\nSo let's see here, what do we need?\n\n88\n00:04:48.720 --> 00:04:53.617\nWell we know we need some very simple\nelements, we gotta have that shebang,\n\n89\n00:04:53.617 --> 00:04:54.619\n/bin/bash.\n\n90\n00:04:54.619 --> 00:04:58.587\nThat is a must in any of our bash scripts.\n\n91\n00:04:58.587 --> 00:05:01.337\nSo let's just make an easy tool,\nkind of like what we've done in the past.\n\n92\n00:05:01.337 --> 00:05:05.541\nWe'll make a sys admin tool, but\nthis time it'll be menu driver, and\n\n93\n00:05:05.541 --> 00:05:10.384\nif you've seen menu driven once in my\nprevious shows, which you probably have,\n\n94\n00:05:10.384 --> 00:05:12.680\nI'll show you how I made those menus.\n\n95\n00:05:12.680 --> 00:05:16.450\nSo what we're gonna do is, A,\nI wanna kinda lay everything out.\n\n96\n00:05:16.450 --> 00:05:19.917\nI like to use functions\nto work these menus,\n\n97\n00:05:19.917 --> 00:05:23.584\nbecause it just makes\nlife a whole lot easier.\n\n98\n00:05:23.584 --> 00:05:25.189\nThat all I have to do is call a function.\n\n99\n00:05:25.189 --> 00:05:29.460\nI love functions especially with a menu,\nthat way I can use\n\n100\n00:05:29.460 --> 00:05:34.355\nrecursion to jump around, and\nget into whatever menu that I need.\n\n101\n00:05:34.355 --> 00:05:35.780\nIt's the way I like to do it.\n\n102\n00:05:35.780 --> 00:05:38.160\nIf you don't like it this way, that's\ngreat, you can do it anyway you like.\n\n103\n00:05:38.160 --> 00:05:41.617\nIf you know a better way\n[LAUGH] then use that, if not,\n\n104\n00:05:41.617 --> 00:05:45.320\ntake what you learn from me,\nand apply it to what you do.\n\n105\n00:05:45.320 --> 00:05:48.665\nThat's the great thing about scripting and\nprogramming, is we all learn from each\n\n106\n00:05:48.665 --> 00:05:51.121\nother, and everybody's got\ntheir own way of doing things.\n\n107\n00:05:51.121 --> 00:05:54.398\nIt's like, I like to do it like this,\nI like to do it like that, and\n\n108\n00:05:54.398 --> 00:05:55.829\nyou can always take stuff in.\n\n109\n00:05:55.829 --> 00:05:57.170\nI know I've learned a lot from Justin.\n\n110\n00:05:57.170 --> 00:05:59.670\nJustin's learned some stuff from me, and\n\n111\n00:05:59.670 --> 00:06:02.210\nit helps make our lives\na whole lot easier.\n\n112\n00:06:02.210 --> 00:06:05.035\nAll right, so let's start this thing.\n\n113\n00:06:05.035 --> 00:06:07.940\nI'm going to start off\nwith the menu function.\n\n114\n00:06:07.940 --> 00:06:09.508\nSo I'm gonna create a menu function.\n\n115\n00:06:09.508 --> 00:06:15.399\nMenu() {, I like to close it out,\nand then work in the middle.\n\n116\n00:06:15.399 --> 00:06:16.490\nKind of like this.\n\n117\n00:06:16.490 --> 00:06:19.160\nThat is how I typically\nstart my function creation.\n\n118\n00:06:20.670 --> 00:06:23.436\nLet's make it do, we'll make it do what?\n\n119\n00:06:23.436 --> 00:06:24.381\nHow about two different things.\n\n120\n00:06:24.381 --> 00:06:30.442\nWe'll do disk usage and\nget our IP address, simple stuff.\n\n121\n00:06:30.442 --> 00:06:32.240\nVery, very simple.\n\n122\n00:06:32.240 --> 00:06:37.454\nSo, what we'll do is we'll say, let's\nsee here, I need to start this menu so\n\n123\n00:06:37.454 --> 00:06:40.950\nit's going to start with\nan echo statement really.\n\n124\n00:06:40.950 --> 00:06:44.511\nGive it some information,\ngive the user something to look at,\n\n125\n00:06:44.511 --> 00:06:46.390\n[LAUGH] cuz this is graphical.\n\n126\n00:06:46.390 --> 00:06:50.520\nThat just means things that we see,\nthat we've written down or write.\n\n127\n00:06:52.140 --> 00:06:57.757\nSo we'll say echo, and\nyou can make a blocked out echo statement,\n\n128\n00:06:57.757 --> 00:07:00.464\njust by echo double quotes, and\n\n129\n00:07:00.464 --> 00:07:05.707\nthen whatever's in between\nyour double quotes, like that.\n\n130\n00:07:05.707 --> 00:07:09.247\nSo anything I put in there,\nit will keep that formatting of blockage,\n\n131\n00:07:09.247 --> 00:07:12.760\nwhatever I put line by line, and\nI can do an echo statement like that.\n\n132\n00:07:12.760 --> 00:07:15.990\nIt comes in real handy,\nespecially when I'm making these menus.\n\n133\n00:07:15.990 --> 00:07:20.580\nSo what I'll do is I'll say, Welcome\n\n134\n00:07:20.580 --> 00:07:25.940\nto the easymenu system, like so.\n\n135\n00:07:25.940 --> 00:07:29.234\nThen I always like to throw some dashes,\nor stars, or\n\n136\n00:07:29.234 --> 00:07:32.840\nsomething underneath that,\ngive it a little flare.\n\n137\n00:07:32.840 --> 00:07:35.141\nUp to you,\nyou don't have to do that kind of a thing.\n\n138\n00:07:35.141 --> 00:07:36.678\nI'm gonna give it my menu options.\n\n139\n00:07:36.678 --> 00:07:38.641\nYou've got to think of it this way,\n\n140\n00:07:38.641 --> 00:07:42.950\nI gotta give the user something they can\nhold on to, that they can work with.\n\n141\n00:07:42.950 --> 00:07:47.799\nThey're not working with my echo\nstatement, but that's gonna give them\n\n142\n00:07:47.799 --> 00:07:52.347\nthe information that they need so\nthat they can work with the system.\n\n143\n00:07:52.347 --> 00:07:54.753\nTypically what I like to do is numbers.\n\n144\n00:07:54.753 --> 00:07:56.474\nSometimes you can do capitalization.\n\n145\n00:07:56.474 --> 00:08:03.021\nSo things like this 1 Is what we're\ngonna do disk 2 like that and\n\n146\n00:08:03.021 --> 00:08:07.950\nthat'll be ip address like so, right?\n\n147\n00:08:07.950 --> 00:08:11.200\nYou can also,\na lot of times see things like this.\n\n148\n00:08:11.200 --> 00:08:17.760\nYou could do, let's see here,\ndisk, you see things like that.\n\n149\n00:08:20.250 --> 00:08:26.850\nYou do IP so if someone types capital D or\nd then they get that option.\n\n150\n00:08:26.850 --> 00:08:30.440\nIt's kind of giving them the parameters\nI need to hit d for disk or\n\n151\n00:08:30.440 --> 00:08:31.350\nI need to hit IP for that.\n\n152\n00:08:31.350 --> 00:08:37.120\nI typically stick with the numbers\njust cuz it's a whole lot easier.\n\n153\n00:08:37.120 --> 00:08:40.977\nYou never know what someone\nmight be used to doing, so\n\n154\n00:08:40.977 --> 00:08:44.210\nI like using one like that and then disk.\n\n155\n00:08:44.210 --> 00:08:44.946\nGive a little space.\n\n156\n00:08:44.946 --> 00:08:49.180\nClarity and then 2 or IP.\n\n157\n00:08:49.180 --> 00:08:56.960\nAll right, and you obviously,\nyou can get as descriptive as you want.\n\n158\n00:08:56.960 --> 00:08:59.690\nSo, disk is fairly vague, right?\n\n159\n00:08:59.690 --> 00:09:03.360\nIt doesn't really, okay,\nthere's something about the disk.\n\n160\n00:09:03.360 --> 00:09:07.930\nWhat if I say disk usage,\n\n161\n00:09:09.660 --> 00:09:13.720\nokay now I know I'm looking for\nhow much disk is being used, okay?\n\n162\n00:09:13.720 --> 00:09:19.691\nIf I say, IP address or\nif I say something more like print\n\n163\n00:09:19.691 --> 00:09:25.340\ncurrent ip address,\nnow it's a little more descriptive.\n\n164\n00:09:25.340 --> 00:09:29.480\nSo when we start diving into that whole\ngraphical menu-driven type of things.\n\n165\n00:09:29.480 --> 00:09:32.080\nBeing descriptive when you can be for\nthe user,\n\n166\n00:09:32.080 --> 00:09:34.800\nwhenever the user is\nexperiencing something?\n\n167\n00:09:34.800 --> 00:09:36.110\nProbably a very good idea.\n\n168\n00:09:36.110 --> 00:09:40.550\nThe more you can give them, the more\nintuitive you can make it, the better.\n\n169\n00:09:40.550 --> 00:09:44.390\nThat's the whole idea around making\nsomething that the users want to interact\n\n170\n00:09:44.390 --> 00:09:48.965\nwith throughout the working\nof the actual script okay?\n\n171\n00:09:48.965 --> 00:09:55.860\nJust keep that in mind, and then let's\nsee here, we'll just make an exit,\n\n172\n00:09:55.860 --> 00:10:02.890\n3 exit program,\nprogram like that, there we go.\n\n173\n00:10:02.890 --> 00:10:06.800\nSo now they have a menu that's\ngoing to be printed out.\n\n174\n00:10:06.800 --> 00:10:10.220\nIf I were to run this right now, obviously\nit wouldn't work cuz in a function I have\n\n175\n00:10:10.220 --> 00:10:13.500\nto call a function, but if I run this,\nit's just gonna echo this out.\n\n176\n00:10:13.500 --> 00:10:14.480\nWe can do that actually.\n\n177\n00:10:14.480 --> 00:10:19.171\nI'll show you in one second, menu like so.\n\n178\n00:10:19.171 --> 00:10:25.292\nSave that, x,\nwe will save chmod u+x of easymenu.sh,\n\n179\n00:10:25.292 --> 00:10:32.510\npops .sh and that's all it does,\nis it pops that out to us.\n\n180\n00:10:32.510 --> 00:10:36.570\nNot too bad, now you start to see\nthe idea of why I do that like that.\n\n181\n00:10:36.570 --> 00:10:40.060\nThis is something, you've probably\nseen something very similar to before.\n\n182\n00:10:40.060 --> 00:10:44.120\nLets jump back in there,\nnano or easy mini.\n\n183\n00:10:44.120 --> 00:10:45.830\nLets start building more.\n\n184\n00:10:45.830 --> 00:10:48.910\nLets start adding that\nfunctionality into there.\n\n185\n00:10:48.910 --> 00:10:50.220\nAll right, so what do we need to do?\n\n186\n00:10:50.220 --> 00:10:53.650\nWe need to make a case statement\nis one of the easy ways.\n\n187\n00:10:53.650 --> 00:10:56.705\nYou can also do\nan if-else-then kind of thing.\n\n188\n00:10:56.705 --> 00:11:01.700\nIf-then-else I mean or if-else statements,\n\n189\n00:11:01.700 --> 00:11:03.800\nwhatever the case is if\nyou've got multiples.\n\n190\n00:11:03.800 --> 00:11:05.380\nThose work just fine.\n\n191\n00:11:05.380 --> 00:11:09.820\nCase, you see a lot of people use\ncase because it's very clean and for\n\n192\n00:11:09.820 --> 00:11:14.320\nvery simple menu stuff without\na lot of logic happening.\n\n193\n00:11:14.320 --> 00:11:19.760\nDuring the case statement they really are\nnice and they're quick and they're easy.\n\n194\n00:11:19.760 --> 00:11:22.510\nI find for myself just to,\nmaybe this is the case for you as well.\n\n195\n00:11:22.510 --> 00:11:27.398\nI find that if the logic\nbecomes very complex.\n\n196\n00:11:27.398 --> 00:11:31.700\nI jumped if statements because I\nlike the way it breaks it down.\n\n197\n00:11:31.700 --> 00:11:35.180\nIt gives me a little more easily readable\n\n198\n00:11:36.760 --> 00:11:41.990\ntype of code than just trying to\ncram all that into a case statement.\n\n199\n00:11:41.990 --> 00:11:43.840\n&gt;&gt; I would tend to agree, right?\n\n200\n00:11:43.840 --> 00:11:47.939\nThe usage of if and else and else/if and\n\n201\n00:11:47.939 --> 00:11:51.890\nthens, that works out really well if I\nhave a little more complex logic than just\n\n202\n00:11:51.890 --> 00:11:53.990\nkind of more or\nless pattern matching, right?\n\n203\n00:11:53.990 --> 00:11:57.600\nInstead of matching into character\nthat's inputted or something.\n\n204\n00:11:57.600 --> 00:12:02.480\nWith that said, if that's all you have,\nI tend to move towards the case\n\n205\n00:12:02.480 --> 00:12:06.790\nstatement if you're coming another\nlanguage or you know it's very similar to\n\n206\n00:12:06.790 --> 00:12:09.200\na switch statement in some of those\nother languages where you go,\n\n207\n00:12:09.200 --> 00:12:14.400\nI'm gonna match on this variable and\nI wanna see does it match these things?\n\n208\n00:12:15.430 --> 00:12:20.790\nSo if you have a signal match use a case,\nbut if you need to say I wanna match this\n\n209\n00:12:20.790 --> 00:12:25.520\nand I need this to be true\nwhen this match occurs,\n\n210\n00:12:25.520 --> 00:12:29.190\nthen you're gonna have to use\nan if-else conditional statement, yeah.\n\n211\n00:12:29.190 --> 00:12:33.330\n&gt;&gt; It's just a little bit easier to work\nwith your code at that point in time.\n\n212\n00:12:33.330 --> 00:12:35.930\nTotally agree with everything\nyou just said right there, so.\n\n213\n00:12:35.930 --> 00:12:37.700\nNow you understand why\nI'm gonna use case for\n\n214\n00:12:37.700 --> 00:12:39.960\nthis just because it's a very\nsimple menu driven system.\n\n215\n00:12:39.960 --> 00:12:42.630\nSo I'm gonna create that\ncase statement now.\n\n216\n00:12:42.630 --> 00:12:44.440\nSo I'm gonna drop down here.\n\n217\n00:12:44.440 --> 00:12:46.620\nFirst thing I'm gonna do\nis I'm gonna start with,\n\n218\n00:12:46.620 --> 00:12:48.940\nwell I need some user\ninteraction at this point.\n\n219\n00:12:48.940 --> 00:12:51.090\nThey've seen the options.\n\n220\n00:12:51.090 --> 00:12:53.850\nNow I need to know which option\nthey wanna choose, okay?\n\n221\n00:12:53.850 --> 00:12:57.010\nSo I'm gonna say, I'll use read for\n\n222\n00:12:57.010 --> 00:12:59.828\nthat cuz read is great for\ntaking an input from our user.\n\n223\n00:12:59.828 --> 00:13:04.908\nI'll say -p like so and then I'll say\n\n224\n00:13:07.053 --> 00:13:14.224\nPlease or just choose option number.\n\n225\n00:13:14.224 --> 00:13:16.987\n&gt;&gt; I definitely thought you wer\ngoing to say, choose your destiny.\n\n226\n00:13:16.987 --> 00:13:19.530\n&gt;&gt; [LAUGH]\n&gt;&gt; I was like I do like that.\n\n227\n00:13:19.530 --> 00:13:23.430\nThe fact that there's\nsome choose your destiny,\n\n228\n00:13:23.430 --> 00:13:27.660\nis this really disk usage or is it.\n\n229\n00:13:27.660 --> 00:13:31.220\n&gt;&gt; That would be a cool project that\nyou could do with this type of thing is\n\n230\n00:13:31.220 --> 00:13:34.310\ncreate like a choose your adventure game.\n\n231\n00:13:34.310 --> 00:13:38.340\nThat totally would be doable\nwith this type of system.\n\n232\n00:13:38.340 --> 00:13:42.250\nThat would obviously be a lot more\ncomplex, it's gonna take a lot of logic,\n\n233\n00:13:42.250 --> 00:13:44.530\nand a lot of thought, and\nbe a lot of lines of code but\n\n234\n00:13:44.530 --> 00:13:47.890\nit would totally handle that and\nbe a lot of fun, really solidify.\n\n235\n00:13:47.890 --> 00:13:51.260\nThat might be a good homework project for\nyou guys out there to do,\n\n236\n00:13:51.260 --> 00:13:54.800\ncuz it's gonna solidify all these concepts\nthat we've done so far, because you're\n\n237\n00:13:54.800 --> 00:13:57.650\ngonna need just about every single\none of them to make that game happen.\n\n238\n00:13:57.650 --> 00:14:02.580\nBut it shouldn't be out of the scope of\nwhat you've learned up til now, right?\n\n239\n00:14:02.580 --> 00:14:04.090\nSo very cool, that's a good idea.\n\n240\n00:14:04.090 --> 00:14:04.820\nI'm glad.\n\n241\n00:14:04.820 --> 00:14:06.030\nI might actually do that.\n\n242\n00:14:06.030 --> 00:14:11.030\n[LAUGH] [LAUGH] All right, so let's go\nback to the code we're doing, okay?\n\n243\n00:14:11.030 --> 00:14:12.810\nSo I'm taking in,\nplease choose your number.\n\n244\n00:14:12.810 --> 00:14:17.710\nI'd like to do like these trailing\ndots with something like that.\n\n245\n00:14:17.710 --> 00:14:22.280\nLet them know, it's just visually\n[INAUDIBLE], you don't have to do that\n\n246\n00:14:22.280 --> 00:14:27.067\nagain so it's all up to you, but I like\nit for the visual effect of it okay, and\n\n247\n00:14:27.067 --> 00:14:31.950\nthen I'll have my ops or option,\nwhatever option you take, all right?\n\n248\n00:14:31.950 --> 00:14:32.770\nSo we've read that in.\n\n249\n00:14:32.770 --> 00:14:36.210\nWe now have our variable option from\nwhatever the user has inputted.\n\n250\n00:14:36.210 --> 00:14:38.040\nI can now start casing the joints, right?\n\n251\n00:14:38.040 --> 00:14:44.780\nSo case $opt in, and\nthen start giving it the options.\n\n252\n00:14:44.780 --> 00:14:49.760\nI'm gonna a little overscrolling here so\nwe can see a bit better.\n\n253\n00:14:49.760 --> 00:14:50.260\nThere we go.\n\n254\n00:14:51.505 --> 00:14:55.920\nWe'll tab in just to, again we wanna\nmake our code are readable as possible.\n\n255\n00:14:55.920 --> 00:15:00.773\nSo I'll do that, I'll say opt in, so\nwe've got options one, two, and three.\n\n256\n00:15:00.773 --> 00:15:06.787\nSo I'll have an option for 1, I'll have an\noption for 2, I'll have an option for 3.\n\n257\n00:15:06.787 --> 00:15:11.708\nOops, have in there [INAUDIBLE] and\nthen don't forget your.\n\n258\n00:15:11.708 --> 00:15:13.740\nSo you're gonna have that star option.\n\n259\n00:15:13.740 --> 00:15:16.271\nIt is always a good idea.\n\n260\n00:15:16.271 --> 00:15:20.152\nSo on option 1, we wanted to do disk, so\n\n261\n00:15:20.152 --> 00:15:27.374\nthat can be easily done with just telling\nit if you see option 1, tab over.\n\n262\n00:15:27.374 --> 00:15:32.638\nI want you to just run df- h like so\n\n263\n00:15:32.638 --> 00:15:36.780\nall right, very simple.\n\n264\n00:15:36.780 --> 00:15:40.746\nCome in to option 2, I want you to run,\nwhat was it, ip address?\n\n265\n00:15:40.746 --> 00:15:44.350\nI could run ifconfig like so.\n\n266\n00:15:44.350 --> 00:15:48.112\nAlso don't forget the end\nof your case statements,\n\n267\n00:15:48.112 --> 00:15:54.026\nyou do need these double semicolons, like\nthat and then three was exit programs.\n\n268\n00:15:54.026 --> 00:15:59.670\nSo we would have say exits,\nlike that and then for\n\n269\n00:15:59.670 --> 00:16:04.627\nhere, we will just echo Invalid Option and\n\n270\n00:16:04.627 --> 00:16:09.490\nthen Bing, we'll close that out.\n\n271\n00:16:09.490 --> 00:16:12.048\nAnd I will then just recall the menu.\n\n272\n00:16:12.048 --> 00:16:19.296\nSo, now esac,\nesac here we go some after that.\n\n273\n00:16:19.296 --> 00:16:23.845\nAnd that should, we'll burn that back up.\n\n274\n00:16:23.845 --> 00:16:26.624\nCrazy looking,\n\n275\n00:16:26.624 --> 00:16:32.800\nthat should be a menu driven system\nat this point in time, right?\n\n276\n00:16:32.800 --> 00:16:34.360\nLet's see if it works.\n\n277\n00:16:34.360 --> 00:16:37.600\nLet's go ahead and Ctrl+O that, Ctrl+X,\n\n278\n00:16:37.600 --> 00:16:41.920\nclear the screen, and\nwe will rerun easy menu.\n\n279\n00:16:41.920 --> 00:16:45.050\nOkay, welcome to the easy menu system.\n\n280\n00:16:45.050 --> 00:16:50.620\nOne is disk usage, two for print current\nIP, and three, exit the program.\n\n281\n00:16:50.620 --> 00:16:54.850\nLet's try one, look at that,\nit ran, gave me my option.\n\n282\n00:16:54.850 --> 00:16:58.260\nRerun it again, say, aw,\nI'll take two this time.\n\n283\n00:16:58.260 --> 00:17:02.830\nHey, there is ifconfig running\nthere is my IP address right there.\n\n284\n00:17:04.220 --> 00:17:08.090\nNow, we have a basic working product,\nthis thing is firing off.\n\n285\n00:17:08.090 --> 00:17:10.860\nThere are some things we can do to clean\nit up, make it look a little better,\n\n286\n00:17:10.860 --> 00:17:12.950\nmake it work a little better.\n\n287\n00:17:12.950 --> 00:17:15.900\nBut at this point in time,\nthis thing is money.\n\n288\n00:17:15.900 --> 00:17:17.900\nIt is happening and\nthe menu is working correctly.\n\n289\n00:17:17.900 --> 00:17:22.000\n&gt;&gt; Now, Daniel, you have that catch all\nwhere, if you type in something else other\n\n290\n00:17:22.000 --> 00:17:26.912\nthan the possible options,\nthen it calls menu back in on itself.\n\n291\n00:17:26.912 --> 00:17:30.410\nNow, how does that look?\n\n292\n00:17:30.410 --> 00:17:31.670\nAnd what is the ultimate purpose of that?\n\n293\n00:17:31.670 --> 00:17:33.240\n&gt;&gt; Great question, we don't wanna forget.\n\n294\n00:17:33.240 --> 00:17:36.487\nTest all of your case options to\nmake sure that they are working and\n\n295\n00:17:36.487 --> 00:17:38.180\nfunctioning properly.\n\n296\n00:17:38.180 --> 00:17:40.680\nSo if I run this again,\neasy menu comes and\n\n297\n00:17:40.680 --> 00:17:44.200\nI press 5,\nyou'll see it just reiterates the thing.\n\n298\n00:17:44.200 --> 00:17:47.150\nNow, you're starting to see that\nthe screen is getting quite cluttery\n\n299\n00:17:47.150 --> 00:17:48.150\nthough, right?\n\n300\n00:17:48.150 --> 00:17:51.720\nSome clears would probably\nhelp out with that.\n\n301\n00:17:51.720 --> 00:17:55.600\nSo if we go back in,\nI'll try 3 and exit out here.\n\n302\n00:17:55.600 --> 00:17:58.410\nWe nano that guy and\nwe start adding some clears.\n\n303\n00:17:58.410 --> 00:18:03.790\nSo if I run this, I think probably\nthe first thing I wanna do\n\n304\n00:18:03.790 --> 00:18:06.970\nis put a clear statement,\nprobably right here, right?\n\n305\n00:18:06.970 --> 00:18:09.560\nSo anytime menu is run,\nif I Ctrl+O and say that,\n\n306\n00:18:09.560 --> 00:18:12.160\nwe'll start seeing some\ndifferent functionality.\n\n307\n00:18:12.160 --> 00:18:16.600\nIf I do 1, it's just gonna pop the text\nand give it to us and drop out.\n\n308\n00:18:16.600 --> 00:18:21.520\nBut if I do 5, that number's wrong, it's\ngonna recurse back to the menu system.\n\n309\n00:18:21.520 --> 00:18:24.060\nSee, it didn't give me\nanother one below it.\n\n310\n00:18:24.060 --> 00:18:26.690\nIt cleared the screen and then reran menu,\n\n311\n00:18:26.690 --> 00:18:31.040\nwhich gives me that echo statement of our\noptions and then asks for input from read.\n\n312\n00:18:31.040 --> 00:18:32.070\nSo that's how it starts working.\n\n313\n00:18:32.070 --> 00:18:34.400\nNow I can work that into\nmy other statements.\n\n314\n00:18:34.400 --> 00:18:37.850\nI could even work the recursion\ninto the other statements as well,\n\n315\n00:18:37.850 --> 00:18:39.490\nin that case function, right?\n\n316\n00:18:39.490 --> 00:18:41.260\nAnd that will give us a very,\n\n317\n00:18:41.260 --> 00:18:45.470\na much cleaner-looking user\nexperience inside of that.\n\n318\n00:18:45.470 --> 00:18:47.070\nSo let's do that, let's exit out.\n\n319\n00:18:48.390 --> 00:18:50.030\nWe will nano that guy.\n\n320\n00:18:50.030 --> 00:18:52.080\nLet's go back down in here.\n\n321\n00:18:52.080 --> 00:18:52.790\nAnd let's see here.\n\n322\n00:18:52.790 --> 00:18:57.339\nSo we run df -h, and that's great,\n\n323\n00:18:57.339 --> 00:19:02.980\nbut I think I want to go\nback to menu after that.\n\n324\n00:19:02.980 --> 00:19:05.660\nAnd actually,\na little trick I like to do because\n\n325\n00:19:05.660 --> 00:19:07.175\nif you look at the statement\nlike it is right now.\n\n326\n00:19:07.175 --> 00:19:11.130\nRight we say run df-h and\nthen run menu, it's gonna run df-h, and\n\n327\n00:19:11.130 --> 00:19:12.930\nthen it's gonna rerun the menu.\n\n328\n00:19:12.930 --> 00:19:14.260\nAnd what does the menu do?\n\n329\n00:19:14.260 --> 00:19:16.840\nWhat's the first item on that menu screen?\n\n330\n00:19:16.840 --> 00:19:19.430\nClear, I'm not gonna see\nthe output of df -h.\n\n331\n00:19:19.430 --> 00:19:22.110\nSo one of the little tricks\nI like to do is kinda like\n\n332\n00:19:22.110 --> 00:19:26.780\na press any key to continue or press\nenter to continue kinda function, right?\n\n333\n00:19:26.780 --> 00:19:30.310\nAnd all you gotta do for that is\nthrow in a read statement, like this.\n\n334\n00:19:30.310 --> 00:19:35.130\nJust say read -p, and\nsay press any, or I'll say,\n\n335\n00:19:35.130 --> 00:19:41.890\npress enter to continue,, like that,\nand then just leave it blank.\n\n336\n00:19:41.890 --> 00:19:46.920\nRemember, there's a built in\nvariable that read calls.\n\n337\n00:19:46.920 --> 00:19:48.020\nI can't remember it off\nthe top of my head,\n\n338\n00:19:48.020 --> 00:19:50.810\nbut there is one there that it is using.\n\n339\n00:19:50.810 --> 00:19:53.690\nI typically create a value for that,\nbut I don't need one at this point,\n\n340\n00:19:53.690 --> 00:19:55.530\nso I just leave it empty.\n\n341\n00:19:55.530 --> 00:19:58.610\n&gt;&gt; I think it's actually reply,\nif I remember correctly.\n\n342\n00:19:58.610 --> 00:20:01.940\nWhich sounds weird, it shouldn't it,\nit should be like more read-\n\n343\n00:20:01.940 --> 00:20:04.460\n&gt;&gt; There's all these crazy variables that\n\n344\n00:20:04.460 --> 00:20:06.100\nthe systems use.\n\n345\n00:20:06.100 --> 00:20:09.529\nAnd keeping them straight in your head,\nunless you're some weird savant,\n\n346\n00:20:09.529 --> 00:20:10.610\nis an impossible task.\n\n347\n00:20:10.610 --> 00:20:11.776\n&gt;&gt; But something we do keep in mind.\n\n348\n00:20:11.776 --> 00:20:14.293\nIf you're using that in\nother parts of your script,\n\n349\n00:20:14.293 --> 00:20:16.651\nyou may wanna be careful\nabout using this trick.\n\n350\n00:20:16.651 --> 00:20:20.107\nBecause it will overwrite,\nwhether it would be reply or read or\n\n351\n00:20:20.107 --> 00:20:21.800\nwhatever it ends up being.\n\n352\n00:20:21.800 --> 00:20:23.540\nI always have to look those things up.\n\n353\n00:20:23.540 --> 00:20:27.850\n&gt;&gt; I do too, it is one of those things,\ncheat sheets, ladies and\n\n354\n00:20:27.850 --> 00:20:30.300\ngents, cheat sheets,\nput them on the desk right.\n\n355\n00:20:30.300 --> 00:20:33.713\nNow, that we have that we have that,\nnow what is gonna happen?\n\n356\n00:20:33.713 --> 00:20:39.210\nDf-h is gonna run and it's gonna say,\npress enter to continue.\n\n357\n00:20:39.210 --> 00:20:41.960\nAnd once I press enter,\nthen the menu will run.\n\n358\n00:20:41.960 --> 00:20:45.000\nSo it gives me the opportunity to\nread the output that I wanted to see.\n\n359\n00:20:45.000 --> 00:20:48.400\nAnd once I'm done reading it, I press\nenter and it takes me back to the menu.\n\n360\n00:20:49.410 --> 00:20:52.556\nSo we won't do that for everything,\njust kind of give you the idea here.\n\n361\n00:20:52.556 --> 00:20:56.490\nI think, also,\n\n362\n00:20:56.490 --> 00:21:01.140\na good idea here would\nbe to clear as well.\n\n363\n00:21:01.140 --> 00:21:04.480\nAll right, so that will get rid\nof the menu, and ba-da-bing.\n\n364\n00:21:04.480 --> 00:21:05.940\nLet's see if I've done it right.\n\n365\n00:21:05.940 --> 00:21:07.370\nWho knows,\nI may have to do some debugging.\n\n366\n00:21:08.410 --> 00:21:10.810\nHere we go, option number one.\n\n367\n00:21:10.810 --> 00:21:14.150\nAha, it cleared the screen,\ngave me the disk info I'm looking for.\n\n368\n00:21:14.150 --> 00:21:16.630\nIt's waiting for\nme to press any key to continue.\n\n369\n00:21:16.630 --> 00:21:19.420\nI press M, and\nit takes me back to the menu system.\n\n370\n00:21:19.420 --> 00:21:20.910\nSo this is the proper way.\n\n371\n00:21:20.910 --> 00:21:22.570\nSo I wanna go back and do that for\n\n372\n00:21:22.570 --> 00:21:27.610\nall my different functions that I\nhave inside the options in the case.\n\n373\n00:21:27.610 --> 00:21:31.720\nAnd make sure they have\nthat type of statements for\n\n374\n00:21:31.720 --> 00:21:35.347\neach possibility that is going\ninto that case statement.\n\n375\n00:21:35.347 --> 00:21:39.410\nOnce I do that, now the user\nexperience is a whole lot better.\n\n376\n00:21:39.410 --> 00:21:41.910\nI can start cleaning up the DS statement.\n\n377\n00:21:41.910 --> 00:21:43.750\nI can run some aux stuff and\n\n378\n00:21:43.750 --> 00:21:49.330\ngripping on the ifconfig carving out\njust the IP address, I could do that.\n\n379\n00:21:49.330 --> 00:21:52.160\nReally cleaning up my\noutput giving that user.\n\n380\n00:21:52.160 --> 00:21:54.460\nBut we have a minimal viable product.\n\n381\n00:21:54.460 --> 00:21:56.959\nIt is working,\nit's doing exactly what I want.\n\n382\n00:21:56.959 --> 00:21:59.090\nNow, it's just all guessing it up, right?\n\n383\n00:21:59.090 --> 00:22:02.110\nWe are putting some polish\non the thing after that.\n\n384\n00:22:02.110 --> 00:22:04.690\nMaking it look better,\nwork better, looking for\n\n385\n00:22:04.690 --> 00:22:10.500\nany odd behavior, and\nmaking adjustments for that.\n\n386\n00:22:10.500 --> 00:22:14.080\nBut from here, we have made a very fairly\n\n387\n00:22:14.080 --> 00:22:17.450\nrobust system with not a lot of code\nthat will allow you to do a lot.\n\n388\n00:22:17.450 --> 00:22:21.480\nAnd all you have to do is add\nfunctionality to that case and\n\n389\n00:22:21.480 --> 00:22:22.410\nour echo options.\n\n390\n00:22:23.700 --> 00:22:26.120\n&gt;&gt; Absolutely, Daniel, and I can concur.\n\n391\n00:22:26.120 --> 00:22:29.340\nI'm not big on menu driven\nsystems as much as Daniel is.\n\n392\n00:22:29.340 --> 00:22:32.725\nBut I do see the utility,\nthere are definitely some pane points.\n\n393\n00:22:32.725 --> 00:22:36.831\nIf this was just like me clicking options,\nIPtables,\n\n394\n00:22:36.831 --> 00:22:42.020\nmaybe other things like that,\nI don't know how to type all these in.\n\n395\n00:22:42.020 --> 00:22:45.290\nI can't remember all those, so\nI would use that in this case.\n\n396\n00:22:45.290 --> 00:22:49.730\nNow, there are a couple of things\nwe haven't fully cleared and\n\n397\n00:22:49.730 --> 00:22:54.280\nmade sure the UI is absolutely\nwonderful for this, but it does work.\n\n398\n00:22:54.280 --> 00:22:55.970\nAnd that's our ultimate goal here.\n\n399\n00:22:55.970 --> 00:23:00.180\nNow, I know, in other languages, if you\ndo recursion for a real long time or\n\n400\n00:23:00.180 --> 00:23:03.380\nit runs really fast, you'll essentially\nkinda get a stack overflow.\n\n401\n00:23:03.380 --> 00:23:07.930\nWith these menu driven systems, I don't\neven know if that's really a worry.\n\n402\n00:23:07.930 --> 00:23:10.970\nBecause if you're in there for\nlike 10,000 hours just using the menu.\n\n403\n00:23:11.990 --> 00:23:16.570\nThere might be a better way\nthan necessarily having\n\n404\n00:23:16.570 --> 00:23:19.540\nmillions of menu calls within your script.\n\n405\n00:23:19.540 --> 00:23:23.234\nSo if any of you are like, well,\nthat could be stack overflow or\n\n406\n00:23:23.234 --> 00:23:27.902\nwe have a segfault or something,\nit's not outside the realm of possibility.\n\n407\n00:23:27.902 --> 00:23:36.280\nHowever, it is very unlikely if you\nuse it with common usage patterns.\n\n408\n00:23:36.280 --> 00:23:38.330\n&gt;&gt; Yeah, yeah, I thought of that actually.\n\n409\n00:23:38.330 --> 00:23:42.980\nI remember I've looked at some of my\nmore complexly driven menu systems and\n\n410\n00:23:42.980 --> 00:23:47.015\nit barely,\nbarely touches my processor and memory.\n\n411\n00:23:47.015 --> 00:23:49.705\nAnd I'm talking use it,\nuse it, use it, use it, use it.\n\n412\n00:23:49.705 --> 00:23:54.115\nIt barely scratches the surface on\nwhat my actual horsepower can do.\n\n413\n00:23:54.115 --> 00:23:58.951\nSo I think you're a pretty good\nbet that you can run this fairly\n\n414\n00:23:58.951 --> 00:24:04.164\ncomplex stuff Again maybe if you're\nrunning it for days at a time.\n\n415\n00:24:04.164 --> 00:24:07.656\nAnd days at time and you never exit out of\nthe system, you might run into that, so\n\n416\n00:24:07.656 --> 00:24:08.714\njust keep that in mind.\n\n417\n00:24:08.714 --> 00:24:13.691\nIt is a good warning by that,\nmaybe check your system usage and\n\n418\n00:24:13.691 --> 00:24:18.230\nsee how it performs as you\nuse it on a lengthy basis.\n\n419\n00:24:18.230 --> 00:24:20.077\nBut from there, you can come in and\n\n420\n00:24:20.077 --> 00:24:22.706\ndo some tricks too to\nalleviate that pain point.\n\n421\n00:24:22.706 --> 00:24:27.479\nBut for right now I think that having that\nminimal viable product is going to really\n\n422\n00:24:27.479 --> 00:24:30.550\njust get you started, and\nthat's what we wanna do.\n\n423\n00:24:30.550 --> 00:24:31.528\nAll right, I know we've got\na little bit of time left.\n\n424\n00:24:31.528 --> 00:24:35.176\nI wanna show you another way in which you\ncan create a menu system very quickly\n\n425\n00:24:35.176 --> 00:24:37.223\nusing what's called a select function.\n\n426\n00:24:37.223 --> 00:24:40.159\nAll right, I'm gonna get out of\nours that we've just created here.\n\n427\n00:24:40.159 --> 00:24:45.370\nNot x+3, there we go,\nand clear there we go.\n\n428\n00:24:45.370 --> 00:24:52.729\nI've got this other one\ncalled nano select.sh.\n\n429\n00:24:52.729 --> 00:24:57.305\nIt does basically the same thing\nof what we just did manually,\n\n430\n00:24:57.305 --> 00:24:58.978\nwe created that menu.\n\n431\n00:24:58.978 --> 00:25:02.053\nWe did echo, here's the thing,\ntook the read,\n\n432\n00:25:02.053 --> 00:25:05.966\nthrew it into a case statement,\nand bada-bing bada-boom.\n\n433\n00:25:05.966 --> 00:25:10.487\nSelect is very,\nvery similar to a for loop, okay?\n\n434\n00:25:10.487 --> 00:25:13.673\nI wanna to say it is a modified for\nloop or\n\n435\n00:25:13.673 --> 00:25:18.512\nat least it seems like it,\njust off of a first look, right?\n\n436\n00:25:18.512 --> 00:25:21.083\nThere are some things you need\nto know about how it works.\n\n437\n00:25:21.083 --> 00:25:22.624\nAnd you'll notice we're doing\nthe same kind of thing.\n\n438\n00:25:22.624 --> 00:25:26.730\nI've got a function for disk,\nI've got a function for network,\n\n439\n00:25:26.730 --> 00:25:30.102\nI've got a function for\nrunning a calendar, right?\n\n440\n00:25:30.102 --> 00:25:32.685\nGive me the yearly calendar kind of thing.\n\n441\n00:25:32.685 --> 00:25:35.232\nCuz I like to break things up into\nfunctions and call functions,\n\n442\n00:25:35.232 --> 00:25:36.280\nthat's what I like to do.\n\n443\n00:25:36.280 --> 00:25:40.619\nBut if you come down here,\nyou'll see some different stuff.\n\n444\n00:25:40.619 --> 00:25:43.297\nAnd the first thing different you\n\n445\n00:25:43.297 --> 00:25:48.770\nsee is this PS3 equals this\necho chain command, okay?\n\n446\n00:25:48.770 --> 00:25:53.470\nSo what's happening here is\nthe Select function program,\n\n447\n00:25:53.470 --> 00:25:55.730\nwhatever you wanna call it.\n\n448\n00:25:55.730 --> 00:26:01.880\nLoop really is what it is,\nuses this PS3 environmental variable.\n\n449\n00:26:01.880 --> 00:26:04.056\nIt is an environmental variable, okay?\n\n450\n00:26:04.056 --> 00:26:08.770\nAnd what it does, is it's gonna be\nyour prompt inside of your menu.\n\n451\n00:26:08.770 --> 00:26:10.846\nSo I had a little fun with it and\n\n452\n00:26:10.846 --> 00:26:15.240\nyou can see my prompt is going\nto look like this dagger.\n\n453\n00:26:15.240 --> 00:26:17.500\nI went looked up ASCII one line art.\n\n454\n00:26:17.500 --> 00:26:20.663\nI thought man, it would be cool to have\nsomething other than just an arrow or\n\n455\n00:26:20.663 --> 00:26:22.234\ndollar sign, something like that.\n\n456\n00:26:22.234 --> 00:26:23.833\nSo I looked up ASCII one line art and\nI found a dagger.\n\n457\n00:26:23.833 --> 00:26:27.630\nThere's a whole bunch of them that you can\nfind if you'd like something like that.\n\n458\n00:26:27.630 --> 00:26:28.989\nJust having a little fun with my script,\nright?\n\n459\n00:26:28.989 --> 00:26:30.300\nSo I got this cool dagger.\n\n460\n00:26:31.510 --> 00:26:34.672\nBut then the real meat and\npotatoes comes in with Select, right?\n\n461\n00:26:34.672 --> 00:26:39.560\nSo Select option in Disk, right?\n\n462\n00:26:39.560 --> 00:26:41.600\nSo option is just that variable.\n\n463\n00:26:41.600 --> 00:26:45.751\nJust like if I were doing for\nvar 1 in, and here's a list of things.\n\n464\n00:26:45.751 --> 00:26:48.940\nAnd you'll notice,\nthat's exactly what we see.\n\n465\n00:26:48.940 --> 00:26:55.746\nSelect option in \"Disk\"\n\"IP\" \"Calendar\" and \"Exit\".\n\n466\n00:26:55.746 --> 00:26:58.460\nSo this is our array that\nit's going to look to.\n\n467\n00:26:59.500 --> 00:27:03.131\nNow when we drop down to the case,\nwhat do we have to do?\n\n468\n00:27:03.131 --> 00:27:06.480\nSo case $option in,\ndon't forget your do, right?\n\n469\n00:27:06.480 --> 00:27:08.129\nYou gotta throw a do on there,\njust like I said.\n\n470\n00:27:08.129 --> 00:27:11.780\nBut this isn't a modified for\nloop somehow or way or another.\n\n471\n00:27:11.780 --> 00:27:13.005\nI don't know what it is.\n\n472\n00:27:13.005 --> 00:27:17.650\nAnd then it says case $option in,\n\"Disk\" would be our first option.\n\n473\n00:27:17.650 --> 00:27:20.051\n\"IP\" will be our second option,\n\"Calendar\" our third.\n\n474\n00:27:20.051 --> 00:27:23.787\nNow here's where it gets a little wonky,\nis when we actually run this,\n\n475\n00:27:23.787 --> 00:27:25.800\nit's gonna add a 1 next to \"Disk\".\n\n476\n00:27:25.800 --> 00:27:28.263\nIt's gonna add a 2 next to \"IP\".\n\n477\n00:27:28.263 --> 00:27:30.040\nIt's gonna add a 3 next to \"Calendar\".\n\n478\n00:27:30.040 --> 00:27:35.921\nAnd a 4 next to Exit, and\nthose are the options.\n\n479\n00:27:35.921 --> 00:27:38.280\nI can't remember,\nI don't use Select a lot.\n\n480\n00:27:38.280 --> 00:27:41.460\nSo either type the 1,\nbut it's taking \"Disk\".\n\n481\n00:27:41.460 --> 00:27:43.770\nI think that is what's happening.\n\n482\n00:27:43.770 --> 00:27:46.660\nYou type 1 and it sees that as \"Disk\".\n\n483\n00:27:46.660 --> 00:27:50.560\nSo in your case statement you have\nto throw \"Disk\" at it, not 1.\n\n484\n00:27:50.560 --> 00:27:52.590\nOkay so just be aware of that.\n\n485\n00:27:52.590 --> 00:27:57.007\nSo then we come down and then just like\nwe saw before regular kind of stuff,\n\n486\n00:27:57.007 --> 00:28:00.426\necho \"Disk Usage\", disk,\nit runs the disk function,\n\n487\n00:28:00.426 --> 00:28:06.030\nreads, \"Press any key continue...\",\nthen recurses back to the Menu.\n\n488\n00:28:06.030 --> 00:28:08.124\nNothing different after this, right?\n\n489\n00:28:08.124 --> 00:28:13.590\nEverything that you're so used to seeing\non everything we've already seen.\n\n490\n00:28:13.590 --> 00:28:17.449\nSo if I run this let's see how it looks,\nCtrl+X ./select.\n\n491\n00:28:17.449 --> 00:28:22.140\nYou'll notice,\nsee how it put the 1 2 3 and 4?\n\n492\n00:28:22.140 --> 00:28:26.375\nI didn't define that as 1 2 3 and\n4, Select did that.\n\n493\n00:28:26.375 --> 00:28:29.180\nAnd then PS3 gives us my dagger for\nour pump.\n\n494\n00:28:29.180 --> 00:28:30.926\nI just think that's so cool, right?\n\n495\n00:28:30.926 --> 00:28:33.670\nAnd then if I type in 1, I get Disk.\n\n496\n00:28:33.670 --> 00:28:35.314\nPress any key to continue.\n\n497\n00:28:35.314 --> 00:28:37.576\nRecurses me back to the menu,\nclears the screen, and\n\n498\n00:28:37.576 --> 00:28:38.995\ndoes all the stuff I need it to do.\n\n499\n00:28:38.995 --> 00:28:42.595\nSo if you like the way Select operates,\nmaybe that's more your style,\n\n500\n00:28:42.595 --> 00:28:45.180\nyou don't wanna create\nyour own customized menu.\n\n501\n00:28:45.180 --> 00:28:49.740\nOr you say well, I'll let Select do\nthe heavy lifting on the options.\n\n502\n00:28:49.740 --> 00:28:52.405\nI'll just put in the labels for\nthe options.\n\n503\n00:28:52.405 --> 00:28:55.280\nBada-bing, Select is also another option.\n\n504\n00:28:55.280 --> 00:28:59.971\nNow Justin we've got more to go, but\nwell yeah we don't have time for that.\n\n505\n00:28:59.971 --> 00:29:01.340\n&gt;&gt; [LAUGH]\n&gt;&gt; We're gonna need a Part 2.\n\n506\n00:29:01.340 --> 00:29:03.400\n&gt;&gt; All right Danny,\nyou are absolutely correct.\n\n507\n00:29:03.400 --> 00:29:04.466\nWe have a lot more to cover, and\n\n508\n00:29:04.466 --> 00:29:06.156\nwe definitely don't have\ntime in this episode.\n\n509\n00:29:06.156 --> 00:29:08.547\nBut you've shown us the utility,\nyou've gotta start.\n\n510\n00:29:08.547 --> 00:29:12.310\nI can see I need to get this down and\ndirty.\n\n511\n00:29:12.310 --> 00:29:14.941\nI might use the Select statement,\nI just need to get it done, right?\n\n512\n00:29:14.941 --> 00:29:18.817\nBut if I want something more customizable,\nI can go back to the first option, but\n\n513\n00:29:18.817 --> 00:29:22.460\nI haven't even seen the remaining\noptions that I have available to me.\n\n514\n00:29:22.460 --> 00:29:25.011\nWell and you haven't either,\nso definitely come back.\n\n515\n00:29:25.011 --> 00:29:29.500\nWe've already seen that using Select\nallows us to be expressive and creative.\n\n516\n00:29:29.500 --> 00:29:32.030\nAnd who knows what Daniel has\nup his sleeve for Part 2?\n\n517\n00:29:32.030 --> 00:29:34.770\nBut for this episode we're\ngonna go ahead and cut it out.\n\n518\n00:29:34.770 --> 00:29:38.286\nSo for now signing off for ITProTV,\nI've been your host, Justin Dennison.\n\n519\n00:29:38.286 --> 00:29:39.233\n&gt;&gt; And I'm Daniel Lowrie.\n\n520\n00:29:39.233 --> 00:29:40.193\n&gt;&gt; And we'll see you next time.\n\n521\n00:29:40.193 --> 00:29:47.833\n&gt;&gt; [MUSIC]\n\n522\n00:29:47.833 --> 00:29:50.423\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "238440091"
        },
        {
          "description": "In this episode, Daniel and Justin continue looking at ways to create graphical scripts. Here they use using the \"dialog\" program along with its \"widgets\" to create professional looking graphical scripts. They also mention modern GUI front-ends for scripts like kdialog, gdialog, and zenity.",
          "length": "2276",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-2-writing_graphical_scripts_pt_2-101317-PGM.01_04_41_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-2-writing_graphical_scripts_pt_2-101317-PGM.01_04_41_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-5-1-2-writing_graphical_scripts_pt_2-101317-PGM.01_04_41_01.Still001-sm.jpg",
          "title": "Writing Graphical Scripts Pt2",
          "transcript": "WEBVTT\n\n1\n00:00:00.001 --> 00:00:06.199\nWelcome to ITPROTV,\nI'm your host Don [CROSSTALK]\n\n2\n00:00:06.199 --> 00:00:08.365\n[MUSIC]\n\n3\n00:00:08.365 --> 00:00:12.012\n&gt;&gt; You're watching ITPROTV.\n\n4\n00:00:12.012 --> 00:00:15.235\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n5\n00:00:15.235 --> 00:00:18.975\nI'm your host Justin Dennison and\nwe are back with the part two\n\n6\n00:00:18.975 --> 00:00:23.245\nin creating graphical scripts in\nour advance shell scripting series.\n\n7\n00:00:23.245 --> 00:00:26.239\nAnd we started off learning\nabout some menu driven systems,\n\n8\n00:00:26.239 --> 00:00:29.275\nDaniel definitely showed\nus the utility of that.\n\n9\n00:00:29.275 --> 00:00:32.923\nI was like I didn't even know about\nsome of the things, such as select,\n\n10\n00:00:32.923 --> 00:00:34.510\nI could probably use these.\n\n11\n00:00:34.510 --> 00:00:37.280\nOn this episode,\nwe're gonna turn it up a notch.\n\n12\n00:00:37.280 --> 00:00:39.980\nWell when I say we,\nDaniel's gonna turn it up a notch and\n\n13\n00:00:39.980 --> 00:00:42.700\nI'm just gonna sit here and\nkind of like, that looks good.\n\n14\n00:00:42.700 --> 00:00:45.020\nAnd well Mr. Daniel Lowrie,\nhow are you doing today?\n\n15\n00:00:45.020 --> 00:00:46.520\n&gt;&gt; Man, I'm doing fantastic.\n\n16\n00:00:46.520 --> 00:00:50.160\nBack for more of our graphical usage\ninside of our scripts here in our\n\n17\n00:00:50.160 --> 00:00:50.710\nBash language.\n\n18\n00:00:50.710 --> 00:00:53.320\nIt's going to be a lot of fun\ntoday because, as Justin said.\n\n19\n00:00:53.320 --> 00:00:55.040\nWe're going to turn the wick\nup just a little bit and\n\n20\n00:00:55.040 --> 00:00:58.230\nsee how more bright we can\nget that candle to burn.\n\n21\n00:00:58.230 --> 00:01:02.810\nWe're going to use a little\ntool we like to call dialog.\n\n22\n00:01:02.810 --> 00:01:04.800\nCaveat for this show, dialog may or\n\n23\n00:01:04.800 --> 00:01:06.830\nmay not be installed on\nyour system by default.\n\n24\n00:01:06.830 --> 00:01:10.300\nSo if you need it, use your respective\npackage management system and\n\n25\n00:01:10.300 --> 00:01:11.720\ninstall accordingly.\n\n26\n00:01:11.720 --> 00:01:14.200\nSo that you can follow along\non our lovely little song\n\n27\n00:01:14.200 --> 00:01:17.010\nthat we're gonna use with\nthe dialog functionality.\n\n28\n00:01:17.010 --> 00:01:21.625\nSo, that being said, if you type in\ndialog or man dialog and nothing happens.\n\n29\n00:01:21.625 --> 00:01:23.480\nThat's gonna let you know\nthat you don't have it,\n\n30\n00:01:23.480 --> 00:01:25.770\nand that you're gonna need to install it.\n\n31\n00:01:25.770 --> 00:01:28.215\nBut if you do have it installed and\nyou're ready to go, rip roaring,.\n\n32\n00:01:28.215 --> 00:01:33.010\nIf you don't pause,\ngo do it now, come back, unpause.\n\n33\n00:01:33.010 --> 00:01:37.400\nNow that you've unpaused we're back and\nwe are going to run the dialog thing,\n\n34\n00:01:37.400 --> 00:01:39.613\nsee what it looks like and how it works.\n\n35\n00:01:39.613 --> 00:01:43.700\nBasics of dialog is gonna be this,\n\n36\n00:01:43.700 --> 00:01:48.700\nit kinda gives you message\nbox type functionality, okay?\n\n37\n00:01:48.700 --> 00:01:52.690\nThat's what we're talking about here,\nwhere you see a box,\n\n38\n00:01:52.690 --> 00:01:55.530\nmaybe it has a title and\nhas information inside of it.\n\n39\n00:01:55.530 --> 00:01:57.720\nAnd it's a box, you've seen these things.\n\n40\n00:01:57.720 --> 00:02:02.010\nMaybe if you've done a graphical\ninstall of Linux, you've\n\n41\n00:02:02.010 --> 00:02:05.990\nmaybe seen something like that there,\nespecially with minimal distribution.\n\n42\n00:02:05.990 --> 00:02:08.550\nStuff that's meant to\nbe really shoved down.\n\n43\n00:02:09.550 --> 00:02:12.780\nThat these are the types of menus\nthat you've probably seen going\n\n44\n00:02:12.780 --> 00:02:14.560\nthrough those types of systems.\n\n45\n00:02:14.560 --> 00:02:17.420\nAnd now I'm gonna show you\ntoday how we can employ that.\n\n46\n00:02:17.420 --> 00:02:20.000\nThey use what's called widgets, and\n\n47\n00:02:20.000 --> 00:02:22.528\nbasically that's how you\ncall its functionality.\n\n48\n00:02:22.528 --> 00:02:25.107\nNow you say dialog, I need a message box.\n\n49\n00:02:25.107 --> 00:02:30.012\nLet's go to message box widget and\ndialog I need this this type of box.\n\n50\n00:02:30.012 --> 00:02:31.472\nWell it's got that type of widget.\n\n51\n00:02:31.472 --> 00:02:34.920\nAnd there's a bunch of different\nwidgets inside dialog, so\n\n52\n00:02:34.920 --> 00:02:37.630\nmany that there is no way,\nwe can probably make a series on it.\n\n53\n00:02:37.630 --> 00:02:42.409\nLet's go through the dialog widgets and\nit'd be a week long, it'd be crazy.\n\n54\n00:02:42.409 --> 00:02:44.493\nBut we're gonna through some\nof the more common ones,\n\n55\n00:02:44.493 --> 00:02:47.320\nthen we're gonna take a look at some\nof the examples of those common ones.\n\n56\n00:02:47.320 --> 00:02:52.001\nAnd then, we're gonna build a script\nusing dialogue inside of our script.\n\n57\n00:02:52.001 --> 00:02:55.796\nSo that we can make maybe a more\nprofessional looking script that other\n\n58\n00:02:55.796 --> 00:02:57.720\npeople might use, okay?\n\n59\n00:02:57.720 --> 00:03:01.510\nSo let's start there, let's go to some\nof the, let's take a look at the some of\n\n60\n00:03:01.510 --> 00:03:03.940\nthe common widget stuff\nwe might work with, okay?\n\n61\n00:03:03.940 --> 00:03:05.620\nI have got a little file\nhere that I've have created,\n\n62\n00:03:05.620 --> 00:03:10.593\nit is called dialog_widgets,\nso cat dialog_widgets.txt.\n\n63\n00:03:10.593 --> 00:03:13.159\nAnd this is just a sprinkling,\n\n64\n00:03:13.159 --> 00:03:17.708\na handful of the widgets that\nare available in dialog.\n\n65\n00:03:17.708 --> 00:03:20.475\nOf course if you want to look\nat a more robust list of that,\n\n66\n00:03:20.475 --> 00:03:24.224\njust man dialog And it will spit out those\nwith a regularity there that you will\n\n67\n00:03:24.224 --> 00:03:26.510\nbe like well this man file is long.\n\n68\n00:03:26.510 --> 00:03:30.110\nCuz it wants to be as robust as possible\nand good for them for making that.\n\n69\n00:03:30.110 --> 00:03:31.770\nAs you can see, we've got calendar,\n\n70\n00:03:31.770 --> 00:03:34.950\nwhich is a calendar with selectable dates,\nthat's cool.\n\n71\n00:03:34.950 --> 00:03:39.780\nChecklist, form,\ncreate a fillable form with labels, right?\n\n72\n00:03:39.780 --> 00:03:44.510\nI can see the application there,\nfselect, browse and select files.\n\n73\n00:03:44.510 --> 00:03:47.350\nThat's a file selecting box\nthat's meant to say, hey,\n\n74\n00:03:47.350 --> 00:03:52.090\nI've selected this directory and pops it\nopen and now you can directory browse.\n\n75\n00:03:52.090 --> 00:03:54.090\nVery cool, I like that option.\n\n76\n00:03:54.090 --> 00:03:57.763\nGauges, if you're waiting for something\nto complete, put a gauge in there,\n\n77\n00:03:57.763 --> 00:04:00.170\nwatch the thing spin or\nfill up or whatever it does.\n\n78\n00:04:01.360 --> 00:04:06.881\nInfobox, on and on, we got password boxes,\nmessage boxes, menus,\n\n79\n00:04:06.881 --> 00:04:13.630\nradio list, textbox, timebox, yes or\nno's, the sky's the limit here, right?\n\n80\n00:04:13.630 --> 00:04:16.310\nJust head to the horizon and\ngo crazy with these things.\n\n81\n00:04:16.310 --> 00:04:19.510\nAgain, these are just some of\nthe functions that we have,\n\n82\n00:04:19.510 --> 00:04:22.590\nthe widgets built into the dialog system.\n\n83\n00:04:22.590 --> 00:04:25.890\nGo into that main file if you really\nlike what you see in this episode.\n\n84\n00:04:25.890 --> 00:04:30.265\nYou think, man, dialog, that's the key for\nme, I wanna go crazy with that.\n\n85\n00:04:30.265 --> 00:04:32.756\nJust check out that man file,\nit's extremely robust,\n\n86\n00:04:32.756 --> 00:04:34.440\nit has a lot of information.\n\n87\n00:04:34.440 --> 00:04:37.350\nIt'll have, I think,\nall the widgets and an explanation for\n\n88\n00:04:37.350 --> 00:04:40.944\nwhat those widgets do and\nhow they work, all right?\n\n89\n00:04:40.944 --> 00:04:44.630\nSo let's look at some of these\nwidgets that we might actually use on\n\n90\n00:04:44.630 --> 00:04:45.550\na regular, right?\n\n91\n00:04:45.550 --> 00:04:48.903\nI think the first one I have is,\n\n92\n00:04:50.350 --> 00:04:54.570\nI've jumped the gun,\nI'm getting ahead of myself.\n\n93\n00:04:54.570 --> 00:04:56.995\nLet's talk about some of the widget stuff.\n\n94\n00:04:56.995 --> 00:04:59.350\nWhen you say widget stuff,\nwhat do you mean?\n\n95\n00:04:59.350 --> 00:05:03.730\nWell if I call it widget,\nif I say message box, right?\n\n96\n00:05:03.730 --> 00:05:05.420\nMessage box, user must press okay.\n\n97\n00:05:05.420 --> 00:05:10.380\nWell there's some goings on with that.\n\n98\n00:05:10.380 --> 00:05:12.660\nOkay, well you press okay, big deal.\n\n99\n00:05:12.660 --> 00:05:16.430\nIt is a big deal because when\nI press okay, it actually\n\n100\n00:05:16.430 --> 00:05:21.490\nhas a value that it sends to\nstandard here, I do believe, right?\n\n101\n00:05:21.490 --> 00:05:24.970\nSo it's gonna be a 1 or a 0.\n\n102\n00:05:24.970 --> 00:05:27.890\nActually and\nit also works with exit codes.\n\n103\n00:05:27.890 --> 00:05:33.190\nSo if there's exit codes,\nif I have a yes or no box.\n\n104\n00:05:33.190 --> 00:05:39.920\nIf I press yes, the exit code returns as a\nzero, if I press no, it returns as a one.\n\n105\n00:05:39.920 --> 00:05:45.480\nSo knowing this as we go on, keep this\nstuff in mind, that if you have a yes or\n\n106\n00:05:45.480 --> 00:05:49.540\nno type of thing that you need to answer,\nan okay or a cancel.\n\n107\n00:05:49.540 --> 00:05:54.910\nWhen you have a binary option, you\ntypically almost always if not always you\n\n108\n00:05:56.170 --> 00:06:02.710\nget 0 for yes or okay, and a 1 for no or\ncancelled, that kind of idea, right?\n\n109\n00:06:02.710 --> 00:06:06.970\nIf you have output, there's some\nsort of output use the calendar and\n\n110\n00:06:06.970 --> 00:06:10.800\nit grabs a date, or\nit grabs a string from an input box.\n\n111\n00:06:10.800 --> 00:06:13.770\nThat stuff goes to standard error, okay?\n\n112\n00:06:13.770 --> 00:06:17.290\nSo when you hit enter to take that input,\n\n113\n00:06:17.290 --> 00:06:23.070\nI've selected July the 4th on 1776,\nenter, okay.\n\n114\n00:06:23.070 --> 00:06:27.660\nOkay gets a value of zero and\nto the exit status.\n\n115\n00:06:27.660 --> 00:06:30.840\nBut also the standard\nerror has the date in it,\n\n116\n00:06:30.840 --> 00:06:33.580\nwill print to standard out,\nokay so keep that in mind.\n\n117\n00:06:33.580 --> 00:06:36.500\nI don't know why they chose\nstandard error but they did.\n\n118\n00:06:36.500 --> 00:06:40.600\nI guess because you can't redirect\nstandard out to standard out [LAUGH].\n\n119\n00:06:40.600 --> 00:06:45.611\nI guess to some extent,\nI think standard error might make a better\n\n120\n00:06:45.611 --> 00:06:49.130\noption when you're talking about zero and\none.\n\n121\n00:06:49.130 --> 00:06:50.760\nSo, if you think about it,\n\n122\n00:06:50.760 --> 00:06:55.070\ngood is zero well that's actually kind\nof backwards of what we typically think.\n\n123\n00:06:55.070 --> 00:07:00.200\nNot necessarily exit codes, but\nthese return values, standard error zero,\n\n124\n00:07:00.200 --> 00:07:03.870\nthere was no error,\nthings are good to proceed.\n\n125\n00:07:03.870 --> 00:07:07.600\nA one, there was an error and\nthen maybe you need to come back.\n\n126\n00:07:07.600 --> 00:07:09.745\nSo maybe they used the semantics for\n\n127\n00:07:09.745 --> 00:07:13.050\nlike the error stream as a way\nto capture this user input.\n\n128\n00:07:13.050 --> 00:07:17.610\nBecause it made sense within the terms of\nexit codes, cuz exit codes are typically,\n\n129\n00:07:17.610 --> 00:07:19.960\n0 is good and\nanything not 0 is bad, right?\n\n130\n00:07:19.960 --> 00:07:21.880\n&gt;&gt; I think you're getting confused.\n\n131\n00:07:21.880 --> 00:07:25.520\nIt doesn't go to the, let's make sure\nthis is straight cuz he's confuse,\n\n132\n00:07:25.520 --> 00:07:26.430\nmaybe you're confused.\n\n133\n00:07:26.430 --> 00:07:29.750\nI need to re explain it to make sure\nyou guys are understanding this.\n\n134\n00:07:29.750 --> 00:07:34.010\nIf there is output from the function,\nthat goes to standard error, okay?\n\n135\n00:07:34.010 --> 00:07:35.880\nIs that making sense?\n\n136\n00:07:35.880 --> 00:07:40.890\nSo, a date, if I hit a date,\nand I hit OK that's 4, 7,\n\n137\n00:07:40.890 --> 00:07:46.490\n1776, is a string that\ngoes into standard error.\n\n138\n00:07:46.490 --> 00:07:51.750\n0 or 1, when I pressed okay,\ngave me an exit code of 0.\n\n139\n00:07:51.750 --> 00:07:53.199\nSo keep that straight.\n\n140\n00:07:53.199 --> 00:07:55.286\nThere's output, it goes to standard error.\n\n141\n00:07:55.286 --> 00:08:00.686\nIf there is yes or no,\nokay, cancel functionality,\n\n142\n00:08:00.686 --> 00:08:03.930\nThat goes to exit codes, okay?\n\n143\n00:08:03.930 --> 00:08:06.830\nKeep that straight in your heads.\n\n144\n00:08:06.830 --> 00:08:07.820\n&gt;&gt; Okay, I got you now then.\n\n145\n00:08:07.820 --> 00:08:09.750\nSorry, too many things\ngoing on in my head.\n\n146\n00:08:09.750 --> 00:08:11.780\n&gt;&gt; That's good, that's good,\nthat's why we do this.\n\n147\n00:08:11.780 --> 00:08:14.630\n&gt;&gt; That makes a little more sense now and\nI guess that's just so\n\n148\n00:08:14.630 --> 00:08:18.340\nyou can have a delineation of what's\nbeing represented on the screen versus\n\n149\n00:08:18.340 --> 00:08:20.950\nother things that you may need to\ncapture in variables and whatnot.\n\n150\n00:08:20.950 --> 00:08:21.850\n&gt;&gt; You nailed it, nailed it.\n\n151\n00:08:21.850 --> 00:08:25.290\nAnd that's exactly what we're gonna see\nwhen we get into the actual script up.\n\n152\n00:08:25.290 --> 00:08:30.740\nOkay, hopefully we are all on the same\nlevel now and we're gonna move on and\n\n153\n00:08:30.740 --> 00:08:34.670\nnow we're gonna take a look at\nhow some of these widgets work.\n\n154\n00:08:34.670 --> 00:08:39.520\nSo that when we get to the script part\nof it we go, yeah, I know that one.\n\n155\n00:08:39.520 --> 00:08:40.740\nI see what's happening there.\n\n156\n00:08:40.740 --> 00:08:43.460\nCuz it does look a little\nweird at first glance,\n\n157\n00:08:43.460 --> 00:08:48.330\nand it's not until it's explained that\nit's gonna make a whole lot more sense.\n\n158\n00:08:48.330 --> 00:08:50.280\nNot really intuitive in a lot of ways.\n\n159\n00:08:50.280 --> 00:08:51.030\nSo let's take a look at this.\n\n160\n00:08:51.030 --> 00:08:55.380\nLet me clear this out, and\nthe first one I'm gonna do,\n\n161\n00:08:55.380 --> 00:08:57.460\nlet's start with a standard message box,\nokay?\n\n162\n00:08:57.460 --> 00:08:59.960\nSo I'll say dialog.\n\n163\n00:08:59.960 --> 00:09:01.330\nThis is how we're gonna call dialog.\n\n164\n00:09:01.330 --> 00:09:03.994\nYou just type in dialog, all right?\n\n165\n00:09:03.994 --> 00:09:07.627\nAnd then you'll say So\n\n166\n00:09:07.627 --> 00:09:13.600\nif I'm not mistaken, all the widgets\nare called by a -- widget name.\n\n167\n00:09:13.600 --> 00:09:18.410\nSo calendar, MsgBox, TextBox, fSelect,\nwhatever, -- session session.\n\n168\n00:09:18.410 --> 00:09:24.310\n--msgbox for message box,\nand then we just give it\n\n169\n00:09:24.310 --> 00:09:29.720\nsome text which I will double quote\naround just to make sure it's bound up.\n\n170\n00:09:31.200 --> 00:09:37.320\nAnd I'll say this is a message box.\n\n171\n00:09:37.320 --> 00:09:43.660\nSo we push off the side here so\nwe can get it all in one line.\n\n172\n00:09:43.660 --> 00:09:48.940\nThere we go, this is a message box and\nthen we have to give it some parameters.\n\n173\n00:09:48.940 --> 00:09:52.190\nAnd the parameters are, what\nare the height and width, or the width and\n\n174\n00:09:52.190 --> 00:09:56.100\nheight of the said message box, okay?\n\n175\n00:09:56.100 --> 00:10:01.190\nSo if I put in something like I think,\nI like 5 and 30 is I found for\n\n176\n00:10:01.190 --> 00:10:04.990\nmy environment to be pretty good\nwith something like a message box.\n\n177\n00:10:04.990 --> 00:10:10.450\nSo I'm saying, I'm not mistaking\nit's first number is height,\n\n178\n00:10:10.450 --> 00:10:13.330\nno it's width, I think the first number is\nwidth and second number is height, okay?\n\n179\n00:10:13.330 --> 00:10:14.770\nSo just keep that in mind.\n\n180\n00:10:14.770 --> 00:10:16.580\nYeah, height and then width.\n\n181\n00:10:16.580 --> 00:10:21.190\nSo, now I hit enter and you'll notice,\nbada bing, graphics it's so pretty.\n\n182\n00:10:21.190 --> 00:10:22.770\nIt says, this is a message box.\n\n183\n00:10:22.770 --> 00:10:27.920\nNow it turns the background blue, that's\njust part of the dialog functionality.\n\n184\n00:10:27.920 --> 00:10:31.360\nThe message box itself is this grey box.\n\n185\n00:10:31.360 --> 00:10:35.550\nRight, so when you affect the height and\nwidth, that's what's going to be affected.\n\n186\n00:10:35.550 --> 00:10:36.150\nJust keep that in mind.\n\n187\n00:10:37.170 --> 00:10:39.390\nAnd now, I can press okay.\n\n188\n00:10:39.390 --> 00:10:41.510\nAnd it takes me back to my terminal.\n\n189\n00:10:41.510 --> 00:10:47.289\nOkay, if I echo $?, you'll\n\n190\n00:10:47.289 --> 00:10:53.620\nsee that I get returned 0 because all I\nhad was okay, there was no binary option.\n\n191\n00:10:53.620 --> 00:10:55.180\nSo 0 is gonna be the only\nthing it could return.\n\n192\n00:10:55.180 --> 00:10:59.805\nIf it was okay or cancel and I hit cancel,\nthen that would have been a one, okay?\n\n193\n00:10:59.805 --> 00:11:01.639\nThat's how that's working itself out.\n\n194\n00:11:01.639 --> 00:11:03.858\nAll right, let's clear again.\n\n195\n00:11:03.858 --> 00:11:09.274\nThat's pretty simple, so anytime you\nwant to maybe format a message to\n\n196\n00:11:09.274 --> 00:11:14.599\nthe user in a way that's a littler\nmore snazzy than what we did before,\n\n197\n00:11:14.599 --> 00:11:19.990\nthen maybe dialog's the thing for\nyou and that's just boxes abound.\n\n198\n00:11:19.990 --> 00:11:21.195\nGo crazy with them, they're a lot of fun.\n\n199\n00:11:21.195 --> 00:11:22.630\nWhat's another one?\n\n200\n00:11:22.630 --> 00:11:24.082\nWe can work with title.\n\n201\n00:11:24.082 --> 00:11:30.430\nAll right, this is more like\nan option on top of your widget.\n\n202\n00:11:30.430 --> 00:11:32.974\nIt's a widget for\nthe widget usually, okay?\n\n203\n00:11:32.974 --> 00:11:38.217\nSo kinda like this, so if I say dialog\n\n204\n00:11:38.217 --> 00:11:43.798\n--title and I say, let's see here,\n\n205\n00:11:43.798 --> 00:11:48.364\nlet's say MESSAGE BOX!!!,\n\n206\n00:11:48.364 --> 00:11:53.269\nlike so, that will be the title for\n\n207\n00:11:53.269 --> 00:11:57.355\nmy --msgbox and then yay.\n\n208\n00:11:59.375 --> 00:12:00.660\n530, there we go, did it.\n\n209\n00:12:00.660 --> 00:12:04.425\nAnd I've missed a character somewhere.\n\n210\n00:12:04.425 --> 00:12:06.610\nYeah, forgot the closed quotations.\n\n211\n00:12:06.610 --> 00:12:07.780\nLet's go back.\n\n212\n00:12:07.780 --> 00:12:08.980\nTry that out one more time.\n\n213\n00:12:08.980 --> 00:12:09.480\nThere we go.\n\n214\n00:12:10.835 --> 00:12:12.032\nThat's fun.\n\n215\n00:12:12.032 --> 00:12:14.226\nTry that, and now you'll see,\n\n216\n00:12:14.226 --> 00:12:18.627\nthis is a message box I got to\nclear that came in from the.\n\n217\n00:12:18.627 --> 00:12:21.470\nBut, it put the title\nat the top of the box.\n\n218\n00:12:21.470 --> 00:12:26.550\nAny time that I want to change or\nadd a title to a box that I'm using,\n\n219\n00:12:26.550 --> 00:12:31.600\nor a widget that I'm using, I can use that\n--title functionality to give it a more,\n\n220\n00:12:31.600 --> 00:12:33.380\ndescriptive idea.\n\n221\n00:12:33.380 --> 00:12:36.490\nSo when the end users sees it,\nthey go, this is a message box,\n\n222\n00:12:36.490 --> 00:12:40.230\nthis just meant to be informational,\nit's a message, right?\n\n223\n00:12:40.230 --> 00:12:43.700\nOr I could've make it information,\nthings you should know.\n\n224\n00:12:43.700 --> 00:12:47.753\nSomething like that to let them know,\nall I need to do is press OK,\n\n225\n00:12:47.753 --> 00:12:50.135\nall right, and I'm back, so clear.\n\n226\n00:12:50.135 --> 00:12:53.258\n&gt;&gt; So, Daniel, you just said that\nthese are very informational.\n\n227\n00:12:53.258 --> 00:12:57.036\nBut if I'm building one of this\nmenu driven systems using dialog,\n\n228\n00:12:57.036 --> 00:13:01.419\nwould I use the yes, no widget to take\nlike do you agree, like I think of this,\n\n229\n00:13:01.419 --> 00:13:04.792\nI've installed Java recently\nthrough the command line and\n\n230\n00:13:04.792 --> 00:13:09.475\nyou get these kind of little [INAUDIBLE],\ndo you agree to the licensing agreement.\n\n231\n00:13:09.475 --> 00:13:12.730\nYou get to kind of yes, no, okay,\ncancel, whatever it may be.\n\n232\n00:13:12.730 --> 00:13:15.660\nWould that be the appropriate\nwidget to use in that case?\n\n233\n00:13:15.660 --> 00:13:21.630\n&gt;&gt; You could use it that way, and just\nput yes, no and have that as the title.\n\n234\n00:13:21.630 --> 00:13:24.630\nBut you can also add text to a yes no box.\n\n235\n00:13:24.630 --> 00:13:27.660\nSo, six of one,\nhalf a dozen of the other, right?\n\n236\n00:13:27.660 --> 00:13:29.640\nHowever you like to do it should be fine.\n\n237\n00:13:29.640 --> 00:13:35.340\nBut if you want to see the yes no,\nwe'll just say dialog, like so.\n\n238\n00:13:35.340 --> 00:13:38.090\nAnd if we want to throw the title,\nwe do the title like that.\n\n239\n00:13:38.090 --> 00:13:40.950\nBut we'll just do a simple yes no box.\n\n240\n00:13:40.950 --> 00:13:45.890\nLet's see here,\nin way it works if you say --yesno.\n\n241\n00:13:45.890 --> 00:13:49.600\nVery simple, these widgets are pretty\ndescriptive on what they do.\n\n242\n00:13:49.600 --> 00:13:52.500\nSo then you'll add do you agree?\n\n243\n00:13:52.500 --> 00:13:55.420\nLike that.\n\n244\n00:13:55.420 --> 00:14:01.650\nAnd then give it some parameters,\n5 and 30, there you go.\n\n245\n00:14:01.650 --> 00:14:02.730\nDo you agree?\n\n246\n00:14:02.730 --> 00:14:04.300\nYes or no.\n\n247\n00:14:04.300 --> 00:14:05.320\nVery cool.\n\n248\n00:14:05.320 --> 00:14:08.640\nAnd you can use your arrow\nkeys to go back and forth.\n\n249\n00:14:08.640 --> 00:14:13.020\nSo if you're inside of something\nthat has options, you can go,\n\n250\n00:14:13.020 --> 00:14:15.470\nI'm over here, I'm over there,\nand just air key up down left and\n\n251\n00:14:15.470 --> 00:14:18.210\nright, tab to jump if\nthere's something up here and\n\n252\n00:14:18.210 --> 00:14:21.900\nyou want to jump back down to yes or no,\nso if you have to make a selection above.\n\n253\n00:14:21.900 --> 00:14:23.590\nMake a selection then tab down.\n\n254\n00:14:23.590 --> 00:14:25.740\nYou can do that,\nshift tab you go the other way.\n\n255\n00:14:25.740 --> 00:14:30.130\nAll of the regular standard keyboard\nfunctionality should be there for you.\n\n256\n00:14:30.130 --> 00:14:32.380\nJust wanted to make sure you knew that.\n\n257\n00:14:32.380 --> 00:14:37.860\nAlso, if your terminal supports it,\nI can click on it.\n\n258\n00:14:38.910 --> 00:14:44.130\nLove that, and if you're working any kind\nof modern terminal desktop environments\n\n259\n00:14:44.130 --> 00:14:47.650\nspecifically, you probably have\nthat functionality built in so\n\n260\n00:14:47.650 --> 00:14:50.310\nif you wanna able to click, you can click.\n\n261\n00:14:50.310 --> 00:14:51.430\nVery cool, right?\n\n262\n00:14:51.430 --> 00:14:52.638\nSo those are yes, no.\n\n263\n00:14:52.638 --> 00:14:54.054\nMoving on, let's see here.\n\n264\n00:14:54.054 --> 00:15:00.493\nBut if we wanna input some data,\nthat might be a good idea, right?\n\n265\n00:15:00.493 --> 00:15:05.469\nWe can use the input, let me clear out,\nand we'll say dialog --input,\n\n266\n00:15:05.469 --> 00:15:08.690\nlike so, and\nthen we'll say what is your name?\n\n267\n00:15:11.060 --> 00:15:13.635\nYour name, question mark and\n\n268\n00:15:13.635 --> 00:15:18.579\nthen of course don't forget\nwe have actual parameters,\n\n269\n00:15:18.579 --> 00:15:25.260\nwe'll make this one a little bit bigger,\n10, we'll say 25.\n\n270\n00:15:25.260 --> 00:15:28.110\nLike that,\nI must have made a syntax error there.\n\n271\n00:15:28.110 --> 00:15:29.440\nWhat am I missing?\n\n272\n00:15:34.110 --> 00:15:35.560\nIt's input box.\n\n273\n00:15:36.920 --> 00:15:38.100\nGotta get them right.\n\n274\n00:15:38.100 --> 00:15:41.040\nGotta keep them straight in your head,\nbox, most of these things and\n\n275\n00:15:41.040 --> 00:15:43.080\nthen some sort of box functionality, but.\n\n276\n00:15:43.080 --> 00:15:46.840\nEvery now and then they don't so it trips\nme up every time, gets you every time.\n\n277\n00:15:46.840 --> 00:15:47.860\nTry that, there we go.\n\n278\n00:15:47.860 --> 00:15:49.140\nNow it looks better.\n\n279\n00:15:49.140 --> 00:15:49.960\nWhat is your name?\n\n280\n00:15:49.960 --> 00:15:53.110\nWell, Justin, what is your name?\n\n281\n00:15:53.110 --> 00:15:53.740\n&gt;&gt; Caleb.\n\n282\n00:15:53.740 --> 00:15:54.688\n&gt;&gt; Ghee Buttersnaps.\n\n283\n00:15:54.688 --> 00:15:56.009\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n284\n00:15:56.009 --> 00:15:59.910\n&gt;&gt; Ghee Buttersnaps, there we go.\n\n285\n00:15:59.910 --> 00:16:01.480\nAnd then click okay.\n\n286\n00:16:01.480 --> 00:16:06.085\nAnd you'll notice this kind of weird\nthing happens where it puts this out on\n\n287\n00:16:06.085 --> 00:16:08.630\nthe screen, what is going on here?\n\n288\n00:16:08.630 --> 00:16:12.750\nSo remember when I said when there's\noutputs, it goes to standard error.\n\n289\n00:16:12.750 --> 00:16:16.362\nWhere is standard error\ndirected to by default?\n\n290\n00:16:16.362 --> 00:16:17.960\nStandard out.\n\n291\n00:16:17.960 --> 00:16:22.310\nSo it's coming to the screen, it's kind\nof stomping on what's going on here.\n\n292\n00:16:22.310 --> 00:16:25.310\nSo something that happens a lot\nwhen you work with something\n\n293\n00:16:25.310 --> 00:16:29.100\nthat has output like this,\nis you direct it to a file.\n\n294\n00:16:29.100 --> 00:16:31.510\nAnd then, work with the file, okay?\n\n295\n00:16:31.510 --> 00:16:36.200\nSo, we can do that, just redirect standard\nair, say two, and we'll say slash or\n\n296\n00:16:36.200 --> 00:16:40.540\nwe'll call it, let's say,\nname.txt, like that.\n\n297\n00:16:40.540 --> 00:16:46.730\nNow, when I type in Ghee Buttersnaps,\nAnd I hit OK.\n\n298\n00:16:46.730 --> 00:16:50.590\nNo stomping on my screen, and clear out.\n\n299\n00:16:50.590 --> 00:16:52.660\nAnd I should be able to cat name.txt.\n\n300\n00:16:52.660 --> 00:16:55.320\nAnd it says Ghee Buttersnaps there.\n\n301\n00:16:57.170 --> 00:16:58.460\nPretty cool, right?\n\n302\n00:16:58.460 --> 00:16:58.960\nVery awesome.\n\n303\n00:17:00.970 --> 00:17:04.090\nMoving on, I'm trying to ramble\nthrough some of these so\n\n304\n00:17:04.090 --> 00:17:05.630\nwe can get to the scripting stuff.\n\n305\n00:17:05.630 --> 00:17:08.140\nI just want to make sure I set a good\nfoundation of how some of these things\n\n306\n00:17:08.140 --> 00:17:13.670\nwork, and some of the building\nupon as I like to do, right?\n\n307\n00:17:13.670 --> 00:17:16.545\n[COUGH]\n&gt;&gt; But that does provide some context,\n\n308\n00:17:16.545 --> 00:17:17.905\nthat error that we just saw.\n\n309\n00:17:17.905 --> 00:17:18.993\n&gt;&gt; Yeah.\n&gt;&gt; What I would call it,\n\n310\n00:17:18.993 --> 00:17:19.759\nthe stomping over,\n\n311\n00:17:19.759 --> 00:17:22.342\nwhy they would use standard error\nto kind of pack away information.\n\n312\n00:17:22.342 --> 00:17:24.345\n&gt;&gt; So why they do this.\n\n313\n00:17:24.345 --> 00:17:27.675\n&gt;&gt; Cuz they're essentially\nhijacking standard out to draw some\n\n314\n00:17:27.675 --> 00:17:29.038\nof the interface, I'm guessing.\n\n315\n00:17:29.038 --> 00:17:31.637\nAnd then [SOUND] that'll stomp all over it\n\n316\n00:17:31.637 --> 00:17:34.628\nif we're also putting\nthat to standard down.\n\n317\n00:17:34.628 --> 00:17:38.043\n&gt;&gt; Yeah, yeah, that's a great point he\nmakes right there because if you're\n\n318\n00:17:38.043 --> 00:17:40.550\ngetting this weird output,\nwell what do we do with it?\n\n319\n00:17:40.550 --> 00:17:42.130\nWe need to do something with it.\n\n320\n00:17:42.130 --> 00:17:44.670\nThere we go, they've solved\nthat problem with standard air.\n\n321\n00:17:44.670 --> 00:17:49.230\nNow another thing what we like to\ndo is informational things that\n\n322\n00:17:49.230 --> 00:17:51.110\nwe don't wanna have to say what.\n\n323\n00:17:51.110 --> 00:17:54.950\nWe've put in information\nby saying titles or quotes.\n\n324\n00:17:54.950 --> 00:17:58.790\nWe can add text to the box itself,\nto the widget.\n\n325\n00:17:58.790 --> 00:18:01.536\nBut what if I want to get\ninformation from a file?\n\n326\n00:18:01.536 --> 00:18:03.590\nWell you can just text box for that.\n\n327\n00:18:03.590 --> 00:18:06.290\nIt's fantastic actually for doing that.\n\n328\n00:18:06.290 --> 00:18:11.990\nSo we do dialog --textbox,\nlike so, all right?\n\n329\n00:18:11.990 --> 00:18:14.800\nAnd then we tell it what\nfile we wanna read from.\n\n330\n00:18:14.800 --> 00:18:17.130\nSo say something like etc password.\n\n331\n00:18:17.130 --> 00:18:19.055\nThat could be good.\n\n332\n00:18:19.055 --> 00:18:26.510\n/etsy/passwd, like that,\ngive it the hyphen with parameters.\n\n333\n00:18:26.510 --> 00:18:30.481\nI'll go with, this is probably gonna have,\ncuz I don't know if you guys have ever\n\n334\n00:18:30.481 --> 00:18:34.166\nseen the etc password file, some of\nthose strings can be rather lengthy, so\n\n335\n00:18:34.166 --> 00:18:35.910\nI'm gonna widen it out quite a bit.\n\n336\n00:18:35.910 --> 00:18:36.850\nSay 20 and 100.\n\n337\n00:18:36.850 --> 00:18:41.820\nAnd there we go,\nnow I have got my full password file.\n\n338\n00:18:41.820 --> 00:18:47.480\nI can see the users on here and\nI can use my arrow keys to scroll up and\n\n339\n00:18:47.480 --> 00:18:51.000\ndown, it's a scrollable box,\ngotta love that.\n\n340\n00:18:51.000 --> 00:18:53.580\nRight, if it went left and right I\ncould scroll left and right as well.\n\n341\n00:18:53.580 --> 00:18:58.360\nI can also, if I have mouse functionality,\ncome over here and\n\n342\n00:18:58.360 --> 00:19:04.270\nclick down and up and\nit will go by page, okay?\n\n343\n00:19:04.270 --> 00:19:05.970\nSo, click functionality is nice.\n\n344\n00:19:05.970 --> 00:19:07.830\nBut if you don't have it, no big deal.\n\n345\n00:19:07.830 --> 00:19:09.150\nScrolly, scrolly, scrolly.\n\n346\n00:19:09.150 --> 00:19:10.490\nIt's a lot of fun.\n\n347\n00:19:10.490 --> 00:19:14.910\nText boxes can be very, very helpful and\nuseful in your scripts.\n\n348\n00:19:14.910 --> 00:19:15.840\nI'll exit out of that.\n\n349\n00:19:17.120 --> 00:19:18.050\nClear the screen.\n\n350\n00:19:18.050 --> 00:19:21.850\nLet's see here, moving on to menus.\n\n351\n00:19:22.980 --> 00:19:26.335\nMenus, you know I love the menu,\nI love to create a menu.\n\n352\n00:19:26.335 --> 00:19:29.760\nLet's select something,\njust give me an option.\n\n353\n00:19:29.760 --> 00:19:34.408\nAll right,\nyou can do this with --menu, right?\n\n354\n00:19:34.408 --> 00:19:37.657\nNot menu box, menu, all right?\n\n355\n00:19:37.657 --> 00:19:42.650\nDialog --menu like so, okay?\n\n356\n00:19:42.650 --> 00:19:46.480\nAnd a give it some information,\njust say like my menu.\n\n357\n00:19:46.480 --> 00:19:49.778\nMy menu, what am I, British?\n\n358\n00:19:49.778 --> 00:19:53.442\n[LAUGH] Actually, I am.\n\n359\n00:19:53.442 --> 00:19:55.532\n&gt;&gt; [LAUGH]\n&gt;&gt; You would never have guessed.\n\n360\n00:19:55.532 --> 00:19:59.055\n&gt;&gt; You definitely cover your accent and\nsome of that as well, so\n\n361\n00:19:59.055 --> 00:20:01.000\nI would have never have guessed.\n\n362\n00:20:01.000 --> 00:20:03.895\n&gt;&gt; I have wanted to do entire\nshows in a Scottish brogue.\n\n363\n00:20:03.895 --> 00:20:05.690\n&gt;&gt; [LAUGH]\n&gt;&gt; So badly.\n\n364\n00:20:05.690 --> 00:20:10.365\nAnd so send here to Don at\nITPro.TV [LAUGH] Say we want\n\n365\n00:20:10.365 --> 00:20:13.101\na Scottish show with Daniel.\n\n366\n00:20:13.101 --> 00:20:16.675\n[LAUGH]\n&gt;&gt; And it would all be in good fun.\n\n367\n00:20:16.675 --> 00:20:19.685\nNot necessarily to be\ndetrimental to anybody.\n\n368\n00:20:19.685 --> 00:20:20.835\n&gt;&gt; Yeah, I'm Scottish.\n\n369\n00:20:20.835 --> 00:20:21.605\nThat is why I love it.\n\n370\n00:20:21.605 --> 00:20:23.105\nAnd I love it.\nSo there you go.\n\n371\n00:20:23.105 --> 00:20:25.725\nAlright and back to menu, back to menu.\n\n372\n00:20:25.725 --> 00:20:28.185\nNow we have to give it some item width.\n\n373\n00:20:28.185 --> 00:20:29.872\nWe can't forget that.\n\n374\n00:20:29.872 --> 00:20:35.200\nI will make sure that I can fit\neverything on here, so I'll do 20, 50.\n\n375\n00:20:35.200 --> 00:20:38.142\nNot too wide, we're going Goldilocks\non us, not too big, not too small,\n\n376\n00:20:38.142 --> 00:20:40.170\nit's just right in height and width.\n\n377\n00:20:40.170 --> 00:20:42.610\nAnd then we have some things.\n\n378\n00:20:42.610 --> 00:20:45.980\nWe have to give it, it's a menu,\nand it needs selections.\n\n379\n00:20:45.980 --> 00:20:48.880\nHow do I pass that selection to it?\n\n380\n00:20:48.880 --> 00:20:54.250\nWell it's got that built in functionality\nwhen you call --menu as a widget, right?\n\n381\n00:20:54.250 --> 00:20:56.910\nSo first thing you have is a number that\n\n382\n00:20:56.910 --> 00:20:59.710\ndefines how many options\nyou're allowed to have.\n\n383\n00:20:59.710 --> 00:21:02.140\nI don't know why it's not infinite,\n\n384\n00:21:02.140 --> 00:21:06.836\nbut you have to say,\nI want no more than x options, right?\n\n385\n00:21:06.836 --> 00:21:09.075\nSo I'll just put five.\n\n386\n00:21:09.075 --> 00:21:10.730\nThat's no more than five.\n\n387\n00:21:10.730 --> 00:21:13.660\nYou can go up to it,\nbut ye shall not pass.\n\n388\n00:21:13.660 --> 00:21:16.460\nIf you want six,\nyou have to go back and make it six.\n\n389\n00:21:16.460 --> 00:21:17.260\nCrazy stuff, right?\n\n390\n00:21:18.310 --> 00:21:22.174\nMoving on, then we have the first option.\n\n391\n00:21:22.174 --> 00:21:23.753\nWhich is one, right?\n\n392\n00:21:23.753 --> 00:21:26.760\nSo this is the first option.\n\n393\n00:21:26.760 --> 00:21:33.210\nAnd it will be called, let's harken to\nour system administrations idea and\n\n394\n00:21:33.210 --> 00:21:37.780\nwe'll call it disk, like so, okay?\n\n395\n00:21:37.780 --> 00:21:42.100\n2, we'll call that IP, oops, sorry, IP.\n\n396\n00:21:42.100 --> 00:21:47.770\nAnd we'll say 3 is Exit, like that.\n\n397\n00:21:48.820 --> 00:21:51.640\nI think that is everything I'll need.\n\n398\n00:21:51.640 --> 00:21:56.170\nAnd then we'll need,\nsince it's gonna create some output,\n\n399\n00:21:56.170 --> 00:21:59.050\nright, ultimately, we wanna redirect that.\n\n400\n00:21:59.050 --> 00:22:00.850\nIt's always a good idea to.\n\n401\n00:22:00.850 --> 00:22:07.070\nWe'll just call it output.txt.\n\n402\n00:22:07.070 --> 00:22:10.320\nFire that off,\nnow we get this lovely menu driven system.\n\n403\n00:22:11.680 --> 00:22:14.910\nI can scroll through\nthe options using my arrows,\n\n404\n00:22:14.910 --> 00:22:17.160\nI can click on the options if I want.\n\n405\n00:22:17.160 --> 00:22:19.030\nObviously nothing is going\nto happen at this point,\n\n406\n00:22:19.030 --> 00:22:21.600\nwe haven't programmed\nanything into those options.\n\n407\n00:22:21.600 --> 00:22:27.200\nBut if I do press something,\nso if I say disk and I hit OK.\n\n408\n00:22:28.680 --> 00:22:30.510\nWell obviously this does nothing but\n\n409\n00:22:30.510 --> 00:22:35.200\nif we check cat output.txt,\nwe'll see that it took option one.\n\n410\n00:22:35.200 --> 00:22:41.050\nAll right, if I were to run it again,\nnow it took two and hit okay.\n\n411\n00:22:42.060 --> 00:22:44.310\nAnd then cat that file one more time.\n\n412\n00:22:44.310 --> 00:22:48.320\nYou'll see it took two and\nso on and so forth.\n\n413\n00:22:48.320 --> 00:22:53.390\nSo now that we have that contained in\na file, I can run back to a script and\n\n414\n00:22:53.390 --> 00:22:58.580\nbash and work with that data using\nsomething like a case option, right?\n\n415\n00:22:59.700 --> 00:23:02.240\nSee how these things\ncan start working out.\n\n416\n00:23:02.240 --> 00:23:06.950\nI just have to be able to\nhave that in a static format,\n\n417\n00:23:06.950 --> 00:23:10.230\nwhere I can retrieve it when needed and\nknow what it is and what it means.\n\n418\n00:23:10.230 --> 00:23:13.440\nSo just keep that in mind as\nyou work these dialog options.\n\n419\n00:23:13.440 --> 00:23:18.370\n&gt;&gt; Well, Daniel, I was actually expecting\nit to return disk and IP, based on select.\n\n420\n00:23:18.370 --> 00:23:20.000\nI was like, bet it's a modified.\n\n421\n00:23:20.000 --> 00:23:21.090\nNope, it's not.\n\n422\n00:23:21.090 --> 00:23:22.300\nIt actually returns the number.\n\n423\n00:23:22.300 --> 00:23:26.820\nSo, if you're writing a case statement,\nthat's something we need to keep in mind.\n\n424\n00:23:26.820 --> 00:23:28.260\n&gt;&gt; That is exactly right.\n\n425\n00:23:28.260 --> 00:23:32.430\nAnd that is because this is a menu, okay?\n\n426\n00:23:32.430 --> 00:23:34.080\nSo it's not taking\nthe label of the option.\n\n427\n00:23:34.080 --> 00:23:36.790\nIt's taking the option itself, which is\none, two, and three, and so on and so\n\n428\n00:23:36.790 --> 00:23:37.890\nforth, okay?\n\n429\n00:23:37.890 --> 00:23:42.670\nThere will be times when that will be,\nas we saw with Ghee Buttersnaps.\n\n430\n00:23:42.670 --> 00:23:44.780\nPipe the Ghee Buttersnap sound,\nokay, right?\n\n431\n00:23:44.780 --> 00:23:45.960\nBecause that was the output.\n\n432\n00:23:46.980 --> 00:23:50.243\nHere when you're working here it's\nan important thing to keep in mind\n\n433\n00:23:50.243 --> 00:23:53.910\nthat's not the little of the option,\nit's the option number itself, okay?\n\n434\n00:23:53.910 --> 00:23:55.080\nSo just bear that.\n\n435\n00:23:56.250 --> 00:24:03.156\nAll right, so we have the menus, we have\ndone text boxes, Anything else we need.\n\n436\n00:24:03.156 --> 00:24:05.290\nYeah, file select.\n\n437\n00:24:05.290 --> 00:24:05.840\nI mentioned that.\n\n438\n00:24:05.840 --> 00:24:06.760\nThat's a good one, right?\n\n439\n00:24:06.760 --> 00:24:07.569\nLet's do file select.\n\n440\n00:24:09.360 --> 00:24:12.721\nClear, it'll work itself\nout like this dialogue.\n\n441\n00:24:12.721 --> 00:24:16.535\n--fselect, like that.\n\n442\n00:24:16.535 --> 00:24:19.200\nAnd then you just give\nit a place to start off.\n\n443\n00:24:19.200 --> 00:24:20.110\nI could do root.\n\n444\n00:24:20.110 --> 00:24:21.320\nI could do my home directory.\n\n445\n00:24:21.320 --> 00:24:22.310\nLet's do my home directory.\n\n446\n00:24:22.310 --> 00:24:26.160\nI'll say home/dlowrie, like that.\n\n447\n00:24:26.160 --> 00:24:29.340\nAnd then of course you got to\ngive it some width and height.\n\n448\n00:24:29.340 --> 00:24:34.560\nThis is directory listing so it may give\na little, I'll give it plenty of size.\n\n449\n00:24:36.210 --> 00:24:40.110\nSee, I forgot something here,\nfselect, dlowrie, home.\n\n450\n00:24:42.610 --> 00:24:47.270\nIt is generating some sort of output so\nbecause you're gonna select\n\n451\n00:24:47.270 --> 00:24:52.040\nan actual file or you're gonna select\na directory and that's gonna be there.\n\n452\n00:24:52.040 --> 00:24:53.065\nSo just gonna keep that in mind.\n\n453\n00:24:53.065 --> 00:24:56.739\nI gotta redirect that to and\n\n454\n00:24:56.739 --> 00:25:02.500\nwe'll call this filedlr.txt like that.\n\n455\n00:25:04.440 --> 00:25:05.490\nAnd it did nothing.\nWhat am I doing?\n\n456\n00:25:05.490 --> 00:25:06.310\nWhat's going on?\n\n457\n00:25:06.310 --> 00:25:10.495\n&gt;&gt; Daniel, that's kind of weird that we're\nnot getting any errors that I can see,\n\n458\n00:25:10.495 --> 00:25:12.980\njust just getting a print out.\n\n459\n00:25:12.980 --> 00:25:18.100\nI wonder if maybe it could be resolution,\nsize, or maybe that file path.\n\n460\n00:25:18.100 --> 00:25:20.200\nMaybe you whoopsy daisy\nfat fingered something.\n\n461\n00:25:20.200 --> 00:25:21.600\n&gt;&gt; Yeah, definitely get weird stuff.\n\n462\n00:25:21.600 --> 00:25:23.756\nLet me clear the screen here.\n\n463\n00:25:23.756 --> 00:25:25.740\nWe'll just start from scratch.\n\n464\n00:25:25.740 --> 00:25:28.190\nAnd see if all our options are working.\n\n465\n00:25:28.190 --> 00:25:29.449\nSometimes you do get wonky stuff,\n\n466\n00:25:29.449 --> 00:25:31.542\nbetter make sure the file\npass is displaying correctly.\n\n467\n00:25:31.542 --> 00:25:32.319\nYou're gonna play.\n\n468\n00:25:32.319 --> 00:25:35.270\nSo we'll just start clean slate here.\n\n469\n00:25:35.270 --> 00:25:36.140\nLet's try, here we go.\n\n470\n00:25:36.140 --> 00:25:38.306\nDialog, we know that's correct,\nthat's good.\n\n471\n00:25:38.306 --> 00:25:40.719\nAll right, I like it.\n\n472\n00:25:40.719 --> 00:25:43.150\n-- Two dashes in there\nmaking sure that's all good.\n\n473\n00:25:43.150 --> 00:25:46.144\nLet's try fselect, spelled correctly?\n\n474\n00:25:46.144 --> 00:25:48.490\nSpelled correctly,\nI think it is spelled correctly.\n\n475\n00:25:48.490 --> 00:25:49.250\nThere we go.\n\n476\n00:25:49.250 --> 00:25:53.842\nThrow in the directory of\nchoice forward slash need\n\n477\n00:25:53.842 --> 00:25:56.948\nthat home forward slash dlowery.\n\n478\n00:25:56.948 --> 00:25:59.218\nAll right,\nthat looks like a standard path.\n\n479\n00:25:59.218 --> 00:26:00.593\nSometimes you can add on the end.\n\n480\n00:26:00.593 --> 00:26:02.327\nI don't know if that\nmakes a difference but\n\n481\n00:26:02.327 --> 00:26:04.770\nwe will throw it on\nthere just to make sure.\n\n482\n00:26:04.770 --> 00:26:08.230\nAnd then, actually I want to work\nthrough it just to make sure.\n\n483\n00:26:08.230 --> 00:26:11.180\nI'll leave it almost\npristine as it was before.\n\n484\n00:26:11.180 --> 00:26:13.730\nAnd then we had 20 to 100.\n\n485\n00:26:13.730 --> 00:26:19.700\nAnd you said something about a resolution,\nso maybe I'm going too large or something.\n\n486\n00:26:19.700 --> 00:26:22.439\nMaybe this is too wide for\nthe message type box.\n\n487\n00:26:22.439 --> 00:26:28.559\nLet's drop that down to 50 and\nsee if that does anything.\n\n488\n00:26:28.559 --> 00:26:31.661\nWe'll just cut that in half and\njust start bringing it, bringing it,\n\n489\n00:26:31.661 --> 00:26:34.940\nbringing it in, bring it in boys and\nlet's see what happens.\n\n490\n00:26:34.940 --> 00:26:39.956\nAnd then of course, we have our two\ntest dot txt something like that.\n\n491\n00:26:39.956 --> 00:26:40.783\nJust put it somewhere.\n\n492\n00:26:42.637 --> 00:26:43.790\nEnter, all right.\n\n493\n00:26:43.790 --> 00:26:45.460\nStill getting craziness.\n\n494\n00:26:45.460 --> 00:26:46.800\nLet's go back in.\n\n495\n00:26:46.800 --> 00:26:49.790\nI'm gonna continue\nplaying around with this.\n\n496\n00:26:49.790 --> 00:26:51.450\nI'm gonna make it 10.\n\n497\n00:26:51.450 --> 00:26:53.060\nHey, there we go.\n\n498\n00:26:54.220 --> 00:26:55.126\nNow, we're talking.\n\n499\n00:26:55.126 --> 00:26:58.830\nSo this is a good learning experience for\nall of us, right, to see that\n\n500\n00:26:58.830 --> 00:27:02.780\nwhen you're working with dialogue and\nyou're getting crazy kinda output but\n\n501\n00:27:02.780 --> 00:27:06.940\nno errors, maybe your sizing, your width\nand height could be off just a bit.\n\n502\n00:27:06.940 --> 00:27:07.790\n&gt;&gt; You know what?\n\n503\n00:27:07.790 --> 00:27:14.140\nI wonder if this plays into we have to\nchange our resolution for showing things.\n\n504\n00:27:14.140 --> 00:27:15.300\nThat's something we would need to know.\n\n505\n00:27:15.300 --> 00:27:16.840\nWe need to be careful, because-\n&gt;&gt; That's right.\n\n506\n00:27:16.840 --> 00:27:19.012\n&gt;&gt; Depending on your resolution\nversus my resolution,\n\n507\n00:27:19.012 --> 00:27:21.981\nif I have parameters that\nare drawing dialogs to the screen.\n\n508\n00:27:21.981 --> 00:27:23.980\n&gt;&gt; Withdrawals for somebody.\n\n509\n00:27:23.980 --> 00:27:24.511\n&gt;&gt; Right but not for us.\n\n510\n00:27:24.511 --> 00:27:25.350\n&gt;&gt; But not for everybody.\n\n511\n00:27:25.350 --> 00:27:26.590\n&gt;&gt; Yeah, that's a good point cuz we do,\n\n512\n00:27:26.590 --> 00:27:30.580\nwe as we bounce around here in the ITPROTV\nstudios, when I come when I connect so\n\n513\n00:27:30.580 --> 00:27:34.510\nthat you can see this on your screen, it\ncomes to a different resolution than when\n\n514\n00:27:34.510 --> 00:27:36.980\nI'm at my desk and\nI connect to my external monitors.\n\n515\n00:27:36.980 --> 00:27:40.540\nSo that could really be playing a part\ncuz when I tried this yesterday\n\n516\n00:27:40.540 --> 00:27:42.385\nthat joker worked like a charm.\n\n517\n00:27:42.385 --> 00:27:43.940\n&gt;&gt; [LAUGH]\n&gt;&gt; With that 20 and\n\n518\n00:27:43.940 --> 00:27:46.770\n100 I said, I love it, looks good.\n\n519\n00:27:46.770 --> 00:27:50.920\nBut here when I change resolution I bet\nthat is the mitigating factor here so\n\n520\n00:27:50.920 --> 00:27:51.980\ngood call on that, Justin.\n\n521\n00:27:51.980 --> 00:27:53.909\nI'm glad I have him as my wingman here.\n\n522\n00:27:53.909 --> 00:27:56.305\nHe's great at figuring\nstuff like that out.\n\n523\n00:27:56.305 --> 00:27:58.910\nBut now we can see\nthe final selection here.\n\n524\n00:27:58.910 --> 00:28:04.600\nI can go into this folder or\nthat folder, whatever the case is.\n\n525\n00:28:04.600 --> 00:28:05.880\nGo into this one.\n\n526\n00:28:05.880 --> 00:28:06.630\nI can go back.\n\n527\n00:28:06.630 --> 00:28:09.700\nI like to come down in here and\ngo into home.\n\n528\n00:28:09.700 --> 00:28:12.480\nAnd you start to see the changes.\n\n529\n00:28:12.480 --> 00:28:17.063\nIf I'm up in here, I'm making\na selection like that's what I want.\n\n530\n00:28:17.063 --> 00:28:21.775\nSo if I click on dev,\nit sees dev as the output, okay.\n\n531\n00:28:21.775 --> 00:28:27.617\nIf I click on inuitrd.img,\nit sees that as the output, okay.\n\n532\n00:28:27.617 --> 00:28:32.540\nWhereas if I want to change the directory\nit's in, I can maneuver down here by\n\n533\n00:28:32.540 --> 00:28:37.690\njust typing in slash and go to TMP and\nyou'll see everything starts to change.\n\n534\n00:28:37.690 --> 00:28:40.590\nIt shows me what's in TMP, okay.\n\n535\n00:28:40.590 --> 00:28:44.510\nSo the basic functionality here, obviously\nyou have to play around with it and\n\n536\n00:28:44.510 --> 00:28:49.610\nwork with it a little bit to really tweak\nit just right for your script if you want\n\n537\n00:28:49.610 --> 00:28:55.590\nto use a file selection or a browsing\nmenu here inside of your scripts.\n\n538\n00:28:55.590 --> 00:28:58.260\nBut I think that's enough of\n\n539\n00:28:58.260 --> 00:29:01.790\nsome of the standard widgets\nin which you might encounter.\n\n540\n00:29:01.790 --> 00:29:07.448\nLet's take a look at using it in a script\nand what that entails, what we have to do.\n\n541\n00:29:07.448 --> 00:29:10.502\nI'm just gonna okay that,\nclear our screen.\n\n542\n00:29:10.502 --> 00:29:15.330\nI've got this d-log.sh.\n\n543\n00:29:15.330 --> 00:29:16.710\nAnd there's a bit going on.\n\n544\n00:29:16.710 --> 00:29:21.670\nIt does take a little bit to get this\nwith some finagling because of how dialog\n\n545\n00:29:21.670 --> 00:29:23.900\nworks with output and those exit codes.\n\n546\n00:29:23.900 --> 00:29:26.690\nSo you've got to take\nthat into consideration.\n\n547\n00:29:26.690 --> 00:29:31.858\nSo what happens is I've\ncreated these two variables,\n\n548\n00:29:31.858 --> 00:29:35.600\nvar1=var1.tmp and var2=var2.tmp.\n\n549\n00:29:35.600 --> 00:29:40.046\nThese are just strings so\nthat I can reference the variable and\n\n550\n00:29:40.046 --> 00:29:41.766\nhave it be that, okay.\n\n551\n00:29:41.766 --> 00:29:43.220\nJust keep that in mind.\n\n552\n00:29:43.220 --> 00:29:46.460\nThey're not actual files yet.\n\n553\n00:29:46.460 --> 00:29:52.200\nOkay, they're just names that I'm going to\nuse to name a file, got that, all right.\n\n554\n00:29:53.750 --> 00:29:55.690\nThen I come and jump on down.\n\n555\n00:29:55.690 --> 00:29:58.770\nI create the menu to drive the system.\n\n556\n00:29:58.770 --> 00:30:01.022\nWhich is menu stuff\nlike we've seen before.\n\n557\n00:30:01.022 --> 00:30:05.550\nBut in here I'm using dialogue and\nI'm using its menu as my menu.\n\n558\n00:30:05.550 --> 00:30:07.730\nSo we see that,\nwe get a little information.\n\n559\n00:30:07.730 --> 00:30:13.410\nIt says admin utility, height and\nwidth, or width and height.\n\n560\n00:30:13.410 --> 00:30:14.763\nI always get those two backwards.\n\n561\n00:30:14.763 --> 00:30:15.600\nI can't remember.\n\n562\n00:30:15.600 --> 00:30:16.440\nI think it's width and height.\n\n563\n00:30:17.560 --> 00:30:20.920\nRemember, five options,\nI'm limiting it up to five options.\n\n564\n00:30:20.920 --> 00:30:22.838\nFirst option is check.\n\n565\n00:30:22.838 --> 00:30:26.170\nSecond option IP address,\nthird option exit and\n\n566\n00:30:26.170 --> 00:30:31.649\nthen I'm redirecting that out to a file\nthat's going to be called var1.tmp.\n\n567\n00:30:31.649 --> 00:30:34.584\nSo now I can just reference the variable.\n\n568\n00:30:34.584 --> 00:30:35.830\nI come down here.\n\n569\n00:30:35.830 --> 00:30:38.250\nI make another variable\ncalled menu choice.\n\n570\n00:30:38.250 --> 00:30:41.110\nAnd it equals the contents\nof whatever here.\n\n571\n00:30:41.110 --> 00:30:47.210\nSo when I click one, if I choose one,\nit's gonna put that in this var1.tmp file.\n\n572\n00:30:47.210 --> 00:30:52.680\nIf I cat that, it's gonna be one,\nso menu choice becomes one.\n\n573\n00:30:52.680 --> 00:30:58.359\nAnd now I come down here and\nI say one equals, and I do things.\n\n574\n00:30:58.359 --> 00:31:02.884\nThen it runs the disk utility,\nwhich is down here,\n\n575\n00:31:02.884 --> 00:31:06.793\ndoing df -h, and it pipes that into var2.\n\n576\n00:31:06.793 --> 00:31:09.090\nOr it redirects it into var2,\nshould I say.\n\n577\n00:31:09.090 --> 00:31:10.720\nSo whatever that output is, and\n\n578\n00:31:10.720 --> 00:31:16.300\nthe reason I did that is because if you\njust do df -h, it goes a little berserk.\n\n579\n00:31:16.300 --> 00:31:19.400\nSo it keeps the formatting\nif I put it in a file and\n\n580\n00:31:19.400 --> 00:31:21.500\nthen reference the file, all right?\n\n581\n00:31:22.620 --> 00:31:23.810\nBecause what am I using?\n\n582\n00:31:23.810 --> 00:31:27.730\nI'm using dialog to do it and\nI'm making a text box,\n\n583\n00:31:27.730 --> 00:31:32.260\nwhich is gonna read that file, keeping\nthat lovely formatting just like we like.\n\n584\n00:31:32.260 --> 00:31:35.380\nAnd you notice it's referencing var2,\ngiving the size and width.\n\n585\n00:31:35.380 --> 00:31:36.410\nOff you go, okay?\n\n586\n00:31:37.590 --> 00:31:40.810\nSo doing that for quite a few things.\n\n587\n00:31:40.810 --> 00:31:44.600\nI also have to title IP Address,\nsame kind of idea.\n\n588\n00:31:44.600 --> 00:31:46.400\nIt's basically lather, rinse, repeat.\n\n589\n00:31:46.400 --> 00:31:49.270\nRun my command, put it out into var2.\n\n590\n00:31:49.270 --> 00:31:52.926\nDialog starts to work with\nvar2 by saying title, and\n\n591\n00:31:52.926 --> 00:31:56.350\nthen it's grabbing that\ntitle option from here.\n\n592\n00:31:56.350 --> 00:31:58.720\nSo I'm saying title equals IP address.\n\n593\n00:31:58.720 --> 00:32:01.530\nSo I'm referencing that\nvariable in my case statement.\n\n594\n00:32:01.530 --> 00:32:05.595\nDown here in my actual function, right?\n\n595\n00:32:05.595 --> 00:32:08.429\nSo I've got this guy right here.\n\n596\n00:32:08.429 --> 00:32:12.845\nI say title, a title equals title,\ntext box comes from var2.\n\n597\n00:32:12.845 --> 00:32:16.965\nSo whatever is in var2, bring that and\nmake it in there and I'm just, for\n\n598\n00:32:16.965 --> 00:32:20.769\nconsistency sake I'm staying with\nthe same size and width in this.\n\n599\n00:32:20.769 --> 00:32:24.339\nAnd of course any error grabbing that we\nneed is done by dialogues saying there's\n\n600\n00:32:24.339 --> 00:32:25.790\nan invalid option.\n\n601\n00:32:25.790 --> 00:32:28.880\nAnd actually, messing around,\nthis was quick and dirty just for\n\n602\n00:32:28.880 --> 00:32:30.330\ndemonstrative purposes obviously.\n\n603\n00:32:31.468 --> 00:32:34.020\nSo I can actually show an error,\nwhich is fun,\n\n604\n00:32:34.020 --> 00:32:36.830\nwhich is the cancel button that error\ndoesn't know what do with that yet.\n\n605\n00:32:36.830 --> 00:32:39.340\nI haven't programmed any\nfunctionality in for that.\n\n606\n00:32:39.340 --> 00:32:40.220\nBut it's a lot of fun.\n\n607\n00:32:40.220 --> 00:32:41.955\nSo hopefully you guys make sense of this.\n\n608\n00:32:41.955 --> 00:32:44.750\nWe got a menu and it's all gonna be run.\n\n609\n00:32:44.750 --> 00:32:49.331\nI'm using dash to call from dialogue and\nuse dialogues functioning and\n\n610\n00:32:49.331 --> 00:32:52.934\nworking with that's outputting\nit to the files I need.\n\n611\n00:32:52.934 --> 00:32:56.940\nAnd then bringing them in to the dialogue\noptions as I work with that inside of my\n\n612\n00:32:56.940 --> 00:32:59.165\nscripts, inside of my functions, okay?\n\n613\n00:32:59.165 --> 00:33:00.987\n[SOUND] Hopefully that makes sense.\n\n614\n00:33:00.987 --> 00:33:05.386\nWe're gonna run skrillex\ndot slash d dash log dot x\n\n615\n00:33:05.386 --> 00:33:09.280\nh fires off that first menu option, right?\n\n616\n00:33:09.280 --> 00:33:16.111\nDialogue dash dash menu gives us the three\noptions that I defined, one two and three.\n\n617\n00:33:16.111 --> 00:33:18.970\nI will check disk usage, I will hit OK.\n\n618\n00:33:18.970 --> 00:33:25.010\nUsing that dash dash text box to read\nthat file show me the output of it but\n\n619\n00:33:25.010 --> 00:33:26.220\nto create it.\n\n620\n00:33:26.220 --> 00:33:29.990\nI hit exit, it recursively jumps\nback because I used functions,\n\n621\n00:33:29.990 --> 00:33:31.900\njumps back the menu function.\n\n622\n00:33:31.900 --> 00:33:32.942\nGo down, hit IP.\n\n623\n00:33:32.942 --> 00:33:35.319\nThere's my IP address.\n\n624\n00:33:35.319 --> 00:33:36.873\nWonderful, thank you so much.\n\n625\n00:33:36.873 --> 00:33:39.865\nIt'll exit and\nthen I can come down and hit exit, and\n\n626\n00:33:39.865 --> 00:33:42.180\nit'll exit the actual script.\n\n627\n00:33:42.180 --> 00:33:43.850\nI did want to show you, if I hit cancel?\n\n628\n00:33:44.920 --> 00:33:45.660\nInvalid option.\n\n629\n00:33:45.660 --> 00:33:48.800\nJust to see that that case\nstatement caught that as well.\n\n630\n00:33:48.800 --> 00:33:49.600\nAnd there you go.\n\n631\n00:33:49.600 --> 00:33:51.630\nHit okay, takes me back to the menu.\n\n632\n00:33:51.630 --> 00:33:54.910\nAnd now I can exit my scripts,\nand I'm off.\n\n633\n00:33:54.910 --> 00:34:00.520\nSo now you see, you can make some very\nprofessional-looking scripts using dialog.\n\n634\n00:34:00.520 --> 00:34:04.685\nAnd you just have to kinda\nknow how the thing works and\n\n635\n00:34:04.685 --> 00:34:08.710\nfinagle your script so\nthat it will take that into account.\n\n636\n00:34:08.710 --> 00:34:11.360\n&gt;&gt; Well Daniel you've definitely\nshown us how to take some of those\n\n637\n00:34:11.360 --> 00:34:15.690\nutilitarian scripts from before and\nmaybe wrap them up and put a bow on them.\n\n638\n00:34:15.690 --> 00:34:20.690\nBut is there any final parting words\nbefore we end this episode about\n\n639\n00:34:20.690 --> 00:34:22.360\nkind of building these\ngraphical utilities?\n\n640\n00:34:22.360 --> 00:34:23.220\n&gt;&gt; Yeah, no doubt.\n\n641\n00:34:23.220 --> 00:34:28.740\nThere are also more highly\ngraphical options that you can use.\n\n642\n00:34:28.740 --> 00:34:31.310\nOne's k dialog if you're\nin a KDE environment or\n\n643\n00:34:31.310 --> 00:34:34.792\nsomething that supports k dialog stuff.\n\n644\n00:34:34.792 --> 00:34:39.050\nYou have g dialogue which is for\na known type environment.\n\n645\n00:34:39.050 --> 00:34:42.423\nAnd very similar to what we saw with\ndialogue except it gives you more\n\n646\n00:34:42.423 --> 00:34:43.381\ngraphical stuff.\n\n647\n00:34:43.381 --> 00:34:47.090\nThere is also Zenity which I actually\nhave installed in my system.\n\n648\n00:34:47.090 --> 00:34:50.600\nI think it comes installed\nin a by default.\n\n649\n00:34:50.600 --> 00:34:52.024\nA lot of people like Zenity.\n\n650\n00:34:52.024 --> 00:34:56.549\nThey see it as the, I wanna write scripts,\nI wanna have really pretty graphical\n\n651\n00:34:56.549 --> 00:34:59.310\nfront-end stuff happening,\nyou can use Zenity.\n\n652\n00:34:59.310 --> 00:35:02.700\nI actually wrote a Zenity script,\nquick and dirty obviously just so\n\n653\n00:35:02.700 --> 00:35:04.610\nyou guys can get an idea\nof what that looks like.\n\n654\n00:35:04.610 --> 00:35:07.050\nWe're not gonna get into\nworking with Zenity.\n\n655\n00:35:07.050 --> 00:35:09.120\nIt's a whole nother beast, but\n\n656\n00:35:09.120 --> 00:35:11.490\nit can be very similar to what you've\nseen with dialogues of course.\n\n657\n00:35:11.490 --> 00:35:13.482\nSo let's look at that really quickly and\nwe'll call it a day.\n\n658\n00:35:13.482 --> 00:35:18.506\nNanozenscript.sh, so\nagain very similar stuff as what we\n\n659\n00:35:18.506 --> 00:35:23.530\nsaw making some temporary files\nwith the make temp commands\n\n660\n00:35:23.530 --> 00:35:27.963\nup here with my variables\ninstead of defining them.\n\n661\n00:35:27.963 --> 00:35:33.101\nAnd as I come down here you'll see Zenity\ndash dash list, dash dash radio list,\n\n662\n00:35:33.101 --> 00:35:36.790\nmaking a radio list type option\nyou can make a selection.\n\n663\n00:35:38.070 --> 00:35:41.160\nThink of it like menu in dialogue,\ngiving it a title,\n\n664\n00:35:41.160 --> 00:35:45.960\nsaying there's a column called Select,\nthere's column called Menu Items.\n\n665\n00:35:45.960 --> 00:35:48.448\nSo it's gonna separate two columns out.\n\n666\n00:35:48.448 --> 00:35:53.590\nFalse is check, usage.\n\n667\n00:35:53.590 --> 00:35:57.940\nWhen you see false here,\nwhat that means is it's unselected, right,\n\n668\n00:35:57.940 --> 00:35:59.770\ncuz remember this is a radio option.\n\n669\n00:35:59.770 --> 00:36:03.954\nSo it's gonna default as unselected,\nand I did that for\n\n670\n00:36:03.954 --> 00:36:06.186\nall of my items as you can see.\n\n671\n00:36:06.186 --> 00:36:09.560\nFalse exit, false IP address.\n\n672\n00:36:09.560 --> 00:36:13.230\nSo I'm saying don't have them\npre-selected when this runs.\n\n673\n00:36:13.230 --> 00:36:15.500\nAnd then again, piping that out to a file.\n\n674\n00:36:15.500 --> 00:36:20.200\nAnd then it's kinda like the same thing\nwe saw with dialog Just cat that file and\n\n675\n00:36:20.200 --> 00:36:20.990\nmake that a variable.\n\n676\n00:36:22.500 --> 00:36:26.770\nAnd from there, it has very similar\nwidgeting type functionality.\n\n677\n00:36:26.770 --> 00:36:28.314\nSo I'll run it here so\nyou guys can see it.\n\n678\n00:36:28.314 --> 00:36:32.691\nSo run ./zenscript,\n\n679\n00:36:32.691 --> 00:36:36.810\nand see this is that radio box.\n\n680\n00:36:36.810 --> 00:36:39.290\nSo now I can say Check Disk Usage,\nand hit OK.\n\n681\n00:36:40.390 --> 00:36:43.698\nAnd there is my disk usage and\nI can expand it out.\n\n682\n00:36:43.698 --> 00:36:48.070\nSo I get a real gooey type front end.\n\n683\n00:36:48.070 --> 00:36:51.220\nSo if you like this, you think that's\ncool, I wanna make that type of script.\n\n684\n00:36:51.220 --> 00:36:55.640\nI like point and\nclick clickity clickity stuff Zenity,\n\n685\n00:36:55.640 --> 00:36:59.040\nk dialog, g dialog,\nmaybe they are more your speed.\n\n686\n00:36:59.040 --> 00:37:00.990\n&gt;&gt; Well, Daniel that's pretty interesting.\n\n687\n00:37:00.990 --> 00:37:04.930\nIt's a little easier because if you\nknow dialog it looks like Zenity and\n\n688\n00:37:04.930 --> 00:37:08.475\nI'm assuming g dialog and\nk dialog had a very similar interface.\n\n689\n00:37:08.475 --> 00:37:12.780\nMaybe not exactly the same but if you know\none you can kind of expand to the other.\n\n690\n00:37:12.780 --> 00:37:16.500\nSo, I will tell you some of the graphical\nprogramming I've done before\n\n691\n00:37:16.500 --> 00:37:17.684\nis not nearly that easy.\n\n692\n00:37:17.684 --> 00:37:20.090\n&gt;&gt; [LAUGH]\n&gt;&gt; So I'm kinda envious, jealous,\n\n693\n00:37:20.090 --> 00:37:20.810\nso to speak.\n\n694\n00:37:20.810 --> 00:37:25.715\nBut we have definitely wrapped up,\ngiven you a nice survey of possible ways\n\n695\n00:37:25.715 --> 00:37:30.755\nthat you can build these graphical\nscripts, these graphically driven scripts.\n\n696\n00:37:30.755 --> 00:37:33.085\nBut we are out of time for this episode.\n\n697\n00:37:33.085 --> 00:37:35.625\nMake sure you stay tuned for\nmore Advanced Shell Scripting.\n\n698\n00:37:35.625 --> 00:37:38.393\nBut for now, we're gonna go ahead and\nsign out for ITProTV.\n\n699\n00:37:38.393 --> 00:37:39.815\nI've been your host, Justin Dennison.\n\n700\n00:37:39.815 --> 00:37:40.635\n&gt;&gt; And I'm Daniel Lowry.\n\n701\n00:37:40.635 --> 00:37:43.201\n&gt;&gt; And we'll see you next time.\n\n702\n00:37:43.201 --> 00:37:48.933\n[MUSIC]\n\n703\n00:37:48.933 --> 00:37:51.883\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "238441009"
        }
      ],
      "title": "GUI Scripting"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin demonstrate and explain working with sed multi-line commands. Here they will work through using the \"multi-line Next\" which appends the next line of text to the current line in the \"Pattern space\".",
          "length": "1624",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-1-advanced_sed_multi-line_commands-110217-PGM.00_26_51_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-1-advanced_sed_multi-line_commands-110217-PGM.00_26_51_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-1-advanced_sed_multi-line_commands-110217-PGM.00_26_51_10.Still001-sm.jpg",
          "title": "Advanced sed: Multi-line Commands",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.448\nWelcome to ITProTV,\n\n2\n00:00:01.448 --> 00:00:05.119\nI'm your host Don Pezet coming at\nyou live from San Francisco Bay.\n\n3\n00:00:05.119 --> 00:00:07.104\n[CROSSTALK]\n\n4\n00:00:07.104 --> 00:00:08.302\n[MUSIC]\n\n5\n00:00:08.302 --> 00:00:11.764\nYou're watching ITProTV.\n\n6\n00:00:11.764 --> 00:00:15.530\nGreetings everyone and welcome back to\nanother exciting episode of ITProTV.\n\n7\n00:00:15.530 --> 00:00:17.184\nI'm your host Justin Dennison and\n\n8\n00:00:17.184 --> 00:00:20.510\nwe are venturing back into our\nadvanced Shell scripting series.\n\n9\n00:00:20.510 --> 00:00:23.355\nIn particular, we're gonna be\nlooking at advanced set techniques.\n\n10\n00:00:23.355 --> 00:00:26.471\n[SOUND] I know, I know, I'm scared.\n\n11\n00:00:26.471 --> 00:00:28.600\nBut luckily, we have someone who is not.\n\n12\n00:00:28.600 --> 00:00:32.260\nHe is bravely moving\nwhere I'm afraid to go.\n\n13\n00:00:32.260 --> 00:00:34.400\nThat's Mr. Daniel Lowrie,\nhow're you doing, Daniel?\n\n14\n00:00:34.400 --> 00:00:35.090\n&gt;&gt; I'm doing pretty good.\n\n15\n00:00:35.090 --> 00:00:37.225\nI'm probably just as scared as you.\n\n16\n00:00:37.225 --> 00:00:40.460\n&gt;&gt; [LAUGH]\n&gt;&gt; Sed can be a bit intimidating\n\n17\n00:00:40.460 --> 00:00:41.720\nbecause it's hard.\n\n18\n00:00:41.720 --> 00:00:45.400\nYou gotta remember Sed came out along\ntime ago when we didn't have modern\n\n19\n00:00:45.400 --> 00:00:49.810\ntechnologies, so\nit's trying to do a lot and\n\n20\n00:00:49.810 --> 00:00:54.280\nit does it in a very weird way, because\nwe're not used to that type of mentality.\n\n21\n00:00:54.280 --> 00:00:58.220\nBut if we can get things explained to\nus in a way we can all understand, and\n\n22\n00:00:58.220 --> 00:01:01.470\nhopefully that's my job, that's what\nI'm supposed to do for you out there.\n\n23\n00:01:01.470 --> 00:01:05.800\nYou'll at least be able to use some\nof the more advance features that\n\n24\n00:01:05.800 --> 00:01:08.827\nare inside of Sed, and\nthey do a lot of cool stuff.\n\n25\n00:01:08.827 --> 00:01:11.022\nBut it's really convoluted and\n\n26\n00:01:11.022 --> 00:01:16.467\ncan take you down some weird paths if\nyou're not following exactly what each and\n\n27\n00:01:16.467 --> 00:01:20.385\nevery little thing does,\nit can get a little confusing.\n\n28\n00:01:20.385 --> 00:01:24.473\nSo hopefully today we're going to\nremove the veil that thou might see and\n\n29\n00:01:24.473 --> 00:01:27.772\nbe able to use some of this\nadvanced Sed featurettes here.\n\n30\n00:01:27.772 --> 00:01:31.359\nWe're going to start off today\nwith probably one of the best\n\n31\n00:01:31.359 --> 00:01:35.110\nparts of using Sed,\nwhich is the multi lines commands.\n\n32\n00:01:35.110 --> 00:01:39.750\nNow we've been using single line commands\nthroughout the series when we look back at\n\n33\n00:01:41.020 --> 00:01:43.420\nthe beginning set of course.\n\n34\n00:01:43.420 --> 00:01:46.650\nRight, and when we did there,\nyou know them, you love them right?\n\n35\n00:01:46.650 --> 00:01:50.710\nThe P for prints, we had,\nwhat else did we use, we've used,\n\n36\n00:01:50.710 --> 00:01:55.000\nI think P for print is basically the one\nwe've really been flying on the flagpole.\n\n37\n00:01:55.000 --> 00:01:59.170\nThat's our big one,\ntypically used with the dash in, right?\n\n38\n00:01:59.170 --> 00:02:00.100\nSo you're like, delete.\n\n39\n00:02:00.100 --> 00:02:01.500\nWe've used delete as well, right?\n\n40\n00:02:01.500 --> 00:02:02.798\nA lowercase d.\n\n41\n00:02:02.798 --> 00:02:05.683\nSo I wanna delete some stuff,\nI throw that lowercase d in there.\n\n42\n00:02:05.683 --> 00:02:10.765\nThat's a single line command, but we also\nhave multi line stuff that we can do and\n\n43\n00:02:10.765 --> 00:02:14.426\nit tries to increase the functionality\nof what Sed can do so\n\n44\n00:02:14.426 --> 00:02:19.580\nthat we can make certain data\nmanipulations inside of our text, right?\n\n45\n00:02:19.580 --> 00:02:22.560\nSo let's talk about\nthe three different ones.\n\n46\n00:02:22.560 --> 00:02:23.830\nAnd it's n, d, and p.\n\n47\n00:02:23.830 --> 00:02:28.240\nOr n, p, and d or however you\nlike to put them together, right?\n\n48\n00:02:28.240 --> 00:02:34.090\nTypically d and\np are used with n a lot of times.\n\n49\n00:02:34.090 --> 00:02:37.000\nNot always, but\na very large number of times.\n\n50\n00:02:37.000 --> 00:02:39.150\nSo let's talk about n first.\n\n51\n00:02:39.150 --> 00:02:44.100\nAnd n basically says I want\nto append the next line\n\n52\n00:02:44.100 --> 00:02:46.600\nto the line I already have, all right?\n\n53\n00:02:46.600 --> 00:02:49.690\nI actually created a little thing here for\nus to try to help us out.\n\n54\n00:02:49.690 --> 00:02:50.910\nLet's jump to the computer really quickly.\n\n55\n00:02:50.910 --> 00:02:54.874\nI will cap this,\nmulti-line commands, right?\n\n56\n00:02:54.874 --> 00:02:55.921\nThere we go, there they are.\n\n57\n00:02:55.921 --> 00:02:56.980\nN, d and p, right?\n\n58\n00:02:58.000 --> 00:02:59.330\nLooks good.\n\n59\n00:02:59.330 --> 00:03:02.670\nAdd the next line to the current line for\nprocessing, all right?\n\n60\n00:03:02.670 --> 00:03:06.020\nD, delete a single line\nin a multi line group.\n\n61\n00:03:06.020 --> 00:03:10.400\nWhich is why you typically\nsee the capital D, not\n\n62\n00:03:10.400 --> 00:03:15.100\nthe lowercase d form with the n, because\nwe're creating multi-line groups using n.\n\n63\n00:03:15.100 --> 00:03:17.770\nAnd then p, print a single\nline from a multi line group.\n\n64\n00:03:17.770 --> 00:03:22.360\nAgain, we start seeing that these kind\nof things work together usually, okay?\n\n65\n00:03:22.360 --> 00:03:25.310\nNow there are some caveats.\n\n66\n00:03:25.310 --> 00:03:28.010\nSome flyer, some case,\n\n67\n00:03:28.010 --> 00:03:31.321\nsome edge stuff that you need to\nknow about how these things work.\n\n68\n00:03:31.321 --> 00:03:34.380\nThat's the very simplistic definitions.\n\n69\n00:03:34.380 --> 00:03:37.830\nWe'll get into that as we march\ndown through the road here.\n\n70\n00:03:37.830 --> 00:03:42.400\nWe also need to talk about something\ncalled the pattern space, okay?\n\n71\n00:03:42.400 --> 00:03:45.643\nBecause if you don't understand\nwhat the patterned space is,\n\n72\n00:03:45.643 --> 00:03:48.455\nyou're gonna be super lost,\nand when you do man sed and\n\n73\n00:03:48.455 --> 00:03:52.433\nyou look at that information and they\nstart talking about the pattern space,\n\n74\n00:03:52.433 --> 00:03:56.015\nyou might go like [SOUND],\nI don't like what's happening right now.\n\n75\n00:03:56.015 --> 00:03:59.754\nBecause they are using these terms and\ndefinitions that if you don't really grasp\n\n76\n00:03:59.754 --> 00:04:02.270\nwhat they are,\nthey can leave you in the dirt, right?\n\n77\n00:04:02.270 --> 00:04:05.750\nSo let's talk about that, pattern space,\nwhat is the pattern space?\n\n78\n00:04:05.750 --> 00:04:09.630\nThe pattern space is when you\nfire off Sed and what does it do?\n\n79\n00:04:09.630 --> 00:04:11.360\nIt goes line by line and\n\n80\n00:04:11.360 --> 00:04:15.276\nit treats that each one of those as\nthey're own specific record, right?\n\n81\n00:04:15.276 --> 00:04:20.530\nAnd it slurps that in and\nputs it in front of it.\n\n82\n00:04:20.530 --> 00:04:23.990\nIt's almost like having a conveyor\nbelts in front of you, right?\n\n83\n00:04:23.990 --> 00:04:28.500\nHere comes stuff down the left side of the\nconveyor belts, and every time now I need\n\n84\n00:04:28.500 --> 00:04:33.620\nto grab, maybe I'm disassembling you\nknow plastic spoons from their molding.\n\n85\n00:04:33.620 --> 00:04:36.090\nRight, I've got one plastic\nspoon I disassemble it,\n\n86\n00:04:36.090 --> 00:04:38.950\nI set it back it goes on its way,\nnext spoon comes in disassemble it.\n\n87\n00:04:38.950 --> 00:04:42.314\nWell that space in front of you\nwhere you actually do work,\n\n88\n00:04:42.314 --> 00:04:44.450\nthat's the pattern space, right?\n\n89\n00:04:44.450 --> 00:04:48.459\nSo this spoon that's in there right now,\nthat data, that text that's in that\n\n90\n00:04:48.459 --> 00:04:51.590\npattern space right now is\nthe data that I'm working with.\n\n91\n00:04:51.590 --> 00:04:56.865\nSo the data that you are immediately\nworking with is in the pattern space.\n\n92\n00:04:56.865 --> 00:04:58.790\nHopefully that makes sense.\n\n93\n00:04:58.790 --> 00:05:01.753\nHopefully you're like, yes,\npattern space, I'm good.\n\n94\n00:05:01.753 --> 00:05:03.430\nCharge on, good sir.\n\n95\n00:05:03.430 --> 00:05:04.660\nSo let's do that, let's charge on.\n\n96\n00:05:04.660 --> 00:05:09.010\nNow that we know what the pattern space\nis, that's gonna help us as we look at\n\n97\n00:05:09.010 --> 00:05:11.520\nmultiple lines because we are going to\nbe referencing pattern spacing a lot.\n\n98\n00:05:13.000 --> 00:05:15.424\nOkay, let's jump into n.\n\n99\n00:05:15.424 --> 00:05:16.517\nWhat does n do, right?\n\n100\n00:05:16.517 --> 00:05:21.370\nSo n adds a line to the current line for\nprocessing.\n\n101\n00:05:21.370 --> 00:05:23.329\nOkay, what the heck does that mean?\n\n102\n00:05:23.329 --> 00:05:27.554\nSo basically, you also have the lower case\nn as well, that's another function now,\n\n103\n00:05:27.554 --> 00:05:29.150\nthat's a single line command.\n\n104\n00:05:29.150 --> 00:05:35.190\nAnd basically what lower case\nn says is grab the next line,\n\n105\n00:05:35.190 --> 00:05:39.410\nbasically you got a spoon in front of you,\nwhichever on the conveyor belt,\n\n106\n00:05:39.410 --> 00:05:41.970\nwhat's coming next, grab that and\nput that in front of you.\n\n107\n00:05:41.970 --> 00:05:43.710\nThrow that other one out of the way,\nall right?\n\n108\n00:05:43.710 --> 00:05:46.300\nThat's lowercasing.\n\n109\n00:05:46.300 --> 00:05:47.720\nCapital N says,\n\n110\n00:05:47.720 --> 00:05:51.050\nreach over to the spoon bag on\nthe conveyor belt on the left of you.\n\n111\n00:05:51.050 --> 00:05:54.240\nGrab another spoon, and kinda connect\nit with the spoon you've already got.\n\n112\n00:05:55.670 --> 00:05:58.978\nAll right, so\nit's appending to the pattern space.\n\n113\n00:05:58.978 --> 00:06:03.540\nWhereas, lowercase n is taking\nin the next line of text and\n\n114\n00:06:03.540 --> 00:06:05.740\nputting it in the pattern space by itself.\n\n115\n00:06:05.740 --> 00:06:10.010\nOkay, capital N is appending to\nthe pattern space you already have,\n\n116\n00:06:10.010 --> 00:06:11.020\nmaking one long line.\n\n117\n00:06:11.020 --> 00:06:15.230\nSo if I had this is text one and\nthis is text two is right below it, and\n\n118\n00:06:15.230 --> 00:06:21.290\nI use a capital N, I'm appending this is\ntext one, this is text two as one string.\n\n119\n00:06:21.290 --> 00:06:24.700\nThat all becomes one thing that's\ninside of the pattern space.\n\n120\n00:06:24.700 --> 00:06:25.840\nAnother strange thing that it does.\n\n121\n00:06:25.840 --> 00:06:29.280\nNot strange, it's just something it does,\nI don't want to say strange.\n\n122\n00:06:29.280 --> 00:06:35.440\nIt also adds a new line character\nbetween those two pieces, all right?\n\n123\n00:06:35.440 --> 00:06:38.410\nSo whatever was in the pattern space,\nwhatever gets appended to the pattern\n\n124\n00:06:38.410 --> 00:06:43.815\nspace, n adds a new line character\nin between them as the connector.\n\n125\n00:06:43.815 --> 00:06:49.090\nOkay, that is an important piece of\ninformation as you work with this.\n\n126\n00:06:49.090 --> 00:06:51.950\nAll right, so yes,\nI know if you're out there going, whoa.\n\n127\n00:06:52.950 --> 00:06:54.070\nYeah, we all do that.\n\n128\n00:06:54.070 --> 00:06:54.940\nSo welcome to the club.\n\n129\n00:06:54.940 --> 00:06:56.278\nYou get your card on Thursday.\n\n130\n00:06:56.278 --> 00:07:01.000\nAll right, now we know that, let's look\nat an example of what I'm talking about.\n\n131\n00:07:01.000 --> 00:07:03.970\nHopefully this solidifies this a whole lot\nmore in your mind of what we're talking\n\n132\n00:07:03.970 --> 00:07:04.910\nabout, right?\n\n133\n00:07:04.910 --> 00:07:05.640\nLet's do a Sed command.\n\n134\n00:07:05.640 --> 00:07:07.110\nI've got a test file.\n\n135\n00:07:07.110 --> 00:07:11.050\nLet's Cat it, testFile, test file.\n\n136\n00:07:11.050 --> 00:07:13.130\nI think I have a test file here.\n\n137\n00:07:13.130 --> 00:07:14.100\nDid I change it?\nI think I did.\n\n138\n00:07:14.100 --> 00:07:15.160\nWhat did I change it to?\n\n139\n00:07:16.340 --> 00:07:18.075\nYeah, I can't catalyst.\n\n140\n00:07:18.075 --> 00:07:19.410\n[LAUGH] So funny.\n\n141\n00:07:19.410 --> 00:07:20.745\nI think I called it holding yeah.\n\n142\n00:07:20.745 --> 00:07:22.820\nCat holding.txt.\n\n143\n00:07:22.820 --> 00:07:24.150\nSo there we go.\n\n144\n00:07:24.150 --> 00:07:25.360\nJust like I was talking about.\n\n145\n00:07:25.360 --> 00:07:27.140\nSo let's clear this out.\n\n146\n00:07:27.140 --> 00:07:29.150\nCat holding.\n\n147\n00:07:30.210 --> 00:07:34.460\nCat holding,\ncuz I have another things that says hold.\n\n148\n00:07:34.460 --> 00:07:37.270\nSo we've got, this is the first line of\ntext, there's the second line of text\n\n149\n00:07:37.270 --> 00:07:42.490\nthird, fourth, fifth, an empty line and\nthen end of text line, okay?\n\n150\n00:07:42.490 --> 00:07:46.100\nSo if I do a capital N,\nwhat should happen is\n\n151\n00:07:46.100 --> 00:07:50.830\nthis line should be appended to this line,\nand\n\n152\n00:07:50.830 --> 00:07:55.910\nit should also insert a new line\ncharacter between them, okay?\n\n153\n00:07:55.910 --> 00:07:57.400\nThat's what the capital N does.\n\n154\n00:07:57.400 --> 00:07:58.466\nLet's see how that works.\n\n155\n00:07:58.466 --> 00:07:59.870\nSo I'll say sed, and\n\n156\n00:07:59.870 --> 00:08:04.719\nI'm gonna give it a string to look for,\nbasically a regular expression.\n\n157\n00:08:04.719 --> 00:08:08.576\nTo say, find this, and\ndo this on the line that you find this on.\n\n158\n00:08:08.576 --> 00:08:10.694\nSo here we go, /first.\n\n159\n00:08:10.694 --> 00:08:16.283\nSo I wanna grab that first line,\ncuz I want the line right underneath it.\n\n160\n00:08:16.283 --> 00:08:19.892\nHammer that out, and\nI'm gonna open my curly brace here.\n\n161\n00:08:19.892 --> 00:08:24.537\nGo with the n after it, dada bing,\nand then I'm gonna do one more thing,\n\n162\n00:08:24.537 --> 00:08:28.953\ncuz remember, if right now if I left\nthis like this and closed it out,\n\n163\n00:08:28.953 --> 00:08:32.475\nand hit like that,\nit's not gonna act the way we want.\n\n164\n00:08:32.475 --> 00:08:36.156\nI'm not gonna get that string of\ntext the way I want, cuz remember,\n\n165\n00:08:36.156 --> 00:08:40.482\nthere's an embedded new line, even though\nit slurped it up, and made one thing\n\n166\n00:08:40.482 --> 00:08:45.151\ninside of the pattern space, it's still\ngonna come out normal, at least it should.\n\n167\n00:08:45.151 --> 00:08:46.810\nI'm pretty sure, let's watch.\n\n168\n00:08:46.810 --> 00:08:48.090\nHolding.\n\n169\n00:08:48.090 --> 00:08:50.935\nMan, I gotta get better at this,\nholding.txt.\n\n170\n00:08:50.935 --> 00:08:52.750\nSee, it didn't really do anything.\n\n171\n00:08:52.750 --> 00:08:57.598\nIt doesn't seem like it, but it actually\ndid, and you'll see that, because what I'm\n\n172\n00:08:57.598 --> 00:09:01.464\ngonna do is I'm gonna replace that\nnew line with just a regular space,\n\n173\n00:09:01.464 --> 00:09:04.172\ncuz what does the standard\nout do with a new line?\n\n174\n00:09:04.172 --> 00:09:05.850\nIt shoves it down to the bottom, right.\n\n175\n00:09:05.850 --> 00:09:08.120\nSo that's why it looks\nlike nothing happened.\n\n176\n00:09:08.120 --> 00:09:11.310\nSo I gotta go in there and I gotta kind\nof like cut that out, or change it,\n\n177\n00:09:11.310 --> 00:09:16.170\nmodify it, so that it doesn't do that, and\nwe see what is now in the pattern space.\n\n178\n00:09:16.170 --> 00:09:17.670\nLet's try it again.\n\n179\n00:09:17.670 --> 00:09:19.211\nLet's clear that out.\n\n180\n00:09:19.211 --> 00:09:24.060\nI'm gonna go here,\nI'll just steal from here, and\n\n181\n00:09:24.060 --> 00:09:29.132\nI will add s new line \\n, and\nthen I will change that for\n\n182\n00:09:29.132 --> 00:09:33.180\nnothing, just a space, oops a space.\n\n183\n00:09:33.180 --> 00:09:35.190\nI can't do it, there it is,\njust like that.\n\n184\n00:09:36.460 --> 00:09:37.324\nPretty simple.\n\n185\n00:09:37.324 --> 00:09:39.840\nNow if I hit it you see what happened.\n\n186\n00:09:39.840 --> 00:09:42.280\nThis was what was in the pattern space.\n\n187\n00:09:42.280 --> 00:09:45.570\nWe just couldn't see it in that form\nbecause that new line character getting\n\n188\n00:09:45.570 --> 00:09:47.320\ninterpreted by standard out.\n\n189\n00:09:47.320 --> 00:09:50.780\nOkay, so now we're getting to see it\nbecause I changed that new line for\n\n190\n00:09:50.780 --> 00:09:51.600\njust a regular space.\n\n191\n00:09:52.680 --> 00:09:54.040\n&gt;&gt; And Daniel,\na quick question about this.\n\n192\n00:09:54.040 --> 00:09:57.720\nIs that because, I wanna make sure,\nI am by no means a said expert.\n\n193\n00:09:57.720 --> 00:10:01.080\nI know enough to be like, [SOUND]\n&gt;&gt; [LAUGH]\n\n194\n00:10:01.080 --> 00:10:02.451\n&gt;&gt; So I found that first,\n\n195\n00:10:02.451 --> 00:10:06.064\nthat regular expression you find first,\nand then the end,\n\n196\n00:10:06.064 --> 00:10:07.880\nI must getting the next line.\n\n197\n00:10:07.880 --> 00:10:10.992\nDoes that, what if I had first\nin this file multiple times, but\n\n198\n00:10:10.992 --> 00:10:12.636\nI still only get the first first or\n\n199\n00:10:12.636 --> 00:10:16.370\nwould it kind of contaminate this two\ntogether as it runs through the file?\n\n200\n00:10:16.370 --> 00:10:20.339\n&gt;&gt; Yep, if you had multiple\nfirsts then it would runt through\n\n201\n00:10:20.339 --> 00:10:22.290\neverywhere it found first.\n\n202\n00:10:22.290 --> 00:10:25.866\nSo for regular expression I didn't\ngive it any, I was looking for\n\n203\n00:10:25.866 --> 00:10:29.442\nsomething that was unique about that line,\nand first, second,\n\n204\n00:10:29.442 --> 00:10:34.230\nthird, fourth, and fifth are all unique\nstrings that are found in each line.\n\n205\n00:10:34.230 --> 00:10:38.300\nActually all the other strings in\neach line is the same except for\n\n206\n00:10:38.300 --> 00:10:41.370\nthe last one and the space one.\n\n207\n00:10:41.370 --> 00:10:43.840\nRight, so Justin is absolutely right.\n\n208\n00:10:43.840 --> 00:10:47.936\nIf I ran this on multiple, it had\nmultiple lines that had first in line,\n\n209\n00:10:47.936 --> 00:10:52.121\nit would go to the first instance of that,\nand try to do what it's doing.\n\n210\n00:10:52.121 --> 00:10:56.670\nDo that new line, slurp it up, change any\nnew line character into a blank space, and\n\n211\n00:10:56.670 --> 00:10:57.450\nprint it out.\n\n212\n00:10:58.570 --> 00:11:02.870\nSo keep that in mind, and that will be\nsomething that is important for you as you\n\n213\n00:11:02.870 --> 00:11:07.960\nuse these multi-line commands,\nthese multi-line tools.\n\n214\n00:11:07.960 --> 00:11:08.550\nSo that's cool.\n\n215\n00:11:08.550 --> 00:11:10.210\nThat's really interesting.\n\n216\n00:11:10.210 --> 00:11:12.088\nWhat else do we wanna do?\n\n217\n00:11:12.088 --> 00:11:14.690\nThis is pretty simplistic form.\n\n218\n00:11:14.690 --> 00:11:17.840\nLet's look at something that's\nnot as simplistic, all right?\n\n219\n00:11:17.840 --> 00:11:21.210\nSo, I've got this file, it's called guide.\n\n220\n00:11:21.210 --> 00:11:28.795\nCat guide.txt, and I wrote this so\nthat I can demonstrate certain things.\n\n221\n00:11:28.795 --> 00:11:29.864\nBut basically it's saying,\n\n222\n00:11:29.864 --> 00:11:32.610\nthis guide's meant to walk you through\nthe day as a Network Administrator.\n\n223\n00:11:32.610 --> 00:11:33.950\nBy the end hopefully,\n\n224\n00:11:33.950 --> 00:11:36.760\nyou will be better equipped to perform\nyour duties as a Network Administrator,\n\n225\n00:11:36.760 --> 00:11:41.000\nmaybe even enjoy being\na Network Administrator that much more.\n\n226\n00:11:41.000 --> 00:11:46.240\nHopefully you've seen a theme going\non here with the term network and\n\n227\n00:11:46.240 --> 00:11:46.900\nadministrator.\n\n228\n00:11:48.780 --> 00:11:52.180\nSo what if I wanted to change network\nadministrator to system user,\n\n229\n00:11:52.180 --> 00:11:55.450\nbecause I am also creating a guide for\nthat, and this seems like a fairly\n\n230\n00:11:55.450 --> 00:11:59.660\nubiquitous thing that I could use through\nout different guides, as like maybe\n\n231\n00:11:59.660 --> 00:12:04.200\nan introduction, but I don't wanna have\nto go in and rewrite the entire thing.\n\n232\n00:12:04.200 --> 00:12:05.260\nI kinda wanna do a find and\n\n233\n00:12:05.260 --> 00:12:10.190\nreplace for network administrator\nwith the system user.\n\n234\n00:12:10.190 --> 00:12:11.675\nMan I keep forgetting to close that out.\n\n235\n00:12:11.675 --> 00:12:13.200\nThat's my bad ladies and gentlemen.\n\n236\n00:12:13.200 --> 00:12:15.040\nI will make sure that\ndoesn't happen again.\n\n237\n00:12:16.480 --> 00:12:18.201\nSo what do I do?\n\n238\n00:12:18.201 --> 00:12:19.886\nWell I use that new line character,\n\n239\n00:12:19.886 --> 00:12:22.930\nbecause look here that can really\nhelp us out, cuz look at this.\n\n240\n00:12:22.930 --> 00:12:28.010\nNetwork and\nadministrator on two separate lines.\n\n241\n00:12:28.010 --> 00:12:31.330\nSo if I wanna make a change, what do I do?\n\n242\n00:12:31.330 --> 00:12:35.330\nBecause if I just say network\nadministrator said do a substitution,\n\n243\n00:12:35.330 --> 00:12:41.790\nnetwork space administrator, slash\nsystems space user, slash, bada bing.\n\n244\n00:12:41.790 --> 00:12:42.597\nWhat's gonna happen?\n\n245\n00:12:42.597 --> 00:12:43.115\nWell let's look.\n\n246\n00:12:43.115 --> 00:12:44.420\nLet's see what happens.\n\n247\n00:12:44.420 --> 00:12:49.733\nSo we'll said We'll just do This\n\n248\n00:12:49.733 --> 00:12:57.143\n's,Network Administrator /System User.\n\n249\n00:12:57.143 --> 00:13:02.319\nIt's very simple that\nwe've used plenty of time,\n\n250\n00:13:02.319 --> 00:13:05.460\nand we'll do that in guide.text.\n\n251\n00:13:05.460 --> 00:13:09.110\nYou'll notice that,\nit found system administrator here, or\n\n252\n00:13:09.110 --> 00:13:11.200\nnetwork administrator here,\nand changed to system user.\n\n253\n00:13:11.200 --> 00:13:15.668\nFound it here changed it to system user,\nbut look this one did not get it,\n\n254\n00:13:15.668 --> 00:13:20.304\nand why is that, because it's looking for\nnetwork space administrator.\n\n255\n00:13:20.304 --> 00:13:21.290\nWhat is this?\n\n256\n00:13:21.290 --> 00:13:23.190\nThis is network new line nothing.\n\n257\n00:13:24.780 --> 00:13:29.924\nThis is not,\nliterally just administrator period.\n\n258\n00:13:29.924 --> 00:13:32.689\nSo it's not matching the reg x so\n\n259\n00:13:32.689 --> 00:13:37.613\nwe've got to use that new line\nto make these things work.\n\n260\n00:13:37.613 --> 00:13:39.180\nSo let's do that, let's try that.\n\n261\n00:13:39.180 --> 00:13:43.622\nSo let's say sed,\n\n262\n00:13:43.622 --> 00:13:48.343\nand this time we'll\n\n263\n00:13:48.343 --> 00:13:52.509\ndo n; s/Network\n\n264\n00:13:52.509 --> 00:13:59.454\nAdministrator/System User\n\n265\n00:13:59.454 --> 00:14:02.800\nguide.txt.\n\n266\n00:14:02.800 --> 00:14:06.540\nNow it didn't, hmm, weird, right?\n\n267\n00:14:06.540 --> 00:14:09.290\nNot weird, what does n do?\n\n268\n00:14:09.290 --> 00:14:17.450\nWhen you use the capital N it appends the\nline up to the line above it, and as what?\n\n269\n00:14:17.450 --> 00:14:20.590\nAn embedded new line characters, so\nwe have to take that into effect.\n\n270\n00:14:20.590 --> 00:14:22.420\nSo let's bring this back up.\n\n271\n00:14:22.420 --> 00:14:28.374\nLet's do that, let's add a new\nline character in between them,\n\n272\n00:14:28.374 --> 00:14:33.362\nboth of our replacements,\n/n, and let's try that.\n\n273\n00:14:33.362 --> 00:14:34.894\nAll right, this time we got it.\n\n274\n00:14:34.894 --> 00:14:35.490\nWhere's my mouse?\n\n275\n00:14:35.490 --> 00:14:41.254\nThere it is.\nSystem User, awesome.\n\n276\n00:14:41.254 --> 00:14:45.250\nMan, it didn't give me,\nlook what happened now.\n\n277\n00:14:45.250 --> 00:14:47.120\nSystem, or network administrator,\nnetwork administrator.\n\n278\n00:14:47.120 --> 00:14:49.199\nThat's supposed to be\nchanged to system user.\n\n279\n00:14:50.220 --> 00:14:53.363\nBut we're having the reverse\nproblem at this point.\n\n280\n00:14:53.363 --> 00:14:59.125\nAll right, now I've said the regex is, it\nmust be network with a new line character,\n\n281\n00:14:59.125 --> 00:15:04.850\nadministrator, and change that out for\nsystem new line character administrator.\n\n282\n00:15:04.850 --> 00:15:08.790\nSo you start to see where this\ncan get extremely complex.\n\n283\n00:15:08.790 --> 00:15:10.901\nHow do I catch all of them, and then,\n\n284\n00:15:10.901 --> 00:15:13.845\nthere's some other caveats\nto be honest with you.\n\n285\n00:15:13.845 --> 00:15:15.080\nThere's a lot going on here.\n\n286\n00:15:15.080 --> 00:15:20.337\nThis is a very difficult problem to\nsolve unless you understand exactly how\n\n287\n00:15:20.337 --> 00:15:26.520\nto manipulate new line stuff, or new line\nstuff, multi-line commands that you have.\n\n288\n00:15:27.940 --> 00:15:32.010\nSo don't worry,\nwe are going to get to actually\n\n289\n00:15:32.010 --> 00:15:35.770\nmaking sure that we get every single\nlast one caught up in here, all right?\n\n290\n00:15:35.770 --> 00:15:38.074\nWe're gonna make sure that happens.\n\n291\n00:15:38.074 --> 00:15:40.765\nSo let's try something else.\n\n292\n00:15:40.765 --> 00:15:41.648\nLet's try this.\n\n293\n00:15:41.648 --> 00:15:45.850\nWhat if I used, well,\nthis is regular expression, right?\n\n294\n00:15:45.850 --> 00:15:47.870\nRemember the regular expression show?\n\n295\n00:15:47.870 --> 00:15:51.380\nBack there we talked\nabout special characters?\n\n296\n00:15:51.380 --> 00:15:53.860\nWe've got those regex special characters.\n\n297\n00:15:53.860 --> 00:15:57.982\nWhat is the universal regular expression,\nJustin?\n\n298\n00:15:57.982 --> 00:15:59.185\n&gt;&gt; I think it's the period, right?\n\n299\n00:15:59.185 --> 00:16:02.789\nIt should match any character that lies\nbetween those, so maybe we can try that,\n\n300\n00:16:02.789 --> 00:16:06.446\nand Cross our fingers and hope that it all\ncomes to fruition, because now it kind of\n\n301\n00:16:06.446 --> 00:16:09.710\nlooks like we're playing Ray Jacks\nvolley ball or something.\n\n302\n00:16:09.710 --> 00:16:11.605\nIt's on this side,\n&gt;&gt; [LAUGH] I like that,\n\n303\n00:16:11.605 --> 00:16:15.486\nRay Jacks volleyball man, I would hate\nto be on that team, that's for sure,\n\n304\n00:16:15.486 --> 00:16:16.517\nit would not be fun.\n\n305\n00:16:16.517 --> 00:16:21.184\nBecause he's right the period isn't\nuniversal so maybe that'll work for\n\n306\n00:16:21.184 --> 00:16:23.119\nus right, so let's try that.\n\n307\n00:16:23.119 --> 00:16:28.102\nSo It'll take any single\ncharacter let's go back in here,\n\n308\n00:16:28.102 --> 00:16:33.894\nwe'll change this out,\nwe'll change this to, we'll put that.\n\n309\n00:16:33.894 --> 00:16:37.200\nAnd we'll come here and\nwe'll say period, right?\n\n310\n00:16:37.200 --> 00:16:40.880\nThat's a regular expression hit Enter.\n\n311\n00:16:40.880 --> 00:16:42.240\nMan, it's gone berserk.\n\n312\n00:16:42.240 --> 00:16:46.000\nIt's doing all sorts of weird stuff,\nit's not doing what I want it to do.\n\n313\n00:16:46.000 --> 00:16:47.760\nMan, this this is frustrating, right?\n\n314\n00:16:47.760 --> 00:16:48.710\nWell, guess what?\n\n315\n00:16:48.710 --> 00:16:53.260\nThere is some interesting things that\nhappen when you used the period.\n\n316\n00:16:53.260 --> 00:16:57.810\nIt has a single little caveat here,\nlet me actually, bring up that file.\n\n317\n00:16:57.810 --> 00:17:03.224\nLet me cat/ home/ advanced and\nit was in RegEx if\n\n318\n00:17:03.224 --> 00:17:09.600\nI'm not mistaken, yeah,\nspecial characters.\n\n319\n00:17:09.600 --> 00:17:11.318\nThat's not special characters,\nI don't want that one,\n\n320\n00:17:11.318 --> 00:17:16.220\nI want RegEx special characters,\nthere we go.\n\n321\n00:17:17.230 --> 00:17:19.570\nSo I made this file for that RegEx show.\n\n322\n00:17:19.570 --> 00:17:24.538\nPattern match any single\ncharacter except newlines,\n\n323\n00:17:24.538 --> 00:17:27.570\nso we got some odd output from it.\n\n324\n00:17:27.570 --> 00:17:29.090\nSo there's always a stinking catch,\n\n325\n00:17:29.090 --> 00:17:31.760\nthere's always a caveat to these things,\nright?\n\n326\n00:17:32.770 --> 00:17:33.665\nSo what do we do?\n\n327\n00:17:33.665 --> 00:17:36.554\nWell let's see here, what can I do?\n\n328\n00:17:36.554 --> 00:17:39.494\nI actually accidentally\nbrought up something, what if,\n\n329\n00:17:39.494 --> 00:17:41.020\nlet me look at that one again.\n\n330\n00:17:41.020 --> 00:17:43.502\nLet me bring up that other one,\nspecial classes.\n\n331\n00:17:45.326 --> 00:17:49.412\nI'm looking through this,\nremember instead of saying A through Z or\n\n332\n00:17:49.412 --> 00:17:51.810\n1 through 10 or whatever.\n\n333\n00:17:51.810 --> 00:17:56.510\nI can assign specifically,\nalready predefined ranges\n\n334\n00:17:56.510 --> 00:18:00.730\nof characters in regular expression and\nwe made this list of them.\n\n335\n00:18:00.730 --> 00:18:05.210\nVery cool, one of them's right here, space\n\n336\n00:18:05.210 --> 00:18:10.095\nmatches any whitespace character,\nspaces, tabs.\n\n337\n00:18:10.095 --> 00:18:14.050\nNL, bet you can guess what that means?\n\n338\n00:18:14.050 --> 00:18:16.240\nI'm gonna go with newline,\nright, so newline characters.\n\n339\n00:18:16.240 --> 00:18:18.740\nSo I will get spaces and newlines.\n\n340\n00:18:18.740 --> 00:18:20.708\nSo that's probably a better\nway to go about this.\n\n341\n00:18:20.708 --> 00:18:26.750\nNow there are some cool characters that\nwe have to actually make this work,\n\n342\n00:18:26.750 --> 00:18:28.090\nso I'm going to show you how to do that.\n\n343\n00:18:28.090 --> 00:18:32.630\nAnd give you, again, this is more\nadvanced stuff, so put your seatbelt on,\n\n344\n00:18:32.630 --> 00:18:35.600\nput a helmet and strap it in,\nget ready to go.\n\n345\n00:18:35.600 --> 00:18:36.970\n&gt;&gt; Now, Daniel, before we move on there,\n\n346\n00:18:36.970 --> 00:18:39.520\ncould we scroll back up to\nwhere we use the period?\n\n347\n00:18:41.200 --> 00:18:43.520\nThere was something\nactually I didn't expect.\n\n348\n00:18:43.520 --> 00:18:48.430\nSo I can kinda reason through why\nwe get this kind of line together,\n\n349\n00:18:48.430 --> 00:18:50.710\nright, the system user.\n\n350\n00:18:50.710 --> 00:18:51.690\nAnd it's all put together,\n\n351\n00:18:51.690 --> 00:18:56.940\ncool but then the last network\nadministrator is not there.\n\n352\n00:18:56.940 --> 00:18:58.070\nAnd why is that?\n\n353\n00:18:58.070 --> 00:18:59.990\nThat wasn't a newline,\nwhat happened there?\n\n354\n00:18:59.990 --> 00:19:02.030\n&gt;&gt; Yeah, it's really crazy, right?\n\n355\n00:19:02.030 --> 00:19:06.509\nThese things get a little weird because\neven though it's not a newline,\n\n356\n00:19:06.509 --> 00:19:10.855\ndon't forget there's nothing\nunderneath it right,what does N do?\n\n357\n00:19:10.855 --> 00:19:15.145\nN says take the line that I have in the\npattern space, grab the next line that's\n\n358\n00:19:15.145 --> 00:19:18.535\ncoming down the right and\nappend it with a newline character.\n\n359\n00:19:18.535 --> 00:19:20.540\nWell, what is being appended?\n\n360\n00:19:20.540 --> 00:19:22.675\nIs there anything to append, no.\n\n361\n00:19:22.675 --> 00:19:26.940\nSo it kind of like, wigs it out,\nthat's technical jargon by the way.\n\n362\n00:19:26.940 --> 00:19:31.941\n&gt;&gt; I'm going to have to write that down,\nsometimes I forget those terms.\n\n363\n00:19:31.941 --> 00:19:34.725\nSo essentially,\nwe have to be careful with last lines and\n\n364\n00:19:34.725 --> 00:19:36.640\nfile for using multi-line commands?\n\n365\n00:19:36.640 --> 00:19:37.220\n&gt;&gt; Correct.\n\n366\n00:19:37.220 --> 00:19:38.969\n&gt;&gt; All right, so I need to remember that.\n\n367\n00:19:38.969 --> 00:19:40.922\n&gt;&gt; Keep that upstairs.\n\n368\n00:19:40.922 --> 00:19:43.700\n&gt;&gt; Cuz that would be something\nthat would drive me insane.\n\n369\n00:19:43.700 --> 00:19:45.610\nWhy is it actually not working?\n\n370\n00:19:45.610 --> 00:19:46.500\nGuess what?\n\n371\n00:19:46.500 --> 00:19:49.290\nIt drives me insane, cuz I forget\nthat kinda thing all the time.\n\n372\n00:19:49.290 --> 00:19:51.305\nI'm like, why aren't you grabbing this?\n\n373\n00:19:51.305 --> 00:19:53.150\nWell we'll get to it right.\n\n374\n00:19:53.150 --> 00:19:57.330\nIt's actually a bit of an issue\nthat we're gonna have to overcome.\n\n375\n00:19:57.330 --> 00:20:00.590\nBut we're taking baby steps,\ntrying to work you guys through this.\n\n376\n00:20:00.590 --> 00:20:05.570\nSo now that we know we need that\nspace regular expression object,\n\n377\n00:20:05.570 --> 00:20:08.870\nspecial character class, we're gonna\nput that into our said statement.\n\n378\n00:20:08.870 --> 00:20:09.790\nI'm gonna show you how to do that.\n\n379\n00:20:09.790 --> 00:20:14.170\nSo, let me clear out here,\nand let's try that thing.\n\n380\n00:20:14.170 --> 00:20:19.910\nLet's say, let's go, said and\nit will be openness here,\n\n381\n00:20:19.910 --> 00:20:24.342\nand in, cuz that's what we're doing,\nand we're gonna do s/network.\n\n382\n00:20:24.342 --> 00:20:28.910\nSo everything's gravy up to here,\nyou know what's going on.\n\n383\n00:20:28.910 --> 00:20:32.050\nHere's what we need to add that space,\n\n384\n00:20:32.050 --> 00:20:35.252\nspecial character special\nclass from RegEx.\n\n385\n00:20:35.252 --> 00:20:40.692\nHere's what you need to do, you need\nto escape an open parentheses, like so\n\n386\n00:20:40.692 --> 00:20:45.905\nand then from there you add the entirety\nof the special character class.\n\n387\n00:20:45.905 --> 00:20:51.540\nThe bracket, bracket, colon, space,\ncolon, bracket, bracket, okay?\n\n388\n00:20:51.540 --> 00:20:54.650\nI know it's a lot, seems weird,\nbut it works really well.\n\n389\n00:20:54.650 --> 00:20:57.990\nAnd a lot of times this is probably\nthe better way to go, right?\n\n390\n00:20:57.990 --> 00:21:00.869\nI don't know if they all use\nthe bunch in demonstrations here but\n\n391\n00:21:00.869 --> 00:21:03.388\nwhen you're really doing the stuff,\nit's probably.\n\n392\n00:21:03.388 --> 00:21:06.052\nIt's really good, It's super portable too.\n\n393\n00:21:06.052 --> 00:21:12.335\nSo let's see here, we're doing space,\nyeah,like that, like so.\n\n394\n00:21:12.335 --> 00:21:17.136\nAnd now I need to close my parenthesis but\nI need to escape that closed parenthesis,\n\n395\n00:21:17.136 --> 00:21:18.380\nso escape and close.\n\n396\n00:21:19.420 --> 00:21:22.780\nSo if it seems like hieroglyphics\nwrapped up in Sanskrit and\n\n397\n00:21:22.780 --> 00:21:27.380\nwrapped up in like Koine Greek or\nwhatever, but that's how it's done.\n\n398\n00:21:27.380 --> 00:21:33.060\nSo just remember that like pause,\ncopy that down, put it on a post-it note,\n\n399\n00:21:33.060 --> 00:21:37.560\nand say how to insert RegEx stuff, right?\n\n400\n00:21:37.560 --> 00:21:41.063\nAnd there's also an interesting thing\nthat's happening with these things.\n\n401\n00:21:41.063 --> 00:21:44.908\nI get to, because of the way\nI used it with this open and\n\n402\n00:21:44.908 --> 00:21:50.590\nclosed parentheses business I can\nput the period, I can put whatever.\n\n403\n00:21:50.590 --> 00:21:54.670\nBut I get to reference it on\nthe other side of the fence,\n\n404\n00:21:54.670 --> 00:21:56.729\nI'll show you what I mean.\n\n405\n00:21:56.729 --> 00:22:00.065\nSo, here let me move, nah that's good.\n\n406\n00:22:00.065 --> 00:22:05.791\nNow I need to add administer because it's\nnetwork something administrator, right?\n\n407\n00:22:05.791 --> 00:22:09.830\nNetwork space, white space,\nadministrator add that,\n\n408\n00:22:09.830 --> 00:22:12.720\nadd administrator, close that off.\n\n409\n00:22:12.720 --> 00:22:15.306\nAnd now I need to say what do I\nwant to substitute it for, right?\n\n410\n00:22:15.306 --> 00:22:19.783\nWhich is system/1 which\nreferences the space,\n\n411\n00:22:19.783 --> 00:22:24.366\nwhatever that may be or\nthere'd be no white space,\n\n412\n00:22:24.366 --> 00:22:28.320\ntab, newline, so on and so forth, right.\n\n413\n00:22:28.320 --> 00:22:32.244\nReference it here, put whatever you have\nthere put it the same thing here and\n\n414\n00:22:32.244 --> 00:22:35.820\nyou have like one through nine\nabilities to do that, right.\n\n415\n00:22:35.820 --> 00:22:39.190\nAnd then I just add user like so and\n\n416\n00:22:39.190 --> 00:22:42.520\nnow if it's a white space\nshould [INAUDIBLE] right.\n\n417\n00:22:42.520 --> 00:22:47.380\nSo I'm gonna throw it on there and\nalso, here,\n\n418\n00:22:47.380 --> 00:22:50.210\nI want to add a g at the end of here.\n\n419\n00:22:50.210 --> 00:22:51.760\nNow, why is that?\n\n420\n00:22:51.760 --> 00:22:57.660\nRecall, back in the day, there was\nsome tomfoolery going on with the g.\n\n421\n00:22:57.660 --> 00:23:00.080\nIt says, if you find a match, and\nit want it to apply to all matches,\n\n422\n00:23:00.080 --> 00:23:02.500\nbecause remember, what does said do?\n\n423\n00:23:02.500 --> 00:23:07.700\nIt matches the first instance and\nit's done.\n\n424\n00:23:07.700 --> 00:23:11.419\nThere could be 12 instance in that\nline but it only matches the first.\n\n425\n00:23:11.419 --> 00:23:14.870\nI can reference the second,\nthe third, fourth or fifth but\n\n426\n00:23:14.870 --> 00:23:17.226\nI want them all] I got\nto flag it with a g.\n\n427\n00:23:17.226 --> 00:23:19.065\nThat's an important thing, right?\n\n428\n00:23:19.065 --> 00:23:24.320\nBecause down the street here,\nI just want you to remember that.\n\n429\n00:23:24.320 --> 00:23:26.990\nGrab a hold of that with\nyour brain put it in,\n\n430\n00:23:26.990 --> 00:23:29.961\npush it off to the side add\na little red flag to it.\n\n431\n00:23:29.961 --> 00:23:32.797\nAnd remember that because it\ncan get a little confusing.\n\n432\n00:23:32.797 --> 00:23:34.920\nAs Justin and\nI were having a fun time with it and\n\n433\n00:23:34.920 --> 00:23:37.060\nwe'll explore that when we get there.\n\n434\n00:23:37.060 --> 00:23:39.290\nRight now I want to add\na g because I wanna,\n\n435\n00:23:39.290 --> 00:23:43.620\nany of these matches that I find\nI want you to hit it right?\n\n436\n00:23:43.620 --> 00:23:47.290\nFrom there I think I'm pretty good to go,\nI'll just close out my statement,\n\n437\n00:23:47.290 --> 00:23:54.030\nfeed it the god.text and hit it look we've\ngot system user here at the top right.\n\n438\n00:23:54.030 --> 00:23:56.022\nBecause it was separated\nby the newline but\n\n439\n00:23:56.022 --> 00:23:58.687\nthat doesn't matter because\nspace slurps up newlines.\n\n440\n00:23:58.687 --> 00:24:03.170\nIt also slurps up just regular\nspaces which it caught here.\n\n441\n00:24:03.170 --> 00:24:04.392\nAnd here.\n\n442\n00:24:04.392 --> 00:24:08.381\nSo even though this was trying to\ndo all that new line business,\n\n443\n00:24:08.381 --> 00:24:13.890\nit didn't matter because every instance\nwas being caught, filtered through that g.\n\n444\n00:24:13.890 --> 00:24:16.180\nNow I think that I've brought\nyou to the homeland, right?\n\n445\n00:24:16.180 --> 00:24:19.356\nYou guys are like ah-ha, sweet,\nwe've covered all our bases.\n\n446\n00:24:19.356 --> 00:24:22.320\n[SOUND] Yeah, not really.\n\n447\n00:24:22.320 --> 00:24:28.020\nIt seems like a really good\nsolution to this problem.\n\n448\n00:24:28.020 --> 00:24:28.980\nBut it's not.\n\n449\n00:24:28.980 --> 00:24:29.780\nAnd I'm a show you why.\n\n450\n00:24:30.970 --> 00:24:35.650\nI've got another file, guide two, and\n\n451\n00:24:35.650 --> 00:24:41.350\nas you can see,\nthere's a whole lot more texting and\n\n452\n00:24:41.350 --> 00:24:43.750\nthere's a whole lot more\nnetwork administrators.\n\n453\n00:24:45.190 --> 00:24:49.750\nAnd if I use guide two here,\nwatch what happens.\n\n454\n00:24:51.760 --> 00:24:57.520\nYou'll notice that it doesn't actually\nget all these network administrators.\n\n455\n00:24:57.520 --> 00:25:01.554\nYou can see right here, I'm sorry,\nyeah network administrator.\n\n456\n00:25:01.554 --> 00:25:03.668\nIt's still showing up.\n\n457\n00:25:03.668 --> 00:25:08.532\nYeah, it's because we still have\nto do some more finagling to\n\n458\n00:25:08.532 --> 00:25:10.505\nget it to actually work.\n\n459\n00:25:10.505 --> 00:25:16.325\nSo I think we're going\nto come back to that.\n\n460\n00:25:16.325 --> 00:25:19.134\nI want to leave this as a problem for\nus, because\n\n461\n00:25:19.134 --> 00:25:23.790\nI need to teach you other things to be\nable to really solve this problem before.\n\n462\n00:25:23.790 --> 00:25:26.320\nI won't put the cart before the horse,\nas it were.\n\n463\n00:25:26.320 --> 00:25:29.172\n&gt;&gt; This is like season one episode\nwith a cliffhanger at the end.\n\n464\n00:25:29.172 --> 00:25:31.030\n&gt;&gt; [LAUGH]\n&gt;&gt; I call shenanigans, Daniel.\n\n465\n00:25:31.030 --> 00:25:34.150\nI do have one quick question\nbefore we leave off, and\n\n466\n00:25:34.150 --> 00:25:38.070\nI don't know if you necessarily have to\nshow that the parentheses around the space\n\n467\n00:25:38.070 --> 00:25:40.090\nspecial class, or special characters?\n\n468\n00:25:40.090 --> 00:25:41.970\n&gt;&gt; Yeah.\n&gt;&gt; Special class characters?\n\n469\n00:25:41.970 --> 00:25:45.080\nThose parentheses allow us\nto do the back slash one.\n\n470\n00:25:45.080 --> 00:25:46.530\nSo if they were not here\n&gt;&gt; Correct\n\n471\n00:25:46.530 --> 00:25:47.590\n&gt;&gt; Back slash one\n\n472\n00:25:47.590 --> 00:25:49.490\ndoesn't mean anything in that context,\nright?\n\n473\n00:25:49.490 --> 00:25:51.905\n&gt;&gt; You nailed it,\nyou're following along perfectly, my man,\n\n474\n00:25:51.905 --> 00:25:53.039\nJustin gets the gold stalk.\n\n475\n00:25:53.039 --> 00:25:56.332\n&gt;&gt; All right!\n&gt;&gt; Those things are a special set of open\n\n476\n00:25:56.332 --> 00:26:01.530\nand closed parentheses so\nthat we can do that referencing, okay?\n\n477\n00:26:01.530 --> 00:26:05.070\nAnd if you read your said- by\nthe way don't read man said,\n\n478\n00:26:05.070 --> 00:26:08.740\ndon't do that,\nthat's like a quick and dirty right?\n\n479\n00:26:08.740 --> 00:26:14.607\nInfo said is where you want to go for more\ninformation, it's a full user guide for\n\n480\n00:26:14.607 --> 00:26:19.287\nsaid and it will lead you to\nthe promised land a whole lot faster.\n\n481\n00:26:19.287 --> 00:26:22.983\nIf you just need a quick reference\nman said it up, if you need to know\n\n482\n00:26:22.983 --> 00:26:27.740\nsomething about how said works Info\nsaid is gonna be your one stop shop.\n\n483\n00:26:27.740 --> 00:26:30.450\n&gt;&gt; Well, Daniel, you definitely have\nleft me kind of watering at the mouth,\n\n484\n00:26:30.450 --> 00:26:34.508\nlooking forward to how this comes to\nfruition because I was like, it's gonna,\n\n485\n00:26:34.508 --> 00:26:35.349\ndoesn't work.\n\n486\n00:26:35.349 --> 00:26:37.200\n&gt;&gt; [LAUGH]\n&gt;&gt; Man, but this is one of those things.\n\n487\n00:26:37.200 --> 00:26:37.800\nTinker around,\n\n488\n00:26:37.800 --> 00:26:41.180\nbreak things because this is gonna\nkeep us from having issues later on.\n\n489\n00:26:41.180 --> 00:26:44.053\nSo definitely join us in a part two\nas we come back and fix that issue.\n\n490\n00:26:44.053 --> 00:26:46.962\nBut we're gonna go ahead and get out\nof here so signing off for ITProTV,\n\n491\n00:26:46.962 --> 00:26:48.575\nI've been your host Justin Dennison.\n\n492\n00:26:48.575 --> 00:26:49.667\n&gt;&gt; And I'm Daniel Lowrie.\n\n493\n00:26:49.667 --> 00:26:52.035\n&gt;&gt; And we'll see you next time.\n\n494\n00:26:52.035 --> 00:26:57.817\n[MUSIC]\n\n495\n00:26:57.817 --> 00:27:00.620\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "241176911"
        },
        {
          "description": "In this episode, Daniel and Justin continue their look into sed's \"multi-line\" commands. Here they cover the multi-line delete(D) and the multi-line Print(P), using them to solve some practical issues when modifying text.",
          "length": "961",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-2-advanced_sed_multi-line_commands_pt_2-110217-PGM.00_15_48_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-2-advanced_sed_multi-line_commands_pt_2-110217-PGM.00_15_48_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-1-2-advanced_sed_multi-line_commands_pt_2-110217-PGM.00_15_48_04.Still001-sm.jpg",
          "title": "Advanced sed: Multi-line Commands Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.320 --> 00:00:01.241\nWelcome to ITProTV.\n\n2\n00:00:01.241 --> 00:00:02.439\nI'm your host Don Pezet.\n\n3\n00:00:02.439 --> 00:00:06.875\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:06.875 --> 00:00:08.530\n[MUSIC]\n\n5\n00:00:08.530 --> 00:00:11.865\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:11.865 --> 00:00:15.942\n&gt;&gt; Greetings everyone, and welcome back\nto another exciting episode of ITProTV.\n\n7\n00:00:15.942 --> 00:00:20.213\nI'm your host, Justin Dennison, and we're\nback with a part two of some advanced said\n\n8\n00:00:20.213 --> 00:00:24.367\ntools, well, that luckily you never knew\nthat this needed, but sometimes you do,\n\n9\n00:00:24.367 --> 00:00:27.612\nand luckily we have Daniel Lowry\nback in the studio to help us out.\n\n10\n00:00:27.612 --> 00:00:28.405\nHow you doing today Daniel?\n\n11\n00:00:28.405 --> 00:00:29.539\n&gt;&gt; I'm doing fantastic Justin!\n\n12\n00:00:29.539 --> 00:00:32.772\nReady to kick off some more said action.\n\n13\n00:00:32.772 --> 00:00:34.540\nSome more of the advanced functionality.\n\n14\n00:00:34.540 --> 00:00:37.289\nWe were looking at multi-line commands and\n\n15\n00:00:37.289 --> 00:00:41.968\nwe kind of got through the capital N\nmulti-line command, which appends,\n\n16\n00:00:41.968 --> 00:00:46.869\nto remind you, appends the next line to\nthe line that's in the pattern space,\n\n17\n00:00:46.869 --> 00:00:51.360\nand also puts in a new line character\nthat separates the two appending.\n\n18\n00:00:51.360 --> 00:00:52.931\nSo remember we had some fun with that.\n\n19\n00:00:52.931 --> 00:00:54.164\nKind of left you with that cliffhanger.\n\n20\n00:00:54.164 --> 00:00:54.959\nGuess what?\n\n21\n00:00:54.959 --> 00:00:57.089\nWe're not gonna get to that cliffhanger.\n\n22\n00:00:57.089 --> 00:00:59.314\nI got some things.\n\n23\n00:00:59.314 --> 00:01:03.483\nI wanna keep stringing you along\nuntil we get to the culmination.\n\n24\n00:01:03.483 --> 00:01:07.666\nI'm gonna teach you some cool tricks, some\ncool things we can do so that ultimately\n\n25\n00:01:07.666 --> 00:01:11.691\nonce you have all that knowledge we can go\nback to that and actually make it work.\n\n26\n00:01:11.691 --> 00:01:15.677\nSo just, I'm not gonna lead you on and\nmake you think today's gonna be the day,\n\n27\n00:01:15.677 --> 00:01:18.280\nor this is gonna be the episode.\n\n28\n00:01:18.280 --> 00:01:20.147\nWe will get to it though, don't worry.\n\n29\n00:01:20.147 --> 00:01:23.430\n&gt;&gt; Well Daniel, I'm glad you told me we\nwill get to it, and that this has purpose,\n\n30\n00:01:23.430 --> 00:01:27.105\nbecause sometimes filler episodes, I've\nseen them, and they don't serve a purpose,\n\n31\n00:01:27.105 --> 00:01:28.093\nand they make me angry.\n\n32\n00:01:28.093 --> 00:01:28.854\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n33\n00:01:28.854 --> 00:01:31.160\nyou say that we need this, so\nI'm gonna trust you on this one.\n\n34\n00:01:31.160 --> 00:01:36.226\n&gt;&gt; We do, because we got a couple of\nother multi-line commands that we need\n\n35\n00:01:36.226 --> 00:01:41.888\nto understand before we get to the real\nsolution to our problem back in guide two.\n\n36\n00:01:41.888 --> 00:01:43.345\nSo what are those multi-line commands?\n\n37\n00:01:43.345 --> 00:01:46.267\nWell we still got capital D,\nand capital P to go.\n\n38\n00:01:46.267 --> 00:01:49.671\nWe've gotta understand them\nbefore we get to that.\n\n39\n00:01:49.671 --> 00:01:51.230\nSo, let's start there.\n\n40\n00:01:51.230 --> 00:01:52.848\nCapital D, what does that do?\n\n41\n00:01:52.848 --> 00:01:57.740\nWell it's a delete command, but\nit's a multi-line delete command, and\n\n42\n00:01:57.740 --> 00:01:59.430\nof course, like any good multi-line,\n\n43\n00:01:59.430 --> 00:02:04.010\ncommand it would not be complete without\nsome crazy weirdness that it does.\n\n44\n00:02:04.010 --> 00:02:06.740\nSo let's talk about that.\n\n45\n00:02:06.740 --> 00:02:12.160\nSo the capital D what it does is,\nit says, all right, I've got\n\n46\n00:02:12.160 --> 00:02:17.267\nthis string of text that comes in,\nI'm going to basically,\n\n47\n00:02:17.267 --> 00:02:21.950\nif there's no craziness going on, I'm just\ngoing to treat it like a normal delete.\n\n48\n00:02:23.220 --> 00:02:24.590\nPretty simple, straightforward.\n\n49\n00:02:24.590 --> 00:02:29.350\nJust like a lowercase d, but\nthere's an embedded new line.\n\n50\n00:02:29.350 --> 00:02:31.130\nI'm gonna do something special.\n\n51\n00:02:31.130 --> 00:02:35.579\nThere's always got to be a catch, and what\nthat catch is, is that embedded new line.\n\n52\n00:02:35.579 --> 00:02:37.030\nSo what happens?\n\n53\n00:02:37.030 --> 00:02:42.314\nSo if there's a new line character in the\ntext what it does is it will delete up to,\n\n54\n00:02:42.314 --> 00:02:45.880\nand including, the new line character.\n\n55\n00:02:45.880 --> 00:02:47.310\nThat is important.\n\n56\n00:02:47.310 --> 00:02:50.828\nIt will delete up to and\nincluding the new line character.\n\n57\n00:02:50.828 --> 00:02:53.052\nAnd then, or does it leave it?\n\n58\n00:02:53.052 --> 00:02:55.560\nI don't remember,\nbecause I got P to go as well.\n\n59\n00:02:55.560 --> 00:02:57.320\nI wrote it down.\n\n60\n00:02:57.320 --> 00:03:02.061\nIt's easy to [SOUND] get them on\nthe wrong side of the fence, right?\n\n61\n00:03:02.061 --> 00:03:04.450\nSo D deletes only the first\nline in the pattern space,\n\n62\n00:03:04.450 --> 00:03:07.290\nremoves all characters up to and\nincluding the new line.\n\n63\n00:03:07.290 --> 00:03:11.420\nLook at me, I'm on point today,\nso it removes that.\n\n64\n00:03:11.420 --> 00:03:12.030\nThen what does it do?\n\n65\n00:03:12.030 --> 00:03:14.140\nWhat do you mean then what does it do?\n\n66\n00:03:14.140 --> 00:03:15.404\nIt's already done stuff.\n\n67\n00:03:15.404 --> 00:03:16.440\nIt's going crazy here.\n\n68\n00:03:16.440 --> 00:03:18.175\nIt's like a runaway delete.\n\n69\n00:03:18.175 --> 00:03:22.558\nIt is it's stupid, it's crazy, it's weird,\nbut you'll need it from time to time.\n\n70\n00:03:22.558 --> 00:03:28.030\nSo it deletes up to and including the new\nline character, then it recycles.\n\n71\n00:03:29.505 --> 00:03:33.480\nDropping does not take in new text,\nit just recycles.\n\n72\n00:03:33.480 --> 00:03:37.330\nGoes through another cycle,\nto where the text, and what does it do?\n\n73\n00:03:37.330 --> 00:03:41.460\nWell, it looks for\nany deletion pattern that it should catch.\n\n74\n00:03:41.460 --> 00:03:44.262\nIt doesn't find any,\nit just prints out the line.\n\n75\n00:03:44.262 --> 00:03:48.929\nSo, if we've got the capital N\nworking with us, what does that do?\n\n76\n00:03:48.929 --> 00:03:51.295\nWell, it slurps up the next line,\nputs it up,\n\n77\n00:03:51.295 --> 00:03:54.756\nappends it to the end of our first\nline as the new line character, and\n\n78\n00:03:54.756 --> 00:03:57.640\nthen I throw a capital D on the end,\nwhat's it gonna do?\n\n79\n00:03:57.640 --> 00:04:02.255\nWell, it's gonna delete up to that\nnewline, including it, drop that off,\n\n80\n00:04:02.255 --> 00:04:06.018\n[SOUND] all we have left in the pattern\nspace is what was left, and\n\n81\n00:04:06.018 --> 00:04:08.230\nthat will get printed to the screen.\n\n82\n00:04:08.230 --> 00:04:11.196\nYes, crazy, right?\n\n83\n00:04:11.196 --> 00:04:15.630\nWell, hopefully, that makes sense, if not,\n\n84\n00:04:15.630 --> 00:04:19.470\nwell of course I've got a demonstration\nto help solidify that in our minds.\n\n85\n00:04:19.470 --> 00:04:24.951\nI've got a file here,\nfile 1, cat file1.txt,\n\n86\n00:04:24.951 --> 00:04:30.800\nhere we go it's mary had a little lamb,\nit's the nursery rhyme, we all know it.\n\n87\n00:04:32.410 --> 00:04:35.246\nSome interesting things\nhappening in this nursery rhyme.\n\n88\n00:04:35.246 --> 00:04:39.940\nOne is,\nI've got an empty block right here.\n\n89\n00:04:39.940 --> 00:04:40.948\nThere's nothing there.\n\n90\n00:04:40.948 --> 00:04:44.948\nI also got an empty block between, and\neverywhere that Mary went the lamb was\n\n91\n00:04:44.948 --> 00:04:48.139\nsure to go,\nan unintentional fat-fingering, whatever,\n\n92\n00:04:48.139 --> 00:04:50.870\nsomething happened,\nit got a space in between it.\n\n93\n00:04:50.870 --> 00:04:51.910\nI don't want a space there.\n\n94\n00:04:53.300 --> 00:04:58.187\nI do have this line as well,\nand I do wanna keep that.\n\n95\n00:04:58.187 --> 00:05:01.379\nI wanna keep that line kind of like\nbreaking it up into I guess what is\n\n96\n00:05:01.379 --> 00:05:02.690\nthat stanzas or whatever.\n\n97\n00:05:04.040 --> 00:05:08.100\nSo I want stanza one and stanza two, and\nI want them separated by an empty line.\n\n98\n00:05:08.100 --> 00:05:12.090\nThe problem comes in if I\nuse the regular delete to,\n\n99\n00:05:12.090 --> 00:05:16.170\nsay find empty lines and delete them,\nit's going to delete that empty line.\n\n100\n00:05:17.210 --> 00:05:20.255\nThat's why the capital D can help me out.\n\n101\n00:05:20.255 --> 00:05:24.141\nI can reference that's\nthose individual areas and\n\n102\n00:05:24.141 --> 00:05:28.655\nthen do some deletion, and\nit's gonna go beyond that, but\n\n103\n00:05:28.655 --> 00:05:33.640\nthis is basically just again,\ncontrived full disclosure here.\n\n104\n00:05:33.640 --> 00:05:36.550\nContrived example to show you this.\n\n105\n00:05:36.550 --> 00:05:39.380\nProbably not the best case, but again,\n\n106\n00:05:39.380 --> 00:05:43.800\nunless you have actual problems standing\nin front of you that this will solve,\n\n107\n00:05:43.800 --> 00:05:47.780\nwhich we do, but we're gonna work\nwith it a little bit later, just for\n\n108\n00:05:47.780 --> 00:05:50.770\ndemonstrative purposes,\nI need to make stuff up.\n\n109\n00:05:50.770 --> 00:05:53.340\nSo, if you're like, hey,\nyou can also do such and such, or\n\n110\n00:05:53.340 --> 00:05:54.740\nthat didn't do this, you can.\n\n111\n00:05:54.740 --> 00:05:55.684\nYes, I know.\n\n112\n00:05:55.684 --> 00:05:56.416\nI know.\n\n113\n00:05:56.416 --> 00:05:57.610\nThank you.\n\n114\n00:05:57.610 --> 00:05:59.160\n[LAUGH] But, I have to show you this, so\n\n115\n00:05:59.160 --> 00:06:01.330\nlet me just show you how it works,\nall right?\n\n116\n00:06:01.330 --> 00:06:02.640\nEnough of that.\n\n117\n00:06:02.640 --> 00:06:03.626\nLet's try this thing here.\n\n118\n00:06:03.626 --> 00:06:08.240\nSo if I say, said, and I do,\nI wanna slurp up everything.\n\n119\n00:06:08.240 --> 00:06:13.110\nSo normally it would kind of look\nlike this, space nn, what is it?\n\n120\n00:06:13.110 --> 00:06:14.450\ncarrot dollar sign.\n\n121\n00:06:14.450 --> 00:06:18.820\nSo it begins and ends with nothing,\nkind of thing, and then delete.\n\n122\n00:06:18.820 --> 00:06:21.991\nThat's how, normally,\nwe would do this, with file1.\n\n123\n00:06:21.991 --> 00:06:23.867\nBa-da-bing, right?\n\n124\n00:06:23.867 --> 00:06:28.928\nEh, that's not gonna work for us,\ncuz we need that one character in between,\n\n125\n00:06:28.928 --> 00:06:33.222\nso just to kind of show you how this\nworks, you can come in here, and\n\n126\n00:06:33.222 --> 00:06:37.900\nwe'll erase this out, and instead,\nwe will do the same thing here, but\n\n127\n00:06:37.900 --> 00:06:39.846\nwe're gonna do the new line.\n\n128\n00:06:39.846 --> 00:06:40.350\nWhere's the n?\n\n129\n00:06:40.350 --> 00:06:41.450\nThere it is.\n\n130\n00:06:41.450 --> 00:06:44.942\nAnd then, oops, I forgot my curly brace,\n\n131\n00:06:44.942 --> 00:06:49.708\nn space, like so, and\nI'm gonna say little, like that.\n\n132\n00:06:49.708 --> 00:06:54.782\nSo I'm giving it regex to look for\nMary had a little lamb,\n\n133\n00:06:54.782 --> 00:06:59.221\ncuz that is, well,\nit's unique to the text, and\n\n134\n00:06:59.221 --> 00:07:03.555\nI know that first line has\na unique piece of text,\n\n135\n00:07:03.555 --> 00:07:08.880\nI just grabbed it,\nused it as my address for my regex.\n\n136\n00:07:08.880 --> 00:07:12.720\nWhat I'll do here is I'll do the D,\ncapital D,\n\n137\n00:07:12.720 --> 00:07:16.830\nlike so, because, what does that do?\n\n138\n00:07:16.830 --> 00:07:20.850\nBecause it's gonna find, remember,\nthere is a space before this line, so\n\n139\n00:07:20.850 --> 00:07:26.170\nthe first line is technically this\nempty line that you can't see, and\n\n140\n00:07:26.170 --> 00:07:28.220\nMary had a little lamb is the second line.\n\n141\n00:07:28.220 --> 00:07:32.906\nSo the new line is gonna append Mary had\na little lamb to the end of an empty line,\n\n142\n00:07:32.906 --> 00:07:35.905\nwith a space of the new\nline character between it.\n\n143\n00:07:35.905 --> 00:07:41.600\nThen, if I find little in that line,\nI do my regular expression.\n\n144\n00:07:41.600 --> 00:07:42.970\nI match little.\n\n145\n00:07:42.970 --> 00:07:48.714\nI wanna do a multi-line delete, which\nmeans I wanna delete everything up to and\n\n146\n00:07:48.714 --> 00:07:51.902\nincluding the new line, and then recycle.\n\n147\n00:07:51.902 --> 00:07:53.924\nLook and see if there's anything\nelse that needs to be deleted.\n\n148\n00:07:53.924 --> 00:07:55.254\nIf not just print the line.\n\n149\n00:07:55.254 --> 00:07:56.795\nSo what's this gonna do?\n\n150\n00:07:56.795 --> 00:08:01.613\nIt's gonna remove that first line because\nit's deleting it and printing it out.\n\n151\n00:08:01.613 --> 00:08:05.421\nSo that will get rid of that first one,\nbut we also got another line as well.\n\n152\n00:08:05.421 --> 00:08:07.468\nSo we gotta add another string.\n\n153\n00:08:07.468 --> 00:08:12.800\nSo we've got between here and everywhere\nthat Mary went, the lamb was sure to go.\n\n154\n00:08:12.800 --> 00:08:18.095\nSo I'm gonna key on sure like this and\ndo a delete as well.\n\n155\n00:08:18.095 --> 00:08:20.460\nThen I can close it out, and of course,\n\n156\n00:08:20.460 --> 00:08:23.921\nthe same idea applies that\nit's going to come down here.\n\n157\n00:08:23.921 --> 00:08:26.020\nA new line's going to occur.\n\n158\n00:08:26.020 --> 00:08:28.030\nIt's gonna append,\nthe lamb was sure to go,\n\n159\n00:08:28.030 --> 00:08:31.750\nto the end of an empty line,\nwith a new line in between it.\n\n160\n00:08:31.750 --> 00:08:34.572\nThe capital D is going to then what?\n\n161\n00:08:34.572 --> 00:08:36.560\nIt's gonna delete everything up to and\n\n162\n00:08:36.560 --> 00:08:39.150\nincluding the new line character,\nrecycle, and print.\n\n163\n00:08:40.620 --> 00:08:43.720\nSo that should get rid of\nthe lines that we don't want,\n\n164\n00:08:43.720 --> 00:08:45.130\nleaving the line that we do.\n\n165\n00:08:46.400 --> 00:08:49.600\nAgain, contrived example, but, hey,\nhopefully we get what we're looking for\n\n166\n00:08:49.600 --> 00:08:51.210\nhere, and there we go.\n\n167\n00:08:51.210 --> 00:08:55.526\nRemoved that first line,\nremoved that line between these two, and\n\n168\n00:08:55.526 --> 00:08:57.429\nleft the line that we wanted.\n\n169\n00:08:57.429 --> 00:09:02.774\nVery, very simple if you understand\nwhat's happening with the capital D,\n\n170\n00:09:02.774 --> 00:09:07.116\nand the capital N working in\nconjunction with each other, and\n\n171\n00:09:07.116 --> 00:09:11.060\nthat really is good,\nbasically is what's happening.\n\n172\n00:09:11.060 --> 00:09:17.460\nI wanted to show you guys what the D does,\nwhat does it do in conjunction with the N,\n\n173\n00:09:17.460 --> 00:09:20.716\nand remember all those little caveats\nalong the way kind of reiterate that so\n\n174\n00:09:20.716 --> 00:09:25.390\nit breath the retention into your brains,\nthat if I use a capital D,\n\n175\n00:09:25.390 --> 00:09:30.260\nit's going to delete everything up to and\nincluding the new line, recycle,\n\n176\n00:09:30.260 --> 00:09:35.420\nrehash through like a regular D\ndoesn't find the strength, off you go.\n\n177\n00:09:35.420 --> 00:09:38.401\nSo there we go, pretty simple stuff.\n\n178\n00:09:38.401 --> 00:09:41.080\nAll right, I think that moves us on to P.\n\n179\n00:09:42.110 --> 00:09:44.435\nPrint, multi-line printing.\n\n180\n00:09:44.435 --> 00:09:47.887\nSo multi-line printing is\na interesting thing, because,\n\n181\n00:09:47.887 --> 00:09:49.620\nlet me see if I can remember.\n\n182\n00:09:49.620 --> 00:09:50.545\nYes.\n\n183\n00:09:50.545 --> 00:09:54.868\nIt prints up to the new line character,\nbut not including it.\n\n184\n00:09:54.868 --> 00:09:57.311\nSo everything that goes\n[SOUND] up to the new line,\n\n185\n00:09:57.311 --> 00:09:59.466\nthat's what multi-line printing does.\n\n186\n00:09:59.466 --> 00:10:04.851\nSo it's printing a single\nline of a multi-line string,\n\n187\n00:10:04.851 --> 00:10:10.132\nmulti-line pattern, and\nit's going up to a new line.\n\n188\n00:10:10.132 --> 00:10:14.874\nSo if there is an embedded new line,\nwhat's going to happen?\n\n189\n00:10:14.874 --> 00:10:15.680\nLet's talk about it.\n\n190\n00:10:15.680 --> 00:10:17.495\nLet's take a look here.\n\n191\n00:10:17.495 --> 00:10:18.935\nI'll use the guide for this one.\n\n192\n00:10:18.935 --> 00:10:21.754\nLet me clear out, so\nI can get back to the top here, and\n\n193\n00:10:21.754 --> 00:10:25.730\nI'll just take a look at it, and\nthen we can kind of dissect what occurred.\n\n194\n00:10:25.730 --> 00:10:26.536\nI like doing that sometimes.\n\n195\n00:10:26.536 --> 00:10:31.830\nWe'll do said -in, that way I'm\nnot printing any lines other than\n\n196\n00:10:31.830 --> 00:10:36.640\nthe line I want, cuz I am doing a print,\nso I want to print a specific thing,\n\n197\n00:10:36.640 --> 00:10:40.250\nand I will do this guy right here.\n\n198\n00:10:40.250 --> 00:10:44.330\nThrow my N on top of the fire,\nand then let's look for\n\n199\n00:10:44.330 --> 00:10:46.105\nthat network administrator thing.\n\n200\n00:10:46.105 --> 00:10:51.271\nSo network and I'll do just\nthe standard new line character.\n\n201\n00:10:51.271 --> 00:10:53.470\nThat'll be find for this demonstration.\n\n202\n00:10:53.470 --> 00:10:55.279\nAdministrator.\n\n203\n00:10:55.279 --> 00:10:57.384\nWe'll switch that,\nno we don't need to switch anything,\n\n204\n00:10:57.384 --> 00:10:58.570\nwe're just doing the capital P.\n\n205\n00:10:58.570 --> 00:10:59.226\nThat's right.\n\n206\n00:10:59.226 --> 00:11:04.188\nSo I want to look for lines with network\nAdministrator separated buy an embedded\n\n207\n00:11:04.188 --> 00:11:08.495\nnew line, and it should give us\nsome interesting results actually.\n\n208\n00:11:08.495 --> 00:11:11.200\nSo let's see what it does.\n\n209\n00:11:11.200 --> 00:11:15.173\nI'm gonna go against guide.txt,\nand look it says,\n\n210\n00:11:15.173 --> 00:11:20.312\nforget this up here, this is actually\nlike a text wrap, there we go.\n\n211\n00:11:20.312 --> 00:11:25.730\nThis guide is meant to walk you\nthrough a day as a network.\n\n212\n00:11:25.730 --> 00:11:27.858\nInteresting.\n\n213\n00:11:27.858 --> 00:11:31.196\nCat guide.txt.\n\n214\n00:11:31.196 --> 00:11:35.530\nThis guide is meant to meant to walk you\nthrough a day as a Network Administrator.\n\n215\n00:11:35.530 --> 00:11:38.769\nBy the end, hopefully, you will be\nbetter equipped, so on, and so forth.\n\n216\n00:11:38.769 --> 00:11:40.410\nSo we didn't print the rest of the lines.\n\n217\n00:11:40.410 --> 00:11:42.031\nThat's what the -N does.\n\n218\n00:11:42.031 --> 00:11:45.559\nWe did the capital N, not just an n.\n\n219\n00:11:45.559 --> 00:11:50.509\nRemember, -n is an argument,\nlowercase n by itself\n\n220\n00:11:50.509 --> 00:11:55.570\nis take the next line and\nput it into the pattern space.\n\n221\n00:11:55.570 --> 00:11:57.530\nCopy it to the pattern\nspace don't append it.\n\n222\n00:11:57.530 --> 00:12:01.140\nCapital N appends to the pattern space,\n\n223\n00:12:01.140 --> 00:12:05.510\nthe next line, and\nseparates it by a new line character.\n\n224\n00:12:05.510 --> 00:12:10.473\nSo look for\nnetwork new line administrator, and print.\n\n225\n00:12:10.473 --> 00:12:11.400\nSo what did it do?\n\n226\n00:12:11.400 --> 00:12:15.890\nIt found network, but\nit's a capital P print, so what did it do?\n\n227\n00:12:15.890 --> 00:12:20.290\nIt printed up to the new line character,\nnot including it,\n\n228\n00:12:20.290 --> 00:12:24.080\nand gave me my text, so\nthat is an important thing.\n\n229\n00:12:24.080 --> 00:12:29.838\nI know, you're probably sitting\nthere going, what is this?\n\n230\n00:12:29.838 --> 00:12:34.575\nBut man that's how it works, and you\nhave to understand that you have to bury\n\n231\n00:12:34.575 --> 00:12:38.572\nthese little rules into your brain\nif you wanna effectively, or\n\n232\n00:12:38.572 --> 00:12:40.365\nyou print out cheat sheets.\n\n233\n00:12:40.365 --> 00:12:43.106\nGuilty, and yes, paste them to\nthe side of your computer, so\n\n234\n00:12:43.106 --> 00:12:45.953\nthat when you wanna do this stuff,\nor put a text file somewhere,\n\n235\n00:12:45.953 --> 00:12:49.695\nso that when you do this stuff, you can\nreference it and go, yea, that's right,\n\n236\n00:12:49.695 --> 00:12:52.660\nI got to do this, cuz it's a lot\nto remember, I'm not gonna lie.\n\n237\n00:12:52.660 --> 00:12:57.617\nUnless you do said every day,\nyou're probably gonna forget 95% of this,\n\n238\n00:12:57.617 --> 00:13:00.610\nwithout some sort of reinforcement.\n\n239\n00:13:00.610 --> 00:13:05.820\nSo, just remember, see if there's anything\nelse that I wanna talk to you about this.\n\n240\n00:13:05.820 --> 00:13:07.750\nYeah, basically, that's what's happening,\n\n241\n00:13:07.750 --> 00:13:11.160\nI wanted to demonstrate the fact that,\nwhen you use the capital P,\n\n242\n00:13:11.160 --> 00:13:16.228\nit only prints up to the new line\ncharacter that's embedded in the text.\n\n243\n00:13:16.228 --> 00:13:20.224\nSo, [SOUND], and it does that, and\nof course, that's a multi-line,\n\n244\n00:13:20.224 --> 00:13:22.834\nthat's why it's used\nin conjunction with N.\n\n245\n00:13:22.834 --> 00:13:25.815\nIf I just wanted the first\nline I could of just done a p,\n\n246\n00:13:25.815 --> 00:13:29.549\na regular p, a lowercase p, and\nit would have done that just fine.\n\n247\n00:13:29.549 --> 00:13:33.949\nBut if I'm working with a multi-line\nI need to maybe have to employ\n\n248\n00:13:33.949 --> 00:13:38.130\nthe multi-line P as well, and\nyou'll see that a lot of times.\n\n249\n00:13:38.130 --> 00:13:40.939\nYou'll see the NPD functionality, or\n\n250\n00:13:40.939 --> 00:13:44.683\nNDP, whichever way you'll see it,\na lot of times,\n\n251\n00:13:44.683 --> 00:13:50.063\nall three of them will be doing their\nmagic together for certain outcomes.\n\n252\n00:13:50.063 --> 00:13:55.030\nSo now hopefully you understand capital N,\nwhich is the next line,\n\n253\n00:13:55.030 --> 00:14:00.535\nappend with a new line character between\nthe two, into the pattern space.\n\n254\n00:14:00.535 --> 00:14:06.152\nThe D deletes everything up to and\nincluding an embedded new\n\n255\n00:14:06.152 --> 00:14:11.671\nline in the pattern space,\nand then recycle, and print.\n\n256\n00:14:11.671 --> 00:14:16.795\nThen you have your capital P printing or\nmulti-lining printing, which prints\n\n257\n00:14:16.795 --> 00:14:21.852\neverything up to the embedded new line,\nnot including it, and you're done.\n\n258\n00:14:21.852 --> 00:14:26.180\nMan, I think we have run down NDP,\nall the multi-line commands.\n\n259\n00:14:26.180 --> 00:14:30.060\nWe are going to see this more as we move\non with more advanced functionality as I\n\n260\n00:14:30.060 --> 00:14:34.610\nhave said, but I think this is a good spot\nfor all of us to take a breath, step back,\n\n261\n00:14:34.610 --> 00:14:38.225\nand go, I feel like I just been\nhit with a fire hose in the face,\n\n262\n00:14:38.225 --> 00:14:40.478\ncuz it's a lot to take in.\n\n263\n00:14:40.478 --> 00:14:43.420\n&gt;&gt; Yeah, and Daniel,\nthis is a little bit shorter episode, but\n\n264\n00:14:43.420 --> 00:14:46.304\nI think it's important to\nreally kind of grok, these.\n\n265\n00:14:46.304 --> 00:14:49.961\nTo really kind of let these veg, cuz I'm\ngonna be honest with you, there's still\n\n266\n00:14:49.961 --> 00:14:53.516\na couple of those where I'm like, all\nright, hold on a sec, what does the D do?\n\n267\n00:14:53.516 --> 00:14:58.118\nAll right, so the D, capital N, and you\nput this, I'm gonna have to go play with\n\n268\n00:14:58.118 --> 00:15:02.961\nthis, before I'm even prepared to even fix\nour problem that we left off in part one.\n\n269\n00:15:02.961 --> 00:15:05.438\nSo is this gonna be a part\nthree to come back?\n\n270\n00:15:05.438 --> 00:15:09.398\n&gt;&gt; No, no, we're gonna move into other\nstuff that we also need to learn,\n\n271\n00:15:09.398 --> 00:15:12.713\nthat's not specifically\nmulti-line command business.\n\n272\n00:15:12.713 --> 00:15:16.235\nSo follow us for more,\nas we come back with,\n\n273\n00:15:16.235 --> 00:15:20.820\nwhat the next thing will be\ncommand navigation, right?\n\n274\n00:15:20.820 --> 00:15:21.887\nI think it's command navigation.\n\n275\n00:15:21.887 --> 00:15:22.710\nNo, I'm sorry.\n\n276\n00:15:22.710 --> 00:15:24.071\nOld space.\n\n277\n00:15:24.071 --> 00:15:24.594\n&gt;&gt; More spaces?\n\n278\n00:15:24.594 --> 00:15:25.654\n&gt;&gt; Yeah.\n&gt;&gt; I call shenanigans Daniel.\n\n279\n00:15:25.654 --> 00:15:28.065\n&gt;&gt; [LAUGH]\n&gt;&gt; That's one of those things where,\n\n280\n00:15:28.065 --> 00:15:31.225\nsaid is something that's gonna\nchange the way you think, and\n\n281\n00:15:31.225 --> 00:15:34.290\nprobably make you a little bit\nbetter at solving problems.\n\n282\n00:15:34.290 --> 00:15:37.753\nI definitely know I'm like wow, that's\nstretching my brain, so definitely stay\n\n283\n00:15:37.753 --> 00:15:40.926\ntuned as we continue looking through\nsome of these advanced said features.\n\n284\n00:15:40.926 --> 00:15:43.021\nBut for this episode,\nwe're gonna go ahead and wrap it up.\n\n285\n00:15:43.021 --> 00:15:46.013\nSo, signing off for ITProTV,\nI've been your host, Justin Dennison.\n\n286\n00:15:46.013 --> 00:15:46.929\n&gt;&gt; And I'm Daniel Lowrie.\n\n287\n00:15:46.929 --> 00:15:49.666\n&gt;&gt; And we'll see you next time.\n\n288\n00:15:49.666 --> 00:15:55.341\n[MUSIC]\n\n289\n00:15:55.341 --> 00:15:58.383\n&gt;&gt; Thank you for watching ITProTV\n\n",
          "vimeoId": "241177811"
        },
        {
          "description": "In this episode, Daniel and Justin demonstrate and explain sed's \"Hold Space\" and command negation features. They start by looking at the Hold Space and its commands for record manipulation in conjunction with the Pattern Space. Then they jump into command negation which helps in times that you DON'T need a command to execute.",
          "length": "1912",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-2-1-advanced_sed_hold_space_and_negation-110317-PGM.00_31_39_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-2-1-advanced_sed_hold_space_and_negation-110317-PGM.00_31_39_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-6-2-1-advanced_sed_hold_space_and_negation-110317-PGM.00_31_39_18.Still001-sm.jpg",
          "title": "Advanced sed: Hold Space for Negation",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.217\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.217 --> 00:00:07.578\n&gt;&gt; [CROSSTALK]\n[SOUND]\n\n3\n00:00:07.578 --> 00:00:11.491\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.491 --> 00:00:15.961\n&gt;&gt; Greetings everyone and welcome back\nto another exciting episode of ITProTV.\n\n5\n00:00:15.961 --> 00:00:17.562\nI'm your host Justin Dennison and\n\n6\n00:00:17.562 --> 00:00:20.541\nwe're continuing on in our advanced\nshell scripting series and\n\n7\n00:00:20.541 --> 00:00:24.075\nwell we're bringing back some more sed,\nadvanced sed in particular.\n\n8\n00:00:24.075 --> 00:00:25.515\nYou asked for it, we got it.\n\n9\n00:00:25.515 --> 00:00:28.092\nAnd luckily we have an expert in\nthe studio today with us to help us\n\n10\n00:00:28.092 --> 00:00:30.162\nalong in that very endeavor,\nMr. Daniel Lowrie.\n\n11\n00:00:30.162 --> 00:00:31.043\nHow we doing here today Daniel?\n\n12\n00:00:31.043 --> 00:00:32.095\n&gt;&gt; I'm doing great, Justin.\n\n13\n00:00:32.095 --> 00:00:35.790\nI'm a little taken aback you keep\nusing that word expert like it's,\n\n14\n00:00:35.790 --> 00:00:37.890\nyou just throw that around,\nI wouldn't go that far.\n\n15\n00:00:37.890 --> 00:00:39.395\nBut I do know a little bit about sed.\n\n16\n00:00:39.395 --> 00:00:42.647\nAnd hopefully after this episode you'll\nknow a little bit more about sed.\n\n17\n00:00:42.647 --> 00:00:44.213\nThat's the goal anyway.\n\n18\n00:00:44.213 --> 00:00:47.790\nToday we are gonna be discussing\ntwo interesting concepts.\n\n19\n00:00:47.790 --> 00:00:50.006\nI couldn't really find a good place to,\n\n20\n00:00:50.006 --> 00:00:54.060\nI didn't think it was worth just one\nshow each so I slapped them together.\n\n21\n00:00:54.060 --> 00:00:56.220\nWhat the heck, chocolate and\npeanut butter it's always a good time.\n\n22\n00:00:56.220 --> 00:01:00.847\nAnd it's gonna be a hold space and\ncommand negation, okay?\n\n23\n00:01:00.847 --> 00:01:03.061\nWe're gonna start with hold space and\n\n24\n00:01:03.061 --> 00:01:07.638\nthen we'll segue right real smooth with\nno real segue into command negation.\n\n25\n00:01:07.638 --> 00:01:09.866\nIt all works together\nas one big happy unit.\n\n26\n00:01:09.866 --> 00:01:13.000\nSo hey, what the heck you gonna do, right?\n\n27\n00:01:13.000 --> 00:01:16.000\nSo when I say command space, hopefully,\n\n28\n00:01:16.000 --> 00:01:20.890\nyou're going hold on, haven't we been\nworking with some sort of space already?\n\n29\n00:01:20.890 --> 00:01:22.270\nAnd you're right, right?\n\n30\n00:01:22.270 --> 00:01:24.604\nWe've looked at the pattern space.\n\n31\n00:01:24.604 --> 00:01:27.922\nSo when you fire off sed it\nlooks at the input file or\n\n32\n00:01:27.922 --> 00:01:33.710\nwhatever you've shoveled into it, it takes\nthat in and works it as the pattern space.\n\n33\n00:01:33.710 --> 00:01:38.590\nRemember we talked about the idea of\na conveyor belt is moving along and\n\n34\n00:01:38.590 --> 00:01:42.430\nwe're picking up smolded spoons that\nwe have to remove from the molding,\n\n35\n00:01:42.430 --> 00:01:43.950\nput it in the box, and move it along.\n\n36\n00:01:43.950 --> 00:01:45.200\nAnd that's our pattern space.\n\n37\n00:01:45.200 --> 00:01:48.460\nThe thing that's in front of us that\nwe're immediately working with.\n\n38\n00:01:48.460 --> 00:01:50.400\nThat's sed, right?\n\n39\n00:01:50.400 --> 00:01:53.930\nIt's moving that conveyor and whatever\ngets right in front of us once we're done\n\n40\n00:01:53.930 --> 00:01:57.070\nwith it and we shove it along and the next\nthing moves into place and on we go.\n\n41\n00:01:57.070 --> 00:01:59.280\nIt's a queue, right?\n\n42\n00:01:59.280 --> 00:02:04.060\nWell, hold space is something moves\ninto my pattern space and I can go,\n\n43\n00:02:05.730 --> 00:02:09.410\nI like this, I think I see\nsomething coming down the line and\n\n44\n00:02:09.410 --> 00:02:11.880\nI want to be able to work with this and\nthat together.\n\n45\n00:02:11.880 --> 00:02:15.624\nSo you know what I'm gonna do,\nI'm gonna put this over here,\n\n46\n00:02:15.624 --> 00:02:17.431\nI'm gonna hold it for later.\n\n47\n00:02:17.431 --> 00:02:21.120\nAnd I can do that in a couple of different\nways, but basically, that's the idea.\n\n48\n00:02:21.120 --> 00:02:25.290\nI'm holding it to the side not doing\nanything, it's just sitting there, so\n\n49\n00:02:25.290 --> 00:02:28.850\nthat when something else comes down the\nline that I know that I wanna work with,\n\n50\n00:02:28.850 --> 00:02:30.750\nI can pull it back out, right?\n\n51\n00:02:31.860 --> 00:02:32.430\nVery interesting.\n\n52\n00:02:32.430 --> 00:02:37.360\nNow, that might be immediate or that might\nbe way down the road, but I have that\n\n53\n00:02:37.360 --> 00:02:41.820\nspace available over here to the side and\nthat's what's called the hold space.\n\n54\n00:02:41.820 --> 00:02:44.870\nSo when I'm working with a hold space\nI'm basically saying I need this for\n\n55\n00:02:44.870 --> 00:02:49.120\nlater, and I'll then continue\nto work in the pattern space.\n\n56\n00:02:49.120 --> 00:02:51.371\nSo they're two separate areas.\n\n57\n00:02:51.371 --> 00:02:55.973\nNow, there's a couple of different ways in\nwhich we can deal with the hold space and\n\n58\n00:02:55.973 --> 00:02:58.280\nthe pattern space together.\n\n59\n00:02:58.280 --> 00:03:02.100\nAnd we have to understand those things so\nthat we can use them and\n\n60\n00:03:02.100 --> 00:03:03.680\nutilize them later down the run.\n\n61\n00:03:03.680 --> 00:03:04.370\nSo let's do that.\n\n62\n00:03:04.370 --> 00:03:09.640\nI've got a file I've created that kinda\ndefines the different ways in which we can\n\n63\n00:03:09.640 --> 00:03:12.880\nwork with the hold space and\nthe pattern space together, okay?\n\n64\n00:03:12.880 --> 00:03:14.580\nLet's jump to the computer,\nlet's open a file.\n\n65\n00:03:15.830 --> 00:03:19.350\nI will cat this, hold space,\nwait a sec, holdSpace.\n\n66\n00:03:19.350 --> 00:03:22.670\nThere we go, holdSpaceCommands.txt.\n\n67\n00:03:22.670 --> 00:03:25.914\nAnd we have these commands, right?\n\n68\n00:03:25.914 --> 00:03:28.712\nThe arguments or options or\nwhatever you wanna call them.\n\n69\n00:03:28.712 --> 00:03:32.082\nWe've got lower case h,\nwe've got upper case H,\n\n70\n00:03:32.082 --> 00:03:36.510\nwe've got lower case g,\nwe've got upper G and we have x, okay?\n\n71\n00:03:36.510 --> 00:03:38.192\nThey all do something different.\n\n72\n00:03:38.192 --> 00:03:43.021\nh copies the pattern space\ninto the hold space, okay?\n\n73\n00:03:43.021 --> 00:03:47.767\nSo if I got my spoon in front of me, I\nbasically, for the lack of a better term,\n\n74\n00:03:47.767 --> 00:03:52.732\nmake a 3D printer of the exact object that\nI have and I stick in the hold space, and\n\n75\n00:03:52.732 --> 00:03:57.150\nthen I can do wherever with what's\nstill in the pattern space, right?\n\n76\n00:03:57.150 --> 00:03:59.110\nMove it along, modify, whatever, but\n\n77\n00:03:59.110 --> 00:04:02.700\nI've got a pristine copy of it\nover in the hold space, okay?\n\n78\n00:04:03.890 --> 00:04:07.450\nCapital H appends the pattern\nspace to the hold space.\n\n79\n00:04:08.592 --> 00:04:10.643\nOkay, so I've already got\nsomething in the hold space or\n\n80\n00:04:10.643 --> 00:04:11.978\nI've got nothing in the hold space.\n\n81\n00:04:11.978 --> 00:04:15.522\nBut whatever's there, I'm gonna take\nwhatever's in the pattern space and\n\n82\n00:04:15.522 --> 00:04:17.370\nI'm gonna append it to the hold space.\n\n83\n00:04:17.370 --> 00:04:19.900\nSo if I already have something\nin the hold space, I'm gonna\n\n84\n00:04:19.900 --> 00:04:22.770\nto take what's in the pattern space and\nI'm gonna append it to the end of it.\n\n85\n00:04:22.770 --> 00:04:26.255\nOkay, so now it becomes one\nbig long string of text or\n\n86\n00:04:26.255 --> 00:04:29.450\none spoon with two ends, or\nhowever you wanna look at it, right?\n\n87\n00:04:30.880 --> 00:04:33.910\nLower case g copies hold\nspace to pattern space,\n\n88\n00:04:33.910 --> 00:04:35.960\nso now we're going the opposite way.\n\n89\n00:04:35.960 --> 00:04:40.280\nNow I wanna take from the hold space,\nput it into the pattern space, right?\n\n90\n00:04:40.280 --> 00:04:41.730\nAnd that's a copy.\n\n91\n00:04:41.730 --> 00:04:45.210\nI'm saying this is now\npattern space materials.\n\n92\n00:04:45.210 --> 00:04:49.244\nSo whatever's in the pattern space now is\nnow what was ever in the hold space, okay?\n\n93\n00:04:49.244 --> 00:04:54.140\nAnd then capital G append the hold\nspace to the pattern space.\n\n94\n00:04:54.140 --> 00:04:56.690\nSo I've got something in the pattern\nspace, I've been holding something in\n\n95\n00:04:56.690 --> 00:04:59.620\nthe hold space, I'm going to pull\nit out of the hold space and\n\n96\n00:04:59.620 --> 00:05:03.310\nappend it to the pattern space so\nit becomes one big string, right?\n\n97\n00:05:03.310 --> 00:05:06.790\nAnd then, of course,\nthe great exchange, which is the x.\n\n98\n00:05:06.790 --> 00:05:08.970\nI want to take what's in\nthe pattern space and\n\n99\n00:05:08.970 --> 00:05:11.630\nswap it out with what's in the hold space.\n\n100\n00:05:11.630 --> 00:05:12.830\nPut pattern space in hold space,\n\n101\n00:05:12.830 --> 00:05:15.440\nput hold space in pattern space,\ndo it at the exact same time.\n\n102\n00:05:15.440 --> 00:05:17.880\nAnd now we've done that exchange.\n\n103\n00:05:17.880 --> 00:05:20.530\nHopefully, these are pretty simple ideas,\nand\n\n104\n00:05:20.530 --> 00:05:23.182\nactually it does work out\nusually pretty simply.\n\n105\n00:05:23.182 --> 00:05:26.173\nIt's keeping logic in your\nmind straight to make it\n\n106\n00:05:26.173 --> 00:05:28.268\ndo exactly what it is you want to do.\n\n107\n00:05:28.268 --> 00:05:28.906\n&gt;&gt; Now Daniel,\n\n108\n00:05:28.906 --> 00:05:32.890\nI do have a quick question about this\ncopy kind of terminology versus append.\n\n109\n00:05:32.890 --> 00:05:35.747\nIf I'm copying, let's take lowercase h.\n\n110\n00:05:35.747 --> 00:05:38.700\nI copy the pattern space\nto the hold space.\n\n111\n00:05:38.700 --> 00:05:43.500\nIf there were something already\nexisting in the hold space and I copy,\n\n112\n00:05:43.500 --> 00:05:49.140\ndoes that override the existing thing in,\nwhatever that thing is, in the hold space?\n\n113\n00:05:49.140 --> 00:05:51.686\n&gt;&gt; I'm pretty sure that's exactly\nwhat they mean when they say copy,\n\n114\n00:05:51.686 --> 00:05:55.160\nthat we are nixing everything\nthat's on the pattern space,\n\n115\n00:05:55.160 --> 00:05:57.960\nthis becomes the pattern space,\nI copy it into the pattern space.\n\n116\n00:05:58.980 --> 00:06:00.520\nThat's what I want there.\n\n117\n00:06:00.520 --> 00:06:02.793\nBecause if it was adding it to it,\n\n118\n00:06:02.793 --> 00:06:06.540\nthen I think they would have\nused different language.\n\n119\n00:06:06.540 --> 00:06:11.318\nI'm just afraid to speak cuz I'm not\na 100% sure that it does that every time,\n\n120\n00:06:11.318 --> 00:06:14.850\nbut I think for the majority of the time,\nif not all the time,\n\n121\n00:06:14.850 --> 00:06:16.810\nthat's exactly what's doing.\n\n122\n00:06:16.810 --> 00:06:21.431\nI'm copying what's in the pattern or\nthe hold space with our you went h.\n\n123\n00:06:21.431 --> 00:06:22.250\n&gt;&gt; Yeah, I went-\n&gt;&gt; So,\n\n124\n00:06:22.250 --> 00:06:26.320\nyeah I'm copying what's in the pattern\nspace into the hold space.\n\n125\n00:06:26.320 --> 00:06:28.578\nSo if there's something in there\nalready [SOUND], that's gone.\n\n126\n00:06:28.578 --> 00:06:32.378\nAnd now, we've taken whatever was in the\npattern space and that's what's in there,\n\n127\n00:06:32.378 --> 00:06:32.907\nall right?\n\n128\n00:06:32.907 --> 00:06:37.239\n&gt;&gt; So it's kind of like we have\na perfectly sized table as our hold space\n\n129\n00:06:37.239 --> 00:06:39.373\nand it only holds a single spoon.\n\n130\n00:06:39.373 --> 00:06:43.021\nSo if I want another spoon in there I\nkinda just gotta rake it off a little bit,\n\n131\n00:06:43.021 --> 00:06:43.884\nin this context.\n\n132\n00:06:43.884 --> 00:06:48.280\n&gt;&gt; Yeah in this context,\nbecause appending I can put two spoons in.\n\n133\n00:06:48.280 --> 00:06:52.037\n&gt;&gt; A follow up question was appending is\nwell I already have so I'm gonna [SOUND]\n\n134\n00:06:52.037 --> 00:06:52.640\n&gt;&gt; Yes.\n\n135\n00:06:52.640 --> 00:06:56.448\n&gt;&gt; And then, now my table magic, I can't\nhelp but think of like a magic trick or\n\n136\n00:06:56.448 --> 00:06:57.099\nsomething.\n\n137\n00:06:57.099 --> 00:06:58.539\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n138\n00:06:58.539 --> 00:06:59.359\n&gt;&gt; See there's only one,\n\n139\n00:06:59.359 --> 00:07:00.837\n[SOUND] now there's two cards there sorry.\n\n140\n00:07:00.837 --> 00:07:01.512\n&gt;&gt; Yeah.\n\n141\n00:07:01.512 --> 00:07:04.007\n&gt;&gt; So\ncopying overwrites whatever is there,\n\n142\n00:07:04.007 --> 00:07:06.660\nwhether whatever direction we're going.\n\n143\n00:07:06.660 --> 00:07:08.005\n&gt;&gt; Correct.\n&gt;&gt; And then appending is,\n\n144\n00:07:08.005 --> 00:07:10.351\nwhatever is there, I'm gonna,\nI'm gonna smash on to the end.\n\n145\n00:07:10.351 --> 00:07:11.110\n&gt;&gt; There you go,\n\n146\n00:07:11.110 --> 00:07:15.112\nI'm gonna weld these two things\ntogether and now it's one thing, right?\n\n147\n00:07:15.112 --> 00:07:18.626\nSo you got two pieces, you got two spoons,\nyou take a little treat or\n\n148\n00:07:18.626 --> 00:07:23.007\nyour plastic welder, put them together,\nlook at that, there's some superglue,\n\n149\n00:07:23.007 --> 00:07:26.300\nput them together, and\nnow it's one item, okay?\n\n150\n00:07:26.300 --> 00:07:28.010\nThat's the idea.\n\n151\n00:07:28.010 --> 00:07:31.590\nAll right, and then, of course,\nexchange is just doing the sweep swap.\n\n152\n00:07:31.590 --> 00:07:33.520\nNow, how do we implement this?\n\n153\n00:07:33.520 --> 00:07:34.326\nHow do we work with this?\n\n154\n00:07:34.326 --> 00:07:37.260\nThere's some different\nways which we can do this.\n\n155\n00:07:38.410 --> 00:07:40.190\nLet's play around with this.\n\n156\n00:07:40.190 --> 00:07:43.094\nI've got a holding.txt file.\n\n157\n00:07:43.094 --> 00:07:46.111\nLet's cat that, cat holding.txt.\n\n158\n00:07:46.111 --> 00:07:49.090\nWe've seen this before, right?\n\n159\n00:07:49.090 --> 00:07:50.045\nThis is the first line of text.\n\n160\n00:07:50.045 --> 00:07:51.263\nThis is the second line of text.\n\n161\n00:07:51.263 --> 00:07:54.505\nThis is the third line of text,\nfourth, fifth, and so on.\n\n162\n00:07:54.505 --> 00:07:58.547\nBut what if I wanted to let's\nsay print the first and\n\n163\n00:07:58.547 --> 00:08:02.976\nsecond line only, and\nlet's do that in reverse order.\n\n164\n00:08:02.976 --> 00:08:08.573\nAll right, I could use the hold space\nto do some rearranging of things so\n\n165\n00:08:08.573 --> 00:08:11.920\nthat I can make that happen, right?\n\n166\n00:08:11.920 --> 00:08:16.964\nAll I would have to do is sed -n, cuz I\ndon't wanna print any of the other lines,\n\n167\n00:08:16.964 --> 00:08:22.180\nremember, I wanna print line one and\nline two only, and in reverse order, okay?\n\n168\n00:08:23.280 --> 00:08:28.150\nSo let's open that up, and\nI will look for, just something common,\n\n169\n00:08:28.150 --> 00:08:31.810\nbasically a regular expression,\nso that it can hit on something.\n\n170\n00:08:31.810 --> 00:08:35.340\nGuess what,\nI have unique strings in each one\n\n171\n00:08:35.340 --> 00:08:37.670\nof these lines that I can do that with.\n\n172\n00:08:37.670 --> 00:08:43.557\nI'll say first, and then we will\ndo the open curly brace like that,\n\n173\n00:08:43.557 --> 00:08:49.551\nand now I can start modifying or\nplaying around with the hold space and\n\n174\n00:08:49.551 --> 00:08:53.005\nthe pattern space, doing stuff to it.\n\n175\n00:08:53.005 --> 00:08:58.340\nSo the first thing I wanna do is,\nI wanna reverse the order,\n\n176\n00:08:58.340 --> 00:09:00.500\nright, so what do I need to do?\n\n177\n00:09:00.500 --> 00:09:05.400\nI need to get the second line in\nfront of the first line, okay.\n\n178\n00:09:05.400 --> 00:09:07.565\nSo in my mind what I'm gonna do is,\n\n179\n00:09:07.565 --> 00:09:12.371\nI'm going to copy the first line into\nthe hold space and get it out of the way.\n\n180\n00:09:12.371 --> 00:09:15.660\nBecause if I go past it, it's already\nbeen processed and done with, right?\n\n181\n00:09:15.660 --> 00:09:20.412\nsed goes line by line, so I need to hold\na copy of it over there in the hold space,\n\n182\n00:09:20.412 --> 00:09:24.968\nso I can do something with it later,\nwhich is put it behind the second line.\n\n183\n00:09:24.968 --> 00:09:27.261\nThen I need to take in the second line,\n\n184\n00:09:27.261 --> 00:09:31.562\nthen I need to append what's in my\nhold space, which is the first line,\n\n185\n00:09:31.562 --> 00:09:36.020\ninto the pattern space at the end\nof the second line, right?\n\n186\n00:09:36.020 --> 00:09:39.810\nAnd then we should be able to print\nit out and be able to rock and\n\n187\n00:09:39.810 --> 00:09:41.600\nroll like so, okay?\n\n188\n00:09:41.600 --> 00:09:45.430\nLet's do this, let's see if we can\ndo this, so if I want to append, or\n\n189\n00:09:45.430 --> 00:09:50.020\nif I wanna copy the hold space,\nI do h; I've done that.\n\n190\n00:09:50.020 --> 00:09:53.890\nSo the first line's gonna come in\nbecause it hit on first, right.\n\n191\n00:09:55.050 --> 00:09:56.500\nNext thing we're gonna do is,\n\n192\n00:09:56.500 --> 00:10:01.570\nwe are going to, let's see here,\nwe wanna go to the next line, right.\n\n193\n00:10:01.570 --> 00:10:04.383\nBecause it's still kind of like,\nwell, what do you wanna do?\n\n194\n00:10:04.383 --> 00:10:08.020\nSo, I wanna go to the next line, so I'm\ngonna do a lowercase n, single line next.\n\n195\n00:10:08.020 --> 00:10:12.280\nWhat does the single line next do,\nit doesn't append,\n\n196\n00:10:12.280 --> 00:10:17.341\nit copies the next line into\nthe pattern space, okay?\n\n197\n00:10:17.341 --> 00:10:22.610\nSo now, this is the second line of text,\nshould be in the pattern space, okay.\n\n198\n00:10:22.610 --> 00:10:29.418\nNext thing I wanna do is, well, I wanna\nprint that, right, I wanna print line two.\n\n199\n00:10:29.418 --> 00:10:31.090\nSo line two is in the pattern space,\n\n200\n00:10:31.090 --> 00:10:33.950\nso print that, so lowercase p,\nsingle line print.\n\n201\n00:10:35.200 --> 00:10:39.558\nThen I wanna print what's in\nthe hold space, right, so\n\n202\n00:10:39.558 --> 00:10:46.330\nnow I need to bring what's in the hold\nspace into the pattern space and print it.\n\n203\n00:10:46.330 --> 00:10:49.730\nSo I should be able to,\nlet's see here, copy so\n\n204\n00:10:49.730 --> 00:10:53.728\nI'll do a lowercase g, and\nthen I will print yet again.\n\n205\n00:10:53.728 --> 00:10:58.580\nAnd I think that should be enough\nto get it done, making sure.\n\n206\n00:10:58.580 --> 00:11:05.953\nAnd you know what, I did not go into\nthe hold space here, I think I need an h.\n\n207\n00:11:05.953 --> 00:11:09.190\nNo, I think that's right, I think I'm\ngood, I think we've worked out the logic.\n\n208\n00:11:09.190 --> 00:11:13.426\nAnd that's, again, that's were\nthe difficulty with this can be, is going,\n\n209\n00:11:13.426 --> 00:11:16.587\nokay, and you kinda mentally\nwork a diagram and go, okay,\n\n210\n00:11:16.587 --> 00:11:19.135\nI'm gonna have this here and\nI wanna move this.\n\n211\n00:11:19.135 --> 00:11:21.910\nAnd the h does that,\nthe m does this, and the p does this.\n\n212\n00:11:21.910 --> 00:11:24.991\nAnd that can be mentally taxing\njust to get the logic right, but\n\n213\n00:11:24.991 --> 00:11:27.270\nonce you get it going,\nit should be all right.\n\n214\n00:11:27.270 --> 00:11:31.128\nI think I've got it down here,\nlet's give it a whirl.\n\n215\n00:11:32.976 --> 00:11:37.955\nSo I'm taking this, I'm copying this, I'm\njust making sure that everything first and\n\n216\n00:11:37.955 --> 00:11:39.850\nsecond, I think I've got it right.\n\n217\n00:11:39.850 --> 00:11:43.954\nI'm second guessing myself,\nwhat the heck, let's fire it off and\n\n218\n00:11:43.954 --> 00:11:47.345\nsee what happens,\nthis is holding.txt, there we go.\n\n219\n00:11:47.345 --> 00:11:51.220\nHey look, it did work, so\nall my logic was right.\n\n220\n00:11:51.220 --> 00:11:55.740\nI copied the first line of the hold space,\nmoved the second line into\n\n221\n00:11:55.740 --> 00:11:59.910\nthe pattern space, printed it,\nand then what did I do?\n\n222\n00:11:59.910 --> 00:12:03.255\nI copied what was in the hold space into\nthe pattern space and printed that, so\n\n223\n00:12:03.255 --> 00:12:05.190\nvery, very simple stuff.\n\n224\n00:12:05.190 --> 00:12:06.738\n&gt;&gt; Now Daniel,\nI do have a quick question about this.\n\n225\n00:12:06.738 --> 00:12:11.460\nThis actually kind of just flew up into\nmy brain while you were doing this.\n\n226\n00:12:11.460 --> 00:12:16.247\nThat lowercase g, we're now using this\nwith hold space pattern space shenanigans.\n\n227\n00:12:16.247 --> 00:12:20.450\nBut I've seen that lowercase g used\nin a different context and said, so\n\n228\n00:12:20.450 --> 00:12:24.092\nshould we be aware that some of\nthese may be context specific,\n\n229\n00:12:24.092 --> 00:12:27.261\nregarding what operations\nwe're doing within sed?\n\n230\n00:12:27.261 --> 00:12:28.701\n&gt;&gt; Yeah, that's a good catch, and\n\n231\n00:12:28.701 --> 00:12:32.360\nthis ain't the first time we've seen\nsomething like this, he's right.\n\n232\n00:12:32.360 --> 00:12:39.020\nRemember, lowercase g is also a flag for\nsubstitution, it's a substitution flag.\n\n233\n00:12:39.020 --> 00:12:44.304\nAnd that could confuse, you especially\nif you were working with hold space,\n\n234\n00:12:44.304 --> 00:12:48.043\npattern space arguments at\nthe end of a substitution,\n\n235\n00:12:48.043 --> 00:12:51.475\nright, so\nyou might get a little confused there.\n\n236\n00:12:51.475 --> 00:12:55.497\nIf it's tagged on the end of\na substitution, that's the flag,\n\n237\n00:12:55.497 --> 00:12:59.295\nonce you hit the semicolon,\nthen you're doing hold space,\n\n238\n00:12:59.295 --> 00:13:04.870\npattern space stuff, right, moving,\nappending, copying, whatever.\n\n239\n00:13:04.870 --> 00:13:09.530\nSo just keep that in mind, lowercase g\nat the end of a substitution argument,\n\n240\n00:13:09.530 --> 00:13:13.450\nthe very first argument, that is going\nto be a substitution flag, okay?\n\n241\n00:13:13.450 --> 00:13:17.980\nIf it's a lowercase g anywhere else,\nat least as far as I know, as far as I can\n\n242\n00:13:17.980 --> 00:13:24.271\nthink of, that's going to be the hold\nspace, copy hold space into pattern space.\n\n243\n00:13:25.600 --> 00:13:29.600\nSo yes, it's a good catch,\nwe also saw it with n you can do a -n,\n\n244\n00:13:29.600 --> 00:13:32.480\nthat says don't print,\nwe see that right here.\n\n245\n00:13:33.530 --> 00:13:37.410\nIt's got a dash in front,\nso there's a context to it,\n\n246\n00:13:37.410 --> 00:13:41.900\nwe also see a lowercase n here,\nwhich does not mean the same thing as -n.\n\n247\n00:13:41.900 --> 00:13:46.006\nSo yeah, there's some duplicate commands\ngoing on in sed that you do need to be\n\n248\n00:13:46.006 --> 00:13:47.075\non the lookout for.\n\n249\n00:13:47.075 --> 00:13:48.988\nOtherwise, it could be a bit confusing and\n\n250\n00:13:48.988 --> 00:13:52.510\ntake you down the wrong path, so just\nbear that in mind, good catch, Justin.\n\n251\n00:13:53.780 --> 00:13:58.700\nAll right, I think that's a pretty good\nexample of working with hold space and\n\n252\n00:13:58.700 --> 00:14:02.890\npattern space, and flip flopping, swip\nswapping, having a good time doing that.\n\n253\n00:14:02.890 --> 00:14:05.260\nLet's talk about command negation, right,\n\n254\n00:14:05.260 --> 00:14:10.070\nsometimes I think of it like\nwhitelisting or blacklisting,\n\n255\n00:14:10.070 --> 00:14:14.880\ndepending on what\nperspective you have right?\n\n256\n00:14:14.880 --> 00:14:16.390\nSometimes I have a command, but\n\n257\n00:14:16.390 --> 00:14:20.730\nsometimes I don't want the command to run\nif this condition is true, basically.\n\n258\n00:14:20.730 --> 00:14:25.640\nRight, if it's this, then don't do that,\nand everywhere else, do it, right?\n\n259\n00:14:25.640 --> 00:14:31.110\nSo the cool thing is, I can do negation,\ndon't do this normally.\n\n260\n00:14:31.110 --> 00:14:34.870\nIf it were normally run here,\ndon't run it, or\n\n261\n00:14:34.870 --> 00:14:37.730\ndo the opposite of it,\nkind of idea, right?\n\n262\n00:14:37.730 --> 00:14:42.170\nAnd you do it with the exclamation points,\nand\n\n263\n00:14:42.170 --> 00:14:45.200\nwe've actually kinda threw\nout our series here.\n\n264\n00:14:45.200 --> 00:14:48.620\nI've seen negation in that\nway quite a few times, and\n\n265\n00:14:48.620 --> 00:14:51.970\nworking with sed, they give us\nthat same type of functionality.\n\n266\n00:14:51.970 --> 00:14:55.666\nExclamation point is saying,\nyou know what, at this point and\n\n267\n00:14:55.666 --> 00:14:57.419\ntime don't do that, right?\n\n268\n00:14:57.419 --> 00:15:02.606\nSo maybe at the end of the line or\nat the beginning of a line, you find this,\n\n269\n00:15:02.606 --> 00:15:07.561\nbecause I don't want this operation\nto occur at the beginning or end.\n\n270\n00:15:07.561 --> 00:15:14.186\nThen I'll have to make that\nexplicit in my command, all right?\n\n271\n00:15:14.186 --> 00:15:17.730\nLet me show you what I mean here,\nlet me see here, let me clear this.\n\n272\n00:15:17.730 --> 00:15:21.585\nI've got guide two, right, or actually,\n\n273\n00:15:21.585 --> 00:15:26.901\nwe still have holding,\nlet's mess with the holding thing,\n\n274\n00:15:26.901 --> 00:15:31.189\nso I will reverse the order\nof the holding files.\n\n275\n00:15:31.189 --> 00:15:36.200\nSo if I cat holding.txt, there's the,\nyou know what I really wanna do?\n\n276\n00:15:36.200 --> 00:15:41.850\nI wanna go the opposite way, okay, so\nI've got myself a little sed worked up.\n\n277\n00:15:41.850 --> 00:15:46.111\nSo we will say sed,\nwe will do -n, of course, and\n\n278\n00:15:46.111 --> 00:15:53.332\nthen we will start the process of changing\nthe order, and I'll show you what I mean.\n\n279\n00:15:53.332 --> 00:16:00.026\nHere comes some negation, 1 and\nthen the exclamation point,\n\n280\n00:16:00.026 --> 00:16:04.949\nright, so on the first line,\ndon't Do this,\n\n281\n00:16:04.949 --> 00:16:08.631\nright, so what was the capital G?\n\n282\n00:16:08.631 --> 00:16:15.360\nThe capital G is append hold space\nto the pattern space, right?\n\n283\n00:16:15.360 --> 00:16:18.110\nSo don't do that if it's line one, or\n\n284\n00:16:18.110 --> 00:16:21.220\nelse it will do that, okay,\nso that'll have to ring true.\n\n285\n00:16:22.810 --> 00:16:26.310\nAnd then I will copy to the hold space,\nand\n\n286\n00:16:26.310 --> 00:16:31.518\nthen I will print on dollar sign.\n\n287\n00:16:31.518 --> 00:16:34.580\nI said dollar sign right,\n\n288\n00:16:34.580 --> 00:16:37.540\ndollar sign regular expression,\nthink regular expression.\n\n289\n00:16:37.540 --> 00:16:42.310\nWhat's the dollar sign, last,\nright, on the last line.\n\n290\n00:16:42.310 --> 00:16:46.850\nSo when all this is said and done, you hit\nthe last line, I want you to print, right.\n\n291\n00:16:46.850 --> 00:16:49.640\nSo that's what we're gonna do,\nit's a pretty simple command, actually,\n\n292\n00:16:49.640 --> 00:16:53.450\nthat's all there is to it, just holding.\n\n293\n00:16:53.450 --> 00:16:58.664\nSo let's, let me finish that out,\nlet's look at this really quickly and\n\n294\n00:16:58.664 --> 00:17:02.785\nwe'll kind of dissect this with\nthis text here in front of us.\n\n295\n00:17:02.785 --> 00:17:06.385\nSo this is the first line of text,\nso what's gonna happen?\n\n296\n00:17:06.385 --> 00:17:12.372\nOn the first line, don't append hold\nspace to pattern space, right, why?\n\n297\n00:17:12.372 --> 00:17:14.680\nCuz there's nothing in\nthe hold space at this point,\n\n298\n00:17:14.680 --> 00:17:18.400\nso you'd be copying nothing\ninto the pattern space, and\n\n299\n00:17:18.400 --> 00:17:20.940\nthen going to the next line, so\nyou would actually miss the first line.\n\n300\n00:17:22.290 --> 00:17:26.920\nRight, so these are the kind of things\nthat crop up from time to time, and\n\n301\n00:17:26.920 --> 00:17:30.800\nwill wig out your sid command, okay?\n\n302\n00:17:30.800 --> 00:17:33.550\nThen I've got h, so if it's not on\nthe first line, it's gonna jump to h.\n\n303\n00:17:33.550 --> 00:17:36.790\nSo once it does this, so\nit's not gonna do that,\n\n304\n00:17:36.790 --> 00:17:39.350\nit's gonna put that in the pattern space.\n\n305\n00:17:39.350 --> 00:17:42.610\nAnd actually, it's gonna do this,\nsince it's on the first line,\n\n306\n00:17:42.610 --> 00:17:44.590\nit's gonna jump to copy to hold space.\n\n307\n00:17:44.590 --> 00:17:46.090\nIt's gonna take the first line of text,\n\n308\n00:17:46.090 --> 00:17:48.880\nit's gonna copy it to the hold space,\ngreat.\n\n309\n00:17:48.880 --> 00:17:53.840\nIt's not the last line of text, so\nit's just gonna recycle, go back through,\n\n310\n00:17:53.840 --> 00:17:55.760\ngive me the next line of text.\n\n311\n00:17:55.760 --> 00:17:59.720\nSo next line of text, it's not\nthe first line, so what's it gonna do?\n\n312\n00:18:00.750 --> 00:18:05.860\nWell, it's going to append the hold\nspace to the pattern space,\n\n313\n00:18:07.010 --> 00:18:08.910\nso what's in the pattern space right now?\n\n314\n00:18:08.910 --> 00:18:11.760\nAs of this point in time,\nit's line number two, which is,\n\n315\n00:18:11.760 --> 00:18:13.230\nthis is the second line of text.\n\n316\n00:18:13.230 --> 00:18:16.600\nNow it's gonna append the hold\nspace to the pattern space,\n\n317\n00:18:16.600 --> 00:18:20.870\nwhich is gonna say this is the second line\nof text, this is the first line of text.\n\n318\n00:18:20.870 --> 00:18:26.490\nAnd then it's going to copy that\ninto the hold space, making sense?\n\n319\n00:18:26.490 --> 00:18:29.001\nHopefully you're following along,\nfollow the bouncing ball, right?\n\n320\n00:18:29.001 --> 00:18:33.627\n[LAUGH] So now this is the second line,\nthis is the first line,\n\n321\n00:18:33.627 --> 00:18:35.320\nis in the hold space.\n\n322\n00:18:35.320 --> 00:18:40.640\nIt's still not the last line of text,\nso we're not printing, go back.\n\n323\n00:18:40.640 --> 00:18:47.410\nIt's not the first line, it is\nthe third line, so what it's gonna do?\n\n324\n00:18:47.410 --> 00:18:51.310\nIt's gonna append from the hold\nspace into the pattern space, so\n\n325\n00:18:51.310 --> 00:18:53.910\nit slurped line three\ninto the pattern space.\n\n326\n00:18:53.910 --> 00:18:57.900\nPends, this is line two, this is line one,\nonto, this is line three.\n\n327\n00:18:57.900 --> 00:19:01.648\nSo now, and them copies that with\nthe h back into the hold space.\n\n328\n00:19:01.648 --> 00:19:05.070\nAll right, so now we should say,\nthis is line three, this is line two,\n\n329\n00:19:05.070 --> 00:19:05.945\nthis is line one.\n\n330\n00:19:05.945 --> 00:19:10.390\nWe're gonna do that again for line four,\nline five, the empty line of text, and\n\n331\n00:19:10.390 --> 00:19:10.970\nend of line.\n\n332\n00:19:10.970 --> 00:19:17.147\nAnd since end of text line,\nis the last line, what does it do?\n\n333\n00:19:17.147 --> 00:19:20.464\nIt prints, and we get reverse order,\nwe hit that, and there we go,\n\n334\n00:19:20.464 --> 00:19:21.760\nwe get the reverse order.\n\n335\n00:19:21.760 --> 00:19:26.080\nSo hopefully that made sense, we used\nnegation at the beginning of the line\n\n336\n00:19:26.080 --> 00:19:32.200\nthere, all to show you how negation\ncan work for certain specific reasons.\n\n337\n00:19:32.200 --> 00:19:37.410\nLet's go back to guide two, remember,\nI said I'm gonna show you guys how to,\n\n338\n00:19:37.410 --> 00:19:41.160\nnow that we've learned a little bit more,\nwe should be able to get all of guide two.\n\n339\n00:19:41.160 --> 00:19:44.020\nLet me refresh your memory\non guide two here, so\n\n340\n00:19:44.020 --> 00:19:47.480\nlet me cat guide, not guild, guide two.\n\n341\n00:19:48.950 --> 00:19:54.200\nSo we've got all this text in here,\nyes, it's a crazy, crazy file,\n\n342\n00:19:54.200 --> 00:19:59.730\nbut I wanted to have all sorts of ways\nin which it might mess up, right?\n\n343\n00:19:59.730 --> 00:20:03.380\nSo I've got network administrator\nis what we're keying on,\n\n344\n00:20:03.380 --> 00:20:07.260\nwe wanna substitute that\nout with system user, okay?\n\n345\n00:20:08.480 --> 00:20:11.830\nBut we got network administrator on,\nseparated by lines,\n\n346\n00:20:11.830 --> 00:20:16.830\nwe've got network administrator\nall together, down here\n\n347\n00:20:16.830 --> 00:20:21.910\nwe've got two network administrators on\none line, all sorts of craziness, right?\n\n348\n00:20:21.910 --> 00:20:25.590\nWe saw that the way we had\nformed our sid command before\n\n349\n00:20:25.590 --> 00:20:27.480\nwasn't quite getting everything, right?\n\n350\n00:20:27.480 --> 00:20:30.140\nAnd we need to get everything,\nI wanna get it all.\n\n351\n00:20:31.530 --> 00:20:36.725\nSo what I'm gonna do is, let's take\na look at kinda what we came from,\n\n352\n00:20:36.725 --> 00:20:38.852\nand what we're gonna go to.\n\n353\n00:20:38.852 --> 00:20:43.919\nSo we did sid dollar sign,\nI'm sorry, just an open quote n,\n\n354\n00:20:43.919 --> 00:20:49.060\nsemicolon, and\nthen we did the substitution of network.\n\n355\n00:20:49.060 --> 00:20:53.180\nAnd we liked the space\nthing cuz that was awesome.\n\n356\n00:20:53.180 --> 00:20:58.262\nOops, I cannot do this,\nhere we go, space negate,\n\n357\n00:20:58.262 --> 00:21:06.596\nremember, that little guy right there\nusing that special character class, regex.\n\n358\n00:21:06.596 --> 00:21:10.190\nAnd our cool thing that lets us\nreference it as well, for administrator.\n\n359\n00:21:12.598 --> 00:21:18.055\nAnd then we're moving into,\nwe wanna do the substitution system.\n\n360\n00:21:18.055 --> 00:21:23.572\nI get to reference that with that and\nuse user, I think that's what we had,\n\n361\n00:21:23.572 --> 00:21:27.880\nand then g for catchall,\nright, every instance of that.\n\n362\n00:21:27.880 --> 00:21:35.449\nDon't forget to close it out, I think\nwe're all good, and throw guide2.txt.\n\n363\n00:21:35.449 --> 00:21:40.270\nSo as I fire that off,\nlet's just see what it does, notice again,\n\n364\n00:21:40.270 --> 00:21:44.960\nit gets a lot of them, but we're missing\none here, and we're missing one here.\n\n365\n00:21:47.220 --> 00:21:51.020\nSo we've got to make some changes, and\nnow that we've learned about hold space,\n\n366\n00:21:51.020 --> 00:21:54.040\nwe've learned about the other\nmultiline flags, and\n\n367\n00:21:54.040 --> 00:21:57.190\nnegation, we should be able to\nslurp all the rest of this up.\n\n368\n00:21:57.190 --> 00:22:00.273\n&gt;&gt; I just wanna make sure that I'm\nkeeping content, and I tell you,\n\n369\n00:22:00.273 --> 00:22:02.532\nsome of those things\nare a little mind bending.\n\n370\n00:22:02.532 --> 00:22:05.973\nBut this g is actually the global flag for\nsubstitution,\n\n371\n00:22:05.973 --> 00:22:09.129\nwe haven't actually started\nusing the hold space,\n\n372\n00:22:09.129 --> 00:22:13.235\npattern space, negation, anything,\nto fix this, am I correct?\n\n373\n00:22:13.235 --> 00:22:17.251\n&gt;&gt; That is correct, we're just kind\nof recapping where we left off, so\n\n374\n00:22:17.251 --> 00:22:19.968\nthat we can see where we're gonna go,\nright?\n\n375\n00:22:19.968 --> 00:22:22.443\nNow that we've learned a few more things,\n\n376\n00:22:22.443 --> 00:22:26.310\nwe should be able to finagle\nthis to catch everything.\n\n377\n00:22:26.310 --> 00:22:30.378\nRight, which is what we wanna do,\nno matter how many lines of text it is,\n\n378\n00:22:30.378 --> 00:22:32.806\nor where network administrator shows up.\n\n379\n00:22:32.806 --> 00:22:37.425\nRegardless of some edge case scenario that\nit's got some weird character between them\n\n380\n00:22:37.425 --> 00:22:40.905\nthat we didn't account for, but\ntypical versions of network and\n\n381\n00:22:40.905 --> 00:22:43.590\nadministrator together as a term.\n\n382\n00:22:43.590 --> 00:22:45.940\n&gt;&gt; Now Daniel, we talked about\nthis in a previous episode.\n\n383\n00:22:45.940 --> 00:22:48.670\nI've kinda been waiting to see\nhow this comes to fruition, but\n\n384\n00:22:48.670 --> 00:22:50.180\nI just have a quick question.\n\n385\n00:22:50.180 --> 00:22:52.928\nSo the system user was\nreplaced in a bunch of places.\n\n386\n00:22:52.928 --> 00:22:56.930\nI would have thought the current set\nexpression would have caught all of those.\n\n387\n00:22:56.930 --> 00:23:00.070\nWhy is there still a network\nadministrator there, or\n\n388\n00:23:00.070 --> 00:23:04.746\ndid you kind of give a foreshadowing there\nlike there's a hidden character that\n\n389\n00:23:04.746 --> 00:23:06.306\nwe're not planning for?\n\n390\n00:23:06.306 --> 00:23:09.392\n&gt;&gt; Yeah, that's a really good question,\n\n391\n00:23:09.392 --> 00:23:14.640\nand that's a good place to throw\nin some bonus material for you.\n\n392\n00:23:14.640 --> 00:23:19.470\nYou can take a look at how sid is\ninterpreting what's happening,\n\n393\n00:23:19.470 --> 00:23:21.920\nand it will prove that out for you.\n\n394\n00:23:21.920 --> 00:23:26.213\nIt's a little jumbly, I'm not gonna lie,\nlooks a little freaky.\n\n395\n00:23:26.213 --> 00:23:28.763\nBut once you kinda figure\nout the structure,\n\n396\n00:23:28.763 --> 00:23:32.130\nit should go along with helping\nyou see what's happening.\n\n397\n00:23:32.130 --> 00:23:36.980\nSo if things aren't working,\nyou can throw the l flag, and\n\n398\n00:23:36.980 --> 00:23:44.220\nit will print out how sid is\ninterpreting what you've done, okay?\n\n399\n00:23:44.220 --> 00:23:49.366\nAnd then you can move that around in\ncertain spots, to give you that kind of\n\n400\n00:23:49.366 --> 00:23:54.694\noutput after things have been done or\nbefore things have been done, right?\n\n401\n00:23:54.694 --> 00:23:57.894\nSo what I'll do is I'll\nbring this back up, and\n\n402\n00:23:57.894 --> 00:24:01.903\nI will go back over here behind this g,\nand I'm gonna add l.\n\n403\n00:24:01.903 --> 00:24:04.168\nLike that, see that guy flashing.\n\n404\n00:24:04.168 --> 00:24:09.793\nNow when I hit enter you notice again like\nI said the output gets a little bit weird.\n\n405\n00:24:09.793 --> 00:24:12.092\nAnd basically what's going on,\nI'll walk you through it here.\n\n406\n00:24:12.092 --> 00:24:16.580\nI'm wanna scroll up is\nyou see this right here.\n\n407\n00:24:17.600 --> 00:24:22.470\nNow, wherever reason it chops it down to\na second line but think of this as one big\n\n408\n00:24:22.470 --> 00:24:27.210\nline of text, from the beginning\nto wherever this dollar sign is.\n\n409\n00:24:27.210 --> 00:24:31.540\nIt's letting you know that's the full\nstring of text that I have brought in.\n\n410\n00:24:31.540 --> 00:24:34.470\nYou'll notice that we're\nseeing things like new lines\n\n411\n00:24:34.470 --> 00:24:37.270\nright here between system and user, right?\n\n412\n00:24:37.270 --> 00:24:42.200\nSo that's how it is printing\nit out in it's mind.\n\n413\n00:24:42.200 --> 00:24:43.130\nBecause what' happening?\n\n414\n00:24:43.130 --> 00:24:46.540\nFirst it's taking it in, and\nnow I'm printing it out and\n\n415\n00:24:46.540 --> 00:24:50.200\nit comes out just because when it\ngoes to the screen the screen says,\n\n416\n00:24:50.200 --> 00:24:53.150\nthat's a new line character,\ndrop that down, all right?\n\n417\n00:24:53.150 --> 00:24:54.620\nGo to next line.\n\n418\n00:24:54.620 --> 00:24:58.360\nBut, because of our end,\nthis is what it's looking like.\n\n419\n00:24:58.360 --> 00:24:59.400\nSo it's bringing it up.\n\n420\n00:24:59.400 --> 00:25:00.000\nThink about it again.\n\n421\n00:25:00.000 --> 00:25:01.202\nThink of it as one big line.\n\n422\n00:25:01.202 --> 00:25:05.840\nIt's just moving it for\nspace purposes I would assume.\n\n423\n00:25:05.840 --> 00:25:08.220\nAnything between here and\nthere is gonna be one line.\n\n424\n00:25:08.220 --> 00:25:11.690\nThat is the line that's in\nthe pattern space, okay.\n\n425\n00:25:13.110 --> 00:25:14.390\nSo what's happening?\n\n426\n00:25:14.390 --> 00:25:16.500\nI see that it has taken the below it.\n\n427\n00:25:16.500 --> 00:25:17.900\nIt has brought it up into here.\n\n428\n00:25:17.900 --> 00:25:22.550\nIt has done a substitution and dropped it\ndown and then it goes to another line.\n\n429\n00:25:22.550 --> 00:25:25.120\nSo there's the printouts right there.\n\n430\n00:25:25.120 --> 00:25:30.232\nHere is the next line,\nequipped to perform blah blah blah and\n\n431\n00:25:30.232 --> 00:25:34.150\nthen the deduct to the end of the dash,\nright?\n\n432\n00:25:34.150 --> 00:25:36.018\nOkay, cool.\n\n433\n00:25:36.018 --> 00:25:40.400\nYou'll notice that down here,\nhere's the problem.\n\n434\n00:25:40.400 --> 00:25:46.360\nIt's just the way that the next line\nhappens to hit where the next line is,\n\n435\n00:25:46.360 --> 00:25:47.840\nremember it just sees the next line.\n\n436\n00:25:47.840 --> 00:25:52.970\nIt doesn't necessarily do it in\nthe correct order that we think of.\n\n437\n00:25:52.970 --> 00:25:57.710\nIt's doing it in a programmatic\norder which can get a little hinky\n\n438\n00:25:57.710 --> 00:26:01.290\nas you get longer lines of text,\ndepending on what's happening.\n\n439\n00:26:01.290 --> 00:26:03.980\nRight so here's what's happening and\n\n440\n00:26:03.980 --> 00:26:08.270\nthis is why that specific network\nadministrator is not being slipped up.\n\n441\n00:26:08.270 --> 00:26:11.610\nLook it says so here's a dollar sign.\n\n442\n00:26:11.610 --> 00:26:14.510\nLook what's on the end of the dollar sign.\n\n443\n00:26:14.510 --> 00:26:15.710\nNetwork.\n\n444\n00:26:15.710 --> 00:26:19.290\nSo this is actually being appended Right?\n\n445\n00:26:19.290 --> 00:26:22.360\nThere's that new line,\nembed a new line to your system user too.\n\n446\n00:26:22.360 --> 00:26:27.540\nIf your system user two grabbed,\nthat person is also a network,\n\n447\n00:26:27.540 --> 00:26:29.680\nput it together, saw it as one launch.\n\n448\n00:26:29.680 --> 00:26:32.230\nAnd then went to the line under that,\nsaw that,\n\n449\n00:26:32.230 --> 00:26:34.210\ngrabbed the line under it,\nput those together.\n\n450\n00:26:34.210 --> 00:26:36.070\nAnd you see that here.\n\n451\n00:26:39.227 --> 00:26:39.790\nRight?\n\n452\n00:26:39.790 --> 00:26:45.670\nNot that part, just this part.\n\n453\n00:26:45.670 --> 00:26:47.370\nThere we go.\nYou see that there?\n\n454\n00:26:47.370 --> 00:26:50.550\nSo it's not seeing Network,\nnew line, Administrator.\n\n455\n00:26:50.550 --> 00:26:51.880\nOr Network, space, Administrator.\n\n456\n00:26:52.950 --> 00:26:54.590\nHence, it skips it, moves on.\n\n457\n00:26:54.590 --> 00:26:59.390\nIt's because of what the capital\nN happens to have landed on.\n\n458\n00:26:59.390 --> 00:27:04.410\nIt's not catching that as a Regex\nmatch therefore it's skipping it.\n\n459\n00:27:04.410 --> 00:27:06.190\nThat's a bummer, right.\n\n460\n00:27:06.190 --> 00:27:09.190\nSo we're gonna go in here,\nwe're gonna make a couple of changes so\n\n461\n00:27:09.190 --> 00:27:13.440\nthat we can account for\nthings like that, okay, let's do it.\n\n462\n00:27:13.440 --> 00:27:18.760\nI wanna clear it out here and\nwe're gonna bring up our, actually,\n\n463\n00:27:18.760 --> 00:27:23.980\nall we have to do is come back\nover here And add capital P and\n\n464\n00:27:23.980 --> 00:27:29.770\ncapital D there,\nalso don't forget last line of the text\n\n465\n00:27:31.320 --> 00:27:37.760\nis a match but\nits looking to add new line here.\n\n466\n00:27:37.760 --> 00:27:41.320\nSo look below it, grab that, append it to,\nalthough if there's nothing there so\n\n467\n00:27:41.320 --> 00:27:45.270\nyou can't do that, therefore there'll be\nno match there or possibly not a match.\n\n468\n00:27:46.530 --> 00:27:52.900\nSomething actually I've been told and\nhas rung true so I do this a lot, is to\n\n469\n00:27:52.900 --> 00:27:59.110\nalways add this add negation to the last\nline just in case new line hits on that.\n\n470\n00:27:59.110 --> 00:28:04.370\nTries to slurp nothing and\nit prematurely ends the script right?\n\n471\n00:28:04.370 --> 00:28:11.650\nSo it's a good practice to get into to\njust always add Dollar sign like that.\n\n472\n00:28:11.650 --> 00:28:15.040\nSo, if you're on the end of the line\ndon't do the new line thing or\n\n473\n00:28:15.040 --> 00:28:17.050\nthe next thing all right?\n\n474\n00:28:17.050 --> 00:28:19.760\nDon't do the append the line\nline to the penetrates.\n\n475\n00:28:21.780 --> 00:28:25.640\nThat being said and\nof course this capital what is capital do?\n\n476\n00:28:26.690 --> 00:28:33.690\nP prints the line up to\nthe new line character right?\n\n477\n00:28:33.690 --> 00:28:38.670\nSo that gives us that so if I have got\ntwo lines that are connected being\n\n478\n00:28:38.670 --> 00:28:44.460\nconnected by the M And\nwell did with that new line character.\n\n479\n00:28:44.460 --> 00:28:48.350\nJust remember a new line appends\nthe next line with a new line,\n\n480\n00:28:48.350 --> 00:28:50.680\na leading new line or whatever.\n\n481\n00:28:50.680 --> 00:28:53.790\nThat's what connects them,\nthe new line character.\n\n482\n00:28:53.790 --> 00:28:57.220\nSo I'm printing up to that,\nthat goes up to the screen.\n\n483\n00:28:57.220 --> 00:29:02.740\nNow I'm left with A pattern space\nof nothing new line character and\n\n484\n00:29:02.740 --> 00:29:05.390\nwhatever's left comes into capital D.\n\n485\n00:29:05.390 --> 00:29:07.260\nWhat does capital D do?\n\n486\n00:29:07.260 --> 00:29:12.170\nIt deletes the pattern space up to and\nincluding a new line character and\n\n487\n00:29:12.170 --> 00:29:14.590\nthen recycles burning what's\nin the pattern space.\n\n488\n00:29:15.870 --> 00:29:23.390\nSo basically reversing the operation of\nwhat has happened with the capital N.\n\n489\n00:29:23.390 --> 00:29:26.390\nRight taking all that,\nreversing that through\n\n490\n00:29:26.390 --> 00:29:31.220\nsome very complex mediums nonetheless,\nbut that's what's happening so\n\n491\n00:29:31.220 --> 00:29:36.710\nthat we get the proper looking output and\nIt catches everything, all right?\n\n492\n00:29:36.710 --> 00:29:41.660\nBut if I run this, I should get some\naction and yes, we have come to fruition.\n\n493\n00:29:41.660 --> 00:29:46.350\nWe have solved the puzzle of what\nif we have this type of input and\n\n494\n00:29:46.350 --> 00:29:49.280\nI need to get a specific type of output.\n\n495\n00:29:49.280 --> 00:29:55.020\nThat should do it for this sketching\nspaces whether there new lines\n\n496\n00:29:55.020 --> 00:29:57.710\nIf new line is freaking it out\n\n497\n00:29:57.710 --> 00:30:02.030\nit can still handle that because of the\nway the print and the delete work right?\n\n498\n00:30:02.030 --> 00:30:03.120\nGathering all things,\n\n499\n00:30:03.120 --> 00:30:07.450\nthe g flag, making sure all\nmatches are nailed no matter what.\n\n500\n00:30:07.450 --> 00:30:10.100\nAnd that my friends I think is a lot.\n\n501\n00:30:10.100 --> 00:30:11.500\nWe've learned a lot about said.\n\n502\n00:30:11.500 --> 00:30:14.800\nIt's a bit heady so I want you to\ndefinitely spend some time with this.\n\n503\n00:30:14.800 --> 00:30:18.830\nYou're going to have to do some super\nmemorization, just rote memorization on\n\n504\n00:30:18.830 --> 00:30:23.170\nWhat these multiline flags do,\nwhat the negation does,\n\n505\n00:30:23.170 --> 00:30:28.190\nhow that works, how to work with\npattern space and hold space commands.\n\n506\n00:30:28.190 --> 00:30:34.410\nIt's a bit daunting but cheat sheets,\ncheat sheets, cheat sheets.\n\n507\n00:30:34.410 --> 00:30:37.110\nPost them on your desk, whatever,\npin them to the cork board so\n\n508\n00:30:37.110 --> 00:30:40.060\nthat you don't forget them cuz you're\ngonna need to look at and reference that.\n\n509\n00:30:40.060 --> 00:30:41.120\nWhat does the H do again?\n\n510\n00:30:41.120 --> 00:30:42.640\nYes, it copies.\n\n511\n00:30:42.640 --> 00:30:43.630\nGot it no problem.\n\n512\n00:30:43.630 --> 00:30:48.070\nSo if you're getting weird results maybe\nyou just have to go back to the drawing\n\n513\n00:30:48.070 --> 00:30:51.340\nboard as it were or what your\ncommand is or what it's doing and\n\n514\n00:30:51.340 --> 00:30:56.020\nif you know what each one of them does you\nshould be able to work the Rubi's Cube and\n\n515\n00:30:56.020 --> 00:30:57.970\nget all of the sides and what not.\n\n516\n00:30:57.970 --> 00:31:00.090\nJustin my man I think that's\nall I've got for today though.\n\n517\n00:31:00.090 --> 00:31:03.660\n&gt;&gt; Well Daniel you've kinda\nmade good on your promise.\n\n518\n00:31:03.660 --> 00:31:06.230\nYou said a few episodes that\nwe were gonna fix this.\n\n519\n00:31:06.230 --> 00:31:08.680\nWe did have to take a few quick detours\n\n520\n00:31:08.680 --> 00:31:12.800\nbecause well those all came into play\nto fix what you thought might've been\n\n521\n00:31:12.800 --> 00:31:16.160\na simple problem that ended up\nbeing a little more complicated\n\n522\n00:31:16.160 --> 00:31:18.830\nBecause of some of this heady\nkind of thought process, right?\n\n523\n00:31:18.830 --> 00:31:23.165\nYou have kind of these limited resources\ndoing some shucking and jiving.\n\n524\n00:31:23.165 --> 00:31:24.640\n&gt;&gt; [LAUGH]\n&gt;&gt; All kinds of crazy stuff.\n\n525\n00:31:24.640 --> 00:31:28.310\nSo thank you so much for that, Daniel,\nand hopefully you learned a few things.\n\n526\n00:31:28.310 --> 00:31:29.480\nKeep on tinkering.\n\n527\n00:31:29.480 --> 00:31:32.450\nBut we got more advanced shell\nscripting coming at you, so stay tuned.\n\n528\n00:31:32.450 --> 00:31:34.380\nWe're gonna go ahead and wrap this one up.\n\n529\n00:31:34.380 --> 00:31:37.180\nSigning off for ITPro.TV,\nI've been your host Justin Dennison.\n\n530\n00:31:37.180 --> 00:31:37.970\n&gt;&gt; And I'm Daniel Lowrie.\n\n531\n00:31:37.970 --> 00:31:40.093\n&gt;&gt; And we'll see you next time.\n\n532\n00:31:40.093 --> 00:31:46.121\n[MUSIC]\n\n533\n00:31:46.121 --> 00:31:49.087\nThank you for watching ITPRO TV.\n\n",
          "vimeoId": "241751253"
        }
      ],
      "title": "Advanced sed"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin dive into the programming side of gawk. Here they will look at defining and working with variables. They will explore Built-in variables like data field and record variables, shortcut variables, and User-Defined variables.",
          "length": "2143",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-1-1-advanced_gawk_variables-110117-PGM.00_35_30_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-1-1-advanced_gawk_variables-110117-PGM.00_35_30_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-1-1-advanced_gawk_variables-110117-PGM.00_35_30_28.Still001-sm.jpg",
          "title": "Advanced gawk: Variables",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:03.584\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:03.584 --> 00:00:05.945\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.945 --> 00:00:08.324\n[MUSIC]\n\n4\n00:00:08.324 --> 00:00:11.953\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.953 --> 00:00:15.794\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:15.794 --> 00:00:17.672\nI'm your host Justin Dennison and, well,\n\n7\n00:00:17.672 --> 00:00:20.380\nwe're continuing on in our\nAdvanced Shell Scripting series.\n\n8\n00:00:20.380 --> 00:00:23.213\nAnd we're about to dive into some Gawk,\nand\n\n9\n00:00:23.213 --> 00:00:27.053\njust doesn't roll of the tongue\nlike I would like for it to.\n\n10\n00:00:27.053 --> 00:00:30.839\nBut luckily we have a man in the studio\nthat's going to tell us all we need to\n\n11\n00:00:30.839 --> 00:00:34.340\nknow about Gawk, Mr Daniel Lowrie,\nhow are we doing today Daniel?\n\n12\n00:00:34.340 --> 00:00:35.740\n&gt;&gt; I'm doing fantastic Justin.\n\n13\n00:00:35.740 --> 00:00:40.201\nAgain always glad to be back in the studio\nwith our good audience out there and\n\n14\n00:00:40.201 --> 00:00:41.394\nwith you my friend.\n\n15\n00:00:41.394 --> 00:00:44.320\nWe have a good time here and\nhopefully you are as well.\n\n16\n00:00:44.320 --> 00:00:47.510\nToday we are going to learn\na little more about Gawk.\n\n17\n00:00:47.510 --> 00:00:49.760\nSee some more advanced features and\n\n18\n00:00:49.760 --> 00:00:53.090\nfunctionalities inside of\nthat lovely little program.\n\n19\n00:00:53.090 --> 00:00:56.800\nIt can be a bit daunting, there is quite a\nbit to it and we are in no way, shape, or\n\n20\n00:00:56.800 --> 00:00:59.440\nform going to exhaust its capabilities.\n\n21\n00:00:59.440 --> 00:01:02.160\nBut I do want to give you\nguys a little more of\n\n22\n00:01:02.160 --> 00:01:06.040\nan advanced feature set that you might\nbe able to dip into from time to time.\n\n23\n00:01:06.040 --> 00:01:09.190\nAnd maybe format some things\nin the way that you need them,\n\n24\n00:01:09.190 --> 00:01:10.710\nusing Gawk in that way.\n\n25\n00:01:10.710 --> 00:01:11.725\nThat being said,\n\n26\n00:01:11.725 --> 00:01:15.929\nGawk is a full-on programming language\nthat has all sorts of cool stuff.\n\n27\n00:01:15.929 --> 00:01:18.620\nSo we're gonna kinda hit the highlights so\n\n28\n00:01:18.620 --> 00:01:22.970\nthat we could make an entire\nseries based off just Gawk itself.\n\n29\n00:01:22.970 --> 00:01:25.762\nAnd that would take a lot of time and\neffort on one of our parts,\n\n30\n00:01:25.762 --> 00:01:26.688\nhopefully, yeah.\n\n31\n00:01:26.688 --> 00:01:32.130\nHe's like no, I don't wanna do that,\ncuz it's real hard.\n\n32\n00:01:32.130 --> 00:01:35.080\n&gt;&gt; Programming languages are fun,\nand well, sometimes, they are hard.\n\n33\n00:01:35.080 --> 00:01:37.260\nBut I will say, Daniel,\n\n34\n00:01:37.260 --> 00:01:42.680\nbefore I hosted with you in some Gawk\nstuff I was like, I don't like this.\n\n35\n00:01:42.680 --> 00:01:46.893\nBut I found myself using it,\nI was like hey I need these two copies,\n\n36\n00:01:46.893 --> 00:01:49.464\n[SOUND] I know how to do this so,\nyou know.\n\n37\n00:01:49.464 --> 00:01:51.184\nEven though it can be a little scary,\n\n38\n00:01:51.184 --> 00:01:54.080\nI'm kind of interested to see\nwhat is available to me in Gawk.\n\n39\n00:01:54.080 --> 00:01:57.040\nOnce you've learned one programming\nlanguage, you can pick up other ones\n\n40\n00:01:57.040 --> 00:02:00.590\nfairly quickly, as long as they're\nnot crazy, esoteric type things.\n\n41\n00:02:00.590 --> 00:02:05.950\n&gt;&gt; Yeah, and there's a few little quirks\nand nuances to the way Gawk works.\n\n42\n00:02:05.950 --> 00:02:08.125\nBut if watching the Batch series,\n\n43\n00:02:08.125 --> 00:02:13.290\na lot of this stuff should be kind of\nfamiliar, at least in the concept of it.\n\n44\n00:02:13.290 --> 00:02:15.920\nIt's the execution that changes\na little bit from here.\n\n45\n00:02:15.920 --> 00:02:20.270\nAnd like I said, some of that can\nbe a little strange but once you're\n\n46\n00:02:20.270 --> 00:02:24.390\nfamiliar with that new ones you should\nbe able to work with it pretty easily.\n\n47\n00:02:24.390 --> 00:02:27.640\nAll right that being said today, we're\ngonna talk specifically about variables.\n\n48\n00:02:27.640 --> 00:02:30.790\nWe wanna get it to that because\nthat's one of the best ways in which\n\n49\n00:02:32.300 --> 00:02:35.620\na programming language you want to\nbe able to work with the variables.\n\n50\n00:02:35.620 --> 00:02:38.910\nThere's some built-in variables that we\ncan call from and they have some power and\n\n51\n00:02:38.910 --> 00:02:39.530\nfunctionality.\n\n52\n00:02:39.530 --> 00:02:41.900\nAnd then we can define our own variables.\n\n53\n00:02:41.900 --> 00:02:44.880\nSo, that's hopefully what we're going\nto get through in this episode,\n\n54\n00:02:44.880 --> 00:02:47.940\nis look at some of those built-ins,\nsee how we can work with them.\n\n55\n00:02:47.940 --> 00:02:51.430\nAnd then we'll define some of our own and\nwork with those as well.\n\n56\n00:02:51.430 --> 00:02:54.670\nLet's take a look at some of\nthese built-in variables,\n\n57\n00:02:54.670 --> 00:02:56.240\nmake sure I haven't skipped anything.\n\n58\n00:02:56.240 --> 00:03:00.704\nWe've actually used some\nof these actually, the $0,\n\n59\n00:03:00.704 --> 00:03:05.240\n$1, when we do that inside of\na Gawk command line, right.\n\n60\n00:03:05.240 --> 00:03:11.330\nWe wanna reference a specific data field,\nwe say $1, $2 so on and so forth.\n\n61\n00:03:11.330 --> 00:03:14.200\nThose technically are variables,\nwe can use them for\n\n62\n00:03:14.200 --> 00:03:17.700\nscripts we can use them from the command\nline we have a lot of functionality there.\n\n63\n00:03:17.700 --> 00:03:21.500\nWe also have others we've worked with\nlike the fs, we've seen that right,\n\n64\n00:03:21.500 --> 00:03:25.295\nwe say fs equals a colon,\nor fs equals a comma.\n\n65\n00:03:25.295 --> 00:03:28.170\nOr whatever we want the field\nseparator to be right, so\n\n66\n00:03:28.170 --> 00:03:33.960\nnot completely unfamiliar to\nus at this point in time.\n\n67\n00:03:33.960 --> 00:03:36.070\nWe're going to take\na look back at those and\n\n68\n00:03:36.070 --> 00:03:38.160\nwe're going to look at\nsome others as well.\n\n69\n00:03:38.160 --> 00:03:40.140\nYes, now we can definitely\nget on the screen.\n\n70\n00:03:40.140 --> 00:03:43.250\nI know I rambled a little longer\nthan I should have, but whatever.\n\n71\n00:03:43.250 --> 00:03:46.460\nLet's go here we got this diagram,\nI guess,\n\n72\n00:03:46.460 --> 00:03:51.640\nor file I've made that gives us some\nidea of some of these variables.\n\n73\n00:03:51.640 --> 00:03:58.794\nAnd it is called data fields, which I data\nfile, whatever, I'm a horrible speller.\n\n74\n00:03:58.794 --> 00:04:03.622\nThere we go, so here are the ones that I'm\ngonna show you right now, which is fs,\n\n75\n00:04:03.622 --> 00:04:06.230\nwe've kinda sealed that, we know that.\n\n76\n00:04:06.230 --> 00:04:10.680\nThat's the field separator,\nfield widths, rs,\n\n77\n00:04:10.680 --> 00:04:14.680\nwhich is record separator, ofs,\nwhich is the output field separator.\n\n78\n00:04:14.680 --> 00:04:18.030\nAnd ors, which is the output\nrecord separator, right?\n\n79\n00:04:18.030 --> 00:04:23.240\nI've created all of these little files for\nus to kind of work as a diagram.\n\n80\n00:04:23.240 --> 00:04:25.429\nSo let's start off with just\na regular field separator, right?\n\n81\n00:04:25.429 --> 00:04:31.409\nSo I will cat fs.doc and here we go.\n\n82\n00:04:31.409 --> 00:04:33.870\nWe've got a Gawk command string, right?\n\n83\n00:04:33.870 --> 00:04:36.530\nJust like how it would be\nfrom the command line.\n\n84\n00:04:36.530 --> 00:04:40.560\nAnd we've got this begin statement,\nand inside the curly braces,\n\n85\n00:04:40.560 --> 00:04:44.475\nwe have \"fs= \":.\n\n86\n00:04:44.475 --> 00:04:46.410\nSo what does that say?\n\n87\n00:04:46.410 --> 00:04:53.570\nThat's saying that I want to make fields\nout of a colon-separated string of text.\n\n88\n00:04:53.570 --> 00:04:57.110\nI look at a line,\nit's separated by a colon.\n\n89\n00:04:57.110 --> 00:05:00.540\nDoes any of us out here maybe\nthink of a file that does that?\n\n90\n00:05:00.540 --> 00:05:02.760\nYes, good old Etsy password, right?\n\n91\n00:05:02.760 --> 00:05:03.460\nIt's a great password,\n\n92\n00:05:03.460 --> 00:05:05.580\ncuz it's got data in it,\nI don't really care about the password.\n\n93\n00:05:05.580 --> 00:05:07.940\nIt's a great file for\nus to work with inside of Gawk.\n\n94\n00:05:07.940 --> 00:05:11.860\nCuz it has data in it,\nit's formatted in a specific way, so\n\n95\n00:05:11.860 --> 00:05:12.850\nwe can kinda manipulate stuff.\n\n96\n00:05:12.850 --> 00:05:15.640\nSo you'll see that from time to time,\ncuz I'll use it.\n\n97\n00:05:15.640 --> 00:05:16.390\nSo what's happening?\n\n98\n00:05:16.390 --> 00:05:22.030\nI'm saying,\nchange that field separator to a colon.\n\n99\n00:05:22.030 --> 00:05:23.848\nAnd now when you read the record and\n\n100\n00:05:23.848 --> 00:05:26.992\nwe jump over here to the print statement,\nwhat does it say?\n\n101\n00:05:26.992 --> 00:05:31.840\n$1, those good old variables,\ngive me $1, give me that first field.\n\n102\n00:05:31.840 --> 00:05:35.180\nGive me the fifth field, give me\nthe sixth and seventh field as well and\n\n103\n00:05:35.180 --> 00:05:36.290\ndo it from Etsy password.\n\n104\n00:05:36.290 --> 00:05:40.390\nThat's the file I'm slurping\nin as my input file right?\n\n105\n00:05:40.390 --> 00:05:42.330\nSo there we go,\npretty straight forward, pretty simple.\n\n106\n00:05:42.330 --> 00:05:44.420\nI'll just copy and paste that.\n\n107\n00:05:44.420 --> 00:05:49.830\nWell you don't have to guys watch me\nbutcher type this thing just copy and\n\n108\n00:05:49.830 --> 00:05:51.876\npaste it in, we hit Enter.\n\n109\n00:05:51.876 --> 00:05:55.981\nAnd now we see, it actually still kind\nof looks just like it would except it's\n\n110\n00:05:55.981 --> 00:06:01.580\na little truncated because it's only given\nme, so here's my user account right here.\n\n111\n00:06:01.580 --> 00:06:08.770\nIt's given me $1 which is my username,\n$5, which\n\n112\n00:06:08.770 --> 00:06:12.938\nis my full name plus some commas that\nare going on there that are in that field.\n\n113\n00:06:12.938 --> 00:06:15.280\nWe're getting $6,\n\n114\n00:06:15.280 --> 00:06:20.210\nwhich is my home directory, and\n$7, which is my default shell.\n\n115\n00:06:20.210 --> 00:06:24.048\nAnd it's giving it to me for\nevery line inside of Etsy password.\n\n116\n00:06:24.048 --> 00:06:28.353\nField separator,\n$ the field variables, very cool,\n\n117\n00:06:28.353 --> 00:06:31.290\nwe understand it, it's a variable.\n\n118\n00:06:31.290 --> 00:06:35.839\nWe're referencing a specific\nthing that has a value, right?\n\n119\n00:06:35.839 --> 00:06:38.230\nVery cool.\n\n120\n00:06:38.230 --> 00:06:41.550\nAlright, let's look at OFS, right,\nthis is the output field separator.\n\n121\n00:06:42.800 --> 00:06:48.060\nSo we've got a field separator\nthat looks into a file, says,\n\n122\n00:06:48.060 --> 00:06:51.340\nthis is the separation between fields.\n\n123\n00:06:52.380 --> 00:06:56.198\nWhat do you think an output\nfield separator does, Justin?\n\n124\n00:06:56.198 --> 00:06:59.910\n&gt;&gt; Well i'm going out on a limb here.\n\n125\n00:06:59.910 --> 00:07:05.674\nI think whenever we get this output if\nwe're saying give me $1, $5, $6 and 7.\n\n126\n00:07:05.674 --> 00:07:10.576\nInstead of those being spaced delimited\nwe can now say hey these are comma\n\n127\n00:07:10.576 --> 00:07:13.723\ndelimited or additionally colon delimited.\n\n128\n00:07:13.723 --> 00:07:17.695\nOr maybe a vertical pipe delimited,\nessentially a transformation from one to\n\n129\n00:07:17.695 --> 00:07:21.400\nanother where I'm no longer using\nthe default output field separator.\n\n130\n00:07:21.400 --> 00:07:24.230\n&gt;&gt; That's exactly right, and we can see\nwith the output field separator operator\n\n131\n00:07:24.230 --> 00:07:26.940\nis right now which is a space, right?\n\n132\n00:07:26.940 --> 00:07:31.810\nBecause that's was being outputted as\na field separator in our screen here.\n\n133\n00:07:31.810 --> 00:07:35.747\nSo if we wanna change that, I'm like hm,\nthis isn't super easy to read.\n\n134\n00:07:35.747 --> 00:07:38.910\nBut I don't want the colons to be in\nthere, cuz that's not super easy for me or\n\n135\n00:07:38.910 --> 00:07:39.750\nwhatever, right?\n\n136\n00:07:39.750 --> 00:07:42.560\nIt just depends on what kind of data\nyou're piping back out to your screen.\n\n137\n00:07:43.750 --> 00:07:47.010\nI wanna change that, to make it more\nreadable for me or my users, right?\n\n138\n00:07:47.010 --> 00:07:49.822\nSo we can do that with the OFS,\ngotta a file,\n\n139\n00:07:49.822 --> 00:07:53.708\nlet's cat it .ofs.gawk,\nhere's the syntax for it here.\n\n140\n00:07:53.708 --> 00:07:57.065\nSo in that begin where we're\nchanging the field separator.\n\n141\n00:07:57.065 --> 00:08:00.400\nSo I'm gonna Go right\nback to Etsy password.\n\n142\n00:08:00.400 --> 00:08:02.902\nAnd I'm just gonna change that with OFS,\n\n143\n00:08:02.902 --> 00:08:05.700\nequals in quotations\nwhatever I want it to be.\n\n144\n00:08:05.700 --> 00:08:06.870\nI've got a double dash here.\n\n145\n00:08:06.870 --> 00:08:11.160\nSo if I change that or just copy this.\n\n146\n00:08:13.120 --> 00:08:17.160\nCopy and paste that and fire it off.\n\n147\n00:08:17.160 --> 00:08:18.500\nNow, you'll notice,\n\n148\n00:08:18.500 --> 00:08:23.940\nhere's my specific line that I've got\ndouble dashes between each field.\n\n149\n00:08:23.940 --> 00:08:27.040\nMaybe that's fine for me,\nmaybe I wanna change it to something else.\n\n150\n00:08:27.040 --> 00:08:31.470\nMaybe I wanna do,\nmaybe I wanna do a bunch of spaces.\n\n151\n00:08:31.470 --> 00:08:33.870\nMaybe I'm gonna go through\nfour spaces like a tab.\n\n152\n00:08:33.870 --> 00:08:38.400\nSo now there are tab spaced out,\nat least simulating a tab space.\n\n153\n00:08:38.400 --> 00:08:42.010\nAnd now we got a nice breathing\nroom between each one of my fields,\n\n154\n00:08:42.010 --> 00:08:43.710\nmakes it a little easier for\nme to look at.\n\n155\n00:08:43.710 --> 00:08:45.940\nMaybe I like that,\nthat's what I'm gonna stick with.\n\n156\n00:08:45.940 --> 00:08:48.480\nVery cool, very easy,\nnothing real crazy, right?\n\n157\n00:08:48.480 --> 00:08:50.250\nAll right, what's the next one?\n\n158\n00:08:50.250 --> 00:08:52.370\nField widths, actually,\nI really like field widths.\n\n159\n00:08:52.370 --> 00:08:55.190\nIt's a pretty cool thing.\n\n160\n00:08:55.190 --> 00:09:00.303\nLet's cat that file,\ncat field width subduct.\n\n161\n00:09:00.303 --> 00:09:01.880\nSo heres what's happening.\n\n162\n00:09:01.880 --> 00:09:06.965\nWe're gonna take in the field separator\nand we're going to say this is what\n\n163\n00:09:06.965 --> 00:09:13.193\nthe field separator is and I've got these\nfield widths which are 8, 12, 13 and 10.\n\n164\n00:09:13.193 --> 00:09:17.032\nSo what it's saying is,\nI wrote this down here,\n\n165\n00:09:17.032 --> 00:09:21.820\nchanges the field list to\nthe specified character lengths.\n\n166\n00:09:22.930 --> 00:09:23.730\nDoes that make sense?\n\n167\n00:09:23.730 --> 00:09:27.460\nAnd down here, dollar sign one,\nwe note that it's the first field.\n\n168\n00:09:27.460 --> 00:09:31.542\nI wanna make it limited to eight\ncharacters or expanded eight characters,\n\n169\n00:09:31.542 --> 00:09:33.758\nhowever you're looking at it, right?\n\n170\n00:09:33.758 --> 00:09:36.893\nSo that first field is only\ngonna take in eight characters.\n\n171\n00:09:36.893 --> 00:09:41.337\nWhatever eight characters is up to,\nthat becomes the first field, right?\n\n172\n00:09:41.337 --> 00:09:45.316\nDollar sign 2, we'll make that 12,\nDollar sign 3, we'll make it 13, right?\n\n173\n00:09:45.316 --> 00:09:47.490\nJust picking random numbers here.\n\n174\n00:09:47.490 --> 00:09:50.157\nBut, we'll get CD outputs,\nand see how this looks now.\n\n175\n00:09:50.157 --> 00:09:51.258\nWe'll copy it out.\n\n176\n00:09:55.510 --> 00:09:57.465\nCopy and paste it in.\n\n177\n00:09:57.465 --> 00:10:01.937\nNow, if we fire it off,\nsee how it is now looking at.\n\n178\n00:10:01.937 --> 00:10:07.306\nSo here's my user, so just stay in the\nsame reference spot, so one, two, three,\n\n179\n00:10:07.306 --> 00:10:12.941\nfour, five, six, seven and then the colon\nthat's attached to the end of it is eight.\n\n180\n00:10:12.941 --> 00:10:17.690\nAnd you'll notice it's kind of ignoring\nthe field separator that we defined.\n\n181\n00:10:17.690 --> 00:10:22.570\nYou need to keep that in mind\nif you use field widths, okay?\n\n182\n00:10:22.570 --> 00:10:24.830\nJust bear that in mind, it's a part of it.\n\n183\n00:10:24.830 --> 00:10:26.390\nNow the next one should\nbe 12 characters and\n\n184\n00:10:26.390 --> 00:10:28.940\nthe next one should be 13 characters,\nokay?\n\n185\n00:10:28.940 --> 00:10:32.230\nSo I've defined what each\nfield width is going to be\n\n186\n00:10:32.230 --> 00:10:34.820\nby using the field widths variable.\n\n187\n00:10:36.090 --> 00:10:37.630\n&gt;&gt; Now Daniel, these field widths,\n\n188\n00:10:37.630 --> 00:10:40.740\nI've noticed that we have one for\ndollar sign one, two, and three, but\n\n189\n00:10:40.740 --> 00:10:44.950\nthere was actually a fourth\nvalue in that gawk statement.\n\n190\n00:10:44.950 --> 00:10:50.750\nWhat is that fourth value, is it just,\ndid we get some leniency there or is it\n\n191\n00:10:50.750 --> 00:10:56.200\nnecessary to have a fourth, like one value\nbeyond what we have as far as fields.\n\n192\n00:10:56.200 --> 00:10:58.990\n&gt;&gt; That's a great question, and\nhe's smart for catching that.\n\n193\n00:10:58.990 --> 00:11:02.580\nIf there's nothing in the field,\nor if there's not enough, or\n\n194\n00:11:02.580 --> 00:11:06.460\nsomething, it can get a little dicey\nworking with this thing, I've noticed.\n\n195\n00:11:06.460 --> 00:11:10.900\nYou really want to work with fields, or\n\n196\n00:11:10.900 --> 00:11:16.040\nin my experience, field was,\nif you don't have something there,\n\n197\n00:11:16.040 --> 00:11:19.350\nit's still there technically,\nbut it shows nothing.\n\n198\n00:11:19.350 --> 00:11:22.760\nI don't remember, what did I put in that?\n\n199\n00:11:22.760 --> 00:11:27.965\nSo it's $ six or seven, probably\n\n200\n00:11:27.965 --> 00:11:31.562\nwhat's happened is I did not define,\nthat's not what I did.\n\n201\n00:11:31.562 --> 00:11:33.437\nYeah, it didn't save my thing.\n\n202\n00:11:33.437 --> 00:11:34.130\nThat's weird.\n\n203\n00:11:34.130 --> 00:11:35.024\nVery strange.\n\n204\n00:11:35.024 --> 00:11:35.921\nLet's go back to it.\n\n205\n00:11:35.921 --> 00:11:42.205\nGet that field width, so\nit's gawk field width.\n\n206\n00:11:42.205 --> 00:11:43.505\nIELD.\n\n207\n00:11:43.505 --> 00:11:44.705\nWhat's going on here?\n\n208\n00:11:44.705 --> 00:11:46.110\nWhat is the name of this file?\n\n209\n00:11:46.110 --> 00:11:46.880\nIt's just field width.\n\n210\n00:11:46.880 --> 00:11:47.380\nSo there it is.\n\n211\n00:11:48.810 --> 00:11:50.160\nThere we go.\nLet's try that again.\n\n212\n00:11:50.160 --> 00:11:51.870\nLet's just look at it and\nsee what he's talking about.\n\n213\n00:11:51.870 --> 00:11:53.020\nSo I had this ten.\n\n214\n00:11:53.020 --> 00:11:56.160\nYou notice that I didn't\ndefine anything for ten.\n\n215\n00:11:56.160 --> 00:12:01.700\nSo it's there, but I didn't give it\nany data, so it just looks empty.\n\n216\n00:12:02.715 --> 00:12:04.590\nSo you don't really see it.\n\n217\n00:12:04.590 --> 00:12:06.280\nIt doesn't define it in anyway.\n\n218\n00:12:06.280 --> 00:12:10.120\nYou'll go, here's a field,\nit's empty, it just looks invisible.\n\n219\n00:12:11.770 --> 00:12:13.630\n&gt;&gt; Follow up question-\n&gt;&gt; Let's follow up\n\n220\n00:12:13.630 --> 00:12:16.400\n&gt;&gt; Because now, it was, the reason being\n\n221\n00:12:16.400 --> 00:12:20.760\nis I was getting ready to you, Daniel,\nwe field separated on the colon but\n\n222\n00:12:20.760 --> 00:12:24.860\nit's kinda jagged and it would almost\nbe nice if I was reporting this.\n\n223\n00:12:24.860 --> 00:12:27.520\nHave it more strongly defined, yeah-\n&gt;&gt; Yeah.\n\n224\n00:12:27.520 --> 00:12:30.010\n&gt;&gt; i mean put commas between them,\nopen it up in a spreadsheet.\n\n225\n00:12:30.010 --> 00:12:34.120\nBut if I wanna look at terminal output,\nbut you know when we did this,\n\n226\n00:12:34.120 --> 00:12:37.425\nwe still had the colon even though\nthat our field separator was a colon.\n\n227\n00:12:37.425 --> 00:12:40.706\n&gt;&gt; Mm-hm.\n&gt;&gt; And so that ignores, if I understand,\n\n228\n00:12:40.706 --> 00:12:45.975\nPhildwist, ignores the field separator\nif I wanted to split on fields.\n\n229\n00:12:45.975 --> 00:12:49.268\n&gt;&gt; Yes.\n&gt;&gt; Then I need to do a gawk statement and\n\n230\n00:12:49.268 --> 00:12:52.700\npipe that-\n&gt;&gt; Into a gawk statement, yes, yes.\n\n231\n00:12:52.700 --> 00:12:55.860\nThere's other ways to do it but\nthat would work,\n\n232\n00:12:55.860 --> 00:13:01.040\nbecause that is exactly what's happening,\nis ignoring that field separator.\n\n233\n00:13:01.040 --> 00:13:04.780\nLike I said, keep that in mind because you\nmight get some freaky output that you're\n\n234\n00:13:04.780 --> 00:13:06.950\nnot looking for, okay?\n\n235\n00:13:06.950 --> 00:13:08.690\nAll right, so let's move on,\n\n236\n00:13:08.690 --> 00:13:11.380\nyou don't want to spend too much time\nhanging out in field widths even though\n\n237\n00:13:11.380 --> 00:13:15.900\nit's a very cool option for us cuz we got\nplenty to go through, that's for sure.\n\n238\n00:13:17.590 --> 00:13:18.760\nWhat is after that?\n\n239\n00:13:18.760 --> 00:13:21.020\nLet's go to record separate, RS.\n\n240\n00:13:21.020 --> 00:13:24.670\nLet's cap that, capRS.gawk.\n\n241\n00:13:24.670 --> 00:13:26.870\nSo we have field separators.\n\n242\n00:13:26.870 --> 00:13:27.810\nWe understand what that is.\n\n243\n00:13:27.810 --> 00:13:30.380\nThere's fields, dollar sign one,\ntwo, three, four, and so.\n\n244\n00:13:30.380 --> 00:13:32.830\nBut then you have records.\n\n245\n00:13:32.830 --> 00:13:35.822\nBasically, each line of data Is a record,\nand\n\n246\n00:13:35.822 --> 00:13:38.598\nit's separated by a specific character.\n\n247\n00:13:38.598 --> 00:13:42.544\nIf I'm not mistaken, the default\nrecord separator is a new line.\n\n248\n00:13:42.544 --> 00:13:47.800\nAll right, so I have a line of text,\nI hit return, I make another line of text.\n\n249\n00:13:47.800 --> 00:13:51.010\nSo that return character, that new\nline character that's invisible to us\n\n250\n00:13:52.080 --> 00:13:56.180\nis what RS says,\nI'm going to a new record.\n\n251\n00:13:57.590 --> 00:13:59.980\nI can redefine that as well.\n\n252\n00:13:59.980 --> 00:14:01.390\nMaybe I need to change things out.\n\n253\n00:14:01.390 --> 00:14:03.700\nLet me show you a cool\nlittle thing I made.\n\n254\n00:14:03.700 --> 00:14:07.428\nWell, I say cool,\nit's just a file that has data in it so\n\n255\n00:14:07.428 --> 00:14:10.550\nthat we can examine what RS does.\n\n256\n00:14:10.550 --> 00:14:13.730\nSo if I cats context.txt here.\n\n257\n00:14:13.730 --> 00:14:18.730\nI've got some people,\nsome actors that I enjoy and\n\n258\n00:14:18.730 --> 00:14:22.910\ntheir fake addresses because you know,\nrestraining orders.\n\n259\n00:14:22.910 --> 00:14:25.080\nSo we put in that information there.\n\n260\n00:14:25.080 --> 00:14:29.990\nBut what if only wanted the name and\nthe phone number, right?\n\n261\n00:14:29.990 --> 00:14:35.100\nAnd you'll notice that they're separated\nby a white space, just empty space.\n\n262\n00:14:36.640 --> 00:14:39.750\nSo, I want to get this,\nthat I'm not highlighting,\n\n263\n00:14:39.750 --> 00:14:44.620\nI want to get val, I want get his phone\nnumber, and I want to print that out.\n\n264\n00:14:44.620 --> 00:14:47.870\nAnd then I want to go to James, and\nI want to get his phone number, and\n\n265\n00:14:47.870 --> 00:14:50.510\nI want to print that out,\nand so on and so forth.\n\n266\n00:14:50.510 --> 00:14:52.150\nI can use the record\nseparator to help me do that.\n\n267\n00:14:52.150 --> 00:14:53.350\nAll right, let's take a look.\n\n268\n00:14:53.350 --> 00:14:57.747\nLet's go back to cat rs .doc.\n\n269\n00:14:57.747 --> 00:14:59.742\nI am gonna copy the thing here.\n\n270\n00:14:59.742 --> 00:15:01.776\n[BLANK AUDIO] Put it in, and\n\n271\n00:15:01.776 --> 00:15:07.340\nyou'll notice to what I have put\nthrough record separator two, right?\n\n272\n00:15:07.340 --> 00:15:08.150\nI put it to nothing.\n\n273\n00:15:09.200 --> 00:15:15.870\nBecause what are the records separated\nby in my human mind, by nothing.\n\n274\n00:15:15.870 --> 00:15:18.270\nThere's a space between them, right?\n\n275\n00:15:18.270 --> 00:15:20.480\nSo what I've done is I've\ntaken the field separator,\n\n276\n00:15:20.480 --> 00:15:23.370\nI've changed that to\nthe new line character.\n\n277\n00:15:23.370 --> 00:15:24.906\nSo what does that do?\n\n278\n00:15:24.906 --> 00:15:30.530\nIt takes here and makes that field one,\nnew line separates fields.\n\n279\n00:15:30.530 --> 00:15:35.929\nThat means 444 4th drive becomes $2.\n\n280\n00:15:35.929 --> 00:15:41.815\n$3 is Hollywood CA and\n$4 is 11155544444, right?\n\n281\n00:15:41.815 --> 00:15:47.914\nSo I want to print out $1 and $4 and\nI don't want white space in between them,\n\n282\n00:15:47.914 --> 00:15:51.570\nso I'm changing the record\nseparator to that.\n\n283\n00:15:51.570 --> 00:15:54.942\nSo it will see that as\nI'm on a new record and\n\n284\n00:15:54.942 --> 00:15:58.148\nnot just a Stop at the first one, got it?\n\n285\n00:15:58.148 --> 00:15:59.408\nLet's see if it's works.\n\n286\n00:15:59.408 --> 00:16:03.483\nThere we go and now I get more formatted\noutputs of what I'm looking for.\n\n287\n00:16:03.483 --> 00:16:05.270\nSo that's what it did, it jumped down.\n\n288\n00:16:05.270 --> 00:16:10.709\nEvery time it saw that empty character,\nthat empty space not a space, right?\n\n289\n00:16:10.709 --> 00:16:15.470\nRemember that, it's not a space\ncharacter like you hit the space bar.\n\n290\n00:16:15.470 --> 00:16:19.606\nIt is nothing there, I hit a return,\nI hit a return that was all it was to it.\n\n291\n00:16:19.606 --> 00:16:23.046\nIt sees that there is nothing,\nno text at all,\n\n292\n00:16:23.046 --> 00:16:26.060\nit knows to go to the next set of records.\n\n293\n00:16:26.060 --> 00:16:29.758\nAll right and then ORS, we had OFS,\n\n294\n00:16:29.758 --> 00:16:33.839\nwe got ORS, output record separator.\n\n295\n00:16:33.839 --> 00:16:35.390\nLet's look at that file.\n\n296\n00:16:35.390 --> 00:16:37.719\nCap ORS.doc.\n\n297\n00:16:37.719 --> 00:16:42.615\nAnd here we go,\nchanges the output record separator from\n\n298\n00:16:42.615 --> 00:16:45.682\nnew line to in this case three dots.\n\n299\n00:16:45.682 --> 00:16:47.630\nWe kind of understand\nwhat's going on here.\n\n300\n00:16:47.630 --> 00:16:51.547\nI'm just kind of shoehorning this\ninto our previous statement.\n\n301\n00:16:51.547 --> 00:16:56.866\nSo I'll just copy it, hit again.\n\n302\n00:16:56.866 --> 00:17:02.192\nCopy and [INAUDIBLE] hit enter.\n\n303\n00:17:02.192 --> 00:17:06.160\nNow, you'll notice what it does,\nthe record separator is now,\n\n304\n00:17:06.160 --> 00:17:08.260\nit's springing it out like so.\n\n305\n00:17:08.260 --> 00:17:13.709\nBecause it's saying each record is going\nto be separated by triple dots and\n\n306\n00:17:13.709 --> 00:17:15.360\nnot a number, right?\n\n307\n00:17:15.360 --> 00:17:16.660\nAnd so on and so forth.\n\n308\n00:17:16.660 --> 00:17:18.979\nSo, just playing around with stuff.\n\n309\n00:17:18.979 --> 00:17:22.213\nIf one isn't working,\nyou can change all these things and\n\n310\n00:17:22.213 --> 00:17:26.110\nthat's basically the jist of\nwhat you want to get from this.\n\n311\n00:17:26.110 --> 00:17:27.784\nAgain don't want to get too detailed.\n\n312\n00:17:27.784 --> 00:17:31.796\nWe've got a lot of ground to cover but\nI wanted you guys to be familiar with what\n\n313\n00:17:31.796 --> 00:17:34.760\nthese are,how they look,\nhow you can work with them.\n\n314\n00:17:34.760 --> 00:17:40.334\nAnd as you get into using gawk or\nyour flavor of awk more.\n\n315\n00:17:40.334 --> 00:17:45.250\nYou'll see, you know what, I can do\nthis because I know what that does now.\n\n316\n00:17:45.250 --> 00:17:46.852\nOkay, very cool.\n\n317\n00:17:46.852 --> 00:17:52.180\n&gt;&gt; Now, Daniel, one quick question\ncuz there is gawk is expansive.\n\n318\n00:17:52.180 --> 00:17:55.182\nWe've had discussions outside of this and\nI'm like I didn't know it could do that.\n\n319\n00:17:55.182 --> 00:17:56.830\nSo, we're about to find out.\n\n320\n00:17:56.830 --> 00:17:59.021\nBut records,\nthat is based on our mental model.\n\n321\n00:17:59.021 --> 00:18:02.642\nWe're defining what a record\nis using record separators and\n\n322\n00:18:02.642 --> 00:18:04.778\nalpha record separators correct?\n\n323\n00:18:04.778 --> 00:18:05.301\n&gt;&gt; Correct.\n\n324\n00:18:05.301 --> 00:18:07.348\n&gt;&gt; Okay all good?\n\n325\n00:18:07.348 --> 00:18:07.861\n&gt;&gt; Yeah.\n\n326\n00:18:07.861 --> 00:18:08.538\n&gt;&gt; You guys with us?\n\n327\n00:18:08.538 --> 00:18:09.863\nGood let's move on.\n\n328\n00:18:09.863 --> 00:18:13.871\nAll right other data variable\ntabs that we have available for\n\n329\n00:18:13.871 --> 00:18:15.685\nourselves inside of gawk.\n\n330\n00:18:15.685 --> 00:18:17.812\nExcuse me, moving onto cool stuff.\n\n331\n00:18:17.812 --> 00:18:19.240\nWe've got this interesting thing.\n\n332\n00:18:19.240 --> 00:18:21.610\nI made a file.\nI'm gonna clear the screen here.\n\n333\n00:18:21.610 --> 00:18:25.738\nAnd we've got these, like I call them,\nother data variables.\n\n334\n00:18:25.738 --> 00:18:28.290\nI can't really think of\na good definition for them.\n\n335\n00:18:28.290 --> 00:18:30.672\nMaybe we'll come up with something later.\n\n336\n00:18:30.672 --> 00:18:34.610\nLet me take a look at some,\nwell did I not make a data file?\n\n337\n00:18:34.610 --> 00:18:35.546\nI thought I did.\n\n338\n00:18:35.546 --> 00:18:37.195\nAnyway there's a few of these things.\n\n339\n00:18:37.195 --> 00:18:39.462\nOne is arg-c.\n\n340\n00:18:39.462 --> 00:18:44.015\nAll right, this is something that\nyou'll actually kind of like\n\n341\n00:18:44.015 --> 00:18:47.120\nthis seems like I know\na bit about this right.\n\n342\n00:18:47.120 --> 00:18:50.224\nIt's because we kind of did this\nin when we talked about like\n\n343\n00:18:50.224 --> 00:18:51.865\npositional parameters and stuff.\n\n344\n00:18:51.865 --> 00:18:56.510\nIt's very similar to that type of\nthing and arrays, that kind of thing.\n\n345\n00:18:56.510 --> 00:19:00.065\nIt's very in the same ball park,\nif that makes any sense.\n\n346\n00:19:00.065 --> 00:19:03.030\nOkay, let's see what argc does.\n\n347\n00:19:03.030 --> 00:19:04.685\nSo argc basically counts.\n\n348\n00:19:04.685 --> 00:19:07.172\nI think that's why they call it counts,\nor argc.\n\n349\n00:19:07.172 --> 00:19:08.687\nCuz c is for count, argument c.\n\n350\n00:19:08.687 --> 00:19:13.229\nCount up all the positional\nframe as arguments that\n\n351\n00:19:13.229 --> 00:19:18.310\nare being used in this statements and\ntell them, right?\n\n352\n00:19:18.310 --> 00:19:19.796\nAnd tell me how many there are.\n\n353\n00:19:19.796 --> 00:19:22.289\n[COUGH] Like I said, it counts them out.\n\n354\n00:19:22.289 --> 00:19:27.818\nLet's do this, I say gawk [INAUDIBLE]\nbegin statement like this and\n\n355\n00:19:27.818 --> 00:19:31.781\nI'm going to,\nwhere is my thing, there we go.\n\n356\n00:19:31.781 --> 00:19:35.361\nPrint ArgC like that and\n\n357\n00:19:35.361 --> 00:19:40.554\nnow repeated the file 1 about 1.\n\n358\n00:19:40.554 --> 00:19:41.358\nCan I do it?\n\n359\n00:19:41.358 --> 00:19:43.422\nDo it, there it is file1.text.\n\n360\n00:19:43.422 --> 00:19:48.711\nIt answer, here is our output 2.\n\n361\n00:19:48.711 --> 00:19:53.627\nSo it counted 2 arguments on the line.\n\n362\n00:19:53.627 --> 00:19:57.406\nI see Justin's head like a dog waiting for\na treat.\n\n363\n00:19:57.406 --> 00:19:58.134\n&gt;&gt; I'm sorry.\n\n364\n00:19:58.134 --> 00:19:59.705\n&gt;&gt; Yeah\n&gt;&gt; That's what's going on?\n\n365\n00:19:59.705 --> 00:20:01.380\nNot what you expected.\n\n366\n00:20:01.380 --> 00:20:02.839\n&gt;&gt; It's not what you expected.\n&gt;&gt; Not what he expected.\n\n367\n00:20:02.839 --> 00:20:04.406\nAnd there is a good reason for\nthat because it's weird.\n\n368\n00:20:04.406 --> 00:20:08.839\n[LAUGH] And\nthis is why gawk can be confusing.\n\n369\n00:20:08.839 --> 00:20:12.454\nThe reason he's not expecting it\nis because it's counting two here.\n\n370\n00:20:12.454 --> 00:20:18.162\nWell, we see file1.text, obviously\nthat's some form of argumentation.\n\n371\n00:20:18.162 --> 00:20:22.641\nAnd we remember back to\na traditional parameter stuff,\n\n372\n00:20:22.641 --> 00:20:27.704\ntypically also the invocation\nof a command is counted as well.\n\n373\n00:20:27.704 --> 00:20:31.348\nSo we got gawk being invoked.\n\n374\n00:20:31.348 --> 00:20:32.454\nWhat about all this?\n\n375\n00:20:32.454 --> 00:20:34.700\nThis isn't getting counted any way?\n\n376\n00:20:34.700 --> 00:20:42.383\nNope, the actual calling of\nthat is ignored, all right?\n\n377\n00:20:42.383 --> 00:20:45.948\nIt's not until,\n[LAUGH] pretty fun stuff, right?\n\n378\n00:20:45.948 --> 00:20:51.085\nSo, just you have to bear that\nin mind that that is ignored\n\n379\n00:20:51.085 --> 00:20:55.707\nas far as being taken in\nas argumentation for gawk.\n\n380\n00:20:55.707 --> 00:21:01.259\nAll right, so that being said\nwe now know what arg c does.\n\n381\n00:21:01.259 --> 00:21:05.302\nIt just counts up everything except for\nthe calling of itself.\n\n382\n00:21:05.302 --> 00:21:10.368\nNow we also have arg v which\nis basically saying here are.\n\n383\n00:21:10.368 --> 00:21:15.781\nI want you to reference those arguments,\nall right?\n\n384\n00:21:15.781 --> 00:21:21.081\nSo arg v, v for variable I assume.\n\n385\n00:21:21.081 --> 00:21:27.262\nGive me give me r variable one give me\nr variable two and so on and so forth.\n\n386\n00:21:27.262 --> 00:21:29.997\nSo if I wanted to play around with it and\n\n387\n00:21:29.997 --> 00:21:34.277\nshow you how it works I could do that,\nbut that's not gawk.\n\n388\n00:21:34.277 --> 00:21:35.928\nThat's gawk.\n\n389\n00:21:35.928 --> 00:21:39.645\nDo another begin and let's see here arg v.\n\n390\n00:21:39.645 --> 00:21:41.784\nWe will open this up.\n\n391\n00:21:41.784 --> 00:21:46.657\nWe will say, we'll change the,\nno no, we'll just do print.\n\n392\n00:21:46.657 --> 00:21:52.312\nJust say arg v and then you've got to\ngive it this open and closed braces.\n\n393\n00:21:52.312 --> 00:21:55.638\nI wanted arg v1.\n\n394\n00:21:55.638 --> 00:21:57.462\nThat's gonna grab the first argument.\n\n395\n00:21:57.462 --> 00:22:00.644\nNow I'm gonna do this\na little out of order so\n\n396\n00:22:00.644 --> 00:22:05.382\nyou can just see how this works,\nand then I'm going to do arg v0.\n\n397\n00:22:05.382 --> 00:22:06.799\nSo I'll say, that's nice.\n\n398\n00:22:06.799 --> 00:22:07.942\nGot a little LinkedIn thing going on.\n\n399\n00:22:07.942 --> 00:22:09.631\nGo away.\n\n400\n00:22:09.631 --> 00:22:10.866\nWait for me, than you.\n\n401\n00:22:10.866 --> 00:22:17.763\nI'll say arg v0 like that, right?\n\n402\n00:22:17.763 --> 00:22:21.732\nSo, I'm asking for the first argument and\nthe zero with arg x because remember a lot\n\n403\n00:22:21.732 --> 00:22:24.357\nof computers,\nthey like to start counting from zero.\n\n404\n00:22:24.357 --> 00:22:27.177\nSo, the zero is actually\nthe first argument.\n\n405\n00:22:27.177 --> 00:22:27.890\nThis would be good.\n\n406\n00:22:27.890 --> 00:22:29.701\nAnything else I want to do here?\n\n407\n00:22:29.701 --> 00:22:30.744\nI don't think so.\n\n408\n00:22:30.744 --> 00:22:34.471\nSo we'll just finish it off like so,\n\n409\n00:22:34.471 --> 00:22:38.807\nfeed it some parameters, the input file.\n\n410\n00:22:38.807 --> 00:22:45.755\nAnd you'll notice it printed arg v\nnumber 1, which it saw as file1.txt.\n\n411\n00:22:45.755 --> 00:22:48.256\nSo that's arg v1 right there.\n\n412\n00:22:48.256 --> 00:22:55.341\nAnd then arg v0 is gap\nwhich is right there.\n\n413\n00:22:55.341 --> 00:22:56.046\nSo there you go.\n\n414\n00:22:56.046 --> 00:22:58.270\nI put that order as such as you could see.\n\n415\n00:22:58.270 --> 00:23:00.297\nI could reformat that if I want.\n\n416\n00:23:00.297 --> 00:23:05.289\nAnd now if I need to call them inside of\nthe gawk script, I can say arg v this or\n\n417\n00:23:05.289 --> 00:23:09.726\narg c or whatever I need to do to\nwork with something that came in from\n\n418\n00:23:09.726 --> 00:23:11.489\nthe command line itself.\n\n419\n00:23:11.489 --> 00:23:13.601\nPretty cool, there we go.\n\n420\n00:23:13.601 --> 00:23:15.771\nAgain, don't want to get too\nin depth with these things.\n\n421\n00:23:15.771 --> 00:23:19.425\nWe've got a lot to cover and\nprecious little time to get it done.\n\n422\n00:23:19.425 --> 00:23:21.497\nLet's start cranking up the heat.\n\n423\n00:23:21.497 --> 00:23:22.388\nAnother one, NF.\n\n424\n00:23:22.388 --> 00:23:23.813\nVery cool thing,\n\n425\n00:23:23.813 --> 00:23:28.759\nbasically NF is a shortcut to\nthe last date of field variable.\n\n426\n00:23:28.759 --> 00:23:31.922\nSo, let me show you what I mean.\n\n427\n00:23:31.922 --> 00:23:36.201\nI will do gawk, open that up.\n\n428\n00:23:36.201 --> 00:23:38.678\nWe will begin.\n\n429\n00:23:38.678 --> 00:23:42.089\nBegin, I cannot type, horrible typist.\n\n430\n00:23:42.089 --> 00:23:43.830\nI should take a class or something.\n\n431\n00:23:43.830 --> 00:23:49.469\nWe're gonna change the field\nseparator to a comma.\n\n432\n00:23:49.469 --> 00:23:53.449\nI'll close that part of the statement off,\nopen up a print.\n\n433\n00:23:53.449 --> 00:23:56.160\nAnd we will print $1.\n\n434\n00:23:56.160 --> 00:24:00.291\nAnd dollar sign NF, like that.\n\n435\n00:24:00.291 --> 00:24:01.730\nHm, what's it gonna do?\n\n436\n00:24:01.730 --> 00:24:04.705\nWell, we don't know,\nlet's close it out there.\n\n437\n00:24:04.705 --> 00:24:08.390\n[INAUDIBLE] off and we call file1.txt.\n\n438\n00:24:08.390 --> 00:24:12.248\nHit Enter, and here is what it does.\n\n439\n00:24:12.248 --> 00:24:15.010\nDollar sign 1.\n\n440\n00:24:15.010 --> 00:24:17.890\nI missed something here, let me see here.\n\n441\n00:24:17.890 --> 00:24:20.900\nA little craziness going on,\nwhat did I miss?\n\n442\n00:24:21.980 --> 00:24:23.520\nPrint one print NF.\n\n443\n00:24:25.570 --> 00:24:27.100\nWhy are you doing this to me?\n\n444\n00:24:28.130 --> 00:24:32.110\nBecause it should have just given me,\nthis variable right here is supposed to be\n\n445\n00:24:32.110 --> 00:24:37.620\nthe very last variable given,\nbut it's not showing up.\n\n446\n00:24:38.760 --> 00:24:42.448\n&gt;&gt; No Daniel, would that be caused by\nfilled separator not being assigned\n\n447\n00:24:42.448 --> 00:24:44.849\nproperly because we do\nnot have an equal sign?\n\n448\n00:24:44.849 --> 00:24:46.145\nFilled separator equals.\n\n449\n00:24:46.145 --> 00:24:49.967\n&gt;&gt; Thank you sir, yes, see, syntax\n[INAUDIBLE] I'm trying to crank through as\n\n450\n00:24:49.967 --> 00:24:52.250\nfast as I can and\nthat is exactly the problem.\n\n451\n00:24:52.250 --> 00:24:54.230\nSo all of that is one big field.\n\n452\n00:24:54.230 --> 00:24:55.340\nGood catch Justin, thank you sir.\n\n453\n00:24:55.340 --> 00:24:56.762\nLet's try that again.\n\n454\n00:24:56.762 --> 00:24:59.290\nHey there,\nit works a whole lot better, right?\n\n455\n00:24:59.290 --> 00:25:01.056\nGive me the kind of data I'm looking for.\n\n456\n00:25:01.056 --> 00:25:04.861\nSo NF all that took to show\nyou NF [INAUDIBLE] equal sign,\n\n457\n00:25:04.861 --> 00:25:07.191\nthe whole thing breaks, right?\n\n458\n00:25:07.191 --> 00:25:10.010\nNF is whatever the last one.\n\n459\n00:25:10.010 --> 00:25:14.690\nSo if I don't know how many fields\nare there, but I know it's the last one.\n\n460\n00:25:14.690 --> 00:25:16.430\nI can just reference it within it.\n\n461\n00:25:16.430 --> 00:25:19.980\nAll right, dollar sign it enough.\n\n462\n00:25:19.980 --> 00:25:22.000\nWhat else do we have?\n\n463\n00:25:22.000 --> 00:25:23.360\nWe have FNR.\n\n464\n00:25:23.360 --> 00:25:24.620\nInteresting little beast here.\n\n465\n00:25:24.620 --> 00:25:30.030\nWe'll run a script and\nI'll show you, we'll deconstruct it.\n\n466\n00:25:30.030 --> 00:25:32.560\nWe'll do another begin.\n\n467\n00:25:32.560 --> 00:25:36.590\nWe will change film separator and\nthis time we won't forget my equal sign.\n\n468\n00:25:36.590 --> 00:25:40.220\nWith that reason in\nthe same file close it of.\n\n469\n00:25:40.220 --> 00:25:46.980\nAnd then we're gonna fringe,\nI'm looking at the wrong, wrong one.\n\n470\n00:25:46.980 --> 00:25:50.378\nWe're just gonna do a fringe statement\nhere if you allow me to begin for this.\n\n471\n00:25:50.378 --> 00:25:55.590\nI'm gonna say print, gotta open it\n\n472\n00:25:55.590 --> 00:26:00.634\nup correctly, $1 and then FNR.\n\n473\n00:26:00.634 --> 00:26:05.141\nAnd let's see, I'm not using a dollar\nsign here and if I remember,\n\n474\n00:26:05.141 --> 00:26:08.239\nthis is the kind of little\nnuisances I forget.\n\n475\n00:26:08.239 --> 00:26:11.850\nMaybe that's a typo, maybe I dollar sign,\nwe'll see here in just a second.\n\n476\n00:26:11.850 --> 00:26:15.847\nAlways forget little nuances like that,\nbut\n\n477\n00:26:15.847 --> 00:26:19.948\nI'll follow my script and\nsee what happens and\n\n478\n00:26:19.948 --> 00:26:24.810\nwe'll say file2.txt and\nfile4.txt, like that.\n\n479\n00:26:24.810 --> 00:26:28.870\nSo we got a bit of interesting\nthings happening here.\n\n480\n00:26:28.870 --> 00:26:31.970\nSo let me hit Enter, so we can see this.\n\n481\n00:26:31.970 --> 00:26:38.770\nSo inside, I fed it two input files and\nthat's kind of the purpose of F&amp;R.\n\n482\n00:26:38.770 --> 00:26:41.840\nI fed it file two and file four.\n\n483\n00:26:41.840 --> 00:26:46.090\nSo inside of file two,\nit basically, in dollar sign one,\n\n484\n00:26:46.090 --> 00:26:47.830\nin that first field parameter.\n\n485\n00:26:47.830 --> 00:26:50.800\nIt's just counting in\ntens up to a hundred.\n\n486\n00:26:50.800 --> 00:26:53.833\n10, 20, 30, 40, 50, 60,\n70, 80, 90, and 100.\n\n487\n00:26:53.833 --> 00:26:57.760\nYou'll notice there's a one, two, three,\nfour, five, six, seven, eight, nine, and\n\n488\n00:26:57.760 --> 00:26:58.427\nten next to it.\n\n489\n00:26:58.427 --> 00:27:02.812\nAnd, then we get to here, which is the\nbeginning of file four dot text, which is\n\n490\n00:27:02.812 --> 00:27:07.140\ncounting one through ten, and then it\ncounts one through ten next to it again.\n\n491\n00:27:07.140 --> 00:27:09.620\nLike, we're getting two fields.\n\n492\n00:27:09.620 --> 00:27:15.330\nYou'll notice I just add dollar sign so\nthis could just be dollar sign one,\n\n493\n00:27:15.330 --> 00:27:20.820\nbut if I cat each one of those files that\nwon't be the case if we say cats file two.\n\n494\n00:27:20.820 --> 00:27:25.260\nYou'll see dollar sign one is 10, 20, 30,\n\n495\n00:27:25.260 --> 00:27:28.120\n40, 50 and then there's the reverse\nof that on the other side.\n\n496\n00:27:29.390 --> 00:27:30.660\nStrange.\nWell, what's happening?\n\n497\n00:27:30.660 --> 00:27:37.250\nWell, F and R is keeping track of each\ndata record and letting you know,\n\n498\n00:27:37.250 --> 00:27:41.560\nthis is data record one, two, three,\nfour, five, six, seven and so on, right?\n\n499\n00:27:41.560 --> 00:27:44.530\nAnd it's doing it individually for\neach of the files that I fed it.\n\n500\n00:27:45.550 --> 00:27:48.250\nSo, if I needed to do that,\nI could use F and R and obviously,\n\n501\n00:27:48.250 --> 00:27:49.460\nI don't need the dollar sign for that.\n\n502\n00:27:49.460 --> 00:27:50.710\nI wrote it correctly.\n\n503\n00:27:50.710 --> 00:27:53.270\nGood for me and that's cool so\n\n504\n00:27:53.270 --> 00:27:57.370\nnow I can kind of see,\nI got a bit of separation going on here.\n\n505\n00:27:57.370 --> 00:28:00.830\nI can see exactly where file two ends and\n\n506\n00:28:00.830 --> 00:28:04.430\nfile four begins because it\nstarts counting over again.\n\n507\n00:28:04.430 --> 00:28:09.640\nThis is a new input record or import file?\n\n508\n00:28:09.640 --> 00:28:10.870\nI'll restart my account.\n\n509\n00:28:10.870 --> 00:28:12.860\nFNR does that but\nwhat if you don't want to do that?\n\n510\n00:28:12.860 --> 00:28:18.130\nWhat if you just want to keep\ntrack of them continually?\n\n511\n00:28:18.130 --> 00:28:20.520\nWell, you can use the NR to do that.\n\n512\n00:28:20.520 --> 00:28:21.950\nSo we'll just come over here.\n\n513\n00:28:21.950 --> 00:28:26.612\nI believe we change that, yeah,\nchange that out to NR, and\n\n514\n00:28:26.612 --> 00:28:33.076\nnow you'll notice that it doesn't stop at\nten once file four makes itself known.\n\n515\n00:28:33.076 --> 00:28:34.970\nIt just goes 11, 12, 13,\n14, so on and so forth.\n\n516\n00:28:34.970 --> 00:28:40.260\nSo FNR and NR, one counts each\n\n517\n00:28:40.260 --> 00:28:44.480\nrecord individually and\nkeeps track of the record fields.\n\n518\n00:28:44.480 --> 00:28:47.430\nThe other counts them like sequentially or\n\n519\n00:28:47.430 --> 00:28:52.880\ncontinually, regardless of the amount of\ndata files that you input to it, okay?\n\n520\n00:28:52.880 --> 00:28:54.320\nPretty cool stuff.\n\n521\n00:28:55.650 --> 00:28:57.710\nI think I'm about done.\n\n522\n00:28:57.710 --> 00:28:58.600\nI think we got one more thing.\n\n523\n00:28:58.600 --> 00:29:00.570\nLet's just talk about user defined DERs.\n\n524\n00:29:00.570 --> 00:29:02.960\nThese have been all built in\nvariables that we mess with.\n\n525\n00:29:02.960 --> 00:29:05.110\nWhat if I wanna make my own variable,\nright?\n\n526\n00:29:05.110 --> 00:29:06.780\nI got that to do.\n\n527\n00:29:06.780 --> 00:29:08.300\nWell, let's quickly make that happen.\n\n528\n00:29:08.300 --> 00:29:09.160\nLet's work with that.\n\n529\n00:29:09.160 --> 00:29:09.810\nI'm gonna clear.\n\n530\n00:29:11.870 --> 00:29:19.350\nLet's look at this, I've got cat gowk\nunderscore user def like 1 dot gowk.\n\n531\n00:29:20.820 --> 00:29:26.620\nSo here is a script I define\nbegin very simply easily done.\n\n532\n00:29:26.620 --> 00:29:29.200\nBar 1 equals blue, bar 2 equals green, and\n\n533\n00:29:29.200 --> 00:29:34.720\nsome pretty quotations around on what\nthe value to be because it is a string.\n\n534\n00:29:34.720 --> 00:29:38.900\nAnd then referencing\nlike we'd done in bash.\n\n535\n00:29:38.900 --> 00:29:39.730\nA little bit different there,\n\n536\n00:29:39.730 --> 00:29:41.790\nwhich is I don't need the dollar\nsigns when I reference them,\n\n537\n00:29:41.790 --> 00:29:43.510\nI just need the name of\nthe variable itself.\n\n538\n00:29:43.510 --> 00:29:47.550\nSo I've got var one, var two, what they\nequal, and then I'm printing var one,\n\n539\n00:29:47.550 --> 00:29:51.820\nvar two, and then print var two,\nvar one Pretty simple, right?\n\n540\n00:29:51.820 --> 00:29:54.370\nSo now, I should be able to run that and\n\n541\n00:29:54.370 --> 00:29:59.470\nfeed that script file into gawk, and\nlet those variables do their magic, okay?\n\n542\n00:29:59.470 --> 00:30:05.154\nSo if I do that, if I say,\ngawk dash f, and it was called gawk\n\n543\n00:30:05.154 --> 00:30:11.700\nuser def 1 dot gawk, I should just be\nable to hammer it away, and look at that.\n\n544\n00:30:11.700 --> 00:30:14.770\nIt says blue green, green blue, right?\n\n545\n00:30:14.770 --> 00:30:17.690\nThat's spaced in between them\ncuz it doesn't really see\n\n546\n00:30:17.690 --> 00:30:18.980\nthat space as any kind of difference.\n\n547\n00:30:18.980 --> 00:30:22.190\nIt's not like a field separator, right?\n\n548\n00:30:22.190 --> 00:30:24.150\nWe can also do numbers as well.\n\n549\n00:30:24.150 --> 00:30:25.680\nI've got one called math.\n\n550\n00:30:25.680 --> 00:30:28.990\nLet's cap that, was it gawk, math.gawk.\n\n551\n00:30:28.990 --> 00:30:33.940\nHere we go, x, y, and\nz equals 4, 5, and 6.\n\n552\n00:30:33.940 --> 00:30:38.260\nAnswer, and then I just threw it\ninto like a mathematical equation.\n\n553\n00:30:38.260 --> 00:30:39.520\nIt was at random.\n\n554\n00:30:39.520 --> 00:30:40.620\nThis was completely random.\n\n555\n00:30:40.620 --> 00:30:44.190\nI have no idea what the answer's supposed\nto be, but we can print answer because\n\n556\n00:30:44.190 --> 00:30:49.440\nanswer equals slerping and all those other\nvariables with numbers and do some magic.\n\n557\n00:30:49.440 --> 00:30:52.030\nHey, look at that,\nyou've got yourself an answer.\n\n558\n00:30:52.030 --> 00:30:57.665\nSo let's try that, gawk -F and\nit was gawk_math.gawk and\n\n559\n00:30:57.665 --> 00:31:01.430\napparently the answer is four.\n\n560\n00:31:01.430 --> 00:31:02.535\n&gt;&gt; I can verify that Daniel.\n\n561\n00:31:02.535 --> 00:31:04.693\n&gt;&gt; [LAUGH]\n&gt;&gt; I was like, let me see.\n\n562\n00:31:04.693 --> 00:31:06.775\n&gt;&gt; [SOUND] But yeah, should before.\n\n563\n00:31:06.775 --> 00:31:08.265\n&gt;&gt; Crazy math majors.\n\n564\n00:31:08.265 --> 00:31:10.807\n[LAUGH] I could never done\nthat in my head [LAUGH].\n\n565\n00:31:10.807 --> 00:31:12.950\nAt least not in the time\nhe did it anytime.\n\n566\n00:31:12.950 --> 00:31:15.840\nAll right, what else do I have,\nanything else?\n\n567\n00:31:15.840 --> 00:31:20.370\nYes, defining a variables\nfrom the command line itself.\n\n568\n00:31:20.370 --> 00:31:22.130\nSo you're not calling from a script.\n\n569\n00:31:22.130 --> 00:31:25.460\nYou want to define them\nin the commandline.\n\n570\n00:31:25.460 --> 00:31:27.200\nHow do we do that?\n\n571\n00:31:27.200 --> 00:31:31.410\nI'll show you that real quick, gawk.\n\n572\n00:31:31.410 --> 00:31:32.710\nI do have this userdef too.\n\n573\n00:31:32.710 --> 00:31:37.910\nLet me show it to you real quick,\ncat gawk_userdef2.\n\n574\n00:31:38.910 --> 00:31:41.746\nAnd here all I'm doing is\na little baby script here,\n\n575\n00:31:41.746 --> 00:31:44.975\ndefining the field separator and\nprinting dollar sign in.\n\n576\n00:31:44.975 --> 00:31:49.696\nNow, I am using a dollar sign to\nreference the variable that we're\n\n577\n00:31:49.696 --> 00:31:53.168\ngoing to call from the command line,\nall right?\n\n578\n00:31:53.168 --> 00:31:56.338\nSo, if you're pulling variables from\nthe command line, Inside of scripts.\n\n579\n00:31:56.338 --> 00:32:00.283\nIf that's where they're going into, like\nyou're feeding a variable into a script\n\n580\n00:32:00.283 --> 00:32:04.590\nfrom the command line, you're gonna then\nneed to reference them with a dollar sign.\n\n581\n00:32:04.590 --> 00:32:06.480\nImportant distinction you need to make.\n\n582\n00:32:06.480 --> 00:32:11.591\nAll right let's do that, so\nlet's see here, gawk, and\n\n583\n00:32:11.591 --> 00:32:17.250\nthen -f the user def, to file,\nand then I'm gonna say n=2.\n\n584\n00:32:17.250 --> 00:32:23.126\nSo now I'm defining what this $n is, okay?\n\n585\n00:32:23.126 --> 00:32:28.518\nAnd then I will, do I need it,\nyeah, file1.txt.\n\n586\n00:32:28.518 --> 00:32:32.030\nSo I'm gonna feed in an input file for\nthis one, and here we go.\n\n587\n00:32:32.030 --> 00:32:35.067\nIt gave me the second field,\nbecause I said print,\n\n588\n00:32:35.067 --> 00:32:37.127\ndollar sign, cuz what am I doing?\n\n589\n00:32:37.127 --> 00:32:39.610\nI guess technically, yeah,\nI'm confusing myself.\n\n590\n00:32:39.610 --> 00:32:42.970\nYou don't need the dollar\nsign necessarily,\n\n591\n00:32:42.970 --> 00:32:46.320\nI do need it here because\nI'm referencing a field.\n\n592\n00:32:46.320 --> 00:32:51.720\nSo it would need dollar sign something,\nwhat field do I want, right?\n\n593\n00:32:51.720 --> 00:32:55.150\nSo yeah, like I said, I'm confusing myself\ncuz I'm trying to ramble and get this out,\n\n594\n00:32:55.150 --> 00:32:57.260\nwe're well out of time for this show.\n\n595\n00:32:57.260 --> 00:33:00.781\nSo here I was defining that field,\nso what field was it?\n\n596\n00:33:00.781 --> 00:33:04.981\n$2, if I cat file1.text.\n\n597\n00:33:04.981 --> 00:33:11.450\nThe second field, if we're common\ndelimiting, is the email field, okay?\n\n598\n00:33:11.450 --> 00:33:13.835\nSo I'm able to reference\nthat from out of here.\n\n599\n00:33:13.835 --> 00:33:18.065\nNow there's a little\ninteresting thing here,\n\n600\n00:33:18.065 --> 00:33:21.871\nif you wanna input a variable definition,\n\n601\n00:33:21.871 --> 00:33:26.098\na value of a variable,\ninto a begin statement,\n\n602\n00:33:26.098 --> 00:33:32.356\nthen you have to use the -v option\nfrom the command line first, okay?\n\n603\n00:33:32.356 --> 00:33:35.762\nSo if you don't, it won't work,\njust keep that in mind.\n\n604\n00:33:35.762 --> 00:33:40.370\nLet me show you,\nif we basically do this over again, and\n\n605\n00:33:40.370 --> 00:33:43.950\nI come in here and I say,\nis it a different one?\n\n606\n00:33:43.950 --> 00:33:50.339\nYeah, I change this,\nthis would beginning var, Like so,\n\n607\n00:33:50.339 --> 00:33:55.273\nand I fire that off, only the thing\nthat has changed is what it is.\n\n608\n00:33:55.273 --> 00:34:00.814\nYou'll notice I'm looking at field, and\nthere should be a number 2 over there.\n\n609\n00:34:00.814 --> 00:34:04.180\nBut it doesn't show that,\ncuz if I cat gawk,\n\n610\n00:34:06.428 --> 00:34:12.280\nbeginningvar.gawk, you'll see in the begin\nstatement, print looking at field n.\n\n611\n00:34:12.280 --> 00:34:12.848\nWhat is n?\n\n612\n00:34:12.848 --> 00:34:16.340\nWell n's defined as 2,\nwhy did it not print 2?\n\n613\n00:34:16.340 --> 00:34:19.320\nBecause it doesn't work without\nthe -v option, that's the long and\n\n614\n00:34:19.320 --> 00:34:20.680\nthe short of it.\n\n615\n00:34:20.680 --> 00:34:25.690\nAnd I do like to move these,\nwhen I do this, to over here,\n\n616\n00:34:25.690 --> 00:34:28.790\nso -v then n=2.\n\n617\n00:34:28.790 --> 00:34:33.190\nAnd now, looking at field 2,\nand it shows up.\n\n618\n00:34:33.190 --> 00:34:35.980\nSo just remember that if you're\nreferencing variables or\n\n619\n00:34:35.980 --> 00:34:40.180\ndefining variables from the command\nline into a begin statement,\n\n620\n00:34:40.180 --> 00:34:43.930\ngotta add that -v option and\nthen define it, all right?\n\n621\n00:34:43.930 --> 00:34:47.901\nI think for variables that should cover\nus, again this is an extensive broad,\n\n622\n00:34:47.901 --> 00:34:48.994\nbroad, broad look.\n\n623\n00:34:48.994 --> 00:34:50.444\nA wide nest is being cast, and\n\n624\n00:34:50.444 --> 00:34:53.970\nwe're just trying to give you guys\nsome basics of the advanced stuff.\n\n625\n00:34:53.970 --> 00:34:55.599\nAnd then you can take it from there.\n\n626\n00:34:55.599 --> 00:34:57.307\nBut I think that's all I got for\nvariables, but\n\n627\n00:34:57.307 --> 00:34:59.630\nthat's not the end of advanced\nGawk stuff we're gonna look at.\n\n628\n00:34:59.630 --> 00:35:01.870\n&gt;&gt; Well, I'm pretty excited to\nlearn a little more about Gawk,\n\n629\n00:35:01.870 --> 00:35:04.400\nbecause I've already seen a few\nthings where I'm mulling over\n\n630\n00:35:04.400 --> 00:35:07.240\nin my head over here,\nI'm like wait a minute I could use that.\n\n631\n00:35:07.240 --> 00:35:10.240\nAnd then you have highlighted some\nof those nuanced behaviors that\n\n632\n00:35:10.240 --> 00:35:13.410\nI think would probably be\nfrustrating to me, upon initial use.\n\n633\n00:35:13.410 --> 00:35:15.793\nBut thank you so much for giving us,\n\n634\n00:35:15.793 --> 00:35:20.491\nkind of revealing from behind the curtain,\nthe intricacies of Gawk.\n\n635\n00:35:20.491 --> 00:35:23.445\nBut definitely stay tuned,\nwe got more advance Gawk coming at you.\n\n636\n00:35:23.445 --> 00:35:25.475\nBut for this episode we are done, so\n\n637\n00:35:25.475 --> 00:35:28.485\nsigning out for ITProTV,\nI've been your host, Justin Dennison.\n\n638\n00:35:28.485 --> 00:35:29.305\n&gt;&gt; And I'm Daniel Lowrie.\n\n639\n00:35:29.305 --> 00:35:31.828\n&gt;&gt; And we'll see you next time.\n\n640\n00:35:31.828 --> 00:35:37.514\n[MUSIC]\n\n641\n00:35:37.514 --> 00:35:41.098\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "240882508"
        },
        {
          "description": "In this episode, Daniel and Justin dive into working with gawk arrays. Here they explain Associative Arrays, defining array variables, array iteration, and deleting array variables. They also touch a bit more on using Regular Expression in gawk.",
          "length": "1964",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-2-1-advanced_gawk_arrays-110117-PGM.00_36_44_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-2-1-advanced_gawk_arrays-110117-PGM.00_36_44_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-2-1-advanced_gawk_arrays-110117-PGM.00_36_44_05.Still001-sm.jpg",
          "title": "Advanced gawk: Arrays",
          "transcript": "WEBVTT\n\n1\n00:00:00.330 --> 00:00:02.677\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.677 --> 00:00:06.432\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.432 --> 00:00:08.348\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.348 --> 00:00:11.782\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.782 --> 00:00:15.759\n&gt;&gt; Greetings, everyone, and welcome back\nto another exciting episode of ITProTV.\n\n6\n00:00:15.759 --> 00:00:18.916\nI'm your host, Justin Dennison, and\nwe're back with more advanced gawk,\n\n7\n00:00:18.916 --> 00:00:21.460\nwhich is part of our advanced\nshell scripting series.\n\n8\n00:00:21.460 --> 00:00:23.668\nAnd we're gonna be\nlooking at arrays today.\n\n9\n00:00:23.668 --> 00:00:27.938\nAnd luckily we have someone in the studio\nwho is going to reveal all about them, Mr.\n\n10\n00:00:27.938 --> 00:00:28.798\nDaniel Lowrie.\n\n11\n00:00:28.798 --> 00:00:29.983\nHow are you doing today, Daniel?\n\n12\n00:00:29.983 --> 00:00:30.883\n&gt;&gt; Doing fantastic Justin.\n\n13\n00:00:30.883 --> 00:00:34.140\nGlad to be back on the show again\nwith our good audience out there,\n\n14\n00:00:34.140 --> 00:00:35.215\nwherever you may be.\n\n15\n00:00:35.215 --> 00:00:39.291\nHopefully, you guys are ready to\ndive into some arrays using gawk,\n\n16\n00:00:39.291 --> 00:00:43.094\nbecause that's what,\nas the man has said, we are going to do.\n\n17\n00:00:43.094 --> 00:00:46.702\nAnd it's an interesting thing,\nwe've worked with arrays with bash, right.\n\n18\n00:00:46.702 --> 00:00:51.056\nWe're in an advanced bash scripting\ncourse, so we've dealt with that.\n\n19\n00:00:51.056 --> 00:00:54.390\nIt should be familiar territory,\nwhat is an array?\n\n20\n00:00:54.390 --> 00:00:59.020\nIt's an interesting thing when it comes\nto gawk because with gawk they use what's\n\n21\n00:00:59.020 --> 00:01:01.182\ncalled associative arrays, right?\n\n22\n00:01:01.182 --> 00:01:02.980\nBig word, man, I'm feeling good.\n\n23\n00:01:02.980 --> 00:01:05.849\nI feel like I actually earned my money\ntoday, I said associative arrays.\n\n24\n00:01:05.849 --> 00:01:09.250\nThat's a big fancy term for\nsaying, it's a dictionary, right.\n\n25\n00:01:09.250 --> 00:01:11.875\nI've got a value, or I've got a key.\n\n26\n00:01:11.875 --> 00:01:15.640\nAnd that key is mapped to a certain value,\nokay.\n\n27\n00:01:15.640 --> 00:01:19.411\nThey also call these hash tables,\nyou maybe have heard that term before.\n\n28\n00:01:19.411 --> 00:01:21.890\nSame kind of idea, okay?\n\n29\n00:01:21.890 --> 00:01:25.710\nSo today we're gonna show you\nhow to create an array for\n\n30\n00:01:25.710 --> 00:01:28.699\nyour gawk scripts so\nthat you can use them,\n\n31\n00:01:28.699 --> 00:01:33.451\nmanipulate them, work with them,\ndo all that you need to do alone.\n\n32\n00:01:33.451 --> 00:01:35.828\nI'll requalify that, I won't say all.\n\n33\n00:01:35.828 --> 00:01:37.899\nWe're gonna get you familiar with it so\n\n34\n00:01:37.899 --> 00:01:41.302\nthat you can use that as a springboard\ninto more advanced stuff.\n\n35\n00:01:41.302 --> 00:01:45.012\nAgain, this show could be an entire\nseries in and of itself, so\n\n36\n00:01:45.012 --> 00:01:49.910\nI just wanna give you guys the basics,\ngive you some idea of how stuff works.\n\n37\n00:01:49.910 --> 00:01:53.899\nAnd that way you can start implementing\nat least into some extent, these and\n\n38\n00:01:53.899 --> 00:01:55.722\nmore advanced functionalities.\n\n39\n00:01:55.722 --> 00:01:57.843\nAll right, so let's array it up, right?\n\n40\n00:01:57.843 --> 00:01:59.300\nLet's move into it here, let's see here.\n\n41\n00:01:59.300 --> 00:02:01.054\nWhere do we wanna start?\n\n42\n00:02:01.054 --> 00:02:03.780\nDefining arrays,\nI guess would be a good thing to do.\n\n43\n00:02:03.780 --> 00:02:05.365\nLet's see how this works.\n\n44\n00:02:05.365 --> 00:02:07.627\nYou've got a format you need to follow,\nand\n\n45\n00:02:07.627 --> 00:02:10.050\nbasically it should look kinda like this.\n\n46\n00:02:10.050 --> 00:02:12.861\nYou've got array name.\n\n47\n00:02:12.861 --> 00:02:16.352\nI just put the underscore in\nthere to help you see it better.\n\n48\n00:02:16.352 --> 00:02:19.731\nAnd then it will be kinda\nlike you have an index, so\n\n49\n00:02:19.731 --> 00:02:24.030\nyou gotta do these square\nbrackets in index key.\n\n50\n00:02:24.030 --> 00:02:27.585\nJust put key here, like that,\nthere's your index.\n\n51\n00:02:27.585 --> 00:02:33.312\nAnd then you have your\nactual equals your elements.\n\n52\n00:02:33.312 --> 00:02:36.781\nAll right, that's kind of the names for\nthese things, right?\n\n53\n00:02:36.781 --> 00:02:41.307\nSo you've got array name, your index,\nyour index key, the key value and\n\n54\n00:02:41.307 --> 00:02:47.040\nthen whatever that equals, right,\nthat elements, that's gonna look to, okay?\n\n55\n00:02:47.040 --> 00:02:51.469\nNot too difficult, not too crazy here.\n\n56\n00:02:51.469 --> 00:02:56.320\nSo now that we know the format of it,\nlet's see it in more practicum, right?\n\n57\n00:02:56.320 --> 00:03:02.722\nSo I've got myself an interesting\nlittle string-based element here.\n\n58\n00:03:02.722 --> 00:03:03.293\nWhat did I call it?\n\n59\n00:03:03.293 --> 00:03:06.728\nI think it's just,\nwhat did I call this thing?\n\n60\n00:03:06.728 --> 00:03:07.905\nI'm just gonna define it.\n\n61\n00:03:07.905 --> 00:03:09.503\nI didn't do it in a script yet.\n\n62\n00:03:09.503 --> 00:03:11.910\nI'm gonna do it from the command line.\n\n63\n00:03:11.910 --> 00:03:13.462\nGive you a simple one, right?\n\n64\n00:03:13.462 --> 00:03:17.829\nI don't know why you would do this,\nbut other than demonstrative purposes,\n\n65\n00:03:17.829 --> 00:03:20.868\nif you wanted to do this from\na command line you could.\n\n66\n00:03:20.868 --> 00:03:22.826\n[LAUGH] It'd just be not a lot of fun.\n\n67\n00:03:22.826 --> 00:03:24.280\nTypically this would be inside scripts.\n\n68\n00:03:24.280 --> 00:03:26.224\nBut I'm gonna give you a simple one so\nwe can do this.\n\n69\n00:03:26.224 --> 00:03:32.511\nSo I'm gonna say like, gawk, oops, BEGIN.\n\n70\n00:03:32.511 --> 00:03:38.628\nI'm gonna call it movies is my array name,\nokay.\n\n71\n00:03:38.628 --> 00:03:45.891\nAnd then I will give my key, and in double\nquotations because this is a string key,\n\n72\n00:03:45.891 --> 00:03:51.300\nright, a string-based index,\nif that makes sense.\n\n73\n00:03:51.300 --> 00:03:53.890\nI will say Stripes.\n\n74\n00:03:53.890 --> 00:03:58.460\nIt's a great flick, and if you haven't\nseen it, go watch it right now, all right?\n\n75\n00:03:58.460 --> 00:04:03.265\nSo we've got my array name,\nwe've got my key or my index.\n\n76\n00:04:03.265 --> 00:04:06.110\nAnd now I just need to give\nit the element, right?\n\n77\n00:04:06.110 --> 00:04:10.198\nSo I will say equals, and\n\n78\n00:04:10.198 --> 00:04:16.829\nin quotations Bill Murray, like that.\n\n79\n00:04:16.829 --> 00:04:20.980\nAnd now once I'm done with that,\nI can just go print wild.\n\n80\n00:04:20.980 --> 00:04:24.366\nPrint movies, right,\nthat's my array name, and\n\n81\n00:04:24.366 --> 00:04:28.554\nthen I need to give it the key,\nright, which would be Stripes.\n\n82\n00:04:28.554 --> 00:04:33.290\nThen stripes,\nforget my double quotes, stripes.\n\n83\n00:04:34.496 --> 00:04:36.008\nI hate when it wraps.\n\n84\n00:04:36.008 --> 00:04:37.740\nWell, well,\nwe're gonna have to deal with it.\n\n85\n00:04:37.740 --> 00:04:42.277\nStripes, close it off, close it off,\nclose it off, close it off.\n\n86\n00:04:42.277 --> 00:04:43.992\nThat's a lot of closing out, isn't it?\n\n87\n00:04:43.992 --> 00:04:44.920\nSo much fun.\n\n88\n00:04:44.920 --> 00:04:46.398\nMake sure I didn't forget anything.\n\n89\n00:04:46.398 --> 00:04:47.785\nI think not, let's hit it.\n\n90\n00:04:47.785 --> 00:04:50.211\nAnd look, it prints Bill Murray.\n\n91\n00:04:50.211 --> 00:04:54.364\nThat's a lot of work to get\nBill Murray to put out there, but\n\n92\n00:04:54.364 --> 00:04:57.783\nthat's just the very simplified idea,\nright?\n\n93\n00:04:57.783 --> 00:05:01.345\nWe've defined our array,\nwhich is called movies.\n\n94\n00:05:01.345 --> 00:05:04.860\nWe've defined the index,\nwhich is string-based.\n\n95\n00:05:04.860 --> 00:05:06.725\nSo we put it in double quotes.\n\n96\n00:05:06.725 --> 00:05:09.729\nAnd then we've defined what\nthe element for that index is,\n\n97\n00:05:09.729 --> 00:05:11.122\nwhich will be Bill Murray.\n\n98\n00:05:11.122 --> 00:05:15.835\nSo when I want to print\nsomething from the movies array,\n\n99\n00:05:15.835 --> 00:05:22.773\nI'm going to define what that something\nis by referencing its index, all right?\n\n100\n00:05:22.773 --> 00:05:27.156\nAnd when I did that, when I said\nmovies Stripes, what did I get back?\n\n101\n00:05:27.156 --> 00:05:28.485\nI got Bill Murray.\n\n102\n00:05:28.485 --> 00:05:30.810\nSo like I said,\nkind of very much a dictionary.\n\n103\n00:05:30.810 --> 00:05:34.042\nIf I look up potato in the dictionary,\nI get.\n\n104\n00:05:34.042 --> 00:05:38.990\nSo if I reference potato it gives me\nthe definition, pulls it back, right?\n\n105\n00:05:38.990 --> 00:05:39.973\nThat's what we're working with.\n\n106\n00:05:39.973 --> 00:05:43.754\nLet's go into a more\nrealistic form of that,.\n\n107\n00:05:43.754 --> 00:05:44.511\nActually you know what?\n\n108\n00:05:44.511 --> 00:05:45.480\nWe got numbered.\n\n109\n00:05:45.480 --> 00:05:47.387\nI don't wanna leave that out.\n\n110\n00:05:47.387 --> 00:05:49.510\nBut if we have a numbered,\nlike index, right?\n\n111\n00:05:49.510 --> 00:05:50.885\nWe can do that as well.\n\n112\n00:05:50.885 --> 00:05:56.055\nLet's try that out, let's say,\nactually I did make a file for\n\n113\n00:05:56.055 --> 00:05:58.163\nthis, I just remembered.\n\n114\n00:05:58.163 --> 00:05:59.027\nI love when I remember things.\n\n115\n00:05:59.027 --> 00:06:01.439\nI'm like the, what is it?\n\n116\n00:06:01.439 --> 00:06:03.638\nThe absentminded professor,\n[LAUGH] remember that?\n\n117\n00:06:03.638 --> 00:06:05.087\nI always forget stuff.\n\n118\n00:06:05.087 --> 00:06:09.320\nLet's look at it in a script format.\n\n119\n00:06:09.320 --> 00:06:10.237\nI did write a script.\n\n120\n00:06:10.237 --> 00:06:12.642\nSo if I say gawk,\nI wanna show you the script first.\n\n121\n00:06:12.642 --> 00:06:17.840\nSo I'll cat that,\nit was gawk_array, what was it?\n\n122\n00:06:17.840 --> 00:06:22.176\nStr, I think, cuz it's a string,\nyeah, there we go.\n\n123\n00:06:22.176 --> 00:06:27.870\nSame kind of idea but more formal, right,\nmore something you'll probably see.\n\n124\n00:06:27.870 --> 00:06:32.541\nHere we go, we got our begin statement\nthen it moves into movies, the array name,\n\n125\n00:06:32.541 --> 00:06:35.398\nStripes equals Bill Murray,\neasy, we saw that.\n\n126\n00:06:35.398 --> 00:06:38.250\nNow we got stray movies\nGoonies equals Sean Astin.\n\n127\n00:06:38.250 --> 00:06:42.176\nSo I'm referencing different actors\nfrom each one of these different movies.\n\n128\n00:06:42.176 --> 00:06:45.257\nSo when I reference the movie,\nI get the actor, right?\n\n129\n00:06:45.257 --> 00:06:48.429\nAnd now when I come down here and\nI say print movies Goonies or\n\n130\n00:06:48.429 --> 00:06:52.860\nprint movies Cobra, I get the actor\nassociated with those two things.\n\n131\n00:06:52.860 --> 00:06:54.504\nPretty cool, pretty cool.\n\n132\n00:06:54.504 --> 00:06:59.425\nLet's run that just really quickly,\ngawk -f and\n\n133\n00:06:59.425 --> 00:07:03.888\nit was gawk_arraySTR.gawk, there we go.\n\n134\n00:07:03.888 --> 00:07:07.120\nAnd it prints out Sean Astin,\nSylvester Stallone.\n\n135\n00:07:07.120 --> 00:07:10.946\nJust referencing the array that I\ncreated giving me those actors.\n\n136\n00:07:10.946 --> 00:07:12.601\nNow, yes, Justin, you've got a question?\n\n137\n00:07:12.601 --> 00:07:14.795\n&gt;&gt; So real quick,\nthis is kind of throwing me off.\n\n138\n00:07:14.795 --> 00:07:18.412\nI was like, well, maybe it's different in\na script, but you just showed us this.\n\n139\n00:07:18.412 --> 00:07:22.549\nI think all I have to do to define\nan array is give a variable name,\n\n140\n00:07:22.549 --> 00:07:24.170\nthose square brackets.\n\n141\n00:07:24.170 --> 00:07:26.260\nAnd put something in it and\nnow it's an array.\n\n142\n00:07:26.260 --> 00:07:29.197\nI didn't have to say, hey,\nthis is an array type variable.\n\n143\n00:07:29.197 --> 00:07:32.961\nThis is a specific thing,\nit just kinda happens.\n\n144\n00:07:32.961 --> 00:07:36.981\n&gt;&gt; Yeah, we don't have to necessarily\ndefine the data type or whatever,\n\n145\n00:07:36.981 --> 00:07:40.000\nI think is probably what\nyou're getting at for this.\n\n146\n00:07:40.000 --> 00:07:44.247\nIt knows that if I see this format,\nit's an array, right?\n\n147\n00:07:44.247 --> 00:07:45.970\nAnd I have this array name.\n\n148\n00:07:45.970 --> 00:07:48.922\nI've got this format that\ngoes along with it, and\n\n149\n00:07:48.922 --> 00:07:51.732\nas long as I continue to\nuse the same array name,\n\n150\n00:07:51.732 --> 00:07:56.191\neverything that I define after that\narray name becomes a part of the array.\n\n151\n00:07:56.191 --> 00:08:00.481\nSo it actually is pretty\nsimple to create an array.\n\n152\n00:08:00.481 --> 00:08:05.400\nIn that way, just forgetting some syntax\nwill probably be your biggest flaw.\n\n153\n00:08:05.400 --> 00:08:08.121\nYou go it didn't work, what's the problem?\n\n154\n00:08:08.121 --> 00:08:12.077\nI've got to go in,\nI missed a syntax somewhere, right, so\n\n155\n00:08:12.077 --> 00:08:13.668\njust keep that in mind.\n\n156\n00:08:13.668 --> 00:08:20.410\nAnd I think that using them in scripts,\nthis was obviously a bit much.\n\n157\n00:08:20.410 --> 00:08:23.770\nIt's easier to read stuff like that,\njust always throw them into a script and\n\n158\n00:08:23.770 --> 00:08:25.090\ncall the script, okay?\n\n159\n00:08:25.090 --> 00:08:28.238\nUnless it's super, super simple,\nand I don't know why that would be.\n\n160\n00:08:28.238 --> 00:08:30.481\nYou've got an array, it's an array, right?\n\n161\n00:08:30.481 --> 00:08:32.400\nDo it this way, it's the better way.\n\n162\n00:08:32.400 --> 00:08:34.460\nAll right, let's move on.\n\n163\n00:08:34.460 --> 00:08:36.080\nNumbers to the thread,\nI did wanna get that.\n\n164\n00:08:36.080 --> 00:08:39.250\nI was jumping around,\ngetting my brain in multiple places here.\n\n165\n00:08:39.250 --> 00:08:42.268\nNumber-based index values, right,\nso we don't have to use a string,\n\n166\n00:08:42.268 --> 00:08:44.630\nwe can use a number if we would like.\n\n167\n00:08:44.630 --> 00:08:47.730\nNothing to it,\nwe just change what that is.\n\n168\n00:08:47.730 --> 00:08:49.910\nAnd I'm not sure, did I create, yes I did.\n\n169\n00:08:49.910 --> 00:08:56.512\nI have arrayNum, so let's cat that,\ngawk_arrayNum.gawk.\n\n170\n00:08:56.512 --> 00:09:00.920\nAnd now you'll see, very similar to\nwhat we had with the string value.\n\n171\n00:09:00.920 --> 00:09:05.139\nBut instead of saying Stripes or Goonies\nor Top Gun, I just said 1, 2, 3, and\n\n172\n00:09:05.139 --> 00:09:06.640\n4, right?\n\n173\n00:09:06.640 --> 00:09:09.450\nSo now when I reference\nmovies array value 1.\n\n174\n00:09:09.450 --> 00:09:13.150\nIn my mind, a lot of times I'll\nprobably use this type of array,\n\n175\n00:09:13.150 --> 00:09:19.550\nbecause I think of arrays in Bash\nscripting, and it's just a list.\n\n176\n00:09:19.550 --> 00:09:21.970\nFirst, second, third, fourth,\nand fifth values, right?\n\n177\n00:09:21.970 --> 00:09:24.330\nSo in my mind,\nthis is probably where I'm gonna go.\n\n178\n00:09:24.330 --> 00:09:29.174\nSometimes I will want to do it\nthe string value way, just because well,\n\n179\n00:09:29.174 --> 00:09:32.907\nI know the key or\nthe index value is going to be Goonies.\n\n180\n00:09:32.907 --> 00:09:37.040\nAnd I can't remember the kid that\nwas in it, that kind of thing.\n\n181\n00:09:37.040 --> 00:09:38.657\nI knew what that was, and\n\n182\n00:09:38.657 --> 00:09:43.300\ndown here sometimes I might not\nknow what 1 means per se, right?\n\n183\n00:09:43.300 --> 00:09:47.181\nSo you have both options available\n&gt;&gt; And to add to that,\n\n184\n00:09:47.181 --> 00:09:50.407\na lot of times what I've,\nin other languages not necessarily in AWK.\n\n185\n00:09:50.407 --> 00:09:54.759\nA good mental model for me is, if there's\nno intrinsic order, it doesn't matter\n\n186\n00:09:54.759 --> 00:09:58.622\nwhether Stripes, Goonies, or\nCobra are listed in a particular order.\n\n187\n00:09:58.622 --> 00:10:01.710\nI could do a lookup and\nfind out the information that I want.\n\n188\n00:10:01.710 --> 00:10:04.100\nUse numbers when there's\nintrinsic ordering,\n\n189\n00:10:04.100 --> 00:10:08.810\nthe first one is this,\nthe second one is this.\n\n190\n00:10:08.810 --> 00:10:13.830\nNow, It looks like we have some\nleniency with how we number.\n\n191\n00:10:13.830 --> 00:10:18.190\nBut it's a good way to think, does\norder matter or does order not matter?\n\n192\n00:10:18.190 --> 00:10:22.465\nAnd those two respective things will\nhelp probably divide your use cases.\n\n193\n00:10:22.465 --> 00:10:24.330\n&gt;&gt; Hm, that's great insight right there.\n\n194\n00:10:24.330 --> 00:10:26.400\nAnd it makes a whole lot\nof sense what he's saying.\n\n195\n00:10:26.400 --> 00:10:31.025\nIf we have that intrinsic order to that,\nyeah, I know 1 is always this,\n\n196\n00:10:31.025 --> 00:10:34.256\n2 is always this, then I can\neasily know when I reference 1 or\n\n197\n00:10:34.256 --> 00:10:36.840\n2 what I'm gonna get as output, right?\n\n198\n00:10:36.840 --> 00:10:42.537\nAgain, as he said,\nwe've got some leniency.\n\n199\n00:10:42.537 --> 00:10:46.510\nI could have come in here and\nput 32, 157, 4, 12,393.\n\n200\n00:10:46.510 --> 00:10:51.880\nAnd it would work, but that seems\na little weird in why you would do that.\n\n201\n00:10:51.880 --> 00:10:56.660\nAgain, go back to,\nthere's an intrinsic ordering to this.\n\n202\n00:10:56.660 --> 00:11:04.130\nHence it seems naturally I would want to\nlean toward the numbered index, all right?\n\n203\n00:11:04.130 --> 00:11:06.750\nAnd if we just run this,\nwe just say gawk -f,\n\n204\n00:11:06.750 --> 00:11:10.990\nobviously we should get the exact\nsame type of output as we did before.\n\n205\n00:11:10.990 --> 00:11:13.780\ngawk, was it numArray, right, was it?\n\n206\n00:11:13.780 --> 00:11:20.430\narrayNum, gawk_arrayNum,\nthere we go, and there we go.\n\n207\n00:11:20.430 --> 00:11:23.760\nWe get the exact same output\nas we did with the other one,\n\n208\n00:11:23.760 --> 00:11:28.380\nbecause we're referencing the same fields,\nright, just like we did before.\n\n209\n00:11:28.380 --> 00:11:31.700\nSo pretty simple, nothing insane there.\n\n210\n00:11:32.800 --> 00:11:37.150\n&gt;&gt; Real quick question, this is kinda\nme trying to figure out how this works.\n\n211\n00:11:37.150 --> 00:11:43.536\nIf we were to come into this numbered one,\narrayNum, and we changed 2 to \"2\".\n\n212\n00:11:43.536 --> 00:11:46.900\nWould I still get the same output,\ndo they treat those the same?\n\n213\n00:11:46.900 --> 00:11:49.850\nOr do numbers and\nstrings get treated differently?\n\n214\n00:11:51.240 --> 00:11:52.421\n&gt;&gt; Reiterate that for\nme, so I can follow you.\n\n215\n00:11:52.421 --> 00:11:57.041\n&gt;&gt; So, in the script that we just ran,\nwe print movies[2], print movies[4], and\n\n216\n00:11:57.041 --> 00:11:58.900\nthere's no quotes around that.\n\n217\n00:11:58.900 --> 00:11:59.480\n&gt;&gt; Correct.\n\n218\n00:11:59.480 --> 00:12:02.305\n&gt;&gt; But\nthere's quotes above in the strings, and\n\n219\n00:12:02.305 --> 00:12:07.098\nI'm wondering if it's just a shorthand\nnotation, and it's really \"2\".\n\n220\n00:12:07.098 --> 00:12:11.686\nOr could I have an array that\nhas the number 2 that is\n\n221\n00:12:11.686 --> 00:12:15.112\na different field than the string 2?\n\n222\n00:12:15.112 --> 00:12:19.401\nSo if I come in and change print\nmovies[2] to print movies[\"2\"],\n\n223\n00:12:19.401 --> 00:12:21.110\ndo I still get Sean Astin?\n\n224\n00:12:21.110 --> 00:12:24.320\n&gt;&gt; That's a great question,\nlet's find out, cuz I don't know.\n\n225\n00:12:25.380 --> 00:12:29.060\nTypically when you're using numbers, they\nmight actually be referencing numbers, so\n\n226\n00:12:29.060 --> 00:12:31.160\nyou don't need quotations with them,\nright?\n\n227\n00:12:31.160 --> 00:12:33.780\nThere's nothing to wrap up, right?\n\n228\n00:12:33.780 --> 00:12:37.881\nBut what if we were treating 2 as\na string, maybe that would wig it out.\n\n229\n00:12:37.881 --> 00:12:42.132\nSo let's see here, let's go in here, nano,\n\n230\n00:12:42.132 --> 00:12:48.140\nwhat is that, gawk_arrayNum.gawk,\nlet's go in here.\n\n231\n00:12:48.140 --> 00:12:54.380\nSo you're saying, we wanna put\nquotes around this, like this?\n\n232\n00:12:54.380 --> 00:12:57.960\n&gt;&gt; We could put it there, I was thinking\nmore during the print portion, so\n\n233\n00:12:57.960 --> 00:13:00.530\nleave the definition exactly the same.\n\n234\n00:13:00.530 --> 00:13:02.564\nBut if we come down and now print \"2\".\n\n235\n00:13:02.564 --> 00:13:03.796\n&gt;&gt; Gotcha.\n\n236\n00:13:03.796 --> 00:13:07.760\n&gt;&gt; Does that do a lookup based on\nthe number 2, the string 2, or\n\n237\n00:13:07.760 --> 00:13:10.260\nare they all really\nstrings behind the scenes?\n\n238\n00:13:10.260 --> 00:13:13.420\n&gt;&gt; Here we go, I'm about to hit Enter,\nand we're gonna find out.\n\n239\n00:13:13.420 --> 00:13:16.440\nHey look at that,\nstrings behind the scenes, right?\n\n240\n00:13:16.440 --> 00:13:20.650\nSo there you go, a good answer\nto a great question, who knows?\n\n241\n00:13:20.650 --> 00:13:25.160\nAnd now that we do, you can take that\ninformation and go forward from it.\n\n242\n00:13:25.160 --> 00:13:28.518\nSo if you start getting some odd output,\nand you're like hm, why is this treating\n\n243\n00:13:28.518 --> 00:13:31.040\nthis very strange, it's a number,\nbut it's acting like it's a string.\n\n244\n00:13:31.040 --> 00:13:34.570\nWell actually, it's a string in\nthe background, so cool stuff right?\n\n245\n00:13:34.570 --> 00:13:35.470\nNow we're all learning here, good.\n\n246\n00:13:35.470 --> 00:13:38.280\nThat's why I love having\nJustin on the show cuz of\n\n247\n00:13:38.280 --> 00:13:40.490\nhis immense programming background.\n\n248\n00:13:40.490 --> 00:13:44.680\nHe's seen these things before, and\ncan lend some insights to that.\n\n249\n00:13:44.680 --> 00:13:45.770\nVery cool stuff, thanks, Justin.\n\n250\n00:13:46.850 --> 00:13:49.310\nAll right, where were we at?\n\n251\n00:13:49.310 --> 00:13:52.140\nLet's iterate through an array, right?\n\n252\n00:13:52.140 --> 00:13:57.020\nWe've done that before, good old for\nloops come into play, and we can run a for\n\n253\n00:13:57.020 --> 00:13:58.270\nloop against it.\n\n254\n00:13:58.270 --> 00:14:01.730\nLet's take a look at what that does\nlook like, I'll show you the format.\n\n255\n00:14:01.730 --> 00:14:06.030\nI'll clear out here, and\nI've got this for_loop_format.txt.\n\n256\n00:14:06.030 --> 00:14:09.936\nSo cat for_loop_format.txt,\nand here we go,\n\n257\n00:14:09.936 --> 00:14:13.380\nhere's the format of how this should look.\n\n258\n00:14:13.380 --> 00:14:19.080\nSo for (variable in array),\nrun your commands or statements, right?\n\n259\n00:14:19.080 --> 00:14:21.032\nPretty straight forward,\npretty simple, nothing to it.\n\n260\n00:14:21.032 --> 00:14:24.979\nDon't forget your open and\nclose curly braces,\n\n261\n00:14:24.979 --> 00:14:30.570\nwhich are separate from any other open and\nclose curly braces.\n\n262\n00:14:30.570 --> 00:14:36.850\nYour for loop will need its own set to\ndefine the statements that go to it, okay?\n\n263\n00:14:36.850 --> 00:14:39.416\nKeep that in mind, don't get confused,\ncuz it's easy to do,\n\n264\n00:14:39.416 --> 00:14:42.700\nespecially if you've got a lot\nof stuff going on, okay?\n\n265\n00:14:42.700 --> 00:14:46.072\nSo let's see here, we've got that.\n\n266\n00:14:46.072 --> 00:14:51.596\nI've got that gawk_for_strings,\ncat that, gawk,\n\n267\n00:14:51.596 --> 00:14:56.659\nhello, there we go, gawk_for_string.gawk.\n\n268\n00:14:56.659 --> 00:15:00.371\nAnd we start seeing our array that\nwe've defined, just like we did before,\n\n269\n00:15:00.371 --> 00:15:01.310\nvery easy.\n\n270\n00:15:01.310 --> 00:15:08.640\nAnd then for (test in movies), seems\nvery similar to what we've seen before.\n\n271\n00:15:08.640 --> 00:15:12.640\nIn Bash when we do a for loop,\nwe define a variable that has\n\n272\n00:15:14.420 --> 00:15:16.460\nmaybe all these different\nactors names in it, right?\n\n273\n00:15:16.460 --> 00:15:21.006\nAnd then we say for variable in\nthe reference variable that has all those\n\n274\n00:15:21.006 --> 00:15:26.710\nnames, basically becomes our array,\nand then iterate through it, right?\n\n275\n00:15:26.710 --> 00:15:32.678\nVery similar to that, so for test, test is\na variable in movies which is our array,\n\n276\n00:15:32.678 --> 00:15:39.186\nprint Array Position:,\nand then whatever it's on.\n\n277\n00:15:39.186 --> 00:15:44.320\nSo test is gonna be the value of\nBill Murray, Sean Astin, Val Kilmer, as it\n\n278\n00:15:44.320 --> 00:15:50.230\niterates through each one, it's gonna\nprint that out and tell me what that is.\n\n279\n00:15:50.230 --> 00:15:53.016\nAnd then actor's movie[test], okay?\n\n280\n00:15:53.016 --> 00:15:56.160\nLet's see how this looks, run it.\n\n281\n00:15:56.160 --> 00:16:04.438\nSo do a gawk -f And\nit was called gawk_for_string.gawk.\n\n282\n00:16:04.438 --> 00:16:08.930\nHere we go, so it says, array position\nis Goonies, so here's where we are.\n\n283\n00:16:10.480 --> 00:16:13.290\nAnd here's the actual\nassociated actor with that.\n\n284\n00:16:13.290 --> 00:16:17.480\nSo there's the movies test, right?\n\n285\n00:16:17.480 --> 00:16:21.230\nSo it's really weird,\nit kind of came out of order didn't it?\n\n286\n00:16:21.230 --> 00:16:22.440\nVery strange.\n\n287\n00:16:22.440 --> 00:16:25.900\nGuess what?\nIn using this style of array and\n\n288\n00:16:25.900 --> 00:16:28.260\nsometimes you can get some crazy returns.\n\n289\n00:16:28.260 --> 00:16:30.270\nIt's just how it works.\n\n290\n00:16:30.270 --> 00:16:35.290\nSo I don't know without some\nlike deep control how you would\n\n291\n00:16:35.290 --> 00:16:38.260\nchange that using this style.\n\n292\n00:16:38.260 --> 00:16:44.100\nOkay so just be aware, again, not trying\nto get too deep into the water here.\n\n293\n00:16:44.100 --> 00:16:50.027\nJust be aware that if you use this type\nof for loop with this type of array,\n\n294\n00:16:50.027 --> 00:16:55.580\na string array, you could come\nback with results that, they work.\n\n295\n00:16:55.580 --> 00:16:57.285\nIt'll always have the right thing but\n\n296\n00:16:57.285 --> 00:17:00.010\nit might not be in the order in\nwhich you could expect, okay?\n\n297\n00:17:00.010 --> 00:17:02.710\n&gt;&gt; And it's actually harkens\nback to the thought process,\n\n298\n00:17:02.710 --> 00:17:05.400\nif using string arrays,\nyou should not depend on order.\n\n299\n00:17:05.400 --> 00:17:07.420\nOrdering shouldn't matter to you.\n\n300\n00:17:07.420 --> 00:17:14.172\nAnd then even if we use the numbers here I\nsuspect we would get, if we use the style\n\n301\n00:17:14.172 --> 00:17:19.110\nfor the GUI we would still get possible\nindeterminate ordering with the print out.\n\n302\n00:17:19.110 --> 00:17:23.450\n&gt;&gt; I thought the exact same thing but,\ninterestingly enough it doesn't.\n\n303\n00:17:24.900 --> 00:17:28.264\nFrom what I remember I tried to\nlook down look for edge K stuff,\n\n304\n00:17:28.264 --> 00:17:30.409\nI didn't see anything that said that.\n\n305\n00:17:30.409 --> 00:17:37.050\nIt seems that if you use the numbered\nindex values, order will be preserved.\n\n306\n00:17:37.050 --> 00:17:41.900\nSo, I know now it's like,\nwell are they strings or aren't they?\n\n307\n00:17:41.900 --> 00:17:44.430\nAnd maybe if we throw quotes around them,\nthen order wouldn't be,\n\n308\n00:17:44.430 --> 00:17:47.300\nwe could play with that actually and\nsee what happens.\n\n309\n00:17:47.300 --> 00:17:54.490\nSo maybe putting quotations around\na number turns it into a string, right?\n\n310\n00:17:54.490 --> 00:17:58.790\nNow, I don't know that level of depth\nof the industries, the background,\n\n311\n00:17:58.790 --> 00:18:02.380\nunder the hood stuff that's going on\nwith Gawk but it's cool stuff right?\n\n312\n00:18:02.380 --> 00:18:06.608\nWe're looking at in a different way and\ntrying to figure out exactly how it works.\n\n313\n00:18:06.608 --> 00:18:11.710\nWhich is going to increase our knowledge\nof what it does and understand it right?\n\n314\n00:18:11.710 --> 00:18:15.234\nSo let's play with that,\nlet's do the number one first.\n\n315\n00:18:15.234 --> 00:18:19.732\nLet's see here I've got\nthis Gawk four number so\n\n316\n00:18:19.732 --> 00:18:25.116\nsay cat Gawkfornumber.gawk,\nagain for test in movies.\n\n317\n00:18:25.116 --> 00:18:28.833\nBing, bing, bing, seeing nothing\ndifferent other than the array,\n\n318\n00:18:28.833 --> 00:18:30.730\nindex values are numbers, right?\n\n319\n00:18:31.840 --> 00:18:32.495\nSo we gawk.\n\n320\n00:18:32.495 --> 00:18:36.377\nGawk does not start with an a, -f and\n\n321\n00:18:36.377 --> 00:18:40.399\nthen is gawk_four_number.gawk.\n\n322\n00:18:40.399 --> 00:18:43.910\nArray position 1, 2,\n3, and 4 is preserved.\n\n323\n00:18:43.910 --> 00:18:47.200\nLet's jump back in there, let's put\nthe quotations around it and see.\n\n324\n00:18:47.200 --> 00:18:49.230\nI don't know again,\nthis is off script here.\n\n325\n00:18:49.230 --> 00:18:50.540\nLet's see what it does.\n\n326\n00:18:50.540 --> 00:18:51.776\nI love playing around with things.\n\n327\n00:18:51.776 --> 00:18:56.401\nIt is gawk_for_number.gawk.\n\n328\n00:18:56.401 --> 00:18:58.870\nWe will go in here.\n\n329\n00:18:58.870 --> 00:19:02.580\nAnd, we would need to change this to,\n\n330\n00:19:04.710 --> 00:19:08.580\nwell, it's also referencing\nthe test value and\n\n331\n00:19:08.580 --> 00:19:13.680\nnot necessarily that little piece.\n\n332\n00:19:13.680 --> 00:19:18.720\n&gt;&gt; So, I wonder if we could\nsee a shift in ordering.\n\n333\n00:19:18.720 --> 00:19:21.240\nIf we don't use this one,\ntwo, three without quotes.\n\n334\n00:19:21.240 --> 00:19:24.770\nWhat if we put quotes around\nthe array definition?\n\n335\n00:19:24.770 --> 00:19:28.240\nAnd then, are we going to see the same\ntype of behavior that we did with\n\n336\n00:19:28.240 --> 00:19:29.400\nthe strings from before?\n\n337\n00:19:29.400 --> 00:19:31.960\n&gt;&gt; That is what we're about to find out,\nmy man.\n\n338\n00:19:31.960 --> 00:19:39.580\nI love doing this kind of stuff, asking\nquestions, and then getting answers.\n\n339\n00:19:39.580 --> 00:19:42.570\nEven if it breaks,\nwe know something more, right?\n\n340\n00:19:42.570 --> 00:19:43.770\nSo, that's cool, let's do it.\n\n341\n00:19:46.520 --> 00:19:53.490\nFire it off, one, two, three, and\nfour, so still preserved, interesting.\n\n342\n00:19:53.490 --> 00:19:56.640\n&gt;&gt; I'm gonna be honest with you, Daniel,\nthat kind of threw me for a loop.\n\n343\n00:19:56.640 --> 00:20:00.420\nBecause a lot of times, when you have\nassociated arrays these hash maps,\n\n344\n00:20:00.420 --> 00:20:02.580\nthey're not ordered,\nregardless of the key type.\n\n345\n00:20:02.580 --> 00:20:05.440\nBut it looks like, behind the scenes,\nthey're like, hey,\n\n346\n00:20:05.440 --> 00:20:10.020\nI'm recognizing this is actually a number,\nAnd I'm preserving the ordering because\n\n347\n00:20:10.020 --> 00:20:14.350\neven though they're associative,\nnumbers kind of imply an ordered behavior.\n\n348\n00:20:14.350 --> 00:20:16.642\nSo, I'm just kind of postulating that.\n\n349\n00:20:16.642 --> 00:20:18.940\nIt's not, I don't know the inner workings.\n\n350\n00:20:18.940 --> 00:20:23.170\n&gt;&gt; Yes, this isn't the gospel of Paul here\non whether or not that's what's happening.\n\n351\n00:20:23.170 --> 00:20:26.210\nBut based off of what we've seen\nthe results that we're getting,\n\n352\n00:20:26.210 --> 00:20:28.368\nthat seems to be what's happening.\n\n353\n00:20:28.368 --> 00:20:30.620\nIs that Gawk regardless of quotes,\n\n354\n00:20:30.620 --> 00:20:33.350\nwhen it sees a number it says\nthis is actually a number.\n\n355\n00:20:33.350 --> 00:20:37.650\nSo our previous hypothesis of it\nbeing a string behind the scenes\n\n356\n00:20:37.650 --> 00:20:39.180\ndoesn't seem to hold water.\n\n357\n00:20:39.180 --> 00:20:42.480\nWe further tested that and\nfigured out this is probably actually,\n\n358\n00:20:42.480 --> 00:20:44.970\nregardless of quotes,\nseeing it as a number.\n\n359\n00:20:44.970 --> 00:20:48.078\n&gt;&gt; Yeah, and I'm applying some\nthings I know about dictionaries and\n\n360\n00:20:48.078 --> 00:20:49.641\nhash maps from other languages.\n\n361\n00:20:49.641 --> 00:20:52.405\nAnd their implementation details\nmay be a little bit different.\n\n362\n00:20:53.635 --> 00:20:56.125\nWe developed an understanding earlier on.\n\n363\n00:20:56.125 --> 00:21:00.645\nYou can still use quotes, get back the key\nor the value for that respective key,\n\n364\n00:21:00.645 --> 00:21:03.025\nwhether it be \"1\" or just the number 1.\n\n365\n00:21:03.025 --> 00:21:08.305\nBut that made me think that it was going\nto be unordered when we used a for\n\n366\n00:21:08.305 --> 00:21:09.415\nin array loop.\n\n367\n00:21:10.660 --> 00:21:15.502\nBut then we find out if it's number,\nit's actually still maintaining order, but\n\n368\n00:21:15.502 --> 00:21:18.627\nif it's a standard string\nthat is not a number, man.\n\n369\n00:21:18.627 --> 00:21:22.307\nSo these are these nuances\nthat you have to be aware of,\n\n370\n00:21:22.307 --> 00:21:26.320\nbecause you may get unknown or\nunplanned for behavior.\n\n371\n00:21:26.320 --> 00:21:30.130\n&gt;&gt; Exactly, and typically that's when you\nstart learning more about those things,\n\n372\n00:21:30.130 --> 00:21:35.560\nbecause you go, that didn't do what I\nthought it was supposed to do, why not?\n\n373\n00:21:35.560 --> 00:21:39.170\nAnd that leads you down rabbit\ntrails to figure out exactly why.\n\n374\n00:21:39.170 --> 00:21:44.330\nAgain we're kinda, we're definitely\nwading out into deeper waters than we\n\n375\n00:21:44.330 --> 00:21:46.380\nintended to but it was for good reasons.\n\n376\n00:21:46.380 --> 00:21:47.120\nIt was cool stuff, right?\n\n377\n00:21:47.120 --> 00:21:50.360\nAnd hopefully you guys got a lot\nfrom out of that, I know I sure did.\n\n378\n00:21:50.360 --> 00:21:52.440\nIt was a learning experience not only for\nyou,\n\n379\n00:21:52.440 --> 00:21:55.100\nhopefully, but for us as well, vool stuff.\n\n380\n00:21:55.100 --> 00:21:56.898\nAll right, let's do one more\nthing when it comes to arrays.\n\n381\n00:21:56.898 --> 00:22:00.778\nLet's delete array variables right.\n\n382\n00:22:00.778 --> 00:22:02.560\nRight well,\ncan't you just go in there and move it?\n\n383\n00:22:02.560 --> 00:22:05.692\nYeah, you can do that, that'd work,\nit would delete it right?\n\n384\n00:22:05.692 --> 00:22:08.660\nBut we're gonna do it in\na more programmatic way.\n\n385\n00:22:08.660 --> 00:22:14.359\nLet's check out this\ncat gawk_delete array.\n\n386\n00:22:14.359 --> 00:22:20.690\nAnd like I said, easier way, probably\njust open your script, delete the thing.\n\n387\n00:22:21.760 --> 00:22:25.930\nBut maybe you wanna do it like I said,\nprogrammatically.\n\n388\n00:22:25.930 --> 00:22:27.600\nSo let's take a look,\nwe've defined our array.\n\n389\n00:22:27.600 --> 00:22:30.330\nWe've got our for-loop running through it.\n\n390\n00:22:30.330 --> 00:22:36.148\nAnd then it says delete movies 2,\nprint removing index value,\n\n391\n00:22:36.148 --> 00:22:41.810\nand then re-running that and\nit's going to rerun the script basically.\n\n392\n00:22:41.810 --> 00:22:46.850\nSo I want to make that\nhappen inside of the script.\n\n393\n00:22:46.850 --> 00:22:53.939\nSo I want that to occur mid-script,\nbasically when I can't do it.\n\n394\n00:22:53.939 --> 00:22:55.010\nDoes that make sense?\n\n395\n00:22:55.010 --> 00:22:56.520\nSo I need it for one specific thing,\n\n396\n00:22:56.520 --> 00:22:59.900\nand then I need it to disappear for\nsomething else.\n\n397\n00:22:59.900 --> 00:23:02.900\nSo I can go into the array and\nremove a value so\n\n398\n00:23:02.900 --> 00:23:05.110\nthat it doesn't get iterated\nlater on in my script.\n\n399\n00:23:06.190 --> 00:23:08.180\nSo these things happen\nfrom time to time and\n\n400\n00:23:08.180 --> 00:23:11.160\nit's that the functionality\nis in there to do.\n\n401\n00:23:11.160 --> 00:23:15.440\nAgain just making you aware of it and\nhow it kind of works, so\n\n402\n00:23:15.440 --> 00:23:18.230\nthat if you need to that,\nyou go, what I can do?\n\n403\n00:23:18.230 --> 00:23:23.100\nI can delete that piece and it won't be\nthere, and I'm back in action, right?\n\n404\n00:23:24.360 --> 00:23:27.200\nSo, let's run this thing and\nsee what it looks like.\n\n405\n00:23:27.200 --> 00:23:33.430\nWe will Gawk and -F,\nthis was called gawkdeletearray.gawk.\n\n406\n00:23:33.430 --> 00:23:35.660\nSo there we go, we run through the array.\n\n407\n00:23:35.660 --> 00:23:38.650\nGives me each actor, tells me\nwhich value I'm at, what position.\n\n408\n00:23:38.650 --> 00:23:43.000\nAnd then says, removing index value,\nwhich should have been number two.\n\n409\n00:23:43.000 --> 00:23:46.352\nI guess I didn't put anything in there,\nbut whatever.\n\n410\n00:23:46.352 --> 00:23:49.296\nTo let us know,\nwe see which one was removed, obviously,\n\n411\n00:23:49.296 --> 00:23:51.472\nbecause it no longer has the second index.\n\n412\n00:23:51.472 --> 00:23:53.938\nIt just goes one, three, four, and\n\n413\n00:23:53.938 --> 00:23:59.281\nthen down here Since Movies 2 has been\ndeleted, that doesn't actually work.\n\n414\n00:23:59.281 --> 00:24:01.750\nSo, that's my bad,\nI should've caught that.\n\n415\n00:24:01.750 --> 00:24:04.870\nBut, you're cranking through these\nthings and these things happen.\n\n416\n00:24:04.870 --> 00:24:10.910\nBut anyway, the idea here is that you did\nremove a value from the array so that\n\n417\n00:24:10.910 --> 00:24:16.860\nwhen, if and when, I reiterate through it,\nit won't be there for whatever reason.\n\n418\n00:24:16.860 --> 00:24:18.470\nSo, choose your reason.\n\n419\n00:24:18.470 --> 00:24:23.090\nThese are very contrived examples, as I've\nbeen trying to elude to from time to time.\n\n420\n00:24:23.090 --> 00:24:26.120\nJust because, it's difficult\nto come up with actual context\n\n421\n00:24:27.140 --> 00:24:30.930\nto give you guys practical\nways in which this was used.\n\n422\n00:24:30.930 --> 00:24:34.620\nUnless I'm steeped in doing something and\ngo, you know what I need to do here?\n\n423\n00:24:34.620 --> 00:24:38.350\nI need to remove that index so\nit's no longer there and da, da, da.\n\n424\n00:24:38.350 --> 00:24:41.630\nSo, I'm shoehorning the ideas\ninto some scripts so\n\n425\n00:24:41.630 --> 00:24:42.700\nthat you can see what they look like.\n\n426\n00:24:42.700 --> 00:24:45.670\nSo from time to time I [LAUGH]\noverlook a thing or two.\n\n427\n00:24:46.960 --> 00:24:52.588\nJustin, I think for arrays, that's all\nI've got, but I do have a bonus round.\n\n428\n00:24:52.588 --> 00:24:56.300\nAnd I'm gonna,\nI know we got five minutes left.\n\n429\n00:24:56.300 --> 00:24:58.540\nFive minute bonus round here for\n\n430\n00:24:58.540 --> 00:25:01.760\nsomething to do with regex,\nI wanna talk about matching operator.\n\n431\n00:25:01.760 --> 00:25:05.800\nIt's a cool little thing I had no\nother good place to put it, and\n\n432\n00:25:05.800 --> 00:25:10.560\nthis was a bit of a shorter show, so I'm\ngonna try to hammer it in there for us.\n\n433\n00:25:10.560 --> 00:25:12.260\nSo let's talk about some\nregex stuff real quick.\n\n434\n00:25:12.260 --> 00:25:14.250\nI'll clear this out here.\n\n435\n00:25:14.250 --> 00:25:19.399\nInteresting thing about,\nin certain times when you use regex and\n\n436\n00:25:19.399 --> 00:25:25.201\ngawk when you're defining it with\na piece before some commands get done,\n\n437\n00:25:25.201 --> 00:25:29.526\nI want to say here's some\nregular expression, okay?\n\n438\n00:25:29.526 --> 00:25:35.026\nI wanna do that, I want to make sure\nthis to the left of the curly braces,\n\n439\n00:25:35.026 --> 00:25:41.130\nof the pieces of the gawk's command\nthat I'm implemented, okay?\n\n440\n00:25:41.130 --> 00:25:44.730\nJust, I want to get that to you guys,\nall right.\n\n441\n00:25:44.730 --> 00:25:47.680\nAll the good regex stuff we did before,\ngreat, awesome.\n\n442\n00:25:47.680 --> 00:25:52.290\nBut this is like a little addendum to\nthat when it comes to working in gawk.\n\n443\n00:25:52.290 --> 00:25:53.989\nYou wanna, at times, put that,\n\n444\n00:25:53.989 --> 00:25:57.041\nthere's that left side of\nthe calibration that go, okay?\n\n445\n00:25:57.041 --> 00:25:58.810\nI'll show you what that looks like here.\n\n446\n00:26:00.170 --> 00:26:03.303\nI can do gawk and\n\n447\n00:26:03.303 --> 00:26:09.450\nsay ,BEGIN, curly brace.\n\n448\n00:26:09.450 --> 00:26:13.273\nI'll change the field separator,\njust like we've done before.\n\n449\n00:26:13.273 --> 00:26:19.188\nWas that outs and\nthen if I want to do something like,\n\n450\n00:26:19.188 --> 00:26:25.170\nremember our file one had our names, our\nemail addresses, our phone numbers, and\n\n451\n00:26:25.170 --> 00:26:30.430\nour title, our job role,\nI'm gonna work with that file, okay?\n\n452\n00:26:30.430 --> 00:26:33.300\nSo, I wanna look for CEOs,\nTim's in there, right?\n\n453\n00:26:33.300 --> 00:26:36.250\nWe'll put CEO in there,\nCEO like so, right?\n\n454\n00:26:37.320 --> 00:26:41.050\nBut you got to kind of like\nbind it up almost like Sed.\n\n455\n00:26:41.050 --> 00:26:45.115\nSo you do the /ceo, like so.\n\n456\n00:26:45.115 --> 00:26:48.329\nAnd that's gonna go the left\nof my curly brace where\n\n457\n00:26:48.329 --> 00:26:50.760\nI started my print statement, okay.\n\n458\n00:26:50.760 --> 00:26:54.165\nAnd I'll print $1, so\nwhat's it going to do?\n\n459\n00:26:54.165 --> 00:26:57.310\nI'm going to close that out so\nI don't forget.\n\n460\n00:26:57.310 --> 00:27:00.950\nIt's gonna look for ceo.\n\n461\n00:27:00.950 --> 00:27:05.460\nWhen it finds it,\nprint whatever the first field is and\n\n462\n00:27:05.460 --> 00:27:08.550\nit should give us Tim's name, okay?\n\n463\n00:27:08.550 --> 00:27:10.665\nAnd then the feed of the file,\nthe input file, forget that file one.\n\n464\n00:27:10.665 --> 00:27:11.985\nThere we go.\n\n465\n00:27:11.985 --> 00:27:16.916\nAnd there we go, we found that string and\nactually it comes back to the whole thing,\n\n466\n00:27:16.916 --> 00:27:17.810\nright?\n\n467\n00:27:17.810 --> 00:27:21.590\nEven though I put $1,\nman, you know what I did?\n\n468\n00:27:21.590 --> 00:27:23.430\nForgot that dang equal sign yet again.\n\n469\n00:27:23.430 --> 00:27:24.970\nI am horrible about that.\n\n470\n00:27:24.970 --> 00:27:28.942\nJustin, you gonna have to start\nsmacking me every time I forget.\n\n471\n00:27:28.942 --> 00:27:29.749\nGive me some negative reinforcement.\n\n472\n00:27:29.749 --> 00:27:30.654\n&gt;&gt; I just need part of a fishing rod.\n\n473\n00:27:30.654 --> 00:27:31.562\n&gt;&gt; [LAUGH] Yeah, yeah.\n\n474\n00:27:31.562 --> 00:27:32.270\n&gt;&gt; I lay you.\n\n475\n00:27:32.270 --> 00:27:34.890\n&gt;&gt; I won't forget it ever\nagain after that, would I?\n\n476\n00:27:34.890 --> 00:27:36.360\n[LAUGH] There we go.\n\n477\n00:27:36.360 --> 00:27:37.520\nTry one more, there we go.\n\n478\n00:27:37.520 --> 00:27:38.870\nTim's name.\n\n479\n00:27:38.870 --> 00:27:40.430\nMan, that stinking equal sign.\n\n480\n00:27:40.430 --> 00:27:43.430\nAnd I even told myself,\ndon't forget the equal sign.\n\n481\n00:27:43.430 --> 00:27:44.500\nThen I had stuff to tell you guys.\n\n482\n00:27:44.500 --> 00:27:45.720\nThere you go.\n\n483\n00:27:45.720 --> 00:27:50.820\nSo, the cool regex stuff,\nlet's talk about that matching operator.\n\n484\n00:27:50.820 --> 00:27:52.230\nVery, very cool thing.\n\n485\n00:27:52.230 --> 00:27:59.150\nI can say specifically that I\nwanna match an exact field.\n\n486\n00:28:01.200 --> 00:28:01.700\nHow cool, right?\n\n487\n00:28:02.720 --> 00:28:07.600\nSo if CEO showed up anywhere, let's look\nat the script or the file right quick.\n\n488\n00:28:07.600 --> 00:28:16.240\nCat data, not data field,\nfile1 and like let's look in here.\n\n489\n00:28:17.300 --> 00:28:21.610\nHost shows up specific times,\nanything else that's similar,\n\n490\n00:28:24.620 --> 00:28:27.110\nDon and I share the same phone number.\n\n491\n00:28:28.830 --> 00:28:29.725\nWhat if I only want Don's file,\nthat kind of thing.\n\n492\n00:28:29.725 --> 00:28:34.100\nThings that are showing up\nin different date fields.\n\n493\n00:28:34.100 --> 00:28:37.230\nI guess I didn't come up\nwith anything like that.\n\n494\n00:28:37.230 --> 00:28:41.320\nIf I had this data field that said CEO,\nand this data field also said CEO,\n\n495\n00:28:41.320 --> 00:28:43.390\nbut was a different date field,\nit will pull that,\n\n496\n00:28:43.390 --> 00:28:46.690\nregex would pull both those fields but\nI don't want that.\n\n497\n00:28:46.690 --> 00:28:49.740\nI want the one that has\nCEO in a specific field.\n\n498\n00:28:50.760 --> 00:28:51.950\nThat's kind of what I'm getting to.\n\n499\n00:28:53.540 --> 00:28:58.360\nHow do I say don't pull even\nthough you found CEO in this\n\n500\n00:28:58.360 --> 00:29:01.830\nrecord, how do I say don't do that?\n\n501\n00:29:01.830 --> 00:29:03.590\nDon't pull that one out.\n\n502\n00:29:03.590 --> 00:29:10.480\nWell, I subscribe to a specific data field\nso that it only grabs the one, right?\n\n503\n00:29:10.480 --> 00:29:13.640\nSo let me show you how the syntax\nof that works itself out.\n\n504\n00:29:13.640 --> 00:29:17.804\nWe can actually just kinda\nlike pop this in here.\n\n505\n00:29:17.804 --> 00:29:21.320\nI have another file,\nthat's what I did, cat file5.txt.\n\n506\n00:29:22.570 --> 00:29:23.100\nHere we go.\n\n507\n00:29:23.100 --> 00:29:25.870\nSo just, each one of these\nwill be different data fields.\n\n508\n00:29:25.870 --> 00:29:27.670\nSo info one, two, three, four.\n\n509\n00:29:27.670 --> 00:29:29.330\nYou'll notice that look,\n\n510\n00:29:29.330 --> 00:29:33.490\ninfo two is in data field two and\nit's also in data field three.\n\n511\n00:29:33.490 --> 00:29:36.809\nSo if I only want the line with\ninfo two and data field two,\n\n512\n00:29:36.809 --> 00:29:40.000\nI need the matching operator to do that,\nright?\n\n513\n00:29:40.000 --> 00:29:41.680\nHere we go, let's try it.\n\n514\n00:29:41.680 --> 00:29:46.240\nI will start it off gawk,\nbang, again bang,\n\n515\n00:29:46.240 --> 00:29:50.930\nwe are gonna go with field separator is,\ndon't forget right,\n\n516\n00:29:50.930 --> 00:29:59.040\nJustin got his fishing rod out,\nequals and it is a comma close it out.\n\n517\n00:29:59.040 --> 00:30:04.960\nGive it our regex which will\nbe info2 which is fine and\n\n518\n00:30:04.960 --> 00:30:06.670\nthen start our print statement.\n\n519\n00:30:06.670 --> 00:30:10.226\nSo print, not sprint print $, I forgot,\n\n520\n00:30:10.226 --> 00:30:13.981\nI'm forgetting the matching\noperator right?\n\n521\n00:30:13.981 --> 00:30:15.541\nThat' s what we're doing [LAUGH].\n\n522\n00:30:15.541 --> 00:30:16.657\nI get so ahead of myself.\n\n523\n00:30:16.657 --> 00:30:21.280\nSo I've got my regex in here and\nit's starting my print business over here.\n\n524\n00:30:21.280 --> 00:30:23.569\nBut how do I say only\nfrom that data field?\n\n525\n00:30:23.569 --> 00:30:28.202\nWhat's really cool, you just say $2,\nlike that, the tilde,\n\n526\n00:30:28.202 --> 00:30:30.460\nnot that one I gotta shift it.\n\n527\n00:30:30.460 --> 00:30:35.970\nThere we go, tilde like so,\nand then your regex.\n\n528\n00:30:35.970 --> 00:30:40.900\nSo, it's saying only if I find this\nis in field2 will I return a result.\n\n529\n00:30:40.900 --> 00:30:42.460\nAnd then prints.\n\n530\n00:30:42.460 --> 00:30:46.190\nI'll print the whole line out so\nI'll just do print zero.\n\n531\n00:30:47.200 --> 00:30:48.550\nClose it out.\n\n532\n00:30:48.550 --> 00:30:52.190\nClose it like so, I think I've\ngot everything I need except for\n\n533\n00:30:52.190 --> 00:30:53.176\nthe input file.\n\n534\n00:30:53.176 --> 00:30:58.010\nJust file5.txt, bing and there we go.\n\n535\n00:30:58.010 --> 00:31:01.236\nSo even though this line contained info2,\n\n536\n00:31:01.236 --> 00:31:06.650\nit only returned the first line because\ninfo2 was found in data field2.\n\n537\n00:31:06.650 --> 00:31:07.866\nWhich is something,\n\n538\n00:31:07.866 --> 00:31:12.650\nI used the matching operator to make\nsure that that's what happened.\n\n539\n00:31:12.650 --> 00:31:15.520\nSo, like I said the five minute bonus\nround, think I got it within time.\n\n540\n00:31:15.520 --> 00:31:18.950\nAnd that's all I got for you guys today,\nhopefully you enjoyed it.\n\n541\n00:31:18.950 --> 00:31:22.846\nI worked really hard, and if I didn't do\nanything right, that's my bad and all.\n\n542\n00:31:22.846 --> 00:31:26.360\nI'll fix it [LAUGH]\n&gt;&gt; Well, Daniel, you've definitely kind of\n\n543\n00:31:26.360 --> 00:31:28.970\nilluminated some more of the power\nthat is available in gawk.\n\n544\n00:31:28.970 --> 00:31:31.680\nAnd well,\nwe're kind of just getting started.\n\n545\n00:31:31.680 --> 00:31:33.470\nYou alluded to this in a previous episode,\n\n546\n00:31:33.470 --> 00:31:35.020\nit's kinda like its own\nprogramming language.\n\n547\n00:31:35.020 --> 00:31:37.640\nWell, not kinda,\nit is its own programming language.\n\n548\n00:31:37.640 --> 00:31:40.120\nSo we got a lot more to do but,\nfinal words.\n\n549\n00:31:40.120 --> 00:31:42.440\n&gt;&gt; Yeah, final words,\nI can also reverse that.\n\n550\n00:31:42.440 --> 00:31:47.350\nI just thought, I can reverse the data\nfield, the matching operator thing.\n\n551\n00:31:47.350 --> 00:31:48.760\nReal quick, real quick.\n\n552\n00:31:48.760 --> 00:31:49.790\nHammer it up.\n\n553\n00:31:49.790 --> 00:31:50.760\nHammer it, let's go for it.\n\n554\n00:31:50.760 --> 00:31:51.760\nLet's see here.\n\n555\n00:31:51.760 --> 00:31:53.440\nIf I come over here.\n\n556\n00:31:53.440 --> 00:31:54.500\nCome on, there we go.\n\n557\n00:31:54.500 --> 00:31:56.880\nI add this right here.\n\n558\n00:31:56.880 --> 00:31:57.840\nWe've seen that before.\n\n559\n00:31:57.840 --> 00:32:01.130\nNegation, hello, hello, bing.\n\n560\n00:32:01.130 --> 00:32:03.382\nAnd look,\nit gives me everything except that line.\n\n561\n00:32:03.382 --> 00:32:05.700\n[LAUGH] You never know when\nthat might come in handy.\n\n562\n00:32:05.700 --> 00:32:08.248\nSo, that's my final,\nit's my final [SOUND].\n\n563\n00:32:08.248 --> 00:32:09.589\nI'm done.\n\n564\n00:32:09.589 --> 00:32:13.683\n&gt;&gt; [LAUGH] Well, I'm interested to see\nwhat else is available in gawk, and well,\n\n565\n00:32:13.683 --> 00:32:15.120\nhopefully you are as well.\n\n566\n00:32:15.120 --> 00:32:19.310\nSo join us back as we continue our\nadvanced gawk subseries in our advanced\n\n567\n00:32:19.310 --> 00:32:21.325\nshell scripting, well-\n&gt;&gt; Series.\n\n568\n00:32:21.325 --> 00:32:22.462\n&gt;&gt; Series.\n&gt;&gt; [LAUGH]\n\n569\n00:32:22.462 --> 00:32:23.490\n&gt;&gt; Man, there was a whole lot.\n\n570\n00:32:23.490 --> 00:32:25.086\nBut for this episode, we are done.\n\n571\n00:32:25.086 --> 00:32:28.310\nSo signing off for ITPro.TV,\nI've been your host, Justin Dennison.\n\n572\n00:32:28.310 --> 00:32:29.120\n&gt;&gt; And I'm Daniel Lowrie.\n\n573\n00:32:29.120 --> 00:32:29.897\n&gt;&gt; So we'll see you next time.\n\n574\n00:32:29.897 --> 00:32:37.127\n[MUSIC]\n\n575\n00:32:37.127 --> 00:32:39.255\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "240881976"
        },
        {
          "description": "In this episode, Daniel and Justin demonstrate and explain the structured commands that can be implemented in gawk. Here you will see how to write if and else-if statements, while and do-while loops, and C-style for loops.",
          "length": "1830",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-3-1-advanced_gawk_structured_commands-110117-PGM.00_31_30_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-3-1-advanced_gawk_structured_commands-110117-PGM.00_31_30_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-3-1-advanced_gawk_structured_commands-110117-PGM.00_31_30_16.Still001-sm.jpg",
          "title": "Advanced gawk: Structured Commands",
          "transcript": "WEBVTT\n\n1\n00:00:00.300 --> 00:00:01.190\nWelcome to ITPRO.TV.\n\n2\n00:00:01.190 --> 00:00:06.392\nI am your host Don [CROSSTALK]\n\n3\n00:00:06.392 --> 00:00:08.207\n[MUSIC]\n\n4\n00:00:08.207 --> 00:00:11.780\nYou are watching ITPRO.TV.\n\n5\n00:00:11.780 --> 00:00:15.817\n&gt;&gt; Greetings everyone and welcome back\nto another exciting episode of ITPro.TV.\n\n6\n00:00:15.817 --> 00:00:20.086\nI'm your host Justin Dennison and we\nare continuing on with more advanced gawk,\n\n7\n00:00:20.086 --> 00:00:24.120\nand I'm pretty excited because we're\ngetting into structured commands.\n\n8\n00:00:24.120 --> 00:00:28.210\nNow, I'm not really sure what that all\nentails, but luckily we have someone in\n\n9\n00:00:28.210 --> 00:00:31.655\nthe studio that actually does know\nall about structured commands.\n\n10\n00:00:31.655 --> 00:00:32.850\nMr. Daniel Lowrie.\n\n11\n00:00:32.850 --> 00:00:33.810\nHow you doing today, Daniel?\n\n12\n00:00:33.810 --> 00:00:34.810\n&gt;&gt; I'm doing great, Justin.\n\n13\n00:00:34.810 --> 00:00:37.970\nSettle bar, I don't know about\nall about structured commands.\n\n14\n00:00:37.970 --> 00:00:39.990\nI know something about\nstructured commands, and\n\n15\n00:00:39.990 --> 00:00:43.790\nI hopefully today, I'll impart that\nknowledge to you good folks out there.\n\n16\n00:00:43.790 --> 00:00:48.930\nSo when the, a need arises you should\nbe able to employ them as a skill set.\n\n17\n00:00:48.930 --> 00:00:52.340\nThat being said, what our structure means,\nthat's probably a good place to start off.\n\n18\n00:00:52.340 --> 00:00:54.200\nIf you remember back\nin our bash scripting,\n\n19\n00:00:54.200 --> 00:00:55.870\nwe talked structured commands there.\n\n20\n00:00:55.870 --> 00:01:01.910\nThese are our standard programming like\ncommand structures of fourth statements,\n\n21\n00:01:01.910 --> 00:01:02.850\nifs, right?\n\n22\n00:01:03.930 --> 00:01:05.670\nLoops like while, right?\n\n23\n00:01:05.670 --> 00:01:08.570\nWe also have another one and we're\ngonna play around with called do while,\n\n24\n00:01:08.570 --> 00:01:11.430\nvery interesting thing,\nand things of that nature.\n\n25\n00:01:11.430 --> 00:01:13.760\nSo a lot of cool stuff\ngonna go on in this,\n\n26\n00:01:13.760 --> 00:01:18.660\nbecause as I told you before,\ngawk is basically a programming language.\n\n27\n00:01:18.660 --> 00:01:20.958\nJustin, if I'm not mistaken, you told me,\n\n28\n00:01:20.958 --> 00:01:24.190\nis it one guy who created a flight\nsimulator using gawk only?\n\n29\n00:01:24.190 --> 00:01:28.210\n&gt;&gt; Yeah, so this was in a talk that he was\ngiving and he was like, sometimes we can\n\n30\n00:01:28.210 --> 00:01:31.290\npress programming languages to\noutside their normal use cases.\n\n31\n00:01:31.290 --> 00:01:34.870\nRight, gawk is used for reporting,\nslicing, and dicing, and it's all good.\n\n32\n00:01:34.870 --> 00:01:36.820\nAnd he's like, but\nI wrote a flight simulator.\n\n33\n00:01:36.820 --> 00:01:38.396\nIt was an ASCII art type thing.\n\n34\n00:01:38.396 --> 00:01:40.585\n&gt;&gt; Yeah.\n&gt;&gt; I don't know how crazy it was, but\n\n35\n00:01:40.585 --> 00:01:44.141\nthe fact that he took the time to\nfigure out how the slicing and\n\n36\n00:01:44.141 --> 00:01:48.080\ndicing of letters and things like\nthat could present as a flight.\n\n37\n00:01:48.080 --> 00:01:50.850\nI actually tried to find it and\nI know what the talk is,\n\n38\n00:01:50.850 --> 00:01:53.690\nI just can't find an example\nof the flight simulator.\n\n39\n00:01:53.690 --> 00:01:57.547\nSo, sometimes we can make\nit do a bunch of things but\n\n40\n00:01:57.547 --> 00:02:02.080\ngawk is definitely geared\ntoward a particular use case.\n\n41\n00:02:02.080 --> 00:02:03.070\n&gt;&gt; That's exactly right.\n\n42\n00:02:03.070 --> 00:02:07.480\nTypically what we're doing is formatting\nreports that are generated for us so\n\n43\n00:02:07.480 --> 00:02:08.800\nthat they look nice.\n\n44\n00:02:08.800 --> 00:02:11.680\nBut it just goes to show you\nthe power behind what gawk is.\n\n45\n00:02:11.680 --> 00:02:15.800\nAnd if you have the time and inclination\nto really chase down those rabbit trails\n\n46\n00:02:15.800 --> 00:02:18.370\nand figure out every little nuance,\nobviously,\n\n47\n00:02:18.370 --> 00:02:21.590\nyou can do a lot with it that's more\nthan even it was intended to do.\n\n48\n00:02:21.590 --> 00:02:22.900\nSo very cool stuff.\n\n49\n00:02:22.900 --> 00:02:26.970\nThat being said, let's get you guys\ninto some of these structured commands.\n\n50\n00:02:26.970 --> 00:02:27.810\nAnd as I like to do,\n\n51\n00:02:27.810 --> 00:02:31.830\nlet's start with some of the more\ncommon stuff like if statements, right.\n\n52\n00:02:31.830 --> 00:02:33.820\nLet's look at a file that I've created for\nus so\n\n53\n00:02:33.820 --> 00:02:37.610\nwe can see some of the structure\nto if statements inside of gawk.\n\n54\n00:02:37.610 --> 00:02:42.040\nSo, I will cat if _statements.txt.\n\n55\n00:02:42.040 --> 00:02:43.580\nAnd you have a bit of over scroll here.\n\n56\n00:02:44.800 --> 00:02:46.559\nAnd yeah, it looks like a lot, but\n\n57\n00:02:46.559 --> 00:02:50.223\nit's different ways in which if\nstatements might be utilized, okay?\n\n58\n00:02:50.223 --> 00:02:54.400\nWe're gonna look at the formats, and\nthen we're gonna run some examples, okay?\n\n59\n00:02:54.400 --> 00:02:56.070\nSo we're starting off here.\n\n60\n00:02:56.070 --> 00:02:58.550\nIf condition, statement command.\n\n61\n00:02:58.550 --> 00:02:59.490\nVery simple.\n\n62\n00:02:59.490 --> 00:03:01.080\nI love this type, right?\n\n63\n00:03:01.080 --> 00:03:05.380\nAnd nothing but a very,\nit's all in a pretty pink package.\n\n64\n00:03:05.380 --> 00:03:07.420\nTie up the bow and give it away.\n\n65\n00:03:07.420 --> 00:03:09.390\nRight, you got your if.\n\n66\n00:03:09.390 --> 00:03:14.160\nSo if condition, which is if this is\ntrue or if this is not true, right.\n\n67\n00:03:14.160 --> 00:03:18.709\nIf this exists, this kind of thing,\nright, then do whatever comes after that.\n\n68\n00:03:18.709 --> 00:03:20.600\nIf it doesn't exist, it won't do it.\n\n69\n00:03:20.600 --> 00:03:21.830\nIf it's not true, it won't happen.\n\n70\n00:03:21.830 --> 00:03:26.640\nIf it is true that it's not true,\nit won't happen or will happen.\n\n71\n00:03:26.640 --> 00:03:29.688\nYeah, it starts twisting the mind up but\nyou get the idea.\n\n72\n00:03:29.688 --> 00:03:31.020\nRight, very simple.\n\n73\n00:03:31.020 --> 00:03:35.480\nWe also have if condition\nstatement command.\n\n74\n00:03:35.480 --> 00:03:39.201\nNow, the difference between this and\nthis can be a little confusing,\n\n75\n00:03:39.201 --> 00:03:41.420\njust at least the way that I've shown it.\n\n76\n00:03:42.560 --> 00:03:47.230\nBut if you're inside of a script,\nand you only have one statement or\n\n77\n00:03:47.230 --> 00:03:48.620\ncommand that you want to run.\n\n78\n00:03:48.620 --> 00:03:53.190\nYou notice that these are not pluralized\nhere, specifically in this if statement or\n\n79\n00:03:53.190 --> 00:03:56.583\nin this if documents that I've\ncreated that teach you guys,\n\n80\n00:03:56.583 --> 00:04:01.260\nthat plurality matters\nwhen it comes to this.\n\n81\n00:04:01.260 --> 00:04:04.050\nRight, if you only have one,\nyou can make it all on one line, or\n\n82\n00:04:04.050 --> 00:04:05.880\nyou can separate it by one line.\n\n83\n00:04:05.880 --> 00:04:07.020\nAnd it's super simple.\n\n84\n00:04:07.020 --> 00:04:08.550\nIf condition, statement.\n\n85\n00:04:09.710 --> 00:04:11.090\nThen you're done.\n\n86\n00:04:11.090 --> 00:04:13.814\nIt's when you have more\nthan one statement or\n\n87\n00:04:13.814 --> 00:04:17.763\ncommand that you want to run that\nit starts to change a little bit.\n\n88\n00:04:17.763 --> 00:04:22.593\nAnd it changes by adding the curly braces,\nokay?\n\n89\n00:04:22.593 --> 00:04:27.170\nSo you'll notice in this if condition,\nI've got three statements or commands, and\n\n90\n00:04:27.170 --> 00:04:30.640\nnow they have a command1,\ncommand2, command3.\n\n91\n00:04:30.640 --> 00:04:32.680\nThere's multiples going on here.\n\n92\n00:04:32.680 --> 00:04:36.620\nSo I'm saying if condition,\nthen I've gotta open a curly brace.\n\n93\n00:04:36.620 --> 00:04:40.667\nThen I can do statement or command1,\nstatement or command2, statement or\n\n94\n00:04:40.667 --> 00:04:41.672\ncommand3, etc.\n\n95\n00:04:41.672 --> 00:04:44.610\nAnd when I'm done, close curly brace.\n\n96\n00:04:44.610 --> 00:04:45.730\nAnd remember,\n\n97\n00:04:45.730 --> 00:04:49.250\nthese are separate from the script\nthat they might be running in, right.\n\n98\n00:04:49.250 --> 00:04:52.690\nSo if this was a script I'd\nhave like a begin, happening.\n\n99\n00:04:52.690 --> 00:04:55.426\nI would need my own set\nof curly braces for, or\n\n100\n00:04:55.426 --> 00:05:01.258\nbegin with needed own set of curly braces\nfor that particular piece of the script.\n\n101\n00:05:01.258 --> 00:05:04.088\nAnd inside of that if there was an if,\nthey would need their own.\n\n102\n00:05:04.088 --> 00:05:08.800\nSo, in bash we had if then fee, and that's\nhow we knew that we were at the end.\n\n103\n00:05:08.800 --> 00:05:12.740\nHere, we define it by the statement\nportion anyway by saying,\n\n104\n00:05:14.960 --> 00:05:17.170\ncurly brace open, curly brace close, okay?\n\n105\n00:05:17.170 --> 00:05:19.560\nSo don't forget to put those in there.\n\n106\n00:05:19.560 --> 00:05:22.370\nI probably will, just because that's me.\n\n107\n00:05:22.370 --> 00:05:23.420\nGod help me.\n\n108\n00:05:23.420 --> 00:05:24.480\nRight, so there we go.\n\n109\n00:05:25.840 --> 00:05:31.340\nWe also have,\nif else statements inside of gawk, right?\n\n110\n00:05:31.340 --> 00:05:32.320\nAnd here we go.\n\n111\n00:05:32.320 --> 00:05:36.790\nIf condition, basically then,\nby starting the curly braces,\n\n112\n00:05:36.790 --> 00:05:40.810\nstatement1 and statement2,\nelse do these things.\n\n113\n00:05:40.810 --> 00:05:42.450\nStatement1 and statement2.\n\n114\n00:05:42.450 --> 00:05:50.160\nRight, so and you'll notice also here that\nelse gets it's own set of curly braces.\n\n115\n00:05:50.160 --> 00:05:53.765\nRight, so a little bit of difference\nthere when it comes to what we've seen in\n\n116\n00:05:53.765 --> 00:05:55.305\nbash script.\n\n117\n00:05:55.305 --> 00:05:58.520\nSo, inside of gawk ,if needs\nits only curly braces and\n\n118\n00:05:58.520 --> 00:06:02.660\nif you throw an else on there it will\nalso need it's own set of curly braces.\n\n119\n00:06:02.660 --> 00:06:07.270\nSo make sure there are curly braces for\neach if statement and each else statement.\n\n120\n00:06:07.270 --> 00:06:08.330\nEnd of sermon.\n\n121\n00:06:08.330 --> 00:06:09.450\nNow, we can play around and\n\n122\n00:06:09.450 --> 00:06:13.370\nwe're a little familiar with\nthe formats of how the statements work.\n\n123\n00:06:13.370 --> 00:06:17.860\nWe can play around with some examples and\nsee how they actually do something, okay?\n\n124\n00:06:19.780 --> 00:06:21.900\nI guess I can't type clear.\n\n125\n00:06:21.900 --> 00:06:23.280\nThere we go.\n\n126\n00:06:23.280 --> 00:06:26.440\nAnd let's see,\nmy first one is an inline statement.\n\n127\n00:06:26.440 --> 00:06:28.410\nStraight from the command line.\n\n128\n00:06:28.410 --> 00:06:31.920\nHow do I do iffing for gawk, okay?\n\n129\n00:06:31.920 --> 00:06:35.640\nSo gawk, I don't know why I\nalways start [INAUDIBLE] in Gawk.\n\n130\n00:06:35.640 --> 00:06:37.850\nI get the G and\nA confused all of the time.\n\n131\n00:06:37.850 --> 00:06:39.670\nSo I'm going to do gawk.\n\n132\n00:06:39.670 --> 00:06:42.740\nAnd start my good opening goodness here.\n\n133\n00:06:42.740 --> 00:06:46.866\nCurly braces, I've got something that I'm\ndoing, commands that I'm throwing in,\n\n134\n00:06:46.866 --> 00:06:48.288\njust like I've done before.\n\n135\n00:06:48.288 --> 00:06:55.202\nWe will say, if, and we will do\ncurly brace, right, and we'll say,\n\n136\n00:06:55.202 --> 00:07:01.062\n$1 is greater than $2,\nI'm sorry it's not code,\n\n137\n00:07:01.062 --> 00:07:05.779\nI just want to put curly\nbraces everywhere now.\n\n138\n00:07:05.779 --> 00:07:06.535\nLet's try that again.\n\n139\n00:07:06.535 --> 00:07:13.290\n$1 is greater than $2, close that out.\n\n140\n00:07:13.290 --> 00:07:17.140\nThen print $1, $2 like that.\n\n141\n00:07:17.140 --> 00:07:20.560\nNow, we can close our curly brace,\nbecause we're in line and\n\n142\n00:07:20.560 --> 00:07:22.140\nit's just the single, right?\n\n143\n00:07:22.140 --> 00:07:23.810\nThe curly braces aren't necessary.\n\n144\n00:07:23.810 --> 00:07:27.970\nThis is just the script portion\nof the gawk command on top, okay?\n\n145\n00:07:27.970 --> 00:07:31.530\nThat's why the curly braces,\nnot if curly brace is here.\n\n146\n00:07:31.530 --> 00:07:33.000\nOne command.\n\n147\n00:07:33.000 --> 00:07:35.438\nAnd I didn't type in [INAUDIBLE].\n\n148\n00:07:35.438 --> 00:07:36.708\nThere we go.\n\n149\n00:07:36.708 --> 00:07:39.871\nI think that's all we need and\nwe just, as always,\n\n150\n00:07:39.871 --> 00:07:43.415\nlittle tick there in single quote and\nthen feed the file.\n\n151\n00:07:43.415 --> 00:07:47.315\nI'll do file 2.txt, and hit Enter.\n\n152\n00:07:47.315 --> 00:07:52.759\nNow, let's look at file2,\nand it is file2.txt.\n\n153\n00:07:52.759 --> 00:07:58.415\nYou'll see it's just two rows,\nso field1, field2, $1, $2.\n\n154\n00:07:58.415 --> 00:08:02.733\nAnd $1 counts in tens, 10, 20,\n30, 40, 50, 60, 70, 80, 90, 100.\n\n155\n00:08:02.733 --> 00:08:08.297\n$2, it's doing the opposite, 100, 90,\n80, 70, 60, 50, 40, 30, and so on.\n\n156\n00:08:08.297 --> 00:08:09.280\nSo what did I do?\n\n157\n00:08:09.280 --> 00:08:16.700\nI said, if $1 is greater than $2,\nthen print whatever that is, $1$2.\n\n158\n00:08:16.700 --> 00:08:21.380\nSo once it gets down to\nwhere $1 is greater than $2,\n\n159\n00:08:21.380 --> 00:08:23.130\nit starts printing those out.\n\n160\n00:08:24.340 --> 00:08:25.880\nPretty cool, right?\n\n161\n00:08:25.880 --> 00:08:31.870\nSo simple if condition,\nsimple if statement, okay?\n\n162\n00:08:31.870 --> 00:08:34.800\nClear out again,\nlet's do alternate if format.\n\n163\n00:08:34.800 --> 00:08:35.700\nLet's take a look at this.\n\n164\n00:08:35.700 --> 00:08:36.940\nSo I've got this gawk script.\n\n165\n00:08:36.940 --> 00:08:42.155\nLet's cat gawk_if.gawk, yeah.\n\n166\n00:08:42.155 --> 00:08:44.770\nWe'll name them all .gawk\nif they're a script.\n\n167\n00:08:44.770 --> 00:08:49.200\nSo same thing, but\nwe've put it in a script format, right?\n\n168\n00:08:49.200 --> 00:08:54.282\nSo now I've got if $1 is greater than $2.\n\n169\n00:08:54.282 --> 00:08:58.801\nI put it in curly braces,\nbecause I find that even though I\n\n170\n00:08:58.801 --> 00:09:04.040\ndon't need that here,\nI find it to be a good habit to get into.\n\n171\n00:09:04.040 --> 00:09:06.260\nOtherwise, guess what, you forget.\n\n172\n00:09:06.260 --> 00:09:12.170\nI hardly ever, if ever, do command line if\nstatements with just one single something.\n\n173\n00:09:12.170 --> 00:09:13.660\nNot to say that it doesn't happen.\n\n174\n00:09:13.660 --> 00:09:15.280\nNot typical though, right?\n\n175\n00:09:15.280 --> 00:09:19.410\nSo it can get you into some bad habits,\nwhich is forgetting those curly braces.\n\n176\n00:09:19.410 --> 00:09:22.780\nAnd even when I only have one,\nI'm doing it anyway.\n\n177\n00:09:22.780 --> 00:09:25.924\nCuz I'll forget if I\nget into those habits.\n\n178\n00:09:25.924 --> 00:09:28.050\n&gt;&gt; It's something to reflect on, but\n\n179\n00:09:28.050 --> 00:09:30.510\nI need to come back and\nadd more than just this print statement.\n\n180\n00:09:30.510 --> 00:09:33.945\nI need additional,\nmaybe calculation or additional logic.\n\n181\n00:09:33.945 --> 00:09:37.878\nBut if you forget the print statements,\nthen you've got weird runtime errors\n\n182\n00:09:37.878 --> 00:09:42.080\nwhere you're like, well,\nthat did not behave as I anticipated.\n\n183\n00:09:42.080 --> 00:09:47.070\nBecause if is only gonna catch that first\nstatement immediately after it, and\n\n184\n00:09:47.070 --> 00:09:49.150\nthen it's gonna run\nthe other one regardless.\n\n185\n00:09:49.150 --> 00:09:50.840\nSo it's almost like it's not\npart of the if statement.\n\n186\n00:09:50.840 --> 00:09:55.310\nSo I also put curly braces,\neven if there's one thing in there, for\n\n187\n00:09:55.310 --> 00:09:56.100\nthe most part.\n\n188\n00:09:56.100 --> 00:09:57.649\nEvery once in a while-\n&gt;&gt; Yeah, you get lazy.\n\n189\n00:09:57.649 --> 00:09:58.183\n&gt;&gt; I'll get that single line.\n\n190\n00:09:58.183 --> 00:09:59.810\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm like, what's this?\n\n191\n00:09:59.810 --> 00:10:02.820\nI know it's gonna be this simple thing,\nlike I'm checking for errors or things.\n\n192\n00:10:02.820 --> 00:10:05.800\nThis isn't necessarily gawk,\nthis is just programming in general.\n\n193\n00:10:06.900 --> 00:10:11.660\nBut most of the time,\nlet's say 95%, curly braces.\n\n194\n00:10:11.660 --> 00:10:12.610\nSo if I need to come back and\n\n195\n00:10:12.610 --> 00:10:16.760\nadd things, I don't have to go chasing\nshenanigans all over the place.\n\n196\n00:10:16.760 --> 00:10:22.410\n&gt;&gt; Yeah, having a bit of forethoughts\nabout this script may evolve,\n\n197\n00:10:22.410 --> 00:10:24.950\nright, and consistency in your code.\n\n198\n00:10:24.950 --> 00:10:27.170\nSo you know my habit is\nto put the curly braces.\n\n199\n00:10:27.170 --> 00:10:28.820\nSo if it's giving me a runtime error,\n\n200\n00:10:28.820 --> 00:10:31.820\nit's probably not that,\nprobably something else.\n\n201\n00:10:31.820 --> 00:10:35.990\nCould be that, but unlikely,\nbecause my habit is to always do it.\n\n202\n00:10:35.990 --> 00:10:38.911\nDon't forget to look for them,\nbecause you're probably gonna do it.\n\n203\n00:10:38.911 --> 00:10:40.850\n[LAUGH] All right, let's run this one.\n\n204\n00:10:40.850 --> 00:10:42.810\nAnd we should get the same type of output,\nright?\n\n205\n00:10:42.810 --> 00:10:49.270\nSo gawk -f, and it is gawk_if.doc.\n\n206\n00:10:49.270 --> 00:10:51.880\nAnd file2, that's right, file2.\n\n207\n00:10:51.880 --> 00:10:52.520\nAnd there we go.\n\n208\n00:10:52.520 --> 00:10:56.240\nSame kind of output, just doing it from\na script with a different formatting.\n\n209\n00:10:57.410 --> 00:10:59.510\nAll right, let's move it along here.\n\n210\n00:10:59.510 --> 00:11:01.910\nLet's try multi command if, okay?\n\n211\n00:11:01.910 --> 00:11:05.690\nNo big deal,\nlet's take a look at the script first.\n\n212\n00:11:05.690 --> 00:11:11.905\nSo cat, what is it, gawk_if_multi.\n\n213\n00:11:11.905 --> 00:11:13.590\nI think I did, yes, there we go.\n\n214\n00:11:13.590 --> 00:11:18.212\nSo now I've got if $1 one\nis greater than the $2,\n\n215\n00:11:18.212 --> 00:11:25.080\nI've got var1 equals $1 times $2,\nand then print var1, all right?\n\n216\n00:11:25.080 --> 00:11:27.640\nSo I had multiple,\ndifferent commands that I wanted to do,\n\n217\n00:11:27.640 --> 00:11:29.720\nkind of like what Justin was just saying.\n\n218\n00:11:29.720 --> 00:11:31.470\nI've expanded what I wanted to do.\n\n219\n00:11:31.470 --> 00:11:34.560\nAnd now,\nbecause my curly braces are already there,\n\n220\n00:11:34.560 --> 00:11:37.470\nyou notice there's the curly brace\nopener for the if statement.\n\n221\n00:11:37.470 --> 00:11:39.140\nThere's the closer for the if statement.\n\n222\n00:11:39.140 --> 00:11:42.360\nAnd this one is the closer for\nthe actual script itself, right?\n\n223\n00:11:42.360 --> 00:11:44.920\nAnd that's the opener of\nthe script itself right there.\n\n224\n00:11:44.920 --> 00:11:48.160\nSo now, I should get a mathematical\ncalculation based off\n\n225\n00:11:48.160 --> 00:11:50.950\nthe numbers that I slurp\nin from fields one and\n\n226\n00:11:50.950 --> 00:11:56.360\ntwo, based off of where they exist\nin the script or in the file.\n\n227\n00:11:56.360 --> 00:11:57.886\nIt's pretty cool, let's try that one.\n\n228\n00:11:57.886 --> 00:12:02.100\ngawk -f and it is, what is it?\n\n229\n00:12:02.100 --> 00:12:09.500\nGawk if _multi gawk, and it is file2.txt.\n\n230\n00:12:09.500 --> 00:12:12.720\nAnd there we go, so\nit just gives me some calculations.\n\n231\n00:12:12.720 --> 00:12:13.710\nVery, very cool stuff.\n\n232\n00:12:14.840 --> 00:12:19.230\nAll right, one more,\nwe'll do an else just for completeness.\n\n233\n00:12:19.230 --> 00:12:25.227\nNow let's check that,\ncat gawk if_else.gawk.\n\n234\n00:12:25.227 --> 00:12:26.207\nHere we go.\n\n235\n00:12:26.207 --> 00:12:30.435\nSo now I've got if $2 is greater than 50,\n\n236\n00:12:30.435 --> 00:12:34.230\nthen do var1 equals $1 divided by 5.\n\n237\n00:12:34.230 --> 00:12:38.079\nAnd print var1, else just print $1.\n\n238\n00:12:38.079 --> 00:12:42.247\nAgain, very, very contrived stuff here.\n\n239\n00:12:42.247 --> 00:12:45.757\nSo let's run it, gawk -f.\n\n240\n00:12:45.757 --> 00:12:48.306\nIt is gawk if_else_else.gawk.\n\n241\n00:12:48.306 --> 00:12:53.872\nOops, let's see,\nhelps if I add the actual file.\n\n242\n00:12:53.872 --> 00:12:56.077\nWhich is file2, was it?\n\n243\n00:12:56.077 --> 00:12:57.090\nYeah, file2.\n\n244\n00:12:58.550 --> 00:13:02.220\nMan, I'm having trouble today,\nfile2, there we go.\n\n245\n00:13:03.340 --> 00:13:06.720\nThere we go, it does the calculations\nnecessary that I've asked it do.\n\n246\n00:13:06.720 --> 00:13:13.389\nSo one of those conditions was if the if\ncondition I want to say was true, maybe?\n\n247\n00:13:13.389 --> 00:13:13.992\nI can't think.\n\n248\n00:13:13.992 --> 00:13:17.250\nI can't do the math, cuz I don't know\nwhat's in $2 off the top of my head.\n\n249\n00:13:17.250 --> 00:13:19.920\nBut it did what I was looking for\nit to do, right?\n\n250\n00:13:19.920 --> 00:13:22.610\nI can go in and change parameters,\nit would do something else.\n\n251\n00:13:22.610 --> 00:13:25.220\nThere was no run time errors,\neverything worked.\n\n252\n00:13:25.220 --> 00:13:29.166\nAnd that's the format in which it\ndoes the thing that you ask it, okay?\n\n253\n00:13:29.166 --> 00:13:34.560\nIf statements, I think that's all\nwe really need to get you pretty,\n\n254\n00:13:34.560 --> 00:13:41.083\npretty immersed in some iffing if you need\nto inside of your gawk [INAUDIBLE], okay?\n\n255\n00:13:41.083 --> 00:13:45.530\nAll right, moving on,\nlet's go to, while loops.\n\n256\n00:13:45.530 --> 00:13:47.060\nMan, while loops, they're so much fun.\n\n257\n00:13:47.060 --> 00:13:48.400\nWe love while loops.\n\n258\n00:13:48.400 --> 00:13:52.360\nI'll clear it out here,\nI've got some format for us.\n\n259\n00:13:52.360 --> 00:13:57.280\nSo let's cat while statements,\nand here we go.\n\n260\n00:13:57.280 --> 00:13:59.610\nIt's very similar to the if,\nhow about that?\n\n261\n00:13:59.610 --> 00:14:02.500\nSomeone was consistent in the way they\nwrote something to make it easy for\n\n262\n00:14:02.500 --> 00:14:05.350\nus to try to remember the syntax.\n\n263\n00:14:05.350 --> 00:14:10.340\nThank you so much gawk writers,\nwhoever was the impetus for this.\n\n264\n00:14:10.340 --> 00:14:14.804\nSo we've got while the condition is true,\ndo statement and commands.\n\n265\n00:14:14.804 --> 00:14:17.339\nBut as we remember from\nthese types of things,\n\n266\n00:14:17.339 --> 00:14:19.619\ntypically we are looping through stuff.\n\n267\n00:14:19.619 --> 00:14:23.900\nBut the format of it,\nnot insane, very simple.\n\n268\n00:14:25.505 --> 00:14:29.100\nSo let's take a look at what I've got for\nus here.\n\n269\n00:14:29.100 --> 00:14:31.840\nI've got cat, what do we got?\n\n270\n00:14:31.840 --> 00:14:35.796\ngawk while.gawk, yeah, let's do it.\n\n271\n00:14:35.796 --> 00:14:39.530\nSo here we go, opening the script i=1.\n\n272\n00:14:39.530 --> 00:14:42.703\nThis should all be like,\nthis is very familiar.\n\n273\n00:14:42.703 --> 00:14:48.045\nIt's like I've had this before,\nbut with cinnamon on it?\n\n274\n00:14:48.045 --> 00:14:50.980\nIt's something like that,\nyou know what I mean?\n\n275\n00:14:50.980 --> 00:14:55.300\nWhile i is less than or equal to 10,\nprint, dollar sign's there.\n\n276\n00:14:55.300 --> 00:14:57.480\nSo print whatever that line is.\n\n277\n00:14:57.480 --> 00:15:02.740\nThen print what i is, and\nthen increment i with i++.\n\n278\n00:15:02.740 --> 00:15:05.320\nIt should all be old hat for you guys.\n\n279\n00:15:05.320 --> 00:15:07.735\nDon't forget your curly braces,\nopen and close.\n\n280\n00:15:07.735 --> 00:15:10.710\nCuz I know I sure as heck\nwill from time to time.\n\n281\n00:15:10.710 --> 00:15:13.110\nAnd the more I tell you,\nthe more I tell myself.\n\n282\n00:15:15.020 --> 00:15:17.240\nSo let's do it,\nlet's see if this actually works.\n\n283\n00:15:17.240 --> 00:15:20.300\nSo we're gonna to run this against file3,\nso let's cat file3.\n\n284\n00:15:21.750 --> 00:15:26.230\nAnd this is iteration, and it should\ntell us what each iteration is, okay?\n\n285\n00:15:26.230 --> 00:15:29.990\nWhich is why I'm printing the entire\nline of data that it takes in,\n\n286\n00:15:29.990 --> 00:15:32.200\nnot entire record field.\n\n287\n00:15:32.200 --> 00:15:35.162\nSo here we go, gawk -f.\n\n288\n00:15:35.162 --> 00:15:41.410\nAnd it is, gawk while.gawk,\nand it is file3.txt.\n\n289\n00:15:41.410 --> 00:15:45.700\nAnd there we go, this is iteration one,\nthis is iteration two.\n\n290\n00:15:45.700 --> 00:15:48.510\nThis is iteration three,\nso on and so forth.\n\n291\n00:15:48.510 --> 00:15:52.775\nMet the while condition, which is\nwhile i is less than or equal to ten.\n\n292\n00:15:52.775 --> 00:15:55.748\nPrint out the line,\nprint out i on a separate line.\n\n293\n00:15:55.748 --> 00:15:58.842\nThen increment i, and\nlather, rinse, repeat.\n\n294\n00:15:58.842 --> 00:16:01.318\nSimple while looping.\n\n295\n00:16:01.318 --> 00:16:02.130\nI love it.\n\n296\n00:16:02.130 --> 00:16:09.158\nAgain, shouldn't be anything outside\nof you guys scope of ability, right?\n\n297\n00:16:09.158 --> 00:16:09.937\n&gt;&gt; Now Daniel,\n\n298\n00:16:09.937 --> 00:16:14.320\nsomeone that people will run into\nwith while loops, are infinite loops.\n\n299\n00:16:14.320 --> 00:16:15.792\nI forget the I plus plus.\n\n300\n00:16:15.792 --> 00:16:20.019\nI'm just wondering will gawk,\nwill it eventually time out, or\n\n301\n00:16:20.019 --> 00:16:22.620\nwill it just hang out until you kill it?\n\n302\n00:16:22.620 --> 00:16:25.930\nOr does it do anything special,\nif I forget that plus plus?\n\n303\n00:16:25.930 --> 00:16:30.517\nOr maybe I'm iterating,\nwhile it's greater than ten.\n\n304\n00:16:30.517 --> 00:16:33.130\n&gt;&gt; Yeah.\n&gt;&gt; Never or maybe it always is.\n\n305\n00:16:33.130 --> 00:16:35.130\nSo there are some cases with whiles.\n\n306\n00:16:35.130 --> 00:16:36.550\n&gt;&gt; Right.\n&gt;&gt; How does gawk handle that?\n\n307\n00:16:36.550 --> 00:16:38.020\nCuz I'm not saying I have, but\n\n308\n00:16:38.020 --> 00:16:40.910\nI've heard of people locking up\ncomputers with runaway while loops.\n\n309\n00:16:40.910 --> 00:16:44.449\n&gt;&gt; Man, it's because runaway while\nloops will lock up your computer, and\n\n310\n00:16:44.449 --> 00:16:45.968\ngawk will definitely do that.\n\n311\n00:16:45.968 --> 00:16:50.847\nYou forget that I plus plus or any kind of\nthing that changes your incrementation or\n\n312\n00:16:50.847 --> 00:16:54.323\ndoesn't change it to a variable\nthat would get it to stop.\n\n313\n00:16:54.323 --> 00:16:56.715\nThen you're gonna have\njust a runaway screen and\n\n314\n00:16:56.715 --> 00:16:59.380\nyou have to control C to make it stop.\n\n315\n00:16:59.380 --> 00:17:05.740\nEven worse, to the old power button to\nmake it happen with the main guy, right?\n\n316\n00:17:05.740 --> 00:17:07.510\nSo, be careful of that.\n\n317\n00:17:07.510 --> 00:17:11.960\nYou still have the same problems with\nyour while loops inside out Gawk as\n\n318\n00:17:11.960 --> 00:17:13.900\nyou would with anywhere else.\n\n319\n00:17:13.900 --> 00:17:16.370\nOkay?\nSo good point for Justin to bring up.\n\n320\n00:17:16.370 --> 00:17:18.850\nLet's see here,\nwe also have break statements.\n\n321\n00:17:19.930 --> 00:17:20.800\nYey, right?\n\n322\n00:17:20.800 --> 00:17:22.150\nNow and then.\n\n323\n00:17:22.150 --> 00:17:25.210\nIf a condition is met while I am looping,\nI want it to stop.\n\n324\n00:17:25.210 --> 00:17:27.620\nI don't want it to continue, right?\n\n325\n00:17:27.620 --> 00:17:30.840\nHey woah, that is enough of that, right?\n\n326\n00:17:30.840 --> 00:17:34.943\nSo we could throw break statements at it\nas well, I show you that so let's clear.\n\n327\n00:17:34.943 --> 00:17:37.396\nI've got gawk break dot gawk.\n\n328\n00:17:37.396 --> 00:17:40.742\nSounds Klingon, gawk break dot gawk!\n\n329\n00:17:40.742 --> 00:17:44.630\ncat gawk break dot gawk.\n\n330\n00:17:44.630 --> 00:17:47.630\nSo here we go, we've got I equals one.\n\n331\n00:17:47.630 --> 00:17:50.510\nWhile I is less than or equal to ten.\n\n332\n00:17:50.510 --> 00:17:51.897\nPrint, ten times zero.\n\n333\n00:17:51.897 --> 00:17:54.250\nAnd then I put out the number\nnext to it this time.\n\n334\n00:17:54.250 --> 00:17:59.650\nInstead, and\nit said if I equals five, then break.\n\n335\n00:17:59.650 --> 00:18:01.920\nSo stop iterating that point.\n\n336\n00:18:01.920 --> 00:18:03.900\nI'm done, if I reached five,\n\n337\n00:18:03.900 --> 00:18:09.800\nI've reached a certain condition that\nI'm not sure if we'll get to or not.\n\n338\n00:18:09.800 --> 00:18:12.260\nI'm using a simple example\nhere that I know it will.\n\n339\n00:18:12.260 --> 00:18:17.780\nBut if I wasn't sure, and I knew I wanted\nto stop on that specific iteration,\n\n340\n00:18:17.780 --> 00:18:21.142\nI can just throw my break man in there,\nand it's just as easy as that.\n\n341\n00:18:21.142 --> 00:18:23.910\nGiven an statement of what\nit should look for, and\n\n342\n00:18:23.910 --> 00:18:26.940\nthen if it finds it, break out, right?\n\n343\n00:18:26.940 --> 00:18:27.520\nVery very simple.\n\n344\n00:18:28.960 --> 00:18:34.020\nYou will notice though, that I did not\nneed curly braces with the statement here.\n\n345\n00:18:34.020 --> 00:18:38.860\nIt kind of like borrows from\nthe while statements in curly braces.\n\n346\n00:18:38.860 --> 00:18:40.000\nJust keep that in mind.\n\n347\n00:18:41.180 --> 00:18:42.820\nAll right, you know what though?\n\n348\n00:18:42.820 --> 00:18:45.870\nI'd be interested in seeing if\nI threw some curly braces for\n\n349\n00:18:45.870 --> 00:18:48.460\nthe if, would it continue to work?\n\n350\n00:18:48.460 --> 00:18:49.880\nMy gut says it would.\n\n351\n00:18:49.880 --> 00:18:51.540\nMy gut says well yeah, yeah.\n\n352\n00:18:51.540 --> 00:18:54.320\nThat's proper if stuff right there.\n\n353\n00:18:54.320 --> 00:18:58.029\nBut maybe, maybe just maybe it\nwould freak out the wild statement.\n\n354\n00:18:59.040 --> 00:19:00.797\nRight, we don't know,\nwe could play with it.\n\n355\n00:19:00.797 --> 00:19:02.440\nWe can have some fun.\n\n356\n00:19:02.440 --> 00:19:04.890\nLet's run it as is, and\nthen we'll go and modify it and just for\n\n357\n00:19:04.890 --> 00:19:07.140\nour own curiosity's sake.\n\n358\n00:19:07.140 --> 00:19:08.370\nLet's try this here.\n\n359\n00:19:08.370 --> 00:19:09.390\nWhat are we doing?\n\n360\n00:19:09.390 --> 00:19:16.990\nGawk, yeah we'll say downshift for the\nScript File which is gawk break dot gawk.\n\n361\n00:19:16.990 --> 00:19:21.040\nAnd then the whoops the file music file,\nthere we go.\n\n362\n00:19:22.080 --> 00:19:22.586\nHey look.\n\n363\n00:19:22.586 --> 00:19:25.440\nThis is iteration one,\nthis iteration two, three, four.\n\n364\n00:19:25.440 --> 00:19:28.840\nIt did five and then it said, I'm done.\n\n365\n00:19:28.840 --> 00:19:33.920\nBecause after I found five and\nprinted then it stopped, right?\n\n366\n00:19:33.920 --> 00:19:36.540\nIf I would have put this print\nstatement underneath the break\n\n367\n00:19:36.540 --> 00:19:38.360\nit would not have printed five, right?\n\n368\n00:19:38.360 --> 00:19:42.610\nBecause it's reading that in that\nbreak statement in first and\n\n369\n00:19:42.610 --> 00:19:46.080\ndoing what it says before it would\nhave gotten to the print statement.\n\n370\n00:19:46.080 --> 00:19:46.680\nJust keep that in mind.\n\n371\n00:19:47.780 --> 00:19:53.604\nLet's go back, let's nano that real quick,\nnano gawk break dot gawk.\n\n372\n00:19:53.604 --> 00:19:54.780\nAnd let's go in here.\n\n373\n00:19:54.780 --> 00:19:58.772\nLet's see what happens if I.\n\n374\n00:19:58.772 --> 00:20:02.751\nTo this.\n\n375\n00:20:02.751 --> 00:20:06.708\nAnd then, to this, just cuz I'm curious.\n\n376\n00:20:06.708 --> 00:20:08.400\nI don't know about you Justin,\nbut I'm curious.\n\n377\n00:20:10.040 --> 00:20:11.230\nHey look, it still works.\n\n378\n00:20:11.230 --> 00:20:14.036\nSo good.\nIt sees that as proper syntax,\n\n379\n00:20:14.036 --> 00:20:16.576\nbecause if statements.\n\n380\n00:20:16.576 --> 00:20:17.550\nGood stuff.\n\n381\n00:20:17.550 --> 00:20:21.080\n&gt;&gt; Yeah, so that's one of those things\nwhere it's probably always good to\n\n382\n00:20:21.080 --> 00:20:23.660\ndon't make assumptions that certain\nthings are going to happen.\n\n383\n00:20:23.660 --> 00:20:26.810\nBecause you are like I know that\nif works like this in isolation.\n\n384\n00:20:28.060 --> 00:20:32.494\nBut we have run into times Daniel and I\nsometimes outside of these episodes where\n\n385\n00:20:32.494 --> 00:20:35.803\nthere is some formatting\nrequirements that if are not met,\n\n386\n00:20:35.803 --> 00:20:37.544\nthings just go horribly awry.\n\n387\n00:20:37.544 --> 00:20:41.704\nSo it's always good to check those,\neven if you are like I would almost bet my\n\n388\n00:20:41.704 --> 00:20:42.300\nnext\n&gt;&gt; [LAUGH]\n\n389\n00:20:42.300 --> 00:20:44.405\n&gt;&gt; weeks paycheck on that.\n\n390\n00:20:44.405 --> 00:20:46.820\nProbably don't do that because you\nnever know what's going to happen.\n\n391\n00:20:46.820 --> 00:20:49.010\n&gt;&gt; Exactly right, it's better to test.\n\n392\n00:20:49.010 --> 00:20:51.720\nAgain, don't let curiosity stop you here.\n\n393\n00:20:51.720 --> 00:20:54.768\nAs long as it's not a production script,\ncopy the production script\n\n394\n00:20:54.768 --> 00:20:59.110\nto a non-production area and\ncuriosity won't kill the cat.\n\n395\n00:20:59.110 --> 00:21:02.850\nSo, be curious, play around,\nsee what it'll do, see what it won't do,\n\n396\n00:21:02.850 --> 00:21:04.100\nsee if you can get it to break.\n\n397\n00:21:04.100 --> 00:21:07.100\nSee if you can get it to operate\noutside of its functionality.\n\n398\n00:21:07.100 --> 00:21:09.330\nAgain, that's this my\nhacker mindset coming in.\n\n399\n00:21:09.330 --> 00:21:12.490\nAnd that's really where\nhacking comes from.\n\n400\n00:21:12.490 --> 00:21:14.920\nWhat can, I know what it does,\nwhat can I make it do?\n\n401\n00:21:14.920 --> 00:21:15.870\nCan I make it break?\n\n402\n00:21:15.870 --> 00:21:16.930\nCan I make it do this?\n\n403\n00:21:16.930 --> 00:21:17.843\nYeah, hit it with a hammer.\n\n404\n00:21:17.843 --> 00:21:19.347\nYou never know.\nIt's a lot of fun.\n\n405\n00:21:19.347 --> 00:21:24.240\nAll right, we have breaks,\nwe also have continues.\n\n406\n00:21:24.240 --> 00:21:27.530\nRight?\nI want to skip this iteration.\n\n407\n00:21:27.530 --> 00:21:30.677\nIf this condition becomes true skip this\niteration, go on to the next, right?\n\n408\n00:21:30.677 --> 00:21:31.853\nLook at that.\n\n409\n00:21:31.853 --> 00:21:35.490\ncat gawk underscore continue, I believe.\n\n410\n00:21:35.490 --> 00:21:37.690\nYeah, there we are, so here we go.\n\n411\n00:21:39.070 --> 00:21:45.870\nWhile I is less than or equal to ten, if\nI equals five then I want to increment I.\n\n412\n00:21:45.870 --> 00:21:50.390\nI want to print, awkward and continue.\n\n413\n00:21:50.390 --> 00:21:54.290\nSo basically,\ncontinue on to the next iteration.\n\n414\n00:21:54.290 --> 00:21:58.580\nSo, we should skip\nthe fifth iteration here,\n\n415\n00:21:58.580 --> 00:22:02.120\nwe should not see this iteration or\n\n416\n00:22:02.120 --> 00:22:06.200\nthis is iteration five, we should see\niteration four then iteration six.\n\n417\n00:22:06.200 --> 00:22:11.076\nAnd in between that I should say, awkward,\nlike that as the kids would say it is.\n\n418\n00:22:11.076 --> 00:22:13.839\nLet's try it, see here,\n\n419\n00:22:13.839 --> 00:22:20.105\ngawk dash F this is gawk\nunderscore continue and file.\n\n420\n00:22:20.105 --> 00:22:24.089\nCan open files through because that's\nnot an actual, there we go and\n\n421\n00:22:24.089 --> 00:22:27.210\nthat's exactly the output I'm looking for.\n\n422\n00:22:27.210 --> 00:22:29.360\nSo continues are there as well.\n\n423\n00:22:29.360 --> 00:22:34.608\nAgain, full, a really full feature set\nof programming utilities inside of gawk.\n\n424\n00:22:34.608 --> 00:22:36.000\nI'm very impressed with it actually.\n\n425\n00:22:37.050 --> 00:22:38.400\nSo one, two, three, and four.\n\n426\n00:22:38.400 --> 00:22:41.600\nIt hits the awkward statement and\nyou're on to the next iteration.\n\n427\n00:22:41.600 --> 00:22:46.130\nContinues so breaks continues, good while.\n\n428\n00:22:46.130 --> 00:22:48.370\nEverything we're so\nwarm and fuzzy used to.\n\n429\n00:22:49.470 --> 00:22:51.390\nWhere are we moving to next?\n\n430\n00:22:51.390 --> 00:22:56.450\nDo while, and\ninteresting take on the while statement.\n\n431\n00:22:57.770 --> 00:23:02.700\nEvery now and then, you'll have\nsomething that you wanna loop through.\n\n432\n00:23:02.700 --> 00:23:06.730\nBut you're pretty sure that,\nyou might not be sure whether or\n\n433\n00:23:06.730 --> 00:23:10.410\nnot it's going to actually at least\nget the first iteration through.\n\n434\n00:23:10.410 --> 00:23:12.829\nBut you need that first\niteration to happen.\n\n435\n00:23:12.829 --> 00:23:18.499\nSo the problem comes in with a wow\nstatement is the wow condition is checked,\n\n436\n00:23:18.499 --> 00:23:21.550\nit's looked at and considered.\n\n437\n00:23:21.550 --> 00:23:23.380\nBefore any of the commands are run.\n\n438\n00:23:23.380 --> 00:23:27.110\nBut what if we did the opposite thing?\n\n439\n00:23:27.110 --> 00:23:30.550\nWhat if we did some commands and\nthen checked if the statement is true?\n\n440\n00:23:31.550 --> 00:23:36.330\nAnd if the statement is true, loop back\naround and do those commands again, right?\n\n441\n00:23:36.330 --> 00:23:37.910\nHence the do while.\n\n442\n00:23:37.910 --> 00:23:41.390\nSo we're gonna have a list of commands and\nthis is gonna check this while statement.\n\n443\n00:23:41.390 --> 00:23:44.630\nIf it equals true, then it's gonna loop\nback around and it's gonna do it again.\n\n444\n00:23:44.630 --> 00:23:46.840\nAnd then it's gonna check\nthe while statement again.\n\n445\n00:23:46.840 --> 00:23:48.934\nSo kind of just the reverse idea.\n\n446\n00:23:48.934 --> 00:23:52.452\nThese are great for\nwhen you know you have,\n\n447\n00:23:52.452 --> 00:23:57.152\nyou want to iterate at least\nonce before it stops, okay?\n\n448\n00:23:57.152 --> 00:23:59.888\nVery good for that case scenario.\n\n449\n00:23:59.888 --> 00:24:02.733\nLet me show you what it looks like here.\n\n450\n00:24:02.733 --> 00:24:04.324\nWhat did I call this, do while?\n\n451\n00:24:04.324 --> 00:24:12.290\nSo cat gawk _do while.doc.\n\n452\n00:24:12.290 --> 00:24:16.189\nSo here, we have, I begin do i++,\n\n453\n00:24:16.189 --> 00:24:21.340\nincrement i print i,\nand while i is less or\n\n454\n00:24:21.340 --> 00:24:26.830\nequal to 10,\nthen it's gonna actually check that.\n\n455\n00:24:26.830 --> 00:24:31.000\nSo whatever is going on here,\ni is actually gonna start the value of 0,\n\n456\n00:24:31.000 --> 00:24:35.462\nit's used to clear i,\nit's was gonna increment that to 1.\n\n457\n00:24:36.990 --> 00:24:37.930\nAnd there you go, right?\n\n458\n00:24:37.930 --> 00:24:43.083\nSo let's give it a shot,\nlet's run up the gawk,\n\n459\n00:24:43.083 --> 00:24:46.244\ngawk gawk_dowhile.gawk.\n\n460\n00:24:46.244 --> 00:24:49.870\nAnd I think this should be all we need,\nwe need a file.\n\n461\n00:24:49.870 --> 00:24:51.790\nThere we go, so it does it.\n\n462\n00:24:51.790 --> 00:24:55.260\nIt says, cool, I'm doing this, I get, but\n\n463\n00:24:55.260 --> 00:24:58.060\nyou'll also notice something\ninteresting there.\n\n464\n00:24:58.060 --> 00:25:01.360\nHold on, I said, well,\nit's less than or equal to ten.\n\n465\n00:25:03.120 --> 00:25:07.310\nPrint i and then increment i,\nbut you'll notice here,\n\n466\n00:25:07.310 --> 00:25:10.690\nif you haven't seen it already,\nwe also got 11.\n\n467\n00:25:10.690 --> 00:25:13.660\nThat's greater than ten, why is that?\n\n468\n00:25:13.660 --> 00:25:18.792\nAgain, remember, it's actually doing\ncommands before checking the value.\n\n469\n00:25:18.792 --> 00:25:24.211\nSo we got one extra in before it\nchecked to see if I was less than or\n\n470\n00:25:24.211 --> 00:25:27.606\ngreater to or less than or equal to ten.\n\n471\n00:25:27.606 --> 00:25:29.209\nSo you got one more in.\n\n472\n00:25:29.209 --> 00:25:32.702\nThere's another way, like I said,\n\n473\n00:25:32.702 --> 00:25:38.109\nif you wanted to run that one time,\nyou can do it this way,\n\n474\n00:25:38.109 --> 00:25:43.757\nI'll have, let me show you\ncat dock_do while two, here.\n\n475\n00:25:43.757 --> 00:25:49.593\nI starts at 11, which is less than,\nit's greater than 10,\n\n476\n00:25:49.593 --> 00:25:53.389\nit makes this statement untrue, right?\n\n477\n00:25:53.389 --> 00:25:54.830\nBut it's still gonna actually run.\n\n478\n00:25:54.830 --> 00:26:00.820\nSo if we come back in here and change this\n2 while 2, you notice it prints 11 only.\n\n479\n00:26:00.820 --> 00:26:05.310\nI got it iterate at least once, and\nmaybe that's why I did this this way.\n\n480\n00:26:05.310 --> 00:26:07.300\nMaybe that's the case I needed.\n\n481\n00:26:07.300 --> 00:26:09.560\nSo do whiles are great for that.\n\n482\n00:26:09.560 --> 00:26:12.240\n&gt;&gt; And Daniel, I think you've\nhighlighted two things to consider\n\n483\n00:26:12.240 --> 00:26:13.850\nwhen using a do while.\n\n484\n00:26:13.850 --> 00:26:19.120\nNumber one, if we use other iterative\nstructures, while being one of them,\n\n485\n00:26:19.120 --> 00:26:23.420\nand for the most part, you're probably\nusing a while, or maybe a for loop.\n\n486\n00:26:23.420 --> 00:26:26.440\nThose happen where the check comes after.\n\n487\n00:26:26.440 --> 00:26:29.720\nYou check the first time you do something,\nand then the next check comes after.\n\n488\n00:26:29.720 --> 00:26:34.220\nSo you're in that mindset that's\nflipped on its lid in a do while, so\n\n489\n00:26:34.220 --> 00:26:36.010\nyou can get weird overruns.\n\n490\n00:26:36.010 --> 00:26:39.260\nThe first thing, always have to\ncheck your termination conditions.\n\n491\n00:26:39.260 --> 00:26:41.790\nThey may be a little bit different\nthen if you were going to use\n\n492\n00:26:41.790 --> 00:26:43.140\na standard while loop.\n\n493\n00:26:43.140 --> 00:26:47.000\nNumber two, I would say only use these\n\n494\n00:26:47.000 --> 00:26:51.080\nif you actually say the words I\nneed this to happen at least once\n\n495\n00:26:52.110 --> 00:26:56.900\nIf you kind of internal monologue that,\ndo wow is probably a good fit.\n\n496\n00:26:56.900 --> 00:27:02.370\nOtherwise, I can actually make this work\nwith a wow loop by altering what i is and\n\n497\n00:27:02.370 --> 00:27:06.360\nmaking sure that i is gonna be\ntrue at least for one time.\n\n498\n00:27:06.360 --> 00:27:07.670\nBut sometimes you're trying to,\n\n499\n00:27:07.670 --> 00:27:12.350\nit's like trying to shove my\nsize 12 feet into a size 7 shoe.\n\n500\n00:27:12.350 --> 00:27:15.440\nIt doesn't feel right, it's bad,\nand it can be painful,\n\n501\n00:27:15.440 --> 00:27:16.750\njust don't do it, those types of things.\n\n502\n00:27:16.750 --> 00:27:20.410\nSo those are the two takeaways for\na do-while that I tend to consider\n\n503\n00:27:20.410 --> 00:27:24.940\nwhenever I'm like, do I use a while or\na do-while in these specific scenarios?\n\n504\n00:27:24.940 --> 00:27:27.260\n&gt;&gt; Words of wisdom from\none Justin Dennison.\n\n505\n00:27:27.260 --> 00:27:30.240\nFollow them, live by them,\nmake them their mantra.\n\n506\n00:27:30.240 --> 00:27:33.640\nThat being said, that's about all I\nwanted to do with whiles and do whiles.\n\n507\n00:27:33.640 --> 00:27:35.810\nI've got one more looping\nstyle I wanna show you,\n\n508\n00:27:35.810 --> 00:27:39.060\nwhich is the good old C style,\nfor loops, right?\n\n509\n00:27:39.060 --> 00:27:42.690\nDon't forget those,\nwe'll be remiss if we did, right?\n\n510\n00:27:42.690 --> 00:27:44.200\nSo let's try this.\n\n511\n00:27:44.200 --> 00:27:50.240\nLet me show you a cat for_ C style,\nand here we go.\n\n512\n00:27:50.240 --> 00:27:54.520\nAgain, should be a warm blanket\nthat we put on in the winter,\n\n513\n00:27:54.520 --> 00:27:55.670\ndrinking a cup of coffee.\n\n514\n00:27:55.670 --> 00:27:57.420\nShould look very familiar to do.\n\n515\n00:27:57.420 --> 00:28:03.810\nFour open parentheses, a variable,\nsemicolon condition, semicolon iteration.\n\n516\n00:28:04.930 --> 00:28:08.778\nThat good old curly braces,\ndon't forget your code braces,\n\n517\n00:28:08.778 --> 00:28:11.610\nstatement commands, bada-bing, right?\n\n518\n00:28:11.610 --> 00:28:14.260\nHere is the actual script I've written.\n\n519\n00:28:14.260 --> 00:28:19.590\nSo we'll cat that,\nwhat is it, gawk_4_cstyle.\n\n520\n00:28:19.590 --> 00:28:23.430\nSo this should look super familiar\nto you at this point in time.\n\n521\n00:28:23.430 --> 00:28:27.206\nIf you haven't watched our previous\nseries on [INAUDIBLE] scripting, wow,\n\n522\n00:28:27.206 --> 00:28:28.568\nyou really jumped the gun.\n\n523\n00:28:28.568 --> 00:28:35.110\n[LAUGH] Go back and watch that, we have C\nstyle four loops as well inside a batch.\n\n524\n00:28:35.110 --> 00:28:40.220\nAnd oddly enough C does these types of\nloops, so hence, the C style, right?\n\n525\n00:28:40.220 --> 00:28:48.400\nSo I=0, the condition is going to be\nwhile I is less than or equal to 5.\n\n526\n00:28:48.400 --> 00:28:51.866\nAnd then the iteration command's\ngonna be i++, so increment.\n\n527\n00:28:51.866 --> 00:28:55.263\nEvery time you loop through this,\nincrement i by 1.\n\n528\n00:28:55.263 --> 00:28:58.930\nSo it's gonna start with 0,\nit's gonna go to 1, 2, 3, 4 and 5, right?\n\n529\n00:28:58.930 --> 00:29:02.057\nAnd in our condition,\nwe're just doing a simple print i.\n\n530\n00:29:02.057 --> 00:29:08.889\nSo if we run this,\nwe say gawk-f gawk for C style.\n\n531\n00:29:08.889 --> 00:29:13.231\nYou hit it,\nwe see that it counts 0 1 2 3 4 5.\n\n532\n00:29:13.231 --> 00:29:17.118\nVery simple, again, you guys should be\nvery familiar with this style of looping.\n\n533\n00:29:17.118 --> 00:29:18.760\nSo if you're more comfortable with that,\n\n534\n00:29:18.760 --> 00:29:22.690\nI wanted to make you knew that that was\navailable to you inside of gawk and\n\n535\n00:29:22.690 --> 00:29:26.378\nthe syntax is super similar,\nif not dead on the money.\n\n536\n00:29:26.378 --> 00:29:27.840\nSo good stuff there.\n\n537\n00:29:27.840 --> 00:29:29.960\n&gt;&gt; And I think kind of a quick aside,\n\n538\n00:29:29.960 --> 00:29:34.370\neven though we have maintained order\nwith our other style for loop in arrays,\n\n539\n00:29:34.370 --> 00:29:38.970\nif you wanted to absolutely make sure\npositively that it's starting at one, two,\n\n540\n00:29:38.970 --> 00:29:42.900\nthree, four, you could use a C style\nfour loop and then use that as the index\n\n541\n00:29:42.900 --> 00:29:46.120\nto grab the particular things\nout of our associate arrays.\n\n542\n00:29:46.120 --> 00:29:49.670\nSo that's kind of a common practice in\nother programing languages that have C\n\n543\n00:29:49.670 --> 00:29:50.650\nstyle for loops.\n\n544\n00:29:50.650 --> 00:29:52.340\nWell, Daniel, thank you so much for\n\n545\n00:29:52.340 --> 00:29:53.870\nshowing us some of those\ncommand structures.\n\n546\n00:29:53.870 --> 00:29:56.120\nBecause now we can add\na little bit of logic and\n\n547\n00:29:56.120 --> 00:29:59.690\niteration's at the forefront of so\nmany programming languages.\n\n548\n00:29:59.690 --> 00:30:02.340\nSo you're going to see it\nfrom time to time, and\n\n549\n00:30:02.340 --> 00:30:05.890\nneed it from time to time, but\nwe are not done with advanced gawk.\n\n550\n00:30:05.890 --> 00:30:08.118\nWe've got more coming at you,\nso definitely stay tuned.\n\n551\n00:30:08.118 --> 00:30:11.990\nWe are going to go ahead and wrap it up.\n\n552\n00:30:11.990 --> 00:30:13.850\nSo signing off at ITPRO.TV,\nI've been your host, Justin Dennison.\n\n553\n00:30:13.850 --> 00:30:14.770\n&gt;&gt; And I'm Daniel Lowrie.\n\n554\n00:30:14.770 --> 00:30:16.852\n&gt;&gt; And we'll see you next time.\n\n555\n00:30:16.852 --> 00:30:22.766\n[MUSIC]\n\n556\n00:30:22.766 --> 00:30:25.975\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "241169360"
        },
        {
          "description": "In this episode, Daniel and Justin look at formatting the printed output and creating user-defined functions in gawk. Here you will see how to better manipulate text output using printf, format specifiers, and modifiers. Then they explore creating functions and function libraries when you find yourself reusing gawk code.",
          "length": "1398",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-4-1-advanced_gawk_formatted_printing_and_functions-110217-PGM.00_23_05_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-4-1-advanced_gawk_formatted_printing_and_functions-110217-PGM.00_23_05_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxadvancedshellscripting/techskills-linuxadvancedshellscripting-7-4-1-advanced_gawk_formatted_printing_and_functions-110217-PGM.00_23_05_12.Still001-sm.jpg",
          "title": "Advanced gawk: Formatted Printing and Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.640 --> 00:00:04.210\nWelcome to ITProTV.\n\n2\n00:00:04.210 --> 00:00:05.869\nI'm your host [CROSSTALK].\n\n3\n00:00:05.869 --> 00:00:08.300\n[MUSIC]\n\n4\n00:00:08.300 --> 00:00:11.980\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.980 --> 00:00:15.200\n&gt;&gt; Greetings everyone and welcome back\nto another exciting episode of ITPro TV.\n\n6\n00:00:15.200 --> 00:00:18.790\nI'm your host Justin Dennison and\nwe're continuing on with Advanced gawk.\n\n7\n00:00:18.790 --> 00:00:21.130\nThis is part of our\nAdvanced Shell Scripting series and\n\n8\n00:00:21.130 --> 00:00:23.950\nwe're gonna be looking at\nformatting printing and functions.\n\n9\n00:00:23.950 --> 00:00:27.190\nAnd here to help us along in our\njourney is Mr. Daniel Lowery.\n\n10\n00:00:27.190 --> 00:00:28.120\nHow are you doing today, Daniel?\n\n11\n00:00:28.120 --> 00:00:29.070\n&gt;&gt; I'm doing great, Justin.\n\n12\n00:00:29.070 --> 00:00:29.790\nGlad to be back.\n\n13\n00:00:29.790 --> 00:00:30.630\nYes, we're back with.\n\n14\n00:00:30.630 --> 00:00:34.660\nMore of our little advanced gawk trip\nthat we've been strolling down the road.\n\n15\n00:00:34.660 --> 00:00:38.940\nI had a couple of odds and ends that\ndidn't really fit together with anything,\n\n16\n00:00:38.940 --> 00:00:41.900\nso I just threw them together and guess\nwhat, here we go, we got ourselves a show.\n\n17\n00:00:41.900 --> 00:00:46.660\nWe're gonna talk about formatted printing,\nand that's very ambiguous,\n\n18\n00:00:46.660 --> 00:00:48.970\nso we'll flesh that out.\n\n19\n00:00:48.970 --> 00:00:52.180\nAnd then also working with\nfunctions cuz as we've mentioned,\n\n20\n00:00:52.180 --> 00:00:56.400\na gawk is very very programatic,\nit has full functionality.\n\n21\n00:00:56.400 --> 00:01:00.030\nAt least most functionality of\na full programing language.\n\n22\n00:01:00.030 --> 00:01:03.682\nSo I want to round our your knowledge\nbase with those two different topics,\n\n23\n00:01:03.682 --> 00:01:04.590\nall right?\n\n24\n00:01:04.590 --> 00:01:08.320\nSo that being said,\nI say we just jump right back into it.\n\n25\n00:01:08.320 --> 00:01:11.100\nSo what do we mean when we say format and\nprinting?\n\n26\n00:01:11.100 --> 00:01:15.350\nWell that's kind of defining itself,\nright.\n\n27\n00:01:15.350 --> 00:01:21.830\nI want to prints out the output in\na specific style of format right.\n\n28\n00:01:21.830 --> 00:01:24.429\nI'm just going to give you a real simple\nexample of something that you can do this.\n\n29\n00:01:24.429 --> 00:01:29.031\nWe've actually kind of been doing\nthis throughout the series cuz I'm\n\n30\n00:01:29.031 --> 00:01:33.140\nusing gawk to modify the way\nthings come out to the screen.\n\n31\n00:01:33.140 --> 00:01:38.172\nBut now I'm gonna add a little [SOUND]\nto it, a little pizzazz, a little\n\n32\n00:01:38.172 --> 00:01:43.908\nextra sauce on top of that, right, give\nyou guys maybe a nicer looking output.\n\n33\n00:01:43.908 --> 00:01:46.697\nSo first thing I wanna\ndo is I wanna show you\n\n34\n00:01:46.697 --> 00:01:50.040\nan example little file\nthat I created here.\n\n35\n00:01:50.040 --> 00:01:53.890\nI'm going to call it format specifier,\nbecause that's what we're\n\n36\n00:01:53.890 --> 00:01:57.790\ngoing to work with to do this here,\nso I'm going to get format specifier.\n\n37\n00:01:59.460 --> 00:02:01.130\nSo if you're looking at this and\nyou're going hm.\n\n38\n00:02:03.520 --> 00:02:08.350\nWell gauk, Justin and I have talked about\nthis a little bit, Under the hood of Gawk,\n\n39\n00:02:08.350 --> 00:02:12.990\nprobably, almost definitely,\nif not definitely is running C.\n\n40\n00:02:12.990 --> 00:02:17.990\nAnd if you've worked with C at all,\nyou're going, hey, I've seen these before.\n\n41\n00:02:17.990 --> 00:02:22.190\nThis is not the first time that\nthis has crossed my path, right?\n\n42\n00:02:22.190 --> 00:02:24.900\nThese are letting the Gawk program know\n\n43\n00:02:24.900 --> 00:02:28.040\nwhat type of data that you\nmight be working with, right?\n\n44\n00:02:28.040 --> 00:02:30.940\nMaybe we're working with Strings, right?\n\n45\n00:02:30.940 --> 00:02:34.120\nSo we've got S for string text,\nwe've got I for integers.\n\n46\n00:02:34.120 --> 00:02:36.770\nWe also have D for\nintegers, which is kind of.\n\n47\n00:02:36.770 --> 00:02:39.650\nIt's basically the same thing as I,\nit just depends on your flavor,\n\n48\n00:02:39.650 --> 00:02:41.150\nor wherever you come\nfrom in your background.\n\n49\n00:02:41.150 --> 00:02:44.200\nMaybe you like one or the other, right?\n\n50\n00:02:44.200 --> 00:02:48.000\nE, scientific notation, I want to\nprint out in scientific notation.\n\n51\n00:02:48.000 --> 00:02:52.630\nHow do I want to format what's\nhappening in the output, right?\n\n52\n00:02:52.630 --> 00:02:55.200\nFloating point numbers,\nmaybe you're working with that.\n\n53\n00:02:55.200 --> 00:02:56.720\nOctal hex.\n\n54\n00:02:56.720 --> 00:02:58.510\nWhat's the world without some hex, right?\n\n55\n00:02:58.510 --> 00:03:00.850\nAnd then,\nyou can also do hex with capital letters.\n\n56\n00:03:00.850 --> 00:03:04.290\nSo instead of lowercase a through f's,\nyou get capital A through F's.\n\n57\n00:03:04.290 --> 00:03:06.780\nAnd you just have to use the capital X for\nthat.\n\n58\n00:03:06.780 --> 00:03:09.720\nI'm not going to walk through every single\nlast one of these little guys here just\n\n59\n00:03:09.720 --> 00:03:12.790\nbecause that would be a bit redundant and\nsuperfluous.\n\n60\n00:03:12.790 --> 00:03:16.170\nOnce you see one example of it,\nyou've kinda seen them all.\n\n61\n00:03:16.170 --> 00:03:20.450\nYou just need to know how they\nactually work themselves out.\n\n62\n00:03:20.450 --> 00:03:23.780\nWe also want to talk about\nmodifiers that work with this.\n\n63\n00:03:23.780 --> 00:03:27.560\nWe can adjust the width of\nthe data that comes out.\n\n64\n00:03:27.560 --> 00:03:31.920\nWe can also justify\nthe text that comes out.\n\n65\n00:03:31.920 --> 00:03:33.330\nVery, very cool stuff.\n\n66\n00:03:33.330 --> 00:03:33.960\nSo what do I mean?\n\n67\n00:03:33.960 --> 00:03:37.310\nKind of like what we\ndid with field widths.\n\n68\n00:03:37.310 --> 00:03:42.890\nWidths is basically saying, I'm going\nto take up x amount of character space,\n\n69\n00:03:42.890 --> 00:03:45.600\nregardless of whether or\nnot there is x amount of characters in it.\n\n70\n00:03:45.600 --> 00:03:47.630\nDoes that make sense?\n\n71\n00:03:47.630 --> 00:03:48.810\nHopefully it does.\n\n72\n00:03:48.810 --> 00:03:57.380\nSo if I have the word Bob, and I say the\nwidth of the name area is going to be ten.\n\n73\n00:03:57.380 --> 00:04:00.810\nAll of the BOB one, two,\nthree characters and\n\n74\n00:04:00.810 --> 00:04:04.310\nthen seven white space characters\nfilling up the rest of it.\n\n75\n00:04:04.310 --> 00:04:06.280\nRight, so that it will fill that up and\n\n76\n00:04:06.280 --> 00:04:10.320\nthat really helps the formatting\nbecause sometimes, you have that herky,\n\n77\n00:04:10.320 --> 00:04:14.430\njerky business going around and\nyou want it to be nice and lined up.\n\n78\n00:04:14.430 --> 00:04:18.840\nRegardless of what the next data\nfield is going to be, right?\n\n79\n00:04:18.840 --> 00:04:21.440\nYou want everything to\nstart the exact same spot\n\n80\n00:04:21.440 --> 00:04:24.300\nwhile everything the end of the exact\nsame spot, that kind of idea.\n\n81\n00:04:24.300 --> 00:04:24.980\nOkay?\n\n82\n00:04:24.980 --> 00:04:28.110\nSo we can use the width,\nwe can set the width to do that and\n\n83\n00:04:28.110 --> 00:04:29.760\nthen we have justification.\n\n84\n00:04:29.760 --> 00:04:34.610\nIt's by nature right justify but\nwe can change that the left\n\n85\n00:04:34.610 --> 00:04:39.310\njustified by adding a minus\nsign before the width, okay?\n\n86\n00:04:39.310 --> 00:04:40.210\nSo very cool.\n\n87\n00:04:40.210 --> 00:04:43.150\nI'll give you an example of how\nthis works out and we can see.\n\n88\n00:04:43.150 --> 00:04:45.940\nSo that all these little ideas\nthat have been thrown at you\n\n89\n00:04:45.940 --> 00:04:47.410\nhopefully you're gonna go.\n\n90\n00:04:47.410 --> 00:04:48.670\nYeah.\nOkay, yeah, okay.\n\n91\n00:04:48.670 --> 00:04:49.640\nIt's all working, right?\n\n92\n00:04:49.640 --> 00:04:51.140\nSo let's do that.\n\n93\n00:04:51.140 --> 00:04:58.530\nMy example here it is gawk of course,\nlet me clear the screen just a little bit.\n\n94\n00:04:58.530 --> 00:05:03.800\nClear that out and let's do this let's\nsay gawk, we'll do a begin like so.\n\n95\n00:05:03.800 --> 00:05:06.410\nWe'll change the field separator.\n\n96\n00:05:06.410 --> 00:05:09.300\nI'm going to use the file one data just\nto remind you of what that is I'll\n\n97\n00:05:09.300 --> 00:05:14.480\nlook at it really quickly, file one and\nthere you go, we've got different names.\n\n98\n00:05:14.480 --> 00:05:18.430\nWhat is it, email addresses,\nphone numbers, and then some sort of what.\n\n99\n00:05:18.430 --> 00:05:23.280\nWhat is my job role on my job description,\nso we've got hosts, CEOs, managers, so\n\n100\n00:05:23.280 --> 00:05:23.890\non and so forth.\n\n101\n00:05:23.890 --> 00:05:26.730\nThis could be cumbersome for\na much more extensive file, but for\n\n102\n00:05:26.730 --> 00:05:30.940\nthe demonstration, demonstrative in\nsome purposes, this should be enough.\n\n103\n00:05:30.940 --> 00:05:33.780\nSo let's get back to that gawk thing,\nso how does this look?\n\n104\n00:05:33.780 --> 00:05:35.530\nGawk, we are going to, what was I doing?\n\n105\n00:05:35.530 --> 00:05:36.370\nUp again statement.\n\n106\n00:05:36.370 --> 00:05:39.060\nYeah I am doing begin statement.\n\n107\n00:05:39.060 --> 00:05:44.363\nSo begin, open that up field\nseparator to equal that of the comma\n\n108\n00:05:44.363 --> 00:05:50.369\nseparated value file,\nbe honest with you I couldn't even see.\n\n109\n00:05:50.369 --> 00:05:53.010\nWhat else do we have to do here?\n\n110\n00:05:53.010 --> 00:05:53.860\nWhat are we doing?\n\n111\n00:05:53.860 --> 00:06:02.910\nAll right so I'm going to use print which\nallows us to use our modifiers here right?\n\n112\n00:06:02.910 --> 00:06:08.550\nThat's what I want cuz print it doesn't\nallow you to take advantage of that,\n\n113\n00:06:08.550 --> 00:06:11.570\nand again if you come from\na C background at all.\n\n114\n00:06:11.570 --> 00:06:15.800\nPrints f with these data structures,\nthese data structure types.\n\n115\n00:06:15.800 --> 00:06:19.940\nAnd you're like, I am in the wheelhouse,\nI have been here before.\n\n116\n00:06:19.940 --> 00:06:21.010\nNot a big deal.\n\n117\n00:06:21.010 --> 00:06:23.890\nAnd now if you've never done it before and\nyou're seeing this for\n\n118\n00:06:23.890 --> 00:06:27.030\nthe first time, and you do ever look\nat C as a programming language,\n\n119\n00:06:27.030 --> 00:06:29.560\nyou're like, this is familiar to me!\n\n120\n00:06:29.560 --> 00:06:33.770\nI do this in Gawk, or I do this in Awk,\nor whatever flavor of Awk you're using.\n\n121\n00:06:33.770 --> 00:06:37.980\nI'm pretty sure they probably all\nwill confirm to this standard,\n\n122\n00:06:37.980 --> 00:06:41.620\nif not all of them I would say\nprobably the vast majority of them.\n\n123\n00:06:41.620 --> 00:06:43.460\nAll right so\nlet's get back into it here so\n\n124\n00:06:43.460 --> 00:06:44.970\nlet's throw that print f statement at it.\n\n125\n00:06:44.970 --> 00:06:47.530\nSo print and\nyou just add f to the end of print.\n\n126\n00:06:47.530 --> 00:06:50.420\nSo we've been using print,\nwe're going print f this time, and\n\n127\n00:06:50.420 --> 00:06:55.730\nnow I do need to wrap this up in double\nquotations so I'll start that there.\n\n128\n00:06:55.730 --> 00:06:59.100\nAnd I want to throw a percent, and\nthat's kinda like the referencing.\n\n129\n00:06:59.100 --> 00:07:01.620\nLet me scroll back up.\n\n130\n00:07:01.620 --> 00:07:04.310\nThat's gonna like reference things, okay?\n\n131\n00:07:04.310 --> 00:07:05.970\nSo you always,\nyou'll need that percent sign.\n\n132\n00:07:07.550 --> 00:07:09.080\nI'm going to left justify.\n\n133\n00:07:09.080 --> 00:07:10.040\nSo I'll add that.\n\n134\n00:07:10.040 --> 00:07:12.060\nThere's my minus sign that I need.\n\n135\n00:07:12.060 --> 00:07:13.970\nAnd I'm gonna to say the field\nwidth is going to be,\n\n136\n00:07:13.970 --> 00:07:18.640\nI'll just say 10 characters just like\nI said before, and then I'll say pass.\n\n137\n00:07:18.640 --> 00:07:21.690\nSo that's a string character\nthat is left justified and\n\n138\n00:07:21.690 --> 00:07:26.370\nthe width is 10 characters long,\nall right?\n\n139\n00:07:26.370 --> 00:07:28.630\nAll should be hopefully\nmaking sense to you now.\n\n140\n00:07:28.630 --> 00:07:30.690\nSo I'm going to print that.\n\n141\n00:07:30.690 --> 00:07:34.000\nThen I want to,\ndo I want to do anything else,\n\n142\n00:07:34.000 --> 00:07:36.080\nyah, I'll do another string character.\n\n143\n00:07:36.080 --> 00:07:39.620\nAnd this time I'll just say\na percent string, percent S.\n\n144\n00:07:39.620 --> 00:07:44.050\nAnd it will be, and then I want to add\na new line because when you use print f,\n\n145\n00:07:44.050 --> 00:07:47.720\na new line character is not implied.\n\n146\n00:07:47.720 --> 00:07:50.830\nWhen you do print,\nit's implied all day long.\n\n147\n00:07:50.830 --> 00:07:51.800\nPrint it out, go to the next line.\n\n148\n00:07:51.800 --> 00:07:52.600\nPrint it out, go to the next line.\n\n149\n00:07:52.600 --> 00:07:54.410\nIt always implies a new line at the end.\n\n150\n00:07:54.410 --> 00:07:56.485\nPrint f does not, so I've got to tell it.\n\n151\n00:07:56.485 --> 00:07:59.824\nSo what I'm saying here is,\nI'm printing out something here, and\n\n152\n00:07:59.824 --> 00:08:02.320\nit's going to be a string character.\n\n153\n00:08:02.320 --> 00:08:03.632\nAnd printing out something here.\n\n154\n00:08:03.632 --> 00:08:06.890\nIt's also going to be a string character,\nall right?\n\n155\n00:08:06.890 --> 00:08:12.100\nSo let me finish this off,\nI will close that quote then I'm going\n\n156\n00:08:12.100 --> 00:08:15.750\nto I have a new line to get that,\nclose my quote.\n\n157\n00:08:15.750 --> 00:08:18.710\nI'm going to give a comma\ncuz now I have to\n\n158\n00:08:18.710 --> 00:08:20.950\ntell it what those string\ncharacters are coming from.\n\n159\n00:08:20.950 --> 00:08:22.180\nWhat data are they in?\n\n160\n00:08:23.690 --> 00:08:26.260\nRight, so it's a little weird again if you\ndon't see it before, you're like, yeah,\n\n161\n00:08:26.260 --> 00:08:28.610\nyeah, I know what you're talking about,\nit's pretty easy.\n\n162\n00:08:28.610 --> 00:08:33.690\nAgain, if you're new to this, what I'm\nsaying is is I've got %s basically and\n\n163\n00:08:33.690 --> 00:08:35.300\nthat's gonna be from data field one.\n\n164\n00:08:35.300 --> 00:08:39.410\nSo after the comma and\nthe quotations are closed.\n\n165\n00:08:39.410 --> 00:08:43.130\nThere's going to be whatever data\nfields you want to reference.\n\n166\n00:08:43.130 --> 00:08:45.643\nThe first will be the first\ndata field you put.\n\n167\n00:08:45.643 --> 00:08:48.088\nSecond one,\nis the secondary field that you put.\n\n168\n00:08:48.088 --> 00:08:48.667\nMake sense?\n\n169\n00:08:48.667 --> 00:08:49.375\nHopefully so.\n\n170\n00:08:49.375 --> 00:08:50.560\nLet's do that.\n\n171\n00:08:50.560 --> 00:08:52.954\nThis will be one and dollar sign three.\n\n172\n00:08:56.493 --> 00:08:59.390\nSo and then close it out.\n\n173\n00:08:59.390 --> 00:09:04.470\nTick and delete the file and hit Enter.\n\n174\n00:09:04.470 --> 00:09:07.330\nAnd now you are seeing the output.\n\n175\n00:09:07.330 --> 00:09:11.109\nI must have put an extra comma in there,\nlooks like I did.\n\n176\n00:09:11.109 --> 00:09:14.192\nLet me take that comma out cuz\nunlike that, I can't handle it.\n\n177\n00:09:14.192 --> 00:09:15.550\nI can't handle it Justin.\n\n178\n00:09:16.890 --> 00:09:18.070\nOop, I won't cuz now I need that.\n\n179\n00:09:18.070 --> 00:09:20.360\nThere's a comment or something.\n\n180\n00:09:20.360 --> 00:09:21.430\nI'm not gonna worry about it.\n\n181\n00:09:21.430 --> 00:09:23.600\n&gt;&gt; I think it's in the template\nstring there, Daniel.\n\n182\n00:09:23.600 --> 00:09:25.170\n&gt;&gt; Thank you so much.\n\n183\n00:09:25.170 --> 00:09:26.930\n&gt;&gt; The %-10s.\n&gt;&gt; You the man, thank you sir.\n\n184\n00:09:26.930 --> 00:09:29.050\nYou caught it for me.\n\n185\n00:09:29.050 --> 00:09:32.620\nThere you are you little bugger.\n\n186\n00:09:32.620 --> 00:09:34.716\nThere we go, looking a whole lot better.\n\n187\n00:09:34.716 --> 00:09:39.600\nSo it took $1, whatever is in that\nfirst field, it knew it was a string.\n\n188\n00:09:39.600 --> 00:09:41.610\nAnd you'll notice what it did, right?\n\n189\n00:09:41.610 --> 00:09:43.340\nA lot of times,\nif I were just to print these out,\n\n190\n00:09:43.340 --> 00:09:45.830\nthey would kind of come out staggered\nbecause it just gives a space.\n\n191\n00:09:45.830 --> 00:09:48.410\nSo it would be Daniel space 555-5555.\n\n192\n00:09:48.410 --> 00:09:54.100\nAnd then it would be Ronnie space,\nbut Ronnie and\n\n193\n00:09:54.100 --> 00:09:58.070\nI have the same length of characters\nin our first name, but Tim doesn't.\n\n194\n00:09:58.070 --> 00:10:02.900\nSo this 5, 5, 5, 4, 4, 4, 4 would have\nbeen indented if I just printed those out.\n\n195\n00:10:02.900 --> 00:10:05.459\nBut since I used that left justify and\n\n196\n00:10:05.459 --> 00:10:10.426\nI gave it a width that was long enough\nto cover everybody's first name.\n\n197\n00:10:10.426 --> 00:10:16.054\nEverything would justified and\nformat out very, very nicely and that's\n\n198\n00:10:16.054 --> 00:10:22.330\nreally the purpose of GAWF is to create\nvery nicely formatted data files, right.\n\n199\n00:10:22.330 --> 00:10:25.714\nSo that when, what's the word I'm\nlooking for, not a data file but-\n\n200\n00:10:25.714 --> 00:10:26.696\n&gt;&gt; Like a regular report.\n\n201\n00:10:26.696 --> 00:10:29.340\n&gt;&gt; A report thank you yes,\nreports that's the word I'm looking for.\n\n202\n00:10:29.340 --> 00:10:32.150\nI want to make them look nice so\nthat when I give them somebody they're\n\n203\n00:10:32.150 --> 00:10:37.050\neasily followed, easily looked at\ndigestible by the eyes very easily.\n\n204\n00:10:37.050 --> 00:10:39.090\n&gt;&gt; Now Daniel, I'm kind of thinking.\n\n205\n00:10:39.090 --> 00:10:40.530\nI like this arrangement.\n\n206\n00:10:40.530 --> 00:10:44.470\nI tend to hae a very particular manner\nin how I arrange text only of things.\n\n207\n00:10:44.470 --> 00:10:46.420\nYou don't have your rich text formatting.\n\n208\n00:10:46.420 --> 00:10:47.440\nSo I'm wondering,\n\n209\n00:10:47.440 --> 00:10:52.210\nI'm throwing back to a couple of\nshows ago output field separator.\n\n210\n00:10:52.210 --> 00:10:56.500\nIf I put that there, where would that\noutput separator, could I use that here,\n\n211\n00:10:56.500 --> 00:10:59.220\nnumber one, and if I put it there,\n\n212\n00:10:59.220 --> 00:11:01.520\nlike say a vertical pipe as\nan output field separator.\n\n213\n00:11:01.520 --> 00:11:03.740\nWould that come to the end of the line,\ngiven the width, and\n\n214\n00:11:03.740 --> 00:11:07.690\nthen put a vertical pipe there, or\nis it just disallowed in general?\n\n215\n00:11:07.690 --> 00:11:08.740\n&gt;&gt; That's a good question.\n\n216\n00:11:08.740 --> 00:11:12.260\nI mean the output field\nseparator's basically manipulating\n\n217\n00:11:12.260 --> 00:11:17.520\nthe way the output looks,\ncould we implement that in this statement?\n\n218\n00:11:17.520 --> 00:11:18.660\nIt's a great question.\n\n219\n00:11:18.660 --> 00:11:20.570\nWe could surely give it a shot.\n\n220\n00:11:20.570 --> 00:11:23.200\nLet's rank it back over here.\n\n221\n00:11:23.200 --> 00:11:25.190\nWe'll put that in here.\n\n222\n00:11:25.190 --> 00:11:29.559\nDo I need a comma or something?\n\n223\n00:11:29.559 --> 00:11:31.220\nI think I do.\n\n224\n00:11:31.220 --> 00:11:32.620\nI've been messing with sed and awk, and\n\n225\n00:11:32.620 --> 00:11:35.940\nthey both have,\nyou get your brain turned around.\n\n226\n00:11:35.940 --> 00:11:37.860\nLet's try this here.\n\n227\n00:11:37.860 --> 00:11:42.020\nWe'll say, what is it OFS?\n\n228\n00:11:42.020 --> 00:11:49.820\nYeah so it might be this so OFS equals and\nyou want to do a pipe like so.\n\n229\n00:11:49.820 --> 00:11:51.350\nLet's give it a whirl and\nsee what happens.\n\n230\n00:11:51.350 --> 00:11:53.960\nSo it didn't do anything.\n\n231\n00:11:53.960 --> 00:11:58.361\nAnd see that, well maybe that's just\nbecause I'm not using the right characters\n\n232\n00:11:58.361 --> 00:11:59.588\nhere, I'm not sure.\n\n233\n00:11:59.588 --> 00:12:02.356\nDidn't like that.\n\n234\n00:12:02.356 --> 00:12:06.784\n[INAUDIBLE] I don't recall,\noops, too much.\n\n235\n00:12:06.784 --> 00:12:10.354\n&gt;&gt; Yeah,\ndoesn't seem to like that very much.\n\n236\n00:12:10.354 --> 00:12:12.150\n&gt;&gt; All right,\nmaybe I'm putting in the wrong spot.\n\n237\n00:12:12.150 --> 00:12:14.460\nThis is kind of on the fly kind of deal.\n\n238\n00:12:14.460 --> 00:12:18.380\nSo I haven't really tested where I would\nhave to manipulate that to see if I can\n\n239\n00:12:18.380 --> 00:12:19.070\nmake that happen.\n\n240\n00:12:19.070 --> 00:12:21.560\nI have a feeling that you could.\n\n241\n00:12:21.560 --> 00:12:24.460\nI just, I'm the top of my head.\n\n242\n00:12:24.460 --> 00:12:26.340\nI have to look at it.\n\n243\n00:12:26.340 --> 00:12:28.990\n&gt;&gt; Now the reason I asked this is\ngoing with your formative printing,\n\n244\n00:12:28.990 --> 00:12:31.810\nsometimes the rules change in\nother programming languages.\n\n245\n00:12:31.810 --> 00:12:36.820\nI'm not saying that's the assertion\nin gawk but that first one worked.\n\n246\n00:12:36.820 --> 00:12:37.680\nWe had this semicolon.\n\n247\n00:12:37.680 --> 00:12:38.970\nIt didn't give you an error.\n\n248\n00:12:38.970 --> 00:12:41.840\nSo I'm wondering if some of\nthat output field separator.\n\n249\n00:12:41.840 --> 00:12:44.336\nSome of the output type things that\nyou would do in the begin block.\n\n250\n00:12:44.336 --> 00:12:46.680\n&gt;&gt; [INAUDIBLE]\n&gt;&gt; Are they just kind of ignored?\n\n251\n00:12:46.680 --> 00:12:49.910\nBecause their expectation is\nthat's gonna become part of\n\n252\n00:12:49.910 --> 00:12:52.720\nwhat I'm calling the template\nstring is the percent minus 10s.\n\n253\n00:12:52.720 --> 00:12:54.180\n&gt;&gt; Yeah.\n&gt;&gt; I don't know if there's an official\n\n254\n00:12:54.180 --> 00:12:55.590\nname for it or whatever.\n\n255\n00:12:55.590 --> 00:12:59.700\nBut I'm guessing you would probably have\nto put that pipe in there somewhere.\n\n256\n00:12:59.700 --> 00:13:02.390\nSo this is where I want\nthese things to be.\n\n257\n00:13:02.390 --> 00:13:07.380\n&gt;&gt; Yeah, so instead of using the proper\nOFS, just kind of insert that\n\n258\n00:13:07.380 --> 00:13:10.900\ninto what he's calling the template\nstring, and see if that'll work.\n\n259\n00:13:10.900 --> 00:13:11.950\nI think we can probably make that happen.\n\n260\n00:13:11.950 --> 00:13:14.480\nLet's get that out of there.\n\n261\n00:13:14.480 --> 00:13:19.120\nI bet, if we put it here\nwe might get some action.\n\n262\n00:13:19.120 --> 00:13:19.860\nActually, let's try this.\n\n263\n00:13:19.860 --> 00:13:22.780\nLet's see what happens.\n\n264\n00:13:22.780 --> 00:13:24.170\nThere we go.\n\n265\n00:13:24.170 --> 00:13:26.140\nWe did it ladies and gentlemen.\n\n266\n00:13:26.140 --> 00:13:28.160\nThanks for watching.\n\n267\n00:13:28.160 --> 00:13:28.763\nIt's been awesome.\n\n268\n00:13:28.763 --> 00:13:32.060\n[LAUGH] But you know what though,\nhopefully I've harped on and\n\n269\n00:13:32.060 --> 00:13:34.330\nharped on that- play with this stuff.\n\n270\n00:13:34.330 --> 00:13:35.510\nSee what you can make it do.\n\n271\n00:13:35.510 --> 00:13:37.020\nSee what you can make it break.\n\n272\n00:13:37.020 --> 00:13:38.580\nWho knows?\nThen you're gonna get the output\n\n273\n00:13:38.580 --> 00:13:39.390\nthat you're looking for.\n\n274\n00:13:39.390 --> 00:13:42.480\nObviously there are standard ways\nin which you should do things, but\n\n275\n00:13:42.480 --> 00:13:44.500\nthere's non-standard ways of\ngetting around stuff as well.\n\n276\n00:13:44.500 --> 00:13:47.400\nSo mess with it, fiddle with it,\nsee what you can make happen.\n\n277\n00:13:47.400 --> 00:13:52.220\nJustin wanted a little bit of separation,\nhaving some sort of demarcation line.\n\n278\n00:13:52.220 --> 00:13:53.030\nWanna put that in there?\n\n279\n00:13:53.030 --> 00:13:53.580\nNo problem.\n\n280\n00:13:53.580 --> 00:13:57.330\nWe've got the print statement, it's taking\nthat as a literal statement except for\n\n281\n00:13:57.330 --> 00:14:00.040\nthe special characters\nwhich it's referencing out.\n\n282\n00:14:00.040 --> 00:14:02.700\nRight other than that it just\nsees that it just print this.\n\n283\n00:14:02.700 --> 00:14:04.510\nNo problem, put that in the action there.\n\n284\n00:14:04.510 --> 00:14:08.380\nBadda bing, badda boom, we hit it, and off\nit goes we got a nice thin location line\n\n285\n00:14:08.380 --> 00:14:11.740\nshowing us where one field ends and\nanother field begins very cool stuff.\n\n286\n00:14:13.170 --> 00:14:16.430\nAll right, so let's see here,\nI think that's good for when it comes for\n\n287\n00:14:16.430 --> 00:14:20.690\nthe format printing like I said I don't\nwanna get too crazy on that stuff.\n\n288\n00:14:20.690 --> 00:14:24.380\nJust to kind of give you an idea of what\nthat looks like, you can now go back and\n\n289\n00:14:24.380 --> 00:14:25.710\nplay with the other formats strings.\n\n290\n00:14:25.710 --> 00:14:29.080\nSo, if you've got integers,\nyou're pulling numbers specifically.\n\n291\n00:14:29.080 --> 00:14:30.800\nIf this didn't have this\ndash in the middle, I mean.\n\n292\n00:14:30.800 --> 00:14:32.320\nI guess I can make two.\n\n293\n00:14:32.320 --> 00:14:34.860\nDo a dash to limited field separator.\n\n294\n00:14:34.860 --> 00:14:38.320\nThat kind of stuff and go in here and\nchange these would be integers, and\n\n295\n00:14:38.320 --> 00:14:42.640\nthey would work like integers and change,\nscientific notation would come out crazy.\n\n296\n00:14:42.640 --> 00:14:46.710\nThey will probably see that as some sort\nof math function and go nuts with it, and\n\n297\n00:14:46.710 --> 00:14:47.960\nit'd be a lot of fun.\n\n298\n00:14:47.960 --> 00:14:50.010\nSo just be aware that you\ncan work with those, and\n\n299\n00:14:50.010 --> 00:14:53.160\nagain if you're familiar with C\nyou know what I'm talking about.\n\n300\n00:14:53.160 --> 00:14:55.280\nIf not, one day if you ever look up C or\n\n301\n00:14:55.280 --> 00:14:57.930\nthings like C,\nyou're gonna be like, I know that.\n\n302\n00:14:57.930 --> 00:14:59.780\nI see that now, very cool.\n\n303\n00:14:59.780 --> 00:15:02.400\nAll right, let's move on to functions,\n\n304\n00:15:02.400 --> 00:15:05.440\nmore of a programmatic approach\nto thing-a-ma-gigs, right?\n\n305\n00:15:05.440 --> 00:15:07.250\nThis is a programing language.\n\n306\n00:15:07.250 --> 00:15:08.100\nWe wanna round it out.\n\n307\n00:15:08.100 --> 00:15:11.490\nTypically, functions are the higher level\nthings that you do when it comes to\n\n308\n00:15:11.490 --> 00:15:12.610\na programing language.\n\n309\n00:15:12.610 --> 00:15:15.938\nI wanna create a repetitive action, right?\n\n310\n00:15:15.938 --> 00:15:19.830\nAnd that's kind of repetitive actions\nwith it or iterations or loops.\n\n311\n00:15:19.830 --> 00:15:21.520\nIf statements, that kind of thing.\n\n312\n00:15:21.520 --> 00:15:26.020\nBut what I mean is I've got a piece of\ncode that I wanna be able to feed things\n\n313\n00:15:26.020 --> 00:15:32.510\nto and have it, no matter what I feed it,\nreturn the same function, okay?\n\n314\n00:15:32.510 --> 00:15:34.840\nThat's the reason they call\nthem functions, right?\n\n315\n00:15:34.840 --> 00:15:37.160\nSo I'm gonna push some\ninformation to it and\n\n316\n00:15:37.160 --> 00:15:40.280\nit's always gonna do this\nwith that information.\n\n317\n00:15:40.280 --> 00:15:42.900\nThe results might be different because\nthe information might be different.\n\n318\n00:15:42.900 --> 00:15:46.830\nBut what it's doing to get\nthe results is going to be the same.\n\n319\n00:15:46.830 --> 00:15:48.550\nThat is a function, okay?\n\n320\n00:15:48.550 --> 00:15:50.070\nWe can do that in gawk.\n\n321\n00:15:50.070 --> 00:15:51.270\nVery cool actually.\n\n322\n00:15:51.270 --> 00:15:52.640\nSo let's show you, it's super simple.\n\n323\n00:15:52.640 --> 00:15:57.644\nI'm gonna clear out and\nI've got I think user._functions.\n\n324\n00:15:57.644 --> 00:16:01.521\nSo let's cat that user_functions.text So\n\n325\n00:16:01.521 --> 00:16:05.809\nhere's the formats to\ncreating a function dock.\n\n326\n00:16:05.809 --> 00:16:08.111\nFunction, you have to, again,\n\n327\n00:16:08.111 --> 00:16:13.450\nthis should be looking pretty similar\nto what we saw in bash functions.\n\n328\n00:16:13.450 --> 00:16:17.640\nNow in bash functions I can just\ndo function name, open, close,\n\n329\n00:16:17.640 --> 00:16:22.070\nthrow out one of the wonderful curly\nbraces we're so fond of and were done.\n\n330\n00:16:22.070 --> 00:16:25.740\nBut we can also do function,\nfunction name Open and\n\n331\n00:16:25.740 --> 00:16:28.200\nclose parenthesis, curly brace, and such.\n\n332\n00:16:28.200 --> 00:16:32.660\nSo and I think that comes from C, does C\ndo that where you actually say function?\n\n333\n00:16:32.660 --> 00:16:35.740\nI know some other programming languages,\nthey require that.\n\n334\n00:16:35.740 --> 00:16:36.850\nStill has to be one of them.\n\n335\n00:16:36.850 --> 00:16:42.480\n&gt;&gt; I think it's C, those are actually\nyou're denoting a function by return type.\n\n336\n00:16:42.480 --> 00:16:45.220\nC has some typing shenanigans.\n\n337\n00:16:45.220 --> 00:16:49.900\nAwk and Bash are very dynamic,\nthey're like there's strings and stuff.\n\n338\n00:16:49.900 --> 00:16:53.210\nBut I don't know if you need\nthe function keyword but\n\n339\n00:16:53.210 --> 00:16:56.250\nsome of the other programming languages\nthat I know you need the function keyword.\n\n340\n00:16:56.250 --> 00:16:59.150\nSo I'm like this looks like\na couple things that I know.\n\n341\n00:16:59.150 --> 00:17:03.340\nIt's not the same, I'm kinda interested\nto see how these functions behave.\n\n342\n00:17:03.340 --> 00:17:07.560\nAnd compare those with bash that you and I\nhave played around with cuz Bash actually\n\n343\n00:17:07.560 --> 00:17:09.950\nbreaks my paradigm of how I\nthink of using functions.\n\n344\n00:17:09.950 --> 00:17:12.458\n&gt;&gt; But I tell you what,\nBash functions are the way to fly.\n\n345\n00:17:12.458 --> 00:17:14.540\n&gt;&gt; [LAUGH]\n&gt;&gt; I love them.\n\n346\n00:17:14.540 --> 00:17:17.190\nFunction, here it is,\ncall function, and you're done.\n\n347\n00:17:17.190 --> 00:17:18.060\nSuper easy.\n\n348\n00:17:18.060 --> 00:17:21.620\nAnd this is really to be honest\nwith you it's just about\n\n349\n00:17:21.620 --> 00:17:23.770\nas simple which I like, right?\n\n350\n00:17:23.770 --> 00:17:27.260\nAnd I like to keep it simple, I don't want\nit to be well see you've got like he said\n\n351\n00:17:27.260 --> 00:17:30.360\nyou have to tell it what type\nof data is should return.\n\n352\n00:17:30.360 --> 00:17:32.780\nIt gets real complex really quick.\n\n353\n00:17:32.780 --> 00:17:35.510\nHere you just say I've got a function,\nI've got stuff I need you to do.\n\n354\n00:17:36.550 --> 00:17:40.170\nWhenever I call it on your name I want\nyou to do that badda bing, right?\n\n355\n00:17:40.170 --> 00:17:41.350\nSo here we go that's how we do it,\n\n356\n00:17:41.350 --> 00:17:45.640\nwe've got function define\nsaying I need a function.\n\n357\n00:17:45.640 --> 00:17:49.850\nThe function name is this doing\nthe open closed parentheses and\n\n358\n00:17:49.850 --> 00:17:51.480\nthen start your curly brace.\n\n359\n00:17:51.480 --> 00:17:54.090\nWhatever commands are inside of that\nfunction then close off another\n\n360\n00:17:54.090 --> 00:17:55.900\ncurly brace, right?\n\n361\n00:17:55.900 --> 00:18:01.750\nThen, to call that function,\nyou're going to basically, call the name.\n\n362\n00:18:01.750 --> 00:18:03.480\nJust, put the name in, right?\n\n363\n00:18:04.660 --> 00:18:05.260\nVery simple.\n\n364\n00:18:05.260 --> 00:18:06.000\nAll right.\n\n365\n00:18:06.000 --> 00:18:08.360\nLet's see, what else do I need\nto tell you guys about that?\n\n366\n00:18:08.360 --> 00:18:10.680\nWell, you know what,\nlet's just do an example of it.\n\n367\n00:18:10.680 --> 00:18:13.280\nI do have a file here.\n\n368\n00:18:13.280 --> 00:18:18.330\nA couple of, let's take a look there,\nclear it is gawk\n\n369\n00:18:18.330 --> 00:18:25.120\nfunctions at ooh I guess we need to\ncap that it is gawkfunctions.gawk.\n\n370\n00:18:25.120 --> 00:18:27.940\nSo here is a function, alright?\n\n371\n00:18:27.940 --> 00:18:31.030\nHere is a script I've written,\na very simple one.\n\n372\n00:18:31.030 --> 00:18:35.570\nHey doesn't that look familiar right,\nso instead of having to call that all\n\n373\n00:18:35.570 --> 00:18:39.380\nthe time, now I can call it\nwhenever I need it, right.\n\n374\n00:18:39.380 --> 00:18:42.540\nAnd all I had to do was\nchange my field separator and\n\n375\n00:18:42.540 --> 00:18:46.110\nthen call the function name\nwhich is name num, right.\n\n376\n00:18:46.110 --> 00:18:51.460\nSo I want the name and\nthe number from out of the records, okay.\n\n377\n00:18:52.720 --> 00:18:53.890\nIf I hammer this guy.\n\n378\n00:18:53.890 --> 00:18:58.320\nLet's say gawk-f, and\nthat is gawk function.gawk,\n\n379\n00:18:58.320 --> 00:19:00.790\nand then I will feed it, what was it?\n\n380\n00:19:00.790 --> 00:19:03.280\nFile 1?\nI always want to hit file 2.\n\n381\n00:19:03.280 --> 00:19:04.400\nThere we go.\n\n382\n00:19:04.400 --> 00:19:08.320\nIt gives me the exact output that\nI'm looking for, and I'm great.\n\n383\n00:19:08.320 --> 00:19:09.690\nI didn't have to do anything extra.\n\n384\n00:19:09.690 --> 00:19:11.600\nI just put it inside of there, call it.\n\n385\n00:19:11.600 --> 00:19:13.850\nI could have called it\nsix times if I wanted.\n\n386\n00:19:13.850 --> 00:19:18.020\nEvery time that I want,\nI just have to call it and it runs.\n\n387\n00:19:18.020 --> 00:19:19.310\nThat's the power of functions.\n\n388\n00:19:19.310 --> 00:19:21.910\nI can recursively go around and around.\n\n389\n00:19:21.910 --> 00:19:25.070\nSo if I want to stay inside of Gawk and\ndo other things, I can.\n\n390\n00:19:25.070 --> 00:19:25.840\nCool, right?\n\n391\n00:19:25.840 --> 00:19:26.520\nJust like what we saw.\n\n392\n00:19:27.710 --> 00:19:30.400\nAll right, so\nnow let's talk about libraries.\n\n393\n00:19:31.430 --> 00:19:35.850\nJust like BASH, we can create a library of\nfunctions so that I don't have to reinvent\n\n394\n00:19:35.850 --> 00:19:40.450\nthe wheel or rewrite the same\nfunction in a new gawk script.\n\n395\n00:19:40.450 --> 00:19:42.030\nThat sounds fun, right?\n\n396\n00:19:42.030 --> 00:19:46.270\nSo once I've figured out,\nman I use this function all the time.\n\n397\n00:19:46.270 --> 00:19:49.380\nI should just put it in a library file,\nand\n\n398\n00:19:49.380 --> 00:19:53.810\nthen call the library file at\nthe runtime of my gawk script.\n\n399\n00:19:53.810 --> 00:19:58.230\nThat way I can then put that\ninside of my gawk script\n\n400\n00:19:58.230 --> 00:20:00.810\nTo call the function\nthat's in a library file.\n\n401\n00:20:00.810 --> 00:20:01.850\nI know, I blowed your mind.\n\n402\n00:20:01.850 --> 00:20:04.580\nI'm sure I did cuz it's awesome, right?\n\n403\n00:20:04.580 --> 00:20:06.450\nSo let's take a look at this thing.\n\n404\n00:20:06.450 --> 00:20:08.943\nI've got this functions.lib.\n\n405\n00:20:08.943 --> 00:20:14.540\nCat functions.lib and I've got three\nfunctions inside of it, all right?\n\n406\n00:20:14.540 --> 00:20:15.730\nSo this is my library file.\n\n407\n00:20:17.130 --> 00:20:20.130\nYou don't have to name it .lib by the way,\nI just do that to remind myself that it's\n\n408\n00:20:20.130 --> 00:20:22.470\nthe library file and\nit has functions inside of it.\n\n409\n00:20:22.470 --> 00:20:26.400\nI try to be as descriptive as possible for\nmyself, because I'm very forgetful.\n\n410\n00:20:26.400 --> 00:20:28.210\nThey call that absent minded.\n\n411\n00:20:28.210 --> 00:20:29.380\nThat's poor me.\n\n412\n00:20:29.380 --> 00:20:30.220\nAnyway, here we go.\n\n413\n00:20:30.220 --> 00:20:32.890\nFunction name num, we've seen that before.\n\n414\n00:20:32.890 --> 00:20:36.930\nFunction name mail, so\nnow I want the name and the mail.\n\n415\n00:20:36.930 --> 00:20:37.920\nCan do that?\n\n416\n00:20:37.920 --> 00:20:39.870\nSo give me some kind of thing.\n\n417\n00:20:39.870 --> 00:20:43.980\nI'll give 15 characters for that string,\nand then call dollar sign one and\n\n418\n00:20:43.980 --> 00:20:45.510\ndollar sign two.\n\n419\n00:20:45.510 --> 00:20:50.202\nThen function name job, so I want the name\nand I want the job it goes with, okay?\n\n420\n00:20:50.202 --> 00:20:54.997\nSo now all I have to do is slap\nthose into a gawk script and\n\n421\n00:20:54.997 --> 00:20:57.828\nI'm off to the horses, right?\n\n422\n00:20:57.828 --> 00:21:03.517\nSo I'm got a gawk script for that,\nI'm gonna call it host_info.gawk and\n\n423\n00:21:03.517 --> 00:21:07.493\nyou'll see all I did was set\nthe fields separator and\n\n424\n00:21:07.493 --> 00:21:11.440\ninvolve three different functions by name.\n\n425\n00:21:11.440 --> 00:21:14.842\nAnd I gave it a print nothing\nat the end separation.\n\n426\n00:21:14.842 --> 00:21:19.536\nIf I run this, which to do with\nI have to call the library\n\n427\n00:21:19.536 --> 00:21:23.530\nfile with my script file, right, together.\n\n428\n00:21:23.530 --> 00:21:27.696\nIt's all I have to do and\nit's just the same idea, -f.\n\n429\n00:21:27.696 --> 00:21:31.420\nLibrary file -f script file Input file.\n\n430\n00:21:31.420 --> 00:21:32.100\nHit the Enter key.\n\n431\n00:21:32.100 --> 00:21:33.600\nYou're off to the races.\n\n432\n00:21:33.600 --> 00:21:36.860\nSo gawk -f that was what was it?\n\n433\n00:21:36.860 --> 00:21:38.630\nThe library function libraries.\n\n434\n00:21:38.630 --> 00:21:43.919\nYeah function.lib and\n-f for postinfo.gawk and\n\n435\n00:21:43.919 --> 00:21:48.820\nthen the data file which is file1.txt.\n\n436\n00:21:48.820 --> 00:21:54.430\nThat should hammer us out here, and\nyea, our screens kind of, there we go.\n\n437\n00:21:54.430 --> 00:21:56.286\nHopefully that looks a little better for\nyou guys.\n\n438\n00:21:56.286 --> 00:22:01.608\nThere we go -f function\nlib -f host info.guak,\n\n439\n00:22:01.608 --> 00:22:06.188\nand then the input file of file one.text.\n\n440\n00:22:06.188 --> 00:22:08.150\nI hit enter, and look at that.\n\n441\n00:22:08.150 --> 00:22:12.060\nIt gives me all so\nit runs each one against every name.\n\n442\n00:22:12.060 --> 00:22:14.760\nAnd then goes to the next one,\nso on and so forth.\n\n443\n00:22:14.760 --> 00:22:15.968\nVery, very simple.\n\n444\n00:22:15.968 --> 00:22:22.026\nSo Daniel 555-555 gives my email address\nand gives me my title, what's my job.\n\n445\n00:22:22.026 --> 00:22:25.820\nDoes it for Ron, does it for Tim,\ndoes it for Angie, does it for Don.\n\n446\n00:22:25.820 --> 00:22:26.719\nPretty simple.\n\n447\n00:22:26.719 --> 00:22:33.461\nCon functions, they keep it to, I'll tell\nyou Gawk has some complex intricacies.\n\n448\n00:22:33.461 --> 00:22:37.097\nThis for the most part isn't one of them,\nit's pretty straightforward to get\n\n449\n00:22:37.097 --> 00:22:39.760\nto working and\nto deal with inside of your scripts.\n\n450\n00:22:39.760 --> 00:22:42.840\n&gt;&gt; Well Daniel definitely thank you for\ngiving us a nice little taste of some\n\n451\n00:22:42.840 --> 00:22:45.450\nadvanced Gawk features that\nwe can put in our tool belt.\n\n452\n00:22:45.450 --> 00:22:48.200\nWe'll definitely have to keep\nthose in mind as we continue\n\n453\n00:22:48.200 --> 00:22:49.080\nto kind of play around.\n\n454\n00:22:49.080 --> 00:22:53.080\nTinker, break things,\nfigure out how they all come together.\n\n455\n00:22:53.080 --> 00:22:56.310\nBut we are done with this episode and\nwell,\n\n456\n00:22:56.310 --> 00:22:58.360\nhopefully we've given you\nsomething to take away.\n\n457\n00:22:58.360 --> 00:23:00.250\nBut for this episode,\nwe're gonna wrap it up.\n\n458\n00:23:00.250 --> 00:23:03.300\nSo signing off for ITPRO.TV,\nI've been your host, Justin Dennison.\n\n459\n00:23:03.300 --> 00:23:04.100\n&gt;&gt; And I'm Daniel Lowrie.\n\n460\n00:23:04.100 --> 00:23:06.435\n&gt;&gt; And we'll see you next time.\n\n461\n00:23:06.435 --> 00:23:12.257\n[MUSIC]\n\n462\n00:23:12.257 --> 00:23:18.000\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "241177395"
        }
      ],
      "title": "Advanced gawk"
    }
  ],
  "url": "linux-she-scripting-advanced",
  "vLab": false
}
