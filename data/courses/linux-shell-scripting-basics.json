{
  "description": "In this series, Daniel and Don walk you through the fundamentals of bash scripting in the Linux operating system. Watch here as they take you through the fundamentals like: Script file formats, running scripts, working with variables, performing arithmetic, conditional statements, loops, presenting data, taking user input, and script control.",
  "descriptionMD": "In this series, Daniel and Don walk you through the fundamentals of bash scripting in the Linux operating system. Watch here as they take you through the fundamentals like: Script file formats, running scripts, working with variables, performing arithmetic, conditional statements, loops, presenting data, taking user input, and script control.",
  "length": "31526",
  "name": "Linux Shell Scripting - Basics",
  "practiceExam": false,
  "subtitle": "From zero to scripting",
  "tagUrl": "linux",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this series, Daniel and Don walk you through the fundamentals of bash scripting in the Linux operating system. Watch here as they take you through the fundamentals like: Script file formats, running scripts, working with variables, performing arithmetic, conditional statements, loops, presenting data, taking user input, and script control.",
          "length": "342",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-0-0-0-overview-112117-CLN.00_00_05_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-0-0-0-overview-112117-CLN.00_00_05_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-0-0-0-overview-112117-CLN.00_00_05_24.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "244098621"
        },
        {
          "description": "In this episode, Daniel and Don show you the fundamentals of building a bash script. Here you they will define what a script is, a script's format and standard practices, create a simple script, control screen output, and script execution.",
          "length": "1848",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-1-1-1-basic_script_building-100217-PGM.00_37_02_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-1-1-1-basic_script_building-100217-PGM.00_37_02_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-1-1-1-basic_script_building-100217-PGM.00_37_02_21.Still001-sm.jpg",
          "title": "Basic Script Building",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:01.612\nWelcome to ITPRO.TV.\n\n2\n00:00:01.612 --> 00:00:06.324\nI'm your host Don Pezet [CROSSTALK]\n\n3\n00:00:06.324 --> 00:00:08.249\n[MUSIC]\n\n4\n00:00:08.249 --> 00:00:12.970\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.970 --> 00:00:15.450\n&gt;&gt; All right good morning,\nafternoon and good evening and\n\n6\n00:00:15.450 --> 00:00:17.440\nwelcome back to another\nepisode of ITPRO.TV.\n\n7\n00:00:17.440 --> 00:00:19.012\nI am your host Don Pezet.\n\n8\n00:00:19.012 --> 00:00:22.840\nHere today to kick off our\nLinux Shell Scripting Basics Series.\n\n9\n00:00:22.840 --> 00:00:26.270\nAnd in the studio I've got my good friend,\ncolleague, Mr.\n\n10\n00:00:26.270 --> 00:00:28.580\nDaniel, who's gonna be helping\nus out getting in here and\n\n11\n00:00:28.580 --> 00:00:30.870\nstarting to learn about\nLinux shell scripting.\n\n12\n00:00:30.870 --> 00:00:32.300\nSo, Daniel, thanks for joining us.\n\n13\n00:00:32.300 --> 00:00:33.570\n&gt;&gt; I'm so glad to be here, Don.\n\n14\n00:00:33.570 --> 00:00:35.350\nThis is one of my most favorite topics.\n\n15\n00:00:35.350 --> 00:00:37.571\nI tend to find shell\nscripting a very cathartic.\n\n16\n00:00:37.571 --> 00:00:40.770\n&gt;&gt; [LAUGH]\n&gt;&gt; No, it's just fun because every day\n\n17\n00:00:40.770 --> 00:00:44.670\nI come across my laptop, I sit down to it,\nI start to do things and\n\n18\n00:00:44.670 --> 00:00:48.820\nI realize man this is really difficult and\nI do this all the time.\n\n19\n00:00:48.820 --> 00:00:53.510\nIf there only an easier way, and a lot\nof times that can be broken down into\n\n20\n00:00:53.510 --> 00:00:55.860\nmaking a script that will do it for me.\n\n21\n00:00:55.860 --> 00:01:00.410\nThat's the whole purpose of scripting,\nor programming in general\n\n22\n00:01:00.410 --> 00:01:04.990\nis to try to take everyday tasks that we\ndo and programmatically work at them.\n\n23\n00:01:04.990 --> 00:01:07.850\nLet the computer automate that for us.\n\n24\n00:01:07.850 --> 00:01:12.230\nAnd that's what we're gonna try to look at\ntoday, is we're gonna start with basics.\n\n25\n00:01:12.230 --> 00:01:14.610\nWhat is a shell script?\n\n26\n00:01:14.610 --> 00:01:16.090\nWhat comprises it?\n\n27\n00:01:16.090 --> 00:01:18.100\nWhat's the format it's gonna take?\n\n28\n00:01:18.100 --> 00:01:20.700\nThat's what we're hopefully\ngonna impart to you,\n\n29\n00:01:20.700 --> 00:01:22.760\nto your little brains inside your head.\n\n30\n00:01:22.760 --> 00:01:25.190\nThat you'll have that, and\nthat will be the takeaway for today.\n\n31\n00:01:25.190 --> 00:01:27.200\n&gt;&gt; Alright, well Daniel,\nyou mentioned basic, so\n\n32\n00:01:27.200 --> 00:01:28.810\nlet's kick this off at the very beginning.\n\n33\n00:01:28.810 --> 00:01:31.840\nMost of the viewers, if you come to\nthis show you know what a script is, but\n\n34\n00:01:31.840 --> 00:01:35.640\njust in case, what exactly is a script and\nwhy do I care?\n\n35\n00:01:35.640 --> 00:01:37.610\n&gt;&gt; Yeah.\nGreat question, great question.\n\n36\n00:01:37.610 --> 00:01:39.360\nWhat the heck is a script?\n\n37\n00:01:39.360 --> 00:01:42.570\nIf I say a script how's it\ndifferent from a program?\n\n38\n00:01:42.570 --> 00:01:44.310\nThere's a good question to ask as well.\n\n39\n00:01:44.310 --> 00:01:47.920\nA script is basically just\na string of commands put together\n\n40\n00:01:47.920 --> 00:01:49.690\nthat your computer interprets.\n\n41\n00:01:49.690 --> 00:01:52.530\nIt says you want me to\ntell you what the date is?\n\n42\n00:01:52.530 --> 00:01:54.490\nYou want me to list disc uses.\n\n43\n00:01:54.490 --> 00:01:55.430\nNot a problem.\n\n44\n00:01:55.430 --> 00:01:58.800\nIt already knows the things\nthat it wants you to do.\n\n45\n00:01:58.800 --> 00:02:00.030\nThat's scripting.\n\n46\n00:02:00.030 --> 00:02:04.742\nAnd programming is more I am giving it\ninstructions that basically the CPU\n\n47\n00:02:04.742 --> 00:02:08.520\nunderstands and then I'm gonna compile\nthat until a program that runs and\n\n48\n00:02:08.520 --> 00:02:11.450\nwhen I type in one command\nit runs through that.\n\n49\n00:02:11.450 --> 00:02:15.486\nThey're kind of similar but except\nscripting is reading a line by line by\n\n50\n00:02:15.486 --> 00:02:18.394\nline and doing each one of\nthe things you ask it to do or\n\n51\n00:02:18.394 --> 00:02:21.257\nas programming is we're\ngonna compile a program.\n\n52\n00:02:21.257 --> 00:02:25.980\nAnd that compilation really leans\nto that's what programming is.\n\n53\n00:02:25.980 --> 00:02:27.900\n&gt;&gt; So if the script is just\na collection of commands, so\n\n54\n00:02:27.900 --> 00:02:32.760\nI make a list of commands, I could have\njust type those commands into the console,\n\n55\n00:02:32.760 --> 00:02:34.860\nanyway, and\nI'll put them into a script file at all.\n\n56\n00:02:34.860 --> 00:02:36.540\nSo why would I bother doing that?\n\n57\n00:02:36.540 --> 00:02:39.800\n&gt;&gt; You're darn right, you can just\ntype those bad boys right under your\n\n58\n00:02:39.800 --> 00:02:43.590\ncommand line and far and go,\nokay, tell me what the date is.\n\n59\n00:02:43.590 --> 00:02:44.800\nAll right, give me some disk usage.\n\n60\n00:02:44.800 --> 00:02:48.840\nThe problem comes into, problem,\nit's not so much a problem.\n\n61\n00:02:48.840 --> 00:02:53.450\nIt's just that we have limited time\nhere in our everyday lives and\n\n62\n00:02:53.450 --> 00:02:55.870\nthere's things that I do over and\nover and over again.\n\n63\n00:02:55.870 --> 00:02:59.340\nAnd instead of typing it in and\nwaiting for the output, and\n\n64\n00:02:59.340 --> 00:03:01.290\nthen typing in the next thing and\nwaiting for the output.\n\n65\n00:03:01.290 --> 00:03:02.680\nAnd then typing in the next thing and\nwaiting for\n\n66\n00:03:02.680 --> 00:03:07.200\nthe output, which does comprise a bit\nof what we do with our computers.\n\n67\n00:03:07.200 --> 00:03:11.320\nWouldn't it be nice if I could just\nshorten that down to one command?\n\n68\n00:03:11.320 --> 00:03:15.070\nThat's the power of scripting and\nnot only that, I could automate that.\n\n69\n00:03:15.070 --> 00:03:19.070\nWhat if I wanted to run all by itself in\nwhich will get into that kind of thing\n\n70\n00:03:19.070 --> 00:03:22.860\nlater down the road but,\nthat's the whole purpose of scripting.\n\n71\n00:03:22.860 --> 00:03:25.600\nI wanna be able to tell\nthe computer to do things for\n\n72\n00:03:25.600 --> 00:03:28.280\nme that I normally would\nhave to do myself.\n\n73\n00:03:28.280 --> 00:03:31.130\nAutomation, automation, automation,\nthat's the purpose of the scripting.\n\n74\n00:03:31.130 --> 00:03:33.730\nI wanna bury that in you guys' brain.\n\n75\n00:03:33.730 --> 00:03:36.690\n&gt;&gt; All right, so\nenough of the talky talky, right?\n\n76\n00:03:36.690 --> 00:03:40.170\nLet's see an example here, can you show\nme what a typical script would be like?\n\n77\n00:03:40.170 --> 00:03:44.290\n&gt;&gt; Yes, let's start off with the simplest\nform of what I would call a script\n\n78\n00:03:44.290 --> 00:03:47.350\nbecause it is just a chain\nof commands put together.\n\n79\n00:03:47.350 --> 00:03:50.150\nOne of the easiest ways we\ncan make a script is we just\n\n80\n00:03:50.150 --> 00:03:52.280\nuse what we like to call one-liners.\n\n81\n00:03:52.280 --> 00:03:56.280\nAnd we can actually chain commands\ntogether using a semicolon, and\n\n82\n00:03:56.280 --> 00:03:57.820\nthe command line will interpret that and\n\n83\n00:03:57.820 --> 00:03:59.710\ngo there's a semicolon that means\nthere's gonna be another command.\n\n84\n00:03:59.710 --> 00:04:01.790\nThere's another semicolon there's\ngonna be another command.\n\n85\n00:04:01.790 --> 00:04:04.070\nSo we can do this straight\nfrom the command prompt,\n\n86\n00:04:04.070 --> 00:04:06.770\nwe don't have to edit any files,\nor create anything.\n\n87\n00:04:06.770 --> 00:04:07.570\nWe can do it right from here.\n\n88\n00:04:07.570 --> 00:04:10.620\nThat's probably the most\nsimple form of a script.\n\n89\n00:04:10.620 --> 00:04:11.940\nSo let's show you how that works.\n\n90\n00:04:11.940 --> 00:04:14.310\nLet's throw a couple commands at\nthis thing and see how it likes it.\n\n91\n00:04:14.310 --> 00:04:15.720\nLet's jump into my computer real quickly.\n\n92\n00:04:15.720 --> 00:04:19.460\nAll right, the first thing I'm going\nto do is I'll do that, I'll do date,\n\n93\n00:04:19.460 --> 00:04:24.200\nI'll do disc usage, and\nI'll do who am I logged in as.\n\n94\n00:04:24.200 --> 00:04:27.220\nThree simple commands that I might\nrun on any particular day, or\n\n95\n00:04:27.220 --> 00:04:30.890\nmaybe right after I fire up my computer\nand I want to take a look at the system.\n\n96\n00:04:30.890 --> 00:04:32.320\nOn what's going on.\n\n97\n00:04:32.320 --> 00:04:35.990\nSo I'll do date and then my semicolon.\n\n98\n00:04:35.990 --> 00:04:37.560\nThen I'll give a space.\n\n99\n00:04:37.560 --> 00:04:42.101\nAnd I'll df-u another semicolon and\n\n100\n00:04:42.101 --> 00:04:45.378\nthen I'll say who am I like that.\n\n101\n00:04:45.378 --> 00:04:49.760\nFire off,\ngives me three different outputs.\n\n102\n00:04:49.760 --> 00:04:53.920\nGives me the date which is right\nhere Monday October second 9:52\n\n103\n00:04:53.920 --> 00:04:56.140\nvery nice thank you very much.\n\n104\n00:04:56.140 --> 00:05:02.000\nIt didn't like my dash u because it's not\ndash u it's dash h let's do that again.\n\n105\n00:05:02.000 --> 00:05:07.900\nWe grab that, h there we go,\nbut we also see that\n\n106\n00:05:07.900 --> 00:05:11.930\nerrors back that was nice to let me know\nthat something went wrong with my script.\n\n107\n00:05:13.370 --> 00:05:17.200\nAnd then it gave me who am I,\nwhich gave me my name, it's right here.\n\n108\n00:05:17.200 --> 00:05:20.830\nSo here's the output for\nthe file system command,\n\n109\n00:05:20.830 --> 00:05:24.560\nthere's the output for who am I and\nof course the output for the date.\n\n110\n00:05:24.560 --> 00:05:29.460\nSo I've technically scripted,\nI have told it to give me three different\n\n111\n00:05:29.460 --> 00:05:33.740\ncommands in succession, and all I had\nto was separate them by a semicolon.\n\n112\n00:05:33.740 --> 00:05:36.580\nSo it's really simple to\ndo in the command line.\n\n113\n00:05:36.580 --> 00:05:40.950\nThat is, like I said,\nprobably the simplest form of a script.\n\n114\n00:05:40.950 --> 00:05:43.910\nBut we're here to talk about scripts that\nwe're gonna run over and over again.\n\n115\n00:05:43.910 --> 00:05:47.020\nI had to type that in, and that's\nnot what we're really talking about.\n\n116\n00:05:47.020 --> 00:05:49.670\nWhat we're gonna do now is\nwe're gonna create a file\n\n117\n00:05:49.670 --> 00:05:53.870\nthat has these commands in them, so that\nall we have to do is call the file name,\n\n118\n00:05:53.870 --> 00:05:58.660\nand then it will run all those\ncommands only using one thing.\n\n119\n00:05:58.660 --> 00:05:59.488\nSo let's do that.\n\n120\n00:05:59.488 --> 00:06:04.330\nLet's talk about a script file\nreally quickly before we do.\n\n121\n00:06:04.330 --> 00:06:08.920\nI kinda mention then it\nis just a flat file.\n\n122\n00:06:08.920 --> 00:06:10.610\nIt has a bit of a format to it.\n\n123\n00:06:10.610 --> 00:06:11.700\nWe're gonna look at that.\n\n124\n00:06:11.700 --> 00:06:13.710\nOr basically what it is is we're\ntalking these commands and\n\n125\n00:06:13.710 --> 00:06:14.950\nwe're just gonna list them out.\n\n126\n00:06:14.950 --> 00:06:17.730\nI can list as many commands as I want or\nas little commands as I want.\n\n127\n00:06:17.730 --> 00:06:20.100\nMaybe I don't know the alias command does,\n\n128\n00:06:20.100 --> 00:06:24.340\nI just wanna change the name\nof df -h just to be df.\n\n129\n00:06:24.340 --> 00:06:26.920\nI can do that, I can run it here.\n\n130\n00:06:26.920 --> 00:06:31.780\nThat's a little weird but you can\nhave as few or as many as you like.\n\n131\n00:06:31.780 --> 00:06:32.650\nNow, let's get into this.\n\n132\n00:06:32.650 --> 00:06:37.290\nWe do need to fire up an editor so that\nwe can type, remember this a text file.\n\n133\n00:06:37.290 --> 00:06:39.230\nVery basic, there's nothing crazy.\n\n134\n00:06:39.230 --> 00:06:43.020\nYou like vim, you like nano,\nyou like whatever, fire it up and\n\n135\n00:06:43.020 --> 00:06:47.380\nas long as you get the format correct\nyou should be able to make a script.\n\n136\n00:06:47.380 --> 00:06:50.010\n&gt;&gt; And by enlarge we can use whatever\ntext status that we want but\n\n137\n00:06:50.010 --> 00:06:51.760\nsome are little better than others.\n\n138\n00:06:51.760 --> 00:06:56.640\nSome give us like colorization and syntax\nchecking versus other ones that might\n\n139\n00:06:56.640 --> 00:07:00.480\nbe super base that can give you next to\nnothing makes it easy to make errors.\n\n140\n00:07:00.480 --> 00:07:01.800\nWhat's your preferred editor?\n\n141\n00:07:01.800 --> 00:07:04.420\n&gt;&gt; Well, I actually bounce\naround to be honest with you.\n\n142\n00:07:04.420 --> 00:07:05.370\nSometimes I'm like,\n\n143\n00:07:05.370 --> 00:07:10.236\nyou know what, I'm a hardcore I\nneed to be a viervim guard today.\n\n144\n00:07:10.236 --> 00:07:14.885\nAnd I think probably for\nthis show I will use viervim exclusively.\n\n145\n00:07:14.885 --> 00:07:19.550\nNano was a great one as well,\nthey both of them will do what Don's\n\n146\n00:07:19.550 --> 00:07:23.990\ntalking about is syntax colorization\nwhich is end formating if you\n\n147\n00:07:25.430 --> 00:07:29.700\nstart a command and\nit realizes that's a command for a script.\n\n148\n00:07:29.700 --> 00:07:35.422\nThen it will actually move your cursor in\na way where they have the indentations\n\n149\n00:07:35.422 --> 00:07:39.530\n[INAUDIBLE] makes it really easy to\nflow and follow with their eyes.\n\n150\n00:07:39.530 --> 00:07:41.620\nYour script as you're writing along and\n\n151\n00:07:41.620 --> 00:07:44.800\nfind blocks of code that you\nquickly need to look for.\n\n152\n00:07:44.800 --> 00:07:48.733\nSo I'm gonna use var, actually I'm\ngonna use vim, it maps to vim so\n\n153\n00:07:48.733 --> 00:07:50.120\nI'll just type in vim.\n\n154\n00:07:50.120 --> 00:07:54.600\nBut any, there also other great editors\nlike [INAUDIBLE] they have this one,\n\n155\n00:07:54.600 --> 00:07:58.590\nI've used for a while a graph\ncollector called Cate Really like it,\n\n156\n00:07:58.590 --> 00:08:02.652\nit does a really great job syntax\nhighlighting and things like that.\n\n157\n00:08:02.652 --> 00:08:05.585\nSo if you wanna use any of those, if\nyou're in a graphical environment and you\n\n158\n00:08:05.585 --> 00:08:09.280\nlike the graphical text editor, definitely\nuse that there, they're fantastic.\n\n159\n00:08:09.280 --> 00:08:11.060\nBut for these intents and purposes,\n\n160\n00:08:11.060 --> 00:08:15.890\nI want to go with what I know is most\nlikely going to be on your system.\n\n161\n00:08:15.890 --> 00:08:18.588\nAnd it's good for\nus to have some good knowledge in any way.\n\n162\n00:08:18.588 --> 00:08:22.040\nNot that we're gonna get crazy with using\nvi or vim, this is gonna a vi or vim show.\n\n163\n00:08:22.040 --> 00:08:25.880\nIf you wanna see that, jump back\nto our Linux command line basics.\n\n164\n00:08:25.880 --> 00:08:28.820\nGreat stuff there that,\nI think Don actually did that show.\n\n165\n00:08:28.820 --> 00:08:31.428\nFantastic stuff if you wanna\nlearn how to use vi or\n\n166\n00:08:31.428 --> 00:08:34.299\nvim more effectively, and\nit was also great as well.\n\n167\n00:08:34.299 --> 00:08:37.807\nAll right, so let's do that,\nI'm gonna type in, actually,\n\n168\n00:08:37.807 --> 00:08:41.596\nI've already created the files\nthat we're gonna use for the show.\n\n169\n00:08:41.596 --> 00:08:44.934\nSo I'm not gonna recreate them\ncuz I'm a horrible typist,\n\n170\n00:08:44.934 --> 00:08:49.560\nand you guys don't want to struggle\nwatching me horribly type things out.\n\n171\n00:08:49.560 --> 00:08:53.160\nI'll walk us line through line to make\nsure that every piece is understood and\n\n172\n00:08:53.160 --> 00:08:53.870\naccounted for, okay?\n\n173\n00:08:53.870 --> 00:08:57.140\nSo I'm gonna be doing a list here, and\n\n174\n00:08:57.140 --> 00:09:02.164\nI think our first is going to\nbe just test1, I do believe.\n\n175\n00:09:02.164 --> 00:09:05.050\nSo I have test1.sh,\nI'm gonna vim test1.sh.\n\n176\n00:09:05.050 --> 00:09:10.490\n&gt;&gt; Now Daniel,\nI notice you had the .sh file extension,\n\n177\n00:09:10.490 --> 00:09:14.400\nand Unix and Linux in general are really\nbig on extensions, do we have to do .sh?\n\n178\n00:09:14.400 --> 00:09:18.980\n&gt;&gt; No, we do not have to do .sh but\nI highly recommend it,\n\n179\n00:09:18.980 --> 00:09:22.440\nbecause you wanna be aware of\nwhat the heck is on your system.\n\n180\n00:09:22.440 --> 00:09:26.490\nAnd if you leave that .sh extension off,\nit'll run fine, it'll work fine.\n\n181\n00:09:26.490 --> 00:09:29.950\nBut later down the line, maybe you\nwrote that scripts two years ago.\n\n182\n00:09:29.950 --> 00:09:33.280\nAnd now you're like, what's that script\nthat I've got that does that for me,\n\n183\n00:09:33.280 --> 00:09:35.410\nI don't have to go back and\nreinvent the wheel.\n\n184\n00:09:35.410 --> 00:09:39.443\nWe just call that script, where is it,\nor you could search by .sh extensions\n\n185\n00:09:39.443 --> 00:09:43.741\nthroughout your file system, maybe that'll\nhelp you find in a whole lot faster.\n\n186\n00:09:43.741 --> 00:09:48.717\nUsing that really helps us as people, and\nif somebody else is on the system, and\n\n187\n00:09:48.717 --> 00:09:51.930\nmaybe it's a collective repository for\nscripts.\n\n188\n00:09:51.930 --> 00:09:54.844\nAnd there are different kinds, maybe\nthere are Perl scripts in Python and C.\n\n189\n00:09:54.844 --> 00:09:59.097\nAnd all of this other stuff is going on,\nand nobody has any extensions on them,\n\n190\n00:09:59.097 --> 00:10:00.720\nit can get really confusing.\n\n191\n00:10:00.720 --> 00:10:06.232\nSo it's very helpful, again, for us to\nbe able to look at that .sh extension.\n\n192\n00:10:06.232 --> 00:10:11.448\nSo I've already opened vim here, and\nI've got my first test.sh going on.\n\n193\n00:10:11.448 --> 00:10:15.467\nAnd you'll notice, there's a something\nhappening here at the top of the line, and\n\n194\n00:10:15.467 --> 00:10:16.720\nwe're gonna get to that.\n\n195\n00:10:16.720 --> 00:10:22.910\nBut I want us to just pop down to\nwhere our actual commands are.\n\n196\n00:10:22.910 --> 00:10:26.020\nYou'll notice they're the exact same\ncommands that we ran on the terminal.\n\n197\n00:10:26.020 --> 00:10:28.840\nNow I didn't need a semicolon,\nand that's an important thing.\n\n198\n00:10:28.840 --> 00:10:33.407\nIf you work in other programming\nlanguages, if you jump to C, for instance,\n\n199\n00:10:33.407 --> 00:10:35.669\nor Python, I think Python does this.\n\n200\n00:10:35.669 --> 00:10:39.258\nA lot of times, once you get to the end of\na command, you have to put a semicolon,\n\n201\n00:10:39.258 --> 00:10:41.270\njust like we did in the command line.\n\n202\n00:10:41.270 --> 00:10:44.260\nBut I don't have semicolons here, so\nif you're coming from C and you're like,\n\n203\n00:10:44.260 --> 00:10:45.970\nyeah, I want to get\nbetter at bash scripting,\n\n204\n00:10:45.970 --> 00:10:47.560\nyou gotta remember to\nleave the semicolons off.\n\n205\n00:10:47.560 --> 00:10:51.680\nWe don't need them when we're running\n[INAUDIBLE], we just have line by line.\n\n206\n00:10:51.680 --> 00:10:54.930\nWhatever's on one line, it's gonna look\nat that line and go, I'm gonna do that.\n\n207\n00:10:54.930 --> 00:10:56.930\nThen it's gonna jump to the next line,\nif there's nothing there,\n\n208\n00:10:56.930 --> 00:11:00.840\nit knows it's done and\njust exits, it's over.\n\n209\n00:11:00.840 --> 00:11:02.340\nBut if there's something there,\nit's gonna run the next thing,\n\n210\n00:11:02.340 --> 00:11:05.650\nit's gonna run the next thing,\ndo that sequentially line by line by line.\n\n211\n00:11:05.650 --> 00:11:08.720\nThat's how that scripting\n[INAUDIBLE] is supposed to work.\n\n212\n00:11:08.720 --> 00:11:11.960\nSo we don't need the semicolons,\nwe just put the commands in there.\n\n213\n00:11:11.960 --> 00:11:15.530\nSo I've got my day command,\ngot my DF command, I'm gonna add that,\n\n214\n00:11:15.530 --> 00:11:19.150\ncuz I always do, I don't why I\ndidn't do it here but I always do.\n\n215\n00:11:19.150 --> 00:11:21.748\nI like that -h, make that human readable,\n\n216\n00:11:21.748 --> 00:11:25.692\nI'm not really great at doing the math\non the bytes there so [LAUGH].\n\n217\n00:11:25.692 --> 00:11:29.844\nI don't know about you Don, but yeah, not\nthe best mathematician in the world, and\n\n218\n00:11:29.844 --> 00:11:30.675\nthen my whoamI.\n\n219\n00:11:30.675 --> 00:11:38.520\nNow what I have to do is save my file and\nI have an actual script, so let's see.\n\n220\n00:11:38.520 --> 00:11:41.352\nIf that's all squared away,\nyou should be able to run our file,\n\n221\n00:11:41.352 --> 00:11:42.950\nlet's give it a whirl.\n\n222\n00:11:42.950 --> 00:11:48.778\nEscape, wq just like you do in vim,\nand then to run my file,\n\n223\n00:11:48.778 --> 00:11:53.700\nI need to let it know\nit's in this directory.\n\n224\n00:11:53.700 --> 00:12:00.260\nAnd I don't think that you\nhave to do this with a ./ and\n\n225\n00:12:00.260 --> 00:12:05.100\nthen the script name,\nthat's how I've always done it.\n\n226\n00:12:05.100 --> 00:12:08.880\nSomething tells me you can without that as\nlong as you're actually in that folder.\n\n227\n00:12:08.880 --> 00:12:11.790\nIf I'm somewhere else,\nif I'm off in the file system somewhere,\n\n228\n00:12:11.790 --> 00:12:16.060\nand I know where this script resides,\nI can give it the path name,\n\n229\n00:12:16.060 --> 00:12:18.910\nscript name, and then it will run.\n\n230\n00:12:18.910 --> 00:12:24.284\nBut typically I just do this out of habit,\nI'll do it just like this,\n\n231\n00:12:24.284 --> 00:12:30.509\n./test1.sh, like so, and hit Enter,\nand that should fire off my script.\n\n232\n00:12:30.509 --> 00:12:34.169\n&gt;&gt; And that's behavior, you'll see\nthat changes from distro to distro.\n\n233\n00:12:34.169 --> 00:12:37.374\nIt depends on, when they define\nthe path variable, whether or\n\n234\n00:12:37.374 --> 00:12:38.640\nnot dot is in the path.\n\n235\n00:12:38.640 --> 00:12:40.900\nAnd dot refers to the present\ndirectory that you're in.\n\n236\n00:12:40.900 --> 00:12:44.801\nSo if that's in your path, then you could\njust type test1.sh, but if it isn't,\n\n237\n00:12:44.801 --> 00:12:47.055\nthen you gotta type it\nthe way Daniel's got it.\n\n238\n00:12:47.055 --> 00:12:50.852\nAnd I know for me, I've just gotten\na habit of always of doing the ./.\n\n239\n00:12:50.852 --> 00:12:53.352\nCuz if you jump around systems enough,\nit's so\n\n240\n00:12:53.352 --> 00:12:56.739\ninconsistent that it's better\nto just assume it's not there.\n\n241\n00:12:56.739 --> 00:12:59.404\nSo it sounds like you've done the same,\nDaniel, you're just in that habit.\n\n242\n00:12:59.404 --> 00:13:03.200\n&gt;&gt; Yeah, this just completely became\nhabit over my scripting career.\n\n243\n00:13:03.200 --> 00:13:05.790\nI suggest this as well\nbecause of that very fact,\n\n244\n00:13:05.790 --> 00:13:07.010\nyou never know what system\nyou're gonna be on.\n\n245\n00:13:07.010 --> 00:13:09.500\nYou never know whether or\nnot it's going to work without it.\n\n246\n00:13:09.500 --> 00:13:13.370\nSo you might as well just get in\nthe habit of doing it, and there you go.\n\n247\n00:13:13.370 --> 00:13:16.260\nNow I do have one problem\nwith what I've got going on.\n\n248\n00:13:16.260 --> 00:13:19.650\nThis is how I execute my script, but watch\nwhat happens when I hit the Enter key.\n\n249\n00:13:20.790 --> 00:13:23.988\nI get permission denied, well,\nI created that, I wrote it,\n\n250\n00:13:23.988 --> 00:13:26.274\nit let me write it, so what's the problem?\n\n251\n00:13:26.274 --> 00:13:29.891\nWell, go back to your basics\nof Linux command line,\n\n252\n00:13:29.891 --> 00:13:32.120\nit has to be an executable file.\n\n253\n00:13:32.120 --> 00:13:35.610\nIf it's not, it's not going to execute,\nthat's how these things work,\n\n254\n00:13:35.610 --> 00:13:37.890\nit's amazing how they figured that out,\nright?\n\n255\n00:13:37.890 --> 00:13:40.640\nSo we always have to make sure\nthat after we've created our file,\n\n256\n00:13:40.640 --> 00:13:43.910\nafter we've created our shell script,\nwe have to make it executable, or\n\n257\n00:13:43.910 --> 00:13:45.460\nwe're gonna get permission denied.\n\n258\n00:13:45.460 --> 00:13:49.840\nAnd man, I'll tell you, I can't tell you\nhow many times this snake has bitten me\n\n259\n00:13:49.840 --> 00:13:52.310\nuntil I was like okay,\nbury it in your head.\n\n260\n00:13:52.310 --> 00:13:55.470\nAfter you've hit that last wq, when\nyou're ready to fire the script off for\n\n261\n00:13:55.470 --> 00:13:57.320\nthe first time,\nmake this thing executable.\n\n262\n00:13:57.320 --> 00:14:00.030\nSo make sure that's a part\nof your workflow when it\n\n263\n00:14:00.030 --> 00:14:01.505\ncomes to youcreating scripts.\n\n264\n00:14:01.505 --> 00:14:03.945\n&gt;&gt; And you have to do that every\ntime you edit the file, or\n\n265\n00:14:03.945 --> 00:14:05.366\njust when you create the file?\n\n266\n00:14:05.366 --> 00:14:07.073\n&gt;&gt; Yeah,\njust when you create it the first time.\n\n267\n00:14:07.073 --> 00:14:11.475\nIf you said, I'm starting with\na blank slate, I'm not doing anything,\n\n268\n00:14:11.475 --> 00:14:14.823\nI'm just gonna fire up vim,\ngive it a name for the file.\n\n269\n00:14:14.823 --> 00:14:21.435\nAnd also, going back to the .sh extension,\nyour vim and nano and other editors.\n\n270\n00:14:21.435 --> 00:14:25.056\nWhen it sees .sh, it goes,\nthis is a shell script, and\n\n271\n00:14:25.056 --> 00:14:28.310\nwe'll employ that syntax\nhighlighting as well.\n\n272\n00:14:28.310 --> 00:14:30.800\nSo another good reason for\nus to use those extensions.\n\n273\n00:14:30.800 --> 00:14:35.640\nBut yes, if this is a flat file,\nit's blank slate,\n\n274\n00:14:35.640 --> 00:14:40.190\ntabula rasa or\nwhatever it is [LAUGH] in Latin.\n\n275\n00:14:40.190 --> 00:14:43.751\nIt's a blank slate, then you're gonna\nhave to set that executable bit.\n\n276\n00:14:43.751 --> 00:14:47.347\nSo let's do that now,\nI'll do the CHMOD command and\n\n277\n00:14:47.347 --> 00:14:50.058\nthere's a couple ways you can do this.\n\n278\n00:14:50.058 --> 00:14:53.189\nI have gotten into a bad habit\nlately of just doing +x.\n\n279\n00:14:54.240 --> 00:14:56.990\nThe reason this is a bad habit,\nand this is what I do, just +x and\n\n280\n00:14:56.990 --> 00:15:01.264\nthen the file name, test1.sh, like that.\n\n281\n00:15:01.264 --> 00:15:05.419\nReason this is a bad habit is because\nit makes it executable for everyone,\n\n282\n00:15:05.419 --> 00:15:06.231\neverything.\n\n283\n00:15:06.231 --> 00:15:12.359\nWhether it's me as the owner, people\nin my group, or just any other user.\n\n284\n00:15:12.359 --> 00:15:16.122\nAnd depending on what goes\ninside of your script,\n\n285\n00:15:16.122 --> 00:15:21.423\nthat can be a security issue, so\nI don't recommend doing it this way.\n\n286\n00:15:21.423 --> 00:15:24.490\nI've gotten in the habit of doing it\nthis way cuz I've run a lot of VMs,\n\n287\n00:15:24.490 --> 00:15:27.060\nit's quicker,\nit's one less key stroke, right?\n\n288\n00:15:27.060 --> 00:15:28.777\nBut the better way to do it,\n\n289\n00:15:28.777 --> 00:15:33.879\nthe way you probably should do it almost\nevery time if not every time, is do u+x.\n\n290\n00:15:33.879 --> 00:15:37.024\nAnd that will make sure that\nonly you get that executable,\n\n291\n00:15:37.024 --> 00:15:40.113\ncuz let's look at the permissions\non it really quickly.\n\n292\n00:15:40.113 --> 00:15:45.062\nIf I do an ls -l on test1.sh,\nyou'll see that the permissions\n\n293\n00:15:45.062 --> 00:15:49.919\nas they stand is just read and\nwrite for me as the owner, read for\n\n294\n00:15:49.919 --> 00:15:53.882\nanyone in my group, and\nthen read for other users.\n\n295\n00:15:53.882 --> 00:15:58.366\nSo I don't necessarily care If other\npeople see my testimony script,\n\n296\n00:15:58.366 --> 00:15:59.357\nthat's fine.\n\n297\n00:15:59.357 --> 00:16:03.610\nIf this was a more secure script,\nmaybe there was a password put in here.\n\n298\n00:16:03.610 --> 00:16:06.980\nNot a great security practice,\nby the way, but if you were testing or\n\n299\n00:16:06.980 --> 00:16:09.460\nsomething like that and you happened\nto throw that in there for quick and\n\n300\n00:16:09.460 --> 00:16:12.790\ndirty, and that was read by everyone,\nanybody could see that.\n\n301\n00:16:12.790 --> 00:16:17.490\nSo you wanna be very meticulous when\nit comes to the permissions that you\n\n302\n00:16:17.490 --> 00:16:21.410\nset on your shell scripts, especially\ndepending on what might be in there.\n\n303\n00:16:21.410 --> 00:16:22.950\nSo be very careful on that.\n\n304\n00:16:22.950 --> 00:16:28.908\nSo let's change that to\nchmod u+x [INAUDIBLE]\n\n305\n00:16:28.908 --> 00:16:30.610\n.ssh enter.\n\n306\n00:16:30.610 --> 00:16:35.930\nIf you do an ls now,\nyou'll notice that test1.sh went from\n\n307\n00:16:35.930 --> 00:16:40.870\njust being a regular file, I have\ncolor coding enabled in my terminal.\n\n308\n00:16:42.150 --> 00:16:43.270\nBut it turns green here.\n\n309\n00:16:43.270 --> 00:16:48.270\nIf I do ls-l you can see it even better,\nbecause now we see\n\n310\n00:16:48.270 --> 00:16:52.430\nright over here, read, write, and\nexecute, and that's what we need.\n\n311\n00:16:52.430 --> 00:16:56.400\nNow we can do the ./ script name,\nand it should fire off.\n\n312\n00:16:56.400 --> 00:16:57.355\nSo let's try it.\n\n313\n00:16:57.355 --> 00:16:58.619\nHere we go, Don.\n\n314\n00:16:58.619 --> 00:16:59.503\nDrum roll, please.\n\n315\n00:16:59.503 --> 00:17:02.722\n&gt;&gt; [LAUGH]\n&gt;&gt; [CROSSTALK] here we go.\n\n316\n00:17:02.722 --> 00:17:09.344\nHey, look at that, it ran,\nit gave me my date and time.\n\n317\n00:17:09.344 --> 00:17:13.314\nIt gave me all my [INAUDIBLE] just the way\nI like it with the gigabytes over there\n\n318\n00:17:13.314 --> 00:17:14.377\nand the megabytes.\n\n319\n00:17:14.377 --> 00:17:17.838\nGet all that biting crap that I\ncan't stand, cuz I can't do math and\n\n320\n00:17:17.838 --> 00:17:19.395\nit makes me feel inadequate.\n\n321\n00:17:19.395 --> 00:17:22.440\n&gt;&gt; [LAUGH]\n&gt;&gt; And then of course, I'm logged in as.\n\n322\n00:17:22.440 --> 00:17:27.390\nSo we've gone through it, we've actually\nfired off a script, it worked like we\n\n323\n00:17:27.390 --> 00:17:31.920\nneeded it to, we set the permissions\nlike we needed and everything went fine.\n\n324\n00:17:31.920 --> 00:17:34.900\nNow that leads us to one other thing, and\n\n325\n00:17:34.900 --> 00:17:37.850\nthat is that little bit of formatting\nat the beginning of our script.\n\n326\n00:17:37.850 --> 00:17:42.630\nLet's go back into Vim, test1.sh.\n\n327\n00:17:42.630 --> 00:17:45.785\n1.sh\n&gt;&gt; Now, I know a lot of people who work\n\n328\n00:17:45.785 --> 00:17:49.465\nwith scripts, they just out of hand put\nthis first line in their script file and\n\n329\n00:17:49.465 --> 00:17:50.375\nnever really think about it.\n\n330\n00:17:50.375 --> 00:17:51.875\nBut actually it's pretty important, right?\n\n331\n00:17:51.875 --> 00:17:53.385\nIt serves a very specific purpose.\n\n332\n00:17:53.385 --> 00:17:54.465\n&gt;&gt; Yes, it does.\n\n333\n00:17:54.465 --> 00:17:56.165\nIt's a very specific purpose.\n\n334\n00:17:56.165 --> 00:17:59.645\nThat right there is letting\nthe command line know\n\n335\n00:17:59.645 --> 00:18:04.423\nthis is to be executed by whatever\nshell you've given it, right?\n\n336\n00:18:04.423 --> 00:18:08.440\nSo typically, working in Bash, Don,\n\n337\n00:18:08.440 --> 00:18:12.741\nhow often do you venture outside of bash?\n\n338\n00:18:12.741 --> 00:18:13.690\n&gt;&gt; So I don't.\n\n339\n00:18:13.690 --> 00:18:15.510\nBut like me, personally,\nwhen I sit down in a machine,\n\n340\n00:18:15.510 --> 00:18:18.835\nif I have choice of an interpreter,\nI go with Bash, right?\n\n341\n00:18:18.835 --> 00:18:23.565\nBut there's plenty of distros out there\nlike Ubuntu that use dash by default now.\n\n342\n00:18:23.565 --> 00:18:26.205\nAnd so if you run a script in Ubuntu,\n\n343\n00:18:26.205 --> 00:18:29.445\nit's going to be running\ninside of a dash environment.\n\n344\n00:18:29.445 --> 00:18:30.725\nAnd some commands are different.\n\n345\n00:18:30.725 --> 00:18:34.925\nSome things don't behave the same way\nin Dash as they do in Bash or ZSH,\n\n346\n00:18:34.925 --> 00:18:38.490\nTCSH all the other different\nshells that are out there\n\n347\n00:18:38.490 --> 00:18:39.930\n&gt;&gt; We kind of got in the habit for\n\n348\n00:18:39.930 --> 00:18:42.680\nawhile there just assuming we\nwere always gonna be in Bash, but\n\n349\n00:18:42.680 --> 00:18:43.850\nthat's not the case anymore.\n\n350\n00:18:43.850 --> 00:18:45.370\n&gt;&gt; No, it is not the case anymore.\n\n351\n00:18:45.370 --> 00:18:46.110\nYou never know.\n\n352\n00:18:46.110 --> 00:18:50.770\nAnd people have started really venturing\nout and going, hey, maybe I do like ZSH.\n\n353\n00:18:50.770 --> 00:18:51.880\nMaybe I like CSH.\n\n354\n00:18:51.880 --> 00:18:53.890\nMaybe I like TCSH.\n\n355\n00:18:53.890 --> 00:18:55.910\nAnd that's the environment\nyou're going to be working in.\n\n356\n00:18:55.910 --> 00:19:00.469\nWe're going to be sticking wit Bash\nbecause it is the most prevalent shell\n\n357\n00:19:00.469 --> 00:19:02.905\nthat you're going to be working with.\n\n358\n00:19:02.905 --> 00:19:05.615\nAnd it's, well,\nit's the one I like to use.\n\n359\n00:19:05.615 --> 00:19:06.990\n&gt;&gt; [LAUGH]\n&gt;&gt; So that's the one we're going to use.\n\n360\n00:19:06.990 --> 00:19:10.360\nAnd since it's so\nprevalent it makes most of your scripts\n\n361\n00:19:10.360 --> 00:19:12.080\nalmost guaranteed that\nthey're gonna work somewhere.\n\n362\n00:19:12.080 --> 00:19:16.630\nYou can call Bash, and even if that's\nnot the default, it will know Bash,\n\n363\n00:19:16.630 --> 00:19:19.290\ncuz Bash is probably installed by default.\n\n364\n00:19:19.290 --> 00:19:22.825\n&gt;&gt; And you say probably, but\nreally, every distro has Bash.\n\n365\n00:19:22.825 --> 00:19:26.480\nAnd so even Ubuntu Dash is the default,\nBash is still installed.\n\n366\n00:19:26.480 --> 00:19:29.040\nAnd so by putting that there at\nthe beginning of the line, you know your\n\n367\n00:19:29.040 --> 00:19:33.130\nscript will run the same way on Fedora,\non RedHat, on Ubuntu, on Debian.\n\n368\n00:19:33.130 --> 00:19:35.910\nIt gives you that maximum compatibility.\n\n369\n00:19:35.910 --> 00:19:37.932\nIf you're only running your\nscript in one environment,\n\n370\n00:19:37.932 --> 00:19:39.520\nthough,\n&gt;&gt; you don't\n\n371\n00:19:39.520 --> 00:19:40.540\nnecessarily have to have that.\n\n372\n00:19:40.540 --> 00:19:42.770\nAnd, in fact,\nyou could even leave that line off, right?\n\n373\n00:19:42.770 --> 00:19:44.070\nDo you ever do that, Daniel?\n\n374\n00:19:44.070 --> 00:19:46.105\n&gt;&gt; I don't because I'm too paranoid.\n\n375\n00:19:46.105 --> 00:19:46.909\n[INAUDIBLE] It won't work.\n\n376\n00:19:46.909 --> 00:19:48.320\n[LAUGH]\n&gt;&gt; If you leave it off,\n\n377\n00:19:48.320 --> 00:19:49.990\nyou can't just call the file anymore.\n\n378\n00:19:49.990 --> 00:19:53.150\nYou actually have to say,\nlike Bash test1.sh.\n\n379\n00:19:53.150 --> 00:19:56.280\nSo you're telling it the server and\nthe file.\n\n380\n00:19:56.280 --> 00:19:58.110\nSo, it's a little bit extra work, right?\n\n381\n00:19:58.110 --> 00:20:00.161\nIf you just put that line right\nthere in the beginning of the file,\n\n382\n00:20:00.161 --> 00:20:02.340\nthen you can call the file directly and\nit runs, and that's that.\n\n383\n00:20:02.340 --> 00:20:04.700\n&gt;&gt; And then after, like,\nyou're 600th script you get so\n\n384\n00:20:04.700 --> 00:20:08.870\nquick, you just type it in so\nfast it becomes second nature.\n\n385\n00:20:08.870 --> 00:20:12.679\nso I do suggest doing that,\ngetting that second natureness because of\n\n386\n00:20:12.679 --> 00:20:15.660\nthe prevalence of Bash,\nand that's we're gonna do.\n\n387\n00:20:15.660 --> 00:20:19.220\nWe're writing Bash scripts, we're not\nwriting ZSH scripts or C scripts.\n\n388\n00:20:19.220 --> 00:20:22.230\nThis is going to be Bash scripting,\nall right?\n\n389\n00:20:22.230 --> 00:20:24.970\nNow, there is also a little\nheader on that, and\n\n390\n00:20:24.970 --> 00:20:28.950\nit's the,\nwhat the kids now call it a hash tag.\n\n391\n00:20:28.950 --> 00:20:32.880\nBut it was also know as the shebang,\nright?\n\n392\n00:20:32.880 --> 00:20:35.385\nSo that hashtag,\n\n393\n00:20:35.385 --> 00:20:39.740\nthe pound symbol as I grew up with cuz\nthere were telephones had it on there.\n\n394\n00:20:39.740 --> 00:20:41.810\nThat's why we called it, the pound symbol.\n\n395\n00:20:41.810 --> 00:20:43.510\nYou got the pound and\nthe exclamation point.\n\n396\n00:20:43.510 --> 00:20:46.170\nSo you got the shebang, hashbang.\n\n397\n00:20:46.170 --> 00:20:53.100\nAnd that is basically letting the shell\nknow I am calling a shell script.\n\n398\n00:20:53.100 --> 00:20:57.020\nAnd then you add your shell interpreter,\nwhat shell is gonna interpret the script.\n\n399\n00:20:57.020 --> 00:21:00.670\nSo that always needs to\nbe the very first line.\n\n400\n00:21:00.670 --> 00:21:05.740\nNow an interesting little factoid\nthere is you use the hashtag or\n\n401\n00:21:05.740 --> 00:21:11.860\nthe pound sign in other parts of your\nscript, and you do it for commenting.\n\n402\n00:21:11.860 --> 00:21:15.498\nIf I wanted to comment this,\n\n403\n00:21:15.498 --> 00:21:20.347\nI can come in here and I could say date,\n\n404\n00:21:20.347 --> 00:21:25.046\nand I could put a hashtag like that and\n\n405\n00:21:25.046 --> 00:21:31.583\nsay this [INAUDIBLE] need\nthe current date and time.\n\n406\n00:21:31.583 --> 00:21:32.856\nLike that.\n\n407\n00:21:32.856 --> 00:21:36.600\nOnce I typed a save and exit, it's not\ngonna show up when I run my script.\n\n408\n00:21:36.600 --> 00:21:38.000\nSo if I do this, save and exit.\n\n409\n00:21:38.000 --> 00:21:41.660\nSave, save, there we go, thank you.\n\n410\n00:21:41.660 --> 00:21:44.660\nColon, [INAUDIBLE] save and\nexit, we run our script again,\n\n411\n00:21:44.660 --> 00:21:48.050\nyou notice that that didn't show up.\n\n412\n00:21:48.050 --> 00:21:52.990\nIt's in the script, but the interpreter\ndidn't put that out on the screen.\n\n413\n00:21:52.990 --> 00:21:55.722\nThat's there for us as scriptors.\n\n414\n00:21:55.722 --> 00:21:57.931\nIf I gave the script to Don,\nhe was looking at it and\n\n415\n00:21:57.931 --> 00:22:00.730\nsay he is unfamiliar with the bacon man,\nfor whatever reason.\n\n416\n00:22:00.730 --> 00:22:03.025\nHe's from another planet, right?\n\n417\n00:22:03.025 --> 00:22:04.690\nHe doesn't understand\nthis concept of dates.\n\n418\n00:22:04.690 --> 00:22:08.950\nHe looks at that and he goes, it's to\ngive him some sort of synchronization,\n\n419\n00:22:08.950 --> 00:22:13.500\nwhat is today's date and time currently\nat the time of running the script.\n\n420\n00:22:13.500 --> 00:22:14.640\nGreat, now I know what that does.\n\n421\n00:22:14.640 --> 00:22:16.170\nSo it's really good for us.\n\n422\n00:22:16.170 --> 00:22:21.380\nI would definitely suggest getting into\nthe habit of commenting your scripts.\n\n423\n00:22:21.380 --> 00:22:25.360\nDidn't do that a whole lot if much at all\nin this because I'm going to be explaining\n\n424\n00:22:25.360 --> 00:22:27.888\nit to you, and\nIt'll just clutter up the screen.\n\n425\n00:22:27.888 --> 00:22:32.210\nBut especially for\nmore complex portions of your script,\n\n426\n00:22:32.210 --> 00:22:37.810\nit's great idea to comment it out, or\nnot comment out, but comment it so\n\n427\n00:22:37.810 --> 00:22:40.890\nthat you even know what it does so that\nmany when years from now you go back and\n\n428\n00:22:40.890 --> 00:22:44.090\ntake a look at it,\nyou go that's why I did that.\n\n429\n00:22:44.090 --> 00:22:45.100\nThat's why I put this.\n\n430\n00:22:45.100 --> 00:22:46.230\nBecause I can't tell you, Don,\n\n431\n00:22:46.230 --> 00:22:49.590\nhow many times I've looked at a script\nthat I've written months ago and\n\n432\n00:22:49.590 --> 00:22:52.080\nI went why in the heck did I even do this?\n\n433\n00:22:52.080 --> 00:22:54.291\nBut if I would have put a comment there,\n\n434\n00:22:54.291 --> 00:22:56.992\nnow I know exactly why I\ndid it cuz I told myself.\n\n435\n00:22:56.992 --> 00:22:58.080\n&gt;&gt; Yeah, and\n\n436\n00:22:58.080 --> 00:23:01.370\nit's even more challenging when you're\nlooking at a script somebody else wrote.\n\n437\n00:23:01.370 --> 00:23:02.025\n&gt;&gt; Yeah.\nRight, so\n\n438\n00:23:02.025 --> 00:23:03.983\nif I'm reading one of\nyour scripts I'm like,\n\n439\n00:23:03.983 --> 00:23:05.650\nwhy did Daniel decide to do it this way?\n\n440\n00:23:05.650 --> 00:23:06.940\nThis other way is better.\n\n441\n00:23:06.940 --> 00:23:09.750\nBut then, he can kind of justify,\nhe had that documentation right in there,\n\n442\n00:23:09.750 --> 00:23:10.950\nit's really handy.\n\n443\n00:23:10.950 --> 00:23:14.630\nBut the hashtag on the first line,\nthat's not being ignored, is it?\n\n444\n00:23:14.630 --> 00:23:16.170\n&gt;&gt; No, that is not being ignored.\n\n445\n00:23:16.170 --> 00:23:21.480\nThat is the thing that tells your shell I\nneed to interpret this as a shell script.\n\n446\n00:23:21.480 --> 00:23:24.755\nAnd then here is the shell that\nis going to run said script.\n\n447\n00:23:24.755 --> 00:23:25.721\nThat's the first line.\n\n448\n00:23:25.721 --> 00:23:29.414\nAnything else, you put a hashtag\nin front of it or a pound symbol,\n\n449\n00:23:29.414 --> 00:23:33.620\nthen it's just gonna not read it at all,\nit's just gonna skip past that.\n\n450\n00:23:33.620 --> 00:23:36.340\nIt's gonna see that and\ngo skip, go to the next thing.\n\n451\n00:23:36.340 --> 00:23:38.390\nIf it sees another one, skip,\ngo to the next thing, all right?\n\n452\n00:23:38.390 --> 00:23:42.218\nSo just be aware that that's\nwhat we're commenting.\n\n453\n00:23:42.218 --> 00:23:43.860\nAll right, now I know we got\na little bit of time left.\n\n454\n00:23:43.860 --> 00:23:46.746\nWe got one more thing I wanna\ntalk about in this episode, and\n\n455\n00:23:46.746 --> 00:23:48.207\nthat is output to the screen.\n\n456\n00:23:48.207 --> 00:23:52.037\nNow, we'll notice that that did\nnot output anything to our screen.\n\n457\n00:23:52.037 --> 00:23:52.911\nBut what if I do?\n\n458\n00:23:52.911 --> 00:23:57.249\nWhat if I kinda wanna give myself\na reminder of what's going\n\n459\n00:23:57.249 --> 00:23:59.254\non in the script as it goes.\n\n460\n00:23:59.254 --> 00:24:04.275\nOr some information for the script to\nthe user that is actually running it,\n\n461\n00:24:04.275 --> 00:24:06.120\nthat could be helpful.\n\n462\n00:24:06.120 --> 00:24:07.660\nWe can do that using the echo command.\n\n463\n00:24:07.660 --> 00:24:08.800\nIt's a very nice thing.\n\n464\n00:24:08.800 --> 00:24:11.098\nLet's jump back to my screen really\nquickly and I'll show you how it works.\n\n465\n00:24:11.098 --> 00:24:13.510\nLet me clear.\nIf I do echo, let's see here,\n\n466\n00:24:13.510 --> 00:24:17.210\njust a good old hello world.\n\n467\n00:24:17.210 --> 00:24:22.180\nWorld, like that.\n\n468\n00:24:22.180 --> 00:24:27.600\nYou'll notice that it just tells me what I\ndid, like an echo, if I said hello, hello!\n\n469\n00:24:27.600 --> 00:24:30.650\nThat's the idea behind the echo command.\n\n470\n00:24:30.650 --> 00:24:37.260\nThe weird thing about it though is it\ndoes only do what you tell it to do.\n\n471\n00:24:37.260 --> 00:24:41.740\nAnd I liken this to Ron Burgundy and\nthe teleprompter.\n\n472\n00:24:41.740 --> 00:24:44.660\nIf you type it in and say echo this,\nit's gonna echo that.\n\n473\n00:24:44.660 --> 00:24:48.410\nAnd there are some caveats,\nsome strange things about it.\n\n474\n00:24:48.410 --> 00:24:52.810\nA lot of times you'll want to encase\nthese things with quotations, okay?\n\n475\n00:24:52.810 --> 00:24:54.640\nEspecially long strings.\n\n476\n00:24:54.640 --> 00:24:56.840\nYou wanna say,\nthis is the chunk that I want.\n\n477\n00:24:56.840 --> 00:24:58.210\nNow this works.\nSo I'll put Hello World,\n\n478\n00:24:58.210 --> 00:25:02.180\nit echoed that out just fine, but a lot of\ntimes, and I will just get in the habit of\n\n479\n00:25:02.180 --> 00:25:07.399\nthis, put quotes around anything that's a\nstring of texts that's more than one word.\n\n480\n00:25:07.399 --> 00:25:09.790\nAnd basically just doing this echo quote\n\n481\n00:25:11.040 --> 00:25:15.474\nhello world, and\nthen end quote, hit Enter.\n\n482\n00:25:15.474 --> 00:25:19.650\nIt gives you the same kinda output,\nbut as we get further into scripting,\n\n483\n00:25:19.650 --> 00:25:23.320\nespecially when we start dealing with\nvariables, this becomes very, very handy.\n\n484\n00:25:23.320 --> 00:25:25.280\n&gt;&gt; Yeah, I know.\nGoing back to the beginning of the episode\n\n485\n00:25:25.280 --> 00:25:27.030\nwhere you do a semicolon and\ndo another command.\n\n486\n00:25:27.030 --> 00:25:28.940\n&gt;&gt; Yeah.\n&gt;&gt; So if you did hello world followed by\n\n487\n00:25:28.940 --> 00:25:31.770\na semicolon,\n&gt;&gt; It wouldn't know that that was meaning,\n\n488\n00:25:31.770 --> 00:25:33.980\ni wanted you to do another command\nwhich assumes the semi colon was\n\n489\n00:25:33.980 --> 00:25:35.740\nmore text that you wanted the output,\nright?\n\n490\n00:25:35.740 --> 00:25:38.320\nSo by putting quotes around it,\nyou create that boundary and\n\n491\n00:25:38.320 --> 00:25:42.430\nsay, here's what I want you to echo and\nanything after this is unrelated or\n\n492\n00:25:42.430 --> 00:25:43.500\npart of another command, right?\n\n493\n00:25:43.500 --> 00:25:46.190\n&gt;&gt; Exactly, you're basically bounding off\n\n494\n00:25:46.190 --> 00:25:49.490\nwhat you want the echo command\nto actually deal with.\n\n495\n00:25:49.490 --> 00:25:51.280\nAnd then after that is other things.\n\n496\n00:25:51.280 --> 00:25:53.870\nMaybe it's more commands, maybe it's\nsomething else, who knows, right?\n\n497\n00:25:53.870 --> 00:25:56.860\nMaybe I'm doing file redirection,\nsomething like that.\n\n498\n00:25:56.860 --> 00:26:01.280\nSo it's always a good idea to put that\nbounding around what you want to echo.\n\n499\n00:26:01.280 --> 00:26:04.040\n&gt;&gt; And that'll be a recurring theme\nthroughout this series, cuz it's the same\n\n500\n00:26:04.040 --> 00:26:08.580\nthing with variables and other places\nwhere we store data and wanna recall it.\n\n501\n00:26:08.580 --> 00:26:10.800\nYou gotta set the boundaries so\nit knows where it begins and\n\n502\n00:26:10.800 --> 00:26:14.270\nends because it can get confusing\nas you start combining things.\n\n503\n00:26:14.270 --> 00:26:17.430\nWe'll see much advanced examples later on\n&gt;&gt; Yeah, that's right.\n\n504\n00:26:17.430 --> 00:26:19.290\nNow the only other thing\nI want to tell you about,\n\n505\n00:26:19.290 --> 00:26:24.570\nthe echo command getting scripts to work,\nis that you have the quotations,\n\n506\n00:26:24.570 --> 00:26:27.760\nyou want to bound them and you can use\nsingle quotations or double quotations.\n\n507\n00:26:27.760 --> 00:26:28.720\nEither will work.\n\n508\n00:26:28.720 --> 00:26:33.527\nI can make it say echo Now I'll use\nsingle quotations, I'm Ron Burgundy,\n\n509\n00:26:33.527 --> 00:26:35.371\nquestion mark, like that.\n\n510\n00:26:35.371 --> 00:26:38.879\nNow here is an interesting\nthing that's gonna happen.\n\n511\n00:26:38.879 --> 00:26:41.130\nYou're gonna see some funny stuff.\n\n512\n00:26:41.130 --> 00:26:43.380\nLet's take a look at what happens.\n\n513\n00:26:45.172 --> 00:26:49.760\nIt dropped me to a prompt, it's like\nit's waiting for more information.\n\n514\n00:26:49.760 --> 00:26:51.060\nWhy the heck did that happen?\n\n515\n00:26:51.060 --> 00:26:56.590\nNow the reason that happened is because\nI'm using multiple single quotations.\n\n516\n00:26:56.590 --> 00:26:57.660\nThere can be, like I said,\n\n517\n00:26:57.660 --> 00:27:00.010\nthere's some caveats to getting\nit to do what you want to do.\n\n518\n00:27:00.010 --> 00:27:04.340\nI'm just going to ctrl+C out of this so\nwe can drop back and get this to work, and\n\n519\n00:27:04.340 --> 00:27:06.470\nshow you how you can work.\n\n520\n00:27:06.470 --> 00:27:09.960\nI want to say I'm, I don't wanna say,\nwhat am I, Data from Star Trek,\n\n521\n00:27:09.960 --> 00:27:11.535\nright, I have to use contractions.\n\n522\n00:27:11.535 --> 00:27:13.590\n&gt;&gt; [LAUGH].\n&gt;&gt; No, we can't use contractions.\n\n523\n00:27:13.590 --> 00:27:16.610\nThe easy way to do it is,\nwell there's two ways you can do it.\n\n524\n00:27:16.610 --> 00:27:17.870\nI could make the same thing.\n\n525\n00:27:17.870 --> 00:27:23.470\nI could come over here and\nI could use double quotations like so.\n\n526\n00:27:23.470 --> 00:27:26.243\nI hit it and look,\nI get I am Ron Burgundy.\n\n527\n00:27:26.243 --> 00:27:26.840\nGreat.\n\n528\n00:27:26.840 --> 00:27:27.696\nIt's fantastic.\n\n529\n00:27:27.696 --> 00:27:28.500\n&gt;&gt; All right.\nSo Daniel,\n\n530\n00:27:28.500 --> 00:27:31.004\nyour solution there was to basically\nchange the quote marks, right?\n\n531\n00:27:31.004 --> 00:27:33.040\nSo instead of using the apostrophe or\n\n532\n00:27:33.040 --> 00:27:35.510\nwhatever you went to double\nquotes on the outside.\n\n533\n00:27:35.510 --> 00:27:38.950\nWhat if it was a double quote already,\n\n534\n00:27:38.950 --> 00:27:40.820\ninside of a string that\nI'm trying to echo.\n\n535\n00:27:40.820 --> 00:27:43.130\nI can't just change out then, can I?\n\n536\n00:27:43.130 --> 00:27:44.500\n&gt;&gt; Yeah, that is a problem.\n\n537\n00:27:44.500 --> 00:27:45.370\nSo what are we gonna do?\n\n538\n00:27:45.370 --> 00:27:50.023\nWe're gonna use negation to say,\nI don't want these quotes to be seen as\n\n539\n00:27:50.023 --> 00:27:54.216\na special character by the command line,\nI just want them to see it\n\n540\n00:27:54.216 --> 00:27:58.741\nas just regular characterization as\nthe double quotes that they are.\n\n541\n00:27:58.741 --> 00:28:03.600\nSo all we have to do is use the backslash\ncharacter before our double quotes and\n\n542\n00:28:03.600 --> 00:28:05.244\nthen it will work just fine.\n\n543\n00:28:05.244 --> 00:28:08.310\nSo let's see what that\nlooks like really quickly.\n\n544\n00:28:08.310 --> 00:28:11.864\nEcho, I will say 'I', and I'll say Ron.\n\n545\n00:28:11.864 --> 00:28:18.380\nHow about that, we'll say\nI'm Ron Burgundy, double quotes like that.\n\n546\n00:28:18.380 --> 00:28:21.180\nIf I did it like this, it's gonna stop\nat that first double quote, right?\n\n547\n00:28:21.180 --> 00:28:22.360\nSo I have to negate those out.\n\n548\n00:28:22.360 --> 00:28:28.400\nI'm gonna go back and just use my\nback slash before each one of those\n\n549\n00:28:28.400 --> 00:28:32.870\ndouble quotes and now I should get double\nquotes in the output of the echo commands.\n\n550\n00:28:32.870 --> 00:28:34.776\nLet's hit that off, fire it off.\n\n551\n00:28:34.776 --> 00:28:40.060\nAnd you'll notice now, here we go,\nRon is quotationed, just like we like.\n\n552\n00:28:40.060 --> 00:28:44.870\nSo, just be aware there are some tricks\nand tips to using when you're bounding\n\n553\n00:28:44.870 --> 00:28:47.780\nwith those single quotes and double quotes\nthat you've got to get familiarized.\n\n554\n00:28:47.780 --> 00:28:51.430\nTypically that's what you're gonna\nbe doing when it comes to that.\n\n555\n00:28:51.430 --> 00:28:54.210\n&gt;&gt; That's something we're going to\nrun into throughout the whole series.\n\n556\n00:28:54.210 --> 00:28:56.230\nYou write a script file that\nyou've got to watch out for\n\n557\n00:28:56.230 --> 00:28:59.170\nthe special characters, they can really\nchange the way a script behaves.\n\n558\n00:28:59.170 --> 00:29:01.600\nThey can cause the script to\ninterrupt half way through and\n\n559\n00:29:01.600 --> 00:29:02.970\nwho knows what behavior ends up there?\n\n560\n00:29:02.970 --> 00:29:05.740\nSo we got to pay attention to that, we've\ngot to keep track of it, we've got to make\n\n561\n00:29:05.740 --> 00:29:09.730\nsure we escape out, or negate like\nDaniel showed us to make sure that runs.\n\n562\n00:29:09.730 --> 00:29:12.670\nBut Daniel, at this point I think we got\na pretty good handle on how to create\n\n563\n00:29:12.670 --> 00:29:13.540\na basic script.\n\n564\n00:29:13.540 --> 00:29:17.430\nWe haven't done anything earth-shattering\nor mind-blowing yet but-\n\n565\n00:29:17.430 --> 00:29:19.975\n&gt;&gt; This is the entirety of the show.\n\n566\n00:29:19.975 --> 00:29:21.180\n&gt;&gt; [LAUGH]\n&gt;&gt; But it is important just\n\n567\n00:29:21.180 --> 00:29:22.750\nto even know how to get started, right?\n\n568\n00:29:22.750 --> 00:29:24.190\n&gt;&gt; Yeah.\n&gt;&gt; And I think we got a pretty good grasp\n\n569\n00:29:24.190 --> 00:29:25.010\nof that right now.\n\n570\n00:29:25.010 --> 00:29:27.340\nDid you have any other things you wanted\nto mention before we wrap this one up?\n\n571\n00:29:27.340 --> 00:29:30.660\n&gt;&gt; No just get familiar with\nthat formatting.,Remember,\n\n572\n00:29:30.660 --> 00:29:34.070\nyou gotta put in the shebang at\nthe very beginning of each script.\n\n573\n00:29:34.070 --> 00:29:36.880\nif you don't do that then you gotta do\nlike what Don talked about and you have to\n\n574\n00:29:36.880 --> 00:29:40.020\nsay, bash my script name,otherwise\nit's not gonna know what to do.\n\n575\n00:29:40.020 --> 00:29:43.620\nAnd so yeah, it's got a bunch of cool\ncommands here Who would you like for\n\n576\n00:29:43.620 --> 00:29:44.870\nit to run?\n\n577\n00:29:44.870 --> 00:29:46.210\nSo always put that,\n\n578\n00:29:46.210 --> 00:29:48.810\nwhat we call the shebang at the beginning\nof every one of your lines.\n\n579\n00:29:48.810 --> 00:29:52.140\nDon't forget to make them executable or\nthey're not gonna run as well.\n\n580\n00:29:52.140 --> 00:29:55.110\nThat's typically some of the, if you're\nnew to this, that's some of the reasons\n\n581\n00:29:55.110 --> 00:29:57.750\nthat people start stumbling,\ngoing why isn't this running?\n\n582\n00:29:57.750 --> 00:29:58.880\nWhat's the problem?\n\n583\n00:29:58.880 --> 00:30:01.810\nThose two things right there,\nprobably tip of that iceberg.\n\n584\n00:30:01.810 --> 00:30:04.170\n&gt;&gt; All right, well that's a pretty\ngood spot for us to wrap it up.\n\n585\n00:30:04.170 --> 00:30:05.070\nThank you, Daniel.\n\n586\n00:30:05.070 --> 00:30:06.320\nAnd like I said,\n\n587\n00:30:06.320 --> 00:30:10.430\nthat was a pretty good glimpse at how to\nbuild a basic script and get our start.\n\n588\n00:30:10.430 --> 00:30:13.460\nAnd stay tuned because we're gonna\ncontinue on with this as we go through\n\n589\n00:30:13.460 --> 00:30:15.940\nthe whole rest of this series and learn\nnot just how to create a basic script,\n\n590\n00:30:15.940 --> 00:30:18.260\nbut really how to get some work done,\nright?\n\n591\n00:30:18.260 --> 00:30:19.870\nWhat was Elvis Presley's quote?\n\n592\n00:30:19.870 --> 00:30:21.303\nTaking care of business.\n\n593\n00:30:21.303 --> 00:30:23.360\n&gt;&gt; [LAUGH]\n&gt;&gt; We're gonna TCB with our scripts.\n\n594\n00:30:23.360 --> 00:30:25.250\nIt's definitely coming up.\n\n595\n00:30:25.250 --> 00:30:27.580\nBut for right now, this is a good\nthought for us to wrap it up.\n\n596\n00:30:27.580 --> 00:30:29.040\nSo signing off for ITProTV.\n\n597\n00:30:29.040 --> 00:30:30.730\nI've been your host Don Pezet.\n\n598\n00:30:30.730 --> 00:30:31.760\n&gt;&gt; And I'm Daniel Lowrie.\n\n599\n00:30:31.760 --> 00:30:32.771\n&gt;&gt; And we will see you next time.\n\n600\n00:30:32.771 --> 00:30:40.566\n[MUSIC]\n\n601\n00:30:40.566 --> 00:30:47.890\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "236471701"
        }
      ],
      "title": "Basic Script Building"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don take a look at using variables in your shell scripts. Here they will look at defining what variables are, the difference between environmental and user defined variables, employing Command Substitution, and working with/around sub-shells.",
          "length": "1496",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-2-1-1-using-variables-100217-PGM.00_25_29_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-2-1-1-using-variables-100217-PGM.00_25_29_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-2-1-1-using-variables-100217-PGM.00_25_29_14.Still001-sm.jpg",
          "title": "Using Variables",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:01.190\nWelcome to ITPRO.TV.\n\n2\n00:00:01.190 --> 00:00:02.880\nI'm your host Don Pezet.\n\n3\n00:00:06.873 --> 00:00:12.890\n[CROSSTALK]\n&gt;&gt; Your watching ITPRO.TV.\n\n4\n00:00:12.890 --> 00:00:15.420\n&gt;&gt; All right good morning,\ngood afternoon and good evening.\n\n5\n00:00:15.420 --> 00:00:17.520\nAnd welcome back to another\nepisode of ITPRO.TV.\n\n6\n00:00:17.520 --> 00:00:19.220\nI'm your host Don Pezet.\n\n7\n00:00:19.220 --> 00:00:22.210\nBack again with another episode\nof Linux Shell Scripting Basics.\n\n8\n00:00:22.210 --> 00:00:25.130\nAnd boy,\nhave we got a nail biter lined up today.\n\n9\n00:00:25.130 --> 00:00:27.510\nWe're gonna be diving right back into\nthe world of writing scripts and\n\n10\n00:00:27.510 --> 00:00:30.550\ndoing amazing things,\nall in automated fashion.\n\n11\n00:00:30.550 --> 00:00:32.420\nAnd here to help us with that,\nMr. Daniel Lowrie.\n\n12\n00:00:32.420 --> 00:00:33.530\nDaniel, thanks for joining us.\n\n13\n00:00:33.530 --> 00:00:34.890\n&gt;&gt; Don, I'm so glad to be back.\n\n14\n00:00:34.890 --> 00:00:37.940\nYes, we are definitely diving\nback into more shell scripting.\n\n15\n00:00:37.940 --> 00:00:39.580\nAnd if you watched the previous episode,\n\n16\n00:00:39.580 --> 00:00:42.841\nyou might be thinking we've reached\nthe zenith of shell scripting.\n\n17\n00:00:42.841 --> 00:00:44.494\n&gt;&gt; [LAUGH]\n&gt;&gt; You've thrown some commands,\n\n18\n00:00:44.494 --> 00:00:46.246\nyou put the shebang, and\nyour off to the races.\n\n19\n00:00:46.246 --> 00:00:47.900\nIt's amazing, it's wonderful.\n\n20\n00:00:47.900 --> 00:00:48.560\nAnd to be honest with you,\n\n21\n00:00:48.560 --> 00:00:51.620\nyou could probably get a lot of work\ndone with just that little bit.\n\n22\n00:00:51.620 --> 00:00:55.589\nBut there's more to it and you can get\na lot more work done if we continue\n\n23\n00:00:55.589 --> 00:00:58.500\nto build off of the foundation\nwe've already set.\n\n24\n00:00:58.500 --> 00:00:59.590\nSo that's what we're gonna do today.\n\n25\n00:00:59.590 --> 00:01:02.820\nToday we're gonna look at variables.\n\n26\n00:01:02.820 --> 00:01:04.830\nVariables, they're so much fun Don.\n\n27\n00:01:04.830 --> 00:01:06.679\nThe start with a V they end in ariables.\n\n28\n00:01:07.750 --> 00:01:09.030\nHow better could they be?\n\n29\n00:01:09.030 --> 00:01:12.232\nThey can't and\nthat's what are we gonna do.\n\n30\n00:01:12.232 --> 00:01:13.860\n[LAUGH]\n&gt;&gt; That's quite a build up.\n\n31\n00:01:13.860 --> 00:01:16.053\nI do know that the variables\nare extremely important.\n\n32\n00:01:16.053 --> 00:01:19.590\nWe touch on them on several of\nthe other series where we've done\n\n33\n00:01:19.590 --> 00:01:21.960\nlike command line basic so\nwe're just working with Linux and\n\n34\n00:01:21.960 --> 00:01:23.530\ngeneral cuz there's so\nmany variables there.\n\n35\n00:01:23.530 --> 00:01:26.680\nBut even in the Windows world and Mac\nworld you've got a ton of variables, very,\n\n36\n00:01:26.680 --> 00:01:27.720\nvery important.\n\n37\n00:01:27.720 --> 00:01:31.290\nI know in the scripting world we\nuse these things constantly for\n\n38\n00:01:31.290 --> 00:01:32.520\nall sorts of different stuff.\n\n39\n00:01:32.520 --> 00:01:35.110\nSo let's get started with the basics then.\n\n40\n00:01:35.110 --> 00:01:38.530\nAnd what exactly is a variable and\nwhat do we use it for?\n\n41\n00:01:38.530 --> 00:01:39.660\n&gt;&gt; Yeah, great question.\n\n42\n00:01:39.660 --> 00:01:42.680\nAnd this is a question that plagued me\na lot when I first started getting into\n\n43\n00:01:42.680 --> 00:01:44.459\nscripting, how do I\nwrite scripts using bash\n\n44\n00:01:45.900 --> 00:01:50.060\nI didn't quite understand the concept\nuntil I realized what was happening.\n\n45\n00:01:50.060 --> 00:01:53.690\nBasically, a variable,\nyou think about it as a container.\n\n46\n00:01:53.690 --> 00:01:56.470\nA bowl if you will or a Tupperware.\n\n47\n00:01:56.470 --> 00:01:57.210\nI like that.\n\n48\n00:01:57.210 --> 00:01:59.960\nIt's Tupperware for your scripts.\n\n49\n00:01:59.960 --> 00:02:03.020\nI can put anything I want\ninto that Tupperware,\n\n50\n00:02:03.020 --> 00:02:06.490\nit could be spaghetti, it could be last\nnight's meat loaf anything I want.\n\n51\n00:02:06.490 --> 00:02:11.110\nAnd when I put meatloaf in it, well that\nvariable is now meatloaf, equals meatloaf.\n\n52\n00:02:11.110 --> 00:02:14.585\nBut if I take that out and I put spaghetti\nin it now the variable equals spaghetti.\n\n53\n00:02:14.585 --> 00:02:18.200\nThe name of the variable is the same.\n\n54\n00:02:18.200 --> 00:02:22.930\nBut what the contents that it\nis representing can change.\n\n55\n00:02:22.930 --> 00:02:27.260\nSo it's basically boils down to,\nthat it is a container or\n\n56\n00:02:27.260 --> 00:02:29.620\nstatic or sometimes dynamic.\n\n57\n00:02:29.620 --> 00:02:32.070\nIt's still changeable,\nbut it might not change.\n\n58\n00:02:32.070 --> 00:02:33.790\nTherefore it's dynamic in that way.\n\n59\n00:02:33.790 --> 00:02:38.660\nBut typically, other way around,\nstatic means it doesn't change.\n\n60\n00:02:38.660 --> 00:02:39.820\nDynamic means it does change.\n\n61\n00:02:39.820 --> 00:02:42.710\nTypically, it is dynamic, it will change.\n\n62\n00:02:42.710 --> 00:02:44.790\nSometimes not,\ncuz you just want to set that.\n\n63\n00:02:44.790 --> 00:02:47.630\nBut I can use that variable\nthroughout my script, and\n\n64\n00:02:47.630 --> 00:02:51.500\nany time I need to make a change to\nwhat that variable is containing\n\n65\n00:02:51.500 --> 00:02:53.570\nI just do that right there\nwhere it's declared.\n\n66\n00:02:53.570 --> 00:02:57.710\nNow also on my script that variable\nmeans something new to the script.\n\n67\n00:02:57.710 --> 00:03:00.720\nIt's a very, very handy and it's something\n\n68\n00:03:00.720 --> 00:03:04.470\nthat actually unleashes a lot of power\ninside of our scripting language.\n\n69\n00:03:04.470 --> 00:03:05.890\n&gt;&gt; Now you mention changes, right.\n\n70\n00:03:05.890 --> 00:03:08.740\nAnd I know if I put that\nmeatloaf in the Tupperware and\n\n71\n00:03:08.740 --> 00:03:09.830\nI stick it in the refrigerator.\n\n72\n00:03:09.830 --> 00:03:12.147\nAfter a few weeks,\nit's not exactly meatloaf anymore.\n\n73\n00:03:12.147 --> 00:03:12.740\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n74\n00:03:12.740 --> 00:03:16.140\nwith this variables do they only\nchange when we change them or\n\n75\n00:03:16.140 --> 00:03:17.544\nthey change on their own?\n\n76\n00:03:17.544 --> 00:03:20.570\n&gt;&gt; No, typically they will\nchange only when we change them.\n\n77\n00:03:20.570 --> 00:03:25.055\nWe gonna say, this is going to be this and\nmaybe later down the script we will change\n\n78\n00:03:25.055 --> 00:03:29.800\nit again and say you know what I want to\ndo that variable to now equal to this.\n\n79\n00:03:29.800 --> 00:03:31.360\nAnd it will change there.\n\n80\n00:03:31.360 --> 00:03:34.556\nThey don't change on their\nown as far as I can think of,\n\n81\n00:03:34.556 --> 00:03:37.410\nat least not in my estimation.\n\n82\n00:03:37.410 --> 00:03:40.460\nThey are for us,\nwe are users we are creating and\n\n83\n00:03:40.460 --> 00:03:44.650\nthey are our variables,\nthey gonna be what we tell them to be.\n\n84\n00:03:44.650 --> 00:03:48.653\nNow there are, let me back up a little\nbit, there are some predefined variables\n\n85\n00:03:48.653 --> 00:03:51.243\nin your system that you may\nuse inside your script.\n\n86\n00:03:51.243 --> 00:03:53.363\nThey call these\nenvironmental variables and\n\n87\n00:03:53.363 --> 00:03:56.920\n[INAUDIBLE] over these quiet extensively\nin our Linux Commandline Shell.\n\n88\n00:03:56.920 --> 00:04:00.910\nSo if you need more information on that,\njust jump over that shell and\n\n89\n00:04:00.910 --> 00:04:02.190\nwatch that episode.\n\n90\n00:04:02.190 --> 00:04:05.460\nBut I just wanted to make sure that you\nguys out there were aware that they do\n\n91\n00:04:05.460 --> 00:04:12.080\nexist and use them in our scripts,\nalongside of our user-created variables.\n\n92\n00:04:12.080 --> 00:04:15.210\nLet's just take a look really quickly at\nsome of them that we might typically use\n\n93\n00:04:15.210 --> 00:04:18.372\nin scripts, so\nyou have some familiarity there.\n\n94\n00:04:18.372 --> 00:04:21.390\nMy screen, we can use the echo command\nto actually see what these are.\n\n95\n00:04:21.390 --> 00:04:28.000\nIf I echo some of these things,\nsome of my favorites are $PATH, like that.\n\n96\n00:04:28.000 --> 00:04:29.210\nThis is the path variable.\n\n97\n00:04:29.210 --> 00:04:36.340\nAny executable inside of these that\nare directories it will execute them.\n\n98\n00:04:36.340 --> 00:04:39.600\nYou don't need to give the full path name.\n\n99\n00:04:39.600 --> 00:04:42.170\nIt sees the path name\nthrough the path variable.\n\n100\n00:04:42.170 --> 00:04:46.460\nThe bash interpreter will say, I can look\nto these directories and use them so\n\n101\n00:04:46.460 --> 00:04:48.680\nmaybe I want to add that into my script.\n\n102\n00:04:48.680 --> 00:04:53.360\nMaybe I want to change that variable\nin my script for whatever reasons and\n\n103\n00:04:53.360 --> 00:04:54.920\nthen change it back.\n\n104\n00:04:54.920 --> 00:04:56.760\nSo these are things that we might do.\n\n105\n00:04:56.760 --> 00:04:58.416\nOther ones that we have.\n\n106\n00:04:58.416 --> 00:04:59.830\n$USER.\n\n107\n00:04:59.830 --> 00:05:01.954\nEcho helps.\n\n108\n00:05:01.954 --> 00:05:06.740\n$USER tells you what user you\nare currently logged in as.\n\n109\n00:05:06.740 --> 00:05:08.670\nWe also have the home,\n\n110\n00:05:10.000 --> 00:05:15.010\necho $HOME tells me my home directory,\nof the the person I'm logged in as.\n\n111\n00:05:15.010 --> 00:05:16.250\nSo very good.\n\n112\n00:05:16.250 --> 00:05:20.540\nAnd then another one, every now and\nthen we'll use echo $UID,\n\n113\n00:05:20.540 --> 00:05:24.650\nwhich is the user ID,\nthat's my user ID, 1000.\n\n114\n00:05:24.650 --> 00:05:29.790\nSometimes you will work with those UIDs\ninside of scripts for doing various tasks.\n\n115\n00:05:29.790 --> 00:05:32.200\nIf you wanna be aware of all of them,\nthough,\n\n116\n00:05:32.200 --> 00:05:37.138\nyou can just do printenv and\nthat will list out a lot of them.\n\n117\n00:05:37.138 --> 00:05:40.900\nAlso the env command will basically\ngive you a very similar output but\n\n118\n00:05:40.900 --> 00:05:42.390\nwith some modifications.\n\n119\n00:05:42.390 --> 00:05:46.550\nThat'll give you a pretty good list\nof some of the built in environmental\n\n120\n00:05:46.550 --> 00:05:50.030\nvariables that are inside of your system\nso that you can use them in your script\n\n121\n00:05:50.030 --> 00:05:53.070\nand not have to reinvent the wheel,\nyou can just grab from out of there.\n\n122\n00:05:53.070 --> 00:05:56.670\nAll right, now let's talk again about\nuser variables, cuz that's different.\n\n123\n00:05:56.670 --> 00:06:00.110\nUser variables are variables\nthat we create as users, and\n\n124\n00:06:00.110 --> 00:06:01.450\nI can do this from the command line.\n\n125\n00:06:01.450 --> 00:06:04.280\nWe saw this in our command lines series.\n\n126\n00:06:04.280 --> 00:06:06.250\nI can just say,\nI want to create a variable.\n\n127\n00:06:06.250 --> 00:06:07.210\nI'll call it var1.\n\n128\n00:06:07.210 --> 00:06:09.600\nLet me clear my screen.\n\n129\n00:06:09.600 --> 00:06:17.180\nVar1 = and whatever I wanted\nequal I can make it say funzies.\n\n130\n00:06:19.250 --> 00:06:24.200\nAnd now if I echo $var1,\nonce you've declared variably\n\n131\n00:06:24.200 --> 00:06:28.580\nyou have to have that\ndollar sign subsequently.\n\n132\n00:06:28.580 --> 00:06:31.000\nAfter that if you want to call or\nreference it.\n\n133\n00:06:31.000 --> 00:06:33.150\nI wanna reference\nthe variable I've created.\n\n134\n00:06:33.150 --> 00:06:36.320\nJust add that dollar sign and\nthen whatever the variable name was.\n\n135\n00:06:36.320 --> 00:06:39.430\nAnd then you'll correct\nthe reference that variable.\n\n136\n00:06:39.430 --> 00:06:42.945\nSo if I echo var1,\nit says funzies right there.\n\n137\n00:06:44.265 --> 00:06:46.185\nAnd badda ding, very, very simple.\n\n138\n00:06:46.185 --> 00:06:48.415\nthat is a user-created variable.\n\n139\n00:06:48.415 --> 00:06:51.763\n&gt;&gt; Now you've populated that variable\nwith the word funzies, right?\n\n140\n00:06:51.763 --> 00:06:52.745\n&gt;&gt; Yeah [LAUGH].\n&gt;&gt; [LAUGH] And so\n\n141\n00:06:52.745 --> 00:06:55.865\nif we decided to change that,\nhow do we go about replacing the variable?\n\n142\n00:06:55.865 --> 00:06:57.855\nDo we have to delete var1 and\nthen recreate it?\n\n143\n00:06:57.855 --> 00:06:58.735\n&gt;&gt; Yeah, great question.\n\n144\n00:06:58.735 --> 00:07:01.745\nNo, you just say,\nI want var1 to equal this.\n\n145\n00:07:01.745 --> 00:07:07.010\nEvery time you say var1 equals something,\nevery time you do it it's going to change.\n\n146\n00:07:07.010 --> 00:07:10.480\nAnd say, okay, now var1 equals this\nnew thing he's told me it is, or\n\n147\n00:07:10.480 --> 00:07:13.130\nthis new thing that she says\nthat she wants it to be.\n\n148\n00:07:13.130 --> 00:07:16.500\nSo, if I wanted to change\nthis to superfunzies,\n\n149\n00:07:16.500 --> 00:07:24.090\nI could say var1=superfunzies.\n\n150\n00:07:24.090 --> 00:07:30.460\nAnd enter and then echo $var1 and\nnow you see it equals superfunzies.\n\n151\n00:07:30.460 --> 00:07:34.020\nNow, I choose it on this\nbecause I wanted to build up,\n\n152\n00:07:34.020 --> 00:07:38.030\nI wanted to segway into the next\ntype of a variable which is a,\n\n153\n00:07:38.030 --> 00:07:42.480\nnot just a single string,\nnot just one word single word strings.\n\n154\n00:07:42.480 --> 00:07:44.210\nA lot of times we have multi word strings.\n\n155\n00:07:44.210 --> 00:07:47.110\nMaybe I want a sentence\nto be the variable.\n\n156\n00:07:47.110 --> 00:07:49.800\nI always want to be this or\na path name or something like that.\n\n157\n00:07:49.800 --> 00:07:53.796\nSomething that might have spaces in it or\nquotes or who knows what else.\n\n158\n00:07:53.796 --> 00:07:58.878\nWe can do that by adding our quotation\nboundaries so that's gonna be of help for\n\n159\n00:07:58.878 --> 00:08:03.043\nus if I wanna change var1 We'll\ndo the whole Hello World thing.\n\n160\n00:08:03.043 --> 00:08:05.507\nIt's not scripting shell\nwithout Hello World involved.\n\n161\n00:08:05.507 --> 00:08:13.874\nSo I'll just say var1=\"Hello World\".\n\n162\n00:08:13.874 --> 00:08:16.527\nHit Enter.\n\n163\n00:08:16.527 --> 00:08:23.870\nNow I can echo $var1,\nand it gives me that.\n\n164\n00:08:23.870 --> 00:08:29.806\nSo you have multiple or sentence strings\nthat you wanna put into a variable and\n\n165\n00:08:29.806 --> 00:08:33.260\nyou'll see how this\nworks out in just a bit.\n\n166\n00:08:33.260 --> 00:08:33.920\nThat's how you do it.\n\n167\n00:08:33.920 --> 00:08:36.460\nYou add those quotations around it and\nnow it goes okay,\n\n168\n00:08:36.460 --> 00:08:40.730\nthis is everything you want me\nto have inside of my variable.\n\n169\n00:08:40.730 --> 00:08:44.990\nI will now bound that and\nput that in there in that container.\n\n170\n00:08:44.990 --> 00:08:47.600\n&gt;&gt; In the last episode we talked a little\nbit about how we had to be careful if\n\n171\n00:08:47.600 --> 00:08:51.170\nthere were special characters in a value\nthat we were kinda working with.\n\n172\n00:08:51.170 --> 00:08:55.320\nAnd it was in the command line, but\ndoes that hold true in a variable as well?\n\n173\n00:08:55.320 --> 00:08:57.750\n&gt;&gt; I would say typically yes.\n\n174\n00:08:57.750 --> 00:09:00.860\nYou definitely want to make sure that if\n\n175\n00:09:00.860 --> 00:09:03.830\nI'm using these quotations that I use\nanother quotation, cuz think about it.\n\n176\n00:09:03.830 --> 00:09:05.150\nIf I quote and\n\n177\n00:09:05.150 --> 00:09:08.920\nthen end quote something, it's reading\nfrom left to right just like you and I do,\n\n178\n00:09:08.920 --> 00:09:13.930\nexcept it goes I've found the end of\nmy quotation, and this is what I have.\n\n179\n00:09:13.930 --> 00:09:14.980\nSo we can mess those up.\n\n180\n00:09:14.980 --> 00:09:19.000\nYou gotta use those negaters, just like\nwe did with the echo command just in case\n\n181\n00:09:20.060 --> 00:09:22.730\nyou have those,\nyou wanna use quotes inside it.\n\n182\n00:09:22.730 --> 00:09:23.990\nSingle quotes, double quotes,\n\n183\n00:09:23.990 --> 00:09:26.383\nthe whole thing re-applies back\ninto your variable strings.\n\n184\n00:09:26.383 --> 00:09:29.376\n&gt;&gt; All right, now what you've done so\nfar is you've created a variable and\n\n185\n00:09:29.376 --> 00:09:31.672\nyou stuck some text in it,\nwhich is very exciting but-\n\n186\n00:09:31.672 --> 00:09:32.480\n&gt;&gt; [LAUGH]\n\n187\n00:09:32.480 --> 00:09:33.820\n&gt;&gt; That's not the only place we can get\n\n188\n00:09:33.820 --> 00:09:34.810\nthis data from, right?\n\n189\n00:09:34.810 --> 00:09:36.700\nWe can get data from\na number of other places and\n\n190\n00:09:36.700 --> 00:09:38.068\nstore it into a variable as well.\n\n191\n00:09:38.068 --> 00:09:39.440\n&gt;&gt; That's still correct.\n\n192\n00:09:39.440 --> 00:09:41.340\nWe can also put numbers in there.\n\n193\n00:09:41.340 --> 00:09:43.658\nNumbers are a great thing that\nwe can have as variables.\n\n194\n00:09:43.658 --> 00:09:49.090\nWe'll use these inside of more structured\ncommands, to where the variable\n\n195\n00:09:49.090 --> 00:09:54.060\nholding a number value that might change\nbased on some commands that complete,\n\n196\n00:09:54.060 --> 00:09:56.910\nand then that will affect our\nscript one way or another.\n\n197\n00:09:56.910 --> 00:10:00.740\nSo they really become handy, and it's\njust as simple as what we've seen so far.\n\n198\n00:10:00.740 --> 00:10:02.510\nI just wanna put a number in there.\n\n199\n00:10:02.510 --> 00:10:07.370\nI can do it this way and\njust say var1=22, Enter,\n\n200\n00:10:07.370 --> 00:10:11.370\necho var1, and you'll know this is 22.\n\n201\n00:10:11.370 --> 00:10:15.580\nAnd that is a number value,\nit sees that as a number, an integer, and\n\n202\n00:10:15.580 --> 00:10:19.300\nnot a text string of a character two and\na character two.\n\n203\n00:10:20.890 --> 00:10:24.508\nAs we move on down the road, we could\nperform some sort of mathematical function\n\n204\n00:10:24.508 --> 00:10:26.348\non that because it sees it as an integer.\n\n205\n00:10:26.348 --> 00:10:29.900\nSo it's a very important aspect\nof working with variables.\n\n206\n00:10:29.900 --> 00:10:31.130\nAnd the other way we can get\n\n207\n00:10:32.680 --> 00:10:37.390\nvariable content is through what's\ncalled command substitution.\n\n208\n00:10:37.390 --> 00:10:39.960\nWe will do this quite extensively.\n\n209\n00:10:39.960 --> 00:10:41.470\nIt is a very great thing.\n\n210\n00:10:41.470 --> 00:10:44.635\nIt's one of my most favorite things\nthat we can use with variables.\n\n211\n00:10:44.635 --> 00:10:50.330\nIs to say I wanna take the output of\na command and pump that into a variable.\n\n212\n00:10:50.330 --> 00:10:52.660\nAnd now I don't have to use that,\nmaybe, Don,\n\n213\n00:10:52.660 --> 00:10:55.299\nI don't know if you worked\nwith Linux a little while.\n\n214\n00:10:55.299 --> 00:10:58.210\nDo some of the commands\nget rather lengthy?\n\n215\n00:10:58.210 --> 00:11:01.615\n&gt;&gt; They really do, and\ntheir output can be really difficult and\n\n216\n00:11:01.615 --> 00:11:03.032\nunwieldy as well, too.\n\n217\n00:11:03.032 --> 00:11:05.950\nSo a lot of times you have to\nmanipulate that and it's a challenge.\n\n218\n00:11:05.950 --> 00:11:08.338\n&gt;&gt; Right,\nimagine if I did that whole disk usage.\n\n219\n00:11:08.338 --> 00:11:10.580\nI wanna see that.\n\n220\n00:11:10.580 --> 00:11:12.580\nAnd that's a lot of output.\n\n221\n00:11:12.580 --> 00:11:16.380\nAnd sometimes maybe the input is crazy and\nI'd have to type that over and over and\n\n222\n00:11:16.380 --> 00:11:18.480\nover and over again in my script.\n\n223\n00:11:18.480 --> 00:11:21.340\nI could do it, but\nit wouldn't be a whole lot of fun.\n\n224\n00:11:21.340 --> 00:11:25.700\nIf I just pumped that into a variable,\na var1.\n\n225\n00:11:25.700 --> 00:11:30.900\n$var1 is easy to type,\nor easy to reference.\n\n226\n00:11:30.900 --> 00:11:35.250\nI don't have to work with that big\nblock of output, or big block of input.\n\n227\n00:11:35.250 --> 00:11:37.370\nJust make it into a variable, and\n\n228\n00:11:37.370 --> 00:11:40.640\nnow I can reference that variable\nthroughout my script and still get\n\n229\n00:11:40.640 --> 00:11:44.720\nthe same information without having to\ndo a whole lot of repetitive typing.\n\n230\n00:11:44.720 --> 00:11:47.070\nSo that's really the main thing.\n\n231\n00:11:47.070 --> 00:11:49.240\nLet's take a look at how we can actually\n\n232\n00:11:50.370 --> 00:11:54.790\nuse command substitution as a variable so\nthat you guys can see how that works.\n\n233\n00:11:54.790 --> 00:11:55.925\nLet's drop back to my screen here.\n\n234\n00:11:55.925 --> 00:11:59.880\nThere's actually a couple of\nways in which you can do this.\n\n235\n00:11:59.880 --> 00:12:03.170\nThe first way is by using\nthe backtick character.\n\n236\n00:12:03.170 --> 00:12:06.030\nAnd if you're looking at your standard\nUS keyboard, if you see the number one,\n\n237\n00:12:06.030 --> 00:12:07.925\nsay one, two, three,\nfour, five, six, seven.\n\n238\n00:12:07.925 --> 00:12:11.860\nIt's the row across there near\nthe top of your keyboard.\n\n239\n00:12:11.860 --> 00:12:14.893\nTo the very left the number one\nis typically a little tilde and\n\n240\n00:12:14.893 --> 00:12:18.590\nthen a little character underneath\nthat which is the backtick.\n\n241\n00:12:18.590 --> 00:12:19.860\nIf I add backticks,\n\n242\n00:12:19.860 --> 00:12:24.620\nit will interpret whatever's in between\na set of backticks as a command.\n\n243\n00:12:24.620 --> 00:12:26.233\nSo let's see what does looks like.\n\n244\n00:12:26.233 --> 00:12:31.675\nI can say var1=` like so, and then\nwe'll just throw the date command out,\n\n245\n00:12:31.675 --> 00:12:35.542\nand then another closing\nbacktick like that, right?\n\n246\n00:12:35.542 --> 00:12:41.156\nIf I hit Enter, well,\nnow we've got var1, I can echo$ var1.\n\n247\n00:12:41.156 --> 00:12:43.790\n&gt;&gt; I think you left the 1\noff the variable there.\n\n248\n00:12:43.790 --> 00:12:44.797\n&gt;&gt; Thank you very much, Don.\n&gt;&gt; [LAUGH]\n\n249\n00:12:44.797 --> 00:12:45.773\n&gt;&gt; We'll just call it var then.\n\n250\n00:12:45.773 --> 00:12:50.130\nA second set of eyes never hurt\nanyone when it comes to programming.\n\n251\n00:12:50.130 --> 00:12:51.802\nAnd I tell you what,\nthey do come in helpful.\n\n252\n00:12:51.802 --> 00:12:54.156\n&gt;&gt; And it's easy to accidentally\ncreate a variable like that, and\n\n253\n00:12:54.156 --> 00:12:55.602\nas long as you reference it, it works.\n\n254\n00:12:55.602 --> 00:12:58.053\n&gt;&gt; That's right,\nas long as you reference it right,\n\n255\n00:12:58.053 --> 00:13:01.090\nthe incorrectly written variable,\nit will work just fine.\n\n256\n00:13:01.090 --> 00:13:02.685\nBut he's right, I forgot var1,\nnot a big deal.\n\n257\n00:13:02.685 --> 00:13:04.940\nWe'll just use echo var.\n\n258\n00:13:04.940 --> 00:13:06.260\nAnd here we go.\n\n259\n00:13:06.260 --> 00:13:08.550\nIf I echo var, notice I get the date.\n\n260\n00:13:08.550 --> 00:13:14.630\nSo the var variable has now become\nthe output of the date command.\n\n261\n00:13:14.630 --> 00:13:16.160\nSo backticks work great.\n\n262\n00:13:16.160 --> 00:13:17.626\nThere's one problem with backticks,\nthough.\n\n263\n00:13:17.626 --> 00:13:22.965\nThe problem with backticks is as you start\nwriting scripts and they get more complex,\n\n264\n00:13:22.965 --> 00:13:27.860\nbackticks look a lot like, so here's your\nbacktick character right here, right?\n\n265\n00:13:27.860 --> 00:13:29.000\nHere is a single quote.\n\n266\n00:13:30.310 --> 00:13:32.398\nNot a lot of difference.\n\n267\n00:13:32.398 --> 00:13:34.720\nAnd if we're using backticks for\n\n268\n00:13:34.720 --> 00:13:38.540\ncommand substitution in the variables,\nand we're also using single quotes,\n\n269\n00:13:38.540 --> 00:13:42.530\nmaybe inside of said variables,\nthis can get a little confusing.\n\n270\n00:13:42.530 --> 00:13:46.790\nSo there's a better way to\nthis to make it easier for us.\n\n271\n00:13:46.790 --> 00:13:49.810\nThe outcome is identical,\nthere's no difference.\n\n272\n00:13:49.810 --> 00:13:53.030\nBut it's easier for\nus as people, human beings,\n\n273\n00:13:53.030 --> 00:13:57.560\nto look at the script and say,\nthat's command substitution and\n\n274\n00:13:57.560 --> 00:14:02.310\nnot overlook it, thinking it is\na single quotation mark, okay?\n\n275\n00:14:02.310 --> 00:14:06.465\nSo a better way to do this is to say,\nwill use var1.\n\n276\n00:14:06.465 --> 00:14:13.728\nvar1=$(date).\n\n277\n00:14:13.728 --> 00:14:19.016\nSo $\"\", anything inside that open close\nparentheses will be the command that\n\n278\n00:14:19.016 --> 00:14:24.790\nyou want, the output of the command that\nyou wanna put inside of the variable.\n\n279\n00:14:24.790 --> 00:14:28.930\nSo if I do this and Enter,\nno errors, no problems.\n\n280\n00:14:28.930 --> 00:14:33.890\nI say echo $var1, and\nnow I get my date command.\n\n281\n00:14:33.890 --> 00:14:38.360\nBut that is a better way for\nus because of how we think and\n\n282\n00:14:38.360 --> 00:14:42.940\nour brains work to actually use\ncommand substitutions with variables.\n\n283\n00:14:42.940 --> 00:14:46.092\nBoth will work, and if you like backticks,\nyou think they're the bees' knees,\n\n284\n00:14:46.092 --> 00:14:48.619\nthe greatest thing ever to walk the Earth,\nby all means use them.\n\n285\n00:14:48.619 --> 00:14:52.841\nBut understand that any other person that\nmight be looking at your script could get\n\n286\n00:14:52.841 --> 00:14:56.650\nconfused when they're looking for\nwhat's going on here?\n\n287\n00:14:56.650 --> 00:14:59.250\nAnd they're maybe jumping over\nthose backticks thinking they're\n\n288\n00:14:59.250 --> 00:14:59.960\nsingle quotations.\n\n289\n00:14:59.960 --> 00:15:01.780\nSo they just can be a bit confusing.\n\n290\n00:15:01.780 --> 00:15:04.539\n&gt;&gt; I know for me, I just got in\nthe habit of not using the backticks.\n\n291\n00:15:04.539 --> 00:15:09.860\nBy doing that, you kind of avoid it and\nyou stick with the standard way.\n\n292\n00:15:09.860 --> 00:15:13.432\nI also like that when I put the brackets\naround it, it's kind of my, or\n\n293\n00:15:13.432 --> 00:15:16.760\nthe parentheses, whatever,\nthat's my visual indicator.\n\n294\n00:15:16.760 --> 00:15:19.170\nI can really easily see,\nI'm grabbing from a command.\n\n295\n00:15:19.170 --> 00:15:23.440\nAnd I do it a surprising amount\nbecause things like the date command,\n\n296\n00:15:23.440 --> 00:15:26.670\nevery time you run the date command,\nthe output is different.\n\n297\n00:15:26.670 --> 00:15:31.150\nBecause it's got the time and even the\nseconds in there so it's always changing.\n\n298\n00:15:31.150 --> 00:15:33.900\nAnd if I need it to run at the beginning\nof the script and have a consistent value\n\n299\n00:15:33.900 --> 00:15:37.110\nI use throughout it, it makes sense to\ntake that output, store it in a variable.\n\n300\n00:15:37.110 --> 00:15:40.028\nAnd now we can call it in, and\nusing the dollar sign parenthesis,\n\n301\n00:15:40.028 --> 00:15:42.429\nthat's the only way that I do it and\njust out of habit.\n\n302\n00:15:42.429 --> 00:15:45.400\n&gt;&gt; Right back at you, Don,\non the exact same way I've gotten\n\n303\n00:15:45.400 --> 00:15:49.283\ninto this because it just makes it so easy\nfor our eyes to look at the screen and\n\n304\n00:15:49.283 --> 00:15:53.256\ngo, there is some command substitution\nhappening with this variable.\n\n305\n00:15:53.256 --> 00:15:56.437\nAnd I easily recognize that\nbecause of that formatting.\n\n306\n00:15:56.437 --> 00:16:01.012\nSo use any way you like, my suggestion\nis going to be to use the dollar\n\n307\n00:16:01.012 --> 00:16:04.882\nsign with the parentheses just for\nease of readability.\n\n308\n00:16:04.882 --> 00:16:09.704\nAll right, now that brings us to one more\nthing that we need to talk about when it\n\n309\n00:16:09.704 --> 00:16:13.961\ncomes to working in a script\nenvironment and with variables as well.\n\n310\n00:16:13.961 --> 00:16:19.073\nThings can get a little convoluted\nbecause of how scripts work.\n\n311\n00:16:19.073 --> 00:16:22.408\nWhen I run a script it actually\ncreates a shell, it opens a shell.\n\n312\n00:16:22.408 --> 00:16:25.925\nCuz by doing them I'm calling the show\nright there at the very first line,\n\n313\n00:16:25.925 --> 00:16:26.899\nstart a shell then.\n\n314\n00:16:26.899 --> 00:16:30.764\nAnd then do these commands,\nthese are called subshells.\n\n315\n00:16:30.764 --> 00:16:34.583\nA problem comes in is when I create a\nsubshell, I don't necessarily have access\n\n316\n00:16:34.583 --> 00:16:38.490\nto any of the variables or\nanything else, only the parent shell.\n\n317\n00:16:38.490 --> 00:16:42.552\nSo especially as I start pumping down,\nI might be creating sub-shell after\n\n318\n00:16:42.552 --> 00:16:46.247\nsub-shell after sub-shell,\nevery time I put something in there.\n\n319\n00:16:46.247 --> 00:16:51.789\nSo I could be losing and\nbreaking my scripts is what I want to say.\n\n320\n00:16:51.789 --> 00:16:55.888\nI could be breaking my script\nbecause I'm spawning shells.\n\n321\n00:16:55.888 --> 00:17:00.354\nSo I need to be careful in the way\nI actually create my scripts.\n\n322\n00:17:00.354 --> 00:17:02.932\nSo that everything has access\nto everything that it needs.\n\n323\n00:17:02.932 --> 00:17:08.588\nSo let's take a look at this and\nhow that might work itself out.\n\n324\n00:17:08.588 --> 00:17:09.453\nLet's take a look at an example.\n\n325\n00:17:09.453 --> 00:17:11.827\nI'm gonna clear really quickly.\n\n326\n00:17:11.827 --> 00:17:18.876\nAnd I've got this one script called\nsubShell.sh, and here we go.\n\n327\n00:17:18.876 --> 00:17:22.990\nYou'll see there's my shebang,\nI've got a variable that equals 10.\n\n328\n00:17:22.990 --> 00:17:25.598\nAnd then I'm calling another shell.\n\n329\n00:17:25.598 --> 00:17:29.973\nAnd I'm echoing var 1 which we created\nhere, right, dollar sign var 1.\n\n330\n00:17:29.973 --> 00:17:33.092\nSo just like what we've been doing\nexcept I've spawned another shell for\n\n331\n00:17:33.092 --> 00:17:36.427\nwhatever reason, this is all obviously\ntheoretical purposes at this point.\n\n332\n00:17:36.427 --> 00:17:37.850\n&gt;&gt; Yeah, in Daniel's example he has\n\n333\n00:17:37.850 --> 00:17:39.421\nvery clearly calling- [CROSSTALK]\n&gt;&gt; Yes.\n\n334\n00:17:39.421 --> 00:17:40.200\n&gt;&gt; Another shell.\n\n335\n00:17:40.200 --> 00:17:41.442\nSometimes we do it by accident.\n\n336\n00:17:41.442 --> 00:17:43.647\nSometimes there's other\nthings that we can launch,\n\n337\n00:17:43.647 --> 00:17:46.734\nlike calling another script from within\nour first script that can launch or\n\n338\n00:17:46.734 --> 00:17:48.601\nspawn a subshell without\nus even knowing it.\n\n339\n00:17:48.601 --> 00:17:52.455\nSo, where I normally run into this is\nI'm trying to query some variable and\n\n340\n00:17:52.455 --> 00:17:54.972\nit's not working like what\nthe heck is going on?\n\n341\n00:17:54.972 --> 00:17:58.689\nAnd I start look okay, where have I\naccidentally spawned another shell and\n\n342\n00:17:58.689 --> 00:18:01.700\nit certainly happens sometimes\nnot as literal as like here.\n\n343\n00:18:01.700 --> 00:18:06.592\n&gt;&gt; Right, right, this is for demonstrative\npurposes that you can see how this\n\n344\n00:18:06.592 --> 00:18:10.730\nworks itself out and\nwhat happens when this does occur, right.\n\n345\n00:18:10.730 --> 00:18:16.049\nSo if I echo var 1 in the exits\nwhat's gonna happen, right?\n\n346\n00:18:16.049 --> 00:18:20.496\nSo let's do this, get out there and\n\n347\n00:18:20.496 --> 00:18:26.136\nwe were wrong subshell, subshell passage.\n\n348\n00:18:26.136 --> 00:18:28.688\nAnd there we go, well nothing,\ndidn't do anything\n\n349\n00:18:28.688 --> 00:18:29.379\n&gt;&gt; [LAUGH]\n\n350\n00:18:29.379 --> 00:18:30.322\n&gt;&gt; That's the problem.\n\n351\n00:18:30.322 --> 00:18:34.108\nI'm supposed to be saying whatever\nthe heck is inside of var one and\n\n352\n00:18:34.108 --> 00:18:35.668\nit's not showing it to me?\n\n353\n00:18:35.668 --> 00:18:37.250\nThere's something wrong with my script.\n\n354\n00:18:37.250 --> 00:18:41.814\nIt's because whatever command\nI use might have been spawning\n\n355\n00:18:41.814 --> 00:18:45.070\na sub-shell when I echoed and\nthere you go.\n\n356\n00:18:45.070 --> 00:18:49.076\nI've actually put the echo command inside\nof that subshell instead of inside of\n\n357\n00:18:49.076 --> 00:18:52.382\nthe shell that it should be in so\nthat I can effectively call that.\n\n358\n00:18:52.382 --> 00:18:54.788\nSo let's take a look at\nhow we can work with that,\n\n359\n00:18:54.788 --> 00:18:58.290\nmake it look a little bit better and\nwork a little bit better.\n\n360\n00:18:58.290 --> 00:19:01.995\nLet me take a look at subshell two and\nlet's see how it works.\n\n361\n00:19:01.995 --> 00:19:03.890\nFirst thing I'm gonna do is\nI'm gonna define a variable.\n\n362\n00:19:03.890 --> 00:19:10.778\nI'm going to say shell one equals\nbecause we're in a shell right now,\n\n363\n00:19:10.778 --> 00:19:16.283\nright, shell one equals\nI'll say shell 1 Rocks, so.\n\n364\n00:19:16.283 --> 00:19:21.971\nAnd we'll type that out and then we will,\nlet's take a look at the script.\n\n365\n00:19:21.971 --> 00:19:27.485\nI'll say, via,\n\n366\n00:19:27.485 --> 00:19:34.104\nsubShell_2.sh.\n\n367\n00:19:34.104 --> 00:19:38.112\nHere we go, inside my shell I\nhave defined a variable, right.\n\n368\n00:19:38.112 --> 00:19:40.374\nShell2, Shell2 is better, right?\n\n369\n00:19:40.374 --> 00:19:42.489\nShell1 may rock, Shell2 is better.\n\n370\n00:19:42.489 --> 00:19:47.107\nAnd then I'm echoing, this is shell2,\na subshell of shell1, right?\n\n371\n00:19:47.107 --> 00:19:50.982\nAnd then echo here is the contents\nof the shell2 variable.\n\n372\n00:19:50.982 --> 00:19:52.717\nEcho here is the contents\nof the shell1 variable.\n\n373\n00:19:52.717 --> 00:19:58.163\nSo I've defined 2 variables, But\nI've done it in two different shells,\n\n374\n00:19:58.163 --> 00:20:02.234\nso that is going to cause some\nhavoc in my script, okay.\n\n375\n00:20:02.234 --> 00:20:09.109\nSo let's get out of here,\nlet's run./subshell_2.sh and\n\n376\n00:20:09.109 --> 00:20:15.510\nyou'll notice it says this\nshell 2 a sub shell of shell 1.\n\n377\n00:20:15.510 --> 00:20:19.106\nAs when I ran my script,\nit's on the subshell.\n\n378\n00:20:19.106 --> 00:20:21.769\nIt got that variable from the script and\nsays,\n\n379\n00:20:21.769 --> 00:20:25.810\nhere's the content of the shell\ntwo variable, the shell is better.\n\n380\n00:20:25.810 --> 00:20:27.436\nThat's exactly what we need is.\n\n381\n00:20:27.436 --> 00:20:30.822\nBut when it says here's the contents of\nthe shell one variable even though it is\n\n382\n00:20:30.822 --> 00:20:32.300\nproperly referenced.\n\n383\n00:20:32.300 --> 00:20:37.071\nAgain, it is not seeing it\nbecause it's in that subshell.\n\n384\n00:20:37.071 --> 00:20:41.828\nI would have to put all these\nvariables in the script to\n\n385\n00:20:41.828 --> 00:20:46.430\nmake sure that shell\nproperly reference them.\n\n386\n00:20:46.430 --> 00:20:50.958\nOr I have to put the variable that I\ncreated in a place that is globally\n\n387\n00:20:50.958 --> 00:20:55.973\nreference by every shell no matter what,\nand that would save the problem.\n\n388\n00:20:55.973 --> 00:20:59.045\nThe best thing to do especially as\nwe're starting out we'll see different\n\n389\n00:20:59.045 --> 00:21:01.448\nstuff as we continue along but\nthat's just starting out.\n\n390\n00:21:01.448 --> 00:21:06.250\nAny user defined variables that you create\nI recommend just putting them at the top\n\n391\n00:21:06.250 --> 00:21:10.610\nof your script as we go through\nthe script put them in the script.\n\n392\n00:21:10.610 --> 00:21:13.957\nAnd if they're gonna be globally\nrecognized by everything in the script,\n\n393\n00:21:13.957 --> 00:21:16.238\nmake sure that they are right\nthere at the very top,\n\n394\n00:21:16.238 --> 00:21:17.692\nit can keep you out of the weeds.\n\n395\n00:21:17.692 --> 00:21:20.272\n&gt;&gt; All right Daniel, so just for\nthe sake of completeness,\n\n396\n00:21:20.272 --> 00:21:22.548\nyou mentioned making a variable global,\nright?\n\n397\n00:21:22.548 --> 00:21:23.472\nIs that a hard thing to do?\n\n398\n00:21:23.472 --> 00:21:24.443\n&gt;&gt; It's not really difficult.\n\n399\n00:21:24.443 --> 00:21:27.738\nThere's some places that you can put\ninside the file system that look for\n\n400\n00:21:27.738 --> 00:21:30.022\nglobal variables,\ndefining global variables.\n\n401\n00:21:30.022 --> 00:21:32.422\nBut an easy way to do it is\njust using the export command.\n\n402\n00:21:32.422 --> 00:21:36.161\nSo if you know you've created, or you're\ngonna jump into a shell and you wanna\n\n403\n00:21:36.161 --> 00:21:39.862\ncreate some global variables that can\nbe used no matter what shell you spawn.\n\n404\n00:21:39.862 --> 00:21:43.102\nYou just throw export in\nfront of the variable, or\n\n405\n00:21:43.102 --> 00:21:46.530\nthe declaration of\nthe variable should I say.\n\n406\n00:21:46.530 --> 00:21:48.799\nSo then it knows no matter\nwhat shell I spawn,\n\n407\n00:21:48.799 --> 00:21:50.904\nI need to be able to access that variable.\n\n408\n00:21:50.904 --> 00:21:54.480\nI'll be showing you very quickly so\nyou can see it, and what it looks like.\n\n409\n00:21:54.480 --> 00:21:58.812\nInstead of doing var1 equals,\n\n410\n00:21:58.812 --> 00:22:04.106\nwe'll do the whole, or I guess it would\n\n411\n00:22:04.106 --> 00:22:09.733\nshell1 equals shell1 rocks, like so.\n\n412\n00:22:09.733 --> 00:22:13.415\nInstead of just doing that, if I just\nadd export at the beginning there.\n\n413\n00:22:13.415 --> 00:22:16.430\nLet's say export like that and hit Enter.\n\n414\n00:22:16.430 --> 00:22:19.875\nNow that will be accessible regardless\nof what shell gets spawned.\n\n415\n00:22:19.875 --> 00:22:24.471\nIt's a quick and easy way to make\nsure that any quickly created user\n\n416\n00:22:24.471 --> 00:22:28.780\nvariable is accessible by globally,\nlet's put it that way.\n\n417\n00:22:28.780 --> 00:22:31.167\n&gt;&gt; Yeah, and you can do that\ninside of your script as well.\n\n418\n00:22:31.167 --> 00:22:33.112\nSo if you know you're gonna\nbe launching subshells, and\n\n419\n00:22:33.112 --> 00:22:34.815\nyou want that variable to\nbe visible throughout,\n\n420\n00:22:34.815 --> 00:22:37.304\njust stick the word export on the\nbeginning and now it will be available.\n\n421\n00:22:37.304 --> 00:22:38.753\nBe careful Daniel you mentioned it,\n\n422\n00:22:38.753 --> 00:22:40.914\nyou said put this stuff at\nthe top of your file, right?\n\n423\n00:22:40.914 --> 00:22:42.289\n&gt;&gt; Yeah.\n&gt;&gt; Which is ensuring it's in\n\n424\n00:22:42.289 --> 00:22:43.490\nthe primary shell.\n\n425\n00:22:43.490 --> 00:22:47.010\nBecause even with the export command\nif you get into a subshell and\n\n426\n00:22:47.010 --> 00:22:51.238\ndefine the variable there, when he sub\nshell closes that variable goes away.\n\n427\n00:22:51.238 --> 00:22:53.534\nSo having it at the top\nmakes sure that is exist and\n\n428\n00:22:53.534 --> 00:22:55.330\nstays even when the sub shells close.\n\n429\n00:22:55.330 --> 00:22:56.763\nIt's an interesting world,\n\n430\n00:22:56.763 --> 00:23:00.199\nmost of us don't have to mess with\nall that optimum subshells can really\n\n431\n00:23:00.199 --> 00:23:03.311\nmake a simple script a lot more\ncomplex if you don't plan for it.\n\n432\n00:23:03.311 --> 00:23:06.543\n&gt;&gt; Yeah, it's funny [INAUDIBLE]\nif you are not prepared.\n\n433\n00:23:06.543 --> 00:23:08.026\nWhat is happening?\n\n434\n00:23:08.026 --> 00:23:09.612\nThis is doing all sorts of crazy things.\n\n435\n00:23:09.612 --> 00:23:14.073\nYou end up going back into your script and\nechoing a bunch of variables at certain\n\n436\n00:23:14.073 --> 00:23:17.350\nspots just to find out where\nis this breaking down?\n\n437\n00:23:17.350 --> 00:23:19.833\nHow do I know what's causing this problem?\n\n438\n00:23:19.833 --> 00:23:22.941\nAnd that's typically the way\nI start testing these things.\n\n439\n00:23:22.941 --> 00:23:25.739\nBut, variables are obviously\nvery powerful.\n\n440\n00:23:25.739 --> 00:23:29.639\nWe're gonna use them a lot throughout\nthis series so get familiar with them,\n\n441\n00:23:29.639 --> 00:23:32.730\ntake a look at this episode\na couple times if necessary.\n\n442\n00:23:32.730 --> 00:23:36.531\nAnd make sure you at least have these\nconcepts that I've laid out for\n\n443\n00:23:36.531 --> 00:23:37.937\nyou in your wheelhouse.\n\n444\n00:23:37.937 --> 00:23:38.856\n&gt;&gt; Awesome.\nWell, Daniel,\n\n445\n00:23:38.856 --> 00:23:40.759\nI think you did a great job of\nrunning us through variables.\n\n446\n00:23:40.759 --> 00:23:42.680\nAnd I know that we're\ngonna see them in each and\n\n447\n00:23:42.680 --> 00:23:44.805\nevery episode throughout\nthe rest of this series.\n\n448\n00:23:44.805 --> 00:23:47.446\nSo a great foundational topic for\neverybody to understand.\n\n449\n00:23:47.446 --> 00:23:50.317\nDo you have any last parting words or\nwe're ready to move on the next class?\n\n450\n00:23:50.317 --> 00:23:54.781\n&gt;&gt; I think that's it, I mean, for the most\npart, we're not gonna get super huge\n\n451\n00:23:54.781 --> 00:23:58.520\ninto variables but we will be\nre-referencing from time to time.\n\n452\n00:23:58.520 --> 00:24:02.664\nSo if you're not really solid on\nhow those variables could work and\n\n453\n00:24:02.664 --> 00:24:04.860\nhow referencing them works.\n\n454\n00:24:04.860 --> 00:24:06.605\nAnd how command substitution works,\n\n455\n00:24:06.605 --> 00:24:09.339\nthen you're gonna have a hard\ntime as we go down the street.\n\n456\n00:24:09.339 --> 00:24:12.894\nSo make sure that that whole command\nsubstitution thing is really keyed away\n\n457\n00:24:12.894 --> 00:24:14.660\ninside of your mind.\n\n458\n00:24:14.660 --> 00:24:15.571\n&gt;&gt; All right, well, ladies and\n\n459\n00:24:15.571 --> 00:24:17.585\ngentlemen that's gonna be a great spot for\nus to wrap this one up.\n\n460\n00:24:17.585 --> 00:24:21.299\nI do hope you stay tuned cuz we've got\nmore of our Linux Shell scripting basic\n\n461\n00:24:21.299 --> 00:24:22.240\nseries coming up.\n\n462\n00:24:22.240 --> 00:24:23.958\nWe're gonna get into\nsome really cool stuff.\n\n463\n00:24:23.958 --> 00:24:26.810\nYou know, our first couple of episodes\nwe see a lot of foundational skills.\n\n464\n00:24:26.810 --> 00:24:31.245\nThe why we do certain things but soon\nwe're gonna get in to the actual doing.\n\n465\n00:24:31.245 --> 00:24:32.749\n&gt;&gt; [LAUGH]\n&gt;&gt; And that's when the real fun kicks off,\n\n466\n00:24:32.749 --> 00:24:33.963\nso definitely stay tuned for that.\n\n467\n00:24:33.963 --> 00:24:37.213\nBut, right now that's about it for\nepisode so signing off for\n\n468\n00:24:37.213 --> 00:24:39.350\nITProTV I've been your host Don Pezet.\n\n469\n00:24:39.350 --> 00:24:40.299\n&gt;&gt; And I'm Daniel Lowrie.\n\n470\n00:24:40.299 --> 00:24:43.251\n&gt;&gt; And we will see you next time.\n\n471\n00:24:43.251 --> 00:24:48.997\n[MUSIC]\n\n472\n00:24:48.997 --> 00:24:52.314\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "236471377"
        }
      ],
      "title": "Using Variables"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don explore using redirection to manipulate data input and output. Here they cover the basics of redirecting command output to a file, redirecting file contents as the input data to commands, here statements, text markers, and piping.",
          "length": "1385",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-1-1-redirection-100317.00_29_01_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-1-1-redirection-100317.00_29_01_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-1-1-redirection-100317.00_29_01_04.Still001-sm.jpg",
          "title": "Redirection",
          "transcript": "WEBVTT\n\n1\n00:00:00.250 --> 00:00:02.106\nWelcome to ITPro TV,\nI'm your host Don Pezet.\n\n2\n00:00:02.106 --> 00:00:06.817\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.817 --> 00:00:08.368\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.368 --> 00:00:11.983\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:11.983 --> 00:00:15.517\n&gt;&gt; All right, good morning,\ngood afternoon, and good evening, and\n\n6\n00:00:15.517 --> 00:00:17.877\nwelcome back to another\nepisode of ITPro TV.\n\n7\n00:00:17.877 --> 00:00:19.262\nI'm your host, Don Pezet,\n\n8\n00:00:19.262 --> 00:00:22.510\nback again with another episode\nof Linux Shell scripting basics.\n\n9\n00:00:22.510 --> 00:00:24.690\nAnd boy, are we gonna get twisted and\n\n10\n00:00:24.690 --> 00:00:27.680\nturned around today because\ntoday's topic is redirection.\n\n11\n00:00:27.680 --> 00:00:30.660\nAnd here to help us with that is Mr.\nDaniel Lowrie, back in the studio with us.\n\n12\n00:00:30.660 --> 00:00:31.600\nDaniel, thanks for joining us.\n\n13\n00:00:31.600 --> 00:00:32.790\n&gt;&gt; Don, I'm so glad to be back.\n\n14\n00:00:32.790 --> 00:00:36.920\nI always enjoy coming here and especially\nany time we get to work with Linux, and\n\n15\n00:00:36.920 --> 00:00:38.640\nespecially the scripting part.\n\n16\n00:00:38.640 --> 00:00:42.590\nI've loved scripting since I've learned\nthat I can actually do that, my mind says,\n\n17\n00:00:42.590 --> 00:00:45.830\nwhat do you mean I can actually\nautomate things, that sounds amazing.\n\n18\n00:00:45.830 --> 00:00:48.501\nNow there are some foundational things\nthat we need to go along to help\n\n19\n00:00:48.501 --> 00:00:49.709\nus to be able to do that better.\n\n20\n00:00:49.709 --> 00:00:53.000\nAnd today like Don said,\nwe are going to talk about redirection.\n\n21\n00:00:53.000 --> 00:00:57.480\nRedirection is an interesting thing\nthat you can do inside your system and\n\n22\n00:00:57.480 --> 00:00:59.940\nit's something that we do a lot\nwhen it comes to our scripts.\n\n23\n00:00:59.940 --> 00:01:02.181\nBecause maybe I wanna\nwrite an actual file,\n\n24\n00:01:02.181 --> 00:01:04.600\nmaybe I wanna put some commands together.\n\n25\n00:01:04.600 --> 00:01:07.710\nThings to that nature and\nthat's what redirection can help us do.\n\n26\n00:01:07.710 --> 00:01:11.080\nSo where do we start, we'll start\nwith the very, very basic which is,\n\n27\n00:01:11.080 --> 00:01:13.590\nwhat the heck is redirection.\n\n28\n00:01:13.590 --> 00:01:17.240\nWell, it's kinda like what it says and\nhopefully you're a bit familiar with this.\n\n29\n00:01:17.240 --> 00:01:19.320\nBasically what we're talking\nabout is taking a command and\n\n30\n00:01:19.320 --> 00:01:22.680\nredirecting it to something else,\nmaybe another command, or maybe a file,\n\n31\n00:01:22.680 --> 00:01:25.286\ntypically, a file is what we're doing.\n\n32\n00:01:25.286 --> 00:01:26.570\nLet's jump on to my\ncomputer really quick and\n\n33\n00:01:26.570 --> 00:01:29.200\nlet me just give you\nthe basics of how that looks.\n\n34\n00:01:29.200 --> 00:01:30.985\nIt basically looks something like this.\n\n35\n00:01:30.985 --> 00:01:35.930\nLet's say command, and\nwe'll redirect into a file, like that.\n\n36\n00:01:35.930 --> 00:01:39.850\nAnd the little operator that we have that\nhelps us do this is this guy right here,\n\n37\n00:01:39.850 --> 00:01:41.850\nthe was the greater than sign.\n\n38\n00:01:41.850 --> 00:01:44.005\nI don't know if there's any\nother actual name for it.\n\n39\n00:01:44.005 --> 00:01:47.240\n[LAUGH] Simply greater than\nsign is what I always call it.\n\n40\n00:01:47.240 --> 00:01:48.340\nDon, you agree to that?\n\n41\n00:01:48.340 --> 00:01:50.130\n&gt;&gt; Alligator Jones, I don't know [LAUGH].\n\n42\n00:01:50.130 --> 00:01:52.591\n&gt;&gt; The Alligator Jones, I like that.\nThat's what we're gonna call it from now\n\n43\n00:01:52.591 --> 00:01:53.275\non, the AJ.\n\n44\n00:01:53.275 --> 00:01:55.640\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] The Alligator Jones.\n\n45\n00:01:55.640 --> 00:01:58.900\nBut, yeah, that's it, it's that\nsimple key, it's on your keyboard.\n\n46\n00:01:58.900 --> 00:02:01.790\nYou'll see there's one that goes to\nthe left and one that goes right.\n\n47\n00:02:01.790 --> 00:02:05.230\nOne is greater than and one is less than,\nand these are our redirectors.\n\n48\n00:02:05.230 --> 00:02:08.170\nNow, in this format\nthat we see right here,\n\n49\n00:02:08.170 --> 00:02:11.810\nwhat we're talking about is\noutput redirection, right?\n\n50\n00:02:11.810 --> 00:02:13.790\nSo I'm taking the output of that command.\n\n51\n00:02:13.790 --> 00:02:16.940\nSo I've got the command on the left,\nit's the first thing I typed in.\n\n52\n00:02:16.940 --> 00:02:19.380\nAnd then I'm redirecting\nthat to somewhere else,\n\n53\n00:02:19.380 --> 00:02:23.660\nI'm saying, take that output and\npush it into this file.\n\n54\n00:02:23.660 --> 00:02:26.740\nThe cool thing is if that file doesn't\nexist, if I type in a file name that's not\n\n55\n00:02:26.740 --> 00:02:32.130\nthere, well, then it will create that file\nfor me with whatever name I've given it.\n\n56\n00:02:32.130 --> 00:02:35.950\nAnd it will then put that output\nfrom that command into that file.\n\n57\n00:02:35.950 --> 00:02:40.073\nSo these are just important little things\nthat we need to know about redirection so\n\n58\n00:02:40.073 --> 00:02:42.236\nthat we're up to speed as it were, right?\n\n59\n00:02:42.236 --> 00:02:44.023\nLet's see, what else?\n\n60\n00:02:44.023 --> 00:02:47.574\nLet's take a practical look at this,\nnot just a theoretical look,\n\n61\n00:02:47.574 --> 00:02:49.930\nlet's actually do the thing.\n\n62\n00:02:49.930 --> 00:02:52.420\nWe'll take the date command.\n\n63\n00:02:52.420 --> 00:02:54.590\nIf you type in date,\nit gives you the date.\n\n64\n00:02:54.590 --> 00:02:56.480\nThat's great, it prints out to my screen.\n\n65\n00:02:56.480 --> 00:02:59.490\nWhat if I wanted to keep a running\ntally of the date everyday?\n\n66\n00:02:59.490 --> 00:03:01.280\ni don't know why I'd want to do that,\nbut I do.\n\n67\n00:03:01.280 --> 00:03:05.080\nMaybe inside of a script that might\nbecome a handy item to do, right?\n\n68\n00:03:05.080 --> 00:03:07.050\nEvery time the script runs it\ngives me the date as well,\n\n69\n00:03:07.050 --> 00:03:09.850\nso I know when the script ran,\nthat could be helpful.\n\n70\n00:03:09.850 --> 00:03:17.150\nSo I'll run dates, and I'll output\nthat to datefile.txt and hit Enter.\n\n71\n00:03:17.150 --> 00:03:19.030\nI don't get any output here, why?\n\n72\n00:03:19.030 --> 00:03:22.510\nBecause the output,\nthat's standard out, S-T-D-O-U-T,\n\n73\n00:03:22.510 --> 00:03:27.885\nwhich typically goes to your screen is\nnow being sent to the file instead.\n\n74\n00:03:27.885 --> 00:03:29.400\nYou'll say,\nI don't want to go to my screen,\n\n75\n00:03:29.400 --> 00:03:34.460\nI want to go to file so that I can view\nit later whenever I'm ready to do that.\n\n76\n00:03:34.460 --> 00:03:40.540\nSo now all I have to do is just ls that\ndate, or not ls, but cat the date file.\n\n77\n00:03:40.540 --> 00:03:43.230\nAnd now there's the date,\nit's put it inside the file.\n\n78\n00:03:43.230 --> 00:03:48.110\nRedirected that command output\ninto a text file for myself.\n\n79\n00:03:48.110 --> 00:03:52.900\nAnd like I said, this comes in real handy\nwhen inside of scripts, especially if I'm\n\n80\n00:03:52.900 --> 00:03:57.486\nwanting to write some output type files or\nlater information after the script has\n\n81\n00:03:57.486 --> 00:04:01.410\nrun, or even during when the script\nis run if I want to, so very cool.\n\n82\n00:04:01.410 --> 00:04:05.805\nLet's take another practical example,\nsomething that's a little more,\n\n83\n00:04:05.805 --> 00:04:10.630\nnot huge, a better demonstration, but\na bit more of a better demonstration.\n\n84\n00:04:10.630 --> 00:04:13.550\nI've written one called logfile.sh.\n\n85\n00:04:13.550 --> 00:04:18.420\nLet's take a look at that,\nI'll cat logfile.sh.\n\n86\n00:04:18.420 --> 00:04:20.990\nAnd you'll see here all\nthe makings of a script,\n\n87\n00:04:20.990 --> 00:04:24.818\nit's got this shebang at the first line,\nnever forget that.\n\n88\n00:04:24.818 --> 00:04:28.500\nAnd then I've even commented a little bit\nto remind myself what am I doing with\n\n89\n00:04:28.500 --> 00:04:29.430\nthis script.\n\n90\n00:04:29.430 --> 00:04:34.850\nAnd my comma here, make a log of the auth\nlogs every time the script runs, right?\n\n91\n00:04:34.850 --> 00:04:36.100\nSo that's good, okay.\n\n92\n00:04:36.100 --> 00:04:38.200\nMaybe that could be very\nhandy down the road.\n\n93\n00:04:39.360 --> 00:04:43.300\nAnd all I did was made a variable,\ntoday equals, and\n\n94\n00:04:43.300 --> 00:04:46.950\nthen I did our command\nsubstitution of the date command.\n\n95\n00:04:46.950 --> 00:04:51.180\nI added some parameters to that to get a\nspecific type of output because I'm gonna\n\n96\n00:04:51.180 --> 00:04:56.640\ntake that output and I'm gonna,\nactually tack that on to\n\n97\n00:04:56.640 --> 00:04:59.345\nour outputted file that\nwe're gonna create.\n\n98\n00:04:59.345 --> 00:05:05.240\nAnd remember if the redirector does\nnot find the file that you have said,\n\n99\n00:05:05.240 --> 00:05:07.050\nit will create that file for you.\n\n100\n00:05:07.050 --> 00:05:11.870\nAnd that's what I'm hoping for because\neach new day when I run this file or\n\n101\n00:05:11.870 --> 00:05:16.720\nrun this script it should create a new\nlog entry for each one of those days.\n\n102\n00:05:16.720 --> 00:05:20.131\n&gt;&gt; And that's really one of the things we\nwant to achieve with scripting is that,\n\n103\n00:05:20.131 --> 00:05:21.900\nscripts save us from running a command.\n\n104\n00:05:21.900 --> 00:05:25.280\nYou could have just run that one command\nby itself and it was no big deal, but\n\n105\n00:05:25.280 --> 00:05:27.240\nif you have to run it every single day.\n\n106\n00:05:27.240 --> 00:05:29.260\nNow you've got a simple\nscript you can call, and\n\n107\n00:05:29.260 --> 00:05:32.090\nit's not just overwriting\nthe log file each time.\n\n108\n00:05:32.090 --> 00:05:35.360\nCuz if it always wrote to the same name,\nyou'd be overwriting it and\n\n109\n00:05:35.360 --> 00:05:36.080\nit'd end up being negative.\n\n110\n00:05:36.080 --> 00:05:39.210\nSo this is a great example of\nhaving a reusable script, right?\n\n111\n00:05:39.210 --> 00:05:43.170\n&gt;&gt; Yeah, again, the whole reason we even\nhave scripting is to take those automated,\n\n112\n00:05:43.170 --> 00:05:46.010\nor take those repetitive tasks and\nautomate them for us so\n\n113\n00:05:46.010 --> 00:05:47.120\nthat we don't have to do it.\n\n114\n00:05:47.120 --> 00:05:51.320\nOr it reduces the administrative effort\nit takes to actually perform that task,\n\n115\n00:05:51.320 --> 00:05:52.720\nso whole purpose of it.\n\n116\n00:05:52.720 --> 00:05:56.290\nAnd this is a very simple example of that,\nbut\n\n117\n00:05:56.290 --> 00:05:58.570\nhopefully it gets the point across\nof what we're trying to do.\n\n118\n00:05:58.570 --> 00:06:00.690\nSo basically I'm running\na couple of commands,\n\n119\n00:06:00.690 --> 00:06:04.370\nI'm running the date command obviously,\nhere it is in our command substitution.\n\n120\n00:06:04.370 --> 00:06:11.519\nI'm also ls-ing an area of my file\nsystem which is the /var/logs,\n\n121\n00:06:11.519 --> 00:06:18.070\nlooking for any file called auth.log,\nanything after that.\n\n122\n00:06:18.070 --> 00:06:22.364\nSo if we look at that, let's actually\ntake a little gander at that,\n\n123\n00:06:22.364 --> 00:06:29.359\nwe'll ls /var/log/auth.log, like that.\n\n124\n00:06:29.359 --> 00:06:31.690\nAnd you'll see there's\njust a log file in there,\n\n125\n00:06:31.690 --> 00:06:34.020\nI could even do this number right here.\n\n126\n00:06:34.020 --> 00:06:39.730\nAnd you'll see there's multiple of them,\nand even zipped files as well.\n\n127\n00:06:39.730 --> 00:06:41.440\nIf I wanted to keep an eye on this,\n\n128\n00:06:41.440 --> 00:06:44.600\nI want to say,\nwell what's going on with these zip files?\n\n129\n00:06:44.600 --> 00:06:47.030\nWell, it's basically telling\nme that the log is getting so\n\n130\n00:06:47.030 --> 00:06:51.430\nbig that it's actually throwing\nit into a tar archive and\n\n131\n00:06:51.430 --> 00:06:54.900\nthen zipping that up to lower\nthe amount of space that its taking up.\n\n132\n00:06:54.900 --> 00:06:58.233\nWell maybe I do want to verify this\neveryday to see how much my logs\n\n133\n00:06:58.233 --> 00:06:59.440\nare growing.\n\n134\n00:06:59.440 --> 00:07:05.010\nAnd see well now I've got off.log.file.uzl\nthat's starting to grow some more.\n\n135\n00:07:05.010 --> 00:07:09.610\nMaybe I want to keep it down to only upto\nfour and then do something else after\n\n136\n00:07:09.610 --> 00:07:12.720\nthat, so it would be a good way for\nme to keep an eye on that kind of thing.\n\n137\n00:07:12.720 --> 00:07:17.485\nSo what I have done and this I have said,\nbasically list that out so I can see it.\n\n138\n00:07:17.485 --> 00:07:21.570\nAanything with that auth.log, and\ngive me the long format as well, and\n\n139\n00:07:21.570 --> 00:07:23.840\nany hidden file that may also have that.\n\n140\n00:07:25.080 --> 00:07:29.650\nAnd then redirect that to log.$today,\nwhich is our variable,\n\n141\n00:07:29.650 --> 00:07:31.000\nwhich will give that date.\n\n142\n00:07:31.000 --> 00:07:33.390\nSo I know what day it ran,\nevery time it runs,\n\n143\n00:07:33.390 --> 00:07:37.018\nif I start looking at that\ndate I can see sequentially,\n\n144\n00:07:37.018 --> 00:07:41.190\ndate log are really started to\ngrow between the 5th and the 13th.\n\n145\n00:07:41.190 --> 00:07:43.020\nI wonder what was happening with the,\n\n146\n00:07:43.020 --> 00:07:48.920\nwhy did our people authenticating to\nour machine here grow in such a size?\n\n147\n00:07:48.920 --> 00:07:50.230\nWhy is it growing so quick?\n\n148\n00:07:50.230 --> 00:07:52.191\nIt'll give me a good indication of that.\n\n149\n00:07:52.191 --> 00:07:56.226\nSo let's take a look at how that looks\nafter we actually run the script and\n\n150\n00:07:56.226 --> 00:07:57.228\nsee what it does.\n\n151\n00:07:57.228 --> 00:08:00.258\nSo I'm just gonna dot slash,\nwhat's it called?\n\n152\n00:08:00.258 --> 00:08:05.740\nIt is called well, logFile, capital F.\n\n153\n00:08:05.740 --> 00:08:08.330\nI like using camelcasing a lot of times,\n\n154\n00:08:08.330 --> 00:08:11.226\nunderscores would work as well all the\ntime, break this up, make a little easier.\n\n155\n00:08:11.226 --> 00:08:15.500\nAnd there's .sh, but remember, no output,\n\n156\n00:08:15.500 --> 00:08:18.750\nbecause I redirected\nthe output to the file.\n\n157\n00:08:18.750 --> 00:08:22.640\nBut there should now be\na file called log and\n\n158\n00:08:22.640 --> 00:08:27.930\na date format that I've given which should\nbe the year, the month, and then the day.\n\n159\n00:08:27.930 --> 00:08:29.168\nAnd so,\nthat's what we should be looking at.\n\n160\n00:08:29.168 --> 00:08:33.180\nToday is October the 3rd,\nso it should say,\n\n161\n00:08:33.180 --> 00:08:38.580\nlog.171003, that's what we should see.\n\n162\n00:08:38.580 --> 00:08:39.916\nSo do an ls.\n\n163\n00:08:39.916 --> 00:08:43.693\nThere we go, I've got log 171003.\n\n164\n00:08:43.693 --> 00:08:48.910\nAnd if I cat that, log.101703,\nthere's my long format.\n\n165\n00:08:48.910 --> 00:08:51.580\nNow, I can just start\nlooking at those files.\n\n166\n00:08:51.580 --> 00:08:54.440\nSo it's a really simple way,\nyet an effective way,\n\n167\n00:08:54.440 --> 00:08:59.280\nto see how redirection can helps\nus out in our everyday experience.\n\n168\n00:09:00.820 --> 00:09:05.650\nAll right, that moves us on\ninto redirection the other way.\n\n169\n00:09:05.650 --> 00:09:10.100\n&gt;&gt; Yeah so, what we've seen so far,\nyou've taken the output of one command and\n\n170\n00:09:10.100 --> 00:09:13.260\nstuck it to a file, so it makes sense we\nshould be able to do the other way, right?\n\n171\n00:09:13.260 --> 00:09:16.010\nWe should be able to take our file and\nsend it as input to a command,\n\n172\n00:09:16.010 --> 00:09:16.750\nis that true?\n\n173\n00:09:16.750 --> 00:09:18.809\n&gt;&gt; Yep, that is absolutely true.\n\n174\n00:09:18.809 --> 00:09:21.847\nAnd that is an absolutely true statement,\nyes.\n\n175\n00:09:21.847 --> 00:09:23.026\n[LAUGH]\n&gt;&gt; Show is over.\n\n176\n00:09:23.026 --> 00:09:25.617\n&gt;&gt; [LAUGH]\n&gt;&gt; The end, thanks for watching, everyone.\n\n177\n00:09:25.617 --> 00:09:28.370\nAnd so, no, he's actually very,\nvery right.\n\n178\n00:09:28.370 --> 00:09:33.678\nMaybe I've got something inside to a file\nthat I wanna act as input to a command,\n\n179\n00:09:33.678 --> 00:09:34.245\nright.\n\n180\n00:09:34.245 --> 00:09:37.930\nHopefully, that's making\nsense in your brain.\n\n181\n00:09:37.930 --> 00:09:41.956\nYou get a command,\ncommands typically do take arguments or\n\n182\n00:09:41.956 --> 00:09:47.688\nsome sort of information extra other than,\nmuch like our date command did, right.\n\n183\n00:09:47.688 --> 00:09:49.460\nIt had parameters that\nI could set at the end.\n\n184\n00:09:49.460 --> 00:09:54.441\nWhat if I had a file with those\nparameters in it, and I wanted to,\n\n185\n00:09:54.441 --> 00:09:57.209\ninstead of typing it out each time,\n\n186\n00:09:57.209 --> 00:10:01.207\nI just said redirect the input\nto be from this file.\n\n187\n00:10:01.207 --> 00:10:03.719\nAnd then it would get from there,\nI could do that.\n\n188\n00:10:03.719 --> 00:10:08.060\nSee how that starts to become very, very\nhelpful for us when it comes to scripting.\n\n189\n00:10:08.060 --> 00:10:12.133\nI don't have to continually reinvent\nthe wheel every time I wanna run something\n\n190\n00:10:12.133 --> 00:10:14.559\nthat I do all the time,\nI could just use a file and\n\n191\n00:10:14.559 --> 00:10:17.148\nredirect that into the command\nthat I want to run.\n\n192\n00:10:17.148 --> 00:10:18.950\nSo let's take a look and\nsee how that looks.\n\n193\n00:10:18.950 --> 00:10:23.100\nLet me clear the screen, so we can get\na little of the clutter out of the way.\n\n194\n00:10:23.100 --> 00:10:28.400\nSo it's gonna look more like this, it's\ngonna be command, alligator jaws, right,\n\n195\n00:10:28.400 --> 00:10:33.660\nbut notice the alligator jaws are now\neating the other way, and then our file.\n\n196\n00:10:33.660 --> 00:10:36.520\nSo very similar to what we saw\nwith output redirection, but\n\n197\n00:10:36.520 --> 00:10:39.780\ninput redirection is just\ngoing the opposite direction.\n\n198\n00:10:39.780 --> 00:10:43.550\nI wanna take from the file and\ngive that to the command.\n\n199\n00:10:43.550 --> 00:10:47.428\nSo now that we understand how\nit's suppose to look basically,\n\n200\n00:10:47.428 --> 00:10:49.560\nlet's take a look at how it works.\n\n201\n00:10:49.560 --> 00:10:52.758\nI'm gonna use the wc command,\nwhich is the word count command,\n\n202\n00:10:52.758 --> 00:10:55.318\nif you look at that system,\nneat little tool, wc.\n\n203\n00:10:55.318 --> 00:11:01.359\nIt prints any new lines, words and byte\ncounts for each file that you give it.\n\n204\n00:11:01.359 --> 00:11:03.428\nVery good, cool.\n\n205\n00:11:03.428 --> 00:11:07.224\nTechnically, I don't need redirection\non how this file works, but\n\n206\n00:11:07.224 --> 00:11:09.718\nit gives me good you know,\nhow we can do this.\n\n207\n00:11:09.718 --> 00:11:14.015\nSo I can say wc, like so, and\nI've actually created a file,\n\n208\n00:11:14.015 --> 00:11:16.396\nI want to show you that actually.\n\n209\n00:11:16.396 --> 00:11:20.946\nI will cat, I called it inputRedirFile,\n\n210\n00:11:20.946 --> 00:11:24.066\nthis is a test file, right.\n\n211\n00:11:24.066 --> 00:11:29.433\nI'll say wc, redirect the output\nof that file to the input of wc,\n\n212\n00:11:29.433 --> 00:11:33.153\nand I'll just inputRedirFile, like that.\n\n213\n00:11:33.153 --> 00:11:37.818\nAnd there you go, that's how that works.\n\n214\n00:11:37.818 --> 00:11:40.808\nAgain, I could do that with date, I could\nmake a file that has, if I want to.\n\n215\n00:11:40.808 --> 00:11:43.120\nLet's do that real quick, take a second.\n\n216\n00:11:43.120 --> 00:11:46.929\nHere we'll say vim, and\nwe'll call it dateattribs.\n\n217\n00:11:46.929 --> 00:11:50.800\nThat's awesome,\nthank you Linux, or Dropbox.\n\n218\n00:11:50.800 --> 00:11:53.230\nI guess that is giving me\na nice little [LAUGH] letting\n\n219\n00:11:53.230 --> 00:11:54.650\nme know space has increased.\n\n220\n00:11:54.650 --> 00:11:56.500\nGood job.\n&gt;&gt; But before we move on from that,\n\n221\n00:11:56.500 --> 00:12:00.104\nDaniel, I think it's important to remember\nthat that doesn't work with every\n\n222\n00:12:00.104 --> 00:12:00.987\ncommand, right?\n\n223\n00:12:00.987 --> 00:12:04.360\nWc is ready to receive that input,\nbut not every command is, right?\n\n224\n00:12:04.360 --> 00:12:07.028\n&gt;&gt; Yeah, not every command is,\nsome things are interactive and\n\n225\n00:12:07.028 --> 00:12:08.989\nyou have to work with\nthem in a different way.\n\n226\n00:12:08.989 --> 00:12:10.485\nSo if you do run into that,\n\n227\n00:12:10.485 --> 00:12:14.297\nmaybe that's the case that they're\nin an interactive type mode.\n\n228\n00:12:14.297 --> 00:12:16.070\nAnd have to work with it specifically.\n\n229\n00:12:16.070 --> 00:12:19.580\n&gt;&gt; A lot of those, they'll require command\nline arguments to feed a file into them or\n\n230\n00:12:19.580 --> 00:12:20.100\nsomething else.\n\n231\n00:12:20.100 --> 00:12:22.128\nSo it's not a one size fits all,\n\n232\n00:12:22.128 --> 00:12:23.822\nyou can always do this-\n&gt;&gt; Good point.\n\n233\n00:12:23.822 --> 00:12:25.935\n&gt;&gt; Text input, but it is available.\n\n234\n00:12:25.935 --> 00:12:28.364\n&gt;&gt; Yes, yes, yes, very wise words from Mr.\n\n235\n00:12:28.364 --> 00:12:31.141\nPezet over here,\na very good thing to remember.\n\n236\n00:12:31.141 --> 00:12:32.021\nAnd you know what?\n\n237\n00:12:32.021 --> 00:12:35.199\nLet's go ahead and\njump to that kind of example.\n\n238\n00:12:35.199 --> 00:12:38.841\nIf you do have this\ninteractive type commands, and\n\n239\n00:12:38.841 --> 00:12:43.498\nwc actually happens to be one of\nthose type of commands that does do\n\n240\n00:12:43.498 --> 00:12:48.508\nan interactive mode, is you can still\nkind of send information to it.\n\n241\n00:12:48.508 --> 00:12:51.090\nIt just takes a different way,\nso it looks a little different.\n\n242\n00:12:51.090 --> 00:12:53.410\nSo I wanna make sure you\nguys see how that works out.\n\n243\n00:12:53.410 --> 00:12:55.430\nLet's jump back to the screen\nhere really quickly.\n\n244\n00:12:55.430 --> 00:12:59.102\nAnd what we can do is, again,\nlike I like to do is set the stage for\n\n245\n00:12:59.102 --> 00:13:00.872\nhow this might actually work.\n\n246\n00:13:00.872 --> 00:13:03.091\nIt will be command xo.\n\n247\n00:13:03.091 --> 00:13:08.321\nAnd then it's the double alligator jaws,\ngoing input direction.\n\n248\n00:13:08.321 --> 00:13:09.536\n&gt;&gt; [LAUGH]\n&gt;&gt; When they point that way,\n\n249\n00:13:09.536 --> 00:13:10.559\nthey're actually crocodile jaws.\n\n250\n00:13:10.559 --> 00:13:11.859\nThat's the difference.\n\n251\n00:13:11.859 --> 00:13:13.125\n&gt;&gt; Their actually crocodile\njaws cuz they're much bigger.\n\n252\n00:13:13.125 --> 00:13:14.318\nThat's a bigger set of jaws.\n\n253\n00:13:14.318 --> 00:13:15.737\nSo, there we go.\n\n254\n00:13:15.737 --> 00:13:20.740\nAnd then it will be kinda like the inline,\ndid I spell that correctly?\n\n255\n00:13:20.740 --> 00:13:22.784\nIn line, yeah, that's right.\n\n256\n00:13:22.784 --> 00:13:24.519\nInput reader.\n\n257\n00:13:24.519 --> 00:13:26.030\nLike that.\n\n258\n00:13:26.030 --> 00:13:28.420\nThat's kind of how this\nis going to work out.\n\n259\n00:13:28.420 --> 00:13:32.100\nTypically what you'll see a lot of times\nis something that look a little bit like\n\n260\n00:13:32.100 --> 00:13:32.710\nthis.\n\n261\n00:13:34.000 --> 00:13:38.060\nAnd then it will kind of\ndrop you to another prompt\n\n262\n00:13:38.060 --> 00:13:39.830\nwhere it's accepting more input.\n\n263\n00:13:39.830 --> 00:13:41.830\nThis is very, very typical.\n\n264\n00:13:41.830 --> 00:13:43.840\nAnd I want you guys to see this and\nunderstand how this works.\n\n265\n00:13:43.840 --> 00:13:46.831\nSo, down the road if we use this,\nwhich we are going to do,\n\n266\n00:13:46.831 --> 00:13:49.275\n[LAUGH] kinda setting the stage for\nus as it were,\n\n267\n00:13:49.275 --> 00:13:53.271\nthat we understand what's going on and\ndon't want you guys to be in the dark.\n\n268\n00:13:53.271 --> 00:13:58.167\nSo we'll use our wc command yet\nagain, so wc, only one seeing that.\n\n269\n00:13:58.167 --> 00:14:00.265\nGo back to kindergarten here.\n\n270\n00:14:00.265 --> 00:14:03.450\nAnd I'll say EOF.\n\n271\n00:14:03.450 --> 00:14:04.420\nNow I use EOF.\n\n272\n00:14:04.420 --> 00:14:07.790\nTechnically, you could put anything here.\n\n273\n00:14:07.790 --> 00:14:11.070\nMost people do use EOF, and\nthere's a good reason of that,\n\n274\n00:14:11.070 --> 00:14:12.630\ncuz it stands for end of file.\n\n275\n00:14:13.640 --> 00:14:19.430\nIt's letting wc know that we've come to\nthe end of the input that I wanna give,\n\n276\n00:14:19.430 --> 00:14:21.750\notherwise it would just sit there and\ntake input all day.\n\n277\n00:14:21.750 --> 00:14:24.651\nSay okay, input, you hit Enter.\n\n278\n00:14:24.651 --> 00:14:29.956\nAnd you're like okay, exits, enter,\nthat's input for me too, exit, great.\n\n279\n00:14:29.956 --> 00:14:32.075\nWhat's the next input, quit?\n\n280\n00:14:32.075 --> 00:14:35.200\n[LAUGH] Ctrl+C,\nwhat do I do to get out of this?\n\n281\n00:14:35.200 --> 00:14:39.730\nSo you have to exit out of that\nthat interactive mode correctly.\n\n282\n00:14:39.730 --> 00:14:41.900\nA lot of times,\nthis is exactly what that looks like.\n\n283\n00:14:41.900 --> 00:14:45.510\nUse that EOF,\nlet the command know that's end of file.\n\n284\n00:14:45.510 --> 00:14:48.550\nLike I said, you could put bumper\ncars there if you feel like it.\n\n285\n00:14:48.550 --> 00:14:53.020\nWhen it finds a line that only has the\nword bumper cars on it, it will know this\n\n286\n00:14:53.020 --> 00:14:57.920\nis the end of input, I can stop taking\ninput and start processing said input.\n\n287\n00:14:57.920 --> 00:15:00.572\nThat's the structure\nthat we're looking at.\n\n288\n00:15:00.572 --> 00:15:02.709\nSo if I do like this,\nI like to use that EOF again,\n\n289\n00:15:02.709 --> 00:15:05.540\nstandardization does help\neverybody that's working with it.\n\n290\n00:15:05.540 --> 00:15:10.590\nAnd this just drops me to that next\nprompt, accepting further input.\n\n291\n00:15:10.590 --> 00:15:16.242\nAnd I can just say a string 1,\nI can say string 2,\n\n292\n00:15:16.242 --> 00:15:21.160\nstring 3 and so on and so forth, right.\n\n293\n00:15:21.160 --> 00:15:26.190\nOnce I'm done inputting to wc,\nI have to let it know I'm done by giving\n\n294\n00:15:26.190 --> 00:15:31.870\nit what's called the text marker is what\nthat EOF technically is, text marker.\n\n295\n00:15:31.870 --> 00:15:36.620\nSo I'll just type in EOF all by\nitself on a line all by itself, okay.\n\n296\n00:15:36.620 --> 00:15:38.220\nThat's how you let it know that.\n\n297\n00:15:38.220 --> 00:15:43.700\nHit Enter and now it processes everything\nthat I put into that redirection.\n\n298\n00:15:43.700 --> 00:15:47.250\nSo, a lot of times we see that\ninteractive input redirection.\n\n299\n00:15:47.250 --> 00:15:49.993\nThat's the typical format\nin which you'll see it.\n\n300\n00:15:49.993 --> 00:15:54.515\nSo as we go online if and when we use\nthat type of format you are [LAUGH]\n\n301\n00:15:54.515 --> 00:15:57.078\nyou have all the wherewithal for it.\n\n302\n00:15:57.078 --> 00:15:59.209\n&gt;&gt; Yeah and that's really handy,\nespecially for\n\n303\n00:15:59.209 --> 00:16:02.270\ncommands that are expecting\nmultiple levels of input.\n\n304\n00:16:02.270 --> 00:16:05.240\nCommands that just aren't expecting\nto have data redirected into them,\n\n305\n00:16:05.240 --> 00:16:06.520\nthat's a handy way to get around it.\n\n306\n00:16:06.520 --> 00:16:12.580\nBut it does kind of highlight how if\nwe're gonna use this with commands,\n\n307\n00:16:12.580 --> 00:16:16.370\nwe need to at least understand how those\ncommands expect to receive their input so\n\n308\n00:16:16.370 --> 00:16:18.053\nwe can provide it in a similar fashion.\n\n309\n00:16:18.053 --> 00:16:19.474\nUnix is all about giving us tools,\n\n310\n00:16:19.474 --> 00:16:23.110\nthat we've got a ton of tools available\nto be able to do things different ways.\n\n311\n00:16:23.110 --> 00:16:25.990\nWe just need to know when we\nneed to do that, right, and\n\n312\n00:16:25.990 --> 00:16:27.150\nthat's kinda the challenging part.\n\n313\n00:16:27.150 --> 00:16:28.110\n&gt;&gt; That's right.\n\n314\n00:16:28.110 --> 00:16:31.810\nNow that brings us to our final,\njust for this purpose in any way,\n\n315\n00:16:31.810 --> 00:16:36.990\nhow we can kind of make\ncommands work together.\n\n316\n00:16:36.990 --> 00:16:39.920\nAnd it's an interesting\nlittle thing called piping.\n\n317\n00:16:39.920 --> 00:16:43.820\nPiping, if you think of it like a plumber,\ntakes one piece of pipe and\n\n318\n00:16:43.820 --> 00:16:48.280\nhe wants to join this spigot with that\nspigot or this sink with that drain,\n\n319\n00:16:48.280 --> 00:16:51.270\nhe takes a piece of pipe and\nhe joins them together so\n\n320\n00:16:51.270 --> 00:16:56.010\nthat everything works and\nflows into a specific and desired output.\n\n321\n00:16:56.010 --> 00:16:58.461\nThat's the idea that we're working\nwith when it comes to piping.\n\n322\n00:16:58.461 --> 00:17:01.270\nAnd the cool, it's very simple to do.\n\n323\n00:17:01.270 --> 00:17:04.324\nWe just have to use what's\ncalled the pipe command.\n\n324\n00:17:04.324 --> 00:17:07.365\nAnd it's this straight up and\ndown line that you may have\n\n325\n00:17:07.365 --> 00:17:11.180\nseen if you've looked at any kind\nof Linux command line stuff.\n\n326\n00:17:11.180 --> 00:17:15.320\nOr maybe even perused some shell\nscripts prior to watching the show,\n\n327\n00:17:15.320 --> 00:17:17.050\nyou probably see this quite a bit.\n\n328\n00:17:17.050 --> 00:17:18.660\n&gt;&gt; It's a really handy thing to use.\n\n329\n00:17:18.660 --> 00:17:21.650\nI use it quite a bit, and the way I always\nthink about it is in the beginning of\n\n330\n00:17:21.650 --> 00:17:25.380\nthe show you showed us how to run\na command and dump the output to a file.\n\n331\n00:17:25.380 --> 00:17:27.440\nAnd then you showed us how\nto take that output file and\n\n332\n00:17:27.440 --> 00:17:29.730\nuse it as input to another command.\n\n333\n00:17:29.730 --> 00:17:33.237\nWell, with piping,\nyou can just cut out the middleman.\n\n334\n00:17:33.237 --> 00:17:36.377\nAnd you can take the output of one command\nand send it right in as the input of\n\n335\n00:17:36.377 --> 00:17:39.180\nanother command without ever\ntouching a file in the first place.\n\n336\n00:17:39.180 --> 00:17:41.381\nAnd I use that on a daily basis.\n\n337\n00:17:41.381 --> 00:17:44.703\nIt is just a regular, routine thing,\nespecially when you're not wanting to\n\n338\n00:17:44.703 --> 00:17:48.090\nwrite files to disk, you're trying to\nget things to move as fast as possible.\n\n339\n00:17:48.090 --> 00:17:51.740\nSkipping the disk can really speed things\nup and that's a great way that we can\n\n340\n00:17:51.740 --> 00:17:54.792\nleverage pipelines to improve\nthe performance of our scripts.\n\n341\n00:17:54.792 --> 00:17:55.500\n&gt;&gt; Yes, exactly.\n\n342\n00:17:55.500 --> 00:17:58.420\nI'm with Don, I use this on a daily basis.\n\n343\n00:17:58.420 --> 00:18:02.040\nIf you take away anything from this,\nit's the power of piping.\n\n344\n00:18:02.040 --> 00:18:05.020\nPiping is so convenient, and\nit makes our lives very,\n\n345\n00:18:05.020 --> 00:18:08.170\nvery nice, that you just need to\nget really familiar with doing it.\n\n346\n00:18:08.170 --> 00:18:09.910\nLet's show you how this\nworks really quickly.\n\n347\n00:18:09.910 --> 00:18:13.130\nI'll clear the screen,\nget the clutter out of the way.\n\n348\n00:18:13.130 --> 00:18:16.862\nAnd again, I'll show you it's\nbasically a command, and then pipe.\n\n349\n00:18:16.862 --> 00:18:20.278\nYou'll notice that it's that straight\nstick, right up and down, which is,\n\n350\n00:18:20.278 --> 00:18:23.281\nif you've never seen it before,\nyou're looking at your keyboard,\n\n351\n00:18:23.281 --> 00:18:24.832\nstandard US type keyboard.\n\n352\n00:18:24.832 --> 00:18:28.809\nAbove the Enter key, there's the backslash\nand it shares a character and\n\n353\n00:18:28.809 --> 00:18:30.294\nthat is that pipe command.\n\n354\n00:18:30.294 --> 00:18:32.050\nRight, so that's that pipe character.\n\n355\n00:18:32.050 --> 00:18:32.955\nThat's where you'll find it.\n\n356\n00:18:32.955 --> 00:18:36.065\nAnd we will just do a command,\ntwo commands.\n\n357\n00:18:36.065 --> 00:18:37.300\nCommand two.\n\n358\n00:18:37.300 --> 00:18:40.860\nPipe that into command three and\nso on and so forth.\n\n359\n00:18:40.860 --> 00:18:44.810\nSo that's how the structure looks,\ntheoretically.\n\n360\n00:18:44.810 --> 00:18:46.250\nBut not all about theory.\n\n361\n00:18:46.250 --> 00:18:50.790\nWe wanna see how it actually works out,\nand how that looks in the day to day life.\n\n362\n00:18:50.790 --> 00:18:54.069\nI'll tell you when the first\ntime I learned piping was, and\n\n363\n00:18:54.069 --> 00:18:57.557\ncuz I use CAD badly,\nI'd probably get one of those awards for-\n\n364\n00:18:57.557 --> 00:18:58.149\n&gt;&gt; [LAUGH].\n\n365\n00:18:58.149 --> 00:18:59.420\n&gt;&gt; Unnecessary CAD use.\n\n366\n00:18:59.420 --> 00:19:00.910\n&gt;&gt; Unnecessary CAD use.\n\n367\n00:19:00.910 --> 00:19:01.840\nI used to do this all the time.\n\n368\n00:19:01.840 --> 00:19:03.420\nI would CAD a file.\n\n369\n00:19:03.420 --> 00:19:07.700\nAnd then, so whatever file name,\nfile and I would pipe that into lists,\n\n370\n00:19:07.700 --> 00:19:11.180\nbecause I didn't know that\nlists would just read the file.\n\n371\n00:19:11.180 --> 00:19:14.210\nThat's how I would use that, and\nthat's how I learned about pipe.\n\n372\n00:19:14.210 --> 00:19:17.305\nBut, that would be a legitimate command,\nthat would work.\n\n373\n00:19:17.305 --> 00:19:20.803\nIt did work for a long time,\nuntil I realized I could just use less.\n\n374\n00:19:20.803 --> 00:19:24.060\nBut, a more actual way would\nbe something more like this.\n\n375\n00:19:24.060 --> 00:19:25.180\nLet's see here.\n\n376\n00:19:25.180 --> 00:19:28.780\nLet's say I wanted to\nLS-AL everything here.\n\n377\n00:19:28.780 --> 00:19:30.510\nThat's a lot of output.\n\n378\n00:19:30.510 --> 00:19:33.382\nAnd then let's say I wanna do.\n\n379\n00:19:33.382 --> 00:19:37.839\nLet's say I wanted to LS-AL/Etc like that.\n\n380\n00:19:37.839 --> 00:19:39.717\nAll right, that's good.\n\n381\n00:19:39.717 --> 00:19:42.480\nThere's also even more output.\n\n382\n00:19:42.480 --> 00:19:43.740\nThat's a lot of output to go through.\n\n383\n00:19:43.740 --> 00:19:48.234\nBut what if I wanted to\nactually do my word count, or\n\n384\n00:19:48.234 --> 00:19:52.950\nmy WC command,\nagainst just the S tab inside of that.\n\n385\n00:19:52.950 --> 00:19:54.140\nHow could I do that?\n\n386\n00:19:54.140 --> 00:19:57.330\nI could pipe commands together to\nget the output that I'm looking for.\n\n387\n00:19:58.340 --> 00:19:59.710\nLet's see how that works out.\n\n388\n00:19:59.710 --> 00:20:03.310\nSo all these commands should be\nfamiliar to you at this point in time.\n\n389\n00:20:03.310 --> 00:20:10.560\nSo we'll LS- AL and we'll / ETC,\nthen we'll pipe that into grep.\n\n390\n00:20:10.560 --> 00:20:13.240\nUsing grep, I just like to throw\ngrep in there from time to time so\n\n391\n00:20:13.240 --> 00:20:14.740\nwe can see the power of grep.\n\n392\n00:20:14.740 --> 00:20:19.220\nNow I'm just looking for f-stab,\nthe file system table, right?\n\n393\n00:20:19.220 --> 00:20:21.280\nAnd, I can pipe that into WC.\n\n394\n00:20:21.280 --> 00:20:25.870\nNow again, this is convoluted, for example\npurposes, but it drives the point home.\n\n395\n00:20:25.870 --> 00:20:27.050\nAnd, there you go.\n\n396\n00:20:27.050 --> 00:20:30.920\nIt has listed the files\nthat are in the etc.\n\n397\n00:20:30.920 --> 00:20:34.160\nIt grep looking for f-stab so\na different command.\n\n398\n00:20:34.160 --> 00:20:37.448\nS and grep got its information from\nthe LS command that we did previously,\n\n399\n00:20:37.448 --> 00:20:39.620\nand that pipe joined that together.\n\n400\n00:20:39.620 --> 00:20:43.300\nAnd then, pipe joined WC to the grep.\n\n401\n00:20:43.300 --> 00:20:46.017\nSo I only got the information\nthat I was looking for\n\n402\n00:20:46.017 --> 00:20:49.591\nby piping these things together,\ngiving me the desired output.\n\n403\n00:20:49.591 --> 00:20:53.500\n&gt;&gt; And this is really similar to\nredirecting standard out, right?\n\n404\n00:20:53.500 --> 00:20:55.860\nBecause we don't see\nthe standard out on the screen.\n\n405\n00:20:55.860 --> 00:20:57.140\nThe LS command?\n\n406\n00:20:57.140 --> 00:20:57.960\nWe never saw that.\n\n407\n00:20:57.960 --> 00:21:00.940\nAnd then when you grepped it for\nf-stat we never saw that output either.\n\n408\n00:21:00.940 --> 00:21:03.360\nBecause all of the output\nwas being redirected and\n\n409\n00:21:03.360 --> 00:21:08.500\nsent to the last command in the pipeline\nand we just see what comes out from there.\n\n410\n00:21:08.500 --> 00:21:10.525\nAnd you can actually mix and\nmatch these right, Daniel?\n\n411\n00:21:10.525 --> 00:21:13.488\nAt the end of WC,\nyou can then do a greater than symbol and\n\n412\n00:21:13.488 --> 00:21:15.455\npipe that output to a text file.\n\n413\n00:21:15.455 --> 00:21:17.775\nSo you've got three commands\nthat are all pipe-lined, and\n\n414\n00:21:17.775 --> 00:21:19.915\nthen the output on the last\none is redirected.\n\n415\n00:21:19.915 --> 00:21:21.953\n&gt;&gt; So you can kinda have a lot of fun.\n\n416\n00:21:21.953 --> 00:21:23.221\n&gt;&gt; You can go crazy with these.\n\n417\n00:21:23.221 --> 00:21:24.198\n&gt;&gt; If you have fun with that stuff.\n\n418\n00:21:24.198 --> 00:21:28.693\n&gt;&gt; If you really wanna see\nsomebody using something like this\n\n419\n00:21:28.693 --> 00:21:32.630\nto a very high level,\ngo to bash one liners.\n\n420\n00:21:32.630 --> 00:21:34.160\nJust Google search bash one liners,\n\n421\n00:21:34.160 --> 00:21:37.030\nand you'll see tons of them where\nthey've piped things together,\n\n422\n00:21:37.030 --> 00:21:39.970\nthey've redirected things together,\npiped and redirected things.\n\n423\n00:21:39.970 --> 00:21:44.890\nCommand chaining things using\nthe semicolon, and piping it,\n\n424\n00:21:44.890 --> 00:21:47.110\nand redirecting it, and\ndoing all sorts of crazy stuff.\n\n425\n00:21:47.110 --> 00:21:51.610\nYou can get really creative with just\nusing these three types of operations,\n\n426\n00:21:51.610 --> 00:21:53.610\nit's really cool stuff.\n\n427\n00:21:53.610 --> 00:21:55.980\nBut Don, basically that's what\nI wanted our viewers to know.\n\n428\n00:21:55.980 --> 00:21:59.452\nBecause it's kind of setting the stage,\nfor as we move into further stuff\n\n429\n00:21:59.452 --> 00:22:03.148\nI wanted to make sure you had a good\nfoundation, so again, if we're working on\n\n430\n00:22:03.148 --> 00:22:06.524\nsomething later down the series you\ndon't go what the heck is he doing?\n\n431\n00:22:06.524 --> 00:22:10.820\nWhat is that character, what is that\ndoing, why did he even do that?\n\n432\n00:22:10.820 --> 00:22:13.170\nNow you can understand\nwhy that's happening.\n\n433\n00:22:13.170 --> 00:22:14.680\n&gt;&gt; All right.\nWell Daniel I really appreciate you\n\n434\n00:22:14.680 --> 00:22:15.980\nwalking us through all that.\n\n435\n00:22:15.980 --> 00:22:18.230\nThese simple skills like redirecting,\n\n436\n00:22:18.230 --> 00:22:22.140\nI know you didn't actually do any of\nthis stuff in a script in the subset,\n\n437\n00:22:22.140 --> 00:22:23.880\nyou just did it all right in\nthe command line interpreter.\n\n438\n00:22:23.880 --> 00:22:27.750\nBut this is stuff that we will make use\nof pretty heavily inside of the script.\n\n439\n00:22:27.750 --> 00:22:31.320\nSo this is great foundational knowledge\nto have a grasp of, so we can use that to\n\n440\n00:22:31.320 --> 00:22:35.010\nmake better scripts, and things we'll\ncertainly see as the shows go on.\n\n441\n00:22:35.010 --> 00:22:36.570\nSo thank you for covering that,\n\n442\n00:22:36.570 --> 00:22:39.002\nbut looking at the clock there-\n&gt;&gt; Yeah [LAUGH]\n\n443\n00:22:39.002 --> 00:22:40.310\n&gt;&gt; [CROSSTALK] Wrap this one up, and\n\n444\n00:22:40.310 --> 00:22:43.076\nwe need to get into more scripting\ntopics in the upcoming episodes.\n\n445\n00:22:43.076 --> 00:22:44.670\nSo be sure to stay tuned for that.\n\n446\n00:22:44.670 --> 00:22:47.210\nBut for right now, we'll go ahead and\nsign off from this one, so\n\n447\n00:22:47.210 --> 00:22:50.320\nsigning off for ITPro.TV,\nI've been your host Don Pezet.\n\n448\n00:22:50.320 --> 00:22:51.024\n&gt;&gt; I'm Daniel Lowrie.\n\n449\n00:22:51.024 --> 00:22:53.807\n&gt;&gt; And we will see you next time.\n\n450\n00:22:53.807 --> 00:22:59.816\n[MUSIC]\n\n451\n00:22:59.816 --> 00:23:02.370\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "236792741"
        },
        {
          "description": "In this episode, Daniel and Don explore performing mathematical\ncomputation using various techniques in a bash script. Here they show you how\nto perform arithmetic using bash internal functionality as well as calling on\nthe power of the Bash Calculator(bc) to work with the more complex math done.",
          "length": "1884",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-2-1-performing_arithmetic-100317-PGM.00_31_09_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-2-1-performing_arithmetic-100317-PGM.00_31_09_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-3-2-1-performing_arithmetic-100317-PGM.00_31_09_18.Still001-sm.jpg",
          "title": "Performing Arithmetic",
          "transcript": "WEBVTT\n\n1\n00:00:00.087 --> 00:00:03.134\nWelcome to ITProTV,\nI'm your host, Don Pezet-\n\n2\n00:00:03.134 --> 00:00:05.236\n&gt;&gt; Coming at you live from San Francisco,\n\n3\n00:00:05.236 --> 00:00:06.453\nCalifornia [CROSSTALK]\n\n4\n00:00:06.453 --> 00:00:08.271\n[MUSIC]\n\n5\n00:00:08.271 --> 00:00:13.308\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:13.308 --> 00:00:16.700\n&gt;&gt; All right, welcome back everybody,\nto another episode of ITProTV.\n\n7\n00:00:16.700 --> 00:00:18.500\nI'm your host, Don Pezet, and\n\n8\n00:00:18.500 --> 00:00:22.720\nwe are jumping right back into the world\nof the Linux shell scripting basics.\n\n9\n00:00:22.720 --> 00:00:23.622\nAnd in particular,\n\n10\n00:00:23.622 --> 00:00:26.650\nin this episode we're going to be\ntaking a look at some arithmetic.\n\n11\n00:00:26.650 --> 00:00:29.062\nOr, for those of you who are across\nthe pond, some arithmetic.\n\n12\n00:00:29.062 --> 00:00:30.158\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n13\n00:00:30.158 --> 00:00:33.450\nthat means we're gonna be focusing on some\namazing topics like, what is 2 plus 2?\n\n14\n00:00:33.450 --> 00:00:36.690\nAnd if that's got you on the edge of\nyour seat, you're in the right episode.\n\n15\n00:00:36.690 --> 00:00:40.548\nHere to help us answer the hard questions,\nlike what is 3 plus 1, Mr.\n\n16\n00:00:40.548 --> 00:00:41.580\nDaniel Lowrie, here in the studio.\n\n17\n00:00:41.580 --> 00:00:42.900\nDaniel, thanks for joining us.\n\n18\n00:00:42.900 --> 00:00:46.910\n&gt;&gt; I think I'm glad to be here now,\ncuz we are doing math today.\n\n19\n00:00:46.910 --> 00:00:48.901\n&gt;&gt; I went off script, didn't I, 3 + 1?\n\n20\n00:00:48.901 --> 00:00:49.901\n&gt;&gt; You're putting me on the spot, bro!\n\n21\n00:00:49.901 --> 00:00:52.535\n&gt;&gt; [LAUGH]\n&gt;&gt; We had a rule, it was like,\n\n22\n00:00:52.535 --> 00:00:53.397\nno odd numbers!\n\n23\n00:00:53.397 --> 00:00:55.080\n&gt;&gt; Right,\nyou know I don't do well with primes!\n\n24\n00:00:55.080 --> 00:00:57.253\n&gt;&gt; [LAUGH]\n&gt;&gt; But he's right,\n\n25\n00:00:57.253 --> 00:00:58.035\nthat's actually why we're here today.\n\n26\n00:00:58.035 --> 00:01:01.593\nWe're gonna do a little bit of\nmath inside of our scripts.\n\n27\n00:01:01.593 --> 00:01:05.452\nAnd you might be thinking,\nmath, why are we doing math?\n\n28\n00:01:05.452 --> 00:01:07.015\nI was done with math, I'm out of school!\n\n29\n00:01:07.015 --> 00:01:09.800\n&gt;&gt; [LAUGH]\n&gt;&gt; And you know what, I feel your pain,\n\n30\n00:01:09.800 --> 00:01:11.412\nI feel your pain out there.\n\n31\n00:01:11.412 --> 00:01:15.265\nBut unfortunately, math is kind of\nsomething that we need to be able to do\n\n32\n00:01:15.265 --> 00:01:17.620\ninside of a script, from time to time.\n\n33\n00:01:17.620 --> 00:01:21.930\nYou never know when you have to come\nup with a percentage of something, or\n\n34\n00:01:21.930 --> 00:01:25.060\nmaybe I need to know a certain size.\n\n35\n00:01:25.060 --> 00:01:30.390\nOr I need to add a couple things\ntogether to aggregate some values,\n\n36\n00:01:30.390 --> 00:01:32.540\nand I do that through math.\n\n37\n00:01:32.540 --> 00:01:35.780\n&gt;&gt; If only we had some kind\nof technology available.\n\n38\n00:01:35.780 --> 00:01:37.340\n&gt;&gt; [LAUGH]\n&gt;&gt; Some kind of device or\n\n39\n00:01:37.340 --> 00:01:40.840\nmachine that could take this information\nfrom us and give us those answers,\n\n40\n00:01:40.840 --> 00:01:41.800\nwouldn't that be impressive?\n\n41\n00:01:41.800 --> 00:01:43.580\n&gt;&gt; Man, that would be awesome,\nwouldn't it?\n\n42\n00:01:43.580 --> 00:01:46.190\nWell guess what, Don,\nyour prayers have been answered.\n\n43\n00:01:46.190 --> 00:01:47.495\n&gt;&gt; No way.\n&gt;&gt; Yes, I know.\n\n44\n00:01:47.495 --> 00:01:50.630\n&gt;&gt; [LAUGH]\n&gt;&gt; He's in full shock and disbelief.\n\n45\n00:01:50.630 --> 00:01:53.761\nBut I'm here to tell you, this is\nnot snake oil, ladies and gentlemen.\n\n46\n00:01:53.761 --> 00:01:56.257\nI sell you the genuine product\nthat can actually do that,\n\n47\n00:01:56.257 --> 00:01:57.508\nwhich is called a computer.\n\n48\n00:01:57.508 --> 00:01:59.572\n&gt;&gt; [LAUGH]\n&gt;&gt; But it's awesome, it can do math.\n\n49\n00:01:59.572 --> 00:02:03.002\nActually, that's what computers\ndo at the very base of it.\n\n50\n00:02:03.002 --> 00:02:08.480\nIt's just adding, really, when you take\na look at the lowest possible level.\n\n51\n00:02:08.480 --> 00:02:12.214\nSo that just stands to reason that we\nwould be able to throw mathematical\n\n52\n00:02:12.214 --> 00:02:15.841\ncomputations at our computer, and\nit would be able to do them for us.\n\n53\n00:02:15.841 --> 00:02:18.213\nNow, I like to use Google for\nthat, cuz it's-\n\n54\n00:02:18.213 --> 00:02:18.883\n&gt;&gt; [LAUGH]\n\n55\n00:02:18.883 --> 00:02:20.835\n&gt;&gt; It's a great tool, but unfortunately,\n\n56\n00:02:20.835 --> 00:02:22.015\nI can't script Google.\n\n57\n00:02:22.015 --> 00:02:25.036\nAt least not any way that I know of\non the top of my head, maybe you can.\n\n58\n00:02:25.036 --> 00:02:27.965\nIf you do know that,\nlet us know at Daniel@ITPro.TV.\n\n59\n00:02:27.965 --> 00:02:30.973\n&gt;&gt; [LAUGH]\n&gt;&gt; But our computers will do that.\n\n60\n00:02:30.973 --> 00:02:34.200\nWe're talking about Bash scripting,\nso that's what we're gonna do.\n\n61\n00:02:34.200 --> 00:02:37.930\nWe're gonna let Bash do math for\nus, inside of a script, for\n\n62\n00:02:37.930 --> 00:02:39.550\nwhatever reason that we may need it for.\n\n63\n00:02:39.550 --> 00:02:42.350\n&gt;&gt; Yeah, you'd be surprised the amount\nof reasons that are out there.\n\n64\n00:02:42.350 --> 00:02:45.950\nWhen you're writing a script and\nyou're trying to calculate a file size,\n\n65\n00:02:45.950 --> 00:02:46.820\na manipulated date.\n\n66\n00:02:46.820 --> 00:02:50.300\nYou're trying to find files that\nare three days old or more.\n\n67\n00:02:50.300 --> 00:02:53.010\nAnd so you've gotta take the current\ndate and subtract three days off of it.\n\n68\n00:02:53.010 --> 00:02:55.810\nIt's simple mathematics,\nthat we can do in our head very easy.\n\n69\n00:02:55.810 --> 00:02:58.200\nIn a script,\nthat can be kind of challenging, so\n\n70\n00:02:58.200 --> 00:03:01.080\nthere's a lot of neat ways\nthat we can work with that.\n\n71\n00:03:01.080 --> 00:03:03.940\nAnd Daniel, you wanna go ahead and\nshow us an example of how we can do that?\n\n72\n00:03:03.940 --> 00:03:05.090\n&gt;&gt; Yeah, definitely, let's jump in.\n\n73\n00:03:05.090 --> 00:03:10.060\nI'd like to talk about the, there's\nbasically three different in which you\n\n74\n00:03:10.060 --> 00:03:15.130\nwould probably do some form of\nmath computation in a script.\n\n75\n00:03:15.130 --> 00:03:19.354\nAnd I'm gonna go from my least\nfavorite to my most favorite, right?\n\n76\n00:03:19.354 --> 00:03:23.419\nWe're gonna start with the bottom\nrung of the ladder here,\n\n77\n00:03:23.419 --> 00:03:25.625\nwhich is a command called expr.\n\n78\n00:03:25.625 --> 00:03:27.359\nIt basically stands for\nexpressions, right,\n\n79\n00:03:27.359 --> 00:03:29.710\nwe're doing mathematical expressions.\n\n80\n00:03:29.710 --> 00:03:31.540\nI am not actually gonna show\nyou how to use this thing,\n\n81\n00:03:31.540 --> 00:03:34.590\nbecause it is extremely clunky and\nconvoluted.\n\n82\n00:03:34.590 --> 00:03:38.070\nI want you to be aware of it in\ncase you're like, you know what?\n\n83\n00:03:38.070 --> 00:03:42.540\nI think expr's the greatest thing on\nthe earth, and that's what I'm gonna use.\n\n84\n00:03:42.540 --> 00:03:47.440\nI'm just gonna show you kinda the man\nfile and see what's going on with that.\n\n85\n00:03:47.440 --> 00:03:50.050\nAnd explain why I don't like it,\n\n86\n00:03:50.050 --> 00:03:53.105\nas something that we can do math\nwith inside of our scripts.\n\n87\n00:03:53.105 --> 00:03:57.960\nSo let's take a look at my screen,\nand we'll just do man expr like so,\n\n88\n00:03:57.960 --> 00:04:01.870\nthat gives us this evaluate\nexpressions command.\n\n89\n00:04:01.870 --> 00:04:05.410\nIt's a very extensive man file,\nit's got a lot of options, obviously,\n\n90\n00:04:05.410 --> 00:04:09.330\ncuz this whole 105 lines,\nright, amazing stuff.\n\n91\n00:04:09.330 --> 00:04:13.175\nThe problem with it, actually,\nit's pretty simple to use, as you can see.\n\n92\n00:04:13.175 --> 00:04:17.259\nJust ARG1, pipe to ARG2, if ARG1 is\nneither null nor 0 otherwise, yeah.\n\n93\n00:04:17.259 --> 00:04:20.960\nIt gives you the breakdown of what\neach one of these operations can do.\n\n94\n00:04:20.960 --> 00:04:25.998\nThe problem is it uses some characters\nthat are Bash special characters.\n\n95\n00:04:25.998 --> 00:04:29.110\nAnd you think, so what,\nwhat's the big deal?\n\n96\n00:04:29.110 --> 00:04:33.612\nProblem comes in, is when you're start\ndoing really lengthy computations,\n\n97\n00:04:33.612 --> 00:04:35.533\nyou'll be doing a lot negation.\n\n98\n00:04:35.533 --> 00:04:40.729\nCuz you've gotta say, Bash,\ndon't interpret this as a Bash command,\n\n99\n00:04:40.729 --> 00:04:43.040\nor as a Bash special character.\n\n100\n00:04:43.040 --> 00:04:48.940\nI need you to let expr use\nthat in its computation.\n\n101\n00:04:48.940 --> 00:04:53.180\nSo it can get really clunky and\nreal convoluted to work with expr.\n\n102\n00:04:53.180 --> 00:04:56.750\n&gt;&gt; Yeah, and it's not the only\ncommand that's like that.\n\n103\n00:04:56.750 --> 00:04:59.570\nThe majority of commands are designed,\nnot for scripts to use them, but\n\n104\n00:04:59.570 --> 00:05:02.750\nfor people to use them, or\nto be used by themselves.\n\n105\n00:05:02.750 --> 00:05:06.220\nSo if I use expr by itself,\nI can go in and do all these options,\n\n106\n00:05:06.220 --> 00:05:07.840\neverything works great, right?\n\n107\n00:05:07.840 --> 00:05:10.580\nDoing it interactively,\nme using it, just calling that.\n\n108\n00:05:10.580 --> 00:05:13.861\nBut when you want it to play nice with\nother things, and play nice in a script,\n\n109\n00:05:13.861 --> 00:05:15.493\nit's not very good for that, right?\n\n110\n00:05:15.493 --> 00:05:18.099\n&gt;&gt; Yeah, and\neven just the readability alone.\n\n111\n00:05:18.099 --> 00:05:20.938\nYou start looking at the script and\nthere's a lot of things going on.\n\n112\n00:05:20.938 --> 00:05:24.702\nIf you're not familiar with expr, you\nmight have to jump to the man page here,\n\n113\n00:05:24.702 --> 00:05:27.400\nand take a look, and\ntry to figure out what's going on.\n\n114\n00:05:27.400 --> 00:05:30.052\nYou gotta remember, you're probably not\nthe only one that's gonna be looking at\n\n115\n00:05:30.052 --> 00:05:32.170\nyour scripts or using your scripts.\n\n116\n00:05:32.170 --> 00:05:36.531\nSo it does help for us to be kind for\nthe rest of humanity, and\n\n117\n00:05:36.531 --> 00:05:40.038\ntry to make as easy as possible for\nus to do this.\n\n118\n00:05:40.038 --> 00:05:43.542\nNow the cool thing is,\nis that Bash can do math by itself,\n\n119\n00:05:43.542 --> 00:05:45.450\nit doesn't need expr to do it.\n\n120\n00:05:45.450 --> 00:05:49.872\nThat's another good reason that we\nwouldn't necessarily use something like\n\n121\n00:05:49.872 --> 00:05:50.748\nexpr, right?\n\n122\n00:05:50.748 --> 00:05:54.596\nCuz Bash itself can perform\nmath calculations, and\n\n123\n00:05:54.596 --> 00:05:57.120\nit does that using brackets.\n\n124\n00:05:57.120 --> 00:06:00.910\nLet me get out of this man page,\ncuz we don't really need it any more, and\n\n125\n00:06:00.910 --> 00:06:02.100\nlet me show you what I'm talking about.\n\n126\n00:06:02.100 --> 00:06:06.800\nI created a script called mathy cuz\nwhat the heck, right, mathy sounds fun.\n\n127\n00:06:06.800 --> 00:06:11.100\nAnd let's take a look at that,\ncat mathy.sh.\n\n128\n00:06:11.100 --> 00:06:13.310\nAnd inside of the script,\nI've created some variables.\n\n129\n00:06:13.310 --> 00:06:16.400\nAnd remember, start off with that\ngood old shebang because without it,\n\n130\n00:06:16.400 --> 00:06:19.160\nit's going to get weird, right?\n\n131\n00:06:19.160 --> 00:06:23.450\nAnd my variables here,\nwe've got var 1, var 2, and var 3.\n\n132\n00:06:23.450 --> 00:06:28.200\nvar1 has what looks like\ncommand substitution going on.\n\n133\n00:06:28.200 --> 00:06:32.010\nBut it's the brackets, instead of the open\nand close parentheses, it's open and\n\n134\n00:06:32.010 --> 00:06:33.190\nclose brackets.\n\n135\n00:06:33.190 --> 00:06:36.210\nWell, that bracket is basically telling\n\n136\n00:06:36.210 --> 00:06:38.150\nthat variable that we're\ndoing an expression.\n\n137\n00:06:38.150 --> 00:06:42.480\nWe're actually evaluating\nsome type of expression, and\n\n138\n00:06:42.480 --> 00:06:44.750\nthat I need you to do that function.\n\n139\n00:06:44.750 --> 00:06:48.330\nSo I just put a math function in there,\n1 + 5, very simple math,\n\n140\n00:06:48.330 --> 00:06:49.560\nwe can all do it in our heads.\n\n141\n00:06:49.560 --> 00:06:54.853\nTry to keep these demonstrations as simple\nas possible, for you good folks out there.\n\n142\n00:06:54.853 --> 00:06:57.558\nDon't want to inundate you with any\nkind of quadratic equations or anything-\n\n143\n00:06:57.558 --> 00:06:58.904\n&gt;&gt; [LAUGH]\n\n144\n00:06:58.904 --> 00:07:00.934\n&gt;&gt; Because I can't do them.\n\n145\n00:07:00.934 --> 00:07:02.081\n&gt;&gt; [LAUGH]\n&gt;&gt; Major reason, but\n\n146\n00:07:02.081 --> 00:07:03.700\nfor your benefit as well, right?\n\n147\n00:07:03.700 --> 00:07:08.130\nBut I've got var1=$[1 + 5], all right,\nso it's gonna do that 1 + 5.\n\n148\n00:07:08.130 --> 00:07:11.667\nIt's gonna take that value, and it's gonna\nplace that inside of the var1 variable.\n\n149\n00:07:12.780 --> 00:07:15.644\nvar1=$[4 + 2], which is, oddly enough,\n\n150\n00:07:15.644 --> 00:07:19.120\nthe same value that's gonna be\ninside of the var2 variable.\n\n151\n00:07:19.120 --> 00:07:23.240\nSo it's gonna do 4 + 2 = 6,\nput that in the var2, right?\n\n152\n00:07:23.240 --> 00:07:29.010\nThen we've got var3, which is actually\ntaking the values of the other variables.\n\n153\n00:07:29.010 --> 00:07:32.967\nAnd since they're numbers,\nI can do a math equation against them.\n\n154\n00:07:32.967 --> 00:07:37.591\nIf it's 6 + 6, and I put that together,\ncomes out with 12.\n\n155\n00:07:37.591 --> 00:07:43.344\nThat gets pumped into var3, and\nnow var3's value is that sum.\n\n156\n00:07:43.344 --> 00:07:46.411\nAnd if I call var3, which is what\nI'm doing with my echo command.\n\n157\n00:07:46.411 --> 00:07:50.935\nI say echo whatever is in var3,\nit should be the value of 12.\n\n158\n00:07:50.935 --> 00:07:53.408\nSo we're doing some very basic math, but\n\n159\n00:07:53.408 --> 00:07:56.737\nit's to show you that Bash\nitself actually can do math.\n\n160\n00:07:56.737 --> 00:08:01.345\nSo let's see what it looks like, I'll take\nit on a little run there, mathy .sh, and\n\n161\n00:08:01.345 --> 00:08:03.521\nthere we go, it echoes the number 12.\n\n162\n00:08:03.521 --> 00:08:07.795\nBecause that is, all those math\ncomputations that we did ultimately\n\n163\n00:08:07.795 --> 00:08:11.130\nequaled 12, and\nthat was what we echoed out.\n\n164\n00:08:11.130 --> 00:08:14.659\nSo there you go, it does actually do math.\n\n165\n00:08:14.659 --> 00:08:17.512\nNow you might think,\nall right, cool, we're done,\n\n166\n00:08:17.512 --> 00:08:19.199\nmath show is five minutes long.\n\n167\n00:08:19.199 --> 00:08:21.161\nThat's awesome, thanks for\nwatching, right?\n\n168\n00:08:21.161 --> 00:08:24.138\nWell, there's one little issue here, and\n\n169\n00:08:24.138 --> 00:08:28.894\nthe issue comes into the fact that\nwe have different types of numbers.\n\n170\n00:08:28.894 --> 00:08:32.581\nAnd what we worked with here,\nwith this 1, and this 5, and this 4, and\n\n171\n00:08:32.581 --> 00:08:34.138\nthis 2, and the number 12?\n\n172\n00:08:34.138 --> 00:08:36.966\nThey're actually what's called integers,\n\n173\n00:08:36.966 --> 00:08:40.383\nwhole numbers,\nthey don't have anything after that.\n\n174\n00:08:40.383 --> 00:08:45.100\nBut you and I, a lot of times in our life,\nwe don't work with just whole numbers.\n\n175\n00:08:45.100 --> 00:08:49.293\nThey have decimal places,\nremainders if we're doing division, right?\n\n176\n00:08:49.293 --> 00:08:55.199\nSo how do, let me put it this way,\nthat will be a problem for Bash.\n\n177\n00:08:55.199 --> 00:08:58.587\nBash does not work with what's\ncalled floating point numbers,\n\n178\n00:08:58.587 --> 00:09:00.200\nand that's the issue.\n\n179\n00:09:00.200 --> 00:09:03.310\nIt only works with those integers,\nthose whole numbers.\n\n180\n00:09:03.310 --> 00:09:06.845\nSo if I give it a weird, something's\ngonna come up with a remainder,\n\n181\n00:09:06.845 --> 00:09:08.930\nsomething's gonna have a decimal place?\n\n182\n00:09:08.930 --> 00:09:11.370\nIt's not gonna be able to interpret that,\nits only gonna give me whole numbers.\n\n183\n00:09:11.370 --> 00:09:15.550\nAnd that's not gonna work for\nme if I'm trying to calculate percentage,\n\n184\n00:09:15.550 --> 00:09:17.480\nthat's not gonna work.\n\n185\n00:09:17.480 --> 00:09:19.610\n&gt;&gt; And even if you're just working\nwith whole numbers, right?\n\n186\n00:09:19.610 --> 00:09:21.590\nIf you're doing addition,\nsubtraction, or multiplication, and\n\n187\n00:09:21.590 --> 00:09:23.340\nyou're working with whole numbers,\neverything's fine.\n\n188\n00:09:23.340 --> 00:09:27.286\nBut, the moment you bring division into\nplay, and you do four divided by three,\n\n189\n00:09:27.286 --> 00:09:29.737\nnow you're gonna get\na result that has a decimal.\n\n190\n00:09:29.737 --> 00:09:31.993\nSo the numbers you're feeding\nin are whole numbers, but\n\n191\n00:09:31.993 --> 00:09:33.975\nthe result has the decimal and\nthat's a problem.\n\n192\n00:09:33.975 --> 00:09:36.608\nSo we've got this problem here\nwith the data we're feeding in,\n\n193\n00:09:36.608 --> 00:09:38.710\nas well as the data we're getting out.\n\n194\n00:09:38.710 --> 00:09:41.430\nAnd we need to be able to support those\ndecimals, so what do we do for that?\n\n195\n00:09:41.430 --> 00:09:45.863\n&gt;&gt; Yeah, what we can do is we can either,\nA, we can use another shell.\n\n196\n00:09:45.863 --> 00:09:50.508\nOther shells do work with floating\npoint math, Zsh actually does it.\n\n197\n00:09:50.508 --> 00:09:54.237\nWell, let me do this, let's give you an\nexample of what it looks like when we use\n\n198\n00:09:54.237 --> 00:09:56.519\nBash to try to do floating\npoint arithmetic, and\n\n199\n00:09:56.519 --> 00:09:58.540\nthen we'll show you what Zsh does with it.\n\n200\n00:09:58.540 --> 00:10:01.250\nAll right so we have mathy here,\n\n201\n00:10:01.250 --> 00:10:06.187\nI actually have mathy2 as well,\nwe'll cat mathy2.sh.\n\n202\n00:10:06.187 --> 00:10:11.880\nAnd you'll notice it's a division problem,\n100 / 45, right?\n\n203\n00:10:11.880 --> 00:10:15.816\nAnd that value is gonna be put into var1,\nand you just echo var1,\n\n204\n00:10:15.816 --> 00:10:17.513\nwhat's our var1 gonna be?\n\n205\n00:10:17.513 --> 00:10:23.228\nWell it should be, 45 will go into 100\n2 times with a remainder of 22222,\n\n206\n00:10:23.228 --> 00:10:24.684\nsomething, right.\n\n207\n00:10:24.684 --> 00:10:28.166\nBut Bash is gonna have an issue with that.\n\n208\n00:10:28.166 --> 00:10:30.128\nLet's see what it does\nwhen we run this thing.\n\n209\n00:10:30.128 --> 00:10:35.515\n&gt;&gt; Just for the record,\nit should be 2.2222.\n\n210\n00:10:35.515 --> 00:10:36.178\n&gt;&gt; 2222.\n\n211\n00:10:36.178 --> 00:10:37.141\n&gt;&gt; Lots of tutus.\n\n212\n00:10:37.141 --> 00:10:39.139\n&gt;&gt; Lots of 2's going on,\nlots of tutus, nice.\n\n213\n00:10:39.139 --> 00:10:40.321\nMy daughter would love this show.\n\n214\n00:10:40.321 --> 00:10:43.678\n&gt;&gt; [LAUGH]\n&gt;&gt; Tutus, what, what, ballet,\n\n215\n00:10:43.678 --> 00:10:44.561\nshe loves it.\n\n216\n00:10:44.561 --> 00:10:47.740\nWhen we fire this off,\nif you notice, I only get 2.\n\n217\n00:10:47.740 --> 00:10:52.670\nI only get what the actual value was,\nright, I don't get that remainder.\n\n218\n00:10:52.670 --> 00:10:54.860\nAnd a lot of times that's what I need,\nis the remainder.\n\n219\n00:10:54.860 --> 00:10:59.020\n&gt;&gt; And here it's rounded down, and so\nthat's not a number we want to act upon,\n\n220\n00:10:59.020 --> 00:11:00.170\nbecause it's not accurate.\n\n221\n00:11:00.170 --> 00:11:03.240\n&gt;&gt; Right, and\nif accuracy is your goal, and\n\n222\n00:11:03.240 --> 00:11:07.000\nusually in math it is,\nthis isn't gonna work for us.\n\n223\n00:11:07.000 --> 00:11:10.686\nSo like I said, we could jump over\nto Zsh if you have it installed,\n\n224\n00:11:10.686 --> 00:11:11.699\nyou just hit zsh.\n\n225\n00:11:11.699 --> 00:11:14.407\nUsually it'll give you a prompt if it's\nthe first time you've ever run it,\n\n226\n00:11:14.407 --> 00:11:17.415\nasking you about some options, about\nconfig files and things of that nature.\n\n227\n00:11:17.415 --> 00:11:18.285\nBut once you get past that,\n\n228\n00:11:18.285 --> 00:11:22.425\nevery time you run Zsh,\nit just drops you to the actual shell.\n\n229\n00:11:22.425 --> 00:11:25.225\nAnd I can run some of those commands,\nI can, let's do that.\n\n230\n00:11:25.225 --> 00:11:31.675\nWe'll say, let's see,\nI'll just run ./mathy2.sh.\n\n231\n00:11:31.675 --> 00:11:35.510\nAnd look, I get 2 as well,\nweird, why is that happening?\n\n232\n00:11:35.510 --> 00:11:40.120\nDon's looking at me perplexed like,\nis this going to add a timeout time here?\n\n233\n00:11:40.120 --> 00:11:42.270\nAnd I'm like, no,\nthe problem is that with Zsh,\n\n234\n00:11:42.270 --> 00:11:46.922\nif you want to do decimal match,\nyou have to use decimals.\n\n235\n00:11:46.922 --> 00:11:51.223\nYou have to put 10.0,\nor 100.00, and 45.00,\n\n236\n00:11:51.223 --> 00:11:56.550\nif those values aren't there then\nit just gives you Bash-type output.\n\n237\n00:11:56.550 --> 00:11:59.300\nAll right, so you have to kind of\ngive it that functionality, and\n\n238\n00:11:59.300 --> 00:12:01.700\nlet it know that that's what it does.\n\n239\n00:12:01.700 --> 00:12:06.334\nBut if I did that, if I vim mathy2.sh, and\n\n240\n00:12:06.334 --> 00:12:09.840\nI insert, and I come in here, and\n\n241\n00:12:09.840 --> 00:12:15.122\nI change that to 0.00 and 0.00, like so?\n\n242\n00:12:15.122 --> 00:12:20.738\nEsc out, re-run my math, and\naccidentally fat finger,\n\n243\n00:12:20.738 --> 00:12:25.330\nwhere's my mathy2, mathy2, there you go.\n\n244\n00:12:25.330 --> 00:12:29.602\nmathy2, syntax error, invalid arithmetic\noperator, taken your 00, 45, well,\n\n245\n00:12:29.602 --> 00:12:30.757\nlet me see here.\n\n246\n00:12:30.757 --> 00:12:35.448\nI'm in Zsh, the problem is semicolons,\nwe're not in Bash.\n\n247\n00:12:35.448 --> 00:12:37.586\nWith Zsh, it's very C-like, so\n\n248\n00:12:37.586 --> 00:12:41.949\nyou do have to add semicolons at\nthe end of any of your actual commands.\n\n249\n00:12:41.949 --> 00:12:47.905\nLet's do that really quick, it'll\ntake two seconds here, vim mathy2.sh.\n\n250\n00:12:47.905 --> 00:12:48.500\n&gt;&gt; Now Daniel,\n\n251\n00:12:48.500 --> 00:12:51.805\ndoes it matter that your very first\nline calls Bash as your interpreter?\n\n252\n00:12:51.805 --> 00:12:52.816\n&gt;&gt; That also could be an issue.\n\n253\n00:12:52.816 --> 00:12:55.938\n&gt;&gt; [LAUGH]\n&gt;&gt; Don's an astute observer of the human\n\n254\n00:12:55.938 --> 00:12:59.605\npsyche here, and he's realized that\nI forget that thing every time.\n\n255\n00:12:59.605 --> 00:13:00.223\n[LAUGH]\n&gt;&gt; Technically,\n\n256\n00:13:00.223 --> 00:13:02.344\nyou're overriding your shell\non that first line, and\n\n257\n00:13:02.344 --> 00:13:04.197\nthat's important cuz\nsometimes we want that.\n\n258\n00:13:04.197 --> 00:13:08.041\nI wanna know what environment to expect,\nand so we set it to Bash.\n\n259\n00:13:08.041 --> 00:13:09.712\n&gt;&gt; But Daniel, he wants Zsh, and\n\n260\n00:13:09.712 --> 00:13:13.970\nso you gotta make sure that you change\nthat interpreter if you've defined it.\n\n261\n00:13:13.970 --> 00:13:16.557\nIf you haven't defined it, then it would\nrun whatever interpreter you're in.\n\n262\n00:13:16.557 --> 00:13:20.461\n&gt;&gt; I'm not 100% sure whether I need\na semicolon on the end of that echo, but\n\n263\n00:13:20.461 --> 00:13:23.642\nI'm gonna throw it on there for\ngood measure anyway, right?\n\n264\n00:13:23.642 --> 00:13:24.268\n&gt;&gt; It's not gonna hurt.\n\n265\n00:13:24.268 --> 00:13:26.751\n&gt;&gt; Not a huge C guy,\nall right, so there we go.\n\n266\n00:13:26.751 --> 00:13:29.930\nLet's see what happens,\ntry running it again.\n\n267\n00:13:29.930 --> 00:13:32.080\nAnd there we go, and\nit gives me that floating point math.\n\n268\n00:13:32.080 --> 00:13:36.482\nSo I could do this, I could jump to a\ndifferent shell, perform the math I need.\n\n269\n00:13:36.482 --> 00:13:40.523\nPipe that out back into my Bash script,\nor whatever I wanna do with that,\n\n270\n00:13:40.523 --> 00:13:42.600\nI could do it that way as well.\n\n271\n00:13:42.600 --> 00:13:47.159\nBash does do math, but you gotta remember,\nit doesn't do that floating point math.\n\n272\n00:13:47.159 --> 00:13:51.274\nNow, what if I don't want\nto mess around with Zsh,\n\n273\n00:13:51.274 --> 00:13:55.788\nI don't know the ins and outs,\nmuch like my cell phone?\n\n274\n00:13:55.788 --> 00:13:56.993\n&gt;&gt; Maybe you hate semicolons.\n\n275\n00:13:56.993 --> 00:13:59.793\n&gt;&gt; I do, I do, they are the devil.\n\n276\n00:13:59.793 --> 00:14:02.938\nBut we're going to use them a lot, so-\n&gt;&gt; [LAUGH]\n\n277\n00:14:02.938 --> 00:14:03.720\n&gt;&gt; Get ready to dance with\n\n278\n00:14:03.720 --> 00:14:04.424\nthe devil, right?\n\n279\n00:14:04.424 --> 00:14:08.185\nYeah, great question, what do we do?\n\n280\n00:14:08.185 --> 00:14:12.317\nWell, the good news is that some\nsmart fellow out there said,\n\n281\n00:14:12.317 --> 00:14:17.493\nI don't want to jump to this, I don't\nwanna use expr, I just wanna use Bash.\n\n282\n00:14:17.493 --> 00:14:24.290\nWhat if we just build a tool that works\ninside of Bash that will do this for us?\n\n283\n00:14:24.290 --> 00:14:26.850\nAnd God bless them,\nthey did that very thing,\n\n284\n00:14:26.850 --> 00:14:29.520\nand it's called the Bash Calculator, BC.\n\n285\n00:14:29.520 --> 00:14:34.090\nRight, another way to use Because,\nbut nonetheless there it is.\n\n286\n00:14:34.090 --> 00:14:37.530\nLet me get out of Zsh here and\nclear the screen.\n\n287\n00:14:37.530 --> 00:14:44.190\nAnd let's look at man bc, an arbitrary\nprecision calculator language.\n\n288\n00:14:44.190 --> 00:14:48.210\nThat little tag line on the end of that\nsentence is a very important piece of\n\n289\n00:14:48.210 --> 00:14:49.660\nthis information.\n\n290\n00:14:49.660 --> 00:14:54.270\nThis is technically a programing language,\nyou can go crazy with this thing.\n\n291\n00:14:54.270 --> 00:14:59.140\nIt's got variables, it does arrays,\n\n292\n00:14:59.140 --> 00:15:03.080\nyou can do logic with it,\nyou can do functions with it.\n\n293\n00:15:03.080 --> 00:15:06.635\nAll the stuff that we're gonna be\nlearning about to do Bash scripting,\n\n294\n00:15:06.635 --> 00:15:09.732\nyou can do inside of BC,\nit has it's own form of those things.\n\n295\n00:15:09.732 --> 00:15:13.436\nAnd if you go through this man page and\nget really familiar with it,\n\n296\n00:15:13.436 --> 00:15:17.145\nyou could probably do some very\nheavy-handed math type scripting\n\n297\n00:15:17.145 --> 00:15:18.817\ninside of your Bash scripts.\n\n298\n00:15:18.817 --> 00:15:23.900\nIt can get very, very well done,\nthis is an amazing piece of software.\n\n299\n00:15:23.900 --> 00:15:27.910\nSo if you do some statistical mathematics,\nor\n\n300\n00:15:27.910 --> 00:15:31.268\nyou're looking for data sets and\nstuff like that, you know what?\n\n301\n00:15:31.268 --> 00:15:32.350\nI just wanna stick with Bash,\n\n302\n00:15:32.350 --> 00:15:36.430\nI don't have to jump to C, I don't have\nto jump to Python or something like that.\n\n303\n00:15:36.430 --> 00:15:40.410\nYou could probably get a lot of\nyour work done just in Bash itself\n\n304\n00:15:40.410 --> 00:15:45.070\nusing the Bash Calculator, it's\nan interesting and cool piece of software.\n\n305\n00:15:45.070 --> 00:15:48.659\nSo not that we know that it does that,\nit has all those functions,\n\n306\n00:15:48.659 --> 00:15:52.927\nconditional logic, you name it,\nit's all in there, what's the big deal?\n\n307\n00:15:52.927 --> 00:15:56.682\nWell, the big deal is,\nalso does floating point arithmetic, so\n\n308\n00:15:56.682 --> 00:15:59.365\nthat is going to be very,\nvery helpful for us.\n\n309\n00:15:59.365 --> 00:16:00.826\nThere is some interesting things about it.\n\n310\n00:16:00.826 --> 00:16:03.974\nIt is one of those interactive commands\nthat we talked about back in that\n\n311\n00:16:03.974 --> 00:16:05.380\nredirection show.\n\n312\n00:16:05.380 --> 00:16:07.940\nIf I type bc, there's a couple\nof ways I can work with that.\n\n313\n00:16:07.940 --> 00:16:12.630\nI can type in just in the command line and\nsay bc and some options and it runs.\n\n314\n00:16:12.630 --> 00:16:17.790\nOr I can go interactive with it,\nbc hit Enter and drops me to the bc shell.\n\n315\n00:16:17.790 --> 00:16:20.940\nAnd gives me interactive mode\nthat I can work with there.\n\n316\n00:16:20.940 --> 00:16:25.210\nAnd then from there I can\nget access to a lot of\n\n317\n00:16:25.210 --> 00:16:29.580\nthat hardcore functionality that\nwe may be interested in using.\n\n318\n00:16:29.580 --> 00:16:31.185\nLet me quit out of our file here.\n\n319\n00:16:31.185 --> 00:16:35.620\n[COUGH] And let's take a look at that,\nwe'll go into interactive mode, bc.\n\n320\n00:16:35.620 --> 00:16:37.600\nJust type in bc, hit Enter.\n\n321\n00:16:37.600 --> 00:16:41.190\nYou'll notice here we are, it gives me\nthe version, other things of that nature.\n\n322\n00:16:41.190 --> 00:16:45.840\nAnd I can type, warranty for\ndetails, if I feel so inclined.\n\n323\n00:16:45.840 --> 00:16:48.620\nProbably help also with,\ngive you some information.\n\n324\n00:16:48.620 --> 00:16:51.040\nUsually does,\nI couldn't swear to it, though.\n\n325\n00:16:51.040 --> 00:16:54.740\nBut what we wanna do is say,\nI wanna work with floating-point math.\n\n326\n00:16:54.740 --> 00:16:58.547\nSo I have to do a certain thing\nkinda what we did with Zsh.\n\n327\n00:16:58.547 --> 00:17:03.317\nI have to tell it I'm working\nwith decimals, I'm working with\n\n328\n00:17:03.317 --> 00:17:08.630\nfloating point numbers by putting\nthe .00 as many spaces as I want.\n\n329\n00:17:08.630 --> 00:17:13.796\nAnd if I wanted three decimal places,\nI do .000, something like that.\n\n330\n00:17:13.796 --> 00:17:16.614\nAnd it would go out and\nget into the truncating and\n\n331\n00:17:16.614 --> 00:17:19.310\ngetting just the right data for\nwhat you need.\n\n332\n00:17:19.310 --> 00:17:23.710\nBut I need to let it know I'm\nusing that floating point map.\n\n333\n00:17:23.710 --> 00:17:24.496\nSo what do I do?\n\n334\n00:17:24.496 --> 00:17:27.877\nI have to type the scale command,\nS-C-A-L-E, like that.\n\n335\n00:17:27.877 --> 00:17:31.355\nAnd then I say = and\nthen whatever scale I want to do.\n\n336\n00:17:31.355 --> 00:17:35.259\nI'm typically working with just\ntwo decimal places, out to the,\n\n337\n00:17:35.259 --> 00:17:40.085\nwhat is that the tenth, or the hundredths,\nsomething like, yeah, the tenths.\n\n338\n00:17:40.085 --> 00:17:44.636\nSo I would just say 2, scale=2,\nthat'll give me whole number .00, or\n\n339\n00:17:44.636 --> 00:17:47.587\n.01, or .05, or .27, whatever it is.\n\n340\n00:17:47.587 --> 00:17:51.195\nSo money, things of that nature,\ntypically that's the scale,\n\n341\n00:17:51.195 --> 00:17:54.025\nat least we work with,\nhowever, on a usual basis.\n\n342\n00:17:54.025 --> 00:17:56.150\n&gt;&gt; And if you need more, you just\nput a higher number in there, right?\n\n343\n00:17:56.150 --> 00:17:57.165\nIt's up to you to pick what you want.\n\n344\n00:17:57.165 --> 00:18:00.438\n&gt;&gt; That's exactly right,\nif you're working with more complex math\n\n345\n00:18:00.438 --> 00:18:03.610\nthat you need to have better\naccuracy with, something like pi.\n\n346\n00:18:03.610 --> 00:18:07.050\nSo you're maybe doing a radius\ncalculation, stuff like that.\n\n347\n00:18:07.050 --> 00:18:12.530\n1, 4, off on the further you go down\nthat pipe, the more accurate it becomes.\n\n348\n00:18:12.530 --> 00:18:13.237\nYou could definitely do that.\n\n349\n00:18:13.237 --> 00:18:15.999\nI could put 7, I could do 100,\ndo whatever I like.\n\n350\n00:18:15.999 --> 00:18:17.620\nI'm just gonna stick with scale=2.\n\n351\n00:18:17.620 --> 00:18:20.300\nAnd then I hit Enter, and I already did.\n\n352\n00:18:20.300 --> 00:18:21.800\nIt took that in as information.\n\n353\n00:18:21.800 --> 00:18:23.292\nNow I've just got a blank line.\n\n354\n00:18:23.292 --> 00:18:27.665\nBut I can also then type in my math.\n\n355\n00:18:27.665 --> 00:18:32.721\nSo if I'm doing 3.44 divided by 5.\n\n356\n00:18:32.721 --> 00:18:38.660\nSee, 0.68 gives me that remainder that\nI would need to have in my script.\n\n357\n00:18:38.660 --> 00:18:40.220\nSo if that's what I'm looking for,\na remainder,\n\n358\n00:18:40.220 --> 00:18:42.520\nI can jump to bc to get that remainder.\n\n359\n00:18:42.520 --> 00:18:45.200\nI can also work with those variables.\n\n360\n00:18:45.200 --> 00:18:47.410\nRemember, I told you,\nthis is a full scripting language.\n\n361\n00:18:47.410 --> 00:18:54.820\nI can put variables in my bc's portion of\nthe script, and that's really powerful.\n\n362\n00:18:54.820 --> 00:18:59.396\nNot only that, but it can look at\nthe variables that are in your Bash\n\n363\n00:18:59.396 --> 00:19:04.085\nportion of the script and\nuse them which is very very handy, right?\n\n364\n00:19:04.085 --> 00:19:05.451\nSo let's take a look at that.\n\n365\n00:19:05.451 --> 00:19:13.003\nLet me, I don't remember, it quits out,\nI'm gonna go back in, and let's do this.\n\n366\n00:19:13.003 --> 00:19:21.813\nI can type in var1=10, var1.\n\n367\n00:19:21.813 --> 00:19:24.949\nThen I can multiply it by\na number if I want, by 4.\n\n368\n00:19:24.949 --> 00:19:27.413\nLook at that, see it's doing calculations.\n\n369\n00:19:27.413 --> 00:19:29.771\nSo I can get that as output.\n\n370\n00:19:29.771 --> 00:19:32.149\nAnd it's working with its own variables,\nI set that var.\n\n371\n00:19:32.149 --> 00:19:33.664\nThat's not a Bash variable.\n\n372\n00:19:33.664 --> 00:19:37.771\nI can't jump to my Bash shell and\necho var1 and get 10.\n\n373\n00:19:37.771 --> 00:19:42.860\nThat's not gonna work, that's calling\nfrom, that's inside the bc, itself.\n\n374\n00:19:42.860 --> 00:19:44.900\nAnd that's something important that\nwe've gotta keep in our heads,\n\n375\n00:19:44.900 --> 00:19:50.240\nthat when you create a bc variable,\nBash can't see that.\n\n376\n00:19:50.240 --> 00:19:56.100\nAlthough bc can see Bash's variables,\nit's not vice versa, right?\n\n377\n00:19:56.100 --> 00:19:58.850\nSo that's something just,\nwe gotta keep straight in our noggin here.\n\n378\n00:20:00.290 --> 00:20:06.947\nSo let's see what this looks like\ninside of an actual Bash script, right?\n\n379\n00:20:06.947 --> 00:20:07.981\n&gt;&gt; Cuz if we do it in a script,\n\n380\n00:20:07.981 --> 00:20:10.340\nobviously we can't have\nan interactive prompt like this.\n\n381\n00:20:10.340 --> 00:20:13.690\nWe need to be able to feed data into it,\nget that final result back.\n\n382\n00:20:13.690 --> 00:20:16.700\nAnd then work with that\nresult not in this manner.\n\n383\n00:20:16.700 --> 00:20:18.530\nSo we have a whole different\nway of doing that?\n\n384\n00:20:18.530 --> 00:20:19.830\n&gt;&gt; Yeah, we got a whole\ndifferent way of doing that.\n\n385\n00:20:19.830 --> 00:20:23.708\nLet's take a look at some\nsimple version of this.\n\n386\n00:20:23.708 --> 00:20:25.695\nAnd then we'll go into a little\nmore complex, all right?\n\n387\n00:20:25.695 --> 00:20:29.877\nSo let me quit out of here and\nclear the screen.\n\n388\n00:20:29.877 --> 00:20:34.026\nSo like,\nlook a pretty tablet to work with here.\n\n389\n00:20:34.026 --> 00:20:36.458\nAnd let's see, what do I want to do here?\n\n390\n00:20:36.458 --> 00:20:38.545\nI'm gonna create a script.\n\n391\n00:20:38.545 --> 00:20:41.370\nI'm gonna call it,\n\n392\n00:20:41.370 --> 00:20:46.698\nwe'll just call it bcscript1.sh.\n\n393\n00:20:46.698 --> 00:20:53.724\nAnd I'll put my she bang [INAUDIBLE] bash,\n\n394\n00:20:53.724 --> 00:20:57.951\nand we will say var1=.\n\n395\n00:20:57.951 --> 00:21:01.950\nI'm gonna use command substitution here,\nnot the brackets.\n\n396\n00:21:01.950 --> 00:21:06.095\nI'm not asking Bash to do\nmath per se here so far.\n\n397\n00:21:06.095 --> 00:21:08.836\nI want bc to actually do the math for me.\n\n398\n00:21:08.836 --> 00:21:10.755\nSo I'm actually gonna use the bc command,\n\n399\n00:21:10.755 --> 00:21:13.540\nwhich is the command substitution\nthat we're working with.\n\n400\n00:21:13.540 --> 00:21:17.712\nSo I'm gonna echo, let's see here.\n\n401\n00:21:17.712 --> 00:21:19.833\nI'll put my parenthesis here.\n\n402\n00:21:19.833 --> 00:21:20.996\nYeah I got everything right.\n\n403\n00:21:20.996 --> 00:21:21.913\nI got everything right.\n\n404\n00:21:21.913 --> 00:21:26.415\nAnd we'll say scale=2,\njust like what we saw, right?\n\n405\n00:21:26.415 --> 00:21:27.236\nAnd then,\n\n406\n00:21:27.236 --> 00:21:32.719\ndon't forget I do need to separate\nthese out by the dreaded semicolon.\n\n407\n00:21:32.719 --> 00:21:33.743\nSo just keep that in mind.\n\n408\n00:21:33.743 --> 00:21:35.895\nIf you're kind of one lining this,\n\n409\n00:21:35.895 --> 00:21:39.852\nwhich is the most simple form of\nworking it into your Bash script.\n\n410\n00:21:39.852 --> 00:21:43.121\nYou will need, for\nevery command inside of bc,\n\n411\n00:21:43.121 --> 00:21:46.975\nyou will need semicolon to let\nbc know this is a command.\n\n412\n00:21:46.975 --> 00:21:49.210\nNow prepare for another one, okay?\n\n413\n00:21:49.210 --> 00:21:51.217\nSo just be aware of that.\n\n414\n00:21:51.217 --> 00:21:55.992\nAnd then I can do my math,\n3.44 divided by 5,\n\n415\n00:21:55.992 --> 00:22:00.700\nclose my parentheses or my double quotes.\n\n416\n00:22:00.700 --> 00:22:03.522\nAnd then I'm gonna just pipe that into bc.\n\n417\n00:22:03.522 --> 00:22:07.367\nNow you see why all that redirection we\nhad, you see the whole purpose of that is\n\n418\n00:22:07.367 --> 00:22:09.590\nbecause we're doing\na lot of that right now.\n\n419\n00:22:11.020 --> 00:22:12.850\nAnd then close this out.\n\n420\n00:22:12.850 --> 00:22:15.036\nAnd I think we should be good to go there.\n\n421\n00:22:15.036 --> 00:22:20.172\nAnd then I'll just echo var1 okay?\n\n422\n00:22:20.172 --> 00:22:26.120\nEscape that out, wq, we will chmod u+x.\n\n423\n00:22:26.120 --> 00:22:27.671\nDon't do the bad way Lowrie.\n\n424\n00:22:27.671 --> 00:22:33.079\nbcscript1 go and bcscript1, fire it off.\n\n425\n00:22:33.079 --> 00:22:37.939\nAnd look at that, my Bash script\nhas used bc inside of Bash to give\n\n426\n00:22:37.939 --> 00:22:40.640\nme the value that I'm looking for.\n\n427\n00:22:40.640 --> 00:22:43.770\nAgain, that's one of the more\nsimplistic ways that we could do it.\n\n428\n00:22:43.770 --> 00:22:45.690\nWe could kinda chain that along.\n\n429\n00:22:45.690 --> 00:22:49.240\nWhat if we wanted to do that kind of\ninteractive type mode here, right?\n\n430\n00:22:49.240 --> 00:22:51.269\nWe could do that as well.\n\n431\n00:22:51.269 --> 00:22:56.037\nSo we're gonna make another script and\nsee how that works out.\n\n432\n00:22:56.037 --> 00:23:00.940\nI also wanna show how you can kinda\nwork with the two different variables.\n\n433\n00:23:00.940 --> 00:23:02.827\nLet's do that first actually.\n\n434\n00:23:02.827 --> 00:23:08.043\nI wanna use variables in my Bash\nscript and feed that into bc.\n\n435\n00:23:08.043 --> 00:23:12.033\nHave bc do the calculations,\ncome back out and get some results.\n\n436\n00:23:12.033 --> 00:23:14.625\nSo, give you a little\nidea of how that looks.\n\n437\n00:23:14.625 --> 00:23:19.574\nSo I'll do vim bcscript2.sh.\n\n438\n00:23:19.574 --> 00:23:25.711\nAnd insert, Bash,\n\n439\n00:23:25.711 --> 00:23:30.258\nthere we go, and\nwe'll say, let's see here.\n\n440\n00:23:30.258 --> 00:23:35.540\nWe'll use var1 again here, I always\nlove var, because I'm very creative.\n\n441\n00:23:35.540 --> 00:23:39.520\nWe'll make it equal 100, we'll do var2=.\n\n442\n00:23:39.520 --> 00:23:43.163\nWe'll do our 45,\nour division problem, here.\n\n443\n00:23:43.163 --> 00:23:49.200\nAnd then we'll say var3=,\ncommand a substitution,\n\n444\n00:23:49.200 --> 00:23:53.703\nand echo, don't forget our scale=2.\n\n445\n00:23:53.703 --> 00:23:58.173\nAnd then our semicolon, and\nthen, I'm gonna actually use.\n\n446\n00:23:58.173 --> 00:24:01.159\nYou'll notice these two vars right here.\n\n447\n00:24:01.159 --> 00:24:03.079\nThey're inside a bash.\n\n448\n00:24:03.079 --> 00:24:05.982\nAnd so I'm going to send those into BC.\n\n449\n00:24:05.982 --> 00:24:07.970\nIt can, to show you,\nit can actually read from it.\n\n450\n00:24:09.020 --> 00:24:14.666\nSo we'll say, var1, And\n\n451\n00:24:14.666 --> 00:24:19.140\nthen divided by var2.\n\n452\n00:24:19.140 --> 00:24:21.770\nSo there's my quotation.\n\n453\n00:24:21.770 --> 00:24:28.398\nPipe that into BC and then hammer that\nout like that, and then echo var3.\n\n454\n00:24:28.398 --> 00:24:32.010\nAll right, so all things worked correctly.\n\n455\n00:24:32.010 --> 00:24:35.550\nI should be able to take the two\nvariables that I've created in bash,\n\n456\n00:24:35.550 --> 00:24:40.620\npipe them into BC, let BC work on them,\nand then hammer that back out\n\n457\n00:24:40.620 --> 00:24:44.200\ninto our variable that's in dash and\nthen echo that to the screen.\n\n458\n00:24:44.200 --> 00:24:46.950\nSo if everything works,\nwe should be good to go.\n\n459\n00:24:46.950 --> 00:24:48.620\nAnd chmod.\n\n460\n00:24:48.620 --> 00:24:51.819\n&gt;&gt; And the nice part here is by using\nvariables we can come back in and\n\n461\n00:24:51.819 --> 00:24:53.011\neasily swap those out.\n\n462\n00:24:53.011 --> 00:24:55.848\nAnd later on we'll see where we can\neven pass, not in this episode but in\n\n463\n00:24:55.848 --> 00:24:59.230\nanother episode, where we can pass those\nvariables in as command lines arguments.\n\n464\n00:24:59.230 --> 00:25:01.630\nSo we call the script,\nwe give them those two values, and\n\n465\n00:25:01.630 --> 00:25:04.410\nnow we get a different result each time\ncuz we're feeding in different inputs.\n\n466\n00:25:04.410 --> 00:25:08.510\nSo this is kind of setting the stage for\nthat more advanced functionality later.\n\n467\n00:25:08.510 --> 00:25:09.960\n&gt;&gt; Yeah, great point, Don.\n\n468\n00:25:09.960 --> 00:25:13.160\nSo I set the permissions,\nhopefully we fire this off,\n\n469\n00:25:13.160 --> 00:25:14.968\nwe should get that calculation.\n\n470\n00:25:14.968 --> 00:25:18.606\nSo ./bcscript2.sh,\n\n471\n00:25:18.606 --> 00:25:23.240\nand look at that, 2.22.\n\n472\n00:25:23.240 --> 00:25:26.760\nSo we weren't getting that before and\nnow we can work that floating point.\n\n473\n00:25:26.760 --> 00:25:28.770\nAgain, these are the more\nsimplistic forms.\n\n474\n00:25:28.770 --> 00:25:32.910\nWe're working our way to a little\nmore interactive with BC.\n\n475\n00:25:32.910 --> 00:25:36.900\nI've already actually created a script for\nthis cuz I don't want you guys to watch me\n\n476\n00:25:36.900 --> 00:25:38.780\nbang at the keyboard,\nI'm horrible at that.\n\n477\n00:25:38.780 --> 00:25:40.830\nSo I've pre-built this turkey here so\n\n478\n00:25:40.830 --> 00:25:43.162\nwe can just take it out of the oven and\nenjoy.\n\n479\n00:25:43.162 --> 00:25:44.140\nMan, it's good.\n\n480\n00:25:44.140 --> 00:25:45.320\nI'm thinking Thanksgiving.\n\n481\n00:25:45.320 --> 00:25:47.250\nAll right, get mind off of food,\nmind off of food.\n\n482\n00:25:47.250 --> 00:25:50.310\nAll right, LS,\nit is just called mathy, that's it.\n\n483\n00:25:50.310 --> 00:25:55.303\nSo let's cat mathy3.sh,\n\n484\n00:25:55.303 --> 00:25:58.010\nand here we go.\n\n485\n00:25:58.010 --> 00:26:00.415\nSo I've got some variables\nthat I'm declaring,\n\n486\n00:26:00.415 --> 00:26:04.110\n[LAUGH] I have the correct shebang,\nthat's always a good idea.\n\n487\n00:26:04.110 --> 00:26:09.297\nI got var01 equaling 11.11 and\n2 equaling 22.22 and\n\n488\n00:26:09.297 --> 00:26:12.322\n33.33 and var4 equaling 44.\n\n489\n00:26:12.322 --> 00:26:16.750\nThen I have var5 which if\nyou look at the format,\n\n490\n00:26:16.750 --> 00:26:22.700\nit's working with that interactive\nway that BC can run, right.\n\n491\n00:26:22.700 --> 00:26:27.751\nI got my input redirectors,\nmy EOF letting it know that when\n\n492\n00:26:27.751 --> 00:26:34.270\nyou find the EOF that's the end of input,\nstart your processing.\n\n493\n00:26:34.270 --> 00:26:39.270\nAnd what I've done was I set the scale\nto four, so just for what the heck,\n\n494\n00:26:39.270 --> 00:26:41.050\nlet's change it up,\nmake it a little different.\n\n495\n00:26:42.310 --> 00:26:45.660\nAnd then I've created a variable,\na1 equals var1,\n\n496\n00:26:45.660 --> 00:26:50.840\nwhich is 11.11 times var2, which is 22.22.\n\n497\n00:26:50.840 --> 00:26:54.520\nNow this is the BC variable,\nit's not a bash variable.\n\n498\n00:26:54.520 --> 00:26:58.210\nI can't then jump out into\nmy bash script later and\n\n499\n00:26:58.210 --> 00:27:01.950\ntype in a1, reference a1,\nit's not gonna do that.\n\n500\n00:27:01.950 --> 00:27:05.630\nBut I am able to do that in BC\nwhere I can read from bash.\n\n501\n00:27:05.630 --> 00:27:09.557\nI've got b1 equals var3 times var4, and\n\n502\n00:27:09.557 --> 00:27:15.194\nthen add the values of a1 and\nb1, and then there's your EOF.\n\n503\n00:27:15.194 --> 00:27:19.531\nAnd then finishing it all off with this\nlittle parentheses which you need when\n\n504\n00:27:19.531 --> 00:27:20.940\nyou're doing scripts.\n\n505\n00:27:20.940 --> 00:27:23.680\nIf we were on the actual file itself,\n\n506\n00:27:23.680 --> 00:27:26.760\nI don't know, I'm not 100% sure\nwhether you would need that or not.\n\n507\n00:27:26.760 --> 00:27:28.830\nI think the EOF is letting\nyou know you're done there.\n\n508\n00:27:28.830 --> 00:27:31.770\nYou hit the Enter key and\nyou're gone, you're off to the races.\n\n509\n00:27:31.770 --> 00:27:33.688\nBut for your files you do need that.\n\n510\n00:27:33.688 --> 00:27:36.380\nWere doing that, we do need this\nbecause I'm doing command substitution,\n\n511\n00:27:36.380 --> 00:27:37.930\nthat's what it's for.\n\n512\n00:27:37.930 --> 00:27:40.330\nThe dollar sign open\nparentheses close parentheses.\n\n513\n00:27:40.330 --> 00:27:42.960\nNotice all that is within that scope, so\n\n514\n00:27:42.960 --> 00:27:49.385\nI have to let the variable know that's\nwhere we're done taking a value, right.\n\n515\n00:27:49.385 --> 00:27:51.010\nAnd if everything works well,\n\n516\n00:27:51.010 --> 00:27:55.400\nwe should have echoed the final value\nis var5, whatever var5 might be.\n\n517\n00:27:56.430 --> 00:27:59.820\nI can fire this off .mathy., was it mthy3?\n\n518\n00:27:59.820 --> 00:28:03.862\nYeah, .sh, and\nthe final answer is 1713.3842,\n\n519\n00:28:03.862 --> 00:28:06.405\ngiving us four places decimal point.\n\n520\n00:28:06.405 --> 00:28:10.932\nYou'll notice also that var4\ndidn't have any decimal places.\n\n521\n00:28:10.932 --> 00:28:17.300\nBut BC, because we set the scale,\njust assumed 0000 after the decimal.\n\n522\n00:28:17.300 --> 00:28:19.855\nSo if you want to use a whole number,\nyou can,\n\n523\n00:28:19.855 --> 00:28:22.533\nyou can use them in conjunction with\n&gt;&gt; And\n\n524\n00:28:22.533 --> 00:28:25.826\nnow that script is run,\nit's kind of executed, it ran its course.\n\n525\n00:28:25.826 --> 00:28:27.461\nWhat happened to a1, b1, right?\n\n526\n00:28:27.461 --> 00:28:29.125\nAre they still floating around?\n\n527\n00:28:29.125 --> 00:28:31.149\nCan we still reuse those or\nare they're gone now?\n\n528\n00:28:31.149 --> 00:28:34.776\n&gt;&gt; Yeah, no, they're done,\nyou would have to re-jump into BC,\n\n529\n00:28:34.776 --> 00:28:38.350\ncreate those variables again,\nthose variables will be done.\n\n530\n00:28:38.350 --> 00:28:43.510\nOnce BC finishes running and executing and\nyou come out of it, which is what that EOF\n\n531\n00:28:43.510 --> 00:28:47.270\nkinda did and dropped out of that\ninteractive mode, those variables\n\n532\n00:28:47.270 --> 00:28:52.090\nwill be gone and be able to be used\nas you need for whatever purposes.\n\n533\n00:28:52.090 --> 00:28:56.870\nBut basically I think that's about all\nI've got when it comes to math and bash.\n\n534\n00:28:56.870 --> 00:29:01.110\nI don't wanna get too crazy, I just wanna\nshow you guys how we can do math and\n\n535\n00:29:01.110 --> 00:29:02.760\nways that if you needed to do that.\n\n536\n00:29:02.760 --> 00:29:05.990\nLike I said before I think,\nI created an amortization.\n\n537\n00:29:05.990 --> 00:29:08.750\nIf you've never try to figure out\nthe math for the days of the year and\n\n538\n00:29:08.750 --> 00:29:09.810\nthe months that are involved-\n&gt;&gt; [LAUGH]\n\n539\n00:29:09.810 --> 00:29:11.420\n&gt;&gt; And how many days are in each month.\n\n540\n00:29:11.420 --> 00:29:14.850\nBuddy let me tell you what, you wanna\nlearn math inside of your bash scripts,\n\n541\n00:29:14.850 --> 00:29:18.280\nthat is a great way to really\nget a handle on that stuff.\n\n542\n00:29:18.280 --> 00:29:20.790\nCuz you're gonna do a lot of it,\nand a lot of shifting stuff around.\n\n543\n00:29:20.790 --> 00:29:21.342\nIt's a lot of fun.\n\n544\n00:29:21.342 --> 00:29:23.100\n&gt;&gt; All right, well Daniel,\n\n545\n00:29:23.100 --> 00:29:27.060\nI think that's a pretty good rundown of\ndoing arithmetic inside of the shell.\n\n546\n00:29:27.060 --> 00:29:31.170\nI do want to mention one thing before\nwe wrap up, which is everything Daniel\n\n547\n00:29:31.170 --> 00:29:36.120\ndid was in the bash shell, except for\nwhen you dropped a ZSH for a little while.\n\n548\n00:29:36.120 --> 00:29:39.822\nBe really careful with that cuz you don't\nknow what shell you're necessarily are in.\n\n549\n00:29:39.822 --> 00:29:42.782\nAnd some shells like dash,\nthe default shell on Ubuntu,\n\n550\n00:29:42.782 --> 00:29:46.800\nthey don't support arithmetic in the\ncommand line or in the shell like that.\n\n551\n00:29:46.800 --> 00:29:50.550\nSo they have to rely on\nother utilities like BC.\n\n552\n00:29:50.550 --> 00:29:55.300\nSo be aware, that's why most people design\ntheir scripts to run in bash because of\n\n553\n00:29:55.300 --> 00:29:57.040\nthose tools and features that are there.\n\n554\n00:29:57.040 --> 00:30:00.240\nSo just something to keep in the back\nof your mind as you go on and work.\n\n555\n00:30:00.240 --> 00:30:03.670\nNow Daniel, before we wrap it up, did you\nhave any parting words for our viewers?\n\n556\n00:30:03.670 --> 00:30:08.000\n&gt;&gt; I this, if you're having\ntrouble with this, stick with it.\n\n557\n00:30:08.000 --> 00:30:12.960\nFollow the logic, watch how the logic goes\ncuz math is very logical in its structure.\n\n558\n00:30:12.960 --> 00:30:15.820\nIf you follow the logic,\nif you're having any trouble, you'll\n\n559\n00:30:15.820 --> 00:30:19.980\nprobably find where your logic broke down\nif you just work it out in your mind.\n\n560\n00:30:19.980 --> 00:30:21.683\nI typically, that's why I'm, as,\n\n561\n00:30:21.683 --> 00:30:24.572\nI have trouble with math cuz I\ncan't keep the numbers in my head.\n\n562\n00:30:24.572 --> 00:30:27.904\nSo that's why I like to do it on my\ncomputer, let my computer do it for me,\n\n563\n00:30:27.904 --> 00:30:30.580\ncuz then I can keep\neverything in front of me.\n\n564\n00:30:30.580 --> 00:30:32.520\nAnd so if you're having trouble with that,\n\n565\n00:30:32.520 --> 00:30:34.690\njust follow your logic,\nyou should be good to go.\n\n566\n00:30:34.690 --> 00:30:37.100\nMake sure all your redirectors\nare working right.\n\n567\n00:30:37.100 --> 00:30:40.330\nMake sure all your characters\nthat you're using are correct.\n\n568\n00:30:40.330 --> 00:30:42.850\nDon't forget to close off parentheses,\ndon't forget to do that.\n\n569\n00:30:42.850 --> 00:30:47.300\nThere's simple things that can happen\nthat will mess up your entire script.\n\n570\n00:30:47.300 --> 00:30:49.180\nBut as for math goes,\nI think we covered it.\n\n571\n00:30:49.180 --> 00:30:49.932\n&gt;&gt; Yep, excellent.\n\n572\n00:30:49.932 --> 00:30:53.170\nAll right Daniel, appreciate you taking\nthe time to walk us through that process\n\n573\n00:30:53.170 --> 00:30:56.430\nand get a chance to see using\narithmetic in our scripts,\n\n574\n00:30:56.430 --> 00:30:58.660\nor arithmetic if we're going that route.\n\n575\n00:30:58.660 --> 00:31:01.310\nBut that is a good spot for\nus to wrap this episode up.\n\n576\n00:31:01.310 --> 00:31:05.190\nSo I do hope you guys enjoyed it out\nthere in TV land, but signing off for\n\n577\n00:31:05.190 --> 00:31:07.770\nITProTV, I've been your host Don Pezet.\n\n578\n00:31:07.770 --> 00:31:08.420\n&gt;&gt; I'm Daniel Lowrie.\n\n579\n00:31:08.420 --> 00:31:11.572\n&gt;&gt; And we will see you next time.\n\n580\n00:31:11.572 --> 00:31:17.567\n[MUSIC]\n\n581\n00:31:17.567 --> 00:31:20.318\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "236794059"
        }
      ],
      "title": "Performing Math"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don take a look at using conditional\nlogic statements in bash scripts. Here they will introduce you to working with\nif-then, if-then-else, and if-elif-else for complex decision making within scripts.",
          "length": "1921",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-1-conditional_statements-100317-PGM.00_31_44_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-1-conditional_statements-100317-PGM.00_31_44_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-1-conditional_statements-100317-PGM.00_31_44_27.Still001-sm.jpg",
          "title": "Conditional Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.072 --> 00:00:02.627\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.627 --> 00:00:07.058\n[CROSSTALK]\n\n3\n00:00:07.058 --> 00:00:08.519\n[MUSIC]\n\n4\n00:00:08.519 --> 00:00:12.741\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.741 --> 00:00:15.350\n&gt;&gt; All right, good morning,\ngood afternoon and good evening, and\n\n6\n00:00:15.350 --> 00:00:17.160\nwelcome back to another\nepisode of ITProTV.\n\n7\n00:00:17.160 --> 00:00:18.090\nI'm your host,\n\n8\n00:00:18.090 --> 00:00:22.290\nDon Pezet, back again with another\nepisode of Linux Shell Scripting Basics.\n\n9\n00:00:22.290 --> 00:00:24.760\nAnd this episode we're\nputting down an ultimatum.\n\n10\n00:00:24.760 --> 00:00:26.902\n&gt;&gt; [LAUGH]\n&gt;&gt; We're listing our conditions,\n\n11\n00:00:26.902 --> 00:00:28.870\nwe're listing our demands.\n\n12\n00:00:28.870 --> 00:00:30.520\nIt's time for conditional statements.\n\n13\n00:00:30.520 --> 00:00:33.189\nWe're gonna get a chance to\nsee how to really get our\n\n14\n00:00:33.189 --> 00:00:35.369\nscripts to perform more that one action.\n\n15\n00:00:35.369 --> 00:00:38.850\nMaybe it'll be able to respond to certain\nscenarios as a critical piece of writing\n\n16\n00:00:38.850 --> 00:00:39.513\na good script.\n\n17\n00:00:39.513 --> 00:00:42.540\nAnd here to help us with that right\nin the studio Mr. Daniel Lowrie.\n\n18\n00:00:42.540 --> 00:00:43.640\nDaniel, thanks for joining us.\n\n19\n00:00:43.640 --> 00:00:44.520\n&gt;&gt; Hey, everyone.\n\n20\n00:00:44.520 --> 00:00:46.030\nYes, I am glad to be back in the studio.\n\n21\n00:00:46.030 --> 00:00:49.150\nThis is going to be a fun, fun episode.\n\n22\n00:00:49.150 --> 00:00:51.670\nBecause, we are talking about\nconditional statements.\n\n23\n00:00:51.670 --> 00:00:56.320\nThis is basically a logic\nthat goes into your scripts.\n\n24\n00:00:56.320 --> 00:00:59.461\nThis of beginning of really\nmore advanced logic,\n\n25\n00:00:59.461 --> 00:01:03.213\nshould I say we've kind of done\na little bit of logic so far.\n\n26\n00:01:03.213 --> 00:01:07.599\nBut right now we're really starting to\ndive into the power of what we can do\n\n27\n00:01:07.599 --> 00:01:10.732\ninside of scripts using\nmore advanced logic types.\n\n28\n00:01:10.732 --> 00:01:13.998\nAnd when we say conditional statements,\n\n29\n00:01:13.998 --> 00:01:18.470\nwe're thinking of the idea of if this,\nthen that.\n\n30\n00:01:18.470 --> 00:01:22.960\nIf not that, then this, else do this,\nthat kind of thing, right?\n\n31\n00:01:22.960 --> 00:01:26.150\nSo it's that logic structure that\nbreaks down when we're gonna evaluate\n\n32\n00:01:26.150 --> 00:01:30.400\nthings to see whether they're true or\nfalse, whether they're valid or invalid.\n\n33\n00:01:30.400 --> 00:01:32.031\nKind of what computers do, right?\n\n34\n00:01:32.031 --> 00:01:32.660\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n35\n00:01:32.660 --> 00:01:34.660\nwe as humans do this all the time, right?\n\n36\n00:01:34.660 --> 00:01:37.924\nIf it's raining outside,\nthen take my umbrella.\n\n37\n00:01:37.924 --> 00:01:40.110\nElse, don't take the umbrella very,\nvery simple, right?\n\n38\n00:01:40.110 --> 00:01:42.790\n&gt;&gt; Right.\n&gt;&gt; So that decision has to be made and\n\n39\n00:01:42.790 --> 00:01:44.900\ncomputers as amazing as they are.\n\n40\n00:01:44.900 --> 00:01:48.720\nThey aren't thinking machines,\nwe get the whole AI buzzwords out there.\n\n41\n00:01:48.720 --> 00:01:53.080\nBut we need to give it the way\nto identify a scenario.\n\n42\n00:01:53.080 --> 00:01:55.710\nAnd then to make decision based\non the results of that scenario.\n\n43\n00:01:55.710 --> 00:01:57.800\nAnd that's really what a conditional\nstatements are all about right, Danny?\n\n44\n00:01:57.800 --> 00:02:02.040\n&gt;&gt; Exactly right, we need to be able to\nsay Not just one thing, but a multitude of\n\n45\n00:02:02.040 --> 00:02:06.820\nthings, and then make a decision based off\nof those things that we give you, right?\n\n46\n00:02:06.820 --> 00:02:11.950\nAnd that really increases the power and\nability of the scripts that we write.\n\n47\n00:02:11.950 --> 00:02:13.540\nSo this is a very important episode.\n\n48\n00:02:13.540 --> 00:02:17.231\nIt's actually probably going to be\nto because there's a lot to it,\n\n49\n00:02:17.231 --> 00:02:20.166\nand I wanna make sure that\nwe cover it in good details.\n\n50\n00:02:20.166 --> 00:02:23.830\nSo that you guys are up to speed with\nit and can use it in your own scripts.\n\n51\n00:02:23.830 --> 00:02:26.590\nSo let's start off with the format.\n\n52\n00:02:26.590 --> 00:02:27.720\nHow does this look?\n\n53\n00:02:27.720 --> 00:02:31.690\nHow do we start working with\nconditional statements?\n\n54\n00:02:31.690 --> 00:02:34.300\nLet's jump to my screen, and we'll show\nyou how that actually works itself out.\n\n55\n00:02:34.300 --> 00:02:39.100\nI'm just gonna open them and\nkind of give you that idea.\n\n56\n00:02:39.100 --> 00:02:40.860\nIt kind of works like this.\n\n57\n00:02:40.860 --> 00:02:45.110\nThe most basic of these conditional\nthings will be the if-then, right?\n\n58\n00:02:45.110 --> 00:02:48.250\nIf this then that and we're done, okay?\n\n59\n00:02:48.250 --> 00:02:53.009\nVery simple and it will look like\n\n60\n00:02:53.009 --> 00:02:58.297\nthis it'll say if condition is true\n\n61\n00:02:58.297 --> 00:03:03.000\nthen well, do some commands.\n\n62\n00:03:03.000 --> 00:03:07.805\nSo commands,\n&gt;&gt; I cannot type.\n\n63\n00:03:07.805 --> 00:03:09.260\n&gt;&gt; [LAUGH]\n&gt;&gt; In commands, and\n\n64\n00:03:09.260 --> 00:03:12.170\nthen we close it out\nwith this little fi here.\n\n65\n00:03:12.170 --> 00:03:15.990\nThat lets them know,\nthis is the end of my conditional logic.\n\n66\n00:03:15.990 --> 00:03:18.367\n&gt;&gt; Which is just the word if\nspelled backwards, right?\n\n67\n00:03:18.367 --> 00:03:21.980\n&gt;&gt; There are very creative people\nin the Bash scripting world.\n\n68\n00:03:21.980 --> 00:03:24.920\nActually, I do like that\nbecause it's real easy to see.\n\n69\n00:03:24.920 --> 00:03:29.550\nCuz it's weird as you look\nthrough your code, very cool.\n\n70\n00:03:29.550 --> 00:03:32.820\nIt's very basic, very simple,\nnothing too crazy.\n\n71\n00:03:32.820 --> 00:03:36.169\nAnd what's going on here\nis we have this whole,\n\n72\n00:03:36.169 --> 00:03:39.782\nif condition is true or\nvalid, then do something.\n\n73\n00:03:39.782 --> 00:03:41.526\nThese are the commands I want you to do,\nand\n\n74\n00:03:41.526 --> 00:03:43.330\nthis can be a list of commands or,\nand go on.\n\n75\n00:03:43.330 --> 00:03:47.140\nIt's gonna get a little deep\ndown the rabbit hole as we\n\n76\n00:03:47.140 --> 00:03:48.570\nmove through this episode.\n\n77\n00:03:48.570 --> 00:03:52.240\nSo try to follow me, and\nhopefully it'll all make sense.\n\n78\n00:03:52.240 --> 00:03:55.440\nAnd then we end that,\nthis is the end of those commands.\n\n79\n00:03:55.440 --> 00:03:58.510\nAnd we're done,\nmy condition has been met or it hasn't.\n\n80\n00:03:58.510 --> 00:04:00.410\nI wanna harp a little bit,\n\n81\n00:04:00.410 --> 00:04:04.630\nright at the beginning of this show,\non this condition is true or valid.\n\n82\n00:04:05.640 --> 00:04:07.300\nWhat's going on there?\n\n83\n00:04:07.300 --> 00:04:12.970\nTypically, with the very\nbasic if type statement.\n\n84\n00:04:12.970 --> 00:04:16.180\nWhat's happening here is if is\nlooking at may be a command,\n\n85\n00:04:16.180 --> 00:04:21.657\nmay be I've put a command here\nmay be the condition is like\n\n86\n00:04:21.657 --> 00:04:27.200\nthis ls, which is a command,\ndid that command run?\n\n87\n00:04:27.200 --> 00:04:29.930\nAnd if it did were there any errors?\n\n88\n00:04:29.930 --> 00:04:30.720\nThere weren't.\n\n89\n00:04:30.720 --> 00:04:35.090\nGreat, everything went fine and\nwe can continue on the line.\n\n90\n00:04:35.090 --> 00:04:38.270\nIf it did have errors,\nwe're not meeting the condition,\n\n91\n00:04:38.270 --> 00:04:39.950\nwhich should be either true or valid.\n\n92\n00:04:41.250 --> 00:04:45.620\nThis is what's known as an exit code and\nit's hard to explain this,\n\n93\n00:04:45.620 --> 00:04:50.180\nbut what happens when you run\na command in your Linux system?\n\n94\n00:04:50.180 --> 00:04:53.100\nIt exits with a certain number value.\n\n95\n00:04:53.100 --> 00:04:53.990\nAnd that number value,\n\n96\n00:04:53.990 --> 00:04:58.860\nit can be called upon, it can be\nused like with this if statement.\n\n97\n00:04:58.860 --> 00:05:04.190\nSo if I run ls, if I say if ls and\nthat number value equals successfully run,\n\n98\n00:05:04.190 --> 00:05:07.100\nand we're gonna take a look at that here\nin a second and what those values are,\n\n99\n00:05:07.100 --> 00:05:11.330\nsome of them anyway, If that comes to\nthat correct value that it actually ran,\n\n100\n00:05:11.330 --> 00:05:15.230\ndidn't have any problems, then I want\nyou to do some commands after that.\n\n101\n00:05:15.230 --> 00:05:18.770\nMaybe I'm working on the output of that,\nor who knows, right?\n\n102\n00:05:18.770 --> 00:05:22.620\nThat is a very important feature and\nI wanna take that minute to harp on that\n\n103\n00:05:22.620 --> 00:05:26.270\njust to give you guys because we\nwill use exit codes elsewhere.\n\n104\n00:05:26.270 --> 00:05:27.220\nYou will probably use them.\n\n105\n00:05:27.220 --> 00:05:31.360\nA lot of people love to use exit codes in\ntheir scripts because they're just already\n\n106\n00:05:31.360 --> 00:05:32.480\nlaying around.\n\n107\n00:05:32.480 --> 00:05:33.410\nYou can already use them.\n\n108\n00:05:33.410 --> 00:05:36.482\nYou can make your own\nkind of stuff going on.\n\n109\n00:05:36.482 --> 00:05:41.159\nThey become very handy as you find\nyourselves scripting what I can just\n\n110\n00:05:41.159 --> 00:05:43.536\nuse the exit code of that function or\n\n111\n00:05:43.536 --> 00:05:49.050\nuse the exit code of that command that I\nran as my variable or whatever I want.\n\n112\n00:05:49.050 --> 00:05:51.720\nSo knowing about them and\nhaving a good understanding of them,\n\n113\n00:05:51.720 --> 00:05:56.160\nat least a basic knowledge, is going\nto help us as we move down the road.\n\n114\n00:05:56.160 --> 00:05:56.710\nSo let's do that.\n\n115\n00:05:56.710 --> 00:05:59.750\nI 'm just gonna exit out here,\nI don't want to write, I just wanna quit.\n\n116\n00:06:01.500 --> 00:06:03.310\nAnd I do have a file, what did I write?\n\n117\n00:06:03.310 --> 00:06:05.540\nIt was called exit_ status _codes.\n\n118\n00:06:05.540 --> 00:06:07.038\nLet's take a look at that.\n\n119\n00:06:07.038 --> 00:06:12.010\nCat exit _status_codes,\nthese are typical exit status\n\n120\n00:06:12.010 --> 00:06:17.260\ncodes that you may encounter by\nrunning a script, or a script,\n\n121\n00:06:17.260 --> 00:06:21.750\na command, just about anything that exits,\nsuccessfully or unsuccessfully, right?\n\n122\n00:06:21.750 --> 00:06:24.093\nIt runs executable.\n\n123\n00:06:24.093 --> 00:06:25.970\nAnd notice the first one is 0.\n\n124\n00:06:25.970 --> 00:06:28.240\nCommand completed successfully.\n\n125\n00:06:28.240 --> 00:06:33.550\nSo if I type in ls,\nI get output, I got no errors.\n\n126\n00:06:33.550 --> 00:06:40.572\nAnd if I echo $,\nwe're gonna look at a variable here, $?.\n\n127\n00:06:40.572 --> 00:06:45.710\nThis let's us know what the exit\nstatus of the last command was.\n\n128\n00:06:45.710 --> 00:06:48.615\nSo if I echo that, I hit Enter,\nyou'll notice that it is 0.\n\n129\n00:06:49.670 --> 00:06:51.510\nVery cool, right?\n\n130\n00:06:51.510 --> 00:06:58.324\nWe've got others, we've got one\ngeneral unknown error right here.\n\n131\n00:06:58.324 --> 00:07:00.641\n&gt;&gt; Sadly, that's the one I\nusually see the most, Riley.\n\n132\n00:07:00.641 --> 00:07:02.014\n&gt;&gt; [LAUGH]\n&gt;&gt; An error happened, and\n\n133\n00:07:02.014 --> 00:07:03.940\nit doesn't know what it is and good luck.\n\n134\n00:07:03.940 --> 00:07:07.470\n&gt;&gt; It's basically looking and\nyou should go, what have you done?\n\n135\n00:07:07.470 --> 00:07:09.650\nWhat are you doing, stop it right now.\n\n136\n00:07:09.650 --> 00:07:14.532\nThat's typically when you see that\nnumber 1 come back as your exit code.\n\n137\n00:07:14.532 --> 00:07:19.220\nWe also have exit 2, this is probably\nRonnie's favorite right here.\n\n138\n00:07:19.220 --> 00:07:20.974\nMisuse of the shell command.\n\n139\n00:07:20.974 --> 00:07:25.326\nThat boy, he beats the shell terminal\nup pretty badly, and God help him.\n\n140\n00:07:25.326 --> 00:07:30.140\n[LAUGH], So if you see that, misuse of\nshell command, 126 Command can't execute.\n\n141\n00:07:30.140 --> 00:07:35.520\nTypically see that when you try to\ncall something that's not executable.\n\n142\n00:07:35.520 --> 00:07:40.170\nIt's there, it's something that's real,\nbut it doesn't execute.\n\n143\n00:07:40.170 --> 00:07:43.347\nSo it will just give you that 126.\n\n144\n00:07:43.347 --> 00:07:45.030\nWe got 127 Command not found.\n\n145\n00:07:45.030 --> 00:07:48.542\nSo if I type in something that's not\nan actual command, there you go.\n\n146\n00:07:48.542 --> 00:07:52.154\nIt's that 127, 128 in that exit argument,\n\n147\n00:07:52.154 --> 00:07:57.120\nthat's the other thing, there's\na range of values that you can use.\n\n148\n00:07:57.120 --> 00:08:01.843\nNotice that we don't go past 255,\nexit status is out of range after that.\n\n149\n00:08:01.843 --> 00:08:04.110\nSo any exit status that\ncomes back that you may use,\n\n150\n00:08:04.110 --> 00:08:08.260\nmaybe you make a custom exit status,\nwe'll look at it in just a second.\n\n151\n00:08:08.260 --> 00:08:14.353\nAnd if it's beyond 255, you'll probably\nactually get this error right here,\n\n152\n00:08:14.353 --> 00:08:16.800\nwhich says, it's out of range.\n\n153\n00:08:16.800 --> 00:08:18.897\nOthers, fatal error with Linux signal h.\n\n154\n00:08:18.897 --> 00:08:21.345\nThese are the signals\nthat we send to them,\n\n155\n00:08:21.345 --> 00:08:24.090\nthe kill signals things of that nature.\n\n156\n00:08:24.090 --> 00:08:25.837\nSometimes you'll get those.\n\n157\n00:08:25.837 --> 00:08:29.550\n130 command terminated with\nCtrl+C if you're in something.\n\n158\n00:08:29.550 --> 00:08:36.043\nI mean, wc and I Ctrl+C it,\nlike that, and I go, that $?.\n\n159\n00:08:36.043 --> 00:08:39.866\nYou'll notice,\nI get one-third, right there.\n\n160\n00:08:39.866 --> 00:08:43.390\nSo if I Ctrl+C, so\nthen you can start using those and\n\n161\n00:08:43.390 --> 00:08:47.650\ngo, maybe, if I exit with 130,\nif I Ctrl+C something.\n\n162\n00:08:47.650 --> 00:08:52.143\nSo if I say, if $?, is equals 130,\n\n163\n00:08:52.143 --> 00:08:58.900\nthen I can echo out command\nwas exited with Ctrl+C, right?\n\n164\n00:08:58.900 --> 00:09:02.795\nSo it can help me in my scripts to\nknow what those do and see them,\n\n165\n00:09:02.795 --> 00:09:03.980\nalso to set my own.\n\n166\n00:09:05.430 --> 00:09:08.775\nLet's see what else we wanna talk\nabout when it comes to exit codes.\n\n167\n00:09:08.775 --> 00:09:12.210\nYeah, exiting with our own status codes.\n\n168\n00:09:12.210 --> 00:09:15.660\nWe can create our own, say I don't wanna\nuse ones that are already built in.\n\n169\n00:09:15.660 --> 00:09:18.464\nAnd I wanna kinda define my own for\nwhatever reasons, and\n\n170\n00:09:18.464 --> 00:09:21.130\nyou will find various reasons to do this.\n\n171\n00:09:21.130 --> 00:09:22.619\nLet's see here, how do we do that?\n\n172\n00:09:22.619 --> 00:09:25.298\nWell, we've got that log file,\n\n173\n00:09:25.298 --> 00:09:29.604\nthat log file that we used\nback in a previous episode,\n\n174\n00:09:29.604 --> 00:09:34.589\nlogfile.sh, let's take a look at that,\ncat logfile.sh.\n\n175\n00:09:34.589 --> 00:09:39.930\nThere we go, we're making a log of\nthe auth logs, here they are right here.\n\n176\n00:09:39.930 --> 00:09:44.870\nWhat if I wanted to change\nthe exit status of that?\n\n177\n00:09:44.870 --> 00:09:47.013\nJust something for my own purposes.\n\n178\n00:09:47.013 --> 00:09:51.626\nI don't want to be a standard thing,\nI just wanna change that exit status.\n\n179\n00:09:51.626 --> 00:09:56.774\nI could go in if I just\nrun in if I just say,\n\n180\n00:09:56.774 --> 00:10:01.180\n./logfile.sh // echo $?.\n\n181\n00:10:01.180 --> 00:10:02.610\nYou'll see I get exit status is zero.\n\n182\n00:10:03.670 --> 00:10:05.774\nBut maybe that's a little\ntoo ambiguous for me.\n\n183\n00:10:05.774 --> 00:10:08.990\nI wanna make a really specific\nexit status for whatever reason.\n\n184\n00:10:08.990 --> 00:10:14.261\nI could go into that file,\nthen logfile.sh, and\n\n185\n00:10:14.261 --> 00:10:20.294\nI can just add the word exit and\nthen whatever code I want.\n\n186\n00:10:20.294 --> 00:10:24.730\nLet's say, it equals to 22, so,\nas long as it's within that range.\n\n187\n00:10:24.730 --> 00:10:27.062\nRemember, I gotta keep\nit within that range.\n\n188\n00:10:27.062 --> 00:10:30.875\nSo I could do that, and yeah.\n\n189\n00:10:30.875 --> 00:10:31.960\nLet's do that, let's do that.\n\n190\n00:10:31.960 --> 00:10:34.078\nLet's see what happens.\n\n191\n00:10:34.078 --> 00:10:34.961\nWe write that out.\n\n192\n00:10:34.961 --> 00:10:42.058\nWe run logfile.sh and I echo $?.\n\n193\n00:10:42.058 --> 00:10:44.130\nAnd now my exit status is 222,\n\n194\n00:10:44.130 --> 00:10:47.544\nbecause I defined what my\nexit status should be for me.\n\n195\n00:10:47.544 --> 00:10:50.350\nAnd then I can use that\nfurther along down the script.\n\n196\n00:10:50.350 --> 00:10:53.433\nAnything I wanna do with that,\nI can now because it's custom.\n\n197\n00:10:53.433 --> 00:10:55.902\n&gt;&gt; I know one way that's\nreally handy is that,\n\n198\n00:10:55.902 --> 00:11:00.442\nif the command executes successfully,\nyou're always gonna get a exit of zero,\n\n199\n00:11:00.442 --> 00:11:02.200\nright, a return code of zero.\n\n200\n00:11:02.200 --> 00:11:05.555\nBut maybe there's different\nlevels of success for you, right?\n\n201\n00:11:05.555 --> 00:11:08.320\nI know that sounds silly, but\nI'm gonna execute this command, and\n\n202\n00:11:08.320 --> 00:11:10.906\nI know it's always gonna execute and\ncomplete successfully.\n\n203\n00:11:10.906 --> 00:11:14.030\nBut what it does,\nthe task it performs might be different.\n\n204\n00:11:14.030 --> 00:11:18.320\nI might have some kind of a watch timer\nthat says, if the command completed\n\n205\n00:11:18.320 --> 00:11:21.780\nsuccessfully but it took more than two\nminutes, I wanna exit with this code, and\n\n206\n00:11:21.780 --> 00:11:23.750\nif it took more than five minutes,\nI wanna exit with this other code.\n\n207\n00:11:23.750 --> 00:11:26.430\nSo it did complete successfully,\njust took too long, right?\n\n208\n00:11:26.430 --> 00:11:30.400\nNow we can start to act upon that by\nreturning these custom exit codes.\n\n209\n00:11:30.400 --> 00:11:32.676\nBut you do have to be careful\nwith custom exit codes,\n\n210\n00:11:32.676 --> 00:11:34.089\nbecause you are making them up.\n\n211\n00:11:34.089 --> 00:11:37.234\nAnd it's possible you could reuse them,\nlike they overlap, and\n\n212\n00:11:37.234 --> 00:11:38.790\nnow you get confusing results.\n\n213\n00:11:38.790 --> 00:11:42.224\nSo sticking with the default\ncodes are usually recommended,\n\n214\n00:11:42.224 --> 00:11:45.734\nunless you have a specific need for\noverwriting those values.\n\n215\n00:11:45.734 --> 00:11:46.710\n&gt;&gt; That's exactly right.\n\n216\n00:11:46.710 --> 00:11:51.160\nThe other little stumbling stone\nyou can come across is remember,\n\n217\n00:11:51.160 --> 00:11:55.870\nexit codes change, the variable that\n\n218\n00:11:55.870 --> 00:12:00.530\nholds the last known exit code\nchanges every time you run a command.\n\n219\n00:12:00.530 --> 00:12:04.977\nSo if I'm in my script, and\nlet's take a look at this,\n\n220\n00:12:04.977 --> 00:12:08.572\nlet's say I've been in that logfile.sh.\n\n221\n00:12:08.572 --> 00:12:15.308\nI'm in my script, we've got our\nexit code set, I come down in here,\n\n222\n00:12:15.308 --> 00:12:20.440\nand I do this, and\nthen I say echo great, like that.\n\n223\n00:12:20.440 --> 00:12:21.160\nHere's the problem.\n\n224\n00:12:21.160 --> 00:12:25.170\nWhen I run this script, what was the last\ncommand that was run, not the exit code.\n\n225\n00:12:26.170 --> 00:12:28.344\nit's going to be the echo command.\n\n226\n00:12:28.344 --> 00:12:30.229\nAnd the echo command\nwill run successfully.\n\n227\n00:12:30.229 --> 00:12:34.289\nAnd since it's not defining any\nother thing, it's gonna go,\n\n228\n00:12:34.289 --> 00:12:38.780\nwell you want the default exit status for\necho which is zero.\n\n229\n00:12:38.780 --> 00:12:42.860\nSo if I run this, I'm gonna an exit status\nof zero and not the 222 I'm looking for.\n\n230\n00:12:42.860 --> 00:12:46.040\nSo you have to be very careful\nwhere you put that exit.\n\n231\n00:12:46.040 --> 00:12:50.410\nIt needs to be the last thing you\ndo before you do something else,\n\n232\n00:12:50.410 --> 00:12:54.920\nif you want that custom exit status\nto be that custom exit status.\n\n233\n00:12:54.920 --> 00:12:58.410\nSo just keep that in mind as\nyou work with those exit codes.\n\n234\n00:12:58.410 --> 00:13:01.330\nBut basically I wanted to give\nyou that idea of exit codes and\n\n235\n00:13:01.330 --> 00:13:05.980\nstatuses, so that we understand what\nif is doing on a very basic level.\n\n236\n00:13:05.980 --> 00:13:09.816\nAnd now you guys can work with them,\nand as we continue down the road,\n\n237\n00:13:09.816 --> 00:13:13.402\nwe're probably gonna see these\npop up from time to time as well.\n\n238\n00:13:13.402 --> 00:13:15.424\nAll right, so\nI'm just gonna exit out of here.\n\n239\n00:13:15.424 --> 00:13:17.790\nAll right, that's fine,\nthat doesn't work anymore.\n\n240\n00:13:17.790 --> 00:13:19.574\nLet's see, where are we at?\n\n241\n00:13:19.574 --> 00:13:21.269\nYeah, don't forget your fi, right?\n\n242\n00:13:21.269 --> 00:13:25.522\nThat's a, man, this is some easy,\neasy, easy, thing to overlook.\n\n243\n00:13:25.522 --> 00:13:26.540\nYou do it all the time.\n\n244\n00:13:26.540 --> 00:13:27.535\nYou're typing here.\n\n245\n00:13:27.535 --> 00:13:29.790\nYour if statement is up.\n\n246\n00:13:29.790 --> 00:13:34.255\nAnd you run it, and it says,\nsyntax error on line 12.\n\n247\n00:13:34.255 --> 00:13:36.460\nSyntax error on line whatever.\n\n248\n00:13:36.460 --> 00:13:37.340\nWhat's going on?\n\n249\n00:13:37.340 --> 00:13:39.780\nYou open your cell, I forgot the fi.\n\n250\n00:13:39.780 --> 00:13:42.850\nDon't forget to close off your\nif statements with the fi.\n\n251\n00:13:42.850 --> 00:13:43.826\nIt will catch you every time.\n\n252\n00:13:43.826 --> 00:13:46.397\nIt's a pain in the rear, but\nyou gotta look out for it.\n\n253\n00:13:46.397 --> 00:13:49.433\n&gt;&gt; The mistake I always make is,\ninstead of putting fi, I put if.\n\n254\n00:13:49.433 --> 00:13:51.708\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] You just don't wrap around your\n\n255\n00:13:51.708 --> 00:13:52.863\nmind, it's suppose to be fi.\n\n256\n00:13:52.863 --> 00:13:54.922\nAnd if you do that, it's basically\nopening up another if statement.\n\n257\n00:13:54.922 --> 00:13:58.256\nCuz you can do nested if statements,\nand that results in syntax error and\n\n258\n00:13:58.256 --> 00:13:59.360\nthen you get a problem.\n\n259\n00:13:59.360 --> 00:14:02.445\nCan you show us an example of that, like\nhow we could trouble shoot to find that?\n\n260\n00:14:02.445 --> 00:14:04.252\n&gt;&gt; Yeah,\nlet's take a look at what that looks like.\n\n261\n00:14:04.252 --> 00:14:07.619\nI'm just gonna give you some examples of\nif statements really quickly here, so\n\n262\n00:14:07.619 --> 00:14:09.675\nyou can kinda see how they work out.\n\n263\n00:14:09.675 --> 00:14:14.000\nClear our screen out, and\nI need to move into a different directory.\n\n264\n00:14:14.000 --> 00:14:17.030\nI made another one to keep\neverything nice and organized.\n\n265\n00:14:17.030 --> 00:14:21.140\nStructured commands, and\nwe'll run, let's see here.\n\n266\n00:14:21.140 --> 00:14:28.532\nLet's take a look at it first,\ncat if-then., it's one .sh.\n\n267\n00:14:28.532 --> 00:14:31.110\nGotta keep these things\nstraight in my head.\n\n268\n00:14:31.110 --> 00:14:33.290\nSo here we go, very basic if statement.\n\n269\n00:14:33.290 --> 00:14:36.750\nThis is probably the most basic of\nif statements that you can create.\n\n270\n00:14:36.750 --> 00:14:41.890\nSo we're just saying,\nif pwd returns a value of true or\n\n271\n00:14:41.890 --> 00:14:44.640\nvalid, that is zero exit status.\n\n272\n00:14:44.640 --> 00:14:50.510\nThen echo, it worked, and then of course\nwe've got our fi here, don't forget that.\n\n273\n00:14:50.510 --> 00:14:56.718\nSo if I run that,\nif dash one sh, hey look,\n\n274\n00:14:56.718 --> 00:15:01.898\nit actually, run the pwd command.\n\n275\n00:15:01.898 --> 00:15:06.120\nThere it is, print the working directory\nI'm in, and then echo out that it works.\n\n276\n00:15:06.120 --> 00:15:07.970\nGreat, does exactly what I want it to do.\n\n277\n00:15:09.620 --> 00:15:10.810\nVery simple logic, right?\n\n278\n00:15:10.810 --> 00:15:11.660\nNothing too difficult now.\n\n279\n00:15:12.950 --> 00:15:14.549\nLet's see what happens\nwhen it doesn't work.\n\n280\n00:15:14.549 --> 00:15:16.141\nThat's always gonna be a good time.\n\n281\n00:15:16.141 --> 00:15:22.683\nLet's do cat if-then2.sh.\n\n282\n00:15:22.683 --> 00:15:24.065\nNow here's an example of,\n\n283\n00:15:24.065 --> 00:15:28.031\nwe've got a command here that's probably\nnot recognized by most people, and\n\n284\n00:15:28.031 --> 00:15:30.749\nit's because I just kind\nof pounded on the keyboard.\n\n285\n00:15:30.749 --> 00:15:33.470\n[LAUGH] And they said, that's a command.\n\n286\n00:15:33.470 --> 00:15:34.360\nAnd that happens.\n\n287\n00:15:34.360 --> 00:15:36.390\nTypically, this won't be you\njust pounding on the keyboard.\n\n288\n00:15:36.390 --> 00:15:40.350\nIt will be I typed pvd or something or\n\n289\n00:15:40.350 --> 00:15:45.073\nwhat's near, pqd or ped instead of pwd,\nI fat-fingered my command.\n\n290\n00:15:46.130 --> 00:15:49.900\nBut I should get an error\ninstead of it worked, obviously.\n\n291\n00:15:49.900 --> 00:15:52.019\nSo let's see what happens,\nwe'll run that one.\n\n292\n00:15:52.019 --> 00:15:56.246\nSo ./if-then2.sh.\n\n293\n00:15:56.246 --> 00:15:58.762\nAnd you'll notice now we\nget command not found.\n\n294\n00:15:58.762 --> 00:16:02.890\nHey, let's check that echo.\n\n295\n00:16:02.890 --> 00:16:04.778\nBut it still came out as 0.\n\n296\n00:16:04.778 --> 00:16:06.538\nHm, weird, right?\n\n297\n00:16:06.538 --> 00:16:07.434\nWhy did it do that?\n\n298\n00:16:07.434 --> 00:16:10.730\nBecause my script actually ran correctly,\nor it ran.\n\n299\n00:16:10.730 --> 00:16:14.400\nAnd the script didn't return a problem,\nPWD returned a problem.\n\n300\n00:16:14.400 --> 00:16:15.180\nOr not PWD, I'm sorry.\n\n301\n00:16:16.480 --> 00:16:20.028\nThe crazy command that\nI wrote is not found.\n\n302\n00:16:20.028 --> 00:16:21.767\nThe script went fine,\nso that's what you see.\n\n303\n00:16:21.767 --> 00:16:24.020\nSee, that's why I wanted to show you guys.\n\n304\n00:16:24.020 --> 00:16:26.500\nYou gotta be careful of\nthose exit statuses.\n\n305\n00:16:26.500 --> 00:16:29.950\nThey might not be coming out the way\nyou think that they would be because\n\n306\n00:16:30.960 --> 00:16:33.420\nthings are happening in such\nan order that you didn't expect.\n\n307\n00:16:33.420 --> 00:16:37.177\nSo you've gotta watch that order of\nthings to work with those exit codes.\n\n308\n00:16:37.177 --> 00:16:39.773\nAll right,\nwhat else do we got on the table here?\n\n309\n00:16:39.773 --> 00:16:44.681\nLet's see if-then example,\nlet's open this one up.\n\n310\n00:16:44.681 --> 00:16:46.546\nClear out here.\n\n311\n00:16:46.546 --> 00:16:51.745\nLet's cat if-then,\n\n312\n00:16:51.745 --> 00:16:56.127\nI'll do 1b.sh.\n\n313\n00:16:56.127 --> 00:17:00.600\nOne of a little bit of the different\nformats that you can use.\n\n314\n00:17:00.600 --> 00:17:02.010\nIf we look at just 1.sh,\n\n315\n00:17:02.010 --> 00:17:06.600\nlet's see the difference between\nthe two formats here really quickly.\n\n316\n00:17:06.600 --> 00:17:08.840\nYou'll notice this one\nhere has one less line.\n\n317\n00:17:08.840 --> 00:17:14.720\nThat's because I just kinda chained\nthe then here with my semicolon.\n\n318\n00:17:14.720 --> 00:17:15.770\nAnd a lot of people like this.\n\n319\n00:17:15.770 --> 00:17:19.330\nI actually do like this because\nit's less lines of code.\n\n320\n00:17:19.330 --> 00:17:23.070\nBut I find that if you put\nthem on separate lines,\n\n321\n00:17:23.070 --> 00:17:24.360\nthey can be a bit more readable.\n\n322\n00:17:24.360 --> 00:17:28.800\nSo if you're looking for more efficiency\nin your typing and less lines of code to\n\n323\n00:17:28.800 --> 00:17:32.700\nkeep things nice and tight,\nmaybe you wanna use this type of format.\n\n324\n00:17:32.700 --> 00:17:37.297\nSo you have the if;then when\nyou go into your commands.\n\n325\n00:17:37.297 --> 00:17:39.590\nSo you could do that if you\nlike that nice and tightness.\n\n326\n00:17:39.590 --> 00:17:44.216\nBut if you want a little more readability,\nfor me, I find that this can be that.\n\n327\n00:17:44.216 --> 00:17:46.376\nThere's gonna be a little\nmore lines of code and\n\n328\n00:17:46.376 --> 00:17:48.430\nyou gotta remember these\nare small scripts.\n\n329\n00:17:48.430 --> 00:17:49.740\nThese are not huge.\n\n330\n00:17:49.740 --> 00:17:54.634\nYou start getting into bigger scripts\nthat have a lot of if statements in them,\n\n331\n00:17:54.634 --> 00:17:58.353\nmaybe doing it this way will\nspare you a lot of lines of code.\n\n332\n00:17:58.353 --> 00:18:00.610\nYou can just make things\na little easier for your life.\n\n333\n00:18:00.610 --> 00:18:04.190\nYou need that readability, though,\nI do recommend doing it the other way.\n\n334\n00:18:04.190 --> 00:18:05.770\nWhat else do we have here?\n\n335\n00:18:05.770 --> 00:18:06.870\nMultiple commands after the then.\n\n336\n00:18:06.870 --> 00:18:08.260\nWhat does that look like?\n\n337\n00:18:08.260 --> 00:18:08.920\nLet's take a look.\n\n338\n00:18:08.920 --> 00:18:14.737\nCat if-then3.sh.\n\n339\n00:18:14.737 --> 00:18:15.990\nThere we go.\n\n340\n00:18:15.990 --> 00:18:19.593\nYou'll notice that we've got\nour standard if statement,\n\n341\n00:18:19.593 --> 00:18:23.030\nif pwd then echo it worked,\necho it really worked.\n\n342\n00:18:23.030 --> 00:18:27.708\nEcho let's run something else, and\nthen it does the df-h command.\n\n343\n00:18:27.708 --> 00:18:33.147\nI've given it multiple different\ncommands to run in that then area,\n\n344\n00:18:33.147 --> 00:18:35.140\nthat commands area.\n\n345\n00:18:35.140 --> 00:18:37.530\nI don't have to be just stuck with one.\n\n346\n00:18:37.530 --> 00:18:41.320\nI can do as many really as I\nlike as long as it all works.\n\n347\n00:18:42.510 --> 00:18:50.690\nSo if I run this I'm\ngonna say ./if-then3.sh.\n\n348\n00:18:50.690 --> 00:18:53.220\nLet's see, it gives me my pwd command.\n\n349\n00:18:54.390 --> 00:18:56.320\nIt tells me it worked.\n\n350\n00:18:56.320 --> 00:18:57.700\nIt really worked.\n\n351\n00:18:57.700 --> 00:18:59.280\nEchoed, let's run something else, and\n\n352\n00:18:59.280 --> 00:19:04.820\nthen it did the df-h command giving me\nmy file system stuff, very, very cool.\n\n353\n00:19:04.820 --> 00:19:08.750\nSo it doesn't have to just be\na single command that you throw for\n\n354\n00:19:08.750 --> 00:19:10.010\nevery if statement.\n\n355\n00:19:10.010 --> 00:19:16.130\nThat would be brutal for us and your code\nwould be exponentially large, crazy.\n\n356\n00:19:16.130 --> 00:19:16.970\nSo that's a nice feature.\n\n357\n00:19:16.970 --> 00:19:18.410\nI want you guys to be aware of that.\n\n358\n00:19:18.410 --> 00:19:22.485\nAnd then,\nwhat happens if what I run isn't true?\n\n359\n00:19:22.485 --> 00:19:24.670\nOne of the little false or invalid, right?\n\n360\n00:19:24.670 --> 00:19:26.070\nSomething happens.\n\n361\n00:19:26.070 --> 00:19:28.060\nLet's take a look at that one.\n\n362\n00:19:28.060 --> 00:19:32.530\nI've got cat if-then 3b.sh.\n\n363\n00:19:32.530 --> 00:19:33.070\nAnd here we go.\n\n364\n00:19:33.070 --> 00:19:35.270\nSo I've got this variable over here.\n\n365\n00:19:35.270 --> 00:19:36.560\nUser equals no user.\n\n366\n00:19:37.840 --> 00:19:39.676\nIf we grep dollar sign user so\n\n367\n00:19:39.676 --> 00:19:43.050\nwe're calling that variable\nout of etc passwords.\n\n368\n00:19:43.050 --> 00:19:47.060\nThat etc password file holds\nall the information for\n\n369\n00:19:47.060 --> 00:19:51.320\nthe users in the system, and\nspecifically their user name.\n\n370\n00:19:51.320 --> 00:19:56.490\nSo if I see whatever username is given\nhere, which in this case is nouser,\n\n371\n00:19:57.650 --> 00:20:02.230\nand if it's in /etc/password then\necho it worked, it really worked,\n\n372\n00:20:02.230 --> 00:20:03.560\nlet's run something else,\nthrough our script.\n\n373\n00:20:05.210 --> 00:20:06.430\nBut what happens if it's not?\n\n374\n00:20:06.430 --> 00:20:08.468\nBecause I don't know if nouser is on this.\n\n375\n00:20:08.468 --> 00:20:09.820\nLet's see what happens.\n\n376\n00:20:09.820 --> 00:20:15.379\n./ It is if-then3b.sh.\n\n377\n00:20:15.379 --> 00:20:15.940\nFire that off.\n\n378\n00:20:17.540 --> 00:20:18.470\nI didn't get nothing.\n\n379\n00:20:18.470 --> 00:20:20.297\nIt didn't do anything.\n\n380\n00:20:20.297 --> 00:20:22.355\nThat kind of sucks.\n\n381\n00:20:22.355 --> 00:20:24.050\n[LAUGH]\n&gt;&gt; So\n\n382\n00:20:24.050 --> 00:20:26.380\ntechnically it did do something, right?\n\n383\n00:20:26.380 --> 00:20:27.985\nIt's just we haven't defined it.\n\n384\n00:20:27.985 --> 00:20:29.570\nSo we have a lot of power.\n\n385\n00:20:29.570 --> 00:20:33.030\nEvery example you've done so far has been\nbased on if the condition was true, and\n\n386\n00:20:33.030 --> 00:20:35.200\nin this case,\nthe condition isn't true, right?\n\n387\n00:20:35.200 --> 00:20:36.470\n&gt;&gt; Right.\n&gt;&gt; That's exactly right.\n\n388\n00:20:36.470 --> 00:20:38.470\nAnd I kind of set this up.\n\n389\n00:20:38.470 --> 00:20:40.020\nThis was a set up.\n\n390\n00:20:40.020 --> 00:20:41.390\nYou've been framed.\n\n391\n00:20:41.390 --> 00:20:42.580\nSo I wanted to see.\n\n392\n00:20:42.580 --> 00:20:43.660\nDon's actually correct.\n\n393\n00:20:43.660 --> 00:20:45.390\nIt did do what I told it to do.\n\n394\n00:20:45.390 --> 00:20:46.630\nWhich was nothing.\n\n395\n00:20:46.630 --> 00:20:47.450\nDon't do anything.\n\n396\n00:20:47.450 --> 00:20:48.730\nIt checked to see if that was true.\n\n397\n00:20:48.730 --> 00:20:50.290\nIt wasn't, great.\n\n398\n00:20:50.290 --> 00:20:51.020\nIt's not true.\n\n399\n00:20:53.250 --> 00:20:54.780\nSee, I need to start catching things,\n\n400\n00:20:54.780 --> 00:20:57.760\nbecause this type of\noutput is no good to us.\n\n401\n00:20:57.760 --> 00:20:58.730\nWhat good does that do me?\n\n402\n00:20:58.730 --> 00:21:00.310\nNot a whole lot.\n\n403\n00:21:00.310 --> 00:21:04.928\nSo I need to start catching other\nconditions other than the one that I want.\n\n404\n00:21:04.928 --> 00:21:07.368\nWhat happens if I get\na condition I don't want?\n\n405\n00:21:07.368 --> 00:21:10.580\nI still wanna get some output from it so\nthat I know I caught a condition that I\n\n406\n00:21:10.580 --> 00:21:13.530\ndidn't want, or\nmy condition that I put wasn't true.\n\n407\n00:21:13.530 --> 00:21:15.880\nSo let's move into that.\n\n408\n00:21:15.880 --> 00:21:19.290\nThis is what we call if, then, else, yes.\n\n409\n00:21:19.290 --> 00:21:24.260\nSo basically, if this,\nthen do that, else do this, right?\n\n410\n00:21:24.260 --> 00:21:25.060\nWe'll see how that works out.\n\n411\n00:21:25.060 --> 00:21:27.820\nLet's clear this out.\n\n412\n00:21:27.820 --> 00:21:31.896\nI've got a nice statement put together for\nus already so we can just cat that.\n\n413\n00:21:31.896 --> 00:21:38.070\nAnd if-then-else1.sh, like so.\n\n414\n00:21:38.070 --> 00:21:42.960\nSo basically the same script we just run,\nwith just a little caveat to it, right?\n\n415\n00:21:42.960 --> 00:21:46.840\nSo we say if user equals no user then,\n\n416\n00:21:46.840 --> 00:21:52.330\nand you find that no user in etc password.\n\n417\n00:21:52.330 --> 00:21:56.782\nRun our little script,\nelse this time if you don't find that,\n\n418\n00:21:56.782 --> 00:22:01.656\ndo this, echo \"The username 'user'\nis not valid on the system\".\n\n419\n00:22:01.656 --> 00:22:06.160\nSo if it doesn't find no user,\nthen we should get that.\n\n420\n00:22:06.160 --> 00:22:10.950\nThe username and then tell me what\nthat username was because otherwise,\n\n421\n00:22:10.950 --> 00:22:12.542\nI'm probably not getting\na lot of help out of that.\n\n422\n00:22:12.542 --> 00:22:17.950\nI wanna be as verbose as possible when\nit comes to catching conditions that\n\n423\n00:22:17.950 --> 00:22:20.040\nI don't expect to occur.\n\n424\n00:22:20.040 --> 00:22:21.670\nThat's basically what we're doing here.\n\n425\n00:22:21.670 --> 00:22:22.960\nAny time you create a new statement,\n\n426\n00:22:22.960 --> 00:22:25.860\nyou're expecting those conditions to\nbe true, in some way, shape or form.\n\n427\n00:22:25.860 --> 00:22:28.510\nEspecially as we get deeper and\ndeeper and deeper into ifing.\n\n428\n00:22:29.660 --> 00:22:34.730\nIf I think that should be true,\nbut in case it's not,\n\n429\n00:22:34.730 --> 00:22:38.370\njust on the happenstance that\nnone of this actually works and\n\n430\n00:22:38.370 --> 00:22:42.150\nI've screwed up completely royally, give\nme a little output so that I understand.\n\n431\n00:22:42.150 --> 00:22:46.640\nSo being as verbose as possible\nin this output can help you.\n\n432\n00:22:46.640 --> 00:22:48.480\n&gt;&gt; Daniel,\ndo we actually need the L statement?\n\n433\n00:22:48.480 --> 00:22:51.790\nCouldn't I just put the and\nyou echo the user name, or whatever, and\n\n434\n00:22:51.790 --> 00:22:53.180\nstick that after the feed?\n\n435\n00:22:53.180 --> 00:22:54.250\n&gt;&gt; Yeah, you could do that.\n\n436\n00:22:54.250 --> 00:22:55.730\nThere's a valid form of that.\n\n437\n00:22:55.730 --> 00:22:58.640\nBut it tends to be a little\nbit cleaner this way,\n\n438\n00:22:58.640 --> 00:23:02.010\nwatching it this way,\nin my estimation it has been.\n\n439\n00:23:02.010 --> 00:23:03.970\nPlus it's part of that structure.\n\n440\n00:23:03.970 --> 00:23:07.600\nMaybe I wanna do something\noutside of that if statement\n\n441\n00:23:07.600 --> 00:23:11.970\nas well as get that echo that\nthat no user wasn't found, right?\n\n442\n00:23:11.970 --> 00:23:15.700\nSo if you wanna build on that, that can\nmake it be a little bit more put together.\n\n443\n00:23:15.700 --> 00:23:17.820\n&gt;&gt; Yep, and just so\nwe're absolutely clear, so\n\n444\n00:23:17.820 --> 00:23:22.120\nI wanna make sure everybody understands,\nthat if it's outside of the if structure,\n\n445\n00:23:22.120 --> 00:23:25.430\nlike Daniel said,\nthat means it always runs, right?\n\n446\n00:23:25.430 --> 00:23:27.510\nSo whether it's true or false,\nthat would be the problem,\n\n447\n00:23:27.510 --> 00:23:30.960\nversus the else statement where that's\nonly gonna trigger if it's false.\n\n448\n00:23:30.960 --> 00:23:33.890\nSo that's kind of an important\ndifferentiator to determine whether it\n\n449\n00:23:33.890 --> 00:23:35.310\ngoes inside or out.\n\n450\n00:23:35.310 --> 00:23:37.010\n&gt;&gt; Logic, ladies and\ngentlemen, right here.\n\n451\n00:23:37.010 --> 00:23:38.870\nYou've gotta keep it all\nlogically squared away.\n\n452\n00:23:38.870 --> 00:23:40.790\nAnd that can be the most\ndifficult part of this.\n\n453\n00:23:40.790 --> 00:23:44.825\nA lot of times you'll find yourself\nstaring at the screen and going, okay.\n\n454\n00:23:44.825 --> 00:23:48.475\nIf I do this, then I do this,\nwhy isn't this working again?\n\n455\n00:23:48.475 --> 00:23:52.020\nSo you can, best way to do it is just\nbang it out, see if it works, and\n\n456\n00:23:52.020 --> 00:23:55.290\nif not go back to your logic and\nsee where it broke down.\n\n457\n00:23:55.290 --> 00:23:56.880\nAnd cuz Don is absolutely correct.\n\n458\n00:23:56.880 --> 00:23:58.460\nIt's not inside of that if statement.\n\n459\n00:23:58.460 --> 00:24:00.953\nIf that condition isn't being\ncaught in some way, shape or form,\n\n460\n00:24:00.953 --> 00:24:03.239\nit's just gonna run anything\nelse that's outside of that.\n\n461\n00:24:03.239 --> 00:24:04.957\nIf there is such things.\n\n462\n00:24:04.957 --> 00:24:07.538\nSo, let's run this one, see what happens.\n\n463\n00:24:07.538 --> 00:24:13.152\nWe will say ./if-then-else1.sh.\n\n464\n00:24:13.152 --> 00:24:18.010\nAnd look, it says the user name no\nuser is not valid on this system.\n\n465\n00:24:18.010 --> 00:24:22.240\nSo I know that the argument that\nwas passed, it was not found and\n\n466\n00:24:22.240 --> 00:24:23.770\nit let me know that that was the case.\n\n467\n00:24:23.770 --> 00:24:24.950\nI got a little output from it.\n\n468\n00:24:24.950 --> 00:24:28.250\nSo if then else can be very,\nvery helpful in that case.\n\n469\n00:24:28.250 --> 00:24:30.780\nLet's see here what else\nare we gonna do here?\n\n470\n00:24:30.780 --> 00:24:32.800\nMoving along in our lines.\n\n471\n00:24:32.800 --> 00:24:38.110\nWe also have the ability to say\nwe've given it one condition but\n\n472\n00:24:38.110 --> 00:24:39.695\nif I've got multiple conditions?\n\n473\n00:24:39.695 --> 00:24:41.970\nWe've kinda done that\nwith this demo suite.\n\n474\n00:24:41.970 --> 00:24:44.640\nWe've given it two possible conditions.\n\n475\n00:24:44.640 --> 00:24:46.770\nWhat if I've got five possible conditions?\n\n476\n00:24:46.770 --> 00:24:49.120\nWhat if I've got ten possible conditions?\n\n477\n00:24:49.120 --> 00:24:52.720\nI gotta run five if statements,\nor ten if statements?\n\n478\n00:24:52.720 --> 00:24:54.840\nThat would take a lot of time and\neffort to do.\n\n479\n00:24:54.840 --> 00:24:57.400\nThe good news is,\nyou don't have to do that.\n\n480\n00:24:57.400 --> 00:24:59.275\nI think you can do that,\nI've done that actually.\n\n481\n00:24:59.275 --> 00:25:00.020\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n482\n00:25:00.020 --> 00:25:02.380\nit's not a really good use of\nyour time and your skills.\n\n483\n00:25:02.380 --> 00:25:06.020\nThe best thing to do is just use if and\nthen el if.\n\n484\n00:25:06.020 --> 00:25:09.680\nSo basically saying,\nif this, then do this.\n\n485\n00:25:09.680 --> 00:25:11.570\nElse if this is true, then do this.\n\n486\n00:25:11.570 --> 00:25:14.470\nElse if that's true, then do that.\n\n487\n00:25:14.470 --> 00:25:18.500\nAnd then of course our catchall, in case\nnone of those are true, give me some\n\n488\n00:25:18.500 --> 00:25:22.910\noutput on that cuz I didn't expect that\noutput, and then end it with an else.\n\n489\n00:25:22.910 --> 00:25:25.000\nAnd call that a day.\n\n490\n00:25:25.000 --> 00:25:26.610\nSo let's see how that works itself out.\n\n491\n00:25:26.610 --> 00:25:31.740\nI'm gonna clear this screen, and\nI've got this if, I'll cat it.\n\n492\n00:25:31.740 --> 00:25:35.927\nCat if-then-elif, I think.\n\n493\n00:25:35.927 --> 00:25:41.110\nAll right, it's a piece,\nthere we go, I typed elif-else1.sh.\n\n494\n00:25:41.110 --> 00:25:41.890\nHere we go.\n\n495\n00:25:41.890 --> 00:25:45.720\nThis is the format that we'll be working\nwith when it comes to using elifs.\n\n496\n00:25:45.720 --> 00:25:49.190\nAnd a lot of times, at least for\nme in my experience,\n\n497\n00:25:49.190 --> 00:25:52.860\nI use elifs a lot,\njust about anytime I call an if statement.\n\n498\n00:25:52.860 --> 00:25:56.410\nUnless I've just got a very simple\nidea that I wanna get across,\n\n499\n00:25:56.410 --> 00:26:00.770\nor some output that I wanna do, or some\ncommands that I wanna run very simply.\n\n500\n00:26:00.770 --> 00:26:05.500\nI'm typically working multiple levels\ndeep with conditions that I'm passing.\n\n501\n00:26:06.510 --> 00:26:07.951\nSo we see this a lot.\n\n502\n00:26:07.951 --> 00:26:10.947\nSo I'm saying, if user equals John,\nand this is the,\n\n503\n00:26:10.947 --> 00:26:12.980\nyou'll notice this guy right here.\n\n504\n00:26:12.980 --> 00:26:14.660\nThat's our global variable.\n\n505\n00:26:14.660 --> 00:26:17.870\nThat's calling what\nuser am I logged in as?\n\n506\n00:26:17.870 --> 00:26:21.150\nOr is in that variable,\nthat's globally recognized.\n\n507\n00:26:21.150 --> 00:26:24.410\nSo I'm expanding a little more.\n\n508\n00:26:24.410 --> 00:26:30.790\nThen here we go, we've got then echo\nthat Elif, and it's else if, it's el if.\n\n509\n00:26:30.790 --> 00:26:32.580\nE, l, i, f, right?\n\n510\n00:26:32.580 --> 00:26:34.040\nJust like you see here.\n\n511\n00:26:34.040 --> 00:26:36.000\nIf the user equals Mary, then do this.\n\n512\n00:26:36.000 --> 00:26:38.670\nSo we're starting to see,\nI've got multiple conditions.\n\n513\n00:26:38.670 --> 00:26:40.720\nUser is John, then do this.\n\n514\n00:26:40.720 --> 00:26:42.430\nIt's otherwise, if it's Mary, do this.\n\n515\n00:26:42.430 --> 00:26:46.050\nOtherwise, if it's,\nlet's see who's my other, Alice.\n\n516\n00:26:46.050 --> 00:26:47.280\nElif, another elif statement.\n\n517\n00:26:47.280 --> 00:26:50.650\nAnd I can keep elifing\nuntil the cows come home.\n\n518\n00:26:50.650 --> 00:26:53.840\nAnd it will, it will hammer away at that,\nno problemo.\n\n519\n00:26:53.840 --> 00:26:57.720\nSo you can make as many elifs as you like,\nit might get not fun for\n\n520\n00:26:57.720 --> 00:26:59.250\nyou if you got a bunch of them.\n\n521\n00:26:59.250 --> 00:27:01.640\nAnd we'll talk about how\nwe can work that out later.\n\n522\n00:27:01.640 --> 00:27:06.200\nBut, for right now, for example,\njust elif it till the cows come home.\n\n523\n00:27:06.200 --> 00:27:10.290\nAnd then, when you've come to the end\nof all the conditions that you think\n\n524\n00:27:10.290 --> 00:27:14.790\nmight become true, and\nyou want to grab for,\n\n525\n00:27:14.790 --> 00:27:18.960\ndon't forget your catch all which will\nbe that else statement inside of here.\n\n526\n00:27:18.960 --> 00:27:21.320\nSo if it doesn't find a user that's,\n\n527\n00:27:21.320 --> 00:27:24.070\nif it sees that this is\nnot any of these options.\n\n528\n00:27:24.070 --> 00:27:26.970\nIt's not John, it's not Mary,\nit's not Alice.\n\n529\n00:27:26.970 --> 00:27:29.360\nIt's something else other than echo.\n\n530\n00:27:29.360 --> 00:27:33.690\nIt's finally a nice thing that you and\nwhatever that username is.\n\n531\n00:27:33.690 --> 00:27:37.890\nSo let's see how this works,\nand don't forget end in fi.\n\n532\n00:27:37.890 --> 00:27:38.390\nThat's right.\n\n533\n00:27:39.580 --> 00:27:43.110\nSo let's see how this works out,\nwe'll clear the screen and\n\n534\n00:27:43.110 --> 00:27:48.600\nwe'll say ./if-elif-else1.sh.\n\n535\n00:27:48.600 --> 00:27:50.050\nAnd see what happens.\n\n536\n00:27:50.050 --> 00:27:51.520\nSo I'm logged in D Laurie.\n\n537\n00:27:51.520 --> 00:27:55.890\nIf I echo that user,\nyou'll see is showing D Lowrie.\n\n538\n00:27:55.890 --> 00:27:57.850\nThat's how I'm logged in as.\n\n539\n00:27:57.850 --> 00:27:59.140\nSo that's what that variable was.\n\n540\n00:27:59.140 --> 00:28:04.610\nAnd when I called it, there was no\ncondition to do anything other than say,\n\n541\n00:28:04.610 --> 00:28:08.760\nI don't recognize that name, so\npipe the is in that else portion.\n\n542\n00:28:08.760 --> 00:28:11.080\nSo it said,\nit's nice to finally meet you, D Lowrie.\n\n543\n00:28:11.080 --> 00:28:12.100\nWell, great.\n\n544\n00:28:12.100 --> 00:28:14.870\nSo it ran through each one of my\nconditions found them none of those to be\n\n545\n00:28:14.870 --> 00:28:17.574\ntrue, so\nit got caught by our else statement.\n\n546\n00:28:17.574 --> 00:28:18.975\nWhat if it is true?\n\n547\n00:28:18.975 --> 00:28:26.186\nWhat if I exports and say,\nuser equals is it John,\n\n548\n00:28:26.186 --> 00:28:30.325\nI think so, and we go rerun.\n\n549\n00:28:30.325 --> 00:28:32.740\nWell look at that welcome valid user.\n\n550\n00:28:32.740 --> 00:28:36.740\nSo notice that because that variable\nchanged to something it was expecting,\n\n551\n00:28:36.740 --> 00:28:39.090\nthe logic caught it and ran it through.\n\n552\n00:28:39.090 --> 00:28:40.363\nWhat if I make it Alice?\n\n553\n00:28:40.363 --> 00:28:43.724\nWhat if I export Alice out?\n\n554\n00:28:43.724 --> 00:28:46.071\nAnd I rerun our commands.\n\n555\n00:28:46.071 --> 00:28:46.990\nIt says I don't even know who you are.\n\n556\n00:28:46.990 --> 00:28:48.920\nYou see, what's happening is for\n\n557\n00:28:48.920 --> 00:28:53.510\neach different user that I've\nmade an account for and have\n\n558\n00:28:53.510 --> 00:28:56.720\na different set of commands that I want it\nto run, its running through that logic.\n\n559\n00:28:56.720 --> 00:28:58.481\nIt looked to see, does this equal John?\n\n560\n00:28:58.481 --> 00:29:01.710\nNo, goes to the next el if.\n\n561\n00:29:01.710 --> 00:29:05.560\nEl if has, whatever I put.\n\n562\n00:29:05.560 --> 00:29:06.190\nIs it her?\n\n563\n00:29:06.190 --> 00:29:07.450\nNo, go to the next one.\n\n564\n00:29:07.450 --> 00:29:07.990\nIs Alice?\n\n565\n00:29:07.990 --> 00:29:08.640\nYes, it is Alice.\n\n566\n00:29:08.640 --> 00:29:10.392\nGreat, then do this.\n\n567\n00:29:10.392 --> 00:29:11.887\nSo the structure is very simple.\n\n568\n00:29:11.887 --> 00:29:13.234\nIt's very squared away.\n\n569\n00:29:13.234 --> 00:29:15.272\nIt's not too difficult to follow and\n\n570\n00:29:15.272 --> 00:29:18.437\nhopefully you'll be able to\nuse this to your advantage.\n\n571\n00:29:18.437 --> 00:29:19.860\nIt's very powerful.\n\n572\n00:29:19.860 --> 00:29:23.480\n&gt;&gt; Yeah, now what we've seen here,\nright, you use the if statement,\n\n573\n00:29:23.480 --> 00:29:24.780\nyou use the else, right.\n\n574\n00:29:24.780 --> 00:29:28.610\nSo that's really what gave us that extra\npower to be able to get super complex.\n\n575\n00:29:28.610 --> 00:29:34.130\nWe can get even more complex\nby doing nested if statements,\n\n576\n00:29:34.130 --> 00:29:36.850\nwhere you take an if statement, and\nstick it inside of another one.\n\n577\n00:29:36.850 --> 00:29:39.780\nI know it's a very powerful\ntool that I've made use of.\n\n578\n00:29:39.780 --> 00:29:42.940\nIt can create a lot of confusion,\na lot of room for error errors.\n\n579\n00:29:42.940 --> 00:29:44.836\nBut when you do it,\nit does come up very powerful.\n\n580\n00:29:44.836 --> 00:29:45.374\n&gt;&gt; Yeah.\n\n581\n00:29:45.374 --> 00:29:47.788\n&gt;&gt; Now, I know you wanna show it to us,\nbut we're a little low on time.\n\n582\n00:29:47.788 --> 00:29:50.380\nDo you wanna tackle that here or do you\nwanna move that off onto a part two?\n\n583\n00:29:50.380 --> 00:29:50.940\n&gt;&gt; You know what?\n\n584\n00:29:50.940 --> 00:29:52.430\nI think its a good time for us to spot.\n\n585\n00:29:52.430 --> 00:29:54.059\nI'll leave them with a cliff hanger.\n\n586\n00:29:54.059 --> 00:29:57.149\n[LAUGH] Man no, I wanna see nested if.\n\n587\n00:29:57.149 --> 00:29:58.670\nNow you gonna have to come back for\nthe part two.\n\n588\n00:29:58.670 --> 00:30:00.380\nI think this is a good stop spot for us.\n\n589\n00:30:00.380 --> 00:30:02.700\n&gt;&gt; Yeah,\nwhat we've seen here is decision logic.\n\n590\n00:30:02.700 --> 00:30:04.140\nMaking a single decision, right?\n\n591\n00:30:04.140 --> 00:30:05.092\nWhat's the username?\n\n592\n00:30:05.092 --> 00:30:07.450\nAnd then based on that\nwe make single decision.\n\n593\n00:30:07.450 --> 00:30:09.570\nBut when you start doing\nnested If statements,\n\n594\n00:30:09.570 --> 00:30:11.840\nyou're creating what's\ncalled the decision tree.\n\n595\n00:30:11.840 --> 00:30:14.450\nYou create one fork, and\nthen it might lead to another and another.\n\n596\n00:30:14.450 --> 00:30:16.640\nAnd it really gets things complex and\nimpressive.\n\n597\n00:30:16.640 --> 00:30:18.810\nSo we definitely wanna\ntake a look at that.\n\n598\n00:30:18.810 --> 00:30:21.520\nBut we'll save that for part two,\nand before we break this one off,\n\n599\n00:30:21.520 --> 00:30:23.680\nany final thoughts before\nwe close up part one?\n\n600\n00:30:23.680 --> 00:30:27.940\n&gt;&gt; I keep harping on that and\nthat's because it is just so.\n\n601\n00:30:27.940 --> 00:30:32.760\nYou don't wanna spend a bunch of time\nworking on your masterpiece script\n\n602\n00:30:32.760 --> 00:30:34.970\nthat's gonna run and\ndo this awesome complex logic, and\n\n603\n00:30:34.970 --> 00:30:39.330\nhave it all break because\nyou forgot a stinking feed.\n\n604\n00:30:39.330 --> 00:30:42.130\nI can't tell you how many times,\nand you won't see it.\n\n605\n00:30:42.130 --> 00:30:43.640\nYou won't see it.\nYou'll have to call somebody over and\n\n606\n00:30:43.640 --> 00:30:46.370\ntwo sets of eyes will go,\nYou forgot the feet.\n\n607\n00:30:46.370 --> 00:30:50.350\nAnd buddy there's nothing worse feeling\nin your life, or maybe there is,\n\n608\n00:30:50.350 --> 00:30:52.510\nI'm hyperbole-ing here.\n\n609\n00:30:52.510 --> 00:30:56.410\nSo just remember to close your\nlogic off and not only that, but\n\n610\n00:30:56.410 --> 00:31:01.588\nlike what Don said if it's outside of\nthe if statement, it's still going to run.\n\n611\n00:31:01.588 --> 00:31:03.950\nThe if statement only runs\nif the logic catches it.\n\n612\n00:31:03.950 --> 00:31:05.720\nSo just be aware of that as well.\n\n613\n00:31:05.720 --> 00:31:07.920\n&gt;&gt; All right, well ladies and gentlemen,\nthat is a pretty good spot for\n\n614\n00:31:07.920 --> 00:31:08.610\nus to wrap this one up.\n\n615\n00:31:08.610 --> 00:31:12.670\nSo we hope if you enjoyed the episode then\n\n616\n00:31:12.670 --> 00:31:17.360\nstay tuned because we've got more\nhorrible shell scripting wit from me.\n\n617\n00:31:17.360 --> 00:31:18.100\n&gt;&gt; You're punny.\n\n618\n00:31:18.100 --> 00:31:19.351\n&gt;&gt; I know,\nI'm gonna get kicked off the show.\n\n619\n00:31:19.351 --> 00:31:21.280\n[LAUGH] But\nyou're doing a good job, Daniel.\n\n620\n00:31:21.280 --> 00:31:22.860\nYeah, at least I count for something.\n\n621\n00:31:22.860 --> 00:31:24.380\nBut I do hope you guys enjoyed it.\n\n622\n00:31:24.380 --> 00:31:27.690\nStay tuned, we do have more shell\nscripting episodes coming up.\n\n623\n00:31:27.690 --> 00:31:31.900\nMore stuff, it gets more and more complex\nwith each one's rebuilding a slightly more\n\n624\n00:31:31.900 --> 00:31:36.810\npowerful, if not just complex\nscript [LAUGH] with all this stuff.\n\n625\n00:31:36.810 --> 00:31:37.770\nSo definitely stay tuned for it.\n\n626\n00:31:37.770 --> 00:31:38.760\nI thank you guys for watching.\n\n627\n00:31:38.760 --> 00:31:40.010\nDaniel, thank you for joining us.\n\n628\n00:31:40.010 --> 00:31:40.590\n&gt;&gt; No problem.\n\n629\n00:31:40.590 --> 00:31:43.880\n&gt;&gt; And signing off for IT ProTV,\nI've been your host Don Pezet,\n\n630\n00:31:43.880 --> 00:31:44.870\n&gt;&gt; I'm Daniel Lowrie.\n\n631\n00:31:44.870 --> 00:31:46.809\n&gt;&gt; And we will see you next time.\n\n632\n00:31:46.809 --> 00:31:53.664\n[MUSIC]\n\n633\n00:31:53.664 --> 00:31:57.134\n&gt;&gt; Thank you for watching, ITPro.TV.\n\n",
          "vimeoId": "236793257"
        },
        {
          "description": "In this episode, Daniel and Don take a look at using conditional\nlogic statements in bash scripts. Here they pick back up by exploring nested if\nstatements and using the test condition; taking advantage test’s condition classes\nwhich includes, numeric comparisons, string comparisons, and file comparisons.",
          "length": "2026",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-2-conditional_statements_pt_2-100417-PGM.00_34_49_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-2-conditional_statements_pt_2-100417-PGM.00_34_49_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-2-conditional_statements_pt_2-100417-PGM.00_34_49_14.Still001-sm.jpg",
          "title": "Conditional Statements Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.200 --> 00:00:01.413\nWelcome to ITProTV.\n\n2\n00:00:01.413 --> 00:00:02.583\nI'm your host Don Pezet.\n\n3\n00:00:02.583 --> 00:00:06.199\n[CROSSTALK]\n\n4\n00:00:06.199 --> 00:00:08.600\n[MUSIC]\n\n5\n00:00:08.600 --> 00:00:11.990\nYou're watching ITProTV.\n\n6\n00:00:11.990 --> 00:00:15.221\n&gt;&gt; All right, good morning,\ngood afternoon, and good evening.\n\n7\n00:00:15.221 --> 00:00:17.685\nAnd welcome back to another\nepisode of ITProTV.\n\n8\n00:00:17.685 --> 00:00:20.565\nI'm your host Don Pezet back\nagain with another episode of\n\n9\n00:00:20.565 --> 00:00:22.600\nLinux Shell Scripting Basics.\n\n10\n00:00:22.600 --> 00:00:25.110\nAnd if you've been following this\nseries from beginning to end,\n\n11\n00:00:25.110 --> 00:00:27.490\nyou went with the cliffhanger\nending to help you avoid it.\n\n12\n00:00:27.490 --> 00:00:30.900\nYou know that we ended the last\nepisode not complete, right?\n\n13\n00:00:30.900 --> 00:00:33.233\nWe were doing our if statements,\nour conditional statements,\n\n14\n00:00:33.233 --> 00:00:35.232\nand we kind of moved through\nsome technologies there.\n\n15\n00:00:35.232 --> 00:00:38.610\nBut we ran out of time, and so\nwe're back here with the sequel, right?\n\n16\n00:00:38.610 --> 00:00:42.281\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a summer film week or something,\n\n17\n00:00:42.281 --> 00:00:46.190\nand we [LAUGH] need to get\nthose box office dollars.\n\n18\n00:00:46.190 --> 00:00:50.870\nSo we're back here with part two of\nconditional statements, and just like last\n\n19\n00:00:50.870 --> 00:00:53.390\ntime, we've got right here in the studio\nMr. Daniel Lowrie here to help us.\n\n20\n00:00:53.390 --> 00:00:54.820\nDaniel, thank you for joining us.\n\n21\n00:00:54.820 --> 00:00:55.830\n&gt;&gt; Well Don, thanks for having me.\n\n22\n00:00:55.830 --> 00:00:57.220\nAlways a pleasure to be here.\n\n23\n00:00:57.220 --> 00:01:01.085\nTrying to teach these good folks out there\na little something about bash scripting,\n\n24\n00:01:01.085 --> 00:01:04.253\ncuz I do find it quite enjoyable and\neven cathartic from time to time.\n\n25\n00:01:04.253 --> 00:01:07.374\nIt can be, trust me,\nit will happen [LAUGH].\n\n26\n00:01:07.374 --> 00:01:08.698\nWith that being said, Don is right.\n\n27\n00:01:08.698 --> 00:01:11.170\nWe talked about conditional statements,\n\n28\n00:01:11.170 --> 00:01:14.338\nif statements specifically\nin the previous episode.\n\n29\n00:01:14.338 --> 00:01:18.628\nAnd we ran out of time before we could get\ninto what we'd like to call, nested if's.\n\n30\n00:01:18.628 --> 00:01:20.662\nAnd that's what we're\ngonna kick off today,\n\n31\n00:01:20.662 --> 00:01:22.599\nwe're gonna jump right back into the fray.\n\n32\n00:01:22.599 --> 00:01:27.780\nNow I do want us to remind, a reminder of\nwhat let's take a look at what if does.\n\n33\n00:01:27.780 --> 00:01:32.580\nIt's basically saying,\nif this then do these set of commands.\n\n34\n00:01:32.580 --> 00:01:33.824\nSo if this ring is true,\n\n35\n00:01:33.824 --> 00:01:38.350\nthis is something that's viable,\nthen I need you to do this stuff.\n\n36\n00:01:38.350 --> 00:01:40.290\nOtherwise, do something else.\n\n37\n00:01:40.290 --> 00:01:44.690\n&gt;&gt; It would be something like,\nif this show is bad, then Daniel's fired.\n\n38\n00:01:44.690 --> 00:01:47.100\nIt's very easy to use,\nwe see the practicality.\n\n39\n00:01:47.100 --> 00:01:49.620\n&gt;&gt; Man, see, Don is following the logic.\n\n40\n00:01:49.620 --> 00:01:50.314\nHe sees that.\n\n41\n00:01:50.314 --> 00:01:54.344\nAnd it's great because it's a great\nsegue into today with nested if's,\n\n42\n00:01:54.344 --> 00:01:56.886\nbecause if show is bad,\nthen Daniel is fired.\n\n43\n00:01:56.886 --> 00:02:00.805\nIf Daniel is fired, then Don gets\nmet in the parking lot, right?\n\n44\n00:02:00.805 --> 00:02:03.380\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] See how that works?\n\n45\n00:02:03.380 --> 00:02:05.270\nIt's nesting those if's.\n\n46\n00:02:05.270 --> 00:02:08.910\nIt's expanding our ability to\nwork with that logic, right?\n\n47\n00:02:08.910 --> 00:02:11.770\nSo hopefully that makes sense to you and\nthat's what we're gonna see today,\n\n48\n00:02:11.770 --> 00:02:15.940\nwell at least to start with, on how we can\nwork that logic into our Bash scripts.\n\n49\n00:02:15.940 --> 00:02:20.000\nSo without further ado,\nI say let's take a look at that structure.\n\n50\n00:02:20.000 --> 00:02:23.517\nSo I've got a nice little script that I've\npre-baked for us good folks out there,\n\n51\n00:02:23.517 --> 00:02:26.444\nbecause we've all seen my typing\nabilities and they're horrible.\n\n52\n00:02:26.444 --> 00:02:30.618\nSo I will just call that a cat nested,\nnested if.\n\n53\n00:02:30.618 --> 00:02:34.170\nIt helps if I add the rest\nof the extension.sh.\n\n54\n00:02:34.170 --> 00:02:37.717\nAnd here we go, here's my little script,\nnothing too crazy.\n\n55\n00:02:37.717 --> 00:02:41.350\nI wanna make sure that ease you\ngood folks out into the water.\n\n56\n00:02:41.350 --> 00:02:44.270\nGot a couple of variables,\nwe got our shebang at the top.\n\n57\n00:02:44.270 --> 00:02:46.800\nAnd here's our first if statement,\nvery good.\n\n58\n00:02:46.800 --> 00:02:52.510\nAnd here's our test condition\nif user equals dlowrie, okay?\n\n59\n00:02:52.510 --> 00:02:54.520\nThere's our global variable user,\n\n60\n00:02:54.520 --> 00:02:59.460\ngood stuff,\nthen if it is dlowrie then echo hi Daniel.\n\n61\n00:02:59.460 --> 00:03:04.629\nThen it says if something else, so\nit's got a if inside of the if, right?\n\n62\n00:03:04.629 --> 00:03:07.250\nThis is what mean when we say nested ifs,\nwe're putting,\n\n63\n00:03:07.250 --> 00:03:09.136\nit's the little Russian doll scenario.\n\n64\n00:03:09.136 --> 00:03:11.538\nWe're putting an if here, and\nwe're gonna take a smaller if and\n\n65\n00:03:11.538 --> 00:03:13.160\nwell actually it could be a bigger if.\n\n66\n00:03:13.160 --> 00:03:15.840\nIt could be five more ifs if we wanted.\n\n67\n00:03:15.840 --> 00:03:18.530\nIf, if, if, if and we're just\ncontinually packing them in there,\n\n68\n00:03:18.530 --> 00:03:20.380\nthat's what we mean when we say nested.\n\n69\n00:03:21.570 --> 00:03:22.593\nSo we look at that again.\n\n70\n00:03:22.593 --> 00:03:25.479\nSo then it's saying, if var one equals 10,\n\n71\n00:03:25.479 --> 00:03:30.290\nwhich var one happens to actually\nequal 10, cuz we've set that variable.\n\n72\n00:03:30.290 --> 00:03:35.123\nThen echo your nested if works\" So\nthis is going to help us see whether or\n\n73\n00:03:35.123 --> 00:03:39.650\nnot our if statement is being caught and\nthe logic is ringing true.\n\n74\n00:03:39.650 --> 00:03:42.248\nIf it does,\nthen I want you to echo out the statement.\n\n75\n00:03:42.248 --> 00:03:45.460\nElse echo buster, so something went wrong.\n\n76\n00:03:45.460 --> 00:03:48.927\nIf var one does not equal 10 for whatever\nreason, maybe I've modified it somehow\n\n77\n00:03:48.927 --> 00:03:51.517\nthroughout my script and\nI won't wanna be able to catch that.\n\n78\n00:03:51.517 --> 00:03:53.694\nRemember that else statement is great for\n\n79\n00:03:53.694 --> 00:03:57.496\ncatching anything that you didn't\nexpect in your logical structures.\n\n80\n00:03:57.496 --> 00:03:59.181\nSo always add those else statements.\n\n81\n00:03:59.181 --> 00:04:03.342\nAnd then I close out the if,\nthis isn't an important thing,\n\n82\n00:04:03.342 --> 00:04:06.443\nthis is why in the previous\nepisode I harped so\n\n83\n00:04:06.443 --> 00:04:11.033\nheavily on remembering to put the fi\nat the end of the if statement.\n\n84\n00:04:11.033 --> 00:04:14.008\nAnd not only because it breaks your code,\nit's not gonna work.\n\n85\n00:04:14.008 --> 00:04:19.012\nBut when you start nesting ifs,\nit is super easy to forget or\n\n86\n00:04:19.012 --> 00:04:23.490\nnot realize that you need\nto fi every if you do.\n\n87\n00:04:23.490 --> 00:04:26.000\nSo it doesn't matter if I'm 10 ifs deep.\n\n88\n00:04:26.000 --> 00:04:28.050\nI better have 10 fi's to go along with it.\n\n89\n00:04:28.050 --> 00:04:31.720\nAnd this is another good reason to\ndo indention into your code to help\n\n90\n00:04:31.720 --> 00:04:35.550\nkind of block them out, so\nyou can see what fi goes what if.\n\n91\n00:04:35.550 --> 00:04:38.360\nAnd just visually reference\nthat a whole lot easier.\n\n92\n00:04:38.360 --> 00:04:41.920\nSo don't forget to put a fi for\nevery if you do.\n\n93\n00:04:41.920 --> 00:04:44.400\nThat's some important takeaway here.\n\n94\n00:04:44.400 --> 00:04:45.290\nSo I do have my fi,\n\n95\n00:04:45.290 --> 00:04:50.280\nand then I have another else statement\nwhich says echo well hello there.\n\n96\n00:04:50.280 --> 00:04:54.925\nIf user does not equal or if user\nequals anything other than dlowrie,\n\n97\n00:04:54.925 --> 00:04:57.980\nthen that's where we're gonna go, right?\n\n98\n00:04:57.980 --> 00:05:00.406\nSo that's how this should work.\n\n99\n00:05:00.406 --> 00:05:03.314\nI am logged as dlowrie,\nso that's [INAUDIBLE].\n\n100\n00:05:03.314 --> 00:05:07.234\n&gt;&gt; Yeah, and so what you've created here\nis unlike the if statements from the last\n\n101\n00:05:07.234 --> 00:05:09.820\nepisode where there was option one and\ntwo, right?\n\n102\n00:05:09.820 --> 00:05:12.010\nSo if the condition was true,\nyou went with option one.\n\n103\n00:05:12.010 --> 00:05:14.110\nIf the condition was false,\nyou went with option two.\n\n104\n00:05:14.110 --> 00:05:16.280\nNow we're creating a decision tree.\n\n105\n00:05:16.280 --> 00:05:19.895\nSo if option one is true,\nnow we get another decision.\n\n106\n00:05:19.895 --> 00:05:23.550\nAnd it could result in option three or\noption four, and\n\n107\n00:05:23.550 --> 00:05:26.102\nthat could then fork again and again.\n\n108\n00:05:26.102 --> 00:05:29.550\nAnd we can keep forking on,\nmaking a more and more complex decision.\n\n109\n00:05:29.550 --> 00:05:32.200\nAnd that creates a lot of power, but\nit also creates a lot of room for\n\n110\n00:05:32.200 --> 00:05:33.250\nmaking mistakes.\n\n111\n00:05:33.250 --> 00:05:34.590\nThat's why we've got to test these out.\n\n112\n00:05:34.590 --> 00:05:35.200\n&gt;&gt; That's right.\nAnd\n\n113\n00:05:35.200 --> 00:05:39.810\nI'm a huge proponent of\nputting in some sort of catch.\n\n114\n00:05:39.810 --> 00:05:42.570\nSo that if the logic you\nexpect to see does not work,\n\n115\n00:05:42.570 --> 00:05:45.880\nat least you have some\nidea of what went wrong.\n\n116\n00:05:45.880 --> 00:05:49.986\nAnd I can't tell you how many times I've\nhad to go back and go, why didn't I just\n\n117\n00:05:49.986 --> 00:05:53.972\necho this stuff in that catch statement\nto see where things are happening, or\n\n118\n00:05:53.972 --> 00:05:57.956\nif I don't want that there, well because\nother people are gonna be using it,\n\n119\n00:05:57.956 --> 00:06:01.121\nI have to go back and\nput that stuff in during a testing phase.\n\n120\n00:06:01.121 --> 00:06:05.545\nA lot of the time you're gonna spend in\nyour scripts is going to be debugging\n\n121\n00:06:05.545 --> 00:06:09.846\nthem, figuring out what went wrong,\nbecause they're gonna go wrong.\n\n122\n00:06:09.846 --> 00:06:13.033\nYour logic isn't gonna figure out\nquite right every time perfectly,\n\n123\n00:06:13.033 --> 00:06:15.843\nsometimes it does and\nyou ring a bell of joy when that happens,\n\n124\n00:06:15.843 --> 00:06:18.620\nbut a lot of time you're\ngonna spend looking for it.\n\n125\n00:06:18.620 --> 00:06:20.640\nI forgot my fi,\nlet me go in there and put that in.\n\n126\n00:06:20.640 --> 00:06:22.190\nSo don't forget that.\n\n127\n00:06:22.190 --> 00:06:24.730\nAll right, let's fire this command off and\nlet's see what it does.\n\n128\n00:06:24.730 --> 00:06:28.045\nI'll clear the screen and I'll say,\n\n129\n00:06:28.045 --> 00:06:36.260\n./nested-if.sh.\n\n130\n00:06:36.260 --> 00:06:39.430\nThere we go it says hi Daniel,\nyour nested if works.\n\n131\n00:06:39.430 --> 00:06:44.450\nSo if met the logic, it said if that user,\nso if I echo user like so,\n\n132\n00:06:44.450 --> 00:06:48.597\nyou see it does equal dlowrie,\nso I met that as a logic.\n\n133\n00:06:48.597 --> 00:06:52.463\nIt took a look at the referenced variable,\nsaw that that and this,\n\n134\n00:06:52.463 --> 00:06:57.021\nthat test condition inside of those\nbrackets that did work out correctly since\n\n135\n00:06:57.021 --> 00:06:59.874\nthat logic worked out,\nwhat do you want me to do?\n\n136\n00:06:59.874 --> 00:07:02.430\nRemember, it just says,\nhere's the list of commands.\n\n137\n00:07:02.430 --> 00:07:05.300\nWell, the command was here\nis another if statement.\n\n138\n00:07:05.300 --> 00:07:09.589\nIf that's does equal that,\nthen do this as well.\n\n139\n00:07:09.589 --> 00:07:14.023\nSo you can just keep continually\nlike onset working out and\n\n140\n00:07:14.023 --> 00:07:17.564\nexpanding your options\ninside of your logic.\n\n141\n00:07:17.564 --> 00:07:19.160\nSo it's a very handy\nthing to be able to do.\n\n142\n00:07:20.160 --> 00:07:21.810\nAll right, let's see here.\n\n143\n00:07:21.810 --> 00:07:26.800\nThe next thing we wanna talk\nabout is conditional clauses.\n\n144\n00:07:26.800 --> 00:07:28.900\nAnd what is a conditional clause?\n\n145\n00:07:28.900 --> 00:07:31.930\nWell, there's a few different types, and\n\n146\n00:07:31.930 --> 00:07:36.680\nI think the best way to show this\nis to basically give you a graphic.\n\n147\n00:07:36.680 --> 00:07:40.580\nI made some charts for us, so we can take\na look at that and see what they mean and\n\n148\n00:07:40.580 --> 00:07:41.310\nhow they work.\n\n149\n00:07:41.310 --> 00:07:42.883\nSo let me clear this.\n\n150\n00:07:42.883 --> 00:07:47.345\nAnd I'm gonna take a look\nat numeric comparisons.\n\n151\n00:07:47.345 --> 00:07:52.019\nSo cat numeric comparisons.txt,\nwhich I've created for us, and\n\n152\n00:07:52.019 --> 00:07:55.466\nwe're gonna see this type\nof logical structure.\n\n153\n00:07:55.466 --> 00:07:57.764\nAnd we see this inside of our comparisons.\n\n154\n00:07:57.764 --> 00:07:58.738\nUsually, right?\n\n155\n00:07:58.738 --> 00:08:03.820\nWhen we're looking at, does this\nequal that, does that not equal this.\n\n156\n00:08:03.820 --> 00:08:06.408\nWhat is the logic behind the statement\nthat I'm actually using?\n\n157\n00:08:06.408 --> 00:08:11.196\nThese are the conditions,\nwhy I call them conditional clauses,\n\n158\n00:08:11.196 --> 00:08:16.880\nthe conditions that need to be met so\nthat the statement is true, or is valid.\n\n159\n00:08:16.880 --> 00:08:18.350\nAnd these are some of the ways\nin which we'll do it.\n\n160\n00:08:18.350 --> 00:08:21.770\nHere we have numeric, so\nmaybe I'm working with numbers,\n\n161\n00:08:21.770 --> 00:08:24.500\nI'm trying to do a math equation.\n\n162\n00:08:24.500 --> 00:08:28.247\nAnd we'll see here in just a second, this\nis a very interesting twist in the tale.\n\n163\n00:08:28.247 --> 00:08:32.047\nI don't know why they did this,\nit's insanely confusing.\n\n164\n00:08:32.047 --> 00:08:35.926\nBut if you remember that it's doing this,\nthen you won't get confused, and\n\n165\n00:08:35.926 --> 00:08:36.950\nwe'll get to that.\n\n166\n00:08:38.180 --> 00:08:43.470\nSo what am looking at is n1 -eq n2,\nright here.\n\n167\n00:08:43.470 --> 00:08:49.880\nSo,number one, whatever the first number\nis, -eq, -eq stands for equals, n2.\n\n168\n00:08:49.880 --> 00:08:55.923\nSo if I have an if statement,\nI say if 1 -eq 1.\n\n169\n00:08:55.923 --> 00:08:58.497\nOr if I say a variable that has a number,\n\n170\n00:08:58.497 --> 00:09:02.329\nif I reference a variable\n$var1 which I've set to 10.\n\n171\n00:09:02.329 --> 00:09:08.991\nIf $var1 -eq 10, then so and so.\n\n172\n00:09:08.991 --> 00:09:10.630\nWe actually saw that in the script, right?\n\n173\n00:09:10.630 --> 00:09:14.830\nThat's exactly what I did,\nthat very comparison.\n\n174\n00:09:14.830 --> 00:09:17.060\nThat was a numerical comparison,\neven though I used a variable.\n\n175\n00:09:17.060 --> 00:09:24.210\nThe variable's contents was a number,\nand I can use -eq to see if that works.\n\n176\n00:09:24.210 --> 00:09:30.840\nWe've got others as well, you'll see that\n-ge stands for greater than or equal to.\n\n177\n00:09:30.840 --> 00:09:33.713\nSo the logic could be if\nthe number on this side and\n\n178\n00:09:33.713 --> 00:09:37.707\nthe number on that, the number on\nthis side is either greater than or\n\n179\n00:09:37.707 --> 00:09:40.740\nequal to this number,\nthen do something, right?\n\n180\n00:09:40.740 --> 00:09:41.998\nSo hopefully you're following along.\n\n181\n00:09:41.998 --> 00:09:46.887\nA couple of others you need to be familiar\nwith, -gt, which is greater than,\n\n182\n00:09:46.887 --> 00:09:49.496\nI want the number to only be greater than.\n\n183\n00:09:49.496 --> 00:09:51.405\nAnd you think, well what's the big deal?\n\n184\n00:09:51.405 --> 00:09:53.710\nYou've got greater than equal to,\nwhy don't I just use that,\n\n185\n00:09:53.710 --> 00:09:55.270\nwhy have greater than?\n\n186\n00:09:55.270 --> 00:09:58.141\nBecause maybe I don't want it to\nbe equal to that second number,\n\n187\n00:09:58.141 --> 00:09:59.640\nI just want it to be greater than.\n\n188\n00:09:59.640 --> 00:10:02.092\nAnd that will actually\nhelp you out sometimes,\n\n189\n00:10:02.092 --> 00:10:05.472\nespecially when you're doing\nsome sort of numerical counting.\n\n190\n00:10:05.472 --> 00:10:08.505\nCreating something that's\nincrementing throughout time,\n\n191\n00:10:08.505 --> 00:10:10.787\nwe'll see that with loops\nas we get into that.\n\n192\n00:10:10.787 --> 00:10:14.453\nIf I wanted that to happen,\nusing the correct numerical\n\n193\n00:10:14.453 --> 00:10:18.665\ncomparison operator will help us\nget the exact results we need.\n\n194\n00:10:18.665 --> 00:10:21.321\nCuz sometimes you'll see it,\nwell, it didn't count number ten,\n\n195\n00:10:21.321 --> 00:10:22.770\nwhy didn't it do that?\n\n196\n00:10:22.770 --> 00:10:26.570\nCuz I just put less than as we see here,\nwe also have less than and equal to.\n\n197\n00:10:27.620 --> 00:10:32.290\nLess than, and then of course,\nnot equal, -ne.\n\n198\n00:10:32.290 --> 00:10:36.390\n&gt;&gt; I always liked how un-Unix like,\nthey made this easy to remember.\n\n199\n00:10:36.390 --> 00:10:39.260\nThere's two letters, and they're all\npretty straightforward, less than,\n\n200\n00:10:39.260 --> 00:10:43.200\nnot equal to, and so on, so\npretty easy to remember those.\n\n201\n00:10:43.200 --> 00:10:44.703\nAnd they just have a little dash,\n\n202\n00:10:44.703 --> 00:10:47.232\nwhich always makes me think\nof a command line argument.\n\n203\n00:10:47.232 --> 00:10:49.476\n&gt;&gt; But this isn't really\na command line argument, right?\n\n204\n00:10:49.476 --> 00:10:53.859\nBecause n1 is not a command, n1 is just,\nthat's your place holder for,\n\n205\n00:10:53.859 --> 00:10:56.340\nI'm gonna put some value here.\n\n206\n00:10:56.340 --> 00:11:00.130\nAnd then it just somehow\nmagically knows that -eq or\n\n207\n00:11:00.130 --> 00:11:02.620\nwhatever means something,\nfollowed by your second numbers.\n\n208\n00:11:02.620 --> 00:11:03.780\nHow does it magically know that?\n\n209\n00:11:03.780 --> 00:11:06.190\n&gt;&gt; Yeah, it's built into Bash itself.\n\n210\n00:11:06.190 --> 00:11:07.880\nIf you take a look inside\nof the Bash shell,\n\n211\n00:11:07.880 --> 00:11:12.980\nI think if you man builtins,\nit's an extensive file, by the way.\n\n212\n00:11:12.980 --> 00:11:17.181\nThis is where basically all this show\nis coming from, is that builtins and\n\n213\n00:11:17.181 --> 00:11:18.410\nthe man Bash.\n\n214\n00:11:18.410 --> 00:11:21.141\nIf you man Bash, take a look at that,\nIf you do man builtins,\n\n215\n00:11:21.141 --> 00:11:22.918\na lot of this stuff is gonna be in there.\n\n216\n00:11:22.918 --> 00:11:26.008\nAll the test and things with\nthat nature's gonna be in there.\n\n217\n00:11:26.008 --> 00:11:32.200\nAnd test, this is feature of test, so,\nand that's part of that builtin Bash.\n\n218\n00:11:32.200 --> 00:11:34.610\nSo yeah,\nit doesn't just magically go well,\n\n219\n00:11:34.610 --> 00:11:39.090\nI think that's, I'm gonna with less\nthan on that, just feels good to me.\n\n220\n00:11:39.090 --> 00:11:41.987\nNo, it's been told that\nthat's what that means.\n\n221\n00:11:41.987 --> 00:11:45.914\nSo if you need to reference that,\na really good way to do that is, man,\n\n222\n00:11:45.914 --> 00:11:48.552\nI can't remember what is that operator?\n\n223\n00:11:48.552 --> 00:11:53.490\nI can go to the built-ins and just search\nfor it in there, and you'll find it.\n\n224\n00:11:53.490 --> 00:11:55.685\nSo that is numerical comparisons.\n\n225\n00:11:55.685 --> 00:11:58.960\n&gt;&gt; And I know when we were\ndoing arithmetic, right,\n\n226\n00:11:58.960 --> 00:12:00.290\nwe had to put it in square brackets.\n\n227\n00:12:00.290 --> 00:12:01.500\nDo these go in square brackets as well?\n\n228\n00:12:01.500 --> 00:12:03.588\n&gt;&gt; Yes,\nthese go in square brackets as well,\n\n229\n00:12:03.588 --> 00:12:05.908\nbecause that is the test conditioner,\nright?\n\n230\n00:12:05.908 --> 00:12:11.931\nThat let's the if statement know, I'm\ngoing to do some sort of test condition\n\n231\n00:12:11.931 --> 00:12:18.339\nand not just look to see if something like\npassword, pwd completed successfully.\n\n232\n00:12:18.339 --> 00:12:22.340\nI'm gonna check that variable to\nsee if that had a zero exit status.\n\n233\n00:12:22.340 --> 00:12:27.055\nI'm gonna actually do something else\nother than look for an exit status.\n\n234\n00:12:27.055 --> 00:12:29.463\nI'm gonna look for\na true/false value, a valid or\n\n235\n00:12:29.463 --> 00:12:33.530\ninvalid value based off of the comparison\nstrings that you've given.\n\n236\n00:12:33.530 --> 00:12:37.290\nIf they're numbers,\nI have to do it this way, -eq, -ge.\n\n237\n00:12:37.290 --> 00:12:40.930\nI'm right there next to Don with the whole\nfact that they use the -eq, -ge,\n\n238\n00:12:40.930 --> 00:12:42.054\nthings of that nature.\n\n239\n00:12:42.054 --> 00:12:49.040\nSo much intuitiveness to that, and it\nreally helps me out, I like that system.\n\n240\n00:12:49.040 --> 00:12:54.018\nBut what's interesting, and this is\nwhat I was trying to get to earlier,\n\n241\n00:12:54.018 --> 00:12:57.729\nlet's take a look at cat\nstring_comparisons.txt.\n\n242\n00:12:57.729 --> 00:13:00.184\n&gt;&gt; You'll notice, and\nI'm going to leave both of them up here so\n\n243\n00:13:00.184 --> 00:13:01.802\nwe can kind of compare the comparisons.\n\n244\n00:13:01.802 --> 00:13:04.731\n&gt;&gt; [LAUGH]\n&gt;&gt; [CROSSTALK] play on words.\n\n245\n00:13:04.731 --> 00:13:10.926\nWe have str1, str2, and\nit has an equal sign in between it.\n\n246\n00:13:10.926 --> 00:13:12.659\nWhat the heck is going on here?\n\n247\n00:13:12.659 --> 00:13:14.821\nWhy didn't I, can't we just use -eq,\n\n248\n00:13:14.821 --> 00:13:18.860\nwould probably be the first question\nto pop to mind, and no you can't.\n\n249\n00:13:18.860 --> 00:13:20.150\nWhen you're comparing strings,\n\n250\n00:13:20.150 --> 00:13:24.750\nyou have to use the string\ncomparison that they give you.\n\n251\n00:13:24.750 --> 00:13:27.180\nNow the thing that throws me down,\nI don't know if this throws you.\n\n252\n00:13:27.180 --> 00:13:31.120\nFor the longest time I will try\nto do string comparisons and\n\n253\n00:13:31.120 --> 00:13:36.920\ndo -eq, str1 -eq str2, and\nof course it doesn't work.\n\n254\n00:13:36.920 --> 00:13:39.560\nAnd the problem is,\ncuz those are numerical comparisons.\n\n255\n00:13:39.560 --> 00:13:43.160\nBut to me, these are completely\nbackwards to what I think.\n\n256\n00:13:43.160 --> 00:13:44.910\nBecause when I did math as a kid,\n\n257\n00:13:44.910 --> 00:13:49.920\nand they'd tell you to do comparisons,\nthey'd use these type of operators.\n\n258\n00:13:49.920 --> 00:13:55.100\nThe greater than, less than,\nequal sign, always inside of math.\n\n259\n00:13:55.100 --> 00:13:59.775\nWithin Bash, somebody was sniffing glue or\nsomething that day, and\n\n260\n00:13:59.775 --> 00:14:01.721\nthey switched them around.\n\n261\n00:14:01.721 --> 00:14:04.447\n&gt;&gt; Well, I think it's one of\nthe things that developed over time.\n\n262\n00:14:04.447 --> 00:14:07.728\nThat originally, they developed the\nnumerical comparisons never anticipating\n\n263\n00:14:07.728 --> 00:14:09.020\nyou'd do a string comparison.\n\n264\n00:14:09.020 --> 00:14:13.795\nWho's going to say,\nis the run less than the word spell?\n\n265\n00:14:13.795 --> 00:14:16.197\nThat doesn't make sense,\nto do that comparison.\n\n266\n00:14:16.197 --> 00:14:19.689\nSo I think they initially developed\na numerical system, and then they said,\n\n267\n00:14:19.689 --> 00:14:21.208\nwell, how do we differentiate?\n\n268\n00:14:21.208 --> 00:14:24.729\nWe already used -eq and -le and,\nlet's do something else.\n\n269\n00:14:24.729 --> 00:14:27.238\nBut now it's just something\nwe have to remember, and\n\n270\n00:14:27.238 --> 00:14:29.090\nthat's kind of unfortunate, right?\n\n271\n00:14:29.090 --> 00:14:30.228\nSome things you just have to memorize.\n\n272\n00:14:30.228 --> 00:14:33.534\n&gt;&gt; Just one of those wonderful facts of\nlife that we all just have to get behind,\n\n273\n00:14:33.534 --> 00:14:37.165\nand understand that that's the way it is,\nand there's nothing we can do about it.\n\n274\n00:14:37.165 --> 00:14:40.092\nUnless you want to change Bash,\nwhich, maybe you get there,\n\n275\n00:14:40.092 --> 00:14:43.480\nmaybe one day you're there and\nyou're changing things.\n\n276\n00:14:43.480 --> 00:14:45.959\nWell, put that on the list\nfrom Dan Lowrie, there you go.\n\n277\n00:14:45.959 --> 00:14:49.980\nBut let's take a look of those, basically\nthe same kind of operations though.\n\n278\n00:14:49.980 --> 00:14:55.110\nYou've got =,\nyou've got != with the exclamation point.\n\n279\n00:14:55.110 --> 00:14:58.435\nYou'll notice that happens\na lot throughout programming.\n\n280\n00:14:58.435 --> 00:14:59.680\nThat if you see an exclamation point,\n\n281\n00:14:59.680 --> 00:15:02.110\na lot of times that does\nequal not something.\n\n282\n00:15:02.110 --> 00:15:04.700\nIf you wanted to negate,\nthis usually equals this, but\n\n283\n00:15:04.700 --> 00:15:08.580\nif I put a exclamation point in\nfront of it, it means not that.\n\n284\n00:15:08.580 --> 00:15:09.970\nWe'll see that again later.\n\n285\n00:15:11.110 --> 00:15:15.298\nWe also have the less than, the greater\nthan, and then these operators are here.\n\n286\n00:15:15.298 --> 00:15:20.529\nVery helpful as well, -n, that the str1\nhas a length greater than zero,\n\n287\n00:15:20.529 --> 00:15:24.527\nwe'll actually use this quite often,\nit's very nice.\n\n288\n00:15:24.527 --> 00:15:25.993\nAnd you do get to use the dash,\n\n289\n00:15:25.993 --> 00:15:30.020\nit's very similar to the way we\nlooked at the numerical operations.\n\n290\n00:15:30.020 --> 00:15:34.710\nWhere it will be var1 -n, or -n var1,\nit'll be kind of looking like that.\n\n291\n00:15:34.710 --> 00:15:38.482\nSo does var1 have a value\nto it bigger than zero,\n\n292\n00:15:38.482 --> 00:15:41.430\nsomething that has something there?\n\n293\n00:15:41.430 --> 00:15:45.480\nAnd then z is kind of the opposite,\nhas the length of zero, I'm sorry,\n\n294\n00:15:45.480 --> 00:15:48.590\ngreater than zero with -n,\n-z is the zero value.\n\n295\n00:15:48.590 --> 00:15:52.750\nSo if it equals nothing basically,\nthen do this.\n\n296\n00:15:52.750 --> 00:15:54.400\nIf it's -n, though,\nthen do something else.\n\n297\n00:15:54.400 --> 00:15:56.771\n&gt;&gt; And that's really important, because I\nknow I'll run into this a lot of times.\n\n298\n00:15:56.771 --> 00:16:01.836\nWhere I'll try and say, it's -eq, and\nthen just do quote, quote, right?\n\n299\n00:16:01.836 --> 00:16:04.926\nAnd you're thinking, well that's nothing,\nright, anything in between the two quote\n\n300\n00:16:04.926 --> 00:16:07.782\nmarks And it doesn't work that way,\nthat's why you've got a special operator.\n\n301\n00:16:07.782 --> 00:16:12.900\n&gt;&gt; Yea, because really comes out to\nbe a white space, a space somewhere.\n\n302\n00:16:12.900 --> 00:16:15.320\n&gt;&gt; Versus an actual null value,\nwhich is an absence.\n\n303\n00:16:15.320 --> 00:16:15.940\n&gt;&gt; Exactly.\n\n304\n00:16:15.940 --> 00:16:17.390\nThat becomes the problem.\n\n305\n00:16:17.390 --> 00:16:18.990\nSo they realized that, and they said,\n\n306\n00:16:18.990 --> 00:16:24.930\nwe'll just make some functionality\nin there for that problem.\n\n307\n00:16:24.930 --> 00:16:27.290\nAnd put these -n and -z's.\n\n308\n00:16:27.290 --> 00:16:31.890\nAll right, so as always,\nI have a script that I've written so\n\n309\n00:16:31.890 --> 00:16:34.400\nthat we could take a look at how some\nof these things work themselves out.\n\n310\n00:16:34.400 --> 00:16:36.990\nLet's take a look at, I'll clear for\nthe screen on this one,\n\n311\n00:16:36.990 --> 00:16:39.220\ncuz I think it might actually\nover scroll quite a bit.\n\n312\n00:16:39.220 --> 00:16:43.360\nBut basically what I've done is created\na bunch of mini scripts and commented out,\n\n313\n00:16:43.360 --> 00:16:45.780\nand we're gonna uncomment and\ncomment things.\n\n314\n00:16:45.780 --> 00:16:48.290\nAs necessary so\nwe can see the differences.\n\n315\n00:16:49.430 --> 00:16:53.370\nCat, comparisons dot sh.\n\n316\n00:16:53.370 --> 00:16:55.560\nThere we go.\nIt did over scroll on me there so\n\n317\n00:16:55.560 --> 00:16:57.390\nI'll scroll back up.\n\n318\n00:16:57.390 --> 00:16:59.970\nHere we go.\nAt the top of the file.\n\n319\n00:16:59.970 --> 00:17:01.500\nHere we go, shebang as always.\n\n320\n00:17:01.500 --> 00:17:06.050\nI have a couple of variables [INAUDIBLE]\nby one by two, three, four, five, and six.\n\n321\n00:17:06.050 --> 00:17:10.430\nThey'll have different types\nof values inside of them.\n\n322\n00:17:10.430 --> 00:17:13.660\nSome of them are numbers,\nsome of them are strings, right?\n\n323\n00:17:13.660 --> 00:17:17.090\nSo I've started off with numeric\ncomparisons, cuz just go back in order,\n\n324\n00:17:17.090 --> 00:17:19.180\nin the way we looked at this.\n\n325\n00:17:19.180 --> 00:17:25.340\nIf var1 is less than 100,\nthen echo \"$var1 is tiny\".\n\n326\n00:17:25.340 --> 00:17:28.170\nI arbitrarily said anything\nunder 100 is tiny.\n\n327\n00:17:28.170 --> 00:17:31.440\nCuz that's how I roll ladies and gents.\n\n328\n00:17:31.440 --> 00:17:33.020\nOtherwise nothing all right.\n\n329\n00:17:33.020 --> 00:17:35.830\nSo let's see if that'll work, so\nlet's run that up the flag pole.\n\n330\n00:17:35.830 --> 00:17:40.317\nIf I say ./comparisons.\n\n331\n00:17:40.317 --> 00:17:46.720\nThere we go compound testing.\n\n332\n00:17:46.720 --> 00:17:48.935\nRight no comparison work with me here.\n\n333\n00:17:48.935 --> 00:17:54.988\ncomparisons.sh, am I not\ntyping this correctly?\n\n334\n00:17:54.988 --> 00:17:56.765\nstring_comparisons.\n\n335\n00:17:59.059 --> 00:18:04.130\nComparisons.sh.\n\n336\n00:18:04.130 --> 00:18:05.020\nPermissions denied.\n\n337\n00:18:05.020 --> 00:18:06.080\nWell, there you go.\n\n338\n00:18:06.080 --> 00:18:07.090\nThere's the problem right there.\n\n339\n00:18:07.090 --> 00:18:11.410\nLet's take a look at this, cuz maybe I\nforgot to set that lovely executable bit.\n\n340\n00:18:11.410 --> 00:18:13.590\nOr maybe I Sometimes I work in Root.\n\n341\n00:18:14.660 --> 00:18:15.455\nThat's a bad idea.\n\n342\n00:18:15.455 --> 00:18:18.130\n[LAUGH] I'm out of Root and\nthis is a different user.\n\n343\n00:18:18.130 --> 00:18:24.470\nLet's take a look at that -l thing here,\ncomparisons.sh.\n\n344\n00:18:24.470 --> 00:18:26.430\nAnd there's the problem.\n\n345\n00:18:26.430 --> 00:18:28.420\nI did not set the executable bit there,\nMr. Pezet.\n\n346\n00:18:28.420 --> 00:18:30.290\nYou should have warned me.\n\n347\n00:18:30.290 --> 00:18:30.935\nI blame you.\n\n348\n00:18:30.935 --> 00:18:37.730\n[LAUGH] So let's do this,\nch mod u+x, and comparison.\n\n349\n00:18:37.730 --> 00:18:40.895\nNow let's see if that's.\n\n350\n00:18:40.895 --> 00:18:42.940\nHey, look at that.\n\n351\n00:18:42.940 --> 00:18:47.045\nIs tiny little smiley face levity.\n\n352\n00:18:47.045 --> 00:18:47.640\n[LAUGH].\n\n353\n00:18:47.640 --> 00:18:48.570\nAlright, so that's cool.\n\n354\n00:18:48.570 --> 00:18:50.470\nThat works, right, did that comparison.\n\n355\n00:18:50.470 --> 00:18:51.570\nLess than.\nVery good stuff.\n\n356\n00:18:51.570 --> 00:18:54.860\n&gt;&gt; Alright, so what we just did there, you\nknow, we took that variable, which would\n\n357\n00:18:54.860 --> 00:18:58.760\ncontain ten, and compared it to 100, it\nwas less, that was a numerical comparison.\n\n358\n00:18:58.760 --> 00:19:00.090\nCan you show us a string comparison?\n\n359\n00:19:00.090 --> 00:19:00.860\n&gt;&gt; Yeah, not a problem.\n\n360\n00:19:00.860 --> 00:19:03.070\nI've got us all squared away,\nand rounded up.\n\n361\n00:19:03.070 --> 00:19:05.440\nLet's go back in that file,\nand take a look at it.\n\n362\n00:19:05.440 --> 00:19:11.025\nActually, I'll vim this time, cuz I'll\nprobably need to uncomment some things,\n\n363\n00:19:11.025 --> 00:19:13.920\ncomparisons.sh.\n\n364\n00:19:13.920 --> 00:19:15.281\nAnd I'll set the numbers,\ncuz that'll help us.\n\n365\n00:19:18.416 --> 00:19:20.530\nThere we go, that'll make it\na little easier to look at.\n\n366\n00:19:20.530 --> 00:19:23.700\nAll right, so there was our numeric\ncomparison, this guy right here.\n\n367\n00:19:25.720 --> 00:19:26.290\nRight.\n\n368\n00:19:26.290 --> 00:19:27.890\nThat's all squared away,\nand said and done.\n\n369\n00:19:27.890 --> 00:19:31.480\nYou know something, I got another\none here that we could, check and\n\n370\n00:19:31.480 --> 00:19:33.650\nsee if things are not equal.\n\n371\n00:19:33.650 --> 00:19:37.950\nSo if var1 and var2 they're not equal\nto each other which they don't,\n\n372\n00:19:37.950 --> 00:19:39.630\nthen we would get that\ntest to work out as well.\n\n373\n00:19:39.630 --> 00:19:43.670\nBasically the same kind of idea, just\ngive you another option there to look at.\n\n374\n00:19:43.670 --> 00:19:44.850\nHere's screen comparisons.\n\n375\n00:19:44.850 --> 00:19:48.070\nLet me comment out our first one\nin case we want to run this thing.\n\n376\n00:19:49.420 --> 00:19:54.690\nI'll just throw some hash marks,\nhelps if I\n\n377\n00:19:54.690 --> 00:19:59.300\nput in my actual insert It's not there.\n\n378\n00:19:59.300 --> 00:19:59.920\nThere we are.\n\n379\n00:20:02.150 --> 00:20:03.080\nNow we can do that.\n\n380\n00:20:03.080 --> 00:20:06.510\nThere we go, that's helpful,\nthat's helpful, that's helpful.\n\n381\n00:20:06.510 --> 00:20:11.034\nThere we go and so\nhere's a string comparison.\n\n382\n00:20:11.034 --> 00:20:14.489\nIf $var3 = $USER.\n\n383\n00:20:14.489 --> 00:20:17.580\nAll right, so let's take a look,\nwhat is var3?\n\n384\n00:20:17.580 --> 00:20:20.520\nvar3 at the top says dLowrie, great.\n\n385\n00:20:21.930 --> 00:20:25.000\nThen Echo, welcome master.\n\n386\n00:20:25.000 --> 00:20:30.620\nThis is my system I should be running it,\nI should be the one logged in.\n\n387\n00:20:30.620 --> 00:20:36.570\nIf it does not equal user,\nif var4 does not equal something else\n\n388\n00:20:36.570 --> 00:20:41.310\nthen we could do that as well and\nI'll just have to un-comment that code.\n\n389\n00:20:41.310 --> 00:20:43.880\nSo if I uncomment this and I run that,\n\n390\n00:20:43.880 --> 00:20:47.020\nIt's going to take a look at that user\nvariable which is a string, right?\n\n391\n00:20:47.020 --> 00:20:47.690\nIt's D lou.\n\n392\n00:20:47.690 --> 00:20:48.360\nIt's not a 1.\n\n393\n00:20:48.360 --> 00:20:51.530\nIt's not a 2.\nIt's an actual string of characters-- of\n\n394\n00:20:51.530 --> 00:20:56.220\nletters that is going to check those\ncomparisons to see if this string and\n\n395\n00:20:56.220 --> 00:20:58.870\nthis string jive with each other.\n\n396\n00:20:58.870 --> 00:21:02.520\nAnd using that equals sign here is the\nimportant thing Now Daniel, going back to\n\n397\n00:21:02.520 --> 00:21:06.320\nthe beginning of the show and looking at\nthis, this would be a nested if, right?\n\n398\n00:21:06.320 --> 00:21:09.630\nBecause you have your first if\nstatement and there is no fee and\n\n399\n00:21:09.630 --> 00:21:11.890\nthen another if statement, or\nactually, you're just missing a fee.\n\n400\n00:21:11.890 --> 00:21:13.400\n&gt;&gt; Yes, no, no [LAUGH] I'm actually not.\n\n401\n00:21:13.400 --> 00:21:15.910\nI know it's confusing as I'm\na confusing kind of guy.\n\n402\n00:21:15.910 --> 00:21:18.090\nI'm over here throwing Mr. under the bus.\n\n403\n00:21:18.090 --> 00:21:19.065\nHe's just like, what are you doing?\n\n404\n00:21:19.065 --> 00:21:20.558\n[LAUGH] And you know what though,\n\n405\n00:21:20.558 --> 00:21:26.130\nit brings up a very good\nExplanation here is that code.\n\n406\n00:21:26.130 --> 00:21:27.590\nDon has no idea what is going on.\n\n407\n00:21:27.590 --> 00:21:30.670\nFound some weird stuff and\nhe is like, you are missing a V.\n\n408\n00:21:30.670 --> 00:21:33.010\nI am not, in my mind, this makes sense.\n\n409\n00:21:33.010 --> 00:21:37.110\nBut other people might look at your codes,\nso I probably want to stick to standards.\n\n410\n00:21:37.110 --> 00:21:40.900\nAnd break this out into\ntwo different because,\n\n411\n00:21:40.900 --> 00:21:45.260\nwhat I wanted to do was just show you\nthat I just wanna comment one out.\n\n412\n00:21:45.260 --> 00:21:46.440\nAnd uncomment the other.\n\n413\n00:21:47.680 --> 00:21:48.370\n&gt;&gt; I see, I gotcha.\n\n414\n00:21:48.370 --> 00:21:51.020\n&gt;&gt; See, but if I would have made\nsome notes about that in here,\n\n415\n00:21:51.020 --> 00:21:52.770\nhe would have known\nexactly what's going on.\n\n416\n00:21:52.770 --> 00:21:54.820\nHe would have looked at it,\nbeen a little confused.\n\n417\n00:21:54.820 --> 00:21:56.720\nSaid, is there any comments of this?\n\n418\n00:21:56.720 --> 00:21:57.400\nThere are some.\n\n419\n00:21:57.400 --> 00:22:01.900\nJust uncomment what you want to occur and\nthat would have happened.\n\n420\n00:22:01.900 --> 00:22:03.880\nSo I've got basically two\ndifferent ones there,\n\n421\n00:22:03.880 --> 00:22:08.340\nwe could make this a little more\nreadable for everybody else out there.\n\n422\n00:22:08.340 --> 00:22:08.890\nNot just me.\n\n423\n00:22:08.890 --> 00:22:09.920\nI'm not the only one looking at this.\n\n424\n00:22:09.920 --> 00:22:11.190\nWhat's my problem?\n\n425\n00:22:11.190 --> 00:22:16.290\nBy doing this and\nI can comment that out like that, and\n\n426\n00:22:16.290 --> 00:22:19.060\nthen maybe doing that right there.\n\n427\n00:22:19.060 --> 00:22:20.760\nSo now I can uncomment one block of code.\n\n428\n00:22:20.760 --> 00:22:22.403\nMaybe even do a little\nsomething like this.\n\n429\n00:22:24.955 --> 00:22:32.490\nUncomment the if statement\nthat you wish to use.\n\n430\n00:22:32.490 --> 00:22:37.935\nThis probably makes a whole lot sense to\neverybody looking at it other than myself.\n\n431\n00:22:37.935 --> 00:22:40.152\n[LAUGH]\n&gt;&gt; And that, what do they call it?\n\n432\n00:22:40.152 --> 00:22:41.070\nCode order or whatever.\n\n433\n00:22:41.070 --> 00:22:43.720\nWriting clean code, making sure\npeople are gonna understand that.\n\n434\n00:22:43.720 --> 00:22:44.850\n&gt;&gt; That's exactly right.\n\n435\n00:22:44.850 --> 00:22:49.170\nI had a lot of shows to work on\nto get ready for this series, so\n\n436\n00:22:49.170 --> 00:22:51.620\nI was saving myself some time.\n\n437\n00:22:51.620 --> 00:22:52.800\nI got this from Justin actually,\n\n438\n00:22:52.800 --> 00:22:57.380\nhe says, the first thing you\ndo just get it to work right?\n\n439\n00:22:57.380 --> 00:23:01.400\nJust get out what does he call\nit the simple viable product or\n\n440\n00:23:01.400 --> 00:23:02.460\nsomething like that.\n\n441\n00:23:02.460 --> 00:23:04.050\nSomething that just works.\n\n442\n00:23:04.050 --> 00:23:05.710\nThen you go back, you refactor it,\n\n443\n00:23:05.710 --> 00:23:08.830\nyou make it look better, you get it to\nwork better, things of that nature.\n\n444\n00:23:08.830 --> 00:23:13.710\nSo going back and added this in will now\nhelp me even remember why did I do that?\n\n445\n00:23:13.710 --> 00:23:15.340\nYeah, there you go, a random aside.\n\n446\n00:23:15.340 --> 00:23:20.780\nSo there you go, we see the equals\noperator, we see the not equals\n\n447\n00:23:20.780 --> 00:23:24.730\noperator happening, and that's how they\nlook inside of the natural if statement.\n\n448\n00:23:24.730 --> 00:23:29.750\nAnd of course, things can get jacked up,\nI actually did comment this one cuz\n\n449\n00:23:29.750 --> 00:23:32.180\nprobably had to remind\nmyself what's going on here.\n\n450\n00:23:32.180 --> 00:23:33.970\nUsing the greater than and less than and\n\n451\n00:23:33.970 --> 00:23:37.880\nI wanted to give you guys a look\nat how that might work itself out.\n\n452\n00:23:39.020 --> 00:23:45.630\nSo if we see if Var5 is greater\nthan Var6 and let's look up here.\n\n453\n00:23:45.630 --> 00:23:47.140\nWhat's var five and var six.\n\n454\n00:23:47.140 --> 00:23:51.720\nWell var five and var six are a and\nb we're using a string operator.\n\n455\n00:23:51.720 --> 00:23:55.755\nEverything looks great,\na var five and var six are strings.\n\n456\n00:23:55.755 --> 00:24:00.320\nNo big deal there, so what's the big deal?\n\n457\n00:24:00.320 --> 00:24:04.285\nThen var five is greater than var six.\n\n458\n00:24:04.285 --> 00:24:08.413\nAll right, well, let's fire that off,\nlet's uncomment this thing.\n\n459\n00:24:08.413 --> 00:24:11.620\nYou can actually do this, Don,\nI looked this up for the show,\n\n460\n00:24:11.620 --> 00:24:13.671\nit's a really nice thing inside of vi.\n\n461\n00:24:13.671 --> 00:24:18.385\nWhich is if I do colon, and that number's\n\n462\n00:24:18.385 --> 00:24:23.247\ngonna be 45 to, I'm doing a range here.\n\n463\n00:24:23.247 --> 00:24:27.406\n48, make sure I got it all, I think I did.\n\n464\n00:24:27.406 --> 00:24:31.900\nAnd then I say %normal x.\n\n465\n00:24:31.900 --> 00:24:35.160\nI should remove those,\n[LAUGH] look at that, so cool!\n\n466\n00:24:35.160 --> 00:24:37.966\nLet's exit out of there, wq, and\nlet's run that thing and see what happens.\n\n467\n00:24:37.966 --> 00:24:40.485\nYeah, I think I commented everything out.\n\n468\n00:24:40.485 --> 00:24:45.316\n./comparisons.sh, look at that.\n\n469\n00:24:45.316 --> 00:24:50.920\nb is greater than a, great,\nawesome, but if I do an ls, I have.\n\n470\n00:24:50.920 --> 00:24:55.774\nMaybe I didn't uncomment enough here.\n\n471\n00:24:55.774 --> 00:25:02.741\nLook at this, a, what is that,\nright, redirectors.\n\n472\n00:25:02.741 --> 00:25:08.341\nRemember, the greater than\nsign is also a redirector.\n\n473\n00:25:08.341 --> 00:25:11.360\nSo it might be thinking, what's cat a?\n\n474\n00:25:11.360 --> 00:25:15.870\nThere's nothing in there,\nthere's nothing to put in it.\n\n475\n00:25:15.870 --> 00:25:19.390\nBut it created a file called a,\nbecause it thinks it's a redirector.\n\n476\n00:25:19.390 --> 00:25:23.543\nSometimes we have to actually comment on,\nor not comment out, but\n\n477\n00:25:23.543 --> 00:25:27.190\nnegate the fact,\nmake you think this is not a redirector.\n\n478\n00:25:27.190 --> 00:25:30.340\nThis is a string operator,\na comparison operator.\n\n479\n00:25:30.340 --> 00:25:32.770\nWe have to think of it that way right?\n\n480\n00:25:32.770 --> 00:25:36.545\nSo that can happen, so\nlet's go back in our file here cat,\n\n481\n00:25:36.545 --> 00:25:38.561\nwhat was it comparisons.sh.\n\n482\n00:25:38.561 --> 00:25:43.535\nLet's go back down, or\nup I guess it is, overscrolled.\n\n483\n00:25:45.978 --> 00:25:47.420\nAnd I guess it was supposed to be.\n\n484\n00:25:47.420 --> 00:25:50.470\nI must have changed some values before,\nbar three and four, yeah I did.\n\n485\n00:25:50.470 --> 00:25:52.770\nI put the wrong variables in there,\nbut that's no big deal.\n\n486\n00:25:52.770 --> 00:25:55.370\nThey're basically the same thing,\nwhat I want it to do.\n\n487\n00:25:55.370 --> 00:25:58.543\nCuz I did a ls and\nthere should have been a t rush file.\n\n488\n00:25:58.543 --> 00:26:01.498\nBut instead they made it a file,\nbecause they used the wrong variables,\n\n489\n00:26:01.498 --> 00:26:02.135\nbut same idea.\n\n490\n00:26:02.135 --> 00:26:06.650\nBut if you look here, I can negate that\nspecial character with that backslash.\n\n491\n00:26:06.650 --> 00:26:09.490\nSo you gotta be careful\nwhen using them sometimes.\n\n492\n00:26:09.490 --> 00:26:13.910\nIf you start getting weird output or\nnot getting the output you expect,\n\n493\n00:26:13.910 --> 00:26:17.390\nmaybe you need to negate\nsome of your operators.\n\n494\n00:26:17.390 --> 00:26:22.006\nIf you start seeing random files created\nthat look a lot like your variables,\n\n495\n00:26:22.006 --> 00:26:23.649\nthat could be the problem.\n\n496\n00:26:23.649 --> 00:26:25.740\nSo you gotta be aware\nthat that does happen.\n\n497\n00:26:26.830 --> 00:26:32.110\nAll right, I think Don that that is,\nis that all I have to do here?\n\n498\n00:26:32.110 --> 00:26:36.518\nString comparisons and file comparisons,\n\n499\n00:26:36.518 --> 00:26:40.069\na very very interesting thing as well.\n\n500\n00:26:40.069 --> 00:26:44.160\nWhat if I have files,\nthey have file comparisons.\n\n501\n00:26:44.160 --> 00:26:47.513\nI think I have one for that as well,\ndo cat file comparisons, yeah.\n\n502\n00:26:47.513 --> 00:26:50.690\nLet's take a look at those guys.\n\n503\n00:26:50.690 --> 00:26:53.210\nInteresting thing, kinda like what\nwe've been doing with strings, and\n\n504\n00:26:53.210 --> 00:26:56.230\nnumbers but I'm doing it with files now.\n\n505\n00:26:56.230 --> 00:26:58.250\nNot necessarily the names of the files,\nbut whether or\n\n506\n00:26:58.250 --> 00:27:02.540\nnot the file exists,\nis it a file, is it a directory?\n\n507\n00:27:02.540 --> 00:27:05.397\nThat kind of logic, very cool.\n\n508\n00:27:05.397 --> 00:27:06.016\n&gt;&gt; That's one that I used a lot.\n\n509\n00:27:06.016 --> 00:27:09.717\nI don't necessarily care what's in\nthe file, but just testing it to see if\n\n510\n00:27:09.717 --> 00:27:13.010\nthe file even exists,\nbecause I might not want to overwrite it.\n\n511\n00:27:13.010 --> 00:27:15.964\nI might wanna have a clause in there says\nif the file already exists, back it up.\n\n512\n00:27:15.964 --> 00:27:20.000\nAnd then write a new file or\nwhatever, so that one I use a ton.\n\n513\n00:27:20.000 --> 00:27:22.400\nThe other ones I don't\nreally use all that much.\n\n514\n00:27:22.400 --> 00:27:25.322\nWell I do date comparisons sometimes\nto find out if one file was newer\n\n515\n00:27:25.322 --> 00:27:25.997\nthan another.\n\n516\n00:27:25.997 --> 00:27:27.258\nAnd so it's neat to be able\nto do those comparisons.\n\n517\n00:27:27.258 --> 00:27:29.895\nAnd you can see in the options\nthere that Daniel has listed,\n\n518\n00:27:29.895 --> 00:27:32.180\nyou've got the ability\nto check a lot of that.\n\n519\n00:27:32.180 --> 00:27:33.830\n&gt;&gt; Yeah, and\nthat's when we need to be able to do it.\n\n520\n00:27:33.830 --> 00:27:36.480\nAnd like Don said,\nyou'll actually do this.\n\n521\n00:27:36.480 --> 00:27:41.007\nI find this to be probably one of the most\nhandy options available to us as far as\n\n522\n00:27:41.007 --> 00:27:42.201\na comparison goes.\n\n523\n00:27:42.201 --> 00:27:45.678\nCuz a lot of times I just\nwanna see if that file exists,\n\n524\n00:27:45.678 --> 00:27:49.170\nbecause what if I'm creating\nnew files in my script?\n\n525\n00:27:49.170 --> 00:27:52.747\nAnd I wanna make sure I don't stomp\nover a file that already exists?\n\n526\n00:27:52.747 --> 00:27:54.550\nSo I gotta check, does that file exist?\n\n527\n00:27:54.550 --> 00:27:57.130\nIf it does, well then I need to increment\n\n528\n00:27:57.130 --> 00:28:00.650\nthe number that's gonna be attached\non the end of it, or whatever, right?\n\n529\n00:28:00.650 --> 00:28:01.660\nSo how can we do that?\n\n530\n00:28:01.660 --> 00:28:05.980\nJust some operators you might use\nin that daily occurrence is -d,\n\n531\n00:28:05.980 --> 00:28:09.470\nand then the file name,\nwhatever the file might be.\n\n532\n00:28:09.470 --> 00:28:12.500\nChecks if the file exists and\nis a directory.\n\n533\n00:28:12.500 --> 00:28:15.780\n-e just checks if the file does exist.\n\n534\n00:28:16.935 --> 00:28:19.620\n-f checks if the file existing is a file.\n\n535\n00:28:20.785 --> 00:28:22.920\n-r if the file exists and is readable.\n\n536\n00:28:22.920 --> 00:28:25.411\nSo we are starting to check\npermissions on files.\n\n537\n00:28:25.411 --> 00:28:28.373\nProbably would have came in handy if I had\na little script to check with it or not.\n\n538\n00:28:28.373 --> 00:28:31.814\nMy script comparisons.sh\nhas the executable file,\n\n539\n00:28:31.814 --> 00:28:34.260\nright, because we had that as well, right?\n\n540\n00:28:34.260 --> 00:28:39.053\nWe've got some, all the great stuff there,\nthe write is writable,\n\n541\n00:28:39.053 --> 00:28:40.963\nis it executable with -x.\n\n542\n00:28:40.963 --> 00:28:48.060\nThis one's fun -s,\ndoes the file exist and is it not empty?\n\n543\n00:28:48.060 --> 00:28:51.120\nDoes it have content in it, or\nis it just an empty file waiting for\n\n544\n00:28:51.120 --> 00:28:52.320\nsomething to go into it?\n\n545\n00:28:52.320 --> 00:28:55.148\nMaybe that's some logic I need\nto employ for whatever reason.\n\n546\n00:28:55.148 --> 00:28:56.440\nYeah, I wanted to create a file, but\n\n547\n00:28:56.440 --> 00:28:59.290\nI didn't want anything in it because\nlater we're gonna fill it with something.\n\n548\n00:28:59.290 --> 00:29:01.490\nIf it already has something in it,\nI don't wanna write over that file.\n\n549\n00:29:01.490 --> 00:29:04.040\nI wanna create a new file and\nwork that way.\n\n550\n00:29:04.040 --> 00:29:05.400\nSee how the logic starts to work out?\n\n551\n00:29:05.400 --> 00:29:07.990\nYou have to think of these things,\nand you will.\n\n552\n00:29:07.990 --> 00:29:10.842\nThe more you write something,\nthe more you find a project and go, man,\n\n553\n00:29:10.842 --> 00:29:12.685\nI could probably write\nthis up in a Bash script.\n\n554\n00:29:12.685 --> 00:29:16.040\nThe more that logic will\nmake itself known to you.\n\n555\n00:29:16.040 --> 00:29:20.028\nSo knowing that you can do those is gonna\nexpand your ability to make a good script.\n\n556\n00:29:20.028 --> 00:29:24.145\nAnd then -O, it's not a zero by the way.\n\n557\n00:29:24.145 --> 00:29:27.319\nChecks if the file exists and\nis owned by the current user.\n\n558\n00:29:27.319 --> 00:29:30.077\nAnd we get the same kind of idea with -G,\n\n559\n00:29:30.077 --> 00:29:33.500\nthe default group is the same\nas the current user.\n\n560\n00:29:33.500 --> 00:29:36.606\nChecking groups and users, and\n\n561\n00:29:36.606 --> 00:29:42.250\nthen you can also do file1 -nt file2,\nis it newer than?\n\n562\n00:29:42.250 --> 00:29:47.823\nIs file1 newer than file2, or\nis -ot file1 older than file2?\n\n563\n00:29:47.823 --> 00:29:52.787\nWe're doing some almost math comparison\nthere because it's working with dates, but\n\n564\n00:29:52.787 --> 00:29:54.316\nsame kind of idea.\n\n565\n00:29:54.316 --> 00:29:57.780\nA lot of comparison operators that they\ngive us inside of our Bash environment\n\n566\n00:29:57.780 --> 00:29:59.710\nto give us a lot of power.\n\n567\n00:29:59.710 --> 00:30:01.880\nJust really quickly let's look\nover this script I wrote,\n\n568\n00:30:01.880 --> 00:30:05.680\nso you can see what it would look\nlike in an actual environment.\n\n569\n00:30:05.680 --> 00:30:10.226\nI made a variable $homer=/home/dir,\nmy home directory, right,\n\n570\n00:30:10.226 --> 00:30:12.080\nI just called that $homer.\n\n571\n00:30:12.080 --> 00:30:14.111\nCheck for existence, file and directory.\n\n572\n00:30:14.111 --> 00:30:18.521\nIf -e $homer, so if this file exists,\n\n573\n00:30:18.521 --> 00:30:23.990\nthen $homer is valid,\nthat does exist as a file.\n\n574\n00:30:23.990 --> 00:30:28.611\nCuz remember, in Linux, directories and\nfiles are both considered files.\n\n575\n00:30:28.611 --> 00:30:34.351\nBut if -f, which is file existing as\na file, then echo $homer is a FILE.\n\n576\n00:30:34.351 --> 00:30:40.749\nElif -d, if $homer's directory,\nso now it's checking for\n\n577\n00:30:40.749 --> 00:30:46.074\nfile directory status,\nthen echo $homer is a DIR.\n\n578\n00:30:46.074 --> 00:30:48.733\nAnd then else $homer's neither a file or\na directory,\n\n579\n00:30:48.733 --> 00:30:50.440\nit didn't give me what I expected.\n\n580\n00:30:50.440 --> 00:30:53.340\nRemember, the catchall\nwith the else statement.\n\n581\n00:30:53.340 --> 00:30:56.581\nAnd then if nothing works,\nit just says, I'm very confused!\n\n582\n00:30:56.581 --> 00:30:58.292\n[LAUGH] So that's how that works out.\n\n583\n00:30:58.292 --> 00:30:59.414\nSo that's how you see that.\n\n584\n00:30:59.414 --> 00:31:04.244\nSo I'm checking for file status, I'm\nchecking for existence, is it a directory,\n\n585\n00:31:04.244 --> 00:31:05.310\nis it a file?\n\n586\n00:31:05.310 --> 00:31:07.262\nAnd then just echo that stuff out to me.\n\n587\n00:31:07.262 --> 00:31:11.235\nWorking in nested ifs, kind of taking the\nculmination of everything we've seen so\n\n588\n00:31:11.235 --> 00:31:13.860\nfar in this episode and\nputting it into one big script.\n\n589\n00:31:15.170 --> 00:31:18.800\n&gt;&gt; And these comparisons really\ndo become the pivotal part of\n\n590\n00:31:18.800 --> 00:31:20.910\nthe logic that goes into\nthese if statements.\n\n591\n00:31:20.910 --> 00:31:23.490\nSo in the last episode,\nit was really just simple.\n\n592\n00:31:23.490 --> 00:31:27.940\nWe tested to see if a variable,\nit equaled something, right?\n\n593\n00:31:27.940 --> 00:31:31.072\nBut now we start to see where we can\ndo a heck of a lot more comparing more\n\n594\n00:31:31.072 --> 00:31:32.584\nthan one variable to each other.\n\n595\n00:31:32.584 --> 00:31:35.333\nWe can sort of really bring\nin arithmetic and say,\n\n596\n00:31:35.333 --> 00:31:38.090\nif variable plus one equals,\nthat kind of thing.\n\n597\n00:31:38.090 --> 00:31:41.750\nYou can really start mixing this together\nand creating some complex logic, and\n\n598\n00:31:41.750 --> 00:31:43.507\nit's not artificial intelligence.\n\n599\n00:31:43.507 --> 00:31:46.390\nWe haven't created a new organism here or\nanything.\n\n600\n00:31:46.390 --> 00:31:49.200\nBut it is able to make\nthe script a lot more dynamic,\n\n601\n00:31:49.200 --> 00:31:52.880\nwhich means you can repurpose it and\nuse it for a number of different things.\n\n602\n00:31:52.880 --> 00:31:56.250\nAnd that's where script\noptimization really comes in.\n\n603\n00:31:56.250 --> 00:31:58.016\nSo I think you did a great\njob of showing that Daniel.\n\n604\n00:31:58.016 --> 00:32:00.460\nDo you have anything else that you\nwanted to mention before we wrapped up?\n\n605\n00:32:00.460 --> 00:32:03.301\n&gt;&gt; Yeah, actually I've got\nlike probably a whole 15 or\n\n606\n00:32:03.301 --> 00:32:05.411\n20 minutes of stuff I want to mention.\n\n607\n00:32:05.411 --> 00:32:07.121\n[LAUGH] I did not expect\nthis to take that long.\n\n608\n00:32:07.121 --> 00:32:10.779\nBut I wanted to make sure you guys have\na good grasp and I explained it in a way\n\n609\n00:32:10.779 --> 00:32:14.870\nthat is as understandable as I think is\npossible at least for me to give to you.\n\n610\n00:32:14.870 --> 00:32:17.657\nBut I've got more stuff that we need to\ngo over when it comes to this conditional\n\n611\n00:32:17.657 --> 00:32:19.954\nlogic, and statements, and\nthings that we're working with.\n\n612\n00:32:19.954 --> 00:32:23.960\nSo it's like we're headed to a part three,\nit's rare for me.\n\n613\n00:32:23.960 --> 00:32:24.921\nI call my shows pretty well.\n\n614\n00:32:24.921 --> 00:32:26.101\nI totally missed the mark though.\n\n615\n00:32:26.101 --> 00:32:27.947\n&gt;&gt; You're doing the George Lucas trilogy,\nright?\n\n616\n00:32:27.947 --> 00:32:31.940\nSo at the end of part two, everybody's-\n&gt;&gt; Dead.\n\n617\n00:32:31.940 --> 00:32:36.320\n&gt;&gt; Beaten and down, and then part three\nwe come back and save the universe.\n\n618\n00:32:36.320 --> 00:32:36.820\n&gt;&gt; That's right.\n&gt;&gt; So\n\n619\n00:32:36.820 --> 00:32:40.438\ndefinitely something we wanna tackle\nbecause you are going to give us a chance\n\n620\n00:32:40.438 --> 00:32:43.012\nto see if we actually combine\na lot of these operators.\n\n621\n00:32:43.012 --> 00:32:44.550\nAnd really start to do\nsome advanced logic, and\n\n622\n00:32:44.550 --> 00:32:45.750\nthat's when things get really fun.\n\n623\n00:32:45.750 --> 00:32:48.775\nSo be sure to stay tuned for that,\nbut otherwise we'll go ahead and\n\n624\n00:32:48.775 --> 00:32:50.296\nwrap this episode up right here.\n\n625\n00:32:50.296 --> 00:32:53.650\nSo in this episode we did get a chance\nto see how to do those comparisons.\n\n626\n00:32:53.650 --> 00:32:55.804\nWe saw stream comparisons and\nnumerical comparisons.\n\n627\n00:32:55.804 --> 00:32:59.825\nAnd be careful to make sure that\nyou use the right operators for\n\n628\n00:32:59.825 --> 00:33:02.110\neach cuz they are different.\n\n629\n00:33:02.110 --> 00:33:04.263\nAnd then we use or\nsquare brackets to separate those out, so\n\n630\n00:33:04.263 --> 00:33:06.772\nthat Bash understands what the heck\nwe're doing in the first place.\n\n631\n00:33:06.772 --> 00:33:09.880\nOtherwise it assumes we're doing command\nline arguments that just don't make sense.\n\n632\n00:33:09.880 --> 00:33:10.825\n&gt;&gt; Stupid Bash.\n[LAUGH]\n\n633\n00:33:10.825 --> 00:33:12.899\n&gt;&gt; Or remember to escape characters if\n\n634\n00:33:12.899 --> 00:33:15.393\nneed be, or negate characters if need be.\n\n635\n00:33:15.393 --> 00:33:19.135\nSo that we're not doing output redirection\nor input redirection, or whatever,\n\n636\n00:33:19.135 --> 00:33:21.630\nthat can result in all\nsorts of bad things.\n\n637\n00:33:21.630 --> 00:33:23.660\nWell, I hope you guys enjoyed it,\nthat's it for this show.\n\n638\n00:33:23.660 --> 00:33:27.471\nStay tuned, though, because we have more\nLinux Shell Scripting Basics coming up.\n\n639\n00:33:27.471 --> 00:33:29.433\nBut for now,\nwe are signing off for ITPRO.TV.\n\n640\n00:33:29.433 --> 00:33:29.955\nI am Don Pezet.\n\n641\n00:33:29.955 --> 00:33:30.954\n&gt;&gt; And I am Daniel Lowrie.\n\n642\n00:33:30.954 --> 00:33:32.277\n&gt;&gt; And we'll see you next time.\n\n643\n00:33:32.277 --> 00:33:40.379\n[MUSIC]\n\n644\n00:33:40.379 --> 00:33:45.999\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "236929874"
        },
        {
          "description": "In this episode, Daniel and Don take a look at using conditional\nlogic statements in bash scripts. Here they finish their discussion by going\nover compound testing; employing boolean logic as well as when to use double\nparenthesis(()) and/or double brackets[[]]. Finally they show you the case\nconditional statement, both its format and functions.",
          "length": "1996",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-3-conditional_statements_pt_3-100417-PGM.00_32_59_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-3-conditional_statements_pt_3-100417-PGM.00_32_59_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-4-1-3-conditional_statements_pt_3-100417-PGM.00_32_59_26.Still001-sm.jpg",
          "title": "Conditional Statements Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:05.414\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:05.414 --> 00:00:06.659\n[CROSSTALK]\n\n3\n00:00:06.659 --> 00:00:08.469\n[MUSIC]\n\n4\n00:00:08.469 --> 00:00:10.469\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.469 --> 00:00:15.420\n&gt;&gt; All right, good morning,\ngood afternoon and good evening.\n\n6\n00:00:15.420 --> 00:00:17.470\nWelcome back to another\nepisode of ITProTV.\n\n7\n00:00:17.470 --> 00:00:18.360\nI'm your host,\n\n8\n00:00:18.360 --> 00:00:22.770\nDon Pezet back again with another\nepisode of Linux Shell Scripting Basics.\n\n9\n00:00:22.770 --> 00:00:23.750\nIn this episode,\n\n10\n00:00:23.750 --> 00:00:27.020\nwe are gonna be continuing our\nadventure on conditional statements.\n\n11\n00:00:27.020 --> 00:00:30.770\nBecause if we didn't get through all\nour content in the last episode,\n\n12\n00:00:30.770 --> 00:00:32.440\nthen we have to have a part three.\n\n13\n00:00:32.440 --> 00:00:33.960\nAnd that is where we are.\n\n14\n00:00:33.960 --> 00:00:38.480\nSo here to help us under conditional\nterms is Mr. Daniel Lowrie.\n\n15\n00:00:38.480 --> 00:00:39.880\nDaniel, thanks for joining us back.\n\n16\n00:00:39.880 --> 00:00:41.450\n&gt;&gt; Thanks for having me yet again.\n\n17\n00:00:41.450 --> 00:00:45.660\nWe're definitely back to\ncontinue the logic of conditions.\n\n18\n00:00:45.660 --> 00:00:47.760\nThe what if this and what if that?\n\n19\n00:00:47.760 --> 00:00:49.570\nThen well, we need to do this,\nthat and the other, right?\n\n20\n00:00:49.570 --> 00:00:51.310\nThat's basically where we're at.\n\n21\n00:00:51.310 --> 00:00:55.120\nAnd we've been through ifs, we've looked\nat the basic structure of that, part one.\n\n22\n00:00:55.120 --> 00:01:00.040\nPart two we had to finish off ifs and the\nways we can use it with the nested ifs.\n\n23\n00:01:00.040 --> 00:01:03.830\nThen we looked at comparisons\nworking with the test command\n\n24\n00:01:03.830 --> 00:01:07.250\nthat kind of goes along\nwith most if statements.\n\n25\n00:01:07.250 --> 00:01:12.430\nAnd how we work with those numbers,\nstrings, files a lot of great operators.\n\n26\n00:01:12.430 --> 00:01:17.808\nHow do we compare those types of things\ntogether, and so on and so forth.\n\n27\n00:01:17.808 --> 00:01:21.580\nNow we have a few more things that we\nneeded to cover when it comes to testing\n\n28\n00:01:21.580 --> 00:01:22.780\nconditions.\n\n29\n00:01:22.780 --> 00:01:27.720\nThe test condition inside of our Bash\nscripts, a very nice thing, right?\n\n30\n00:01:27.720 --> 00:01:29.550\nWithout it it'd be real hard for\n\n31\n00:01:29.550 --> 00:01:34.640\nus to do a lot of our ifs,\na lot of our conditional argumentation.\n\n32\n00:01:34.640 --> 00:01:38.610\nBut it's a bit, how should I say this?\n\n33\n00:01:38.610 --> 00:01:43.630\nIt doesn't have all the robust features\nthat one may want out of a test statement.\n\n34\n00:01:43.630 --> 00:01:48.080\nSo there are other ways in which we can\ntest things out and look at things.\n\n35\n00:01:48.080 --> 00:01:50.570\nAnd one of the first ways I\nwanna start talking about\n\n36\n00:01:50.570 --> 00:01:54.310\nis through what's called as I now know,\nBoolean logic.\n\n37\n00:01:54.310 --> 00:01:56.700\nAnd I'm supposed to say it\nlike a snobby Frenchman.\n\n38\n00:01:56.700 --> 00:01:59.295\nI didn't, I said it as my normal self,\nsnobby me.\n\n39\n00:01:59.295 --> 00:02:05.200\n[LAUGH] And Boolean logic, what is that?\n\n40\n00:02:05.200 --> 00:02:12.555\nIt's definitely a crazy word, but it just\nmeans that we're gonna do this or this.\n\n41\n00:02:12.555 --> 00:02:15.175\nOr this and this must be true.\n\n42\n00:02:15.175 --> 00:02:17.305\nThat's the kind of idea\nthat we're gonna look at.\n\n43\n00:02:17.305 --> 00:02:22.385\nAlthough typically what's more known\nas logical anding or logical ors.\n\n44\n00:02:22.385 --> 00:02:26.620\nIf you've ever heard these statements,\nthis is Boolean logic.\n\n45\n00:02:26.620 --> 00:02:28.660\nAnd wanna show you guys how\nyou can work with that.\n\n46\n00:02:28.660 --> 00:02:33.320\nBecause it's actually something you'll\nprobably do on a regular basis.\n\n47\n00:02:33.320 --> 00:02:36.230\n&gt;&gt; Yeah, a lot of times just doing\na single comparison, that's enough for us.\n\n48\n00:02:36.230 --> 00:02:38.965\nBut a lot of times it is more than\none thing that has to get combined.\n\n49\n00:02:38.965 --> 00:02:42.855\nSo for example,\nif a new file has been created and\n\n50\n00:02:42.855 --> 00:02:46.535\nit's after 10 PM,\nthen I wanna take an action, right?\n\n51\n00:02:46.535 --> 00:02:49.380\nIt's not a simple if statement\nthat there's just one condition.\n\n52\n00:02:49.380 --> 00:02:51.225\nNow we got multiple conditions.\n\n53\n00:02:51.225 --> 00:02:54.395\nIf Daniel has more to talk about and\n\n54\n00:02:54.395 --> 00:02:57.367\nwe're out of time on the show,\nthen we've got to move on.\n\n55\n00:02:57.367 --> 00:02:59.295\nThat's the kind of\nthe evaluations that we do.\n\n56\n00:02:59.295 --> 00:03:01.775\nAnd you'd be surprised\nhow handy that becomes.\n\n57\n00:03:01.775 --> 00:03:05.990\nBecause you might have a single variable,\nthat has a single value.\n\n58\n00:03:05.990 --> 00:03:08.910\nBut at certain times of the day\nthat means one thing and\n\n59\n00:03:08.910 --> 00:03:10.180\nat another time of the day\nit means another thing.\n\n60\n00:03:10.180 --> 00:03:11.440\nAnd you need to be able to compare both.\n\n61\n00:03:11.440 --> 00:03:16.120\nSo, doing compound comparisons like these\nis really kind of a critical thing, right?\n\n62\n00:03:16.120 --> 00:03:19.020\n&gt;&gt; Man, without it you're\ngonna have a whole lot of\n\n63\n00:03:19.020 --> 00:03:20.630\nthings that you're not\ngonna be able to do.\n\n64\n00:03:20.630 --> 00:03:25.950\nIt just expands your abilities and\nthe power of your scripts.\n\n65\n00:03:25.950 --> 00:03:30.440\nBecause, if I can call those two things,\nand say this and\n\n66\n00:03:30.440 --> 00:03:34.320\nthat, one, it lowers the amount\nof typing you have to do.\n\n67\n00:03:34.320 --> 00:03:38.500\nThe amount of actual scripting, it makes\nit easier to read, things of that nature.\n\n68\n00:03:38.500 --> 00:03:44.610\nSo I could probably go, okay,\nif the file name such and\n\n69\n00:03:44.610 --> 00:03:48.810\nsuch exists, then don't do anything.\n\n70\n00:03:48.810 --> 00:03:51.580\nElif it doesn't exist,\nthen I want you to create it.\n\n71\n00:03:52.670 --> 00:03:56.660\nBut if it's after 10 PM, I could\ncontinue iffing my way through that.\n\n72\n00:03:56.660 --> 00:04:01.550\nBut that's gonna get very, the more\nifs and nesting that you end up doing.\n\n73\n00:04:01.550 --> 00:04:04.000\nIt starts making things a little\ndifficult to follow and read.\n\n74\n00:04:04.000 --> 00:04:07.860\nAnd we wanna make this as easy and\nconcise as possible.\n\n75\n00:04:07.860 --> 00:04:11.700\nWe don't wanna burden our systems\nwith more than they need to chew on.\n\n76\n00:04:11.700 --> 00:04:13.720\nEspecially when you have operators\nlike this, where I can say,\n\n77\n00:04:13.720 --> 00:04:16.770\nwell this and this and this and that.\n\n78\n00:04:16.770 --> 00:04:19.390\nAnd it's just human logic here,\nwe do this everyday.\n\n79\n00:04:19.390 --> 00:04:23.970\nIf you just start thinking in\nthe way that you normally would.\n\n80\n00:04:23.970 --> 00:04:25.650\nIt'll make complete sense to you.\n\n81\n00:04:25.650 --> 00:04:27.250\nLet's jump into the computer\nreally quickly.\n\n82\n00:04:27.250 --> 00:04:30.710\nLet's take a look at what this\nlooks like in an actual script.\n\n83\n00:04:30.710 --> 00:04:35.790\nSo I'm gonna cat my script,\nwhich is compound_testing.sh.\n\n84\n00:04:35.790 --> 00:04:39.190\nHere we go, a very simple script.\n\n85\n00:04:39.190 --> 00:04:40.640\nI've commented on a couple of things.\n\n86\n00:04:40.640 --> 00:04:43.490\nSo that we can work our way through\nit if we want to run them and\n\n87\n00:04:43.490 --> 00:04:45.220\nsee how they actually go.\n\n88\n00:04:45.220 --> 00:04:47.335\nBut all I have is a couple of variables.\n\n89\n00:04:47.335 --> 00:04:49.448\n$var1 -eq 10, $var2 -eq 20, nothing crazy.\n\n90\n00:04:49.448 --> 00:04:57.260\nIf $var1 -eq 10, remember,\nnumeric operations.\n\n91\n00:04:57.260 --> 00:04:59.010\nWe're doing numerical comparisons.\n\n92\n00:04:59.010 --> 00:05:02.890\nEven though one of those\nnumericals is a variable.\n\n93\n00:05:02.890 --> 00:05:05.400\nIt's just the value of that\nvariable is what's going in.\n\n94\n00:05:05.400 --> 00:05:09.830\nSo we're using the -eq operators,\nthose numeric operators, right?\n\n95\n00:05:09.830 --> 00:05:13.250\nAnd then we have this little\ncharacter right here.\n\n96\n00:05:13.250 --> 00:05:17.210\nThis is what let's it know that\nI want to do that logical and.\n\n97\n00:05:17.210 --> 00:05:20.930\nThis and this together.\n\n98\n00:05:20.930 --> 00:05:25.220\nIf both of these statements are true,\nthen we will do something.\n\n99\n00:05:25.220 --> 00:05:29.780\nThen we will jump down to the then\necho \"Success\", else echo \"Failure\".\n\n100\n00:05:29.780 --> 00:05:36.210\nSo if either of these statements\nare not true, then it will not operate.\n\n101\n00:05:36.210 --> 00:05:38.040\nAnd this is one of the things\nyou have to take away.\n\n102\n00:05:38.040 --> 00:05:42.478\nIf you make a Boolean type\nstatement with a logical and in it,\n\n103\n00:05:42.478 --> 00:05:46.491\nboth statements must be true for\nyour commands to run.\n\n104\n00:05:46.491 --> 00:05:51.980\nIf they're not true, your catch all\ncommand is gonna run, so whatever that is.\n\n105\n00:05:54.100 --> 00:05:57.450\nBe very aware of that fact\nas you work with these and\n\n106\n00:05:57.450 --> 00:05:59.650\nstart to employ them\ninside of your scripts.\n\n107\n00:05:59.650 --> 00:06:02.440\nBecause, if you put some statement\nin there and it's not true, and\n\n108\n00:06:02.440 --> 00:06:04.610\nyou expect it to be, well, guess what?\n\n109\n00:06:04.610 --> 00:06:05.930\nIt's not gonna run.\n\n110\n00:06:05.930 --> 00:06:09.550\n&gt;&gt; And Daniel, I noticed how you did the\ndouble ampersand and double pipe symbols.\n\n111\n00:06:09.550 --> 00:06:11.190\nIs that kinda like negation?\n\n112\n00:06:11.190 --> 00:06:14.060\nIs that how it knows that\nit's a special comparison?\n\n113\n00:06:14.060 --> 00:06:17.130\n&gt;&gt; I don't know if that's how it\nknows it's a special comparison.\n\n114\n00:06:17.130 --> 00:06:20.200\nI just know that's how it's\nbuilt into the Bash system.\n\n115\n00:06:20.200 --> 00:06:24.230\nThe two ampersands t ogether let's it\nknow that we're doing Boolean logic.\n\n116\n00:06:24.230 --> 00:06:30.160\nAnd we're gonna compare two\nsets of comparisons together.\n\n117\n00:06:30.160 --> 00:06:33.280\nIf both ring true,\nthen we move on from there.\n\n118\n00:06:33.280 --> 00:06:36.000\nSo I don't know if it's like negation.\n\n119\n00:06:36.000 --> 00:06:39.130\nI don't think it's like negation,\nwe're not negating anything.\n\n120\n00:06:39.130 --> 00:06:40.630\n&gt;&gt; It's just that that's how it is.\n\n121\n00:06:40.630 --> 00:06:43.390\n&gt;&gt; I do know that ampersands can\nbe used as special characters.\n\n122\n00:06:43.390 --> 00:06:46.560\nAnd I would be interested to see\nwhat happens if we only use one.\n\n123\n00:06:46.560 --> 00:06:50.698\nI've never tried it, I've always just,\ncommand file said do this, so I did.\n\n124\n00:06:50.698 --> 00:06:52.560\n[LAUGH] And I've always done it that way.\n\n125\n00:06:52.560 --> 00:06:54.460\nSo I've never ventured into those waters.\n\n126\n00:06:54.460 --> 00:06:57.120\nMaybe we should one day, see what happens.\n\n127\n00:06:57.120 --> 00:07:00.376\nThat's the fun part about scripting,\nwe can watch things break, right?\n\n128\n00:07:00.376 --> 00:07:05.070\n[LAUGH] All right, so I say we run\nthis and just watch it happen here.\n\n129\n00:07:05.070 --> 00:07:07.751\nSo I'll do ./com, what is it?\n\n130\n00:07:07.751 --> 00:07:09.160\ncompound_testing.sh.\n\n131\n00:07:09.160 --> 00:07:13.680\nYou'll notice it does Success\nbecause $var1 does equal 10,\n\n132\n00:07:13.680 --> 00:07:15.990\nand $var2 does equal 20.\n\n133\n00:07:15.990 --> 00:07:22.420\nBut what if we comment that line out and\nuncomment the line below it?\n\n134\n00:07:22.420 --> 00:07:28.200\nNow we have $var1 -eg 1 and $var2 -eq 20.\n\n135\n00:07:28.200 --> 00:07:31.100\nWell that's not gonna work out,\nbecause we know $var1 equals 10.\n\n136\n00:07:31.100 --> 00:07:32.080\nSo what happens?\n\n137\n00:07:32.080 --> 00:07:37.550\nWell, it should catch our else statement\nand give us that failure option.\n\n138\n00:07:37.550 --> 00:07:41.910\nSo let's do that, vim compound_testing.sh.\n\n139\n00:07:41.910 --> 00:07:46.610\nInsert in here, we'll just hash that guy\nout, bring that guy to the forefront,\n\n140\n00:07:46.610 --> 00:07:47.660\nEsc, write, quit.\n\n141\n00:07:49.170 --> 00:07:49.960\nRun that guy again.\n\n142\n00:07:49.960 --> 00:07:51.734\nAnd look at that, we get our Failure.\n\n143\n00:07:51.734 --> 00:07:57.130\nBecause now, remember both sides of\nthe ampersands have to ring true.\n\n144\n00:07:57.130 --> 00:07:59.441\nIf they don't, You're gonna have\nto go with some other thing.\n\n145\n00:07:59.441 --> 00:08:02.374\nIt's not gonna run the expected\ncommands that you want it to run.\n\n146\n00:08:02.374 --> 00:08:05.400\nNow sometimes that's okay.\n\n147\n00:08:07.040 --> 00:08:09.070\nIt's not okay if you use the ampersands,\nthough.\n\n148\n00:08:09.070 --> 00:08:12.880\nSometimes you don't care whether or\nnot both of them ring true.\n\n149\n00:08:12.880 --> 00:08:16.170\nI just wanna say if this or\nthis one rings true.\n\n150\n00:08:16.170 --> 00:08:19.900\nEither, as long as one of them rings true,\nI'm good.\n\n151\n00:08:19.900 --> 00:08:22.807\nAnd you can move on to what I expected\nto do which is in that then part of\n\n152\n00:08:22.807 --> 00:08:23.526\nthe statement.\n\n153\n00:08:23.526 --> 00:08:27.606\nAnd then if none of that rings true,\nso with this logical or,\n\n154\n00:08:27.606 --> 00:08:30.895\nwhich is this guy right here,\nthis double pipe.\n\n155\n00:08:30.895 --> 00:08:34.098\nWe've seen the pipe before\nworking with piping and\n\n156\n00:08:34.098 --> 00:08:36.716\nthat whole redirection show that we did.\n\n157\n00:08:36.716 --> 00:08:43.270\nThis is the double pipe that lets\nyou know that I want this or this.\n\n158\n00:08:43.270 --> 00:08:44.952\nEither of these statements will ring true.\n\n159\n00:08:44.952 --> 00:08:49.615\nThen, do the commands that I've given you,\n\n160\n00:08:49.615 --> 00:08:53.070\nelse, run my catch all, right?\n\n161\n00:08:53.070 --> 00:08:55.700\nSo, I've got var1, [INAUDIBLE] goes on.\n\n162\n00:08:55.700 --> 00:08:58.350\nBasically, the same script right above it.\n\n163\n00:08:58.350 --> 00:09:04.710\nWe're gonna comment that out,\nand uncomment this guy out.\n\n164\n00:09:06.740 --> 00:09:09.410\nHere we go and uncomment that.\n\n165\n00:09:09.410 --> 00:09:14.317\nSo now, if our var1 equals 1,\nor if var2 equals 20,\n\n166\n00:09:14.317 --> 00:09:21.740\nthen you can run my commands that I wanna\nrun, which is echoing the word success.\n\n167\n00:09:21.740 --> 00:09:26.270\nSo before it was our double ends, it was\nour logical ending, both had to be true.\n\n168\n00:09:26.270 --> 00:09:29.990\nWith the or, it's either or,\nhence the name.\n\n169\n00:09:29.990 --> 00:09:31.781\nVery cool.\nLet's exit out of this and\n\n170\n00:09:31.781 --> 00:09:33.687\nwe'll run it one more time.\n\n171\n00:09:33.687 --> 00:09:39.500\nAnd we see now we get success just\nby changing that boolean operator.\n\n172\n00:09:39.500 --> 00:09:43.330\n&gt;&gt; And Daniel, each time you did that it\nwas just really two comparisons, right?\n\n173\n00:09:43.330 --> 00:09:45.790\nCould we do three or\nfour or more if we needed?\n\n174\n00:09:45.790 --> 00:09:48.683\n&gt;&gt; Yeah, you totally can, you can just go\nbuck wild with it if you feel like it.\n\n175\n00:09:48.683 --> 00:09:51.742\nUnderstand, though,\nthat starts increasing the complexity.\n\n176\n00:09:51.742 --> 00:09:54.942\nAnd if you make a mistake\nin any one of those things,\n\n177\n00:09:54.942 --> 00:09:59.980\nthat might cause some issues inside\nof your script but it's not illegal.\n\n178\n00:09:59.980 --> 00:10:03.690\nGo for it, just ampersand ampersand,\nnext text comparison,\n\n179\n00:10:03.690 --> 00:10:06.120\nampersand ampersand, next test comparison.\n\n180\n00:10:06.120 --> 00:10:09.340\nOr pipe pipe, pipe pipe,\nand keep pouring on.\n\n181\n00:10:09.340 --> 00:10:12.896\nSo you could have a string of four\nconditions that if any one of those\n\n182\n00:10:12.896 --> 00:10:15.259\nequaled true, you could make that happen.\n\n183\n00:10:15.259 --> 00:10:20.011\nSo it can really help us reign in out code\nfrom getting too crazy with nesting ifs\n\n184\n00:10:20.011 --> 00:10:21.672\nand things of that nature.\n\n185\n00:10:21.672 --> 00:10:26.550\n&gt;&gt; Now in these cases, you were doing\npretty simple comparisons, right?\n\n186\n00:10:26.550 --> 00:10:28.806\nEquals or not equal, that kind of thing.\n\n187\n00:10:28.806 --> 00:10:32.232\nBut I know I've seen examples\nwhere they do more complex math.\n\n188\n00:10:32.232 --> 00:10:36.141\nAnd instead of doing it the way you\ndid it, they used parenthesis markers,\n\n189\n00:10:36.141 --> 00:10:38.240\ncan you tell us a little bit about that?\n\n190\n00:10:38.240 --> 00:10:41.749\n&gt;&gt; Yeah, that's a great thing to have\nbrought up because it does happen, and\n\n191\n00:10:41.749 --> 00:10:44.104\nif you're not aware of it, you're going?\n\n192\n00:10:44.104 --> 00:10:48.288\nDo I use a parentheses here or\nwhy are these in parentheses and not this?\n\n193\n00:10:48.288 --> 00:10:53.930\nAnd those boundaries that we\ntypically use throughout our scripts,\n\n194\n00:10:53.930 --> 00:10:55.880\nthey do have a purpose.\n\n195\n00:10:55.880 --> 00:11:00.270\nAnd with the double parentheses,\nthe reason that you\n\n196\n00:11:00.270 --> 00:11:03.900\nwould wanna use the double parentheses is\njust the same reason that Don brought up,\n\n197\n00:11:03.900 --> 00:11:07.170\nis the fact that you have\na more advanced math formula.\n\n198\n00:11:08.550 --> 00:11:10.380\nTest only allows for simple math, so\n\n199\n00:11:10.380 --> 00:11:15.160\nif I put those square brackets on, it's\nonly gonna allow me to do simple stuff.\n\n200\n00:11:16.260 --> 00:11:18.806\nThings like add, subtract,\nmultiply, divide.\n\n201\n00:11:18.806 --> 00:11:20.757\nThose are you simple math offerings.\n\n202\n00:11:20.757 --> 00:11:24.700\nAnd if I just want to do that,\ngreat, it's good stuff.\n\n203\n00:11:24.700 --> 00:11:30.378\nBut what if I have more complex\nelements to my expression?\n\n204\n00:11:30.378 --> 00:11:33.447\nWhat if I wanted to do an exponent?\n\n205\n00:11:33.447 --> 00:11:34.689\nHm, well guess what?\n\n206\n00:11:34.689 --> 00:11:39.593\nYou would need the double\nparentheses to expand your abilities\n\n207\n00:11:39.593 --> 00:11:42.378\nto work in a mathematical context.\n\n208\n00:11:42.378 --> 00:11:48.893\nSo if you're doing something simple,\n5 + 5, 2 + 1, 8 times 10, great.\n\n209\n00:11:48.893 --> 00:11:50.835\nUse the square brackets all day long.\n\n210\n00:11:50.835 --> 00:11:55.212\nBut if you gotta start working with things\nlike exponents and other things that we're\n\n211\n00:11:55.212 --> 00:11:59.299\ngonna take a look at, then you're gonna\nneed to use those double parentheses.\n\n212\n00:11:59.299 --> 00:12:01.837\nSo let's open up a text file I've created.\n\n213\n00:12:01.837 --> 00:12:04.425\nLet me clear the screen,\na little clutter gone.\n\n214\n00:12:04.425 --> 00:12:11.860\nAnd I'll say, can't double parentheses,\nsymbol's done dot text.\n\n215\n00:12:11.860 --> 00:12:14.370\nAnd here's what we're working with.\n\n216\n00:12:14.370 --> 00:12:17.490\nWe've got this fun one here,\nposting, I put post and post.\n\n217\n00:12:18.970 --> 00:12:19.592\nThat's correct.\n\n218\n00:12:19.592 --> 00:12:21.564\nPost increment and post decrement.\n\n219\n00:12:21.564 --> 00:12:24.191\nWe'll talk a little bit\nabout that in just a minute.\n\n220\n00:12:24.191 --> 00:12:28.223\n[COUGH] I kinda want to jump past these\npost and pre increment decrements and\n\n221\n00:12:28.223 --> 00:12:29.650\nkind of start here.\n\n222\n00:12:29.650 --> 00:12:34.492\nLogical negation, if it's not five,\n\n223\n00:12:34.492 --> 00:12:37.728\nright, I could use that.\n\n224\n00:12:37.728 --> 00:12:41.703\nRemember, I had told you that before if\nyou see that exclamation point a lot of\n\n225\n00:12:41.703 --> 00:12:45.129\ntimes, that's a negation type\nsimply saying, I've got 50 but\n\n226\n00:12:45.129 --> 00:12:46.862\nI wanna make sure it's not 50.\n\n227\n00:12:46.862 --> 00:12:48.289\nHow do I say not 50?\n\n228\n00:12:48.289 --> 00:12:53.413\nWell, I could do something -ne 50 or\n\n229\n00:12:53.413 --> 00:12:59.328\nyou could just do !50, that kinda thing.\n\n230\n00:12:59.328 --> 00:13:04.458\nBitwise negation,\nthat's an interesting topic.\n\n231\n00:13:04.458 --> 00:13:07.590\nIt's basically a show all unto itself,\nI just wanted you to be aware of it,\n\n232\n00:13:07.590 --> 00:13:08.820\nthat it's in there.\n\n233\n00:13:08.820 --> 00:13:12.770\nBut the big, heavy hitters are usually\nlike exponentiation, left and\n\n234\n00:13:12.770 --> 00:13:16.280\nright bitwise shift,\nhow I wanna move one way or\n\n235\n00:13:16.280 --> 00:13:19.500\nanother with a decimal point,\nthat kinda thing.\n\n236\n00:13:19.500 --> 00:13:24.010\nThere's our bitwise boolean and, so\nif you're inside of a script and\n\n237\n00:13:24.010 --> 00:13:28.540\nyou wanna do boolean operation,\nyou can do that there.\n\n238\n00:13:28.540 --> 00:13:30.960\nAlso the boolean bitwise or.\n\n239\n00:13:30.960 --> 00:13:34.167\nAnd then of course, our good old\nlogical and logical ors for that stuff.\n\n240\n00:13:34.167 --> 00:13:37.323\nAnd a lot of times you're just working\nwith, I'm doing more complex math.\n\n241\n00:13:37.323 --> 00:13:43.740\nI need negation, I need bitwise shifting\nand exponentiation is a lot of times.\n\n242\n00:13:43.740 --> 00:13:45.406\nAnd if you're a statistical mathematician,\n\n243\n00:13:45.406 --> 00:13:47.080\nthese things are gonna\ncome in handy with you.\n\n244\n00:13:47.080 --> 00:13:52.979\nI typically have not seen a lot of use for\nthat as a systems administrator, network\n\n245\n00:13:52.979 --> 00:13:58.553\nadministrator, as a desktop administrator,\nnot a big lot of that for that.\n\n246\n00:13:58.553 --> 00:14:00.954\nWell, every know and then, you will\nneed to come across these things, so\n\n247\n00:14:00.954 --> 00:14:02.320\nI just wanted to make\nyou guys aware of it.\n\n248\n00:14:02.320 --> 00:14:07.495\nI did create a script that does take\nadvantage of some of these features here.\n\n249\n00:14:07.495 --> 00:14:08.601\nLet's take a look at that.\n\n250\n00:14:08.601 --> 00:14:14.306\nSupermath.sh and here we go,\nwe have a couple of variables,\n\n251\n00:14:14.306 --> 00:14:18.770\nthree variables, var1, var2, and x.\n\n252\n00:14:18.770 --> 00:14:20.540\nWorking with exponents, and\n\n253\n00:14:20.540 --> 00:14:24.090\nthen our wonderful if statement,\nalways a pleasure to have.\n\n254\n00:14:24.090 --> 00:14:29.000\nDouble parentheses, and we move into var1,\nwell what's var1, it's ten,\n\n255\n00:14:29.000 --> 00:14:30.623\nand then I have star star.\n\n256\n00:14:30.623 --> 00:14:35.153\nWe look back at our chart star star so\n\n257\n00:14:35.153 --> 00:14:41.203\nbasically what I want to do,\nI want bar one to the power of two.\n\n258\n00:14:41.203 --> 00:14:44.640\nI could put it to the power of three,\nfour, five, whatever I like.\n\n259\n00:14:44.640 --> 00:14:50.380\nBut to let the test condition\nknow that that's what I want,\n\n260\n00:14:50.380 --> 00:14:55.980\nI need that star star and then whatever\npower I'm going to exponential it to.\n\n261\n00:14:55.980 --> 00:15:02.000\nSo var one, star star two, so ten to\nthe power of two if that is greater than\n\n262\n00:15:02.000 --> 00:15:09.390\n90 then run another mathematical,\nwhich has another exponentiation.\n\n263\n00:15:09.390 --> 00:15:15.070\nVal1_ =, val1 to the second power.\n\n264\n00:15:15.070 --> 00:15:20.300\nSo whatever val1 is to the second power,\nthen echo the square of val1 is this.\n\n265\n00:15:20.300 --> 00:15:22.076\nSo it's gonna do that maths for me.\n\n266\n00:15:22.076 --> 00:15:26.517\nElse [INAUDIBLE],\ncuz I know this is gonna [INAUDIBLE].\n\n267\n00:15:26.517 --> 00:15:28.430\n[LAUGH]\n&gt;&gt; Confidence.\n\n268\n00:15:28.430 --> 00:15:30.740\n&gt;&gt; I have full confidence\nin this group right here.\n\n269\n00:15:30.740 --> 00:15:32.270\nLet's fire it off, see what happens.\n\n270\n00:15:33.770 --> 00:15:34.710\nSuper math here we go.\n\n271\n00:15:34.710 --> 00:15:40.451\nSuper, super math_math.sh.\n\n272\n00:15:40.451 --> 00:15:41.994\nI got my old persona.\n\n273\n00:15:41.994 --> 00:15:45.954\nMan, I told you,\nI told you I forget those executable bits.\n\n274\n00:15:45.954 --> 00:15:47.842\nI get in a hurry, and it happens.\n\n275\n00:15:47.842 --> 00:15:50.895\nchman and we'll say, u plus x,\n\n276\n00:15:50.895 --> 00:15:55.540\nbecause that's the right way to do it and\nsuper.\n\n277\n00:15:55.540 --> 00:15:59.270\nAnd now, I should be able to run\nsuper math a whole lot easier.\n\n278\n00:15:59.270 --> 00:15:59.982\nAnd there we go.\n\n279\n00:15:59.982 --> 00:16:02.870\nLook at that, I actually got some\nsort of error, how about that?\n\n280\n00:16:02.870 --> 00:16:05.001\nLet's see what I did wrong here.\n\n281\n00:16:05.001 --> 00:16:09.576\nSo we're gonna have line 11,\n.01 sp =, all right, so\n\n282\n00:16:09.576 --> 00:16:13.850\nit didn't like something\ninside of that expression.\n\n283\n00:16:13.850 --> 00:16:15.325\nLet's take a look at that.\n\n284\n00:16:15.325 --> 00:16:18.530\nSo vim, super_math.\n\n285\n00:16:18.530 --> 00:16:21.710\nRan all these to make sure they work,\nbut apparently I had a problem.\n\n286\n00:16:23.190 --> 00:16:26.952\nAnd I think I see my issue.\n\n287\n00:16:26.952 --> 00:16:28.772\nAnd look at this right here.\n\n288\n00:16:28.772 --> 00:16:34.341\nDidn't use -eq\n\n289\n00:16:37.658 --> 00:16:40.700\nTake that guy out of there and\nsee if that doesn't help me out.\n\n290\n00:16:40.700 --> 00:16:43.710\n&gt;&gt; That's right, we saw that in part\ntwo where when you're doing a string\n\n291\n00:16:43.710 --> 00:16:45.750\ncomparison you use the actual equal sign.\n\n292\n00:16:45.750 --> 00:16:48.935\nBut when you're doing a numerical\ncomparison it would be -eq.\n\n293\n00:16:48.935 --> 00:16:50.270\n&gt;&gt; Yeah.\n&gt;&gt; It's confusing but\n\n294\n00:16:50.270 --> 00:16:53.540\nit's one of those things that we just\nhave to remember that the numbers or\n\n295\n00:16:53.540 --> 00:16:56.170\nnumerical comparisons,\nare expecting it to work a certain way.\n\n296\n00:16:56.170 --> 00:16:58.120\n&gt;&gt; I told you, it's backwards to my mind.\n\n297\n00:16:58.120 --> 00:17:01.490\nI just think I should just equal\nsign at things and it should work.\n\n298\n00:17:01.490 --> 00:17:04.050\nLet's see if that doesn't fix my problem.\n\n299\n00:17:04.050 --> 00:17:08.060\nSo we got a little farther and it actually\nis saying square of something is, but\n\n300\n00:17:08.060 --> 00:17:12.450\nit's still having trouble with my variable\nI don't know what the issue is there.\n\n301\n00:17:12.450 --> 00:17:15.210\nBut it did work its way into that logic,\nand that's basically what I wanted to show\n\n302\n00:17:15.210 --> 00:17:17.490\nyou anyway, I can troubleshoot\nthis until the cows come home.\n\n303\n00:17:17.490 --> 00:17:22.370\nThe basic idea was that it did\nactually work into the logic.\n\n304\n00:17:22.370 --> 00:17:26.980\nThe variable that I gave it was\nexponentially bigger than the value of 90,\n\n305\n00:17:26.980 --> 00:17:30.910\nwhich took it into\nthe nested if statement.\n\n306\n00:17:30.910 --> 00:17:35.070\nAnd it did, I'm in trouble with some, some\nof my syntax in there for whatever reason.\n\n307\n00:17:35.070 --> 00:17:37.800\nIt was a quick script just\nto show you that anyway.\n\n308\n00:17:37.800 --> 00:17:40.211\nSo not a huge deal but\nnow I'll have to troubleshoot that.\n\n309\n00:17:40.211 --> 00:17:43.403\nAnd you guys have seen a little bit\nof on the flag troubleshooting,\n\n310\n00:17:43.403 --> 00:17:46.367\nyou gotta make sure you get all\nthat syntax correct cuz if not,\n\n311\n00:17:46.367 --> 00:17:49.280\nit's just not gonna come out\nthe way you like it, all right.\n\n312\n00:17:49.280 --> 00:17:52.500\nSo that brings us to string comparisons.\n\n313\n00:17:52.500 --> 00:17:56.460\nThere's also advanced string comparisons.\n\n314\n00:17:56.460 --> 00:17:57.130\nJust like with math,\n\n315\n00:17:57.130 --> 00:18:00.960\nthey have a little more functionality\nif I use double parentheses.\n\n316\n00:18:00.960 --> 00:18:01.570\nAnd again,\n\n317\n00:18:01.570 --> 00:18:06.110\ndoing things very, very strangely,\nnow we have double brackets as well.\n\n318\n00:18:06.110 --> 00:18:08.710\nAnd this is where it can\nget extremely confusing.\n\n319\n00:18:08.710 --> 00:18:11.940\nDo I use double parentheses or\ndo I use double brackets?\n\n320\n00:18:11.940 --> 00:18:15.540\nBut if you remember,\ndouble parentheses, advanced math.\n\n321\n00:18:15.540 --> 00:18:20.000\nDouble brackets is going to be\nadvanced string comparisons.\n\n322\n00:18:20.000 --> 00:18:23.780\nAnd I'm gonna introduce\nyou just a little bit of\n\n323\n00:18:23.780 --> 00:18:27.900\nsomething we haven't talked about yet\nfor the purposes of this demonstration.\n\n324\n00:18:27.900 --> 00:18:30.880\nWe will have an entire show on this,\nand it's called regular expression.\n\n325\n00:18:30.880 --> 00:18:36.630\nWhen you use a regular expression inside\nof this script that I've written.\n\n326\n00:18:36.630 --> 00:18:38.780\nSo don't go crazy if you see.\n\n327\n00:18:38.780 --> 00:18:40.190\nI don't what that is.\n\n328\n00:18:40.190 --> 00:18:42.800\nI know, I know you don't know what it is,\nI'll explain it.\n\n329\n00:18:42.800 --> 00:18:46.670\nLet me clear and take a look at it here.\n\n330\n00:18:46.670 --> 00:18:50.440\nAnd basically it is, we'll just cat.\n\n331\n00:18:50.440 --> 00:18:52.610\nDouble brack dot sh.\n\n332\n00:18:53.950 --> 00:18:55.600\nAgain, very simple script.\n\n333\n00:18:55.600 --> 00:18:57.975\nI believe I've ran it and\neverything should work correctly.\n\n334\n00:18:57.975 --> 00:19:02.790\n[LAUGH] But in here, you'll see\nthat I do have the double brackets.\n\n335\n00:19:02.790 --> 00:19:05.970\nThe opening and closing double brackets.\n\n336\n00:19:05.970 --> 00:19:10.870\nThat's what I want because I'm doing\na specific type of string comparison.\n\n337\n00:19:10.870 --> 00:19:13.480\nThat it involves using regular expression.\n\n338\n00:19:14.600 --> 00:19:20.868\nWhen you use this type of operator, this\ntest condition, this advanced testing for\n\n339\n00:19:20.868 --> 00:19:26.796\nstring, you'll notice that my equal sign\nalso has changed to a double equals.\n\n340\n00:19:26.796 --> 00:19:28.030\nSo just be aware of that.\n\n341\n00:19:30.090 --> 00:19:31.735\nThere is some changing to that you'll see.\n\n342\n00:19:31.735 --> 00:19:39.072\nExclamation point equals or\nnot equals, things of that nature.\n\n343\n00:19:39.072 --> 00:19:43.300\nI'll make sure to write up, I don't think\nI have the time or remember to do that.\n\n344\n00:19:43.300 --> 00:19:47.920\nI'll put that in the show notes,\nto have those operators as well, so\n\n345\n00:19:47.920 --> 00:19:49.018\nthat you are familiar with those.\n\n346\n00:19:49.018 --> 00:19:53.330\nBut for these purposes I just want you to\nsee that, that expanded operation happens.\n\n347\n00:19:53.330 --> 00:19:57.480\nIf I only had single brackets here,\nthis expression would not work.\n\n348\n00:19:57.480 --> 00:19:59.840\nIt would freak out and give me an error.\n\n349\n00:19:59.840 --> 00:20:01.410\nI have to have the double\nbrackets to expand,\n\n350\n00:20:01.410 --> 00:20:03.850\nto be able to use things\nlike regular expression.\n\n351\n00:20:05.300 --> 00:20:08.380\nSo, this is where the red x is coming in.\n\n352\n00:20:08.380 --> 00:20:14.460\nAnd if you look right here,\nI also have brackets.\n\n353\n00:20:16.160 --> 00:20:19.700\nInside of these double brackets it knows\nthat, that means regular expression,\n\n354\n00:20:19.700 --> 00:20:22.660\nthat I'm looking for\na regular expression-type string.\n\n355\n00:20:22.660 --> 00:20:27.900\nBasically, what I'm saying is if you\nsee a lower case d, or an upper case d\n\n356\n00:20:27.900 --> 00:20:34.232\nfollowed by the string Lowrie all put\ntogether, then you're good, you ring true.\n\n357\n00:20:34.232 --> 00:20:36.680\nAnd you should say echo, hello, Daniel.\n\n358\n00:20:36.680 --> 00:20:40.370\nI didn't put my else statement in\nthere so, anything else goes wrong,\n\n359\n00:20:40.370 --> 00:20:42.050\nI'm not gonna get any output.\n\n360\n00:20:42.050 --> 00:20:44.760\nSo, if this does run correctly,\nI will get output,\n\n361\n00:20:44.760 --> 00:20:47.510\nif it doesn't run correctly,\nI won't get output.\n\n362\n00:20:47.510 --> 00:20:48.337\nSo let see what happens.\n\n363\n00:20:48.337 --> 00:20:50.595\nWe'll do this one here.\n\n364\n00:20:50.595 --> 00:20:52.230\n\\double_brack hopefully, you're in it.\n\n365\n00:20:52.230 --> 00:20:54.030\nAnd look at that, hello, Daniel.\n\n366\n00:20:54.030 --> 00:20:54.920\nVery awesome.\n\n367\n00:20:54.920 --> 00:20:58.110\nLet's take a look at this, echo the user.\n\n368\n00:20:58.110 --> 00:21:00.270\nI think that's what I used, yep, user.\n\n369\n00:21:00.270 --> 00:21:02.090\nAnd it is lower case dlowrie.\n\n370\n00:21:02.090 --> 00:21:10.030\nIf I exported user equals Dlowrie,\nlike that.\n\n371\n00:21:10.030 --> 00:21:12.808\nDo that, rerun our command.\n\n372\n00:21:12.808 --> 00:21:13.401\nLook at that.\n\n373\n00:21:13.401 --> 00:21:15.980\nAnd you just change to\nwhatever that user was.\n\n374\n00:21:15.980 --> 00:21:17.100\nBut it ran successfully.\n\n375\n00:21:17.100 --> 00:21:19.230\nIt gave me the output I was looking for.\n\n376\n00:21:19.230 --> 00:21:22.480\nBut user is not what it's\nexpecting I should get no output.\n\n377\n00:21:22.480 --> 00:21:26.412\nBecause no matter what, what if I add\na space, what if it was d lowrie?\n\n378\n00:21:26.412 --> 00:21:27.760\nWhat if was d_lowrie?\n\n379\n00:21:27.760 --> 00:21:30.060\nWhat if it was Daniel Lowery or\nDan Lowery?\n\n380\n00:21:30.060 --> 00:21:33.220\nWell that's not what it's looking for,\nwhat if it was P Lowery?\n\n381\n00:21:33.220 --> 00:21:36.370\nFor whatever reason maybe I\nhave a new sister name Pan,\n\n382\n00:21:36.370 --> 00:21:39.990\nshe's joined our crew, and\nP Lowrie is the user name.\n\n383\n00:21:39.990 --> 00:21:40.660\nWell that's not gonna work.\n\n384\n00:21:40.660 --> 00:21:43.890\nIt's looking for a lower case d or\nan upper case d.\n\n385\n00:21:43.890 --> 00:21:48.150\nAnd to be able to do that kind of\noperation, you need those double brackets\n\n386\n00:21:48.150 --> 00:21:52.920\nexpand out the abilities\nof your test condition.\n\n387\n00:21:52.920 --> 00:21:55.374\n&gt;&gt; What you showed here was just\na real quick glimpse of it.\n\n388\n00:21:55.374 --> 00:21:56.361\n&gt;&gt; Yeah.\n&gt;&gt; Because we haven't\n\n389\n00:21:56.361 --> 00:21:59.470\ncovered regular expressions, but\nthis is actually really, really powerful.\n\n390\n00:21:59.470 --> 00:22:03.210\nBecause with regular expressions you can\ncompare all sorts of really just crazy and\n\n391\n00:22:03.210 --> 00:22:04.020\nbizarre things.\n\n392\n00:22:04.020 --> 00:22:05.790\nIt's a very, very powerful technique.\n\n393\n00:22:05.790 --> 00:22:08.580\nSo stay tuned cuz we'll be covering\nthat in the later episode.\n\n394\n00:22:08.580 --> 00:22:09.910\n&gt;&gt; Yeah.\n&gt;&gt; You'll piece that together what you\n\n395\n00:22:09.910 --> 00:22:11.740\njust saw and you really have that power.\n\n396\n00:22:11.740 --> 00:22:14.210\nSo definitely, definitely\nsomething you wanna make yourself.\n\n397\n00:22:14.210 --> 00:22:17.930\nNow Daniel, you've given us a pretty good\nrundown on all the different types and\n\n398\n00:22:17.930 --> 00:22:20.450\ncomparisons we can do, where there\nany others that you wanna to hit on?\n\n399\n00:22:20.450 --> 00:22:24.270\n&gt;&gt; Yes, I surely did and I think we've\ngot just enough time for us to cover\n\n400\n00:22:24.270 --> 00:22:29.480\nanother logical conditional type\nfunction that we have built in the bash.\n\n401\n00:22:29.480 --> 00:22:33.850\nAnd it's called case, and it's\nactually a really, really great thing.\n\n402\n00:22:33.850 --> 00:22:34.950\nAnd you'll actually kind of salt and\n\n403\n00:22:34.950 --> 00:22:39.720\npepper a lot of times your scripts with\nif statements and case statements.\n\n404\n00:22:39.720 --> 00:22:44.980\nThey actually do basically the same\nkind of things quite often.\n\n405\n00:22:44.980 --> 00:22:49.692\nBut in case can be a little cleaner,\nit can be a little easier to follow and\n\n406\n00:22:49.692 --> 00:22:53.178\nit does set us up a little bit for\nwhen we look at loops.\n\n407\n00:22:53.178 --> 00:22:56.554\nBecause it has a very similar structure\nto some of the looping functions that we\n\n408\n00:22:56.554 --> 00:22:58.810\nare gonna look at in later episodes.\n\n409\n00:22:58.810 --> 00:23:01.850\nSo take a look at case and\nsee what it does.\n\n410\n00:23:01.850 --> 00:23:07.027\nIt basically says I'm gonna\ngive you a bunch of options.\n\n411\n00:23:07.027 --> 00:23:09.191\nIf this option is true\nthen do this command,\n\n412\n00:23:09.191 --> 00:23:11.620\nif that option is true\nthen do this command.\n\n413\n00:23:11.620 --> 00:23:15.910\nBut it does it in really interesting\nstyle, an interesting format.\n\n414\n00:23:15.910 --> 00:23:17.980\nLet's jump down and take a look,\nI will clear the screen out so\n\n415\n00:23:17.980 --> 00:23:20.950\nthat we can just go case crazy here.\n\n416\n00:23:20.950 --> 00:23:26.860\nAnd basically, you will see it work itself\nout, I've got a test that we can run.\n\n417\n00:23:26.860 --> 00:23:29.640\nSo I'll say cat case.\n\n418\n00:23:29.640 --> 00:23:30.770\nTest 1.sh.\n\n419\n00:23:32.390 --> 00:23:34.320\nAnd here's our case.\n\n420\n00:23:34.320 --> 00:23:36.380\nSo we've got two variables, John and Mary.\n\n421\n00:23:36.380 --> 00:23:39.110\nVar 1, Var 2 respectively.\n\n422\n00:23:39.110 --> 00:23:41.906\nCase 1, Var 1 in.\n\n423\n00:23:41.906 --> 00:23:44.180\nI'm sorry, case Var 1 in.\n\n424\n00:23:45.810 --> 00:23:49.260\nThis is the structure for case.\n\n425\n00:23:49.260 --> 00:23:52.800\nSo you're gonna start off\ncalling the function of case.\n\n426\n00:23:52.800 --> 00:23:59.214\nThen we're gonna feed it a variable,\nor something, some object.\n\n427\n00:23:59.214 --> 00:24:00.000\nAnd we're gonna say in.\n\n428\n00:24:01.110 --> 00:24:04.550\nWhat do you mean in?\nWell in these list of options.\n\n429\n00:24:04.550 --> 00:24:09.280\nIf var1 equals something in these list\nof options I'm about to give you,\n\n430\n00:24:09.280 --> 00:24:13.600\nthen do whatever the var1 equates to.\n\n431\n00:24:13.600 --> 00:24:16.250\nSo if var1 equals John or\n\n432\n00:24:16.250 --> 00:24:21.060\nMary there's our pipe operander for\nlogical order, goodness.\n\n433\n00:24:21.060 --> 00:24:28.220\nIf it equals John or mary, so this goes\nhere, then echo, welcome valid user.\n\n434\n00:24:28.220 --> 00:24:31.980\nIf var 1 equals Alice,\nthen it's gonna say,\n\n435\n00:24:31.980 --> 00:24:34.860\ngo away Alice, we don't like you, right?\n\n436\n00:24:34.860 --> 00:24:40.570\nWe also have something that's very similar\nto that else statement inside of the if,\n\n437\n00:24:40.570 --> 00:24:43.510\nwhich is this star operator right here.\n\n438\n00:24:43.510 --> 00:24:46.295\nThis is basically your catch all.\n\n439\n00:24:46.295 --> 00:24:51.380\nWe've got, well, I expect to\neither see John, Mary, or Alice.\n\n440\n00:24:51.380 --> 00:24:54.700\nI get anything else, just echo,\nI don't know who you are.\n\n441\n00:24:56.050 --> 00:24:57.480\nSo that's very important.\n\n442\n00:24:57.480 --> 00:25:01.863\nYou'll notice, also,\nthat we have these closed parentheses.\n\n443\n00:25:01.863 --> 00:25:05.970\nThe zero shares the zero\nkey on your keyboard.\n\n444\n00:25:05.970 --> 00:25:07.260\nClosed parentheses.\n\n445\n00:25:07.260 --> 00:25:12.310\nThat lets it know this is the piece\nthat I want you to look for.\n\n446\n00:25:12.310 --> 00:25:13.830\nThis is what it should be in.\n\n447\n00:25:13.830 --> 00:25:17.750\nSo if var1 equals John or\nMary, here we go.\n\n448\n00:25:17.750 --> 00:25:19.120\nAfter that is where my command comes.\n\n449\n00:25:19.120 --> 00:25:22.212\nSo I'm letting it know\nthe commands are here and\n\n450\n00:25:22.212 --> 00:25:25.084\nnot another option that it could be, okay?\n\n451\n00:25:25.084 --> 00:25:28.243\nAnd we see it with Alice, and we see that\nwith the catch all, which is the star.\n\n452\n00:25:28.243 --> 00:25:31.889\nAnd then after that, we have our command,\nwhatever command I want.\n\n453\n00:25:31.889 --> 00:25:35.090\nI could have put a bazillion\ncommands in here.\n\n454\n00:25:35.090 --> 00:25:41.210\nWhen I'm done running my commands, we're\nkind of harking into some C territory.\n\n455\n00:25:41.210 --> 00:25:45.780\nWe've got these lovely double semicolons.\n\n456\n00:25:45.780 --> 00:25:49.510\nNow in C it's a single semicolon usually,\nbut it Case it's a double semicolon.\n\n457\n00:25:49.510 --> 00:25:52.440\nYou have to end,\nnot each of your commands, but\n\n458\n00:25:52.440 --> 00:25:57.560\neach of your command blocks\nwith double semicolons.\n\n459\n00:25:57.560 --> 00:26:00.180\nIf I wanted to have echo\nwelcome valid user,\n\n460\n00:26:00.180 --> 00:26:03.539\necho how was your day, echo man,\nI hope it's a good one,\n\n461\n00:26:04.590 --> 00:26:08.510\nI don't have to put double semicolons\nat the end of each of those echos.\n\n462\n00:26:08.510 --> 00:26:10.200\nI just have to put my echo, echo, echo.\n\n463\n00:26:10.200 --> 00:26:13.928\nWhen I get to the last one, double\nsemicolon at the end of that guy, and\n\n464\n00:26:13.928 --> 00:26:18.000\nit knows, okay, that's the end of\nthe commands that goes with this option.\n\n465\n00:26:18.000 --> 00:26:19.380\nMove to the next option, right?\n\n466\n00:26:19.380 --> 00:26:19.955\nThat kinda thing.\n\n467\n00:26:19.955 --> 00:26:23.480\nSo keep in mind, those double\nsemicolons need to be there for\n\n468\n00:26:23.480 --> 00:26:26.270\neach one of your case statements.\n\n469\n00:26:26.270 --> 00:26:27.190\nVery good.\n\n470\n00:26:27.190 --> 00:26:33.110\nNow, the last thing that you need in\nyour case formatting is, much like if,\n\n471\n00:26:33.110 --> 00:26:37.960\nhow if ends with a fi, and\nit lets Bash know this is the entirety.\n\n472\n00:26:37.960 --> 00:26:39.880\nThis is closing off my if statement.\n\n473\n00:26:39.880 --> 00:26:41.890\nI'm done with that if.\n\n474\n00:26:41.890 --> 00:26:43.310\nI had to add that fi.\n\n475\n00:26:43.310 --> 00:26:47.760\nWe would use esac, ESAC,\nwhich is case spelled backwards.\n\n476\n00:26:47.760 --> 00:26:50.755\nAnd Don, they're super creative\nover in the Linux world.\n\n477\n00:26:50.755 --> 00:26:53.650\nSo, just backwards spelling\nof the case command.\n\n478\n00:26:53.650 --> 00:26:56.053\nThrow that on top of that monkey,\nand you're off to the races.\n\n479\n00:26:56.053 --> 00:26:57.881\nWe can run this command really quickly.\n\n480\n00:26:57.881 --> 00:27:03.180\nThis is called case_test1.sh.\n\n481\n00:27:03.180 --> 00:27:06.520\nAnd there we go, welcome valid user,\nbecause var1 and\n\n482\n00:27:06.520 --> 00:27:10.550\nvar2 do equal either John or Mary.\n\n483\n00:27:10.550 --> 00:27:13.080\nIt saw that var1 equaled John.\n\n484\n00:27:13.080 --> 00:27:17.060\nIt could have equaled Mary as well, and\nthat would have been fine, and it ran.\n\n485\n00:27:17.060 --> 00:27:19.080\nI think I made a more practical case.\n\n486\n00:27:19.080 --> 00:27:23.210\nI did this directory checking script and\nemploy in Case, trying to give you\n\n487\n00:27:23.210 --> 00:27:25.760\na little more practicality behind it,\nbecause I really like Case.\n\n488\n00:27:25.760 --> 00:27:26.736\nIt's a lot of fun to write in.\n\n489\n00:27:26.736 --> 00:27:33.032\nAnd it's ./case_dircheck.sh.\n\n490\n00:27:33.032 --> 00:27:38.162\nAnd it's saying, something has 24 files,\nway too large, consider subdirectories.\n\n491\n00:27:38.162 --> 00:27:44.920\nWhat's going on?\nCat that guy, case_dircheck.\n\n492\n00:27:44.920 --> 00:27:47.968\nHere we go, we want to keep the amount\nof files under the directory down to\n\n493\n00:27:47.968 --> 00:27:48.727\nten or less.\n\n494\n00:27:48.727 --> 00:27:53.050\nThis script will help find us\ndirectories with too many files.\n\n495\n00:27:53.050 --> 00:27:56.100\nSo we've made a company wide decision.\n\n496\n00:27:56.100 --> 00:27:59.960\nThat inside of our server here we're\nnot gonna have any more than ten\n\n497\n00:27:59.960 --> 00:28:02.900\nfiles inside of any given directory,\njust to keep them from being bloated.\n\n498\n00:28:02.900 --> 00:28:06.010\nIf we wanna do more than ten,\nwe need to create a sub directory, and\n\n499\n00:28:06.010 --> 00:28:09.150\nput ten files into there,\nand so on, and so forth.\n\n500\n00:28:09.150 --> 00:28:12.370\nBe sure the export directory\npath equals DIRPATH.\n\n501\n00:28:12.370 --> 00:28:16.180\nSo that's why commenting\nsure helps out a lot.\n\n502\n00:28:16.180 --> 00:28:17.680\nSo I need to set a global directory.\n\n503\n00:28:17.680 --> 00:28:21.600\nI need to export that out so\nthat this statement will work correctly.\n\n504\n00:28:21.600 --> 00:28:25.032\nAnd here we go,\nwe just have filenum equals, and\n\n505\n00:28:25.032 --> 00:28:27.646\nthen this long drawn our statement.\n\n506\n00:28:27.646 --> 00:28:30.070\nBasically, we're LS-ing\nwhatever DIRPATH I give it.\n\n507\n00:28:30.070 --> 00:28:32.221\nSo I wanna check Etsy, I can check Etsy.\n\n508\n00:28:32.221 --> 00:28:34.050\nIf I wanna check temp, I can do that.\n\n509\n00:28:34.050 --> 00:28:36.910\nIf I wanna check my home,\nI can do /home/dlowry.\n\n510\n00:28:36.910 --> 00:28:40.333\nI just have to make sure that\nDIRPATH variable equals that,\n\n511\n00:28:40.333 --> 00:28:44.660\nexport that out before I run my command so\nthat it knows to look to that.\n\n512\n00:28:44.660 --> 00:28:45.673\nAnd then it's gonna grip.\n\n513\n00:28:45.673 --> 00:28:50.323\nIt's gonna look for\nany file that starts with e.\n\n514\n00:28:50.323 --> 00:28:52.250\nAnd there's regex again.\n\n515\n00:28:52.250 --> 00:28:53.590\nIt's hard to get away from it.\n\n516\n00:28:53.590 --> 00:28:55.530\nIt's so useful.\n\n517\n00:28:55.530 --> 00:28:59.490\nAny time you do an LS\nwith the long formatting,\n\n518\n00:28:59.490 --> 00:29:01.200\nit starts with a dash, it's a file.\n\n519\n00:29:01.200 --> 00:29:02.237\nSo I'm looking for just files.\n\n520\n00:29:02.237 --> 00:29:05.095\nThen I'm gonna do a word count, and\n\n521\n00:29:05.095 --> 00:29:09.683\nit's gonna tell me how many of\nthese show up by using awk.\n\n522\n00:29:09.683 --> 00:29:13.054\nWe'll get into awk in the more advanced\nstuff, but especially looking for\n\n523\n00:29:13.054 --> 00:29:14.310\nthat first field.\n\n524\n00:29:14.310 --> 00:29:15.390\nHow many of these do I find?\n\n525\n00:29:15.390 --> 00:29:18.930\nAnd then it's gonna take that,\nand put that in that variable.\n\n526\n00:29:18.930 --> 00:29:23.036\nAnd then if it's 0, 1,\n2, 3, 4, 5, 6, 7, 8, 9,\n\n527\n00:29:23.036 --> 00:29:26.253\nor 10, any of these options,\nI'm gonna echo.\n\n528\n00:29:26.253 --> 00:29:30.731\nDIRPATH has found how many files it has,\nand the path is compliant.\n\n529\n00:29:30.731 --> 00:29:35.713\nIf it has 11, 12, 13, 14, or\n15, we give a little leeway and\n\n530\n00:29:35.713 --> 00:29:39.710\nsay, hey buddy,\nthat path has a bit too many files.\n\n531\n00:29:39.710 --> 00:29:40.570\nPlease remove some files.\n\n532\n00:29:40.570 --> 00:29:45.152\nYou'll notice echo, no double semicolons.\n\n533\n00:29:45.152 --> 00:29:47.715\nEcho, no double semicolons.\n\n534\n00:29:47.715 --> 00:29:52.062\nEcho, look at the end of this echo, I\nfinally come to the end of the semicolons,\n\n535\n00:29:52.062 --> 00:29:54.090\nbecause now I'm onto a next option.\n\n536\n00:29:54.090 --> 00:29:55.260\nI'm done with that option.\n\n537\n00:29:55.260 --> 00:29:57.580\nMoving on to the next, same kind of idea.\n\n538\n00:29:57.580 --> 00:29:58.500\nThis has too many files.\n\n539\n00:29:58.500 --> 00:30:01.190\nSo if it has this many files,\n11, 12, 13, or 14, or 15,\n\n540\n00:30:01.190 --> 00:30:05.810\nthen let them know this is\nkind of like a warning.\n\n541\n00:30:05.810 --> 00:30:10.150\nOtherwise, say, it's too large,\nand you got to call it a day.\n\n542\n00:30:10.150 --> 00:30:10.930\n&gt;&gt; And that's really important,\n\n543\n00:30:10.930 --> 00:30:13.880\nbecause inside of each case you\ncan really do some complex logic.\n\n544\n00:30:13.880 --> 00:30:15.600\nYou're keeping it pretty simple.\n\n545\n00:30:15.600 --> 00:30:17.080\n&gt;&gt; Yeah.\n&gt;&gt; For the sake of the example, but\n\n546\n00:30:17.080 --> 00:30:20.550\nyou could have more nested if statements,\neven additional cases inside.\n\n547\n00:30:20.550 --> 00:30:22.630\n&gt;&gt; That's right.\n&gt;&gt; You could really go crazy with it.\n\n548\n00:30:22.630 --> 00:30:26.780\nSo this could be very, very advanced\nlogic based on all sorts of conditions.\n\n549\n00:30:26.780 --> 00:30:28.350\nCase is a really powerful command.\n\n550\n00:30:28.350 --> 00:30:29.680\n&gt;&gt; Yeah, super powerful.\n\n551\n00:30:29.680 --> 00:30:31.295\nThese are all the nesting features.\n\n552\n00:30:31.295 --> 00:30:33.029\nWe're gonna learn about loops.\n\n553\n00:30:33.029 --> 00:30:34.580\nYou can throw loops in there.\n\n554\n00:30:34.580 --> 00:30:35.220\nYou name it.\n\n555\n00:30:35.220 --> 00:30:36.890\nThey're super, super handy.\n\n556\n00:30:36.890 --> 00:30:40.110\nAnd now, if I follow the directions\nthat I've given myself inside of this\n\n557\n00:30:40.110 --> 00:30:42.830\nthing here, and I say exports.\n\n558\n00:30:42.830 --> 00:30:47.029\nWe'll do my home directory, home/dlowrie.\n\n559\n00:30:47.029 --> 00:30:50.850\nI can't even spell my own name.\n\n560\n00:30:50.850 --> 00:30:57.110\nSorry, we gotta do DIRPATH=, like a sitch.\n\n561\n00:30:57.110 --> 00:30:59.304\nBada Bing.\nRerun our case dircheck.\n\n562\n00:30:59.304 --> 00:31:03.510\nNotice it says, home/dlowrie has 22 files.\n\n563\n00:31:03.510 --> 00:31:04.170\nWay too large.\n\n564\n00:31:04.170 --> 00:31:05.780\nConsider sub-directories.\n\n565\n00:31:05.780 --> 00:31:08.240\nSo that would allow me to,\nas an administrator,\n\n566\n00:31:08.240 --> 00:31:12.580\nrun through some known\nproblem spots in our system\n\n567\n00:31:12.580 --> 00:31:17.180\nreally quickly by just exporting their\npath to the DIRFILE, or I'm sorry,\n\n568\n00:31:17.180 --> 00:31:22.760\nthe DIRPATH variable, and then just check\nthose sequentially using our script.\n\n569\n00:31:22.760 --> 00:31:28.740\nSave me a lot of time and effort by having\nto keep continually typing out LS-L,\n\n570\n00:31:28.740 --> 00:31:30.320\npipe that into Grep, look for\n\n571\n00:31:30.320 --> 00:31:33.820\nthese files that start with this,\nword count that, awk that.\n\n572\n00:31:33.820 --> 00:31:35.365\nThat's a lot of typing.\n\n573\n00:31:35.365 --> 00:31:38.689\nI just make one script,\nfeed it the directory I want, and using\n\n574\n00:31:38.689 --> 00:31:43.290\nthe Case command, I can iterate through it\nvery easily, and it works out really well.\n\n575\n00:31:43.290 --> 00:31:45.715\n&gt;&gt; All right, so\nwe've got a lot of options.\n\n576\n00:31:45.715 --> 00:31:47.420\n&gt;&gt; [LAUGH]\n&gt;&gt; That should really be our takeaway\n\n577\n00:31:47.420 --> 00:31:50.892\nhere, is, boy, when it comes to comparing\nthings, there's several different ways to\n\n578\n00:31:50.892 --> 00:31:53.420\ngo about it, and which is the right way,\nwhich is the wrong way?\n\n579\n00:31:53.420 --> 00:31:56.460\nWell, sometimes, you might find\nthat only one of them works.\n\n580\n00:31:56.460 --> 00:31:59.040\nLike we're doing advanced mathematics,\nwe've got to use the double parentheses,\n\n581\n00:31:59.040 --> 00:32:00.010\nthat kind of thing.\n\n582\n00:32:00.010 --> 00:32:04.340\nBut a lot of times, you can make stuff\nhappen, regardless of which one you use.\n\n583\n00:32:04.340 --> 00:32:06.540\nSo, it's not so\nmuch that there's a right or\n\n584\n00:32:06.540 --> 00:32:09.216\na wrong way, but finding, like what you\nsaid, Daniel, one that works, right?\n\n585\n00:32:09.216 --> 00:32:10.460\n&gt;&gt; Right.\n&gt;&gt; Just get it to work, and\n\n586\n00:32:10.460 --> 00:32:13.560\nthen once we've got that done,\nwe can kind of fine tune it from there.\n\n587\n00:32:13.560 --> 00:32:15.100\nBut you'll wanna learn these.\n\n588\n00:32:15.100 --> 00:32:16.590\nThese are a pivotal piece of, pretty much,\n\n589\n00:32:16.590 --> 00:32:20.225\nany script that you'll write\nthat performs varying tasks.\n\n590\n00:32:20.225 --> 00:32:23.020\nYou've gotta have that kind of\ndecision logic inside of there.\n\n591\n00:32:23.020 --> 00:32:24.740\nBut I do thank you for that, Daniel.\n\n592\n00:32:24.740 --> 00:32:25.810\nI think this is probably a good spot for\n\n593\n00:32:25.810 --> 00:32:28.110\nus to wrap up our trilogy\n&gt;&gt; Our trilogy.\n\n594\n00:32:28.110 --> 00:32:29.285\n&gt;&gt; on conditional statements.\n\n595\n00:32:29.285 --> 00:32:31.539\n&gt;&gt; [LAUGH]\n&gt;&gt; So we'll wrap it up here.\n\n596\n00:32:31.539 --> 00:32:33.280\nHope you guys enjoyed it.\n\n597\n00:32:33.280 --> 00:32:36.130\nLike I said, that was a good run\ndown on conditional statements.\n\n598\n00:32:36.130 --> 00:32:38.819\nIn this episode we got a chance\nto see doing the Case command,\n\n599\n00:32:38.819 --> 00:32:40.579\nwhich I think is incredibly powerful.\n\n600\n00:32:40.579 --> 00:32:42.308\nWe saw some basic regular expression.\n\n601\n00:32:42.308 --> 00:32:47.030\nWe saw some boolean comparisons,\nwhere we did and's and or's.\n\n602\n00:32:47.030 --> 00:32:50.000\nAll of that wrapped together\ninto just more options for\n\n603\n00:32:50.000 --> 00:32:51.340\ndoing conditional statements.\n\n604\n00:32:51.340 --> 00:32:53.660\nBut that's where we're\ngonna wrap this one up.\n\n605\n00:32:53.660 --> 00:32:55.620\nSo, thank you guys for watching.\n\n606\n00:32:55.620 --> 00:32:58.450\nSigning off for ITPRO.TV, I'm Don Pezet.\n\n607\n00:32:58.450 --> 00:32:59.400\n&gt;&gt; And Daniel Lowrie.\n\n608\n00:32:59.400 --> 00:33:00.264\n&gt;&gt; And we will see you next time.\n\n609\n00:33:02.226 --> 00:33:08.179\n[MUSIC]\n\n610\n00:33:08.179 --> 00:33:11.136\nThank you for watching ITProTV.\n\n",
          "vimeoId": "236928772"
        }
      ],
      "title": "Exiting Scripts"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Don explore the use\nof loops in bash scripts. Here they will define what loops are\nand how they work, and then go deeper by demonstrating and\nexplaining in detail the “for loop”.",
          "length": "1931",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-1-loops-100417-BLOOPER.00_31_56_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-1-loops-100417-BLOOPER.00_31_56_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-1-loops-100417-BLOOPER.00_31_56_04.Still001-sm.jpg",
          "title": "Loops",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:01.421\nWelcome to ITPro.TV.\n\n2\n00:00:01.421 --> 00:00:02.485\nI'm your host.\n\n3\n00:00:02.485 --> 00:00:06.871\n[CROSSTALK]\n\n4\n00:00:06.871 --> 00:00:08.537\n[MUSIC]\n\n5\n00:00:08.537 --> 00:00:12.980\n&gt;&gt; You;'re watching ITPro.TV.\n\n6\n00:00:12.980 --> 00:00:15.500\n&gt;&gt; All right, good morning,\ngood afternoon and good evening and\n\n7\n00:00:15.500 --> 00:00:17.480\nwelcome back to another\nepisode of ITPro.TV.\n\n8\n00:00:17.480 --> 00:00:19.010\nI'm your host, Don Pezet.\n\n9\n00:00:19.010 --> 00:00:23.211\nBack again with another episode of\nLinux Shell Scripting Basics and\n\n10\n00:00:23.211 --> 00:00:25.770\nwe're gonna be taking a look at Loops,\nthat's right,\n\n11\n00:00:25.770 --> 00:00:28.084\nwe're getting fruity in\nhere with some Fruit Loops.\n\n12\n00:00:28.084 --> 00:00:32.120\nAnd [LAUGH] let me get a chance to\nsee how we can get our scripts to do\n\n13\n00:00:32.120 --> 00:00:34.740\none thing many, many, many,\nmany, many, many times, and\n\n14\n00:00:34.740 --> 00:00:38.130\nthere's a ton of different uses for that,\nand to help us see what those uses are,\n\n15\n00:00:38.130 --> 00:00:40.560\nwe got Mister Daniel Lowrie\nback in the studio to help us.\n\n16\n00:00:40.560 --> 00:00:41.550\nDaniel, thanks for joining us.\n\n17\n00:00:41.550 --> 00:00:44.460\n&gt;&gt; Don, thanks for having me back, always\na pleasure to be here in the studio and\n\n18\n00:00:44.460 --> 00:00:46.890\nstanding on this side of\nthe fence is always a good time,\n\n19\n00:00:46.890 --> 00:00:50.310\nespecially when it comes to Linux and\nShell scripting, I do enjoy it.\n\n20\n00:00:50.310 --> 00:00:52.000\nIt is one of my favorite things.\n\n21\n00:00:52.000 --> 00:00:54.330\nAnd yes, today we are talking about loops.\n\n22\n00:00:54.330 --> 00:00:58.030\nAnd, as Don said,\nloops are basically what we need is\n\n23\n00:00:58.030 --> 00:01:03.240\nthe capability within inside of\na Bash to do things repetitively.\n\n24\n00:01:03.240 --> 00:01:06.550\nNow, we´ve kinda talked about that\na little bit in the previous episodes.\n\n25\n00:01:06.550 --> 00:01:10.820\nThat´s why we write scripts, so that we\ncan do repetitive task a whole lot easier.\n\n26\n00:01:10.820 --> 00:01:14.060\nAnd now we're gonna expand\nthat functionality even more\n\n27\n00:01:14.060 --> 00:01:15.680\nby introducing loops into them.\n\n28\n00:01:15.680 --> 00:01:17.790\nBecause that's exactly what they do.\n\n29\n00:01:17.790 --> 00:01:21.150\nNow, in your day to day life you might\nbe doing repetitive tasks, over and\n\n30\n00:01:21.150 --> 00:01:22.760\nover again, so, you say,\nI'm gonna write a script for that.\n\n31\n00:01:22.760 --> 00:01:25.210\nBut sometimes when you're writing scripts,\n\n32\n00:01:25.210 --> 00:01:29.530\nyou realize, I'm doing repetitive\ntasks inside of my script.\n\n33\n00:01:29.530 --> 00:01:34.100\nI keep having to do this and do that,\nand do this and do that, and it gets,\n\n34\n00:01:34.100 --> 00:01:38.840\nwhy can't I just make that\ndo it a bunch of times.\n\n35\n00:01:38.840 --> 00:01:43.050\nThen when it's done doing it,\nthen come out with the results.\n\n36\n00:01:43.050 --> 00:01:44.480\nSo that's what loops do for us,\n\n37\n00:01:44.480 --> 00:01:48.980\nand back when I started into vast\nscripting, it really confused me.\n\n38\n00:01:48.980 --> 00:01:53.110\nI didn't understand the, I got the\nconcept, do something over and over and\n\n39\n00:01:53.110 --> 00:01:54.900\nover again, x amount of times.\n\n40\n00:01:54.900 --> 00:02:01.090\nOr until something happens and then stop,\nbut I didn't quite get that format.\n\n41\n00:02:01.090 --> 00:02:04.290\nSo hopefully today,\nwe'll explain that to you in a good way,\n\n42\n00:02:04.290 --> 00:02:08.940\nin ways that you'll understand and that\nmakes sense on not just what a loop does,\n\n43\n00:02:08.940 --> 00:02:12.910\nbut how each type of loop that\nwe look at does what it does.\n\n44\n00:02:12.910 --> 00:02:16.070\n&gt;&gt; All right, now Daniel I know we've\ndiscussed how really a script is\n\n45\n00:02:16.070 --> 00:02:17.910\njust a sequence of commands.\n\n46\n00:02:17.910 --> 00:02:19.690\nAnd if I'm only gonna\nuse a script one time,\n\n47\n00:02:19.690 --> 00:02:22.100\nthen I might as well\njust run those commands.\n\n48\n00:02:22.100 --> 00:02:24.780\nCuz it would take me just as longer on\nthe commands as it would to type them into\n\n49\n00:02:24.780 --> 00:02:25.680\na script in the first place.\n\n50\n00:02:25.680 --> 00:02:29.290\nSo the whole point of the script is to\nbe able to reuse it, run it over and\n\n51\n00:02:29.290 --> 00:02:29.880\nover and over again.\n\n52\n00:02:29.880 --> 00:02:32.090\n&gt;&gt; Correct\n&gt;&gt; But sometimes it's not so\n\n53\n00:02:32.090 --> 00:02:35.490\nmuch that we want the entire script\nto run over and over and over again.\n\n54\n00:02:35.490 --> 00:02:39.330\nBut a certain piece of it, which is\nkind of where a loop comes in, right?.\n\n55\n00:02:39.330 --> 00:02:45.740\nIt's looping inside of it, and and that\nmeans we've got to be telling it a little\n\n56\n00:02:45.740 --> 00:02:48.430\nbit about what we want to do and that's\nkind of where loop structure comes in.\n\n57\n00:02:48.430 --> 00:02:51.610\nSo can you kind of introduce us\nto how those loops actually work,\n\n58\n00:02:51.610 --> 00:02:52.920\nor how we supposed to design that?\n\n59\n00:02:52.920 --> 00:02:53.840\n&gt;&gt; Yeah, lets' do that.\n\n60\n00:02:53.840 --> 00:02:57.530\nLet's jumped right in and let's start\ntalking about loops and the specific\n\n61\n00:02:57.530 --> 00:03:01.430\ntypes, because there are multiple types\nof loops which you couldn't employ.\n\n62\n00:03:01.430 --> 00:03:04.210\nNow, work a little bit\ndifferently in the other, and\n\n63\n00:03:04.210 --> 00:03:07.630\nyou might wanna use this type of loop over\nthat type of loop for this scenario, but\n\n64\n00:03:07.630 --> 00:03:10.880\nyou wanna use that type of loop, or\nthis one for this next scenario.\n\n65\n00:03:10.880 --> 00:03:12.950\nSo let's look at how they work, so\n\n66\n00:03:12.950 --> 00:03:16.690\nthat we know that would be perfect for\nmaybe something like a for loop.\n\n67\n00:03:16.690 --> 00:03:17.665\nLet's start there.\n\n68\n00:03:17.665 --> 00:03:20.980\nFor loops are extremely simple,\nthey're not very difficult at all and\n\n69\n00:03:20.980 --> 00:03:22.500\nyou'll find that they are quite powerful.\n\n70\n00:03:22.500 --> 00:03:26.000\nYou'll deploy them over and\nover again, they're really great.\n\n71\n00:03:26.000 --> 00:03:30.290\nI find myself running to for loops quite\noften when I need a repetitive task done.\n\n72\n00:03:30.290 --> 00:03:34.560\nBecause typically, I know exactly\nwhat each iteration is gonna be,\n\n73\n00:03:34.560 --> 00:03:40.000\ncuz remember loop is, you wanna marry\nthe word iteration in our mind with loops.\n\n74\n00:03:40.000 --> 00:03:41.690\nBecause we're gonna do something, and\n\n75\n00:03:41.690 --> 00:03:43.710\nthen we're gonna reiterate that\nsomething with something else.\n\n76\n00:03:43.710 --> 00:03:47.070\nAnd then we're gonna reiterate again with\nsomething else until we come to the end\n\n77\n00:03:47.070 --> 00:03:51.250\nof whatever values that we need for\niteration.\n\n78\n00:03:51.250 --> 00:03:57.972\nThe for loop, we've got for, a variable\nin a list, or what's known as an array.\n\n79\n00:03:57.972 --> 00:04:01.810\nAnd we feed that array to it\nin various different ways.\n\n80\n00:04:01.810 --> 00:04:06.860\nAnd then it's going to bounce through\neach one of those things in that array,\n\n81\n00:04:06.860 --> 00:04:08.430\nand do the commands we give it to do.\n\n82\n00:04:08.430 --> 00:04:10.736\nSo that's the basic idea.\n\n83\n00:04:10.736 --> 00:04:13.414\nWith that mind,\nlet's jump into the computer and\n\n84\n00:04:13.414 --> 00:04:16.065\nsee what it looks like on paper or\ndigital paper.\n\n85\n00:04:16.065 --> 00:04:20.120\n[INAUDIBLE] and so\nwe can get a more tangible idea.\n\n86\n00:04:20.120 --> 00:04:21.710\nI got a script that I've written here.\n\n87\n00:04:21.710 --> 00:04:23.570\nI'll just cut that really quickly.\n\n88\n00:04:23.570 --> 00:04:28.400\nFor _list.sh like so.\n\n89\n00:04:28.400 --> 00:04:29.440\nSo here's my for loop.\n\n90\n00:04:30.440 --> 00:04:33.100\nWe've got our shebang as always, and\nthis is the beginning of line, so\n\n91\n00:04:33.100 --> 00:04:34.740\nI make sure Bash does this.\n\n92\n00:04:34.740 --> 00:04:39.890\nAnd I have for var1, there's my variable.\n\n93\n00:04:39.890 --> 00:04:45.330\nAnd then I use the word in, and\nthen I give it a list of values.\n\n94\n00:04:45.330 --> 00:04:48.862\nOkay, I've defined this list of values,\nand thought of just some states that\n\n95\n00:04:48.862 --> 00:04:52.010\nare found in the United States,\njust a list of states.\n\n96\n00:04:52.010 --> 00:04:53.840\nBut that's my array,\nquote, unquote, right?\n\n97\n00:04:55.030 --> 00:04:58.230\nSo what for is gonna do is saying,\nfor of var1, okay?\n\n98\n00:04:58.230 --> 00:05:03.900\nSo it's defining a variable,\nand then in my array,\n\n99\n00:05:03.900 --> 00:05:09.970\nfor var1, I'm gonna take a value out of my\narray, in my array, and put it into var1.\n\n100\n00:05:09.970 --> 00:05:11.610\nThat's the whole idea.\n\n101\n00:05:11.610 --> 00:05:14.520\nOnce that's done, do something.\n\n102\n00:05:14.520 --> 00:05:16.760\nSo we've got to use this do command.\n\n103\n00:05:18.170 --> 00:05:19.450\nAnd what do I want to do?\n\n104\n00:05:19.450 --> 00:05:23.570\nI kinda wanna, I wanna echo,\nthe next state is whatever the value\n\n105\n00:05:23.570 --> 00:05:27.670\nof r1 that I reference that variable\nthat I created using the for loop.\n\n106\n00:05:27.670 --> 00:05:30.510\n&gt;&gt; So you know the for clause,\nthat's just being called once.\n\n107\n00:05:30.510 --> 00:05:32.820\n&gt;&gt; Right.\n&gt;&gt; But then that echo or\n\n108\n00:05:32.820 --> 00:05:36.390\nreally anything inside of that, that\nlittle do know there, that's gonna run\n\n109\n00:05:36.390 --> 00:05:40.700\nover and over again, basically, just\nonce for each item that's in your array?\n\n110\n00:05:40.700 --> 00:05:45.656\n&gt;&gt; Yes, that is exactly the idea and\nthis is where I was getting confused,\n\n111\n00:05:45.656 --> 00:05:51.536\nwhen I first started, I was like, will how\ndoes it know to stop at Colorado, right?\n\n112\n00:05:51.536 --> 00:05:52.550\nHow does it know to go\nfrom Alabama to Alaska?\n\n113\n00:05:52.550 --> 00:05:54.010\nHow does it know to do that?\n\n114\n00:05:54.010 --> 00:05:56.850\nWell, that's just the built\nin functionality, it says,\n\n115\n00:05:56.850 --> 00:06:01.690\nI've got an array and behind the scenes\nit's kind of making a list, it's going,\n\n116\n00:06:01.690 --> 00:06:07.210\nokay, everything that's separated by\na space is another value in the array.\n\n117\n00:06:07.210 --> 00:06:11.090\nSo I'm gonna hold that value off,\nprobably in memory somewhere, so\n\n118\n00:06:11.090 --> 00:06:12.500\nthat I can reference that for myself.\n\n119\n00:06:12.500 --> 00:06:16.640\nSo for does that for you, we don't\nreally necessarily at this point anyway,\n\n120\n00:06:16.640 --> 00:06:19.640\nneed to know how it does,\njust that it does do that.\n\n121\n00:06:19.640 --> 00:06:23.760\nIt separates those values out,\nmakes that list and goes through one and\n\n122\n00:06:23.760 --> 00:06:28.870\nthen it drops that one off and\npulls to the next one, kinda like a,\n\n123\n00:06:28.870 --> 00:06:34.120\nI think of something that feeds paper or\nsomething like you know printer, right?\n\n124\n00:06:34.120 --> 00:06:37.560\nOne piece comes out the next,\none pops right up and is ready, right?\n\n125\n00:06:37.560 --> 00:06:39.380\nIt's not the same piece of paper.\n\n126\n00:06:39.380 --> 00:06:40.880\nBut it can be used, it's ready to be used.\n\n127\n00:06:40.880 --> 00:06:42.990\nSame kind of idea with your for loop.\n\n128\n00:06:42.990 --> 00:06:44.470\nSo, very, very simple.\n\n129\n00:06:44.470 --> 00:06:48.380\nWhen we run this, it should just echo,\ngive me a bunch of echo lines,\n\n130\n00:06:48.380 --> 00:06:51.310\ntelling you, next state, next state,\nnext state, next state, next state.\n\n131\n00:06:51.310 --> 00:06:55.680\nUntil it reaches the end, or when there's\nnothing else to iterate, the loop ends.\n\n132\n00:06:55.680 --> 00:06:57.850\nAnd that's where we get this done.\n\n133\n00:06:57.850 --> 00:07:02.655\nSo it knows that okay, I've come to the\nend of all the variables or all the values\n\n134\n00:07:02.655 --> 00:07:07.493\nin the array, so I can go ahead and finish\nout and that's by using the word done.\n\n135\n00:07:07.493 --> 00:07:10.169\nAnd this is very similar to\nwhat we looked at with if and\n\n136\n00:07:10.169 --> 00:07:11.960\nwhat we looked at with case.\n\n137\n00:07:11.960 --> 00:07:15.590\nRemember we have if and you had to\nend it with b, and you have case and\n\n138\n00:07:15.590 --> 00:07:16.930\nyou end it with esac.\n\n139\n00:07:16.930 --> 00:07:18.710\nHere we have do and done.\n\n140\n00:07:18.710 --> 00:07:21.330\nSo it's not a play on words as\nthey've done in the past, but\n\n141\n00:07:21.330 --> 00:07:25.870\nstill the same kind of idea of blocking\noff that portion of the command\n\n142\n00:07:25.870 --> 00:07:30.240\nstructure that's gonna go along with your\nloop, so that's what's happening here.\n\n143\n00:07:30.240 --> 00:07:31.660\nNow if we run this, it should work,\n\n144\n00:07:31.660 --> 00:07:35.910\nfingers crossed as always,\ncuz nothing is a given, right?\n\n145\n00:07:35.910 --> 00:07:39.970\nSo we'll run it ./for_list.sh,\nand there we go.\n\n146\n00:07:39.970 --> 00:07:42.790\nAnd it came out really quickly,\nthis could have probably been 100 lines,\n\n147\n00:07:42.790 --> 00:07:45.560\nit probably would have\npopped out just as quickly.\n\n148\n00:07:45.560 --> 00:07:47.120\nThese things run fairly smoothly,\n\n149\n00:07:47.120 --> 00:07:49.780\nespecially when it's not\nas complex as they can be.\n\n150\n00:07:49.780 --> 00:07:53.509\nThat just says Alabama, Alaska, Arizona,\nArkansas, California, Colorado,\n\n151\n00:07:53.509 --> 00:07:54.521\nI'm off to the races,\n\n152\n00:07:54.521 --> 00:07:57.846\nit iterated through each one, and\ndid the command inside of the do block.\n\n153\n00:07:57.846 --> 00:07:59.487\n&gt;&gt; And you mentioned how quick it ran,\n\n154\n00:07:59.487 --> 00:08:02.552\nsometimes it can, especially if\nit's not echoing to the screen,\n\n155\n00:08:02.552 --> 00:08:05.638\nit can create the illusion of running\nall of those at the same time.\n\n156\n00:08:05.638 --> 00:08:08.741\nBut they don't, it is actually a Serial\noperation runs one at a time as it moves\n\n157\n00:08:08.741 --> 00:08:11.704\nthrough that list, and that's important\ncuz you might be doing something\n\n158\n00:08:11.704 --> 00:08:14.120\nthat modifies files and\nyou need it to follow that sequence.\n\n159\n00:08:14.120 --> 00:08:15.510\n&gt;&gt; Yeah.\n&gt;&gt; So whatever sequence it\n\n160\n00:08:15.510 --> 00:08:18.440\nis in that fore statement,\nthat's the sequence it's gonna execute at.\n\n161\n00:08:18.440 --> 00:08:23.050\n&gt;&gt; That's exactly right, so I've actually\nhad problems with loops running so\n\n162\n00:08:23.050 --> 00:08:28.970\nfast that, the exit backs out to my\nterminal and then gives me more results.\n\n163\n00:08:28.970 --> 00:08:30.060\nI've seen that happen.\n\n164\n00:08:30.060 --> 00:08:34.360\nI've had to actually\npurposefully slow them down and\n\n165\n00:08:34.360 --> 00:08:36.005\nwe might actually see that today.\n\n166\n00:08:36.005 --> 00:08:37.890\n[LAUGH] It'll be cool to\nsee how that works out.\n\n167\n00:08:37.890 --> 00:08:41.360\nA little extra bonus round for you guys\nwhen you are working with your loops.\n\n168\n00:08:41.360 --> 00:08:44.440\nAll right, let's start talking\nabout the values in the array.\n\n169\n00:08:44.440 --> 00:08:45.840\nNow, those values are very simple.\n\n170\n00:08:45.840 --> 00:08:46.970\nThere wasn't a whole lot to them.\n\n171\n00:08:46.970 --> 00:08:48.960\nThey were simple singular word values.\n\n172\n00:08:48.960 --> 00:08:51.770\nWhat happens when we get\ninto more complex values?\n\n173\n00:08:51.770 --> 00:08:54.650\nWhat happens if it's,\nI don't know, we have states,\n\n174\n00:08:54.650 --> 00:08:56.300\nwe'll stick with the states theme.\n\n175\n00:08:56.300 --> 00:08:57.800\nWhat about New Hampshire?\n\n176\n00:08:57.800 --> 00:09:01.520\nNew Hampshire's two words,\nNew space Hampshire.\n\n177\n00:09:01.520 --> 00:09:04.260\nNow we could stick an underscore in there,\nDon, and that would be, that would work,\n\n178\n00:09:04.260 --> 00:09:05.300\nthat would fix the problem.\n\n179\n00:09:05.300 --> 00:09:09.070\nBut that's not how we look at things,\nright?\n\n180\n00:09:09.070 --> 00:09:15.040\nI don't expect to see New underscore\nHampshire in of most contexts.\n\n181\n00:09:15.040 --> 00:09:18.590\nAnd I just want to be able to make\nit look the way I expect to look.\n\n182\n00:09:18.590 --> 00:09:22.147\nAnd sometimes you can't change it,\nit needs to be a separate value.\n\n183\n00:09:22.147 --> 00:09:24.550\nMaybe it's calling values\nfrom somewhere else.\n\n184\n00:09:24.550 --> 00:09:26.400\nSo how do we deal with this?\n\n185\n00:09:26.400 --> 00:09:29.440\nWell, in this type of loop, we can\ntake a look, I've got another script,\n\n186\n00:09:29.440 --> 00:09:32.850\nit's actually got a few scripts in it,\nwe're gonna uncomment some stuff.\n\n187\n00:09:32.850 --> 00:09:38.640\nI'm gonna cats for_complex_list.sh.\n\n188\n00:09:38.640 --> 00:09:41.540\nAnd it is quite lengthy so\nit over scrolled a bit.\n\n189\n00:09:41.540 --> 00:09:45.330\nBut here we go, this is the main block\nof code we're gonna start with here.\n\n190\n00:09:45.330 --> 00:09:49.210\nSo for var1, right, so nothing crazy yet.\n\n191\n00:09:49.210 --> 00:09:53.890\nIn Nevada, New Hampshire, New Mexico,\nNew York, North Carolina.\n\n192\n00:09:53.890 --> 00:09:58.350\nMost of these values are complex as\nfar as the for loop is concerned.\n\n193\n00:09:58.350 --> 00:10:04.280\nThey have multiple words as a string,\nand not just single word strings.\n\n194\n00:10:04.280 --> 00:10:05.340\nSo, what do we do?\n\n195\n00:10:05.340 --> 00:10:09.566\nWell, an easy way to fix that is\nto run to our bounding options.\n\n196\n00:10:09.566 --> 00:10:14.330\nIf I run this as it stands,\nit's gonna look a little crazy.\n\n197\n00:10:14.330 --> 00:10:15.810\nIt's gonna break those up.\n\n198\n00:10:15.810 --> 00:10:20.387\nIt's gonna see each one of those words\nas a different value in the array.\n\n199\n00:10:20.387 --> 00:10:23.219\nSo, it's gonna say next state New,\nnext state Hampshire,\n\n200\n00:10:23.219 --> 00:10:24.860\nnext state New, next state York.\n\n201\n00:10:24.860 --> 00:10:25.630\nThat kind of idea.\n\n202\n00:10:25.630 --> 00:10:27.070\nSo, let's do that.\n\n203\n00:10:27.070 --> 00:10:29.613\nFor _complex_list.sh and there we go.\n\n204\n00:10:29.613 --> 00:10:35.560\nSo Next state: Nevada, Next state: New,\nNext state: Hampshire, so on and so forth.\n\n205\n00:10:35.560 --> 00:10:37.416\nThat's not the output I'm looking for.\n\n206\n00:10:37.416 --> 00:10:39.230\nI want it to be the right way.\n\n207\n00:10:39.230 --> 00:10:44.218\nSo let's go back in there,\nwell we'll vin that because we're gonna\n\n208\n00:10:44.218 --> 00:10:48.020\nneed to do some modification here,\nand there we go.\n\n209\n00:10:48.020 --> 00:10:52.626\nMake sure insert mode,\nI'm going to comment this out,\n\n210\n00:10:52.626 --> 00:10:57.600\nlike so and\nI'm gonna uncomment this block here.\n\n211\n00:10:57.600 --> 00:11:00.268\nSo, what I've done here is I've basically\n\n212\n00:11:00.268 --> 00:11:04.350\njust bounded those words\nusing single quotations.\n\n213\n00:11:04.350 --> 00:11:09.100\nI say for\nvar in Nevada single quotes around it.\n\n214\n00:11:09.100 --> 00:11:12.710\nNew Hampshire single quotes around\nthe entirety of the string.\n\n215\n00:11:12.710 --> 00:11:15.020\nNow, that becomes the value, right?\n\n216\n00:11:15.020 --> 00:11:16.550\nIt's bounding that up.\n\n217\n00:11:16.550 --> 00:11:21.745\nSo that it knows, you want New Hampshire,\nnot New and Hampshire.\n\n218\n00:11:21.745 --> 00:11:26.310\nSo let's save and exit this one,\nsee how that runs on the same script.\n\n219\n00:11:26.310 --> 00:11:31.920\nAnd now, yes, now it's starting to look\na whole lot nicer, just like I expected.\n\n220\n00:11:31.920 --> 00:11:34.870\n&gt;&gt; And I know a lot of developers kind of\nget in the habit of saying, you know what?\n\n221\n00:11:34.870 --> 00:11:38.400\nI'm just gonna always surround\nmy values in those tick marks so\n\n222\n00:11:38.400 --> 00:11:39.350\nthat you don't forget it.\n\n223\n00:11:39.350 --> 00:11:42.630\nCuz it does happen, you forget those and\nthen it starts messing things up.\n\n224\n00:11:42.630 --> 00:11:45.148\nSo it doesn't hurt to use those, even\nwhen it's a one word statement, right?\n\n225\n00:11:45.148 --> 00:11:46.240\n&gt;&gt; No, you're exactly right.\n\n226\n00:11:46.240 --> 00:11:49.060\nAnd you saw that,\nI put them around Nevada, right?\n\n227\n00:11:49.060 --> 00:11:51.540\nAnd it was consistency in my coding,\nright?\n\n228\n00:11:51.540 --> 00:11:52.710\nIf I make that a habit,\n\n229\n00:11:52.710 --> 00:11:56.690\nI know that any time I have\na complex value it should be caught.\n\n230\n00:11:56.690 --> 00:11:58.766\nDepending on the type of\ncomplexity that's being used,\n\n231\n00:11:58.766 --> 00:12:00.461\nyou might have to do some\nother things as well.\n\n232\n00:12:00.461 --> 00:12:05.251\nBut for basic purposes here, if I just get\nin the habit of binding up my values in my\n\n233\n00:12:05.251 --> 00:12:08.500\narray with single quotes,\nthen I'm off to the races.\n\n234\n00:12:08.500 --> 00:12:11.135\nI know I've got one less thing\nI've probably gotta worry about.\n\n235\n00:12:11.135 --> 00:12:12.670\nLet's jump back in the script again.\n\n236\n00:12:12.670 --> 00:12:15.080\nI got a couple other things\nthat we're gonna do with it.\n\n237\n00:12:15.080 --> 00:12:16.880\nComplex values, get back into insert mode.\n\n238\n00:12:16.880 --> 00:12:18.640\nI'm gonna comment this one back out.\n\n239\n00:12:18.640 --> 00:12:20.040\nWe'll go to the next one.\n\n240\n00:12:21.080 --> 00:12:23.381\nBack space that.\n\n241\n00:12:23.381 --> 00:12:25.180\nNow, this one's a little different.\n\n242\n00:12:25.180 --> 00:12:28.380\nIt's saying var1 in I'm\nwondering if this'll work.\n\n243\n00:12:28.380 --> 00:12:31.630\nAnd hopefully, your mind's already,\nbells are ringing and you're going, yeah,\n\n244\n00:12:31.630 --> 00:12:36.400\nthere's single quotes in that sentence,\nbut what if I just want that sentence?\n\n245\n00:12:36.400 --> 00:12:38.857\nRight, well, what's gonna happen here?\n\n246\n00:12:38.857 --> 00:12:42.040\nMaybe I want it to be I'm wondering\nif this will work, right?\n\n247\n00:12:42.040 --> 00:12:46.980\nI want each of those to be its own\npiece of the puzzle in the array.\n\n248\n00:12:46.980 --> 00:12:50.153\nBut because of the single quotes things\nare gonna go a little crazy on this here.\n\n249\n00:12:50.153 --> 00:12:54.442\nLet's see what that looks like just so\nwe can, I almost like to show sometimes it\n\n250\n00:12:54.442 --> 00:12:57.660\nnot working so we get that idea\nas well as how it should work.\n\n251\n00:12:58.720 --> 00:13:00.130\nWe'll run it again.\n\n252\n00:13:00.130 --> 00:13:03.900\nAnd, yeah,\nsee we get some crazy looking output.\n\n253\n00:13:03.900 --> 00:13:07.840\nIt's says I'm wondering if thisll, but\nthere's no single quotes in there, and\n\n254\n00:13:07.840 --> 00:13:09.545\nthen work got its own line.\n\n255\n00:13:09.545 --> 00:13:16.190\nSo putting it in this way, the for\nloop thought, I'm wondering if thisll,\n\n256\n00:13:16.190 --> 00:13:20.445\nwithout the single quotes was a single\nstring, and then work was its own string.\n\n257\n00:13:20.445 --> 00:13:22.100\nSo it got crazy results.\n\n258\n00:13:22.100 --> 00:13:25.045\n&gt;&gt; And this is one of those annoying\nthings where the script technically\n\n259\n00:13:25.045 --> 00:13:26.719\nworked, we didn't get an error back,\n\n260\n00:13:26.719 --> 00:13:29.020\nit just didn't behave the way\nthat we expected it to.\n\n261\n00:13:29.020 --> 00:13:31.921\nAnd so the completer has no idea of\nknowing that a problem happened.\n\n262\n00:13:31.921 --> 00:13:35.120\nWe're the ones who have to recognize it,\nand sometimes we miss that, right?\n\n263\n00:13:35.120 --> 00:13:36.300\nSo this is a tricky example.\n\n264\n00:13:36.300 --> 00:13:36.850\n&gt;&gt; Right, right.\n\n265\n00:13:36.850 --> 00:13:41.040\nAnd this is things that you will run into\nwhen you're scripting from time to time.\n\n266\n00:13:41.040 --> 00:13:44.500\nI was playing around with some scripts\nthat we're gonna show in the series last\n\n267\n00:13:44.500 --> 00:13:45.790\nnight just to make sure\nthey're looking good.\n\n268\n00:13:45.790 --> 00:13:48.121\nAnd I realized I had some crazy output.\n\n269\n00:13:48.121 --> 00:13:49.560\nWhy is that happening?\n\n270\n00:13:49.560 --> 00:13:50.720\nYou gotta debug that kinda thing.\n\n271\n00:13:50.720 --> 00:13:53.200\nAnd it's just as Don was\nkind of alluding to,\n\n272\n00:13:53.200 --> 00:13:56.310\nthe computer only does\nwhat we tell it to do.\n\n273\n00:13:56.310 --> 00:13:58.340\nAnd it uses the rules of\nwhich we've set up, and\n\n274\n00:13:58.340 --> 00:14:02.150\nif I don't know the rules quite right,\nI might get some wonky output.\n\n275\n00:14:02.150 --> 00:14:06.830\nSo let's jump back into the script and\nwe will get into insert mode\n\n276\n00:14:06.830 --> 00:14:09.550\nbecause I always forget to do that and\nit annoys me to no end.\n\n277\n00:14:09.550 --> 00:14:11.790\nAnd we'll block this back off.\n\n278\n00:14:11.790 --> 00:14:17.270\nWe'll come down here and\nwe will unblock this,\n\n279\n00:14:18.360 --> 00:14:21.900\nand you'll see now I want this\nto be one big string, okay?\n\n280\n00:14:21.900 --> 00:14:25.190\nI just want to say I'm\nwondering if this'll work.\n\n281\n00:14:25.190 --> 00:14:27.570\nNow I do have my single quotes in here,\nright here,\n\n282\n00:14:27.570 --> 00:14:32.960\nbut because I've bound it up with\ndouble quotes around the entire thing.\n\n283\n00:14:32.960 --> 00:14:36.990\nThat's another way to bind a complex\nvalue up, is use double quotes.\n\n284\n00:14:36.990 --> 00:14:43.690\nIt's gonna see this and it's gonna ignore\nthose special characters inside of that.\n\n285\n00:14:43.690 --> 00:14:49.050\nAll right, so now if I run it,\nit should work just like I want.\n\n286\n00:14:49.050 --> 00:14:52.980\nThere we go, now one string of text,\nthat's exactly what I was looking for.\n\n287\n00:14:52.980 --> 00:14:54.130\nAnd it gives me that.\n\n288\n00:14:54.130 --> 00:14:57.250\nAll my single quotations are still there,\nit didn't freak out and\n\n289\n00:14:57.250 --> 00:15:00.000\nremove those, I'm good to go.\n\n290\n00:15:00.000 --> 00:15:03.560\nOne more way in which we can work with\ncomplex, what if I wanna break that up,\n\n291\n00:15:03.560 --> 00:15:07.822\nwhat if I do want it to be,\nI'm wondering if this'll work, right?\n\n292\n00:15:07.822 --> 00:15:10.280\nEach one of those be a value in the array.\n\n293\n00:15:10.280 --> 00:15:13.550\nAgain, we're gonna employ\nour double quotations,\n\n294\n00:15:13.550 --> 00:15:16.360\nbut we're just gonna get a little\nbound happy with it here.\n\n295\n00:15:16.360 --> 00:15:17.565\nLet me comment this back out.\n\n296\n00:15:17.565 --> 00:15:21.978\nAnd go down here and un-comment this one.\n\n297\n00:15:23.100 --> 00:15:29.190\nAnd you'll notice what I've done here is,\nlike Don was saying before, just get into\n\n298\n00:15:29.190 --> 00:15:35.340\nthe habit of putting quotes around things\nyou want to be confined as an entity.\n\n299\n00:15:35.340 --> 00:15:36.020\nAnd that will help you.\n\n300\n00:15:36.020 --> 00:15:38.754\nNow since I'm using single\nquotes inside of that identity,\n\n301\n00:15:38.754 --> 00:15:41.220\nI don't wanna reuse single quotes again.\n\n302\n00:15:41.220 --> 00:15:46.094\nTrust me, that is a rabbit hole you\ndon't wanna go down cuz it gets crazy.\n\n303\n00:15:46.094 --> 00:15:47.954\nSo the easier way to do it is just say,\n\n304\n00:15:47.954 --> 00:15:51.250\nput double quotes about anything\nthat I want to bind up.\n\n305\n00:15:51.250 --> 00:15:53.810\nSo I put double quotes around I'm,\ndouble quotes around wondering,\n\n306\n00:15:53.810 --> 00:15:56.386\ndouble quotes around if,\nthis'll, and work.\n\n307\n00:15:56.386 --> 00:16:01.217\nSo now these should show up as their\nown value inside of the variable from\n\n308\n00:16:01.217 --> 00:16:02.031\nthe array.\n\n309\n00:16:02.031 --> 00:16:05.230\nHere we go, fingers crossed yet again,\nDon, I thank you for your help.\n\n310\n00:16:05.230 --> 00:16:07.140\nHe's over there just [SOUND]\nLike this the whole time,\n\n311\n00:16:07.140 --> 00:16:08.339\nyou can't save this off camera.\n\n312\n00:16:08.339 --> 00:16:11.380\n&gt;&gt; [LAUGH]\n&gt;&gt; And there we go,\n\n313\n00:16:11.380 --> 00:16:13.000\nI'm wondering if this will work.\n\n314\n00:16:13.000 --> 00:16:15.140\nSo, we're given complex values.\n\n315\n00:16:15.140 --> 00:16:17.540\nGiven those tricky, a little sticky.\n\n316\n00:16:17.540 --> 00:16:20.820\nBut, if you just learning some of\nthe rules in which I've shown you today,\n\n317\n00:16:20.820 --> 00:16:24.780\nmaybe you can bypass some of that and\nmake it more like what you'd expect.\n\n318\n00:16:26.730 --> 00:16:31.050\nOkay, let's talk about variable values,\nright?\n\n319\n00:16:31.050 --> 00:16:34.700\nSo, so\nfar what we've seen as far as the values,\n\n320\n00:16:34.700 --> 00:16:38.060\nis a list of things that I've defined,\nright?\n\n321\n00:16:38.060 --> 00:16:43.800\nI've said, states, I've made a string of\ntext, I've broken up strings of text.\n\n322\n00:16:43.800 --> 00:16:48.060\nBut what, what if I just wanted\nto call from a variable?\n\n323\n00:16:48.060 --> 00:16:50.810\nCan I do that?\nWell guess what, I sure as heck can.\n\n324\n00:16:50.810 --> 00:16:51.687\nAnd actually,\n\n325\n00:16:51.687 --> 00:16:55.744\nit solves one of the previous problems\nwe had with the complex strings.\n\n326\n00:16:55.744 --> 00:16:59.982\nThe last one we actually did,\nI'm wondering if this will work, right?\n\n327\n00:16:59.982 --> 00:17:00.610\nI'll show you what I mean.\n\n328\n00:17:00.610 --> 00:17:04.230\nWe'll play around with this script really\nquickly, and we'll see how it works and\n\n329\n00:17:04.230 --> 00:17:07.380\nthen we'll see how this could have\nactually been our solution for\n\n330\n00:17:07.380 --> 00:17:09.130\nour previous problem.\n\n331\n00:17:09.130 --> 00:17:09.680\nSo let's take a look,\n\n332\n00:17:09.680 --> 00:17:14.850\nit is going to be them inside there\ndo I need to maybe I just cad it.\n\n333\n00:17:14.850 --> 00:17:18.070\nIt is called four variable list.\n\n334\n00:17:18.070 --> 00:17:22.190\nFour dash four variable [INAUDIBLE].\n\n335\n00:17:22.190 --> 00:17:22.980\nAnd here we go.\n\n336\n00:17:22.980 --> 00:17:30.150\nWhat I've done is I've created a variable\nCalled listy, right here for my list.\n\n337\n00:17:30.150 --> 00:17:30.840\nI like it being listy.\n\n338\n00:17:30.840 --> 00:17:35.100\nI almost went with listy mclistface, but\nI thought that was a bit verbose, so\n\n339\n00:17:35.100 --> 00:17:36.250\nI kept it short, right?\n\n340\n00:17:36.250 --> 00:17:42.200\nAnd then I made a list, just like you do,\nlike we've seen in variables.\n\n341\n00:17:42.200 --> 00:17:48.490\nI just made this string, bound it in\nquotations, and there's my variable.\n\n342\n00:17:48.490 --> 00:17:51.450\nListing now equals this list of states.\n\n343\n00:17:51.450 --> 00:17:54.410\nNow the cool thing is when\nI pass that list to the for\n\n344\n00:17:54.410 --> 00:17:57.090\nloop, it goes, I got a list.\n\n345\n00:17:57.090 --> 00:17:59.375\nI'm gonna break each one\nof those variables up or.\n\n346\n00:17:59.375 --> 00:18:03.075\nPart of those values in that\nstring up into an array.\n\n347\n00:18:03.075 --> 00:18:04.075\nSo very, very cool.\n\n348\n00:18:04.075 --> 00:18:05.835\nSo here we see to call that.\n\n349\n00:18:05.835 --> 00:18:06.855\nSo if you want to call.\n\n350\n00:18:06.855 --> 00:18:08.395\nThis is the whole purpose of this.\n\n351\n00:18:08.395 --> 00:18:12.295\nIs if you want to call\na variable as your list.\n\n352\n00:18:12.295 --> 00:18:17.345\nSo all you have to do is modify your\nlist in the future to make it change.\n\n353\n00:18:18.500 --> 00:18:21.920\nWhich is a whole lot easier\nthan going in maybe making\n\n354\n00:18:21.920 --> 00:18:26.390\ncrazy changes throughout four loops that\nyou've salt and peppered into your script.\n\n355\n00:18:26.390 --> 00:18:27.810\nThis is a better way to do it.\n\n356\n00:18:27.810 --> 00:18:29.370\nJust make a variable\nwith all those values and\n\n357\n00:18:29.370 --> 00:18:31.740\nanytime you change those values\njust change the variable out.\n\n358\n00:18:31.740 --> 00:18:34.940\nThat's it.\nAnd then you just say four var one n and\n\n359\n00:18:34.940 --> 00:18:35.798\nthen reference.\n\n360\n00:18:35.798 --> 00:18:40.530\nYour variable, $listy, and then do,\njust like what we've done before.\n\n361\n00:18:40.530 --> 00:18:44.200\nSO I should get this same kind of\noutput that I did when I did for\n\n362\n00:18:44.200 --> 00:18:48.560\nvar 1 in Alabama, Alaska,\nArkansas, and so on and so forth.\n\n363\n00:18:49.960 --> 00:18:54.580\nNow I just say for\nvar 1 in listy That's how it works.\n\n364\n00:18:54.580 --> 00:18:57.490\nLets run this guy and check it out here,\n\n365\n00:18:57.490 --> 00:19:02.700\nfour underscore variable list,\nthere we go same output that we get there.\n\n366\n00:19:04.300 --> 00:19:07.740\nThen all the rules apply when\nit comes to variables, so\n\n367\n00:19:07.740 --> 00:19:11.090\nyou might want to make a list of\nvariables, you could do that as well.\n\n368\n00:19:12.610 --> 00:19:13.240\nHow?\nYou start\n\n369\n00:19:13.240 --> 00:19:16.330\ntaking what we've learned\nbuild off that foundation and\n\n370\n00:19:16.330 --> 00:19:20.020\njust start pumping it into your\nscripts and see how they work.\n\n371\n00:19:20.020 --> 00:19:23.490\nIt's a lot of fun and\nit can be very very helpful.\n\n372\n00:19:23.490 --> 00:19:24.950\n&gt;&gt; And it's always interesting,\n\n373\n00:19:24.950 --> 00:19:28.610\na lot of times our values are already in a\nvariable, so it makes sense to be able to\n\n374\n00:19:28.610 --> 00:19:31.690\nreuse that but because the four\nstatement requires its own variable,\n\n375\n00:19:31.690 --> 00:19:33.140\nwe're having the\n&gt;&gt; You know,\n\n376\n00:19:33.140 --> 00:19:35.720\nstick one variable into another,\nseems a little wierd, but\n\n377\n00:19:35.720 --> 00:19:38.350\nit is a very temporary thing done\nright there inside of that loop.\n\n378\n00:19:38.350 --> 00:19:40.190\nAnd then it does it's job and it gets out.\n\n379\n00:19:40.190 --> 00:19:41.390\nSo it's pretty straight forward.\n\n380\n00:19:41.390 --> 00:19:43.040\n&gt;&gt; Yeah, it's very straight forward.\n\n381\n00:19:43.040 --> 00:19:46.355\nIf you watch the variable show and\nhow we make variables Like I said,\n\n382\n00:19:46.355 --> 00:19:47.765\nall those rules apply.\n\n383\n00:19:47.765 --> 00:19:49.425\nNow we're just kinda taking that and\n\n384\n00:19:49.425 --> 00:19:52.285\nmarrying it with your loop,\nokay, very cool.\n\n385\n00:19:52.285 --> 00:19:56.275\n&gt;&gt; Now, in all of these examples we kinda\nhad a very specific list that we were\n\n386\n00:19:56.275 --> 00:19:57.095\nlooking for, right?\n\n387\n00:19:57.095 --> 00:20:00.180\nBut sometimes,\nit's not exactly like that, right?\n\n388\n00:20:00.180 --> 00:20:05.625\nWe might use something like a wild card to\ngrab a more diverse range of list entries.\n\n389\n00:20:05.625 --> 00:20:06.585\nCan you show us an example of that?\n\n390\n00:20:06.585 --> 00:20:10.240\n&gt;&gt; Yeah, yeah, that's exactly right,\nsometimes we're not 100% sure.\n\n391\n00:20:10.240 --> 00:20:14.380\n&gt;&gt; Of what it is that we want to feeds,\nwe might know where some variables are,\n\n392\n00:20:14.380 --> 00:20:18.150\nthings that we want to feed as a list are,\nbut either listing them out\n\n393\n00:20:19.180 --> 00:20:23.500\nby hand would be way too much work or\nagain we just,\n\n394\n00:20:23.500 --> 00:20:27.530\naren't aware of all the factors that\nwould be involved in those variables.\n\n395\n00:20:27.530 --> 00:20:28.930\nSo we can use wild card right?\n\n396\n00:20:28.930 --> 00:20:33.800\nWhich is, one of the greatest things\nabout using Linux and Linux type systems,\n\n397\n00:20:33.800 --> 00:20:35.620\nbecause they have great wild card and\n\n398\n00:20:35.620 --> 00:20:40.680\nwe can do it with file globbing which is\nexactly the example I'm gonna use here.\n\n399\n00:20:40.680 --> 00:20:45.320\nIt, that wild card just opens up my\nscript to be extremely, much more\n\n400\n00:20:45.320 --> 00:20:50.200\npowerful in a way, that it would take\nme as a human a long time to work out,\n\n401\n00:20:50.200 --> 00:20:53.487\nall right, so\nI can just use a wild card for that.\n\n402\n00:20:53.487 --> 00:20:56.210\nSo let's take a look,\nI'll make some real estate here,\n\n403\n00:20:56.210 --> 00:20:58.130\ngo back to the top of the screen.\n\n404\n00:20:58.130 --> 00:21:05.482\nWe've got this cat for _wildcards.sh,\nlet's take a look inside of this guy.\n\n405\n00:21:05.482 --> 00:21:09.857\nIt is starting to get a little more\ncomplex, because I wanna take us out of\n\n406\n00:21:09.857 --> 00:21:14.590\nthe cradle, move us to walking,\nmaybe even run a little bit later.\n\n407\n00:21:14.590 --> 00:21:18.770\nBut here, I have said for file in,\nand I've given it a directory.\n\n408\n00:21:19.850 --> 00:21:22.050\nSo it's gonna look in the directory.\n\n409\n00:21:22.050 --> 00:21:26.220\nYou'll notice at the end of this\ndirectory, I've got this star,\n\n410\n00:21:26.220 --> 00:21:28.570\nwhich is a wild card, wild card mask.\n\n411\n00:21:28.570 --> 00:21:32.030\nCould have been a question mark,\nand all the stuff, and\n\n412\n00:21:32.030 --> 00:21:34.530\nwe'll talk more about wild cards and\nthings of that nature.\n\n413\n00:21:34.530 --> 00:21:37.710\nWe've kind of hinted at them, but\nwhen we get into red jacks, man,\n\n414\n00:21:37.710 --> 00:21:40.760\nwe're gonna really bust the lid\noff of wild card stuff.\n\n415\n00:21:40.760 --> 00:21:46.560\nBut here, I'm just using that star value,\nfor the wildcard of whatever you want.\n\n416\n00:21:46.560 --> 00:21:52.820\nHowever big or however small, whether it\nbe taller or short, fat or skinny, right?\n\n417\n00:21:52.820 --> 00:21:55.230\nI want it, no matter what it is.\n\n418\n00:21:55.230 --> 00:21:57.810\nAnd then I've also given it another,\nso I'm making a list.\n\n419\n00:21:57.810 --> 00:22:01.690\nI've actually made one list out of that,\nthat wildcard variable,\n\n420\n00:22:01.690 --> 00:22:04.370\nwhich is gonna be whatever's\nin that directory.\n\n421\n00:22:04.370 --> 00:22:07.870\nProbably gonna be quite a few values since\nwe created quite a few scripts in that\n\n422\n00:22:07.870 --> 00:22:10.640\nShell script basics folder.\n\n423\n00:22:10.640 --> 00:22:13.390\nBut I've also got this one,\nhome/dlowrie/bugs.txt.\n\n424\n00:22:13.390 --> 00:22:17.220\nNow, I've intentionally put that\nthere because it does not exist,\n\n425\n00:22:17.220 --> 00:22:19.440\nthat file is not in that directory.\n\n426\n00:22:19.440 --> 00:22:21.086\nSo I want to see what\nhappens when it breaks,\n\n427\n00:22:21.086 --> 00:22:22.955\nbecause I don't wanna show\nyou just how it works,\n\n428\n00:22:22.955 --> 00:22:25.914\na lot of times I want to show you as well\nas, what happens when it doesn't work.\n\n429\n00:22:25.914 --> 00:22:30.978\nSo, I've actually made a conditional\nstatement, to work with those conditions.\n\n430\n00:22:30.978 --> 00:22:32.090\n[LAUGH] How about that?\n\n431\n00:22:32.090 --> 00:22:37.324\nSo, I say, for those files,\nin these two values in my array,\n\n432\n00:22:37.324 --> 00:22:41.451\ndo, if the file is a directory,\nthen echo file,\n\n433\n00:22:41.451 --> 00:22:47.516\ngive me that actual value of that\nvariable and tell me it is a directory.\n\n434\n00:22:47.516 --> 00:22:49.904\nSo it's actually gonna give me,\nI can truncate this, but\n\n435\n00:22:49.904 --> 00:22:51.925\nthat would take way too much more time.\n\n436\n00:22:51.925 --> 00:22:54.740\nIt's gonna give me\nhome/dlowrie/ShellScripts file name, and\n\n437\n00:22:54.740 --> 00:23:02.160\nit's gonna say, is a directory, if it is\na directory, elif, if the file is a file.\n\n438\n00:23:02.160 --> 00:23:06.397\nIf that variable value is actually a file\nand not a directory, or anything else,\n\n439\n00:23:06.397 --> 00:23:11.413\nthen, echo \"$file is a file\",\nso echo /home/dlowrie/,\n\n440\n00:23:11.413 --> 00:23:15.950\nsubscript basics, and whatever that file\nname is, and it's gonna say \"is a file\".\n\n441\n00:23:15.950 --> 00:23:18.900\nElse, say echo \"$file doesn't exist\", so\n\n442\n00:23:18.900 --> 00:23:23.470\nwhatever value I fed you, let me know\nwhat that is, so that I can see it and\n\n443\n00:23:23.470 --> 00:23:26.630\nthen tell me its It doesn't exist,\nit's not there.\n\n444\n00:23:26.630 --> 00:23:29.237\nIt's not a file and\nit's not a directory and it doesn't exist.\n\n445\n00:23:29.237 --> 00:23:30.200\nBut that's how it works.\n\n446\n00:23:30.200 --> 00:23:32.670\nBlocked it off, don't forget my feed,\ndon't forget my done.\n\n447\n00:23:32.670 --> 00:23:34.790\nOtherwise, things aren't\ngonna work very well.\n\n448\n00:23:34.790 --> 00:23:41.240\nSo if I fire this off,\nsay for_wildcards.xh and there we go.\n\n449\n00:23:41.240 --> 00:23:43.950\nIt iterates through that directory.\n\n450\n00:23:43.950 --> 00:23:46.910\nLooking at each thing in there,\nwhere is a quite a bit of information,\n\n451\n00:23:46.910 --> 00:23:48.479\nwhere goes my mouse, there it goes.\n\n452\n00:23:48.479 --> 00:23:53.881\nIt says, thisscript.sh is a file,\nthat's correct, it is a file.\n\n453\n00:23:53.881 --> 00:24:00.553\nIs a file got a couple of directories is\na directory, we'll get to that later.\n\n454\n00:24:00.553 --> 00:24:03.745\nIs a directory,\nscript control is a directory And\n\n455\n00:24:03.745 --> 00:24:08.890\nthen at the very end it says,\nhome/dlowrie/bugs.text doesn't exist.\n\n456\n00:24:08.890 --> 00:24:12.420\nSo it cut all my conditional,\nso I was even able to take\n\n457\n00:24:12.420 --> 00:24:15.970\nconditional arguments and\nthrow them inside of my loop, all right?\n\n458\n00:24:15.970 --> 00:24:17.850\nBecause it's just another\nblock of commands,\n\n459\n00:24:17.850 --> 00:24:19.910\nwhich has a block of commands in it.\n\n460\n00:24:19.910 --> 00:24:22.110\nSo you can start nesting things together,\nit gets really, really cool.\n\n461\n00:24:23.450 --> 00:24:27.570\n&gt;&gt; Now, the way you've been doing this so\nfar is that you're really providing,\n\n462\n00:24:27.570 --> 00:24:32.355\nwell in the beginning you were doing it by\nhand by saying four, whatever variable,\n\n463\n00:24:32.355 --> 00:24:34.720\nn, and doing this specific list, right.\n\n464\n00:24:34.720 --> 00:24:36.910\nAnd if this list gets really big,\n\n465\n00:24:36.910 --> 00:24:39.980\nfeeding off a file system like this\nis a great way to grab it if it's\n\n466\n00:24:39.980 --> 00:24:44.755\nfiles that we're working with, but\none of it's a range of numbers, right?\n\n467\n00:24:44.755 --> 00:24:45.360\n&gt;&gt; Mm-hm.\n\n468\n00:24:45.360 --> 00:24:51.060\n&gt;&gt; I want to reach out and\nquery across a certain amount of time and\n\n469\n00:24:51.060 --> 00:24:54.710\nso I might have a numerical\nvalue that this will increase.\n\n470\n00:24:54.710 --> 00:24:56.850\nCan we use range values or anything\nto shorten that and make it easier?\n\n471\n00:24:56.850 --> 00:25:00.370\n&gt;&gt; Yeah, and it is a wonderful thing,\nbuddy let me tell you what\n\n472\n00:25:00.370 --> 00:25:04.260\nThere's a few things inside of Linux\nthat will allow you to do ranges, and\n\n473\n00:25:04.260 --> 00:25:08.930\nwe're gonna pull from that, and\nput it in here, and then go, how bout you\n\n474\n00:25:08.930 --> 00:25:13.320\nguys just have a conversation, and\nsee if you can collaborate on some stuff.\n\n475\n00:25:13.320 --> 00:25:15.950\nSo that's what we're gonna do.\nLet's take a look at how that works\n\n476\n00:25:15.950 --> 00:25:17.420\nitself out.\n\n477\n00:25:17.420 --> 00:25:21.870\nAnd I've got this lovely,\nthis isn't just theoretical.\n\n478\n00:25:21.870 --> 00:25:23.510\nThis is something you might actually use.\n\n479\n00:25:23.510 --> 00:25:28.070\nI created a ping sweeping utility,\nusing it for a loop, so\n\n480\n00:25:28.070 --> 00:25:32.960\nthat I can actually look throughout\nmy network, ping machines, and\n\n481\n00:25:32.960 --> 00:25:40.150\nping a range of machines, from x to y, and\nsee which ones actually return a value.\n\n482\n00:25:40.150 --> 00:25:41.080\nI can say.\n\n483\n00:25:41.080 --> 00:25:42.415\nIt responded.\n\n484\n00:25:42.415 --> 00:25:43.450\nIt's alive.\n\n485\n00:25:43.450 --> 00:25:46.340\nNow my script is going to do that for\nme and\n\n486\n00:25:46.340 --> 00:25:50.750\nmake it a whole lot easier than\nme having to go ping 192.168.0.1.\n\n487\n00:25:50.750 --> 00:25:53.470\nOkay echo request good, then off we go.\n\n488\n00:25:53.470 --> 00:25:55.347\nPing one two three four five.\n\n489\n00:25:55.347 --> 00:25:59.580\nJust like Don said, just give it\nthe range, and let the script do the work.\n\n490\n00:25:59.580 --> 00:26:01.940\nLet that for\nloop iterate through that for me.\n\n491\n00:26:01.940 --> 00:26:03.660\nLet's see how that looks.\n\n492\n00:26:03.660 --> 00:26:07.720\nI will go ahead and vim cuz I think I need\nto change the IP address scheme cuz now\n\n493\n00:26:07.720 --> 00:26:08.420\nI'm on a different network.\n\n494\n00:26:08.420 --> 00:26:10.380\nSo we'll do this,\nwe'll call it for_psweep.sh.\n\n495\n00:26:10.380 --> 00:26:12.970\nSo here we go, inside of here.\n\n496\n00:26:12.970 --> 00:26:15.380\nLet me get in insert mode,\n\n497\n00:26:15.380 --> 00:26:19.990\ncuz yes, I'm definitely on\na different network than this.\n\n498\n00:26:19.990 --> 00:26:21.090\nBut we'll start at the beginning here.\n\n499\n00:26:21.090 --> 00:26:23.140\nFor, and I made my variable ip.\n\n500\n00:26:23.140 --> 00:26:24.840\nSo instead of var1 I want ip,\n\n501\n00:26:24.840 --> 00:26:28.690\nbecause that's a little more\ndescriptive of what's happening.\n\n502\n00:26:28.690 --> 00:26:31.460\nFor ip in, and now I have my range.\n\n503\n00:26:31.460 --> 00:26:34.480\nSo if you get the little\ncurly brace opening up, and\n\n504\n00:26:34.480 --> 00:26:39.360\nI do number dot dot another\nnumber that's in a sequence.\n\n505\n00:26:39.360 --> 00:26:44.010\nSo if I went one dot dot ten,\nthen it sees numbers one through ten.\n\n506\n00:26:44.010 --> 00:26:48.410\nIf I do 11 dot dot 30,\nthen it does 11 through 30,\n\n507\n00:26:48.410 --> 00:26:50.130\nso you start seeing, that's the range.\n\n508\n00:26:50.130 --> 00:26:52.740\nThis is again,\nmore regular expression stuff.\n\n509\n00:26:52.740 --> 00:26:55.630\nI'm kind of basically easing\nyou guys into the water for it,\n\n510\n00:26:55.630 --> 00:26:59.240\nas we get into more depth\nin that with a later show.\n\n511\n00:26:59.240 --> 00:27:03.700\nBut that's what's happening,\nwe're using regex to give it that range.\n\n512\n00:27:03.700 --> 00:27:08.620\nAnd then, once I specify that,\nnow that's my iteration, that's my array.\n\n513\n00:27:08.620 --> 00:27:13.340\nIs, okay, one is my first value, two is my\nsecond, three four five so on so forth.\n\n514\n00:27:13.340 --> 00:27:15.960\nThat's the array you've given me, but I\ndidn't have to type all of that stuff out.\n\n515\n00:27:15.960 --> 00:27:19.410\nI can use regex to give\nit that range value.\n\n516\n00:27:20.610 --> 00:27:23.680\nNow here is what I was talking about,\nI have to slow my script down.\n\n517\n00:27:23.680 --> 00:27:27.050\nThis script tends to run quite quickly.\n\n518\n00:27:27.050 --> 00:27:29.600\nAnd kinda freaks out when it does.\n\n519\n00:27:29.600 --> 00:27:33.760\nEven when it does freak out it'll still\ngive us basically the right output.\n\n520\n00:27:33.760 --> 00:27:36.080\nBut it's so dang fast that's what happens.\n\n521\n00:27:36.080 --> 00:27:40.210\nSo I put this sleep value in here to say\nthe first thing I want you to do is just\n\n522\n00:27:40.210 --> 00:27:41.130\ncalm down.\n\n523\n00:27:41.130 --> 00:27:41.900\nTake a breather.\n\n524\n00:27:41.900 --> 00:27:44.820\nLook around, think of a tree or something.\n\n525\n00:27:44.820 --> 00:27:45.685\nAnd then do this.\n\n526\n00:27:45.685 --> 00:27:46.770\n&gt;&gt; [LAUGH]\n&gt;&gt; And for\n\n527\n00:27:46.770 --> 00:27:48.980\na very small amount of time, 0.05 seconds.\n\n528\n00:27:50.700 --> 00:27:51.768\nAnd then I've got my ping command.\n\n529\n00:27:51.768 --> 00:27:54.950\nPing dash c, I wanna just throw\none ping at the IP range.\n\n530\n00:27:54.950 --> 00:27:58.370\nLet's go change that to our actual\nIP range here in the studio.\n\n531\n00:27:59.380 --> 00:28:05.990\nLet's see here, this will be 10.0.13,\nand then I have dot ip.\n\n532\n00:28:05.990 --> 00:28:10.880\nSo it's feeding that last\noctet value in from the for\n\n533\n00:28:10.880 --> 00:28:13.560\nloop's variable that we have created,\nright?\n\n534\n00:28:13.560 --> 00:28:17.520\nAnd then I'm gripping, looking for,\nif you an IOP or a ping command,\n\n535\n00:28:17.520 --> 00:28:19.400\nI guess the machine, if it responds.\n\n536\n00:28:19.400 --> 00:28:24.700\nOn Linux, or at least on my machine,\nthe first thing on that line is 64.\n\n537\n00:28:24.700 --> 00:28:27.990\nCuz I think it's the bytes that\nit sends or something like that.\n\n538\n00:28:27.990 --> 00:28:31.280\nSo I'm looking for that value and\nthen I'm cutting the field, looking for\n\n539\n00:28:31.280 --> 00:28:33.920\na certain field,\nwhich is the IP field that comes back.\n\n540\n00:28:33.920 --> 00:28:37.690\nSo if I get,\nthat I want to know what that IP was\n\n541\n00:28:37.690 --> 00:28:39.610\nthat actually returned a value, okay?\n\n542\n00:28:39.610 --> 00:28:44.300\nAnd then I'm just kinda sending that off\ninto the background with that ampersand.\n\n543\n00:28:44.300 --> 00:28:49.920\nOther than that, this is basically just a\nglorified ping that's now inside of my for\n\n544\n00:28:49.920 --> 00:28:52.210\nloop that's going to run through\nthat a bunch of times and\n\n545\n00:28:52.210 --> 00:28:53.820\nfind each individual machine.\n\n546\n00:28:53.820 --> 00:28:56.980\n&gt;&gt; And it's that ampersand that's\nhelping your command run so fast, right?\n\n547\n00:28:56.980 --> 00:28:58.870\n&gt;&gt; Mm-hm.\n&gt;&gt; If Daniel were to leave that ampersand\n\n548\n00:28:58.870 --> 00:29:01.320\nout, the ping command\nwould have to execute and\n\n549\n00:29:01.320 --> 00:29:04.280\ncomplete before the loop would be\nable to move to the next iteration.\n\n550\n00:29:04.280 --> 00:29:06.680\nBut with that ampersand,\nit can stick it in the background and for\n\n551\n00:29:06.680 --> 00:29:09.890\nsomething like ping that's really handy,\nbecause ping uses a timeout value.\n\n552\n00:29:09.890 --> 00:29:11.880\nWhich I think is two seconds?\n\n553\n00:29:11.880 --> 00:29:12.990\n&gt;&gt; Yeah, something like that.\n\n554\n00:29:12.990 --> 00:29:15.900\n&gt;&gt; So it'll send out a ping and it'll\nwait up to two seconds to get a response.\n\n555\n00:29:15.900 --> 00:29:19.530\nWell if it doesn't get a response that\nmeans your script would effectively stop\n\n556\n00:29:19.530 --> 00:29:21.700\nfor two seconds until\nit tried the next one.\n\n557\n00:29:21.700 --> 00:29:23.470\nBut because he sends it in\nthe background and keep going.\n\n558\n00:29:23.470 --> 00:29:28.050\nAnd that's why he was describing it as,\nthe script might be done, but\n\n559\n00:29:28.050 --> 00:29:30.420\nI'm still getting results\nbecause a ping has that delay.\n\n560\n00:29:30.420 --> 00:29:33.810\nSo be aware that the sleep command\nis really handy, not just here.\n\n561\n00:29:33.810 --> 00:29:37.050\nBut also we'll see later on,\nwhen we request user input and stuff.\n\n562\n00:29:37.050 --> 00:29:39.200\nYou wanna wait for\na user to type something.\n\n563\n00:29:39.200 --> 00:29:40.900\nAnd that stuff comes in really,\nreally handy.\n\n564\n00:29:40.900 --> 00:29:44.330\n&gt;&gt; Yeah, and this is definitely\na quick and dirty way of doing this.\n\n565\n00:29:44.330 --> 00:29:47.900\nIf you wanted it to be more robust\nyou would need the sleep command,\n\n566\n00:29:47.900 --> 00:29:49.030\nyou would take that ampersand off.\n\n567\n00:29:49.030 --> 00:29:53.260\nJust let it run as it normally does and\nlet it do its thing.\n\n568\n00:29:53.260 --> 00:29:56.390\nAnd it would come back more\nconsistently that way.\n\n569\n00:29:56.390 --> 00:29:58.220\nAnd if you got that kind of time, great.\n\n570\n00:29:58.220 --> 00:30:01.154\nI got a show to do and I'm running\na little on time so I'm leaving it in.\n\n571\n00:30:01.154 --> 00:30:02.180\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so\n\n572\n00:30:02.180 --> 00:30:03.200\nwe're on the right network.\n\n573\n00:30:03.200 --> 00:30:05.540\nLet's escape, and what do I do?\n\n574\n00:30:05.540 --> 00:30:07.210\nI pulled up a q, there we go.\n\n575\n00:30:07.210 --> 00:30:09.010\nAnd let's run it, let's see what happens.\n\n576\n00:30:09.010 --> 00:30:12.682\nFor underscore psweep.sh.\n\n577\n00:30:12.682 --> 00:30:17.160\nAnd it's actually going, it's going,\nit's going, it's looking for\n\n578\n00:30:17.160 --> 00:30:18.280\nmachines on this network.\n\n579\n00:30:18.280 --> 00:30:20.570\nI wonder if it'll find\nany other than my own?\n\n580\n00:30:20.570 --> 00:30:21.930\nMaybe I got the wrong\n[INAUDIBLE] there we go.\n\n581\n00:30:21.930 --> 00:30:25.500\nI'm starting to get values,\npumping them back out to my screen,\n\n582\n00:30:25.500 --> 00:30:27.680\nthat means the four loop is running.\n\n583\n00:30:27.680 --> 00:30:29.130\nI'm finding machines, it's done.\n\n584\n00:30:29.130 --> 00:30:33.530\nAnd as you can see I got one that didn't\nquite make it in on the tail end there, so\n\n585\n00:30:33.530 --> 00:30:35.500\nit gave me that odd output.\n\n586\n00:30:35.500 --> 00:30:38.180\nBut basically it ran almost perfectly.\n\n587\n00:30:38.180 --> 00:30:43.680\nIterated through one through 254,\nfound every time it returned a value.\n\n588\n00:30:43.680 --> 00:30:45.270\nIt gave me that to the screen.\n\n589\n00:30:45.270 --> 00:30:46.380\nAnd now I have a good list.\n\n590\n00:30:46.380 --> 00:30:49.290\nI could have output that using\nredirection at the end to a file I\n\n591\n00:30:49.290 --> 00:30:49.960\ncan go back and look.\n\n592\n00:30:49.960 --> 00:30:52.550\nThese are the machines that\nare alive today in my network.\n\n593\n00:30:52.550 --> 00:30:57.170\nAnd really simple utility and just using\nthat for loop to make that happen and\n\n594\n00:30:57.170 --> 00:30:58.790\nit was super easy.\n\n595\n00:30:58.790 --> 00:31:02.635\nAll right, well, I know that we've kind\nof scratched the surface on loops.\n\n596\n00:31:02.635 --> 00:31:04.230\n&gt;&gt; Mm-hm.\n&gt;&gt; We've had a chance to see a few\n\n597\n00:31:04.230 --> 00:31:06.670\ndifferent ways, but\nI know there's a heck of a lot more.\n\n598\n00:31:06.670 --> 00:31:07.570\nSo Daniel, I think we're gonna have\n\n599\n00:31:07.570 --> 00:31:09.260\nto break this one up into a multi-partner,\nright?\n\n600\n00:31:09.260 --> 00:31:10.780\n&gt;&gt; Man, yeah, there's no way around it.\n\n601\n00:31:10.780 --> 00:31:14.400\nIt's a lot of information to take in,\ncuz loops are a bit more complex than\n\n602\n00:31:14.400 --> 00:31:16.460\nthe other logical structures we've seen so\nfar.\n\n603\n00:31:16.460 --> 00:31:20.830\nPlus we have a few other styles\nthat we wanna look at for looping.\n\n604\n00:31:20.830 --> 00:31:23.660\nSo, we're definitely going\nto need that extra time.\n\n605\n00:31:23.660 --> 00:31:26.860\n&gt;&gt; All right, well, that puts us at\na pretty good spot to wrap this one up,\n\n606\n00:31:26.860 --> 00:31:29.860\nthough, but like Daniel said, make sure\nyou stay tuned because in part two,\n\n607\n00:31:29.860 --> 00:31:31.510\nwe're going to see some\nmore advanced loops.\n\n608\n00:31:31.510 --> 00:31:34.930\nWhat we saw here in this episode, though,\nI think was a really great sampling of\n\n609\n00:31:34.930 --> 00:31:38.590\ntypical, traditional loops and you'll\nfind that these are incredibly useful for\n\n610\n00:31:38.590 --> 00:31:40.260\nany number of uses that are out there.\n\n611\n00:31:40.260 --> 00:31:43.090\nSo, definitely something you'll make\nuse of out there in the real world.\n\n612\n00:31:43.090 --> 00:31:44.980\nBut, Daniel thank you for showing that.\n\n613\n00:31:44.980 --> 00:31:47.650\n&gt;&gt; And, for you guys out there in TV land,\nthank you guys for watching.\n\n614\n00:31:47.650 --> 00:31:48.830\nWe certainly appreciate it.\n\n615\n00:31:48.830 --> 00:31:52.040\nStay tuned because we got more Linux\nshell scripting basics coming up.\n\n616\n00:31:52.040 --> 00:31:53.420\nBut, for now, signing off.\n\n617\n00:31:53.420 --> 00:31:55.240\nFor IT Pro TV I'm Don Pezet.\n\n618\n00:31:55.240 --> 00:31:56.520\n&gt;&gt; And, I'm Daniel Lowrie.\n\n619\n00:31:56.520 --> 00:31:59.130\n&gt;&gt; And, we'll see you next time.\n\n620\n00:31:59.130 --> 00:32:05.026\n[MUSIC]\n\n621\n00:32:05.026 --> 00:32:08.102\n&gt;&gt; Thank you for watching, ITPro TV.\n\n",
          "vimeoId": "237100458"
        },
        {
          "description": "In this episode, Daniel and Don continue their\ndiscussion on loops in bash scripts. Here they cover changing\nthe Internal Field Separator(IFS) for various reasons, “C-style\nfor loops”, “while loops”, and “until loops”.",
          "length": "1871",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-2-loops_pt_2-100517-PGM.00_30_55_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-2-loops_pt_2-100517-PGM.00_30_55_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-2-loops_pt_2-100517-PGM.00_30_55_25.Still001-sm.jpg",
          "title": "Loops Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.240 --> 00:00:01.180\nWelcome to ITPROTV.\n\n2\n00:00:01.180 --> 00:00:03.444\nI'm your host, Don Pezet.\n\n3\n00:00:03.444 --> 00:00:07.947\n[CROSSTALK]\nYou're\n\n4\n00:00:07.947 --> 00:00:12.733\nwatching ITPROTV.\n\n5\n00:00:12.733 --> 00:00:15.673\nAll right ladies and gentlemen,\nit's that time again, time for\n\n6\n00:00:15.673 --> 00:00:17.020\nanother episode of ITPROTV.\n\n7\n00:00:17.020 --> 00:00:18.790\nI'm your host, Don Pezet,\n\n8\n00:00:18.790 --> 00:00:22.050\nback with another episode of\nLinux Shell Scripting Basics.\n\n9\n00:00:22.050 --> 00:00:27.600\nAnd in this episode, we're looping\nback on the subject of loops.\n\n10\n00:00:27.600 --> 00:00:30.420\nThat's right, this is part two for\nour looping episode.\n\n11\n00:00:30.420 --> 00:00:33.813\nWe'll see how many times I can circle\naround here in my own intro [LAUGH].\n\n12\n00:00:33.813 --> 00:00:35.370\n[LAUGH] Don's stuck in an infinite loop.\n\n13\n00:00:35.370 --> 00:00:36.050\nThat's right.\nAnd\n\n14\n00:00:36.050 --> 00:00:38.720\ndoubling back to help us with this topic,\nwe've got Mr.\n\n15\n00:00:38.720 --> 00:00:40.360\nDaniel Lowrie right here in the studio.\n\n16\n00:00:40.360 --> 00:00:42.190\nDaniel, thank you for joining us.\n\n17\n00:00:42.190 --> 00:00:43.620\nMan, it's such a pleasure to be back.\n\n18\n00:00:43.620 --> 00:00:45.690\nThank you and the audience for\nwatching as well.\n\n19\n00:00:45.690 --> 00:00:51.970\nAnd yes, we are back for loops, as Don has\nalluded to, our second iteration of loops.\n\n20\n00:00:51.970 --> 00:00:53.442\nGod help us,\nI hope we don't get to a third.\n\n21\n00:00:53.442 --> 00:00:55.170\n[LAUGH] Who knows what it'll be?\n\n22\n00:00:55.170 --> 00:00:58.130\nIt'll be a 30 minute intro and two seconds\n[INAUDIBLE] It'll be like that movie\n\n23\n00:00:58.130 --> 00:01:02.180\nGroundhog's Day where every day we wake\nup and it's that Sonny and Cher song and\n\n24\n00:01:02.180 --> 00:01:03.639\nyou play in the, yeah.\n\n25\n00:01:03.639 --> 00:01:05.580\n[INAUDIBLE] No.\n\n26\n00:01:05.580 --> 00:01:06.850\nI woke up again.\n\n27\n00:01:06.850 --> 00:01:09.460\nHere we go, but\nyes it is loop time it is loop time.\n\n28\n00:01:09.460 --> 00:01:13.300\nNow, in the last episode we looked\nat four loops quite extensively,\n\n29\n00:01:13.300 --> 00:01:16.480\nwe are going to continue on\na little bit more with for loops.\n\n30\n00:01:16.480 --> 00:01:19.310\nBut, I did want to,\nright out of the gates,\n\n31\n00:01:19.310 --> 00:01:23.940\nI wanted to introduce you to a concept\ncalled the IFS, its something that\n\n32\n00:01:23.940 --> 00:01:28.495\nyou might work with inside of loops just\nanywhere in general inside of you scripts.\n\n33\n00:01:28.495 --> 00:01:33.480\nWe're gonna look it in a looping\ncontext but for this [INAUDIBLE] I\n\n34\n00:01:33.480 --> 00:01:37.430\ndo want to make you guys aware of it so\nthat you can work with it in your loops.\n\n35\n00:01:37.430 --> 00:01:40.860\nAnd the IFS is what's known as\nthe Internal Field Separator.\n\n36\n00:01:42.570 --> 00:01:44.350\nGreat, that sounds awesome.\n\n37\n00:01:44.350 --> 00:01:45.140\nGood to know.\n\n38\n00:01:45.140 --> 00:01:45.980\nYeah, really is.\n\n39\n00:01:45.980 --> 00:01:49.130\nI just immersed your\nlives a whole lot more.\n\n40\n00:01:49.130 --> 00:01:50.490\nWhat the heck is the IFS?\n\n41\n00:01:50.490 --> 00:01:51.030\nWhat is it?\n\n42\n00:01:51.030 --> 00:01:52.300\nWhy is it important?\n\n43\n00:01:52.300 --> 00:01:57.940\nBasically, it's the thing that says this\nis a value and there is something there\n\n44\n00:01:57.940 --> 00:02:03.310\nthat let's me know that the next thing is\nanother value, it's not the same thing.\n\n45\n00:02:03.310 --> 00:02:09.630\nTypically, we see this as maybe tab,\na space, or a new line.\n\n46\n00:02:09.630 --> 00:02:13.150\nA new line being, I hit the return and\nit dropped down to another line.\n\n47\n00:02:13.150 --> 00:02:15.430\nThere's an actual character there.\n\n48\n00:02:15.430 --> 00:02:17.210\nWe don't see it,\nthey're white-space characters.\n\n49\n00:02:17.210 --> 00:02:20.525\nWe don't see them, but they are there.\n\n50\n00:02:20.525 --> 00:02:26.242\nAnd sometimes, I need to work with\nthe IFS because my script isn't\n\n51\n00:02:26.242 --> 00:02:32.282\niterating correctly because it's\nlooking for the wrong type of IFS.\n\n52\n00:02:32.282 --> 00:02:36.350\nSo that's when this thing becomes\nimportant for us as far as loops go.\n\n53\n00:02:36.350 --> 00:02:41.110\nSo ever now and then, we'll need to\nchange the IFS to be something that we\n\n54\n00:02:41.110 --> 00:02:46.290\nexpect to see to work, it correctly\nworth the output of our loops.\n\n55\n00:02:46.290 --> 00:02:49.640\nSo now that the theory's behind us,\nlet's take a look at the practicum and\n\n56\n00:02:49.640 --> 00:02:53.720\ngo into depth on what that actually\nlooks like in the real world.\n\n57\n00:02:53.720 --> 00:02:54.870\nSo I'll go back to my screen.\n\n58\n00:02:54.870 --> 00:02:56.780\nYou'll notice that our setup\nis a little bit different.\n\n59\n00:02:56.780 --> 00:02:59.220\nIf you've been following us, we've decided\nthat we're going to go a little different,\n\n60\n00:02:59.220 --> 00:03:01.740\nand we're going to have\nour script on one side,\n\n61\n00:03:01.740 --> 00:03:04.780\nlooking at the code of it, and\nthen we'll run it on the other side so\n\n62\n00:03:04.780 --> 00:03:08.900\nthat we can just bounce back and\nforth, maybe, make a cooler visual.\n\n63\n00:03:08.900 --> 00:03:10.260\nSo let's go over here.\n\n64\n00:03:10.260 --> 00:03:11.693\nWe're going to do, take a look at this.\n\n65\n00:03:11.693 --> 00:03:19.677\nIt's going to be called vim I of 4_ifs.sh.\n\n66\n00:03:19.677 --> 00:03:22.280\nAnd there we go,\nhere's the code to this script.\n\n67\n00:03:23.780 --> 00:03:28.202\nAgain, shebang, and\nyou'll know I've got a file that's called\n\n68\n00:03:28.202 --> 00:03:33.530\nHolidayShopping.txt, which\nI am reading from and\n\n69\n00:03:33.530 --> 00:03:38.890\nI'm putting those values into\na variable called file, okay?\n\n70\n00:03:38.890 --> 00:03:42.770\nAnd then we'll get to this\nIFS business in due time.\n\n71\n00:03:42.770 --> 00:03:46.280\nBut if I run it like this with these\nlines combing it out, I'm doing for\n\n72\n00:03:46.280 --> 00:03:48.690\nitem in Cap that file.\n\n73\n00:03:48.690 --> 00:03:53.700\nSo I just do my command substitution, run\ncap against that HolidayShopping.txt file,\n\n74\n00:03:53.700 --> 00:03:58.460\nand whatever the output is,\nuse those as my array.\n\n75\n00:03:58.460 --> 00:03:59.600\nAnd then do next item.\n\n76\n00:03:59.600 --> 00:04:03.800\nSo it's basically gonna give me\nthe items in my holiday shopping list\n\n77\n00:04:03.800 --> 00:04:06.850\nin a structured format, okay?\n\n78\n00:04:06.850 --> 00:04:10.148\nSo if I run this, if I say,\n\n79\n00:04:10.148 --> 00:04:16.810\n./for_if.sh, and I bang away, here we go.\n\n80\n00:04:16.810 --> 00:04:18.140\nIt says next item, tinsel.\n\n81\n00:04:18.140 --> 00:04:18.710\nGot to get that.\n\n82\n00:04:18.710 --> 00:04:20.000\nAll right, next item, tree.\n\n83\n00:04:20.000 --> 00:04:21.440\nYeah, definitely need a tree.\n\n84\n00:04:21.440 --> 00:04:23.590\nNext item, tree.\n\n85\n00:04:23.590 --> 00:04:25.440\nNext item, skirt.\n\n86\n00:04:25.440 --> 00:04:26.100\nTree skirt.\n\n87\n00:04:26.100 --> 00:04:27.920\nSo you start seeing the problem.\n\n88\n00:04:27.920 --> 00:04:34.260\nThe IFS separator here is set as a white\nspace, probably a space character.\n\n89\n00:04:34.260 --> 00:04:36.130\nBut I need it to be a new line.\n\n90\n00:04:36.130 --> 00:04:37.380\nAnd there's the problem,\n\n91\n00:04:37.380 --> 00:04:41.500\nit's not seeing the new line\ncharacter as my field separator.\n\n92\n00:04:41.500 --> 00:04:44.650\nSo each thing is getting is kinda\nof chopped up because of that.\n\n93\n00:04:44.650 --> 00:04:48.660\nAnd that's something we ran into in\nthe first part, where, if you had a space,\n\n94\n00:04:48.660 --> 00:04:52.350\nwe could put quote marks around it and\nit knew to ignore that space.\n\n95\n00:04:52.350 --> 00:04:54.700\nBut in this case, without the quote marks,\nit sees the space and\n\n96\n00:04:54.700 --> 00:04:56.500\nknows okay that is a field separator.\n\n97\n00:04:56.500 --> 00:04:59.630\nSo there's more than one way to\nsolve this problem then, right?\n\n98\n00:04:59.630 --> 00:05:00.240\nExactly, and\n\n99\n00:05:00.240 --> 00:05:03.920\nyou'll find that with scripting, there's\nusually more than one way to skin a cat.\n\n100\n00:05:03.920 --> 00:05:08.890\nThere's not always a right and wrong way\nto do it there's just your way and my way.\n\n101\n00:05:08.890 --> 00:05:13.440\nAnd maybe mine is maybe runs faster,\nbut maybe yours is easier to read\n\n102\n00:05:13.440 --> 00:05:16.210\nmaybe its more intuitive,\nmaybe the user experience is better.\n\n103\n00:05:16.210 --> 00:05:20.190\nWho knows, so that these things happen\nfrom time to time and I wanna give you\n\n104\n00:05:20.190 --> 00:05:24.200\nguys the options to be able to solve\nthe different problems as they come up.\n\n105\n00:05:24.200 --> 00:05:25.870\nThere are times when you'll go, man,\n\n106\n00:05:25.870 --> 00:05:31.620\nchanging the IFS is the exact right thing\nto do right here for this situation.\n\n107\n00:05:31.620 --> 00:05:33.540\nSo in this situation,\nthat's what we're gonna do.\n\n108\n00:05:33.540 --> 00:05:35.100\nWe're gonna grab this.\n\n109\n00:05:35.100 --> 00:05:40.340\nLet me cat that file quickly so you can\nsee what it looks like in the file.\n\n110\n00:05:40.340 --> 00:05:42.270\nCat HolidayShopping.\n\n111\n00:05:42.270 --> 00:05:46.180\nSo you can see it's in\nthat type of listing.\n\n112\n00:05:46.180 --> 00:05:50.550\nWhat I've got tinsel, tree, tree skirt,\ncandy canes, wrapping paper, bows,\n\n113\n00:05:50.550 --> 00:05:53.910\ncards, and toys, don't forget that, right?\n\n114\n00:05:53.910 --> 00:05:57.600\nBut it wasn't seeing that, it was seeing\na white space character as the separator.\n\n115\n00:05:57.600 --> 00:06:04.310\nSo when it got to tree space skirt,\nit thought, skirt is its next own value.\n\n116\n00:06:05.440 --> 00:06:09.760\nAnd it was treating any white\nspace character as the next thing.\n\n117\n00:06:09.760 --> 00:06:12.190\nSo here we go, we're going to\njump back into our script here,\n\n118\n00:06:12.190 --> 00:06:13.590\nwe're gonna do some modification.\n\n119\n00:06:13.590 --> 00:06:16.650\nI'm going to uncomment\nthese two lines here.\n\n120\n00:06:18.310 --> 00:06:21.430\nAnd what I've done is, and this is\na good practice, this is best practice.\n\n121\n00:06:21.430 --> 00:06:26.690\nYou don't have to do this, but I like to\ndo this when I modify the IFS because\n\n122\n00:06:26.690 --> 00:06:31.160\nI'm modifying something that\nis a global variable, okay?\n\n123\n00:06:31.160 --> 00:06:38.760\nAnd I might wanna reuse it in the normal\nsense later on in a more complex script.\n\n124\n00:06:38.760 --> 00:06:43.960\nSo a good idea at that point,\ntake the variable that it already is,\n\n125\n00:06:43.960 --> 00:06:47.580\nwhatever value that is, and\nput that in another variable.\n\n126\n00:06:47.580 --> 00:06:50.450\nI typically call it ifs_old, so\n\n127\n00:06:50.450 --> 00:06:53.790\nI've always kind of got\nthat saved off to the side.\n\n128\n00:06:53.790 --> 00:06:57.121\nThen when I want to change\nit back i say ifs =\n\n129\n00:06:57.121 --> 00:07:01.060\n$ifs_old now its back\nto the original thing.\n\n130\n00:07:01.060 --> 00:07:06.140\nSo whenever I'm done needing that new\nline as the IFS, I can then revert it and\n\n131\n00:07:06.140 --> 00:07:10.350\nnow everything else that relies on\nthe IFS sees it as the normal way.\n\n132\n00:07:10.350 --> 00:07:11.760\nSo, it's a good practice,\n\n133\n00:07:11.760 --> 00:07:15.170\nit's the best practice,\ndoing something like this, all right?\n\n134\n00:07:15.170 --> 00:07:18.180\nAgain, don't have to but you might find\nyourself in the weeds if you don't.\n\n135\n00:07:19.230 --> 00:07:23.300\nSo that gives us the actual\nmodification of the IFS.\n\n136\n00:07:23.300 --> 00:07:27.000\nIFS, just a variable equals dollar sign,\n\n137\n00:07:27.000 --> 00:07:31.320\nsingle quote, back slash,\nend single quote.\n\n138\n00:07:31.320 --> 00:07:35.800\nYou do need the dollar sign, you do need\nthe single quotes, that is a necessity for\n\n139\n00:07:35.800 --> 00:07:36.670\nchanging this thing.\n\n140\n00:07:36.670 --> 00:07:39.650\nIf I wanted it to be a colon, I could\nmake it a colon, I could make it a comma,\n\n141\n00:07:39.650 --> 00:07:41.390\nI could make it a semi colon.\n\n142\n00:07:41.390 --> 00:07:45.150\nBecause we have comma separated values,\nCSV-type files.\n\n143\n00:07:45.150 --> 00:07:47.430\nI could go in, change the IFS,\nmake it a comma.\n\n144\n00:07:47.430 --> 00:07:51.017\nAnd now, it's going to see after\nevery comma is another value.\n\n145\n00:07:51.017 --> 00:07:55.057\nWe also see this again with\nregex type stuff, as well, and\n\n146\n00:07:55.057 --> 00:07:58.368\ncommands that use that\ntype of functionality.\n\n147\n00:07:58.368 --> 00:08:00.596\nWe saw it with the cut\ncommand on my ping utility.\n\n148\n00:08:00.596 --> 00:08:01.643\nIt was cutting.\n\n149\n00:08:01.643 --> 00:08:05.749\nIt said dash f four that was\nsaying look at field four, but\n\n150\n00:08:05.749 --> 00:08:08.760\nI also put dash d, which was a delimiter.\n\n151\n00:08:08.760 --> 00:08:11.730\nWhich is basically its\nown version of the IFS.\n\n152\n00:08:11.730 --> 00:08:16.475\nMake it a single space,\nthat's what we're doing, same idea.\n\n153\n00:08:17.905 --> 00:08:19.785\nAnd now it should run through.\n\n154\n00:08:19.785 --> 00:08:23.915\nIf I now that I uncommented those\nthings let me do Esc+W, hit Enter.\n\n155\n00:08:23.915 --> 00:08:25.605\nAnd we'll rerun our command.\n\n156\n00:08:25.605 --> 00:08:30.065\nAnd I'll clear the screen, so\nI can start at the beginning here.\n\n157\n00:08:30.065 --> 00:08:31.755\nAnd rerun the command, where's that?\n\n158\n00:08:31.755 --> 00:08:33.070\nThere we go.\n\n159\n00:08:33.070 --> 00:08:35.110\nAnd now we get better output.\n\n160\n00:08:35.110 --> 00:08:39.330\nWe get tinsel, tree, tree skirt,\ncandy canes, wrapping paper, bows,\n\n161\n00:08:39.330 --> 00:08:40.870\ncards, and toys.\n\n162\n00:08:40.870 --> 00:08:42.230\nCuz I've changed the ifs to look for\n\n163\n00:08:42.230 --> 00:08:47.080\nthat new line, now it goes everything\non a line is a single value.\n\n164\n00:08:47.080 --> 00:08:50.390\nWhen I thin that new line,\nthat's when I get to the next value and\n\n165\n00:08:50.390 --> 00:08:51.840\nthat's gonna be my next value for\nmy array.\n\n166\n00:08:52.880 --> 00:08:56.520\nNow looking at this, you kinda\nhave to make that decision, right?\n\n167\n00:08:56.520 --> 00:08:58.580\nYeah.\nIs this the harder way to do it, or\n\n168\n00:08:58.580 --> 00:08:59.330\nwas the other way?\n\n169\n00:08:59.330 --> 00:09:03.960\nIt's changing your script versus changing\nthe behavior of the commands that\n\n170\n00:09:03.960 --> 00:09:04.640\nyou're using.\n\n171\n00:09:04.640 --> 00:09:07.150\nAnd like you said, Daniel,\nthere's not a right answer.\n\n172\n00:09:07.150 --> 00:09:09.350\nYou need to choose the way\nthat you want it to behave.\n\n173\n00:09:09.350 --> 00:09:12.050\nAnd remember if you're\ngonna be reusing the script\n\n174\n00:09:12.050 --> 00:09:14.120\nother places that that can be a challenge.\n\n175\n00:09:14.120 --> 00:09:17.820\nThat sometimes it is better to just change\nyour script because you might be running\n\n176\n00:09:17.820 --> 00:09:21.660\non a non POSIX compliant system that\ndoesn't recognize the IFS change or\n\n177\n00:09:21.660 --> 00:09:22.610\nsomething like that.\n\n178\n00:09:22.610 --> 00:09:24.510\nWhich, as long as you're in Bash,\nit should.\n\n179\n00:09:24.510 --> 00:09:25.970\nYeah.\nBut that's always something that could get\n\n180\n00:09:25.970 --> 00:09:27.130\nin the way.\n\n181\n00:09:27.130 --> 00:09:29.690\nAll right,\nnow the loop you just showed us.\n\n182\n00:09:29.690 --> 00:09:32.160\nWe're kinda doing our standard loops or\n\n183\n00:09:32.160 --> 00:09:34.160\nreally, Bash loops\nare what we've been doing.\n\n184\n00:09:34.160 --> 00:09:36.430\nYeah.\nI know there's other types of loops that\n\n185\n00:09:36.430 --> 00:09:38.610\nare out there that kinda move\naway from just Bash, right?\n\n186\n00:09:38.610 --> 00:09:39.970\nAnd that's exactly right.\n\n187\n00:09:39.970 --> 00:09:42.410\nYou gotta remember,\na lot of people that use Linux,\n\n188\n00:09:42.410 --> 00:09:47.550\nespecially back in the day,\ncome from a very strong C background.\n\n189\n00:09:47.550 --> 00:09:52.380\nAnd Bash is actually supposed to\nbe very C like in its structure,\n\n190\n00:09:52.380 --> 00:09:53.890\nin the way that it works.\n\n191\n00:09:53.890 --> 00:09:58.055\nAnd you'll find a lot of C ish type\nthings floating around inside of it.\n\n192\n00:09:58.055 --> 00:09:59.580\nAnd one of them is a type of loop.\n\n193\n00:09:59.580 --> 00:10:03.950\nIt is again a for loop but\nit's a C style for loop.\n\n194\n00:10:03.950 --> 00:10:09.140\nIt looks like, if you were to jump\nover and grab a C, a coding in C.\n\n195\n00:10:09.140 --> 00:10:10.340\nI want to learn C.\n\n196\n00:10:10.340 --> 00:10:13.420\nYou open it up and\nyou get to the section on loops and\n\n197\n00:10:13.420 --> 00:10:17.188\nthe first one it shows your is for\nloops, it's gonna look like this, so\n\n198\n00:10:17.188 --> 00:10:23.030\nBash does its own Bash style loops, but\nit also does C style loops as well.\n\n199\n00:10:23.030 --> 00:10:28.120\nSo if you do come over from that realm,\nit's a little easier for\n\n200\n00:10:28.120 --> 00:10:32.780\nyou to integrate into that environment,\nor maybe you just find this style of loop\n\n201\n00:10:32.780 --> 00:10:35.090\neasier to work with and\nit makes more sense to you.\n\n202\n00:10:35.090 --> 00:10:36.570\nAgain I like to give you guys options.\n\n203\n00:10:36.570 --> 00:10:38.840\nSo let's take a look at\nwhat that looks like.\n\n204\n00:10:38.840 --> 00:10:42.000\nI'm gonna clear our screens out.\n\n205\n00:10:42.000 --> 00:10:43.730\nLet me get out of this guy here.\n\n206\n00:10:44.880 --> 00:10:47.204\nAnd we will look at that loop.\n\n207\n00:10:47.204 --> 00:10:52.267\nIt is going to be that slash for, I don't\nwant to run it I just want to show it.\n\n208\n00:10:52.267 --> 00:10:55.963\n[LAUGH] Let's see here vim for\n\n209\n00:10:55.963 --> 00:11:01.560\nunderscore C style.sh and here we go.\n\n210\n00:11:01.560 --> 00:11:04.630\nA very basic C style loop going on here.\n\n211\n00:11:04.630 --> 00:11:07.160\nNow, you'll see a bit of a difference\nas far as the structure goes,\n\n212\n00:11:07.160 --> 00:11:08.220\nbecause it is in C style.\n\n213\n00:11:08.220 --> 00:11:11.830\nSo let's break it down,\ntake a look at what's going on so\n\n214\n00:11:11.830 --> 00:11:13.810\nyou guys can better understand.\n\n215\n00:11:13.810 --> 00:11:16.470\nWe still start off with the for.\n\n216\n00:11:16.470 --> 00:11:17.760\nThat hasn't changed.\n\n217\n00:11:17.760 --> 00:11:19.760\nWe also have the do and done.\n\n218\n00:11:19.760 --> 00:11:23.730\nThat hasn't changed as well that's giving\nit the okay here's the area in which we're\n\n219\n00:11:23.730 --> 00:11:26.920\ngonna execute commands,\nlook what those commands on.\n\n220\n00:11:28.130 --> 00:11:32.900\nBut it's this piece of\nbusiness gong on right here\n\n221\n00:11:32.900 --> 00:11:37.990\nthat makes it C-ish right,\nthis is what a C for loop looks like.\n\n222\n00:11:37.990 --> 00:11:42.510\nAnd the way it works is we're\nstill declaring a variable, right,\n\n223\n00:11:42.510 --> 00:11:45.290\nwe're still giving it some sort of,\n\n224\n00:11:45.290 --> 00:11:51.820\nwell at this point we're kind of giving\nit a condition that needs to be met.\n\n225\n00:11:51.820 --> 00:11:55.690\nAt this point and\nthen something else to do so\n\n226\n00:11:55.690 --> 00:11:58.320\nthat it will iterate\nhow we make it iterate?\n\n227\n00:11:58.320 --> 00:11:58.820\nOkay?\n\n228\n00:11:59.860 --> 00:12:05.110\nSo here's us declaring a variable,\nI = 0; okay great standard\n\n229\n00:12:05.110 --> 00:12:09.740\nvariable stuff, and you'll notice this\nsemi colon here, you gotta put that in,\n\n230\n00:12:09.740 --> 00:12:14.580\nthis is like our chaining,\nthat we've done in a previous video.\n\n231\n00:12:14.580 --> 00:12:18.147\nWe did one command,\nsemi colon another command, semi colon and\n\n232\n00:12:18.147 --> 00:12:21.592\nas I want to do more commands I\nhave to throw the semicolons in.\n\n233\n00:12:21.592 --> 00:12:25.533\nSame idea here inside of C style for\nloops.\n\n234\n00:12:25.533 --> 00:12:27.610\nI gotta put this semicolon there.\n\n235\n00:12:27.610 --> 00:12:29.820\nAnd now I'm saying, here's my condition.\n\n236\n00:12:30.940 --> 00:12:34.800\nWhile basically i is less than or\nequal to 10.\n\n237\n00:12:34.800 --> 00:12:37.200\nSo basically,\nwhile this condition is true.\n\n238\n00:12:37.200 --> 00:12:39.210\nWhile i is less than or equal to 10.\n\n239\n00:12:39.210 --> 00:12:45.120\nIt's and this is where it kind of breaks\nup and it gets a little convoluted.\n\n240\n00:12:45.120 --> 00:12:47.360\nIt looks at that condition,\nand then drops down to the do.\n\n241\n00:12:48.360 --> 00:12:49.900\nOkay?\nAnd it says,\n\n242\n00:12:49.900 --> 00:12:52.110\nokay, I've looked at this condition.\n\n243\n00:12:52.110 --> 00:12:55.400\nI is equaling 0,\nwhich is less than or equal to 10.\n\n244\n00:12:55.400 --> 00:12:58.090\nSo I need to do my commands,\nand I've got print f.\n\n245\n00:12:58.090 --> 00:13:01.090\nI wanted to throw this in here\nbecause it's C like, right?\n\n246\n00:13:01.090 --> 00:13:03.780\nIn C, they use print f instead of echo.\n\n247\n00:13:03.780 --> 00:13:04.590\nTo print to the screen.\n\n248\n00:13:04.590 --> 00:13:08.150\nYou'll notice below I've commented out,\necho.\n\n249\n00:13:08.150 --> 00:13:09.617\nBasically exact same line,\n\n250\n00:13:09.617 --> 00:13:13.661\na little bit of difference going on here\nto give you that compare and contrast.\n\n251\n00:13:13.661 --> 00:13:19.760\nBut where printf and then whatever's\nin that value, that variable value.\n\n252\n00:13:19.760 --> 00:13:22.277\nAnd then I've added a new line because\n\n253\n00:13:22.277 --> 00:13:25.810\nin C style with print f you\nneed that in your line.\n\n254\n00:13:25.810 --> 00:13:28.440\nI don't need it with Echo, but\nbecause print f is like a C thing,\n\n255\n00:13:28.440 --> 00:13:32.040\nyou've got to follow those regulations,\nwhich you need there.\n\n256\n00:13:32.040 --> 00:13:34.110\nIt's implied with Echo,\nit's not with print f.\n\n257\n00:13:35.130 --> 00:13:39.690\nOnce I run this though, it should then go\nokay, I've iterated zero was less than or\n\n258\n00:13:39.690 --> 00:13:40.770\nequal to ten.\n\n259\n00:13:40.770 --> 00:13:43.790\nI've run the print f command, it went out.\n\n260\n00:13:43.790 --> 00:13:44.950\nNow, what do I need to do?\n\n261\n00:13:44.950 --> 00:13:46.354\nI need to re-evaluate.\n\n262\n00:13:47.490 --> 00:13:49.350\nActually, I need to do one\nthing before I re-evaluate.\n\n263\n00:13:49.350 --> 00:13:56.010\nI need to run this, this i++,\nand it's that incrementation.\n\n264\n00:13:56.010 --> 00:14:00.260\nIt's basically saying add\none to the value of i.\n\n265\n00:14:00.260 --> 00:14:05.720\nYou can do i-- and it will remove\none from the value of i as well.\n\n266\n00:14:05.720 --> 00:14:08.840\nSo, whatever way you're going\nyou can use that syntax.\n\n267\n00:14:08.840 --> 00:14:13.066\nOr you can be really trust worthy,\nwith doing stuff like this,\n\n268\n00:14:13.066 --> 00:14:17.853\nthis works really well in other contexts\nthis post and pre increment and\n\n269\n00:14:17.853 --> 00:14:21.709\ndecrement is not a good idea and\nit's really bad coding.\n\n270\n00:14:21.709 --> 00:14:28.371\nYou'll want to do I = I + 1, or I = I- 1.\n\n271\n00:14:28.371 --> 00:14:29.870\nThat's the better way to do it.\n\n272\n00:14:29.870 --> 00:14:32.850\nBut when you're just using it for\niteration, this works out just fine.\n\n273\n00:14:32.850 --> 00:14:35.760\nIt doesn't give you any issues,\nand it's really the only way.\n\n274\n00:14:35.760 --> 00:14:37.250\nI have to thank Justin for this,\n\n275\n00:14:37.250 --> 00:14:39.970\nhe was kind of explained that\nto me as I was looking at it.\n\n276\n00:14:39.970 --> 00:14:41.920\nI was like, yeah, that's right.\n\n277\n00:14:41.920 --> 00:14:45.070\nSo for using it in this style,\nit's totally fine.\n\n278\n00:14:46.340 --> 00:14:47.560\nAll right.\nSo let's run this guy.\n\n279\n00:14:47.560 --> 00:14:49.160\nLet's see what it does.\n\n280\n00:14:49.160 --> 00:14:53.532\nAnd, I'm gonna add one line here,\njust so I can where's my there we\n\n281\n00:14:53.532 --> 00:14:57.390\ngo just gonna click clear, so\nit always clears the screen.\n\n282\n00:14:59.360 --> 00:15:02.026\nWrite that, come over here and\nwe'll run it.\n\n283\n00:15:02.026 --> 00:15:05.972\n./For _Cstyle.sh.\n\n284\n00:15:05.972 --> 00:15:07.500\nAnd there we go.\n\n285\n00:15:07.500 --> 00:15:11.060\nIt says and then one, and two, and\nthree, and four, and five, and six and\n\n286\n00:15:11.060 --> 00:15:12.070\nit literates through the loop.\n\n287\n00:15:12.070 --> 00:15:15.010\nSo, just another type of loop.\n\n288\n00:15:15.010 --> 00:15:17.490\nI do want to give you\na more practical example.\n\n289\n00:15:17.490 --> 00:15:21.945\nWe're gonna use our PingSweep idea to,\nand again, compare and\n\n290\n00:15:21.945 --> 00:15:26.091\ncontrast from that Bash loop\nversus a C-STOP, all right.\n\n291\n00:15:26.091 --> 00:15:29.175\nSo clear that and we'll go here,\nwe'll escape out of this.\n\n292\n00:15:33.028 --> 00:15:36.514\nAnd we'll take a look at that with vim.\n\n293\n00:15:36.514 --> 00:15:42.831\nFor_Cstyle_psweep.sh, and there we go.\n\n294\n00:15:42.831 --> 00:15:47.635\nWe're doing the same thing we did in our\nBash For loop with the ping sweep but\n\n295\n00:15:47.635 --> 00:15:51.991\nyou'll notice I'm using that C\nstyle verbiage to get it to happen.\n\n296\n00:15:51.991 --> 00:15:57.248\nIP equals zero which I should probably\nmake equal 1, because 0's gonna give\n\n297\n00:15:57.248 --> 00:16:02.744\na broadcast error I'll say one like that\nand then 255 we'll do the same thing so\n\n298\n00:16:02.744 --> 00:16:06.430\nI'm gonna change that to 254 and\nthen IP plus plus.\n\n299\n00:16:06.430 --> 00:16:10.150\nSo I've got my variable that I'm\ndeclaring, I've got my condition that\n\n300\n00:16:10.150 --> 00:16:15.020\nneeds to be met, and I've got my\nincrementation or iteration, right?\n\n301\n00:16:15.020 --> 00:16:20.020\nAnd then, other than that, again we're\nback into that old familiar sweater we put\n\n302\n00:16:20.020 --> 00:16:23.185\non on a cold winter's day and have a cup\nof coffee and listen to Sarah McLaughlan.\n\n303\n00:16:23.185 --> 00:16:27.360\n[LAUGH] So- Clearly,\nyour winter is different from mine.\n\n304\n00:16:27.360 --> 00:16:28.816\nSo, [LAUGH] Michael Bublé?\n\n305\n00:16:28.816 --> 00:16:34.078\n[LAUGH]\nSo there you go.\n\n306\n00:16:34.078 --> 00:16:35.560\nJust wanted you guys to see it.\n\n307\n00:16:35.560 --> 00:16:38.440\nAnd it´s gonna do the exact same\nthing that the other loop did, so\n\n308\n00:16:38.440 --> 00:16:42.590\nlet's save that out, write it.\n\n309\n00:16:42.590 --> 00:16:45.022\nAnd then we'll run it in our other.\n\n310\n00:16:45.022 --> 00:16:49.590\nSo ./for underscore- Now, while you're\nrunning that, in your example here,\n\n311\n00:16:49.590 --> 00:16:53.100\nyou've kinda lucked out in\nthat the IP is a number, and\n\n312\n00:16:53.100 --> 00:16:56.870\nyou're able to use that number as\nthe loop count as well, right?\n\n313\n00:16:56.870 --> 00:17:01.000\nBut if what we're trying to use is\na variable that contains a letter or\n\n314\n00:17:01.000 --> 00:17:01.970\na string or\n\n315\n00:17:01.970 --> 00:17:05.700\nwords like in your earlier example,\nwe can't use that as our loop count also.\n\n316\n00:17:05.700 --> 00:17:10.960\nAnd that's one of the neat parts about the\nc type loops is that in the definition,\n\n317\n00:17:10.960 --> 00:17:14.300\nwhen you do the for statement,\nyou're just specifying the numbers for\n\n318\n00:17:14.300 --> 00:17:16.170\nhow many times you want\nthe loop to execute.\n\n319\n00:17:16.170 --> 00:17:19.130\nAnd you can completely control\nthat by setting that i value to be\n\n320\n00:17:19.130 --> 00:17:22.220\nwhatever you want, to influence\nwhether the loop stops or not.\n\n321\n00:17:22.220 --> 00:17:25.830\nAnd then after that you can use whatever\nvariable you want in the code that you're\n\n322\n00:17:25.830 --> 00:17:28.630\nexecuting, it doesn't have to be tied.\n\n323\n00:17:28.630 --> 00:17:31.680\nBut it's neat that you had the option\nthat if you are working with numbers and\n\n324\n00:17:31.680 --> 00:17:33.740\nit matches up with the loop like this,\nyou can reuse it.\n\n325\n00:17:33.740 --> 00:17:35.360\nAnd so\nthat's what Daniel is doing right here,\n\n326\n00:17:35.360 --> 00:17:37.970\nis recycling that variable,\nwhich is a pretty cool use of it.\n\n327\n00:17:37.970 --> 00:17:39.130\nYeah it's a great use of it.\n\n328\n00:17:39.130 --> 00:17:41.870\nAnd like I said it's nice to\nhave tools in the toolkit to go,\n\n329\n00:17:41.870 --> 00:17:44.090\nyeah, you know what would great for\nthis problem?\n\n330\n00:17:44.090 --> 00:17:45.640\nA C-style for-loop, man.\n\n331\n00:17:45.640 --> 00:17:47.170\nThat would be perfect for this.\n\n332\n00:17:47.170 --> 00:17:52.510\nIt's a very simple typing,\nit's not very hard coding.\n\n333\n00:17:52.510 --> 00:17:54.450\nI throw that in there and make it work.\n\n334\n00:17:54.450 --> 00:17:57.920\nNow, my MonoScript didn't work because I\njust realized, I'm on a different network.\n\n335\n00:17:57.920 --> 00:18:01.695\nI had hard coded a network value and gotta\nchange that to what we're actually working\n\n336\n00:18:01.695 --> 00:18:03.925\nwith so that'll actually make\nit work a whole lot better.\n\n337\n00:18:03.925 --> 00:18:08.591\nLet me change that [SOUND] here we go.\n\n338\n00:18:08.591 --> 00:18:15.625\nWe'll make it our actual ITPRO.TV\nnetwork 10., what are we on, .13.IP.\n\n339\n00:18:15.625 --> 00:18:19.065\nThat should make it work\na whole lot better.\n\n340\n00:18:19.065 --> 00:18:19.565\nNow [INAUDIBLE].\n\n341\n00:18:21.330 --> 00:18:24.130\nAnd just take a second\nbecause it has to do iterate\n\n342\n00:18:24.130 --> 00:18:27.810\nthrough each one until it starts finding\nvalues, and we saw with the last one,\n\n343\n00:18:27.810 --> 00:18:31.350\nit wasn't until the higher range that\nwe actually started seeing machines.\n\n344\n00:18:31.350 --> 00:18:33.690\nAnd we're seeing the same\nkind of idea here.\n\n345\n00:18:33.690 --> 00:18:35.660\nThere it goes, it's firing off.\n\n346\n00:18:35.660 --> 00:18:39.550\nFinds all the IPs in that range and\nwe use a C style for loop for\n\n347\n00:18:39.550 --> 00:18:42.520\nthat instead of a bash for loop.\n\n348\n00:18:42.520 --> 00:18:43.460\nVery simple.\n\n349\n00:18:43.460 --> 00:18:47.310\nAlso want to show you one more thing\nabout C style for loops which is\n\n350\n00:18:47.310 --> 00:18:52.160\nusing multiple variables inside of them,\ncan kind of expand your capabilities.\n\n351\n00:18:52.160 --> 00:18:57.125\nClear that, and\nwe'll go in here, we will exit,\n\n352\n00:18:57.125 --> 00:19:02.567\nand we're gonna look at\nthem [INAUDIBLE] style_,\n\n353\n00:19:02.567 --> 00:19:05.310\nI'm sorry, it's multi.\n\n354\n00:19:07.980 --> 00:19:10.220\n[INAUDIBLE] There we go.\n\n355\n00:19:10.220 --> 00:19:13.330\nJust can't type today.\n\n356\n00:19:13.330 --> 00:19:14.050\nThere we go.\n\n357\n00:19:14.050 --> 00:19:17.580\nSo, not crazy syntax going on, but\n\n358\n00:19:17.580 --> 00:19:21.530\nthere is a bit of a difference in\nthat I'm using multiple variables.\n\n359\n00:19:21.530 --> 00:19:26.420\nAnd here we go, just like we saw before,\na = 0, but then I used a comma and\n\n360\n00:19:26.420 --> 00:19:27.564\nput b = 10.\n\n361\n00:19:27.564 --> 00:19:31.711\nSo now I have two different variables,\nokay?\n\n362\n00:19:31.711 --> 00:19:35.460\nAnd the I create a condition, a &lt;= 10, and\n\n363\n00:19:35.460 --> 00:19:40.620\nthen our iterators,\nwhich are b++, and b--, so, yeah.\n\n364\n00:19:40.620 --> 00:19:42.720\nYeah I know.\n\n365\n00:19:42.720 --> 00:19:43.750\nAnd what's the script gonna do?\n\n366\n00:19:43.750 --> 00:19:46.490\nBasically, what it is to\ndo is echo out a and b,\n\n367\n00:19:46.490 --> 00:19:51.020\nwhatever those values are, when a is gonna\nincrement, b is gonna decrement, and\n\n368\n00:19:51.020 --> 00:19:54.310\nthen they're going to be a over here and\nb on this side.\n\n369\n00:19:54.310 --> 00:19:56.220\nSo one's gonna go up and\nthe other's gonna go down.\n\n370\n00:19:56.220 --> 00:19:58.000\nIt's gonna be kind of\nan interesting thing,\n\n371\n00:19:58.000 --> 00:19:59.790\njust to give you kind of\nan idea how this looks.\n\n372\n00:19:59.790 --> 00:20:03.890\nBut ultimately, even though b is\ndecrementing, the way that this is\n\n373\n00:20:03.890 --> 00:20:07.470\ndefined, a would be what's determining\nhow many times we iterate, right?\n\n374\n00:20:07.470 --> 00:20:09.380\nSpot on, he nailed it, right?\n\n375\n00:20:09.380 --> 00:20:13.260\nThat condition, I could change that\ncondition to maybe use some logical\n\n376\n00:20:13.260 --> 00:20:15.830\nlanding, right, that Boolean kind\nof operation if we wanted to.\n\n377\n00:20:15.830 --> 00:20:18.280\nYou can start expanding out from here.\n\n378\n00:20:18.280 --> 00:20:22.100\nBut I wanted you to see here's how we work\nwith multiple variables inside of here,\n\n379\n00:20:22.100 --> 00:20:25.800\nand I can actually manipulate\nthem in many different forms,\n\n380\n00:20:25.800 --> 00:20:27.880\nto get the desired output.\n\n381\n00:20:27.880 --> 00:20:34.250\nSo I'll just run it really quickly,\n./for_ Multi and there we go.\n\n382\n00:20:34.250 --> 00:20:36.580\nStarted off with zero and\nten, which is what A and\n\n383\n00:20:36.580 --> 00:20:39.710\nB's values were, then one to nine,\ntwo to eight, three to seven, and\n\n384\n00:20:39.710 --> 00:20:42.360\nwe see them working their\nway in opposite directions.\n\n385\n00:20:42.360 --> 00:20:45.670\nSo that's the basics of working\nwith C style for loops.\n\n386\n00:20:47.060 --> 00:20:51.900\nAlright, so, with these types of loops,\nwhat we've been doing so\n\n387\n00:20:51.900 --> 00:20:53.760\nfar is really serial operations, right?\n\n388\n00:20:53.760 --> 00:20:58.330\nWe perform a task, it finishes, and\nthen we potentially repeat again and\n\n389\n00:20:58.330 --> 00:21:00.960\nwe continue until we reach our limit and\nthen we stop.\n\n390\n00:21:00.960 --> 00:21:04.910\nBut, sometimes we execute a command and\nit's not so much in and out, right?\n\n391\n00:21:04.910 --> 00:21:08.180\nSometimes a command needs to sit and\nbake for a little while,\n\n392\n00:21:08.180 --> 00:21:10.530\nit's gotta perform this kinda activity.\n\n393\n00:21:10.530 --> 00:21:15.250\nAnd so in those scenarios, we need our\nscript to be a little more advanced.\n\n394\n00:21:15.250 --> 00:21:18.820\nTo be able to monitor it and realize\na certain set of conditions is matched and\n\n395\n00:21:18.820 --> 00:21:21.540\nthat's when we want to stop not\njust some simple counter, right?\n\n396\n00:21:21.540 --> 00:21:23.570\nAnd so there's a technology\nthat does that, right?\n\n397\n00:21:23.570 --> 00:21:24.640\nYes, definitely.\n\n398\n00:21:24.640 --> 00:21:27.200\nThis is a different type of\nloop that Don's talking about.\n\n399\n00:21:27.200 --> 00:21:30.250\nWe're not incrementing or\ndecrementing something,\n\n400\n00:21:30.250 --> 00:21:33.890\nwe actually can do with this type of loop\nbut you might not be doing it this way.\n\n401\n00:21:33.890 --> 00:21:38.790\nBut I've got almost like reaching\ninto the middle of that C style for\n\n402\n00:21:38.790 --> 00:21:40.630\nloop and pulling that out.\n\n403\n00:21:40.630 --> 00:21:44.610\nBecause what's going on there, it's saying\nhere's a condition that I want to meet.\n\n404\n00:21:44.610 --> 00:21:46.630\nBut maybe that condition\nis something different.\n\n405\n00:21:46.630 --> 00:21:49.250\nMaybe the condition is that this is true.\n\n406\n00:21:49.250 --> 00:21:51.010\nMaybe there is a file there.\n\n407\n00:21:51.010 --> 00:21:55.740\nMaybe, as long as that file name is this,\nthen I want you to do something, right?\n\n408\n00:21:55.740 --> 00:22:00.900\nSo things of that nature can come\naround in our lives and we go,\n\n409\n00:22:00.900 --> 00:22:05.840\nwell, early pearly is not lending itself\nto work with this, what am I gonna do?\n\n410\n00:22:05.840 --> 00:22:07.430\nOr it's just not easy right?\n\n411\n00:22:07.430 --> 00:22:11.370\nSo we're gonna start with what's called\na wild loop, so basically saying,\n\n412\n00:22:11.370 --> 00:22:16.720\nwhile a condition is true,\ndo something that I tell you to do.\n\n413\n00:22:16.720 --> 00:22:20.720\nAnd when that condition becomes not\ntrue that's when the loop stops.\n\n414\n00:22:20.720 --> 00:22:23.580\nSo it's not the word incrementing one,\ntwo, three, four, five, six, seven,\n\n415\n00:22:23.580 --> 00:22:25.450\neight, nine, ten, and we've looped\nthrough all one of those things,\n\n416\n00:22:25.450 --> 00:22:28.800\nand once we've reached the end of ten,\nit's over.\n\n417\n00:22:28.800 --> 00:22:32.850\nBut as long as that condition is true,\nwe're gonna continue looping.\n\n418\n00:22:32.850 --> 00:22:36.310\nNow, this is where we can get\ninto some danger zone here.\n\n419\n00:22:36.310 --> 00:22:41.720\nBecause if that condition is never met,\nif the condition that makes it stop\n\n420\n00:22:41.720 --> 00:22:45.920\nnever is satisfied, that loop is\ngonna continue on [INAUDIBLE].\n\n421\n00:22:45.920 --> 00:22:47.710\nIt's gonna go crazy into infinity.\n\n422\n00:22:47.710 --> 00:22:49.930\nIt's what they call an infinite loop.\n\n423\n00:22:49.930 --> 00:22:54.020\nSometimes we want that, but\na lot of times we don't.\n\n424\n00:22:54.020 --> 00:22:57.770\nSo we gotta make sure that we [LAUGH]\nhave a condition that can be met.\n\n425\n00:22:57.770 --> 00:22:59.190\nIf you ever fire one of these off and\n\n426\n00:22:59.190 --> 00:23:03.640\nyour screen just starts puking stuff\nout at you and it's not stopping,\n\n427\n00:23:03.640 --> 00:23:09.450\nyou've probably hit an infinite loop, and\nwe gotta figure out what the problem is.\n\n428\n00:23:09.450 --> 00:23:13.040\nSo let's take a look at what\na while loop looks like.\n\n429\n00:23:13.040 --> 00:23:16.820\nLet me get out of here, get out of this.\n\n430\n00:23:18.320 --> 00:23:22.370\nAnd we've got, oop,\nclear, is a better word.\n\n431\n00:23:22.370 --> 00:23:24.784\nWe've got some while loop.\n\n432\n00:23:24.784 --> 00:23:29.240\nWhat do i wanna show you guys is cat,\noff limit.\n\n433\n00:23:30.700 --> 00:23:35.510\nvin while.if.\n\n434\n00:23:35.510 --> 00:23:37.052\nI'll run it first,\nthat's what I'm going to do.\n\n435\n00:23:37.052 --> 00:23:39.461\nI am going to run it first,\nI'll just do this.\n\n436\n00:23:39.461 --> 00:23:45.124\nwhile_if.sh., there we go.\n\n437\n00:23:45.124 --> 00:23:48.711\nSo the while loop ran,\nit counted from zero to ten, nine,\n\n438\n00:23:48.711 --> 00:23:50.990\nzero to nine, gave me ten dots.\n\n439\n00:23:50.990 --> 00:23:53.786\nWhich is something we could have done\nwith the previous types of work, right?\n\n440\n00:23:53.786 --> 00:23:55.079\nThat's right.\nTotally could've done that.\n\n441\n00:23:55.079 --> 00:23:56.312\nSo, simple thing.\n\n442\n00:23:56.312 --> 00:23:59.603\nJust let's you know that\nthe script ran was a nice test.\n\n443\n00:23:59.603 --> 00:24:05.710\nBut I wanna show you the code to this one,\nit's a little interesting thing here.\n\n444\n00:24:05.710 --> 00:24:11.829\nSo if I look at this,\nif I say cat while_if.sh,\n\n445\n00:24:11.829 --> 00:24:17.520\nlook at this, this isn't actually a while.\n\n446\n00:24:18.970 --> 00:24:22.290\nAnd I've done this purposefully,\nI know Don's sitting there\n\n447\n00:24:22.290 --> 00:24:25.690\nwith a perplexed look on his face like,\nwhat is happening?\n\n448\n00:24:25.690 --> 00:24:31.053\nThis is what it would have taken for me to\nmake that happen without the use of while,\n\n449\n00:24:31.053 --> 00:24:34.025\nit would have taken\na bunch of if statements.\n\n450\n00:24:34.025 --> 00:24:38.733\nIf this, then this, if this, then this,\nand I even tried to get into,\n\n451\n00:24:38.733 --> 00:24:43.455\ncould I have done ifs,\nmaybe even that up a little bit?\n\n452\n00:24:43.455 --> 00:24:45.875\nNot really,\nbecause it's gonna meet a condition, and\n\n453\n00:24:45.875 --> 00:24:47.145\nthat condition is gonna freak out.\n\n454\n00:24:47.145 --> 00:24:51.125\nIt would have been a lot of logic and\ncomplexity to make that work and\n\n455\n00:24:51.125 --> 00:24:55.000\njust with this,\nyou can see it takes a lot of code.\n\n456\n00:24:55.000 --> 00:25:00.015\nSo let's look at this guy,\nI'll run it over here,\n\n457\n00:25:00.015 --> 00:25:05.490\n./while.sh does the exact same thing.\n\n458\n00:25:05.490 --> 00:25:11.256\nBut when we look at its code,\nwhen we cat while.sh,\n\n459\n00:25:11.256 --> 00:25:16.230\nit's a whole lot shorter.\n\n460\n00:25:16.230 --> 00:25:20.267\nSo now you start seeing the power of while\nloops, it makes our code easier to read,\n\n461\n00:25:20.267 --> 00:25:22.081\nit makes it easier to write for sure,\n\n462\n00:25:22.081 --> 00:25:24.618\nand more efficient, so\nwhile loops do this first.\n\n463\n00:25:24.618 --> 00:25:29.654\nNow let's look at the structure\nof the while loop which is,\n\n464\n00:25:29.654 --> 00:25:34.388\nI've defined a variable, and\nwhile a is less than ten,\n\n465\n00:25:34.388 --> 00:25:37.910\nthen I want to do something, okay.\n\n466\n00:25:37.910 --> 00:25:42.220\nSo notice I've got my test parameter,\nand much like our if statement.\n\n467\n00:25:42.220 --> 00:25:43.510\nGot the square brackets there,\n\n468\n00:25:43.510 --> 00:25:45.650\nyou're gonna need that because\nit's the test parameter.\n\n469\n00:25:45.650 --> 00:25:50.940\nSo it's gonna while it's saying,\nlet's test something, and if it rings true\n\n470\n00:25:50.940 --> 00:25:56.330\nthen let's do some stuff except it's\nnot using do just like we saw before.\n\n471\n00:25:56.330 --> 00:26:02.040\nSo here we go, we've got while\na which equals zero is less than 10 or\n\n472\n00:26:02.040 --> 00:26:05.480\nequal to 10, which it is, echo a.\n\n473\n00:26:05.480 --> 00:26:09.780\nThen I can use my post\nincrementation script but\n\n474\n00:26:09.780 --> 00:26:12.210\nI could also use good code here as well.\n\n475\n00:26:12.210 --> 00:26:17.865\nI'll just comment it out and say a + 1,\nwhich will give it that incrementation.\n\n476\n00:26:17.865 --> 00:26:21.590\nSo like harkening back to that C style for\nloop and\n\n477\n00:26:21.590 --> 00:26:26.090\ndoing the same exact thing but\nin the while loop style, okay?\n\n478\n00:26:26.090 --> 00:26:32.040\nLike Don says, I could have put something\nhere and said, if that file is there,\n\n479\n00:26:32.040 --> 00:26:38.790\nif dash d equals our dash D file and\nmy variable is a file name.\n\n480\n00:26:38.790 --> 00:26:41.980\nAnd it is a directory, then do something,\nmaybe echo something out,\n\n481\n00:26:41.980 --> 00:26:45.930\nmaybe create a new directory,\nmaybe do something like that.\n\n482\n00:26:45.930 --> 00:26:50.952\nSo it's not just confined to\nworking through a number system,\n\n483\n00:26:50.952 --> 00:26:55.500\nyou can definitely work files,\nthings of that nature and\n\n484\n00:26:55.500 --> 00:26:58.358\nit does it very cleanly and easily.\n\n485\n00:26:58.358 --> 00:27:01.745\nSo I've actually written ping\nsweep as this as well, so again,\n\n486\n00:27:01.745 --> 00:27:05.500\nyou get that practical application\nof how this is gonna work out.\n\n487\n00:27:05.500 --> 00:27:09.870\nLet's voom that thing\nwith while_pingsweep.sh,\n\n488\n00:27:09.870 --> 00:27:13.760\nhere's the code for that, again,\nthe structure very similar.\n\n489\n00:27:13.760 --> 00:27:18.759\nIP equals 1, so I'm declaring the variable\noutside of the while command instead\n\n490\n00:27:18.759 --> 00:27:20.795\nof in line with it in the for loop.\n\n491\n00:27:20.795 --> 00:27:25.709\nAnd then we say, while IP is less\nthan 254 then do sleep our command\n\n492\n00:27:25.709 --> 00:27:30.490\njust like we've seen before, and\nI use the post implementation.\n\n493\n00:27:30.490 --> 00:27:35.386\nFire it off and well ha ha,\nMr Lowrie you gotta do the thing\n\n494\n00:27:35.386 --> 00:27:39.881\nthat makes it work,\nwhich is change the IP address.\n\n495\n00:27:42.633 --> 00:27:45.952\n10.0.13.IP, there we go,\n\n496\n00:27:45.952 --> 00:27:51.732\nthere's our variable back in line\njust like what we saw before,\n\n497\n00:27:51.732 --> 00:27:56.370\nwrite that out and\nwe'll clear and fire off.\n\n498\n00:27:56.370 --> 00:28:01.870\nThis is a while_psweep.sh, and\noff it goes, it's running,\n\n499\n00:28:01.870 --> 00:28:06.410\nit's iterating, it's looking, it's seeing,\ndoes that stuff exist, is it there?\n\n500\n00:28:06.410 --> 00:28:10.740\nAnd eventually, we're gonna get to\nthe higher range and they start firing off\n\n501\n00:28:10.740 --> 00:28:13.760\nthe ping sweep utility, so again,\ngiving you another option.\n\n502\n00:28:13.760 --> 00:28:15.750\nMaybe this was the right\nway to write this for me,\n\n503\n00:28:15.750 --> 00:28:20.180\nmaybe this is the way I\nunderstand the loop to work.\n\n504\n00:28:20.180 --> 00:28:24.470\nAnd that's what popped into my head, so\nwe can use loops to do the same thing.\n\n505\n00:28:24.470 --> 00:28:29.890\nWe can use loops that do one\nthing better than other loops and\n\n506\n00:28:29.890 --> 00:28:32.860\nyou have those options,\nyou got the tool kit to pick from.\n\n507\n00:28:32.860 --> 00:28:35.620\nIt's not the only game in town though,\nwe've also got until,\n\n508\n00:28:35.620 --> 00:28:37.170\nwhich is basically the opposite.\n\n509\n00:28:37.170 --> 00:28:38.630\nI'm just gonna quickly show you that,\n\n510\n00:28:38.630 --> 00:28:41.980\nnot really get too crazy,\nit's almost identical to while.\n\n511\n00:28:41.980 --> 00:28:43.790\nInstead of saying while something is true,\n\n512\n00:28:43.790 --> 00:28:46.990\nwe say until something is true,\nthat's the idea.\n\n513\n00:28:46.990 --> 00:28:49.400\nSo really quickly we'll\nshow you that one and\n\n514\n00:28:49.400 --> 00:28:51.090\nwe'll get out of there, and we'll call.\n\n515\n00:28:51.090 --> 00:28:53.800\nI know we're running out of time Don, so\nI'll get us out of here as soon as I can.\n\n516\n00:28:55.570 --> 00:28:59.885\nNot there, and\nof course I need my capitals,\n\n517\n00:28:59.885 --> 00:29:03.540\n[LAUGH]\nThere we go, now let's show you that,\n\n518\n00:29:03.540 --> 00:29:06.520\nso cats algorithmic.\n\n519\n00:29:06.520 --> 00:29:12.984\nBecause I need to, it is until\n\n520\n00:29:12.984 --> 00:29:19.820\n.sh, there we go, so again,\nsame kind of idea, instead of while here,\n\n521\n00:29:19.820 --> 00:29:25.840\nwe have until a is greater than 10,\nthen do this echo a.\n\n522\n00:29:27.140 --> 00:29:30.493\nWe also have a ping sweep one for\nthat as well.\n\n523\n00:29:32.981 --> 00:29:34.670\nNo, I don't [LAUGH].\n\n524\n00:29:34.670 --> 00:29:36.563\nIt's because it's not 2.sh's.\n\n525\n00:29:36.563 --> 00:29:39.315\nDon, I'm having trouble with them today,\nit's not my friend.\n\n526\n00:29:39.315 --> 00:29:41.750\nI would argue that you're having\ntrouble with your typing skills.\n\n527\n00:29:41.750 --> 00:29:42.613\nYou shut up.\n\n528\n00:29:42.613 --> 00:29:46.969\n[LAUGH] You shut your hole, your foul,\nstinky hole, that's all I can say,\n\n529\n00:29:46.969 --> 00:29:52.170\nhere we go, so again, until IP is\ngreater than 254, run the loop, right?\n\n530\n00:29:52.170 --> 00:29:55.710\nAnd then I use this proper type just\nto give you some more variations out of\n\n531\n00:29:55.710 --> 00:29:59.530\nthere, so you've got while something\nis true or until something is true.\n\n532\n00:29:59.530 --> 00:30:03.140\nAnd either one of those might be the\nflavor of the day for whatever problem it\n\n533\n00:30:03.140 --> 00:30:07.440\nis you need to use a loop for but\nthat's gonna give you a little bit to go.\n\n534\n00:30:07.440 --> 00:30:12.252\nBut I got a wee bit more that's\nprobably gonna take about 15 minutes.\n\n535\n00:30:12.252 --> 00:30:14.438\nAll right,\nlet's break it off into a part three, and\n\n536\n00:30:14.438 --> 00:30:17.268\nthat way we can jump back in and\nspend the right amount of time on that.\n\n537\n00:30:17.268 --> 00:30:19.009\nThis is the tres hombres.\n\n538\n00:30:19.009 --> 00:30:20.614\nIt's a trilogy so.\n\n539\n00:30:20.614 --> 00:30:24.345\nAll right, so we'll do just that,\nwe'll come back in and pick up with it.\n\n540\n00:30:24.345 --> 00:30:27.795\nBut in this episode,\nwe had a chance to see the C style loops,\n\n541\n00:30:27.795 --> 00:30:32.005\nwe had a chance to see the while's and\nuntil's.\n\n542\n00:30:32.005 --> 00:30:35.935\nSo you have different behaviours off that\nbasic loop that we saw back in part one,\n\n543\n00:30:35.935 --> 00:30:38.425\nit's all really good stuff, thanks for\nsharing that with us, Daniel.\n\n544\n00:30:38.425 --> 00:30:40.906\nBut like I said, this is a good spot for\nus to wrap this one up,\n\n545\n00:30:40.906 --> 00:30:43.118\nwe will be back for a part three so\nstay tuned for that.\n\n546\n00:30:43.118 --> 00:30:45.478\nWe will get to see some more loops and\n\n547\n00:30:45.478 --> 00:30:48.710\nget to continue our looping\njourney from there.\n\n548\n00:30:48.710 --> 00:30:49.786\nOne more time, Don [LAUGH].\n\n549\n00:30:49.786 --> 00:30:54.320\n[LAUGH] Well, thank you guys for watching,\nsigning off for ITProTV, I'm Don Pezet.\n\n550\n00:30:54.320 --> 00:30:55.620\nAnd I'm Daniel Lowrie.\n\n551\n00:30:55.620 --> 00:30:57.916\nAnd we will see you next time.\n\n552\n00:30:57.916 --> 00:31:03.392\n[MUSIC]\n\n553\n00:31:03.392 --> 00:31:07.063\nThank you for watching, ITProTV.\n\n",
          "vimeoId": "237099426"
        },
        {
          "description": "In this episode, Daniel and Justin finish up their look at the various loop functions in bash scripts. Here they go over the function and use of “Nested loops” as well as the “break” and “continue” commands.",
          "length": "1496",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-3-loops_pt_3-100617-PGM.00_37_17_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-3-loops_pt_3-100617-PGM.00_37_17_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-5-1-3-loops_pt_3-100617-PGM.00_37_17_27.Still001-sm.jpg",
          "title": "Loops Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.105\nI'm your host, Don Pezet.\n\n2\n00:00:02.105 --> 00:00:06.296\n[CROSSTALK]\n\n3\n00:00:06.296 --> 00:00:08.328\n[MUSIC]\n\n4\n00:00:08.328 --> 00:00:12.432\nYou're watching ITPro.TV.\n\n5\n00:00:12.432 --> 00:00:15.060\n&gt;&gt; All right, good morning,\ngood afternoon and good evening and\n\n6\n00:00:15.060 --> 00:00:17.080\nwelcome back to another\nepisode of ITPro.TV.\n\n7\n00:00:17.080 --> 00:00:18.532\nI'm your host Don Pezet.\n\n8\n00:00:18.532 --> 00:00:22.040\nBack again with another episode\nof Linux shell scripting basics,\n\n9\n00:00:22.040 --> 00:00:23.745\nand it's a part three, right.\n\n10\n00:00:23.745 --> 00:00:25.750\nWe're setting new records here.\n\n11\n00:00:25.750 --> 00:00:29.334\nThis is part three of our loops episode,\nbecause there are so\n\n12\n00:00:29.334 --> 00:00:34.198\nmany different powerful things you can do\nwith loops and so many different types.\n\n13\n00:00:34.198 --> 00:00:38.462\nWe've already seen traditional looping,\nwe've seen C style loopings,\n\n14\n00:00:38.462 --> 00:00:40.795\nwe've seen while loops, until loops.\n\n15\n00:00:40.795 --> 00:00:43.170\nYou'd think that was all of it,\nbut you know what?\n\n16\n00:00:43.170 --> 00:00:45.980\nWere looping back one more time\njust to wrap up a couple odds and\n\n17\n00:00:45.980 --> 00:00:47.320\nends that we haven't gotten to.\n\n18\n00:00:47.320 --> 00:00:49.730\nAnd here to help us with that,\nMr. Daniel Lowrie.\n\n19\n00:00:49.730 --> 00:00:50.690\nDaniel, thanks for joining us.\n\n20\n00:00:50.690 --> 00:00:52.100\n&gt;&gt; Don, thanks for having me back.\n\n21\n00:00:52.100 --> 00:00:55.361\nI feel like I should be smoking a pipe and\nwearing a jacket, so-\n\n22\n00:00:55.361 --> 00:00:56.133\n&gt;&gt; [LAUGH]\n\n23\n00:00:56.133 --> 00:00:58.044\n&gt;&gt; I'll be going to the Ronny Wong school\n\n24\n00:00:58.044 --> 00:01:00.918\nof hosting,\nwhich is why we're not in part three, and-\n\n25\n00:01:00.918 --> 00:01:01.530\n&gt;&gt; [LAUGH]\n\n26\n00:01:01.530 --> 00:01:02.700\n&gt;&gt; He's famous for his pipe and\n\n27\n00:01:02.700 --> 00:01:04.160\njacket, so there you go.\n\n28\n00:01:04.160 --> 00:01:06.454\n&gt;&gt; And just part threes [LAUGH]\n&gt;&gt; And his part threes and\n\n29\n00:01:06.454 --> 00:01:07.226\nfours and nines.\n\n30\n00:01:07.226 --> 00:01:10.650\n[LAUGH] A lot of fun, but\nyes we are back for more loop stuff.\n\n31\n00:01:10.650 --> 00:01:16.110\nLike Don said, a few other things that\ncan help enhance your loops, right.\n\n32\n00:01:16.110 --> 00:01:19.230\nJust some of that stuff that we wanna\nthrow on top of the fire, again,\n\n33\n00:01:19.230 --> 00:01:23.420\ngive you more power, more tools in your\ntoolbox to be able to work with loops or\n\n34\n00:01:23.420 --> 00:01:28.730\nwhatever might arise inside\nof your scripting life.\n\n35\n00:01:28.730 --> 00:01:31.200\nThat being said, what's the first\nthing we wanna talk about?\n\n36\n00:01:31.200 --> 00:01:34.050\nAnd like an if,\nremember when we talked about ifs?\n\n37\n00:01:34.050 --> 00:01:35.930\nThink, and just go back, back in time.\n\n38\n00:01:35.930 --> 00:01:39.560\nLet it wave over you,\nthe memories of the if shows,\n\n39\n00:01:39.560 --> 00:01:41.860\nright, where we had an if statement.\n\n40\n00:01:41.860 --> 00:01:45.240\nBut inside that statement I was\nable to nest other ifs as well.\n\n41\n00:01:45.240 --> 00:01:46.340\nBut guess what?\n\n42\n00:01:46.340 --> 00:01:49.395\nWhen it comes to loops we\ncan nest loops as well.\n\n43\n00:01:49.395 --> 00:01:54.110\nCuz sometimes I want to iterate,\nand then during that iteration\n\n44\n00:01:54.110 --> 00:01:58.410\nI want to do some other type\nof iteration inside of that.\n\n45\n00:01:58.410 --> 00:02:01.600\nSo there's many different\nreasons why this might pop up.\n\n46\n00:02:01.600 --> 00:02:03.150\nBut I just want to give\nyou the brass tacks,\n\n47\n00:02:03.150 --> 00:02:07.820\nthe basics,\nof how to make loops work with nesting, so\n\n48\n00:02:07.820 --> 00:02:12.740\nthat you can go, yeah, nesting,\nthat makes sense, let us do that.\n\n49\n00:02:12.740 --> 00:02:14.760\nI need to do something\ninside of something.\n\n50\n00:02:14.760 --> 00:02:20.080\nI do this a lot when it comes to,\nI like making very interactive programs.\n\n51\n00:02:20.080 --> 00:02:24.820\nSo a lot of the times I'll run a loop\nthat says, while this is true, do this,\n\n52\n00:02:24.820 --> 00:02:26.810\nand I'll say loop through\nthese iterations.\n\n53\n00:02:26.810 --> 00:02:30.103\nSo maybe I'm asking you for input\nfrom the user, things of that nature.\n\n54\n00:02:30.103 --> 00:02:31.930\nIt comes really handy for me on that.\n\n55\n00:02:31.930 --> 00:02:34.380\nSo I like to use nested loops a lot.\n\n56\n00:02:34.380 --> 00:02:38.490\nSo let's see what a nested loop looks\nlike, and how the syntax works itself out,\n\n57\n00:02:38.490 --> 00:02:39.654\nand then what it looks\nlike when we run it.\n\n58\n00:02:39.654 --> 00:02:42.504\n&gt;&gt; And I know in our earlier\nepisode we did the if, then,\n\n59\n00:02:42.504 --> 00:02:45.180\nkind of if, then, else loops.\n\n60\n00:02:45.180 --> 00:02:49.470\nNot really a loop at that point,\njust a conditional state, right.\n\n61\n00:02:49.470 --> 00:02:53.140\nAnd with those, we had to be really\ncareful we did nesting to make sure that\n\n62\n00:02:53.140 --> 00:02:56.420\nwe closed off each of the statements,\notherwise you end up in trouble.\n\n63\n00:02:56.420 --> 00:02:58.180\nHere we can have that same problem, right?\n\n64\n00:02:58.180 --> 00:03:02.000\n&gt;&gt; Man it is so easy to forget because,\nhe's exactly right.\n\n65\n00:03:02.000 --> 00:03:04.970\nJust like with the ifs,\nif I have a nested if,\n\n66\n00:03:04.970 --> 00:03:08.680\nif I don't close the if with that phi and\nthen have another phi for the main if,\n\n67\n00:03:08.680 --> 00:03:12.070\nthings are going to break,\nit's not going to work correctly.\n\n68\n00:03:12.070 --> 00:03:14.560\nSame idea here with our nested loops.\n\n69\n00:03:14.560 --> 00:03:19.200\nWe start a do block,\nwe have to have a done for every do we do.\n\n70\n00:03:19.200 --> 00:03:20.265\nThat's a fun sentence to say.\n\n71\n00:03:20.265 --> 00:03:22.640\n[LAUGH] So if you see a do,\nif you type do,\n\n72\n00:03:22.640 --> 00:03:26.850\nyou better have a corresponding done with\nit, or you're not gonna have a good time.\n\n73\n00:03:26.850 --> 00:03:28.260\nYour scripts are gonna break on you.\n\n74\n00:03:28.260 --> 00:03:32.400\nAll right, so let's look at this syntax,\nlet's see how it works itself out, and\n\n75\n00:03:32.400 --> 00:03:34.920\nthen we'll run it and see how it works.\n\n76\n00:03:34.920 --> 00:03:38.350\nSo what I'm gonna do is I'm gonna take\na look at this nest.sh thing we got\n\n77\n00:03:38.350 --> 00:03:39.230\ngoing on.\n\n78\n00:03:39.230 --> 00:03:43.960\nVim nest.sh, and here we go,\nwe're in the script.\n\n79\n00:03:43.960 --> 00:03:47.925\nWe've got a for loop going on,\nand it's in C style.\n\n80\n00:03:47.925 --> 00:03:53.700\nWow, love that C style, so\nnice and C-like, very great.\n\n81\n00:03:53.700 --> 00:03:55.110\nAnd I've got my for loop happening.\n\n82\n00:03:55.110 --> 00:03:59.390\nAnd when I get to my do block,\nI see echo starting loop, and\n\n83\n00:03:59.390 --> 00:04:01.680\nthen whatever a's value is, right.\n\n84\n00:04:01.680 --> 00:04:04.670\nAnd this could be whatever you make it,\nobviously.\n\n85\n00:04:04.670 --> 00:04:08.340\nAnd then I say another C style for loop.\n\n86\n00:04:08.340 --> 00:04:11.110\nI've put a loop inside of a loop,\nand I just started,\n\n87\n00:04:11.110 --> 00:04:14.780\njust like I did if it were at\nthe beginning of my script.\n\n88\n00:04:14.780 --> 00:04:18.860\nI would say, for and\nthen I have another variable.\n\n89\n00:04:18.860 --> 00:04:22.152\nAgain, be careful with your variables, you\nprobably don't wanna reuse your variables.\n\n90\n00:04:22.152 --> 00:04:25.270\nMaybe you do, but if you do you've\ngotta make sure that's what you wanted.\n\n91\n00:04:25.270 --> 00:04:28.940\nIs that you wanted to reuse your variable\ncuz its gonna change it if you do.\n\n92\n00:04:28.940 --> 00:04:31.850\nI don't so I just created a new variable,\n\n93\n00:04:31.850 --> 00:04:35.370\nkind of echoing what's\nhappened up in here.\n\n94\n00:04:35.370 --> 00:04:37.270\nSo we're going to have one iteration and\n\n95\n00:04:37.270 --> 00:04:39.870\ninside of that we're gonna\nhave a loop iterating as well.\n\n96\n00:04:39.870 --> 00:04:41.660\nSo we're going to hit\nthe first iteration and\n\n97\n00:04:41.660 --> 00:04:44.210\nit's going to loop there,\ngive me that output.\n\n98\n00:04:44.210 --> 00:04:48.676\nThen it's going to loop again and\nthen loop inside of that.\n\n99\n00:04:48.676 --> 00:04:50.867\nAnd it's going to loop again and it's\ngoing to loop inside of that, right, so\n\n100\n00:04:50.867 --> 00:04:52.140\nthat's how it should work out.\n\n101\n00:04:52.140 --> 00:04:53.380\nThat's the idea.\n\n102\n00:04:53.380 --> 00:04:56.570\nSo a = 1 as long as a &lt;= 3.\n\n103\n00:04:56.570 --> 00:05:02.000\nDo this which is echo starting loop a and\nthen the for\n\n104\n00:05:02.000 --> 00:05:07.070\nloop b = 1 while b is &lt;=\nto 3 echo Inside loop.\n\n105\n00:05:07.070 --> 00:05:11.610\nSo this is gonna let me know when I'm\ninside, when I'm in that inside loop,\n\n106\n00:05:11.610 --> 00:05:14.180\nright, when I've kind\nof dodged down into it.\n\n107\n00:05:14.180 --> 00:05:17.420\nAnd then it's gonna let me know when\nI've started a new main loop, okay.\n\n108\n00:05:17.420 --> 00:05:20.270\nSo that's what it should look like,\nvery simple syntax.\n\n109\n00:05:20.270 --> 00:05:22.650\nAnd as long as you keep\nthe logic straight in your head.\n\n110\n00:05:22.650 --> 00:05:27.430\nLike, okay, I'm looping,\nI need to do a loop inside that loop.\n\n111\n00:05:27.430 --> 00:05:30.970\nAnd a lot of times you can just kinda\ngive yourself some output to help\n\n112\n00:05:30.970 --> 00:05:32.880\nremind you that that's what's happening.\n\n113\n00:05:32.880 --> 00:05:35.950\nSo if anything breaks,\ngo back into those loops.\n\n114\n00:05:35.950 --> 00:05:38.760\nGive yourself some output that will\nlet you know where you're at so\n\n115\n00:05:38.760 --> 00:05:40.040\nthat you can find out\nwhere it breaks down.\n\n116\n00:05:41.410 --> 00:05:44.430\nBut if everything goes to plan,\nI should get that kind of output.\n\n117\n00:05:44.430 --> 00:05:46.990\nLet's see what it looks\nlike when we run it.\n\n118\n00:05:46.990 --> 00:05:47.655\nHere we go.\n\n119\n00:05:47.655 --> 00:05:51.700\n./nest.sh and there we go.\n\n120\n00:05:51.700 --> 00:05:53.770\nSo the loop starts.\n\n121\n00:05:53.770 --> 00:05:59.130\nThis is starting loop one, so\na = 1, great, that's cuz it's\n\n122\n00:05:59.130 --> 00:06:04.050\nechoing a, starting loop\nwhatever's in that value of a.\n\n123\n00:06:04.050 --> 00:06:08.990\nThen it jumps to that inside loop,\nfor b1, do this,\n\n124\n00:06:08.990 --> 00:06:12.640\necho Inside loop, so\nwe see that, Inside loop,\n\n125\n00:06:12.640 --> 00:06:18.230\nthat tells me 1 because at\nthis point in time, b=1.\n\n126\n00:06:18.230 --> 00:06:22.710\nBut then it iterates because inside\nloop great, I have a done command,\n\n127\n00:06:22.710 --> 00:06:25.320\nit's gonna go back and check,\nis this condition met?\n\n128\n00:06:26.540 --> 00:06:28.530\nIs b still less than or equal to 3?\n\n129\n00:06:28.530 --> 00:06:33.737\nWell now was because we iterated\nusing the iterator, the b++,\n\n130\n00:06:33.737 --> 00:06:39.905\nthat post increment, it now equals 2\nwhich is still less than or equal to 3.\n\n131\n00:06:39.905 --> 00:06:41.630\nSo it's gonna run the loop again.\n\n132\n00:06:41.630 --> 00:06:43.290\nSo we get that, there it is.\n\n133\n00:06:43.290 --> 00:06:46.980\nInside loop two, it's gonna iterate.\n\n134\n00:06:46.980 --> 00:06:50.960\nOur condition says less than or\nequal to three.\n\n135\n00:06:50.960 --> 00:06:53.925\nSince it does now,\nb does now equal three at this point,\n\n136\n00:06:53.925 --> 00:06:56.650\nbecause the post decrement\nincrementer did that.\n\n137\n00:06:58.767 --> 00:07:01.500\nNow it equals three, you're off\nto the races, it prints that out.\n\n138\n00:07:01.500 --> 00:07:04.480\nOnce it's done with that,\nit jumps back out to the main loop, and\n\n139\n00:07:04.480 --> 00:07:05.750\ndoes its next iteration.\n\n140\n00:07:05.750 --> 00:07:10.780\nSo it's not until all the commands inside\nthat do done block are done does it\n\n141\n00:07:10.780 --> 00:07:16.200\nactually go to it's increment, right.\n\n142\n00:07:16.200 --> 00:07:17.560\nSo it did that inside of here.\n\n143\n00:07:17.560 --> 00:07:22.456\nOnce it found that condition to be true or\nvalid, it dropped back down and\n\n144\n00:07:22.456 --> 00:07:25.845\nreleased it and\nallowed this iterator do its job.\n\n145\n00:07:25.845 --> 00:07:28.583\nWhich gave us starting loop two,\nstarting loop three, and\n\n146\n00:07:28.583 --> 00:07:31.580\nthen it rerun those loops for\neach one of those main loops.\n\n147\n00:07:31.580 --> 00:07:35.290\nSo that's how you basically shove\nsome stuff inside of stuff.\n\n148\n00:07:35.290 --> 00:07:37.245\nI want to put those Russian dolls there,\nright.\n\n149\n00:07:37.245 --> 00:07:38.450\n&gt;&gt; [LAUGH]\n&gt;&gt; I want to just keep pop and\n\n150\n00:07:38.450 --> 00:07:40.900\ngo, that one's pretty,\nthat one's nice, right.\n\n151\n00:07:40.900 --> 00:07:41.590\nThat's what we're doing.\n\n152\n00:07:41.590 --> 00:07:45.906\nSo when you need to run stuff inside of\na loop, I've got, I can run this loop,\n\n153\n00:07:45.906 --> 00:07:48.931\nyou can just slam it in there and\nit should work just fine.\n\n154\n00:07:48.931 --> 00:07:53.641\nJust be aware, if you start screwing\naround with variables, it could break.\n\n155\n00:07:53.641 --> 00:07:58.332\nOr if you don't use that done for\nevery do block, It could break as well.\n\n156\n00:07:58.332 --> 00:08:01.340\n&gt;&gt; Yeah I find that any time you\ndo nesting, it's very effective,\n\n157\n00:08:01.340 --> 00:08:04.530\nit works great, but it does require\na little extra debugging time.\n\n158\n00:08:04.530 --> 00:08:07.930\nUsually I'll throw in a bunch\nof extra echo statements or\n\n159\n00:08:07.930 --> 00:08:10.820\nwhatever just to be able to go in to test\nand check to make everything is working.\n\n160\n00:08:10.820 --> 00:08:13.895\nBut once you get it done, you can\nreally achieve some powerful things.\n\n161\n00:08:13.895 --> 00:08:16.080\nAnd, here you're doing nested loops.\n\n162\n00:08:16.080 --> 00:08:17.490\nRemember we can always mix and match.\n\n163\n00:08:17.490 --> 00:08:19.444\nWe have got if statements,\nthen fire off a loop,\n\n164\n00:08:19.444 --> 00:08:22.126\nthen fires up another if statement and\nthen fires up another loop.\n\n165\n00:08:22.126 --> 00:08:26.240\nAnd you can really nest deeply with this\nstuff and create a powerful solution.\n\n166\n00:08:26.240 --> 00:08:27.312\nNow, all right.\n\n167\n00:08:27.312 --> 00:08:29.000\n&gt;&gt; I was gonna say that I really\nlike what you said there.\n\n168\n00:08:29.000 --> 00:08:33.000\nAnd leading to that basically this whole\nseries, I'm trying to build you guys up.\n\n169\n00:08:33.000 --> 00:08:36.440\nGive you a tool and go,\nman I can put these together and\n\n170\n00:08:36.440 --> 00:08:39.125\nmake a more robust solution to my problem.\n\n171\n00:08:39.125 --> 00:08:41.860\nBut now that I know the ifs and\nloops can work together.\n\n172\n00:08:41.860 --> 00:08:45.270\nNow that I know that I can nest loops and\nI can put ifs inside of those and\n\n173\n00:08:45.270 --> 00:08:49.480\nnest ifs inside of those ifs and\nnest more loops and go crazy.\n\n174\n00:08:49.480 --> 00:08:53.010\nYou just have to follow that logic out and\nthat's what we're trying to show you.\n\n175\n00:08:53.010 --> 00:08:57.960\n&gt;&gt; Now I mentioned debugging, and with\ndebugging one thing we might wanna watch\n\n176\n00:08:57.960 --> 00:09:00.730\nfor is when we've gotten caught\nin one of these infinite loops.\n\n177\n00:09:00.730 --> 00:09:02.280\nWe're just going on and on and on.\n\n178\n00:09:02.280 --> 00:09:06.300\nSo it's pretty common that we put a little\nextra logic in there to be able to check\n\n179\n00:09:06.300 --> 00:09:08.570\nwhether or not we should even\nbe continuing the loop, right?\n\n180\n00:09:08.570 --> 00:09:09.760\n&gt;&gt; Yeah, I do that all the time.\n\n181\n00:09:09.760 --> 00:09:12.380\nLike you said, sometimes you can\njust throw an echo in there,\n\n182\n00:09:12.380 --> 00:09:13.420\nwhich will help you.\n\n183\n00:09:13.420 --> 00:09:17.440\nMaybe this variable here, maybe b1\nisn't coming out to what I thought.\n\n184\n00:09:17.440 --> 00:09:19.480\nAnd, therefore,\nthe loop is breaking, right?\n\n185\n00:09:19.480 --> 00:09:23.060\nI can say echo b1, and then use b1.\n\n186\n00:09:23.060 --> 00:09:26.580\nAnd if I see that come up,\nthe first thing it's gonna do is echo b1,\n\n187\n00:09:26.580 --> 00:09:29.260\nlet me know is that\nwhat I expect it to be?\n\n188\n00:09:29.260 --> 00:09:32.150\nThat's a great way to debug,\nI do that a lot.\n\n189\n00:09:32.150 --> 00:09:33.740\nWe can also do some other things as well.\n\n190\n00:09:33.740 --> 00:09:38.140\nMaybe, I don't want to continue my loops.\n\n191\n00:09:38.140 --> 00:09:40.550\nI've reached the value\nthat I'm looking for,\n\n192\n00:09:40.550 --> 00:09:45.410\nand I want it to stop,\nthat could be a part of my day.\n\n193\n00:09:46.620 --> 00:09:49.930\nWhat do I do?\nThe problem is that loops tell you,\n\n194\n00:09:49.930 --> 00:09:53.170\nuntil this condition has been met,\nI'm hard charging.\n\n195\n00:09:53.170 --> 00:09:56.590\nI'm flying out of the gate\nas fast as I can and\n\n196\n00:09:56.590 --> 00:10:00.240\nI'll give you the output you're looking\nfor but I'm going to finish myself.\n\n197\n00:10:00.240 --> 00:10:05.910\nBut what if I want to go,\nonce you reached a certain portion,\n\n198\n00:10:05.910 --> 00:10:10.390\nmaybe I want to get to that b and know\nwhat's happening at that point in time.\n\n199\n00:10:10.390 --> 00:10:12.360\nWhat am I to do,\nI'm going to stop the loop and.\n\n200\n00:10:12.360 --> 00:10:13.960\nIt'll make it quit there, what do I do?\n\n201\n00:10:13.960 --> 00:10:15.720\nYou cam imply the break command.\n\n202\n00:10:15.720 --> 00:10:17.760\nBreak is a really great tool.\n\n203\n00:10:17.760 --> 00:10:21.950\nIt's really good for when you,\nI don't wanna say this,\n\n204\n00:10:21.950 --> 00:10:28.450\nthere is no good reason to\ncontinue the loop, right.\n\n205\n00:10:28.450 --> 00:10:30.900\nI've met what I want,\nI've found what I'm looking for,\n\n206\n00:10:30.900 --> 00:10:33.410\nI might not have known it in the onset.\n\n207\n00:10:33.410 --> 00:10:36.190\nBut, now that you've discovered that for\nme, I'm ready to stop.\n\n208\n00:10:36.190 --> 00:10:39.190\nI don't need you to keep going,\nI need you to stop.\n\n209\n00:10:39.190 --> 00:10:42.380\nYou do that for debugging,\nit's great for that, or we can just say,\n\n210\n00:10:42.380 --> 00:10:45.350\n\"I've reached where I want to go.\n\n211\n00:10:45.350 --> 00:10:48.270\nAnd there's no good reason to\ncontinue on with the loop.\"\n\n212\n00:10:48.270 --> 00:10:50.280\nWe can use that break command\nLet's take a look at that.\n\n213\n00:10:50.280 --> 00:10:54.406\nLet me get out of here.\n\n214\n00:10:54.406 --> 00:10:59.130\nI've got this break loop dot SH script\nI've written so let's look at that.\n\n215\n00:10:59.130 --> 00:11:03.640\nBreak loop dot SH, and\nhere's what's going on.\n\n216\n00:11:03.640 --> 00:11:06.100\nJust a simple for loop, right?\n\n217\n00:11:06.100 --> 00:11:07.600\nGood bash style.\n\n218\n00:11:07.600 --> 00:11:09.880\nFour var one in, one, two, three,\nfour, five, six, seven, eight, nine.\n\n219\n00:11:10.920 --> 00:11:15.260\nIt says, if var1 = 5, then break.\n\n220\n00:11:15.260 --> 00:11:17.050\nSo what's gonna happen?\n\n221\n00:11:17.050 --> 00:11:19.140\nThe for loop is gonna start\nlooking at that array, right?\n\n222\n00:11:19.140 --> 00:11:22.940\nIt's gonna start slamming our\nvalues into that var1 variable.\n\n223\n00:11:22.940 --> 00:11:26.080\nIt's gonna start with 1,\nit's gonna go to 2,\n\n224\n00:11:26.080 --> 00:11:29.360\nit's gonna go to 3,\nit's gonna go 4 then 5.\n\n225\n00:11:29.360 --> 00:11:31.710\nIf this is 1,000 numbers or 1,000 values.\n\n226\n00:11:31.710 --> 00:11:33.484\nAnd maybe I'm reading it from a file,\n\n227\n00:11:33.484 --> 00:11:37.170\nI'm reading it out from using file\nlobbing using those wild cards.\n\n228\n00:11:37.170 --> 00:11:39.900\nI'm looking for a specific file, but\n\n229\n00:11:39.900 --> 00:11:42.860\nI do not know where exactly it is,\nor if it even exists.\n\n230\n00:11:43.920 --> 00:11:47.950\nI want it to say, once I've reached\na certain condition, which is this,\n\n231\n00:11:47.950 --> 00:11:53.069\nif our one equals five,\nif our one equals file name, right?\n\n232\n00:11:53.069 --> 00:11:56.540\nThen, break, stop the loop.\n\n233\n00:11:56.540 --> 00:11:59.200\nGo ahead and\ngive it permission to say I'm done.\n\n234\n00:11:59.200 --> 00:12:00.320\n&gt;&gt; And, remember that if statement.\n\n235\n00:12:00.320 --> 00:12:03.100\nNow it can be completely unrelated\nto whatever your increment is.\n\n236\n00:12:03.100 --> 00:12:05.450\nSo, for example,\nI'll tell you how I use this.\n\n237\n00:12:05.450 --> 00:12:07.135\n&gt;&gt; Yeah.\n&gt;&gt; I write scripts all the time to back up\n\n238\n00:12:07.135 --> 00:12:07.767\nfiles, right?\n\n239\n00:12:07.767 --> 00:12:09.101\nSo, I want to back up a bunch of files.\n\n240\n00:12:09.101 --> 00:12:12.490\nI want to zip them up or\ndo a tar g zip, so a tgz.\n\n241\n00:12:12.490 --> 00:12:13.880\nWell, I need disk space to do that.\n\n242\n00:12:13.880 --> 00:12:14.700\n&gt;&gt; You do.\n&gt;&gt; So,\n\n243\n00:12:14.700 --> 00:12:17.360\nI might have a loop that is\ngoing through and looking for\n\n244\n00:12:17.360 --> 00:12:20.540\nall these different log files, and\ncreating individual archives for them.\n\n245\n00:12:20.540 --> 00:12:22.350\nSo I wanna create a thousand of these.\n\n246\n00:12:22.350 --> 00:12:26.030\nBut I also wanna pay attention to disk\nspace cuz if I'm running out of disk space\n\n247\n00:12:26.030 --> 00:12:28.880\nthere's no point in continuing the loop,\ncuz they're all just gonna fail.\n\n248\n00:12:28.880 --> 00:12:32.390\nSo, my loop would be how\nmany files there are.\n\n249\n00:12:32.390 --> 00:12:34.270\nI want a loop for each file that exists.\n\n250\n00:12:34.270 --> 00:12:37.380\nBut then my break check is\nbasically checking for disk space.\n\n251\n00:12:37.380 --> 00:12:40.860\nAnd if my disk space gets below a certain\npoint, then I need to break that loop.\n\n252\n00:12:40.860 --> 00:12:43.310\nDon't keep trying to back up,\nit's just gonna fail.\n\n253\n00:12:43.310 --> 00:12:47.070\nSo they can be completely unrelated,\nbut one determines whether or\n\n254\n00:12:47.070 --> 00:12:48.310\nnot we should do the other.\n\n255\n00:12:48.310 --> 00:12:51.707\nThe handy way to break out of that\nloop but I like your example better,\n\n256\n00:12:51.707 --> 00:12:53.757\nif you're writing a script that's gonna\n\n257\n00:12:53.757 --> 00:12:55.470\nrun on 10,000 things,\n&gt;&gt; [LAUGH]\n\n258\n00:12:55.470 --> 00:12:56.620\n&gt;&gt; Why not break after\n\n259\n00:12:56.620 --> 00:13:00.830\nten while you're testing, in that way if\nyou screw it up, you only screw up ten,\n\n260\n00:13:00.830 --> 00:13:02.510\nit's another great way to handle that.\n\n261\n00:13:02.510 --> 00:13:04.530\n&gt;&gt; Yeah,\nI came up with a couple examples for\n\n262\n00:13:04.530 --> 00:13:08.440\nthis just so we can kind of like But I'm\ntrying to ease us into the break waters.\n\n263\n00:13:08.440 --> 00:13:10.970\nCuz it can be a little confusing\nat first for a lot of people.\n\n264\n00:13:10.970 --> 00:13:13.010\nSo I wanna make sure you\nguys understand this.\n\n265\n00:13:13.010 --> 00:13:15.660\nSo I'm gonna give you just a couple\nexamples of this break idea.\n\n266\n00:13:15.660 --> 00:13:19.260\nThis one, let's run this one,\nsee how it looks with output,\n\n267\n00:13:19.260 --> 00:13:21.910\nand then we'll look at\nthose other examples.\n\n268\n00:13:21.910 --> 00:13:22.830\nSo let me clear this out here.\n\n269\n00:13:24.560 --> 00:13:31.796\nAnd we'll run this guy,\nthis is break_loop.sh, so break_loop.sh.\n\n270\n00:13:31.796 --> 00:13:35.910\nI fire it off, it basically says\nIteration 1, Iteration 2, Iteration 3, 4,\n\n271\n00:13:35.910 --> 00:13:38.900\nit gets to 5, and what happens?\n\n272\n00:13:38.900 --> 00:13:43.370\nIt stops, so the break command came\ninto play because that if statement,\n\n273\n00:13:43.370 --> 00:13:46.130\nthat test value, was satisfied.\n\n274\n00:13:46.130 --> 00:13:49.070\nAnd therefore issued the break\nletting you know okay we're done we\n\n275\n00:13:49.070 --> 00:13:50.880\ndon't need to go any further.\n\n276\n00:13:50.880 --> 00:13:55.830\nLet's take a look at this one here I\nmean escape here and we'll bring up\n\n277\n00:13:57.780 --> 00:14:04.460\nbreak names, gotta search maybe\nsomething a little more robust.\n\n278\n00:14:04.460 --> 00:14:10.020\nSo we got a counter we got this names\nvalues which uses command substitution so\n\n279\n00:14:10.020 --> 00:14:12.420\nit's carting this names file.\n\n280\n00:14:12.420 --> 00:14:18.100\nInteresting, for var1 in names, so\nI'm feeding that as a list, that variable.\n\n281\n00:14:18.100 --> 00:14:20.840\nAnd I'm doing this,\nI'm saying, increment counter.\n\n282\n00:14:20.840 --> 00:14:26.560\nAnd if var1 = Heather,\nthen do Name: Heather found!,\n\n283\n00:14:26.560 --> 00:14:31.190\nmake a directory called\nheather in the tmp dir.\n\n284\n00:14:31.190 --> 00:14:35.120\nAnd the echo iteration number so\nthat I know where it was that found, okay?\n\n285\n00:14:35.120 --> 00:14:36.040\nAnd then break.\n\n286\n00:14:36.040 --> 00:14:38.980\nSo once I find Heather in this\nlost of names, we're gonna hear.\n\n287\n00:14:38.980 --> 00:14:43.220\nI'll show you what that looks like,\nCat names, txt.\n\n288\n00:14:43.220 --> 00:14:45.680\nWell, it's just a random list of names.\n\n289\n00:14:45.680 --> 00:14:49.980\nBut if I'm looking for one specifically,\nit may be this is again, a thousand names.\n\n290\n00:14:50.980 --> 00:14:51.650\nWho knows?\n\n291\n00:14:51.650 --> 00:14:52.440\nIt could be that long.\n\n292\n00:14:52.440 --> 00:14:53.940\nI'm not going to sit here and\nscroll through this.\n\n293\n00:14:53.940 --> 00:14:55.680\nGuess script will do that for me.\n\n294\n00:14:55.680 --> 00:14:58.580\nBut this is for demonstrative purposes.\n\n295\n00:14:58.580 --> 00:15:01.560\n&gt;&gt; But if it's a unique list like this\nwhere Heather is only going to occur in\n\n296\n00:15:01.560 --> 00:15:03.440\nthere once, when you find Heather.\n\n297\n00:15:03.440 --> 00:15:07.300\nThere is no need to parse through\nthe rest you can save a lot of resources.\n\n298\n00:15:07.300 --> 00:15:10.030\nIf Heather occurred more\nthan once on the list,\n\n299\n00:15:10.030 --> 00:15:12.440\nthen we'd need that loop to\ncontinue on to be able to check.\n\n300\n00:15:12.440 --> 00:15:14.790\nSo you need to understand your\ndata to understand whether or\n\n301\n00:15:14.790 --> 00:15:15.860\nnot you want to break out or not.\n\n302\n00:15:15.860 --> 00:15:19.420\n&gt;&gt; Exactly, and that's what we're trying\nto get across to you good folks today.\n\n303\n00:15:19.420 --> 00:15:22.680\nSo let's run this and let's see if it\ndoes what it is I'm looking for, and\n\n304\n00:15:22.680 --> 00:15:23.800\nsee how that works.\n\n305\n00:15:23.800 --> 00:15:25.710\nSo I will clear, clear.\n\n306\n00:15:25.710 --> 00:15:29.895\nThere we go, and run for\non a, I'll use a break.\n\n307\n00:15:29.895 --> 00:15:32.070\nBreak_names.sh.\n\n308\n00:15:32.070 --> 00:15:38.120\nAnd look at that, it says Heather\nwas found, iteration number was 35.\n\n309\n00:15:38.120 --> 00:15:42.702\nSo the 35th variable in that\narray that I fed it from that\n\n310\n00:15:42.702 --> 00:15:47.581\nvalue in that variable,\nwas the word Heather, it found it.\n\n311\n00:15:47.581 --> 00:15:54.824\nAnd now, if I do an ls/tmp I should\nalso have a directory called Heaven.\n\n312\n00:15:54.824 --> 00:15:58.023\nSo it did all the stuff I was looking for,\nso maybe I'm doing that,\n\n313\n00:15:58.023 --> 00:15:59.410\nmaybe I'm creating users.\n\n314\n00:15:59.410 --> 00:16:02.531\nSomething like that, this is where that\nkinda thing can come in really handy.\n\n315\n00:16:02.531 --> 00:16:05.000\nI got one more that I wanna\nshow you when it comes to this.\n\n316\n00:16:05.000 --> 00:16:09.819\nIt's a little file integrity checker that\nI created to make sure that the files\n\n317\n00:16:09.819 --> 00:16:13.483\nhave not been modified since\nthe last time I looked at them.\n\n318\n00:16:13.483 --> 00:16:14.095\nKind of cool thing.\n\n319\n00:16:14.095 --> 00:16:16.751\nLet's look at the code on that.\n\n320\n00:16:16.751 --> 00:16:17.627\nq.\n\n321\n00:16:17.627 --> 00:16:20.883\nAnd we'll say it is checker.sh.\n\n322\n00:16:20.883 --> 00:16:24.241\nSo vim checker.sh.\n\n323\n00:16:24.241 --> 00:16:28.865\nA little bit more going on inside of this\nscript because this is more like an actual\n\n324\n00:16:28.865 --> 00:16:30.506\nscript that you might view.\n\n325\n00:16:30.506 --> 00:16:34.662\nLooking at this really quickly,\nI see I've got my good=1, my check.\n\n326\n00:16:34.662 --> 00:16:35.181\nAnd basically.\n\n327\n00:16:35.181 --> 00:16:40.522\nwhat I'm doing is I'm MD5ing a list of\nfiles, I'm looking at those values.\n\n328\n00:16:40.522 --> 00:16:45.147\nI'm figuring those files into the MD5\nchecksum and seeing what they come out as.\n\n329\n00:16:45.147 --> 00:16:48.230\nIf they come out as this,\nas what they should be,\n\n330\n00:16:48.230 --> 00:16:53.145\nthis is the value I should see as an MD5\nvalue, then it's gonna do one thing.\n\n331\n00:16:53.145 --> 00:16:55.289\nIf it doesn't,\nit's gonna do something else.\n\n332\n00:16:55.289 --> 00:16:59.377\nI'm using a list here, so\nI'll say file, ls file.* or file*,\n\n333\n00:16:59.377 --> 00:17:01.577\nusing that file globbing, right?\n\n334\n00:17:01.577 --> 00:17:04.731\nAnything that starts with file and\nanything after that,\n\n335\n00:17:04.731 --> 00:17:07.103\nthat's what I wanna feed into my for loop.\n\n336\n00:17:07.103 --> 00:17:10.672\nSo for im files, do this md5,\ncut that loop for\n\n337\n00:17:10.672 --> 00:17:14.347\na specific field and\nthen we're gonna do check.\n\n338\n00:17:14.347 --> 00:17:17.040\nHere's that good old not statement, right?\n\n339\n00:17:17.040 --> 00:17:18.066\nRemember that?\n\n340\n00:17:18.066 --> 00:17:21.050\nIf you see exclamation points,\na lot of times that means not this.\n\n341\n00:17:21.050 --> 00:17:26.925\nSo not equal check, whatever's in check,\nwhich is this value here.\n\n342\n00:17:26.925 --> 00:17:31.250\nIf it does hit that, then it says,\necho FAILED CHECK and\n\n343\n00:17:31.250 --> 00:17:35.683\nthen we decrement the good and\nthrow a break at it, okay?\n\n344\n00:17:35.683 --> 00:17:37.828\nOtherwise, it's gonna go into this if.\n\n345\n00:17:37.828 --> 00:17:39.934\nAnd it'll say, all checks passed.\n\n346\n00:17:39.934 --> 00:17:41.780\nIf you get this value,\nthen you're gonna get,\n\n347\n00:17:41.780 --> 00:17:44.657\nuh-oh, basically some kinda catcher\njust to see what happens, right?\n\n348\n00:17:44.657 --> 00:17:48.321\nAnd then, of course, if everything\ngoes haywire, something went wrong.\n\n349\n00:17:48.321 --> 00:17:52.902\nAnd let me know what this value is\nbecause that's what's controlling\n\n350\n00:17:52.902 --> 00:17:54.540\nthis statement, okay?\n\n351\n00:17:54.540 --> 00:17:57.470\nLet's see what happens,\nDon, fingers crossed.\n\n352\n00:17:57.470 --> 00:18:02.267\nAs always, this one's called checker.sh,\n\n353\n00:18:02.267 --> 00:18:08.125\nLook at that, uh-oh, file for\ndid not meet the criteria.\n\n354\n00:18:08.125 --> 00:18:11.168\nThat means I did that md5 against it.\n\n355\n00:18:11.168 --> 00:18:14.773\nIf it goes fine I don't wanna see\nthe output, just keep on rocking.\n\n356\n00:18:14.773 --> 00:18:18.830\nBut if it does fail, I wanna see that,\nI wanna know which one that is.\n\n357\n00:18:18.830 --> 00:18:22.924\nSo let me know if the file for had a\nproblem and I need to do some modification\n\n358\n00:18:22.924 --> 00:18:26.173\nin that file or take a look at\nthe last time it was modified.\n\n359\n00:18:26.173 --> 00:18:30.210\nWho is messing with this file because\nits integrity has been compromised based\n\n360\n00:18:30.210 --> 00:18:31.625\noff of that empty md5 sum?\n\n361\n00:18:31.625 --> 00:18:33.926\nSo a little way in which\nyou can use that break,\n\n362\n00:18:33.926 --> 00:18:37.002\nit broke out of the loop, so\nlet me know, hey, I need to stop.\n\n363\n00:18:37.002 --> 00:18:39.482\nI found a problem that you're looking for.\n\n364\n00:18:39.482 --> 00:18:41.314\nI'm gonna stop looping and\nlet you know about it.\n\n365\n00:18:41.314 --> 00:18:43.008\nSo that's how I use break here.\n\n366\n00:18:43.008 --> 00:18:46.585\n&gt;&gt; Now, I know break isn't\nthe only way to stop a loop.\n\n367\n00:18:46.585 --> 00:18:50.330\nAnd there's another one that I usually\nconfuse with it, it's continue, right?\n\n368\n00:18:50.330 --> 00:18:51.764\n&gt;&gt; [LAUGH]\n&gt;&gt; So can you tell us,\n\n369\n00:18:51.764 --> 00:18:54.649\nhelp me understand that cuz\nI mix this up all the time.\n\n370\n00:18:54.649 --> 00:18:57.309\n&gt;&gt; Yeah.\nContinue, you think, well, continue and\n\n371\n00:18:57.309 --> 00:18:59.401\nbreak, well, what's going on here?\n\n372\n00:18:59.401 --> 00:19:05.129\nBreak, I know it stops it, but continue\nkind of stops it as well and does stuff.\n\n373\n00:19:05.129 --> 00:19:07.652\nSo, how do I know which one to use?\n\n374\n00:19:07.652 --> 00:19:12.199\nThe good question about that is or\nthe good answer to that is,\n\n375\n00:19:12.199 --> 00:19:15.239\nis if I want the loop to stop completely.\n\n376\n00:19:15.239 --> 00:19:16.962\nI don't want it to continue at all.\n\n377\n00:19:16.962 --> 00:19:20.687\nLike we saw in the checker,\nthen I'm gonna use break.\n\n378\n00:19:20.687 --> 00:19:23.928\nBut if I say I want\nthe loop to do something,\n\n379\n00:19:23.928 --> 00:19:28.262\nI wanna find something kinda\nlike with our Heather idea.\n\n380\n00:19:28.262 --> 00:19:30.297\nI need you to find Heather for me.\n\n381\n00:19:30.297 --> 00:19:32.091\nWhat if there's more than one Heather?\n\n382\n00:19:32.091 --> 00:19:34.809\nWhat if I want to know all\nthe Heathers in the file?\n\n383\n00:19:34.809 --> 00:19:37.035\nContinue is the person you want to go to.\n\n384\n00:19:37.035 --> 00:19:39.090\nThat's the function\nthat you're gonna need.\n\n385\n00:19:39.090 --> 00:19:43.204\nCuz what continue is gonna do,\nit's gonna say, okay,\n\n386\n00:19:43.204 --> 00:19:48.454\nI'm gonna run my loop, if I find\na condition that you're looking for,\n\n387\n00:19:48.454 --> 00:19:53.443\nI'm gonna stop and I'm gonna do\nsome commands, but you might still\n\n388\n00:19:53.443 --> 00:19:58.463\nwant me to continue to do the loop and\nlook for that condition again.\n\n389\n00:19:58.463 --> 00:19:59.456\nContinue I should do that.\n\n390\n00:19:59.456 --> 00:20:03.039\nSo instead of using the work break,\nI'll just use the word continue and\n\n391\n00:20:03.039 --> 00:20:06.264\nthen once it does those commands,\nit will jump back into loop and\n\n392\n00:20:06.264 --> 00:20:10.225\nstart cranking out again, just in case\nyou need to find that condition again.\n\n393\n00:20:10.225 --> 00:20:14.891\n&gt;&gt; So continue is really just ending that\niteration versus break that's ending\n\n394\n00:20:14.891 --> 00:20:16.406\nthe whole loop, right?\n\n395\n00:20:16.406 --> 00:20:17.999\n&gt;&gt; Yes, exactly right.\n\n396\n00:20:17.999 --> 00:20:22.483\nBreak is that hard and fast,\nwe're done, forget it, stop this loop.\n\n397\n00:20:22.483 --> 00:20:25.417\nOr continue is I want you to\nstop the loop, kinda put it and\n\n398\n00:20:25.417 --> 00:20:27.017\nhit the pause button, right?\n\n399\n00:20:27.017 --> 00:20:28.855\nTwo little lines there, hit that for me.\n\n400\n00:20:28.855 --> 00:20:32.131\nI'm gonna do something over here and\nwhen I'm done, we'll jump back in and\n\n401\n00:20:32.131 --> 00:20:33.419\ncontinue what we're doing.\n\n402\n00:20:33.419 --> 00:20:37.007\nSo think of it more like a pause\nbutton inside of your loop.\n\n403\n00:20:37.007 --> 00:20:38.009\nThat's the continue button.\n\n404\n00:20:38.009 --> 00:20:41.585\nAll right, so, let's look at that code and\nsee how that works out.\n\n405\n00:20:41.585 --> 00:20:45.951\nLet me get out of this checker guy and\nclear.\n\n406\n00:20:45.951 --> 00:20:50.389\nAnd we will look at something I made\ncalled continue names or cont names.\n\n407\n00:20:50.389 --> 00:20:54.883\nSo vim cont_names.sh.\n\n408\n00:20:54.883 --> 00:20:59.774\nLooking very similar to our\nprevious Heather or what was it?\n\n409\n00:20:59.774 --> 00:21:02.049\nCheck names or something like that?\n\n410\n00:21:02.049 --> 00:21:02.879\nBreak names, that's what it was.\n\n411\n00:21:02.879 --> 00:21:05.835\nIt looks a lot like our\nbreak names script.\n\n412\n00:21:05.835 --> 00:21:07.495\nAlmost identical, as a matter of fact.\n\n413\n00:21:07.495 --> 00:21:12.019\nActually, I believe it is identical,\nexcept for one small factor,\n\n414\n00:21:12.019 --> 00:21:15.062\nwhich is this continue\nstatement right here.\n\n415\n00:21:15.062 --> 00:21:16.949\nSo instead of break here, we put continue.\n\n416\n00:21:16.949 --> 00:21:20.620\nSo what it's gonna do now is it's gonna\nlook through that list of names and\n\n417\n00:21:20.620 --> 00:21:23.423\nwe're gonna through names.text,\ncat names.text.\n\n418\n00:21:23.423 --> 00:21:25.222\nIt's gonna look through there and\n\n419\n00:21:25.222 --> 00:21:28.149\nit's gonna find Heather at\nthe 35th line right here.\n\n420\n00:21:28.149 --> 00:21:31.087\nBut are there any other Heathers?\n\n421\n00:21:31.087 --> 00:21:32.310\nI don't know, we'll see.\n\n422\n00:21:32.310 --> 00:21:35.071\nLook at the bottom of the script,\nthere is another Heather.\n\n423\n00:21:35.071 --> 00:21:37.960\nSo it should be able to jump back\nin that script and find that and\n\n424\n00:21:37.960 --> 00:21:39.803\nlet me know about that Heather as well.\n\n425\n00:21:39.803 --> 00:21:42.069\nAnd then run whatever commands we have.\n\n426\n00:21:42.069 --> 00:21:45.818\nNow, I did modify this a little\nbit more than I led on to believe,\n\n427\n00:21:45.818 --> 00:21:50.680\nwhich is because I have multiple Heathers,\nI can't just create Heather I can't in\n\n428\n00:21:50.680 --> 00:21:54.797\nmy temp directory go, Heather,\nbecause now there's two Heathers.\n\n429\n00:21:54.797 --> 00:21:57.845\nSo I've added this\ncounter to the end of it.\n\n430\n00:21:57.845 --> 00:22:02.943\nSo it'll be Heather1 or Heather2 or\nHeather3 or whatever I've set it up to be.\n\n431\n00:22:02.943 --> 00:22:05.636\nI can't exactly remember\nat this point in time.\n\n432\n00:22:05.636 --> 00:22:06.711\nBut that's what's gonna happen.\n\n433\n00:22:06.711 --> 00:22:10.998\nSo now, it will create Heather.0,\nHeather.1, Heather.2, and so\n\n434\n00:22:10.998 --> 00:22:11.955\non and so forth.\n\n435\n00:22:11.955 --> 00:22:15.829\nI do believe actually it's gonna use\nthe counter iteration, wherever we're at,\n\n436\n00:22:15.829 --> 00:22:16.615\nthe iteration.\n\n437\n00:22:16.615 --> 00:22:18.873\nSo we should see Heather.35.\n\n438\n00:22:18.873 --> 00:22:21.164\nAnd then I think there was 50 names or\n51 names.\n\n439\n00:22:21.164 --> 00:22:24.212\nSo it should also say Heather.50 or 51.\n\n440\n00:22:24.212 --> 00:22:25.378\nThat's how this should work out.\n\n441\n00:22:25.378 --> 00:22:27.486\nContinue's gonna be our\ngood friend on that.\n\n442\n00:22:27.486 --> 00:22:28.375\nLet's see how it goes here.\n\n443\n00:22:28.375 --> 00:22:31.400\nI don't need you, I need this one.\n\n444\n00:22:31.400 --> 00:22:36.764\nWhere's my [INAUDIBLE] clear the screen,\n\n445\n00:22:36.764 --> 00:22:39.988\n/, it is cont.names.\n\n446\n00:22:39.988 --> 00:22:40.803\nHere we go.\n\n447\n00:22:40.803 --> 00:22:44.619\nName Heather was found,\niteration number was 35.\n\n448\n00:22:44.619 --> 00:22:46.099\nAnd then Heather was found again.\n\n449\n00:22:46.099 --> 00:22:48.241\nRemember, jump back into our loop.\n\n450\n00:22:48.241 --> 00:22:49.662\nContinue to iterate through.\n\n451\n00:22:49.662 --> 00:22:54.422\nIt found it again, so therefore\nthe if condition was satisfied and\n\n452\n00:22:54.422 --> 00:22:56.972\nit did the commands inside of that.\n\n453\n00:22:56.972 --> 00:22:58.682\nAnd it did this number 51.\n\n454\n00:22:58.682 --> 00:23:04.955\nNow, if we ls /tmp,\nwe'll see heather.35 and heather.51.\n\n455\n00:23:04.955 --> 00:23:07.808\nI was able to create\nthe files that I needed and\n\n456\n00:23:07.808 --> 00:23:10.749\nuse the loop with that\ncontinuous statement.\n\n457\n00:23:10.749 --> 00:23:15.389\nI worked that list as I needed it to and\ncreate the files that I was looking for.\n\n458\n00:23:15.389 --> 00:23:16.157\n&gt;&gt; Excellent.\n\n459\n00:23:16.157 --> 00:23:19.788\nAll right, so what we had a chance to see\nright here was using break to basically\n\n460\n00:23:19.788 --> 00:23:23.474\nkill off a loop or using continue to kind\nof pause and resume A couple of different\n\n461\n00:23:23.474 --> 00:23:26.940\nways we can manipulate the behavior\nof a loop after it's already started,\n\n462\n00:23:26.940 --> 00:23:28.007\nwhich are kinda neat.\n\n463\n00:23:28.007 --> 00:23:29.785\nAnd definitely useful when\nyou're doing debugging and\n\n464\n00:23:29.785 --> 00:23:30.890\ndeveloping a script originally.\n\n465\n00:23:30.890 --> 00:23:34.060\nSo you need to have those little\ntools in the old toolbox.\n\n466\n00:23:34.060 --> 00:23:35.815\nBut Daniel, I think, shockingly,\n\n467\n00:23:35.815 --> 00:23:39.277\nwe have managed to get through everything\nthat we needed on basic loops.\n\n468\n00:23:39.277 --> 00:23:40.908\nDid you have anything else\nthat you wanted to cover?\n\n469\n00:23:40.908 --> 00:23:43.640\n&gt;&gt; I just wanna reiterate about\nthe break and the continue.\n\n470\n00:23:43.640 --> 00:23:46.650\nLike Don said, Don's been doing this\na long time and it still confuses him.\n\n471\n00:23:46.650 --> 00:23:48.846\nThis still confuses me\nfrom time to time and\n\n472\n00:23:48.846 --> 00:23:52.384\nI if I don't keep it straight in my\nhead you can use the wrong breaker or\n\n473\n00:23:52.384 --> 00:23:54.766\ncontinue like,\nwhy is this loop still going?\n\n474\n00:23:54.766 --> 00:23:59.041\nI wanted to stop, break,\nthink of it as I'm putting the brakes on,\n\n475\n00:23:59.041 --> 00:24:02.866\nI want to stop, whereas,\ncontinue, is that pause button.\n\n476\n00:24:02.866 --> 00:24:09.183\nAnd then of course, using things like\necho and variables to find, debugging.\n\n477\n00:24:09.183 --> 00:24:13.620\nDo using debugging or using a loop to\ndebug with can be very, very helpful.\n\n478\n00:24:13.620 --> 00:24:16.954\n&gt;&gt; All right, well, ladies and gentleman,\nI know you thought we'd never say it but\n\n479\n00:24:16.954 --> 00:24:18.954\nI think this is a good spot for\nus to wrap up loops.\n\n480\n00:24:18.954 --> 00:24:22.573\nNow, definitely stay tuned cuz we've got\na lot more coming up in the Linux shell\n\n481\n00:24:22.573 --> 00:24:23.924\nscripting basic series, but\n\n482\n00:24:23.924 --> 00:24:27.542\nwith each episode we're adding normally\nthat basic tool set that you need to put\n\n483\n00:24:27.542 --> 00:24:31.346\ntogether to create some really good shell\nscripts to do some pretty amazing stuff.\n\n484\n00:24:31.346 --> 00:24:33.637\nWe're gonna see as\nthe series continues on.\n\n485\n00:24:33.637 --> 00:24:35.929\nBut for now we're gonna wrap this one up.\n\n486\n00:24:35.929 --> 00:24:39.317\nSo signing off for ITProTV,\nI've been your host, Don Pezet.\n\n487\n00:24:39.317 --> 00:24:40.391\n&gt;&gt; And I'm Daniel Lowrie.\n\n488\n00:24:40.391 --> 00:24:43.252\n&gt;&gt; And we will see you next time.\n\n489\n00:24:43.252 --> 00:24:49.019\n[MUSIC]\n\n490\n00:24:49.019 --> 00:24:51.921\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237098619"
        }
      ],
      "title": "Structured Commands"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin go over working with postional parameters in conjunction with bash scripts. Here they define positional and their special variables; showing their incorporation into your scripts to pass information from the user. They also look at the shift command for moving parameters when necessary.",
          "length": "1611",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-1-user_input_positional_parameters-100617-PGM.00_26_36_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-1-user_input_positional_parameters-100617-PGM.00_26_36_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-1-user_input_positional_parameters-100617-PGM.00_26_36_18.Still001-sm.jpg",
          "title": "User Input Positional Parameters",
          "transcript": "WEBVTT\n\n1\n00:00:00.180 --> 00:00:01.210\nWelcome to ITProTV.\n\n2\n00:00:01.210 --> 00:00:06.049\nI'm your host, Don Pezet [CROSSTALK].\n\n3\n00:00:06.049 --> 00:00:08.503\n&gt;&gt; [MUSIC]\n\n4\n00:00:08.503 --> 00:00:12.100\nYou're watching ITProTV.\n\n5\n00:00:12.100 --> 00:00:15.280\n&gt;&gt; Greetings, everyone and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:15.280 --> 00:00:17.420\nI'm your host, Justin Dennison.\n\n7\n00:00:17.420 --> 00:00:20.530\nAnd, well, we're back with more\nLinux Shell Scripting Basics and\n\n8\n00:00:20.530 --> 00:00:21.690\nthank you for joining us.\n\n9\n00:00:21.690 --> 00:00:25.200\nIn particular, we're gonna be\ntalking about positional parameters,\n\n10\n00:00:25.200 --> 00:00:27.160\nthat was kind of a mouthful.\n\n11\n00:00:27.160 --> 00:00:29.448\nLuckily, I don't have to tell\nyou about it because we have Mr.\n\n12\n00:00:29.448 --> 00:00:31.420\nDaniel Lowrie in the studio with us today.\n\n13\n00:00:31.420 --> 00:00:32.442\nHow are you doing today Daniel?\n\n14\n00:00:32.442 --> 00:00:33.870\n&gt;&gt; I'm good,\nyou sure you don't want to tag in?\n\n15\n00:00:33.870 --> 00:00:35.378\n&gt;&gt; No, no.\n&gt;&gt; I'd be more than happy.\n\n16\n00:00:35.378 --> 00:00:37.870\n&gt;&gt; This is all you, this is all you.\n\n17\n00:00:37.870 --> 00:00:40.899\n&gt;&gt; Yes, we are gonna talk\npositional parameters today and\n\n18\n00:00:40.899 --> 00:00:45.354\nyou might be thinking to yourself, that\nsounds great, but what the heck is that?\n\n19\n00:00:45.354 --> 00:00:48.398\n[LAUGH] And that's a great question.\n\n20\n00:00:48.398 --> 00:00:51.865\nJust to tinker with, no [LAUGH]\n&gt;&gt; No, no, no, no, no, no,\n\n21\n00:00:51.865 --> 00:00:57.140\nno [LAUGH] I'm just over here\ngoing mm-hm mm-hm [LAUGH].\n\n22\n00:00:57.140 --> 00:01:01.406\n&gt;&gt; So positional parameters,\nit's funny cuz we're just on the,\n\n23\n00:01:01.406 --> 00:01:04.810\nthey're both kinda a thorn in our paw.\n\n24\n00:01:04.810 --> 00:01:07.027\nI'm not a huge fan of using them and\n\n25\n00:01:07.027 --> 00:01:11.403\nJustin's a huge fan of not using\nthem the way we're gonna use them.\n\n26\n00:01:11.403 --> 00:01:15.908\nSo there's always probably some murmuring\ngoing on whenever somebody who knows what\n\n27\n00:01:15.908 --> 00:01:19.357\nthe positional parameter,\nis they go [SOUND] stupid parameters.\n\n28\n00:01:19.357 --> 00:01:24.018\nAnd yeah, they can be, they're little\nfunky things that we're gonna work with,\n\n29\n00:01:24.018 --> 00:01:26.300\nbut let's start at the beginning.\n\n30\n00:01:26.300 --> 00:01:28.590\nWhat is a positional parameter?\n\n31\n00:01:28.590 --> 00:01:32.140\nIf you've ever worked with\na command line utility,\n\n32\n00:01:32.140 --> 00:01:36.560\na lot of times you're gonna throw some\nargumentation in there with it, right.\n\n33\n00:01:36.560 --> 00:01:41.330\nSo you say, here's my command and\nhere's some input that's gonna go along\n\n34\n00:01:41.330 --> 00:01:45.815\nwith that, that's gonna modify\nthe command in a certain way, right?\n\n35\n00:01:45.815 --> 00:01:50.030\nSo maybe I'm doing Grip, all right.\n\n36\n00:01:50.030 --> 00:01:54.395\nI have Grip and then pattern, that's\nan argument that I'm giving to Grip.\n\n37\n00:01:54.395 --> 00:01:57.130\nIt's input that's going in there,\nit's not an option.\n\n38\n00:01:57.130 --> 00:02:00.028\nWe'll talk about options in another show,\nbut\n\n39\n00:02:00.028 --> 00:02:03.369\nit's information that needs\nto go into that command.\n\n40\n00:02:03.369 --> 00:02:07.642\nNow, we've seen that with redirection and\nother means, but\n\n41\n00:02:07.642 --> 00:02:13.146\nthis is a very common format in which we\npass information on the fly should I say,\n\n42\n00:02:13.146 --> 00:02:17.860\nand that could be just about anything,\ninto our command.\n\n43\n00:02:17.860 --> 00:02:22.670\nSo lets, lets talk about,\nlets see a little bit of an example of\n\n44\n00:02:22.670 --> 00:02:25.180\nwhat that looks like,\ngive you more of a reference to that.\n\n45\n00:02:25.180 --> 00:02:30.192\nHopefully now, it's starting to pull\nthe fog of war away from what I mean\n\n46\n00:02:30.192 --> 00:02:35.388\nwhen I say positional parameter and\nthis should clarify a little bit more.\n\n47\n00:02:35.388 --> 00:02:39.977\nIf I come over here and I've got this,\nlet's just take a look at the structure.\n\n48\n00:02:39.977 --> 00:02:46.986\nIf I type in command, like so,\nand actually I have one,\n\n49\n00:02:46.986 --> 00:02:51.480\nI have cli_rams.sh, all right?\n\n50\n00:02:51.480 --> 00:02:54.962\nSo there's my script,\nI actually have to put [INAUDIBLE] so\n\n51\n00:02:54.962 --> 00:03:00.100\nthere we go, there's my script, calling\nmy script just like I would normal.\n\n52\n00:03:00.100 --> 00:03:05.610\nI wanna pass some information to it,\nso let's say I want to do 10, right?\n\n53\n00:03:05.610 --> 00:03:08.805\nAnd 20, and I don't know,\nhow about Justin?\n\n54\n00:03:08.805 --> 00:03:12.036\nHow about Bill Paxton?\n\n55\n00:03:15.075 --> 00:03:18.831\nMay he rest in peace, Bill Paxton, right?\n\n56\n00:03:18.831 --> 00:03:20.510\nThese are positional parameters.\n\n57\n00:03:20.510 --> 00:03:22.710\nEach one of them has their own value,\n\n58\n00:03:22.710 --> 00:03:27.600\neven the script itself is technically\npositional parameter, right?\n\n59\n00:03:27.600 --> 00:03:33.485\nAnd they all have their own value that\ngets put inside of a variable, okay.\n\n60\n00:03:33.485 --> 00:03:37.368\nAnd then we can use those variables\nthroughout our script to make things\n\n61\n00:03:37.368 --> 00:03:38.345\nhappen, right.\n\n62\n00:03:38.345 --> 00:03:42.196\nSo this is what it looks like\nwhen we use this in practicum and\n\n63\n00:03:42.196 --> 00:03:44.674\nwe'll run this in just a minute here.\n\n64\n00:03:44.674 --> 00:03:48.740\nBut let's take a look at those\nvalues that I wanna show you guys.\n\n65\n00:03:48.740 --> 00:03:54.670\nI'm gonna backspace this, and\nI've got this file called parameters.txt.\n\n66\n00:03:54.670 --> 00:03:57.110\nSo here's what happened,\nI had Don in there for\n\n67\n00:03:57.110 --> 00:04:00.228\nthe example because I wrote\nthis yesterday, but here we go.\n\n68\n00:04:00.228 --> 00:04:02.731\nSo we got CLI params.sh.\n\n69\n00:04:02.731 --> 00:04:06.650\nThere's our command, you'll notice\nunderneath that is dollar sign 0, okay?\n\n70\n00:04:08.270 --> 00:04:10.160\nThat's it's positional parameter.\n\n71\n00:04:10.160 --> 00:04:14.820\nThat's the positional\nparameter of the command and\n\n72\n00:04:14.820 --> 00:04:16.895\nit always will be the positional\nparameter of the command.\n\n73\n00:04:16.895 --> 00:04:23.770\nTypically, this does not get modified\nat all, just a little forethought and\n\n74\n00:04:23.770 --> 00:04:29.181\nwe've got the number 10 that I've\npassed to it, that gets $1, 20 gets $2.\n\n75\n00:04:29.181 --> 00:04:36.200\nDon or Justin or whoever you put next gets\n$3, the next thing gets $4, there you go.\n\n76\n00:04:36.200 --> 00:04:38.690\nAs we continue on, we can keep on going.\n\n77\n00:04:38.690 --> 00:04:43.750\nThe standard positional parameters\nthat you get is zero through nine,\n\n78\n00:04:43.750 --> 00:04:45.782\nor one through nine, okay.\n\n79\n00:04:45.782 --> 00:04:49.608\nYeah, cuz one through nine is probably\ngonna be the ones that you're modifying or\n\n80\n00:04:49.608 --> 00:04:50.335\nworking with.\n\n81\n00:04:50.335 --> 00:04:55.164\nOnce you get to nine, if you for\nwhatever reason have more than that,\n\n82\n00:04:55.164 --> 00:05:00.020\nyou can extend the positional\nparameters by using the curly braces.\n\n83\n00:05:00.020 --> 00:05:02.305\nSo instead of just saying dollar sign ten,\n\n84\n00:05:02.305 --> 00:05:06.430\nyou would put dollar sign curly brace\nten and you see that down here.\n\n85\n00:05:06.430 --> 00:05:09.490\nSo it basically just said here's\nthe first, second, third, fourth, fifth,\n\n86\n00:05:09.490 --> 00:05:12.110\nsixth, seventh, eighth,\nand ninth positions.\n\n87\n00:05:12.110 --> 00:05:15.312\nBut once I get to the tenth position,\nwhatever this value is,\n\n88\n00:05:15.312 --> 00:05:17.830\nit needs to be de-limited like this.\n\n89\n00:05:17.830 --> 00:05:24.480\nSo dollar sign, curly brace, open, ten,\ncurly brace close and so on and so forth.\n\n90\n00:05:24.480 --> 00:05:28.720\nSo if I want 13, 14, 15, 100, 2,000,\nI don't know why you're passing 2,000\n\n91\n00:05:28.720 --> 00:05:32.190\narguments to your script but\nmaybe you are.\n\n92\n00:05:32.190 --> 00:05:33.930\nIf you wanted to do that, there you go.\n\n93\n00:05:33.930 --> 00:05:36.525\nUse that dollar sign curly brace, and\n\n94\n00:05:36.525 --> 00:05:40.080\nthat will allow you to\nextend out into the beyond.\n\n95\n00:05:40.080 --> 00:05:43.870\n&gt;&gt; Well, I can actually,\nlet me give some perspective here.\n\n96\n00:05:43.870 --> 00:05:48.120\nYou might have a need for\nmaybe 10, 11, 12.\n\n97\n00:05:48.120 --> 00:05:53.160\nMuch beyond that, you should probably\nrethink kind of the structure of\n\n98\n00:05:53.160 --> 00:05:56.860\nthe CLI utility, or whatever you're\nbuilding, the script you're building.\n\n99\n00:05:56.860 --> 00:06:00.560\nMainly because, once you get out about 15,\nyou're gonna go,\n\n100\n00:06:00.560 --> 00:06:04.730\nnow what is the 14th thing\nthat I'm passing in?\n\n101\n00:06:04.730 --> 00:06:07.588\nYou may just want to rethink,\nand maybe reevaluate,\n\n102\n00:06:07.588 --> 00:06:10.890\nbecause it's going to be a lot to\nkeep in your head at one time,\n\n103\n00:06:10.890 --> 00:06:14.343\nwhich is going to slow you down and\nmake you more prone to errors.\n\n104\n00:06:14.343 --> 00:06:19.300\nSo just because you can have two thousands\narguments, I highly discourage that.\n\n105\n00:06:19.300 --> 00:06:20.310\n&gt;&gt; What do they say?\n\n106\n00:06:20.310 --> 00:06:23.210\n&gt;&gt; Just because you can doesn't\nmean you should, right?\n\n107\n00:06:23.210 --> 00:06:28.454\nSo you can do it, but use positional\nparameters response ladies and\n\n108\n00:06:28.454 --> 00:06:30.390\ngentlemen, all right.\n\n109\n00:06:30.390 --> 00:06:33.310\nSo now that we see how it works and\n\n110\n00:06:33.310 --> 00:06:36.970\nwe've got some idea of what's going\non when we want to employ positional\n\n111\n00:06:36.970 --> 00:06:39.881\nparameters, how do we then incorporate\nthat into the script, all right?\n\n112\n00:06:41.690 --> 00:06:46.220\nSo gotta remember it's actually a pretty\neasy thing if you think about it,\n\n113\n00:06:46.220 --> 00:06:47.880\nthey are variables.\n\n114\n00:06:47.880 --> 00:06:49.460\nSo we're gonna use them like variables,\nokay.\n\n115\n00:06:50.630 --> 00:06:53.772\nSo let's jump into here,\nI'm gonna clear this out, and\n\n116\n00:06:53.772 --> 00:06:55.942\nlet's look at that cli_params.sh.\n\n117\n00:06:55.942 --> 00:07:03.184\nClear that out, then cli_params.sh.\n\n118\n00:07:03.184 --> 00:07:07.478\nSo here we go, a very simple way in which\nwe can use these positional parameters.\n\n119\n00:07:07.478 --> 00:07:11.145\nI just want to echo out,\nwhatever is in that parameter.\n\n120\n00:07:11.145 --> 00:07:14.531\nSo I'm gonna say echo parameter 0,\n\n121\n00:07:14.531 --> 00:07:18.910\ndollar sign 0 is whatever\nis in dollar sign 0.\n\n122\n00:07:18.910 --> 00:07:23.700\nParameter whatever is in dollar sign\n1 is whatever is in dollar sign 1 and\n\n123\n00:07:23.700 --> 00:07:27.520\nwhatever we change it's gonna\nchange accordingly, okay.\n\n124\n00:07:27.520 --> 00:07:34.470\nSo it looks like this, come over here,\nI'll say dot slash cli_params.sh.\n\n125\n00:07:34.470 --> 00:07:38.250\nAnd I say 10, 20, Justin and\n\n126\n00:07:38.250 --> 00:07:43.390\nBill Paxton,\ncuz I gotta have him in my show.\n\n127\n00:07:43.390 --> 00:07:46.657\nI wonder if it gets an IMDB\nreference [LAUGH] that'd be awesome.\n\n128\n00:07:46.657 --> 00:07:52.253\nBut if I fire that off,\nwe see parameter$0 is CLI params.\n\n129\n00:07:52.253 --> 00:07:53.633\nRemember, that's the command\nthat's gonna run.\n\n130\n00:07:53.633 --> 00:08:00.246\nParameter 1 is 10, 2 is 20, 3 is Justin,\nand 4 is Bill Paxton Change that up.\n\n131\n00:08:00.246 --> 00:08:05.339\nIf I come back here and\nI say we'll say Aubrey cuz she's\n\n132\n00:08:05.339 --> 00:08:12.590\nshooting our show here and\nwe'll throw in how about Russell Crowe.\n\n133\n00:08:12.590 --> 00:08:14.010\nHow do you spell his name?\n\n134\n00:08:14.010 --> 00:08:16.230\nRussell maybe two Ls Crowe.\n\n135\n00:08:17.550 --> 00:08:20.370\nLike that.\nI know there's an E on the end\n\n136\n00:08:20.370 --> 00:08:22.470\nof his name, I don't care,\nbut, it changed.\n\n137\n00:08:22.470 --> 00:08:24.550\nWhatever's in that positional parameter,\n\n138\n00:08:24.550 --> 00:08:29.390\nis what is going to show up when we\nreference it inside of our script.\n\n139\n00:08:29.390 --> 00:08:31.350\nSo, it's a very simplistic form of this,\nright?\n\n140\n00:08:32.560 --> 00:08:36.270\nI also wanna take a look at\nif we get that beyond thing.\n\n141\n00:08:36.270 --> 00:08:38.050\nWe've gone into 10, 11, and 12.\n\n142\n00:08:38.050 --> 00:08:39.420\nWhat happens with that?\n\n143\n00:08:39.420 --> 00:08:41.220\nLet's go over here.\n\n144\n00:08:41.220 --> 00:08:42.953\nI will [INAUDIBLE].\n\n145\n00:08:42.953 --> 00:08:47.160\nI've got another script\ncalled Nano CLI PARAMS.\n\n146\n00:08:47.160 --> 00:08:49.410\nI think it's gonna yeah, there we go.\n\n147\n00:08:50.420 --> 00:08:52.440\nAnd this is gonna echo the parameter.\n\n148\n00:08:52.440 --> 00:08:53.370\nWhatever that is.\n\n149\n00:08:53.370 --> 00:08:57.120\nOnce you've hit the 12th parameter,\nnotice I didn't have to put in zero, one,\n\n150\n00:08:57.120 --> 00:08:57.790\nthree, four, five.\n\n151\n00:08:57.790 --> 00:08:58.890\nI don't need to reference it.\n\n152\n00:08:58.890 --> 00:09:01.620\nI can only reference the one\nI want if I so choose.\n\n153\n00:09:02.760 --> 00:09:04.000\nSo, you have that option [INAUDIBLE].\n\n154\n00:09:04.000 --> 00:09:08.597\nSo if I run that one, let's clear,\n\n155\n00:09:08.597 --> 00:09:12.585\n$cli_params_high.sh and\n\n156\n00:09:12.585 --> 00:09:16.586\nI'll just whatever.\n\n157\n00:09:16.586 --> 00:09:21.460\nGive myself hopefully that's 12,\nthere we go,\n\n158\n00:09:21.460 --> 00:09:26.150\nit tells me that s Was\nthe twelfth parameter, right.\n\n159\n00:09:26.150 --> 00:09:27.200\nVery simple.\n\n160\n00:09:27.200 --> 00:09:31.000\nYou just have to reference them just like\nyou do, just about any other variable.\n\n161\n00:09:31.000 --> 00:09:31.640\nVery simple stuff.\n\n162\n00:09:33.650 --> 00:09:37.280\nAll right so the next thing we need\nto talk about is an interesting,\n\n163\n00:09:37.280 --> 00:09:43.230\nwe've got other variable types that\nwork with these positional parameters.\n\n164\n00:09:43.230 --> 00:09:45.830\nIt can become a very handy thing.\n\n165\n00:09:45.830 --> 00:09:49.970\nFirst, I want to talk about\nare dollar sign and the hashtag.\n\n166\n00:09:49.970 --> 00:09:53.380\nTypically we aren't big fans\nof using the hashtag because\n\n167\n00:09:53.380 --> 00:09:56.650\nthe interpreter sees that as a comment.\n\n168\n00:09:56.650 --> 00:10:00.110\nWhen it is coupled with the dollar sign,\nit gives it a different meaning.\n\n169\n00:10:00.110 --> 00:10:04.630\nWhat we're doing,\nis we're tracking the number of correct\n\n170\n00:10:04.630 --> 00:10:08.350\ncommand parameters that we're giving it.\n\n171\n00:10:08.350 --> 00:10:11.950\nSo in my first example I don't know\nhow many of these things actually\n\n172\n00:10:11.950 --> 00:10:13.200\nI put in there.\n\n173\n00:10:13.200 --> 00:10:17.330\nBut I could get my script to track\nthat using that dollar sign hashtag.\n\n174\n00:10:17.330 --> 00:10:21.098\nSo if I threw that in here that\nwould tell me something, right.\n\n175\n00:10:21.098 --> 00:10:25.164\nBut I've pre-baked something so\nI don't wanna go off my script here,\n\n176\n00:10:25.164 --> 00:10:28.686\nI wanna make sure that everything\nI wanna show you is in line and\n\n177\n00:10:28.686 --> 00:10:30.672\nall my effort was not for nothing.\n\n178\n00:10:30.672 --> 00:10:31.983\nSo I'm gonna do that.\n\n179\n00:10:31.983 --> 00:10:35.646\nLet's get back out here,\nI'll control x, get out of that.\n\n180\n00:10:35.646 --> 00:10:39.926\nThis guys is gonna be\ncalled params_count.sh.\n\n181\n00:10:39.926 --> 00:10:42.964\nSo if I nano\n\n182\n00:10:42.964 --> 00:10:51.780\ncli_params_count.sh.\n\n183\n00:10:51.780 --> 00:10:54.890\nHere we go,\nlet's see what this script does.\n\n184\n00:10:54.890 --> 00:11:02.810\nSo if the dollar sign, hashtag, or pound\nsymbol, whatever you like to call it,\n\n185\n00:11:02.810 --> 00:11:06.930\nis less than two then let someone\nknow there's not enough parameters.\n\n186\n00:11:06.930 --> 00:11:11.500\nSo maybe my script Is looking for\nx amount parameters.\n\n187\n00:11:11.500 --> 00:11:15.070\nThere has to be at least\nsomething in value one and two.\n\n188\n00:11:15.070 --> 00:11:17.920\nIf not,\nthen we're gonna have a problem, okay?\n\n189\n00:11:19.630 --> 00:11:22.700\nIf our L if, if it's greater than two,\nyou've got too many.\n\n190\n00:11:22.700 --> 00:11:25.450\nYou've gone beyond what\nthe program is meant to do.\n\n191\n00:11:25.450 --> 00:11:28.008\nYou haven't given enough,\nyou've gone past it.\n\n192\n00:11:28.008 --> 00:11:32.620\nSlow down, give me what I need, and\n\n193\n00:11:32.620 --> 00:11:35.080\nJustin and\nI were talking about this before the show.\n\n194\n00:11:35.080 --> 00:11:39.980\nThis whole, giving you example of\nhow the script should be working,\n\n195\n00:11:39.980 --> 00:11:42.660\nis a good best practice, right Justin?\n\n196\n00:11:42.660 --> 00:11:47.330\n&gt;&gt; Yea I would definitely recommend this\nbecause I've used command line utilities,\n\n197\n00:11:47.330 --> 00:11:52.400\nfor a variety of reasons, not necessarily\nall these written in Bash, but\n\n198\n00:11:52.400 --> 00:11:54.450\nthings will just, it'll go, nope.\n\n199\n00:11:54.450 --> 00:11:57.140\nI'm like, I don't understand\nhow this is supposed to work.\n\n200\n00:11:57.140 --> 00:12:00.887\nThere's no man page, there's no-\n&gt;&gt; [CROSSTALK] file is cryptic at best.\n\n201\n00:12:00.887 --> 00:12:04.577\n&gt;&gt; Yeah, so I know that's kind of\na pain but once you get things working,\n\n202\n00:12:04.577 --> 00:12:08.160\nI would always recommend to come back and\nadd those little prompts.\n\n203\n00:12:08.160 --> 00:12:09.850\nLike try to do some error-checking.\n\n204\n00:12:09.850 --> 00:12:13.230\nHey, you didn't get me all\nthe information I need to actually run\n\n205\n00:12:13.230 --> 00:12:14.160\nas you expect it to.\n\n206\n00:12:14.160 --> 00:12:19.770\nDon't run the script and get unexpected\nresults, stop, say hey, you should\n\n207\n00:12:19.770 --> 00:12:23.680\nprobably add another parameter, or I need\na dash F, or something of that nature.\n\n208\n00:12:23.680 --> 00:12:24.800\n&gt;&gt; I totally agree with you, Justin,\n\n209\n00:12:24.800 --> 00:12:26.510\nthat's exactly why I\nwanted to bring that up.\n\n210\n00:12:26.510 --> 00:12:28.380\nWe were kind of having that\nconversation before the show, and\n\n211\n00:12:28.380 --> 00:12:31.280\nI thought it was good information for\nyou guys out there.\n\n212\n00:12:31.280 --> 00:12:36.330\nMight be a little of an aside to our\nshow here, but it was a good spot for\n\n213\n00:12:36.330 --> 00:12:40.190\nme to bring it up, because I am doing\nthat very thing inside of our script.\n\n214\n00:12:40.190 --> 00:12:41.680\nSo let's jump back in here.\n\n215\n00:12:41.680 --> 00:12:46.940\nWe've got this going on, and\nso there's this happening.\n\n216\n00:12:46.940 --> 00:12:47.610\nI come down here.\n\n217\n00:12:47.610 --> 00:12:52.770\nIf these conditions don't get met, so I'm\nbasically looking to say, I want to see\n\n218\n00:12:52.770 --> 00:12:58.700\nIf I have position one $1 and\n$2 should be greater than zero and\n\n219\n00:12:58.700 --> 00:13:01.570\nI can do that instead of\nhaving a right if statements.\n\n220\n00:13:01.570 --> 00:13:05.383\nI'm just do that by bundling into\nthe $ # right, or pound sign, okay?\n\n221\n00:13:05.383 --> 00:13:10.240\nSo that I can use that there and\ncall everything to make sure that\n\n222\n00:13:10.240 --> 00:13:14.450\nit's doing what it is I think it should\nbe doing, should equal a certain amounts.\n\n223\n00:13:14.450 --> 00:13:19.380\nIt's a great way in which this is\nemployed so if we run this thing,\n\n224\n00:13:20.550 --> 00:13:26.528\ncome over here and we will run\nCLI_params_count.sh if I just hit Enter.\n\n225\n00:13:26.528 --> 00:13:33.730\nRight, I should hit my first condition\nwhich is not enough parameters.\n\n226\n00:13:33.730 --> 00:13:37.630\nIt didn't see anything in $1 or $2.\n\n227\n00:13:37.630 --> 00:13:39.010\nOkay, not good.\n\n228\n00:13:39.010 --> 00:13:42.330\nIf I do it again I just give,\nI give it too many.\n\n229\n00:13:42.330 --> 00:13:44.160\nI say okay 10, 20, and 30.\n\n230\n00:13:44.160 --> 00:13:49.100\nThis is too many parameters we're doing\nthe whole Goldilocks business though.\n\n231\n00:13:49.100 --> 00:13:52.250\nWell that's too hot and that's too cold,\nlet's do the just right one alright?\n\n232\n00:13:52.250 --> 00:13:54.450\nSo I give it exactly\nwhat it's looking for.\n\n233\n00:13:54.450 --> 00:13:56.590\nTake that 30 off the end there and run it.\n\n234\n00:13:56.590 --> 00:13:58.360\nThis is the sum of 10 and 20 is 30, okay?\n\n235\n00:13:58.360 --> 00:14:04.300\nSo I got to use that grab all of them.\n\n236\n00:14:04.300 --> 00:14:08.770\nJust grab those parameters, see what's\nin there and keep a track of that and\n\n237\n00:14:08.770 --> 00:14:11.180\nthen I can use that instead of\nreferencing over and over again,\n\n238\n00:14:11.180 --> 00:14:13.680\nDawson 1 2 5 7 9 12, whatever.\n\n239\n00:14:13.680 --> 00:14:18.000\nI just grab them all,\nput them in and do that.\n\n240\n00:14:18.000 --> 00:14:20.170\nI can work with that way, count them out.\n\n241\n00:14:20.170 --> 00:14:24.660\nMake sure that that count equals\nwhat I think it should equal.\n\n242\n00:14:24.660 --> 00:14:30.000\nAnd there's also a time when maybe I wanna\nknow what the last parameter was passed.\n\n243\n00:14:30.000 --> 00:14:32.730\nMaybe there's a bunch of lines of them.\n\n244\n00:14:32.730 --> 00:14:35.050\nWe did talk about that in happened.\n\n245\n00:14:35.050 --> 00:14:37.580\nProbably not the greatest idea\nin the world but even after so\n\n246\n00:14:37.580 --> 00:14:42.570\nmany we can humanly, start losing\nreference to that in our minds,\n\n247\n00:14:42.570 --> 00:14:44.440\nso it's nice sometimes to reference that.\n\n248\n00:14:44.440 --> 00:14:48.300\nI actually put a line in this script\nwhere you can, just on comments, and\n\n249\n00:14:48.300 --> 00:14:51.370\nit should give us that action.\n\n250\n00:14:51.370 --> 00:14:52.320\nI'll show you what that looks like.\n\n251\n00:14:52.320 --> 00:14:54.320\nHere's our comment in line,\nI'll take that out.\n\n252\n00:14:55.320 --> 00:15:00.900\nHere we go, we have exclamation point\nhash tag, exclamation point pound sign.\n\n253\n00:15:00.900 --> 00:15:04.600\nSo that is gonna tell me this was\nthe last parameter that was passed.\n\n254\n00:15:04.600 --> 00:15:08.810\nSo, If I wanna keep track of the very last\nparameter, regardless of what they maybe,\n\n255\n00:15:08.810 --> 00:15:10.380\nI can use that as well.\n\n256\n00:15:10.380 --> 00:15:14.000\nSo, now that I have done that\nI can just Ctrl+O, I save it.\n\n257\n00:15:14.000 --> 00:15:19.490\nWe will re-run out script here and,\nthere we go.\n\n258\n00:15:19.490 --> 00:15:22.330\nAnd it says, 20,\nwas the last parameter passed.\n\n259\n00:15:22.330 --> 00:15:25.350\nSo, if I want to keep those values,\nor work them into my script somehow,\n\n260\n00:15:25.350 --> 00:15:29.880\nyou can find many different, interesting\nways in which to use these parameters and\n\n261\n00:15:29.880 --> 00:15:34.540\nthey may come in handy for you, when\nyou're working with positional parameters.\n\n262\n00:15:34.540 --> 00:15:36.810\n&gt;&gt; And, Daniel, that whole last parameter,\nthat could be handy.\n\n263\n00:15:36.810 --> 00:15:40.600\nBecause I know I've used some utilities\nwhere you're pointing it to a file to be\n\n264\n00:15:40.600 --> 00:15:45.580\nprocessed or maybe to it's to read in but\nthen there's all these other options or\n\n265\n00:15:45.580 --> 00:15:48.780\nadditional flags that you need to set,\nprior to.\n\n266\n00:15:48.780 --> 00:15:49.580\nBut really,\n\n267\n00:15:49.580 --> 00:15:54.316\nyou just need to grab the last one to do\nthe last little, do I have 35 of them?\n\n268\n00:15:54.316 --> 00:15:57.036\n[LAUGH] You know what,\njust grab the last one, so\n\n269\n00:15:57.036 --> 00:16:00.030\nthat is essentially to find your API for\nthe script.\n\n270\n00:16:00.030 --> 00:16:03.556\nSo, if you do that That's a handy\nway just to grab the last one.\n\n271\n00:16:03.556 --> 00:16:04.276\n&gt;&gt; Awesome stuff.\n\n272\n00:16:04.276 --> 00:16:06.462\nWell that takes us to, guess what?\n\n273\n00:16:06.462 --> 00:16:10.555\nWe have more of these positional parameter\nvariable weirdness that goes along with\n\n274\n00:16:10.555 --> 00:16:11.320\nthese things.\n\n275\n00:16:11.320 --> 00:16:15.318\nThings that you can use to work with those\npositional parameters with having just\n\n276\n00:16:15.318 --> 00:16:17.390\na single variable in which to reference.\n\n277\n00:16:17.390 --> 00:16:20.760\nCuz goodness knows that makes\nour lives a whole lot easier.\n\n278\n00:16:20.760 --> 00:16:24.007\nSo let's take a look at that,\nI've got this c live params strings.\n\n279\n00:16:24.007 --> 00:16:27.880\nLet's close our count out, I'll Ctrl+X.\n\n280\n00:16:27.880 --> 00:16:34.174\nAnd we'll say nano cli_params_string.sh.\n\n281\n00:16:34.174 --> 00:16:35.970\nNow what's going on here?\n\n282\n00:16:35.970 --> 00:16:38.450\nLet's take a look.\nWell we'll walk through it line by line.\n\n283\n00:16:38.450 --> 00:16:43.598\nIf -z $1, so we're looking at\nthe positional parameter number one.\n\n284\n00:16:43.598 --> 00:16:47.150\n-z, if you remember back\nin a previous episode,\n\n285\n00:16:47.150 --> 00:16:50.390\nwe talked about that's a file test case.\n\n286\n00:16:50.390 --> 00:16:53.002\nIt's saying is it a zero value?\n\n287\n00:16:53.002 --> 00:16:57.854\nThus $1 have nothing in it, cuz it's 0,\n\n288\n00:16:57.854 --> 00:17:02.490\nthen echo \"Not enough parameters\".\n\n289\n00:17:02.490 --> 00:17:08.277\nSo another way in which we're\nkinda using that whole thing.\n\n290\n00:17:08.277 --> 00:17:14.600\nOtherwise, if it has something,\nanything at all, while it's not 0.\n\n291\n00:17:14.600 --> 00:17:19.317\nThen you say,\nwelcome to the Shell Scripting Basics, and\n\n292\n00:17:19.317 --> 00:17:22.020\nthen we've got this right here.\n\n293\n00:17:22.020 --> 00:17:23.710\nSo what the heck does this do?\n\n294\n00:17:23.710 --> 00:17:26.662\nSo this is an interesting thing,\nthis is this $*.\n\n295\n00:17:26.662 --> 00:17:31.590\nWhat $* does is it basically it\ntreats all the arguments that\n\n296\n00:17:31.590 --> 00:17:34.450\nyou pass as a single string, okay?\n\n297\n00:17:34.450 --> 00:17:37.740\nVery cool, so how does that work out here?\n\n298\n00:17:37.740 --> 00:17:40.883\nWell I'm saying that this\nis a non zero value, right?\n\n299\n00:17:40.883 --> 00:17:43.530\nSo if I'm looking at, you know what?\n\n300\n00:17:43.530 --> 00:17:45.420\nA better way to do it, let's run it.\n\n301\n00:17:45.420 --> 00:17:49.366\nSee what it does, and then maybe\nthat'll shed a little more light on it.\n\n302\n00:17:49.366 --> 00:17:56.985\nSo we'll say\n./cli_params_string like that.\n\n303\n00:17:56.985 --> 00:18:02.630\nWe hit our condition,\nwe had nothing in that first parameter.\n\n304\n00:18:02.630 --> 00:18:06.897\nSo it says Usage\ncli_params_string.sh name.\n\n305\n00:18:06.897 --> 00:18:09.770\nI need to put a name in there.\n\n306\n00:18:09.770 --> 00:18:13.466\nSee the reasons why it's very nice of\nus to put in what you're supposed to be\n\n307\n00:18:13.466 --> 00:18:15.414\nexpecting or what the script expects.\n\n308\n00:18:15.414 --> 00:18:18.360\nSo it means, I need to throw\na name in there, let's try that.\n\n309\n00:18:18.360 --> 00:18:21.860\nSo we'll say, I'll do Justin.\n\n310\n00:18:21.860 --> 00:18:25.680\nThere we go, welcome to\nthe Shell Scripting Basics, Justin.\n\n311\n00:18:27.120 --> 00:18:34.621\nWhat happens if I do Justin and\nyeah, Justin and Joe.\n\n312\n00:18:34.621 --> 00:18:36.242\nNotice it does Justin Joe,\n\n313\n00:18:36.242 --> 00:18:39.985\nbecause it's seeing both of those\nparameters as one big ball.\n\n314\n00:18:39.985 --> 00:18:44.922\nAnd if I keep going,\nif I keep adding parameters, Joe,\n\n315\n00:18:44.922 --> 00:18:48.110\nbob, earl, sally, alice thing.\n\n316\n00:18:48.110 --> 00:18:51.935\nYou'll notice, it does that,\neven though I only put this $*, right?\n\n317\n00:18:51.935 --> 00:18:56.460\nHere you go, right here, you see.\n\n318\n00:18:56.460 --> 00:19:02.637\nIt's giving them back to me because again,\nit's wrapping it all up as one big string.\n\n319\n00:19:02.637 --> 00:19:06.370\nAnd that's what you need to take away for\nhow this works.\n\n320\n00:19:06.370 --> 00:19:11.813\nCuz sometimes I want that,\nmaybe I've put in a string with spaces.\n\n321\n00:19:11.813 --> 00:19:14.990\nAnd I wanna use it as a catch in case\nsomeone forgets to put quotes around it,\n\n322\n00:19:14.990 --> 00:19:16.410\nor something like that.\n\n323\n00:19:16.410 --> 00:19:18.732\nNot a problem, it will do it for\nme, that kind of thing.\n\n324\n00:19:18.732 --> 00:19:22.189\nSo again, you can get really creative\non how you can work with this.\n\n325\n00:19:22.189 --> 00:19:25.490\nAnd there's another way we can use it,\nit's very similar to this.\n\n326\n00:19:25.490 --> 00:19:29.164\nInstead of saying it's a string, instead\nof saying every perimeter is a string,\n\n327\n00:19:29.164 --> 00:19:30.560\nit's gonna see it as an array.\n\n328\n00:19:30.560 --> 00:19:33.990\nIt's going to work with that, very cool.\n\n329\n00:19:33.990 --> 00:19:36.022\nSo it's gonna break those up\ninto their own perimeter.\n\n330\n00:19:36.022 --> 00:19:40.410\nSeems a little redundant and sometimes\ncan be, but that's what this does.\n\n331\n00:19:40.410 --> 00:19:46.060\nI do have a script for that as well,\nit's Ctrl+X out of here.\n\n332\n00:19:46.060 --> 00:19:51.643\nAnd we will open nano cli_params_array.sh.\n\n333\n00:19:51.643 --> 00:19:56.963\nBut hopefully this is gonna\ngive us a little more\n\n334\n00:19:56.963 --> 00:20:01.900\nof a practical look at\nwhat this is gonna do.\n\n335\n00:20:01.900 --> 00:20:06.009\nSo we are banging away with a ping test.\n\n336\n00:20:06.009 --> 00:20:11.635\nAnd for var1 in, there it is right there,\n\n337\n00:20:11.635 --> 00:20:16.020\n$ @, that's the difference.\n\n338\n00:20:17.250 --> 00:20:21.960\nSo before we had $*,\nhere we've got $@, put those together.\n\n339\n00:20:21.960 --> 00:20:25.372\nAnother thing I do wanna bring\nout to make sure that you do,\n\n340\n00:20:25.372 --> 00:20:28.870\nthis is the correct way in which\nto reference these things.\n\n341\n00:20:28.870 --> 00:20:31.960\nMake sure you put the quotes around that,\n\n342\n00:20:31.960 --> 00:20:36.980\nI have notice that it will work sometimes,\nif you don't.\n\n343\n00:20:36.980 --> 00:20:39.584\nSometimes it will work in\na way you don't expect,\n\n344\n00:20:39.584 --> 00:20:41.449\nother times it will not work at all.\n\n345\n00:20:41.449 --> 00:20:45.125\nThe correct way in which to reference\nthose is to put double quotes around\n\n346\n00:20:45.125 --> 00:20:46.660\nthem every time you use them.\n\n347\n00:20:46.660 --> 00:20:47.907\nSo just be aware of that, right?\n\n348\n00:20:47.907 --> 00:20:51.460\nSo there we go,\nwe have var1 in this array.\n\n349\n00:20:51.460 --> 00:20:54.763\nHey, look we are doing a for\nloop, what do for loops use?\n\n350\n00:20:54.763 --> 00:20:57.060\nWell they iterate through arrays, so\n\n351\n00:20:57.060 --> 00:21:00.877\nnow I'm passing an array of all\nthe arguments that are passed.\n\n352\n00:21:00.877 --> 00:21:06.580\nSo I could have went $1, $2,\n$3, $4, I could have done that.\n\n353\n00:21:06.580 --> 00:21:10.080\nBut what if I don't know\nhow many parameters some of\n\n354\n00:21:10.080 --> 00:21:13.760\nmy pass is to the script and\nif you see the script, what does it do?\n\n355\n00:21:13.760 --> 00:21:19.265\nIt's paying machines, once that I\ndictate at the onset of the script,\n\n356\n00:21:19.265 --> 00:21:21.666\nthat's the important thing.\n\n357\n00:21:21.666 --> 00:21:24.580\nI don't know Justin may have 12\nmachines that he wants to ping.\n\n358\n00:21:24.580 --> 00:21:29.409\nAnd he used this script to do that,\nI may have three, if I do $1, 2 and 3,\n\n359\n00:21:29.409 --> 00:21:31.985\nit's only gonna give me three options.\n\n360\n00:21:31.985 --> 00:21:34.664\nHere I'm allowed to no\nmatter how many I pass,\n\n361\n00:21:34.664 --> 00:21:37.079\nit's just gonna look at as one big array.\n\n362\n00:21:37.079 --> 00:21:40.280\nAnd just chop that joker up for\nme, and let me do the thing.\n\n363\n00:21:40.280 --> 00:21:45.261\nSo it allows me for when I have no\nforeknowledge of what the input is gonna\n\n364\n00:21:45.261 --> 00:21:50.007\nbe, to take advantage of that or\nto account for that, I should say.\n\n365\n00:21:50.007 --> 00:21:53.110\nSo here we go, that's what we're gonna do.\n\n366\n00:21:54.920 --> 00:21:59.963\nAnd it's kind of like scrolling over here\nyou can't really see the whole meat and\n\n367\n00:21:59.963 --> 00:22:00.712\npotatoes.\n\n368\n00:22:00.712 --> 00:22:03.810\nThere we go, so what's happening?\n\n369\n00:22:03.810 --> 00:22:07.233\nWe're getting our array from\nour positional parameters,\n\n370\n00:22:07.233 --> 00:22:09.290\npumping that down into this value.\n\n371\n00:22:09.290 --> 00:22:12.310\nWe're running some commands,\nwe're echoing what variable we're in.\n\n372\n00:22:12.310 --> 00:22:13.894\nSo what IP are we gonna pass,\n\n373\n00:22:13.894 --> 00:22:16.940\ncuz we're gonna pass IP names\nI don't have DNS set up.\n\n374\n00:22:16.940 --> 00:22:20.372\nSo we're gonna pass IP names,\nand it's gonna do this hbeat,\n\n375\n00:22:20.372 --> 00:22:23.020\nheartbeat., that's what I was thinking of.\n\n376\n00:22:23.020 --> 00:22:24.387\nThis does it have a heartbeat?\n\n377\n00:22:24.387 --> 00:22:26.350\nDoes it respond?\n\n378\n00:22:26.350 --> 00:22:27.860\nDo I hear something?\n\n379\n00:22:27.860 --> 00:22:31.669\nGet that ping ,and I'm looking for a\nspecific value and that ping to come back.\n\n380\n00:22:31.669 --> 00:22:35.175\nAnd then if -nhbeat,\nso if hbeat has value,\n\n381\n00:22:35.175 --> 00:22:40.300\nif there's something there,\nthen echo var1 is alive.\n\n382\n00:22:40.300 --> 00:22:43.810\nSo it's basically a script that pings\nmachines, looks to see if they respond.\n\n383\n00:22:43.810 --> 00:22:47.310\nIf they do, it comes back letting me\nknow they are up and they are working.\n\n384\n00:22:48.630 --> 00:22:52.841\nIf not, then let's me know they're offline\nand if anything else happens that I can't\n\n385\n00:22:52.841 --> 00:22:55.279\npredict, it's gonna say\nsomething went wrong.\n\n386\n00:22:55.279 --> 00:23:00.290\nAnd I even gave myself a custom\nexit value if that does happen.\n\n387\n00:23:00.290 --> 00:23:03.920\nVery cool, so again trying to build up all\nthe stuff that we've worked with so far.\n\n388\n00:23:03.920 --> 00:23:06.650\nLet's take a look at this guy,\nsee how it runs.\n\n389\n00:23:06.650 --> 00:23:09.600\nWe will clear the screen, and\n\n390\n00:23:09.600 --> 00:23:15.250\nwe will run\n./cli_params_array.sh like that.\n\n391\n00:23:15.250 --> 00:23:18.861\nAnd now I've gotta pass it parameters,\nI've gotta pass it machines, right?\n\n392\n00:23:18.861 --> 00:23:22.250\nSo we are on the 10.0.13 network,\nand I'm gonna say .130.\n\n393\n00:23:22.250 --> 00:23:29.621\nLet's see if that's alive,\nso it's testing it.\n\n394\n00:23:29.621 --> 00:23:32.010\nI forgot my dot, so it's gonna freak out,\nit's gonna say it's offline.\n\n395\n00:23:32.010 --> 00:23:38.008\nSo I've got to go back there,\nit helps if I put my correct.\n\n396\n00:23:38.008 --> 00:23:40.387\nRight here I do, there we go.\n\n397\n00:23:40.387 --> 00:23:45.129\nThis whole thing is killing me, 14.0.13.\n\n398\n00:23:45.129 --> 00:23:47.036\nThere we go, that'll work a little better.\n\n399\n00:23:47.036 --> 00:23:50.198\nBut look, it's alive, pinged it,\nit found that option and\n\n400\n00:23:50.198 --> 00:23:53.686\nit came back with the correct\nparameters on the script typed to it.\n\n401\n00:23:53.686 --> 00:23:55.338\nAnd then it came back, and it's alive.\n\n402\n00:23:55.338 --> 00:23:57.865\nLet's do something that may not me alive.\n\n403\n00:23:57.865 --> 00:24:02.948\nLet's try, 12, it's testing, it's testing.\n\n404\n00:24:02.948 --> 00:24:07.492\nIt's taking a little bit longer cuz\nit didn't come back, there we go.\n\n405\n00:24:07.492 --> 00:24:11.369\nSo I was able to employ that array\nvariable, and I can pass it multiple.\n\n406\n00:24:11.369 --> 00:24:17.691\nSo if I want to do 12 and 10.0.13.130 and,\n\n407\n00:24:17.691 --> 00:24:20.522\nlet's see here, not v.\n\n408\n00:24:20.522 --> 00:24:24.744\n10.0.13.145, I can hammer that,\n\n409\n00:24:24.744 --> 00:24:29.818\nit's testing 12,\nsee what happens, it's offline.\n\n410\n00:24:29.818 --> 00:24:32.751\n130 is alive, it's testing 145,\nthat one's offline.\n\n411\n00:24:32.751 --> 00:24:36.678\nSo now I know, I've gotta go to these\nservers, why aren't they responding?\n\n412\n00:24:36.678 --> 00:24:38.714\nThey should be up and fine, or\n\n413\n00:24:38.714 --> 00:24:44.454\nmaybe I'm just doing a sweep of certain\nservers that those IPs aren't being used.\n\n414\n00:24:44.454 --> 00:24:47.049\nI wanna make sure they're not being used,\nput those in.\n\n415\n00:24:47.049 --> 00:24:53.826\nSo a practical script using that\narray type situation for later use.\n\n416\n00:24:53.826 --> 00:24:54.593\n&gt;&gt; Now Daniel, I can attest to this.\n\n417\n00:24:54.593 --> 00:24:57.217\nI've never been a true sys admin, but\n\n418\n00:24:57.217 --> 00:25:00.345\nthere are times where I\nhad to put on that hat.\n\n419\n00:25:00.345 --> 00:25:01.348\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n420\n00:25:01.348 --> 00:25:05.314\nI can't tell you how many times we're\nlike, well, it was work-, server is down.\n\n421\n00:25:05.314 --> 00:25:08.977\nIf I just had something that I could\nquickly sweep through and just ping,\n\n422\n00:25:08.977 --> 00:25:13.181\nright, reproducibly, I would even think\nabout even as positional parameters you\n\n423\n00:25:13.181 --> 00:25:14.356\ncould abstract it.\n\n424\n00:25:14.356 --> 00:25:15.304\nNow maybe I wanna put it in a file.\n\n425\n00:25:15.304 --> 00:25:19.952\nOr, so this becomes a little more\ndiversely even though we're showing\n\n426\n00:25:19.952 --> 00:25:21.659\npositional parameters.\n\n427\n00:25:21.659 --> 00:25:25.738\nYou can always think of positional\nparameters if you're using them that way\n\n428\n00:25:25.738 --> 00:25:29.305\nas a giant file list or maybe even\nlike a database or a config.ini or\n\n429\n00:25:29.305 --> 00:25:30.531\nsomething like that.\n\n430\n00:25:30.531 --> 00:25:35.835\nAnd then boom, I just checked 30 of\nthem and they're all except that.\n\n431\n00:25:35.835 --> 00:25:36.591\nI need to go check that one out.\n\n432\n00:25:36.591 --> 00:25:41.026\nSo this would save you a lot of time\nafter you get things kind of wound up for\n\n433\n00:25:41.026 --> 00:25:41.763\nyourself.\n\n434\n00:25:41.763 --> 00:25:46.481\n&gt;&gt; Yeah, well Justin, I've got a little\nbit more to go when it comes to working\n\n435\n00:25:46.481 --> 00:25:48.415\nwith positional parameters.\n\n436\n00:25:48.415 --> 00:25:51.311\nBut as I see by the clock,\nwe've exhausted the time for this episode.\n\n437\n00:25:51.311 --> 00:25:54.589\nI wanna make sure it gets the full\nattention that it deserves.\n\n438\n00:25:54.589 --> 00:25:58.976\nEven though it's not much more information\nleft, it might take us a good 15 minutes,\n\n439\n00:25:58.976 --> 00:26:01.663\nso I think a part three might be in order,\nor part two.\n\n440\n00:26:01.663 --> 00:26:02.288\n&gt;&gt; Part two, part two.\n\n441\n00:26:02.288 --> 00:26:02.836\n&gt;&gt; Part two, yeah.\n\n442\n00:26:02.836 --> 00:26:04.344\n&gt;&gt; Here, we- [CROSSTALK]\n&gt;&gt; You see,\n\n443\n00:26:04.344 --> 00:26:05.529\nI needed a script with\npositional numbers in-\n\n444\n00:26:05.529 --> 00:26:06.337\n&gt;&gt; [LAUGH]\n\n445\n00:26:06.337 --> 00:26:07.334\n&gt;&gt; To know what part is actually on.\n\n446\n00:26:07.334 --> 00:26:08.551\n[LAUGH]\n&gt;&gt; Exactly,\n\n447\n00:26:08.551 --> 00:26:09.725\nwe could have just counted the last one.\n\n448\n00:26:09.725 --> 00:26:11.008\nLike that's the next one.\n\n449\n00:26:11.008 --> 00:26:11.767\n&gt;&gt; Yeah, there you go.\n\n450\n00:26:11.767 --> 00:26:15.192\n&gt;&gt; But there you have it, we've definitely\nseen the power positional parameters.\n\n451\n00:26:15.192 --> 00:26:19.747\nEspecially with some of those mini\ndriven things to let people know hey,\n\n452\n00:26:19.747 --> 00:26:24.090\nyou need to do this as well as a very\npractical script there at the end.\n\n453\n00:26:24.090 --> 00:26:26.549\nBut as Daniel said,\nwe wannq leave no stone unturned so\n\n454\n00:26:26.549 --> 00:26:29.664\nwe're gonna come back with a part\ntwo about positional parameters.\n\n455\n00:26:29.664 --> 00:26:32.900\nBut we are out of time for this episode,\nso we're gonna go ahead and wrap it up.\n\n456\n00:26:32.900 --> 00:26:35.350\nSo signing off for IT pro TV,\nI'm been your host Justin Dennison\n\n457\n00:26:35.350 --> 00:26:36.256\n&gt;&gt; And I'm Daniel Lowrie\n\n458\n00:26:36.256 --> 00:26:37.419\n&gt;&gt; And we'll see you next time\n\n459\n00:26:37.419 --> 00:26:45.290\n[MUSIC]\n\n460\n00:26:45.290 --> 00:26:50.739\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "237584506"
        },
        {
          "description": "In this episode, Daniel and Justin go over working with postional parameters in conjunction with bash scripts. Here they define positional and their special variables; showing their incorporation into your scripts to pass information from the user. They also look at the shift command for moving parameters when necessary.",
          "length": "1064",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-2-user_input_positional_parameters_pt_2-100617-PGM.00_22_23_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-2-user_input_positional_parameters_pt_2-100617-PGM.00_22_23_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-1-2-user_input_positional_parameters_pt_2-100617-PGM.00_22_23_07.Still001-sm.jpg",
          "title": "User Input Positional Parameters Pt 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.180 --> 00:00:02.344\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:02.344 --> 00:00:05.918\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.918 --> 00:00:08.142\n[MUSIC]\n\n4\n00:00:08.142 --> 00:00:12.013\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.013 --> 00:00:15.891\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITProTV.\n\n6\n00:00:15.891 --> 00:00:20.855\nI'm your host, Justin Dennison, and well,\nwe're back with a part two on positional\n\n7\n00:00:20.855 --> 00:00:24.830\nparameters as part of our\nLinux Shell Scripting Basics series.\n\n8\n00:00:24.830 --> 00:00:28.370\nAnd well, we wanted to make sure\nwe had enough time to treat these\n\n9\n00:00:28.370 --> 00:00:32.340\nlast few topics of positional\nparameters appropriately.\n\n10\n00:00:32.340 --> 00:00:34.560\nMake sure you know everything\nthat Daniel knows.\n\n11\n00:00:34.560 --> 00:00:35.341\nCuz I definitely don't\nknow anything about them.\n\n12\n00:00:35.341 --> 00:00:38.350\n&gt;&gt; [LAUGH]\n&gt;&gt; No, I jest, I jest.\n\n13\n00:00:38.350 --> 00:00:41.060\nAnd well, to help us in that\nvery thing is Mr. Daniel Lowry.\n\n14\n00:00:41.060 --> 00:00:42.000\nHow are you doing today, Daniel?\n\n15\n00:00:42.000 --> 00:00:43.590\n&gt;&gt; I'm doing great,\nJustin, glad to be back.\n\n16\n00:00:43.590 --> 00:00:47.930\nWe're gonna definitely put the cherry on\ntop of the positional parameters cake,\n\n17\n00:00:47.930 --> 00:00:49.100\nas it were.\n\n18\n00:00:49.100 --> 00:00:50.292\nWith just a few odds and\n\n19\n00:00:50.292 --> 00:00:52.160\nends that I wanted to make sure\nthat you guys are aware of.\n\n20\n00:00:52.160 --> 00:00:55.060\nSo that when you're working with\npositional parameters, if that's something\n\n21\n00:00:55.060 --> 00:00:59.970\nthat your script wants to take\nadvantage of, it by no means has to.\n\n22\n00:00:59.970 --> 00:01:03.220\nJustin and I would probably both agree,\ndon't do it, right, just stop.\n\n23\n00:01:03.220 --> 00:01:04.680\nNo, you can, they're great, they work,\n\n24\n00:01:04.680 --> 00:01:07.570\nyou just gotta know the little\nweird quirkiness about them.\n\n25\n00:01:07.570 --> 00:01:10.940\nAnd this is some more of that weird\nquirkiness that goes along with\n\n26\n00:01:10.940 --> 00:01:12.340\nworking with positional parameters.\n\n27\n00:01:12.340 --> 00:01:13.920\nSo we're gonna jump back in,\n\n28\n00:01:13.920 --> 00:01:17.620\nand we're gonna talk about\na little option called shift.\n\n29\n00:01:17.620 --> 00:01:20.290\nSo if you remember,\nback in the first episode,\n\n30\n00:01:20.290 --> 00:01:22.150\nwe talked about positional parameters,\nright?\n\n31\n00:01:22.150 --> 00:01:27.510\nAnd they're very descriptive, that name is\nvery descriptive, positional parameter.\n\n32\n00:01:27.510 --> 00:01:28.750\nIt's in a position and\n\n33\n00:01:28.750 --> 00:01:33.320\nis a parameter that's being\npassed as inputted to our script.\n\n34\n00:01:33.320 --> 00:01:38.740\nAnd if you remember, we had $0,\n$1, $2, $3, so on and so forth.\n\n35\n00:01:40.210 --> 00:01:45.623\nBut sometimes I wanna move\nthose positions over, right?\n\n36\n00:01:45.623 --> 00:01:50.475\nI want $1 to drop off and\ntake 2 and 3, and move them over,\n\n37\n00:01:50.475 --> 00:01:52.582\nso now they're 1 and 2.\n\n38\n00:01:52.582 --> 00:01:55.420\nYou're thinking,\nwhy would I wanna do that?\n\n39\n00:01:55.420 --> 00:01:57.920\nWell, there are reasons for\nit, and we'll take a look.\n\n40\n00:01:57.920 --> 00:02:03.070\nThe best way to give you the context of\nthat, in my opinion, is to show you some\n\n41\n00:02:03.070 --> 00:02:07.615\nscript that employs it, so we can see\nthe logic behind working with it.\n\n42\n00:02:07.615 --> 00:02:11.229\nBut usually as always, I typically start\noff with a basic example, giving you\n\n43\n00:02:11.229 --> 00:02:14.698\nthe nuts and bolts, how this works,\nand then we'll get more into the why.\n\n44\n00:02:14.698 --> 00:02:18.710\nSo let's do that,\nlet's jump into my machine here.\n\n45\n00:02:18.710 --> 00:02:24.380\nI do have a lovely\nlittle cli_params.shift.\n\n46\n00:02:24.380 --> 00:02:32.200\nSo we will nano cli_params_shift.sh,\nso here we go.\n\n47\n00:02:33.840 --> 00:02:37.960\nSo what this does is, we clear the screen,\nso it's gonna clear the screen, which\n\n48\n00:02:37.960 --> 00:02:42.910\nI started doing in some of my scripts\nbecause output can get a little bulky.\n\n49\n00:02:42.910 --> 00:02:45.165\nSo I'll just make sure to\nclear the screen a lot.\n\n50\n00:02:45.165 --> 00:02:50.487\nvar1 = 1, simple value for\na parameter that we're defining,\n\n51\n00:02:50.487 --> 00:02:53.130\nor a variable we're defining.\n\n52\n00:02:53.130 --> 00:02:57.260\nSo we've got a while loop,\nwhile [ -n \"$1\" ].\n\n53\n00:02:57.260 --> 00:03:01.169\nSo we remember that from the first\nepisode on positional parameters, right?\n\n54\n00:03:01.169 --> 00:03:07.973\nThe -n let's me say, this is something\nthat has a nonzero value, okay?\n\n55\n00:03:07.973 --> 00:03:10.480\nAnd it's that first parameter.\n\n56\n00:03:10.480 --> 00:03:13.510\nNow I'm gonna echo\nparameter position is \\$1,\n\n57\n00:03:13.510 --> 00:03:17.010\nand it now equals whatever's\nin that position.\n\n58\n00:03:18.530 --> 00:03:22.060\nThen I'm going to increment var1 by 1.\n\n59\n00:03:22.060 --> 00:03:25.955\nSo var1 equals 1, and\nI wanna increase that by 1.\n\n60\n00:03:25.955 --> 00:03:30.320\nSo it should equal 2 at the end\nof the first iteration, right?\n\n61\n00:03:30.320 --> 00:03:33.860\nAnd then we're going to shift,\nso what does shift do?\n\n62\n00:03:33.860 --> 00:03:37.090\nSo let's run this script,\nsee what it does, and\n\n63\n00:03:37.090 --> 00:03:39.897\nthen hopefully what's happening here\nshould make a little more sense.\n\n64\n00:03:41.170 --> 00:03:45.897\nLet's come over to my side over here,\n\n65\n00:03:45.897 --> 00:03:50.931\nand say ./cli_params_shift.sh.\n\n66\n00:03:50.931 --> 00:03:56.260\nWe hit it, I didn't add any parameters,\nso it just doesn't do anything.\n\n67\n00:03:56.260 --> 00:03:57.870\nGotta remember to do that.\n\n68\n00:03:57.870 --> 00:04:02.796\nI'll say Justin, there we go, positional\n\n69\n00:04:02.796 --> 00:04:07.596\nparameter number $1 now equals Justin.\n\n70\n00:04:07.596 --> 00:04:10.550\nWell, this really doesn't work\nwith just one example right?\n\n71\n00:04:10.550 --> 00:04:13.430\nBut it did run, it did fire off,\nit iterated the one time,\n\n72\n00:04:13.430 --> 00:04:14.858\nand that's what it was.\n\n73\n00:04:14.858 --> 00:04:16.620\nBut if we've got multiple parameters,\n\n74\n00:04:16.620 --> 00:04:20.480\nthat's when the power of the shift\nfeature really starts to come into play.\n\n75\n00:04:20.480 --> 00:04:25.820\nSo what's happening is,\nif I do Justin, I do Mike, I do Vonne,\n\n76\n00:04:25.820 --> 00:04:28.330\nand we'll throw Wes on the fire.\n\n77\n00:04:29.440 --> 00:04:31.240\nHere we go, it cleared the screen,\n\n78\n00:04:31.240 --> 00:04:34.140\nit said that positional parameter\nnumber $1 now equals Justin.\n\n79\n00:04:34.140 --> 00:04:38.480\nThat was the first, right,\ncuz it was Justin, Mike, Vonne, and Wes.\n\n80\n00:04:38.480 --> 00:04:40.162\nBut then shift happened.\n\n81\n00:04:40.162 --> 00:04:45.185\nNow remember, we're saying\npositional parameter number $1.\n\n82\n00:04:45.185 --> 00:04:49.723\nWell, Justin was in $1, but shift said,\ndrop Justin out of that position and\n\n83\n00:04:49.723 --> 00:04:52.880\njust forget about him,\nmove everybody over.\n\n84\n00:04:52.880 --> 00:04:58.730\nSo now 2 becomes 1, 3 becomes 2, 4 becomes\n3, and so on and so forth, all right?\n\n85\n00:04:58.730 --> 00:05:03.927\nSo that's why we see parameter\nposition number $1 now equals Mike.\n\n86\n00:05:03.927 --> 00:05:09.820\nParameter position $1 now equals Vonne,\nand the last one, now equals Wes.\n\n87\n00:05:09.820 --> 00:05:13.260\nSo that's what shift is doing,\nshift is moving those parameters,\n\n88\n00:05:13.260 --> 00:05:18.870\nputting them in that first position,\nand working the iteration from there.\n\n89\n00:05:18.870 --> 00:05:21.100\nSo that's where shift works itself out.\n\n90\n00:05:22.290 --> 00:05:25.590\n&gt;&gt; I would almost think of\nthis as like a queue, right?\n\n91\n00:05:25.590 --> 00:05:29.430\nI want to process the first parameter,\nI would almost think of these as disjoint,\n\n92\n00:05:29.430 --> 00:05:30.938\nif I was gonna use shift.\n\n93\n00:05:30.938 --> 00:05:33.330\nSo that's kinda what I'm thinking,\nmaybe it's a list of filenames, and\n\n94\n00:05:33.330 --> 00:05:34.620\nI want to do them one at a time.\n\n95\n00:05:34.620 --> 00:05:39.460\nThere's no combination, like hey,\nI need to rename all the text.\n\n96\n00:05:39.460 --> 00:05:44.051\nI have a typo that I've done consistently,\nI need to check these one at a time.\n\n97\n00:05:44.051 --> 00:05:49.535\nI could iterate or\nI could just shift through, right?\n\n98\n00:05:49.535 --> 00:05:53.682\nAnd say okay, I know once it's been\nshifted out of the argument list,\n\n99\n00:05:53.682 --> 00:05:54.747\nthat it's done.\n\n100\n00:05:54.747 --> 00:05:58.688\nAnd so I would treat this as a queue in\na different context as far programmatic\n\n101\n00:05:58.688 --> 00:05:59.545\ntype thing.\n\n102\n00:05:59.545 --> 00:06:02.615\n&gt;&gt; I love that, I'm so glad Justin\ngot be on these specific shows.\n\n103\n00:06:02.615 --> 00:06:05.550\nBecause he does come from\nthat programmatic background,\n\n104\n00:06:05.550 --> 00:06:07.170\nworking with programs in different stuff.\n\n105\n00:06:07.170 --> 00:06:09.520\nHe has many different\nlanguages under his belt.\n\n106\n00:06:09.520 --> 00:06:14.330\nSo to hear how a good way that we\nmight employ the shift command\n\n107\n00:06:14.330 --> 00:06:17.530\nin that more practical context,\nvery, very cool stuff.\n\n108\n00:06:17.530 --> 00:06:21.070\nBut for right now, I just wanted you guys\nto see, this is what shift is doing.\n\n109\n00:06:21.070 --> 00:06:24.760\nNow shift is cool,\nbecause we can move that over.\n\n110\n00:06:24.760 --> 00:06:27.940\nBut what if I wanna shift\nmore than just one place?\n\n111\n00:06:27.940 --> 00:06:29.910\nGuess what,\nwe have the ability to do that.\n\n112\n00:06:29.910 --> 00:06:35.270\nI can come into this script and say,\nshift 2, shift 3, and now it's gonna\n\n113\n00:06:35.270 --> 00:06:40.070\nshift three positions, four positions,\nhowever many positions I give it.\n\n114\n00:06:40.070 --> 00:06:43.830\nSo all I would have to do is jump\nonto my script, and say shift,\n\n115\n00:06:43.830 --> 00:06:49.240\ncome down to the shift area, and\njust add, well, I wanna shift 3.\n\n116\n00:06:49.240 --> 00:06:54.029\nSo now instead of just shifting one it's\ngonna go, well, I've got Justin, Mike,\n\n117\n00:06:54.029 --> 00:06:54.712\nand Vonne.\n\n118\n00:06:54.712 --> 00:06:57.397\nI'm gonna drop those names off,\nand I'm just gonna go Wes, and\n\n119\n00:06:57.397 --> 00:06:59.380\nWes is gonna come in,\nthat's gonna be next.\n\n120\n00:06:59.380 --> 00:07:02.510\nAnd if there were four more names\nafter that, it would drop those out,\n\n121\n00:07:02.510 --> 00:07:04.840\nand then so on and so forth.\n\n122\n00:07:04.840 --> 00:07:10.230\nLet's do that, let me save that,\nand yep I will save, yes.\n\n123\n00:07:12.290 --> 00:07:15.118\nHit it, and I will run it.\n\n124\n00:07:15.118 --> 00:07:19.363\nWe will put in Justin, Mike,\nVonne, Wes and we'll say,\n\n125\n00:07:19.363 --> 00:07:23.710\nwe'll add Ronnie in there,\nwe'll add Cherokee and Zach.\n\n126\n00:07:24.720 --> 00:07:27.264\nHopefully I didn't forget anybody else,\nthere we go.\n\n127\n00:07:27.264 --> 00:07:31.580\nWhoop, it's going crazy,\nit's infinite loop time.\n\n128\n00:07:31.580 --> 00:07:35.630\nSo I'll hit Ctrl+X, or Ctrl+C,\nlet's see what it did wrong.\n\n129\n00:07:35.630 --> 00:07:36.870\nI was kinda doing this on the fly,\n\n130\n00:07:36.870 --> 00:07:41.590\nI'm sure I just, I'm not meeting my\ncondition, and that's the problem, right?\n\n131\n00:07:41.590 --> 00:07:43.630\nSo let's see what's happening,\nlet's go back in there.\n\n132\n00:07:43.630 --> 00:07:48.480\nWe will nano, not here, nano shift.\n\n133\n00:07:50.000 --> 00:07:56.620\nSo I'm shifting 3, and\nthis is getting to Zach, that's good.\n\n134\n00:07:58.360 --> 00:08:00.310\nBut it doesn't shift Zach out of there.\n\n135\n00:08:00.310 --> 00:08:03.968\nI probably need another shift\ncommand to shift him out of the way.\n\n136\n00:08:03.968 --> 00:08:06.980\n&gt;&gt; So I think this brings\nup an interesting thing.\n\n137\n00:08:06.980 --> 00:08:08.130\nIf I'm shifting three at a time,\n\n138\n00:08:08.130 --> 00:08:13.280\nif there's not three to shift, there's\nno actually shifting out of the queue.\n\n139\n00:08:13.280 --> 00:08:14.650\nI need a group of three, right?\n\n140\n00:08:14.650 --> 00:08:16.707\nI would almost think of this as\nlike you're getting in line for\n\n141\n00:08:16.707 --> 00:08:17.400\na roller coaster.\n\n142\n00:08:17.400 --> 00:08:20.410\nThere has to be a minimum number of\npeople to fill said roller coaster.\n\n143\n00:08:20.410 --> 00:08:21.540\n&gt;&gt; I like that.\n\n144\n00:08:21.540 --> 00:08:25.507\n&gt;&gt; And if there's not, then we're not\ndoing it, we're just hanging out.\n\n145\n00:08:25.507 --> 00:08:27.820\n&gt;&gt; [LAUGH]\n&gt;&gt; So that's a very interesting behavior.\n\n146\n00:08:27.820 --> 00:08:31.040\nIt's not one that I anticipated,\nbut it is a good one to know about.\n\n147\n00:08:31.040 --> 00:08:32.780\n&gt;&gt; Yeah, totally, and this is great.\n\n148\n00:08:32.780 --> 00:08:35.478\nIt's completely unscripted,\nI just decided, let's try it and\n\n149\n00:08:35.478 --> 00:08:36.270\nsee what happens.\n\n150\n00:08:36.270 --> 00:08:38.760\nThat's the great thing about\nworking with your scripts.\n\n151\n00:08:38.760 --> 00:08:43.360\nDon't be afraid to go well, I think\nthis is how this is supposed to work.\n\n152\n00:08:43.360 --> 00:08:46.680\nLet me try it and see if that's\nthe expected result comes out, right?.\n\n153\n00:08:46.680 --> 00:08:50.773\nAnd it didn't, I had a weird result,\nbecause I didn't expect to go\n\n154\n00:08:50.773 --> 00:08:56.110\nthere's nothing to shift to after this,\nand therefore my condition never gets met.\n\n155\n00:08:56.110 --> 00:08:57.250\nMy loop never ends, and\n\n156\n00:08:57.250 --> 00:09:00.290\nhere we go with parameter position\nnever ending in my thing.\n\n157\n00:09:00.290 --> 00:09:02.580\nSo I would need to adjust my script,\nbut very cool stuff.\n\n158\n00:09:02.580 --> 00:09:04.300\nDon't be afraid to play\naround with these things and\n\n159\n00:09:04.300 --> 00:09:08.130\nsee what kind of different\noutputs that you could get.\n\n160\n00:09:08.130 --> 00:09:13.210\nBut hopefully you're starting to\nunderstand how the shift parameter works.\n\n161\n00:09:13.210 --> 00:09:16.326\n&gt;&gt; Just out of curiosity, if we were to\nhit up on that command and take Zach off,\n\n162\n00:09:16.326 --> 00:09:19.662\nbecause I think that actually puts six\narguments, six positional parameters?\n\n163\n00:09:19.662 --> 00:09:21.760\n&gt;&gt; Okay, yeah, let's do it.\n\n164\n00:09:21.760 --> 00:09:22.971\n&gt;&gt; I'm holding up a few fingers.\n\n165\n00:09:22.971 --> 00:09:25.625\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n166\n00:09:25.625 --> 00:09:27.168\n&gt;&gt; You all good folks out there didn't get\n\n167\n00:09:27.168 --> 00:09:28.812\nto see that, it's funny.\n\n168\n00:09:28.812 --> 00:09:32.100\n&gt;&gt; [LAUGH] But let's see,\none, two, three, four, five,\n\n169\n00:09:32.100 --> 00:09:34.110\nsix, and then that would have been seven.\n\n170\n00:09:34.110 --> 00:09:37.490\nThat will leave us with six, so\nthe seventh one isn't pulled off.\n\n171\n00:09:37.490 --> 00:09:39.210\nSo if it removes Zack, it should work.\n\n172\n00:09:39.210 --> 00:09:40.300\n&gt;&gt; It should go fine.\n\n173\n00:09:40.300 --> 00:09:41.157\n&gt;&gt; Based on our reasoning, and it does.\n\n174\n00:09:41.157 --> 00:09:42.199\n&gt;&gt; There we go, yeah.\n\n175\n00:09:42.199 --> 00:09:43.138\n&gt;&gt; So very cool.\n\n176\n00:09:43.138 --> 00:09:45.400\n&gt;&gt; But see,\nit all comes down to the logic.\n\n177\n00:09:45.400 --> 00:09:46.800\nIf you don't get your logic just right,\n\n178\n00:09:46.800 --> 00:09:48.950\nthese things are gonna\nmess around with you.\n\n179\n00:09:48.950 --> 00:09:52.100\nIf I wanted to be able to have that\nseventh one, I would need to go in and\n\n180\n00:09:52.100 --> 00:09:55.850\nmodify my script, so\nthat I could account for that.\n\n181\n00:09:55.850 --> 00:09:57.510\nI would change shift 3,\n\n182\n00:09:57.510 --> 00:10:00.610\nmaybe I would add some other condition,\nsomething to that effect.\n\n183\n00:10:00.610 --> 00:10:03.370\nThere's multiple reasons why you would\nwanna leave or take out something or\n\n184\n00:10:03.370 --> 00:10:04.660\nmodify something.\n\n185\n00:10:04.660 --> 00:10:06.280\nYou just got to keep those in your head.\n\n186\n00:10:06.280 --> 00:10:08.680\nBut for this intents and\npurposes it's easy to just go in and\n\n187\n00:10:08.680 --> 00:10:10.120\nchange my shift, right?\n\n188\n00:10:10.120 --> 00:10:13.160\nBut shift does give us that option to say,\nyou know what?\n\n189\n00:10:13.160 --> 00:10:17.368\nI'm gonna move more than one space, or\nI'm just gonna move one space at a time.\n\n190\n00:10:17.368 --> 00:10:21.617\nI did have one more kind of descriptive,\nlet's take a look at,\n\n191\n00:10:21.617 --> 00:10:26.780\njust to kinda keep hammering home\nthe idea of working with shift.\n\n192\n00:10:26.780 --> 00:10:30.120\nSo I just wanna make sure you guys\nsaw this stuff in its completion.\n\n193\n00:10:31.470 --> 00:10:36.290\nLet me get out of here, Ctrl+X.\n\n194\n00:10:36.290 --> 00:10:40.620\nAnd it is gonna be cli_params,\nI think it's shift2,\n\n195\n00:10:40.620 --> 00:10:45.290\nyeah, just a little more shifting.\n\n196\n00:10:45.290 --> 00:10:52.210\nSo this is not as crazy as the last one,\nit's gonna show us a little more.\n\n197\n00:10:52.210 --> 00:10:55.310\nSo what we're doing is we're\nshifting parameters 2 spaces,\n\n198\n00:10:55.310 --> 00:10:58.888\nkind of showing us what it's doing\ninstead of just doing stuff, right?\n\n199\n00:10:58.888 --> 00:11:01.570\nThat was the whole purpose of this,\nhopefully just being more descriptive,\n\n200\n00:11:01.570 --> 00:11:02.280\nthat was my intent.\n\n201\n00:11:03.990 --> 00:11:08.070\nSo the original first position's going to\nbe this, it's going to shift by 2, and\n\n202\n00:11:08.070 --> 00:11:10.270\nthen here is the new first position.\n\n203\n00:11:10.270 --> 00:11:13.640\nThere's no crazy looping going on in here,\nthere's nothing gonna happen.\n\n204\n00:11:13.640 --> 00:11:16.970\nSo it should be a much cleaner result.\n\n205\n00:11:16.970 --> 00:11:22.820\nSo let's see here, if I say,\ndollar sign, I can just bring that up.\n\n206\n00:11:22.820 --> 00:11:28.850\nTake that off, we'll go to shift2.sh, and\nI'll just say a b c d e f g, like so.\n\n207\n00:11:30.600 --> 00:11:33.570\nSo there we go.\n\n208\n00:11:33.570 --> 00:11:37.487\nSo shifting parameters 2 spaces,\nthe original first position was a.\n\n209\n00:11:37.487 --> 00:11:41.980\nBut when it shifted, it's shifting now,\nhere is the new first position.\n\n210\n00:11:41.980 --> 00:11:46.599\nSo here was our command, a was in $1.\n\n211\n00:11:46.599 --> 00:11:50.470\nWe shifted two spaces,\nwe shifted two parameters.\n\n212\n00:11:50.470 --> 00:11:52.546\nThe new first position\nwill be dollar sign c.\n\n213\n00:11:52.546 --> 00:11:55.335\nSo I was trying to just make that really\n\n214\n00:11:55.335 --> 00:11:59.110\nobvious that shift is\nmoving from here to there.\n\n215\n00:11:59.110 --> 00:12:04.480\nThat is now the $1 positional parameter,\nso that's what shift does.\n\n216\n00:12:04.480 --> 00:12:09.300\nIt takes those parameters and\nmoves them to where you expect them to be.\n\n217\n00:12:09.300 --> 00:12:10.870\nSay, I wanna pass some stuff.\n\n218\n00:12:10.870 --> 00:12:13.580\nAnd we're gonna shift as we go\ndown the road a little farther,\n\n219\n00:12:13.580 --> 00:12:16.290\nand we're gonna employ it a little bit,\nlike I always like to do.\n\n220\n00:12:16.290 --> 00:12:18.700\nI like to take concepts\nthat we've worked on,\n\n221\n00:12:18.700 --> 00:12:21.920\nwe've understood maybe just\nconceptually at this point.\n\n222\n00:12:21.920 --> 00:12:26.610\nHopefully, more contextually,\nusing the scripts that we looked at.\n\n223\n00:12:26.610 --> 00:12:30.505\nBut as we go down the road, I wanna build\nupon that, and continue to reiterate that\n\n224\n00:12:30.505 --> 00:12:34.526\nknowledge through building on top of new\nknowledge that we're gonna take a look at.\n\n225\n00:12:34.526 --> 00:12:39.940\nBut other than that, Justin, I think\nthat's all I've got as far as shift goes.\n\n226\n00:12:39.940 --> 00:12:42.860\n&gt;&gt; Now well, Daniel, you may,\nbut I have one quick question.\n\n227\n00:12:42.860 --> 00:12:47.608\nWe learned a couple of ways to\nrepresent the parameter list in well,\n\n228\n00:12:47.608 --> 00:12:50.310\npart one of this episode right?\n\n229\n00:12:50.310 --> 00:12:52.940\nWhere we had $*, and $a.\n\n230\n00:12:52.940 --> 00:13:00.270\nIf I, after a shift or two,\nused $@, I said a, @, excuse me.\n\n231\n00:13:00.270 --> 00:13:02.180\nDoes that change the argument list, or\n\n232\n00:13:02.180 --> 00:13:04.940\ndoes it just change the reference\nof the positioning?\n\n233\n00:13:04.940 --> 00:13:07.930\nAnd I guess we could take that script and\njust try it out.\n\n234\n00:13:07.930 --> 00:13:13.900\n&gt;&gt; Yeah, cuz off the top of my head,\nI couldn't swear to what would happen.\n\n235\n00:13:13.900 --> 00:13:14.790\nSo let's see here.\n\n236\n00:13:14.790 --> 00:13:18.130\nSo Justin's asking,\nif we use the $@ at symbol.\n\n237\n00:13:18.130 --> 00:13:21.610\nRemember if we have four\nparameters that we pass, and\n\n238\n00:13:21.610 --> 00:13:25.150\nI want to work it like an array in a loop.\n\n239\n00:13:25.150 --> 00:13:29.964\nAnd I say $@, it's gonna say, parameter\none, parameter two, parameter three.\n\n240\n00:13:29.964 --> 00:13:33.360\nBut if I work that with shift, I'm trying\nto make sure I understand your question.\n\n241\n00:13:33.360 --> 00:13:39.840\nIf I say shift, with the $@,\nis that going to work?\n\n242\n00:13:39.840 --> 00:13:42.130\nGreat question, I have no idea.\n\n243\n00:13:42.130 --> 00:13:46.470\nBut like you said,\nwe could play around and see what happens.\n\n244\n00:13:46.470 --> 00:13:48.000\nSo let's do that,\nwhat would we need to do?\n\n245\n00:13:48.000 --> 00:13:50.530\nWe would need something\nthat would use that array.\n\n246\n00:13:50.530 --> 00:13:52.670\n&gt;&gt; So how about with this current example,\n\n247\n00:13:52.670 --> 00:13:56.220\nwe just come to the bottom line\nafter the shift 2, and just $@,\n\n248\n00:13:56.220 --> 00:13:59.780\nbecause we know that otherwise it should\nbe an array of a, b, c, d, e, f, right?\n\n249\n00:13:59.780 --> 00:14:02.655\n&gt;&gt; Yeah, you're right,\nlet's take a look at that.\n\n250\n00:14:02.655 --> 00:14:05.550\nJust kinda work that out and just echo it.\n\n251\n00:14:05.550 --> 00:14:11.713\n&gt;&gt; echo $, don't forget your,\nthere we go, $@ like so.\n\n252\n00:14:11.713 --> 00:14:15.678\nLet's see what that does, Ctrl+O, and\n\n253\n00:14:15.678 --> 00:14:19.770\nrun that last command, see what happens.\n\n254\n00:14:21.020 --> 00:14:24.980\nSo it did not echo after the shift?\n\n255\n00:14:24.980 --> 00:14:25.490\n&gt;&gt; Yeah it did.\n\n256\n00:14:25.490 --> 00:14:26.580\n&gt;&gt; Yeah, it's showing nothing.\n\n257\n00:14:28.090 --> 00:14:31.205\nNo, here it is, here it is,\nyeah, c d e f g.\n\n258\n00:14:31.205 --> 00:14:32.610\nSo it did shift,\n\n259\n00:14:32.610 --> 00:14:37.390\nthe shift did actually act upon the array,\nc got put into the correct position.\n\n260\n00:14:37.390 --> 00:14:41.850\nAnd then when we moved it, cuz it says,\nhere's the new first position,\n\n261\n00:14:41.850 --> 00:14:42.755\nc did come out.\n\n262\n00:14:42.755 --> 00:14:45.840\nAnd that array, when we echoed it out,\nshows you that yeah,\n\n263\n00:14:45.840 --> 00:14:51.220\nnow it's showing $1 as c, d is 2,\ne is 3, and so on and so forth.\n\n264\n00:14:51.220 --> 00:14:53.152\nSo yeah, it will work on that,\nthat's a nice way.\n\n265\n00:14:53.152 --> 00:14:56.270\nNow that we know,\nwe can put these two things together.\n\n266\n00:14:56.270 --> 00:15:01.260\nAnd actually start modifying,\nstart expanding the power of taking,\n\n267\n00:15:01.260 --> 00:15:02.940\nwell this does this and that does that.\n\n268\n00:15:02.940 --> 00:15:06.077\nWhat if I marry the two, what will happen?\n\n269\n00:15:06.077 --> 00:15:09.380\nThat was a great question Justin, and\na really cool output, I was unaware.\n\n270\n00:15:09.380 --> 00:15:12.840\n&gt;&gt; Well, something to be aware of,\nas long as you know that happens,\n\n271\n00:15:12.840 --> 00:15:13.970\nthere may be a reason, right?\n\n272\n00:15:13.970 --> 00:15:18.440\nI need to discard the first two because\nthese are, or after I've used them I'm\n\n273\n00:15:18.440 --> 00:15:21.770\ngonna discard, cuz then the rest of\nit is really the data that I need.\n\n274\n00:15:21.770 --> 00:15:27.180\nBe very careful though, because since\nshift if mutating the parameter list,\n\n275\n00:15:27.180 --> 00:15:29.210\nif you need all the parameters and\nyou call shift,\n\n276\n00:15:29.210 --> 00:15:32.080\nyou've lost information\nfrom the front of the list.\n\n277\n00:15:32.080 --> 00:15:35.990\nOr the front of the array, or\nthe front of the parameters, so to speak.\n\n278\n00:15:35.990 --> 00:15:39.930\n&gt;&gt; Probably be a good idea at\nthat point to make a variable,\n\n279\n00:15:39.930 --> 00:15:42.580\nbasically make a variable so\nwhat's he's talking about.\n\n280\n00:15:42.580 --> 00:15:48.310\nIf that array does mutate like that, and\nyou don't account for it, you can account\n\n281\n00:15:48.310 --> 00:15:51.830\nfor it by just saying, I'm gonna make\na variable that holds that original array.\n\n282\n00:15:51.830 --> 00:15:55.152\nThen I can mutate that thing all I want,\nand then reset it whenever I want.\n\n283\n00:15:55.152 --> 00:15:57.620\nSo kinda like what we did with\nthe internal field separator,\n\n284\n00:15:57.620 --> 00:15:58.950\nback in that episode.\n\n285\n00:15:58.950 --> 00:16:01.890\nRemember, if we modify that\ninternal field separator, and\n\n286\n00:16:01.890 --> 00:16:05.740\nthen I expect to use it normally\nlater on down the script, and\n\n287\n00:16:05.740 --> 00:16:08.300\nit's still modified,\nit's gonna break things.\n\n288\n00:16:08.300 --> 00:16:09.960\nSame kind of idea here.\n\n289\n00:16:09.960 --> 00:16:12.410\nAnd Justin, great call on that for\ncatching that.\n\n290\n00:16:12.410 --> 00:16:14.520\nThat's something we have\nto take account for,\n\n291\n00:16:14.520 --> 00:16:16.920\nwhich we can do just\nusing a simple variable.\n\n292\n00:16:16.920 --> 00:16:21.060\n&gt;&gt; Well, yeah, Daniel, that is definitely\nsomething that causes me some strife.\n\n293\n00:16:21.060 --> 00:16:24.520\nUnknown or unanticipated mutations\nthat would change results,\n\n294\n00:16:24.520 --> 00:16:27.125\nso it's like,\nI should probably double check on that.\n\n295\n00:16:27.125 --> 00:16:29.485\nBut, you said we were finished.\n\n296\n00:16:29.485 --> 00:16:31.885\nWe kind of covered all the bases,\nbut before we go,\n\n297\n00:16:31.885 --> 00:16:35.015\ndo you have any kind of parting wisdom for\nus?\n\n298\n00:16:35.015 --> 00:16:38.265\n&gt;&gt; Yes, I do have one more thing\nthat I wanna say about shift.\n\n299\n00:16:38.265 --> 00:16:41.995\nIs that, remember that with our\npositional parameters we have $1, 2,\n\n300\n00:16:41.995 --> 00:16:43.710\n3, 4, so on, so forth.\n\n301\n00:16:43.710 --> 00:16:48.699\nWe also have $0, which is technically\nthe first positionalal parameter, right?\n\n302\n00:16:48.699 --> 00:16:50.460\nAnd it's the command.\n\n303\n00:16:50.460 --> 00:16:52.880\nWhen you use shift,\nit is unaffected, right?\n\n304\n00:16:52.880 --> 00:16:56.774\n0 is always 0, so when you shift,\nit starts at the $1,\n\n305\n00:16:56.774 --> 00:16:58.687\nit does not start with $0.\n\n306\n00:16:58.687 --> 00:17:01.756\nSo just wanted to make sure that\nyou guys are aware of that, and\n\n307\n00:17:01.756 --> 00:17:05.270\ntake that into account as you employ\nshift inside of your own scripts.\n\n308\n00:17:05.270 --> 00:17:11.660\nBut other than that, I think we've got the\nbasics of shift on lock down, hopefully.\n\n309\n00:17:11.660 --> 00:17:13.602\n&gt;&gt; Well, there you have it,\nwe have covered positional parameters.\n\n310\n00:17:13.602 --> 00:17:15.138\nAnd they can be helpful, but\n\n311\n00:17:15.138 --> 00:17:19.310\nthere may be other things coming up that,\nwell, are replacements for them.\n\n312\n00:17:19.310 --> 00:17:22.700\nSo definitely stay tuned for\nmore Linux shell scripting basics.\n\n313\n00:17:22.700 --> 00:17:24.500\nBut we are gonna go ahead and\nget out of here.\n\n314\n00:17:24.500 --> 00:17:29.130\nSo for now, signing off for ITProTV,\nI've been your host, Justin Dennison.\n\n315\n00:17:29.130 --> 00:17:29.816\n&gt;&gt; And I'm Daniel Lowrie.\n\n316\n00:17:29.816 --> 00:17:32.232\n&gt;&gt; And we'll see you next time.\n\n317\n00:17:32.232 --> 00:17:38.157\n[MUSIC]\n\n318\n00:17:38.157 --> 00:17:41.501\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237584332"
        },
        {
          "description": "In this episode, Daniel and Justin explore passing options to a script from the runline. Here they define what options are and how they are typically used. Then they look at passing options with conditional values/arguments.",
          "length": "1662",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-1-user_input_options-100917.00_27_28_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-1-user_input_options-100917.00_27_28_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-1-user_input_options-100917.00_27_28_24.Still001-sm.jpg",
          "title": "User Input Options",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.690\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:02.690 --> 00:00:06.619\n[CROSSTALK]\n\n3\n00:00:06.619 --> 00:00:08.389\n[MUSIC]\n\n4\n00:00:08.389 --> 00:00:11.913\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:11.913 --> 00:00:15.211\n&gt;&gt; Greetings everyone and welcome to\nanother exciting episode of ITPro.TV.\n\n6\n00:00:15.211 --> 00:00:16.893\nI'm your host Justin Dennison,\n\n7\n00:00:16.893 --> 00:00:20.814\nand well we're continuing on with our\nLinux Shell Scripting basics series.\n\n8\n00:00:20.814 --> 00:00:24.291\nAnd particularly we're gonna be\nlooking at options with user input.\n\n9\n00:00:24.291 --> 00:00:26.184\nAnd here to help us along in\nthat very endeavor is Mr.\n\n10\n00:00:26.184 --> 00:00:28.004\nDaniel Lowrie,\nhow you do doing today, Daniel?\n\n11\n00:00:28.004 --> 00:00:29.260\n&gt;&gt; I'm doing fantastic Justin,\n\n12\n00:00:29.260 --> 00:00:31.442\nglad to be back in the studio\nhere with you good folks.\n\n13\n00:00:31.442 --> 00:00:34.319\nWe'll look at some more of those,\nthe Linux shell scripting basics,\n\n14\n00:00:34.319 --> 00:00:35.017\nthat's right.\n\n15\n00:00:35.017 --> 00:00:37.735\nI'm trying to walk you through,\nhold your hand, take you step by step.\n\n16\n00:00:37.735 --> 00:00:41.960\nGet you up to speed when it comes to the\nLinux system and the shell inside of it,\n\n17\n00:00:41.960 --> 00:00:44.960\nwhich is typically Bash,\nwhich we've talked about.\n\n18\n00:00:44.960 --> 00:00:49.443\nAnd today, we're gonna use options,\nand man, this holds a near and\n\n19\n00:00:49.443 --> 00:00:50.879\ndear spot to my heart.\n\n20\n00:00:50.879 --> 00:00:54.115\nAnd when I say it, I mean that\nI can't stand these things, but\n\n21\n00:00:54.115 --> 00:00:55.743\noptions are a necessary evil.\n\n22\n00:00:55.743 --> 00:01:00.671\nYou will need to employ them from time\nto time, especially if you want your\n\n23\n00:01:00.671 --> 00:01:06.088\nscripts to be very scriptlike, like I want\nthese thing to work without my input.\n\n24\n00:01:06.088 --> 00:01:08.595\nI just can give it some options,\nwhen we say options,\n\n25\n00:01:08.595 --> 00:01:10.837\nyou maybe thinking what\ndo you mean by options?\n\n26\n00:01:10.837 --> 00:01:14.502\nWell it's a way that we can feed\ninformation into our script.\n\n27\n00:01:14.502 --> 00:01:18.691\nI guarantee that if you've worked with\nany command line structure before,\n\n28\n00:01:18.691 --> 00:01:22.952\nyou've run across a few command line,\nwell commands that require options.\n\n29\n00:01:22.952 --> 00:01:27.903\nThere's a -f, for file, let me give it\na file name, or a tar is a great example.\n\n30\n00:01:27.903 --> 00:01:32.266\nWe were kind of joking about\nproperly formating a tar command,\n\n31\n00:01:32.266 --> 00:01:33.925\nwithout looking it up.\n\n32\n00:01:33.925 --> 00:01:34.948\n[LAUGH] And this is why I hate options,\n\n33\n00:01:34.948 --> 00:01:36.309\ncuz I always have to look\nup the stinking option.\n\n34\n00:01:36.309 --> 00:01:39.684\nWhat switch does this, and\nwhat argument does that?\n\n35\n00:01:39.684 --> 00:01:44.682\nIt's very consternationing to me,\nbut that's what we're talking.\n\n36\n00:01:44.682 --> 00:01:51.955\n-x, -z does this, -a does that's,\nand those are options.\n\n37\n00:01:51.955 --> 00:01:55.228\nThese are different than the positional\nparameter of we which we spoke\n\n38\n00:01:55.228 --> 00:01:56.344\nabout before, right?\n\n39\n00:01:56.344 --> 00:01:58.604\nThat we look at in the previous episode.\n\n40\n00:01:58.604 --> 00:02:03.920\nThose also do the same kind of thing,\nbut as we have an option,\n\n41\n00:02:03.920 --> 00:02:10.696\nthe option is gonna define some form of\naction that the script is going to take.\n\n42\n00:02:10.696 --> 00:02:15.231\nWhereas input just might be a variable or\nsomething that it's going to work against\n\n43\n00:02:15.231 --> 00:02:18.745\ninside of the script,\njust feeding it very basic information.\n\n44\n00:02:18.745 --> 00:02:20.672\nNow we can still do that in\nconjunction with these things.\n\n45\n00:02:20.672 --> 00:02:24.481\nBut we're gonna start off\nwith just defining options,\n\n46\n00:02:24.481 --> 00:02:27.895\nhow they work, how they look and\nthen firing off.\n\n47\n00:02:27.895 --> 00:02:31.896\n&gt;&gt; Now Daniel, are you saying at\nleast introductory to begin with,\n\n48\n00:02:31.896 --> 00:02:36.777\noptions are providing semantic meaning\nversus where positional parameters,\n\n49\n00:02:36.777 --> 00:02:38.613\nthey're just data, right?\n\n50\n00:02:38.613 --> 00:02:41.213\nSo options have a semantic meaning,\nhow we use the tool?\n\n51\n00:02:41.213 --> 00:02:44.120\n&gt;&gt; Yeah, yeah, typically,\nthat's exactly how these things work out.\n\n52\n00:02:44.120 --> 00:02:47.867\nThat I wanna give it that- f,\nwell no I want or\n\n53\n00:02:47.867 --> 00:02:52.503\nI've got a conditional\nstatement inside of my script,\n\n54\n00:02:52.503 --> 00:02:57.452\nthat if it sees the -d option\nthen do this instead, right?\n\n55\n00:02:57.452 --> 00:02:59.331\nSo that's the whole idea,\n\n56\n00:02:59.331 --> 00:03:03.671\nis that we want to actually control\nthe script in a certain way.\n\n57\n00:03:03.671 --> 00:03:05.624\nWe can probably script that out or\n\n58\n00:03:05.624 --> 00:03:08.703\nbang that out using\na positional parameter as well.\n\n59\n00:03:08.703 --> 00:03:13.005\nBut if we start mixing the chocolate and\nthe peanut butter, if we start doing that,\n\n60\n00:03:13.005 --> 00:03:14.369\nthen things can get awry.\n\n61\n00:03:14.369 --> 00:03:19.101\nThis is more like a standard type thing,\nthis is the way standards work.\n\n62\n00:03:19.101 --> 00:03:22.941\nAnd we'll actually look at some standard\nways in which options are used to give us\n\n63\n00:03:22.941 --> 00:03:24.304\nmore context, to see that.\n\n64\n00:03:24.304 --> 00:03:29.337\nSo if we do employ options inside of our\nscripts or with our scripts, that we're\n\n65\n00:03:29.337 --> 00:03:34.320\ndoing it in a way that most people would\nbe familiar with, if at all possible.\n\n66\n00:03:34.320 --> 00:03:36.447\nSo we'll look at that as\nwe get down the road.\n\n67\n00:03:36.447 --> 00:03:39.890\nBut let's start there, let's just\nstart with those lovely options, and\n\n68\n00:03:39.890 --> 00:03:40.937\nsee how they work out.\n\n69\n00:03:40.937 --> 00:03:46.207\nI've got myself a script that\nI've created called cli_options.\n\n70\n00:03:46.207 --> 00:03:50.017\nLet's take a look at that thing,\nand see what it does.\n\n71\n00:03:50.017 --> 00:03:57.876\nI'll do nano cli_options.sh,\n\n72\n00:03:57.876 --> 00:04:01.130\nso here we go.\n\n73\n00:04:01.130 --> 00:04:03.504\nAnd wow, there's a whole lot\nof weird stuff going on here.\n\n74\n00:04:03.504 --> 00:04:05.719\nWell not shouldn't be so\nweird at this point in time, right?\n\n75\n00:04:05.719 --> 00:04:08.571\nBecause we know what if statements are, we\nsee a case statement happening in there.\n\n76\n00:04:08.571 --> 00:04:10.086\nWe see a while loop,\n\n77\n00:04:10.086 --> 00:04:14.733\nall should be familiar territory\nto you at this point in time.\n\n78\n00:04:14.733 --> 00:04:19.260\nThe only difference is, is that we\nhave some of this echo usage -d for\n\n79\n00:04:19.260 --> 00:04:21.773\ndisk info, -p for current process.\n\n80\n00:04:21.773 --> 00:04:25.918\nAnd- y-, not ye [LAUGH],\n-u for a system uptime.\n\n81\n00:04:25.918 --> 00:04:30.107\nThat is funny, that was my contribution\nto the English alphabet, ye.\n\n82\n00:04:30.107 --> 00:04:32.043\n[LAUGH]\n&gt;&gt; [LAUGH] It's following the [INAUDIBLE]\n\n83\n00:04:32.043 --> 00:04:33.042\n&gt;&gt; It's kind of like y,\n\n84\n00:04:33.042 --> 00:04:35.216\nit's kind of like an e,\nbut no, it's the ye.\n\n85\n00:04:35.216 --> 00:04:37.653\nYeah, my next contribution\nwould be the ha, right?\n\n86\n00:04:37.653 --> 00:04:39.849\n&gt;&gt; [LAUGH]\n&gt;&gt; So don't forget that as well.\n\n87\n00:04:39.849 --> 00:04:44.763\nSo that being said, if we run this,\nif I just say ./cli_options.sh,\n\n88\n00:04:44.763 --> 00:04:47.633\nyou'll see I get that disk usage, right?\n\n89\n00:04:47.633 --> 00:04:50.198\nIt's telling me, you didn't do this right.\n\n90\n00:04:50.198 --> 00:04:54.026\nAgain, standard practice, does help when\nwe give information to your users when\n\n91\n00:04:54.026 --> 00:04:56.750\nthey're doing something wrong,\nso they can do it right.\n\n92\n00:04:56.750 --> 00:04:59.810\nUse the thing we created in\nthe way it's supposed to be used.\n\n93\n00:05:01.310 --> 00:05:05.650\nBut here we go usage means -d disk info,\n-p for current process, -u for\n\n94\n00:05:05.650 --> 00:05:06.880\nsystem uptime.\n\n95\n00:05:06.880 --> 00:05:10.411\nSo if I pass it an option,\nany one of these options or\n\n96\n00:05:10.411 --> 00:05:14.618\nthe multitude of options,\nit should do something, right?\n\n97\n00:05:14.618 --> 00:05:19.275\nIt should give me disk info, so\nlet's look at that chunk of the code here.\n\n98\n00:05:19.275 --> 00:05:23.866\nAs we get down on this while loop,\nwhile -n -$1.\n\n99\n00:05:23.866 --> 00:05:27.021\nSo we remember that -n means inside of\n\n100\n00:05:27.021 --> 00:05:31.170\nthat test condition that\nthis is a non zero value.\n\n101\n00:05:31.170 --> 00:05:34.397\nSo we're looking to that first\npositional parameter, and\n\n102\n00:05:34.397 --> 00:05:37.567\nthis is something Justin and\nI were kind of talking about.\n\n103\n00:05:37.567 --> 00:05:41.004\nAren't these options basically\npositional parameters?\n\n104\n00:05:41.004 --> 00:05:45.200\nYeah, when it's all said and\ndone at the end of the day, it is.\n\n105\n00:05:45.200 --> 00:05:48.905\nBut it's how we're using it that really\nkind of defines it as an option versus\n\n106\n00:05:48.905 --> 00:05:52.268\njust any other standard positions\nparameter that we're just passing\n\n107\n00:05:52.268 --> 00:05:53.421\ninformation, right?\n\n108\n00:05:53.421 --> 00:05:56.788\nSo just keep that in mind.\n\n109\n00:05:56.788 --> 00:06:01.511\nAt the base level, yes,\nthey are in a positional parameter\n\n110\n00:06:01.511 --> 00:06:06.245\nwith those $1, $2, $3,\n$4 and so on and so forth.\n\n111\n00:06:06.245 --> 00:06:09.941\nBut because of how we're using them,\nwe typically say,\n\n112\n00:06:09.941 --> 00:06:12.873\nwell that's an option\nnot just a parameter.\n\n113\n00:06:12.873 --> 00:06:17.480\n&gt;&gt; And something the way I think about\npositional versus non positional\n\n114\n00:06:17.480 --> 00:06:18.598\nrequirements.\n\n115\n00:06:18.598 --> 00:06:22.008\nYeah, we're processing these like\npositional parameters, but ultimately,\n\n116\n00:06:22.008 --> 00:06:24.422\nI don't think if you're able\nto take multiple options.\n\n117\n00:06:24.422 --> 00:06:26.683\nI could be wrong,\na lot of times the tools that I use,\n\n118\n00:06:26.683 --> 00:06:28.598\nit doesn't matter what order they're in.\n\n119\n00:06:28.598 --> 00:06:32.762\nSo their position doesn't matter,\nit's actually just hey,\n\n120\n00:06:32.762 --> 00:06:35.597\n-d means disk usage, -x means extract.\n\n121\n00:06:35.597 --> 00:06:39.998\nDoesn’t matter which one comes first, and\nthat's kind of how you can delineated\n\n122\n00:06:39.998 --> 00:06:44.360\nbetween positional versus these options\nat least today in introductory level.\n\n123\n00:06:44.360 --> 00:06:45.982\n&gt;&gt; That’s exactly right, and\n\n124\n00:06:45.982 --> 00:06:49.235\nwe could put these options in\nany order in which we chose.\n\n125\n00:06:49.235 --> 00:06:51.897\nAnd I’m pretty sure they will work,\nI think they will.\n\n126\n00:06:51.897 --> 00:06:52.975\nWe'll see, I can't remember.\n\n127\n00:06:52.975 --> 00:06:54.625\nIt's been a while since\nI wrote this script.\n\n128\n00:06:54.625 --> 00:06:58.088\n[LAUGH] So I'm walking through it\nthe first time again with you guys.\n\n129\n00:06:58.088 --> 00:07:03.188\nSo let's take a look here, so\nwhile that position parameter\n\n130\n00:07:03.188 --> 00:07:07.889\n$1 has a non-zero value,\nthere is something there.\n\n131\n00:07:07.889 --> 00:07:10.825\nThen we need to do something, and\nthen we encounter our case statement.\n\n132\n00:07:10.825 --> 00:07:14.941\nRun a case statement or\nthat positional parameter in, right?\n\n133\n00:07:14.941 --> 00:07:19.504\nOur standard case structure,\nif it sees -d,\n\n134\n00:07:19.504 --> 00:07:24.192\nit's gonna echo disk info,\nand then do df -h.\n\n135\n00:07:24.192 --> 00:07:27.298\nAnd then we end it with our double\nsemicolon, standard case, right?\n\n136\n00:07:27.298 --> 00:07:28.561\nNothing crazy.\n\n137\n00:07:28.561 --> 00:07:32.050\nIf it sees -p, well you get the same idea.\n\n138\n00:07:32.050 --> 00:07:35.299\nIt's gonna echo current process,\nh top, right?\n\n139\n00:07:35.299 --> 00:07:38.275\n-u, system up time, up time, and\n\n140\n00:07:38.275 --> 00:07:42.658\nthen of course,\nour catch all the of the star there.\n\n141\n00:07:42.658 --> 00:07:46.562\nEcho, whatever that value was, so\nthat they know I put in the wrong thing.\n\n142\n00:07:46.562 --> 00:07:51.589\nAnd is not a valid option and\nthen re-echo that disk use or\n\n143\n00:07:51.589 --> 00:07:55.379\nthe correct usage verbage for our script.\n\n144\n00:07:55.379 --> 00:08:01.100\nThen it’s gonna jump down here,\nclose with esac and then shift.\n\n145\n00:08:01.100 --> 00:08:04.013\nThat way everything pops over, right.\n\n146\n00:08:04.013 --> 00:08:07.149\nSo if there was an extra one, it should\npop into that number one position, so\n\n147\n00:08:07.149 --> 00:08:07.840\non and so forth.\n\n148\n00:08:09.310 --> 00:08:12.120\nDone, else,\ndon't think there's anything else to it.\n\n149\n00:08:12.120 --> 00:08:13.750\nClose our fee.\n\n150\n00:08:13.750 --> 00:08:15.153\nRight, so if, of course,\n\n151\n00:08:15.153 --> 00:08:18.780\nmy else is catch all statement\njust saying something went wrong.\n\n152\n00:08:18.780 --> 00:08:23.200\nI couldn't foresee this as being an issue.\n\n153\n00:08:23.200 --> 00:08:25.970\nSo I'm just gonna give you this general\nstatement of something went wrong.\n\n154\n00:08:25.970 --> 00:08:28.165\nTake a look at your script,\nand it should be done.\n\n155\n00:08:28.165 --> 00:08:30.050\nWell, let's take a look, let's run it.\n\n156\n00:08:30.050 --> 00:08:34.400\nLet's give it some actual options\nthat are valid and invalid.\n\n157\n00:08:34.400 --> 00:08:37.070\nLet's just see what happens.\n\n158\n00:08:37.070 --> 00:08:41.062\nAll right, so\n./cli_options.sh I'll do the -d option.\n\n159\n00:08:41.062 --> 00:08:48.440\nAnd look at that, it says disk info,\nand then gives me the df-h readout.\n\n160\n00:08:48.440 --> 00:08:52.370\nPretty cool, let's see what happens if\nI do, what was the other one we had?\n\n161\n00:08:52.370 --> 00:08:54.420\nU for uptime, there we go.\n\n162\n00:08:54.420 --> 00:08:58.870\nIt says system uptime and it gives me\nthat readout which is system uptime.\n\n163\n00:08:58.870 --> 00:09:03.240\nLet's see what happens\nif I give it -u then -d.\n\n164\n00:09:03.240 --> 00:09:05.070\nLook, it gives me the system uptime and\n\n165\n00:09:05.070 --> 00:09:08.770\nthen gives me the disc info,\nand it carries on as normal.\n\n166\n00:09:08.770 --> 00:09:09.440\nWhat was my other option?\n\n167\n00:09:09.440 --> 00:09:13.215\n-P for processes,\nlet's see that one, that'll be fun.\n\n168\n00:09:13.215 --> 00:09:15.611\n[SOUND] There we go.\n\n169\n00:09:15.611 --> 00:09:18.092\nSo it jumped into htop, right.\n\n170\n00:09:18.092 --> 00:09:22.280\nOnce I quit out of that you'll notice\nthis stuff is still all there.\n\n171\n00:09:22.280 --> 00:09:25.410\nSo that was the greatest script on earth,\nobviously, because it ran the things and\n\n172\n00:09:25.410 --> 00:09:27.130\nechoed them out, our send to the screen.\n\n173\n00:09:27.130 --> 00:09:28.520\nAnd the last one was -p.\n\n174\n00:09:28.520 --> 00:09:30.850\nWhat if I put -p at the beginning?\n\n175\n00:09:30.850 --> 00:09:34.560\nLet's do that, -p, then -u, then -d.\n\n176\n00:09:34.560 --> 00:09:36.440\nJumps me into htop.\n\n177\n00:09:36.440 --> 00:09:39.550\nWhen I'm done with that, quit out.\n\n178\n00:09:39.550 --> 00:09:41.330\nAnd then finishes the rest of the script,\nright?\n\n179\n00:09:41.330 --> 00:09:44.660\nSo that case statement inside of that\nwhile statement is doing all that stuff.\n\n180\n00:09:44.660 --> 00:09:48.850\nSo I can put them in any order I wants and\nstill get the proper readout.\n\n181\n00:09:48.850 --> 00:09:53.035\nI wonder what happens if I do\nthe wrong thing, let's put -f.\n\n182\n00:09:53.035 --> 00:09:58.686\n-f is not a valid option,\ntherefore, this usage is this way.\n\n183\n00:09:58.686 --> 00:10:02.698\n-d, -p and -h, so\njust a little mini help file, right?\n\n184\n00:10:02.698 --> 00:10:09.230\nTypically, you see this with other scripts\nit'll say, yeah, I don't know that option.\n\n185\n00:10:09.230 --> 00:10:13.820\nDo --help for the help file or\nsee man page.\n\n186\n00:10:13.820 --> 00:10:14.490\nThat kind of stuff.\n\n187\n00:10:14.490 --> 00:10:18.248\nSo we're always trying to feed information\nto our user in some way when they're\n\n188\n00:10:18.248 --> 00:10:21.011\ndoing things wrong so\nthey can work the system correctly.\n\n189\n00:10:21.011 --> 00:10:23.730\nAnd get those options like they need.\n\n190\n00:10:23.730 --> 00:10:27.490\n&gt;&gt; And just as a quick reminder,\nsometimes the person who wrote the script\n\n191\n00:10:27.490 --> 00:10:31.970\nis later on the user and may,\nman, I forgot how to do this.\n\n192\n00:10:31.970 --> 00:10:34.191\nYou don't want to have to go\nreading back through the code.\n\n193\n00:10:34.191 --> 00:10:37.425\nIf you just have an isoip,\nhey, -d, -p, -u,\n\n194\n00:10:37.425 --> 00:10:42.720\nI think, were the three that we had here,\nyou can just read that portion.\n\n195\n00:10:42.720 --> 00:10:45.690\nOr at least get that print out and\nthat'll make you way more productive.\n\n196\n00:10:45.690 --> 00:10:49.820\nSo, definitely, definitely put\nthose in there where available.\n\n197\n00:10:49.820 --> 00:10:50.840\n&gt;&gt; That's right.\n\n198\n00:10:50.840 --> 00:10:54.920\nNow, there are times when we\nstill want to use positional\n\n199\n00:10:54.920 --> 00:10:57.981\nperimeter type input along with options.\n\n200\n00:10:57.981 --> 00:11:01.212\nKind of harkening back to what\nJustin was talking about,\n\n201\n00:11:01.212 --> 00:11:04.330\nwhat if I have an option and\nthen some information?\n\n202\n00:11:04.330 --> 00:11:05.960\nAn option and some information.\n\n203\n00:11:05.960 --> 00:11:08.000\nHow do we,\nhow can we start working with that?\n\n204\n00:11:08.000 --> 00:11:11.020\nWell, the first way in which we can\ndo that, or if we just want to say,\n\n205\n00:11:11.020 --> 00:11:14.572\nI've got some dash options and then I\nalso need to feed in some information for\n\n206\n00:11:14.572 --> 00:11:15.720\nother parts of the scripts.\n\n207\n00:11:15.720 --> 00:11:18.596\nI don't necessarily need them\ntogether in any way, shape or form.\n\n208\n00:11:18.596 --> 00:11:23.240\nOr talking correlating with each other,\njust, I have options and\n\n209\n00:11:23.240 --> 00:11:24.520\nI have positional parameters.\n\n210\n00:11:24.520 --> 00:11:26.060\nHow do I make all that work together?\n\n211\n00:11:26.060 --> 00:11:29.922\nWell, inside of bash, there's actually\na neat little option for that.\n\n212\n00:11:29.922 --> 00:11:34.280\nI'm gonna use the word option a lot today,\nand it's the double dash, --, right?\n\n213\n00:11:34.280 --> 00:11:36.440\nThe hyphen hyphen,\nwhatever you like to call it.\n\n214\n00:11:36.440 --> 00:11:41.100\nAnd what that does is it\nsays that if I see that\n\n215\n00:11:42.320 --> 00:11:47.830\ncharacter, that piece of information,\nthat those two hyphens in a row like that.\n\n216\n00:11:47.830 --> 00:11:51.690\nThen anything on the left side of it,\nof the double dash,\n\n217\n00:11:51.690 --> 00:11:53.600\nis gonna be considered an option.\n\n218\n00:11:53.600 --> 00:11:57.920\nAnd anything after that is gonna be\nconsidered a positional parameter.\n\n219\n00:11:57.920 --> 00:12:00.280\nOkay, so\nthat's what's happening with that.\n\n220\n00:12:00.280 --> 00:12:03.480\nYou can actually use this inside of\n\n221\n00:12:03.480 --> 00:12:06.400\ncommands that we already\nhave built in our systems.\n\n222\n00:12:06.400 --> 00:12:09.297\nTo say, I don't want to do\nany positional parameters or\n\n223\n00:12:09.297 --> 00:12:13.325\nthis is where I want the end of,\nnot positional, I'm sorry, options.\n\n224\n00:12:13.325 --> 00:12:14.440\nThis is the end to the options.\n\n225\n00:12:14.440 --> 00:12:17.100\nI don't want to process anything\nafter as this as an option.\n\n226\n00:12:17.100 --> 00:12:21.050\nSo even if I use something that\nis an option, technically,\n\n227\n00:12:21.050 --> 00:12:24.800\nby that system, I don't want you\nto interpret it as an option.\n\n228\n00:12:24.800 --> 00:12:27.640\nI want you to interpret it as\nsomething that's being passed\n\n229\n00:12:27.640 --> 00:12:31.430\nto the command itself as\nother than an option, okay?\n\n230\n00:12:31.430 --> 00:12:32.300\nHopefully, that makes sense,\n\n231\n00:12:32.300 --> 00:12:36.460\nlet's give you a, let's give you\na real world example of that, sort of.\n\n232\n00:12:36.460 --> 00:12:37.680\nOf how that would look.\n\n233\n00:12:37.680 --> 00:12:41.480\nI'm gonna use grep to do it,\nlet me clear our screen here.\n\n234\n00:12:42.690 --> 00:12:44.070\nLet me get out of this.\n\n235\n00:12:44.070 --> 00:12:47.950\nAnd I will use grep to make this happen.\n\n236\n00:12:47.950 --> 00:12:55.150\nSo if I do grep -v, like so,\nand then I have a file.\n\n237\n00:12:55.150 --> 00:12:56.480\nLet me see if I have a file.\n\n238\n00:12:56.480 --> 00:12:58.370\nI'm sure I do.\n\n239\n00:12:58.370 --> 00:13:00.860\nHere we go, test file, so\nif cat test file, see what's in there.\n\n240\n00:13:02.030 --> 00:13:05.070\nJust has no other purpose in life,\nthere we go, just extra data, stuff for\n\n241\n00:13:05.070 --> 00:13:06.230\nus to play with.\n\n242\n00:13:06.230 --> 00:13:10.228\nIf I do grep -v, that -v option is telling\n\n243\n00:13:10.228 --> 00:13:15.150\ngrep to reverse what it\nis it's looking for.\n\n244\n00:13:15.150 --> 00:13:20.270\nRight, so if I tell it to look for\nCrush, like that.\n\n245\n00:13:22.230 --> 00:13:26.100\nIn there, and I said the file\nname is testfile, there we go.\n\n246\n00:13:26.100 --> 00:13:28.340\nIt gives me every line except crush,\nright?\n\n247\n00:13:28.340 --> 00:13:31.600\nSo it's kind of the opposite\nof what you're looking for.\n\n248\n00:13:31.600 --> 00:13:37.992\nBut, if I do this, like that,\nthen it's going to look for\n\n249\n00:13:37.992 --> 00:13:42.040\n-v as something inside of the file.\n\n250\n00:13:42.040 --> 00:13:44.060\nIt's not gonna actually run correct.\n\n251\n00:13:44.060 --> 00:13:45.890\nSee, it says message file.\n\n252\n00:13:45.890 --> 00:13:50.820\nIt thinks that Crush is the file that I'm\ntrying to pass it because it's seeing this\n\n253\n00:13:50.820 --> 00:13:55.040\nas my regular expression to\nlook inside of that file.\n\n254\n00:13:55.040 --> 00:13:58.150\nSo that dash dash right\nthere has told grep,\n\n255\n00:13:58.150 --> 00:14:00.953\nstop processing options\nafter the double dash.\n\n256\n00:14:00.953 --> 00:14:03.240\nWell, what's after the double dash,\nmy options.\n\n257\n00:14:03.240 --> 00:14:06.500\nSo if you get these things backwards,\nit can really mess things up.\n\n258\n00:14:06.500 --> 00:14:07.593\nBut if you get it right,\n\n259\n00:14:07.593 --> 00:14:10.942\nit can work out to your advantage to\nbe able to say I've got some options.\n\n260\n00:14:10.942 --> 00:14:14.214\nAnd then after that I want\neverything else to be informational,\n\n261\n00:14:14.214 --> 00:14:17.020\npassing on into the system itself,\nall right?\n\n262\n00:14:17.020 --> 00:14:20.770\nSo that can be a little tricky\nto get your mind wrapped around.\n\n263\n00:14:20.770 --> 00:14:23.370\nJust spend a little time\nmemorizing that fact,\n\n264\n00:14:23.370 --> 00:14:28.010\nanything after the dash dash will be\nconsidered a positional parameter.\n\n265\n00:14:28.010 --> 00:14:32.160\nOkay, all right so\nlet's look at an example.\n\n266\n00:14:32.160 --> 00:14:35.490\nLook at some code here\nas I always like to do.\n\n267\n00:14:35.490 --> 00:14:40.206\nI'm going to, I'm going to show you how it\nworks first cuz I think that's what I like\n\n268\n00:14:40.206 --> 00:14:41.345\nto call Tarantino.\n\n269\n00:14:41.345 --> 00:14:43.324\nWe're gonna start at the end and\nthen go back to the beginning and\n\n270\n00:14:43.324 --> 00:14:44.065\nwork our way to the end.\n\n271\n00:14:44.065 --> 00:14:48.276\nIt's fun, right?\nSo let's ./cli_options and\n\n272\n00:14:48.276 --> 00:14:53.360\nit is with params, options, I am sure I\n\n273\n00:14:53.360 --> 00:14:59.225\ndid somethin [INAUDIBLE] Options_wParams.\n\n274\n00:14:59.225 --> 00:15:07.590\nThere we go, and\nI'm gonna pash at my -x, -y, -z.\n\n275\n00:15:07.590 --> 00:15:12.509\nThen I'm gonna pash it, p1, p2, and p3.\n\n276\n00:15:12.509 --> 00:15:13.740\nThis is gonna be an interesting things.\n\n277\n00:15:13.740 --> 00:15:15.520\nIt's gonna be fun, watch this.\n\n278\n00:15:15.520 --> 00:15:21.132\nIf hit enter, it clears the screen and\nit says -x option is verified,\n\n279\n00:15:21.132 --> 00:15:25.850\n-y option is verified,\nand -z option is verified.\n\n280\n00:15:25.850 --> 00:15:31.020\nBut when it gets to p1, p2 and\np3, it's seeing it as an option.\n\n281\n00:15:31.020 --> 00:15:32.350\nWhy is that?\n\n282\n00:15:32.350 --> 00:15:33.995\nBecause I didn't use the double dash.\n\n283\n00:15:33.995 --> 00:15:38.110\nSo inside my code I'm using that double\ndash as a way to do that definition.\n\n284\n00:15:38.110 --> 00:15:40.750\nSo if I go in here and I change it.\n\n285\n00:15:40.750 --> 00:15:42.700\nPut that -- in.\n\n286\n00:15:42.700 --> 00:15:47.050\nNow, you'll notice it's seeing x as\nan option, y as an option, z as an option.\n\n287\n00:15:47.050 --> 00:15:47.970\nThey're all verified.\n\n288\n00:15:47.970 --> 00:15:50.180\nThey do exist inside\nthe code as a parameter.\n\n289\n00:15:51.258 --> 00:15:52.579\nI'm sorry, as an option.\n\n290\n00:15:52.579 --> 00:15:57.478\nBut now p1 is being seen\nas a positional parameter.\n\n291\n00:15:57.478 --> 00:16:01.355\nAnd it is in position 1 P2\nis in positional parameter,\n\n292\n00:16:01.355 --> 00:16:05.156\nposition number 2,\ndollar sign 2, dollar sign 3.\n\n293\n00:16:05.156 --> 00:16:09.696\nNow it's seeing it correctly, because\nonce I stuck that double dash in there,\n\n294\n00:16:09.696 --> 00:16:12.335\nthe code saw that and\nsaid when I see this,\n\n295\n00:16:12.335 --> 00:16:14.874\nI'm supposed to stop processing options.\n\n296\n00:16:14.874 --> 00:16:17.675\nAnd see everything else as\na positional parameter, all right?\n\n297\n00:16:17.675 --> 00:16:21.172\nSo now, let's look at the code and\nsee how I made that see that.\n\n298\n00:16:21.172 --> 00:16:24.975\nSo that we can employ that if we need it,\nright?\n\n299\n00:16:24.975 --> 00:16:30.682\nGoing here, and we will nano,\nthat was called, what was the name?\n\n300\n00:16:30.682 --> 00:16:36.042\nWith positional parameters,\ncli_options_wParams.sh.\n\n301\n00:16:36.042 --> 00:16:41.850\nSo here we go, very similar to what we\nsaw in our previous set of coding is,\n\n302\n00:16:41.850 --> 00:16:44.960\nuntil just kind of flop things around.\n\n303\n00:16:44.960 --> 00:16:47.342\nInstead of a while,\nI used an until, right?\n\n304\n00:16:47.342 --> 00:16:49.656\nJust to spice things up.\n\n305\n00:16:49.656 --> 00:16:54.615\nSo until $1, that positional\nparameter has a zero value,\n\n306\n00:16:54.615 --> 00:17:01.439\nuntil that comes true, do this, case\n$1 in, standard case statement, right?\n\n307\n00:17:01.439 --> 00:17:05.590\nEcho, if it's -x, if it sees that,\noption is verified, -y,\n\n308\n00:17:05.590 --> 00:17:08.691\noption is verified, -z,\noption is verified.\n\n309\n00:17:08.691 --> 00:17:12.326\nThere we go,\nback with our good old shift and break.\n\n310\n00:17:12.326 --> 00:17:15.388\nBut this time, we have a double dash.\n\n311\n00:17:15.388 --> 00:17:18.447\nI'm defining,\nwhen you see that double dash,\n\n312\n00:17:18.447 --> 00:17:23.346\nuse shift to drop that double dash out\nof the way, move everything over one.\n\n313\n00:17:23.346 --> 00:17:26.675\nNow, whatever is after\nthat becomes that area.\n\n314\n00:17:26.675 --> 00:17:32.175\nAnd since that has defined anything\nbefore that was position or an option,\n\n315\n00:17:32.175 --> 00:17:38.212\nnow we have p1, p2, and p3 as positional\nparameters in the right spot, okay?\n\n316\n00:17:38.212 --> 00:17:40.385\nAnd there we go, we have shift as well.\n\n317\n00:17:40.385 --> 00:17:44.214\nAgain, just for the same purposes for\nthe last couple [UNKNOWN}, and then Echo.\n\n318\n00:17:44.214 --> 00:17:46.548\nOf course if you pass at\nsomething that it doesn't expect,\n\n319\n00:17:46.548 --> 00:17:48.286\nyou're gonna have a little problem there.\n\n320\n00:17:48.286 --> 00:17:53.119\nNow down here is where I start\nhandling my positional parameters and\n\n321\n00:17:53.119 --> 00:17:59.668\na little more effective ways is where I'm\ngetting that, it's a positional parameter.\n\n322\n00:17:59.668 --> 00:18:05.101\nSo it's saying I just made a generic\nvar1=1 for parameter in, remember,\n\n323\n00:18:05.101 --> 00:18:10.629\n$@ takes all those additional parameters\nand sees them as an array, right?\n\n324\n00:18:10.629 --> 00:18:13.855\nIt's gonna say p1, p2, p3.\n\n325\n00:18:13.855 --> 00:18:16.083\nActually it's gonna see that\nall as just that array.\n\n326\n00:18:16.083 --> 00:18:18.786\nJust keep it that way, right?\n\n327\n00:18:18.786 --> 00:18:22.203\nDollar sign at symbol, array, don't forget\nyour double quotes around that thing.\n\n328\n00:18:22.203 --> 00:18:25.032\nBecause you're gonna have a bad\ntime if you don't, right?\n\n329\n00:18:25.032 --> 00:18:26.948\nSo, that's an important portion of that.\n\n330\n00:18:26.948 --> 00:18:31.808\nThen Echo, positional parameter for\nfile one, so whatever is there,\n\n331\n00:18:31.808 --> 00:18:37.322\npositional parameter one, right,\nis gonna equal whatever that parameter is.\n\n332\n00:18:37.322 --> 00:18:42.188\nSo parameter for this, so, it's gonna\niterate through that array, put that value\n\n333\n00:18:42.188 --> 00:18:46.310\ninto the parameter variable,\nthat's what parameter's gonna mean.\n\n334\n00:18:46.310 --> 00:18:50.924\nSo now I've got dollar sign parameter\ncalling that specific variable.\n\n335\n00:18:50.924 --> 00:18:52.771\nAnd then I increment var1, so\n\n336\n00:18:52.771 --> 00:18:56.465\nthat I can count out positional\nparameter of var1 equals 1,\n\n337\n00:18:56.465 --> 00:19:00.956\nvar1 equals 2, var1 equals 3 until it\ngets to the end of the done state.\n\n338\n00:19:00.956 --> 00:19:03.784\nSo, once it's done cycling\nthrough it's array,\n\n339\n00:19:03.784 --> 00:19:07.266\nI have no reason to keep incrementing\nif I want, or even use it,\n\n340\n00:19:07.266 --> 00:19:10.061\ncuz we're done with it,\nat least in this script.\n\n341\n00:19:10.061 --> 00:19:10.796\nSo, that's what's happening.\n\n342\n00:19:10.796 --> 00:19:14.671\nSo, that's why when you see\nme employ that double dash,\n\n343\n00:19:14.671 --> 00:19:18.301\nit actually does what I need it to do,\nwhich is to say,\n\n344\n00:19:18.301 --> 00:19:22.776\nthose options are done I've moved\non to positional parameters.\n\n345\n00:19:22.776 --> 00:19:26.571\nAnd now, I'm gonna bundle all that up in\nthis lovely array, and just like we had in\n\n346\n00:19:26.571 --> 00:19:30.216\nthe positional parameters show, we just\nstart working with it in that sense.\n\n347\n00:19:30.216 --> 00:19:32.288\nMaking very much use of it.\n\n348\n00:19:32.288 --> 00:19:35.788\n&gt;&gt; Now Daniel, it seems to me that,\nif I really wanted to,\n\n349\n00:19:35.788 --> 00:19:39.150\nI could just disobey that\ndash dash in my own scripts.\n\n350\n00:19:39.150 --> 00:19:42.995\nBut it, you're showing us convention\nthat's used in other tools that we should\n\n351\n00:19:42.995 --> 00:19:45.549\nuse in our own shell scripts,\njust for consistency.\n\n352\n00:19:45.549 --> 00:19:46.119\nAm I correct?\n\n353\n00:19:46.119 --> 00:19:52.344\n&gt;&gt; Yeah, yeah, you totally could say,\nif I saw FF, it would do the same thing.\n\n354\n00:19:52.344 --> 00:19:54.192\nActually, because when I\nwas writing stuff, like,\n\n355\n00:19:54.192 --> 00:19:55.514\nyeah I could just do this couldn't I?\n\n356\n00:19:55.514 --> 00:19:58.944\nAnd I scripted it and\nchecked it, yes, it ran.\n\n357\n00:19:58.944 --> 00:20:01.418\nAs you're just saying,\nonce you define this, but yes.\n\n358\n00:20:01.418 --> 00:20:05.494\nThis is something that's built in to Bash.\n\n359\n00:20:05.494 --> 00:20:09.620\nBut if we want to employ it here,\nwe've gotta make a condition for it, so\n\n360\n00:20:09.620 --> 00:20:11.866\nthat I'll actually catch it, right?\n\n361\n00:20:11.866 --> 00:20:15.672\nSo just be aware of that, and\nit is conventional wisdom to do, or\n\n362\n00:20:15.672 --> 00:20:17.722\nconventional, what do they say?\n\n363\n00:20:17.722 --> 00:20:19.327\nBest practice.\n\n364\n00:20:19.327 --> 00:20:21.330\nPCs there, he's a batch coder.\n\n365\n00:20:21.330 --> 00:20:23.224\nHe looks at this, he's gonna go.\n\n366\n00:20:23.224 --> 00:20:26.281\nHe wants this to be options and\nthat to be parameters, so\n\n367\n00:20:26.281 --> 00:20:28.242\nwe're working with it in that way.\n\n368\n00:20:28.242 --> 00:20:33.300\nOkay, so there you go,\nthat is the double dash symbol.\n\n369\n00:20:33.300 --> 00:20:37.321\nI wonder if I have anything else\nhere to go along with that.\n\n370\n00:20:37.321 --> 00:20:42.418\nNo, I think we're gonna move on to\nprocessing options with those values.\n\n371\n00:20:42.418 --> 00:20:45.637\nAll right, so\nlet's see how that works out,\n\n372\n00:20:45.637 --> 00:20:48.951\nin a little bit more of a practical way,\nokay?\n\n373\n00:20:48.951 --> 00:20:54.180\nSo I've got this other example,\nget out of here\n\n374\n00:20:55.357 --> 00:21:00.499\nand we will /clioptions_values dot SH.\n\n375\n00:21:00.499 --> 00:21:03.099\nI ran it and I didn't know it.\n\n376\n00:21:03.099 --> 00:21:05.797\nIt helps Larry when you\ndo the right thing.\n\n377\n00:21:05.797 --> 00:21:09.586\nThere we go, clear this line.\n\n378\n00:21:09.586 --> 00:21:12.689\nLet's take a look at this guy right here,\nso, very, again,\n\n379\n00:21:12.689 --> 00:21:17.002\nsimilar to what we've already work on,\nwe're kind of building on that foundation.\n\n380\n00:21:17.002 --> 00:21:23.668\nAnd If we see here now\ninstead of just verifying,\n\n381\n00:21:23.668 --> 00:21:29.693\nI wanna pass something\nas data as an option.\n\n382\n00:21:29.693 --> 00:21:37.375\nSo if I do a dash x,\nis it gonna do anything other than just?\n\n383\n00:21:37.375 --> 00:21:42.335\nAnd here I've got value is\n,this positional parameter\n\n384\n00:21:42.335 --> 00:21:47.715\nwhich is number two and\nthen echo dash x option is verified and\n\n385\n00:21:47.715 --> 00:21:51.533\nthen run the dates with that value, okay.\n\n386\n00:21:51.533 --> 00:21:56.396\nSo and then we'll shift cuz once it's\ndone we can move everything back over and\n\n387\n00:21:56.396 --> 00:22:00.238\nget back in the line so\nthat the rest of the script can process.\n\n388\n00:22:00.238 --> 00:22:03.427\nSo let's run this and\nsee what it's supposed to look like.\n\n389\n00:22:03.427 --> 00:22:11.046\nIf I do dot slash CLI underscore options\nunderscore underscore of values LSH.\n\n390\n00:22:11.046 --> 00:22:15.283\nAnd I give it some information,\nwhat could it be?\n\n391\n00:22:15.283 --> 00:22:19.403\nI say dash x, there's my option, right?\n\n392\n00:22:19.403 --> 00:22:25.045\nThen I say, +%Y%, month,\n\n393\n00:22:25.045 --> 00:22:29.822\npercent, day, like so.\n\n394\n00:22:29.822 --> 00:22:33.411\nIf I fire that off,\nit sees the dash X option,\n\n395\n00:22:33.411 --> 00:22:37.865\nit also has some information\nthat I can go along with it.\n\n396\n00:22:37.865 --> 00:22:40.960\nSo that's gonna to be its\nposition parameter value.\n\n397\n00:22:40.960 --> 00:22:43.956\nSo once it's done, it's all saw dash x.\n\n398\n00:22:43.956 --> 00:22:46.362\nThere's my option, drop off.\n\n399\n00:22:46.362 --> 00:22:49.558\nNow, jump over to that next position,\nwhich is dollar sign two.\n\n400\n00:22:49.558 --> 00:22:53.896\nI'm going to use that as, kind of like,\nwhat Justin's been talking about,\n\n401\n00:22:53.896 --> 00:22:56.050\nmoving more into that realm, right.\n\n402\n00:22:56.050 --> 00:22:57.179\nYeah, I can run the data command.\n\n403\n00:22:57.179 --> 00:22:59.701\nIt is gonna give me the generic output,\nbut\n\n404\n00:22:59.701 --> 00:23:03.004\nwhat if I wanted to modify\nthat update command, right?\n\n405\n00:23:03.004 --> 00:23:06.559\nSo let my script know that I\nwanna run the date command,\n\n406\n00:23:06.559 --> 00:23:10.751\nI gotta do the dash, what was it,\nx to say date, you need to run.\n\n407\n00:23:10.751 --> 00:23:15.203\nBut I need it to run in a certain way,\nand I can define any way I want.\n\n408\n00:23:15.203 --> 00:23:18.573\nSo now this script is\na whole lot more scriptable,\n\n409\n00:23:18.573 --> 00:23:21.070\nif I were to use it in another script.\n\n410\n00:23:21.070 --> 00:23:22.053\nYou see how that works.\n\n411\n00:23:22.053 --> 00:23:28.779\nSo that's why we see a lot of this type\nof action inside of commands that we use.\n\n412\n00:23:28.779 --> 00:23:31.521\nBecause if I wanna script\nthat down the road,\n\n413\n00:23:31.521 --> 00:23:34.634\nI need to be able to not\nwork with that interactive.\n\n414\n00:23:34.634 --> 00:23:36.683\nI'm a huge fan of interactive scripts.\n\n415\n00:23:36.683 --> 00:23:40.529\nI love working with interactive\nprograms because there's a lot less for\n\n416\n00:23:40.529 --> 00:23:42.491\nyou to have to remember to work with.\n\n417\n00:23:42.491 --> 00:23:45.341\nIt's typically feeding you\ninformation that you'll need.\n\n418\n00:23:45.341 --> 00:23:47.781\nBut if I needed to be away\nfrom the keyboard, and\n\n419\n00:23:47.781 --> 00:23:51.990\nstill have that script run and do it in\na certain way, these options, working with\n\n420\n00:23:51.990 --> 00:23:56.089\nthe positional parameters is gonna be\nthe way that we're gonna need to do that.\n\n421\n00:23:56.089 --> 00:23:58.043\nAnd we've got a little bit more to go.\n\n422\n00:23:58.043 --> 00:24:02.666\nActually, we've got a lot more bit to go,\nbut I don't know that I have time to cover\n\n423\n00:24:02.666 --> 00:24:05.390\nHow we can further this\nprocess in this episode.\n\n424\n00:24:05.390 --> 00:24:07.480\n&gt;&gt; Yeah,\nI know we're running nigh on time.\n\n425\n00:24:07.480 --> 00:24:10.980\nWe've got a few minutes, but\nit's definitely not enough to\n\n426\n00:24:10.980 --> 00:24:14.060\nhandle some of the other option\nhandling capabilities of bash.\n\n427\n00:24:14.060 --> 00:24:18.920\nHowever, I do have a couple of\nquestions just for my own clarity.\n\n428\n00:24:18.920 --> 00:24:24.180\nThere was an additional shift in\nthe options with values inside of that -x.\n\n429\n00:24:24.180 --> 00:24:27.560\nWas that to make sure that we\nshifted not only the option but\n\n430\n00:24:27.560 --> 00:24:31.133\nalso the value out of\nthe set of parameters for, so\n\n431\n00:24:31.133 --> 00:24:35.700\nlike the -x, we do the thing, and\nthen there's a shift at the bottom.\n\n432\n00:24:35.700 --> 00:24:38.860\nAnd at the end of all those\ncase statements we always shift\n\n433\n00:24:38.860 --> 00:24:42.970\nbecause we're peeling off\nthe most recently used one.\n\n434\n00:24:42.970 --> 00:24:47.090\nIs that additional shift because\nyou're saying when you use -x there's\n\n435\n00:24:47.090 --> 00:24:51.020\nan additional set of information that you\npass, so I can pop off both of those?\n\n436\n00:24:51.020 --> 00:24:53.050\n&gt;&gt; Now, yes.\nYou understand perfectly correct.\n\n437\n00:24:53.050 --> 00:24:54.540\nThat's exactly what's happening.\n\n438\n00:24:54.540 --> 00:24:58.616\nThat's why that shift is there,\nis to say, I have -x, but\n\n439\n00:24:58.616 --> 00:25:02.600\nthere's something after that that\nneeds to work with this, right?\n\n440\n00:25:02.600 --> 00:25:07.180\nSo if I just shift that over, and since\nthat's the area in which we're working,\n\n441\n00:25:07.180 --> 00:25:09.550\nthen anything after that\nwill be left alone, right?\n\n442\n00:25:09.550 --> 00:25:11.690\nSo I need that piece of information.\n\n443\n00:25:11.690 --> 00:25:14.310\nSo we're always gonna have, and\nit would probably be good for me,\n\n444\n00:25:14.310 --> 00:25:16.340\nI don't know I did it with this script.\n\n445\n00:25:16.340 --> 00:25:20.570\nIt'd probably be good for me to go in\nhere and say this is how this works.\n\n446\n00:25:20.570 --> 00:25:24.580\nIf you -x,\n-x needs to have the date format.\n\n447\n00:25:24.580 --> 00:25:27.630\nSo I would put that in there\nas well as information for\n\n448\n00:25:27.630 --> 00:25:31.210\nmy user to let them know\nthat specific information,\n\n449\n00:25:31.210 --> 00:25:35.720\nthat extra stuff that you can work\nwith that -x option in your script.\n\n450\n00:25:35.720 --> 00:25:37.220\nYou can also do this with that.\n\n451\n00:25:37.220 --> 00:25:39.800\nSo if you pass something to it,\nit will see it.\n\n452\n00:25:39.800 --> 00:25:42.510\nAnd that shift is helping us go,\nyou used -x,\n\n453\n00:25:42.510 --> 00:25:44.340\nbut there should be something over here.\n\n454\n00:25:44.340 --> 00:25:45.690\nMove it into place.\n\n455\n00:25:45.690 --> 00:25:47.570\nAnd work with it, right?\n\n456\n00:25:47.570 --> 00:25:49.580\nAnd then,\nlets keep on going down the road.\n\n457\n00:25:49.580 --> 00:25:53.520\nSo remember, that's what shift is all\nabout is just moving stuff into a position\n\n458\n00:25:53.520 --> 00:25:58.580\nthat you are trying to work with so\nthat it will actually be there [LAUGH].\n\n459\n00:25:58.580 --> 00:25:59.960\n&gt;&gt; And my second question.\n\n460\n00:25:59.960 --> 00:26:02.050\nMaybe I missed this, this could be me.\n\n461\n00:26:02.050 --> 00:26:04.800\nBut we talked about TAR,\nactually, before this episode,\n\n462\n00:26:04.800 --> 00:26:07.090\nwe talked about TAR a little\nbit in this episode.\n\n463\n00:26:07.090 --> 00:26:11.665\nBut a lot of times,\nI see TAR commands like tar -xfv,\n\n464\n00:26:11.665 --> 00:26:16.976\nblah blah blah, can't remember them,\nalways look them up.\n\n465\n00:26:16.976 --> 00:26:19.960\n&gt;&gt; [LAUGH]\n&gt;&gt; But is that a different convention?\n\n466\n00:26:19.960 --> 00:26:22.610\nBecause we've seen here,\noptions are always separated.\n\n467\n00:26:22.610 --> 00:26:26.050\nIt's probably easier to process\nseparated options than kind of\n\n468\n00:26:26.050 --> 00:26:27.078\nconcatenated together.\n\n469\n00:26:27.078 --> 00:26:28.310\nAm I right?\n&gt;&gt; Yeah, you're totally right.\n\n470\n00:26:28.310 --> 00:26:32.420\nAnd actually, that's what we're gonna\nget into with our next episode here.\n\n471\n00:26:32.420 --> 00:26:33.080\nThat's why I'm saying,\n\n472\n00:26:33.080 --> 00:26:36.370\nI don't have nearly enough time to\nget into how we make that happen.\n\n473\n00:26:36.370 --> 00:26:39.770\nBut, yeah, a lot of times you\nwill see that as a convention is\n\n474\n00:26:39.770 --> 00:26:44.580\ninstead of doing -x,\n-y, -z, you see, -xyz.\n\n475\n00:26:44.580 --> 00:26:50.560\nAnd it knows, these are all options that\nI need to look and move through that.\n\n476\n00:26:50.560 --> 00:26:54.090\nWe're gonna use something called\ngetopt to make that happen.\n\n477\n00:26:54.090 --> 00:26:56.916\nBut like I said,\nI don't have enough time for this show.\n\n478\n00:26:56.916 --> 00:26:58.230\n&gt;&gt; [LAUGH]\n&gt;&gt; To teach you good folks out\n\n479\n00:26:58.230 --> 00:26:59.670\nthere how that thing works.\n\n480\n00:26:59.670 --> 00:27:00.720\nIt's a little complex.\n\n481\n00:27:00.720 --> 00:27:03.750\nYou gotta understand some\nsyntax of how it works.\n\n482\n00:27:03.750 --> 00:27:04.260\nBut once you do,\n\n483\n00:27:04.260 --> 00:27:07.750\nyou'll be able to employ that type of\nconventionality inside of your scripts.\n\n484\n00:27:07.750 --> 00:27:08.730\nAnd a lot of people like that.\n\n485\n00:27:08.730 --> 00:27:11.230\nSo if you want that as an option,\nwe can do that.\n\n486\n00:27:11.230 --> 00:27:12.760\nBut that's for part two [LAUGH].\n\n487\n00:27:12.760 --> 00:27:14.550\n&gt;&gt; Well, there you have it,\nladies and gentlemen.\n\n488\n00:27:14.550 --> 00:27:17.990\nWe have to come back for a part two to\nlook at handling options in a little more\n\n489\n00:27:17.990 --> 00:27:21.140\ncomplex cases, especially those\nthat you always have to look up.\n\n490\n00:27:21.140 --> 00:27:22.770\nSo definitely stay tuned for that.\n\n491\n00:27:22.770 --> 00:27:24.530\nBut we're gonna go ahead and\nwrap this one up.\n\n492\n00:27:24.530 --> 00:27:27.780\nSo signing out for ITProTV,\nI've been your host Justin Dennison.\n\n493\n00:27:27.780 --> 00:27:28.610\n&gt;&gt; And I'm Daniel Lowrie.\n\n494\n00:27:28.610 --> 00:27:31.190\n&gt;&gt; And we'll see you next time.\n\n495\n00:27:31.190 --> 00:27:37.182\n[MUSIC]\n\n496\n00:27:37.182 --> 00:27:40.102\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237597886"
        },
        {
          "description": "In this episode, Daniel and Justin continue looking at passing options to a shell script from the runline. Here they show you how to employ getopt and getopts for expanding option functionality. They also briefly discuss option standardization for better ease-of-use.",
          "length": "1842",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-2-user_input_options_pt_2-100917.00_36_41_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-2-user_input_options_pt_2-100917.00_36_41_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-2-2-user_input_options_pt_2-100917.00_36_41_01.Still001-sm.jpg",
          "title": "User Input Options Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.190 --> 00:00:05.129\nWelcome to IT Pro TV,\nI'm your host Don Pezet.\n\n2\n00:00:05.129 --> 00:00:06.551\n[CROSSTALK]\n\n3\n00:00:06.551 --> 00:00:08.176\n[MUSIC]\n\n4\n00:00:08.176 --> 00:00:12.174\n&gt;&gt; You're watching IT Pro TV.\n\n5\n00:00:12.174 --> 00:00:15.536\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITPro.TV.\n\n6\n00:00:15.536 --> 00:00:17.620\nI'm your host, Justin Dennison.\n\n7\n00:00:17.620 --> 00:00:22.990\nAnd we're back with a part two on\noptions when we're handling user input\n\n8\n00:00:22.990 --> 00:00:25.300\nIn our Linux Shell Scripting Basic Series.\n\n9\n00:00:25.300 --> 00:00:29.210\nAnd here to help us along to further\nunderstand how to use options, Mr.\n\n10\n00:00:29.210 --> 00:00:29.750\nDaniel Lowrie.\n\n11\n00:00:29.750 --> 00:00:30.600\nHow are you doing today, Daniel?\n\n12\n00:00:30.600 --> 00:00:31.520\n&gt;&gt; I'm doing great, Justin.\n\n13\n00:00:31.520 --> 00:00:33.791\nI do feel like you've set\nthe bar a little high.\n\n14\n00:00:33.791 --> 00:00:35.068\nWith me explaining [LAUGH].\n\n15\n00:00:35.068 --> 00:00:39.960\n&gt;&gt; Well,as a developer I like to\nover promise and under deliver.\n\n16\n00:00:39.960 --> 00:00:40.720\nThat's how I roll.\n\n17\n00:00:40.720 --> 00:00:42.420\n&gt;&gt; That's the creed,\nthe developer's creed, right?\n\n18\n00:00:42.420 --> 00:00:43.480\nYou have to memorize that.\n\n19\n00:00:43.480 --> 00:00:45.305\n&gt;&gt; Yeah [LAUGH].\n&gt;&gt; Or you could move along in your life,\n\n20\n00:00:45.305 --> 00:00:46.510\nbut he's actually right.\n\n21\n00:00:46.510 --> 00:00:50.080\nWe're coming back with more on our part\ntwo on options working with command line\n\n22\n00:00:50.080 --> 00:00:56.070\noptions and parameters inside of your\nscripts or with your scripts should I say.\n\n23\n00:00:56.070 --> 00:01:00.460\nAnd we left off the last episode when\nwe looked at working with options.\n\n24\n00:01:00.460 --> 00:01:01.846\nIt was pretty straightforward.\n\n25\n00:01:01.846 --> 00:01:07.161\nI'm just gonna snatch these\nspecific positional parameters\n\n26\n00:01:07.161 --> 00:01:13.622\nkind of turn them in to an option per say,\nby defining them in a certain way.\n\n27\n00:01:13.622 --> 00:01:18.104\nWe're gonna use them in such a way and\nwe're gonna use tools of the trade that\n\n28\n00:01:18.104 --> 00:01:21.412\nallow us to realize yes,\nthat is an optional area.\n\n29\n00:01:21.412 --> 00:01:26.720\nOr if I wanted to throw that dash x or\ndash y or whatever to my program\n\n30\n00:01:26.720 --> 00:01:31.656\nto do something specifically,\nand that's what I would do.\n\n31\n00:01:31.656 --> 00:01:36.280\nBut when we left off,\nJustin had posed the question.\n\n32\n00:01:36.280 --> 00:01:40.830\nI was doing dash x, dash y, dash z.\n\n33\n00:01:40.830 --> 00:01:45.680\nI said what if you do it like this,\ncuz I see this a lot, dash xyz.\n\n34\n00:01:45.680 --> 00:01:48.170\nWhen we do that, and I said, yeah,\nbut we didn't have enough time.\n\n35\n00:01:48.170 --> 00:01:50.550\nWe have to come back to here,\nand that's what we're at today.\n\n36\n00:01:50.550 --> 00:01:52.340\nIt's, what if I wanna do that very thing?\n\n37\n00:01:52.340 --> 00:01:57.270\nI wanna put dash x, y, and\nz all together in that style of format.\n\n38\n00:01:57.270 --> 00:01:58.480\nHow can I do that?\n\n39\n00:01:58.480 --> 00:02:04.420\nWell, we have to use a little trick,\na little helper, if you will,\n\n40\n00:02:04.420 --> 00:02:08.890\nto help us get that type of workings.\n\n41\n00:02:08.890 --> 00:02:14.708\nAnd it's called getopt,\nG-E-T-O-P-T, single word, getopt.\n\n42\n00:02:14.708 --> 00:02:20.400\nAnd basically, what that does is,\nit says, well, look up here.\n\n43\n00:02:20.400 --> 00:02:25.850\nAnd in our, so we have our script or\ncommand, and then we have the options.\n\n44\n00:02:25.850 --> 00:02:28.450\nDash x, y and z, right?\n\n45\n00:02:28.450 --> 00:02:33.540\nBut to see it as a certain way,\nbasically truncated.\n\n46\n00:02:33.540 --> 00:02:36.410\nIf I see an x, if I see a y,\n\n47\n00:02:36.410 --> 00:02:42.320\nif I see a z, then you can break\nthem off into their own option.\n\n48\n00:02:42.320 --> 00:02:44.100\nSo get opt that's what it does.\n\n49\n00:02:44.100 --> 00:02:49.190\nSo I feed it something, it turns that\nsomething into the format that I want.\n\n50\n00:02:49.190 --> 00:02:52.500\nSo that gonna be positional\nparameter number one, in our minds,\n\n51\n00:02:52.500 --> 00:02:55.790\nbut getopt sees it and goes,\nthat's not what it is.\n\n52\n00:02:55.790 --> 00:02:57.810\nI've actually got this little set\nof rules over here that tells me,\n\n53\n00:02:57.810 --> 00:03:01.630\nthat what you've given me\nyou want to use as options.\n\n54\n00:03:01.630 --> 00:03:04.400\nAnd now, I can break those up\nbased off this set of rules.\n\n55\n00:03:04.400 --> 00:03:06.520\nSo that's kinda of what's going on here.\n\n56\n00:03:06.520 --> 00:03:10.017\nSo these guys are given\nthe basic idea of it.\n\n57\n00:03:10.017 --> 00:03:15.550\nLet's see, also, we can work with,\nkind of like how we had the date command.\n\n58\n00:03:15.550 --> 00:03:20.479\nIn our previous look, we had dash x and\nI can throw some date information to it.\n\n59\n00:03:20.479 --> 00:03:22.010\nWhat if I wanna do that with this?\n\n60\n00:03:22.010 --> 00:03:23.100\nI can do that as well.\n\n61\n00:03:23.100 --> 00:03:27.294\nI just have to employ a colon\nalong with my set of rules.\n\n62\n00:03:27.294 --> 00:03:29.240\nWe're gonna set all this up and\nsee how it looks.\n\n63\n00:03:30.370 --> 00:03:35.338\nWe are going to need to use the set\ncommand as well, because what set\n\n64\n00:03:35.338 --> 00:03:40.304\nis going to do is it's going to say\nall right, I want to use getops,\n\n65\n00:03:40.304 --> 00:03:45.132\nand I want to set whatever\nthe positional parameters are given.\n\n66\n00:03:45.132 --> 00:03:50.258\nI'm going to set getopt and\nits rule set to correspond kind\n\n67\n00:03:50.258 --> 00:03:55.920\nof like map it to what we fit\nthrough that positional parameter.\n\n68\n00:03:57.060 --> 00:04:01.700\nSo that's how all this works, I know\nit's like there's a lot of goings on.\n\n69\n00:04:01.700 --> 00:04:04.660\nAnd yeah, it is a lot of goings on.\n\n70\n00:04:04.660 --> 00:04:07.840\nBut hopefully, as we dive into\nthe actual looking of it and\n\n71\n00:04:07.840 --> 00:04:11.810\nseeing it inside the code itself,\nit's gonna make a bit more sense.\n\n72\n00:04:11.810 --> 00:04:16.400\nSo you can see, yes, I see what you meant\nby mapping it and things of that nature.\n\n73\n00:04:16.400 --> 00:04:20.670\nSo, I think without further ado,\nlet's jump into some code.\n\n74\n00:04:20.670 --> 00:04:22.750\nTake a look at what that looks like here.\n\n75\n00:04:22.750 --> 00:04:27.690\nSo we've got this on Nano this guy,\n\n76\n00:04:27.690 --> 00:04:32.685\nwe'll say the cli_options_getopt.sh.\n\n77\n00:04:34.070 --> 00:04:37.580\nHere's our code and\nit's very very similar again,\n\n78\n00:04:37.580 --> 00:04:41.903\nI don't want to get you guys out\nof too much familiar territory.\n\n79\n00:04:41.903 --> 00:04:45.137\nI want you to be able to feel confident\nin what we've already seen and\n\n80\n00:04:45.137 --> 00:04:49.280\nwe're just gonna modify it to work\nin what we're learning, okay?\n\n81\n00:04:49.280 --> 00:04:52.250\nSo I've got echo bunch of\nstars clears the screen.\n\n82\n00:04:52.250 --> 00:04:57.678\nI've got the until statements all\nright here very, very similar to,\n\n83\n00:04:57.678 --> 00:05:02.192\nnot just similar, but\nidentical, if I'm not mistaken.\n\n84\n00:05:02.192 --> 00:05:05.630\nYeah, it's identical to the previous code,\nexcept for one line.\n\n85\n00:05:05.630 --> 00:05:10.022\nAnd that one line is right here, set.\n\n86\n00:05:10.022 --> 00:05:14.992\nHere you go, and you'll notice we're using\nour lovely command substitution type\n\n87\n00:05:14.992 --> 00:05:17.690\nsyntax to say,\nbecause getopt is a command,\n\n88\n00:05:17.690 --> 00:05:20.962\nyou can run that from the command line and\nwork with it.\n\n89\n00:05:20.962 --> 00:05:25.614\nI'm gonna take that, I'm gonna\nmake it do something specific and\n\n90\n00:05:25.614 --> 00:05:29.700\nI'm gonna set that as the way\nit works inside of my script.\n\n91\n00:05:29.700 --> 00:05:31.580\nThat's what we're doing with set.\n\n92\n00:05:31.580 --> 00:05:36.100\nAnd you can look at the set and it's\noptions by just going to the man page.\n\n93\n00:05:36.100 --> 00:05:41.880\nSo if you do man builtins,\nlike that, and if you search for\n\n94\n00:05:41.880 --> 00:05:48.910\nset back slash because it's\ngot a special character there.\n\n95\n00:05:48.910 --> 00:05:55.940\nIt is set Just [--, like that,\nit'll take us to where we're looking for.\n\n96\n00:05:55.940 --> 00:05:58.150\nAnd there's your set,\nfill out options, the name and\n\n97\n00:05:58.150 --> 00:06:00.690\nvalue of each cell variable displayed,\nand off it goes.\n\n98\n00:06:00.690 --> 00:06:04.380\nSo if you wanna learn more about\nwhat set does, and how it's working,\n\n99\n00:06:04.380 --> 00:06:08.492\nwe do have the -- option,\n\n100\n00:06:08.492 --> 00:06:14.090\nwhich is, wait for it,\nthere it is, right there.\n\n101\n00:06:14.090 --> 00:06:17.570\nSo if no arguments follow this option,\nthen the positional parameters are unset.\n\n102\n00:06:17.570 --> 00:06:20.830\nOtherwise, the positional\nparameters are set to the args,\n\n103\n00:06:20.830 --> 00:06:23.420\neven if some of them begin with a dash,\nright?\n\n104\n00:06:23.420 --> 00:06:25.730\nSo just, there's how this is working.\n\n105\n00:06:25.730 --> 00:06:30.729\nSo I'm setting those arguments that I\npassed to the command line into getopt and\n\n106\n00:06:30.729 --> 00:06:34.984\nit's functionality, and\nthat's going to become the standard for\n\n107\n00:06:34.984 --> 00:06:37.088\nour script from thereon, okay?\n\n108\n00:06:37.088 --> 00:06:38.960\nHopefully, that will make some sense.\n\n109\n00:06:38.960 --> 00:06:42.020\nIf not, read that file,\nkind of walk yourself through it.\n\n110\n00:06:42.020 --> 00:06:42.730\nWork with it a little bit.\n\n111\n00:06:42.730 --> 00:06:47.468\nThat, I tend to find, that's how I really\nget the understanding that I need for\n\n112\n00:06:47.468 --> 00:06:50.673\nwhat's happening,\nbecause I actually just try it.\n\n113\n00:06:50.673 --> 00:06:53.892\nAnd see what goes, see what breaks,\nuntil I figure out, I'm doing this wrong,\n\n114\n00:06:53.892 --> 00:06:55.330\nI'm doing that wrong.\n\n115\n00:06:55.330 --> 00:06:57.280\nSo it's just my helpful tip for the day.\n\n116\n00:06:58.700 --> 00:07:05.610\nSo we've got this set up here, so\nit's saying, getopt is going to be x:y z.\n\n117\n00:07:05.610 --> 00:07:10.650\nThis could be In this function, and\nin this format like that, x, y and\n\n118\n00:07:10.650 --> 00:07:15.480\nz remember I said the colon adds\nlike there's going to be that value.\n\n119\n00:07:15.480 --> 00:07:18.900\nSo when we run -x and\nI want to give that date format.\n\n120\n00:07:18.900 --> 00:07:25.284\nThat colon there let's that know that\nI expect some value there, okay?\n\n121\n00:07:25.284 --> 00:07:29.666\nSo I could have colons on all these, if\nthey don't have their own value, but only\n\n122\n00:07:29.666 --> 00:07:34.920\nx needs that value that's passed to it for\nthe functionality that it should look for.\n\n123\n00:07:34.920 --> 00:07:36.690\nSo I put the colon after the x.\n\n124\n00:07:36.690 --> 00:07:39.630\nSo remember, it goes after whatever\noption you're looking for.\n\n125\n00:07:39.630 --> 00:07:42.987\nSo as you see, very simple, x, y, and z.\n\n126\n00:07:42.987 --> 00:07:47.981\nAnd what it does is it says, all right,\nlook at whatever's passed to it\n\n127\n00:07:47.981 --> 00:07:53.000\nfrom this variable, which I'm just\ncalling a variable which is what?\n\n128\n00:07:53.000 --> 00:07:56.079\nIt's the array of anything in\nthe positional parameters.\n\n129\n00:07:56.079 --> 00:07:58.591\nSo if I do dash xyz.\n\n130\n00:07:58.591 --> 00:08:02.632\nThat's what's gonna be here,\nit's going to see dash xyz.\n\n131\n00:08:02.632 --> 00:08:05.402\nAnd it's gonna take every one of those,\nit's going to break those up and\n\n132\n00:08:05.402 --> 00:08:07.640\nsee it because that's\nwhat get opt is doing.\n\n133\n00:08:07.640 --> 00:08:10.390\nIt says, I see a dash, and\n\n134\n00:08:10.390 --> 00:08:13.800\nit kind of says,\nwell I don't care about the dash so much.\n\n135\n00:08:13.800 --> 00:08:15.430\nI just care about what's after it.\n\n136\n00:08:15.430 --> 00:08:16.470\nI see an x.\n\n137\n00:08:16.470 --> 00:08:20.098\nWell guess what, I've got a position\nthat's suppose to be an option.\n\n138\n00:08:20.098 --> 00:08:22.667\nSo if I see x, make that an option and\n\n139\n00:08:22.667 --> 00:08:27.130\nit expects a value because\nI have a colon after that.\n\n140\n00:08:27.130 --> 00:08:31.730\nSees y, well go back, look at it again,\nlook in this, go to the next one.\n\n141\n00:08:31.730 --> 00:08:32.720\nIs there anything after x?\n\n142\n00:08:32.720 --> 00:08:33.630\nYeah, there's a y.\n\n143\n00:08:33.630 --> 00:08:34.870\nGood, I'm expecting a y.\n\n144\n00:08:36.100 --> 00:08:37.250\nZ, I'm expecting a z.\n\n145\n00:08:37.250 --> 00:08:40.780\nIf there's an a after that, it's not gonna\nexpect a and therefore it's not gonna be\n\n146\n00:08:40.780 --> 00:08:43.560\nset by get opt and it's gonna get\ncaught by our case statement.\n\n147\n00:08:43.560 --> 00:08:48.040\nOur case is going to go, not expecting\nthat, because it's not being passed to me\n\n148\n00:08:48.040 --> 00:08:52.360\nfrom get ops and\nthat's an invalid option, right.\n\n149\n00:08:52.360 --> 00:08:53.290\nSo that's how that's working.\n\n150\n00:08:53.290 --> 00:08:55.450\nHopefully that makes some sense.\n\n151\n00:08:55.450 --> 00:08:58.850\nSo let's see this guy in actuality, right.\n\n152\n00:08:58.850 --> 00:09:01.178\nLet's move along here.\n\n153\n00:09:01.178 --> 00:09:07.710\nLet's see here, dot slash,\nit is seal options underscore getops.sh.\n\n154\n00:09:07.710 --> 00:09:12.920\nI'm supposed to pass it like dash x,\nit does look for\n\n155\n00:09:12.920 --> 00:09:16.190\na value after that because I'm\nworking with that date command.\n\n156\n00:09:16.190 --> 00:09:22.762\nSo, I will need to do my y ampersand\nmonth ampersand date, like that.\n\n157\n00:09:22.762 --> 00:09:27.076\nBut then I can go right back to that\nwhole y and z type format, right,\n\n158\n00:09:27.076 --> 00:09:29.040\njust put them together.\n\n159\n00:09:29.040 --> 00:09:33.560\nIt loves it since it strips off\nthose lovely little leading dashes.\n\n160\n00:09:33.560 --> 00:09:34.060\nIt's good to go.\n\n161\n00:09:35.140 --> 00:09:39.798\nAnd now I can do also my P1, P2,\n\n162\n00:09:39.798 --> 00:09:44.700\nand P3, and off we go.\n\n163\n00:09:44.700 --> 00:09:46.160\nLet's try it out.\n\n164\n00:09:46.160 --> 00:09:48.960\nThere we go, and\nit worked just like I expected.\n\n165\n00:09:48.960 --> 00:09:52.040\nSo I get dash x option was verified.\n\n166\n00:09:52.040 --> 00:09:55.120\nDate is invalid date.\n\n167\n00:09:55.120 --> 00:09:57.640\nWell I must have put something,\nI forgot the plus.\n\n168\n00:09:57.640 --> 00:09:59.550\nThere's supposed to be a plus\nat the beginning of that.\n\n169\n00:09:59.550 --> 00:10:02.140\nNot a big deal, we'll run that back\nup really quickly, put that in there.\n\n170\n00:10:02.140 --> 00:10:04.900\nMake it correct and\nright for you good folks.\n\n171\n00:10:08.010 --> 00:10:09.880\nThere we go, there we go.\n\n172\n00:10:09.880 --> 00:10:12.440\nSo I found the x option, get opt saw that.\n\n173\n00:10:12.440 --> 00:10:14.450\nIt saw the x, no problem.\n\n174\n00:10:14.450 --> 00:10:15.830\nI've got an X field.\n\n175\n00:10:15.830 --> 00:10:17.380\nPut in, yeah, don't forget that value.\n\n176\n00:10:17.380 --> 00:10:18.750\nIt's supposed to go along there.\n\n177\n00:10:18.750 --> 00:10:20.900\nThat colon lets me know that.\n\n178\n00:10:20.900 --> 00:10:22.445\nAnd then anything after that, keep going.\n\n179\n00:10:22.445 --> 00:10:27.410\nOkay, I saw y, I saw z,\ntherefore we got y option was verified,\n\n180\n00:10:27.410 --> 00:10:29.060\nz option was verified.\n\n181\n00:10:29.060 --> 00:10:32.400\nAnd then positional parameters one,\ntwo, and three.\n\n182\n00:10:32.400 --> 00:10:34.350\nAnd off we go, okay.\n\n183\n00:10:34.350 --> 00:10:38.383\nSo because it realized\nanything that wasn't fed,\n\n184\n00:10:38.383 --> 00:10:41.090\nwe also have this dash dash option but\nit did work with\n\n185\n00:10:41.090 --> 00:10:45.731\npositional parameters without needing\nthat because of the get option command.\n\n186\n00:10:45.731 --> 00:10:50.870\nLet's see, anything else that I want\nto throw off that to give you guys,\n\n187\n00:10:50.870 --> 00:10:55.248\nI mean we could make it more\nsimplistic then this if we want to,\n\n188\n00:10:55.248 --> 00:10:57.378\njust so you guys can see that.\n\n189\n00:10:57.378 --> 00:11:01.730\nJust forget that date parameter,\nthat value that goes with it.\n\n190\n00:11:01.730 --> 00:11:07.390\nThis should make it a little easier\nbecause now I can just put x, y, and z.\n\n191\n00:11:10.640 --> 00:11:14.540\nSo now, as you see,\nI've got just dash xyz.\n\n192\n00:11:14.540 --> 00:11:18.160\nTypically, the type of formatting\nyou'll see more often than not.\n\n193\n00:11:18.160 --> 00:11:22.450\nBut we do have dash x and\nsomething, y and z all put together.\n\n194\n00:11:22.450 --> 00:11:24.395\nThis should run as well.\n\n195\n00:11:24.395 --> 00:11:30.407\nDid have an invalid option, because\nof the, I though I saved the colon.\n\n196\n00:11:30.407 --> 00:11:31.990\nI took the colon out.\n\n197\n00:11:31.990 --> 00:11:35.766\nTry date dash dash,\nI must have done something crazy.\n\n198\n00:11:35.766 --> 00:11:42.620\nIt's still seeing it as\nformatting because of my code.\n\n199\n00:11:42.620 --> 00:11:44.170\nSee, it's looking for it here.\n\n200\n00:11:44.170 --> 00:11:45.210\nAnd this is working out.\n\n201\n00:11:45.210 --> 00:11:47.140\nI would have to take all of this out.\n\n202\n00:11:47.140 --> 00:11:51.220\nBut I wanted you guys to see, if you don't\nhave the colons, other than the fact that\n\n203\n00:11:51.220 --> 00:11:53.420\nyour code actually has\nsomething in there looking for\n\n204\n00:11:53.420 --> 00:11:54.930\na value and moving things around.\n\n205\n00:11:54.930 --> 00:11:57.290\nIf that wasn't there,\nthis wouldn't have given us the problem.\n\n206\n00:11:57.290 --> 00:11:58.810\nBut it did technically work.\n\n207\n00:11:58.810 --> 00:12:01.110\nZ was verified, position one, two, and\n\n208\n00:12:01.110 --> 00:12:05.090\nthree are verified as well in\nthe correct spots they were.\n\n209\n00:12:05.090 --> 00:12:10.489\nSo if you want to take that\ntype of optional input,\n\n210\n00:12:10.489 --> 00:12:15.374\nlike what Justin was saying,\nI want to do dash\n\n211\n00:12:15.374 --> 00:12:20.030\nx something, dash y and dash z, dash nvr.\n\n212\n00:12:20.030 --> 00:12:24.254\nLike Tar does, dash zxvf kind of output.\n\n213\n00:12:24.254 --> 00:12:30.430\nIf I wanna do that get opt is a great\nway in which we can make that happen.\n\n214\n00:12:31.550 --> 00:12:34.140\nThere's only one problem,\nshe has a fatal flaw.\n\n215\n00:12:34.140 --> 00:12:38.790\nAnd her fatal flaw, that horrible,\nhorrible, horrible monster,\n\n216\n00:12:38.790 --> 00:12:44.600\nis the fact that it does not\nwork with spaces, right.\n\n217\n00:12:44.600 --> 00:12:45.690\nSo here's the problem, and you're like,\n\n218\n00:12:45.690 --> 00:12:48.290\nwhat do you mean it\ndoesn't work with spaces?\n\n219\n00:12:48.290 --> 00:12:48.830\nHere's what happens.\n\n220\n00:12:48.830 --> 00:12:53.420\nLet me go back in here,\nwe'll put that colon back in.\n\n221\n00:12:53.420 --> 00:12:55.470\nLike so, save that.\n\n222\n00:12:55.470 --> 00:12:59.250\nGo back down here, and\nlet's say we're running this option here.\n\n223\n00:12:59.250 --> 00:13:00.720\nWe've got everything formatted correctly.\n\n224\n00:13:00.720 --> 00:13:05.307\nDash x, it's got its value that it's\nlooking for with the plus year, month,\n\n225\n00:13:05.307 --> 00:13:05.965\nand date.\n\n226\n00:13:05.965 --> 00:13:08.500\nIt's got y and z, and it's got P1, P2, P3.\n\n227\n00:13:08.500 --> 00:13:10.314\nWell what if I'm like,\n\n228\n00:13:10.314 --> 00:13:16.397\nI want to past test P1 cuz I'm testing\nsomething with that parameter, right.\n\n229\n00:13:16.397 --> 00:13:19.213\nSo I come in here and say test P1.\n\n230\n00:13:19.213 --> 00:13:24.111\nI go, well that's not gonna work\nbecause it's gonna see test\n\n231\n00:13:24.111 --> 00:13:26.520\nas a positional parameter.\n\n232\n00:13:26.520 --> 00:13:27.340\nIt's going to take that in.\n\n233\n00:13:27.340 --> 00:13:31.793\nYou're gonna get weird outputs,\nsee parameter position one test and\n\n234\n00:13:31.793 --> 00:13:33.380\nthen P1, P2, P3.\n\n235\n00:13:33.380 --> 00:13:38.291\nYeah, yeah, how do we typically say, I\nwant this even though it's got a space or\n\n236\n00:13:38.291 --> 00:13:40.620\na weird character or something in it?\n\n237\n00:13:40.620 --> 00:13:42.020\nHow do I bind that together?\n\n238\n00:13:42.020 --> 00:13:44.115\nWe use something like quotation\nmarks usually, correct.\n\n239\n00:13:44.115 --> 00:13:48.425\nSo no problem,\nI'll throw some quotes around bad boy.\n\n240\n00:13:48.425 --> 00:13:53.900\nQuote test P1, like that.\n\n241\n00:13:53.900 --> 00:13:58.850\nNow it should say, test P1,\nP2, and P3, right.\n\n242\n00:13:58.850 --> 00:14:01.565\nBut look,\nwe still get the same kind of output.\n\n243\n00:14:01.565 --> 00:14:04.897\nThose quotation marks weren't helping\nme at all because of that space.\n\n244\n00:14:04.897 --> 00:14:08.620\nGet opt was like, sorry,\nthat's not gonna work.\n\n245\n00:14:08.620 --> 00:14:14.527\nBecause of that, we have to run to\nits bigger brother, older brother,\n\n246\n00:14:14.527 --> 00:14:20.450\nwhatever you want to call it, sibling,\nget opts, plural, g e t o p t s.\n\n247\n00:14:20.450 --> 00:14:27.140\nNow when we do this,\nit works in a different way, okay.\n\n248\n00:14:27.140 --> 00:14:29.820\nIt's similar, but different.\n\n249\n00:14:29.820 --> 00:14:30.590\nSo yeah,\n\n250\n00:14:30.590 --> 00:14:33.900\nlike any good math system they're really\ngot to throw a monkey wrench at you.\n\n251\n00:14:33.900 --> 00:14:37.410\n&gt;&gt; Is this one of those things where they\nshare a name so that's their similarity.\n\n252\n00:14:37.410 --> 00:14:40.210\nBut the other stuff they\ndo is it to that extent or\n\n253\n00:14:40.210 --> 00:14:44.680\nis it they're pretty close but\nthe space thing that you just showed us.\n\n254\n00:14:44.680 --> 00:14:45.250\n&gt;&gt; Yeah.\n\n255\n00:14:45.250 --> 00:14:48.630\n&gt;&gt; That's obviously different otherwise\nyou wouldn't have shown us that.\n\n256\n00:14:48.630 --> 00:14:51.260\nBut how different are we really talking?\n\n257\n00:14:51.260 --> 00:14:57.019\n&gt;&gt; So when we're talking different,\nwere talking, there's a lot of similarity,\n\n258\n00:14:57.019 --> 00:15:02.369\nbut in the way that it actually functions\nis the difference of bits, right.\n\n259\n00:15:02.369 --> 00:15:08.234\nSo instead it kind of like, at least to\nmy understanding it's basically saying,\n\n260\n00:15:08.234 --> 00:15:12.229\ntake the options that's been\npassed to you, right, or\n\n261\n00:15:12.229 --> 00:15:16.480\nnot the options,\nthe options really are the same.\n\n262\n00:15:16.480 --> 00:15:19.100\nIt's the positional parameters\nin where it really kind of\n\n263\n00:15:20.190 --> 00:15:22.280\ndoes something different, okay.\n\n264\n00:15:22.280 --> 00:15:24.130\nWe're going to call\nthat down as the array.\n\n265\n00:15:25.440 --> 00:15:29.180\nAnd it's going to be able\nto work with that because\n\n266\n00:15:29.180 --> 00:15:31.970\nwe're gonna iterate through\nit with a while loop, right.\n\n267\n00:15:31.970 --> 00:15:37.150\nSo instead of, if we look at get opt,\n\n268\n00:15:37.150 --> 00:15:40.870\nwe've got this right here, right,\nwe're setting this into the system.\n\n269\n00:15:42.180 --> 00:15:46.909\nBut that's not really how it's\ngonna work with get opts.\n\n270\n00:15:46.909 --> 00:15:51.021\nSo let's look at get opts and\nsee to compare and\n\n271\n00:15:51.021 --> 00:15:55.352\ncontrast, that's the words\nI'm looking for.\n\n272\n00:15:55.352 --> 00:15:56.620\nLet's compare and contrast.\n\n273\n00:15:56.620 --> 00:16:01.886\nLet's CTRL+X out of there and\nlet's see here,\n\n274\n00:16:01.886 --> 00:16:06.645\nwe will nano cli_options_getopts.sh.\n\n275\n00:16:08.000 --> 00:16:10.192\nSo, here we have a wild statement.\n\n276\n00:16:10.192 --> 00:16:13.660\nNow, without using the set command,\nso we don't need the set command,\n\n277\n00:16:13.660 --> 00:16:19.120\nbecause what's happening is we have\ngetopts and then we're calling in.\n\n278\n00:16:19.120 --> 00:16:22.908\nAnd now we've got a colon to start with,\nokay,\n\n279\n00:16:22.908 --> 00:16:26.543\n.colons were for taking in values, right?\n\n280\n00:16:26.543 --> 00:16:32.033\nBut, with here it's to say,\nthis is the start of my optional area.\n\n281\n00:16:32.033 --> 00:16:35.190\nAnd then we're gonna put this in this,\nand you're like, what is opts?\n\n282\n00:16:35.190 --> 00:16:36.930\nThis is a variable.\n\n283\n00:16:36.930 --> 00:16:41.130\nCreating a variable to pump\nthese thing into, okay?\n\n284\n00:16:41.130 --> 00:16:45.200\nSo it says do case opts in, we see -x,\n\n285\n00:16:45.200 --> 00:16:49.130\nthe option, and then you'll notice\nthis guy right here, OPTARG.\n\n286\n00:16:50.350 --> 00:16:52.198\nSo this is where it handles.\n\n287\n00:16:52.198 --> 00:16:58.020\nIt kinda like, takes this value and\nuses it as a temporary storage area,\n\n288\n00:16:58.020 --> 00:17:03.922\nto deal with things and it is dealing\nwith that arguments, parameters.\n\n289\n00:17:03.922 --> 00:17:07.560\nOkay, hopefully, this is making\nsense cuz it is a very tricky thing.\n\n290\n00:17:07.560 --> 00:17:12.030\nYou probably will need to peruse the main\nfile on this thing to get a really\n\n291\n00:17:12.030 --> 00:17:13.212\ngood foundation.\n\n292\n00:17:13.212 --> 00:17:18.320\nI just wanted to show you guys,\nthat we can use getopt and getopts.\n\n293\n00:17:18.320 --> 00:17:20.130\nAnd we'll have to use one versus the other\n\n294\n00:17:21.400 --> 00:17:26.100\nin case we have a positional plan\nwhere that has spaces in it, right.\n\n295\n00:17:26.100 --> 00:17:28.633\nYou don't have spaces positional\nparameters, no problem,\n\n296\n00:17:28.633 --> 00:17:29.860\nyou just getopt all day long.\n\n297\n00:17:29.860 --> 00:17:32.190\nBut if you do have spaces in\nyour positional parameters and\n\n298\n00:17:32.190 --> 00:17:36.132\nyou wanna bind that stuff together,\nyou're gonna need to use getopts.\n\n299\n00:17:37.410 --> 00:17:39.490\nAll right, so we can handle spaces.\n\n300\n00:17:39.490 --> 00:17:43.840\nThe way it kind of works is,\nI wrote this, I made a nice definition,\n\n301\n00:17:43.840 --> 00:17:45.530\nI wanna say it eloquently.\n\n302\n00:17:45.530 --> 00:17:50.260\nIt sequentially iterates through\nthe options using a while loop, right,\n\n303\n00:17:50.260 --> 00:17:51.880\nthat's what we're doing.\n\n304\n00:17:51.880 --> 00:17:54.880\nSo every time the getopts runs,\n\n305\n00:17:54.880 --> 00:17:59.700\nit grabs the next thing that it found\nin that positional parameter, right?\n\n306\n00:17:59.700 --> 00:18:04.980\nThat's why we see this value here,\nof this variable.\n\n307\n00:18:04.980 --> 00:18:07.138\nSo its gonna go x, all right?\n\n308\n00:18:07.138 --> 00:18:10.150\nThat's one, and it grabs x and\n\n309\n00:18:10.150 --> 00:18:13.090\nthen comes down and\ndoes anything it finds inside of the loop.\n\n310\n00:18:14.340 --> 00:18:19.284\nAnd then, once that loop is done, the next\niteration is gonna go, well, we do the x,\n\n311\n00:18:19.284 --> 00:18:20.809\nwe're iterating onto y?\n\n312\n00:18:20.809 --> 00:18:22.147\nWe're iterating onto z?\n\n313\n00:18:22.147 --> 00:18:25.680\nWe're iterating onto one, two, and three,\nand dash, whatever you've given it.\n\n314\n00:18:25.680 --> 00:18:29.600\nIt's just gonna see that as kind of\nlike an array for us to iterate through.\n\n315\n00:18:29.600 --> 00:18:34.010\nAnd all I'm doing with the while that\nyou're saying while this is true,\n\n316\n00:18:34.010 --> 00:18:35.032\ndo this, okay.\n\n317\n00:18:35.032 --> 00:18:37.860\nThis is just,\nas long as this statement is true.\n\n318\n00:18:37.860 --> 00:18:41.120\nSo, if I put anything that's not true\nhere, so if it finds any option,\n\n319\n00:18:41.120 --> 00:18:44.150\nif I put z, y, z, a.\n\n320\n00:18:44.150 --> 00:18:48.502\nA isn't gonna work, because getops doesn't\nsee it here, it's not defining A for\n\n321\n00:18:48.502 --> 00:18:49.135\nanything.\n\n322\n00:18:49.135 --> 00:18:53.874\nSo it's just gonna go, well, that's not\na true statement and our loop ends, okay?\n\n323\n00:18:53.874 --> 00:18:57.393\nSo just basically going,\nwhile getopts statement is true,\n\n324\n00:18:57.393 --> 00:18:59.332\ndo what's inside of that while.\n\n325\n00:18:59.332 --> 00:19:01.430\nAnd there we go.\n\n326\n00:19:01.430 --> 00:19:06.050\nSo, we take opts,\nwe pop it down into our case statement in.\n\n327\n00:19:06.050 --> 00:19:08.310\nAnd you'll also notice that I\ndon't have any leading dashes,\n\n328\n00:19:08.310 --> 00:19:09.910\nbecause I don't need them here.\n\n329\n00:19:09.910 --> 00:19:13.720\ngetopts, strip those leading dashes out,\nsays I don't need them.\n\n330\n00:19:13.720 --> 00:19:14.537\nI don't even really see them, right.\n\n331\n00:19:14.537 --> 00:19:15.779\nIt just kind of strips them off.\n\n332\n00:19:16.840 --> 00:19:19.320\nSo, I don't even need them\ninside my case there.\n\n333\n00:19:19.320 --> 00:19:20.702\nIt actually,\nwill probably give me an error if I did.\n\n334\n00:19:20.702 --> 00:19:24.202\nIf you're looking for -x,\nwhere it's get off to saying,\n\n335\n00:19:24.202 --> 00:19:26.100\nI don't have -x, I've got x.\n\n336\n00:19:27.240 --> 00:19:29.298\nSo, we use that, that way.\n\n337\n00:19:29.298 --> 00:19:32.660\nThis is all conventional stuff,\nways in which you would probably see this,\n\n338\n00:19:32.660 --> 00:19:34.300\nways in which you should be doing it.\n\n339\n00:19:36.230 --> 00:19:38.420\nAnd here we go, it takes the optarg.\n\n340\n00:19:38.420 --> 00:19:42.121\nSo that value right there is\ngonna come from this x, right.\n\n341\n00:19:42.121 --> 00:19:43.860\nThat's gonna be pulled down.\n\n342\n00:19:43.860 --> 00:19:48.700\nSo if I have, -xyz, or if I have -x,\n\n343\n00:19:48.700 --> 00:19:52.780\nthe value that goes there so\n\n344\n00:19:52.780 --> 00:19:56.490\nthat date formats it's gonna see that and\nknows that goes together.\n\n345\n00:19:56.490 --> 00:20:00.820\nBut with the others it's gonna see nothing\nthere so that's gonna to have nothing\n\n346\n00:20:00.820 --> 00:20:04.390\nthere, and I don't have anything\nin my code even looking for it.\n\n347\n00:20:04.390 --> 00:20:05.500\nSo, it shouldn't even stop.\n\n348\n00:20:07.470 --> 00:20:12.638\nAnd then we've come down and\nwe shift optind is the other\n\n349\n00:20:12.638 --> 00:20:18.490\nvariable that getopts is dealing with.\n\n350\n00:20:18.490 --> 00:20:23.460\nSo we've got optind and we've got optargs,\nso exactly and we me make sure\n\n351\n00:20:23.460 --> 00:20:27.355\nthat I'm really giving you the good\ndefinitions of what these things are,\n\n352\n00:20:27.355 --> 00:20:31.240\noptarg is used if there's a value, okay.\n\n353\n00:20:31.240 --> 00:20:32.180\nWe saw that here.\n\n354\n00:20:33.300 --> 00:20:38.690\nSo if I have x and it does have a value,\nI need to employ optarg, right?\n\n355\n00:20:38.690 --> 00:20:42.930\nSo it says, it does date and\nthen I can just pass .optarg to it.\n\n356\n00:20:42.930 --> 00:20:44.870\nI could just put whatever I want there,\nbut\n\n357\n00:20:44.870 --> 00:20:49.790\nif I'm passing it from the command line\nitself, what's the purpose, right?\n\n358\n00:20:49.790 --> 00:20:52.410\nSo, I'm really not using\nit if I do it that way.\n\n359\n00:20:52.410 --> 00:20:56.300\nIf I wanna pass it from the command line,\nthat's how I would work with so\n\n360\n00:20:56.300 --> 00:20:59.010\nI would say day and\nthen whatever that value was.\n\n361\n00:20:59.010 --> 00:21:00.790\nI can use it in my script.\n\n362\n00:21:00.790 --> 00:21:03.250\nJust using referencing that optarg value.\n\n363\n00:21:04.265 --> 00:21:09.550\nOptind on the other hand, is how it tracks\nthose parameters so it saw x, y, and z.\n\n364\n00:21:09.550 --> 00:21:11.610\nHow does it know that we are on x,\non y, and on z?\n\n365\n00:21:13.805 --> 00:21:16.000\nOptind is what's doing this.\n\n366\n00:21:16.000 --> 00:21:18.050\nHow I know this,\nis how to keep iteration through there.\n\n367\n00:21:18.050 --> 00:21:24.230\nSo if it sees this shift one,\nand we get to nothing, right?\n\n368\n00:21:24.230 --> 00:21:26.731\nNow it knows anything after that,\nis x, y, and z.\n\n369\n00:21:26.731 --> 00:21:29.450\nIt's gonna start becoming\npositional parameters there.\n\n370\n00:21:29.450 --> 00:21:32.030\nWe want to see,\nas positional parameters and\n\n371\n00:21:32.030 --> 00:21:36.550\nnot options, okay, and\nthen we jump into our standard type of\n\n372\n00:21:36.550 --> 00:21:40.850\ncode to deal with those positional\nparameters in any way that we want to.\n\n373\n00:21:40.850 --> 00:21:45.650\nSo that being said, and\nthat's what's going on with this shift.\n\n374\n00:21:45.650 --> 00:21:48.030\nRight, it's shifting\neverything out of the way.\n\n375\n00:21:48.030 --> 00:21:50.000\nNow, I know I'm on positional parameters.\n\n376\n00:21:50.000 --> 00:21:54.451\nFrom there drop down, define another\nvariable for parameter in that array.\n\n377\n00:21:54.451 --> 00:21:57.584\nWhatever that is,\nwe looked at that, and off we go.\n\n378\n00:21:57.584 --> 00:22:01.350\nThe array sees everything after that as\njust its own positional parameter for\n\n379\n00:22:01.350 --> 00:22:03.240\ninput reasons.\n\n380\n00:22:03.240 --> 00:22:05.420\nSo now if we run this thing,\nit should work and\n\n381\n00:22:05.420 --> 00:22:09.950\nbe able to handle those spaces\nthat we dealt with, right?\n\n382\n00:22:09.950 --> 00:22:10.765\nSo let's clear.\n\n383\n00:22:10.765 --> 00:22:12.640\nI think it clears it anyway.\n\n384\n00:22:12.640 --> 00:22:14.540\nBut it's a good habit.\n\n385\n00:22:14.540 --> 00:22:20.905\nAnd we will run ./cli_options_ getopts.sh.\n\n386\n00:22:20.905 --> 00:22:25.429\nAnd I can do, -x with my\n\n387\n00:22:25.429 --> 00:22:30.857\n+%y Sent, month, sent,\n\n388\n00:22:30.857 --> 00:22:36.470\ndate, and then do -yz.\n\n389\n00:22:36.470 --> 00:22:40.380\nThen go into,\nremember I wanted to test something so\n\n390\n00:22:40.380 --> 00:22:46.520\ni should be able to do, use my quotation\nmark in a way I normally would.\n\n391\n00:22:46.520 --> 00:22:54.140\nLet's say, Test p1, p2 and p3 and that\nshould give me everything is verified,\n\n392\n00:22:54.140 --> 00:22:59.130\nall the options were verified correctly\nand Test p1 is now it's own positional\n\n393\n00:22:59.130 --> 00:23:05.030\nparameter as I normally would expect\ninstead of getting that funky output.\n\n394\n00:23:05.030 --> 00:23:09.332\nAnd so I needed to getopts to be able to\ndo that so that I could bind that up.\n\n395\n00:23:09.332 --> 00:23:13.970\n&gt;&gt; Now, Daniel just so\nI can really grog this.\n\n396\n00:23:13.970 --> 00:23:16.100\nIf we come in and add a -a, right?\n\n397\n00:23:16.100 --> 00:23:17.510\n&gt;&gt; Yeah.\n&gt;&gt; Code stays exactly the same.\n\n398\n00:23:17.510 --> 00:23:18.650\n&gt;&gt; Code stays the same.\n\n399\n00:23:18.650 --> 00:23:22.020\n&gt;&gt; What happens because you said\nwe're running through these options.\n\n400\n00:23:22.020 --> 00:23:25.027\nDoes it ignore those or does it like\nair out and it doesn't further process?\n\n401\n00:23:25.027 --> 00:23:29.560\n&gt;&gt; Yeah, what it will do is it will\nactually turn them into question marks.\n\n402\n00:23:29.560 --> 00:23:32.780\nLike anything it doesn't know what\nto do with it just kind of like\n\n403\n00:23:32.780 --> 00:23:36.070\nturns it into a question mark and\nsays this is unknown.\n\n404\n00:23:36.070 --> 00:23:40.150\nIf I'm, or I think, I can't remember\nwhether it outputs that to you,\n\n405\n00:23:40.150 --> 00:23:42.740\nI think it does like a standard error.\n\n406\n00:23:42.740 --> 00:23:50.138\nBut lets do it, lets follow the line of\nthought here, add an a, and here we go.\n\n407\n00:23:50.138 --> 00:23:53.702\nIt just says that option, so I made a case\nfor that inside of my case statement,\n\n408\n00:23:53.702 --> 00:23:55.780\nif I don't see an option I like.\n\n409\n00:23:55.780 --> 00:24:00.437\nOther than that, it probably will just\noutput that question mark to you as error.\n\n410\n00:24:00.437 --> 00:24:02.081\nOr it might not do anything at all.\n\n411\n00:24:02.081 --> 00:24:06.742\nBut I made a reference to that in case\nI see something I don't expect cuz I\n\n412\n00:24:06.742 --> 00:24:07.921\nlike doing that.\n\n413\n00:24:07.921 --> 00:24:11.612\nBecause a lot of times when my code breaks\nit's because it was something I didn't\n\n414\n00:24:11.612 --> 00:24:13.300\nexpect was happening.\n\n415\n00:24:13.300 --> 00:24:15.140\nSo I always put those things in there,\n\n416\n00:24:15.140 --> 00:24:18.420\nand now it just says I don't\nknow what that option is.\n\n417\n00:24:18.420 --> 00:24:21.090\nIt turned it into a question mark and\ngave you that as an output.\n\n418\n00:24:21.090 --> 00:24:25.940\nSo now I can at least see what get opts\n\n419\n00:24:25.940 --> 00:24:31.120\nis doing with unknown variables,\nokay, or unknown options.\n\n420\n00:24:31.120 --> 00:24:33.340\nSo that's all it would do is pop that out.\n\n421\n00:24:33.340 --> 00:24:36.388\n&gt;&gt; Okay, I was just making sure it\nwasn't like catastrophic failure.\n\n422\n00:24:36.388 --> 00:24:39.070\n&gt;&gt; [LAUGH]\n&gt;&gt; Look,what?\n\n423\n00:24:39.070 --> 00:24:42.150\nI just accidentally hit an a in there,\nlike everything else is.\n\n424\n00:24:42.150 --> 00:24:46.245\nI didn't know if the default was to\ncompletely error out and stop running, or\n\n425\n00:24:46.245 --> 00:24:47.505\nto continue running and\n\n426\n00:24:47.505 --> 00:24:51.260\nat least inform you of kind of\nthese outputs or something of that.\n\n427\n00:24:51.260 --> 00:24:57.060\nNow that opt end,\nis that shift opt in minus one,\n\n428\n00:24:57.060 --> 00:25:01.490\nis that because get ops isn't actually\npeeling off those values initially?\n\n429\n00:25:01.490 --> 00:25:02.530\nSo opt in would be\n\n430\n00:25:02.530 --> 00:25:03.580\nthe position that you're on-\n&gt;&gt; Correct.\n\n431\n00:25:03.580 --> 00:25:08.495\n&gt;&gt; Once we got kind of through\nthe options, right, the index minus one,\n\n432\n00:25:08.495 --> 00:25:13.850\nbackup one, and then you just go ahead and\nshift all those options back off.\n\n433\n00:25:13.850 --> 00:25:15.010\nAm I understanding that right?\n\n434\n00:25:15.010 --> 00:25:16.300\n&gt;&gt; I'm trying to understand your question.\n\n435\n00:25:16.300 --> 00:25:20.460\nJustin, let me just make sure that\nI'm following your logic here.\n\n436\n00:25:20.460 --> 00:25:22.670\nI wanna make sure that I\nget it straight in my head.\n\n437\n00:25:22.670 --> 00:25:25.280\nSo you're asking me,\nlet's go back to the screen here just so\n\n438\n00:25:25.280 --> 00:25:29.700\nwe can all look at code and\nthen bathe in it cuz it's so much fun.\n\n439\n00:25:29.700 --> 00:25:32.390\nHe's asking me why do I\nhave this shift basically?\n\n440\n00:25:32.390 --> 00:25:34.930\nWhat is this shift doing?\n\n441\n00:25:34.930 --> 00:25:39.730\nAnd I'll tell you what, off the top of my\nhead it took me a second here to remember.\n\n442\n00:25:39.730 --> 00:25:43.100\nI didn't have this in my original code,\nthat's right.\n\n443\n00:25:43.100 --> 00:25:49.730\nBecause when I wrote this and I ran it the\nfirst time, it didn't work as I expected.\n\n444\n00:25:49.730 --> 00:25:53.430\nAnd then I realized that opt in\nwas doing something strange,\n\n445\n00:25:53.430 --> 00:25:57.530\nthe value of opt in was not\nwhat I expected it to be.\n\n446\n00:25:57.530 --> 00:26:04.757\nAnd I found that out,\nI just put an echo OPT like this .OPTIN.\n\n447\n00:26:04.757 --> 00:26:09.812\nAnd when I ran the script at this point,\nso if I do and\n\n448\n00:26:09.812 --> 00:26:14.060\nsave that, and I come down and\nI rerun my command,\n\n449\n00:26:14.060 --> 00:26:17.725\nsee how it's echoing out the number four.\n\n450\n00:26:17.725 --> 00:26:22.429\nI thought it was three, I thought it\nwas looking at those three because,\n\n451\n00:26:22.429 --> 00:26:25.440\nright, I had three parameters.\n\n452\n00:26:25.440 --> 00:26:30.740\nI had test P1, P2, and P3, but\nit wasn't working seeing it as four,\n\n453\n00:26:30.740 --> 00:26:37.250\nit was seeing it as, so I changed it to,\nright, I think that's what was going on.\n\n454\n00:26:37.250 --> 00:26:38.870\nThat being four was throwing me off.\n\n455\n00:26:38.870 --> 00:26:41.980\nI thought it was supposed to be three.\n\n456\n00:26:41.980 --> 00:26:46.680\nAnd so what I'm doing here is I'm\nsaying opt in is four minus one.\n\n457\n00:26:46.680 --> 00:26:50.200\nSo whatever the value of opt in is\nwhich is four, I need it to be three so\n\n458\n00:26:50.200 --> 00:26:53.030\nI just subtract one and\nthat's the value of the shift.\n\n459\n00:26:53.030 --> 00:26:55.020\nSo now it's shifting three spaces.\n\n460\n00:26:55.020 --> 00:26:59.780\nSo those positional parameters come\nover and be in the right spot so\n\n461\n00:26:59.780 --> 00:27:03.017\nthat this all stuff works correctly, okay.\n\n462\n00:27:03.017 --> 00:27:04.840\nSo I was having trouble with that.\n\n463\n00:27:04.840 --> 00:27:08.892\nJust having to work with that\nshifty feature, shift is shifty.\n\n464\n00:27:08.892 --> 00:27:11.710\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] It's super tricky and shifty.\n\n465\n00:27:11.710 --> 00:27:13.960\nAnd sometimes you have to\nstart echoing things out and\n\n466\n00:27:13.960 --> 00:27:19.190\nseeing I'm working with a value here,\nit's not doing what I expect.\n\n467\n00:27:19.190 --> 00:27:23.490\nAnd just by looking at how the output\nwas going I was able to discern,\n\n468\n00:27:23.490 --> 00:27:25.210\nit's seeing the wrong value.\n\n469\n00:27:25.210 --> 00:27:29.725\nWell at least I expect this value based\noff of my code, I'm not getting that so\n\n470\n00:27:29.725 --> 00:27:31.473\nI'm just going to modify it.\n\n471\n00:27:31.473 --> 00:27:33.178\nAnd that's what I did,\nthat's why it's shifted.\n\n472\n00:27:33.178 --> 00:27:34.580\nYeah, gotcha, gotcha.\n\n473\n00:27:34.580 --> 00:27:39.221\nSo we're shifting off those options so\nwe can put the positional parameters in\n\n474\n00:27:39.221 --> 00:27:43.029\nthe correct position and\nthen we can actually go through those.\n\n475\n00:27:43.029 --> 00:27:46.010\nAnd off by one error is when your-\n&gt;&gt; [LAUGH]\n\n476\n00:27:46.010 --> 00:27:48.431\n&gt;&gt; Programming are probably a very,\n\n477\n00:27:48.431 --> 00:27:51.350\nwell you're going to encounter them.\n\n478\n00:27:51.350 --> 00:27:55.220\nJust remember to grit your teeth, smile,\nand everything will be all right.\n\n479\n00:27:55.220 --> 00:27:57.790\nNow, Daniel,\nI know we're coming to the end.\n\n480\n00:27:57.790 --> 00:28:01.920\nAre there any final kind of words of\nwisdom for us when considering options?\n\n481\n00:28:01.920 --> 00:28:07.979\n&gt;&gt; Yes, actually, I do want to make\nmention of fact of standardization, okay.\n\n482\n00:28:07.979 --> 00:28:11.377\nIf you've worked with the left command\nline programs, hopefully you have,\n\n483\n00:28:11.377 --> 00:28:13.160\nyou've seen that standardization.\n\n484\n00:28:13.160 --> 00:28:16.380\nYou do a dash f, it's most likely\nexpecting some sort of file,\n\n485\n00:28:16.380 --> 00:28:17.710\nright to a file, right.\n\n486\n00:28:17.710 --> 00:28:22.900\nOr dash o, output to a file,\nand then, so dash o filename.\n\n487\n00:28:22.900 --> 00:28:25.470\nWe wanna stick with these conventions.\n\n488\n00:28:25.470 --> 00:28:30.380\nDon't get me wrong, you can do whatever\nyou want but expect people to hate their\n\n489\n00:28:30.380 --> 00:28:37.520\nuser experience because it's like\nwhy is dash r write to a file?\n\n490\n00:28:37.520 --> 00:28:41.730\nWrite doesn't even start with an r,\nit's a w, right.\n\n491\n00:28:41.730 --> 00:28:45.909\nSo if you start using crazy stuff that's\nnot standardization, I do have a file,\n\n492\n00:28:45.909 --> 00:28:47.950\njust to look at some standardization.\n\n493\n00:28:47.950 --> 00:28:50.350\nLet me Control X out of there.\n\n494\n00:28:50.350 --> 00:28:55.720\nIt is cat standard options here.\n\n495\n00:28:55.720 --> 00:29:01.385\nThese are some typical options of\nwhich you might want to employ, right.\n\n496\n00:29:01.385 --> 00:29:04.328\nDash a, do it for all x, y, and z, right.\n\n497\n00:29:04.328 --> 00:29:08.240\nDash c, count something.\n\n498\n00:29:08.240 --> 00:29:10.575\nDirectory, anything\ndealing with directories.\n\n499\n00:29:10.575 --> 00:29:15.996\nDash f, file to read, right,\nso take input from the file.\n\n500\n00:29:15.996 --> 00:29:20.690\nDash h for help, so if you want to\nemploy h, o, q, I put this list in here.\n\n501\n00:29:20.690 --> 00:29:22.380\nIt will be in the show notes for you.\n\n502\n00:29:22.380 --> 00:29:26.850\nBut if you want to employ options,\nit's probably a good idea to stick with\n\n503\n00:29:26.850 --> 00:29:31.690\nstandards so that it's not confusing\nto your end user, maybe even yourself.\n\n504\n00:29:31.690 --> 00:29:34.540\nIf you haven't used that script in\na long time, you're like, yeah,\n\n505\n00:29:34.540 --> 00:29:35.620\nwhy did I do that?\n\n506\n00:29:35.620 --> 00:29:39.290\nWhich I know I do, so\nI try to stick with standardization.\n\n507\n00:29:39.290 --> 00:29:41.090\nI think it's a good practice and for\n\n508\n00:29:41.090 --> 00:29:43.840\neverybody else that's using your script,\nit's going to help them out as well.\n\n509\n00:29:44.880 --> 00:29:48.710\n&gt;&gt; Daniel, I can strongly echo\nconfiguration, or excuse me,\n\n510\n00:29:48.710 --> 00:29:53.978\nconvention over configuration mainly\nbecause there are some edge cases, right.\n\n511\n00:29:53.978 --> 00:29:58.329\nThe dash f in RM is actually\na little bit different, but\n\n512\n00:29:58.329 --> 00:30:00.890\nit makes sense in that context.\n\n513\n00:30:00.890 --> 00:30:04.740\nBut by and large stay with these\nstandards, these conventions,\n\n514\n00:30:04.740 --> 00:30:09.430\ncuz well there's no reason I need to learn\nnew things in order to use your command\n\n515\n00:30:09.430 --> 00:30:10.650\nline utility.\n\n516\n00:30:10.650 --> 00:30:12.040\nSo thank you so much, Daniel.\n\n517\n00:30:12.040 --> 00:30:14.890\nWell we have seen how to\nprocess options as part of\n\n518\n00:30:14.890 --> 00:30:17.092\nour Linux Shell Scripting Basics series.\n\n519\n00:30:17.092 --> 00:30:20.455\nBut definitely stay tuned as\nwe continue on with, well,\n\n520\n00:30:20.455 --> 00:30:22.865\nlearning more about the Linux Shell.\n\n521\n00:30:22.865 --> 00:30:25.195\nBut for now, we're gonna go ahead and\nwrap this one up.\n\n522\n00:30:25.195 --> 00:30:28.655\nSo signing off for ITProTV,\nI've been your host Justin Dennison.\n\n523\n00:30:28.655 --> 00:30:29.365\n&gt;&gt; And I'm Daniel Lowrie.\n\n524\n00:30:29.365 --> 00:30:30.358\n&gt;&gt; And we'll see you next time.\n\n525\n00:30:30.358 --> 00:30:37.731\n[MUSIC]\n\n526\n00:30:37.731 --> 00:30:39.985\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237597309"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to accept input from the user in real-time with “read”. Here they will explore read’s basic format and options, all the while showing you examples based on each function for context.",
          "length": "1884",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-3-1-user_input_read-101117-PGM.00_32_09_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-3-1-user_input_read-101117-PGM.00_32_09_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-6-3-1-user_input_read-101117-PGM.00_32_09_12.Still001-sm.jpg",
          "title": "User Input Read",
          "transcript": "WEBVTT\n\n1\n00:00:00.200 --> 00:00:06.491\nWelcome to ITPRO.TV [CROSSTALK]\n\n2\n00:00:06.491 --> 00:00:08.220\n[MUSIC]\n\n3\n00:00:08.220 --> 00:00:12.111\n&gt;&gt; You are watching ITPRO.TV.\n\n4\n00:00:12.111 --> 00:00:16.360\n&gt;&gt; Greetings, everyone, and welcome to\nanother exciting episode of ITPRO.TV.\n\n5\n00:00:16.360 --> 00:00:19.150\nI'm your host, Justin Dennison, and in\ntoday's episode, well, you asked for it.\n\n6\n00:00:19.150 --> 00:00:22.540\nWe're bringing it back to you more\nLinux Shell scripting basics.\n\n7\n00:00:22.540 --> 00:00:25.420\nIn particular, we're gonna be\nreading user input in this episode.\n\n8\n00:00:25.420 --> 00:00:27.050\nAnd well, that's very important,\n\n9\n00:00:27.050 --> 00:00:30.160\nespecially if you wanna build a little\ncomplexity into your scripts.\n\n10\n00:00:30.160 --> 00:00:32.192\nMaybe not too much, but\njust the right amount.\n\n11\n00:00:32.192 --> 00:00:35.213\nLike a, I don't know, like a human, right?\n\n12\n00:00:35.213 --> 00:00:37.430\n&gt;&gt; [LAUGH]\n&gt;&gt; Just a little bit, but not too much.\n\n13\n00:00:37.430 --> 00:00:41.045\nAnd luckily, we have an expert in\nthe studio with us, Mr. Daniel Lowrie.\n\n14\n00:00:41.045 --> 00:00:41.760\nHow're you doing today, Daniel?\n\n15\n00:00:41.760 --> 00:00:42.800\n&gt;&gt; Hey man, I'm doing great.\n\n16\n00:00:42.800 --> 00:00:45.750\nGlad to be back in the studio here,\nlooking at Linux Shell scripting basics.\n\n17\n00:00:45.750 --> 00:00:46.730\nIt's always been a lot of fun.\n\n18\n00:00:46.730 --> 00:00:49.440\nHopefully you guys have\nenjoyed this series so far.\n\n19\n00:00:49.440 --> 00:00:50.320\nWe put a lot of time and\n\n20\n00:00:50.320 --> 00:00:54.880\neffort into making that hopefully a fact\nin your life and our lives as well.\n\n21\n00:00:54.880 --> 00:00:55.984\nWe want you to enjoy what we do.\n\n22\n00:00:55.984 --> 00:00:59.636\nAnd today, we're gonna talk\nabout accepting user input.\n\n23\n00:00:59.636 --> 00:01:01.470\nHaven't we kinda done that already?\n\n24\n00:01:01.470 --> 00:01:05.030\nYeah, we have in various and\nsundry ways, but\n\n25\n00:01:05.030 --> 00:01:07.720\ntoday is the day is the way\nI like to do it the best.\n\n26\n00:01:07.720 --> 00:01:11.685\nI'm a huge fan of interactive programs,\n\n27\n00:01:11.685 --> 00:01:16.339\nprograms that talk to us as a user and\ntake input.\n\n28\n00:01:16.339 --> 00:01:19.060\nAsk me questions, how's my day going?\n\n29\n00:01:19.060 --> 00:01:20.320\nAnything like that, right?\n\n30\n00:01:20.320 --> 00:01:24.371\nI want to work with the program, and now\nI'm being a bit facetious in the way that,\n\n31\n00:01:24.371 --> 00:01:26.744\nI guess you could write\nthe program if you want.\n\n32\n00:01:26.744 --> 00:01:32.310\nFeel good, data save, [LAUGH] bunch\nof positive thinking questions.\n\n33\n00:01:32.310 --> 00:01:35.655\nWe think you're beautiful, yes or no,\nthat kind of stuff, you could do that.\n\n34\n00:01:35.655 --> 00:01:40.770\nBut from time to time, we do need that\nfunctionality, we need to be able to say,\n\n35\n00:01:40.770 --> 00:01:44.980\ninteractively in time,\nask specific questions or look for\n\n36\n00:01:44.980 --> 00:01:49.570\nspecific input into our script.\n\n37\n00:01:49.570 --> 00:01:52.490\nThis could be various different types of\nthings, we're gonna take a look at how\n\n38\n00:01:52.490 --> 00:01:55.260\nthat progresses as we work\nthrough this episode.\n\n39\n00:01:55.260 --> 00:01:56.780\nBut how do we do that?\n\n40\n00:01:56.780 --> 00:02:01.250\nNow we've passed stuff from the command\nline using options and arguments.\n\n41\n00:02:01.250 --> 00:02:06.940\nBut what if the thing is already running,\nand now I start need to branching out.\n\n42\n00:02:06.940 --> 00:02:10.955\nI've got conditional things that\nare happening, and I need to,\n\n43\n00:02:10.955 --> 00:02:16.139\nbased off of whatever is happening in that\nmoment in time, answer those questions.\n\n44\n00:02:16.139 --> 00:02:19.215\nAll right, so,\nuser input can be very, very helpful,\n\n45\n00:02:19.215 --> 00:02:22.725\nespecially if you wanna build\nany kind of menu driven system.\n\n46\n00:02:22.725 --> 00:02:26.065\nWhich I am a huge proponent of,\nI love menu driven system.\n\n47\n00:02:26.065 --> 00:02:28.405\nThey hold my hand so nicely and\n\n48\n00:02:28.405 --> 00:02:32.365\nwalk me through all the processes\nthat it needs me to do.\n\n49\n00:02:32.365 --> 00:02:33.500\nThat way, I don't forget anything.\n\n50\n00:02:33.500 --> 00:02:36.710\nCuz with argument or\noption driven systems, you can forget,\n\n51\n00:02:36.710 --> 00:02:37.780\nwhat is that argument again?\n\n52\n00:02:37.780 --> 00:02:39.390\nWhat is that option I'm supposed to add?\n\n53\n00:02:39.390 --> 00:02:43.690\nWhat is the format of said option and,\nor arguments that it's supposed to be?\n\n54\n00:02:43.690 --> 00:02:45.236\nSo it can get a little tricky in that.\n\n55\n00:02:45.236 --> 00:02:50.010\nWith a major event system, you can really\neliminate a lot of the guess work for\n\n56\n00:02:50.010 --> 00:02:50.860\nyour user.\n\n57\n00:02:50.860 --> 00:02:53.190\nSo if that seems like\na better environment for\n\n58\n00:02:53.190 --> 00:02:57.642\nyour script, well, that you can use what\nwe're gonna do today to make that happen.\n\n59\n00:02:57.642 --> 00:02:59.936\n&gt;&gt; Now, and Daniel, you and I don't\nnecessarily always see eye to eye on this.\n\n60\n00:02:59.936 --> 00:03:04.446\nI tend to be more of an argument and not\nnecessarily a positional parameters kind\n\n61\n00:03:04.446 --> 00:03:07.435\nof person, but\nlike an options type person.\n\n62\n00:03:07.435 --> 00:03:09.505\nThe one exception that I can think of-\n&gt;&gt; [LAUGH]\n\n63\n00:03:09.505 --> 00:03:11.665\n&gt;&gt; As soon as you introduce this,\n\n64\n00:03:11.665 --> 00:03:13.667\nis setting IP tables rules.\n\n65\n00:03:13.667 --> 00:03:16.774\nI'm like, man,\nI can't remember any of this stuff.\n\n66\n00:03:16.774 --> 00:03:18.303\nI would prefer a menu driven.\n\n67\n00:03:18.303 --> 00:03:21.640\nJust ask me questions about my intentions,\nand then set the rules for them.\n\n68\n00:03:21.640 --> 00:03:23.223\n&gt;&gt; Yeah, I totally agreed.\n\n69\n00:03:23.223 --> 00:03:26.888\nI agreed so much that back when I\nfirst learned how to do this stuff,\n\n70\n00:03:26.888 --> 00:03:31.500\nthe first thing that popped in my head\nwas, you know what I can never remember?\n\n71\n00:03:31.500 --> 00:03:35.420\nHow to create a perfect\nIP tables chain and\n\n72\n00:03:35.420 --> 00:03:38.000\nmake it work correctly, so\nI wrote a menu driven system.\n\n73\n00:03:38.000 --> 00:03:40.346\nYou know what?\nMaybe we'll even throw that up as we move\n\n74\n00:03:40.346 --> 00:03:44.452\ndown the road, we're gonna move\ninto practical shell scripts.\n\n75\n00:03:44.452 --> 00:03:46.220\nMaybe we'll use that as\na practical shell script,\n\n76\n00:03:46.220 --> 00:03:48.890\nsee how we can build that\nas a menu driven system.\n\n77\n00:03:48.890 --> 00:03:52.939\nAnd walk us through building a correct\nIP tables chain and get it to work.\n\n78\n00:03:52.939 --> 00:03:55.720\nSo I will put that on the burner.\n\n79\n00:03:55.720 --> 00:03:58.965\nBut as of today, we've gotta get\nthe foundations, the fundamentals, so\n\n80\n00:03:58.965 --> 00:04:02.340\nthat you guys will understand that\nshow when and if it does arise.\n\n81\n00:04:02.340 --> 00:04:03.570\nSo let's jump into it.\n\n82\n00:04:03.570 --> 00:04:06.110\nFirst thing we need to\nunderstand is the read command.\n\n83\n00:04:06.110 --> 00:04:09.680\nThis is the command that\naccepts user input.\n\n84\n00:04:09.680 --> 00:04:15.380\nIt starts looking to standard in for,\nwell, guess what, input, right?\n\n85\n00:04:15.380 --> 00:04:16.470\nThat's gonna come from your keyboard.\n\n86\n00:04:17.620 --> 00:04:22.090\nSo if we employee read into our scripts,\nread is gonna do that.\n\n87\n00:04:22.090 --> 00:04:25.661\nIt's going to give us the blinking cursor,\nat which we have the ability to tickety,\n\n88\n00:04:25.661 --> 00:04:27.240\ntickety, tickety on our keyboard.\n\n89\n00:04:27.240 --> 00:04:29.968\nAnd when we hit Enter, off it goes, and\n\n90\n00:04:29.968 --> 00:04:34.282\nthe script brings it in as\na variable into that script, okay?\n\n91\n00:04:34.282 --> 00:04:38.543\nSo let's take a look at a very simple\nscript that uses the read command\n\n92\n00:04:38.543 --> 00:04:39.280\nright now.\n\n93\n00:04:39.280 --> 00:04:44.070\nLet's jump into my computer, and I've\ngot this guy here, just called read.sh.\n\n94\n00:04:44.070 --> 00:04:50.490\nSo if I cat read.sh,\nlike I said, it is simple.\n\n95\n00:04:50.490 --> 00:04:53.810\nWe've got clear, I've started\ncleaning out some of these things,\n\n96\n00:04:53.810 --> 00:04:58.020\nI'll clear the screen out just so\nwe can keep the screen free from garbage.\n\n97\n00:04:58.020 --> 00:05:02.660\nAnd this is just gonna echo a string\nof asterisks, nothing crazy.\n\n98\n00:05:02.660 --> 00:05:07.587\nAnother echo for a white space separation,\nand we have echo dash n,\n\n99\n00:05:07.587 --> 00:05:09.758\nwhat city town do you live in?\n\n100\n00:05:09.758 --> 00:05:13.300\nAnd there we go,\nwe have this lovely thing.\n\n101\n00:05:13.300 --> 00:05:15.440\nAnd then it says read city, right?\n\n102\n00:05:15.440 --> 00:05:17.690\nSo there's our read command right there.\n\n103\n00:05:17.690 --> 00:05:20.110\nWonderful thing, read city.\n\n104\n00:05:20.110 --> 00:05:20.990\nSo what's going on here?\n\n105\n00:05:20.990 --> 00:05:22.240\nWell, you're employing read,\n\n106\n00:05:22.240 --> 00:05:27.550\nwhich tells the shell script I\nwant to get data from the user.\n\n107\n00:05:27.550 --> 00:05:29.987\nSo pop the prompt, okay?\n\n108\n00:05:29.987 --> 00:05:32.867\nGive me a blinking cursor and wait here,\n\n109\n00:05:32.867 --> 00:05:37.055\nuntil the user actually puts\nin some information, okay?\n\n110\n00:05:37.055 --> 00:05:41.950\nCity there is the variable that\nit's gonna take that information\n\n111\n00:05:41.950 --> 00:05:45.667\nfrom the user and put into, okay?\n\n112\n00:05:45.667 --> 00:05:49.938\nSo a new concept kind of bundled with an\nold concept, we got a variable and we got\n\n113\n00:05:49.938 --> 00:05:54.627\na command that's just basically giving the\nuser the ability to type into the system.\n\n114\n00:05:54.627 --> 00:05:59.570\nAnd that's gonna take whatever value that\nis, pop that into the variable we defined.\n\n115\n00:05:59.570 --> 00:06:03.440\nI could have put tonnage or\nwhatever I like.\n\n116\n00:06:03.440 --> 00:06:05.312\nI could have put var one if I felt like.\n\n117\n00:06:05.312 --> 00:06:06.039\nIt's a variable, give it a name.\n\n118\n00:06:06.039 --> 00:06:10.210\nIt's something that makes sense typically\nis a good idea, so I put city here.\n\n119\n00:06:10.210 --> 00:06:13.715\nBecause the question is,\nwhat city town do you live in, right?\n\n120\n00:06:13.715 --> 00:06:19.050\nThen I'll echo, I've always\nwanted to visit dollar sign city,\n\n121\n00:06:19.050 --> 00:06:24.355\nso referencing the variable\nthat read created, okay?\n\n122\n00:06:24.355 --> 00:06:29.124\nHopefully it all makes sense,\nlet's run it, see what it does, ./read.sh.\n\n123\n00:06:29.124 --> 00:06:35.230\nNotice the script fires off, cleared\nthe screen, echoed out my little stars,\n\n124\n00:06:35.230 --> 00:06:41.050\ngave me a little white space area to\ngive me some separation from that.\n\n125\n00:06:41.050 --> 00:06:43.446\nThen it says,\nwhat city town do you live in?\n\n126\n00:06:43.446 --> 00:06:46.104\nMy little carat returned,\nwhich I put there,\n\n127\n00:06:46.104 --> 00:06:49.117\nit doesn't come up there by default,\nI put that in.\n\n128\n00:06:49.117 --> 00:06:52.710\nIt's for my echo statement,\nyeah, my echo statement.\n\n129\n00:06:53.860 --> 00:06:55.630\nAnd now it's waiting, it's waiting.\n\n130\n00:06:55.630 --> 00:06:57.680\nYou notice the cursor\nis just sitting there,\n\n131\n00:06:57.680 --> 00:06:59.810\ndoing nothing, my script isn't moving on.\n\n132\n00:06:59.810 --> 00:07:02.990\nIt's waiting for this guy to\nactually put something into there.\n\n133\n00:07:02.990 --> 00:07:06.766\nSo we're here in Gainesville,\nso I'll just put Gainesville.\n\n134\n00:07:06.766 --> 00:07:08.709\nAnd if I misspell it, I could backspace.\n\n135\n00:07:08.709 --> 00:07:11.569\nUntil I hit the Enter key,\nit's gonna allow me to,\n\n136\n00:07:11.569 --> 00:07:15.530\nyou can get away with a lot\nof standardized typing, okay?\n\n137\n00:07:15.530 --> 00:07:17.750\nSome typing you can't get away with,\nbut for basic intents and\n\n138\n00:07:17.750 --> 00:07:22.720\npurposes, I make a mistake,\nI can back up and start from there.\n\n139\n00:07:22.720 --> 00:07:26.860\nSo if I say Gainesville,\nlike so, I can hit Enter,\n\n140\n00:07:26.860 --> 00:07:29.660\nand it says I've always\nwanted to visit Gainesville,\n\n141\n00:07:29.660 --> 00:07:33.570\nreferencing the city variable that\nwe created from our read command.\n\n142\n00:07:33.570 --> 00:07:36.530\nSimple, very easy and nothing to it.\n\n143\n00:07:36.530 --> 00:07:40.790\nRead variable, reference variable\nthroughout your script, very good.\n\n144\n00:07:40.790 --> 00:07:43.210\n&gt;&gt; Now Daniel,\nduring that kind of block, nothing,\n\n145\n00:07:43.210 --> 00:07:46.630\nI just wanna make sure,\nregardless of anywhere else in your code,\n\n146\n00:07:46.630 --> 00:07:50.130\nnothing else is running as long as\nit's waiting for user input, right?\n\n147\n00:07:50.130 --> 00:07:53.824\n&gt;&gt; Yes, it's just sitting there because\nyou've gotta remember, this is a script.\n\n148\n00:07:53.824 --> 00:07:58.418\nIt's going line by line by line by line by\nline, and once it hits the read line, it's\n\n149\n00:07:58.418 --> 00:08:02.579\ngonna sit there until the read portion\nof that functionality is completed.\n\n150\n00:08:02.579 --> 00:08:08.490\nUntil you hit Enter, on your keyboard\nletting it know you're done.\n\n151\n00:08:08.490 --> 00:08:12.620\nYou have inputted whatever you\nwanna input and you are done, okay?\n\n152\n00:08:12.620 --> 00:08:15.180\nSo until then, it just kinda sits\nthere and hangs out of that line.\n\n153\n00:08:15.180 --> 00:08:19.019\nWhen you hit Enter,\nraise that variable finishing off\n\n154\n00:08:20.100 --> 00:08:22.344\nthe value of whatever you\ntyped in the said variable,\n\n155\n00:08:22.344 --> 00:08:25.340\nfinishing off that whole statement,\nmoves on to the next statement, okay?\n\n156\n00:08:25.340 --> 00:08:27.110\nSo that's how it works.\n\n157\n00:08:27.110 --> 00:08:32.070\nSo you notice I used\necho to get our prompted,\n\n158\n00:08:32.070 --> 00:08:35.770\nto say what city do you live in and\nthen I used read.\n\n159\n00:08:35.770 --> 00:08:39.840\nThe cool thing is that's\ntwo lines of code.\n\n160\n00:08:39.840 --> 00:08:44.510\nWhat if I wanted to make\nit one line of code?\n\n161\n00:08:44.510 --> 00:08:48.440\nWell I could use semi colon,\nthat could put it all on one line.\n\n162\n00:08:48.440 --> 00:08:53.680\nEcho, statement, semicolon, read variable.\n\n163\n00:08:53.680 --> 00:08:54.200\nBada bing.\n\n164\n00:08:54.200 --> 00:08:55.550\nThat could work.\n\n165\n00:08:55.550 --> 00:08:58.790\nBut read has some built in\nfunctionality that allows us to\n\n166\n00:08:58.790 --> 00:09:00.490\nclean up our code a little bit.\n\n167\n00:09:00.490 --> 00:09:02.270\nMake our lives a little bit easier.\n\n168\n00:09:02.270 --> 00:09:03.280\nLet's look at that code.\n\n169\n00:09:03.280 --> 00:09:06.300\nThis is going to be called\nread prompts by cat.\n\n170\n00:09:06.300 --> 00:09:08.460\nRead underscore prompts.\n\n171\n00:09:09.740 --> 00:09:11.100\nLittle bit different going on here.\n\n172\n00:09:12.500 --> 00:09:15.700\nSo basically the same thing, right?\n\n173\n00:09:15.700 --> 00:09:18.330\nIt's a different question but\nsame kind of idea.\n\n174\n00:09:18.330 --> 00:09:22.675\nClear the screen, echo a bunch of stars,\necho wide space and then read-p.\n\n175\n00:09:23.900 --> 00:09:28.530\nSo this is kind of ironic,\nthe fact that read gives me that\n\n176\n00:09:28.530 --> 00:09:32.875\nfunctionality to do menu driven stuff but\nit uses options.\n\n177\n00:09:32.875 --> 00:09:36.360\n[LAUGH] To really give you the full\nfunctionality that you need,\n\n178\n00:09:36.360 --> 00:09:36.970\nbut I digress.\n\n179\n00:09:36.970 --> 00:09:39.448\nThat's just a little irony\nthat just hit me very funny.\n\n180\n00:09:39.448 --> 00:09:45.060\nSo read-p says you use this slide,\n\n181\n00:09:45.060 --> 00:09:51.400\nI want to echo some information basically\nand then give you a prompt, okay?\n\n182\n00:09:51.400 --> 00:09:53.800\nSo that's basically what's going on here.\n\n183\n00:09:53.800 --> 00:09:55.480\nSo I don't need the echo statement and\n\n184\n00:09:55.480 --> 00:09:59.060\nthen just read where our\nprompt is waiting, all right?\n\n185\n00:09:59.060 --> 00:10:02.660\nBy the way, if you were thinking, what was\nthat whole -n thing on the echo statement\n\n186\n00:10:02.660 --> 00:10:09.280\nyou saw, if you look at that read.sh,\nyou saw this -n right here?\n\n187\n00:10:09.280 --> 00:10:11.020\nThat's so\nI didn't get a new line character.\n\n188\n00:10:11.020 --> 00:10:14.208\nEcho new lines after\nevery echo by default.\n\n189\n00:10:14.208 --> 00:10:16.830\nYou do -n,\nit takes that function out of your way.\n\n190\n00:10:16.830 --> 00:10:19.110\nThat way it stayed on the same line.\n\n191\n00:10:19.110 --> 00:10:24.010\nBut to get this same type of thing\ninstead of doing echo-n, whatever.\n\n192\n00:10:24.010 --> 00:10:28.010\nI can just do read-p,\nwhatever I wanna echo and\n\n193\n00:10:28.010 --> 00:10:31.570\nthen the variable that I wanna call it.\n\n194\n00:10:31.570 --> 00:10:35.310\nThis is probably the more common way in\nwhich read we use on more regular basis,\n\n195\n00:10:35.310 --> 00:10:37.190\nall right, that you'll see the most.\n\n196\n00:10:38.280 --> 00:10:42.800\nAnd then, again,\njust echoing out the variable shell.\n\n197\n00:10:42.800 --> 00:10:44.030\nShell is my favorite too.\n\n198\n00:10:44.030 --> 00:10:48.140\nSo it's gonna ask us what our favorite\nshell is, wait for input from the user,\n\n199\n00:10:48.140 --> 00:10:53.550\nand then when we hit enter it will proceed\nto echo and reference said variable, okay?\n\n200\n00:10:53.550 --> 00:10:58.800\nSo let's do that,\nwe'll run it to .-read_prompt.sh.\n\n201\n00:10:58.800 --> 00:11:02.320\nWhat is your favorite shell,\nJustin, got any favorites?\n\n202\n00:11:02.320 --> 00:11:07.070\n&gt;&gt; My favorite is currently Z shell\nwith some plugins called My Z shell.\n\n203\n00:11:07.070 --> 00:11:10.385\nNow I could have thought about\na non-techie user and been like conch.\n\n204\n00:11:10.385 --> 00:11:16.010\n[LAUGH] But\nZ shell is typically my favourite.\n\n205\n00:11:16.010 --> 00:11:19.280\n&gt;&gt; Well the good news is that this isn't\nreally a complex script that relies on\n\n206\n00:11:19.280 --> 00:11:21.440\nthe fact that this is Z Shell,\nbut it could, right?\n\n207\n00:11:21.440 --> 00:11:24.470\nWe are just building on,\nwe are gonna make some basics here and\n\n208\n00:11:24.470 --> 00:11:25.770\nwe are gonna build upon those.\n\n209\n00:11:25.770 --> 00:11:28.370\nRight now,\nI can technically put anything I want.\n\n210\n00:11:28.370 --> 00:11:32.080\nI could put the table shell,\nwhich not as far as I know doesn't exist,\n\n211\n00:11:32.080 --> 00:11:34.960\nI could put School bus.\n\n212\n00:11:34.960 --> 00:11:37.460\nright?\nThat's arbitrary at this point.\n\n213\n00:11:37.460 --> 00:11:41.970\nIt's just showing us how we can use that\n-p functionality, but maybe down the road,\n\n214\n00:11:41.970 --> 00:11:45.910\nthat might be something that is important\nto your script and probably will be.\n\n215\n00:11:45.910 --> 00:11:47.642\nSo just keep that in mind as we move on.\n\n216\n00:11:47.642 --> 00:11:51.610\nJustin likes Z shell,\nwe put Z, S, H in there.\n\n217\n00:11:51.610 --> 00:11:52.430\nHit enter.\n\n218\n00:11:52.430 --> 00:11:55.040\nZ S H Shell is my favorite too.\n\n219\n00:11:55.040 --> 00:11:55.850\nWell how about that?\n\n220\n00:11:55.850 --> 00:11:57.680\nMy system agrees with you Justin.\n\n221\n00:11:57.680 --> 00:12:00.840\nYou're a god amongst men when\nit comes to shell loving.\n\n222\n00:12:00.840 --> 00:12:03.910\n&gt;&gt; I will say,\nyou said earlier that we can make it fit.\n\n223\n00:12:03.910 --> 00:12:06.320\nI'm gonna be honest with you,\nI like Z Shell as well, but\n\n224\n00:12:06.320 --> 00:12:08.180\nit makes my heart flutter a little bit.\n\n225\n00:12:08.180 --> 00:12:09.900\n&gt;&gt; [LAUGH]\n&gt;&gt; And, you know,\n\n226\n00:12:09.900 --> 00:12:14.650\nthis is, coming from other languages that\ntake user input in a very similar manner.\n\n227\n00:12:14.650 --> 00:12:18.360\nThis isn't a far departure from\ntaking command line user input\n\n228\n00:12:18.360 --> 00:12:19.720\nif you have other programming experience.\n\n229\n00:12:19.720 --> 00:12:22.670\nIf you don't, then,\nwell, most of the time,\n\n230\n00:12:22.670 --> 00:12:25.160\nyou're gonna provide a prompt\nto inform your user.\n\n231\n00:12:25.160 --> 00:12:25.780\n&gt;&gt; Right.\n\n232\n00:12:25.780 --> 00:12:27.560\n&gt;&gt; Hey, this is what I'm looking for.\n\n233\n00:12:27.560 --> 00:12:30.152\nCuz otherwise, users are just\ngonna rake their hands across, or\n\n234\n00:12:30.152 --> 00:12:31.906\nthey're gonna think something's broke.\n\n235\n00:12:31.906 --> 00:12:32.431\n&gt;&gt; Right.\n&gt;&gt; Right?\n\n236\n00:12:32.431 --> 00:12:33.893\nSo, I would say,\n\n237\n00:12:33.893 --> 00:12:38.980\nfor me, I could see using read-p,\nas you said, most of the time.\n\n238\n00:12:38.980 --> 00:12:40.250\n&gt;&gt; Yeah, and I do, as well.\n\n239\n00:12:40.250 --> 00:12:43.820\nWhen I first got started, it was echo\nread, echo read, echo read, echo read.\n\n240\n00:12:43.820 --> 00:12:47.690\nAnd then I realized, as I built\nmore functionality into scripts,\n\n241\n00:12:47.690 --> 00:12:49.450\nsomething that wasn't a simple script.\n\n242\n00:12:50.530 --> 00:12:52.580\nEspecially with a bunch of menus.\n\n243\n00:12:52.580 --> 00:12:56.260\nIt's like man, I could cut this code in\nhalf by taking out these echo statements\n\n244\n00:12:56.260 --> 00:12:58.800\necho read just make it read-p.\n\n245\n00:12:58.800 --> 00:13:04.240\nLiterally chopping my code down from 500\nlines to 300 lines, things like that.\n\n246\n00:13:05.360 --> 00:13:08.890\nWant to relate that out there to you\ngood folks so you can do that as well.\n\n247\n00:13:08.890 --> 00:13:15.450\nAs your scripts grow, you might want\nto use read-p more often than not.\n\n248\n00:13:15.450 --> 00:13:18.740\nSo the next thing we have\nis multiple variables.\n\n249\n00:13:18.740 --> 00:13:20.820\nWhat if we have multiple\nvariables in our script?\n\n250\n00:13:20.820 --> 00:13:23.750\nI have a script obviously written up for\nthat on us.\n\n251\n00:13:23.750 --> 00:13:31.630\nLet's cap that thing and it's called\nread multivar, read_multivar.sh.\n\n252\n00:13:31.630 --> 00:13:33.090\nSo let's take a look here.\n\n253\n00:13:33.090 --> 00:13:39.280\nWhat we have is another very simple\nthing going on here, read-p.\n\n254\n00:13:39.280 --> 00:13:41.530\nEnter your city and state.\n\n255\n00:13:41.530 --> 00:13:43.970\nI want city, I want state.\n\n256\n00:13:43.970 --> 00:13:46.590\nYou don't put them together, right?\n\n257\n00:13:46.590 --> 00:13:48.552\nIt's not like GainsvilleFlorida.\n\n258\n00:13:48.552 --> 00:13:53.350\n[LAUGH] GainsvilleFlorida, however that\nwould go if it was one big string.\n\n259\n00:13:53.350 --> 00:13:57.250\nI have two separate strings and\nI want to make the separate, but\n\n260\n00:13:57.250 --> 00:14:01.760\nI don't want to necessarily break\nthat up into separate things.\n\n261\n00:14:01.760 --> 00:14:02.820\nSo, here you go.\n\n262\n00:14:02.820 --> 00:14:08.720\nI can actually put in two pieces of imput\njust by adding another variable, okay?\n\n263\n00:14:08.720 --> 00:14:14.710\nSo what we can do is say,\nlet's run it, .-.-, there we go.\n\n264\n00:14:14.710 --> 00:14:18.800\nRead underscore multibar, H, hit enter.\n\n265\n00:14:18.800 --> 00:14:21.572\nEnter your city and state,\n\n266\n00:14:21.572 --> 00:14:26.530\nwell we live in Gainesville,\nFlorida, excel.\n\n267\n00:14:26.530 --> 00:14:29.120\nYou live in Gainesville which is\nin the state of Florida, right?\n\n268\n00:14:29.120 --> 00:14:32.150\nSo Gainseville went into one variable,\n\n269\n00:14:32.150 --> 00:14:35.520\nFlorida went into another,\nand there you go.\n\n270\n00:14:35.520 --> 00:14:40.180\nSo there's the first variable,\ncity, the second variable, state.\n\n271\n00:14:40.180 --> 00:14:44.120\nIn my echo statement I referenced city and\nstate.\n\n272\n00:14:45.490 --> 00:14:49.290\nDon't forget, if you've got a compound,\nif we lived in New Hampshire, right?\n\n273\n00:14:50.560 --> 00:14:53.940\nOr New York.\nLet's say we lived in New York, New York.\n\n274\n00:14:53.940 --> 00:14:55.050\nWhat happens?\nLet's run our script.\n\n275\n00:14:55.050 --> 00:15:00.500\nIf I want to say New York,\nI would probably need to bind that up\n\n276\n00:15:00.500 --> 00:15:05.610\nNew York, like this.\n\n277\n00:15:05.610 --> 00:15:06.120\nNew York.\n\n278\n00:15:06.120 --> 00:15:07.554\nSee?\nIt's having a problem.\n\n279\n00:15:07.554 --> 00:15:12.932\nIt's seeing New and York.\n\n280\n00:15:12.932 --> 00:15:19.020\nSo inside of our code we need to\ntake account for that kinda thing.\n\n281\n00:15:19.020 --> 00:15:22.490\nJust be aware that,\nthat might happen, alright?\n\n282\n00:15:22.490 --> 00:15:26.510\nAnd you might have to do some\nfinagling to get it to work.\n\n283\n00:15:26.510 --> 00:15:28.040\n&gt;&gt; Now Daniel, I do have a quick question,\n\n284\n00:15:28.040 --> 00:15:30.940\ncuz a lot of times I abbreviate\nstates with a comma.\n\n285\n00:15:30.940 --> 00:15:31.580\n&gt;&gt; Yeah.\n\n286\n00:15:31.580 --> 00:15:34.160\n&gt;&gt; Is that gonna cause any\nissues if I don't have a space.\n\n287\n00:15:34.160 --> 00:15:37.080\nCuz it seems to be that\nI'm separating by space\n\n288\n00:15:37.080 --> 00:15:37.980\n&gt;&gt; Yes.\n\n289\n00:15:37.980 --> 00:15:41.060\n&gt;&gt; And\nessentially like a tuple in packing.\n\n290\n00:15:41.060 --> 00:15:43.050\nLike this first thing before space.\n\n291\n00:15:43.050 --> 00:15:43.790\n&gt;&gt; [LAUGH]\n&gt;&gt; Is the-\n\n292\n00:15:43.790 --> 00:15:45.820\n&gt;&gt; You said the magic words.\n\n293\n00:15:45.820 --> 00:15:47.670\nI'm like no here we go.\n\n294\n00:15:47.670 --> 00:15:51.710\n&gt;&gt; But enter the first thing,\n\n295\n00:15:51.710 --> 00:15:53.914\nspace, that goes into the first variable\n&gt;&gt; Right.\n\n296\n00:15:53.914 --> 00:15:56.509\n&gt;&gt; And then the second thing goes into\nthe second variable as we can see.\n\n297\n00:15:56.509 --> 00:16:00.141\nBut if we do like Gainesville, FL Right?\n\n298\n00:16:00.141 --> 00:16:02.114\n&gt;&gt; Right.\n&gt;&gt; And let's say I leave out a space.\n\n299\n00:16:02.114 --> 00:16:03.370\nHow does the script react here?\n\n300\n00:16:03.370 --> 00:16:06.480\nNow this is a very simplified,\nI'm not necessarily saying-\n\n301\n00:16:06.480 --> 00:16:07.200\n&gt;&gt; Right, right, right.\n\n302\n00:16:07.200 --> 00:16:11.610\n&gt;&gt; We're handling all the possible\ncases for, this is demonstrative.\n\n303\n00:16:11.610 --> 00:16:12.640\n&gt;&gt; Demonstrative.\n&gt;&gt; But-\n\n304\n00:16:12.640 --> 00:16:13.730\n&gt;&gt; Yeah.\n\n305\n00:16:13.730 --> 00:16:20.230\n&gt;&gt; Just wondering how would that break so\nI would know what to be aware of.\n\n306\n00:16:20.230 --> 00:16:22.348\n&gt;&gt; So say you separate by comma, so\n\n307\n00:16:22.348 --> 00:16:26.043\ninstead of a white space you\nhave a comma there instead.\n\n308\n00:16:26.043 --> 00:16:30.250\nYou probably have to employ changing\nthe internal field separator.\n\n309\n00:16:30.250 --> 00:16:31.389\nInstead of having white spaces,\n\n310\n00:16:31.389 --> 00:16:33.860\nyou would have commas as\nan internal field separator.\n\n311\n00:16:33.860 --> 00:16:38.880\nStructure your variables so\nthat it would interpret that and\n\n312\n00:16:38.880 --> 00:16:40.610\nthen pass that along to\nthe rest of the script.\n\n313\n00:16:40.610 --> 00:16:44.200\nThat would be, just off the top of my\nhead, my guess on how that would work out.\n\n314\n00:16:44.200 --> 00:16:47.450\nHere again, just wanna give you guys\nthe very basics on how that works out and\n\n315\n00:16:47.450 --> 00:16:49.460\nlook at some caveats\nthat you might run into.\n\n316\n00:16:49.460 --> 00:16:52.570\nIf you mess around,\nyou have to do some finagling.\n\n317\n00:16:52.570 --> 00:16:53.850\n&gt;&gt; So given the current script,\n\n318\n00:16:53.850 --> 00:16:56.760\nwhat if we said Gainesville comma\nFlorida without a white space?\n\n319\n00:16:56.760 --> 00:17:00.360\nHow does this two variable thing,\ndoes the second variable just say nothing?\n\n320\n00:17:00.360 --> 00:17:02.740\n&gt;&gt; Yeah,\nit just won't have anything in it.\n\n321\n00:17:02.740 --> 00:17:04.040\nThat's exactly what will happen.\n\n322\n00:17:04.040 --> 00:17:08.510\nSo again, be aware of these things as you\nmove on through your scripts is that you\n\n323\n00:17:08.510 --> 00:17:14.160\nmight have to do some Google searching on\nwhat to do, or read the manpage, right?\n\n324\n00:17:14.160 --> 00:17:18.843\nWhich will give you all that you should\nneed anyway to make these things work.\n\n325\n00:17:18.843 --> 00:17:20.440\nSo just keep that in mind.\n\n326\n00:17:20.440 --> 00:17:22.020\nLet's move on to, what do we have?\n\n327\n00:17:22.020 --> 00:17:23.285\nNo variables.\n\n328\n00:17:23.285 --> 00:17:26.718\nThis is actually something that, like,\nI don't actually define a variable and\n\n329\n00:17:26.718 --> 00:17:28.470\nsometimes that's a good case.\n\n330\n00:17:28.470 --> 00:17:30.060\nWell, the cool thing is that that read for\n\n331\n00:17:30.060 --> 00:17:34.940\nus says, if you don't define a variable,\nI kind of have one off to\n\n332\n00:17:34.940 --> 00:17:40.160\nthe side over here that I'll use in\ncase you don't actually find one.\n\n333\n00:17:40.160 --> 00:17:42.428\nSo we only have one variable,\nand you don't wanna go crazy and\n\n334\n00:17:42.428 --> 00:17:47.330\nyou're not gonna continually reuse or\njump around with a bunch of stuff.\n\n335\n00:17:47.330 --> 00:17:50.320\nYou have a very simple read type input,\nbut you can use that and\n\n336\n00:17:50.320 --> 00:17:54.684\nit's called, it is, what is it?\n\n337\n00:17:54.684 --> 00:17:56.856\nYou know what, I've got a script,\nI've got a script.\n\n338\n00:17:56.856 --> 00:18:00.612\nI put these scripts in here to keep\nmyself reminded of what we're doing.\n\n339\n00:18:00.612 --> 00:18:02.145\nAll right, let's take a look at that.\n\n340\n00:18:02.145 --> 00:18:03.760\nWe'll call it read novar.\n\n341\n00:18:03.760 --> 00:18:08.468\nIf we can't read_novar, like that,\n\n342\n00:18:08.468 --> 00:18:12.780\nthere it is, the reply, $reply.\n\n343\n00:18:12.780 --> 00:18:15.860\nSo if I have my read command,\nread-p, please enter your city and\n\n344\n00:18:15.860 --> 00:18:18.342\nyou'll notice,\nthere's no variable after that.\n\n345\n00:18:18.342 --> 00:18:23.330\nIf I don't use anything,\nit's just blank, it will default\n\n346\n00:18:23.330 --> 00:18:29.490\nto using the $ sign or reply all\ncapital letters, the variable, okay?\n\n347\n00:18:29.490 --> 00:18:34.600\nSo if I only need to use a variable once\nand I don't care what it is, if I find\n\n348\n00:18:34.600 --> 00:18:39.900\nmyself using var one over and over again\nfor read, I can just drop that off.\n\n349\n00:18:39.900 --> 00:18:41.900\nLess typing on my part.\n\n350\n00:18:41.900 --> 00:18:45.520\nJust go ahead and take advantage of the\nfact that there is a readily used variable\n\n351\n00:18:45.520 --> 00:18:48.520\nthat is technically there,\nwaiting for input.\n\n352\n00:18:48.520 --> 00:18:52.870\nAll right, so if I do this one,\nI just, of course it's gonna\n\n353\n00:18:52.870 --> 00:18:57.400\nbe a very simple ./read_novar.sh.\n\n354\n00:18:57.400 --> 00:18:59.300\nPlease enter your city.\n\n355\n00:18:59.300 --> 00:19:01.890\nGainesville, there you go.\n\n356\n00:19:01.890 --> 00:19:04.960\nGainesville's a lovely place to live,\nor so I hear.\n\n357\n00:19:04.960 --> 00:19:07.150\nMaybe it's never,\nI've actually been there.\n\n358\n00:19:07.150 --> 00:19:13.210\nSo just keep that in mind, that that\n$reply variable is technically sitting\n\n359\n00:19:13.210 --> 00:19:16.990\nthere, waiting for your use, if you\nwant to cut down on some of your typage.\n\n360\n00:19:16.990 --> 00:19:21.500\nAnd your script is simple enough\nwhen it's the read functionality.\n\n361\n00:19:21.500 --> 00:19:22.450\nLet's see here.\n\n362\n00:19:22.450 --> 00:19:23.780\nWhat if?\n\n363\n00:19:23.780 --> 00:19:24.960\nI love these what ifs.\n\n364\n00:19:24.960 --> 00:19:26.280\nI'm playing Colombo.\n\n365\n00:19:26.280 --> 00:19:28.700\nAnswer this question for me.\n\n366\n00:19:28.700 --> 00:19:33.725\nWhat if I wanted to, I wanna wait forever.\n\n367\n00:19:33.725 --> 00:19:38.260\nWhat if my user eventually,\nI want a timeout?\n\n368\n00:19:38.260 --> 00:19:40.630\nI'll say, I'm done waiting for\ninput from you.\n\n369\n00:19:41.840 --> 00:19:46.075\nAnd I'm just going to exit after that,\nor take nothing, right?\n\n370\n00:19:46.075 --> 00:19:47.330\nWhat do we want to do that?\n\n371\n00:19:47.330 --> 00:19:50.452\nWell, the good news is read allows\nus that functionality as well,\n\n372\n00:19:50.452 --> 00:19:52.982\nas you've probably suspected\nat this point in time.\n\n373\n00:19:52.982 --> 00:19:57.340\n[LAUGH] So let's take a look at this\nscript and see how that works itself out.\n\n374\n00:19:57.340 --> 00:20:04.180\nSo cats, I call this timeout,\nread_timeout.sh.\n\n375\n00:20:05.700 --> 00:20:08.910\nWe are getting a little more robust in the\nscript, because now we've seen probably\n\n376\n00:20:08.910 --> 00:20:13.910\nmore of a proper looking\nmenu typed script, right?\n\n377\n00:20:13.910 --> 00:20:14.890\nSo we're echoing.\n\n378\n00:20:14.890 --> 00:20:16.194\nWe're reading -p.\n\n379\n00:20:16.194 --> 00:20:19.200\nPlease enter your first name,\nlast name and Social Security number.\n\n380\n00:20:19.200 --> 00:20:22.945\nAnd then I get first, last and SSN, right?\n\n381\n00:20:22.945 --> 00:20:27.040\nIf I echo my first name, there you go.\n\n382\n00:20:27.040 --> 00:20:28.630\nIf I echo my last name, there you go.\n\n383\n00:20:28.630 --> 00:20:31.940\nIt's referencing these things,\nSocial Security Number.\n\n384\n00:20:31.940 --> 00:20:34.710\nAnd then we get to the next read state.\n\n385\n00:20:34.710 --> 00:20:38.814\nAll right, and this is read-t 5.2.\n\n386\n00:20:38.814 --> 00:20:43.903\nAnd I chose 5.2 because that's how\nfast I like my gyroscope 0 to 60,\n\n387\n00:20:43.903 --> 00:20:47.446\n[LAUGH] right,\nat the very least, 5.2 seconds.\n\n388\n00:20:47.446 --> 00:20:52.747\nSo it is looking at time in seconds and\n\n389\n00:20:52.747 --> 00:20:57.193\nyou can use pieces of a second,\n\n390\n00:20:57.193 --> 00:21:00.620\nnot a complete second.\n\n391\n00:21:00.620 --> 00:21:06.182\nSo 5.2 seconds, 5 and\n0.2 of a second, right?\n\n392\n00:21:06.182 --> 00:21:07.210\nSo just keep that in mind.\n\n393\n00:21:07.210 --> 00:21:12.200\nYou can employ that type, and\nit can be 5.22 if I want, all right?\n\n394\n00:21:12.200 --> 00:21:16.784\nSo -t, or time out and\nthe amount of time in seconds, and or\n\n395\n00:21:16.784 --> 00:21:23.170\nfractions of a second, that you would\nlike to have as far as your timeout goes.\n\n396\n00:21:23.170 --> 00:21:24.955\nAnd then the rest is standard fare, right?\n\n397\n00:21:24.955 --> 00:21:28.130\n-p, is the above correct?\n\n398\n00:21:28.130 --> 00:21:29.420\nType yes or no.\n\n399\n00:21:29.420 --> 00:21:31.080\nConfirm is my variable.\n\n400\n00:21:32.170 --> 00:21:36.480\nThen I run through a case statement\npassing that confirmed variable to it.\n\n401\n00:21:36.480 --> 00:21:38.269\nCase dollar sign confirm ny or\n\n402\n00:21:38.269 --> 00:21:43.064\ny lower case or upper case trying to make\nconcessions for anybody that might go,\n\n403\n00:21:43.064 --> 00:21:47.445\nI don't know if I'm supposed to\ncapitalize this or what's happening.\n\n404\n00:21:47.445 --> 00:21:50.680\nIt'll take both with that or statement.\n\n405\n00:21:50.680 --> 00:21:53.750\nThen echo out confirm, thank you, no.\n\n406\n00:21:53.750 --> 00:21:54.940\nOkay, please try again.\n\n407\n00:21:54.940 --> 00:21:58.850\nAnd anything else invalid option or\nI'm expired, okay?\n\n408\n00:21:58.850 --> 00:21:59.480\nSo there we go.\n\n409\n00:21:59.480 --> 00:22:01.290\nI'm going close this with esac.\n\n410\n00:22:01.290 --> 00:22:02.890\nWe're off to the races.\n\n411\n00:22:02.890 --> 00:22:07.130\nIt also says thanks for using our\nelectronic identification system.\n\n412\n00:22:07.130 --> 00:22:10.825\nSo let's see how this script\nlooks when we run it.\n\n413\n00:22:10.825 --> 00:22:17.230\n./read_timeout.sh, there we go.\n\n414\n00:22:17.230 --> 00:22:20.990\nPlease enter you first,\nlast, and Social Security.\n\n415\n00:22:20.990 --> 00:22:22.672\nFirst name is Daniel.\n\n416\n00:22:22.672 --> 00:22:24.528\nLast name is Lowrie.\n\n417\n00:22:24.528 --> 00:22:29.520\nSocial security is 555-55-5555,\ngood, Enter.\n\n418\n00:22:29.520 --> 00:22:34.280\nFirst name, last name, Social Security,\nis the above information correct?\n\n419\n00:22:34.280 --> 00:22:34.890\nLook at that.\n\n420\n00:22:36.520 --> 00:22:38.496\nIt timed out,\nit stopped waiting for my input.\n\n421\n00:22:38.496 --> 00:22:41.230\nAnd that's exactly the functionality\nI wanted to put in there.\n\n422\n00:22:41.230 --> 00:22:45.650\nYou take too long, we're just gonna say\ninvalid option or that the time has\n\n423\n00:22:45.650 --> 00:22:49.250\nexpired and thanks for using our\nelectronic identification system.\n\n424\n00:22:49.250 --> 00:22:51.356\nI should add quarterly at the end of that.\n\n425\n00:22:51.356 --> 00:22:52.680\n[LAUGH] Cuz you waited too long, right?\n\n426\n00:22:53.970 --> 00:22:56.250\nI would have to make sure to hit y or\n\n427\n00:22:56.250 --> 00:23:00.810\nno before the timeout occurs,\nif I wanted to continue on.\n\n428\n00:23:00.810 --> 00:23:07.360\nSo if I ran it back and\nI hit Daniel Lowrie, 555-55-5555.\n\n429\n00:23:07.360 --> 00:23:09.120\nYes, that's all good.\n\n430\n00:23:09.120 --> 00:23:11.670\nHit Enter, confirmed, thank you.\n\n431\n00:23:11.670 --> 00:23:14.190\nAnd again, thanks for using our\nelectronic identification system.\n\n432\n00:23:14.190 --> 00:23:15.200\nSo a menu driven system.\n\n433\n00:23:15.200 --> 00:23:20.810\nDon't want to wait forever for you to\nget off your duff and type something in.\n\n434\n00:23:20.810 --> 00:23:24.770\nIt's a simple yes or no question,\nis that the correct information?\n\n435\n00:23:24.770 --> 00:23:27.070\nAnd if you don't, well, then we're just\ngonna drop out and do something else.\n\n436\n00:23:27.070 --> 00:23:29.100\nI could have done other things as well,\nobviously.\n\n437\n00:23:29.100 --> 00:23:32.180\nBut simple scripts keep\nnew concepts simple.\n\n438\n00:23:34.020 --> 00:23:36.190\n&gt;&gt; All right, Daniel,\nthis is something I've definitely seen.\n\n439\n00:23:37.840 --> 00:23:39.273\nWhat is my password again?\n\n440\n00:23:39.273 --> 00:23:40.260\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n441\n00:23:40.260 --> 00:23:44.180\nthen a lot of these systems will time out\nso you just can't be looking at things.\n\n442\n00:23:44.180 --> 00:23:46.190\nAnd then so this is pretty handy.\n\n443\n00:23:46.190 --> 00:23:49.935\nThe only thing you needed to add to that\nscript was mother's maiden name, and\n\n444\n00:23:49.935 --> 00:23:52.714\nchildhood pet's name and\nwe would be fully identified.\n\n445\n00:23:52.714 --> 00:23:53.966\n[LAUGH]\n&gt;&gt; We were good to go at that point in\n\n446\n00:23:53.966 --> 00:23:54.997\ntime, right time, yeah.\n\n447\n00:23:54.997 --> 00:23:59.213\nThat's right, you can add all\nthe functionality you want and\n\n448\n00:23:59.213 --> 00:24:03.915\nif you want to make sure that if they\nAren't following along aptly and\n\n449\n00:24:03.915 --> 00:24:06.936\npromptly that you're gonna drop them out.\n\n450\n00:24:06.936 --> 00:24:09.130\nSo moving on,\nlet's talk about character counting.\n\n451\n00:24:10.540 --> 00:24:15.374\nI could say, instead of having to hit\nenter, I could say once I've reached\n\n452\n00:24:15.374 --> 00:24:19.519\na certain amount of character I'm\ngoing to imply an answer, and\n\n453\n00:24:19.519 --> 00:24:22.316\nthat could come in handy\nfrom time to time.\n\n454\n00:24:22.316 --> 00:24:29.620\nYou hit Y, it goes, you hit N, it goes,\ninstead of N, Enter, Y, Enter.\n\n455\n00:24:29.620 --> 00:24:33.380\nNow that does take away our\nability to back up and go,\n\n456\n00:24:33.380 --> 00:24:38.593\nwell I hit Z accidental, or something\nT next to my Y, I can't back it up,\n\n457\n00:24:38.593 --> 00:24:43.568\nit's gonna look for a single character,\nand then imply that enter.\n\n458\n00:24:43.568 --> 00:24:47.721\nSo keep that in mind as you use this,\nbut if you wanted that, you could do it.\n\n459\n00:24:47.721 --> 00:24:51.911\nIt's simple, you do a cat, let's see here,\n\n460\n00:24:51.911 --> 00:24:57.608\nread_char account, and right here,\nin our read statement,\n\n461\n00:24:57.608 --> 00:25:01.276\nI've changed it from a time outs to n1.\n\n462\n00:25:01.276 --> 00:25:05.275\nSo I want a character n\nnumber of x numbers, and\n\n463\n00:25:05.275 --> 00:25:09.806\nI put one, I can put two,\nput four, 12 whatever.\n\n464\n00:25:09.806 --> 00:25:13.020\nSo character count you're done.\n\n465\n00:25:13.020 --> 00:25:16.055\nSo, when I hit Y here it'll just go.\n\n466\n00:25:16.055 --> 00:25:17.193\nI don't have to hit enter.\n\n467\n00:25:17.193 --> 00:25:21.952\nSo let's run this one ./read_char account.\n\n468\n00:25:21.952 --> 00:25:29.258\nIt takes Daniel Lowrie 555-55-5555.\n\n469\n00:25:29.258 --> 00:25:33.175\nSo with that, once I hit Y it just goes.\n\n470\n00:25:33.175 --> 00:25:34.978\nI just hit Y, I didn't hit enter.\n\n471\n00:25:34.978 --> 00:25:38.605\nSame thing will happen with no, and\nsince I don't have time out on this,\n\n472\n00:25:38.605 --> 00:25:40.930\nit won't time out, so\nI'm good to go on that.\n\n473\n00:25:40.930 --> 00:25:44.630\n&gt;&gt; Now, Daniel, for the -end do I\nnecessarily have to have them nestled\n\n474\n00:25:44.630 --> 00:25:48.535\ntogether like that, or can there be\na space, or we get some flexibility?\n\n475\n00:25:48.535 --> 00:25:49.950\n&gt;&gt; Yeah, you got some flexibility there.\n\n476\n00:25:49.950 --> 00:25:52.690\nSo if you like a space between,\nif it makes it more readable for you,\n\n477\n00:25:52.690 --> 00:25:53.540\nthat's fine.\n\n478\n00:25:53.540 --> 00:25:55.730\nA lot of people like them together,\na lot of people like them apart.\n\n479\n00:25:55.730 --> 00:25:59.415\nI typically just, if I remember to\nhit the spacebar then it's there,\n\n480\n00:25:59.415 --> 00:26:01.250\nif it's not it's not, [LAUGH] so.\n\n481\n00:26:01.250 --> 00:26:05.124\nI'm not really consistent when it\ncomes to that, as you'll probably see.\n\n482\n00:26:05.124 --> 00:26:08.830\nBut, there you go, you wanna make\nsure that once they hit a key\n\n483\n00:26:08.830 --> 00:26:12.038\nit's off the function, or\nit's off to the races, or\n\n484\n00:26:12.038 --> 00:26:15.990\nyou've met a certain length criteria\nyou can do that using this.\n\n485\n00:26:17.070 --> 00:26:20.257\n&gt;&gt; Now Daniel up to this point we've\nseen everything that you've typed on\n\n486\n00:26:20.257 --> 00:26:23.723\nthe screen, but I know there's some\nsystems that I use you don't want that.\n\n487\n00:26:23.723 --> 00:26:25.994\nShould surfing is definitely a concern,\nright?\n\n488\n00:26:25.994 --> 00:26:26.561\n&gt;&gt; Yep.\n\n489\n00:26:26.561 --> 00:26:27.924\n&gt;&gt; Well that's your password?\n\n490\n00:26:27.924 --> 00:26:29.007\nYou should get a longer one.\n\n491\n00:26:29.007 --> 00:26:32.008\n&gt;&gt; [LAUGH]\n&gt;&gt; But, is there a way that we can write\n\n492\n00:26:32.008 --> 00:26:36.767\nscripts that have that hidden input that\nI've kind of associate with Linux systems?\n\n493\n00:26:36.767 --> 00:26:41.403\n&gt;&gt; Yeah, yeah, you totally can, and for\nthose shoulder surfing type of attacks,\n\n494\n00:26:41.403 --> 00:26:43.380\nthis would work out for you.\n\n495\n00:26:43.380 --> 00:26:48.050\nI can just hide the characters, and\nput read in what's known as silent mode.\n\n496\n00:26:48.050 --> 00:26:53.020\nI don't want you to output whatever's\nbeing typed from the inputs to the screen.\n\n497\n00:26:53.020 --> 00:26:56.304\nI just want you to take it in and\nput it in the variable.\n\n498\n00:26:56.304 --> 00:26:59.632\nSo it's gonna go into the system, but\nit's not gonna go out to the screen, and\n\n499\n00:26:59.632 --> 00:27:00.700\nthat's called silent.\n\n500\n00:27:00.700 --> 00:27:03.840\nUse the -s option to make that happen.\n\n501\n00:27:03.840 --> 00:27:08.267\nIf I catch read_silence like so,\n\n502\n00:27:08.267 --> 00:27:14.650\nwe'll see that in here,\nhere you go, readS.\n\n503\n00:27:14.650 --> 00:27:18.633\nSo it's looking for an account number,\nthings like passwords, account numbers,\n\n504\n00:27:18.633 --> 00:27:22.516\nstuff like that, probably not a good idea\nto let everybody and their brother see.\n\n505\n00:27:22.516 --> 00:27:26.742\nSo if we just use the silent option\nwhen looking for that input,\n\n506\n00:27:26.742 --> 00:27:30.512\nthen that will help with that\nshoulder surfing attack.\n\n507\n00:27:30.512 --> 00:27:33.228\nIt's not a full robust system.\n\n508\n00:27:33.228 --> 00:27:36.545\nIf anybody had their hooks in the system\nmaybe they could be able to pull that\n\n509\n00:27:36.545 --> 00:27:39.864\ninformation, but for any passerby\nthey're not gonna be able to see that,\n\n510\n00:27:39.864 --> 00:27:43.048\nand that's the whole purpose of it,\nand this is a good example of that.\n\n511\n00:27:43.048 --> 00:27:44.750\nWe're gonna ask for an account number.\n\n512\n00:27:44.750 --> 00:27:50.024\nSo let's run it\n./read_silence.sh first name,\n\n513\n00:27:50.024 --> 00:27:54.134\nlast name, and social security number.\n\n514\n00:27:54.134 --> 00:27:58.863\nDaniel Lowrie 555-55-5555.\n\n515\n00:27:58.863 --> 00:28:01.670\nEnter, please enter your account number.\n\n516\n00:28:01.670 --> 00:28:06.560\nLet's see here,\nI'll make it So, hit enter, and\n\n517\n00:28:06.560 --> 00:28:11.564\nask me do I wanna verify that\naccount number, I'll hit, Yes.\n\n518\n00:28:11.564 --> 00:28:15.046\nMoving out, well I missed the time out,\nand then of course I confirm.\n\n519\n00:28:15.046 --> 00:28:16.692\nBut, I had a time out in place.\n\n520\n00:28:16.692 --> 00:28:20.858\nAnother good place to put a time out,\nbecause, maybe somebody is like, I wanna\n\n521\n00:28:20.858 --> 00:28:25.166\nsee your account number, and whatever,\nand they're kind of pushing you aside.\n\n522\n00:28:25.166 --> 00:28:27.639\nIf it times out too quickly,\nyou'd have to run through it again, and\n\n523\n00:28:27.639 --> 00:28:29.300\nkind of causing more distraction.\n\n524\n00:28:29.300 --> 00:28:32.190\nBut, that would happened,\nI could do that, but you'll notice,\n\n525\n00:28:32.190 --> 00:28:35.310\nwhen I typed in my number,\nyou didn't see it at all, and\n\n526\n00:28:35.310 --> 00:28:39.900\nthat was the whole point of the exercise,\nwas to show you, if I use that -s option,\n\n527\n00:28:39.900 --> 00:28:43.060\nand my read,\nthat's not gonna output the screen.\n\n528\n00:28:43.060 --> 00:28:46.136\nOne last thing I wanna do is take\na look at reading from a file.\n\n529\n00:28:46.136 --> 00:28:50.593\nMaybe I have some standard type\nof input that I wanna read, and\n\n530\n00:28:50.593 --> 00:28:53.172\nI'll just grab that from the file.\n\n531\n00:28:53.172 --> 00:28:57.251\nMaybe the menu itself, and\nthat's what I've done for this example.\n\n532\n00:28:57.251 --> 00:29:02.233\nIf we cat read_file.sh, you'll see I'm\n\n533\n00:29:02.233 --> 00:29:07.221\nemploying a while loop\nto make this happen.\n\n534\n00:29:07.221 --> 00:29:11.321\nWhat's happening is I'm cating this file,\nmenu.text,\n\n535\n00:29:11.321 --> 00:29:16.734\nif I cat menu.text we see welcome to\nLinux Admin tool, and then some options.\n\n536\n00:29:16.734 --> 00:29:21.480\nLine one is file system help,\ntwo system offline, three info, and exit.\n\n537\n00:29:21.480 --> 00:29:21.980\nMoving on.\n\n538\n00:29:23.150 --> 00:29:25.992\nBut if we go back up here,\nI'm gonna cat that, and\n\n539\n00:29:25.992 --> 00:29:30.802\nI'm gonna pipe that into my WhileLoop,\nand I'm gonna basically take those items,\n\n540\n00:29:30.802 --> 00:29:33.060\nand put them in this variable, items.\n\n541\n00:29:33.060 --> 00:29:38.572\nAll right, so WhileRead is reading items\nfrom that cat command, DoEchoItems,\n\n542\n00:29:38.572 --> 00:29:44.081\nand so it's basically just gonna read that\nline by line, and put in line by line,\n\n543\n00:29:44.081 --> 00:29:49.185\nwhat it reads from that cat, from that\noutput file, and then that'll give\n\n544\n00:29:49.185 --> 00:29:54.645\nus our menu option instead of having to\ncode that in there with echo statements.\n\n545\n00:29:54.645 --> 00:29:58.114\nSomething you may or may not want to do,\njust wanna give you that option.\n\n546\n00:29:58.114 --> 00:30:00.800\nI ran up the flag pole here.\n\n547\n00:30:00.800 --> 00:30:05.614\nIt is called read_file.sh,\n\n548\n00:30:05.614 --> 00:30:09.135\nand see now I get that.\n\n549\n00:30:09.135 --> 00:30:12.756\nNotice here I cat that menu, and\nhere when I run the system file, or\n\n550\n00:30:12.756 --> 00:30:17.152\nthe shell script, that all comes out and\nthen it starts asking me for my choice and\n\n551\n00:30:17.152 --> 00:30:20.130\nI can enter one, two,\nthree or four, whatever.\n\n552\n00:30:20.130 --> 00:30:22.990\nSo if I wanna do three, there I go,\nI get my system info, and\n\n553\n00:30:22.990 --> 00:30:24.002\nthen exit out and we're done.\n\n554\n00:30:24.002 --> 00:30:27.360\nIf you wanna read it from the files, it's\na little skullduggery, a little trickery\n\n555\n00:30:27.360 --> 00:30:30.740\ngoing to make that happen using the while\nstatement, with the piping of the cat, and\n\n556\n00:30:30.740 --> 00:30:35.510\nthe whole nine yards, but it can be done,\nand if you like that, well then go for it.\n\n557\n00:30:35.510 --> 00:30:38.490\n&gt;&gt; Well I can definitely see the utility\nhere, especially if I had very complex\n\n558\n00:30:38.490 --> 00:30:44.680\nmenus that I don't necessarily wannna\nstore in a script or may change over time.\n\n559\n00:30:44.680 --> 00:30:48.198\nYeah, I have to change the logic, but\nthen I don't have to distribute the script\n\n560\n00:30:48.198 --> 00:30:50.600\nif we're like well,\nwhat are the things that I can do?\n\n561\n00:30:50.600 --> 00:30:52.310\nWell, here's the menu options.\n\n562\n00:30:52.310 --> 00:30:56.680\nYou don't really need to know the logic\nbehind the scenes to understand that.\n\n563\n00:30:56.680 --> 00:30:59.503\nSo definitely, thank you so\nmuch, Daniel, for that, but\n\n564\n00:30:59.503 --> 00:31:02.722\nwe're definitely running on a little\nlong time on this episode, so\n\n565\n00:31:02.722 --> 00:31:05.099\nwe're gonna have to go ahead and\nwrap this one up.\n\n566\n00:31:05.099 --> 00:31:08.992\nSo signing off for ITProTV,\nI've been your host Justin Dennison.\n\n567\n00:31:08.992 --> 00:31:09.805\n&gt;&gt; And I'm Daniel Lowrie.\n\n568\n00:31:09.805 --> 00:31:12.033\n&gt;&gt; And we'll see you next time.\n\n569\n00:31:12.033 --> 00:31:18.048\n[MUSIC]\n\n570\n00:31:18.048 --> 00:31:21.280\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237906849"
        }
      ],
      "title": "Handling User Input"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin take another look\nat redirection, this time focusing on Linux File Descriptors for the\npurposes of controlling user presented data. Here they will explain\nFile Descriptors and then show the many ways in which we can\nredirect their output in a scripting context.",
          "length": "1915",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-7-1-1-presenting_data_file_descriptors-101017-PGM.00_32_50_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-7-1-1-presenting_data_file_descriptors-101017-PGM.00_32_50_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-7-1-1-presenting_data_file_descriptors-101017-PGM.00_32_50_01.Still001-sm.jpg",
          "title": "Presenting Data File Descriptors",
          "transcript": "WEBVTT\n\n1\n00:00:00.180 --> 00:00:01.220\nWelcome to IT Pro TV.\n\n2\n00:00:01.220 --> 00:00:03.465\nI'm your host, Don Pezet.\n\n3\n00:00:03.465 --> 00:00:04.705\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:04.705 --> 00:00:08.215\n[MUSIC]\n\n5\n00:00:08.215 --> 00:00:10.560\n&gt;&gt; You're watching IT Pro TV.\n\n6\n00:00:12.200 --> 00:00:16.122\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITProTV.\n\n7\n00:00:16.122 --> 00:00:18.355\nI'm your host, Justin Dennison, and well,\n\n8\n00:00:18.355 --> 00:00:20.761\nwe're back with\nLinux Shell Scripting Basics and\n\n9\n00:00:20.761 --> 00:00:24.099\nwe're gonna be looking at presenting\ndata using file descriptors.\n\n10\n00:00:24.099 --> 00:00:27.020\nAnd here to help us along in that\nvery endeavour, is Mr. Daniel Lowrie.\n\n11\n00:00:27.020 --> 00:00:27.860\nHow you doing today Daniel?\n\n12\n00:00:27.860 --> 00:00:30.360\n&gt;&gt; Justin, my main man,\nI am back with a vengeance and\n\n13\n00:00:30.360 --> 00:00:33.410\nwe're here doing some more\nLinux Shell scripting basics.\n\n14\n00:00:33.410 --> 00:00:38.150\nAnd as you have said,\nwe are dipping into file redirectors, or\n\n15\n00:00:38.150 --> 00:00:39.190\nfile descriptors, I'm sure.\n\n16\n00:00:39.190 --> 00:00:41.390\nI love to say redirectors, because,\n\n17\n00:00:41.390 --> 00:00:44.750\ntypically that's what we're doing with\nfile descriptors, is redirecting them.\n\n18\n00:00:44.750 --> 00:00:46.954\nI know that Justin actually\nworks with them a lot and\n\n19\n00:00:46.954 --> 00:00:48.500\nthey are the bane of his existence.\n\n20\n00:00:48.500 --> 00:00:50.870\nBut we're not gonna get\nthat deep into things.\n\n21\n00:00:50.870 --> 00:00:53.620\nBasically what we're talking about is,\n\n22\n00:00:53.620 --> 00:00:57.330\nmore in the line of the presenting\ndata aspect of it, okay?\n\n23\n00:00:57.330 --> 00:00:59.750\nSo I just wanted to give you guys some\n\n24\n00:00:59.750 --> 00:01:03.180\npractical ways in which file\ndescriptors will probably be used or\n\n25\n00:01:03.180 --> 00:01:07.170\nthat you might want to use them\nin such a way, in your scripts.\n\n26\n00:01:07.170 --> 00:01:10.550\nAnd so that you're familiar with\nthose techniques and tactics.\n\n27\n00:01:10.550 --> 00:01:14.085\nSo as you can get the desired\npresentation of the day that it comes\n\n28\n00:01:14.085 --> 00:01:15.940\nout of your script, okay?\n\n29\n00:01:15.940 --> 00:01:20.030\nThat's the main focus of today's episode.\n\n30\n00:01:20.030 --> 00:01:20.910\nSo that's what we're gonna do.\n\n31\n00:01:20.910 --> 00:01:23.144\nI know we kind of looked at,\nI say we kinda look at,\n\n32\n00:01:23.144 --> 00:01:26.930\nwe actually did a whole show maybe even\ntwo I can't remember at this point.\n\n33\n00:01:26.930 --> 00:01:31.692\nOn redirection, so\nwe will be seeing some more redirection.\n\n34\n00:01:31.692 --> 00:01:33.550\nI'm gonna start us often,\nbut let's start there.\n\n35\n00:01:33.550 --> 00:01:36.610\nLet's start with redirection,\nsince that's familiar ground, right?\n\n36\n00:01:36.610 --> 00:01:38.390\nRemember with redirection,\nwhat do we have?\n\n37\n00:01:38.390 --> 00:01:41.800\nWe have, as Don called it,\nthe alligator jaws, right?\n\n38\n00:01:41.800 --> 00:01:43.520\nYou have the greater than and\nless than sign.\n\n39\n00:01:43.520 --> 00:01:45.350\nIf you have a single greater than,\n\n40\n00:01:45.350 --> 00:01:50.180\nthen that's saying, to create a file\nthat doesn't exist or overwrite a file\n\n41\n00:01:50.180 --> 00:01:54.350\nthat exists with the output of\nwhatever's being redirected, correct?\n\n42\n00:01:54.350 --> 00:01:54.960\nGot that?\n\n43\n00:01:54.960 --> 00:01:55.490\nReady to go?\n\n44\n00:01:55.490 --> 00:02:00.060\nAll right, if we have two greater than\nsigns, then we're appending data to\n\n45\n00:02:00.060 --> 00:02:05.000\nthe file that comes after the redirector\nfrom the output of the one before, okay?\n\n46\n00:02:05.000 --> 00:02:06.980\nSo don't overwrite the file.\n\n47\n00:02:06.980 --> 00:02:09.040\nBut if the file doesn't exist,\ncreate the file and\n\n48\n00:02:09.040 --> 00:02:12.350\nwrite append this information to it,\nright?\n\n49\n00:02:12.350 --> 00:02:15.450\nSo, it's probably a really\ngood habit unless you\n\n50\n00:02:15.450 --> 00:02:20.230\nspecifically want to be\noverwriting said file.\n\n51\n00:02:20.230 --> 00:02:24.480\nSo always use the double greater than\nsign because if the file doesn't exist,\n\n52\n00:02:24.480 --> 00:02:25.130\nit will create it.\n\n53\n00:02:25.130 --> 00:02:27.120\nIf it does, it'll just append to it and\n\n54\n00:02:27.120 --> 00:02:29.420\na lot of times that's exactly\nthe kind of idea we want.\n\n55\n00:02:29.420 --> 00:02:31.310\nThat's okay if you don't wanna do that.\n\n56\n00:02:31.310 --> 00:02:32.240\nYou just wanna like, for\n\n57\n00:02:32.240 --> 00:02:35.290\na lot of the demo purposes today, we'll\nprobably be overriding files quite often.\n\n58\n00:02:35.290 --> 00:02:36.840\nBut, that's neither here or there.\n\n59\n00:02:36.840 --> 00:02:39.285\nAnd then remember,\nthe opposite was true as well.\n\n60\n00:02:39.285 --> 00:02:43.760\nIf I wanted to take data\nfrom something and in,\n\n61\n00:02:43.760 --> 00:02:47.960\nuse it as input, I could go\nthe opposite way with my redirector.\n\n62\n00:02:47.960 --> 00:02:53.020\nAnd we have the whole,\nthe marketing, end of file, the EOF,\n\n63\n00:02:53.020 --> 00:02:57.410\nthat aspect happening for\nworking with things like VC,\n\n64\n00:02:57.410 --> 00:03:00.720\nI think we did it with VC,\nwe did some WC as well.\n\n65\n00:03:00.720 --> 00:03:01.680\nSo, we can do that.\n\n66\n00:03:01.680 --> 00:03:05.359\nSo that's standard redirection, there\nwas the recap of standard redirection,\n\n67\n00:03:05.359 --> 00:03:06.700\nall in a little tiny package.\n\n68\n00:03:07.820 --> 00:03:13.120\nBut, now we gotta talk more properly\nabout, what's happening there.\n\n69\n00:03:13.120 --> 00:03:14.800\nSo we have these file descriptors.\n\n70\n00:03:14.800 --> 00:03:16.300\nWhat are file descriptors?\n\n71\n00:03:16.300 --> 00:03:21.570\nFile descriptors are the thing that says,\nwell there's three of them,\n\n72\n00:03:21.570 --> 00:03:22.360\nlet's start there.\n\n73\n00:03:22.360 --> 00:03:27.200\nThere's three of them, there's standard\nin, standard out and standard air, okay?\n\n74\n00:03:27.200 --> 00:03:32.492\nAnd what they do is they channel data,\none place or another, all right?\n\n75\n00:03:32.492 --> 00:03:36.784\nThe default place that standard\nout channels to, is to the screen,\n\n76\n00:03:36.784 --> 00:03:38.380\nyour terminal, right?\n\n77\n00:03:39.830 --> 00:03:43.150\nStandard in defaults from keyboard.\n\n78\n00:03:43.150 --> 00:03:47.970\nAnd standard error, well,\nit defaults to the screen as well.\n\n79\n00:03:47.970 --> 00:03:48.600\nThat's standard out.\n\n80\n00:03:48.600 --> 00:03:50.910\nSo that's like, hm, that's weird.\n\n81\n00:03:50.910 --> 00:03:52.380\nRight?\nThey both default to standard out.\n\n82\n00:03:52.380 --> 00:03:54.344\nWell yeah,\nthat's because if an error happens,\n\n83\n00:03:54.344 --> 00:03:57.244\nyou're probably looking at your screen and\nyou wanna see that error, and\n\n84\n00:03:57.244 --> 00:03:59.980\nthen you can take that error and\nstart troubleshooting from there.\n\n85\n00:03:59.980 --> 00:04:04.680\nSo, it's a good idea that both go to\nthat screen, so that you can see them,\n\n86\n00:04:04.680 --> 00:04:06.420\nand that's the whole purpose of that.\n\n87\n00:04:06.420 --> 00:04:10.440\nNow, what we're talking about today, now\nthat we know what file descriptors are and\n\n88\n00:04:10.440 --> 00:04:13.489\nwhat they do,\ntheir position in life for us.\n\n89\n00:04:14.530 --> 00:04:16.420\nWhat do we do with that information?\n\n90\n00:04:16.420 --> 00:04:21.087\nAnd that's really gonna be the focus of\nthe topic today is, I've got standard out\n\n91\n00:04:21.087 --> 00:04:25.300\ncoming out to the screen, I've got\nstandard error coming to the screen.\n\n92\n00:04:26.370 --> 00:04:31.460\nWhat if I want to change that\ndefault action of what it's doing?\n\n93\n00:04:31.460 --> 00:04:35.050\nAnd we're just gonna talk on the basics\nof this because unless you get super deep\n\n94\n00:04:35.050 --> 00:04:39.920\ninto file descriptors and that's really\nyou could spend a whole series on\n\n95\n00:04:39.920 --> 00:04:42.848\nlearning about file descriptors,\nit's a very in depth topic.\n\n96\n00:04:42.848 --> 00:04:44.940\nI just wanna give you guys the basics,\ngive you a primer on that.\n\n97\n00:04:44.940 --> 00:04:47.890\nSo that you can work within your\ndescriptors in some way shape or form.\n\n98\n00:04:47.890 --> 00:04:50.110\nBut if you want to go\ndown that rabbit hole,\n\n99\n00:04:50.110 --> 00:04:54.290\nI'm sure Justin would attest to\nthe fact that, It is quite complex.\n\n100\n00:04:54.290 --> 00:04:56.660\nIt'll take you probably a minute\nespecially if you're on initiator.\n\n101\n00:04:58.000 --> 00:05:00.090\nAll right, so now that we have our basics,\n\n102\n00:05:00.090 --> 00:05:03.910\nlet's talk about redirecting\nthat standard in, standard out.\n\n103\n00:05:03.910 --> 00:05:09.100\nOne thing I did wanna explain to you\nwas the fact that standard error.\n\n104\n00:05:09.100 --> 00:05:10.050\nLet's talk about standard error.\n\n105\n00:05:10.050 --> 00:05:13.820\nSo standard error and standard out,\nthey both go to the screen, right?\n\n106\n00:05:13.820 --> 00:05:16.560\nThey go to, or, yeah,\nthey go to your terminal.\n\n107\n00:05:16.560 --> 00:05:17.630\nWhatever is going on there.\n\n108\n00:05:19.150 --> 00:05:22.410\nBut if I use a redirector, right?\n\n109\n00:05:22.410 --> 00:05:25.040\nIf I use that single greater than sign,\n\n110\n00:05:26.070 --> 00:05:31.410\nwhat happens if I have good output and\nan error?\n\n111\n00:05:31.410 --> 00:05:32.360\nWhat's going to happen?\n\n112\n00:05:32.360 --> 00:05:37.530\nWell, standard error is not redirected by\ndefault, even if you use the redirector.\n\n113\n00:05:38.800 --> 00:05:43.180\nThat's something, what we might need to\nbe aware of, so that we can handle that.\n\n114\n00:05:43.180 --> 00:05:46.880\nNow maybe that's exactly what we want and\nprobably in most cases it is.\n\n115\n00:05:46.880 --> 00:05:47.830\nMaybe, you know what?\n\n116\n00:05:47.830 --> 00:05:50.780\nI want standard error to come to the\nscreen all the time and that's good that\n\n117\n00:05:50.780 --> 00:05:53.790\nthat's the default because typically\nthat's exactly what I'm looking for.\n\n118\n00:05:53.790 --> 00:05:57.020\nBut there are gonna be cases when that's\nnot what you're gonna be looking for and\n\n119\n00:05:57.020 --> 00:05:58.690\nyou wanna play around with that.\n\n120\n00:05:58.690 --> 00:06:02.800\nSo let's take a look and\nsee how that looks in a practical way, so\n\n121\n00:06:02.800 --> 00:06:04.840\nthat we can better understand this, right?\n\n122\n00:06:04.840 --> 00:06:05.910\nSo let's jump into my screen.\n\n123\n00:06:05.910 --> 00:06:08.940\nI've got this example here,\nI've created a script.\n\n124\n00:06:08.940 --> 00:06:10.260\nLet us take a look at it.\n\n125\n00:06:10.260 --> 00:06:15.350\nCats, I love to double c that cats for\nsome reason with my ring finger.\n\n126\n00:06:15.350 --> 00:06:19.690\nRedir, it is called\nstandard error logger.sh.\n\n127\n00:06:19.690 --> 00:06:21.560\nLet us see what is inside that thing.\n\n128\n00:06:21.560 --> 00:06:25.160\nVery simple script, just so\nwe can see the stuff.\n\n129\n00:06:25.160 --> 00:06:26.740\nSo all I am doing is I'm\nhitting the date and\n\n130\n00:06:26.740 --> 00:06:30.800\nthen I've got a little divider I've\ncreated with the star, or the asterisk.\n\n131\n00:06:30.800 --> 00:06:36.660\nI'm looking at the uname,\nuptime, I'm doing a fairly\n\n132\n00:06:36.660 --> 00:06:42.090\ncomplex IF config string, just to get\nthe IP address, we're just looking for IP.\n\n133\n00:06:42.090 --> 00:06:46.070\nJust some system information\nabout my system, right?\n\n134\n00:06:46.070 --> 00:06:50.110\nAnd then I've got this guy right here,\nsilly-o.\n\n135\n00:06:50.110 --> 00:06:53.160\nWell I don't know about you Justin,\nbut I've never heard of silly-o.\n\n136\n00:06:53.160 --> 00:06:56.660\nWent and did an app get list and\nthen looking, searching for\n\n137\n00:06:56.660 --> 00:06:59.250\nthat using app yeah silly o doesn't exist.\n\n138\n00:06:59.250 --> 00:07:04.700\nI can't find any source files related to\nsilly o, it's not installed on my system.\n\n139\n00:07:04.700 --> 00:07:08.440\nSo i'm going to get an error, when it\ntries to run that as a command, right?\n\n140\n00:07:08.440 --> 00:07:10.765\nSo if I did silly o here.\n\n141\n00:07:10.765 --> 00:07:11.950\nSilly-o.\n\n142\n00:07:11.950 --> 00:07:15.650\nYou notice coming in not found, right?\n\n143\n00:07:15.650 --> 00:07:17.000\nThat's an error.\n\n144\n00:07:17.000 --> 00:07:21.460\nThat was standard error being\nredirected to my screen.\n\n145\n00:07:21.460 --> 00:07:25.737\nThe default direction of standard error,\nokay?\n\n146\n00:07:25.737 --> 00:07:28.590\nSo, what happens if I run this script?\n\n147\n00:07:28.590 --> 00:07:30.015\nLet's do that.\n\n148\n00:07:30.015 --> 00:07:35.195\n./redirect Standardairlogger.sh and\n\n149\n00:07:35.195 --> 00:07:43.688\nthen I redirect and I'm gonna send\nit to sysvitals.log, like that.\n\n150\n00:07:43.688 --> 00:07:45.210\nSo I'm creating a log val.\n\n151\n00:07:45.210 --> 00:07:48.823\nSay I wanted to do this every day,\nI just want this script to run and\n\n152\n00:07:48.823 --> 00:07:51.779\nwhen it does it tells me the time and\ndate that it ran and\n\n153\n00:07:51.779 --> 00:07:54.701\nthe output of all the successful commands,\nright?\n\n154\n00:07:54.701 --> 00:07:57.137\nI hit Enter, it runs.\n\n155\n00:07:57.137 --> 00:08:00.855\nBut you'll notice, that standard error.\n\n156\n00:08:00.855 --> 00:08:06.930\nWas not redirected, here it is, at\nthe screen, it did not go into that file,\n\n157\n00:08:06.930 --> 00:08:12.630\nif I cap that file which is sysvitals.log,\nall the other output did go,\n\n158\n00:08:12.630 --> 00:08:16.780\nbecause that was standard out information,\nokay.\n\n159\n00:08:16.780 --> 00:08:22.025\nSo standard out was redirected,\nstandard error was not by default.\n\n160\n00:08:22.025 --> 00:08:25.520\nGonna have to play around\na little more to get,\n\n161\n00:08:25.520 --> 00:08:29.430\nif I want standard error\nto be redirected as well.\n\n162\n00:08:29.430 --> 00:08:33.590\nRemember, by default that\nstandard error is not redirected\n\n163\n00:08:33.590 --> 00:08:37.710\nif you just use the standard\nredirection techniques.\n\n164\n00:08:37.710 --> 00:08:39.560\nWe have to fiddle with it a little bit,\nright?\n\n165\n00:08:40.660 --> 00:08:46.284\nAll right, so if we want to send standard\nerror to a log file of it's own,\n\n166\n00:08:46.284 --> 00:08:49.252\nwe gotta start manipulating things.\n\n167\n00:08:49.252 --> 00:08:53.548\nNow, when we talked about the file to\nscript Justin said there was three,\n\n168\n00:08:53.548 --> 00:08:56.090\nand they actually have a label, right?\n\n169\n00:08:56.090 --> 00:08:58.280\nEach one has it's own label.\n\n170\n00:08:58.280 --> 00:09:03.000\nIt is standard in zero,\nstandard out is one and\n\n171\n00:09:03.000 --> 00:09:06.060\nstandard error is two,\nif I'm remembering correctly.\n\n172\n00:09:06.060 --> 00:09:10.610\nYes, in zero out one error two.\n\n173\n00:09:10.610 --> 00:09:19.860\nSo we can use those labels to reference\nthe one of our file descriptors okay.\n\n174\n00:09:19.860 --> 00:09:22.790\nBy default, obviously,\nsome things are happening, but if I want\n\n175\n00:09:22.790 --> 00:09:27.170\nto say specifically, like standard error,\nI want to do something, I could do that.\n\n176\n00:09:27.170 --> 00:09:28.240\nSo, how do we make that work?\n\n177\n00:09:28.240 --> 00:09:31.354\nAll right, well, let's show you\nhow that works on the screen here.\n\n178\n00:09:31.354 --> 00:09:37.372\nIf I ./redir, standard error,\nsame idea, but\n\n179\n00:09:37.372 --> 00:09:43.105\nthis time we're gonna\nsay sysvitals.log so,\n\n180\n00:09:43.105 --> 00:09:48.450\nstandard out is gonna go to sysfiles.log.\n\n181\n00:09:48.450 --> 00:09:52.393\nAnd then I'm gonna do two,\nI'm gonna append so\n\n182\n00:09:52.393 --> 00:09:57.610\nnow I have reference two,\nwhat is two standard error.\n\n183\n00:09:57.610 --> 00:10:00.570\nSo that's it's label,\nthrow that out there.\n\n184\n00:10:00.570 --> 00:10:09.000\nAnd I'm going to append to\nsysvitalshellovitals.prr.\n\n185\n00:10:09.000 --> 00:10:13.940\nThat way I've just, remember those dot\nextensions are for us as humans to.\n\n186\n00:10:13.940 --> 00:10:15.160\nLinux does not care.\n\n187\n00:10:15.160 --> 00:10:19.260\nIt could be .puppy if I felt like it,\nright?\n\n188\n00:10:19.260 --> 00:10:23.650\nBut .err kind of lets me know\nthis is probably an error log.\n\n189\n00:10:23.650 --> 00:10:30.120\nSo if I wanna look at errors with relation\nto sysvitals, there you go, right?\n\n190\n00:10:30.120 --> 00:10:35.340\nSo maybe my script is called sysvitals and\nwhen I log standard out, it\n\n191\n00:10:35.340 --> 00:10:40.420\ngoes to sysfiles.log, and when I log the\nerror for it, it goes to sysfiles.error.\n\n192\n00:10:40.420 --> 00:10:42.860\nSo just kinda making things\na little easier to deal with.\n\n193\n00:10:44.220 --> 00:10:47.820\nSo now I should have one log file,\n\n194\n00:10:47.820 --> 00:10:51.760\nthe log for the standard out and\nanother log file for\n\n195\n00:10:51.760 --> 00:10:55.840\nthe standard error being redirected\ninstead of being sent to the screen.\n\n196\n00:10:57.010 --> 00:10:58.760\nFingers crossed my man,\nlet's see what happens.\n\n197\n00:10:58.760 --> 00:11:01.785\nYeah, he is actually crossing his fingers,\nwell there you go, yes.\n\n198\n00:11:01.785 --> 00:11:04.920\n[LAUGH] Thank you for\nyour support Justin, I appreciate it.\n\n199\n00:11:04.920 --> 00:11:05.801\nHere we go.\n\n200\n00:11:05.801 --> 00:11:08.784\nThat's right, no, so nothing happened,\n\n201\n00:11:08.784 --> 00:11:13.390\nsomething did happen it just didn't\nhappen to the screen, right?\n\n202\n00:11:13.390 --> 00:11:16.593\nIt was redirected using\nthose file descriptors,\n\n203\n00:11:16.593 --> 00:11:20.030\ndescriptors, they are labels, right?\n\n204\n00:11:20.030 --> 00:11:23.224\nSo now I should have sysfile.log and\n\n205\n00:11:23.224 --> 00:11:28.381\nsysfiles.error with some\ninformation in it, all right.\n\n206\n00:11:28.381 --> 00:11:33.810\nSo cap sysvitals.log there we go,\nthere's the output.\n\n207\n00:11:33.810 --> 00:11:38.200\nIt's right here, ran October 10th 9:46\nPM eastern daylight time 2017, and\n\n208\n00:11:38.200 --> 00:11:45.360\nall the information I ask for\nit, the system information,\n\n209\n00:11:45.360 --> 00:11:50.458\nthe uptime, and\nthe IP address of the machine, okay.\n\n210\n00:11:51.740 --> 00:11:55.870\nWhat happens if we cap sysvitals.error?\n\n211\n00:11:55.870 --> 00:11:58.530\nThere we go.\nYou see that I've been redirecting\n\n212\n00:11:58.530 --> 00:12:01.960\nstandard error to that file and\nthere it goes.\n\n213\n00:12:01.960 --> 00:12:05.240\nAnd I can get a little more creative\nwith that if I want to but, just for\n\n214\n00:12:05.240 --> 00:12:08.620\ndemonstration purposes to get us\nto get get us into a little bit.\n\n215\n00:12:08.620 --> 00:12:09.769\nThat's how we say okay,\n\n216\n00:12:09.769 --> 00:12:13.592\nI do have, or I might have errors\nI wanna make an account for that.\n\n217\n00:12:13.592 --> 00:12:16.700\nI wanna pop it from just\ngoing to the screen,\n\n218\n00:12:16.700 --> 00:12:21.247\nbecause I might not be in front of\nmy screen when the script runs.\n\n219\n00:12:21.247 --> 00:12:23.209\nSo I will never even see the error, right.\n\n220\n00:12:23.209 --> 00:12:25.463\nThis may be a background process, and\n\n221\n00:12:25.463 --> 00:12:29.300\nthat just does nothing is coming\nup to the screen for me, right.\n\n222\n00:12:29.300 --> 00:12:32.820\nSo, a good way to handle that information\nwould be to shove that out into an error\n\n223\n00:12:32.820 --> 00:12:35.020\nfile so that I can look at them later.\n\n224\n00:12:35.020 --> 00:12:39.450\nCome in everyday, becomes part of my\nworkflow, I check error files, error logs.\n\n225\n00:12:39.450 --> 00:12:43.490\n&gt;&gt; Now Daniel, I can actually attest to\nthat, when we had long running process in\n\n226\n00:12:43.490 --> 00:12:47.410\nsome of our dev work actually\nkind of data munging so you will.\n\n227\n00:12:47.410 --> 00:12:49.560\nYes, that I hear that word all the time.\n\n228\n00:12:49.560 --> 00:12:51.550\nI'm not entirely sure\nwhether it's made up.\n\n229\n00:12:51.550 --> 00:12:55.110\nBut we're transforming this information\nand we're using some of these tools,\n\n230\n00:12:55.110 --> 00:13:00.060\nwe would something like this, redirect to\nan error file, and that way if it took two\n\n231\n00:13:00.060 --> 00:13:04.390\ndays to run, well we wouldn't have to\nlike scroll back through our screen and\n\n232\n00:13:04.390 --> 00:13:08.010\nwe could use tools like grep and\nthings like that to do quick searches.\n\n233\n00:13:08.010 --> 00:13:10.390\nSo this is something\nthat I do all the time.\n\n234\n00:13:10.390 --> 00:13:13.295\nI do have a question,\nwhat if, so that two there.\n\n235\n00:13:13.295 --> 00:13:15.188\n&gt;&gt; Mm-hm.\n\n236\n00:13:15.188 --> 00:13:18.801\n&gt;&gt; Is there any possibility\nif I make a typo, right,\n\n237\n00:13:18.801 --> 00:13:24.133\nif I'm like exporting from something or\nlike cadding from something that\n\n238\n00:13:24.133 --> 00:13:29.209\na two would be misinterpreted as\nstandard error the file descriptor or\n\n239\n00:13:29.209 --> 00:13:33.730\nlike I'm having a hard time\ngetting across what I mean.\n\n240\n00:13:33.730 --> 00:13:36.490\nIf there was some other\ninput being streamed in and\n\n241\n00:13:36.490 --> 00:13:40.790\nthere was just a two there,\nwould it assume that it's standard error?\n\n242\n00:13:40.790 --> 00:13:43.060\nOr would it go,\nwell this is from another source,\n\n243\n00:13:43.060 --> 00:13:45.350\nwe're not actually talking about\nthe standard error channel?\n\n244\n00:13:45.350 --> 00:13:47.700\n&gt;&gt; I think that this only gets picked up,\n\n245\n00:13:47.700 --> 00:13:50.915\nin my experience,\nwhen you're using redirection.\n\n246\n00:13:50.915 --> 00:13:55.950\nSo as long as you're in a re-directive\ncontext where there is a redirector in\n\n247\n00:13:55.950 --> 00:14:01.270\nline on my command, there's a two adjacent\nto it, it's interpreting that too.\n\n248\n00:14:01.270 --> 00:14:04.850\nIf you were just to have a file and\nput a two in there it would just see it as\n\n249\n00:14:04.850 --> 00:14:09.040\na regular two string, or a number\ndepending on what your script is doing.\n\n250\n00:14:09.040 --> 00:14:14.650\nSo in the context of, we are working with\nsome sort of command structure, right?\n\n251\n00:14:14.650 --> 00:14:20.890\nSo if we ran a script and I was saying,\nand, using lazy grammar or whatever,\n\n252\n00:14:20.890 --> 00:14:26.220\nand I said I went today, it wouldn't\nthink that's standard error, right?\n\n253\n00:14:26.220 --> 00:14:30.070\nBut if I said cap something to redirector,\n\n254\n00:14:30.070 --> 00:14:34.680\nredirector, filename, it would say,\nthat is the two redirector, right?\n\n255\n00:14:34.680 --> 00:14:36.150\nCuz that context is on there.\n\n256\n00:14:36.150 --> 00:14:39.710\nWe are sending a command, and it would\nall be within the context also of our\n\n257\n00:14:42.450 --> 00:14:45.110\ncommand substitutions\ninside of the bash script.\n\n258\n00:14:45.110 --> 00:14:49.160\nSo that would all be bundled up with the\ndollar sign and two parentheses as well.\n\n259\n00:14:49.160 --> 00:14:52.687\nSo all by its lonesome and no context,\n\n260\n00:14:52.687 --> 00:14:58.651\nif I just said two like that,\nit sees it as, is that a command?\n\n261\n00:14:58.651 --> 00:14:59.960\nI don't know what this is.\n\n262\n00:14:59.960 --> 00:15:04.110\nSo you have to have that context as far\nas I know at least in my experience.\n\n263\n00:15:04.110 --> 00:15:08.090\nMaybe there's some deep dark bash secrets\ngoing on that you can make happen, but\n\n264\n00:15:08.090 --> 00:15:10.760\nin my practical experience\nthat has never been the case,\n\n265\n00:15:10.760 --> 00:15:12.850\nit's always been in\nthe context of redirection.\n\n266\n00:15:12.850 --> 00:15:15.210\nSo hopefully that answers your question,\nJustin.\n\n267\n00:15:15.210 --> 00:15:16.060\nAnd let's move on.\n\n268\n00:15:16.060 --> 00:15:20.010\nLet's talk about redirecting\nstandard error and\n\n269\n00:15:20.010 --> 00:15:22.620\nstandard out to the same log file.\n\n270\n00:15:23.620 --> 00:15:24.850\nWhat if we wanted to do that?\n\n271\n00:15:24.850 --> 00:15:28.200\nCuz in this one I've kind of got two\nlogs and maybe it's just easier for\n\n272\n00:15:28.200 --> 00:15:30.780\nme to read them together, right?\n\n273\n00:15:30.780 --> 00:15:34.940\nSee it as it would have\nhappened to the screen, right?\n\n274\n00:15:34.940 --> 00:15:39.490\nIn a normal fashion, so I could just make\nsome regular log file that does that.\n\n275\n00:15:39.490 --> 00:15:42.470\nBut I've gotta redirect both to that.\n\n276\n00:15:42.470 --> 00:15:43.830\nSo how does that happen?\n\n277\n00:15:43.830 --> 00:15:47.270\nWell, we use the ampersand\nto make that occur.\n\n278\n00:15:48.820 --> 00:15:49.600\nSo let's see how that looks.\n\n279\n00:15:49.600 --> 00:15:53.877\nIf I'm gonna clear here and\nI've got this other, well, yeah,\n\n280\n00:15:53.877 --> 00:15:58.730\nI don't have another,\nit's the same script, so let's do that.\n\n281\n00:15:58.730 --> 00:16:03.835\nIt will be ./ for\neither .standard error logger like that.\n\n282\n00:16:03.835 --> 00:16:08.237\nAnd from here, typically,\nwhat we did was we would say,\n\n283\n00:16:08.237 --> 00:16:11.724\ngreater than to the file\nnames to overwrite or\n\n284\n00:16:11.724 --> 00:16:15.458\nappend if we wanted to\ndo double greater thans.\n\n285\n00:16:15.458 --> 00:16:19.370\nAnd then two, I could do the same file\nname and it would redirect that way.\n\n286\n00:16:19.370 --> 00:16:25.390\nSo I could make it look like this,\nI could say sysvitals.log and\n\n287\n00:16:25.390 --> 00:16:32.140\nthen also do like 2systvitals.log,\nlike that, that would work,\n\n288\n00:16:33.190 --> 00:16:38.540\nwe get that we're redirected,\nthat's fine, but it's a bit more typing,\n\n289\n00:16:38.540 --> 00:16:42.510\nI could get away with the exact same,\nget the exact same type of output.\n\n290\n00:16:42.510 --> 00:16:48.618\nIf I just use my ampersand like\nthat with my redirector and\n\n291\n00:16:48.618 --> 00:16:51.299\nsay to sysvitals.log.\n\n292\n00:16:51.299 --> 00:16:54.070\nBut now it should both go to there.\n\n293\n00:16:54.070 --> 00:16:56.650\nI hit that, I got no output,\nthere was an error,\n\n294\n00:16:56.650 --> 00:16:59.280\nremember cuz silly.-o is not a command.\n\n295\n00:16:59.280 --> 00:17:01.260\nSo there was an error.\n\n296\n00:17:01.260 --> 00:17:02.550\nIt obviously was redirected.\n\n297\n00:17:02.550 --> 00:17:05.920\nObviously we also know the other\ncommands ran as well because, but\n\n298\n00:17:05.920 --> 00:17:09.530\nthat's kind of the, the weird thing\nabout doing it this way if you're\n\n299\n00:17:09.530 --> 00:17:11.650\nexpecting to see stuff on the screen.\n\n300\n00:17:11.650 --> 00:17:13.280\nThis is like I said,\nthis is really good for\n\n301\n00:17:13.280 --> 00:17:17.310\nwhen I'm not expecting to be behind\na terminal looking at these things.\n\n302\n00:17:17.310 --> 00:17:18.070\nMaybe they're running, and\n\n303\n00:17:18.070 --> 00:17:22.840\nwe're gonna look at sending scripts to\nrun automatically in another episode.\n\n304\n00:17:22.840 --> 00:17:26.250\nBut for here, I've gotta kinda be behind\nhow to show you good folks, right?\n\n305\n00:17:26.250 --> 00:17:27.070\nSo there we go.\n\n306\n00:17:27.070 --> 00:17:30.628\nSo now I should be able to check\nsysvitals.log, so if I say,\n\n307\n00:17:30.628 --> 00:17:37.145\ncap sysvitals.log, and\nnow you'll see I get my,\n\n308\n00:17:37.145 --> 00:17:41.865\nit appended the output, gave me the date\nand time of when it occurred, right?\n\n309\n00:17:41.865 --> 00:17:47.310\nGave me all the standard stuff but the\nvery last line was also the error message.\n\n310\n00:17:47.310 --> 00:17:49.110\nSo if I wanted to put them both\ntogether and say you know what,\n\n311\n00:17:49.110 --> 00:17:51.190\nforget this two log business.\n\n312\n00:17:51.190 --> 00:17:54.140\nJust slam it all in one big spot\nI can just grep it out later or\n\n313\n00:17:54.140 --> 00:17:55.840\nsomething like that, that's fine too.\n\n314\n00:17:55.840 --> 00:17:58.950\nSo if you wanna do that,\nan easy way to cut down on a lot of typing\n\n315\n00:17:58.950 --> 00:18:03.430\nis just use the ampersand along with your\nredirectors and it will do both of them.\n\n316\n00:18:03.430 --> 00:18:07.170\n&gt;&gt; So ultimately this is capturing\nthe default behavior of standard error.\n\n317\n00:18:07.170 --> 00:18:10.730\nI mean really standard out is doing\nexactly the same thing that it was\n\n318\n00:18:10.730 --> 00:18:14.580\noriginally doing with the redirection,\nand then standard error is being changed\n\n319\n00:18:14.580 --> 00:18:17.450\nby the ampersand so\nthat you have a consistent result.\n\n320\n00:18:17.450 --> 00:18:18.450\nDo I have that right?\n\n321\n00:18:18.450 --> 00:18:23.410\n&gt;&gt; Yeah, I think you said that just right,\nbasically saying, it's short hand for\n\n322\n00:18:23.410 --> 00:18:25.780\nsaying I wanna bundle both of these up so\n\n323\n00:18:25.780 --> 00:18:30.280\nthat it will do this because by\ndefault standard error doesn't.\n\n324\n00:18:30.280 --> 00:18:34.610\nSo I, kinda wanna like shoe horn\nit into standard out as well.\n\n325\n00:18:34.610 --> 00:18:36.310\nAnd if you just, so they've,\n\n326\n00:18:36.310 --> 00:18:39.480\nlike I said they kind of made that short\nhanded just throwing the ampersand at it.\n\n327\n00:18:39.480 --> 00:18:43.120\nThat does that modifies that\ndefault behavior of standard error.\n\n328\n00:18:43.120 --> 00:18:46.180\n&gt;&gt; I would almost think of one or\ntwo do this.\n\n329\n00:18:46.180 --> 00:18:46.786\n&gt;&gt; Yeah.\n&gt;&gt; Yeah.\n\n330\n00:18:46.786 --> 00:18:49.161\n&gt;&gt; Yeah that's a great\nway to think about it.\n\n331\n00:18:49.161 --> 00:18:54.080\nSo it's like the and, where we typically\nuse as an and-ing, the ampersand.\n\n332\n00:18:54.080 --> 00:18:58.270\nSo if you think of it in the idea\nof one and two, I just need my and\n\n333\n00:18:58.270 --> 00:19:01.150\nsymbol, tnd there you go,\nyou can now redirect both of them.\n\n334\n00:19:02.190 --> 00:19:03.060\nAll right, moving on.\n\n335\n00:19:03.060 --> 00:19:10.160\nWhat if we wanna redirect standard outs to\na log file and the screen simultaneously?\n\n336\n00:19:10.160 --> 00:19:13.160\nCuz maybe I've decided to run this\nscript and I do wanna sit there and\n\n337\n00:19:13.160 --> 00:19:16.150\nwatch it but\nI don't want to interrupt the standard\n\n338\n00:19:16.150 --> 00:19:18.550\nlogging that its supposed to be doing,\nright?\n\n339\n00:19:18.550 --> 00:19:23.324\nSo I'm like, you know what I'm here, I\ndon't have to wait for the job to run I'll\n\n340\n00:19:23.324 --> 00:19:26.280\njust go ahead and run it myself, and\nthen I'll take a look at the output and\n\n341\n00:19:26.280 --> 00:19:29.260\nI don't have to cap the file waiting for\nit to happen.\n\n342\n00:19:29.260 --> 00:19:31.050\nI can just get it to\nthe standard screen and\n\n343\n00:19:31.050 --> 00:19:34.790\nthe log it's written to cuz\nthat's our practice, right?\n\n344\n00:19:34.790 --> 00:19:36.140\nSo how do we do that?\n\n345\n00:19:36.140 --> 00:19:37.240\nWe use a command,\n\n346\n00:19:37.240 --> 00:19:41.290\nwe take advantage of some lovely commands\nwe can find inside of our Linux system.\n\n347\n00:19:41.290 --> 00:19:44.870\nThis one is called tee, T-E-E.\n\n348\n00:19:44.870 --> 00:19:46.840\nNot E-A like we drink, but\n\n349\n00:19:46.840 --> 00:19:49.635\nmore like a golf tee, right,\nwhere you stick a golf ball.\n\n350\n00:19:49.635 --> 00:19:51.790\nT-E-E.\n\n351\n00:19:51.790 --> 00:19:54.572\nAnd that will do this little trick for us.\n\n352\n00:19:54.572 --> 00:19:58.530\nSo it'll say, you know what,\nlet's redirect to this file but\n\n353\n00:19:58.530 --> 00:20:02.630\nalso send it to the screen as well, okay?\n\n354\n00:20:02.630 --> 00:20:07.085\nSo I've got a script that\nwe can look that does this,\n\n355\n00:20:07.085 --> 00:20:11.949\nimplements tee to our advantage,\nit's called reader,\n\n356\n00:20:11.949 --> 00:20:16.630\nlet's do this cap reader_T and here we go.\n\n357\n00:20:16.630 --> 00:20:19.584\nLet's take a look at it,\nlog = log2.log, and\n\n358\n00:20:19.584 --> 00:20:22.983\nI wanna stop over my other logs\nI created in the log file.\n\n359\n00:20:22.983 --> 00:20:25.300\nGives me the date and\nI'm piping that into tee.\n\n360\n00:20:25.300 --> 00:20:30.680\nSo whatever the output is, remember from\nour redirecting show that we can command\n\n361\n00:20:30.680 --> 00:20:36.130\nchain things using, or pipe them, using\nthe straight up and down, the pipe carrot.\n\n362\n00:20:36.130 --> 00:20:42.149\nSo I'm piping that output into tee, and\ntee is manipulating that by saying,\n\n363\n00:20:42.149 --> 00:20:46.872\n-a I'm appending I didn't want\nto overwrite so I did -a for\n\n364\n00:20:46.872 --> 00:20:50.531\nappending to $log which equals log2.log.\n\n365\n00:20:50.531 --> 00:20:53.640\nSo if I wanted to easily create a new\nlog file I could come in here and\n\n366\n00:20:53.640 --> 00:20:59.810\njust modify what log equals to log3.log,\nlog4.log, right?\n\n367\n00:20:59.810 --> 00:21:04.151\nSo that's why you'll see that\ntype of goings on in a script for\n\n368\n00:21:04.151 --> 00:21:07.590\nthat very purpose,\nit's why we use variables.\n\n369\n00:21:09.220 --> 00:21:13.932\nEchoing that gets tee to the log,\nnew name, tee to the log, uptime tee to\n\n370\n00:21:13.932 --> 00:21:18.877\nthe log, I of congfig tee to the log,\nsilly o also tee to the log and then I'll\n\n371\n00:21:18.877 --> 00:21:23.850\njust do some echoes to break it up after\nit runs, right, give it some space.\n\n372\n00:21:24.950 --> 00:21:27.832\nBecause this is gonna go to my screen and\nmy log file.\n\n373\n00:21:27.832 --> 00:21:33.380\nAll right, so let's see how it works\n./redir tee.sh, there comes my\n\n374\n00:21:33.380 --> 00:21:37.550\nlovely output it did pop\nout to my screen but,\n\n375\n00:21:37.550 --> 00:21:44.410\nif I caps log2.log,\nI see the appended log right here.\n\n376\n00:21:44.410 --> 00:21:49.440\nIt ran Tuesday, October 9th at 9:56,\nand there you go.\n\n377\n00:21:49.440 --> 00:21:53.210\nSo there's my log, and\nwe're off to the races.\n\n378\n00:21:53.210 --> 00:21:58.280\nSo, very cool, that's if you want to take\nthat standard out, and you wanna send\n\n379\n00:21:58.280 --> 00:22:02.560\nit to a log file and the screen,\nokay, that's what tee does for us.\n\n380\n00:22:03.700 --> 00:22:08.520\nMoving on, we also can accomplish this,\n\n381\n00:22:08.520 --> 00:22:12.980\nas well as with the exec commands,\nan interesting thing.\n\n382\n00:22:12.980 --> 00:22:20.270\nThis way we can, let's see here, it's\nmore of inside the script kind of thing.\n\n383\n00:22:20.270 --> 00:22:24.230\nWe're redirecting from inside the script\ninstead of from the command line.\n\n384\n00:22:24.230 --> 00:22:25.580\nThat's what these things do, right?\n\n385\n00:22:25.580 --> 00:22:28.690\nSo, let's look at the exec command, and\nit will make a little more sense here.\n\n386\n00:22:28.690 --> 00:22:35.480\nSo let's see here, cap, we'll clear, and\nwe'll say cap reader and it's called exec.\n\n387\n00:22:35.480 --> 00:22:37.350\nLet's take a look.\n\n388\n00:22:37.350 --> 00:22:41.750\nSo in here I'm defining where I want\n\n389\n00:22:41.750 --> 00:22:45.115\nthese file descriptors to\ngo inside the script right?\n\n390\n00:22:45.115 --> 00:22:49.010\nTee just does standard\nout as far as I know.\n\n391\n00:22:49.010 --> 00:22:51.710\nMaybe it doesn't but\nthat's the only way I've ever used it.\n\n392\n00:22:52.970 --> 00:22:54.815\nWhereas I can come in here and say exec1.\n\n393\n00:22:54.815 --> 00:22:56.990\n[COUGH] Excuse me.\n\n394\n00:22:56.990 --> 00:23:00.530\nSo I'm executing [COUGH] excuse me,\nlittle frog in my throat.\n\n395\n00:23:00.530 --> 00:23:04.470\nI'm saying exec1 redirect\nthat to loggy.log.\n\n396\n00:23:04.470 --> 00:23:06.630\nI started getting really punch drunk\nhere while I was creating log files.\n\n397\n00:23:06.630 --> 00:23:11.560\n&gt;&gt; [LAUGH]\n&gt;&gt; Then exec2 redirect to loggy.error.\n\n398\n00:23:11.560 --> 00:23:17.530\nSo now, if I echo something,\nit's saying by default in this script,\n\n399\n00:23:17.530 --> 00:23:21.180\nanything that's supposed to go to standard\nout is actually gonna go to loggy.log.\n\n400\n00:23:21.180 --> 00:23:26.020\nAll standard out stuff is getting\nredirected using that exec command, okay?\n\n401\n00:23:27.290 --> 00:23:29.550\nSame thing applies for standard error.\n\n402\n00:23:29.550 --> 00:23:33.582\nTypically standard errors\ngoing to the screen but\n\n403\n00:23:33.582 --> 00:23:39.447\nnow by default any error is going to\nbe directed to loggy.error, okay?\n\n404\n00:23:39.447 --> 00:23:42.527\nSo that's what I mean by going\ninside of the script and\n\n405\n00:23:42.527 --> 00:23:45.920\nredirecting any of the file descriptors,\nokay?\n\n406\n00:23:45.920 --> 00:23:48.650\nSo now when I run this I\nshould get no output, and\n\n407\n00:23:48.650 --> 00:23:51.603\nI should have a of couple new log files,\nall right.\n\n408\n00:23:51.603 --> 00:23:56.591\nSo, if I pop slash this guy redir exec,\nlike that,\n\n409\n00:23:56.591 --> 00:24:01.660\nno output, but\nI should be to cap loggy.log.\n\n410\n00:24:01.660 --> 00:24:03.960\nAnd there we go,\nit says this should be in the loge.log.\n\n411\n00:24:03.960 --> 00:24:06.450\nThis should also be in loge.log.\n\n412\n00:24:06.450 --> 00:24:08.172\nYup, that's exactly how the script ran.\n\n413\n00:24:08.172 --> 00:24:12.449\nAnd then if we can't loge.log,\nthere we go,\n\n414\n00:24:12.449 --> 00:24:16.628\nwe see standard error\ngot redirected there.\n\n415\n00:24:16.628 --> 00:24:20.249\n&gt;&gt; So it looks like exec\nprovides temporary aliasing for\n\n416\n00:24:20.249 --> 00:24:23.670\nthose file descriptors to something else.\n\n417\n00:24:23.670 --> 00:24:24.700\nIs that a good way to think about it?\n\n418\n00:24:24.700 --> 00:24:29.420\n&gt;&gt; Yeah, I think that's an excellent\nway to think about it is with inside\n\n419\n00:24:29.420 --> 00:24:35.260\nthe script context we've said, I know that\nfile descriptor one does this typically,\n\n420\n00:24:35.260 --> 00:24:40.461\nbut in here, while you're in my little\nworld, think of it this way, right.\n\n421\n00:24:40.461 --> 00:24:43.890\nThink of standard out as loge.log.\n\n422\n00:24:43.890 --> 00:24:45.140\nPut that in mind.\n\n423\n00:24:45.140 --> 00:24:48.966\nAnd standard error, that's loge.error or\nwhatever you define it as, okay.\n\n424\n00:24:48.966 --> 00:24:52.420\nSo I think it's really great way to\nthink of it is like it's an alias for\n\n425\n00:24:52.420 --> 00:24:56.690\nthose things, and\nwhile you're in that context\n\n426\n00:24:56.690 --> 00:25:02.370\nthat alias takes over and becomes\nthe persona of those file scrapers.\n\n427\n00:25:02.370 --> 00:25:07.783\nAll right, so last thing we wanna talk\nabout is suppressing errors all together,\n\n428\n00:25:07.783 --> 00:25:10.300\nsuppressing output in some, right.\n\n429\n00:25:10.300 --> 00:25:14.650\nAnd this is one of my favorite\nlittle tricks, I say tricks.\n\n430\n00:25:14.650 --> 00:25:18.702\nIt should become standard,\nsomething that you do,\n\n431\n00:25:18.702 --> 00:25:23.685\nbecause sometimes when you run\na command you get a lot of output.\n\n432\n00:25:23.685 --> 00:25:30.840\nAnd sometimes that output is a mixed bag\nof things that you want to see and errors.\n\n433\n00:25:30.840 --> 00:25:33.634\nTypically things like permission denied,\nright,\n\n434\n00:25:33.634 --> 00:25:37.960\nbecause I'm not running this root 24 7,\nat least you shouldn't be, right.\n\n435\n00:25:37.960 --> 00:25:39.600\nThat's a bad practice, do not do that.\n\n436\n00:25:39.600 --> 00:25:40.679\n&gt;&gt; So I should go change that immediately.\n\n437\n00:25:40.679 --> 00:25:42.790\n&gt;&gt; Yeah, you should go ahead and\nlog out, that's probably a good idea.\n\n438\n00:25:42.790 --> 00:25:47.365\n[LAUGH] You want to create a user that has\nadministrative privileges that thry can\n\n439\n00:25:47.365 --> 00:25:48.670\njump to if necessary.\n\n440\n00:25:48.670 --> 00:25:50.210\nSo if you're running this route you won't\n\n441\n00:25:50.210 --> 00:25:51.810\nprobably have much of\nthose types of problems.\n\n442\n00:25:51.810 --> 00:25:54.130\nBut you're a standard user and\n\n443\n00:25:54.130 --> 00:25:56.710\nyour doing things,\nyou might run into permission denied.\n\n444\n00:25:56.710 --> 00:26:01.440\nAnd then if it's a 50 50 bag of permission\ndenied versus the data you actually want,\n\n445\n00:26:01.440 --> 00:26:05.220\nyou gotta sift through that and\nget rid of it.\n\n446\n00:26:05.220 --> 00:26:11.850\nWell if we just redirect the standard\nerror at the time of our run to nowhere.\n\n447\n00:26:11.850 --> 00:26:14.940\nI don't want to keep it in a file,\nright, I just want it to be gone.\n\n448\n00:26:14.940 --> 00:26:16.050\nI just don't want it to bother me.\n\n449\n00:26:17.620 --> 00:26:20.610\nThen that would help out a lot\nin looking through the data.\n\n450\n00:26:20.610 --> 00:26:24.250\nIt would really cut down on my time\nlooking through that output, right.\n\n451\n00:26:24.250 --> 00:26:25.630\nSo how do we do that?\n\n452\n00:26:25.630 --> 00:26:29.315\nWell we use the redirector and a lovely\nlittle thing we like to call dev null,\n\n453\n00:26:29.315 --> 00:26:32.980\nthe bit bucket,\nNothingsville as I like to say.\n\n454\n00:26:32.980 --> 00:26:37.990\nThis is where it's going, big fat pile\nof nowhere, it's just being shucked off.\n\n455\n00:26:37.990 --> 00:26:43.810\nIn your system there is a thing called\n/dev/null which is nothing, okay.\n\n456\n00:26:43.810 --> 00:26:45.340\nSo we'll see how that works.\n\n457\n00:26:46.490 --> 00:26:51.700\nIf I, let's see here, catfile.fileone,\n\n458\n00:26:51.700 --> 00:26:56.371\nyeah, fileone.txt, and I say /two.\n\n459\n00:26:56.371 --> 00:26:58.250\nThis is the syntax and how it works out.\n\n460\n00:26:58.250 --> 00:27:04.423\nSo I'm catting a file, I'm going\nto redirect all that to /div/null.\n\n461\n00:27:04.423 --> 00:27:05.702\nThis is how it looks.\n\n462\n00:27:05.702 --> 00:27:11.280\nSo that's saying, take that output and\nsend it to nowhere, right.\n\n463\n00:27:11.280 --> 00:27:13.390\nI just don't want it,\nI wanna get rid of it.\n\n464\n00:27:13.390 --> 00:27:14.460\nIt's kinda how it looks.\n\n465\n00:27:14.460 --> 00:27:17.929\nIf I'm working with\nsomething more practical,\n\n466\n00:27:17.929 --> 00:27:21.017\nlet's say that I'll cat etc, cat/etc.\n\n467\n00:27:21.017 --> 00:27:26.310\nIf I do this and then I throw on this\nlovely little thing right here, yeah.\n\n468\n00:27:26.310 --> 00:27:28.941\nJustin just was like,\nthat's going to be bad.\n\n469\n00:27:28.941 --> 00:27:29.797\n&gt;&gt; Yeah, I confess to this.\n\n470\n00:27:29.797 --> 00:27:31.824\n&gt;&gt; [LAUGH]\n&gt;&gt; I've actually periodically, and\n\n471\n00:27:31.824 --> 00:27:34.040\nI'm snooping around,\nI'm trying to find something.\n\n472\n00:27:34.040 --> 00:27:37.940\nAnd I'll do something like this\njust trying to find something.\n\n473\n00:27:37.940 --> 00:27:41.360\nAnd then I'm not saying I have,\nbut I might have\n\n474\n00:27:41.360 --> 00:27:45.925\nat least horribly slowed down my terminal\nor not been able to really do anything.\n\n475\n00:27:45.925 --> 00:27:46.991\n&gt;&gt; Yeah.\n&gt;&gt; Cuz I'm just like,\n\n476\n00:27:46.991 --> 00:27:48.210\nwell that was a lot of output,\n\n477\n00:27:48.210 --> 00:27:51.460\nI'm not sure if that's what\nI needed to do said thing.\n\n478\n00:27:51.460 --> 00:27:54.168\nSo buyer beware I think.\n\n479\n00:27:54.168 --> 00:27:57.505\n&gt;&gt; [LAUGH] Well we usually start\noff with casting a wide net, and\n\n480\n00:27:57.505 --> 00:28:00.720\nthis is about as wide as it gets for\nthe etc folder, okay.\n\n481\n00:28:00.720 --> 00:28:04.730\nI want you to give me everything,\nso if I do this, wow man,\n\n482\n00:28:04.730 --> 00:28:07.590\nthat was a lot of help, right.\n\n483\n00:28:07.590 --> 00:28:08.610\nI don't want that.\n\n484\n00:28:08.610 --> 00:28:13.600\nI just want stuff,\nespecially since I'm sure throughout here\n\n485\n00:28:13.600 --> 00:28:20.050\nthere is going to be all\nsorts of things with errors.\n\n486\n00:28:20.050 --> 00:28:21.680\nThere's probably an error or\ntwo up in here.\n\n487\n00:28:21.680 --> 00:28:28.270\nI am just passing, it's actually\ngoing crazy, like it's a script.\n\n488\n00:28:28.270 --> 00:28:31.082\n&gt;&gt; Would catting a directory\ncause all the errors?\n\n489\n00:28:31.082 --> 00:28:33.780\n&gt;&gt; Yeah, I think it's catting\nall the files in the directory.\n\n490\n00:28:33.780 --> 00:28:35.160\nSo this has gone a little berserk.\n\n491\n00:28:37.050 --> 00:28:40.900\nBut if I just did etc, let's just do that,\nlet's just say cat/etc.\n\n492\n00:28:40.900 --> 00:28:44.390\nIt's a lot of fun to play around\nwith those regular expressions,\n\n493\n00:28:44.390 --> 00:28:45.355\nwe can have a good time.\n\n494\n00:28:45.355 --> 00:28:48.280\nIt just says cat as a directory, but\nanyway, you get a lot of output.\n\n495\n00:28:48.280 --> 00:28:53.335\nBut what if I wanted to send any\nerror of that out too, right?\n\n496\n00:28:53.335 --> 00:28:59.791\nAnother way, I definitely can get\nsome errors like this if you say,\n\n497\n00:28:59.791 --> 00:29:05.360\nfind/-name* like so, .*, that will be fun.\n\n498\n00:29:05.360 --> 00:29:11.100\nIf I do that,\nThat should come back with something.\n\n499\n00:29:11.100 --> 00:29:12.843\nI guess I got to give it an actual name.\n\n500\n00:29:12.843 --> 00:29:19.605\nI'll say john, or\nhow about slash, how about home.\n\n501\n00:29:19.605 --> 00:29:20.189\nLook at that.\n\n502\n00:29:20.189 --> 00:29:21.997\nSee all these permission denies?\n\n503\n00:29:21.997 --> 00:29:25.699\nI don't need that, right, because I can't\naccess it anyway as a standard user,\n\n504\n00:29:25.699 --> 00:29:27.570\nI can't get to that information.\n\n505\n00:29:27.570 --> 00:29:31.060\nAnd even if I am pseudo user, maybe\nI don't want that information anyway.\n\n506\n00:29:31.060 --> 00:29:33.390\nHow do I get that to get out of my face?\n\n507\n00:29:33.390 --> 00:29:36.420\nLong trail traveling to get\nto where we're going here.\n\n508\n00:29:36.420 --> 00:29:42.258\nI can do this, I can say take\ntwo redirect that /div/null.\n\n509\n00:29:42.258 --> 00:29:47.173\nNow when I run this, output becomes\na little more manageable, right.\n\n510\n00:29:47.173 --> 00:29:50.578\nI didn't get any of these permission\ndenies cuz I wasn't allowed into those\n\n511\n00:29:50.578 --> 00:29:53.200\nthings, they just got shoved\nout to the bit bucket.\n\n512\n00:29:53.200 --> 00:29:59.780\nIf I cat/dev/null, you notice nothing\ncomes back, there's nothing there.\n\n513\n00:29:59.780 --> 00:30:01.820\nSo that's how this working.\n\n514\n00:30:01.820 --> 00:30:06.480\nAnother really cool little trick and then\nwe'll call it a day Justin, is if I wanted\n\n515\n00:30:06.480 --> 00:30:11.340\nto empty a file, empty the contents of\na file, I could send dev null, all right.\n\n516\n00:30:11.340 --> 00:30:14.340\nSo for programmatically,\nI could redirect that way.\n\n517\n00:30:14.340 --> 00:30:21.088\nI could say cat dev null and\nsend that to file name.tht, right.\n\n518\n00:30:21.088 --> 00:30:24.440\nSo I hit that and I cat file name .txt.\n\n519\n00:30:24.440 --> 00:30:25.330\nThere's nothing in it.\n\n520\n00:30:25.330 --> 00:30:29.410\nSo if I had a file with a bunch of stuff\nin it and I wanted to just wipe it out.\n\n521\n00:30:29.410 --> 00:30:34.520\nLet's start with a Tabula rasa,\nclean slate.\n\n522\n00:30:34.520 --> 00:30:35.350\nThen I could do that and\n\n523\n00:30:35.350 --> 00:30:38.970\nI could do that inside my scripts any\ntime I needed to empty that file out.\n\n524\n00:30:38.970 --> 00:30:42.240\nIt's a nice quick and dirty way to\nmake that kind of stuff happen.\n\n525\n00:30:42.240 --> 00:30:46.890\nBut as far as file descriptors go and\nredirection goes and working with that and\n\n526\n00:30:46.890 --> 00:30:51.550\npresenting that output in a way that we'd\nwant, maybe sending to logs, or sent to\n\n527\n00:30:51.550 --> 00:30:56.610\nthe screen in a log, or taking those\nerrors and just chucking them to the fire.\n\n528\n00:30:56.610 --> 00:30:58.630\nThat's, I think, all I got for\nyou for guys today.\n\n529\n00:30:58.630 --> 00:31:01.050\nIt should give you a good\nhandle on working with that and\n\n530\n00:31:01.050 --> 00:31:03.990\nhelp your scripts along a little bit when\nit comes to presenting that type of data.\n\n531\n00:31:03.990 --> 00:31:04.990\n&gt;&gt; Well Daniel,\n\n532\n00:31:04.990 --> 00:31:08.460\nyou've definitely highlighted some\nsubtleties that even I didn't know about.\n\n533\n00:31:08.460 --> 00:31:11.450\nI was like, wow,\nI didn't know you could do that.\n\n534\n00:31:11.450 --> 00:31:14.726\nThat could have helped me cuz I ended\nup with some log files, I don't know if\n\n535\n00:31:14.726 --> 00:31:17.950\nyou've ever tried to open a gigabyte\ntext file in any type of text editor,\n\n536\n00:31:17.950 --> 00:31:21.183\nit doesn't work, and that was because\nI was just gathering everything.\n\n537\n00:31:21.183 --> 00:31:25.475\nAnd well now based on what you've told me,\nI don't actually need to do that,\n\n538\n00:31:25.475 --> 00:31:27.930\nI can just grab the things\nthat I care about.\n\n539\n00:31:27.930 --> 00:31:31.730\nSo thank you for that, but we definitely\nhave more Linux Shell scripting basics\n\n540\n00:31:31.730 --> 00:31:33.620\ncoming your way, so stay tuned.\n\n541\n00:31:33.620 --> 00:31:36.720\nBut we are out of time for this episode,\nso we're gonna go ahead and wrap it up.\n\n542\n00:31:36.720 --> 00:31:39.780\nSigning for ITProTV,\nI've been your host Justin Dennison.\n\n543\n00:31:39.780 --> 00:31:40.670\n&gt;&gt; And I'm Daniel Lowrie.\n\n544\n00:31:40.670 --> 00:31:42.871\n&gt;&gt; And we'll see you next time.\n\n545\n00:31:42.871 --> 00:31:48.727\n[MUSIC]\n\n546\n00:31:48.727 --> 00:31:52.208\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "237759349"
        }
      ],
      "title": "Presenting Data"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin show you how to control\nscript execution. Here they will explain and demonstrate running scripts\nas background jobs and employing “nohup” to ensure they run without\ninterruption. They also tackle changing script priority using nice and\nrenice. Finally, they look at scheduling script execution with “AT”.",
          "length": "1883",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-1-script_control-101017-PGM.00_33_11_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-1-script_control-101017-PGM.00_33_11_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-1-script_control-101017-PGM.00_33_11_11.Still001-sm.jpg",
          "title": "Script Control",
          "transcript": "WEBVTT\n\n1\n00:00:00.148 --> 00:00:01.527\nWelcome to IVPRO.TV.\n\n2\n00:00:01.527 --> 00:00:02.897\nI'm your host, Don Pezet.\n\n3\n00:00:02.897 --> 00:00:06.300\n[CROSSTALK]\n\n4\n00:00:06.300 --> 00:00:08.399\n[MUSIC]\n\n5\n00:00:08.399 --> 00:00:12.290\n&gt;&gt; You're watching ITPRO.TV.\n\n6\n00:00:12.290 --> 00:00:16.174\n&gt;&gt; Greetings everyone, and welcome to\nanother exciting episode of ITPRO.TV.\n\n7\n00:00:16.174 --> 00:00:17.810\nI'm your host, Justin Dennison, and\n\n8\n00:00:17.810 --> 00:00:20.352\nwe're coming back with more\nLinux Shell Scripting Basics.\n\n9\n00:00:20.352 --> 00:00:23.099\nAnd we're gonna be looking\nat a script control,\n\n10\n00:00:23.099 --> 00:00:27.789\nwhich is a very important topic because I\nknow it's caused me some pain in the past,\n\n11\n00:00:27.789 --> 00:00:29.965\nand luckily we have an expert on hand.\n\n12\n00:00:29.965 --> 00:00:32.190\nMr. Daniel Lowrie,\nhow are you doing Daniel.\n\n13\n00:00:32.190 --> 00:00:34.773\n&gt;&gt; I was doing better\nuntil you said expert.\n\n14\n00:00:34.773 --> 00:00:35.639\n&gt;&gt; No, no.\n\n15\n00:00:35.639 --> 00:00:38.845\n&gt;&gt; [INAUDIBLE] [LAUGH]\n&gt;&gt; No, no, we're good.\n\n16\n00:00:38.845 --> 00:00:41.556\nListen, I'm a developer, we're gonna\nover prime this and under deliver.\n\n17\n00:00:41.556 --> 00:00:43.230\nWe got that, yeah.\n\n18\n00:00:43.230 --> 00:00:43.860\n[LAUGH]\n&gt;&gt; He is right.\n\n19\n00:00:43.860 --> 00:00:45.545\nWe are going to control these scripts,\n\n20\n00:00:45.545 --> 00:00:47.801\nbecause it's sometimes\nthat's what you wanna do.\n\n21\n00:00:47.801 --> 00:00:50.642\nNot every time when you\nget behind a terminal, or\n\n22\n00:00:50.642 --> 00:00:55.302\nhave a script that you've worked out that\nyou wanna go, I wanna run this and go.\n\n23\n00:00:55.302 --> 00:00:57.570\nI wanna run this and go.\n\n24\n00:00:57.570 --> 00:00:59.980\nMaybe I want it to run at a certain time,\n\n25\n00:00:59.980 --> 00:01:04.420\nmaybe I want it to run at a regular\ninterval things like that.\n\n26\n00:01:04.420 --> 00:01:08.790\nAnd we also want to control the script\nas far as maybe it's a priority.\n\n27\n00:01:08.790 --> 00:01:13.740\nMaybe I need this script to have more\nsystem resources than this script.\n\n28\n00:01:13.740 --> 00:01:15.580\nHow do we do that?\n\n29\n00:01:15.580 --> 00:01:17.342\nThings of that nature,\nthat's what we're gonna look at today.\n\n30\n00:01:17.342 --> 00:01:20.083\nThat's what we're talking about\nwhen we say script control.\n\n31\n00:01:20.083 --> 00:01:23.209\nWe're gonna take little more\nof a hands on approach,\n\n32\n00:01:23.209 --> 00:01:26.130\nto making sure that it goes\nthe way we need it to go.\n\n33\n00:01:27.340 --> 00:01:34.234\nSo let's start with talking about just how\nscripts, what scripts do when we run them.\n\n34\n00:01:34.234 --> 00:01:39.437\nIf you run a script, if I open a terminal,\nand I run a script, and let's say that\n\n35\n00:01:39.437 --> 00:01:45.360\nscript is waiting for input or it's a lot\nof processing of many different things.\n\n36\n00:01:45.360 --> 00:01:50.150\nIf I do that script, then it's gonna\ntake my terminal away for one thing,\n\n37\n00:01:50.150 --> 00:01:53.650\nthat's one of the biggest problems\nwith running scripts this way.\n\n38\n00:01:53.650 --> 00:01:56.218\nAnd sometimes,\nthey can hijack the terminal and\n\n39\n00:01:56.218 --> 00:01:58.460\nyou've gotta open up another one.\n\n40\n00:01:58.460 --> 00:02:03.020\nThere's a couple of ways around that from\nhappening, and we did talk a bit about\n\n41\n00:02:03.020 --> 00:02:08.940\nthat in the Linux command line basics,\nbut I wanna revisit that a little bit,\n\n42\n00:02:08.940 --> 00:02:12.670\nand then use that as a springboard\ngoing to some more advance stuff.\n\n43\n00:02:12.670 --> 00:02:15.500\nSo let's talk about that,\nhow are we gonna get our terminal back?\n\n44\n00:02:15.500 --> 00:02:21.330\nWell, we can always use the ampersand\nat the end of our script command.\n\n45\n00:02:21.330 --> 00:02:26.130\nSo if I do, ./scripts, and\nthen put an ampersand at the end,\n\n46\n00:02:26.130 --> 00:02:28.220\na space and an ampersand.\n\n47\n00:02:28.220 --> 00:02:31.370\nIt will say, you want me to\nrun that as a background job.\n\n48\n00:02:31.370 --> 00:02:34.970\nSo put that in the background,\ngive me my terminal back and\n\n49\n00:02:34.970 --> 00:02:39.700\nI continue on my merry way,\nbanging out whatever, playing Sudoku.\n\n50\n00:02:39.700 --> 00:02:44.500\nBut, I've gotta remember that that's\nhow I've created that background job.\n\n51\n00:02:45.960 --> 00:02:49.740\nSo let's see how that works out,\nlet's do that, just so\n\n52\n00:02:49.740 --> 00:02:52.550\nthat we can move our progression.\n\n53\n00:02:52.550 --> 00:02:58.650\nSo if I say ./script.sh, like that,\nI throw an ampersand on the end.\n\n54\n00:02:58.650 --> 00:03:03.027\nI hit Enter, there we go, you'll notice\nthat this thing pops up right here.\n\n55\n00:03:05.032 --> 00:03:08.360\nActually, I don't care, let me see here,\nmaybe I'm gonna script one,\n\n56\n00:03:08.360 --> 00:03:10.370\nthere's my problem.\n\n57\n00:03:10.370 --> 00:03:14.710\nLet's try running the right script first,\nand then we'll see what that does.\n\n58\n00:03:14.710 --> 00:03:19.739\nThere we go, and it still gets\nthe same kind of to begin with,\n\n59\n00:03:19.739 --> 00:03:23.223\nwhich is you get this number 1 and 24332.\n\n60\n00:03:23.223 --> 00:03:26.838\nAnd you recall, that's its PID,\nits process ID,\n\n61\n00:03:26.838 --> 00:03:30.325\nit's got a job that's happening,\nif I do jobs.\n\n62\n00:03:30.325 --> 00:03:34.250\n[LAUGH]\nI am a horrible typist.\n\n63\n00:03:34.250 --> 00:03:38.480\nThere we go, jobs, we see that\nit is running in the background.\n\n64\n00:03:38.480 --> 00:03:40.870\nBut I kept my terminal open,\nI can throw the commands at it.\n\n65\n00:03:40.870 --> 00:03:44.900\nIf I wanted to bring it to the foreground,\nI do fg, and I can do that.\n\n66\n00:03:45.900 --> 00:03:50.640\nI could do jobs percents one for\nthe job number.\n\n67\n00:03:51.720 --> 00:03:52.280\nI can work with that.\n\n68\n00:03:52.280 --> 00:03:56.284\nRemember, that was from what Donn was\nshowing us back in that command line show.\n\n69\n00:03:56.284 --> 00:04:00.322\nAnd it's great stuff,\ngood control, stuff that we like.\n\n70\n00:04:00.322 --> 00:04:04.820\nThere are some caveats\nto doing it this way.\n\n71\n00:04:04.820 --> 00:04:07.800\nOne of the caveats is,\nif I close this terminal down.\n\n72\n00:04:07.800 --> 00:04:13.010\nGuess what's happened to that background\nprocess, it's done, it kills it.\n\n73\n00:04:13.010 --> 00:04:16.820\nAnd the reason is that, it's because those\njobs are tied to that terminal sessions.\n\n74\n00:04:16.820 --> 00:04:18.930\nWhen the terminal dies, the job dies.\n\n75\n00:04:20.550 --> 00:04:24.090\nAnd, what if there's no terminal open,\nand I still need to run a job,\n\n76\n00:04:24.090 --> 00:04:28.010\nI need to spawn a session so that it can.\n\n77\n00:04:28.010 --> 00:04:29.470\nJobs isn't really gonna\nhelp me out with that,\n\n78\n00:04:29.470 --> 00:04:31.870\nso we're gonna have to move on\nfrom there for those things.\n\n79\n00:04:31.870 --> 00:04:35.180\nBut working with jobs,\nthat is something that can happen.\n\n80\n00:04:35.180 --> 00:04:40.270\nSo if I wanna stick inside this vein,\nI can send it a signal and say,\n\n81\n00:04:41.490 --> 00:04:47.830\neven if you kill this terminal session,\nI don't want my background process to die.\n\n82\n00:04:47.830 --> 00:04:51.241\nSo when you spawn the background process,\n\n83\n00:04:51.241 --> 00:04:55.230\nI want you to do it in\na detached terminal session.\n\n84\n00:04:55.230 --> 00:04:56.950\nSo that it's no longer\nattached to this one.\n\n85\n00:04:56.950 --> 00:05:00.240\nThat way I can kill my terminal,\nand my job continues to run.\n\n86\n00:05:02.120 --> 00:05:03.190\nSo how do we do that?\n\n87\n00:05:03.190 --> 00:05:04.480\nLike I said, we send it a signal,\n\n88\n00:05:04.480 --> 00:05:08.990\nthere are many different signals found\ninside of the Linux operating system.\n\n89\n00:05:08.990 --> 00:05:10.220\nOne of them is no hub.\n\n90\n00:05:11.530 --> 00:05:13.550\nSo if we send,\nwhich stands for a no hang up.\n\n91\n00:05:14.680 --> 00:05:18.290\nSo it means I don't want to, you're gonna\nthink of it, I think of it is no hang up.\n\n92\n00:05:18.290 --> 00:05:23.570\nI'm on the phone, and Justin starts\nhaving a conversation with me,\n\n93\n00:05:23.570 --> 00:05:26.600\nI could hang up the phone and\nnow I'm doing that job.\n\n94\n00:05:26.600 --> 00:05:32.210\nNow I'm having a conversation with Justin,\nbut if I wanna kind of put them on hold.\n\n95\n00:05:32.210 --> 00:05:35.030\nI say, well,\nI'm not gonna hang up, no hangup.\n\n96\n00:05:35.030 --> 00:05:37.180\nStill have this conversation alive,\n\n97\n00:05:38.360 --> 00:05:41.750\nI just might not be working\nwith it in the foreground.\n\n98\n00:05:41.750 --> 00:05:44.820\nAnd if I stop talking to Justin\nthat conversation is still there,\n\n99\n00:05:44.820 --> 00:05:47.510\nit's kind of detached\nfrom what's going on.\n\n100\n00:05:47.510 --> 00:05:52.160\nSo, if we want to detach our job from\nthe terminal that it was spawned in,\n\n101\n00:05:52.160 --> 00:05:57.443\nthen we've gotta use that KNOW Hub signal,\nso see how that works itself out here.\n\n102\n00:05:57.443 --> 00:06:02.271\nSo if I say Know Hub like that, and\n\n103\n00:06:02.271 --> 00:06:08.135\nthen I give it the ./script 11.sh,\n\n104\n00:06:08.135 --> 00:06:13.530\nand I throw in the background.\n\n105\n00:06:13.530 --> 00:06:17.560\nI hit Enter, there we go, and\nyou'll notice it says ignoring input,\n\n106\n00:06:17.560 --> 00:06:21.270\nappending output to knowhub.out.\n\n107\n00:06:21.270 --> 00:06:25.550\nSo whenever the script runs or if there's\nany errors or something like that,\n\n108\n00:06:25.550 --> 00:06:29.300\nit will go to knowhub.out, because it's\nno longer attached to this terminal.\n\n109\n00:06:29.300 --> 00:06:33.720\nStandard out is not here,\nnow it's basically standard out\n\n110\n00:06:33.720 --> 00:06:38.190\nscenario are going to Know Hub, so\nlet me see if I get my terminal back.\n\n111\n00:06:38.190 --> 00:06:42.470\nSo very cool, so if you need to do that,\nthat was a really good way to make sure\n\n112\n00:06:42.470 --> 00:06:47.035\nthat any job that you respond, even though\nyou put it in the background doesn't die.\n\n113\n00:06:47.035 --> 00:06:51.240\nCuz god knows I've done it where you throw\na java background, you bang away at your\n\n114\n00:06:51.240 --> 00:06:54.260\nkeyboards, doing all this stuff\nyou're like okay I'm done, exit.\n\n115\n00:06:54.260 --> 00:06:56.901\n[SOUND] Fatal flaw, big mistake,\n\n116\n00:06:56.901 --> 00:07:01.532\nI just killed my background process,\nso be aware of that.\n\n117\n00:07:01.532 --> 00:07:02.167\n&gt;&gt; Now Daniel,\n\n118\n00:07:02.167 --> 00:07:05.919\nwould this also work if let's say I was\nrunning a kind of a maintenance job, or\n\n119\n00:07:05.919 --> 00:07:09.350\na maintenance script, or\nwhatever it may be in an ssh session?\n\n120\n00:07:09.350 --> 00:07:12.230\nCould I do this and\nget out of the ssh session or\n\n121\n00:07:12.230 --> 00:07:16.130\nis this strictly, I'm not entirely sure,\nbecause, is there something where I'm like\n\n122\n00:07:16.130 --> 00:07:18.730\nI need to get into this remote server,\ndo some things.\n\n123\n00:07:18.730 --> 00:07:21.930\nLet this run,\nI don't need to stay connected via ssh.\n\n124\n00:07:21.930 --> 00:07:23.710\nLet me get out, would this work for that?\n\n125\n00:07:23.710 --> 00:07:27.580\n&gt;&gt; Yes it would, because it's detaching\nit off from that ssh session.\n\n126\n00:07:27.580 --> 00:07:30.400\nSaying I've got a process,\nI'm gonna throw it in the background, and\n\n127\n00:07:30.400 --> 00:07:35.020\nI'm gonna give it its own terminal,\nits own shell to run in.\n\n128\n00:07:35.020 --> 00:07:38.368\nThis ssh session shell that you're\nworking in, that's detached from that.\n\n129\n00:07:38.368 --> 00:07:40.913\nSo you continue to bang away and\ndo whatever you want, or\n\n130\n00:07:40.913 --> 00:07:44.690\nexit out from it and you're still,\nyou should still be running fine.\n\n131\n00:07:44.690 --> 00:07:49.635\nAnd so, that's what Know Hub does,\nit says, do not hang up this process,\n\n132\n00:07:49.635 --> 00:07:53.649\nI need it to run regardless of\nwhat happens to this terminal.\n\n133\n00:07:53.649 --> 00:07:56.714\nSo a great way to make that happen.\n\n134\n00:07:56.714 --> 00:08:00.937\nAll right,\nlet's start talking about script priority.\n\n135\n00:08:00.937 --> 00:08:05.220\nThis gets fun, right,\nit's a lot of good times here.\n\n136\n00:08:05.220 --> 00:08:07.299\nLet me see, I wanna make sure I don't\nhave any jobs running, yeah, I do.\n\n137\n00:08:07.299 --> 00:08:11.975\nAlt-A, F-G.\n\n138\n00:08:11.975 --> 00:08:13.525\nWell how about that.\n\n139\n00:08:13.525 --> 00:08:15.854\nF-G percent 1.\n\n140\n00:08:15.854 --> 00:08:16.950\nHere we go, no such step.\n\n141\n00:08:16.950 --> 00:08:17.450\nOkay, great.\n\n142\n00:08:18.810 --> 00:08:20.170\nYeah, great, they're done [LAUGH].\n\n143\n00:08:20.170 --> 00:08:23.800\nI was just making sure I didn't have\nany rogue processes running there.\n\n144\n00:08:23.800 --> 00:08:26.330\nSo I've got scripts.\n\n145\n00:08:26.330 --> 00:08:29.540\nI've got some scripts that\nneed a little more umph.\n\n146\n00:08:30.880 --> 00:08:31.930\nI got some scripts that don't.\n\n147\n00:08:33.060 --> 00:08:34.542\nYou get to it, you get to it.\n\n148\n00:08:34.542 --> 00:08:36.519\nYou do something, you do something.\n\n149\n00:08:36.519 --> 00:08:41.820\nHow do I tell the system this\nneeds priority, more priority.\n\n150\n00:08:41.820 --> 00:08:44.771\nAnd this needs less priority.\n\n151\n00:08:44.771 --> 00:08:47.540\nAnd the way we can do that is\nthrough a lovely little command.\n\n152\n00:08:47.540 --> 00:08:50.166\nIt's so beautiful, it's called nice.\n\n153\n00:08:50.166 --> 00:08:52.453\nIt's called being nice.\n\n154\n00:08:52.453 --> 00:08:54.280\nIt's some interesting, fun stuff.\n\n155\n00:08:57.190 --> 00:08:59.848\nI was explaining this to\nJustin before the show.\n\n156\n00:08:59.848 --> 00:09:03.730\nIt's gonna kinda freak you out for\na second because when we talk about\n\n157\n00:09:03.730 --> 00:09:07.830\npriorities, specifically CPU priority,\nhow much CPU should I give this?\n\n158\n00:09:07.830 --> 00:09:09.630\nHow much should I not give it?\n\n159\n00:09:09.630 --> 00:09:11.080\nAnd it's a little backwards,\n\n160\n00:09:11.080 --> 00:09:14.730\nit does the opposite most likely\nof what you think it should do.\n\n161\n00:09:15.740 --> 00:09:20.530\nSo when you spot a process,\nit gets a CPU priority of zero,\n\n162\n00:09:21.590 --> 00:09:27.826\nand this is kinda like the neutral ground,\nthe dead center, the middle, okay?\n\n163\n00:09:27.826 --> 00:09:33.160\nIf I want it to be more priority, Justin,\nwhich way do you think it would go?\n\n164\n00:09:33.160 --> 00:09:35.668\n&gt;&gt; My gut instinct is you go up for\nmore priority and you go down for\n\n165\n00:09:35.668 --> 00:09:36.351\nless priority.\n\n166\n00:09:36.351 --> 00:09:40.894\n&gt;&gt; [LAUGH]\n&gt;&gt; But I,\n\n167\n00:09:40.894 --> 00:09:45.720\nI'm not sure if that's,\nif my gut is telling me right in this.\n\n168\n00:09:45.720 --> 00:09:49.010\n&gt;&gt; And he's right, like,\nyour common logic and\n\n169\n00:09:49.010 --> 00:09:52.160\ncommon sense would say,\nnumbers work this way.\n\n170\n00:09:52.160 --> 00:09:54.910\nThe bigger the number,\nthe more of something you get.\n\n171\n00:09:54.910 --> 00:09:57.030\nThe smaller the number,\nthe less of something you get.\n\n172\n00:09:57.030 --> 00:10:00.870\nAnd if you go down into the negatives\nit's even, you're in a deficit now.\n\n173\n00:10:00.870 --> 00:10:03.900\nIt's even less than zero.\n\n174\n00:10:03.900 --> 00:10:06.200\nRight, so what's nice, though.\n\n175\n00:10:06.200 --> 00:10:08.590\nIt's, flip that idea around in your head.\n\n176\n00:10:08.590 --> 00:10:11.412\nGet it like that and go all 180.\n\n177\n00:10:11.412 --> 00:10:12.970\nAnd now that's how it works.\n\n178\n00:10:12.970 --> 00:10:18.220\nSo if we start off with that zero, we have\na range of priorities that we can use.\n\n179\n00:10:18.220 --> 00:10:24.040\nStarting from the highest being negative\n20 and the lowest being positive 19.\n\n180\n00:10:24.040 --> 00:10:29.340\nSo minus 20 to plus 19,\nplus 19 being the lowest.\n\n181\n00:10:29.340 --> 00:10:32.990\nI know you're gonna make the mistake,\nI almost guarantee it though.\n\n182\n00:10:32.990 --> 00:10:35.550\nI'm using nice, I want more priority.\n\n183\n00:10:35.550 --> 00:10:39.850\nIt's plus 19, this thing runs like a dog,\nwhat is wrong here?\n\n184\n00:10:39.850 --> 00:10:44.810\nMaybe if you try minus 19,\nyou'll get a better output, right?\n\n185\n00:10:44.810 --> 00:10:50.850\nSo, let's take a look at how we can work\nwith the nice command really quickly.\n\n186\n00:10:50.850 --> 00:10:57.339\nWe'll use script one again, and\nI'll say nice, like so, -n.\n\n187\n00:10:57.339 --> 00:10:59.040\nI'll say 10.\n\n188\n00:11:00.240 --> 00:11:04.510\nOkay that's the priority I want it\nto set off with, instead of zero.\n\n189\n00:11:06.290 --> 00:11:10.190\nNow remember, this is plus ten so\nwhat's it gonna do,\n\n190\n00:11:10.190 --> 00:11:12.490\nit's gonna lower the priority.\n\n191\n00:11:13.970 --> 00:11:16.870\nSo when I do that,\nthen I'll just do my regular script one.\n\n192\n00:11:20.020 --> 00:11:22.255\nAnd throw her in the background.\n\n193\n00:11:22.255 --> 00:11:24.288\nThere we go, we've created a script.\n\n194\n00:11:24.288 --> 00:11:30.886\nAnd now, if we do ps-a-o and\ndo things like ppid, pid,\n\n195\n00:11:30.886 --> 00:11:35.972\nni which is gonna show\nus the nice priority,\n\n196\n00:11:35.972 --> 00:11:41.350\nand cmd, whatever the command was,\nand tqr.\n\n197\n00:11:42.460 --> 00:11:44.800\nYou'll see, there's script one.\n\n198\n00:11:44.800 --> 00:11:50.014\nYou'll see there's the nice right there\nletting me know it did set to ten,\n\n199\n00:11:50.014 --> 00:11:56.250\nbut as we said that ain't\nreally what I want, right?\n\n200\n00:11:56.250 --> 00:11:58.000\nI want it to be more priority.\n\n201\n00:11:58.000 --> 00:12:00.640\nIf I want it to be less priority,\nI've done the right thing.\n\n202\n00:12:00.640 --> 00:12:01.820\nI wanted to set it down to ten.\n\n203\n00:12:01.820 --> 00:12:04.600\nI want to set it up to ten,\nI gotta use minus ten.\n\n204\n00:12:04.600 --> 00:12:06.900\nSo the same command.\n\n205\n00:12:06.900 --> 00:12:11.210\nSo let's see here, there we go.\n\n206\n00:12:11.210 --> 00:12:18.170\nIf I use the same command and\njust put minus ten like so and rerun it.\n\n207\n00:12:19.250 --> 00:12:24.320\nAnd we also run into another interesting\nthing, which is interesting.\n\n208\n00:12:24.320 --> 00:12:29.140\nIt's saying Nice cannot set\nNiceness: permission denied.\n\n209\n00:12:29.140 --> 00:12:32.570\nSo, when it comes to setting niceness,\n\n210\n00:12:32.570 --> 00:12:36.770\nany problem when setting the niceness\nwhen it came to lowering the priority.\n\n211\n00:12:36.770 --> 00:12:38.870\nHey, that's great.\n\n212\n00:12:38.870 --> 00:12:44.710\nBut if you want to raise the priority,\nyou have to have sufficient permissions.\n\n213\n00:12:44.710 --> 00:12:46.900\nEven with your own scripts, I believe.\n\n214\n00:12:46.900 --> 00:12:52.100\nYou can only lower the priority, okay.\n\n215\n00:12:52.100 --> 00:12:53.730\nThat's the control you have.\n\n216\n00:12:53.730 --> 00:12:58.260\nIf you wanna raise priority,\nthen you have to have elevated privileges.\n\n217\n00:12:58.260 --> 00:13:02.030\nAnd that's something that a root user or\na sudo user would have to be able to do.\n\n218\n00:13:02.030 --> 00:13:04.260\nNow typically,\nif you are some sort of power user,\n\n219\n00:13:04.260 --> 00:13:06.630\nyou probaby do have that level of control.\n\n220\n00:13:06.630 --> 00:13:08.553\nSo, shouldn't be too much an issue.\n\n221\n00:13:08.553 --> 00:13:12.780\nEspecially if you're writing scripts\nto do jobs on something like a server.\n\n222\n00:13:12.780 --> 00:13:16.520\nYou're logged into that thing,\nchances are you're some sort of admin.\n\n223\n00:13:16.520 --> 00:13:17.450\nSo this shouldn't be a problem.\n\n224\n00:13:17.450 --> 00:13:19.960\nJust sudo your command and off you go.\n\n225\n00:13:19.960 --> 00:13:23.385\nBut if you're some just some standard user\nand you're just kinda writing scripts for\n\n226\n00:13:23.385 --> 00:13:25.540\nyourself, and\nyou start fiddling around with nice.\n\n227\n00:13:26.660 --> 00:13:32.350\nAnd you go, I forgot to put the minus,\nI just wanted to raise priority.\n\n228\n00:13:32.350 --> 00:13:35.410\nIf you've already loaded it,\nyou can't go back up to even zero.\n\n229\n00:13:36.550 --> 00:13:38.270\nBut if you wanted to raise it,\nyou couldn't do it,\n\n230\n00:13:38.270 --> 00:13:41.930\nyou'd have to get an admin\ninvolved to raise that for you.\n\n231\n00:13:41.930 --> 00:13:44.870\nSo just some caveats\nwith working with Nice.\n\n232\n00:13:44.870 --> 00:13:50.380\nYou'll notice that we fire\nNice off at the runtime, okay?\n\n233\n00:13:51.450 --> 00:13:53.388\nThat's also another important thing.\n\n234\n00:13:53.388 --> 00:13:56.400\nI know what I want it to be at the outset,\nand\n\n235\n00:13:56.400 --> 00:14:00.830\nI'm gonna set that as I start the script,\nokay?\n\n236\n00:14:00.830 --> 00:14:03.150\nSo very important thing.\n\n237\n00:14:03.150 --> 00:14:07.730\nI think as far as nicing goes,\nhopefully that makes sense.\n\n238\n00:14:07.730 --> 00:14:11.452\nYou start to understand Nice\nis to set the priority for\n\n239\n00:14:11.452 --> 00:14:14.190\nthe CPU time of whatever the script is.\n\n240\n00:14:14.190 --> 00:14:17.800\nIf I need to raise it,\nit's going to be minus a number.\n\n241\n00:14:17.800 --> 00:14:21.500\nIf I need to lower it,\nit's going to be plus a number.\n\n242\n00:14:21.500 --> 00:14:25.090\nOkay or just the number,\nit's an implied plus, right?\n\n243\n00:14:25.090 --> 00:14:30.520\nAnd if I need to raise it, I have to have\nadministrative privileges to do so, okay?\n\n244\n00:14:31.790 --> 00:14:34.190\n&gt;&gt; So, Daniel, I just wanna make sure,\n\n245\n00:14:34.190 --> 00:14:37.990\nI need elevated privileges if I'm\ngoing below the default of zero.\n\n246\n00:14:37.990 --> 00:14:41.130\nWell, I'm raising the priority,\nbut the number's below zero.\n\n247\n00:14:41.130 --> 00:14:45.598\nAnd then anything above that\nshould be fine, correct?\n\n248\n00:14:45.598 --> 00:14:47.680\n&gt;&gt; Let me make sure I heard\nyour statement correctly.\n\n249\n00:14:49.100 --> 00:14:50.383\nSay it again.\n\n250\n00:14:50.383 --> 00:14:53.464\n&gt;&gt; So if I'm a standard user,\nthe only thing that I\n\n251\n00:14:53.464 --> 00:14:58.408\ncould do is the default zero or lower\nthe priority by increasing the number.\n\n252\n00:14:58.408 --> 00:15:03.490\nI need elevator privileges to go\nbelow zero or elevate the priority.\n\n253\n00:15:03.490 --> 00:15:05.340\n&gt;&gt; Yes, that is absolutely correct.\n\n254\n00:15:05.340 --> 00:15:06.600\nNail on the head.\n\n255\n00:15:06.600 --> 00:15:09.200\nAnytime that you want to raise priority,\n\n256\n00:15:09.200 --> 00:15:12.330\nit is going to require\nelevated privileges.\n\n257\n00:15:12.330 --> 00:15:18.409\nSo if you hit nice, plus 19, right.\n\n258\n00:15:18.409 --> 00:15:22.719\nAnd you go, no, I want it to go up.\n\n259\n00:15:22.719 --> 00:15:24.880\nHey, you couldn't have gone up anyway.\n\n260\n00:15:24.880 --> 00:15:28.600\nBut now that you've set it lower,\nyou can't even get back to square.\n\n261\n00:15:29.630 --> 00:15:32.980\nYou have to build that process and\nstart it over again.\n\n262\n00:15:32.980 --> 00:15:36.640\nThat would be the only way to\nre-elevate it, is to just kill it and\n\n263\n00:15:36.640 --> 00:15:40.460\nthen start it again,\nother than contacting the administrator or\n\n264\n00:15:40.460 --> 00:15:42.960\nusing your administrator\nprivileges to do so.\n\n265\n00:15:42.960 --> 00:15:45.744\nSo just keep that in mind as\nyou work with the nice command.\n\n266\n00:15:45.744 --> 00:15:50.087\nThat also being said,\nI think the only game in town,\n\n267\n00:15:50.087 --> 00:15:55.329\nwhat happens if I start off a script,\nwhat's it's priority?\n\n268\n00:15:55.329 --> 00:15:56.511\nIt's priority is zero.\n\n269\n00:15:56.511 --> 00:15:59.843\nI just crank out a script,\nI go, man, you know what?\n\n270\n00:15:59.843 --> 00:16:03.159\nNot a lot of users going on,\non the server right now.\n\n271\n00:16:03.159 --> 00:16:07.367\nI could really speed things up\nif I were to nice this thing and\n\n272\n00:16:07.367 --> 00:16:10.660\nturn up yeah,\nturn up the wick get it burning.\n\n273\n00:16:11.920 --> 00:16:14.260\nI'd have to kill my process\nmaybe I'm already like,\n\n274\n00:16:14.260 --> 00:16:17.670\nmaybe it's a long process\nit takes days to complete,\n\n275\n00:16:17.670 --> 00:16:22.250\nand I've already started this thing\nI'm day one in to it out of day three.\n\n276\n00:16:22.250 --> 00:16:23.916\nI do not wanna stop that just so\n\n277\n00:16:23.916 --> 00:16:28.510\nI can [INAUDIBLE] it,\nprobably finish at the same, by the same\n\n278\n00:16:28.510 --> 00:16:32.100\ntime it would have if I just continued\nto let it go at that point, right?\n\n279\n00:16:32.100 --> 00:16:36.880\nSo there is a definite, a weighing\nof pros and cons when it comes to,\n\n280\n00:16:36.880 --> 00:16:42.920\nshould I kill this and then start it\nagain with a different priority or\n\n281\n00:16:42.920 --> 00:16:45.070\ncan I just renice.\n\n282\n00:16:45.070 --> 00:16:48.550\nSo renice is another command that will\nallow us to work with the scripts\n\n283\n00:16:48.550 --> 00:16:49.470\npriority.\n\n284\n00:16:49.470 --> 00:16:54.030\nSo if the script is already running I\ncan say yeah it's running with zero but\n\n285\n00:16:54.030 --> 00:16:58.490\nI wanna bump it up while\nit's running to minus ten.\n\n286\n00:16:58.490 --> 00:17:01.610\nI really wanna like I\nsaid turn up the wick.\n\n287\n00:17:01.610 --> 00:17:03.010\nWe can use renice to do that.\n\n288\n00:17:04.340 --> 00:17:06.490\nSo let's take a look at\nhow we implement renice,\n\n289\n00:17:06.490 --> 00:17:10.260\nit's actually very similar\nto the nice command.\n\n290\n00:17:10.260 --> 00:17:13.860\nSo let's do this,\nlet's see is that job still running?\n\n291\n00:17:14.920 --> 00:17:16.020\nNo it's done.\n\n292\n00:17:16.020 --> 00:17:22.720\nSo let's do this, we will start off\nwith nice where was it, there we go.\n\n293\n00:17:23.880 --> 00:17:26.550\nPlus ten, I'm gonna lower the priority.\n\n294\n00:17:26.550 --> 00:17:29.270\nI think, this script is fine,\nI don't care.\n\n295\n00:17:29.270 --> 00:17:30.760\nI fire it off.\n\n296\n00:17:30.760 --> 00:17:32.570\nIt's off to the races.\n\n297\n00:17:32.570 --> 00:17:36.790\nI do my ps command here,\nI see nice is down to 10.\n\n298\n00:17:36.790 --> 00:17:41.776\nAnd then if I come in here,\nI say I wanna renice,\n\n299\n00:17:41.776 --> 00:17:49.014\nremember I'm raising priority so\nI need to Say renice-in,\n\n300\n00:17:49.014 --> 00:17:55.126\nand then I'll say -10,\nnot 19 [LAUGH] -10 like so,\n\n301\n00:17:55.126 --> 00:18:00.502\nand then ./script1 oops, script1.sh.\n\n302\n00:18:00.502 --> 00:18:06.680\nI don't think, I need the PID,\nthat's what I need, this guy over here.\n\n303\n00:18:06.680 --> 00:18:09.960\nSo that's gonna be 25212 minus 10,\n25212, like so.\n\n304\n00:18:11.680 --> 00:18:15.560\nSo there's the PID,\nhit that, it's asking me for\n\n305\n00:18:15.560 --> 00:18:19.560\nmy sudo, And there we go.\n\n306\n00:18:19.560 --> 00:18:22.860\nFailed to give priority, the script\nmust have finished before I got done,\n\n307\n00:18:22.860 --> 00:18:23.730\nlet's try it again.\n\n308\n00:18:23.730 --> 00:18:26.320\nI'm a little too slow on the draw there.\n\n309\n00:18:26.320 --> 00:18:27.670\nSo it's firing off.\n\n310\n00:18:27.670 --> 00:18:28.180\nThere we go.\n\n311\n00:18:28.180 --> 00:18:32.597\nLook at our process ID it is +10.\n\n312\n00:18:32.597 --> 00:18:38.140\nThere's my renice change that to 24692,\n24692, like so.\n\n313\n00:18:38.140 --> 00:18:38.817\nThere we go.\n\n314\n00:18:38.817 --> 00:18:45.550\nProcess ID all priorities\nhere are new priority -10.\n\n315\n00:18:45.550 --> 00:18:52.047\nIf we run that, we see now, it has\nthe minus tag running in there, right?\n\n316\n00:18:52.047 --> 00:18:56.820\nWell that was the, that's running this,\nso I hit the wrong thing.\n\n317\n00:18:56.820 --> 00:18:59.390\nI hit the wrong PID.\n\n318\n00:18:59.390 --> 00:19:03.320\nAlways make sure you get the right\nprocess ID because you could be renicing\n\n319\n00:19:03.320 --> 00:19:05.850\nthe wrong, so\nthis is a really good example of\n\n320\n00:19:05.850 --> 00:19:08.030\nI'm trying to do this very quickly so\nthat job doesn't end.\n\n321\n00:19:08.030 --> 00:19:11.392\nI could go in and slow it down but\nthat you get the idea.\n\n322\n00:19:11.392 --> 00:19:12.200\nThe renice did work.\n\n323\n00:19:12.200 --> 00:19:13.270\nIt did affect something.\n\n324\n00:19:13.270 --> 00:19:14.550\nIt just affected the wrong script.\n\n325\n00:19:14.550 --> 00:19:18.840\nSo, but the idea of what's\nhappening should still come across.\n\n326\n00:19:18.840 --> 00:19:21.490\n&gt;&gt; Now Daniel,\na quick question about this.\n\n327\n00:19:21.490 --> 00:19:26.340\nSo let's say that I had\nadmin privileges and\n\n328\n00:19:26.340 --> 00:19:28.740\nI was like yeah I need to turn\nup the wick on something.\n\n329\n00:19:28.740 --> 00:19:32.540\nI changed the, heightened the priority but\nthen this calls slow downs, or\n\n330\n00:19:32.540 --> 00:19:34.420\nsome kind of detriment.\n\n331\n00:19:34.420 --> 00:19:38.000\nIs it possible that other admins in\nmy organization could come in and\n\n332\n00:19:38.000 --> 00:19:42.580\nalter that using elevator privileges\nto turn down the wick so to speak.\n\n333\n00:19:42.580 --> 00:19:45.340\n&gt;&gt; You're darn right they can,\nbecause they're an admin,\n\n334\n00:19:45.340 --> 00:19:49.550\nif you want something as root, the systems\ngoing to go sure, not a problem.\n\n335\n00:19:49.550 --> 00:19:53.760\nSo if he did crank the wick up and I was\nlike what is slowing the system down?\n\n336\n00:19:53.760 --> 00:19:59.210\nI'm trying to run a process and\nI look and I see wow,\n\n337\n00:19:59.210 --> 00:20:02.380\nI run my PS commands.\n\n338\n00:20:02.380 --> 00:20:05.510\nAnd I see that NI field and\nI see Justin's script.\n\n339\n00:20:05.510 --> 00:20:09.690\nJustin Script.SH is running and\nit's got a nice value of negative 19.\n\n340\n00:20:09.690 --> 00:20:12.520\nI'm gonna go yahoo there brother.\n\n341\n00:20:12.520 --> 00:20:15.210\nI'm gonna need to slow that horse down\njust a bit cuz I need some system\n\n342\n00:20:15.210 --> 00:20:16.730\nprocesses too.\n\n343\n00:20:16.730 --> 00:20:23.340\nAnd I could, in effect, work that over and\nmake it be what I want it to be.\n\n344\n00:20:23.340 --> 00:20:27.610\nHe would probably come and go,\nhey man, did you slow my script down?\n\n345\n00:20:27.610 --> 00:20:28.620\nAnd I would go, yeah, I did.\n\n346\n00:20:28.620 --> 00:20:30.970\nI needed some process okay,\njust making sure that is what happened.\n\n347\n00:20:30.970 --> 00:20:34.040\nBecause I had set it, and it had changed.\n\n348\n00:20:34.040 --> 00:20:35.370\nJust want to make sure\nyou were doing that.\n\n349\n00:20:35.370 --> 00:20:38.250\n&gt;&gt; And I guess that's were it comes in\nas far as within your organization.\n\n350\n00:20:38.250 --> 00:20:42.720\nYou should probably have pre-agreed\nupon kind of thresholds for, right,\n\n351\n00:20:42.720 --> 00:20:44.600\ndon't make it negative 19.\n\n352\n00:20:44.600 --> 00:20:49.024\nEspecially if it's possibly going\nto cause horrible slow downs,\n\n353\n00:20:49.024 --> 00:20:53.500\nor maybe even detriment if you have\nother processes that are business\n\n354\n00:20:53.500 --> 00:20:58.500\nrequirements on that so hey, yeah,\nwe don't care about setting priority.\n\n355\n00:20:58.500 --> 00:21:02.240\nHere are some general guidelines about\nyour priority settings that you we\n\n356\n00:21:02.240 --> 00:21:05.650\nrecommend to keep things just running so,\nright?\n\n357\n00:21:05.650 --> 00:21:08.340\n&gt;&gt; Yeah, very good point,\nJustin, very good points.\n\n358\n00:21:08.340 --> 00:21:12.700\nAll right, now let's move on to a little\nmore of a different type of control which\n\n359\n00:21:12.700 --> 00:21:14.000\nis, Scheduling.\n\n360\n00:21:14.000 --> 00:21:19.800\nI want to schedule a job to run because\nman, goodness knows I don't always want\n\n361\n00:21:19.800 --> 00:21:26.520\nto be behind the keyboard firing off a\ncommand every time I want to do a command.\n\n362\n00:21:26.520 --> 00:21:31.070\nSometimes I just want it to say at\nthis time, at this date do this thing.\n\n363\n00:21:31.070 --> 00:21:34.060\nAnd run and\ndo whatever it is that that does, okay.\n\n364\n00:21:34.060 --> 00:21:38.190\nHow do I control that, there's a few\ndifferent ways you can do that.\n\n365\n00:21:38.190 --> 00:21:42.760\nThe first way we're gonna start of with\nis a little command called AT, right?\n\n366\n00:21:42.760 --> 00:21:46.900\nLets jump on my terminal here real quick\nand clear out and just say Man AT,\n\n367\n00:21:46.900 --> 00:21:54.420\nthere you go has a all sorts of examine,\nor delete jobs for later execution, okay?\n\n368\n00:21:54.420 --> 00:21:58.980\nIt's a great command, if you don't have it\ninstalled run out if you're running some\n\n369\n00:21:58.980 --> 00:22:04.290\nDebian flavor, so\ndo app get install AT, or\n\n370\n00:22:04.290 --> 00:22:08.310\nif you're on a RedHat based system,\nYUM install AT, okay?\n\n371\n00:22:10.330 --> 00:22:13.660\nI found that on my system it actually was\nnot installed by default because there's\n\n372\n00:22:13.660 --> 00:22:16.720\nother scheduling utilities\nthat probably are.\n\n373\n00:22:16.720 --> 00:22:20.170\nSo if it's not and you do like this,\nyou see, you're like, man that AT command\n\n374\n00:22:20.170 --> 00:22:24.210\nreally worked out for you, I like how\nthat worked and I want to use that.\n\n375\n00:22:24.210 --> 00:22:27.160\nYou just gotta, you might have to\ninstall it, just keep that aware.\n\n376\n00:22:27.160 --> 00:22:31.170\nSo come out of here and what we're gonna\ndo, what it does is basically create a job\n\n377\n00:22:31.170 --> 00:22:35.590\nqueue that says,\nyou're the jobs that I want to run here.\n\n378\n00:22:35.590 --> 00:22:38.790\nThe times that I wish I could run and\nkeeps the queue of that basically a list\n\n379\n00:22:38.790 --> 00:22:43.600\nof times and dates and commands that\nneeds to run that set times and dates and\n\n380\n00:22:43.600 --> 00:22:48.060\nthen executes them when the system\nclock rings through, okay?\n\n381\n00:22:48.060 --> 00:22:53.150\nVery simple idea but very helpful for\nus when I need to run\n\n382\n00:22:54.340 --> 00:22:59.130\nsystem updates at 3 AM when no\none's on the system, right?\n\n383\n00:22:59.130 --> 00:23:02.940\nI'm sure as heck snoozing like a bear\nin the woods at that point in time,\n\n384\n00:23:02.940 --> 00:23:05.590\nhopefully I am, if I'm not,\nsomething's gone horribly wrong.\n\n385\n00:23:05.590 --> 00:23:07.290\nI'm up, and\nI'm in the server closet [LAUGH], and\n\n386\n00:23:07.290 --> 00:23:09.590\nmy life has gone horrible [LAUGH].\n\n387\n00:23:09.590 --> 00:23:12.460\nSo, but normally, that's when I'd\nwant to run those updates, 3 AM,\n\n388\n00:23:12.460 --> 00:23:14.200\nsometime I'm not gonna be there.\n\n389\n00:23:14.200 --> 00:23:18.030\nI can use AT commands to, or\nAT tables to make that happen.\n\n390\n00:23:19.290 --> 00:23:20.130\nSo let's see here.\n\n391\n00:23:21.720 --> 00:23:26.630\nThe one caveat about AT is\nit's a one time schedule.\n\n392\n00:23:26.630 --> 00:23:27.720\nAll right.\n\n393\n00:23:27.720 --> 00:23:29.930\nSo it doesn't reoccur.\n\n394\n00:23:29.930 --> 00:23:34.285\nI say I need this from tomorrow\nat 3 AM bing I put it in AT.\n\n395\n00:23:34.285 --> 00:23:35.647\nAT runs it.\n\n396\n00:23:35.647 --> 00:23:36.670\nIt's done.\n\n397\n00:23:36.670 --> 00:23:40.270\nIt doesn't go well everyday\nat 3 AM it does this or\n\n398\n00:23:40.270 --> 00:23:42.740\nevery week at 3 AM it does this.\n\n399\n00:23:42.740 --> 00:23:44.890\nYou pop something in AT for later use.\n\n400\n00:23:44.890 --> 00:23:49.970\nThis is a real quick and\ndirty Way to schedule a command, okay?\n\n401\n00:23:49.970 --> 00:23:53.102\nIt checks jobs every 60 seconds.\n\n402\n00:23:53.102 --> 00:23:58.532\nSo, it just looks in its cue every minute\nto see is there any job for me to run.\n\n403\n00:23:58.532 --> 00:24:02.948\nIf there is, run it,\nif not Obviously nothing happens, okay?\n\n404\n00:24:02.948 --> 00:24:09.420\nSo that's the default time interval\nin which it does its thing.\n\n405\n00:24:09.420 --> 00:24:13.040\nSo let's take a look at at,\nhow we can make it actually do something.\n\n406\n00:24:13.040 --> 00:24:19.775\nWe'll use Google Script one yet\nagain, we just say at-f script,\n\n407\n00:24:19.775 --> 00:24:25.319\nyeah, script 1-h, and\nthen we give it a top, okay?\n\n408\n00:24:25.319 --> 00:24:26.180\nWhat top?\n\n409\n00:24:26.180 --> 00:24:31.402\nI can say, actually multiple\ndifferent acceptable time formats.\n\n410\n00:24:31.402 --> 00:24:36.291\nIt's really good at taking just\nabout any kind of time format,\n\n411\n00:24:36.291 --> 00:24:39.620\nyou can think of or\nthat you may use, okay?\n\n412\n00:24:39.620 --> 00:24:44.526\nSo I can say 11:45 PM and\nput that in and it will go,\n\n413\n00:24:44.526 --> 00:24:48.164\nokay, 11:45 PM that will happen.\n\n414\n00:24:48.164 --> 00:24:53.913\nI can use a 24 hour time,\nmaybe you're a military person,\n\n415\n00:24:53.913 --> 00:24:57.880\nyou like that 24 timage, 22:45.\n\n416\n00:24:57.880 --> 00:25:02.038\nGreat, who knows that's 11:45 PM, okay?\n\n417\n00:25:02.038 --> 00:25:07.302\nYou can use,\nthese three can be very handy, noon,\n\n418\n00:25:07.302 --> 00:25:12.087\nmid-day, now, that kind of thing, right?\n\n419\n00:25:12.087 --> 00:25:16.879\nThat kind of verbiage, you can also do\nstandard like double month month, day day,\n\n420\n00:25:16.879 --> 00:25:17.570\nyear year.\n\n421\n00:25:17.570 --> 00:25:22.254\nMonth month, day day, year year year,\nthat kind of thing, takes that.\n\n422\n00:25:22.254 --> 00:25:24.957\nAnd I think any kind of separator that you\nwant, if you wanna jumble it all together,\n\n423\n00:25:24.957 --> 00:25:25.961\nif you wanna throw in slashes.\n\n424\n00:25:25.961 --> 00:25:29.808\nIf you wanna throw in periods as\nseparators, typical standard dating\n\n425\n00:25:29.808 --> 00:25:33.210\nsystems that you might run across\nas far as that kind of stuff.\n\n426\n00:25:33.210 --> 00:25:40.026\nIt takes just about everything,\nI think it'll even take April 1st, 2018.\n\n427\n00:25:40.026 --> 00:25:45.036\nOkay, boom, April 1st, 2018 rolls around,\nit's gonna fire off that command, right?\n\n428\n00:25:45.036 --> 00:25:48.599\nSo that's the time thing,\nso with my example,\n\n429\n00:25:48.599 --> 00:25:51.994\nI could say our time right now is 10:46.\n\n430\n00:25:51.994 --> 00:25:56.900\nSo I'll say like 10:47 AM, there we go.\n\n431\n00:25:56.900 --> 00:26:02.990\nMorning commands will be executed by\nbinshjob3 at Tuesday, October 10th.\n\n432\n00:26:02.990 --> 00:26:07.261\nSo it took the rest of the date and time\nto mean you mean today because obviously,\n\n433\n00:26:07.261 --> 00:26:08.540\nI cannot run in the past.\n\n434\n00:26:08.540 --> 00:26:11.915\nYou did not define anything\nother than today, so\n\n435\n00:26:11.915 --> 00:26:15.793\nyour time must mean todays date and\nthis specific time.\n\n436\n00:26:15.793 --> 00:26:18.120\nSo just keep that in mind as\nyou start playing around.\n\n437\n00:26:18.120 --> 00:26:19.509\nDefinitely use at,\n\n438\n00:26:19.509 --> 00:26:24.504\nand a couple ways, check out\nthe different formats, see what you like.\n\n439\n00:26:24.504 --> 00:26:28.571\nSee if the way you do it is support by at,\nso\n\n440\n00:26:28.571 --> 00:26:32.890\nthat it makes your life\na little bit easier.\n\n441\n00:26:32.890 --> 00:26:36.629\nIf we wanted to see what's happening with\nat, I wanna see what's in the queue.\n\n442\n00:26:36.629 --> 00:26:43.645\nI think I can just do atq like that and\nsee, well I'm seeing nothing.\n\n443\n00:26:43.645 --> 00:26:45.380\nIt should have an ID number.\n\n444\n00:26:45.380 --> 00:26:46.410\nMaybe you know what?\n\n445\n00:26:46.410 --> 00:26:49.979\nMy script already ran or\nit hasn't run yet, or it's running now.\n\n446\n00:26:49.979 --> 00:26:53.414\nI wonder if jobs will show anything.\n\n447\n00:26:53.414 --> 00:26:54.480\nYeah, I love to mess that up don't I?\n\n448\n00:26:54.480 --> 00:26:56.538\natq, but atq should do it.\n\n449\n00:26:56.538 --> 00:27:01.870\nYou do man at again, I think you'll\nsee atq as something in here.\n\n450\n00:27:01.870 --> 00:27:05.638\nThere we go, list the users pending\njobs unless the user is the super user.\n\n451\n00:27:05.638 --> 00:27:08.570\nIn that case, everyone's jobs are listed.\n\n452\n00:27:08.570 --> 00:27:10.277\nGood to know, right?\n\n453\n00:27:10.277 --> 00:27:14.657\nThe format of the output, one for\neach job is job number, date, hour key and\n\n454\n00:27:14.657 --> 00:27:15.350\nusername.\n\n455\n00:27:15.350 --> 00:27:18.375\nSo as we look at that,\nyou get that nice format, right?\n\n456\n00:27:18.375 --> 00:27:22.676\nSo I'm pretty sure what's happened\nis my command ran and it's done.\n\n457\n00:27:22.676 --> 00:27:24.753\nAnd that's why I don't see anything\nthat's already is running.\n\n458\n00:27:24.753 --> 00:27:27.600\nSo let's try it again,\nlet's see if we can check that.\n\n459\n00:27:27.600 --> 00:27:32.668\nWe're gonna run my job this time,\nI'll put it in F49 and\n\n460\n00:27:32.668 --> 00:27:36.090\nnow I should do atq, there is my queue.\n\n461\n00:27:36.090 --> 00:27:41.880\nThere's the job number, the time,\nthe date, and who's running it, right?\n\n462\n00:27:41.880 --> 00:27:45.650\nAll the stuff we saw back in that main\npage, so very, very interesting stuff.\n\n463\n00:27:45.650 --> 00:27:50.435\nIt's a great way to work with it,\nI think I've got some other information.\n\n464\n00:27:50.435 --> 00:27:54.143\nYeah, at sends error\nmessages through Sendmail.\n\n465\n00:27:54.143 --> 00:27:57.905\nSo if you don't have Sendmail installed,\n\n466\n00:27:57.905 --> 00:28:01.986\nerror messages are gonna\nkinda wig out on you.\n\n467\n00:28:01.986 --> 00:28:04.819\nYou could probably redirect\nthat using something else, but\n\n468\n00:28:04.819 --> 00:28:08.550\njust wanted you to be aware by default\nthat's what it's doing with that stuff.\n\n469\n00:28:08.550 --> 00:28:10.983\nWhat else do we wanna talk about?\n\n470\n00:28:10.983 --> 00:28:14.484\nYou can suppress that email\nsending with -M, right?\n\n471\n00:28:14.484 --> 00:28:19.919\nSo if we are back in our man at,\nwe look down through here.\n\n472\n00:28:19.919 --> 00:28:24.590\nThere's this right here,\nnever Sendmail to the user, right?\n\n473\n00:28:24.590 --> 00:28:31.300\nSo just proves through what at can do,\nit's not as extremely complex system.\n\n474\n00:28:31.300 --> 00:28:33.735\nBut if we're doing quick and dirty job,\n\n475\n00:28:33.735 --> 00:28:38.329\nsketching is actually really convenient\nand easy to use, so I like it a lot.\n\n476\n00:28:38.329 --> 00:28:43.127\n&gt;&gt; Now Daniel, this is making\nessentially a giant to do list of things\n\n477\n00:28:43.127 --> 00:28:45.710\nthat I want to happen once, right?\n\n478\n00:28:45.710 --> 00:28:48.220\nLet me scroll down these\nthings that need to happen.\n\n479\n00:28:48.220 --> 00:28:52.789\nAnd so it's semi-automatic,\nsemi-manual, but what if I mess up, and\n\n480\n00:28:52.789 --> 00:28:55.723\nI'm like and I schedule sudo rm-rf-\n&gt;&gt; [LAUGH]\n\n481\n00:28:55.723 --> 00:28:57.090\n&gt;&gt; For next Tuesday?\n\n482\n00:28:57.090 --> 00:29:00.524\nIs there any way to grab it out of the\nqueue, mark it off the list and say, no,\n\n483\n00:29:00.524 --> 00:29:01.730\nI didn't mean to do that?\n\n484\n00:29:01.730 --> 00:29:02.710\n&gt;&gt; Totes ma goats, bro.\n\n485\n00:29:02.710 --> 00:29:03.726\nYou totally can.\n\n486\n00:29:03.726 --> 00:29:05.930\nAll you have to do is delete the command.\n\n487\n00:29:05.930 --> 00:29:09.540\nIt is atrm, that's right, atrm.\n\n488\n00:29:09.540 --> 00:29:13.678\nSo I got my at removed the job, right?\n\n489\n00:29:13.678 --> 00:29:18.089\nSo all we have to do is find the job ID,\nwhich we can do with atq.\n\n490\n00:29:18.089 --> 00:29:22.224\nAnd once we have that job ID,\nwe can do atrm and remove that job ID.\n\n491\n00:29:22.224 --> 00:29:25.979\nSo you do completely hose things out.\n\n492\n00:29:25.979 --> 00:29:32.550\natrm, job ID from the atq output, and\nthat job will be outskies, it'll be done.\n\n493\n00:29:32.550 --> 00:29:35.204\nYou don't have to worry about it anymore.\n\n494\n00:29:35.204 --> 00:29:37.507\n[LAUGH] So the remove my entire\ndirectory structure of commands.\n\n495\n00:29:37.507 --> 00:29:41.024\nProbably not the best thing you wanna run\nat any time, unless you're a formatter.\n\n496\n00:29:41.024 --> 00:29:43.706\n[LAUGH]\n&gt;&gt; Yeah, woops, totally my bad.\n\n497\n00:29:43.706 --> 00:29:48.020\n&gt;&gt; Yeah.\n&gt;&gt; Now we had this run once thing.\n\n498\n00:29:48.020 --> 00:29:54.380\nI can say my parents have some money, some\ncomputers, and I have to manage those.\n\n499\n00:29:54.380 --> 00:29:57.980\nI don't want to have to sh like\nevery Tuesday to run updates.\n\n500\n00:29:57.980 --> 00:30:02.820\nI could schedule this using at for\nevery Tuesday for the next six months.\n\n501\n00:30:02.820 --> 00:30:08.874\nIs there any way to have recurring\njobs that more are on a schedule?\n\n502\n00:30:08.874 --> 00:30:11.014\nI know we can't do that with at,\nbut is there something like that?\n\n503\n00:30:11.014 --> 00:30:13.310\n&gt;&gt; Yeah, your prayers have been answered,\nmy friend.\n\n504\n00:30:13.310 --> 00:30:17.790\nDefinitely, we definitely have\nthe ability to schedule jobs that recur.\n\n505\n00:30:17.790 --> 00:30:20.117\nSomething that's gonna\nhappen every Tuesday.\n\n506\n00:30:20.117 --> 00:30:24.520\nSomething that's gonna happen every\n4th of July or something like that.\n\n507\n00:30:24.520 --> 00:30:28.370\nWe can make that happen,\nthat's a utility called Chron.\n\n508\n00:30:28.370 --> 00:30:32.960\nI will tell you this, about Cron,\nit's quite a bit of a beast.\n\n509\n00:30:32.960 --> 00:30:36.854\nIt's gonna take a little more than the 12\nseconds we have left in this episode to\n\n510\n00:30:36.854 --> 00:30:37.840\nunpack that beast.\n\n511\n00:30:37.840 --> 00:30:40.724\nSo I think we're headed into\none of our famous part twos.\n\n512\n00:30:40.724 --> 00:30:44.295\n&gt;&gt; Well I'm definitely gonna wait there,\ncuz this whole SSH into and\n\n513\n00:30:44.295 --> 00:30:47.732\npseudo-app update, pseudo-app upgrade-\n&gt;&gt; [LAUGH]\n\n514\n00:30:47.732 --> 00:30:49.269\n&gt;&gt; But every Tuesday is getting a little\n\n515\n00:30:49.269 --> 00:30:51.261\nold, so\nI'm gonna I need to take notes on this.\n\n516\n00:30:51.261 --> 00:30:51.997\n&gt;&gt; I'm gonna help you out.\n\n517\n00:30:51.997 --> 00:30:53.743\n&gt;&gt; And hopefully you will too.\n\n518\n00:30:53.743 --> 00:30:57.228\nDefinitely join us back with well\nscheduling things with Cron as we\n\n519\n00:30:57.228 --> 00:30:59.600\ncontinue our Linux shell scripting basics.\n\n520\n00:30:59.600 --> 00:31:01.055\nBut it does look like\nwe're out of time for\n\n521\n00:31:01.055 --> 00:31:03.190\nthis episode, so we're gonna go ahead and\nwrap this one up.\n\n522\n00:31:03.190 --> 00:31:06.340\nSigning off for ITPro.TV,\nI've been your host Justin Dennison.\n\n523\n00:31:06.340 --> 00:31:07.173\n&gt;&gt; And I'm Daniel Lowrie.\n\n524\n00:31:07.173 --> 00:31:08.382\n&gt;&gt; And we'll see you next time.\n\n525\n00:31:08.382 --> 00:31:15.638\n[MUSIC]\n\n526\n00:31:15.638 --> 00:31:18.721\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "237759698"
        },
        {
          "description": "In this episode, Daniel and Justin continue looking at\nscript control, this time walking you through job scheduling through\nthe use of the cron/crontab system as well as anacron for running\njobs that missed their time-slot.",
          "length": "1469",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-2-script_control_pt_2-101017-PGM.00_24_15_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-2-script_control_pt_2-101017-PGM.00_24_15_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxshellscriptingbasics/techskills-linuxshellscriptingbasics-8-1-2-script_control_pt_2-101017-PGM.00_24_15_00.Still001-sm.jpg",
          "title": "Script Control Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:06.873\nWelcome to ITPRO.TV I'm your host-\n&gt;&gt; [CROSSTALK]\n\n2\n00:00:06.873 --> 00:00:08.372\n[MUSIC]\n\n3\n00:00:08.372 --> 00:00:12.291\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.291 --> 00:00:16.450\n&gt;&gt; Greetings, everyone, and welcome to\nanother exciting episode of ITPRO.TV.\n\n5\n00:00:16.450 --> 00:00:17.660\nI’m your host Justin Dennison and\n\n6\n00:00:17.660 --> 00:00:21.450\nwe’re back with a part two\non controlling scripts.\n\n7\n00:00:21.450 --> 00:00:25.701\nIn particular, Daniel promised me he’s\ngonna help me manage my [INAUDIBLE]\n\n8\n00:00:25.701 --> 00:00:27.090\ncomputers\n&gt;&gt; [LAUGH]\n\n9\n00:00:27.090 --> 00:00:30.050\n&gt;&gt; On a scheduled basis so, luckily we\n\n10\n00:00:30.050 --> 00:00:33.550\nhave Mr. Daniel Lowrie back in the studio\nto tell us what that’s all about.\n\n11\n00:00:33.550 --> 00:00:36.060\n&gt;&gt; Yeah, not a problem,\nwe definitely left off with\n\n12\n00:00:36.060 --> 00:00:40.150\nsome script control in our last episode\nand we looked at the AT command.\n\n13\n00:00:40.150 --> 00:00:41.808\nWe're scheduling one time jobs so,\n\n14\n00:00:41.808 --> 00:00:44.060\nI want this to run at\na certain time that's great.\n\n15\n00:00:44.060 --> 00:00:48.358\nAnd as Justin said, that's fine\nif you want to update his Mom and\n\n16\n00:00:48.358 --> 00:00:53.691\nDad's Linux system today or tomorrow or\nthe end of this week because he doesn't\n\n17\n00:00:53.691 --> 00:00:59.203\nhave to do it himself, that's great,\nAT works fantastic for that kind of thing.\n\n18\n00:00:59.203 --> 00:01:04.407\nWhat if I'm What if I wanna update\nthe system every Saturday at 3 PM,\n\n19\n00:01:04.407 --> 00:01:06.310\nhow do I do that?\n\n20\n00:01:06.310 --> 00:01:11.456\nAnd as I mentioned at the end of the show,\nits cron that allows us to do that,\n\n21\n00:01:11.456 --> 00:01:14.255\nthe cron daemon that runs in our system.\n\n22\n00:01:14.255 --> 00:01:18.487\nAnd its a very important thing and\nsomething you should definitely get your\n\n23\n00:01:18.487 --> 00:01:22.430\nhead around, because it will make\nyour life a whole lot easier.\n\n24\n00:01:22.430 --> 00:01:26.170\nI know Justin is just chomping on\nthe things like tell me more about this\n\n25\n00:01:26.170 --> 00:01:30.290\nquantine in which you speak because\nI want to be able to do that.\n\n26\n00:01:30.290 --> 00:01:32.630\nAnd you know what I want you guys\nto be able to do that as well.\n\n27\n00:01:32.630 --> 00:01:36.880\nBecause it is something as administrators\nto the system we would want to do.\n\n28\n00:01:36.880 --> 00:01:38.658\nAnd if I've created these scripts or\n\n29\n00:01:38.658 --> 00:01:41.709\nI've got something in the system\nthat I want at a certain time.\n\n30\n00:01:41.709 --> 00:01:45.552\nChron is gonna be my go to thing,\nespecially if it's a repetitive action\n\n31\n00:01:45.552 --> 00:01:49.950\nover and over and over again,\nthat happens every so often, okay?\n\n32\n00:01:49.950 --> 00:01:54.980\nLet's talk about chron,\nchron has a job scheduler,\n\n33\n00:01:54.980 --> 00:01:57.840\nit has a list of jobs\nthat you give it to do,\n\n34\n00:01:57.840 --> 00:02:01.460\nit'll keep a list of that, we can take\na look at that, we can create new entries.\n\n35\n00:02:01.460 --> 00:02:04.440\nObviously cuz without\nthat what good is it.\n\n36\n00:02:04.440 --> 00:02:08.990\nSo we're gonna look at that and we're\ngonna look at some of the formatting,\n\n37\n00:02:08.990 --> 00:02:14.830\nthe structure of said entry so that we do\nit correctly and that our jobs will run.\n\n38\n00:02:14.830 --> 00:02:18.380\nSo let's start off with listing\njobs in the cron table,\n\n39\n00:02:18.380 --> 00:02:21.660\nlet's call it the crontab,\nrather than the cron table.\n\n40\n00:02:21.660 --> 00:02:25.130\nAnd inside the cron table you'll\nsee all the jobs for yourself,\n\n41\n00:02:25.130 --> 00:02:27.730\nif you're a root user\nyou list the jobs out.\n\n42\n00:02:27.730 --> 00:02:31.110\nIt should say all the jobs for root or\n\n43\n00:02:31.110 --> 00:02:35.640\nwhoever you're logged in as, I'm not sure,\nI haven't delved into cron too deeply.\n\n44\n00:02:35.640 --> 00:02:40.121\nI use a lot of tools very basically\nbecause when you start getting into\n\n45\n00:02:40.121 --> 00:02:43.764\nthe minutiae of how you can twist and\nturn these things.\n\n46\n00:02:43.764 --> 00:02:47.828\nThat's typically where things go awry so\nI like to keep things simple and easy,\n\n47\n00:02:47.828 --> 00:02:50.678\nespecially for you out there,\nwho is maybe new to cron,\n\n48\n00:02:50.678 --> 00:02:54.400\nI don't want to give you too much to\nchew on before you're ready, okay?\n\n49\n00:02:54.400 --> 00:02:58.280\nSo, we're gonna keep it super easy, we'll\nlook at our jobs that we schedule for\n\n50\n00:02:58.280 --> 00:02:59.320\nourselves.\n\n51\n00:02:59.320 --> 00:03:01.550\nSo, if I look at my screen,\nlet's take a look down here and\n\n52\n00:03:01.550 --> 00:03:05.420\nI say crontab Dash l for list.\n\n53\n00:03:06.590 --> 00:03:09.060\nHit Enter, I get this file and\n\n54\n00:03:09.060 --> 00:03:14.280\nyou'll notice at the bottom,\nI've got one entry for right here.\n\n55\n00:03:15.900 --> 00:03:19.660\nAnd it's got some crazy number\nthing going on with some stars.\n\n56\n00:03:19.660 --> 00:03:24.720\nAnd obviously it's some directory\npath to a script that I have.\n\n57\n00:03:24.720 --> 00:03:30.350\nOkay, but all that crazy number\nbusiness is basically us telling\n\n58\n00:03:30.350 --> 00:03:35.940\nthe at this time I want you to\nrun this command, all right?\n\n59\n00:03:35.940 --> 00:03:40.020\nAnd if we just understand\nwhat that time format is.\n\n60\n00:03:40.020 --> 00:03:41.330\nWell, then we can create our own,\n\n61\n00:03:41.330 --> 00:03:46.960\nwe can just jump into this file and create\nthe entry to our little heart's content.\n\n62\n00:03:46.960 --> 00:03:52.774\nAll right, if we want to create\nan entry you do crontab-e like so.\n\n63\n00:03:52.774 --> 00:03:57.340\nAll right, hit Enter and\nit will drop you into your default, etc.\n\n64\n00:03:57.340 --> 00:04:02.090\nIf it is the first time you've run cron,\nit will ask you which editor you wish\n\n65\n00:04:02.090 --> 00:04:05.860\nto use, this isn't the first\ntime I've run con obviously.\n\n66\n00:04:05.860 --> 00:04:10.140\nSo if you want, like I said if this\nis your first time, you like the vi,\n\n67\n00:04:10.140 --> 00:04:15.500\nyou like vin, you're somehow a e-max\nlover, if that's an option there.\n\n68\n00:04:15.500 --> 00:04:21.630\nIf it shows up in the option you can grab\nit, I have become a nano Prestolite.\n\n69\n00:04:21.630 --> 00:04:25.373\nSo I'm using nano, I know it's\njust a shake in the [INAUDIBLE].\n\n70\n00:04:25.373 --> 00:04:25.980\n&gt;&gt; I am a VM user all the way.\n\n71\n00:04:25.980 --> 00:04:29.070\n&gt;&gt; [LAUGH]\n&gt;&gt; It's actually kind of improbable\n\n72\n00:04:29.070 --> 00:04:31.530\ncuz there's times where I'm\ntrying to use VM key bindings and\n\n73\n00:04:31.530 --> 00:04:32.542\nstuff like Microsoft Word.\n\n74\n00:04:32.542 --> 00:04:33.300\n&gt;&gt; [LAUGH]\n&gt;&gt; And so\n\n75\n00:04:33.300 --> 00:04:37.830\nI'm like you're at the end of the line,\nI'm just hitting zeroes and g's and stuff,\n\n76\n00:04:37.830 --> 00:04:39.245\nI don't know what to do about it.\n\n77\n00:04:39.245 --> 00:04:39.990\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n78\n00:04:39.990 --> 00:04:41.860\nmaybe they'll bring\nthose in at some point.\n\n79\n00:04:41.860 --> 00:04:42.890\n&gt;&gt; Yeah, maybe they will but\n\n80\n00:04:42.890 --> 00:04:47.620\nJustin is definitely drinking drunk\nthe VIM Kool-Aid and gladfully.\n\n81\n00:04:47.620 --> 00:04:50.520\nSo there's nothing wrong with them,\nI've used VIM for quite some time,\n\n82\n00:04:51.820 --> 00:04:56.260\nit's just not right for me when\nnano came along, it's right for me.\n\n83\n00:04:56.260 --> 00:05:00.313\nSo I used nano, there you go,\nenough of our proselytizing,\n\n84\n00:05:00.313 --> 00:05:03.580\nwe'll get back to the task\nat hand which is cron.\n\n85\n00:05:03.580 --> 00:05:06.452\nSo if we look down at\nmy little entry here,\n\n86\n00:05:06.452 --> 00:05:10.980\nI manually created this entry,\nokay, so just keep that in mind.\n\n87\n00:05:12.190 --> 00:05:17.050\nWe have the formatting, and actually in\nthis common section gives you a lot of\n\n88\n00:05:17.050 --> 00:05:21.580\ninformation about using crontab, okay.\n\n89\n00:05:21.580 --> 00:05:24.720\nSo each task to run has been\ndefined through the single line\n\n90\n00:05:24.720 --> 00:05:28.530\nindicating the different fields on the\ntasks we run and what command to run for\n\n91\n00:05:28.530 --> 00:05:32.370\nthe task, time, and he gives you\nsome information about the time.\n\n92\n00:05:32.370 --> 00:05:38.190\nThat's really what we need to know,\nminute is M, hour H, day of month\n\n93\n00:05:38.190 --> 00:05:43.810\nthe month and the day of week or\nuse a star in the field sport any, okay?\n\n94\n00:05:45.260 --> 00:05:49.090\nSo notice that task will be started\n\n95\n00:05:49.090 --> 00:05:52.540\nbased on the comp system's [INAUDIBLE]\nnotion of the time and time zones.\n\n96\n00:05:52.540 --> 00:05:54.980\nSo just keep that in mind and\n\n97\n00:05:54.980 --> 00:05:59.070\nthen the opposite crontabs [INAUDIBLE]\nsent through the email to the user.\n\n98\n00:05:59.070 --> 00:06:03.520\nTo the user the crontab file belongs\nto unless redirected but, again,\n\n99\n00:06:03.520 --> 00:06:05.120\nwe're keeping it as simple as possible.\n\n100\n00:06:05.120 --> 00:06:09.250\nAnd then even some nicely gives\nus an example of that itself.\n\n101\n00:06:10.430 --> 00:06:16.230\nFor 5 am every week all you have to do is\n\n102\n00:06:16.230 --> 00:06:20.160\nsay 05** cuz that's day of month and\nmonth.\n\n103\n00:06:20.160 --> 00:06:25.260\nAnd since it's any day of month,\nany month, I put the star there, right?\n\n104\n00:06:25.260 --> 00:06:31.200\nAnd then one, which is that day of week so\nthat would be?\n\n105\n00:06:31.200 --> 00:06:36.990\nIt is saying for day of week we\nwant to run that's 5 am every week.\n\n106\n00:06:36.990 --> 00:06:40.070\nSo it's just whatever the first day of\nthe week is so that's probably Sunday or\n\n107\n00:06:40.070 --> 00:06:41.460\nMonday, right, probably Sunday.\n\n108\n00:06:43.150 --> 00:06:47.320\nTar and it's running a tar make a backup\nthere you go, very simple format.\n\n109\n00:06:47.320 --> 00:06:50.483\nHere's mine I've got 15 three,\nfour, seven star.\n\n110\n00:06:50.483 --> 00:06:54.383\nSo, minute 15th minute of 3 am so\n\n111\n00:06:54.383 --> 00:07:00.365\n3:15 am I want you to run on\nthe fourth of the seventh\n\n112\n00:07:00.365 --> 00:07:06.020\nmonth which is July so\nJuly 4th at 3:15 am.\n\n113\n00:07:06.020 --> 00:07:07.280\nRun and\n\n114\n00:07:07.280 --> 00:07:10.730\nregardless of what day of week that falls\non, any day of the week it could fall on.\n\n115\n00:07:10.730 --> 00:07:14.690\nThat's why I put the star there,\nrun this script, okay?\n\n116\n00:07:14.690 --> 00:07:17.420\nThat's the basic format\n\n117\n00:07:17.420 --> 00:07:21.550\nof how to say I want my job to\nrun at such and such a time.\n\n118\n00:07:21.550 --> 00:07:26.040\nNow with this pattern if end up with the\nstar for day of week that would only occur\n\n119\n00:07:26.040 --> 00:07:31.230\nif the day of week coincided with\nJuly 4th and 3:15 in the a.m.\n\n120\n00:07:31.230 --> 00:07:35.890\nFor instance if July 4th landed\non the first day of the week.\n\n121\n00:07:35.890 --> 00:07:39.394\nIt would run then but if it was the second\nday of week it wouldn't run right?\n\n122\n00:07:39.394 --> 00:07:41.890\n&gt;&gt; Correct, so if we put a value there.\n\n123\n00:07:41.890 --> 00:07:45.287\nOne or two or whatever,\nit would, like Justin said,\n\n124\n00:07:45.287 --> 00:07:48.468\nit would only run if that value rung true,\nright?\n\n125\n00:07:48.468 --> 00:07:52.026\nSo if you say one, and that one is Sunday,\n\n126\n00:07:52.026 --> 00:07:57.025\nonly if July 4th falls on a Sunday,\nwill this script run.\n\n127\n00:07:57.025 --> 00:08:01.323\nOtherwise I have to put a star there to\nlet it know I don't care what time or\n\n128\n00:08:01.323 --> 00:08:06.270\nday or whatever that field stands for is,\nI want you to run regardless of that fact.\n\n129\n00:08:06.270 --> 00:08:08.280\nSo you just put a little\nstar as a placeholder,\n\n130\n00:08:08.280 --> 00:08:09.590\nletting it know that anything is okay.\n\n131\n00:08:09.590 --> 00:08:11.990\nAll right and\nthen it just runs the script.\n\n132\n00:08:11.990 --> 00:08:16.310\nSo it will just wait for July 4th of\nnext year and this script will run,\n\n133\n00:08:16.310 --> 00:08:18.680\nso I am probably,\nI mean it doesn't hurt anything,\n\n134\n00:08:18.680 --> 00:08:19.780\nI could leave that in there,\nand that's fine.\n\n135\n00:08:19.780 --> 00:08:22.760\nYou just probably want to keep an eye\non the job to make sure that they\n\n136\n00:08:22.760 --> 00:08:23.910\nrun correctly.\n\n137\n00:08:23.910 --> 00:08:26.940\nAnother little caveat is this works\nin the 24 hours time usually.\n\n138\n00:08:28.890 --> 00:08:33.820\nSo if I wanted to run at 3:15 PM,\nI would have to say\n\n139\n00:08:33.820 --> 00:08:39.710\nfifteen fifteen, the minutes being 15 and\nthe hour being the 15th hour.\n\n140\n00:08:39.710 --> 00:08:44.260\nRemember 24 hour time is whatever time\nit is so 15 minus 12 equals three.\n\n141\n00:08:44.260 --> 00:08:48.130\nThat lets me what that PM session is, so\n\n142\n00:08:48.130 --> 00:08:51.700\nanything after noon becomes 13,\n14, 15, 16 so on.\n\n143\n00:08:51.700 --> 00:08:54.220\nWe all understand 24 hour time hopefully.\n\n144\n00:08:54.220 --> 00:08:56.230\nBut keep that in mind as\nyou write your scripts.\n\n145\n00:08:56.230 --> 00:09:01.130\nIf I go in there and put 3:15 well,\nit's gonna run a 3:15 AM.\n\n146\n00:09:01.130 --> 00:09:04.690\nIf that's not what I want it to run\nI gotta remember it's 24 hour time.\n\n147\n00:09:04.690 --> 00:09:07.240\nIt doesn't take AM PM format.\n\n148\n00:09:07.240 --> 00:09:13.570\nI gotta put 15:15 so\nthat it runs at 3:15 PM on July fourth.\n\n149\n00:09:13.570 --> 00:09:14.700\nSo very, very straightforward.\n\n150\n00:09:15.780 --> 00:09:18.710\n&gt;&gt; Now, Daniel, full description.\n\n151\n00:09:18.710 --> 00:09:22.950\nHandling 24 hour time programmatically\nis way easier than AM PM parsing and\n\n152\n00:09:22.950 --> 00:09:23.710\nmanaging.\n\n153\n00:09:23.710 --> 00:09:26.600\nSo if you're like,\nI don't really like that, trust me.\n\n154\n00:09:26.600 --> 00:09:27.940\nIt'll make your life a lot easier.\n\n155\n00:09:27.940 --> 00:09:30.190\nBut here's a question about this.\n\n156\n00:09:30.190 --> 00:09:35.310\nDo I have to give a full absolute path\nto the script that I'm going to run?\n\n157\n00:09:35.310 --> 00:09:38.280\nIn Cron, or\ncan I do relative pathing based,\n\n158\n00:09:38.280 --> 00:09:42.560\nI don't know, maybe like a home directory\nor something like that if it's my Cron?\n\n159\n00:09:42.560 --> 00:09:46.360\n&gt;&gt; Yeah, I'm not sure if relative pathing,\nmy gut says yes,\n\n160\n00:09:46.360 --> 00:09:51.200\nbut typically you wanna stick\nwith the full layout, right?\n\n161\n00:09:51.200 --> 00:09:55.230\nThe full path, just as a rule of thumb,\nstick with full path.\n\n162\n00:09:55.230 --> 00:09:57.680\nHey, it's a good security thing.\n\n163\n00:09:57.680 --> 00:10:00.170\nRight?\nCuz if I come in and somehow get access\n\n164\n00:10:00.170 --> 00:10:04.490\nto your con tables, well now I can\nput any script, from any path.\n\n165\n00:10:04.490 --> 00:10:06.070\nI can change all sorts of stuff.\n\n166\n00:10:06.070 --> 00:10:10.490\nSo if I go and\nI change the path variable, right?\n\n167\n00:10:10.490 --> 00:10:11.900\nThere could be a security issue there.\n\n168\n00:10:11.900 --> 00:10:16.570\nSo it's better always, anytime you call\na path inside of any kind of script.\n\n169\n00:10:16.570 --> 00:10:21.300\nIt's always the best practice to put\nthe full path name to set script.\n\n170\n00:10:21.300 --> 00:10:25.310\nThat way, any security [INAUDIBLE]\nthat's occurring will be stimed\n\n171\n00:10:25.310 --> 00:10:26.340\nthrough that, okay?\n\n172\n00:10:26.340 --> 00:10:31.830\nSo its a good security practice and\nI wanna say, I wanna hold me to it but\n\n173\n00:10:31.830 --> 00:10:35.940\nI wanna say that Cron only deals with\nthat full path, it loves the full path,\n\n174\n00:10:35.940 --> 00:10:40.140\nit wants the full path and I want to say\nthat maybe things like using the tilde for\n\n175\n00:10:40.140 --> 00:10:42.020\nthe home directory might be allowed, but\n\n176\n00:10:42.020 --> 00:10:46.130\nother than that,\nstick with full path path names.\n\n177\n00:10:46.130 --> 00:10:47.710\n&gt;&gt; All right, follow up question to that.\n\n178\n00:10:47.710 --> 00:10:49.650\nThis is a script name.\n\n179\n00:10:49.650 --> 00:10:53.020\nLet's say that I want to just\ndo an update and an upgrade.\n\n180\n00:10:53.020 --> 00:10:55.180\nDo I have to place it in\na script at a full path or\n\n181\n00:10:55.180 --> 00:10:58.050\ncan I do inline commands\ninside of Cron tab?\n\n182\n00:10:58.050 --> 00:11:00.090\n&gt;&gt; So if you wanna do-\n&gt;&gt; Like Pseudo App update.\n\n183\n00:11:00.090 --> 00:11:00.680\n&gt;&gt; Okay.\n\n184\n00:11:00.680 --> 00:11:02.420\n&gt;&gt; Enhance Pseudo App upgrade.\n\n185\n00:11:02.420 --> 00:11:06.067\n&gt;&gt; Okay and you wanna do-\n&gt;&gt; Like in a Cron.\n\n186\n00:11:06.067 --> 00:11:07.500\n&gt;&gt; in a Cron.\n&gt;&gt; Yeah, you just,\n\n187\n00:11:07.500 --> 00:11:10.800\nI would separate those outs,\nI mean you could put them in a single line\n\n188\n00:11:10.800 --> 00:11:13.790\nlike that single line command,\nit takes the command but\n\n189\n00:11:13.790 --> 00:11:19.610\nI would probably separate those out\njust to keep things in line, right?\n\n190\n00:11:19.610 --> 00:11:21.070\nBut you can test it out.\n\n191\n00:11:21.070 --> 00:11:24.480\nAgain, I don't know if\nmultiple command strings.\n\n192\n00:11:24.480 --> 00:11:28.150\nYou could probably do like semi-collating\nthings but probably not though.\n\n193\n00:11:28.150 --> 00:11:29.130\nIt needs that full path.\n\n194\n00:11:29.130 --> 00:11:33.410\nYou would have to be typing full paths\nin to each one of those commands, so\n\n195\n00:11:33.410 --> 00:11:36.480\nit would get like super extensive and\na little crazy.\n\n196\n00:11:36.480 --> 00:11:40.730\nIt's better just to keep them separated\nthen the run this one, then run this one,\n\n197\n00:11:40.730 --> 00:11:42.420\nthen run this one and then run that one.\n\n198\n00:11:42.420 --> 00:11:45.240\nOkay?\nAnd it does kind of lend into the idea of\n\n199\n00:11:45.240 --> 00:11:48.310\nthe fact that Cron doesn't care whether or\n\n200\n00:11:48.310 --> 00:11:50.280\nnot one completed before\nthe next one runs.\n\n201\n00:11:50.280 --> 00:11:52.980\nIf you say both of them run at 3:15 AM,\n\n202\n00:11:52.980 --> 00:11:56.260\nit's gonna work them off into two\nseparate processes and run them.\n\n203\n00:11:58.010 --> 00:12:02.650\nAt those times, so it does have its\nlimitations that you don't get that\n\n204\n00:12:02.650 --> 00:12:07.720\nkind of logic behind it to say while\nI want you to wait until app get\n\n205\n00:12:07.720 --> 00:12:13.060\nupdate runs before you run\napp get upgrade, okay?\n\n206\n00:12:13.060 --> 00:12:15.660\nSo you would want to break those down and\nyou would have to do something else,\n\n207\n00:12:15.660 --> 00:12:18.600\nyou would have to use some\nother means like a script.\n\n208\n00:12:18.600 --> 00:12:22.470\nThat said run this and\nuntil you get some sort of output or\n\n209\n00:12:22.470 --> 00:12:27.350\na variable changes to this\nvalue then run the next thing.\n\n210\n00:12:27.350 --> 00:12:29.020\nYou could do it\nprogrammatically like that or\n\n211\n00:12:29.020 --> 00:12:33.120\njust grab some third party utility\nthat has that functionality built in.\n\n212\n00:12:33.120 --> 00:12:36.515\nBut if you're sticking with Cron\nthat's one of the limitations of it.\n\n213\n00:12:36.515 --> 00:12:39.790\n&gt;&gt; Okay so scripts are gonna give us a\nlittle more control over how the job runs\n\n214\n00:12:39.790 --> 00:12:44.510\nand how things and I can foresee it\nmay get a little crazy if you just\n\n215\n00:12:44.510 --> 00:12:47.620\nhave like inline commands and\nstuff and Cron tables.\n\n216\n00:12:47.620 --> 00:12:51.850\nIt might be best if you just keep them\ninside of like a organized folder,\n\n217\n00:12:51.850 --> 00:12:54.860\nmaybe in your home directory\nthat that's pointing to.\n\n218\n00:12:54.860 --> 00:12:57.590\nAnd then you know where everything is and\nyou just point Cron to that.\n\n219\n00:12:57.590 --> 00:12:59.420\n&gt;&gt; Nailed it.\nThat's exactly right.\n\n220\n00:12:59.420 --> 00:13:02.210\nYou can make things a whole lot easier on\nyourself doing exactly what Justin was\n\n221\n00:13:02.210 --> 00:13:02.800\njust talking about.\n\n222\n00:13:02.800 --> 00:13:06.570\nNow there is another way in which\nwe can make Cron run things.\n\n223\n00:13:06.570 --> 00:13:08.260\nAnd it's a little more of an automation.\n\n224\n00:13:08.260 --> 00:13:09.610\nAnd so actually it's a whole lot easier.\n\n225\n00:13:09.610 --> 00:13:15.370\nAnd the fact is that Cron has a specific\nset of folders that they have set up.\n\n226\n00:13:15.370 --> 00:13:19.990\nLet's say if anything is in these folders\nit'll run them in specific times.\n\n227\n00:13:19.990 --> 00:13:24.130\nAnd those specific times are hourly,\nmonthly, daily and weekly.\n\n228\n00:13:24.130 --> 00:13:28.943\nSo, if I want to run something every\nhour I could drop something from\n\n229\n00:13:28.943 --> 00:13:31.576\nCron that hourly anything in there.\n\n230\n00:13:31.576 --> 00:13:33.760\nEvery hour on the hour and\nlook in that folder and\n\n231\n00:13:33.760 --> 00:13:37.610\nhey they're some scripts we need to\nrun here and fire them off, right?\n\n232\n00:13:37.610 --> 00:13:40.880\nVery simple, you just copy your script and\nslap it in there.\n\n233\n00:13:40.880 --> 00:13:42.260\nJust drop them in.\n\n234\n00:13:42.260 --> 00:13:44.830\nIt's drag and drop,\nyou're in Linux system.\n\n235\n00:13:44.830 --> 00:13:48.340\nExcept for the dragging part,\nwe're going to use a CP command to do it.\n\n236\n00:13:48.340 --> 00:13:49.270\nBut you get the idea.\n\n237\n00:13:49.270 --> 00:13:50.770\nIt's basically that easy.\n\n238\n00:13:50.770 --> 00:13:51.940\nLet's take a look at that structure.\n\n239\n00:13:51.940 --> 00:13:54.170\nLet me quit out of here.\n\n240\n00:13:54.170 --> 00:13:55.900\nControl X.\n\n241\n00:13:55.900 --> 00:14:01.390\nAnd we will, we will just ls/xc/cron.\n\n242\n00:14:01.390 --> 00:14:04.510\nAnd here are those folders.\n\n243\n00:14:04.510 --> 00:14:10.070\nSo, you've got Cron daily,\nhourly, monthly, and weekly.\n\n244\n00:14:10.070 --> 00:14:16.530\nSo if I look in Cron daily,\nI've got all these different commands.\n\n245\n00:14:16.530 --> 00:14:18.660\nThese are executable files.\n\n246\n00:14:18.660 --> 00:14:19.590\nI can even go there.\n\n247\n00:14:19.590 --> 00:14:23.191\nLet's see [INAUDIBLE].\n\n248\n00:14:23.191 --> 00:14:26.900\nI got there we go.\n\n249\n00:14:26.900 --> 00:14:33.140\nAnd if I look in there, if I do an ls-l\nyou'll see a bunch of executable commands.\n\n250\n00:14:33.140 --> 00:14:39.456\nSo daily it's gonna run of ports,\nat the compact, BSD main utils, chrome-\n\n251\n00:14:40.480 --> 00:14:45.900\ndesktop, it's gonna run this things,\nwhatever these commands are doing, okay?\n\n252\n00:14:45.900 --> 00:14:49.004\nBecause that's what, if I want to\nrun something on a daily basis,\n\n253\n00:14:49.004 --> 00:14:52.719\nI'll just copy that script right here in\nthis directory and Cron would run it for\n\n254\n00:14:52.719 --> 00:14:54.895\nme on that scheduled time very,\nvery simple.\n\n255\n00:14:54.895 --> 00:14:57.349\nOf course, you can do that with\nthe monthly, weekly, and all that.\n\n256\n00:14:57.349 --> 00:15:02.020\nSo, just, you want to keep things\na little easier, do a little draggy,\n\n257\n00:15:02.020 --> 00:15:05.960\na little droppy, and\nyou should be off to the races there.\n\n258\n00:15:05.960 --> 00:15:10.420\nAs far as Cron goes, that's, again,\nI don't want to give you too much.\n\n259\n00:15:10.420 --> 00:15:15.410\nCron can get a little more complex but\nthat's the basics of getting Cron to run.\n\n260\n00:15:15.410 --> 00:15:19.320\nOn your cron table you have one for\nyourself.\n\n261\n00:15:19.320 --> 00:15:21.360\nCreate the entry there.\n\n262\n00:15:21.360 --> 00:15:23.110\nJust jump in there, do that format,\n\n263\n00:15:23.110 --> 00:15:26.120\ndate, time, all that other good stuff and\nthen your script.\n\n264\n00:15:26.120 --> 00:15:27.320\nAnd then you're off to the races.\n\n265\n00:15:27.320 --> 00:15:28.590\nIf you want something a little more easy,\n\n266\n00:15:28.590 --> 00:15:32.340\nI'm gonna run this every hour on the hour,\nbadabing, drop in that cron.hourly.\n\n267\n00:15:32.340 --> 00:15:33.470\nAnd you're good to go.\n\n268\n00:15:34.510 --> 00:15:39.290\nBut here's the thing,\nhere's the caveats abound in this show,\n\n269\n00:15:39.290 --> 00:15:43.620\nwhen it comes to time,\nit gets really, really screwy, right?\n\n270\n00:15:43.620 --> 00:15:47.868\nWhat if I have something that I want to\nrun, it's got a specific time, right?\n\n271\n00:15:47.868 --> 00:15:51.496\nIt's something here in dots,\nwhat are we in, daily?\n\n272\n00:15:51.496 --> 00:15:55.201\nWhat we in dot daily,\nI get done with work today and\n\n273\n00:15:55.201 --> 00:15:57.856\nI shut my computer off And I go home.\n\n274\n00:15:57.856 --> 00:16:01.500\nIt's the weekend I don't open it up again,\nI don't know, maybe I went on vacation.\n\n275\n00:16:01.500 --> 00:16:03.652\nI don't touch my computer for two days.\n\n276\n00:16:03.652 --> 00:16:05.820\nDid those cron.dailys run?\n\n277\n00:16:05.820 --> 00:16:08.645\nNo they did not because\nthe computer wasn't on.\n\n278\n00:16:08.645 --> 00:16:10.215\nThe computer's not on, for\n\n279\n00:16:10.215 --> 00:16:13.494\nany reason during the time in\nwhich a job was suppose to run.\n\n280\n00:16:13.494 --> 00:16:15.400\nGuess what happens?\n\n281\n00:16:15.400 --> 00:16:18.808\nIt skips our job, it just didn't run or\nwasn't running at the time.\n\n282\n00:16:18.808 --> 00:16:22.995\nI'm looking at it now, because it's\na new day, I'm gonna run it today, so\n\n283\n00:16:22.995 --> 00:16:24.050\nmaybe it was okay.\n\n284\n00:16:24.050 --> 00:16:29.337\nBut what if I needed those jobs to run at\nthose times when the computer was off?\n\n285\n00:16:29.337 --> 00:16:32.220\nThat's a problem cron can handle that.\n\n286\n00:16:32.220 --> 00:16:35.882\nSo the good powers that be in\nthe Linux community have said ,hey,\n\n287\n00:16:35.882 --> 00:16:37.020\nthat's a problem.\n\n288\n00:16:37.020 --> 00:16:38.930\nWhat are we gonna do?\n\n289\n00:16:38.930 --> 00:16:40.458\nSo they developed Anachron.\n\n290\n00:16:40.458 --> 00:16:42.600\nAnd that's a play on.\n\n291\n00:16:42.600 --> 00:16:45.734\nChron is like the idea of a chronograph,\n\n292\n00:16:45.734 --> 00:16:50.171\nright, something like that,\ntime, thinking of time.\n\n293\n00:16:50.171 --> 00:16:54.770\nAnachron is pushing stuff\nback into the time.\n\n294\n00:16:54.770 --> 00:16:58.900\nRight kind of that play on words with\nanachronistically, doing things.\n\n295\n00:16:58.900 --> 00:17:01.600\nSo, think of that when\nyou think of Anacron.\n\n296\n00:17:01.600 --> 00:17:05.645\nSo, saying, hey I missed those\njobs that should have run.\n\n297\n00:17:05.645 --> 00:17:08.620\nI'm gonna run them now that\nthe computer is fired up.\n\n298\n00:17:08.620 --> 00:17:11.088\nNow that the machine is up and\nrunning, those jobs that should run,\n\n299\n00:17:11.088 --> 00:17:12.315\nI'll just go ahead and run them.\n\n300\n00:17:12.315 --> 00:17:14.930\nSo, that you have that, okay.\n\n301\n00:17:14.930 --> 00:17:17.008\nSo, Anacron works for that purposes.\n\n302\n00:17:17.008 --> 00:17:21.369\nLet's see here, let's clear the screen and\n\n303\n00:17:21.369 --> 00:17:28.270\nwe'll cut slash FC slash Anachron tab,\nkind of like cron tab, right?\n\n304\n00:17:28.270 --> 00:17:30.326\nKind of keeps it a thing going on here.\n\n305\n00:17:30.326 --> 00:17:35.979\nThese are the things that I wanted\nto check for the C, did it run,\n\n306\n00:17:35.979 --> 00:17:41.340\ndid it miss a time where\nit's suppose to run, right?\n\n307\n00:17:41.340 --> 00:17:45.018\nLook for these scripts.\nSo it looks in fc cron dot.daily to see,\n\n308\n00:17:45.018 --> 00:17:47.850\ndid those scripts run?\n\n309\n00:17:47.850 --> 00:17:49.060\nIf they didn't, run them now.\n\n310\n00:17:49.060 --> 00:17:51.128\nIf they did great move on.\n\n311\n00:17:51.128 --> 00:17:54.597\nMoving on to on weekly as well and\nthere's Chron monthly.\n\n312\n00:17:54.597 --> 00:17:56.150\nSo it's checking all these things out.\n\n313\n00:17:56.150 --> 00:17:58.092\nAnd it has an interesting format.\n\n314\n00:17:58.092 --> 00:18:02.978\nI actually added this line right\nhere to lay that out for us,\n\n315\n00:18:02.978 --> 00:18:05.535\nin more of a graphical manner.\n\n316\n00:18:05.535 --> 00:18:13.080\nSo, this is the period in days\nin which we should be checking.\n\n317\n00:18:13.080 --> 00:18:16.385\nCheck every one day, that's in Chro.\n\n318\n00:18:16.385 --> 00:18:16.888\nAll right.\n\n319\n00:18:16.888 --> 00:18:21.024\nAnd when it says delay,\nit means after the computer starts up,\n\n320\n00:18:21.024 --> 00:18:23.220\nwait x amount of time in minutes.\n\n321\n00:18:23.220 --> 00:18:26.082\nBefore you run this command.\n\n322\n00:18:26.082 --> 00:18:28.415\nAll right, so it'll check and\nsee if it's been run and\n\n323\n00:18:28.415 --> 00:18:31.638\nit'll wait five minutes before it\nactually runs it if it hasn't been run.\n\n324\n00:18:31.638 --> 00:18:32.807\nOkay?\n\n325\n00:18:32.807 --> 00:18:36.290\nThe identifier, just kind of a label.\n\n326\n00:18:36.290 --> 00:18:37.595\nWhat is it we're checking?\n\n327\n00:18:37.595 --> 00:18:39.000\nYou can make that say whatever you like.\n\n328\n00:18:39.000 --> 00:18:42.769\nSo, if I'm running cron.daily\nlike they are here.\n\n329\n00:18:42.769 --> 00:18:48.664\nJust to say, I'm just checking cron.com\nif not, if it didn't run yesterday and\n\n330\n00:18:48.664 --> 00:18:52.730\nfive minutes after the machines\nstarts run that for me, please.\n\n331\n00:18:52.730 --> 00:18:57.796\nAnd then these run parts thing,\nthat's more of a, that's kind of\n\n332\n00:18:57.796 --> 00:19:03.871\na part of that execution, you won't\nneed that for your scripts neccesarilly.\n\n333\n00:19:03.871 --> 00:19:06.316\nThat's a little more than I want\nto give you at this point in time,\n\n334\n00:19:06.316 --> 00:19:07.258\nas far as how cron works.\n\n335\n00:19:07.258 --> 00:19:10.500\nI just want to give you the quick and\ndirty, the basic stuff so\n\n336\n00:19:10.500 --> 00:19:12.863\nthat you can get stuff\nto work in [INAUDIBLE].\n\n337\n00:19:12.863 --> 00:19:20.010\nBut what's really important is this, which\nis the full path to what I want to run.\n\n338\n00:19:20.010 --> 00:19:24.264\nSo anything in that directory or command,\nthat's what I want you to follow.\n\n339\n00:19:24.264 --> 00:19:26.206\nThat's what I want you to do, okay?\n\n340\n00:19:26.206 --> 00:19:29.190\nSo there we go,\npretty straightforward formatting.\n\n341\n00:19:29.190 --> 00:19:30.006\nI could jump in here.\n\n342\n00:19:30.006 --> 00:19:34.506\nAlso you could use this at monthly so\nif I wanted to run monthly instead of\n\n343\n00:19:34.506 --> 00:19:38.716\nputting 30 as days, or 31 as days,\nmonthly can come in handy.\n\n344\n00:19:38.716 --> 00:19:43.000\nThat's just a shortcut they added to it.\n\n345\n00:19:43.000 --> 00:19:44.253\nSo what else?\n\n346\n00:19:44.253 --> 00:19:46.911\nWe looked at the format,\nlet's look at this.\n\n347\n00:19:46.911 --> 00:19:52.428\nLet's cat,\nthis cats var/spool/anichron and\n\n348\n00:19:52.428 --> 00:19:55.456\nlet's take a look at that.\n\n349\n00:19:55.456 --> 00:19:59.026\nYou get cron daily, monthly, and weekly.\n\n350\n00:19:59.026 --> 00:20:03.130\nSo it's looking at these files right here\nfor that monthly, daily, and weekly.\n\n351\n00:20:03.130 --> 00:20:06.785\nNow, another interesting thing is,\nyou don't see hourly,\n\n352\n00:20:06.785 --> 00:20:09.678\nwe're not seeing minute,\nespecially minute.\n\n353\n00:20:09.678 --> 00:20:12.080\nWho cares about those two times, right?\n\n354\n00:20:12.080 --> 00:20:15.478\nIf they run every minute or\nevery hour, it doesn't really matter.\n\n355\n00:20:15.478 --> 00:20:17.626\nSoon as you pop your computer on,\n\n356\n00:20:17.626 --> 00:20:20.941\nit's gonna run within a very\nshort amount of time.\n\n357\n00:20:20.941 --> 00:20:24.290\nSo, Anachron doesn't\nconcern itself with those.\n\n358\n00:20:24.290 --> 00:20:28.583\nIt only concerns itself for\nlarger spans of time, okay?\n\n359\n00:20:28.583 --> 00:20:32.581\nA full period in which you probably\nwould have want to run something but\n\n360\n00:20:32.581 --> 00:20:35.450\nyou weren't able to for\nwhatever reason, okay?\n\n361\n00:20:35.450 --> 00:20:37.880\nSo you won't see those there.\n\n362\n00:20:37.880 --> 00:20:38.610\nWhat else?\n\n363\n00:20:38.610 --> 00:20:42.573\nThe timestamps are tracked here.\n\n364\n00:20:42.573 --> 00:20:45.700\nThat's where it's looking,\nwas that Ron, yes or no?\n\n365\n00:20:45.700 --> 00:20:50.949\nSo we can look at that by, let's say\nwe wanna look in, we're going to daily.\n\n366\n00:20:50.949 --> 00:20:55.171\nOkay, let's do daily, and then we'll say,\n\n367\n00:20:55.171 --> 00:20:59.734\nlet's see what's in there, daily, bam.\n\n368\n00:20:59.734 --> 00:21:05.590\nPermission denied,\nthat's not, trying to see.\n\n369\n00:21:05.590 --> 00:21:06.867\nMake sure I'm doing this right.\n\n370\n00:21:06.867 --> 00:21:09.337\nI see what [INAUDIBLE].\n\n371\n00:21:09.337 --> 00:21:10.494\nI'm messing myself up.\n\n372\n00:21:10.494 --> 00:21:16.040\nI need to, well not, well not,\nPseudo, we've done it right there,\n\n373\n00:21:16.040 --> 00:21:22.540\ndaily and then go back to the beginning\nand just have the little, no, there we go.\n\n374\n00:21:22.540 --> 00:21:23.400\nThere we go.\n\n375\n00:21:23.400 --> 00:21:27.600\nSo now we get time stamp that says,\nthis is the last time it was run.\n\n376\n00:21:27.600 --> 00:21:30.540\nSo that's how Anachron is\nchecking those folders.\n\n377\n00:21:30.540 --> 00:21:32.568\nIt has one for each one.\n\n378\n00:21:32.568 --> 00:21:35.030\nThat's what I was screwing\naround in my head.\n\n379\n00:21:35.030 --> 00:21:38.907\nIf I wanted to check weekly, I do that.\n\n380\n00:21:38.907 --> 00:21:41.105\nThere's the last time the weekly was run.\n\n381\n00:21:41.105 --> 00:21:44.161\nAnd then of course, monthly.\n\n382\n00:21:44.161 --> 00:21:50.202\nA little, you get so\nused to working inside of the editor.\n\n383\n00:21:50.202 --> 00:21:52.881\nIt'll totally mess you up,\nmonthly not monthly.\n\n384\n00:21:52.881 --> 00:21:54.066\nThere you go.\n\n385\n00:21:54.066 --> 00:21:57.927\nSo that's where that timestamp is kept so\n\n386\n00:21:57.927 --> 00:22:01.910\nthat it can realize I'm at this time.\n\n387\n00:22:01.910 --> 00:22:05.530\nThis is the last time this things\nwas actually checked to run.\n\n388\n00:22:05.530 --> 00:22:07.460\nI need to actually do\nthe thing I need to do.\n\n389\n00:22:07.460 --> 00:22:12.384\nI need Anaconda fire off that job X amount\nof time which is at the delay inside\n\n390\n00:22:12.384 --> 00:22:13.880\nof that anacon table.\n\n391\n00:22:13.880 --> 00:22:19.192\nSo there you go, Anacon will help you\nmake sure that if your job does not run,\n\n392\n00:22:19.192 --> 00:22:23.923\nit will run it for you if it's in\nthat specific amount of time of which\n\n393\n00:22:23.923 --> 00:22:27.589\nit checks versus the daily,\nmonthly, and weekly.\n\n394\n00:22:27.589 --> 00:22:29.085\nOther than that Justin,\n\n395\n00:22:29.085 --> 00:22:33.870\nI think that’s about all I’ve got up my\nsleeve when it comes to control issues.\n\n396\n00:22:33.870 --> 00:22:37.320\n&gt;&gt; Well before we head out,\nI do have one quick question.\n\n397\n00:22:37.320 --> 00:22:40.148\nWe need to make sure that we\nturn on the executable bit for\n\n398\n00:22:40.148 --> 00:22:43.170\nany of those files that live\nin those cron folders, right?\n\n399\n00:22:43.170 --> 00:22:46.694\nOtherwise, it will look like they work but\nthey don't really work, right?\n\n400\n00:22:46.694 --> 00:22:48.030\n&gt;&gt; That's exactly right.\n\n401\n00:22:48.030 --> 00:22:52.604\nRemember I checked when we look in cron,\nthose jobs inside that con weekly or\n\n402\n00:22:52.604 --> 00:22:54.470\nwhatever it was, cron daily.\n\n403\n00:22:54.470 --> 00:22:57.595\nI made sure, I saw the x on all those.\n\n404\n00:22:57.595 --> 00:23:00.978\nIf you drop a script in there which\nyou have not made executable,\n\n405\n00:23:00.978 --> 00:23:03.370\nthen you're gonna have a rough time, okay?\n\n406\n00:23:03.370 --> 00:23:04.765\nSo just be aware of that.\n\n407\n00:23:04.765 --> 00:23:08.795\nThat's a great reminder for us,\nI've reminded you throughout the series,\n\n408\n00:23:08.795 --> 00:23:10.100\nit's a great reminder.\n\n409\n00:23:10.100 --> 00:23:14.000\nNow, next time you create a script and you\nwant it to run, it's got to be executable.\n\n410\n00:23:14.000 --> 00:23:17.805\nSo just verify that, because if you look\nand you see your script did not run,\n\n411\n00:23:17.805 --> 00:23:21.150\nit's probably a really good\ntroubleshooting spot to start with.\n\n412\n00:23:21.150 --> 00:23:24.334\nAnd then, check your format of\nthe cron table, the anachron,\n\n413\n00:23:24.334 --> 00:23:27.050\nwhatever the case is that\nyou're working with, AT.\n\n414\n00:23:27.050 --> 00:23:31.253\nAnd make sure everything looks right,\nand does fire off correctly.\n\n415\n00:23:31.253 --> 00:23:33.860\nOther than that, I think that's\nall we got for today, my man.\n\n416\n00:23:33.860 --> 00:23:36.312\n&gt;&gt; Well, thanks for illuminating that.\n\n417\n00:23:36.312 --> 00:23:40.022\nI'm not saying I'd necessarily encounter\nthem trying to forgive the term that's\n\n418\n00:23:40.022 --> 00:23:40.660\nexecutable.\n\n419\n00:23:40.660 --> 00:23:42.755\nLet's just say there were some screaming.\n\n420\n00:23:42.755 --> 00:23:45.770\n&gt;&gt; [LAUGH] And just like,\npleading with my computer.\n\n421\n00:23:45.770 --> 00:23:48.033\n&gt;&gt; Did you crumble in a corner,\nsobbing uncontrollably?\n\n422\n00:23:48.033 --> 00:23:48.898\n&gt;&gt; I did.\n\n423\n00:23:48.898 --> 00:23:49.705\nI did, I did.\n\n424\n00:23:49.705 --> 00:23:50.589\nThat's how I did.\n\n425\n00:23:50.589 --> 00:23:53.794\nBut, Daniel, thanks so much for\nreviewing crron and antichron, and\n\n426\n00:23:53.794 --> 00:23:57.054\nhopefully that'll help you automate and\nkinda lighten up your day, so\n\n427\n00:23:57.054 --> 00:23:58.870\nthat you can take care of other things.\n\n428\n00:23:58.870 --> 00:24:02.429\nAnd you don't have to worry about, did I\nrun this script, did I schedule this, so\n\n429\n00:24:02.429 --> 00:24:03.160\non and so forth.\n\n430\n00:24:03.160 --> 00:24:07.060\nBut it does look like we are gonna go\nahead and wrap up part two of, well,\n\n431\n00:24:07.060 --> 00:24:08.570\ncontrolling our scripts.\n\n432\n00:24:08.570 --> 00:24:12.305\nBut for now, we're gonna go ahead and\nsign off for ITProTV.\n\n433\n00:24:12.305 --> 00:24:13.556\nI've been your host Justin Dennison.\n\n434\n00:24:13.556 --> 00:24:14.619\n&gt;&gt; And I'm Daniel Lowrie.\n\n435\n00:24:14.619 --> 00:24:15.910\n&gt;&gt; And we'll see you next time.\n\n436\n00:24:15.910 --> 00:24:22.831\n[MUSIC]\n\n437\n00:24:22.831 --> 00:24:25.936\nThank you for watching ITProTV.\n\n",
          "vimeoId": "237759042"
        }
      ],
      "title": "Script Control"
    }
  ],
  "url": "linux-shell-scripting-basics",
  "vLab": false
}
